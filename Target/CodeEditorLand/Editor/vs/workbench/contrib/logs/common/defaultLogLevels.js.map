{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/logs/common/defaultLogLevels.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Emitter, type Event } from \"../../../../base/common/event.js\";\nimport { parse } from \"../../../../base/common/json.js\";\nimport { Disposable } from \"../../../../base/common/lifecycle.js\";\nimport { isString, isUndefined } from \"../../../../base/common/types.js\";\nimport { EXTENSION_IDENTIFIER_WITH_LOG_REGEX } from \"../../../../platform/environment/common/environmentService.js\";\nimport {\n\tFileOperationResult,\n\tIFileService,\n\ttoFileOperationResult,\n} from \"../../../../platform/files/common/files.js\";\nimport {\n\tInstantiationType,\n\tregisterSingleton,\n} from \"../../../../platform/instantiation/common/extensions.js\";\nimport { createDecorator } from \"../../../../platform/instantiation/common/instantiation.js\";\nimport {\n\tILogService,\n\tILoggerService,\n\ttype LogLevel,\n\tLogLevelToString,\n\tgetLogLevel,\n\tparseLogLevel,\n} from \"../../../../platform/log/common/log.js\";\nimport { IJSONEditingService } from \"../../../services/configuration/common/jsonEditing.js\";\nimport { IWorkbenchEnvironmentService } from \"../../../services/environment/common/environmentService.js\";\n\ninterface ParsedArgvLogLevels {\n\tdefault?: LogLevel;\n\textensions?: [string, LogLevel][];\n}\n\nexport type DefaultLogLevels = Required<Readonly<ParsedArgvLogLevels>>;\n\nexport const IDefaultLogLevelsService =\n\tcreateDecorator<IDefaultLogLevelsService>(\"IDefaultLogLevelsService\");\n\nexport interface IDefaultLogLevelsService {\n\treadonly _serviceBrand: undefined;\n\n\t/**\n\t * An event which fires when default log levels are changed\n\t */\n\treadonly onDidChangeDefaultLogLevels: Event<void>;\n\n\tgetDefaultLogLevels(): Promise<DefaultLogLevels>;\n\n\tgetDefaultLogLevel(extensionId?: string): Promise<LogLevel>;\n\n\tsetDefaultLogLevel(logLevel: LogLevel, extensionId?: string): Promise<void>;\n\n\tmigrateLogLevels(): void;\n}\n\nclass DefaultLogLevelsService\n\textends Disposable\n\timplements IDefaultLogLevelsService\n{\n\t_serviceBrand: undefined;\n\n\tprivate _onDidChangeDefaultLogLevels = this._register(new Emitter<void>());\n\treadonly onDidChangeDefaultLogLevels =\n\t\tthis._onDidChangeDefaultLogLevels.event;\n\n\tconstructor(\n\t\t@IWorkbenchEnvironmentService private readonly environmentService: IWorkbenchEnvironmentService,\n\t\t@IFileService private readonly fileService: IFileService,\n\t\t@IJSONEditingService private readonly jsonEditingService: IJSONEditingService,\n\t\t@ILogService private readonly logService: ILogService,\n\t\t@ILoggerService private readonly loggerService: ILoggerService,\n\t) {\n\t\tsuper();\n\t}\n\n\tasync getDefaultLogLevels(): Promise<DefaultLogLevels> {\n\t\tconst argvLogLevel = await this._parseLogLevelsFromArgv();\n\t\treturn {\n\t\t\tdefault: argvLogLevel?.default ?? this._getDefaultLogLevelFromEnv(),\n\t\t\textensions:\n\t\t\t\targvLogLevel?.extensions ??\n\t\t\t\tthis._getExtensionsDefaultLogLevelsFromEnv(),\n\t\t};\n\t}\n\n\tasync getDefaultLogLevel(extensionId?: string): Promise<LogLevel> {\n\t\tconst argvLogLevel = (await this._parseLogLevelsFromArgv()) ?? {};\n\t\tif (extensionId) {\n\t\t\textensionId = extensionId.toLowerCase();\n\t\t\treturn this._getDefaultLogLevel(argvLogLevel, extensionId);\n\t\t} else {\n\t\t\treturn this._getDefaultLogLevel(argvLogLevel);\n\t\t}\n\t}\n\n\tasync setDefaultLogLevel(\n\t\tdefaultLogLevel: LogLevel,\n\t\textensionId?: string,\n\t): Promise<void> {\n\t\tconst argvLogLevel = (await this._parseLogLevelsFromArgv()) ?? {};\n\t\tif (extensionId) {\n\t\t\textensionId = extensionId.toLowerCase();\n\t\t\tconst currentDefaultLogLevel = this._getDefaultLogLevel(\n\t\t\t\targvLogLevel,\n\t\t\t\textensionId,\n\t\t\t);\n\t\t\targvLogLevel.extensions = argvLogLevel.extensions ?? [];\n\t\t\tconst extension = argvLogLevel.extensions.find(\n\t\t\t\t([extension]) => extension === extensionId,\n\t\t\t);\n\t\t\tif (extension) {\n\t\t\t\textension[1] = defaultLogLevel;\n\t\t\t} else {\n\t\t\t\targvLogLevel.extensions.push([extensionId, defaultLogLevel]);\n\t\t\t}\n\t\t\tawait this._writeLogLevelsToArgv(argvLogLevel);\n\t\t\tconst extensionLoggers = [\n\t\t\t\t...this.loggerService.getRegisteredLoggers(),\n\t\t\t].filter(\n\t\t\t\t(logger) =>\n\t\t\t\t\tlogger.extensionId &&\n\t\t\t\t\tlogger.extensionId.toLowerCase() === extensionId,\n\t\t\t);\n\t\t\tfor (const { resource } of extensionLoggers) {\n\t\t\t\tif (\n\t\t\t\t\tthis.loggerService.getLogLevel(resource) ===\n\t\t\t\t\tcurrentDefaultLogLevel\n\t\t\t\t) {\n\t\t\t\t\tthis.loggerService.setLogLevel(resource, defaultLogLevel);\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tconst currentLogLevel = this._getDefaultLogLevel(argvLogLevel);\n\t\t\targvLogLevel.default = defaultLogLevel;\n\t\t\tawait this._writeLogLevelsToArgv(argvLogLevel);\n\t\t\tif (this.loggerService.getLogLevel() === currentLogLevel) {\n\t\t\t\tthis.loggerService.setLogLevel(defaultLogLevel);\n\t\t\t}\n\t\t}\n\t\tthis._onDidChangeDefaultLogLevels.fire();\n\t}\n\n\tprivate _getDefaultLogLevel(\n\t\targvLogLevels: ParsedArgvLogLevels,\n\t\textension?: string,\n\t): LogLevel {\n\t\tif (extension) {\n\t\t\tconst extensionLogLevel = argvLogLevels.extensions?.find(\n\t\t\t\t([extensionId]) => extensionId === extension,\n\t\t\t);\n\t\t\tif (extensionLogLevel) {\n\t\t\t\treturn extensionLogLevel[1];\n\t\t\t}\n\t\t}\n\t\treturn argvLogLevels.default ?? getLogLevel(this.environmentService);\n\t}\n\n\tprivate async _writeLogLevelsToArgv(\n\t\tlogLevels: ParsedArgvLogLevels,\n\t): Promise<void> {\n\t\tconst logLevelsValue: string[] = [];\n\t\tif (!isUndefined(logLevels.default)) {\n\t\t\tlogLevelsValue.push(LogLevelToString(logLevels.default));\n\t\t}\n\t\tfor (const [extension, logLevel] of logLevels.extensions ?? []) {\n\t\t\tlogLevelsValue.push(`${extension}=${LogLevelToString(logLevel)}`);\n\t\t}\n\t\tawait this.jsonEditingService.write(\n\t\t\tthis.environmentService.argvResource,\n\t\t\t[\n\t\t\t\t{\n\t\t\t\t\tpath: [\"log-level\"],\n\t\t\t\t\tvalue: logLevelsValue.length ? logLevelsValue : undefined,\n\t\t\t\t},\n\t\t\t],\n\t\t\ttrue,\n\t\t);\n\t}\n\n\tprivate async _parseLogLevelsFromArgv(): Promise<\n\t\tParsedArgvLogLevels | undefined\n\t> {\n\t\tconst result: ParsedArgvLogLevels = { extensions: [] };\n\t\tconst logLevels = await this._readLogLevelsFromArgv();\n\t\tfor (const extensionLogLevel of logLevels) {\n\t\t\tconst matches =\n\t\t\t\tEXTENSION_IDENTIFIER_WITH_LOG_REGEX.exec(extensionLogLevel);\n\t\t\tif (matches && matches[1] && matches[2]) {\n\t\t\t\tconst logLevel = parseLogLevel(matches[2]);\n\t\t\t\tif (!isUndefined(logLevel)) {\n\t\t\t\t\tresult.extensions?.push([\n\t\t\t\t\t\tmatches[1].toLowerCase(),\n\t\t\t\t\t\tlogLevel,\n\t\t\t\t\t]);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tconst logLevel = parseLogLevel(extensionLogLevel);\n\t\t\t\tif (!isUndefined(logLevel)) {\n\t\t\t\t\tresult.default = logLevel;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn !isUndefined(result.default) || result.extensions?.length\n\t\t\t? result\n\t\t\t: undefined;\n\t}\n\n\tasync migrateLogLevels(): Promise<void> {\n\t\tconst logLevels = await this._readLogLevelsFromArgv();\n\t\tconst regex = /^([^.]+\\..+):(.+)$/;\n\t\tif (\n\t\t\tlogLevels.some((extensionLogLevel) => regex.test(extensionLogLevel))\n\t\t) {\n\t\t\tconst argvLogLevel = await this._parseLogLevelsFromArgv();\n\t\t\tif (argvLogLevel) {\n\t\t\t\tawait this._writeLogLevelsToArgv(argvLogLevel);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate async _readLogLevelsFromArgv(): Promise<string[]> {\n\t\ttry {\n\t\t\tconst content = await this.fileService.readFile(\n\t\t\t\tthis.environmentService.argvResource,\n\t\t\t);\n\t\t\tconst argv: { \"log-level\"?: string | string[] } = parse(\n\t\t\t\tcontent.value.toString(),\n\t\t\t);\n\t\t\treturn isString(argv[\"log-level\"])\n\t\t\t\t? [argv[\"log-level\"]]\n\t\t\t\t: Array.isArray(argv[\"log-level\"])\n\t\t\t\t\t? argv[\"log-level\"]\n\t\t\t\t\t: [];\n\t\t} catch (error) {\n\t\t\tif (\n\t\t\t\ttoFileOperationResult(error) !==\n\t\t\t\tFileOperationResult.FILE_NOT_FOUND\n\t\t\t) {\n\t\t\t\tthis.logService.error(error);\n\t\t\t}\n\t\t}\n\t\treturn [];\n\t}\n\n\tprivate _getDefaultLogLevelFromEnv(): LogLevel {\n\t\treturn getLogLevel(this.environmentService);\n\t}\n\n\tprivate _getExtensionsDefaultLogLevelsFromEnv(): [string, LogLevel][] {\n\t\tconst result: [string, LogLevel][] = [];\n\t\tfor (const [extension, logLevelValue] of this.environmentService\n\t\t\t.extensionLogLevel ?? []) {\n\t\t\tconst logLevel = parseLogLevel(logLevelValue);\n\t\t\tif (!isUndefined(logLevel)) {\n\t\t\t\tresult.push([extension, logLevel]);\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n}\n\nregisterSingleton(\n\tIDefaultLogLevelsService,\n\tDefaultLogLevelsService,\n\tInstantiationType.Delayed,\n);\n"],
  "mappings": "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",
  "names": ["extension"]
}
