{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/logs/common/defaultLogLevels.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { ILogService, ILoggerService, LogLevel, LogLevelToString, getLogLevel, parseLogLevel } from '../../../../platform/log/common/log.js';\nimport { createDecorator } from '../../../../platform/instantiation/common/instantiation.js';\nimport { IWorkbenchEnvironmentService } from '../../../services/environment/common/environmentService.js';\nimport { FileOperationResult, IFileService, toFileOperationResult } from '../../../../platform/files/common/files.js';\nimport { IJSONEditingService } from '../../../services/configuration/common/jsonEditing.js';\nimport { isString, isUndefined } from '../../../../base/common/types.js';\nimport { EXTENSION_IDENTIFIER_WITH_LOG_REGEX } from '../../../../platform/environment/common/environmentService.js';\nimport { InstantiationType, registerSingleton } from '../../../../platform/instantiation/common/extensions.js';\nimport { parse } from '../../../../base/common/json.js';\nimport { Disposable } from '../../../../base/common/lifecycle.js';\nimport { Emitter, Event } from '../../../../base/common/event.js';\n\ninterface ParsedArgvLogLevels {\n\tdefault?: LogLevel;\n\textensions?: [string, LogLevel][];\n}\n\nexport type DefaultLogLevels = Required<Readonly<ParsedArgvLogLevels>>;\n\nexport const IDefaultLogLevelsService = createDecorator<IDefaultLogLevelsService>('IDefaultLogLevelsService');\n\nexport interface IDefaultLogLevelsService {\n\n\treadonly _serviceBrand: undefined;\n\n\t/**\n\t * An event which fires when default log levels are changed\n\t */\n\treadonly onDidChangeDefaultLogLevels: Event<void>;\n\n\tgetDefaultLogLevels(): Promise<DefaultLogLevels>;\n\n\tgetDefaultLogLevel(extensionId?: string): Promise<LogLevel>;\n\n\tsetDefaultLogLevel(logLevel: LogLevel, extensionId?: string): Promise<void>;\n\n\tmigrateLogLevels(): void;\n}\n\nclass DefaultLogLevelsService extends Disposable implements IDefaultLogLevelsService {\n\n\t_serviceBrand: undefined;\n\n\tprivate _onDidChangeDefaultLogLevels = this._register(new Emitter<void>);\n\treadonly onDidChangeDefaultLogLevels = this._onDidChangeDefaultLogLevels.event;\n\n\tconstructor(\n\t\t@IWorkbenchEnvironmentService private readonly environmentService: IWorkbenchEnvironmentService,\n\t\t@IFileService private readonly fileService: IFileService,\n\t\t@IJSONEditingService private readonly jsonEditingService: IJSONEditingService,\n\t\t@ILogService private readonly logService: ILogService,\n\t\t@ILoggerService private readonly loggerService: ILoggerService,\n\t) {\n\t\tsuper();\n\t}\n\n\tasync getDefaultLogLevels(): Promise<DefaultLogLevels> {\n\t\tconst argvLogLevel = await this._parseLogLevelsFromArgv();\n\t\treturn {\n\t\t\tdefault: argvLogLevel?.default ?? this._getDefaultLogLevelFromEnv(),\n\t\t\textensions: argvLogLevel?.extensions ?? this._getExtensionsDefaultLogLevelsFromEnv()\n\t\t};\n\t}\n\n\tasync getDefaultLogLevel(extensionId?: string): Promise<LogLevel> {\n\t\tconst argvLogLevel = await this._parseLogLevelsFromArgv() ?? {};\n\t\tif (extensionId) {\n\t\t\textensionId = extensionId.toLowerCase();\n\t\t\treturn this._getDefaultLogLevel(argvLogLevel, extensionId);\n\t\t} else {\n\t\t\treturn this._getDefaultLogLevel(argvLogLevel);\n\t\t}\n\t}\n\n\tasync setDefaultLogLevel(defaultLogLevel: LogLevel, extensionId?: string): Promise<void> {\n\t\tconst argvLogLevel = await this._parseLogLevelsFromArgv() ?? {};\n\t\tif (extensionId) {\n\t\t\textensionId = extensionId.toLowerCase();\n\t\t\tconst currentDefaultLogLevel = this._getDefaultLogLevel(argvLogLevel, extensionId);\n\t\t\targvLogLevel.extensions = argvLogLevel.extensions ?? [];\n\t\t\tconst extension = argvLogLevel.extensions.find(([extension]) => extension === extensionId);\n\t\t\tif (extension) {\n\t\t\t\textension[1] = defaultLogLevel;\n\t\t\t} else {\n\t\t\t\targvLogLevel.extensions.push([extensionId, defaultLogLevel]);\n\t\t\t}\n\t\t\tawait this._writeLogLevelsToArgv(argvLogLevel);\n\t\t\tconst extensionLoggers = [...this.loggerService.getRegisteredLoggers()].filter(logger => logger.extensionId && logger.extensionId.toLowerCase() === extensionId);\n\t\t\tfor (const { resource } of extensionLoggers) {\n\t\t\t\tif (this.loggerService.getLogLevel(resource) === currentDefaultLogLevel) {\n\t\t\t\t\tthis.loggerService.setLogLevel(resource, defaultLogLevel);\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tconst currentLogLevel = this._getDefaultLogLevel(argvLogLevel);\n\t\t\targvLogLevel.default = defaultLogLevel;\n\t\t\tawait this._writeLogLevelsToArgv(argvLogLevel);\n\t\t\tif (this.loggerService.getLogLevel() === currentLogLevel) {\n\t\t\t\tthis.loggerService.setLogLevel(defaultLogLevel);\n\t\t\t}\n\t\t}\n\t\tthis._onDidChangeDefaultLogLevels.fire();\n\t}\n\n\tprivate _getDefaultLogLevel(argvLogLevels: ParsedArgvLogLevels, extension?: string): LogLevel {\n\t\tif (extension) {\n\t\t\tconst extensionLogLevel = argvLogLevels.extensions?.find(([extensionId]) => extensionId === extension);\n\t\t\tif (extensionLogLevel) {\n\t\t\t\treturn extensionLogLevel[1];\n\t\t\t}\n\t\t}\n\t\treturn argvLogLevels.default ?? getLogLevel(this.environmentService);\n\t}\n\n\tprivate async _writeLogLevelsToArgv(logLevels: ParsedArgvLogLevels): Promise<void> {\n\t\tconst logLevelsValue: string[] = [];\n\t\tif (!isUndefined(logLevels.default)) {\n\t\t\tlogLevelsValue.push(LogLevelToString(logLevels.default));\n\t\t}\n\t\tfor (const [extension, logLevel] of logLevels.extensions ?? []) {\n\t\t\tlogLevelsValue.push(`${extension}=${LogLevelToString(logLevel)}`);\n\t\t}\n\t\tawait this.jsonEditingService.write(this.environmentService.argvResource, [{ path: ['log-level'], value: logLevelsValue.length ? logLevelsValue : undefined }], true);\n\t}\n\n\tprivate async _parseLogLevelsFromArgv(): Promise<ParsedArgvLogLevels | undefined> {\n\t\tconst result: ParsedArgvLogLevels = { extensions: [] };\n\t\tconst logLevels = await this._readLogLevelsFromArgv();\n\t\tfor (const extensionLogLevel of logLevels) {\n\t\t\tconst matches = EXTENSION_IDENTIFIER_WITH_LOG_REGEX.exec(extensionLogLevel);\n\t\t\tif (matches && matches[1] && matches[2]) {\n\t\t\t\tconst logLevel = parseLogLevel(matches[2]);\n\t\t\t\tif (!isUndefined(logLevel)) {\n\t\t\t\t\tresult.extensions?.push([matches[1].toLowerCase(), logLevel]);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tconst logLevel = parseLogLevel(extensionLogLevel);\n\t\t\t\tif (!isUndefined(logLevel)) {\n\t\t\t\t\tresult.default = logLevel;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn !isUndefined(result.default) || result.extensions?.length ? result : undefined;\n\t}\n\n\tasync migrateLogLevels(): Promise<void> {\n\t\tconst logLevels = await this._readLogLevelsFromArgv();\n\t\tconst regex = /^([^.]+\\..+):(.+)$/;\n\t\tif (logLevels.some(extensionLogLevel => regex.test(extensionLogLevel))) {\n\t\t\tconst argvLogLevel = await this._parseLogLevelsFromArgv();\n\t\t\tif (argvLogLevel) {\n\t\t\t\tawait this._writeLogLevelsToArgv(argvLogLevel);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate async _readLogLevelsFromArgv(): Promise<string[]> {\n\t\ttry {\n\t\t\tconst content = await this.fileService.readFile(this.environmentService.argvResource);\n\t\t\tconst argv: { 'log-level'?: string | string[] } = parse(content.value.toString());\n\t\t\treturn isString(argv['log-level']) ? [argv['log-level']] : Array.isArray(argv['log-level']) ? argv['log-level'] : [];\n\t\t} catch (error) {\n\t\t\tif (toFileOperationResult(error) !== FileOperationResult.FILE_NOT_FOUND) {\n\t\t\t\tthis.logService.error(error);\n\t\t\t}\n\t\t}\n\t\treturn [];\n\t}\n\n\tprivate _getDefaultLogLevelFromEnv(): LogLevel {\n\t\treturn getLogLevel(this.environmentService);\n\t}\n\n\tprivate _getExtensionsDefaultLogLevelsFromEnv(): [string, LogLevel][] {\n\t\tconst result: [string, LogLevel][] = [];\n\t\tfor (const [extension, logLevelValue] of this.environmentService.extensionLogLevel ?? []) {\n\t\t\tconst logLevel = parseLogLevel(logLevelValue);\n\t\t\tif (!isUndefined(logLevel)) {\n\t\t\t\tresult.push([extension, logLevel]);\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n}\n\nregisterSingleton(IDefaultLogLevelsService, DefaultLogLevelsService, InstantiationType.Delayed);\n"],
  "mappings": "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",
  "names": ["extension"]
}
