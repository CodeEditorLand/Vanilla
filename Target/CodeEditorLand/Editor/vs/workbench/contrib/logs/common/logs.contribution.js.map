{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/logs/common/logs.contribution.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as nls from '../../../../nls.js';\nimport { Registry } from '../../../../platform/registry/common/platform.js';\nimport { Categories } from '../../../../platform/action/common/actionCommonCategories.js';\nimport { Action2, registerAction2 } from '../../../../platform/actions/common/actions.js';\nimport { SetLogLevelAction } from './logsActions.js';\nimport { IWorkbenchContribution, IWorkbenchContributionsRegistry, Extensions as WorkbenchExtensions } from '../../../common/contributions.js';\nimport { IFileService, whenProviderRegistered } from '../../../../platform/files/common/files.js';\nimport { IOutputChannelRegistry, IOutputService, Extensions } from '../../../services/output/common/output.js';\nimport { Disposable, DisposableMap, DisposableStore, toDisposable } from '../../../../base/common/lifecycle.js';\nimport { CONTEXT_LOG_LEVEL, ILogService, ILoggerResource, ILoggerService, LogLevel, LogLevelToString, isLogLevel } from '../../../../platform/log/common/log.js';\nimport { LifecyclePhase } from '../../../services/lifecycle/common/lifecycle.js';\nimport { IInstantiationService, ServicesAccessor } from '../../../../platform/instantiation/common/instantiation.js';\nimport { URI } from '../../../../base/common/uri.js';\nimport { Event } from '../../../../base/common/event.js';\nimport { windowLogId, showWindowLogActionId } from '../../../services/log/common/logConstants.js';\nimport { createCancelablePromise, timeout } from '../../../../base/common/async.js';\nimport { CancellationError, getErrorMessage, isCancellationError } from '../../../../base/common/errors.js';\nimport { CancellationToken } from '../../../../base/common/cancellation.js';\nimport { IDefaultLogLevelsService } from './defaultLogLevels.js';\nimport { ContextKeyExpr, IContextKeyService } from '../../../../platform/contextkey/common/contextkey.js';\nimport { CounterSet } from '../../../../base/common/map.js';\nimport { IUriIdentityService } from '../../../../platform/uriIdentity/common/uriIdentity.js';\nimport { Schemas } from '../../../../base/common/network.js';\n\nregisterAction2(class extends Action2 {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: SetLogLevelAction.ID,\n\t\t\ttitle: SetLogLevelAction.TITLE,\n\t\t\tcategory: Categories.Developer,\n\t\t\tf1: true\n\t\t});\n\t}\n\trun(servicesAccessor: ServicesAccessor): Promise<void> {\n\t\treturn servicesAccessor.get(IInstantiationService).createInstance(SetLogLevelAction, SetLogLevelAction.ID, SetLogLevelAction.TITLE.value).run();\n\t}\n});\n\nregisterAction2(class extends Action2 {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: 'workbench.action.setDefaultLogLevel',\n\t\t\ttitle: nls.localize2('setDefaultLogLevel', \"Set Default Log Level\"),\n\t\t\tcategory: Categories.Developer,\n\t\t});\n\t}\n\trun(servicesAccessor: ServicesAccessor, logLevel: LogLevel, extensionId?: string): Promise<void> {\n\t\treturn servicesAccessor.get(IDefaultLogLevelsService).setDefaultLogLevel(logLevel, extensionId);\n\t}\n});\n\nclass LogOutputChannels extends Disposable implements IWorkbenchContribution {\n\n\tprivate readonly contextKeys = new CounterSet<string>();\n\tprivate readonly outputChannelRegistry = Registry.as<IOutputChannelRegistry>(Extensions.OutputChannels);\n\tprivate readonly loggerDisposables = this._register(new DisposableMap());\n\n\tconstructor(\n\t\t@ILogService private readonly logService: ILogService,\n\t\t@ILoggerService private readonly loggerService: ILoggerService,\n\t\t@IContextKeyService private readonly contextKeyService: IContextKeyService,\n\t\t@IFileService private readonly fileService: IFileService,\n\t\t@IUriIdentityService private readonly uriIdentityService: IUriIdentityService,\n\t) {\n\t\tsuper();\n\t\tconst contextKey = CONTEXT_LOG_LEVEL.bindTo(contextKeyService);\n\t\tcontextKey.set(LogLevelToString(loggerService.getLogLevel()));\n\t\tthis._register(loggerService.onDidChangeLogLevel(e => {\n\t\t\tif (isLogLevel(e)) {\n\t\t\t\tcontextKey.set(LogLevelToString(loggerService.getLogLevel()));\n\t\t\t}\n\t\t}));\n\n\t\tthis.onDidAddLoggers(loggerService.getRegisteredLoggers());\n\t\tthis._register(loggerService.onDidChangeLoggers(({ added, removed }) => {\n\t\t\tthis.onDidAddLoggers(added);\n\t\t\tthis.onDidRemoveLoggers(removed);\n\t\t}));\n\t\tthis._register(loggerService.onDidChangeVisibility(([resource, visibility]) => {\n\t\t\tconst logger = loggerService.getRegisteredLogger(resource);\n\t\t\tif (logger) {\n\t\t\t\tif (visibility) {\n\t\t\t\t\tthis.registerLogChannel(logger);\n\t\t\t\t} else {\n\t\t\t\t\tthis.deregisterLogChannel(logger);\n\t\t\t\t}\n\t\t\t}\n\t\t}));\n\t\tthis.registerShowWindowLogAction();\n\t\tthis._register(Event.filter(contextKeyService.onDidChangeContext, e => e.affectsSome(this.contextKeys))(() => this.onDidChangeContext()));\n\t}\n\n\tprivate onDidAddLoggers(loggers: Iterable<ILoggerResource>): void {\n\t\tfor (const logger of loggers) {\n\t\t\tif (logger.when) {\n\t\t\t\tconst contextKeyExpr = ContextKeyExpr.deserialize(logger.when);\n\t\t\t\tif (contextKeyExpr) {\n\t\t\t\t\tfor (const key of contextKeyExpr.keys()) {\n\t\t\t\t\t\tthis.contextKeys.add(key);\n\t\t\t\t\t}\n\t\t\t\t\tif (!this.contextKeyService.contextMatchesRules(contextKeyExpr)) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (logger.hidden) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tthis.registerLogChannel(logger);\n\t\t}\n\t}\n\n\tprivate onDidChangeContext(): void {\n\t\tfor (const logger of this.loggerService.getRegisteredLoggers()) {\n\t\t\tif (logger.when) {\n\t\t\t\tif (this.contextKeyService.contextMatchesRules(ContextKeyExpr.deserialize(logger.when))) {\n\t\t\t\t\tthis.registerLogChannel(logger);\n\t\t\t\t} else {\n\t\t\t\t\tthis.deregisterLogChannel(logger);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate onDidRemoveLoggers(loggers: Iterable<ILoggerResource>): void {\n\t\tfor (const logger of loggers) {\n\t\t\tif (logger.when) {\n\t\t\t\tconst contextKeyExpr = ContextKeyExpr.deserialize(logger.when);\n\t\t\t\tif (contextKeyExpr) {\n\t\t\t\t\tfor (const key of contextKeyExpr.keys()) {\n\t\t\t\t\t\tthis.contextKeys.delete(key);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis.deregisterLogChannel(logger);\n\t\t}\n\t}\n\n\tprivate registerLogChannel(logger: ILoggerResource): void {\n\t\tconst channel = this.outputChannelRegistry.getChannel(logger.id);\n\t\tif (channel && this.uriIdentityService.extUri.isEqual(channel.file, logger.resource)) {\n\t\t\treturn;\n\t\t}\n\t\tconst disposables = new DisposableStore();\n\t\tconst promise = createCancelablePromise(async token => {\n\t\t\tawait whenProviderRegistered(logger.resource, this.fileService);\n\t\t\ttry {\n\t\t\t\tawait this.whenFileExists(logger.resource, 1, token);\n\t\t\t\tconst existingChannel = this.outputChannelRegistry.getChannel(logger.id);\n\t\t\t\tconst remoteLogger = existingChannel?.file?.scheme === Schemas.vscodeRemote ? this.loggerService.getRegisteredLogger(existingChannel.file) : undefined;\n\t\t\t\tif (remoteLogger) {\n\t\t\t\t\tthis.deregisterLogChannel(remoteLogger);\n\t\t\t\t}\n\t\t\t\tconst hasToAppendRemote = existingChannel && logger.resource.scheme === Schemas.vscodeRemote;\n\t\t\t\tconst id = hasToAppendRemote ? `${logger.id}.remote` : logger.id;\n\t\t\t\tconst label = hasToAppendRemote ? nls.localize('remote name', \"{0} (Remote)\", logger.name ?? logger.id) : logger.name ?? logger.id;\n\t\t\t\tthis.outputChannelRegistry.registerChannel({ id, label, file: logger.resource, log: true, extensionId: logger.extensionId });\n\t\t\t\tdisposables.add(toDisposable(() => this.outputChannelRegistry.removeChannel(id)));\n\t\t\t\tif (remoteLogger) {\n\t\t\t\t\tthis.registerLogChannel(remoteLogger);\n\t\t\t\t}\n\t\t\t} catch (error) {\n\t\t\t\tif (!isCancellationError(error)) {\n\t\t\t\t\tthis.logService.error('Error while registering log channel', logger.resource.toString(), getErrorMessage(error));\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\tdisposables.add(toDisposable(() => promise.cancel()));\n\t\tthis.loggerDisposables.set(logger.resource.toString(), disposables);\n\t}\n\n\tprivate deregisterLogChannel(logger: ILoggerResource): void {\n\t\tthis.loggerDisposables.deleteAndDispose(logger.resource.toString());\n\t}\n\n\tprivate async whenFileExists(file: URI, trial: number, token: CancellationToken): Promise<void> {\n\t\tconst exists = await this.fileService.exists(file);\n\t\tif (exists) {\n\t\t\treturn;\n\t\t}\n\t\tif (token.isCancellationRequested) {\n\t\t\tthrow new CancellationError();\n\t\t}\n\t\tif (trial > 10) {\n\t\t\tthrow new Error(`Timed out while waiting for file to be created`);\n\t\t}\n\t\tthis.logService.debug(`[Registering Log Channel] File does not exist. Waiting for 1s to retry.`, file.toString());\n\t\tawait timeout(1000, token);\n\t\tawait this.whenFileExists(file, trial + 1, token);\n\t}\n\n\tprivate registerShowWindowLogAction(): void {\n\t\tthis._register(registerAction2(class ShowWindowLogAction extends Action2 {\n\t\t\tconstructor() {\n\t\t\t\tsuper({\n\t\t\t\t\tid: showWindowLogActionId,\n\t\t\t\t\ttitle: nls.localize2('show window log', \"Show Window Log\"),\n\t\t\t\t\tcategory: Categories.Developer,\n\t\t\t\t\tf1: true\n\t\t\t\t});\n\t\t\t}\n\t\t\tasync run(servicesAccessor: ServicesAccessor): Promise<void> {\n\t\t\t\tconst outputService = servicesAccessor.get(IOutputService);\n\t\t\t\toutputService.showChannel(windowLogId);\n\t\t\t}\n\t\t}));\n\t}\n}\n\nclass LogLevelMigration implements IWorkbenchContribution {\n\tconstructor(\n\t\t@IDefaultLogLevelsService defaultLogLevelsService: IDefaultLogLevelsService\n\t) {\n\t\tdefaultLogLevelsService.migrateLogLevels();\n\t}\n}\n\nRegistry.as<IWorkbenchContributionsRegistry>(WorkbenchExtensions.Workbench).registerWorkbenchContribution(LogOutputChannels, LifecyclePhase.Restored);\nRegistry.as<IWorkbenchContributionsRegistry>(WorkbenchExtensions.Workbench).registerWorkbenchContribution(LogLevelMigration, LifecyclePhase.Eventually);\n"],
  "mappings": "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",
  "names": []
}
