{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/logs/electron-sandbox/logsActions.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Action } from '../../../../base/common/actions.js';\nimport * as nls from '../../../../nls.js';\nimport { INativeHostService } from '../../../../platform/native/common/native.js';\nimport { INativeWorkbenchEnvironmentService } from '../../../services/environment/electron-sandbox/environmentService.js';\nimport { IFileService } from '../../../../platform/files/common/files.js';\nimport { joinPath } from '../../../../base/common/resources.js';\nimport { Schemas } from '../../../../base/common/network.js';\n\nexport class OpenLogsFolderAction extends Action {\n\n\tstatic readonly ID = 'workbench.action.openLogsFolder';\n\tstatic readonly TITLE = nls.localize2('openLogsFolder', \"Open Logs Folder\");\n\n\tconstructor(id: string, label: string,\n\t\t@INativeWorkbenchEnvironmentService private readonly environmentService: INativeWorkbenchEnvironmentService,\n\t\t@INativeHostService private readonly nativeHostService: INativeHostService,\n\t) {\n\t\tsuper(id, label);\n\t}\n\n\toverride run(): Promise<void> {\n\t\treturn this.nativeHostService.showItemInFolder(joinPath(this.environmentService.logsHome, 'main.log').with({ scheme: Schemas.file }).fsPath);\n\t}\n}\n\nexport class OpenExtensionLogsFolderAction extends Action {\n\n\tstatic readonly ID = 'workbench.action.openExtensionLogsFolder';\n\tstatic readonly TITLE = nls.localize2('openExtensionLogsFolder', \"Open Extension Logs Folder\");\n\n\tconstructor(id: string, label: string,\n\t\t@INativeWorkbenchEnvironmentService private readonly environmentSerice: INativeWorkbenchEnvironmentService,\n\t\t@IFileService private readonly fileService: IFileService,\n\t\t@INativeHostService private readonly nativeHostService: INativeHostService\n\t) {\n\t\tsuper(id, label);\n\t}\n\n\toverride async run(): Promise<void> {\n\t\tconst folderStat = await this.fileService.resolve(this.environmentSerice.extHostLogsPath);\n\t\tif (folderStat.children && folderStat.children[0]) {\n\t\t\treturn this.nativeHostService.showItemInFolder(folderStat.children[0].resource.with({ scheme: Schemas.file }).fsPath);\n\t\t}\n\t}\n}\n"],
  "mappings": ";;;;;;;;;;;;AAKA,SAAS,cAAc;AACvB,YAAY,SAAS;AACrB,SAAS,0BAA0B;AACnC,SAAS,0CAA0C;AACnD,SAAS,oBAAoB;AAC7B,SAAS,gBAAgB;AACzB,SAAS,eAAe;AAEjB,IAAM,uBAAN,cAAmC,OAAO;AAAA,EAKhD,YAAY,IAAY,OAC8B,oBAChB,mBACpC;AACD,UAAM,IAAI,KAAK;AAHsC;AAChB;AAAA,EAGtC;AAAA,EAvBD,OAaiD;AAAA;AAAA;AAAA,EAEhD,OAAgB,KAAK;AAAA,EACrB,OAAgB,QAAQ,IAAI,UAAU,kBAAkB,kBAAkB;AAAA,EASjE,MAAqB;AAC7B,WAAO,KAAK,kBAAkB,iBAAiB,SAAS,KAAK,mBAAmB,UAAU,UAAU,EAAE,KAAK,EAAE,QAAQ,QAAQ,KAAK,CAAC,EAAE,MAAM;AAAA,EAC5I;AACD;AAfa,uBAAN;AAAA,EAMJ;AAAA,EACA;AAAA,GAPU;AAiBN,IAAM,gCAAN,cAA4C,OAAO;AAAA,EAKzD,YAAY,IAAY,OAC8B,mBACtB,aACM,mBACpC;AACD,UAAM,IAAI,KAAK;AAJsC;AACtB;AACM;AAAA,EAGtC;AAAA,EAzCD,OA8B0D;AAAA;AAAA;AAAA,EAEzD,OAAgB,KAAK;AAAA,EACrB,OAAgB,QAAQ,IAAI,UAAU,2BAA2B,4BAA4B;AAAA,EAU7F,MAAe,MAAqB;AACnC,UAAM,aAAa,MAAM,KAAK,YAAY,QAAQ,KAAK,kBAAkB,eAAe;AACxF,QAAI,WAAW,YAAY,WAAW,SAAS,CAAC,GAAG;AAClD,aAAO,KAAK,kBAAkB,iBAAiB,WAAW,SAAS,CAAC,EAAE,SAAS,KAAK,EAAE,QAAQ,QAAQ,KAAK,CAAC,EAAE,MAAM;AAAA,IACrH;AAAA,EACD;AACD;AAnBa,gCAAN;AAAA,EAMJ;AAAA,EACA;AAAA,EACA;AAAA,GARU;",
  "names": []
}
