{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/logs/electron-sandbox/logsActions.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Action } from \"../../../../base/common/actions.js\";\nimport { Schemas } from \"../../../../base/common/network.js\";\nimport { joinPath } from \"../../../../base/common/resources.js\";\nimport * as nls from \"../../../../nls.js\";\nimport { IFileService } from \"../../../../platform/files/common/files.js\";\nimport { INativeHostService } from \"../../../../platform/native/common/native.js\";\nimport { INativeWorkbenchEnvironmentService } from \"../../../services/environment/electron-sandbox/environmentService.js\";\n\nexport class OpenLogsFolderAction extends Action {\n\tstatic readonly ID = \"workbench.action.openLogsFolder\";\n\tstatic readonly TITLE = nls.localize2(\"openLogsFolder\", \"Open Logs Folder\");\n\n\tconstructor(\n\t\tid: string,\n\t\tlabel: string,\n\t\t@INativeWorkbenchEnvironmentService\n\t\tprivate readonly environmentService: INativeWorkbenchEnvironmentService,\n\t\t@INativeHostService\n\t\tprivate readonly nativeHostService: INativeHostService,\n\t) {\n\t\tsuper(id, label);\n\t}\n\n\toverride run(): Promise<void> {\n\t\treturn this.nativeHostService.showItemInFolder(\n\t\t\tjoinPath(this.environmentService.logsHome, \"main.log\").with({\n\t\t\t\tscheme: Schemas.file,\n\t\t\t}).fsPath,\n\t\t);\n\t}\n}\n\nexport class OpenExtensionLogsFolderAction extends Action {\n\tstatic readonly ID = \"workbench.action.openExtensionLogsFolder\";\n\tstatic readonly TITLE = nls.localize2(\n\t\t\"openExtensionLogsFolder\",\n\t\t\"Open Extension Logs Folder\",\n\t);\n\n\tconstructor(\n\t\tid: string,\n\t\tlabel: string,\n\t\t@INativeWorkbenchEnvironmentService\n\t\tprivate readonly environmentSerice: INativeWorkbenchEnvironmentService,\n\t\t@IFileService private readonly fileService: IFileService,\n\t\t@INativeHostService\n\t\tprivate readonly nativeHostService: INativeHostService,\n\t) {\n\t\tsuper(id, label);\n\t}\n\n\toverride async run(): Promise<void> {\n\t\tconst folderStat = await this.fileService.resolve(\n\t\t\tthis.environmentSerice.extHostLogsPath,\n\t\t);\n\t\tif (folderStat.children && folderStat.children[0]) {\n\t\t\treturn this.nativeHostService.showItemInFolder(\n\t\t\t\tfolderStat.children[0].resource.with({ scheme: Schemas.file })\n\t\t\t\t\t.fsPath,\n\t\t\t);\n\t\t}\n\t}\n}\n"],
  "mappings": ";;;;;;;;;;;;AAKA,SAAS,cAAc;AACvB,SAAS,eAAe;AACxB,SAAS,gBAAgB;AACzB,YAAY,SAAS;AACrB,SAAS,oBAAoB;AAC7B,SAAS,0BAA0B;AACnC,SAAS,0CAA0C;AAE5C,IAAM,uBAAN,cAAmC,OAAO;AAAA,EAIhD,YACC,IACA,OAEiB,oBAEA,mBAChB;AACD,UAAM,IAAI,KAAK;AAJE;AAEA;AAAA,EAGlB;AAAA,EA1BD,OAaiD;AAAA;AAAA;AAAA,EAChD,OAAgB,KAAK;AAAA,EACrB,OAAgB,QAAQ,IAAI,UAAU,kBAAkB,kBAAkB;AAAA,EAajE,MAAqB;AAC7B,WAAO,KAAK,kBAAkB;AAAA,MAC7B,SAAS,KAAK,mBAAmB,UAAU,UAAU,EAAE,KAAK;AAAA,QAC3D,QAAQ,QAAQ;AAAA,MACjB,CAAC,EAAE;AAAA,IACJ;AAAA,EACD;AACD;AAtBa,uBAAN;AAAA,EAOJ;AAAA,EAEA;AAAA,GATU;AAwBN,IAAM,gCAAN,cAA4C,OAAO;AAAA,EAOzD,YACC,IACA,OAEiB,mBACc,aAEd,mBAChB;AACD,UAAM,IAAI,KAAK;AALE;AACc;AAEd;AAAA,EAGlB;AAAA,EAtDD,OAqC0D;AAAA;AAAA;AAAA,EACzD,OAAgB,KAAK;AAAA,EACrB,OAAgB,QAAQ,IAAI;AAAA,IAC3B;AAAA,IACA;AAAA,EACD;AAAA,EAcA,MAAe,MAAqB;AACnC,UAAM,aAAa,MAAM,KAAK,YAAY;AAAA,MACzC,KAAK,kBAAkB;AAAA,IACxB;AACA,QAAI,WAAW,YAAY,WAAW,SAAS,CAAC,GAAG;AAClD,aAAO,KAAK,kBAAkB;AAAA,QAC7B,WAAW,SAAS,CAAC,EAAE,SAAS,KAAK,EAAE,QAAQ,QAAQ,KAAK,CAAC,EAC3D;AAAA,MACH;AAAA,IACD;AAAA,EACD;AACD;AA9Ba,gCAAN;AAAA,EAUJ;AAAA,EAEA;AAAA,EACA;AAAA,GAbU;",
  "names": []
}
