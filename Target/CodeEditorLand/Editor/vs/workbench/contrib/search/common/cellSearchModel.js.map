{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/search/common/cellSearchModel.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Disposable } from '../../../../base/common/lifecycle.js';\nimport { Range } from '../../../../editor/common/core/range.js';\nimport { DefaultEndOfLine, FindMatch, IReadonlyTextBuffer } from '../../../../editor/common/model.js';\nimport { PieceTreeTextBufferBuilder } from '../../../../editor/common/model/pieceTreeTextBuffer/pieceTreeTextBufferBuilder.js';\nimport { SearchParams } from '../../../../editor/common/model/textModelSearch.js';\n\ninterface RawOutputFindMatch {\n\ttextBuffer: IReadonlyTextBuffer;\n\tmatches: FindMatch[];\n}\n\nexport class CellSearchModel extends Disposable {\n\tprivate _outputTextBuffers: IReadonlyTextBuffer[] | undefined = undefined;\n\tconstructor(readonly _source: string, private _inputTextBuffer: IReadonlyTextBuffer | undefined, private _outputs: string[]) {\n\t\tsuper();\n\t}\n\n\tprivate _getFullModelRange(buffer: IReadonlyTextBuffer): Range {\n\t\tconst lineCount = buffer.getLineCount();\n\t\treturn new Range(1, 1, lineCount, this._getLineMaxColumn(buffer, lineCount));\n\t}\n\n\tprivate _getLineMaxColumn(buffer: IReadonlyTextBuffer, lineNumber: number): number {\n\t\tif (lineNumber < 1 || lineNumber > buffer.getLineCount()) {\n\t\t\tthrow new Error('Illegal value for lineNumber');\n\t\t}\n\t\treturn buffer.getLineLength(lineNumber) + 1;\n\t}\n\n\tget inputTextBuffer(): IReadonlyTextBuffer {\n\t\tif (!this._inputTextBuffer) {\n\t\t\tconst builder = new PieceTreeTextBufferBuilder();\n\t\t\tbuilder.acceptChunk(this._source);\n\t\t\tconst bufferFactory = builder.finish(true);\n\t\t\tconst { textBuffer, disposable } = bufferFactory.create(DefaultEndOfLine.LF);\n\t\t\tthis._inputTextBuffer = textBuffer;\n\t\t\tthis._register(disposable);\n\t\t}\n\n\t\treturn this._inputTextBuffer;\n\t}\n\n\tget outputTextBuffers(): IReadonlyTextBuffer[] {\n\t\tif (!this._outputTextBuffers) {\n\t\t\tthis._outputTextBuffers = this._outputs.map((output) => {\n\t\t\t\tconst builder = new PieceTreeTextBufferBuilder();\n\t\t\t\tbuilder.acceptChunk(output);\n\t\t\t\tconst bufferFactory = builder.finish(true);\n\t\t\t\tconst { textBuffer, disposable } = bufferFactory.create(DefaultEndOfLine.LF);\n\t\t\t\tthis._register(disposable);\n\t\t\t\treturn textBuffer;\n\t\t\t});\n\t\t}\n\t\treturn this._outputTextBuffers;\n\t}\n\n\tfindInInputs(target: string): FindMatch[] {\n\t\tconst searchParams = new SearchParams(target, false, false, null);\n\t\tconst searchData = searchParams.parseSearchRequest();\n\t\tif (!searchData) {\n\t\t\treturn [];\n\t\t}\n\t\tconst fullInputRange = this._getFullModelRange(this.inputTextBuffer);\n\t\treturn this.inputTextBuffer.findMatchesLineByLine(fullInputRange, searchData, true, 5000);\n\t}\n\n\tfindInOutputs(target: string): RawOutputFindMatch[] {\n\t\tconst searchParams = new SearchParams(target, false, false, null);\n\t\tconst searchData = searchParams.parseSearchRequest();\n\t\tif (!searchData) {\n\t\t\treturn [];\n\t\t}\n\t\treturn this.outputTextBuffers.map(buffer => {\n\t\t\tconst matches = buffer.findMatchesLineByLine(\n\t\t\t\tthis._getFullModelRange(buffer),\n\t\t\t\tsearchData,\n\t\t\t\ttrue,\n\t\t\t\t5000\n\t\t\t);\n\t\t\tif (matches.length === 0) {\n\t\t\t\treturn undefined;\n\t\t\t}\n\t\t\treturn {\n\t\t\t\ttextBuffer: buffer,\n\t\t\t\tmatches\n\t\t\t};\n\t\t}).filter((item): item is RawOutputFindMatch => !!item);\n\t}\n}\n"],
  "mappings": ";;AAKA,SAAS,kBAAkB;AAC3B,SAAS,aAAa;AACtB,SAAS,kBAAkB,WAAW,2BAA2B;AACjE,SAAS,kCAAkC;AAC3C,SAAS,oBAAoB;AAOtB,MAAM,wBAAwB,WAAW;AAAA,EAE/C,YAAqB,SAAyB,kBAA2D,UAAoB;AAC5H,UAAM;AADc;AAAyB;AAA2D;AAAA,EAEzG;AAAA,EApBD,OAgBgD;AAAA;AAAA;AAAA,EACvC,qBAAwD;AAAA,EAKxD,mBAAmB,QAAoC;AAC9D,UAAM,YAAY,OAAO,aAAa;AACtC,WAAO,IAAI,MAAM,GAAG,GAAG,WAAW,KAAK,kBAAkB,QAAQ,SAAS,CAAC;AAAA,EAC5E;AAAA,EAEQ,kBAAkB,QAA6B,YAA4B;AAClF,QAAI,aAAa,KAAK,aAAa,OAAO,aAAa,GAAG;AACzD,YAAM,IAAI,MAAM,8BAA8B;AAAA,IAC/C;AACA,WAAO,OAAO,cAAc,UAAU,IAAI;AAAA,EAC3C;AAAA,EAEA,IAAI,kBAAuC;AAC1C,QAAI,CAAC,KAAK,kBAAkB;AAC3B,YAAM,UAAU,IAAI,2BAA2B;AAC/C,cAAQ,YAAY,KAAK,OAAO;AAChC,YAAM,gBAAgB,QAAQ,OAAO,IAAI;AACzC,YAAM,EAAE,YAAY,WAAW,IAAI,cAAc,OAAO,iBAAiB,EAAE;AAC3E,WAAK,mBAAmB;AACxB,WAAK,UAAU,UAAU;AAAA,IAC1B;AAEA,WAAO,KAAK;AAAA,EACb;AAAA,EAEA,IAAI,oBAA2C;AAC9C,QAAI,CAAC,KAAK,oBAAoB;AAC7B,WAAK,qBAAqB,KAAK,SAAS,IAAI,CAAC,WAAW;AACvD,cAAM,UAAU,IAAI,2BAA2B;AAC/C,gBAAQ,YAAY,MAAM;AAC1B,cAAM,gBAAgB,QAAQ,OAAO,IAAI;AACzC,cAAM,EAAE,YAAY,WAAW,IAAI,cAAc,OAAO,iBAAiB,EAAE;AAC3E,aAAK,UAAU,UAAU;AACzB,eAAO;AAAA,MACR,CAAC;AAAA,IACF;AACA,WAAO,KAAK;AAAA,EACb;AAAA,EAEA,aAAa,QAA6B;AACzC,UAAM,eAAe,IAAI,aAAa,QAAQ,OAAO,OAAO,IAAI;AAChE,UAAM,aAAa,aAAa,mBAAmB;AACnD,QAAI,CAAC,YAAY;AAChB,aAAO,CAAC;AAAA,IACT;AACA,UAAM,iBAAiB,KAAK,mBAAmB,KAAK,eAAe;AACnE,WAAO,KAAK,gBAAgB,sBAAsB,gBAAgB,YAAY,MAAM,GAAI;AAAA,EACzF;AAAA,EAEA,cAAc,QAAsC;AACnD,UAAM,eAAe,IAAI,aAAa,QAAQ,OAAO,OAAO,IAAI;AAChE,UAAM,aAAa,aAAa,mBAAmB;AACnD,QAAI,CAAC,YAAY;AAChB,aAAO,CAAC;AAAA,IACT;AACA,WAAO,KAAK,kBAAkB,IAAI,YAAU;AAC3C,YAAM,UAAU,OAAO;AAAA,QACtB,KAAK,mBAAmB,MAAM;AAAA,QAC9B;AAAA,QACA;AAAA,QACA;AAAA,MACD;AACA,UAAI,QAAQ,WAAW,GAAG;AACzB,eAAO;AAAA,MACR;AACA,aAAO;AAAA,QACN,YAAY;AAAA,QACZ;AAAA,MACD;AAAA,IACD,CAAC,EAAE,OAAO,CAAC,SAAqC,CAAC,CAAC,IAAI;AAAA,EACvD;AACD;",
  "names": []
}
