{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/search/common/searchNotebookHelpers.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n\nimport { FindMatch, IReadonlyTextBuffer } from '../../../../editor/common/model.js';\nimport { TextSearchMatch, IFileMatch, ITextSearchMatch } from '../../../services/search/common/search.js';\nimport { Range } from '../../../../editor/common/core/range.js';\nimport { URI, UriComponents } from '../../../../base/common/uri.js';\n\nexport type IRawClosedNotebookFileMatch = INotebookFileMatchNoModel<UriComponents>;\n\nexport interface INotebookFileMatchNoModel<U extends UriComponents = URI> extends IFileMatch<U> {\n\tcellResults: INotebookCellMatchNoModel<U>[];\n}\n\nexport interface INotebookCellMatchNoModel<U extends UriComponents = URI> {\n\tindex: number;\n\tcontentResults: ITextSearchMatch<U>[];\n\twebviewResults: ITextSearchMatch<U>[];\n}\n\nexport function isINotebookFileMatchNoModel(object: IFileMatch): object is INotebookFileMatchNoModel {\n\treturn 'cellResults' in object;\n}\n\nexport const rawCellPrefix = 'rawCell#';\n\nexport function genericCellMatchesToTextSearchMatches(contentMatches: FindMatch[], buffer: IReadonlyTextBuffer) {\n\tlet previousEndLine = -1;\n\tconst contextGroupings: FindMatch[][] = [];\n\tlet currentContextGrouping: FindMatch[] = [];\n\n\tcontentMatches.forEach((match) => {\n\t\tif (match.range.startLineNumber !== previousEndLine) {\n\t\t\tif (currentContextGrouping.length > 0) {\n\t\t\t\tcontextGroupings.push([...currentContextGrouping]);\n\t\t\t\tcurrentContextGrouping = [];\n\t\t\t}\n\t\t}\n\n\t\tcurrentContextGrouping.push(match);\n\t\tpreviousEndLine = match.range.endLineNumber;\n\t});\n\n\tif (currentContextGrouping.length > 0) {\n\t\tcontextGroupings.push([...currentContextGrouping]);\n\t}\n\n\tconst textSearchResults = contextGroupings.map((grouping) => {\n\t\tconst lineTexts: string[] = [];\n\t\tconst firstLine = grouping[0].range.startLineNumber;\n\t\tconst lastLine = grouping[grouping.length - 1].range.endLineNumber;\n\t\tfor (let i = firstLine; i <= lastLine; i++) {\n\t\t\tlineTexts.push(buffer.getLineContent(i));\n\t\t}\n\t\treturn new TextSearchMatch(\n\t\t\tlineTexts.join('\\n') + '\\n',\n\t\t\tgrouping.map(m => new Range(m.range.startLineNumber - 1, m.range.startColumn - 1, m.range.endLineNumber - 1, m.range.endColumn - 1)),\n\t\t);\n\t});\n\n\treturn textSearchResults;\n}\n\n"],
  "mappings": ";;AAMA,SAAS,WAAW,2BAA2B;AAC/C,SAAS,iBAAiB,YAAY,wBAAwB;AAC9D,SAAS,aAAa;AACtB,SAAS,KAAK,qBAAqB;AAc5B,SAAS,4BAA4B,QAAyD;AACpG,SAAO,iBAAiB;AACzB;AAFgB;AAIT,MAAM,gBAAgB;AAEtB,SAAS,sCAAsC,gBAA6B,QAA6B;AAC/G,MAAI,kBAAkB;AACtB,QAAM,mBAAkC,CAAC;AACzC,MAAI,yBAAsC,CAAC;AAE3C,iBAAe,QAAQ,CAAC,UAAU;AACjC,QAAI,MAAM,MAAM,oBAAoB,iBAAiB;AACpD,UAAI,uBAAuB,SAAS,GAAG;AACtC,yBAAiB,KAAK,CAAC,GAAG,sBAAsB,CAAC;AACjD,iCAAyB,CAAC;AAAA,MAC3B;AAAA,IACD;AAEA,2BAAuB,KAAK,KAAK;AACjC,sBAAkB,MAAM,MAAM;AAAA,EAC/B,CAAC;AAED,MAAI,uBAAuB,SAAS,GAAG;AACtC,qBAAiB,KAAK,CAAC,GAAG,sBAAsB,CAAC;AAAA,EAClD;AAEA,QAAM,oBAAoB,iBAAiB,IAAI,CAAC,aAAa;AAC5D,UAAM,YAAsB,CAAC;AAC7B,UAAM,YAAY,SAAS,CAAC,EAAE,MAAM;AACpC,UAAM,WAAW,SAAS,SAAS,SAAS,CAAC,EAAE,MAAM;AACrD,aAAS,IAAI,WAAW,KAAK,UAAU,KAAK;AAC3C,gBAAU,KAAK,OAAO,eAAe,CAAC,CAAC;AAAA,IACxC;AACA,WAAO,IAAI;AAAA,MACV,UAAU,KAAK,IAAI,IAAI;AAAA,MACvB,SAAS,IAAI,OAAK,IAAI,MAAM,EAAE,MAAM,kBAAkB,GAAG,EAAE,MAAM,cAAc,GAAG,EAAE,MAAM,gBAAgB,GAAG,EAAE,MAAM,YAAY,CAAC,CAAC;AAAA,IACpI;AAAA,EACD,CAAC;AAED,SAAO;AACR;AAnCgB;",
  "names": []
}
