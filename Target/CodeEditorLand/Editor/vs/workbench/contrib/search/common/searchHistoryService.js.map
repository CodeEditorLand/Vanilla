{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/search/common/searchHistoryService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Emitter, type Event } from \"../../../../base/common/event.js\";\nimport { isEmptyObject } from \"../../../../base/common/types.js\";\nimport { createDecorator } from \"../../../../platform/instantiation/common/instantiation.js\";\nimport {\n\tIStorageService,\n\tStorageScope,\n\tStorageTarget,\n} from \"../../../../platform/storage/common/storage.js\";\n\nexport interface ISearchHistoryService {\n\treadonly _serviceBrand: undefined;\n\tonDidClearHistory: Event<void>;\n\tclearHistory(): void;\n\tload(): ISearchHistoryValues;\n\tsave(history: ISearchHistoryValues): void;\n}\n\nexport const ISearchHistoryService = createDecorator<ISearchHistoryService>(\n\t\"searchHistoryService\",\n);\n\nexport interface ISearchHistoryValues {\n\tsearch?: string[];\n\treplace?: string[];\n\tinclude?: string[];\n\texclude?: string[];\n}\n\nexport class SearchHistoryService implements ISearchHistoryService {\n\tdeclare readonly _serviceBrand: undefined;\n\n\tpublic static readonly SEARCH_HISTORY_KEY = \"workbench.search.history\";\n\n\tprivate readonly _onDidClearHistory = new Emitter<void>();\n\treadonly onDidClearHistory: Event<void> = this._onDidClearHistory.event;\n\n\tconstructor(\n\t\t@IStorageService private readonly storageService: IStorageService\n\t) { }\n\n\tclearHistory(): void {\n\t\tthis.storageService.remove(\n\t\t\tSearchHistoryService.SEARCH_HISTORY_KEY,\n\t\t\tStorageScope.WORKSPACE,\n\t\t);\n\t\tthis._onDidClearHistory.fire();\n\t}\n\n\tload(): ISearchHistoryValues {\n\t\tlet result: ISearchHistoryValues | undefined;\n\t\tconst raw = this.storageService.get(\n\t\t\tSearchHistoryService.SEARCH_HISTORY_KEY,\n\t\t\tStorageScope.WORKSPACE,\n\t\t);\n\n\t\tif (raw) {\n\t\t\ttry {\n\t\t\t\tresult = JSON.parse(raw);\n\t\t\t} catch (e) {\n\t\t\t\t// Invalid data\n\t\t\t}\n\t\t}\n\n\t\treturn result || {};\n\t}\n\n\tsave(history: ISearchHistoryValues): void {\n\t\tif (isEmptyObject(history)) {\n\t\t\tthis.storageService.remove(\n\t\t\t\tSearchHistoryService.SEARCH_HISTORY_KEY,\n\t\t\t\tStorageScope.WORKSPACE,\n\t\t\t);\n\t\t} else {\n\t\t\tthis.storageService.store(\n\t\t\t\tSearchHistoryService.SEARCH_HISTORY_KEY,\n\t\t\t\tJSON.stringify(history),\n\t\t\t\tStorageScope.WORKSPACE,\n\t\t\t\tStorageTarget.USER,\n\t\t\t);\n\t\t}\n\t}\n}\n"],
  "mappings": ";;;;;;;;;;;;AAKA,SAAS,eAA2B;AACpC,SAAS,qBAAqB;AAC9B,SAAS,uBAAuB;AAChC;AAAA,EACC;AAAA,EACA;AAAA,EACA;AAAA,OACM;AAUA,MAAM,wBAAwB;AAAA,EACpC;AACD;AASO,IAAM,uBAAN,MAA4D;AAAA,EAQlE,YACmC,gBACjC;AADiC;AAAA,EAC/B;AAAA,EA3CL,OAiCmE;AAAA;AAAA;AAAA,EAGlE,OAAuB,qBAAqB;AAAA,EAE3B,qBAAqB,IAAI,QAAc;AAAA,EAC/C,oBAAiC,KAAK,mBAAmB;AAAA,EAMlE,eAAqB;AACpB,SAAK,eAAe;AAAA,MACnB,qBAAqB;AAAA,MACrB,aAAa;AAAA,IACd;AACA,SAAK,mBAAmB,KAAK;AAAA,EAC9B;AAAA,EAEA,OAA6B;AAC5B,QAAI;AACJ,UAAM,MAAM,KAAK,eAAe;AAAA,MAC/B,qBAAqB;AAAA,MACrB,aAAa;AAAA,IACd;AAEA,QAAI,KAAK;AACR,UAAI;AACH,iBAAS,KAAK,MAAM,GAAG;AAAA,MACxB,SAAS,GAAG;AAAA,MAEZ;AAAA,IACD;AAEA,WAAO,UAAU,CAAC;AAAA,EACnB;AAAA,EAEA,KAAK,SAAqC;AACzC,QAAI,cAAc,OAAO,GAAG;AAC3B,WAAK,eAAe;AAAA,QACnB,qBAAqB;AAAA,QACrB,aAAa;AAAA,MACd;AAAA,IACD,OAAO;AACN,WAAK,eAAe;AAAA,QACnB,qBAAqB;AAAA,QACrB,KAAK,UAAU,OAAO;AAAA,QACtB,aAAa;AAAA,QACb,cAAc;AAAA,MACf;AAAA,IACD;AAAA,EACD;AACD;AArDa,uBAAN;AAAA,EASJ;AAAA,GATU;",
  "names": []
}
