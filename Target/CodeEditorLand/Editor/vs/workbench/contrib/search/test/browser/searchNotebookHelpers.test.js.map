{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/search/test/browser/searchNotebookHelpers.test.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport assert from 'assert';\nimport { Range } from '../../../../../editor/common/core/range.js';\nimport { FindMatch, IReadonlyTextBuffer } from '../../../../../editor/common/model.js';\nimport { IFileMatch, ISearchRange, ITextSearchMatch, QueryType } from '../../../../services/search/common/search.js';\nimport { ICellViewModel } from '../../../notebook/browser/notebookBrowser.js';\nimport { CellKind } from '../../../notebook/common/notebookCommon.js';\nimport { contentMatchesToTextSearchMatches, webviewMatchesToTextSearchMatches } from '../../browser/notebookSearch/searchNotebookHelpers.js';\nimport { CellFindMatchModel } from '../../../notebook/browser/contrib/find/findModel.js';\nimport { CellMatch, FileMatch, FolderMatch, SearchModel, textSearchMatchesToNotebookMatches } from '../../browser/searchModel.js';\nimport { URI } from '../../../../../base/common/uri.js';\nimport { TestInstantiationService } from '../../../../../platform/instantiation/test/common/instantiationServiceMock.js';\nimport { createFileUriFromPathFromRoot, stubModelService, stubNotebookEditorService } from './searchTestCommon.js';\nimport { IModelService } from '../../../../../editor/common/services/model.js';\nimport { INotebookEditorService } from '../../../notebook/browser/services/notebookEditorService.js';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from '../../../../../base/test/common/utils.js';\n\nsuite('searchNotebookHelpers', () => {\n\tlet instantiationService: TestInstantiationService;\n\tlet mdCellFindMatch: CellFindMatchModel;\n\tlet codeCellFindMatch: CellFindMatchModel;\n\tlet mdInputCell: ICellViewModel;\n\tlet codeCell: ICellViewModel;\n\n\tlet markdownContentResults: ITextSearchMatch[];\n\tlet codeContentResults: ITextSearchMatch[];\n\tlet codeWebviewResults: ITextSearchMatch[];\n\tconst store = ensureNoDisposablesAreLeakedInTestSuite();\n\tlet counter: number = 0;\n\tsetup(() => {\n\n\t\tinstantiationService = new TestInstantiationService();\n\t\tstore.add(instantiationService);\n\t\tconst modelService = stubModelService(instantiationService, (e) => store.add(e));\n\t\tconst notebookEditorService = stubNotebookEditorService(instantiationService, (e) => store.add(e));\n\t\tinstantiationService.stub(IModelService, modelService);\n\t\tinstantiationService.stub(INotebookEditorService, notebookEditorService);\n\t\tmdInputCell = {\n\t\t\tid: 'mdCell',\n\t\t\tcellKind: CellKind.Markup, textBuffer: <IReadonlyTextBuffer>{\n\t\t\t\tgetLineContent(lineNumber: number): string {\n\t\t\t\t\tif (lineNumber === 1) {\n\t\t\t\t\t\treturn '# Hello World Test';\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn '';\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} as ICellViewModel;\n\n\t\tconst findMatchMds = [new FindMatch(new Range(1, 15, 1, 19), ['Test'])];\n\t\tcodeCell = {\n\t\t\tid: 'codeCell',\n\t\t\tcellKind: CellKind.Code, textBuffer: <IReadonlyTextBuffer>{\n\t\t\t\tgetLineContent(lineNumber: number): string {\n\t\t\t\t\tif (lineNumber === 1) {\n\t\t\t\t\t\treturn 'print(\"test! testing!!\")';\n\t\t\t\t\t} else if (lineNumber === 2) {\n\t\t\t\t\t\treturn 'print(\"this is a Test\")';\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn '';\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} as ICellViewModel;\n\t\tconst findMatchCodeCells =\n\t\t\t[new FindMatch(new Range(1, 8, 1, 12), ['test']),\n\t\t\tnew FindMatch(new Range(1, 14, 1, 18), ['test']),\n\t\t\tnew FindMatch(new Range(2, 18, 2, 22), ['Test'])\n\t\t\t];\n\n\t\tconst webviewMatches = [{\n\t\t\tindex: 0,\n\t\t\tsearchPreviewInfo: {\n\t\t\t\tline: 'test! testing!!',\n\t\t\t\trange: {\n\t\t\t\t\tstart: 1,\n\t\t\t\t\tend: 5\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\tindex: 1,\n\t\t\tsearchPreviewInfo: {\n\t\t\t\tline: 'test! testing!!',\n\t\t\t\trange: {\n\t\t\t\t\tstart: 7,\n\t\t\t\t\tend: 11\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\tindex: 3,\n\t\t\tsearchPreviewInfo: {\n\t\t\t\tline: 'this is a Test',\n\t\t\t\trange: {\n\t\t\t\t\tstart: 11,\n\t\t\t\t\tend: 15\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t];\n\n\n\t\tmdCellFindMatch = new CellFindMatchModel(\n\t\t\tmdInputCell,\n\t\t\t0,\n\t\t\tfindMatchMds,\n\t\t\t[],\n\t\t);\n\n\t\tcodeCellFindMatch = new CellFindMatchModel(\n\t\t\tcodeCell,\n\t\t\t5,\n\t\t\tfindMatchCodeCells,\n\t\t\twebviewMatches\n\t\t);\n\n\t});\n\n\tteardown(() => {\n\t\tinstantiationService.dispose();\n\t});\n\n\tsuite('notebookEditorMatchesToTextSearchResults', () => {\n\n\t\tfunction assertRangesEqual(actual: ISearchRange | ISearchRange[], expected: ISearchRange[]) {\n\t\t\tif (!Array.isArray(actual)) {\n\t\t\t\tactual = [actual];\n\t\t\t}\n\n\t\t\tassert.strictEqual(actual.length, expected.length);\n\t\t\tactual.forEach((r, i) => {\n\t\t\t\tconst expectedRange = expected[i];\n\t\t\t\tassert.deepStrictEqual(\n\t\t\t\t\t{ startLineNumber: r.startLineNumber, startColumn: r.startColumn, endLineNumber: r.endLineNumber, endColumn: r.endColumn },\n\t\t\t\t\t{ startLineNumber: expectedRange.startLineNumber, startColumn: expectedRange.startColumn, endLineNumber: expectedRange.endLineNumber, endColumn: expectedRange.endColumn });\n\t\t\t});\n\t\t}\n\n\t\ttest('convert CellFindMatchModel to ITextSearchMatch and check results', () => {\n\t\t\tmarkdownContentResults = contentMatchesToTextSearchMatches(mdCellFindMatch.contentMatches, mdInputCell);\n\t\t\tcodeContentResults = contentMatchesToTextSearchMatches(codeCellFindMatch.contentMatches, codeCell);\n\t\t\tcodeWebviewResults = webviewMatchesToTextSearchMatches(codeCellFindMatch.webviewMatches);\n\n\t\t\tassert.strictEqual(markdownContentResults.length, 1);\n\t\t\tassert.strictEqual(markdownContentResults[0].previewText, '# Hello World Test\\n');\n\t\t\tassertRangesEqual(markdownContentResults[0].rangeLocations.map(e => e.preview), [new Range(0, 14, 0, 18)]);\n\t\t\tassertRangesEqual(markdownContentResults[0].rangeLocations.map(e => e.source), [new Range(0, 14, 0, 18)]);\n\n\n\t\t\tassert.strictEqual(codeContentResults.length, 2);\n\t\t\tassert.strictEqual(codeContentResults[0].previewText, 'print(\"test! testing!!\")\\n');\n\t\t\tassert.strictEqual(codeContentResults[1].previewText, 'print(\"this is a Test\")\\n');\n\t\t\tassertRangesEqual(codeContentResults[0].rangeLocations.map(e => e.preview), [new Range(0, 7, 0, 11), new Range(0, 13, 0, 17)]);\n\t\t\tassertRangesEqual(codeContentResults[0].rangeLocations.map(e => e.source), [new Range(0, 7, 0, 11), new Range(0, 13, 0, 17)]);\n\n\t\t\tassert.strictEqual(codeWebviewResults.length, 3);\n\t\t\tassert.strictEqual(codeWebviewResults[0].previewText, 'test! testing!!');\n\t\t\tassert.strictEqual(codeWebviewResults[1].previewText, 'test! testing!!');\n\t\t\tassert.strictEqual(codeWebviewResults[2].previewText, 'this is a Test');\n\n\t\t\tassertRangesEqual(codeWebviewResults[0].rangeLocations.map(e => e.preview), [new Range(0, 1, 0, 5)]);\n\t\t\tassertRangesEqual(codeWebviewResults[1].rangeLocations.map(e => e.preview), [new Range(0, 7, 0, 11)]);\n\t\t\tassertRangesEqual(codeWebviewResults[2].rangeLocations.map(e => e.preview), [new Range(0, 11, 0, 15)]);\n\t\t\tassertRangesEqual(codeWebviewResults[0].rangeLocations.map(e => e.source), [new Range(0, 1, 0, 5)]);\n\t\t\tassertRangesEqual(codeWebviewResults[1].rangeLocations.map(e => e.source), [new Range(0, 7, 0, 11)]);\n\t\t\tassertRangesEqual(codeWebviewResults[2].rangeLocations.map(e => e.source), [new Range(0, 11, 0, 15)]);\n\t\t});\n\n\t\ttest('convert ITextSearchMatch to MatchInNotebook', () => {\n\t\t\tconst mdCellMatch = new CellMatch(aFileMatch(), mdInputCell, 0);\n\t\t\tconst markdownCellContentMatchObjs = textSearchMatchesToNotebookMatches(markdownContentResults, mdCellMatch);\n\n\t\t\tconst codeCellMatch = new CellMatch(aFileMatch(), codeCell, 0);\n\t\t\tconst codeCellContentMatchObjs = textSearchMatchesToNotebookMatches(codeContentResults, codeCellMatch);\n\t\t\tconst codeWebviewContentMatchObjs = textSearchMatchesToNotebookMatches(codeWebviewResults, codeCellMatch);\n\n\n\t\t\tassert.strictEqual(markdownCellContentMatchObjs[0].cell?.id, mdCellMatch.id);\n\t\t\tassertRangesEqual(markdownCellContentMatchObjs[0].range(), [new Range(1, 15, 1, 19)]);\n\n\t\t\tassert.strictEqual(codeCellContentMatchObjs[0].cell?.id, codeCellMatch.id);\n\t\t\tassert.strictEqual(codeCellContentMatchObjs[1].cell?.id, codeCellMatch.id);\n\t\t\tassertRangesEqual(codeCellContentMatchObjs[0].range(), [new Range(1, 8, 1, 12)]);\n\t\t\tassertRangesEqual(codeCellContentMatchObjs[1].range(), [new Range(1, 14, 1, 18)]);\n\t\t\tassertRangesEqual(codeCellContentMatchObjs[2].range(), [new Range(2, 18, 2, 22)]);\n\n\t\t\tassert.strictEqual(codeWebviewContentMatchObjs[0].cell?.id, codeCellMatch.id);\n\t\t\tassert.strictEqual(codeWebviewContentMatchObjs[1].cell?.id, codeCellMatch.id);\n\t\t\tassert.strictEqual(codeWebviewContentMatchObjs[2].cell?.id, codeCellMatch.id);\n\t\t\tassertRangesEqual(codeWebviewContentMatchObjs[0].range(), [new Range(1, 2, 1, 6)]);\n\t\t\tassertRangesEqual(codeWebviewContentMatchObjs[1].range(), [new Range(1, 8, 1, 12)]);\n\t\t\tassertRangesEqual(codeWebviewContentMatchObjs[2].range(), [new Range(1, 12, 1, 16)]);\n\n\t\t});\n\n\n\t\tfunction aFileMatch(): FileMatch {\n\t\t\tconst rawMatch: IFileMatch = {\n\t\t\t\tresource: URI.file('somepath' + ++counter),\n\t\t\t\tresults: []\n\t\t\t};\n\n\t\t\tconst searchModel = instantiationService.createInstance(SearchModel);\n\t\t\tstore.add(searchModel);\n\t\t\tconst folderMatch = instantiationService.createInstance(FolderMatch, URI.file('somepath'), '', 0, {\n\t\t\t\ttype: QueryType.Text, folderQueries: [{ folder: createFileUriFromPathFromRoot() }], contentPattern: {\n\t\t\t\t\tpattern: ''\n\t\t\t\t}\n\t\t\t}, searchModel.searchResult, searchModel.searchResult, null);\n\t\t\tconst fileMatch = instantiationService.createInstance(FileMatch, {\n\t\t\t\tpattern: ''\n\t\t\t}, undefined, undefined, folderMatch, rawMatch, null, '');\n\t\t\tfileMatch.createMatches(false);\n\t\t\tstore.add(folderMatch);\n\t\t\tstore.add(fileMatch);\n\n\t\t\treturn fileMatch;\n\t\t}\n\t});\n});\n"],
  "mappings": "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",
  "names": []
}
