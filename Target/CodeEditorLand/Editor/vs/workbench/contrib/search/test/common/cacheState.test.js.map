{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/search/test/common/cacheState.test.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport assert from 'assert';\nimport * as errors from '../../../../../base/common/errors.js';\nimport { QueryType, IFileQuery } from '../../../../services/search/common/search.js';\nimport { FileQueryCacheState } from '../../common/cacheState.js';\nimport { DeferredPromise } from '../../../../../base/common/async.js';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from '../../../../../base/test/common/utils.js';\n\nsuite('FileQueryCacheState', () => {\n\n\tensureNoDisposablesAreLeakedInTestSuite();\n\n\ttest('reuse old cacheKey until new cache is loaded', async function () {\n\n\t\tconst cache = new MockCache();\n\n\t\tconst first = createCacheState(cache);\n\t\tconst firstKey = first.cacheKey;\n\t\tassert.strictEqual(first.isLoaded, false);\n\t\tassert.strictEqual(first.isUpdating, false);\n\n\t\tfirst.load();\n\t\tassert.strictEqual(first.isLoaded, false);\n\t\tassert.strictEqual(first.isUpdating, true);\n\n\t\tawait cache.loading[firstKey].complete(null);\n\t\tassert.strictEqual(first.isLoaded, true);\n\t\tassert.strictEqual(first.isUpdating, false);\n\n\t\tconst second = createCacheState(cache, first);\n\t\tsecond.load();\n\t\tassert.strictEqual(second.isLoaded, true);\n\t\tassert.strictEqual(second.isUpdating, true);\n\t\tawait cache.awaitDisposal(0);\n\t\tassert.strictEqual(second.cacheKey, firstKey); // still using old cacheKey\n\n\t\tconst secondKey = cache.cacheKeys[1];\n\t\tawait cache.loading[secondKey].complete(null);\n\t\tassert.strictEqual(second.isLoaded, true);\n\t\tassert.strictEqual(second.isUpdating, false);\n\t\tawait cache.awaitDisposal(1);\n\t\tassert.strictEqual(second.cacheKey, secondKey);\n\t});\n\n\ttest('do not spawn additional load if previous is still loading', async function () {\n\n\t\tconst cache = new MockCache();\n\n\t\tconst first = createCacheState(cache);\n\t\tconst firstKey = first.cacheKey;\n\t\tfirst.load();\n\t\tassert.strictEqual(first.isLoaded, false);\n\t\tassert.strictEqual(first.isUpdating, true);\n\t\tassert.strictEqual(Object.keys(cache.loading).length, 1);\n\n\t\tconst second = createCacheState(cache, first);\n\t\tsecond.load();\n\t\tassert.strictEqual(second.isLoaded, false);\n\t\tassert.strictEqual(second.isUpdating, true);\n\t\tassert.strictEqual(cache.cacheKeys.length, 2);\n\t\tassert.strictEqual(Object.keys(cache.loading).length, 1); // still only one loading\n\t\tassert.strictEqual(second.cacheKey, firstKey);\n\n\t\tawait cache.loading[firstKey].complete(null);\n\t\tassert.strictEqual(second.isLoaded, true);\n\t\tassert.strictEqual(second.isUpdating, false);\n\t\tawait cache.awaitDisposal(0);\n\t});\n\n\ttest('do not use previous cacheKey if query changed', async function () {\n\n\t\tconst cache = new MockCache();\n\n\t\tconst first = createCacheState(cache);\n\t\tconst firstKey = first.cacheKey;\n\t\tfirst.load();\n\t\tawait cache.loading[firstKey].complete(null);\n\t\tassert.strictEqual(first.isLoaded, true);\n\t\tassert.strictEqual(first.isUpdating, false);\n\t\tawait cache.awaitDisposal(0);\n\n\t\tcache.baseQuery.excludePattern = { '**/node_modules': true };\n\t\tconst second = createCacheState(cache, first);\n\t\tassert.strictEqual(second.isLoaded, false);\n\t\tassert.strictEqual(second.isUpdating, false);\n\t\tawait cache.awaitDisposal(1);\n\n\t\tsecond.load();\n\t\tassert.strictEqual(second.isLoaded, false);\n\t\tassert.strictEqual(second.isUpdating, true);\n\t\tassert.notStrictEqual(second.cacheKey, firstKey); // not using old cacheKey\n\t\tconst secondKey = cache.cacheKeys[1];\n\t\tassert.strictEqual(second.cacheKey, secondKey);\n\n\t\tawait cache.loading[secondKey].complete(null);\n\t\tassert.strictEqual(second.isLoaded, true);\n\t\tassert.strictEqual(second.isUpdating, false);\n\t\tawait cache.awaitDisposal(1);\n\t});\n\n\ttest('dispose propagates', async function () {\n\n\t\tconst cache = new MockCache();\n\n\t\tconst first = createCacheState(cache);\n\t\tconst firstKey = first.cacheKey;\n\t\tfirst.load();\n\t\tawait cache.loading[firstKey].complete(null);\n\t\tconst second = createCacheState(cache, first);\n\t\tassert.strictEqual(second.isLoaded, true);\n\t\tassert.strictEqual(second.isUpdating, false);\n\t\tawait cache.awaitDisposal(0);\n\n\t\tsecond.dispose();\n\t\tassert.strictEqual(second.isLoaded, false);\n\t\tassert.strictEqual(second.isUpdating, false);\n\t\tawait cache.awaitDisposal(1);\n\t\tassert.ok(cache.disposing[firstKey]);\n\t});\n\n\ttest('keep using old cacheKey when loading fails', async function () {\n\n\t\tconst cache = new MockCache();\n\n\t\tconst first = createCacheState(cache);\n\t\tconst firstKey = first.cacheKey;\n\t\tfirst.load();\n\t\tawait cache.loading[firstKey].complete(null);\n\n\t\tconst second = createCacheState(cache, first);\n\t\tsecond.load();\n\t\tconst secondKey = cache.cacheKeys[1];\n\t\tconst origErrorHandler = errors.errorHandler.getUnexpectedErrorHandler();\n\t\ttry {\n\t\t\terrors.setUnexpectedErrorHandler(() => null);\n\t\t\tawait cache.loading[secondKey].error('loading failed');\n\t\t} finally {\n\t\t\terrors.setUnexpectedErrorHandler(origErrorHandler);\n\t\t}\n\t\tassert.strictEqual(second.isLoaded, true);\n\t\tassert.strictEqual(second.isUpdating, false);\n\t\tassert.strictEqual(Object.keys(cache.loading).length, 2);\n\t\tawait cache.awaitDisposal(0);\n\t\tassert.strictEqual(second.cacheKey, firstKey); // keep using old cacheKey\n\n\t\tconst third = createCacheState(cache, second);\n\t\tthird.load();\n\t\tassert.strictEqual(third.isLoaded, true);\n\t\tassert.strictEqual(third.isUpdating, true);\n\t\tassert.strictEqual(Object.keys(cache.loading).length, 3);\n\t\tawait cache.awaitDisposal(0);\n\t\tassert.strictEqual(third.cacheKey, firstKey);\n\n\t\tconst thirdKey = cache.cacheKeys[2];\n\t\tawait cache.loading[thirdKey].complete(null);\n\t\tassert.strictEqual(third.isLoaded, true);\n\t\tassert.strictEqual(third.isUpdating, false);\n\t\tassert.strictEqual(Object.keys(cache.loading).length, 3);\n\t\tawait cache.awaitDisposal(2);\n\t\tassert.strictEqual(third.cacheKey, thirdKey); // recover with next successful load\n\t});\n\n\tfunction createCacheState(cache: MockCache, previous?: FileQueryCacheState): FileQueryCacheState {\n\t\treturn new FileQueryCacheState(\n\t\t\tcacheKey => cache.query(cacheKey),\n\t\t\tquery => cache.load(query),\n\t\t\tcacheKey => cache.dispose(cacheKey),\n\t\t\tprevious\n\t\t);\n\t}\n\n\tclass MockCache {\n\n\t\tpublic cacheKeys: string[] = [];\n\t\tpublic loading: { [cacheKey: string]: DeferredPromise<any> } = {};\n\t\tpublic disposing: { [cacheKey: string]: DeferredPromise<void> } = {};\n\n\t\tprivate _awaitDisposal: (() => void)[][] = [];\n\n\t\tpublic baseQuery: IFileQuery = {\n\t\t\ttype: QueryType.File,\n\t\t\tfolderQueries: []\n\t\t};\n\n\t\tpublic query(cacheKey: string): IFileQuery {\n\t\t\tthis.cacheKeys.push(cacheKey);\n\t\t\treturn Object.assign({ cacheKey: cacheKey }, this.baseQuery);\n\t\t}\n\n\t\tpublic load(query: IFileQuery): Promise<any> {\n\t\t\tconst promise = new DeferredPromise<any>();\n\t\t\tthis.loading[query.cacheKey!] = promise;\n\t\t\treturn promise.p;\n\t\t}\n\n\t\tpublic dispose(cacheKey: string): Promise<void> {\n\t\t\tconst promise = new DeferredPromise<void>();\n\t\t\tthis.disposing[cacheKey] = promise;\n\t\t\tconst n = Object.keys(this.disposing).length;\n\t\t\tfor (const done of this._awaitDisposal[n] || []) {\n\t\t\t\tdone();\n\t\t\t}\n\t\t\tdelete this._awaitDisposal[n];\n\t\t\treturn promise.p;\n\t\t}\n\n\t\tpublic awaitDisposal(n: number) {\n\t\t\treturn new Promise<void>(resolve => {\n\t\t\t\tif (n === Object.keys(this.disposing).length) {\n\t\t\t\t\tresolve();\n\t\t\t\t} else {\n\t\t\t\t\t(this._awaitDisposal[n] || (this._awaitDisposal[n] = [])).push(resolve);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}\n});\n"],
  "mappings": "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",
  "names": []
}
