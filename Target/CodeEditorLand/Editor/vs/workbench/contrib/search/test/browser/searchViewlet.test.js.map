{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/search/test/browser/searchViewlet.test.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport assert from 'assert';\nimport { URI } from '../../../../../base/common/uri.js';\nimport { ILanguageConfigurationService } from '../../../../../editor/common/languages/languageConfigurationRegistry.js';\nimport { IModelService } from '../../../../../editor/common/services/model.js';\nimport { TestLanguageConfigurationService } from '../../../../../editor/test/common/modes/testLanguageConfigurationService.js';\nimport { FileService } from '../../../../../platform/files/common/fileService.js';\nimport { TestInstantiationService } from '../../../../../platform/instantiation/test/common/instantiationServiceMock.js';\nimport { ILabelService } from '../../../../../platform/label/common/label.js';\nimport { ILogService, NullLogService } from '../../../../../platform/log/common/log.js';\nimport { IUriIdentityService } from '../../../../../platform/uriIdentity/common/uriIdentity.js';\nimport { UriIdentityService } from '../../../../../platform/uriIdentity/common/uriIdentityService.js';\nimport { IWorkspaceContextService } from '../../../../../platform/workspace/common/workspace.js';\nimport { TestWorkspace } from '../../../../../platform/workspace/test/common/testWorkspace.js';\nimport { FileMatch, FolderMatch, Match, searchComparer, searchMatchComparer, SearchModel, SearchResult } from '../../browser/searchModel.js';\nimport { MockLabelService } from '../../../../services/label/test/common/mockLabelService.js';\nimport { IFileMatch, ITextSearchMatch, OneLineRange, QueryType, SearchSortOrder } from '../../../../services/search/common/search.js';\nimport { TestContextService } from '../../../../test/common/workbenchTestServices.js';\nimport { INotebookEditorService } from '../../../notebook/browser/services/notebookEditorService.js';\nimport { createFileUriFromPathFromRoot, getRootName, stubModelService, stubNotebookEditorService } from './searchTestCommon.js';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from '../../../../../base/test/common/utils.js';\n\nsuite('Search - Viewlet', () => {\n\tlet instantiation: TestInstantiationService;\n\tconst store = ensureNoDisposablesAreLeakedInTestSuite();\n\n\tsetup(() => {\n\t\tinstantiation = new TestInstantiationService();\n\t\tinstantiation.stub(ILanguageConfigurationService, TestLanguageConfigurationService);\n\t\tinstantiation.stub(IModelService, stubModelService(instantiation, (e) => store.add(e)));\n\t\tinstantiation.stub(INotebookEditorService, stubNotebookEditorService(instantiation, (e) => store.add(e)));\n\n\t\tinstantiation.set(IWorkspaceContextService, new TestContextService(TestWorkspace));\n\t\tconst fileService = new FileService(new NullLogService());\n\t\tstore.add(fileService);\n\t\tconst uriIdentityService = new UriIdentityService(fileService);\n\t\tstore.add(uriIdentityService);\n\t\tinstantiation.stub(IUriIdentityService, uriIdentityService);\n\t\tinstantiation.stub(ILabelService, new MockLabelService());\n\t\tinstantiation.stub(ILogService, new NullLogService());\n\t});\n\n\tteardown(() => {\n\t\tinstantiation.dispose();\n\t});\n\n\ttest('Data Source', function () {\n\t\tconst result: SearchResult = aSearchResult();\n\t\tresult.query = {\n\t\t\ttype: QueryType.Text,\n\t\t\tcontentPattern: { pattern: 'foo' },\n\t\t\tfolderQueries: [{\n\t\t\t\tfolder: createFileUriFromPathFromRoot()\n\t\t\t}]\n\t\t};\n\n\t\tresult.add([{\n\t\t\tresource: createFileUriFromPathFromRoot('/foo'),\n\t\t\tresults: [{\n\n\t\t\t\tpreviewText: 'bar',\n\t\t\t\trangeLocations: [\n\t\t\t\t\t{\n\t\t\t\t\t\tpreview: {\n\t\t\t\t\t\t\tstartLineNumber: 0,\n\t\t\t\t\t\t\tstartColumn: 0,\n\t\t\t\t\t\t\tendLineNumber: 0,\n\t\t\t\t\t\t\tendColumn: 1\n\t\t\t\t\t\t},\n\t\t\t\t\t\tsource: {\n\t\t\t\t\t\t\tstartLineNumber: 1,\n\t\t\t\t\t\t\tstartColumn: 0,\n\t\t\t\t\t\t\tendLineNumber: 1,\n\t\t\t\t\t\t\tendColumn: 1\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t}]\n\t\t}], '', false);\n\n\t\tconst fileMatch = result.matches()[0];\n\t\tconst lineMatch = fileMatch.matches()[0];\n\n\t\tassert.strictEqual(fileMatch.id(), URI.file(`${getRootName()}/foo`).toString());\n\t\tassert.strictEqual(lineMatch.id(), `${URI.file(`${getRootName()}/foo`).toString()}>[2,1 -> 2,2]b`);\n\t});\n\n\ttest('Comparer', () => {\n\t\tconst fileMatch1 = aFileMatch('/foo');\n\t\tconst fileMatch2 = aFileMatch('/with/path');\n\t\tconst fileMatch3 = aFileMatch('/with/path/foo');\n\t\tconst lineMatch1 = new Match(fileMatch1, ['bar'], new OneLineRange(0, 1, 1), new OneLineRange(0, 1, 1), false);\n\t\tconst lineMatch2 = new Match(fileMatch1, ['bar'], new OneLineRange(0, 1, 1), new OneLineRange(2, 1, 1), false);\n\t\tconst lineMatch3 = new Match(fileMatch1, ['bar'], new OneLineRange(0, 1, 1), new OneLineRange(2, 1, 1), false);\n\n\t\tassert(searchMatchComparer(fileMatch1, fileMatch2) < 0);\n\t\tassert(searchMatchComparer(fileMatch2, fileMatch1) > 0);\n\t\tassert(searchMatchComparer(fileMatch1, fileMatch1) === 0);\n\t\tassert(searchMatchComparer(fileMatch2, fileMatch3) < 0);\n\n\t\tassert(searchMatchComparer(lineMatch1, lineMatch2) < 0);\n\t\tassert(searchMatchComparer(lineMatch2, lineMatch1) > 0);\n\t\tassert(searchMatchComparer(lineMatch2, lineMatch3) === 0);\n\t});\n\n\ttest('Advanced Comparer', () => {\n\t\tconst fileMatch1 = aFileMatch('/with/path/foo10');\n\t\tconst fileMatch2 = aFileMatch('/with/path2/foo1');\n\t\tconst fileMatch3 = aFileMatch('/with/path/bar.a');\n\t\tconst fileMatch4 = aFileMatch('/with/path/bar.b');\n\n\t\t// By default, path < path2\n\t\tassert(searchMatchComparer(fileMatch1, fileMatch2) < 0);\n\t\t// By filenames, foo10 > foo1\n\t\tassert(searchMatchComparer(fileMatch1, fileMatch2, SearchSortOrder.FileNames) > 0);\n\t\t// By type, bar.a < bar.b\n\t\tassert(searchMatchComparer(fileMatch3, fileMatch4, SearchSortOrder.Type) < 0);\n\t});\n\n\ttest('Cross-type Comparer', () => {\n\n\t\tconst searchResult = aSearchResult();\n\t\tconst folderMatch1 = aFolderMatch('/voo', 0, searchResult);\n\t\tconst folderMatch2 = aFolderMatch('/with', 1, searchResult);\n\n\t\tconst fileMatch1 = aFileMatch('/voo/foo.a', folderMatch1);\n\t\tconst fileMatch2 = aFileMatch('/with/path.c', folderMatch2);\n\t\tconst fileMatch3 = aFileMatch('/with/path/bar.b', folderMatch2);\n\n\t\tconst lineMatch1 = new Match(fileMatch1, ['bar'], new OneLineRange(0, 1, 1), new OneLineRange(0, 1, 1), false);\n\t\tconst lineMatch2 = new Match(fileMatch1, ['bar'], new OneLineRange(0, 1, 1), new OneLineRange(2, 1, 1), false);\n\n\t\tconst lineMatch3 = new Match(fileMatch2, ['barfoo'], new OneLineRange(0, 1, 1), new OneLineRange(0, 1, 1), false);\n\t\tconst lineMatch4 = new Match(fileMatch2, ['fooooo'], new OneLineRange(0, 1, 1), new OneLineRange(2, 1, 1), false);\n\n\t\tconst lineMatch5 = new Match(fileMatch3, ['foobar'], new OneLineRange(0, 1, 1), new OneLineRange(2, 1, 1), false);\n\n\t\t/***\n\t\t * Structure would take the following form:\n\t\t *\n\t\t *\tfolderMatch1 (voo)\n\t\t *\t\t> fileMatch1 (/foo.a)\n\t\t *\t\t\t>> lineMatch1\n\t\t *\t\t\t>> lineMatch2\n\t\t *\tfolderMatch2 (with)\n\t\t *\t\t> fileMatch2 (/path.c)\n\t\t *\t\t\t>> lineMatch4\n\t\t *\t\t\t>> lineMatch5\n\t\t *\t\t> fileMatch3 (/path/bar.b)\n\t\t *\t\t\t>> lineMatch3\n\t\t *\n\t\t */\n\n\t\t// for these, refer to diagram above\n\t\tassert(searchComparer(fileMatch1, fileMatch3) < 0);\n\t\tassert(searchComparer(fileMatch2, fileMatch3) < 0);\n\t\tassert(searchComparer(folderMatch2, fileMatch2) < 0);\n\t\tassert(searchComparer(lineMatch4, lineMatch5) < 0);\n\t\tassert(searchComparer(lineMatch1, lineMatch3) < 0);\n\t\tassert(searchComparer(lineMatch2, folderMatch2) < 0);\n\n\t\t// travel up hierarchy and order of folders take precedence. \"voo < with\" in indices\n\t\tassert(searchComparer(fileMatch1, fileMatch3, SearchSortOrder.FileNames) < 0);\n\t\t// bar.b < path.c\n\t\tassert(searchComparer(fileMatch3, fileMatch2, SearchSortOrder.FileNames) < 0);\n\t\t// lineMatch4's parent is fileMatch2, \"bar.b < path.c\"\n\t\tassert(searchComparer(fileMatch3, lineMatch4, SearchSortOrder.FileNames) < 0);\n\n\t\t// bar.b < path.c\n\t\tassert(searchComparer(fileMatch3, fileMatch2, SearchSortOrder.Type) < 0);\n\t\t// lineMatch4's parent is fileMatch2, \"bar.b < path.c\"\n\t\tassert(searchComparer(fileMatch3, lineMatch4, SearchSortOrder.Type) < 0);\n\t});\n\n\tfunction aFileMatch(path: string, parentFolder?: FolderMatch, ...lineMatches: ITextSearchMatch[]): FileMatch {\n\t\tconst rawMatch: IFileMatch = {\n\t\t\tresource: URI.file('/' + path),\n\t\t\tresults: lineMatches\n\t\t};\n\t\tconst fileMatch = instantiation.createInstance(FileMatch, {\n\t\t\tpattern: ''\n\t\t}, undefined, undefined, parentFolder ?? aFolderMatch('', 0), rawMatch, null, '');\n\t\tfileMatch.createMatches(false);\n\t\tstore.add(fileMatch);\n\t\treturn fileMatch;\n\t}\n\n\tfunction aFolderMatch(path: string, index: number, parent?: SearchResult): FolderMatch {\n\t\tconst searchModel = instantiation.createInstance(SearchModel);\n\t\tstore.add(searchModel);\n\t\tconst folderMatch = instantiation.createInstance(FolderMatch, createFileUriFromPathFromRoot(path), path, index, {\n\t\t\ttype: QueryType.Text, folderQueries: [{ folder: createFileUriFromPathFromRoot() }], contentPattern: {\n\t\t\t\tpattern: ''\n\t\t\t}\n\t\t}, parent ?? aSearchResult().folderMatches()[0], searchModel.searchResult, null);\n\t\tstore.add(folderMatch);\n\t\treturn folderMatch;\n\t}\n\n\tfunction aSearchResult(): SearchResult {\n\t\tconst searchModel = instantiation.createInstance(SearchModel);\n\t\tstore.add(searchModel);\n\n\t\tsearchModel.searchResult.query = {\n\t\t\ttype: QueryType.Text, folderQueries: [{ folder: createFileUriFromPathFromRoot() }], contentPattern: {\n\t\t\t\tpattern: ''\n\t\t\t}\n\t\t};\n\t\treturn searchModel.searchResult;\n\t}\n});\n"],
  "mappings": "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",
  "names": []
}
