{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/search/test/common/extractRange.test.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport assert from 'assert';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from '../../../../../base/test/common/utils.js';\nimport { extractRangeFromFilter } from '../../common/search.js';\n\nsuite('extractRangeFromFilter', () => {\n\n\tensureNoDisposablesAreLeakedInTestSuite();\n\n\ttest('basics', async function () {\n\t\tassert.ok(!extractRangeFromFilter(''));\n\t\tassert.ok(!extractRangeFromFilter('/some/path'));\n\t\tassert.ok(!extractRangeFromFilter('/some/path/file.txt'));\n\n\t\tfor (const lineSep of [':', '#', '(', ':line ']) {\n\t\t\tfor (const colSep of [':', '#', ',']) {\n\t\t\t\tconst base = '/some/path/file.txt';\n\n\t\t\t\tlet res = extractRangeFromFilter(`${base}${lineSep}20`);\n\t\t\t\tassert.strictEqual(res?.filter, base);\n\t\t\t\tassert.strictEqual(res?.range.startLineNumber, 20);\n\t\t\t\tassert.strictEqual(res?.range.startColumn, 1);\n\n\t\t\t\tres = extractRangeFromFilter(`${base}${lineSep}20${colSep}`);\n\t\t\t\tassert.strictEqual(res?.filter, base);\n\t\t\t\tassert.strictEqual(res?.range.startLineNumber, 20);\n\t\t\t\tassert.strictEqual(res?.range.startColumn, 1);\n\n\t\t\t\tres = extractRangeFromFilter(`${base}${lineSep}20${colSep}3`);\n\t\t\t\tassert.strictEqual(res?.filter, base);\n\t\t\t\tassert.strictEqual(res?.range.startLineNumber, 20);\n\t\t\t\tassert.strictEqual(res?.range.startColumn, 3);\n\t\t\t}\n\t\t}\n\t});\n\n\ttest('allow space after path', async function () {\n\t\tconst res = extractRangeFromFilter('/some/path/file.txt (19,20)');\n\n\t\tassert.strictEqual(res?.filter, '/some/path/file.txt');\n\t\tassert.strictEqual(res?.range.startLineNumber, 19);\n\t\tassert.strictEqual(res?.range.startColumn, 20);\n\t});\n\n\tsuite('unless', function () {\n\t\tconst testSpecs = [\n\t\t\t// alpha-only symbol after unless\n\t\t\t{ filter: '/some/path/file.txt@alphasymbol', unless: ['@'], result: undefined },\n\t\t\t// unless as first char\n\t\t\t{ filter: '@/some/path/file.txt (19,20)', unless: ['@'], result: undefined },\n\t\t\t// unless as last char\n\t\t\t{ filter: '/some/path/file.txt (19,20)@', unless: ['@'], result: undefined },\n\t\t\t// unless before ,\n\t\t\t{\n\t\t\t\tfilter: '/some/@path/file.txt (19,20)', unless: ['@'], result: {\n\t\t\t\t\tfilter: '/some/@path/file.txt',\n\t\t\t\t\trange: {\n\t\t\t\t\t\tendColumn: 20,\n\t\t\t\t\t\tendLineNumber: 19,\n\t\t\t\t\t\tstartColumn: 20,\n\t\t\t\t\t\tstartLineNumber: 19\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\t\t\t// unless before :\n\t\t\t{\n\t\t\t\tfilter: '/some/@path/file.txt:19:20', unless: ['@'], result: {\n\t\t\t\t\tfilter: '/some/@path/file.txt',\n\t\t\t\t\trange: {\n\t\t\t\t\t\tendColumn: 20,\n\t\t\t\t\t\tendLineNumber: 19,\n\t\t\t\t\t\tstartColumn: 20,\n\t\t\t\t\t\tstartLineNumber: 19\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\t\t\t// unless before #\n\t\t\t{\n\t\t\t\tfilter: '/some/@path/file.txt#19', unless: ['@'], result: {\n\t\t\t\t\tfilter: '/some/@path/file.txt',\n\t\t\t\t\trange: {\n\t\t\t\t\t\tendColumn: 1,\n\t\t\t\t\t\tendLineNumber: 19,\n\t\t\t\t\t\tstartColumn: 1,\n\t\t\t\t\t\tstartLineNumber: 19\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\t\t];\n\t\tfor (const { filter, unless, result } of testSpecs) {\n\t\t\ttest(`${filter} - ${JSON.stringify(unless)}`, () => {\n\t\t\t\tassert.deepStrictEqual(extractRangeFromFilter(filter, unless), result);\n\t\t\t});\n\t\t}\n\t});\n});\n"],
  "mappings": "AAKA,OAAO,YAAY;AACnB,SAAS,+CAA+C;AACxD,SAAS,8BAA8B;AAEvC,MAAM,0BAA0B,MAAM;AAErC,0CAAwC;AAExC,OAAK,UAAU,iBAAkB;AAChC,WAAO,GAAG,CAAC,uBAAuB,EAAE,CAAC;AACrC,WAAO,GAAG,CAAC,uBAAuB,YAAY,CAAC;AAC/C,WAAO,GAAG,CAAC,uBAAuB,qBAAqB,CAAC;AAExD,eAAW,WAAW,CAAC,KAAK,KAAK,KAAK,QAAQ,GAAG;AAChD,iBAAW,UAAU,CAAC,KAAK,KAAK,GAAG,GAAG;AACrC,cAAM,OAAO;AAEb,YAAI,MAAM,uBAAuB,GAAG,IAAI,GAAG,OAAO,IAAI;AACtD,eAAO,YAAY,KAAK,QAAQ,IAAI;AACpC,eAAO,YAAY,KAAK,MAAM,iBAAiB,EAAE;AACjD,eAAO,YAAY,KAAK,MAAM,aAAa,CAAC;AAE5C,cAAM,uBAAuB,GAAG,IAAI,GAAG,OAAO,KAAK,MAAM,EAAE;AAC3D,eAAO,YAAY,KAAK,QAAQ,IAAI;AACpC,eAAO,YAAY,KAAK,MAAM,iBAAiB,EAAE;AACjD,eAAO,YAAY,KAAK,MAAM,aAAa,CAAC;AAE5C,cAAM,uBAAuB,GAAG,IAAI,GAAG,OAAO,KAAK,MAAM,GAAG;AAC5D,eAAO,YAAY,KAAK,QAAQ,IAAI;AACpC,eAAO,YAAY,KAAK,MAAM,iBAAiB,EAAE;AACjD,eAAO,YAAY,KAAK,MAAM,aAAa,CAAC;AAAA,MAC7C;AAAA,IACD;AAAA,EACD,CAAC;AAED,OAAK,0BAA0B,iBAAkB;AAChD,UAAM,MAAM,uBAAuB,6BAA6B;AAEhE,WAAO,YAAY,KAAK,QAAQ,qBAAqB;AACrD,WAAO,YAAY,KAAK,MAAM,iBAAiB,EAAE;AACjD,WAAO,YAAY,KAAK,MAAM,aAAa,EAAE;AAAA,EAC9C,CAAC;AAED,QAAM,UAAU,WAAY;AAC3B,UAAM,YAAY;AAAA;AAAA,MAEjB,EAAE,QAAQ,mCAAmC,QAAQ,CAAC,GAAG,GAAG,QAAQ,OAAU;AAAA;AAAA,MAE9E,EAAE,QAAQ,gCAAgC,QAAQ,CAAC,GAAG,GAAG,QAAQ,OAAU;AAAA;AAAA,MAE3E,EAAE,QAAQ,gCAAgC,QAAQ,CAAC,GAAG,GAAG,QAAQ,OAAU;AAAA;AAAA,MAE3E;AAAA,QACC,QAAQ;AAAA,QAAgC,QAAQ,CAAC,GAAG;AAAA,QAAG,QAAQ;AAAA,UAC9D,QAAQ;AAAA,UACR,OAAO;AAAA,YACN,WAAW;AAAA,YACX,eAAe;AAAA,YACf,aAAa;AAAA,YACb,iBAAiB;AAAA,UAClB;AAAA,QACD;AAAA,MACD;AAAA;AAAA,MAEA;AAAA,QACC,QAAQ;AAAA,QAA8B,QAAQ,CAAC,GAAG;AAAA,QAAG,QAAQ;AAAA,UAC5D,QAAQ;AAAA,UACR,OAAO;AAAA,YACN,WAAW;AAAA,YACX,eAAe;AAAA,YACf,aAAa;AAAA,YACb,iBAAiB;AAAA,UAClB;AAAA,QACD;AAAA,MACD;AAAA;AAAA,MAEA;AAAA,QACC,QAAQ;AAAA,QAA2B,QAAQ,CAAC,GAAG;AAAA,QAAG,QAAQ;AAAA,UACzD,QAAQ;AAAA,UACR,OAAO;AAAA,YACN,WAAW;AAAA,YACX,eAAe;AAAA,YACf,aAAa;AAAA,YACb,iBAAiB;AAAA,UAClB;AAAA,QACD;AAAA,MACD;AAAA,IACD;AACA,eAAW,EAAE,QAAQ,QAAQ,OAAO,KAAK,WAAW;AACnD,WAAK,GAAG,MAAM,MAAM,KAAK,UAAU,MAAM,CAAC,IAAI,MAAM;AACnD,eAAO,gBAAgB,uBAAuB,QAAQ,MAAM,GAAG,MAAM;AAAA,MACtE,CAAC;AAAA,IACF;AAAA,EACD,CAAC;AACF,CAAC;",
  "names": []
}
