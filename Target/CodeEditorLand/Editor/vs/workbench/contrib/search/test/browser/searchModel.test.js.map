{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/search/test/browser/searchModel.test.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport assert from 'assert';\nimport * as sinon from 'sinon';\nimport * as arrays from '../../../../../base/common/arrays.js';\nimport { DeferredPromise, timeout } from '../../../../../base/common/async.js';\nimport { CancellationToken, CancellationTokenSource } from '../../../../../base/common/cancellation.js';\nimport { URI } from '../../../../../base/common/uri.js';\nimport { Range } from '../../../../../editor/common/core/range.js';\nimport { IModelService } from '../../../../../editor/common/services/model.js';\nimport { ModelService } from '../../../../../editor/common/services/modelService.js';\nimport { IConfigurationService } from '../../../../../platform/configuration/common/configuration.js';\nimport { TestConfigurationService } from '../../../../../platform/configuration/test/common/testConfigurationService.js';\nimport { TestInstantiationService } from '../../../../../platform/instantiation/test/common/instantiationServiceMock.js';\nimport { IAITextQuery, IFileMatch, IFileQuery, IFileSearchStats, IFolderQuery, ISearchComplete, ISearchProgressItem, ISearchQuery, ISearchService, ITextQuery, ITextSearchMatch, OneLineRange, QueryType, TextSearchMatch } from '../../../../services/search/common/search.js';\nimport { ITelemetryService } from '../../../../../platform/telemetry/common/telemetry.js';\nimport { NullTelemetryService } from '../../../../../platform/telemetry/common/telemetryUtils.js';\nimport { CellMatch, MatchInNotebook, SearchModel } from '../../browser/searchModel.js';\nimport { IThemeService } from '../../../../../platform/theme/common/themeService.js';\nimport { TestThemeService } from '../../../../../platform/theme/test/common/testThemeService.js';\nimport { FileService } from '../../../../../platform/files/common/fileService.js';\nimport { ILogService, NullLogService } from '../../../../../platform/log/common/log.js';\nimport { IUriIdentityService } from '../../../../../platform/uriIdentity/common/uriIdentity.js';\nimport { UriIdentityService } from '../../../../../platform/uriIdentity/common/uriIdentityService.js';\nimport { ILabelService } from '../../../../../platform/label/common/label.js';\nimport { INotebookEditorService } from '../../../notebook/browser/services/notebookEditorService.js';\nimport { IEditorGroupsService } from '../../../../services/editor/common/editorGroupsService.js';\nimport { TestEditorGroupsService, TestEditorService } from '../../../../test/browser/workbenchTestServices.js';\nimport { NotebookEditorWidgetService } from '../../../notebook/browser/services/notebookEditorServiceImpl.js';\nimport { createFileUriFromPathFromRoot, getRootName } from './searchTestCommon.js';\nimport { INotebookCellMatchWithModel, INotebookFileMatchWithModel, contentMatchesToTextSearchMatches, webviewMatchesToTextSearchMatches } from '../../browser/notebookSearch/searchNotebookHelpers.js';\nimport { CellKind } from '../../../notebook/common/notebookCommon.js';\nimport { ICellViewModel } from '../../../notebook/browser/notebookBrowser.js';\nimport { FindMatch, IReadonlyTextBuffer } from '../../../../../editor/common/model.js';\nimport { ResourceMap, ResourceSet } from '../../../../../base/common/map.js';\nimport { INotebookService } from '../../../notebook/common/notebookService.js';\nimport { INotebookSearchService } from '../../common/notebookSearch.js';\nimport { IContextKeyService } from '../../../../../platform/contextkey/common/contextkey.js';\nimport { MockContextKeyService } from '../../../../../platform/keybinding/test/common/mockKeybindingService.js';\nimport { IEditorService } from '../../../../services/editor/common/editorService.js';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from '../../../../../base/test/common/utils.js';\n\nconst nullEvent = new class {\n\tid: number = -1;\n\ttopic!: string;\n\tname!: string;\n\tdescription!: string;\n\tdata: any;\n\n\tstartTime!: Date;\n\tstopTime!: Date;\n\n\tstop(): void {\n\t\treturn;\n\t}\n\n\ttimeTaken(): number {\n\t\treturn -1;\n\t}\n};\n\nconst lineOneRange = new OneLineRange(1, 0, 1);\n\nsuite('SearchModel', () => {\n\n\tlet instantiationService: TestInstantiationService;\n\tconst store = ensureNoDisposablesAreLeakedInTestSuite();\n\n\tconst testSearchStats: IFileSearchStats = {\n\t\tfromCache: false,\n\t\tresultCount: 1,\n\t\ttype: 'searchProcess',\n\t\tdetailStats: {\n\t\t\tfileWalkTime: 0,\n\t\t\tcmdTime: 0,\n\t\t\tcmdResultCount: 0,\n\t\t\tdirectoriesWalked: 2,\n\t\t\tfilesWalked: 3\n\t\t}\n\t};\n\n\tconst folderQueries: IFolderQuery[] = [\n\t\t{ folder: createFileUriFromPathFromRoot() }\n\t];\n\n\tsetup(() => {\n\t\tinstantiationService = new TestInstantiationService();\n\t\tinstantiationService.stub(ITelemetryService, NullTelemetryService);\n\t\tinstantiationService.stub(ILabelService, { getUriBasenameLabel: (uri: URI) => '' });\n\t\tinstantiationService.stub(INotebookService, { getNotebookTextModels: () => [] });\n\t\tinstantiationService.stub(IModelService, stubModelService(instantiationService));\n\t\tinstantiationService.stub(INotebookEditorService, stubNotebookEditorService(instantiationService));\n\t\tinstantiationService.stub(ISearchService, {});\n\t\tinstantiationService.stub(ISearchService, 'textSearch', Promise.resolve({ results: [] }));\n\t\tconst fileService = new FileService(new NullLogService());\n\t\tstore.add(fileService);\n\t\tconst uriIdentityService = new UriIdentityService(fileService);\n\t\tstore.add(uriIdentityService);\n\t\tinstantiationService.stub(IUriIdentityService, uriIdentityService);\n\t\tinstantiationService.stub(ILogService, new NullLogService());\n\t});\n\n\tteardown(() => sinon.restore());\n\n\tfunction searchServiceWithResults(results: IFileMatch[], complete: ISearchComplete | null = null): ISearchService {\n\t\treturn <ISearchService>{\n\t\t\ttextSearch(query: ISearchQuery, token?: CancellationToken, onProgress?: (result: ISearchProgressItem) => void, notebookURIs?: ResourceSet): Promise<ISearchComplete> {\n\t\t\t\treturn new Promise(resolve => {\n\t\t\t\t\tqueueMicrotask(() => {\n\t\t\t\t\t\tresults.forEach(onProgress!);\n\t\t\t\t\t\tresolve(complete!);\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t},\n\t\t\tfileSearch(query: IFileQuery, token?: CancellationToken): Promise<ISearchComplete> {\n\t\t\t\treturn new Promise(resolve => {\n\t\t\t\t\tqueueMicrotask(() => {\n\t\t\t\t\t\tresolve({ results: results, messages: [] });\n\t\t\t\t\t});\n\n\t\t\t\t});\n\t\t\t},\n\t\t\taiTextSearch(query: ISearchQuery, token?: CancellationToken, onProgress?: (result: ISearchProgressItem) => void, notebookURIs?: ResourceSet): Promise<ISearchComplete> {\n\t\t\t\treturn new Promise(resolve => {\n\t\t\t\t\tqueueMicrotask(() => {\n\t\t\t\t\t\tresults.forEach(onProgress!);\n\t\t\t\t\t\tresolve(complete!);\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t},\n\t\t\ttextSearchSplitSyncAsync(query: ITextQuery, token?: CancellationToken | undefined, onProgress?: ((result: ISearchProgressItem) => void) | undefined): { syncResults: ISearchComplete; asyncResults: Promise<ISearchComplete> } {\n\t\t\t\treturn {\n\t\t\t\t\tsyncResults: {\n\t\t\t\t\t\tresults: [],\n\t\t\t\t\t\tmessages: []\n\t\t\t\t\t},\n\t\t\t\t\tasyncResults: new Promise(resolve => {\n\t\t\t\t\t\tqueueMicrotask(() => {\n\t\t\t\t\t\t\tresults.forEach(onProgress!);\n\t\t\t\t\t\t\tresolve(complete!);\n\t\t\t\t\t\t});\n\t\t\t\t\t})\n\t\t\t\t};\n\t\t\t}\n\t\t};\n\t}\n\n\tfunction searchServiceWithError(error: Error): ISearchService {\n\t\treturn <ISearchService>{\n\t\t\ttextSearch(query: ISearchQuery, token?: CancellationToken, onProgress?: (result: ISearchProgressItem) => void): Promise<ISearchComplete> {\n\t\t\t\treturn new Promise((resolve, reject) => {\n\t\t\t\t\treject(error);\n\t\t\t\t});\n\t\t\t},\n\t\t\tfileSearch(query: IFileQuery, token?: CancellationToken): Promise<ISearchComplete> {\n\t\t\t\treturn new Promise((resolve, reject) => {\n\t\t\t\t\tqueueMicrotask(() => {\n\t\t\t\t\t\treject(error);\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t},\n\t\t\taiTextSearch(query: ISearchQuery, token?: CancellationToken, onProgress?: (result: ISearchProgressItem) => void, notebookURIs?: ResourceSet): Promise<ISearchComplete> {\n\t\t\t\treturn new Promise((resolve, reject) => {\n\t\t\t\t\treject(error);\n\t\t\t\t});\n\t\t\t},\n\t\t\ttextSearchSplitSyncAsync(query: ITextQuery, token?: CancellationToken | undefined, onProgress?: ((result: ISearchProgressItem) => void) | undefined): { syncResults: ISearchComplete; asyncResults: Promise<ISearchComplete> } {\n\t\t\t\treturn {\n\t\t\t\t\tsyncResults: {\n\t\t\t\t\t\tresults: [],\n\t\t\t\t\t\tmessages: []\n\t\t\t\t\t},\n\t\t\t\t\tasyncResults: new Promise((resolve, reject) => {\n\t\t\t\t\t\treject(error);\n\t\t\t\t\t})\n\t\t\t\t};\n\t\t\t}\n\t\t};\n\t}\n\n\tfunction canceleableSearchService(tokenSource: CancellationTokenSource): ISearchService {\n\t\treturn <ISearchService>{\n\t\t\ttextSearch(query: ITextQuery, token?: CancellationToken, onProgress?: (result: ISearchProgressItem) => void): Promise<ISearchComplete> {\n\t\t\t\tconst disposable = token?.onCancellationRequested(() => tokenSource.cancel());\n\t\t\t\tif (disposable) {\n\t\t\t\t\tstore.add(disposable);\n\t\t\t\t}\n\n\t\t\t\treturn this.textSearchSplitSyncAsync(query, token, onProgress).asyncResults;\n\t\t\t},\n\t\t\tfileSearch(query: IFileQuery, token?: CancellationToken): Promise<ISearchComplete> {\n\t\t\t\tconst disposable = token?.onCancellationRequested(() => tokenSource.cancel());\n\t\t\t\tif (disposable) {\n\t\t\t\t\tstore.add(disposable);\n\t\t\t\t}\n\t\t\t\treturn new Promise(resolve => {\n\t\t\t\t\tqueueMicrotask(() => {\n\t\t\t\t\t\tresolve(<any>{});\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t},\n\t\t\taiTextSearch(query: IAITextQuery, token?: CancellationToken, onProgress?: (result: ISearchProgressItem) => void, notebookURIs?: ResourceSet): Promise<ISearchComplete> {\n\t\t\t\tconst disposable = token?.onCancellationRequested(() => tokenSource.cancel());\n\t\t\t\tif (disposable) {\n\t\t\t\t\tstore.add(disposable);\n\t\t\t\t}\n\n\t\t\t\treturn Promise.resolve({\n\t\t\t\t\tresults: [],\n\t\t\t\t\tmessages: []\n\t\t\t\t});\n\t\t\t},\n\t\t\ttextSearchSplitSyncAsync(query: ITextQuery, token?: CancellationToken | undefined, onProgress?: ((result: ISearchProgressItem) => void) | undefined): { syncResults: ISearchComplete; asyncResults: Promise<ISearchComplete> } {\n\t\t\t\tconst disposable = token?.onCancellationRequested(() => tokenSource.cancel());\n\t\t\t\tif (disposable) {\n\t\t\t\t\tstore.add(disposable);\n\t\t\t\t}\n\t\t\t\treturn {\n\t\t\t\t\tsyncResults: {\n\t\t\t\t\t\tresults: [],\n\t\t\t\t\t\tmessages: []\n\t\t\t\t\t},\n\t\t\t\t\tasyncResults: new Promise(resolve => {\n\t\t\t\t\t\tqueueMicrotask(() => {\n\t\t\t\t\t\t\tresolve(<any>{\n\t\t\t\t\t\t\t\tresults: [],\n\t\t\t\t\t\t\t\tmessages: []\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t});\n\t\t\t\t\t})\n\t\t\t\t};\n\t\t\t}\n\t\t};\n\t}\n\n\tfunction searchServiceWithDeferredPromise(p: Promise<ISearchComplete>): ISearchService {\n\t\treturn <ISearchService>{\n\t\t\ttextSearchSplitSyncAsync(query: ITextQuery, token?: CancellationToken | undefined, onProgress?: ((result: ISearchProgressItem) => void) | undefined): { syncResults: ISearchComplete; asyncResults: Promise<ISearchComplete> } {\n\t\t\t\treturn {\n\t\t\t\t\tsyncResults: {\n\t\t\t\t\t\tresults: [],\n\t\t\t\t\t\tmessages: []\n\t\t\t\t\t},\n\t\t\t\t\tasyncResults: p,\n\t\t\t\t};\n\t\t\t}\n\t\t};\n\t}\n\n\n\tfunction notebookSearchServiceWithInfo(results: INotebookFileMatchWithModel[], tokenSource: CancellationTokenSource | undefined): INotebookSearchService {\n\t\treturn <INotebookSearchService>{\n\t\t\t_serviceBrand: undefined,\n\t\t\tnotebookSearch(query: ITextQuery, token: CancellationToken | undefined, searchInstanceID: string, onProgress?: (result: ISearchProgressItem) => void): {\n\t\t\t\topenFilesToScan: ResourceSet;\n\t\t\t\tcompleteData: Promise<ISearchComplete>;\n\t\t\t\tallScannedFiles: Promise<ResourceSet>;\n\t\t\t} {\n\t\t\t\tconst disposable = token?.onCancellationRequested(() => tokenSource?.cancel());\n\t\t\t\tif (disposable) {\n\t\t\t\t\tstore.add(disposable);\n\t\t\t\t}\n\t\t\t\tconst localResults = new ResourceMap<INotebookFileMatchWithModel | null>(uri => uri.path);\n\n\t\t\t\tresults.forEach(r => {\n\t\t\t\t\tlocalResults.set(r.resource, r);\n\t\t\t\t});\n\n\t\t\t\tif (onProgress) {\n\t\t\t\t\tarrays.coalesce([...localResults.values()]).forEach(onProgress);\n\t\t\t\t}\n\t\t\t\treturn {\n\t\t\t\t\topenFilesToScan: new ResourceSet([...localResults.keys()]),\n\t\t\t\t\tcompleteData: Promise.resolve({\n\t\t\t\t\t\tmessages: [],\n\t\t\t\t\t\tresults: arrays.coalesce([...localResults.values()]),\n\t\t\t\t\t\tlimitHit: false\n\t\t\t\t\t}),\n\t\t\t\t\tallScannedFiles: Promise.resolve(new ResourceSet()),\n\t\t\t\t};\n\t\t\t}\n\t\t};\n\t}\n\n\ttest('Search Model: Search adds to results', async () => {\n\t\tconst results = [\n\t\t\taRawMatch('/1',\n\t\t\t\tnew TextSearchMatch('preview 1', new OneLineRange(1, 1, 4)),\n\t\t\t\tnew TextSearchMatch('preview 1', new OneLineRange(1, 4, 11))),\n\t\t\taRawMatch('/2', new TextSearchMatch('preview 2', lineOneRange))];\n\t\tinstantiationService.stub(ISearchService, searchServiceWithResults(results, { limitHit: false, messages: [], results }));\n\t\tinstantiationService.stub(INotebookSearchService, notebookSearchServiceWithInfo([], undefined));\n\n\t\tconst testObject: SearchModel = instantiationService.createInstance(SearchModel);\n\t\tstore.add(testObject);\n\t\tawait testObject.search({ contentPattern: { pattern: 'somestring' }, type: QueryType.Text, folderQueries }).asyncResults;\n\n\t\tconst actual = testObject.searchResult.matches();\n\n\t\tassert.strictEqual(2, actual.length);\n\t\tassert.strictEqual(URI.file(`${getRootName()}/1`).toString(), actual[0].resource.toString());\n\n\t\tlet actuaMatches = actual[0].matches();\n\t\tassert.strictEqual(2, actuaMatches.length);\n\t\tassert.strictEqual('preview 1', actuaMatches[0].text());\n\t\tassert.ok(new Range(2, 2, 2, 5).equalsRange(actuaMatches[0].range()));\n\t\tassert.strictEqual('preview 1', actuaMatches[1].text());\n\t\tassert.ok(new Range(2, 5, 2, 12).equalsRange(actuaMatches[1].range()));\n\n\t\tactuaMatches = actual[1].matches();\n\t\tassert.strictEqual(1, actuaMatches.length);\n\t\tassert.strictEqual('preview 2', actuaMatches[0].text());\n\t\tassert.ok(new Range(2, 1, 2, 2).equalsRange(actuaMatches[0].range()));\n\t});\n\n\n\ttest('Search Model: Search can return notebook results', async () => {\n\t\tconst results = [\n\t\t\taRawMatch('/2',\n\t\t\t\tnew TextSearchMatch('test', new OneLineRange(1, 1, 5)),\n\t\t\t\tnew TextSearchMatch('this is a test', new OneLineRange(1, 11, 15))),\n\t\t\taRawMatch('/3', new TextSearchMatch('test', lineOneRange))];\n\t\tinstantiationService.stub(ISearchService, searchServiceWithResults(results, { limitHit: false, messages: [], results }));\n\t\tsinon.stub(CellMatch.prototype, 'addContext');\n\n\t\tconst mdInputCell = {\n\t\t\tcellKind: CellKind.Markup, textBuffer: <IReadonlyTextBuffer>{\n\t\t\t\tgetLineContent(lineNumber: number): string {\n\t\t\t\t\tif (lineNumber === 1) {\n\t\t\t\t\t\treturn '# Test';\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn '';\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\t\t\tid: 'mdInputCell'\n\t\t} as ICellViewModel;\n\n\t\tconst findMatchMds = [new FindMatch(new Range(1, 3, 1, 7), ['Test'])];\n\n\t\tconst codeCell = {\n\t\t\tcellKind: CellKind.Code, textBuffer: <IReadonlyTextBuffer>{\n\t\t\t\tgetLineContent(lineNumber: number): string {\n\t\t\t\t\tif (lineNumber === 1) {\n\t\t\t\t\t\treturn 'print(\"test! testing!!\")';\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn '';\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\t\t\tid: 'codeCell'\n\t\t} as ICellViewModel;\n\n\t\tconst findMatchCodeCells =\n\t\t\t[new FindMatch(new Range(1, 8, 1, 12), ['test']),\n\t\t\tnew FindMatch(new Range(1, 14, 1, 18), ['test']),\n\t\t\t];\n\t\tconst webviewMatches = [{\n\t\t\tindex: 0,\n\t\t\tsearchPreviewInfo: {\n\t\t\t\tline: 'test! testing!!',\n\t\t\t\trange: {\n\t\t\t\t\tstart: 1,\n\t\t\t\t\tend: 5\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\tindex: 1,\n\t\t\tsearchPreviewInfo: {\n\t\t\t\tline: 'test! testing!!',\n\t\t\t\trange: {\n\t\t\t\t\tstart: 7,\n\t\t\t\t\tend: 11\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t];\n\t\tconst cellMatchMd: INotebookCellMatchWithModel = {\n\t\t\tcell: mdInputCell,\n\t\t\tindex: 0,\n\t\t\tcontentResults: contentMatchesToTextSearchMatches(findMatchMds, mdInputCell),\n\t\t\twebviewResults: []\n\t\t};\n\n\t\tconst cellMatchCode: INotebookCellMatchWithModel = {\n\t\t\tcell: codeCell,\n\t\t\tindex: 1,\n\t\t\tcontentResults: contentMatchesToTextSearchMatches(findMatchCodeCells, codeCell),\n\t\t\twebviewResults: webviewMatchesToTextSearchMatches(webviewMatches),\n\t\t};\n\n\t\tconst notebookSearchService = instantiationService.stub(INotebookSearchService, notebookSearchServiceWithInfo([aRawMatchWithCells('/1', cellMatchMd, cellMatchCode)], undefined));\n\t\tconst notebookSearch = sinon.spy(notebookSearchService, \"notebookSearch\");\n\t\tconst model: SearchModel = instantiationService.createInstance(SearchModel);\n\t\tstore.add(model);\n\t\tawait model.search({ contentPattern: { pattern: 'test' }, type: QueryType.Text, folderQueries }).asyncResults;\n\t\tconst actual = model.searchResult.matches();\n\n\t\tassert(notebookSearch.calledOnce);\n\n\t\tassert.strictEqual(3, actual.length);\n\t\tassert.strictEqual(URI.file(`${getRootName()}/1`).toString(), actual[0].resource.toString());\n\t\tconst notebookFileMatches = actual[0].matches();\n\n\t\tassert.ok(notebookFileMatches[0].range().equalsRange(new Range(1, 3, 1, 7)));\n\t\tassert.ok(notebookFileMatches[1].range().equalsRange(new Range(1, 8, 1, 12)));\n\t\tassert.ok(notebookFileMatches[2].range().equalsRange(new Range(1, 14, 1, 18)));\n\t\tassert.ok(notebookFileMatches[3].range().equalsRange(new Range(1, 2, 1, 6)));\n\t\tassert.ok(notebookFileMatches[4].range().equalsRange(new Range(1, 8, 1, 12)));\n\n\t\tnotebookFileMatches.forEach(match => match instanceof MatchInNotebook);\n\t\tassert((notebookFileMatches[0] as MatchInNotebook).cell?.id === 'mdInputCell');\n\t\tassert((notebookFileMatches[1] as MatchInNotebook).cell?.id === 'codeCell');\n\t\tassert((notebookFileMatches[2] as MatchInNotebook).cell?.id === 'codeCell');\n\t\tassert((notebookFileMatches[3] as MatchInNotebook).cell?.id === 'codeCell');\n\t\tassert((notebookFileMatches[4] as MatchInNotebook).cell?.id === 'codeCell');\n\n\t\tconst mdCellMatchProcessed = (notebookFileMatches[0] as MatchInNotebook).cellParent;\n\t\tconst codeCellMatchProcessed = (notebookFileMatches[1] as MatchInNotebook).cellParent;\n\n\t\tassert(mdCellMatchProcessed.contentMatches.length === 1);\n\t\tassert(codeCellMatchProcessed.contentMatches.length === 2);\n\t\tassert(codeCellMatchProcessed.webviewMatches.length === 2);\n\n\t\tassert(mdCellMatchProcessed.contentMatches[0] === notebookFileMatches[0]);\n\t\tassert(codeCellMatchProcessed.contentMatches[0] === notebookFileMatches[1]);\n\t\tassert(codeCellMatchProcessed.contentMatches[1] === notebookFileMatches[2]);\n\t\tassert(codeCellMatchProcessed.webviewMatches[0] === notebookFileMatches[3]);\n\t\tassert(codeCellMatchProcessed.webviewMatches[1] === notebookFileMatches[4]);\n\n\t\tassert.strictEqual(URI.file(`${getRootName()}/2`).toString(), actual[1].resource.toString());\n\t\tassert.strictEqual(URI.file(`${getRootName()}/3`).toString(), actual[2].resource.toString());\n\t});\n\n\ttest('Search Model: Search reports telemetry on search completed', async () => {\n\t\tconst target = instantiationService.spy(ITelemetryService, 'publicLog');\n\t\tconst results = [\n\t\t\taRawMatch('/1',\n\t\t\t\tnew TextSearchMatch('preview 1', new OneLineRange(1, 1, 4)),\n\t\t\t\tnew TextSearchMatch('preview 1', new OneLineRange(1, 4, 11))),\n\t\t\taRawMatch('/2',\n\t\t\t\tnew TextSearchMatch('preview 2', lineOneRange))];\n\t\tinstantiationService.stub(ISearchService, searchServiceWithResults(results, { limitHit: false, messages: [], results }));\n\t\tinstantiationService.stub(INotebookSearchService, notebookSearchServiceWithInfo([], undefined));\n\n\t\tconst testObject: SearchModel = instantiationService.createInstance(SearchModel);\n\t\tstore.add(testObject);\n\t\tawait testObject.search({ contentPattern: { pattern: 'somestring' }, type: QueryType.Text, folderQueries }).asyncResults;\n\n\t\tassert.ok(target.calledThrice);\n\t\tassert.ok(target.calledWith('searchResultsFirstRender'));\n\t\tassert.ok(target.calledWith('searchResultsFinished'));\n\t});\n\n\ttest('Search Model: Search reports timed telemetry on search when progress is not called', () => {\n\t\tconst target2 = sinon.spy();\n\t\tsinon.stub(nullEvent, 'stop').callsFake(target2);\n\t\tconst target1 = sinon.stub().returns(nullEvent);\n\t\tinstantiationService.stub(ITelemetryService, 'publicLog', target1);\n\n\t\tinstantiationService.stub(ISearchService, searchServiceWithResults([], { limitHit: false, messages: [], results: [] }));\n\t\tinstantiationService.stub(INotebookSearchService, notebookSearchServiceWithInfo([], undefined));\n\n\t\tconst testObject = instantiationService.createInstance(SearchModel);\n\t\tstore.add(testObject);\n\t\tconst result = testObject.search({ contentPattern: { pattern: 'somestring' }, type: QueryType.Text, folderQueries }).asyncResults;\n\n\t\treturn result.then(() => {\n\t\t\treturn timeout(1).then(() => {\n\t\t\t\tassert.ok(target1.calledWith('searchResultsFirstRender'));\n\t\t\t\tassert.ok(target1.calledWith('searchResultsFinished'));\n\t\t\t});\n\t\t});\n\t});\n\n\ttest('Search Model: Search reports timed telemetry on search when progress is called', () => {\n\t\tconst target2 = sinon.spy();\n\t\tsinon.stub(nullEvent, 'stop').callsFake(target2);\n\t\tconst target1 = sinon.stub().returns(nullEvent);\n\t\tinstantiationService.stub(ITelemetryService, 'publicLog', target1);\n\n\t\tinstantiationService.stub(ISearchService, searchServiceWithResults(\n\t\t\t[aRawMatch('/1', new TextSearchMatch('some preview', lineOneRange))],\n\t\t\t{ results: [], stats: testSearchStats, messages: [] }));\n\t\tinstantiationService.stub(INotebookSearchService, notebookSearchServiceWithInfo([], undefined));\n\n\t\tconst testObject = instantiationService.createInstance(SearchModel);\n\t\tstore.add(testObject);\n\t\tconst result = testObject.search({ contentPattern: { pattern: 'somestring' }, type: QueryType.Text, folderQueries }).asyncResults;\n\n\t\treturn result.then(() => {\n\t\t\treturn timeout(1).then(() => {\n\t\t\t\t// timeout because promise handlers may run in a different order. We only care that these\n\t\t\t\t// are fired at some point.\n\t\t\t\tassert.ok(target1.calledWith('searchResultsFirstRender'));\n\t\t\t\tassert.ok(target1.calledWith('searchResultsFinished'));\n\t\t\t\t// assert.strictEqual(1, target2.callCount);\n\t\t\t});\n\t\t});\n\t});\n\n\ttest('Search Model: Search reports timed telemetry on search when error is called', () => {\n\t\tconst target2 = sinon.spy();\n\t\tsinon.stub(nullEvent, 'stop').callsFake(target2);\n\t\tconst target1 = sinon.stub().returns(nullEvent);\n\t\tinstantiationService.stub(ITelemetryService, 'publicLog', target1);\n\n\t\tinstantiationService.stub(ISearchService, searchServiceWithError(new Error('This error should be thrown by this test.')));\n\t\tinstantiationService.stub(INotebookSearchService, notebookSearchServiceWithInfo([], undefined));\n\n\t\tconst testObject = instantiationService.createInstance(SearchModel);\n\t\tstore.add(testObject);\n\t\tconst result = testObject.search({ contentPattern: { pattern: 'somestring' }, type: QueryType.Text, folderQueries }).asyncResults;\n\n\t\treturn result.then(() => { }, () => {\n\t\t\treturn timeout(1).then(() => {\n\t\t\t\tassert.ok(target1.calledWith('searchResultsFirstRender'));\n\t\t\t\tassert.ok(target1.calledWith('searchResultsFinished'));\n\t\t\t});\n\t\t});\n\t});\n\n\ttest('Search Model: Search reports timed telemetry on search when error is cancelled error', () => {\n\t\tconst target2 = sinon.spy();\n\t\tsinon.stub(nullEvent, 'stop').callsFake(target2);\n\t\tconst target1 = sinon.stub().returns(nullEvent);\n\t\tinstantiationService.stub(ITelemetryService, 'publicLog', target1);\n\n\t\tconst deferredPromise = new DeferredPromise<ISearchComplete>();\n\n\t\tinstantiationService.stub(ISearchService, searchServiceWithDeferredPromise(deferredPromise.p));\n\t\tinstantiationService.stub(INotebookSearchService, notebookSearchServiceWithInfo([], undefined));\n\n\t\tconst testObject = instantiationService.createInstance(SearchModel);\n\t\tstore.add(testObject);\n\t\tconst result = testObject.search({ contentPattern: { pattern: 'somestring' }, type: QueryType.Text, folderQueries }).asyncResults;\n\n\t\tdeferredPromise.cancel();\n\n\t\treturn result.then(() => { }, async () => {\n\t\t\treturn timeout(1).then(() => {\n\t\t\t\tassert.ok(target1.calledWith('searchResultsFirstRender'));\n\t\t\t\tassert.ok(target1.calledWith('searchResultsFinished'));\n\t\t\t\t// assert.ok(target2.calledOnce);\n\t\t\t});\n\t\t});\n\t});\n\n\ttest('Search Model: Search results are cleared during search', async () => {\n\t\tconst results = [\n\t\t\taRawMatch('/1',\n\t\t\t\tnew TextSearchMatch('preview 1', new OneLineRange(1, 1, 4)),\n\t\t\t\tnew TextSearchMatch('preview 1', new OneLineRange(1, 4, 11))),\n\t\t\taRawMatch('/2',\n\t\t\t\tnew TextSearchMatch('preview 2', lineOneRange))];\n\t\tinstantiationService.stub(ISearchService, searchServiceWithResults(results, { limitHit: false, messages: [], results: [] }));\n\t\tinstantiationService.stub(INotebookSearchService, notebookSearchServiceWithInfo([], undefined));\n\t\tconst testObject: SearchModel = instantiationService.createInstance(SearchModel);\n\t\tstore.add(testObject);\n\t\tawait testObject.search({ contentPattern: { pattern: 'somestring' }, type: QueryType.Text, folderQueries }).asyncResults;\n\t\tassert.ok(!testObject.searchResult.isEmpty());\n\n\t\tinstantiationService.stub(ISearchService, searchServiceWithResults([]));\n\n\t\ttestObject.search({ contentPattern: { pattern: 'somestring' }, type: QueryType.Text, folderQueries });\n\t\tassert.ok(testObject.searchResult.isEmpty());\n\t});\n\n\ttest('Search Model: Previous search is cancelled when new search is called', async () => {\n\t\tconst tokenSource = new CancellationTokenSource();\n\t\tstore.add(tokenSource);\n\t\tinstantiationService.stub(ISearchService, canceleableSearchService(tokenSource));\n\t\tinstantiationService.stub(INotebookSearchService, notebookSearchServiceWithInfo([], tokenSource));\n\t\tconst testObject: SearchModel = instantiationService.createInstance(SearchModel);\n\t\tstore.add(testObject);\n\t\ttestObject.search({ contentPattern: { pattern: 'somestring' }, type: QueryType.Text, folderQueries });\n\t\tinstantiationService.stub(ISearchService, searchServiceWithResults([]));\n\t\tinstantiationService.stub(INotebookSearchService, notebookSearchServiceWithInfo([], undefined));\n\t\ttestObject.search({ contentPattern: { pattern: 'somestring' }, type: QueryType.Text, folderQueries });\n\n\t\tassert.ok(tokenSource.token.isCancellationRequested);\n\t});\n\n\ttest('getReplaceString returns proper replace string for regExpressions', async () => {\n\t\tconst results = [\n\t\t\taRawMatch('/1',\n\t\t\t\tnew TextSearchMatch('preview 1', new OneLineRange(1, 1, 4)),\n\t\t\t\tnew TextSearchMatch('preview 1', new OneLineRange(1, 4, 11)))];\n\t\tinstantiationService.stub(ISearchService, searchServiceWithResults(results, { limitHit: false, messages: [], results }));\n\t\tinstantiationService.stub(INotebookSearchService, notebookSearchServiceWithInfo([], undefined));\n\n\t\tconst testObject: SearchModel = instantiationService.createInstance(SearchModel);\n\t\tstore.add(testObject);\n\t\tawait testObject.search({ contentPattern: { pattern: 're' }, type: QueryType.Text, folderQueries }).asyncResults;\n\t\ttestObject.replaceString = 'hello';\n\t\tlet match = testObject.searchResult.matches()[0].matches()[0];\n\t\tassert.strictEqual('hello', match.replaceString);\n\n\t\tawait testObject.search({ contentPattern: { pattern: 're', isRegExp: true }, type: QueryType.Text, folderQueries }).asyncResults;\n\t\tmatch = testObject.searchResult.matches()[0].matches()[0];\n\t\tassert.strictEqual('hello', match.replaceString);\n\n\t\tawait testObject.search({ contentPattern: { pattern: 're(?:vi)', isRegExp: true }, type: QueryType.Text, folderQueries }).asyncResults;\n\t\tmatch = testObject.searchResult.matches()[0].matches()[0];\n\t\tassert.strictEqual('hello', match.replaceString);\n\n\t\tawait testObject.search({ contentPattern: { pattern: 'r(e)(?:vi)', isRegExp: true }, type: QueryType.Text, folderQueries }).asyncResults;\n\t\tmatch = testObject.searchResult.matches()[0].matches()[0];\n\t\tassert.strictEqual('hello', match.replaceString);\n\n\t\tawait testObject.search({ contentPattern: { pattern: 'r(e)(?:vi)', isRegExp: true }, type: QueryType.Text, folderQueries }).asyncResults;\n\t\ttestObject.replaceString = 'hello$1';\n\t\tmatch = testObject.searchResult.matches()[0].matches()[0];\n\t\tassert.strictEqual('helloe', match.replaceString);\n\t});\n\n\tfunction aRawMatch(resource: string, ...results: ITextSearchMatch[]): IFileMatch {\n\t\treturn { resource: createFileUriFromPathFromRoot(resource), results };\n\t}\n\n\tfunction aRawMatchWithCells(resource: string, ...cells: INotebookCellMatchWithModel[]) {\n\t\treturn { resource: createFileUriFromPathFromRoot(resource), cellResults: cells };\n\t}\n\n\tfunction stubModelService(instantiationService: TestInstantiationService): IModelService {\n\t\tinstantiationService.stub(IThemeService, new TestThemeService());\n\t\tconst config = new TestConfigurationService();\n\t\tconfig.setUserConfiguration('search', { searchOnType: true });\n\t\tinstantiationService.stub(IConfigurationService, config);\n\t\tconst modelService = instantiationService.createInstance(ModelService);\n\t\tstore.add(modelService);\n\t\treturn modelService;\n\t}\n\n\tfunction stubNotebookEditorService(instantiationService: TestInstantiationService): INotebookEditorService {\n\t\tinstantiationService.stub(IEditorGroupsService, new TestEditorGroupsService());\n\t\tinstantiationService.stub(IContextKeyService, new MockContextKeyService());\n\t\tinstantiationService.stub(IEditorService, store.add(new TestEditorService()));\n\t\tconst notebookEditorWidgetService = instantiationService.createInstance(NotebookEditorWidgetService);\n\t\tstore.add(notebookEditorWidgetService);\n\t\treturn notebookEditorWidgetService;\n\t}\n});\n"],
  "mappings": "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",
  "names": ["instantiationService"]
}
