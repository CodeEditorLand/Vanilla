import*as s from"../../../../nls.js";import*as t from"../../../../base/browser/dom.js";import{parseLinkedText as v}from"../../../../base/common/linkedText.js";import p from"../../../../base/common/severity.js";import{SeverityIcon as h}from"../../../../platform/severityIcon/browser/severityIcon.js";import{TextSearchCompleteMessageType as x}from"../../../services/search/common/searchExtTypes.js";import{Schemas as m}from"../../../../base/common/network.js";import{Link as T}from"../../../../platform/opener/browser/link.js";import{URI as k}from"../../../../base/common/uri.js";const A=(e,c,a,d,l,f,u)=>{const r=t.$("div.providerMessage"),S=v(e.text);t.append(r,t.$("."+h.className(e.type===x.Information?p.Info:p.Warning).split(" ").join(".")));for(const n of S.nodes)if(typeof n=="string")t.append(r,document.createTextNode(n));else{const I=c.createInstance(T,r,n,{opener:async i=>{if(!e.trusted)return;const o=k.parse(i,!0);o.scheme===m.command&&e.trusted?(await l.executeCommand(o.path))?.triggerSearch&&u():o.scheme===m.https?d.open(o):o.scheme===m.command&&!e.trusted?a.error(s.localize("unable to open trust","Unable to open command link from untrusted source: {0}",i)):a.error(s.localize("unable to open","Unable to open unknown link: {0}",i))}});f.add(I)}return r};export{A as renderSearchMessage};
