{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/search/browser/searchActionsTextQuickAccess.ts"],
  "sourcesContent": ["import type { IEditor } from \"../../../../editor/common/editorCommon.js\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as nls from \"../../../../nls.js\";\nimport {\n\tAction2,\n\tregisterAction2,\n} from \"../../../../platform/actions/common/actions.js\";\nimport { IConfigurationService } from \"../../../../platform/configuration/common/configuration.js\";\nimport type { ServicesAccessor } from \"../../../../platform/instantiation/common/instantiation.js\";\nimport { IQuickInputService } from \"../../../../platform/quickinput/common/quickInput.js\";\nimport { IEditorService } from \"../../../services/editor/common/editorService.js\";\nimport * as Constants from \"../common/constants.js\";\nimport { TEXT_SEARCH_QUICK_ACCESS_PREFIX } from \"./quickTextSearch/textSearchQuickAccess.js\";\nimport { category } from \"./searchActionsBase.js\";\nimport type { RenderableMatch } from \"./searchModel.js\";\nimport { getSelectionTextFromEditor } from \"./searchView.js\";\n\nregisterAction2(\n\tclass TextSearchQuickAccessAction extends Action2 {\n\t\tconstructor() {\n\t\t\tsuper({\n\t\t\t\tid: Constants.SearchCommandIds.QuickTextSearchActionId,\n\t\t\t\ttitle: nls.localize2(\"quickTextSearch\", \"Quick Search\"),\n\t\t\t\tcategory,\n\t\t\t\tf1: true,\n\t\t\t});\n\t\t}\n\n\t\toverride async run(\n\t\t\taccessor: ServicesAccessor,\n\t\t\tmatch: RenderableMatch | undefined,\n\t\t): Promise<any> {\n\t\t\tconst quickInputService = accessor.get(IQuickInputService);\n\t\t\tconst searchText = getSearchText(accessor) ?? \"\";\n\t\t\tquickInputService.quickAccess.show(\n\t\t\t\tTEXT_SEARCH_QUICK_ACCESS_PREFIX + searchText,\n\t\t\t\t{ preserveValue: !!searchText },\n\t\t\t);\n\t\t}\n\t},\n);\n\nfunction getSearchText(accessor: ServicesAccessor): string | null {\n\tconst editorService = accessor.get(IEditorService);\n\tconst configurationService = accessor.get(IConfigurationService);\n\n\tconst activeEditor: IEditor =\n\t\teditorService.activeTextEditorControl as IEditor;\n\tif (!activeEditor) {\n\t\treturn null;\n\t}\n\tif (!activeEditor.hasTextFocus()) {\n\t\treturn null;\n\t}\n\n\t// only happen if it would also happen for the search view\n\tconst seedSearchStringFromSelection =\n\t\tconfigurationService.getValue<boolean>(\n\t\t\t\"editor.find.seedSearchStringFromSelection\",\n\t\t);\n\tif (!seedSearchStringFromSelection) {\n\t\treturn null;\n\t}\n\n\treturn getSelectionTextFromEditor(false, activeEditor);\n}\n"],
  "mappings": ";;AAKA,YAAY,SAAS;AACrB;AAAA,EACC;AAAA,EACA;AAAA,OACM;AACP,SAAS,6BAA6B;AAEtC,SAAS,0BAA0B;AACnC,SAAS,sBAAsB;AAC/B,YAAY,eAAe;AAC3B,SAAS,uCAAuC;AAChD,SAAS,gBAAgB;AAEzB,SAAS,kCAAkC;AAE3C;AAAA,EACC,MAAM,oCAAoC,QAAQ;AAAA,IArBnD,OAqBmD;AAAA;AAAA;AAAA,IACjD,cAAc;AACb,YAAM;AAAA,QACL,IAAI,UAAU,iBAAiB;AAAA,QAC/B,OAAO,IAAI,UAAU,mBAAmB,cAAc;AAAA,QACtD;AAAA,QACA,IAAI;AAAA,MACL,CAAC;AAAA,IACF;AAAA,IAEA,MAAe,IACd,UACA,OACe;AACf,YAAM,oBAAoB,SAAS,IAAI,kBAAkB;AACzD,YAAM,aAAa,cAAc,QAAQ,KAAK;AAC9C,wBAAkB,YAAY;AAAA,QAC7B,kCAAkC;AAAA,QAClC,EAAE,eAAe,CAAC,CAAC,WAAW;AAAA,MAC/B;AAAA,IACD;AAAA,EACD;AACD;AAEA,SAAS,cAAc,UAA2C;AACjE,QAAM,gBAAgB,SAAS,IAAI,cAAc;AACjD,QAAM,uBAAuB,SAAS,IAAI,qBAAqB;AAE/D,QAAM,eACL,cAAc;AACf,MAAI,CAAC,cAAc;AAClB,WAAO;AAAA,EACR;AACA,MAAI,CAAC,aAAa,aAAa,GAAG;AACjC,WAAO;AAAA,EACR;AAGA,QAAM,gCACL,qBAAqB;AAAA,IACpB;AAAA,EACD;AACD,MAAI,CAAC,+BAA+B;AACnC,WAAO;AAAA,EACR;AAEA,SAAO,2BAA2B,OAAO,YAAY;AACtD;AAvBS;",
  "names": []
}
