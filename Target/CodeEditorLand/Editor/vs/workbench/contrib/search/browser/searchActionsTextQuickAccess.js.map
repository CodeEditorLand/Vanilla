{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/search/browser/searchActionsTextQuickAccess.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as nls from '../../../../nls.js';\nimport { ServicesAccessor } from '../../../../platform/instantiation/common/instantiation.js';\nimport * as Constants from '../common/constants.js';\nimport { RenderableMatch } from './searchModel.js';\nimport { Action2, registerAction2 } from '../../../../platform/actions/common/actions.js';\nimport { category } from './searchActionsBase.js';\nimport { IQuickInputService } from '../../../../platform/quickinput/common/quickInput.js';\nimport { TEXT_SEARCH_QUICK_ACCESS_PREFIX } from './quickTextSearch/textSearchQuickAccess.js';\nimport { IEditorService } from '../../../services/editor/common/editorService.js';\nimport { IEditor } from '../../../../editor/common/editorCommon.js';\nimport { IConfigurationService } from '../../../../platform/configuration/common/configuration.js';\nimport { getSelectionTextFromEditor } from './searchView.js';\n\nregisterAction2(class TextSearchQuickAccessAction extends Action2 {\n\n\tconstructor(\n\t) {\n\t\tsuper({\n\t\t\tid: Constants.SearchCommandIds.QuickTextSearchActionId,\n\t\t\ttitle: nls.localize2('quickTextSearch', \"Quick Search\"),\n\t\t\tcategory,\n\t\t\tf1: true\n\t\t});\n\n\t}\n\n\toverride async run(accessor: ServicesAccessor, match: RenderableMatch | undefined): Promise<any> {\n\t\tconst quickInputService = accessor.get(IQuickInputService);\n\t\tconst searchText = getSearchText(accessor) ?? '';\n\t\tquickInputService.quickAccess.show(TEXT_SEARCH_QUICK_ACCESS_PREFIX + searchText, { preserveValue: !!searchText });\n\t}\n});\n\nfunction getSearchText(accessor: ServicesAccessor): string | null {\n\tconst editorService = accessor.get(IEditorService);\n\tconst configurationService = accessor.get(IConfigurationService);\n\n\tconst activeEditor: IEditor = editorService.activeTextEditorControl as IEditor;\n\tif (!activeEditor) {\n\t\treturn null;\n\t}\n\tif (!activeEditor.hasTextFocus()) {\n\t\treturn null;\n\t}\n\n\t// only happen if it would also happen for the search view\n\tconst seedSearchStringFromSelection = configurationService.getValue<boolean>('editor.find.seedSearchStringFromSelection');\n\tif (!seedSearchStringFromSelection) {\n\t\treturn null;\n\t}\n\n\treturn getSelectionTextFromEditor(false, activeEditor);\n}\n"],
  "mappings": ";;AAIA,YAAY,SAAS;AACrB,SAAS,wBAAwB;AACjC,YAAY,eAAe;AAC3B,SAAS,uBAAuB;AAChC,SAAS,SAAS,uBAAuB;AACzC,SAAS,gBAAgB;AACzB,SAAS,0BAA0B;AACnC,SAAS,uCAAuC;AAChD,SAAS,sBAAsB;AAC/B,SAAS,eAAe;AACxB,SAAS,6BAA6B;AACtC,SAAS,kCAAkC;AAE3C,gBAAgB,MAAM,oCAAoC,QAAQ;AAAA,EAjBlE,OAiBkE;AAAA;AAAA;AAAA,EAEjE,cACE;AACD,UAAM;AAAA,MACL,IAAI,UAAU,iBAAiB;AAAA,MAC/B,OAAO,IAAI,UAAU,mBAAmB,cAAc;AAAA,MACtD;AAAA,MACA,IAAI;AAAA,IACL,CAAC;AAAA,EAEF;AAAA,EAEA,MAAe,IAAI,UAA4B,OAAkD;AAChG,UAAM,oBAAoB,SAAS,IAAI,kBAAkB;AACzD,UAAM,aAAa,cAAc,QAAQ,KAAK;AAC9C,sBAAkB,YAAY,KAAK,kCAAkC,YAAY,EAAE,eAAe,CAAC,CAAC,WAAW,CAAC;AAAA,EACjH;AACD,CAAC;AAED,SAAS,cAAc,UAA2C;AACjE,QAAM,gBAAgB,SAAS,IAAI,cAAc;AACjD,QAAM,uBAAuB,SAAS,IAAI,qBAAqB;AAE/D,QAAM,eAAwB,cAAc;AAC5C,MAAI,CAAC,cAAc;AAClB,WAAO;AAAA,EACR;AACA,MAAI,CAAC,aAAa,aAAa,GAAG;AACjC,WAAO;AAAA,EACR;AAGA,QAAM,gCAAgC,qBAAqB,SAAkB,2CAA2C;AACxH,MAAI,CAAC,+BAA+B;AACnC,WAAO;AAAA,EACR;AAEA,SAAO,2BAA2B,OAAO,YAAY;AACtD;AAnBS;",
  "names": []
}
