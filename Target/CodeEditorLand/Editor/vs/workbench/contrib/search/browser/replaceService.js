var g=Object.defineProperty;var y=Object.getOwnPropertyDescriptor;var v=(c,e,o,i)=>{for(var r=i>1?void 0:i?y(e,o):e,t=c.length-1,s;t>=0;t--)(s=c[t])&&(r=(i?s(e,o,r):s(r))||r);return i&&r&&g(e,o,r),r},a=(c,e)=>(o,i)=>e(o,i,c);import{Promises as b}from"../../../../../vs/base/common/async.js";import{Disposable as x}from"../../../../../vs/base/common/lifecycle.js";import*as m from"../../../../../vs/base/common/network.js";import{dirname as P}from"../../../../../vs/base/common/resources.js";import"../../../../../vs/base/common/uri.js";import{IBulkEditService as T,ResourceTextEdit as k}from"../../../../../vs/editor/browser/services/bulkEditService.js";import{EditOperation as F}from"../../../../../vs/editor/common/core/editOperation.js";import{Range as I}from"../../../../../vs/editor/common/core/range.js";import{ScrollType as w}from"../../../../../vs/editor/common/editorCommon.js";import{ILanguageService as C}from"../../../../../vs/editor/common/languages/language.js";import"../../../../../vs/editor/common/model.js";import{createTextBufferFactoryFromSnapshot as U}from"../../../../../vs/editor/common/model/textModel.js";import{IModelService as L}from"../../../../../vs/editor/common/services/model.js";import{ITextModelService as f}from"../../../../../vs/editor/common/services/resolverService.js";import*as M from"../../../../../vs/nls.js";import{IInstantiationService as O}from"../../../../../vs/platform/instantiation/common/instantiation.js";import{ILabelService as _}from"../../../../../vs/platform/label/common/label.js";import"../../../../../vs/platform/progress/common/progress.js";import"../../../../../vs/workbench/common/contributions.js";import{SaveSourceRegistry as N}from"../../../../../vs/workbench/common/editor.js";import{CellUri as W}from"../../../../../vs/workbench/contrib/notebook/common/notebookCommon.js";import{INotebookEditorModelResolverService as V}from"../../../../../vs/workbench/contrib/notebook/common/notebookEditorModelResolverService.js";import{IReplaceService as A}from"../../../../../vs/workbench/contrib/search/browser/replace.js";import{FileMatch as D,ISearchViewModelWorkbenchService as B,Match as S,MatchInNotebook as j}from"../../../../../vs/workbench/contrib/search/browser/searchModel.js";import{IEditorService as q}from"../../../../../vs/workbench/services/editor/common/editorService.js";import{ITextFileService as z}from"../../../../../vs/workbench/services/textfile/common/textfiles.js";const E="replacePreview",R=c=>c.with({scheme:m.Schemas.internal,fragment:E,query:JSON.stringify({scheme:c.scheme})}),J=c=>c.with({scheme:JSON.parse(c.query).scheme,fragment:"",query:""});let u=class{constructor(e,o){this.instantiationService=e;this.textModelResolverService=o;this.textModelResolverService.registerTextModelContentProvider(m.Schemas.internal,this)}static ID="workbench.contrib.replacePreviewContentProvider";provideTextContent(e){return e.fragment===E?this.instantiationService.createInstance(h).resolve(e):null}};u=v([a(0,O),a(1,f)],u);let h=class extends x{constructor(o,i,r,t,s){super();this.modelService=o;this.languageService=i;this.textModelResolverService=r;this.replaceService=t;this.searchWorkbenchService=s}async resolve(o){const i=J(o),r=this.searchWorkbenchService.searchModel.searchResult.matches().filter(p=>p.resource.toString()===i.toString())[0],s=this._register(await this.textModelResolverService.createModelReference(i)).object.textEditorModel,n=s.getLanguageId(),l=this.modelService.createModel(U(s.createSnapshot()),this.languageService.createById(n),o);return this._register(r.onChange(({forceUpdateModel:p})=>this.update(s,l,r,p))),this._register(this.searchWorkbenchService.searchModel.onReplaceTermChanged(()=>this.update(s,l,r))),this._register(r.onDispose(()=>l.dispose())),this._register(l.onWillDispose(()=>this.dispose())),this._register(s.onWillDispose(()=>this.dispose())),l}update(o,i,r,t=!1){!o.isDisposed()&&!i.isDisposed()&&this.replaceService.updateReplacePreview(r,t)}};h=v([a(0,L),a(1,C),a(2,f),a(3,A),a(4,B)],h);let d=class{constructor(e,o,i,r,t,s){this.textFileService=e;this.editorService=o;this.textModelResolverService=i;this.bulkEditorService=r;this.labelService=t;this.notebookEditorModelResolverService=s}static REPLACE_SAVE_SOURCE=N.registerSource("searchReplace.source",M.localize("searchReplace.source","Search and Replace"));async replace(e,o=void 0,i=null){const r=this.createEdits(e,i);await this.bulkEditorService.apply(r,{progress:o});const t=r.map(async s=>{if(s.resource.scheme===m.Schemas.vscodeNotebookCell){const n=W.parse(s.resource)?.notebook;if(n){let l;try{l=await this.notebookEditorModelResolverService.resolve(n),await l.object.save({source:d.REPLACE_SAVE_SOURCE})}finally{l?.dispose()}}return}else return this.textFileService.files.get(s.resource)?.save({source:d.REPLACE_SAVE_SOURCE})});return b.settled(t)}async openReplacePreview(e,o,i,r){const t=e instanceof S?e.parent():e,s=await this.editorService.openEditor({original:{resource:t.resource},modified:{resource:R(t.resource)},label:M.localize("fileReplaceChanges","{0} \u2194 {1} (Replace Preview)",t.name(),t.name()),description:this.labelService.getUriLabel(P(t.resource),{relative:!0}),options:{preserveFocus:o,pinned:r,revealIfVisible:!0}}),n=s?.input,l=t.onDispose(()=>{n?.dispose(),l.dispose()});if(await this.updateReplacePreview(t),s){const p=s.getControl();e instanceof S&&p&&p.revealLineInCenter(e.range().startLineNumber,w.Immediate)}}async updateReplacePreview(e,o=!1){const i=R(e.resource),[r,t]=await Promise.all([this.textModelResolverService.createModelReference(e.resource),this.textModelResolverService.createModelReference(i)]),s=r.object.textEditorModel,n=t.object.textEditorModel;try{s&&n&&(o?n.setValue(s.getValue()):n.undo(),this.applyEditsToPreview(e,n))}finally{r.dispose(),t.dispose()}}applyEditsToPreview(e,o){const i=this.createEdits(e,o.uri),r=[];for(const t of i)r.push(F.replaceMove(I.lift(t.textEdit.range),t.textEdit.text));o.pushEditOperations([],r.sort((t,s)=>I.compareRangesUsingStarts(t.range,s.range)),()=>[])}createEdits(e,o=null){const i=[];if(e instanceof S)if(e instanceof j){if(!e.isReadonly()){const r=e;i.push(this.createEdit(r,r.replaceString,r.cell?.uri))}}else{const r=e;i.push(this.createEdit(r,r.replaceString,o))}return e instanceof D&&(e=[e]),e instanceof Array&&e.forEach(r=>{const t=r;t.count()>0&&i.push(...t.matches().flatMap(s=>this.createEdits(s,o)))}),i}createEdit(e,o,i=null){const r=e.parent();return new k(i??r.resource,{range:e.range(),text:o},void 0,void 0)}};d=v([a(0,z),a(1,q),a(2,f),a(3,T),a(4,_),a(5,V)],d);export{u as ReplacePreviewContentProvider,d as ReplaceService};
