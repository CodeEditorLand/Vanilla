{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/search/browser/searchActionsCopy.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as nls from '../../../../nls.js';\nimport { IClipboardService } from '../../../../platform/clipboard/common/clipboardService.js';\nimport { ServicesAccessor } from '../../../../platform/instantiation/common/instantiation.js';\nimport { ILabelService } from '../../../../platform/label/common/label.js';\nimport { IViewsService } from '../../../services/views/common/viewsService.js';\nimport * as Constants from '../common/constants.js';\nimport { FileMatch, FolderMatch, FolderMatchWithResource, Match, RenderableMatch, searchMatchComparer } from './searchModel.js';\nimport { Action2, MenuId, registerAction2 } from '../../../../platform/actions/common/actions.js';\nimport { KeybindingWeight } from '../../../../platform/keybinding/common/keybindingsRegistry.js';\nimport { KeyCode, KeyMod } from '../../../../base/common/keyCodes.js';\nimport { category, getSearchView } from './searchActionsBase.js';\nimport { isWindows } from '../../../../base/common/platform.js';\n\n//#region Actions\nregisterAction2(class CopyMatchCommandAction extends Action2 {\n\n\tconstructor(\n\t) {\n\t\tsuper({\n\t\t\tid: Constants.SearchCommandIds.CopyMatchCommandId,\n\t\t\ttitle: nls.localize2('copyMatchLabel', \"Copy\"),\n\t\t\tcategory,\n\t\t\tkeybinding: {\n\t\t\t\tweight: KeybindingWeight.WorkbenchContrib,\n\t\t\t\twhen: Constants.SearchContext.FileMatchOrMatchFocusKey,\n\t\t\t\tprimary: KeyMod.CtrlCmd | KeyCode.KeyC,\n\t\t\t},\n\t\t\tmenu: [{\n\t\t\t\tid: MenuId.SearchContext,\n\t\t\t\twhen: Constants.SearchContext.FileMatchOrMatchFocusKey,\n\t\t\t\tgroup: 'search_2',\n\t\t\t\torder: 1\n\t\t\t}]\n\t\t});\n\n\t}\n\n\toverride async run(accessor: ServicesAccessor, match: RenderableMatch | undefined): Promise<any> {\n\t\tawait copyMatchCommand(accessor, match);\n\t}\n});\n\nregisterAction2(class CopyPathCommandAction extends Action2 {\n\n\tconstructor(\n\t) {\n\t\tsuper({\n\t\t\tid: Constants.SearchCommandIds.CopyPathCommandId,\n\t\t\ttitle: nls.localize2('copyPathLabel', \"Copy Path\"),\n\t\t\tcategory,\n\t\t\tkeybinding: {\n\t\t\t\tweight: KeybindingWeight.WorkbenchContrib,\n\t\t\t\twhen: Constants.SearchContext.FileMatchOrFolderMatchWithResourceFocusKey,\n\t\t\t\tprimary: KeyMod.CtrlCmd | KeyMod.Alt | KeyCode.KeyC,\n\t\t\t\twin: {\n\t\t\t\t\tprimary: KeyMod.Shift | KeyMod.Alt | KeyCode.KeyC\n\t\t\t\t},\n\t\t\t},\n\t\t\tmenu: [{\n\t\t\t\tid: MenuId.SearchContext,\n\t\t\t\twhen: Constants.SearchContext.FileMatchOrFolderMatchWithResourceFocusKey,\n\t\t\t\tgroup: 'search_2',\n\t\t\t\torder: 2\n\t\t\t}]\n\t\t});\n\n\t}\n\n\toverride async run(accessor: ServicesAccessor, fileMatch: FileMatch | FolderMatchWithResource | undefined): Promise<any> {\n\t\tawait copyPathCommand(accessor, fileMatch);\n\t}\n});\n\nregisterAction2(class CopyAllCommandAction extends Action2 {\n\n\tconstructor(\n\t) {\n\t\tsuper({\n\t\t\tid: Constants.SearchCommandIds.CopyAllCommandId,\n\t\t\ttitle: nls.localize2('copyAllLabel', \"Copy All\"),\n\t\t\tcategory,\n\t\t\tmenu: [{\n\t\t\t\tid: MenuId.SearchContext,\n\t\t\t\twhen: Constants.SearchContext.HasSearchResults,\n\t\t\t\tgroup: 'search_2',\n\t\t\t\torder: 3\n\t\t\t}]\n\t\t});\n\n\t}\n\n\toverride async run(accessor: ServicesAccessor): Promise<any> {\n\t\tawait copyAllCommand(accessor);\n\t}\n});\n\n//#endregion\n\n//#region Helpers\nexport const lineDelimiter = isWindows ? '\\r\\n' : '\\n';\n\nasync function copyPathCommand(accessor: ServicesAccessor, fileMatch: FileMatch | FolderMatchWithResource | undefined) {\n\tif (!fileMatch) {\n\t\tconst selection = getSelectedRow(accessor);\n\t\tif (!(selection instanceof FileMatch || selection instanceof FolderMatchWithResource)) {\n\t\t\treturn;\n\t\t}\n\n\t\tfileMatch = selection;\n\t}\n\n\tconst clipboardService = accessor.get(IClipboardService);\n\tconst labelService = accessor.get(ILabelService);\n\n\tconst text = labelService.getUriLabel(fileMatch.resource, { noPrefix: true });\n\tawait clipboardService.writeText(text);\n}\n\nasync function copyMatchCommand(accessor: ServicesAccessor, match: RenderableMatch | undefined) {\n\tif (!match) {\n\t\tconst selection = getSelectedRow(accessor);\n\t\tif (!selection) {\n\t\t\treturn;\n\t\t}\n\n\t\tmatch = selection;\n\t}\n\n\tconst clipboardService = accessor.get(IClipboardService);\n\tconst labelService = accessor.get(ILabelService);\n\n\tlet text: string | undefined;\n\tif (match instanceof Match) {\n\t\ttext = matchToString(match);\n\t} else if (match instanceof FileMatch) {\n\t\ttext = fileMatchToString(match, labelService).text;\n\t} else if (match instanceof FolderMatch) {\n\t\ttext = folderMatchToString(match, labelService).text;\n\t}\n\n\tif (text) {\n\t\tawait clipboardService.writeText(text);\n\t}\n}\n\nasync function copyAllCommand(accessor: ServicesAccessor) {\n\tconst viewsService = accessor.get(IViewsService);\n\tconst clipboardService = accessor.get(IClipboardService);\n\tconst labelService = accessor.get(ILabelService);\n\n\tconst searchView = getSearchView(viewsService);\n\tif (searchView) {\n\t\tconst root = searchView.searchResult;\n\n\t\tconst text = allFolderMatchesToString(root.folderMatches(), labelService);\n\t\tawait clipboardService.writeText(text);\n\t}\n}\n\nfunction matchToString(match: Match, indent = 0): string {\n\tconst getFirstLinePrefix = () => `${match.range().startLineNumber},${match.range().startColumn}`;\n\tconst getOtherLinePrefix = (i: number) => match.range().startLineNumber + i + '';\n\n\tconst fullMatchLines = match.fullPreviewLines();\n\tconst largestPrefixSize = fullMatchLines.reduce((largest, _, i) => {\n\t\tconst thisSize = i === 0 ?\n\t\t\tgetFirstLinePrefix().length :\n\t\t\tgetOtherLinePrefix(i).length;\n\n\t\treturn Math.max(thisSize, largest);\n\t}, 0);\n\n\tconst formattedLines = fullMatchLines\n\t\t.map((line, i) => {\n\t\t\tconst prefix = i === 0 ?\n\t\t\t\tgetFirstLinePrefix() :\n\t\t\t\tgetOtherLinePrefix(i);\n\n\t\t\tconst paddingStr = ' '.repeat(largestPrefixSize - prefix.length);\n\t\t\tconst indentStr = ' '.repeat(indent);\n\t\t\treturn `${indentStr}${prefix}: ${paddingStr}${line}`;\n\t\t});\n\n\treturn formattedLines.join('\\n');\n}\n\nfunction fileFolderMatchToString(match: FileMatch | FolderMatch | FolderMatchWithResource, labelService: ILabelService): { text: string; count: number } {\n\tif (match instanceof FileMatch) {\n\t\treturn fileMatchToString(match, labelService);\n\t} else {\n\t\treturn folderMatchToString(match, labelService);\n\t}\n}\n\nfunction fileMatchToString(fileMatch: FileMatch, labelService: ILabelService): { text: string; count: number } {\n\tconst matchTextRows = fileMatch.matches()\n\t\t.sort(searchMatchComparer)\n\t\t.map(match => matchToString(match, 2));\n\tconst uriString = labelService.getUriLabel(fileMatch.resource, { noPrefix: true });\n\treturn {\n\t\ttext: `${uriString}${lineDelimiter}${matchTextRows.join(lineDelimiter)}`,\n\t\tcount: matchTextRows.length\n\t};\n}\n\nfunction folderMatchToString(folderMatch: FolderMatchWithResource | FolderMatch, labelService: ILabelService): { text: string; count: number } {\n\tconst results: string[] = [];\n\tlet numMatches = 0;\n\n\tconst matches = folderMatch.matches().sort(searchMatchComparer);\n\n\tmatches.forEach(match => {\n\t\tconst result = fileFolderMatchToString(match, labelService);\n\t\tnumMatches += result.count;\n\t\tresults.push(result.text);\n\t});\n\n\treturn {\n\t\ttext: results.join(lineDelimiter + lineDelimiter),\n\t\tcount: numMatches\n\t};\n}\n\nfunction allFolderMatchesToString(folderMatches: Array<FolderMatchWithResource | FolderMatch>, labelService: ILabelService): string {\n\tconst folderResults: string[] = [];\n\tfolderMatches = folderMatches.sort(searchMatchComparer);\n\tfor (let i = 0; i < folderMatches.length; i++) {\n\t\tconst folderResult = folderMatchToString(folderMatches[i], labelService);\n\t\tif (folderResult.count) {\n\t\t\tfolderResults.push(folderResult.text);\n\t\t}\n\t}\n\n\treturn folderResults.join(lineDelimiter + lineDelimiter);\n}\n\nfunction getSelectedRow(accessor: ServicesAccessor): RenderableMatch | undefined | null {\n\tconst viewsService = accessor.get(IViewsService);\n\tconst searchView = getSearchView(viewsService);\n\treturn searchView?.getControl().getSelection()[0];\n}\n\n//#endregion\n"],
  "mappings": "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",
  "names": []
}
