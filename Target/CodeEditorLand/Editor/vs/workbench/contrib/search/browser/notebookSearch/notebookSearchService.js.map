{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/search/browser/notebookSearch/notebookSearchService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { CancellationToken } from '../../../../../base/common/cancellation.js';\nimport * as glob from '../../../../../base/common/glob.js';\nimport { ResourceSet, ResourceMap } from '../../../../../base/common/map.js';\nimport { URI } from '../../../../../base/common/uri.js';\nimport { IConfigurationService } from '../../../../../platform/configuration/common/configuration.js';\nimport { ILogService } from '../../../../../platform/log/common/log.js';\nimport { IUriIdentityService } from '../../../../../platform/uriIdentity/common/uriIdentity.js';\nimport { NotebookEditorWidget } from '../../../notebook/browser/notebookEditorWidget.js';\nimport { INotebookService } from '../../../notebook/common/notebookService.js';\nimport { INotebookSearchService } from '../../common/notebookSearch.js';\nimport { INotebookCellMatchWithModel, INotebookFileMatchWithModel, contentMatchesToTextSearchMatches, webviewMatchesToTextSearchMatches } from './searchNotebookHelpers.js';\nimport { ITextQuery, QueryType, ISearchProgressItem, ISearchComplete, ISearchConfigurationProperties, pathIncludedInQuery, ISearchService, IFolderQuery, DEFAULT_MAX_SEARCH_RESULTS } from '../../../../services/search/common/search.js';\nimport * as arrays from '../../../../../base/common/arrays.js';\nimport { isNumber } from '../../../../../base/common/types.js';\nimport { IEditorResolverService } from '../../../../services/editor/common/editorResolverService.js';\nimport { INotebookFileMatchNoModel } from '../../common/searchNotebookHelpers.js';\nimport { INotebookEditorService } from '../../../notebook/browser/services/notebookEditorService.js';\nimport { NotebookPriorityInfo } from '../../common/search.js';\nimport { INotebookExclusiveDocumentFilter } from '../../../notebook/common/notebookCommon.js';\nimport { QueryBuilder } from '../../../../services/search/common/queryBuilder.js';\nimport { IInstantiationService } from '../../../../../platform/instantiation/common/instantiation.js';\n\ninterface IOpenNotebookSearchResults {\n\tresults: ResourceMap<INotebookFileMatchWithModel | null>;\n\tlimitHit: boolean;\n}\ninterface IClosedNotebookSearchResults {\n\tresults: ResourceMap<INotebookFileMatchNoModel<URI> | null>;\n\tlimitHit: boolean;\n}\nexport class NotebookSearchService implements INotebookSearchService {\n\tdeclare readonly _serviceBrand: undefined;\n\tprivate queryBuilder: QueryBuilder;\n\tconstructor(\n\t\t@IUriIdentityService private readonly uriIdentityService: IUriIdentityService,\n\t\t@INotebookEditorService private readonly notebookEditorService: INotebookEditorService,\n\t\t@ILogService private readonly logService: ILogService,\n\t\t@INotebookService private readonly notebookService: INotebookService,\n\t\t@IConfigurationService private readonly configurationService: IConfigurationService,\n\t\t@IEditorResolverService private readonly editorResolverService: IEditorResolverService,\n\t\t@ISearchService private readonly searchService: ISearchService,\n\t\t@IInstantiationService instantiationService: IInstantiationService\n\t) {\n\t\tthis.queryBuilder = instantiationService.createInstance(QueryBuilder);\n\t}\n\n\tnotebookSearch(query: ITextQuery, token: CancellationToken | undefined, searchInstanceID: string, onProgress?: (result: ISearchProgressItem) => void): {\n\t\topenFilesToScan: ResourceSet;\n\t\tcompleteData: Promise<ISearchComplete>;\n\t\tallScannedFiles: Promise<ResourceSet>;\n\t} {\n\n\t\tif (query.type !== QueryType.Text) {\n\t\t\treturn {\n\t\t\t\topenFilesToScan: new ResourceSet(),\n\t\t\t\tcompleteData: Promise.resolve({\n\t\t\t\t\tmessages: [],\n\t\t\t\t\tlimitHit: false,\n\t\t\t\t\tresults: [],\n\t\t\t\t}),\n\t\t\t\tallScannedFiles: Promise.resolve(new ResourceSet()),\n\t\t\t};\n\t\t}\n\n\t\tconst localNotebookWidgets = this.getLocalNotebookWidgets();\n\t\tconst localNotebookFiles = localNotebookWidgets.map(widget => widget.viewModel!.uri);\n\t\tconst getAllResults = (): { completeData: Promise<ISearchComplete>; allScannedFiles: Promise<ResourceSet> } => {\n\t\t\tconst searchStart = Date.now();\n\n\t\t\tconst localResultPromise = this.getLocalNotebookResults(query, token ?? CancellationToken.None, localNotebookWidgets, searchInstanceID);\n\t\t\tconst searchLocalEnd = Date.now();\n\n\t\t\tconst experimentalNotebooksEnabled = this.configurationService.getValue<ISearchConfigurationProperties>('search').experimental?.closedNotebookRichContentResults ?? false;\n\n\t\t\tlet closedResultsPromise: Promise<IClosedNotebookSearchResults | undefined> = Promise.resolve(undefined);\n\t\t\tif (experimentalNotebooksEnabled) {\n\t\t\t\tclosedResultsPromise = this.getClosedNotebookResults(query, new ResourceSet(localNotebookFiles, uri => this.uriIdentityService.extUri.getComparisonKey(uri)), token ?? CancellationToken.None);\n\t\t\t}\n\n\t\t\tconst promise = Promise.all([localResultPromise, closedResultsPromise]);\n\t\t\treturn {\n\t\t\t\tcompleteData: promise.then((resolvedPromise): ISearchComplete => {\n\t\t\t\t\tconst openNotebookResult = resolvedPromise[0];\n\t\t\t\t\tconst closedNotebookResult = resolvedPromise[1];\n\n\t\t\t\t\tconst resolved = resolvedPromise.filter((e): e is IOpenNotebookSearchResults | IClosedNotebookSearchResults => !!e);\n\t\t\t\t\tconst resultArray = [...openNotebookResult.results.values(), ...closedNotebookResult?.results.values() ?? []];\n\t\t\t\t\tconst results = arrays.coalesce(resultArray);\n\t\t\t\t\tif (onProgress) {\n\t\t\t\t\t\tresults.forEach(onProgress);\n\t\t\t\t\t}\n\t\t\t\t\tthis.logService.trace(`local notebook search time | ${searchLocalEnd - searchStart}ms`);\n\t\t\t\t\treturn {\n\t\t\t\t\t\tmessages: [],\n\t\t\t\t\t\tlimitHit: resolved.reduce((prev, cur) => prev || cur.limitHit, false),\n\t\t\t\t\t\tresults,\n\t\t\t\t\t};\n\t\t\t\t}),\n\t\t\t\tallScannedFiles: promise.then(resolvedPromise => {\n\t\t\t\t\tconst openNotebookResults = resolvedPromise[0];\n\t\t\t\t\tconst closedNotebookResults = resolvedPromise[1];\n\t\t\t\t\tconst results = arrays.coalesce([...openNotebookResults.results.keys(), ...closedNotebookResults?.results.keys() ?? []]);\n\t\t\t\t\treturn new ResourceSet(results, uri => this.uriIdentityService.extUri.getComparisonKey(uri));\n\t\t\t\t})\n\t\t\t};\n\t\t};\n\t\tconst promiseResults = getAllResults();\n\t\treturn {\n\t\t\topenFilesToScan: new ResourceSet(localNotebookFiles),\n\t\t\tcompleteData: promiseResults.completeData,\n\t\t\tallScannedFiles: promiseResults.allScannedFiles\n\t\t};\n\t}\n\n\tprivate async doesFileExist(includes: string[], folderQueries: IFolderQuery<URI>[], token: CancellationToken): Promise<boolean> {\n\t\tconst promises: Promise<boolean>[] = includes.map(async includePattern => {\n\t\t\tconst query = this.queryBuilder.file(folderQueries.map(e => e.folder), {\n\t\t\t\tincludePattern: includePattern.startsWith('/') ? includePattern : '**/' + includePattern, // todo: find cleaner way to ensure that globs match all appropriate filetypes\n\t\t\t\texists: true,\n\t\t\t\tonlyFileScheme: true,\n\t\t\t});\n\t\t\treturn this.searchService.fileSearch(\n\t\t\t\tquery,\n\t\t\t\ttoken\n\t\t\t).then((ret) => {\n\t\t\t\treturn !!ret.limitHit;\n\t\t\t});\n\t\t});\n\n\t\treturn Promise.any(promises);\n\t}\n\n\tprivate async getClosedNotebookResults(textQuery: ITextQuery, scannedFiles: ResourceSet, token: CancellationToken): Promise<IClosedNotebookSearchResults> {\n\n\t\tconst userAssociations = this.editorResolverService.getAllUserAssociations();\n\t\tconst allPriorityInfo: Map<string, NotebookPriorityInfo[]> = new Map();\n\t\tconst contributedNotebookTypes = this.notebookService.getContributedNotebookTypes();\n\n\n\t\tuserAssociations.forEach(association => {\n\n\t\t\t// we gather the editor associations here, but cannot check them until we actually have the files that the glob matches\n\t\t\t// this is because longer patterns take precedence over shorter ones, and even if there is a user association that\n\t\t\t// specifies the exact same glob as a contributed notebook type, there might be another user association that is longer/more specific\n\t\t\t// that still matches the path and should therefore take more precedence.\n\t\t\tif (!association.filenamePattern) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst info: NotebookPriorityInfo = {\n\t\t\t\tisFromSettings: true,\n\t\t\t\tfilenamePatterns: [association.filenamePattern]\n\t\t\t};\n\n\t\t\tconst existingEntry = allPriorityInfo.get(association.viewType);\n\t\t\tif (existingEntry) {\n\t\t\t\tallPriorityInfo.set(association.viewType, existingEntry.concat(info));\n\t\t\t} else {\n\t\t\t\tallPriorityInfo.set(association.viewType, [info]);\n\t\t\t}\n\t\t});\n\n\t\tconst promises: Promise<{\n\t\t\tresults: INotebookFileMatchNoModel<URI>[];\n\t\t\tlimitHit: boolean;\n\t\t} | undefined>[] = [];\n\n\t\tcontributedNotebookTypes.forEach((notebook) => {\n\t\t\tif (notebook.selectors.length > 0) {\n\t\t\t\tpromises.push((async () => {\n\t\t\t\t\tconst includes = notebook.selectors.map((selector) => {\n\t\t\t\t\t\tconst globPattern = (selector as INotebookExclusiveDocumentFilter).include || selector as glob.IRelativePattern | string;\n\t\t\t\t\t\treturn globPattern.toString();\n\t\t\t\t\t});\n\n\t\t\t\t\tconst isInWorkspace = await this.doesFileExist(includes, textQuery.folderQueries, token);\n\t\t\t\t\tif (isInWorkspace) {\n\t\t\t\t\t\tconst canResolve = await this.notebookService.canResolve(notebook.id);\n\t\t\t\t\t\tif (!canResolve) {\n\t\t\t\t\t\t\treturn undefined;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tconst serializer = (await this.notebookService.withNotebookDataProvider(notebook.id)).serializer;\n\t\t\t\t\t\treturn await serializer.searchInNotebooks(textQuery, token, allPriorityInfo);\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn undefined;\n\t\t\t\t\t}\n\t\t\t\t})());\n\t\t\t}\n\t\t});\n\n\t\tconst start = Date.now();\n\t\tconst searchComplete = arrays.coalesce(await Promise.all(promises));\n\t\tconst results = searchComplete.flatMap(e => e.results);\n\t\tlet limitHit = searchComplete.some(e => e.limitHit);\n\n\t\t// results are already sorted with high priority first, filter out duplicates.\n\t\tconst uniqueResults = new ResourceMap<INotebookFileMatchNoModel | null>(uri => this.uriIdentityService.extUri.getComparisonKey(uri));\n\n\t\tlet numResults = 0;\n\t\tfor (const result of results) {\n\t\t\tif (textQuery.maxResults && numResults >= textQuery.maxResults) {\n\t\t\t\tlimitHit = true;\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tif (!scannedFiles.has(result.resource) && !uniqueResults.has(result.resource)) {\n\t\t\t\tuniqueResults.set(result.resource, result.cellResults.length > 0 ? result : null);\n\t\t\t\tnumResults++;\n\t\t\t}\n\t\t}\n\n\t\tconst end = Date.now();\n\t\tthis.logService.trace(`query: ${textQuery.contentPattern.pattern}`);\n\t\tthis.logService.trace(`closed notebook search time | ${end - start}ms`);\n\n\t\treturn {\n\t\t\tresults: uniqueResults,\n\t\t\tlimitHit\n\t\t};\n\t}\n\n\tprivate async getLocalNotebookResults(query: ITextQuery, token: CancellationToken, widgets: Array<NotebookEditorWidget>, searchID: string): Promise<IOpenNotebookSearchResults> {\n\t\tconst localResults = new ResourceMap<INotebookFileMatchWithModel | null>(uri => this.uriIdentityService.extUri.getComparisonKey(uri));\n\t\tlet limitHit = false;\n\n\t\tfor (const widget of widgets) {\n\t\t\tif (!widget.hasModel()) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tconst askMax = (isNumber(query.maxResults) ? query.maxResults : DEFAULT_MAX_SEARCH_RESULTS) + 1;\n\t\t\tconst uri = widget.viewModel!.uri;\n\n\t\t\tif (!pathIncludedInQuery(query, uri.fsPath)) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tlet matches = await widget\n\t\t\t\t.find(query.contentPattern.pattern, {\n\t\t\t\t\tregex: query.contentPattern.isRegExp,\n\t\t\t\t\twholeWord: query.contentPattern.isWordMatch,\n\t\t\t\t\tcaseSensitive: query.contentPattern.isCaseSensitive,\n\t\t\t\t\tincludeMarkupInput: query.contentPattern.notebookInfo?.isInNotebookMarkdownInput ?? true,\n\t\t\t\t\tincludeMarkupPreview: query.contentPattern.notebookInfo?.isInNotebookMarkdownPreview ?? true,\n\t\t\t\t\tincludeCodeInput: query.contentPattern.notebookInfo?.isInNotebookCellInput ?? true,\n\t\t\t\t\tincludeOutput: query.contentPattern.notebookInfo?.isInNotebookCellOutput ?? true,\n\t\t\t\t}, token, false, true, searchID);\n\n\n\t\t\tif (matches.length) {\n\t\t\t\tif (askMax && matches.length >= askMax) {\n\t\t\t\t\tlimitHit = true;\n\t\t\t\t\tmatches = matches.slice(0, askMax - 1);\n\t\t\t\t}\n\t\t\t\tconst cellResults: INotebookCellMatchWithModel[] = matches.map(match => {\n\t\t\t\t\tconst contentResults = contentMatchesToTextSearchMatches(match.contentMatches, match.cell);\n\t\t\t\t\tconst webviewResults = webviewMatchesToTextSearchMatches(match.webviewMatches);\n\t\t\t\t\treturn {\n\t\t\t\t\t\tcell: match.cell,\n\t\t\t\t\t\tindex: match.index,\n\t\t\t\t\t\tcontentResults: contentResults,\n\t\t\t\t\t\twebviewResults: webviewResults,\n\t\t\t\t\t};\n\t\t\t\t});\n\n\t\t\t\tconst fileMatch: INotebookFileMatchWithModel = {\n\t\t\t\t\tresource: uri, cellResults: cellResults\n\t\t\t\t};\n\t\t\t\tlocalResults.set(uri, fileMatch);\n\t\t\t} else {\n\t\t\t\tlocalResults.set(uri, null);\n\t\t\t}\n\t\t}\n\n\t\treturn {\n\t\t\tresults: localResults,\n\t\t\tlimitHit\n\t\t};\n\t}\n\n\n\tprivate getLocalNotebookWidgets(): Array<NotebookEditorWidget> {\n\t\tconst notebookWidgets = this.notebookEditorService.retrieveAllExistingWidgets();\n\t\treturn notebookWidgets\n\t\t\t.map(widget => widget.value)\n\t\t\t.filter((val): val is NotebookEditorWidget => !!val && val.hasModel());\n\t}\n}\n\n\n"],
  "mappings": "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",
  "names": []
}
