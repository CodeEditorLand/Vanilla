{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/search/browser/notebookSearch/notebookSearchService.ts"],
  "sourcesContent": ["import * as arrays from \"../../../../../base/common/arrays.js\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { CancellationToken } from \"../../../../../base/common/cancellation.js\";\nimport type * as glob from \"../../../../../base/common/glob.js\";\nimport { ResourceMap, ResourceSet } from \"../../../../../base/common/map.js\";\nimport { isNumber } from \"../../../../../base/common/types.js\";\nimport type { URI } from \"../../../../../base/common/uri.js\";\nimport { IConfigurationService } from \"../../../../../platform/configuration/common/configuration.js\";\nimport { IInstantiationService } from \"../../../../../platform/instantiation/common/instantiation.js\";\nimport { ILogService } from \"../../../../../platform/log/common/log.js\";\nimport { IUriIdentityService } from \"../../../../../platform/uriIdentity/common/uriIdentity.js\";\nimport { IEditorResolverService } from \"../../../../services/editor/common/editorResolverService.js\";\nimport { QueryBuilder } from \"../../../../services/search/common/queryBuilder.js\";\nimport {\n\tDEFAULT_MAX_SEARCH_RESULTS,\n\ttype IFolderQuery,\n\ttype ISearchComplete,\n\ttype ISearchConfigurationProperties,\n\ttype ISearchProgressItem,\n\tISearchService,\n\ttype ITextQuery,\n\tQueryType,\n\tpathIncludedInQuery,\n} from \"../../../../services/search/common/search.js\";\nimport type { NotebookEditorWidget } from \"../../../notebook/browser/notebookEditorWidget.js\";\nimport { INotebookEditorService } from \"../../../notebook/browser/services/notebookEditorService.js\";\nimport type { INotebookExclusiveDocumentFilter } from \"../../../notebook/common/notebookCommon.js\";\nimport { INotebookService } from \"../../../notebook/common/notebookService.js\";\nimport type { INotebookSearchService } from \"../../common/notebookSearch.js\";\nimport type { NotebookPriorityInfo } from \"../../common/search.js\";\nimport type { INotebookFileMatchNoModel } from \"../../common/searchNotebookHelpers.js\";\nimport {\n\ttype INotebookCellMatchWithModel,\n\ttype INotebookFileMatchWithModel,\n\tcontentMatchesToTextSearchMatches,\n\twebviewMatchesToTextSearchMatches,\n} from \"./searchNotebookHelpers.js\";\n\ninterface IOpenNotebookSearchResults {\n\tresults: ResourceMap<INotebookFileMatchWithModel | null>;\n\tlimitHit: boolean;\n}\ninterface IClosedNotebookSearchResults {\n\tresults: ResourceMap<INotebookFileMatchNoModel<URI> | null>;\n\tlimitHit: boolean;\n}\nexport class NotebookSearchService implements INotebookSearchService {\n\tdeclare readonly _serviceBrand: undefined;\n\tprivate queryBuilder: QueryBuilder;\n\tconstructor(\n\t\t@IUriIdentityService\n\t\tprivate readonly uriIdentityService: IUriIdentityService,\n\t\t@INotebookEditorService\n\t\tprivate readonly notebookEditorService: INotebookEditorService,\n\t\t@ILogService private readonly logService: ILogService,\n\t\t@INotebookService private readonly notebookService: INotebookService,\n\t\t@IConfigurationService\n\t\tprivate readonly configurationService: IConfigurationService,\n\t\t@IEditorResolverService\n\t\tprivate readonly editorResolverService: IEditorResolverService,\n\t\t@ISearchService private readonly searchService: ISearchService,\n\t\t@IInstantiationService instantiationService: IInstantiationService,\n\t) {\n\t\tthis.queryBuilder = instantiationService.createInstance(QueryBuilder);\n\t}\n\n\tnotebookSearch(\n\t\tquery: ITextQuery,\n\t\ttoken: CancellationToken | undefined,\n\t\tsearchInstanceID: string,\n\t\tonProgress?: (result: ISearchProgressItem) => void,\n\t): {\n\t\topenFilesToScan: ResourceSet;\n\t\tcompleteData: Promise<ISearchComplete>;\n\t\tallScannedFiles: Promise<ResourceSet>;\n\t} {\n\t\tif (query.type !== QueryType.Text) {\n\t\t\treturn {\n\t\t\t\topenFilesToScan: new ResourceSet(),\n\t\t\t\tcompleteData: Promise.resolve({\n\t\t\t\t\tmessages: [],\n\t\t\t\t\tlimitHit: false,\n\t\t\t\t\tresults: [],\n\t\t\t\t}),\n\t\t\t\tallScannedFiles: Promise.resolve(new ResourceSet()),\n\t\t\t};\n\t\t}\n\n\t\tconst localNotebookWidgets = this.getLocalNotebookWidgets();\n\t\tconst localNotebookFiles = localNotebookWidgets.map(\n\t\t\t(widget) => widget.viewModel!.uri,\n\t\t);\n\t\tconst getAllResults = (): {\n\t\t\tcompleteData: Promise<ISearchComplete>;\n\t\t\tallScannedFiles: Promise<ResourceSet>;\n\t\t} => {\n\t\t\tconst searchStart = Date.now();\n\n\t\t\tconst localResultPromise = this.getLocalNotebookResults(\n\t\t\t\tquery,\n\t\t\t\ttoken ?? CancellationToken.None,\n\t\t\t\tlocalNotebookWidgets,\n\t\t\t\tsearchInstanceID,\n\t\t\t);\n\t\t\tconst searchLocalEnd = Date.now();\n\n\t\t\tconst experimentalNotebooksEnabled =\n\t\t\t\tthis.configurationService.getValue<ISearchConfigurationProperties>(\n\t\t\t\t\t\"search\",\n\t\t\t\t).experimental?.closedNotebookRichContentResults ?? false;\n\n\t\t\tlet closedResultsPromise: Promise<\n\t\t\t\tIClosedNotebookSearchResults | undefined\n\t\t\t> = Promise.resolve(undefined);\n\t\t\tif (experimentalNotebooksEnabled) {\n\t\t\t\tclosedResultsPromise = this.getClosedNotebookResults(\n\t\t\t\t\tquery,\n\t\t\t\t\tnew ResourceSet(localNotebookFiles, (uri) =>\n\t\t\t\t\t\tthis.uriIdentityService.extUri.getComparisonKey(uri),\n\t\t\t\t\t),\n\t\t\t\t\ttoken ?? CancellationToken.None,\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tconst promise = Promise.all([\n\t\t\t\tlocalResultPromise,\n\t\t\t\tclosedResultsPromise,\n\t\t\t]);\n\t\t\treturn {\n\t\t\t\tcompleteData: promise.then(\n\t\t\t\t\t(resolvedPromise): ISearchComplete => {\n\t\t\t\t\t\tconst openNotebookResult = resolvedPromise[0];\n\t\t\t\t\t\tconst closedNotebookResult = resolvedPromise[1];\n\n\t\t\t\t\t\tconst resolved = resolvedPromise.filter(\n\t\t\t\t\t\t\t(\n\t\t\t\t\t\t\t\te,\n\t\t\t\t\t\t\t): e is\n\t\t\t\t\t\t\t\t| IOpenNotebookSearchResults\n\t\t\t\t\t\t\t\t| IClosedNotebookSearchResults => !!e,\n\t\t\t\t\t\t);\n\t\t\t\t\t\tconst resultArray = [\n\t\t\t\t\t\t\t...openNotebookResult.results.values(),\n\t\t\t\t\t\t\t...(closedNotebookResult?.results.values() ?? []),\n\t\t\t\t\t\t];\n\t\t\t\t\t\tconst results = arrays.coalesce(resultArray);\n\t\t\t\t\t\tif (onProgress) {\n\t\t\t\t\t\t\tresults.forEach(onProgress);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthis.logService.trace(\n\t\t\t\t\t\t\t`local notebook search time | ${searchLocalEnd - searchStart}ms`,\n\t\t\t\t\t\t);\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\tmessages: [],\n\t\t\t\t\t\t\tlimitHit: resolved.reduce(\n\t\t\t\t\t\t\t\t(prev, cur) => prev || cur.limitHit,\n\t\t\t\t\t\t\t\tfalse,\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\tresults,\n\t\t\t\t\t\t};\n\t\t\t\t\t},\n\t\t\t\t),\n\t\t\t\tallScannedFiles: promise.then((resolvedPromise) => {\n\t\t\t\t\tconst openNotebookResults = resolvedPromise[0];\n\t\t\t\t\tconst closedNotebookResults = resolvedPromise[1];\n\t\t\t\t\tconst results = arrays.coalesce([\n\t\t\t\t\t\t...openNotebookResults.results.keys(),\n\t\t\t\t\t\t...(closedNotebookResults?.results.keys() ?? []),\n\t\t\t\t\t]);\n\t\t\t\t\treturn new ResourceSet(results, (uri) =>\n\t\t\t\t\t\tthis.uriIdentityService.extUri.getComparisonKey(uri),\n\t\t\t\t\t);\n\t\t\t\t}),\n\t\t\t};\n\t\t};\n\t\tconst promiseResults = getAllResults();\n\t\treturn {\n\t\t\topenFilesToScan: new ResourceSet(localNotebookFiles),\n\t\t\tcompleteData: promiseResults.completeData,\n\t\t\tallScannedFiles: promiseResults.allScannedFiles,\n\t\t};\n\t}\n\n\tprivate async doesFileExist(\n\t\tincludes: string[],\n\t\tfolderQueries: IFolderQuery<URI>[],\n\t\ttoken: CancellationToken,\n\t): Promise<boolean> {\n\t\tconst promises: Promise<boolean>[] = includes.map(\n\t\t\tasync (includePattern) => {\n\t\t\t\tconst query = this.queryBuilder.file(\n\t\t\t\t\tfolderQueries.map((e) => e.folder),\n\t\t\t\t\t{\n\t\t\t\t\t\tincludePattern: includePattern.startsWith(\"/\")\n\t\t\t\t\t\t\t? includePattern\n\t\t\t\t\t\t\t: \"**/\" + includePattern, // todo: find cleaner way to ensure that globs match all appropriate filetypes\n\t\t\t\t\t\texists: true,\n\t\t\t\t\t\tonlyFileScheme: true,\n\t\t\t\t\t},\n\t\t\t\t);\n\t\t\t\treturn this.searchService\n\t\t\t\t\t.fileSearch(query, token)\n\t\t\t\t\t.then((ret) => {\n\t\t\t\t\t\treturn !!ret.limitHit;\n\t\t\t\t\t});\n\t\t\t},\n\t\t);\n\n\t\treturn Promise.any(promises);\n\t}\n\n\tprivate async getClosedNotebookResults(\n\t\ttextQuery: ITextQuery,\n\t\tscannedFiles: ResourceSet,\n\t\ttoken: CancellationToken,\n\t): Promise<IClosedNotebookSearchResults> {\n\t\tconst userAssociations =\n\t\t\tthis.editorResolverService.getAllUserAssociations();\n\t\tconst allPriorityInfo: Map<string, NotebookPriorityInfo[]> = new Map();\n\t\tconst contributedNotebookTypes =\n\t\t\tthis.notebookService.getContributedNotebookTypes();\n\n\t\tuserAssociations.forEach((association) => {\n\t\t\t// we gather the editor associations here, but cannot check them until we actually have the files that the glob matches\n\t\t\t// this is because longer patterns take precedence over shorter ones, and even if there is a user association that\n\t\t\t// specifies the exact same glob as a contributed notebook type, there might be another user association that is longer/more specific\n\t\t\t// that still matches the path and should therefore take more precedence.\n\t\t\tif (!association.filenamePattern) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst info: NotebookPriorityInfo = {\n\t\t\t\tisFromSettings: true,\n\t\t\t\tfilenamePatterns: [association.filenamePattern],\n\t\t\t};\n\n\t\t\tconst existingEntry = allPriorityInfo.get(association.viewType);\n\t\t\tif (existingEntry) {\n\t\t\t\tallPriorityInfo.set(\n\t\t\t\t\tassociation.viewType,\n\t\t\t\t\texistingEntry.concat(info),\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\tallPriorityInfo.set(association.viewType, [info]);\n\t\t\t}\n\t\t});\n\n\t\tconst promises: Promise<\n\t\t\t| {\n\t\t\t\t\tresults: INotebookFileMatchNoModel<URI>[];\n\t\t\t\t\tlimitHit: boolean;\n\t\t\t  }\n\t\t\t| undefined\n\t\t>[] = [];\n\n\t\tcontributedNotebookTypes.forEach((notebook) => {\n\t\t\tif (notebook.selectors.length > 0) {\n\t\t\t\tpromises.push(\n\t\t\t\t\t(async () => {\n\t\t\t\t\t\tconst includes = notebook.selectors.map((selector) => {\n\t\t\t\t\t\t\tconst globPattern =\n\t\t\t\t\t\t\t\t(selector as INotebookExclusiveDocumentFilter)\n\t\t\t\t\t\t\t\t\t.include ||\n\t\t\t\t\t\t\t\t(selector as glob.IRelativePattern | string);\n\t\t\t\t\t\t\treturn globPattern.toString();\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\tconst isInWorkspace = await this.doesFileExist(\n\t\t\t\t\t\t\tincludes,\n\t\t\t\t\t\t\ttextQuery.folderQueries,\n\t\t\t\t\t\t\ttoken,\n\t\t\t\t\t\t);\n\t\t\t\t\t\tif (isInWorkspace) {\n\t\t\t\t\t\t\tconst canResolve =\n\t\t\t\t\t\t\t\tawait this.notebookService.canResolve(\n\t\t\t\t\t\t\t\t\tnotebook.id,\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tif (!canResolve) {\n\t\t\t\t\t\t\t\treturn undefined;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tconst serializer = (\n\t\t\t\t\t\t\t\tawait this.notebookService.withNotebookDataProvider(\n\t\t\t\t\t\t\t\t\tnotebook.id,\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t).serializer;\n\t\t\t\t\t\t\treturn await serializer.searchInNotebooks(\n\t\t\t\t\t\t\t\ttextQuery,\n\t\t\t\t\t\t\t\ttoken,\n\t\t\t\t\t\t\t\tallPriorityInfo,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\treturn undefined;\n\t\t\t\t\t\t}\n\t\t\t\t\t})(),\n\t\t\t\t);\n\t\t\t}\n\t\t});\n\n\t\tconst start = Date.now();\n\t\tconst searchComplete = arrays.coalesce(await Promise.all(promises));\n\t\tconst results = searchComplete.flatMap((e) => e.results);\n\t\tlet limitHit = searchComplete.some((e) => e.limitHit);\n\n\t\t// results are already sorted with high priority first, filter out duplicates.\n\t\tconst uniqueResults = new ResourceMap<INotebookFileMatchNoModel | null>(\n\t\t\t(uri) => this.uriIdentityService.extUri.getComparisonKey(uri),\n\t\t);\n\n\t\tlet numResults = 0;\n\t\tfor (const result of results) {\n\t\t\tif (textQuery.maxResults && numResults >= textQuery.maxResults) {\n\t\t\t\tlimitHit = true;\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tif (\n\t\t\t\t!scannedFiles.has(result.resource) &&\n\t\t\t\t!uniqueResults.has(result.resource)\n\t\t\t) {\n\t\t\t\tuniqueResults.set(\n\t\t\t\t\tresult.resource,\n\t\t\t\t\tresult.cellResults.length > 0 ? result : null,\n\t\t\t\t);\n\t\t\t\tnumResults++;\n\t\t\t}\n\t\t}\n\n\t\tconst end = Date.now();\n\t\tthis.logService.trace(`query: ${textQuery.contentPattern.pattern}`);\n\t\tthis.logService.trace(`closed notebook search time | ${end - start}ms`);\n\n\t\treturn {\n\t\t\tresults: uniqueResults,\n\t\t\tlimitHit,\n\t\t};\n\t}\n\n\tprivate async getLocalNotebookResults(\n\t\tquery: ITextQuery,\n\t\ttoken: CancellationToken,\n\t\twidgets: Array<NotebookEditorWidget>,\n\t\tsearchID: string,\n\t): Promise<IOpenNotebookSearchResults> {\n\t\tconst localResults =\n\t\t\tnew ResourceMap<INotebookFileMatchWithModel | null>((uri) =>\n\t\t\t\tthis.uriIdentityService.extUri.getComparisonKey(uri),\n\t\t\t);\n\t\tlet limitHit = false;\n\n\t\tfor (const widget of widgets) {\n\t\t\tif (!widget.hasModel()) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tconst askMax =\n\t\t\t\t(isNumber(query.maxResults)\n\t\t\t\t\t? query.maxResults\n\t\t\t\t\t: DEFAULT_MAX_SEARCH_RESULTS) + 1;\n\t\t\tconst uri = widget.viewModel!.uri;\n\n\t\t\tif (!pathIncludedInQuery(query, uri.fsPath)) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tlet matches = await widget.find(\n\t\t\t\tquery.contentPattern.pattern,\n\t\t\t\t{\n\t\t\t\t\tregex: query.contentPattern.isRegExp,\n\t\t\t\t\twholeWord: query.contentPattern.isWordMatch,\n\t\t\t\t\tcaseSensitive: query.contentPattern.isCaseSensitive,\n\t\t\t\t\tincludeMarkupInput:\n\t\t\t\t\t\tquery.contentPattern.notebookInfo\n\t\t\t\t\t\t\t?.isInNotebookMarkdownInput ?? true,\n\t\t\t\t\tincludeMarkupPreview:\n\t\t\t\t\t\tquery.contentPattern.notebookInfo\n\t\t\t\t\t\t\t?.isInNotebookMarkdownPreview ?? true,\n\t\t\t\t\tincludeCodeInput:\n\t\t\t\t\t\tquery.contentPattern.notebookInfo\n\t\t\t\t\t\t\t?.isInNotebookCellInput ?? true,\n\t\t\t\t\tincludeOutput:\n\t\t\t\t\t\tquery.contentPattern.notebookInfo\n\t\t\t\t\t\t\t?.isInNotebookCellOutput ?? true,\n\t\t\t\t},\n\t\t\t\ttoken,\n\t\t\t\tfalse,\n\t\t\t\ttrue,\n\t\t\t\tsearchID,\n\t\t\t);\n\n\t\t\tif (matches.length) {\n\t\t\t\tif (askMax && matches.length >= askMax) {\n\t\t\t\t\tlimitHit = true;\n\t\t\t\t\tmatches = matches.slice(0, askMax - 1);\n\t\t\t\t}\n\t\t\t\tconst cellResults: INotebookCellMatchWithModel[] = matches.map(\n\t\t\t\t\t(match) => {\n\t\t\t\t\t\tconst contentResults =\n\t\t\t\t\t\t\tcontentMatchesToTextSearchMatches(\n\t\t\t\t\t\t\t\tmatch.contentMatches,\n\t\t\t\t\t\t\t\tmatch.cell,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\tconst webviewResults =\n\t\t\t\t\t\t\twebviewMatchesToTextSearchMatches(\n\t\t\t\t\t\t\t\tmatch.webviewMatches,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\tcell: match.cell,\n\t\t\t\t\t\t\tindex: match.index,\n\t\t\t\t\t\t\tcontentResults: contentResults,\n\t\t\t\t\t\t\twebviewResults: webviewResults,\n\t\t\t\t\t\t};\n\t\t\t\t\t},\n\t\t\t\t);\n\n\t\t\t\tconst fileMatch: INotebookFileMatchWithModel = {\n\t\t\t\t\tresource: uri,\n\t\t\t\t\tcellResults: cellResults,\n\t\t\t\t};\n\t\t\t\tlocalResults.set(uri, fileMatch);\n\t\t\t} else {\n\t\t\t\tlocalResults.set(uri, null);\n\t\t\t}\n\t\t}\n\n\t\treturn {\n\t\t\tresults: localResults,\n\t\t\tlimitHit,\n\t\t};\n\t}\n\n\tprivate getLocalNotebookWidgets(): Array<NotebookEditorWidget> {\n\t\tconst notebookWidgets =\n\t\t\tthis.notebookEditorService.retrieveAllExistingWidgets();\n\t\treturn notebookWidgets\n\t\t\t.map((widget) => widget.value)\n\t\t\t.filter(\n\t\t\t\t(val): val is NotebookEditorWidget => !!val && val.hasModel(),\n\t\t\t);\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
