{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/search/browser/replaceService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as nls from '../../../../nls.js';\nimport { URI } from '../../../../base/common/uri.js';\nimport * as network from '../../../../base/common/network.js';\nimport { Disposable, IReference } from '../../../../base/common/lifecycle.js';\nimport { IReplaceService } from './replace.js';\nimport { IEditorService } from '../../../services/editor/common/editorService.js';\nimport { IModelService } from '../../../../editor/common/services/model.js';\nimport { ILanguageService } from '../../../../editor/common/languages/language.js';\nimport { Match, FileMatch, FileMatchOrMatch, ISearchViewModelWorkbenchService, MatchInNotebook } from './searchModel.js';\nimport { IProgress, IProgressStep } from '../../../../platform/progress/common/progress.js';\nimport { ITextModelService, ITextModelContentProvider } from '../../../../editor/common/services/resolverService.js';\nimport { IWorkbenchContribution } from '../../../common/contributions.js';\nimport { ScrollType } from '../../../../editor/common/editorCommon.js';\nimport { ITextModel } from '../../../../editor/common/model.js';\nimport { IInstantiationService } from '../../../../platform/instantiation/common/instantiation.js';\nimport { createTextBufferFactoryFromSnapshot } from '../../../../editor/common/model/textModel.js';\nimport { ITextFileService } from '../../../services/textfile/common/textfiles.js';\nimport { IBulkEditService, ResourceTextEdit } from '../../../../editor/browser/services/bulkEditService.js';\nimport { Range } from '../../../../editor/common/core/range.js';\nimport { EditOperation, ISingleEditOperation } from '../../../../editor/common/core/editOperation.js';\nimport { ILabelService } from '../../../../platform/label/common/label.js';\nimport { dirname } from '../../../../base/common/resources.js';\nimport { Promises } from '../../../../base/common/async.js';\nimport { SaveSourceRegistry } from '../../../common/editor.js';\nimport { CellUri, IResolvedNotebookEditorModel } from '../../notebook/common/notebookCommon.js';\nimport { INotebookEditorModelResolverService } from '../../notebook/common/notebookEditorModelResolverService.js';\n\nconst REPLACE_PREVIEW = 'replacePreview';\n\nconst toReplaceResource = (fileResource: URI): URI => {\n\treturn fileResource.with({ scheme: network.Schemas.internal, fragment: REPLACE_PREVIEW, query: JSON.stringify({ scheme: fileResource.scheme }) });\n};\n\nconst toFileResource = (replaceResource: URI): URI => {\n\treturn replaceResource.with({ scheme: JSON.parse(replaceResource.query)['scheme'], fragment: '', query: '' });\n};\n\nexport class ReplacePreviewContentProvider implements ITextModelContentProvider, IWorkbenchContribution {\n\n\tstatic readonly ID = 'workbench.contrib.replacePreviewContentProvider';\n\n\tconstructor(\n\t\t@IInstantiationService private readonly instantiationService: IInstantiationService,\n\t\t@ITextModelService private readonly textModelResolverService: ITextModelService\n\t) {\n\t\tthis.textModelResolverService.registerTextModelContentProvider(network.Schemas.internal, this);\n\t}\n\n\tprovideTextContent(uri: URI): Promise<ITextModel> | null {\n\t\tif (uri.fragment === REPLACE_PREVIEW) {\n\t\t\treturn this.instantiationService.createInstance(ReplacePreviewModel).resolve(uri);\n\t\t}\n\t\treturn null;\n\t}\n}\n\nclass ReplacePreviewModel extends Disposable {\n\tconstructor(\n\t\t@IModelService private readonly modelService: IModelService,\n\t\t@ILanguageService private readonly languageService: ILanguageService,\n\t\t@ITextModelService private readonly textModelResolverService: ITextModelService,\n\t\t@IReplaceService private readonly replaceService: IReplaceService,\n\t\t@ISearchViewModelWorkbenchService private readonly searchWorkbenchService: ISearchViewModelWorkbenchService\n\t) {\n\t\tsuper();\n\t}\n\n\tasync resolve(replacePreviewUri: URI): Promise<ITextModel> {\n\t\tconst fileResource = toFileResource(replacePreviewUri);\n\t\tconst fileMatch = <FileMatch>this.searchWorkbenchService.searchModel.searchResult.matches().filter(match => match.resource.toString() === fileResource.toString())[0];\n\t\tconst ref = this._register(await this.textModelResolverService.createModelReference(fileResource));\n\t\tconst sourceModel = ref.object.textEditorModel;\n\t\tconst sourceModelLanguageId = sourceModel.getLanguageId();\n\t\tconst replacePreviewModel = this.modelService.createModel(createTextBufferFactoryFromSnapshot(sourceModel.createSnapshot()), this.languageService.createById(sourceModelLanguageId), replacePreviewUri);\n\t\tthis._register(fileMatch.onChange(({ forceUpdateModel }) => this.update(sourceModel, replacePreviewModel, fileMatch, forceUpdateModel)));\n\t\tthis._register(this.searchWorkbenchService.searchModel.onReplaceTermChanged(() => this.update(sourceModel, replacePreviewModel, fileMatch)));\n\t\tthis._register(fileMatch.onDispose(() => replacePreviewModel.dispose())); // TODO@Sandeep we should not dispose a model directly but rather the reference (depends on https://github.com/microsoft/vscode/issues/17073)\n\t\tthis._register(replacePreviewModel.onWillDispose(() => this.dispose()));\n\t\tthis._register(sourceModel.onWillDispose(() => this.dispose()));\n\t\treturn replacePreviewModel;\n\t}\n\n\tprivate update(sourceModel: ITextModel, replacePreviewModel: ITextModel, fileMatch: FileMatch, override: boolean = false): void {\n\t\tif (!sourceModel.isDisposed() && !replacePreviewModel.isDisposed()) {\n\t\t\tthis.replaceService.updateReplacePreview(fileMatch, override);\n\t\t}\n\t}\n}\n\nexport class ReplaceService implements IReplaceService {\n\n\tdeclare readonly _serviceBrand: undefined;\n\n\tprivate static readonly REPLACE_SAVE_SOURCE = SaveSourceRegistry.registerSource('searchReplace.source', nls.localize('searchReplace.source', \"Search and Replace\"));\n\n\tconstructor(\n\t\t@ITextFileService private readonly textFileService: ITextFileService,\n\t\t@IEditorService private readonly editorService: IEditorService,\n\t\t@ITextModelService private readonly textModelResolverService: ITextModelService,\n\t\t@IBulkEditService private readonly bulkEditorService: IBulkEditService,\n\t\t@ILabelService private readonly labelService: ILabelService,\n\t\t@INotebookEditorModelResolverService private readonly notebookEditorModelResolverService: INotebookEditorModelResolverService\n\t) { }\n\n\treplace(match: Match): Promise<any>;\n\treplace(files: FileMatch[], progress?: IProgress<IProgressStep>): Promise<any>;\n\treplace(match: FileMatchOrMatch, progress?: IProgress<IProgressStep>, resource?: URI): Promise<any>;\n\tasync replace(arg: any, progress: IProgress<IProgressStep> | undefined = undefined, resource: URI | null = null): Promise<any> {\n\t\tconst edits = this.createEdits(arg, resource);\n\t\tawait this.bulkEditorService.apply(edits, { progress });\n\n\t\tconst rawTextPromises = edits.map(async e => {\n\t\t\tif (e.resource.scheme === network.Schemas.vscodeNotebookCell) {\n\t\t\t\tconst notebookResource = CellUri.parse(e.resource)?.notebook;\n\t\t\t\tif (notebookResource) {\n\t\t\t\t\tlet ref: IReference<IResolvedNotebookEditorModel> | undefined;\n\t\t\t\t\ttry {\n\t\t\t\t\t\tref = await this.notebookEditorModelResolverService.resolve(notebookResource);\n\t\t\t\t\t\tawait ref.object.save({ source: ReplaceService.REPLACE_SAVE_SOURCE });\n\t\t\t\t\t} finally {\n\t\t\t\t\t\tref?.dispose();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn;\n\t\t\t} else {\n\t\t\t\treturn this.textFileService.files.get(e.resource)?.save({ source: ReplaceService.REPLACE_SAVE_SOURCE });\n\t\t\t}\n\t\t});\n\n\t\treturn Promises.settled(rawTextPromises);\n\t}\n\n\tasync openReplacePreview(element: FileMatchOrMatch, preserveFocus?: boolean, sideBySide?: boolean, pinned?: boolean): Promise<any> {\n\t\tconst fileMatch = element instanceof Match ? element.parent() : element;\n\n\t\tconst editor = await this.editorService.openEditor({\n\t\t\toriginal: { resource: fileMatch.resource },\n\t\t\tmodified: { resource: toReplaceResource(fileMatch.resource) },\n\t\t\tlabel: nls.localize('fileReplaceChanges', \"{0} \u2194 {1} (Replace Preview)\", fileMatch.name(), fileMatch.name()),\n\t\t\tdescription: this.labelService.getUriLabel(dirname(fileMatch.resource), { relative: true }),\n\t\t\toptions: {\n\t\t\t\tpreserveFocus,\n\t\t\t\tpinned,\n\t\t\t\trevealIfVisible: true\n\t\t\t}\n\t\t});\n\t\tconst input = editor?.input;\n\t\tconst disposable = fileMatch.onDispose(() => {\n\t\t\tinput?.dispose();\n\t\t\tdisposable.dispose();\n\t\t});\n\t\tawait this.updateReplacePreview(fileMatch);\n\t\tif (editor) {\n\t\t\tconst editorControl = editor.getControl();\n\t\t\tif (element instanceof Match && editorControl) {\n\t\t\t\teditorControl.revealLineInCenter(element.range().startLineNumber, ScrollType.Immediate);\n\t\t\t}\n\t\t}\n\t}\n\n\tasync updateReplacePreview(fileMatch: FileMatch, override: boolean = false): Promise<void> {\n\t\tconst replacePreviewUri = toReplaceResource(fileMatch.resource);\n\t\tconst [sourceModelRef, replaceModelRef] = await Promise.all([this.textModelResolverService.createModelReference(fileMatch.resource), this.textModelResolverService.createModelReference(replacePreviewUri)]);\n\t\tconst sourceModel = sourceModelRef.object.textEditorModel;\n\t\tconst replaceModel = replaceModelRef.object.textEditorModel;\n\t\t// If model is disposed do not update\n\t\ttry {\n\t\t\tif (sourceModel && replaceModel) {\n\t\t\t\tif (override) {\n\t\t\t\t\treplaceModel.setValue(sourceModel.getValue());\n\t\t\t\t} else {\n\t\t\t\t\treplaceModel.undo();\n\t\t\t\t}\n\t\t\t\tthis.applyEditsToPreview(fileMatch, replaceModel);\n\t\t\t}\n\t\t} finally {\n\t\t\tsourceModelRef.dispose();\n\t\t\treplaceModelRef.dispose();\n\t\t}\n\t}\n\n\tprivate applyEditsToPreview(fileMatch: FileMatch, replaceModel: ITextModel): void {\n\t\tconst resourceEdits = this.createEdits(fileMatch, replaceModel.uri);\n\t\tconst modelEdits: ISingleEditOperation[] = [];\n\t\tfor (const resourceEdit of resourceEdits) {\n\t\t\tmodelEdits.push(EditOperation.replaceMove(\n\t\t\t\tRange.lift(resourceEdit.textEdit.range),\n\t\t\t\tresourceEdit.textEdit.text)\n\t\t\t);\n\t\t}\n\t\treplaceModel.pushEditOperations([], modelEdits.sort((a, b) => Range.compareRangesUsingStarts(a.range, b.range)), () => []);\n\t}\n\n\tprivate createEdits(arg: FileMatchOrMatch | FileMatch[], resource: URI | null = null): ResourceTextEdit[] {\n\t\tconst edits: ResourceTextEdit[] = [];\n\n\t\tif (arg instanceof Match) {\n\t\t\tif (arg instanceof MatchInNotebook) {\n\t\t\t\tif (!arg.isReadonly()) {\n\t\t\t\t\t// only apply edits if it's not a webview match, since webview matches are read-only\n\t\t\t\t\tconst match = <MatchInNotebook>arg;\n\t\t\t\t\tedits.push(this.createEdit(match, match.replaceString, match.cell?.uri));\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tconst match = <Match>arg;\n\t\t\t\tedits.push(this.createEdit(match, match.replaceString, resource));\n\t\t\t}\n\t\t}\n\n\t\tif (arg instanceof FileMatch) {\n\t\t\targ = [arg];\n\t\t}\n\n\t\tif (arg instanceof Array) {\n\t\t\targ.forEach(element => {\n\t\t\t\tconst fileMatch = <FileMatch>element;\n\t\t\t\tif (fileMatch.count() > 0) {\n\t\t\t\t\tedits.push(...fileMatch.matches().flatMap(\n\t\t\t\t\t\tmatch => this.createEdits(match, resource)\n\t\t\t\t\t));\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t\treturn edits;\n\t}\n\n\tprivate createEdit(match: Match, text: string, resource: URI | null = null): ResourceTextEdit {\n\t\tconst fileMatch: FileMatch = match.parent();\n\t\treturn new ResourceTextEdit(\n\t\t\tresource ?? fileMatch.resource,\n\t\t\t{ range: match.range(), text }, undefined, undefined\n\t\t);\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
