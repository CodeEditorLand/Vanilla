import { CancellationToken } from "vs/base/common/cancellation";
import { Event } from "vs/base/common/event";
import { Disposable } from "vs/base/common/lifecycle";
import { IPager } from "vs/base/common/paging";
import { URI } from "vs/base/common/uri";
import { ILanguageService } from "vs/editor/common/languages/language";
import { IConfigurationService } from "vs/platform/configuration/common/configuration";
import { IContextKeyService } from "vs/platform/contextkey/common/contextkey";
import { IDialogService } from "vs/platform/dialogs/common/dialogs";
import { IDeprecationInfo, IExtensionGalleryService, IExtensionInfo, IExtensionQueryOptions, IExtensionsControlManifest, IGalleryExtension, ILocalExtension, InstallExtensionResult, IQueryOptions } from "vs/platform/extensionManagement/common/extensionManagement";
import { ExtensionType, IExtensionIdentifier, IExtensionManifest } from "vs/platform/extensions/common/extensions";
import { IFileService } from "vs/platform/files/common/files";
import { IInstantiationService } from "vs/platform/instantiation/common/instantiation";
import { ILogService } from "vs/platform/log/common/log";
import { INotificationService } from "vs/platform/notification/common/notification";
import { IProductService } from "vs/platform/product/common/productService";
import { IProgressService, ProgressLocation } from "vs/platform/progress/common/progress";
import { IStorageService } from "vs/platform/storage/common/storage";
import { ITelemetryService } from "vs/platform/telemetry/common/telemetry";
import { IUpdateService } from "vs/platform/update/common/update";
import { IUriIdentityService } from "vs/platform/uriIdentity/common/uriIdentity";
import { IOpenURLOptions, IURLHandler, IURLService } from "vs/platform/url/common/url";
import { IIgnoredExtensionsManagementService } from "vs/platform/userDataSync/common/ignoredExtensions";
import { IUserDataAutoSyncService, IUserDataSyncEnablementService } from "vs/platform/userDataSync/common/userDataSync";
import { IWorkspaceContextService } from "vs/platform/workspace/common/workspace";
import { AutoUpdateConfigurationValue, ExtensionRuntimeState, ExtensionState, IExtension, IExtensionsWorkbenchService, InstallExtensionOptions } from "vs/workbench/contrib/extensions/common/extensions";
import { IExtensionEditorOptions } from "vs/workbench/contrib/extensions/common/extensionsInput";
import { IEditorService } from "vs/workbench/services/editor/common/editorService";
import { EnablementState, IExtensionManagementServer, IExtensionManagementServerService, IResourceExtension, IWorkbenchExtensionEnablementService, IWorkbenchExtensionManagementService } from "vs/workbench/services/extensionManagement/common/extensionManagement";
import { IExtensionManifestPropertiesService } from "vs/workbench/services/extensions/common/extensionManifestPropertiesService";
import { IExtensionService, IExtensionsStatus } from "vs/workbench/services/extensions/common/extensions";
import { IHostService } from "vs/workbench/services/host/browser/host";
import { ILifecycleService } from "vs/workbench/services/lifecycle/common/lifecycle";
import { ILocaleService } from "vs/workbench/services/localization/common/locale";
import { IUserDataProfileService } from "vs/workbench/services/userDataProfile/common/userDataProfile";
interface IExtensionStateProvider<T> {
    (extension: Extension): T;
}
export declare class Extension implements IExtension {
    private stateProvider;
    private runtimeStateProvider;
    readonly server: IExtensionManagementServer | undefined;
    local: ILocalExtension | undefined;
    private _gallery;
    private readonly resourceExtensionInfo;
    private readonly galleryService;
    private readonly telemetryService;
    private readonly logService;
    private readonly fileService;
    private readonly productService;
    enablementState: EnablementState;
    private galleryResourcesCache;
    constructor(stateProvider: IExtensionStateProvider<ExtensionState>, runtimeStateProvider: IExtensionStateProvider<ExtensionRuntimeState | undefined>, server: IExtensionManagementServer | undefined, local: ILocalExtension | undefined, _gallery: IGalleryExtension | undefined, resourceExtensionInfo: {
        resourceExtension: IResourceExtension;
        isWorkspaceScoped: boolean;
    } | undefined, galleryService: IExtensionGalleryService, telemetryService: ITelemetryService, logService: ILogService, fileService: IFileService, productService: IProductService);
    get resourceExtension(): IResourceExtension | undefined;
    get gallery(): IGalleryExtension | undefined;
    set gallery(gallery: IGalleryExtension | undefined);
    get type(): ExtensionType;
    get isBuiltin(): boolean;
    get isWorkspaceScoped(): boolean;
    get name(): string;
    get displayName(): string;
    get identifier(): IExtensionIdentifier;
    get uuid(): string | undefined;
    get publisher(): string;
    get publisherDisplayName(): string;
    get publisherUrl(): URI | undefined;
    get publisherDomain(): {
        link: string;
        verified: boolean;
    } | undefined;
    get publisherSponsorLink(): URI | undefined;
    get version(): string;
    get pinned(): boolean;
    get latestVersion(): string;
    get description(): string;
    get url(): string | undefined;
    get iconUrl(): string;
    get iconUrlFallback(): string;
    private get localIconUrl();
    private get resourceExtensionIconUrl();
    private get galleryIconUrl();
    private get galleryIconUrlFallback();
    private get defaultIconUrl();
    get repository(): string | undefined;
    get licenseUrl(): string | undefined;
    get supportUrl(): string | undefined;
    get state(): ExtensionState;
    isMalicious: boolean;
    deprecationInfo: IDeprecationInfo | undefined;
    get installCount(): number | undefined;
    get rating(): number | undefined;
    get ratingCount(): number | undefined;
    get outdated(): boolean;
    get outdatedTargetPlatform(): boolean;
    get runtimeState(): ExtensionRuntimeState | undefined;
    get telemetryData(): any;
    get preview(): boolean;
    get preRelease(): boolean;
    get isPreReleaseVersion(): boolean;
    private _extensionEnabledWithPreRelease;
    get hasPreReleaseVersion(): boolean;
    get hasReleaseVersion(): boolean;
    private getLocal;
    getManifest(token: CancellationToken): Promise<IExtensionManifest | null>;
    getGalleryManifest(token?: CancellationToken): Promise<IExtensionManifest | null>;
    hasReadme(): boolean;
    getReadme(token: CancellationToken): Promise<string>;
    hasChangelog(): boolean;
    getChangelog(token: CancellationToken): Promise<string>;
    get categories(): readonly string[];
    get tags(): readonly string[];
    get dependencies(): string[];
    get extensionPack(): string[];
    setExtensionsControlManifest(extensionsControlManifest: IExtensionsControlManifest): void;
    private getManifestFromLocalOrResource;
}
export declare class ExtensionsWorkbenchService extends Disposable implements IExtensionsWorkbenchService, IURLHandler {
    private readonly instantiationService;
    private readonly editorService;
    private readonly extensionManagementService;
    private readonly galleryService;
    private readonly configurationService;
    private readonly telemetryService;
    private readonly notificationService;
    private readonly extensionEnablementService;
    private readonly hostService;
    private readonly progressService;
    private readonly extensionManagementServerService;
    private readonly languageService;
    private readonly extensionsSyncManagementService;
    private readonly userDataAutoSyncService;
    private readonly productService;
    private readonly extensionManifestPropertiesService;
    private readonly logService;
    private readonly extensionService;
    private readonly localeService;
    private readonly lifecycleService;
    private readonly fileService;
    private readonly userDataProfileService;
    private readonly storageService;
    private readonly dialogService;
    private readonly userDataSyncEnablementService;
    private readonly updateService;
    private readonly uriIdentityService;
    private readonly workspaceContextService;
    private static readonly UpdatesCheckInterval;
    readonly _serviceBrand: undefined;
    private hasOutdatedExtensionsContextKey;
    private readonly localExtensions;
    private readonly remoteExtensions;
    private readonly webExtensions;
    private readonly extensionsServers;
    private updatesCheckDelayer;
    private autoUpdateDelayer;
    private readonly _onChange;
    get onChange(): Event<IExtension | undefined>;
    private readonly _onReset;
    get onReset(): any;
    readonly preferPreReleases: boolean;
    private installing;
    private tasksInProgress;
    readonly whenInitialized: Promise<void>;
    constructor(instantiationService: IInstantiationService, editorService: IEditorService, extensionManagementService: IWorkbenchExtensionManagementService, galleryService: IExtensionGalleryService, configurationService: IConfigurationService, telemetryService: ITelemetryService, notificationService: INotificationService, urlService: IURLService, extensionEnablementService: IWorkbenchExtensionEnablementService, hostService: IHostService, progressService: IProgressService, extensionManagementServerService: IExtensionManagementServerService, languageService: ILanguageService, extensionsSyncManagementService: IIgnoredExtensionsManagementService, userDataAutoSyncService: IUserDataAutoSyncService, productService: IProductService, contextKeyService: IContextKeyService, extensionManifestPropertiesService: IExtensionManifestPropertiesService, logService: ILogService, extensionService: IExtensionService, localeService: ILocaleService, lifecycleService: ILifecycleService, fileService: IFileService, userDataProfileService: IUserDataProfileService, storageService: IStorageService, dialogService: IDialogService, userDataSyncEnablementService: IUserDataSyncEnablementService, updateService: IUpdateService, uriIdentityService: IUriIdentityService, workspaceContextService: IWorkspaceContextService);
    private registerAutoRestartConfig;
    private initialize;
    private initializeAutoUpdate;
    private isAutoUpdateEnabled;
    getAutoUpdateValue(): AutoUpdateConfigurationValue;
    updateAutoUpdateValue(value: AutoUpdateConfigurationValue): Promise<void>;
    private readonly autoRestartListenerDisposable;
    private registerAutoRestartListener;
    private reportInstalledExtensionsTelemetry;
    private onDidChangeRunningExtensions;
    private updateExtensionsPinnedState;
    private reset;
    private onDidChangeExtensions;
    private _local;
    get local(): IExtension[];
    private _installed;
    get installed(): IExtension[];
    get outdated(): IExtension[];
    queryLocal(server?: IExtensionManagementServer): Promise<IExtension[]>;
    queryGallery(token: CancellationToken): Promise<IPager<IExtension>>;
    queryGallery(options: IQueryOptions, token: CancellationToken): Promise<IPager<IExtension>>;
    getExtensions(extensionInfos: IExtensionInfo[], token: CancellationToken): Promise<IExtension[]>;
    getExtensions(extensionInfos: IExtensionInfo[], options: IExtensionQueryOptions, token: CancellationToken): Promise<IExtension[]>;
    getResourceExtensions(locations: URI[], isWorkspaceScoped: boolean): Promise<IExtension[]>;
    private resolveQueryText;
    private fromGallery;
    private getInstalledExtensionMatchingGallery;
    private getInstalledExtensionMatchingLocation;
    open(extension: IExtension | string, options?: IExtensionEditorOptions): Promise<void>;
    getExtensionStatus(extension: IExtension): IExtensionsStatus | undefined;
    updateRunningExtensions(auto?: boolean): Promise<void>;
    private getRuntimeState;
    private getPrimaryExtension;
    private getExtensionState;
    checkForUpdates(onlyBuiltin?: boolean): Promise<void>;
    updateAll(): Promise<InstallExtensionResult[]>;
    private syncInstalledExtensionsWithGallery;
    private isAutoCheckUpdatesEnabled;
    private eventuallyCheckForUpdates;
    private getUpdatesCheckInterval;
    private eventuallyAutoUpdateExtensions;
    private autoUpdateBuiltinExtensions;
    private syncPinnedBuiltinExtensions;
    private autoUpdateExtensions;
    private getProductVersion;
    private getProductCurrentVersion;
    private getProductUpdateVersion;
    private shouldAutoUpdateExtension;
    shouldRequireConsentToUpdate(extension: IExtension): Promise<string | undefined>;
    isAutoUpdateEnabledFor(extensionOrPublisher: IExtension | string): boolean;
    private isAutoUpdateEnabledForPublisher;
    updateAutoUpdateEnablementFor(extensionOrPublisher: IExtension | string, enable: boolean): Promise<void>;
    private onDidSelectedExtensionToAutoUpdateValueChange;
    canInstall(extension: IExtension): Promise<boolean>;
    install(arg: string | URI | IExtension, installOptions?: InstallExtensionOptions, progressLocation?: ProgressLocation): Promise<IExtension>;
    installInServer(extension: IExtension, server: IExtensionManagementServer): Promise<void>;
    canSetLanguage(extension: IExtension): boolean;
    setLanguage(extension: IExtension): Promise<void>;
    setEnablement(extensions: IExtension | IExtension[], enablementState: EnablementState): Promise<void>;
    uninstall(e: IExtension): Promise<void>;
    private getAllPackExtensionsToUninstall;
    private getErrorMessageForUninstallingAnExtensionWithDependents;
    reinstall(extension: IExtension): Promise<IExtension>;
    isExtensionIgnoredToSync(extension: IExtension): boolean;
    togglePreRelease(extension: IExtension): Promise<void>;
    toggleExtensionIgnoredToSync(extension: IExtension): Promise<void>;
    toggleApplyExtensionToAllProfiles(extension: IExtension): Promise<void>;
    private getAllExtensions;
    private isInstalledExtensionSynced;
    updateSynchronizingInstalledExtension(extension: ILocalExtension, sync: boolean): Promise<ILocalExtension>;
    private doInstall;
    private installFromVSIX;
    private installFromGallery;
    private waitAndGetInstalledExtension;
    private waitUntilExtensionIsEnabled;
    private promptAndSetEnablement;
    private checkAndSetEnablement;
    private getExtensionsRecursively;
    private getDependentsAfterDisablement;
    private getDependentsErrorMessageForDisablement;
    private getErrorMessageForDisablingAnExtensionWithDependents;
    private doSetEnablement;
    private _activityCallBack;
    private reportProgressFromOtherSources;
    private withProgress;
    private onError;
    handleURL(uri: URI, options?: IOpenURLOptions): Promise<boolean>;
    private onOpenExtensionUrl;
    private getPublishersToAutoUpdate;
    getEnabledAutoUpdateExtensions(): string[];
    private setEnabledAutoUpdateExtensions;
    private _enabledAutoUpdateExtensionsValue;
    private get enabledAuotUpdateExtensionsValue();
    private set enabledAuotUpdateExtensionsValue(value);
    private getEnabledAutoUpdateExtensionsValue;
    private setEnabledAutoUpdateExtensionsValue;
    getDisabledAutoUpdateExtensions(): string[];
    private setDisabledAutoUpdateExtensions;
    private _disabledAutoUpdateExtensionsValue;
    private get disabledAutoUpdateExtensionsValue();
    private set disabledAutoUpdateExtensionsValue(value);
    private getDisabledAutoUpdateExtensionsValue;
    private setDisabledAutoUpdateExtensionsValue;
}
export {};
