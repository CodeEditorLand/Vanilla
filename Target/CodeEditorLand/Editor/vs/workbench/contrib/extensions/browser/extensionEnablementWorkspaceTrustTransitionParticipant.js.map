{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/extensions/browser/extensionEnablementWorkspaceTrustTransitionParticipant.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Disposable } from \"../../../../base/common/lifecycle.js\";\nimport { localize } from \"../../../../nls.js\";\nimport {\n\tIWorkspaceTrustEnablementService,\n\tIWorkspaceTrustManagementService,\n\ttype IWorkspaceTrustTransitionParticipant,\n} from \"../../../../platform/workspace/common/workspaceTrust.js\";\nimport type { IWorkbenchContribution } from \"../../../common/contributions.js\";\nimport { IWorkbenchEnvironmentService } from \"../../../services/environment/common/environmentService.js\";\nimport { IWorkbenchExtensionEnablementService } from \"../../../services/extensionManagement/common/extensionManagement.js\";\nimport { IExtensionService } from \"../../../services/extensions/common/extensions.js\";\nimport { IHostService } from \"../../../services/host/browser/host.js\";\n\nexport class ExtensionEnablementWorkspaceTrustTransitionParticipant\n\textends Disposable\n\timplements IWorkbenchContribution\n{\n\tconstructor(\n\t\t@IExtensionService extensionService: IExtensionService,\n\t\t@IHostService hostService: IHostService,\n\t\t@IWorkbenchEnvironmentService environmentService: IWorkbenchEnvironmentService,\n\t\t@IWorkbenchExtensionEnablementService extensionEnablementService: IWorkbenchExtensionEnablementService,\n\t\t@IWorkspaceTrustEnablementService workspaceTrustEnablementService: IWorkspaceTrustEnablementService,\n\t\t@IWorkspaceTrustManagementService workspaceTrustManagementService: IWorkspaceTrustManagementService,\n\t) {\n\t\tsuper();\n\n\t\tif (workspaceTrustEnablementService.isWorkspaceTrustEnabled()) {\n\t\t\t// The extension enablement participant will be registered only after the\n\t\t\t// workspace trust state has been initialized. There is no need to execute\n\t\t\t// the participant as part of the initialization process, as the workspace\n\t\t\t// trust state is initialized before starting the extension host.\n\t\t\tworkspaceTrustManagementService.workspaceTrustInitialized.then(\n\t\t\t\t() => {\n\t\t\t\t\tconst workspaceTrustTransitionParticipant = new (class\n\t\t\t\t\t\timplements IWorkspaceTrustTransitionParticipant\n\t\t\t\t\t{\n\t\t\t\t\t\tasync participate(trusted: boolean): Promise<void> {\n\t\t\t\t\t\t\tif (trusted) {\n\t\t\t\t\t\t\t\t// Untrusted -> Trusted\n\t\t\t\t\t\t\t\tawait extensionEnablementService.updateExtensionsEnablementsWhenWorkspaceTrustChanges();\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t// Trusted -> Untrusted\n\t\t\t\t\t\t\t\tif (environmentService.remoteAuthority) {\n\t\t\t\t\t\t\t\t\thostService.reload();\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tconst stopped =\n\t\t\t\t\t\t\t\t\t\tawait extensionService.stopExtensionHosts(\n\t\t\t\t\t\t\t\t\t\t\tlocalize(\n\t\t\t\t\t\t\t\t\t\t\t\t\"restartExtensionHost.reason\",\n\t\t\t\t\t\t\t\t\t\t\t\t\"Restarting extension host due to workspace trust change.\",\n\t\t\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\tawait extensionEnablementService.updateExtensionsEnablementsWhenWorkspaceTrustChanges();\n\t\t\t\t\t\t\t\t\tif (stopped) {\n\t\t\t\t\t\t\t\t\t\textensionService.startExtensionHosts();\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t})();\n\n\t\t\t\t\t// Execute BEFORE the workspace trust transition completes\n\t\t\t\t\tthis._register(\n\t\t\t\t\t\tworkspaceTrustManagementService.addWorkspaceTrustTransitionParticipant(\n\t\t\t\t\t\t\tworkspaceTrustTransitionParticipant,\n\t\t\t\t\t\t),\n\t\t\t\t\t);\n\t\t\t\t},\n\t\t\t);\n\t\t}\n\t}\n}\n"],
  "mappings": ";;;;;;;;;;;;AAKA,SAAS,kBAAkB;AAC3B,SAAS,gBAAgB;AACzB;AAAA,EACC;AAAA,EACA;AAAA,OAEM;AAEP,SAAS,oCAAoC;AAC7C,SAAS,4CAA4C;AACrD,SAAS,yBAAyB;AAClC,SAAS,oBAAoB;AAEtB,IAAM,yDAAN,cACE,WAET;AAAA,EArBA,OAqBA;AAAA;AAAA;AAAA,EACC,YACoB,kBACL,aACgB,oBACQ,4BACJ,iCACA,iCACjC;AACD,UAAM;AAEN,QAAI,gCAAgC,wBAAwB,GAAG;AAK9D,sCAAgC,0BAA0B;AAAA,QACzD,MAAM;AACL,gBAAM,sCAAsC,IAAK,MAEjD;AAAA,YACC,MAAM,YAAY,SAAiC;AAClD,kBAAI,SAAS;AAEZ,sBAAM,2BAA2B,qDAAqD;AAAA,cACvF,OAAO;AAEN,oBAAI,mBAAmB,iBAAiB;AACvC,8BAAY,OAAO;AAAA,gBACpB,OAAO;AACN,wBAAM,UACL,MAAM,iBAAiB;AAAA,oBACtB;AAAA,sBACC;AAAA,sBACA;AAAA,oBACD;AAAA,kBACD;AACD,wBAAM,2BAA2B,qDAAqD;AACtF,sBAAI,SAAS;AACZ,qCAAiB,oBAAoB;AAAA,kBACtC;AAAA,gBACD;AAAA,cACD;AAAA,YACD;AAAA,UACD,EAAG;AAGH,eAAK;AAAA,YACJ,gCAAgC;AAAA,cAC/B;AAAA,YACD;AAAA,UACD;AAAA,QACD;AAAA,MACD;AAAA,IACD;AAAA,EACD;AACD;AA3Da,yDAAN;AAAA,EAKJ;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,GAVU;",
  "names": []
}
