var v=Object.defineProperty;var E=Object.getOwnPropertyDescriptor;var f=(c,s,n,e)=>{for(var i=e>1?void 0:e?E(s,n):s,o=c.length-1,t;o>=0;o--)(t=c[o])&&(i=(e?t(s,n,i):t(i))||i);return e&&i&&v(s,n,i),i},r=(c,s)=>(n,e)=>s(n,e,c);import{EXTENSION_IDENTIFIER_PATTERN as l}from"../../../../platform/extensionManagement/common/extensionManagement.js";import{distinct as u,equals as S}from"../../../../base/common/arrays.js";import{ExtensionRecommendations as k}from"./extensionRecommendations.js";import{INotificationService as C}from"../../../../platform/notification/common/notification.js";import{ExtensionRecommendationReason as p}from"../../../services/extensionRecommendations/common/extensionRecommendations.js";import{localize as x}from"../../../../nls.js";import{Emitter as R}from"../../../../base/common/event.js";import{IWorkspaceExtensionsConfigService as w}from"../../../services/extensionRecommendations/common/workspaceExtensionsConfig.js";import{IWorkspaceContextService as I}from"../../../../platform/workspace/common/workspace.js";import{IUriIdentityService as y}from"../../../../platform/uriIdentity/common/uriIdentity.js";import{FileChangeType as g,IFileService as D}from"../../../../platform/files/common/files.js";import{RunOnceScheduler as _}from"../../../../base/common/async.js";import{IWorkbenchExtensionManagementService as W}from"../../../services/extensionManagement/common/extensionManagement.js";const m=".vscode/extensions";let d=class extends k{constructor(n,e,i,o,t,h){super();this.workspaceExtensionsConfigService=n;this.contextService=e;this.uriIdentityService=i;this.fileService=o;this.workbenchExtensionManagementService=t;this.notificationService=h;this.onDidChangeWorkspaceExtensionsScheduler=this._register(new _(()=>this.onDidChangeWorkspaceExtensionsFolders(),1e3))}_recommendations=[];get recommendations(){return this._recommendations}_onDidChangeRecommendations=this._register(new R);onDidChangeRecommendations=this._onDidChangeRecommendations.event;_ignoredRecommendations=[];get ignoredRecommendations(){return this._ignoredRecommendations}workspaceExtensions=[];onDidChangeWorkspaceExtensionsScheduler;async doActivate(){this.workspaceExtensions=await this.fetchWorkspaceExtensions(),await this.fetch(),this._register(this.workspaceExtensionsConfigService.onDidChangeExtensionsConfigs(()=>this.onDidChangeExtensionsConfigs()));for(const n of this.contextService.getWorkspace().folders)this._register(this.fileService.watch(this.uriIdentityService.extUri.joinPath(n.uri,m)));this._register(this.contextService.onDidChangeWorkspaceFolders(()=>this.onDidChangeWorkspaceExtensionsScheduler.schedule())),this._register(this.fileService.onDidFilesChange(n=>{this.contextService.getWorkspace().folders.some(e=>n.affects(this.uriIdentityService.extUri.joinPath(e.uri,m),g.ADDED,g.DELETED))&&this.onDidChangeWorkspaceExtensionsScheduler.schedule()}))}async onDidChangeWorkspaceExtensionsFolders(){const n=this.workspaceExtensions;this.workspaceExtensions=await this.fetchWorkspaceExtensions(),S(n,this.workspaceExtensions,(e,i)=>this.uriIdentityService.extUri.isEqual(e,i))||this.onDidChangeExtensionsConfigs()}async fetchWorkspaceExtensions(){const n=[];for(const e of this.contextService.getWorkspace().folders){const i=this.uriIdentityService.extUri.joinPath(e.uri,m);try{const o=await this.fileService.resolve(i);for(const t of o.children??[])t.isDirectory&&n.push(t.resource)}catch{}}return n.length?(await this.workbenchExtensionManagementService.getExtensions(n)).map(i=>i.location):[]}async fetch(){const n=await this.workspaceExtensionsConfigService.getExtensionsConfigs(),{invalidRecommendations:e,message:i}=await this.validateExtensions(n);e.length&&this.notificationService.warn(`The ${e.length} extension(s) below, in workspace recommendations have issues:
${i}`),this._recommendations=[],this._ignoredRecommendations=[];for(const o of n){if(o.unwantedRecommendations)for(const t of o.unwantedRecommendations)e.indexOf(t)===-1&&this._ignoredRecommendations.push(t);if(o.recommendations)for(const t of o.recommendations)e.indexOf(t)===-1&&this._recommendations.push({extension:t,reason:{reasonId:p.Workspace,reasonText:x("workspaceRecommendation","This extension is recommended by users of the current workspace.")}})}for(const o of this.workspaceExtensions)this._recommendations.push({extension:o,reason:{reasonId:p.Workspace,reasonText:x("workspaceRecommendation","This extension is recommended by users of the current workspace.")}})}async validateExtensions(n){const e=[],i=[];let o="";const t=u(n.flatMap(({recommendations:a})=>a||[])),h=new RegExp(l);for(const a of t)h.test(a)?e.push(a):(i.push(a),o+=`${a} (bad format) Expected: <provider>.<name>
`);return{validRecommendations:e,invalidRecommendations:i,message:o}}async onDidChangeExtensionsConfigs(){await this.fetch(),this._onDidChangeRecommendations.fire()}};d=f([r(0,w),r(1,I),r(2,y),r(3,D),r(4,W),r(5,C)],d);export{d as WorkspaceRecommendations};
