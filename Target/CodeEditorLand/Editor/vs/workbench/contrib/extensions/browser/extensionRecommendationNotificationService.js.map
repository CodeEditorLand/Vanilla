{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/extensions/browser/extensionRecommendationNotificationService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { distinct } from '../../../../base/common/arrays.js';\nimport { CancelablePromise, createCancelablePromise, Promises, raceCancellablePromises, raceCancellation, timeout } from '../../../../base/common/async.js';\nimport { CancellationToken } from '../../../../base/common/cancellation.js';\nimport { isCancellationError } from '../../../../base/common/errors.js';\nimport { Emitter, Event } from '../../../../base/common/event.js';\nimport { Disposable, DisposableStore, MutableDisposable, toDisposable } from '../../../../base/common/lifecycle.js';\nimport { isString } from '../../../../base/common/types.js';\nimport { URI } from '../../../../base/common/uri.js';\nimport { localize } from '../../../../nls.js';\nimport { IConfigurationService } from '../../../../platform/configuration/common/configuration.js';\nimport { IGalleryExtension } from '../../../../platform/extensionManagement/common/extensionManagement.js';\nimport { areSameExtensions } from '../../../../platform/extensionManagement/common/extensionManagementUtil.js';\nimport { IExtensionRecommendationNotificationService, IExtensionRecommendations, RecommendationsNotificationResult, RecommendationSource, RecommendationSourceToString } from '../../../../platform/extensionRecommendations/common/extensionRecommendations.js';\nimport { INotificationHandle, INotificationService, IPromptChoice, IPromptChoiceWithMenu, NotificationPriority, Severity } from '../../../../platform/notification/common/notification.js';\nimport { IStorageService, StorageScope, StorageTarget } from '../../../../platform/storage/common/storage.js';\nimport { ITelemetryService } from '../../../../platform/telemetry/common/telemetry.js';\nimport { IUriIdentityService } from '../../../../platform/uriIdentity/common/uriIdentity.js';\nimport { IUserDataSyncEnablementService, SyncResource } from '../../../../platform/userDataSync/common/userDataSync.js';\nimport { IExtension, IExtensionsWorkbenchService } from '../common/extensions.js';\nimport { IWorkbenchEnvironmentService } from '../../../services/environment/common/environmentService.js';\nimport { EnablementState, IWorkbenchExtensionManagementService, IWorkbenchExtensionEnablementService } from '../../../services/extensionManagement/common/extensionManagement.js';\nimport { IExtensionIgnoredRecommendationsService } from '../../../services/extensionRecommendations/common/extensionRecommendations.js';\n\ntype ExtensionRecommendationsNotificationClassification = {\n\towner: 'sandy081';\n\tcomment: 'Response information when an extension is recommended';\n\tuserReaction: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'User reaction after showing the recommendation prompt. Eg., install, cancel, show, neverShowAgain' };\n\textensionId?: { classification: 'PublicNonPersonalData'; purpose: 'FeatureInsight'; comment: 'Id of the extension that is recommended' };\n\tsource: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'The source from which this recommendation is coming from. Eg., file, exe.,' };\n};\n\ntype ExtensionWorkspaceRecommendationsNotificationClassification = {\n\towner: 'sandy081';\n\tcomment: 'Response information when a recommendation from workspace is recommended';\n\tuserReaction: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'User reaction after showing the recommendation prompt. Eg., install, cancel, show, neverShowAgain' };\n};\n\nconst ignoreImportantExtensionRecommendationStorageKey = 'extensionsAssistant/importantRecommendationsIgnore';\nconst donotShowWorkspaceRecommendationsStorageKey = 'extensionsAssistant/workspaceRecommendationsIgnore';\n\ntype RecommendationsNotificationActions = {\n\tonDidInstallRecommendedExtensions(extensions: IExtension[]): void;\n\tonDidShowRecommendedExtensions(extensions: IExtension[]): void;\n\tonDidCancelRecommendedExtensions(extensions: IExtension[]): void;\n\tonDidNeverShowRecommendedExtensionsAgain(extensions: IExtension[]): void;\n};\n\ntype ExtensionRecommendations = Omit<IExtensionRecommendations, 'extensions'> & { extensions: Array<string | URI> };\n\nclass RecommendationsNotification extends Disposable {\n\n\tprivate _onDidClose = this._register(new Emitter<void>());\n\treadonly onDidClose = this._onDidClose.event;\n\n\tprivate _onDidChangeVisibility = this._register(new Emitter<boolean>());\n\treadonly onDidChangeVisibility = this._onDidChangeVisibility.event;\n\n\tprivate notificationHandle: INotificationHandle | undefined;\n\tprivate cancelled: boolean = false;\n\n\tconstructor(\n\t\tprivate readonly severity: Severity,\n\t\tprivate readonly message: string,\n\t\tprivate readonly choices: IPromptChoice[],\n\t\tprivate readonly notificationService: INotificationService\n\t) {\n\t\tsuper();\n\t}\n\n\tshow(): void {\n\t\tif (!this.notificationHandle) {\n\t\t\tthis.updateNotificationHandle(this.notificationService.prompt(this.severity, this.message, this.choices, { sticky: true, onCancel: () => this.cancelled = true }));\n\t\t}\n\t}\n\n\thide(): void {\n\t\tif (this.notificationHandle) {\n\t\t\tthis.onDidCloseDisposable.clear();\n\t\t\tthis.notificationHandle.close();\n\t\t\tthis.cancelled = false;\n\t\t\tthis.updateNotificationHandle(this.notificationService.prompt(this.severity, this.message, this.choices, { priority: NotificationPriority.SILENT, onCancel: () => this.cancelled = true }));\n\t\t}\n\t}\n\n\tisCancelled(): boolean {\n\t\treturn this.cancelled;\n\t}\n\n\tprivate readonly onDidCloseDisposable = this._register(new MutableDisposable());\n\tprivate readonly onDidChangeVisibilityDisposable = this._register(new MutableDisposable());\n\tprivate updateNotificationHandle(notificationHandle: INotificationHandle) {\n\t\tthis.onDidCloseDisposable.clear();\n\t\tthis.onDidChangeVisibilityDisposable.clear();\n\t\tthis.notificationHandle = notificationHandle;\n\n\t\tthis.onDidCloseDisposable.value = this.notificationHandle.onDidClose(() => {\n\t\t\tthis.onDidCloseDisposable.dispose();\n\t\t\tthis.onDidChangeVisibilityDisposable.dispose();\n\n\t\t\tthis._onDidClose.fire();\n\n\t\t\tthis._onDidClose.dispose();\n\t\t\tthis._onDidChangeVisibility.dispose();\n\t\t});\n\t\tthis.onDidChangeVisibilityDisposable.value = this.notificationHandle.onDidChangeVisibility((e) => this._onDidChangeVisibility.fire(e));\n\t}\n}\n\ntype PendingRecommendationsNotification = { recommendationsNotification: RecommendationsNotification; source: RecommendationSource; token: CancellationToken };\ntype VisibleRecommendationsNotification = { recommendationsNotification: RecommendationsNotification; source: RecommendationSource; from: number };\n\nexport class ExtensionRecommendationNotificationService extends Disposable implements IExtensionRecommendationNotificationService {\n\n\tdeclare readonly _serviceBrand: undefined;\n\n\t// Ignored Important Recommendations\n\tget ignoredRecommendations(): string[] {\n\t\treturn distinct([...(<string[]>JSON.parse(this.storageService.get(ignoreImportantExtensionRecommendationStorageKey, StorageScope.PROFILE, '[]')))].map(i => i.toLowerCase()));\n\t}\n\n\tprivate recommendedExtensions: string[] = [];\n\tprivate recommendationSources: RecommendationSource[] = [];\n\n\tprivate hideVisibleNotificationPromise: CancelablePromise<void> | undefined;\n\tprivate visibleNotification: VisibleRecommendationsNotification | undefined;\n\tprivate pendingNotificaitons: PendingRecommendationsNotification[] = [];\n\n\tconstructor(\n\t\t@IConfigurationService private readonly configurationService: IConfigurationService,\n\t\t@IStorageService private readonly storageService: IStorageService,\n\t\t@INotificationService private readonly notificationService: INotificationService,\n\t\t@ITelemetryService private readonly telemetryService: ITelemetryService,\n\t\t@IExtensionsWorkbenchService private readonly extensionsWorkbenchService: IExtensionsWorkbenchService,\n\t\t@IWorkbenchExtensionManagementService private readonly extensionManagementService: IWorkbenchExtensionManagementService,\n\t\t@IWorkbenchExtensionEnablementService private readonly extensionEnablementService: IWorkbenchExtensionEnablementService,\n\t\t@IExtensionIgnoredRecommendationsService private readonly extensionIgnoredRecommendationsService: IExtensionIgnoredRecommendationsService,\n\t\t@IUserDataSyncEnablementService private readonly userDataSyncEnablementService: IUserDataSyncEnablementService,\n\t\t@IWorkbenchEnvironmentService private readonly workbenchEnvironmentService: IWorkbenchEnvironmentService,\n\t\t@IUriIdentityService private readonly uriIdentityService: IUriIdentityService,\n\t) {\n\t\tsuper();\n\t}\n\n\thasToIgnoreRecommendationNotifications(): boolean {\n\t\tconst config = this.configurationService.getValue<{ ignoreRecommendations: boolean; showRecommendationsOnlyOnDemand?: boolean }>('extensions');\n\t\treturn config.ignoreRecommendations || !!config.showRecommendationsOnlyOnDemand;\n\t}\n\n\tasync promptImportantExtensionsInstallNotification(extensionRecommendations: IExtensionRecommendations): Promise<RecommendationsNotificationResult> {\n\t\tconst ignoredRecommendations = [...this.extensionIgnoredRecommendationsService.ignoredRecommendations, ...this.ignoredRecommendations];\n\t\tconst extensions = extensionRecommendations.extensions.filter(id => !ignoredRecommendations.includes(id));\n\t\tif (!extensions.length) {\n\t\t\treturn RecommendationsNotificationResult.Ignored;\n\t\t}\n\n\t\treturn this.promptRecommendationsNotification({ ...extensionRecommendations, extensions }, {\n\t\t\tonDidInstallRecommendedExtensions: (extensions: IExtension[]) => extensions.forEach(extension => this.telemetryService.publicLog2<{ userReaction: string; extensionId: string; source: string }, ExtensionRecommendationsNotificationClassification>('extensionRecommendations:popup', { userReaction: 'install', extensionId: extension.identifier.id, source: RecommendationSourceToString(extensionRecommendations.source) })),\n\t\t\tonDidShowRecommendedExtensions: (extensions: IExtension[]) => extensions.forEach(extension => this.telemetryService.publicLog2<{ userReaction: string; extensionId: string; source: string }, ExtensionRecommendationsNotificationClassification>('extensionRecommendations:popup', { userReaction: 'show', extensionId: extension.identifier.id, source: RecommendationSourceToString(extensionRecommendations.source) })),\n\t\t\tonDidCancelRecommendedExtensions: (extensions: IExtension[]) => extensions.forEach(extension => this.telemetryService.publicLog2<{ userReaction: string; extensionId: string; source: string }, ExtensionRecommendationsNotificationClassification>('extensionRecommendations:popup', { userReaction: 'cancelled', extensionId: extension.identifier.id, source: RecommendationSourceToString(extensionRecommendations.source) })),\n\t\t\tonDidNeverShowRecommendedExtensionsAgain: (extensions: IExtension[]) => {\n\t\t\t\tfor (const extension of extensions) {\n\t\t\t\t\tthis.addToImportantRecommendationsIgnore(extension.identifier.id);\n\t\t\t\t\tthis.telemetryService.publicLog2<{ userReaction: string; extensionId: string; source: string }, ExtensionRecommendationsNotificationClassification>('extensionRecommendations:popup', { userReaction: 'neverShowAgain', extensionId: extension.identifier.id, source: RecommendationSourceToString(extensionRecommendations.source) });\n\t\t\t\t}\n\t\t\t\tthis.notificationService.prompt(\n\t\t\t\t\tSeverity.Info,\n\t\t\t\t\tlocalize('ignoreExtensionRecommendations', \"Do you want to ignore all extension recommendations?\"),\n\t\t\t\t\t[{\n\t\t\t\t\t\tlabel: localize('ignoreAll', \"Yes, Ignore All\"),\n\t\t\t\t\t\trun: () => this.setIgnoreRecommendationsConfig(true)\n\t\t\t\t\t}, {\n\t\t\t\t\t\tlabel: localize('no', \"No\"),\n\t\t\t\t\t\trun: () => this.setIgnoreRecommendationsConfig(false)\n\t\t\t\t\t}]\n\t\t\t\t);\n\t\t\t},\n\t\t});\n\t}\n\n\tasync promptWorkspaceRecommendations(recommendations: Array<string | URI>): Promise<void> {\n\t\tif (this.storageService.getBoolean(donotShowWorkspaceRecommendationsStorageKey, StorageScope.WORKSPACE, false)) {\n\t\t\treturn;\n\t\t}\n\n\t\tlet installed = await this.extensionManagementService.getInstalled();\n\t\tinstalled = installed.filter(l => this.extensionEnablementService.getEnablementState(l) !== EnablementState.DisabledByExtensionKind); // Filter extensions disabled by kind\n\t\trecommendations = recommendations.filter(recommendation => installed.every(local =>\n\t\t\tisString(recommendation) ? !areSameExtensions({ id: recommendation }, local.identifier) : !this.uriIdentityService.extUri.isEqual(recommendation, local.location)\n\t\t));\n\t\tif (!recommendations.length) {\n\t\t\treturn;\n\t\t}\n\n\t\tawait this.promptRecommendationsNotification({ extensions: recommendations, source: RecommendationSource.WORKSPACE, name: localize({ key: 'this repository', comment: ['this repository means the current repository that is opened'] }, \"this repository\") }, {\n\t\t\tonDidInstallRecommendedExtensions: () => this.telemetryService.publicLog2<{ userReaction: string }, ExtensionWorkspaceRecommendationsNotificationClassification>('extensionWorkspaceRecommendations:popup', { userReaction: 'install' }),\n\t\t\tonDidShowRecommendedExtensions: () => this.telemetryService.publicLog2<{ userReaction: string }, ExtensionWorkspaceRecommendationsNotificationClassification>('extensionWorkspaceRecommendations:popup', { userReaction: 'show' }),\n\t\t\tonDidCancelRecommendedExtensions: () => this.telemetryService.publicLog2<{ userReaction: string }, ExtensionWorkspaceRecommendationsNotificationClassification>('extensionWorkspaceRecommendations:popup', { userReaction: 'cancelled' }),\n\t\t\tonDidNeverShowRecommendedExtensionsAgain: () => {\n\t\t\t\tthis.telemetryService.publicLog2<{ userReaction: string }, ExtensionWorkspaceRecommendationsNotificationClassification>('extensionWorkspaceRecommendations:popup', { userReaction: 'neverShowAgain' });\n\t\t\t\tthis.storageService.store(donotShowWorkspaceRecommendationsStorageKey, true, StorageScope.WORKSPACE, StorageTarget.MACHINE);\n\t\t\t},\n\t\t});\n\n\t}\n\n\tprivate async promptRecommendationsNotification({ extensions: extensionIds, source, name, searchValue }: ExtensionRecommendations, recommendationsNotificationActions: RecommendationsNotificationActions): Promise<RecommendationsNotificationResult> {\n\n\t\tif (this.hasToIgnoreRecommendationNotifications()) {\n\t\t\treturn RecommendationsNotificationResult.Ignored;\n\t\t}\n\n\t\t// Do not show exe based recommendations in remote window\n\t\tif (source === RecommendationSource.EXE && this.workbenchEnvironmentService.remoteAuthority) {\n\t\t\treturn RecommendationsNotificationResult.IncompatibleWindow;\n\t\t}\n\n\t\t// Ignore exe recommendation if the window\n\t\t// \t\t=> has shown an exe based recommendation already\n\t\t// \t\t=> or has shown any two recommendations already\n\t\tif (source === RecommendationSource.EXE && (this.recommendationSources.includes(RecommendationSource.EXE) || this.recommendationSources.length >= 2)) {\n\t\t\treturn RecommendationsNotificationResult.TooMany;\n\t\t}\n\n\t\tthis.recommendationSources.push(source);\n\n\t\t// Ignore exe recommendation if recommendations are already shown\n\t\tif (source === RecommendationSource.EXE && extensionIds.every(id => isString(id) && this.recommendedExtensions.includes(id))) {\n\t\t\treturn RecommendationsNotificationResult.Ignored;\n\t\t}\n\n\t\tconst extensions = await this.getInstallableExtensions(extensionIds);\n\t\tif (!extensions.length) {\n\t\t\treturn RecommendationsNotificationResult.Ignored;\n\t\t}\n\n\t\tthis.recommendedExtensions = distinct([...this.recommendedExtensions, ...extensionIds.filter(isString)]);\n\n\t\tlet extensionsMessage = '';\n\t\tif (extensions.length === 1) {\n\t\t\textensionsMessage = localize('extensionFromPublisher', \"'{0}' extension from {1}\", extensions[0].displayName, extensions[0].publisherDisplayName);\n\t\t} else {\n\t\t\tconst publishers = [...extensions.reduce((result, extension) => result.add(extension.publisherDisplayName), new Set<string>())];\n\t\t\tif (publishers.length > 2) {\n\t\t\t\textensionsMessage = localize('extensionsFromMultiplePublishers', \"extensions from {0}, {1} and others\", publishers[0], publishers[1]);\n\t\t\t} else if (publishers.length === 2) {\n\t\t\t\textensionsMessage = localize('extensionsFromPublishers', \"extensions from {0} and {1}\", publishers[0], publishers[1]);\n\t\t\t} else {\n\t\t\t\textensionsMessage = localize('extensionsFromPublisher', \"extensions from {0}\", publishers[0]);\n\t\t\t}\n\t\t}\n\n\t\tlet message = localize('recommended', \"Do you want to install the recommended {0} for {1}?\", extensionsMessage, name);\n\t\tif (source === RecommendationSource.EXE) {\n\t\t\tmessage = localize({ key: 'exeRecommended', comment: ['Placeholder string is the name of the software that is installed.'] }, \"You have {0} installed on your system. Do you want to install the recommended {1} for it?\", name, extensionsMessage);\n\t\t}\n\t\tif (!searchValue) {\n\t\t\tsearchValue = source === RecommendationSource.WORKSPACE ? '@recommended' : extensions.map(extensionId => `@id:${extensionId.identifier.id}`).join(' ');\n\t\t}\n\n\t\tconst donotShowAgainLabel = source === RecommendationSource.WORKSPACE ? localize('donotShowAgain', \"Don't Show Again for this Repository\")\n\t\t\t: extensions.length > 1 ? localize('donotShowAgainExtension', \"Don't Show Again for these Extensions\") : localize('donotShowAgainExtensionSingle', \"Don't Show Again for this Extension\");\n\n\t\treturn raceCancellablePromises([\n\t\t\tthis._registerP(this.showRecommendationsNotification(extensions, message, searchValue, donotShowAgainLabel, source, recommendationsNotificationActions)),\n\t\t\tthis._registerP(this.waitUntilRecommendationsAreInstalled(extensions))\n\t\t]);\n\n\t}\n\n\tprivate showRecommendationsNotification(extensions: IExtension[], message: string, searchValue: string, donotShowAgainLabel: string, source: RecommendationSource,\n\t\t{ onDidInstallRecommendedExtensions, onDidShowRecommendedExtensions, onDidCancelRecommendedExtensions, onDidNeverShowRecommendedExtensionsAgain }: RecommendationsNotificationActions): CancelablePromise<RecommendationsNotificationResult> {\n\t\treturn createCancelablePromise<RecommendationsNotificationResult>(async token => {\n\t\t\tlet accepted = false;\n\t\t\tconst choices: (IPromptChoice | IPromptChoiceWithMenu)[] = [];\n\t\t\tconst installExtensions = async (isMachineScoped: boolean) => {\n\t\t\t\tthis.extensionsWorkbenchService.openSearch(searchValue);\n\t\t\t\tonDidInstallRecommendedExtensions(extensions);\n\t\t\t\tconst galleryExtensions: IGalleryExtension[] = [], resourceExtensions: IExtension[] = [];\n\t\t\t\tfor (const extension of extensions) {\n\t\t\t\t\tif (extension.gallery) {\n\t\t\t\t\t\tgalleryExtensions.push(extension.gallery);\n\t\t\t\t\t} else if (extension.resourceExtension) {\n\t\t\t\t\t\tresourceExtensions.push(extension);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tawait Promises.settled<any>([\n\t\t\t\t\tPromises.settled(extensions.map(extension => this.extensionsWorkbenchService.open(extension, { pinned: true }))),\n\t\t\t\t\tgalleryExtensions.length ? this.extensionManagementService.installGalleryExtensions(galleryExtensions.map(e => ({ extension: e, options: { isMachineScoped } }))) : Promise.resolve(),\n\t\t\t\t\tresourceExtensions.length ? Promise.allSettled(resourceExtensions.map(r => this.extensionsWorkbenchService.install(r))) : Promise.resolve()\n\t\t\t\t]);\n\t\t\t};\n\t\t\tchoices.push({\n\t\t\t\tlabel: localize('install', \"Install\"),\n\t\t\t\trun: () => installExtensions(false),\n\t\t\t\tmenu: this.userDataSyncEnablementService.isEnabled() && this.userDataSyncEnablementService.isResourceEnabled(SyncResource.Extensions) ? [{\n\t\t\t\t\tlabel: localize('install and do no sync', \"Install (Do not sync)\"),\n\t\t\t\t\trun: () => installExtensions(true)\n\t\t\t\t}] : undefined,\n\t\t\t});\n\t\t\tchoices.push(...[{\n\t\t\t\tlabel: localize('show recommendations', \"Show Recommendations\"),\n\t\t\t\trun: async () => {\n\t\t\t\t\tonDidShowRecommendedExtensions(extensions);\n\t\t\t\t\tfor (const extension of extensions) {\n\t\t\t\t\t\tthis.extensionsWorkbenchService.open(extension, { pinned: true });\n\t\t\t\t\t}\n\t\t\t\t\tthis.extensionsWorkbenchService.openSearch(searchValue);\n\t\t\t\t}\n\t\t\t}, {\n\t\t\t\tlabel: donotShowAgainLabel,\n\t\t\t\tisSecondary: true,\n\t\t\t\trun: () => {\n\t\t\t\t\tonDidNeverShowRecommendedExtensionsAgain(extensions);\n\t\t\t\t}\n\t\t\t}]);\n\t\t\ttry {\n\t\t\t\taccepted = await this.doShowRecommendationsNotification(Severity.Info, message, choices, source, token);\n\t\t\t} catch (error) {\n\t\t\t\tif (!isCancellationError(error)) {\n\t\t\t\t\tthrow error;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (accepted) {\n\t\t\t\treturn RecommendationsNotificationResult.Accepted;\n\t\t\t} else {\n\t\t\t\tonDidCancelRecommendedExtensions(extensions);\n\t\t\t\treturn RecommendationsNotificationResult.Cancelled;\n\t\t\t}\n\n\t\t});\n\t}\n\n\tprivate waitUntilRecommendationsAreInstalled(extensions: IExtension[]): CancelablePromise<RecommendationsNotificationResult.Accepted> {\n\t\tconst installedExtensions: string[] = [];\n\t\tconst disposables = new DisposableStore();\n\t\treturn createCancelablePromise(async token => {\n\t\t\tdisposables.add(token.onCancellationRequested(e => disposables.dispose()));\n\t\t\treturn new Promise<RecommendationsNotificationResult.Accepted>((c, e) => {\n\t\t\t\tdisposables.add(this.extensionManagementService.onInstallExtension(e => {\n\t\t\t\t\tinstalledExtensions.push(e.identifier.id.toLowerCase());\n\t\t\t\t\tif (extensions.every(e => installedExtensions.includes(e.identifier.id.toLowerCase()))) {\n\t\t\t\t\t\tc(RecommendationsNotificationResult.Accepted);\n\t\t\t\t\t}\n\t\t\t\t}));\n\t\t\t});\n\t\t});\n\t}\n\n\t/**\n\t * Show recommendations in Queue\n\t * At any time only one recommendation is shown\n\t * If a new recommendation comes in\n\t * \t\t=> If no recommendation is visible, show it immediately\n\t *\t\t=> Otherwise, add to the pending queue\n\t * \t\t\t=> If it is not exe based and has higher or same priority as current, hide the current notification after showing it for 3s.\n\t * \t\t\t=> Otherwise wait until the current notification is hidden.\n\t */\n\tprivate async doShowRecommendationsNotification(severity: Severity, message: string, choices: IPromptChoice[], source: RecommendationSource, token: CancellationToken): Promise<boolean> {\n\t\tconst disposables = new DisposableStore();\n\t\ttry {\n\t\t\tconst recommendationsNotification = disposables.add(new RecommendationsNotification(severity, message, choices, this.notificationService));\n\t\t\tdisposables.add(Event.once(Event.filter(recommendationsNotification.onDidChangeVisibility, e => !e))(() => this.showNextNotification()));\n\t\t\tif (this.visibleNotification) {\n\t\t\t\tconst index = this.pendingNotificaitons.length;\n\t\t\t\tdisposables.add(token.onCancellationRequested(() => this.pendingNotificaitons.splice(index, 1)));\n\t\t\t\tthis.pendingNotificaitons.push({ recommendationsNotification, source, token });\n\t\t\t\tif (source !== RecommendationSource.EXE && source <= this.visibleNotification.source) {\n\t\t\t\t\tthis.hideVisibleNotification(3000);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthis.visibleNotification = { recommendationsNotification, source, from: Date.now() };\n\t\t\t\trecommendationsNotification.show();\n\t\t\t}\n\t\t\tawait raceCancellation(new Promise(c => disposables.add(Event.once(recommendationsNotification.onDidClose)(c))), token);\n\t\t\treturn !recommendationsNotification.isCancelled();\n\t\t} finally {\n\t\t\tdisposables.dispose();\n\t\t}\n\t}\n\n\tprivate showNextNotification(): void {\n\t\tconst index = this.getNextPendingNotificationIndex();\n\t\tconst [nextNotificaiton] = index > -1 ? this.pendingNotificaitons.splice(index, 1) : [];\n\n\t\t// Show the next notification after a delay of 500ms (after the current notification is dismissed)\n\t\ttimeout(nextNotificaiton ? 500 : 0)\n\t\t\t.then(() => {\n\t\t\t\tthis.unsetVisibileNotification();\n\t\t\t\tif (nextNotificaiton) {\n\t\t\t\t\tthis.visibleNotification = { recommendationsNotification: nextNotificaiton.recommendationsNotification, source: nextNotificaiton.source, from: Date.now() };\n\t\t\t\t\tnextNotificaiton.recommendationsNotification.show();\n\t\t\t\t}\n\t\t\t});\n\t}\n\n\t/**\n\t * Return the recent high priroity pending notification\n\t */\n\tprivate getNextPendingNotificationIndex(): number {\n\t\tlet index = this.pendingNotificaitons.length - 1;\n\t\tif (this.pendingNotificaitons.length) {\n\t\t\tfor (let i = 0; i < this.pendingNotificaitons.length; i++) {\n\t\t\t\tif (this.pendingNotificaitons[i].source <= this.pendingNotificaitons[index].source) {\n\t\t\t\t\tindex = i;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn index;\n\t}\n\n\tprivate hideVisibleNotification(timeInMillis: number): void {\n\t\tif (this.visibleNotification && !this.hideVisibleNotificationPromise) {\n\t\t\tconst visibleNotification = this.visibleNotification;\n\t\t\tthis.hideVisibleNotificationPromise = timeout(Math.max(timeInMillis - (Date.now() - visibleNotification.from), 0));\n\t\t\tthis.hideVisibleNotificationPromise.then(() => visibleNotification.recommendationsNotification.hide());\n\t\t}\n\t}\n\n\tprivate unsetVisibileNotification(): void {\n\t\tthis.hideVisibleNotificationPromise?.cancel();\n\t\tthis.hideVisibleNotificationPromise = undefined;\n\t\tthis.visibleNotification = undefined;\n\t}\n\n\tprivate async getInstallableExtensions(recommendations: Array<string | URI>): Promise<IExtension[]> {\n\t\tconst result: IExtension[] = [];\n\t\tif (recommendations.length) {\n\t\t\tconst galleryExtensions: string[] = [];\n\t\t\tconst resourceExtensions: URI[] = [];\n\t\t\tfor (const recommendation of recommendations) {\n\t\t\t\tif (typeof recommendation === 'string') {\n\t\t\t\t\tgalleryExtensions.push(recommendation);\n\t\t\t\t} else {\n\t\t\t\t\tresourceExtensions.push(recommendation);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (galleryExtensions.length) {\n\t\t\t\tconst extensions = await this.extensionsWorkbenchService.getExtensions(galleryExtensions.map(id => ({ id })), { source: 'install-recommendations' }, CancellationToken.None);\n\t\t\t\tfor (const extension of extensions) {\n\t\t\t\t\tif (extension.gallery && (await this.extensionManagementService.canInstall(extension.gallery))) {\n\t\t\t\t\t\tresult.push(extension);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (resourceExtensions.length) {\n\t\t\t\tconst extensions = await this.extensionsWorkbenchService.getResourceExtensions(resourceExtensions, true);\n\t\t\t\tfor (const extension of extensions) {\n\t\t\t\t\tif (await this.extensionsWorkbenchService.canInstall(extension)) {\n\t\t\t\t\t\tresult.push(extension);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n\n\tprivate addToImportantRecommendationsIgnore(id: string) {\n\t\tconst importantRecommendationsIgnoreList = [...this.ignoredRecommendations];\n\t\tif (!importantRecommendationsIgnoreList.includes(id.toLowerCase())) {\n\t\t\timportantRecommendationsIgnoreList.push(id.toLowerCase());\n\t\t\tthis.storageService.store(ignoreImportantExtensionRecommendationStorageKey, JSON.stringify(importantRecommendationsIgnoreList), StorageScope.PROFILE, StorageTarget.USER);\n\t\t}\n\t}\n\n\tprivate setIgnoreRecommendationsConfig(configVal: boolean) {\n\t\tthis.configurationService.updateValue('extensions.ignoreRecommendations', configVal);\n\t}\n\n\tprivate _registerP<T>(o: CancelablePromise<T>): CancelablePromise<T> {\n\t\tthis._register(toDisposable(() => o.cancel()));\n\t\treturn o;\n\t}\n}\n"],
  "mappings": "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",
  "names": ["extensions", "e"]
}
