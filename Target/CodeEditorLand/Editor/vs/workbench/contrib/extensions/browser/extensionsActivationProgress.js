var p=Object.defineProperty;var f=Object.getOwnPropertyDescriptor;var a=(s,i,t,r)=>{for(var e=r>1?void 0:r?f(i,t):i,o=s.length-1,n;o>=0;o--)(n=s[o])&&(e=(r?n(i,t,e):n(e))||e);return r&&e&&p(i,t,e),e},l=(s,i)=>(t,r)=>i(t,r,s);import{DeferredPromise as d,timeout as v}from"../../../../../vs/base/common/async.js";import{CancellationToken as I}from"../../../../../vs/base/common/cancellation.js";import"../../../../../vs/base/common/lifecycle.js";import{localize as u}from"../../../../../vs/nls.js";import{ILogService as b}from"../../../../../vs/platform/log/common/log.js";import{IProgressService as S,ProgressLocation as h}from"../../../../../vs/platform/progress/common/progress.js";import"../../../../../vs/workbench/common/contributions.js";import{IExtensionService as y}from"../../../../../vs/workbench/services/extensions/common/extensions.js";let m=class{_listener;constructor(i,t,r){const e={location:h.Window,title:u("activation","Activating Extensions...")};let o,n=0;this._listener=i.onWillActivateByEvent(c=>{r.trace("onWillActivateByEvent: ",c.event),o||(o=new d,t.withProgress(e,W=>o.p)),n++,Promise.race([c.activation,v(5e3,I.None)]).finally(()=>{--n===0&&(o.complete(void 0),o=void 0)})})}dispose(){this._listener.dispose()}};m=a([l(0,y),l(1,S),l(2,b)],m);export{m as ExtensionActivationProgress};
