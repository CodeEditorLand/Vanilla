{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/extensions/browser/workspaceRecommendations.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { distinct, equals } from \"../../../../base/common/arrays.js\";\nimport { RunOnceScheduler } from \"../../../../base/common/async.js\";\nimport { Emitter } from \"../../../../base/common/event.js\";\nimport type { URI } from \"../../../../base/common/uri.js\";\nimport { localize } from \"../../../../nls.js\";\nimport { EXTENSION_IDENTIFIER_PATTERN } from \"../../../../platform/extensionManagement/common/extensionManagement.js\";\nimport {\n\tFileChangeType,\n\tIFileService,\n} from \"../../../../platform/files/common/files.js\";\nimport { INotificationService } from \"../../../../platform/notification/common/notification.js\";\nimport { IUriIdentityService } from \"../../../../platform/uriIdentity/common/uriIdentity.js\";\nimport { IWorkspaceContextService } from \"../../../../platform/workspace/common/workspace.js\";\nimport { IWorkbenchExtensionManagementService } from \"../../../services/extensionManagement/common/extensionManagement.js\";\nimport { ExtensionRecommendationReason } from \"../../../services/extensionRecommendations/common/extensionRecommendations.js\";\nimport {\n\ttype IExtensionsConfigContent,\n\tIWorkspaceExtensionsConfigService,\n} from \"../../../services/extensionRecommendations/common/workspaceExtensionsConfig.js\";\nimport {\n\ttype ExtensionRecommendation,\n\tExtensionRecommendations,\n} from \"./extensionRecommendations.js\";\n\nconst WORKSPACE_EXTENSIONS_FOLDER = \".vscode/extensions\";\n\nexport class WorkspaceRecommendations extends ExtensionRecommendations {\n\tprivate _recommendations: ExtensionRecommendation[] = [];\n\tget recommendations(): ReadonlyArray<ExtensionRecommendation> {\n\t\treturn this._recommendations;\n\t}\n\n\tprivate _onDidChangeRecommendations = this._register(new Emitter<void>());\n\treadonly onDidChangeRecommendations =\n\t\tthis._onDidChangeRecommendations.event;\n\n\tprivate _ignoredRecommendations: string[] = [];\n\tget ignoredRecommendations(): ReadonlyArray<string> {\n\t\treturn this._ignoredRecommendations;\n\t}\n\n\tprivate workspaceExtensions: URI[] = [];\n\tprivate readonly onDidChangeWorkspaceExtensionsScheduler: RunOnceScheduler;\n\n\tconstructor(\n\t\t@IWorkspaceExtensionsConfigService private readonly workspaceExtensionsConfigService: IWorkspaceExtensionsConfigService,\n\t\t@IWorkspaceContextService private readonly contextService: IWorkspaceContextService,\n\t\t@IUriIdentityService private readonly uriIdentityService: IUriIdentityService,\n\t\t@IFileService private readonly fileService: IFileService,\n\t\t@IWorkbenchExtensionManagementService private readonly workbenchExtensionManagementService: IWorkbenchExtensionManagementService,\n\t\t@INotificationService private readonly notificationService: INotificationService,\n\t) {\n\t\tsuper();\n\t\tthis.onDidChangeWorkspaceExtensionsScheduler = this._register(new RunOnceScheduler(() => this.onDidChangeWorkspaceExtensionsFolders(), 1000));\n\t}\n\n\tprotected async doActivate(): Promise<void> {\n\t\tthis.workspaceExtensions = await this.fetchWorkspaceExtensions();\n\t\tawait this.fetch();\n\n\t\tthis._register(\n\t\t\tthis.workspaceExtensionsConfigService.onDidChangeExtensionsConfigs(\n\t\t\t\t() => this.onDidChangeExtensionsConfigs(),\n\t\t\t),\n\t\t);\n\t\tfor (const folder of this.contextService.getWorkspace().folders) {\n\t\t\tthis._register(\n\t\t\t\tthis.fileService.watch(\n\t\t\t\t\tthis.uriIdentityService.extUri.joinPath(\n\t\t\t\t\t\tfolder.uri,\n\t\t\t\t\t\tWORKSPACE_EXTENSIONS_FOLDER,\n\t\t\t\t\t),\n\t\t\t\t),\n\t\t\t);\n\t\t}\n\n\t\tthis._register(\n\t\t\tthis.contextService.onDidChangeWorkspaceFolders(() =>\n\t\t\t\tthis.onDidChangeWorkspaceExtensionsScheduler.schedule(),\n\t\t\t),\n\t\t);\n\n\t\tthis._register(\n\t\t\tthis.fileService.onDidFilesChange((e) => {\n\t\t\t\tif (\n\t\t\t\t\tthis.contextService\n\t\t\t\t\t\t.getWorkspace()\n\t\t\t\t\t\t.folders.some((folder) =>\n\t\t\t\t\t\t\te.affects(\n\t\t\t\t\t\t\t\tthis.uriIdentityService.extUri.joinPath(\n\t\t\t\t\t\t\t\t\tfolder.uri,\n\t\t\t\t\t\t\t\t\tWORKSPACE_EXTENSIONS_FOLDER,\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\tFileChangeType.ADDED,\n\t\t\t\t\t\t\t\tFileChangeType.DELETED,\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t)\n\t\t\t\t) {\n\t\t\t\t\tthis.onDidChangeWorkspaceExtensionsScheduler.schedule();\n\t\t\t\t}\n\t\t\t}),\n\t\t);\n\t}\n\n\tprivate async onDidChangeWorkspaceExtensionsFolders(): Promise<void> {\n\t\tconst existing = this.workspaceExtensions;\n\t\tthis.workspaceExtensions = await this.fetchWorkspaceExtensions();\n\t\tif (\n\t\t\t!equals(existing, this.workspaceExtensions, (a, b) =>\n\t\t\t\tthis.uriIdentityService.extUri.isEqual(a, b),\n\t\t\t)\n\t\t) {\n\t\t\tthis.onDidChangeExtensionsConfigs();\n\t\t}\n\t}\n\n\tprivate async fetchWorkspaceExtensions(): Promise<URI[]> {\n\t\tconst workspaceExtensions: URI[] = [];\n\t\tfor (const workspaceFolder of this.contextService.getWorkspace()\n\t\t\t.folders) {\n\t\t\tconst extensionsLocaiton = this.uriIdentityService.extUri.joinPath(\n\t\t\t\tworkspaceFolder.uri,\n\t\t\t\tWORKSPACE_EXTENSIONS_FOLDER,\n\t\t\t);\n\t\t\ttry {\n\t\t\t\tconst stat = await this.fileService.resolve(extensionsLocaiton);\n\t\t\t\tfor (const extension of stat.children ?? []) {\n\t\t\t\t\tif (!extension.isDirectory) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\tworkspaceExtensions.push(extension.resource);\n\t\t\t\t}\n\t\t\t} catch (error) {\n\t\t\t\t// ignore\n\t\t\t}\n\t\t}\n\t\tif (workspaceExtensions.length) {\n\t\t\tconst resourceExtensions =\n\t\t\t\tawait this.workbenchExtensionManagementService.getExtensions(\n\t\t\t\t\tworkspaceExtensions,\n\t\t\t\t);\n\t\t\treturn resourceExtensions.map((extension) => extension.location);\n\t\t}\n\t\treturn [];\n\t}\n\n\t/**\n\t * Parse all extensions.json files, fetch workspace recommendations, filter out invalid and unwanted ones\n\t */\n\tprivate async fetch(): Promise<void> {\n\t\tconst extensionsConfigs =\n\t\t\tawait this.workspaceExtensionsConfigService.getExtensionsConfigs();\n\n\t\tconst { invalidRecommendations, message } =\n\t\t\tawait this.validateExtensions(extensionsConfigs);\n\t\tif (invalidRecommendations.length) {\n\t\t\tthis.notificationService.warn(\n\t\t\t\t`The ${invalidRecommendations.length} extension(s) below, in workspace recommendations have issues:\\n${message}`,\n\t\t\t);\n\t\t}\n\n\t\tthis._recommendations = [];\n\t\tthis._ignoredRecommendations = [];\n\n\t\tfor (const extensionsConfig of extensionsConfigs) {\n\t\t\tif (extensionsConfig.unwantedRecommendations) {\n\t\t\t\tfor (const unwantedRecommendation of extensionsConfig.unwantedRecommendations) {\n\t\t\t\t\tif (\n\t\t\t\t\t\tinvalidRecommendations.indexOf(\n\t\t\t\t\t\t\tunwantedRecommendation,\n\t\t\t\t\t\t) === -1\n\t\t\t\t\t) {\n\t\t\t\t\t\tthis._ignoredRecommendations.push(\n\t\t\t\t\t\t\tunwantedRecommendation,\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (extensionsConfig.recommendations) {\n\t\t\t\tfor (const extensionId of extensionsConfig.recommendations) {\n\t\t\t\t\tif (invalidRecommendations.indexOf(extensionId) === -1) {\n\t\t\t\t\t\tthis._recommendations.push({\n\t\t\t\t\t\t\textension: extensionId,\n\t\t\t\t\t\t\treason: {\n\t\t\t\t\t\t\t\treasonId:\n\t\t\t\t\t\t\t\t\tExtensionRecommendationReason.Workspace,\n\t\t\t\t\t\t\t\treasonText: localize(\n\t\t\t\t\t\t\t\t\t\"workspaceRecommendation\",\n\t\t\t\t\t\t\t\t\t\"This extension is recommended by users of the current workspace.\",\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tfor (const extension of this.workspaceExtensions) {\n\t\t\tthis._recommendations.push({\n\t\t\t\textension,\n\t\t\t\treason: {\n\t\t\t\t\treasonId: ExtensionRecommendationReason.Workspace,\n\t\t\t\t\treasonText: localize(\n\t\t\t\t\t\t\"workspaceRecommendation\",\n\t\t\t\t\t\t\"This extension is recommended by users of the current workspace.\",\n\t\t\t\t\t),\n\t\t\t\t},\n\t\t\t});\n\t\t}\n\t}\n\n\tprivate async validateExtensions(\n\t\tcontents: IExtensionsConfigContent[],\n\t): Promise<{\n\t\tvalidRecommendations: string[];\n\t\tinvalidRecommendations: string[];\n\t\tmessage: string;\n\t}> {\n\t\tconst validExtensions: string[] = [];\n\t\tconst invalidExtensions: string[] = [];\n\t\tlet message = \"\";\n\n\t\tconst allRecommendations = distinct(\n\t\t\tcontents.flatMap(({ recommendations }) => recommendations || []),\n\t\t);\n\t\tconst regEx = new RegExp(EXTENSION_IDENTIFIER_PATTERN);\n\t\tfor (const extensionId of allRecommendations) {\n\t\t\tif (regEx.test(extensionId)) {\n\t\t\t\tvalidExtensions.push(extensionId);\n\t\t\t} else {\n\t\t\t\tinvalidExtensions.push(extensionId);\n\t\t\t\tmessage += `${extensionId} (bad format) Expected: <provider>.<name>\\n`;\n\t\t\t}\n\t\t}\n\n\t\treturn {\n\t\t\tvalidRecommendations: validExtensions,\n\t\t\tinvalidRecommendations: invalidExtensions,\n\t\t\tmessage,\n\t\t};\n\t}\n\n\tprivate async onDidChangeExtensionsConfigs(): Promise<void> {\n\t\tawait this.fetch();\n\t\tthis._onDidChangeRecommendations.fire();\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
