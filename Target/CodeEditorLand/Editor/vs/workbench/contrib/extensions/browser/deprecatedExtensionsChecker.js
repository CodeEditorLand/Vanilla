var g=Object.defineProperty;var x=Object.getOwnPropertyDescriptor;var m=(a,r,i,n)=>{for(var t=n>1?void 0:n?x(r,i):r,e=a.length-1,o;e>=0;e--)(o=a[e])&&(t=(n?o(r,i,t):o(t))||t);return n&&t&&g(r,i,t),t},s=(a,r)=>(i,n)=>r(i,n,a);import{IExtensionsWorkbenchService as E}from"../common/extensions.js";import"../../../common/contributions.js";import{INotificationService as I,Severity as b}from"../../../../platform/notification/common/notification.js";import{IStorageService as u,StorageScope as c,StorageTarget as v}from"../../../../platform/storage/common/storage.js";import{localize as f}from"../../../../nls.js";import{IInstantiationService as y}from"../../../../platform/instantiation/common/instantiation.js";import{SearchExtensionsAction as N}from"./extensionsActions.js";import{distinct as D}from"../../../../base/common/arrays.js";import{Disposable as w}from"../../../../base/common/lifecycle.js";import{IExtensionManagementService as W}from"../../../../platform/extensionManagement/common/extensionManagement.js";import{areSameExtensions as k}from"../../../../platform/extensionManagement/common/extensionManagementUtil.js";import{IWorkbenchExtensionEnablementService as L}from"../../../services/extensionManagement/common/extensionManagement.js";let d=class extends w{constructor(i,n,t,e,o,A){super();this.extensionsWorkbenchService=i;this.extensionEnablementService=t;this.storageService=e;this.notificationService=o;this.instantiationService=A;this.checkForDeprecatedExtensions(),this._register(n.onDidInstallExtensions(S=>{const p=[];for(const{local:l}of S)l&&i.local.find(h=>k(h.identifier,l.identifier))?.deprecationInfo&&p.push(l.identifier.id.toLowerCase());p.length&&this.setNotifiedDeprecatedExtensions(p)}))}async checkForDeprecatedExtensions(){if(this.storageService.getBoolean("extensionsAssistant/doNotCheckDeprecated",c.PROFILE,!1))return;const i=await this.extensionsWorkbenchService.queryLocal(),n=this.getNotifiedDeprecatedExtensions(),t=i.filter(e=>!!e.deprecationInfo&&e.local&&this.extensionEnablementService.isEnabled(e.local)).filter(e=>!n.includes(e.identifier.id.toLowerCase()));t.length&&this.notificationService.prompt(b.Warning,f("deprecated extensions","You have deprecated extensions installed. We recommend to review them and migrate to alternatives."),[{label:f("showDeprecated","Show Deprecated Extensions"),run:async()=>{this.setNotifiedDeprecatedExtensions(t.map(o=>o.identifier.id.toLowerCase()));const e=this.instantiationService.createInstance(N,t.map(o=>`@id:${o.identifier.id}`).join(" "));try{await e.run()}finally{e.dispose()}}},{label:f("neverShowAgain","Don't Show Again"),isSecondary:!0,run:()=>this.storageService.store("extensionsAssistant/doNotCheckDeprecated",!0,c.PROFILE,v.USER)}])}getNotifiedDeprecatedExtensions(){return JSON.parse(this.storageService.get("extensionsAssistant/deprecated",c.PROFILE,"[]"))}setNotifiedDeprecatedExtensions(i){this.storageService.store("extensionsAssistant/deprecated",JSON.stringify(D([...this.getNotifiedDeprecatedExtensions(),...i])),c.PROFILE,v.USER)}};d=m([s(0,E),s(1,W),s(2,L),s(3,u),s(4,I),s(5,y)],d);export{d as DeprecatedExtensionsChecker};
