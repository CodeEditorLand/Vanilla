{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/extensions/browser/extensionRecommendationsService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Disposable, toDisposable } from '../../../../base/common/lifecycle.js';\nimport { IExtensionManagementService, IExtensionGalleryService, InstallOperation, InstallExtensionResult } from '../../../../platform/extensionManagement/common/extensionManagement.js';\nimport { IExtensionRecommendationsService, ExtensionRecommendationReason, IExtensionIgnoredRecommendationsService } from '../../../services/extensionRecommendations/common/extensionRecommendations.js';\nimport { IInstantiationService } from '../../../../platform/instantiation/common/instantiation.js';\nimport { ITelemetryService } from '../../../../platform/telemetry/common/telemetry.js';\nimport { shuffle } from '../../../../base/common/arrays.js';\nimport { Emitter, Event } from '../../../../base/common/event.js';\nimport { IEnvironmentService } from '../../../../platform/environment/common/environment.js';\nimport { LifecyclePhase, ILifecycleService } from '../../../services/lifecycle/common/lifecycle.js';\nimport { ExeBasedRecommendations } from './exeBasedRecommendations.js';\nimport { WorkspaceRecommendations } from './workspaceRecommendations.js';\nimport { FileBasedRecommendations } from './fileBasedRecommendations.js';\nimport { KeymapRecommendations } from './keymapRecommendations.js';\nimport { LanguageRecommendations } from './languageRecommendations.js';\nimport { ExtensionRecommendation } from './extensionRecommendations.js';\nimport { ConfigBasedRecommendations } from './configBasedRecommendations.js';\nimport { IExtensionRecommendationNotificationService } from '../../../../platform/extensionRecommendations/common/extensionRecommendations.js';\nimport { CancelablePromise, timeout } from '../../../../base/common/async.js';\nimport { URI } from '../../../../base/common/uri.js';\nimport { WebRecommendations } from './webRecommendations.js';\nimport { IExtensionsWorkbenchService } from '../common/extensions.js';\nimport { areSameExtensions } from '../../../../platform/extensionManagement/common/extensionManagementUtil.js';\nimport { RemoteRecommendations } from './remoteRecommendations.js';\nimport { IRemoteExtensionsScannerService } from '../../../../platform/remote/common/remoteExtensionsScanner.js';\nimport { IUserDataInitializationService } from '../../../services/userData/browser/userDataInit.js';\nimport { isString } from '../../../../base/common/types.js';\n\ntype IgnoreRecommendationClassification = {\n\towner: 'sandy081';\n\tcomment: 'Report when a recommendation is ignored';\n\trecommendationReason: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'Reason why extension is recommended' };\n\textensionId: { classification: 'PublicNonPersonalData'; purpose: 'FeatureInsight'; comment: 'Id of the extension recommendation that is being ignored' };\n};\n\nexport class ExtensionRecommendationsService extends Disposable implements IExtensionRecommendationsService {\n\n\tdeclare readonly _serviceBrand: undefined;\n\n\t// Recommendations\n\tprivate readonly fileBasedRecommendations: FileBasedRecommendations;\n\tprivate readonly workspaceRecommendations: WorkspaceRecommendations;\n\tprivate readonly configBasedRecommendations: ConfigBasedRecommendations;\n\tprivate readonly exeBasedRecommendations: ExeBasedRecommendations;\n\tprivate readonly keymapRecommendations: KeymapRecommendations;\n\tprivate readonly webRecommendations: WebRecommendations;\n\tprivate readonly languageRecommendations: LanguageRecommendations;\n\tprivate readonly remoteRecommendations: RemoteRecommendations;\n\n\tpublic readonly activationPromise: Promise<void>;\n\tprivate sessionSeed: number;\n\n\tprivate _onDidChangeRecommendations = this._register(new Emitter<void>());\n\treadonly onDidChangeRecommendations = this._onDidChangeRecommendations.event;\n\n\tconstructor(\n\t\t@IInstantiationService instantiationService: IInstantiationService,\n\t\t@ILifecycleService private readonly lifecycleService: ILifecycleService,\n\t\t@IExtensionGalleryService private readonly galleryService: IExtensionGalleryService,\n\t\t@ITelemetryService private readonly telemetryService: ITelemetryService,\n\t\t@IEnvironmentService private readonly environmentService: IEnvironmentService,\n\t\t@IExtensionManagementService private readonly extensionManagementService: IExtensionManagementService,\n\t\t@IExtensionIgnoredRecommendationsService private readonly extensionRecommendationsManagementService: IExtensionIgnoredRecommendationsService,\n\t\t@IExtensionRecommendationNotificationService private readonly extensionRecommendationNotificationService: IExtensionRecommendationNotificationService,\n\t\t@IExtensionsWorkbenchService private readonly extensionsWorkbenchService: IExtensionsWorkbenchService,\n\t\t@IRemoteExtensionsScannerService private readonly remoteExtensionsScannerService: IRemoteExtensionsScannerService,\n\t\t@IUserDataInitializationService private readonly userDataInitializationService: IUserDataInitializationService,\n\t) {\n\t\tsuper();\n\n\t\tthis.workspaceRecommendations = this._register(instantiationService.createInstance(WorkspaceRecommendations));\n\t\tthis.fileBasedRecommendations = this._register(instantiationService.createInstance(FileBasedRecommendations));\n\t\tthis.configBasedRecommendations = this._register(instantiationService.createInstance(ConfigBasedRecommendations));\n\t\tthis.exeBasedRecommendations = this._register(instantiationService.createInstance(ExeBasedRecommendations));\n\t\tthis.keymapRecommendations = this._register(instantiationService.createInstance(KeymapRecommendations));\n\t\tthis.webRecommendations = this._register(instantiationService.createInstance(WebRecommendations));\n\t\tthis.languageRecommendations = this._register(instantiationService.createInstance(LanguageRecommendations));\n\t\tthis.remoteRecommendations = this._register(instantiationService.createInstance(RemoteRecommendations));\n\n\t\tif (!this.isEnabled()) {\n\t\t\tthis.sessionSeed = 0;\n\t\t\tthis.activationPromise = Promise.resolve();\n\t\t\treturn;\n\t\t}\n\n\t\tthis.sessionSeed = +new Date();\n\n\t\t// Activation\n\t\tthis.activationPromise = this.activate();\n\n\t\tthis._register(this.extensionManagementService.onDidInstallExtensions(e => this.onDidInstallExtensions(e)));\n\t}\n\n\tprivate async activate(): Promise<void> {\n\t\ttry {\n\t\t\tawait Promise.allSettled([\n\t\t\t\tthis.remoteExtensionsScannerService.whenExtensionsReady(),\n\t\t\t\tthis.userDataInitializationService.whenInitializationFinished(),\n\t\t\t\tthis.lifecycleService.when(LifecyclePhase.Restored)]);\n\t\t} catch (error) { /* ignore */ }\n\n\t\t// activate all recommendations\n\t\tawait Promise.all([\n\t\t\tthis.workspaceRecommendations.activate(),\n\t\t\tthis.configBasedRecommendations.activate(),\n\t\t\tthis.fileBasedRecommendations.activate(),\n\t\t\tthis.keymapRecommendations.activate(),\n\t\t\tthis.languageRecommendations.activate(),\n\t\t\tthis.webRecommendations.activate(),\n\t\t\tthis.remoteRecommendations.activate()\n\t\t]);\n\n\t\tthis._register(Event.any(this.workspaceRecommendations.onDidChangeRecommendations, this.configBasedRecommendations.onDidChangeRecommendations, this.extensionRecommendationsManagementService.onDidChangeIgnoredRecommendations)(() => this._onDidChangeRecommendations.fire()));\n\t\tthis._register(this.extensionRecommendationsManagementService.onDidChangeGlobalIgnoredRecommendation(({ extensionId, isRecommended }) => {\n\t\t\tif (!isRecommended) {\n\t\t\t\tconst reason = this.getAllRecommendationsWithReason()[extensionId];\n\t\t\t\tif (reason && reason.reasonId) {\n\t\t\t\t\tthis.telemetryService.publicLog2<{ extensionId: string; recommendationReason: ExtensionRecommendationReason }, IgnoreRecommendationClassification>('extensionsRecommendations:ignoreRecommendation', { extensionId, recommendationReason: reason.reasonId });\n\t\t\t\t}\n\t\t\t}\n\t\t}));\n\n\t\tthis.promptWorkspaceRecommendations();\n\t}\n\n\tprivate isEnabled(): boolean {\n\t\treturn this.galleryService.isEnabled() && !this.environmentService.isExtensionDevelopment;\n\t}\n\n\tprivate async activateProactiveRecommendations(): Promise<void> {\n\t\tawait Promise.all([this.exeBasedRecommendations.activate(), this.configBasedRecommendations.activate()]);\n\t}\n\n\tgetAllRecommendationsWithReason(): { [id: string]: { reasonId: ExtensionRecommendationReason; reasonText: string } } {\n\t\t/* Activate proactive recommendations */\n\t\tthis.activateProactiveRecommendations();\n\n\t\tconst output: { [id: string]: { reasonId: ExtensionRecommendationReason; reasonText: string } } = Object.create(null);\n\n\t\tconst allRecommendations = [\n\t\t\t...this.configBasedRecommendations.recommendations,\n\t\t\t...this.exeBasedRecommendations.recommendations,\n\t\t\t...this.fileBasedRecommendations.recommendations,\n\t\t\t...this.workspaceRecommendations.recommendations,\n\t\t\t...this.keymapRecommendations.recommendations,\n\t\t\t...this.languageRecommendations.recommendations,\n\t\t\t...this.webRecommendations.recommendations,\n\t\t];\n\n\t\tfor (const { extension, reason } of allRecommendations) {\n\t\t\tif (isString(extension) && this.isExtensionAllowedToBeRecommended(extension)) {\n\t\t\t\toutput[extension.toLowerCase()] = reason;\n\t\t\t}\n\t\t}\n\n\t\treturn output;\n\t}\n\n\tasync getConfigBasedRecommendations(): Promise<{ important: string[]; others: string[] }> {\n\t\tawait this.configBasedRecommendations.activate();\n\t\treturn {\n\t\t\timportant: this.toExtensionIds(this.configBasedRecommendations.importantRecommendations),\n\t\t\tothers: this.toExtensionIds(this.configBasedRecommendations.otherRecommendations)\n\t\t};\n\t}\n\n\tasync getOtherRecommendations(): Promise<string[]> {\n\t\tawait this.activationPromise;\n\t\tawait this.activateProactiveRecommendations();\n\n\t\tconst recommendations = [\n\t\t\t...this.configBasedRecommendations.otherRecommendations,\n\t\t\t...this.exeBasedRecommendations.otherRecommendations,\n\t\t\t...this.webRecommendations.recommendations\n\t\t];\n\n\t\tconst extensionIds = this.toExtensionIds(recommendations);\n\t\tshuffle(extensionIds, this.sessionSeed);\n\t\treturn extensionIds;\n\t}\n\n\tasync getImportantRecommendations(): Promise<string[]> {\n\t\tawait this.activateProactiveRecommendations();\n\n\t\tconst recommendations = [\n\t\t\t...this.fileBasedRecommendations.importantRecommendations,\n\t\t\t...this.configBasedRecommendations.importantRecommendations,\n\t\t\t...this.exeBasedRecommendations.importantRecommendations,\n\t\t];\n\n\t\tconst extensionIds = this.toExtensionIds(recommendations);\n\t\tshuffle(extensionIds, this.sessionSeed);\n\t\treturn extensionIds;\n\t}\n\n\tgetKeymapRecommendations(): string[] {\n\t\treturn this.toExtensionIds(this.keymapRecommendations.recommendations);\n\t}\n\n\tgetLanguageRecommendations(): string[] {\n\t\treturn this.toExtensionIds(this.languageRecommendations.recommendations);\n\t}\n\n\tgetRemoteRecommendations(): string[] {\n\t\treturn this.toExtensionIds(this.remoteRecommendations.recommendations);\n\t}\n\n\tasync getWorkspaceRecommendations(): Promise<Array<string | URI>> {\n\t\tif (!this.isEnabled()) {\n\t\t\treturn [];\n\t\t}\n\t\tawait this.workspaceRecommendations.activate();\n\t\tconst result: Array<string | URI> = [];\n\t\tfor (const { extension } of this.workspaceRecommendations.recommendations) {\n\t\t\tif (isString(extension)) {\n\t\t\t\tif (!result.includes(extension.toLowerCase()) && this.isExtensionAllowedToBeRecommended(extension)) {\n\t\t\t\t\tresult.push(extension.toLowerCase());\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tresult.push(extension);\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n\n\tasync getExeBasedRecommendations(exe?: string): Promise<{ important: string[]; others: string[] }> {\n\t\tawait this.exeBasedRecommendations.activate();\n\t\tconst { important, others } = exe ? this.exeBasedRecommendations.getRecommendations(exe)\n\t\t\t: { important: this.exeBasedRecommendations.importantRecommendations, others: this.exeBasedRecommendations.otherRecommendations };\n\t\treturn { important: this.toExtensionIds(important), others: this.toExtensionIds(others) };\n\t}\n\n\tgetFileBasedRecommendations(): string[] {\n\t\treturn this.toExtensionIds(this.fileBasedRecommendations.recommendations);\n\t}\n\n\tprivate onDidInstallExtensions(results: readonly InstallExtensionResult[]): void {\n\t\tfor (const e of results) {\n\t\t\tif (e.source && !URI.isUri(e.source) && e.operation === InstallOperation.Install) {\n\t\t\t\tconst extRecommendations = this.getAllRecommendationsWithReason() || {};\n\t\t\t\tconst recommendationReason = extRecommendations[e.source.identifier.id.toLowerCase()];\n\t\t\t\tif (recommendationReason) {\n\t\t\t\t\t/* __GDPR__\n\t\t\t\t\t\t\"extensionGallery:install:recommendations\" : {\n\t\t\t\t\t\t\t\"owner\": \"sandy081\",\n\t\t\t\t\t\t\t\"recommendationReason\": { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\", \"isMeasurement\": true },\n\t\t\t\t\t\t\t\"${include}\": [\n\t\t\t\t\t\t\t\t\"${GalleryExtensionTelemetryData}\"\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t}\n\t\t\t\t\t*/\n\t\t\t\t\tthis.telemetryService.publicLog('extensionGallery:install:recommendations', { ...e.source.telemetryData, recommendationReason: recommendationReason.reasonId });\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate toExtensionIds(recommendations: ReadonlyArray<ExtensionRecommendation>): string[] {\n\t\tconst extensionIds: string[] = [];\n\t\tfor (const { extension } of recommendations) {\n\t\t\tif (isString(extension) && this.isExtensionAllowedToBeRecommended(extension) && !extensionIds.includes(extension.toLowerCase())) {\n\t\t\t\textensionIds.push(extension.toLowerCase());\n\t\t\t}\n\t\t}\n\t\treturn extensionIds;\n\t}\n\n\tprivate isExtensionAllowedToBeRecommended(extensionId: string): boolean {\n\t\treturn !this.extensionRecommendationsManagementService.ignoredRecommendations.includes(extensionId.toLowerCase());\n\t}\n\n\tprivate async promptWorkspaceRecommendations(): Promise<void> {\n\t\tconst installed = await this.extensionsWorkbenchService.queryLocal();\n\t\tconst allowedRecommendations = [\n\t\t\t...this.workspaceRecommendations.recommendations,\n\t\t\t...this.configBasedRecommendations.importantRecommendations.filter(\n\t\t\t\trecommendation => !recommendation.whenNotInstalled || recommendation.whenNotInstalled.every(id => installed.every(local => !areSameExtensions(local.identifier, { id }))))\n\t\t]\n\t\t\t.map(({ extension }) => extension)\n\t\t\t.filter(extension => !isString(extension) || this.isExtensionAllowedToBeRecommended(extension));\n\n\t\tif (allowedRecommendations.length) {\n\t\t\tawait this._registerP(timeout(5000));\n\t\t\tawait this.extensionRecommendationNotificationService.promptWorkspaceRecommendations(allowedRecommendations);\n\t\t}\n\t}\n\n\tprivate _registerP<T>(o: CancelablePromise<T>): CancelablePromise<T> {\n\t\tthis._register(toDisposable(() => o.cancel()));\n\t\treturn o;\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
