var d=Object.defineProperty;var p=Object.getOwnPropertyDescriptor;var m=(o,t,n,i)=>{for(var e=i>1?void 0:i?p(t,n):t,s=o.length-1,l;s>=0;s--)(l=o[s])&&(e=(i?l(t,n,e):l(e))||e);return i&&e&&d(t,n,e),e},r=(o,t)=>(n,i)=>t(n,i,o);import{Action as g}from"../../../../../vs/base/common/actions.js";import{Promises as v}from"../../../../../vs/base/common/async.js";import{CancellationToken as f}from"../../../../../vs/base/common/cancellation.js";import{Disposable as h}from"../../../../../vs/base/common/lifecycle.js";import{localize as a}from"../../../../../vs/nls.js";import{MenuId as S,MenuRegistry as x}from"../../../../../vs/platform/actions/common/actions.js";import{CommandsRegistry as w}from"../../../../../vs/platform/commands/common/commands.js";import{areSameExtensions as u}from"../../../../../vs/platform/extensionManagement/common/extensionManagementUtil.js";import{INotificationService as I,Severity as b}from"../../../../../vs/platform/notification/common/notification.js";import"../../../../../vs/workbench/common/contributions.js";import{IExtensionsWorkbenchService as y}from"../../../../../vs/workbench/contrib/extensions/common/extensions.js";import{IExtensionService as M}from"../../../../../vs/workbench/services/extensions/common/extensions.js";import{IHostService as D}from"../../../../../vs/workbench/services/host/browser/host.js";let c=class extends h{constructor(n,i,e,s){super();this.extensionService=n;this.extensionsWorkbenchService=i;this.notificationService=e;this.hostService=s;w.registerCommand("workbench.extensions.installMissingDependencies",()=>this.installMissingDependencies()),x.appendMenuItem(S.CommandPalette,{command:{id:"workbench.extensions.installMissingDependencies",category:a("extensions","Extensions"),title:a("auto install missing deps","Install Missing Dependencies")}})}async getUninstalledMissingDependencies(){const n=await this.getAllMissingDependencies(),i=await this.extensionsWorkbenchService.queryLocal();return n.filter(e=>i.every(s=>!u(s.identifier,{id:e})))}async getAllMissingDependencies(){await this.extensionService.whenInstalledExtensionsRegistered();const n=this.extensionService.extensions.reduce((e,s)=>(e.add(s.identifier.value.toLowerCase()),e),new Set),i=new Set;for(const e of this.extensionService.extensions)e.extensionDependencies&&e.extensionDependencies.forEach(s=>{n.has(s.toLowerCase())||i.add(s)});return[...i.values()]}async installMissingDependencies(){const n=await this.getUninstalledMissingDependencies();if(n.length){const i=await this.extensionsWorkbenchService.getExtensions(n.map(e=>({id:e})),f.None);i.length&&(await v.settled(i.map(e=>this.extensionsWorkbenchService.install(e))),this.notificationService.notify({severity:b.Info,message:a("finished installing missing deps","Finished installing missing dependencies. Please reload the window now."),actions:{primary:[new g("realod",a("reload","Reload Window"),"",!0,()=>this.hostService.reload())]}}))}else this.notificationService.info(a("no missing deps","There are no missing dependencies to install."))}};c=m([r(0,M),r(1,y),r(2,I),r(3,D)],c);export{c as ExtensionDependencyChecker};
