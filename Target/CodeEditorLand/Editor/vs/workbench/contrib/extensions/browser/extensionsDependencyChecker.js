var d=Object.defineProperty;var p=Object.getOwnPropertyDescriptor;var m=(o,t,n,i)=>{for(var e=i>1?void 0:i?p(t,n):t,s=o.length-1,l;s>=0;s--)(l=o[s])&&(e=(i?l(t,n,e):l(e))||e);return i&&e&&d(t,n,e),e},r=(o,t)=>(n,i)=>t(n,i,o);import{IExtensionsWorkbenchService as g}from"../common/extensions.js";import{IExtensionService as v}from"../../../services/extensions/common/extensions.js";import{CommandsRegistry as f}from"../../../../platform/commands/common/commands.js";import{MenuRegistry as h,MenuId as S}from"../../../../platform/actions/common/actions.js";import{localize as a}from"../../../../nls.js";import{areSameExtensions as x}from"../../../../platform/extensionManagement/common/extensionManagementUtil.js";import{INotificationService as w,Severity as u}from"../../../../platform/notification/common/notification.js";import{Action as I}from"../../../../base/common/actions.js";import{IHostService as b}from"../../../services/host/browser/host.js";import{Disposable as y}from"../../../../base/common/lifecycle.js";import{CancellationToken as M}from"../../../../base/common/cancellation.js";import{Promises as D}from"../../../../base/common/async.js";let c=class extends y{constructor(n,i,e,s){super();this.extensionService=n;this.extensionsWorkbenchService=i;this.notificationService=e;this.hostService=s;f.registerCommand("workbench.extensions.installMissingDependencies",()=>this.installMissingDependencies()),h.appendMenuItem(S.CommandPalette,{command:{id:"workbench.extensions.installMissingDependencies",category:a("extensions","Extensions"),title:a("auto install missing deps","Install Missing Dependencies")}})}async getUninstalledMissingDependencies(){const n=await this.getAllMissingDependencies(),i=await this.extensionsWorkbenchService.queryLocal();return n.filter(e=>i.every(s=>!x(s.identifier,{id:e})))}async getAllMissingDependencies(){await this.extensionService.whenInstalledExtensionsRegistered();const n=this.extensionService.extensions.reduce((e,s)=>(e.add(s.identifier.value.toLowerCase()),e),new Set),i=new Set;for(const e of this.extensionService.extensions)e.extensionDependencies&&e.extensionDependencies.forEach(s=>{n.has(s.toLowerCase())||i.add(s)});return[...i.values()]}async installMissingDependencies(){const n=await this.getUninstalledMissingDependencies();if(n.length){const i=await this.extensionsWorkbenchService.getExtensions(n.map(e=>({id:e})),M.None);i.length&&(await D.settled(i.map(e=>this.extensionsWorkbenchService.install(e))),this.notificationService.notify({severity:u.Info,message:a("finished installing missing deps","Finished installing missing dependencies. Please reload the window now."),actions:{primary:[new I("realod",a("reload","Reload Window"),"",!0,()=>this.hostService.reload())]}}))}else this.notificationService.info(a("no missing deps","There are no missing dependencies to install."))}};c=m([r(0,v),r(1,g),r(2,w),r(3,b)],c);export{c as ExtensionDependencyChecker};
