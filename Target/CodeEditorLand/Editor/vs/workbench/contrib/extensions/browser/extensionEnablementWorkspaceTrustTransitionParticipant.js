var h=Object.defineProperty;var k=Object.getOwnPropertyDescriptor;var p=(n,t,o,r)=>{for(var e=r>1?void 0:r?k(t,o):t,a=n.length-1,i;a>=0;a--)(i=n[a])&&(e=(r?i(t,o,e):i(e))||e);return r&&e&&h(t,o,e),e},s=(n,t)=>(o,r)=>t(o,r,n);import{Disposable as l}from"../../../../base/common/lifecycle.js";import{localize as W}from"../../../../nls.js";import{IWorkspaceTrustEnablementService as b,IWorkspaceTrustManagementService as f}from"../../../../platform/workspace/common/workspaceTrust.js";import"../../../common/contributions.js";import{IWorkbenchEnvironmentService as v}from"../../../services/environment/common/environmentService.js";import{IWorkbenchExtensionEnablementService as d}from"../../../services/extensionManagement/common/extensionManagement.js";import{IExtensionService as E}from"../../../services/extensions/common/extensions.js";import{IHostService as S}from"../../../services/host/browser/host.js";let c=class extends l{constructor(t,o,r,e,a,i){super(),a.isWorkspaceTrustEnabled()&&i.workspaceTrustInitialized.then(()=>{const m=new class{async participate(u){if(u)await e.updateExtensionsEnablementsWhenWorkspaceTrustChanges();else if(r.remoteAuthority)o.reload();else{const I=await t.stopExtensionHosts(W("restartExtensionHost.reason","Restarting extension host due to workspace trust change."));await e.updateExtensionsEnablementsWhenWorkspaceTrustChanges(),I&&t.startExtensionHosts()}}};this._register(i.addWorkspaceTrustTransitionParticipant(m))})}};c=p([s(0,E),s(1,S),s(2,v),s(3,d),s(4,b),s(5,f)],c);export{c as ExtensionEnablementWorkspaceTrustTransitionParticipant};
