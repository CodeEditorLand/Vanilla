{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/extensions/browser/webRecommendations.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { localize } from \"../../../../nls.js\";\nimport { IProductService } from \"../../../../platform/product/common/productService.js\";\nimport { IExtensionManagementServerService } from \"../../../services/extensionManagement/common/extensionManagement.js\";\nimport { ExtensionRecommendationReason } from \"../../../services/extensionRecommendations/common/extensionRecommendations.js\";\nimport {\n\ttype ExtensionRecommendation,\n\tExtensionRecommendations,\n} from \"./extensionRecommendations.js\";\n\nexport class WebRecommendations extends ExtensionRecommendations {\n\tprivate _recommendations: ExtensionRecommendation[] = [];\n\tget recommendations(): ReadonlyArray<ExtensionRecommendation> {\n\t\treturn this._recommendations;\n\t}\n\n\tconstructor(\n\t\t@IProductService private readonly productService: IProductService,\n\t\t@IExtensionManagementServerService\n\t\tprivate readonly extensionManagementServerService: IExtensionManagementServerService,\n\t) {\n\t\tsuper();\n\t}\n\n\tprotected async doActivate(): Promise<void> {\n\t\tconst isOnlyWeb =\n\t\t\tthis.extensionManagementServerService\n\t\t\t\t.webExtensionManagementServer &&\n\t\t\t!this.extensionManagementServerService\n\t\t\t\t.localExtensionManagementServer &&\n\t\t\t!this.extensionManagementServerService\n\t\t\t\t.remoteExtensionManagementServer;\n\t\tif (isOnlyWeb && Array.isArray(this.productService.webExtensionTips)) {\n\t\t\tthis._recommendations = this.productService.webExtensionTips.map(\n\t\t\t\t(extensionId): ExtensionRecommendation => ({\n\t\t\t\t\textension: extensionId.toLowerCase(),\n\t\t\t\t\treason: {\n\t\t\t\t\t\treasonId: ExtensionRecommendationReason.Application,\n\t\t\t\t\t\treasonText: localize(\n\t\t\t\t\t\t\t\"reason\",\n\t\t\t\t\t\t\t\"This extension is recommended for {0} for the Web\",\n\t\t\t\t\t\t\tthis.productService.nameLong,\n\t\t\t\t\t\t),\n\t\t\t\t\t},\n\t\t\t\t}),\n\t\t\t);\n\t\t}\n\t}\n}\n"],
  "mappings": ";;;;;;;;;;;;AAKA,SAAS,gBAAgB;AACzB,SAAS,uBAAuB;AAChC,SAAS,yCAAyC;AAClD,SAAS,qCAAqC;AAC9C;AAAA,EAEC;AAAA,OACM;AAEA,IAAM,qBAAN,cAAiC,yBAAyB;AAAA,EAMhE,YACmC,gBAEjB,kCAChB;AACD,UAAM;AAJ4B;AAEjB;AAAA,EAGlB;AAAA,EA1BD,OAciE;AAAA;AAAA;AAAA,EACxD,mBAA8C,CAAC;AAAA,EACvD,IAAI,kBAA0D;AAC7D,WAAO,KAAK;AAAA,EACb;AAAA,EAUA,MAAgB,aAA4B;AAC3C,UAAM,YACL,KAAK,iCACH,gCACF,CAAC,KAAK,iCACJ,kCACF,CAAC,KAAK,iCACJ;AACH,QAAI,aAAa,MAAM,QAAQ,KAAK,eAAe,gBAAgB,GAAG;AACrE,WAAK,mBAAmB,KAAK,eAAe,iBAAiB;AAAA,QAC5D,CAAC,iBAA0C;AAAA,UAC1C,WAAW,YAAY,YAAY;AAAA,UACnC,QAAQ;AAAA,YACP,UAAU,8BAA8B;AAAA,YACxC,YAAY;AAAA,cACX;AAAA,cACA;AAAA,cACA,KAAK,eAAe;AAAA,YACrB;AAAA,UACD;AAAA,QACD;AAAA,MACD;AAAA,IACD;AAAA,EACD;AACD;AAtCa,qBAAN;AAAA,EAOJ;AAAA,EACA;AAAA,GARU;",
  "names": []
}
