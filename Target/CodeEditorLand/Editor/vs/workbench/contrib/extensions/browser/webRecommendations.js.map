{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/extensions/browser/webRecommendations.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { ExtensionRecommendations, ExtensionRecommendation } from './extensionRecommendations.js';\nimport { IProductService } from '../../../../platform/product/common/productService.js';\nimport { ExtensionRecommendationReason } from '../../../services/extensionRecommendations/common/extensionRecommendations.js';\nimport { localize } from '../../../../nls.js';\nimport { IExtensionManagementServerService } from '../../../services/extensionManagement/common/extensionManagement.js';\n\nexport class WebRecommendations extends ExtensionRecommendations {\n\n\tprivate _recommendations: ExtensionRecommendation[] = [];\n\tget recommendations(): ReadonlyArray<ExtensionRecommendation> { return this._recommendations; }\n\n\tconstructor(\n\t\t@IProductService private readonly productService: IProductService,\n\t\t@IExtensionManagementServerService private readonly extensionManagementServerService: IExtensionManagementServerService,\n\t) {\n\t\tsuper();\n\t}\n\n\tprotected async doActivate(): Promise<void> {\n\t\tconst isOnlyWeb = this.extensionManagementServerService.webExtensionManagementServer && !this.extensionManagementServerService.localExtensionManagementServer && !this.extensionManagementServerService.remoteExtensionManagementServer;\n\t\tif (isOnlyWeb && Array.isArray(this.productService.webExtensionTips)) {\n\t\t\tthis._recommendations = this.productService.webExtensionTips.map((extensionId): ExtensionRecommendation => ({\n\t\t\t\textension: extensionId.toLowerCase(),\n\t\t\t\treason: {\n\t\t\t\t\treasonId: ExtensionRecommendationReason.Application,\n\t\t\t\t\treasonText: localize('reason', \"This extension is recommended for {0} for the Web\", this.productService.nameLong)\n\t\t\t\t}\n\t\t\t}));\n\t\t}\n\t}\n}\n\n"],
  "mappings": ";;;;;;;;;;;;AAKA,SAAS,0BAA0B,+BAA+B;AAClE,SAAS,uBAAuB;AAChC,SAAS,qCAAqC;AAC9C,SAAS,gBAAgB;AACzB,SAAS,yCAAyC;AAE3C,IAAM,qBAAN,cAAiC,yBAAyB;AAAA,EAKhE,YACmC,gBACkB,kCACnD;AACD,UAAM;AAH4B;AACkB;AAAA,EAGrD;AAAA,EArBD,OAWiE;AAAA;AAAA;AAAA,EAExD,mBAA8C,CAAC;AAAA,EACvD,IAAI,kBAA0D;AAAE,WAAO,KAAK;AAAA,EAAkB;AAAA,EAS9F,MAAgB,aAA4B;AAC3C,UAAM,YAAY,KAAK,iCAAiC,gCAAgC,CAAC,KAAK,iCAAiC,kCAAkC,CAAC,KAAK,iCAAiC;AACxM,QAAI,aAAa,MAAM,QAAQ,KAAK,eAAe,gBAAgB,GAAG;AACrE,WAAK,mBAAmB,KAAK,eAAe,iBAAiB,IAAI,CAAC,iBAA0C;AAAA,QAC3G,WAAW,YAAY,YAAY;AAAA,QACnC,QAAQ;AAAA,UACP,UAAU,8BAA8B;AAAA,UACxC,YAAY,SAAS,UAAU,qDAAqD,KAAK,eAAe,QAAQ;AAAA,QACjH;AAAA,MACD,EAAE;AAAA,IACH;AAAA,EACD;AACD;AAxBa,qBAAN;AAAA,EAMJ;AAAA,EACA;AAAA,GAPU;",
  "names": []
}
