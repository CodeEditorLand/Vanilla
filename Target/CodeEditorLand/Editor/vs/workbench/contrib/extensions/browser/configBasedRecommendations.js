var c=Object.defineProperty;var h=Object.getOwnPropertyDescriptor;var p=(s,i,e,n)=>{for(var t=n>1?void 0:n?h(i,e):i,o=s.length-1,a;o>=0;o--)(a=s[o])&&(t=(n?a(i,e,t):a(t))||t);return n&&t&&c(i,e,t),t},d=(s,i)=>(e,n)=>i(e,n,s);import{Emitter as x}from"../../../../base/common/event.js";import{localize as f}from"../../../../nls.js";import{IExtensionTipsService as g}from"../../../../platform/extensionManagement/common/extensionManagement.js";import{IWorkspaceContextService as R}from"../../../../platform/workspace/common/workspace.js";import{ExtensionRecommendationReason as v}from"../../../services/extensionRecommendations/common/extensionRecommendations.js";import{ExtensionRecommendations as l}from"./extensionRecommendations.js";let m=class extends l{constructor(e,n){super();this.extensionTipsService=e;this.workspaceContextService=n}importantTips=[];otherTips=[];_onDidChangeRecommendations=this._register(new x);onDidChangeRecommendations=this._onDidChangeRecommendations.event;_otherRecommendations=[];get otherRecommendations(){return this._otherRecommendations}_importantRecommendations=[];get importantRecommendations(){return this._importantRecommendations}get recommendations(){return[...this.importantRecommendations,...this.otherRecommendations]}async doActivate(){await this.fetch(),this._register(this.workspaceContextService.onDidChangeWorkspaceFolders(e=>this.onWorkspaceFoldersChanged(e)))}async fetch(){const e=this.workspaceContextService.getWorkspace(),n=new Map,t=new Map;for(const o of e.folders){const a=await this.extensionTipsService.getConfigBasedTips(o.uri);for(const r of a)r.important?n.set(r.extensionId,r):t.set(r.extensionId,r)}this.importantTips=[...n.values()],this.otherTips=[...t.values()].filter(o=>!n.has(o.extensionId)),this._otherRecommendations=this.otherTips.map(o=>this.toExtensionRecommendation(o)),this._importantRecommendations=this.importantTips.map(o=>this.toExtensionRecommendation(o))}async onWorkspaceFoldersChanged(e){if(e.added.length){const n=this.importantTips;await this.fetch(),this.importantTips.some(t=>n.every(o=>t.extensionId!==o.extensionId))&&this._onDidChangeRecommendations.fire()}}toExtensionRecommendation(e){return{extension:e.extensionId,reason:{reasonId:v.WorkspaceConfig,reasonText:f("exeBasedRecommendation","This extension is recommended because of the current workspace configuration")},whenNotInstalled:e.whenNotInstalled}}};m=p([d(0,g),d(1,R)],m);export{m as ConfigBasedRecommendations};
