{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/extensions/browser/fileBasedRecommendations.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { ExtensionRecommendations, GalleryExtensionRecommendation } from './extensionRecommendations.js';\nimport { EnablementState } from '../../../services/extensionManagement/common/extensionManagement.js';\nimport { ExtensionRecommendationReason, IExtensionIgnoredRecommendationsService } from '../../../services/extensionRecommendations/common/extensionRecommendations.js';\nimport { IExtensionsWorkbenchService, IExtension } from '../common/extensions.js';\nimport { localize } from '../../../../nls.js';\nimport { StorageScope, IStorageService, StorageTarget } from '../../../../platform/storage/common/storage.js';\nimport { IProductService } from '../../../../platform/product/common/productService.js';\nimport { IFileContentCondition, IFilePathCondition, IFileLanguageCondition, IFileOpenCondition } from '../../../../base/common/product.js';\nimport { IStringDictionary } from '../../../../base/common/collections.js';\nimport { ITextModel } from '../../../../editor/common/model.js';\nimport { Schemas } from '../../../../base/common/network.js';\nimport { basename, extname } from '../../../../base/common/resources.js';\nimport { match } from '../../../../base/common/glob.js';\nimport { URI } from '../../../../base/common/uri.js';\nimport { IModelService } from '../../../../editor/common/services/model.js';\nimport { ILanguageService } from '../../../../editor/common/languages/language.js';\nimport { IExtensionRecommendationNotificationService, RecommendationsNotificationResult, RecommendationSource } from '../../../../platform/extensionRecommendations/common/extensionRecommendations.js';\nimport { distinct } from '../../../../base/common/arrays.js';\nimport { DisposableStore } from '../../../../base/common/lifecycle.js';\nimport { CellUri } from '../../notebook/common/notebookCommon.js';\nimport { disposableTimeout } from '../../../../base/common/async.js';\nimport { IWorkspaceContextService } from '../../../../platform/workspace/common/workspace.js';\nimport { areSameExtensions } from '../../../../platform/extensionManagement/common/extensionManagementUtil.js';\nimport { isEmptyObject } from '../../../../base/common/types.js';\nimport { PLAINTEXT_LANGUAGE_ID } from '../../../../editor/common/languages/modesRegistry.js';\n\nconst promptedRecommendationsStorageKey = 'fileBasedRecommendations/promptedRecommendations';\nconst recommendationsStorageKey = 'extensionsAssistant/recommendations';\nconst milliSecondsInADay = 1000 * 60 * 60 * 24;\n\nexport class FileBasedRecommendations extends ExtensionRecommendations {\n\n\tprivate readonly fileOpenRecommendations: IStringDictionary<IFileOpenCondition[]>;\n\tprivate readonly recommendationsByPattern = new Map<string, IStringDictionary<IFileOpenCondition[]>>();\n\tprivate readonly fileBasedRecommendations = new Map<string, { recommendedTime: number }>();\n\tprivate readonly fileBasedImportantRecommendations = new Set<string>();\n\n\tget recommendations(): ReadonlyArray<GalleryExtensionRecommendation> {\n\t\tconst recommendations: GalleryExtensionRecommendation[] = [];\n\t\t[...this.fileBasedRecommendations.keys()]\n\t\t\t.sort((a, b) => {\n\t\t\t\tif (this.fileBasedRecommendations.get(a)!.recommendedTime === this.fileBasedRecommendations.get(b)!.recommendedTime) {\n\t\t\t\t\tif (this.fileBasedImportantRecommendations.has(a)) {\n\t\t\t\t\t\treturn -1;\n\t\t\t\t\t}\n\t\t\t\t\tif (this.fileBasedImportantRecommendations.has(b)) {\n\t\t\t\t\t\treturn 1;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn this.fileBasedRecommendations.get(a)!.recommendedTime > this.fileBasedRecommendations.get(b)!.recommendedTime ? -1 : 1;\n\t\t\t})\n\t\t\t.forEach(extensionId => {\n\t\t\t\trecommendations.push({\n\t\t\t\t\textension: extensionId,\n\t\t\t\t\treason: {\n\t\t\t\t\t\treasonId: ExtensionRecommendationReason.File,\n\t\t\t\t\t\treasonText: localize('fileBasedRecommendation', \"This extension is recommended based on the files you recently opened.\")\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t});\n\t\treturn recommendations;\n\t}\n\n\tget importantRecommendations(): ReadonlyArray<GalleryExtensionRecommendation> {\n\t\treturn this.recommendations.filter(e => this.fileBasedImportantRecommendations.has(e.extension));\n\t}\n\n\tget otherRecommendations(): ReadonlyArray<GalleryExtensionRecommendation> {\n\t\treturn this.recommendations.filter(e => !this.fileBasedImportantRecommendations.has(e.extension));\n\t}\n\n\tconstructor(\n\t\t@IExtensionsWorkbenchService private readonly extensionsWorkbenchService: IExtensionsWorkbenchService,\n\t\t@IModelService private readonly modelService: IModelService,\n\t\t@ILanguageService private readonly languageService: ILanguageService,\n\t\t@IProductService productService: IProductService,\n\t\t@IStorageService private readonly storageService: IStorageService,\n\t\t@IExtensionRecommendationNotificationService private readonly extensionRecommendationNotificationService: IExtensionRecommendationNotificationService,\n\t\t@IExtensionIgnoredRecommendationsService private readonly extensionIgnoredRecommendationsService: IExtensionIgnoredRecommendationsService,\n\t\t@IWorkspaceContextService private readonly workspaceContextService: IWorkspaceContextService,\n\t) {\n\t\tsuper();\n\t\tthis.fileOpenRecommendations = {};\n\t\tif (productService.extensionRecommendations) {\n\t\t\tfor (const [extensionId, recommendation] of Object.entries(productService.extensionRecommendations)) {\n\t\t\t\tif (recommendation.onFileOpen) {\n\t\t\t\t\tthis.fileOpenRecommendations[extensionId.toLowerCase()] = recommendation.onFileOpen;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tprotected async doActivate(): Promise<void> {\n\t\tif (isEmptyObject(this.fileOpenRecommendations)) {\n\t\t\treturn;\n\t\t}\n\n\t\tawait this.extensionsWorkbenchService.whenInitialized;\n\n\t\tconst cachedRecommendations = this.getCachedRecommendations();\n\t\tconst now = Date.now();\n\t\t// Retire existing recommendations if they are older than a week or are not part of this.productService.extensionTips anymore\n\t\tObject.entries(cachedRecommendations).forEach(([key, value]) => {\n\t\t\tconst diff = (now - value) / milliSecondsInADay;\n\t\t\tif (diff <= 7 && this.fileOpenRecommendations[key]) {\n\t\t\t\tthis.fileBasedRecommendations.set(key.toLowerCase(), { recommendedTime: value });\n\t\t\t}\n\t\t});\n\n\t\tthis._register(this.modelService.onModelAdded(model => this.onModelAdded(model)));\n\t\tthis.modelService.getModels().forEach(model => this.onModelAdded(model));\n\t}\n\n\tprivate onModelAdded(model: ITextModel): void {\n\t\tconst uri = model.uri.scheme === Schemas.vscodeNotebookCell ? CellUri.parse(model.uri)?.notebook : model.uri;\n\t\tif (!uri) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst supportedSchemes = distinct([Schemas.untitled, Schemas.file, Schemas.vscodeRemote, ...this.workspaceContextService.getWorkspace().folders.map(folder => folder.uri.scheme)]);\n\t\tif (!uri || !supportedSchemes.includes(uri.scheme)) {\n\t\t\treturn;\n\t\t}\n\n\t\t// re-schedule this bit of the operation to be off the critical path - in case glob-match is slow\n\t\tdisposableTimeout(() => this.promptImportantRecommendations(uri, model), 0, this._store);\n\t}\n\n\t/**\n\t * Prompt the user to either install the recommended extension for the file type in the current editor model\n\t * or prompt to search the marketplace if it has extensions that can support the file type\n\t */\n\tprivate promptImportantRecommendations(uri: URI, model: ITextModel, extensionRecommendations?: IStringDictionary<IFileOpenCondition[]>): void {\n\t\tif (model.isDisposed()) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst pattern = extname(uri).toLowerCase();\n\t\textensionRecommendations = extensionRecommendations ?? this.recommendationsByPattern.get(pattern) ?? this.fileOpenRecommendations;\n\t\tconst extensionRecommendationEntries = Object.entries(extensionRecommendations);\n\t\tif (extensionRecommendationEntries.length === 0) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst processedPathGlobs = new Map<string, boolean>();\n\t\tconst installed = this.extensionsWorkbenchService.local;\n\t\tconst recommendationsByPattern: IStringDictionary<IFileOpenCondition[]> = {};\n\t\tconst matchedRecommendations: IStringDictionary<IFileOpenCondition[]> = {};\n\t\tconst unmatchedRecommendations: IStringDictionary<IFileOpenCondition[]> = {};\n\t\tlet listenOnLanguageChange = false;\n\t\tconst languageId = model.getLanguageId();\n\n\t\tfor (const [extensionId, conditions] of extensionRecommendationEntries) {\n\t\t\tconst conditionsByPattern: IFileOpenCondition[] = [];\n\t\t\tconst matchedConditions: IFileOpenCondition[] = [];\n\t\t\tconst unmatchedConditions: IFileOpenCondition[] = [];\n\t\t\tfor (const condition of conditions) {\n\t\t\t\tlet languageMatched = false;\n\t\t\t\tlet pathGlobMatched = false;\n\n\t\t\t\tconst isLanguageCondition = !!(<IFileLanguageCondition>condition).languages;\n\t\t\t\tconst isFileContentCondition = !!(<IFileContentCondition>condition).contentPattern;\n\t\t\t\tif (isLanguageCondition || isFileContentCondition) {\n\t\t\t\t\tconditionsByPattern.push(condition);\n\t\t\t\t}\n\n\t\t\t\tif (isLanguageCondition) {\n\t\t\t\t\tif ((<IFileLanguageCondition>condition).languages.includes(languageId)) {\n\t\t\t\t\t\tlanguageMatched = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif ((<IFilePathCondition>condition).pathGlob) {\n\t\t\t\t\tconst pathGlob = (<IFilePathCondition>condition).pathGlob;\n\t\t\t\t\tif (processedPathGlobs.get(pathGlob) ?? match((<IFilePathCondition>condition).pathGlob, uri.with({ fragment: '' }).toString())) {\n\t\t\t\t\t\tpathGlobMatched = true;\n\t\t\t\t\t}\n\t\t\t\t\tprocessedPathGlobs.set(pathGlob, pathGlobMatched);\n\t\t\t\t}\n\n\t\t\t\tlet matched = languageMatched || pathGlobMatched;\n\n\t\t\t\t// If the resource has pattern (extension) and not matched, then we don't need to check the other conditions\n\t\t\t\tif (pattern && !matched) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tif (matched && condition.whenInstalled) {\n\t\t\t\t\tif (!condition.whenInstalled.every(id => installed.some(local => areSameExtensions({ id }, local.identifier)))) {\n\t\t\t\t\t\tmatched = false;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (matched && condition.whenNotInstalled) {\n\t\t\t\t\tif (installed.some(local => condition.whenNotInstalled?.some(id => areSameExtensions({ id }, local.identifier)))) {\n\t\t\t\t\t\tmatched = false;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (matched && isFileContentCondition) {\n\t\t\t\t\tif (!model.findMatches((<IFileContentCondition>condition).contentPattern, false, true, false, null, false).length) {\n\t\t\t\t\t\tmatched = false;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (matched) {\n\t\t\t\t\tmatchedConditions.push(condition);\n\t\t\t\t\tconditionsByPattern.pop();\n\t\t\t\t} else {\n\t\t\t\t\tif (isLanguageCondition || isFileContentCondition) {\n\t\t\t\t\t\tunmatchedConditions.push(condition);\n\t\t\t\t\t\tif (isLanguageCondition) {\n\t\t\t\t\t\t\tlistenOnLanguageChange = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t}\n\t\t\tif (matchedConditions.length) {\n\t\t\t\tmatchedRecommendations[extensionId] = matchedConditions;\n\t\t\t}\n\t\t\tif (unmatchedConditions.length) {\n\t\t\t\tunmatchedRecommendations[extensionId] = unmatchedConditions;\n\t\t\t}\n\t\t\tif (conditionsByPattern.length) {\n\t\t\t\trecommendationsByPattern[extensionId] = conditionsByPattern;\n\t\t\t}\n\t\t}\n\n\t\tif (pattern) {\n\t\t\tthis.recommendationsByPattern.set(pattern, recommendationsByPattern);\n\t\t}\n\t\tif (Object.keys(unmatchedRecommendations).length) {\n\t\t\tif (listenOnLanguageChange) {\n\t\t\t\tconst disposables = new DisposableStore();\n\t\t\t\tdisposables.add(model.onDidChangeLanguage(() => {\n\t\t\t\t\t// re-schedule this bit of the operation to be off the critical path - in case glob-match is slow\n\t\t\t\t\tdisposableTimeout(() => {\n\t\t\t\t\t\tif (!disposables.isDisposed) {\n\t\t\t\t\t\t\tthis.promptImportantRecommendations(uri, model, unmatchedRecommendations);\n\t\t\t\t\t\t\tdisposables.dispose();\n\t\t\t\t\t\t}\n\t\t\t\t\t}, 0, disposables);\n\t\t\t\t}));\n\t\t\t\tdisposables.add(model.onWillDispose(() => disposables.dispose()));\n\t\t\t}\n\t\t}\n\n\t\tif (Object.keys(matchedRecommendations).length) {\n\t\t\tthis.promptFromRecommendations(uri, model, matchedRecommendations);\n\t\t}\n\t}\n\n\tprivate promptFromRecommendations(uri: URI, model: ITextModel, extensionRecommendations: IStringDictionary<IFileOpenCondition[]>): void {\n\t\tlet isImportantRecommendationForLanguage = false;\n\t\tconst importantRecommendations = new Set<string>();\n\t\tconst fileBasedRecommendations = new Set<string>();\n\t\tfor (const [extensionId, conditions] of Object.entries(extensionRecommendations)) {\n\t\t\tfor (const condition of conditions) {\n\t\t\t\tfileBasedRecommendations.add(extensionId);\n\t\t\t\tif (condition.important) {\n\t\t\t\t\timportantRecommendations.add(extensionId);\n\t\t\t\t\tthis.fileBasedImportantRecommendations.add(extensionId);\n\t\t\t\t}\n\t\t\t\tif ((<IFileLanguageCondition>condition).languages) {\n\t\t\t\t\tisImportantRecommendationForLanguage = true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Update file based recommendations\n\t\tfor (const recommendation of fileBasedRecommendations) {\n\t\t\tconst filedBasedRecommendation = this.fileBasedRecommendations.get(recommendation) || { recommendedTime: Date.now(), sources: [] };\n\t\t\tfiledBasedRecommendation.recommendedTime = Date.now();\n\t\t\tthis.fileBasedRecommendations.set(recommendation, filedBasedRecommendation);\n\t\t}\n\n\t\tthis.storeCachedRecommendations();\n\n\t\tif (this.extensionRecommendationNotificationService.hasToIgnoreRecommendationNotifications()) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst language = model.getLanguageId();\n\t\tconst languageName = this.languageService.getLanguageName(language);\n\t\tif (importantRecommendations.size &&\n\t\t\tthis.promptRecommendedExtensionForFileType(languageName && isImportantRecommendationForLanguage && language !== PLAINTEXT_LANGUAGE_ID ? localize('languageName', \"the {0} language\", languageName) : basename(uri), language, [...importantRecommendations])) {\n\t\t\treturn;\n\t\t}\n\t}\n\n\tprivate promptRecommendedExtensionForFileType(name: string, language: string, recommendations: string[]): boolean {\n\t\trecommendations = this.filterIgnoredOrNotAllowed(recommendations);\n\t\tif (recommendations.length === 0) {\n\t\t\treturn false;\n\t\t}\n\n\t\trecommendations = this.filterInstalled(recommendations, this.extensionsWorkbenchService.local)\n\t\t\t.filter(extensionId => this.fileBasedImportantRecommendations.has(extensionId));\n\n\t\tconst promptedRecommendations = language !== PLAINTEXT_LANGUAGE_ID ? this.getPromptedRecommendations()[language] : undefined;\n\t\tif (promptedRecommendations) {\n\t\t\trecommendations = recommendations.filter(extensionId => promptedRecommendations.includes(extensionId));\n\t\t}\n\n\t\tif (recommendations.length === 0) {\n\t\t\treturn false;\n\t\t}\n\n\t\tthis.promptImportantExtensionsInstallNotification(recommendations, name, language);\n\t\treturn true;\n\t}\n\n\tprivate async promptImportantExtensionsInstallNotification(extensions: string[], name: string, language: string): Promise<void> {\n\t\ttry {\n\t\t\tconst result = await this.extensionRecommendationNotificationService.promptImportantExtensionsInstallNotification({ extensions, name, source: RecommendationSource.FILE });\n\t\t\tif (result === RecommendationsNotificationResult.Accepted) {\n\t\t\t\tthis.addToPromptedRecommendations(language, extensions);\n\t\t\t}\n\t\t} catch (error) { /* Ignore */ }\n\t}\n\n\tprivate getPromptedRecommendations(): IStringDictionary<string[]> {\n\t\treturn JSON.parse(this.storageService.get(promptedRecommendationsStorageKey, StorageScope.PROFILE, '{}'));\n\t}\n\n\tprivate addToPromptedRecommendations(language: string, extensions: string[]) {\n\t\tconst promptedRecommendations = this.getPromptedRecommendations();\n\t\tpromptedRecommendations[language] = distinct([...(promptedRecommendations[language] ?? []), ...extensions]);\n\t\tthis.storageService.store(promptedRecommendationsStorageKey, JSON.stringify(promptedRecommendations), StorageScope.PROFILE, StorageTarget.USER);\n\t}\n\n\tprivate filterIgnoredOrNotAllowed(recommendationsToSuggest: string[]): string[] {\n\t\tconst ignoredRecommendations = [...this.extensionIgnoredRecommendationsService.ignoredRecommendations, ...this.extensionRecommendationNotificationService.ignoredRecommendations];\n\t\treturn recommendationsToSuggest.filter(id => !ignoredRecommendations.includes(id));\n\t}\n\n\tprivate filterInstalled(recommendationsToSuggest: string[], installed: IExtension[]): string[] {\n\t\tconst installedExtensionsIds = installed.reduce((result, i) => {\n\t\t\tif (i.enablementState !== EnablementState.DisabledByExtensionKind) {\n\t\t\t\tresult.add(i.identifier.id.toLowerCase());\n\t\t\t}\n\t\t\treturn result;\n\t\t}, new Set<string>());\n\t\treturn recommendationsToSuggest.filter(id => !installedExtensionsIds.has(id.toLowerCase()));\n\t}\n\n\tprivate getCachedRecommendations(): IStringDictionary<number> {\n\t\tlet storedRecommendations = JSON.parse(this.storageService.get(recommendationsStorageKey, StorageScope.PROFILE, '[]'));\n\t\tif (Array.isArray(storedRecommendations)) {\n\t\t\tstoredRecommendations = storedRecommendations.reduce<IStringDictionary<number>>((result, id) => { result[id] = Date.now(); return result; }, {});\n\t\t}\n\t\tconst result: IStringDictionary<number> = {};\n\t\tObject.entries(storedRecommendations).forEach(([key, value]) => {\n\t\t\tif (typeof value === 'number') {\n\t\t\t\tresult[key.toLowerCase()] = value;\n\t\t\t}\n\t\t});\n\t\treturn result;\n\t}\n\n\tprivate storeCachedRecommendations(): void {\n\t\tconst storedRecommendations: IStringDictionary<number> = {};\n\t\tthis.fileBasedRecommendations.forEach((value, key) => storedRecommendations[key] = value.recommendedTime);\n\t\tthis.storageService.store(recommendationsStorageKey, JSON.stringify(storedRecommendations), StorageScope.PROFILE, StorageTarget.MACHINE);\n\t}\n}\n"],
  "mappings": "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",
  "names": ["result"]
}
