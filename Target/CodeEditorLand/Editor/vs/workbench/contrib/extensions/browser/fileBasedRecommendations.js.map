{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/extensions/browser/fileBasedRecommendations.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { distinct } from \"../../../../base/common/arrays.js\";\nimport { disposableTimeout } from \"../../../../base/common/async.js\";\nimport type { IStringDictionary } from \"../../../../base/common/collections.js\";\nimport { match } from \"../../../../base/common/glob.js\";\nimport { DisposableStore } from \"../../../../base/common/lifecycle.js\";\nimport { Schemas } from \"../../../../base/common/network.js\";\nimport type {\n\tIFileContentCondition,\n\tIFileLanguageCondition,\n\tIFileOpenCondition,\n\tIFilePathCondition,\n} from \"../../../../base/common/product.js\";\nimport { basename, extname } from \"../../../../base/common/resources.js\";\nimport { isEmptyObject } from \"../../../../base/common/types.js\";\nimport type { URI } from \"../../../../base/common/uri.js\";\nimport { ILanguageService } from \"../../../../editor/common/languages/language.js\";\nimport { PLAINTEXT_LANGUAGE_ID } from \"../../../../editor/common/languages/modesRegistry.js\";\nimport type { ITextModel } from \"../../../../editor/common/model.js\";\nimport { IModelService } from \"../../../../editor/common/services/model.js\";\nimport { localize } from \"../../../../nls.js\";\nimport { areSameExtensions } from \"../../../../platform/extensionManagement/common/extensionManagementUtil.js\";\nimport {\n\tIExtensionRecommendationNotificationService,\n\tRecommendationSource,\n\tRecommendationsNotificationResult,\n} from \"../../../../platform/extensionRecommendations/common/extensionRecommendations.js\";\nimport { IProductService } from \"../../../../platform/product/common/productService.js\";\nimport {\n\tIStorageService,\n\tStorageScope,\n\tStorageTarget,\n} from \"../../../../platform/storage/common/storage.js\";\nimport { IWorkspaceContextService } from \"../../../../platform/workspace/common/workspace.js\";\nimport { EnablementState } from \"../../../services/extensionManagement/common/extensionManagement.js\";\nimport {\n\tExtensionRecommendationReason,\n\tIExtensionIgnoredRecommendationsService,\n} from \"../../../services/extensionRecommendations/common/extensionRecommendations.js\";\nimport { CellUri } from \"../../notebook/common/notebookCommon.js\";\nimport {\n\ttype IExtension,\n\tIExtensionsWorkbenchService,\n} from \"../common/extensions.js\";\nimport {\n\tExtensionRecommendations,\n\ttype GalleryExtensionRecommendation,\n} from \"./extensionRecommendations.js\";\n\nconst promptedRecommendationsStorageKey =\n\t\"fileBasedRecommendations/promptedRecommendations\";\nconst recommendationsStorageKey = \"extensionsAssistant/recommendations\";\nconst milliSecondsInADay = 1000 * 60 * 60 * 24;\n\nexport class FileBasedRecommendations extends ExtensionRecommendations {\n\tprivate readonly fileOpenRecommendations: IStringDictionary<\n\t\tIFileOpenCondition[]\n\t>;\n\tprivate readonly recommendationsByPattern = new Map<\n\t\tstring,\n\t\tIStringDictionary<IFileOpenCondition[]>\n\t>();\n\tprivate readonly fileBasedRecommendations = new Map<\n\t\tstring,\n\t\t{ recommendedTime: number }\n\t>();\n\tprivate readonly fileBasedImportantRecommendations = new Set<string>();\n\n\tget recommendations(): ReadonlyArray<GalleryExtensionRecommendation> {\n\t\tconst recommendations: GalleryExtensionRecommendation[] = [];\n\t\t[...this.fileBasedRecommendations.keys()]\n\t\t\t.sort((a, b) => {\n\t\t\t\tif (\n\t\t\t\t\tthis.fileBasedRecommendations.get(a)!.recommendedTime ===\n\t\t\t\t\tthis.fileBasedRecommendations.get(b)!.recommendedTime\n\t\t\t\t) {\n\t\t\t\t\tif (this.fileBasedImportantRecommendations.has(a)) {\n\t\t\t\t\t\treturn -1;\n\t\t\t\t\t}\n\t\t\t\t\tif (this.fileBasedImportantRecommendations.has(b)) {\n\t\t\t\t\t\treturn 1;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn this.fileBasedRecommendations.get(a)!.recommendedTime >\n\t\t\t\t\tthis.fileBasedRecommendations.get(b)!.recommendedTime\n\t\t\t\t\t? -1\n\t\t\t\t\t: 1;\n\t\t\t})\n\t\t\t.forEach((extensionId) => {\n\t\t\t\trecommendations.push({\n\t\t\t\t\textension: extensionId,\n\t\t\t\t\treason: {\n\t\t\t\t\t\treasonId: ExtensionRecommendationReason.File,\n\t\t\t\t\t\treasonText: localize(\n\t\t\t\t\t\t\t\"fileBasedRecommendation\",\n\t\t\t\t\t\t\t\"This extension is recommended based on the files you recently opened.\",\n\t\t\t\t\t\t),\n\t\t\t\t\t},\n\t\t\t\t});\n\t\t\t});\n\t\treturn recommendations;\n\t}\n\n\tget importantRecommendations(): ReadonlyArray<GalleryExtensionRecommendation> {\n\t\treturn this.recommendations.filter((e) =>\n\t\t\tthis.fileBasedImportantRecommendations.has(e.extension),\n\t\t);\n\t}\n\n\tget otherRecommendations(): ReadonlyArray<GalleryExtensionRecommendation> {\n\t\treturn this.recommendations.filter(\n\t\t\t(e) => !this.fileBasedImportantRecommendations.has(e.extension),\n\t\t);\n\t}\n\n\tconstructor(\n\t\t@IExtensionsWorkbenchService private readonly extensionsWorkbenchService: IExtensionsWorkbenchService,\n\t\t@IModelService private readonly modelService: IModelService,\n\t\t@ILanguageService private readonly languageService: ILanguageService,\n\t\t@IProductService productService: IProductService,\n\t\t@IStorageService private readonly storageService: IStorageService,\n\t\t@IExtensionRecommendationNotificationService private readonly extensionRecommendationNotificationService: IExtensionRecommendationNotificationService,\n\t\t@IExtensionIgnoredRecommendationsService private readonly extensionIgnoredRecommendationsService: IExtensionIgnoredRecommendationsService,\n\t\t@IWorkspaceContextService private readonly workspaceContextService: IWorkspaceContextService,\n\t) {\n\t\tsuper();\n\t\tthis.fileOpenRecommendations = {};\n\t\tif (productService.extensionRecommendations) {\n\t\t\tfor (const [extensionId, recommendation] of Object.entries(productService.extensionRecommendations)) {\n\t\t\t\tif (recommendation.onFileOpen) {\n\t\t\t\t\tthis.fileOpenRecommendations[extensionId.toLowerCase()] = recommendation.onFileOpen;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tprotected async doActivate(): Promise<void> {\n\t\tif (isEmptyObject(this.fileOpenRecommendations)) {\n\t\t\treturn;\n\t\t}\n\n\t\tawait this.extensionsWorkbenchService.whenInitialized;\n\n\t\tconst cachedRecommendations = this.getCachedRecommendations();\n\t\tconst now = Date.now();\n\t\t// Retire existing recommendations if they are older than a week or are not part of this.productService.extensionTips anymore\n\t\tObject.entries(cachedRecommendations).forEach(([key, value]) => {\n\t\t\tconst diff = (now - value) / milliSecondsInADay;\n\t\t\tif (diff <= 7 && this.fileOpenRecommendations[key]) {\n\t\t\t\tthis.fileBasedRecommendations.set(key.toLowerCase(), {\n\t\t\t\t\trecommendedTime: value,\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\n\t\tthis._register(\n\t\t\tthis.modelService.onModelAdded((model) => this.onModelAdded(model)),\n\t\t);\n\t\tthis.modelService\n\t\t\t.getModels()\n\t\t\t.forEach((model) => this.onModelAdded(model));\n\t}\n\n\tprivate onModelAdded(model: ITextModel): void {\n\t\tconst uri =\n\t\t\tmodel.uri.scheme === Schemas.vscodeNotebookCell\n\t\t\t\t? CellUri.parse(model.uri)?.notebook\n\t\t\t\t: model.uri;\n\t\tif (!uri) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst supportedSchemes = distinct([\n\t\t\tSchemas.untitled,\n\t\t\tSchemas.file,\n\t\t\tSchemas.vscodeRemote,\n\t\t\t...this.workspaceContextService\n\t\t\t\t.getWorkspace()\n\t\t\t\t.folders.map((folder) => folder.uri.scheme),\n\t\t]);\n\t\tif (!uri || !supportedSchemes.includes(uri.scheme)) {\n\t\t\treturn;\n\t\t}\n\n\t\t// re-schedule this bit of the operation to be off the critical path - in case glob-match is slow\n\t\tdisposableTimeout(\n\t\t\t() => this.promptImportantRecommendations(uri, model),\n\t\t\t0,\n\t\t\tthis._store,\n\t\t);\n\t}\n\n\t/**\n\t * Prompt the user to either install the recommended extension for the file type in the current editor model\n\t * or prompt to search the marketplace if it has extensions that can support the file type\n\t */\n\tprivate promptImportantRecommendations(\n\t\turi: URI,\n\t\tmodel: ITextModel,\n\t\textensionRecommendations?: IStringDictionary<IFileOpenCondition[]>,\n\t): void {\n\t\tif (model.isDisposed()) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst pattern = extname(uri).toLowerCase();\n\t\textensionRecommendations =\n\t\t\textensionRecommendations ??\n\t\t\tthis.recommendationsByPattern.get(pattern) ??\n\t\t\tthis.fileOpenRecommendations;\n\t\tconst extensionRecommendationEntries = Object.entries(\n\t\t\textensionRecommendations,\n\t\t);\n\t\tif (extensionRecommendationEntries.length === 0) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst processedPathGlobs = new Map<string, boolean>();\n\t\tconst installed = this.extensionsWorkbenchService.local;\n\t\tconst recommendationsByPattern: IStringDictionary<\n\t\t\tIFileOpenCondition[]\n\t\t> = {};\n\t\tconst matchedRecommendations: IStringDictionary<IFileOpenCondition[]> =\n\t\t\t{};\n\t\tconst unmatchedRecommendations: IStringDictionary<\n\t\t\tIFileOpenCondition[]\n\t\t> = {};\n\t\tlet listenOnLanguageChange = false;\n\t\tconst languageId = model.getLanguageId();\n\n\t\tfor (const [\n\t\t\textensionId,\n\t\t\tconditions,\n\t\t] of extensionRecommendationEntries) {\n\t\t\tconst conditionsByPattern: IFileOpenCondition[] = [];\n\t\t\tconst matchedConditions: IFileOpenCondition[] = [];\n\t\t\tconst unmatchedConditions: IFileOpenCondition[] = [];\n\t\t\tfor (const condition of conditions) {\n\t\t\t\tlet languageMatched = false;\n\t\t\t\tlet pathGlobMatched = false;\n\n\t\t\t\tconst isLanguageCondition = !!(<IFileLanguageCondition>(\n\t\t\t\t\tcondition\n\t\t\t\t)).languages;\n\t\t\t\tconst isFileContentCondition = !!(<IFileContentCondition>(\n\t\t\t\t\tcondition\n\t\t\t\t)).contentPattern;\n\t\t\t\tif (isLanguageCondition || isFileContentCondition) {\n\t\t\t\t\tconditionsByPattern.push(condition);\n\t\t\t\t}\n\n\t\t\t\tif (isLanguageCondition) {\n\t\t\t\t\tif (\n\t\t\t\t\t\t(<IFileLanguageCondition>condition).languages.includes(\n\t\t\t\t\t\t\tlanguageId,\n\t\t\t\t\t\t)\n\t\t\t\t\t) {\n\t\t\t\t\t\tlanguageMatched = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif ((<IFilePathCondition>condition).pathGlob) {\n\t\t\t\t\tconst pathGlob = (<IFilePathCondition>condition).pathGlob;\n\t\t\t\t\tif (\n\t\t\t\t\t\tprocessedPathGlobs.get(pathGlob) ??\n\t\t\t\t\t\tmatch(\n\t\t\t\t\t\t\t(<IFilePathCondition>condition).pathGlob,\n\t\t\t\t\t\t\turi.with({ fragment: \"\" }).toString(),\n\t\t\t\t\t\t)\n\t\t\t\t\t) {\n\t\t\t\t\t\tpathGlobMatched = true;\n\t\t\t\t\t}\n\t\t\t\t\tprocessedPathGlobs.set(pathGlob, pathGlobMatched);\n\t\t\t\t}\n\n\t\t\t\tlet matched = languageMatched || pathGlobMatched;\n\n\t\t\t\t// If the resource has pattern (extension) and not matched, then we don't need to check the other conditions\n\t\t\t\tif (pattern && !matched) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tif (matched && condition.whenInstalled) {\n\t\t\t\t\tif (\n\t\t\t\t\t\t!condition.whenInstalled.every((id) =>\n\t\t\t\t\t\t\tinstalled.some((local) =>\n\t\t\t\t\t\t\t\tareSameExtensions({ id }, local.identifier),\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t)\n\t\t\t\t\t) {\n\t\t\t\t\t\tmatched = false;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (matched && condition.whenNotInstalled) {\n\t\t\t\t\tif (\n\t\t\t\t\t\tinstalled.some((local) =>\n\t\t\t\t\t\t\tcondition.whenNotInstalled?.some((id) =>\n\t\t\t\t\t\t\t\tareSameExtensions({ id }, local.identifier),\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t)\n\t\t\t\t\t) {\n\t\t\t\t\t\tmatched = false;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (matched && isFileContentCondition) {\n\t\t\t\t\tif (\n\t\t\t\t\t\t!model.findMatches(\n\t\t\t\t\t\t\t(<IFileContentCondition>condition).contentPattern,\n\t\t\t\t\t\t\tfalse,\n\t\t\t\t\t\t\ttrue,\n\t\t\t\t\t\t\tfalse,\n\t\t\t\t\t\t\tnull,\n\t\t\t\t\t\t\tfalse,\n\t\t\t\t\t\t).length\n\t\t\t\t\t) {\n\t\t\t\t\t\tmatched = false;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (matched) {\n\t\t\t\t\tmatchedConditions.push(condition);\n\t\t\t\t\tconditionsByPattern.pop();\n\t\t\t\t} else if (isLanguageCondition || isFileContentCondition) {\n\t\t\t\t\tunmatchedConditions.push(condition);\n\t\t\t\t\tif (isLanguageCondition) {\n\t\t\t\t\t\tlistenOnLanguageChange = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (matchedConditions.length) {\n\t\t\t\tmatchedRecommendations[extensionId] = matchedConditions;\n\t\t\t}\n\t\t\tif (unmatchedConditions.length) {\n\t\t\t\tunmatchedRecommendations[extensionId] = unmatchedConditions;\n\t\t\t}\n\t\t\tif (conditionsByPattern.length) {\n\t\t\t\trecommendationsByPattern[extensionId] = conditionsByPattern;\n\t\t\t}\n\t\t}\n\n\t\tif (pattern) {\n\t\t\tthis.recommendationsByPattern.set(\n\t\t\t\tpattern,\n\t\t\t\trecommendationsByPattern,\n\t\t\t);\n\t\t}\n\t\tif (Object.keys(unmatchedRecommendations).length) {\n\t\t\tif (listenOnLanguageChange) {\n\t\t\t\tconst disposables = new DisposableStore();\n\t\t\t\tdisposables.add(\n\t\t\t\t\tmodel.onDidChangeLanguage(() => {\n\t\t\t\t\t\t// re-schedule this bit of the operation to be off the critical path - in case glob-match is slow\n\t\t\t\t\t\tdisposableTimeout(\n\t\t\t\t\t\t\t() => {\n\t\t\t\t\t\t\t\tif (!disposables.isDisposed) {\n\t\t\t\t\t\t\t\t\tthis.promptImportantRecommendations(\n\t\t\t\t\t\t\t\t\t\turi,\n\t\t\t\t\t\t\t\t\t\tmodel,\n\t\t\t\t\t\t\t\t\t\tunmatchedRecommendations,\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\tdisposables.dispose();\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t0,\n\t\t\t\t\t\t\tdisposables,\n\t\t\t\t\t\t);\n\t\t\t\t\t}),\n\t\t\t\t);\n\t\t\t\tdisposables.add(\n\t\t\t\t\tmodel.onWillDispose(() => disposables.dispose()),\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\tif (Object.keys(matchedRecommendations).length) {\n\t\t\tthis.promptFromRecommendations(uri, model, matchedRecommendations);\n\t\t}\n\t}\n\n\tprivate promptFromRecommendations(\n\t\turi: URI,\n\t\tmodel: ITextModel,\n\t\textensionRecommendations: IStringDictionary<IFileOpenCondition[]>,\n\t): void {\n\t\tlet isImportantRecommendationForLanguage = false;\n\t\tconst importantRecommendations = new Set<string>();\n\t\tconst fileBasedRecommendations = new Set<string>();\n\t\tfor (const [extensionId, conditions] of Object.entries(\n\t\t\textensionRecommendations,\n\t\t)) {\n\t\t\tfor (const condition of conditions) {\n\t\t\t\tfileBasedRecommendations.add(extensionId);\n\t\t\t\tif (condition.important) {\n\t\t\t\t\timportantRecommendations.add(extensionId);\n\t\t\t\t\tthis.fileBasedImportantRecommendations.add(extensionId);\n\t\t\t\t}\n\t\t\t\tif ((<IFileLanguageCondition>condition).languages) {\n\t\t\t\t\tisImportantRecommendationForLanguage = true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Update file based recommendations\n\t\tfor (const recommendation of fileBasedRecommendations) {\n\t\t\tconst filedBasedRecommendation = this.fileBasedRecommendations.get(\n\t\t\t\trecommendation,\n\t\t\t) || { recommendedTime: Date.now(), sources: [] };\n\t\t\tfiledBasedRecommendation.recommendedTime = Date.now();\n\t\t\tthis.fileBasedRecommendations.set(\n\t\t\t\trecommendation,\n\t\t\t\tfiledBasedRecommendation,\n\t\t\t);\n\t\t}\n\n\t\tthis.storeCachedRecommendations();\n\n\t\tif (\n\t\t\tthis.extensionRecommendationNotificationService.hasToIgnoreRecommendationNotifications()\n\t\t) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst language = model.getLanguageId();\n\t\tconst languageName = this.languageService.getLanguageName(language);\n\t\tif (\n\t\t\timportantRecommendations.size &&\n\t\t\tthis.promptRecommendedExtensionForFileType(\n\t\t\t\tlanguageName &&\n\t\t\t\t\tisImportantRecommendationForLanguage &&\n\t\t\t\t\tlanguage !== PLAINTEXT_LANGUAGE_ID\n\t\t\t\t\t? localize(\"languageName\", \"the {0} language\", languageName)\n\t\t\t\t\t: basename(uri),\n\t\t\t\tlanguage,\n\t\t\t\t[...importantRecommendations],\n\t\t\t)\n\t\t) {\n\t\t\treturn;\n\t\t}\n\t}\n\n\tprivate promptRecommendedExtensionForFileType(\n\t\tname: string,\n\t\tlanguage: string,\n\t\trecommendations: string[],\n\t): boolean {\n\t\trecommendations = this.filterIgnoredOrNotAllowed(recommendations);\n\t\tif (recommendations.length === 0) {\n\t\t\treturn false;\n\t\t}\n\n\t\trecommendations = this.filterInstalled(\n\t\t\trecommendations,\n\t\t\tthis.extensionsWorkbenchService.local,\n\t\t).filter((extensionId) =>\n\t\t\tthis.fileBasedImportantRecommendations.has(extensionId),\n\t\t);\n\n\t\tconst promptedRecommendations =\n\t\t\tlanguage !== PLAINTEXT_LANGUAGE_ID\n\t\t\t\t? this.getPromptedRecommendations()[language]\n\t\t\t\t: undefined;\n\t\tif (promptedRecommendations) {\n\t\t\trecommendations = recommendations.filter((extensionId) =>\n\t\t\t\tpromptedRecommendations.includes(extensionId),\n\t\t\t);\n\t\t}\n\n\t\tif (recommendations.length === 0) {\n\t\t\treturn false;\n\t\t}\n\n\t\tthis.promptImportantExtensionsInstallNotification(\n\t\t\trecommendations,\n\t\t\tname,\n\t\t\tlanguage,\n\t\t);\n\t\treturn true;\n\t}\n\n\tprivate async promptImportantExtensionsInstallNotification(\n\t\textensions: string[],\n\t\tname: string,\n\t\tlanguage: string,\n\t): Promise<void> {\n\t\ttry {\n\t\t\tconst result =\n\t\t\t\tawait this.extensionRecommendationNotificationService.promptImportantExtensionsInstallNotification(\n\t\t\t\t\t{ extensions, name, source: RecommendationSource.FILE },\n\t\t\t\t);\n\t\t\tif (result === RecommendationsNotificationResult.Accepted) {\n\t\t\t\tthis.addToPromptedRecommendations(language, extensions);\n\t\t\t}\n\t\t} catch (error) {\n\t\t\t/* Ignore */\n\t\t}\n\t}\n\n\tprivate getPromptedRecommendations(): IStringDictionary<string[]> {\n\t\treturn JSON.parse(\n\t\t\tthis.storageService.get(\n\t\t\t\tpromptedRecommendationsStorageKey,\n\t\t\t\tStorageScope.PROFILE,\n\t\t\t\t\"{}\",\n\t\t\t),\n\t\t);\n\t}\n\n\tprivate addToPromptedRecommendations(\n\t\tlanguage: string,\n\t\textensions: string[],\n\t) {\n\t\tconst promptedRecommendations = this.getPromptedRecommendations();\n\t\tpromptedRecommendations[language] = distinct([\n\t\t\t...(promptedRecommendations[language] ?? []),\n\t\t\t...extensions,\n\t\t]);\n\t\tthis.storageService.store(\n\t\t\tpromptedRecommendationsStorageKey,\n\t\t\tJSON.stringify(promptedRecommendations),\n\t\t\tStorageScope.PROFILE,\n\t\t\tStorageTarget.USER,\n\t\t);\n\t}\n\n\tprivate filterIgnoredOrNotAllowed(\n\t\trecommendationsToSuggest: string[],\n\t): string[] {\n\t\tconst ignoredRecommendations = [\n\t\t\t...this.extensionIgnoredRecommendationsService\n\t\t\t\t.ignoredRecommendations,\n\t\t\t...this.extensionRecommendationNotificationService\n\t\t\t\t.ignoredRecommendations,\n\t\t];\n\t\treturn recommendationsToSuggest.filter(\n\t\t\t(id) => !ignoredRecommendations.includes(id),\n\t\t);\n\t}\n\n\tprivate filterInstalled(\n\t\trecommendationsToSuggest: string[],\n\t\tinstalled: IExtension[],\n\t): string[] {\n\t\tconst installedExtensionsIds = installed.reduce((result, i) => {\n\t\t\tif (i.enablementState !== EnablementState.DisabledByExtensionKind) {\n\t\t\t\tresult.add(i.identifier.id.toLowerCase());\n\t\t\t}\n\t\t\treturn result;\n\t\t}, new Set<string>());\n\t\treturn recommendationsToSuggest.filter(\n\t\t\t(id) => !installedExtensionsIds.has(id.toLowerCase()),\n\t\t);\n\t}\n\n\tprivate getCachedRecommendations(): IStringDictionary<number> {\n\t\tlet storedRecommendations = JSON.parse(\n\t\t\tthis.storageService.get(\n\t\t\t\trecommendationsStorageKey,\n\t\t\t\tStorageScope.PROFILE,\n\t\t\t\t\"[]\",\n\t\t\t),\n\t\t);\n\t\tif (Array.isArray(storedRecommendations)) {\n\t\t\tstoredRecommendations = storedRecommendations.reduce<\n\t\t\t\tIStringDictionary<number>\n\t\t\t>((result, id) => {\n\t\t\t\tresult[id] = Date.now();\n\t\t\t\treturn result;\n\t\t\t}, {});\n\t\t}\n\t\tconst result: IStringDictionary<number> = {};\n\t\tObject.entries(storedRecommendations).forEach(([key, value]) => {\n\t\t\tif (typeof value === \"number\") {\n\t\t\t\tresult[key.toLowerCase()] = value;\n\t\t\t}\n\t\t});\n\t\treturn result;\n\t}\n\n\tprivate storeCachedRecommendations(): void {\n\t\tconst storedRecommendations: IStringDictionary<number> = {};\n\t\tthis.fileBasedRecommendations.forEach(\n\t\t\t(value, key) =>\n\t\t\t\t(storedRecommendations[key] = value.recommendedTime),\n\t\t);\n\t\tthis.storageService.store(\n\t\t\trecommendationsStorageKey,\n\t\t\tJSON.stringify(storedRecommendations),\n\t\t\tStorageScope.PROFILE,\n\t\t\tStorageTarget.MACHINE,\n\t\t);\n\t}\n}\n"],
  "mappings": "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",
  "names": ["result"]
}
