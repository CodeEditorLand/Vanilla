{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/extensions/browser/exeBasedRecommendations.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { localize } from \"../../../../nls.js\";\nimport {\n\ttype IExecutableBasedExtensionTip,\n\tIExtensionTipsService,\n} from \"../../../../platform/extensionManagement/common/extensionManagement.js\";\nimport { ExtensionRecommendationReason } from \"../../../services/extensionRecommendations/common/extensionRecommendations.js\";\nimport {\n\ttype ExtensionRecommendation,\n\tExtensionRecommendations,\n} from \"./extensionRecommendations.js\";\n\nexport class ExeBasedRecommendations extends ExtensionRecommendations {\n\tprivate _otherTips: IExecutableBasedExtensionTip[] = [];\n\tprivate _importantTips: IExecutableBasedExtensionTip[] = [];\n\n\tget otherRecommendations(): ReadonlyArray<ExtensionRecommendation> {\n\t\treturn this._otherTips.map((tip) =>\n\t\t\tthis.toExtensionRecommendation(tip),\n\t\t);\n\t}\n\tget importantRecommendations(): ReadonlyArray<ExtensionRecommendation> {\n\t\treturn this._importantTips.map((tip) =>\n\t\t\tthis.toExtensionRecommendation(tip),\n\t\t);\n\t}\n\n\tget recommendations(): ReadonlyArray<ExtensionRecommendation> {\n\t\treturn [...this.importantRecommendations, ...this.otherRecommendations];\n\t}\n\n\tconstructor(\n\t\t@IExtensionTipsService private readonly extensionTipsService: IExtensionTipsService,\n\t) {\n\t\tsuper();\n\t}\n\n\tgetRecommendations(exe: string): {\n\t\timportant: ExtensionRecommendation[];\n\t\tothers: ExtensionRecommendation[];\n\t} {\n\t\tconst important = this._importantTips\n\t\t\t.filter((tip) => tip.exeName.toLowerCase() === exe.toLowerCase())\n\t\t\t.map((tip) => this.toExtensionRecommendation(tip));\n\n\t\tconst others = this._otherTips\n\t\t\t.filter((tip) => tip.exeName.toLowerCase() === exe.toLowerCase())\n\t\t\t.map((tip) => this.toExtensionRecommendation(tip));\n\n\t\treturn { important, others };\n\t}\n\n\tprotected async doActivate(): Promise<void> {\n\t\tthis._otherTips =\n\t\t\tawait this.extensionTipsService.getOtherExecutableBasedTips();\n\t\tawait this.fetchImportantExeBasedRecommendations();\n\t}\n\n\tprivate _importantExeBasedRecommendations:\n\t\t| Promise<Map<string, IExecutableBasedExtensionTip>>\n\t\t| undefined;\n\tprivate async fetchImportantExeBasedRecommendations(): Promise<\n\t\tMap<string, IExecutableBasedExtensionTip>\n\t> {\n\t\tif (!this._importantExeBasedRecommendations) {\n\t\t\tthis._importantExeBasedRecommendations =\n\t\t\t\tthis.doFetchImportantExeBasedRecommendations();\n\t\t}\n\t\treturn this._importantExeBasedRecommendations;\n\t}\n\n\tprivate async doFetchImportantExeBasedRecommendations(): Promise<\n\t\tMap<string, IExecutableBasedExtensionTip>\n\t> {\n\t\tconst importantExeBasedRecommendations = new Map<\n\t\t\tstring,\n\t\t\tIExecutableBasedExtensionTip\n\t\t>();\n\t\tthis._importantTips =\n\t\t\tawait this.extensionTipsService.getImportantExecutableBasedTips();\n\t\tthis._importantTips.forEach((tip) =>\n\t\t\timportantExeBasedRecommendations.set(\n\t\t\t\ttip.extensionId.toLowerCase(),\n\t\t\t\ttip,\n\t\t\t),\n\t\t);\n\t\treturn importantExeBasedRecommendations;\n\t}\n\n\tprivate toExtensionRecommendation(\n\t\ttip: IExecutableBasedExtensionTip,\n\t): ExtensionRecommendation {\n\t\treturn {\n\t\t\textension: tip.extensionId.toLowerCase(),\n\t\t\treason: {\n\t\t\t\treasonId: ExtensionRecommendationReason.Executable,\n\t\t\t\treasonText: localize(\n\t\t\t\t\t\"exeBasedRecommendation\",\n\t\t\t\t\t\"This extension is recommended because you have {0} installed.\",\n\t\t\t\t\ttip.exeFriendlyName,\n\t\t\t\t),\n\t\t\t},\n\t\t};\n\t}\n}\n"],
  "mappings": ";;;;;;;;;;;;AAKA,SAAS,gBAAgB;AACzB;AAAA,EAEC;AAAA,OACM;AACP,SAAS,qCAAqC;AAC9C;AAAA,EAEC;AAAA,OACM;AAEA,IAAM,0BAAN,cAAsC,yBAAyB;AAAA,EAmBrE,YACyC,sBACvC;AACD,UAAM;AAFkC;AAAA,EAGzC;AAAA,EAvCD,OAgBsE;AAAA;AAAA;AAAA,EAC7D,aAA6C,CAAC;AAAA,EAC9C,iBAAiD,CAAC;AAAA,EAE1D,IAAI,uBAA+D;AAClE,WAAO,KAAK,WAAW;AAAA,MAAI,CAAC,QAC3B,KAAK,0BAA0B,GAAG;AAAA,IACnC;AAAA,EACD;AAAA,EACA,IAAI,2BAAmE;AACtE,WAAO,KAAK,eAAe;AAAA,MAAI,CAAC,QAC/B,KAAK,0BAA0B,GAAG;AAAA,IACnC;AAAA,EACD;AAAA,EAEA,IAAI,kBAA0D;AAC7D,WAAO,CAAC,GAAG,KAAK,0BAA0B,GAAG,KAAK,oBAAoB;AAAA,EACvE;AAAA,EAQA,mBAAmB,KAGjB;AACD,UAAM,YAAY,KAAK,eACrB,OAAO,CAAC,QAAQ,IAAI,QAAQ,YAAY,MAAM,IAAI,YAAY,CAAC,EAC/D,IAAI,CAAC,QAAQ,KAAK,0BAA0B,GAAG,CAAC;AAElD,UAAM,SAAS,KAAK,WAClB,OAAO,CAAC,QAAQ,IAAI,QAAQ,YAAY,MAAM,IAAI,YAAY,CAAC,EAC/D,IAAI,CAAC,QAAQ,KAAK,0BAA0B,GAAG,CAAC;AAElD,WAAO,EAAE,WAAW,OAAO;AAAA,EAC5B;AAAA,EAEA,MAAgB,aAA4B;AAC3C,SAAK,aACJ,MAAM,KAAK,qBAAqB,4BAA4B;AAC7D,UAAM,KAAK,sCAAsC;AAAA,EAClD;AAAA,EAEQ;AAAA,EAGR,MAAc,wCAEZ;AACD,QAAI,CAAC,KAAK,mCAAmC;AAC5C,WAAK,oCACJ,KAAK,wCAAwC;AAAA,IAC/C;AACA,WAAO,KAAK;AAAA,EACb;AAAA,EAEA,MAAc,0CAEZ;AACD,UAAM,mCAAmC,oBAAI,IAG3C;AACF,SAAK,iBACJ,MAAM,KAAK,qBAAqB,gCAAgC;AACjE,SAAK,eAAe;AAAA,MAAQ,CAAC,QAC5B,iCAAiC;AAAA,QAChC,IAAI,YAAY,YAAY;AAAA,QAC5B;AAAA,MACD;AAAA,IACD;AACA,WAAO;AAAA,EACR;AAAA,EAEQ,0BACP,KAC0B;AAC1B,WAAO;AAAA,MACN,WAAW,IAAI,YAAY,YAAY;AAAA,MACvC,QAAQ;AAAA,QACP,UAAU,8BAA8B;AAAA,QACxC,YAAY;AAAA,UACX;AAAA,UACA;AAAA,UACA,IAAI;AAAA,QACL;AAAA,MACD;AAAA,IACD;AAAA,EACD;AACD;AA5Fa,0BAAN;AAAA,EAoBJ;AAAA,GApBU;",
  "names": []
}
