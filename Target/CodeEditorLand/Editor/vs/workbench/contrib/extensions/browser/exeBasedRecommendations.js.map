{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/extensions/browser/exeBasedRecommendations.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IExtensionTipsService, IExecutableBasedExtensionTip } from '../../../../platform/extensionManagement/common/extensionManagement.js';\nimport { ExtensionRecommendations, ExtensionRecommendation } from './extensionRecommendations.js';\nimport { localize } from '../../../../nls.js';\nimport { ExtensionRecommendationReason } from '../../../services/extensionRecommendations/common/extensionRecommendations.js';\n\nexport class ExeBasedRecommendations extends ExtensionRecommendations {\n\n\tprivate _otherTips: IExecutableBasedExtensionTip[] = [];\n\tprivate _importantTips: IExecutableBasedExtensionTip[] = [];\n\n\tget otherRecommendations(): ReadonlyArray<ExtensionRecommendation> { return this._otherTips.map(tip => this.toExtensionRecommendation(tip)); }\n\tget importantRecommendations(): ReadonlyArray<ExtensionRecommendation> { return this._importantTips.map(tip => this.toExtensionRecommendation(tip)); }\n\n\tget recommendations(): ReadonlyArray<ExtensionRecommendation> { return [...this.importantRecommendations, ...this.otherRecommendations]; }\n\n\tconstructor(\n\t\t@IExtensionTipsService private readonly extensionTipsService: IExtensionTipsService,\n\t) {\n\t\tsuper();\n\t}\n\n\tgetRecommendations(exe: string): { important: ExtensionRecommendation[]; others: ExtensionRecommendation[] } {\n\t\tconst important = this._importantTips\n\t\t\t.filter(tip => tip.exeName.toLowerCase() === exe.toLowerCase())\n\t\t\t.map(tip => this.toExtensionRecommendation(tip));\n\n\t\tconst others = this._otherTips\n\t\t\t.filter(tip => tip.exeName.toLowerCase() === exe.toLowerCase())\n\t\t\t.map(tip => this.toExtensionRecommendation(tip));\n\n\t\treturn { important, others };\n\t}\n\n\tprotected async doActivate(): Promise<void> {\n\t\tthis._otherTips = await this.extensionTipsService.getOtherExecutableBasedTips();\n\t\tawait this.fetchImportantExeBasedRecommendations();\n\t}\n\n\tprivate _importantExeBasedRecommendations: Promise<Map<string, IExecutableBasedExtensionTip>> | undefined;\n\tprivate async fetchImportantExeBasedRecommendations(): Promise<Map<string, IExecutableBasedExtensionTip>> {\n\t\tif (!this._importantExeBasedRecommendations) {\n\t\t\tthis._importantExeBasedRecommendations = this.doFetchImportantExeBasedRecommendations();\n\t\t}\n\t\treturn this._importantExeBasedRecommendations;\n\t}\n\n\tprivate async doFetchImportantExeBasedRecommendations(): Promise<Map<string, IExecutableBasedExtensionTip>> {\n\t\tconst importantExeBasedRecommendations = new Map<string, IExecutableBasedExtensionTip>();\n\t\tthis._importantTips = await this.extensionTipsService.getImportantExecutableBasedTips();\n\t\tthis._importantTips.forEach(tip => importantExeBasedRecommendations.set(tip.extensionId.toLowerCase(), tip));\n\t\treturn importantExeBasedRecommendations;\n\t}\n\n\tprivate toExtensionRecommendation(tip: IExecutableBasedExtensionTip): ExtensionRecommendation {\n\t\treturn {\n\t\t\textension: tip.extensionId.toLowerCase(),\n\t\t\treason: {\n\t\t\t\treasonId: ExtensionRecommendationReason.Executable,\n\t\t\t\treasonText: localize('exeBasedRecommendation', \"This extension is recommended because you have {0} installed.\", tip.exeFriendlyName)\n\t\t\t}\n\t\t};\n\t}\n\n}\n\n"],
  "mappings": ";;;;;;;;;;;;AAKA,SAAS,uBAAuB,oCAAoC;AACpE,SAAS,0BAA0B,+BAA+B;AAClE,SAAS,gBAAgB;AACzB,SAAS,qCAAqC;AAEvC,IAAM,0BAAN,cAAsC,yBAAyB;AAAA,EAUrE,YACyC,sBACvC;AACD,UAAM;AAFkC;AAAA,EAGzC;AAAA,EAxBD,OAUsE;AAAA;AAAA;AAAA,EAE7D,aAA6C,CAAC;AAAA,EAC9C,iBAAiD,CAAC;AAAA,EAE1D,IAAI,uBAA+D;AAAE,WAAO,KAAK,WAAW,IAAI,SAAO,KAAK,0BAA0B,GAAG,CAAC;AAAA,EAAG;AAAA,EAC7I,IAAI,2BAAmE;AAAE,WAAO,KAAK,eAAe,IAAI,SAAO,KAAK,0BAA0B,GAAG,CAAC;AAAA,EAAG;AAAA,EAErJ,IAAI,kBAA0D;AAAE,WAAO,CAAC,GAAG,KAAK,0BAA0B,GAAG,KAAK,oBAAoB;AAAA,EAAG;AAAA,EAQzI,mBAAmB,KAA0F;AAC5G,UAAM,YAAY,KAAK,eACrB,OAAO,SAAO,IAAI,QAAQ,YAAY,MAAM,IAAI,YAAY,CAAC,EAC7D,IAAI,SAAO,KAAK,0BAA0B,GAAG,CAAC;AAEhD,UAAM,SAAS,KAAK,WAClB,OAAO,SAAO,IAAI,QAAQ,YAAY,MAAM,IAAI,YAAY,CAAC,EAC7D,IAAI,SAAO,KAAK,0BAA0B,GAAG,CAAC;AAEhD,WAAO,EAAE,WAAW,OAAO;AAAA,EAC5B;AAAA,EAEA,MAAgB,aAA4B;AAC3C,SAAK,aAAa,MAAM,KAAK,qBAAqB,4BAA4B;AAC9E,UAAM,KAAK,sCAAsC;AAAA,EAClD;AAAA,EAEQ;AAAA,EACR,MAAc,wCAA4F;AACzG,QAAI,CAAC,KAAK,mCAAmC;AAC5C,WAAK,oCAAoC,KAAK,wCAAwC;AAAA,IACvF;AACA,WAAO,KAAK;AAAA,EACb;AAAA,EAEA,MAAc,0CAA8F;AAC3G,UAAM,mCAAmC,oBAAI,IAA0C;AACvF,SAAK,iBAAiB,MAAM,KAAK,qBAAqB,gCAAgC;AACtF,SAAK,eAAe,QAAQ,SAAO,iCAAiC,IAAI,IAAI,YAAY,YAAY,GAAG,GAAG,CAAC;AAC3G,WAAO;AAAA,EACR;AAAA,EAEQ,0BAA0B,KAA4D;AAC7F,WAAO;AAAA,MACN,WAAW,IAAI,YAAY,YAAY;AAAA,MACvC,QAAQ;AAAA,QACP,UAAU,8BAA8B;AAAA,QACxC,YAAY,SAAS,0BAA0B,iEAAiE,IAAI,eAAe;AAAA,MACpI;AAAA,IACD;AAAA,EACD;AAED;AA1Da,0BAAN;AAAA,EAWJ;AAAA,GAXU;",
  "names": []
}
