{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/extensions/browser/configBasedRecommendations.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Emitter } from \"../../../../base/common/event.js\";\nimport { localize } from \"../../../../nls.js\";\nimport {\n\ttype IConfigBasedExtensionTip,\n\tIExtensionTipsService,\n} from \"../../../../platform/extensionManagement/common/extensionManagement.js\";\nimport {\n\tIWorkspaceContextService,\n\ttype IWorkspaceFoldersChangeEvent,\n} from \"../../../../platform/workspace/common/workspace.js\";\nimport { ExtensionRecommendationReason } from \"../../../services/extensionRecommendations/common/extensionRecommendations.js\";\nimport {\n\ttype ExtensionRecommendation,\n\tExtensionRecommendations,\n} from \"./extensionRecommendations.js\";\n\ntype ConfigBasedExtensionRecommendation = ExtensionRecommendation & {\n\twhenNotInstalled: string[] | undefined;\n};\n\nexport class ConfigBasedRecommendations extends ExtensionRecommendations {\n\tprivate importantTips: IConfigBasedExtensionTip[] = [];\n\tprivate otherTips: IConfigBasedExtensionTip[] = [];\n\n\tprivate _onDidChangeRecommendations = this._register(new Emitter<void>());\n\treadonly onDidChangeRecommendations =\n\t\tthis._onDidChangeRecommendations.event;\n\n\tprivate _otherRecommendations: ConfigBasedExtensionRecommendation[] = [];\n\tget otherRecommendations(): ReadonlyArray<ConfigBasedExtensionRecommendation> {\n\t\treturn this._otherRecommendations;\n\t}\n\n\tprivate _importantRecommendations: ConfigBasedExtensionRecommendation[] =\n\t\t[];\n\tget importantRecommendations(): ReadonlyArray<ConfigBasedExtensionRecommendation> {\n\t\treturn this._importantRecommendations;\n\t}\n\n\tget recommendations(): ReadonlyArray<ConfigBasedExtensionRecommendation> {\n\t\treturn [...this.importantRecommendations, ...this.otherRecommendations];\n\t}\n\n\tconstructor(\n\t\t@IExtensionTipsService private readonly extensionTipsService: IExtensionTipsService,\n\t\t@IWorkspaceContextService private readonly workspaceContextService: IWorkspaceContextService,\n\t) {\n\t\tsuper();\n\t}\n\n\tprotected async doActivate(): Promise<void> {\n\t\tawait this.fetch();\n\t\tthis._register(\n\t\t\tthis.workspaceContextService.onDidChangeWorkspaceFolders((e) =>\n\t\t\t\tthis.onWorkspaceFoldersChanged(e),\n\t\t\t),\n\t\t);\n\t}\n\n\tprivate async fetch(): Promise<void> {\n\t\tconst workspace = this.workspaceContextService.getWorkspace();\n\t\tconst importantTips: Map<string, IConfigBasedExtensionTip> = new Map<\n\t\t\tstring,\n\t\t\tIConfigBasedExtensionTip\n\t\t>();\n\t\tconst otherTips: Map<string, IConfigBasedExtensionTip> = new Map<\n\t\t\tstring,\n\t\t\tIConfigBasedExtensionTip\n\t\t>();\n\t\tfor (const folder of workspace.folders) {\n\t\t\tconst configBasedTips =\n\t\t\t\tawait this.extensionTipsService.getConfigBasedTips(folder.uri);\n\t\t\tfor (const tip of configBasedTips) {\n\t\t\t\tif (tip.important) {\n\t\t\t\t\timportantTips.set(tip.extensionId, tip);\n\t\t\t\t} else {\n\t\t\t\t\totherTips.set(tip.extensionId, tip);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tthis.importantTips = [...importantTips.values()];\n\t\tthis.otherTips = [...otherTips.values()].filter(\n\t\t\t(tip) => !importantTips.has(tip.extensionId),\n\t\t);\n\t\tthis._otherRecommendations = this.otherTips.map((tip) =>\n\t\t\tthis.toExtensionRecommendation(tip),\n\t\t);\n\t\tthis._importantRecommendations = this.importantTips.map((tip) =>\n\t\t\tthis.toExtensionRecommendation(tip),\n\t\t);\n\t}\n\n\tprivate async onWorkspaceFoldersChanged(\n\t\tevent: IWorkspaceFoldersChangeEvent,\n\t): Promise<void> {\n\t\tif (event.added.length) {\n\t\t\tconst oldImportantRecommended = this.importantTips;\n\t\t\tawait this.fetch();\n\t\t\t// Suggest only if at least one of the newly added recommendations was not suggested before\n\t\t\tif (\n\t\t\t\tthis.importantTips.some((current) =>\n\t\t\t\t\toldImportantRecommended.every(\n\t\t\t\t\t\t(old) => current.extensionId !== old.extensionId,\n\t\t\t\t\t),\n\t\t\t\t)\n\t\t\t) {\n\t\t\t\tthis._onDidChangeRecommendations.fire();\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate toExtensionRecommendation(\n\t\ttip: IConfigBasedExtensionTip,\n\t): ConfigBasedExtensionRecommendation {\n\t\treturn {\n\t\t\textension: tip.extensionId,\n\t\t\treason: {\n\t\t\t\treasonId: ExtensionRecommendationReason.WorkspaceConfig,\n\t\t\t\treasonText: localize(\n\t\t\t\t\t\"exeBasedRecommendation\",\n\t\t\t\t\t\"This extension is recommended because of the current workspace configuration\",\n\t\t\t\t),\n\t\t\t},\n\t\t\twhenNotInstalled: tip.whenNotInstalled,\n\t\t};\n\t}\n}\n"],
  "mappings": ";;;;;;;;;;;;AAKA,SAAS,eAAe;AACxB,SAAS,gBAAgB;AACzB;AAAA,EAEC;AAAA,OACM;AACP;AAAA,EACC;AAAA,OAEM;AACP,SAAS,qCAAqC;AAC9C;AAAA,EAEC;AAAA,OACM;AAMA,IAAM,6BAAN,cAAyC,yBAAyB;AAAA,EAuBxE,YACyC,sBACG,yBAC1C;AACD,UAAM;AAHkC;AACG;AAAA,EAG5C;AAAA,EArDD,OAyByE;AAAA;AAAA;AAAA,EAChE,gBAA4C,CAAC;AAAA,EAC7C,YAAwC,CAAC;AAAA,EAEzC,8BAA8B,KAAK,UAAU,IAAI,QAAc,CAAC;AAAA,EAC/D,6BACR,KAAK,4BAA4B;AAAA,EAE1B,wBAA8D,CAAC;AAAA,EACvE,IAAI,uBAA0E;AAC7E,WAAO,KAAK;AAAA,EACb;AAAA,EAEQ,4BACP,CAAC;AAAA,EACF,IAAI,2BAA8E;AACjF,WAAO,KAAK;AAAA,EACb;AAAA,EAEA,IAAI,kBAAqE;AACxE,WAAO,CAAC,GAAG,KAAK,0BAA0B,GAAG,KAAK,oBAAoB;AAAA,EACvE;AAAA,EASA,MAAgB,aAA4B;AAC3C,UAAM,KAAK,MAAM;AACjB,SAAK;AAAA,MACJ,KAAK,wBAAwB;AAAA,QAA4B,CAAC,MACzD,KAAK,0BAA0B,CAAC;AAAA,MACjC;AAAA,IACD;AAAA,EACD;AAAA,EAEA,MAAc,QAAuB;AACpC,UAAM,YAAY,KAAK,wBAAwB,aAAa;AAC5D,UAAM,gBAAuD,oBAAI,IAG/D;AACF,UAAM,YAAmD,oBAAI,IAG3D;AACF,eAAW,UAAU,UAAU,SAAS;AACvC,YAAM,kBACL,MAAM,KAAK,qBAAqB,mBAAmB,OAAO,GAAG;AAC9D,iBAAW,OAAO,iBAAiB;AAClC,YAAI,IAAI,WAAW;AAClB,wBAAc,IAAI,IAAI,aAAa,GAAG;AAAA,QACvC,OAAO;AACN,oBAAU,IAAI,IAAI,aAAa,GAAG;AAAA,QACnC;AAAA,MACD;AAAA,IACD;AACA,SAAK,gBAAgB,CAAC,GAAG,cAAc,OAAO,CAAC;AAC/C,SAAK,YAAY,CAAC,GAAG,UAAU,OAAO,CAAC,EAAE;AAAA,MACxC,CAAC,QAAQ,CAAC,cAAc,IAAI,IAAI,WAAW;AAAA,IAC5C;AACA,SAAK,wBAAwB,KAAK,UAAU;AAAA,MAAI,CAAC,QAChD,KAAK,0BAA0B,GAAG;AAAA,IACnC;AACA,SAAK,4BAA4B,KAAK,cAAc;AAAA,MAAI,CAAC,QACxD,KAAK,0BAA0B,GAAG;AAAA,IACnC;AAAA,EACD;AAAA,EAEA,MAAc,0BACb,OACgB;AAChB,QAAI,MAAM,MAAM,QAAQ;AACvB,YAAM,0BAA0B,KAAK;AACrC,YAAM,KAAK,MAAM;AAEjB,UACC,KAAK,cAAc;AAAA,QAAK,CAAC,YACxB,wBAAwB;AAAA,UACvB,CAAC,QAAQ,QAAQ,gBAAgB,IAAI;AAAA,QACtC;AAAA,MACD,GACC;AACD,aAAK,4BAA4B,KAAK;AAAA,MACvC;AAAA,IACD;AAAA,EACD;AAAA,EAEQ,0BACP,KACqC;AACrC,WAAO;AAAA,MACN,WAAW,IAAI;AAAA,MACf,QAAQ;AAAA,QACP,UAAU,8BAA8B;AAAA,QACxC,YAAY;AAAA,UACX;AAAA,UACA;AAAA,QACD;AAAA,MACD;AAAA,MACA,kBAAkB,IAAI;AAAA,IACvB;AAAA,EACD;AACD;AA1Ga,6BAAN;AAAA,EAwBJ;AAAA,EACA;AAAA,GAzBU;",
  "names": []
}
