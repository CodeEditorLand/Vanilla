{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/extensions/browser/configBasedRecommendations.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IExtensionTipsService, IConfigBasedExtensionTip } from '../../../../platform/extensionManagement/common/extensionManagement.js';\nimport { ExtensionRecommendations, ExtensionRecommendation } from './extensionRecommendations.js';\nimport { localize } from '../../../../nls.js';\nimport { ExtensionRecommendationReason } from '../../../services/extensionRecommendations/common/extensionRecommendations.js';\nimport { IWorkspaceContextService, IWorkspaceFoldersChangeEvent } from '../../../../platform/workspace/common/workspace.js';\nimport { Emitter } from '../../../../base/common/event.js';\n\ntype ConfigBasedExtensionRecommendation = ExtensionRecommendation & { whenNotInstalled: string[] | undefined };\n\nexport class ConfigBasedRecommendations extends ExtensionRecommendations {\n\n\tprivate importantTips: IConfigBasedExtensionTip[] = [];\n\tprivate otherTips: IConfigBasedExtensionTip[] = [];\n\n\tprivate _onDidChangeRecommendations = this._register(new Emitter<void>());\n\treadonly onDidChangeRecommendations = this._onDidChangeRecommendations.event;\n\n\tprivate _otherRecommendations: ConfigBasedExtensionRecommendation[] = [];\n\tget otherRecommendations(): ReadonlyArray<ConfigBasedExtensionRecommendation> { return this._otherRecommendations; }\n\n\tprivate _importantRecommendations: ConfigBasedExtensionRecommendation[] = [];\n\tget importantRecommendations(): ReadonlyArray<ConfigBasedExtensionRecommendation> { return this._importantRecommendations; }\n\n\tget recommendations(): ReadonlyArray<ConfigBasedExtensionRecommendation> { return [...this.importantRecommendations, ...this.otherRecommendations]; }\n\n\tconstructor(\n\t\t@IExtensionTipsService private readonly extensionTipsService: IExtensionTipsService,\n\t\t@IWorkspaceContextService private readonly workspaceContextService: IWorkspaceContextService,\n\t) {\n\t\tsuper();\n\t}\n\n\tprotected async doActivate(): Promise<void> {\n\t\tawait this.fetch();\n\t\tthis._register(this.workspaceContextService.onDidChangeWorkspaceFolders(e => this.onWorkspaceFoldersChanged(e)));\n\t}\n\n\tprivate async fetch(): Promise<void> {\n\t\tconst workspace = this.workspaceContextService.getWorkspace();\n\t\tconst importantTips: Map<string, IConfigBasedExtensionTip> = new Map<string, IConfigBasedExtensionTip>();\n\t\tconst otherTips: Map<string, IConfigBasedExtensionTip> = new Map<string, IConfigBasedExtensionTip>();\n\t\tfor (const folder of workspace.folders) {\n\t\t\tconst configBasedTips = await this.extensionTipsService.getConfigBasedTips(folder.uri);\n\t\t\tfor (const tip of configBasedTips) {\n\t\t\t\tif (tip.important) {\n\t\t\t\t\timportantTips.set(tip.extensionId, tip);\n\t\t\t\t} else {\n\t\t\t\t\totherTips.set(tip.extensionId, tip);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tthis.importantTips = [...importantTips.values()];\n\t\tthis.otherTips = [...otherTips.values()].filter(tip => !importantTips.has(tip.extensionId));\n\t\tthis._otherRecommendations = this.otherTips.map(tip => this.toExtensionRecommendation(tip));\n\t\tthis._importantRecommendations = this.importantTips.map(tip => this.toExtensionRecommendation(tip));\n\t}\n\n\tprivate async onWorkspaceFoldersChanged(event: IWorkspaceFoldersChangeEvent): Promise<void> {\n\t\tif (event.added.length) {\n\t\t\tconst oldImportantRecommended = this.importantTips;\n\t\t\tawait this.fetch();\n\t\t\t// Suggest only if at least one of the newly added recommendations was not suggested before\n\t\t\tif (this.importantTips.some(current => oldImportantRecommended.every(old => current.extensionId !== old.extensionId))) {\n\t\t\t\tthis._onDidChangeRecommendations.fire();\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate toExtensionRecommendation(tip: IConfigBasedExtensionTip): ConfigBasedExtensionRecommendation {\n\t\treturn {\n\t\t\textension: tip.extensionId,\n\t\t\treason: {\n\t\t\t\treasonId: ExtensionRecommendationReason.WorkspaceConfig,\n\t\t\t\treasonText: localize('exeBasedRecommendation', \"This extension is recommended because of the current workspace configuration\")\n\t\t\t},\n\t\t\twhenNotInstalled: tip.whenNotInstalled\n\t\t};\n\t}\n\n}\n"],
  "mappings": ";;;;;;;;;;;;AAKA,SAAS,uBAAuB,gCAAgC;AAChE,SAAS,0BAA0B,+BAA+B;AAClE,SAAS,gBAAgB;AACzB,SAAS,qCAAqC;AAC9C,SAAS,0BAA0B,oCAAoC;AACvE,SAAS,eAAe;AAIjB,IAAM,6BAAN,cAAyC,yBAAyB;AAAA,EAgBxE,YACyC,sBACG,yBAC1C;AACD,UAAM;AAHkC;AACG;AAAA,EAG5C;AAAA,EAnCD,OAcyE;AAAA;AAAA;AAAA,EAEhE,gBAA4C,CAAC;AAAA,EAC7C,YAAwC,CAAC;AAAA,EAEzC,8BAA8B,KAAK,UAAU,IAAI,QAAc,CAAC;AAAA,EAC/D,6BAA6B,KAAK,4BAA4B;AAAA,EAE/D,wBAA8D,CAAC;AAAA,EACvE,IAAI,uBAA0E;AAAE,WAAO,KAAK;AAAA,EAAuB;AAAA,EAE3G,4BAAkE,CAAC;AAAA,EAC3E,IAAI,2BAA8E;AAAE,WAAO,KAAK;AAAA,EAA2B;AAAA,EAE3H,IAAI,kBAAqE;AAAE,WAAO,CAAC,GAAG,KAAK,0BAA0B,GAAG,KAAK,oBAAoB;AAAA,EAAG;AAAA,EASpJ,MAAgB,aAA4B;AAC3C,UAAM,KAAK,MAAM;AACjB,SAAK,UAAU,KAAK,wBAAwB,4BAA4B,OAAK,KAAK,0BAA0B,CAAC,CAAC,CAAC;AAAA,EAChH;AAAA,EAEA,MAAc,QAAuB;AACpC,UAAM,YAAY,KAAK,wBAAwB,aAAa;AAC5D,UAAM,gBAAuD,oBAAI,IAAsC;AACvG,UAAM,YAAmD,oBAAI,IAAsC;AACnG,eAAW,UAAU,UAAU,SAAS;AACvC,YAAM,kBAAkB,MAAM,KAAK,qBAAqB,mBAAmB,OAAO,GAAG;AACrF,iBAAW,OAAO,iBAAiB;AAClC,YAAI,IAAI,WAAW;AAClB,wBAAc,IAAI,IAAI,aAAa,GAAG;AAAA,QACvC,OAAO;AACN,oBAAU,IAAI,IAAI,aAAa,GAAG;AAAA,QACnC;AAAA,MACD;AAAA,IACD;AACA,SAAK,gBAAgB,CAAC,GAAG,cAAc,OAAO,CAAC;AAC/C,SAAK,YAAY,CAAC,GAAG,UAAU,OAAO,CAAC,EAAE,OAAO,SAAO,CAAC,cAAc,IAAI,IAAI,WAAW,CAAC;AAC1F,SAAK,wBAAwB,KAAK,UAAU,IAAI,SAAO,KAAK,0BAA0B,GAAG,CAAC;AAC1F,SAAK,4BAA4B,KAAK,cAAc,IAAI,SAAO,KAAK,0BAA0B,GAAG,CAAC;AAAA,EACnG;AAAA,EAEA,MAAc,0BAA0B,OAAoD;AAC3F,QAAI,MAAM,MAAM,QAAQ;AACvB,YAAM,0BAA0B,KAAK;AACrC,YAAM,KAAK,MAAM;AAEjB,UAAI,KAAK,cAAc,KAAK,aAAW,wBAAwB,MAAM,SAAO,QAAQ,gBAAgB,IAAI,WAAW,CAAC,GAAG;AACtH,aAAK,4BAA4B,KAAK;AAAA,MACvC;AAAA,IACD;AAAA,EACD;AAAA,EAEQ,0BAA0B,KAAmE;AACpG,WAAO;AAAA,MACN,WAAW,IAAI;AAAA,MACf,QAAQ;AAAA,QACP,UAAU,8BAA8B;AAAA,QACxC,YAAY,SAAS,0BAA0B,8EAA8E;AAAA,MAC9H;AAAA,MACA,kBAAkB,IAAI;AAAA,IACvB;AAAA,EACD;AAED;AAtEa,6BAAN;AAAA,EAiBJ;AAAA,EACA;AAAA,GAlBU;",
  "names": []
}
