import{localize2 as i}from"../../../../nls.js";import{IFileService as a}from"../../../../platform/files/common/files.js";import{URI as p}from"../../../../base/common/uri.js";import{INativeWorkbenchEnvironmentService as v}from"../../../services/environment/electron-sandbox/environmentService.js";import{INativeHostService as x}from"../../../../platform/native/common/native.js";import{Schemas as d}from"../../../../base/common/network.js";import{Action2 as s}from"../../../../platform/actions/common/actions.js";import"../../../../platform/instantiation/common/instantiation.js";import{ExtensionsLocalizedLabel as f,IExtensionManagementService as S}from"../../../../platform/extensionManagement/common/extensionManagement.js";import{Categories as h}from"../../../../platform/action/common/actionCommonCategories.js";class k extends s{constructor(){super({id:"workbench.extensions.action.openExtensionsFolder",title:i("openExtensionsFolder","Open Extensions Folder"),category:f,f1:!0})}async run(e){const t=e.get(x),l=e.get(a),m=e.get(v),r=p.file(m.extensionsPath),n=await l.resolve(r);let o;if(n.children&&n.children.length>0?o=n.children[0].resource:o=r,o.scheme===d.file)return t.showItemInFolder(o.fsPath)}}class C extends s{constructor(){super({id:"_workbench.extensions.action.cleanUpExtensionsFolder",title:i("cleanUpExtensionsFolder","Cleanup Extensions Folder"),category:h.Developer,f1:!0})}async run(e){return e.get(S).cleanUp()}}export{C as CleanUpExtensionsFolderAction,k as OpenExtensionsFolderAction};
