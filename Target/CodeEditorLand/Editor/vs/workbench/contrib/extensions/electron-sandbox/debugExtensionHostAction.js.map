{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/extensions/electron-sandbox/debugExtensionHostAction.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Codicon } from '../../../../base/common/codicons.js';\nimport { Disposable } from '../../../../base/common/lifecycle.js';\nimport { randomPort } from '../../../../base/common/ports.js';\nimport * as nls from '../../../../nls.js';\nimport { Categories } from '../../../../platform/action/common/actionCommonCategories.js';\nimport { Action2, MenuId } from '../../../../platform/actions/common/actions.js';\nimport { IDialogService } from '../../../../platform/dialogs/common/dialogs.js';\nimport { IInstantiationService, ServicesAccessor } from '../../../../platform/instantiation/common/instantiation.js';\nimport { INativeHostService } from '../../../../platform/native/common/native.js';\nimport { IProductService } from '../../../../platform/product/common/productService.js';\nimport { IProgressService, ProgressLocation } from '../../../../platform/progress/common/progress.js';\nimport { IStorageService, StorageScope, StorageTarget } from '../../../../platform/storage/common/storage.js';\nimport { ActiveEditorContext } from '../../../common/contextkeys.js';\nimport { IWorkbenchContribution } from '../../../common/contributions.js';\nimport { ExtensionHostKind } from '../../../services/extensions/common/extensionHostKind.js';\nimport { IExtensionService } from '../../../services/extensions/common/extensions.js';\nimport { IHostService } from '../../../services/host/browser/host.js';\nimport { IConfig, IDebugService } from '../../debug/common/debug.js';\nimport { RuntimeExtensionsEditor } from './runtimeExtensionsEditor.js';\n\nexport class DebugExtensionHostAction extends Action2 {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: 'workbench.extensions.action.debugExtensionHost',\n\t\t\ttitle: { value: nls.localize('debugExtensionHost', \"Start Debugging Extension Host In New Window\"), original: 'Start Debugging Extension Host In New Window' },\n\t\t\tcategory: Categories.Developer,\n\t\t\tf1: true,\n\t\t\ticon: Codicon.debugStart,\n\t\t\tmenu: {\n\t\t\t\tid: MenuId.EditorTitle,\n\t\t\t\twhen: ActiveEditorContext.isEqualTo(RuntimeExtensionsEditor.ID),\n\t\t\t\tgroup: 'navigation',\n\t\t\t}\n\t\t});\n\t}\n\n\trun(accessor: ServicesAccessor): void {\n\t\tconst nativeHostService = accessor.get(INativeHostService);\n\t\tconst dialogService = accessor.get(IDialogService);\n\t\tconst extensionService = accessor.get(IExtensionService);\n\t\tconst productService = accessor.get(IProductService);\n\t\tconst instantiationService = accessor.get(IInstantiationService);\n\t\tconst hostService = accessor.get(IHostService);\n\n\t\textensionService.getInspectPorts(ExtensionHostKind.LocalProcess, false).then(async inspectPorts => {\n\t\t\tif (inspectPorts.length === 0) {\n\t\t\t\tconst res = await dialogService.confirm({\n\t\t\t\t\tmessage: nls.localize('restart1', \"Debug Extensions\"),\n\t\t\t\t\tdetail: nls.localize('restart2', \"In order to debug extensions a restart is required. Do you want to restart '{0}' now?\", productService.nameLong),\n\t\t\t\t\tprimaryButton: nls.localize({ key: 'restart3', comment: ['&& denotes a mnemonic'] }, \"&&Restart\")\n\t\t\t\t});\n\t\t\t\tif (res.confirmed) {\n\t\t\t\t\tawait nativeHostService.relaunch({ addArgs: [`--inspect-extensions=${randomPort()}`] });\n\t\t\t\t}\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (inspectPorts.length > 1) {\n\t\t\t\t// TODO\n\t\t\t\tconsole.warn(`There are multiple extension hosts available for debugging. Picking the first one...`);\n\t\t\t}\n\n\t\t\tconst s = instantiationService.createInstance(Storage);\n\t\t\ts.storeDebugOnNewWindow(inspectPorts[0].port);\n\n\t\t\thostService.openWindow();\n\t\t});\n\t}\n}\n\nclass Storage {\n\tconstructor(@IStorageService private readonly _storageService: IStorageService,) {\n\t}\n\n\tstoreDebugOnNewWindow(targetPort: number) {\n\t\tthis._storageService.store('debugExtensionHost.debugPort', targetPort, StorageScope.APPLICATION, StorageTarget.MACHINE);\n\t}\n\n\tgetAndDeleteDebugPortIfSet(): number | undefined {\n\t\tconst port = this._storageService.getNumber('debugExtensionHost.debugPort', StorageScope.APPLICATION);\n\t\tif (port !== undefined) {\n\t\t\tthis._storageService.remove('debugExtensionHost.debugPort', StorageScope.APPLICATION);\n\t\t}\n\t\treturn port;\n\t}\n}\n\nexport class DebugExtensionsContribution extends Disposable implements IWorkbenchContribution {\n\tconstructor(\n\t\t@IDebugService private readonly _debugService: IDebugService,\n\t\t@IInstantiationService private readonly _instantiationService: IInstantiationService,\n\t\t@IProgressService _progressService: IProgressService,\n\t) {\n\t\tsuper();\n\n\t\tconst storage = this._instantiationService.createInstance(Storage);\n\t\tconst port = storage.getAndDeleteDebugPortIfSet();\n\t\tif (port !== undefined) {\n\t\t\t_progressService.withProgress({\n\t\t\t\tlocation: ProgressLocation.Notification,\n\t\t\t\ttitle: nls.localize('debugExtensionHost.progress', \"Attaching Debugger To Extension Host\"),\n\t\t\t}, async p => {\n\t\t\t\tawait this._debugService.startDebugging(undefined, {\n\t\t\t\t\ttype: 'node',\n\t\t\t\t\tname: nls.localize('debugExtensionHost.launch.name', \"Attach Extension Host\"),\n\t\t\t\t\trequest: 'attach',\n\t\t\t\t\tport,\n\t\t\t\t\ttrace: true,\n\t\t\t\t\t// resolve source maps everywhere:\n\t\t\t\t\tresolveSourceMapLocations: null,\n\t\t\t\t\t// announces sources eagerly for the loaded scripts view:\n\t\t\t\t\teagerSources: true,\n\t\t\t\t\t// source maps of published VS Code are on the CDN and can take a while to load\n\t\t\t\t\ttimeouts: {\n\t\t\t\t\t\tsourceMapMinPause: 30_000,\n\t\t\t\t\t\tsourceMapCumulativePause: 300_000,\n\t\t\t\t\t},\n\t\t\t\t} as IConfig);\n\t\t\t});\n\t\t}\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
