{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/extensions/electron-sandbox/debugExtensionHostAction.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Codicon } from \"../../../../base/common/codicons.js\";\nimport { Disposable } from \"../../../../base/common/lifecycle.js\";\nimport { randomPort } from \"../../../../base/common/ports.js\";\nimport * as nls from \"../../../../nls.js\";\nimport { Categories } from \"../../../../platform/action/common/actionCommonCategories.js\";\nimport {\n\tAction2,\n\tMenuId,\n} from \"../../../../platform/actions/common/actions.js\";\nimport { IDialogService } from \"../../../../platform/dialogs/common/dialogs.js\";\nimport {\n\tIInstantiationService,\n\ttype ServicesAccessor,\n} from \"../../../../platform/instantiation/common/instantiation.js\";\nimport { INativeHostService } from \"../../../../platform/native/common/native.js\";\nimport { IProductService } from \"../../../../platform/product/common/productService.js\";\nimport {\n\tIProgressService,\n\tProgressLocation,\n} from \"../../../../platform/progress/common/progress.js\";\nimport {\n\tIStorageService,\n\tStorageScope,\n\tStorageTarget,\n} from \"../../../../platform/storage/common/storage.js\";\nimport { ActiveEditorContext } from \"../../../common/contextkeys.js\";\nimport type { IWorkbenchContribution } from \"../../../common/contributions.js\";\nimport { ExtensionHostKind } from \"../../../services/extensions/common/extensionHostKind.js\";\nimport { IExtensionService } from \"../../../services/extensions/common/extensions.js\";\nimport { IHostService } from \"../../../services/host/browser/host.js\";\nimport { type IConfig, IDebugService } from \"../../debug/common/debug.js\";\nimport { RuntimeExtensionsEditor } from \"./runtimeExtensionsEditor.js\";\n\nexport class DebugExtensionHostAction extends Action2 {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: \"workbench.extensions.action.debugExtensionHost\",\n\t\t\ttitle: {\n\t\t\t\tvalue: nls.localize(\n\t\t\t\t\t\"debugExtensionHost\",\n\t\t\t\t\t\"Start Debugging Extension Host In New Window\",\n\t\t\t\t),\n\t\t\t\toriginal: \"Start Debugging Extension Host In New Window\",\n\t\t\t},\n\t\t\tcategory: Categories.Developer,\n\t\t\tf1: true,\n\t\t\ticon: Codicon.debugStart,\n\t\t\tmenu: {\n\t\t\t\tid: MenuId.EditorTitle,\n\t\t\t\twhen: ActiveEditorContext.isEqualTo(RuntimeExtensionsEditor.ID),\n\t\t\t\tgroup: \"navigation\",\n\t\t\t},\n\t\t});\n\t}\n\n\trun(accessor: ServicesAccessor): void {\n\t\tconst nativeHostService = accessor.get(INativeHostService);\n\t\tconst dialogService = accessor.get(IDialogService);\n\t\tconst extensionService = accessor.get(IExtensionService);\n\t\tconst productService = accessor.get(IProductService);\n\t\tconst instantiationService = accessor.get(IInstantiationService);\n\t\tconst hostService = accessor.get(IHostService);\n\n\t\textensionService\n\t\t\t.getInspectPorts(ExtensionHostKind.LocalProcess, false)\n\t\t\t.then(async (inspectPorts) => {\n\t\t\t\tif (inspectPorts.length === 0) {\n\t\t\t\t\tconst res = await dialogService.confirm({\n\t\t\t\t\t\tmessage: nls.localize(\"restart1\", \"Debug Extensions\"),\n\t\t\t\t\t\tdetail: nls.localize(\n\t\t\t\t\t\t\t\"restart2\",\n\t\t\t\t\t\t\t\"In order to debug extensions a restart is required. Do you want to restart '{0}' now?\",\n\t\t\t\t\t\t\tproductService.nameLong,\n\t\t\t\t\t\t),\n\t\t\t\t\t\tprimaryButton: nls.localize(\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tkey: \"restart3\",\n\t\t\t\t\t\t\t\tcomment: [\"&& denotes a mnemonic\"],\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\"&&Restart\",\n\t\t\t\t\t\t),\n\t\t\t\t\t});\n\t\t\t\t\tif (res.confirmed) {\n\t\t\t\t\t\tawait nativeHostService.relaunch({\n\t\t\t\t\t\t\taddArgs: [`--inspect-extensions=${randomPort()}`],\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (inspectPorts.length > 1) {\n\t\t\t\t\t// TODO\n\t\t\t\t\tconsole.warn(\n\t\t\t\t\t\t`There are multiple extension hosts available for debugging. Picking the first one...`,\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\tconst s = instantiationService.createInstance(Storage);\n\t\t\t\ts.storeDebugOnNewWindow(inspectPorts[0].port);\n\n\t\t\t\thostService.openWindow();\n\t\t\t});\n\t}\n}\n\nclass Storage {\n\tconstructor(\n\t\t@IStorageService private readonly _storageService: IStorageService,\n\t) {}\n\n\tstoreDebugOnNewWindow(targetPort: number) {\n\t\tthis._storageService.store(\n\t\t\t\"debugExtensionHost.debugPort\",\n\t\t\ttargetPort,\n\t\t\tStorageScope.APPLICATION,\n\t\t\tStorageTarget.MACHINE,\n\t\t);\n\t}\n\n\tgetAndDeleteDebugPortIfSet(): number | undefined {\n\t\tconst port = this._storageService.getNumber(\n\t\t\t\"debugExtensionHost.debugPort\",\n\t\t\tStorageScope.APPLICATION,\n\t\t);\n\t\tif (port !== undefined) {\n\t\t\tthis._storageService.remove(\n\t\t\t\t\"debugExtensionHost.debugPort\",\n\t\t\t\tStorageScope.APPLICATION,\n\t\t\t);\n\t\t}\n\t\treturn port;\n\t}\n}\n\nexport class DebugExtensionsContribution\n\textends Disposable\n\timplements IWorkbenchContribution\n{\n\tconstructor(\n\t\t@IDebugService private readonly _debugService: IDebugService,\n\t\t@IInstantiationService\n\t\tprivate readonly _instantiationService: IInstantiationService,\n\t\t@IProgressService _progressService: IProgressService,\n\t) {\n\t\tsuper();\n\n\t\tconst storage = this._instantiationService.createInstance(Storage);\n\t\tconst port = storage.getAndDeleteDebugPortIfSet();\n\t\tif (port !== undefined) {\n\t\t\t_progressService.withProgress(\n\t\t\t\t{\n\t\t\t\t\tlocation: ProgressLocation.Notification,\n\t\t\t\t\ttitle: nls.localize(\n\t\t\t\t\t\t\"debugExtensionHost.progress\",\n\t\t\t\t\t\t\"Attaching Debugger To Extension Host\",\n\t\t\t\t\t),\n\t\t\t\t},\n\t\t\t\tasync (p) => {\n\t\t\t\t\tawait this._debugService.startDebugging(undefined, {\n\t\t\t\t\t\ttype: \"node\",\n\t\t\t\t\t\tname: nls.localize(\n\t\t\t\t\t\t\t\"debugExtensionHost.launch.name\",\n\t\t\t\t\t\t\t\"Attach Extension Host\",\n\t\t\t\t\t\t),\n\t\t\t\t\t\trequest: \"attach\",\n\t\t\t\t\t\tport,\n\t\t\t\t\t\ttrace: true,\n\t\t\t\t\t\t// resolve source maps everywhere:\n\t\t\t\t\t\tresolveSourceMapLocations: null,\n\t\t\t\t\t\t// announces sources eagerly for the loaded scripts view:\n\t\t\t\t\t\teagerSources: true,\n\t\t\t\t\t\t// source maps of published VS Code are on the CDN and can take a while to load\n\t\t\t\t\t\ttimeouts: {\n\t\t\t\t\t\t\tsourceMapMinPause: 30_000,\n\t\t\t\t\t\t\tsourceMapCumulativePause: 300_000,\n\t\t\t\t\t\t},\n\t\t\t\t\t} as IConfig);\n\t\t\t\t},\n\t\t\t);\n\t\t}\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
