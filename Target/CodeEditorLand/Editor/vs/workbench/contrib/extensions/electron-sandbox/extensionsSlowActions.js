var E=Object.defineProperty;var D=Object.getOwnPropertyDescriptor;var m=(n,i,e,t)=>{for(var r=t>1?void 0:t?D(i,e):i,s=n.length-1,a;s>=0;s--)(a=n[s])&&(r=(t?a(i,e,r):a(r))||r);return t&&r&&E(i,e,r),r},o=(n,i)=>(e,t)=>i(e,t,n);import{Action as I}from"../../../../base/common/actions.js";import{VSBuffer as S}from"../../../../base/common/buffer.js";import{CancellationToken as N}from"../../../../base/common/cancellation.js";import{joinPath as g}from"../../../../base/common/resources.js";import{URI as d}from"../../../../base/common/uri.js";import"../../../../base/parts/request/common/request.js";import{localize as c}from"../../../../nls.js";import{IDialogService as y}from"../../../../platform/dialogs/common/dialogs.js";import"../../../../platform/extensions/common/extensions.js";import{IFileService as x}from"../../../../platform/files/common/files.js";import{IInstantiationService as b}from"../../../../platform/instantiation/common/instantiation.js";import{INativeHostService as O}from"../../../../platform/native/common/native.js";import{IOpenerService as _}from"../../../../platform/opener/common/opener.js";import{IProductService as k}from"../../../../platform/product/common/productService.js";import{Utils as P}from"../../../../platform/profiling/common/profiling.js";import{asText as q,IRequestService as H}from"../../../../platform/request/common/request.js";import{INativeWorkbenchEnvironmentService as $}from"../../../services/environment/electron-sandbox/environmentService.js";import"../../../services/extensions/common/extensions.js";class w{static fromExtension(i){let e;if(i.bugs&&typeof i.bugs.url=="string"){const t=d.parse(i.bugs.url),r=/\/([^/]+)\/([^/]+)\/issues\/?$/.exec(i.bugs.url);r&&(e={base:t.with({path:null,fragment:null,query:null}).toString(!0),owner:r[1],repo:r[2]})}if(!e&&i.repository&&typeof i.repository.url=="string"){const t=d.parse(i.repository.url),r=/\/([^/]+)\/([^/]+)(\.git)?$/.exec(i.repository.url);r&&(e={base:t.with({path:null,fragment:null,query:null}).toString(!0),owner:r[1],repo:r[2]})}return e&&e.base.indexOf("github")===-1&&(e=void 0),e}}let h=class extends I{constructor(e,t,r){super("report.slow",c("cmd.reportOrShow","Performance Issue"),"extension-action report-issue");this.extension=e;this.profile=t;this._instantiationService=r;this.enabled=!!w.fromExtension(e)}async run(){const e=await this._instantiationService.invokeFunction(R,this.extension,this.profile);e&&await e.run()}};h=m([o(2,b)],h);async function R(n,i,e){const t=w.fromExtension(i);if(!t)return;const r=n.get(H),s=n.get(b),a=`https://api.github.com/search/issues?q=is:issue+state:open+in:title+repo:${t.owner}/${t.repo}+%22Extension+causes+high+cpu+load%22`;let p;try{p=await r.request({url:a},N.None)}catch{return}const u=await q(p);if(!u)return;const f=JSON.parse(u);if(!(!f||typeof f.total_count!="number"))return f.total_count===0?s.createInstance(l,i,t,e):s.createInstance(v,i,t,e)}let l=class extends I{constructor(e,t,r,s,a,p,u,f,C){super("report.slow",c("cmd.report","Report Issue"));this.extension=e;this.repoInfo=t;this.profile=r;this._dialogService=s;this._openerService=a;this._productService=p;this._nativeHostService=u;this._environmentService=f;this._fileService=C}async run(){const e=P.rewriteAbsolutePaths(this.profile.data,"pii_removed"),t=g(this._environmentService.tmpDir,`${this.extension.identifier.value}-unresponsive.cpuprofile.txt`);await this._fileService.writeFile(t,S.fromString(JSON.stringify(e,void 0,4)));const r=await this._nativeHostService.getOSProperties(),s=encodeURIComponent("Extension causes high cpu load"),a=`${r.type} ${r.arch} ${r.release}`,p=`:warning: Make sure to **attach** this file from your *home*-directory:
:warning:\`${t}\`

Find more details here: https://github.com/microsoft/vscode/wiki/Explain-extension-causes-high-cpu-load`,u=encodeURIComponent(`- Issue Type: \`Performance\`
- Extension Name: \`${this.extension.name}\`
- Extension Version: \`${this.extension.version}\`
- OS Version: \`${a}\`
- VS Code version: \`${this._productService.version}\`

${p}`),f=`${this.repoInfo.base}/${this.repoInfo.owner}/${this.repoInfo.repo}/issues/new/?body=${u}&title=${s}`;this._openerService.open(d.parse(f)),this._dialogService.info(c("attach.title","Did you attach the CPU-Profile?"),c("attach.msg","This is a reminder to make sure that you have not forgotten to attach '{0}' to the issue you have just created.",t.fsPath))}};l=m([o(3,y),o(4,_),o(5,k),o(6,O),o(7,$),o(8,x)],l);let v=class extends I{constructor(e,t,r,s,a,p,u){super("show.slow",c("cmd.show","Show Issues"));this.extension=e;this.repoInfo=t;this.profile=r;this._dialogService=s;this._openerService=a;this._environmentService=p;this._fileService=u}async run(){const e=P.rewriteAbsolutePaths(this.profile.data,"pii_removed"),t=g(this._environmentService.tmpDir,`${this.extension.identifier.value}-unresponsive.cpuprofile.txt`);await this._fileService.writeFile(t,S.fromString(JSON.stringify(e,void 0,4)));const r=`${this.repoInfo.base}/${this.repoInfo.owner}/${this.repoInfo.repo}/issues?utf8=\u2713&q=is%3Aissue+state%3Aopen+%22Extension+causes+high+cpu+load%22`;this._openerService.open(d.parse(r)),this._dialogService.info(c("attach.title","Did you attach the CPU-Profile?"),c("attach.msg2","This is a reminder to make sure that you have not forgotten to attach '{0}' to an existing performance issue.",t.fsPath))}};v=m([o(3,y),o(4,_),o(5,$),o(6,x)],v);export{h as SlowExtensionAction,R as createSlowExtensionAction};
