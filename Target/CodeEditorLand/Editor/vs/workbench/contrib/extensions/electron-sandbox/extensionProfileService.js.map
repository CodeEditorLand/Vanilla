{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/extensions/electron-sandbox/extensionProfileService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { disposableWindowInterval } from \"../../../../base/browser/dom.js\";\nimport { mainWindow } from \"../../../../base/browser/window.js\";\nimport { onUnexpectedError } from \"../../../../base/common/errors.js\";\nimport { Emitter, type Event } from \"../../../../base/common/event.js\";\nimport {\n\tDisposable,\n\tMutableDisposable,\n} from \"../../../../base/common/lifecycle.js\";\nimport { randomPort } from \"../../../../base/common/ports.js\";\nimport type { URI } from \"../../../../base/common/uri.js\";\nimport * as nls from \"../../../../nls.js\";\nimport { CommandsRegistry } from \"../../../../platform/commands/common/commands.js\";\nimport { IDialogService } from \"../../../../platform/dialogs/common/dialogs.js\";\nimport {\n\ttype ExtensionIdentifier,\n\tExtensionIdentifierMap,\n} from \"../../../../platform/extensions/common/extensions.js\";\nimport { IInstantiationService } from \"../../../../platform/instantiation/common/instantiation.js\";\nimport { INativeHostService } from \"../../../../platform/native/common/native.js\";\nimport { IProductService } from \"../../../../platform/product/common/productService.js\";\nimport { IEditorService } from \"../../../services/editor/common/editorService.js\";\nimport { ExtensionHostKind } from \"../../../services/extensions/common/extensionHostKind.js\";\nimport {\n\ttype IExtensionHostProfile,\n\tIExtensionService,\n\ttype ProfileSession,\n} from \"../../../services/extensions/common/extensions.js\";\nimport { ExtensionHostProfiler } from \"../../../services/extensions/electron-sandbox/extensionHostProfiler.js\";\nimport {\n\ttype IStatusbarEntry,\n\ttype IStatusbarEntryAccessor,\n\tIStatusbarService,\n\tStatusbarAlignment,\n} from \"../../../services/statusbar/browser/statusbar.js\";\nimport { RuntimeExtensionsInput } from \"../common/runtimeExtensionsInput.js\";\nimport {\n\ttype IExtensionHostProfileService,\n\tProfileSessionState,\n} from \"./runtimeExtensionsEditor.js\";\n\nexport class ExtensionHostProfileService\n\textends Disposable\n\timplements IExtensionHostProfileService\n{\n\tdeclare readonly _serviceBrand: undefined;\n\n\tprivate readonly _onDidChangeState: Emitter<void> = this._register(\n\t\tnew Emitter<void>(),\n\t);\n\tpublic readonly onDidChangeState: Event<void> =\n\t\tthis._onDidChangeState.event;\n\n\tprivate readonly _onDidChangeLastProfile: Emitter<void> = this._register(\n\t\tnew Emitter<void>(),\n\t);\n\tpublic readonly onDidChangeLastProfile: Event<void> =\n\t\tthis._onDidChangeLastProfile.event;\n\n\tprivate readonly _unresponsiveProfiles =\n\t\tnew ExtensionIdentifierMap<IExtensionHostProfile>();\n\tprivate _profile: IExtensionHostProfile | null;\n\tprivate _profileSession: ProfileSession | null;\n\tprivate _state: ProfileSessionState = ProfileSessionState.None;\n\n\tprivate profilingStatusBarIndicator: IStatusbarEntryAccessor | undefined;\n\tprivate readonly profilingStatusBarIndicatorLabelUpdater = this._register(\n\t\tnew MutableDisposable(),\n\t);\n\n\tpublic lastProfileSavedTo: URI | undefined;\n\tpublic get state() {\n\t\treturn this._state;\n\t}\n\tpublic get lastProfile() {\n\t\treturn this._profile;\n\t}\n\n\tconstructor(\n\t\t@IExtensionService private readonly _extensionService: IExtensionService,\n\t\t@IEditorService private readonly _editorService: IEditorService,\n\t\t@IInstantiationService private readonly _instantiationService: IInstantiationService,\n\t\t@INativeHostService private readonly _nativeHostService: INativeHostService,\n\t\t@IDialogService private readonly _dialogService: IDialogService,\n\t\t@IStatusbarService private readonly _statusbarService: IStatusbarService,\n\t\t@IProductService private readonly _productService: IProductService\n\t) {\n\t\tsuper();\n\t\tthis._profile = null;\n\t\tthis._profileSession = null;\n\t\tthis._setState(ProfileSessionState.None);\n\n\t\tCommandsRegistry.registerCommand('workbench.action.extensionHostProfiler.stop', () => {\n\t\t\tthis.stopProfiling();\n\t\t\tthis._editorService.openEditor(RuntimeExtensionsInput.instance, { pinned: true });\n\t\t});\n\t}\n\n\tprivate _setState(state: ProfileSessionState): void {\n\t\tif (this._state === state) {\n\t\t\treturn;\n\t\t}\n\t\tthis._state = state;\n\n\t\tif (this._state === ProfileSessionState.Running) {\n\t\t\tthis.updateProfilingStatusBarIndicator(true);\n\t\t} else if (this._state === ProfileSessionState.Stopping) {\n\t\t\tthis.updateProfilingStatusBarIndicator(false);\n\t\t}\n\n\t\tthis._onDidChangeState.fire(undefined);\n\t}\n\n\tprivate updateProfilingStatusBarIndicator(visible: boolean): void {\n\t\tthis.profilingStatusBarIndicatorLabelUpdater.clear();\n\n\t\tif (visible) {\n\t\t\tconst indicator: IStatusbarEntry = {\n\t\t\t\tname: nls.localize(\"status.profiler\", \"Extension Profiler\"),\n\t\t\t\ttext: nls.localize(\n\t\t\t\t\t\"profilingExtensionHost\",\n\t\t\t\t\t\"Profiling Extension Host\",\n\t\t\t\t),\n\t\t\t\tshowProgress: true,\n\t\t\t\tariaLabel: nls.localize(\n\t\t\t\t\t\"profilingExtensionHost\",\n\t\t\t\t\t\"Profiling Extension Host\",\n\t\t\t\t),\n\t\t\t\ttooltip: nls.localize(\n\t\t\t\t\t\"selectAndStartDebug\",\n\t\t\t\t\t\"Click to stop profiling.\",\n\t\t\t\t),\n\t\t\t\tcommand: \"workbench.action.extensionHostProfiler.stop\",\n\t\t\t};\n\n\t\t\tconst timeStarted = Date.now();\n\t\t\tconst handle = disposableWindowInterval(\n\t\t\t\tmainWindow,\n\t\t\t\t() => {\n\t\t\t\t\tthis.profilingStatusBarIndicator?.update({\n\t\t\t\t\t\t...indicator,\n\t\t\t\t\t\ttext: nls.localize(\n\t\t\t\t\t\t\t\"profilingExtensionHostTime\",\n\t\t\t\t\t\t\t\"Profiling Extension Host ({0} sec)\",\n\t\t\t\t\t\t\tMath.round(\n\t\t\t\t\t\t\t\t(new Date().getTime() - timeStarted) / 1000,\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t),\n\t\t\t\t\t});\n\t\t\t\t},\n\t\t\t\t1000,\n\t\t\t);\n\t\t\tthis.profilingStatusBarIndicatorLabelUpdater.value = handle;\n\n\t\t\tif (this.profilingStatusBarIndicator) {\n\t\t\t\tthis.profilingStatusBarIndicator.update(indicator);\n\t\t\t} else {\n\t\t\t\tthis.profilingStatusBarIndicator =\n\t\t\t\t\tthis._statusbarService.addEntry(\n\t\t\t\t\t\tindicator,\n\t\t\t\t\t\t\"status.profiler\",\n\t\t\t\t\t\tStatusbarAlignment.RIGHT,\n\t\t\t\t\t);\n\t\t\t}\n\t\t} else if (this.profilingStatusBarIndicator) {\n\t\t\tthis.profilingStatusBarIndicator.dispose();\n\t\t\tthis.profilingStatusBarIndicator = undefined;\n\t\t}\n\t}\n\n\tpublic async startProfiling(): Promise<any> {\n\t\tif (this._state !== ProfileSessionState.None) {\n\t\t\treturn null;\n\t\t}\n\n\t\tconst inspectPorts = await this._extensionService.getInspectPorts(\n\t\t\tExtensionHostKind.LocalProcess,\n\t\t\ttrue,\n\t\t);\n\n\t\tif (inspectPorts.length === 0) {\n\t\t\treturn this._dialogService\n\t\t\t\t.confirm({\n\t\t\t\t\ttype: \"info\",\n\t\t\t\t\tmessage: nls.localize(\"restart1\", \"Profile Extensions\"),\n\t\t\t\t\tdetail: nls.localize(\n\t\t\t\t\t\t\"restart2\",\n\t\t\t\t\t\t\"In order to profile extensions a restart is required. Do you want to restart '{0}' now?\",\n\t\t\t\t\t\tthis._productService.nameLong,\n\t\t\t\t\t),\n\t\t\t\t\tprimaryButton: nls.localize(\n\t\t\t\t\t\t{ key: \"restart3\", comment: [\"&& denotes a mnemonic\"] },\n\t\t\t\t\t\t\"&&Restart\",\n\t\t\t\t\t),\n\t\t\t\t})\n\t\t\t\t.then((res) => {\n\t\t\t\t\tif (res.confirmed) {\n\t\t\t\t\t\tthis._nativeHostService.relaunch({\n\t\t\t\t\t\t\taddArgs: [`--inspect-extensions=${randomPort()}`],\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t}\n\n\t\tif (inspectPorts.length > 1) {\n\t\t\t// TODO\n\t\t\tconsole.warn(\n\t\t\t\t`There are multiple extension hosts available for profiling. Picking the first one...`,\n\t\t\t);\n\t\t}\n\n\t\tthis._setState(ProfileSessionState.Starting);\n\n\t\treturn this._instantiationService\n\t\t\t.createInstance(\n\t\t\t\tExtensionHostProfiler,\n\t\t\t\tinspectPorts[0].host,\n\t\t\t\tinspectPorts[0].port,\n\t\t\t)\n\t\t\t.start()\n\t\t\t.then(\n\t\t\t\t(value) => {\n\t\t\t\t\tthis._profileSession = value;\n\t\t\t\t\tthis._setState(ProfileSessionState.Running);\n\t\t\t\t},\n\t\t\t\t(err) => {\n\t\t\t\t\tonUnexpectedError(err);\n\t\t\t\t\tthis._setState(ProfileSessionState.None);\n\t\t\t\t},\n\t\t\t);\n\t}\n\n\tpublic stopProfiling(): void {\n\t\tif (\n\t\t\tthis._state !== ProfileSessionState.Running ||\n\t\t\t!this._profileSession\n\t\t) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis._setState(ProfileSessionState.Stopping);\n\t\tthis._profileSession.stop().then(\n\t\t\t(result) => {\n\t\t\t\tthis._setLastProfile(result);\n\t\t\t\tthis._setState(ProfileSessionState.None);\n\t\t\t},\n\t\t\t(err) => {\n\t\t\t\tonUnexpectedError(err);\n\t\t\t\tthis._setState(ProfileSessionState.None);\n\t\t\t},\n\t\t);\n\t\tthis._profileSession = null;\n\t}\n\n\tprivate _setLastProfile(profile: IExtensionHostProfile) {\n\t\tthis._profile = profile;\n\t\tthis.lastProfileSavedTo = undefined;\n\t\tthis._onDidChangeLastProfile.fire(undefined);\n\t}\n\n\tgetUnresponsiveProfile(\n\t\textensionId: ExtensionIdentifier,\n\t): IExtensionHostProfile | undefined {\n\t\treturn this._unresponsiveProfiles.get(extensionId);\n\t}\n\n\tsetUnresponsiveProfile(\n\t\textensionId: ExtensionIdentifier,\n\t\tprofile: IExtensionHostProfile,\n\t): void {\n\t\tthis._unresponsiveProfiles.set(extensionId, profile);\n\t\tthis._setLastProfile(profile);\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
