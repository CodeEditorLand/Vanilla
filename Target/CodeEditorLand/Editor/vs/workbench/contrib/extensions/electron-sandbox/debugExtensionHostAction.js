var f=Object.defineProperty;var S=Object.getOwnPropertyDescriptor;var d=(n,e,r,o)=>{for(var t=o>1?void 0:o?S(e,r):e,s=n.length-1,i;s>=0;s--)(i=n[s])&&(t=(o?i(e,r,t):i(t))||t);return o&&t&&f(e,r,t),t},g=(n,e)=>(r,o)=>e(r,o,n);import{Codicon as I}from"../../../../base/common/codicons.js";import{Disposable as b}from"../../../../base/common/lifecycle.js";import{randomPort as x}from"../../../../base/common/ports.js";import*as a from"../../../../nls.js";import{Categories as h}from"../../../../platform/action/common/actionCommonCategories.js";import{Action2 as P,MenuId as w}from"../../../../platform/actions/common/actions.js";import{IDialogService as E}from"../../../../platform/dialogs/common/dialogs.js";import{IInstantiationService as v}from"../../../../platform/instantiation/common/instantiation.js";import{INativeHostService as A}from"../../../../platform/native/common/native.js";import{IProductService as H}from"../../../../platform/product/common/productService.js";import{IProgressService as D,ProgressLocation as y}from"../../../../platform/progress/common/progress.js";import{IStorageService as N,StorageScope as l,StorageTarget as _}from"../../../../platform/storage/common/storage.js";import{ActiveEditorContext as C}from"../../../common/contextkeys.js";import{ExtensionHostKind as T}from"../../../services/extensions/common/extensionHostKind.js";import{IExtensionService as L}from"../../../services/extensions/common/extensions.js";import{IHostService as W}from"../../../services/host/browser/host.js";import{IDebugService as z}from"../../debug/common/debug.js";import{RuntimeExtensionsEditor as M}from"./runtimeExtensionsEditor.js";class re extends P{constructor(){super({id:"workbench.extensions.action.debugExtensionHost",title:{value:a.localize("debugExtensionHost","Start Debugging Extension Host In New Window"),original:"Start Debugging Extension Host In New Window"},category:h.Developer,f1:!0,icon:I.debugStart,menu:{id:w.EditorTitle,when:C.isEqualTo(M.ID),group:"navigation"}})}run(e){const r=e.get(A),o=e.get(E),t=e.get(L),s=e.get(H),i=e.get(v),p=e.get(W);t.getInspectPorts(T.LocalProcess,!1).then(async m=>{if(m.length===0){(await o.confirm({message:a.localize("restart1","Debug Extensions"),detail:a.localize("restart2","In order to debug extensions a restart is required. Do you want to restart '{0}' now?",s.nameLong),primaryButton:a.localize({key:"restart3",comment:["&& denotes a mnemonic"]},"&&Restart")})).confirmed&&await r.relaunch({addArgs:[`--inspect-extensions=${x()}`]});return}m.length>1,i.createInstance(c).storeDebugOnNewWindow(m[0].port),p.openWindow()})}}let c=class{constructor(e){this._storageService=e}storeDebugOnNewWindow(e){this._storageService.store("debugExtensionHost.debugPort",e,l.APPLICATION,_.MACHINE)}getAndDeleteDebugPortIfSet(){const e=this._storageService.getNumber("debugExtensionHost.debugPort",l.APPLICATION);return e!==void 0&&this._storageService.remove("debugExtensionHost.debugPort",l.APPLICATION),e}};c=d([g(0,N)],c);let u=class extends b{constructor(r,o,t){super();this._debugService=r;this._instantiationService=o;const i=this._instantiationService.createInstance(c).getAndDeleteDebugPortIfSet();i!==void 0&&t.withProgress({location:y.Notification,title:a.localize("debugExtensionHost.progress","Attaching Debugger To Extension Host")},async p=>{await this._debugService.startDebugging(void 0,{type:"node",name:a.localize("debugExtensionHost.launch.name","Attach Extension Host"),request:"attach",port:i,trace:!0,resolveSourceMapLocations:null,eagerSources:!0,timeouts:{sourceMapMinPause:3e4,sourceMapCumulativePause:3e5}})})}};u=d([g(0,z),g(1,v),g(2,D)],u);export{re as DebugExtensionHostAction,u as DebugExtensionsContribution};
