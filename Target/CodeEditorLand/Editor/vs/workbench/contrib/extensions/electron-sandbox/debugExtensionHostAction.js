var u=Object.defineProperty;var I=Object.getOwnPropertyDescriptor;var g=(a,e,i,t)=>{for(var r=t>1?void 0:t?I(e,i):e,c=a.length-1,s;c>=0;c--)(s=a[c])&&(r=(t?s(e,i,r):s(r))||r);return t&&r&&u(e,i,r),r},o=(a,e)=>(i,t)=>e(i,t,a);import{Action as f}from"../../../../../vs/base/common/actions.js";import{Disposable as h}from"../../../../../vs/base/common/lifecycle.js";import{randomPort as b}from"../../../../../vs/base/common/ports.js";import*as d from"../../../../../vs/nls.js";import{IDialogService as P}from"../../../../../vs/platform/dialogs/common/dialogs.js";import{IInstantiationService as m}from"../../../../../vs/platform/instantiation/common/instantiation.js";import{INativeHostService as y}from"../../../../../vs/platform/native/common/native.js";import{IProductService as _}from"../../../../../vs/platform/product/common/productService.js";import{IProgressService as w,ProgressLocation as x}from"../../../../../vs/platform/progress/common/progress.js";import{IStorageService as H,StorageScope as l,StorageTarget as L}from"../../../../../vs/platform/storage/common/storage.js";import"../../../../../vs/workbench/common/contributions.js";import{IDebugService as A}from"../../../../../vs/workbench/contrib/debug/common/debug.js";import{ExtensionHostKind as N}from"../../../../../vs/workbench/services/extensions/common/extensionHostKind.js";import{IExtensionService as D}from"../../../../../vs/workbench/services/extensions/common/extensions.js";import{IHostService as E}from"../../../../../vs/workbench/services/host/browser/host.js";let n=class extends f{constructor(i,t,r,c,s,p){super(n.ID,n.LABEL,n.CSS_CLASS);this._nativeHostService=i;this._dialogService=t;this._extensionService=r;this.productService=c;this._instantiationService=s;this._hostService=p}static ID="workbench.extensions.action.debugExtensionHost";static LABEL=d.localize("debugExtensionHost","Start Debugging Extension Host In New Window");static CSS_CLASS="debug-extension-host";async run(i){const t=await this._extensionService.getInspectPorts(N.LocalProcess,!1);if(t.length===0){(await this._dialogService.confirm({message:d.localize("restart1","Debug Extensions"),detail:d.localize("restart2","In order to debug extensions a restart is required. Do you want to restart '{0}' now?",this.productService.nameLong),primaryButton:d.localize({key:"restart3",comment:["&& denotes a mnemonic"]},"&&Restart")})).confirmed&&await this._nativeHostService.relaunch({addArgs:[`--inspect-extensions=${b()}`]});return}t.length>1&&console.warn("There are multiple extension hosts available for debugging. Picking the first one..."),this._instantiationService.createInstance(v).storeDebugOnNewWindow(t[0].port),this._hostService.openWindow()}};n=g([o(0,y),o(1,P),o(2,D),o(3,_),o(4,m),o(5,E)],n);let v=class{constructor(e){this._storageService=e}storeDebugOnNewWindow(e){this._storageService.store("debugExtensionHost.debugPort",e,l.APPLICATION,L.MACHINE)}getAndDeleteDebugPortIfSet(){const e=this._storageService.getNumber("debugExtensionHost.debugPort",l.APPLICATION);return e!==void 0&&this._storageService.remove("debugExtensionHost.debugPort",l.APPLICATION),e}};v=g([o(0,H)],v);let S=class extends h{constructor(i,t,r){super();this._debugService=i;this._instantiationService=t;const s=this._instantiationService.createInstance(v).getAndDeleteDebugPortIfSet();s!==void 0&&r.withProgress({location:x.Notification,title:d.localize("debugExtensionHost.progress","Attaching Debugger To Extension Host")},async p=>{await this._debugService.startDebugging(void 0,{type:"node",name:d.localize("debugExtensionHost.launch.name","Attach Extension Host"),request:"attach",port:s})})}};S=g([o(0,A),o(1,m),o(2,w)],S);export{n as DebugExtensionHostAction,S as DebugExtensionsContribution};
