var S=Object.defineProperty;var h=Object.getOwnPropertyDescriptor;var d=(l,s,t,e)=>{for(var r=e>1?void 0:e?h(s,t):s,a=l.length-1,p;a>=0;a--)(p=l[a])&&(r=(e?p(s,t,r):p(r))||r);return e&&r&&S(s,t,r),r},o=(l,s)=>(t,e)=>s(t,e,l);import{disposableWindowInterval as v}from"../../../../base/browser/dom.js";import{mainWindow as m}from"../../../../base/browser/window.js";import{onUnexpectedError as c}from"../../../../base/common/errors.js";import{Emitter as u}from"../../../../base/common/event.js";import{Disposable as g,MutableDisposable as _}from"../../../../base/common/lifecycle.js";import{randomPort as I}from"../../../../base/common/ports.js";import*as n from"../../../../nls.js";import{CommandsRegistry as P}from"../../../../platform/commands/common/commands.js";import{IDialogService as E}from"../../../../platform/dialogs/common/dialogs.js";import{ExtensionIdentifierMap as x}from"../../../../platform/extensions/common/extensions.js";import{IInstantiationService as y}from"../../../../platform/instantiation/common/instantiation.js";import{INativeHostService as b}from"../../../../platform/native/common/native.js";import{IProductService as H}from"../../../../platform/product/common/productService.js";import{IEditorService as B}from"../../../services/editor/common/editorService.js";import{ExtensionHostKind as D}from"../../../services/extensions/common/extensionHostKind.js";import{IExtensionService as w}from"../../../services/extensions/common/extensions.js";import{ExtensionHostProfiler as L}from"../../../services/extensions/electron-sandbox/extensionHostProfiler.js";import{IStatusbarService as C,StatusbarAlignment as R}from"../../../services/statusbar/browser/statusbar.js";import{RuntimeExtensionsInput as z}from"../common/runtimeExtensionsInput.js";import{ProfileSessionState as i}from"./runtimeExtensionsEditor.js";let f=class extends g{constructor(t,e,r,a,p,N,U){super();this._extensionService=t;this._editorService=e;this._instantiationService=r;this._nativeHostService=a;this._dialogService=p;this._statusbarService=N;this._productService=U;this._profile=null,this._profileSession=null,this._setState(i.None),P.registerCommand("workbench.action.extensionHostProfiler.stop",()=>{this.stopProfiling(),this._editorService.openEditor(z.instance,{pinned:!0})})}_onDidChangeState=this._register(new u);onDidChangeState=this._onDidChangeState.event;_onDidChangeLastProfile=this._register(new u);onDidChangeLastProfile=this._onDidChangeLastProfile.event;_unresponsiveProfiles=new x;_profile;_profileSession;_state=i.None;profilingStatusBarIndicator;profilingStatusBarIndicatorLabelUpdater=this._register(new _);lastProfileSavedTo;get state(){return this._state}get lastProfile(){return this._profile}_setState(t){this._state!==t&&(this._state=t,this._state===i.Running?this.updateProfilingStatusBarIndicator(!0):this._state===i.Stopping&&this.updateProfilingStatusBarIndicator(!1),this._onDidChangeState.fire(void 0))}updateProfilingStatusBarIndicator(t){if(this.profilingStatusBarIndicatorLabelUpdater.clear(),t){const e={name:n.localize("status.profiler","Extension Profiler"),text:n.localize("profilingExtensionHost","Profiling Extension Host"),showProgress:!0,ariaLabel:n.localize("profilingExtensionHost","Profiling Extension Host"),tooltip:n.localize("selectAndStartDebug","Click to stop profiling."),command:"workbench.action.extensionHostProfiler.stop"},r=Date.now(),a=v(m,()=>{this.profilingStatusBarIndicator?.update({...e,text:n.localize("profilingExtensionHostTime","Profiling Extension Host ({0} sec)",Math.round((new Date().getTime()-r)/1e3))})},1e3);this.profilingStatusBarIndicatorLabelUpdater.value=a,this.profilingStatusBarIndicator?this.profilingStatusBarIndicator.update(e):this.profilingStatusBarIndicator=this._statusbarService.addEntry(e,"status.profiler",R.RIGHT)}else this.profilingStatusBarIndicator&&(this.profilingStatusBarIndicator.dispose(),this.profilingStatusBarIndicator=void 0)}async startProfiling(){if(this._state!==i.None)return null;const t=await this._extensionService.getInspectPorts(D.LocalProcess,!0);return t.length===0?this._dialogService.confirm({type:"info",message:n.localize("restart1","Profile Extensions"),detail:n.localize("restart2","In order to profile extensions a restart is required. Do you want to restart '{0}' now?",this._productService.nameLong),primaryButton:n.localize({key:"restart3",comment:["&& denotes a mnemonic"]},"&&Restart")}).then(e=>{e.confirmed&&this._nativeHostService.relaunch({addArgs:[`--inspect-extensions=${I()}`]})}):(t.length>1,this._setState(i.Starting),this._instantiationService.createInstance(L,t[0].host,t[0].port).start().then(e=>{this._profileSession=e,this._setState(i.Running)},e=>{c(e),this._setState(i.None)}))}stopProfiling(){this._state!==i.Running||!this._profileSession||(this._setState(i.Stopping),this._profileSession.stop().then(t=>{this._setLastProfile(t),this._setState(i.None)},t=>{c(t),this._setState(i.None)}),this._profileSession=null)}_setLastProfile(t){this._profile=t,this.lastProfileSavedTo=void 0,this._onDidChangeLastProfile.fire(void 0)}getUnresponsiveProfile(t){return this._unresponsiveProfiles.get(t)}setUnresponsiveProfile(t,e){this._unresponsiveProfiles.set(t,e),this._setLastProfile(e)}};f=d([o(0,w),o(1,B),o(2,y),o(3,b),o(4,E),o(5,C),o(6,H)],f);export{f as ExtensionHostProfileService};
