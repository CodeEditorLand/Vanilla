{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/extensions/electron-sandbox/extensionsActions.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { localize2 } from '../../../../nls.js';\nimport { IFileService } from '../../../../platform/files/common/files.js';\nimport { URI } from '../../../../base/common/uri.js';\nimport { INativeWorkbenchEnvironmentService } from '../../../services/environment/electron-sandbox/environmentService.js';\nimport { INativeHostService } from '../../../../platform/native/common/native.js';\nimport { Schemas } from '../../../../base/common/network.js';\nimport { Action2 } from '../../../../platform/actions/common/actions.js';\nimport { ServicesAccessor } from '../../../../platform/instantiation/common/instantiation.js';\nimport { ExtensionsLocalizedLabel, IExtensionManagementService } from '../../../../platform/extensionManagement/common/extensionManagement.js';\nimport { Categories } from '../../../../platform/action/common/actionCommonCategories.js';\n\nexport class OpenExtensionsFolderAction extends Action2 {\n\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: 'workbench.extensions.action.openExtensionsFolder',\n\t\t\ttitle: localize2('openExtensionsFolder', 'Open Extensions Folder'),\n\t\t\tcategory: ExtensionsLocalizedLabel,\n\t\t\tf1: true\n\t\t});\n\t}\n\n\tasync run(accessor: ServicesAccessor): Promise<void> {\n\t\tconst nativeHostService = accessor.get(INativeHostService);\n\t\tconst fileService = accessor.get(IFileService);\n\t\tconst environmentService = accessor.get(INativeWorkbenchEnvironmentService);\n\n\t\tconst extensionsHome = URI.file(environmentService.extensionsPath);\n\t\tconst file = await fileService.resolve(extensionsHome);\n\n\t\tlet itemToShow: URI;\n\t\tif (file.children && file.children.length > 0) {\n\t\t\titemToShow = file.children[0].resource;\n\t\t} else {\n\t\t\titemToShow = extensionsHome;\n\t\t}\n\n\t\tif (itemToShow.scheme === Schemas.file) {\n\t\t\treturn nativeHostService.showItemInFolder(itemToShow.fsPath);\n\t\t}\n\t}\n}\n\nexport class CleanUpExtensionsFolderAction extends Action2 {\n\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: '_workbench.extensions.action.cleanUpExtensionsFolder',\n\t\t\ttitle: localize2('cleanUpExtensionsFolder', 'Cleanup Extensions Folder'),\n\t\t\tcategory: Categories.Developer,\n\t\t\tf1: true\n\t\t});\n\t}\n\n\tasync run(accessor: ServicesAccessor): Promise<void> {\n\t\tconst extensionManagementService = accessor.get(IExtensionManagementService);\n\t\treturn extensionManagementService.cleanUp();\n\t}\n}\n\n"],
  "mappings": ";;AAKA,SAAS,iBAAiB;AAC1B,SAAS,oBAAoB;AAC7B,SAAS,WAAW;AACpB,SAAS,0CAA0C;AACnD,SAAS,0BAA0B;AACnC,SAAS,eAAe;AACxB,SAAS,eAAe;AACxB,SAAS,wBAAwB;AACjC,SAAS,0BAA0B,mCAAmC;AACtE,SAAS,kBAAkB;AAEpB,MAAM,mCAAmC,QAAQ;AAAA,EAhBxD,OAgBwD;AAAA;AAAA;AAAA,EAEvD,cAAc;AACb,UAAM;AAAA,MACL,IAAI;AAAA,MACJ,OAAO,UAAU,wBAAwB,wBAAwB;AAAA,MACjE,UAAU;AAAA,MACV,IAAI;AAAA,IACL,CAAC;AAAA,EACF;AAAA,EAEA,MAAM,IAAI,UAA2C;AACpD,UAAM,oBAAoB,SAAS,IAAI,kBAAkB;AACzD,UAAM,cAAc,SAAS,IAAI,YAAY;AAC7C,UAAM,qBAAqB,SAAS,IAAI,kCAAkC;AAE1E,UAAM,iBAAiB,IAAI,KAAK,mBAAmB,cAAc;AACjE,UAAM,OAAO,MAAM,YAAY,QAAQ,cAAc;AAErD,QAAI;AACJ,QAAI,KAAK,YAAY,KAAK,SAAS,SAAS,GAAG;AAC9C,mBAAa,KAAK,SAAS,CAAC,EAAE;AAAA,IAC/B,OAAO;AACN,mBAAa;AAAA,IACd;AAEA,QAAI,WAAW,WAAW,QAAQ,MAAM;AACvC,aAAO,kBAAkB,iBAAiB,WAAW,MAAM;AAAA,IAC5D;AAAA,EACD;AACD;AAEO,MAAM,sCAAsC,QAAQ;AAAA,EAhD3D,OAgD2D;AAAA;AAAA;AAAA,EAE1D,cAAc;AACb,UAAM;AAAA,MACL,IAAI;AAAA,MACJ,OAAO,UAAU,2BAA2B,2BAA2B;AAAA,MACvE,UAAU,WAAW;AAAA,MACrB,IAAI;AAAA,IACL,CAAC;AAAA,EACF;AAAA,EAEA,MAAM,IAAI,UAA2C;AACpD,UAAM,6BAA6B,SAAS,IAAI,2BAA2B;AAC3E,WAAO,2BAA2B,QAAQ;AAAA,EAC3C;AACD;",
  "names": []
}
