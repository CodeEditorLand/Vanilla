{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/extensions/electron-sandbox/extensionsActions.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Schemas } from \"../../../../base/common/network.js\";\nimport { URI } from \"../../../../base/common/uri.js\";\nimport { localize2 } from \"../../../../nls.js\";\nimport { Categories } from \"../../../../platform/action/common/actionCommonCategories.js\";\nimport { Action2 } from \"../../../../platform/actions/common/actions.js\";\nimport {\n\tExtensionsLocalizedLabel,\n\tIExtensionManagementService,\n} from \"../../../../platform/extensionManagement/common/extensionManagement.js\";\nimport { IFileService } from \"../../../../platform/files/common/files.js\";\nimport type { ServicesAccessor } from \"../../../../platform/instantiation/common/instantiation.js\";\nimport { INativeHostService } from \"../../../../platform/native/common/native.js\";\nimport { INativeWorkbenchEnvironmentService } from \"../../../services/environment/electron-sandbox/environmentService.js\";\n\nexport class OpenExtensionsFolderAction extends Action2 {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: \"workbench.extensions.action.openExtensionsFolder\",\n\t\t\ttitle: localize2(\"openExtensionsFolder\", \"Open Extensions Folder\"),\n\t\t\tcategory: ExtensionsLocalizedLabel,\n\t\t\tf1: true,\n\t\t});\n\t}\n\n\tasync run(accessor: ServicesAccessor): Promise<void> {\n\t\tconst nativeHostService = accessor.get(INativeHostService);\n\t\tconst fileService = accessor.get(IFileService);\n\t\tconst environmentService = accessor.get(\n\t\t\tINativeWorkbenchEnvironmentService,\n\t\t);\n\n\t\tconst extensionsHome = URI.file(environmentService.extensionsPath);\n\t\tconst file = await fileService.resolve(extensionsHome);\n\n\t\tlet itemToShow: URI;\n\t\tif (file.children && file.children.length > 0) {\n\t\t\titemToShow = file.children[0].resource;\n\t\t} else {\n\t\t\titemToShow = extensionsHome;\n\t\t}\n\n\t\tif (itemToShow.scheme === Schemas.file) {\n\t\t\treturn nativeHostService.showItemInFolder(itemToShow.fsPath);\n\t\t}\n\t}\n}\n\nexport class CleanUpExtensionsFolderAction extends Action2 {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: \"_workbench.extensions.action.cleanUpExtensionsFolder\",\n\t\t\ttitle: localize2(\n\t\t\t\t\"cleanUpExtensionsFolder\",\n\t\t\t\t\"Cleanup Extensions Folder\",\n\t\t\t),\n\t\t\tcategory: Categories.Developer,\n\t\t\tf1: true,\n\t\t});\n\t}\n\n\tasync run(accessor: ServicesAccessor): Promise<void> {\n\t\tconst extensionManagementService = accessor.get(\n\t\t\tIExtensionManagementService,\n\t\t);\n\t\treturn extensionManagementService.cleanUp();\n\t}\n}\n"],
  "mappings": ";;AAKA,SAAS,eAAe;AACxB,SAAS,WAAW;AACpB,SAAS,iBAAiB;AAC1B,SAAS,kBAAkB;AAC3B,SAAS,eAAe;AACxB;AAAA,EACC;AAAA,EACA;AAAA,OACM;AACP,SAAS,oBAAoB;AAE7B,SAAS,0BAA0B;AACnC,SAAS,0CAA0C;AAE5C,MAAM,mCAAmC,QAAQ;AAAA,EAnBxD,OAmBwD;AAAA;AAAA;AAAA,EACvD,cAAc;AACb,UAAM;AAAA,MACL,IAAI;AAAA,MACJ,OAAO,UAAU,wBAAwB,wBAAwB;AAAA,MACjE,UAAU;AAAA,MACV,IAAI;AAAA,IACL,CAAC;AAAA,EACF;AAAA,EAEA,MAAM,IAAI,UAA2C;AACpD,UAAM,oBAAoB,SAAS,IAAI,kBAAkB;AACzD,UAAM,cAAc,SAAS,IAAI,YAAY;AAC7C,UAAM,qBAAqB,SAAS;AAAA,MACnC;AAAA,IACD;AAEA,UAAM,iBAAiB,IAAI,KAAK,mBAAmB,cAAc;AACjE,UAAM,OAAO,MAAM,YAAY,QAAQ,cAAc;AAErD,QAAI;AACJ,QAAI,KAAK,YAAY,KAAK,SAAS,SAAS,GAAG;AAC9C,mBAAa,KAAK,SAAS,CAAC,EAAE;AAAA,IAC/B,OAAO;AACN,mBAAa;AAAA,IACd;AAEA,QAAI,WAAW,WAAW,QAAQ,MAAM;AACvC,aAAO,kBAAkB,iBAAiB,WAAW,MAAM;AAAA,IAC5D;AAAA,EACD;AACD;AAEO,MAAM,sCAAsC,QAAQ;AAAA,EApD3D,OAoD2D;AAAA;AAAA;AAAA,EAC1D,cAAc;AACb,UAAM;AAAA,MACL,IAAI;AAAA,MACJ,OAAO;AAAA,QACN;AAAA,QACA;AAAA,MACD;AAAA,MACA,UAAU,WAAW;AAAA,MACrB,IAAI;AAAA,IACL,CAAC;AAAA,EACF;AAAA,EAEA,MAAM,IAAI,UAA2C;AACpD,UAAM,6BAA6B,SAAS;AAAA,MAC3C;AAAA,IACD;AACA,WAAO,2BAA2B,QAAQ;AAAA,EAC3C;AACD;",
  "names": []
}
