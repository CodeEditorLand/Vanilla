import t from"assert";import{Query as l}from"../../common/extensionQuery.js";suite("Extension query",()=>{test("parse",()=>{let s=l.parse("");t.strictEqual(s.value,""),t.strictEqual(s.sortBy,""),s=l.parse("hello"),t.strictEqual(s.value,"hello"),t.strictEqual(s.sortBy,""),s=l.parse("   hello world "),t.strictEqual(s.value,"hello world"),t.strictEqual(s.sortBy,""),s=l.parse("@sort"),t.strictEqual(s.value,"@sort"),t.strictEqual(s.sortBy,""),s=l.parse("@sort:"),t.strictEqual(s.value,"@sort:"),t.strictEqual(s.sortBy,""),s=l.parse("  @sort:  "),t.strictEqual(s.value,"@sort:"),t.strictEqual(s.sortBy,""),s=l.parse("@sort:installs"),t.strictEqual(s.value,""),t.strictEqual(s.sortBy,"installs"),s=l.parse("   @sort:installs   "),t.strictEqual(s.value,""),t.strictEqual(s.sortBy,"installs"),s=l.parse("@sort:installs-"),t.strictEqual(s.value,""),t.strictEqual(s.sortBy,"installs"),s=l.parse("@sort:installs-foo"),t.strictEqual(s.value,""),t.strictEqual(s.sortBy,"installs"),s=l.parse("@sort:installs"),t.strictEqual(s.value,""),t.strictEqual(s.sortBy,"installs"),s=l.parse("@sort:installs"),t.strictEqual(s.value,""),t.strictEqual(s.sortBy,"installs"),s=l.parse("vs @sort:installs"),t.strictEqual(s.value,"vs"),t.strictEqual(s.sortBy,"installs"),s=l.parse("vs @sort:installs code"),t.strictEqual(s.value,"vs  code"),t.strictEqual(s.sortBy,"installs"),s=l.parse("@sort:installs @sort:ratings"),t.strictEqual(s.value,""),t.strictEqual(s.sortBy,"ratings")}),test("toString",()=>{let s=new l("hello","");t.strictEqual(s.toString(),"hello"),s=new l("hello world",""),t.strictEqual(s.toString(),"hello world"),s=new l("  hello    ",""),t.strictEqual(s.toString(),"hello"),s=new l("","installs"),t.strictEqual(s.toString(),"@sort:installs"),s=new l("","installs"),t.strictEqual(s.toString(),"@sort:installs"),s=new l("","installs"),t.strictEqual(s.toString(),"@sort:installs"),s=new l("hello","installs"),t.strictEqual(s.toString(),"hello @sort:installs"),s=new l("  hello      ","installs"),t.strictEqual(s.toString(),"hello @sort:installs")}),test("isValid",()=>{let s=new l("hello","");t(s.isValid()),s=new l("hello world",""),t(s.isValid()),s=new l("  hello    ",""),t(s.isValid()),s=new l("","installs"),t(s.isValid()),s=new l("","installs"),t(s.isValid()),s=new l("","installs"),t(s.isValid()),s=new l("","installs"),t(s.isValid()),s=new l("hello","installs"),t(s.isValid()),s=new l("  hello      ","installs"),t(s.isValid())}),test("equals",()=>{const s=new l("hello","");let a=new l("hello","");t(s.equals(a)),a=new l("hello world",""),t(!s.equals(a)),a=new l("hello","installs"),t(!s.equals(a)),a=new l("hello","installs"),t(!s.equals(a))}),test("autocomplete",()=>{l.suggestions("@sort:in").some(s=>s==="@sort:installs "),l.suggestions("@sort:installs").every(s=>s!=="@sort:rating "),l.suggestions("@category:blah").some(s=>s==='@category:"extension packs" '),l.suggestions('@category:"extension packs"').every(s=>s!=="@category:formatters ")})});
