{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/extensions/test/electron-sandbox/extensionRecommendationsService.test.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as sinon from 'sinon';\nimport assert from 'assert';\nimport * as uuid from '../../../../../base/common/uuid.js';\nimport {\n\tIExtensionGalleryService, IGalleryExtensionAssets, IGalleryExtension, IExtensionManagementService, IExtensionTipsService, getTargetPlatform,\n} from '../../../../../platform/extensionManagement/common/extensionManagement.js';\nimport { IWorkbenchExtensionEnablementService, IWorkbenchExtensionManagementService } from '../../../../services/extensionManagement/common/extensionManagement.js';\nimport { ExtensionGalleryService } from '../../../../../platform/extensionManagement/common/extensionGalleryService.js';\nimport { TestInstantiationService } from '../../../../../platform/instantiation/test/common/instantiationServiceMock.js';\nimport { Emitter, Event } from '../../../../../base/common/event.js';\nimport { ITelemetryService } from '../../../../../platform/telemetry/common/telemetry.js';\nimport { NullTelemetryService } from '../../../../../platform/telemetry/common/telemetryUtils.js';\nimport { IWorkspaceContextService } from '../../../../../platform/workspace/common/workspace.js';\nimport { TestLifecycleService } from '../../../../test/browser/workbenchTestServices.js';\nimport { TestContextService, TestProductService, TestStorageService } from '../../../../test/common/workbenchTestServices.js';\nimport { TestExtensionTipsService, TestSharedProcessService } from '../../../../test/electron-sandbox/workbenchTestServices.js';\nimport { TestNotificationService } from '../../../../../platform/notification/test/common/testNotificationService.js';\nimport { IConfigurationService } from '../../../../../platform/configuration/common/configuration.js';\nimport { URI } from '../../../../../base/common/uri.js';\nimport { testWorkspace } from '../../../../../platform/workspace/test/common/testWorkspace.js';\nimport { TestConfigurationService } from '../../../../../platform/configuration/test/common/testConfigurationService.js';\nimport { IPager } from '../../../../../base/common/paging.js';\nimport { getGalleryExtensionId } from '../../../../../platform/extensionManagement/common/extensionManagementUtil.js';\nimport { IEnvironmentService } from '../../../../../platform/environment/common/environment.js';\nimport { ConfigurationKey, IExtensionsWorkbenchService } from '../../common/extensions.js';\nimport { TestExtensionEnablementService } from '../../../../services/extensionManagement/test/browser/extensionEnablementService.test.js';\nimport { IURLService } from '../../../../../platform/url/common/url.js';\nimport { ITextModel } from '../../../../../editor/common/model.js';\nimport { IModelService } from '../../../../../editor/common/services/model.js';\nimport { ILifecycleService } from '../../../../services/lifecycle/common/lifecycle.js';\nimport { INotificationService, Severity, IPromptChoice, IPromptOptions } from '../../../../../platform/notification/common/notification.js';\nimport { NativeURLService } from '../../../../../platform/url/common/urlService.js';\nimport { IStorageService, StorageScope, StorageTarget } from '../../../../../platform/storage/common/storage.js';\nimport { ExtensionType } from '../../../../../platform/extensions/common/extensions.js';\nimport { ISharedProcessService } from '../../../../../platform/ipc/electron-sandbox/services.js';\nimport { FileService } from '../../../../../platform/files/common/fileService.js';\nimport { NullLogService, ILogService } from '../../../../../platform/log/common/log.js';\nimport { IFileService } from '../../../../../platform/files/common/files.js';\nimport { IProductService } from '../../../../../platform/product/common/productService.js';\nimport { ExtensionRecommendationsService } from '../../browser/extensionRecommendationsService.js';\nimport { NoOpWorkspaceTagsService } from '../../../tags/browser/workspaceTagsService.js';\nimport { IWorkspaceTagsService } from '../../../tags/common/workspaceTags.js';\nimport { ExtensionsWorkbenchService } from '../../browser/extensionsWorkbenchService.js';\nimport { IExtensionService } from '../../../../services/extensions/common/extensions.js';\nimport { IWorkspaceExtensionsConfigService, WorkspaceExtensionsConfigService } from '../../../../services/extensionRecommendations/common/workspaceExtensionsConfig.js';\nimport { IExtensionIgnoredRecommendationsService } from '../../../../services/extensionRecommendations/common/extensionRecommendations.js';\nimport { ExtensionIgnoredRecommendationsService } from '../../../../services/extensionRecommendations/common/extensionIgnoredRecommendationsService.js';\nimport { IExtensionRecommendationNotificationService } from '../../../../../platform/extensionRecommendations/common/extensionRecommendations.js';\nimport { ExtensionRecommendationNotificationService } from '../../browser/extensionRecommendationNotificationService.js';\nimport { IContextKeyService } from '../../../../../platform/contextkey/common/contextkey.js';\nimport { MockContextKeyService } from '../../../../../platform/keybinding/test/common/mockKeybindingService.js';\nimport { InMemoryFileSystemProvider } from '../../../../../platform/files/common/inMemoryFilesystemProvider.js';\nimport { joinPath } from '../../../../../base/common/resources.js';\nimport { VSBuffer } from '../../../../../base/common/buffer.js';\nimport { platform } from '../../../../../base/common/platform.js';\nimport { arch } from '../../../../../base/common/process.js';\nimport { runWithFakedTimers } from '../../../../../base/test/common/timeTravelScheduler.js';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from '../../../../../base/test/common/utils.js';\nimport { DisposableStore } from '../../../../../base/common/lifecycle.js';\nimport { timeout } from '../../../../../base/common/async.js';\nimport { IUpdateService, State } from '../../../../../platform/update/common/update.js';\nimport { IUriIdentityService } from '../../../../../platform/uriIdentity/common/uriIdentity.js';\nimport { UriIdentityService } from '../../../../../platform/uriIdentity/common/uriIdentityService.js';\n\nconst ROOT = URI.file('tests').with({ scheme: 'vscode-tests' });\n\nconst mockExtensionGallery: IGalleryExtension[] = [\n\taGalleryExtension('MockExtension1', {\n\t\tdisplayName: 'Mock Extension 1',\n\t\tversion: '1.5',\n\t\tpublisherId: 'mockPublisher1Id',\n\t\tpublisher: 'mockPublisher1',\n\t\tpublisherDisplayName: 'Mock Publisher 1',\n\t\tdescription: 'Mock Description',\n\t\tinstallCount: 1000,\n\t\trating: 4,\n\t\tratingCount: 100\n\t}, {\n\t\tdependencies: ['pub.1'],\n\t}, {\n\t\tmanifest: { uri: 'uri:manifest', fallbackUri: 'fallback:manifest' },\n\t\treadme: { uri: 'uri:readme', fallbackUri: 'fallback:readme' },\n\t\tchangelog: { uri: 'uri:changelog', fallbackUri: 'fallback:changlog' },\n\t\tdownload: { uri: 'uri:download', fallbackUri: 'fallback:download' },\n\t\ticon: { uri: 'uri:icon', fallbackUri: 'fallback:icon' },\n\t\tlicense: { uri: 'uri:license', fallbackUri: 'fallback:license' },\n\t\trepository: { uri: 'uri:repository', fallbackUri: 'fallback:repository' },\n\t\tsignature: { uri: 'uri:signature', fallbackUri: 'fallback:signature' },\n\t\tcoreTranslations: []\n\t}),\n\taGalleryExtension('MockExtension2', {\n\t\tdisplayName: 'Mock Extension 2',\n\t\tversion: '1.5',\n\t\tpublisherId: 'mockPublisher2Id',\n\t\tpublisher: 'mockPublisher2',\n\t\tpublisherDisplayName: 'Mock Publisher 2',\n\t\tdescription: 'Mock Description',\n\t\tinstallCount: 1000,\n\t\trating: 4,\n\t\tratingCount: 100\n\t}, {\n\t\tdependencies: ['pub.1', 'pub.2'],\n\t}, {\n\t\tmanifest: { uri: 'uri:manifest', fallbackUri: 'fallback:manifest' },\n\t\treadme: { uri: 'uri:readme', fallbackUri: 'fallback:readme' },\n\t\tchangelog: { uri: 'uri:changelog', fallbackUri: 'fallback:changlog' },\n\t\tdownload: { uri: 'uri:download', fallbackUri: 'fallback:download' },\n\t\ticon: { uri: 'uri:icon', fallbackUri: 'fallback:icon' },\n\t\tlicense: { uri: 'uri:license', fallbackUri: 'fallback:license' },\n\t\trepository: { uri: 'uri:repository', fallbackUri: 'fallback:repository' },\n\t\tsignature: { uri: 'uri:signature', fallbackUri: 'fallback:signature' },\n\t\tcoreTranslations: []\n\t})\n];\n\nconst mockExtensionLocal = [\n\t{\n\t\ttype: ExtensionType.User,\n\t\tidentifier: mockExtensionGallery[0].identifier,\n\t\tmanifest: {\n\t\t\tname: mockExtensionGallery[0].name,\n\t\t\tpublisher: mockExtensionGallery[0].publisher,\n\t\t\tversion: mockExtensionGallery[0].version\n\t\t},\n\t\tmetadata: null,\n\t\tpath: 'somepath',\n\t\treadmeUrl: 'some readmeUrl',\n\t\tchangelogUrl: 'some changelogUrl'\n\t},\n\t{\n\t\ttype: ExtensionType.User,\n\t\tidentifier: mockExtensionGallery[1].identifier,\n\t\tmanifest: {\n\t\t\tname: mockExtensionGallery[1].name,\n\t\t\tpublisher: mockExtensionGallery[1].publisher,\n\t\t\tversion: mockExtensionGallery[1].version\n\t\t},\n\t\tmetadata: null,\n\t\tpath: 'somepath',\n\t\treadmeUrl: 'some readmeUrl',\n\t\tchangelogUrl: 'some changelogUrl'\n\t}\n];\n\nconst mockTestData = {\n\trecommendedExtensions: [\n\t\t'mockPublisher1.mockExtension1',\n\t\t'MOCKPUBLISHER2.mockextension2',\n\t\t'badlyformattedextension',\n\t\t'MOCKPUBLISHER2.mockextension2',\n\t\t'unknown.extension'\n\t],\n\tvalidRecommendedExtensions: [\n\t\t'mockPublisher1.mockExtension1',\n\t\t'MOCKPUBLISHER2.mockextension2'\n\t]\n};\n\nfunction aPage<T>(...objects: T[]): IPager<T> {\n\treturn { firstPage: objects, total: objects.length, pageSize: objects.length, getPage: () => null! };\n}\n\nconst noAssets: IGalleryExtensionAssets = {\n\tchangelog: null,\n\tdownload: null!,\n\ticon: null!,\n\tlicense: null,\n\tmanifest: null,\n\treadme: null,\n\trepository: null,\n\tsignature: null,\n\tcoreTranslations: []\n};\n\nfunction aGalleryExtension(name: string, properties: any = {}, galleryExtensionProperties: any = {}, assets: IGalleryExtensionAssets = noAssets): IGalleryExtension {\n\tconst targetPlatform = getTargetPlatform(platform, arch);\n\tconst galleryExtension = <IGalleryExtension>Object.create({ name, publisher: 'pub', version: '1.0.0', allTargetPlatforms: [targetPlatform], properties: {}, assets: {}, ...properties });\n\tgalleryExtension.properties = { ...galleryExtension.properties, dependencies: [], targetPlatform, ...galleryExtensionProperties };\n\tgalleryExtension.assets = { ...galleryExtension.assets, ...assets };\n\tgalleryExtension.identifier = { id: getGalleryExtensionId(galleryExtension.publisher, galleryExtension.name), uuid: uuid.generateUuid() };\n\treturn <IGalleryExtension>galleryExtension;\n}\n\nsuite('ExtensionRecommendationsService Test', () => {\n\tlet disposableStore: DisposableStore;\n\tlet workspaceService: IWorkspaceContextService;\n\tlet instantiationService: TestInstantiationService;\n\tlet testConfigurationService: TestConfigurationService;\n\tlet testObject: ExtensionRecommendationsService;\n\tlet prompted: boolean;\n\tlet promptedEmitter: Emitter<void>;\n\tlet onModelAddedEvent: Emitter<ITextModel>;\n\n\tteardown(async () => {\n\t\tdisposableStore.dispose();\n\t\tawait timeout(0); // allow for async disposables to complete\n\t});\n\n\tensureNoDisposablesAreLeakedInTestSuite();\n\n\tsetup(() => {\n\t\tdisposableStore = new DisposableStore();\n\t\tinstantiationService = disposableStore.add(new TestInstantiationService());\n\t\tpromptedEmitter = disposableStore.add(new Emitter<void>());\n\t\tinstantiationService.stub(IExtensionGalleryService, ExtensionGalleryService);\n\t\tinstantiationService.stub(ISharedProcessService, TestSharedProcessService);\n\t\tinstantiationService.stub(ILifecycleService, disposableStore.add(new TestLifecycleService()));\n\t\ttestConfigurationService = new TestConfigurationService();\n\t\tinstantiationService.stub(IConfigurationService, testConfigurationService);\n\t\tinstantiationService.stub(IProductService, TestProductService);\n\t\tinstantiationService.stub(ILogService, NullLogService);\n\t\tconst fileService = new FileService(instantiationService.get(ILogService));\n\t\tinstantiationService.stub(IFileService, disposableStore.add(fileService));\n\t\tconst fileSystemProvider = disposableStore.add(new InMemoryFileSystemProvider());\n\t\tdisposableStore.add(fileService.registerProvider(ROOT.scheme, fileSystemProvider));\n\t\tinstantiationService.stub(IUriIdentityService, disposableStore.add(new UriIdentityService(instantiationService.get(IFileService))));\n\t\tinstantiationService.stub(INotificationService, new TestNotificationService());\n\t\tinstantiationService.stub(IContextKeyService, new MockContextKeyService());\n\t\tinstantiationService.stub(IWorkbenchExtensionManagementService, {\n\t\t\tonInstallExtension: Event.None,\n\t\t\tonDidInstallExtensions: Event.None,\n\t\t\tonUninstallExtension: Event.None,\n\t\t\tonDidUninstallExtension: Event.None,\n\t\t\tonDidUpdateExtensionMetadata: Event.None,\n\t\t\tonDidChangeProfile: Event.None,\n\t\t\tasync getInstalled() { return []; },\n\t\t\tasync canInstall() { return true; },\n\t\t\tasync getExtensionsControlManifest() { return { malicious: [], deprecated: {}, search: [] }; },\n\t\t\tasync getTargetPlatform() { return getTargetPlatform(platform, arch); },\n\t\t});\n\t\tinstantiationService.stub(IExtensionService, {\n\t\t\tonDidChangeExtensions: Event.None,\n\t\t\textensions: [],\n\t\t\tasync whenInstalledExtensionsRegistered() { return true; }\n\t\t});\n\t\tinstantiationService.stub(IWorkbenchExtensionEnablementService, disposableStore.add(new TestExtensionEnablementService(instantiationService)));\n\t\tinstantiationService.stub(ITelemetryService, NullTelemetryService);\n\t\tinstantiationService.stub(IURLService, NativeURLService);\n\t\tinstantiationService.stub(IWorkspaceTagsService, new NoOpWorkspaceTagsService());\n\t\tinstantiationService.stub(IStorageService, disposableStore.add(new TestStorageService()));\n\t\tinstantiationService.stub(ILogService, new NullLogService());\n\t\tinstantiationService.stub(IProductService, {\n\t\t\textensionRecommendations: {\n\t\t\t\t'ms-python.python': {\n\t\t\t\t\tonFileOpen: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t'pathGlob': '{**/*.py}',\n\t\t\t\t\t\t\timportant: true\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t},\n\t\t\t\t'ms-vscode.PowerShell': {\n\t\t\t\t\tonFileOpen: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t'pathGlob': '{**/*.ps,**/*.ps1}',\n\t\t\t\t\t\t\timportant: true\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t},\n\t\t\t\t'ms-dotnettools.csharp': {\n\t\t\t\t\tonFileOpen: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t'pathGlob': '{**/*.cs,**/project.json,**/global.json,**/*.csproj,**/*.sln,**/appsettings.json}',\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t},\n\t\t\t\t'msjsdiag.debugger-for-chrome': {\n\t\t\t\t\tonFileOpen: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t'pathGlob': '{**/*.ts,**/*.tsx,**/*.js,**/*.jsx,**/*.es6,**/*.mjs,**/*.cjs,**/.babelrc}',\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t},\n\t\t\t\t'lukehoban.Go': {\n\t\t\t\t\tonFileOpen: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t'pathGlob': '**/*.go',\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t},\n\t\t});\n\n\t\tinstantiationService.stub(IUpdateService, { onStateChange: Event.None, state: State.Uninitialized });\n\t\tinstantiationService.set(IExtensionsWorkbenchService, disposableStore.add(instantiationService.createInstance(ExtensionsWorkbenchService)));\n\t\tinstantiationService.stub(IExtensionTipsService, disposableStore.add(instantiationService.createInstance(TestExtensionTipsService)));\n\n\t\tonModelAddedEvent = new Emitter<ITextModel>();\n\n\t\tinstantiationService.stub(IEnvironmentService, {});\n\t\tinstantiationService.stubPromise(IExtensionManagementService, 'getInstalled', []);\n\t\tinstantiationService.stub(IExtensionGalleryService, 'isEnabled', true);\n\t\tinstantiationService.stubPromise(IExtensionGalleryService, 'query', aPage<IGalleryExtension>(...mockExtensionGallery));\n\t\tinstantiationService.stubPromise(IExtensionGalleryService, 'getExtensions', mockExtensionGallery);\n\n\t\tprompted = false;\n\n\t\tclass TestNotificationService2 extends TestNotificationService {\n\t\t\tpublic override prompt(severity: Severity, message: string, choices: IPromptChoice[], options?: IPromptOptions) {\n\t\t\t\tprompted = true;\n\t\t\t\tpromptedEmitter.fire();\n\t\t\t\treturn super.prompt(severity, message, choices, options);\n\t\t\t}\n\t\t}\n\n\t\tinstantiationService.stub(INotificationService, new TestNotificationService2());\n\n\t\ttestConfigurationService.setUserConfiguration(ConfigurationKey, { ignoreRecommendations: false });\n\t\tinstantiationService.stub(IModelService, <IModelService>{\n\t\t\tgetModels(): any { return []; },\n\t\t\tonModelAdded: onModelAddedEvent.event\n\t\t});\n\t});\n\n\tfunction setUpFolderWorkspace(folderName: string, recommendedExtensions: string[], ignoredRecommendations: string[] = []): Promise<void> {\n\t\treturn setUpFolder(folderName, recommendedExtensions, ignoredRecommendations);\n\t}\n\n\tasync function setUpFolder(folderName: string, recommendedExtensions: string[], ignoredRecommendations: string[] = []): Promise<void> {\n\t\tconst fileService = instantiationService.get(IFileService);\n\t\tconst folderDir = joinPath(ROOT, folderName);\n\t\tconst workspaceSettingsDir = joinPath(folderDir, '.vscode');\n\t\tawait fileService.createFolder(workspaceSettingsDir);\n\t\tconst configPath = joinPath(workspaceSettingsDir, 'extensions.json');\n\t\tawait fileService.writeFile(configPath, VSBuffer.fromString(JSON.stringify({\n\t\t\t'recommendations': recommendedExtensions,\n\t\t\t'unwantedRecommendations': ignoredRecommendations,\n\t\t}, null, '\\t')));\n\n\t\tconst myWorkspace = testWorkspace(folderDir);\n\n\t\tinstantiationService.stub(IFileService, fileService);\n\t\tworkspaceService = new TestContextService(myWorkspace);\n\t\tinstantiationService.stub(IWorkspaceContextService, workspaceService);\n\t\tinstantiationService.stub(IWorkspaceExtensionsConfigService, disposableStore.add(instantiationService.createInstance(WorkspaceExtensionsConfigService)));\n\t\tinstantiationService.stub(IExtensionIgnoredRecommendationsService, disposableStore.add(instantiationService.createInstance(ExtensionIgnoredRecommendationsService)));\n\t\tinstantiationService.stub(IExtensionRecommendationNotificationService, disposableStore.add(instantiationService.createInstance(ExtensionRecommendationNotificationService)));\n\t}\n\n\tfunction testNoPromptForValidRecommendations(recommendations: string[]) {\n\t\treturn setUpFolderWorkspace('myFolder', recommendations).then(() => {\n\t\t\ttestObject = disposableStore.add(instantiationService.createInstance(ExtensionRecommendationsService));\n\t\t\treturn testObject.activationPromise.then(() => {\n\t\t\t\tassert.strictEqual(Object.keys(testObject.getAllRecommendationsWithReason()).length, recommendations.length);\n\t\t\t\tassert.ok(!prompted);\n\t\t\t});\n\t\t});\n\t}\n\n\tfunction testNoPromptOrRecommendationsForValidRecommendations(recommendations: string[]) {\n\t\treturn setUpFolderWorkspace('myFolder', mockTestData.validRecommendedExtensions).then(() => {\n\t\t\ttestObject = disposableStore.add(instantiationService.createInstance(ExtensionRecommendationsService));\n\t\t\tassert.ok(!prompted);\n\n\t\t\treturn testObject.getWorkspaceRecommendations().then(() => {\n\t\t\t\tassert.strictEqual(Object.keys(testObject.getAllRecommendationsWithReason()).length, 0);\n\t\t\t\tassert.ok(!prompted);\n\t\t\t});\n\t\t});\n\t}\n\n\ttest('ExtensionRecommendationsService: No Prompt for valid workspace recommendations when galleryService is absent', () => runWithFakedTimers<void>({ useFakeTimers: true }, async () => {\n\t\tconst galleryQuerySpy = sinon.spy();\n\t\tinstantiationService.stub(IExtensionGalleryService, { query: galleryQuerySpy, isEnabled: () => false });\n\n\t\treturn testNoPromptOrRecommendationsForValidRecommendations(mockTestData.validRecommendedExtensions)\n\t\t\t.then(() => assert.ok(galleryQuerySpy.notCalled));\n\t}));\n\n\ttest('ExtensionRecommendationsService: No Prompt for valid workspace recommendations during extension development', () => runWithFakedTimers<void>({ useFakeTimers: true }, async () => {\n\t\tinstantiationService.stub(IEnvironmentService, { extensionDevelopmentLocationURI: [URI.file('/folder/file')], isExtensionDevelopment: true });\n\t\treturn testNoPromptOrRecommendationsForValidRecommendations(mockTestData.validRecommendedExtensions);\n\t}));\n\n\ttest('ExtensionRecommendationsService: No workspace recommendations or prompts when extensions.json has empty array', () => runWithFakedTimers<void>({ useFakeTimers: true }, async () => {\n\t\treturn testNoPromptForValidRecommendations([]);\n\t}));\n\n\ttest('ExtensionRecommendationsService: Prompt for valid workspace recommendations', () => runWithFakedTimers<void>({ useFakeTimers: true }, async () => {\n\t\tawait setUpFolderWorkspace('myFolder', mockTestData.recommendedExtensions);\n\t\ttestObject = disposableStore.add(instantiationService.createInstance(ExtensionRecommendationsService));\n\n\t\tawait Event.toPromise(promptedEmitter.event);\n\t\tconst recommendations = Object.keys(testObject.getAllRecommendationsWithReason());\n\t\tconst expected = [...mockTestData.validRecommendedExtensions, 'unknown.extension'];\n\t\tassert.strictEqual(recommendations.length, expected.length);\n\t\texpected.forEach(x => {\n\t\t\tassert.strictEqual(recommendations.indexOf(x.toLowerCase()) > -1, true);\n\t\t});\n\t}));\n\n\ttest('ExtensionRecommendationsService: No Prompt for valid workspace recommendations if they are already installed', () => runWithFakedTimers<void>({ useFakeTimers: true }, async () => {\n\t\tinstantiationService.stubPromise(IExtensionManagementService, 'getInstalled', mockExtensionLocal);\n\t\treturn testNoPromptForValidRecommendations(mockTestData.validRecommendedExtensions);\n\t}));\n\n\ttest('ExtensionRecommendationsService: No Prompt for valid workspace recommendations with casing mismatch if they are already installed', () => runWithFakedTimers<void>({ useFakeTimers: true }, async () => {\n\t\tinstantiationService.stubPromise(IExtensionManagementService, 'getInstalled', mockExtensionLocal);\n\t\treturn testNoPromptForValidRecommendations(mockTestData.validRecommendedExtensions.map(x => x.toUpperCase()));\n\t}));\n\n\ttest('ExtensionRecommendationsService: No Prompt for valid workspace recommendations if ignoreRecommendations is set', () => runWithFakedTimers<void>({ useFakeTimers: true }, async () => {\n\t\ttestConfigurationService.setUserConfiguration(ConfigurationKey, { ignoreRecommendations: true });\n\t\treturn testNoPromptForValidRecommendations(mockTestData.validRecommendedExtensions);\n\t}));\n\n\ttest('ExtensionRecommendationsService: No Prompt for valid workspace recommendations if showRecommendationsOnlyOnDemand is set', () => runWithFakedTimers<void>({ useFakeTimers: true }, async () => {\n\t\ttestConfigurationService.setUserConfiguration(ConfigurationKey, { showRecommendationsOnlyOnDemand: true });\n\t\treturn setUpFolderWorkspace('myFolder', mockTestData.validRecommendedExtensions).then(() => {\n\t\t\ttestObject = disposableStore.add(instantiationService.createInstance(ExtensionRecommendationsService));\n\t\t\treturn testObject.activationPromise.then(() => {\n\t\t\t\tassert.ok(!prompted);\n\t\t\t});\n\t\t});\n\t}));\n\n\ttest('ExtensionRecommendationsService: No Prompt for valid workspace recommendations if ignoreRecommendations is set for current workspace', () => runWithFakedTimers<void>({ useFakeTimers: true }, async () => {\n\t\tinstantiationService.get(IStorageService).store('extensionsAssistant/workspaceRecommendationsIgnore', true, StorageScope.WORKSPACE, StorageTarget.MACHINE);\n\t\treturn testNoPromptForValidRecommendations(mockTestData.validRecommendedExtensions);\n\t}));\n\n\ttest('ExtensionRecommendationsService: No Recommendations of globally ignored recommendations', () => runWithFakedTimers<void>({ useFakeTimers: true }, async () => {\n\t\tinstantiationService.get(IStorageService).store('extensionsAssistant/workspaceRecommendationsIgnore', true, StorageScope.WORKSPACE, StorageTarget.MACHINE);\n\t\tinstantiationService.get(IStorageService).store('extensionsAssistant/recommendations', '[\"ms-dotnettools.csharp\", \"ms-python.python\", \"ms-vscode.vscode-typescript-tslint-plugin\"]', StorageScope.PROFILE, StorageTarget.MACHINE);\n\t\tinstantiationService.get(IStorageService).store('extensionsAssistant/ignored_recommendations', '[\"ms-dotnettools.csharp\", \"mockpublisher2.mockextension2\"]', StorageScope.PROFILE, StorageTarget.MACHINE);\n\n\t\treturn setUpFolderWorkspace('myFolder', mockTestData.validRecommendedExtensions).then(() => {\n\t\t\ttestObject = disposableStore.add(instantiationService.createInstance(ExtensionRecommendationsService));\n\t\t\treturn testObject.activationPromise.then(() => {\n\t\t\t\tconst recommendations = testObject.getAllRecommendationsWithReason();\n\t\t\t\tassert.ok(!recommendations['ms-dotnettools.csharp']); // stored recommendation that has been globally ignored\n\t\t\t\tassert.ok(recommendations['ms-python.python']); // stored recommendation\n\t\t\t\tassert.ok(recommendations['mockpublisher1.mockextension1']); // workspace recommendation\n\t\t\t\tassert.ok(!recommendations['mockpublisher2.mockextension2']); // workspace recommendation that has been globally ignored\n\t\t\t});\n\t\t});\n\t}));\n\n\ttest('ExtensionRecommendationsService: No Recommendations of workspace ignored recommendations', () => runWithFakedTimers<void>({ useFakeTimers: true }, async () => {\n\t\tconst ignoredRecommendations = ['ms-dotnettools.csharp', 'mockpublisher2.mockextension2']; // ignore a stored recommendation and a workspace recommendation.\n\t\tconst storedRecommendations = '[\"ms-dotnettools.csharp\", \"ms-python.python\"]';\n\t\tinstantiationService.get(IStorageService).store('extensionsAssistant/workspaceRecommendationsIgnore', true, StorageScope.WORKSPACE, StorageTarget.MACHINE);\n\t\tinstantiationService.get(IStorageService).store('extensionsAssistant/recommendations', storedRecommendations, StorageScope.PROFILE, StorageTarget.MACHINE);\n\n\t\treturn setUpFolderWorkspace('myFolder', mockTestData.validRecommendedExtensions, ignoredRecommendations).then(() => {\n\t\t\ttestObject = disposableStore.add(instantiationService.createInstance(ExtensionRecommendationsService));\n\t\t\treturn testObject.activationPromise.then(() => {\n\t\t\t\tconst recommendations = testObject.getAllRecommendationsWithReason();\n\t\t\t\tassert.ok(!recommendations['ms-dotnettools.csharp']); // stored recommendation that has been workspace ignored\n\t\t\t\tassert.ok(recommendations['ms-python.python']); // stored recommendation\n\t\t\t\tassert.ok(recommendations['mockpublisher1.mockextension1']); // workspace recommendation\n\t\t\t\tassert.ok(!recommendations['mockpublisher2.mockextension2']); // workspace recommendation that has been workspace ignored\n\t\t\t});\n\t\t});\n\t}));\n\n\ttest('ExtensionRecommendationsService: Able to retrieve collection of all ignored recommendations', async () => runWithFakedTimers<void>({ useFakeTimers: true }, async () => {\n\n\t\tconst storageService = instantiationService.get(IStorageService);\n\t\tconst workspaceIgnoredRecommendations = ['ms-dotnettools.csharp']; // ignore a stored recommendation and a workspace recommendation.\n\t\tconst storedRecommendations = '[\"ms-dotnettools.csharp\", \"ms-python.python\"]';\n\t\tconst globallyIgnoredRecommendations = '[\"mockpublisher2.mockextension2\"]'; // ignore a workspace recommendation.\n\t\tstorageService.store('extensionsAssistant/workspaceRecommendationsIgnore', true, StorageScope.WORKSPACE, StorageTarget.MACHINE);\n\t\tstorageService.store('extensionsAssistant/recommendations', storedRecommendations, StorageScope.PROFILE, StorageTarget.MACHINE);\n\t\tstorageService.store('extensionsAssistant/ignored_recommendations', globallyIgnoredRecommendations, StorageScope.PROFILE, StorageTarget.MACHINE);\n\n\t\tawait setUpFolderWorkspace('myFolder', mockTestData.validRecommendedExtensions, workspaceIgnoredRecommendations);\n\t\ttestObject = disposableStore.add(instantiationService.createInstance(ExtensionRecommendationsService));\n\t\tawait testObject.activationPromise;\n\n\t\tconst recommendations = testObject.getAllRecommendationsWithReason();\n\t\tassert.deepStrictEqual(Object.keys(recommendations), ['ms-python.python', 'mockpublisher1.mockextension1']);\n\t}));\n\n\ttest('ExtensionRecommendationsService: Able to dynamically ignore/unignore global recommendations', async () => runWithFakedTimers<void>({ useFakeTimers: true }, async () => {\n\t\tconst storageService = instantiationService.get(IStorageService);\n\n\t\tconst storedRecommendations = '[\"ms-dotnettools.csharp\", \"ms-python.python\"]';\n\t\tconst globallyIgnoredRecommendations = '[\"mockpublisher2.mockextension2\"]'; // ignore a workspace recommendation.\n\t\tstorageService.store('extensionsAssistant/workspaceRecommendationsIgnore', true, StorageScope.WORKSPACE, StorageTarget.MACHINE);\n\t\tstorageService.store('extensionsAssistant/recommendations', storedRecommendations, StorageScope.PROFILE, StorageTarget.MACHINE);\n\t\tstorageService.store('extensionsAssistant/ignored_recommendations', globallyIgnoredRecommendations, StorageScope.PROFILE, StorageTarget.MACHINE);\n\n\t\tawait setUpFolderWorkspace('myFolder', mockTestData.validRecommendedExtensions);\n\t\tconst extensionIgnoredRecommendationsService = instantiationService.get(IExtensionIgnoredRecommendationsService);\n\t\ttestObject = disposableStore.add(instantiationService.createInstance(ExtensionRecommendationsService));\n\t\tawait testObject.activationPromise;\n\n\t\tlet recommendations = testObject.getAllRecommendationsWithReason();\n\t\tassert.ok(recommendations['ms-python.python']);\n\t\tassert.ok(recommendations['mockpublisher1.mockextension1']);\n\t\tassert.ok(!recommendations['mockpublisher2.mockextension2']);\n\n\t\textensionIgnoredRecommendationsService.toggleGlobalIgnoredRecommendation('mockpublisher1.mockextension1', true);\n\n\t\trecommendations = testObject.getAllRecommendationsWithReason();\n\t\tassert.ok(recommendations['ms-python.python']);\n\t\tassert.ok(!recommendations['mockpublisher1.mockextension1']);\n\t\tassert.ok(!recommendations['mockpublisher2.mockextension2']);\n\n\t\textensionIgnoredRecommendationsService.toggleGlobalIgnoredRecommendation('mockpublisher1.mockextension1', false);\n\n\t\trecommendations = testObject.getAllRecommendationsWithReason();\n\t\tassert.ok(recommendations['ms-python.python']);\n\t\tassert.ok(recommendations['mockpublisher1.mockextension1']);\n\t\tassert.ok(!recommendations['mockpublisher2.mockextension2']);\n\t}));\n\n\ttest('test global extensions are modified and recommendation change event is fired when an extension is ignored', async () => runWithFakedTimers<void>({ useFakeTimers: true }, async () => {\n\t\tconst storageService = instantiationService.get(IStorageService);\n\t\tconst changeHandlerTarget = sinon.spy();\n\t\tconst ignoredExtensionId = 'Some.Extension';\n\n\t\tstorageService.store('extensionsAssistant/workspaceRecommendationsIgnore', true, StorageScope.WORKSPACE, StorageTarget.MACHINE);\n\t\tstorageService.store('extensionsAssistant/ignored_recommendations', '[\"ms-vscode.vscode\"]', StorageScope.PROFILE, StorageTarget.MACHINE);\n\n\t\tawait setUpFolderWorkspace('myFolder', []);\n\t\ttestObject = disposableStore.add(instantiationService.createInstance(ExtensionRecommendationsService));\n\t\tconst extensionIgnoredRecommendationsService = instantiationService.get(IExtensionIgnoredRecommendationsService);\n\t\tdisposableStore.add(extensionIgnoredRecommendationsService.onDidChangeGlobalIgnoredRecommendation(changeHandlerTarget));\n\t\textensionIgnoredRecommendationsService.toggleGlobalIgnoredRecommendation(ignoredExtensionId, true);\n\t\tawait testObject.activationPromise;\n\n\t\tassert.ok(changeHandlerTarget.calledOnce);\n\t\tassert.ok(changeHandlerTarget.getCall(0).calledWithMatch({ extensionId: ignoredExtensionId.toLowerCase(), isRecommended: false }));\n\t}));\n\n\ttest('ExtensionRecommendationsService: Get file based recommendations from storage (old format)', () => runWithFakedTimers<void>({ useFakeTimers: true }, async () => {\n\t\tconst storedRecommendations = '[\"ms-dotnettools.csharp\", \"ms-python.python\", \"ms-vscode.vscode-typescript-tslint-plugin\"]';\n\t\tinstantiationService.get(IStorageService).store('extensionsAssistant/recommendations', storedRecommendations, StorageScope.PROFILE, StorageTarget.MACHINE);\n\n\t\treturn setUpFolderWorkspace('myFolder', []).then(() => {\n\t\t\ttestObject = disposableStore.add(instantiationService.createInstance(ExtensionRecommendationsService));\n\t\t\treturn testObject.activationPromise.then(() => {\n\t\t\t\tconst recommendations = testObject.getFileBasedRecommendations();\n\t\t\t\tassert.strictEqual(recommendations.length, 2);\n\t\t\t\tassert.ok(recommendations.some(extensionId => extensionId === 'ms-dotnettools.csharp')); // stored recommendation that exists in product.extensionTips\n\t\t\t\tassert.ok(recommendations.some(extensionId => extensionId === 'ms-python.python')); // stored recommendation that exists in product.extensionImportantTips\n\t\t\t\tassert.ok(recommendations.every(extensionId => extensionId !== 'ms-vscode.vscode-typescript-tslint-plugin')); // stored recommendation that is no longer in neither product.extensionTips nor product.extensionImportantTips\n\t\t\t});\n\t\t});\n\t}));\n\n\ttest('ExtensionRecommendationsService: Get file based recommendations from storage (new format)', async () => {\n\t\tconst milliSecondsInADay = 1000 * 60 * 60 * 24;\n\t\tconst now = Date.now();\n\t\tconst tenDaysOld = 10 * milliSecondsInADay;\n\t\tconst storedRecommendations = `{\"ms-dotnettools.csharp\": ${now}, \"ms-python.python\": ${now}, \"ms-vscode.vscode-typescript-tslint-plugin\": ${now}, \"lukehoban.Go\": ${tenDaysOld}}`;\n\t\tinstantiationService.get(IStorageService).store('extensionsAssistant/recommendations', storedRecommendations, StorageScope.PROFILE, StorageTarget.MACHINE);\n\n\t\tawait setUpFolderWorkspace('myFolder', []);\n\t\ttestObject = disposableStore.add(instantiationService.createInstance(ExtensionRecommendationsService));\n\t\tawait testObject.activationPromise;\n\n\t\tconst recommendations = testObject.getFileBasedRecommendations();\n\t\tassert.strictEqual(recommendations.length, 2);\n\t\tassert.ok(recommendations.some(extensionId => extensionId === 'ms-dotnettools.csharp')); // stored recommendation that exists in product.extensionTips\n\t\tassert.ok(recommendations.some(extensionId => extensionId === 'ms-python.python')); // stored recommendation that exists in product.extensionImportantTips\n\t\tassert.ok(recommendations.every(extensionId => extensionId !== 'ms-vscode.vscode-typescript-tslint-plugin')); // stored recommendation that is no longer in neither product.extensionTips nor product.extensionImportantTips\n\t\tassert.ok(recommendations.every(extensionId => extensionId !== 'lukehoban.Go')); //stored recommendation that is older than a week\n\t});\n});\n"],
  "mappings": "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",
  "names": []
}
