{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/extensions/test/electron-sandbox/extensionsWorkbenchService.test.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as sinon from 'sinon';\nimport assert from 'assert';\nimport { generateUuid } from '../../../../../base/common/uuid.js';\nimport { ExtensionState, AutoCheckUpdatesConfigurationKey, AutoUpdateConfigurationKey } from '../../common/extensions.js';\nimport { ExtensionsWorkbenchService } from '../../browser/extensionsWorkbenchService.js';\nimport {\n\tIExtensionManagementService, IExtensionGalleryService, ILocalExtension, IGalleryExtension,\n\tDidUninstallExtensionEvent, InstallExtensionEvent, IGalleryExtensionAssets, InstallOperation, IExtensionTipsService, InstallExtensionResult, getTargetPlatform, IExtensionsControlManifest, UninstallExtensionEvent, Metadata\n} from '../../../../../platform/extensionManagement/common/extensionManagement.js';\nimport { IWorkbenchExtensionEnablementService, EnablementState, IExtensionManagementServerService, IExtensionManagementServer, IProfileAwareExtensionManagementService, IWorkbenchExtensionManagementService } from '../../../../services/extensionManagement/common/extensionManagement.js';\nimport { IExtensionRecommendationsService } from '../../../../services/extensionRecommendations/common/extensionRecommendations.js';\nimport { getGalleryExtensionId } from '../../../../../platform/extensionManagement/common/extensionManagementUtil.js';\nimport { anExtensionManagementServerService, TestExtensionEnablementService } from '../../../../services/extensionManagement/test/browser/extensionEnablementService.test.js';\nimport { ExtensionGalleryService } from '../../../../../platform/extensionManagement/common/extensionGalleryService.js';\nimport { IURLService } from '../../../../../platform/url/common/url.js';\nimport { TestInstantiationService } from '../../../../../platform/instantiation/test/common/instantiationServiceMock.js';\nimport { Event, Emitter } from '../../../../../base/common/event.js';\nimport { IPager } from '../../../../../base/common/paging.js';\nimport { ITelemetryService } from '../../../../../platform/telemetry/common/telemetry.js';\nimport { NullTelemetryService } from '../../../../../platform/telemetry/common/telemetryUtils.js';\nimport { IWorkspaceContextService } from '../../../../../platform/workspace/common/workspace.js';\nimport { TestExtensionTipsService, TestSharedProcessService } from '../../../../test/electron-sandbox/workbenchTestServices.js';\nimport { ConfigurationTarget, IConfigurationChangeEvent, IConfigurationService } from '../../../../../platform/configuration/common/configuration.js';\nimport { ILogService, NullLogService } from '../../../../../platform/log/common/log.js';\nimport { IProgressService } from '../../../../../platform/progress/common/progress.js';\nimport { ProgressService } from '../../../../services/progress/browser/progressService.js';\nimport { INotificationService } from '../../../../../platform/notification/common/notification.js';\nimport { NativeURLService } from '../../../../../platform/url/common/urlService.js';\nimport { URI } from '../../../../../base/common/uri.js';\nimport { CancellationToken } from '../../../../../base/common/cancellation.js';\nimport { ExtensionType } from '../../../../../platform/extensions/common/extensions.js';\nimport { ExtensionKind } from '../../../../../platform/environment/common/environment.js';\nimport { IRemoteAgentService } from '../../../../services/remote/common/remoteAgentService.js';\nimport { RemoteAgentService } from '../../../../services/remote/electron-sandbox/remoteAgentService.js';\nimport { ISharedProcessService } from '../../../../../platform/ipc/electron-sandbox/services.js';\nimport { TestContextService } from '../../../../test/common/workbenchTestServices.js';\nimport { IProductService } from '../../../../../platform/product/common/productService.js';\nimport { ILifecycleService } from '../../../../services/lifecycle/common/lifecycle.js';\nimport { TestLifecycleService } from '../../../../test/browser/workbenchTestServices.js';\nimport { Schemas } from '../../../../../base/common/network.js';\nimport { IContextKeyService } from '../../../../../platform/contextkey/common/contextkey.js';\nimport { MockContextKeyService } from '../../../../../platform/keybinding/test/common/mockKeybindingService.js';\nimport { platform } from '../../../../../base/common/platform.js';\nimport { arch } from '../../../../../base/common/process.js';\nimport { IExtensionService } from '../../../../services/extensions/common/extensions.js';\nimport { toDisposable } from '../../../../../base/common/lifecycle.js';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from '../../../../../base/test/common/utils.js';\nimport { Mutable } from '../../../../../base/common/types.js';\nimport { IUpdateService, State } from '../../../../../platform/update/common/update.js';\nimport { IFileService } from '../../../../../platform/files/common/files.js';\nimport { FileService } from '../../../../../platform/files/common/fileService.js';\nimport { UserDataProfileService } from '../../../../services/userDataProfile/common/userDataProfileService.js';\nimport { IUserDataProfileService } from '../../../../services/userDataProfile/common/userDataProfile.js';\nimport { toUserDataProfile } from '../../../../../platform/userDataProfile/common/userDataProfile.js';\nimport { IDialogService } from '../../../../../platform/dialogs/common/dialogs.js';\n\nsuite('ExtensionsWorkbenchServiceTest', () => {\n\n\tlet instantiationService: TestInstantiationService;\n\tlet testObject: ExtensionsWorkbenchService;\n\tconst disposableStore = ensureNoDisposablesAreLeakedInTestSuite();\n\n\tlet installEvent: Emitter<InstallExtensionEvent>,\n\t\tdidInstallEvent: Emitter<readonly InstallExtensionResult[]>,\n\t\tuninstallEvent: Emitter<UninstallExtensionEvent>,\n\t\tdidUninstallEvent: Emitter<DidUninstallExtensionEvent>;\n\n\tsetup(async () => {\n\t\tdisposableStore.add(toDisposable(() => sinon.restore()));\n\t\tinstallEvent = disposableStore.add(new Emitter<InstallExtensionEvent>());\n\t\tdidInstallEvent = disposableStore.add(new Emitter<readonly InstallExtensionResult[]>());\n\t\tuninstallEvent = disposableStore.add(new Emitter<UninstallExtensionEvent>());\n\t\tdidUninstallEvent = disposableStore.add(new Emitter<DidUninstallExtensionEvent>());\n\n\t\tinstantiationService = disposableStore.add(new TestInstantiationService());\n\t\tinstantiationService.stub(ITelemetryService, NullTelemetryService);\n\t\tinstantiationService.stub(ILogService, NullLogService);\n\t\tinstantiationService.stub(IFileService, disposableStore.add(new FileService(new NullLogService())));\n\t\tinstantiationService.stub(IProgressService, ProgressService);\n\t\tinstantiationService.stub(IProductService, {});\n\n\t\tinstantiationService.stub(IExtensionGalleryService, ExtensionGalleryService);\n\t\tinstantiationService.stub(IURLService, NativeURLService);\n\t\tinstantiationService.stub(ISharedProcessService, TestSharedProcessService);\n\t\tinstantiationService.stub(IContextKeyService, new MockContextKeyService());\n\n\t\tinstantiationService.stub(IWorkspaceContextService, new TestContextService());\n\t\tstubConfiguration();\n\n\t\tinstantiationService.stub(IRemoteAgentService, RemoteAgentService);\n\t\tinstantiationService.stub(IUserDataProfileService, disposableStore.add(new UserDataProfileService(toUserDataProfile('test', 'test', URI.file('foo'), URI.file('cache')))));\n\n\t\tinstantiationService.stub(IWorkbenchExtensionManagementService, {\n\t\t\tonDidInstallExtensions: didInstallEvent.event,\n\t\t\tonInstallExtension: installEvent.event as any,\n\t\t\tonUninstallExtension: uninstallEvent.event as any,\n\t\t\tonDidUninstallExtension: didUninstallEvent.event as any,\n\t\t\tonDidUpdateExtensionMetadata: Event.None,\n\t\t\tonDidChangeProfile: Event.None,\n\t\t\tasync getInstalled() { return []; },\n\t\t\tasync getInstalledWorkspaceExtensions() { return []; },\n\t\t\tasync getExtensionsControlManifest() { return { malicious: [], deprecated: {}, search: [] }; },\n\t\t\tasync updateMetadata(local: Mutable<ILocalExtension>, metadata: Partial<Metadata>) {\n\t\t\t\tlocal.identifier.uuid = metadata.id;\n\t\t\t\tlocal.publisherDisplayName = metadata.publisherDisplayName!;\n\t\t\t\tlocal.publisherId = metadata.publisherId!;\n\t\t\t\treturn local;\n\t\t\t},\n\t\t\tasync canInstall() { return true; },\n\t\t\tgetTargetPlatform: async () => getTargetPlatform(platform, arch),\n\t\t\tasync resetPinnedStateForAllUserExtensions(pinned: boolean) { }\n\t\t});\n\n\t\tinstantiationService.stub(IExtensionManagementServerService, anExtensionManagementServerService({\n\t\t\tid: 'local',\n\t\t\tlabel: 'local',\n\t\t\textensionManagementService: instantiationService.get(IExtensionManagementService) as IProfileAwareExtensionManagementService,\n\t\t}, null, null));\n\n\t\tinstantiationService.stub(IWorkbenchExtensionEnablementService, disposableStore.add(new TestExtensionEnablementService(instantiationService)));\n\n\t\tinstantiationService.stub(ILifecycleService, disposableStore.add(new TestLifecycleService()));\n\t\tinstantiationService.stub(IExtensionTipsService, disposableStore.add(instantiationService.createInstance(TestExtensionTipsService)));\n\t\tinstantiationService.stub(IExtensionRecommendationsService, {});\n\n\t\tinstantiationService.stub(INotificationService, { prompt: () => null! });\n\n\t\tinstantiationService.stub(IExtensionService, {\n\t\t\tonDidChangeExtensions: Event.None,\n\t\t\textensions: [],\n\t\t\tasync whenInstalledExtensionsRegistered() { return true; }\n\t\t});\n\n\t\tinstantiationService.stubPromise(IExtensionManagementService, 'getInstalled', []);\n\t\tinstantiationService.stub(IExtensionGalleryService, 'isEnabled', true);\n\t\tinstantiationService.stubPromise(IExtensionGalleryService, 'query', aPage());\n\t\tinstantiationService.stubPromise(IExtensionGalleryService, 'getExtensions', []);\n\t\tinstantiationService.stubPromise(INotificationService, 'prompt', 0);\n\t\t(<TestExtensionEnablementService>instantiationService.get(IWorkbenchExtensionEnablementService)).reset();\n\t\tinstantiationService.stub(IUpdateService, { onStateChange: Event.None, state: State.Uninitialized });\n\t});\n\n\ttest('test gallery extension', async () => {\n\t\tconst expected = aGalleryExtension('expectedName', {\n\t\t\tdisplayName: 'expectedDisplayName',\n\t\t\tversion: '1.5.0',\n\t\t\tpublisherId: 'expectedPublisherId',\n\t\t\tpublisher: 'expectedPublisher',\n\t\t\tpublisherDisplayName: 'expectedPublisherDisplayName',\n\t\t\tdescription: 'expectedDescription',\n\t\t\tinstallCount: 1000,\n\t\t\trating: 4,\n\t\t\tratingCount: 100\n\t\t}, {\n\t\t\tdependencies: ['pub.1', 'pub.2'],\n\t\t}, {\n\t\t\tmanifest: { uri: 'uri:manifest', fallbackUri: 'fallback:manifest' },\n\t\t\treadme: { uri: 'uri:readme', fallbackUri: 'fallback:readme' },\n\t\t\tchangelog: { uri: 'uri:changelog', fallbackUri: 'fallback:changlog' },\n\t\t\tdownload: { uri: 'uri:download', fallbackUri: 'fallback:download' },\n\t\t\ticon: { uri: 'uri:icon', fallbackUri: 'fallback:icon' },\n\t\t\tlicense: { uri: 'uri:license', fallbackUri: 'fallback:license' },\n\t\t\trepository: { uri: 'uri:repository', fallbackUri: 'fallback:repository' },\n\t\t\tsignature: { uri: 'uri:signature', fallbackUri: 'fallback:signature' },\n\t\t\tcoreTranslations: []\n\t\t});\n\n\t\ttestObject = await aWorkbenchService();\n\t\tinstantiationService.stubPromise(IExtensionGalleryService, 'query', aPage(expected));\n\n\t\treturn testObject.queryGallery(CancellationToken.None).then(pagedResponse => {\n\t\t\tassert.strictEqual(1, pagedResponse.firstPage.length);\n\t\t\tconst actual = pagedResponse.firstPage[0];\n\n\t\t\tassert.strictEqual(ExtensionType.User, actual.type);\n\t\t\tassert.strictEqual('expectedName', actual.name);\n\t\t\tassert.strictEqual('expectedDisplayName', actual.displayName);\n\t\t\tassert.strictEqual('expectedpublisher.expectedname', actual.identifier.id);\n\t\t\tassert.strictEqual('expectedPublisher', actual.publisher);\n\t\t\tassert.strictEqual('expectedPublisherDisplayName', actual.publisherDisplayName);\n\t\t\tassert.strictEqual('1.5.0', actual.version);\n\t\t\tassert.strictEqual('1.5.0', actual.latestVersion);\n\t\t\tassert.strictEqual('expectedDescription', actual.description);\n\t\t\tassert.strictEqual('uri:icon', actual.iconUrl);\n\t\t\tassert.strictEqual('fallback:icon', actual.iconUrlFallback);\n\t\t\tassert.strictEqual('uri:license', actual.licenseUrl);\n\t\t\tassert.strictEqual(ExtensionState.Uninstalled, actual.state);\n\t\t\tassert.strictEqual(1000, actual.installCount);\n\t\t\tassert.strictEqual(4, actual.rating);\n\t\t\tassert.strictEqual(100, actual.ratingCount);\n\t\t\tassert.strictEqual(false, actual.outdated);\n\t\t\tassert.deepStrictEqual(['pub.1', 'pub.2'], actual.dependencies);\n\t\t});\n\t});\n\n\ttest('test for empty installed extensions', async () => {\n\t\ttestObject = await aWorkbenchService();\n\n\t\tassert.deepStrictEqual([], testObject.local);\n\t});\n\n\ttest('test for installed extensions', async () => {\n\t\tconst expected1 = aLocalExtension('local1', {\n\t\t\tpublisher: 'localPublisher1',\n\t\t\tversion: '1.1.0',\n\t\t\tdisplayName: 'localDisplayName1',\n\t\t\tdescription: 'localDescription1',\n\t\t\ticon: 'localIcon1',\n\t\t\textensionDependencies: ['pub.1', 'pub.2'],\n\t\t}, {\n\t\t\ttype: ExtensionType.User,\n\t\t\treadmeUrl: 'localReadmeUrl1',\n\t\t\tchangelogUrl: 'localChangelogUrl1',\n\t\t\tlocation: URI.file('localPath1')\n\t\t});\n\t\tconst expected2 = aLocalExtension('local2', {\n\t\t\tpublisher: 'localPublisher2',\n\t\t\tversion: '1.2.0',\n\t\t\tdisplayName: 'localDisplayName2',\n\t\t\tdescription: 'localDescription2',\n\t\t}, {\n\t\t\ttype: ExtensionType.System,\n\t\t\treadmeUrl: 'localReadmeUrl2',\n\t\t\tchangelogUrl: 'localChangelogUrl2',\n\t\t});\n\t\tinstantiationService.stubPromise(IExtensionManagementService, 'getInstalled', [expected1, expected2]);\n\t\ttestObject = await aWorkbenchService();\n\n\t\tconst actuals = testObject.local;\n\t\tassert.strictEqual(2, actuals.length);\n\n\t\tlet actual = actuals[0];\n\t\tassert.strictEqual(ExtensionType.User, actual.type);\n\t\tassert.strictEqual('local1', actual.name);\n\t\tassert.strictEqual('localDisplayName1', actual.displayName);\n\t\tassert.strictEqual('localpublisher1.local1', actual.identifier.id);\n\t\tassert.strictEqual('localPublisher1', actual.publisher);\n\t\tassert.strictEqual('1.1.0', actual.version);\n\t\tassert.strictEqual('1.1.0', actual.latestVersion);\n\t\tassert.strictEqual('localDescription1', actual.description);\n\t\tassert.ok(actual.iconUrl === 'file:///localPath1/localIcon1' || actual.iconUrl === 'vscode-file://vscode-app/localPath1/localIcon1');\n\t\tassert.ok(actual.iconUrlFallback === 'file:///localPath1/localIcon1' || actual.iconUrlFallback === 'vscode-file://vscode-app/localPath1/localIcon1');\n\t\tassert.strictEqual(undefined, actual.licenseUrl);\n\t\tassert.strictEqual(ExtensionState.Installed, actual.state);\n\t\tassert.strictEqual(undefined, actual.installCount);\n\t\tassert.strictEqual(undefined, actual.rating);\n\t\tassert.strictEqual(undefined, actual.ratingCount);\n\t\tassert.strictEqual(false, actual.outdated);\n\t\tassert.deepStrictEqual(['pub.1', 'pub.2'], actual.dependencies);\n\n\t\tactual = actuals[1];\n\t\tassert.strictEqual(ExtensionType.System, actual.type);\n\t\tassert.strictEqual('local2', actual.name);\n\t\tassert.strictEqual('localDisplayName2', actual.displayName);\n\t\tassert.strictEqual('localpublisher2.local2', actual.identifier.id);\n\t\tassert.strictEqual('localPublisher2', actual.publisher);\n\t\tassert.strictEqual('1.2.0', actual.version);\n\t\tassert.strictEqual('1.2.0', actual.latestVersion);\n\t\tassert.strictEqual('localDescription2', actual.description);\n\t\tassert.strictEqual(undefined, actual.licenseUrl);\n\t\tassert.strictEqual(ExtensionState.Installed, actual.state);\n\t\tassert.strictEqual(undefined, actual.installCount);\n\t\tassert.strictEqual(undefined, actual.rating);\n\t\tassert.strictEqual(undefined, actual.ratingCount);\n\t\tassert.strictEqual(false, actual.outdated);\n\t\tassert.deepStrictEqual([], actual.dependencies);\n\t});\n\n\ttest('test installed extensions get syncs with gallery', async () => {\n\t\tconst local1 = aLocalExtension('local1', {\n\t\t\tpublisher: 'localPublisher1',\n\t\t\tversion: '1.1.0',\n\t\t\tdisplayName: 'localDisplayName1',\n\t\t\tdescription: 'localDescription1',\n\t\t\ticon: 'localIcon1',\n\t\t\textensionDependencies: ['pub.1', 'pub.2'],\n\t\t}, {\n\t\t\ttype: ExtensionType.User,\n\t\t\treadmeUrl: 'localReadmeUrl1',\n\t\t\tchangelogUrl: 'localChangelogUrl1',\n\t\t\tlocation: URI.file('localPath1')\n\t\t});\n\t\tconst local2 = aLocalExtension('local2', {\n\t\t\tpublisher: 'localPublisher2',\n\t\t\tversion: '1.2.0',\n\t\t\tdisplayName: 'localDisplayName2',\n\t\t\tdescription: 'localDescription2',\n\t\t}, {\n\t\t\ttype: ExtensionType.System,\n\t\t\treadmeUrl: 'localReadmeUrl2',\n\t\t\tchangelogUrl: 'localChangelogUrl2',\n\t\t});\n\t\tconst gallery1 = aGalleryExtension(local1.manifest.name, {\n\t\t\tidentifier: local1.identifier,\n\t\t\tdisplayName: 'expectedDisplayName',\n\t\t\tversion: '1.5.0',\n\t\t\tpublisherId: 'expectedPublisherId',\n\t\t\tpublisher: local1.manifest.publisher,\n\t\t\tpublisherDisplayName: 'expectedPublisherDisplayName',\n\t\t\tdescription: 'expectedDescription',\n\t\t\tinstallCount: 1000,\n\t\t\trating: 4,\n\t\t\tratingCount: 100\n\t\t}, {\n\t\t\tdependencies: ['pub.1'],\n\t\t}, {\n\t\t\tmanifest: { uri: 'uri:manifest', fallbackUri: 'fallback:manifest' },\n\t\t\treadme: { uri: 'uri:readme', fallbackUri: 'fallback:readme' },\n\t\t\tchangelog: { uri: 'uri:changelog', fallbackUri: 'fallback:changlog' },\n\t\t\tdownload: { uri: 'uri:download', fallbackUri: 'fallback:download' },\n\t\t\ticon: { uri: 'uri:icon', fallbackUri: 'fallback:icon' },\n\t\t\tlicense: { uri: 'uri:license', fallbackUri: 'fallback:license' },\n\t\t\trepository: { uri: 'uri:repository', fallbackUri: 'fallback:repository' },\n\t\t\tsignature: { uri: 'uri:signature', fallbackUri: 'fallback:signature' },\n\t\t\tcoreTranslations: []\n\t\t});\n\t\tinstantiationService.stubPromise(IExtensionManagementService, 'getInstalled', [local1, local2]);\n\t\tinstantiationService.stubPromise(IExtensionGalleryService, 'query', aPage(gallery1));\n\t\tinstantiationService.stubPromise(IExtensionGalleryService, 'getCompatibleExtension', gallery1);\n\t\tinstantiationService.stubPromise(IExtensionGalleryService, 'getExtensions', [gallery1]);\n\t\ttestObject = await aWorkbenchService();\n\t\tawait testObject.queryLocal();\n\n\t\treturn Event.toPromise(testObject.onChange).then(() => {\n\t\t\tconst actuals = testObject.local;\n\t\t\tassert.strictEqual(2, actuals.length);\n\n\t\t\tlet actual = actuals[0];\n\t\t\tassert.strictEqual(ExtensionType.User, actual.type);\n\t\t\tassert.strictEqual('local1', actual.name);\n\t\t\tassert.strictEqual('expectedDisplayName', actual.displayName);\n\t\t\tassert.strictEqual('localpublisher1.local1', actual.identifier.id);\n\t\t\tassert.strictEqual('localPublisher1', actual.publisher);\n\t\t\tassert.strictEqual('1.1.0', actual.version);\n\t\t\tassert.strictEqual('1.5.0', actual.latestVersion);\n\t\t\tassert.strictEqual('expectedDescription', actual.description);\n\t\t\tassert.strictEqual('uri:icon', actual.iconUrl);\n\t\t\tassert.strictEqual('fallback:icon', actual.iconUrlFallback);\n\t\t\tassert.strictEqual(ExtensionState.Installed, actual.state);\n\t\t\tassert.strictEqual('uri:license', actual.licenseUrl);\n\t\t\tassert.strictEqual(1000, actual.installCount);\n\t\t\tassert.strictEqual(4, actual.rating);\n\t\t\tassert.strictEqual(100, actual.ratingCount);\n\t\t\tassert.strictEqual(true, actual.outdated);\n\t\t\tassert.deepStrictEqual(['pub.1'], actual.dependencies);\n\n\t\t\tactual = actuals[1];\n\t\t\tassert.strictEqual(ExtensionType.System, actual.type);\n\t\t\tassert.strictEqual('local2', actual.name);\n\t\t\tassert.strictEqual('localDisplayName2', actual.displayName);\n\t\t\tassert.strictEqual('localpublisher2.local2', actual.identifier.id);\n\t\t\tassert.strictEqual('localPublisher2', actual.publisher);\n\t\t\tassert.strictEqual('1.2.0', actual.version);\n\t\t\tassert.strictEqual('1.2.0', actual.latestVersion);\n\t\t\tassert.strictEqual('localDescription2', actual.description);\n\t\t\tassert.strictEqual(undefined, actual.licenseUrl);\n\t\t\tassert.strictEqual(ExtensionState.Installed, actual.state);\n\t\t\tassert.strictEqual(undefined, actual.installCount);\n\t\t\tassert.strictEqual(undefined, actual.rating);\n\t\t\tassert.strictEqual(undefined, actual.ratingCount);\n\t\t\tassert.strictEqual(false, actual.outdated);\n\t\t\tassert.deepStrictEqual([], actual.dependencies);\n\t\t});\n\t});\n\n\ttest('test extension state computation', async () => {\n\t\tconst gallery = aGalleryExtension('gallery1');\n\t\ttestObject = await aWorkbenchService();\n\t\tinstantiationService.stubPromise(IExtensionGalleryService, 'query', aPage(gallery));\n\n\t\treturn testObject.queryGallery(CancellationToken.None).then(page => {\n\t\t\tconst extension = page.firstPage[0];\n\t\t\tassert.strictEqual(ExtensionState.Uninstalled, extension.state);\n\n\t\t\tconst identifier = gallery.identifier;\n\n\t\t\t// Installing\n\t\t\tinstallEvent.fire({ identifier, source: gallery, profileLocation: null! });\n\t\t\tconst local = testObject.local;\n\t\t\tassert.strictEqual(1, local.length);\n\t\t\tconst actual = local[0];\n\t\t\tassert.strictEqual(`${gallery.publisher}.${gallery.name}`, actual.identifier.id);\n\t\t\tassert.strictEqual(ExtensionState.Installing, actual.state);\n\n\t\t\t// Installed\n\t\t\tdidInstallEvent.fire([{ identifier, source: gallery, operation: InstallOperation.Install, local: aLocalExtension(gallery.name, gallery, { identifier }), profileLocation: null! }]);\n\t\t\tassert.strictEqual(ExtensionState.Installed, actual.state);\n\t\t\tassert.strictEqual(1, testObject.local.length);\n\n\t\t\ttestObject.uninstall(actual);\n\n\t\t\t// Uninstalling\n\t\t\tuninstallEvent.fire({ identifier, profileLocation: null! });\n\t\t\tassert.strictEqual(ExtensionState.Uninstalling, actual.state);\n\n\t\t\t// Uninstalled\n\t\t\tdidUninstallEvent.fire({ identifier, profileLocation: null! });\n\t\t\tassert.strictEqual(ExtensionState.Uninstalled, actual.state);\n\n\t\t\tassert.strictEqual(0, testObject.local.length);\n\t\t});\n\t});\n\n\ttest('test extension doesnot show outdated for system extensions', async () => {\n\t\tconst local = aLocalExtension('a', { version: '1.0.1' }, { type: ExtensionType.System });\n\t\tinstantiationService.stubPromise(IExtensionManagementService, 'getInstalled', [local]);\n\t\tinstantiationService.stubPromise(IExtensionGalleryService, 'query', aPage(aGalleryExtension(local.manifest.name, { identifier: local.identifier, version: '1.0.2' })));\n\t\ttestObject = await aWorkbenchService();\n\t\tawait testObject.queryLocal();\n\n\t\tassert.ok(!testObject.local[0].outdated);\n\t});\n\n\ttest('test canInstall returns false for extensions with out gallery', async () => {\n\t\tconst local = aLocalExtension('a', { version: '1.0.1' }, { type: ExtensionType.System });\n\t\tinstantiationService.stubPromise(IExtensionManagementService, 'getInstalled', [local]);\n\t\ttestObject = await aWorkbenchService();\n\t\tconst target = testObject.local[0];\n\t\ttestObject.uninstall(target);\n\t\tuninstallEvent.fire({ identifier: local.identifier, profileLocation: null! });\n\t\tdidUninstallEvent.fire({ identifier: local.identifier, profileLocation: null! });\n\n\t\tassert.ok(!(await testObject.canInstall(target)));\n\t});\n\n\ttest('test canInstall returns false for a system extension', async () => {\n\t\tconst local = aLocalExtension('a', { version: '1.0.1' }, { type: ExtensionType.System });\n\t\tinstantiationService.stubPromise(IExtensionManagementService, 'getInstalled', [local]);\n\t\tinstantiationService.stubPromise(IExtensionGalleryService, 'query', aPage(aGalleryExtension(local.manifest.name, { identifier: local.identifier })));\n\t\ttestObject = await aWorkbenchService();\n\t\tconst target = testObject.local[0];\n\n\t\tassert.ok(!(await testObject.canInstall(target)));\n\t});\n\n\ttest('test canInstall returns true for extensions with gallery', async () => {\n\t\tconst local = aLocalExtension('a', { version: '1.0.1' }, { type: ExtensionType.User });\n\t\tinstantiationService.stubPromise(IExtensionManagementService, 'getInstalled', [local]);\n\t\tconst gallery = aGalleryExtension(local.manifest.name, { identifier: local.identifier });\n\t\tinstantiationService.stubPromise(IExtensionGalleryService, 'query', aPage(gallery));\n\t\tinstantiationService.stubPromise(IExtensionGalleryService, 'getCompatibleExtension', gallery);\n\t\tinstantiationService.stubPromise(IExtensionGalleryService, 'getExtensions', [gallery]);\n\t\ttestObject = await aWorkbenchService();\n\t\tconst target = testObject.local[0];\n\n\t\tawait Event.toPromise(Event.filter(testObject.onChange, e => !!e?.gallery));\n\t\tassert.ok(await testObject.canInstall(target));\n\t});\n\n\ttest('test onchange event is triggered while installing', async () => {\n\t\tconst gallery = aGalleryExtension('gallery1');\n\t\ttestObject = await aWorkbenchService();\n\t\tinstantiationService.stubPromise(IExtensionGalleryService, 'query', aPage(gallery));\n\n\t\tconst page = await testObject.queryGallery(CancellationToken.None);\n\t\tconst extension = page.firstPage[0];\n\t\tassert.strictEqual(ExtensionState.Uninstalled, extension.state);\n\n\t\tinstallEvent.fire({ identifier: gallery.identifier, source: gallery, profileLocation: null! });\n\t\tconst promise = Event.toPromise(testObject.onChange);\n\n\t\t// Installed\n\t\tdidInstallEvent.fire([{ identifier: gallery.identifier, source: gallery, operation: InstallOperation.Install, local: aLocalExtension(gallery.name, gallery, gallery), profileLocation: null! }]);\n\n\t\tawait promise;\n\t});\n\n\ttest('test onchange event is triggered when installation is finished', async () => {\n\t\tconst gallery = aGalleryExtension('gallery1');\n\t\ttestObject = await aWorkbenchService();\n\t\tinstantiationService.stubPromise(IExtensionGalleryService, 'query', aPage(gallery));\n\t\tconst target = sinon.spy();\n\n\t\treturn testObject.queryGallery(CancellationToken.None).then(page => {\n\t\t\tconst extension = page.firstPage[0];\n\t\t\tassert.strictEqual(ExtensionState.Uninstalled, extension.state);\n\n\t\t\tdisposableStore.add(testObject.onChange(target));\n\n\t\t\t// Installing\n\t\t\tinstallEvent.fire({ identifier: gallery.identifier, source: gallery, profileLocation: null! });\n\n\t\t\tassert.ok(target.calledOnce);\n\t\t});\n\t});\n\n\ttest('test onchange event is triggered while uninstalling', async () => {\n\t\tconst local = aLocalExtension('a', {}, { type: ExtensionType.System });\n\t\tinstantiationService.stubPromise(IExtensionManagementService, 'getInstalled', [local]);\n\t\ttestObject = await aWorkbenchService();\n\t\tconst target = sinon.spy();\n\n\t\ttestObject.uninstall(testObject.local[0]);\n\t\tdisposableStore.add(testObject.onChange(target));\n\t\tuninstallEvent.fire({ identifier: local.identifier, profileLocation: null! });\n\n\t\tassert.ok(target.calledOnce);\n\t});\n\n\ttest('test onchange event is triggered when uninstalling is finished', async () => {\n\t\tconst local = aLocalExtension('a', {}, { type: ExtensionType.System });\n\t\tinstantiationService.stubPromise(IExtensionManagementService, 'getInstalled', [local]);\n\t\ttestObject = await aWorkbenchService();\n\t\tconst target = sinon.spy();\n\n\t\ttestObject.uninstall(testObject.local[0]);\n\t\tuninstallEvent.fire({ identifier: local.identifier, profileLocation: null! });\n\t\tdisposableStore.add(testObject.onChange(target));\n\t\tdidUninstallEvent.fire({ identifier: local.identifier, profileLocation: null! });\n\n\t\tassert.ok(target.calledOnce);\n\t});\n\n\ttest('test uninstalled extensions are always enabled', async () => {\n\t\treturn instantiationService.get(IWorkbenchExtensionEnablementService).setEnablement([aLocalExtension('b')], EnablementState.DisabledGlobally)\n\t\t\t.then(() => instantiationService.get(IWorkbenchExtensionEnablementService).setEnablement([aLocalExtension('c')], EnablementState.DisabledWorkspace))\n\t\t\t.then(async () => {\n\t\t\t\ttestObject = await aWorkbenchService();\n\t\t\t\tinstantiationService.stubPromise(IExtensionGalleryService, 'query', aPage(aGalleryExtension('a')));\n\t\t\t\treturn testObject.queryGallery(CancellationToken.None).then(pagedResponse => {\n\t\t\t\t\tconst actual = pagedResponse.firstPage[0];\n\t\t\t\t\tassert.strictEqual(actual.enablementState, EnablementState.EnabledGlobally);\n\t\t\t\t});\n\t\t\t});\n\t});\n\n\ttest('test enablement state installed enabled extension', async () => {\n\t\treturn instantiationService.get(IWorkbenchExtensionEnablementService).setEnablement([aLocalExtension('b')], EnablementState.DisabledGlobally)\n\t\t\t.then(() => instantiationService.get(IWorkbenchExtensionEnablementService).setEnablement([aLocalExtension('c')], EnablementState.DisabledWorkspace))\n\t\t\t.then(async () => {\n\t\t\t\tinstantiationService.stubPromise(IExtensionManagementService, 'getInstalled', [aLocalExtension('a')]);\n\t\t\t\ttestObject = await aWorkbenchService();\n\n\t\t\t\tconst actual = testObject.local[0];\n\n\t\t\t\tassert.strictEqual(actual.enablementState, EnablementState.EnabledGlobally);\n\t\t\t});\n\t});\n\n\ttest('test workspace disabled extension', async () => {\n\t\tconst extensionA = aLocalExtension('a');\n\t\treturn instantiationService.get(IWorkbenchExtensionEnablementService).setEnablement([aLocalExtension('b')], EnablementState.DisabledGlobally)\n\t\t\t.then(() => instantiationService.get(IWorkbenchExtensionEnablementService).setEnablement([aLocalExtension('d')], EnablementState.DisabledGlobally))\n\t\t\t.then(() => instantiationService.get(IWorkbenchExtensionEnablementService).setEnablement([extensionA], EnablementState.DisabledWorkspace))\n\t\t\t.then(() => instantiationService.get(IWorkbenchExtensionEnablementService).setEnablement([aLocalExtension('e')], EnablementState.DisabledWorkspace))\n\t\t\t.then(async () => {\n\t\t\t\tinstantiationService.stubPromise(IExtensionManagementService, 'getInstalled', [extensionA]);\n\t\t\t\ttestObject = await aWorkbenchService();\n\n\t\t\t\tconst actual = testObject.local[0];\n\n\t\t\t\tassert.strictEqual(actual.enablementState, EnablementState.DisabledWorkspace);\n\t\t\t});\n\t});\n\n\ttest('test globally disabled extension', async () => {\n\t\tconst localExtension = aLocalExtension('a');\n\t\treturn instantiationService.get(IWorkbenchExtensionEnablementService).setEnablement([localExtension], EnablementState.DisabledGlobally)\n\t\t\t.then(() => instantiationService.get(IWorkbenchExtensionEnablementService).setEnablement([aLocalExtension('d')], EnablementState.DisabledGlobally))\n\t\t\t.then(() => instantiationService.get(IWorkbenchExtensionEnablementService).setEnablement([aLocalExtension('c')], EnablementState.DisabledWorkspace))\n\t\t\t.then(async () => {\n\t\t\t\tinstantiationService.stubPromise(IExtensionManagementService, 'getInstalled', [localExtension]);\n\t\t\t\ttestObject = await aWorkbenchService();\n\n\t\t\t\tconst actual = testObject.local[0];\n\n\t\t\t\tassert.strictEqual(actual.enablementState, EnablementState.DisabledGlobally);\n\t\t\t});\n\t});\n\n\ttest('test enablement state is updated for user extensions', async () => {\n\t\treturn instantiationService.get(IWorkbenchExtensionEnablementService).setEnablement([aLocalExtension('c')], EnablementState.DisabledGlobally)\n\t\t\t.then(() => instantiationService.get(IWorkbenchExtensionEnablementService).setEnablement([aLocalExtension('b')], EnablementState.DisabledWorkspace))\n\t\t\t.then(async () => {\n\t\t\t\tinstantiationService.stubPromise(IExtensionManagementService, 'getInstalled', [aLocalExtension('a')]);\n\t\t\t\ttestObject = await aWorkbenchService();\n\t\t\t\treturn testObject.setEnablement(testObject.local[0], EnablementState.DisabledWorkspace)\n\t\t\t\t\t.then(() => {\n\t\t\t\t\t\tconst actual = testObject.local[0];\n\t\t\t\t\t\tassert.strictEqual(actual.enablementState, EnablementState.DisabledWorkspace);\n\t\t\t\t\t});\n\t\t\t});\n\t});\n\n\ttest('test enable extension globally when extension is disabled for workspace', async () => {\n\t\tconst localExtension = aLocalExtension('a');\n\t\treturn instantiationService.get(IWorkbenchExtensionEnablementService).setEnablement([localExtension], EnablementState.DisabledWorkspace)\n\t\t\t.then(async () => {\n\t\t\t\tinstantiationService.stubPromise(IExtensionManagementService, 'getInstalled', [localExtension]);\n\t\t\t\ttestObject = await aWorkbenchService();\n\t\t\t\treturn testObject.setEnablement(testObject.local[0], EnablementState.EnabledGlobally)\n\t\t\t\t\t.then(() => {\n\t\t\t\t\t\tconst actual = testObject.local[0];\n\t\t\t\t\t\tassert.strictEqual(actual.enablementState, EnablementState.EnabledGlobally);\n\t\t\t\t\t});\n\t\t\t});\n\t});\n\n\ttest('test disable extension globally', async () => {\n\t\tinstantiationService.stubPromise(IExtensionManagementService, 'getInstalled', [aLocalExtension('a')]);\n\t\ttestObject = await aWorkbenchService();\n\n\t\treturn testObject.setEnablement(testObject.local[0], EnablementState.DisabledGlobally)\n\t\t\t.then(() => {\n\t\t\t\tconst actual = testObject.local[0];\n\t\t\t\tassert.strictEqual(actual.enablementState, EnablementState.DisabledGlobally);\n\t\t\t});\n\t});\n\n\ttest('test system extensions can be disabled', async () => {\n\t\tinstantiationService.stubPromise(IExtensionManagementService, 'getInstalled', [aLocalExtension('a', {}, { type: ExtensionType.System })]);\n\t\ttestObject = await aWorkbenchService();\n\n\t\treturn testObject.setEnablement(testObject.local[0], EnablementState.DisabledGlobally)\n\t\t\t.then(() => {\n\t\t\t\tconst actual = testObject.local[0];\n\t\t\t\tassert.strictEqual(actual.enablementState, EnablementState.DisabledGlobally);\n\t\t\t});\n\t});\n\n\ttest('test enablement state is updated on change from outside', async () => {\n\t\tconst localExtension = aLocalExtension('a');\n\t\treturn instantiationService.get(IWorkbenchExtensionEnablementService).setEnablement([aLocalExtension('c')], EnablementState.DisabledGlobally)\n\t\t\t.then(() => instantiationService.get(IWorkbenchExtensionEnablementService).setEnablement([aLocalExtension('b')], EnablementState.DisabledWorkspace))\n\t\t\t.then(async () => {\n\t\t\t\tinstantiationService.stubPromise(IExtensionManagementService, 'getInstalled', [localExtension]);\n\t\t\t\ttestObject = await aWorkbenchService();\n\n\t\t\t\treturn instantiationService.get(IWorkbenchExtensionEnablementService).setEnablement([localExtension], EnablementState.DisabledGlobally)\n\t\t\t\t\t.then(() => {\n\t\t\t\t\t\tconst actual = testObject.local[0];\n\t\t\t\t\t\tassert.strictEqual(actual.enablementState, EnablementState.DisabledGlobally);\n\t\t\t\t\t});\n\t\t\t});\n\t});\n\n\ttest('test disable extension with dependencies disable only itself', async () => {\n\t\tconst extensionA = aLocalExtension('a', { extensionDependencies: ['pub.b'] });\n\t\tconst extensionB = aLocalExtension('b');\n\t\tconst extensionC = aLocalExtension('c');\n\n\t\treturn instantiationService.get(IWorkbenchExtensionEnablementService).setEnablement([extensionA], EnablementState.EnabledGlobally)\n\t\t\t.then(() => instantiationService.get(IWorkbenchExtensionEnablementService).setEnablement([extensionB], EnablementState.EnabledGlobally))\n\t\t\t.then(() => instantiationService.get(IWorkbenchExtensionEnablementService).setEnablement([extensionC], EnablementState.EnabledGlobally))\n\t\t\t.then(async () => {\n\t\t\t\tinstantiationService.stubPromise(IExtensionManagementService, 'getInstalled', [extensionA, extensionB, extensionC]);\n\t\t\t\ttestObject = await aWorkbenchService();\n\n\t\t\t\treturn testObject.setEnablement(testObject.local[0], EnablementState.DisabledGlobally)\n\t\t\t\t\t.then(() => {\n\t\t\t\t\t\tassert.strictEqual(testObject.local[0].enablementState, EnablementState.DisabledGlobally);\n\t\t\t\t\t\tassert.strictEqual(testObject.local[1].enablementState, EnablementState.EnabledGlobally);\n\t\t\t\t\t});\n\t\t\t});\n\t});\n\n\ttest('test disable extension pack disables the pack', async () => {\n\t\tconst extensionA = aLocalExtension('a', { extensionPack: ['pub.b'] });\n\t\tconst extensionB = aLocalExtension('b');\n\t\tconst extensionC = aLocalExtension('c');\n\n\t\treturn instantiationService.get(IWorkbenchExtensionEnablementService).setEnablement([extensionA], EnablementState.EnabledGlobally)\n\t\t\t.then(() => instantiationService.get(IWorkbenchExtensionEnablementService).setEnablement([extensionB], EnablementState.EnabledGlobally))\n\t\t\t.then(() => instantiationService.get(IWorkbenchExtensionEnablementService).setEnablement([extensionC], EnablementState.EnabledGlobally))\n\t\t\t.then(async () => {\n\t\t\t\tinstantiationService.stubPromise(IExtensionManagementService, 'getInstalled', [extensionA, extensionB, extensionC]);\n\t\t\t\ttestObject = await aWorkbenchService();\n\n\t\t\t\treturn testObject.setEnablement(testObject.local[0], EnablementState.DisabledGlobally)\n\t\t\t\t\t.then(() => {\n\t\t\t\t\t\tassert.strictEqual(testObject.local[0].enablementState, EnablementState.DisabledGlobally);\n\t\t\t\t\t\tassert.strictEqual(testObject.local[1].enablementState, EnablementState.DisabledGlobally);\n\t\t\t\t\t});\n\t\t\t});\n\t});\n\n\ttest('test disable extension pack disable all', async () => {\n\t\tconst extensionA = aLocalExtension('a', { extensionPack: ['pub.b'] });\n\t\tconst extensionB = aLocalExtension('b');\n\t\tconst extensionC = aLocalExtension('c');\n\n\t\treturn instantiationService.get(IWorkbenchExtensionEnablementService).setEnablement([extensionA], EnablementState.EnabledGlobally)\n\t\t\t.then(() => instantiationService.get(IWorkbenchExtensionEnablementService).setEnablement([extensionB], EnablementState.EnabledGlobally))\n\t\t\t.then(() => instantiationService.get(IWorkbenchExtensionEnablementService).setEnablement([extensionC], EnablementState.EnabledGlobally))\n\t\t\t.then(async () => {\n\t\t\t\tinstantiationService.stubPromise(IExtensionManagementService, 'getInstalled', [extensionA, extensionB, extensionC]);\n\t\t\t\ttestObject = await aWorkbenchService();\n\n\t\t\t\treturn testObject.setEnablement(testObject.local[0], EnablementState.DisabledGlobally)\n\t\t\t\t\t.then(() => {\n\t\t\t\t\t\tassert.strictEqual(testObject.local[0].enablementState, EnablementState.DisabledGlobally);\n\t\t\t\t\t\tassert.strictEqual(testObject.local[1].enablementState, EnablementState.DisabledGlobally);\n\t\t\t\t\t});\n\t\t\t});\n\t});\n\n\ttest('test disable extension fails if extension is a dependent of other', async () => {\n\t\tconst extensionA = aLocalExtension('a', { extensionDependencies: ['pub.b'] });\n\t\tconst extensionB = aLocalExtension('b');\n\t\tconst extensionC = aLocalExtension('c');\n\n\t\tinstantiationService.stub(INotificationService, {\n\t\t\tprompt(severity, message, choices, options) {\n\t\t\t\toptions!.onCancel!();\n\t\t\t\treturn null!;\n\t\t\t}\n\t\t});\n\t\treturn instantiationService.get(IWorkbenchExtensionEnablementService).setEnablement([extensionA], EnablementState.EnabledGlobally)\n\t\t\t.then(() => instantiationService.get(IWorkbenchExtensionEnablementService).setEnablement([extensionB], EnablementState.EnabledGlobally))\n\t\t\t.then(() => instantiationService.get(IWorkbenchExtensionEnablementService).setEnablement([extensionC], EnablementState.EnabledGlobally))\n\t\t\t.then(async () => {\n\t\t\t\tinstantiationService.stubPromise(IExtensionManagementService, 'getInstalled', [extensionA, extensionB, extensionC]);\n\t\t\t\ttestObject = await aWorkbenchService();\n\t\t\t\treturn testObject.setEnablement(testObject.local[1], EnablementState.DisabledGlobally).then(() => assert.fail('Should fail'), error => assert.ok(true));\n\t\t\t});\n\t});\n\n\ttest('test disable extension disables all dependents when chosen to disable all', async () => {\n\t\tconst extensionA = aLocalExtension('a', { extensionDependencies: ['pub.b'] });\n\t\tconst extensionB = aLocalExtension('b');\n\t\tconst extensionC = aLocalExtension('c');\n\n\t\tinstantiationService.stub(IDialogService, {\n\t\t\tprompt() {\n\t\t\t\treturn Promise.resolve({ result: true });\n\t\t\t}\n\t\t});\n\t\treturn instantiationService.get(IWorkbenchExtensionEnablementService).setEnablement([extensionA], EnablementState.EnabledGlobally)\n\t\t\t.then(() => instantiationService.get(IWorkbenchExtensionEnablementService).setEnablement([extensionB], EnablementState.EnabledGlobally))\n\t\t\t.then(() => instantiationService.get(IWorkbenchExtensionEnablementService).setEnablement([extensionC], EnablementState.EnabledGlobally))\n\t\t\t.then(async () => {\n\t\t\t\tinstantiationService.stubPromise(IExtensionManagementService, 'getInstalled', [extensionA, extensionB, extensionC]);\n\t\t\t\ttestObject = await aWorkbenchService();\n\t\t\t\tawait testObject.setEnablement(testObject.local[1], EnablementState.DisabledGlobally);\n\t\t\t\tassert.strictEqual(testObject.local[0].enablementState, EnablementState.DisabledGlobally);\n\t\t\t\tassert.strictEqual(testObject.local[1].enablementState, EnablementState.DisabledGlobally);\n\t\t\t});\n\t});\n\n\ttest('test disable extension when extension is part of a pack', async () => {\n\t\tconst extensionA = aLocalExtension('a', { extensionPack: ['pub.b'] });\n\t\tconst extensionB = aLocalExtension('b');\n\t\tconst extensionC = aLocalExtension('c');\n\n\t\treturn instantiationService.get(IWorkbenchExtensionEnablementService).setEnablement([extensionA], EnablementState.EnabledGlobally)\n\t\t\t.then(() => instantiationService.get(IWorkbenchExtensionEnablementService).setEnablement([extensionB], EnablementState.EnabledGlobally))\n\t\t\t.then(() => instantiationService.get(IWorkbenchExtensionEnablementService).setEnablement([extensionC], EnablementState.EnabledGlobally))\n\t\t\t.then(async () => {\n\t\t\t\tinstantiationService.stubPromise(IExtensionManagementService, 'getInstalled', [extensionA, extensionB, extensionC]);\n\t\t\t\ttestObject = await aWorkbenchService();\n\t\t\t\treturn testObject.setEnablement(testObject.local[1], EnablementState.DisabledGlobally)\n\t\t\t\t\t.then(() => {\n\t\t\t\t\t\tassert.strictEqual(testObject.local[1].enablementState, EnablementState.DisabledGlobally);\n\t\t\t\t\t});\n\t\t\t});\n\t});\n\n\ttest('test disable both dependency and dependent do not promot and do not fail', async () => {\n\t\tconst extensionA = aLocalExtension('a', { extensionDependencies: ['pub.b'] });\n\t\tconst extensionB = aLocalExtension('b');\n\t\tconst extensionC = aLocalExtension('c');\n\n\t\treturn instantiationService.get(IWorkbenchExtensionEnablementService).setEnablement([extensionA], EnablementState.EnabledGlobally)\n\t\t\t.then(() => instantiationService.get(IWorkbenchExtensionEnablementService).setEnablement([extensionB], EnablementState.EnabledGlobally))\n\t\t\t.then(() => instantiationService.get(IWorkbenchExtensionEnablementService).setEnablement([extensionC], EnablementState.EnabledGlobally))\n\t\t\t.then(async () => {\n\t\t\t\tinstantiationService.stubPromise(IExtensionManagementService, 'getInstalled', [extensionA, extensionB, extensionC]);\n\t\t\t\tconst target = sinon.spy();\n\t\t\t\ttestObject = await aWorkbenchService();\n\n\t\t\t\treturn testObject.setEnablement([testObject.local[1], testObject.local[0]], EnablementState.DisabledGlobally)\n\t\t\t\t\t.then(() => {\n\t\t\t\t\t\tassert.ok(!target.called);\n\t\t\t\t\t\tassert.strictEqual(testObject.local[0].enablementState, EnablementState.DisabledGlobally);\n\t\t\t\t\t\tassert.strictEqual(testObject.local[1].enablementState, EnablementState.DisabledGlobally);\n\t\t\t\t\t});\n\t\t\t});\n\t});\n\n\ttest('test enable both dependency and dependent do not promot and do not fail', async () => {\n\t\tconst extensionA = aLocalExtension('a', { extensionDependencies: ['pub.b'] });\n\t\tconst extensionB = aLocalExtension('b');\n\t\tconst extensionC = aLocalExtension('c');\n\n\t\treturn instantiationService.get(IWorkbenchExtensionEnablementService).setEnablement([extensionA], EnablementState.DisabledGlobally)\n\t\t\t.then(() => instantiationService.get(IWorkbenchExtensionEnablementService).setEnablement([extensionB], EnablementState.DisabledGlobally))\n\t\t\t.then(() => instantiationService.get(IWorkbenchExtensionEnablementService).setEnablement([extensionC], EnablementState.DisabledGlobally))\n\t\t\t.then(async () => {\n\t\t\t\tinstantiationService.stubPromise(IExtensionManagementService, 'getInstalled', [extensionA, extensionB, extensionC]);\n\t\t\t\tconst target = sinon.spy();\n\t\t\t\ttestObject = await aWorkbenchService();\n\n\t\t\t\treturn testObject.setEnablement([testObject.local[1], testObject.local[0]], EnablementState.EnabledGlobally)\n\t\t\t\t\t.then(() => {\n\t\t\t\t\t\tassert.ok(!target.called);\n\t\t\t\t\t\tassert.strictEqual(testObject.local[0].enablementState, EnablementState.EnabledGlobally);\n\t\t\t\t\t\tassert.strictEqual(testObject.local[1].enablementState, EnablementState.EnabledGlobally);\n\t\t\t\t\t});\n\t\t\t});\n\t});\n\n\ttest('test disable extension does not fail if its dependency is a dependent of other but chosen to disable only itself', async () => {\n\t\tconst extensionA = aLocalExtension('a', { extensionDependencies: ['pub.b'] });\n\t\tconst extensionB = aLocalExtension('b');\n\t\tconst extensionC = aLocalExtension('c', { extensionDependencies: ['pub.b'] });\n\n\t\treturn instantiationService.get(IWorkbenchExtensionEnablementService).setEnablement([extensionA], EnablementState.EnabledGlobally)\n\t\t\t.then(() => instantiationService.get(IWorkbenchExtensionEnablementService).setEnablement([extensionB], EnablementState.EnabledGlobally))\n\t\t\t.then(() => instantiationService.get(IWorkbenchExtensionEnablementService).setEnablement([extensionC], EnablementState.EnabledGlobally))\n\t\t\t.then(async () => {\n\t\t\t\tinstantiationService.stubPromise(IExtensionManagementService, 'getInstalled', [extensionA, extensionB, extensionC]);\n\t\t\t\ttestObject = await aWorkbenchService();\n\n\t\t\t\treturn testObject.setEnablement(testObject.local[0], EnablementState.DisabledGlobally)\n\t\t\t\t\t.then(() => {\n\t\t\t\t\t\tassert.strictEqual(testObject.local[0].enablementState, EnablementState.DisabledGlobally);\n\t\t\t\t\t});\n\t\t\t});\n\t});\n\n\ttest('test disable extension if its dependency is a dependent of other disabled extension', async () => {\n\t\tconst extensionA = aLocalExtension('a', { extensionDependencies: ['pub.b'] });\n\t\tconst extensionB = aLocalExtension('b');\n\t\tconst extensionC = aLocalExtension('c', { extensionDependencies: ['pub.b'] });\n\n\t\treturn instantiationService.get(IWorkbenchExtensionEnablementService).setEnablement([extensionA], EnablementState.EnabledGlobally)\n\t\t\t.then(() => instantiationService.get(IWorkbenchExtensionEnablementService).setEnablement([extensionB], EnablementState.EnabledGlobally))\n\t\t\t.then(() => instantiationService.get(IWorkbenchExtensionEnablementService).setEnablement([extensionC], EnablementState.DisabledGlobally))\n\t\t\t.then(async () => {\n\t\t\t\tinstantiationService.stubPromise(IExtensionManagementService, 'getInstalled', [extensionA, extensionB, extensionC]);\n\t\t\t\ttestObject = await aWorkbenchService();\n\n\t\t\t\treturn testObject.setEnablement(testObject.local[0], EnablementState.DisabledGlobally)\n\t\t\t\t\t.then(() => {\n\t\t\t\t\t\tassert.strictEqual(testObject.local[0].enablementState, EnablementState.DisabledGlobally);\n\t\t\t\t\t});\n\t\t\t});\n\t});\n\n\ttest('test disable extension if its dependencys dependency is itself', async () => {\n\t\tconst extensionA = aLocalExtension('a', { extensionDependencies: ['pub.b'] });\n\t\tconst extensionB = aLocalExtension('b', { extensionDependencies: ['pub.a'] });\n\t\tconst extensionC = aLocalExtension('c');\n\n\t\tinstantiationService.stub(INotificationService, {\n\t\t\tprompt(severity, message, choices, options) {\n\t\t\t\toptions!.onCancel!();\n\t\t\t\treturn null!;\n\t\t\t}\n\t\t});\n\t\treturn instantiationService.get(IWorkbenchExtensionEnablementService).setEnablement([extensionA], EnablementState.EnabledGlobally)\n\t\t\t.then(() => instantiationService.get(IWorkbenchExtensionEnablementService).setEnablement([extensionB], EnablementState.EnabledGlobally))\n\t\t\t.then(() => instantiationService.get(IWorkbenchExtensionEnablementService).setEnablement([extensionC], EnablementState.EnabledGlobally))\n\t\t\t.then(async () => {\n\t\t\t\tinstantiationService.stubPromise(IExtensionManagementService, 'getInstalled', [extensionA, extensionB, extensionC]);\n\t\t\t\ttestObject = await aWorkbenchService();\n\n\t\t\t\treturn testObject.setEnablement(testObject.local[0], EnablementState.DisabledGlobally)\n\t\t\t\t\t.then(() => assert.fail('An extension with dependent should not be disabled'), () => null);\n\t\t\t});\n\t});\n\n\ttest('test disable extension if its dependency is dependent and is disabled', async () => {\n\t\tconst extensionA = aLocalExtension('a', { extensionDependencies: ['pub.b'] });\n\t\tconst extensionB = aLocalExtension('b');\n\t\tconst extensionC = aLocalExtension('c', { extensionDependencies: ['pub.b'] });\n\n\t\treturn instantiationService.get(IWorkbenchExtensionEnablementService).setEnablement([extensionA], EnablementState.EnabledGlobally)\n\t\t\t.then(() => instantiationService.get(IWorkbenchExtensionEnablementService).setEnablement([extensionB], EnablementState.DisabledGlobally))\n\t\t\t.then(() => instantiationService.get(IWorkbenchExtensionEnablementService).setEnablement([extensionC], EnablementState.EnabledGlobally))\n\t\t\t.then(async () => {\n\t\t\t\tinstantiationService.stubPromise(IExtensionManagementService, 'getInstalled', [extensionA, extensionB, extensionC]);\n\n\t\t\t\ttestObject = await aWorkbenchService();\n\n\t\t\t\treturn testObject.setEnablement(testObject.local[0], EnablementState.DisabledGlobally)\n\t\t\t\t\t.then(() => assert.strictEqual(testObject.local[0].enablementState, EnablementState.DisabledGlobally));\n\t\t\t});\n\t});\n\n\ttest('test disable extension with cyclic dependencies', async () => {\n\t\tconst extensionA = aLocalExtension('a', { extensionDependencies: ['pub.b'] });\n\t\tconst extensionB = aLocalExtension('b', { extensionDependencies: ['pub.c'] });\n\t\tconst extensionC = aLocalExtension('c', { extensionDependencies: ['pub.a'] });\n\n\t\tinstantiationService.stub(INotificationService, {\n\t\t\tprompt(severity, message, choices, options) {\n\t\t\t\toptions!.onCancel!();\n\t\t\t\treturn null!;\n\t\t\t}\n\t\t});\n\t\treturn instantiationService.get(IWorkbenchExtensionEnablementService).setEnablement([extensionA], EnablementState.EnabledGlobally)\n\t\t\t.then(() => instantiationService.get(IWorkbenchExtensionEnablementService).setEnablement([extensionB], EnablementState.EnabledGlobally))\n\t\t\t.then(() => instantiationService.get(IWorkbenchExtensionEnablementService).setEnablement([extensionC], EnablementState.EnabledGlobally))\n\t\t\t.then(async () => {\n\t\t\t\tinstantiationService.stubPromise(IExtensionManagementService, 'getInstalled', [extensionA, extensionB, extensionC]);\n\t\t\t\ttestObject = await aWorkbenchService();\n\t\t\t\treturn testObject.setEnablement(testObject.local[0], EnablementState.DisabledGlobally)\n\t\t\t\t\t.then(() => assert.fail('An extension with dependent should not be disabled'), () => null);\n\t\t\t});\n\t});\n\n\ttest('test enable extension with dependencies enable all', async () => {\n\t\tconst extensionA = aLocalExtension('a', { extensionDependencies: ['pub.b'] });\n\t\tconst extensionB = aLocalExtension('b');\n\t\tconst extensionC = aLocalExtension('c');\n\n\t\treturn instantiationService.get(IWorkbenchExtensionEnablementService).setEnablement([extensionA], EnablementState.DisabledGlobally)\n\t\t\t.then(() => instantiationService.get(IWorkbenchExtensionEnablementService).setEnablement([extensionB], EnablementState.DisabledGlobally))\n\t\t\t.then(() => instantiationService.get(IWorkbenchExtensionEnablementService).setEnablement([extensionC], EnablementState.DisabledGlobally))\n\t\t\t.then(async () => {\n\t\t\t\tinstantiationService.stubPromise(IExtensionManagementService, 'getInstalled', [extensionA, extensionB, extensionC]);\n\t\t\t\ttestObject = await aWorkbenchService();\n\n\t\t\t\treturn testObject.setEnablement(testObject.local[0], EnablementState.EnabledGlobally)\n\t\t\t\t\t.then(() => {\n\t\t\t\t\t\tassert.strictEqual(testObject.local[0].enablementState, EnablementState.EnabledGlobally);\n\t\t\t\t\t\tassert.strictEqual(testObject.local[1].enablementState, EnablementState.EnabledGlobally);\n\t\t\t\t\t});\n\t\t\t});\n\t});\n\n\ttest('test enable extension with dependencies does not prompt if dependency is enabled already', async () => {\n\t\tconst extensionA = aLocalExtension('a', { extensionDependencies: ['pub.b'] });\n\t\tconst extensionB = aLocalExtension('b');\n\t\tconst extensionC = aLocalExtension('c');\n\n\t\treturn instantiationService.get(IWorkbenchExtensionEnablementService).setEnablement([extensionA], EnablementState.DisabledGlobally)\n\t\t\t.then(() => instantiationService.get(IWorkbenchExtensionEnablementService).setEnablement([extensionB], EnablementState.EnabledGlobally))\n\t\t\t.then(() => instantiationService.get(IWorkbenchExtensionEnablementService).setEnablement([extensionC], EnablementState.DisabledGlobally))\n\t\t\t.then(async () => {\n\t\t\t\tinstantiationService.stubPromise(IExtensionManagementService, 'getInstalled', [extensionA, extensionB, extensionC]);\n\t\t\t\tconst target = sinon.spy();\n\t\t\t\ttestObject = await aWorkbenchService();\n\n\t\t\t\treturn testObject.setEnablement(testObject.local[0], EnablementState.EnabledGlobally)\n\t\t\t\t\t.then(() => {\n\t\t\t\t\t\tassert.ok(!target.called);\n\t\t\t\t\t\tassert.strictEqual(testObject.local[0].enablementState, EnablementState.EnabledGlobally);\n\t\t\t\t\t});\n\t\t\t});\n\t});\n\n\ttest('test enable extension with dependency does not prompt if both are enabled', async () => {\n\t\tconst extensionA = aLocalExtension('a', { extensionDependencies: ['pub.b'] });\n\t\tconst extensionB = aLocalExtension('b');\n\t\tconst extensionC = aLocalExtension('c');\n\n\t\treturn instantiationService.get(IWorkbenchExtensionEnablementService).setEnablement([extensionA], EnablementState.DisabledGlobally)\n\t\t\t.then(() => instantiationService.get(IWorkbenchExtensionEnablementService).setEnablement([extensionB], EnablementState.DisabledGlobally))\n\t\t\t.then(() => instantiationService.get(IWorkbenchExtensionEnablementService).setEnablement([extensionC], EnablementState.DisabledGlobally))\n\t\t\t.then(async () => {\n\t\t\t\tinstantiationService.stubPromise(IExtensionManagementService, 'getInstalled', [extensionA, extensionB, extensionC]);\n\t\t\t\tconst target = sinon.spy();\n\t\t\t\ttestObject = await aWorkbenchService();\n\n\t\t\t\treturn testObject.setEnablement([testObject.local[1], testObject.local[0]], EnablementState.EnabledGlobally)\n\t\t\t\t\t.then(() => {\n\t\t\t\t\t\tassert.ok(!target.called);\n\t\t\t\t\t\tassert.strictEqual(testObject.local[0].enablementState, EnablementState.EnabledGlobally);\n\t\t\t\t\t\tassert.strictEqual(testObject.local[1].enablementState, EnablementState.EnabledGlobally);\n\t\t\t\t\t});\n\t\t\t});\n\t});\n\n\ttest('test enable extension with cyclic dependencies', async () => {\n\t\tconst extensionA = aLocalExtension('a', { extensionDependencies: ['pub.b'] });\n\t\tconst extensionB = aLocalExtension('b', { extensionDependencies: ['pub.c'] });\n\t\tconst extensionC = aLocalExtension('c', { extensionDependencies: ['pub.a'] });\n\n\t\treturn instantiationService.get(IWorkbenchExtensionEnablementService).setEnablement([extensionA], EnablementState.DisabledGlobally)\n\t\t\t.then(() => instantiationService.get(IWorkbenchExtensionEnablementService).setEnablement([extensionB], EnablementState.DisabledGlobally))\n\t\t\t.then(() => instantiationService.get(IWorkbenchExtensionEnablementService).setEnablement([extensionC], EnablementState.DisabledGlobally))\n\t\t\t.then(async () => {\n\t\t\t\tinstantiationService.stubPromise(IExtensionManagementService, 'getInstalled', [extensionA, extensionB, extensionC]);\n\n\t\t\t\ttestObject = await aWorkbenchService();\n\n\t\t\t\treturn testObject.setEnablement(testObject.local[0], EnablementState.EnabledGlobally)\n\t\t\t\t\t.then(() => {\n\t\t\t\t\t\tassert.strictEqual(testObject.local[0].enablementState, EnablementState.EnabledGlobally);\n\t\t\t\t\t\tassert.strictEqual(testObject.local[1].enablementState, EnablementState.EnabledGlobally);\n\t\t\t\t\t\tassert.strictEqual(testObject.local[2].enablementState, EnablementState.EnabledGlobally);\n\t\t\t\t\t});\n\t\t\t});\n\t});\n\n\ttest('test change event is fired when disablement flags are changed', async () => {\n\t\treturn instantiationService.get(IWorkbenchExtensionEnablementService).setEnablement([aLocalExtension('c')], EnablementState.DisabledGlobally)\n\t\t\t.then(() => instantiationService.get(IWorkbenchExtensionEnablementService).setEnablement([aLocalExtension('b')], EnablementState.DisabledWorkspace))\n\t\t\t.then(async () => {\n\t\t\t\tinstantiationService.stubPromise(IExtensionManagementService, 'getInstalled', [aLocalExtension('a')]);\n\t\t\t\ttestObject = await aWorkbenchService();\n\t\t\t\tconst target = sinon.spy();\n\t\t\t\tdisposableStore.add(testObject.onChange(target));\n\n\t\t\t\treturn testObject.setEnablement(testObject.local[0], EnablementState.DisabledGlobally)\n\t\t\t\t\t.then(() => assert.ok(target.calledOnce));\n\t\t\t});\n\t});\n\n\ttest('test change event is fired when disablement flags are changed from outside', async () => {\n\t\tconst localExtension = aLocalExtension('a');\n\t\treturn instantiationService.get(IWorkbenchExtensionEnablementService).setEnablement([aLocalExtension('c')], EnablementState.DisabledGlobally)\n\t\t\t.then(() => instantiationService.get(IWorkbenchExtensionEnablementService).setEnablement([aLocalExtension('b')], EnablementState.DisabledWorkspace))\n\t\t\t.then(async () => {\n\t\t\t\tinstantiationService.stubPromise(IExtensionManagementService, 'getInstalled', [localExtension]);\n\t\t\t\ttestObject = await aWorkbenchService();\n\t\t\t\tconst target = sinon.spy();\n\t\t\t\tdisposableStore.add(testObject.onChange(target));\n\n\t\t\t\treturn instantiationService.get(IWorkbenchExtensionEnablementService).setEnablement([localExtension], EnablementState.DisabledGlobally)\n\t\t\t\t\t.then(() => assert.ok(target.calledOnce));\n\t\t\t});\n\t});\n\n\ttest('test updating an extension does not re-eanbles it when disabled globally', async () => {\n\t\ttestObject = await aWorkbenchService();\n\t\tconst local = aLocalExtension('pub.a');\n\t\tawait instantiationService.get(IWorkbenchExtensionEnablementService).setEnablement([local], EnablementState.DisabledGlobally);\n\t\tdidInstallEvent.fire([{ local, identifier: local.identifier, operation: InstallOperation.Update, profileLocation: null! }]);\n\t\tinstantiationService.stubPromise(IExtensionManagementService, 'getInstalled', [local]);\n\t\tconst actual = await testObject.queryLocal();\n\t\tassert.strictEqual(actual[0].enablementState, EnablementState.DisabledGlobally);\n\t});\n\n\ttest('test updating an extension does not re-eanbles it when workspace disabled', async () => {\n\t\ttestObject = await aWorkbenchService();\n\t\tconst local = aLocalExtension('pub.a');\n\t\tawait instantiationService.get(IWorkbenchExtensionEnablementService).setEnablement([local], EnablementState.DisabledWorkspace);\n\t\tdidInstallEvent.fire([{ local, identifier: local.identifier, operation: InstallOperation.Update, profileLocation: null! }]);\n\t\tinstantiationService.stubPromise(IExtensionManagementService, 'getInstalled', [local]);\n\t\tconst actual = await testObject.queryLocal();\n\t\tassert.strictEqual(actual[0].enablementState, EnablementState.DisabledWorkspace);\n\t});\n\n\ttest('test user extension is preferred when the same extension exists as system and user extension', async () => {\n\t\ttestObject = await aWorkbenchService();\n\t\tconst userExtension = aLocalExtension('pub.a');\n\t\tconst systemExtension = aLocalExtension('pub.a', {}, { type: ExtensionType.System });\n\t\tinstantiationService.stubPromise(IExtensionManagementService, 'getInstalled', [systemExtension, userExtension]);\n\n\t\tconst actual = await testObject.queryLocal();\n\n\t\tassert.strictEqual(actual.length, 1);\n\t\tassert.strictEqual(actual[0].local, userExtension);\n\t});\n\n\ttest('test user extension is disabled when the same extension exists as system and user extension and system extension is disabled', async () => {\n\t\ttestObject = await aWorkbenchService();\n\t\tconst systemExtension = aLocalExtension('pub.a', {}, { type: ExtensionType.System });\n\t\tawait instantiationService.get(IWorkbenchExtensionEnablementService).setEnablement([systemExtension], EnablementState.DisabledGlobally);\n\t\tconst userExtension = aLocalExtension('pub.a');\n\t\tinstantiationService.stubPromise(IExtensionManagementService, 'getInstalled', [systemExtension, userExtension]);\n\n\t\tconst actual = await testObject.queryLocal();\n\n\t\tassert.strictEqual(actual.length, 1);\n\t\tassert.strictEqual(actual[0].local, userExtension);\n\t\tassert.strictEqual(actual[0].enablementState, EnablementState.DisabledGlobally);\n\t});\n\n\ttest('Test local ui extension is chosen if it exists only in local server', async () => {\n\t\t// multi server setup\n\t\tconst extensionKind: ExtensionKind[] = ['ui'];\n\t\tconst localExtension = aLocalExtension('a', { extensionKind }, { location: URI.file(`pub.a`) });\n\n\t\tconst extensionManagementServerService = aMultiExtensionManagementServerService(instantiationService, createExtensionManagementService([localExtension]), createExtensionManagementService([]));\n\t\tinstantiationService.stub(IExtensionManagementServerService, extensionManagementServerService);\n\t\tinstantiationService.stub(IWorkbenchExtensionEnablementService, disposableStore.add(new TestExtensionEnablementService(instantiationService)));\n\t\ttestObject = await aWorkbenchService();\n\n\t\tconst actual = await testObject.queryLocal();\n\n\t\tassert.strictEqual(actual.length, 1);\n\t\tassert.strictEqual(actual[0].local, localExtension);\n\t});\n\n\ttest('Test local workspace extension is chosen if it exists only in local server', async () => {\n\t\t// multi server setup\n\t\tconst extensionKind: ExtensionKind[] = ['workspace'];\n\t\tconst localExtension = aLocalExtension('a', { extensionKind }, { location: URI.file(`pub.a`) });\n\n\t\tconst extensionManagementServerService = aMultiExtensionManagementServerService(instantiationService, createExtensionManagementService([localExtension]), createExtensionManagementService([]));\n\t\tinstantiationService.stub(IExtensionManagementServerService, extensionManagementServerService);\n\t\tinstantiationService.stub(IWorkbenchExtensionEnablementService, disposableStore.add(new TestExtensionEnablementService(instantiationService)));\n\t\ttestObject = await aWorkbenchService();\n\n\t\tconst actual = await testObject.queryLocal();\n\n\t\tassert.strictEqual(actual.length, 1);\n\t\tassert.strictEqual(actual[0].local, localExtension);\n\t});\n\n\ttest('Test local web extension is chosen if it exists only in local server', async () => {\n\t\t// multi server setup\n\t\tconst extensionKind: ExtensionKind[] = ['web'];\n\t\tconst localExtension = aLocalExtension('a', { extensionKind }, { location: URI.file(`pub.a`) });\n\n\t\tconst extensionManagementServerService = aMultiExtensionManagementServerService(instantiationService, createExtensionManagementService([localExtension]), createExtensionManagementService([]));\n\t\tinstantiationService.stub(IExtensionManagementServerService, extensionManagementServerService);\n\t\tinstantiationService.stub(IWorkbenchExtensionEnablementService, disposableStore.add(new TestExtensionEnablementService(instantiationService)));\n\t\ttestObject = await aWorkbenchService();\n\n\t\tconst actual = await testObject.queryLocal();\n\n\t\tassert.strictEqual(actual.length, 1);\n\t\tassert.strictEqual(actual[0].local, localExtension);\n\t});\n\n\ttest('Test local ui,workspace extension is chosen if it exists only in local server', async () => {\n\t\t// multi server setup\n\t\tconst extensionKind: ExtensionKind[] = ['ui', 'workspace'];\n\t\tconst localExtension = aLocalExtension('a', { extensionKind }, { location: URI.file(`pub.a`) });\n\n\t\tconst extensionManagementServerService = aMultiExtensionManagementServerService(instantiationService, createExtensionManagementService([localExtension]), createExtensionManagementService([]));\n\t\tinstantiationService.stub(IExtensionManagementServerService, extensionManagementServerService);\n\t\tinstantiationService.stub(IWorkbenchExtensionEnablementService, disposableStore.add(new TestExtensionEnablementService(instantiationService)));\n\t\ttestObject = await aWorkbenchService();\n\n\t\tconst actual = await testObject.queryLocal();\n\n\t\tassert.strictEqual(actual.length, 1);\n\t\tassert.strictEqual(actual[0].local, localExtension);\n\t});\n\n\ttest('Test local workspace,ui extension is chosen if it exists only in local server', async () => {\n\t\t// multi server setup\n\t\tconst extensionKind: ExtensionKind[] = ['workspace', 'ui'];\n\t\tconst localExtension = aLocalExtension('a', { extensionKind }, { location: URI.file(`pub.a`) });\n\n\t\tconst extensionManagementServerService = aMultiExtensionManagementServerService(instantiationService, createExtensionManagementService([localExtension]), createExtensionManagementService([]));\n\t\tinstantiationService.stub(IExtensionManagementServerService, extensionManagementServerService);\n\t\tinstantiationService.stub(IWorkbenchExtensionEnablementService, disposableStore.add(new TestExtensionEnablementService(instantiationService)));\n\t\ttestObject = await aWorkbenchService();\n\n\t\tconst actual = await testObject.queryLocal();\n\n\t\tassert.strictEqual(actual.length, 1);\n\t\tassert.strictEqual(actual[0].local, localExtension);\n\t});\n\n\ttest('Test local ui,workspace,web extension is chosen if it exists only in local server', async () => {\n\t\t// multi server setup\n\t\tconst extensionKind: ExtensionKind[] = ['ui', 'workspace', 'web'];\n\t\tconst localExtension = aLocalExtension('a', { extensionKind }, { location: URI.file(`pub.a`) });\n\n\t\tconst extensionManagementServerService = aMultiExtensionManagementServerService(instantiationService, createExtensionManagementService([localExtension]), createExtensionManagementService([]));\n\t\tinstantiationService.stub(IExtensionManagementServerService, extensionManagementServerService);\n\t\tinstantiationService.stub(IWorkbenchExtensionEnablementService, disposableStore.add(new TestExtensionEnablementService(instantiationService)));\n\t\ttestObject = await aWorkbenchService();\n\n\t\tconst actual = await testObject.queryLocal();\n\n\t\tassert.strictEqual(actual.length, 1);\n\t\tassert.strictEqual(actual[0].local, localExtension);\n\t});\n\n\ttest('Test local ui,web,workspace extension is chosen if it exists only in local server', async () => {\n\t\t// multi server setup\n\t\tconst extensionKind: ExtensionKind[] = ['ui', 'web', 'workspace'];\n\t\tconst localExtension = aLocalExtension('a', { extensionKind }, { location: URI.file(`pub.a`) });\n\n\t\tconst extensionManagementServerService = aMultiExtensionManagementServerService(instantiationService, createExtensionManagementService([localExtension]), createExtensionManagementService([]));\n\t\tinstantiationService.stub(IExtensionManagementServerService, extensionManagementServerService);\n\t\tinstantiationService.stub(IWorkbenchExtensionEnablementService, disposableStore.add(new TestExtensionEnablementService(instantiationService)));\n\t\ttestObject = await aWorkbenchService();\n\n\t\tconst actual = await testObject.queryLocal();\n\n\t\tassert.strictEqual(actual.length, 1);\n\t\tassert.strictEqual(actual[0].local, localExtension);\n\t});\n\n\ttest('Test local web,ui,workspace extension is chosen if it exists only in local server', async () => {\n\t\t// multi server setup\n\t\tconst extensionKind: ExtensionKind[] = ['web', 'ui', 'workspace'];\n\t\tconst localExtension = aLocalExtension('a', { extensionKind }, { location: URI.file(`pub.a`) });\n\n\t\tconst extensionManagementServerService = aMultiExtensionManagementServerService(instantiationService, createExtensionManagementService([localExtension]), createExtensionManagementService([]));\n\t\tinstantiationService.stub(IExtensionManagementServerService, extensionManagementServerService);\n\t\tinstantiationService.stub(IWorkbenchExtensionEnablementService, disposableStore.add(new TestExtensionEnablementService(instantiationService)));\n\t\ttestObject = await aWorkbenchService();\n\n\t\tconst actual = await testObject.queryLocal();\n\n\t\tassert.strictEqual(actual.length, 1);\n\t\tassert.strictEqual(actual[0].local, localExtension);\n\t});\n\n\ttest('Test local web,workspace,ui extension is chosen if it exists only in local server', async () => {\n\t\t// multi server setup\n\t\tconst extensionKind: ExtensionKind[] = ['web', 'workspace', 'ui'];\n\t\tconst localExtension = aLocalExtension('a', { extensionKind }, { location: URI.file(`pub.a`) });\n\n\t\tconst extensionManagementServerService = aMultiExtensionManagementServerService(instantiationService, createExtensionManagementService([localExtension]), createExtensionManagementService([]));\n\t\tinstantiationService.stub(IExtensionManagementServerService, extensionManagementServerService);\n\t\tinstantiationService.stub(IWorkbenchExtensionEnablementService, disposableStore.add(new TestExtensionEnablementService(instantiationService)));\n\t\ttestObject = await aWorkbenchService();\n\n\t\tconst actual = await testObject.queryLocal();\n\n\t\tassert.strictEqual(actual.length, 1);\n\t\tassert.strictEqual(actual[0].local, localExtension);\n\t});\n\n\ttest('Test local workspace,web,ui extension is chosen if it exists only in local server', async () => {\n\t\t// multi server setup\n\t\tconst extensionKind: ExtensionKind[] = ['workspace', 'web', 'ui'];\n\t\tconst localExtension = aLocalExtension('a', { extensionKind }, { location: URI.file(`pub.a`) });\n\n\t\tconst extensionManagementServerService = aMultiExtensionManagementServerService(instantiationService, createExtensionManagementService([localExtension]), createExtensionManagementService([]));\n\t\tinstantiationService.stub(IExtensionManagementServerService, extensionManagementServerService);\n\t\tinstantiationService.stub(IWorkbenchExtensionEnablementService, disposableStore.add(new TestExtensionEnablementService(instantiationService)));\n\t\ttestObject = await aWorkbenchService();\n\n\t\tconst actual = await testObject.queryLocal();\n\n\t\tassert.strictEqual(actual.length, 1);\n\t\tassert.strictEqual(actual[0].local, localExtension);\n\t});\n\n\ttest('Test local workspace,ui,web extension is chosen if it exists only in local server', async () => {\n\t\t// multi server setup\n\t\tconst extensionKind: ExtensionKind[] = ['workspace', 'ui', 'web'];\n\t\tconst localExtension = aLocalExtension('a', { extensionKind }, { location: URI.file(`pub.a`) });\n\n\t\tconst extensionManagementServerService = aMultiExtensionManagementServerService(instantiationService, createExtensionManagementService([localExtension]), createExtensionManagementService([]));\n\t\tinstantiationService.stub(IExtensionManagementServerService, extensionManagementServerService);\n\t\tinstantiationService.stub(IWorkbenchExtensionEnablementService, disposableStore.add(new TestExtensionEnablementService(instantiationService)));\n\t\ttestObject = await aWorkbenchService();\n\n\t\tconst actual = await testObject.queryLocal();\n\n\t\tassert.strictEqual(actual.length, 1);\n\t\tassert.strictEqual(actual[0].local, localExtension);\n\t});\n\n\ttest('Test local UI extension is chosen if it exists in both servers', async () => {\n\t\t// multi server setup\n\t\tconst extensionKind: ExtensionKind[] = ['ui'];\n\t\tconst localExtension = aLocalExtension('a', { extensionKind }, { location: URI.file(`pub.a`) });\n\t\tconst remoteExtension = aLocalExtension('a', { extensionKind }, { location: URI.file(`pub.a`).with({ scheme: Schemas.vscodeRemote }) });\n\n\t\tconst extensionManagementServerService = aMultiExtensionManagementServerService(instantiationService, createExtensionManagementService([localExtension]), createExtensionManagementService([remoteExtension]));\n\t\tinstantiationService.stub(IExtensionManagementServerService, extensionManagementServerService);\n\t\tinstantiationService.stub(IWorkbenchExtensionEnablementService, disposableStore.add(new TestExtensionEnablementService(instantiationService)));\n\t\ttestObject = await aWorkbenchService();\n\n\t\tconst actual = await testObject.queryLocal();\n\n\t\tassert.strictEqual(actual.length, 1);\n\t\tassert.strictEqual(actual[0].local, localExtension);\n\t});\n\n\ttest('Test local ui,workspace extension is chosen if it exists in both servers', async () => {\n\t\t// multi server setup\n\t\tconst extensionKind: ExtensionKind[] = ['ui', 'workspace'];\n\t\tconst localExtension = aLocalExtension('a', { extensionKind }, { location: URI.file(`pub.a`) });\n\t\tconst remoteExtension = aLocalExtension('a', { extensionKind }, { location: URI.file(`pub.a`).with({ scheme: Schemas.vscodeRemote }) });\n\n\t\tconst extensionManagementServerService = aMultiExtensionManagementServerService(instantiationService, createExtensionManagementService([localExtension]), createExtensionManagementService([remoteExtension]));\n\t\tinstantiationService.stub(IExtensionManagementServerService, extensionManagementServerService);\n\t\tinstantiationService.stub(IWorkbenchExtensionEnablementService, disposableStore.add(new TestExtensionEnablementService(instantiationService)));\n\t\ttestObject = await aWorkbenchService();\n\n\t\tconst actual = await testObject.queryLocal();\n\n\t\tassert.strictEqual(actual.length, 1);\n\t\tassert.strictEqual(actual[0].local, localExtension);\n\t});\n\n\ttest('Test remote workspace extension is chosen if it exists in remote server', async () => {\n\t\t// multi server setup\n\t\tconst extensionKind: ExtensionKind[] = ['workspace'];\n\t\tconst remoteExtension = aLocalExtension('a', { extensionKind }, { location: URI.file(`pub.a`).with({ scheme: Schemas.vscodeRemote }) });\n\n\t\tconst extensionManagementServerService = aMultiExtensionManagementServerService(instantiationService, createExtensionManagementService(), createExtensionManagementService([remoteExtension]));\n\t\tinstantiationService.stub(IExtensionManagementServerService, extensionManagementServerService);\n\t\tinstantiationService.stub(IWorkbenchExtensionEnablementService, disposableStore.add(new TestExtensionEnablementService(instantiationService)));\n\t\ttestObject = await aWorkbenchService();\n\n\t\tconst actual = await testObject.queryLocal();\n\n\t\tassert.strictEqual(actual.length, 1);\n\t\tassert.strictEqual(actual[0].local, remoteExtension);\n\t});\n\n\ttest('Test remote workspace extension is chosen if it exists in both servers', async () => {\n\t\t// multi server setup\n\t\tconst extensionKind: ExtensionKind[] = ['workspace'];\n\t\tconst localExtension = aLocalExtension('a', { extensionKind }, { location: URI.file(`pub.a`) });\n\t\tconst remoteExtension = aLocalExtension('a', { extensionKind }, { location: URI.file(`pub.a`).with({ scheme: Schemas.vscodeRemote }) });\n\n\t\tconst extensionManagementServerService = aMultiExtensionManagementServerService(instantiationService, createExtensionManagementService([localExtension]), createExtensionManagementService([remoteExtension]));\n\t\tinstantiationService.stub(IExtensionManagementServerService, extensionManagementServerService);\n\t\tinstantiationService.stub(IWorkbenchExtensionEnablementService, disposableStore.add(new TestExtensionEnablementService(instantiationService)));\n\t\ttestObject = await aWorkbenchService();\n\n\t\tconst actual = await testObject.queryLocal();\n\n\t\tassert.strictEqual(actual.length, 1);\n\t\tassert.strictEqual(actual[0].local, remoteExtension);\n\t});\n\n\ttest('Test remote workspace extension is chosen if it exists in both servers and local is disabled', async () => {\n\t\t// multi server setup\n\t\tconst extensionKind: ExtensionKind[] = ['workspace'];\n\t\tconst localExtension = aLocalExtension('a', { extensionKind }, { location: URI.file(`pub.a`) });\n\t\tconst remoteExtension = aLocalExtension('a', { extensionKind }, { location: URI.file(`pub.a`).with({ scheme: Schemas.vscodeRemote }) });\n\n\t\tconst extensionManagementServerService = aMultiExtensionManagementServerService(instantiationService, createExtensionManagementService([localExtension]), createExtensionManagementService([remoteExtension]));\n\t\tinstantiationService.stub(IExtensionManagementServerService, extensionManagementServerService);\n\t\tinstantiationService.stub(IWorkbenchExtensionEnablementService, disposableStore.add(new TestExtensionEnablementService(instantiationService)));\n\t\tawait instantiationService.get(IWorkbenchExtensionEnablementService).setEnablement([remoteExtension], EnablementState.DisabledGlobally);\n\t\ttestObject = await aWorkbenchService();\n\n\t\tconst actual = await testObject.queryLocal();\n\n\t\tassert.strictEqual(actual.length, 1);\n\t\tassert.strictEqual(actual[0].local, remoteExtension);\n\t\tassert.strictEqual(actual[0].enablementState, EnablementState.DisabledGlobally);\n\t});\n\n\ttest('Test remote workspace extension is chosen if it exists in both servers and remote is disabled in workspace', async () => {\n\t\t// multi server setup\n\t\tconst extensionKind: ExtensionKind[] = ['workspace'];\n\t\tconst localExtension = aLocalExtension('a', { extensionKind }, { location: URI.file(`pub.a`) });\n\t\tconst remoteExtension = aLocalExtension('a', { extensionKind }, { location: URI.file(`pub.a`).with({ scheme: Schemas.vscodeRemote }) });\n\n\t\tconst extensionManagementServerService = aMultiExtensionManagementServerService(instantiationService, createExtensionManagementService([localExtension]), createExtensionManagementService([remoteExtension]));\n\t\tinstantiationService.stub(IExtensionManagementServerService, extensionManagementServerService);\n\t\tinstantiationService.stub(IWorkbenchExtensionEnablementService, disposableStore.add(new TestExtensionEnablementService(instantiationService)));\n\t\tawait instantiationService.get(IWorkbenchExtensionEnablementService).setEnablement([remoteExtension], EnablementState.DisabledWorkspace);\n\t\ttestObject = await aWorkbenchService();\n\n\t\tconst actual = await testObject.queryLocal();\n\n\t\tassert.strictEqual(actual.length, 1);\n\t\tassert.strictEqual(actual[0].local, remoteExtension);\n\t\tassert.strictEqual(actual[0].enablementState, EnablementState.DisabledWorkspace);\n\t});\n\n\ttest('Test local ui, workspace extension is chosen if it exists in both servers and local is disabled', async () => {\n\t\t// multi server setup\n\t\tconst extensionKind: ExtensionKind[] = ['ui', 'workspace'];\n\t\tconst localExtension = aLocalExtension('a', { extensionKind }, { location: URI.file(`pub.a`) });\n\t\tconst remoteExtension = aLocalExtension('a', { extensionKind }, { location: URI.file(`pub.a`).with({ scheme: Schemas.vscodeRemote }) });\n\n\t\tconst extensionManagementServerService = aMultiExtensionManagementServerService(instantiationService, createExtensionManagementService([localExtension]), createExtensionManagementService([remoteExtension]));\n\t\tinstantiationService.stub(IExtensionManagementServerService, extensionManagementServerService);\n\t\tinstantiationService.stub(IWorkbenchExtensionEnablementService, disposableStore.add(new TestExtensionEnablementService(instantiationService)));\n\t\tawait instantiationService.get(IWorkbenchExtensionEnablementService).setEnablement([localExtension], EnablementState.DisabledGlobally);\n\t\ttestObject = await aWorkbenchService();\n\n\t\tconst actual = await testObject.queryLocal();\n\n\t\tassert.strictEqual(actual.length, 1);\n\t\tassert.strictEqual(actual[0].local, localExtension);\n\t\tassert.strictEqual(actual[0].enablementState, EnablementState.DisabledGlobally);\n\t});\n\n\ttest('Test local ui, workspace extension is chosen if it exists in both servers and local is disabled in workspace', async () => {\n\t\t// multi server setup\n\t\tconst extensionKind: ExtensionKind[] = ['ui', 'workspace'];\n\t\tconst localExtension = aLocalExtension('a', { extensionKind }, { location: URI.file(`pub.a`) });\n\t\tconst remoteExtension = aLocalExtension('a', { extensionKind }, { location: URI.file(`pub.a`).with({ scheme: Schemas.vscodeRemote }) });\n\n\t\tconst extensionManagementServerService = aMultiExtensionManagementServerService(instantiationService, createExtensionManagementService([localExtension]), createExtensionManagementService([remoteExtension]));\n\t\tinstantiationService.stub(IExtensionManagementServerService, extensionManagementServerService);\n\t\tinstantiationService.stub(IWorkbenchExtensionEnablementService, disposableStore.add(new TestExtensionEnablementService(instantiationService)));\n\t\tawait instantiationService.get(IWorkbenchExtensionEnablementService).setEnablement([localExtension], EnablementState.DisabledWorkspace);\n\t\ttestObject = await aWorkbenchService();\n\n\t\tconst actual = await testObject.queryLocal();\n\n\t\tassert.strictEqual(actual.length, 1);\n\t\tassert.strictEqual(actual[0].local, localExtension);\n\t\tassert.strictEqual(actual[0].enablementState, EnablementState.DisabledWorkspace);\n\t});\n\n\ttest('Test local web extension is chosen if it exists in both servers', async () => {\n\t\t// multi server setup\n\t\tconst extensionKind: ExtensionKind[] = ['web'];\n\t\tconst localExtension = aLocalExtension('a', { extensionKind }, { location: URI.file(`pub.a`) });\n\t\tconst remoteExtension = aLocalExtension('a', { extensionKind }, { location: URI.file(`pub.a`).with({ scheme: Schemas.vscodeRemote }) });\n\n\t\tconst extensionManagementServerService = aMultiExtensionManagementServerService(instantiationService, createExtensionManagementService([localExtension]), createExtensionManagementService([remoteExtension]));\n\t\tinstantiationService.stub(IExtensionManagementServerService, extensionManagementServerService);\n\t\tinstantiationService.stub(IWorkbenchExtensionEnablementService, disposableStore.add(new TestExtensionEnablementService(instantiationService)));\n\t\ttestObject = await aWorkbenchService();\n\n\t\tconst actual = await testObject.queryLocal();\n\n\t\tassert.strictEqual(actual.length, 1);\n\t\tassert.strictEqual(actual[0].local, localExtension);\n\t});\n\n\ttest('Test remote web extension is chosen if it exists only in remote', async () => {\n\t\t// multi server setup\n\t\tconst extensionKind: ExtensionKind[] = ['web'];\n\t\tconst remoteExtension = aLocalExtension('a', { extensionKind }, { location: URI.file(`pub.a`).with({ scheme: Schemas.vscodeRemote }) });\n\n\t\tconst extensionManagementServerService = aMultiExtensionManagementServerService(instantiationService, createExtensionManagementService([]), createExtensionManagementService([remoteExtension]));\n\t\tinstantiationService.stub(IExtensionManagementServerService, extensionManagementServerService);\n\t\tinstantiationService.stub(IWorkbenchExtensionEnablementService, disposableStore.add(new TestExtensionEnablementService(instantiationService)));\n\t\ttestObject = await aWorkbenchService();\n\n\t\tconst actual = await testObject.queryLocal();\n\n\t\tassert.strictEqual(actual.length, 1);\n\t\tassert.strictEqual(actual[0].local, remoteExtension);\n\t});\n\n\ttest('Test disable autoupdate for extension when auto update is enabled for all', async () => {\n\t\tconst extension1 = aLocalExtension('a');\n\t\tconst extension2 = aLocalExtension('b');\n\t\tinstantiationService.stubPromise(IExtensionManagementService, 'getInstalled', [extension1, extension2]);\n\t\tinstantiationService.stub(IExtensionManagementService, 'updateMetadata', (local: Mutable<ILocalExtension>, metadata: Partial<Metadata>) => {\n\t\t\tlocal.pinned = !!metadata.pinned;\n\t\t\treturn local;\n\t\t});\n\t\ttestObject = await aWorkbenchService();\n\n\t\tassert.strictEqual(testObject.local[0].local?.pinned, undefined);\n\t\tassert.strictEqual(testObject.local[1].local?.pinned, undefined);\n\n\t\tawait testObject.updateAutoUpdateEnablementFor(testObject.local[0], false);\n\n\t\tassert.strictEqual(testObject.local[0].local?.pinned, undefined);\n\t\tassert.strictEqual(testObject.local[1].local?.pinned, undefined);\n\n\t\tassert.deepStrictEqual(testObject.getEnabledAutoUpdateExtensions(), []);\n\t\tassert.deepStrictEqual(testObject.getDisabledAutoUpdateExtensions(), ['pub.a']);\n\t});\n\n\ttest('Test disable autoupdate for extension when auto update is enabled for enabled extensions', async () => {\n\t\tstubConfiguration('onlyEnabledExtensions');\n\n\t\tconst extension1 = aLocalExtension('a');\n\t\tconst extension2 = aLocalExtension('b');\n\t\tinstantiationService.stubPromise(IExtensionManagementService, 'getInstalled', [extension1, extension2]);\n\t\tinstantiationService.stub(IExtensionManagementService, 'updateMetadata', (local: Mutable<ILocalExtension>, metadata: Partial<Metadata>) => {\n\t\t\tlocal.pinned = !!metadata.pinned;\n\t\t\treturn local;\n\t\t});\n\t\ttestObject = await aWorkbenchService();\n\n\t\tassert.strictEqual(testObject.local[0].local?.pinned, undefined);\n\t\tassert.strictEqual(testObject.local[1].local?.pinned, undefined);\n\n\t\tawait testObject.updateAutoUpdateEnablementFor(testObject.local[0], false);\n\n\t\tassert.strictEqual(testObject.local[0].local?.pinned, undefined);\n\t\tassert.strictEqual(testObject.local[1].local?.pinned, undefined);\n\n\t\tassert.deepStrictEqual(testObject.getEnabledAutoUpdateExtensions(), []);\n\t\tassert.deepStrictEqual(testObject.getDisabledAutoUpdateExtensions(), ['pub.a']);\n\t});\n\n\ttest('Test enable autoupdate for extension when auto update is enabled for all', async () => {\n\t\tconst extension1 = aLocalExtension('a');\n\t\tconst extension2 = aLocalExtension('b');\n\t\tinstantiationService.stubPromise(IExtensionManagementService, 'getInstalled', [extension1, extension2]);\n\t\tinstantiationService.stub(IExtensionManagementService, 'updateMetadata', (local: Mutable<ILocalExtension>, metadata: Partial<Metadata>) => {\n\t\t\tlocal.pinned = !!metadata.pinned;\n\t\t\treturn local;\n\t\t});\n\t\ttestObject = await aWorkbenchService();\n\n\t\tassert.strictEqual(testObject.local[0].local?.pinned, undefined);\n\t\tassert.strictEqual(testObject.local[1].local?.pinned, undefined);\n\n\t\tawait testObject.updateAutoUpdateEnablementFor(testObject.local[0], false);\n\t\tawait testObject.updateAutoUpdateEnablementFor(testObject.local[0], true);\n\n\t\tassert.strictEqual(testObject.local[0].local?.pinned, undefined);\n\t\tassert.strictEqual(testObject.local[1].local?.pinned, undefined);\n\n\t\tassert.deepStrictEqual(testObject.getEnabledAutoUpdateExtensions(), []);\n\t\tassert.deepStrictEqual(testObject.getDisabledAutoUpdateExtensions(), []);\n\t});\n\n\ttest('Test enable autoupdate for pinned extension when auto update is enabled', async () => {\n\t\tconst extension1 = aLocalExtension('a', undefined, { pinned: true });\n\t\tconst extension2 = aLocalExtension('b');\n\t\tinstantiationService.stubPromise(IExtensionManagementService, 'getInstalled', [extension1, extension2]);\n\t\tinstantiationService.stub(IExtensionManagementService, 'updateMetadata', (local: Mutable<ILocalExtension>, metadata: Partial<Metadata>) => {\n\t\t\tlocal.pinned = !!metadata.pinned;\n\t\t\treturn local;\n\t\t});\n\t\ttestObject = await aWorkbenchService();\n\n\t\tassert.strictEqual(testObject.local[0].local?.pinned, true);\n\t\tassert.strictEqual(testObject.local[1].local?.pinned, undefined);\n\n\t\tawait testObject.updateAutoUpdateEnablementFor(testObject.local[0], true);\n\n\t\tassert.strictEqual(testObject.local[0].local?.pinned, false);\n\t\tassert.strictEqual(testObject.local[1].local?.pinned, undefined);\n\n\t\tassert.deepStrictEqual(testObject.getEnabledAutoUpdateExtensions(), []);\n\t\tassert.deepStrictEqual(testObject.getDisabledAutoUpdateExtensions(), []);\n\t});\n\n\ttest('Test updateAutoUpdateEnablementFor throws error when auto update is disabled', async () => {\n\t\tstubConfiguration(false);\n\n\t\tconst extension1 = aLocalExtension('a');\n\t\tconst extension2 = aLocalExtension('b');\n\t\tinstantiationService.stubPromise(IExtensionManagementService, 'getInstalled', [extension1, extension2]);\n\t\ttestObject = await aWorkbenchService();\n\n\t\ttry {\n\t\t\tawait testObject.updateAutoUpdateEnablementFor(testObject.local[0], true);\n\t\t\tassert.fail('error expected');\n\t\t} catch (error) {\n\t\t\t// expected\n\t\t}\n\t});\n\n\ttest('Test updateAutoUpdateEnablementFor throws error for publisher when auto update is enabled', async () => {\n\t\tconst extension1 = aLocalExtension('a');\n\t\tconst extension2 = aLocalExtension('b');\n\t\tinstantiationService.stubPromise(IExtensionManagementService, 'getInstalled', [extension1, extension2]);\n\t\ttestObject = await aWorkbenchService();\n\n\t\ttry {\n\t\t\tawait testObject.updateAutoUpdateEnablementFor(testObject.local[0].publisher, true);\n\t\t\tassert.fail('error expected');\n\t\t} catch (error) {\n\t\t\t// expected\n\t\t}\n\t});\n\n\ttest('Test enable autoupdate for extension when auto update is disabled', async () => {\n\t\tstubConfiguration(false);\n\n\t\tconst extension1 = aLocalExtension('a', undefined, { pinned: true });\n\t\tconst extension2 = aLocalExtension('b', undefined, { pinned: true });\n\t\tinstantiationService.stubPromise(IExtensionManagementService, 'getInstalled', [extension1, extension2]);\n\t\tinstantiationService.stub(IExtensionManagementService, 'updateMetadata', (local: Mutable<ILocalExtension>, metadata: Partial<Metadata>) => {\n\t\t\tlocal.pinned = !!metadata.pinned;\n\t\t\treturn local;\n\t\t});\n\t\ttestObject = await aWorkbenchService();\n\n\t\tassert.strictEqual(testObject.local[0].local?.pinned, true);\n\t\tassert.strictEqual(testObject.local[1].local?.pinned, true);\n\n\t\tawait testObject.updateAutoUpdateEnablementFor(testObject.local[0], true);\n\n\t\tassert.strictEqual(testObject.local[0].local?.pinned, true);\n\t\tassert.strictEqual(testObject.local[1].local?.pinned, true);\n\n\t\tassert.deepStrictEqual(testObject.getEnabledAutoUpdateExtensions(), ['pub.a']);\n\t\tassert.deepStrictEqual(testObject.getDisabledAutoUpdateExtensions(), []);\n\t});\n\n\ttest('Test reset autoupdate extensions state when auto update is disabled', async () => {\n\t\tinstantiationService.stub(IDialogService, {\n\t\t\tconfirm: () => Promise.resolve({ confirmed: true })\n\t\t});\n\n\t\tconst extension1 = aLocalExtension('a', undefined, { pinned: true });\n\t\tconst extension2 = aLocalExtension('b', undefined, { pinned: true });\n\t\tinstantiationService.stubPromise(IExtensionManagementService, 'getInstalled', [extension1, extension2]);\n\t\tinstantiationService.stub(IExtensionManagementService, 'updateMetadata', (local: Mutable<ILocalExtension>, metadata: Partial<Metadata>) => {\n\t\t\tlocal.pinned = !!metadata.pinned;\n\t\t\treturn local;\n\t\t});\n\t\ttestObject = await aWorkbenchService();\n\n\t\tawait testObject.updateAutoUpdateEnablementFor(testObject.local[0], false);\n\n\t\tassert.deepStrictEqual(testObject.getEnabledAutoUpdateExtensions(), []);\n\t\tassert.deepStrictEqual(testObject.getDisabledAutoUpdateExtensions(), ['pub.a']);\n\n\t\tawait testObject.updateAutoUpdateForAllExtensions(false);\n\n\t\tassert.deepStrictEqual(testObject.getEnabledAutoUpdateExtensions(), []);\n\t\tassert.deepStrictEqual(testObject.getDisabledAutoUpdateExtensions(), []);\n\t});\n\n\ttest('Test reset autoupdate extensions state when auto update is enabled', async () => {\n\t\tstubConfiguration(false);\n\t\tinstantiationService.stub(IDialogService, {\n\t\t\tconfirm: () => Promise.resolve({ confirmed: true })\n\t\t});\n\n\t\tconst extension1 = aLocalExtension('a', undefined, { pinned: true });\n\t\tconst extension2 = aLocalExtension('b', undefined, { pinned: true });\n\t\tinstantiationService.stubPromise(IExtensionManagementService, 'getInstalled', [extension1, extension2]);\n\t\tinstantiationService.stub(IExtensionManagementService, 'updateMetadata', (local: Mutable<ILocalExtension>, metadata: Partial<Metadata>) => {\n\t\t\tlocal.pinned = !!metadata.pinned;\n\t\t\treturn local;\n\t\t});\n\t\ttestObject = await aWorkbenchService();\n\n\t\tawait testObject.updateAutoUpdateEnablementFor(testObject.local[0], true);\n\n\t\tassert.deepStrictEqual(testObject.getEnabledAutoUpdateExtensions(), ['pub.a']);\n\t\tassert.deepStrictEqual(testObject.getDisabledAutoUpdateExtensions(), []);\n\n\t\tawait testObject.updateAutoUpdateForAllExtensions(true);\n\n\t\tassert.deepStrictEqual(testObject.getEnabledAutoUpdateExtensions(), []);\n\t\tassert.deepStrictEqual(testObject.getDisabledAutoUpdateExtensions(), []);\n\t});\n\n\tasync function aWorkbenchService(): Promise<ExtensionsWorkbenchService> {\n\t\tconst workbenchService: ExtensionsWorkbenchService = disposableStore.add(instantiationService.createInstance(ExtensionsWorkbenchService));\n\t\tawait workbenchService.queryLocal();\n\t\treturn workbenchService;\n\t}\n\n\tfunction stubConfiguration(autoUpdateValue?: any, autoCheckUpdatesValue?: any): void {\n\t\tconst values: any = {\n\t\t\t[AutoUpdateConfigurationKey]: autoUpdateValue ?? true,\n\t\t\t[AutoCheckUpdatesConfigurationKey]: autoCheckUpdatesValue ?? true\n\t\t};\n\t\tconst emitter = disposableStore.add(new Emitter<IConfigurationChangeEvent>());\n\t\tinstantiationService.stub(IConfigurationService, {\n\t\t\tonDidChangeConfiguration: emitter.event,\n\t\t\tgetValue: (key?: any) => {\n\t\t\t\treturn key ? values[key] : undefined;\n\t\t\t},\n\t\t\tupdateValue: async (key: string, value: any) => {\n\t\t\t\tvalues[key] = value;\n\t\t\t\temitter.fire({\n\t\t\t\t\taffectedKeys: new Set([key]),\n\t\t\t\t\tsource: ConfigurationTarget.USER,\n\t\t\t\t\tchange: { keys: [], overrides: [] },\n\t\t\t\t\taffectsConfiguration(configuration, overrides) {\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t},\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t}\n\n\tfunction aLocalExtension(name: string = 'someext', manifest: any = {}, properties: any = {}): ILocalExtension {\n\t\tmanifest = { name, publisher: 'pub', version: '1.0.0', ...manifest };\n\t\tproperties = {\n\t\t\ttype: ExtensionType.User,\n\t\t\tlocation: URI.file(`pub.${name}`),\n\t\t\tidentifier: { id: getGalleryExtensionId(manifest.publisher, manifest.name) },\n\t\t\t...properties,\n\t\t\tisValid: properties.isValid ?? true,\n\t\t};\n\t\treturn <ILocalExtension>Object.create({ manifest, ...properties });\n\t}\n\n\tconst noAssets: IGalleryExtensionAssets = {\n\t\tchangelog: null,\n\t\tdownload: null!,\n\t\ticon: null!,\n\t\tlicense: null,\n\t\tmanifest: null,\n\t\treadme: null,\n\t\trepository: null,\n\t\tsignature: null,\n\t\tcoreTranslations: []\n\t};\n\n\tfunction aGalleryExtension(name: string, properties: any = {}, galleryExtensionProperties: any = {}, assets: IGalleryExtensionAssets = noAssets): IGalleryExtension {\n\t\tconst targetPlatform = getTargetPlatform(platform, arch);\n\t\tconst galleryExtension = <IGalleryExtension>Object.create({ name, publisher: 'pub', version: '1.0.0', allTargetPlatforms: [targetPlatform], properties: {}, assets: {}, ...properties });\n\t\tgalleryExtension.properties = { ...galleryExtension.properties, dependencies: [], targetPlatform, ...galleryExtensionProperties };\n\t\tgalleryExtension.assets = { ...galleryExtension.assets, ...assets };\n\t\tgalleryExtension.identifier = { id: getGalleryExtensionId(galleryExtension.publisher, galleryExtension.name), uuid: generateUuid() };\n\t\treturn <IGalleryExtension>galleryExtension;\n\t}\n\n\tfunction aPage<T>(...objects: T[]): IPager<T> {\n\t\treturn { firstPage: objects, total: objects.length, pageSize: objects.length, getPage: () => null! };\n\t}\n\n\tfunction aMultiExtensionManagementServerService(instantiationService: TestInstantiationService, localExtensionManagementService?: IProfileAwareExtensionManagementService, remoteExtensionManagementService?: IProfileAwareExtensionManagementService): IExtensionManagementServerService {\n\t\tconst localExtensionManagementServer: IExtensionManagementServer = {\n\t\t\tid: 'vscode-local',\n\t\t\tlabel: 'local',\n\t\t\textensionManagementService: localExtensionManagementService || createExtensionManagementService(),\n\t\t};\n\t\tconst remoteExtensionManagementServer: IExtensionManagementServer = {\n\t\t\tid: 'vscode-remote',\n\t\t\tlabel: 'remote',\n\t\t\textensionManagementService: remoteExtensionManagementService || createExtensionManagementService(),\n\t\t};\n\t\treturn anExtensionManagementServerService(localExtensionManagementServer, remoteExtensionManagementServer, null);\n\t}\n\n\tfunction createExtensionManagementService(installed: ILocalExtension[] = []): IProfileAwareExtensionManagementService {\n\t\treturn <IProfileAwareExtensionManagementService>{\n\t\t\tonInstallExtension: Event.None,\n\t\t\tonDidInstallExtensions: Event.None,\n\t\t\tonUninstallExtension: Event.None,\n\t\t\tonDidUninstallExtension: Event.None,\n\t\t\tonDidChangeProfile: Event.None,\n\t\t\tonDidUpdateExtensionMetadata: Event.None,\n\t\t\tgetInstalled: () => Promise.resolve<ILocalExtension[]>(installed),\n\t\t\tinstallFromGallery: (extension: IGalleryExtension) => Promise.reject(new Error('not supported')),\n\t\t\tupdateMetadata: async (local: Mutable<ILocalExtension>, metadata: Partial<Metadata>, profileLocation: URI) => {\n\t\t\t\tlocal.identifier.uuid = metadata.id;\n\t\t\t\tlocal.publisherDisplayName = metadata.publisherDisplayName!;\n\t\t\t\tlocal.publisherId = metadata.publisherId!;\n\t\t\t\treturn local;\n\t\t\t},\n\t\t\tgetTargetPlatform: async () => getTargetPlatform(platform, arch),\n\t\t\tasync getExtensionsControlManifest() { return <IExtensionsControlManifest>{ malicious: [], deprecated: {}, search: [] }; },\n\t\t\tasync resetPinnedStateForAllUserExtensions(pinned: boolean) { }\n\t\t};\n\t}\n});\n"],
  "mappings": "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",
  "names": ["instantiationService"]
}
