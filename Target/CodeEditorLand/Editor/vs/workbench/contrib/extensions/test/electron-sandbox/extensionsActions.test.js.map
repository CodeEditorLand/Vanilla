{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/extensions/test/electron-sandbox/extensionsActions.test.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport assert from 'assert';\nimport { generateUuid } from '../../../../../base/common/uuid.js';\nimport { IExtensionsWorkbenchService, ExtensionContainers } from '../../common/extensions.js';\nimport * as ExtensionsActions from '../../browser/extensionsActions.js';\nimport { ExtensionsWorkbenchService } from '../../browser/extensionsWorkbenchService.js';\nimport {\n\tIExtensionManagementService, IExtensionGalleryService, ILocalExtension, IGalleryExtension,\n\tDidUninstallExtensionEvent, InstallExtensionEvent, IExtensionIdentifier, InstallOperation, IExtensionTipsService, InstallExtensionResult, getTargetPlatform, IExtensionsControlManifest, UninstallExtensionEvent, Metadata\n} from '../../../../../platform/extensionManagement/common/extensionManagement.js';\nimport { IWorkbenchExtensionEnablementService, EnablementState, IExtensionManagementServerService, IExtensionManagementServer, ExtensionInstallLocation, IProfileAwareExtensionManagementService, IWorkbenchExtensionManagementService } from '../../../../services/extensionManagement/common/extensionManagement.js';\nimport { IExtensionRecommendationsService } from '../../../../services/extensionRecommendations/common/extensionRecommendations.js';\nimport { getGalleryExtensionId } from '../../../../../platform/extensionManagement/common/extensionManagementUtil.js';\nimport { TestExtensionEnablementService } from '../../../../services/extensionManagement/test/browser/extensionEnablementService.test.js';\nimport { ExtensionGalleryService } from '../../../../../platform/extensionManagement/common/extensionGalleryService.js';\nimport { IURLService } from '../../../../../platform/url/common/url.js';\nimport { TestInstantiationService } from '../../../../../platform/instantiation/test/common/instantiationServiceMock.js';\nimport { Emitter, Event } from '../../../../../base/common/event.js';\nimport { IPager } from '../../../../../base/common/paging.js';\nimport { ITelemetryService } from '../../../../../platform/telemetry/common/telemetry.js';\nimport { NullTelemetryService } from '../../../../../platform/telemetry/common/telemetryUtils.js';\nimport { IExtensionService, toExtensionDescription } from '../../../../services/extensions/common/extensions.js';\nimport { IWorkspaceContextService } from '../../../../../platform/workspace/common/workspace.js';\nimport { TestContextService, TestWorkspaceTrustManagementService } from '../../../../test/common/workbenchTestServices.js';\nimport { TestExtensionTipsService, TestSharedProcessService } from '../../../../test/electron-sandbox/workbenchTestServices.js';\nimport { IConfigurationService } from '../../../../../platform/configuration/common/configuration.js';\nimport { ILogService, NullLogService } from '../../../../../platform/log/common/log.js';\nimport { NativeURLService } from '../../../../../platform/url/common/urlService.js';\nimport { URI } from '../../../../../base/common/uri.js';\nimport { TestConfigurationService } from '../../../../../platform/configuration/test/common/testConfigurationService.js';\nimport { IRemoteAgentService } from '../../../../services/remote/common/remoteAgentService.js';\nimport { RemoteAgentService } from '../../../../services/remote/electron-sandbox/remoteAgentService.js';\nimport { IExtensionContributions, ExtensionType, IExtensionDescription, IExtension } from '../../../../../platform/extensions/common/extensions.js';\nimport { ISharedProcessService } from '../../../../../platform/ipc/electron-sandbox/services.js';\nimport { CancellationToken } from '../../../../../base/common/cancellation.js';\nimport { ILabelService, IFormatterChangeEvent } from '../../../../../platform/label/common/label.js';\nimport { IProductService } from '../../../../../platform/product/common/productService.js';\nimport { Schemas } from '../../../../../base/common/network.js';\nimport { IProgressService } from '../../../../../platform/progress/common/progress.js';\nimport { ProgressService } from '../../../../services/progress/browser/progressService.js';\nimport { ILifecycleService } from '../../../../services/lifecycle/common/lifecycle.js';\nimport { TestEnvironmentService, TestLifecycleService } from '../../../../test/browser/workbenchTestServices.js';\nimport { DisposableStore } from '../../../../../base/common/lifecycle.js';\nimport { INativeWorkbenchEnvironmentService } from '../../../../services/environment/electron-sandbox/environmentService.js';\nimport { IWorkbenchEnvironmentService } from '../../../../services/environment/common/environmentService.js';\nimport { IUserDataSyncEnablementService } from '../../../../../platform/userDataSync/common/userDataSync.js';\nimport { UserDataSyncEnablementService } from '../../../../../platform/userDataSync/common/userDataSyncEnablementService.js';\nimport { IContextKeyService } from '../../../../../platform/contextkey/common/contextkey.js';\nimport { MockContextKeyService } from '../../../../../platform/keybinding/test/common/mockKeybindingService.js';\nimport { IWorkspaceTrustManagementService } from '../../../../../platform/workspace/common/workspaceTrust.js';\nimport { IEnvironmentService, INativeEnvironmentService } from '../../../../../platform/environment/common/environment.js';\nimport { platform } from '../../../../../base/common/platform.js';\nimport { arch } from '../../../../../base/common/process.js';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from '../../../../../base/test/common/utils.js';\nimport { IUpdateService, State } from '../../../../../platform/update/common/update.js';\nimport { IFileService } from '../../../../../platform/files/common/files.js';\nimport { FileService } from '../../../../../platform/files/common/fileService.js';\nimport { Mutable } from '../../../../../base/common/types.js';\nimport { IUserDataProfileService } from '../../../../services/userDataProfile/common/userDataProfile.js';\nimport { UserDataProfileService } from '../../../../services/userDataProfile/common/userDataProfileService.js';\nimport { toUserDataProfile } from '../../../../../platform/userDataProfile/common/userDataProfile.js';\n\nlet instantiationService: TestInstantiationService;\nlet installEvent: Emitter<InstallExtensionEvent>,\n\tdidInstallEvent: Emitter<readonly InstallExtensionResult[]>,\n\tuninstallEvent: Emitter<UninstallExtensionEvent>,\n\tdidUninstallEvent: Emitter<DidUninstallExtensionEvent>;\n\nfunction setupTest(disposables: Pick<DisposableStore, 'add'>) {\n\tinstallEvent = disposables.add(new Emitter<InstallExtensionEvent>());\n\tdidInstallEvent = disposables.add(new Emitter<readonly InstallExtensionResult[]>());\n\tuninstallEvent = disposables.add(new Emitter<UninstallExtensionEvent>());\n\tdidUninstallEvent = disposables.add(new Emitter<DidUninstallExtensionEvent>());\n\n\tinstantiationService = disposables.add(new TestInstantiationService());\n\n\tinstantiationService.stub(IEnvironmentService, TestEnvironmentService);\n\tinstantiationService.stub(IWorkbenchEnvironmentService, TestEnvironmentService);\n\n\tinstantiationService.stub(ITelemetryService, NullTelemetryService);\n\tinstantiationService.stub(ILogService, NullLogService);\n\n\tinstantiationService.stub(IWorkspaceContextService, new TestContextService());\n\tinstantiationService.stub(IFileService, disposables.add(new FileService(new NullLogService())));\n\tinstantiationService.stub(IConfigurationService, new TestConfigurationService());\n\tinstantiationService.stub(IProgressService, ProgressService);\n\tinstantiationService.stub(IProductService, {});\n\tinstantiationService.stub(IContextKeyService, new MockContextKeyService());\n\n\tinstantiationService.stub(IExtensionGalleryService, ExtensionGalleryService);\n\tinstantiationService.stub(ISharedProcessService, TestSharedProcessService);\n\n\tinstantiationService.stub(IWorkbenchExtensionManagementService, {\n\t\tonDidInstallExtensions: didInstallEvent.event,\n\t\tonInstallExtension: installEvent.event as any,\n\t\tonUninstallExtension: uninstallEvent.event as any,\n\t\tonDidUninstallExtension: didUninstallEvent.event as any,\n\t\tonDidUpdateExtensionMetadata: Event.None,\n\t\tonDidChangeProfile: Event.None,\n\t\tasync getInstalled() { return []; },\n\t\tasync getInstalledWorkspaceExtensions() { return []; },\n\t\tasync getExtensionsControlManifest() { return { malicious: [], deprecated: {}, search: [] }; },\n\t\tasync updateMetadata(local: Mutable<ILocalExtension>, metadata: Partial<Metadata>) {\n\t\t\tlocal.identifier.uuid = metadata.id;\n\t\t\tlocal.publisherDisplayName = metadata.publisherDisplayName!;\n\t\t\tlocal.publisherId = metadata.publisherId!;\n\t\t\treturn local;\n\t\t},\n\t\tasync canInstall() { return true; },\n\t\tasync getTargetPlatform() { return getTargetPlatform(platform, arch); },\n\t});\n\n\tinstantiationService.stub(IRemoteAgentService, RemoteAgentService);\n\n\tconst localExtensionManagementServer = { extensionManagementService: instantiationService.get(IExtensionManagementService) as IProfileAwareExtensionManagementService, label: 'local', id: 'vscode-local' };\n\tinstantiationService.stub(IExtensionManagementServerService, {\n\t\tget localExtensionManagementServer(): IExtensionManagementServer {\n\t\t\treturn localExtensionManagementServer;\n\t\t},\n\t\tgetExtensionManagementServer(extension: IExtension): IExtensionManagementServer | null {\n\t\t\tif (extension.location.scheme === Schemas.file) {\n\t\t\t\treturn localExtensionManagementServer;\n\t\t\t}\n\t\t\tthrow new Error(`Invalid Extension ${extension.location}`);\n\t\t}\n\t});\n\n\tinstantiationService.stub(IUserDataProfileService, disposables.add(new UserDataProfileService(toUserDataProfile('test', 'test', URI.file('foo'), URI.file('cache')))));\n\tinstantiationService.stub(IWorkbenchExtensionEnablementService, disposables.add(new TestExtensionEnablementService(instantiationService)));\n\tinstantiationService.stub(ILabelService, { onDidChangeFormatters: disposables.add(new Emitter<IFormatterChangeEvent>()).event });\n\n\tinstantiationService.stub(ILifecycleService, disposables.add(new TestLifecycleService()));\n\tinstantiationService.stub(IExtensionTipsService, disposables.add(instantiationService.createInstance(TestExtensionTipsService)));\n\tinstantiationService.stub(IExtensionRecommendationsService, {});\n\tinstantiationService.stub(IURLService, NativeURLService);\n\n\tinstantiationService.stub(IExtensionGalleryService, 'isEnabled', true);\n\tinstantiationService.stubPromise(IExtensionGalleryService, 'query', aPage());\n\tinstantiationService.stubPromise(IExtensionGalleryService, 'getExtensions', []);\n\tinstantiationService.stub(IExtensionService, { extensions: [], onDidChangeExtensions: Event.None, canAddExtension: (extension: IExtensionDescription) => false, canRemoveExtension: (extension: IExtensionDescription) => false, whenInstalledExtensionsRegistered: () => Promise.resolve(true) });\n\t(<TestExtensionEnablementService>instantiationService.get(IWorkbenchExtensionEnablementService)).reset();\n\n\tinstantiationService.stub(IUserDataSyncEnablementService, disposables.add(instantiationService.createInstance(UserDataSyncEnablementService)));\n\n\tinstantiationService.stub(IUpdateService, { onStateChange: Event.None, state: State.Uninitialized });\n\tinstantiationService.set(IExtensionsWorkbenchService, disposables.add(instantiationService.createInstance(ExtensionsWorkbenchService)));\n\tinstantiationService.stub(IWorkspaceTrustManagementService, disposables.add(new TestWorkspaceTrustManagementService()));\n}\n\n\nsuite('ExtensionsActions', () => {\n\n\tconst disposables = ensureNoDisposablesAreLeakedInTestSuite();\n\tsetup(() => setupTest(disposables));\n\n\ttest('Install action is disabled when there is no extension', () => {\n\t\tconst testObject: ExtensionsActions.InstallAction = disposables.add(instantiationService.createInstance(ExtensionsActions.InstallAction, { installPreReleaseVersion: false }));\n\n\t\tassert.ok(!testObject.enabled);\n\t});\n\n\ttest('Test Install action when state is installed', () => {\n\t\tconst workbenchService = instantiationService.get(IExtensionsWorkbenchService);\n\t\tconst testObject: ExtensionsActions.InstallAction = disposables.add(instantiationService.createInstance(ExtensionsActions.InstallAction, { installPreReleaseVersion: false }));\n\t\tdisposables.add(instantiationService.createInstance(ExtensionContainers, [testObject]));\n\t\tconst local = aLocalExtension('a');\n\t\tinstantiationService.stubPromise(IExtensionManagementService, 'getInstalled', [local]);\n\t\treturn workbenchService.queryLocal()\n\t\t\t.then(() => {\n\t\t\t\tinstantiationService.stubPromise(IExtensionGalleryService, 'query', aPage(aGalleryExtension('a', { identifier: local.identifier })));\n\t\t\t\treturn workbenchService.queryGallery(CancellationToken.None)\n\t\t\t\t\t.then((paged) => {\n\t\t\t\t\t\ttestObject.extension = paged.firstPage[0];\n\t\t\t\t\t\tassert.ok(!testObject.enabled);\n\t\t\t\t\t\tassert.strictEqual('Install', testObject.label);\n\t\t\t\t\t\tassert.strictEqual('extension-action label prominent install hide', testObject.class);\n\t\t\t\t\t});\n\t\t\t});\n\t});\n\n\ttest('Test InstallingLabelAction when state is installing', () => {\n\t\tconst workbenchService = instantiationService.get(IExtensionsWorkbenchService);\n\t\tconst testObject: ExtensionsActions.InstallAction = disposables.add(instantiationService.createInstance(ExtensionsActions.InstallingLabelAction));\n\t\tdisposables.add(instantiationService.createInstance(ExtensionContainers, [testObject]));\n\t\tconst gallery = aGalleryExtension('a');\n\t\tinstantiationService.stubPromise(IExtensionGalleryService, 'query', aPage(gallery));\n\t\treturn workbenchService.queryGallery(CancellationToken.None)\n\t\t\t.then((paged) => {\n\t\t\t\ttestObject.extension = paged.firstPage[0];\n\t\t\t\tinstallEvent.fire({ identifier: gallery.identifier, source: gallery, profileLocation: null! });\n\n\t\t\t\tassert.ok(!testObject.enabled);\n\t\t\t\tassert.strictEqual('Installing', testObject.label);\n\t\t\t\tassert.strictEqual('extension-action label install installing', testObject.class);\n\t\t\t});\n\t});\n\n\ttest('Test Install action when state is uninstalled', async () => {\n\t\tconst workbenchService = instantiationService.get(IExtensionsWorkbenchService);\n\t\tconst testObject: ExtensionsActions.InstallAction = disposables.add(instantiationService.createInstance(ExtensionsActions.InstallAction, { installPreReleaseVersion: false }));\n\t\tdisposables.add(instantiationService.createInstance(ExtensionContainers, [testObject]));\n\t\tconst gallery = aGalleryExtension('a');\n\t\tinstantiationService.stubPromise(IExtensionGalleryService, 'query', aPage(gallery));\n\t\tconst paged = await workbenchService.queryGallery(CancellationToken.None);\n\t\tconst promise = Event.toPromise(Event.filter(testObject.onDidChange, e => e.enabled === true));\n\t\ttestObject.extension = paged.firstPage[0];\n\t\tawait promise;\n\t\tassert.ok(testObject.enabled);\n\t\tassert.strictEqual('Install', testObject.label);\n\t});\n\n\ttest('Test Install action when extension is system action', () => {\n\t\tconst testObject: ExtensionsActions.InstallAction = disposables.add(instantiationService.createInstance(ExtensionsActions.InstallAction, { installPreReleaseVersion: false }));\n\t\tdisposables.add(instantiationService.createInstance(ExtensionContainers, [testObject]));\n\t\tconst local = aLocalExtension('a', {}, { type: ExtensionType.System });\n\t\tinstantiationService.stubPromise(IExtensionManagementService, 'getInstalled', [local]);\n\n\t\treturn instantiationService.get(IExtensionsWorkbenchService).queryLocal()\n\t\t\t.then(extensions => {\n\t\t\t\tuninstallEvent.fire({ identifier: local.identifier, profileLocation: null! });\n\t\t\t\tdidUninstallEvent.fire({ identifier: local.identifier, profileLocation: null! });\n\t\t\t\ttestObject.extension = extensions[0];\n\t\t\t\tassert.ok(!testObject.enabled);\n\t\t\t});\n\t});\n\n\ttest('Test Install action when extension doesnot has gallery', () => {\n\t\tconst testObject: ExtensionsActions.InstallAction = disposables.add(instantiationService.createInstance(ExtensionsActions.InstallAction, { installPreReleaseVersion: false }));\n\t\tdisposables.add(instantiationService.createInstance(ExtensionContainers, [testObject]));\n\t\tconst local = aLocalExtension('a');\n\t\tinstantiationService.stubPromise(IExtensionManagementService, 'getInstalled', [local]);\n\n\t\treturn instantiationService.get(IExtensionsWorkbenchService).queryLocal()\n\t\t\t.then(extensions => {\n\t\t\t\tuninstallEvent.fire({ identifier: local.identifier, profileLocation: null! });\n\t\t\t\tdidUninstallEvent.fire({ identifier: local.identifier, profileLocation: null! });\n\t\t\t\ttestObject.extension = extensions[0];\n\t\t\t\tassert.ok(!testObject.enabled);\n\t\t\t});\n\t});\n\n\ttest('Uninstall action is disabled when there is no extension', () => {\n\t\tconst testObject: ExtensionsActions.UninstallAction = disposables.add(instantiationService.createInstance(ExtensionsActions.UninstallAction));\n\t\tdisposables.add(instantiationService.createInstance(ExtensionContainers, [testObject]));\n\n\t\tassert.ok(!testObject.enabled);\n\t});\n\n\ttest('Test Uninstall action when state is uninstalling', () => {\n\t\tconst testObject: ExtensionsActions.UninstallAction = disposables.add(instantiationService.createInstance(ExtensionsActions.UninstallAction));\n\t\tdisposables.add(instantiationService.createInstance(ExtensionContainers, [testObject]));\n\t\tconst local = aLocalExtension('a');\n\t\tinstantiationService.stubPromise(IExtensionManagementService, 'getInstalled', [local]);\n\n\t\treturn instantiationService.get(IExtensionsWorkbenchService).queryLocal()\n\t\t\t.then(extensions => {\n\t\t\t\ttestObject.extension = extensions[0];\n\t\t\t\tuninstallEvent.fire({ identifier: local.identifier, profileLocation: null! });\n\t\t\t\tassert.ok(!testObject.enabled);\n\t\t\t\tassert.strictEqual('Uninstalling', testObject.label);\n\t\t\t\tassert.strictEqual('extension-action label uninstall uninstalling', testObject.class);\n\t\t\t});\n\t});\n\n\ttest('Test Uninstall action when state is installed and is user extension', () => {\n\t\tconst testObject: ExtensionsActions.UninstallAction = disposables.add(instantiationService.createInstance(ExtensionsActions.UninstallAction));\n\t\tdisposables.add(instantiationService.createInstance(ExtensionContainers, [testObject]));\n\t\tconst local = aLocalExtension('a');\n\t\tinstantiationService.stubPromise(IExtensionManagementService, 'getInstalled', [local]);\n\n\t\treturn instantiationService.get(IExtensionsWorkbenchService).queryLocal()\n\t\t\t.then(extensions => {\n\t\t\t\ttestObject.extension = extensions[0];\n\t\t\t\tassert.ok(testObject.enabled);\n\t\t\t\tassert.strictEqual('Uninstall', testObject.label);\n\t\t\t\tassert.strictEqual('extension-action label uninstall', testObject.class);\n\t\t\t});\n\t});\n\n\ttest('Test Uninstall action when state is installed and is system extension', () => {\n\t\tconst testObject: ExtensionsActions.UninstallAction = disposables.add(instantiationService.createInstance(ExtensionsActions.UninstallAction));\n\t\tdisposables.add(instantiationService.createInstance(ExtensionContainers, [testObject]));\n\t\tconst local = aLocalExtension('a', {}, { type: ExtensionType.System });\n\t\tinstantiationService.stubPromise(IExtensionManagementService, 'getInstalled', [local]);\n\n\t\treturn instantiationService.get(IExtensionsWorkbenchService).queryLocal()\n\t\t\t.then(extensions => {\n\t\t\t\ttestObject.extension = extensions[0];\n\t\t\t\tassert.ok(!testObject.enabled);\n\t\t\t\tassert.strictEqual('Uninstall', testObject.label);\n\t\t\t\tassert.strictEqual('extension-action label uninstall', testObject.class);\n\t\t\t});\n\t});\n\n\ttest('Test Uninstall action when state is installing and is user extension', () => {\n\t\tconst testObject: ExtensionsActions.UninstallAction = disposables.add(instantiationService.createInstance(ExtensionsActions.UninstallAction));\n\t\tdisposables.add(instantiationService.createInstance(ExtensionContainers, [testObject]));\n\t\tconst local = aLocalExtension('a');\n\t\tinstantiationService.stubPromise(IExtensionManagementService, 'getInstalled', [local]);\n\n\t\treturn instantiationService.get(IExtensionsWorkbenchService).queryLocal()\n\t\t\t.then(extensions => {\n\t\t\t\tconst gallery = aGalleryExtension('a');\n\t\t\t\tconst extension = extensions[0];\n\t\t\t\textension.gallery = gallery;\n\t\t\t\tinstallEvent.fire({ identifier: gallery.identifier, source: gallery, profileLocation: null! });\n\t\t\t\ttestObject.extension = extension;\n\t\t\t\tassert.ok(!testObject.enabled);\n\t\t\t});\n\t});\n\n\ttest('Test Uninstall action after extension is installed', async () => {\n\t\tconst testObject: ExtensionsActions.UninstallAction = disposables.add(instantiationService.createInstance(ExtensionsActions.UninstallAction));\n\t\tdisposables.add(instantiationService.createInstance(ExtensionContainers, [testObject]));\n\t\tconst gallery = aGalleryExtension('a');\n\t\tinstantiationService.stubPromise(IExtensionGalleryService, 'query', aPage(gallery));\n\n\t\tconst paged = await instantiationService.get(IExtensionsWorkbenchService).queryGallery(CancellationToken.None);\n\t\ttestObject.extension = paged.firstPage[0];\n\n\t\tinstallEvent.fire({ identifier: gallery.identifier, source: gallery, profileLocation: null! });\n\t\tconst promise = Event.toPromise(testObject.onDidChange);\n\t\tdidInstallEvent.fire([{ identifier: gallery.identifier, source: gallery, operation: InstallOperation.Install, local: aLocalExtension('a', gallery, gallery), profileLocation: null! }]);\n\n\t\tawait promise;\n\t\tassert.ok(testObject.enabled);\n\t\tassert.strictEqual('Uninstall', testObject.label);\n\t\tassert.strictEqual('extension-action label uninstall', testObject.class);\n\t});\n\n\ttest('Test UpdateAction when there is no extension', () => {\n\t\tconst testObject: ExtensionsActions.UpdateAction = disposables.add(instantiationService.createInstance(ExtensionsActions.UpdateAction, false));\n\t\tdisposables.add(instantiationService.createInstance(ExtensionContainers, [testObject]));\n\n\t\tassert.ok(!testObject.enabled);\n\t});\n\n\ttest('Test UpdateAction when extension is uninstalled', () => {\n\t\tconst testObject: ExtensionsActions.UpdateAction = disposables.add(instantiationService.createInstance(ExtensionsActions.UpdateAction, false));\n\t\tdisposables.add(instantiationService.createInstance(ExtensionContainers, [testObject]));\n\t\tconst gallery = aGalleryExtension('a', { version: '1.0.0' });\n\t\tinstantiationService.stubPromise(IExtensionGalleryService, 'query', aPage(gallery));\n\t\treturn instantiationService.get(IExtensionsWorkbenchService).queryGallery(CancellationToken.None)\n\t\t\t.then((paged) => {\n\t\t\t\ttestObject.extension = paged.firstPage[0];\n\t\t\t\tassert.ok(!testObject.enabled);\n\t\t\t});\n\t});\n\n\ttest('Test UpdateAction when extension is installed and not outdated', () => {\n\t\tconst testObject: ExtensionsActions.UpdateAction = disposables.add(instantiationService.createInstance(ExtensionsActions.UpdateAction, false));\n\t\tdisposables.add(instantiationService.createInstance(ExtensionContainers, [testObject]));\n\t\tconst local = aLocalExtension('a', { version: '1.0.0' });\n\t\tinstantiationService.stubPromise(IExtensionManagementService, 'getInstalled', [local]);\n\n\t\treturn instantiationService.get(IExtensionsWorkbenchService).queryLocal()\n\t\t\t.then(extensions => {\n\t\t\t\ttestObject.extension = extensions[0];\n\t\t\t\tinstantiationService.stubPromise(IExtensionGalleryService, 'query', aPage(aGalleryExtension('a', { identifier: local.identifier, version: local.manifest.version })));\n\t\t\t\treturn instantiationService.get(IExtensionsWorkbenchService).queryGallery(CancellationToken.None)\n\t\t\t\t\t.then(extensions => assert.ok(!testObject.enabled));\n\t\t\t});\n\t});\n\n\ttest('Test UpdateAction when extension is installed outdated and system extension', () => {\n\t\tconst testObject: ExtensionsActions.UpdateAction = disposables.add(instantiationService.createInstance(ExtensionsActions.UpdateAction, false));\n\t\tdisposables.add(instantiationService.createInstance(ExtensionContainers, [testObject]));\n\t\tconst local = aLocalExtension('a', { version: '1.0.0' }, { type: ExtensionType.System });\n\t\tinstantiationService.stubPromise(IExtensionManagementService, 'getInstalled', [local]);\n\n\t\treturn instantiationService.get(IExtensionsWorkbenchService).queryLocal()\n\t\t\t.then(extensions => {\n\t\t\t\ttestObject.extension = extensions[0];\n\t\t\t\tinstantiationService.stubPromise(IExtensionGalleryService, 'query', aPage(aGalleryExtension('a', { identifier: local.identifier, version: '1.0.1' })));\n\t\t\t\treturn instantiationService.get(IExtensionsWorkbenchService).queryGallery(CancellationToken.None)\n\t\t\t\t\t.then(extensions => assert.ok(!testObject.enabled));\n\t\t\t});\n\t});\n\n\ttest('Test UpdateAction when extension is installed outdated and user extension', () => {\n\t\tconst testObject: ExtensionsActions.UpdateAction = disposables.add(instantiationService.createInstance(ExtensionsActions.UpdateAction, false));\n\t\tdisposables.add(instantiationService.createInstance(ExtensionContainers, [testObject]));\n\t\tconst local = aLocalExtension('a', { version: '1.0.0' });\n\t\tinstantiationService.stubPromise(IExtensionManagementService, 'getInstalled', [local]);\n\n\t\tconst workbenchService = instantiationService.get(IExtensionsWorkbenchService);\n\t\treturn workbenchService.queryLocal()\n\t\t\t.then(async extensions => {\n\t\t\t\ttestObject.extension = extensions[0];\n\t\t\t\tconst gallery = aGalleryExtension('a', { identifier: local.identifier, version: '1.0.1' });\n\t\t\t\tinstantiationService.stubPromise(IExtensionGalleryService, 'query', aPage(gallery));\n\t\t\t\tinstantiationService.stubPromise(IExtensionGalleryService, 'getCompatibleExtension', gallery);\n\t\t\t\tinstantiationService.stubPromise(IExtensionGalleryService, 'getExtensions', [gallery]);\n\t\t\t\tassert.ok(!testObject.enabled);\n\t\t\t\treturn new Promise<void>(c => {\n\t\t\t\t\tdisposables.add(testObject.onDidChange(() => {\n\t\t\t\t\t\tif (testObject.enabled) {\n\t\t\t\t\t\t\tc();\n\t\t\t\t\t\t}\n\t\t\t\t\t}));\n\t\t\t\t\tinstantiationService.get(IExtensionsWorkbenchService).queryGallery(CancellationToken.None);\n\t\t\t\t});\n\t\t\t});\n\t});\n\n\ttest('Test UpdateAction when extension is installing and outdated and user extension', async () => {\n\t\tconst testObject: ExtensionsActions.UpdateAction = disposables.add(instantiationService.createInstance(ExtensionsActions.UpdateAction, false));\n\t\tdisposables.add(instantiationService.createInstance(ExtensionContainers, [testObject]));\n\t\tconst local = aLocalExtension('a', { version: '1.0.0' });\n\t\tinstantiationService.stubPromise(IExtensionManagementService, 'getInstalled', [local]);\n\n\t\tconst extensions = await instantiationService.get(IExtensionsWorkbenchService).queryLocal();\n\t\ttestObject.extension = extensions[0];\n\t\tconst gallery = aGalleryExtension('a', { identifier: local.identifier, version: '1.0.1' });\n\t\tinstantiationService.stubPromise(IExtensionGalleryService, 'query', aPage(gallery));\n\t\tinstantiationService.stubPromise(IExtensionGalleryService, 'getCompatibleExtension', gallery);\n\t\tinstantiationService.stubPromise(IExtensionGalleryService, 'getExtensions', [gallery]);\n\t\tawait new Promise<void>(c => {\n\t\t\tdisposables.add(testObject.onDidChange(() => {\n\t\t\t\tif (testObject.enabled) {\n\t\t\t\t\tc();\n\t\t\t\t}\n\t\t\t}));\n\t\t\tinstantiationService.get(IExtensionsWorkbenchService).queryGallery(CancellationToken.None);\n\t\t});\n\t\tawait new Promise<void>(c => {\n\t\t\tdisposables.add(testObject.onDidChange(() => {\n\t\t\t\tif (!testObject.enabled) {\n\t\t\t\t\tc();\n\t\t\t\t}\n\t\t\t}));\n\t\t\tinstallEvent.fire({ identifier: local.identifier, source: gallery, profileLocation: null! });\n\t\t});\n\t});\n\n\ttest('Test ManageExtensionAction when there is no extension', () => {\n\t\tconst testObject: ExtensionsActions.ManageExtensionAction = disposables.add(instantiationService.createInstance(ExtensionsActions.ManageExtensionAction));\n\t\tdisposables.add(instantiationService.createInstance(ExtensionContainers, [testObject]));\n\n\t\tassert.ok(!testObject.enabled);\n\t});\n\n\ttest('Test ManageExtensionAction when extension is installed', () => {\n\t\tconst testObject: ExtensionsActions.ManageExtensionAction = disposables.add(instantiationService.createInstance(ExtensionsActions.ManageExtensionAction));\n\t\tdisposables.add(instantiationService.createInstance(ExtensionContainers, [testObject]));\n\t\tconst local = aLocalExtension('a');\n\t\tinstantiationService.stubPromise(IExtensionManagementService, 'getInstalled', [local]);\n\n\t\treturn instantiationService.get(IExtensionsWorkbenchService).queryLocal()\n\t\t\t.then(extensions => {\n\t\t\t\ttestObject.extension = extensions[0];\n\t\t\t\tassert.ok(testObject.enabled);\n\t\t\t\tassert.strictEqual('extension-action icon manage codicon codicon-extensions-manage', testObject.class);\n\t\t\t\tassert.strictEqual('Manage', testObject.tooltip);\n\t\t\t});\n\t});\n\n\ttest('Test ManageExtensionAction when extension is uninstalled', () => {\n\t\tconst testObject: ExtensionsActions.ManageExtensionAction = disposables.add(instantiationService.createInstance(ExtensionsActions.ManageExtensionAction));\n\t\tdisposables.add(instantiationService.createInstance(ExtensionContainers, [testObject]));\n\t\tconst gallery = aGalleryExtension('a');\n\t\tinstantiationService.stubPromise(IExtensionGalleryService, 'query', aPage(gallery));\n\n\t\treturn instantiationService.get(IExtensionsWorkbenchService).queryGallery(CancellationToken.None)\n\t\t\t.then(page => {\n\t\t\t\ttestObject.extension = page.firstPage[0];\n\t\t\t\tassert.ok(!testObject.enabled);\n\t\t\t\tassert.strictEqual('extension-action icon manage codicon codicon-extensions-manage hide', testObject.class);\n\t\t\t\tassert.strictEqual('Manage', testObject.tooltip);\n\t\t\t});\n\t});\n\n\ttest('Test ManageExtensionAction when extension is installing', () => {\n\t\tconst testObject: ExtensionsActions.ManageExtensionAction = disposables.add(instantiationService.createInstance(ExtensionsActions.ManageExtensionAction));\n\t\tdisposables.add(instantiationService.createInstance(ExtensionContainers, [testObject]));\n\t\tconst gallery = aGalleryExtension('a');\n\t\tinstantiationService.stubPromise(IExtensionGalleryService, 'query', aPage(gallery));\n\n\t\treturn instantiationService.get(IExtensionsWorkbenchService).queryGallery(CancellationToken.None)\n\t\t\t.then(page => {\n\t\t\t\ttestObject.extension = page.firstPage[0];\n\n\t\t\t\tinstallEvent.fire({ identifier: gallery.identifier, source: gallery, profileLocation: null! });\n\t\t\t\tassert.ok(!testObject.enabled);\n\t\t\t\tassert.strictEqual('extension-action icon manage codicon codicon-extensions-manage hide', testObject.class);\n\t\t\t\tassert.strictEqual('Manage', testObject.tooltip);\n\t\t\t});\n\t});\n\n\ttest('Test ManageExtensionAction when extension is queried from gallery and installed', async () => {\n\t\tconst testObject: ExtensionsActions.ManageExtensionAction = disposables.add(instantiationService.createInstance(ExtensionsActions.ManageExtensionAction));\n\t\tdisposables.add(instantiationService.createInstance(ExtensionContainers, [testObject]));\n\t\tconst gallery = aGalleryExtension('a');\n\t\tinstantiationService.stubPromise(IExtensionGalleryService, 'query', aPage(gallery));\n\n\t\tconst paged = await instantiationService.get(IExtensionsWorkbenchService).queryGallery(CancellationToken.None);\n\t\ttestObject.extension = paged.firstPage[0];\n\t\tinstallEvent.fire({ identifier: gallery.identifier, source: gallery, profileLocation: null! });\n\t\tconst promise = Event.toPromise(testObject.onDidChange);\n\t\tdidInstallEvent.fire([{ identifier: gallery.identifier, source: gallery, operation: InstallOperation.Install, local: aLocalExtension('a', gallery, gallery), profileLocation: null! }]);\n\n\t\tawait promise;\n\t\tassert.ok(testObject.enabled);\n\t\tassert.strictEqual('extension-action icon manage codicon codicon-extensions-manage', testObject.class);\n\t\tassert.strictEqual('Manage', testObject.tooltip);\n\t});\n\n\ttest('Test ManageExtensionAction when extension is system extension', () => {\n\t\tconst testObject: ExtensionsActions.ManageExtensionAction = disposables.add(instantiationService.createInstance(ExtensionsActions.ManageExtensionAction));\n\t\tdisposables.add(instantiationService.createInstance(ExtensionContainers, [testObject]));\n\t\tconst local = aLocalExtension('a', {}, { type: ExtensionType.System });\n\t\tinstantiationService.stubPromise(IExtensionManagementService, 'getInstalled', [local]);\n\n\t\treturn instantiationService.get(IExtensionsWorkbenchService).queryLocal()\n\t\t\t.then(extensions => {\n\t\t\t\ttestObject.extension = extensions[0];\n\t\t\t\tassert.ok(testObject.enabled);\n\t\t\t\tassert.strictEqual('extension-action icon manage codicon codicon-extensions-manage', testObject.class);\n\t\t\t\tassert.strictEqual('Manage', testObject.tooltip);\n\t\t\t});\n\t});\n\n\ttest('Test ManageExtensionAction when extension is uninstalling', () => {\n\t\tconst testObject: ExtensionsActions.ManageExtensionAction = disposables.add(instantiationService.createInstance(ExtensionsActions.ManageExtensionAction));\n\t\tdisposables.add(instantiationService.createInstance(ExtensionContainers, [testObject]));\n\t\tconst local = aLocalExtension('a');\n\t\tinstantiationService.stubPromise(IExtensionManagementService, 'getInstalled', [local]);\n\n\t\treturn instantiationService.get(IExtensionsWorkbenchService).queryLocal()\n\t\t\t.then(extensions => {\n\t\t\t\ttestObject.extension = extensions[0];\n\t\t\t\tuninstallEvent.fire({ identifier: local.identifier, profileLocation: null! });\n\n\t\t\t\tassert.ok(!testObject.enabled);\n\t\t\t\tassert.strictEqual('extension-action icon manage codicon codicon-extensions-manage', testObject.class);\n\t\t\t\tassert.strictEqual('Manage', testObject.tooltip);\n\t\t\t});\n\t});\n\n\ttest('Test EnableForWorkspaceAction when there is no extension', () => {\n\t\tconst testObject: ExtensionsActions.EnableForWorkspaceAction = disposables.add(instantiationService.createInstance(ExtensionsActions.EnableForWorkspaceAction));\n\n\t\tassert.ok(!testObject.enabled);\n\t});\n\n\ttest('Test EnableForWorkspaceAction when there extension is not disabled', () => {\n\t\tconst local = aLocalExtension('a');\n\t\tinstantiationService.stubPromise(IExtensionManagementService, 'getInstalled', [local]);\n\n\t\treturn instantiationService.get(IExtensionsWorkbenchService).queryLocal()\n\t\t\t.then(extensions => {\n\t\t\t\tconst testObject: ExtensionsActions.EnableForWorkspaceAction = disposables.add(instantiationService.createInstance(ExtensionsActions.EnableForWorkspaceAction));\n\t\t\t\ttestObject.extension = extensions[0];\n\t\t\t\tassert.ok(!testObject.enabled);\n\t\t\t});\n\t});\n\n\ttest('Test EnableForWorkspaceAction when the extension is disabled globally', () => {\n\t\tconst local = aLocalExtension('a');\n\t\treturn instantiationService.get(IWorkbenchExtensionEnablementService).setEnablement([local], EnablementState.DisabledGlobally)\n\t\t\t.then(() => {\n\t\t\t\tinstantiationService.stubPromise(IExtensionManagementService, 'getInstalled', [local]);\n\n\t\t\t\treturn instantiationService.get(IExtensionsWorkbenchService).queryLocal()\n\t\t\t\t\t.then(extensions => {\n\t\t\t\t\t\tconst testObject: ExtensionsActions.EnableForWorkspaceAction = disposables.add(instantiationService.createInstance(ExtensionsActions.EnableForWorkspaceAction));\n\t\t\t\t\t\ttestObject.extension = extensions[0];\n\t\t\t\t\t\tassert.ok(testObject.enabled);\n\t\t\t\t\t});\n\t\t\t});\n\t});\n\n\ttest('Test EnableForWorkspaceAction when extension is disabled for workspace', () => {\n\t\tconst local = aLocalExtension('a');\n\t\treturn instantiationService.get(IWorkbenchExtensionEnablementService).setEnablement([local], EnablementState.DisabledWorkspace)\n\t\t\t.then(() => {\n\t\t\t\tinstantiationService.stubPromise(IExtensionManagementService, 'getInstalled', [local]);\n\n\t\t\t\treturn instantiationService.get(IExtensionsWorkbenchService).queryLocal()\n\t\t\t\t\t.then(extensions => {\n\t\t\t\t\t\tconst testObject: ExtensionsActions.EnableForWorkspaceAction = disposables.add(instantiationService.createInstance(ExtensionsActions.EnableForWorkspaceAction));\n\t\t\t\t\t\ttestObject.extension = extensions[0];\n\t\t\t\t\t\tassert.ok(testObject.enabled);\n\t\t\t\t\t});\n\t\t\t});\n\t});\n\n\ttest('Test EnableForWorkspaceAction when the extension is disabled globally and workspace', () => {\n\t\tconst local = aLocalExtension('a');\n\t\treturn instantiationService.get(IWorkbenchExtensionEnablementService).setEnablement([local], EnablementState.DisabledGlobally)\n\t\t\t.then(() => instantiationService.get(IWorkbenchExtensionEnablementService).setEnablement([local], EnablementState.DisabledWorkspace))\n\t\t\t.then(() => {\n\t\t\t\tinstantiationService.stubPromise(IExtensionManagementService, 'getInstalled', [local]);\n\n\t\t\t\treturn instantiationService.get(IExtensionsWorkbenchService).queryLocal()\n\t\t\t\t\t.then(extensions => {\n\t\t\t\t\t\tconst testObject: ExtensionsActions.EnableForWorkspaceAction = disposables.add(instantiationService.createInstance(ExtensionsActions.EnableForWorkspaceAction));\n\t\t\t\t\t\ttestObject.extension = extensions[0];\n\t\t\t\t\t\tassert.ok(testObject.enabled);\n\t\t\t\t\t});\n\t\t\t});\n\t});\n\n\ttest('Test EnableGloballyAction when there is no extension', () => {\n\t\tconst testObject: ExtensionsActions.EnableGloballyAction = disposables.add(instantiationService.createInstance(ExtensionsActions.EnableGloballyAction));\n\n\t\tassert.ok(!testObject.enabled);\n\t});\n\n\ttest('Test EnableGloballyAction when the extension is not disabled', () => {\n\t\tconst local = aLocalExtension('a');\n\t\tinstantiationService.stubPromise(IExtensionManagementService, 'getInstalled', [local]);\n\n\t\treturn instantiationService.get(IExtensionsWorkbenchService).queryLocal()\n\t\t\t.then(extensions => {\n\t\t\t\tconst testObject: ExtensionsActions.EnableGloballyAction = disposables.add(instantiationService.createInstance(ExtensionsActions.EnableGloballyAction));\n\t\t\t\ttestObject.extension = extensions[0];\n\t\t\t\tassert.ok(!testObject.enabled);\n\t\t\t});\n\t});\n\n\ttest('Test EnableGloballyAction when the extension is disabled for workspace', () => {\n\t\tconst local = aLocalExtension('a');\n\t\treturn instantiationService.get(IWorkbenchExtensionEnablementService).setEnablement([local], EnablementState.DisabledWorkspace)\n\t\t\t.then(() => {\n\t\t\t\tinstantiationService.stubPromise(IExtensionManagementService, 'getInstalled', [local]);\n\n\t\t\t\treturn instantiationService.get(IExtensionsWorkbenchService).queryLocal()\n\t\t\t\t\t.then(extensions => {\n\t\t\t\t\t\tconst testObject: ExtensionsActions.EnableGloballyAction = disposables.add(instantiationService.createInstance(ExtensionsActions.EnableGloballyAction));\n\t\t\t\t\t\ttestObject.extension = extensions[0];\n\t\t\t\t\t\tassert.ok(!testObject.enabled);\n\t\t\t\t\t});\n\t\t\t});\n\t});\n\n\ttest('Test EnableGloballyAction when the extension is disabled globally', () => {\n\t\tconst local = aLocalExtension('a');\n\t\treturn instantiationService.get(IWorkbenchExtensionEnablementService).setEnablement([local], EnablementState.DisabledGlobally)\n\t\t\t.then(() => {\n\t\t\t\tinstantiationService.stubPromise(IExtensionManagementService, 'getInstalled', [local]);\n\n\t\t\t\treturn instantiationService.get(IExtensionsWorkbenchService).queryLocal()\n\t\t\t\t\t.then(extensions => {\n\t\t\t\t\t\tconst testObject: ExtensionsActions.EnableGloballyAction = disposables.add(instantiationService.createInstance(ExtensionsActions.EnableGloballyAction));\n\t\t\t\t\t\ttestObject.extension = extensions[0];\n\t\t\t\t\t\tassert.ok(testObject.enabled);\n\t\t\t\t\t});\n\t\t\t});\n\t});\n\n\ttest('Test EnableGloballyAction when the extension is disabled in both', () => {\n\t\tconst local = aLocalExtension('a');\n\t\treturn instantiationService.get(IWorkbenchExtensionEnablementService).setEnablement([local], EnablementState.DisabledGlobally)\n\t\t\t.then(() => instantiationService.get(IWorkbenchExtensionEnablementService).setEnablement([local], EnablementState.DisabledWorkspace))\n\t\t\t.then(() => {\n\t\t\t\tinstantiationService.stubPromise(IExtensionManagementService, 'getInstalled', [local]);\n\n\t\t\t\treturn instantiationService.get(IExtensionsWorkbenchService).queryLocal()\n\t\t\t\t\t.then(extensions => {\n\t\t\t\t\t\tconst testObject: ExtensionsActions.EnableGloballyAction = disposables.add(instantiationService.createInstance(ExtensionsActions.EnableGloballyAction));\n\t\t\t\t\t\ttestObject.extension = extensions[0];\n\t\t\t\t\t\tassert.ok(testObject.enabled);\n\t\t\t\t\t});\n\t\t\t});\n\t});\n\n\ttest('Test EnableAction when there is no extension', () => {\n\t\tconst testObject: ExtensionsActions.EnableDropDownAction = disposables.add(instantiationService.createInstance(ExtensionsActions.EnableDropDownAction));\n\n\t\tassert.ok(!testObject.enabled);\n\t});\n\n\ttest('Test EnableDropDownAction when extension is installed and enabled', () => {\n\t\tconst local = aLocalExtension('a');\n\t\tinstantiationService.stubPromise(IExtensionManagementService, 'getInstalled', [local]);\n\n\t\treturn instantiationService.get(IExtensionsWorkbenchService).queryLocal()\n\t\t\t.then(extensions => {\n\t\t\t\tconst testObject: ExtensionsActions.EnableDropDownAction = disposables.add(instantiationService.createInstance(ExtensionsActions.EnableDropDownAction));\n\t\t\t\ttestObject.extension = extensions[0];\n\t\t\t\tassert.ok(!testObject.enabled);\n\t\t\t});\n\t});\n\n\ttest('Test EnableDropDownAction when extension is installed and disabled globally', () => {\n\t\tconst local = aLocalExtension('a');\n\t\treturn instantiationService.get(IWorkbenchExtensionEnablementService).setEnablement([local], EnablementState.DisabledGlobally)\n\t\t\t.then(() => {\n\t\t\t\tinstantiationService.stubPromise(IExtensionManagementService, 'getInstalled', [local]);\n\n\t\t\t\treturn instantiationService.get(IExtensionsWorkbenchService).queryLocal()\n\t\t\t\t\t.then(extensions => {\n\t\t\t\t\t\tconst testObject: ExtensionsActions.EnableDropDownAction = disposables.add(instantiationService.createInstance(ExtensionsActions.EnableDropDownAction));\n\t\t\t\t\t\ttestObject.extension = extensions[0];\n\t\t\t\t\t\tassert.ok(testObject.enabled);\n\t\t\t\t\t});\n\t\t\t});\n\t});\n\n\ttest('Test EnableDropDownAction when extension is installed and disabled for workspace', () => {\n\t\tconst local = aLocalExtension('a');\n\t\treturn instantiationService.get(IWorkbenchExtensionEnablementService).setEnablement([local], EnablementState.DisabledWorkspace)\n\t\t\t.then(() => {\n\t\t\t\tinstantiationService.stubPromise(IExtensionManagementService, 'getInstalled', [local]);\n\n\t\t\t\treturn instantiationService.get(IExtensionsWorkbenchService).queryLocal()\n\t\t\t\t\t.then(extensions => {\n\t\t\t\t\t\tconst testObject: ExtensionsActions.EnableDropDownAction = disposables.add(instantiationService.createInstance(ExtensionsActions.EnableDropDownAction));\n\t\t\t\t\t\ttestObject.extension = extensions[0];\n\t\t\t\t\t\tassert.ok(testObject.enabled);\n\t\t\t\t\t});\n\t\t\t});\n\t});\n\n\ttest('Test EnableDropDownAction when extension is uninstalled', () => {\n\t\tconst gallery = aGalleryExtension('a');\n\t\tinstantiationService.stubPromise(IExtensionGalleryService, 'query', aPage(gallery));\n\n\t\treturn instantiationService.get(IExtensionsWorkbenchService).queryGallery(CancellationToken.None)\n\t\t\t.then(page => {\n\t\t\t\tconst testObject: ExtensionsActions.EnableDropDownAction = disposables.add(instantiationService.createInstance(ExtensionsActions.EnableDropDownAction));\n\t\t\t\ttestObject.extension = page.firstPage[0];\n\t\t\t\tassert.ok(!testObject.enabled);\n\t\t\t});\n\t});\n\n\ttest('Test EnableDropDownAction when extension is installing', () => {\n\t\tconst gallery = aGalleryExtension('a');\n\t\tinstantiationService.stubPromise(IExtensionGalleryService, 'query', aPage(gallery));\n\n\t\treturn instantiationService.get(IExtensionsWorkbenchService).queryGallery(CancellationToken.None)\n\t\t\t.then(page => {\n\t\t\t\tconst testObject: ExtensionsActions.EnableDropDownAction = disposables.add(instantiationService.createInstance(ExtensionsActions.EnableDropDownAction));\n\t\t\t\ttestObject.extension = page.firstPage[0];\n\t\t\t\tdisposables.add(instantiationService.createInstance(ExtensionContainers, [testObject]));\n\n\t\t\t\tinstallEvent.fire({ identifier: gallery.identifier, source: gallery, profileLocation: null! });\n\t\t\t\tassert.ok(!testObject.enabled);\n\t\t\t});\n\t});\n\n\ttest('Test EnableDropDownAction when extension is uninstalling', () => {\n\t\tconst local = aLocalExtension('a');\n\t\tinstantiationService.stubPromise(IExtensionManagementService, 'getInstalled', [local]);\n\n\t\treturn instantiationService.get(IExtensionsWorkbenchService).queryLocal()\n\t\t\t.then(extensions => {\n\t\t\t\tconst testObject: ExtensionsActions.EnableDropDownAction = disposables.add(instantiationService.createInstance(ExtensionsActions.EnableDropDownAction));\n\t\t\t\ttestObject.extension = extensions[0];\n\t\t\t\tuninstallEvent.fire({ identifier: local.identifier, profileLocation: null! });\n\t\t\t\tassert.ok(!testObject.enabled);\n\t\t\t});\n\t});\n\n\ttest('Test DisableForWorkspaceAction when there is no extension', () => {\n\t\tconst testObject: ExtensionsActions.DisableForWorkspaceAction = disposables.add(instantiationService.createInstance(ExtensionsActions.DisableForWorkspaceAction));\n\n\t\tassert.ok(!testObject.enabled);\n\t});\n\n\ttest('Test DisableForWorkspaceAction when the extension is disabled globally', () => {\n\t\tconst local = aLocalExtension('a');\n\t\treturn instantiationService.get(IWorkbenchExtensionEnablementService).setEnablement([local], EnablementState.DisabledGlobally)\n\t\t\t.then(() => {\n\t\t\t\tinstantiationService.stubPromise(IExtensionManagementService, 'getInstalled', [local]);\n\n\t\t\t\treturn instantiationService.get(IExtensionsWorkbenchService).queryLocal()\n\t\t\t\t\t.then(extensions => {\n\t\t\t\t\t\tconst testObject: ExtensionsActions.DisableForWorkspaceAction = disposables.add(instantiationService.createInstance(ExtensionsActions.DisableForWorkspaceAction));\n\t\t\t\t\t\ttestObject.extension = extensions[0];\n\t\t\t\t\t\tassert.ok(!testObject.enabled);\n\t\t\t\t\t});\n\t\t\t});\n\t});\n\n\ttest('Test DisableForWorkspaceAction when the extension is disabled workspace', () => {\n\t\tconst local = aLocalExtension('a');\n\t\treturn instantiationService.get(IWorkbenchExtensionEnablementService).setEnablement([local], EnablementState.DisabledGlobally)\n\t\t\t.then(() => {\n\t\t\t\tinstantiationService.stubPromise(IExtensionManagementService, 'getInstalled', [local]);\n\n\t\t\t\treturn instantiationService.get(IExtensionsWorkbenchService).queryLocal()\n\t\t\t\t\t.then(extensions => {\n\t\t\t\t\t\tconst testObject: ExtensionsActions.DisableForWorkspaceAction = disposables.add(instantiationService.createInstance(ExtensionsActions.DisableForWorkspaceAction));\n\t\t\t\t\t\ttestObject.extension = extensions[0];\n\t\t\t\t\t\tassert.ok(!testObject.enabled);\n\t\t\t\t\t});\n\t\t\t});\n\t});\n\n\ttest('Test DisableForWorkspaceAction when extension is enabled', () => {\n\t\tconst local = aLocalExtension('a');\n\t\tinstantiationService.stub(IExtensionService, {\n\t\t\textensions: [toExtensionDescription(local)],\n\t\t\tonDidChangeExtensions: Event.None,\n\t\t\twhenInstalledExtensionsRegistered: () => Promise.resolve(true)\n\t\t});\n\n\t\tinstantiationService.stubPromise(IExtensionManagementService, 'getInstalled', [local]);\n\n\t\treturn instantiationService.get(IExtensionsWorkbenchService).queryLocal()\n\t\t\t.then(extensions => {\n\t\t\t\tconst testObject: ExtensionsActions.DisableForWorkspaceAction = disposables.add(instantiationService.createInstance(ExtensionsActions.DisableForWorkspaceAction));\n\t\t\t\ttestObject.extension = extensions[0];\n\t\t\t\tassert.ok(testObject.enabled);\n\t\t\t});\n\t});\n\n\ttest('Test DisableGloballyAction when there is no extension', () => {\n\t\tconst testObject: ExtensionsActions.DisableGloballyAction = disposables.add(instantiationService.createInstance(ExtensionsActions.DisableGloballyAction));\n\n\t\tassert.ok(!testObject.enabled);\n\t});\n\n\ttest('Test DisableGloballyAction when the extension is disabled globally', () => {\n\t\tconst local = aLocalExtension('a');\n\t\treturn instantiationService.get(IWorkbenchExtensionEnablementService).setEnablement([local], EnablementState.DisabledGlobally)\n\t\t\t.then(() => {\n\t\t\t\tinstantiationService.stubPromise(IExtensionManagementService, 'getInstalled', [local]);\n\n\t\t\t\treturn instantiationService.get(IExtensionsWorkbenchService).queryLocal()\n\t\t\t\t\t.then(extensions => {\n\t\t\t\t\t\tconst testObject: ExtensionsActions.DisableGloballyAction = disposables.add(instantiationService.createInstance(ExtensionsActions.DisableGloballyAction));\n\t\t\t\t\t\ttestObject.extension = extensions[0];\n\t\t\t\t\t\tassert.ok(!testObject.enabled);\n\t\t\t\t\t});\n\t\t\t});\n\t});\n\n\ttest('Test DisableGloballyAction when the extension is disabled for workspace', () => {\n\t\tconst local = aLocalExtension('a');\n\t\treturn instantiationService.get(IWorkbenchExtensionEnablementService).setEnablement([local], EnablementState.DisabledWorkspace)\n\t\t\t.then(() => {\n\t\t\t\tinstantiationService.stubPromise(IExtensionManagementService, 'getInstalled', [local]);\n\n\t\t\t\treturn instantiationService.get(IExtensionsWorkbenchService).queryLocal()\n\t\t\t\t\t.then(extensions => {\n\t\t\t\t\t\tconst testObject: ExtensionsActions.DisableGloballyAction = disposables.add(instantiationService.createInstance(ExtensionsActions.DisableGloballyAction));\n\t\t\t\t\t\ttestObject.extension = extensions[0];\n\t\t\t\t\t\tassert.ok(!testObject.enabled);\n\t\t\t\t\t});\n\t\t\t});\n\t});\n\n\ttest('Test DisableGloballyAction when the extension is enabled', () => {\n\t\tconst local = aLocalExtension('a');\n\t\tinstantiationService.stubPromise(IExtensionManagementService, 'getInstalled', [local]);\n\t\tinstantiationService.stub(IExtensionService, {\n\t\t\textensions: [toExtensionDescription(local)],\n\t\t\tonDidChangeExtensions: Event.None,\n\t\t\twhenInstalledExtensionsRegistered: () => Promise.resolve(true)\n\t\t});\n\n\t\treturn instantiationService.get(IExtensionsWorkbenchService).queryLocal()\n\t\t\t.then(extensions => {\n\t\t\t\tconst testObject: ExtensionsActions.DisableGloballyAction = disposables.add(instantiationService.createInstance(ExtensionsActions.DisableGloballyAction));\n\t\t\t\ttestObject.extension = extensions[0];\n\t\t\t\tassert.ok(testObject.enabled);\n\t\t\t});\n\t});\n\n\ttest('Test DisableGloballyAction when extension is installed and enabled', () => {\n\t\tconst local = aLocalExtension('a');\n\t\tinstantiationService.stubPromise(IExtensionManagementService, 'getInstalled', [local]);\n\t\tinstantiationService.stub(IExtensionService, {\n\t\t\textensions: [toExtensionDescription(local)],\n\t\t\tonDidChangeExtensions: Event.None,\n\t\t\twhenInstalledExtensionsRegistered: () => Promise.resolve(true)\n\t\t});\n\n\t\treturn instantiationService.get(IExtensionsWorkbenchService).queryLocal()\n\t\t\t.then(extensions => {\n\t\t\t\tconst testObject: ExtensionsActions.DisableGloballyAction = disposables.add(instantiationService.createInstance(ExtensionsActions.DisableGloballyAction));\n\t\t\t\ttestObject.extension = extensions[0];\n\t\t\t\tassert.ok(testObject.enabled);\n\t\t\t});\n\t});\n\n\ttest('Test DisableGloballyAction when extension is installed and disabled globally', () => {\n\t\tconst local = aLocalExtension('a');\n\t\tinstantiationService.stub(IExtensionService, {\n\t\t\textensions: [toExtensionDescription(local)],\n\t\t\tonDidChangeExtensions: Event.None,\n\t\t\twhenInstalledExtensionsRegistered: () => Promise.resolve(true)\n\t\t});\n\n\t\treturn instantiationService.get(IWorkbenchExtensionEnablementService).setEnablement([local], EnablementState.DisabledGlobally)\n\t\t\t.then(() => {\n\t\t\t\tinstantiationService.stubPromise(IExtensionManagementService, 'getInstalled', [local]);\n\n\t\t\t\treturn instantiationService.get(IExtensionsWorkbenchService).queryLocal()\n\t\t\t\t\t.then(extensions => {\n\t\t\t\t\t\tconst testObject: ExtensionsActions.DisableGloballyAction = disposables.add(instantiationService.createInstance(ExtensionsActions.DisableGloballyAction));\n\t\t\t\t\t\ttestObject.extension = extensions[0];\n\t\t\t\t\t\tassert.ok(!testObject.enabled);\n\t\t\t\t\t});\n\t\t\t});\n\t});\n\n\ttest('Test DisableGloballyAction when extension is uninstalled', () => {\n\t\tconst gallery = aGalleryExtension('a');\n\t\tinstantiationService.stubPromise(IExtensionGalleryService, 'query', aPage(gallery));\n\t\tinstantiationService.stub(IExtensionService, {\n\t\t\textensions: [toExtensionDescription(aLocalExtension('a'))],\n\t\t\tonDidChangeExtensions: Event.None,\n\t\t\twhenInstalledExtensionsRegistered: () => Promise.resolve(true)\n\t\t});\n\n\t\treturn instantiationService.get(IExtensionsWorkbenchService).queryGallery(CancellationToken.None)\n\t\t\t.then(page => {\n\t\t\t\tconst testObject: ExtensionsActions.DisableGloballyAction = disposables.add(instantiationService.createInstance(ExtensionsActions.DisableGloballyAction));\n\t\t\t\ttestObject.extension = page.firstPage[0];\n\t\t\t\tassert.ok(!testObject.enabled);\n\t\t\t});\n\t});\n\n\ttest('Test DisableGloballyAction when extension is installing', () => {\n\t\tconst gallery = aGalleryExtension('a');\n\t\tinstantiationService.stubPromise(IExtensionGalleryService, 'query', aPage(gallery));\n\t\tinstantiationService.stub(IExtensionService, {\n\t\t\textensions: [toExtensionDescription(aLocalExtension('a'))],\n\t\t\tonDidChangeExtensions: Event.None,\n\t\t\twhenInstalledExtensionsRegistered: () => Promise.resolve(true)\n\t\t});\n\n\t\treturn instantiationService.get(IExtensionsWorkbenchService).queryGallery(CancellationToken.None)\n\t\t\t.then(page => {\n\t\t\t\tconst testObject: ExtensionsActions.DisableGloballyAction = disposables.add(instantiationService.createInstance(ExtensionsActions.DisableGloballyAction));\n\t\t\t\ttestObject.extension = page.firstPage[0];\n\t\t\t\tdisposables.add(instantiationService.createInstance(ExtensionContainers, [testObject]));\n\t\t\t\tinstallEvent.fire({ identifier: gallery.identifier, source: gallery, profileLocation: null! });\n\t\t\t\tassert.ok(!testObject.enabled);\n\t\t\t});\n\t});\n\n\ttest('Test DisableGloballyAction when extension is uninstalling', () => {\n\t\tconst local = aLocalExtension('a');\n\t\tinstantiationService.stubPromise(IExtensionManagementService, 'getInstalled', [local]);\n\t\tinstantiationService.stub(IExtensionService, {\n\t\t\textensions: [toExtensionDescription(local)],\n\t\t\tonDidChangeExtensions: Event.None,\n\t\t\twhenInstalledExtensionsRegistered: () => Promise.resolve(true)\n\t\t});\n\n\t\treturn instantiationService.get(IExtensionsWorkbenchService).queryLocal()\n\t\t\t.then(extensions => {\n\t\t\t\tconst testObject: ExtensionsActions.DisableGloballyAction = disposables.add(instantiationService.createInstance(ExtensionsActions.DisableGloballyAction));\n\t\t\t\ttestObject.extension = extensions[0];\n\t\t\t\tdisposables.add(instantiationService.createInstance(ExtensionContainers, [testObject]));\n\t\t\t\tuninstallEvent.fire({ identifier: local.identifier, profileLocation: null! });\n\t\t\t\tassert.ok(!testObject.enabled);\n\t\t\t});\n\t});\n\n});\n\nsuite('ExtensionRuntimeStateAction', () => {\n\n\tconst disposables = ensureNoDisposablesAreLeakedInTestSuite();\n\n\tsetup(() => setupTest(disposables));\n\n\ttest('Test Runtime State when there is no extension', () => {\n\t\tconst testObject: ExtensionsActions.ExtensionRuntimeStateAction = disposables.add(instantiationService.createInstance(ExtensionsActions.ExtensionRuntimeStateAction));\n\t\tdisposables.add(instantiationService.createInstance(ExtensionContainers, [testObject]));\n\n\t\tassert.ok(!testObject.enabled);\n\t});\n\n\ttest('Test Runtime State when extension state is installing', async () => {\n\t\tconst testObject: ExtensionsActions.ExtensionRuntimeStateAction = disposables.add(instantiationService.createInstance(ExtensionsActions.ExtensionRuntimeStateAction));\n\t\tdisposables.add(instantiationService.createInstance(ExtensionContainers, [testObject]));\n\t\tconst workbenchService = instantiationService.get(IExtensionsWorkbenchService);\n\t\tconst gallery = aGalleryExtension('a');\n\t\tinstantiationService.stubPromise(IExtensionGalleryService, 'query', aPage(gallery));\n\t\tconst paged = await workbenchService.queryGallery(CancellationToken.None);\n\t\ttestObject.extension = paged.firstPage[0];\n\t\tinstallEvent.fire({ identifier: gallery.identifier, source: gallery, profileLocation: null! });\n\n\t\tassert.ok(!testObject.enabled);\n\t});\n\n\ttest('Test Runtime State when extension state is uninstalling', async () => {\n\t\tconst testObject: ExtensionsActions.ExtensionRuntimeStateAction = disposables.add(instantiationService.createInstance(ExtensionsActions.ExtensionRuntimeStateAction));\n\t\tdisposables.add(instantiationService.createInstance(ExtensionContainers, [testObject]));\n\t\tconst local = aLocalExtension('a');\n\t\tinstantiationService.stubPromise(IExtensionManagementService, 'getInstalled', [local]);\n\n\t\tconst extensions = await instantiationService.get(IExtensionsWorkbenchService).queryLocal();\n\t\ttestObject.extension = extensions[0];\n\t\tuninstallEvent.fire({ identifier: local.identifier, profileLocation: null! });\n\t\tassert.ok(!testObject.enabled);\n\t});\n\n\ttest('Test Runtime State when extension is newly installed', async () => {\n\t\tconst onDidChangeExtensionsEmitter = new Emitter<{ added: IExtensionDescription[]; removed: IExtensionDescription[] }>();\n\t\tinstantiationService.stub(IExtensionService, {\n\t\t\textensions: [toExtensionDescription(aLocalExtension('b'))],\n\t\t\tonDidChangeExtensions: onDidChangeExtensionsEmitter.event,\n\t\t\tcanAddExtension: (extension) => false,\n\t\t\twhenInstalledExtensionsRegistered: () => Promise.resolve(true)\n\t\t});\n\t\tconst testObject: ExtensionsActions.ExtensionRuntimeStateAction = disposables.add(instantiationService.createInstance(ExtensionsActions.ExtensionRuntimeStateAction));\n\t\tdisposables.add(instantiationService.createInstance(ExtensionContainers, [testObject]));\n\t\tconst gallery = aGalleryExtension('a');\n\t\tinstantiationService.stubPromise(IExtensionGalleryService, 'query', aPage(gallery));\n\n\t\tconst paged = await instantiationService.get(IExtensionsWorkbenchService).queryGallery(CancellationToken.None);\n\t\ttestObject.extension = paged.firstPage[0];\n\t\tassert.ok(!testObject.enabled);\n\n\t\tinstallEvent.fire({ identifier: gallery.identifier, source: gallery, profileLocation: null! });\n\t\tconst promise = Event.toPromise(testObject.onDidChange);\n\t\tdidInstallEvent.fire([{ identifier: gallery.identifier, source: gallery, operation: InstallOperation.Install, local: aLocalExtension('a', gallery, gallery), profileLocation: null! }]);\n\t\tawait promise;\n\t\tassert.ok(testObject.enabled);\n\t\tassert.strictEqual(testObject.tooltip, `Please restart extensions to enable this extension.`);\n\t});\n\n\ttest('Test Runtime State when extension is newly installed and ext host restart is not required', async () => {\n\t\tconst onDidChangeExtensionsEmitter = new Emitter<{ added: IExtensionDescription[]; removed: IExtensionDescription[] }>();\n\t\tinstantiationService.stub(IExtensionService, {\n\t\t\textensions: [toExtensionDescription(aLocalExtension('b'))],\n\t\t\tonDidChangeExtensions: onDidChangeExtensionsEmitter.event,\n\t\t\tcanAddExtension: (extension) => true,\n\t\t\twhenInstalledExtensionsRegistered: () => Promise.resolve(true)\n\t\t});\n\t\tconst testObject: ExtensionsActions.ExtensionRuntimeStateAction = disposables.add(instantiationService.createInstance(ExtensionsActions.ExtensionRuntimeStateAction));\n\t\tdisposables.add(instantiationService.createInstance(ExtensionContainers, [testObject]));\n\t\tconst gallery = aGalleryExtension('a');\n\t\tinstantiationService.stubPromise(IExtensionGalleryService, 'query', aPage(gallery));\n\n\t\tconst paged = await instantiationService.get(IExtensionsWorkbenchService).queryGallery(CancellationToken.None);\n\t\ttestObject.extension = paged.firstPage[0];\n\t\tassert.ok(!testObject.enabled);\n\n\t\tinstallEvent.fire({ identifier: gallery.identifier, source: gallery, profileLocation: null! });\n\t\tdidInstallEvent.fire([{ identifier: gallery.identifier, source: gallery, operation: InstallOperation.Install, local: aLocalExtension('a', gallery, gallery), profileLocation: null! }]);\n\t\tassert.ok(!testObject.enabled);\n\t});\n\n\ttest('Test Runtime State when extension is installed and uninstalled', async () => {\n\t\tinstantiationService.stub(IExtensionService, {\n\t\t\textensions: [toExtensionDescription(aLocalExtension('b'))],\n\t\t\tonDidChangeExtensions: Event.None,\n\t\t\tcanRemoveExtension: (extension) => false,\n\t\t\tcanAddExtension: (extension) => false,\n\t\t\twhenInstalledExtensionsRegistered: () => Promise.resolve(true)\n\t\t});\n\t\tconst testObject: ExtensionsActions.ExtensionRuntimeStateAction = disposables.add(instantiationService.createInstance(ExtensionsActions.ExtensionRuntimeStateAction));\n\t\tdisposables.add(instantiationService.createInstance(ExtensionContainers, [testObject]));\n\t\tconst gallery = aGalleryExtension('a');\n\t\tinstantiationService.stubPromise(IExtensionGalleryService, 'query', aPage(gallery));\n\t\tconst paged = await instantiationService.get(IExtensionsWorkbenchService).queryGallery(CancellationToken.None);\n\n\t\ttestObject.extension = paged.firstPage[0];\n\t\tconst identifier = gallery.identifier;\n\t\tinstallEvent.fire({ identifier, source: gallery, profileLocation: null! });\n\t\tdidInstallEvent.fire([{ identifier, source: gallery, operation: InstallOperation.Install, local: aLocalExtension('a', gallery, { identifier }), profileLocation: null! }]);\n\t\tuninstallEvent.fire({ identifier, profileLocation: null! });\n\t\tdidUninstallEvent.fire({ identifier, profileLocation: null! });\n\n\t\tassert.ok(!testObject.enabled);\n\t});\n\n\ttest('Test Runtime State when extension is uninstalled', async () => {\n\t\tinstantiationService.stub(IExtensionService, {\n\t\t\textensions: [toExtensionDescription(aLocalExtension('a', { version: '1.0.0' }))],\n\t\t\tonDidChangeExtensions: Event.None,\n\t\t\tcanRemoveExtension: (extension) => false,\n\t\t\tcanAddExtension: (extension) => false,\n\t\t\twhenInstalledExtensionsRegistered: () => Promise.resolve(true)\n\t\t});\n\t\tinstantiationService.set(IExtensionsWorkbenchService, disposables.add(instantiationService.createInstance(ExtensionsWorkbenchService)));\n\t\tconst testObject: ExtensionsActions.ExtensionRuntimeStateAction = disposables.add(instantiationService.createInstance(ExtensionsActions.ExtensionRuntimeStateAction));\n\t\tdisposables.add(instantiationService.createInstance(ExtensionContainers, [testObject]));\n\t\tconst local = aLocalExtension('a');\n\t\tinstantiationService.stubPromise(IExtensionManagementService, 'getInstalled', [local]);\n\t\tconst extensions = await instantiationService.get(IExtensionsWorkbenchService).queryLocal();\n\t\ttestObject.extension = extensions[0];\n\n\t\tuninstallEvent.fire({ identifier: local.identifier, profileLocation: null! });\n\t\tdidUninstallEvent.fire({ identifier: local.identifier, profileLocation: null! });\n\t\tassert.ok(testObject.enabled);\n\t\tassert.strictEqual(testObject.tooltip, `Please restart extensions to complete the uninstallation of this extension.`);\n\t});\n\n\ttest('Test Runtime State when extension is uninstalled and can be removed', async () => {\n\t\tconst local = aLocalExtension('a');\n\t\tinstantiationService.stub(IExtensionService, {\n\t\t\textensions: [toExtensionDescription(local)],\n\t\t\tonDidChangeExtensions: Event.None,\n\t\t\tcanRemoveExtension: (extension) => true,\n\t\t\tcanAddExtension: (extension) => true,\n\t\t\twhenInstalledExtensionsRegistered: () => Promise.resolve(true)\n\t\t});\n\t\tconst testObject: ExtensionsActions.ExtensionRuntimeStateAction = disposables.add(instantiationService.createInstance(ExtensionsActions.ExtensionRuntimeStateAction));\n\t\tdisposables.add(instantiationService.createInstance(ExtensionContainers, [testObject]));\n\t\tinstantiationService.stubPromise(IExtensionManagementService, 'getInstalled', [local]);\n\t\tconst extensions = await instantiationService.get(IExtensionsWorkbenchService).queryLocal();\n\t\ttestObject.extension = extensions[0];\n\n\t\tuninstallEvent.fire({ identifier: local.identifier, profileLocation: null! });\n\t\tdidUninstallEvent.fire({ identifier: local.identifier, profileLocation: null! });\n\t\tassert.ok(!testObject.enabled);\n\t});\n\n\ttest('Test Runtime State when extension is uninstalled and installed', async () => {\n\t\tinstantiationService.stub(IExtensionService, {\n\t\t\textensions: [toExtensionDescription(aLocalExtension('a', { version: '1.0.0' }))],\n\t\t\tonDidChangeExtensions: Event.None,\n\t\t\tcanRemoveExtension: (extension) => false,\n\t\t\tcanAddExtension: (extension) => false,\n\t\t\twhenInstalledExtensionsRegistered: () => Promise.resolve(true)\n\t\t});\n\t\tconst testObject: ExtensionsActions.ExtensionRuntimeStateAction = disposables.add(instantiationService.createInstance(ExtensionsActions.ExtensionRuntimeStateAction));\n\t\tdisposables.add(instantiationService.createInstance(ExtensionContainers, [testObject]));\n\t\tconst local = aLocalExtension('a');\n\t\tinstantiationService.stubPromise(IExtensionManagementService, 'getInstalled', [local]);\n\t\tconst extensions = await instantiationService.get(IExtensionsWorkbenchService).queryLocal();\n\n\t\ttestObject.extension = extensions[0];\n\t\tuninstallEvent.fire({ identifier: local.identifier, profileLocation: null! });\n\t\tdidUninstallEvent.fire({ identifier: local.identifier, profileLocation: null! });\n\n\t\tconst gallery = aGalleryExtension('a');\n\t\tconst identifier = gallery.identifier;\n\t\tinstallEvent.fire({ identifier, source: gallery, profileLocation: null! });\n\t\tdidInstallEvent.fire([{ identifier, source: gallery, operation: InstallOperation.Install, local, profileLocation: null! }]);\n\n\t\tassert.ok(!testObject.enabled);\n\t});\n\n\ttest('Test Runtime State when extension is updated while running', async () => {\n\t\tinstantiationService.stub(IExtensionService, {\n\t\t\textensions: [toExtensionDescription(aLocalExtension('a', { version: '1.0.1' }))],\n\t\t\tonDidChangeExtensions: Event.None,\n\t\t\tcanRemoveExtension: (extension) => true,\n\t\t\tcanAddExtension: (extension) => false,\n\t\t\twhenInstalledExtensionsRegistered: () => Promise.resolve(true)\n\t\t});\n\t\tinstantiationService.set(IExtensionsWorkbenchService, disposables.add(instantiationService.createInstance(ExtensionsWorkbenchService)));\n\t\tconst testObject: ExtensionsActions.ExtensionRuntimeStateAction = disposables.add(instantiationService.createInstance(ExtensionsActions.ExtensionRuntimeStateAction));\n\t\tdisposables.add(instantiationService.createInstance(ExtensionContainers, [testObject]));\n\t\tconst local = aLocalExtension('a', { version: '1.0.1' });\n\t\tconst workbenchService = instantiationService.get(IExtensionsWorkbenchService);\n\t\tinstantiationService.stubPromise(IExtensionManagementService, 'getInstalled', [local]);\n\t\tconst extensions = await workbenchService.queryLocal();\n\t\ttestObject.extension = extensions[0];\n\n\t\treturn new Promise<void>(c => {\n\t\t\tdisposables.add(testObject.onDidChange(() => {\n\t\t\t\tif (testObject.enabled && testObject.tooltip === `Please restart extensions to enable the updated extension.`) {\n\t\t\t\t\tc();\n\t\t\t\t}\n\t\t\t}));\n\t\t\tconst gallery = aGalleryExtension('a', { uuid: local.identifier.id, version: '1.0.2' });\n\t\t\tinstallEvent.fire({ identifier: gallery.identifier, source: gallery, profileLocation: null! });\n\t\t\tdidInstallEvent.fire([{ identifier: gallery.identifier, source: gallery, operation: InstallOperation.Install, local: aLocalExtension('a', gallery, gallery), profileLocation: null! }]);\n\t\t});\n\t});\n\n\ttest('Test Runtime State when extension is updated when not running', async () => {\n\t\tinstantiationService.stub(IExtensionService, {\n\t\t\textensions: [toExtensionDescription(aLocalExtension('b'))],\n\t\t\tonDidChangeExtensions: Event.None,\n\t\t\tcanRemoveExtension: (extension) => false,\n\t\t\tcanAddExtension: (extension) => false,\n\t\t\twhenInstalledExtensionsRegistered: () => Promise.resolve(true)\n\t\t});\n\t\tconst local = aLocalExtension('a', { version: '1.0.1' });\n\t\tawait instantiationService.get(IWorkbenchExtensionEnablementService).setEnablement([local], EnablementState.DisabledGlobally);\n\t\tconst testObject: ExtensionsActions.ExtensionRuntimeStateAction = disposables.add(instantiationService.createInstance(ExtensionsActions.ExtensionRuntimeStateAction));\n\t\tdisposables.add(instantiationService.createInstance(ExtensionContainers, [testObject]));\n\t\tconst workbenchService = instantiationService.get(IExtensionsWorkbenchService);\n\t\tinstantiationService.stubPromise(IExtensionManagementService, 'getInstalled', [local]);\n\t\tconst extensions = await workbenchService.queryLocal();\n\t\ttestObject.extension = extensions[0];\n\n\t\tconst gallery = aGalleryExtension('a', { identifier: local.identifier, version: '1.0.2' });\n\t\tinstallEvent.fire({ identifier: gallery.identifier, source: gallery, profileLocation: null! });\n\t\tdidInstallEvent.fire([{ identifier: gallery.identifier, source: gallery, operation: InstallOperation.Update, local: aLocalExtension('a', gallery, gallery), profileLocation: null! }]);\n\n\t\tassert.ok(!testObject.enabled);\n\t});\n\n\ttest('Test Runtime State when extension is disabled when running', async () => {\n\t\tinstantiationService.stub(IExtensionService, {\n\t\t\textensions: [toExtensionDescription(aLocalExtension('a'))],\n\t\t\tonDidChangeExtensions: Event.None,\n\t\t\tcanRemoveExtension: (extension) => false,\n\t\t\tcanAddExtension: (extension) => false,\n\t\t\twhenInstalledExtensionsRegistered: () => Promise.resolve(true)\n\t\t});\n\t\tinstantiationService.set(IExtensionsWorkbenchService, disposables.add(instantiationService.createInstance(ExtensionsWorkbenchService)));\n\t\tconst testObject: ExtensionsActions.ExtensionRuntimeStateAction = disposables.add(instantiationService.createInstance(ExtensionsActions.ExtensionRuntimeStateAction));\n\t\tdisposables.add(instantiationService.createInstance(ExtensionContainers, [testObject]));\n\t\tconst local = aLocalExtension('a');\n\t\tconst workbenchService = instantiationService.get(IExtensionsWorkbenchService);\n\t\tinstantiationService.stubPromise(IExtensionManagementService, 'getInstalled', [local]);\n\t\tconst extensions = await workbenchService.queryLocal();\n\t\ttestObject.extension = extensions[0];\n\t\tawait workbenchService.setEnablement(extensions[0], EnablementState.DisabledGlobally);\n\t\tawait testObject.update();\n\n\t\tassert.ok(testObject.enabled);\n\t\tassert.strictEqual(`Please restart extensions to disable this extension.`, testObject.tooltip);\n\t});\n\n\ttest('Test Runtime State when extension enablement is toggled when running', async () => {\n\t\tinstantiationService.stub(IExtensionService, {\n\t\t\textensions: [toExtensionDescription(aLocalExtension('a', { version: '1.0.0' }))],\n\t\t\tonDidChangeExtensions: Event.None,\n\t\t\tcanRemoveExtension: (extension) => false,\n\t\t\tcanAddExtension: (extension) => false,\n\t\t\twhenInstalledExtensionsRegistered: () => Promise.resolve(true)\n\t\t});\n\t\tinstantiationService.set(IExtensionsWorkbenchService, disposables.add(instantiationService.createInstance(ExtensionsWorkbenchService)));\n\t\tconst testObject: ExtensionsActions.ExtensionRuntimeStateAction = disposables.add(instantiationService.createInstance(ExtensionsActions.ExtensionRuntimeStateAction));\n\t\tdisposables.add(instantiationService.createInstance(ExtensionContainers, [testObject]));\n\t\tconst local = aLocalExtension('a');\n\t\tconst workbenchService = instantiationService.get(IExtensionsWorkbenchService);\n\t\tinstantiationService.stubPromise(IExtensionManagementService, 'getInstalled', [local]);\n\t\tconst extensions = await workbenchService.queryLocal();\n\t\ttestObject.extension = extensions[0];\n\t\tawait workbenchService.setEnablement(extensions[0], EnablementState.DisabledGlobally);\n\t\tawait workbenchService.setEnablement(extensions[0], EnablementState.EnabledGlobally);\n\t\tassert.ok(!testObject.enabled);\n\t});\n\n\ttest('Test Runtime State when extension is enabled when not running', async () => {\n\t\tinstantiationService.stub(IExtensionService, {\n\t\t\textensions: [toExtensionDescription(aLocalExtension('b'))],\n\t\t\tonDidChangeExtensions: Event.None,\n\t\t\tcanRemoveExtension: (extension) => false,\n\t\t\tcanAddExtension: (extension) => false,\n\t\t\twhenInstalledExtensionsRegistered: () => Promise.resolve(true)\n\t\t});\n\t\tconst local = aLocalExtension('a');\n\t\tawait instantiationService.get(IWorkbenchExtensionEnablementService).setEnablement([local], EnablementState.DisabledGlobally);\n\t\tconst testObject: ExtensionsActions.ExtensionRuntimeStateAction = disposables.add(instantiationService.createInstance(ExtensionsActions.ExtensionRuntimeStateAction));\n\t\tdisposables.add(instantiationService.createInstance(ExtensionContainers, [testObject]));\n\t\tconst workbenchService = instantiationService.get(IExtensionsWorkbenchService);\n\t\tinstantiationService.stubPromise(IExtensionManagementService, 'getInstalled', [local]);\n\t\tconst extensions = await workbenchService.queryLocal();\n\t\ttestObject.extension = extensions[0];\n\t\tawait workbenchService.setEnablement(extensions[0], EnablementState.EnabledGlobally);\n\t\tawait testObject.update();\n\t\tassert.ok(testObject.enabled);\n\t\tassert.strictEqual(`Please restart extensions to enable this extension.`, testObject.tooltip);\n\t});\n\n\ttest('Test Runtime State when extension enablement is toggled when not running', async () => {\n\t\tinstantiationService.stub(IExtensionService, {\n\t\t\textensions: [toExtensionDescription(aLocalExtension('b'))],\n\t\t\tonDidChangeExtensions: Event.None,\n\t\t\tcanRemoveExtension: (extension) => false,\n\t\t\tcanAddExtension: (extension) => false,\n\t\t\twhenInstalledExtensionsRegistered: () => Promise.resolve(true)\n\t\t});\n\t\tconst local = aLocalExtension('a');\n\t\tawait instantiationService.get(IWorkbenchExtensionEnablementService).setEnablement([local], EnablementState.DisabledGlobally);\n\t\tconst testObject: ExtensionsActions.ExtensionRuntimeStateAction = disposables.add(instantiationService.createInstance(ExtensionsActions.ExtensionRuntimeStateAction));\n\t\tdisposables.add(instantiationService.createInstance(ExtensionContainers, [testObject]));\n\t\tconst workbenchService = instantiationService.get(IExtensionsWorkbenchService);\n\t\tinstantiationService.stubPromise(IExtensionManagementService, 'getInstalled', [local]);\n\t\tconst extensions = await workbenchService.queryLocal();\n\t\ttestObject.extension = extensions[0];\n\t\tawait workbenchService.setEnablement(extensions[0], EnablementState.EnabledGlobally);\n\t\tawait workbenchService.setEnablement(extensions[0], EnablementState.DisabledGlobally);\n\t\tassert.ok(!testObject.enabled);\n\t});\n\n\ttest('Test Runtime State when extension is updated when not running and enabled', async () => {\n\t\tinstantiationService.stub(IExtensionService, {\n\t\t\textensions: [toExtensionDescription(aLocalExtension('a'))],\n\t\t\tonDidChangeExtensions: Event.None,\n\t\t\tcanRemoveExtension: (extension) => false,\n\t\t\tcanAddExtension: (extension) => false,\n\t\t\twhenInstalledExtensionsRegistered: () => Promise.resolve(true)\n\t\t});\n\t\tconst local = aLocalExtension('a', { version: '1.0.1' });\n\t\tawait instantiationService.get(IWorkbenchExtensionEnablementService).setEnablement([local], EnablementState.DisabledGlobally);\n\t\tconst testObject: ExtensionsActions.ExtensionRuntimeStateAction = disposables.add(instantiationService.createInstance(ExtensionsActions.ExtensionRuntimeStateAction));\n\t\tdisposables.add(instantiationService.createInstance(ExtensionContainers, [testObject]));\n\t\tconst workbenchService = instantiationService.get(IExtensionsWorkbenchService);\n\t\tinstantiationService.stubPromise(IExtensionManagementService, 'getInstalled', [local]);\n\t\tconst extensions = await workbenchService.queryLocal();\n\t\ttestObject.extension = extensions[0];\n\n\t\tconst gallery = aGalleryExtension('a', { identifier: local.identifier, version: '1.0.2' });\n\t\tinstallEvent.fire({ identifier: gallery.identifier, source: gallery, profileLocation: null! });\n\t\tdidInstallEvent.fire([{ identifier: gallery.identifier, source: gallery, operation: InstallOperation.Install, local: aLocalExtension('a', gallery, gallery), profileLocation: null! }]);\n\t\tawait workbenchService.setEnablement(extensions[0], EnablementState.EnabledGlobally);\n\t\tawait testObject.update();\n\t\tassert.ok(testObject.enabled);\n\t\tassert.strictEqual(`Please restart extensions to enable this extension.`, testObject.tooltip);\n\t});\n\n\ttest('Test Runtime State when a localization extension is newly installed', async () => {\n\t\tinstantiationService.stub(IExtensionService, {\n\t\t\textensions: [toExtensionDescription(aLocalExtension('b'))],\n\t\t\tonDidChangeExtensions: Event.None,\n\t\t\tcanRemoveExtension: (extension) => false,\n\t\t\tcanAddExtension: (extension) => false,\n\t\t\twhenInstalledExtensionsRegistered: () => Promise.resolve(true)\n\t\t});\n\t\tconst testObject: ExtensionsActions.ExtensionRuntimeStateAction = disposables.add(instantiationService.createInstance(ExtensionsActions.ExtensionRuntimeStateAction));\n\t\tdisposables.add(instantiationService.createInstance(ExtensionContainers, [testObject]));\n\t\tconst gallery = aGalleryExtension('a');\n\t\tinstantiationService.stubPromise(IExtensionGalleryService, 'query', aPage(gallery));\n\n\t\tconst paged = await instantiationService.get(IExtensionsWorkbenchService).queryGallery(CancellationToken.None);\n\t\ttestObject.extension = paged.firstPage[0];\n\t\tassert.ok(!testObject.enabled);\n\n\t\tinstallEvent.fire({ identifier: gallery.identifier, source: gallery, profileLocation: null! });\n\t\tdidInstallEvent.fire([{ identifier: gallery.identifier, source: gallery, operation: InstallOperation.Install, local: aLocalExtension('a', { ...gallery, ...{ contributes: <IExtensionContributions>{ localizations: [{ languageId: 'de', translations: [] }] } } }, gallery), profileLocation: null! }]);\n\t\tassert.ok(!testObject.enabled);\n\t});\n\n\ttest('Test Runtime State when a localization extension is updated while running', async () => {\n\t\tinstantiationService.stub(IExtensionService, {\n\t\t\textensions: [toExtensionDescription(aLocalExtension('a', { version: '1.0.1' }))],\n\t\t\tonDidChangeExtensions: Event.None,\n\t\t\tcanRemoveExtension: (extension) => false,\n\t\t\tcanAddExtension: (extension) => false,\n\t\t\twhenInstalledExtensionsRegistered: () => Promise.resolve(true)\n\t\t});\n\t\tconst testObject: ExtensionsActions.ExtensionRuntimeStateAction = disposables.add(instantiationService.createInstance(ExtensionsActions.ExtensionRuntimeStateAction));\n\t\tdisposables.add(instantiationService.createInstance(ExtensionContainers, [testObject]));\n\t\tconst local = aLocalExtension('a', { version: '1.0.1', contributes: <IExtensionContributions>{ localizations: [{ languageId: 'de', translations: [] }] } });\n\t\tconst workbenchService = instantiationService.get(IExtensionsWorkbenchService);\n\t\tinstantiationService.stubPromise(IExtensionManagementService, 'getInstalled', [local]);\n\t\tconst extensions = await workbenchService.queryLocal();\n\t\ttestObject.extension = extensions[0];\n\n\t\tconst gallery = aGalleryExtension('a', { uuid: local.identifier.id, version: '1.0.2' });\n\t\tinstallEvent.fire({ identifier: gallery.identifier, source: gallery, profileLocation: null! });\n\t\tdidInstallEvent.fire([{ identifier: gallery.identifier, source: gallery, operation: InstallOperation.Install, local: aLocalExtension('a', { ...gallery, ...{ contributes: <IExtensionContributions>{ localizations: [{ languageId: 'de', translations: [] }] } } }, gallery), profileLocation: null! }]);\n\t\tassert.ok(!testObject.enabled);\n\t});\n\n\ttest('Test Runtime State when extension is not installed but extension from different server is installed and running', async () => {\n\t\t// multi server setup\n\t\tconst gallery = aGalleryExtension('a');\n\t\tconst localExtension = aLocalExtension('a', { extensionKind: ['workspace'] }, { location: URI.file('pub.a') });\n\t\tconst remoteExtension = aLocalExtension('a', { extensionKind: ['workspace'] }, { location: URI.file('pub.a').with({ scheme: Schemas.vscodeRemote }) });\n\t\tconst extensionManagementServerService = aMultiExtensionManagementServerService(instantiationService, createExtensionManagementService([localExtension]), createExtensionManagementService([remoteExtension]));\n\t\tinstantiationService.stub(IExtensionManagementServerService, extensionManagementServerService);\n\t\tinstantiationService.stub(IWorkbenchExtensionEnablementService, disposables.add(new TestExtensionEnablementService(instantiationService)));\n\t\tconst onDidChangeExtensionsEmitter = new Emitter<{ added: IExtensionDescription[]; removed: IExtensionDescription[] }>();\n\t\tinstantiationService.stub(IExtensionService, {\n\t\t\textensions: [toExtensionDescription(remoteExtension)],\n\t\t\tonDidChangeExtensions: onDidChangeExtensionsEmitter.event,\n\t\t\tcanAddExtension: (extension) => false,\n\t\t\twhenInstalledExtensionsRegistered: () => Promise.resolve(true)\n\t\t});\n\t\tconst workbenchService: IExtensionsWorkbenchService = disposables.add(instantiationService.createInstance(ExtensionsWorkbenchService));\n\t\tinstantiationService.set(IExtensionsWorkbenchService, workbenchService);\n\n\t\tconst testObject: ExtensionsActions.ExtensionRuntimeStateAction = disposables.add(instantiationService.createInstance(ExtensionsActions.ExtensionRuntimeStateAction));\n\t\tdisposables.add(instantiationService.createInstance(ExtensionContainers, [testObject]));\n\t\tinstantiationService.stubPromise(IExtensionGalleryService, 'query', aPage(gallery));\n\n\t\tawait workbenchService.queryGallery(CancellationToken.None);\n\t\tconst extensions = await workbenchService.queryLocal(extensionManagementServerService.localExtensionManagementServer!);\n\t\ttestObject.extension = extensions[0];\n\t\tassert.ok(testObject.extension);\n\t\tassert.ok(!testObject.enabled);\n\t});\n\n\ttest('Test Runtime State when extension is uninstalled but extension from different server is installed and running', async () => {\n\t\t// multi server setup\n\t\tconst gallery = aGalleryExtension('a');\n\t\tconst localExtension = aLocalExtension('a', { extensionKind: ['workspace'] }, { location: URI.file('pub.a') });\n\t\tconst remoteExtension = aLocalExtension('a', { extensionKind: ['workspace'] }, { location: URI.file('pub.a').with({ scheme: Schemas.vscodeRemote }) });\n\t\tconst localExtensionManagementService = createExtensionManagementService([localExtension]);\n\t\tconst uninstallEvent = new Emitter<UninstallExtensionEvent>();\n\t\tconst onDidUninstallEvent = new Emitter<{ identifier: IExtensionIdentifier; profileLocation: URI }>();\n\t\tlocalExtensionManagementService.onUninstallExtension = uninstallEvent.event;\n\t\tlocalExtensionManagementService.onDidUninstallExtension = onDidUninstallEvent.event;\n\t\tconst extensionManagementServerService = aMultiExtensionManagementServerService(instantiationService, localExtensionManagementService, createExtensionManagementService([remoteExtension]));\n\t\tinstantiationService.stub(IExtensionManagementServerService, extensionManagementServerService);\n\t\tinstantiationService.stub(IWorkbenchExtensionEnablementService, disposables.add(new TestExtensionEnablementService(instantiationService)));\n\t\tconst onDidChangeExtensionsEmitter = new Emitter<{ added: IExtensionDescription[]; removed: IExtensionDescription[] }>();\n\t\tinstantiationService.stub(IExtensionService, {\n\t\t\textensions: [toExtensionDescription(remoteExtension)],\n\t\t\tonDidChangeExtensions: onDidChangeExtensionsEmitter.event,\n\t\t\tcanAddExtension: (extension) => false,\n\t\t\twhenInstalledExtensionsRegistered: () => Promise.resolve(true)\n\t\t});\n\t\tconst workbenchService: IExtensionsWorkbenchService = disposables.add(instantiationService.createInstance(ExtensionsWorkbenchService));\n\t\tinstantiationService.set(IExtensionsWorkbenchService, workbenchService);\n\n\t\tconst testObject: ExtensionsActions.ExtensionRuntimeStateAction = disposables.add(instantiationService.createInstance(ExtensionsActions.ExtensionRuntimeStateAction));\n\t\tdisposables.add(instantiationService.createInstance(ExtensionContainers, [testObject]));\n\t\tinstantiationService.stubPromise(IExtensionGalleryService, 'query', aPage(gallery));\n\n\t\tawait workbenchService.queryGallery(CancellationToken.None);\n\t\tconst extensions = await workbenchService.queryLocal(extensionManagementServerService.localExtensionManagementServer!);\n\t\ttestObject.extension = extensions[0];\n\t\tassert.ok(testObject.extension);\n\t\tassert.ok(!testObject.enabled);\n\n\t\tuninstallEvent.fire({ identifier: localExtension.identifier, profileLocation: null! });\n\t\tdidUninstallEvent.fire({ identifier: localExtension.identifier, profileLocation: null! });\n\n\t\tassert.ok(!testObject.enabled);\n\t});\n\n\ttest('Test Runtime State when workspace extension is disabled on local server and installed in remote server', async () => {\n\t\t// multi server setup\n\t\tconst gallery = aGalleryExtension('a');\n\t\tconst remoteExtensionManagementService = createExtensionManagementService([]);\n\t\tconst onDidInstallEvent = new Emitter<readonly InstallExtensionResult[]>();\n\t\tremoteExtensionManagementService.onDidInstallExtensions = onDidInstallEvent.event;\n\t\tconst localExtension = aLocalExtension('a', { extensionKind: ['workspace'] }, { location: URI.file('pub.a') });\n\t\tconst extensionManagementServerService = aMultiExtensionManagementServerService(instantiationService, createExtensionManagementService([localExtension]), remoteExtensionManagementService);\n\t\tinstantiationService.stub(IExtensionManagementServerService, extensionManagementServerService);\n\t\tinstantiationService.stub(IWorkbenchExtensionEnablementService, disposables.add(new TestExtensionEnablementService(instantiationService)));\n\t\tconst workbenchService: IExtensionsWorkbenchService = disposables.add(instantiationService.createInstance(ExtensionsWorkbenchService));\n\t\tinstantiationService.set(IExtensionsWorkbenchService, workbenchService);\n\n\t\tconst onDidChangeExtensionsEmitter = new Emitter<{ added: IExtensionDescription[]; removed: IExtensionDescription[] }>();\n\t\tinstantiationService.stub(IExtensionService, {\n\t\t\textensions: [],\n\t\t\tonDidChangeExtensions: onDidChangeExtensionsEmitter.event,\n\t\t\tcanAddExtension: (extension) => false,\n\t\t\twhenInstalledExtensionsRegistered: () => Promise.resolve(true)\n\t\t});\n\t\tconst testObject: ExtensionsActions.ExtensionRuntimeStateAction = disposables.add(instantiationService.createInstance(ExtensionsActions.ExtensionRuntimeStateAction));\n\t\tdisposables.add(instantiationService.createInstance(ExtensionContainers, [testObject]));\n\t\tinstantiationService.stubPromise(IExtensionGalleryService, 'query', aPage(gallery));\n\n\t\tawait workbenchService.queryGallery(CancellationToken.None);\n\t\tconst extensions = await workbenchService.queryLocal(extensionManagementServerService.localExtensionManagementServer!);\n\t\ttestObject.extension = extensions[0];\n\t\tassert.ok(testObject.extension);\n\t\tassert.ok(!testObject.enabled);\n\n\t\tconst remoteExtension = aLocalExtension('a', { extensionKind: ['workspace'] }, { location: URI.file('pub.a').with({ scheme: Schemas.vscodeRemote }) });\n\t\tconst promise = Event.toPromise(testObject.onDidChange);\n\t\tonDidInstallEvent.fire([{ identifier: remoteExtension.identifier, local: remoteExtension, operation: InstallOperation.Install, profileLocation: null! }]);\n\n\t\tawait promise;\n\t\tassert.ok(testObject.enabled);\n\t\tassert.strictEqual(testObject.tooltip, `Please reload window to enable this extension.`);\n\t});\n\n\ttest('Test Runtime State when ui extension is disabled on remote server and installed in local server', async () => {\n\t\t// multi server setup\n\t\tconst gallery = aGalleryExtension('a');\n\t\tconst localExtensionManagementService = createExtensionManagementService([]);\n\t\tconst onDidInstallEvent = new Emitter<readonly InstallExtensionResult[]>();\n\t\tlocalExtensionManagementService.onDidInstallExtensions = onDidInstallEvent.event;\n\t\tconst remoteExtension = aLocalExtension('a', { extensionKind: ['ui'] }, { location: URI.file('pub.a').with({ scheme: Schemas.vscodeRemote }) });\n\t\tconst extensionManagementServerService = aMultiExtensionManagementServerService(instantiationService, localExtensionManagementService, createExtensionManagementService([remoteExtension]));\n\t\tinstantiationService.stub(IExtensionManagementServerService, extensionManagementServerService);\n\t\tinstantiationService.stub(IWorkbenchExtensionEnablementService, disposables.add(new TestExtensionEnablementService(instantiationService)));\n\t\tconst workbenchService: IExtensionsWorkbenchService = disposables.add(instantiationService.createInstance(ExtensionsWorkbenchService));\n\t\tinstantiationService.set(IExtensionsWorkbenchService, workbenchService);\n\n\t\tconst onDidChangeExtensionsEmitter = new Emitter<{ added: IExtensionDescription[]; removed: IExtensionDescription[] }>();\n\t\tinstantiationService.stub(IExtensionService, {\n\t\t\textensions: [],\n\t\t\tonDidChangeExtensions: onDidChangeExtensionsEmitter.event,\n\t\t\tcanAddExtension: (extension) => false,\n\t\t\twhenInstalledExtensionsRegistered: () => Promise.resolve(true)\n\t\t});\n\t\tconst testObject: ExtensionsActions.ExtensionRuntimeStateAction = disposables.add(instantiationService.createInstance(ExtensionsActions.ExtensionRuntimeStateAction));\n\t\tdisposables.add(instantiationService.createInstance(ExtensionContainers, [testObject]));\n\t\tinstantiationService.stubPromise(IExtensionGalleryService, 'query', aPage(gallery));\n\n\t\tawait workbenchService.queryGallery(CancellationToken.None);\n\t\tconst extensions = await workbenchService.queryLocal(extensionManagementServerService.remoteExtensionManagementServer!);\n\t\ttestObject.extension = extensions[0];\n\t\tassert.ok(testObject.extension);\n\t\tassert.ok(!testObject.enabled);\n\n\t\tconst localExtension = aLocalExtension('a', { extensionKind: ['ui'] }, { location: URI.file('pub.a') });\n\t\tconst promise = Event.toPromise(Event.filter(testObject.onDidChange, () => testObject.enabled));\n\t\tonDidInstallEvent.fire([{ identifier: localExtension.identifier, local: localExtension, operation: InstallOperation.Install, profileLocation: null! }]);\n\n\t\tawait promise;\n\t\tassert.ok(testObject.enabled);\n\t\tassert.strictEqual(testObject.tooltip, `Please reload window to enable this extension.`);\n\t});\n\n\ttest('Test Runtime State for remote ui extension is disabled when it is installed and enabled in local server', async () => {\n\t\t// multi server setup\n\t\tconst gallery = aGalleryExtension('a');\n\t\tconst localExtension = aLocalExtension('a', { extensionKind: ['ui'] }, { location: URI.file('pub.a') });\n\t\tconst localExtensionManagementService = createExtensionManagementService([localExtension]);\n\t\tconst onDidInstallEvent = new Emitter<readonly InstallExtensionResult[]>();\n\t\tlocalExtensionManagementService.onDidInstallExtensions = onDidInstallEvent.event;\n\t\tconst remoteExtension = aLocalExtension('a', { extensionKind: ['ui'] }, { location: URI.file('pub.a').with({ scheme: Schemas.vscodeRemote }) });\n\t\tconst extensionManagementServerService = aMultiExtensionManagementServerService(instantiationService, localExtensionManagementService, createExtensionManagementService([remoteExtension]));\n\t\tinstantiationService.stub(IExtensionManagementServerService, extensionManagementServerService);\n\t\tinstantiationService.stub(IWorkbenchExtensionEnablementService, disposables.add(new TestExtensionEnablementService(instantiationService)));\n\t\tconst onDidChangeExtensionsEmitter = new Emitter<{ added: IExtensionDescription[]; removed: IExtensionDescription[] }>();\n\t\tinstantiationService.stub(IExtensionService, {\n\t\t\textensions: [toExtensionDescription(localExtension)],\n\t\t\tonDidChangeExtensions: onDidChangeExtensionsEmitter.event,\n\t\t\tcanAddExtension: (extension) => false,\n\t\t\twhenInstalledExtensionsRegistered: () => Promise.resolve(true)\n\t\t});\n\t\tconst workbenchService: IExtensionsWorkbenchService = disposables.add(instantiationService.createInstance(ExtensionsWorkbenchService));\n\t\tinstantiationService.set(IExtensionsWorkbenchService, workbenchService);\n\n\t\tconst testObject: ExtensionsActions.ExtensionRuntimeStateAction = disposables.add(instantiationService.createInstance(ExtensionsActions.ExtensionRuntimeStateAction));\n\t\tdisposables.add(instantiationService.createInstance(ExtensionContainers, [testObject]));\n\t\tinstantiationService.stubPromise(IExtensionGalleryService, 'query', aPage(gallery));\n\n\t\tawait workbenchService.queryGallery(CancellationToken.None);\n\t\tconst extensions = await workbenchService.queryLocal(extensionManagementServerService.remoteExtensionManagementServer!);\n\t\ttestObject.extension = extensions[0];\n\t\tassert.ok(testObject.extension);\n\t\tassert.ok(!testObject.enabled);\n\t});\n\n\ttest('Test Runtime State for remote workspace+ui extension is enabled when it is installed and enabled in local server', async () => {\n\t\t// multi server setup\n\t\tconst gallery = aGalleryExtension('a');\n\t\tconst localExtension = aLocalExtension('a', { extensionKind: ['workspace', 'ui'] }, { location: URI.file('pub.a') });\n\t\tconst localExtensionManagementService = createExtensionManagementService([localExtension]);\n\t\tconst onDidInstallEvent = new Emitter<readonly InstallExtensionResult[]>();\n\t\tlocalExtensionManagementService.onDidInstallExtensions = onDidInstallEvent.event;\n\t\tconst remoteExtension = aLocalExtension('a', { extensionKind: ['workspace', 'ui'] }, { location: URI.file('pub.a').with({ scheme: Schemas.vscodeRemote }) });\n\t\tconst extensionManagementServerService = aMultiExtensionManagementServerService(instantiationService, localExtensionManagementService, createExtensionManagementService([remoteExtension]));\n\t\tinstantiationService.stub(IExtensionManagementServerService, extensionManagementServerService);\n\t\tinstantiationService.stub(IWorkbenchExtensionEnablementService, disposables.add(new TestExtensionEnablementService(instantiationService)));\n\t\tconst workbenchService: IExtensionsWorkbenchService = disposables.add(instantiationService.createInstance(ExtensionsWorkbenchService));\n\t\tinstantiationService.set(IExtensionsWorkbenchService, workbenchService);\n\n\t\tconst onDidChangeExtensionsEmitter = new Emitter<{ added: IExtensionDescription[]; removed: IExtensionDescription[] }>();\n\t\tinstantiationService.stub(IExtensionService, {\n\t\t\textensions: [toExtensionDescription(localExtension)],\n\t\t\tonDidChangeExtensions: onDidChangeExtensionsEmitter.event,\n\t\t\tcanAddExtension: (extension) => false,\n\t\t\twhenInstalledExtensionsRegistered: () => Promise.resolve(true)\n\t\t});\n\t\tconst testObject: ExtensionsActions.ExtensionRuntimeStateAction = disposables.add(instantiationService.createInstance(ExtensionsActions.ExtensionRuntimeStateAction));\n\t\tdisposables.add(instantiationService.createInstance(ExtensionContainers, [testObject]));\n\t\tinstantiationService.stubPromise(IExtensionGalleryService, 'query', aPage(gallery));\n\n\t\tawait workbenchService.queryGallery(CancellationToken.None);\n\t\tconst extensions = await workbenchService.queryLocal(extensionManagementServerService.remoteExtensionManagementServer!);\n\t\ttestObject.extension = extensions[0];\n\t\tassert.ok(testObject.extension);\n\t\tassert.ok(testObject.enabled);\n\t});\n\n\ttest('Test Runtime State for local ui+workspace extension is enabled when it is installed and enabled in remote server', async () => {\n\t\t// multi server setup\n\t\tconst gallery = aGalleryExtension('a');\n\t\tconst localExtension = aLocalExtension('a', { extensionKind: ['ui', 'workspace'] }, { location: URI.file('pub.a') });\n\t\tconst remoteExtension = aLocalExtension('a', { extensionKind: ['ui', 'workspace'] }, { location: URI.file('pub.a').with({ scheme: Schemas.vscodeRemote }) });\n\t\tconst remoteExtensionManagementService = createExtensionManagementService([remoteExtension]);\n\t\tconst onDidInstallEvent = new Emitter<readonly InstallExtensionResult[]>();\n\t\tremoteExtensionManagementService.onDidInstallExtensions = onDidInstallEvent.event;\n\t\tconst extensionManagementServerService = aMultiExtensionManagementServerService(instantiationService, createExtensionManagementService([localExtension]), remoteExtensionManagementService);\n\t\tinstantiationService.stub(IExtensionManagementServerService, extensionManagementServerService);\n\t\tinstantiationService.stub(IWorkbenchExtensionEnablementService, disposables.add(new TestExtensionEnablementService(instantiationService)));\n\t\tconst workbenchService: IExtensionsWorkbenchService = disposables.add(instantiationService.createInstance(ExtensionsWorkbenchService));\n\t\tinstantiationService.set(IExtensionsWorkbenchService, workbenchService);\n\n\t\tconst onDidChangeExtensionsEmitter = new Emitter<{ added: IExtensionDescription[]; removed: IExtensionDescription[] }>();\n\t\tinstantiationService.stub(IExtensionService, {\n\t\t\textensions: [toExtensionDescription(remoteExtension)],\n\t\t\tonDidChangeExtensions: onDidChangeExtensionsEmitter.event,\n\t\t\tcanAddExtension: (extension) => false,\n\t\t\twhenInstalledExtensionsRegistered: () => Promise.resolve(true)\n\t\t});\n\t\tconst testObject: ExtensionsActions.ExtensionRuntimeStateAction = disposables.add(instantiationService.createInstance(ExtensionsActions.ExtensionRuntimeStateAction));\n\t\tdisposables.add(instantiationService.createInstance(ExtensionContainers, [testObject]));\n\t\tinstantiationService.stubPromise(IExtensionGalleryService, 'query', aPage(gallery));\n\n\t\tawait workbenchService.queryGallery(CancellationToken.None);\n\t\tconst extensions = await workbenchService.queryLocal(extensionManagementServerService.localExtensionManagementServer!);\n\t\ttestObject.extension = extensions[0];\n\t\tassert.ok(testObject.extension);\n\t\tassert.ok(testObject.enabled);\n\t});\n\n\ttest('Test Runtime State for local workspace+ui extension is enabled when it is installed in both servers but running in local server', async () => {\n\t\t// multi server setup\n\t\tconst gallery = aGalleryExtension('a');\n\t\tconst localExtension = aLocalExtension('a', { extensionKind: ['workspace', 'ui'] }, { location: URI.file('pub.a') });\n\t\tconst localExtensionManagementService = createExtensionManagementService([localExtension]);\n\t\tconst onDidInstallEvent = new Emitter<readonly InstallExtensionResult[]>();\n\t\tlocalExtensionManagementService.onDidInstallExtensions = onDidInstallEvent.event;\n\t\tconst remoteExtension = aLocalExtension('a', { extensionKind: ['workspace', 'ui'] }, { location: URI.file('pub.a').with({ scheme: Schemas.vscodeRemote }) });\n\t\tconst extensionManagementServerService = aMultiExtensionManagementServerService(instantiationService, localExtensionManagementService, createExtensionManagementService([remoteExtension]));\n\t\tinstantiationService.stub(IExtensionManagementServerService, extensionManagementServerService);\n\t\tinstantiationService.stub(IWorkbenchExtensionEnablementService, disposables.add(new TestExtensionEnablementService(instantiationService)));\n\t\tconst workbenchService: IExtensionsWorkbenchService = disposables.add(instantiationService.createInstance(ExtensionsWorkbenchService));\n\t\tinstantiationService.set(IExtensionsWorkbenchService, workbenchService);\n\n\t\tconst onDidChangeExtensionsEmitter = new Emitter<{ added: IExtensionDescription[]; removed: IExtensionDescription[] }>();\n\t\tinstantiationService.stub(IExtensionService, {\n\t\t\textensions: [toExtensionDescription(localExtension)],\n\t\t\tonDidChangeExtensions: onDidChangeExtensionsEmitter.event,\n\t\t\tcanAddExtension: (extension) => false,\n\t\t\twhenInstalledExtensionsRegistered: () => Promise.resolve(true)\n\t\t});\n\t\tconst testObject: ExtensionsActions.ExtensionRuntimeStateAction = disposables.add(instantiationService.createInstance(ExtensionsActions.ExtensionRuntimeStateAction));\n\t\tdisposables.add(instantiationService.createInstance(ExtensionContainers, [testObject]));\n\t\tinstantiationService.stubPromise(IExtensionGalleryService, 'query', aPage(gallery));\n\n\t\tawait workbenchService.queryGallery(CancellationToken.None);\n\t\tconst extensions = await workbenchService.queryLocal(extensionManagementServerService.localExtensionManagementServer!);\n\t\ttestObject.extension = extensions[0];\n\t\tassert.ok(testObject.extension);\n\t\tassert.ok(testObject.enabled);\n\t});\n\n\ttest('Test Runtime State for remote ui+workspace extension is enabled when it is installed on both servers but running in remote server', async () => {\n\t\t// multi server setup\n\t\tconst gallery = aGalleryExtension('a');\n\t\tconst localExtension = aLocalExtension('a', { extensionKind: ['ui', 'workspace'] }, { location: URI.file('pub.a') });\n\t\tconst remoteExtension = aLocalExtension('a', { extensionKind: ['ui', 'workspace'] }, { location: URI.file('pub.a').with({ scheme: Schemas.vscodeRemote }) });\n\t\tconst remoteExtensionManagementService = createExtensionManagementService([remoteExtension]);\n\t\tconst onDidInstallEvent = new Emitter<readonly InstallExtensionResult[]>();\n\t\tremoteExtensionManagementService.onDidInstallExtensions = onDidInstallEvent.event;\n\t\tconst extensionManagementServerService = aMultiExtensionManagementServerService(instantiationService, createExtensionManagementService([localExtension]), remoteExtensionManagementService);\n\t\tinstantiationService.stub(IExtensionManagementServerService, extensionManagementServerService);\n\t\tinstantiationService.stub(IWorkbenchExtensionEnablementService, disposables.add(new TestExtensionEnablementService(instantiationService)));\n\t\tconst workbenchService: IExtensionsWorkbenchService = disposables.add(instantiationService.createInstance(ExtensionsWorkbenchService));\n\t\tinstantiationService.set(IExtensionsWorkbenchService, workbenchService);\n\n\t\tconst onDidChangeExtensionsEmitter = new Emitter<{ added: IExtensionDescription[]; removed: IExtensionDescription[] }>();\n\t\tinstantiationService.stub(IExtensionService, {\n\t\t\textensions: [toExtensionDescription(remoteExtension)],\n\t\t\tonDidChangeExtensions: onDidChangeExtensionsEmitter.event,\n\t\t\tcanAddExtension: (extension) => false,\n\t\t\twhenInstalledExtensionsRegistered: () => Promise.resolve(true)\n\t\t});\n\t\tconst testObject: ExtensionsActions.ExtensionRuntimeStateAction = disposables.add(instantiationService.createInstance(ExtensionsActions.ExtensionRuntimeStateAction));\n\t\tdisposables.add(instantiationService.createInstance(ExtensionContainers, [testObject]));\n\t\tinstantiationService.stubPromise(IExtensionGalleryService, 'query', aPage(gallery));\n\n\t\tawait workbenchService.queryGallery(CancellationToken.None);\n\t\tconst extensions = await workbenchService.queryLocal(extensionManagementServerService.remoteExtensionManagementServer!);\n\t\ttestObject.extension = extensions[0];\n\t\tassert.ok(testObject.extension);\n\t\tassert.ok(testObject.enabled);\n\t});\n\n\ttest('Test Runtime State when ui+workspace+web extension is installed in web and remote and running in remote', async () => {\n\t\t// multi server setup\n\t\tconst gallery = aGalleryExtension('a');\n\t\tconst webExtension = aLocalExtension('a', { extensionKind: ['ui', 'workspace'], 'browser': 'browser.js' }, { location: URI.file('pub.a').with({ scheme: Schemas.vscodeUserData }) });\n\t\tconst remoteExtension = aLocalExtension('a', { extensionKind: ['ui', 'workspace'], 'browser': 'browser.js' }, { location: URI.file('pub.a').with({ scheme: Schemas.vscodeRemote }) });\n\t\tconst extensionManagementServerService = aMultiExtensionManagementServerService(instantiationService, null, createExtensionManagementService([remoteExtension]), createExtensionManagementService([webExtension]));\n\t\tinstantiationService.stub(IExtensionManagementServerService, extensionManagementServerService);\n\t\tinstantiationService.stub(IWorkbenchExtensionEnablementService, disposables.add(new TestExtensionEnablementService(instantiationService)));\n\t\tinstantiationService.stub(IExtensionService, {\n\t\t\textensions: [toExtensionDescription(remoteExtension)],\n\t\t\tonDidChangeExtensions: Event.None,\n\t\t\tcanAddExtension: (extension) => false,\n\t\t\twhenInstalledExtensionsRegistered: () => Promise.resolve(true)\n\t\t});\n\t\tconst workbenchService: IExtensionsWorkbenchService = disposables.add(instantiationService.createInstance(ExtensionsWorkbenchService));\n\t\tinstantiationService.set(IExtensionsWorkbenchService, workbenchService);\n\n\t\tconst testObject: ExtensionsActions.ExtensionRuntimeStateAction = disposables.add(instantiationService.createInstance(ExtensionsActions.ExtensionRuntimeStateAction));\n\t\tdisposables.add(instantiationService.createInstance(ExtensionContainers, [testObject]));\n\t\tinstantiationService.stubPromise(IExtensionGalleryService, 'query', aPage(gallery));\n\n\t\tawait workbenchService.queryGallery(CancellationToken.None);\n\t\tconst extensions = await workbenchService.queryLocal(extensionManagementServerService.remoteExtensionManagementServer!);\n\t\ttestObject.extension = extensions[0];\n\t\tassert.ok(testObject.extension);\n\t\tassert.ok(!testObject.enabled);\n\t});\n\n\ttest('Test Runtime State when workspace+ui+web extension is installed in web and local and running in local', async () => {\n\t\t// multi server setup\n\t\tconst gallery = aGalleryExtension('a');\n\t\tconst webExtension = aLocalExtension('a', { extensionKind: ['workspace', 'ui'], 'browser': 'browser.js' }, { location: URI.file('pub.a').with({ scheme: Schemas.vscodeUserData }) });\n\t\tconst localExtension = aLocalExtension('a', { extensionKind: ['workspace', 'ui'], 'browser': 'browser.js' }, { location: URI.file('pub.a') });\n\t\tconst extensionManagementServerService = aMultiExtensionManagementServerService(instantiationService, createExtensionManagementService([localExtension]), null, createExtensionManagementService([webExtension]));\n\t\tinstantiationService.stub(IExtensionManagementServerService, extensionManagementServerService);\n\t\tinstantiationService.stub(IWorkbenchExtensionEnablementService, disposables.add(new TestExtensionEnablementService(instantiationService)));\n\t\tinstantiationService.stub(IExtensionService, {\n\t\t\textensions: [toExtensionDescription(localExtension)],\n\t\t\tonDidChangeExtensions: Event.None,\n\t\t\tcanAddExtension: (extension) => false,\n\t\t\twhenInstalledExtensionsRegistered: () => Promise.resolve(true)\n\t\t});\n\t\tconst workbenchService: IExtensionsWorkbenchService = disposables.add(instantiationService.createInstance(ExtensionsWorkbenchService));\n\t\tinstantiationService.set(IExtensionsWorkbenchService, workbenchService);\n\n\t\tconst testObject: ExtensionsActions.ExtensionRuntimeStateAction = disposables.add(instantiationService.createInstance(ExtensionsActions.ExtensionRuntimeStateAction));\n\t\tdisposables.add(instantiationService.createInstance(ExtensionContainers, [testObject]));\n\t\tinstantiationService.stubPromise(IExtensionGalleryService, 'query', aPage(gallery));\n\n\t\tawait workbenchService.queryGallery(CancellationToken.None);\n\t\tconst extensions = await workbenchService.queryLocal(extensionManagementServerService.remoteExtensionManagementServer!);\n\t\ttestObject.extension = extensions[0];\n\t\tassert.ok(testObject.extension);\n\t\tassert.ok(!testObject.enabled);\n\t});\n});\n\nsuite('RemoteInstallAction', () => {\n\n\tconst disposables = ensureNoDisposablesAreLeakedInTestSuite();\n\n\tsetup(() => setupTest(disposables));\n\n\ttest('Test remote install action is enabled for local workspace extension', async () => {\n\t\t// multi server setup\n\t\tconst localWorkspaceExtension = aLocalExtension('a', { extensionKind: ['workspace'] }, { location: URI.file(`pub.a`) });\n\t\tconst extensionManagementServerService = aMultiExtensionManagementServerService(instantiationService, createExtensionManagementService([localWorkspaceExtension]));\n\t\tinstantiationService.stub(IExtensionManagementServerService, extensionManagementServerService);\n\t\tinstantiationService.stub(IWorkbenchExtensionEnablementService, disposables.add(new TestExtensionEnablementService(instantiationService)));\n\t\tconst workbenchService: IExtensionsWorkbenchService = disposables.add(instantiationService.createInstance(ExtensionsWorkbenchService));\n\t\tinstantiationService.set(IExtensionsWorkbenchService, workbenchService);\n\n\t\tinstantiationService.stubPromise(IExtensionGalleryService, 'query', aPage(aGalleryExtension('a', { identifier: localWorkspaceExtension.identifier })));\n\t\tconst testObject = disposables.add(instantiationService.createInstance(ExtensionsActions.RemoteInstallAction, false));\n\t\tdisposables.add(instantiationService.createInstance(ExtensionContainers, [testObject]));\n\n\t\tconst extensions = await workbenchService.queryLocal(extensionManagementServerService.localExtensionManagementServer!);\n\t\tawait workbenchService.queryGallery(CancellationToken.None);\n\t\ttestObject.extension = extensions[0];\n\t\tassert.ok(testObject.enabled);\n\t\tassert.strictEqual('Install in remote', testObject.label);\n\t\tassert.strictEqual('extension-action label prominent install-other-server', testObject.class);\n\t});\n\n\ttest('Test remote install action when installing local workspace extension', async () => {\n\t\t// multi server setup\n\t\tconst remoteExtensionManagementService = createExtensionManagementService();\n\t\tconst onInstallExtension = new Emitter<InstallExtensionEvent>();\n\t\tremoteExtensionManagementService.onInstallExtension = onInstallExtension.event;\n\t\tconst localWorkspaceExtension = aLocalExtension('a', { extensionKind: ['workspace'] }, { location: URI.file(`pub.a`) });\n\t\tconst extensionManagementServerService = aMultiExtensionManagementServerService(instantiationService, createExtensionManagementService([localWorkspaceExtension]), remoteExtensionManagementService);\n\t\tinstantiationService.stub(IExtensionManagementServerService, extensionManagementServerService);\n\t\tinstantiationService.stub(IWorkbenchExtensionEnablementService, disposables.add(new TestExtensionEnablementService(instantiationService)));\n\t\tconst workbenchService: IExtensionsWorkbenchService = disposables.add(instantiationService.createInstance(ExtensionsWorkbenchService));\n\t\tinstantiationService.stub(IExtensionsWorkbenchService, workbenchService, 'open', undefined);\n\t\tinstantiationService.set(IExtensionsWorkbenchService, workbenchService);\n\n\t\tconst gallery = aGalleryExtension('a', { identifier: localWorkspaceExtension.identifier });\n\t\tinstantiationService.stubPromise(IExtensionGalleryService, 'query', aPage(gallery));\n\t\tconst testObject = disposables.add(instantiationService.createInstance(ExtensionsActions.RemoteInstallAction, false));\n\t\tdisposables.add(instantiationService.createInstance(ExtensionContainers, [testObject]));\n\n\t\tconst extensions = await workbenchService.queryLocal(extensionManagementServerService.localExtensionManagementServer!);\n\t\tawait workbenchService.queryGallery(CancellationToken.None);\n\t\ttestObject.extension = extensions[0];\n\t\tassert.ok(testObject.enabled);\n\t\tassert.strictEqual('Install in remote', testObject.label);\n\t\tassert.strictEqual('extension-action label prominent install-other-server', testObject.class);\n\n\t\tonInstallExtension.fire({ identifier: localWorkspaceExtension.identifier, source: gallery, profileLocation: null! });\n\t\tassert.ok(testObject.enabled);\n\t\tassert.strictEqual('Installing', testObject.label);\n\t\tassert.strictEqual('extension-action label install-other-server installing', testObject.class);\n\t});\n\n\ttest('Test remote install action when installing local workspace extension is finished', async () => {\n\t\t// multi server setup\n\t\tconst remoteExtensionManagementService = createExtensionManagementService();\n\t\tconst onInstallExtension = new Emitter<InstallExtensionEvent>();\n\t\tremoteExtensionManagementService.onInstallExtension = onInstallExtension.event;\n\t\tconst onDidInstallEvent = new Emitter<readonly InstallExtensionResult[]>();\n\t\tremoteExtensionManagementService.onDidInstallExtensions = onDidInstallEvent.event;\n\t\tconst localWorkspaceExtension = aLocalExtension('a', { extensionKind: ['workspace'] }, { location: URI.file(`pub.a`) });\n\t\tconst extensionManagementServerService = aMultiExtensionManagementServerService(instantiationService, createExtensionManagementService([localWorkspaceExtension]), remoteExtensionManagementService);\n\t\tinstantiationService.stub(IExtensionManagementServerService, extensionManagementServerService);\n\t\tinstantiationService.stub(IWorkbenchExtensionEnablementService, disposables.add(new TestExtensionEnablementService(instantiationService)));\n\t\tconst workbenchService: IExtensionsWorkbenchService = disposables.add(instantiationService.createInstance(ExtensionsWorkbenchService));\n\t\tinstantiationService.stub(IExtensionsWorkbenchService, workbenchService, 'open', undefined);\n\t\tinstantiationService.set(IExtensionsWorkbenchService, workbenchService);\n\n\t\tconst gallery = aGalleryExtension('a', { identifier: localWorkspaceExtension.identifier });\n\t\tinstantiationService.stubPromise(IExtensionGalleryService, 'query', aPage(gallery));\n\t\tconst testObject = disposables.add(instantiationService.createInstance(ExtensionsActions.RemoteInstallAction, false));\n\t\tdisposables.add(instantiationService.createInstance(ExtensionContainers, [testObject]));\n\n\t\tconst extensions = await workbenchService.queryLocal(extensionManagementServerService.localExtensionManagementServer!);\n\t\tawait workbenchService.queryGallery(CancellationToken.None);\n\t\ttestObject.extension = extensions[0];\n\t\tassert.ok(testObject.enabled);\n\t\tassert.strictEqual('Install in remote', testObject.label);\n\t\tassert.strictEqual('extension-action label prominent install-other-server', testObject.class);\n\n\t\tonInstallExtension.fire({ identifier: localWorkspaceExtension.identifier, source: gallery, profileLocation: null! });\n\t\tassert.ok(testObject.enabled);\n\t\tassert.strictEqual('Installing', testObject.label);\n\t\tassert.strictEqual('extension-action label install-other-server installing', testObject.class);\n\n\t\tconst installedExtension = aLocalExtension('a', { extensionKind: ['workspace'] }, { location: URI.file(`pub.a`).with({ scheme: Schemas.vscodeRemote }) });\n\t\tconst promise = Event.toPromise(testObject.onDidChange);\n\t\tonDidInstallEvent.fire([{ identifier: installedExtension.identifier, local: installedExtension, operation: InstallOperation.Install, profileLocation: null! }]);\n\t\tawait promise;\n\t\tassert.ok(!testObject.enabled);\n\t});\n\n\ttest('Test remote install action is enabled for disabled local workspace extension', async () => {\n\t\t// multi server setup\n\t\tconst localWorkspaceExtension = aLocalExtension('a', { extensionKind: ['workspace'] }, { location: URI.file(`pub.a`) });\n\t\tconst extensionManagementServerService = aMultiExtensionManagementServerService(instantiationService, createExtensionManagementService([localWorkspaceExtension]));\n\t\tinstantiationService.stub(IExtensionManagementServerService, extensionManagementServerService);\n\t\tinstantiationService.stub(IWorkbenchExtensionEnablementService, disposables.add(new TestExtensionEnablementService(instantiationService)));\n\t\tconst workbenchService: IExtensionsWorkbenchService = disposables.add(instantiationService.createInstance(ExtensionsWorkbenchService));\n\t\tinstantiationService.set(IExtensionsWorkbenchService, workbenchService);\n\n\t\tconst remoteWorkspaceExtension = aLocalExtension('a', { extensionKind: ['workspace'] }, { location: URI.file(`pub.a`).with({ scheme: Schemas.vscodeRemote }) });\n\t\tawait instantiationService.get(IWorkbenchExtensionEnablementService).setEnablement([remoteWorkspaceExtension], EnablementState.DisabledGlobally);\n\t\tinstantiationService.stubPromise(IExtensionGalleryService, 'query', aPage(aGalleryExtension('a', { identifier: localWorkspaceExtension.identifier })));\n\t\tconst testObject = disposables.add(instantiationService.createInstance(ExtensionsActions.RemoteInstallAction, false));\n\t\tdisposables.add(instantiationService.createInstance(ExtensionContainers, [testObject]));\n\n\t\tconst extensions = await workbenchService.queryLocal(extensionManagementServerService.localExtensionManagementServer!);\n\t\tawait workbenchService.queryGallery(CancellationToken.None);\n\t\ttestObject.extension = extensions[0];\n\t\tassert.ok(testObject.enabled);\n\t\tassert.strictEqual('Install in remote', testObject.label);\n\t\tassert.strictEqual('extension-action label prominent install-other-server', testObject.class);\n\t});\n\n\ttest('Test remote install action is enabled local workspace+ui extension', async () => {\n\t\t// multi server setup\n\t\tconst localWorkspaceExtension = aLocalExtension('a', { extensionKind: ['workspace', 'ui'] }, { location: URI.file(`pub.a`) });\n\t\tconst extensionManagementServerService = aMultiExtensionManagementServerService(instantiationService, createExtensionManagementService([localWorkspaceExtension]));\n\t\tinstantiationService.stub(IExtensionManagementServerService, extensionManagementServerService);\n\t\tinstantiationService.stub(IWorkbenchExtensionEnablementService, disposables.add(new TestExtensionEnablementService(instantiationService)));\n\t\tconst workbenchService: IExtensionsWorkbenchService = disposables.add(instantiationService.createInstance(ExtensionsWorkbenchService));\n\t\tinstantiationService.set(IExtensionsWorkbenchService, workbenchService);\n\n\t\tawait instantiationService.get(IWorkbenchExtensionEnablementService).setEnablement([localWorkspaceExtension], EnablementState.DisabledGlobally);\n\t\tinstantiationService.stubPromise(IExtensionGalleryService, 'query', aPage(aGalleryExtension('a', { identifier: localWorkspaceExtension.identifier })));\n\t\tconst testObject = disposables.add(instantiationService.createInstance(ExtensionsActions.RemoteInstallAction, false));\n\t\tdisposables.add(instantiationService.createInstance(ExtensionContainers, [testObject]));\n\n\t\tconst extensions = await workbenchService.queryLocal(extensionManagementServerService.localExtensionManagementServer!);\n\t\tawait workbenchService.queryGallery(CancellationToken.None);\n\t\ttestObject.extension = extensions[0];\n\t\tassert.ok(testObject.enabled);\n\t\tassert.strictEqual('Install in remote', testObject.label);\n\t\tassert.strictEqual('extension-action label prominent install-other-server', testObject.class);\n\t});\n\n\ttest('Test remote install action is enabled for local ui+workapace extension if can install is true', async () => {\n\t\t// multi server setup\n\t\tconst localWorkspaceExtension = aLocalExtension('a', { extensionKind: ['ui', 'workspace'] }, { location: URI.file(`pub.a`) });\n\t\tconst extensionManagementServerService = aMultiExtensionManagementServerService(instantiationService, createExtensionManagementService([localWorkspaceExtension]));\n\t\tinstantiationService.stub(IExtensionManagementServerService, extensionManagementServerService);\n\t\tinstantiationService.stub(IWorkbenchExtensionEnablementService, disposables.add(new TestExtensionEnablementService(instantiationService)));\n\t\tconst workbenchService: IExtensionsWorkbenchService = disposables.add(instantiationService.createInstance(ExtensionsWorkbenchService));\n\t\tinstantiationService.set(IExtensionsWorkbenchService, workbenchService);\n\n\t\tawait instantiationService.get(IWorkbenchExtensionEnablementService).setEnablement([localWorkspaceExtension], EnablementState.DisabledGlobally);\n\t\tinstantiationService.stubPromise(IExtensionGalleryService, 'query', aPage(aGalleryExtension('a', { identifier: localWorkspaceExtension.identifier })));\n\t\tconst testObject = disposables.add(instantiationService.createInstance(ExtensionsActions.RemoteInstallAction, true));\n\t\tdisposables.add(instantiationService.createInstance(ExtensionContainers, [testObject]));\n\n\t\tconst extensions = await workbenchService.queryLocal(extensionManagementServerService.localExtensionManagementServer!);\n\t\tawait workbenchService.queryGallery(CancellationToken.None);\n\t\ttestObject.extension = extensions[0];\n\t\tassert.ok(testObject.enabled);\n\t\tassert.strictEqual('Install in remote', testObject.label);\n\t\tassert.strictEqual('extension-action label prominent install-other-server', testObject.class);\n\t});\n\n\ttest('Test remote install action is disabled for local ui+workapace extension if can install is false', async () => {\n\t\t// multi server setup\n\t\tconst localWorkspaceExtension = aLocalExtension('a', { extensionKind: ['ui', 'workspace'] }, { location: URI.file(`pub.a`) });\n\t\tconst extensionManagementServerService = aMultiExtensionManagementServerService(instantiationService, createExtensionManagementService([localWorkspaceExtension]));\n\t\tinstantiationService.stub(IExtensionManagementServerService, extensionManagementServerService);\n\t\tinstantiationService.stub(IWorkbenchExtensionEnablementService, disposables.add(new TestExtensionEnablementService(instantiationService)));\n\t\tconst workbenchService: IExtensionsWorkbenchService = disposables.add(instantiationService.createInstance(ExtensionsWorkbenchService));\n\t\tinstantiationService.set(IExtensionsWorkbenchService, workbenchService);\n\n\t\tawait instantiationService.get(IWorkbenchExtensionEnablementService).setEnablement([localWorkspaceExtension], EnablementState.DisabledGlobally);\n\t\tinstantiationService.stubPromise(IExtensionGalleryService, 'query', aPage(aGalleryExtension('a', { identifier: localWorkspaceExtension.identifier })));\n\t\tconst testObject = disposables.add(instantiationService.createInstance(ExtensionsActions.RemoteInstallAction, false));\n\t\tdisposables.add(instantiationService.createInstance(ExtensionContainers, [testObject]));\n\n\t\tconst extensions = await workbenchService.queryLocal(extensionManagementServerService.localExtensionManagementServer!);\n\t\tawait workbenchService.queryGallery(CancellationToken.None);\n\t\ttestObject.extension = extensions[0];\n\t\tassert.ok(!testObject.enabled);\n\t});\n\n\ttest('Test remote install action is disabled when extension is not set', async () => {\n\t\t// multi server setup\n\t\tconst localWorkspaceExtension = aLocalExtension('a', { extensionKind: ['workspace'] }, { location: URI.file(`pub.a`) });\n\t\tconst extensionManagementServerService = aMultiExtensionManagementServerService(instantiationService, createExtensionManagementService([localWorkspaceExtension]));\n\t\tinstantiationService.stub(IWorkbenchExtensionEnablementService, disposables.add(new TestExtensionEnablementService(instantiationService)));\n\t\tconst workbenchService: IExtensionsWorkbenchService = disposables.add(instantiationService.createInstance(ExtensionsWorkbenchService));\n\t\tinstantiationService.set(IExtensionsWorkbenchService, workbenchService);\n\n\t\tinstantiationService.stubPromise(IExtensionGalleryService, 'query', aPage(aGalleryExtension('a', { identifier: localWorkspaceExtension.identifier })));\n\t\tconst testObject = disposables.add(instantiationService.createInstance(ExtensionsActions.RemoteInstallAction, false));\n\t\tdisposables.add(instantiationService.createInstance(ExtensionContainers, [testObject]));\n\n\t\tawait workbenchService.queryLocal(extensionManagementServerService.localExtensionManagementServer!);\n\t\tawait workbenchService.queryGallery(CancellationToken.None);\n\t\tassert.ok(!testObject.enabled);\n\t});\n\n\ttest('Test remote install action is disabled for extension which is not installed', async () => {\n\t\t// multi server setup\n\t\tconst extensionManagementServerService = aMultiExtensionManagementServerService(instantiationService);\n\t\tinstantiationService.stub(IExtensionManagementServerService, extensionManagementServerService);\n\t\tinstantiationService.stub(IWorkbenchExtensionEnablementService, disposables.add(new TestExtensionEnablementService(instantiationService)));\n\t\tconst workbenchService: IExtensionsWorkbenchService = disposables.add(instantiationService.createInstance(ExtensionsWorkbenchService));\n\t\tinstantiationService.set(IExtensionsWorkbenchService, workbenchService);\n\n\t\tinstantiationService.stubPromise(IExtensionGalleryService, 'query', aPage(aGalleryExtension('a')));\n\t\tconst testObject = disposables.add(instantiationService.createInstance(ExtensionsActions.RemoteInstallAction, false));\n\t\tdisposables.add(instantiationService.createInstance(ExtensionContainers, [testObject]));\n\n\t\tconst pager = await workbenchService.queryGallery(CancellationToken.None);\n\t\ttestObject.extension = pager.firstPage[0];\n\t\tassert.ok(testObject.extension);\n\t\tassert.ok(!testObject.enabled);\n\t});\n\n\ttest('Test remote install action is disabled for local workspace extension which is disabled in env', async () => {\n\t\t// multi server setup\n\t\tconst localWorkspaceExtension = aLocalExtension('a', { extensionKind: ['workspace'] }, { location: URI.file(`pub.a`) });\n\t\tconst extensionManagementServerService = aMultiExtensionManagementServerService(instantiationService, createExtensionManagementService([localWorkspaceExtension]));\n\t\tconst environmentService = { disableExtensions: true } as INativeWorkbenchEnvironmentService;\n\t\tinstantiationService.stub(IEnvironmentService, environmentService);\n\t\tinstantiationService.stub(INativeEnvironmentService, environmentService);\n\t\tinstantiationService.stub(IWorkbenchEnvironmentService, environmentService);\n\t\tinstantiationService.stub(INativeWorkbenchEnvironmentService, environmentService);\n\t\tinstantiationService.stub(IExtensionManagementServerService, extensionManagementServerService);\n\t\tinstantiationService.stub(IWorkbenchExtensionEnablementService, disposables.add(new TestExtensionEnablementService(instantiationService)));\n\t\tconst workbenchService: IExtensionsWorkbenchService = disposables.add(instantiationService.createInstance(ExtensionsWorkbenchService));\n\t\tinstantiationService.set(IExtensionsWorkbenchService, workbenchService);\n\n\t\tinstantiationService.stubPromise(IExtensionGalleryService, 'query', aPage(aGalleryExtension('a', { identifier: localWorkspaceExtension.identifier })));\n\t\tconst testObject = disposables.add(instantiationService.createInstance(ExtensionsActions.RemoteInstallAction, false));\n\t\tdisposables.add(instantiationService.createInstance(ExtensionContainers, [testObject]));\n\n\t\tconst extensions = await workbenchService.queryLocal(extensionManagementServerService.localExtensionManagementServer!);\n\t\tawait workbenchService.queryGallery(CancellationToken.None);\n\t\ttestObject.extension = extensions[0];\n\t\tassert.ok(testObject.extension);\n\t\tassert.ok(!testObject.enabled);\n\t});\n\n\ttest('Test remote install action is disabled when remote server is not available', async () => {\n\t\t// single server setup\n\t\tconst workbenchService = instantiationService.get(IExtensionsWorkbenchService);\n\t\tconst extensionManagementServerService = instantiationService.get(IExtensionManagementServerService);\n\t\tconst localWorkspaceExtension = aLocalExtension('a', { extensionKind: ['workspace'] }, { location: URI.file(`pub.a`) });\n\t\tinstantiationService.stubPromise(IExtensionManagementService, 'getInstalled', [localWorkspaceExtension]);\n\t\tinstantiationService.stubPromise(IExtensionGalleryService, 'query', aPage(aGalleryExtension('a', { identifier: localWorkspaceExtension.identifier })));\n\t\tconst testObject = disposables.add(instantiationService.createInstance(ExtensionsActions.RemoteInstallAction, false));\n\t\tdisposables.add(instantiationService.createInstance(ExtensionContainers, [testObject]));\n\n\t\tconst extensions = await workbenchService.queryLocal(extensionManagementServerService.localExtensionManagementServer!);\n\t\tawait workbenchService.queryGallery(CancellationToken.None);\n\t\ttestObject.extension = extensions[0];\n\t\tassert.ok(testObject.extension);\n\t\tassert.ok(!testObject.enabled);\n\t});\n\n\ttest('Test remote install action is disabled for local workspace extension if it is uninstalled locally', async () => {\n\t\t// multi server setup\n\t\tconst extensionManagementService = instantiationService.get(IExtensionManagementService) as IProfileAwareExtensionManagementService;\n\t\tconst extensionManagementServerService = aMultiExtensionManagementServerService(instantiationService, extensionManagementService);\n\t\tinstantiationService.stub(IExtensionManagementServerService, extensionManagementServerService);\n\t\tinstantiationService.stub(IWorkbenchExtensionEnablementService, disposables.add(new TestExtensionEnablementService(instantiationService)));\n\t\tconst localWorkspaceExtension = aLocalExtension('a', { extensionKind: ['workspace'] }, { location: URI.file(`pub.a`) });\n\t\tinstantiationService.stubPromise(IExtensionManagementService, 'getInstalled', [localWorkspaceExtension]);\n\t\tconst workbenchService: IExtensionsWorkbenchService = disposables.add(instantiationService.createInstance(ExtensionsWorkbenchService));\n\t\tinstantiationService.set(IExtensionsWorkbenchService, workbenchService);\n\n\t\tinstantiationService.stubPromise(IExtensionGalleryService, 'query', aPage(aGalleryExtension('a', { identifier: localWorkspaceExtension.identifier })));\n\t\tconst testObject = disposables.add(instantiationService.createInstance(ExtensionsActions.RemoteInstallAction, false));\n\t\tdisposables.add(instantiationService.createInstance(ExtensionContainers, [testObject]));\n\n\t\tconst extensions = await workbenchService.queryLocal(extensionManagementServerService.localExtensionManagementServer!);\n\t\tawait workbenchService.queryGallery(CancellationToken.None);\n\t\ttestObject.extension = extensions[0];\n\t\tassert.ok(testObject.enabled);\n\t\tassert.strictEqual('Install in remote', testObject.label);\n\n\t\tuninstallEvent.fire({ identifier: localWorkspaceExtension.identifier, profileLocation: null! });\n\t\tassert.ok(!testObject.enabled);\n\t});\n\n\ttest('Test remote install action is disabled for local workspace extension if it is installed in remote', async () => {\n\t\t// multi server setup\n\t\tconst localWorkspaceExtension = aLocalExtension('a', { extensionKind: ['workspace'] }, { location: URI.file(`pub.a`) });\n\t\tconst remoteWorkspaceExtension = aLocalExtension('a', { extensionKind: ['workspace'] }, { location: URI.file(`pub.a`).with({ scheme: Schemas.vscodeRemote }) });\n\t\tconst extensionManagementServerService = aMultiExtensionManagementServerService(instantiationService, createExtensionManagementService([localWorkspaceExtension]), createExtensionManagementService([remoteWorkspaceExtension]));\n\t\tinstantiationService.stub(IExtensionManagementServerService, extensionManagementServerService);\n\t\tinstantiationService.stub(IWorkbenchExtensionEnablementService, disposables.add(new TestExtensionEnablementService(instantiationService)));\n\t\tconst workbenchService: IExtensionsWorkbenchService = disposables.add(instantiationService.createInstance(ExtensionsWorkbenchService));\n\t\tinstantiationService.set(IExtensionsWorkbenchService, workbenchService);\n\n\t\tinstantiationService.stubPromise(IExtensionGalleryService, 'query', aPage(aGalleryExtension('a', { identifier: localWorkspaceExtension.identifier })));\n\t\tconst testObject = disposables.add(instantiationService.createInstance(ExtensionsActions.RemoteInstallAction, false));\n\t\tdisposables.add(instantiationService.createInstance(ExtensionContainers, [testObject]));\n\n\t\tconst extensions = await workbenchService.queryLocal(extensionManagementServerService.localExtensionManagementServer!);\n\t\tawait workbenchService.queryGallery(CancellationToken.None);\n\t\ttestObject.extension = extensions[0];\n\t\tassert.ok(testObject.extension);\n\t\tassert.ok(!testObject.enabled);\n\t});\n\n\ttest('Test remote install action is enabled for local workspace extension if it has not gallery', async () => {\n\t\t// multi server setup\n\t\tconst localWorkspaceExtension = aLocalExtension('a', { extensionKind: ['workspace'] }, { location: URI.file(`pub.a`) });\n\t\tconst extensionManagementServerService = aMultiExtensionManagementServerService(instantiationService, createExtensionManagementService([localWorkspaceExtension]));\n\t\tinstantiationService.stub(IExtensionManagementServerService, extensionManagementServerService);\n\t\tinstantiationService.stub(IWorkbenchExtensionEnablementService, disposables.add(new TestExtensionEnablementService(instantiationService)));\n\t\tconst workbenchService: IExtensionsWorkbenchService = disposables.add(instantiationService.createInstance(ExtensionsWorkbenchService));\n\t\tinstantiationService.set(IExtensionsWorkbenchService, workbenchService);\n\n\t\tinstantiationService.stubPromise(IExtensionGalleryService, 'query', aPage(aGalleryExtension('a', { identifier: localWorkspaceExtension.identifier })));\n\t\tconst testObject = disposables.add(instantiationService.createInstance(ExtensionsActions.RemoteInstallAction, false));\n\t\tdisposables.add(instantiationService.createInstance(ExtensionContainers, [testObject]));\n\n\t\tconst extensions = await workbenchService.queryLocal(extensionManagementServerService.localExtensionManagementServer!);\n\t\ttestObject.extension = extensions[0];\n\t\tassert.ok(testObject.extension);\n\t\tassert.ok(testObject.enabled);\n\t});\n\n\ttest('Test remote install action is disabled for local workspace system extension', async () => {\n\t\t// multi server setup\n\t\tconst localWorkspaceSystemExtension = aLocalExtension('a', { extensionKind: ['workspace'] }, { location: URI.file(`pub.a`), type: ExtensionType.System });\n\t\tconst extensionManagementServerService = aMultiExtensionManagementServerService(instantiationService, createExtensionManagementService([localWorkspaceSystemExtension]));\n\t\tinstantiationService.stub(IExtensionManagementServerService, extensionManagementServerService);\n\t\tinstantiationService.stub(IWorkbenchExtensionEnablementService, disposables.add(new TestExtensionEnablementService(instantiationService)));\n\t\tconst workbenchService: IExtensionsWorkbenchService = disposables.add(instantiationService.createInstance(ExtensionsWorkbenchService));\n\t\tinstantiationService.set(IExtensionsWorkbenchService, workbenchService);\n\n\t\tinstantiationService.stubPromise(IExtensionGalleryService, 'query', aPage(aGalleryExtension('a', { identifier: localWorkspaceSystemExtension.identifier })));\n\t\tconst testObject = disposables.add(instantiationService.createInstance(ExtensionsActions.RemoteInstallAction, false));\n\t\tdisposables.add(instantiationService.createInstance(ExtensionContainers, [testObject]));\n\n\t\tconst extensions = await workbenchService.queryLocal(extensionManagementServerService.localExtensionManagementServer!);\n\t\ttestObject.extension = extensions[0];\n\t\tassert.ok(testObject.extension);\n\t\tassert.ok(!testObject.enabled);\n\t});\n\n\ttest('Test remote install action is disabled for local ui extension if it is not installed in remote', async () => {\n\t\t// multi server setup\n\t\tconst localUIExtension = aLocalExtension('a', { extensionKind: ['ui'] }, { location: URI.file(`pub.a`) });\n\t\tconst extensionManagementServerService = aMultiExtensionManagementServerService(instantiationService, createExtensionManagementService([localUIExtension]));\n\t\tinstantiationService.stub(IExtensionManagementServerService, extensionManagementServerService);\n\t\tinstantiationService.stub(IWorkbenchExtensionEnablementService, disposables.add(new TestExtensionEnablementService(instantiationService)));\n\t\tconst workbenchService: IExtensionsWorkbenchService = disposables.add(instantiationService.createInstance(ExtensionsWorkbenchService));\n\t\tinstantiationService.set(IExtensionsWorkbenchService, workbenchService);\n\n\t\tinstantiationService.stubPromise(IExtensionGalleryService, 'query', aPage(aGalleryExtension('a', { identifier: localUIExtension.identifier })));\n\t\tconst testObject = disposables.add(instantiationService.createInstance(ExtensionsActions.RemoteInstallAction, false));\n\t\tdisposables.add(instantiationService.createInstance(ExtensionContainers, [testObject]));\n\n\t\tconst extensions = await workbenchService.queryLocal(extensionManagementServerService.localExtensionManagementServer!);\n\t\ttestObject.extension = extensions[0];\n\t\tassert.ok(testObject.extension);\n\t\tassert.ok(!testObject.enabled);\n\t});\n\n\ttest('Test remote install action is disabled for local ui extension if it is also installed in remote', async () => {\n\t\t// multi server setup\n\t\tconst localUIExtension = aLocalExtension('a', { extensionKind: ['ui'] }, { location: URI.file(`pub.a`) });\n\t\tconst remoteUIExtension = aLocalExtension('a', { extensionKind: ['ui'] }, { location: URI.file(`pub.a`).with({ scheme: Schemas.vscodeRemote }) });\n\t\tconst extensionManagementServerService = aMultiExtensionManagementServerService(instantiationService, createExtensionManagementService([localUIExtension]), createExtensionManagementService([remoteUIExtension]));\n\t\tinstantiationService.stub(IExtensionManagementServerService, extensionManagementServerService);\n\t\tinstantiationService.stub(IWorkbenchExtensionEnablementService, disposables.add(new TestExtensionEnablementService(instantiationService)));\n\t\tconst workbenchService: IExtensionsWorkbenchService = disposables.add(instantiationService.createInstance(ExtensionsWorkbenchService));\n\t\tinstantiationService.set(IExtensionsWorkbenchService, workbenchService);\n\n\t\tinstantiationService.stubPromise(IExtensionGalleryService, 'query', aPage(aGalleryExtension('a', { identifier: localUIExtension.identifier })));\n\t\tconst testObject = disposables.add(instantiationService.createInstance(ExtensionsActions.RemoteInstallAction, false));\n\t\tdisposables.add(instantiationService.createInstance(ExtensionContainers, [testObject]));\n\n\t\tconst extensions = await workbenchService.queryLocal(extensionManagementServerService.localExtensionManagementServer!);\n\t\ttestObject.extension = extensions[0];\n\t\tassert.ok(testObject.extension);\n\t\tassert.ok(!testObject.enabled);\n\t});\n\n\ttest('Test remote install action is enabled for locally installed language pack extension', async () => {\n\t\t// multi server setup\n\t\tconst languagePackExtension = aLocalExtension('a', { contributes: <IExtensionContributions>{ localizations: [{ languageId: 'de', translations: [] }] } }, { location: URI.file(`pub.a`) });\n\t\tconst extensionManagementServerService = aMultiExtensionManagementServerService(instantiationService, createExtensionManagementService([languagePackExtension]));\n\t\tinstantiationService.stub(IExtensionManagementServerService, extensionManagementServerService);\n\t\tinstantiationService.stub(IWorkbenchExtensionEnablementService, disposables.add(new TestExtensionEnablementService(instantiationService)));\n\t\tconst workbenchService: IExtensionsWorkbenchService = disposables.add(instantiationService.createInstance(ExtensionsWorkbenchService));\n\t\tinstantiationService.set(IExtensionsWorkbenchService, workbenchService);\n\n\t\tinstantiationService.stubPromise(IExtensionGalleryService, 'query', aPage(aGalleryExtension('a', { identifier: languagePackExtension.identifier })));\n\t\tconst testObject = disposables.add(instantiationService.createInstance(ExtensionsActions.RemoteInstallAction, false));\n\t\tdisposables.add(instantiationService.createInstance(ExtensionContainers, [testObject]));\n\n\t\tconst extensions = await workbenchService.queryLocal(extensionManagementServerService.localExtensionManagementServer!);\n\t\tawait workbenchService.queryGallery(CancellationToken.None);\n\t\ttestObject.extension = extensions[0];\n\t\tassert.ok(testObject.enabled);\n\t\tassert.strictEqual('Install in remote', testObject.label);\n\t\tassert.strictEqual('extension-action label prominent install-other-server', testObject.class);\n\t});\n\n\ttest('Test remote install action is disabled if local language pack extension is uninstalled', async () => {\n\t\t// multi server setup\n\t\tconst extensionManagementService = instantiationService.get(IExtensionManagementService) as IProfileAwareExtensionManagementService;\n\t\tconst extensionManagementServerService = aMultiExtensionManagementServerService(instantiationService, extensionManagementService);\n\t\tinstantiationService.stub(IExtensionManagementServerService, extensionManagementServerService);\n\t\tinstantiationService.stub(IWorkbenchExtensionEnablementService, disposables.add(new TestExtensionEnablementService(instantiationService)));\n\t\tconst languagePackExtension = aLocalExtension('a', { contributes: <IExtensionContributions>{ localizations: [{ languageId: 'de', translations: [] }] } }, { location: URI.file(`pub.a`) });\n\t\tinstantiationService.stubPromise(IExtensionManagementService, 'getInstalled', [languagePackExtension]);\n\t\tconst workbenchService: IExtensionsWorkbenchService = disposables.add(instantiationService.createInstance(ExtensionsWorkbenchService));\n\t\tinstantiationService.set(IExtensionsWorkbenchService, workbenchService);\n\n\t\tinstantiationService.stubPromise(IExtensionGalleryService, 'query', aPage(aGalleryExtension('a', { identifier: languagePackExtension.identifier })));\n\t\tconst testObject = disposables.add(instantiationService.createInstance(ExtensionsActions.RemoteInstallAction, false));\n\t\tdisposables.add(instantiationService.createInstance(ExtensionContainers, [testObject]));\n\n\t\tconst extensions = await workbenchService.queryLocal(extensionManagementServerService.localExtensionManagementServer!);\n\t\tawait workbenchService.queryGallery(CancellationToken.None);\n\t\ttestObject.extension = extensions[0];\n\t\tassert.ok(testObject.enabled);\n\t\tassert.strictEqual('Install in remote', testObject.label);\n\n\t\tuninstallEvent.fire({ identifier: languagePackExtension.identifier, profileLocation: null! });\n\t\tassert.ok(!testObject.enabled);\n\t});\n});\n\nsuite('LocalInstallAction', () => {\n\n\tconst disposables = ensureNoDisposablesAreLeakedInTestSuite();\n\n\tsetup(() => setupTest(disposables));\n\n\ttest('Test local install action is enabled for remote ui extension', async () => {\n\t\t// multi server setup\n\t\tconst remoteUIExtension = aLocalExtension('a', { extensionKind: ['ui'] }, { location: URI.file(`pub.a`).with({ scheme: Schemas.vscodeRemote }) });\n\t\tconst extensionManagementServerService = aMultiExtensionManagementServerService(instantiationService, createExtensionManagementService(), createExtensionManagementService([remoteUIExtension]));\n\t\tinstantiationService.stub(IExtensionManagementServerService, extensionManagementServerService);\n\t\tinstantiationService.stub(IWorkbenchExtensionEnablementService, disposables.add(new TestExtensionEnablementService(instantiationService)));\n\t\tconst workbenchService: IExtensionsWorkbenchService = disposables.add(instantiationService.createInstance(ExtensionsWorkbenchService));\n\t\tinstantiationService.set(IExtensionsWorkbenchService, workbenchService);\n\n\t\tinstantiationService.stubPromise(IExtensionGalleryService, 'query', aPage(aGalleryExtension('a', { identifier: remoteUIExtension.identifier })));\n\t\tconst testObject = disposables.add(instantiationService.createInstance(ExtensionsActions.LocalInstallAction));\n\t\tdisposables.add(instantiationService.createInstance(ExtensionContainers, [testObject]));\n\n\t\tconst extensions = await workbenchService.queryLocal(extensionManagementServerService.remoteExtensionManagementServer!);\n\t\tawait workbenchService.queryGallery(CancellationToken.None);\n\t\ttestObject.extension = extensions[0];\n\t\tassert.ok(testObject.enabled);\n\t\tassert.strictEqual('Install Locally', testObject.label);\n\t\tassert.strictEqual('extension-action label prominent install-other-server', testObject.class);\n\t});\n\n\ttest('Test local install action is enabled for remote ui+workspace extension', async () => {\n\t\t// multi server setup\n\t\tconst remoteUIExtension = aLocalExtension('a', { extensionKind: ['ui', 'workspace'] }, { location: URI.file(`pub.a`).with({ scheme: Schemas.vscodeRemote }) });\n\t\tconst extensionManagementServerService = aMultiExtensionManagementServerService(instantiationService, createExtensionManagementService(), createExtensionManagementService([remoteUIExtension]));\n\t\tinstantiationService.stub(IExtensionManagementServerService, extensionManagementServerService);\n\t\tinstantiationService.stub(IWorkbenchExtensionEnablementService, disposables.add(new TestExtensionEnablementService(instantiationService)));\n\t\tconst workbenchService: IExtensionsWorkbenchService = disposables.add(instantiationService.createInstance(ExtensionsWorkbenchService));\n\t\tinstantiationService.set(IExtensionsWorkbenchService, workbenchService);\n\n\t\tinstantiationService.stubPromise(IExtensionGalleryService, 'query', aPage(aGalleryExtension('a', { identifier: remoteUIExtension.identifier })));\n\t\tconst testObject = disposables.add(instantiationService.createInstance(ExtensionsActions.LocalInstallAction));\n\t\tdisposables.add(instantiationService.createInstance(ExtensionContainers, [testObject]));\n\n\t\tconst extensions = await workbenchService.queryLocal(extensionManagementServerService.remoteExtensionManagementServer!);\n\t\tawait workbenchService.queryGallery(CancellationToken.None);\n\t\ttestObject.extension = extensions[0];\n\t\tassert.ok(testObject.enabled);\n\t\tassert.strictEqual('Install Locally', testObject.label);\n\t\tassert.strictEqual('extension-action label prominent install-other-server', testObject.class);\n\t});\n\n\ttest('Test local install action when installing remote ui extension', async () => {\n\t\t// multi server setup\n\t\tconst localExtensionManagementService = createExtensionManagementService();\n\t\tconst onInstallExtension = new Emitter<InstallExtensionEvent>();\n\t\tlocalExtensionManagementService.onInstallExtension = onInstallExtension.event;\n\t\tconst remoteUIExtension = aLocalExtension('a', { extensionKind: ['ui'] }, { location: URI.file(`pub.a`).with({ scheme: Schemas.vscodeRemote }) });\n\t\tconst extensionManagementServerService = aMultiExtensionManagementServerService(instantiationService, localExtensionManagementService, createExtensionManagementService([remoteUIExtension]));\n\t\tinstantiationService.stub(IExtensionManagementServerService, extensionManagementServerService);\n\t\tinstantiationService.stub(IWorkbenchExtensionEnablementService, disposables.add(new TestExtensionEnablementService(instantiationService)));\n\t\tconst workbenchService: IExtensionsWorkbenchService = disposables.add(instantiationService.createInstance(ExtensionsWorkbenchService));\n\t\tinstantiationService.stub(IExtensionsWorkbenchService, workbenchService, 'open', undefined);\n\t\tinstantiationService.set(IExtensionsWorkbenchService, workbenchService);\n\n\t\tconst gallery = aGalleryExtension('a', { identifier: remoteUIExtension.identifier });\n\t\tinstantiationService.stubPromise(IExtensionGalleryService, 'query', aPage(gallery));\n\t\tconst testObject = disposables.add(instantiationService.createInstance(ExtensionsActions.LocalInstallAction));\n\t\tdisposables.add(instantiationService.createInstance(ExtensionContainers, [testObject]));\n\n\t\tconst extensions = await workbenchService.queryLocal(extensionManagementServerService.remoteExtensionManagementServer!);\n\t\tawait workbenchService.queryGallery(CancellationToken.None);\n\t\ttestObject.extension = extensions[0];\n\t\tassert.ok(testObject.enabled);\n\t\tassert.strictEqual('Install Locally', testObject.label);\n\t\tassert.strictEqual('extension-action label prominent install-other-server', testObject.class);\n\n\t\tonInstallExtension.fire({ identifier: remoteUIExtension.identifier, source: gallery, profileLocation: null! });\n\t\tassert.ok(testObject.enabled);\n\t\tassert.strictEqual('Installing', testObject.label);\n\t\tassert.strictEqual('extension-action label install-other-server installing', testObject.class);\n\t});\n\n\ttest('Test local install action when installing remote ui extension is finished', async () => {\n\t\t// multi server setup\n\t\tconst localExtensionManagementService = createExtensionManagementService();\n\t\tconst onInstallExtension = new Emitter<InstallExtensionEvent>();\n\t\tlocalExtensionManagementService.onInstallExtension = onInstallExtension.event;\n\t\tconst onDidInstallEvent = new Emitter<readonly InstallExtensionResult[]>();\n\t\tlocalExtensionManagementService.onDidInstallExtensions = onDidInstallEvent.event;\n\t\tconst remoteUIExtension = aLocalExtension('a', { extensionKind: ['ui'] }, { location: URI.file(`pub.a`).with({ scheme: Schemas.vscodeRemote }) });\n\t\tconst extensionManagementServerService = aMultiExtensionManagementServerService(instantiationService, localExtensionManagementService, createExtensionManagementService([remoteUIExtension]));\n\t\tinstantiationService.stub(IExtensionManagementServerService, extensionManagementServerService);\n\t\tinstantiationService.stub(IWorkbenchExtensionEnablementService, disposables.add(new TestExtensionEnablementService(instantiationService)));\n\t\tconst workbenchService: IExtensionsWorkbenchService = disposables.add(instantiationService.createInstance(ExtensionsWorkbenchService));\n\t\tinstantiationService.stub(IExtensionsWorkbenchService, workbenchService, 'open', undefined);\n\t\tinstantiationService.set(IExtensionsWorkbenchService, workbenchService);\n\n\t\tconst gallery = aGalleryExtension('a', { identifier: remoteUIExtension.identifier });\n\t\tinstantiationService.stubPromise(IExtensionGalleryService, 'query', aPage(gallery));\n\t\tconst testObject = disposables.add(instantiationService.createInstance(ExtensionsActions.LocalInstallAction));\n\t\tdisposables.add(instantiationService.createInstance(ExtensionContainers, [testObject]));\n\n\t\tconst extensions = await workbenchService.queryLocal(extensionManagementServerService.remoteExtensionManagementServer!);\n\t\tawait workbenchService.queryGallery(CancellationToken.None);\n\t\ttestObject.extension = extensions[0];\n\t\tassert.ok(testObject.enabled);\n\t\tassert.strictEqual('Install Locally', testObject.label);\n\t\tassert.strictEqual('extension-action label prominent install-other-server', testObject.class);\n\n\t\tonInstallExtension.fire({ identifier: remoteUIExtension.identifier, source: gallery, profileLocation: null! });\n\t\tassert.ok(testObject.enabled);\n\t\tassert.strictEqual('Installing', testObject.label);\n\t\tassert.strictEqual('extension-action label install-other-server installing', testObject.class);\n\n\t\tconst installedExtension = aLocalExtension('a', { extensionKind: ['ui'] }, { location: URI.file(`pub.a`) });\n\t\tconst promise = Event.toPromise(testObject.onDidChange);\n\t\tonDidInstallEvent.fire([{ identifier: installedExtension.identifier, local: installedExtension, operation: InstallOperation.Install, profileLocation: null! }]);\n\t\tawait promise;\n\t\tassert.ok(!testObject.enabled);\n\t});\n\n\ttest('Test local install action is enabled for disabled remote ui extension', async () => {\n\t\t// multi server setup\n\t\tconst remoteUIExtension = aLocalExtension('a', { extensionKind: ['ui'] }, { location: URI.file(`pub.a`).with({ scheme: Schemas.vscodeRemote }) });\n\t\tconst extensionManagementServerService = aMultiExtensionManagementServerService(instantiationService, createExtensionManagementService(), createExtensionManagementService([remoteUIExtension]));\n\t\tinstantiationService.stub(IExtensionManagementServerService, extensionManagementServerService);\n\t\tinstantiationService.stub(IWorkbenchExtensionEnablementService, disposables.add(new TestExtensionEnablementService(instantiationService)));\n\t\tconst workbenchService: IExtensionsWorkbenchService = disposables.add(instantiationService.createInstance(ExtensionsWorkbenchService));\n\t\tinstantiationService.set(IExtensionsWorkbenchService, workbenchService);\n\n\t\tconst localUIExtension = aLocalExtension('a', { extensionKind: ['ui'] }, { location: URI.file(`pub.a`) });\n\t\tawait instantiationService.get(IWorkbenchExtensionEnablementService).setEnablement([localUIExtension], EnablementState.DisabledGlobally);\n\t\tinstantiationService.stubPromise(IExtensionGalleryService, 'query', aPage(aGalleryExtension('a', { identifier: remoteUIExtension.identifier })));\n\t\tconst testObject = disposables.add(instantiationService.createInstance(ExtensionsActions.LocalInstallAction));\n\t\tdisposables.add(instantiationService.createInstance(ExtensionContainers, [testObject]));\n\n\t\tconst extensions = await workbenchService.queryLocal(extensionManagementServerService.remoteExtensionManagementServer!);\n\t\tawait workbenchService.queryGallery(CancellationToken.None);\n\t\ttestObject.extension = extensions[0];\n\t\tassert.ok(testObject.enabled);\n\t\tassert.strictEqual('Install Locally', testObject.label);\n\t\tassert.strictEqual('extension-action label prominent install-other-server', testObject.class);\n\t});\n\n\ttest('Test local install action is disabled when extension is not set', async () => {\n\t\t// multi server setup\n\t\tconst remoteUIExtension = aLocalExtension('a', { extensionKind: ['ui'] }, { location: URI.file(`pub.a`).with({ scheme: Schemas.vscodeRemote }) });\n\t\tconst extensionManagementServerService = aMultiExtensionManagementServerService(instantiationService, createExtensionManagementService(), createExtensionManagementService([remoteUIExtension]));\n\t\tinstantiationService.stub(IWorkbenchExtensionEnablementService, disposables.add(new TestExtensionEnablementService(instantiationService)));\n\t\tconst workbenchService: IExtensionsWorkbenchService = disposables.add(instantiationService.createInstance(ExtensionsWorkbenchService));\n\t\tinstantiationService.set(IExtensionsWorkbenchService, workbenchService);\n\n\t\tinstantiationService.stubPromise(IExtensionGalleryService, 'query', aPage(aGalleryExtension('a', { identifier: remoteUIExtension.identifier })));\n\t\tconst testObject = disposables.add(instantiationService.createInstance(ExtensionsActions.LocalInstallAction));\n\t\tdisposables.add(instantiationService.createInstance(ExtensionContainers, [testObject]));\n\n\t\tawait workbenchService.queryLocal(extensionManagementServerService.remoteExtensionManagementServer!);\n\t\tawait workbenchService.queryGallery(CancellationToken.None);\n\t\tassert.ok(!testObject.enabled);\n\t});\n\n\ttest('Test local install action is disabled for extension which is not installed', async () => {\n\t\t// multi server setup\n\t\tconst extensionManagementServerService = aMultiExtensionManagementServerService(instantiationService);\n\t\tinstantiationService.stub(IExtensionManagementServerService, extensionManagementServerService);\n\t\tinstantiationService.stub(IWorkbenchExtensionEnablementService, disposables.add(new TestExtensionEnablementService(instantiationService)));\n\t\tconst workbenchService: IExtensionsWorkbenchService = disposables.add(instantiationService.createInstance(ExtensionsWorkbenchService));\n\t\tinstantiationService.set(IExtensionsWorkbenchService, workbenchService);\n\n\t\tinstantiationService.stubPromise(IExtensionGalleryService, 'query', aPage(aGalleryExtension('a')));\n\t\tconst testObject = disposables.add(instantiationService.createInstance(ExtensionsActions.LocalInstallAction));\n\t\tdisposables.add(instantiationService.createInstance(ExtensionContainers, [testObject]));\n\n\t\tconst pager = await workbenchService.queryGallery(CancellationToken.None);\n\t\ttestObject.extension = pager.firstPage[0];\n\t\tassert.ok(testObject.extension);\n\t\tassert.ok(!testObject.enabled);\n\t});\n\n\ttest('Test local install action is disabled for remote ui extension which is disabled in env', async () => {\n\t\t// multi server setup\n\t\tconst remoteUIExtension = aLocalExtension('a', { extensionKind: ['ui'] }, { location: URI.file(`pub.a`).with({ scheme: Schemas.vscodeRemote }) });\n\t\tconst environmentService = { disableExtensions: true } as INativeWorkbenchEnvironmentService;\n\t\tinstantiationService.stub(IEnvironmentService, environmentService);\n\t\tinstantiationService.stub(INativeEnvironmentService, environmentService);\n\t\tinstantiationService.stub(IWorkbenchEnvironmentService, environmentService);\n\t\tinstantiationService.stub(INativeWorkbenchEnvironmentService, environmentService);\n\t\tconst extensionManagementServerService = aMultiExtensionManagementServerService(instantiationService, createExtensionManagementService(), createExtensionManagementService([remoteUIExtension]));\n\t\tinstantiationService.stub(IExtensionManagementServerService, extensionManagementServerService);\n\t\tinstantiationService.stub(IWorkbenchExtensionEnablementService, disposables.add(new TestExtensionEnablementService(instantiationService)));\n\t\tconst workbenchService: IExtensionsWorkbenchService = disposables.add(instantiationService.createInstance(ExtensionsWorkbenchService));\n\t\tinstantiationService.set(IExtensionsWorkbenchService, workbenchService);\n\n\t\tinstantiationService.stubPromise(IExtensionGalleryService, 'query', aPage(aGalleryExtension('a', { identifier: remoteUIExtension.identifier })));\n\t\tconst testObject = disposables.add(instantiationService.createInstance(ExtensionsActions.LocalInstallAction));\n\t\tdisposables.add(instantiationService.createInstance(ExtensionContainers, [testObject]));\n\n\t\tconst extensions = await workbenchService.queryLocal(extensionManagementServerService.remoteExtensionManagementServer!);\n\t\tawait workbenchService.queryGallery(CancellationToken.None);\n\t\ttestObject.extension = extensions[0];\n\t\tassert.ok(testObject.extension);\n\t\tassert.ok(!testObject.enabled);\n\t});\n\n\ttest('Test local install action is disabled when local server is not available', async () => {\n\t\t// single server setup\n\t\tconst remoteUIExtension = aLocalExtension('a', { extensionKind: ['ui'] }, { location: URI.file(`pub.a`).with({ scheme: Schemas.vscodeRemote }) });\n\t\tconst extensionManagementServerService = aSingleRemoteExtensionManagementServerService(instantiationService, createExtensionManagementService([remoteUIExtension]));\n\t\tinstantiationService.stub(IExtensionManagementServerService, extensionManagementServerService);\n\t\tinstantiationService.stub(IWorkbenchExtensionEnablementService, disposables.add(new TestExtensionEnablementService(instantiationService)));\n\t\tconst workbenchService: IExtensionsWorkbenchService = disposables.add(instantiationService.createInstance(ExtensionsWorkbenchService));\n\t\tinstantiationService.set(IExtensionsWorkbenchService, workbenchService);\n\n\t\tinstantiationService.stubPromise(IExtensionGalleryService, 'query', aPage(aGalleryExtension('a', { identifier: remoteUIExtension.identifier })));\n\t\tconst testObject = disposables.add(instantiationService.createInstance(ExtensionsActions.LocalInstallAction));\n\t\tdisposables.add(instantiationService.createInstance(ExtensionContainers, [testObject]));\n\n\t\tconst extensions = await workbenchService.queryLocal(extensionManagementServerService.remoteExtensionManagementServer!);\n\t\tawait workbenchService.queryGallery(CancellationToken.None);\n\t\ttestObject.extension = extensions[0];\n\t\tassert.ok(testObject.extension);\n\t\tassert.ok(!testObject.enabled);\n\t});\n\n\ttest('Test local install action is disabled for remote ui extension if it is installed in local', async () => {\n\t\t// multi server setup\n\t\tconst localUIExtension = aLocalExtension('a', { extensionKind: ['ui'] }, { location: URI.file(`pub.a`) });\n\t\tconst remoteUIExtension = aLocalExtension('a', { extensionKind: ['ui'] }, { location: URI.file(`pub.a`).with({ scheme: Schemas.vscodeRemote }) });\n\t\tconst extensionManagementServerService = aMultiExtensionManagementServerService(instantiationService, createExtensionManagementService([localUIExtension]), createExtensionManagementService([remoteUIExtension]));\n\t\tinstantiationService.stub(IExtensionManagementServerService, extensionManagementServerService);\n\t\tinstantiationService.stub(IWorkbenchExtensionEnablementService, disposables.add(new TestExtensionEnablementService(instantiationService)));\n\t\tconst workbenchService: IExtensionsWorkbenchService = disposables.add(instantiationService.createInstance(ExtensionsWorkbenchService));\n\t\tinstantiationService.set(IExtensionsWorkbenchService, workbenchService);\n\n\t\tinstantiationService.stubPromise(IExtensionGalleryService, 'query', aPage(aGalleryExtension('a', { identifier: localUIExtension.identifier })));\n\t\tconst testObject = disposables.add(instantiationService.createInstance(ExtensionsActions.LocalInstallAction));\n\t\tdisposables.add(instantiationService.createInstance(ExtensionContainers, [testObject]));\n\n\t\tconst extensions = await workbenchService.queryLocal(extensionManagementServerService.remoteExtensionManagementServer!);\n\t\tawait workbenchService.queryGallery(CancellationToken.None);\n\t\ttestObject.extension = extensions[0];\n\t\tassert.ok(testObject.extension);\n\t\tassert.ok(!testObject.enabled);\n\t});\n\n\ttest('Test local install action is disabled for remoteUI extension if it is uninstalled locally', async () => {\n\t\t// multi server setup\n\t\tconst extensionManagementService = instantiationService.get(IExtensionManagementService) as IProfileAwareExtensionManagementService;\n\t\tconst extensionManagementServerService = aMultiExtensionManagementServerService(instantiationService, createExtensionManagementService(), extensionManagementService);\n\t\tinstantiationService.stub(IExtensionManagementServerService, extensionManagementServerService);\n\t\tinstantiationService.stub(IWorkbenchExtensionEnablementService, disposables.add(new TestExtensionEnablementService(instantiationService)));\n\t\tconst remoteUIExtension = aLocalExtension('a', { extensionKind: ['ui'] }, { location: URI.file(`pub.a`).with({ scheme: Schemas.vscodeRemote }) });\n\t\tinstantiationService.stubPromise(IExtensionManagementService, 'getInstalled', [remoteUIExtension]);\n\t\tconst workbenchService: IExtensionsWorkbenchService = disposables.add(instantiationService.createInstance(ExtensionsWorkbenchService));\n\t\tinstantiationService.set(IExtensionsWorkbenchService, workbenchService);\n\n\t\tinstantiationService.stubPromise(IExtensionGalleryService, 'query', aPage(aGalleryExtension('a', { identifier: remoteUIExtension.identifier })));\n\t\tconst testObject = disposables.add(instantiationService.createInstance(ExtensionsActions.LocalInstallAction));\n\t\tdisposables.add(instantiationService.createInstance(ExtensionContainers, [testObject]));\n\n\t\tconst extensions = await workbenchService.queryLocal(extensionManagementServerService.remoteExtensionManagementServer!);\n\t\tawait workbenchService.queryGallery(CancellationToken.None);\n\t\ttestObject.extension = extensions[0];\n\t\tassert.ok(testObject.enabled);\n\t\tassert.strictEqual('Install Locally', testObject.label);\n\n\t\tuninstallEvent.fire({ identifier: remoteUIExtension.identifier, profileLocation: null! });\n\t\tassert.ok(!testObject.enabled);\n\t});\n\n\ttest('Test local install action is enabled for remote UI extension if it has gallery', async () => {\n\t\t// multi server setup\n\t\tconst remoteUIExtension = aLocalExtension('a', { extensionKind: ['ui'] }, { location: URI.file(`pub.a`).with({ scheme: Schemas.vscodeRemote }) });\n\t\tconst extensionManagementServerService = aMultiExtensionManagementServerService(instantiationService, createExtensionManagementService(), createExtensionManagementService([remoteUIExtension]));\n\t\tinstantiationService.stub(IExtensionManagementServerService, extensionManagementServerService);\n\t\tinstantiationService.stub(IWorkbenchExtensionEnablementService, disposables.add(new TestExtensionEnablementService(instantiationService)));\n\t\tconst workbenchService: IExtensionsWorkbenchService = disposables.add(instantiationService.createInstance(ExtensionsWorkbenchService));\n\t\tinstantiationService.set(IExtensionsWorkbenchService, workbenchService);\n\n\t\tinstantiationService.stubPromise(IExtensionGalleryService, 'query', aPage(aGalleryExtension('a', { identifier: remoteUIExtension.identifier })));\n\t\tconst testObject = disposables.add(instantiationService.createInstance(ExtensionsActions.LocalInstallAction));\n\t\tdisposables.add(instantiationService.createInstance(ExtensionContainers, [testObject]));\n\n\t\tconst extensions = await workbenchService.queryLocal(extensionManagementServerService.remoteExtensionManagementServer!);\n\t\ttestObject.extension = extensions[0];\n\t\tassert.ok(testObject.extension);\n\t\tassert.ok(testObject.enabled);\n\t});\n\n\ttest('Test local install action is disabled for remote UI system extension', async () => {\n\t\t// multi server setup\n\t\tconst remoteUISystemExtension = aLocalExtension('a', { extensionKind: ['ui'] }, { location: URI.file(`pub.a`).with({ scheme: Schemas.vscodeRemote }), type: ExtensionType.System });\n\t\tconst extensionManagementServerService = aMultiExtensionManagementServerService(instantiationService, createExtensionManagementService(), createExtensionManagementService([remoteUISystemExtension]));\n\t\tinstantiationService.stub(IExtensionManagementServerService, extensionManagementServerService);\n\t\tinstantiationService.stub(IWorkbenchExtensionEnablementService, disposables.add(new TestExtensionEnablementService(instantiationService)));\n\t\tconst workbenchService: IExtensionsWorkbenchService = disposables.add(instantiationService.createInstance(ExtensionsWorkbenchService));\n\t\tinstantiationService.set(IExtensionsWorkbenchService, workbenchService);\n\n\t\tinstantiationService.stubPromise(IExtensionGalleryService, 'query', aPage(aGalleryExtension('a', { identifier: remoteUISystemExtension.identifier })));\n\t\tconst testObject = disposables.add(instantiationService.createInstance(ExtensionsActions.LocalInstallAction));\n\t\tdisposables.add(instantiationService.createInstance(ExtensionContainers, [testObject]));\n\n\t\tconst extensions = await workbenchService.queryLocal(extensionManagementServerService.remoteExtensionManagementServer!);\n\t\ttestObject.extension = extensions[0];\n\t\tassert.ok(testObject.extension);\n\t\tassert.ok(!testObject.enabled);\n\t});\n\n\ttest('Test local install action is disabled for remote workspace extension if it is not installed in local', async () => {\n\t\t// multi server setup\n\t\tconst remoteWorkspaceExtension = aLocalExtension('a', { extensionKind: ['workspace'] }, { location: URI.file(`pub.a`).with({ scheme: Schemas.vscodeRemote }) });\n\t\tconst extensionManagementServerService = aMultiExtensionManagementServerService(instantiationService, createExtensionManagementService(), createExtensionManagementService([remoteWorkspaceExtension]));\n\t\tinstantiationService.stub(IExtensionManagementServerService, extensionManagementServerService);\n\t\tinstantiationService.stub(IWorkbenchExtensionEnablementService, disposables.add(new TestExtensionEnablementService(instantiationService)));\n\t\tconst workbenchService: IExtensionsWorkbenchService = disposables.add(instantiationService.createInstance(ExtensionsWorkbenchService));\n\t\tinstantiationService.set(IExtensionsWorkbenchService, workbenchService);\n\n\t\tinstantiationService.stubPromise(IExtensionGalleryService, 'query', aPage(aGalleryExtension('a', { identifier: remoteWorkspaceExtension.identifier })));\n\t\tconst testObject = disposables.add(instantiationService.createInstance(ExtensionsActions.LocalInstallAction));\n\t\tdisposables.add(instantiationService.createInstance(ExtensionContainers, [testObject]));\n\n\t\tconst extensions = await workbenchService.queryLocal(extensionManagementServerService.remoteExtensionManagementServer!);\n\t\ttestObject.extension = extensions[0];\n\t\tassert.ok(testObject.extension);\n\t\tassert.ok(!testObject.enabled);\n\t});\n\n\ttest('Test local install action is disabled for remote workspace extension if it is also installed in local', async () => {\n\t\t// multi server setup\n\t\tconst localWorkspaceExtension = aLocalExtension('a', { extensionKind: ['workspae'] }, { location: URI.file(`pub.a`) });\n\t\tconst remoteWorkspaceExtension = aLocalExtension('a', { extensionKind: ['workspace'] }, { location: URI.file(`pub.a`).with({ scheme: Schemas.vscodeRemote }) });\n\t\tconst extensionManagementServerService = aMultiExtensionManagementServerService(instantiationService, createExtensionManagementService([localWorkspaceExtension]), createExtensionManagementService([remoteWorkspaceExtension]));\n\t\tinstantiationService.stub(IExtensionManagementServerService, extensionManagementServerService);\n\t\tinstantiationService.stub(IWorkbenchExtensionEnablementService, disposables.add(new TestExtensionEnablementService(instantiationService)));\n\t\tconst workbenchService: IExtensionsWorkbenchService = disposables.add(instantiationService.createInstance(ExtensionsWorkbenchService));\n\t\tinstantiationService.set(IExtensionsWorkbenchService, workbenchService);\n\n\t\tinstantiationService.stubPromise(IExtensionGalleryService, 'query', aPage(aGalleryExtension('a', { identifier: localWorkspaceExtension.identifier })));\n\t\tconst testObject = disposables.add(instantiationService.createInstance(ExtensionsActions.LocalInstallAction));\n\t\tdisposables.add(instantiationService.createInstance(ExtensionContainers, [testObject]));\n\n\t\tconst extensions = await workbenchService.queryLocal(extensionManagementServerService.remoteExtensionManagementServer!);\n\t\ttestObject.extension = extensions[0];\n\t\tassert.ok(testObject.extension);\n\t\tassert.ok(!testObject.enabled);\n\t});\n\n\ttest('Test local install action is enabled for remotely installed language pack extension', async () => {\n\t\t// multi server setup\n\t\tconst languagePackExtension = aLocalExtension('a', { contributes: <IExtensionContributions>{ localizations: [{ languageId: 'de', translations: [] }] } }, { location: URI.file(`pub.a`).with({ scheme: Schemas.vscodeRemote }) });\n\t\tconst extensionManagementServerService = aMultiExtensionManagementServerService(instantiationService, createExtensionManagementService(), createExtensionManagementService([languagePackExtension]));\n\t\tinstantiationService.stub(IExtensionManagementServerService, extensionManagementServerService);\n\t\tinstantiationService.stub(IWorkbenchExtensionEnablementService, disposables.add(new TestExtensionEnablementService(instantiationService)));\n\t\tconst workbenchService: IExtensionsWorkbenchService = disposables.add(instantiationService.createInstance(ExtensionsWorkbenchService));\n\t\tinstantiationService.set(IExtensionsWorkbenchService, workbenchService);\n\n\t\tinstantiationService.stubPromise(IExtensionGalleryService, 'query', aPage(aGalleryExtension('a', { identifier: languagePackExtension.identifier })));\n\t\tconst testObject = disposables.add(instantiationService.createInstance(ExtensionsActions.LocalInstallAction));\n\t\tdisposables.add(instantiationService.createInstance(ExtensionContainers, [testObject]));\n\n\t\tconst extensions = await workbenchService.queryLocal(extensionManagementServerService.remoteExtensionManagementServer!);\n\t\tawait workbenchService.queryGallery(CancellationToken.None);\n\t\ttestObject.extension = extensions[0];\n\t\tassert.ok(testObject.enabled);\n\t\tassert.strictEqual('Install Locally', testObject.label);\n\t\tassert.strictEqual('extension-action label prominent install-other-server', testObject.class);\n\t});\n\n\ttest('Test local install action is disabled if remote language pack extension is uninstalled', async () => {\n\t\t// multi server setup\n\t\tconst extensionManagementService = instantiationService.get(IExtensionManagementService) as IProfileAwareExtensionManagementService;\n\t\tconst extensionManagementServerService = aMultiExtensionManagementServerService(instantiationService, createExtensionManagementService(), extensionManagementService);\n\t\tinstantiationService.stub(IExtensionManagementServerService, extensionManagementServerService);\n\t\tinstantiationService.stub(IWorkbenchExtensionEnablementService, disposables.add(new TestExtensionEnablementService(instantiationService)));\n\t\tconst languagePackExtension = aLocalExtension('a', { contributes: <IExtensionContributions>{ localizations: [{ languageId: 'de', translations: [] }] } }, { location: URI.file(`pub.a`).with({ scheme: Schemas.vscodeRemote }) });\n\t\tinstantiationService.stubPromise(IExtensionManagementService, 'getInstalled', [languagePackExtension]);\n\t\tconst workbenchService: IExtensionsWorkbenchService = disposables.add(instantiationService.createInstance(ExtensionsWorkbenchService));\n\t\tinstantiationService.set(IExtensionsWorkbenchService, workbenchService);\n\n\t\tinstantiationService.stubPromise(IExtensionGalleryService, 'query', aPage(aGalleryExtension('a', { identifier: languagePackExtension.identifier })));\n\t\tconst testObject = disposables.add(instantiationService.createInstance(ExtensionsActions.LocalInstallAction));\n\t\tdisposables.add(instantiationService.createInstance(ExtensionContainers, [testObject]));\n\n\t\tconst extensions = await workbenchService.queryLocal(extensionManagementServerService.remoteExtensionManagementServer!);\n\t\tawait workbenchService.queryGallery(CancellationToken.None);\n\t\ttestObject.extension = extensions[0];\n\t\tassert.ok(testObject.enabled);\n\t\tassert.strictEqual('Install Locally', testObject.label);\n\n\t\tuninstallEvent.fire({ identifier: languagePackExtension.identifier, profileLocation: null! });\n\t\tassert.ok(!testObject.enabled);\n\t});\n\n});\n\nfunction aLocalExtension(name: string = 'someext', manifest: any = {}, properties: any = {}): ILocalExtension {\n\tmanifest = { name, publisher: 'pub', version: '1.0.0', ...manifest };\n\tproperties = {\n\t\ttype: ExtensionType.User,\n\t\tlocation: URI.file(`pub.${name}`),\n\t\tidentifier: { id: getGalleryExtensionId(manifest.publisher, manifest.name) },\n\t\t...properties,\n\t\tisValid: properties.isValid ?? true,\n\t};\n\tproperties.isBuiltin = properties.type === ExtensionType.System;\n\treturn <ILocalExtension>Object.create({ manifest, ...properties });\n}\n\nfunction aGalleryExtension(name: string, properties: any = {}, galleryExtensionProperties: any = {}, assets: any = {}): IGalleryExtension {\n\tconst targetPlatform = getTargetPlatform(platform, arch);\n\tconst galleryExtension = <IGalleryExtension>Object.create({ name, publisher: 'pub', version: '1.0.0', allTargetPlatforms: [targetPlatform], properties: {}, assets: {}, ...properties });\n\tgalleryExtension.properties = { ...galleryExtension.properties, dependencies: [], targetPlatform, ...galleryExtensionProperties };\n\tgalleryExtension.assets = { ...galleryExtension.assets, ...assets };\n\tgalleryExtension.identifier = { id: getGalleryExtensionId(galleryExtension.publisher, galleryExtension.name), uuid: generateUuid() };\n\tgalleryExtension.hasReleaseVersion = true;\n\treturn <IGalleryExtension>galleryExtension;\n}\n\nfunction aPage<T>(...objects: T[]): IPager<T> {\n\treturn { firstPage: objects, total: objects.length, pageSize: objects.length, getPage: () => null! };\n}\n\nfunction aSingleRemoteExtensionManagementServerService(instantiationService: TestInstantiationService, remoteExtensionManagementService?: IProfileAwareExtensionManagementService): IExtensionManagementServerService {\n\tconst remoteExtensionManagementServer: IExtensionManagementServer = {\n\t\tid: 'vscode-remote',\n\t\tlabel: 'remote',\n\t\textensionManagementService: remoteExtensionManagementService || createExtensionManagementService(),\n\t};\n\treturn {\n\t\t_serviceBrand: undefined,\n\t\tlocalExtensionManagementServer: null,\n\t\tremoteExtensionManagementServer,\n\t\twebExtensionManagementServer: null,\n\t\tgetExtensionManagementServer: (extension: IExtension) => {\n\t\t\tif (extension.location.scheme === Schemas.vscodeRemote) {\n\t\t\t\treturn remoteExtensionManagementServer;\n\t\t\t}\n\t\t\treturn null;\n\t\t},\n\t\tgetExtensionInstallLocation(extension: IExtension): ExtensionInstallLocation | null {\n\t\t\tconst server = this.getExtensionManagementServer(extension);\n\t\t\treturn server === remoteExtensionManagementServer ? ExtensionInstallLocation.Remote : ExtensionInstallLocation.Local;\n\t\t}\n\t};\n}\n\nfunction aMultiExtensionManagementServerService(instantiationService: TestInstantiationService, localExtensionManagementService?: IProfileAwareExtensionManagementService | null, remoteExtensionManagementService?: IProfileAwareExtensionManagementService | null, webExtensionManagementService?: IProfileAwareExtensionManagementService): IExtensionManagementServerService {\n\tconst localExtensionManagementServer: IExtensionManagementServer | null = localExtensionManagementService === null ? null : {\n\t\tid: 'vscode-local',\n\t\tlabel: 'local',\n\t\textensionManagementService: localExtensionManagementService || createExtensionManagementService(),\n\t};\n\tconst remoteExtensionManagementServer: IExtensionManagementServer | null = remoteExtensionManagementService === null ? null : {\n\t\tid: 'vscode-remote',\n\t\tlabel: 'remote',\n\t\textensionManagementService: remoteExtensionManagementService || createExtensionManagementService(),\n\t};\n\tconst webExtensionManagementServer: IExtensionManagementServer | null = webExtensionManagementService ? {\n\t\tid: 'vscode-web',\n\t\tlabel: 'web',\n\t\textensionManagementService: webExtensionManagementService,\n\t} : null;\n\treturn {\n\t\t_serviceBrand: undefined,\n\t\tlocalExtensionManagementServer,\n\t\tremoteExtensionManagementServer,\n\t\twebExtensionManagementServer,\n\t\tgetExtensionManagementServer: (extension: IExtension) => {\n\t\t\tif (extension.location.scheme === Schemas.file) {\n\t\t\t\treturn localExtensionManagementServer;\n\t\t\t}\n\t\t\tif (extension.location.scheme === Schemas.vscodeRemote) {\n\t\t\t\treturn remoteExtensionManagementServer;\n\t\t\t}\n\t\t\tif (extension.location.scheme === Schemas.vscodeUserData) {\n\t\t\t\treturn webExtensionManagementServer;\n\t\t\t}\n\t\t\tthrow new Error('');\n\t\t},\n\t\tgetExtensionInstallLocation(extension: IExtension): ExtensionInstallLocation | null {\n\t\t\tconst server = this.getExtensionManagementServer(extension);\n\t\t\tif (server === null) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\tif (server === remoteExtensionManagementServer) {\n\t\t\t\treturn ExtensionInstallLocation.Remote;\n\t\t\t}\n\t\t\tif (server === webExtensionManagementServer) {\n\t\t\t\treturn ExtensionInstallLocation.Web;\n\t\t\t}\n\t\t\treturn ExtensionInstallLocation.Local;\n\t\t}\n\t};\n}\n\nfunction createExtensionManagementService(installed: ILocalExtension[] = []): IProfileAwareExtensionManagementService {\n\treturn <IProfileAwareExtensionManagementService>{\n\t\tonInstallExtension: Event.None,\n\t\tonDidInstallExtensions: Event.None,\n\t\tonUninstallExtension: Event.None,\n\t\tonDidUninstallExtension: Event.None,\n\t\tonDidChangeProfile: Event.None,\n\t\tonDidUpdateExtensionMetadata: Event.None,\n\t\tgetInstalled: () => Promise.resolve<ILocalExtension[]>(installed),\n\t\tcanInstall: async (extension: IGalleryExtension) => { return true; },\n\t\tinstallFromGallery: (extension: IGalleryExtension) => Promise.reject(new Error('not supported')),\n\t\tupdateMetadata: async (local: Mutable<ILocalExtension>, metadata: Partial<Metadata>, profileLocation: URI) => {\n\t\t\tlocal.identifier.uuid = metadata.id;\n\t\t\tlocal.publisherDisplayName = metadata.publisherDisplayName!;\n\t\t\tlocal.publisherId = metadata.publisherId!;\n\t\t\treturn local;\n\t\t},\n\t\tasync getTargetPlatform() { return getTargetPlatform(platform, arch); },\n\t\tasync getExtensionsControlManifest() { return <IExtensionsControlManifest>{ malicious: [], deprecated: {}, search: [] }; },\n\t};\n}\n"],
  "mappings": "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",
  "names": ["extensions", "uninstallEvent", "instantiationService"]
}
