{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/extensions/common/extensionsUtils.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { localize } from '../../../../nls.js';\nimport { Event } from '../../../../base/common/event.js';\nimport { onUnexpectedError } from '../../../../base/common/errors.js';\nimport { Disposable } from '../../../../base/common/lifecycle.js';\nimport { IExtensionManagementService, ILocalExtension, IExtensionIdentifier, InstallOperation } from '../../../../platform/extensionManagement/common/extensionManagement.js';\nimport { IWorkbenchExtensionEnablementService, EnablementState } from '../../../services/extensionManagement/common/extensionManagement.js';\nimport { IExtensionRecommendationsService } from '../../../services/extensionRecommendations/common/extensionRecommendations.js';\nimport { ILifecycleService } from '../../../services/lifecycle/common/lifecycle.js';\nimport { IWorkbenchContribution } from '../../../common/contributions.js';\nimport { ServicesAccessor, IInstantiationService } from '../../../../platform/instantiation/common/instantiation.js';\nimport { areSameExtensions } from '../../../../platform/extensionManagement/common/extensionManagementUtil.js';\nimport { Severity, INotificationService } from '../../../../platform/notification/common/notification.js';\n\nexport interface IExtensionStatus {\n\tidentifier: IExtensionIdentifier;\n\tlocal: ILocalExtension;\n\tgloballyEnabled: boolean;\n}\n\nexport class KeymapExtensions extends Disposable implements IWorkbenchContribution {\n\n\tconstructor(\n\t\t@IInstantiationService private readonly instantiationService: IInstantiationService,\n\t\t@IWorkbenchExtensionEnablementService private readonly extensionEnablementService: IWorkbenchExtensionEnablementService,\n\t\t@IExtensionRecommendationsService private readonly tipsService: IExtensionRecommendationsService,\n\t\t@ILifecycleService lifecycleService: ILifecycleService,\n\t\t@INotificationService private readonly notificationService: INotificationService,\n\t) {\n\t\tsuper();\n\t\tthis._register(lifecycleService.onDidShutdown(() => this.dispose()));\n\t\tthis._register(instantiationService.invokeFunction(onExtensionChanged)((identifiers => {\n\t\t\tPromise.all(identifiers.map(identifier => this.checkForOtherKeymaps(identifier)))\n\t\t\t\t.then(undefined, onUnexpectedError);\n\t\t})));\n\t}\n\n\tprivate checkForOtherKeymaps(extensionIdentifier: IExtensionIdentifier): Promise<void> {\n\t\treturn this.instantiationService.invokeFunction(getInstalledExtensions).then(extensions => {\n\t\t\tconst keymaps = extensions.filter(extension => isKeymapExtension(this.tipsService, extension));\n\t\t\tconst extension = keymaps.find(extension => areSameExtensions(extension.identifier, extensionIdentifier));\n\t\t\tif (extension && extension.globallyEnabled) {\n\t\t\t\tconst otherKeymaps = keymaps.filter(extension => !areSameExtensions(extension.identifier, extensionIdentifier) && extension.globallyEnabled);\n\t\t\t\tif (otherKeymaps.length) {\n\t\t\t\t\treturn this.promptForDisablingOtherKeymaps(extension, otherKeymaps);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn undefined;\n\t\t});\n\t}\n\n\tprivate promptForDisablingOtherKeymaps(newKeymap: IExtensionStatus, oldKeymaps: IExtensionStatus[]): void {\n\t\tconst onPrompt = (confirmed: boolean) => {\n\t\t\tif (confirmed) {\n\t\t\t\tthis.extensionEnablementService.setEnablement(oldKeymaps.map(keymap => keymap.local), EnablementState.DisabledGlobally);\n\t\t\t}\n\t\t};\n\n\t\tthis.notificationService.prompt(Severity.Info, localize('disableOtherKeymapsConfirmation', \"Disable other keymaps ({0}) to avoid conflicts between keybindings?\", oldKeymaps.map(k => `'${k.local.manifest.displayName}'`).join(', ')),\n\t\t\t[{\n\t\t\t\tlabel: localize('yes', \"Yes\"),\n\t\t\t\trun: () => onPrompt(true)\n\t\t\t}, {\n\t\t\t\tlabel: localize('no', \"No\"),\n\t\t\t\trun: () => onPrompt(false)\n\t\t\t}]\n\t\t);\n\t}\n}\n\nfunction onExtensionChanged(accessor: ServicesAccessor): Event<IExtensionIdentifier[]> {\n\tconst extensionService = accessor.get(IExtensionManagementService);\n\tconst extensionEnablementService = accessor.get(IWorkbenchExtensionEnablementService);\n\tconst onDidInstallExtensions = Event.chain(extensionService.onDidInstallExtensions, $ =>\n\t\t$.filter(e => e.some(({ operation }) => operation === InstallOperation.Install))\n\t\t\t.map(e => e.map(({ identifier }) => identifier))\n\t);\n\treturn Event.debounce<IExtensionIdentifier[], IExtensionIdentifier[]>(Event.any(\n\t\tEvent.any(onDidInstallExtensions, Event.map(extensionService.onDidUninstallExtension, e => [e.identifier])),\n\t\tEvent.map(extensionEnablementService.onEnablementChanged, extensions => extensions.map(e => e.identifier))\n\t), (result: IExtensionIdentifier[] | undefined, identifiers: IExtensionIdentifier[]) => {\n\t\tresult = result || [];\n\t\tfor (const identifier of identifiers) {\n\t\t\tif (result.some(l => !areSameExtensions(l, identifier))) {\n\t\t\t\tresult.push(identifier);\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t});\n}\n\nexport async function getInstalledExtensions(accessor: ServicesAccessor): Promise<IExtensionStatus[]> {\n\tconst extensionService = accessor.get(IExtensionManagementService);\n\tconst extensionEnablementService = accessor.get(IWorkbenchExtensionEnablementService);\n\tconst extensions = await extensionService.getInstalled();\n\treturn extensions.map(extension => {\n\t\treturn {\n\t\t\tidentifier: extension.identifier,\n\t\t\tlocal: extension,\n\t\t\tgloballyEnabled: extensionEnablementService.isEnabled(extension)\n\t\t};\n\t});\n}\n\nfunction isKeymapExtension(tipsService: IExtensionRecommendationsService, extension: IExtensionStatus): boolean {\n\tconst cats = extension.local.manifest.categories;\n\treturn cats && cats.indexOf('Keymaps') !== -1 || tipsService.getKeymapRecommendations().some(extensionId => areSameExtensions({ id: extensionId }, extension.local.identifier));\n}\n"],
  "mappings": "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",
  "names": ["extension"]
}
