{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/extensions/common/extensionsUtils.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { onUnexpectedError } from \"../../../../base/common/errors.js\";\nimport { Event } from \"../../../../base/common/event.js\";\nimport { Disposable } from \"../../../../base/common/lifecycle.js\";\nimport { localize } from \"../../../../nls.js\";\nimport {\n\ttype IExtensionIdentifier,\n\tIExtensionManagementService,\n\ttype ILocalExtension,\n\tInstallOperation,\n} from \"../../../../platform/extensionManagement/common/extensionManagement.js\";\nimport { areSameExtensions } from \"../../../../platform/extensionManagement/common/extensionManagementUtil.js\";\nimport {\n\tIInstantiationService,\n\ttype ServicesAccessor,\n} from \"../../../../platform/instantiation/common/instantiation.js\";\nimport {\n\tINotificationService,\n\tSeverity,\n} from \"../../../../platform/notification/common/notification.js\";\nimport type { IWorkbenchContribution } from \"../../../common/contributions.js\";\nimport {\n\tEnablementState,\n\tIWorkbenchExtensionEnablementService,\n} from \"../../../services/extensionManagement/common/extensionManagement.js\";\nimport { IExtensionRecommendationsService } from \"../../../services/extensionRecommendations/common/extensionRecommendations.js\";\nimport { ILifecycleService } from \"../../../services/lifecycle/common/lifecycle.js\";\n\nexport interface IExtensionStatus {\n\tidentifier: IExtensionIdentifier;\n\tlocal: ILocalExtension;\n\tgloballyEnabled: boolean;\n}\n\nexport class KeymapExtensions\n\textends Disposable\n\timplements IWorkbenchContribution\n{\n\tconstructor(\n\t\t@IInstantiationService private readonly instantiationService: IInstantiationService,\n\t\t@IWorkbenchExtensionEnablementService private readonly extensionEnablementService: IWorkbenchExtensionEnablementService,\n\t\t@IExtensionRecommendationsService private readonly tipsService: IExtensionRecommendationsService,\n\t\t@ILifecycleService lifecycleService: ILifecycleService,\n\t\t@INotificationService private readonly notificationService: INotificationService,\n\t) {\n\t\tsuper();\n\t\tthis._register(lifecycleService.onDidShutdown(() => this.dispose()));\n\t\tthis._register(instantiationService.invokeFunction(onExtensionChanged)((identifiers => {\n\t\t\tPromise.all(identifiers.map(identifier => this.checkForOtherKeymaps(identifier)))\n\t\t\t\t.then(undefined, onUnexpectedError);\n\t\t})));\n\t}\n\n\tprivate checkForOtherKeymaps(\n\t\textensionIdentifier: IExtensionIdentifier,\n\t): Promise<void> {\n\t\treturn this.instantiationService\n\t\t\t.invokeFunction(getInstalledExtensions)\n\t\t\t.then((extensions) => {\n\t\t\t\tconst keymaps = extensions.filter((extension) =>\n\t\t\t\t\tisKeymapExtension(this.tipsService, extension),\n\t\t\t\t);\n\t\t\t\tconst extension = keymaps.find((extension) =>\n\t\t\t\t\tareSameExtensions(\n\t\t\t\t\t\textension.identifier,\n\t\t\t\t\t\textensionIdentifier,\n\t\t\t\t\t),\n\t\t\t\t);\n\t\t\t\tif (extension && extension.globallyEnabled) {\n\t\t\t\t\tconst otherKeymaps = keymaps.filter(\n\t\t\t\t\t\t(extension) =>\n\t\t\t\t\t\t\t!areSameExtensions(\n\t\t\t\t\t\t\t\textension.identifier,\n\t\t\t\t\t\t\t\textensionIdentifier,\n\t\t\t\t\t\t\t) && extension.globallyEnabled,\n\t\t\t\t\t);\n\t\t\t\t\tif (otherKeymaps.length) {\n\t\t\t\t\t\treturn this.promptForDisablingOtherKeymaps(\n\t\t\t\t\t\t\textension,\n\t\t\t\t\t\t\totherKeymaps,\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn undefined;\n\t\t\t});\n\t}\n\n\tprivate promptForDisablingOtherKeymaps(\n\t\tnewKeymap: IExtensionStatus,\n\t\toldKeymaps: IExtensionStatus[],\n\t): void {\n\t\tconst onPrompt = (confirmed: boolean) => {\n\t\t\tif (confirmed) {\n\t\t\t\tthis.extensionEnablementService.setEnablement(\n\t\t\t\t\toldKeymaps.map((keymap) => keymap.local),\n\t\t\t\t\tEnablementState.DisabledGlobally,\n\t\t\t\t);\n\t\t\t}\n\t\t};\n\n\t\tthis.notificationService.prompt(\n\t\t\tSeverity.Info,\n\t\t\tlocalize(\n\t\t\t\t\"disableOtherKeymapsConfirmation\",\n\t\t\t\t\"Disable other keymaps ({0}) to avoid conflicts between keybindings?\",\n\t\t\t\toldKeymaps\n\t\t\t\t\t.map((k) => `'${k.local.manifest.displayName}'`)\n\t\t\t\t\t.join(\", \"),\n\t\t\t),\n\t\t\t[\n\t\t\t\t{\n\t\t\t\t\tlabel: localize(\"yes\", \"Yes\"),\n\t\t\t\t\trun: () => onPrompt(true),\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tlabel: localize(\"no\", \"No\"),\n\t\t\t\t\trun: () => onPrompt(false),\n\t\t\t\t},\n\t\t\t],\n\t\t);\n\t}\n}\n\nfunction onExtensionChanged(\n\taccessor: ServicesAccessor,\n): Event<IExtensionIdentifier[]> {\n\tconst extensionService = accessor.get(IExtensionManagementService);\n\tconst extensionEnablementService = accessor.get(\n\t\tIWorkbenchExtensionEnablementService,\n\t);\n\tconst onDidInstallExtensions = Event.chain(\n\t\textensionService.onDidInstallExtensions,\n\t\t($) =>\n\t\t\t$.filter((e) =>\n\t\t\t\te.some(\n\t\t\t\t\t({ operation }) => operation === InstallOperation.Install,\n\t\t\t\t),\n\t\t\t).map((e) => e.map(({ identifier }) => identifier)),\n\t);\n\treturn Event.debounce<IExtensionIdentifier[], IExtensionIdentifier[]>(\n\t\tEvent.any(\n\t\t\tEvent.any(\n\t\t\t\tonDidInstallExtensions,\n\t\t\t\tEvent.map(extensionService.onDidUninstallExtension, (e) => [\n\t\t\t\t\te.identifier,\n\t\t\t\t]),\n\t\t\t),\n\t\t\tEvent.map(\n\t\t\t\textensionEnablementService.onEnablementChanged,\n\t\t\t\t(extensions) => extensions.map((e) => e.identifier),\n\t\t\t),\n\t\t),\n\t\t(\n\t\t\tresult: IExtensionIdentifier[] | undefined,\n\t\t\tidentifiers: IExtensionIdentifier[],\n\t\t) => {\n\t\t\tresult = result || [];\n\t\t\tfor (const identifier of identifiers) {\n\t\t\t\tif (result.some((l) => !areSameExtensions(l, identifier))) {\n\t\t\t\t\tresult.push(identifier);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn result;\n\t\t},\n\t);\n}\n\nexport async function getInstalledExtensions(\n\taccessor: ServicesAccessor,\n): Promise<IExtensionStatus[]> {\n\tconst extensionService = accessor.get(IExtensionManagementService);\n\tconst extensionEnablementService = accessor.get(\n\t\tIWorkbenchExtensionEnablementService,\n\t);\n\tconst extensions = await extensionService.getInstalled();\n\treturn extensions.map((extension) => {\n\t\treturn {\n\t\t\tidentifier: extension.identifier,\n\t\t\tlocal: extension,\n\t\t\tgloballyEnabled: extensionEnablementService.isEnabled(extension),\n\t\t};\n\t});\n}\n\nfunction isKeymapExtension(\n\ttipsService: IExtensionRecommendationsService,\n\textension: IExtensionStatus,\n): boolean {\n\tconst cats = extension.local.manifest.categories;\n\treturn (\n\t\t(cats && cats.indexOf(\"Keymaps\") !== -1) ||\n\t\ttipsService\n\t\t\t.getKeymapRecommendations()\n\t\t\t.some((extensionId) =>\n\t\t\t\tareSameExtensions(\n\t\t\t\t\t{ id: extensionId },\n\t\t\t\t\textension.local.identifier,\n\t\t\t\t),\n\t\t\t)\n\t);\n}\n"],
  "mappings": "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",
  "names": ["extension"]
}
