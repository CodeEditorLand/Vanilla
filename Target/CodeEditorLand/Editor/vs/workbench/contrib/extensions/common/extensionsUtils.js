var b=Object.defineProperty;var x=Object.getOwnPropertyDescriptor;var I=(s,r,t,o)=>{for(var e=o>1?void 0:o?x(r,t):r,n=s.length-1,i;n>=0;n--)(i=s[n])&&(e=(o?i(r,t,e):i(e))||e);return o&&e&&b(r,t,e),e},c=(s,r)=>(t,o)=>r(t,o,s);import{localize as d}from"../../../../nls.js";import{Event as l}from"../../../../base/common/event.js";import{onUnexpectedError as S}from"../../../../base/common/errors.js";import{Disposable as h}from"../../../../base/common/lifecycle.js";import{IExtensionManagementService as E,InstallOperation as u}from"../../../../platform/extensionManagement/common/extensionManagement.js";import{IWorkbenchExtensionEnablementService as p,EnablementState as y}from"../../../services/extensionManagement/common/extensionManagement.js";import{IExtensionRecommendationsService as g}from"../../../services/extensionRecommendations/common/extensionRecommendations.js";import{ILifecycleService as k}from"../../../services/lifecycle/common/lifecycle.js";import"../../../common/contributions.js";import{IInstantiationService as D}from"../../../../platform/instantiation/common/instantiation.js";import{areSameExtensions as m}from"../../../../platform/extensionManagement/common/extensionManagementUtil.js";import{Severity as O,INotificationService as F}from"../../../../platform/notification/common/notification.js";let f=class extends h{constructor(t,o,e,n,i){super();this.instantiationService=t;this.extensionEnablementService=o;this.tipsService=e;this.notificationService=i;this._register(n.onDidShutdown(()=>this.dispose())),this._register(t.invokeFunction(K)(a=>{Promise.all(a.map(v=>this.checkForOtherKeymaps(v))).then(void 0,S)}))}checkForOtherKeymaps(t){return this.instantiationService.invokeFunction(C).then(o=>{const e=o.filter(i=>w(this.tipsService,i)),n=e.find(i=>m(i.identifier,t));if(n&&n.globallyEnabled){const i=e.filter(a=>!m(a.identifier,t)&&a.globallyEnabled);if(i.length)return this.promptForDisablingOtherKeymaps(n,i)}})}promptForDisablingOtherKeymaps(t,o){const e=n=>{n&&this.extensionEnablementService.setEnablement(o.map(i=>i.local),y.DisabledGlobally)};this.notificationService.prompt(O.Info,d("disableOtherKeymapsConfirmation","Disable other keymaps ({0}) to avoid conflicts between keybindings?",o.map(n=>`'${n.local.manifest.displayName}'`).join(", ")),[{label:d("yes","Yes"),run:()=>e(!0)},{label:d("no","No"),run:()=>e(!1)}])}};f=I([c(0,D),c(1,p),c(2,g),c(3,k),c(4,F)],f);function K(s){const r=s.get(E),t=s.get(p),o=l.chain(r.onDidInstallExtensions,e=>e.filter(n=>n.some(({operation:i})=>i===u.Install)).map(n=>n.map(({identifier:i})=>i)));return l.debounce(l.any(l.any(o,l.map(r.onDidUninstallExtension,e=>[e.identifier])),l.map(t.onEnablementChanged,e=>e.map(n=>n.identifier))),(e,n)=>{e=e||[];for(const i of n)e.some(a=>!m(a,i))&&e.push(i);return e})}async function C(s){const r=s.get(E),t=s.get(p);return(await r.getInstalled()).map(e=>({identifier:e.identifier,local:e,globallyEnabled:t.isEnabled(e)}))}function w(s,r){const t=r.local.manifest.categories;return t&&t.indexOf("Keymaps")!==-1||s.getKeymapRecommendations().some(o=>m({id:o},r.local.identifier))}export{f as KeymapExtensions,C as getInstalledExtensions};
