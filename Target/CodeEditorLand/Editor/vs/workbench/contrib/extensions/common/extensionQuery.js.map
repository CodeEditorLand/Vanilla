{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/extensions/common/extensionQuery.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { EXTENSION_CATEGORIES } from '../../../../platform/extensions/common/extensions.js';\n\nexport class Query {\n\n\tconstructor(public value: string, public sortBy: string) {\n\t\tthis.value = value.trim();\n\t}\n\n\tstatic suggestions(query: string): string[] {\n\t\tconst commands = ['installed', 'updates', 'enabled', 'disabled', 'builtin', 'featured', 'popular', 'recommended', 'recentlyPublished', 'workspaceUnsupported', 'deprecated', 'sort', 'category', 'tag', 'ext', 'id'] as const;\n\t\tconst subcommands = {\n\t\t\t'sort': ['installs', 'rating', 'name', 'publishedDate', 'updateDate'],\n\t\t\t'category': EXTENSION_CATEGORIES.map(c => `\"${c.toLowerCase()}\"`),\n\t\t\t'tag': [''],\n\t\t\t'ext': [''],\n\t\t\t'id': ['']\n\t\t} as const;\n\n\t\tconst queryContains = (substr: string) => query.indexOf(substr) > -1;\n\t\tconst hasSort = subcommands.sort.some(subcommand => queryContains(`@sort:${subcommand}`));\n\t\tconst hasCategory = subcommands.category.some(subcommand => queryContains(`@category:${subcommand}`));\n\n\t\treturn commands.flatMap(command => {\n\t\t\tif (hasSort && command === 'sort' || hasCategory && command === 'category') {\n\t\t\t\treturn [];\n\t\t\t}\n\t\t\tif (command in subcommands) {\n\t\t\t\treturn (subcommands as Record<string, readonly string[]>)[command]\n\t\t\t\t\t.map(subcommand => `@${command}:${subcommand}${subcommand === '' ? '' : ' '}`);\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn queryContains(`@${command}`) ? [] : [`@${command} `];\n\t\t\t}\n\t\t});\n\t}\n\n\tstatic parse(value: string): Query {\n\t\tlet sortBy = '';\n\t\tvalue = value.replace(/@sort:(\\w+)(-\\w*)?/g, (match, by: string, order: string) => {\n\t\t\tsortBy = by;\n\n\t\t\treturn '';\n\t\t});\n\t\treturn new Query(value, sortBy);\n\t}\n\n\ttoString(): string {\n\t\tlet result = this.value;\n\n\t\tif (this.sortBy) {\n\t\t\tresult = `${result}${result ? ' ' : ''}@sort:${this.sortBy}`;\n\t\t}\n\t\treturn result;\n\t}\n\n\tisValid(): boolean {\n\t\treturn !/@outdated/.test(this.value);\n\t}\n\n\tequals(other: Query): boolean {\n\t\treturn this.value === other.value && this.sortBy === other.sortBy;\n\t}\n}\n"],
  "mappings": ";;AAKA,SAAS,4BAA4B;AAE9B,MAAM,MAAM;AAAA,EAElB,YAAmB,OAAsB,QAAgB;AAAtC;AAAsB;AACxC,SAAK,QAAQ,MAAM,KAAK;AAAA,EACzB;AAAA,EAXD,OAOmB;AAAA;AAAA;AAAA,EAMlB,OAAO,YAAY,OAAyB;AAC3C,UAAM,WAAW,CAAC,aAAa,WAAW,WAAW,YAAY,WAAW,YAAY,WAAW,eAAe,qBAAqB,wBAAwB,cAAc,QAAQ,YAAY,OAAO,OAAO,IAAI;AACnN,UAAM,cAAc;AAAA,MACnB,QAAQ,CAAC,YAAY,UAAU,QAAQ,iBAAiB,YAAY;AAAA,MACpE,YAAY,qBAAqB,IAAI,OAAK,IAAI,EAAE,YAAY,CAAC,GAAG;AAAA,MAChE,OAAO,CAAC,EAAE;AAAA,MACV,OAAO,CAAC,EAAE;AAAA,MACV,MAAM,CAAC,EAAE;AAAA,IACV;AAEA,UAAM,gBAAgB,wBAAC,WAAmB,MAAM,QAAQ,MAAM,IAAI,IAA5C;AACtB,UAAM,UAAU,YAAY,KAAK,KAAK,gBAAc,cAAc,SAAS,UAAU,EAAE,CAAC;AACxF,UAAM,cAAc,YAAY,SAAS,KAAK,gBAAc,cAAc,aAAa,UAAU,EAAE,CAAC;AAEpG,WAAO,SAAS,QAAQ,aAAW;AAClC,UAAI,WAAW,YAAY,UAAU,eAAe,YAAY,YAAY;AAC3E,eAAO,CAAC;AAAA,MACT;AACA,UAAI,WAAW,aAAa;AAC3B,eAAQ,YAAkD,OAAO,EAC/D,IAAI,gBAAc,IAAI,OAAO,IAAI,UAAU,GAAG,eAAe,KAAK,KAAK,GAAG,EAAE;AAAA,MAC/E,OACK;AACJ,eAAO,cAAc,IAAI,OAAO,EAAE,IAAI,CAAC,IAAI,CAAC,IAAI,OAAO,GAAG;AAAA,MAC3D;AAAA,IACD,CAAC;AAAA,EACF;AAAA,EAEA,OAAO,MAAM,OAAsB;AAClC,QAAI,SAAS;AACb,YAAQ,MAAM,QAAQ,uBAAuB,CAAC,OAAO,IAAY,UAAkB;AAClF,eAAS;AAET,aAAO;AAAA,IACR,CAAC;AACD,WAAO,IAAI,MAAM,OAAO,MAAM;AAAA,EAC/B;AAAA,EAEA,WAAmB;AAClB,QAAI,SAAS,KAAK;AAElB,QAAI,KAAK,QAAQ;AAChB,eAAS,GAAG,MAAM,GAAG,SAAS,MAAM,EAAE,SAAS,KAAK,MAAM;AAAA,IAC3D;AACA,WAAO;AAAA,EACR;AAAA,EAEA,UAAmB;AAClB,WAAO,CAAC,YAAY,KAAK,KAAK,KAAK;AAAA,EACpC;AAAA,EAEA,OAAO,OAAuB;AAC7B,WAAO,KAAK,UAAU,MAAM,SAAS,KAAK,WAAW,MAAM;AAAA,EAC5D;AACD;",
  "names": []
}
