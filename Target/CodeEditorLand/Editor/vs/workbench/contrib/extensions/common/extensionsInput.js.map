{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/extensions/common/extensionsInput.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Schemas } from '../../../../base/common/network.js';\nimport { URI } from '../../../../base/common/uri.js';\nimport { localize } from '../../../../nls.js';\nimport { EditorInputCapabilities, IUntypedEditorInput } from '../../../common/editor.js';\nimport { EditorInput } from '../../../common/editor/editorInput.js';\nimport { ExtensionEditorTab, IExtension } from './extensions.js';\nimport { areSameExtensions } from '../../../../platform/extensionManagement/common/extensionManagementUtil.js';\nimport { join } from '../../../../base/common/path.js';\nimport { IEditorOptions } from '../../../../platform/editor/common/editor.js';\nimport { ThemeIcon } from '../../../../base/common/themables.js';\nimport { Codicon } from '../../../../base/common/codicons.js';\nimport { registerIcon } from '../../../../platform/theme/common/iconRegistry.js';\n\nconst ExtensionEditorIcon = registerIcon('extensions-editor-label-icon', Codicon.extensions, localize('extensionsEditorLabelIcon', 'Icon of the extensions editor label.'));\n\nexport interface IExtensionEditorOptions extends IEditorOptions {\n\tshowPreReleaseVersion?: boolean;\n\ttab?: ExtensionEditorTab;\n\tfeature?: string;\n\tsideByside?: boolean;\n}\n\nexport class ExtensionsInput extends EditorInput {\n\n\tstatic readonly ID = 'workbench.extensions.input2';\n\n\toverride get typeId(): string {\n\t\treturn ExtensionsInput.ID;\n\t}\n\n\toverride get capabilities(): EditorInputCapabilities {\n\t\treturn EditorInputCapabilities.Readonly | EditorInputCapabilities.Singleton;\n\t}\n\n\toverride get resource() {\n\t\treturn URI.from({\n\t\t\tscheme: Schemas.extension,\n\t\t\tpath: join(this._extension.identifier.id, 'extension')\n\t\t});\n\t}\n\n\tconstructor(private _extension: IExtension) {\n\t\tsuper();\n\t}\n\n\tget extension(): IExtension { return this._extension; }\n\n\toverride getName(): string {\n\t\treturn localize('extensionsInputName', \"Extension: {0}\", this._extension.displayName);\n\t}\n\n\toverride getIcon(): ThemeIcon | undefined {\n\t\treturn ExtensionEditorIcon;\n\t}\n\n\toverride matches(other: EditorInput | IUntypedEditorInput): boolean {\n\t\tif (super.matches(other)) {\n\t\t\treturn true;\n\t\t}\n\n\t\treturn other instanceof ExtensionsInput && areSameExtensions(this._extension.identifier, other._extension.identifier);\n\t}\n}\n"],
  "mappings": ";;AAKA,SAAS,eAAe;AACxB,SAAS,WAAW;AACpB,SAAS,gBAAgB;AACzB,SAAS,yBAAyB,2BAA2B;AAC7D,SAAS,mBAAmB;AAC5B,SAAS,oBAAoB,kBAAkB;AAC/C,SAAS,yBAAyB;AAClC,SAAS,YAAY;AACrB,SAAS,sBAAsB;AAC/B,SAAS,iBAAiB;AAC1B,SAAS,eAAe;AACxB,SAAS,oBAAoB;AAE7B,MAAM,sBAAsB,aAAa,gCAAgC,QAAQ,YAAY,SAAS,6BAA6B,sCAAsC,CAAC;AASnK,MAAM,wBAAwB,YAAY;AAAA,EAmBhD,YAAoB,YAAwB;AAC3C,UAAM;AADa;AAAA,EAEpB;AAAA,EAhDD,OA2BiD;AAAA;AAAA;AAAA,EAEhD,OAAgB,KAAK;AAAA,EAErB,IAAa,SAAiB;AAC7B,WAAO,gBAAgB;AAAA,EACxB;AAAA,EAEA,IAAa,eAAwC;AACpD,WAAO,wBAAwB,WAAW,wBAAwB;AAAA,EACnE;AAAA,EAEA,IAAa,WAAW;AACvB,WAAO,IAAI,KAAK;AAAA,MACf,QAAQ,QAAQ;AAAA,MAChB,MAAM,KAAK,KAAK,WAAW,WAAW,IAAI,WAAW;AAAA,IACtD,CAAC;AAAA,EACF;AAAA,EAMA,IAAI,YAAwB;AAAE,WAAO,KAAK;AAAA,EAAY;AAAA,EAE7C,UAAkB;AAC1B,WAAO,SAAS,uBAAuB,kBAAkB,KAAK,WAAW,WAAW;AAAA,EACrF;AAAA,EAES,UAAiC;AACzC,WAAO;AAAA,EACR;AAAA,EAES,QAAQ,OAAmD;AACnE,QAAI,MAAM,QAAQ,KAAK,GAAG;AACzB,aAAO;AAAA,IACR;AAEA,WAAO,iBAAiB,mBAAmB,kBAAkB,KAAK,WAAW,YAAY,MAAM,WAAW,UAAU;AAAA,EACrH;AACD;",
  "names": []
}
