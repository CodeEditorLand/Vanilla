import{Codicon as n}from"../../../../base/common/codicons.js";import{Schemas as r}from"../../../../base/common/network.js";import{join as s}from"../../../../base/common/path.js";import"../../../../base/common/themables.js";import{URI as d}from"../../../../base/common/uri.js";import{localize as i}from"../../../../nls.js";import"../../../../platform/editor/common/editor.js";import{areSameExtensions as a}from"../../../../platform/extensionManagement/common/extensionManagementUtil.js";import{registerIcon as m}from"../../../../platform/theme/common/iconRegistry.js";import{EditorInputCapabilities as o}from"../../../common/editor.js";import{EditorInput as p}from"../../../common/editor/editorInput.js";import"./extensions.js";const x=m("extensions-editor-label-icon",n.extensions,i("extensionsEditorLabelIcon","Icon of the extensions editor label."));class t extends p{constructor(e){super();this._extension=e}static ID="workbench.extensions.input2";get typeId(){return t.ID}get capabilities(){return o.Readonly|o.Singleton}get resource(){return d.from({scheme:r.extension,path:s(this._extension.identifier.id,"extension")})}get extension(){return this._extension}getName(){return i("extensionsInputName","Extension: {0}",this._extension.displayName)}getIcon(){return x}matches(e){return super.matches(e)?!0:e instanceof t&&a(this._extension.identifier,e._extension.identifier)}}export{t as ExtensionsInput};
