import{Codicon as n}from"../../../../base/common/codicons.js";import{Schemas as r}from"../../../../base/common/network.js";import{join as s}from"../../../../base/common/path.js";import{URI as m}from"../../../../base/common/uri.js";import{localize as o}from"../../../../nls.js";import{areSameExtensions as d}from"../../../../platform/extensionManagement/common/extensionManagementUtil.js";import{registerIcon as p}from"../../../../platform/theme/common/iconRegistry.js";import{EditorInputCapabilities as i}from"../../../common/editor.js";import{EditorInput as a}from"../../../common/editor/editorInput.js";const x=p("extensions-editor-label-icon",n.extensions,o("extensionsEditorLabelIcon","Icon of the extensions editor label."));class t extends a{constructor(e){super();this._extension=e}static ID="workbench.extensions.input2";get typeId(){return t.ID}get capabilities(){return i.Readonly|i.Singleton}get resource(){return m.from({scheme:r.extension,path:s(this._extension.identifier.id,"extension")})}get extension(){return this._extension}getName(){return o("extensionsInputName","Extension: {0}",this._extension.displayName)}getIcon(){return x}matches(e){return super.matches(e)?!0:e instanceof t&&d(this._extension.identifier,e._extension.identifier)}}export{t as ExtensionsInput};
