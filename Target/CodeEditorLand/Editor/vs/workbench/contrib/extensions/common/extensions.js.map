{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/extensions/common/extensions.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport type { CancellationToken } from \"../../../../base/common/cancellation.js\";\nimport type { Event } from \"../../../../base/common/event.js\";\nimport {\n\tDisposable,\n\ttype IDisposable,\n} from \"../../../../base/common/lifecycle.js\";\nimport type { IPager } from \"../../../../base/common/paging.js\";\nimport type { URI } from \"../../../../base/common/uri.js\";\nimport { MenuId } from \"../../../../platform/actions/common/actions.js\";\nimport { RawContextKey } from \"../../../../platform/contextkey/common/contextkey.js\";\nimport type {\n\tIDeprecationInfo,\n\tIExtensionIdentifier,\n\tIExtensionInfo,\n\tIExtensionQueryOptions,\n\tIGalleryExtension,\n\tILocalExtension,\n\tIQueryOptions,\n\tInstallExtensionResult,\n\tInstallOptions,\n} from \"../../../../platform/extensionManagement/common/extensionManagement.js\";\nimport { areSameExtensions } from \"../../../../platform/extensionManagement/common/extensionManagementUtil.js\";\nimport type {\n\tExtensionType,\n\tIExtensionManifest,\n} from \"../../../../platform/extensions/common/extensions.js\";\nimport { createDecorator } from \"../../../../platform/instantiation/common/instantiation.js\";\nimport type { Severity } from \"../../../../platform/notification/common/notification.js\";\nimport type { ProgressLocation } from \"../../../../platform/progress/common/progress.js\";\nimport type { IView, IViewPaneContainer } from \"../../../common/views.js\";\nimport type {\n\tEnablementState,\n\tIExtensionManagementServer,\n\tIResourceExtension,\n} from \"../../../services/extensionManagement/common/extensionManagement.js\";\nimport type { IExtensionsStatus as IExtensionRuntimeStatus } from \"../../../services/extensions/common/extensions.js\";\nimport type { IExtensionEditorOptions } from \"./extensionsInput.js\";\n\nexport const VIEWLET_ID = \"workbench.view.extensions\";\n\nexport interface IExtensionsViewPaneContainer extends IViewPaneContainer {\n\treadonly searchValue: string | undefined;\n\tsearch(text: string): void;\n\trefresh(): Promise<void>;\n}\n\nexport interface IWorkspaceRecommendedExtensionsView extends IView {\n\tinstallWorkspaceRecommendations(): Promise<void>;\n}\n\nexport enum ExtensionState {\n\tInstalling = 0,\n\tInstalled = 1,\n\tUninstalling = 2,\n\tUninstalled = 3,\n}\n\nexport enum ExtensionRuntimeActionType {\n\tReloadWindow = \"reloadWindow\",\n\tRestartExtensions = \"restartExtensions\",\n\tDownloadUpdate = \"downloadUpdate\",\n\tApplyUpdate = \"applyUpdate\",\n\tQuitAndInstall = \"quitAndInstall\",\n}\n\nexport type ExtensionRuntimeState = {\n\taction: ExtensionRuntimeActionType;\n\treason: string;\n};\n\nexport interface IExtension {\n\treadonly type: ExtensionType;\n\treadonly isBuiltin: boolean;\n\treadonly isWorkspaceScoped: boolean;\n\treadonly state: ExtensionState;\n\treadonly name: string;\n\treadonly displayName: string;\n\treadonly identifier: IExtensionIdentifier;\n\treadonly publisher: string;\n\treadonly publisherDisplayName: string;\n\treadonly publisherUrl?: URI;\n\treadonly publisherDomain?: { link: string; verified: boolean };\n\treadonly publisherSponsorLink?: URI;\n\treadonly pinned: boolean;\n\treadonly version: string;\n\treadonly latestVersion: string;\n\treadonly preRelease: boolean;\n\treadonly isPreReleaseVersion: boolean;\n\treadonly hasPreReleaseVersion: boolean;\n\treadonly hasReleaseVersion: boolean;\n\treadonly description: string;\n\treadonly url?: string;\n\treadonly repository?: string;\n\treadonly supportUrl?: string;\n\treadonly iconUrl: string;\n\treadonly iconUrlFallback: string;\n\treadonly licenseUrl?: string;\n\treadonly installCount?: number;\n\treadonly rating?: number;\n\treadonly ratingCount?: number;\n\treadonly outdated: boolean;\n\treadonly outdatedTargetPlatform: boolean;\n\treadonly runtimeState: ExtensionRuntimeState | undefined;\n\treadonly enablementState: EnablementState;\n\treadonly tags: readonly string[];\n\treadonly categories: readonly string[];\n\treadonly dependencies: string[];\n\treadonly extensionPack: string[];\n\treadonly telemetryData: any;\n\treadonly preview: boolean;\n\tgetManifest(token: CancellationToken): Promise<IExtensionManifest | null>;\n\thasReadme(): boolean;\n\tgetReadme(token: CancellationToken): Promise<string>;\n\thasChangelog(): boolean;\n\tgetChangelog(token: CancellationToken): Promise<string>;\n\treadonly server?: IExtensionManagementServer;\n\treadonly local?: ILocalExtension;\n\tgallery?: IGalleryExtension;\n\treadonly resourceExtension?: IResourceExtension;\n\treadonly isMalicious: boolean;\n\treadonly deprecationInfo?: IDeprecationInfo;\n}\n\nexport const IExtensionsWorkbenchService =\n\tcreateDecorator<IExtensionsWorkbenchService>(\"extensionsWorkbenchService\");\n\nexport interface InstallExtensionOptions extends InstallOptions {\n\tversion?: string;\n\tjustification?: string | { reason: string; action: string };\n\tenable?: boolean;\n}\n\nexport interface IExtensionsNotification {\n\treadonly message: string;\n\treadonly severity: Severity;\n\treadonly extensions: IExtension[];\n\tdismiss(): void;\n}\n\nexport interface IExtensionsWorkbenchService {\n\treadonly _serviceBrand: undefined;\n\treadonly onChange: Event<IExtension | undefined>;\n\treadonly onReset: Event<void>;\n\treadonly preferPreReleases: boolean;\n\treadonly local: IExtension[];\n\treadonly installed: IExtension[];\n\treadonly outdated: IExtension[];\n\treadonly whenInitialized: Promise<void>;\n\tqueryLocal(server?: IExtensionManagementServer): Promise<IExtension[]>;\n\tqueryGallery(token: CancellationToken): Promise<IPager<IExtension>>;\n\tqueryGallery(\n\t\toptions: IQueryOptions,\n\t\ttoken: CancellationToken,\n\t): Promise<IPager<IExtension>>;\n\tgetExtensions(\n\t\textensionInfos: IExtensionInfo[],\n\t\ttoken: CancellationToken,\n\t): Promise<IExtension[]>;\n\tgetExtensions(\n\t\textensionInfos: IExtensionInfo[],\n\t\toptions: IExtensionQueryOptions,\n\t\ttoken: CancellationToken,\n\t): Promise<IExtension[]>;\n\tgetResourceExtensions(\n\t\tlocations: URI[],\n\t\tisWorkspaceScoped: boolean,\n\t): Promise<IExtension[]>;\n\tcanInstall(extension: IExtension): Promise<boolean>;\n\tinstall(\n\t\tid: string,\n\t\tinstallOptions?: InstallExtensionOptions,\n\t\tprogressLocation?: ProgressLocation,\n\t): Promise<IExtension>;\n\tinstall(\n\t\tvsix: URI,\n\t\tinstallOptions?: InstallExtensionOptions,\n\t\tprogressLocation?: ProgressLocation,\n\t): Promise<IExtension>;\n\tinstall(\n\t\textension: IExtension,\n\t\tinstallOptions?: InstallExtensionOptions,\n\t\tprogressLocation?: ProgressLocation,\n\t): Promise<IExtension>;\n\tinstallInServer(\n\t\textension: IExtension,\n\t\tserver: IExtensionManagementServer,\n\t): Promise<void>;\n\tuninstall(extension: IExtension): Promise<void>;\n\treinstall(extension: IExtension): Promise<IExtension>;\n\ttogglePreRelease(extension: IExtension): Promise<void>;\n\tcanSetLanguage(extension: IExtension): boolean;\n\tsetLanguage(extension: IExtension): Promise<void>;\n\tsetEnablement(\n\t\textensions: IExtension | IExtension[],\n\t\tenablementState: EnablementState,\n\t): Promise<void>;\n\tisAutoUpdateEnabledFor(extensionOrPublisher: IExtension | string): boolean;\n\tupdateAutoUpdateEnablementFor(\n\t\textensionOrPublisher: IExtension | string,\n\t\tenable: boolean,\n\t): Promise<void>;\n\tshouldRequireConsentToUpdate(\n\t\textension: IExtension,\n\t): Promise<string | undefined>;\n\tupdateAutoUpdateForAllExtensions(value: boolean): Promise<void>;\n\topen(\n\t\textension: IExtension | string,\n\t\toptions?: IExtensionEditorOptions,\n\t): Promise<void>;\n\topenSearch(searchValue: string, focus?: boolean): Promise<void>;\n\tgetAutoUpdateValue(): AutoUpdateConfigurationValue;\n\tcheckForUpdates(): Promise<void>;\n\tgetExtensionRuntimeStatus(\n\t\textension: IExtension,\n\t): IExtensionRuntimeStatus | undefined;\n\tupdateAll(): Promise<InstallExtensionResult[]>;\n\tupdateRunningExtensions(): Promise<void>;\n\n\treadonly onDidChangeExtensionsNotification: Event<\n\t\tIExtensionsNotification | undefined\n\t>;\n\tgetExtensionsNotification(): IExtensionsNotification | undefined;\n\n\t// Sync APIs\n\tisExtensionIgnoredToSync(extension: IExtension): boolean;\n\ttoggleExtensionIgnoredToSync(extension: IExtension): Promise<void>;\n\ttoggleApplyExtensionToAllProfiles(extension: IExtension): Promise<void>;\n}\n\nexport enum ExtensionEditorTab {\n\tReadme = \"readme\",\n\tFeatures = \"features\",\n\tChangelog = \"changelog\",\n\tDependencies = \"dependencies\",\n\tExtensionPack = \"extensionPack\",\n}\n\nexport const ConfigurationKey = \"extensions\";\nexport const AutoUpdateConfigurationKey = \"extensions.autoUpdate\";\nexport const AutoCheckUpdatesConfigurationKey = \"extensions.autoCheckUpdates\";\nexport const CloseExtensionDetailsOnViewChangeKey =\n\t\"extensions.closeExtensionDetailsOnViewChange\";\nexport const AutoRestartConfigurationKey = \"extensions.autoRestart\";\n\nexport type AutoUpdateConfigurationValue =\n\t| boolean\n\t| \"onlyEnabledExtensions\"\n\t| \"onlySelectedExtensions\";\n\nexport interface IExtensionsConfiguration {\n\tautoUpdate: boolean;\n\tautoCheckUpdates: boolean;\n\tignoreRecommendations: boolean;\n\tcloseExtensionDetailsOnViewChange: boolean;\n}\n\nexport interface IExtensionContainer extends IDisposable {\n\textension: IExtension | null;\n\tupdateWhenCounterExtensionChanges?: boolean;\n\tupdate(): void;\n}\n\nexport class ExtensionContainers extends Disposable {\n\tconstructor(\n\t\tprivate readonly containers: IExtensionContainer[],\n\t\t@IExtensionsWorkbenchService extensionsWorkbenchService: IExtensionsWorkbenchService,\n\t) {\n\t\tsuper();\n\t\tthis._register(extensionsWorkbenchService.onChange(this.update, this));\n\t}\n\n\tset extension(extension: IExtension) {\n\t\tthis.containers.forEach((c) => (c.extension = extension));\n\t}\n\n\tprivate update(extension: IExtension | undefined): void {\n\t\tfor (const container of this.containers) {\n\t\t\tif (extension && container.extension) {\n\t\t\t\tif (\n\t\t\t\t\tareSameExtensions(\n\t\t\t\t\t\tcontainer.extension.identifier,\n\t\t\t\t\t\textension.identifier,\n\t\t\t\t\t)\n\t\t\t\t) {\n\t\t\t\t\tif (\n\t\t\t\t\t\tcontainer.extension.server &&\n\t\t\t\t\t\textension.server &&\n\t\t\t\t\t\tcontainer.extension.server !== extension.server\n\t\t\t\t\t) {\n\t\t\t\t\t\tif (container.updateWhenCounterExtensionChanges) {\n\t\t\t\t\t\t\tcontainer.update();\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcontainer.extension = extension;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tcontainer.update();\n\t\t\t}\n\t\t}\n\t}\n}\n\nexport const WORKSPACE_RECOMMENDATIONS_VIEW_ID =\n\t\"workbench.views.extensions.workspaceRecommendations\";\nexport const OUTDATED_EXTENSIONS_VIEW_ID =\n\t\"workbench.views.extensions.searchOutdated\";\nexport const TOGGLE_IGNORE_EXTENSION_ACTION_ID =\n\t\"workbench.extensions.action.toggleIgnoreExtension\";\nexport const SELECT_INSTALL_VSIX_EXTENSION_COMMAND_ID =\n\t\"workbench.extensions.action.installVSIX\";\nexport const INSTALL_EXTENSION_FROM_VSIX_COMMAND_ID =\n\t\"workbench.extensions.command.installFromVSIX\";\n\nexport const LIST_WORKSPACE_UNSUPPORTED_EXTENSIONS_COMMAND_ID =\n\t\"workbench.extensions.action.listWorkspaceUnsupportedExtensions\";\n\n// Context Keys\nexport const HasOutdatedExtensionsContext = new RawContextKey<boolean>(\n\t\"hasOutdatedExtensions\",\n\tfalse,\n);\nexport const CONTEXT_HAS_GALLERY = new RawContextKey<boolean>(\n\t\"hasGallery\",\n\tfalse,\n);\n\n// Context Menu Groups\nexport const THEME_ACTIONS_GROUP = \"_theme_\";\nexport const INSTALL_ACTIONS_GROUP = \"0_install\";\nexport const UPDATE_ACTIONS_GROUP = \"0_update\";\n\nexport const extensionsSearchActionsMenu = new MenuId(\n\t\"extensionsSearchActionsMenu\",\n);\n\nexport interface IExtensionArg {\n\tid: string;\n\tversion: string;\n\tlocation: URI | undefined;\n}\n"],
  "mappings": ";;;;;;;;;;;;AAOA;AAAA,EACC;AAAA,OAEM;AAGP,SAAS,cAAc;AACvB,SAAS,qBAAqB;AAY9B,SAAS,yBAAyB;AAKlC,SAAS,uBAAuB;AAYzB,MAAM,aAAa;AAYnB,IAAK,iBAAL,kBAAKA,oBAAL;AACN,EAAAA,gCAAA,gBAAa,KAAb;AACA,EAAAA,gCAAA,eAAY,KAAZ;AACA,EAAAA,gCAAA,kBAAe,KAAf;AACA,EAAAA,gCAAA,iBAAc,KAAd;AAJW,SAAAA;AAAA,GAAA;AAOL,IAAK,6BAAL,kBAAKC,gCAAL;AACN,EAAAA,4BAAA,kBAAe;AACf,EAAAA,4BAAA,uBAAoB;AACpB,EAAAA,4BAAA,oBAAiB;AACjB,EAAAA,4BAAA,iBAAc;AACd,EAAAA,4BAAA,oBAAiB;AALN,SAAAA;AAAA,GAAA;AAkEL,MAAM,8BACZ,gBAA6C,4BAA4B;AAyGnE,IAAK,qBAAL,kBAAKC,wBAAL;AACN,EAAAA,oBAAA,YAAS;AACT,EAAAA,oBAAA,cAAW;AACX,EAAAA,oBAAA,eAAY;AACZ,EAAAA,oBAAA,kBAAe;AACf,EAAAA,oBAAA,mBAAgB;AALL,SAAAA;AAAA,GAAA;AAQL,MAAM,mBAAmB;AACzB,MAAM,6BAA6B;AACnC,MAAM,mCAAmC;AACzC,MAAM,uCACZ;AACM,MAAM,8BAA8B;AAoBpC,IAAM,sBAAN,cAAkC,WAAW;AAAA,EACnD,YACkB,YACY,4BAC5B;AACD,UAAM;AAHW;AAIjB,SAAK,UAAU,2BAA2B,SAAS,KAAK,QAAQ,IAAI,CAAC;AAAA,EACtE;AAAA,EAlRD,OA2QoD;AAAA;AAAA;AAAA,EASnD,IAAI,UAAU,WAAuB;AACpC,SAAK,WAAW,QAAQ,CAAC,MAAO,EAAE,YAAY,SAAU;AAAA,EACzD;AAAA,EAEQ,OAAO,WAAyC;AACvD,eAAW,aAAa,KAAK,YAAY;AACxC,UAAI,aAAa,UAAU,WAAW;AACrC,YACC;AAAA,UACC,UAAU,UAAU;AAAA,UACpB,UAAU;AAAA,QACX,GACC;AACD,cACC,UAAU,UAAU,UACpB,UAAU,UACV,UAAU,UAAU,WAAW,UAAU,QACxC;AACD,gBAAI,UAAU,mCAAmC;AAChD,wBAAU,OAAO;AAAA,YAClB;AAAA,UACD,OAAO;AACN,sBAAU,YAAY;AAAA,UACvB;AAAA,QACD;AAAA,MACD,OAAO;AACN,kBAAU,OAAO;AAAA,MAClB;AAAA,IACD;AAAA,EACD;AACD;AAvCa,sBAAN;AAAA,EAGJ;AAAA,GAHU;AAyCN,MAAM,oCACZ;AACM,MAAM,8BACZ;AACM,MAAM,oCACZ;AACM,MAAM,2CACZ;AACM,MAAM,yCACZ;AAEM,MAAM,mDACZ;AAGM,MAAM,+BAA+B,IAAI;AAAA,EAC/C;AAAA,EACA;AACD;AACO,MAAM,sBAAsB,IAAI;AAAA,EACtC;AAAA,EACA;AACD;AAGO,MAAM,sBAAsB;AAC5B,MAAM,wBAAwB;AAC9B,MAAM,uBAAuB;AAE7B,MAAM,8BAA8B,IAAI;AAAA,EAC9C;AACD;",
  "names": ["ExtensionState", "ExtensionRuntimeActionType", "ExtensionEditorTab"]
}
