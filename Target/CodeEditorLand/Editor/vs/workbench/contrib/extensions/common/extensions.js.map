{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/extensions/common/extensions.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { createDecorator } from '../../../../platform/instantiation/common/instantiation.js';\nimport { Event } from '../../../../base/common/event.js';\nimport { IPager } from '../../../../base/common/paging.js';\nimport { IQueryOptions, ILocalExtension, IGalleryExtension, IExtensionIdentifier, InstallOptions, IExtensionInfo, IExtensionQueryOptions, IDeprecationInfo, InstallExtensionResult } from '../../../../platform/extensionManagement/common/extensionManagement.js';\nimport { EnablementState, IExtensionManagementServer, IResourceExtension } from '../../../services/extensionManagement/common/extensionManagement.js';\nimport { CancellationToken } from '../../../../base/common/cancellation.js';\nimport { Disposable, IDisposable } from '../../../../base/common/lifecycle.js';\nimport { areSameExtensions } from '../../../../platform/extensionManagement/common/extensionManagementUtil.js';\nimport { IExtensionManifest, ExtensionType } from '../../../../platform/extensions/common/extensions.js';\nimport { URI } from '../../../../base/common/uri.js';\nimport { IView, IViewPaneContainer } from '../../../common/views.js';\nimport { RawContextKey } from '../../../../platform/contextkey/common/contextkey.js';\nimport { IExtensionsStatus as IExtensionRuntimeStatus } from '../../../services/extensions/common/extensions.js';\nimport { IExtensionEditorOptions } from './extensionsInput.js';\nimport { MenuId } from '../../../../platform/actions/common/actions.js';\nimport { ProgressLocation } from '../../../../platform/progress/common/progress.js';\nimport { Severity } from '../../../../platform/notification/common/notification.js';\n\nexport const VIEWLET_ID = 'workbench.view.extensions';\n\nexport interface IExtensionsViewPaneContainer extends IViewPaneContainer {\n\treadonly searchValue: string | undefined;\n\tsearch(text: string): void;\n\trefresh(): Promise<void>;\n}\n\nexport interface IWorkspaceRecommendedExtensionsView extends IView {\n\tinstallWorkspaceRecommendations(): Promise<void>;\n}\n\nexport const enum ExtensionState {\n\tInstalling,\n\tInstalled,\n\tUninstalling,\n\tUninstalled\n}\n\nexport const enum ExtensionRuntimeActionType {\n\tReloadWindow = 'reloadWindow',\n\tRestartExtensions = 'restartExtensions',\n\tDownloadUpdate = 'downloadUpdate',\n\tApplyUpdate = 'applyUpdate',\n\tQuitAndInstall = 'quitAndInstall',\n}\n\nexport type ExtensionRuntimeState = { action: ExtensionRuntimeActionType; reason: string };\n\nexport interface IExtension {\n\treadonly type: ExtensionType;\n\treadonly isBuiltin: boolean;\n\treadonly isWorkspaceScoped: boolean;\n\treadonly state: ExtensionState;\n\treadonly name: string;\n\treadonly displayName: string;\n\treadonly identifier: IExtensionIdentifier;\n\treadonly publisher: string;\n\treadonly publisherDisplayName: string;\n\treadonly publisherUrl?: URI;\n\treadonly publisherDomain?: { link: string; verified: boolean };\n\treadonly publisherSponsorLink?: URI;\n\treadonly pinned: boolean;\n\treadonly version: string;\n\treadonly latestVersion: string;\n\treadonly preRelease: boolean;\n\treadonly isPreReleaseVersion: boolean;\n\treadonly hasPreReleaseVersion: boolean;\n\treadonly hasReleaseVersion: boolean;\n\treadonly description: string;\n\treadonly url?: string;\n\treadonly repository?: string;\n\treadonly supportUrl?: string;\n\treadonly iconUrl: string;\n\treadonly iconUrlFallback: string;\n\treadonly licenseUrl?: string;\n\treadonly installCount?: number;\n\treadonly rating?: number;\n\treadonly ratingCount?: number;\n\treadonly outdated: boolean;\n\treadonly outdatedTargetPlatform: boolean;\n\treadonly runtimeState: ExtensionRuntimeState | undefined;\n\treadonly enablementState: EnablementState;\n\treadonly tags: readonly string[];\n\treadonly categories: readonly string[];\n\treadonly dependencies: string[];\n\treadonly extensionPack: string[];\n\treadonly telemetryData: any;\n\treadonly preview: boolean;\n\tgetManifest(token: CancellationToken): Promise<IExtensionManifest | null>;\n\thasReadme(): boolean;\n\tgetReadme(token: CancellationToken): Promise<string>;\n\thasChangelog(): boolean;\n\tgetChangelog(token: CancellationToken): Promise<string>;\n\treadonly server?: IExtensionManagementServer;\n\treadonly local?: ILocalExtension;\n\tgallery?: IGalleryExtension;\n\treadonly resourceExtension?: IResourceExtension;\n\treadonly isMalicious: boolean;\n\treadonly deprecationInfo?: IDeprecationInfo;\n}\n\nexport const IExtensionsWorkbenchService = createDecorator<IExtensionsWorkbenchService>('extensionsWorkbenchService');\n\nexport interface InstallExtensionOptions extends InstallOptions {\n\tversion?: string;\n\tjustification?: string | { reason: string; action: string };\n\tenable?: boolean;\n}\n\nexport interface IExtensionsNotification {\n\treadonly message: string;\n\treadonly severity: Severity;\n\treadonly extensions: IExtension[];\n\tdismiss(): void;\n}\n\nexport interface IExtensionsWorkbenchService {\n\treadonly _serviceBrand: undefined;\n\treadonly onChange: Event<IExtension | undefined>;\n\treadonly onReset: Event<void>;\n\treadonly preferPreReleases: boolean;\n\treadonly local: IExtension[];\n\treadonly installed: IExtension[];\n\treadonly outdated: IExtension[];\n\treadonly whenInitialized: Promise<void>;\n\tqueryLocal(server?: IExtensionManagementServer): Promise<IExtension[]>;\n\tqueryGallery(token: CancellationToken): Promise<IPager<IExtension>>;\n\tqueryGallery(options: IQueryOptions, token: CancellationToken): Promise<IPager<IExtension>>;\n\tgetExtensions(extensionInfos: IExtensionInfo[], token: CancellationToken): Promise<IExtension[]>;\n\tgetExtensions(extensionInfos: IExtensionInfo[], options: IExtensionQueryOptions, token: CancellationToken): Promise<IExtension[]>;\n\tgetResourceExtensions(locations: URI[], isWorkspaceScoped: boolean): Promise<IExtension[]>;\n\tcanInstall(extension: IExtension): Promise<boolean>;\n\tinstall(id: string, installOptions?: InstallExtensionOptions, progressLocation?: ProgressLocation): Promise<IExtension>;\n\tinstall(vsix: URI, installOptions?: InstallExtensionOptions, progressLocation?: ProgressLocation): Promise<IExtension>;\n\tinstall(extension: IExtension, installOptions?: InstallExtensionOptions, progressLocation?: ProgressLocation): Promise<IExtension>;\n\tinstallInServer(extension: IExtension, server: IExtensionManagementServer): Promise<void>;\n\tuninstall(extension: IExtension): Promise<void>;\n\treinstall(extension: IExtension): Promise<IExtension>;\n\ttogglePreRelease(extension: IExtension): Promise<void>;\n\tcanSetLanguage(extension: IExtension): boolean;\n\tsetLanguage(extension: IExtension): Promise<void>;\n\tsetEnablement(extensions: IExtension | IExtension[], enablementState: EnablementState): Promise<void>;\n\tisAutoUpdateEnabledFor(extensionOrPublisher: IExtension | string): boolean;\n\tupdateAutoUpdateEnablementFor(extensionOrPublisher: IExtension | string, enable: boolean): Promise<void>;\n\tshouldRequireConsentToUpdate(extension: IExtension): Promise<string | undefined>;\n\tupdateAutoUpdateForAllExtensions(value: boolean): Promise<void>;\n\topen(extension: IExtension | string, options?: IExtensionEditorOptions): Promise<void>;\n\topenSearch(searchValue: string, focus?: boolean): Promise<void>;\n\tgetAutoUpdateValue(): AutoUpdateConfigurationValue;\n\tcheckForUpdates(): Promise<void>;\n\tgetExtensionRuntimeStatus(extension: IExtension): IExtensionRuntimeStatus | undefined;\n\tupdateAll(): Promise<InstallExtensionResult[]>;\n\tupdateRunningExtensions(): Promise<void>;\n\n\treadonly onDidChangeExtensionsNotification: Event<IExtensionsNotification | undefined>;\n\tgetExtensionsNotification(): IExtensionsNotification | undefined;\n\n\t// Sync APIs\n\tisExtensionIgnoredToSync(extension: IExtension): boolean;\n\ttoggleExtensionIgnoredToSync(extension: IExtension): Promise<void>;\n\ttoggleApplyExtensionToAllProfiles(extension: IExtension): Promise<void>;\n}\n\nexport const enum ExtensionEditorTab {\n\tReadme = 'readme',\n\tFeatures = 'features',\n\tChangelog = 'changelog',\n\tDependencies = 'dependencies',\n\tExtensionPack = 'extensionPack',\n}\n\nexport const ConfigurationKey = 'extensions';\nexport const AutoUpdateConfigurationKey = 'extensions.autoUpdate';\nexport const AutoCheckUpdatesConfigurationKey = 'extensions.autoCheckUpdates';\nexport const CloseExtensionDetailsOnViewChangeKey = 'extensions.closeExtensionDetailsOnViewChange';\nexport const AutoRestartConfigurationKey = 'extensions.autoRestart';\n\nexport type AutoUpdateConfigurationValue = boolean | 'onlyEnabledExtensions' | 'onlySelectedExtensions';\n\nexport interface IExtensionsConfiguration {\n\tautoUpdate: boolean;\n\tautoCheckUpdates: boolean;\n\tignoreRecommendations: boolean;\n\tcloseExtensionDetailsOnViewChange: boolean;\n}\n\nexport interface IExtensionContainer extends IDisposable {\n\textension: IExtension | null;\n\tupdateWhenCounterExtensionChanges?: boolean;\n\tupdate(): void;\n}\n\nexport class ExtensionContainers extends Disposable {\n\n\tconstructor(\n\t\tprivate readonly containers: IExtensionContainer[],\n\t\t@IExtensionsWorkbenchService extensionsWorkbenchService: IExtensionsWorkbenchService\n\t) {\n\t\tsuper();\n\t\tthis._register(extensionsWorkbenchService.onChange(this.update, this));\n\t}\n\n\tset extension(extension: IExtension) {\n\t\tthis.containers.forEach(c => c.extension = extension);\n\t}\n\n\tprivate update(extension: IExtension | undefined): void {\n\t\tfor (const container of this.containers) {\n\t\t\tif (extension && container.extension) {\n\t\t\t\tif (areSameExtensions(container.extension.identifier, extension.identifier)) {\n\t\t\t\t\tif (container.extension.server && extension.server && container.extension.server !== extension.server) {\n\t\t\t\t\t\tif (container.updateWhenCounterExtensionChanges) {\n\t\t\t\t\t\t\tcontainer.update();\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcontainer.extension = extension;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tcontainer.update();\n\t\t\t}\n\t\t}\n\t}\n}\n\nexport const WORKSPACE_RECOMMENDATIONS_VIEW_ID = 'workbench.views.extensions.workspaceRecommendations';\nexport const OUTDATED_EXTENSIONS_VIEW_ID = 'workbench.views.extensions.searchOutdated';\nexport const TOGGLE_IGNORE_EXTENSION_ACTION_ID = 'workbench.extensions.action.toggleIgnoreExtension';\nexport const SELECT_INSTALL_VSIX_EXTENSION_COMMAND_ID = 'workbench.extensions.action.installVSIX';\nexport const INSTALL_EXTENSION_FROM_VSIX_COMMAND_ID = 'workbench.extensions.command.installFromVSIX';\n\nexport const LIST_WORKSPACE_UNSUPPORTED_EXTENSIONS_COMMAND_ID = 'workbench.extensions.action.listWorkspaceUnsupportedExtensions';\n\n// Context Keys\nexport const HasOutdatedExtensionsContext = new RawContextKey<boolean>('hasOutdatedExtensions', false);\nexport const CONTEXT_HAS_GALLERY = new RawContextKey<boolean>('hasGallery', false);\n\n// Context Menu Groups\nexport const THEME_ACTIONS_GROUP = '_theme_';\nexport const INSTALL_ACTIONS_GROUP = '0_install';\nexport const UPDATE_ACTIONS_GROUP = '0_update';\n\nexport const extensionsSearchActionsMenu = new MenuId('extensionsSearchActionsMenu');\n\nexport interface IExtensionArg {\n\tid: string;\n\tversion: string;\n\tlocation: URI | undefined;\n}\n"],
  "mappings": ";;;;;;;;;;;;AAKA,SAAS,uBAAuB;AAChC,SAAS,aAAa;AACtB,SAAS,cAAc;AACvB,SAAS,eAAe,iBAAiB,mBAAmB,sBAAsB,gBAAgB,gBAAgB,wBAAwB,kBAAkB,8BAA8B;AAC1L,SAAS,iBAAiB,4BAA4B,0BAA0B;AAChF,SAAS,yBAAyB;AAClC,SAAS,YAAY,mBAAmB;AACxC,SAAS,yBAAyB;AAClC,SAAS,oBAAoB,qBAAqB;AAClD,SAAS,WAAW;AACpB,SAAS,OAAO,0BAA0B;AAC1C,SAAS,qBAAqB;AAC9B,SAAS,qBAAqB,+BAA+B;AAC7D,SAAS,+BAA+B;AACxC,SAAS,cAAc;AACvB,SAAS,wBAAwB;AACjC,SAAS,gBAAgB;AAElB,MAAM,aAAa;AAYnB,IAAW,iBAAX,kBAAWA,oBAAX;AACN,EAAAA,gCAAA;AACA,EAAAA,gCAAA;AACA,EAAAA,gCAAA;AACA,EAAAA,gCAAA;AAJiB,SAAAA;AAAA,GAAA;AAOX,IAAW,6BAAX,kBAAWC,gCAAX;AACN,EAAAA,4BAAA,kBAAe;AACf,EAAAA,4BAAA,uBAAoB;AACpB,EAAAA,4BAAA,oBAAiB;AACjB,EAAAA,4BAAA,iBAAc;AACd,EAAAA,4BAAA,oBAAiB;AALA,SAAAA;AAAA,GAAA;AA+DX,MAAM,8BAA8B,gBAA6C,4BAA4B;AA8D7G,IAAW,qBAAX,kBAAWC,wBAAX;AACN,EAAAA,oBAAA,YAAS;AACT,EAAAA,oBAAA,cAAW;AACX,EAAAA,oBAAA,eAAY;AACZ,EAAAA,oBAAA,kBAAe;AACf,EAAAA,oBAAA,mBAAgB;AALC,SAAAA;AAAA,GAAA;AAQX,MAAM,mBAAmB;AACzB,MAAM,6BAA6B;AACnC,MAAM,mCAAmC;AACzC,MAAM,uCAAuC;AAC7C,MAAM,8BAA8B;AAiBpC,IAAM,sBAAN,cAAkC,WAAW;AAAA,EAEnD,YACkB,YACY,4BAC5B;AACD,UAAM;AAHW;AAIjB,SAAK,UAAU,2BAA2B,SAAS,KAAK,QAAQ,IAAI,CAAC;AAAA,EACtE;AAAA,EA5MD,OAoMoD;AAAA;AAAA;AAAA,EAUnD,IAAI,UAAU,WAAuB;AACpC,SAAK,WAAW,QAAQ,OAAK,EAAE,YAAY,SAAS;AAAA,EACrD;AAAA,EAEQ,OAAO,WAAyC;AACvD,eAAW,aAAa,KAAK,YAAY;AACxC,UAAI,aAAa,UAAU,WAAW;AACrC,YAAI,kBAAkB,UAAU,UAAU,YAAY,UAAU,UAAU,GAAG;AAC5E,cAAI,UAAU,UAAU,UAAU,UAAU,UAAU,UAAU,UAAU,WAAW,UAAU,QAAQ;AACtG,gBAAI,UAAU,mCAAmC;AAChD,wBAAU,OAAO;AAAA,YAClB;AAAA,UACD,OAAO;AACN,sBAAU,YAAY;AAAA,UACvB;AAAA,QACD;AAAA,MACD,OAAO;AACN,kBAAU,OAAO;AAAA,MAClB;AAAA,IACD;AAAA,EACD;AACD;AA/Ba,sBAAN;AAAA,EAIJ;AAAA,GAJU;AAiCN,MAAM,oCAAoC;AAC1C,MAAM,8BAA8B;AACpC,MAAM,oCAAoC;AAC1C,MAAM,2CAA2C;AACjD,MAAM,yCAAyC;AAE/C,MAAM,mDAAmD;AAGzD,MAAM,+BAA+B,IAAI,cAAuB,yBAAyB,KAAK;AAC9F,MAAM,sBAAsB,IAAI,cAAuB,cAAc,KAAK;AAG1E,MAAM,sBAAsB;AAC5B,MAAM,wBAAwB;AAC9B,MAAM,uBAAuB;AAE7B,MAAM,8BAA8B,IAAI,OAAO,6BAA6B;",
  "names": ["ExtensionState", "ExtensionRuntimeActionType", "ExtensionEditorTab"]
}
