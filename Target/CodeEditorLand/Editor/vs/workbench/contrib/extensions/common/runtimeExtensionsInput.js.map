{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/extensions/common/runtimeExtensionsInput.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Codicon } from \"../../../../base/common/codicons.js\";\nimport type { ThemeIcon } from \"../../../../base/common/themables.js\";\nimport { URI } from \"../../../../base/common/uri.js\";\nimport * as nls from \"../../../../nls.js\";\nimport { registerIcon } from \"../../../../platform/theme/common/iconRegistry.js\";\nimport {\n\tEditorInputCapabilities,\n\ttype IUntypedEditorInput,\n} from \"../../../common/editor.js\";\nimport { EditorInput } from \"../../../common/editor/editorInput.js\";\n\nconst RuntimeExtensionsEditorIcon = registerIcon(\n\t\"runtime-extensions-editor-label-icon\",\n\tCodicon.extensions,\n\tnls.localize(\n\t\t\"runtimeExtensionEditorLabelIcon\",\n\t\t\"Icon of the runtime extensions editor label.\",\n\t),\n);\n\nexport class RuntimeExtensionsInput extends EditorInput {\n\tstatic readonly ID = \"workbench.runtimeExtensions.input\";\n\n\toverride get typeId(): string {\n\t\treturn RuntimeExtensionsInput.ID;\n\t}\n\n\toverride get capabilities(): EditorInputCapabilities {\n\t\treturn (\n\t\t\tEditorInputCapabilities.Readonly | EditorInputCapabilities.Singleton\n\t\t);\n\t}\n\n\tstatic _instance: RuntimeExtensionsInput;\n\tstatic get instance() {\n\t\tif (\n\t\t\t!RuntimeExtensionsInput._instance ||\n\t\t\tRuntimeExtensionsInput._instance.isDisposed()\n\t\t) {\n\t\t\tRuntimeExtensionsInput._instance = new RuntimeExtensionsInput();\n\t\t}\n\n\t\treturn RuntimeExtensionsInput._instance;\n\t}\n\n\treadonly resource = URI.from({\n\t\tscheme: \"runtime-extensions\",\n\t\tpath: \"default\",\n\t});\n\n\toverride getName(): string {\n\t\treturn nls.localize(\"extensionsInputName\", \"Running Extensions\");\n\t}\n\n\toverride getIcon(): ThemeIcon {\n\t\treturn RuntimeExtensionsEditorIcon;\n\t}\n\n\toverride matches(other: EditorInput | IUntypedEditorInput): boolean {\n\t\tif (super.matches(other)) {\n\t\t\treturn true;\n\t\t}\n\t\treturn other instanceof RuntimeExtensionsInput;\n\t}\n}\n"],
  "mappings": ";;AAKA,SAAS,eAAe;AAExB,SAAS,WAAW;AACpB,YAAY,SAAS;AACrB,SAAS,oBAAoB;AAC7B;AAAA,EACC;AAAA,OAEM;AACP,SAAS,mBAAmB;AAE5B,MAAM,8BAA8B;AAAA,EACnC;AAAA,EACA,QAAQ;AAAA,EACR,IAAI;AAAA,IACH;AAAA,IACA;AAAA,EACD;AACD;AAEO,MAAM,+BAA+B,YAAY;AAAA,EAzBxD,OAyBwD;AAAA;AAAA;AAAA,EACvD,OAAgB,KAAK;AAAA,EAErB,IAAa,SAAiB;AAC7B,WAAO,uBAAuB;AAAA,EAC/B;AAAA,EAEA,IAAa,eAAwC;AACpD,WACC,wBAAwB,WAAW,wBAAwB;AAAA,EAE7D;AAAA,EAEA,OAAO;AAAA,EACP,WAAW,WAAW;AACrB,QACC,CAAC,uBAAuB,aACxB,uBAAuB,UAAU,WAAW,GAC3C;AACD,6BAAuB,YAAY,IAAI,uBAAuB;AAAA,IAC/D;AAEA,WAAO,uBAAuB;AAAA,EAC/B;AAAA,EAES,WAAW,IAAI,KAAK;AAAA,IAC5B,QAAQ;AAAA,IACR,MAAM;AAAA,EACP,CAAC;AAAA,EAEQ,UAAkB;AAC1B,WAAO,IAAI,SAAS,uBAAuB,oBAAoB;AAAA,EAChE;AAAA,EAES,UAAqB;AAC7B,WAAO;AAAA,EACR;AAAA,EAES,QAAQ,OAAmD;AACnE,QAAI,MAAM,QAAQ,KAAK,GAAG;AACzB,aAAO;AAAA,IACR;AACA,WAAO,iBAAiB;AAAA,EACzB;AACD;",
  "names": []
}
