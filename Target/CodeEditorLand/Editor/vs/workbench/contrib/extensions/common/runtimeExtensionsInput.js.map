{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/extensions/common/runtimeExtensionsInput.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as nls from '../../../../nls.js';\nimport { URI } from '../../../../base/common/uri.js';\nimport { EditorInputCapabilities, IUntypedEditorInput } from '../../../common/editor.js';\nimport { EditorInput } from '../../../common/editor/editorInput.js';\nimport { ThemeIcon } from '../../../../base/common/themables.js';\nimport { Codicon } from '../../../../base/common/codicons.js';\nimport { registerIcon } from '../../../../platform/theme/common/iconRegistry.js';\n\nconst RuntimeExtensionsEditorIcon = registerIcon('runtime-extensions-editor-label-icon', Codicon.extensions, nls.localize('runtimeExtensionEditorLabelIcon', 'Icon of the runtime extensions editor label.'));\n\nexport class RuntimeExtensionsInput extends EditorInput {\n\n\tstatic readonly ID = 'workbench.runtimeExtensions.input';\n\n\toverride get typeId(): string {\n\t\treturn RuntimeExtensionsInput.ID;\n\t}\n\n\toverride get capabilities(): EditorInputCapabilities {\n\t\treturn EditorInputCapabilities.Readonly | EditorInputCapabilities.Singleton;\n\t}\n\n\tstatic _instance: RuntimeExtensionsInput;\n\tstatic get instance() {\n\t\tif (!RuntimeExtensionsInput._instance || RuntimeExtensionsInput._instance.isDisposed()) {\n\t\t\tRuntimeExtensionsInput._instance = new RuntimeExtensionsInput();\n\t\t}\n\n\t\treturn RuntimeExtensionsInput._instance;\n\t}\n\n\treadonly resource = URI.from({\n\t\tscheme: 'runtime-extensions',\n\t\tpath: 'default'\n\t});\n\n\toverride getName(): string {\n\t\treturn nls.localize('extensionsInputName', \"Running Extensions\");\n\t}\n\n\toverride getIcon(): ThemeIcon {\n\t\treturn RuntimeExtensionsEditorIcon;\n\t}\n\n\toverride matches(other: EditorInput | IUntypedEditorInput): boolean {\n\t\tif (super.matches(other)) {\n\t\t\treturn true;\n\t\t}\n\t\treturn other instanceof RuntimeExtensionsInput;\n\t}\n}\n"],
  "mappings": ";;AAKA,YAAY,SAAS;AACrB,SAAS,WAAW;AACpB,SAAS,yBAAyB,2BAA2B;AAC7D,SAAS,mBAAmB;AAC5B,SAAS,iBAAiB;AAC1B,SAAS,eAAe;AACxB,SAAS,oBAAoB;AAE7B,MAAM,8BAA8B,aAAa,wCAAwC,QAAQ,YAAY,IAAI,SAAS,mCAAmC,8CAA8C,CAAC;AAErM,MAAM,+BAA+B,YAAY;AAAA,EAfxD,OAewD;AAAA;AAAA;AAAA,EAEvD,OAAgB,KAAK;AAAA,EAErB,IAAa,SAAiB;AAC7B,WAAO,uBAAuB;AAAA,EAC/B;AAAA,EAEA,IAAa,eAAwC;AACpD,WAAO,wBAAwB,WAAW,wBAAwB;AAAA,EACnE;AAAA,EAEA,OAAO;AAAA,EACP,WAAW,WAAW;AACrB,QAAI,CAAC,uBAAuB,aAAa,uBAAuB,UAAU,WAAW,GAAG;AACvF,6BAAuB,YAAY,IAAI,uBAAuB;AAAA,IAC/D;AAEA,WAAO,uBAAuB;AAAA,EAC/B;AAAA,EAES,WAAW,IAAI,KAAK;AAAA,IAC5B,QAAQ;AAAA,IACR,MAAM;AAAA,EACP,CAAC;AAAA,EAEQ,UAAkB;AAC1B,WAAO,IAAI,SAAS,uBAAuB,oBAAoB;AAAA,EAChE;AAAA,EAES,UAAqB;AAC7B,WAAO;AAAA,EACR;AAAA,EAES,QAAQ,OAAmD;AACnE,QAAI,MAAM,QAAQ,KAAK,GAAG;AACzB,aAAO;AAAA,IACR;AACA,WAAO,iBAAiB;AAAA,EACzB;AACD;",
  "names": []
}
