import a from"assert";import{CancellationToken as c}from"../../../../../base/common/cancellation.js";import{Disposable as d,DisposableStore as k}from"../../../../../base/common/lifecycle.js";import{URI as p}from"../../../../../base/common/uri.js";import{ensureNoDisposablesAreLeakedInTestSuite as m}from"../../../../../base/test/common/utils.js";import{ExternalUriOpenerPriority as s}from"../../../../../editor/common/languages.js";import{IConfigurationService as I}from"../../../../../platform/configuration/common/configuration.js";import{TestConfigurationService as P}from"../../../../../platform/configuration/test/common/testConfigurationService.js";import{TestInstantiationService as O}from"../../../../../platform/instantiation/test/common/instantiationServiceMock.js";import{IOpenerService as f}from"../../../../../platform/opener/common/opener.js";import{IQuickInputService as x}from"../../../../../platform/quickinput/common/quickInput.js";import{ExternalUriOpenerService as l}from"../../common/externalUriOpenerService.js";class y{constructor(e){this.pickIndex=e}async pick(e,r,t){const o=(await e)[this.pickIndex];if(o.type!=="separator")return o}}suite("ExternalUriOpenerService",()=>{let i,e;setup(()=>{i=new k,e=i.add(new O),e.stub(I,new P),e.stub(f,{registerExternalOpener:()=>d.None})}),teardown(()=>{i.dispose()}),m(),test("Should not open if there are no openers",async()=>{const r=i.add(e.createInstance(l));r.registerExternalOpenerProvider(new class{async*getOpeners(o){}});const t=p.parse("http://contoso.com"),n=await r.openExternal(t.toString(),{sourceUri:t},c.None);a.strictEqual(n,!1)}),test("Should prompt if there is at least one enabled opener",async()=>{e.stub(x,new y(0));const r=i.add(e.createInstance(l));let t=!1;r.registerExternalOpenerProvider(new class{async*getOpeners(u){yield{id:"disabled-id",label:"disabled",canOpen:async()=>s.None,openExternalUri:async()=>!0},yield{id:"enabled-id",label:"enabled",canOpen:async()=>s.Default,openExternalUri:async()=>(t=!0,!0)}}});const n=p.parse("http://contoso.com"),o=await r.openExternal(n.toString(),{sourceUri:n},c.None);a.strictEqual(o,!0),a.strictEqual(t,!0)}),test("Should automatically pick single preferred opener without prompt",async()=>{const r=i.add(e.createInstance(l));let t=!1;r.registerExternalOpenerProvider(new class{async*getOpeners(u){yield{id:"other-id",label:"other",canOpen:async()=>s.Default,openExternalUri:async()=>!0},yield{id:"preferred-id",label:"preferred",canOpen:async()=>s.Preferred,openExternalUri:async()=>(t=!0,!0)}}});const n=p.parse("http://contoso.com"),o=await r.openExternal(n.toString(),{sourceUri:n},c.None);a.strictEqual(o,!0),a.strictEqual(t,!0)})});
