{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/externalUriOpener/test/common/externalUriOpenerService.test.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport assert from 'assert';\nimport { CancellationToken } from '../../../../../base/common/cancellation.js';\nimport { Disposable, DisposableStore } from '../../../../../base/common/lifecycle.js';\nimport { URI } from '../../../../../base/common/uri.js';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from '../../../../../base/test/common/utils.js';\nimport { ExternalUriOpenerPriority } from '../../../../../editor/common/languages.js';\nimport { IConfigurationService } from '../../../../../platform/configuration/common/configuration.js';\nimport { TestConfigurationService } from '../../../../../platform/configuration/test/common/testConfigurationService.js';\nimport { TestInstantiationService } from '../../../../../platform/instantiation/test/common/instantiationServiceMock.js';\nimport { IOpenerService } from '../../../../../platform/opener/common/opener.js';\nimport { IPickOptions, IQuickInputService, IQuickPickItem, QuickPickInput } from '../../../../../platform/quickinput/common/quickInput.js';\nimport { ExternalUriOpenerService, IExternalOpenerProvider, IExternalUriOpener } from '../../common/externalUriOpenerService.js';\n\n\nclass MockQuickInputService implements Partial<IQuickInputService> {\n\n\tconstructor(\n\t\tprivate readonly pickIndex: number\n\t) { }\n\n\tpublic pick<T extends IQuickPickItem>(picks: Promise<QuickPickInput<T>[]> | QuickPickInput<T>[], options?: IPickOptions<T> & { canPickMany: true }, token?: CancellationToken): Promise<T[]>;\n\tpublic pick<T extends IQuickPickItem>(picks: Promise<QuickPickInput<T>[]> | QuickPickInput<T>[], options?: IPickOptions<T> & { canPickMany: false }, token?: CancellationToken): Promise<T>;\n\tpublic async pick<T extends IQuickPickItem>(picks: Promise<QuickPickInput<T>[]> | QuickPickInput<T>[], options?: Omit<IPickOptions<T>, 'canPickMany'>, token?: CancellationToken): Promise<T | undefined> {\n\t\tconst resolvedPicks = await picks;\n\t\tconst item = resolvedPicks[this.pickIndex];\n\t\tif (item.type === 'separator') {\n\t\t\treturn undefined;\n\t\t}\n\t\treturn item;\n\t}\n\n}\n\nsuite('ExternalUriOpenerService', () => {\n\tlet disposables: DisposableStore;\n\tlet instantiationService: TestInstantiationService;\n\n\tsetup(() => {\n\t\tdisposables = new DisposableStore();\n\t\tinstantiationService = disposables.add(new TestInstantiationService());\n\n\t\tinstantiationService.stub(IConfigurationService, new TestConfigurationService());\n\t\tinstantiationService.stub(IOpenerService, {\n\t\t\tregisterExternalOpener: () => { return Disposable.None; }\n\t\t});\n\t});\n\n\tteardown(() => {\n\t\tdisposables.dispose();\n\t});\n\n\tensureNoDisposablesAreLeakedInTestSuite();\n\n\ttest('Should not open if there are no openers', async () => {\n\t\tconst externalUriOpenerService = disposables.add(instantiationService.createInstance(ExternalUriOpenerService));\n\n\t\texternalUriOpenerService.registerExternalOpenerProvider(new class implements IExternalOpenerProvider {\n\t\t\tasync *getOpeners(_targetUri: URI): AsyncGenerator<IExternalUriOpener> {\n\t\t\t\t// noop\n\t\t\t}\n\t\t});\n\n\t\tconst uri = URI.parse('http://contoso.com');\n\t\tconst didOpen = await externalUriOpenerService.openExternal(uri.toString(), { sourceUri: uri }, CancellationToken.None);\n\t\tassert.strictEqual(didOpen, false);\n\t});\n\n\ttest('Should prompt if there is at least one enabled opener', async () => {\n\t\tinstantiationService.stub(IQuickInputService, new MockQuickInputService(0));\n\n\t\tconst externalUriOpenerService = disposables.add(instantiationService.createInstance(ExternalUriOpenerService));\n\n\t\tlet openedWithEnabled = false;\n\t\texternalUriOpenerService.registerExternalOpenerProvider(new class implements IExternalOpenerProvider {\n\t\t\tasync *getOpeners(_targetUri: URI): AsyncGenerator<IExternalUriOpener> {\n\t\t\t\tyield {\n\t\t\t\t\tid: 'disabled-id',\n\t\t\t\t\tlabel: 'disabled',\n\t\t\t\t\tcanOpen: async () => ExternalUriOpenerPriority.None,\n\t\t\t\t\topenExternalUri: async () => true,\n\t\t\t\t};\n\t\t\t\tyield {\n\t\t\t\t\tid: 'enabled-id',\n\t\t\t\t\tlabel: 'enabled',\n\t\t\t\t\tcanOpen: async () => ExternalUriOpenerPriority.Default,\n\t\t\t\t\topenExternalUri: async () => {\n\t\t\t\t\t\topenedWithEnabled = true;\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t}\n\t\t});\n\n\t\tconst uri = URI.parse('http://contoso.com');\n\t\tconst didOpen = await externalUriOpenerService.openExternal(uri.toString(), { sourceUri: uri }, CancellationToken.None);\n\t\tassert.strictEqual(didOpen, true);\n\t\tassert.strictEqual(openedWithEnabled, true);\n\t});\n\n\ttest('Should automatically pick single preferred opener without prompt', async () => {\n\t\tconst externalUriOpenerService = disposables.add(instantiationService.createInstance(ExternalUriOpenerService));\n\n\t\tlet openedWithPreferred = false;\n\t\texternalUriOpenerService.registerExternalOpenerProvider(new class implements IExternalOpenerProvider {\n\t\t\tasync *getOpeners(_targetUri: URI): AsyncGenerator<IExternalUriOpener> {\n\t\t\t\tyield {\n\t\t\t\t\tid: 'other-id',\n\t\t\t\t\tlabel: 'other',\n\t\t\t\t\tcanOpen: async () => ExternalUriOpenerPriority.Default,\n\t\t\t\t\topenExternalUri: async () => {\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t\tyield {\n\t\t\t\t\tid: 'preferred-id',\n\t\t\t\t\tlabel: 'preferred',\n\t\t\t\t\tcanOpen: async () => ExternalUriOpenerPriority.Preferred,\n\t\t\t\t\topenExternalUri: async () => {\n\t\t\t\t\t\topenedWithPreferred = true;\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t}\n\t\t});\n\n\t\tconst uri = URI.parse('http://contoso.com');\n\t\tconst didOpen = await externalUriOpenerService.openExternal(uri.toString(), { sourceUri: uri }, CancellationToken.None);\n\t\tassert.strictEqual(didOpen, true);\n\t\tassert.strictEqual(openedWithPreferred, true);\n\t});\n});\n"],
  "mappings": "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",
  "names": []
}
