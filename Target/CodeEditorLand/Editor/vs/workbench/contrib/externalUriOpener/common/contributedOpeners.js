var h=Object.defineProperty;var m=Object.getOwnPropertyDescriptor;var g=(a,r,e,t)=>{for(var n=t>1?void 0:t?m(r,e):r,i=a.length-1,s;i>=0;i--)(s=a[i])&&(n=(t?s(r,e,n):s(n))||n);return t&&n&&h(r,e,n),n},d=(a,r)=>(e,t)=>r(e,t,a);import{Disposable as c}from"../../../../base/common/lifecycle.js";import{IStorageService as p,StorageScope as l,StorageTarget as v}from"../../../../platform/storage/common/storage.js";import{Memento as x}from"../../../common/memento.js";import{updateContributedOpeners as _}from"./configuration.js";import{IExtensionService as u}from"../../../services/extensions/common/extensions.js";let o=class extends c{constructor(e,t){super();this._extensionService=t;this._memento=new x(o.STORAGE_ID,e),this._mementoObject=this._memento.getMemento(l.PROFILE,v.MACHINE);for(const[n,i]of Object.entries(this._mementoObject||{}))this.add(n,i.extensionId,{isCurrentlyRegistered:!1});this.invalidateOpenersOnExtensionsChanged(),this._register(this._extensionService.onDidChangeExtensions(()=>this.invalidateOpenersOnExtensionsChanged())),this._register(this._extensionService.onDidChangeExtensionsStatus(()=>this.invalidateOpenersOnExtensionsChanged()))}static STORAGE_ID="externalUriOpeners";_openers=new Map;_memento;_mementoObject;didRegisterOpener(e,t){this.add(e,t,{isCurrentlyRegistered:!0})}add(e,t,n){const i=this._openers.get(e);if(i){i.isCurrentlyRegistered=i.isCurrentlyRegistered||n.isCurrentlyRegistered;return}const s={extensionId:t,isCurrentlyRegistered:n.isCurrentlyRegistered};this._openers.set(e,s),this._mementoObject[e]=s,this._memento.saveMemento(),this.updateSchema()}delete(e){this._openers.delete(e),delete this._mementoObject[e],this._memento.saveMemento(),this.updateSchema()}async invalidateOpenersOnExtensionsChanged(){await this._extensionService.whenInstalledExtensionsRegistered();const e=this._extensionService.extensions;for(const[t,n]of this._openers){const i=e.find(s=>s.identifier.value===n.extensionId);i?this._extensionService.canRemoveExtension(i)||n.isCurrentlyRegistered||this.delete(t):this.delete(t)}}updateSchema(){const e=[],t=[];for(const[n,i]of this._openers)e.push(n),t.push(i.extensionId);_(e,t)}};o=g([d(0,p),d(1,u)],o);export{o as ContributedExternalUriOpenersStore};
