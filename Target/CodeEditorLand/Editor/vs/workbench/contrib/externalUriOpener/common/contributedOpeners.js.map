{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/externalUriOpener/common/contributedOpeners.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Disposable } from \"../../../../base/common/lifecycle.js\";\nimport {\n\tIStorageService,\n\tStorageScope,\n\tStorageTarget,\n} from \"../../../../platform/storage/common/storage.js\";\nimport { Memento } from \"../../../common/memento.js\";\nimport { IExtensionService } from \"../../../services/extensions/common/extensions.js\";\nimport { updateContributedOpeners } from \"./configuration.js\";\n\ninterface RegisteredExternalOpener {\n\treadonly extensionId: string;\n\n\tisCurrentlyRegistered: boolean;\n}\n\ninterface OpenersMemento {\n\t[id: string]: RegisteredExternalOpener;\n}\n\nexport class ContributedExternalUriOpenersStore extends Disposable {\n\tprivate static readonly STORAGE_ID = \"externalUriOpeners\";\n\n\tprivate readonly _openers = new Map<string, RegisteredExternalOpener>();\n\tprivate readonly _memento: Memento;\n\tprivate _mementoObject: OpenersMemento;\n\n\tconstructor(\n\t\t@IStorageService storageService: IStorageService,\n\t\t@IExtensionService\n\t\tprivate readonly _extensionService: IExtensionService,\n\t) {\n\t\tsuper();\n\n\t\tthis._memento = new Memento(\n\t\t\tContributedExternalUriOpenersStore.STORAGE_ID,\n\t\t\tstorageService,\n\t\t);\n\t\tthis._mementoObject = this._memento.getMemento(\n\t\t\tStorageScope.PROFILE,\n\t\t\tStorageTarget.MACHINE,\n\t\t);\n\t\tfor (const [id, value] of Object.entries(this._mementoObject || {})) {\n\t\t\tthis.add(id, value.extensionId, { isCurrentlyRegistered: false });\n\t\t}\n\n\t\tthis.invalidateOpenersOnExtensionsChanged();\n\n\t\tthis._register(\n\t\t\tthis._extensionService.onDidChangeExtensions(() =>\n\t\t\t\tthis.invalidateOpenersOnExtensionsChanged(),\n\t\t\t),\n\t\t);\n\t\tthis._register(\n\t\t\tthis._extensionService.onDidChangeExtensionsStatus(() =>\n\t\t\t\tthis.invalidateOpenersOnExtensionsChanged(),\n\t\t\t),\n\t\t);\n\t}\n\n\tpublic didRegisterOpener(id: string, extensionId: string): void {\n\t\tthis.add(id, extensionId, {\n\t\t\tisCurrentlyRegistered: true,\n\t\t});\n\t}\n\n\tprivate add(\n\t\tid: string,\n\t\textensionId: string,\n\t\toptions: { isCurrentlyRegistered: boolean },\n\t): void {\n\t\tconst existing = this._openers.get(id);\n\t\tif (existing) {\n\t\t\texisting.isCurrentlyRegistered =\n\t\t\t\texisting.isCurrentlyRegistered || options.isCurrentlyRegistered;\n\t\t\treturn;\n\t\t}\n\n\t\tconst entry = {\n\t\t\textensionId,\n\t\t\tisCurrentlyRegistered: options.isCurrentlyRegistered,\n\t\t};\n\t\tthis._openers.set(id, entry);\n\n\t\tthis._mementoObject[id] = entry;\n\t\tthis._memento.saveMemento();\n\n\t\tthis.updateSchema();\n\t}\n\n\tpublic delete(id: string): void {\n\t\tthis._openers.delete(id);\n\n\t\tdelete this._mementoObject[id];\n\t\tthis._memento.saveMemento();\n\n\t\tthis.updateSchema();\n\t}\n\n\tprivate async invalidateOpenersOnExtensionsChanged() {\n\t\tawait this._extensionService.whenInstalledExtensionsRegistered();\n\t\tconst registeredExtensions = this._extensionService.extensions;\n\n\t\tfor (const [id, entry] of this._openers) {\n\t\t\tconst extension = registeredExtensions.find(\n\t\t\t\t(r) => r.identifier.value === entry.extensionId,\n\t\t\t);\n\t\t\tif (extension) {\n\t\t\t\tif (!this._extensionService.canRemoveExtension(extension)) {\n\t\t\t\t\t// The extension is running. We should have registered openers at this point\n\t\t\t\t\tif (!entry.isCurrentlyRegistered) {\n\t\t\t\t\t\tthis.delete(id);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// The opener came from an extension that is no longer enabled/installed\n\t\t\t\tthis.delete(id);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate updateSchema() {\n\t\tconst ids: string[] = [];\n\t\tconst descriptions: string[] = [];\n\n\t\tfor (const [id, entry] of this._openers) {\n\t\t\tids.push(id);\n\t\t\tdescriptions.push(entry.extensionId);\n\t\t}\n\n\t\tupdateContributedOpeners(ids, descriptions);\n\t}\n}\n"],
  "mappings": ";;;;;;;;;;;;AAKA,SAAS,kBAAkB;AAC3B;AAAA,EACC;AAAA,EACA;AAAA,EACA;AAAA,OACM;AACP,SAAS,eAAe;AACxB,SAAS,yBAAyB;AAClC,SAAS,gCAAgC;AAYlC,IAAM,qCAAN,cAAiD,WAAW;AAAA,EAOlE,YACkB,gBAEA,mBAChB;AACD,UAAM;AAFW;AAIjB,SAAK,WAAW,IAAI;AAAA,MACnB,mCAAmC;AAAA,MACnC;AAAA,IACD;AACA,SAAK,iBAAiB,KAAK,SAAS;AAAA,MACnC,aAAa;AAAA,MACb,cAAc;AAAA,IACf;AACA,eAAW,CAAC,IAAI,KAAK,KAAK,OAAO,QAAQ,KAAK,kBAAkB,CAAC,CAAC,GAAG;AACpE,WAAK,IAAI,IAAI,MAAM,aAAa,EAAE,uBAAuB,MAAM,CAAC;AAAA,IACjE;AAEA,SAAK,qCAAqC;AAE1C,SAAK;AAAA,MACJ,KAAK,kBAAkB;AAAA,QAAsB,MAC5C,KAAK,qCAAqC;AAAA,MAC3C;AAAA,IACD;AACA,SAAK;AAAA,MACJ,KAAK,kBAAkB;AAAA,QAA4B,MAClD,KAAK,qCAAqC;AAAA,MAC3C;AAAA,IACD;AAAA,EACD;AAAA,EA/DD,OAyBmE;AAAA;AAAA;AAAA,EAClE,OAAwB,aAAa;AAAA,EAEpB,WAAW,oBAAI,IAAsC;AAAA,EACrD;AAAA,EACT;AAAA,EAmCD,kBAAkB,IAAY,aAA2B;AAC/D,SAAK,IAAI,IAAI,aAAa;AAAA,MACzB,uBAAuB;AAAA,IACxB,CAAC;AAAA,EACF;AAAA,EAEQ,IACP,IACA,aACA,SACO;AACP,UAAM,WAAW,KAAK,SAAS,IAAI,EAAE;AACrC,QAAI,UAAU;AACb,eAAS,wBACR,SAAS,yBAAyB,QAAQ;AAC3C;AAAA,IACD;AAEA,UAAM,QAAQ;AAAA,MACb;AAAA,MACA,uBAAuB,QAAQ;AAAA,IAChC;AACA,SAAK,SAAS,IAAI,IAAI,KAAK;AAE3B,SAAK,eAAe,EAAE,IAAI;AAC1B,SAAK,SAAS,YAAY;AAE1B,SAAK,aAAa;AAAA,EACnB;AAAA,EAEO,OAAO,IAAkB;AAC/B,SAAK,SAAS,OAAO,EAAE;AAEvB,WAAO,KAAK,eAAe,EAAE;AAC7B,SAAK,SAAS,YAAY;AAE1B,SAAK,aAAa;AAAA,EACnB;AAAA,EAEA,MAAc,uCAAuC;AACpD,UAAM,KAAK,kBAAkB,kCAAkC;AAC/D,UAAM,uBAAuB,KAAK,kBAAkB;AAEpD,eAAW,CAAC,IAAI,KAAK,KAAK,KAAK,UAAU;AACxC,YAAM,YAAY,qBAAqB;AAAA,QACtC,CAAC,MAAM,EAAE,WAAW,UAAU,MAAM;AAAA,MACrC;AACA,UAAI,WAAW;AACd,YAAI,CAAC,KAAK,kBAAkB,mBAAmB,SAAS,GAAG;AAE1D,cAAI,CAAC,MAAM,uBAAuB;AACjC,iBAAK,OAAO,EAAE;AAAA,UACf;AAAA,QACD;AAAA,MACD,OAAO;AAEN,aAAK,OAAO,EAAE;AAAA,MACf;AAAA,IACD;AAAA,EACD;AAAA,EAEQ,eAAe;AACtB,UAAM,MAAgB,CAAC;AACvB,UAAM,eAAyB,CAAC;AAEhC,eAAW,CAAC,IAAI,KAAK,KAAK,KAAK,UAAU;AACxC,UAAI,KAAK,EAAE;AACX,mBAAa,KAAK,MAAM,WAAW;AAAA,IACpC;AAEA,6BAAyB,KAAK,YAAY;AAAA,EAC3C;AACD;AAhHa,qCAAN;AAAA,EAQJ;AAAA,EACA;AAAA,GATU;",
  "names": []
}
