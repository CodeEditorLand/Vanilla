{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/externalUriOpener/common/configuration.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport type { IJSONSchema } from \"../../../../base/common/jsonSchema.js\";\nimport * as nls from \"../../../../nls.js\";\nimport {\n\tExtensions,\n\ttype IConfigurationNode,\n\ttype IConfigurationRegistry,\n} from \"../../../../platform/configuration/common/configurationRegistry.js\";\nimport { Registry } from \"../../../../platform/registry/common/platform.js\";\nimport { workbenchConfigurationNodeBase } from \"../../../common/configuration.js\";\n\nexport const defaultExternalUriOpenerId = \"default\";\n\nexport const externalUriOpenersSettingId = \"workbench.externalUriOpeners\";\n\nexport interface ExternalUriOpenersConfiguration {\n\treadonly [uriGlob: string]: string;\n}\n\nconst externalUriOpenerIdSchemaAddition: IJSONSchema = {\n\ttype: \"string\",\n\tenum: [],\n};\n\nconst exampleUriPatterns = `\n- \\`https://microsoft.com\\`: Matches this specific domain using https\n- \\`https://microsoft.com:8080\\`: Matches this specific domain on this port using https\n- \\`https://microsoft.com:*\\`: Matches this specific domain on any port using https\n- \\`https://microsoft.com/foo\\`: Matches \\`https://microsoft.com/foo\\` and \\`https://microsoft.com/foo/bar\\`, but not \\`https://microsoft.com/foobar\\` or \\`https://microsoft.com/bar\\`\n- \\`https://*.microsoft.com\\`: Match all domains ending in \\`microsoft.com\\` using https\n- \\`microsoft.com\\`: Match this specific domain using either http or https\n- \\`*.microsoft.com\\`: Match all domains ending in \\`microsoft.com\\` using either http or https\n- \\`http://192.168.0.1\\`: Matches this specific IP using http\n- \\`http://192.168.0.*\\`: Matches all IP's with this prefix using http\n- \\`*\\`: Match all domains using either http or https`;\n\nexport const externalUriOpenersConfigurationNode: IConfigurationNode = {\n\t...workbenchConfigurationNodeBase,\n\tproperties: {\n\t\t[externalUriOpenersSettingId]: {\n\t\t\ttype: \"object\",\n\t\t\tmarkdownDescription: nls.localize(\n\t\t\t\t\"externalUriOpeners\",\n\t\t\t\t\"Configure the opener to use for external URIs (http, https).\",\n\t\t\t),\n\t\t\tdefaultSnippets: [\n\t\t\t\t{\n\t\t\t\t\tbody: {\n\t\t\t\t\t\t\"example.com\": \"$1\",\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t],\n\t\t\tadditionalProperties: {\n\t\t\t\tanyOf: [\n\t\t\t\t\t{\n\t\t\t\t\t\ttype: \"string\",\n\t\t\t\t\t\tmarkdownDescription: nls.localize(\n\t\t\t\t\t\t\t\"externalUriOpeners.uri\",\n\t\t\t\t\t\t\t\"Map URI pattern to an opener id.\\nExample patterns: \\n{0}\",\n\t\t\t\t\t\t\texampleUriPatterns,\n\t\t\t\t\t\t),\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\ttype: \"string\",\n\t\t\t\t\t\tmarkdownDescription: nls.localize(\n\t\t\t\t\t\t\t\"externalUriOpeners.uri\",\n\t\t\t\t\t\t\t\"Map URI pattern to an opener id.\\nExample patterns: \\n{0}\",\n\t\t\t\t\t\t\texampleUriPatterns,\n\t\t\t\t\t\t),\n\t\t\t\t\t\tenum: [defaultExternalUriOpenerId],\n\t\t\t\t\t\tenumDescriptions: [\n\t\t\t\t\t\t\tnls.localize(\n\t\t\t\t\t\t\t\t\"externalUriOpeners.defaultId\",\n\t\t\t\t\t\t\t\t\"Open using VS Code's standard opener.\",\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t],\n\t\t\t\t\t},\n\t\t\t\t\texternalUriOpenerIdSchemaAddition,\n\t\t\t\t],\n\t\t\t},\n\t\t},\n\t},\n};\n\nexport function updateContributedOpeners(\n\tenumValues: string[],\n\tenumDescriptions: string[],\n): void {\n\texternalUriOpenerIdSchemaAddition.enum = enumValues;\n\texternalUriOpenerIdSchemaAddition.enumDescriptions = enumDescriptions;\n\n\tRegistry.as<IConfigurationRegistry>(\n\t\tExtensions.Configuration,\n\t).notifyConfigurationSchemaUpdated(externalUriOpenersConfigurationNode);\n}\n"],
  "mappings": ";;AAMA,YAAY,SAAS;AACrB;AAAA,EACC;AAAA,OAGM;AACP,SAAS,gBAAgB;AACzB,SAAS,sCAAsC;AAExC,MAAM,6BAA6B;AAEnC,MAAM,8BAA8B;AAM3C,MAAM,oCAAiD;AAAA,EACtD,MAAM;AAAA,EACN,MAAM,CAAC;AACR;AAEA,MAAM,qBAAqB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAYpB,MAAM,sCAA0D;AAAA,EACtE,GAAG;AAAA,EACH,YAAY;AAAA,IACX,CAAC,2BAA2B,GAAG;AAAA,MAC9B,MAAM;AAAA,MACN,qBAAqB,IAAI;AAAA,QACxB;AAAA,QACA;AAAA,MACD;AAAA,MACA,iBAAiB;AAAA,QAChB;AAAA,UACC,MAAM;AAAA,YACL,eAAe;AAAA,UAChB;AAAA,QACD;AAAA,MACD;AAAA,MACA,sBAAsB;AAAA,QACrB,OAAO;AAAA,UACN;AAAA,YACC,MAAM;AAAA,YACN,qBAAqB,IAAI;AAAA,cACxB;AAAA,cACA;AAAA,cACA;AAAA,YACD;AAAA,UACD;AAAA,UACA;AAAA,YACC,MAAM;AAAA,YACN,qBAAqB,IAAI;AAAA,cACxB;AAAA,cACA;AAAA,cACA;AAAA,YACD;AAAA,YACA,MAAM,CAAC,0BAA0B;AAAA,YACjC,kBAAkB;AAAA,cACjB,IAAI;AAAA,gBACH;AAAA,gBACA;AAAA,cACD;AAAA,YACD;AAAA,UACD;AAAA,UACA;AAAA,QACD;AAAA,MACD;AAAA,IACD;AAAA,EACD;AACD;AAEO,SAAS,yBACf,YACA,kBACO;AACP,oCAAkC,OAAO;AACzC,oCAAkC,mBAAmB;AAErD,WAAS;AAAA,IACR,WAAW;AAAA,EACZ,EAAE,iCAAiC,mCAAmC;AACvE;AAVgB;",
  "names": []
}
