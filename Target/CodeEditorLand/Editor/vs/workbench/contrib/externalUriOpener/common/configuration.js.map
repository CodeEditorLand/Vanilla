{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/externalUriOpener/common/configuration.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IConfigurationNode, IConfigurationRegistry, Extensions } from '../../../../platform/configuration/common/configurationRegistry.js';\nimport { workbenchConfigurationNodeBase } from '../../../common/configuration.js';\nimport * as nls from '../../../../nls.js';\nimport { IJSONSchema } from '../../../../base/common/jsonSchema.js';\nimport { Registry } from '../../../../platform/registry/common/platform.js';\n\nexport const defaultExternalUriOpenerId = 'default';\n\nexport const externalUriOpenersSettingId = 'workbench.externalUriOpeners';\n\nexport interface ExternalUriOpenersConfiguration {\n\treadonly [uriGlob: string]: string;\n}\n\nconst externalUriOpenerIdSchemaAddition: IJSONSchema = {\n\ttype: 'string',\n\tenum: []\n};\n\nconst exampleUriPatterns = `\n- \\`https://microsoft.com\\`: Matches this specific domain using https\n- \\`https://microsoft.com:8080\\`: Matches this specific domain on this port using https\n- \\`https://microsoft.com:*\\`: Matches this specific domain on any port using https\n- \\`https://microsoft.com/foo\\`: Matches \\`https://microsoft.com/foo\\` and \\`https://microsoft.com/foo/bar\\`, but not \\`https://microsoft.com/foobar\\` or \\`https://microsoft.com/bar\\`\n- \\`https://*.microsoft.com\\`: Match all domains ending in \\`microsoft.com\\` using https\n- \\`microsoft.com\\`: Match this specific domain using either http or https\n- \\`*.microsoft.com\\`: Match all domains ending in \\`microsoft.com\\` using either http or https\n- \\`http://192.168.0.1\\`: Matches this specific IP using http\n- \\`http://192.168.0.*\\`: Matches all IP's with this prefix using http\n- \\`*\\`: Match all domains using either http or https`;\n\nexport const externalUriOpenersConfigurationNode: IConfigurationNode = {\n\t...workbenchConfigurationNodeBase,\n\tproperties: {\n\t\t[externalUriOpenersSettingId]: {\n\t\t\ttype: 'object',\n\t\t\tmarkdownDescription: nls.localize('externalUriOpeners', \"Configure the opener to use for external URIs (http, https).\"),\n\t\t\tdefaultSnippets: [{\n\t\t\t\tbody: {\n\t\t\t\t\t'example.com': '$1'\n\t\t\t\t}\n\t\t\t}],\n\t\t\tadditionalProperties: {\n\t\t\t\tanyOf: [\n\t\t\t\t\t{\n\t\t\t\t\t\ttype: 'string',\n\t\t\t\t\t\tmarkdownDescription: nls.localize('externalUriOpeners.uri', \"Map URI pattern to an opener id.\\nExample patterns: \\n{0}\", exampleUriPatterns),\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\ttype: 'string',\n\t\t\t\t\t\tmarkdownDescription: nls.localize('externalUriOpeners.uri', \"Map URI pattern to an opener id.\\nExample patterns: \\n{0}\", exampleUriPatterns),\n\t\t\t\t\t\tenum: [defaultExternalUriOpenerId],\n\t\t\t\t\t\tenumDescriptions: [nls.localize('externalUriOpeners.defaultId', \"Open using VS Code's standard opener.\")],\n\t\t\t\t\t},\n\t\t\t\t\texternalUriOpenerIdSchemaAddition\n\t\t\t\t]\n\t\t\t}\n\t\t}\n\t}\n};\n\nexport function updateContributedOpeners(enumValues: string[], enumDescriptions: string[]): void {\n\texternalUriOpenerIdSchemaAddition.enum = enumValues;\n\texternalUriOpenerIdSchemaAddition.enumDescriptions = enumDescriptions;\n\n\tRegistry.as<IConfigurationRegistry>(Extensions.Configuration)\n\t\t.notifyConfigurationSchemaUpdated(externalUriOpenersConfigurationNode);\n}\n"],
  "mappings": ";;AAKA,SAAS,oBAAoB,wBAAwB,kBAAkB;AACvE,SAAS,sCAAsC;AAC/C,YAAY,SAAS;AACrB,SAAS,mBAAmB;AAC5B,SAAS,gBAAgB;AAElB,MAAM,6BAA6B;AAEnC,MAAM,8BAA8B;AAM3C,MAAM,oCAAiD;AAAA,EACtD,MAAM;AAAA,EACN,MAAM,CAAC;AACR;AAEA,MAAM,qBAAqB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAYpB,MAAM,sCAA0D;AAAA,EACtE,GAAG;AAAA,EACH,YAAY;AAAA,IACX,CAAC,2BAA2B,GAAG;AAAA,MAC9B,MAAM;AAAA,MACN,qBAAqB,IAAI,SAAS,sBAAsB,8DAA8D;AAAA,MACtH,iBAAiB,CAAC;AAAA,QACjB,MAAM;AAAA,UACL,eAAe;AAAA,QAChB;AAAA,MACD,CAAC;AAAA,MACD,sBAAsB;AAAA,QACrB,OAAO;AAAA,UACN;AAAA,YACC,MAAM;AAAA,YACN,qBAAqB,IAAI,SAAS,0BAA0B,6DAA6D,kBAAkB;AAAA,UAC5I;AAAA,UACA;AAAA,YACC,MAAM;AAAA,YACN,qBAAqB,IAAI,SAAS,0BAA0B,6DAA6D,kBAAkB;AAAA,YAC3I,MAAM,CAAC,0BAA0B;AAAA,YACjC,kBAAkB,CAAC,IAAI,SAAS,gCAAgC,uCAAuC,CAAC;AAAA,UACzG;AAAA,UACA;AAAA,QACD;AAAA,MACD;AAAA,IACD;AAAA,EACD;AACD;AAEO,SAAS,yBAAyB,YAAsB,kBAAkC;AAChG,oCAAkC,OAAO;AACzC,oCAAkC,mBAAmB;AAErD,WAAS,GAA2B,WAAW,aAAa,EAC1D,iCAAiC,mCAAmC;AACvE;AANgB;",
  "names": []
}
