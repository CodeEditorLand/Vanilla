import*as t from"../../../../nls.js";import{Extensions as r}from"../../../../platform/configuration/common/configurationRegistry.js";import{Registry as s}from"../../../../platform/registry/common/platform.js";import{workbenchConfigurationNodeBase as a}from"../../../common/configuration.js";const p="default",c="workbench.externalUriOpeners",e={type:"string",enum:[]},o="\n- `https://microsoft.com`: Matches this specific domain using https\n- `https://microsoft.com:8080`: Matches this specific domain on this port using https\n- `https://microsoft.com:*`: Matches this specific domain on any port using https\n- `https://microsoft.com/foo`: Matches `https://microsoft.com/foo` and `https://microsoft.com/foo/bar`, but not `https://microsoft.com/foobar` or `https://microsoft.com/bar`\n- `https://*.microsoft.com`: Match all domains ending in `microsoft.com` using https\n- `microsoft.com`: Match this specific domain using either http or https\n- `*.microsoft.com`: Match all domains ending in `microsoft.com` using either http or https\n- `http://192.168.0.1`: Matches this specific IP using http\n- `http://192.168.0.*`: Matches all IP's with this prefix using http\n- `*`: Match all domains using either http or https",m={...a,properties:{[c]:{type:"object",markdownDescription:t.localize("externalUriOpeners","Configure the opener to use for external URIs (http, https)."),defaultSnippets:[{body:{"example.com":"$1"}}],additionalProperties:{anyOf:[{type:"string",markdownDescription:t.localize("externalUriOpeners.uri",`Map URI pattern to an opener id.
Example patterns: 
{0}`,o)},{type:"string",markdownDescription:t.localize("externalUriOpeners.uri",`Map URI pattern to an opener id.
Example patterns: 
{0}`,o),enum:[p],enumDescriptions:[t.localize("externalUriOpeners.defaultId","Open using VS Code's standard opener.")]},e]}}}};function l(i,n){e.enum=i,e.enumDescriptions=n,s.as(r.Configuration).notifyConfigurationSchemaUpdated(m)}export{p as defaultExternalUriOpenerId,m as externalUriOpenersConfigurationNode,c as externalUriOpenersSettingId,l as updateContributedOpeners};
