{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/externalUriOpener/common/externalUriOpenerService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport type { CancellationToken } from \"../../../../base/common/cancellation.js\";\nimport { Iterable } from \"../../../../base/common/iterator.js\";\nimport {\n\tDisposable,\n\ttype IDisposable,\n} from \"../../../../base/common/lifecycle.js\";\nimport { LinkedList } from \"../../../../base/common/linkedList.js\";\nimport { isWeb } from \"../../../../base/common/platform.js\";\nimport { URI } from \"../../../../base/common/uri.js\";\nimport * as languages from \"../../../../editor/common/languages.js\";\nimport * as nls from \"../../../../nls.js\";\nimport { IConfigurationService } from \"../../../../platform/configuration/common/configuration.js\";\nimport { createDecorator } from \"../../../../platform/instantiation/common/instantiation.js\";\nimport { ILogService } from \"../../../../platform/log/common/log.js\";\nimport {\n\ttype IExternalOpener,\n\tIOpenerService,\n} from \"../../../../platform/opener/common/opener.js\";\nimport {\n\tIQuickInputService,\n\ttype IQuickPickItem,\n\ttype IQuickPickSeparator,\n} from \"../../../../platform/quickinput/common/quickInput.js\";\nimport { IPreferencesService } from \"../../../services/preferences/common/preferences.js\";\nimport { testUrlMatchesGlob } from \"../../url/common/urlGlob.js\";\nimport {\n\ttype ExternalUriOpenersConfiguration,\n\tdefaultExternalUriOpenerId,\n\texternalUriOpenersSettingId,\n} from \"./configuration.js\";\n\nexport const IExternalUriOpenerService =\n\tcreateDecorator<IExternalUriOpenerService>(\"externalUriOpenerService\");\n\nexport interface IExternalOpenerProvider {\n\tgetOpeners(targetUri: URI): AsyncIterable<IExternalUriOpener>;\n}\n\nexport interface IExternalUriOpener {\n\treadonly id: string;\n\treadonly label: string;\n\n\tcanOpen(\n\t\turi: URI,\n\t\ttoken: CancellationToken,\n\t): Promise<languages.ExternalUriOpenerPriority>;\n\topenExternalUri(\n\t\turi: URI,\n\t\tctx: { sourceUri: URI },\n\t\ttoken: CancellationToken,\n\t): Promise<boolean>;\n}\n\nexport interface IExternalUriOpenerService {\n\treadonly _serviceBrand: undefined;\n\n\t/**\n\t * Registers a provider for external resources openers.\n\t */\n\tregisterExternalOpenerProvider(\n\t\tprovider: IExternalOpenerProvider,\n\t): IDisposable;\n\n\t/**\n\t * Get the configured IExternalUriOpener for the the uri.\n\t * If there is no opener configured, then returns the first opener that can handle the uri.\n\t */\n\tgetOpener(\n\t\turi: URI,\n\t\tctx: { sourceUri: URI; preferredOpenerId?: string },\n\t\ttoken: CancellationToken,\n\t): Promise<IExternalUriOpener | undefined>;\n}\n\nexport class ExternalUriOpenerService\n\textends Disposable\n\timplements IExternalUriOpenerService, IExternalOpener\n{\n\tpublic readonly _serviceBrand: undefined;\n\n\tprivate readonly _providers = new LinkedList<IExternalOpenerProvider>();\n\n\tconstructor(\n\t\t@IOpenerService openerService: IOpenerService,\n\t\t@IConfigurationService\n\t\tprivate readonly configurationService: IConfigurationService,\n\t\t@ILogService private readonly logService: ILogService,\n\t\t@IPreferencesService\n\t\tprivate readonly preferencesService: IPreferencesService,\n\t\t@IQuickInputService\n\t\tprivate readonly quickInputService: IQuickInputService,\n\t) {\n\t\tsuper();\n\t\tthis._register(openerService.registerExternalOpener(this));\n\t}\n\n\tregisterExternalOpenerProvider(\n\t\tprovider: IExternalOpenerProvider,\n\t): IDisposable {\n\t\tconst remove = this._providers.push(provider);\n\t\treturn { dispose: remove };\n\t}\n\n\tprivate async getOpeners(\n\t\ttargetUri: URI,\n\t\tallowOptional: boolean,\n\t\tctx: { sourceUri: URI; preferredOpenerId?: string },\n\t\ttoken: CancellationToken,\n\t): Promise<IExternalUriOpener[]> {\n\t\tconst allOpeners = await this.getAllOpenersForUri(targetUri);\n\n\t\tif (allOpeners.size === 0) {\n\t\t\treturn [];\n\t\t}\n\n\t\t// First see if we have a preferredOpener\n\t\tif (ctx.preferredOpenerId) {\n\t\t\tif (ctx.preferredOpenerId === defaultExternalUriOpenerId) {\n\t\t\t\treturn [];\n\t\t\t}\n\n\t\t\tconst preferredOpener = allOpeners.get(ctx.preferredOpenerId);\n\t\t\tif (preferredOpener) {\n\t\t\t\t// Skip the `canOpen` check here since the opener was specifically requested.\n\t\t\t\treturn [preferredOpener];\n\t\t\t}\n\t\t}\n\n\t\t// Check to see if we have a configured opener\n\t\tconst configuredOpener = this.getConfiguredOpenerForUri(\n\t\t\tallOpeners,\n\t\t\ttargetUri,\n\t\t);\n\t\tif (configuredOpener) {\n\t\t\t// Skip the `canOpen` check here since the opener was specifically requested.\n\t\t\treturn configuredOpener === defaultExternalUriOpenerId\n\t\t\t\t? []\n\t\t\t\t: [configuredOpener];\n\t\t}\n\n\t\t// Then check to see if there is a valid opener\n\t\tconst validOpeners: Array<{\n\t\t\topener: IExternalUriOpener;\n\t\t\tpriority: languages.ExternalUriOpenerPriority;\n\t\t}> = [];\n\t\tawait Promise.all(\n\t\t\tArray.from(allOpeners.values()).map(async (opener) => {\n\t\t\t\tlet priority: languages.ExternalUriOpenerPriority;\n\t\t\t\ttry {\n\t\t\t\t\tpriority = await opener.canOpen(ctx.sourceUri, token);\n\t\t\t\t} catch (e) {\n\t\t\t\t\tthis.logService.error(e);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tswitch (priority) {\n\t\t\t\t\tcase languages.ExternalUriOpenerPriority.Option:\n\t\t\t\t\tcase languages.ExternalUriOpenerPriority.Default:\n\t\t\t\t\tcase languages.ExternalUriOpenerPriority.Preferred:\n\t\t\t\t\t\tvalidOpeners.push({ opener, priority });\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}),\n\t\t);\n\n\t\tif (validOpeners.length === 0) {\n\t\t\treturn [];\n\t\t}\n\n\t\t// See if we have a preferred opener first\n\t\tconst preferred = validOpeners\n\t\t\t.filter(\n\t\t\t\t(x) =>\n\t\t\t\t\tx.priority ===\n\t\t\t\t\tlanguages.ExternalUriOpenerPriority.Preferred,\n\t\t\t)\n\t\t\t.at(0);\n\t\tif (preferred) {\n\t\t\treturn [preferred.opener];\n\t\t}\n\n\t\t// See if we only have optional openers, use the default opener\n\t\tif (\n\t\t\t!allowOptional &&\n\t\t\tvalidOpeners.every(\n\t\t\t\t(x) =>\n\t\t\t\t\tx.priority === languages.ExternalUriOpenerPriority.Option,\n\t\t\t)\n\t\t) {\n\t\t\treturn [];\n\t\t}\n\n\t\treturn validOpeners.map((value) => value.opener);\n\t}\n\n\tasync openExternal(\n\t\thref: string,\n\t\tctx: { sourceUri: URI; preferredOpenerId?: string },\n\t\ttoken: CancellationToken,\n\t): Promise<boolean> {\n\t\tconst targetUri = typeof href === \"string\" ? URI.parse(href) : href;\n\n\t\tconst allOpeners = await this.getOpeners(targetUri, false, ctx, token);\n\t\tif (allOpeners.length === 0) {\n\t\t\treturn false;\n\t\t} else if (allOpeners.length === 1) {\n\t\t\treturn allOpeners[0].openExternalUri(targetUri, ctx, token);\n\t\t}\n\n\t\t// Otherwise prompt\n\t\treturn this.showOpenerPrompt(allOpeners, targetUri, ctx, token);\n\t}\n\n\tasync getOpener(\n\t\ttargetUri: URI,\n\t\tctx: { sourceUri: URI; preferredOpenerId?: string },\n\t\ttoken: CancellationToken,\n\t): Promise<IExternalUriOpener | undefined> {\n\t\tconst allOpeners = await this.getOpeners(targetUri, true, ctx, token);\n\t\tif (allOpeners.length >= 1) {\n\t\t\treturn allOpeners[0];\n\t\t}\n\t\treturn undefined;\n\t}\n\n\tprivate async getAllOpenersForUri(\n\t\ttargetUri: URI,\n\t): Promise<Map<string, IExternalUriOpener>> {\n\t\tconst allOpeners = new Map<string, IExternalUriOpener>();\n\t\tawait Promise.all(\n\t\t\tIterable.map(this._providers, async (provider) => {\n\t\t\t\tfor await (const opener of provider.getOpeners(targetUri)) {\n\t\t\t\t\tallOpeners.set(opener.id, opener);\n\t\t\t\t}\n\t\t\t}),\n\t\t);\n\t\treturn allOpeners;\n\t}\n\n\tprivate getConfiguredOpenerForUri(\n\t\topeners: Map<string, IExternalUriOpener>,\n\t\ttargetUri: URI,\n\t): IExternalUriOpener | \"default\" | undefined {\n\t\tconst config =\n\t\t\tthis.configurationService.getValue<ExternalUriOpenersConfiguration>(\n\t\t\t\texternalUriOpenersSettingId,\n\t\t\t) || {};\n\t\tfor (const [uriGlob, id] of Object.entries(config)) {\n\t\t\tif (testUrlMatchesGlob(targetUri, uriGlob)) {\n\t\t\t\tif (id === defaultExternalUriOpenerId) {\n\t\t\t\t\treturn \"default\";\n\t\t\t\t}\n\n\t\t\t\tconst entry = openers.get(id);\n\t\t\t\tif (entry) {\n\t\t\t\t\treturn entry;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn undefined;\n\t}\n\n\tprivate async showOpenerPrompt(\n\t\topeners: ReadonlyArray<IExternalUriOpener>,\n\t\ttargetUri: URI,\n\t\tctx: { sourceUri: URI },\n\t\ttoken: CancellationToken,\n\t): Promise<boolean> {\n\t\ttype PickItem = IQuickPickItem & {\n\t\t\topener?: IExternalUriOpener | \"configureDefault\";\n\t\t};\n\n\t\tconst items: Array<PickItem | IQuickPickSeparator> = openers.map(\n\t\t\t(opener): PickItem => {\n\t\t\t\treturn {\n\t\t\t\t\tlabel: opener.label,\n\t\t\t\t\topener: opener,\n\t\t\t\t};\n\t\t\t},\n\t\t);\n\t\titems.push(\n\t\t\t{\n\t\t\t\tlabel: isWeb\n\t\t\t\t\t? nls.localize(\n\t\t\t\t\t\t\t\"selectOpenerDefaultLabel.web\",\n\t\t\t\t\t\t\t\"Open in new browser window\",\n\t\t\t\t\t\t)\n\t\t\t\t\t: nls.localize(\n\t\t\t\t\t\t\t\"selectOpenerDefaultLabel\",\n\t\t\t\t\t\t\t\"Open in default browser\",\n\t\t\t\t\t\t),\n\t\t\t\topener: undefined,\n\t\t\t},\n\t\t\t{ type: \"separator\" },\n\t\t\t{\n\t\t\t\tlabel: nls.localize(\n\t\t\t\t\t\"selectOpenerConfigureTitle\",\n\t\t\t\t\t\"Configure default opener...\",\n\t\t\t\t),\n\t\t\t\topener: \"configureDefault\",\n\t\t\t},\n\t\t);\n\n\t\tconst picked = await this.quickInputService.pick(items, {\n\t\t\tplaceHolder: nls.localize(\n\t\t\t\t\"selectOpenerPlaceHolder\",\n\t\t\t\t\"How would you like to open: {0}\",\n\t\t\t\ttargetUri.toString(),\n\t\t\t),\n\t\t});\n\n\t\tif (!picked) {\n\t\t\t// Still cancel the default opener here since we prompted the user\n\t\t\treturn true;\n\t\t}\n\n\t\tif (typeof picked.opener === \"undefined\") {\n\t\t\treturn false; // Fallback to default opener\n\t\t} else if (picked.opener === \"configureDefault\") {\n\t\t\tawait this.preferencesService.openUserSettings({\n\t\t\t\tjsonEditor: true,\n\t\t\t\trevealSetting: { key: externalUriOpenersSettingId, edit: true },\n\t\t\t});\n\t\t\treturn true;\n\t\t} else {\n\t\t\treturn picked.opener.openExternalUri(targetUri, ctx, token);\n\t\t}\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
