{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/externalUriOpener/common/externalUriOpenerService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CancellationToken } from '../../../../base/common/cancellation.js';\nimport { Iterable } from '../../../../base/common/iterator.js';\nimport { Disposable, IDisposable } from '../../../../base/common/lifecycle.js';\nimport { LinkedList } from '../../../../base/common/linkedList.js';\nimport { isWeb } from '../../../../base/common/platform.js';\nimport { URI } from '../../../../base/common/uri.js';\nimport * as languages from '../../../../editor/common/languages.js';\nimport * as nls from '../../../../nls.js';\nimport { IConfigurationService } from '../../../../platform/configuration/common/configuration.js';\nimport { createDecorator } from '../../../../platform/instantiation/common/instantiation.js';\nimport { ILogService } from '../../../../platform/log/common/log.js';\nimport { IExternalOpener, IOpenerService } from '../../../../platform/opener/common/opener.js';\nimport { IQuickInputService, IQuickPickItem, IQuickPickSeparator } from '../../../../platform/quickinput/common/quickInput.js';\nimport { defaultExternalUriOpenerId, ExternalUriOpenersConfiguration, externalUriOpenersSettingId } from './configuration.js';\nimport { testUrlMatchesGlob } from '../../url/common/urlGlob.js';\nimport { IPreferencesService } from '../../../services/preferences/common/preferences.js';\n\n\nexport const IExternalUriOpenerService = createDecorator<IExternalUriOpenerService>('externalUriOpenerService');\n\n\nexport interface IExternalOpenerProvider {\n\tgetOpeners(targetUri: URI): AsyncIterable<IExternalUriOpener>;\n}\n\nexport interface IExternalUriOpener {\n\treadonly id: string;\n\treadonly label: string;\n\n\tcanOpen(uri: URI, token: CancellationToken): Promise<languages.ExternalUriOpenerPriority>;\n\topenExternalUri(uri: URI, ctx: { sourceUri: URI }, token: CancellationToken): Promise<boolean>;\n}\n\nexport interface IExternalUriOpenerService {\n\treadonly _serviceBrand: undefined;\n\n\t/**\n\t * Registers a provider for external resources openers.\n\t */\n\tregisterExternalOpenerProvider(provider: IExternalOpenerProvider): IDisposable;\n\n\t/**\n\t * Get the configured IExternalUriOpener for the the uri.\n\t * If there is no opener configured, then returns the first opener that can handle the uri.\n\t */\n\tgetOpener(uri: URI, ctx: { sourceUri: URI; preferredOpenerId?: string }, token: CancellationToken): Promise<IExternalUriOpener | undefined>;\n}\n\nexport class ExternalUriOpenerService extends Disposable implements IExternalUriOpenerService, IExternalOpener {\n\n\tpublic readonly _serviceBrand: undefined;\n\n\tprivate readonly _providers = new LinkedList<IExternalOpenerProvider>();\n\n\tconstructor(\n\t\t@IOpenerService openerService: IOpenerService,\n\t\t@IConfigurationService private readonly configurationService: IConfigurationService,\n\t\t@ILogService private readonly logService: ILogService,\n\t\t@IPreferencesService private readonly preferencesService: IPreferencesService,\n\t\t@IQuickInputService private readonly quickInputService: IQuickInputService,\n\t) {\n\t\tsuper();\n\t\tthis._register(openerService.registerExternalOpener(this));\n\t}\n\n\tregisterExternalOpenerProvider(provider: IExternalOpenerProvider): IDisposable {\n\t\tconst remove = this._providers.push(provider);\n\t\treturn { dispose: remove };\n\t}\n\n\tprivate async getOpeners(targetUri: URI, allowOptional: boolean, ctx: { sourceUri: URI; preferredOpenerId?: string }, token: CancellationToken): Promise<IExternalUriOpener[]> {\n\t\tconst allOpeners = await this.getAllOpenersForUri(targetUri);\n\n\t\tif (allOpeners.size === 0) {\n\t\t\treturn [];\n\t\t}\n\n\t\t// First see if we have a preferredOpener\n\t\tif (ctx.preferredOpenerId) {\n\t\t\tif (ctx.preferredOpenerId === defaultExternalUriOpenerId) {\n\t\t\t\treturn [];\n\t\t\t}\n\n\t\t\tconst preferredOpener = allOpeners.get(ctx.preferredOpenerId);\n\t\t\tif (preferredOpener) {\n\t\t\t\t// Skip the `canOpen` check here since the opener was specifically requested.\n\t\t\t\treturn [preferredOpener];\n\t\t\t}\n\t\t}\n\n\t\t// Check to see if we have a configured opener\n\t\tconst configuredOpener = this.getConfiguredOpenerForUri(allOpeners, targetUri);\n\t\tif (configuredOpener) {\n\t\t\t// Skip the `canOpen` check here since the opener was specifically requested.\n\t\t\treturn configuredOpener === defaultExternalUriOpenerId ? [] : [configuredOpener];\n\t\t}\n\n\t\t// Then check to see if there is a valid opener\n\t\tconst validOpeners: Array<{ opener: IExternalUriOpener; priority: languages.ExternalUriOpenerPriority }> = [];\n\t\tawait Promise.all(Array.from(allOpeners.values()).map(async opener => {\n\t\t\tlet priority: languages.ExternalUriOpenerPriority;\n\t\t\ttry {\n\t\t\t\tpriority = await opener.canOpen(ctx.sourceUri, token);\n\t\t\t} catch (e) {\n\t\t\t\tthis.logService.error(e);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tswitch (priority) {\n\t\t\t\tcase languages.ExternalUriOpenerPriority.Option:\n\t\t\t\tcase languages.ExternalUriOpenerPriority.Default:\n\t\t\t\tcase languages.ExternalUriOpenerPriority.Preferred:\n\t\t\t\t\tvalidOpeners.push({ opener, priority });\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}));\n\n\t\tif (validOpeners.length === 0) {\n\t\t\treturn [];\n\t\t}\n\n\t\t// See if we have a preferred opener first\n\t\tconst preferred = validOpeners.filter(x => x.priority === languages.ExternalUriOpenerPriority.Preferred).at(0);\n\t\tif (preferred) {\n\t\t\treturn [preferred.opener];\n\t\t}\n\n\t\t// See if we only have optional openers, use the default opener\n\t\tif (!allowOptional && validOpeners.every(x => x.priority === languages.ExternalUriOpenerPriority.Option)) {\n\t\t\treturn [];\n\t\t}\n\n\t\treturn validOpeners.map(value => value.opener);\n\t}\n\n\tasync openExternal(href: string, ctx: { sourceUri: URI; preferredOpenerId?: string }, token: CancellationToken): Promise<boolean> {\n\n\t\tconst targetUri = typeof href === 'string' ? URI.parse(href) : href;\n\n\t\tconst allOpeners = await this.getOpeners(targetUri, false, ctx, token);\n\t\tif (allOpeners.length === 0) {\n\t\t\treturn false;\n\t\t} else if (allOpeners.length === 1) {\n\t\t\treturn allOpeners[0].openExternalUri(targetUri, ctx, token);\n\t\t}\n\n\t\t// Otherwise prompt\n\t\treturn this.showOpenerPrompt(allOpeners, targetUri, ctx, token);\n\t}\n\n\tasync getOpener(targetUri: URI, ctx: { sourceUri: URI; preferredOpenerId?: string }, token: CancellationToken): Promise<IExternalUriOpener | undefined> {\n\t\tconst allOpeners = await this.getOpeners(targetUri, true, ctx, token);\n\t\tif (allOpeners.length >= 1) {\n\t\t\treturn allOpeners[0];\n\t\t}\n\t\treturn undefined;\n\t}\n\n\tprivate async getAllOpenersForUri(targetUri: URI): Promise<Map<string, IExternalUriOpener>> {\n\t\tconst allOpeners = new Map<string, IExternalUriOpener>();\n\t\tawait Promise.all(Iterable.map(this._providers, async (provider) => {\n\t\t\tfor await (const opener of provider.getOpeners(targetUri)) {\n\t\t\t\tallOpeners.set(opener.id, opener);\n\t\t\t}\n\t\t}));\n\t\treturn allOpeners;\n\t}\n\n\tprivate getConfiguredOpenerForUri(openers: Map<string, IExternalUriOpener>, targetUri: URI): IExternalUriOpener | 'default' | undefined {\n\t\tconst config = this.configurationService.getValue<ExternalUriOpenersConfiguration>(externalUriOpenersSettingId) || {};\n\t\tfor (const [uriGlob, id] of Object.entries(config)) {\n\t\t\tif (testUrlMatchesGlob(targetUri, uriGlob)) {\n\t\t\t\tif (id === defaultExternalUriOpenerId) {\n\t\t\t\t\treturn 'default';\n\t\t\t\t}\n\n\t\t\t\tconst entry = openers.get(id);\n\t\t\t\tif (entry) {\n\t\t\t\t\treturn entry;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn undefined;\n\t}\n\n\tprivate async showOpenerPrompt(\n\t\topeners: ReadonlyArray<IExternalUriOpener>,\n\t\ttargetUri: URI,\n\t\tctx: { sourceUri: URI },\n\t\ttoken: CancellationToken\n\t): Promise<boolean> {\n\t\ttype PickItem = IQuickPickItem & { opener?: IExternalUriOpener | 'configureDefault' };\n\n\t\tconst items: Array<PickItem | IQuickPickSeparator> = openers.map((opener): PickItem => {\n\t\t\treturn {\n\t\t\t\tlabel: opener.label,\n\t\t\t\topener: opener\n\t\t\t};\n\t\t});\n\t\titems.push(\n\t\t\t{\n\t\t\t\tlabel: isWeb\n\t\t\t\t\t? nls.localize('selectOpenerDefaultLabel.web', 'Open in new browser window')\n\t\t\t\t\t: nls.localize('selectOpenerDefaultLabel', 'Open in default browser'),\n\t\t\t\topener: undefined\n\t\t\t},\n\t\t\t{ type: 'separator' },\n\t\t\t{\n\t\t\t\tlabel: nls.localize('selectOpenerConfigureTitle', \"Configure default opener...\"),\n\t\t\t\topener: 'configureDefault'\n\t\t\t});\n\n\t\tconst picked = await this.quickInputService.pick(items, {\n\t\t\tplaceHolder: nls.localize('selectOpenerPlaceHolder', \"How would you like to open: {0}\", targetUri.toString())\n\t\t});\n\n\t\tif (!picked) {\n\t\t\t// Still cancel the default opener here since we prompted the user\n\t\t\treturn true;\n\t\t}\n\n\t\tif (typeof picked.opener === 'undefined') {\n\t\t\treturn false; // Fallback to default opener\n\t\t} else if (picked.opener === 'configureDefault') {\n\t\t\tawait this.preferencesService.openUserSettings({\n\t\t\t\tjsonEditor: true,\n\t\t\t\trevealSetting: { key: externalUriOpenersSettingId, edit: true }\n\t\t\t});\n\t\t\treturn true;\n\t\t} else {\n\t\t\treturn picked.opener.openExternalUri(targetUri, ctx, token);\n\t\t}\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
