{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/contrib/outline/browser/outlinePane.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport './outlinePane.css';\nimport * as dom from '../../../../base/browser/dom.js';\nimport { ProgressBar } from '../../../../base/browser/ui/progressbar/progressbar.js';\nimport { TimeoutTimer, timeout } from '../../../../base/common/async.js';\nimport { IDisposable, toDisposable, DisposableStore, MutableDisposable } from '../../../../base/common/lifecycle.js';\nimport { LRUCache } from '../../../../base/common/map.js';\nimport { localize } from '../../../../nls.js';\nimport { IConfigurationService } from '../../../../platform/configuration/common/configuration.js';\nimport { IContextKey, IContextKeyService } from '../../../../platform/contextkey/common/contextkey.js';\nimport { IContextMenuService } from '../../../../platform/contextview/browser/contextView.js';\nimport { IInstantiationService } from '../../../../platform/instantiation/common/instantiation.js';\nimport { IKeybindingService } from '../../../../platform/keybinding/common/keybinding.js';\nimport { WorkbenchDataTree } from '../../../../platform/list/browser/listService.js';\nimport { IStorageService } from '../../../../platform/storage/common/storage.js';\nimport { IThemeService } from '../../../../platform/theme/common/themeService.js';\nimport { ViewPane } from '../../../browser/parts/views/viewPane.js';\nimport { IViewletViewOptions } from '../../../browser/parts/views/viewsViewlet.js';\nimport { IEditorService } from '../../../services/editor/common/editorService.js';\nimport { FuzzyScore } from '../../../../base/common/filters.js';\nimport { basename } from '../../../../base/common/resources.js';\nimport { IViewDescriptorService } from '../../../common/views.js';\nimport { IOpenerService } from '../../../../platform/opener/common/opener.js';\nimport { ITelemetryService } from '../../../../platform/telemetry/common/telemetry.js';\nimport { OutlineViewState } from './outlineViewState.js';\nimport { IOutline, IOutlineComparator, IOutlineService, OutlineTarget } from '../../../services/outline/browser/outline.js';\nimport { EditorResourceAccessor, IEditorPane } from '../../../common/editor.js';\nimport { CancellationTokenSource } from '../../../../base/common/cancellation.js';\nimport { Event } from '../../../../base/common/event.js';\nimport { ITreeSorter } from '../../../../base/browser/ui/tree/tree.js';\nimport { AbstractTreeViewState, IAbstractTreeViewState, TreeFindMode } from '../../../../base/browser/ui/tree/abstractTree.js';\nimport { URI } from '../../../../base/common/uri.js';\nimport { ctxAllCollapsed, ctxFilterOnType, ctxFollowsCursor, ctxSortMode, IOutlinePane, OutlineSortOrder } from './outline.js';\nimport { defaultProgressBarStyles } from '../../../../platform/theme/browser/defaultStyles.js';\nimport { IHoverService } from '../../../../platform/hover/browser/hover.js';\n\nclass OutlineTreeSorter<E> implements ITreeSorter<E> {\n\n\tconstructor(\n\t\tprivate _comparator: IOutlineComparator<E>,\n\t\tpublic order: OutlineSortOrder\n\t) { }\n\n\tcompare(a: E, b: E): number {\n\t\tif (this.order === OutlineSortOrder.ByKind) {\n\t\t\treturn this._comparator.compareByType(a, b);\n\t\t} else if (this.order === OutlineSortOrder.ByName) {\n\t\t\treturn this._comparator.compareByName(a, b);\n\t\t} else {\n\t\t\treturn this._comparator.compareByPosition(a, b);\n\t\t}\n\t}\n}\n\nexport class OutlinePane extends ViewPane implements IOutlinePane {\n\n\tstatic readonly Id = 'outline';\n\n\tprivate readonly _disposables = new DisposableStore();\n\n\tprivate readonly _editorControlDisposables = new DisposableStore();\n\tprivate readonly _editorPaneDisposables = new DisposableStore();\n\tprivate readonly _outlineViewState = new OutlineViewState();\n\n\tprivate readonly _editorListener = new MutableDisposable();\n\n\tprivate _domNode!: HTMLElement;\n\tprivate _message!: HTMLDivElement;\n\tprivate _progressBar!: ProgressBar;\n\tprivate _treeContainer!: HTMLElement;\n\tprivate _tree?: WorkbenchDataTree<IOutline<any> | undefined, any, FuzzyScore>;\n\tprivate _treeDimensions?: dom.Dimension;\n\tprivate _treeStates = new LRUCache<string, IAbstractTreeViewState>(10);\n\n\tprivate _ctxFollowsCursor!: IContextKey<boolean>;\n\tprivate _ctxFilterOnType!: IContextKey<boolean>;\n\tprivate _ctxSortMode!: IContextKey<OutlineSortOrder>;\n\tprivate _ctxAllCollapsed!: IContextKey<boolean>;\n\n\tconstructor(\n\t\toptions: IViewletViewOptions,\n\t\t@IOutlineService private readonly _outlineService: IOutlineService,\n\t\t@IInstantiationService private readonly _instantiationService: IInstantiationService,\n\t\t@IViewDescriptorService viewDescriptorService: IViewDescriptorService,\n\t\t@IStorageService private readonly _storageService: IStorageService,\n\t\t@IEditorService private readonly _editorService: IEditorService,\n\t\t@IConfigurationService configurationService: IConfigurationService,\n\t\t@IKeybindingService keybindingService: IKeybindingService,\n\t\t@IContextKeyService contextKeyService: IContextKeyService,\n\t\t@IContextMenuService contextMenuService: IContextMenuService,\n\t\t@IOpenerService openerService: IOpenerService,\n\t\t@IThemeService themeService: IThemeService,\n\t\t@ITelemetryService telemetryService: ITelemetryService,\n\t\t@IHoverService hoverService: IHoverService,\n\t) {\n\t\tsuper(options, keybindingService, contextMenuService, configurationService, contextKeyService, viewDescriptorService, _instantiationService, openerService, themeService, telemetryService, hoverService);\n\t\tthis._outlineViewState.restore(this._storageService);\n\t\tthis._disposables.add(this._outlineViewState);\n\n\t\tcontextKeyService.bufferChangeEvents(() => {\n\t\t\tthis._ctxFollowsCursor = ctxFollowsCursor.bindTo(contextKeyService);\n\t\t\tthis._ctxFilterOnType = ctxFilterOnType.bindTo(contextKeyService);\n\t\t\tthis._ctxSortMode = ctxSortMode.bindTo(contextKeyService);\n\t\t\tthis._ctxAllCollapsed = ctxAllCollapsed.bindTo(contextKeyService);\n\t\t});\n\n\t\tconst updateContext = () => {\n\t\t\tthis._ctxFollowsCursor.set(this._outlineViewState.followCursor);\n\t\t\tthis._ctxFilterOnType.set(this._outlineViewState.filterOnType);\n\t\t\tthis._ctxSortMode.set(this._outlineViewState.sortBy);\n\t\t};\n\t\tupdateContext();\n\t\tthis._disposables.add(this._outlineViewState.onDidChange(updateContext));\n\t}\n\n\toverride dispose(): void {\n\t\tthis._disposables.dispose();\n\t\tthis._editorPaneDisposables.dispose();\n\t\tthis._editorControlDisposables.dispose();\n\t\tthis._editorListener.dispose();\n\t\tsuper.dispose();\n\t}\n\n\toverride focus(): void {\n\t\tsuper.focus();\n\t\tthis._tree?.domFocus();\n\t}\n\n\tprotected override renderBody(container: HTMLElement): void {\n\t\tsuper.renderBody(container);\n\n\t\tthis._domNode = container;\n\t\tcontainer.classList.add('outline-pane');\n\n\t\tconst progressContainer = dom.$('.outline-progress');\n\t\tthis._message = dom.$('.outline-message');\n\n\t\tthis._progressBar = new ProgressBar(progressContainer, defaultProgressBarStyles);\n\n\t\tthis._treeContainer = dom.$('.outline-tree');\n\t\tdom.append(container, progressContainer, this._message, this._treeContainer);\n\n\t\tthis._disposables.add(this.onDidChangeBodyVisibility(visible => {\n\t\t\tif (!visible) {\n\t\t\t\t// stop everything when not visible\n\t\t\t\tthis._editorListener.clear();\n\t\t\t\tthis._editorPaneDisposables.clear();\n\t\t\t\tthis._editorControlDisposables.clear();\n\n\t\t\t} else if (!this._editorListener.value) {\n\t\t\t\tconst event = Event.any(this._editorService.onDidActiveEditorChange, this._outlineService.onDidChange);\n\t\t\t\tthis._editorListener.value = event(() => this._handleEditorChanged(this._editorService.activeEditorPane));\n\t\t\t\tthis._handleEditorChanged(this._editorService.activeEditorPane);\n\t\t\t}\n\t\t}));\n\t}\n\n\tprotected override layoutBody(height: number, width: number): void {\n\t\tsuper.layoutBody(height, width);\n\t\tthis._tree?.layout(height, width);\n\t\tthis._treeDimensions = new dom.Dimension(width, height);\n\t}\n\n\tcollapseAll(): void {\n\t\tthis._tree?.collapseAll();\n\t}\n\n\texpandAll(): void {\n\t\tthis._tree?.expandAll();\n\t}\n\n\tget outlineViewState() {\n\t\treturn this._outlineViewState;\n\t}\n\n\tprivate _showMessage(message: string) {\n\t\tthis._domNode.classList.add('message');\n\t\tthis._progressBar.stop().hide();\n\t\tthis._message.innerText = message;\n\t}\n\n\tprivate _captureViewState(uri?: URI): boolean {\n\t\tif (this._tree) {\n\t\t\tconst oldOutline = this._tree.getInput();\n\t\t\tif (!uri) {\n\t\t\t\turi = oldOutline?.uri;\n\t\t\t}\n\t\t\tif (oldOutline && uri) {\n\t\t\t\tthis._treeStates.set(`${oldOutline.outlineKind}/${uri}`, this._tree.getViewState());\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\n\tprivate _handleEditorChanged(pane: IEditorPane | undefined): void {\n\t\tthis._editorPaneDisposables.clear();\n\n\t\tif (pane) {\n\t\t\t// react to control changes from within pane (https://github.com/microsoft/vscode/issues/134008)\n\t\t\tthis._editorPaneDisposables.add(pane.onDidChangeControl(() => {\n\t\t\t\tthis._handleEditorControlChanged(pane);\n\t\t\t}));\n\t\t}\n\n\t\tthis._handleEditorControlChanged(pane);\n\t}\n\n\tprivate async _handleEditorControlChanged(pane: IEditorPane | undefined): Promise<void> {\n\n\t\t// persist state\n\t\tconst resource = EditorResourceAccessor.getOriginalUri(pane?.input);\n\t\tconst didCapture = this._captureViewState();\n\n\t\tthis._editorControlDisposables.clear();\n\n\t\tif (!pane || !this._outlineService.canCreateOutline(pane) || !resource) {\n\t\t\treturn this._showMessage(localize('no-editor', \"The active editor cannot provide outline information.\"));\n\t\t}\n\n\t\tlet loadingMessage: IDisposable | undefined;\n\t\tif (!didCapture) {\n\t\t\tloadingMessage = new TimeoutTimer(() => {\n\t\t\t\tthis._showMessage(localize('loading', \"Loading document symbols for '{0}'...\", basename(resource)));\n\t\t\t}, 100);\n\t\t}\n\n\t\tthis._progressBar.infinite().show(500);\n\n\t\tconst cts = new CancellationTokenSource();\n\t\tthis._editorControlDisposables.add(toDisposable(() => cts.dispose(true)));\n\n\t\tconst newOutline = await this._outlineService.createOutline(pane, OutlineTarget.OutlinePane, cts.token);\n\t\tloadingMessage?.dispose();\n\n\t\tif (!newOutline) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (cts.token.isCancellationRequested) {\n\t\t\tnewOutline?.dispose();\n\t\t\treturn;\n\t\t}\n\n\t\tthis._editorControlDisposables.add(newOutline);\n\t\tthis._progressBar.stop().hide();\n\n\t\tconst sorter = new OutlineTreeSorter(newOutline.config.comparator, this._outlineViewState.sortBy);\n\n\t\tconst tree = <WorkbenchDataTree<IOutline<any> | undefined, any, FuzzyScore>>this._instantiationService.createInstance(\n\t\t\tWorkbenchDataTree,\n\t\t\t'OutlinePane',\n\t\t\tthis._treeContainer,\n\t\t\tnewOutline.config.delegate,\n\t\t\tnewOutline.config.renderers,\n\t\t\tnewOutline.config.treeDataSource,\n\t\t\t{\n\t\t\t\t...newOutline.config.options,\n\t\t\t\tsorter,\n\t\t\t\texpandOnDoubleClick: false,\n\t\t\t\texpandOnlyOnTwistieClick: true,\n\t\t\t\tmultipleSelectionSupport: false,\n\t\t\t\thideTwistiesOfChildlessElements: true,\n\t\t\t\tdefaultFindMode: this._outlineViewState.filterOnType ? TreeFindMode.Filter : TreeFindMode.Highlight,\n\t\t\t\toverrideStyles: this.getLocationBasedColors().listOverrideStyles\n\t\t\t}\n\t\t);\n\n\t\t// update tree, listen to changes\n\t\tconst updateTree = () => {\n\t\t\tif (newOutline.isEmpty) {\n\t\t\t\t// no more elements\n\t\t\t\tthis._showMessage(localize('no-symbols', \"No symbols found in document '{0}'\", basename(resource)));\n\t\t\t\tthis._captureViewState(resource);\n\t\t\t\ttree.setInput(undefined);\n\n\t\t\t} else if (!tree.getInput()) {\n\t\t\t\t// first: init tree\n\t\t\t\tthis._domNode.classList.remove('message');\n\t\t\t\tconst state = this._treeStates.get(`${newOutline.outlineKind}/${newOutline.uri}`);\n\t\t\t\ttree.setInput(newOutline, state && AbstractTreeViewState.lift(state));\n\n\t\t\t} else {\n\t\t\t\t// update: refresh tree\n\t\t\t\tthis._domNode.classList.remove('message');\n\t\t\t\ttree.updateChildren();\n\t\t\t}\n\t\t};\n\t\tupdateTree();\n\t\tthis._editorControlDisposables.add(newOutline.onDidChange(updateTree));\n\t\ttree.findMode = this._outlineViewState.filterOnType ? TreeFindMode.Filter : TreeFindMode.Highlight;\n\n\t\t// feature: apply panel background to tree\n\t\tthis._editorControlDisposables.add(this.viewDescriptorService.onDidChangeLocation(({ views }) => {\n\t\t\tif (views.some(v => v.id === this.id)) {\n\t\t\t\ttree.updateOptions({ overrideStyles: this.getLocationBasedColors().listOverrideStyles });\n\t\t\t}\n\t\t}));\n\n\t\t// feature: filter on type - keep tree and menu in sync\n\t\tthis._editorControlDisposables.add(tree.onDidChangeFindMode(mode => this._outlineViewState.filterOnType = mode === TreeFindMode.Filter));\n\n\t\t// feature: reveal outline selection in editor\n\t\t// on change -> reveal/select defining range\n\t\tlet idPool = 0;\n\t\tthis._editorControlDisposables.add(tree.onDidOpen(async e => {\n\t\t\tconst myId = ++idPool;\n\t\t\tconst isDoubleClick = e.browserEvent?.type === 'dblclick';\n\t\t\tif (!isDoubleClick) {\n\t\t\t\t// workaround for https://github.com/microsoft/vscode/issues/206424\n\t\t\t\tawait timeout(150);\n\t\t\t\tif (myId !== idPool) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t\tawait newOutline.reveal(e.element, e.editorOptions, e.sideBySide, isDoubleClick);\n\t\t}));\n\t\t// feature: reveal editor selection in outline\n\t\tconst revealActiveElement = () => {\n\t\t\tif (!this._outlineViewState.followCursor || !newOutline.activeElement) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tlet item = newOutline.activeElement;\n\t\t\twhile (item) {\n\t\t\t\tconst top = tree.getRelativeTop(item);\n\t\t\t\tif (top === null) {\n\t\t\t\t\t// not visible -> reveal\n\t\t\t\t\ttree.reveal(item, 0.5);\n\t\t\t\t}\n\t\t\t\tif (tree.getRelativeTop(item) !== null) {\n\t\t\t\t\ttree.setFocus([item]);\n\t\t\t\t\ttree.setSelection([item]);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\t// STILL not visible -> try parent\n\t\t\t\titem = tree.getParentElement(item);\n\t\t\t}\n\t\t};\n\t\trevealActiveElement();\n\t\tthis._editorControlDisposables.add(newOutline.onDidChange(revealActiveElement));\n\n\t\t// feature: update view when user state changes\n\t\tthis._editorControlDisposables.add(this._outlineViewState.onDidChange((e: { followCursor?: boolean; sortBy?: boolean; filterOnType?: boolean }) => {\n\t\t\tthis._outlineViewState.persist(this._storageService);\n\t\t\tif (e.filterOnType) {\n\t\t\t\ttree.findMode = this._outlineViewState.filterOnType ? TreeFindMode.Filter : TreeFindMode.Highlight;\n\t\t\t}\n\t\t\tif (e.followCursor) {\n\t\t\t\trevealActiveElement();\n\t\t\t}\n\t\t\tif (e.sortBy) {\n\t\t\t\tsorter.order = this._outlineViewState.sortBy;\n\t\t\t\ttree.resort();\n\t\t\t}\n\t\t}));\n\n\t\t// feature: expand all nodes when filtering (not when finding)\n\t\tlet viewState: AbstractTreeViewState | undefined;\n\t\tthis._editorControlDisposables.add(tree.onDidChangeFindPattern(pattern => {\n\t\t\tif (tree.findMode === TreeFindMode.Highlight) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (!viewState && pattern) {\n\t\t\t\tviewState = tree.getViewState();\n\t\t\t\ttree.expandAll();\n\t\t\t} else if (!pattern && viewState) {\n\t\t\t\ttree.setInput(tree.getInput()!, viewState);\n\t\t\t\tviewState = undefined;\n\t\t\t}\n\t\t}));\n\n\t\t// feature: update all-collapsed context key\n\t\tconst updateAllCollapsedCtx = () => {\n\t\t\tthis._ctxAllCollapsed.set(tree.getNode(null).children.every(node => !node.collapsible || node.collapsed));\n\t\t};\n\t\tthis._editorControlDisposables.add(tree.onDidChangeCollapseState(updateAllCollapsedCtx));\n\t\tthis._editorControlDisposables.add(tree.onDidChangeModel(updateAllCollapsedCtx));\n\t\tupdateAllCollapsedCtx();\n\n\t\t// last: set tree property and wire it up to one of our context keys\n\t\ttree.layout(this._treeDimensions?.height, this._treeDimensions?.width);\n\t\tthis._tree = tree;\n\t\tthis._editorControlDisposables.add(toDisposable(() => {\n\t\t\ttree.dispose();\n\t\t\tthis._tree = undefined;\n\t\t}));\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
