{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/api/common/extHostCommands.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n/* eslint-disable local/code-no-native-private */\n\nimport { validateConstraint } from '../../../base/common/types.js';\nimport { ICommandMetadata } from '../../../platform/commands/common/commands.js';\nimport * as extHostTypes from './extHostTypes.js';\nimport * as extHostTypeConverter from './extHostTypeConverters.js';\nimport { cloneAndChange } from '../../../base/common/objects.js';\nimport { MainContext, MainThreadCommandsShape, ExtHostCommandsShape, ICommandDto, ICommandMetadataDto, MainThreadTelemetryShape } from './extHost.protocol.js';\nimport { isNonEmptyArray } from '../../../base/common/arrays.js';\nimport * as languages from '../../../editor/common/languages.js';\nimport type * as vscode from 'vscode';\nimport { ILogService } from '../../../platform/log/common/log.js';\nimport { revive } from '../../../base/common/marshalling.js';\nimport { IRange, Range } from '../../../editor/common/core/range.js';\nimport { IPosition, Position } from '../../../editor/common/core/position.js';\nimport { URI } from '../../../base/common/uri.js';\nimport { DisposableStore, toDisposable } from '../../../base/common/lifecycle.js';\nimport { createDecorator } from '../../../platform/instantiation/common/instantiation.js';\nimport { IExtHostRpcService } from './extHostRpcService.js';\nimport { ISelection } from '../../../editor/common/core/selection.js';\nimport { TestItemImpl } from './extHostTestItem.js';\nimport { VSBuffer } from '../../../base/common/buffer.js';\nimport { SerializableObjectWithBuffers } from '../../services/extensions/common/proxyIdentifier.js';\nimport { toErrorMessage } from '../../../base/common/errorMessage.js';\nimport { StopWatch } from '../../../base/common/stopwatch.js';\nimport { ExtensionIdentifier, IExtensionDescription } from '../../../platform/extensions/common/extensions.js';\nimport { TelemetryTrustedValue } from '../../../platform/telemetry/common/telemetryUtils.js';\nimport { IExtHostTelemetry } from './extHostTelemetry.js';\nimport { generateUuid } from '../../../base/common/uuid.js';\n\ninterface CommandHandler {\n\tcallback: Function;\n\tthisArg: any;\n\tmetadata?: ICommandMetadata;\n\textension?: IExtensionDescription;\n}\n\nexport interface ArgumentProcessor {\n\tprocessArgument(arg: any, extensionId: ExtensionIdentifier | undefined): any;\n}\n\nexport class ExtHostCommands implements ExtHostCommandsShape {\n\n\treadonly _serviceBrand: undefined;\n\n\t#proxy: MainThreadCommandsShape;\n\n\tprivate readonly _commands = new Map<string, CommandHandler>();\n\tprivate readonly _apiCommands = new Map<string, ApiCommand>();\n\t#telemetry: MainThreadTelemetryShape;\n\n\tprivate readonly _logService: ILogService;\n\treadonly #extHostTelemetry: IExtHostTelemetry;\n\tprivate readonly _argumentProcessors: ArgumentProcessor[];\n\n\treadonly converter: CommandsConverter;\n\n\tconstructor(\n\t\t@IExtHostRpcService extHostRpc: IExtHostRpcService,\n\t\t@ILogService logService: ILogService,\n\t\t@IExtHostTelemetry extHostTelemetry: IExtHostTelemetry\n\t) {\n\t\tthis.#proxy = extHostRpc.getProxy(MainContext.MainThreadCommands);\n\t\tthis._logService = logService;\n\t\tthis.#extHostTelemetry = extHostTelemetry;\n\t\tthis.#telemetry = extHostRpc.getProxy(MainContext.MainThreadTelemetry);\n\t\tthis.converter = new CommandsConverter(\n\t\t\tthis,\n\t\t\tid => {\n\t\t\t\t// API commands that have no return type (void) can be\n\t\t\t\t// converted to their internal command and don't need\n\t\t\t\t// any indirection commands\n\t\t\t\tconst candidate = this._apiCommands.get(id);\n\t\t\t\treturn candidate?.result === ApiCommandResult.Void\n\t\t\t\t\t? candidate : undefined;\n\t\t\t},\n\t\t\tlogService\n\t\t);\n\t\tthis._argumentProcessors = [\n\t\t\t{\n\t\t\t\tprocessArgument(a) {\n\t\t\t\t\t// URI, Regex\n\t\t\t\t\treturn revive(a);\n\t\t\t\t}\n\t\t\t},\n\t\t\t{\n\t\t\t\tprocessArgument(arg) {\n\t\t\t\t\treturn cloneAndChange(arg, function (obj) {\n\t\t\t\t\t\t// Reverse of https://github.com/microsoft/vscode/blob/1f28c5fc681f4c01226460b6d1c7e91b8acb4a5b/src/vs/workbench/api/node/extHostCommands.ts#L112-L127\n\t\t\t\t\t\tif (Range.isIRange(obj)) {\n\t\t\t\t\t\t\treturn extHostTypeConverter.Range.to(obj);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (Position.isIPosition(obj)) {\n\t\t\t\t\t\t\treturn extHostTypeConverter.Position.to(obj);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (Range.isIRange((obj as languages.Location).range) && URI.isUri((obj as languages.Location).uri)) {\n\t\t\t\t\t\t\treturn extHostTypeConverter.location.to(obj);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (obj instanceof VSBuffer) {\n\t\t\t\t\t\t\treturn obj.buffer.buffer;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (!Array.isArray(obj)) {\n\t\t\t\t\t\t\treturn obj;\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t];\n\t}\n\n\tregisterArgumentProcessor(processor: ArgumentProcessor): void {\n\t\tthis._argumentProcessors.push(processor);\n\t}\n\n\tregisterApiCommand(apiCommand: ApiCommand): extHostTypes.Disposable {\n\n\n\t\tconst registration = this.registerCommand(false, apiCommand.id, async (...apiArgs) => {\n\n\t\t\tconst internalArgs = apiCommand.args.map((arg, i) => {\n\t\t\t\tif (!arg.validate(apiArgs[i])) {\n\t\t\t\t\tthrow new Error(`Invalid argument '${arg.name}' when running '${apiCommand.id}', received: ${typeof apiArgs[i] === 'object' ? JSON.stringify(apiArgs[i], null, '\\t') : apiArgs[i]} `);\n\t\t\t\t}\n\t\t\t\treturn arg.convert(apiArgs[i]);\n\t\t\t});\n\n\t\t\tconst internalResult = await this.executeCommand(apiCommand.internalId, ...internalArgs);\n\t\t\treturn apiCommand.result.convert(internalResult, apiArgs, this.converter);\n\t\t}, undefined, {\n\t\t\tdescription: apiCommand.description,\n\t\t\targs: apiCommand.args,\n\t\t\treturns: apiCommand.result.description\n\t\t});\n\n\t\tthis._apiCommands.set(apiCommand.id, apiCommand);\n\n\t\treturn new extHostTypes.Disposable(() => {\n\t\t\tregistration.dispose();\n\t\t\tthis._apiCommands.delete(apiCommand.id);\n\t\t});\n\t}\n\n\tregisterCommand(global: boolean, id: string, callback: <T>(...args: any[]) => T | Thenable<T>, thisArg?: any, metadata?: ICommandMetadata, extension?: IExtensionDescription): extHostTypes.Disposable {\n\t\tthis._logService.trace('ExtHostCommands#registerCommand', id);\n\n\t\tif (!id.trim().length) {\n\t\t\tthrow new Error('invalid id');\n\t\t}\n\n\t\tif (this._commands.has(id)) {\n\t\t\tthrow new Error(`command '${id}' already exists`);\n\t\t}\n\n\t\tthis._commands.set(id, { callback, thisArg, metadata, extension });\n\t\tif (global) {\n\t\t\tthis.#proxy.$registerCommand(id);\n\t\t}\n\n\t\treturn new extHostTypes.Disposable(() => {\n\t\t\tif (this._commands.delete(id)) {\n\t\t\t\tif (global) {\n\t\t\t\t\tthis.#proxy.$unregisterCommand(id);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n\n\texecuteCommand<T>(id: string, ...args: any[]): Promise<T> {\n\t\tthis._logService.trace('ExtHostCommands#executeCommand', id);\n\t\treturn this._doExecuteCommand(id, args, true);\n\t}\n\n\tprivate async _doExecuteCommand<T>(id: string, args: any[], retry: boolean): Promise<T> {\n\n\t\tif (this._commands.has(id)) {\n\t\t\t// - We stay inside the extension host and support\n\t\t\t// \t to pass any kind of parameters around.\n\t\t\t// - We still emit the corresponding activation event\n\t\t\t//   BUT we don't await that event\n\t\t\tthis.#proxy.$fireCommandActivationEvent(id);\n\t\t\treturn this._executeContributedCommand<T>(id, args, false);\n\n\t\t} else {\n\t\t\t// automagically convert some argument types\n\t\t\tlet hasBuffers = false;\n\t\t\tconst toArgs = cloneAndChange(args, function (value) {\n\t\t\t\tif (value instanceof extHostTypes.Position) {\n\t\t\t\t\treturn extHostTypeConverter.Position.from(value);\n\t\t\t\t} else if (value instanceof extHostTypes.Range) {\n\t\t\t\t\treturn extHostTypeConverter.Range.from(value);\n\t\t\t\t} else if (value instanceof extHostTypes.Location) {\n\t\t\t\t\treturn extHostTypeConverter.location.from(value);\n\t\t\t\t} else if (extHostTypes.NotebookRange.isNotebookRange(value)) {\n\t\t\t\t\treturn extHostTypeConverter.NotebookRange.from(value);\n\t\t\t\t} else if (value instanceof ArrayBuffer) {\n\t\t\t\t\thasBuffers = true;\n\t\t\t\t\treturn VSBuffer.wrap(new Uint8Array(value));\n\t\t\t\t} else if (value instanceof Uint8Array) {\n\t\t\t\t\thasBuffers = true;\n\t\t\t\t\treturn VSBuffer.wrap(value);\n\t\t\t\t} else if (value instanceof VSBuffer) {\n\t\t\t\t\thasBuffers = true;\n\t\t\t\t\treturn value;\n\t\t\t\t}\n\t\t\t\tif (!Array.isArray(value)) {\n\t\t\t\t\treturn value;\n\t\t\t\t}\n\t\t\t});\n\n\t\t\ttry {\n\t\t\t\tconst result = await this.#proxy.$executeCommand(id, hasBuffers ? new SerializableObjectWithBuffers(toArgs) : toArgs, retry);\n\t\t\t\treturn revive<any>(result);\n\t\t\t} catch (e) {\n\t\t\t\t// Rerun the command when it wasn't known, had arguments, and when retry\n\t\t\t\t// is enabled. We do this because the command might be registered inside\n\t\t\t\t// the extension host now and can therefore accept the arguments as-is.\n\t\t\t\tif (e instanceof Error && e.message === '$executeCommand:retry') {\n\t\t\t\t\treturn this._doExecuteCommand(id, args, false);\n\t\t\t\t} else {\n\t\t\t\t\tthrow e;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate async _executeContributedCommand<T = unknown>(id: string, args: any[], annotateError: boolean): Promise<T> {\n\t\tconst command = this._commands.get(id);\n\t\tif (!command) {\n\t\t\tthrow new Error('Unknown command');\n\t\t}\n\t\tconst { callback, thisArg, metadata } = command;\n\t\tif (metadata?.args) {\n\t\t\tfor (let i = 0; i < metadata.args.length; i++) {\n\t\t\t\ttry {\n\t\t\t\t\tvalidateConstraint(args[i], metadata.args[i].constraint);\n\t\t\t\t} catch (err) {\n\t\t\t\t\tthrow new Error(`Running the contributed command: '${id}' failed. Illegal argument '${metadata.args[i].name}' - ${metadata.args[i].description}`);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tconst stopWatch = StopWatch.create();\n\t\ttry {\n\t\t\treturn await callback.apply(thisArg, args);\n\t\t} catch (err) {\n\t\t\t// The indirection-command from the converter can fail when invoking the actual\n\t\t\t// command and in that case it is better to blame the correct command\n\t\t\tif (id === this.converter.delegatingCommandId) {\n\t\t\t\tconst actual = this.converter.getActualCommand(...args);\n\t\t\t\tif (actual) {\n\t\t\t\t\tid = actual.command;\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis._logService.error(err, id, command.extension?.identifier);\n\n\t\t\tif (!annotateError) {\n\t\t\t\tthrow err;\n\t\t\t}\n\n\t\t\tif (command.extension?.identifier) {\n\t\t\t\tconst reported = this.#extHostTelemetry.onExtensionError(command.extension.identifier, err);\n\t\t\t\tthis._logService.trace('forwarded error to extension?', reported, command.extension?.identifier);\n\t\t\t}\n\n\t\t\tthrow new class CommandError extends Error {\n\t\t\t\treadonly id = id;\n\t\t\t\treadonly source = command!.extension?.displayName ?? command!.extension?.name;\n\t\t\t\tconstructor() {\n\t\t\t\t\tsuper(toErrorMessage(err));\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\t\tfinally {\n\t\t\tthis._reportTelemetry(command, id, stopWatch.elapsed());\n\t\t}\n\t}\n\n\tprivate _reportTelemetry(command: CommandHandler, id: string, duration: number) {\n\t\tif (!command.extension) {\n\t\t\treturn;\n\t\t}\n\t\ttype ExtensionActionTelemetry = {\n\t\t\textensionId: string;\n\t\t\tid: TelemetryTrustedValue<string>;\n\t\t\tduration: number;\n\t\t};\n\t\ttype ExtensionActionTelemetryMeta = {\n\t\t\textensionId: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'The id of the extension handling the command, informing which extensions provide most-used functionality.' };\n\t\t\tid: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'The id of the command, to understand which specific extension features are most popular.' };\n\t\t\tduration: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'The duration of the command execution, to detect performance issues' };\n\t\t\towner: 'digitarald';\n\t\t\tcomment: 'Used to gain insight on the most popular commands used from extensions';\n\t\t};\n\t\tthis.#telemetry.$publicLog2<ExtensionActionTelemetry, ExtensionActionTelemetryMeta>('Extension:ActionExecuted', {\n\t\t\textensionId: command.extension.identifier.value,\n\t\t\tid: new TelemetryTrustedValue(id),\n\t\t\tduration: duration,\n\t\t});\n\t}\n\n\t$executeContributedCommand(id: string, ...args: any[]): Promise<unknown> {\n\t\tthis._logService.trace('ExtHostCommands#$executeContributedCommand', id);\n\n\t\tconst cmdHandler = this._commands.get(id);\n\t\tif (!cmdHandler) {\n\t\t\treturn Promise.reject(new Error(`Contributed command '${id}' does not exist.`));\n\t\t} else {\n\t\t\targs = args.map(arg => this._argumentProcessors.reduce((r, p) => p.processArgument(r, cmdHandler.extension?.identifier), arg));\n\t\t\treturn this._executeContributedCommand(id, args, true);\n\t\t}\n\t}\n\n\tgetCommands(filterUnderscoreCommands: boolean = false): Promise<string[]> {\n\t\tthis._logService.trace('ExtHostCommands#getCommands', filterUnderscoreCommands);\n\n\t\treturn this.#proxy.$getCommands().then(result => {\n\t\t\tif (filterUnderscoreCommands) {\n\t\t\t\tresult = result.filter(command => command[0] !== '_');\n\t\t\t}\n\t\t\treturn result;\n\t\t});\n\t}\n\n\t$getContributedCommandMetadata(): Promise<{ [id: string]: string | ICommandMetadataDto }> {\n\t\tconst result: { [id: string]: string | ICommandMetadata } = Object.create(null);\n\t\tfor (const [id, command] of this._commands) {\n\t\t\tconst { metadata } = command;\n\t\t\tif (metadata) {\n\t\t\t\tresult[id] = metadata;\n\t\t\t}\n\t\t}\n\t\treturn Promise.resolve(result);\n\t}\n}\n\nexport interface IExtHostCommands extends ExtHostCommands { }\nexport const IExtHostCommands = createDecorator<IExtHostCommands>('IExtHostCommands');\n\nexport class CommandsConverter implements extHostTypeConverter.Command.ICommandsConverter {\n\n\treadonly delegatingCommandId: string = `__vsc${generateUuid()}`;\n\tprivate readonly _cache = new Map<string, vscode.Command>();\n\tprivate _cachIdPool = 0;\n\n\t// --- conversion between internal and api commands\n\tconstructor(\n\t\tprivate readonly _commands: ExtHostCommands,\n\t\tprivate readonly _lookupApiCommand: (id: string) => ApiCommand | undefined,\n\t\tprivate readonly _logService: ILogService\n\t) {\n\t\tthis._commands.registerCommand(true, this.delegatingCommandId, this._executeConvertedCommand, this);\n\t}\n\n\ttoInternal(command: vscode.Command, disposables: DisposableStore): ICommandDto;\n\ttoInternal(command: vscode.Command | undefined, disposables: DisposableStore): ICommandDto | undefined;\n\ttoInternal(command: vscode.Command | undefined, disposables: DisposableStore): ICommandDto | undefined {\n\n\t\tif (!command) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\tconst result: ICommandDto = {\n\t\t\t$ident: undefined,\n\t\t\tid: command.command,\n\t\t\ttitle: command.title,\n\t\t\ttooltip: command.tooltip\n\t\t};\n\n\t\tif (!command.command) {\n\t\t\t// falsy command id -> return converted command but don't attempt any\n\t\t\t// argument or API-command dance since this command won't run anyways\n\t\t\treturn result;\n\t\t}\n\n\t\tconst apiCommand = this._lookupApiCommand(command.command);\n\t\tif (apiCommand) {\n\t\t\t// API command with return-value can be converted inplace\n\t\t\tresult.id = apiCommand.internalId;\n\t\t\tresult.arguments = apiCommand.args.map((arg, i) => arg.convert(command.arguments && command.arguments[i]));\n\n\n\t\t} else if (isNonEmptyArray(command.arguments)) {\n\t\t\t// we have a contributed command with arguments. that\n\t\t\t// means we don't want to send the arguments around\n\n\t\t\tconst id = `${command.command} /${++this._cachIdPool}`;\n\t\t\tthis._cache.set(id, command);\n\t\t\tdisposables.add(toDisposable(() => {\n\t\t\t\tthis._cache.delete(id);\n\t\t\t\tthis._logService.trace('CommandsConverter#DISPOSE', id);\n\t\t\t}));\n\t\t\tresult.$ident = id;\n\n\t\t\tresult.id = this.delegatingCommandId;\n\t\t\tresult.arguments = [id];\n\n\t\t\tthis._logService.trace('CommandsConverter#CREATE', command.command, id);\n\t\t}\n\n\t\treturn result;\n\t}\n\n\tfromInternal(command: ICommandDto): vscode.Command | undefined {\n\n\t\tif (typeof command.$ident === 'string') {\n\t\t\treturn this._cache.get(command.$ident);\n\n\t\t} else {\n\t\t\treturn {\n\t\t\t\tcommand: command.id,\n\t\t\t\ttitle: command.title,\n\t\t\t\targuments: command.arguments\n\t\t\t};\n\t\t}\n\t}\n\n\n\tgetActualCommand(...args: any[]): vscode.Command | undefined {\n\t\treturn this._cache.get(args[0]);\n\t}\n\n\tprivate _executeConvertedCommand<R>(...args: any[]): Promise<R> {\n\t\tconst actualCmd = this.getActualCommand(...args);\n\t\tthis._logService.trace('CommandsConverter#EXECUTE', args[0], actualCmd ? actualCmd.command : 'MISSING');\n\n\t\tif (!actualCmd) {\n\t\t\treturn Promise.reject(`Actual command not found, wanted to execute ${args[0]}`);\n\t\t}\n\t\treturn this._commands.executeCommand(actualCmd.command, ...(actualCmd.arguments || []));\n\t}\n\n}\n\n\nexport class ApiCommandArgument<V, O = V> {\n\n\tstatic readonly Uri = new ApiCommandArgument<URI>('uri', 'Uri of a text document', v => URI.isUri(v), v => v);\n\tstatic readonly Position = new ApiCommandArgument<extHostTypes.Position, IPosition>('position', 'A position in a text document', v => extHostTypes.Position.isPosition(v), extHostTypeConverter.Position.from);\n\tstatic readonly Range = new ApiCommandArgument<extHostTypes.Range, IRange>('range', 'A range in a text document', v => extHostTypes.Range.isRange(v), extHostTypeConverter.Range.from);\n\tstatic readonly Selection = new ApiCommandArgument<extHostTypes.Selection, ISelection>('selection', 'A selection in a text document', v => extHostTypes.Selection.isSelection(v), extHostTypeConverter.Selection.from);\n\tstatic readonly Number = new ApiCommandArgument<number>('number', '', v => typeof v === 'number', v => v);\n\tstatic readonly String = new ApiCommandArgument<string>('string', '', v => typeof v === 'string', v => v);\n\tstatic readonly StringArray = ApiCommandArgument.Arr(ApiCommandArgument.String);\n\n\tstatic Arr<T, K = T>(element: ApiCommandArgument<T, K>) {\n\t\treturn new ApiCommandArgument(\n\t\t\t`${element.name}_array`,\n\t\t\t`Array of ${element.name}, ${element.description}`,\n\t\t\t(v: unknown) => Array.isArray(v) && v.every(e => element.validate(e)),\n\t\t\t(v: T[]) => v.map(e => element.convert(e))\n\t\t);\n\t}\n\n\tstatic readonly CallHierarchyItem = new ApiCommandArgument('item', 'A call hierarchy item', v => v instanceof extHostTypes.CallHierarchyItem, extHostTypeConverter.CallHierarchyItem.from);\n\tstatic readonly TypeHierarchyItem = new ApiCommandArgument('item', 'A type hierarchy item', v => v instanceof extHostTypes.TypeHierarchyItem, extHostTypeConverter.TypeHierarchyItem.from);\n\tstatic readonly TestItem = new ApiCommandArgument('testItem', 'A VS Code TestItem', v => v instanceof TestItemImpl, extHostTypeConverter.TestItem.from);\n\n\tconstructor(\n\t\treadonly name: string,\n\t\treadonly description: string,\n\t\treadonly validate: (v: V) => boolean,\n\t\treadonly convert: (v: V) => O\n\t) { }\n\n\toptional(): ApiCommandArgument<V | undefined | null, O | undefined | null> {\n\t\treturn new ApiCommandArgument(\n\t\t\tthis.name, `(optional) ${this.description}`,\n\t\t\tvalue => value === undefined || value === null || this.validate(value),\n\t\t\tvalue => value === undefined ? undefined : value === null ? null : this.convert(value)\n\t\t);\n\t}\n\n\twith(name: string | undefined, description: string | undefined): ApiCommandArgument<V, O> {\n\t\treturn new ApiCommandArgument(name ?? this.name, description ?? this.description, this.validate, this.convert);\n\t}\n}\n\nexport class ApiCommandResult<V, O = V> {\n\n\tstatic readonly Void = new ApiCommandResult<void, void>('no result', v => v);\n\n\tconstructor(\n\t\treadonly description: string,\n\t\treadonly convert: (v: V, apiArgs: any[], cmdConverter: CommandsConverter) => O\n\t) { }\n}\n\nexport class ApiCommand {\n\n\tconstructor(\n\t\treadonly id: string,\n\t\treadonly internalId: string,\n\t\treadonly description: string,\n\t\treadonly args: ApiCommandArgument<any, any>[],\n\t\treadonly result: ApiCommandResult<any, any>\n\t) { }\n}\n"],
  "mappings": "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",
  "names": []
}
