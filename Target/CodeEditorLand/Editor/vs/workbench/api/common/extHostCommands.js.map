{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/api/common/extHostCommands.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n/* eslint-disable local/code-no-native-private */\n\nimport type * as vscode from \"vscode\";\nimport { isNonEmptyArray } from \"../../../base/common/arrays.js\";\nimport { VSBuffer } from \"../../../base/common/buffer.js\";\nimport { toErrorMessage } from \"../../../base/common/errorMessage.js\";\nimport {\n\ttype DisposableStore,\n\ttoDisposable,\n} from \"../../../base/common/lifecycle.js\";\nimport { revive } from \"../../../base/common/marshalling.js\";\nimport { cloneAndChange } from \"../../../base/common/objects.js\";\nimport { StopWatch } from \"../../../base/common/stopwatch.js\";\nimport { validateConstraint } from \"../../../base/common/types.js\";\nimport { URI } from \"../../../base/common/uri.js\";\nimport { generateUuid } from \"../../../base/common/uuid.js\";\nimport {\n\ttype IPosition,\n\tPosition,\n} from \"../../../editor/common/core/position.js\";\nimport { type IRange, Range } from \"../../../editor/common/core/range.js\";\nimport type { ISelection } from \"../../../editor/common/core/selection.js\";\nimport type * as languages from \"../../../editor/common/languages.js\";\nimport type { ICommandMetadata } from \"../../../platform/commands/common/commands.js\";\nimport type {\n\tExtensionIdentifier,\n\tIExtensionDescription,\n} from \"../../../platform/extensions/common/extensions.js\";\nimport { createDecorator } from \"../../../platform/instantiation/common/instantiation.js\";\nimport { ILogService } from \"../../../platform/log/common/log.js\";\nimport { TelemetryTrustedValue } from \"../../../platform/telemetry/common/telemetryUtils.js\";\nimport { SerializableObjectWithBuffers } from \"../../services/extensions/common/proxyIdentifier.js\";\nimport {\n\ttype ExtHostCommandsShape,\n\ttype ICommandDto,\n\ttype ICommandMetadataDto,\n\tMainContext,\n\ttype MainThreadCommandsShape,\n\ttype MainThreadTelemetryShape,\n} from \"./extHost.protocol.js\";\nimport { IExtHostRpcService } from \"./extHostRpcService.js\";\nimport { IExtHostTelemetry } from \"./extHostTelemetry.js\";\nimport { TestItemImpl } from \"./extHostTestItem.js\";\nimport * as extHostTypeConverter from \"./extHostTypeConverters.js\";\nimport * as extHostTypes from \"./extHostTypes.js\";\n\ninterface CommandHandler {\n\tcallback: Function;\n\tthisArg: any;\n\tmetadata?: ICommandMetadata;\n\textension?: IExtensionDescription;\n}\n\nexport interface ArgumentProcessor {\n\tprocessArgument(\n\t\targ: any,\n\t\textensionId: ExtensionIdentifier | undefined,\n\t): any;\n}\n\nexport class ExtHostCommands implements ExtHostCommandsShape {\n\treadonly _serviceBrand: undefined;\n\n\t#proxy: MainThreadCommandsShape;\n\n\tprivate readonly _commands = new Map<string, CommandHandler>();\n\tprivate readonly _apiCommands = new Map<string, ApiCommand>();\n\t#telemetry: MainThreadTelemetryShape;\n\n\tprivate readonly _logService: ILogService;\n\treadonly #extHostTelemetry: IExtHostTelemetry;\n\tprivate readonly _argumentProcessors: ArgumentProcessor[];\n\n\treadonly converter: CommandsConverter;\n\n\tconstructor(\n\t\t@IExtHostRpcService extHostRpc: IExtHostRpcService,\n\t\t@ILogService logService: ILogService,\n\t\t@IExtHostTelemetry extHostTelemetry: IExtHostTelemetry,\n\t) {\n\t\tthis.#proxy = extHostRpc.getProxy(MainContext.MainThreadCommands);\n\t\tthis._logService = logService;\n\t\tthis.#extHostTelemetry = extHostTelemetry;\n\t\tthis.#telemetry = extHostRpc.getProxy(MainContext.MainThreadTelemetry);\n\t\tthis.converter = new CommandsConverter(\n\t\t\tthis,\n\t\t\t(id) => {\n\t\t\t\t// API commands that have no return type (void) can be\n\t\t\t\t// converted to their internal command and don't need\n\t\t\t\t// any indirection commands\n\t\t\t\tconst candidate = this._apiCommands.get(id);\n\t\t\t\treturn candidate?.result === ApiCommandResult.Void\n\t\t\t\t\t? candidate\n\t\t\t\t\t: undefined;\n\t\t\t},\n\t\t\tlogService,\n\t\t);\n\t\tthis._argumentProcessors = [\n\t\t\t{\n\t\t\t\tprocessArgument(a) {\n\t\t\t\t\t// URI, Regex\n\t\t\t\t\treturn revive(a);\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\tprocessArgument(arg) {\n\t\t\t\t\treturn cloneAndChange(arg, (obj) => {\n\t\t\t\t\t\t// Reverse of https://github.com/microsoft/vscode/blob/1f28c5fc681f4c01226460b6d1c7e91b8acb4a5b/src/vs/workbench/api/node/extHostCommands.ts#L112-L127\n\t\t\t\t\t\tif (Range.isIRange(obj)) {\n\t\t\t\t\t\t\treturn extHostTypeConverter.Range.to(obj);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (Position.isIPosition(obj)) {\n\t\t\t\t\t\t\treturn extHostTypeConverter.Position.to(obj);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\tRange.isIRange((obj as languages.Location).range) &&\n\t\t\t\t\t\t\tURI.isUri((obj as languages.Location).uri)\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\treturn extHostTypeConverter.location.to(obj);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (obj instanceof VSBuffer) {\n\t\t\t\t\t\t\treturn obj.buffer.buffer;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (!Array.isArray(obj)) {\n\t\t\t\t\t\t\treturn obj;\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t},\n\t\t\t},\n\t\t];\n\t}\n\n\tregisterArgumentProcessor(processor: ArgumentProcessor): void {\n\t\tthis._argumentProcessors.push(processor);\n\t}\n\n\tregisterApiCommand(apiCommand: ApiCommand): extHostTypes.Disposable {\n\t\tconst registration = this.registerCommand(\n\t\t\tfalse,\n\t\t\tapiCommand.id,\n\t\t\tasync (...apiArgs) => {\n\t\t\t\tconst internalArgs = apiCommand.args.map((arg, i) => {\n\t\t\t\t\tif (!arg.validate(apiArgs[i])) {\n\t\t\t\t\t\tthrow new Error(\n\t\t\t\t\t\t\t`Invalid argument '${arg.name}' when running '${apiCommand.id}', received: ${typeof apiArgs[i] === \"object\" ? JSON.stringify(apiArgs[i], null, \"\\t\") : apiArgs[i]} `,\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t\treturn arg.convert(apiArgs[i]);\n\t\t\t\t});\n\n\t\t\t\tconst internalResult = await this.executeCommand(\n\t\t\t\t\tapiCommand.internalId,\n\t\t\t\t\t...internalArgs,\n\t\t\t\t);\n\t\t\t\treturn apiCommand.result.convert(\n\t\t\t\t\tinternalResult,\n\t\t\t\t\tapiArgs,\n\t\t\t\t\tthis.converter,\n\t\t\t\t);\n\t\t\t},\n\t\t\tundefined,\n\t\t\t{\n\t\t\t\tdescription: apiCommand.description,\n\t\t\t\targs: apiCommand.args,\n\t\t\t\treturns: apiCommand.result.description,\n\t\t\t},\n\t\t);\n\n\t\tthis._apiCommands.set(apiCommand.id, apiCommand);\n\n\t\treturn new extHostTypes.Disposable(() => {\n\t\t\tregistration.dispose();\n\t\t\tthis._apiCommands.delete(apiCommand.id);\n\t\t});\n\t}\n\n\tregisterCommand(\n\t\tglobal: boolean,\n\t\tid: string,\n\t\tcallback: <T>(...args: any[]) => T | Thenable<T>,\n\t\tthisArg?: any,\n\t\tmetadata?: ICommandMetadata,\n\t\textension?: IExtensionDescription,\n\t): extHostTypes.Disposable {\n\t\tthis._logService.trace(\"ExtHostCommands#registerCommand\", id);\n\n\t\tif (!id.trim().length) {\n\t\t\tthrow new Error(\"invalid id\");\n\t\t}\n\n\t\tif (this._commands.has(id)) {\n\t\t\tthrow new Error(`command '${id}' already exists`);\n\t\t}\n\n\t\tthis._commands.set(id, { callback, thisArg, metadata, extension });\n\t\tif (global) {\n\t\t\tthis.#proxy.$registerCommand(id);\n\t\t}\n\n\t\treturn new extHostTypes.Disposable(() => {\n\t\t\tif (this._commands.delete(id)) {\n\t\t\t\tif (global) {\n\t\t\t\t\tthis.#proxy.$unregisterCommand(id);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n\n\texecuteCommand<T>(id: string, ...args: any[]): Promise<T> {\n\t\tthis._logService.trace(\"ExtHostCommands#executeCommand\", id);\n\t\treturn this._doExecuteCommand(id, args, true);\n\t}\n\n\tprivate async _doExecuteCommand<T>(\n\t\tid: string,\n\t\targs: any[],\n\t\tretry: boolean,\n\t): Promise<T> {\n\t\tif (this._commands.has(id)) {\n\t\t\t// - We stay inside the extension host and support\n\t\t\t// \t to pass any kind of parameters around.\n\t\t\t// - We still emit the corresponding activation event\n\t\t\t//   BUT we don't await that event\n\t\t\tthis.#proxy.$fireCommandActivationEvent(id);\n\t\t\treturn this._executeContributedCommand<T>(id, args, false);\n\t\t} else {\n\t\t\t// automagically convert some argument types\n\t\t\tlet hasBuffers = false;\n\t\t\tconst toArgs = cloneAndChange(args, (value) => {\n\t\t\t\tif (value instanceof extHostTypes.Position) {\n\t\t\t\t\treturn extHostTypeConverter.Position.from(value);\n\t\t\t\t} else if (value instanceof extHostTypes.Range) {\n\t\t\t\t\treturn extHostTypeConverter.Range.from(value);\n\t\t\t\t} else if (value instanceof extHostTypes.Location) {\n\t\t\t\t\treturn extHostTypeConverter.location.from(value);\n\t\t\t\t} else if (extHostTypes.NotebookRange.isNotebookRange(value)) {\n\t\t\t\t\treturn extHostTypeConverter.NotebookRange.from(value);\n\t\t\t\t} else if (value instanceof ArrayBuffer) {\n\t\t\t\t\thasBuffers = true;\n\t\t\t\t\treturn VSBuffer.wrap(new Uint8Array(value));\n\t\t\t\t} else if (value instanceof Uint8Array) {\n\t\t\t\t\thasBuffers = true;\n\t\t\t\t\treturn VSBuffer.wrap(value);\n\t\t\t\t} else if (value instanceof VSBuffer) {\n\t\t\t\t\thasBuffers = true;\n\t\t\t\t\treturn value;\n\t\t\t\t}\n\t\t\t\tif (!Array.isArray(value)) {\n\t\t\t\t\treturn value;\n\t\t\t\t}\n\t\t\t});\n\n\t\t\ttry {\n\t\t\t\tconst result = await this.#proxy.$executeCommand(\n\t\t\t\t\tid,\n\t\t\t\t\thasBuffers\n\t\t\t\t\t\t? new SerializableObjectWithBuffers(toArgs)\n\t\t\t\t\t\t: toArgs,\n\t\t\t\t\tretry,\n\t\t\t\t);\n\t\t\t\treturn revive<any>(result);\n\t\t\t} catch (e) {\n\t\t\t\t// Rerun the command when it wasn't known, had arguments, and when retry\n\t\t\t\t// is enabled. We do this because the command might be registered inside\n\t\t\t\t// the extension host now and can therefore accept the arguments as-is.\n\t\t\t\tif (\n\t\t\t\t\te instanceof Error &&\n\t\t\t\t\te.message === \"$executeCommand:retry\"\n\t\t\t\t) {\n\t\t\t\t\treturn this._doExecuteCommand(id, args, false);\n\t\t\t\t} else {\n\t\t\t\t\tthrow e;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate async _executeContributedCommand<T = unknown>(\n\t\tid: string,\n\t\targs: any[],\n\t\tannotateError: boolean,\n\t): Promise<T> {\n\t\tconst command = this._commands.get(id);\n\t\tif (!command) {\n\t\t\tthrow new Error(\"Unknown command\");\n\t\t}\n\t\tconst { callback, thisArg, metadata } = command;\n\t\tif (metadata?.args) {\n\t\t\tfor (let i = 0; i < metadata.args.length; i++) {\n\t\t\t\ttry {\n\t\t\t\t\tvalidateConstraint(args[i], metadata.args[i].constraint);\n\t\t\t\t} catch (err) {\n\t\t\t\t\tthrow new Error(\n\t\t\t\t\t\t`Running the contributed command: '${id}' failed. Illegal argument '${metadata.args[i].name}' - ${metadata.args[i].description}`,\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tconst stopWatch = StopWatch.create();\n\t\ttry {\n\t\t\treturn await callback.apply(thisArg, args);\n\t\t} catch (err) {\n\t\t\t// The indirection-command from the converter can fail when invoking the actual\n\t\t\t// command and in that case it is better to blame the correct command\n\t\t\tif (id === this.converter.delegatingCommandId) {\n\t\t\t\tconst actual = this.converter.getActualCommand(...args);\n\t\t\t\tif (actual) {\n\t\t\t\t\tid = actual.command;\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis._logService.error(err, id, command.extension?.identifier);\n\n\t\t\tif (!annotateError) {\n\t\t\t\tthrow err;\n\t\t\t}\n\n\t\t\tif (command.extension?.identifier) {\n\t\t\t\tconst reported = this.#extHostTelemetry.onExtensionError(\n\t\t\t\t\tcommand.extension.identifier,\n\t\t\t\t\terr,\n\t\t\t\t);\n\t\t\t\tthis._logService.trace(\n\t\t\t\t\t\"forwarded error to extension?\",\n\t\t\t\t\treported,\n\t\t\t\t\tcommand.extension?.identifier,\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tthrow new (class CommandError extends Error {\n\t\t\t\treadonly id = id;\n\t\t\t\treadonly source =\n\t\t\t\t\tcommand!.extension?.displayName ?? command!.extension?.name;\n\t\t\t\tconstructor() {\n\t\t\t\t\tsuper(toErrorMessage(err));\n\t\t\t\t}\n\t\t\t})();\n\t\t} finally {\n\t\t\tthis._reportTelemetry(command, id, stopWatch.elapsed());\n\t\t}\n\t}\n\n\tprivate _reportTelemetry(\n\t\tcommand: CommandHandler,\n\t\tid: string,\n\t\tduration: number,\n\t) {\n\t\tif (!command.extension) {\n\t\t\treturn;\n\t\t}\n\t\ttype ExtensionActionTelemetry = {\n\t\t\textensionId: string;\n\t\t\tid: TelemetryTrustedValue<string>;\n\t\t\tduration: number;\n\t\t};\n\t\ttype ExtensionActionTelemetryMeta = {\n\t\t\textensionId: {\n\t\t\t\tclassification: \"SystemMetaData\";\n\t\t\t\tpurpose: \"FeatureInsight\";\n\t\t\t\tcomment: \"The id of the extension handling the command, informing which extensions provide most-used functionality.\";\n\t\t\t};\n\t\t\tid: {\n\t\t\t\tclassification: \"SystemMetaData\";\n\t\t\t\tpurpose: \"FeatureInsight\";\n\t\t\t\tcomment: \"The id of the command, to understand which specific extension features are most popular.\";\n\t\t\t};\n\t\t\tduration: {\n\t\t\t\tclassification: \"SystemMetaData\";\n\t\t\t\tpurpose: \"FeatureInsight\";\n\t\t\t\tcomment: \"The duration of the command execution, to detect performance issues\";\n\t\t\t};\n\t\t\towner: \"digitarald\";\n\t\t\tcomment: \"Used to gain insight on the most popular commands used from extensions\";\n\t\t};\n\t\tthis.#telemetry.$publicLog2<\n\t\t\tExtensionActionTelemetry,\n\t\t\tExtensionActionTelemetryMeta\n\t\t>(\"Extension:ActionExecuted\", {\n\t\t\textensionId: command.extension.identifier.value,\n\t\t\tid: new TelemetryTrustedValue(id),\n\t\t\tduration: duration,\n\t\t});\n\t}\n\n\t$executeContributedCommand(id: string, ...args: any[]): Promise<unknown> {\n\t\tthis._logService.trace(\n\t\t\t\"ExtHostCommands#$executeContributedCommand\",\n\t\t\tid,\n\t\t);\n\n\t\tconst cmdHandler = this._commands.get(id);\n\t\tif (cmdHandler) {\n\t\t\targs = args.map((arg) =>\n\t\t\t\tthis._argumentProcessors.reduce(\n\t\t\t\t\t(r, p) =>\n\t\t\t\t\t\tp.processArgument(r, cmdHandler.extension?.identifier),\n\t\t\t\t\targ,\n\t\t\t\t),\n\t\t\t);\n\t\t\treturn this._executeContributedCommand(id, args, true);\n\t\t} else {\n\t\t\treturn Promise.reject(\n\t\t\t\tnew Error(`Contributed command '${id}' does not exist.`),\n\t\t\t);\n\t\t}\n\t}\n\n\tgetCommands(filterUnderscoreCommands = false): Promise<string[]> {\n\t\tthis._logService.trace(\n\t\t\t\"ExtHostCommands#getCommands\",\n\t\t\tfilterUnderscoreCommands,\n\t\t);\n\n\t\treturn this.#proxy.$getCommands().then((result) => {\n\t\t\tif (filterUnderscoreCommands) {\n\t\t\t\tresult = result.filter((command) => command[0] !== \"_\");\n\t\t\t}\n\t\t\treturn result;\n\t\t});\n\t}\n\n\t$getContributedCommandMetadata(): Promise<{\n\t\t[id: string]: string | ICommandMetadataDto;\n\t}> {\n\t\tconst result: { [id: string]: string | ICommandMetadata } =\n\t\t\tObject.create(null);\n\t\tfor (const [id, command] of this._commands) {\n\t\t\tconst { metadata } = command;\n\t\t\tif (metadata) {\n\t\t\t\tresult[id] = metadata;\n\t\t\t}\n\t\t}\n\t\treturn Promise.resolve(result);\n\t}\n}\n\nexport interface IExtHostCommands extends ExtHostCommands {}\nexport const IExtHostCommands =\n\tcreateDecorator<IExtHostCommands>(\"IExtHostCommands\");\n\nexport class CommandsConverter\n\timplements extHostTypeConverter.Command.ICommandsConverter\n{\n\treadonly delegatingCommandId: string = `__vsc${generateUuid()}`;\n\tprivate readonly _cache = new Map<string, vscode.Command>();\n\tprivate _cachIdPool = 0;\n\n\t// --- conversion between internal and api commands\n\tconstructor(\n\t\tprivate readonly _commands: ExtHostCommands,\n\t\tprivate readonly _lookupApiCommand: (\n\t\t\tid: string,\n\t\t) => ApiCommand | undefined,\n\t\tprivate readonly _logService: ILogService,\n\t) {\n\t\tthis._commands.registerCommand(\n\t\t\ttrue,\n\t\t\tthis.delegatingCommandId,\n\t\t\tthis._executeConvertedCommand,\n\t\t\tthis,\n\t\t);\n\t}\n\n\ttoInternal(\n\t\tcommand: vscode.Command,\n\t\tdisposables: DisposableStore,\n\t): ICommandDto;\n\ttoInternal(\n\t\tcommand: vscode.Command | undefined,\n\t\tdisposables: DisposableStore,\n\t): ICommandDto | undefined;\n\ttoInternal(\n\t\tcommand: vscode.Command | undefined,\n\t\tdisposables: DisposableStore,\n\t): ICommandDto | undefined {\n\t\tif (!command) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\tconst result: ICommandDto = {\n\t\t\t$ident: undefined,\n\t\t\tid: command.command,\n\t\t\ttitle: command.title,\n\t\t\ttooltip: command.tooltip,\n\t\t};\n\n\t\tif (!command.command) {\n\t\t\t// falsy command id -> return converted command but don't attempt any\n\t\t\t// argument or API-command dance since this command won't run anyways\n\t\t\treturn result;\n\t\t}\n\n\t\tconst apiCommand = this._lookupApiCommand(command.command);\n\t\tif (apiCommand) {\n\t\t\t// API command with return-value can be converted inplace\n\t\t\tresult.id = apiCommand.internalId;\n\t\t\tresult.arguments = apiCommand.args.map((arg, i) =>\n\t\t\t\targ.convert(command.arguments && command.arguments[i]),\n\t\t\t);\n\t\t} else if (isNonEmptyArray(command.arguments)) {\n\t\t\t// we have a contributed command with arguments. that\n\t\t\t// means we don't want to send the arguments around\n\n\t\t\tconst id = `${command.command} /${++this._cachIdPool}`;\n\t\t\tthis._cache.set(id, command);\n\t\t\tdisposables.add(\n\t\t\t\ttoDisposable(() => {\n\t\t\t\t\tthis._cache.delete(id);\n\t\t\t\t\tthis._logService.trace(\"CommandsConverter#DISPOSE\", id);\n\t\t\t\t}),\n\t\t\t);\n\t\t\tresult.$ident = id;\n\n\t\t\tresult.id = this.delegatingCommandId;\n\t\t\tresult.arguments = [id];\n\n\t\t\tthis._logService.trace(\n\t\t\t\t\"CommandsConverter#CREATE\",\n\t\t\t\tcommand.command,\n\t\t\t\tid,\n\t\t\t);\n\t\t}\n\n\t\treturn result;\n\t}\n\n\tfromInternal(command: ICommandDto): vscode.Command | undefined {\n\t\tif (typeof command.$ident === \"string\") {\n\t\t\treturn this._cache.get(command.$ident);\n\t\t} else {\n\t\t\treturn {\n\t\t\t\tcommand: command.id,\n\t\t\t\ttitle: command.title,\n\t\t\t\targuments: command.arguments,\n\t\t\t};\n\t\t}\n\t}\n\n\tgetActualCommand(...args: any[]): vscode.Command | undefined {\n\t\treturn this._cache.get(args[0]);\n\t}\n\n\tprivate _executeConvertedCommand<R>(...args: any[]): Promise<R> {\n\t\tconst actualCmd = this.getActualCommand(...args);\n\t\tthis._logService.trace(\n\t\t\t\"CommandsConverter#EXECUTE\",\n\t\t\targs[0],\n\t\t\tactualCmd ? actualCmd.command : \"MISSING\",\n\t\t);\n\n\t\tif (!actualCmd) {\n\t\t\treturn Promise.reject(\n\t\t\t\t`Actual command not found, wanted to execute ${args[0]}`,\n\t\t\t);\n\t\t}\n\t\treturn this._commands.executeCommand(\n\t\t\tactualCmd.command,\n\t\t\t...(actualCmd.arguments || []),\n\t\t);\n\t}\n}\n\nexport class ApiCommandArgument<V, O = V> {\n\tstatic readonly Uri = new ApiCommandArgument<URI>(\n\t\t\"uri\",\n\t\t\"Uri of a text document\",\n\t\t(v) => URI.isUri(v),\n\t\t(v) => v,\n\t);\n\tstatic readonly Position = new ApiCommandArgument<\n\t\textHostTypes.Position,\n\t\tIPosition\n\t>(\n\t\t\"position\",\n\t\t\"A position in a text document\",\n\t\t(v) => extHostTypes.Position.isPosition(v),\n\t\textHostTypeConverter.Position.from,\n\t);\n\tstatic readonly Range = new ApiCommandArgument<extHostTypes.Range, IRange>(\n\t\t\"range\",\n\t\t\"A range in a text document\",\n\t\t(v) => extHostTypes.Range.isRange(v),\n\t\textHostTypeConverter.Range.from,\n\t);\n\tstatic readonly Selection = new ApiCommandArgument<\n\t\textHostTypes.Selection,\n\t\tISelection\n\t>(\n\t\t\"selection\",\n\t\t\"A selection in a text document\",\n\t\t(v) => extHostTypes.Selection.isSelection(v),\n\t\textHostTypeConverter.Selection.from,\n\t);\n\tstatic readonly Number = new ApiCommandArgument<number>(\n\t\t\"number\",\n\t\t\"\",\n\t\t(v) => typeof v === \"number\",\n\t\t(v) => v,\n\t);\n\tstatic readonly String = new ApiCommandArgument<string>(\n\t\t\"string\",\n\t\t\"\",\n\t\t(v) => typeof v === \"string\",\n\t\t(v) => v,\n\t);\n\tstatic readonly StringArray = ApiCommandArgument.Arr(\n\t\tApiCommandArgument.String,\n\t);\n\n\tstatic Arr<T, K = T>(element: ApiCommandArgument<T, K>) {\n\t\treturn new ApiCommandArgument(\n\t\t\t`${element.name}_array`,\n\t\t\t`Array of ${element.name}, ${element.description}`,\n\t\t\t(v: unknown) =>\n\t\t\t\tArray.isArray(v) && v.every((e) => element.validate(e)),\n\t\t\t(v: T[]) => v.map((e) => element.convert(e)),\n\t\t);\n\t}\n\n\tstatic readonly CallHierarchyItem = new ApiCommandArgument(\n\t\t\"item\",\n\t\t\"A call hierarchy item\",\n\t\t(v) => v instanceof extHostTypes.CallHierarchyItem,\n\t\textHostTypeConverter.CallHierarchyItem.from,\n\t);\n\tstatic readonly TypeHierarchyItem = new ApiCommandArgument(\n\t\t\"item\",\n\t\t\"A type hierarchy item\",\n\t\t(v) => v instanceof extHostTypes.TypeHierarchyItem,\n\t\textHostTypeConverter.TypeHierarchyItem.from,\n\t);\n\tstatic readonly TestItem = new ApiCommandArgument(\n\t\t\"testItem\",\n\t\t\"A VS Code TestItem\",\n\t\t(v) => v instanceof TestItemImpl,\n\t\textHostTypeConverter.TestItem.from,\n\t);\n\n\tconstructor(\n\t\treadonly name: string,\n\t\treadonly description: string,\n\t\treadonly validate: (v: V) => boolean,\n\t\treadonly convert: (v: V) => O,\n\t) {}\n\n\toptional(): ApiCommandArgument<V | undefined | null, O | undefined | null> {\n\t\treturn new ApiCommandArgument(\n\t\t\tthis.name,\n\t\t\t`(optional) ${this.description}`,\n\t\t\t(value) =>\n\t\t\t\tvalue === undefined || value === null || this.validate(value),\n\t\t\t(value) =>\n\t\t\t\tvalue === undefined\n\t\t\t\t\t? undefined\n\t\t\t\t\t: value === null\n\t\t\t\t\t\t? null\n\t\t\t\t\t\t: this.convert(value),\n\t\t);\n\t}\n\n\twith(\n\t\tname: string | undefined,\n\t\tdescription: string | undefined,\n\t): ApiCommandArgument<V, O> {\n\t\treturn new ApiCommandArgument(\n\t\t\tname ?? this.name,\n\t\t\tdescription ?? this.description,\n\t\t\tthis.validate,\n\t\t\tthis.convert,\n\t\t);\n\t}\n}\n\nexport class ApiCommandResult<V, O = V> {\n\tstatic readonly Void = new ApiCommandResult<void, void>(\n\t\t\"no result\",\n\t\t(v) => v,\n\t);\n\n\tconstructor(\n\t\treadonly description: string,\n\t\treadonly convert: (\n\t\t\tv: V,\n\t\t\tapiArgs: any[],\n\t\t\tcmdConverter: CommandsConverter,\n\t\t) => O,\n\t) {}\n}\n\nexport class ApiCommand {\n\tconstructor(\n\t\treadonly id: string,\n\t\treadonly internalId: string,\n\t\treadonly description: string,\n\t\treadonly args: ApiCommandArgument<any, any>[],\n\t\treadonly result: ApiCommandResult<any, any>,\n\t) {}\n}\n"],
  "mappings": "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",
  "names": []
}
