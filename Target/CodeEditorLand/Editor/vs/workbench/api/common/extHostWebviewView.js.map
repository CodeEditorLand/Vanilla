{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/api/common/extHostWebviewView.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CancellationToken } from '../../../base/common/cancellation.js';\nimport { Emitter } from '../../../base/common/event.js';\nimport { Disposable } from '../../../base/common/lifecycle.js';\nimport { IExtensionDescription } from '../../../platform/extensions/common/extensions.js';\nimport { ExtHostWebview, ExtHostWebviews, toExtensionData, shouldSerializeBuffersForPostMessage } from './extHostWebview.js';\nimport { ViewBadge } from './extHostTypeConverters.js';\nimport type * as vscode from 'vscode';\nimport * as extHostProtocol from './extHost.protocol.js';\nimport * as extHostTypes from './extHostTypes.js';\n\n/* eslint-disable local/code-no-native-private */\n\nclass ExtHostWebviewView extends Disposable implements vscode.WebviewView {\n\n\treadonly #handle: extHostProtocol.WebviewHandle;\n\treadonly #proxy: extHostProtocol.MainThreadWebviewViewsShape;\n\n\treadonly #viewType: string;\n\treadonly #webview: ExtHostWebview;\n\n\t#isDisposed = false;\n\t#isVisible: boolean;\n\t#title: string | undefined;\n\t#description: string | undefined;\n\t#badge: vscode.ViewBadge | undefined;\n\n\tconstructor(\n\t\thandle: extHostProtocol.WebviewHandle,\n\t\tproxy: extHostProtocol.MainThreadWebviewViewsShape,\n\t\tviewType: string,\n\t\ttitle: string | undefined,\n\t\twebview: ExtHostWebview,\n\t\tisVisible: boolean,\n\t) {\n\t\tsuper();\n\n\t\tthis.#viewType = viewType;\n\t\tthis.#title = title;\n\t\tthis.#handle = handle;\n\t\tthis.#proxy = proxy;\n\t\tthis.#webview = webview;\n\t\tthis.#isVisible = isVisible;\n\t}\n\n\tpublic override dispose() {\n\t\tif (this.#isDisposed) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.#isDisposed = true;\n\t\tthis.#onDidDispose.fire();\n\n\t\tthis.#webview.dispose();\n\n\t\tsuper.dispose();\n\t}\n\n\treadonly #onDidChangeVisibility = this._register(new Emitter<void>());\n\tpublic readonly onDidChangeVisibility = this.#onDidChangeVisibility.event;\n\n\treadonly #onDidDispose = this._register(new Emitter<void>());\n\tpublic readonly onDidDispose = this.#onDidDispose.event;\n\n\tpublic get title(): string | undefined {\n\t\tthis.assertNotDisposed();\n\t\treturn this.#title;\n\t}\n\n\tpublic set title(value: string | undefined) {\n\t\tthis.assertNotDisposed();\n\t\tif (this.#title !== value) {\n\t\t\tthis.#title = value;\n\t\t\tthis.#proxy.$setWebviewViewTitle(this.#handle, value);\n\t\t}\n\t}\n\n\tpublic get description(): string | undefined {\n\t\tthis.assertNotDisposed();\n\t\treturn this.#description;\n\t}\n\n\tpublic set description(value: string | undefined) {\n\t\tthis.assertNotDisposed();\n\t\tif (this.#description !== value) {\n\t\t\tthis.#description = value;\n\t\t\tthis.#proxy.$setWebviewViewDescription(this.#handle, value);\n\t\t}\n\t}\n\n\tpublic get visible(): boolean { return this.#isVisible; }\n\n\tpublic get webview(): vscode.Webview { return this.#webview; }\n\n\tpublic get viewType(): string { return this.#viewType; }\n\n\t/* internal */ _setVisible(visible: boolean) {\n\t\tif (visible === this.#isVisible || this.#isDisposed) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.#isVisible = visible;\n\t\tthis.#onDidChangeVisibility.fire();\n\t}\n\n\tpublic get badge(): vscode.ViewBadge | undefined {\n\t\tthis.assertNotDisposed();\n\t\treturn this.#badge;\n\t}\n\n\tpublic set badge(badge: vscode.ViewBadge | undefined) {\n\t\tthis.assertNotDisposed();\n\n\t\tif (badge?.value === this.#badge?.value &&\n\t\t\tbadge?.tooltip === this.#badge?.tooltip) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.#badge = ViewBadge.from(badge);\n\t\tthis.#proxy.$setWebviewViewBadge(this.#handle, badge);\n\t}\n\n\tpublic show(preserveFocus?: boolean): void {\n\t\tthis.assertNotDisposed();\n\t\tthis.#proxy.$show(this.#handle, !!preserveFocus);\n\t}\n\n\tprivate assertNotDisposed() {\n\t\tif (this.#isDisposed) {\n\t\t\tthrow new Error('Webview is disposed');\n\t\t}\n\t}\n}\n\nexport class ExtHostWebviewViews implements extHostProtocol.ExtHostWebviewViewsShape {\n\n\tprivate readonly _proxy: extHostProtocol.MainThreadWebviewViewsShape;\n\n\tprivate readonly _viewProviders = new Map<string, {\n\t\treadonly provider: vscode.WebviewViewProvider;\n\t\treadonly extension: IExtensionDescription;\n\t}>();\n\n\tprivate readonly _webviewViews = new Map<extHostProtocol.WebviewHandle, ExtHostWebviewView>();\n\n\tconstructor(\n\t\tmainContext: extHostProtocol.IMainContext,\n\t\tprivate readonly _extHostWebview: ExtHostWebviews,\n\t) {\n\t\tthis._proxy = mainContext.getProxy(extHostProtocol.MainContext.MainThreadWebviewViews);\n\t}\n\n\tpublic registerWebviewViewProvider(\n\t\textension: IExtensionDescription,\n\t\tviewType: string,\n\t\tprovider: vscode.WebviewViewProvider,\n\t\twebviewOptions?: {\n\t\t\tretainContextWhenHidden?: boolean;\n\t\t},\n\t): vscode.Disposable {\n\t\tif (this._viewProviders.has(viewType)) {\n\t\t\tthrow new Error(`View provider for '${viewType}' already registered`);\n\t\t}\n\n\t\tthis._viewProviders.set(viewType, { provider, extension });\n\t\tthis._proxy.$registerWebviewViewProvider(toExtensionData(extension), viewType, {\n\t\t\tretainContextWhenHidden: webviewOptions?.retainContextWhenHidden,\n\t\t\tserializeBuffersForPostMessage: shouldSerializeBuffersForPostMessage(extension),\n\t\t});\n\n\t\treturn new extHostTypes.Disposable(() => {\n\t\t\tthis._viewProviders.delete(viewType);\n\t\t\tthis._proxy.$unregisterWebviewViewProvider(viewType);\n\t\t});\n\t}\n\n\tasync $resolveWebviewView(\n\t\twebviewHandle: string,\n\t\tviewType: string,\n\t\ttitle: string | undefined,\n\t\tstate: any,\n\t\tcancellation: CancellationToken,\n\t): Promise<void> {\n\t\tconst entry = this._viewProviders.get(viewType);\n\t\tif (!entry) {\n\t\t\tthrow new Error(`No view provider found for '${viewType}'`);\n\t\t}\n\n\t\tconst { provider, extension } = entry;\n\n\t\tconst webview = this._extHostWebview.createNewWebview(webviewHandle, { /* todo */ }, extension);\n\t\tconst revivedView = new ExtHostWebviewView(webviewHandle, this._proxy, viewType, title, webview, true);\n\n\t\tthis._webviewViews.set(webviewHandle, revivedView);\n\n\t\tawait provider.resolveWebviewView(revivedView, { state }, cancellation);\n\t}\n\n\tasync $onDidChangeWebviewViewVisibility(\n\t\twebviewHandle: string,\n\t\tvisible: boolean\n\t) {\n\t\tconst webviewView = this.getWebviewView(webviewHandle);\n\t\twebviewView._setVisible(visible);\n\t}\n\n\tasync $disposeWebviewView(webviewHandle: string) {\n\t\tconst webviewView = this.getWebviewView(webviewHandle);\n\t\tthis._webviewViews.delete(webviewHandle);\n\t\twebviewView.dispose();\n\n\t\tthis._extHostWebview.deleteWebview(webviewHandle);\n\t}\n\n\tprivate getWebviewView(handle: string): ExtHostWebviewView {\n\t\tconst entry = this._webviewViews.get(handle);\n\t\tif (!entry) {\n\t\t\tthrow new Error('No webview found');\n\t\t}\n\t\treturn entry;\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
