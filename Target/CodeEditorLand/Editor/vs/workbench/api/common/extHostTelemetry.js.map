{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/api/common/extHostTelemetry.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport type * as vscode from 'vscode';\nimport { createDecorator } from '../../../platform/instantiation/common/instantiation.js';\nimport { Event, Emitter } from '../../../base/common/event.js';\nimport { ExtHostTelemetryShape } from './extHost.protocol.js';\nimport { ICommonProperties, TelemetryLevel } from '../../../platform/telemetry/common/telemetry.js';\nimport { ILogger, ILoggerService, LogLevel, isLogLevel } from '../../../platform/log/common/log.js';\nimport { IExtHostInitDataService } from './extHostInitDataService.js';\nimport { ExtensionIdentifier, IExtensionDescription } from '../../../platform/extensions/common/extensions.js';\nimport { UIKind } from '../../services/extensions/common/extensionHostProtocol.js';\nimport { getRemoteName } from '../../../platform/remote/common/remoteHosts.js';\nimport { cleanData, cleanRemoteAuthority, extensionTelemetryLogChannelId } from '../../../platform/telemetry/common/telemetryUtils.js';\nimport { mixin } from '../../../base/common/objects.js';\nimport { URI } from '../../../base/common/uri.js';\nimport { Disposable } from '../../../base/common/lifecycle.js';\nimport { localize } from '../../../nls.js';\n\nexport class ExtHostTelemetry extends Disposable implements ExtHostTelemetryShape {\n\n\treadonly _serviceBrand: undefined;\n\n\tprivate readonly _onDidChangeTelemetryEnabled = this._register(new Emitter<boolean>());\n\treadonly onDidChangeTelemetryEnabled: Event<boolean> = this._onDidChangeTelemetryEnabled.event;\n\n\tprivate readonly _onDidChangeTelemetryConfiguration = this._register(new Emitter<vscode.TelemetryConfiguration>());\n\treadonly onDidChangeTelemetryConfiguration: Event<vscode.TelemetryConfiguration> = this._onDidChangeTelemetryConfiguration.event;\n\n\tprivate _productConfig: { usage: boolean; error: boolean } = { usage: true, error: true };\n\tprivate _level: TelemetryLevel = TelemetryLevel.NONE;\n\t// This holds whether or not we're running with --disable-telemetry, etc. Usings supportsTelemtry() from the main thread\n\tprivate _telemetryIsSupported: boolean = false;\n\tprivate _oldTelemetryEnablement: boolean | undefined;\n\tprivate readonly _inLoggingOnlyMode: boolean = false;\n\tprivate readonly extHostTelemetryLogFile: URI;\n\tprivate readonly _outputLogger: ILogger;\n\tprivate readonly _telemetryLoggers = new Map<string, ExtHostTelemetryLogger[]>();\n\n\tconstructor(\n\t\t@IExtHostInitDataService private readonly initData: IExtHostInitDataService,\n\t\t@ILoggerService private readonly loggerService: ILoggerService,\n\t) {\n\t\tsuper();\n\t\tthis.extHostTelemetryLogFile = URI.revive(this.initData.environment.extensionTelemetryLogResource);\n\t\tthis._inLoggingOnlyMode = this.initData.environment.isExtensionTelemetryLoggingOnly;\n\t\tthis._outputLogger = loggerService.createLogger(this.extHostTelemetryLogFile, { id: extensionTelemetryLogChannelId, name: localize('extensionTelemetryLog', \"Extension Telemetry{0}\", this._inLoggingOnlyMode ? ' (Not Sent)' : ''), hidden: true });\n\t\tthis._register(this._outputLogger);\n\t\tthis._register(loggerService.onDidChangeLogLevel(arg => {\n\t\t\tif (isLogLevel(arg)) {\n\t\t\t\tthis.updateLoggerVisibility();\n\t\t\t}\n\t\t}));\n\t\tthis._outputLogger.info('Below are logs for extension telemetry events sent to the telemetry output channel API once the log level is set to trace.');\n\t\tthis._outputLogger.info('===========================================================');\n\t}\n\n\tprivate updateLoggerVisibility(): void {\n\t\tthis.loggerService.setVisibility(this.extHostTelemetryLogFile, this._telemetryIsSupported && this.loggerService.getLogLevel() === LogLevel.Trace);\n\t}\n\n\tgetTelemetryConfiguration(): boolean {\n\t\treturn this._level === TelemetryLevel.USAGE;\n\t}\n\n\tgetTelemetryDetails(): vscode.TelemetryConfiguration {\n\t\treturn {\n\t\t\tisCrashEnabled: this._level >= TelemetryLevel.CRASH,\n\t\t\tisErrorsEnabled: this._productConfig.error ? this._level >= TelemetryLevel.ERROR : false,\n\t\t\tisUsageEnabled: this._productConfig.usage ? this._level >= TelemetryLevel.USAGE : false\n\t\t};\n\t}\n\n\tinstantiateLogger(extension: IExtensionDescription, sender: vscode.TelemetrySender, options?: vscode.TelemetryLoggerOptions) {\n\t\tconst telemetryDetails = this.getTelemetryDetails();\n\t\tconst logger = new ExtHostTelemetryLogger(\n\t\t\tsender,\n\t\t\toptions,\n\t\t\textension,\n\t\t\tthis._outputLogger,\n\t\t\tthis._inLoggingOnlyMode,\n\t\t\tthis.getBuiltInCommonProperties(extension),\n\t\t\t{ isUsageEnabled: telemetryDetails.isUsageEnabled, isErrorsEnabled: telemetryDetails.isErrorsEnabled }\n\t\t);\n\t\tconst loggers = this._telemetryLoggers.get(extension.identifier.value) ?? [];\n\t\tthis._telemetryLoggers.set(extension.identifier.value, [...loggers, logger]);\n\t\treturn logger.apiTelemetryLogger;\n\t}\n\n\t$initializeTelemetryLevel(level: TelemetryLevel, supportsTelemetry: boolean, productConfig?: { usage: boolean; error: boolean }): void {\n\t\tthis._level = level;\n\t\tthis._telemetryIsSupported = supportsTelemetry;\n\t\tthis._productConfig = productConfig ?? { usage: true, error: true };\n\t\tthis.updateLoggerVisibility();\n\t}\n\n\tgetBuiltInCommonProperties(extension: IExtensionDescription): ICommonProperties {\n\t\tconst commonProperties: ICommonProperties = Object.create(null);\n\t\t// TODO @lramos15, does os info like node arch, platform version, etc exist here.\n\t\t// Or will first party extensions just mix this in\n\t\tcommonProperties['common.extname'] = `${extension.publisher}.${extension.name}`;\n\t\tcommonProperties['common.extversion'] = extension.version;\n\t\tcommonProperties['common.vscodemachineid'] = this.initData.telemetryInfo.machineId;\n\t\tcommonProperties['common.vscodesessionid'] = this.initData.telemetryInfo.sessionId;\n\t\tcommonProperties['common.sqmid'] = this.initData.telemetryInfo.sqmId;\n\t\tcommonProperties['common.devDeviceId'] = this.initData.telemetryInfo.devDeviceId;\n\t\tcommonProperties['common.vscodeversion'] = this.initData.version;\n\t\tcommonProperties['common.isnewappinstall'] = isNewAppInstall(this.initData.telemetryInfo.firstSessionDate);\n\t\tcommonProperties['common.product'] = this.initData.environment.appHost;\n\n\t\tswitch (this.initData.uiKind) {\n\t\t\tcase UIKind.Web:\n\t\t\t\tcommonProperties['common.uikind'] = 'web';\n\t\t\t\tbreak;\n\t\t\tcase UIKind.Desktop:\n\t\t\t\tcommonProperties['common.uikind'] = 'desktop';\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tcommonProperties['common.uikind'] = 'unknown';\n\t\t}\n\n\t\tcommonProperties['common.remotename'] = getRemoteName(cleanRemoteAuthority(this.initData.remote.authority));\n\n\t\treturn commonProperties;\n\t}\n\n\t$onDidChangeTelemetryLevel(level: TelemetryLevel): void {\n\t\tthis._oldTelemetryEnablement = this.getTelemetryConfiguration();\n\t\tthis._level = level;\n\t\tconst telemetryDetails = this.getTelemetryDetails();\n\t\t// Remove all disposed loggers\n\t\tthis._telemetryLoggers.forEach((loggers, key) => {\n\t\t\tconst newLoggers = loggers.filter(l => !l.isDisposed);\n\t\t\tif (newLoggers.length === 0) {\n\t\t\t\tthis._telemetryLoggers.delete(key);\n\t\t\t} else {\n\t\t\t\tthis._telemetryLoggers.set(key, newLoggers);\n\t\t\t}\n\t\t});\n\t\t// Loop through all loggers and update their level\n\t\tthis._telemetryLoggers.forEach(loggers => {\n\t\t\tfor (const logger of loggers) {\n\t\t\t\tlogger.updateTelemetryEnablements(telemetryDetails.isUsageEnabled, telemetryDetails.isErrorsEnabled);\n\t\t\t}\n\t\t});\n\n\t\tif (this._oldTelemetryEnablement !== this.getTelemetryConfiguration()) {\n\t\t\tthis._onDidChangeTelemetryEnabled.fire(this.getTelemetryConfiguration());\n\t\t}\n\t\tthis._onDidChangeTelemetryConfiguration.fire(this.getTelemetryDetails());\n\t\tthis.updateLoggerVisibility();\n\t}\n\n\tonExtensionError(extension: ExtensionIdentifier, error: Error): boolean {\n\t\tconst loggers = this._telemetryLoggers.get(extension.value);\n\t\tconst nonDisposedLoggers = loggers?.filter(l => !l.isDisposed);\n\t\tif (!nonDisposedLoggers) {\n\t\t\tthis._telemetryLoggers.delete(extension.value);\n\t\t\treturn false;\n\t\t}\n\t\tlet errorEmitted = false;\n\t\tfor (const logger of nonDisposedLoggers) {\n\t\t\tif (logger.ignoreUnhandledExtHostErrors) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tlogger.logError(error);\n\t\t\terrorEmitted = true;\n\t\t}\n\t\treturn errorEmitted;\n\t}\n}\n\nexport class ExtHostTelemetryLogger {\n\n\tstatic validateSender(sender: vscode.TelemetrySender): void {\n\t\tif (typeof sender !== 'object') {\n\t\t\tthrow new TypeError('TelemetrySender argument is invalid');\n\t\t}\n\t\tif (typeof sender.sendEventData !== 'function') {\n\t\t\tthrow new TypeError('TelemetrySender.sendEventData must be a function');\n\t\t}\n\t\tif (typeof sender.sendErrorData !== 'function') {\n\t\t\tthrow new TypeError('TelemetrySender.sendErrorData must be a function');\n\t\t}\n\t\tif (typeof sender.flush !== 'undefined' && typeof sender.flush !== 'function') {\n\t\t\tthrow new TypeError('TelemetrySender.flush must be a function or undefined');\n\t\t}\n\t}\n\n\tprivate readonly _onDidChangeEnableStates = new Emitter<vscode.TelemetryLogger>();\n\tprivate readonly _ignoreBuiltinCommonProperties: boolean;\n\tprivate readonly _additionalCommonProperties: Record<string, any> | undefined;\n\tpublic readonly ignoreUnhandledExtHostErrors: boolean;\n\n\tprivate _telemetryEnablements: { isUsageEnabled: boolean; isErrorsEnabled: boolean };\n\tprivate _apiObject: vscode.TelemetryLogger | undefined;\n\tprivate _sender: vscode.TelemetrySender | undefined;\n\n\tconstructor(\n\t\tsender: vscode.TelemetrySender,\n\t\toptions: vscode.TelemetryLoggerOptions | undefined,\n\t\tprivate readonly _extension: IExtensionDescription,\n\t\tprivate readonly _logger: ILogger,\n\t\tprivate readonly _inLoggingOnlyMode: boolean,\n\t\tprivate readonly _commonProperties: Record<string, any>,\n\t\ttelemetryEnablements: { isUsageEnabled: boolean; isErrorsEnabled: boolean }\n\t) {\n\t\tthis.ignoreUnhandledExtHostErrors = options?.ignoreUnhandledErrors ?? false;\n\t\tthis._ignoreBuiltinCommonProperties = options?.ignoreBuiltInCommonProperties ?? false;\n\t\tthis._additionalCommonProperties = options?.additionalCommonProperties;\n\t\tthis._sender = sender;\n\t\tthis._telemetryEnablements = { isUsageEnabled: telemetryEnablements.isUsageEnabled, isErrorsEnabled: telemetryEnablements.isErrorsEnabled };\n\t}\n\n\tupdateTelemetryEnablements(isUsageEnabled: boolean, isErrorsEnabled: boolean): void {\n\t\tif (this._apiObject) {\n\t\t\tthis._telemetryEnablements = { isUsageEnabled, isErrorsEnabled };\n\t\t\tthis._onDidChangeEnableStates.fire(this._apiObject);\n\t\t}\n\t}\n\n\tmixInCommonPropsAndCleanData(data: Record<string, any>): Record<string, any> {\n\t\t// Some telemetry modules prefer to break properties and measurmements up\n\t\t// We mix common properties into the properties tab.\n\t\tlet updatedData = 'properties' in data ? (data.properties ?? {}) : data;\n\n\t\t// We don't clean measurements since they are just numbers\n\t\tupdatedData = cleanData(updatedData, []);\n\n\t\tif (this._additionalCommonProperties) {\n\t\t\tupdatedData = mixin(updatedData, this._additionalCommonProperties);\n\t\t}\n\n\t\tif (!this._ignoreBuiltinCommonProperties) {\n\t\t\tupdatedData = mixin(updatedData, this._commonProperties);\n\t\t}\n\n\t\tif ('properties' in data) {\n\t\t\tdata.properties = updatedData;\n\t\t} else {\n\t\t\tdata = updatedData;\n\t\t}\n\n\t\treturn data;\n\t}\n\n\tprivate logEvent(eventName: string, data?: Record<string, any>): void {\n\t\t// No sender means likely disposed of, we should no-op\n\t\tif (!this._sender) {\n\t\t\treturn;\n\t\t}\n\t\t// If it's a built-in extension (vscode publisher) we don't prefix the publisher and only the ext name\n\t\tif (this._extension.publisher === 'vscode') {\n\t\t\teventName = this._extension.name + '/' + eventName;\n\t\t} else {\n\t\t\teventName = this._extension.identifier.value + '/' + eventName;\n\t\t}\n\t\tdata = this.mixInCommonPropsAndCleanData(data || {});\n\t\tif (!this._inLoggingOnlyMode) {\n\t\t\tthis._sender?.sendEventData(eventName, data);\n\t\t}\n\t\tthis._logger.trace(eventName, data);\n\t}\n\n\tlogUsage(eventName: string, data?: Record<string, any>): void {\n\t\tif (!this._telemetryEnablements.isUsageEnabled) {\n\t\t\treturn;\n\t\t}\n\t\tthis.logEvent(eventName, data);\n\t}\n\n\tlogError(eventNameOrException: Error | string, data?: Record<string, any>): void {\n\t\tif (!this._telemetryEnablements.isErrorsEnabled || !this._sender) {\n\t\t\treturn;\n\t\t}\n\t\tif (typeof eventNameOrException === 'string') {\n\t\t\tthis.logEvent(eventNameOrException, data);\n\t\t} else {\n\t\t\tconst errorData = {\n\t\t\t\tname: eventNameOrException.name,\n\t\t\t\tmessage: eventNameOrException.message,\n\t\t\t\tstack: eventNameOrException.stack,\n\t\t\t\tcause: eventNameOrException.cause\n\t\t\t};\n\t\t\tconst cleanedErrorData = cleanData(errorData, []);\n\t\t\t// Reconstruct the error object with the cleaned data\n\t\t\tconst cleanedError = new Error(cleanedErrorData.message, {\n\t\t\t\tcause: cleanedErrorData.cause\n\t\t\t});\n\t\t\tcleanedError.stack = cleanedErrorData.stack;\n\t\t\tcleanedError.name = cleanedErrorData.name;\n\t\t\tdata = this.mixInCommonPropsAndCleanData(data || {});\n\t\t\tif (!this._inLoggingOnlyMode) {\n\t\t\t\tthis._sender.sendErrorData(cleanedError, data);\n\t\t\t}\n\t\t\tthis._logger.trace('exception', data);\n\t\t}\n\t}\n\n\tget apiTelemetryLogger(): vscode.TelemetryLogger {\n\t\tif (!this._apiObject) {\n\t\t\tconst that = this;\n\t\t\tconst obj: vscode.TelemetryLogger = {\n\t\t\t\tlogUsage: that.logUsage.bind(that),\n\t\t\t\tget isUsageEnabled() {\n\t\t\t\t\treturn that._telemetryEnablements.isUsageEnabled;\n\t\t\t\t},\n\t\t\t\tget isErrorsEnabled() {\n\t\t\t\t\treturn that._telemetryEnablements.isErrorsEnabled;\n\t\t\t\t},\n\t\t\t\tlogError: that.logError.bind(that),\n\t\t\t\tdispose: that.dispose.bind(that),\n\t\t\t\tonDidChangeEnableStates: that._onDidChangeEnableStates.event.bind(that)\n\t\t\t};\n\t\t\tthis._apiObject = Object.freeze(obj);\n\t\t}\n\t\treturn this._apiObject;\n\t}\n\n\tget isDisposed(): boolean {\n\t\treturn !this._sender;\n\t}\n\n\tdispose(): void {\n\t\tif (this._sender?.flush) {\n\t\t\tlet tempSender: vscode.TelemetrySender | undefined = this._sender;\n\t\t\tthis._sender = undefined;\n\t\t\tPromise.resolve(tempSender.flush!()).then(tempSender = undefined);\n\t\t\tthis._apiObject = undefined;\n\t\t} else {\n\t\t\tthis._sender = undefined;\n\t\t}\n\t}\n}\n\nexport function isNewAppInstall(firstSessionDate: string): boolean {\n\tconst installAge = Date.now() - new Date(firstSessionDate).getTime();\n\treturn isNaN(installAge) ? false : installAge < 1000 * 60 * 60 * 24; // install age is less than a day\n}\n\nexport const IExtHostTelemetry = createDecorator<IExtHostTelemetry>('IExtHostTelemetry');\nexport interface IExtHostTelemetry extends ExtHostTelemetry, ExtHostTelemetryShape { }\n"],
  "mappings": "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",
  "names": []
}
