{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/api/common/extHostWebviewPanels.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n/* eslint-disable local/code-no-native-private */\n\nimport { Emitter } from '../../../base/common/event.js';\nimport { Disposable } from '../../../base/common/lifecycle.js';\nimport { URI } from '../../../base/common/uri.js';\nimport { generateUuid } from '../../../base/common/uuid.js';\nimport { IExtensionDescription } from '../../../platform/extensions/common/extensions.js';\nimport * as typeConverters from './extHostTypeConverters.js';\nimport { serializeWebviewOptions, ExtHostWebview, ExtHostWebviews, toExtensionData, shouldSerializeBuffersForPostMessage } from './extHostWebview.js';\nimport { IExtHostWorkspace } from './extHostWorkspace.js';\nimport { EditorGroupColumn } from '../../services/editor/common/editorGroupColumn.js';\nimport type * as vscode from 'vscode';\nimport * as extHostProtocol from './extHost.protocol.js';\nimport * as extHostTypes from './extHostTypes.js';\n\n\ntype IconPath = URI | { readonly light: URI; readonly dark: URI };\n\nclass ExtHostWebviewPanel extends Disposable implements vscode.WebviewPanel {\n\n\treadonly #handle: extHostProtocol.WebviewHandle;\n\treadonly #proxy: extHostProtocol.MainThreadWebviewPanelsShape;\n\treadonly #viewType: string;\n\n\treadonly #webview: ExtHostWebview;\n\treadonly #options: vscode.WebviewPanelOptions;\n\n\t#title: string;\n\t#iconPath?: IconPath;\n\t#viewColumn: vscode.ViewColumn | undefined = undefined;\n\t#visible: boolean = true;\n\t#active: boolean;\n\t#isDisposed: boolean = false;\n\n\treadonly #onDidDispose = this._register(new Emitter<void>());\n\tpublic readonly onDidDispose = this.#onDidDispose.event;\n\n\treadonly #onDidChangeViewState = this._register(new Emitter<vscode.WebviewPanelOnDidChangeViewStateEvent>());\n\tpublic readonly onDidChangeViewState = this.#onDidChangeViewState.event;\n\n\tconstructor(\n\t\thandle: extHostProtocol.WebviewHandle,\n\t\tproxy: extHostProtocol.MainThreadWebviewPanelsShape,\n\t\twebview: ExtHostWebview,\n\t\tparams: {\n\t\t\tviewType: string;\n\t\t\ttitle: string;\n\t\t\tviewColumn: vscode.ViewColumn | undefined;\n\t\t\tpanelOptions: vscode.WebviewPanelOptions;\n\t\t\tactive: boolean;\n\t\t}\n\t) {\n\t\tsuper();\n\t\tthis.#handle = handle;\n\t\tthis.#proxy = proxy;\n\t\tthis.#webview = webview;\n\t\tthis.#viewType = params.viewType;\n\t\tthis.#options = params.panelOptions;\n\t\tthis.#viewColumn = params.viewColumn;\n\t\tthis.#title = params.title;\n\t\tthis.#active = params.active;\n\t}\n\n\tpublic override dispose() {\n\t\tif (this.#isDisposed) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.#isDisposed = true;\n\t\tthis.#onDidDispose.fire();\n\n\t\tthis.#proxy.$disposeWebview(this.#handle);\n\t\tthis.#webview.dispose();\n\n\t\tsuper.dispose();\n\t}\n\n\tget webview() {\n\t\tthis.assertNotDisposed();\n\t\treturn this.#webview;\n\t}\n\n\tget viewType(): string {\n\t\tthis.assertNotDisposed();\n\t\treturn this.#viewType;\n\t}\n\n\tget title(): string {\n\t\tthis.assertNotDisposed();\n\t\treturn this.#title;\n\t}\n\n\tset title(value: string) {\n\t\tthis.assertNotDisposed();\n\t\tif (this.#title !== value) {\n\t\t\tthis.#title = value;\n\t\t\tthis.#proxy.$setTitle(this.#handle, value);\n\t\t}\n\t}\n\n\tget iconPath(): IconPath | undefined {\n\t\tthis.assertNotDisposed();\n\t\treturn this.#iconPath;\n\t}\n\n\tset iconPath(value: IconPath | undefined) {\n\t\tthis.assertNotDisposed();\n\t\tif (this.#iconPath !== value) {\n\t\t\tthis.#iconPath = value;\n\n\t\t\tthis.#proxy.$setIconPath(this.#handle, URI.isUri(value) ? { light: value, dark: value } : value);\n\t\t}\n\t}\n\n\tget options() {\n\t\treturn this.#options;\n\t}\n\n\tget viewColumn(): vscode.ViewColumn | undefined {\n\t\tthis.assertNotDisposed();\n\t\tif (typeof this.#viewColumn === 'number' && this.#viewColumn < 0) {\n\t\t\t// We are using a symbolic view column\n\t\t\t// Return undefined instead to indicate that the real view column is currently unknown but will be resolved.\n\t\t\treturn undefined;\n\t\t}\n\t\treturn this.#viewColumn;\n\t}\n\n\tpublic get active(): boolean {\n\t\tthis.assertNotDisposed();\n\t\treturn this.#active;\n\t}\n\n\tpublic get visible(): boolean {\n\t\tthis.assertNotDisposed();\n\t\treturn this.#visible;\n\t}\n\n\t_updateViewState(newState: { active: boolean; visible: boolean; viewColumn: vscode.ViewColumn }) {\n\t\tif (this.#isDisposed) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (this.active !== newState.active || this.visible !== newState.visible || this.viewColumn !== newState.viewColumn) {\n\t\t\tthis.#active = newState.active;\n\t\t\tthis.#visible = newState.visible;\n\t\t\tthis.#viewColumn = newState.viewColumn;\n\t\t\tthis.#onDidChangeViewState.fire({ webviewPanel: this });\n\t\t}\n\t}\n\n\tpublic reveal(viewColumn?: vscode.ViewColumn, preserveFocus?: boolean): void {\n\t\tthis.assertNotDisposed();\n\t\tthis.#proxy.$reveal(this.#handle, {\n\t\t\tviewColumn: typeof viewColumn === 'undefined' ? undefined : typeConverters.ViewColumn.from(viewColumn),\n\t\t\tpreserveFocus: !!preserveFocus\n\t\t});\n\t}\n\n\tprivate assertNotDisposed() {\n\t\tif (this.#isDisposed) {\n\t\t\tthrow new Error('Webview is disposed');\n\t\t}\n\t}\n}\n\nexport class ExtHostWebviewPanels extends Disposable implements extHostProtocol.ExtHostWebviewPanelsShape {\n\n\tprivate static newHandle(): extHostProtocol.WebviewHandle {\n\t\treturn generateUuid();\n\t}\n\n\tprivate readonly _proxy: extHostProtocol.MainThreadWebviewPanelsShape;\n\n\tprivate readonly _webviewPanels = new Map<extHostProtocol.WebviewHandle, ExtHostWebviewPanel>();\n\n\tprivate readonly _serializers = new Map<string, {\n\t\treadonly serializer: vscode.WebviewPanelSerializer;\n\t\treadonly extension: IExtensionDescription;\n\t}>();\n\n\tconstructor(\n\t\tmainContext: extHostProtocol.IMainContext,\n\t\tprivate readonly webviews: ExtHostWebviews,\n\t\tprivate readonly workspace: IExtHostWorkspace | undefined,\n\t) {\n\t\tsuper();\n\t\tthis._proxy = mainContext.getProxy(extHostProtocol.MainContext.MainThreadWebviewPanels);\n\t}\n\n\tpublic override dispose(): void {\n\t\tsuper.dispose();\n\n\t\tthis._webviewPanels.forEach(value => value.dispose());\n\t\tthis._webviewPanels.clear();\n\t}\n\n\tpublic createWebviewPanel(\n\t\textension: IExtensionDescription,\n\t\tviewType: string,\n\t\ttitle: string,\n\t\tshowOptions: vscode.ViewColumn | { viewColumn: vscode.ViewColumn; preserveFocus?: boolean },\n\t\toptions: (vscode.WebviewPanelOptions & vscode.WebviewOptions) = {},\n\t): vscode.WebviewPanel {\n\t\tconst viewColumn = typeof showOptions === 'object' ? showOptions.viewColumn : showOptions;\n\t\tconst webviewShowOptions = {\n\t\t\tviewColumn: typeConverters.ViewColumn.from(viewColumn),\n\t\t\tpreserveFocus: typeof showOptions === 'object' && !!showOptions.preserveFocus\n\t\t};\n\n\t\tconst serializeBuffersForPostMessage = shouldSerializeBuffersForPostMessage(extension);\n\t\tconst handle = ExtHostWebviewPanels.newHandle();\n\t\tthis._proxy.$createWebviewPanel(toExtensionData(extension), handle, viewType, {\n\t\t\ttitle,\n\t\t\tpanelOptions: serializeWebviewPanelOptions(options),\n\t\t\twebviewOptions: serializeWebviewOptions(extension, this.workspace, options),\n\t\t\tserializeBuffersForPostMessage,\n\t\t}, webviewShowOptions);\n\n\t\tconst webview = this.webviews.createNewWebview(handle, options, extension);\n\t\tconst panel = this.createNewWebviewPanel(handle, viewType, title, viewColumn, options, webview, true);\n\n\t\treturn panel;\n\t}\n\n\tpublic $onDidChangeWebviewPanelViewStates(newStates: extHostProtocol.WebviewPanelViewStateData): void {\n\t\tconst handles = Object.keys(newStates);\n\t\t// Notify webviews of state changes in the following order:\n\t\t// - Non-visible\n\t\t// - Visible\n\t\t// - Active\n\t\thandles.sort((a, b) => {\n\t\t\tconst stateA = newStates[a];\n\t\t\tconst stateB = newStates[b];\n\t\t\tif (stateA.active) {\n\t\t\t\treturn 1;\n\t\t\t}\n\t\t\tif (stateB.active) {\n\t\t\t\treturn -1;\n\t\t\t}\n\t\t\treturn (+stateA.visible) - (+stateB.visible);\n\t\t});\n\n\t\tfor (const handle of handles) {\n\t\t\tconst panel = this.getWebviewPanel(handle);\n\t\t\tif (!panel) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tconst newState = newStates[handle];\n\t\t\tpanel._updateViewState({\n\t\t\t\tactive: newState.active,\n\t\t\t\tvisible: newState.visible,\n\t\t\t\tviewColumn: typeConverters.ViewColumn.to(newState.position),\n\t\t\t});\n\t\t}\n\t}\n\n\tasync $onDidDisposeWebviewPanel(handle: extHostProtocol.WebviewHandle): Promise<void> {\n\t\tconst panel = this.getWebviewPanel(handle);\n\t\tpanel?.dispose();\n\n\t\tthis._webviewPanels.delete(handle);\n\t\tthis.webviews.deleteWebview(handle);\n\t}\n\n\tpublic registerWebviewPanelSerializer(\n\t\textension: IExtensionDescription,\n\t\tviewType: string,\n\t\tserializer: vscode.WebviewPanelSerializer\n\t): vscode.Disposable {\n\t\tif (this._serializers.has(viewType)) {\n\t\t\tthrow new Error(`Serializer for '${viewType}' already registered`);\n\t\t}\n\n\t\tthis._serializers.set(viewType, { serializer, extension });\n\t\tthis._proxy.$registerSerializer(viewType, {\n\t\t\tserializeBuffersForPostMessage: shouldSerializeBuffersForPostMessage(extension)\n\t\t});\n\n\t\treturn new extHostTypes.Disposable(() => {\n\t\t\tthis._serializers.delete(viewType);\n\t\t\tthis._proxy.$unregisterSerializer(viewType);\n\t\t});\n\t}\n\n\tasync $deserializeWebviewPanel(\n\t\twebviewHandle: extHostProtocol.WebviewHandle,\n\t\tviewType: string,\n\t\tinitData: {\n\t\t\ttitle: string;\n\t\t\tstate: any;\n\t\t\twebviewOptions: extHostProtocol.IWebviewContentOptions;\n\t\t\tpanelOptions: extHostProtocol.IWebviewPanelOptions;\n\t\t\tactive: boolean;\n\t\t},\n\t\tposition: EditorGroupColumn\n\t): Promise<void> {\n\t\tconst entry = this._serializers.get(viewType);\n\t\tif (!entry) {\n\t\t\tthrow new Error(`No serializer found for '${viewType}'`);\n\t\t}\n\t\tconst { serializer, extension } = entry;\n\n\t\tconst webview = this.webviews.createNewWebview(webviewHandle, initData.webviewOptions, extension);\n\t\tconst revivedPanel = this.createNewWebviewPanel(webviewHandle, viewType, initData.title, position, initData.panelOptions, webview, initData.active);\n\t\tawait serializer.deserializeWebviewPanel(revivedPanel, initData.state);\n\t}\n\n\tpublic createNewWebviewPanel(webviewHandle: string, viewType: string, title: string, position: vscode.ViewColumn, options: extHostProtocol.IWebviewPanelOptions, webview: ExtHostWebview, active: boolean) {\n\t\tconst panel = new ExtHostWebviewPanel(webviewHandle, this._proxy, webview, { viewType, title, viewColumn: position, panelOptions: options, active });\n\t\tthis._webviewPanels.set(webviewHandle, panel);\n\t\treturn panel;\n\t}\n\n\tpublic getWebviewPanel(handle: extHostProtocol.WebviewHandle): ExtHostWebviewPanel | undefined {\n\t\treturn this._webviewPanels.get(handle);\n\t}\n}\n\nfunction serializeWebviewPanelOptions(options: vscode.WebviewPanelOptions): extHostProtocol.IWebviewPanelOptions {\n\treturn {\n\t\tenableFindWidget: options.enableFindWidget,\n\t\tretainContextWhenHidden: options.retainContextWhenHidden,\n\t};\n}\n"],
  "mappings": "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",
  "names": []
}
