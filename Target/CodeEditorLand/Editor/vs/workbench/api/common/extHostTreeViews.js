import{localize as V}from"../../../nls.js";import{basename as k}from"../../../base/common/resources.js";import{URI as C}from"../../../base/common/uri.js";import{Emitter as v,Event as _}from"../../../base/common/event.js";import{Disposable as P,DisposableStore as A}from"../../../base/common/lifecycle.js";import{NoTreeViewError as g}from"../../common/views.js";import{asPromise as T}from"../../../base/common/async.js";import*as m from"./extHostTypes.js";import{isUndefinedOrNull as p,isString as N}from"../../../base/common/types.js";import{equals as H,coalesce as I}from"../../../base/common/arrays.js";import{MarkdownString as y,ViewBadge as R,DataTransfer as S}from"./extHostTypeConverters.js";import{isMarkdownString as $}from"../../../base/common/htmlContent.js";import{CancellationTokenSource as D}from"../../../base/common/cancellation.js";import{TreeViewsDnDService as M}from"../../../editor/common/services/treeViewsDnd.js";import{checkProposedApiEnabled as E}from"../../services/extensions/common/extensions.js";function x(f,b){if(N(f))return{label:f};if(f&&typeof f=="object"&&typeof f.label=="string"){let e;return Array.isArray(f.highlights)&&(e=f.highlights.filter(t=>t.length===2&&typeof t[0]=="number"&&typeof t[1]=="number"),e=e.length?e:void 0),{label:f.label,highlights:e}}}class Ee extends P{constructor(e,t,i){super();this._proxy=e;this.commands=t;this.logService=i;function r(n){return n&&n.$treeViewId&&(n.$treeItemHandle||n.$selectedTreeItems||n.$focusedTreeItem)}t.registerArgumentProcessor({processArgument:n=>r(n)?this.convertArgument(n):Array.isArray(n)&&n.length>0?n.map(s=>r(s)?this.convertArgument(s):s):n})}treeViews=new Map;treeDragAndDropService=new M;registerTreeDataProvider(e,t,i){const r=this.createTreeView(e,{treeDataProvider:t},i);return{dispose:()=>r.dispose()}}createTreeView(e,t,i){if(!t||!t.treeDataProvider)throw new Error("Options with treeDataProvider is mandatory");const r=t.dragAndDropController?.dropMimeTypes??[],n=t.dragAndDropController?.dragMimeTypes??[],s=!!t.dragAndDropController?.handleDrag,a=!!t.dragAndDropController?.handleDrop,o=this.createExtHostTreeView(e,t,i),c={showCollapseAll:!!t.showCollapseAll,canSelectMany:!!t.canSelectMany,dropMimeTypes:r,dragMimeTypes:n,hasHandleDrag:s,hasHandleDrop:a,manuallyManageCheckboxes:!!t.manageCheckboxStateManually},l=this._proxy.$registerTreeViewDataProvider(e,c),h={get onDidCollapseElement(){return o.onDidCollapseElement},get onDidExpandElement(){return o.onDidExpandElement},get selection(){return o.selectedElements},get onDidChangeSelection(){return o.onDidChangeSelection},get activeItem(){return E(i,"treeViewActiveItem"),o.focusedElement},get onDidChangeActiveItem(){return E(i,"treeViewActiveItem"),o.onDidChangeActiveItem},get visible(){return o.visible},get onDidChangeVisibility(){return o.onDidChangeVisibility},get onDidChangeCheckboxState(){return o.onDidChangeCheckboxState},get message(){return o.message},set message(d){$(d)&&E(i,"treeViewMarkdownMessage"),o.message=d},get title(){return o.title},set title(d){o.title=d},get description(){return o.description},set description(d){o.description=d},get badge(){return o.badge},set badge(d){d!==void 0&&m.ViewBadge.isViewBadge(d)?o.badge={value:Math.floor(Math.abs(d.value)),tooltip:d.tooltip}:d===void 0&&(o.badge=void 0)},reveal:(d,u)=>o.reveal(d,u),dispose:async()=>{await l,this.treeViews.delete(e),o.dispose()}};return this._register(h),h}$getChildren(e,t){const i=this.treeViews.get(e);return i?i.getChildren(t):Promise.reject(new g(e))}async $handleDrop(e,t,i,r,n,s,a,o){const c=this.treeViews.get(e);if(!c)return Promise.reject(new g(e));const l=S.toDataTransfer(i,async h=>(await this._proxy.$resolveDropFileData(e,t,h)).buffer);return a===e&&o&&await this.addAdditionalTransferItems(l,c,o,n,s),c.onDrop(l,r,n)}async addAdditionalTransferItems(e,t,i,r,n){const s=this.treeDragAndDropService.removeDragOperationTransfer(n);if(s)(await s)?.forEach((a,o)=>{a&&e.set(o,a)});else if(n&&t.handleDrag){const a=t.handleDrag(i,e,r);this.treeDragAndDropService.addDragOperationTransfer(n,a),await a}return e}async $handleDrag(e,t,i,r){const n=this.treeViews.get(e);if(!n)return Promise.reject(new g(e));const s=await this.addAdditionalTransferItems(new m.DataTransfer,n,t,r,i);if(!(!s||r.isCancellationRequested))return S.from(s)}async $hasResolve(e){const t=this.treeViews.get(e);if(!t)throw new g(e);return t.hasResolve}$resolve(e,t,i){const r=this.treeViews.get(e);if(!r)throw new g(e);return r.resolveTreeItem(t,i)}$setExpanded(e,t,i){const r=this.treeViews.get(e);if(!r)throw new g(e);r.setExpanded(t,i)}$setSelectionAndFocus(e,t,i){const r=this.treeViews.get(e);if(!r)throw new g(e);r.setSelectionAndFocus(t,i)}$setVisible(e,t){const i=this.treeViews.get(e);if(!i){if(!t)return;throw new g(e)}i.setVisible(t)}$changeCheckboxState(e,t){const i=this.treeViews.get(e);if(!i)throw new g(e);i.setCheckboxState(t)}createExtHostTreeView(e,t,i){const r=this._register(new w(e,t,this._proxy,this.commands.converter,this.logService,i));return this.treeViews.set(e,r),r}convertArgument(e){const t=this.treeViews.get(e.$treeViewId);return t&&"$treeItemHandle"in e?t.getExtensionElement(e.$treeItemHandle):t&&"$focusedTreeItem"in e&&e.$focusedTreeItem?t.focusedElement:null}}class w extends P{constructor(e,t,i,r,n,s){super();this.viewId=e;this.proxy=i;this.commands=r;this.logService=n;this.extension=s;if(s.contributes&&s.contributes.views)for(const l in s.contributes.views)for(const h of s.contributes.views[l])h.id===e&&(this._title=h.name);this.dataProvider=t.treeDataProvider,this.dndController=t.dragAndDropController,this.dataProvider.onDidChangeTreeData&&this._register(this.dataProvider.onDidChangeTreeData(l=>{Array.isArray(l)&&l.length===0||this._onDidChangeData.fire({message:!1,element:l})}));let a,o;const c=_.debounce(this._onDidChangeData.event,(l,h)=>(l||(l={message:!1,elements:[]}),h.element!==!1&&(a||(a=new Promise(d=>o=d),this.refreshPromise=this.refreshPromise.then(()=>a)),Array.isArray(h.element)?l.elements.push(...h.element):l.elements.push(h.element)),h.message&&(l.message=!0),l),200,!0);this._register(c(({message:l,elements:h})=>{h.length&&(this.refreshQueue=this.refreshQueue.then(()=>{const d=o;return a=null,this.refresh(h).then(()=>d())})),l&&this.proxy.$setMessage(this.viewId,y.fromStrict(this._message)??"")}))}static LABEL_HANDLE_PREFIX="0";static ID_HANDLE_PREFIX="1";dataProvider;dndController;roots=void 0;elements=new Map;nodes=new Map;_visible=!1;get visible(){return this._visible}_selectedHandles=[];get selectedElements(){return this._selectedHandles.map(e=>this.getExtensionElement(e)).filter(e=>!p(e))}_focusedHandle=void 0;get focusedElement(){return this._focusedHandle?this.getExtensionElement(this._focusedHandle):void 0}_onDidExpandElement=this._register(new v);onDidExpandElement=this._onDidExpandElement.event;_onDidCollapseElement=this._register(new v);onDidCollapseElement=this._onDidCollapseElement.event;_onDidChangeSelection=this._register(new v);onDidChangeSelection=this._onDidChangeSelection.event;_onDidChangeActiveItem=this._register(new v);onDidChangeActiveItem=this._onDidChangeActiveItem.event;_onDidChangeVisibility=this._register(new v);onDidChangeVisibility=this._onDidChangeVisibility.event;_onDidChangeCheckboxState=this._register(new v);onDidChangeCheckboxState=this._onDidChangeCheckboxState.event;_onDidChangeData=this._register(new v);refreshPromise=Promise.resolve();refreshQueue=Promise.resolve();async getChildren(e){const t=e?this.getExtensionElement(e):void 0;if(e&&!t)return this.logService.error(`No tree item with id '${e}' found.`),Promise.resolve([]);let i=this.getChildrenNodes(e);return i||(i=await this.fetchChildrenNodes(t)),i?i.map(r=>r.item):void 0}getExtensionElement(e){return this.elements.get(e)}reveal(e,t){t=t||{select:!0,focus:!1};const i=p(t.select)?!0:t.select,r=p(t.focus)?!1:t.focus,n=p(t.expand)?!1:t.expand;return typeof this.dataProvider.getParent!="function"?Promise.reject(new Error("Required registered TreeDataProvider to implement 'getParent' method to access 'reveal' method")):e?this.refreshPromise.then(()=>this.resolveUnknownParentChain(e)).then(s=>this.resolveTreeNode(e,s[s.length-1]).then(a=>this.proxy.$reveal(this.viewId,{item:a.item,parentChain:s.map(o=>o.item)},{select:i,focus:r,expand:n})),s=>this.logService.error(s)):this.proxy.$reveal(this.viewId,void 0,{select:i,focus:r,expand:n})}_message="";get message(){return this._message}set message(e){this._message=e,this._onDidChangeData.fire({message:!0,element:!1})}_title="";get title(){return this._title}set title(e){this._title=e,this.proxy.$setTitle(this.viewId,e,this._description)}_description;get description(){return this._description}set description(e){this._description=e,this.proxy.$setTitle(this.viewId,this._title,e)}_badge;get badge(){return this._badge}set badge(e){this._badge?.value===e?.value&&this._badge?.tooltip===e?.tooltip||(this._badge=R.from(e),this.proxy.$setBadge(this.viewId,e))}setExpanded(e,t){const i=this.getExtensionElement(e);i&&(t?this._onDidExpandElement.fire(Object.freeze({element:i})):this._onDidCollapseElement.fire(Object.freeze({element:i})))}setSelectionAndFocus(e,t){const i=!H(this._selectedHandles,e);this._selectedHandles=e;const r=this._focusedHandle!==t;this._focusedHandle=t,i&&this._onDidChangeSelection.fire(Object.freeze({selection:this.selectedElements})),r&&this._onDidChangeActiveItem.fire(Object.freeze({activeItem:this.focusedElement}))}setVisible(e){e!==this._visible&&(this._visible=e,this._onDidChangeVisibility.fire(Object.freeze({visible:this._visible})))}async setCheckboxState(e){const t=(await Promise.all(e.map(async i=>{const r=this.getExtensionElement(i.treeItemHandle);return r?{extensionItem:r,treeItem:await this.dataProvider.getTreeItem(r),newState:i.newState?m.TreeItemCheckboxState.Checked:m.TreeItemCheckboxState.Unchecked}:Promise.resolve(void 0)}))).filter(i=>i!==void 0);t.forEach(i=>{i.treeItem.checkboxState=i.newState?m.TreeItemCheckboxState.Checked:m.TreeItemCheckboxState.Unchecked}),this._onDidChangeCheckboxState.fire({items:t.map(i=>[i.extensionItem,i.newState])})}async handleDrag(e,t,i){const r=[];for(const n of e){const s=this.getExtensionElement(n);s&&r.push(s)}if(!(!this.dndController?.handleDrag||r.length===0))return await this.dndController.handleDrag(r,t,i),t}get hasHandleDrag(){return!!this.dndController?.handleDrag}async onDrop(e,t,i){const r=t?this.getExtensionElement(t):void 0;if(!(!r&&t||!this.dndController?.handleDrop))return T(()=>this.dndController?.handleDrop?this.dndController.handleDrop(r,e,i):void 0)}get hasResolve(){return!!this.dataProvider.resolveTreeItem}async resolveTreeItem(e,t){if(!this.dataProvider.resolveTreeItem)return;const i=this.elements.get(e);if(i){const r=this.nodes.get(i);if(r){const n=await this.dataProvider.resolveTreeItem(r.extensionItem,i,t)??r.extensionItem;return this.validateTreeItem(n),r.item.tooltip=this.getTooltip(n.tooltip),r.item.command=this.getCommand(r.disposableStore,n.command),r.item}}}resolveUnknownParentChain(e){return this.resolveParent(e).then(t=>t?this.resolveUnknownParentChain(t).then(i=>this.resolveTreeNode(t,i[i.length-1]).then(r=>(i.push(r),i))):Promise.resolve([]))}resolveParent(e){const t=this.nodes.get(e);return t?Promise.resolve(t.parent?this.elements.get(t.parent.item.handle):void 0):T(()=>this.dataProvider.getParent(e))}resolveTreeNode(e,t){const i=this.nodes.get(e);return i?Promise.resolve(i):T(()=>this.dataProvider.getTreeItem(e)).then(r=>this.createHandle(e,r,t,!0)).then(r=>this.getChildren(t?t.item.handle:void 0).then(()=>{const n=this.getExtensionElement(r);if(n){const s=this.nodes.get(n);if(s)return Promise.resolve(s)}throw new Error(`Cannot resolve tree item for element ${r} from extension ${this.extension.identifier.value}`)}))}getChildrenNodes(e){if(e){let t;if(typeof e=="string"){const i=this.getExtensionElement(e);t=i?this.nodes.get(i):void 0}else t=e;return t&&t.children||void 0}return this.roots}async fetchChildrenNodes(e){this.clearChildren(e);const t=new D(this._refreshCancellationSource.token);try{const i=e?this.nodes.get(e):void 0,r=await this.dataProvider.getChildren(e);if(t.token.isCancellationRequested)return;const n=I(r||[]),s=await Promise.all(I(n).map(o=>this.dataProvider.getTreeItem(o)));if(t.token.isCancellationRequested)return;const a=s.map((o,c)=>o?this.createAndRegisterTreeNode(n[c],o,i):null);return I(a)}finally{t.dispose()}}_refreshCancellationSource=new D;refresh(e){if(e.some(i=>!i))return this._refreshCancellationSource.dispose(!0),this._refreshCancellationSource=new D,this.clearAll(),this.proxy.$refresh(this.viewId);{const i=this.getHandlesToRefresh(e);if(i.length)return this.refreshHandles(i)}return Promise.resolve(void 0)}getHandlesToRefresh(e){const t=new Set,i=e.map(n=>this.nodes.get(n));for(const n of i)if(n&&!t.has(n.item.handle)){let s=n;for(;s&&s.parent&&i.findIndex(a=>s&&s.parent&&a&&a.item.handle===s.parent.item.handle)===-1;){const a=this.elements.get(s.parent.item.handle);s=a?this.nodes.get(a):void 0}s&&!s.parent&&t.add(n.item.handle)}const r=[];return t.forEach(n=>{const s=this.elements.get(n);if(s){const a=this.nodes.get(s);a&&(!a.parent||!t.has(a.parent.item.handle))&&r.push(n)}}),r}refreshHandles(e){const t={};return Promise.all(e.map(i=>this.refreshNode(i).then(r=>{r&&(t[i]=r.item)}))).then(()=>Object.keys(t).length?this.proxy.$refresh(this.viewId,t):void 0)}refreshNode(e){const t=this.getExtensionElement(e);if(t){const i=this.nodes.get(t);if(i)return this.clearChildren(t),T(()=>this.dataProvider.getTreeItem(t)).then(r=>{if(r){const n=this.createTreeNode(t,r,i.parent);return this.updateNodeCache(t,n,i,i.parent),i.dispose(),n}return null})}return Promise.resolve(null)}createAndRegisterTreeNode(e,t,i){const r=this.createTreeNode(e,t,i);if(t.id&&this.elements.has(r.item.handle))throw new Error(V("treeView.duplicateElement","Element with id {0} is already registered",t.id));return this.addNodeToCache(e,r),this.addNodeToParentCache(r,i),r}getTooltip(e){return m.MarkdownString.isMarkdownString(e)?y.from(e):e}getCommand(e,t){return t?{...this.commands.toInternal(t,e),originalId:t.command}:void 0}getCheckbox(e){if(e.checkboxState===void 0)return;let t,i,r;return typeof e.checkboxState=="number"?t=e.checkboxState:(t=e.checkboxState.state,i=e.checkboxState.tooltip,r=e.checkboxState.accessibilityInformation),{isChecked:t===m.TreeItemCheckboxState.Checked,tooltip:i,accessibilityInformation:r}}validateTreeItem(e){if(!m.TreeItem.isTreeItem(e,this.extension))throw new Error(`Extension ${this.extension.identifier.value} has provided an invalid tree item.`)}createTreeNode(e,t,i){this.validateTreeItem(t);const r=this._register(new A),n=this.createHandle(e,t,i),s=this.getLightIconPath(t);return{item:{handle:n,parentHandle:i?i.item.handle:void 0,label:x(t.label,this.extension),description:t.description,resourceUri:t.resourceUri,tooltip:this.getTooltip(t.tooltip),command:this.getCommand(r,t.command),contextValue:t.contextValue,icon:s,iconDark:this.getDarkIconPath(t)||s,themeIcon:this.getThemeIcon(t),collapsibleState:p(t.collapsibleState)?m.TreeItemCollapsibleState.None:t.collapsibleState,accessibilityInformation:t.accessibilityInformation,checkbox:this.getCheckbox(t)},extensionItem:t,parent:i,children:void 0,disposableStore:r,dispose(){r.dispose()}}}getThemeIcon(e){return e.iconPath instanceof m.ThemeIcon?e.iconPath:void 0}createHandle(e,{id:t,label:i,resourceUri:r},n,s){if(t)return`${w.ID_HANDLE_PREFIX}/${t}`;const a=x(i,this.extension),o=n?n.item.handle:w.LABEL_HANDLE_PREFIX;let c=a?a.label:r?k(r):"";c=c.indexOf("/")!==-1?c.replace("/","//"):c;const l=this.nodes.has(e)?this.nodes.get(e).item.handle:void 0,h=this.getChildrenNodes(n)||[];let d,u=0;do{if(d=`${o}/${u}:${c}`,s||!this.elements.has(d)||l===d)break;u++}while(u<=h.length);return d}getLightIconPath(e){if(e.iconPath&&!(e.iconPath instanceof m.ThemeIcon))return typeof e.iconPath=="string"||C.isUri(e.iconPath)?this.getIconPath(e.iconPath):this.getIconPath(e.iconPath.light)}getDarkIconPath(e){if(e.iconPath&&!(e.iconPath instanceof m.ThemeIcon)&&e.iconPath.dark)return this.getIconPath(e.iconPath.dark)}getIconPath(e){return C.isUri(e)?e:C.file(e)}addNodeToCache(e,t){this.elements.set(t.item.handle,e),this.nodes.set(e,t)}updateNodeCache(e,t,i,r){this.elements.delete(t.item.handle),this.nodes.delete(e),t.item.handle!==i.item.handle&&this.elements.delete(i.item.handle),this.addNodeToCache(e,t);const n=this.getChildrenNodes(r)||[],s=n.filter(a=>a.item.handle===i.item.handle)[0];s&&n.splice(n.indexOf(s),1,t)}addNodeToParentCache(e,t){t?(t.children||(t.children=[]),t.children.push(e)):(this.roots||(this.roots=[]),this.roots.push(e))}clearChildren(e){if(e){const t=this.nodes.get(e);if(t){if(t.children)for(const i of t.children){const r=this.elements.get(i.item.handle);r&&this.clear(r)}t.children=void 0}}else this.clearAll()}clear(e){const t=this.nodes.get(e);if(t){if(t.children)for(const i of t.children){const r=this.elements.get(i.item.handle);r&&this.clear(r)}this.nodes.delete(e),this.elements.delete(t.item.handle),t.dispose()}}clearAll(){this.roots=void 0,this.elements.clear(),this.nodes.forEach(e=>e.dispose()),this.nodes.clear()}dispose(){super.dispose(),this._refreshCancellationSource.dispose(),this.clearAll(),this.proxy.$disposeTree(this.viewId)}}export{Ee as ExtHostTreeViews};
