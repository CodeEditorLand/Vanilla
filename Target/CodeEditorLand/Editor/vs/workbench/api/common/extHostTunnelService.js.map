{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/api/common/extHostTunnelService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport type * as vscode from \"vscode\";\nimport { CancellationToken } from \"../../../base/common/cancellation.js\";\nimport { Emitter } from \"../../../base/common/event.js\";\nimport {\n\tDisposable,\n\ttype IDisposable,\n\ttoDisposable,\n} from \"../../../base/common/lifecycle.js\";\nimport * as nls from \"../../../nls.js\";\nimport type { IExtensionDescription } from \"../../../platform/extensions/common/extensions.js\";\nimport { createDecorator } from \"../../../platform/instantiation/common/instantiation.js\";\nimport { ILogService } from \"../../../platform/log/common/log.js\";\nimport {\n\tDisposableTunnel,\n\ttype ProvidedOnAutoForward,\n\ttype ProvidedPortAttributes,\n\ttype RemoteTunnel,\n\ttype TunnelCreationOptions,\n\ttype TunnelOptions,\n\tTunnelPrivacyId,\n} from \"../../../platform/tunnel/common/tunnel.js\";\nimport type { CandidatePort } from \"../../services/remote/common/tunnelModel.js\";\nimport {\n\ttype ExtHostTunnelServiceShape,\n\tMainContext,\n\ttype MainThreadTunnelServiceShape,\n\ttype PortAttributesSelector,\n\ttype TunnelDto,\n} from \"./extHost.protocol.js\";\nimport { IExtHostInitDataService } from \"./extHostInitDataService.js\";\nimport { IExtHostRpcService } from \"./extHostRpcService.js\";\nimport * as types from \"./extHostTypes.js\";\n\nclass ExtensionTunnel extends DisposableTunnel implements vscode.Tunnel {}\n\nexport namespace TunnelDtoConverter {\n\texport function fromApiTunnel(tunnel: vscode.Tunnel): TunnelDto {\n\t\treturn {\n\t\t\tremoteAddress: tunnel.remoteAddress,\n\t\t\tlocalAddress: tunnel.localAddress,\n\t\t\tpublic: !!tunnel.public,\n\t\t\tprivacy:\n\t\t\t\ttunnel.privacy ??\n\t\t\t\t(tunnel.public\n\t\t\t\t\t? TunnelPrivacyId.Public\n\t\t\t\t\t: TunnelPrivacyId.Private),\n\t\t\tprotocol: tunnel.protocol,\n\t\t};\n\t}\n\texport function fromServiceTunnel(tunnel: RemoteTunnel): TunnelDto {\n\t\treturn {\n\t\t\tremoteAddress: {\n\t\t\t\thost: tunnel.tunnelRemoteHost,\n\t\t\t\tport: tunnel.tunnelRemotePort,\n\t\t\t},\n\t\t\tlocalAddress: tunnel.localAddress,\n\t\t\tpublic:\n\t\t\t\ttunnel.privacy !== TunnelPrivacyId.ConstantPrivate &&\n\t\t\t\ttunnel.privacy !== TunnelPrivacyId.ConstantPrivate,\n\t\t\tprivacy: tunnel.privacy,\n\t\t\tprotocol: tunnel.protocol,\n\t\t};\n\t}\n}\n\nexport interface Tunnel extends vscode.Disposable {\n\tremote: { port: number; host: string };\n\tlocalAddress: string;\n}\n\nexport interface IExtHostTunnelService extends ExtHostTunnelServiceShape {\n\treadonly _serviceBrand: undefined;\n\topenTunnel(\n\t\textension: IExtensionDescription,\n\t\tforward: TunnelOptions,\n\t): Promise<vscode.Tunnel | undefined>;\n\tgetTunnels(): Promise<vscode.TunnelDescription[]>;\n\tonDidChangeTunnels: vscode.Event<void>;\n\tsetTunnelFactory(\n\t\tprovider: vscode.RemoteAuthorityResolver | undefined,\n\t\tmanagedRemoteAuthority: vscode.ManagedResolvedAuthority | undefined,\n\t): Promise<IDisposable>;\n\tregisterPortsAttributesProvider(\n\t\tportSelector: PortAttributesSelector,\n\t\tprovider: vscode.PortAttributesProvider,\n\t): IDisposable;\n\tregisterTunnelProvider(\n\t\tprovider: vscode.TunnelProvider,\n\t\tinformation: vscode.TunnelInformation,\n\t): Promise<IDisposable>;\n}\n\nexport const IExtHostTunnelService = createDecorator<IExtHostTunnelService>(\n\t\"IExtHostTunnelService\",\n);\n\nexport class ExtHostTunnelService\n\textends Disposable\n\timplements IExtHostTunnelService\n{\n\treadonly _serviceBrand: undefined;\n\tprotected readonly _proxy: MainThreadTunnelServiceShape;\n\tprivate _forwardPortProvider:\n\t\t| ((\n\t\t\t\ttunnelOptions: TunnelOptions,\n\t\t\t\ttunnelCreationOptions: TunnelCreationOptions,\n\t\t\t\ttoken?: vscode.CancellationToken,\n\t\t  ) => Thenable<vscode.Tunnel | undefined> | undefined)\n\t\t| undefined;\n\tprivate _showCandidatePort: (\n\t\thost: string,\n\t\tport: number,\n\t\tdetail: string,\n\t) => Thenable<boolean> = () => {\n\t\treturn Promise.resolve(true);\n\t};\n\tprivate _extensionTunnels: Map<\n\t\tstring,\n\t\tMap<number, { tunnel: vscode.Tunnel; disposeListener: IDisposable }>\n\t> = new Map();\n\tprivate _onDidChangeTunnels: Emitter<void> = new Emitter<void>();\n\tonDidChangeTunnels: vscode.Event<void> = this._onDidChangeTunnels.event;\n\n\tprivate _providerHandleCounter = 0;\n\tprivate _portAttributesProviders: Map<\n\t\tnumber,\n\t\t{\n\t\t\tprovider: vscode.PortAttributesProvider;\n\t\t\tselector: PortAttributesSelector;\n\t\t}\n\t> = new Map();\n\n\tconstructor(\n\t\t@IExtHostRpcService extHostRpc: IExtHostRpcService,\n\t\t@IExtHostInitDataService initData: IExtHostInitDataService,\n\t\t@ILogService protected readonly logService: ILogService\n\t) {\n\t\tsuper();\n\t\tthis._proxy = extHostRpc.getProxy(MainContext.MainThreadTunnelService);\n\t}\n\n\tasync openTunnel(\n\t\textension: IExtensionDescription,\n\t\tforward: TunnelOptions,\n\t): Promise<vscode.Tunnel | undefined> {\n\t\tthis.logService.trace(\n\t\t\t`ForwardedPorts: (ExtHostTunnelService) ${extension.identifier.value} called openTunnel API for ${forward.remoteAddress.host}:${forward.remoteAddress.port}.`,\n\t\t);\n\t\tconst tunnel = await this._proxy.$openTunnel(\n\t\t\tforward,\n\t\t\textension.displayName,\n\t\t);\n\t\tif (tunnel) {\n\t\t\tconst disposableTunnel: vscode.Tunnel = new ExtensionTunnel(\n\t\t\t\ttunnel.remoteAddress,\n\t\t\t\ttunnel.localAddress,\n\t\t\t\t() => {\n\t\t\t\t\treturn this._proxy.$closeTunnel(tunnel.remoteAddress);\n\t\t\t\t},\n\t\t\t);\n\t\t\tthis._register(disposableTunnel);\n\t\t\treturn disposableTunnel;\n\t\t}\n\t\treturn undefined;\n\t}\n\n\tasync getTunnels(): Promise<vscode.TunnelDescription[]> {\n\t\treturn this._proxy.$getTunnels();\n\t}\n\tprivate nextPortAttributesProviderHandle(): number {\n\t\treturn this._providerHandleCounter++;\n\t}\n\n\tregisterPortsAttributesProvider(\n\t\tportSelector: PortAttributesSelector,\n\t\tprovider: vscode.PortAttributesProvider,\n\t): vscode.Disposable {\n\t\tif (\n\t\t\tportSelector.portRange === undefined &&\n\t\t\tportSelector.commandPattern === undefined\n\t\t) {\n\t\t\tthis.logService.error(\n\t\t\t\t\"PortAttributesProvider must specify either a portRange or a commandPattern\",\n\t\t\t);\n\t\t}\n\t\tconst providerHandle = this.nextPortAttributesProviderHandle();\n\t\tthis._portAttributesProviders.set(providerHandle, {\n\t\t\tselector: portSelector,\n\t\t\tprovider,\n\t\t});\n\n\t\tthis._proxy.$registerPortsAttributesProvider(\n\t\t\tportSelector,\n\t\t\tproviderHandle,\n\t\t);\n\t\treturn new types.Disposable(() => {\n\t\t\tthis._portAttributesProviders.delete(providerHandle);\n\t\t\tthis._proxy.$unregisterPortsAttributesProvider(providerHandle);\n\t\t});\n\t}\n\n\tasync $providePortAttributes(\n\t\thandles: number[],\n\t\tports: number[],\n\t\tpid: number | undefined,\n\t\tcommandLine: string | undefined,\n\t\tcancellationToken: vscode.CancellationToken,\n\t): Promise<ProvidedPortAttributes[]> {\n\t\tconst providedAttributes: {\n\t\t\tprovidedAttributes: vscode.PortAttributes | null | undefined;\n\t\t\tport: number;\n\t\t}[] = [];\n\t\tfor (const handle of handles) {\n\t\t\tconst provider = this._portAttributesProviders.get(handle);\n\t\t\tif (!provider) {\n\t\t\t\treturn [];\n\t\t\t}\n\t\t\tprovidedAttributes.push(\n\t\t\t\t...(await Promise.all(\n\t\t\t\t\tports.map(async (port) => {\n\t\t\t\t\t\tlet providedAttributes:\n\t\t\t\t\t\t\t| vscode.PortAttributes\n\t\t\t\t\t\t\t| null\n\t\t\t\t\t\t\t| undefined;\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tprovidedAttributes =\n\t\t\t\t\t\t\t\tawait provider.provider.providePortAttributes(\n\t\t\t\t\t\t\t\t\t{ port, pid, commandLine },\n\t\t\t\t\t\t\t\t\tcancellationToken,\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\t\t// Call with old signature for breaking API change\n\t\t\t\t\t\t\tprovidedAttributes = await (\n\t\t\t\t\t\t\t\tprovider.provider\n\t\t\t\t\t\t\t\t\t.providePortAttributes as any as (\n\t\t\t\t\t\t\t\t\tport: number,\n\t\t\t\t\t\t\t\t\tpid: number | undefined,\n\t\t\t\t\t\t\t\t\tcommandLine: string | undefined,\n\t\t\t\t\t\t\t\t\ttoken: vscode.CancellationToken,\n\t\t\t\t\t\t\t\t) => vscode.ProviderResult<vscode.PortAttributes>\n\t\t\t\t\t\t\t)(port, pid, commandLine, cancellationToken);\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn { providedAttributes, port };\n\t\t\t\t\t}),\n\t\t\t\t)),\n\t\t\t);\n\t\t}\n\n\t\tconst allAttributes = <\n\t\t\t{ providedAttributes: vscode.PortAttributes; port: number }[]\n\t\t>providedAttributes.filter(\n\t\t\t(attribute) => !!attribute.providedAttributes,\n\t\t);\n\n\t\treturn allAttributes.length > 0\n\t\t\t? allAttributes.map((attributes) => {\n\t\t\t\t\treturn {\n\t\t\t\t\t\tautoForwardAction: <ProvidedOnAutoForward>(\n\t\t\t\t\t\t\t(<unknown>(\n\t\t\t\t\t\t\t\tattributes.providedAttributes.autoForwardAction\n\t\t\t\t\t\t\t))\n\t\t\t\t\t\t),\n\t\t\t\t\t\tport: attributes.port,\n\t\t\t\t\t};\n\t\t\t\t})\n\t\t\t: [];\n\t}\n\n\tasync $registerCandidateFinder(_enable: boolean): Promise<void> {}\n\n\tregisterTunnelProvider(\n\t\tprovider: vscode.TunnelProvider,\n\t\tinformation: vscode.TunnelInformation,\n\t): Promise<IDisposable> {\n\t\tif (this._forwardPortProvider) {\n\t\t\tthrow new Error(\n\t\t\t\t\"A tunnel provider has already been registered. Only the first tunnel provider to be registered will be used.\",\n\t\t\t);\n\t\t}\n\t\tthis._forwardPortProvider = async (\n\t\t\ttunnelOptions: TunnelOptions,\n\t\t\ttunnelCreationOptions: TunnelCreationOptions,\n\t\t) => {\n\t\t\tconst result = await provider.provideTunnel(\n\t\t\t\ttunnelOptions,\n\t\t\t\ttunnelCreationOptions,\n\t\t\t\tCancellationToken.None,\n\t\t\t);\n\t\t\treturn result ?? undefined;\n\t\t};\n\n\t\tconst tunnelFeatures = information.tunnelFeatures\n\t\t\t? {\n\t\t\t\t\televation: !!information.tunnelFeatures?.elevation,\n\t\t\t\t\tprivacyOptions: information.tunnelFeatures?.privacyOptions,\n\t\t\t\t\tprotocol:\n\t\t\t\t\t\tinformation.tunnelFeatures.protocol === undefined\n\t\t\t\t\t\t\t? true\n\t\t\t\t\t\t\t: information.tunnelFeatures.protocol,\n\t\t\t\t}\n\t\t\t: undefined;\n\n\t\tthis._proxy.$setTunnelProvider(tunnelFeatures, true);\n\t\treturn Promise.resolve(\n\t\t\ttoDisposable(() => {\n\t\t\t\tthis._forwardPortProvider = undefined;\n\t\t\t\tthis._proxy.$setTunnelProvider(undefined, false);\n\t\t\t}),\n\t\t);\n\t}\n\n\t/**\n\t * Applies the tunnel metadata and factory found in the remote authority\n\t * resolver to the tunnel system.\n\t *\n\t * `managedRemoteAuthority` should be be passed if the resolver returned on.\n\t * If this is the case, the tunnel cannot be connected to via a websocket from\n\t * the share process, so a synethic tunnel factory is used as a default.\n\t */\n\tasync setTunnelFactory(\n\t\tprovider: vscode.RemoteAuthorityResolver | undefined,\n\t\tmanagedRemoteAuthority: vscode.ManagedResolvedAuthority | undefined,\n\t): Promise<IDisposable> {\n\t\t// Do not wait for any of the proxy promises here.\n\t\t// It will delay startup and there is nothing that needs to be waited for.\n\t\tif (provider) {\n\t\t\tif (provider.candidatePortSource !== undefined) {\n\t\t\t\tthis._proxy.$setCandidatePortSource(\n\t\t\t\t\tprovider.candidatePortSource,\n\t\t\t\t);\n\t\t\t}\n\t\t\tif (provider.showCandidatePort) {\n\t\t\t\tthis._showCandidatePort = provider.showCandidatePort;\n\t\t\t\tthis._proxy.$setCandidateFilter();\n\t\t\t}\n\t\t\tconst tunnelFactory =\n\t\t\t\tprovider.tunnelFactory ??\n\t\t\t\t(managedRemoteAuthority\n\t\t\t\t\t? this.makeManagedTunnelFactory(managedRemoteAuthority)\n\t\t\t\t\t: undefined);\n\t\t\tif (tunnelFactory) {\n\t\t\t\tthis._forwardPortProvider = tunnelFactory;\n\t\t\t\tlet privacyOptions =\n\t\t\t\t\tprovider.tunnelFeatures?.privacyOptions ?? [];\n\t\t\t\tif (\n\t\t\t\t\tprovider.tunnelFeatures?.public &&\n\t\t\t\t\tprivacyOptions.length === 0\n\t\t\t\t) {\n\t\t\t\t\tprivacyOptions = [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tid: \"private\",\n\t\t\t\t\t\t\tlabel: nls.localize(\n\t\t\t\t\t\t\t\t\"tunnelPrivacy.private\",\n\t\t\t\t\t\t\t\t\"Private\",\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\tthemeIcon: \"lock\",\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tid: \"public\",\n\t\t\t\t\t\t\tlabel: nls.localize(\n\t\t\t\t\t\t\t\t\"tunnelPrivacy.public\",\n\t\t\t\t\t\t\t\t\"Public\",\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\tthemeIcon: \"eye\",\n\t\t\t\t\t\t},\n\t\t\t\t\t];\n\t\t\t\t}\n\n\t\t\t\tconst tunnelFeatures = provider.tunnelFeatures\n\t\t\t\t\t? {\n\t\t\t\t\t\t\televation: !!provider.tunnelFeatures?.elevation,\n\t\t\t\t\t\t\tpublic: !!provider.tunnelFeatures?.public,\n\t\t\t\t\t\t\tprivacyOptions,\n\t\t\t\t\t\t\tprotocol: true,\n\t\t\t\t\t\t}\n\t\t\t\t\t: undefined;\n\n\t\t\t\tthis._proxy.$setTunnelProvider(\n\t\t\t\t\ttunnelFeatures,\n\t\t\t\t\t!!provider.tunnelFactory,\n\t\t\t\t);\n\t\t\t}\n\t\t} else {\n\t\t\tthis._forwardPortProvider = undefined;\n\t\t}\n\t\treturn toDisposable(() => {\n\t\t\tthis._forwardPortProvider = undefined;\n\t\t});\n\t}\n\n\tprotected makeManagedTunnelFactory(\n\t\t_authority: vscode.ManagedResolvedAuthority,\n\t): vscode.RemoteAuthorityResolver[\"tunnelFactory\"] {\n\t\treturn undefined; // may be overridden\n\t}\n\n\tasync $closeTunnel(\n\t\tremote: { host: string; port: number },\n\t\tsilent?: boolean,\n\t): Promise<void> {\n\t\tif (this._extensionTunnels.has(remote.host)) {\n\t\t\tconst hostMap = this._extensionTunnels.get(remote.host)!;\n\t\t\tif (hostMap.has(remote.port)) {\n\t\t\t\tif (silent) {\n\t\t\t\t\thostMap.get(remote.port)!.disposeListener.dispose();\n\t\t\t\t}\n\t\t\t\tawait hostMap.get(remote.port)!.tunnel.dispose();\n\t\t\t\thostMap.delete(remote.port);\n\t\t\t}\n\t\t}\n\t}\n\n\tasync $onDidTunnelsChange(): Promise<void> {\n\t\tthis._onDidChangeTunnels.fire();\n\t}\n\n\tasync $forwardPort(\n\t\ttunnelOptions: TunnelOptions,\n\t\ttunnelCreationOptions: TunnelCreationOptions,\n\t): Promise<TunnelDto | string | undefined> {\n\t\tif (this._forwardPortProvider) {\n\t\t\ttry {\n\t\t\t\tthis.logService.trace(\n\t\t\t\t\t\"ForwardedPorts: (ExtHostTunnelService) Getting tunnel from provider.\",\n\t\t\t\t);\n\t\t\t\tconst providedPort = this._forwardPortProvider(\n\t\t\t\t\ttunnelOptions,\n\t\t\t\t\ttunnelCreationOptions,\n\t\t\t\t);\n\t\t\t\tthis.logService.trace(\n\t\t\t\t\t\"ForwardedPorts: (ExtHostTunnelService) Got tunnel promise from provider.\",\n\t\t\t\t);\n\t\t\t\tif (providedPort !== undefined) {\n\t\t\t\t\tconst tunnel = await providedPort;\n\t\t\t\t\tthis.logService.trace(\n\t\t\t\t\t\t\"ForwardedPorts: (ExtHostTunnelService) Successfully awaited tunnel from provider.\",\n\t\t\t\t\t);\n\t\t\t\t\tif (tunnel === undefined) {\n\t\t\t\t\t\tthis.logService.error(\n\t\t\t\t\t\t\t\"ForwardedPorts: (ExtHostTunnelService) Resolved tunnel is undefined\",\n\t\t\t\t\t\t);\n\t\t\t\t\t\treturn undefined;\n\t\t\t\t\t}\n\t\t\t\t\tif (\n\t\t\t\t\t\t!this._extensionTunnels.has(\n\t\t\t\t\t\t\ttunnelOptions.remoteAddress.host,\n\t\t\t\t\t\t)\n\t\t\t\t\t) {\n\t\t\t\t\t\tthis._extensionTunnels.set(\n\t\t\t\t\t\t\ttunnelOptions.remoteAddress.host,\n\t\t\t\t\t\t\tnew Map(),\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t\tconst disposeListener = this._register(\n\t\t\t\t\t\ttunnel.onDidDispose(() => {\n\t\t\t\t\t\t\tthis.logService.trace(\n\t\t\t\t\t\t\t\t\"ForwardedPorts: (ExtHostTunnelService) Extension fired tunnel's onDidDispose.\",\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\treturn this._proxy.$closeTunnel(\n\t\t\t\t\t\t\t\ttunnel.remoteAddress,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}),\n\t\t\t\t\t);\n\t\t\t\t\tthis._extensionTunnels\n\t\t\t\t\t\t.get(tunnelOptions.remoteAddress.host)!\n\t\t\t\t\t\t.set(tunnelOptions.remoteAddress.port, {\n\t\t\t\t\t\t\ttunnel,\n\t\t\t\t\t\t\tdisposeListener,\n\t\t\t\t\t\t});\n\t\t\t\t\treturn TunnelDtoConverter.fromApiTunnel(tunnel);\n\t\t\t\t} else {\n\t\t\t\t\tthis.logService.trace(\n\t\t\t\t\t\t\"ForwardedPorts: (ExtHostTunnelService) Tunnel is undefined\",\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\tthis.logService.trace(\n\t\t\t\t\t\"ForwardedPorts: (ExtHostTunnelService) tunnel provider error\",\n\t\t\t\t);\n\t\t\t\tif (e instanceof Error) {\n\t\t\t\t\treturn e.message;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn undefined;\n\t}\n\n\tasync $applyCandidateFilter(\n\t\tcandidates: CandidatePort[],\n\t): Promise<CandidatePort[]> {\n\t\tconst filter = await Promise.all(\n\t\t\tcandidates.map((candidate) =>\n\t\t\t\tthis._showCandidatePort(\n\t\t\t\t\tcandidate.host,\n\t\t\t\t\tcandidate.port,\n\t\t\t\t\tcandidate.detail ?? \"\",\n\t\t\t\t),\n\t\t\t),\n\t\t);\n\t\tconst result = candidates.filter((candidate, index) => filter[index]);\n\t\tthis.logService.trace(\n\t\t\t`ForwardedPorts: (ExtHostTunnelService) filtered from ${candidates.map((port) => port.port).join(\", \")} to ${result.map((port) => port.port).join(\", \")}`,\n\t\t);\n\t\treturn result;\n\t}\n}\n"],
  "mappings": "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",
  "names": ["TunnelDtoConverter", "providedAttributes"]
}
