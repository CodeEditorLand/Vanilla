{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/api/common/extHostTunnelService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CancellationToken } from '../../../base/common/cancellation.js';\nimport { Emitter } from '../../../base/common/event.js';\nimport { Disposable, IDisposable, toDisposable } from '../../../base/common/lifecycle.js';\nimport * as nls from '../../../nls.js';\nimport { IExtensionDescription } from '../../../platform/extensions/common/extensions.js';\nimport { createDecorator } from '../../../platform/instantiation/common/instantiation.js';\nimport { ILogService } from '../../../platform/log/common/log.js';\nimport { DisposableTunnel, ProvidedOnAutoForward, ProvidedPortAttributes, RemoteTunnel, TunnelCreationOptions, TunnelOptions, TunnelPrivacyId } from '../../../platform/tunnel/common/tunnel.js';\nimport { ExtHostTunnelServiceShape, MainContext, MainThreadTunnelServiceShape, PortAttributesSelector, TunnelDto } from './extHost.protocol.js';\nimport { IExtHostInitDataService } from './extHostInitDataService.js';\nimport { IExtHostRpcService } from './extHostRpcService.js';\nimport * as types from './extHostTypes.js';\nimport { CandidatePort } from '../../services/remote/common/tunnelModel.js';\nimport * as vscode from 'vscode';\n\nclass ExtensionTunnel extends DisposableTunnel implements vscode.Tunnel { }\n\nexport namespace TunnelDtoConverter {\n\texport function fromApiTunnel(tunnel: vscode.Tunnel): TunnelDto {\n\t\treturn {\n\t\t\tremoteAddress: tunnel.remoteAddress,\n\t\t\tlocalAddress: tunnel.localAddress,\n\t\t\tpublic: !!tunnel.public,\n\t\t\tprivacy: tunnel.privacy ?? (tunnel.public ? TunnelPrivacyId.Public : TunnelPrivacyId.Private),\n\t\t\tprotocol: tunnel.protocol\n\t\t};\n\t}\n\texport function fromServiceTunnel(tunnel: RemoteTunnel): TunnelDto {\n\t\treturn {\n\t\t\tremoteAddress: {\n\t\t\t\thost: tunnel.tunnelRemoteHost,\n\t\t\t\tport: tunnel.tunnelRemotePort\n\t\t\t},\n\t\t\tlocalAddress: tunnel.localAddress,\n\t\t\tpublic: tunnel.privacy !== TunnelPrivacyId.ConstantPrivate && tunnel.privacy !== TunnelPrivacyId.ConstantPrivate,\n\t\t\tprivacy: tunnel.privacy,\n\t\t\tprotocol: tunnel.protocol\n\t\t};\n\t}\n}\n\nexport interface Tunnel extends vscode.Disposable {\n\tremote: { port: number; host: string };\n\tlocalAddress: string;\n}\n\nexport interface IExtHostTunnelService extends ExtHostTunnelServiceShape {\n\treadonly _serviceBrand: undefined;\n\topenTunnel(extension: IExtensionDescription, forward: TunnelOptions): Promise<vscode.Tunnel | undefined>;\n\tgetTunnels(): Promise<vscode.TunnelDescription[]>;\n\tonDidChangeTunnels: vscode.Event<void>;\n\tsetTunnelFactory(provider: vscode.RemoteAuthorityResolver | undefined, managedRemoteAuthority: vscode.ManagedResolvedAuthority | undefined): Promise<IDisposable>;\n\tregisterPortsAttributesProvider(portSelector: PortAttributesSelector, provider: vscode.PortAttributesProvider): IDisposable;\n\tregisterTunnelProvider(provider: vscode.TunnelProvider, information: vscode.TunnelInformation): Promise<IDisposable>;\n}\n\nexport const IExtHostTunnelService = createDecorator<IExtHostTunnelService>('IExtHostTunnelService');\n\nexport class ExtHostTunnelService extends Disposable implements IExtHostTunnelService {\n\treadonly _serviceBrand: undefined;\n\tprotected readonly _proxy: MainThreadTunnelServiceShape;\n\tprivate _forwardPortProvider: ((tunnelOptions: TunnelOptions, tunnelCreationOptions: TunnelCreationOptions, token?: vscode.CancellationToken) => Thenable<vscode.Tunnel | undefined> | undefined) | undefined;\n\tprivate _showCandidatePort: (host: string, port: number, detail: string) => Thenable<boolean> = () => { return Promise.resolve(true); };\n\tprivate _extensionTunnels: Map<string, Map<number, { tunnel: vscode.Tunnel; disposeListener: IDisposable }>> = new Map();\n\tprivate _onDidChangeTunnels: Emitter<void> = new Emitter<void>();\n\tonDidChangeTunnels: vscode.Event<void> = this._onDidChangeTunnels.event;\n\n\tprivate _providerHandleCounter: number = 0;\n\tprivate _portAttributesProviders: Map<number, { provider: vscode.PortAttributesProvider; selector: PortAttributesSelector }> = new Map();\n\n\tconstructor(\n\t\t@IExtHostRpcService extHostRpc: IExtHostRpcService,\n\t\t@IExtHostInitDataService initData: IExtHostInitDataService,\n\t\t@ILogService protected readonly logService: ILogService\n\t) {\n\t\tsuper();\n\t\tthis._proxy = extHostRpc.getProxy(MainContext.MainThreadTunnelService);\n\t}\n\n\tasync openTunnel(extension: IExtensionDescription, forward: TunnelOptions): Promise<vscode.Tunnel | undefined> {\n\t\tthis.logService.trace(`ForwardedPorts: (ExtHostTunnelService) ${extension.identifier.value} called openTunnel API for ${forward.remoteAddress.host}:${forward.remoteAddress.port}.`);\n\t\tconst tunnel = await this._proxy.$openTunnel(forward, extension.displayName);\n\t\tif (tunnel) {\n\t\t\tconst disposableTunnel: vscode.Tunnel = new ExtensionTunnel(tunnel.remoteAddress, tunnel.localAddress, () => {\n\t\t\t\treturn this._proxy.$closeTunnel(tunnel.remoteAddress);\n\t\t\t});\n\t\t\tthis._register(disposableTunnel);\n\t\t\treturn disposableTunnel;\n\t\t}\n\t\treturn undefined;\n\t}\n\n\tasync getTunnels(): Promise<vscode.TunnelDescription[]> {\n\t\treturn this._proxy.$getTunnels();\n\t}\n\tprivate nextPortAttributesProviderHandle(): number {\n\t\treturn this._providerHandleCounter++;\n\t}\n\n\tregisterPortsAttributesProvider(portSelector: PortAttributesSelector, provider: vscode.PortAttributesProvider): vscode.Disposable {\n\t\tif (portSelector.portRange === undefined && portSelector.commandPattern === undefined) {\n\t\t\tthis.logService.error('PortAttributesProvider must specify either a portRange or a commandPattern');\n\t\t}\n\t\tconst providerHandle = this.nextPortAttributesProviderHandle();\n\t\tthis._portAttributesProviders.set(providerHandle, { selector: portSelector, provider });\n\n\t\tthis._proxy.$registerPortsAttributesProvider(portSelector, providerHandle);\n\t\treturn new types.Disposable(() => {\n\t\t\tthis._portAttributesProviders.delete(providerHandle);\n\t\t\tthis._proxy.$unregisterPortsAttributesProvider(providerHandle);\n\t\t});\n\t}\n\n\tasync $providePortAttributes(handles: number[], ports: number[], pid: number | undefined, commandLine: string | undefined, cancellationToken: vscode.CancellationToken): Promise<ProvidedPortAttributes[]> {\n\t\tconst providedAttributes: { providedAttributes: vscode.PortAttributes | null | undefined; port: number }[] = [];\n\t\tfor (const handle of handles) {\n\t\t\tconst provider = this._portAttributesProviders.get(handle);\n\t\t\tif (!provider) {\n\t\t\t\treturn [];\n\t\t\t}\n\t\t\tprovidedAttributes.push(...(await Promise.all(ports.map(async (port) => {\n\t\t\t\tlet providedAttributes: vscode.PortAttributes | null | undefined;\n\t\t\t\ttry {\n\t\t\t\t\tprovidedAttributes = await provider.provider.providePortAttributes({ port, pid, commandLine }, cancellationToken);\n\t\t\t\t} catch (e) {\n\t\t\t\t\t// Call with old signature for breaking API change\n\t\t\t\t\tprovidedAttributes = await (provider.provider.providePortAttributes as any as (port: number, pid: number | undefined, commandLine: string | undefined, token: vscode.CancellationToken) => vscode.ProviderResult<vscode.PortAttributes>)(port, pid, commandLine, cancellationToken);\n\t\t\t\t}\n\t\t\t\treturn { providedAttributes, port };\n\t\t\t}))));\n\t\t}\n\n\t\tconst allAttributes = <{ providedAttributes: vscode.PortAttributes; port: number }[]>providedAttributes.filter(attribute => !!attribute.providedAttributes);\n\n\t\treturn (allAttributes.length > 0) ? allAttributes.map(attributes => {\n\t\t\treturn {\n\t\t\t\tautoForwardAction: <ProvidedOnAutoForward><unknown>attributes.providedAttributes.autoForwardAction,\n\t\t\t\tport: attributes.port\n\t\t\t};\n\t\t}) : [];\n\t}\n\n\tasync $registerCandidateFinder(_enable: boolean): Promise<void> { }\n\n\tregisterTunnelProvider(provider: vscode.TunnelProvider, information: vscode.TunnelInformation): Promise<IDisposable> {\n\t\tif (this._forwardPortProvider) {\n\t\t\tthrow new Error('A tunnel provider has already been registered. Only the first tunnel provider to be registered will be used.');\n\t\t}\n\t\tthis._forwardPortProvider = async (tunnelOptions: TunnelOptions, tunnelCreationOptions: TunnelCreationOptions) => {\n\t\t\tconst result = await provider.provideTunnel(tunnelOptions, tunnelCreationOptions, CancellationToken.None);\n\t\t\treturn result ?? undefined;\n\t\t};\n\n\t\tconst tunnelFeatures = information.tunnelFeatures ? {\n\t\t\televation: !!information.tunnelFeatures?.elevation,\n\t\t\tprivacyOptions: information.tunnelFeatures?.privacyOptions,\n\t\t\tprotocol: information.tunnelFeatures.protocol === undefined ? true : information.tunnelFeatures.protocol,\n\t\t} : undefined;\n\n\t\tthis._proxy.$setTunnelProvider(tunnelFeatures, true);\n\t\treturn Promise.resolve(toDisposable(() => {\n\t\t\tthis._forwardPortProvider = undefined;\n\t\t\tthis._proxy.$setTunnelProvider(undefined, false);\n\t\t}));\n\t}\n\n\t/**\n\t * Applies the tunnel metadata and factory found in the remote authority\n\t * resolver to the tunnel system.\n\t *\n\t * `managedRemoteAuthority` should be be passed if the resolver returned on.\n\t * If this is the case, the tunnel cannot be connected to via a websocket from\n\t * the share process, so a synethic tunnel factory is used as a default.\n\t */\n\tasync setTunnelFactory(provider: vscode.RemoteAuthorityResolver | undefined, managedRemoteAuthority: vscode.ManagedResolvedAuthority | undefined): Promise<IDisposable> {\n\t\t// Do not wait for any of the proxy promises here.\n\t\t// It will delay startup and there is nothing that needs to be waited for.\n\t\tif (provider) {\n\t\t\tif (provider.candidatePortSource !== undefined) {\n\t\t\t\tthis._proxy.$setCandidatePortSource(provider.candidatePortSource);\n\t\t\t}\n\t\t\tif (provider.showCandidatePort) {\n\t\t\t\tthis._showCandidatePort = provider.showCandidatePort;\n\t\t\t\tthis._proxy.$setCandidateFilter();\n\t\t\t}\n\t\t\tconst tunnelFactory = provider.tunnelFactory ?? (managedRemoteAuthority ? this.makeManagedTunnelFactory(managedRemoteAuthority) : undefined);\n\t\t\tif (tunnelFactory) {\n\t\t\t\tthis._forwardPortProvider = tunnelFactory;\n\t\t\t\tlet privacyOptions = provider.tunnelFeatures?.privacyOptions ?? [];\n\t\t\t\tif (provider.tunnelFeatures?.public && (privacyOptions.length === 0)) {\n\t\t\t\t\tprivacyOptions = [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tid: 'private',\n\t\t\t\t\t\t\tlabel: nls.localize('tunnelPrivacy.private', \"Private\"),\n\t\t\t\t\t\t\tthemeIcon: 'lock'\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tid: 'public',\n\t\t\t\t\t\t\tlabel: nls.localize('tunnelPrivacy.public', \"Public\"),\n\t\t\t\t\t\t\tthemeIcon: 'eye'\n\t\t\t\t\t\t}\n\t\t\t\t\t];\n\t\t\t\t}\n\n\t\t\t\tconst tunnelFeatures = provider.tunnelFeatures ? {\n\t\t\t\t\televation: !!provider.tunnelFeatures?.elevation,\n\t\t\t\t\tpublic: !!provider.tunnelFeatures?.public,\n\t\t\t\t\tprivacyOptions,\n\t\t\t\t\tprotocol: true\n\t\t\t\t} : undefined;\n\n\t\t\t\tthis._proxy.$setTunnelProvider(tunnelFeatures, !!provider.tunnelFactory);\n\t\t\t}\n\t\t} else {\n\t\t\tthis._forwardPortProvider = undefined;\n\t\t}\n\t\treturn toDisposable(() => {\n\t\t\tthis._forwardPortProvider = undefined;\n\t\t});\n\t}\n\n\tprotected makeManagedTunnelFactory(_authority: vscode.ManagedResolvedAuthority): vscode.RemoteAuthorityResolver['tunnelFactory'] {\n\t\treturn undefined; // may be overridden\n\t}\n\n\tasync $closeTunnel(remote: { host: string; port: number }, silent?: boolean): Promise<void> {\n\t\tif (this._extensionTunnels.has(remote.host)) {\n\t\t\tconst hostMap = this._extensionTunnels.get(remote.host)!;\n\t\t\tif (hostMap.has(remote.port)) {\n\t\t\t\tif (silent) {\n\t\t\t\t\thostMap.get(remote.port)!.disposeListener.dispose();\n\t\t\t\t}\n\t\t\t\tawait hostMap.get(remote.port)!.tunnel.dispose();\n\t\t\t\thostMap.delete(remote.port);\n\t\t\t}\n\t\t}\n\t}\n\n\tasync $onDidTunnelsChange(): Promise<void> {\n\t\tthis._onDidChangeTunnels.fire();\n\t}\n\n\tasync $forwardPort(tunnelOptions: TunnelOptions, tunnelCreationOptions: TunnelCreationOptions): Promise<TunnelDto | string | undefined> {\n\t\tif (this._forwardPortProvider) {\n\t\t\ttry {\n\t\t\t\tthis.logService.trace('ForwardedPorts: (ExtHostTunnelService) Getting tunnel from provider.');\n\t\t\t\tconst providedPort = this._forwardPortProvider(tunnelOptions, tunnelCreationOptions,);\n\t\t\t\tthis.logService.trace('ForwardedPorts: (ExtHostTunnelService) Got tunnel promise from provider.');\n\t\t\t\tif (providedPort !== undefined) {\n\t\t\t\t\tconst tunnel = await providedPort;\n\t\t\t\t\tthis.logService.trace('ForwardedPorts: (ExtHostTunnelService) Successfully awaited tunnel from provider.');\n\t\t\t\t\tif (tunnel === undefined) {\n\t\t\t\t\t\tthis.logService.error('ForwardedPorts: (ExtHostTunnelService) Resolved tunnel is undefined');\n\t\t\t\t\t\treturn undefined;\n\t\t\t\t\t}\n\t\t\t\t\tif (!this._extensionTunnels.has(tunnelOptions.remoteAddress.host)) {\n\t\t\t\t\t\tthis._extensionTunnels.set(tunnelOptions.remoteAddress.host, new Map());\n\t\t\t\t\t}\n\t\t\t\t\tconst disposeListener = this._register(tunnel.onDidDispose(() => {\n\t\t\t\t\t\tthis.logService.trace('ForwardedPorts: (ExtHostTunnelService) Extension fired tunnel\\'s onDidDispose.');\n\t\t\t\t\t\treturn this._proxy.$closeTunnel(tunnel.remoteAddress);\n\t\t\t\t\t}));\n\t\t\t\t\tthis._extensionTunnels.get(tunnelOptions.remoteAddress.host)!.set(tunnelOptions.remoteAddress.port, { tunnel, disposeListener });\n\t\t\t\t\treturn TunnelDtoConverter.fromApiTunnel(tunnel);\n\t\t\t\t} else {\n\t\t\t\t\tthis.logService.trace('ForwardedPorts: (ExtHostTunnelService) Tunnel is undefined');\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\tthis.logService.trace('ForwardedPorts: (ExtHostTunnelService) tunnel provider error');\n\t\t\t\tif (e instanceof Error) {\n\t\t\t\t\treturn e.message;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn undefined;\n\t}\n\n\tasync $applyCandidateFilter(candidates: CandidatePort[]): Promise<CandidatePort[]> {\n\t\tconst filter = await Promise.all(candidates.map(candidate => this._showCandidatePort(candidate.host, candidate.port, candidate.detail ?? '')));\n\t\tconst result = candidates.filter((candidate, index) => filter[index]);\n\t\tthis.logService.trace(`ForwardedPorts: (ExtHostTunnelService) filtered from ${candidates.map(port => port.port).join(', ')} to ${result.map(port => port.port).join(', ')}`);\n\t\treturn result;\n\t}\n}\n"],
  "mappings": ";;;;;;;;;;;;AAKA,SAAS,yBAAyB;AAClC,SAAS,eAAe;AACxB,SAAS,YAAY,aAAa,oBAAoB;AACtD,YAAY,SAAS;AACrB,SAAS,6BAA6B;AACtC,SAAS,uBAAuB;AAChC,SAAS,mBAAmB;AAC5B,SAAS,kBAAkB,uBAAuB,wBAAwB,cAAc,uBAAuB,eAAe,uBAAuB;AACrJ,SAAS,2BAA2B,aAAa,8BAA8B,wBAAwB,iBAAiB;AACxH,SAAS,+BAA+B;AACxC,SAAS,0BAA0B;AACnC,YAAY,WAAW;AACvB,SAAS,qBAAqB;AAC9B,YAAY,YAAY;AAExB,MAAM,wBAAwB,iBAA0C;AAAA,EApBxE,OAoBwE;AAAA;AAAA;AAAE;AAEnE,IAAU;AAAA,CAAV,CAAUA,wBAAV;AACC,WAAS,cAAc,QAAkC;AAC/D,WAAO;AAAA,MACN,eAAe,OAAO;AAAA,MACtB,cAAc,OAAO;AAAA,MACrB,QAAQ,CAAC,CAAC,OAAO;AAAA,MACjB,SAAS,OAAO,YAAY,OAAO,SAAS,gBAAgB,SAAS,gBAAgB;AAAA,MACrF,UAAU,OAAO;AAAA,IAClB;AAAA,EACD;AARO,EAAAA,oBAAS;AAAA;AAST,WAAS,kBAAkB,QAAiC;AAClE,WAAO;AAAA,MACN,eAAe;AAAA,QACd,MAAM,OAAO;AAAA,QACb,MAAM,OAAO;AAAA,MACd;AAAA,MACA,cAAc,OAAO;AAAA,MACrB,QAAQ,OAAO,YAAY,gBAAgB,mBAAmB,OAAO,YAAY,gBAAgB;AAAA,MACjG,SAAS,OAAO;AAAA,MAChB,UAAU,OAAO;AAAA,IAClB;AAAA,EACD;AAXO,EAAAA,oBAAS;AAAA;AAAA,GAVA;AAuCV,MAAM,wBAAwB,gBAAuC,uBAAuB;AAE5F,IAAM,uBAAN,cAAmC,WAA4C;AAAA,EAYrF,YACqB,YACK,UACO,YAC/B;AACD,UAAM;AAF0B;AAGhC,SAAK,SAAS,WAAW,SAAS,YAAY,uBAAuB;AAAA,EACtE;AAAA,EAlFD,OA+DsF;AAAA;AAAA;AAAA,EAC5E;AAAA,EACU;AAAA,EACX;AAAA,EACA,qBAAwF,6BAAM;AAAE,WAAO,QAAQ,QAAQ,IAAI;AAAA,EAAG,GAAtC;AAAA,EACxF,oBAAuG,oBAAI,IAAI;AAAA,EAC/G,sBAAqC,IAAI,QAAc;AAAA,EAC/D,qBAAyC,KAAK,oBAAoB;AAAA,EAE1D,yBAAiC;AAAA,EACjC,2BAAuH,oBAAI,IAAI;AAAA,EAWvI,MAAM,WAAW,WAAkC,SAA4D;AAC9G,SAAK,WAAW,MAAM,0CAA0C,UAAU,WAAW,KAAK,8BAA8B,QAAQ,cAAc,IAAI,IAAI,QAAQ,cAAc,IAAI,GAAG;AACnL,UAAM,SAAS,MAAM,KAAK,OAAO,YAAY,SAAS,UAAU,WAAW;AAC3E,QAAI,QAAQ;AACX,YAAM,mBAAkC,IAAI,gBAAgB,OAAO,eAAe,OAAO,cAAc,MAAM;AAC5G,eAAO,KAAK,OAAO,aAAa,OAAO,aAAa;AAAA,MACrD,CAAC;AACD,WAAK,UAAU,gBAAgB;AAC/B,aAAO;AAAA,IACR;AACA,WAAO;AAAA,EACR;AAAA,EAEA,MAAM,aAAkD;AACvD,WAAO,KAAK,OAAO,YAAY;AAAA,EAChC;AAAA,EACQ,mCAA2C;AAClD,WAAO,KAAK;AAAA,EACb;AAAA,EAEA,gCAAgC,cAAsC,UAA4D;AACjI,QAAI,aAAa,cAAc,UAAa,aAAa,mBAAmB,QAAW;AACtF,WAAK,WAAW,MAAM,4EAA4E;AAAA,IACnG;AACA,UAAM,iBAAiB,KAAK,iCAAiC;AAC7D,SAAK,yBAAyB,IAAI,gBAAgB,EAAE,UAAU,cAAc,SAAS,CAAC;AAEtF,SAAK,OAAO,iCAAiC,cAAc,cAAc;AACzE,WAAO,IAAI,MAAM,WAAW,MAAM;AACjC,WAAK,yBAAyB,OAAO,cAAc;AACnD,WAAK,OAAO,mCAAmC,cAAc;AAAA,IAC9D,CAAC;AAAA,EACF;AAAA,EAEA,MAAM,uBAAuB,SAAmB,OAAiB,KAAyB,aAAiC,mBAAgF;AAC1M,UAAM,qBAAuG,CAAC;AAC9G,eAAW,UAAU,SAAS;AAC7B,YAAM,WAAW,KAAK,yBAAyB,IAAI,MAAM;AACzD,UAAI,CAAC,UAAU;AACd,eAAO,CAAC;AAAA,MACT;AACA,yBAAmB,KAAK,GAAI,MAAM,QAAQ,IAAI,MAAM,IAAI,OAAO,SAAS;AACvE,YAAIC;AACJ,YAAI;AACH,UAAAA,sBAAqB,MAAM,SAAS,SAAS,sBAAsB,EAAE,MAAM,KAAK,YAAY,GAAG,iBAAiB;AAAA,QACjH,SAAS,GAAG;AAEX,UAAAA,sBAAqB,MAAO,SAAS,SAAS,sBAA2L,MAAM,KAAK,aAAa,iBAAiB;AAAA,QACnR;AACA,eAAO,EAAE,oBAAAA,qBAAoB,KAAK;AAAA,MACnC,CAAC,CAAC,CAAE;AAAA,IACL;AAEA,UAAM,gBAA+E,mBAAmB,OAAO,eAAa,CAAC,CAAC,UAAU,kBAAkB;AAE1J,WAAQ,cAAc,SAAS,IAAK,cAAc,IAAI,gBAAc;AACnE,aAAO;AAAA,QACN,mBAAmD,WAAW,mBAAmB;AAAA,QACjF,MAAM,WAAW;AAAA,MAClB;AAAA,IACD,CAAC,IAAI,CAAC;AAAA,EACP;AAAA,EAEA,MAAM,yBAAyB,SAAiC;AAAA,EAAE;AAAA,EAElE,uBAAuB,UAAiC,aAA6D;AACpH,QAAI,KAAK,sBAAsB;AAC9B,YAAM,IAAI,MAAM,8GAA8G;AAAA,IAC/H;AACA,SAAK,uBAAuB,OAAO,eAA8B,0BAAiD;AACjH,YAAM,SAAS,MAAM,SAAS,cAAc,eAAe,uBAAuB,kBAAkB,IAAI;AACxG,aAAO,UAAU;AAAA,IAClB;AAEA,UAAM,iBAAiB,YAAY,iBAAiB;AAAA,MACnD,WAAW,CAAC,CAAC,YAAY,gBAAgB;AAAA,MACzC,gBAAgB,YAAY,gBAAgB;AAAA,MAC5C,UAAU,YAAY,eAAe,aAAa,SAAY,OAAO,YAAY,eAAe;AAAA,IACjG,IAAI;AAEJ,SAAK,OAAO,mBAAmB,gBAAgB,IAAI;AACnD,WAAO,QAAQ,QAAQ,aAAa,MAAM;AACzC,WAAK,uBAAuB;AAC5B,WAAK,OAAO,mBAAmB,QAAW,KAAK;AAAA,IAChD,CAAC,CAAC;AAAA,EACH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUA,MAAM,iBAAiB,UAAsD,wBAA2F;AAGvK,QAAI,UAAU;AACb,UAAI,SAAS,wBAAwB,QAAW;AAC/C,aAAK,OAAO,wBAAwB,SAAS,mBAAmB;AAAA,MACjE;AACA,UAAI,SAAS,mBAAmB;AAC/B,aAAK,qBAAqB,SAAS;AACnC,aAAK,OAAO,oBAAoB;AAAA,MACjC;AACA,YAAM,gBAAgB,SAAS,kBAAkB,yBAAyB,KAAK,yBAAyB,sBAAsB,IAAI;AAClI,UAAI,eAAe;AAClB,aAAK,uBAAuB;AAC5B,YAAI,iBAAiB,SAAS,gBAAgB,kBAAkB,CAAC;AACjE,YAAI,SAAS,gBAAgB,UAAW,eAAe,WAAW,GAAI;AACrE,2BAAiB;AAAA,YAChB;AAAA,cACC,IAAI;AAAA,cACJ,OAAO,IAAI,SAAS,yBAAyB,SAAS;AAAA,cACtD,WAAW;AAAA,YACZ;AAAA,YACA;AAAA,cACC,IAAI;AAAA,cACJ,OAAO,IAAI,SAAS,wBAAwB,QAAQ;AAAA,cACpD,WAAW;AAAA,YACZ;AAAA,UACD;AAAA,QACD;AAEA,cAAM,iBAAiB,SAAS,iBAAiB;AAAA,UAChD,WAAW,CAAC,CAAC,SAAS,gBAAgB;AAAA,UACtC,QAAQ,CAAC,CAAC,SAAS,gBAAgB;AAAA,UACnC;AAAA,UACA,UAAU;AAAA,QACX,IAAI;AAEJ,aAAK,OAAO,mBAAmB,gBAAgB,CAAC,CAAC,SAAS,aAAa;AAAA,MACxE;AAAA,IACD,OAAO;AACN,WAAK,uBAAuB;AAAA,IAC7B;AACA,WAAO,aAAa,MAAM;AACzB,WAAK,uBAAuB;AAAA,IAC7B,CAAC;AAAA,EACF;AAAA,EAEU,yBAAyB,YAA8F;AAChI,WAAO;AAAA,EACR;AAAA,EAEA,MAAM,aAAa,QAAwC,QAAiC;AAC3F,QAAI,KAAK,kBAAkB,IAAI,OAAO,IAAI,GAAG;AAC5C,YAAM,UAAU,KAAK,kBAAkB,IAAI,OAAO,IAAI;AACtD,UAAI,QAAQ,IAAI,OAAO,IAAI,GAAG;AAC7B,YAAI,QAAQ;AACX,kBAAQ,IAAI,OAAO,IAAI,EAAG,gBAAgB,QAAQ;AAAA,QACnD;AACA,cAAM,QAAQ,IAAI,OAAO,IAAI,EAAG,OAAO,QAAQ;AAC/C,gBAAQ,OAAO,OAAO,IAAI;AAAA,MAC3B;AAAA,IACD;AAAA,EACD;AAAA,EAEA,MAAM,sBAAqC;AAC1C,SAAK,oBAAoB,KAAK;AAAA,EAC/B;AAAA,EAEA,MAAM,aAAa,eAA8B,uBAAuF;AACvI,QAAI,KAAK,sBAAsB;AAC9B,UAAI;AACH,aAAK,WAAW,MAAM,sEAAsE;AAC5F,cAAM,eAAe,KAAK,qBAAqB,eAAe,qBAAsB;AACpF,aAAK,WAAW,MAAM,0EAA0E;AAChG,YAAI,iBAAiB,QAAW;AAC/B,gBAAM,SAAS,MAAM;AACrB,eAAK,WAAW,MAAM,mFAAmF;AACzG,cAAI,WAAW,QAAW;AACzB,iBAAK,WAAW,MAAM,qEAAqE;AAC3F,mBAAO;AAAA,UACR;AACA,cAAI,CAAC,KAAK,kBAAkB,IAAI,cAAc,cAAc,IAAI,GAAG;AAClE,iBAAK,kBAAkB,IAAI,cAAc,cAAc,MAAM,oBAAI,IAAI,CAAC;AAAA,UACvE;AACA,gBAAM,kBAAkB,KAAK,UAAU,OAAO,aAAa,MAAM;AAChE,iBAAK,WAAW,MAAM,+EAAgF;AACtG,mBAAO,KAAK,OAAO,aAAa,OAAO,aAAa;AAAA,UACrD,CAAC,CAAC;AACF,eAAK,kBAAkB,IAAI,cAAc,cAAc,IAAI,EAAG,IAAI,cAAc,cAAc,MAAM,EAAE,QAAQ,gBAAgB,CAAC;AAC/H,iBAAO,mBAAmB,cAAc,MAAM;AAAA,QAC/C,OAAO;AACN,eAAK,WAAW,MAAM,4DAA4D;AAAA,QACnF;AAAA,MACD,SAAS,GAAG;AACX,aAAK,WAAW,MAAM,8DAA8D;AACpF,YAAI,aAAa,OAAO;AACvB,iBAAO,EAAE;AAAA,QACV;AAAA,MACD;AAAA,IACD;AACA,WAAO;AAAA,EACR;AAAA,EAEA,MAAM,sBAAsB,YAAuD;AAClF,UAAM,SAAS,MAAM,QAAQ,IAAI,WAAW,IAAI,eAAa,KAAK,mBAAmB,UAAU,MAAM,UAAU,MAAM,UAAU,UAAU,EAAE,CAAC,CAAC;AAC7I,UAAM,SAAS,WAAW,OAAO,CAAC,WAAW,UAAU,OAAO,KAAK,CAAC;AACpE,SAAK,WAAW,MAAM,wDAAwD,WAAW,IAAI,UAAQ,KAAK,IAAI,EAAE,KAAK,IAAI,CAAC,OAAO,OAAO,IAAI,UAAQ,KAAK,IAAI,EAAE,KAAK,IAAI,CAAC,EAAE;AAC3K,WAAO;AAAA,EACR;AACD;AAjOa,uBAAN;AAAA,EAaJ;AAAA,EACA;AAAA,EACA;AAAA,GAfU;",
  "names": ["TunnelDtoConverter", "providedAttributes"]
}
