{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/api/common/extHostEmbedding.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport type * as vscode from \"vscode\";\nimport { CancellationToken } from \"../../../base/common/cancellation.js\";\nimport { Emitter, type Event } from \"../../../base/common/event.js\";\nimport {\n\ttype IDisposable,\n\ttoDisposable,\n} from \"../../../base/common/lifecycle.js\";\nimport type { IExtensionDescription } from \"../../../platform/extensions/common/extensions.js\";\nimport {\n\ttype ExtHostEmbeddingsShape,\n\ttype IMainContext,\n\tMainContext,\n\ttype MainThreadEmbeddingsShape,\n} from \"./extHost.protocol.js\";\n\nexport class ExtHostEmbeddings implements ExtHostEmbeddingsShape {\n\tprivate readonly _proxy: MainThreadEmbeddingsShape;\n\tprivate readonly _provider = new Map<\n\t\tnumber,\n\t\t{ id: string; provider: vscode.EmbeddingsProvider }\n\t>();\n\n\tprivate readonly _onDidChange = new Emitter<void>();\n\treadonly onDidChange: Event<void> = this._onDidChange.event;\n\n\tprivate _allKnownModels = new Set<string>();\n\tprivate _handlePool = 0;\n\n\tconstructor(mainContext: IMainContext) {\n\t\tthis._proxy = mainContext.getProxy(MainContext.MainThreadEmbeddings);\n\t}\n\n\tregisterEmbeddingsProvider(\n\t\t_extension: IExtensionDescription,\n\t\tembeddingsModel: string,\n\t\tprovider: vscode.EmbeddingsProvider,\n\t): IDisposable {\n\t\tif (this._allKnownModels.has(embeddingsModel)) {\n\t\t\tthrow new Error(\n\t\t\t\t\"An embeddings provider for this model is already registered\",\n\t\t\t);\n\t\t}\n\n\t\tconst handle = this._handlePool++;\n\n\t\tthis._proxy.$registerEmbeddingProvider(handle, embeddingsModel);\n\t\tthis._provider.set(handle, { id: embeddingsModel, provider });\n\n\t\treturn toDisposable(() => {\n\t\t\tthis._allKnownModels.delete(embeddingsModel);\n\t\t\tthis._proxy.$unregisterEmbeddingProvider(handle);\n\t\t\tthis._provider.delete(handle);\n\t\t});\n\t}\n\n\tasync computeEmbeddings(\n\t\tembeddingsModel: string,\n\t\tinput: string,\n\t\ttoken?: vscode.CancellationToken,\n\t): Promise<vscode.Embedding>;\n\tasync computeEmbeddings(\n\t\tembeddingsModel: string,\n\t\tinput: string[],\n\t\ttoken?: vscode.CancellationToken,\n\t): Promise<vscode.Embedding[]>;\n\tasync computeEmbeddings(\n\t\tembeddingsModel: string,\n\t\tinput: string | string[],\n\t\ttoken?: vscode.CancellationToken,\n\t): Promise<vscode.Embedding[] | vscode.Embedding> {\n\t\ttoken ??= CancellationToken.None;\n\n\t\tlet returnSingle = false;\n\t\tif (typeof input === \"string\") {\n\t\t\tinput = [input];\n\t\t\treturnSingle = true;\n\t\t}\n\t\tconst result = await this._proxy.$computeEmbeddings(\n\t\t\tembeddingsModel,\n\t\t\tinput,\n\t\t\ttoken,\n\t\t);\n\t\tif (result.length !== input.length) {\n\t\t\tthrow new Error();\n\t\t}\n\t\tif (returnSingle) {\n\t\t\tif (result.length !== 1) {\n\t\t\t\tthrow new Error();\n\t\t\t}\n\t\t\treturn result[0];\n\t\t}\n\t\treturn result;\n\t}\n\n\tasync $provideEmbeddings(\n\t\thandle: number,\n\t\tinput: string[],\n\t\ttoken: CancellationToken,\n\t): Promise<{ values: number[] }[]> {\n\t\tconst data = this._provider.get(handle);\n\t\tif (!data) {\n\t\t\treturn [];\n\t\t}\n\t\tconst result = await data.provider.provideEmbeddings(input, token);\n\t\tif (!result) {\n\t\t\treturn [];\n\t\t}\n\t\treturn result;\n\t}\n\n\tget embeddingsModels(): string[] {\n\t\treturn Array.from(this._allKnownModels);\n\t}\n\n\t$acceptEmbeddingModels(models: string[]): void {\n\t\tthis._allKnownModels = new Set(models);\n\t\tthis._onDidChange.fire();\n\t}\n}\n"],
  "mappings": ";;AAMA,SAAS,yBAAyB;AAClC,SAAS,eAA2B;AACpC;AAAA,EAEC;AAAA,OACM;AAEP;AAAA,EAGC;AAAA,OAEM;AAEA,MAAM,kBAAoD;AAAA,EApBjE,OAoBiE;AAAA;AAAA;AAAA,EAC/C;AAAA,EACA,YAAY,oBAAI,IAG/B;AAAA,EAEe,eAAe,IAAI,QAAc;AAAA,EACzC,cAA2B,KAAK,aAAa;AAAA,EAE9C,kBAAkB,oBAAI,IAAY;AAAA,EAClC,cAAc;AAAA,EAEtB,YAAY,aAA2B;AACtC,SAAK,SAAS,YAAY,SAAS,YAAY,oBAAoB;AAAA,EACpE;AAAA,EAEA,2BACC,YACA,iBACA,UACc;AACd,QAAI,KAAK,gBAAgB,IAAI,eAAe,GAAG;AAC9C,YAAM,IAAI;AAAA,QACT;AAAA,MACD;AAAA,IACD;AAEA,UAAM,SAAS,KAAK;AAEpB,SAAK,OAAO,2BAA2B,QAAQ,eAAe;AAC9D,SAAK,UAAU,IAAI,QAAQ,EAAE,IAAI,iBAAiB,SAAS,CAAC;AAE5D,WAAO,aAAa,MAAM;AACzB,WAAK,gBAAgB,OAAO,eAAe;AAC3C,WAAK,OAAO,6BAA6B,MAAM;AAC/C,WAAK,UAAU,OAAO,MAAM;AAAA,IAC7B,CAAC;AAAA,EACF;AAAA,EAYA,MAAM,kBACL,iBACA,OACA,OACiD;AACjD,cAAU,kBAAkB;AAE5B,QAAI,eAAe;AACnB,QAAI,OAAO,UAAU,UAAU;AAC9B,cAAQ,CAAC,KAAK;AACd,qBAAe;AAAA,IAChB;AACA,UAAM,SAAS,MAAM,KAAK,OAAO;AAAA,MAChC;AAAA,MACA;AAAA,MACA;AAAA,IACD;AACA,QAAI,OAAO,WAAW,MAAM,QAAQ;AACnC,YAAM,IAAI,MAAM;AAAA,IACjB;AACA,QAAI,cAAc;AACjB,UAAI,OAAO,WAAW,GAAG;AACxB,cAAM,IAAI,MAAM;AAAA,MACjB;AACA,aAAO,OAAO,CAAC;AAAA,IAChB;AACA,WAAO;AAAA,EACR;AAAA,EAEA,MAAM,mBACL,QACA,OACA,OACkC;AAClC,UAAM,OAAO,KAAK,UAAU,IAAI,MAAM;AACtC,QAAI,CAAC,MAAM;AACV,aAAO,CAAC;AAAA,IACT;AACA,UAAM,SAAS,MAAM,KAAK,SAAS,kBAAkB,OAAO,KAAK;AACjE,QAAI,CAAC,QAAQ;AACZ,aAAO,CAAC;AAAA,IACT;AACA,WAAO;AAAA,EACR;AAAA,EAEA,IAAI,mBAA6B;AAChC,WAAO,MAAM,KAAK,KAAK,eAAe;AAAA,EACvC;AAAA,EAEA,uBAAuB,QAAwB;AAC9C,SAAK,kBAAkB,IAAI,IAAI,MAAM;AACrC,SAAK,aAAa,KAAK;AAAA,EACxB;AACD;",
  "names": []
}
