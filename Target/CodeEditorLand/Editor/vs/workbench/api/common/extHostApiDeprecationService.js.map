{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/api/common/extHostApiDeprecationService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IExtensionDescription } from '../../../platform/extensions/common/extensions.js';\nimport { createDecorator } from '../../../platform/instantiation/common/instantiation.js';\nimport { ILogService } from '../../../platform/log/common/log.js';\nimport * as extHostProtocol from './extHost.protocol.js';\nimport { IExtHostRpcService } from './extHostRpcService.js';\n\nexport interface IExtHostApiDeprecationService {\n\treadonly _serviceBrand: undefined;\n\n\treport(apiId: string, extension: IExtensionDescription, migrationSuggestion: string): void;\n}\n\nexport const IExtHostApiDeprecationService = createDecorator<IExtHostApiDeprecationService>('IExtHostApiDeprecationService');\n\nexport class ExtHostApiDeprecationService implements IExtHostApiDeprecationService {\n\n\tdeclare readonly _serviceBrand: undefined;\n\n\tprivate readonly _reportedUsages = new Set<string>();\n\tprivate readonly _telemetryShape: extHostProtocol.MainThreadTelemetryShape;\n\n\tconstructor(\n\t\t@IExtHostRpcService rpc: IExtHostRpcService,\n\t\t@ILogService private readonly _extHostLogService: ILogService,\n\t) {\n\t\tthis._telemetryShape = rpc.getProxy(extHostProtocol.MainContext.MainThreadTelemetry);\n\t}\n\n\tpublic report(apiId: string, extension: IExtensionDescription, migrationSuggestion: string): void {\n\t\tconst key = this.getUsageKey(apiId, extension);\n\t\tif (this._reportedUsages.has(key)) {\n\t\t\treturn;\n\t\t}\n\t\tthis._reportedUsages.add(key);\n\n\t\tif (extension.isUnderDevelopment) {\n\t\t\tthis._extHostLogService.warn(`[Deprecation Warning] '${apiId}' is deprecated. ${migrationSuggestion}`);\n\t\t}\n\n\t\ttype DeprecationTelemetry = {\n\t\t\textensionId: string;\n\t\t\tapiId: string;\n\t\t};\n\t\ttype DeprecationTelemetryMeta = {\n\t\t\textensionId: { classification: 'SystemMetaData'; purpose: 'PerformanceAndHealth'; comment: 'The id of the extension that is using the deprecated API' };\n\t\t\tapiId: { classification: 'SystemMetaData'; purpose: 'PerformanceAndHealth'; comment: 'The id of the deprecated API' };\n\t\t\towner: 'mjbvz';\n\t\t\tcomment: 'Helps us gain insights on extensions using deprecated API so we can assist in migration to new API';\n\t\t};\n\t\tthis._telemetryShape.$publicLog2<DeprecationTelemetry, DeprecationTelemetryMeta>('extHostDeprecatedApiUsage', {\n\t\t\textensionId: extension.identifier.value,\n\t\t\tapiId: apiId,\n\t\t});\n\t}\n\n\tprivate getUsageKey(apiId: string, extension: IExtensionDescription): string {\n\t\treturn `${apiId}-${extension.identifier.value}`;\n\t}\n}\n\n\nexport const NullApiDeprecationService = Object.freeze(new class implements IExtHostApiDeprecationService {\n\tdeclare readonly _serviceBrand: undefined;\n\n\tpublic report(_apiId: string, _extension: IExtensionDescription, _warningMessage: string): void {\n\t\t// noop\n\t}\n}());\n"],
  "mappings": ";;;;;;;;;;;;AAKA,SAAS,6BAA6B;AACtC,SAAS,uBAAuB;AAChC,SAAS,mBAAmB;AAC5B,YAAY,qBAAqB;AACjC,SAAS,0BAA0B;AAQ5B,MAAM,gCAAgC,gBAA+C,+BAA+B;AAEpH,IAAM,+BAAN,MAA4E;AAAA,EAOlF,YACqB,KACU,oBAC7B;AAD6B;AAE9B,SAAK,kBAAkB,IAAI,SAAS,gBAAgB,YAAY,mBAAmB;AAAA,EACpF;AAAA,EA/BD,OAmBmF;AAAA;AAAA;AAAA,EAIjE,kBAAkB,oBAAI,IAAY;AAAA,EAClC;AAAA,EASV,OAAO,OAAe,WAAkC,qBAAmC;AACjG,UAAM,MAAM,KAAK,YAAY,OAAO,SAAS;AAC7C,QAAI,KAAK,gBAAgB,IAAI,GAAG,GAAG;AAClC;AAAA,IACD;AACA,SAAK,gBAAgB,IAAI,GAAG;AAE5B,QAAI,UAAU,oBAAoB;AACjC,WAAK,mBAAmB,KAAK,0BAA0B,KAAK,oBAAoB,mBAAmB,EAAE;AAAA,IACtG;AAYA,SAAK,gBAAgB,YAA4D,6BAA6B;AAAA,MAC7G,aAAa,UAAU,WAAW;AAAA,MAClC;AAAA,IACD,CAAC;AAAA,EACF;AAAA,EAEQ,YAAY,OAAe,WAA0C;AAC5E,WAAO,GAAG,KAAK,IAAI,UAAU,WAAW,KAAK;AAAA,EAC9C;AACD;AA5Ca,+BAAN;AAAA,EAQJ;AAAA,EACA;AAAA,GATU;AA+CN,MAAM,4BAA4B,OAAO,OAAO,IAAI,MAA+C;AAAA,EAGlG,OAAO,QAAgB,YAAmC,iBAA+B;AAAA,EAEhG;AACD,EAAE,CAAC;",
  "names": []
}
