{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/api/common/extHostApiDeprecationService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport type { IExtensionDescription } from \"../../../platform/extensions/common/extensions.js\";\nimport { createDecorator } from \"../../../platform/instantiation/common/instantiation.js\";\nimport { ILogService } from \"../../../platform/log/common/log.js\";\nimport * as extHostProtocol from \"./extHost.protocol.js\";\nimport { IExtHostRpcService } from \"./extHostRpcService.js\";\n\nexport interface IExtHostApiDeprecationService {\n\treadonly _serviceBrand: undefined;\n\n\treport(\n\t\tapiId: string,\n\t\textension: IExtensionDescription,\n\t\tmigrationSuggestion: string,\n\t): void;\n}\n\nexport const IExtHostApiDeprecationService =\n\tcreateDecorator<IExtHostApiDeprecationService>(\n\t\t\"IExtHostApiDeprecationService\",\n\t);\n\nexport class ExtHostApiDeprecationService\n\timplements IExtHostApiDeprecationService\n{\n\tdeclare readonly _serviceBrand: undefined;\n\n\tprivate readonly _reportedUsages = new Set<string>();\n\tprivate readonly _telemetryShape: extHostProtocol.MainThreadTelemetryShape;\n\n\tconstructor(\n\t\t@IExtHostRpcService rpc: IExtHostRpcService,\n\t\t@ILogService private readonly _extHostLogService: ILogService,\n\t) {\n\t\tthis._telemetryShape = rpc.getProxy(\n\t\t\textHostProtocol.MainContext.MainThreadTelemetry,\n\t\t);\n\t}\n\n\tpublic report(\n\t\tapiId: string,\n\t\textension: IExtensionDescription,\n\t\tmigrationSuggestion: string,\n\t): void {\n\t\tconst key = this.getUsageKey(apiId, extension);\n\t\tif (this._reportedUsages.has(key)) {\n\t\t\treturn;\n\t\t}\n\t\tthis._reportedUsages.add(key);\n\n\t\tif (extension.isUnderDevelopment) {\n\t\t\tthis._extHostLogService.warn(\n\t\t\t\t`[Deprecation Warning] '${apiId}' is deprecated. ${migrationSuggestion}`,\n\t\t\t);\n\t\t}\n\n\t\ttype DeprecationTelemetry = {\n\t\t\textensionId: string;\n\t\t\tapiId: string;\n\t\t};\n\t\ttype DeprecationTelemetryMeta = {\n\t\t\textensionId: {\n\t\t\t\tclassification: \"SystemMetaData\";\n\t\t\t\tpurpose: \"PerformanceAndHealth\";\n\t\t\t\tcomment: \"The id of the extension that is using the deprecated API\";\n\t\t\t};\n\t\t\tapiId: {\n\t\t\t\tclassification: \"SystemMetaData\";\n\t\t\t\tpurpose: \"PerformanceAndHealth\";\n\t\t\t\tcomment: \"The id of the deprecated API\";\n\t\t\t};\n\t\t\towner: \"mjbvz\";\n\t\t\tcomment: \"Helps us gain insights on extensions using deprecated API so we can assist in migration to new API\";\n\t\t};\n\t\tthis._telemetryShape.$publicLog2<\n\t\t\tDeprecationTelemetry,\n\t\t\tDeprecationTelemetryMeta\n\t\t>(\"extHostDeprecatedApiUsage\", {\n\t\t\textensionId: extension.identifier.value,\n\t\t\tapiId: apiId,\n\t\t});\n\t}\n\n\tprivate getUsageKey(\n\t\tapiId: string,\n\t\textension: IExtensionDescription,\n\t): string {\n\t\treturn `${apiId}-${extension.identifier.value}`;\n\t}\n}\n\nexport const NullApiDeprecationService = Object.freeze(\n\tnew (class implements IExtHostApiDeprecationService {\n\t\tdeclare readonly _serviceBrand: undefined;\n\n\t\tpublic report(\n\t\t\t_apiId: string,\n\t\t\t_extension: IExtensionDescription,\n\t\t\t_warningMessage: string,\n\t\t): void {\n\t\t\t// noop\n\t\t}\n\t})(),\n);\n"],
  "mappings": ";;;;;;;;;;;;AAMA,SAAS,uBAAuB;AAChC,SAAS,mBAAmB;AAC5B,YAAY,qBAAqB;AACjC,SAAS,0BAA0B;AAY5B,MAAM,gCACZ;AAAA,EACC;AACD;AAEM,IAAM,+BAAN,MAEP;AAAA,EAMC,YACqB,KACU,oBAC7B;AAD6B;AAE9B,SAAK,kBAAkB,IAAI;AAAA,MAC1B,gBAAgB,YAAY;AAAA,IAC7B;AAAA,EACD;AAAA,EAzCD,OA4BA;AAAA;AAAA;AAAA,EAGkB,kBAAkB,oBAAI,IAAY;AAAA,EAClC;AAAA,EAWV,OACN,OACA,WACA,qBACO;AACP,UAAM,MAAM,KAAK,YAAY,OAAO,SAAS;AAC7C,QAAI,KAAK,gBAAgB,IAAI,GAAG,GAAG;AAClC;AAAA,IACD;AACA,SAAK,gBAAgB,IAAI,GAAG;AAE5B,QAAI,UAAU,oBAAoB;AACjC,WAAK,mBAAmB;AAAA,QACvB,0BAA0B,KAAK,oBAAoB,mBAAmB;AAAA,MACvE;AAAA,IACD;AAoBA,SAAK,gBAAgB,YAGnB,6BAA6B;AAAA,MAC9B,aAAa,UAAU,WAAW;AAAA,MAClC;AAAA,IACD,CAAC;AAAA,EACF;AAAA,EAEQ,YACP,OACA,WACS;AACT,WAAO,GAAG,KAAK,IAAI,UAAU,WAAW,KAAK;AAAA,EAC9C;AACD;AAnEa,+BAAN;AAAA,EASJ;AAAA,EACA;AAAA,GAVU;AAqEN,MAAM,4BAA4B,OAAO;AAAA,EAC/C,IAAK,MAA+C;AAAA,IAG5C,OACN,QACA,YACA,iBACO;AAAA,IAER;AAAA,EACD,EAAG;AACJ;",
  "names": []
}
