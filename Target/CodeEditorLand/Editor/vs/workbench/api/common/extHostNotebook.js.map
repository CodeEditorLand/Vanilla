{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/api/common/extHostNotebook.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { localize } from '../../../nls.js';\nimport { VSBuffer } from '../../../base/common/buffer.js';\nimport { CancellationToken } from '../../../base/common/cancellation.js';\nimport { Emitter, Event } from '../../../base/common/event.js';\nimport { IRelativePattern } from '../../../base/common/glob.js';\nimport { DisposableStore, IDisposable, toDisposable } from '../../../base/common/lifecycle.js';\nimport { ResourceMap, ResourceSet } from '../../../base/common/map.js';\nimport { MarshalledId } from '../../../base/common/marshallingIds.js';\nimport { isFalsyOrWhitespace } from '../../../base/common/strings.js';\nimport { assertIsDefined } from '../../../base/common/types.js';\nimport { URI, UriComponents } from '../../../base/common/uri.js';\nimport { IExtensionDescription } from '../../../platform/extensions/common/extensions.js';\nimport * as files from '../../../platform/files/common/files.js';\nimport { Cache } from './cache.js';\nimport { ExtHostNotebookShape, IMainContext, IModelAddedData, INotebookCellStatusBarListDto, INotebookDocumentsAndEditorsDelta, INotebookDocumentShowOptions, INotebookEditorAddData, INotebookPartialFileStatsWithMetadata, MainContext, MainThreadNotebookDocumentsShape, MainThreadNotebookEditorsShape, MainThreadNotebookShape, NotebookDataDto } from './extHost.protocol.js';\nimport { ApiCommand, ApiCommandArgument, ApiCommandResult, CommandsConverter, ExtHostCommands } from './extHostCommands.js';\nimport { ExtHostDocuments } from './extHostDocuments.js';\nimport { ExtHostDocumentsAndEditors } from './extHostDocumentsAndEditors.js';\nimport * as typeConverters from './extHostTypeConverters.js';\nimport * as extHostTypes from './extHostTypes.js';\nimport { INotebookExclusiveDocumentFilter, INotebookContributionData } from '../../contrib/notebook/common/notebookCommon.js';\nimport { SerializableObjectWithBuffers } from '../../services/extensions/common/proxyIdentifier.js';\nimport type * as vscode from 'vscode';\nimport { ExtHostCell, ExtHostNotebookDocument } from './extHostNotebookDocument.js';\nimport { ExtHostNotebookEditor } from './extHostNotebookEditor.js';\nimport { IExtHostConsumerFileSystem } from './extHostFileSystemConsumer.js';\nimport { filter } from '../../../base/common/objects.js';\nimport { Schemas } from '../../../base/common/network.js';\nimport { IFileQuery, ITextQuery, QueryType } from '../../services/search/common/search.js';\nimport { IExtHostSearch } from './extHostSearch.js';\nimport { CellSearchModel } from '../../contrib/search/common/cellSearchModel.js';\nimport { INotebookCellMatchNoModel, INotebookFileMatchNoModel, IRawClosedNotebookFileMatch, genericCellMatchesToTextSearchMatches } from '../../contrib/search/common/searchNotebookHelpers.js';\nimport { NotebookPriorityInfo } from '../../contrib/search/common/search.js';\nimport { globMatchesResource, RegisteredEditorPriority } from '../../services/editor/common/editorResolverService.js';\nimport { ILogService } from '../../../platform/log/common/log.js';\n\nexport class ExtHostNotebookController implements ExtHostNotebookShape {\n\tprivate static _notebookStatusBarItemProviderHandlePool: number = 0;\n\n\tprivate readonly _notebookProxy: MainThreadNotebookShape;\n\tprivate readonly _notebookDocumentsProxy: MainThreadNotebookDocumentsShape;\n\tprivate readonly _notebookEditorsProxy: MainThreadNotebookEditorsShape;\n\n\tprivate readonly _notebookStatusBarItemProviders = new Map<number, vscode.NotebookCellStatusBarItemProvider>();\n\tprivate readonly _documents = new ResourceMap<ExtHostNotebookDocument>();\n\tprivate readonly _editors = new Map<string, ExtHostNotebookEditor>();\n\tprivate readonly _commandsConverter: CommandsConverter;\n\n\tprivate readonly _onDidChangeActiveNotebookEditor = new Emitter<vscode.NotebookEditor | undefined>();\n\treadonly onDidChangeActiveNotebookEditor = this._onDidChangeActiveNotebookEditor.event;\n\n\tprivate _activeNotebookEditor: ExtHostNotebookEditor | undefined;\n\tget activeNotebookEditor(): vscode.NotebookEditor | undefined {\n\t\treturn this._activeNotebookEditor?.apiEditor;\n\t}\n\tprivate _visibleNotebookEditors: ExtHostNotebookEditor[] = [];\n\tget visibleNotebookEditors(): vscode.NotebookEditor[] {\n\t\treturn this._visibleNotebookEditors.map(editor => editor.apiEditor);\n\t}\n\n\tprivate _onDidOpenNotebookDocument = new Emitter<vscode.NotebookDocument>();\n\tonDidOpenNotebookDocument: Event<vscode.NotebookDocument> = this._onDidOpenNotebookDocument.event;\n\tprivate _onDidCloseNotebookDocument = new Emitter<vscode.NotebookDocument>();\n\tonDidCloseNotebookDocument: Event<vscode.NotebookDocument> = this._onDidCloseNotebookDocument.event;\n\n\tprivate _onDidChangeVisibleNotebookEditors = new Emitter<vscode.NotebookEditor[]>();\n\tonDidChangeVisibleNotebookEditors = this._onDidChangeVisibleNotebookEditors.event;\n\n\tprivate _statusBarCache = new Cache<IDisposable>('NotebookCellStatusBarCache');\n\n\tconstructor(\n\t\tmainContext: IMainContext,\n\t\tcommands: ExtHostCommands,\n\t\tprivate _textDocumentsAndEditors: ExtHostDocumentsAndEditors,\n\t\tprivate _textDocuments: ExtHostDocuments,\n\t\tprivate _extHostFileSystem: IExtHostConsumerFileSystem,\n\t\tprivate _extHostSearch: IExtHostSearch,\n\t\tprivate _logService: ILogService\n\t) {\n\t\tthis._notebookProxy = mainContext.getProxy(MainContext.MainThreadNotebook);\n\t\tthis._notebookDocumentsProxy = mainContext.getProxy(MainContext.MainThreadNotebookDocuments);\n\t\tthis._notebookEditorsProxy = mainContext.getProxy(MainContext.MainThreadNotebookEditors);\n\t\tthis._commandsConverter = commands.converter;\n\n\t\tcommands.registerArgumentProcessor({\n\t\t\t// Serialized INotebookCellActionContext\n\t\t\tprocessArgument: (arg) => {\n\t\t\t\tif (arg && arg.$mid === MarshalledId.NotebookCellActionContext) {\n\t\t\t\t\tconst notebookUri = arg.notebookEditor?.notebookUri;\n\t\t\t\t\tconst cellHandle = arg.cell.handle;\n\n\t\t\t\t\tconst data = this._documents.get(notebookUri);\n\t\t\t\t\tconst cell = data?.getCell(cellHandle);\n\t\t\t\t\tif (cell) {\n\t\t\t\t\t\treturn cell.apiCell;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (arg && arg.$mid === MarshalledId.NotebookActionContext) {\n\t\t\t\t\tconst notebookUri = arg.uri;\n\t\t\t\t\tconst data = this._documents.get(notebookUri);\n\t\t\t\t\tif (data) {\n\t\t\t\t\t\treturn data.apiNotebook;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn arg;\n\t\t\t}\n\t\t});\n\n\t\tExtHostNotebookController._registerApiCommands(commands);\n\t}\n\n\tgetEditorById(editorId: string): ExtHostNotebookEditor {\n\t\tconst editor = this._editors.get(editorId);\n\t\tif (!editor) {\n\t\t\tthrow new Error(`unknown text editor: ${editorId}. known editors: ${[...this._editors.keys()]} `);\n\t\t}\n\t\treturn editor;\n\t}\n\n\tgetIdByEditor(editor: vscode.NotebookEditor): string | undefined {\n\t\tfor (const [id, candidate] of this._editors) {\n\t\t\tif (candidate.apiEditor === editor) {\n\t\t\t\treturn id;\n\t\t\t}\n\t\t}\n\t\treturn undefined;\n\t}\n\n\tget notebookDocuments() {\n\t\treturn [...this._documents.values()];\n\t}\n\n\tgetNotebookDocument(uri: URI, relaxed: true): ExtHostNotebookDocument | undefined;\n\tgetNotebookDocument(uri: URI): ExtHostNotebookDocument;\n\tgetNotebookDocument(uri: URI, relaxed?: true): ExtHostNotebookDocument | undefined {\n\t\tconst result = this._documents.get(uri);\n\t\tif (!result && !relaxed) {\n\t\t\tthrow new Error(`NO notebook document for '${uri}'`);\n\t\t}\n\t\treturn result;\n\t}\n\n\tprivate static _convertNotebookRegistrationData(extension: IExtensionDescription, registration: vscode.NotebookRegistrationData | undefined): INotebookContributionData | undefined {\n\t\tif (!registration) {\n\t\t\treturn;\n\t\t}\n\t\tconst viewOptionsFilenamePattern = registration.filenamePattern\n\t\t\t.map(pattern => typeConverters.NotebookExclusiveDocumentPattern.from(pattern))\n\t\t\t.filter(pattern => pattern !== undefined) as (string | IRelativePattern | INotebookExclusiveDocumentFilter)[];\n\t\tif (registration.filenamePattern && !viewOptionsFilenamePattern) {\n\t\t\tconsole.warn(`Notebook content provider view options file name pattern is invalid ${registration.filenamePattern}`);\n\t\t\treturn undefined;\n\t\t}\n\t\treturn {\n\t\t\textension: extension.identifier,\n\t\t\tproviderDisplayName: extension.displayName || extension.name,\n\t\t\tdisplayName: registration.displayName,\n\t\t\tfilenamePattern: viewOptionsFilenamePattern,\n\t\t\tpriority: registration.exclusive ? RegisteredEditorPriority.exclusive : undefined\n\t\t};\n\t}\n\n\tregisterNotebookCellStatusBarItemProvider(extension: IExtensionDescription, notebookType: string, provider: vscode.NotebookCellStatusBarItemProvider) {\n\n\t\tconst handle = ExtHostNotebookController._notebookStatusBarItemProviderHandlePool++;\n\t\tconst eventHandle = typeof provider.onDidChangeCellStatusBarItems === 'function' ? ExtHostNotebookController._notebookStatusBarItemProviderHandlePool++ : undefined;\n\n\t\tthis._notebookStatusBarItemProviders.set(handle, provider);\n\t\tthis._notebookProxy.$registerNotebookCellStatusBarItemProvider(handle, eventHandle, notebookType);\n\n\t\tlet subscription: vscode.Disposable | undefined;\n\t\tif (eventHandle !== undefined) {\n\t\t\tsubscription = provider.onDidChangeCellStatusBarItems!(_ => this._notebookProxy.$emitCellStatusBarEvent(eventHandle));\n\t\t}\n\n\t\treturn new extHostTypes.Disposable(() => {\n\t\t\tthis._notebookStatusBarItemProviders.delete(handle);\n\t\t\tthis._notebookProxy.$unregisterNotebookCellStatusBarItemProvider(handle, eventHandle);\n\t\t\tsubscription?.dispose();\n\t\t});\n\t}\n\n\tasync createNotebookDocument(options: { viewType: string; content?: vscode.NotebookData }): Promise<URI> {\n\t\tconst canonicalUri = await this._notebookDocumentsProxy.$tryCreateNotebook({\n\t\t\tviewType: options.viewType,\n\t\t\tcontent: options.content && typeConverters.NotebookData.from(options.content)\n\t\t});\n\t\treturn URI.revive(canonicalUri);\n\t}\n\n\tasync openNotebookDocument(uri: URI): Promise<vscode.NotebookDocument> {\n\t\tconst cached = this._documents.get(uri);\n\t\tif (cached) {\n\t\t\treturn cached.apiNotebook;\n\t\t}\n\t\tconst canonicalUri = await this._notebookDocumentsProxy.$tryOpenNotebook(uri);\n\t\tconst document = this._documents.get(URI.revive(canonicalUri));\n\t\treturn assertIsDefined(document?.apiNotebook);\n\t}\n\n\tasync showNotebookDocument(notebook: vscode.NotebookDocument, options?: vscode.NotebookDocumentShowOptions): Promise<vscode.NotebookEditor> {\n\t\tlet resolvedOptions: INotebookDocumentShowOptions;\n\t\tif (typeof options === 'object') {\n\t\t\tresolvedOptions = {\n\t\t\t\tposition: typeConverters.ViewColumn.from(options.viewColumn),\n\t\t\t\tpreserveFocus: options.preserveFocus,\n\t\t\t\tselections: options.selections && options.selections.map(typeConverters.NotebookRange.from),\n\t\t\t\tpinned: typeof options.preview === 'boolean' ? !options.preview : undefined,\n\t\t\t\tlabel: options?.label\n\t\t\t};\n\t\t} else {\n\t\t\tresolvedOptions = {\n\t\t\t\tpreserveFocus: false,\n\t\t\t\tpinned: true\n\t\t\t};\n\t\t}\n\n\t\tconst viewType = options?.asRepl ? 'repl' : notebook.notebookType;\n\t\tconst editorId = await this._notebookEditorsProxy.$tryShowNotebookDocument(notebook.uri, viewType, resolvedOptions);\n\t\tconst editor = editorId && this._editors.get(editorId)?.apiEditor;\n\n\t\tif (editor) {\n\t\t\treturn editor;\n\t\t}\n\n\t\tif (editorId) {\n\t\t\tthrow new Error(`Could NOT open editor for \"${notebook.uri.toString()}\" because another editor opened in the meantime.`);\n\t\t} else {\n\t\t\tthrow new Error(`Could NOT open editor for \"${notebook.uri.toString()}\".`);\n\t\t}\n\t}\n\n\tasync $provideNotebookCellStatusBarItems(handle: number, uri: UriComponents, index: number, token: CancellationToken): Promise<INotebookCellStatusBarListDto | undefined> {\n\t\tconst provider = this._notebookStatusBarItemProviders.get(handle);\n\t\tconst revivedUri = URI.revive(uri);\n\t\tconst document = this._documents.get(revivedUri);\n\t\tif (!document || !provider) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst cell = document.getCellFromIndex(index);\n\t\tif (!cell) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst result = await provider.provideCellStatusBarItems(cell.apiCell, token);\n\t\tif (!result) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\tconst disposables = new DisposableStore();\n\t\tconst cacheId = this._statusBarCache.add([disposables]);\n\t\tconst resultArr = Array.isArray(result) ? result : [result];\n\t\tconst items = resultArr.map(item => typeConverters.NotebookStatusBarItem.from(item, this._commandsConverter, disposables));\n\t\treturn {\n\t\t\tcacheId,\n\t\t\titems\n\t\t};\n\t}\n\n\t$releaseNotebookCellStatusBarItems(cacheId: number): void {\n\t\tthis._statusBarCache.delete(cacheId);\n\t}\n\n\t// --- serialize/deserialize\n\n\tprivate _handlePool = 0;\n\tprivate readonly _notebookSerializer = new Map<number, { viewType: string; serializer: vscode.NotebookSerializer; options: vscode.NotebookDocumentContentOptions | undefined }>();\n\n\tregisterNotebookSerializer(extension: IExtensionDescription, viewType: string, serializer: vscode.NotebookSerializer, options?: vscode.NotebookDocumentContentOptions, registration?: vscode.NotebookRegistrationData): vscode.Disposable {\n\t\tif (isFalsyOrWhitespace(viewType)) {\n\t\t\tthrow new Error(`viewType cannot be empty or just whitespace`);\n\t\t}\n\t\tconst handle = this._handlePool++;\n\t\tthis._notebookSerializer.set(handle, { viewType, serializer, options });\n\t\tthis._notebookProxy.$registerNotebookSerializer(\n\t\t\thandle,\n\t\t\t{ id: extension.identifier, location: extension.extensionLocation },\n\t\t\tviewType,\n\t\t\ttypeConverters.NotebookDocumentContentOptions.from(options),\n\t\t\tExtHostNotebookController._convertNotebookRegistrationData(extension, registration)\n\t\t);\n\t\treturn toDisposable(() => {\n\t\t\tthis._notebookProxy.$unregisterNotebookSerializer(handle);\n\t\t});\n\t}\n\n\tasync $dataToNotebook(handle: number, bytes: VSBuffer, token: CancellationToken): Promise<SerializableObjectWithBuffers<NotebookDataDto>> {\n\t\tconst serializer = this._notebookSerializer.get(handle);\n\t\tif (!serializer) {\n\t\t\tthrow new Error('NO serializer found');\n\t\t}\n\t\tconst data = await serializer.serializer.deserializeNotebook(bytes.buffer, token);\n\t\treturn new SerializableObjectWithBuffers(typeConverters.NotebookData.from(data));\n\t}\n\n\tasync $notebookToData(handle: number, data: SerializableObjectWithBuffers<NotebookDataDto>, token: CancellationToken): Promise<VSBuffer> {\n\t\tconst serializer = this._notebookSerializer.get(handle);\n\t\tif (!serializer) {\n\t\t\tthrow new Error('NO serializer found');\n\t\t}\n\t\tconst bytes = await serializer.serializer.serializeNotebook(typeConverters.NotebookData.to(data.value), token);\n\t\treturn VSBuffer.wrap(bytes);\n\t}\n\n\tasync $saveNotebook(handle: number, uriComponents: UriComponents, versionId: number, options: files.IWriteFileOptions, token: CancellationToken): Promise<INotebookPartialFileStatsWithMetadata> {\n\t\tconst uri = URI.revive(uriComponents);\n\t\tconst serializer = this._notebookSerializer.get(handle);\n\t\tthis.trace(`enter saveNotebook(versionId: ${versionId}, ${uri.toString()})`);\n\n\t\tif (!serializer) {\n\t\t\tthrow new Error('NO serializer found');\n\t\t}\n\n\t\tconst document = this._documents.get(uri);\n\t\tif (!document) {\n\t\t\tthrow new Error('Document NOT found');\n\t\t}\n\n\t\tif (document.versionId !== versionId) {\n\t\t\tthrow new Error('Document version mismatch');\n\t\t}\n\n\t\tif (!this._extHostFileSystem.value.isWritableFileSystem(uri.scheme)) {\n\t\t\tthrow new files.FileOperationError(localize('err.readonly', \"Unable to modify read-only file '{0}'\", this._resourceForError(uri)), files.FileOperationResult.FILE_PERMISSION_DENIED);\n\t\t}\n\n\t\tconst data: vscode.NotebookData = {\n\t\t\tmetadata: filter(document.apiNotebook.metadata, key => !(serializer.options?.transientDocumentMetadata ?? {})[key]),\n\t\t\tcells: [],\n\t\t};\n\n\t\t// this data must be retrieved before any async calls to ensure the data is for the correct version\n\t\tfor (const cell of document.apiNotebook.getCells()) {\n\t\t\tconst cellData = new extHostTypes.NotebookCellData(\n\t\t\t\tcell.kind,\n\t\t\t\tcell.document.getText(),\n\t\t\t\tcell.document.languageId,\n\t\t\t\tcell.mime,\n\t\t\t\t!(serializer.options?.transientOutputs) ? [...cell.outputs] : [],\n\t\t\t\tcell.metadata,\n\t\t\t\tcell.executionSummary\n\t\t\t);\n\n\t\t\tcellData.metadata = filter(cell.metadata, key => !(serializer.options?.transientCellMetadata ?? {})[key]);\n\t\t\tdata.cells.push(cellData);\n\t\t}\n\n\t\t// validate write\n\t\tawait this._validateWriteFile(uri, options);\n\n\t\tif (token.isCancellationRequested) {\n\t\t\tthrow new Error('canceled');\n\t\t}\n\t\tconst bytes = await serializer.serializer.serializeNotebook(data, token);\n\t\tif (token.isCancellationRequested) {\n\t\t\tthrow new Error('canceled');\n\t\t}\n\n\t\t// Don't accept any cancellation beyond this point, we need to report the result of the file write\n\t\tthis.trace(`serialized versionId: ${versionId} ${uri.toString()}`);\n\t\tawait this._extHostFileSystem.value.writeFile(uri, bytes);\n\t\tthis.trace(`Finished write versionId: ${versionId} ${uri.toString()}`);\n\t\tconst providerExtUri = this._extHostFileSystem.getFileSystemProviderExtUri(uri.scheme);\n\t\tconst stat = await this._extHostFileSystem.value.stat(uri);\n\n\t\tconst fileStats = {\n\t\t\tname: providerExtUri.basename(uri),\n\t\t\tisFile: (stat.type & files.FileType.File) !== 0,\n\t\t\tisDirectory: (stat.type & files.FileType.Directory) !== 0,\n\t\t\tisSymbolicLink: (stat.type & files.FileType.SymbolicLink) !== 0,\n\t\t\tmtime: stat.mtime,\n\t\t\tctime: stat.ctime,\n\t\t\tsize: stat.size,\n\t\t\treadonly: Boolean((stat.permissions ?? 0) & files.FilePermission.Readonly) || !this._extHostFileSystem.value.isWritableFileSystem(uri.scheme),\n\t\t\tlocked: Boolean((stat.permissions ?? 0) & files.FilePermission.Locked),\n\t\t\tetag: files.etag({ mtime: stat.mtime, size: stat.size }),\n\t\t\tchildren: undefined\n\t\t};\n\n\t\tthis.trace(`exit saveNotebook(versionId: ${versionId}, ${uri.toString()})`);\n\t\treturn fileStats;\n\t}\n\n\t/**\n\t * Search for query in all notebooks that can be deserialized by the serializer fetched by `handle`.\n\t *\n\t * @param handle used to get notebook serializer\n\t * @param textQuery the text query to search using\n\t * @param viewTypeFileTargets the globs (and associated ranks) that are targetting for opening this type of notebook\n\t * @param otherViewTypeFileTargets ranked globs for other editors that we should consider when deciding whether it will open as this notebook\n\t * @param token cancellation token\n\t * @returns `IRawClosedNotebookFileMatch` for every file. Files without matches will just have a `IRawClosedNotebookFileMatch`\n\t * \twith no `cellResults`. This allows the caller to know what was searched in already, even if it did not yield results.\n\t */\n\tasync $searchInNotebooks(handle: number, textQuery: ITextQuery, viewTypeFileTargets: NotebookPriorityInfo[], otherViewTypeFileTargets: NotebookPriorityInfo[], token: CancellationToken): Promise<{ results: IRawClosedNotebookFileMatch[]; limitHit: boolean }> {\n\t\tconst serializer = this._notebookSerializer.get(handle)?.serializer;\n\t\tif (!serializer) {\n\t\t\treturn {\n\t\t\t\tlimitHit: false,\n\t\t\t\tresults: []\n\t\t\t};\n\t\t}\n\n\t\tconst finalMatchedTargets = new ResourceSet();\n\n\t\tconst runFileQueries = async (includes: NotebookPriorityInfo[], token: CancellationToken, textQuery: ITextQuery): Promise<void> => {\n\t\t\tawait Promise.all(includes.map(async include =>\n\t\t\t\tawait Promise.all(include.filenamePatterns.map(filePattern => {\n\t\t\t\t\tconst query: IFileQuery = {\n\t\t\t\t\t\t_reason: textQuery._reason,\n\t\t\t\t\t\tfolderQueries: textQuery.folderQueries,\n\t\t\t\t\t\tincludePattern: textQuery.includePattern,\n\t\t\t\t\t\texcludePattern: textQuery.excludePattern,\n\t\t\t\t\t\tmaxResults: textQuery.maxResults,\n\t\t\t\t\t\ttype: QueryType.File,\n\t\t\t\t\t\tfilePattern\n\t\t\t\t\t};\n\n\t\t\t\t\t// use priority info to exclude info from other globs\n\t\t\t\t\treturn this._extHostSearch.doInternalFileSearchWithCustomCallback(query, token, (data) => {\n\t\t\t\t\t\tdata.forEach(uri => {\n\t\t\t\t\t\t\tif (finalMatchedTargets.has(uri)) {\n\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tconst hasOtherMatches = otherViewTypeFileTargets.some(target => {\n\t\t\t\t\t\t\t\t// use the same strategy that the editor service uses to open editors\n\t\t\t\t\t\t\t\t// https://github.com/microsoft/vscode/blob/ac1631528e67637da65ec994c6dc35d73f6e33cc/src/vs/workbench/services/editor/browser/editorResolverService.ts#L359-L366\n\t\t\t\t\t\t\t\tif (include.isFromSettings && !target.isFromSettings) {\n\t\t\t\t\t\t\t\t\t// if the include is from the settings and target isn't, even if it matches, it's still overridden.\n\t\t\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t// longer filePatterns are considered more specifc, so they always have precedence the shorter patterns\n\t\t\t\t\t\t\t\t\treturn target.filenamePatterns.some(targetFilePattern => globMatchesResource(targetFilePattern, uri));\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\tif (hasOtherMatches) {\n\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tfinalMatchedTargets.add(uri);\n\t\t\t\t\t\t});\n\t\t\t\t\t}).catch(err => {\n\t\t\t\t\t\t// temporary fix for https://github.com/microsoft/vscode/issues/205044: don't show notebook results for remotehub repos.\n\t\t\t\t\t\tif (err.code === 'ENOENT') {\n\t\t\t\t\t\t\tconsole.warn(`Could not find notebook search results, ignoring notebook results.`);\n\t\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\tlimitHit: false,\n\t\t\t\t\t\t\t\tmessages: [],\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tthrow err;\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}))\n\t\t\t));\n\t\t\treturn;\n\t\t};\n\n\t\tawait runFileQueries(viewTypeFileTargets, token, textQuery);\n\n\t\tconst results = new ResourceMap<INotebookFileMatchNoModel>();\n\t\tlet limitHit = false;\n\t\tconst promises = Array.from(finalMatchedTargets).map(async (uri) => {\n\t\t\tconst cellMatches: INotebookCellMatchNoModel[] = [];\n\n\t\t\ttry {\n\t\t\t\tif (token.isCancellationRequested) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tif (textQuery.maxResults && [...results.values()].reduce((acc, value) => acc + value.cellResults.length, 0) > textQuery.maxResults) {\n\t\t\t\t\tlimitHit = true;\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst simpleCells: Array<{ input: string; outputs: string[] }> = [];\n\t\t\t\tconst notebook = this._documents.get(uri);\n\t\t\t\tif (notebook) {\n\t\t\t\t\tconst cells = notebook.apiNotebook.getCells();\n\t\t\t\t\tcells.forEach(e => simpleCells.push(\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tinput: e.document.getText(),\n\t\t\t\t\t\t\toutputs: e.outputs.flatMap(value => value.items.map(output => output.data.toString()))\n\t\t\t\t\t\t}\n\t\t\t\t\t));\n\t\t\t\t} else {\n\t\t\t\t\tconst fileContent = await this._extHostFileSystem.value.readFile(uri);\n\t\t\t\t\tconst bytes = VSBuffer.fromString(fileContent.toString());\n\t\t\t\t\tconst notebook = await serializer.deserializeNotebook(bytes.buffer, token);\n\t\t\t\t\tif (token.isCancellationRequested) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\tconst data = typeConverters.NotebookData.from(notebook);\n\n\t\t\t\t\tdata.cells.forEach(cell => simpleCells.push(\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tinput: cell.source,\n\t\t\t\t\t\t\toutputs: cell.outputs.flatMap(value => value.items.map(output => output.valueBytes.toString()))\n\t\t\t\t\t\t}\n\t\t\t\t\t));\n\t\t\t\t}\n\n\n\t\t\t\tif (token.isCancellationRequested) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tsimpleCells.forEach((cell, index) => {\n\t\t\t\t\tconst target = textQuery.contentPattern.pattern;\n\t\t\t\t\tconst cellModel = new CellSearchModel(cell.input, undefined, cell.outputs);\n\n\t\t\t\t\tconst inputMatches = cellModel.findInInputs(target);\n\t\t\t\t\tconst outputMatches = cellModel.findInOutputs(target);\n\t\t\t\t\tconst webviewResults = outputMatches\n\t\t\t\t\t\t.flatMap(outputMatch =>\n\t\t\t\t\t\t\tgenericCellMatchesToTextSearchMatches(outputMatch.matches, outputMatch.textBuffer))\n\t\t\t\t\t\t.map((textMatch, index) => {\n\t\t\t\t\t\t\ttextMatch.webviewIndex = index;\n\t\t\t\t\t\t\treturn textMatch;\n\t\t\t\t\t\t});\n\n\t\t\t\t\tif (inputMatches.length > 0 || outputMatches.length > 0) {\n\t\t\t\t\t\tconst cellMatch: INotebookCellMatchNoModel = {\n\t\t\t\t\t\t\tindex: index,\n\t\t\t\t\t\t\tcontentResults: genericCellMatchesToTextSearchMatches(inputMatches, cellModel.inputTextBuffer),\n\t\t\t\t\t\t\twebviewResults\n\t\t\t\t\t\t};\n\t\t\t\t\t\tcellMatches.push(cellMatch);\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\tconst fileMatch = {\n\t\t\t\t\tresource: uri, cellResults: cellMatches\n\t\t\t\t};\n\t\t\t\tresults.set(uri, fileMatch);\n\t\t\t\treturn;\n\n\t\t\t} catch (e) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t});\n\n\t\tawait Promise.all(promises);\n\t\treturn {\n\t\t\tlimitHit,\n\t\t\tresults: [...results.values()]\n\t\t};\n\t}\n\n\n\n\tprivate async _validateWriteFile(uri: URI, options: files.IWriteFileOptions) {\n\t\tconst stat = await this._extHostFileSystem.value.stat(uri);\n\t\t// Dirty write prevention\n\t\tif (\n\t\t\ttypeof options?.mtime === 'number' && typeof options.etag === 'string' && options.etag !== files.ETAG_DISABLED &&\n\t\t\ttypeof stat.mtime === 'number' && typeof stat.size === 'number' &&\n\t\t\toptions.mtime < stat.mtime && options.etag !== files.etag({ mtime: options.mtime /* not using stat.mtime for a reason, see above */, size: stat.size })\n\t\t) {\n\t\t\tthrow new files.FileOperationError(localize('fileModifiedError', \"File Modified Since\"), files.FileOperationResult.FILE_MODIFIED_SINCE, options);\n\t\t}\n\n\t\treturn;\n\t}\n\n\tprivate _resourceForError(uri: URI): string {\n\t\treturn uri.scheme === Schemas.file ? uri.fsPath : uri.toString();\n\t}\n\n\t// --- open, save, saveAs, backup\n\n\n\tprivate _createExtHostEditor(document: ExtHostNotebookDocument, editorId: string, data: INotebookEditorAddData) {\n\n\t\tif (this._editors.has(editorId)) {\n\t\t\tthrow new Error(`editor with id ALREADY EXSIST: ${editorId}`);\n\t\t}\n\n\t\tconst editor = new ExtHostNotebookEditor(\n\t\t\teditorId,\n\t\t\tthis._notebookEditorsProxy,\n\t\t\tdocument,\n\t\t\tdata.visibleRanges.map(typeConverters.NotebookRange.to),\n\t\t\tdata.selections.map(typeConverters.NotebookRange.to),\n\t\t\ttypeof data.viewColumn === 'number' ? typeConverters.ViewColumn.to(data.viewColumn) : undefined\n\t\t);\n\n\t\tthis._editors.set(editorId, editor);\n\t}\n\n\t$acceptDocumentAndEditorsDelta(delta: SerializableObjectWithBuffers<INotebookDocumentsAndEditorsDelta>): void {\n\n\t\tif (delta.value.removedDocuments) {\n\t\t\tfor (const uri of delta.value.removedDocuments) {\n\t\t\t\tconst revivedUri = URI.revive(uri);\n\t\t\t\tconst document = this._documents.get(revivedUri);\n\n\t\t\t\tif (document) {\n\t\t\t\t\tdocument.dispose();\n\t\t\t\t\tthis._documents.delete(revivedUri);\n\t\t\t\t\tthis._textDocumentsAndEditors.$acceptDocumentsAndEditorsDelta({ removedDocuments: document.apiNotebook.getCells().map(cell => cell.document.uri) });\n\t\t\t\t\tthis._onDidCloseNotebookDocument.fire(document.apiNotebook);\n\t\t\t\t}\n\n\t\t\t\tfor (const editor of this._editors.values()) {\n\t\t\t\t\tif (editor.notebookData.uri.toString() === revivedUri.toString()) {\n\t\t\t\t\t\tthis._editors.delete(editor.id);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (delta.value.addedDocuments) {\n\n\t\t\tconst addedCellDocuments: IModelAddedData[] = [];\n\n\t\t\tfor (const modelData of delta.value.addedDocuments) {\n\t\t\t\tconst uri = URI.revive(modelData.uri);\n\n\t\t\t\tif (this._documents.has(uri)) {\n\t\t\t\t\tthrow new Error(`adding EXISTING notebook ${uri} `);\n\t\t\t\t}\n\n\t\t\t\tconst document = new ExtHostNotebookDocument(\n\t\t\t\t\tthis._notebookDocumentsProxy,\n\t\t\t\t\tthis._textDocumentsAndEditors,\n\t\t\t\t\tthis._textDocuments,\n\t\t\t\t\turi,\n\t\t\t\t\tmodelData\n\t\t\t\t);\n\n\t\t\t\t// add cell document as vscode.TextDocument\n\t\t\t\taddedCellDocuments.push(...modelData.cells.map(cell => ExtHostCell.asModelAddData(cell)));\n\n\t\t\t\tthis._documents.get(uri)?.dispose();\n\t\t\t\tthis._documents.set(uri, document);\n\t\t\t\tthis._textDocumentsAndEditors.$acceptDocumentsAndEditorsDelta({ addedDocuments: addedCellDocuments });\n\n\t\t\t\tthis._onDidOpenNotebookDocument.fire(document.apiNotebook);\n\t\t\t}\n\t\t}\n\n\t\tif (delta.value.addedEditors) {\n\t\t\tfor (const editorModelData of delta.value.addedEditors) {\n\t\t\t\tif (this._editors.has(editorModelData.id)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst revivedUri = URI.revive(editorModelData.documentUri);\n\t\t\t\tconst document = this._documents.get(revivedUri);\n\n\t\t\t\tif (document) {\n\t\t\t\t\tthis._createExtHostEditor(document, editorModelData.id, editorModelData);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tconst removedEditors: ExtHostNotebookEditor[] = [];\n\n\t\tif (delta.value.removedEditors) {\n\t\t\tfor (const editorid of delta.value.removedEditors) {\n\t\t\t\tconst editor = this._editors.get(editorid);\n\n\t\t\t\tif (editor) {\n\t\t\t\t\tthis._editors.delete(editorid);\n\n\t\t\t\t\tif (this._activeNotebookEditor?.id === editor.id) {\n\t\t\t\t\t\tthis._activeNotebookEditor = undefined;\n\t\t\t\t\t}\n\n\t\t\t\t\tremovedEditors.push(editor);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (delta.value.visibleEditors) {\n\t\t\tthis._visibleNotebookEditors = delta.value.visibleEditors.map(id => this._editors.get(id)!).filter(editor => !!editor) as ExtHostNotebookEditor[];\n\t\t\tconst visibleEditorsSet = new Set<string>();\n\t\t\tthis._visibleNotebookEditors.forEach(editor => visibleEditorsSet.add(editor.id));\n\n\t\t\tfor (const editor of this._editors.values()) {\n\t\t\t\tconst newValue = visibleEditorsSet.has(editor.id);\n\t\t\t\teditor._acceptVisibility(newValue);\n\t\t\t}\n\n\t\t\tthis._visibleNotebookEditors = [...this._editors.values()].map(e => e).filter(e => e.visible);\n\t\t\tthis._onDidChangeVisibleNotebookEditors.fire(this.visibleNotebookEditors);\n\t\t}\n\n\t\tif (delta.value.newActiveEditor === null) {\n\t\t\t// clear active notebook as current active editor is non-notebook editor\n\t\t\tthis._activeNotebookEditor = undefined;\n\t\t} else if (delta.value.newActiveEditor) {\n\t\t\tconst activeEditor = this._editors.get(delta.value.newActiveEditor);\n\t\t\tif (!activeEditor) {\n\t\t\t\tconsole.error(`FAILED to find active notebook editor ${delta.value.newActiveEditor}`);\n\t\t\t}\n\t\t\tthis._activeNotebookEditor = this._editors.get(delta.value.newActiveEditor);\n\t\t}\n\t\tif (delta.value.newActiveEditor !== undefined) {\n\t\t\tthis._onDidChangeActiveNotebookEditor.fire(this._activeNotebookEditor?.apiEditor);\n\t\t}\n\t}\n\n\tprivate static _registerApiCommands(extHostCommands: ExtHostCommands) {\n\n\t\tconst notebookTypeArg = ApiCommandArgument.String.with('notebookType', 'A notebook type');\n\n\t\tconst commandDataToNotebook = new ApiCommand(\n\t\t\t'vscode.executeDataToNotebook', '_executeDataToNotebook', 'Invoke notebook serializer',\n\t\t\t[notebookTypeArg, new ApiCommandArgument<Uint8Array, VSBuffer>('data', 'Bytes to convert to data', v => v instanceof Uint8Array, v => VSBuffer.wrap(v))],\n\t\t\tnew ApiCommandResult<SerializableObjectWithBuffers<NotebookDataDto>, vscode.NotebookData>('Notebook Data', data => typeConverters.NotebookData.to(data.value))\n\t\t);\n\n\t\tconst commandNotebookToData = new ApiCommand(\n\t\t\t'vscode.executeNotebookToData', '_executeNotebookToData', 'Invoke notebook serializer',\n\t\t\t[notebookTypeArg, new ApiCommandArgument<vscode.NotebookData, SerializableObjectWithBuffers<NotebookDataDto>>('NotebookData', 'Notebook data to convert to bytes', v => true, v => new SerializableObjectWithBuffers(typeConverters.NotebookData.from(v)))],\n\t\t\tnew ApiCommandResult<VSBuffer, Uint8Array>('Bytes', dto => dto.buffer)\n\t\t);\n\n\t\textHostCommands.registerApiCommand(commandDataToNotebook);\n\t\textHostCommands.registerApiCommand(commandNotebookToData);\n\t}\n\n\tprivate trace(msg: string): void {\n\t\tthis._logService.trace(`[Extension Host Notebook] ${msg}`);\n\t}\n}\n"],
  "mappings": "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",
  "names": ["token", "textQuery", "notebook", "index"]
}
