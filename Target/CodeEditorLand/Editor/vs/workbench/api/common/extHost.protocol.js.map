{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/api/common/extHost.protocol.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport type { TerminalShellExecutionCommandLineConfidence } from \"vscode\";\nimport type { VSBuffer } from \"../../../base/common/buffer.js\";\nimport type { CancellationToken } from \"../../../base/common/cancellation.js\";\nimport type { IRemoteConsoleLog } from \"../../../base/common/console.js\";\nimport type { SerializedError } from \"../../../base/common/errors.js\";\nimport type { IRelativePattern } from \"../../../base/common/glob.js\";\nimport type { IMarkdownString } from \"../../../base/common/htmlContent.js\";\nimport type { IDisposable } from \"../../../base/common/lifecycle.js\";\nimport type * as performance from \"../../../base/common/performance.js\";\nimport type Severity from \"../../../base/common/severity.js\";\nimport type { ThemeColor, ThemeIcon } from \"../../../base/common/themables.js\";\nimport type { URI, UriComponents, UriDto } from \"../../../base/common/uri.js\";\nimport type {\n\tRenderLineNumbersType,\n\tTextEditorCursorStyle,\n} from \"../../../editor/common/config/editorOptions.js\";\nimport type { ISingleEditOperation } from \"../../../editor/common/core/editOperation.js\";\nimport type { IPosition } from \"../../../editor/common/core/position.js\";\nimport type { IRange } from \"../../../editor/common/core/range.js\";\nimport type {\n\tISelection,\n\tSelection,\n} from \"../../../editor/common/core/selection.js\";\nimport type { IChange } from \"../../../editor/common/diff/legacyLinesDiffComputer.js\";\nimport type * as editorCommon from \"../../../editor/common/editorCommon.js\";\nimport type { StandardTokenType } from \"../../../editor/common/encodedTokenAttributes.js\";\nimport type * as languages from \"../../../editor/common/languages.js\";\nimport type {\n\tCharacterPair,\n\tCommentRule,\n\tEnterAction,\n} from \"../../../editor/common/languages/languageConfiguration.js\";\nimport type { EndOfLineSequence } from \"../../../editor/common/model.js\";\nimport type { IModelChangedEvent } from \"../../../editor/common/model/mirrorTextModel.js\";\nimport type { IAccessibilityInformation } from \"../../../platform/accessibility/common/accessibility.js\";\nimport type { ILocalizedString } from \"../../../platform/action/common/action.js\";\nimport type {\n\tConfigurationTarget,\n\tIConfigurationChange,\n\tIConfigurationData,\n\tIConfigurationOverrides,\n} from \"../../../platform/configuration/common/configuration.js\";\nimport type { ConfigurationScope } from \"../../../platform/configuration/common/configurationRegistry.js\";\nimport type { IExtensionIdWithVersion } from \"../../../platform/extensionManagement/common/extensionStorage.js\";\nimport type {\n\tExtensionIdentifier,\n\tIExtensionDescription,\n} from \"../../../platform/extensions/common/extensions.js\";\nimport type * as files from \"../../../platform/files/common/files.js\";\nimport type { ResourceLabelFormatter } from \"../../../platform/label/common/label.js\";\nimport type {\n\tILoggerOptions,\n\tILoggerResource,\n\tLogLevel,\n} from \"../../../platform/log/common/log.js\";\nimport type { IMarkerData } from \"../../../platform/markers/common/markers.js\";\nimport type {\n\tIProgressOptions,\n\tIProgressStep,\n} from \"../../../platform/progress/common/progress.js\";\nimport type * as quickInput from \"../../../platform/quickinput/common/quickInput.js\";\nimport type {\n\tIRemoteConnectionData,\n\tTunnelDescription,\n} from \"../../../platform/remote/common/remoteAuthorityResolver.js\";\nimport type {\n\tAuthInfo,\n\tCredentials,\n} from \"../../../platform/request/common/request.js\";\nimport type {\n\tClassifiedEvent,\n\tIGDPRProperty,\n\tOmitMetadata,\n\tStrictPropertyCheck,\n} from \"../../../platform/telemetry/common/gdprTypings.js\";\nimport type { TelemetryLevel } from \"../../../platform/telemetry/common/telemetry.js\";\nimport type {\n\tISerializableEnvironmentDescriptionMap,\n\tISerializableEnvironmentVariableCollection,\n} from \"../../../platform/terminal/common/environmentVariable.js\";\nimport type {\n\tICreateContributedTerminalProfileOptions,\n\tIProcessProperty,\n\tIProcessReadyWindowsPty,\n\tIShellLaunchConfigDto,\n\tITerminalEnvironment,\n\tITerminalLaunchError,\n\tITerminalProfile,\n\tTerminalExitReason,\n\tTerminalLocation,\n} from \"../../../platform/terminal/common/terminal.js\";\nimport type {\n\tProvidedPortAttributes,\n\tTunnelCreationOptions,\n\tTunnelOptions,\n\tTunnelPrivacyId,\n\tTunnelProviderFeatures,\n} from \"../../../platform/tunnel/common/tunnel.js\";\nimport type { EditSessionIdentityMatch } from \"../../../platform/workspace/common/editSessions.js\";\nimport type { WorkspaceTrustRequestOptions } from \"../../../platform/workspace/common/workspaceTrust.js\";\nimport type { SaveReason } from \"../../common/editor.js\";\nimport type {\n\tIRevealOptions,\n\tITreeItem,\n\tIViewBadge,\n} from \"../../common/views.js\";\nimport type { CallHierarchyItem } from \"../../contrib/callHierarchy/common/callHierarchy.js\";\nimport type {\n\tChatAgentLocation,\n\tIChatAgentMetadata,\n\tIChatAgentRequest,\n\tIChatAgentResult,\n} from \"../../contrib/chat/common/chatAgents.js\";\nimport type { IChatProgressResponseContent } from \"../../contrib/chat/common/chatModel.js\";\nimport type {\n\tIChatFollowup,\n\tIChatProgress,\n\tIChatResponseErrorDetails,\n\tIChatTask,\n\tIChatTaskDto,\n\tIChatUserActionEvent,\n\tIChatVoteAction,\n} from \"../../contrib/chat/common/chatService.js\";\nimport type {\n\tIChatRequestVariableValue,\n\tIChatVariableData,\n\tIChatVariableResolverProgress,\n} from \"../../contrib/chat/common/chatVariables.js\";\nimport type {\n\tIToolData,\n\tIToolInvocation,\n\tIToolResult,\n} from \"../../contrib/chat/common/languageModelToolsService.js\";\nimport type {\n\tIChatMessage,\n\tIChatResponseFragment,\n\tILanguageModelChatMetadata,\n\tILanguageModelChatSelector,\n\tILanguageModelsChangeEvent,\n} from \"../../contrib/chat/common/languageModels.js\";\nimport type {\n\tDebugConfigurationProviderTriggerKind,\n\tIAdapterDescriptor,\n\tIConfig,\n\tIDebugSessionReplMode,\n\tIDebugTestRunReference,\n\tIDebugVisualization,\n\tIDebugVisualizationContext,\n\tIDebugVisualizationTreeItem,\n\tMainThreadDebugVisualization,\n} from \"../../contrib/debug/common/debug.js\";\nimport type * as notebookCommon from \"../../contrib/notebook/common/notebookCommon.js\";\nimport type { CellExecutionUpdateType } from \"../../contrib/notebook/common/notebookExecutionService.js\";\nimport type {\n\tICellExecutionComplete,\n\tICellExecutionStateUpdate,\n} from \"../../contrib/notebook/common/notebookExecutionStateService.js\";\nimport type { ICellRange } from \"../../contrib/notebook/common/notebookRange.js\";\nimport type { InputValidationType } from \"../../contrib/scm/common/scm.js\";\nimport type {\n\tIWorkspaceSymbol,\n\tNotebookPriorityInfo,\n} from \"../../contrib/search/common/search.js\";\nimport type { IRawClosedNotebookFileMatch } from \"../../contrib/search/common/searchNotebookHelpers.js\";\nimport type {\n\tIKeywordRecognitionEvent,\n\tISpeechProviderMetadata,\n\tISpeechToTextEvent,\n\tITextToSpeechEvent,\n} from \"../../contrib/speech/common/speechService.js\";\nimport type {\n\tCoverageDetails,\n\tExtensionRunTestsRequest,\n\tICallProfileRunHandler,\n\tIFileCoverage,\n\tISerializedTestResults,\n\tIStartControllerTests,\n\tITestItem,\n\tITestMessage,\n\tITestRunProfile,\n\tITestRunTask,\n\tResolvedTestRunRequest,\n\tTestControllerCapability,\n\tTestMessageFollowupRequest,\n\tTestMessageFollowupResponse,\n\tTestResultState,\n\tTestsDiffOp,\n} from \"../../contrib/testing/common/testTypes.js\";\nimport type {\n\tTimeline,\n\tTimelineChangeEvent,\n\tTimelineOptions,\n\tTimelineProviderDescriptor,\n} from \"../../contrib/timeline/common/timeline.js\";\nimport type { TypeHierarchyItem } from \"../../contrib/typeHierarchy/common/typeHierarchy.js\";\nimport type {\n\tRelatedInformationResult,\n\tRelatedInformationType,\n} from \"../../services/aiRelatedInformation/common/aiRelatedInformation.js\";\nimport type {\n\tAuthenticationSession,\n\tAuthenticationSessionAccount,\n\tAuthenticationSessionsChangeEvent,\n\tIAuthenticationCreateSessionOptions,\n\tIAuthenticationProviderSessionOptions,\n} from \"../../services/authentication/common/authentication.js\";\nimport type { EditorGroupColumn } from \"../../services/editor/common/editorGroupColumn.js\";\nimport type {\n\tIExtensionDescriptionDelta,\n\tIStaticWorkspaceData,\n} from \"../../services/extensions/common/extensionHostProtocol.js\";\nimport type { IResolveAuthorityResult } from \"../../services/extensions/common/extensionHostProxy.js\";\nimport type {\n\tActivationKind,\n\tExtensionActivationReason,\n\tMissingExtensionDependency,\n} from \"../../services/extensions/common/extensions.js\";\nimport {\n\ttype Dto,\n\ttype IRPCProtocol,\n\ttype SerializableObjectWithBuffers,\n\tcreateProxyIdentifier,\n} from \"../../services/extensions/common/proxyIdentifier.js\";\nimport type { ILanguageStatus } from \"../../services/languageStatus/common/languageStatusService.js\";\nimport type { OutputChannelUpdateMode } from \"../../services/output/common/output.js\";\nimport type { CandidatePort } from \"../../services/remote/common/tunnelModel.js\";\nimport type {\n\tIFileQueryBuilderOptions,\n\tITextQueryBuilderOptions,\n} from \"../../services/search/common/queryBuilder.js\";\nimport type * as search from \"../../services/search/common/search.js\";\nimport type { TextSearchCompleteMessage } from \"../../services/search/common/searchExtTypes.js\";\nimport type { ISaveProfileResult } from \"../../services/userDataProfile/common/userDataProfile.js\";\nimport type * as tasks from \"./shared/tasks.js\";\n\nexport interface IWorkspaceData extends IStaticWorkspaceData {\n\tfolders: { uri: UriComponents; name: string; index: number }[];\n}\n\nexport interface IConfigurationInitData extends IConfigurationData {\n\tconfigurationScopes: [string, ConfigurationScope | undefined][];\n}\n\nexport interface IMainContext extends IRPCProtocol {}\n\n// --- main thread\n\nexport interface MainThreadClipboardShape extends IDisposable {\n\t$readText(): Promise<string>;\n\t$writeText(value: string): Promise<void>;\n}\n\nexport interface MainThreadCommandsShape extends IDisposable {\n\t$registerCommand(id: string): void;\n\t$unregisterCommand(id: string): void;\n\t$fireCommandActivationEvent(id: string): void;\n\t$executeCommand(\n\t\tid: string,\n\t\targs: any[] | SerializableObjectWithBuffers<any[]>,\n\t\tretry: boolean,\n\t): Promise<unknown | undefined>;\n\t$getCommands(): Promise<string[]>;\n}\n\nexport interface CommentProviderFeatures {\n\treactionGroup?: languages.CommentReaction[];\n\treactionHandler?: boolean;\n\toptions?: languages.CommentOptions;\n}\n\nexport interface CommentChanges {\n\treadonly uniqueIdInThread: number;\n\treadonly body: string | IMarkdownString;\n\treadonly userName: string;\n\treadonly userIconPath?: UriComponents;\n\treadonly contextValue?: string;\n\treadonly commentReactions?: languages.CommentReaction[];\n\treadonly label?: string;\n\treadonly mode?: languages.CommentMode;\n\treadonly state?: languages.CommentState;\n\treadonly timestamp?: string;\n}\n\nexport type CommentThreadChanges<T = IRange> = Partial<{\n\trange: T | undefined;\n\tlabel: string;\n\tcontextValue: string | null;\n\tcomments: CommentChanges[];\n\tcollapseState: languages.CommentThreadCollapsibleState;\n\tcanReply: boolean;\n\tstate: languages.CommentThreadState;\n\tapplicability: languages.CommentThreadApplicability;\n\tisTemplate: boolean;\n}>;\n\nexport interface MainThreadCommentsShape extends IDisposable {\n\t$registerCommentController(\n\t\thandle: number,\n\t\tid: string,\n\t\tlabel: string,\n\t\textensionId: string,\n\t): void;\n\t$unregisterCommentController(handle: number): void;\n\t$updateCommentControllerFeatures(\n\t\thandle: number,\n\t\tfeatures: CommentProviderFeatures,\n\t): void;\n\t$createCommentThread(\n\t\thandle: number,\n\t\tcommentThreadHandle: number,\n\t\tthreadId: string,\n\t\tresource: UriComponents,\n\t\trange: IRange | ICellRange | undefined,\n\t\tcomments: languages.Comment[],\n\t\textensionId: ExtensionIdentifier,\n\t\tisTemplate: boolean,\n\t\teditorId?: string,\n\t): languages.CommentThread<IRange | ICellRange> | undefined;\n\t$updateCommentThread(\n\t\thandle: number,\n\t\tcommentThreadHandle: number,\n\t\tthreadId: string,\n\t\tresource: UriComponents,\n\t\tchanges: CommentThreadChanges,\n\t): void;\n\t$deleteCommentThread(handle: number, commentThreadHandle: number): void;\n\t$updateCommentingRanges(\n\t\thandle: number,\n\t\tresourceHints?: languages.CommentingRangeResourceHint,\n\t): void;\n\t$revealCommentThread(\n\t\thandle: number,\n\t\tcommentThreadHandle: number,\n\t\tcommentUniqueIdInThread: number,\n\t\toptions: languages.CommentThreadRevealOptions,\n\t): Promise<void>;\n\t$hideCommentThread(handle: number, commentThreadHandle: number): void;\n}\n\nexport interface AuthenticationForceNewSessionOptions {\n\tdetail?: string;\n\tsessionToRecreate?: AuthenticationSession;\n}\n\nexport interface MainThreadAuthenticationShape extends IDisposable {\n\t$registerAuthenticationProvider(\n\t\tid: string,\n\t\tlabel: string,\n\t\tsupportsMultipleAccounts: boolean,\n\t): void;\n\t$unregisterAuthenticationProvider(id: string): void;\n\t$ensureProvider(id: string): Promise<void>;\n\t$sendDidChangeSessions(\n\t\tproviderId: string,\n\t\tevent: AuthenticationSessionsChangeEvent,\n\t): void;\n\t$getSession(\n\t\tproviderId: string,\n\t\tscopes: readonly string[],\n\t\textensionId: string,\n\t\textensionName: string,\n\t\toptions: {\n\t\t\tcreateIfNone?: boolean;\n\t\t\tforceNewSession?: boolean | AuthenticationForceNewSessionOptions;\n\t\t\tclearSessionPreference?: boolean;\n\t\t},\n\t): Promise<AuthenticationSession | undefined>;\n\t$getAccounts(\n\t\tproviderId: string,\n\t): Promise<ReadonlyArray<AuthenticationSessionAccount>>;\n\t$removeSession(providerId: string, sessionId: string): Promise<void>;\n}\n\nexport interface MainThreadSecretStateShape extends IDisposable {\n\t$getPassword(extensionId: string, key: string): Promise<string | undefined>;\n\t$setPassword(\n\t\textensionId: string,\n\t\tkey: string,\n\t\tvalue: string,\n\t): Promise<void>;\n\t$deletePassword(extensionId: string, key: string): Promise<void>;\n}\n\nexport interface MainThreadConfigurationShape extends IDisposable {\n\t$updateConfigurationOption(\n\t\ttarget: ConfigurationTarget | null,\n\t\tkey: string,\n\t\tvalue: any,\n\t\toverrides: IConfigurationOverrides | undefined,\n\t\tscopeToLanguage: boolean | undefined,\n\t): Promise<void>;\n\t$removeConfigurationOption(\n\t\ttarget: ConfigurationTarget | null,\n\t\tkey: string,\n\t\toverrides: IConfigurationOverrides | undefined,\n\t\tscopeToLanguage: boolean | undefined,\n\t): Promise<void>;\n}\n\nexport interface MainThreadDiagnosticsShape extends IDisposable {\n\t$changeMany(\n\t\towner: string,\n\t\tentries: [UriComponents, IMarkerData[] | undefined][],\n\t): void;\n\t$clear(owner: string): void;\n}\n\nexport interface MainThreadDialogOpenOptions {\n\tdefaultUri?: UriComponents;\n\topenLabel?: string;\n\tcanSelectFiles?: boolean;\n\tcanSelectFolders?: boolean;\n\tcanSelectMany?: boolean;\n\tfilters?: { [name: string]: string[] };\n\ttitle?: string;\n\tallowUIResources?: boolean;\n}\n\nexport interface MainThreadDialogSaveOptions {\n\tdefaultUri?: UriComponents;\n\tsaveLabel?: string;\n\tfilters?: { [name: string]: string[] };\n\ttitle?: string;\n}\n\nexport interface MainThreadDiaglogsShape extends IDisposable {\n\t$showOpenDialog(\n\t\toptions?: MainThreadDialogOpenOptions,\n\t): Promise<UriComponents[] | undefined>;\n\t$showSaveDialog(\n\t\toptions?: MainThreadDialogSaveOptions,\n\t): Promise<UriComponents | undefined>;\n}\n\nexport interface MainThreadDecorationsShape extends IDisposable {\n\t$registerDecorationProvider(handle: number, label: string): void;\n\t$unregisterDecorationProvider(handle: number): void;\n\t$onDidChange(handle: number, resources: UriComponents[] | null): void;\n}\n\nexport interface MainThreadDocumentContentProvidersShape extends IDisposable {\n\t$registerTextContentProvider(handle: number, scheme: string): void;\n\t$unregisterTextContentProvider(handle: number): void;\n\t$onVirtualDocumentChange(uri: UriComponents, value: string): Promise<void>;\n}\n\nexport interface MainThreadDocumentsShape extends IDisposable {\n\t$tryCreateDocument(options?: {\n\t\tlanguage?: string;\n\t\tcontent?: string;\n\t}): Promise<UriComponents>;\n\t$tryOpenDocument(uri: UriComponents): Promise<UriComponents>;\n\t$trySaveDocument(uri: UriComponents): Promise<boolean>;\n}\n\nexport interface ITextEditorConfigurationUpdate {\n\ttabSize?: number | \"auto\";\n\tindentSize?: number | \"tabSize\";\n\tinsertSpaces?: boolean | \"auto\";\n\tcursorStyle?: TextEditorCursorStyle;\n\tlineNumbers?: RenderLineNumbersType;\n}\n\nexport interface IResolvedTextEditorConfiguration {\n\ttabSize: number;\n\tindentSize: number;\n\toriginalIndentSize: number | \"tabSize\";\n\tinsertSpaces: boolean;\n\tcursorStyle: TextEditorCursorStyle;\n\tlineNumbers: RenderLineNumbersType;\n}\n\nexport enum TextEditorRevealType {\n\tDefault = 0,\n\tInCenter = 1,\n\tInCenterIfOutsideViewport = 2,\n\tAtTop = 3,\n}\n\nexport interface IUndoStopOptions {\n\tundoStopBefore: boolean;\n\tundoStopAfter: boolean;\n}\n\nexport interface IApplyEditsOptions extends IUndoStopOptions {\n\tsetEndOfLine?: EndOfLineSequence;\n}\n\nexport interface ITextDocumentShowOptions {\n\tposition?: EditorGroupColumn;\n\tpreserveFocus?: boolean;\n\tpinned?: boolean;\n\tselection?: IRange;\n}\n\nexport interface MainThreadBulkEditsShape extends IDisposable {\n\t$tryApplyWorkspaceEdit(\n\t\tworkspaceEditDto: SerializableObjectWithBuffers<IWorkspaceEditDto>,\n\t\tundoRedoGroupId?: number,\n\t\trespectAutoSaveConfig?: boolean,\n\t): Promise<boolean>;\n}\n\nexport interface MainThreadTextEditorsShape extends IDisposable {\n\t$tryShowTextDocument(\n\t\tresource: UriComponents,\n\t\toptions: ITextDocumentShowOptions,\n\t): Promise<string | undefined>;\n\t$registerTextEditorDecorationType(\n\t\textensionId: ExtensionIdentifier,\n\t\tkey: string,\n\t\toptions: editorCommon.IDecorationRenderOptions,\n\t): void;\n\t$removeTextEditorDecorationType(key: string): void;\n\t$tryShowEditor(id: string, position: EditorGroupColumn): Promise<void>;\n\t$tryHideEditor(id: string): Promise<void>;\n\t$trySetOptions(\n\t\tid: string,\n\t\toptions: ITextEditorConfigurationUpdate,\n\t): Promise<void>;\n\t$trySetDecorations(\n\t\tid: string,\n\t\tkey: string,\n\t\tranges: editorCommon.IDecorationOptions[],\n\t): Promise<void>;\n\t$trySetDecorationsFast(\n\t\tid: string,\n\t\tkey: string,\n\t\tranges: number[],\n\t): Promise<void>;\n\t$tryRevealRange(\n\t\tid: string,\n\t\trange: IRange,\n\t\trevealType: TextEditorRevealType,\n\t): Promise<void>;\n\t$trySetSelections(id: string, selections: ISelection[]): Promise<void>;\n\t$tryApplyEdits(\n\t\tid: string,\n\t\tmodelVersionId: number,\n\t\tedits: ISingleEditOperation[],\n\t\topts: IApplyEditsOptions,\n\t): Promise<boolean>;\n\t$tryInsertSnippet(\n\t\tid: string,\n\t\tmodelVersionId: number,\n\t\ttemplate: string,\n\t\tselections: readonly IRange[],\n\t\topts: IUndoStopOptions,\n\t): Promise<boolean>;\n\t$getDiffInformation(id: string): Promise<IChange[]>;\n}\n\nexport interface MainThreadTreeViewsShape extends IDisposable {\n\t$registerTreeViewDataProvider(\n\t\ttreeViewId: string,\n\t\toptions: {\n\t\t\tshowCollapseAll: boolean;\n\t\t\tcanSelectMany: boolean;\n\t\t\tdropMimeTypes: readonly string[];\n\t\t\tdragMimeTypes: readonly string[];\n\t\t\thasHandleDrag: boolean;\n\t\t\thasHandleDrop: boolean;\n\t\t\tmanuallyManageCheckboxes: boolean;\n\t\t},\n\t): Promise<void>;\n\t$refresh(\n\t\ttreeViewId: string,\n\t\titemsToRefresh?: { [treeItemHandle: string]: ITreeItem },\n\t): Promise<void>;\n\t$reveal(\n\t\ttreeViewId: string,\n\t\titemInfo: { item: ITreeItem; parentChain: ITreeItem[] } | undefined,\n\t\toptions: IRevealOptions,\n\t): Promise<void>;\n\t$setMessage(treeViewId: string, message: string | IMarkdownString): void;\n\t$setTitle(\n\t\ttreeViewId: string,\n\t\ttitle: string,\n\t\tdescription: string | undefined,\n\t): void;\n\t$setBadge(treeViewId: string, badge: IViewBadge | undefined): void;\n\t$resolveDropFileData(\n\t\tdestinationViewId: string,\n\t\trequestId: number,\n\t\tdataItemId: string,\n\t): Promise<VSBuffer>;\n\t$disposeTree(treeViewId: string): Promise<void>;\n}\n\nexport interface MainThreadDownloadServiceShape extends IDisposable {\n\t$download(uri: UriComponents, to: UriComponents): Promise<void>;\n}\n\nexport interface MainThreadErrorsShape extends IDisposable {\n\t$onUnexpectedError(err: any | SerializedError): void;\n}\n\nexport interface MainThreadConsoleShape extends IDisposable {\n\t$logExtensionHostMessage(msg: IRemoteConsoleLog): void;\n}\n\nexport interface IRegExpDto {\n\tpattern: string;\n\tflags?: string;\n}\nexport interface IIndentationRuleDto {\n\tdecreaseIndentPattern: IRegExpDto;\n\tincreaseIndentPattern: IRegExpDto;\n\tindentNextLinePattern?: IRegExpDto;\n\tunIndentedLinePattern?: IRegExpDto;\n}\nexport interface IOnEnterRuleDto {\n\tbeforeText: IRegExpDto;\n\tafterText?: IRegExpDto;\n\tpreviousLineText?: IRegExpDto;\n\taction: EnterAction;\n}\nexport interface ILanguageConfigurationDto {\n\tcomments?: CommentRule;\n\tbrackets?: CharacterPair[];\n\twordPattern?: IRegExpDto;\n\tindentationRules?: IIndentationRuleDto;\n\tonEnterRules?: IOnEnterRuleDto[];\n\t__electricCharacterSupport?: {\n\t\tbrackets?: any;\n\t\tdocComment?: {\n\t\t\tscope: string;\n\t\t\topen: string;\n\t\t\tlineStart: string;\n\t\t\tclose?: string;\n\t\t};\n\t};\n\t__characterPairSupport?: {\n\t\tautoClosingPairs: {\n\t\t\topen: string;\n\t\t\tclose: string;\n\t\t\tnotIn?: string[];\n\t\t}[];\n\t};\n\tautoClosingPairs?: {\n\t\topen: string;\n\t\tclose: string;\n\t\tnotIn?: string[];\n\t}[];\n}\n\nexport type GlobPattern = string | IRelativePattern;\n\nexport interface IRelativePatternDto extends IRelativePattern {\n\tbaseUri: UriComponents;\n}\n\nexport interface IDocumentFilterDto {\n\t$serialized: true;\n\tlanguage?: string;\n\tscheme?: string;\n\tpattern?: string | IRelativePattern;\n\texclusive?: boolean;\n\tnotebookType?: string;\n\tisBuiltin?: boolean;\n}\n\nexport interface IShareableItemDto {\n\tresourceUri: UriComponents;\n\tselection?: IRange;\n}\n\nexport interface IDocumentContextItemDto {\n\treadonly uri: UriComponents;\n\treadonly version: number;\n\treadonly ranges: IRange[];\n}\n\nexport interface IConversationItemDto {\n\treadonly type: \"request\" | \"response\";\n\treadonly message: string;\n\treadonly references?: IDocumentContextItemDto[];\n}\n\nexport interface IMappedEditsContextDto {\n\tdocuments: IDocumentContextItemDto[][];\n\tconversation?: IConversationItemDto[];\n}\n\nexport interface ISignatureHelpProviderMetadataDto {\n\treadonly triggerCharacters: readonly string[];\n\treadonly retriggerCharacters: readonly string[];\n}\n\nexport interface IdentifiableInlineCompletions\n\textends languages.InlineCompletions<IdentifiableInlineCompletion> {\n\tpid: number;\n}\n\nexport interface IdentifiableInlineCompletion\n\textends languages.InlineCompletion {\n\tidx: number;\n}\n\nexport interface IdentifiableInlineEdit extends languages.IInlineEdit {\n\tpid: number;\n}\n\nexport interface MainThreadLanguageFeaturesShape extends IDisposable {\n\t$unregister(handle: number): void;\n\t$registerDocumentSymbolProvider(\n\t\thandle: number,\n\t\tselector: IDocumentFilterDto[],\n\t\tlabel: string,\n\t): void;\n\t$registerCodeLensSupport(\n\t\thandle: number,\n\t\tselector: IDocumentFilterDto[],\n\t\teventHandle: number | undefined,\n\t): void;\n\t$emitCodeLensEvent(eventHandle: number, event?: any): void;\n\t$registerDefinitionSupport(\n\t\thandle: number,\n\t\tselector: IDocumentFilterDto[],\n\t): void;\n\t$registerDeclarationSupport(\n\t\thandle: number,\n\t\tselector: IDocumentFilterDto[],\n\t): void;\n\t$registerImplementationSupport(\n\t\thandle: number,\n\t\tselector: IDocumentFilterDto[],\n\t): void;\n\t$registerTypeDefinitionSupport(\n\t\thandle: number,\n\t\tselector: IDocumentFilterDto[],\n\t): void;\n\t$registerHoverProvider(\n\t\thandle: number,\n\t\tselector: IDocumentFilterDto[],\n\t): void;\n\t$registerEvaluatableExpressionProvider(\n\t\thandle: number,\n\t\tselector: IDocumentFilterDto[],\n\t): void;\n\t$registerInlineValuesProvider(\n\t\thandle: number,\n\t\tselector: IDocumentFilterDto[],\n\t\teventHandle: number | undefined,\n\t): void;\n\t$emitInlineValuesEvent(eventHandle: number, event?: any): void;\n\t$registerDocumentHighlightProvider(\n\t\thandle: number,\n\t\tselector: IDocumentFilterDto[],\n\t): void;\n\t$registerMultiDocumentHighlightProvider(\n\t\thandle: number,\n\t\tselector: IDocumentFilterDto[],\n\t): void;\n\t$registerLinkedEditingRangeProvider(\n\t\thandle: number,\n\t\tselector: IDocumentFilterDto[],\n\t): void;\n\t$registerReferenceSupport(\n\t\thandle: number,\n\t\tselector: IDocumentFilterDto[],\n\t): void;\n\t$registerCodeActionSupport(\n\t\thandle: number,\n\t\tselector: IDocumentFilterDto[],\n\t\tmetadata: ICodeActionProviderMetadataDto,\n\t\tdisplayName: string,\n\t\textensionID: string,\n\t\tsupportsResolve: boolean,\n\t): void;\n\t$registerPasteEditProvider(\n\t\thandle: number,\n\t\tselector: IDocumentFilterDto[],\n\t\tmetadata: IPasteEditProviderMetadataDto,\n\t): void;\n\t$registerDocumentFormattingSupport(\n\t\thandle: number,\n\t\tselector: IDocumentFilterDto[],\n\t\textensionId: ExtensionIdentifier,\n\t\tdisplayName: string,\n\t): void;\n\t$registerRangeFormattingSupport(\n\t\thandle: number,\n\t\tselector: IDocumentFilterDto[],\n\t\textensionId: ExtensionIdentifier,\n\t\tdisplayName: string,\n\t\tsupportRanges: boolean,\n\t): void;\n\t$registerOnTypeFormattingSupport(\n\t\thandle: number,\n\t\tselector: IDocumentFilterDto[],\n\t\tautoFormatTriggerCharacters: string[],\n\t\textensionId: ExtensionIdentifier,\n\t): void;\n\t$registerNavigateTypeSupport(\n\t\thandle: number,\n\t\tsupportsResolve: boolean,\n\t): void;\n\t$registerRenameSupport(\n\t\thandle: number,\n\t\tselector: IDocumentFilterDto[],\n\t\tsupportsResolveInitialValues: boolean,\n\t): void;\n\t$registerNewSymbolNamesProvider(\n\t\thandle: number,\n\t\tselector: IDocumentFilterDto[],\n\t): void;\n\t$registerDocumentSemanticTokensProvider(\n\t\thandle: number,\n\t\tselector: IDocumentFilterDto[],\n\t\tlegend: languages.SemanticTokensLegend,\n\t\teventHandle: number | undefined,\n\t): void;\n\t$emitDocumentSemanticTokensEvent(eventHandle: number): void;\n\t$registerDocumentRangeSemanticTokensProvider(\n\t\thandle: number,\n\t\tselector: IDocumentFilterDto[],\n\t\tlegend: languages.SemanticTokensLegend,\n\t): void;\n\t$registerCompletionsProvider(\n\t\thandle: number,\n\t\tselector: IDocumentFilterDto[],\n\t\ttriggerCharacters: string[],\n\t\tsupportsResolveDetails: boolean,\n\t\textensionId: ExtensionIdentifier,\n\t): void;\n\t$registerInlineCompletionsSupport(\n\t\thandle: number,\n\t\tselector: IDocumentFilterDto[],\n\t\tsupportsHandleDidShowCompletionItem: boolean,\n\t\textensionId: string,\n\t\tyieldsToExtensionIds: string[],\n\t): void;\n\t$registerInlineEditProvider(\n\t\thandle: number,\n\t\tselector: IDocumentFilterDto[],\n\t\textensionId: ExtensionIdentifier,\n\t): void;\n\t$registerSignatureHelpProvider(\n\t\thandle: number,\n\t\tselector: IDocumentFilterDto[],\n\t\tmetadata: ISignatureHelpProviderMetadataDto,\n\t): void;\n\t$registerInlayHintsProvider(\n\t\thandle: number,\n\t\tselector: IDocumentFilterDto[],\n\t\tsupportsResolve: boolean,\n\t\teventHandle: number | undefined,\n\t\tdisplayName: string | undefined,\n\t): void;\n\t$emitInlayHintsEvent(eventHandle: number): void;\n\t$registerDocumentLinkProvider(\n\t\thandle: number,\n\t\tselector: IDocumentFilterDto[],\n\t\tsupportsResolve: boolean,\n\t): void;\n\t$registerDocumentColorProvider(\n\t\thandle: number,\n\t\tselector: IDocumentFilterDto[],\n\t): void;\n\t$registerFoldingRangeProvider(\n\t\thandle: number,\n\t\tselector: IDocumentFilterDto[],\n\t\textensionId: ExtensionIdentifier,\n\t\teventHandle: number | undefined,\n\t): void;\n\t$emitFoldingRangeEvent(eventHandle: number, event?: any): void;\n\t$registerSelectionRangeProvider(\n\t\thandle: number,\n\t\tselector: IDocumentFilterDto[],\n\t): void;\n\t$registerCallHierarchyProvider(\n\t\thandle: number,\n\t\tselector: IDocumentFilterDto[],\n\t): void;\n\t$registerTypeHierarchyProvider(\n\t\thandle: number,\n\t\tselector: IDocumentFilterDto[],\n\t): void;\n\t$registerDocumentOnDropEditProvider(\n\t\thandle: number,\n\t\tselector: IDocumentFilterDto[],\n\t\tmetadata?: IDocumentDropEditProviderMetadata,\n\t): void;\n\t$resolvePasteFileData(\n\t\thandle: number,\n\t\trequestId: number,\n\t\tdataId: string,\n\t): Promise<VSBuffer>;\n\t$resolveDocumentOnDropFileData(\n\t\thandle: number,\n\t\trequestId: number,\n\t\tdataId: string,\n\t): Promise<VSBuffer>;\n\t$setLanguageConfiguration(\n\t\thandle: number,\n\t\tlanguageId: string,\n\t\tconfiguration: ILanguageConfigurationDto,\n\t): void;\n\t$registerMappedEditsProvider(\n\t\thandle: number,\n\t\tselector: IDocumentFilterDto[],\n\t\tdisplayName: string,\n\t): void;\n}\n\nexport interface MainThreadLanguagesShape extends IDisposable {\n\t$changeLanguage(resource: UriComponents, languageId: string): Promise<void>;\n\t$tokensAtPosition(\n\t\tresource: UriComponents,\n\t\tposition: IPosition,\n\t): Promise<undefined | { type: StandardTokenType; range: IRange }>;\n\t$setLanguageStatus(handle: number, status: ILanguageStatus): void;\n\t$removeLanguageStatus(handle: number): void;\n}\n\nexport interface MainThreadMessageOptions {\n\tsource?: { identifier: ExtensionIdentifier; label: string };\n\tmodal?: boolean;\n\tdetail?: string;\n\tuseCustom?: boolean;\n}\n\nexport interface MainThreadMessageServiceShape extends IDisposable {\n\t$showMessage(\n\t\tseverity: Severity,\n\t\tmessage: string,\n\t\toptions: MainThreadMessageOptions,\n\t\tcommands: {\n\t\t\ttitle: string;\n\t\t\tisCloseAffordance: boolean;\n\t\t\thandle: number;\n\t\t}[],\n\t): Promise<number | undefined>;\n}\n\nexport interface MainThreadOutputServiceShape extends IDisposable {\n\t$register(\n\t\tlabel: string,\n\t\tfile: UriComponents,\n\t\tlanguageId: string | undefined,\n\t\textensionId: string,\n\t): Promise<string>;\n\t$update(\n\t\tchannelId: string,\n\t\tmode: OutputChannelUpdateMode,\n\t\ttill?: number,\n\t): Promise<void>;\n\t$reveal(channelId: string, preserveFocus: boolean): Promise<void>;\n\t$close(channelId: string): Promise<void>;\n\t$dispose(channelId: string): Promise<void>;\n}\n\nexport interface MainThreadProgressShape extends IDisposable {\n\t$startProgress(\n\t\thandle: number,\n\t\toptions: IProgressOptions,\n\t\textensionId?: string,\n\t): Promise<void>;\n\t$progressReport(handle: number, message: IProgressStep): void;\n\t$progressEnd(handle: number): void;\n}\n\n/**\n * A terminal that is created on the extension host side is temporarily assigned\n * a UUID by the extension host that created it. Once the renderer side has assigned\n * a real numeric id, the numeric id will be used.\n *\n * All other terminals (that are not created on the extension host side) always\n * use the numeric id.\n */\nexport type ExtHostTerminalIdentifier = number | string;\n\nexport interface TerminalLaunchConfig {\n\tname?: string;\n\tshellPath?: string;\n\tshellArgs?: string[] | string;\n\tcwd?: string | UriComponents;\n\tenv?: ITerminalEnvironment;\n\ticon?: URI | { light: URI; dark: URI } | ThemeIcon;\n\tcolor?: string;\n\tinitialText?: string;\n\twaitOnExit?: boolean;\n\tstrictEnv?: boolean;\n\thideFromUser?: boolean;\n\tisExtensionCustomPtyTerminal?: boolean;\n\tforceShellIntegration?: boolean;\n\tisFeatureTerminal?: boolean;\n\tisExtensionOwnedTerminal?: boolean;\n\tuseShellEnvironment?: boolean;\n\tlocation?:\n\t\t| TerminalLocation\n\t\t| { viewColumn: number; preserveFocus?: boolean }\n\t\t| { parentTerminal: ExtHostTerminalIdentifier }\n\t\t| { splitActiveTerminal: boolean };\n\tisTransient?: boolean;\n}\n\nexport interface MainThreadTerminalServiceShape extends IDisposable {\n\t$createTerminal(\n\t\textHostTerminalId: string,\n\t\tconfig: TerminalLaunchConfig,\n\t): Promise<void>;\n\t$dispose(id: ExtHostTerminalIdentifier): void;\n\t$hide(id: ExtHostTerminalIdentifier): void;\n\t$sendText(\n\t\tid: ExtHostTerminalIdentifier,\n\t\ttext: string,\n\t\tshouldExecute: boolean,\n\t): void;\n\t$show(id: ExtHostTerminalIdentifier, preserveFocus: boolean): void;\n\t$registerProcessSupport(isSupported: boolean): void;\n\t$registerProfileProvider(id: string, extensionIdentifier: string): void;\n\t$unregisterProfileProvider(id: string): void;\n\t$registerQuickFixProvider(id: string, extensionIdentifier: string): void;\n\t$unregisterQuickFixProvider(id: string): void;\n\t$setEnvironmentVariableCollection(\n\t\textensionIdentifier: string,\n\t\tpersistent: boolean,\n\t\tcollection: ISerializableEnvironmentVariableCollection | undefined,\n\t\tdescriptionMap: ISerializableEnvironmentDescriptionMap,\n\t): void;\n\n\t// Optional event toggles\n\t$startSendingDataEvents(): void;\n\t$stopSendingDataEvents(): void;\n\t$startSendingCommandEvents(): void;\n\t$stopSendingCommandEvents(): void;\n\t$startLinkProvider(): void;\n\t$stopLinkProvider(): void;\n\n\t// Process\n\t$sendProcessData(terminalId: number, data: string): void;\n\t$sendProcessReady(\n\t\tterminalId: number,\n\t\tpid: number,\n\t\tcwd: string,\n\t\twindowsPty: IProcessReadyWindowsPty | undefined,\n\t): void;\n\t$sendProcessProperty(\n\t\tterminalId: number,\n\t\tproperty: IProcessProperty<any>,\n\t): void;\n\t$sendProcessExit(terminalId: number, exitCode: number | undefined): void;\n}\n\nexport interface MainThreadTerminalShellIntegrationShape extends IDisposable {\n\t$executeCommand(terminalId: number, commandLine: string): void;\n}\n\nexport type TransferQuickPickItemOrSeparator =\n\t| TransferQuickPickItem\n\t| quickInput.IQuickPickSeparator;\nexport interface TransferQuickPickItem {\n\thandle: number;\n\n\t// shared properties from IQuickPickItem\n\ttype?: \"item\";\n\tlabel: string;\n\ticonPath?: { light?: URI; dark: URI };\n\ticonClass?: string;\n\tdescription?: string;\n\tdetail?: string;\n\tpicked?: boolean;\n\talwaysShow?: boolean;\n\tbuttons?: TransferQuickInputButton[];\n}\n\nexport interface TransferQuickInputButton extends quickInput.IQuickInputButton {\n\thandle: number;\n}\n\nexport type TransferQuickInput = TransferQuickPick | TransferInputBox;\n\nexport interface BaseTransferQuickInput {\n\t[key: string]: any;\n\n\tid: number;\n\n\ttitle?: string;\n\n\ttype?: \"quickPick\" | \"inputBox\";\n\n\tenabled?: boolean;\n\n\tbusy?: boolean;\n\n\tvisible?: boolean;\n}\n\nexport interface TransferQuickPick extends BaseTransferQuickInput {\n\ttype?: \"quickPick\";\n\n\tvalue?: string;\n\n\tplaceholder?: string;\n\n\tbuttons?: TransferQuickInputButton[];\n\n\titems?: TransferQuickPickItemOrSeparator[];\n\n\tactiveItems?: number[];\n\n\tselectedItems?: number[];\n\n\tcanSelectMany?: boolean;\n\n\tignoreFocusOut?: boolean;\n\n\tmatchOnDescription?: boolean;\n\n\tmatchOnDetail?: boolean;\n\n\tsortByLabel?: boolean;\n}\n\nexport interface TransferInputBox extends BaseTransferQuickInput {\n\ttype?: \"inputBox\";\n\n\tvalue?: string;\n\n\tvalueSelection?: Readonly<[number, number]>;\n\n\tplaceholder?: string;\n\n\tpassword?: boolean;\n\n\tbuttons?: TransferQuickInputButton[];\n\n\tprompt?: string;\n\n\tvalidationMessage?: string;\n}\n\nexport interface IInputBoxOptions {\n\ttitle?: string;\n\tvalue?: string;\n\tvalueSelection?: Readonly<[number, number]>;\n\tprompt?: string;\n\tplaceHolder?: string;\n\tpassword?: boolean;\n\tignoreFocusOut?: boolean;\n}\n\nexport interface MainThreadQuickOpenShape extends IDisposable {\n\t$show(\n\t\tinstance: number,\n\t\toptions: quickInput.IPickOptions<TransferQuickPickItem>,\n\t\ttoken: CancellationToken,\n\t): Promise<number | number[] | undefined>;\n\t$setItems(\n\t\tinstance: number,\n\t\titems: TransferQuickPickItemOrSeparator[],\n\t): Promise<void>;\n\t$setError(instance: number, error: Error): Promise<void>;\n\t$input(\n\t\toptions: IInputBoxOptions | undefined,\n\t\tvalidateInput: boolean,\n\t\ttoken: CancellationToken,\n\t): Promise<string | undefined>;\n\t$createOrUpdate(params: TransferQuickInput): Promise<void>;\n\t$dispose(id: number): Promise<void>;\n}\n\nexport interface MainThreadStatusBarShape extends IDisposable {\n\t$setEntry(\n\t\tid: string,\n\t\tstatusId: string,\n\t\textensionId: string | undefined,\n\t\tstatusName: string,\n\t\ttext: string,\n\t\ttooltip: IMarkdownString | string | undefined,\n\t\tcommand: ICommandDto | undefined,\n\t\tcolor: string | ThemeColor | undefined,\n\t\tbackgroundColor: string | ThemeColor | undefined,\n\t\talignLeft: boolean,\n\t\tpriority: number | undefined,\n\t\taccessibilityInformation: IAccessibilityInformation | undefined,\n\t): void;\n\t$disposeEntry(id: string): void;\n}\n\nexport type StatusBarItemDto = {\n\tentryId: string;\n\talignLeft: boolean;\n\tpriority?: number;\n\tname: string;\n\ttext: string;\n\ttooltip?: string;\n\tcommand?: string;\n\taccessibilityInformation?: IAccessibilityInformation;\n};\n\nexport interface ExtHostStatusBarShape {\n\t$acceptStaticEntries(added?: StatusBarItemDto[]): void;\n}\n\nexport interface MainThreadStorageShape extends IDisposable {\n\t$initializeExtensionStorage(\n\t\tshared: boolean,\n\t\textensionId: string,\n\t): Promise<string | undefined>;\n\t$setValue(\n\t\tshared: boolean,\n\t\textensionId: string,\n\t\tvalue: object,\n\t): Promise<void>;\n\t$registerExtensionStorageKeysToSync(\n\t\textension: IExtensionIdWithVersion,\n\t\tkeys: string[],\n\t): void;\n}\n\nexport interface MainThreadTelemetryShape extends IDisposable {\n\t$publicLog(eventName: string, data?: any): void;\n\t$publicLog2<\n\t\tE extends ClassifiedEvent<OmitMetadata<T>> = never,\n\t\tT extends IGDPRProperty = never,\n\t>(eventName: string, data?: StrictPropertyCheck<T, E>): void;\n}\n\nexport interface MainThreadEditorInsetsShape extends IDisposable {\n\t$createEditorInset(\n\t\thandle: number,\n\t\tid: string,\n\t\turi: UriComponents,\n\t\tline: number,\n\t\theight: number,\n\t\toptions: IWebviewContentOptions,\n\t\textensionId: ExtensionIdentifier,\n\t\textensionLocation: UriComponents,\n\t): Promise<void>;\n\t$disposeEditorInset(handle: number): void;\n\n\t$setHtml(handle: number, value: string): void;\n\t$setOptions(handle: number, options: IWebviewContentOptions): void;\n\t$postMessage(handle: number, value: any): Promise<boolean>;\n}\n\nexport interface ExtHostEditorInsetsShape {\n\t$onDidDispose(handle: number): void;\n\t$onDidReceiveMessage(handle: number, message: any): void;\n}\n\n//#region --- tabs model\n\nexport enum TabInputKind {\n\tUnknownInput = 0,\n\tTextInput = 1,\n\tTextDiffInput = 2,\n\tTextMergeInput = 3,\n\tNotebookInput = 4,\n\tNotebookDiffInput = 5,\n\tCustomEditorInput = 6,\n\tWebviewEditorInput = 7,\n\tTerminalEditorInput = 8,\n\tInteractiveEditorInput = 9,\n\tChatEditorInput = 10,\n\tMultiDiffEditorInput = 11,\n}\n\nexport enum TabModelOperationKind {\n\tTAB_OPEN = 0,\n\tTAB_CLOSE = 1,\n\tTAB_UPDATE = 2,\n\tTAB_MOVE = 3,\n}\n\nexport interface UnknownInputDto {\n\tkind: TabInputKind.UnknownInput;\n}\n\nexport interface TextInputDto {\n\tkind: TabInputKind.TextInput;\n\turi: UriComponents;\n}\n\nexport interface TextDiffInputDto {\n\tkind: TabInputKind.TextDiffInput;\n\toriginal: UriComponents;\n\tmodified: UriComponents;\n}\n\nexport interface TextMergeInputDto {\n\tkind: TabInputKind.TextMergeInput;\n\tbase: UriComponents;\n\tinput1: UriComponents;\n\tinput2: UriComponents;\n\tresult: UriComponents;\n}\n\nexport interface NotebookInputDto {\n\tkind: TabInputKind.NotebookInput;\n\tnotebookType: string;\n\turi: UriComponents;\n}\n\nexport interface NotebookDiffInputDto {\n\tkind: TabInputKind.NotebookDiffInput;\n\tnotebookType: string;\n\toriginal: UriComponents;\n\tmodified: UriComponents;\n}\n\nexport interface CustomInputDto {\n\tkind: TabInputKind.CustomEditorInput;\n\tviewType: string;\n\turi: UriComponents;\n}\n\nexport interface WebviewInputDto {\n\tkind: TabInputKind.WebviewEditorInput;\n\tviewType: string;\n}\n\nexport interface InteractiveEditorInputDto {\n\tkind: TabInputKind.InteractiveEditorInput;\n\turi: UriComponents;\n\tinputBoxUri: UriComponents;\n}\n\nexport interface ChatEditorInputDto {\n\tkind: TabInputKind.ChatEditorInput;\n}\n\nexport interface MultiDiffEditorInputDto {\n\tkind: TabInputKind.MultiDiffEditorInput;\n\tdiffEditors: TextDiffInputDto[];\n}\n\nexport interface TabInputDto {\n\tkind: TabInputKind.TerminalEditorInput;\n}\n\nexport type AnyInputDto =\n\t| UnknownInputDto\n\t| TextInputDto\n\t| TextDiffInputDto\n\t| MultiDiffEditorInputDto\n\t| TextMergeInputDto\n\t| NotebookInputDto\n\t| NotebookDiffInputDto\n\t| CustomInputDto\n\t| WebviewInputDto\n\t| InteractiveEditorInputDto\n\t| ChatEditorInputDto\n\t| TabInputDto;\n\nexport interface MainThreadEditorTabsShape extends IDisposable {\n\t// manage tabs: move, close, rearrange etc\n\t$moveTab(\n\t\ttabId: string,\n\t\tindex: number,\n\t\tviewColumn: EditorGroupColumn,\n\t\tpreserveFocus?: boolean,\n\t): void;\n\t$closeTab(tabIds: string[], preserveFocus?: boolean): Promise<boolean>;\n\t$closeGroup(groupIds: number[], preservceFocus?: boolean): Promise<boolean>;\n}\n\nexport interface IEditorTabGroupDto {\n\tisActive: boolean;\n\tviewColumn: EditorGroupColumn;\n\t// Decided not to go with simple index here due to opening and closing causing index shifts\n\t// This allows us to patch the model without having to do full rebuilds\n\ttabs: IEditorTabDto[];\n\tgroupId: number;\n}\n\nexport interface TabOperation {\n\treadonly kind:\n\t\t| TabModelOperationKind.TAB_OPEN\n\t\t| TabModelOperationKind.TAB_CLOSE\n\t\t| TabModelOperationKind.TAB_UPDATE\n\t\t| TabModelOperationKind.TAB_MOVE;\n\t// TODO @lramos15 Possibly get rid of index for tab update, it's only needed for open and close\n\treadonly index: number;\n\treadonly tabDto: IEditorTabDto;\n\treadonly groupId: number;\n\treadonly oldIndex?: number;\n}\n\nexport interface IEditorTabDto {\n\tid: string;\n\tlabel: string;\n\tinput: AnyInputDto;\n\teditorId?: string;\n\tisActive: boolean;\n\tisPinned: boolean;\n\tisPreview: boolean;\n\tisDirty: boolean;\n}\n\nexport interface IExtHostEditorTabsShape {\n\t// Accepts a whole new model\n\t$acceptEditorTabModel(tabGroups: IEditorTabGroupDto[]): void;\n\t// Only when group property changes (not the tabs inside)\n\t$acceptTabGroupUpdate(groupDto: IEditorTabGroupDto): void;\n\t// When a tab is added, removed, or updated\n\t$acceptTabOperation(operation: TabOperation): void;\n}\n\n//#endregion\n\nexport type WebviewHandle = string;\n\nexport interface WebviewPanelShowOptions {\n\treadonly viewColumn?: EditorGroupColumn;\n\treadonly preserveFocus?: boolean;\n}\n\nexport interface WebviewExtensionDescription {\n\treadonly id: ExtensionIdentifier;\n\treadonly location: UriComponents;\n}\n\nexport enum WebviewEditorCapabilities {\n\tEditable = 0,\n\tSupportsHotExit = 1,\n}\n\nexport interface IWebviewPortMapping {\n\treadonly webviewPort: number;\n\treadonly extensionHostPort: number;\n}\n\nexport interface IWebviewContentOptions {\n\treadonly enableScripts?: boolean;\n\treadonly enableForms?: boolean;\n\treadonly enableCommandUris?: boolean | readonly string[];\n\treadonly localResourceRoots?: readonly UriComponents[];\n\treadonly portMapping?: readonly IWebviewPortMapping[];\n}\n\nexport interface IWebviewPanelOptions {\n\treadonly enableFindWidget?: boolean;\n\treadonly retainContextWhenHidden?: boolean;\n}\n\nexport interface CustomTextEditorCapabilities {\n\treadonly supportsMove?: boolean;\n}\n\nexport enum WebviewMessageArrayBufferViewType {\n\tInt8Array = 1,\n\tUint8Array = 2,\n\tUint8ClampedArray = 3,\n\tInt16Array = 4,\n\tUint16Array = 5,\n\tInt32Array = 6,\n\tUint32Array = 7,\n\tFloat32Array = 8,\n\tFloat64Array = 9,\n\tBigInt64Array = 10,\n\tBigUint64Array = 11,\n}\n\nexport interface WebviewMessageArrayBufferReference {\n\treadonly $$vscode_array_buffer_reference$$: true;\n\n\treadonly index: number;\n\n\t/**\n\t * Tracks if the reference is to a view instead of directly to an ArrayBuffer.\n\t */\n\treadonly view?: {\n\t\treadonly type: WebviewMessageArrayBufferViewType;\n\t\treadonly byteLength: number;\n\t\treadonly byteOffset: number;\n\t};\n}\n\nexport interface MainThreadWebviewsShape extends IDisposable {\n\t$setHtml(handle: WebviewHandle, value: string): void;\n\t$setOptions(handle: WebviewHandle, options: IWebviewContentOptions): void;\n\t$postMessage(\n\t\thandle: WebviewHandle,\n\t\tvalue: string,\n\t\t...buffers: VSBuffer[]\n\t): Promise<boolean>;\n}\n\nexport interface IWebviewIconPath {\n\treadonly light: UriComponents;\n\treadonly dark: UriComponents;\n}\n\nexport interface IWebviewInitData {\n\treadonly title: string;\n\treadonly webviewOptions: IWebviewContentOptions;\n\treadonly panelOptions: IWebviewPanelOptions;\n\treadonly serializeBuffersForPostMessage: boolean;\n}\n\nexport interface MainThreadWebviewPanelsShape extends IDisposable {\n\t$createWebviewPanel(\n\t\textension: WebviewExtensionDescription,\n\t\thandle: WebviewHandle,\n\t\tviewType: string,\n\t\tinitData: IWebviewInitData,\n\t\tshowOptions: WebviewPanelShowOptions,\n\t): void;\n\t$disposeWebview(handle: WebviewHandle): void;\n\t$reveal(handle: WebviewHandle, showOptions: WebviewPanelShowOptions): void;\n\t$setTitle(handle: WebviewHandle, value: string): void;\n\t$setIconPath(\n\t\thandle: WebviewHandle,\n\t\tvalue: IWebviewIconPath | undefined,\n\t): void;\n\n\t$registerSerializer(\n\t\tviewType: string,\n\t\toptions: { serializeBuffersForPostMessage: boolean },\n\t): void;\n\t$unregisterSerializer(viewType: string): void;\n}\n\nexport interface MainThreadCustomEditorsShape extends IDisposable {\n\t$registerTextEditorProvider(\n\t\textension: WebviewExtensionDescription,\n\t\tviewType: string,\n\t\toptions: IWebviewPanelOptions,\n\t\tcapabilities: CustomTextEditorCapabilities,\n\t\tserializeBuffersForPostMessage: boolean,\n\t): void;\n\t$registerCustomEditorProvider(\n\t\textension: WebviewExtensionDescription,\n\t\tviewType: string,\n\t\toptions: IWebviewPanelOptions,\n\t\tsupportsMultipleEditorsPerDocument: boolean,\n\t\tserializeBuffersForPostMessage: boolean,\n\t): void;\n\t$unregisterEditorProvider(viewType: string): void;\n\n\t$onDidEdit(\n\t\tresource: UriComponents,\n\t\tviewType: string,\n\t\teditId: number,\n\t\tlabel: string | undefined,\n\t): void;\n\t$onContentChange(resource: UriComponents, viewType: string): void;\n}\n\nexport interface MainThreadWebviewViewsShape extends IDisposable {\n\t$registerWebviewViewProvider(\n\t\textension: WebviewExtensionDescription,\n\t\tviewType: string,\n\t\toptions: {\n\t\t\tretainContextWhenHidden?: boolean;\n\t\t\tserializeBuffersForPostMessage: boolean;\n\t\t},\n\t): void;\n\t$unregisterWebviewViewProvider(viewType: string): void;\n\n\t$setWebviewViewTitle(\n\t\thandle: WebviewHandle,\n\t\tvalue: string | undefined,\n\t): void;\n\t$setWebviewViewDescription(\n\t\thandle: WebviewHandle,\n\t\tvalue: string | undefined,\n\t): void;\n\t$setWebviewViewBadge(\n\t\thandle: WebviewHandle,\n\t\tbadge: IViewBadge | undefined,\n\t): void;\n\n\t$show(handle: WebviewHandle, preserveFocus: boolean): void;\n}\n\nexport interface WebviewPanelViewStateData {\n\t[handle: string]: {\n\t\treadonly active: boolean;\n\t\treadonly visible: boolean;\n\t\treadonly position: EditorGroupColumn;\n\t};\n}\n\nexport interface ExtHostWebviewsShape {\n\t$onMessage(\n\t\thandle: WebviewHandle,\n\t\tjsonSerializedMessage: string,\n\t\tbuffers: SerializableObjectWithBuffers<VSBuffer[]>,\n\t): void;\n\t$onMissingCsp(handle: WebviewHandle, extensionId: string): void;\n}\n\nexport interface ExtHostWebviewPanelsShape {\n\t$onDidChangeWebviewPanelViewStates(\n\t\tnewState: WebviewPanelViewStateData,\n\t): void;\n\t$onDidDisposeWebviewPanel(handle: WebviewHandle): Promise<void>;\n\t$deserializeWebviewPanel(\n\t\tnewWebviewHandle: WebviewHandle,\n\t\tviewType: string,\n\t\tinitData: {\n\t\t\ttitle: string;\n\t\t\tstate: any;\n\t\t\twebviewOptions: IWebviewContentOptions;\n\t\t\tpanelOptions: IWebviewPanelOptions;\n\t\t\tactive: boolean;\n\t\t},\n\t\tposition: EditorGroupColumn,\n\t): Promise<void>;\n}\n\nexport interface ExtHostCustomEditorsShape {\n\t$resolveCustomEditor(\n\t\tresource: UriComponents,\n\t\tnewWebviewHandle: WebviewHandle,\n\t\tviewType: string,\n\t\tinitData: {\n\t\t\ttitle: string;\n\t\t\tcontentOptions: IWebviewContentOptions;\n\t\t\toptions: IWebviewPanelOptions;\n\t\t\tactive: boolean;\n\t\t},\n\t\tposition: EditorGroupColumn,\n\t\tcancellation: CancellationToken,\n\t): Promise<void>;\n\t$createCustomDocument(\n\t\tresource: UriComponents,\n\t\tviewType: string,\n\t\tbackupId: string | undefined,\n\t\tuntitledDocumentData: VSBuffer | undefined,\n\t\tcancellation: CancellationToken,\n\t): Promise<{ editable: boolean }>;\n\t$disposeCustomDocument(\n\t\tresource: UriComponents,\n\t\tviewType: string,\n\t): Promise<void>;\n\n\t$undo(\n\t\tresource: UriComponents,\n\t\tviewType: string,\n\t\teditId: number,\n\t\tisDirty: boolean,\n\t): Promise<void>;\n\t$redo(\n\t\tresource: UriComponents,\n\t\tviewType: string,\n\t\teditId: number,\n\t\tisDirty: boolean,\n\t): Promise<void>;\n\t$revert(\n\t\tresource: UriComponents,\n\t\tviewType: string,\n\t\tcancellation: CancellationToken,\n\t): Promise<void>;\n\t$disposeEdits(\n\t\tresourceComponents: UriComponents,\n\t\tviewType: string,\n\t\teditIds: number[],\n\t): void;\n\n\t$onSave(\n\t\tresource: UriComponents,\n\t\tviewType: string,\n\t\tcancellation: CancellationToken,\n\t): Promise<void>;\n\t$onSaveAs(\n\t\tresource: UriComponents,\n\t\tviewType: string,\n\t\ttargetResource: UriComponents,\n\t\tcancellation: CancellationToken,\n\t): Promise<void>;\n\n\t$backup(\n\t\tresource: UriComponents,\n\t\tviewType: string,\n\t\tcancellation: CancellationToken,\n\t): Promise<string>;\n\n\t$onMoveCustomEditor(\n\t\thandle: WebviewHandle,\n\t\tnewResource: UriComponents,\n\t\tviewType: string,\n\t): Promise<void>;\n}\n\nexport interface ExtHostWebviewViewsShape {\n\t$resolveWebviewView(\n\t\twebviewHandle: WebviewHandle,\n\t\tviewType: string,\n\t\ttitle: string | undefined,\n\t\tstate: any,\n\t\tcancellation: CancellationToken,\n\t): Promise<void>;\n\n\t$onDidChangeWebviewViewVisibility(\n\t\twebviewHandle: WebviewHandle,\n\t\tvisible: boolean,\n\t): void;\n\n\t$disposeWebviewView(webviewHandle: WebviewHandle): void;\n}\n\nexport interface MainThreadManagedSocketsShape extends IDisposable {\n\t$registerSocketFactory(socketFactoryId: number): Promise<void>;\n\t$unregisterSocketFactory(socketFactoryId: number): Promise<void>;\n\t$onDidManagedSocketHaveData(socketId: number, data: VSBuffer): void;\n\t$onDidManagedSocketClose(socketId: number, error: string | undefined): void;\n\t$onDidManagedSocketEnd(socketId: number): void;\n}\n\nexport interface ExtHostManagedSocketsShape {\n\t$openRemoteSocket(socketFactoryId: number): Promise<number>;\n\t$remoteSocketWrite(socketId: number, buffer: VSBuffer): void;\n\t$remoteSocketEnd(socketId: number): void;\n\t$remoteSocketDrain(socketId: number): Promise<void>;\n}\n\nexport enum CellOutputKind {\n\tText = 1,\n\tError = 2,\n\tRich = 3,\n}\n\nexport enum NotebookEditorRevealType {\n\tDefault = 0,\n\tInCenter = 1,\n\tInCenterIfOutsideViewport = 2,\n\tAtTop = 3,\n}\n\nexport interface INotebookDocumentShowOptions {\n\tposition?: EditorGroupColumn;\n\tpreserveFocus?: boolean;\n\tpinned?: boolean;\n\tselections?: ICellRange[];\n\tlabel?: string;\n}\n\nexport type INotebookCellStatusBarEntryDto =\n\tDto<notebookCommon.INotebookCellStatusBarItem>;\n\nexport interface INotebookCellStatusBarListDto {\n\titems: INotebookCellStatusBarEntryDto[];\n\tcacheId: number;\n}\n\nexport interface MainThreadNotebookShape extends IDisposable {\n\t$registerNotebookSerializer(\n\t\thandle: number,\n\t\textension: notebookCommon.NotebookExtensionDescription,\n\t\tviewType: string,\n\t\toptions: notebookCommon.TransientOptions,\n\t\tregistration: notebookCommon.INotebookContributionData | undefined,\n\t): void;\n\t$unregisterNotebookSerializer(handle: number): void;\n\n\t$registerNotebookCellStatusBarItemProvider(\n\t\thandle: number,\n\t\teventHandle: number | undefined,\n\t\tviewType: string,\n\t): Promise<void>;\n\t$unregisterNotebookCellStatusBarItemProvider(\n\t\thandle: number,\n\t\teventHandle: number | undefined,\n\t): Promise<void>;\n\t$emitCellStatusBarEvent(eventHandle: number): void;\n}\n\nexport interface MainThreadNotebookEditorsShape extends IDisposable {\n\t$tryShowNotebookDocument(\n\t\turiComponents: UriComponents,\n\t\tviewType: string,\n\t\toptions: INotebookDocumentShowOptions,\n\t): Promise<string>;\n\t$tryRevealRange(\n\t\tid: string,\n\t\trange: ICellRange,\n\t\trevealType: NotebookEditorRevealType,\n\t): Promise<void>;\n\t$trySetSelections(id: string, range: ICellRange[]): void;\n}\n\nexport interface MainThreadNotebookDocumentsShape extends IDisposable {\n\t$tryCreateNotebook(options: {\n\t\tviewType: string;\n\t\tcontent?: NotebookDataDto;\n\t}): Promise<UriComponents>;\n\t$tryOpenNotebook(uriComponents: UriComponents): Promise<UriComponents>;\n\t$trySaveNotebook(uri: UriComponents): Promise<boolean>;\n}\n\nexport interface INotebookKernelDto2 {\n\tid: string;\n\tnotebookType: string;\n\textensionId: ExtensionIdentifier;\n\textensionLocation: UriComponents;\n\tlabel: string;\n\tdetail?: string;\n\tdescription?: string;\n\tsupportedLanguages?: string[];\n\tsupportsInterrupt?: boolean;\n\tsupportsExecutionOrder?: boolean;\n\tpreloads?: { uri: UriComponents; provides: readonly string[] }[];\n\thasVariableProvider?: boolean;\n}\n\nexport interface INotebookProxyKernelDto {\n\tid: string;\n\tnotebookType: string;\n\textensionId: ExtensionIdentifier;\n\textensionLocation: UriComponents;\n\tlabel: string;\n\tdetail?: string;\n\tdescription?: string;\n\tkind?: string;\n}\n\nexport interface ICellExecuteOutputEditDto {\n\teditType: CellExecutionUpdateType.Output;\n\tcellHandle: number;\n\tappend?: boolean;\n\toutputs: NotebookOutputDto[];\n}\n\nexport interface ICellExecuteOutputItemEditDto {\n\teditType: CellExecutionUpdateType.OutputItems;\n\tappend?: boolean;\n\toutputId: string;\n\titems: NotebookOutputItemDto[];\n}\n\nexport interface ICellExecutionStateUpdateDto\n\textends ICellExecutionStateUpdate {}\n\nexport interface ICellExecutionCompleteDto extends ICellExecutionComplete {}\n\nexport type ICellExecuteUpdateDto =\n\t| ICellExecuteOutputEditDto\n\t| ICellExecuteOutputItemEditDto\n\t| ICellExecutionStateUpdateDto;\n\nexport interface VariablesResult {\n\tid: number;\n\tname: string;\n\tvalue: string;\n\ttype?: string;\n\tlanguage?: string;\n\texpression?: string;\n\thasNamedChildren: boolean;\n\tindexedChildrenCount: number;\n\textensionId: string;\n}\n\nexport interface MainThreadNotebookKernelsShape extends IDisposable {\n\t$postMessage(\n\t\thandle: number,\n\t\teditorId: string | undefined,\n\t\tmessage: any,\n\t): Promise<boolean>;\n\t$addKernel(handle: number, data: INotebookKernelDto2): Promise<void>;\n\t$updateKernel(handle: number, data: Partial<INotebookKernelDto2>): void;\n\t$removeKernel(handle: number): void;\n\t$updateNotebookPriority(\n\t\thandle: number,\n\t\turi: UriComponents,\n\t\tvalue: number | undefined,\n\t): void;\n\n\t$createExecution(\n\t\thandle: number,\n\t\tcontrollerId: string,\n\t\turi: UriComponents,\n\t\tcellHandle: number,\n\t): void;\n\t$updateExecution(\n\t\thandle: number,\n\t\tdata: SerializableObjectWithBuffers<ICellExecuteUpdateDto[]>,\n\t): void;\n\t$completeExecution(\n\t\thandle: number,\n\t\tdata: SerializableObjectWithBuffers<ICellExecutionCompleteDto>,\n\t): void;\n\n\t$createNotebookExecution(\n\t\thandle: number,\n\t\tcontrollerId: string,\n\t\turi: UriComponents,\n\t): void;\n\t$beginNotebookExecution(handle: number): void;\n\t$completeNotebookExecution(handle: number): void;\n\n\t$addKernelDetectionTask(\n\t\thandle: number,\n\t\tnotebookType: string,\n\t): Promise<void>;\n\t$removeKernelDetectionTask(handle: number): void;\n\n\t$addKernelSourceActionProvider(\n\t\thandle: number,\n\t\teventHandle: number,\n\t\tnotebookType: string,\n\t): Promise<void>;\n\t$removeKernelSourceActionProvider(\n\t\thandle: number,\n\t\teventHandle: number,\n\t): void;\n\t$emitNotebookKernelSourceActionsChangeEvent(eventHandle: number): void;\n\t$receiveVariable(requestId: string, variable: VariablesResult): void;\n\t$variablesUpdated(notebookUri: UriComponents): void;\n}\n\nexport interface MainThreadNotebookRenderersShape extends IDisposable {\n\t$postMessage(\n\t\teditorId: string | undefined,\n\t\trendererId: string,\n\t\tmessage: unknown,\n\t): Promise<boolean>;\n}\n\nexport interface MainThreadInteractiveShape extends IDisposable {}\n\nexport interface MainThreadSpeechShape extends IDisposable {\n\t$registerProvider(\n\t\thandle: number,\n\t\tidentifier: string,\n\t\tmetadata: ISpeechProviderMetadata,\n\t): void;\n\t$unregisterProvider(handle: number): void;\n\n\t$emitSpeechToTextEvent(session: number, event: ISpeechToTextEvent): void;\n\t$emitTextToSpeechEvent(session: number, event: ITextToSpeechEvent): void;\n\t$emitKeywordRecognitionEvent(\n\t\tsession: number,\n\t\tevent: IKeywordRecognitionEvent,\n\t): void;\n}\n\nexport interface ExtHostSpeechShape {\n\t$createSpeechToTextSession(\n\t\thandle: number,\n\t\tsession: number,\n\t\tlanguage?: string,\n\t): Promise<void>;\n\t$cancelSpeechToTextSession(session: number): Promise<void>;\n\n\t$createTextToSpeechSession(\n\t\thandle: number,\n\t\tsession: number,\n\t\tlanguage?: string,\n\t): Promise<void>;\n\t$synthesizeSpeech(session: number, text: string): Promise<void>;\n\t$cancelTextToSpeechSession(session: number): Promise<void>;\n\n\t$createKeywordRecognitionSession(\n\t\thandle: number,\n\t\tsession: number,\n\t): Promise<void>;\n\t$cancelKeywordRecognitionSession(session: number): Promise<void>;\n}\n\nexport interface MainThreadLanguageModelsShape extends IDisposable {\n\t$registerLanguageModelProvider(\n\t\thandle: number,\n\t\tidentifier: string,\n\t\tmetadata: ILanguageModelChatMetadata,\n\t): void;\n\t$unregisterProvider(handle: number): void;\n\t$tryStartChatRequest(\n\t\textension: ExtensionIdentifier,\n\t\tprovider: string,\n\t\trequestId: number,\n\t\tmessages: IChatMessage[],\n\t\toptions: {},\n\t\ttoken: CancellationToken,\n\t): Promise<void>;\n\t$reportResponsePart(\n\t\trequestId: number,\n\t\tchunk: IChatResponseFragment,\n\t): Promise<void>;\n\t$reportResponseDone(\n\t\trequestId: number,\n\t\terror: SerializedError | undefined,\n\t): Promise<void>;\n\t$selectChatModels(selector: ILanguageModelChatSelector): Promise<string[]>;\n\t$whenLanguageModelChatRequestMade(\n\t\tidentifier: string,\n\t\textension: ExtensionIdentifier,\n\t\tparticipant?: string,\n\t\ttokenCount?: number,\n\t): void;\n\t$countTokens(\n\t\tprovider: string,\n\t\tvalue: string | IChatMessage,\n\t\ttoken: CancellationToken,\n\t): Promise<number>;\n}\n\nexport interface ExtHostLanguageModelsShape {\n\t$acceptChatModelMetadata(data: ILanguageModelsChangeEvent): void;\n\t$updateModelAccesslist(\n\t\tdata: {\n\t\t\tfrom: ExtensionIdentifier;\n\t\t\tto: ExtensionIdentifier;\n\t\t\tenabled: boolean;\n\t\t}[],\n\t): void;\n\t$startChatRequest(\n\t\thandle: number,\n\t\trequestId: number,\n\t\tfrom: ExtensionIdentifier,\n\t\tmessages: IChatMessage[],\n\t\toptions: { [name: string]: any },\n\t\ttoken: CancellationToken,\n\t): Promise<void>;\n\t$acceptResponsePart(\n\t\trequestId: number,\n\t\tchunk: IChatResponseFragment,\n\t): Promise<void>;\n\t$acceptResponseDone(\n\t\trequestId: number,\n\t\terror: SerializedError | undefined,\n\t): Promise<void>;\n\t$provideTokenLength(\n\t\thandle: number,\n\t\tvalue: string | IChatMessage,\n\t\ttoken: CancellationToken,\n\t): Promise<number>;\n}\n\nexport interface MainThreadEmbeddingsShape extends IDisposable {\n\t$registerEmbeddingProvider(handle: number, identifier: string): void;\n\t$unregisterEmbeddingProvider(handle: number): void;\n\t$computeEmbeddings(\n\t\tembeddingsModel: string,\n\t\tinput: string[],\n\t\ttoken: CancellationToken,\n\t): Promise<{ values: number[] }[]>;\n}\n\nexport interface ExtHostEmbeddingsShape {\n\t$provideEmbeddings(\n\t\thandle: number,\n\t\tinput: string[],\n\t\ttoken: CancellationToken,\n\t): Promise<{ values: number[] }[]>;\n\t$acceptEmbeddingModels(models: string[]): void;\n}\n\nexport interface IExtensionChatAgentMetadata extends Dto<IChatAgentMetadata> {\n\thasFollowups?: boolean;\n}\n\nexport interface IDynamicChatAgentProps {\n\tname: string;\n\tpublisherName: string;\n\tdescription?: string;\n\tfullName?: string;\n}\n\nexport interface MainThreadChatAgentsShape2 extends IDisposable {\n\t$registerAgent(\n\t\thandle: number,\n\t\textension: ExtensionIdentifier,\n\t\tid: string,\n\t\tmetadata: IExtensionChatAgentMetadata,\n\t\tdynamicProps: IDynamicChatAgentProps | undefined,\n\t): void;\n\t$registerChatParticipantDetectionProvider(handle: number): void;\n\t$unregisterChatParticipantDetectionProvider(handle: number): void;\n\t$registerAgentCompletionsProvider(\n\t\thandle: number,\n\t\tid: string,\n\t\ttriggerCharacters: string[],\n\t): void;\n\t$unregisterAgentCompletionsProvider(handle: number, id: string): void;\n\t$updateAgent(\n\t\thandle: number,\n\t\tmetadataUpdate: IExtensionChatAgentMetadata,\n\t): void;\n\t$unregisterAgent(handle: number): void;\n\t$handleProgressChunk(\n\t\trequestId: string,\n\t\tchunk: IChatProgressDto,\n\t\thandle?: number,\n\t): Promise<number | void>;\n\n\t$transferActiveChatSession(toWorkspace: UriComponents): void;\n}\n\nexport interface IChatAgentCompletionItem {\n\tid: string;\n\tfullName?: string;\n\ticon?: string;\n\tinsertText?: string;\n\tlabel: string | languages.CompletionItemLabel;\n\tvalue: IChatRequestVariableValueDto;\n\tdetail?: string;\n\tdocumentation?: string | IMarkdownString;\n\tcommand?: ICommandDto;\n}\n\nexport type IChatContentProgressDto =\n\t| Dto<Exclude<IChatProgressResponseContent, IChatTask>>\n\t| IChatTaskDto;\n\nexport type IChatAgentHistoryEntryDto = {\n\trequest: IChatAgentRequest;\n\tresponse: ReadonlyArray<IChatContentProgressDto>;\n\tresult: IChatAgentResult;\n};\n\nexport interface ExtHostChatAgentsShape2 {\n\t$invokeAgent(\n\t\thandle: number,\n\t\trequest: Dto<IChatAgentRequest>,\n\t\tcontext: { history: IChatAgentHistoryEntryDto[] },\n\t\ttoken: CancellationToken,\n\t): Promise<IChatAgentResult | undefined>;\n\t$provideFollowups(\n\t\trequest: Dto<IChatAgentRequest>,\n\t\thandle: number,\n\t\tresult: IChatAgentResult,\n\t\tcontext: { history: IChatAgentHistoryEntryDto[] },\n\t\ttoken: CancellationToken,\n\t): Promise<IChatFollowup[]>;\n\t$acceptFeedback(\n\t\thandle: number,\n\t\tresult: IChatAgentResult,\n\t\tvoteAction: IChatVoteAction,\n\t): void;\n\t$acceptAction(\n\t\thandle: number,\n\t\tresult: IChatAgentResult,\n\t\taction: IChatUserActionEvent,\n\t): void;\n\t$invokeCompletionProvider(\n\t\thandle: number,\n\t\tquery: string,\n\t\ttoken: CancellationToken,\n\t): Promise<IChatAgentCompletionItem[]>;\n\t$provideWelcomeMessage(\n\t\thandle: number,\n\t\tlocation: ChatAgentLocation,\n\t\ttoken: CancellationToken,\n\t): Promise<(string | IMarkdownString)[] | undefined>;\n\t$provideChatTitle(\n\t\thandle: number,\n\t\tcontext: IChatAgentHistoryEntryDto[],\n\t\ttoken: CancellationToken,\n\t): Promise<string | undefined>;\n\t$provideSampleQuestions(\n\t\thandle: number,\n\t\tlocation: ChatAgentLocation,\n\t\ttoken: CancellationToken,\n\t): Promise<IChatFollowup[] | undefined>;\n\t$releaseSession(sessionId: string): void;\n\t$detectChatParticipant(\n\t\thandle: number,\n\t\trequest: Dto<IChatAgentRequest>,\n\t\tcontext: { history: IChatAgentHistoryEntryDto[] },\n\t\toptions: {\n\t\t\tparticipants: IChatParticipantMetadata[];\n\t\t\tlocation: ChatAgentLocation;\n\t\t},\n\t\ttoken: CancellationToken,\n\t): Promise<IChatParticipantDetectionResult | null | undefined>;\n}\nexport interface IChatParticipantMetadata {\n\tparticipant: string;\n\tcommand?: string;\n\tdisambiguation: {\n\t\tcategory: string;\n\t\tdescription: string;\n\t\texamples: string[];\n\t}[];\n}\n\nexport interface IChatParticipantDetectionResult {\n\tparticipant: string;\n\tcommand?: string;\n}\n\nexport type IChatVariableResolverProgressDto =\n\tDto<IChatVariableResolverProgress>;\n\nexport interface MainThreadChatVariablesShape extends IDisposable {\n\t$registerVariable(handle: number, data: IChatVariableData): void;\n\t$handleProgressChunk(\n\t\trequestId: string,\n\t\tprogress: IChatVariableResolverProgressDto,\n\t): Promise<number | void>;\n\t$unregisterVariable(handle: number): void;\n}\n\nexport type IToolDataDto = Omit<IToolData, \"when\">;\n\nexport interface MainThreadLanguageModelToolsShape extends IDisposable {\n\t$getTools(): Promise<Dto<IToolDataDto>[]>;\n\t$invokeTool(\n\t\tdto: IToolInvocation,\n\t\ttoken: CancellationToken,\n\t): Promise<IToolResult>;\n\t$countTokensForInvocation(\n\t\tcallId: string,\n\t\tinput: string,\n\t\ttoken: CancellationToken,\n\t): Promise<number>;\n\t$registerTool(id: string): void;\n\t$unregisterTool(name: string): void;\n}\n\nexport type IChatRequestVariableValueDto = Dto<IChatRequestVariableValue>;\n\nexport interface ExtHostChatVariablesShape {\n\t$resolveVariable(\n\t\thandle: number,\n\t\trequestId: string,\n\t\tmessageText: string,\n\t\ttoken: CancellationToken,\n\t): Promise<IChatRequestVariableValueDto | undefined>;\n}\n\nexport interface ExtHostLanguageModelToolsShape {\n\t$onDidChangeTools(tools: IToolDataDto[]): void;\n\t$invokeTool(\n\t\tdto: IToolInvocation,\n\t\ttoken: CancellationToken,\n\t): Promise<IToolResult>;\n\t$countTokensForInvocation(\n\t\tcallId: string,\n\t\tinput: string,\n\t\ttoken: CancellationToken,\n\t): Promise<number>;\n}\n\nexport interface MainThreadUrlsShape extends IDisposable {\n\t$registerUriHandler(\n\t\thandle: number,\n\t\textensionId: ExtensionIdentifier,\n\t\textensionDisplayName: string,\n\t): Promise<void>;\n\t$unregisterUriHandler(handle: number): Promise<void>;\n\t$createAppUri(uri: UriComponents): Promise<UriComponents>;\n}\n\nexport type IChatDto = {};\n\nexport interface IChatRequestDto {\n\tmessage: string;\n\tvariables?: Record<string, IChatRequestVariableValue[]>;\n}\n\nexport interface IChatResponseDto {\n\terrorDetails?: IChatResponseErrorDetails;\n\ttimings: {\n\t\tfirstProgress: number;\n\t\ttotalElapsed: number;\n\t};\n}\n\nexport interface IChatResponseProgressFileTreeData {\n\tlabel: string;\n\turi: URI;\n\tchildren?: IChatResponseProgressFileTreeData[];\n}\n\nexport type IDocumentContextDto = {\n\turi: UriComponents;\n\tversion: number;\n\tranges: IRange[];\n};\n\nexport type IChatProgressDto =\n\t| Dto<Exclude<IChatProgress, IChatTask>>\n\t| IChatTaskDto;\n\nexport interface ExtHostUrlsShape {\n\t$handleExternalUri(handle: number, uri: UriComponents): Promise<void>;\n}\n\nexport interface MainThreadUriOpenersShape extends IDisposable {\n\t$registerUriOpener(\n\t\tid: string,\n\t\tschemes: readonly string[],\n\t\textensionId: ExtensionIdentifier,\n\t\tlabel: string,\n\t): Promise<void>;\n\t$unregisterUriOpener(id: string): Promise<void>;\n}\n\nexport interface ExtHostUriOpenersShape {\n\t$canOpenUri(\n\t\tid: string,\n\t\turi: UriComponents,\n\t\ttoken: CancellationToken,\n\t): Promise<languages.ExternalUriOpenerPriority>;\n\t$openUri(\n\t\tid: string,\n\t\tcontext: { resolvedUri: UriComponents; sourceUri: UriComponents },\n\t\ttoken: CancellationToken,\n\t): Promise<void>;\n}\n\nexport interface MainThreadProfileContentHandlersShape {\n\t$registerProfileContentHandler(\n\t\tid: string,\n\t\tname: string,\n\t\tdescription: string | undefined,\n\t\textensionId: string,\n\t): Promise<void>;\n\t$unregisterProfileContentHandler(id: string): Promise<void>;\n}\n\nexport interface ExtHostProfileContentHandlersShape {\n\t$saveProfile(\n\t\tid: string,\n\t\tname: string,\n\t\tcontent: string,\n\t\ttoken: CancellationToken,\n\t): Promise<UriDto<ISaveProfileResult> | null>;\n\t$readProfile(\n\t\tid: string,\n\t\tidOrUri: string | UriComponents,\n\t\ttoken: CancellationToken,\n\t): Promise<string | null>;\n}\n\nexport interface ITextSearchComplete {\n\tlimitHit?: boolean;\n\tmessage?: TextSearchCompleteMessage | TextSearchCompleteMessage[];\n}\n\nexport interface MainThreadWorkspaceShape extends IDisposable {\n\t$startFileSearch(\n\t\tincludeFolder: UriComponents | null,\n\t\toptions: IFileQueryBuilderOptions,\n\t\ttoken: CancellationToken,\n\t): Promise<UriComponents[] | null>;\n\t$startTextSearch(\n\t\tquery: search.IPatternInfo,\n\t\tfolder: UriComponents | null,\n\t\toptions: ITextQueryBuilderOptions,\n\t\trequestId: number,\n\t\ttoken: CancellationToken,\n\t): Promise<ITextSearchComplete | null>;\n\t$checkExists(\n\t\tfolders: readonly UriComponents[],\n\t\tincludes: string[],\n\t\ttoken: CancellationToken,\n\t): Promise<boolean>;\n\t$save(\n\t\turi: UriComponents,\n\t\toptions: { saveAs: boolean },\n\t): Promise<UriComponents | undefined>;\n\t$saveAll(includeUntitled?: boolean): Promise<boolean>;\n\t$updateWorkspaceFolders(\n\t\textensionName: string,\n\t\tindex: number,\n\t\tdeleteCount: number,\n\t\tworkspaceFoldersToAdd: { uri: UriComponents; name?: string }[],\n\t): Promise<void>;\n\t$resolveProxy(url: string): Promise<string | undefined>;\n\t$lookupAuthorization(authInfo: AuthInfo): Promise<Credentials | undefined>;\n\t$lookupKerberosAuthorization(url: string): Promise<string | undefined>;\n\t$loadCertificates(): Promise<string[]>;\n\t$requestWorkspaceTrust(\n\t\toptions?: WorkspaceTrustRequestOptions,\n\t): Promise<boolean | undefined>;\n\t$registerEditSessionIdentityProvider(handle: number, scheme: string): void;\n\t$unregisterEditSessionIdentityProvider(handle: number): void;\n\t$registerCanonicalUriProvider(handle: number, scheme: string): void;\n\t$unregisterCanonicalUriProvider(handle: number): void;\n}\n\nexport interface IFileChangeDto {\n\tresource: UriComponents;\n\ttype: files.FileChangeType;\n}\n\nexport interface MainThreadFileSystemShape extends IDisposable {\n\t$registerFileSystemProvider(\n\t\thandle: number,\n\t\tscheme: string,\n\t\tcapabilities: files.FileSystemProviderCapabilities,\n\t\treadonlyMessage?: IMarkdownString,\n\t): Promise<void>;\n\t$unregisterProvider(handle: number): void;\n\t$onFileSystemChange(handle: number, resource: IFileChangeDto[]): void;\n\n\t$stat(uri: UriComponents): Promise<files.IStat>;\n\t$readdir(resource: UriComponents): Promise<[string, files.FileType][]>;\n\t$readFile(resource: UriComponents): Promise<VSBuffer>;\n\t$writeFile(resource: UriComponents, content: VSBuffer): Promise<void>;\n\t$rename(\n\t\tresource: UriComponents,\n\t\ttarget: UriComponents,\n\t\topts: files.IFileOverwriteOptions,\n\t): Promise<void>;\n\t$copy(\n\t\tresource: UriComponents,\n\t\ttarget: UriComponents,\n\t\topts: files.IFileOverwriteOptions,\n\t): Promise<void>;\n\t$mkdir(resource: UriComponents): Promise<void>;\n\t$delete(\n\t\tresource: UriComponents,\n\t\topts: files.IFileDeleteOptions,\n\t): Promise<void>;\n\n\t$ensureActivation(scheme: string): Promise<void>;\n}\n\nexport interface MainThreadFileSystemEventServiceShape extends IDisposable {\n\t$watch(\n\t\textensionId: string,\n\t\tsession: number,\n\t\tresource: UriComponents,\n\t\topts: files.IWatchOptions,\n\t\tcorrelate: boolean,\n\t): void;\n\t$unwatch(session: number): void;\n}\n\nexport interface MainThreadLabelServiceShape extends IDisposable {\n\t$registerResourceLabelFormatter(\n\t\thandle: number,\n\t\tformatter: ResourceLabelFormatter,\n\t): void;\n\t$unregisterResourceLabelFormatter(handle: number): void;\n}\n\nexport interface MainThreadSearchShape extends IDisposable {\n\t$registerFileSearchProvider(handle: number, scheme: string): void;\n\t$registerAITextSearchProvider(handle: number, scheme: string): void;\n\t$registerTextSearchProvider(handle: number, scheme: string): void;\n\t$unregisterProvider(handle: number): void;\n\t$handleFileMatch(\n\t\thandle: number,\n\t\tsession: number,\n\t\tdata: UriComponents[],\n\t): void;\n\t$handleTextMatch(\n\t\thandle: number,\n\t\tsession: number,\n\t\tdata: search.IRawFileMatch2[],\n\t): void;\n\t$handleTelemetry(eventName: string, data: any): void;\n}\n\nexport interface MainThreadShareShape extends IDisposable {\n\t$registerShareProvider(\n\t\thandle: number,\n\t\tselector: IDocumentFilterDto[],\n\t\tid: string,\n\t\tlabel: string,\n\t\tpriority: number,\n\t): void;\n\t$unregisterShareProvider(handle: number): void;\n}\n\nexport interface MainThreadTaskShape extends IDisposable {\n\t$createTaskId(task: tasks.ITaskDTO): Promise<string>;\n\t$registerTaskProvider(handle: number, type: string): Promise<void>;\n\t$unregisterTaskProvider(handle: number): Promise<void>;\n\t$fetchTasks(filter?: tasks.ITaskFilterDTO): Promise<tasks.ITaskDTO[]>;\n\t$getTaskExecution(\n\t\tvalue: tasks.ITaskHandleDTO | tasks.ITaskDTO,\n\t): Promise<tasks.ITaskExecutionDTO>;\n\t$executeTask(\n\t\ttask: tasks.ITaskHandleDTO | tasks.ITaskDTO,\n\t): Promise<tasks.ITaskExecutionDTO>;\n\t$terminateTask(id: string): Promise<void>;\n\t$registerTaskSystem(scheme: string, info: tasks.ITaskSystemInfoDTO): void;\n\t$customExecutionComplete(id: string, result?: number): Promise<void>;\n\t$registerSupportedExecutions(\n\t\tcustom?: boolean,\n\t\tshell?: boolean,\n\t\tprocess?: boolean,\n\t): Promise<void>;\n}\n\nexport interface MainThreadExtensionServiceShape extends IDisposable {\n\t$getExtension(\n\t\textensionId: string,\n\t): Promise<Dto<IExtensionDescription> | undefined>;\n\t$activateExtension(\n\t\textensionId: ExtensionIdentifier,\n\t\treason: ExtensionActivationReason,\n\t): Promise<void>;\n\t$onWillActivateExtension(extensionId: ExtensionIdentifier): Promise<void>;\n\t$onDidActivateExtension(\n\t\textensionId: ExtensionIdentifier,\n\t\tcodeLoadingTime: number,\n\t\tactivateCallTime: number,\n\t\tactivateResolvedTime: number,\n\t\tactivationReason: ExtensionActivationReason,\n\t): void;\n\t$onExtensionActivationError(\n\t\textensionId: ExtensionIdentifier,\n\t\terror: SerializedError,\n\t\tmissingExtensionDependency: MissingExtensionDependency | null,\n\t): Promise<void>;\n\t$onExtensionRuntimeError(\n\t\textensionId: ExtensionIdentifier,\n\t\terror: SerializedError,\n\t): void;\n\t$setPerformanceMarks(marks: performance.PerformanceMark[]): Promise<void>;\n\t$asBrowserUri(uri: UriComponents): Promise<UriComponents>;\n}\n\nexport interface SCMProviderFeatures {\n\thasHistoryProvider?: boolean;\n\thasQuickDiffProvider?: boolean;\n\tquickDiffLabel?: string;\n\tcount?: number;\n\tcommitTemplate?: string;\n\tacceptInputCommand?: languages.Command;\n\tactionButton?: SCMActionButtonDto | null;\n\tstatusBarCommands?: ICommandDto[];\n}\n\nexport interface SCMActionButtonDto {\n\tcommand: ICommandDto;\n\tsecondaryCommands?: ICommandDto[][];\n\tdescription?: string;\n\tenabled: boolean;\n}\n\nexport interface SCMGroupFeatures {\n\thideWhenEmpty?: boolean;\n}\n\nexport type SCMRawResource = [\n\tnumber /*handle*/,\n\tUriComponents /*resourceUri*/,\n\t[\n\t\tUriComponents | ThemeIcon | undefined,\n\t\tUriComponents | ThemeIcon | undefined,\n\t] /*icons: light, dark*/,\n\tstring /*tooltip*/,\n\tboolean /*strike through*/,\n\tboolean /*faded*/,\n\tstring /*context value*/,\n\tICommandDto | undefined /*command*/,\n\tUriComponents | undefined /* multiFileDiffEditorOriginalUri */,\n\tUriComponents | undefined /* multiFileDiffEditorModifiedUri */,\n];\n\nexport type SCMRawResourceSplice = [\n\tnumber /* start */,\n\tnumber /* delete count */,\n\tSCMRawResource[],\n];\n\nexport type SCMRawResourceSplices = [number /*handle*/, SCMRawResourceSplice[]];\n\nexport interface SCMHistoryItemRefDto {\n\treadonly id: string;\n\treadonly name: string;\n\treadonly revision?: string;\n\treadonly category?: string;\n\treadonly description?: string;\n\treadonly icon?:\n\t\t| UriComponents\n\t\t| { light: UriComponents; dark: UriComponents }\n\t\t| ThemeIcon;\n}\n\nexport interface SCMHistoryItemRefsChangeEventDto {\n\treadonly added: readonly SCMHistoryItemRefDto[];\n\treadonly modified: readonly SCMHistoryItemRefDto[];\n\treadonly removed: readonly SCMHistoryItemRefDto[];\n}\n\nexport interface SCMHistoryItemDto {\n\treadonly id: string;\n\treadonly parentIds: string[];\n\treadonly message: string;\n\treadonly displayId?: string;\n\treadonly author?: string;\n\treadonly timestamp?: number;\n\treadonly statistics?: {\n\t\treadonly files: number;\n\t\treadonly insertions: number;\n\t\treadonly deletions: number;\n\t};\n\treadonly references?: SCMHistoryItemRefDto[];\n}\n\nexport interface SCMHistoryItemChangeDto {\n\treadonly uri: UriComponents;\n\treadonly originalUri: UriComponents | undefined;\n\treadonly modifiedUri: UriComponents | undefined;\n\treadonly renameUri: UriComponents | undefined;\n}\n\nexport interface MainThreadSCMShape extends IDisposable {\n\t$registerSourceControl(\n\t\thandle: number,\n\t\tid: string,\n\t\tlabel: string,\n\t\trootUri: UriComponents | undefined,\n\t\tinputBoxDocumentUri: UriComponents,\n\t): Promise<void>;\n\t$updateSourceControl(\n\t\thandle: number,\n\t\tfeatures: SCMProviderFeatures,\n\t): Promise<void>;\n\t$unregisterSourceControl(handle: number): Promise<void>;\n\n\t$registerGroups(\n\t\tsourceControlHandle: number,\n\t\tgroups: [\n\t\t\tnumber /*handle*/,\n\t\t\tstring /*id*/,\n\t\t\tstring /*label*/,\n\t\t\tSCMGroupFeatures,\n\t\t\t/* multiDiffEditorEnableViewChanges */ boolean,\n\t\t][],\n\t\tsplices: SCMRawResourceSplices[],\n\t): Promise<void>;\n\t$updateGroup(\n\t\tsourceControlHandle: number,\n\t\thandle: number,\n\t\tfeatures: SCMGroupFeatures,\n\t): Promise<void>;\n\t$updateGroupLabel(\n\t\tsourceControlHandle: number,\n\t\thandle: number,\n\t\tlabel: string,\n\t): Promise<void>;\n\t$unregisterGroup(\n\t\tsourceControlHandle: number,\n\t\thandle: number,\n\t): Promise<void>;\n\n\t$spliceResourceStates(\n\t\tsourceControlHandle: number,\n\t\tsplices: SCMRawResourceSplices[],\n\t): Promise<void>;\n\n\t$setInputBoxValue(\n\t\tsourceControlHandle: number,\n\t\tvalue: string,\n\t): Promise<void>;\n\t$setInputBoxPlaceholder(\n\t\tsourceControlHandle: number,\n\t\tplaceholder: string,\n\t): Promise<void>;\n\t$setInputBoxEnablement(\n\t\tsourceControlHandle: number,\n\t\tenabled: boolean,\n\t): Promise<void>;\n\t$setInputBoxVisibility(\n\t\tsourceControlHandle: number,\n\t\tvisible: boolean,\n\t): Promise<void>;\n\t$showValidationMessage(\n\t\tsourceControlHandle: number,\n\t\tmessage: string | IMarkdownString,\n\t\ttype: InputValidationType,\n\t): Promise<void>;\n\t$setValidationProviderIsEnabled(\n\t\tsourceControlHandle: number,\n\t\tenabled: boolean,\n\t): Promise<void>;\n\n\t$onDidChangeHistoryProviderCurrentHistoryItemRefs(\n\t\tsourceControlHandle: number,\n\t\thistoryItemRef?: SCMHistoryItemRefDto,\n\t\thistoryItemRemoteRef?: SCMHistoryItemRefDto,\n\t\thistoryItemBaseRef?: SCMHistoryItemRefDto,\n\t): Promise<void>;\n\t$onDidChangeHistoryProviderHistoryItemRefs(\n\t\tsourceControlHandle: number,\n\t\thistoryItemRefs: SCMHistoryItemRefsChangeEventDto,\n\t): Promise<void>;\n}\n\nexport interface MainThreadQuickDiffShape extends IDisposable {\n\t$registerQuickDiffProvider(\n\t\thandle: number,\n\t\tselector: IDocumentFilterDto[],\n\t\tlabel: string,\n\t\trootUri: UriComponents | undefined,\n\t): Promise<void>;\n\t$unregisterQuickDiffProvider(handle: number): Promise<void>;\n}\n\nexport type DebugSessionUUID = string;\n\nexport interface IDebugConfiguration {\n\ttype: string;\n\tname: string;\n\trequest: string;\n\t[key: string]: any;\n}\n\nexport interface IStartDebuggingOptions {\n\tparentSessionID?: DebugSessionUUID;\n\tlifecycleManagedByParent?: boolean;\n\trepl?: IDebugSessionReplMode;\n\tnoDebug?: boolean;\n\tcompact?: boolean;\n\tsuppressDebugToolbar?: boolean;\n\tsuppressDebugStatusbar?: boolean;\n\tsuppressDebugView?: boolean;\n\tsuppressSaveBeforeStart?: boolean;\n\ttestRun?: IDebugTestRunReference;\n}\n\nexport interface MainThreadDebugServiceShape extends IDisposable {\n\t$registerDebugTypes(debugTypes: string[]): void;\n\t$sessionCached(sessionID: string): void;\n\t$acceptDAMessage(\n\t\thandle: number,\n\t\tmessage: DebugProtocol.ProtocolMessage,\n\t): void;\n\t$acceptDAError(\n\t\thandle: number,\n\t\tname: string,\n\t\tmessage: string,\n\t\tstack: string | undefined,\n\t): void;\n\t$acceptDAExit(\n\t\thandle: number,\n\t\tcode: number | undefined,\n\t\tsignal: string | undefined,\n\t): void;\n\t$registerDebugConfigurationProvider(\n\t\ttype: string,\n\t\ttriggerKind: DebugConfigurationProviderTriggerKind,\n\t\thasProvideMethod: boolean,\n\t\thasResolveMethod: boolean,\n\t\thasResolve2Method: boolean,\n\t\thandle: number,\n\t): Promise<void>;\n\t$registerDebugAdapterDescriptorFactory(\n\t\ttype: string,\n\t\thandle: number,\n\t): Promise<void>;\n\t$unregisterDebugConfigurationProvider(handle: number): void;\n\t$unregisterDebugAdapterDescriptorFactory(handle: number): void;\n\t$startDebugging(\n\t\tfolder: UriComponents | undefined,\n\t\tnameOrConfig: string | IDebugConfiguration,\n\t\toptions: IStartDebuggingOptions,\n\t): Promise<boolean>;\n\t$stopDebugging(sessionId: DebugSessionUUID | undefined): Promise<void>;\n\t$setDebugSessionName(id: DebugSessionUUID, name: string): void;\n\t$customDebugAdapterRequest(\n\t\tid: DebugSessionUUID,\n\t\tcommand: string,\n\t\targs: any,\n\t): Promise<any>;\n\t$getDebugProtocolBreakpoint(\n\t\tid: DebugSessionUUID,\n\t\tbreakpoinId: string,\n\t): Promise<DebugProtocol.Breakpoint | undefined>;\n\t$appendDebugConsole(value: string): void;\n\t$registerBreakpoints(\n\t\tbreakpoints: Array<\n\t\t\t| ISourceMultiBreakpointDto\n\t\t\t| IFunctionBreakpointDto\n\t\t\t| IDataBreakpointDto\n\t\t>,\n\t): Promise<void>;\n\t$unregisterBreakpoints(\n\t\tbreakpointIds: string[],\n\t\tfunctionBreakpointIds: string[],\n\t\tdataBreakpointIds: string[],\n\t): Promise<void>;\n\t$registerDebugVisualizer(extensionId: string, id: string): void;\n\t$unregisterDebugVisualizer(extensionId: string, id: string): void;\n\t$registerDebugVisualizerTree(treeId: string, canEdit: boolean): void;\n\t$unregisterDebugVisualizerTree(treeId: string): void;\n}\n\nexport interface IOpenUriOptions {\n\treadonly allowTunneling?: boolean;\n\treadonly allowContributedOpeners?: boolean | string;\n}\n\nexport interface MainThreadWindowShape extends IDisposable {\n\t$getInitialState(): Promise<{ isFocused: boolean; isActive: boolean }>;\n\t$openUri(\n\t\turi: UriComponents,\n\t\turiString: string | undefined,\n\t\toptions: IOpenUriOptions,\n\t): Promise<boolean>;\n\t$asExternalUri(\n\t\turi: UriComponents,\n\t\toptions: IOpenUriOptions,\n\t): Promise<UriComponents>;\n}\n\nexport enum CandidatePortSource {\n\tNone = 0,\n\tProcess = 1,\n\tOutput = 2,\n\tHybrid = 3,\n}\n\nexport interface PortAttributesSelector {\n\tportRange?: [number, number] | number;\n\tcommandPattern?: RegExp;\n}\n\nexport interface MainThreadTunnelServiceShape extends IDisposable {\n\t$openTunnel(\n\t\ttunnelOptions: TunnelOptions,\n\t\tsource: string | undefined,\n\t): Promise<TunnelDto | undefined>;\n\t$closeTunnel(remote: { host: string; port: number }): Promise<void>;\n\t$getTunnels(): Promise<TunnelDescription[]>;\n\t$setTunnelProvider(\n\t\tfeatures: TunnelProviderFeatures | undefined,\n\t\tenablePortsView: boolean,\n\t): Promise<void>;\n\t$setRemoteTunnelService(processId: number): Promise<void>;\n\t$setCandidateFilter(): Promise<void>;\n\t$onFoundNewCandidates(candidates: CandidatePort[]): Promise<void>;\n\t$setCandidatePortSource(source: CandidatePortSource): Promise<void>;\n\t$registerPortsAttributesProvider(\n\t\tselector: PortAttributesSelector,\n\t\tproviderHandle: number,\n\t): Promise<void>;\n\t$unregisterPortsAttributesProvider(providerHandle: number): Promise<void>;\n}\n\nexport interface MainThreadTimelineShape extends IDisposable {\n\t$registerTimelineProvider(provider: TimelineProviderDescriptor): void;\n\t$unregisterTimelineProvider(source: string): void;\n\t$emitTimelineChangeEvent(e: TimelineChangeEvent | undefined): void;\n}\n\nexport interface HoverWithId extends languages.Hover {\n\t/**\n\t * Id of the hover\n\t */\n\tid: number;\n}\n\n// -- extension host\n\nexport interface ICommandMetadataDto {\n\t/**\n\t * NOTE: Please use an ILocalizedString. string is in the type for backcompat for now.\n\t * A short summary of what the command does. This will be used in:\n\t * - API commands\n\t * - when showing keybindings that have no other UX\n\t * - when searching for commands in the Command Palette\n\t */\n\treadonly description: ILocalizedString | string;\n\treadonly args?: ReadonlyArray<{\n\t\treadonly name: string;\n\t\treadonly isOptional?: boolean;\n\t\treadonly description?: string;\n\t}>;\n\treadonly returns?: string;\n}\n\nexport interface ExtHostCommandsShape {\n\t$executeContributedCommand(id: string, ...args: any[]): Promise<unknown>;\n\t$getContributedCommandMetadata(): Promise<{\n\t\t[id: string]: string | ICommandMetadataDto;\n\t}>;\n}\n\nexport interface ExtHostConfigurationShape {\n\t$initializeConfiguration(data: IConfigurationInitData): void;\n\t$acceptConfigurationChanged(\n\t\tdata: IConfigurationInitData,\n\t\tchange: IConfigurationChange,\n\t): void;\n}\n\nexport interface ExtHostDiagnosticsShape {\n\t$acceptMarkersChange(data: [UriComponents, IMarkerData[]][]): void;\n}\n\nexport interface ExtHostDocumentContentProvidersShape {\n\t$provideTextDocumentContent(\n\t\thandle: number,\n\t\turi: UriComponents,\n\t): Promise<string | null | undefined>;\n}\n\nexport interface IModelAddedData {\n\turi: UriComponents;\n\tversionId: number;\n\tlines: string[];\n\tEOL: string;\n\tlanguageId: string;\n\tisDirty: boolean;\n}\nexport interface ExtHostDocumentsShape {\n\t$acceptModelLanguageChanged(\n\t\tstrURL: UriComponents,\n\t\tnewLanguageId: string,\n\t): void;\n\t$acceptModelSaved(strURL: UriComponents): void;\n\t$acceptDirtyStateChanged(strURL: UriComponents, isDirty: boolean): void;\n\t$acceptModelChanged(\n\t\tstrURL: UriComponents,\n\t\te: IModelChangedEvent,\n\t\tisDirty: boolean,\n\t): void;\n}\n\nexport interface ExtHostDocumentSaveParticipantShape {\n\t$participateInSave(\n\t\tresource: UriComponents,\n\t\treason: SaveReason,\n\t): Promise<boolean[]>;\n}\n\nexport interface ITextEditorAddData {\n\tid: string;\n\tdocumentUri: UriComponents;\n\toptions: IResolvedTextEditorConfiguration;\n\tselections: ISelection[];\n\tvisibleRanges: IRange[];\n\teditorPosition: EditorGroupColumn | undefined;\n}\nexport interface ITextEditorPositionData {\n\t[id: string]: EditorGroupColumn;\n}\nexport interface IEditorPropertiesChangeData {\n\toptions: IResolvedTextEditorConfiguration | null;\n\tselections: ISelectionChangeEvent | null;\n\tvisibleRanges: IRange[] | null;\n}\nexport interface ISelectionChangeEvent {\n\tselections: Selection[];\n\tsource?: string;\n}\n\nexport interface ExtHostEditorsShape {\n\t$acceptEditorPropertiesChanged(\n\t\tid: string,\n\t\tprops: IEditorPropertiesChangeData,\n\t): void;\n\t$acceptEditorPositionData(data: ITextEditorPositionData): void;\n}\n\nexport interface IDocumentsAndEditorsDelta {\n\tremovedDocuments?: UriComponents[];\n\taddedDocuments?: IModelAddedData[];\n\tremovedEditors?: string[];\n\taddedEditors?: ITextEditorAddData[];\n\tnewActiveEditor?: string | null;\n}\n\nexport interface ExtHostDocumentsAndEditorsShape {\n\t$acceptDocumentsAndEditorsDelta(delta: IDocumentsAndEditorsDelta): void;\n}\n\nexport interface IDataTransferFileDTO {\n\treadonly id: string;\n\treadonly name: string;\n\treadonly uri?: UriComponents;\n}\n\nexport interface DataTransferItemDTO {\n\treadonly asString: string;\n\treadonly fileData: IDataTransferFileDTO | undefined;\n\treadonly uriListData?: ReadonlyArray<string | UriComponents>;\n}\n\nexport interface DataTransferDTO {\n\treadonly items: Array<[/* type */ string, DataTransferItemDTO]>;\n}\n\nexport interface CheckboxUpdate {\n\ttreeItemHandle: string;\n\tnewState: boolean;\n}\n\nexport interface ExtHostTreeViewsShape {\n\t$getChildren(\n\t\ttreeViewId: string,\n\t\ttreeItemHandle?: string,\n\t): Promise<ITreeItem[] | undefined>;\n\t$handleDrop(\n\t\tdestinationViewId: string,\n\t\trequestId: number,\n\t\ttreeDataTransfer: DataTransferDTO,\n\t\ttargetHandle: string | undefined,\n\t\ttoken: CancellationToken,\n\t\toperationUuid?: string,\n\t\tsourceViewId?: string,\n\t\tsourceTreeItemHandles?: string[],\n\t): Promise<void>;\n\t$handleDrag(\n\t\tsourceViewId: string,\n\t\tsourceTreeItemHandles: string[],\n\t\toperationUuid: string,\n\t\ttoken: CancellationToken,\n\t): Promise<DataTransferDTO | undefined>;\n\t$setExpanded(\n\t\ttreeViewId: string,\n\t\ttreeItemHandle: string,\n\t\texpanded: boolean,\n\t): void;\n\t$setSelectionAndFocus(\n\t\ttreeViewId: string,\n\t\tselectionHandles: string[],\n\t\tfocusHandle: string,\n\t): void;\n\t$setVisible(treeViewId: string, visible: boolean): void;\n\t$changeCheckboxState(\n\t\ttreeViewId: string,\n\t\tcheckboxUpdates: CheckboxUpdate[],\n\t): void;\n\t$hasResolve(treeViewId: string): Promise<boolean>;\n\t$resolve(\n\t\ttreeViewId: string,\n\t\ttreeItemHandle: string,\n\t\ttoken: CancellationToken,\n\t): Promise<ITreeItem | undefined>;\n}\n\nexport interface ExtHostWorkspaceShape {\n\t$initializeWorkspace(\n\t\tworkspace: IWorkspaceData | null,\n\t\ttrusted: boolean,\n\t): void;\n\t$acceptWorkspaceData(workspace: IWorkspaceData | null): void;\n\t$handleTextSearchResult(\n\t\tresult: search.IRawFileMatch2,\n\t\trequestId: number,\n\t): void;\n\t$onDidGrantWorkspaceTrust(): void;\n\t$getEditSessionIdentifier(\n\t\tfolder: UriComponents,\n\t\ttoken: CancellationToken,\n\t): Promise<string | undefined>;\n\t$provideEditSessionIdentityMatch(\n\t\tfolder: UriComponents,\n\t\tidentity1: string,\n\t\tidentity2: string,\n\t\ttoken: CancellationToken,\n\t): Promise<EditSessionIdentityMatch | undefined>;\n\t$onWillCreateEditSessionIdentity(\n\t\tfolder: UriComponents,\n\t\ttoken: CancellationToken,\n\t\ttimeout: number,\n\t): Promise<void>;\n\t$provideCanonicalUri(\n\t\turi: UriComponents,\n\t\ttargetScheme: string,\n\t\ttoken: CancellationToken,\n\t): Promise<UriComponents | undefined>;\n}\n\nexport interface ExtHostFileSystemInfoShape {\n\t$acceptProviderInfos(uri: UriComponents, capabilities: number | null): void;\n}\n\nexport interface ExtHostFileSystemShape {\n\t$stat(handle: number, resource: UriComponents): Promise<files.IStat>;\n\t$readdir(\n\t\thandle: number,\n\t\tresource: UriComponents,\n\t): Promise<[string, files.FileType][]>;\n\t$readFile(handle: number, resource: UriComponents): Promise<VSBuffer>;\n\t$writeFile(\n\t\thandle: number,\n\t\tresource: UriComponents,\n\t\tcontent: VSBuffer,\n\t\topts: files.IFileWriteOptions,\n\t): Promise<void>;\n\t$rename(\n\t\thandle: number,\n\t\tresource: UriComponents,\n\t\ttarget: UriComponents,\n\t\topts: files.IFileOverwriteOptions,\n\t): Promise<void>;\n\t$copy(\n\t\thandle: number,\n\t\tresource: UriComponents,\n\t\ttarget: UriComponents,\n\t\topts: files.IFileOverwriteOptions,\n\t): Promise<void>;\n\t$mkdir(handle: number, resource: UriComponents): Promise<void>;\n\t$delete(\n\t\thandle: number,\n\t\tresource: UriComponents,\n\t\topts: files.IFileDeleteOptions,\n\t): Promise<void>;\n\t$watch(\n\t\thandle: number,\n\t\tsession: number,\n\t\tresource: UriComponents,\n\t\topts: files.IWatchOptions,\n\t): void;\n\t$unwatch(handle: number, session: number): void;\n\t$open(\n\t\thandle: number,\n\t\tresource: UriComponents,\n\t\topts: files.IFileOpenOptions,\n\t): Promise<number>;\n\t$close(handle: number, fd: number): Promise<void>;\n\t$read(\n\t\thandle: number,\n\t\tfd: number,\n\t\tpos: number,\n\t\tlength: number,\n\t): Promise<VSBuffer>;\n\t$write(\n\t\thandle: number,\n\t\tfd: number,\n\t\tpos: number,\n\t\tdata: VSBuffer,\n\t): Promise<number>;\n}\n\nexport interface ExtHostLabelServiceShape {\n\t$registerResourceLabelFormatter(\n\t\tformatter: ResourceLabelFormatter,\n\t): IDisposable;\n}\n\nexport interface ExtHostAuthenticationShape {\n\t$getSessions(\n\t\tid: string,\n\t\tscopes: string[] | undefined,\n\t\toptions: IAuthenticationProviderSessionOptions,\n\t): Promise<ReadonlyArray<AuthenticationSession>>;\n\t$createSession(\n\t\tid: string,\n\t\tscopes: string[],\n\t\toptions: IAuthenticationCreateSessionOptions,\n\t): Promise<AuthenticationSession>;\n\t$removeSession(id: string, sessionId: string): Promise<void>;\n\t$onDidChangeAuthenticationSessions(\n\t\tid: string,\n\t\tlabel: string,\n\t): Promise<void>;\n}\n\nexport interface ExtHostAiRelatedInformationShape {\n\t$provideAiRelatedInformation(\n\t\thandle: number,\n\t\tquery: string,\n\t\ttoken: CancellationToken,\n\t): Promise<RelatedInformationResult[]>;\n}\n\nexport interface MainThreadAiRelatedInformationShape {\n\t$getAiRelatedInformation(\n\t\tquery: string,\n\t\ttypes: RelatedInformationType[],\n\t): Promise<RelatedInformationResult[]>;\n\t$registerAiRelatedInformationProvider(\n\t\thandle: number,\n\t\ttype: RelatedInformationType,\n\t): void;\n\t$unregisterAiRelatedInformationProvider(handle: number): void;\n}\n\nexport interface ExtHostAiEmbeddingVectorShape {\n\t$provideAiEmbeddingVector(\n\t\thandle: number,\n\t\tstrings: string[],\n\t\ttoken: CancellationToken,\n\t): Promise<number[][]>;\n}\n\nexport interface MainThreadAiEmbeddingVectorShape {\n\t$registerAiEmbeddingVectorProvider(model: string, handle: number): void;\n\t$unregisterAiEmbeddingVectorProvider(handle: number): void;\n}\n\nexport interface ExtHostSecretStateShape {\n\t$onDidChangePassword(e: {\n\t\textensionId: string;\n\t\tkey: string;\n\t}): Promise<void>;\n}\n\nexport interface ExtHostSearchShape {\n\t$enableExtensionHostSearch(): void;\n\t$provideFileSearchResults(\n\t\thandle: number,\n\t\tsession: number,\n\t\tquery: search.IRawQuery,\n\t\ttoken: CancellationToken,\n\t): Promise<search.ISearchCompleteStats>;\n\t$provideAITextSearchResults(\n\t\thandle: number,\n\t\tsession: number,\n\t\tquery: search.IRawAITextQuery,\n\t\ttoken: CancellationToken,\n\t): Promise<search.ISearchCompleteStats>;\n\t$provideTextSearchResults(\n\t\thandle: number,\n\t\tsession: number,\n\t\tquery: search.IRawTextQuery,\n\t\ttoken: CancellationToken,\n\t): Promise<search.ISearchCompleteStats>;\n\t$clearCache(cacheKey: string): Promise<void>;\n}\n\nexport interface ExtHostExtensionServiceShape {\n\t$resolveAuthority(\n\t\tremoteAuthority: string,\n\t\tresolveAttempt: number,\n\t): Promise<Dto<IResolveAuthorityResult>>;\n\t/**\n\t * Returns `null` if no resolver for `remoteAuthority` is found.\n\t */\n\t$getCanonicalURI(\n\t\tremoteAuthority: string,\n\t\turi: UriComponents,\n\t): Promise<UriComponents | null>;\n\t$startExtensionHost(\n\t\textensionsDelta: IExtensionDescriptionDelta,\n\t): Promise<void>;\n\t$extensionTestsExecute(): Promise<number>;\n\t$activateByEvent(\n\t\tactivationEvent: string,\n\t\tactivationKind: ActivationKind,\n\t): Promise<void>;\n\t$activate(\n\t\textensionId: ExtensionIdentifier,\n\t\treason: ExtensionActivationReason,\n\t): Promise<boolean>;\n\t$setRemoteEnvironment(env: { [key: string]: string | null }): Promise<void>;\n\t$updateRemoteConnectionData(\n\t\tconnectionData: IRemoteConnectionData,\n\t): Promise<void>;\n\n\t$deltaExtensions(\n\t\textensionsDelta: IExtensionDescriptionDelta,\n\t): Promise<void>;\n\n\t$test_latency(n: number): Promise<number>;\n\t$test_up(b: VSBuffer): Promise<number>;\n\t$test_down(size: number): Promise<VSBuffer>;\n}\n\nexport interface FileSystemEvents {\n\tsession?: number;\n\tcreated: UriComponents[];\n\tchanged: UriComponents[];\n\tdeleted: UriComponents[];\n}\n\nexport interface SourceTargetPair {\n\tsource?: UriComponents;\n\ttarget: UriComponents;\n}\n\nexport interface IWillRunFileOperationParticipation {\n\tedit: IWorkspaceEditDto;\n\textensionNames: string[];\n}\n\nexport interface ExtHostFileSystemEventServiceShape {\n\t$onFileEvent(events: FileSystemEvents): void;\n\t$onWillRunFileOperation(\n\t\toperation: files.FileOperation,\n\t\tfiles: readonly SourceTargetPair[],\n\t\ttimeout: number,\n\t\ttoken: CancellationToken,\n\t): Promise<IWillRunFileOperationParticipation | undefined>;\n\t$onDidRunFileOperation(\n\t\toperation: files.FileOperation,\n\t\tfiles: readonly SourceTargetPair[],\n\t): void;\n}\n\nexport interface ExtHostLanguagesShape {\n\t$acceptLanguageIds(ids: string[]): void;\n}\n\nexport interface ExtHostHeapServiceShape {\n\t$onGarbageCollection(ids: number[]): void;\n}\nexport interface IRawColorInfo {\n\tcolor: [number, number, number, number];\n\trange: IRange;\n}\n\nexport class IdObject {\n\t_id?: number;\n\tprivate static _n = 0;\n\tstatic mixin<T extends object>(object: T): T & IdObject {\n\t\t(<any>object)._id = IdObject._n++;\n\t\treturn <any>object;\n\t}\n}\n\nexport enum ISuggestDataDtoField {\n\tlabel = \"a\",\n\tkind = \"b\",\n\tdetail = \"c\",\n\tdocumentation = \"d\",\n\tsortText = \"e\",\n\tfilterText = \"f\",\n\tpreselect = \"g\",\n\tinsertText = \"h\",\n\tinsertTextRules = \"i\",\n\trange = \"j\",\n\tcommitCharacters = \"k\",\n\tadditionalTextEdits = \"l\",\n\tkindModifier = \"m\",\n\tcommandIdent = \"n\",\n\tcommandId = \"o\",\n\tcommandArguments = \"p\",\n}\n\nexport interface ISuggestDataDto {\n\t[ISuggestDataDtoField.label]: string | languages.CompletionItemLabel;\n\t[ISuggestDataDtoField.kind]?: languages.CompletionItemKind;\n\t[ISuggestDataDtoField.detail]?: string;\n\t[ISuggestDataDtoField.documentation]?: string | IMarkdownString;\n\t[ISuggestDataDtoField.sortText]?: string;\n\t[ISuggestDataDtoField.filterText]?: string;\n\t[ISuggestDataDtoField.preselect]?: true;\n\t[ISuggestDataDtoField.insertText]?: string;\n\t[ISuggestDataDtoField.insertTextRules]?: languages.CompletionItemInsertTextRule;\n\t[ISuggestDataDtoField.range]?: IRange | { insert: IRange; replace: IRange };\n\t[ISuggestDataDtoField.commitCharacters]?: string;\n\t[ISuggestDataDtoField.additionalTextEdits]?: ISingleEditOperation[];\n\t[ISuggestDataDtoField.kindModifier]?: languages.CompletionItemTag[];\n\t// Command\n\t[ISuggestDataDtoField.commandIdent]?: string;\n\t[ISuggestDataDtoField.commandId]?: string;\n\t[ISuggestDataDtoField.commandArguments]?: any[];\n\t// not-standard\n\tx?: ChainedCacheId;\n}\n\nexport enum ISuggestResultDtoField {\n\tdefaultRanges = \"a\",\n\tcompletions = \"b\",\n\tisIncomplete = \"c\",\n\tduration = \"d\",\n}\n\nexport interface ISuggestResultDto {\n\t[ISuggestResultDtoField.defaultRanges]: { insert: IRange; replace: IRange };\n\t[ISuggestResultDtoField.completions]: ISuggestDataDto[];\n\t[ISuggestResultDtoField.isIncomplete]: undefined | true;\n\t[ISuggestResultDtoField.duration]: number;\n\tx?: number;\n}\n\nexport interface ISignatureHelpDto {\n\tid: CacheId;\n\tsignatures: languages.SignatureInformation[];\n\tactiveSignature: number;\n\tactiveParameter: number;\n}\n\nexport interface ISignatureHelpContextDto {\n\treadonly triggerKind: languages.SignatureHelpTriggerKind;\n\treadonly triggerCharacter: string | undefined;\n\treadonly isRetrigger: boolean;\n\treadonly activeSignatureHelp: ISignatureHelpDto | undefined;\n}\n\nexport type IInlayHintDto = CachedSessionItem<Dto<languages.InlayHint>>;\n\nexport type IInlayHintsDto = CachedSession<{ hints: IInlayHintDto[] }>;\n\nexport type ILocationDto = Dto<languages.Location>;\nexport type ILocationLinkDto = Dto<languages.LocationLink>;\n\nexport type IWorkspaceSymbolDto = CachedSessionItem<Dto<IWorkspaceSymbol>>;\nexport type IWorkspaceSymbolsDto = CachedSession<{\n\tsymbols: IWorkspaceSymbolDto[];\n}>;\n\nexport interface IWorkspaceEditEntryMetadataDto {\n\tneedsConfirmation: boolean;\n\tlabel: string;\n\tdescription?: string;\n\ticonPath?:\n\t\t| { id: string }\n\t\t| UriComponents\n\t\t| { light: UriComponents; dark: UriComponents };\n}\n\nexport type ICellEditOperationDto =\n\t| notebookCommon.ICellPartialMetadataEdit\n\t| notebookCommon.IDocumentMetadataEdit\n\t| {\n\t\t\teditType: notebookCommon.CellEditType.Replace;\n\t\t\tindex: number;\n\t\t\tcount: number;\n\t\t\tcells: NotebookCellDataDto[];\n\t  };\n\nexport type IWorkspaceCellEditDto = Dto<\n\tOmit<notebookCommon.IWorkspaceNotebookCellEdit, \"cellEdit\">\n> & { cellEdit: ICellEditOperationDto };\n\nexport type IWorkspaceFileEditDto = Dto<\n\tOmit<languages.IWorkspaceFileEdit, \"options\"> & {\n\t\toptions?: Omit<languages.WorkspaceFileEditOptions, \"contents\"> & {\n\t\t\tcontents?:\n\t\t\t\t| { type: \"base64\"; value: string }\n\t\t\t\t| { type: \"dataTransferItem\"; id: string };\n\t\t};\n\t}\n>;\n\nexport type IWorkspaceTextEditDto = Dto<languages.IWorkspaceTextEdit>;\n\nexport interface IWorkspaceEditDto {\n\tedits: Array<\n\t\tIWorkspaceFileEditDto | IWorkspaceTextEditDto | IWorkspaceCellEditDto\n\t>;\n}\n\nexport type ICommandDto = { $ident?: string } & languages.Command;\n\nexport interface ICodeActionDto {\n\tcacheId?: ChainedCacheId;\n\ttitle: string;\n\tedit?: IWorkspaceEditDto;\n\tdiagnostics?: Dto<IMarkerData[]>;\n\tcommand?: ICommandDto;\n\tkind?: string;\n\tisPreferred?: boolean;\n\tisAI?: boolean;\n\tdisabled?: string;\n\tranges?: IRange[];\n}\n\nexport interface ICodeActionListDto {\n\tcacheId: CacheId;\n\tactions: ReadonlyArray<ICodeActionDto>;\n}\n\nexport interface ICodeActionProviderMetadataDto {\n\treadonly providedKinds?: readonly string[];\n\treadonly documentation?: ReadonlyArray<{\n\t\treadonly kind: string;\n\t\treadonly command: ICommandDto;\n\t}>;\n}\n\nexport type CacheId = number;\nexport type ChainedCacheId = [CacheId, CacheId];\n\ntype CachedSessionItem<T> = T & { cacheId?: ChainedCacheId };\ntype CachedSession<T> = T & { cacheId?: CacheId };\n\nexport type ILinksListDto = CachedSession<{ links: ILinkDto[] }>;\nexport type ILinkDto = CachedSessionItem<Dto<languages.ILink>>;\n\nexport type ICodeLensListDto = CachedSession<{ lenses: ICodeLensDto[] }>;\nexport type ICodeLensDto = CachedSessionItem<Dto<languages.CodeLens>>;\n\nexport type ICallHierarchyItemDto = Dto<CallHierarchyItem>;\n\nexport interface IIncomingCallDto {\n\tfrom: ICallHierarchyItemDto;\n\tfromRanges: IRange[];\n}\n\nexport interface IOutgoingCallDto {\n\tfromRanges: IRange[];\n\tto: ICallHierarchyItemDto;\n}\n\nexport interface ILanguageWordDefinitionDto {\n\tlanguageId: string;\n\tregexSource: string;\n\tregexFlags: string;\n}\n\nexport interface ILinkedEditingRangesDto {\n\tranges: IRange[];\n\twordPattern?: IRegExpDto;\n}\n\nexport interface IInlineValueContextDto {\n\tframeId: number;\n\tstoppedLocation: IRange;\n}\n\nexport type ITypeHierarchyItemDto = Dto<TypeHierarchyItem>;\n\nexport interface IPasteEditProviderMetadataDto {\n\treadonly supportsCopy: boolean;\n\treadonly supportsPaste: boolean;\n\treadonly supportsResolve: boolean;\n\n\treadonly providedPasteEditKinds?: readonly string[];\n\treadonly copyMimeTypes?: readonly string[];\n\treadonly pasteMimeTypes?: readonly string[];\n}\n\nexport interface IDocumentPasteContextDto {\n\treadonly only: string | undefined;\n\treadonly triggerKind: languages.DocumentPasteTriggerKind;\n}\n\nexport interface IPasteEditDto {\n\t_cacheId?: ChainedCacheId;\n\ttitle: string;\n\tkind: { value: string } | undefined;\n\tinsertText: string | { snippet: string };\n\tadditionalEdit?: IWorkspaceEditDto;\n\tyieldTo?: readonly string[];\n}\n\nexport interface IDocumentDropEditProviderMetadata {\n\treadonly supportsResolve: boolean;\n\n\tdropMimeTypes: readonly string[];\n}\n\nexport interface IDocumentDropEditDto {\n\t_cacheId?: ChainedCacheId;\n\ttitle: string;\n\tkind: string | undefined;\n\tinsertText: string | { snippet: string };\n\tadditionalEdit?: IWorkspaceEditDto;\n\tyieldTo?: readonly string[];\n}\n\nexport interface ExtHostLanguageFeaturesShape {\n\t$provideDocumentSymbols(\n\t\thandle: number,\n\t\tresource: UriComponents,\n\t\ttoken: CancellationToken,\n\t): Promise<languages.DocumentSymbol[] | undefined>;\n\t$provideCodeLenses(\n\t\thandle: number,\n\t\tresource: UriComponents,\n\t\ttoken: CancellationToken,\n\t): Promise<ICodeLensListDto | undefined>;\n\t$resolveCodeLens(\n\t\thandle: number,\n\t\tsymbol: ICodeLensDto,\n\t\ttoken: CancellationToken,\n\t): Promise<ICodeLensDto | undefined>;\n\t$releaseCodeLenses(handle: number, id: number): void;\n\t$provideDefinition(\n\t\thandle: number,\n\t\tresource: UriComponents,\n\t\tposition: IPosition,\n\t\ttoken: CancellationToken,\n\t): Promise<ILocationLinkDto[]>;\n\t$provideDeclaration(\n\t\thandle: number,\n\t\tresource: UriComponents,\n\t\tposition: IPosition,\n\t\ttoken: CancellationToken,\n\t): Promise<ILocationLinkDto[]>;\n\t$provideImplementation(\n\t\thandle: number,\n\t\tresource: UriComponents,\n\t\tposition: IPosition,\n\t\ttoken: CancellationToken,\n\t): Promise<ILocationLinkDto[]>;\n\t$provideTypeDefinition(\n\t\thandle: number,\n\t\tresource: UriComponents,\n\t\tposition: IPosition,\n\t\ttoken: CancellationToken,\n\t): Promise<ILocationLinkDto[]>;\n\t$provideHover(\n\t\thandle: number,\n\t\tresource: UriComponents,\n\t\tposition: IPosition,\n\t\tcontext: languages.HoverContext<{ id: number }> | undefined,\n\t\ttoken: CancellationToken,\n\t): Promise<HoverWithId | undefined>;\n\t$releaseHover(handle: number, id: number): void;\n\t$provideEvaluatableExpression(\n\t\thandle: number,\n\t\tresource: UriComponents,\n\t\tposition: IPosition,\n\t\ttoken: CancellationToken,\n\t): Promise<languages.EvaluatableExpression | undefined>;\n\t$provideInlineValues(\n\t\thandle: number,\n\t\tresource: UriComponents,\n\t\trange: IRange,\n\t\tcontext: languages.InlineValueContext,\n\t\ttoken: CancellationToken,\n\t): Promise<languages.InlineValue[] | undefined>;\n\t$provideDocumentHighlights(\n\t\thandle: number,\n\t\tresource: UriComponents,\n\t\tposition: IPosition,\n\t\ttoken: CancellationToken,\n\t): Promise<languages.DocumentHighlight[] | undefined>;\n\t$provideMultiDocumentHighlights(\n\t\thandle: number,\n\t\tresource: UriComponents,\n\t\tposition: IPosition,\n\t\totherModels: UriComponents[],\n\t\ttoken: CancellationToken,\n\t): Promise<Dto<languages.MultiDocumentHighlight[]> | undefined>;\n\t$provideLinkedEditingRanges(\n\t\thandle: number,\n\t\tresource: UriComponents,\n\t\tposition: IPosition,\n\t\ttoken: CancellationToken,\n\t): Promise<ILinkedEditingRangesDto | undefined>;\n\t$provideReferences(\n\t\thandle: number,\n\t\tresource: UriComponents,\n\t\tposition: IPosition,\n\t\tcontext: languages.ReferenceContext,\n\t\ttoken: CancellationToken,\n\t): Promise<ILocationDto[] | undefined>;\n\t$provideCodeActions(\n\t\thandle: number,\n\t\tresource: UriComponents,\n\t\trangeOrSelection: IRange | ISelection,\n\t\tcontext: languages.CodeActionContext,\n\t\ttoken: CancellationToken,\n\t): Promise<ICodeActionListDto | undefined>;\n\t$resolveCodeAction(\n\t\thandle: number,\n\t\tid: ChainedCacheId,\n\t\ttoken: CancellationToken,\n\t): Promise<{ edit?: IWorkspaceEditDto; command?: ICommandDto }>;\n\t$releaseCodeActions(handle: number, cacheId: number): void;\n\t$prepareDocumentPaste(\n\t\thandle: number,\n\t\turi: UriComponents,\n\t\tranges: readonly IRange[],\n\t\tdataTransfer: DataTransferDTO,\n\t\ttoken: CancellationToken,\n\t): Promise<DataTransferDTO | undefined>;\n\t$providePasteEdits(\n\t\thandle: number,\n\t\trequestId: number,\n\t\turi: UriComponents,\n\t\tranges: IRange[],\n\t\tdataTransfer: DataTransferDTO,\n\t\tcontext: IDocumentPasteContextDto,\n\t\ttoken: CancellationToken,\n\t): Promise<IPasteEditDto[] | undefined>;\n\t$resolvePasteEdit(\n\t\thandle: number,\n\t\tid: ChainedCacheId,\n\t\ttoken: CancellationToken,\n\t): Promise<{ additionalEdit?: IWorkspaceEditDto }>;\n\t$releasePasteEdits(handle: number, cacheId: number): void;\n\t$provideDocumentFormattingEdits(\n\t\thandle: number,\n\t\tresource: UriComponents,\n\t\toptions: languages.FormattingOptions,\n\t\ttoken: CancellationToken,\n\t): Promise<ISingleEditOperation[] | undefined>;\n\t$provideDocumentRangeFormattingEdits(\n\t\thandle: number,\n\t\tresource: UriComponents,\n\t\trange: IRange,\n\t\toptions: languages.FormattingOptions,\n\t\ttoken: CancellationToken,\n\t): Promise<ISingleEditOperation[] | undefined>;\n\t$provideDocumentRangesFormattingEdits(\n\t\thandle: number,\n\t\tresource: UriComponents,\n\t\trange: IRange[],\n\t\toptions: languages.FormattingOptions,\n\t\ttoken: CancellationToken,\n\t): Promise<ISingleEditOperation[] | undefined>;\n\t$provideOnTypeFormattingEdits(\n\t\thandle: number,\n\t\tresource: UriComponents,\n\t\tposition: IPosition,\n\t\tch: string,\n\t\toptions: languages.FormattingOptions,\n\t\ttoken: CancellationToken,\n\t): Promise<ISingleEditOperation[] | undefined>;\n\t$provideWorkspaceSymbols(\n\t\thandle: number,\n\t\tsearch: string,\n\t\ttoken: CancellationToken,\n\t): Promise<IWorkspaceSymbolsDto>;\n\t$resolveWorkspaceSymbol(\n\t\thandle: number,\n\t\tsymbol: IWorkspaceSymbolDto,\n\t\ttoken: CancellationToken,\n\t): Promise<IWorkspaceSymbolDto | undefined>;\n\t$releaseWorkspaceSymbols(handle: number, id: number): void;\n\t$provideRenameEdits(\n\t\thandle: number,\n\t\tresource: UriComponents,\n\t\tposition: IPosition,\n\t\tnewName: string,\n\t\ttoken: CancellationToken,\n\t): Promise<(IWorkspaceEditDto & { rejectReason?: string }) | undefined>;\n\t$resolveRenameLocation(\n\t\thandle: number,\n\t\tresource: UriComponents,\n\t\tposition: IPosition,\n\t\ttoken: CancellationToken,\n\t): Promise<languages.RenameLocation | undefined>;\n\t$supportsAutomaticNewSymbolNamesTriggerKind(\n\t\thandle: number,\n\t): Promise<boolean | undefined>;\n\t$provideNewSymbolNames(\n\t\thandle: number,\n\t\tresource: UriComponents,\n\t\trange: IRange,\n\t\ttriggerKind: languages.NewSymbolNameTriggerKind,\n\t\ttoken: CancellationToken,\n\t): Promise<languages.NewSymbolName[] | undefined>;\n\t$provideDocumentSemanticTokens(\n\t\thandle: number,\n\t\tresource: UriComponents,\n\t\tpreviousResultId: number,\n\t\ttoken: CancellationToken,\n\t): Promise<VSBuffer | null>;\n\t$releaseDocumentSemanticTokens(\n\t\thandle: number,\n\t\tsemanticColoringResultId: number,\n\t): void;\n\t$provideDocumentRangeSemanticTokens(\n\t\thandle: number,\n\t\tresource: UriComponents,\n\t\trange: IRange,\n\t\ttoken: CancellationToken,\n\t): Promise<VSBuffer | null>;\n\t$provideCompletionItems(\n\t\thandle: number,\n\t\tresource: UriComponents,\n\t\tposition: IPosition,\n\t\tcontext: languages.CompletionContext,\n\t\ttoken: CancellationToken,\n\t): Promise<ISuggestResultDto | undefined>;\n\t$resolveCompletionItem(\n\t\thandle: number,\n\t\tid: ChainedCacheId,\n\t\ttoken: CancellationToken,\n\t): Promise<ISuggestDataDto | undefined>;\n\t$releaseCompletionItems(handle: number, id: number): void;\n\t$provideInlineCompletions(\n\t\thandle: number,\n\t\tresource: UriComponents,\n\t\tposition: IPosition,\n\t\tcontext: languages.InlineCompletionContext,\n\t\ttoken: CancellationToken,\n\t): Promise<IdentifiableInlineCompletions | undefined>;\n\t$provideInlineEdits(\n\t\thandle: number,\n\t\tresource: UriComponents,\n\t\trange: IRange,\n\t\tcontext: languages.InlineCompletionContext,\n\t\ttoken: CancellationToken,\n\t): Promise<IdentifiableInlineCompletions | undefined>;\n\t$handleInlineCompletionDidShow(\n\t\thandle: number,\n\t\tpid: number,\n\t\tidx: number,\n\t\tupdatedInsertText: string,\n\t): void;\n\t$handleInlineCompletionPartialAccept(\n\t\thandle: number,\n\t\tpid: number,\n\t\tidx: number,\n\t\tacceptedCharacters: number,\n\t\tinfo: languages.PartialAcceptInfo,\n\t): void;\n\t$freeInlineCompletionsList(handle: number, pid: number): void;\n\t$provideSignatureHelp(\n\t\thandle: number,\n\t\tresource: UriComponents,\n\t\tposition: IPosition,\n\t\tcontext: languages.SignatureHelpContext,\n\t\ttoken: CancellationToken,\n\t): Promise<ISignatureHelpDto | undefined>;\n\t$releaseSignatureHelp(handle: number, id: number): void;\n\t$provideInlayHints(\n\t\thandle: number,\n\t\tresource: UriComponents,\n\t\trange: IRange,\n\t\ttoken: CancellationToken,\n\t): Promise<IInlayHintsDto | undefined>;\n\t$resolveInlayHint(\n\t\thandle: number,\n\t\tid: ChainedCacheId,\n\t\ttoken: CancellationToken,\n\t): Promise<IInlayHintDto | undefined>;\n\t$releaseInlayHints(handle: number, id: number): void;\n\t$provideDocumentLinks(\n\t\thandle: number,\n\t\tresource: UriComponents,\n\t\ttoken: CancellationToken,\n\t): Promise<ILinksListDto | undefined>;\n\t$resolveDocumentLink(\n\t\thandle: number,\n\t\tid: ChainedCacheId,\n\t\ttoken: CancellationToken,\n\t): Promise<ILinkDto | undefined>;\n\t$releaseDocumentLinks(handle: number, id: number): void;\n\t$provideDocumentColors(\n\t\thandle: number,\n\t\tresource: UriComponents,\n\t\ttoken: CancellationToken,\n\t): Promise<IRawColorInfo[]>;\n\t$provideColorPresentations(\n\t\thandle: number,\n\t\tresource: UriComponents,\n\t\tcolorInfo: IRawColorInfo,\n\t\ttoken: CancellationToken,\n\t): Promise<languages.IColorPresentation[] | undefined>;\n\t$provideFoldingRanges(\n\t\thandle: number,\n\t\tresource: UriComponents,\n\t\tcontext: languages.FoldingContext,\n\t\ttoken: CancellationToken,\n\t): Promise<languages.FoldingRange[] | undefined>;\n\t$provideSelectionRanges(\n\t\thandle: number,\n\t\tresource: UriComponents,\n\t\tpositions: IPosition[],\n\t\ttoken: CancellationToken,\n\t): Promise<languages.SelectionRange[][]>;\n\t$prepareCallHierarchy(\n\t\thandle: number,\n\t\tresource: UriComponents,\n\t\tposition: IPosition,\n\t\ttoken: CancellationToken,\n\t): Promise<ICallHierarchyItemDto[] | undefined>;\n\t$provideCallHierarchyIncomingCalls(\n\t\thandle: number,\n\t\tsessionId: string,\n\t\titemId: string,\n\t\ttoken: CancellationToken,\n\t): Promise<IIncomingCallDto[] | undefined>;\n\t$provideCallHierarchyOutgoingCalls(\n\t\thandle: number,\n\t\tsessionId: string,\n\t\titemId: string,\n\t\ttoken: CancellationToken,\n\t): Promise<IOutgoingCallDto[] | undefined>;\n\t$releaseCallHierarchy(handle: number, sessionId: string): void;\n\t$setWordDefinitions(wordDefinitions: ILanguageWordDefinitionDto[]): void;\n\t$prepareTypeHierarchy(\n\t\thandle: number,\n\t\tresource: UriComponents,\n\t\tposition: IPosition,\n\t\ttoken: CancellationToken,\n\t): Promise<ITypeHierarchyItemDto[] | undefined>;\n\t$provideTypeHierarchySupertypes(\n\t\thandle: number,\n\t\tsessionId: string,\n\t\titemId: string,\n\t\ttoken: CancellationToken,\n\t): Promise<ITypeHierarchyItemDto[] | undefined>;\n\t$provideTypeHierarchySubtypes(\n\t\thandle: number,\n\t\tsessionId: string,\n\t\titemId: string,\n\t\ttoken: CancellationToken,\n\t): Promise<ITypeHierarchyItemDto[] | undefined>;\n\t$releaseTypeHierarchy(handle: number, sessionId: string): void;\n\t$provideDocumentOnDropEdits(\n\t\thandle: number,\n\t\trequestId: number,\n\t\tresource: UriComponents,\n\t\tposition: IPosition,\n\t\tdataTransferDto: DataTransferDTO,\n\t\ttoken: CancellationToken,\n\t): Promise<IDocumentDropEditDto[] | undefined>;\n\t$releaseDocumentOnDropEdits(handle: number, cacheId: number): void;\n\t$provideMappedEdits(\n\t\thandle: number,\n\t\tdocument: UriComponents,\n\t\tcodeBlocks: string[],\n\t\tcontext: IMappedEditsContextDto,\n\t\ttoken: CancellationToken,\n\t): Promise<IWorkspaceEditDto | null>;\n\t$provideInlineEdit(\n\t\thandle: number,\n\t\tdocument: UriComponents,\n\t\tcontext: languages.IInlineEditContext,\n\t\ttoken: CancellationToken,\n\t): Promise<IdentifiableInlineEdit | undefined>;\n\t$freeInlineEdit(handle: number, pid: number): void;\n}\n\nexport interface ExtHostQuickOpenShape {\n\t$onItemSelected(handle: number): void;\n\t$validateInput(\n\t\tinput: string,\n\t): Promise<\n\t\tstring | { content: string; severity: Severity } | null | undefined\n\t>;\n\t$onDidChangeActive(sessionId: number, handles: number[]): void;\n\t$onDidChangeSelection(sessionId: number, handles: number[]): void;\n\t$onDidAccept(sessionId: number): void;\n\t$onDidChangeValue(sessionId: number, value: string): void;\n\t$onDidTriggerButton(sessionId: number, handle: number): void;\n\t$onDidTriggerItemButton(\n\t\tsessionId: number,\n\t\titemHandle: number,\n\t\tbuttonHandle: number,\n\t): void;\n\t$onDidHide(sessionId: number): void;\n}\n\nexport interface ExtHostTelemetryShape {\n\t$initializeTelemetryLevel(\n\t\tlevel: TelemetryLevel,\n\t\tsupportsTelemetry: boolean,\n\t\tproductConfig?: { usage: boolean; error: boolean },\n\t): void;\n\t$onDidChangeTelemetryLevel(level: TelemetryLevel): void;\n}\n\nexport interface ITerminalLinkDto {\n\t/** The ID of the link to enable activation and disposal. */\n\tid: number;\n\t/** The startIndex of the link in the line. */\n\tstartIndex: number;\n\t/** The length of the link in the line. */\n\tlength: number;\n\t/** The descriptive label for what the link does when activated. */\n\tlabel?: string;\n}\n\nexport interface ITerminalDimensionsDto {\n\tcolumns: number;\n\trows: number;\n}\n\ntype SingleOrMany<T> = T[] | T;\n\nexport interface ITerminalQuickFixTerminalCommandDto {\n\tterminalCommand: string;\n\tshouldExecute?: boolean;\n}\n\nexport interface ITerminalQuickFixOpenerDto {\n\turi: UriComponents;\n}\n\nexport type TerminalQuickFix =\n\t| ITerminalQuickFixTerminalCommandDto\n\t| ITerminalQuickFixOpenerDto\n\t| ICommandDto;\n\nexport interface TerminalCommandMatchResultDto {\n\tcommandLine: string;\n\tcommandLineMatch: RegExpMatchArray;\n\toutputMatch?: {\n\t\tregexMatch: RegExpMatchArray;\n\t\toutputLines: string[];\n\t};\n}\n\nexport interface ITerminalCommandDto {\n\tcommandLine: string | undefined;\n\tcwd: URI | string | undefined;\n\texitCode: number | undefined;\n\toutput: string | undefined;\n}\n\nexport interface ExtHostTerminalServiceShape {\n\t$acceptTerminalClosed(\n\t\tid: number,\n\t\texitCode: number | undefined,\n\t\texitReason: TerminalExitReason,\n\t): void;\n\t$acceptTerminalOpened(\n\t\tid: number,\n\t\textHostTerminalId: string | undefined,\n\t\tname: string,\n\t\tshellLaunchConfig: IShellLaunchConfigDto,\n\t): void;\n\t$acceptActiveTerminalChanged(id: number | null): void;\n\t$acceptTerminalProcessId(id: number, processId: number): void;\n\t$acceptTerminalProcessData(id: number, data: string): void;\n\t$acceptDidExecuteCommand(id: number, command: ITerminalCommandDto): void;\n\t$acceptTerminalTitleChange(id: number, name: string): void;\n\t$acceptTerminalDimensions(id: number, cols: number, rows: number): void;\n\t$acceptTerminalMaximumDimensions(\n\t\tid: number,\n\t\tcols: number,\n\t\trows: number,\n\t): void;\n\t$acceptTerminalInteraction(id: number): void;\n\t$acceptTerminalSelection(id: number, selection: string | undefined): void;\n\t$startExtensionTerminal(\n\t\tid: number,\n\t\tinitialDimensions: ITerminalDimensionsDto | undefined,\n\t): Promise<ITerminalLaunchError | undefined>;\n\t$acceptProcessAckDataEvent(id: number, charCount: number): void;\n\t$acceptProcessInput(id: number, data: string): void;\n\t$acceptProcessResize(id: number, cols: number, rows: number): void;\n\t$acceptProcessShutdown(id: number, immediate: boolean): void;\n\t$acceptProcessRequestInitialCwd(id: number): void;\n\t$acceptProcessRequestCwd(id: number): void;\n\t$acceptProcessRequestLatency(id: number): Promise<number>;\n\t$provideLinks(id: number, line: string): Promise<ITerminalLinkDto[]>;\n\t$activateLink(id: number, linkId: number): void;\n\t$initEnvironmentVariableCollections(\n\t\tcollections: [string, ISerializableEnvironmentVariableCollection][],\n\t): void;\n\t$acceptDefaultProfile(\n\t\tprofile: ITerminalProfile,\n\t\tautomationProfile: ITerminalProfile,\n\t): void;\n\t$createContributedProfileTerminal(\n\t\tid: string,\n\t\toptions: ICreateContributedTerminalProfileOptions,\n\t): Promise<void>;\n\t$provideTerminalQuickFixes(\n\t\tid: string,\n\t\tmatchResult: TerminalCommandMatchResultDto,\n\t\ttoken: CancellationToken,\n\t): Promise<SingleOrMany<TerminalQuickFix> | undefined>;\n}\n\nexport interface ExtHostTerminalShellIntegrationShape {\n\t$shellIntegrationChange(instanceId: number): void;\n\t$shellExecutionStart(\n\t\tinstanceId: number,\n\t\tcommandLineValue: string,\n\t\tcommandLineConfidence: TerminalShellExecutionCommandLineConfidence,\n\t\tisTrusted: boolean,\n\t\tcwd: UriComponents | undefined,\n\t): void;\n\t$shellExecutionEnd(\n\t\tinstanceId: number,\n\t\tcommandLineValue: string,\n\t\tcommandLineConfidence: TerminalShellExecutionCommandLineConfidence,\n\t\tisTrusted: boolean,\n\t\texitCode: number | undefined,\n\t): void;\n\t$shellExecutionData(instanceId: number, data: string): void;\n\t$cwdChange(instanceId: number, cwd: UriComponents | undefined): void;\n\t$closeTerminal(instanceId: number): void;\n}\n\nexport interface ExtHostSCMShape {\n\t$provideOriginalResource(\n\t\tsourceControlHandle: number,\n\t\turi: UriComponents,\n\t\ttoken: CancellationToken,\n\t): Promise<UriComponents | null>;\n\t$onInputBoxValueChange(sourceControlHandle: number, value: string): void;\n\t$executeResourceCommand(\n\t\tsourceControlHandle: number,\n\t\tgroupHandle: number,\n\t\thandle: number,\n\t\tpreserveFocus: boolean,\n\t): Promise<void>;\n\t$validateInput(\n\t\tsourceControlHandle: number,\n\t\tvalue: string,\n\t\tcursorPosition: number,\n\t): Promise<[string | IMarkdownString, number] | undefined>;\n\t$setSelectedSourceControl(\n\t\tselectedSourceControlHandle: number | undefined,\n\t): Promise<void>;\n\t$provideHistoryItemRefs(\n\t\tsourceControlHandle: number,\n\t\ttoken: CancellationToken,\n\t): Promise<SCMHistoryItemRefDto[] | undefined>;\n\t$provideHistoryItems(\n\t\tsourceControlHandle: number,\n\t\toptions: any,\n\t\ttoken: CancellationToken,\n\t): Promise<SCMHistoryItemDto[] | undefined>;\n\t$provideHistoryItemChanges(\n\t\tsourceControlHandle: number,\n\t\thistoryItemId: string,\n\t\thistoryItemParentId: string | undefined,\n\t\ttoken: CancellationToken,\n\t): Promise<SCMHistoryItemChangeDto[] | undefined>;\n\t$resolveHistoryItemRefsCommonAncestor(\n\t\tsourceControlHandle: number,\n\t\thistoryItemRefs: string[],\n\t\ttoken: CancellationToken,\n\t): Promise<string | undefined>;\n}\n\nexport interface ExtHostQuickDiffShape {\n\t$provideOriginalResource(\n\t\tsourceControlHandle: number,\n\t\turi: UriComponents,\n\t\ttoken: CancellationToken,\n\t): Promise<UriComponents | null>;\n}\n\nexport interface ExtHostShareShape {\n\t$provideShare(\n\t\thandle: number,\n\t\tshareableItem: IShareableItemDto,\n\t\ttoken: CancellationToken,\n\t): Promise<UriComponents | string | undefined>;\n}\n\nexport interface ExtHostTaskShape {\n\t$provideTasks(\n\t\thandle: number,\n\t\tvalidTypes: { [key: string]: boolean },\n\t): Promise<tasks.ITaskSetDTO>;\n\t$resolveTask(\n\t\thandle: number,\n\t\ttaskDTO: tasks.ITaskDTO,\n\t): Promise<tasks.ITaskDTO | undefined>;\n\t$onDidStartTask(\n\t\texecution: tasks.ITaskExecutionDTO,\n\t\tterminalId: number,\n\t\tresolvedDefinition: tasks.ITaskDefinitionDTO,\n\t): void;\n\t$onDidStartTaskProcess(value: tasks.ITaskProcessStartedDTO): void;\n\t$onDidEndTaskProcess(value: tasks.ITaskProcessEndedDTO): void;\n\t$OnDidEndTask(execution: tasks.ITaskExecutionDTO): void;\n\t$resolveVariables(\n\t\tworkspaceFolder: UriComponents,\n\t\ttoResolve: {\n\t\t\tprocess?: { name: string; cwd?: string };\n\t\t\tvariables: string[];\n\t\t},\n\t): Promise<{ process?: string; variables: { [key: string]: string } }>;\n\t$jsonTasksSupported(): Promise<boolean>;\n\t$findExecutable(\n\t\tcommand: string,\n\t\tcwd?: string,\n\t\tpaths?: string[],\n\t): Promise<string | undefined>;\n}\n\nexport interface IBreakpointDto {\n\ttype: string;\n\tid?: string;\n\tenabled: boolean;\n\tcondition?: string;\n\thitCondition?: string;\n\tlogMessage?: string;\n\tmode?: string;\n}\n\nexport interface IFunctionBreakpointDto extends IBreakpointDto {\n\ttype: \"function\";\n\tfunctionName: string;\n\tmode?: string;\n}\n\nexport interface IDataBreakpointDto extends IBreakpointDto {\n\ttype: \"data\";\n\tdataId: string;\n\tcanPersist: boolean;\n\tlabel: string;\n\taccessTypes?: DebugProtocol.DataBreakpointAccessType[];\n\taccessType: DebugProtocol.DataBreakpointAccessType;\n\tmode?: string;\n}\n\nexport interface ISourceBreakpointDto extends IBreakpointDto {\n\ttype: \"source\";\n\turi: UriComponents;\n\tline: number;\n\tcharacter: number;\n}\n\nexport interface IBreakpointsDeltaDto {\n\tadded?: Array<\n\t\tISourceBreakpointDto | IFunctionBreakpointDto | IDataBreakpointDto\n\t>;\n\tremoved?: string[];\n\tchanged?: Array<\n\t\tISourceBreakpointDto | IFunctionBreakpointDto | IDataBreakpointDto\n\t>;\n}\n\nexport interface ISourceMultiBreakpointDto {\n\ttype: \"sourceMulti\";\n\turi: UriComponents;\n\tlines: {\n\t\tid: string;\n\t\tenabled: boolean;\n\t\tcondition?: string;\n\t\thitCondition?: string;\n\t\tlogMessage?: string;\n\t\tline: number;\n\t\tcharacter: number;\n\t\tmode?: string;\n\t}[];\n}\n\nexport interface IDebugSessionFullDto {\n\tid: DebugSessionUUID;\n\ttype: string;\n\tname: string;\n\tparent: DebugSessionUUID | undefined;\n\tfolderUri: UriComponents | undefined;\n\tconfiguration: IConfig;\n}\n\nexport type IDebugSessionDto = IDebugSessionFullDto | DebugSessionUUID;\n\nexport interface IThreadFocusDto {\n\tkind: \"thread\";\n\tsessionId: string;\n\tthreadId: number;\n}\n\nexport interface IStackFrameFocusDto {\n\tkind: \"stackFrame\";\n\tsessionId: string;\n\tthreadId: number;\n\tframeId: number;\n}\n\nexport interface ExtHostDebugServiceShape {\n\t$substituteVariables(\n\t\tfolder: UriComponents | undefined,\n\t\tconfig: IConfig,\n\t): Promise<IConfig>;\n\t$runInTerminal(\n\t\targs: DebugProtocol.RunInTerminalRequestArguments,\n\t\tsessionId: string,\n\t): Promise<number | undefined>;\n\t$startDASession(handle: number, session: IDebugSessionDto): Promise<void>;\n\t$stopDASession(handle: number): Promise<void>;\n\t$sendDAMessage(\n\t\thandle: number,\n\t\tmessage: DebugProtocol.ProtocolMessage,\n\t): void;\n\t$resolveDebugConfiguration(\n\t\thandle: number,\n\t\tfolder: UriComponents | undefined,\n\t\tdebugConfiguration: IConfig,\n\t\ttoken: CancellationToken,\n\t): Promise<IConfig | null | undefined>;\n\t$resolveDebugConfigurationWithSubstitutedVariables(\n\t\thandle: number,\n\t\tfolder: UriComponents | undefined,\n\t\tdebugConfiguration: IConfig,\n\t\ttoken: CancellationToken,\n\t): Promise<IConfig | null | undefined>;\n\t$provideDebugConfigurations(\n\t\thandle: number,\n\t\tfolder: UriComponents | undefined,\n\t\ttoken: CancellationToken,\n\t): Promise<IConfig[]>;\n\t$provideDebugAdapter(\n\t\thandle: number,\n\t\tsession: IDebugSessionDto,\n\t): Promise<Dto<IAdapterDescriptor>>;\n\t$acceptDebugSessionStarted(session: IDebugSessionDto): void;\n\t$acceptDebugSessionTerminated(session: IDebugSessionDto): void;\n\t$acceptDebugSessionActiveChanged(\n\t\tsession: IDebugSessionDto | undefined,\n\t): void;\n\t$acceptDebugSessionCustomEvent(session: IDebugSessionDto, event: any): void;\n\t$acceptBreakpointsDelta(delta: IBreakpointsDeltaDto): void;\n\t$acceptDebugSessionNameChanged(\n\t\tsession: IDebugSessionDto,\n\t\tname: string,\n\t): void;\n\t$acceptStackFrameFocus(\n\t\tfocus: IThreadFocusDto | IStackFrameFocusDto | undefined,\n\t): void;\n\t$provideDebugVisualizers(\n\t\textensionId: string,\n\t\tid: string,\n\t\tcontext: IDebugVisualizationContext,\n\t\ttoken: CancellationToken,\n\t): Promise<IDebugVisualization.Serialized[]>;\n\t$resolveDebugVisualizer(\n\t\tid: number,\n\t\ttoken: CancellationToken,\n\t): Promise<MainThreadDebugVisualization>;\n\t$executeDebugVisualizerCommand(id: number): Promise<void>;\n\t$disposeDebugVisualizers(ids: number[]): void;\n\t$getVisualizerTreeItem(\n\t\ttreeId: string,\n\t\telement: IDebugVisualizationContext,\n\t): Promise<IDebugVisualizationTreeItem.Serialized | undefined>;\n\t$getVisualizerTreeItemChildren(\n\t\ttreeId: string,\n\t\telement: number,\n\t): Promise<IDebugVisualizationTreeItem.Serialized[]>;\n\t$editVisualizerTreeItem(\n\t\telement: number,\n\t\tvalue: string,\n\t): Promise<IDebugVisualizationTreeItem.Serialized | undefined>;\n\t$disposeVisualizedTree(element: number): void;\n}\n\nexport interface DecorationRequest {\n\treadonly id: number;\n\treadonly uri: UriComponents;\n}\n\nexport type DecorationData = [boolean, string, string | ThemeIcon, ThemeColor];\nexport type DecorationReply = { [id: number]: DecorationData };\n\nexport interface ExtHostDecorationsShape {\n\t$provideDecorations(\n\t\thandle: number,\n\t\trequests: DecorationRequest[],\n\t\ttoken: CancellationToken,\n\t): Promise<DecorationReply>;\n}\n\nexport interface ExtHostWindowShape {\n\t$onDidChangeWindowFocus(value: boolean): void;\n\t$onDidChangeWindowActive(value: boolean): void;\n}\n\nexport interface ExtHostLogLevelServiceShape {\n\t$setLogLevel(level: LogLevel, resource?: UriComponents): void;\n}\n\nexport interface MainThreadLoggerShape {\n\t$log(file: UriComponents, messages: [LogLevel, string][]): void;\n\t$flush(file: UriComponents): void;\n\t$createLogger(file: UriComponents, options?: ILoggerOptions): Promise<void>;\n\t$registerLogger(logger: UriDto<ILoggerResource>): Promise<void>;\n\t$deregisterLogger(resource: UriComponents): Promise<void>;\n\t$setVisibility(resource: UriComponents, visible: boolean): Promise<void>;\n}\n\nexport interface ExtHostOutputServiceShape {\n\t$setVisibleChannel(channelId: string | null): void;\n}\n\nexport interface ExtHostProgressShape {\n\t$acceptProgressCanceled(handle: number): void;\n}\n\nexport interface ExtHostCommentsShape {\n\t$createCommentThreadTemplate(\n\t\tcommentControllerHandle: number,\n\t\turiComponents: UriComponents,\n\t\trange: IRange | undefined,\n\t\teditorId?: string,\n\t): Promise<void>;\n\t$updateCommentThreadTemplate(\n\t\tcommentControllerHandle: number,\n\t\tthreadHandle: number,\n\t\trange: IRange,\n\t): Promise<void>;\n\t$deleteCommentThread(\n\t\tcommentControllerHandle: number,\n\t\tcommentThreadHandle: number,\n\t): void;\n\t$provideCommentingRanges(\n\t\tcommentControllerHandle: number,\n\t\turiComponents: UriComponents,\n\t\ttoken: CancellationToken,\n\t): Promise<{ ranges: IRange[]; fileComments: boolean } | undefined>;\n\t$toggleReaction(\n\t\tcommentControllerHandle: number,\n\t\tthreadHandle: number,\n\t\turi: UriComponents,\n\t\tcomment: languages.Comment,\n\t\treaction: languages.CommentReaction,\n\t): Promise<void>;\n\t$setActiveComment(\n\t\tcontrollerHandle: number,\n\t\tcommentInfo:\n\t\t\t| { commentThreadHandle: number; uniqueIdInThread?: number }\n\t\t\t| undefined,\n\t): Promise<void>;\n}\n\nexport interface INotebookSelectionChangeEvent {\n\tselections: ICellRange[];\n}\n\nexport interface INotebookVisibleRangesEvent {\n\tranges: ICellRange[];\n}\n\nexport interface INotebookEditorPropertiesChangeData {\n\tvisibleRanges?: INotebookVisibleRangesEvent;\n\tselections?: INotebookSelectionChangeEvent;\n}\n\nexport interface INotebookDocumentPropertiesChangeData {\n\tmetadata?: notebookCommon.NotebookDocumentMetadata;\n}\n\nexport interface INotebookModelAddedData {\n\turi: UriComponents;\n\tversionId: number;\n\tcells: NotebookCellDto[];\n\tviewType: string;\n\tmetadata?: notebookCommon.NotebookDocumentMetadata;\n}\n\nexport interface INotebookEditorAddData {\n\tid: string;\n\tdocumentUri: UriComponents;\n\tselections: ICellRange[];\n\tvisibleRanges: ICellRange[];\n\tviewColumn?: number;\n}\n\nexport interface INotebookDocumentsAndEditorsDelta {\n\tremovedDocuments?: UriComponents[];\n\taddedDocuments?: INotebookModelAddedData[];\n\tremovedEditors?: string[];\n\taddedEditors?: INotebookEditorAddData[];\n\tnewActiveEditor?: string | null;\n\tvisibleEditors?: string[];\n}\n\nexport interface NotebookOutputItemDto {\n\treadonly mime: string;\n\treadonly valueBytes: VSBuffer;\n}\n\nexport interface NotebookOutputDto {\n\titems: NotebookOutputItemDto[];\n\toutputId: string;\n\tmetadata?: Record<string, any>;\n}\n\nexport interface NotebookCellDataDto {\n\tsource: string;\n\tlanguage: string;\n\tmime: string | undefined;\n\tcellKind: notebookCommon.CellKind;\n\toutputs: NotebookOutputDto[];\n\tmetadata?: notebookCommon.NotebookCellMetadata;\n\tinternalMetadata?: notebookCommon.NotebookCellInternalMetadata;\n}\n\nexport interface NotebookDataDto {\n\treadonly cells: NotebookCellDataDto[];\n\treadonly metadata: notebookCommon.NotebookDocumentMetadata;\n}\n\nexport interface NotebookCellDto {\n\thandle: number;\n\turi: UriComponents;\n\teol: string;\n\tsource: string[];\n\tlanguage: string;\n\tmime?: string;\n\tcellKind: notebookCommon.CellKind;\n\toutputs: NotebookOutputDto[];\n\tmetadata?: notebookCommon.NotebookCellMetadata;\n\tinternalMetadata?: notebookCommon.NotebookCellInternalMetadata;\n}\n\nexport type INotebookPartialFileStatsWithMetadata = Omit<\n\tfiles.IFileStatWithMetadata,\n\t\"resource\" | \"children\"\n>;\n\nexport interface ExtHostNotebookShape\n\textends ExtHostNotebookDocumentsAndEditorsShape {\n\t$provideNotebookCellStatusBarItems(\n\t\thandle: number,\n\t\turi: UriComponents,\n\t\tindex: number,\n\t\ttoken: CancellationToken,\n\t): Promise<INotebookCellStatusBarListDto | undefined>;\n\t$releaseNotebookCellStatusBarItems(id: number): void;\n\n\t$dataToNotebook(\n\t\thandle: number,\n\t\tdata: VSBuffer,\n\t\ttoken: CancellationToken,\n\t): Promise<SerializableObjectWithBuffers<NotebookDataDto>>;\n\t$notebookToData(\n\t\thandle: number,\n\t\tdata: SerializableObjectWithBuffers<NotebookDataDto>,\n\t\ttoken: CancellationToken,\n\t): Promise<VSBuffer>;\n\t$saveNotebook(\n\t\thandle: number,\n\t\turi: UriComponents,\n\t\tversionId: number,\n\t\toptions: files.IWriteFileOptions,\n\t\ttoken: CancellationToken,\n\t): Promise<INotebookPartialFileStatsWithMetadata>;\n\n\t$searchInNotebooks(\n\t\thandle: number,\n\t\ttextQuery: search.ITextQuery,\n\t\tviewTypeFileTargets: NotebookPriorityInfo[],\n\t\totherViewTypeFileTargets: NotebookPriorityInfo[],\n\t\ttoken: CancellationToken,\n\t): Promise<{ results: IRawClosedNotebookFileMatch[]; limitHit: boolean }>;\n}\n\nexport interface ExtHostNotebookDocumentSaveParticipantShape {\n\t$participateInSave(\n\t\tresource: UriComponents,\n\t\treason: SaveReason,\n\t\ttoken: CancellationToken,\n\t): Promise<boolean>;\n}\n\nexport interface ExtHostNotebookRenderersShape {\n\t$postRendererMessage(\n\t\teditorId: string,\n\t\trendererId: string,\n\t\tmessage: unknown,\n\t): void;\n}\n\nexport interface ExtHostNotebookDocumentsAndEditorsShape {\n\t$acceptDocumentAndEditorsDelta(\n\t\tdelta: SerializableObjectWithBuffers<INotebookDocumentsAndEditorsDelta>,\n\t): void;\n}\n\nexport type NotebookRawContentEventDto =\n\t// notebookCommon.NotebookCellsInitializeEvent<NotebookCellDto>\n\t| {\n\t\t\treadonly kind: notebookCommon.NotebookCellsChangeType.ModelChange;\n\t\t\treadonly changes: notebookCommon.NotebookCellTextModelSplice<NotebookCellDto>[];\n\t  }\n\t| {\n\t\t\treadonly kind: notebookCommon.NotebookCellsChangeType.Move;\n\t\t\treadonly index: number;\n\t\t\treadonly length: number;\n\t\t\treadonly newIdx: number;\n\t  }\n\t| {\n\t\t\treadonly kind: notebookCommon.NotebookCellsChangeType.Output;\n\t\t\treadonly index: number;\n\t\t\treadonly outputs: NotebookOutputDto[];\n\t  }\n\t| {\n\t\t\treadonly kind: notebookCommon.NotebookCellsChangeType.OutputItem;\n\t\t\treadonly index: number;\n\t\t\treadonly outputId: string;\n\t\t\treadonly outputItems: NotebookOutputItemDto[];\n\t\t\treadonly append: boolean;\n\t  }\n\t| notebookCommon.NotebookCellsChangeLanguageEvent\n\t| notebookCommon.NotebookCellsChangeMimeEvent\n\t| notebookCommon.NotebookCellsChangeMetadataEvent\n\t| notebookCommon.NotebookCellsChangeInternalMetadataEvent\n\t// | notebookCommon.NotebookDocumentChangeMetadataEvent\n\t| notebookCommon.NotebookCellContentChangeEvent;\n\t// | notebookCommon.NotebookDocumentUnknownChangeEvent\n\nexport type NotebookCellsChangedEventDto = {\n\treadonly rawEvents: NotebookRawContentEventDto[];\n\treadonly versionId: number;\n};\n\nexport interface ExtHostNotebookDocumentsShape {\n\t$acceptModelChanged(\n\t\turiComponents: UriComponents,\n\t\tevent: SerializableObjectWithBuffers<NotebookCellsChangedEventDto>,\n\t\tisDirty: boolean,\n\t\tnewMetadata?: notebookCommon.NotebookDocumentMetadata,\n\t): void;\n\t$acceptDirtyStateChanged(\n\t\turiComponents: UriComponents,\n\t\tisDirty: boolean,\n\t): void;\n\t$acceptModelSaved(uriComponents: UriComponents): void;\n}\n\nexport type INotebookEditorViewColumnInfo = Record<string, number>;\n\nexport interface ExtHostNotebookEditorsShape {\n\t$acceptEditorPropertiesChanged(\n\t\tid: string,\n\t\tdata: INotebookEditorPropertiesChangeData,\n\t): void;\n\t$acceptEditorViewColumns(data: INotebookEditorViewColumnInfo): void;\n}\n\nexport interface ExtHostNotebookKernelsShape {\n\t$acceptNotebookAssociation(\n\t\thandle: number,\n\t\turi: UriComponents,\n\t\tvalue: boolean,\n\t): void;\n\t$executeCells(\n\t\thandle: number,\n\t\turi: UriComponents,\n\t\thandles: number[],\n\t): Promise<void>;\n\t$cancelCells(\n\t\thandle: number,\n\t\turi: UriComponents,\n\t\thandles: number[],\n\t): Promise<void>;\n\t$acceptKernelMessageFromRenderer(\n\t\thandle: number,\n\t\teditorId: string,\n\t\tmessage: any,\n\t): void;\n\t$cellExecutionChanged(\n\t\turi: UriComponents,\n\t\tcellHandle: number,\n\t\tstate: notebookCommon.NotebookCellExecutionState | undefined,\n\t): void;\n\t$provideKernelSourceActions(\n\t\thandle: number,\n\t\ttoken: CancellationToken,\n\t): Promise<notebookCommon.INotebookKernelSourceAction[]>;\n\t$provideVariables(\n\t\thandle: number,\n\t\trequestId: string,\n\t\tnotebookUri: UriComponents,\n\t\tparentId: number | undefined,\n\t\tkind: \"named\" | \"indexed\",\n\t\tstart: number,\n\t\ttoken: CancellationToken,\n\t): Promise<void>;\n}\n\nexport interface ExtHostInteractiveShape {\n\t$willAddInteractiveDocument(\n\t\turi: UriComponents,\n\t\teol: string,\n\t\tlanguageId: string,\n\t\tnotebookUri: UriComponents,\n\t): void;\n\t$willRemoveInteractiveDocument(\n\t\turi: UriComponents,\n\t\tnotebookUri: UriComponents,\n\t): void;\n}\n\nexport interface ExtHostStorageShape {\n\t$acceptValue(shared: boolean, extensionId: string, value: string): void;\n}\n\nexport interface ExtHostThemingShape {\n\t$onColorThemeChange(themeType: string): void;\n}\n\nexport interface MainThreadThemingShape extends IDisposable {}\n\nexport interface MainThreadLocalizationShape extends IDisposable {\n\t$fetchBuiltInBundleUri(\n\t\tid: string,\n\t\tlanguage: string,\n\t): Promise<UriComponents | undefined>;\n\t$fetchBundleContents(uriComponents: UriComponents): Promise<string>;\n}\n\nexport interface TunnelDto {\n\tremoteAddress: { port: number; host: string };\n\tlocalAddress: { port: number; host: string } | string;\n\tpublic: boolean;\n\tprivacy: TunnelPrivacyId | string;\n\tprotocol: string | undefined;\n}\n\nexport interface ExtHostTunnelServiceShape {\n\t$forwardPort(\n\t\ttunnelOptions: TunnelOptions,\n\t\ttunnelCreationOptions: TunnelCreationOptions,\n\t): Promise<TunnelDto | string | undefined>;\n\t$closeTunnel(\n\t\tremote: { host: string; port: number },\n\t\tsilent?: boolean,\n\t): Promise<void>;\n\t$onDidTunnelsChange(): Promise<void>;\n\t$registerCandidateFinder(enable: boolean): Promise<void>;\n\t$applyCandidateFilter(\n\t\tcandidates: CandidatePort[],\n\t): Promise<CandidatePort[]>;\n\t$providePortAttributes(\n\t\thandles: number[],\n\t\tports: number[],\n\t\tpid: number | undefined,\n\t\tcommandline: string | undefined,\n\t\tcancellationToken: CancellationToken,\n\t): Promise<ProvidedPortAttributes[]>;\n}\n\nexport interface ExtHostTimelineShape {\n\t$getTimeline(\n\t\tsource: string,\n\t\turi: UriComponents,\n\t\toptions: TimelineOptions,\n\t\ttoken: CancellationToken,\n\t): Promise<Dto<Timeline> | undefined>;\n}\n\nexport enum ExtHostTestingResource {\n\tWorkspace = 0,\n\tTextDocument = 1,\n}\n\nexport interface ExtHostTestingShape {\n\t$runControllerTests(\n\t\treq: IStartControllerTests[],\n\t\ttoken: CancellationToken,\n\t): Promise<{ error?: string }[]>;\n\t$startContinuousRun(\n\t\treq: ICallProfileRunHandler[],\n\t\ttoken: CancellationToken,\n\t): Promise<{ error?: string }[]>;\n\t$cancelExtensionTestRun(\n\t\trunId: string | undefined,\n\t\ttaskId: string | undefined,\n\t): void;\n\t/** Handles a diff of tests, as a result of a subscribeToDiffs() call */\n\t$acceptDiff(diff: TestsDiffOp.Serialized[]): void;\n\t/** Expands a test item's children, by the given number of levels. */\n\t$expandTest(testId: string, levels: number): Promise<void>;\n\t/** Requests coverage details for a test run. Errors if not available. */\n\t$getCoverageDetails(\n\t\tcoverageId: string,\n\t\ttestId: string | undefined,\n\t\ttoken: CancellationToken,\n\t): Promise<CoverageDetails.Serialized[]>;\n\t/** Disposes resources associated with a test run. */\n\t$disposeRun(runId: string): void;\n\t/** Configures a test run config. */\n\t$configureRunProfile(controllerId: string, configId: number): void;\n\t/** Asks the controller to refresh its tests */\n\t$refreshTests(\n\t\tcontrollerId: string,\n\t\ttoken: CancellationToken,\n\t): Promise<void>;\n\t/** Ensures any pending test diffs are flushed */\n\t$syncTests(): Promise<void>;\n\t/** Sets the active test run profiles */\n\t$setDefaultRunProfiles(\n\t\tprofiles: Record</* controller id */ string, /* profile id */ number[]>,\n\t): void;\n\t$getTestsRelatedToCode(\n\t\turi: UriComponents,\n\t\tposition: IPosition,\n\t\ttoken: CancellationToken,\n\t): Promise<string[]>;\n\t$getCodeRelatedToTest(\n\t\ttestId: string,\n\t\ttoken: CancellationToken,\n\t): Promise<ILocationDto[]>;\n\n\t// --- test results:\n\n\t/** Publishes that a test run finished. */\n\t$publishTestResults(results: ISerializedTestResults[]): void;\n\t/** Requests followup actions for a test (failure) message */\n\t$provideTestFollowups(\n\t\treq: TestMessageFollowupRequest,\n\t\ttoken: CancellationToken,\n\t): Promise<TestMessageFollowupResponse[]>;\n\t/** Actions a followup actions for a test (failure) message */\n\t$executeTestFollowup(id: number): Promise<void>;\n\t/** Disposes followup actions for a test (failure) message */\n\t$disposeTestFollowups(id: number[]): void;\n}\n\nexport interface ExtHostLocalizationShape {\n\tgetMessage(extensionId: string, details: IStringDetails): string;\n\tgetBundle(extensionId: string): { [key: string]: string } | undefined;\n\tgetBundleUri(extensionId: string): URI | undefined;\n\tinitializeLocalizedMessages(\n\t\textension: IExtensionDescription,\n\t): Promise<void>;\n}\n\nexport interface IStringDetails {\n\tmessage: string;\n\targs?: Record<string | number, any>;\n\tcomment?: string | string[];\n}\n\nexport interface ITestControllerPatch {\n\tlabel?: string;\n\tcapabilities?: TestControllerCapability;\n}\n\nexport interface MainThreadTestingShape {\n\t// --- test lifecycle:\n\n\t/** Registers that there's a test controller with the given ID */\n\t$registerTestController(\n\t\tcontrollerId: string,\n\t\tlabel: string,\n\t\tcapability: TestControllerCapability,\n\t): void;\n\t/** Updates the label of an existing test controller. */\n\t$updateController(controllerId: string, patch: ITestControllerPatch): void;\n\t/** Diposes of the test controller with the given ID */\n\t$unregisterTestController(controllerId: string): void;\n\t/** Requests tests published to VS Code. */\n\t$subscribeToDiffs(): void;\n\t/** Stops requesting tests published to VS Code. */\n\t$unsubscribeFromDiffs(): void;\n\t/** Publishes that new tests were available on the given source. */\n\t$publishDiff(controllerId: string, diff: TestsDiffOp.Serialized[]): void;\n\t/** Gets coverage details from a test result. */\n\t$getCoverageDetails(\n\t\tresultId: string,\n\t\ttaskIndex: number,\n\t\turi: UriComponents,\n\t\ttoken: CancellationToken,\n\t): Promise<CoverageDetails.Serialized[]>;\n\n\t// --- test run configurations:\n\n\t/** Called when a new test run configuration is available */\n\t$publishTestRunProfile(config: ITestRunProfile): void;\n\t/** Updates an existing test run configuration */\n\t$updateTestRunConfig(\n\t\tcontrollerId: string,\n\t\tconfigId: number,\n\t\tupdate: Partial<ITestRunProfile>,\n\t): void;\n\t/** Removes a previously-published test run config */\n\t$removeTestProfile(controllerId: string, configId: number): void;\n\n\t// --- test run handling:\n\n\t/** Request by an extension to run tests. */\n\t$runTests(\n\t\treq: ResolvedTestRunRequest,\n\t\ttoken: CancellationToken,\n\t): Promise<string>;\n\t/**\n\t * Adds tests to the run. The tests are given in descending depth. The first\n\t * item will be a previously-known test, or a test root.\n\t */\n\t$addTestsToRun(\n\t\tcontrollerId: string,\n\t\trunId: string,\n\t\ttests: ITestItem.Serialized[],\n\t): void;\n\t/** Updates the state of a test run in the given run. */\n\t$updateTestStateInRun(\n\t\trunId: string,\n\t\ttaskId: string,\n\t\ttestId: string,\n\t\tstate: TestResultState,\n\t\tduration?: number,\n\t): void;\n\t/** Appends a message to a test in the run. */\n\t$appendTestMessagesInRun(\n\t\trunId: string,\n\t\ttaskId: string,\n\t\ttestId: string,\n\t\tmessages: ITestMessage.Serialized[],\n\t): void;\n\t/** Appends raw output to the test run.. */\n\t$appendOutputToRun(\n\t\trunId: string,\n\t\ttaskId: string,\n\t\toutput: VSBuffer,\n\t\tlocation?: ILocationDto,\n\t\ttestId?: string,\n\t): void;\n\t/** Triggered when coverage is added to test results. */\n\t$appendCoverage(\n\t\trunId: string,\n\t\ttaskId: string,\n\t\tcoverage: IFileCoverage.Serialized,\n\t): void;\n\t/** Signals a task in a test run started. */\n\t$startedTestRunTask(runId: string, task: ITestRunTask): void;\n\t/** Signals a task in a test run ended. */\n\t$finishedTestRunTask(runId: string, taskId: string): void;\n\t/** Start a new extension-provided test run. */\n\t$startedExtensionTestRun(req: ExtensionRunTestsRequest): void;\n\t/** Signals that an extension-provided test run finished. */\n\t$finishedExtensionTestRun(runId: string): void;\n\t/** Marks a test (or controller) as retired in all results. */\n\t$markTestRetired(testIds: string[] | undefined): void;\n}\n\n// --- proxy identifiers\n\nexport const MainContext = {\n\tMainThreadAuthentication:\n\t\tcreateProxyIdentifier<MainThreadAuthenticationShape>(\n\t\t\t\"MainThreadAuthentication\",\n\t\t),\n\tMainThreadBulkEdits: createProxyIdentifier<MainThreadBulkEditsShape>(\n\t\t\"MainThreadBulkEdits\",\n\t),\n\tMainThreadLanguageModels:\n\t\tcreateProxyIdentifier<MainThreadLanguageModelsShape>(\n\t\t\t\"MainThreadLanguageModels\",\n\t\t),\n\tMainThreadEmbeddings: createProxyIdentifier<MainThreadEmbeddingsShape>(\n\t\t\"MainThreadEmbeddings\",\n\t),\n\tMainThreadChatAgents2: createProxyIdentifier<MainThreadChatAgentsShape2>(\n\t\t\"MainThreadChatAgents2\",\n\t),\n\tMainThreadChatVariables:\n\t\tcreateProxyIdentifier<MainThreadChatVariablesShape>(\n\t\t\t\"MainThreadChatVariables\",\n\t\t),\n\tMainThreadLanguageModelTools:\n\t\tcreateProxyIdentifier<MainThreadLanguageModelToolsShape>(\n\t\t\t\"MainThreadChatSkills\",\n\t\t),\n\tMainThreadClipboard: createProxyIdentifier<MainThreadClipboardShape>(\n\t\t\"MainThreadClipboard\",\n\t),\n\tMainThreadCommands:\n\t\tcreateProxyIdentifier<MainThreadCommandsShape>(\"MainThreadCommands\"),\n\tMainThreadComments:\n\t\tcreateProxyIdentifier<MainThreadCommentsShape>(\"MainThreadComments\"),\n\tMainThreadConfiguration:\n\t\tcreateProxyIdentifier<MainThreadConfigurationShape>(\n\t\t\t\"MainThreadConfiguration\",\n\t\t),\n\tMainThreadConsole:\n\t\tcreateProxyIdentifier<MainThreadConsoleShape>(\"MainThreadConsole\"),\n\tMainThreadDebugService: createProxyIdentifier<MainThreadDebugServiceShape>(\n\t\t\"MainThreadDebugService\",\n\t),\n\tMainThreadDecorations: createProxyIdentifier<MainThreadDecorationsShape>(\n\t\t\"MainThreadDecorations\",\n\t),\n\tMainThreadDiagnostics: createProxyIdentifier<MainThreadDiagnosticsShape>(\n\t\t\"MainThreadDiagnostics\",\n\t),\n\tMainThreadDialogs:\n\t\tcreateProxyIdentifier<MainThreadDiaglogsShape>(\"MainThreadDiaglogs\"),\n\tMainThreadDocuments: createProxyIdentifier<MainThreadDocumentsShape>(\n\t\t\"MainThreadDocuments\",\n\t),\n\tMainThreadDocumentContentProviders:\n\t\tcreateProxyIdentifier<MainThreadDocumentContentProvidersShape>(\n\t\t\t\"MainThreadDocumentContentProviders\",\n\t\t),\n\tMainThreadTextEditors: createProxyIdentifier<MainThreadTextEditorsShape>(\n\t\t\"MainThreadTextEditors\",\n\t),\n\tMainThreadEditorInsets: createProxyIdentifier<MainThreadEditorInsetsShape>(\n\t\t\"MainThreadEditorInsets\",\n\t),\n\tMainThreadEditorTabs: createProxyIdentifier<MainThreadEditorTabsShape>(\n\t\t\"MainThreadEditorTabs\",\n\t),\n\tMainThreadErrors:\n\t\tcreateProxyIdentifier<MainThreadErrorsShape>(\"MainThreadErrors\"),\n\tMainThreadTreeViews: createProxyIdentifier<MainThreadTreeViewsShape>(\n\t\t\"MainThreadTreeViews\",\n\t),\n\tMainThreadDownloadService:\n\t\tcreateProxyIdentifier<MainThreadDownloadServiceShape>(\n\t\t\t\"MainThreadDownloadService\",\n\t\t),\n\tMainThreadLanguageFeatures:\n\t\tcreateProxyIdentifier<MainThreadLanguageFeaturesShape>(\n\t\t\t\"MainThreadLanguageFeatures\",\n\t\t),\n\tMainThreadLanguages: createProxyIdentifier<MainThreadLanguagesShape>(\n\t\t\"MainThreadLanguages\",\n\t),\n\tMainThreadLogger:\n\t\tcreateProxyIdentifier<MainThreadLoggerShape>(\"MainThreadLogger\"),\n\tMainThreadMessageService:\n\t\tcreateProxyIdentifier<MainThreadMessageServiceShape>(\n\t\t\t\"MainThreadMessageService\",\n\t\t),\n\tMainThreadOutputService:\n\t\tcreateProxyIdentifier<MainThreadOutputServiceShape>(\n\t\t\t\"MainThreadOutputService\",\n\t\t),\n\tMainThreadProgress:\n\t\tcreateProxyIdentifier<MainThreadProgressShape>(\"MainThreadProgress\"),\n\tMainThreadQuickDiff: createProxyIdentifier<MainThreadQuickDiffShape>(\n\t\t\"MainThreadQuickDiff\",\n\t),\n\tMainThreadQuickOpen: createProxyIdentifier<MainThreadQuickOpenShape>(\n\t\t\"MainThreadQuickOpen\",\n\t),\n\tMainThreadStatusBar: createProxyIdentifier<MainThreadStatusBarShape>(\n\t\t\"MainThreadStatusBar\",\n\t),\n\tMainThreadSecretState: createProxyIdentifier<MainThreadSecretStateShape>(\n\t\t\"MainThreadSecretState\",\n\t),\n\tMainThreadStorage:\n\t\tcreateProxyIdentifier<MainThreadStorageShape>(\"MainThreadStorage\"),\n\tMainThreadSpeech: createProxyIdentifier<MainThreadSpeechShape>(\n\t\t\"MainThreadSpeechProvider\",\n\t),\n\tMainThreadTelemetry: createProxyIdentifier<MainThreadTelemetryShape>(\n\t\t\"MainThreadTelemetry\",\n\t),\n\tMainThreadTerminalService:\n\t\tcreateProxyIdentifier<MainThreadTerminalServiceShape>(\n\t\t\t\"MainThreadTerminalService\",\n\t\t),\n\tMainThreadTerminalShellIntegration:\n\t\tcreateProxyIdentifier<MainThreadTerminalShellIntegrationShape>(\n\t\t\t\"MainThreadTerminalShellIntegration\",\n\t\t),\n\tMainThreadWebviews:\n\t\tcreateProxyIdentifier<MainThreadWebviewsShape>(\"MainThreadWebviews\"),\n\tMainThreadWebviewPanels:\n\t\tcreateProxyIdentifier<MainThreadWebviewPanelsShape>(\n\t\t\t\"MainThreadWebviewPanels\",\n\t\t),\n\tMainThreadWebviewViews: createProxyIdentifier<MainThreadWebviewViewsShape>(\n\t\t\"MainThreadWebviewViews\",\n\t),\n\tMainThreadCustomEditors:\n\t\tcreateProxyIdentifier<MainThreadCustomEditorsShape>(\n\t\t\t\"MainThreadCustomEditors\",\n\t\t),\n\tMainThreadUrls:\n\t\tcreateProxyIdentifier<MainThreadUrlsShape>(\"MainThreadUrls\"),\n\tMainThreadUriOpeners: createProxyIdentifier<MainThreadUriOpenersShape>(\n\t\t\"MainThreadUriOpeners\",\n\t),\n\tMainThreadProfileContentHandlers:\n\t\tcreateProxyIdentifier<MainThreadProfileContentHandlersShape>(\n\t\t\t\"MainThreadProfileContentHandlers\",\n\t\t),\n\tMainThreadWorkspace: createProxyIdentifier<MainThreadWorkspaceShape>(\n\t\t\"MainThreadWorkspace\",\n\t),\n\tMainThreadFileSystem: createProxyIdentifier<MainThreadFileSystemShape>(\n\t\t\"MainThreadFileSystem\",\n\t),\n\tMainThreadFileSystemEventService:\n\t\tcreateProxyIdentifier<MainThreadFileSystemEventServiceShape>(\n\t\t\t\"MainThreadFileSystemEventService\",\n\t\t),\n\tMainThreadExtensionService:\n\t\tcreateProxyIdentifier<MainThreadExtensionServiceShape>(\n\t\t\t\"MainThreadExtensionService\",\n\t\t),\n\tMainThreadSCM: createProxyIdentifier<MainThreadSCMShape>(\"MainThreadSCM\"),\n\tMainThreadSearch:\n\t\tcreateProxyIdentifier<MainThreadSearchShape>(\"MainThreadSearch\"),\n\tMainThreadShare:\n\t\tcreateProxyIdentifier<MainThreadShareShape>(\"MainThreadShare\"),\n\tMainThreadTask:\n\t\tcreateProxyIdentifier<MainThreadTaskShape>(\"MainThreadTask\"),\n\tMainThreadWindow:\n\t\tcreateProxyIdentifier<MainThreadWindowShape>(\"MainThreadWindow\"),\n\tMainThreadLabelService: createProxyIdentifier<MainThreadLabelServiceShape>(\n\t\t\"MainThreadLabelService\",\n\t),\n\tMainThreadNotebook:\n\t\tcreateProxyIdentifier<MainThreadNotebookShape>(\"MainThreadNotebook\"),\n\tMainThreadNotebookDocuments:\n\t\tcreateProxyIdentifier<MainThreadNotebookDocumentsShape>(\n\t\t\t\"MainThreadNotebookDocumentsShape\",\n\t\t),\n\tMainThreadNotebookEditors:\n\t\tcreateProxyIdentifier<MainThreadNotebookEditorsShape>(\n\t\t\t\"MainThreadNotebookEditorsShape\",\n\t\t),\n\tMainThreadNotebookKernels:\n\t\tcreateProxyIdentifier<MainThreadNotebookKernelsShape>(\n\t\t\t\"MainThreadNotebookKernels\",\n\t\t),\n\tMainThreadNotebookRenderers:\n\t\tcreateProxyIdentifier<MainThreadNotebookRenderersShape>(\n\t\t\t\"MainThreadNotebookRenderers\",\n\t\t),\n\tMainThreadInteractive: createProxyIdentifier<MainThreadInteractiveShape>(\n\t\t\"MainThreadInteractive\",\n\t),\n\tMainThreadTheming:\n\t\tcreateProxyIdentifier<MainThreadThemingShape>(\"MainThreadTheming\"),\n\tMainThreadTunnelService:\n\t\tcreateProxyIdentifier<MainThreadTunnelServiceShape>(\n\t\t\t\"MainThreadTunnelService\",\n\t\t),\n\tMainThreadManagedSockets:\n\t\tcreateProxyIdentifier<MainThreadManagedSocketsShape>(\n\t\t\t\"MainThreadManagedSockets\",\n\t\t),\n\tMainThreadTimeline:\n\t\tcreateProxyIdentifier<MainThreadTimelineShape>(\"MainThreadTimeline\"),\n\tMainThreadTesting:\n\t\tcreateProxyIdentifier<MainThreadTestingShape>(\"MainThreadTesting\"),\n\tMainThreadLocalization: createProxyIdentifier<MainThreadLocalizationShape>(\n\t\t\"MainThreadLocalizationShape\",\n\t),\n\tMainThreadAiRelatedInformation:\n\t\tcreateProxyIdentifier<MainThreadAiRelatedInformationShape>(\n\t\t\t\"MainThreadAiRelatedInformation\",\n\t\t),\n\tMainThreadAiEmbeddingVector:\n\t\tcreateProxyIdentifier<MainThreadAiEmbeddingVectorShape>(\n\t\t\t\"MainThreadAiEmbeddingVector\",\n\t\t),\n};\n\nexport const ExtHostContext = {\n\tExtHostCommands:\n\t\tcreateProxyIdentifier<ExtHostCommandsShape>(\"ExtHostCommands\"),\n\tExtHostConfiguration: createProxyIdentifier<ExtHostConfigurationShape>(\n\t\t\"ExtHostConfiguration\",\n\t),\n\tExtHostDiagnostics:\n\t\tcreateProxyIdentifier<ExtHostDiagnosticsShape>(\"ExtHostDiagnostics\"),\n\tExtHostDebugService: createProxyIdentifier<ExtHostDebugServiceShape>(\n\t\t\"ExtHostDebugService\",\n\t),\n\tExtHostDecorations:\n\t\tcreateProxyIdentifier<ExtHostDecorationsShape>(\"ExtHostDecorations\"),\n\tExtHostDocumentsAndEditors:\n\t\tcreateProxyIdentifier<ExtHostDocumentsAndEditorsShape>(\n\t\t\t\"ExtHostDocumentsAndEditors\",\n\t\t),\n\tExtHostDocuments:\n\t\tcreateProxyIdentifier<ExtHostDocumentsShape>(\"ExtHostDocuments\"),\n\tExtHostDocumentContentProviders:\n\t\tcreateProxyIdentifier<ExtHostDocumentContentProvidersShape>(\n\t\t\t\"ExtHostDocumentContentProviders\",\n\t\t),\n\tExtHostDocumentSaveParticipant:\n\t\tcreateProxyIdentifier<ExtHostDocumentSaveParticipantShape>(\n\t\t\t\"ExtHostDocumentSaveParticipant\",\n\t\t),\n\tExtHostEditors:\n\t\tcreateProxyIdentifier<ExtHostEditorsShape>(\"ExtHostEditors\"),\n\tExtHostTreeViews:\n\t\tcreateProxyIdentifier<ExtHostTreeViewsShape>(\"ExtHostTreeViews\"),\n\tExtHostFileSystem:\n\t\tcreateProxyIdentifier<ExtHostFileSystemShape>(\"ExtHostFileSystem\"),\n\tExtHostFileSystemInfo: createProxyIdentifier<ExtHostFileSystemInfoShape>(\n\t\t\"ExtHostFileSystemInfo\",\n\t),\n\tExtHostFileSystemEventService:\n\t\tcreateProxyIdentifier<ExtHostFileSystemEventServiceShape>(\n\t\t\t\"ExtHostFileSystemEventService\",\n\t\t),\n\tExtHostLanguages:\n\t\tcreateProxyIdentifier<ExtHostLanguagesShape>(\"ExtHostLanguages\"),\n\tExtHostLanguageFeatures:\n\t\tcreateProxyIdentifier<ExtHostLanguageFeaturesShape>(\n\t\t\t\"ExtHostLanguageFeatures\",\n\t\t),\n\tExtHostQuickOpen:\n\t\tcreateProxyIdentifier<ExtHostQuickOpenShape>(\"ExtHostQuickOpen\"),\n\tExtHostQuickDiff:\n\t\tcreateProxyIdentifier<ExtHostQuickDiffShape>(\"ExtHostQuickDiff\"),\n\tExtHostStatusBar:\n\t\tcreateProxyIdentifier<ExtHostStatusBarShape>(\"ExtHostStatusBar\"),\n\tExtHostShare: createProxyIdentifier<ExtHostShareShape>(\"ExtHostShare\"),\n\tExtHostExtensionService:\n\t\tcreateProxyIdentifier<ExtHostExtensionServiceShape>(\n\t\t\t\"ExtHostExtensionService\",\n\t\t),\n\tExtHostLogLevelServiceShape:\n\t\tcreateProxyIdentifier<ExtHostLogLevelServiceShape>(\n\t\t\t\"ExtHostLogLevelServiceShape\",\n\t\t),\n\tExtHostTerminalService: createProxyIdentifier<ExtHostTerminalServiceShape>(\n\t\t\"ExtHostTerminalService\",\n\t),\n\tExtHostTerminalShellIntegration:\n\t\tcreateProxyIdentifier<ExtHostTerminalShellIntegrationShape>(\n\t\t\t\"ExtHostTerminalShellIntegration\",\n\t\t),\n\tExtHostSCM: createProxyIdentifier<ExtHostSCMShape>(\"ExtHostSCM\"),\n\tExtHostSearch: createProxyIdentifier<ExtHostSearchShape>(\"ExtHostSearch\"),\n\tExtHostTask: createProxyIdentifier<ExtHostTaskShape>(\"ExtHostTask\"),\n\tExtHostWorkspace:\n\t\tcreateProxyIdentifier<ExtHostWorkspaceShape>(\"ExtHostWorkspace\"),\n\tExtHostWindow: createProxyIdentifier<ExtHostWindowShape>(\"ExtHostWindow\"),\n\tExtHostWebviews:\n\t\tcreateProxyIdentifier<ExtHostWebviewsShape>(\"ExtHostWebviews\"),\n\tExtHostWebviewPanels: createProxyIdentifier<ExtHostWebviewPanelsShape>(\n\t\t\"ExtHostWebviewPanels\",\n\t),\n\tExtHostCustomEditors: createProxyIdentifier<ExtHostCustomEditorsShape>(\n\t\t\"ExtHostCustomEditors\",\n\t),\n\tExtHostWebviewViews: createProxyIdentifier<ExtHostWebviewViewsShape>(\n\t\t\"ExtHostWebviewViews\",\n\t),\n\tExtHostEditorInsets: createProxyIdentifier<ExtHostEditorInsetsShape>(\n\t\t\"ExtHostEditorInsets\",\n\t),\n\tExtHostEditorTabs:\n\t\tcreateProxyIdentifier<IExtHostEditorTabsShape>(\"ExtHostEditorTabs\"),\n\tExtHostProgress:\n\t\tcreateProxyIdentifier<ExtHostProgressShape>(\"ExtHostProgress\"),\n\tExtHostComments:\n\t\tcreateProxyIdentifier<ExtHostCommentsShape>(\"ExtHostComments\"),\n\tExtHostSecretState:\n\t\tcreateProxyIdentifier<ExtHostSecretStateShape>(\"ExtHostSecretState\"),\n\tExtHostStorage:\n\t\tcreateProxyIdentifier<ExtHostStorageShape>(\"ExtHostStorage\"),\n\tExtHostUrls: createProxyIdentifier<ExtHostUrlsShape>(\"ExtHostUrls\"),\n\tExtHostUriOpeners:\n\t\tcreateProxyIdentifier<ExtHostUriOpenersShape>(\"ExtHostUriOpeners\"),\n\tExtHostProfileContentHandlers:\n\t\tcreateProxyIdentifier<ExtHostProfileContentHandlersShape>(\n\t\t\t\"ExtHostProfileContentHandlers\",\n\t\t),\n\tExtHostOutputService: createProxyIdentifier<ExtHostOutputServiceShape>(\n\t\t\"ExtHostOutputService\",\n\t),\n\tExtHostLabelService: createProxyIdentifier<ExtHostLabelServiceShape>(\n\t\t\"ExtHostLabelService\",\n\t),\n\tExtHostNotebook:\n\t\tcreateProxyIdentifier<ExtHostNotebookShape>(\"ExtHostNotebook\"),\n\tExtHostNotebookDocuments:\n\t\tcreateProxyIdentifier<ExtHostNotebookDocumentsShape>(\n\t\t\t\"ExtHostNotebookDocuments\",\n\t\t),\n\tExtHostNotebookEditors: createProxyIdentifier<ExtHostNotebookEditorsShape>(\n\t\t\"ExtHostNotebookEditors\",\n\t),\n\tExtHostNotebookKernels: createProxyIdentifier<ExtHostNotebookKernelsShape>(\n\t\t\"ExtHostNotebookKernels\",\n\t),\n\tExtHostNotebookRenderers:\n\t\tcreateProxyIdentifier<ExtHostNotebookRenderersShape>(\n\t\t\t\"ExtHostNotebookRenderers\",\n\t\t),\n\tExtHostNotebookDocumentSaveParticipant:\n\t\tcreateProxyIdentifier<ExtHostNotebookDocumentSaveParticipantShape>(\n\t\t\t\"ExtHostNotebookDocumentSaveParticipant\",\n\t\t),\n\tExtHostInteractive:\n\t\tcreateProxyIdentifier<ExtHostInteractiveShape>(\"ExtHostInteractive\"),\n\tExtHostChatAgents2:\n\t\tcreateProxyIdentifier<ExtHostChatAgentsShape2>(\"ExtHostChatAgents\"),\n\tExtHostChatVariables: createProxyIdentifier<ExtHostChatVariablesShape>(\n\t\t\"ExtHostChatVariables\",\n\t),\n\tExtHostLanguageModelTools:\n\t\tcreateProxyIdentifier<ExtHostLanguageModelToolsShape>(\n\t\t\t\"ExtHostChatSkills\",\n\t\t),\n\tExtHostChatProvider: createProxyIdentifier<ExtHostLanguageModelsShape>(\n\t\t\"ExtHostChatProvider\",\n\t),\n\tExtHostSpeech: createProxyIdentifier<ExtHostSpeechShape>(\"ExtHostSpeech\"),\n\tExtHostEmbeddings:\n\t\tcreateProxyIdentifier<ExtHostEmbeddingsShape>(\"ExtHostEmbeddings\"),\n\tExtHostAiRelatedInformation:\n\t\tcreateProxyIdentifier<ExtHostAiRelatedInformationShape>(\n\t\t\t\"ExtHostAiRelatedInformation\",\n\t\t),\n\tExtHostAiEmbeddingVector:\n\t\tcreateProxyIdentifier<ExtHostAiEmbeddingVectorShape>(\n\t\t\t\"ExtHostAiEmbeddingVector\",\n\t\t),\n\tExtHostTheming:\n\t\tcreateProxyIdentifier<ExtHostThemingShape>(\"ExtHostTheming\"),\n\tExtHostTunnelService: createProxyIdentifier<ExtHostTunnelServiceShape>(\n\t\t\"ExtHostTunnelService\",\n\t),\n\tExtHostManagedSockets: createProxyIdentifier<ExtHostManagedSocketsShape>(\n\t\t\"ExtHostManagedSockets\",\n\t),\n\tExtHostAuthentication: createProxyIdentifier<ExtHostAuthenticationShape>(\n\t\t\"ExtHostAuthentication\",\n\t),\n\tExtHostTimeline:\n\t\tcreateProxyIdentifier<ExtHostTimelineShape>(\"ExtHostTimeline\"),\n\tExtHostTesting:\n\t\tcreateProxyIdentifier<ExtHostTestingShape>(\"ExtHostTesting\"),\n\tExtHostTelemetry:\n\t\tcreateProxyIdentifier<ExtHostTelemetryShape>(\"ExtHostTelemetry\"),\n\tExtHostLocalization: createProxyIdentifier<ExtHostLocalizationShape>(\n\t\t\"ExtHostLocalization\",\n\t),\n};\n"],
  "mappings": ";;AA8NA;AAAA,EAIC;AAAA,OACM;AA0PA,IAAK,uBAAL,kBAAKA,0BAAL;AACN,EAAAA,4CAAA,aAAU,KAAV;AACA,EAAAA,4CAAA,cAAW,KAAX;AACA,EAAAA,4CAAA,+BAA4B,KAA5B;AACA,EAAAA,4CAAA,WAAQ,KAAR;AAJW,SAAAA;AAAA,GAAA;AAswBL,IAAK,eAAL,kBAAKC,kBAAL;AACN,EAAAA,4BAAA,kBAAe,KAAf;AACA,EAAAA,4BAAA,eAAY,KAAZ;AACA,EAAAA,4BAAA,mBAAgB,KAAhB;AACA,EAAAA,4BAAA,oBAAiB,KAAjB;AACA,EAAAA,4BAAA,mBAAgB,KAAhB;AACA,EAAAA,4BAAA,uBAAoB,KAApB;AACA,EAAAA,4BAAA,uBAAoB,KAApB;AACA,EAAAA,4BAAA,wBAAqB,KAArB;AACA,EAAAA,4BAAA,yBAAsB,KAAtB;AACA,EAAAA,4BAAA,4BAAyB,KAAzB;AACA,EAAAA,4BAAA,qBAAkB,MAAlB;AACA,EAAAA,4BAAA,0BAAuB,MAAvB;AAZW,SAAAA;AAAA,GAAA;AAeL,IAAK,wBAAL,kBAAKC,2BAAL;AACN,EAAAA,8CAAA,cAAW,KAAX;AACA,EAAAA,8CAAA,eAAY,KAAZ;AACA,EAAAA,8CAAA,gBAAa,KAAb;AACA,EAAAA,8CAAA,cAAW,KAAX;AAJW,SAAAA;AAAA,GAAA;AA2JL,IAAK,4BAAL,kBAAKC,+BAAL;AACN,EAAAA,sDAAA,cAAW,KAAX;AACA,EAAAA,sDAAA,qBAAkB,KAAlB;AAFW,SAAAA;AAAA,GAAA;AA2BL,IAAK,oCAAL,kBAAKC,uCAAL;AACN,EAAAA,sEAAA,eAAY,KAAZ;AACA,EAAAA,sEAAA,gBAAa,KAAb;AACA,EAAAA,sEAAA,uBAAoB,KAApB;AACA,EAAAA,sEAAA,gBAAa,KAAb;AACA,EAAAA,sEAAA,iBAAc,KAAd;AACA,EAAAA,sEAAA,gBAAa,KAAb;AACA,EAAAA,sEAAA,iBAAc,KAAd;AACA,EAAAA,sEAAA,kBAAe,KAAf;AACA,EAAAA,sEAAA,kBAAe,KAAf;AACA,EAAAA,sEAAA,mBAAgB,MAAhB;AACA,EAAAA,sEAAA,oBAAiB,MAAjB;AAXW,SAAAA;AAAA,GAAA;AA6QL,IAAK,iBAAL,kBAAKC,oBAAL;AACN,EAAAA,gCAAA,UAAO,KAAP;AACA,EAAAA,gCAAA,WAAQ,KAAR;AACA,EAAAA,gCAAA,UAAO,KAAP;AAHW,SAAAA;AAAA,GAAA;AAML,IAAK,2BAAL,kBAAKC,8BAAL;AACN,EAAAA,oDAAA,aAAU,KAAV;AACA,EAAAA,oDAAA,cAAW,KAAX;AACA,EAAAA,oDAAA,+BAA4B,KAA5B;AACA,EAAAA,oDAAA,WAAQ,KAAR;AAJW,SAAAA;AAAA,GAAA;AAijCL,IAAK,sBAAL,kBAAKC,yBAAL;AACN,EAAAA,0CAAA,UAAO,KAAP;AACA,EAAAA,0CAAA,aAAU,KAAV;AACA,EAAAA,0CAAA,YAAS,KAAT;AACA,EAAAA,0CAAA,YAAS,KAAT;AAJW,SAAAA;AAAA,GAAA;AA0eL,MAAM,SAAS;AAAA,EAttGtB,OAstGsB;AAAA;AAAA;AAAA,EACrB;AAAA,EACA,OAAe,KAAK;AAAA,EACpB,OAAO,MAAwB,QAAyB;AACvD,IAAM,OAAQ,MAAM,SAAS;AAC7B,WAAY;AAAA,EACb;AACD;AAEO,IAAK,uBAAL,kBAAKC,0BAAL;AACN,EAAAA,sBAAA,WAAQ;AACR,EAAAA,sBAAA,UAAO;AACP,EAAAA,sBAAA,YAAS;AACT,EAAAA,sBAAA,mBAAgB;AAChB,EAAAA,sBAAA,cAAW;AACX,EAAAA,sBAAA,gBAAa;AACb,EAAAA,sBAAA,eAAY;AACZ,EAAAA,sBAAA,gBAAa;AACb,EAAAA,sBAAA,qBAAkB;AAClB,EAAAA,sBAAA,WAAQ;AACR,EAAAA,sBAAA,sBAAmB;AACnB,EAAAA,sBAAA,yBAAsB;AACtB,EAAAA,sBAAA,kBAAe;AACf,EAAAA,sBAAA,kBAAe;AACf,EAAAA,sBAAA,eAAY;AACZ,EAAAA,sBAAA,sBAAmB;AAhBR,SAAAA;AAAA,GAAA;AAyCL,IAAK,yBAAL,kBAAKC,4BAAL;AACN,EAAAA,wBAAA,mBAAgB;AAChB,EAAAA,wBAAA,iBAAc;AACd,EAAAA,wBAAA,kBAAe;AACf,EAAAA,wBAAA,cAAW;AAJA,SAAAA;AAAA,GAAA;AAw0CL,IAAK,yBAAL,kBAAKC,4BAAL;AACN,EAAAA,gDAAA,eAAY,KAAZ;AACA,EAAAA,gDAAA,kBAAe,KAAf;AAFW,SAAAA;AAAA,GAAA;AA2LL,MAAM,cAAc;AAAA,EAC1B,0BACC;AAAA,IACC;AAAA,EACD;AAAA,EACD,qBAAqB;AAAA,IACpB;AAAA,EACD;AAAA,EACA,0BACC;AAAA,IACC;AAAA,EACD;AAAA,EACD,sBAAsB;AAAA,IACrB;AAAA,EACD;AAAA,EACA,uBAAuB;AAAA,IACtB;AAAA,EACD;AAAA,EACA,yBACC;AAAA,IACC;AAAA,EACD;AAAA,EACD,8BACC;AAAA,IACC;AAAA,EACD;AAAA,EACD,qBAAqB;AAAA,IACpB;AAAA,EACD;AAAA,EACA,oBACC,sBAA+C,oBAAoB;AAAA,EACpE,oBACC,sBAA+C,oBAAoB;AAAA,EACpE,yBACC;AAAA,IACC;AAAA,EACD;AAAA,EACD,mBACC,sBAA8C,mBAAmB;AAAA,EAClE,wBAAwB;AAAA,IACvB;AAAA,EACD;AAAA,EACA,uBAAuB;AAAA,IACtB;AAAA,EACD;AAAA,EACA,uBAAuB;AAAA,IACtB;AAAA,EACD;AAAA,EACA,mBACC,sBAA+C,oBAAoB;AAAA,EACpE,qBAAqB;AAAA,IACpB;AAAA,EACD;AAAA,EACA,oCACC;AAAA,IACC;AAAA,EACD;AAAA,EACD,uBAAuB;AAAA,IACtB;AAAA,EACD;AAAA,EACA,wBAAwB;AAAA,IACvB;AAAA,EACD;AAAA,EACA,sBAAsB;AAAA,IACrB;AAAA,EACD;AAAA,EACA,kBACC,sBAA6C,kBAAkB;AAAA,EAChE,qBAAqB;AAAA,IACpB;AAAA,EACD;AAAA,EACA,2BACC;AAAA,IACC;AAAA,EACD;AAAA,EACD,4BACC;AAAA,IACC;AAAA,EACD;AAAA,EACD,qBAAqB;AAAA,IACpB;AAAA,EACD;AAAA,EACA,kBACC,sBAA6C,kBAAkB;AAAA,EAChE,0BACC;AAAA,IACC;AAAA,EACD;AAAA,EACD,yBACC;AAAA,IACC;AAAA,EACD;AAAA,EACD,oBACC,sBAA+C,oBAAoB;AAAA,EACpE,qBAAqB;AAAA,IACpB;AAAA,EACD;AAAA,EACA,qBAAqB;AAAA,IACpB;AAAA,EACD;AAAA,EACA,qBAAqB;AAAA,IACpB;AAAA,EACD;AAAA,EACA,uBAAuB;AAAA,IACtB;AAAA,EACD;AAAA,EACA,mBACC,sBAA8C,mBAAmB;AAAA,EAClE,kBAAkB;AAAA,IACjB;AAAA,EACD;AAAA,EACA,qBAAqB;AAAA,IACpB;AAAA,EACD;AAAA,EACA,2BACC;AAAA,IACC;AAAA,EACD;AAAA,EACD,oCACC;AAAA,IACC;AAAA,EACD;AAAA,EACD,oBACC,sBAA+C,oBAAoB;AAAA,EACpE,yBACC;AAAA,IACC;AAAA,EACD;AAAA,EACD,wBAAwB;AAAA,IACvB;AAAA,EACD;AAAA,EACA,yBACC;AAAA,IACC;AAAA,EACD;AAAA,EACD,gBACC,sBAA2C,gBAAgB;AAAA,EAC5D,sBAAsB;AAAA,IACrB;AAAA,EACD;AAAA,EACA,kCACC;AAAA,IACC;AAAA,EACD;AAAA,EACD,qBAAqB;AAAA,IACpB;AAAA,EACD;AAAA,EACA,sBAAsB;AAAA,IACrB;AAAA,EACD;AAAA,EACA,kCACC;AAAA,IACC;AAAA,EACD;AAAA,EACD,4BACC;AAAA,IACC;AAAA,EACD;AAAA,EACD,eAAe,sBAA0C,eAAe;AAAA,EACxE,kBACC,sBAA6C,kBAAkB;AAAA,EAChE,iBACC,sBAA4C,iBAAiB;AAAA,EAC9D,gBACC,sBAA2C,gBAAgB;AAAA,EAC5D,kBACC,sBAA6C,kBAAkB;AAAA,EAChE,wBAAwB;AAAA,IACvB;AAAA,EACD;AAAA,EACA,oBACC,sBAA+C,oBAAoB;AAAA,EACpE,6BACC;AAAA,IACC;AAAA,EACD;AAAA,EACD,2BACC;AAAA,IACC;AAAA,EACD;AAAA,EACD,2BACC;AAAA,IACC;AAAA,EACD;AAAA,EACD,6BACC;AAAA,IACC;AAAA,EACD;AAAA,EACD,uBAAuB;AAAA,IACtB;AAAA,EACD;AAAA,EACA,mBACC,sBAA8C,mBAAmB;AAAA,EAClE,yBACC;AAAA,IACC;AAAA,EACD;AAAA,EACD,0BACC;AAAA,IACC;AAAA,EACD;AAAA,EACD,oBACC,sBAA+C,oBAAoB;AAAA,EACpE,mBACC,sBAA8C,mBAAmB;AAAA,EAClE,wBAAwB;AAAA,IACvB;AAAA,EACD;AAAA,EACA,gCACC;AAAA,IACC;AAAA,EACD;AAAA,EACD,6BACC;AAAA,IACC;AAAA,EACD;AACF;AAEO,MAAM,iBAAiB;AAAA,EAC7B,iBACC,sBAA4C,iBAAiB;AAAA,EAC9D,sBAAsB;AAAA,IACrB;AAAA,EACD;AAAA,EACA,oBACC,sBAA+C,oBAAoB;AAAA,EACpE,qBAAqB;AAAA,IACpB;AAAA,EACD;AAAA,EACA,oBACC,sBAA+C,oBAAoB;AAAA,EACpE,4BACC;AAAA,IACC;AAAA,EACD;AAAA,EACD,kBACC,sBAA6C,kBAAkB;AAAA,EAChE,iCACC;AAAA,IACC;AAAA,EACD;AAAA,EACD,gCACC;AAAA,IACC;AAAA,EACD;AAAA,EACD,gBACC,sBAA2C,gBAAgB;AAAA,EAC5D,kBACC,sBAA6C,kBAAkB;AAAA,EAChE,mBACC,sBAA8C,mBAAmB;AAAA,EAClE,uBAAuB;AAAA,IACtB;AAAA,EACD;AAAA,EACA,+BACC;AAAA,IACC;AAAA,EACD;AAAA,EACD,kBACC,sBAA6C,kBAAkB;AAAA,EAChE,yBACC;AAAA,IACC;AAAA,EACD;AAAA,EACD,kBACC,sBAA6C,kBAAkB;AAAA,EAChE,kBACC,sBAA6C,kBAAkB;AAAA,EAChE,kBACC,sBAA6C,kBAAkB;AAAA,EAChE,cAAc,sBAAyC,cAAc;AAAA,EACrE,yBACC;AAAA,IACC;AAAA,EACD;AAAA,EACD,6BACC;AAAA,IACC;AAAA,EACD;AAAA,EACD,wBAAwB;AAAA,IACvB;AAAA,EACD;AAAA,EACA,iCACC;AAAA,IACC;AAAA,EACD;AAAA,EACD,YAAY,sBAAuC,YAAY;AAAA,EAC/D,eAAe,sBAA0C,eAAe;AAAA,EACxE,aAAa,sBAAwC,aAAa;AAAA,EAClE,kBACC,sBAA6C,kBAAkB;AAAA,EAChE,eAAe,sBAA0C,eAAe;AAAA,EACxE,iBACC,sBAA4C,iBAAiB;AAAA,EAC9D,sBAAsB;AAAA,IACrB;AAAA,EACD;AAAA,EACA,sBAAsB;AAAA,IACrB;AAAA,EACD;AAAA,EACA,qBAAqB;AAAA,IACpB;AAAA,EACD;AAAA,EACA,qBAAqB;AAAA,IACpB;AAAA,EACD;AAAA,EACA,mBACC,sBAA+C,mBAAmB;AAAA,EACnE,iBACC,sBAA4C,iBAAiB;AAAA,EAC9D,iBACC,sBAA4C,iBAAiB;AAAA,EAC9D,oBACC,sBAA+C,oBAAoB;AAAA,EACpE,gBACC,sBAA2C,gBAAgB;AAAA,EAC5D,aAAa,sBAAwC,aAAa;AAAA,EAClE,mBACC,sBAA8C,mBAAmB;AAAA,EAClE,+BACC;AAAA,IACC;AAAA,EACD;AAAA,EACD,sBAAsB;AAAA,IACrB;AAAA,EACD;AAAA,EACA,qBAAqB;AAAA,IACpB;AAAA,EACD;AAAA,EACA,iBACC,sBAA4C,iBAAiB;AAAA,EAC9D,0BACC;AAAA,IACC;AAAA,EACD;AAAA,EACD,wBAAwB;AAAA,IACvB;AAAA,EACD;AAAA,EACA,wBAAwB;AAAA,IACvB;AAAA,EACD;AAAA,EACA,0BACC;AAAA,IACC;AAAA,EACD;AAAA,EACD,wCACC;AAAA,IACC;AAAA,EACD;AAAA,EACD,oBACC,sBAA+C,oBAAoB;AAAA,EACpE,oBACC,sBAA+C,mBAAmB;AAAA,EACnE,sBAAsB;AAAA,IACrB;AAAA,EACD;AAAA,EACA,2BACC;AAAA,IACC;AAAA,EACD;AAAA,EACD,qBAAqB;AAAA,IACpB;AAAA,EACD;AAAA,EACA,eAAe,sBAA0C,eAAe;AAAA,EACxE,mBACC,sBAA8C,mBAAmB;AAAA,EAClE,6BACC;AAAA,IACC;AAAA,EACD;AAAA,EACD,0BACC;AAAA,IACC;AAAA,EACD;AAAA,EACD,gBACC,sBAA2C,gBAAgB;AAAA,EAC5D,sBAAsB;AAAA,IACrB;AAAA,EACD;AAAA,EACA,uBAAuB;AAAA,IACtB;AAAA,EACD;AAAA,EACA,uBAAuB;AAAA,IACtB;AAAA,EACD;AAAA,EACA,iBACC,sBAA4C,iBAAiB;AAAA,EAC9D,gBACC,sBAA2C,gBAAgB;AAAA,EAC5D,kBACC,sBAA6C,kBAAkB;AAAA,EAChE,qBAAqB;AAAA,IACpB;AAAA,EACD;AACD;",
  "names": ["TextEditorRevealType", "TabInputKind", "TabModelOperationKind", "WebviewEditorCapabilities", "WebviewMessageArrayBufferViewType", "CellOutputKind", "NotebookEditorRevealType", "CandidatePortSource", "ISuggestDataDtoField", "ISuggestResultDtoField", "ExtHostTestingResource"]
}
