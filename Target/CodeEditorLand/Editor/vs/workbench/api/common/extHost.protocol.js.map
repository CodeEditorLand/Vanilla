{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/api/common/extHost.protocol.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { VSBuffer } from '../../../base/common/buffer.js';\nimport { CancellationToken } from '../../../base/common/cancellation.js';\nimport { IRemoteConsoleLog } from '../../../base/common/console.js';\nimport { SerializedError } from '../../../base/common/errors.js';\nimport { IRelativePattern } from '../../../base/common/glob.js';\nimport { IMarkdownString } from '../../../base/common/htmlContent.js';\nimport { IDisposable } from '../../../base/common/lifecycle.js';\nimport * as performance from '../../../base/common/performance.js';\nimport Severity from '../../../base/common/severity.js';\nimport { ThemeColor, ThemeIcon } from '../../../base/common/themables.js';\nimport { URI, UriComponents, UriDto } from '../../../base/common/uri.js';\nimport { RenderLineNumbersType, TextEditorCursorStyle } from '../../../editor/common/config/editorOptions.js';\nimport { ISingleEditOperation } from '../../../editor/common/core/editOperation.js';\nimport { IPosition } from '../../../editor/common/core/position.js';\nimport { IRange } from '../../../editor/common/core/range.js';\nimport { ISelection, Selection } from '../../../editor/common/core/selection.js';\nimport { IChange } from '../../../editor/common/diff/legacyLinesDiffComputer.js';\nimport * as editorCommon from '../../../editor/common/editorCommon.js';\nimport { StandardTokenType } from '../../../editor/common/encodedTokenAttributes.js';\nimport * as languages from '../../../editor/common/languages.js';\nimport { CharacterPair, CommentRule, EnterAction } from '../../../editor/common/languages/languageConfiguration.js';\nimport { EndOfLineSequence } from '../../../editor/common/model.js';\nimport { IModelChangedEvent } from '../../../editor/common/model/mirrorTextModel.js';\nimport { IAccessibilityInformation } from '../../../platform/accessibility/common/accessibility.js';\nimport { ILocalizedString } from '../../../platform/action/common/action.js';\nimport { ConfigurationTarget, IConfigurationChange, IConfigurationData, IConfigurationOverrides } from '../../../platform/configuration/common/configuration.js';\nimport { ConfigurationScope } from '../../../platform/configuration/common/configurationRegistry.js';\nimport { IExtensionIdWithVersion } from '../../../platform/extensionManagement/common/extensionStorage.js';\nimport { ExtensionIdentifier, IExtensionDescription } from '../../../platform/extensions/common/extensions.js';\nimport * as files from '../../../platform/files/common/files.js';\nimport { ResourceLabelFormatter } from '../../../platform/label/common/label.js';\nimport { ILoggerOptions, ILoggerResource, LogLevel } from '../../../platform/log/common/log.js';\nimport { IMarkerData } from '../../../platform/markers/common/markers.js';\nimport { IProgressOptions, IProgressStep } from '../../../platform/progress/common/progress.js';\nimport * as quickInput from '../../../platform/quickinput/common/quickInput.js';\nimport { IRemoteConnectionData, TunnelDescription } from '../../../platform/remote/common/remoteAuthorityResolver.js';\nimport { AuthInfo, Credentials } from '../../../platform/request/common/request.js';\nimport { ClassifiedEvent, IGDPRProperty, OmitMetadata, StrictPropertyCheck } from '../../../platform/telemetry/common/gdprTypings.js';\nimport { TelemetryLevel } from '../../../platform/telemetry/common/telemetry.js';\nimport { ISerializableEnvironmentDescriptionMap, ISerializableEnvironmentVariableCollection } from '../../../platform/terminal/common/environmentVariable.js';\nimport { ICreateContributedTerminalProfileOptions, IProcessProperty, IProcessReadyWindowsPty, IShellLaunchConfigDto, ITerminalEnvironment, ITerminalLaunchError, ITerminalProfile, TerminalExitReason, TerminalLocation } from '../../../platform/terminal/common/terminal.js';\nimport { ProvidedPortAttributes, TunnelCreationOptions, TunnelOptions, TunnelPrivacyId, TunnelProviderFeatures } from '../../../platform/tunnel/common/tunnel.js';\nimport { EditSessionIdentityMatch } from '../../../platform/workspace/common/editSessions.js';\nimport { WorkspaceTrustRequestOptions } from '../../../platform/workspace/common/workspaceTrust.js';\nimport * as tasks from './shared/tasks.js';\nimport { SaveReason } from '../../common/editor.js';\nimport { IRevealOptions, ITreeItem, IViewBadge } from '../../common/views.js';\nimport { CallHierarchyItem } from '../../contrib/callHierarchy/common/callHierarchy.js';\nimport { ChatAgentLocation, IChatAgentMetadata, IChatAgentRequest, IChatAgentResult } from '../../contrib/chat/common/chatAgents.js';\nimport { IChatProgressResponseContent } from '../../contrib/chat/common/chatModel.js';\nimport { IChatFollowup, IChatProgress, IChatResponseErrorDetails, IChatTask, IChatTaskDto, IChatUserActionEvent, IChatVoteAction } from '../../contrib/chat/common/chatService.js';\nimport { IChatRequestVariableValue, IChatVariableData, IChatVariableResolverProgress } from '../../contrib/chat/common/chatVariables.js';\nimport { IChatMessage, IChatResponseFragment, ILanguageModelChatMetadata, ILanguageModelChatSelector, ILanguageModelsChangeEvent } from '../../contrib/chat/common/languageModels.js';\nimport { IToolData, IToolInvocation, IToolResult } from '../../contrib/chat/common/languageModelToolsService.js';\nimport { DebugConfigurationProviderTriggerKind, IAdapterDescriptor, IConfig, IDebugSessionReplMode, IDebugTestRunReference, IDebugVisualization, IDebugVisualizationContext, IDebugVisualizationTreeItem, MainThreadDebugVisualization } from '../../contrib/debug/common/debug.js';\nimport * as notebookCommon from '../../contrib/notebook/common/notebookCommon.js';\nimport { CellExecutionUpdateType } from '../../contrib/notebook/common/notebookExecutionService.js';\nimport { ICellExecutionComplete, ICellExecutionStateUpdate } from '../../contrib/notebook/common/notebookExecutionStateService.js';\nimport { ICellRange } from '../../contrib/notebook/common/notebookRange.js';\nimport { InputValidationType } from '../../contrib/scm/common/scm.js';\nimport { IWorkspaceSymbol, NotebookPriorityInfo } from '../../contrib/search/common/search.js';\nimport { IRawClosedNotebookFileMatch } from '../../contrib/search/common/searchNotebookHelpers.js';\nimport { IKeywordRecognitionEvent, ISpeechProviderMetadata, ISpeechToTextEvent, ITextToSpeechEvent } from '../../contrib/speech/common/speechService.js';\nimport { CoverageDetails, ExtensionRunTestsRequest, ICallProfileRunHandler, IFileCoverage, ISerializedTestResults, IStartControllerTests, ITestItem, ITestMessage, ITestRunProfile, ITestRunTask, ResolvedTestRunRequest, TestControllerCapability, TestMessageFollowupRequest, TestMessageFollowupResponse, TestResultState, TestsDiffOp } from '../../contrib/testing/common/testTypes.js';\nimport { Timeline, TimelineChangeEvent, TimelineOptions, TimelineProviderDescriptor } from '../../contrib/timeline/common/timeline.js';\nimport { TypeHierarchyItem } from '../../contrib/typeHierarchy/common/typeHierarchy.js';\nimport { RelatedInformationResult, RelatedInformationType } from '../../services/aiRelatedInformation/common/aiRelatedInformation.js';\nimport { AuthenticationSession, AuthenticationSessionAccount, AuthenticationSessionsChangeEvent, IAuthenticationCreateSessionOptions, IAuthenticationProviderSessionOptions } from '../../services/authentication/common/authentication.js';\nimport { EditorGroupColumn } from '../../services/editor/common/editorGroupColumn.js';\nimport { IExtensionDescriptionDelta, IStaticWorkspaceData } from '../../services/extensions/common/extensionHostProtocol.js';\nimport { IResolveAuthorityResult } from '../../services/extensions/common/extensionHostProxy.js';\nimport { ActivationKind, ExtensionActivationReason, MissingExtensionDependency } from '../../services/extensions/common/extensions.js';\nimport { Dto, IRPCProtocol, SerializableObjectWithBuffers, createProxyIdentifier } from '../../services/extensions/common/proxyIdentifier.js';\nimport { ILanguageStatus } from '../../services/languageStatus/common/languageStatusService.js';\nimport { OutputChannelUpdateMode } from '../../services/output/common/output.js';\nimport { CandidatePort } from '../../services/remote/common/tunnelModel.js';\nimport { IFileQueryBuilderOptions, ITextQueryBuilderOptions } from '../../services/search/common/queryBuilder.js';\nimport * as search from '../../services/search/common/search.js';\nimport { TextSearchCompleteMessage } from '../../services/search/common/searchExtTypes.js';\nimport { ISaveProfileResult } from '../../services/userDataProfile/common/userDataProfile.js';\nimport type { TerminalShellExecutionCommandLineConfidence } from 'vscode';\n\nexport interface IWorkspaceData extends IStaticWorkspaceData {\n\tfolders: { uri: UriComponents; name: string; index: number }[];\n}\n\nexport interface IConfigurationInitData extends IConfigurationData {\n\tconfigurationScopes: [string, ConfigurationScope | undefined][];\n}\n\nexport interface IMainContext extends IRPCProtocol {\n}\n\n// --- main thread\n\nexport interface MainThreadClipboardShape extends IDisposable {\n\t$readText(): Promise<string>;\n\t$writeText(value: string): Promise<void>;\n}\n\nexport interface MainThreadCommandsShape extends IDisposable {\n\t$registerCommand(id: string): void;\n\t$unregisterCommand(id: string): void;\n\t$fireCommandActivationEvent(id: string): void;\n\t$executeCommand(id: string, args: any[] | SerializableObjectWithBuffers<any[]>, retry: boolean): Promise<unknown | undefined>;\n\t$getCommands(): Promise<string[]>;\n}\n\nexport interface CommentProviderFeatures {\n\treactionGroup?: languages.CommentReaction[];\n\treactionHandler?: boolean;\n\toptions?: languages.CommentOptions;\n}\n\nexport interface CommentChanges {\n\treadonly uniqueIdInThread: number;\n\treadonly body: string | IMarkdownString;\n\treadonly userName: string;\n\treadonly userIconPath?: UriComponents;\n\treadonly contextValue?: string;\n\treadonly commentReactions?: languages.CommentReaction[];\n\treadonly label?: string;\n\treadonly mode?: languages.CommentMode;\n\treadonly state?: languages.CommentState;\n\treadonly timestamp?: string;\n}\n\nexport type CommentThreadChanges<T = IRange> = Partial<{\n\trange: T | undefined;\n\tlabel: string;\n\tcontextValue: string | null;\n\tcomments: CommentChanges[];\n\tcollapseState: languages.CommentThreadCollapsibleState;\n\tcanReply: boolean;\n\tstate: languages.CommentThreadState;\n\tapplicability: languages.CommentThreadApplicability;\n\tisTemplate: boolean;\n}>;\n\nexport interface MainThreadCommentsShape extends IDisposable {\n\t$registerCommentController(handle: number, id: string, label: string, extensionId: string): void;\n\t$unregisterCommentController(handle: number): void;\n\t$updateCommentControllerFeatures(handle: number, features: CommentProviderFeatures): void;\n\t$createCommentThread(handle: number, commentThreadHandle: number, threadId: string, resource: UriComponents, range: IRange | ICellRange | undefined, comments: languages.Comment[], extensionId: ExtensionIdentifier, isTemplate: boolean, editorId?: string): languages.CommentThread<IRange | ICellRange> | undefined;\n\t$updateCommentThread(handle: number, commentThreadHandle: number, threadId: string, resource: UriComponents, changes: CommentThreadChanges): void;\n\t$deleteCommentThread(handle: number, commentThreadHandle: number): void;\n\t$updateCommentingRanges(handle: number, resourceHints?: languages.CommentingRangeResourceHint): void;\n\t$revealCommentThread(handle: number, commentThreadHandle: number, commentUniqueIdInThread: number, options: languages.CommentThreadRevealOptions): Promise<void>;\n\t$hideCommentThread(handle: number, commentThreadHandle: number): void;\n}\n\nexport interface AuthenticationForceNewSessionOptions {\n\tdetail?: string;\n\tsessionToRecreate?: AuthenticationSession;\n}\n\nexport interface MainThreadAuthenticationShape extends IDisposable {\n\t$registerAuthenticationProvider(id: string, label: string, supportsMultipleAccounts: boolean): void;\n\t$unregisterAuthenticationProvider(id: string): void;\n\t$ensureProvider(id: string): Promise<void>;\n\t$sendDidChangeSessions(providerId: string, event: AuthenticationSessionsChangeEvent): void;\n\t$getSession(providerId: string, scopes: readonly string[], extensionId: string, extensionName: string, options: { createIfNone?: boolean; forceNewSession?: boolean | AuthenticationForceNewSessionOptions; clearSessionPreference?: boolean }): Promise<AuthenticationSession | undefined>;\n\t$getAccounts(providerId: string): Promise<ReadonlyArray<AuthenticationSessionAccount>>;\n\t$removeSession(providerId: string, sessionId: string): Promise<void>;\n}\n\nexport interface MainThreadSecretStateShape extends IDisposable {\n\t$getPassword(extensionId: string, key: string): Promise<string | undefined>;\n\t$setPassword(extensionId: string, key: string, value: string): Promise<void>;\n\t$deletePassword(extensionId: string, key: string): Promise<void>;\n}\n\nexport interface MainThreadConfigurationShape extends IDisposable {\n\t$updateConfigurationOption(target: ConfigurationTarget | null, key: string, value: any, overrides: IConfigurationOverrides | undefined, scopeToLanguage: boolean | undefined): Promise<void>;\n\t$removeConfigurationOption(target: ConfigurationTarget | null, key: string, overrides: IConfigurationOverrides | undefined, scopeToLanguage: boolean | undefined): Promise<void>;\n}\n\nexport interface MainThreadDiagnosticsShape extends IDisposable {\n\t$changeMany(owner: string, entries: [UriComponents, IMarkerData[] | undefined][]): void;\n\t$clear(owner: string): void;\n}\n\nexport interface MainThreadDialogOpenOptions {\n\tdefaultUri?: UriComponents;\n\topenLabel?: string;\n\tcanSelectFiles?: boolean;\n\tcanSelectFolders?: boolean;\n\tcanSelectMany?: boolean;\n\tfilters?: { [name: string]: string[] };\n\ttitle?: string;\n\tallowUIResources?: boolean;\n}\n\nexport interface MainThreadDialogSaveOptions {\n\tdefaultUri?: UriComponents;\n\tsaveLabel?: string;\n\tfilters?: { [name: string]: string[] };\n\ttitle?: string;\n}\n\nexport interface MainThreadDiaglogsShape extends IDisposable {\n\t$showOpenDialog(options?: MainThreadDialogOpenOptions): Promise<UriComponents[] | undefined>;\n\t$showSaveDialog(options?: MainThreadDialogSaveOptions): Promise<UriComponents | undefined>;\n}\n\nexport interface MainThreadDecorationsShape extends IDisposable {\n\t$registerDecorationProvider(handle: number, label: string): void;\n\t$unregisterDecorationProvider(handle: number): void;\n\t$onDidChange(handle: number, resources: UriComponents[] | null): void;\n}\n\nexport interface MainThreadDocumentContentProvidersShape extends IDisposable {\n\t$registerTextContentProvider(handle: number, scheme: string): void;\n\t$unregisterTextContentProvider(handle: number): void;\n\t$onVirtualDocumentChange(uri: UriComponents, value: string): Promise<void>;\n}\n\nexport interface MainThreadDocumentsShape extends IDisposable {\n\t$tryCreateDocument(options?: { language?: string; content?: string }): Promise<UriComponents>;\n\t$tryOpenDocument(uri: UriComponents): Promise<UriComponents>;\n\t$trySaveDocument(uri: UriComponents): Promise<boolean>;\n}\n\nexport interface ITextEditorConfigurationUpdate {\n\ttabSize?: number | 'auto';\n\tindentSize?: number | 'tabSize';\n\tinsertSpaces?: boolean | 'auto';\n\tcursorStyle?: TextEditorCursorStyle;\n\tlineNumbers?: RenderLineNumbersType;\n}\n\nexport interface IResolvedTextEditorConfiguration {\n\ttabSize: number;\n\tindentSize: number;\n\toriginalIndentSize: number | 'tabSize';\n\tinsertSpaces: boolean;\n\tcursorStyle: TextEditorCursorStyle;\n\tlineNumbers: RenderLineNumbersType;\n}\n\nexport enum TextEditorRevealType {\n\tDefault = 0,\n\tInCenter = 1,\n\tInCenterIfOutsideViewport = 2,\n\tAtTop = 3\n}\n\nexport interface IUndoStopOptions {\n\tundoStopBefore: boolean;\n\tundoStopAfter: boolean;\n}\n\nexport interface IApplyEditsOptions extends IUndoStopOptions {\n\tsetEndOfLine?: EndOfLineSequence;\n}\n\nexport interface ITextDocumentShowOptions {\n\tposition?: EditorGroupColumn;\n\tpreserveFocus?: boolean;\n\tpinned?: boolean;\n\tselection?: IRange;\n}\n\nexport interface MainThreadBulkEditsShape extends IDisposable {\n\t$tryApplyWorkspaceEdit(workspaceEditDto: SerializableObjectWithBuffers<IWorkspaceEditDto>, undoRedoGroupId?: number, respectAutoSaveConfig?: boolean): Promise<boolean>;\n}\n\nexport interface MainThreadTextEditorsShape extends IDisposable {\n\t$tryShowTextDocument(resource: UriComponents, options: ITextDocumentShowOptions): Promise<string | undefined>;\n\t$registerTextEditorDecorationType(extensionId: ExtensionIdentifier, key: string, options: editorCommon.IDecorationRenderOptions): void;\n\t$removeTextEditorDecorationType(key: string): void;\n\t$tryShowEditor(id: string, position: EditorGroupColumn): Promise<void>;\n\t$tryHideEditor(id: string): Promise<void>;\n\t$trySetOptions(id: string, options: ITextEditorConfigurationUpdate): Promise<void>;\n\t$trySetDecorations(id: string, key: string, ranges: editorCommon.IDecorationOptions[]): Promise<void>;\n\t$trySetDecorationsFast(id: string, key: string, ranges: number[]): Promise<void>;\n\t$tryRevealRange(id: string, range: IRange, revealType: TextEditorRevealType): Promise<void>;\n\t$trySetSelections(id: string, selections: ISelection[]): Promise<void>;\n\t$tryApplyEdits(id: string, modelVersionId: number, edits: ISingleEditOperation[], opts: IApplyEditsOptions): Promise<boolean>;\n\t$tryInsertSnippet(id: string, modelVersionId: number, template: string, selections: readonly IRange[], opts: IUndoStopOptions): Promise<boolean>;\n\t$getDiffInformation(id: string): Promise<IChange[]>;\n}\n\nexport interface MainThreadTreeViewsShape extends IDisposable {\n\t$registerTreeViewDataProvider(treeViewId: string, options: { showCollapseAll: boolean; canSelectMany: boolean; dropMimeTypes: readonly string[]; dragMimeTypes: readonly string[]; hasHandleDrag: boolean; hasHandleDrop: boolean; manuallyManageCheckboxes: boolean }): Promise<void>;\n\t$refresh(treeViewId: string, itemsToRefresh?: { [treeItemHandle: string]: ITreeItem }): Promise<void>;\n\t$reveal(treeViewId: string, itemInfo: { item: ITreeItem; parentChain: ITreeItem[] } | undefined, options: IRevealOptions): Promise<void>;\n\t$setMessage(treeViewId: string, message: string | IMarkdownString): void;\n\t$setTitle(treeViewId: string, title: string, description: string | undefined): void;\n\t$setBadge(treeViewId: string, badge: IViewBadge | undefined): void;\n\t$resolveDropFileData(destinationViewId: string, requestId: number, dataItemId: string): Promise<VSBuffer>;\n\t$disposeTree(treeViewId: string): Promise<void>;\n}\n\nexport interface MainThreadDownloadServiceShape extends IDisposable {\n\t$download(uri: UriComponents, to: UriComponents): Promise<void>;\n}\n\nexport interface MainThreadErrorsShape extends IDisposable {\n\t$onUnexpectedError(err: any | SerializedError): void;\n}\n\nexport interface MainThreadConsoleShape extends IDisposable {\n\t$logExtensionHostMessage(msg: IRemoteConsoleLog): void;\n}\n\nexport interface IRegExpDto {\n\tpattern: string;\n\tflags?: string;\n}\nexport interface IIndentationRuleDto {\n\tdecreaseIndentPattern: IRegExpDto;\n\tincreaseIndentPattern: IRegExpDto;\n\tindentNextLinePattern?: IRegExpDto;\n\tunIndentedLinePattern?: IRegExpDto;\n}\nexport interface IOnEnterRuleDto {\n\tbeforeText: IRegExpDto;\n\tafterText?: IRegExpDto;\n\tpreviousLineText?: IRegExpDto;\n\taction: EnterAction;\n}\nexport interface ILanguageConfigurationDto {\n\tcomments?: CommentRule;\n\tbrackets?: CharacterPair[];\n\twordPattern?: IRegExpDto;\n\tindentationRules?: IIndentationRuleDto;\n\tonEnterRules?: IOnEnterRuleDto[];\n\t__electricCharacterSupport?: {\n\t\tbrackets?: any;\n\t\tdocComment?: {\n\t\t\tscope: string;\n\t\t\topen: string;\n\t\t\tlineStart: string;\n\t\t\tclose?: string;\n\t\t};\n\t};\n\t__characterPairSupport?: {\n\t\tautoClosingPairs: {\n\t\t\topen: string;\n\t\t\tclose: string;\n\t\t\tnotIn?: string[];\n\t\t}[];\n\t};\n\tautoClosingPairs?: {\n\t\topen: string;\n\t\tclose: string;\n\t\tnotIn?: string[];\n\t}[];\n}\n\nexport type GlobPattern = string | IRelativePattern;\n\nexport interface IRelativePatternDto extends IRelativePattern {\n\tbaseUri: UriComponents;\n}\n\nexport interface IDocumentFilterDto {\n\t$serialized: true;\n\tlanguage?: string;\n\tscheme?: string;\n\tpattern?: string | IRelativePattern;\n\texclusive?: boolean;\n\tnotebookType?: string;\n\tisBuiltin?: boolean;\n}\n\nexport interface IShareableItemDto {\n\tresourceUri: UriComponents;\n\tselection?: IRange;\n}\n\nexport interface IDocumentContextItemDto {\n\treadonly uri: UriComponents;\n\treadonly version: number;\n\treadonly ranges: IRange[];\n}\n\nexport interface IConversationItemDto {\n\treadonly type: 'request' | 'response';\n\treadonly message: string;\n\treadonly references?: IDocumentContextItemDto[];\n}\n\nexport interface IMappedEditsContextDto {\n\tdocuments: IDocumentContextItemDto[][];\n\tconversation?: IConversationItemDto[];\n}\n\nexport interface ISignatureHelpProviderMetadataDto {\n\treadonly triggerCharacters: readonly string[];\n\treadonly retriggerCharacters: readonly string[];\n}\n\nexport interface IdentifiableInlineCompletions extends languages.InlineCompletions<IdentifiableInlineCompletion> {\n\tpid: number;\n}\n\nexport interface IdentifiableInlineCompletion extends languages.InlineCompletion {\n\tidx: number;\n}\n\nexport interface IdentifiableInlineEdit extends languages.IInlineEdit {\n\tpid: number;\n}\n\nexport interface MainThreadLanguageFeaturesShape extends IDisposable {\n\t$unregister(handle: number): void;\n\t$registerDocumentSymbolProvider(handle: number, selector: IDocumentFilterDto[], label: string): void;\n\t$registerCodeLensSupport(handle: number, selector: IDocumentFilterDto[], eventHandle: number | undefined): void;\n\t$emitCodeLensEvent(eventHandle: number, event?: any): void;\n\t$registerDefinitionSupport(handle: number, selector: IDocumentFilterDto[]): void;\n\t$registerDeclarationSupport(handle: number, selector: IDocumentFilterDto[]): void;\n\t$registerImplementationSupport(handle: number, selector: IDocumentFilterDto[]): void;\n\t$registerTypeDefinitionSupport(handle: number, selector: IDocumentFilterDto[]): void;\n\t$registerHoverProvider(handle: number, selector: IDocumentFilterDto[]): void;\n\t$registerEvaluatableExpressionProvider(handle: number, selector: IDocumentFilterDto[]): void;\n\t$registerInlineValuesProvider(handle: number, selector: IDocumentFilterDto[], eventHandle: number | undefined): void;\n\t$emitInlineValuesEvent(eventHandle: number, event?: any): void;\n\t$registerDocumentHighlightProvider(handle: number, selector: IDocumentFilterDto[]): void;\n\t$registerMultiDocumentHighlightProvider(handle: number, selector: IDocumentFilterDto[]): void;\n\t$registerLinkedEditingRangeProvider(handle: number, selector: IDocumentFilterDto[]): void;\n\t$registerReferenceSupport(handle: number, selector: IDocumentFilterDto[]): void;\n\t$registerCodeActionSupport(handle: number, selector: IDocumentFilterDto[], metadata: ICodeActionProviderMetadataDto, displayName: string, extensionID: string, supportsResolve: boolean): void;\n\t$registerPasteEditProvider(handle: number, selector: IDocumentFilterDto[], metadata: IPasteEditProviderMetadataDto): void;\n\t$registerDocumentFormattingSupport(handle: number, selector: IDocumentFilterDto[], extensionId: ExtensionIdentifier, displayName: string): void;\n\t$registerRangeFormattingSupport(handle: number, selector: IDocumentFilterDto[], extensionId: ExtensionIdentifier, displayName: string, supportRanges: boolean): void;\n\t$registerOnTypeFormattingSupport(handle: number, selector: IDocumentFilterDto[], autoFormatTriggerCharacters: string[], extensionId: ExtensionIdentifier): void;\n\t$registerNavigateTypeSupport(handle: number, supportsResolve: boolean): void;\n\t$registerRenameSupport(handle: number, selector: IDocumentFilterDto[], supportsResolveInitialValues: boolean): void;\n\t$registerNewSymbolNamesProvider(handle: number, selector: IDocumentFilterDto[]): void;\n\t$registerDocumentSemanticTokensProvider(handle: number, selector: IDocumentFilterDto[], legend: languages.SemanticTokensLegend, eventHandle: number | undefined): void;\n\t$emitDocumentSemanticTokensEvent(eventHandle: number): void;\n\t$registerDocumentRangeSemanticTokensProvider(handle: number, selector: IDocumentFilterDto[], legend: languages.SemanticTokensLegend): void;\n\t$registerCompletionsProvider(handle: number, selector: IDocumentFilterDto[], triggerCharacters: string[], supportsResolveDetails: boolean, extensionId: ExtensionIdentifier): void;\n\t$registerInlineCompletionsSupport(handle: number, selector: IDocumentFilterDto[], supportsHandleDidShowCompletionItem: boolean, extensionId: string, yieldsToExtensionIds: string[]): void;\n\t$registerInlineEditProvider(handle: number, selector: IDocumentFilterDto[], extensionId: ExtensionIdentifier): void;\n\t$registerSignatureHelpProvider(handle: number, selector: IDocumentFilterDto[], metadata: ISignatureHelpProviderMetadataDto): void;\n\t$registerInlayHintsProvider(handle: number, selector: IDocumentFilterDto[], supportsResolve: boolean, eventHandle: number | undefined, displayName: string | undefined): void;\n\t$emitInlayHintsEvent(eventHandle: number): void;\n\t$registerDocumentLinkProvider(handle: number, selector: IDocumentFilterDto[], supportsResolve: boolean): void;\n\t$registerDocumentColorProvider(handle: number, selector: IDocumentFilterDto[]): void;\n\t$registerFoldingRangeProvider(handle: number, selector: IDocumentFilterDto[], extensionId: ExtensionIdentifier, eventHandle: number | undefined): void;\n\t$emitFoldingRangeEvent(eventHandle: number, event?: any): void;\n\t$registerSelectionRangeProvider(handle: number, selector: IDocumentFilterDto[]): void;\n\t$registerCallHierarchyProvider(handle: number, selector: IDocumentFilterDto[]): void;\n\t$registerTypeHierarchyProvider(handle: number, selector: IDocumentFilterDto[]): void;\n\t$registerDocumentOnDropEditProvider(handle: number, selector: IDocumentFilterDto[], metadata?: IDocumentDropEditProviderMetadata): void;\n\t$resolvePasteFileData(handle: number, requestId: number, dataId: string): Promise<VSBuffer>;\n\t$resolveDocumentOnDropFileData(handle: number, requestId: number, dataId: string): Promise<VSBuffer>;\n\t$setLanguageConfiguration(handle: number, languageId: string, configuration: ILanguageConfigurationDto): void;\n\t$registerMappedEditsProvider(handle: number, selector: IDocumentFilterDto[], displayName: string): void;\n}\n\nexport interface MainThreadLanguagesShape extends IDisposable {\n\t$changeLanguage(resource: UriComponents, languageId: string): Promise<void>;\n\t$tokensAtPosition(resource: UriComponents, position: IPosition): Promise<undefined | { type: StandardTokenType; range: IRange }>;\n\t$setLanguageStatus(handle: number, status: ILanguageStatus): void;\n\t$removeLanguageStatus(handle: number): void;\n}\n\nexport interface MainThreadMessageOptions {\n\tsource?: { identifier: ExtensionIdentifier; label: string };\n\tmodal?: boolean;\n\tdetail?: string;\n\tuseCustom?: boolean;\n}\n\nexport interface MainThreadMessageServiceShape extends IDisposable {\n\t$showMessage(severity: Severity, message: string, options: MainThreadMessageOptions, commands: { title: string; isCloseAffordance: boolean; handle: number }[]): Promise<number | undefined>;\n}\n\nexport interface MainThreadOutputServiceShape extends IDisposable {\n\t$register(label: string, file: UriComponents, languageId: string | undefined, extensionId: string): Promise<string>;\n\t$update(channelId: string, mode: OutputChannelUpdateMode, till?: number): Promise<void>;\n\t$reveal(channelId: string, preserveFocus: boolean): Promise<void>;\n\t$close(channelId: string): Promise<void>;\n\t$dispose(channelId: string): Promise<void>;\n}\n\nexport interface MainThreadProgressShape extends IDisposable {\n\n\t$startProgress(handle: number, options: IProgressOptions, extensionId?: string): Promise<void>;\n\t$progressReport(handle: number, message: IProgressStep): void;\n\t$progressEnd(handle: number): void;\n}\n\n/**\n * A terminal that is created on the extension host side is temporarily assigned\n * a UUID by the extension host that created it. Once the renderer side has assigned\n * a real numeric id, the numeric id will be used.\n *\n * All other terminals (that are not created on the extension host side) always\n * use the numeric id.\n */\nexport type ExtHostTerminalIdentifier = number | string;\n\nexport interface TerminalLaunchConfig {\n\tname?: string;\n\tshellPath?: string;\n\tshellArgs?: string[] | string;\n\tcwd?: string | UriComponents;\n\tenv?: ITerminalEnvironment;\n\ticon?: URI | { light: URI; dark: URI } | ThemeIcon;\n\tcolor?: string;\n\tinitialText?: string;\n\twaitOnExit?: boolean;\n\tstrictEnv?: boolean;\n\thideFromUser?: boolean;\n\tisExtensionCustomPtyTerminal?: boolean;\n\tforceShellIntegration?: boolean;\n\tisFeatureTerminal?: boolean;\n\tisExtensionOwnedTerminal?: boolean;\n\tuseShellEnvironment?: boolean;\n\tlocation?: TerminalLocation | { viewColumn: number; preserveFocus?: boolean } | { parentTerminal: ExtHostTerminalIdentifier } | { splitActiveTerminal: boolean };\n\tisTransient?: boolean;\n}\n\nexport interface MainThreadTerminalServiceShape extends IDisposable {\n\t$createTerminal(extHostTerminalId: string, config: TerminalLaunchConfig): Promise<void>;\n\t$dispose(id: ExtHostTerminalIdentifier): void;\n\t$hide(id: ExtHostTerminalIdentifier): void;\n\t$sendText(id: ExtHostTerminalIdentifier, text: string, shouldExecute: boolean): void;\n\t$show(id: ExtHostTerminalIdentifier, preserveFocus: boolean): void;\n\t$registerProcessSupport(isSupported: boolean): void;\n\t$registerProfileProvider(id: string, extensionIdentifier: string): void;\n\t$unregisterProfileProvider(id: string): void;\n\t$registerQuickFixProvider(id: string, extensionIdentifier: string): void;\n\t$unregisterQuickFixProvider(id: string): void;\n\t$setEnvironmentVariableCollection(extensionIdentifier: string, persistent: boolean, collection: ISerializableEnvironmentVariableCollection | undefined, descriptionMap: ISerializableEnvironmentDescriptionMap): void;\n\n\t// Optional event toggles\n\t$startSendingDataEvents(): void;\n\t$stopSendingDataEvents(): void;\n\t$startSendingCommandEvents(): void;\n\t$stopSendingCommandEvents(): void;\n\t$startLinkProvider(): void;\n\t$stopLinkProvider(): void;\n\n\t// Process\n\t$sendProcessData(terminalId: number, data: string): void;\n\t$sendProcessReady(terminalId: number, pid: number, cwd: string, windowsPty: IProcessReadyWindowsPty | undefined): void;\n\t$sendProcessProperty(terminalId: number, property: IProcessProperty<any>): void;\n\t$sendProcessExit(terminalId: number, exitCode: number | undefined): void;\n}\n\nexport interface MainThreadTerminalShellIntegrationShape extends IDisposable {\n\t$executeCommand(terminalId: number, commandLine: string): void;\n}\n\nexport type TransferQuickPickItemOrSeparator = TransferQuickPickItem | quickInput.IQuickPickSeparator;\nexport interface TransferQuickPickItem {\n\thandle: number;\n\n\t// shared properties from IQuickPickItem\n\ttype?: 'item';\n\tlabel: string;\n\ticonPath?: { light?: URI; dark: URI };\n\ticonClass?: string;\n\tdescription?: string;\n\tdetail?: string;\n\tpicked?: boolean;\n\talwaysShow?: boolean;\n\tbuttons?: TransferQuickInputButton[];\n}\n\nexport interface TransferQuickInputButton extends quickInput.IQuickInputButton {\n\thandle: number;\n}\n\nexport type TransferQuickInput = TransferQuickPick | TransferInputBox;\n\nexport interface BaseTransferQuickInput {\n\n\t[key: string]: any;\n\n\tid: number;\n\n\ttitle?: string;\n\n\ttype?: 'quickPick' | 'inputBox';\n\n\tenabled?: boolean;\n\n\tbusy?: boolean;\n\n\tvisible?: boolean;\n}\n\nexport interface TransferQuickPick extends BaseTransferQuickInput {\n\n\ttype?: 'quickPick';\n\n\tvalue?: string;\n\n\tplaceholder?: string;\n\n\tbuttons?: TransferQuickInputButton[];\n\n\titems?: TransferQuickPickItemOrSeparator[];\n\n\tactiveItems?: number[];\n\n\tselectedItems?: number[];\n\n\tcanSelectMany?: boolean;\n\n\tignoreFocusOut?: boolean;\n\n\tmatchOnDescription?: boolean;\n\n\tmatchOnDetail?: boolean;\n\n\tsortByLabel?: boolean;\n}\n\nexport interface TransferInputBox extends BaseTransferQuickInput {\n\n\ttype?: 'inputBox';\n\n\tvalue?: string;\n\n\tvalueSelection?: Readonly<[number, number]>;\n\n\tplaceholder?: string;\n\n\tpassword?: boolean;\n\n\tbuttons?: TransferQuickInputButton[];\n\n\tprompt?: string;\n\n\tvalidationMessage?: string;\n}\n\nexport interface IInputBoxOptions {\n\ttitle?: string;\n\tvalue?: string;\n\tvalueSelection?: Readonly<[number, number]>;\n\tprompt?: string;\n\tplaceHolder?: string;\n\tpassword?: boolean;\n\tignoreFocusOut?: boolean;\n}\n\nexport interface MainThreadQuickOpenShape extends IDisposable {\n\t$show(instance: number, options: quickInput.IPickOptions<TransferQuickPickItem>, token: CancellationToken): Promise<number | number[] | undefined>;\n\t$setItems(instance: number, items: TransferQuickPickItemOrSeparator[]): Promise<void>;\n\t$setError(instance: number, error: Error): Promise<void>;\n\t$input(options: IInputBoxOptions | undefined, validateInput: boolean, token: CancellationToken): Promise<string | undefined>;\n\t$createOrUpdate(params: TransferQuickInput): Promise<void>;\n\t$dispose(id: number): Promise<void>;\n}\n\nexport interface MainThreadStatusBarShape extends IDisposable {\n\t$setEntry(id: string, statusId: string, extensionId: string | undefined, statusName: string, text: string, tooltip: IMarkdownString | string | undefined, command: ICommandDto | undefined, color: string | ThemeColor | undefined, backgroundColor: string | ThemeColor | undefined, alignLeft: boolean, priority: number | undefined, accessibilityInformation: IAccessibilityInformation | undefined): void;\n\t$disposeEntry(id: string): void;\n}\n\nexport type StatusBarItemDto = {\n\tentryId: string;\n\talignLeft: boolean;\n\tpriority?: number;\n\tname: string;\n\ttext: string;\n\ttooltip?: string;\n\tcommand?: string;\n\taccessibilityInformation?: IAccessibilityInformation;\n};\n\nexport interface ExtHostStatusBarShape {\n\t$acceptStaticEntries(added?: StatusBarItemDto[]): void;\n}\n\nexport interface MainThreadStorageShape extends IDisposable {\n\t$initializeExtensionStorage(shared: boolean, extensionId: string): Promise<string | undefined>;\n\t$setValue(shared: boolean, extensionId: string, value: object): Promise<void>;\n\t$registerExtensionStorageKeysToSync(extension: IExtensionIdWithVersion, keys: string[]): void;\n}\n\nexport interface MainThreadTelemetryShape extends IDisposable {\n\t$publicLog(eventName: string, data?: any): void;\n\t$publicLog2<E extends ClassifiedEvent<OmitMetadata<T>> = never, T extends IGDPRProperty = never>(eventName: string, data?: StrictPropertyCheck<T, E>): void;\n}\n\nexport interface MainThreadEditorInsetsShape extends IDisposable {\n\t$createEditorInset(handle: number, id: string, uri: UriComponents, line: number, height: number, options: IWebviewContentOptions, extensionId: ExtensionIdentifier, extensionLocation: UriComponents): Promise<void>;\n\t$disposeEditorInset(handle: number): void;\n\n\t$setHtml(handle: number, value: string): void;\n\t$setOptions(handle: number, options: IWebviewContentOptions): void;\n\t$postMessage(handle: number, value: any): Promise<boolean>;\n}\n\nexport interface ExtHostEditorInsetsShape {\n\t$onDidDispose(handle: number): void;\n\t$onDidReceiveMessage(handle: number, message: any): void;\n}\n\n//#region --- tabs model\n\nexport const enum TabInputKind {\n\tUnknownInput,\n\tTextInput,\n\tTextDiffInput,\n\tTextMergeInput,\n\tNotebookInput,\n\tNotebookDiffInput,\n\tCustomEditorInput,\n\tWebviewEditorInput,\n\tTerminalEditorInput,\n\tInteractiveEditorInput,\n\tChatEditorInput,\n\tMultiDiffEditorInput\n}\n\nexport const enum TabModelOperationKind {\n\tTAB_OPEN,\n\tTAB_CLOSE,\n\tTAB_UPDATE,\n\tTAB_MOVE\n}\n\nexport interface UnknownInputDto {\n\tkind: TabInputKind.UnknownInput;\n}\n\nexport interface TextInputDto {\n\tkind: TabInputKind.TextInput;\n\turi: UriComponents;\n}\n\nexport interface TextDiffInputDto {\n\tkind: TabInputKind.TextDiffInput;\n\toriginal: UriComponents;\n\tmodified: UriComponents;\n}\n\nexport interface TextMergeInputDto {\n\tkind: TabInputKind.TextMergeInput;\n\tbase: UriComponents;\n\tinput1: UriComponents;\n\tinput2: UriComponents;\n\tresult: UriComponents;\n}\n\nexport interface NotebookInputDto {\n\tkind: TabInputKind.NotebookInput;\n\tnotebookType: string;\n\turi: UriComponents;\n}\n\nexport interface NotebookDiffInputDto {\n\tkind: TabInputKind.NotebookDiffInput;\n\tnotebookType: string;\n\toriginal: UriComponents;\n\tmodified: UriComponents;\n}\n\nexport interface CustomInputDto {\n\tkind: TabInputKind.CustomEditorInput;\n\tviewType: string;\n\turi: UriComponents;\n}\n\nexport interface WebviewInputDto {\n\tkind: TabInputKind.WebviewEditorInput;\n\tviewType: string;\n}\n\nexport interface InteractiveEditorInputDto {\n\tkind: TabInputKind.InteractiveEditorInput;\n\turi: UriComponents;\n\tinputBoxUri: UriComponents;\n}\n\nexport interface ChatEditorInputDto {\n\tkind: TabInputKind.ChatEditorInput;\n}\n\nexport interface MultiDiffEditorInputDto {\n\tkind: TabInputKind.MultiDiffEditorInput;\n\tdiffEditors: TextDiffInputDto[];\n}\n\nexport interface TabInputDto {\n\tkind: TabInputKind.TerminalEditorInput;\n}\n\nexport type AnyInputDto = UnknownInputDto | TextInputDto | TextDiffInputDto | MultiDiffEditorInputDto | TextMergeInputDto | NotebookInputDto | NotebookDiffInputDto | CustomInputDto | WebviewInputDto | InteractiveEditorInputDto | ChatEditorInputDto | TabInputDto;\n\nexport interface MainThreadEditorTabsShape extends IDisposable {\n\t// manage tabs: move, close, rearrange etc\n\t$moveTab(tabId: string, index: number, viewColumn: EditorGroupColumn, preserveFocus?: boolean): void;\n\t$closeTab(tabIds: string[], preserveFocus?: boolean): Promise<boolean>;\n\t$closeGroup(groupIds: number[], preservceFocus?: boolean): Promise<boolean>;\n}\n\nexport interface IEditorTabGroupDto {\n\tisActive: boolean;\n\tviewColumn: EditorGroupColumn;\n\t// Decided not to go with simple index here due to opening and closing causing index shifts\n\t// This allows us to patch the model without having to do full rebuilds\n\ttabs: IEditorTabDto[];\n\tgroupId: number;\n}\n\nexport interface TabOperation {\n\treadonly kind: TabModelOperationKind.TAB_OPEN | TabModelOperationKind.TAB_CLOSE | TabModelOperationKind.TAB_UPDATE | TabModelOperationKind.TAB_MOVE;\n\t// TODO @lramos15 Possibly get rid of index for tab update, it's only needed for open and close\n\treadonly index: number;\n\treadonly tabDto: IEditorTabDto;\n\treadonly groupId: number;\n\treadonly oldIndex?: number;\n}\n\nexport interface IEditorTabDto {\n\tid: string;\n\tlabel: string;\n\tinput: AnyInputDto;\n\teditorId?: string;\n\tisActive: boolean;\n\tisPinned: boolean;\n\tisPreview: boolean;\n\tisDirty: boolean;\n}\n\nexport interface IExtHostEditorTabsShape {\n\t// Accepts a whole new model\n\t$acceptEditorTabModel(tabGroups: IEditorTabGroupDto[]): void;\n\t// Only when group property changes (not the tabs inside)\n\t$acceptTabGroupUpdate(groupDto: IEditorTabGroupDto): void;\n\t// When a tab is added, removed, or updated\n\t$acceptTabOperation(operation: TabOperation): void;\n}\n\n//#endregion\n\nexport type WebviewHandle = string;\n\nexport interface WebviewPanelShowOptions {\n\treadonly viewColumn?: EditorGroupColumn;\n\treadonly preserveFocus?: boolean;\n}\n\nexport interface WebviewExtensionDescription {\n\treadonly id: ExtensionIdentifier;\n\treadonly location: UriComponents;\n}\n\nexport enum WebviewEditorCapabilities {\n\tEditable,\n\tSupportsHotExit,\n}\n\nexport interface IWebviewPortMapping {\n\treadonly webviewPort: number;\n\treadonly extensionHostPort: number;\n}\n\nexport interface IWebviewContentOptions {\n\treadonly enableScripts?: boolean;\n\treadonly enableForms?: boolean;\n\treadonly enableCommandUris?: boolean | readonly string[];\n\treadonly localResourceRoots?: readonly UriComponents[];\n\treadonly portMapping?: readonly IWebviewPortMapping[];\n}\n\nexport interface IWebviewPanelOptions {\n\treadonly enableFindWidget?: boolean;\n\treadonly retainContextWhenHidden?: boolean;\n}\n\nexport interface CustomTextEditorCapabilities {\n\treadonly supportsMove?: boolean;\n}\n\nexport const enum WebviewMessageArrayBufferViewType {\n\tInt8Array = 1,\n\tUint8Array = 2,\n\tUint8ClampedArray = 3,\n\tInt16Array = 4,\n\tUint16Array = 5,\n\tInt32Array = 6,\n\tUint32Array = 7,\n\tFloat32Array = 8,\n\tFloat64Array = 9,\n\tBigInt64Array = 10,\n\tBigUint64Array = 11,\n}\n\nexport interface WebviewMessageArrayBufferReference {\n\treadonly $$vscode_array_buffer_reference$$: true;\n\n\treadonly index: number;\n\n\t/**\n\t * Tracks if the reference is to a view instead of directly to an ArrayBuffer.\n\t */\n\treadonly view?: {\n\t\treadonly type: WebviewMessageArrayBufferViewType;\n\t\treadonly byteLength: number;\n\t\treadonly byteOffset: number;\n\t};\n}\n\nexport interface MainThreadWebviewsShape extends IDisposable {\n\t$setHtml(handle: WebviewHandle, value: string): void;\n\t$setOptions(handle: WebviewHandle, options: IWebviewContentOptions): void;\n\t$postMessage(handle: WebviewHandle, value: string, ...buffers: VSBuffer[]): Promise<boolean>;\n}\n\nexport interface IWebviewIconPath {\n\treadonly light: UriComponents;\n\treadonly dark: UriComponents;\n}\n\nexport interface IWebviewInitData {\n\treadonly title: string;\n\treadonly webviewOptions: IWebviewContentOptions;\n\treadonly panelOptions: IWebviewPanelOptions;\n\treadonly serializeBuffersForPostMessage: boolean;\n}\n\nexport interface MainThreadWebviewPanelsShape extends IDisposable {\n\t$createWebviewPanel(\n\t\textension: WebviewExtensionDescription,\n\t\thandle: WebviewHandle,\n\t\tviewType: string,\n\t\tinitData: IWebviewInitData,\n\t\tshowOptions: WebviewPanelShowOptions,\n\t): void;\n\t$disposeWebview(handle: WebviewHandle): void;\n\t$reveal(handle: WebviewHandle, showOptions: WebviewPanelShowOptions): void;\n\t$setTitle(handle: WebviewHandle, value: string): void;\n\t$setIconPath(handle: WebviewHandle, value: IWebviewIconPath | undefined): void;\n\n\t$registerSerializer(viewType: string, options: { serializeBuffersForPostMessage: boolean }): void;\n\t$unregisterSerializer(viewType: string): void;\n}\n\nexport interface MainThreadCustomEditorsShape extends IDisposable {\n\t$registerTextEditorProvider(extension: WebviewExtensionDescription, viewType: string, options: IWebviewPanelOptions, capabilities: CustomTextEditorCapabilities, serializeBuffersForPostMessage: boolean): void;\n\t$registerCustomEditorProvider(extension: WebviewExtensionDescription, viewType: string, options: IWebviewPanelOptions, supportsMultipleEditorsPerDocument: boolean, serializeBuffersForPostMessage: boolean): void;\n\t$unregisterEditorProvider(viewType: string): void;\n\n\t$onDidEdit(resource: UriComponents, viewType: string, editId: number, label: string | undefined): void;\n\t$onContentChange(resource: UriComponents, viewType: string): void;\n}\n\nexport interface MainThreadWebviewViewsShape extends IDisposable {\n\t$registerWebviewViewProvider(extension: WebviewExtensionDescription, viewType: string, options: { retainContextWhenHidden?: boolean; serializeBuffersForPostMessage: boolean }): void;\n\t$unregisterWebviewViewProvider(viewType: string): void;\n\n\t$setWebviewViewTitle(handle: WebviewHandle, value: string | undefined): void;\n\t$setWebviewViewDescription(handle: WebviewHandle, value: string | undefined): void;\n\t$setWebviewViewBadge(handle: WebviewHandle, badge: IViewBadge | undefined): void;\n\n\t$show(handle: WebviewHandle, preserveFocus: boolean): void;\n}\n\nexport interface WebviewPanelViewStateData {\n\t[handle: string]: {\n\t\treadonly active: boolean;\n\t\treadonly visible: boolean;\n\t\treadonly position: EditorGroupColumn;\n\t};\n}\n\nexport interface ExtHostWebviewsShape {\n\t$onMessage(handle: WebviewHandle, jsonSerializedMessage: string, buffers: SerializableObjectWithBuffers<VSBuffer[]>): void;\n\t$onMissingCsp(handle: WebviewHandle, extensionId: string): void;\n}\n\nexport interface ExtHostWebviewPanelsShape {\n\t$onDidChangeWebviewPanelViewStates(newState: WebviewPanelViewStateData): void;\n\t$onDidDisposeWebviewPanel(handle: WebviewHandle): Promise<void>;\n\t$deserializeWebviewPanel(\n\t\tnewWebviewHandle: WebviewHandle,\n\t\tviewType: string,\n\t\tinitData: {\n\t\t\ttitle: string;\n\t\t\tstate: any;\n\t\t\twebviewOptions: IWebviewContentOptions;\n\t\t\tpanelOptions: IWebviewPanelOptions;\n\t\t\tactive: boolean;\n\t\t},\n\t\tposition: EditorGroupColumn,\n\t): Promise<void>;\n}\n\nexport interface ExtHostCustomEditorsShape {\n\t$resolveCustomEditor(\n\t\tresource: UriComponents,\n\t\tnewWebviewHandle: WebviewHandle,\n\t\tviewType: string,\n\t\tinitData: {\n\t\t\ttitle: string;\n\t\t\tcontentOptions: IWebviewContentOptions;\n\t\t\toptions: IWebviewPanelOptions;\n\t\t\tactive: boolean;\n\t\t},\n\t\tposition: EditorGroupColumn,\n\t\tcancellation: CancellationToken\n\t): Promise<void>;\n\t$createCustomDocument(resource: UriComponents, viewType: string, backupId: string | undefined, untitledDocumentData: VSBuffer | undefined, cancellation: CancellationToken): Promise<{ editable: boolean }>;\n\t$disposeCustomDocument(resource: UriComponents, viewType: string): Promise<void>;\n\n\t$undo(resource: UriComponents, viewType: string, editId: number, isDirty: boolean): Promise<void>;\n\t$redo(resource: UriComponents, viewType: string, editId: number, isDirty: boolean): Promise<void>;\n\t$revert(resource: UriComponents, viewType: string, cancellation: CancellationToken): Promise<void>;\n\t$disposeEdits(resourceComponents: UriComponents, viewType: string, editIds: number[]): void;\n\n\t$onSave(resource: UriComponents, viewType: string, cancellation: CancellationToken): Promise<void>;\n\t$onSaveAs(resource: UriComponents, viewType: string, targetResource: UriComponents, cancellation: CancellationToken): Promise<void>;\n\n\t$backup(resource: UriComponents, viewType: string, cancellation: CancellationToken): Promise<string>;\n\n\t$onMoveCustomEditor(handle: WebviewHandle, newResource: UriComponents, viewType: string): Promise<void>;\n}\n\nexport interface ExtHostWebviewViewsShape {\n\t$resolveWebviewView(webviewHandle: WebviewHandle, viewType: string, title: string | undefined, state: any, cancellation: CancellationToken): Promise<void>;\n\n\t$onDidChangeWebviewViewVisibility(webviewHandle: WebviewHandle, visible: boolean): void;\n\n\t$disposeWebviewView(webviewHandle: WebviewHandle): void;\n}\n\nexport interface MainThreadManagedSocketsShape extends IDisposable {\n\t$registerSocketFactory(socketFactoryId: number): Promise<void>;\n\t$unregisterSocketFactory(socketFactoryId: number): Promise<void>;\n\t$onDidManagedSocketHaveData(socketId: number, data: VSBuffer): void;\n\t$onDidManagedSocketClose(socketId: number, error: string | undefined): void;\n\t$onDidManagedSocketEnd(socketId: number): void;\n}\n\nexport interface ExtHostManagedSocketsShape {\n\t$openRemoteSocket(socketFactoryId: number): Promise<number>;\n\t$remoteSocketWrite(socketId: number, buffer: VSBuffer): void;\n\t$remoteSocketEnd(socketId: number): void;\n\t$remoteSocketDrain(socketId: number): Promise<void>;\n}\n\nexport enum CellOutputKind {\n\tText = 1,\n\tError = 2,\n\tRich = 3\n}\n\nexport enum NotebookEditorRevealType {\n\tDefault = 0,\n\tInCenter = 1,\n\tInCenterIfOutsideViewport = 2,\n\tAtTop = 3\n}\n\nexport interface INotebookDocumentShowOptions {\n\tposition?: EditorGroupColumn;\n\tpreserveFocus?: boolean;\n\tpinned?: boolean;\n\tselections?: ICellRange[];\n\tlabel?: string;\n}\n\nexport type INotebookCellStatusBarEntryDto = Dto<notebookCommon.INotebookCellStatusBarItem>;\n\nexport interface INotebookCellStatusBarListDto {\n\titems: INotebookCellStatusBarEntryDto[];\n\tcacheId: number;\n}\n\nexport interface MainThreadNotebookShape extends IDisposable {\n\t$registerNotebookSerializer(handle: number, extension: notebookCommon.NotebookExtensionDescription, viewType: string, options: notebookCommon.TransientOptions, registration: notebookCommon.INotebookContributionData | undefined): void;\n\t$unregisterNotebookSerializer(handle: number): void;\n\n\t$registerNotebookCellStatusBarItemProvider(handle: number, eventHandle: number | undefined, viewType: string): Promise<void>;\n\t$unregisterNotebookCellStatusBarItemProvider(handle: number, eventHandle: number | undefined): Promise<void>;\n\t$emitCellStatusBarEvent(eventHandle: number): void;\n}\n\nexport interface MainThreadNotebookEditorsShape extends IDisposable {\n\t$tryShowNotebookDocument(uriComponents: UriComponents, viewType: string, options: INotebookDocumentShowOptions): Promise<string>;\n\t$tryRevealRange(id: string, range: ICellRange, revealType: NotebookEditorRevealType): Promise<void>;\n\t$trySetSelections(id: string, range: ICellRange[]): void;\n}\n\nexport interface MainThreadNotebookDocumentsShape extends IDisposable {\n\t$tryCreateNotebook(options: { viewType: string; content?: NotebookDataDto }): Promise<UriComponents>;\n\t$tryOpenNotebook(uriComponents: UriComponents): Promise<UriComponents>;\n\t$trySaveNotebook(uri: UriComponents): Promise<boolean>;\n}\n\nexport interface INotebookKernelDto2 {\n\tid: string;\n\tnotebookType: string;\n\textensionId: ExtensionIdentifier;\n\textensionLocation: UriComponents;\n\tlabel: string;\n\tdetail?: string;\n\tdescription?: string;\n\tsupportedLanguages?: string[];\n\tsupportsInterrupt?: boolean;\n\tsupportsExecutionOrder?: boolean;\n\tpreloads?: { uri: UriComponents; provides: readonly string[] }[];\n\thasVariableProvider?: boolean;\n}\n\nexport interface INotebookProxyKernelDto {\n\tid: string;\n\tnotebookType: string;\n\textensionId: ExtensionIdentifier;\n\textensionLocation: UriComponents;\n\tlabel: string;\n\tdetail?: string;\n\tdescription?: string;\n\tkind?: string;\n}\n\nexport interface ICellExecuteOutputEditDto {\n\teditType: CellExecutionUpdateType.Output;\n\tcellHandle: number;\n\tappend?: boolean;\n\toutputs: NotebookOutputDto[];\n}\n\nexport interface ICellExecuteOutputItemEditDto {\n\teditType: CellExecutionUpdateType.OutputItems;\n\tappend?: boolean;\n\toutputId: string;\n\titems: NotebookOutputItemDto[];\n}\n\nexport interface ICellExecutionStateUpdateDto extends ICellExecutionStateUpdate {\n}\n\nexport interface ICellExecutionCompleteDto extends ICellExecutionComplete {\n}\n\nexport type ICellExecuteUpdateDto = ICellExecuteOutputEditDto | ICellExecuteOutputItemEditDto | ICellExecutionStateUpdateDto;\n\nexport interface VariablesResult {\n\tid: number;\n\tname: string;\n\tvalue: string;\n\ttype?: string;\n\tlanguage?: string;\n\texpression?: string;\n\thasNamedChildren: boolean;\n\tindexedChildrenCount: number;\n\textensionId: string;\n}\n\nexport interface MainThreadNotebookKernelsShape extends IDisposable {\n\t$postMessage(handle: number, editorId: string | undefined, message: any): Promise<boolean>;\n\t$addKernel(handle: number, data: INotebookKernelDto2): Promise<void>;\n\t$updateKernel(handle: number, data: Partial<INotebookKernelDto2>): void;\n\t$removeKernel(handle: number): void;\n\t$updateNotebookPriority(handle: number, uri: UriComponents, value: number | undefined): void;\n\n\t$createExecution(handle: number, controllerId: string, uri: UriComponents, cellHandle: number): void;\n\t$updateExecution(handle: number, data: SerializableObjectWithBuffers<ICellExecuteUpdateDto[]>): void;\n\t$completeExecution(handle: number, data: SerializableObjectWithBuffers<ICellExecutionCompleteDto>): void;\n\n\t$createNotebookExecution(handle: number, controllerId: string, uri: UriComponents): void;\n\t$beginNotebookExecution(handle: number,): void;\n\t$completeNotebookExecution(handle: number): void;\n\n\t$addKernelDetectionTask(handle: number, notebookType: string): Promise<void>;\n\t$removeKernelDetectionTask(handle: number): void;\n\n\t$addKernelSourceActionProvider(handle: number, eventHandle: number, notebookType: string): Promise<void>;\n\t$removeKernelSourceActionProvider(handle: number, eventHandle: number): void;\n\t$emitNotebookKernelSourceActionsChangeEvent(eventHandle: number): void;\n\t$receiveVariable(requestId: string, variable: VariablesResult): void;\n\t$variablesUpdated(notebookUri: UriComponents): void;\n}\n\nexport interface MainThreadNotebookRenderersShape extends IDisposable {\n\t$postMessage(editorId: string | undefined, rendererId: string, message: unknown): Promise<boolean>;\n}\n\nexport interface MainThreadInteractiveShape extends IDisposable {\n}\n\nexport interface MainThreadSpeechShape extends IDisposable {\n\t$registerProvider(handle: number, identifier: string, metadata: ISpeechProviderMetadata): void;\n\t$unregisterProvider(handle: number): void;\n\n\t$emitSpeechToTextEvent(session: number, event: ISpeechToTextEvent): void;\n\t$emitTextToSpeechEvent(session: number, event: ITextToSpeechEvent): void;\n\t$emitKeywordRecognitionEvent(session: number, event: IKeywordRecognitionEvent): void;\n}\n\nexport interface ExtHostSpeechShape {\n\t$createSpeechToTextSession(handle: number, session: number, language?: string): Promise<void>;\n\t$cancelSpeechToTextSession(session: number): Promise<void>;\n\n\t$createTextToSpeechSession(handle: number, session: number, language?: string): Promise<void>;\n\t$synthesizeSpeech(session: number, text: string): Promise<void>;\n\t$cancelTextToSpeechSession(session: number): Promise<void>;\n\n\t$createKeywordRecognitionSession(handle: number, session: number): Promise<void>;\n\t$cancelKeywordRecognitionSession(session: number): Promise<void>;\n}\n\nexport interface MainThreadLanguageModelsShape extends IDisposable {\n\t$registerLanguageModelProvider(handle: number, identifier: string, metadata: ILanguageModelChatMetadata): void;\n\t$unregisterProvider(handle: number): void;\n\t$tryStartChatRequest(extension: ExtensionIdentifier, provider: string, requestId: number, messages: IChatMessage[], options: {}, token: CancellationToken): Promise<void>;\n\t$reportResponsePart(requestId: number, chunk: IChatResponseFragment): Promise<void>;\n\t$reportResponseDone(requestId: number, error: SerializedError | undefined): Promise<void>;\n\t$selectChatModels(selector: ILanguageModelChatSelector): Promise<string[]>;\n\t$whenLanguageModelChatRequestMade(identifier: string, extension: ExtensionIdentifier, participant?: string, tokenCount?: number): void;\n\t$countTokens(provider: string, value: string | IChatMessage, token: CancellationToken): Promise<number>;\n}\n\nexport interface ExtHostLanguageModelsShape {\n\t$acceptChatModelMetadata(data: ILanguageModelsChangeEvent): void;\n\t$updateModelAccesslist(data: { from: ExtensionIdentifier; to: ExtensionIdentifier; enabled: boolean }[]): void;\n\t$startChatRequest(handle: number, requestId: number, from: ExtensionIdentifier, messages: IChatMessage[], options: { [name: string]: any }, token: CancellationToken): Promise<void>;\n\t$acceptResponsePart(requestId: number, chunk: IChatResponseFragment): Promise<void>;\n\t$acceptResponseDone(requestId: number, error: SerializedError | undefined): Promise<void>;\n\t$provideTokenLength(handle: number, value: string | IChatMessage, token: CancellationToken): Promise<number>;\n}\n\nexport interface MainThreadEmbeddingsShape extends IDisposable {\n\t$registerEmbeddingProvider(handle: number, identifier: string): void;\n\t$unregisterEmbeddingProvider(handle: number): void;\n\t$computeEmbeddings(embeddingsModel: string, input: string[], token: CancellationToken): Promise<({ values: number[] }[])>;\n}\n\nexport interface ExtHostEmbeddingsShape {\n\t$provideEmbeddings(handle: number, input: string[], token: CancellationToken): Promise<{ values: number[] }[]>;\n\t$acceptEmbeddingModels(models: string[]): void;\n}\n\nexport interface IExtensionChatAgentMetadata extends Dto<IChatAgentMetadata> {\n\thasFollowups?: boolean;\n}\n\nexport interface IDynamicChatAgentProps {\n\tname: string;\n\tpublisherName: string;\n\tdescription?: string;\n\tfullName?: string;\n}\n\nexport interface MainThreadChatAgentsShape2 extends IDisposable {\n\t$registerAgent(handle: number, extension: ExtensionIdentifier, id: string, metadata: IExtensionChatAgentMetadata, dynamicProps: IDynamicChatAgentProps | undefined): void;\n\t$registerChatParticipantDetectionProvider(handle: number): void;\n\t$unregisterChatParticipantDetectionProvider(handle: number): void;\n\t$registerAgentCompletionsProvider(handle: number, id: string, triggerCharacters: string[]): void;\n\t$unregisterAgentCompletionsProvider(handle: number, id: string): void;\n\t$updateAgent(handle: number, metadataUpdate: IExtensionChatAgentMetadata): void;\n\t$unregisterAgent(handle: number): void;\n\t$handleProgressChunk(requestId: string, chunk: IChatProgressDto, handle?: number): Promise<number | void>;\n\n\t$transferActiveChatSession(toWorkspace: UriComponents): void;\n}\n\nexport interface IChatAgentCompletionItem {\n\tid: string;\n\tfullName?: string;\n\ticon?: string;\n\tinsertText?: string;\n\tlabel: string | languages.CompletionItemLabel;\n\tvalue: IChatRequestVariableValueDto;\n\tdetail?: string;\n\tdocumentation?: string | IMarkdownString;\n\tcommand?: ICommandDto;\n}\n\nexport type IChatContentProgressDto =\n\t| Dto<Exclude<IChatProgressResponseContent, IChatTask>>\n\t| IChatTaskDto;\n\nexport type IChatAgentHistoryEntryDto = {\n\trequest: IChatAgentRequest;\n\tresponse: ReadonlyArray<IChatContentProgressDto>;\n\tresult: IChatAgentResult;\n};\n\nexport interface ExtHostChatAgentsShape2 {\n\t$invokeAgent(handle: number, request: Dto<IChatAgentRequest>, context: { history: IChatAgentHistoryEntryDto[] }, token: CancellationToken): Promise<IChatAgentResult | undefined>;\n\t$provideFollowups(request: Dto<IChatAgentRequest>, handle: number, result: IChatAgentResult, context: { history: IChatAgentHistoryEntryDto[] }, token: CancellationToken): Promise<IChatFollowup[]>;\n\t$acceptFeedback(handle: number, result: IChatAgentResult, voteAction: IChatVoteAction): void;\n\t$acceptAction(handle: number, result: IChatAgentResult, action: IChatUserActionEvent): void;\n\t$invokeCompletionProvider(handle: number, query: string, token: CancellationToken): Promise<IChatAgentCompletionItem[]>;\n\t$provideWelcomeMessage(handle: number, location: ChatAgentLocation, token: CancellationToken): Promise<(string | IMarkdownString)[] | undefined>;\n\t$provideChatTitle(handle: number, context: IChatAgentHistoryEntryDto[], token: CancellationToken): Promise<string | undefined>;\n\t$provideSampleQuestions(handle: number, location: ChatAgentLocation, token: CancellationToken): Promise<IChatFollowup[] | undefined>;\n\t$releaseSession(sessionId: string): void;\n\t$detectChatParticipant(handle: number, request: Dto<IChatAgentRequest>, context: { history: IChatAgentHistoryEntryDto[] }, options: { participants: IChatParticipantMetadata[]; location: ChatAgentLocation }, token: CancellationToken): Promise<IChatParticipantDetectionResult | null | undefined>;\n}\nexport interface IChatParticipantMetadata {\n\tparticipant: string;\n\tcommand?: string;\n\tdisambiguation: { category: string; description: string; examples: string[] }[];\n}\n\nexport interface IChatParticipantDetectionResult {\n\tparticipant: string;\n\tcommand?: string;\n}\n\nexport type IChatVariableResolverProgressDto =\n\t| Dto<IChatVariableResolverProgress>;\n\nexport interface MainThreadChatVariablesShape extends IDisposable {\n\t$registerVariable(handle: number, data: IChatVariableData): void;\n\t$handleProgressChunk(requestId: string, progress: IChatVariableResolverProgressDto): Promise<number | void>;\n\t$unregisterVariable(handle: number): void;\n}\n\nexport type IToolDataDto = Omit<IToolData, 'when'>;\n\nexport interface MainThreadLanguageModelToolsShape extends IDisposable {\n\t$getTools(): Promise<Dto<IToolDataDto>[]>;\n\t$invokeTool(dto: IToolInvocation, token: CancellationToken): Promise<IToolResult>;\n\t$countTokensForInvocation(callId: string, input: string, token: CancellationToken): Promise<number>;\n\t$registerTool(id: string): void;\n\t$unregisterTool(name: string): void;\n}\n\nexport type IChatRequestVariableValueDto = Dto<IChatRequestVariableValue>;\n\nexport interface ExtHostChatVariablesShape {\n\t$resolveVariable(handle: number, requestId: string, messageText: string, token: CancellationToken): Promise<IChatRequestVariableValueDto | undefined>;\n}\n\nexport interface ExtHostLanguageModelToolsShape {\n\t$onDidChangeTools(tools: IToolDataDto[]): void;\n\t$invokeTool(dto: IToolInvocation, token: CancellationToken): Promise<IToolResult>;\n\t$countTokensForInvocation(callId: string, input: string, token: CancellationToken): Promise<number>;\n}\n\nexport interface MainThreadUrlsShape extends IDisposable {\n\t$registerUriHandler(handle: number, extensionId: ExtensionIdentifier, extensionDisplayName: string): Promise<void>;\n\t$unregisterUriHandler(handle: number): Promise<void>;\n\t$createAppUri(uri: UriComponents): Promise<UriComponents>;\n}\n\nexport interface IChatDto {\n}\n\nexport interface IChatRequestDto {\n\tmessage: string;\n\tvariables?: Record<string, IChatRequestVariableValue[]>;\n}\n\nexport interface IChatResponseDto {\n\terrorDetails?: IChatResponseErrorDetails;\n\ttimings: {\n\t\tfirstProgress: number;\n\t\ttotalElapsed: number;\n\t};\n}\n\nexport interface IChatResponseProgressFileTreeData {\n\tlabel: string;\n\turi: URI;\n\tchildren?: IChatResponseProgressFileTreeData[];\n}\n\nexport type IDocumentContextDto = {\n\turi: UriComponents;\n\tversion: number;\n\tranges: IRange[];\n};\n\nexport type IChatProgressDto =\n\t| Dto<Exclude<IChatProgress, IChatTask>>\n\t| IChatTaskDto;\n\nexport interface ExtHostUrlsShape {\n\t$handleExternalUri(handle: number, uri: UriComponents): Promise<void>;\n}\n\nexport interface MainThreadUriOpenersShape extends IDisposable {\n\t$registerUriOpener(id: string, schemes: readonly string[], extensionId: ExtensionIdentifier, label: string): Promise<void>;\n\t$unregisterUriOpener(id: string): Promise<void>;\n}\n\nexport interface ExtHostUriOpenersShape {\n\t$canOpenUri(id: string, uri: UriComponents, token: CancellationToken): Promise<languages.ExternalUriOpenerPriority>;\n\t$openUri(id: string, context: { resolvedUri: UriComponents; sourceUri: UriComponents }, token: CancellationToken): Promise<void>;\n}\n\nexport interface MainThreadProfileContentHandlersShape {\n\t$registerProfileContentHandler(id: string, name: string, description: string | undefined, extensionId: string): Promise<void>;\n\t$unregisterProfileContentHandler(id: string): Promise<void>;\n}\n\nexport interface ExtHostProfileContentHandlersShape {\n\t$saveProfile(id: string, name: string, content: string, token: CancellationToken): Promise<UriDto<ISaveProfileResult> | null>;\n\t$readProfile(id: string, idOrUri: string | UriComponents, token: CancellationToken): Promise<string | null>;\n}\n\nexport interface ITextSearchComplete {\n\tlimitHit?: boolean;\n\tmessage?: TextSearchCompleteMessage | TextSearchCompleteMessage[];\n}\n\nexport interface MainThreadWorkspaceShape extends IDisposable {\n\t$startFileSearch(includeFolder: UriComponents | null, options: IFileQueryBuilderOptions, token: CancellationToken): Promise<UriComponents[] | null>;\n\t$startTextSearch(query: search.IPatternInfo, folder: UriComponents | null, options: ITextQueryBuilderOptions, requestId: number, token: CancellationToken): Promise<ITextSearchComplete | null>;\n\t$checkExists(folders: readonly UriComponents[], includes: string[], token: CancellationToken): Promise<boolean>;\n\t$save(uri: UriComponents, options: { saveAs: boolean }): Promise<UriComponents | undefined>;\n\t$saveAll(includeUntitled?: boolean): Promise<boolean>;\n\t$updateWorkspaceFolders(extensionName: string, index: number, deleteCount: number, workspaceFoldersToAdd: { uri: UriComponents; name?: string }[]): Promise<void>;\n\t$resolveProxy(url: string): Promise<string | undefined>;\n\t$lookupAuthorization(authInfo: AuthInfo): Promise<Credentials | undefined>;\n\t$lookupKerberosAuthorization(url: string): Promise<string | undefined>;\n\t$loadCertificates(): Promise<string[]>;\n\t$requestWorkspaceTrust(options?: WorkspaceTrustRequestOptions): Promise<boolean | undefined>;\n\t$registerEditSessionIdentityProvider(handle: number, scheme: string): void;\n\t$unregisterEditSessionIdentityProvider(handle: number): void;\n\t$registerCanonicalUriProvider(handle: number, scheme: string): void;\n\t$unregisterCanonicalUriProvider(handle: number): void;\n}\n\nexport interface IFileChangeDto {\n\tresource: UriComponents;\n\ttype: files.FileChangeType;\n}\n\nexport interface MainThreadFileSystemShape extends IDisposable {\n\t$registerFileSystemProvider(handle: number, scheme: string, capabilities: files.FileSystemProviderCapabilities, readonlyMessage?: IMarkdownString): Promise<void>;\n\t$unregisterProvider(handle: number): void;\n\t$onFileSystemChange(handle: number, resource: IFileChangeDto[]): void;\n\n\t$stat(uri: UriComponents): Promise<files.IStat>;\n\t$readdir(resource: UriComponents): Promise<[string, files.FileType][]>;\n\t$readFile(resource: UriComponents): Promise<VSBuffer>;\n\t$writeFile(resource: UriComponents, content: VSBuffer): Promise<void>;\n\t$rename(resource: UriComponents, target: UriComponents, opts: files.IFileOverwriteOptions): Promise<void>;\n\t$copy(resource: UriComponents, target: UriComponents, opts: files.IFileOverwriteOptions): Promise<void>;\n\t$mkdir(resource: UriComponents): Promise<void>;\n\t$delete(resource: UriComponents, opts: files.IFileDeleteOptions): Promise<void>;\n\n\t$ensureActivation(scheme: string): Promise<void>;\n}\n\nexport interface MainThreadFileSystemEventServiceShape extends IDisposable {\n\t$watch(extensionId: string, session: number, resource: UriComponents, opts: files.IWatchOptions, correlate: boolean): void;\n\t$unwatch(session: number): void;\n}\n\nexport interface MainThreadLabelServiceShape extends IDisposable {\n\t$registerResourceLabelFormatter(handle: number, formatter: ResourceLabelFormatter): void;\n\t$unregisterResourceLabelFormatter(handle: number): void;\n}\n\nexport interface MainThreadSearchShape extends IDisposable {\n\t$registerFileSearchProvider(handle: number, scheme: string): void;\n\t$registerAITextSearchProvider(handle: number, scheme: string): void;\n\t$registerTextSearchProvider(handle: number, scheme: string): void;\n\t$unregisterProvider(handle: number): void;\n\t$handleFileMatch(handle: number, session: number, data: UriComponents[]): void;\n\t$handleTextMatch(handle: number, session: number, data: search.IRawFileMatch2[]): void;\n\t$handleTelemetry(eventName: string, data: any): void;\n}\n\nexport interface MainThreadShareShape extends IDisposable {\n\t$registerShareProvider(handle: number, selector: IDocumentFilterDto[], id: string, label: string, priority: number): void;\n\t$unregisterShareProvider(handle: number): void;\n}\n\nexport interface MainThreadTaskShape extends IDisposable {\n\t$createTaskId(task: tasks.ITaskDTO): Promise<string>;\n\t$registerTaskProvider(handle: number, type: string): Promise<void>;\n\t$unregisterTaskProvider(handle: number): Promise<void>;\n\t$fetchTasks(filter?: tasks.ITaskFilterDTO): Promise<tasks.ITaskDTO[]>;\n\t$getTaskExecution(value: tasks.ITaskHandleDTO | tasks.ITaskDTO): Promise<tasks.ITaskExecutionDTO>;\n\t$executeTask(task: tasks.ITaskHandleDTO | tasks.ITaskDTO): Promise<tasks.ITaskExecutionDTO>;\n\t$terminateTask(id: string): Promise<void>;\n\t$registerTaskSystem(scheme: string, info: tasks.ITaskSystemInfoDTO): void;\n\t$customExecutionComplete(id: string, result?: number): Promise<void>;\n\t$registerSupportedExecutions(custom?: boolean, shell?: boolean, process?: boolean): Promise<void>;\n}\n\nexport interface MainThreadExtensionServiceShape extends IDisposable {\n\t$getExtension(extensionId: string): Promise<Dto<IExtensionDescription> | undefined>;\n\t$activateExtension(extensionId: ExtensionIdentifier, reason: ExtensionActivationReason): Promise<void>;\n\t$onWillActivateExtension(extensionId: ExtensionIdentifier): Promise<void>;\n\t$onDidActivateExtension(extensionId: ExtensionIdentifier, codeLoadingTime: number, activateCallTime: number, activateResolvedTime: number, activationReason: ExtensionActivationReason): void;\n\t$onExtensionActivationError(extensionId: ExtensionIdentifier, error: SerializedError, missingExtensionDependency: MissingExtensionDependency | null): Promise<void>;\n\t$onExtensionRuntimeError(extensionId: ExtensionIdentifier, error: SerializedError): void;\n\t$setPerformanceMarks(marks: performance.PerformanceMark[]): Promise<void>;\n\t$asBrowserUri(uri: UriComponents): Promise<UriComponents>;\n}\n\nexport interface SCMProviderFeatures {\n\thasHistoryProvider?: boolean;\n\thasQuickDiffProvider?: boolean;\n\tquickDiffLabel?: string;\n\tcount?: number;\n\tcommitTemplate?: string;\n\tacceptInputCommand?: languages.Command;\n\tactionButton?: SCMActionButtonDto | null;\n\tstatusBarCommands?: ICommandDto[];\n}\n\nexport interface SCMActionButtonDto {\n\tcommand: ICommandDto;\n\tsecondaryCommands?: ICommandDto[][];\n\tdescription?: string;\n\tenabled: boolean;\n}\n\nexport interface SCMGroupFeatures {\n\thideWhenEmpty?: boolean;\n}\n\nexport type SCMRawResource = [\n\tnumber /*handle*/,\n\tUriComponents /*resourceUri*/,\n\t[UriComponents | ThemeIcon | undefined, UriComponents | ThemeIcon | undefined] /*icons: light, dark*/,\n\tstring /*tooltip*/,\n\tboolean /*strike through*/,\n\tboolean /*faded*/,\n\tstring /*context value*/,\n\tICommandDto | undefined /*command*/,\n\tUriComponents | undefined /* multiFileDiffEditorOriginalUri */,\n\tUriComponents | undefined /* multiFileDiffEditorModifiedUri */,\n];\n\nexport type SCMRawResourceSplice = [\n\tnumber /* start */,\n\tnumber /* delete count */,\n\tSCMRawResource[]\n];\n\nexport type SCMRawResourceSplices = [\n\tnumber, /*handle*/\n\tSCMRawResourceSplice[]\n];\n\nexport interface SCMHistoryItemRefDto {\n\treadonly id: string;\n\treadonly name: string;\n\treadonly revision?: string;\n\treadonly category?: string;\n\treadonly description?: string;\n\treadonly icon?: UriComponents | { light: UriComponents; dark: UriComponents } | ThemeIcon;\n}\n\nexport interface SCMHistoryItemRefsChangeEventDto {\n\treadonly added: readonly SCMHistoryItemRefDto[];\n\treadonly modified: readonly SCMHistoryItemRefDto[];\n\treadonly removed: readonly SCMHistoryItemRefDto[];\n}\n\nexport interface SCMHistoryItemDto {\n\treadonly id: string;\n\treadonly parentIds: string[];\n\treadonly message: string;\n\treadonly displayId?: string;\n\treadonly author?: string;\n\treadonly timestamp?: number;\n\treadonly statistics?: {\n\t\treadonly files: number;\n\t\treadonly insertions: number;\n\t\treadonly deletions: number;\n\t};\n\treadonly references?: SCMHistoryItemRefDto[];\n}\n\nexport interface SCMHistoryItemChangeDto {\n\treadonly uri: UriComponents;\n\treadonly originalUri: UriComponents | undefined;\n\treadonly modifiedUri: UriComponents | undefined;\n\treadonly renameUri: UriComponents | undefined;\n}\n\nexport interface MainThreadSCMShape extends IDisposable {\n\t$registerSourceControl(handle: number, id: string, label: string, rootUri: UriComponents | undefined, inputBoxDocumentUri: UriComponents): Promise<void>;\n\t$updateSourceControl(handle: number, features: SCMProviderFeatures): Promise<void>;\n\t$unregisterSourceControl(handle: number): Promise<void>;\n\n\t$registerGroups(sourceControlHandle: number, groups: [number /*handle*/, string /*id*/, string /*label*/, SCMGroupFeatures, /* multiDiffEditorEnableViewChanges */ boolean][], splices: SCMRawResourceSplices[]): Promise<void>;\n\t$updateGroup(sourceControlHandle: number, handle: number, features: SCMGroupFeatures): Promise<void>;\n\t$updateGroupLabel(sourceControlHandle: number, handle: number, label: string): Promise<void>;\n\t$unregisterGroup(sourceControlHandle: number, handle: number): Promise<void>;\n\n\t$spliceResourceStates(sourceControlHandle: number, splices: SCMRawResourceSplices[]): Promise<void>;\n\n\t$setInputBoxValue(sourceControlHandle: number, value: string): Promise<void>;\n\t$setInputBoxPlaceholder(sourceControlHandle: number, placeholder: string): Promise<void>;\n\t$setInputBoxEnablement(sourceControlHandle: number, enabled: boolean): Promise<void>;\n\t$setInputBoxVisibility(sourceControlHandle: number, visible: boolean): Promise<void>;\n\t$showValidationMessage(sourceControlHandle: number, message: string | IMarkdownString, type: InputValidationType): Promise<void>;\n\t$setValidationProviderIsEnabled(sourceControlHandle: number, enabled: boolean): Promise<void>;\n\n\t$onDidChangeHistoryProviderCurrentHistoryItemRefs(sourceControlHandle: number, historyItemRef?: SCMHistoryItemRefDto, historyItemRemoteRef?: SCMHistoryItemRefDto, historyItemBaseRef?: SCMHistoryItemRefDto): Promise<void>;\n\t$onDidChangeHistoryProviderHistoryItemRefs(sourceControlHandle: number, historyItemRefs: SCMHistoryItemRefsChangeEventDto): Promise<void>;\n}\n\nexport interface MainThreadQuickDiffShape extends IDisposable {\n\t$registerQuickDiffProvider(handle: number, selector: IDocumentFilterDto[], label: string, rootUri: UriComponents | undefined): Promise<void>;\n\t$unregisterQuickDiffProvider(handle: number): Promise<void>;\n}\n\nexport type DebugSessionUUID = string;\n\nexport interface IDebugConfiguration {\n\ttype: string;\n\tname: string;\n\trequest: string;\n\t[key: string]: any;\n}\n\nexport interface IStartDebuggingOptions {\n\tparentSessionID?: DebugSessionUUID;\n\tlifecycleManagedByParent?: boolean;\n\trepl?: IDebugSessionReplMode;\n\tnoDebug?: boolean;\n\tcompact?: boolean;\n\tsuppressDebugToolbar?: boolean;\n\tsuppressDebugStatusbar?: boolean;\n\tsuppressDebugView?: boolean;\n\tsuppressSaveBeforeStart?: boolean;\n\ttestRun?: IDebugTestRunReference;\n}\n\nexport interface MainThreadDebugServiceShape extends IDisposable {\n\t$registerDebugTypes(debugTypes: string[]): void;\n\t$sessionCached(sessionID: string): void;\n\t$acceptDAMessage(handle: number, message: DebugProtocol.ProtocolMessage): void;\n\t$acceptDAError(handle: number, name: string, message: string, stack: string | undefined): void;\n\t$acceptDAExit(handle: number, code: number | undefined, signal: string | undefined): void;\n\t$registerDebugConfigurationProvider(type: string, triggerKind: DebugConfigurationProviderTriggerKind, hasProvideMethod: boolean, hasResolveMethod: boolean, hasResolve2Method: boolean, handle: number): Promise<void>;\n\t$registerDebugAdapterDescriptorFactory(type: string, handle: number): Promise<void>;\n\t$unregisterDebugConfigurationProvider(handle: number): void;\n\t$unregisterDebugAdapterDescriptorFactory(handle: number): void;\n\t$startDebugging(folder: UriComponents | undefined, nameOrConfig: string | IDebugConfiguration, options: IStartDebuggingOptions): Promise<boolean>;\n\t$stopDebugging(sessionId: DebugSessionUUID | undefined): Promise<void>;\n\t$setDebugSessionName(id: DebugSessionUUID, name: string): void;\n\t$customDebugAdapterRequest(id: DebugSessionUUID, command: string, args: any): Promise<any>;\n\t$getDebugProtocolBreakpoint(id: DebugSessionUUID, breakpoinId: string): Promise<DebugProtocol.Breakpoint | undefined>;\n\t$appendDebugConsole(value: string): void;\n\t$registerBreakpoints(breakpoints: Array<ISourceMultiBreakpointDto | IFunctionBreakpointDto | IDataBreakpointDto>): Promise<void>;\n\t$unregisterBreakpoints(breakpointIds: string[], functionBreakpointIds: string[], dataBreakpointIds: string[]): Promise<void>;\n\t$registerDebugVisualizer(extensionId: string, id: string): void;\n\t$unregisterDebugVisualizer(extensionId: string, id: string): void;\n\t$registerDebugVisualizerTree(treeId: string, canEdit: boolean): void;\n\t$unregisterDebugVisualizerTree(treeId: string): void;\n}\n\nexport interface IOpenUriOptions {\n\treadonly allowTunneling?: boolean;\n\treadonly allowContributedOpeners?: boolean | string;\n}\n\nexport interface MainThreadWindowShape extends IDisposable {\n\t$getInitialState(): Promise<{ isFocused: boolean; isActive: boolean }>;\n\t$openUri(uri: UriComponents, uriString: string | undefined, options: IOpenUriOptions): Promise<boolean>;\n\t$asExternalUri(uri: UriComponents, options: IOpenUriOptions): Promise<UriComponents>;\n}\n\nexport enum CandidatePortSource {\n\tNone = 0,\n\tProcess = 1,\n\tOutput = 2,\n\tHybrid = 3\n}\n\nexport interface PortAttributesSelector {\n\tportRange?: [number, number] | number;\n\tcommandPattern?: RegExp;\n}\n\nexport interface MainThreadTunnelServiceShape extends IDisposable {\n\t$openTunnel(tunnelOptions: TunnelOptions, source: string | undefined): Promise<TunnelDto | undefined>;\n\t$closeTunnel(remote: { host: string; port: number }): Promise<void>;\n\t$getTunnels(): Promise<TunnelDescription[]>;\n\t$setTunnelProvider(features: TunnelProviderFeatures | undefined, enablePortsView: boolean): Promise<void>;\n\t$setRemoteTunnelService(processId: number): Promise<void>;\n\t$setCandidateFilter(): Promise<void>;\n\t$onFoundNewCandidates(candidates: CandidatePort[]): Promise<void>;\n\t$setCandidatePortSource(source: CandidatePortSource): Promise<void>;\n\t$registerPortsAttributesProvider(selector: PortAttributesSelector, providerHandle: number): Promise<void>;\n\t$unregisterPortsAttributesProvider(providerHandle: number): Promise<void>;\n}\n\nexport interface MainThreadTimelineShape extends IDisposable {\n\t$registerTimelineProvider(provider: TimelineProviderDescriptor): void;\n\t$unregisterTimelineProvider(source: string): void;\n\t$emitTimelineChangeEvent(e: TimelineChangeEvent | undefined): void;\n}\n\nexport interface HoverWithId extends languages.Hover {\n\t/**\n\t * Id of the hover\n\t */\n\tid: number;\n}\n\n// -- extension host\n\nexport interface ICommandMetadataDto {\n\t/**\n\t * NOTE: Please use an ILocalizedString. string is in the type for backcompat for now.\n\t * A short summary of what the command does. This will be used in:\n\t * - API commands\n\t * - when showing keybindings that have no other UX\n\t * - when searching for commands in the Command Palette\n\t */\n\treadonly description: ILocalizedString | string;\n\treadonly args?: ReadonlyArray<{\n\t\treadonly name: string;\n\t\treadonly isOptional?: boolean;\n\t\treadonly description?: string;\n\t}>;\n\treadonly returns?: string;\n}\n\nexport interface ExtHostCommandsShape {\n\t$executeContributedCommand(id: string, ...args: any[]): Promise<unknown>;\n\t$getContributedCommandMetadata(): Promise<{ [id: string]: string | ICommandMetadataDto }>;\n}\n\nexport interface ExtHostConfigurationShape {\n\t$initializeConfiguration(data: IConfigurationInitData): void;\n\t$acceptConfigurationChanged(data: IConfigurationInitData, change: IConfigurationChange): void;\n}\n\nexport interface ExtHostDiagnosticsShape {\n\t$acceptMarkersChange(data: [UriComponents, IMarkerData[]][]): void;\n}\n\nexport interface ExtHostDocumentContentProvidersShape {\n\t$provideTextDocumentContent(handle: number, uri: UriComponents): Promise<string | null | undefined>;\n}\n\nexport interface IModelAddedData {\n\turi: UriComponents;\n\tversionId: number;\n\tlines: string[];\n\tEOL: string;\n\tlanguageId: string;\n\tisDirty: boolean;\n}\nexport interface ExtHostDocumentsShape {\n\t$acceptModelLanguageChanged(strURL: UriComponents, newLanguageId: string): void;\n\t$acceptModelSaved(strURL: UriComponents): void;\n\t$acceptDirtyStateChanged(strURL: UriComponents, isDirty: boolean): void;\n\t$acceptModelChanged(strURL: UriComponents, e: IModelChangedEvent, isDirty: boolean): void;\n}\n\nexport interface ExtHostDocumentSaveParticipantShape {\n\t$participateInSave(resource: UriComponents, reason: SaveReason): Promise<boolean[]>;\n}\n\nexport interface ITextEditorAddData {\n\tid: string;\n\tdocumentUri: UriComponents;\n\toptions: IResolvedTextEditorConfiguration;\n\tselections: ISelection[];\n\tvisibleRanges: IRange[];\n\teditorPosition: EditorGroupColumn | undefined;\n}\nexport interface ITextEditorPositionData {\n\t[id: string]: EditorGroupColumn;\n}\nexport interface IEditorPropertiesChangeData {\n\toptions: IResolvedTextEditorConfiguration | null;\n\tselections: ISelectionChangeEvent | null;\n\tvisibleRanges: IRange[] | null;\n}\nexport interface ISelectionChangeEvent {\n\tselections: Selection[];\n\tsource?: string;\n}\n\nexport interface ExtHostEditorsShape {\n\t$acceptEditorPropertiesChanged(id: string, props: IEditorPropertiesChangeData): void;\n\t$acceptEditorPositionData(data: ITextEditorPositionData): void;\n}\n\nexport interface IDocumentsAndEditorsDelta {\n\tremovedDocuments?: UriComponents[];\n\taddedDocuments?: IModelAddedData[];\n\tremovedEditors?: string[];\n\taddedEditors?: ITextEditorAddData[];\n\tnewActiveEditor?: string | null;\n}\n\nexport interface ExtHostDocumentsAndEditorsShape {\n\t$acceptDocumentsAndEditorsDelta(delta: IDocumentsAndEditorsDelta): void;\n}\n\nexport interface IDataTransferFileDTO {\n\treadonly id: string;\n\treadonly name: string;\n\treadonly uri?: UriComponents;\n}\n\nexport interface DataTransferItemDTO {\n\treadonly asString: string;\n\treadonly fileData: IDataTransferFileDTO | undefined;\n\treadonly uriListData?: ReadonlyArray<string | UriComponents>;\n}\n\nexport interface DataTransferDTO {\n\treadonly items: Array<[/* type */string, DataTransferItemDTO]>;\n}\n\nexport interface CheckboxUpdate {\n\ttreeItemHandle: string;\n\tnewState: boolean;\n}\n\nexport interface ExtHostTreeViewsShape {\n\t$getChildren(treeViewId: string, treeItemHandle?: string): Promise<ITreeItem[] | undefined>;\n\t$handleDrop(destinationViewId: string, requestId: number, treeDataTransfer: DataTransferDTO, targetHandle: string | undefined, token: CancellationToken, operationUuid?: string, sourceViewId?: string, sourceTreeItemHandles?: string[]): Promise<void>;\n\t$handleDrag(sourceViewId: string, sourceTreeItemHandles: string[], operationUuid: string, token: CancellationToken): Promise<DataTransferDTO | undefined>;\n\t$setExpanded(treeViewId: string, treeItemHandle: string, expanded: boolean): void;\n\t$setSelectionAndFocus(treeViewId: string, selectionHandles: string[], focusHandle: string): void;\n\t$setVisible(treeViewId: string, visible: boolean): void;\n\t$changeCheckboxState(treeViewId: string, checkboxUpdates: CheckboxUpdate[]): void;\n\t$hasResolve(treeViewId: string): Promise<boolean>;\n\t$resolve(treeViewId: string, treeItemHandle: string, token: CancellationToken): Promise<ITreeItem | undefined>;\n}\n\nexport interface ExtHostWorkspaceShape {\n\t$initializeWorkspace(workspace: IWorkspaceData | null, trusted: boolean): void;\n\t$acceptWorkspaceData(workspace: IWorkspaceData | null): void;\n\t$handleTextSearchResult(result: search.IRawFileMatch2, requestId: number): void;\n\t$onDidGrantWorkspaceTrust(): void;\n\t$getEditSessionIdentifier(folder: UriComponents, token: CancellationToken): Promise<string | undefined>;\n\t$provideEditSessionIdentityMatch(folder: UriComponents, identity1: string, identity2: string, token: CancellationToken): Promise<EditSessionIdentityMatch | undefined>;\n\t$onWillCreateEditSessionIdentity(folder: UriComponents, token: CancellationToken, timeout: number): Promise<void>;\n\t$provideCanonicalUri(uri: UriComponents, targetScheme: string, token: CancellationToken): Promise<UriComponents | undefined>;\n}\n\nexport interface ExtHostFileSystemInfoShape {\n\t$acceptProviderInfos(uri: UriComponents, capabilities: number | null): void;\n}\n\nexport interface ExtHostFileSystemShape {\n\t$stat(handle: number, resource: UriComponents): Promise<files.IStat>;\n\t$readdir(handle: number, resource: UriComponents): Promise<[string, files.FileType][]>;\n\t$readFile(handle: number, resource: UriComponents): Promise<VSBuffer>;\n\t$writeFile(handle: number, resource: UriComponents, content: VSBuffer, opts: files.IFileWriteOptions): Promise<void>;\n\t$rename(handle: number, resource: UriComponents, target: UriComponents, opts: files.IFileOverwriteOptions): Promise<void>;\n\t$copy(handle: number, resource: UriComponents, target: UriComponents, opts: files.IFileOverwriteOptions): Promise<void>;\n\t$mkdir(handle: number, resource: UriComponents): Promise<void>;\n\t$delete(handle: number, resource: UriComponents, opts: files.IFileDeleteOptions): Promise<void>;\n\t$watch(handle: number, session: number, resource: UriComponents, opts: files.IWatchOptions): void;\n\t$unwatch(handle: number, session: number): void;\n\t$open(handle: number, resource: UriComponents, opts: files.IFileOpenOptions): Promise<number>;\n\t$close(handle: number, fd: number): Promise<void>;\n\t$read(handle: number, fd: number, pos: number, length: number): Promise<VSBuffer>;\n\t$write(handle: number, fd: number, pos: number, data: VSBuffer): Promise<number>;\n}\n\nexport interface ExtHostLabelServiceShape {\n\t$registerResourceLabelFormatter(formatter: ResourceLabelFormatter): IDisposable;\n}\n\nexport interface ExtHostAuthenticationShape {\n\t$getSessions(id: string, scopes: string[] | undefined, options: IAuthenticationProviderSessionOptions): Promise<ReadonlyArray<AuthenticationSession>>;\n\t$createSession(id: string, scopes: string[], options: IAuthenticationCreateSessionOptions): Promise<AuthenticationSession>;\n\t$removeSession(id: string, sessionId: string): Promise<void>;\n\t$onDidChangeAuthenticationSessions(id: string, label: string): Promise<void>;\n}\n\nexport interface ExtHostAiRelatedInformationShape {\n\t$provideAiRelatedInformation(handle: number, query: string, token: CancellationToken): Promise<RelatedInformationResult[]>;\n}\n\nexport interface MainThreadAiRelatedInformationShape {\n\t$getAiRelatedInformation(query: string, types: RelatedInformationType[]): Promise<RelatedInformationResult[]>;\n\t$registerAiRelatedInformationProvider(handle: number, type: RelatedInformationType): void;\n\t$unregisterAiRelatedInformationProvider(handle: number): void;\n}\n\nexport interface ExtHostAiEmbeddingVectorShape {\n\t$provideAiEmbeddingVector(handle: number, strings: string[], token: CancellationToken): Promise<number[][]>;\n}\n\nexport interface MainThreadAiEmbeddingVectorShape {\n\t$registerAiEmbeddingVectorProvider(model: string, handle: number): void;\n\t$unregisterAiEmbeddingVectorProvider(handle: number): void;\n}\n\nexport interface ExtHostSecretStateShape {\n\t$onDidChangePassword(e: { extensionId: string; key: string }): Promise<void>;\n}\n\nexport interface ExtHostSearchShape {\n\t$enableExtensionHostSearch(): void;\n\t$provideFileSearchResults(handle: number, session: number, query: search.IRawQuery, token: CancellationToken): Promise<search.ISearchCompleteStats>;\n\t$provideAITextSearchResults(handle: number, session: number, query: search.IRawAITextQuery, token: CancellationToken): Promise<search.ISearchCompleteStats>;\n\t$provideTextSearchResults(handle: number, session: number, query: search.IRawTextQuery, token: CancellationToken): Promise<search.ISearchCompleteStats>;\n\t$clearCache(cacheKey: string): Promise<void>;\n}\n\nexport interface ExtHostExtensionServiceShape {\n\t$resolveAuthority(remoteAuthority: string, resolveAttempt: number): Promise<Dto<IResolveAuthorityResult>>;\n\t/**\n\t * Returns `null` if no resolver for `remoteAuthority` is found.\n\t */\n\t$getCanonicalURI(remoteAuthority: string, uri: UriComponents): Promise<UriComponents | null>;\n\t$startExtensionHost(extensionsDelta: IExtensionDescriptionDelta): Promise<void>;\n\t$extensionTestsExecute(): Promise<number>;\n\t$activateByEvent(activationEvent: string, activationKind: ActivationKind): Promise<void>;\n\t$activate(extensionId: ExtensionIdentifier, reason: ExtensionActivationReason): Promise<boolean>;\n\t$setRemoteEnvironment(env: { [key: string]: string | null }): Promise<void>;\n\t$updateRemoteConnectionData(connectionData: IRemoteConnectionData): Promise<void>;\n\n\t$deltaExtensions(extensionsDelta: IExtensionDescriptionDelta): Promise<void>;\n\n\t$test_latency(n: number): Promise<number>;\n\t$test_up(b: VSBuffer): Promise<number>;\n\t$test_down(size: number): Promise<VSBuffer>;\n}\n\nexport interface FileSystemEvents {\n\tsession?: number;\n\tcreated: UriComponents[];\n\tchanged: UriComponents[];\n\tdeleted: UriComponents[];\n}\n\nexport interface SourceTargetPair {\n\tsource?: UriComponents;\n\ttarget: UriComponents;\n}\n\nexport interface IWillRunFileOperationParticipation {\n\tedit: IWorkspaceEditDto;\n\textensionNames: string[];\n}\n\nexport interface ExtHostFileSystemEventServiceShape {\n\t$onFileEvent(events: FileSystemEvents): void;\n\t$onWillRunFileOperation(operation: files.FileOperation, files: readonly SourceTargetPair[], timeout: number, token: CancellationToken): Promise<IWillRunFileOperationParticipation | undefined>;\n\t$onDidRunFileOperation(operation: files.FileOperation, files: readonly SourceTargetPair[]): void;\n}\n\nexport interface ExtHostLanguagesShape {\n\t$acceptLanguageIds(ids: string[]): void;\n}\n\nexport interface ExtHostHeapServiceShape {\n\t$onGarbageCollection(ids: number[]): void;\n}\nexport interface IRawColorInfo {\n\tcolor: [number, number, number, number];\n\trange: IRange;\n}\n\nexport class IdObject {\n\t_id?: number;\n\tprivate static _n = 0;\n\tstatic mixin<T extends object>(object: T): T & IdObject {\n\t\t(<any>object)._id = IdObject._n++;\n\t\treturn <any>object;\n\t}\n}\n\nexport const enum ISuggestDataDtoField {\n\tlabel = 'a',\n\tkind = 'b',\n\tdetail = 'c',\n\tdocumentation = 'd',\n\tsortText = 'e',\n\tfilterText = 'f',\n\tpreselect = 'g',\n\tinsertText = 'h',\n\tinsertTextRules = 'i',\n\trange = 'j',\n\tcommitCharacters = 'k',\n\tadditionalTextEdits = 'l',\n\tkindModifier = 'm',\n\tcommandIdent = 'n',\n\tcommandId = 'o',\n\tcommandArguments = 'p',\n}\n\nexport interface ISuggestDataDto {\n\t[ISuggestDataDtoField.label]: string | languages.CompletionItemLabel;\n\t[ISuggestDataDtoField.kind]?: languages.CompletionItemKind;\n\t[ISuggestDataDtoField.detail]?: string;\n\t[ISuggestDataDtoField.documentation]?: string | IMarkdownString;\n\t[ISuggestDataDtoField.sortText]?: string;\n\t[ISuggestDataDtoField.filterText]?: string;\n\t[ISuggestDataDtoField.preselect]?: true;\n\t[ISuggestDataDtoField.insertText]?: string;\n\t[ISuggestDataDtoField.insertTextRules]?: languages.CompletionItemInsertTextRule;\n\t[ISuggestDataDtoField.range]?: IRange | { insert: IRange; replace: IRange };\n\t[ISuggestDataDtoField.commitCharacters]?: string;\n\t[ISuggestDataDtoField.additionalTextEdits]?: ISingleEditOperation[];\n\t[ISuggestDataDtoField.kindModifier]?: languages.CompletionItemTag[];\n\t// Command\n\t[ISuggestDataDtoField.commandIdent]?: string;\n\t[ISuggestDataDtoField.commandId]?: string;\n\t[ISuggestDataDtoField.commandArguments]?: any[];\n\t// not-standard\n\tx?: ChainedCacheId;\n}\n\nexport const enum ISuggestResultDtoField {\n\tdefaultRanges = 'a',\n\tcompletions = 'b',\n\tisIncomplete = 'c',\n\tduration = 'd',\n}\n\nexport interface ISuggestResultDto {\n\t[ISuggestResultDtoField.defaultRanges]: { insert: IRange; replace: IRange };\n\t[ISuggestResultDtoField.completions]: ISuggestDataDto[];\n\t[ISuggestResultDtoField.isIncomplete]: undefined | true;\n\t[ISuggestResultDtoField.duration]: number;\n\tx?: number;\n}\n\nexport interface ISignatureHelpDto {\n\tid: CacheId;\n\tsignatures: languages.SignatureInformation[];\n\tactiveSignature: number;\n\tactiveParameter: number;\n}\n\nexport interface ISignatureHelpContextDto {\n\treadonly triggerKind: languages.SignatureHelpTriggerKind;\n\treadonly triggerCharacter: string | undefined;\n\treadonly isRetrigger: boolean;\n\treadonly activeSignatureHelp: ISignatureHelpDto | undefined;\n}\n\nexport type IInlayHintDto = CachedSessionItem<Dto<languages.InlayHint>>;\n\nexport type IInlayHintsDto = CachedSession<{ hints: IInlayHintDto[] }>;\n\nexport type ILocationDto = Dto<languages.Location>;\nexport type ILocationLinkDto = Dto<languages.LocationLink>;\n\nexport type IWorkspaceSymbolDto = CachedSessionItem<Dto<IWorkspaceSymbol>>;\nexport type IWorkspaceSymbolsDto = CachedSession<{ symbols: IWorkspaceSymbolDto[] }>;\n\nexport interface IWorkspaceEditEntryMetadataDto {\n\tneedsConfirmation: boolean;\n\tlabel: string;\n\tdescription?: string;\n\ticonPath?: { id: string } | UriComponents | { light: UriComponents; dark: UriComponents };\n}\n\n\nexport type ICellEditOperationDto =\n\tnotebookCommon.ICellPartialMetadataEdit\n\t| notebookCommon.IDocumentMetadataEdit\n\t| {\n\t\teditType: notebookCommon.CellEditType.Replace;\n\t\tindex: number;\n\t\tcount: number;\n\t\tcells: NotebookCellDataDto[];\n\t};\n\nexport type IWorkspaceCellEditDto = Dto<Omit<notebookCommon.IWorkspaceNotebookCellEdit, 'cellEdit'>> & { cellEdit: ICellEditOperationDto };\n\nexport type IWorkspaceFileEditDto = Dto<\n\tOmit<languages.IWorkspaceFileEdit, 'options'> & {\n\t\toptions?: Omit<languages.WorkspaceFileEditOptions, 'contents'> & { contents?: { type: 'base64'; value: string } | { type: 'dataTransferItem'; id: string } };\n\t}>;\n\nexport type IWorkspaceTextEditDto = Dto<languages.IWorkspaceTextEdit>;\n\nexport interface IWorkspaceEditDto {\n\tedits: Array<IWorkspaceFileEditDto | IWorkspaceTextEditDto | IWorkspaceCellEditDto>;\n}\n\nexport type ICommandDto = { $ident?: string } & languages.Command;\n\nexport interface ICodeActionDto {\n\tcacheId?: ChainedCacheId;\n\ttitle: string;\n\tedit?: IWorkspaceEditDto;\n\tdiagnostics?: Dto<IMarkerData[]>;\n\tcommand?: ICommandDto;\n\tkind?: string;\n\tisPreferred?: boolean;\n\tisAI?: boolean;\n\tdisabled?: string;\n\tranges?: IRange[];\n}\n\nexport interface ICodeActionListDto {\n\tcacheId: CacheId;\n\tactions: ReadonlyArray<ICodeActionDto>;\n}\n\nexport interface ICodeActionProviderMetadataDto {\n\treadonly providedKinds?: readonly string[];\n\treadonly documentation?: ReadonlyArray<{ readonly kind: string; readonly command: ICommandDto }>;\n}\n\nexport type CacheId = number;\nexport type ChainedCacheId = [CacheId, CacheId];\n\ntype CachedSessionItem<T> = T & { cacheId?: ChainedCacheId };\ntype CachedSession<T> = T & { cacheId?: CacheId };\n\nexport type ILinksListDto = CachedSession<{ links: ILinkDto[] }>;\nexport type ILinkDto = CachedSessionItem<Dto<languages.ILink>>;\n\nexport type ICodeLensListDto = CachedSession<{ lenses: ICodeLensDto[] }>;\nexport type ICodeLensDto = CachedSessionItem<Dto<languages.CodeLens>>;\n\nexport type ICallHierarchyItemDto = Dto<CallHierarchyItem>;\n\nexport interface IIncomingCallDto {\n\tfrom: ICallHierarchyItemDto;\n\tfromRanges: IRange[];\n}\n\nexport interface IOutgoingCallDto {\n\tfromRanges: IRange[];\n\tto: ICallHierarchyItemDto;\n}\n\nexport interface ILanguageWordDefinitionDto {\n\tlanguageId: string;\n\tregexSource: string;\n\tregexFlags: string;\n}\n\nexport interface ILinkedEditingRangesDto {\n\tranges: IRange[];\n\twordPattern?: IRegExpDto;\n}\n\nexport interface IInlineValueContextDto {\n\tframeId: number;\n\tstoppedLocation: IRange;\n}\n\nexport type ITypeHierarchyItemDto = Dto<TypeHierarchyItem>;\n\nexport interface IPasteEditProviderMetadataDto {\n\treadonly supportsCopy: boolean;\n\treadonly supportsPaste: boolean;\n\treadonly supportsResolve: boolean;\n\n\treadonly providedPasteEditKinds?: readonly string[];\n\treadonly copyMimeTypes?: readonly string[];\n\treadonly pasteMimeTypes?: readonly string[];\n}\n\nexport interface IDocumentPasteContextDto {\n\treadonly only: string | undefined;\n\treadonly triggerKind: languages.DocumentPasteTriggerKind;\n}\n\nexport interface IPasteEditDto {\n\t_cacheId?: ChainedCacheId;\n\ttitle: string;\n\tkind: { value: string } | undefined;\n\tinsertText: string | { snippet: string };\n\tadditionalEdit?: IWorkspaceEditDto;\n\tyieldTo?: readonly string[];\n}\n\nexport interface IDocumentDropEditProviderMetadata {\n\treadonly supportsResolve: boolean;\n\n\tdropMimeTypes: readonly string[];\n}\n\nexport interface IDocumentDropEditDto {\n\t_cacheId?: ChainedCacheId;\n\ttitle: string;\n\tkind: string | undefined;\n\tinsertText: string | { snippet: string };\n\tadditionalEdit?: IWorkspaceEditDto;\n\tyieldTo?: readonly string[];\n}\n\nexport interface ExtHostLanguageFeaturesShape {\n\t$provideDocumentSymbols(handle: number, resource: UriComponents, token: CancellationToken): Promise<languages.DocumentSymbol[] | undefined>;\n\t$provideCodeLenses(handle: number, resource: UriComponents, token: CancellationToken): Promise<ICodeLensListDto | undefined>;\n\t$resolveCodeLens(handle: number, symbol: ICodeLensDto, token: CancellationToken): Promise<ICodeLensDto | undefined>;\n\t$releaseCodeLenses(handle: number, id: number): void;\n\t$provideDefinition(handle: number, resource: UriComponents, position: IPosition, token: CancellationToken): Promise<ILocationLinkDto[]>;\n\t$provideDeclaration(handle: number, resource: UriComponents, position: IPosition, token: CancellationToken): Promise<ILocationLinkDto[]>;\n\t$provideImplementation(handle: number, resource: UriComponents, position: IPosition, token: CancellationToken): Promise<ILocationLinkDto[]>;\n\t$provideTypeDefinition(handle: number, resource: UriComponents, position: IPosition, token: CancellationToken): Promise<ILocationLinkDto[]>;\n\t$provideHover(handle: number, resource: UriComponents, position: IPosition, context: languages.HoverContext<{ id: number }> | undefined, token: CancellationToken): Promise<HoverWithId | undefined>;\n\t$releaseHover(handle: number, id: number): void;\n\t$provideEvaluatableExpression(handle: number, resource: UriComponents, position: IPosition, token: CancellationToken): Promise<languages.EvaluatableExpression | undefined>;\n\t$provideInlineValues(handle: number, resource: UriComponents, range: IRange, context: languages.InlineValueContext, token: CancellationToken): Promise<languages.InlineValue[] | undefined>;\n\t$provideDocumentHighlights(handle: number, resource: UriComponents, position: IPosition, token: CancellationToken): Promise<languages.DocumentHighlight[] | undefined>;\n\t$provideMultiDocumentHighlights(handle: number, resource: UriComponents, position: IPosition, otherModels: UriComponents[], token: CancellationToken): Promise<Dto<languages.MultiDocumentHighlight[]> | undefined>;\n\t$provideLinkedEditingRanges(handle: number, resource: UriComponents, position: IPosition, token: CancellationToken): Promise<ILinkedEditingRangesDto | undefined>;\n\t$provideReferences(handle: number, resource: UriComponents, position: IPosition, context: languages.ReferenceContext, token: CancellationToken): Promise<ILocationDto[] | undefined>;\n\t$provideCodeActions(handle: number, resource: UriComponents, rangeOrSelection: IRange | ISelection, context: languages.CodeActionContext, token: CancellationToken): Promise<ICodeActionListDto | undefined>;\n\t$resolveCodeAction(handle: number, id: ChainedCacheId, token: CancellationToken): Promise<{ edit?: IWorkspaceEditDto; command?: ICommandDto }>;\n\t$releaseCodeActions(handle: number, cacheId: number): void;\n\t$prepareDocumentPaste(handle: number, uri: UriComponents, ranges: readonly IRange[], dataTransfer: DataTransferDTO, token: CancellationToken): Promise<DataTransferDTO | undefined>;\n\t$providePasteEdits(handle: number, requestId: number, uri: UriComponents, ranges: IRange[], dataTransfer: DataTransferDTO, context: IDocumentPasteContextDto, token: CancellationToken): Promise<IPasteEditDto[] | undefined>;\n\t$resolvePasteEdit(handle: number, id: ChainedCacheId, token: CancellationToken): Promise<{ additionalEdit?: IWorkspaceEditDto }>;\n\t$releasePasteEdits(handle: number, cacheId: number): void;\n\t$provideDocumentFormattingEdits(handle: number, resource: UriComponents, options: languages.FormattingOptions, token: CancellationToken): Promise<ISingleEditOperation[] | undefined>;\n\t$provideDocumentRangeFormattingEdits(handle: number, resource: UriComponents, range: IRange, options: languages.FormattingOptions, token: CancellationToken): Promise<ISingleEditOperation[] | undefined>;\n\t$provideDocumentRangesFormattingEdits(handle: number, resource: UriComponents, range: IRange[], options: languages.FormattingOptions, token: CancellationToken): Promise<ISingleEditOperation[] | undefined>;\n\t$provideOnTypeFormattingEdits(handle: number, resource: UriComponents, position: IPosition, ch: string, options: languages.FormattingOptions, token: CancellationToken): Promise<ISingleEditOperation[] | undefined>;\n\t$provideWorkspaceSymbols(handle: number, search: string, token: CancellationToken): Promise<IWorkspaceSymbolsDto>;\n\t$resolveWorkspaceSymbol(handle: number, symbol: IWorkspaceSymbolDto, token: CancellationToken): Promise<IWorkspaceSymbolDto | undefined>;\n\t$releaseWorkspaceSymbols(handle: number, id: number): void;\n\t$provideRenameEdits(handle: number, resource: UriComponents, position: IPosition, newName: string, token: CancellationToken): Promise<IWorkspaceEditDto & { rejectReason?: string } | undefined>;\n\t$resolveRenameLocation(handle: number, resource: UriComponents, position: IPosition, token: CancellationToken): Promise<languages.RenameLocation | undefined>;\n\t$supportsAutomaticNewSymbolNamesTriggerKind(handle: number): Promise<boolean | undefined>;\n\t$provideNewSymbolNames(handle: number, resource: UriComponents, range: IRange, triggerKind: languages.NewSymbolNameTriggerKind, token: CancellationToken): Promise<languages.NewSymbolName[] | undefined>;\n\t$provideDocumentSemanticTokens(handle: number, resource: UriComponents, previousResultId: number, token: CancellationToken): Promise<VSBuffer | null>;\n\t$releaseDocumentSemanticTokens(handle: number, semanticColoringResultId: number): void;\n\t$provideDocumentRangeSemanticTokens(handle: number, resource: UriComponents, range: IRange, token: CancellationToken): Promise<VSBuffer | null>;\n\t$provideCompletionItems(handle: number, resource: UriComponents, position: IPosition, context: languages.CompletionContext, token: CancellationToken): Promise<ISuggestResultDto | undefined>;\n\t$resolveCompletionItem(handle: number, id: ChainedCacheId, token: CancellationToken): Promise<ISuggestDataDto | undefined>;\n\t$releaseCompletionItems(handle: number, id: number): void;\n\t$provideInlineCompletions(handle: number, resource: UriComponents, position: IPosition, context: languages.InlineCompletionContext, token: CancellationToken): Promise<IdentifiableInlineCompletions | undefined>;\n\t$provideInlineEdits(handle: number, resource: UriComponents, range: IRange, context: languages.InlineCompletionContext, token: CancellationToken): Promise<IdentifiableInlineCompletions | undefined>;\n\t$handleInlineCompletionDidShow(handle: number, pid: number, idx: number, updatedInsertText: string): void;\n\t$handleInlineCompletionPartialAccept(handle: number, pid: number, idx: number, acceptedCharacters: number, info: languages.PartialAcceptInfo): void;\n\t$freeInlineCompletionsList(handle: number, pid: number): void;\n\t$provideSignatureHelp(handle: number, resource: UriComponents, position: IPosition, context: languages.SignatureHelpContext, token: CancellationToken): Promise<ISignatureHelpDto | undefined>;\n\t$releaseSignatureHelp(handle: number, id: number): void;\n\t$provideInlayHints(handle: number, resource: UriComponents, range: IRange, token: CancellationToken): Promise<IInlayHintsDto | undefined>;\n\t$resolveInlayHint(handle: number, id: ChainedCacheId, token: CancellationToken): Promise<IInlayHintDto | undefined>;\n\t$releaseInlayHints(handle: number, id: number): void;\n\t$provideDocumentLinks(handle: number, resource: UriComponents, token: CancellationToken): Promise<ILinksListDto | undefined>;\n\t$resolveDocumentLink(handle: number, id: ChainedCacheId, token: CancellationToken): Promise<ILinkDto | undefined>;\n\t$releaseDocumentLinks(handle: number, id: number): void;\n\t$provideDocumentColors(handle: number, resource: UriComponents, token: CancellationToken): Promise<IRawColorInfo[]>;\n\t$provideColorPresentations(handle: number, resource: UriComponents, colorInfo: IRawColorInfo, token: CancellationToken): Promise<languages.IColorPresentation[] | undefined>;\n\t$provideFoldingRanges(handle: number, resource: UriComponents, context: languages.FoldingContext, token: CancellationToken): Promise<languages.FoldingRange[] | undefined>;\n\t$provideSelectionRanges(handle: number, resource: UriComponents, positions: IPosition[], token: CancellationToken): Promise<languages.SelectionRange[][]>;\n\t$prepareCallHierarchy(handle: number, resource: UriComponents, position: IPosition, token: CancellationToken): Promise<ICallHierarchyItemDto[] | undefined>;\n\t$provideCallHierarchyIncomingCalls(handle: number, sessionId: string, itemId: string, token: CancellationToken): Promise<IIncomingCallDto[] | undefined>;\n\t$provideCallHierarchyOutgoingCalls(handle: number, sessionId: string, itemId: string, token: CancellationToken): Promise<IOutgoingCallDto[] | undefined>;\n\t$releaseCallHierarchy(handle: number, sessionId: string): void;\n\t$setWordDefinitions(wordDefinitions: ILanguageWordDefinitionDto[]): void;\n\t$prepareTypeHierarchy(handle: number, resource: UriComponents, position: IPosition, token: CancellationToken): Promise<ITypeHierarchyItemDto[] | undefined>;\n\t$provideTypeHierarchySupertypes(handle: number, sessionId: string, itemId: string, token: CancellationToken): Promise<ITypeHierarchyItemDto[] | undefined>;\n\t$provideTypeHierarchySubtypes(handle: number, sessionId: string, itemId: string, token: CancellationToken): Promise<ITypeHierarchyItemDto[] | undefined>;\n\t$releaseTypeHierarchy(handle: number, sessionId: string): void;\n\t$provideDocumentOnDropEdits(handle: number, requestId: number, resource: UriComponents, position: IPosition, dataTransferDto: DataTransferDTO, token: CancellationToken): Promise<IDocumentDropEditDto[] | undefined>;\n\t$releaseDocumentOnDropEdits(handle: number, cacheId: number): void;\n\t$provideMappedEdits(handle: number, document: UriComponents, codeBlocks: string[], context: IMappedEditsContextDto, token: CancellationToken): Promise<IWorkspaceEditDto | null>;\n\t$provideInlineEdit(handle: number, document: UriComponents, context: languages.IInlineEditContext, token: CancellationToken): Promise<IdentifiableInlineEdit | undefined>;\n\t$freeInlineEdit(handle: number, pid: number): void;\n}\n\nexport interface ExtHostQuickOpenShape {\n\t$onItemSelected(handle: number): void;\n\t$validateInput(input: string): Promise<string | { content: string; severity: Severity } | null | undefined>;\n\t$onDidChangeActive(sessionId: number, handles: number[]): void;\n\t$onDidChangeSelection(sessionId: number, handles: number[]): void;\n\t$onDidAccept(sessionId: number): void;\n\t$onDidChangeValue(sessionId: number, value: string): void;\n\t$onDidTriggerButton(sessionId: number, handle: number): void;\n\t$onDidTriggerItemButton(sessionId: number, itemHandle: number, buttonHandle: number): void;\n\t$onDidHide(sessionId: number): void;\n}\n\nexport interface ExtHostTelemetryShape {\n\t$initializeTelemetryLevel(level: TelemetryLevel, supportsTelemetry: boolean, productConfig?: { usage: boolean; error: boolean }): void;\n\t$onDidChangeTelemetryLevel(level: TelemetryLevel): void;\n}\n\nexport interface ITerminalLinkDto {\n\t/** The ID of the link to enable activation and disposal. */\n\tid: number;\n\t/** The startIndex of the link in the line. */\n\tstartIndex: number;\n\t/** The length of the link in the line. */\n\tlength: number;\n\t/** The descriptive label for what the link does when activated. */\n\tlabel?: string;\n}\n\nexport interface ITerminalDimensionsDto {\n\tcolumns: number;\n\trows: number;\n}\n\ntype SingleOrMany<T> = T[] | T;\n\nexport interface ITerminalQuickFixTerminalCommandDto {\n\tterminalCommand: string;\n\tshouldExecute?: boolean;\n}\n\nexport interface ITerminalQuickFixOpenerDto {\n\turi: UriComponents;\n}\n\nexport type TerminalQuickFix = ITerminalQuickFixTerminalCommandDto | ITerminalQuickFixOpenerDto | ICommandDto;\n\nexport interface TerminalCommandMatchResultDto {\n\tcommandLine: string;\n\tcommandLineMatch: RegExpMatchArray;\n\toutputMatch?: {\n\t\tregexMatch: RegExpMatchArray;\n\t\toutputLines: string[];\n\t};\n}\n\nexport interface ITerminalCommandDto {\n\tcommandLine: string | undefined;\n\tcwd: URI | string | undefined;\n\texitCode: number | undefined;\n\toutput: string | undefined;\n}\n\nexport interface ExtHostTerminalServiceShape {\n\t$acceptTerminalClosed(id: number, exitCode: number | undefined, exitReason: TerminalExitReason): void;\n\t$acceptTerminalOpened(id: number, extHostTerminalId: string | undefined, name: string, shellLaunchConfig: IShellLaunchConfigDto): void;\n\t$acceptActiveTerminalChanged(id: number | null): void;\n\t$acceptTerminalProcessId(id: number, processId: number): void;\n\t$acceptTerminalProcessData(id: number, data: string): void;\n\t$acceptDidExecuteCommand(id: number, command: ITerminalCommandDto): void;\n\t$acceptTerminalTitleChange(id: number, name: string): void;\n\t$acceptTerminalDimensions(id: number, cols: number, rows: number): void;\n\t$acceptTerminalMaximumDimensions(id: number, cols: number, rows: number): void;\n\t$acceptTerminalInteraction(id: number): void;\n\t$acceptTerminalSelection(id: number, selection: string | undefined): void;\n\t$startExtensionTerminal(id: number, initialDimensions: ITerminalDimensionsDto | undefined): Promise<ITerminalLaunchError | undefined>;\n\t$acceptProcessAckDataEvent(id: number, charCount: number): void;\n\t$acceptProcessInput(id: number, data: string): void;\n\t$acceptProcessResize(id: number, cols: number, rows: number): void;\n\t$acceptProcessShutdown(id: number, immediate: boolean): void;\n\t$acceptProcessRequestInitialCwd(id: number): void;\n\t$acceptProcessRequestCwd(id: number): void;\n\t$acceptProcessRequestLatency(id: number): Promise<number>;\n\t$provideLinks(id: number, line: string): Promise<ITerminalLinkDto[]>;\n\t$activateLink(id: number, linkId: number): void;\n\t$initEnvironmentVariableCollections(collections: [string, ISerializableEnvironmentVariableCollection][]): void;\n\t$acceptDefaultProfile(profile: ITerminalProfile, automationProfile: ITerminalProfile): void;\n\t$createContributedProfileTerminal(id: string, options: ICreateContributedTerminalProfileOptions): Promise<void>;\n\t$provideTerminalQuickFixes(id: string, matchResult: TerminalCommandMatchResultDto, token: CancellationToken): Promise<SingleOrMany<TerminalQuickFix> | undefined>;\n}\n\nexport interface ExtHostTerminalShellIntegrationShape {\n\t$shellIntegrationChange(instanceId: number): void;\n\t$shellExecutionStart(instanceId: number, commandLineValue: string, commandLineConfidence: TerminalShellExecutionCommandLineConfidence, isTrusted: boolean, cwd: UriComponents | undefined): void;\n\t$shellExecutionEnd(instanceId: number, commandLineValue: string, commandLineConfidence: TerminalShellExecutionCommandLineConfidence, isTrusted: boolean, exitCode: number | undefined): void;\n\t$shellExecutionData(instanceId: number, data: string): void;\n\t$cwdChange(instanceId: number, cwd: UriComponents | undefined): void;\n\t$closeTerminal(instanceId: number): void;\n}\n\nexport interface ExtHostSCMShape {\n\t$provideOriginalResource(sourceControlHandle: number, uri: UriComponents, token: CancellationToken): Promise<UriComponents | null>;\n\t$onInputBoxValueChange(sourceControlHandle: number, value: string): void;\n\t$executeResourceCommand(sourceControlHandle: number, groupHandle: number, handle: number, preserveFocus: boolean): Promise<void>;\n\t$validateInput(sourceControlHandle: number, value: string, cursorPosition: number): Promise<[string | IMarkdownString, number] | undefined>;\n\t$setSelectedSourceControl(selectedSourceControlHandle: number | undefined): Promise<void>;\n\t$provideHistoryItemRefs(sourceControlHandle: number, token: CancellationToken): Promise<SCMHistoryItemRefDto[] | undefined>;\n\t$provideHistoryItems(sourceControlHandle: number, options: any, token: CancellationToken): Promise<SCMHistoryItemDto[] | undefined>;\n\t$provideHistoryItemChanges(sourceControlHandle: number, historyItemId: string, historyItemParentId: string | undefined, token: CancellationToken): Promise<SCMHistoryItemChangeDto[] | undefined>;\n\t$resolveHistoryItemRefsCommonAncestor(sourceControlHandle: number, historyItemRefs: string[], token: CancellationToken): Promise<string | undefined>;\n}\n\nexport interface ExtHostQuickDiffShape {\n\t$provideOriginalResource(sourceControlHandle: number, uri: UriComponents, token: CancellationToken): Promise<UriComponents | null>;\n}\n\nexport interface ExtHostShareShape {\n\t$provideShare(handle: number, shareableItem: IShareableItemDto, token: CancellationToken): Promise<UriComponents | string | undefined>;\n}\n\nexport interface ExtHostTaskShape {\n\t$provideTasks(handle: number, validTypes: { [key: string]: boolean }): Promise<tasks.ITaskSetDTO>;\n\t$resolveTask(handle: number, taskDTO: tasks.ITaskDTO): Promise<tasks.ITaskDTO | undefined>;\n\t$onDidStartTask(execution: tasks.ITaskExecutionDTO, terminalId: number, resolvedDefinition: tasks.ITaskDefinitionDTO): void;\n\t$onDidStartTaskProcess(value: tasks.ITaskProcessStartedDTO): void;\n\t$onDidEndTaskProcess(value: tasks.ITaskProcessEndedDTO): void;\n\t$OnDidEndTask(execution: tasks.ITaskExecutionDTO): void;\n\t$resolveVariables(workspaceFolder: UriComponents, toResolve: { process?: { name: string; cwd?: string }; variables: string[] }): Promise<{ process?: string; variables: { [key: string]: string } }>;\n\t$jsonTasksSupported(): Promise<boolean>;\n\t$findExecutable(command: string, cwd?: string, paths?: string[]): Promise<string | undefined>;\n}\n\nexport interface IBreakpointDto {\n\ttype: string;\n\tid?: string;\n\tenabled: boolean;\n\tcondition?: string;\n\thitCondition?: string;\n\tlogMessage?: string;\n\tmode?: string;\n}\n\nexport interface IFunctionBreakpointDto extends IBreakpointDto {\n\ttype: 'function';\n\tfunctionName: string;\n\tmode?: string;\n}\n\nexport interface IDataBreakpointDto extends IBreakpointDto {\n\ttype: 'data';\n\tdataId: string;\n\tcanPersist: boolean;\n\tlabel: string;\n\taccessTypes?: DebugProtocol.DataBreakpointAccessType[];\n\taccessType: DebugProtocol.DataBreakpointAccessType;\n\tmode?: string;\n}\n\nexport interface ISourceBreakpointDto extends IBreakpointDto {\n\ttype: 'source';\n\turi: UriComponents;\n\tline: number;\n\tcharacter: number;\n}\n\nexport interface IBreakpointsDeltaDto {\n\tadded?: Array<ISourceBreakpointDto | IFunctionBreakpointDto | IDataBreakpointDto>;\n\tremoved?: string[];\n\tchanged?: Array<ISourceBreakpointDto | IFunctionBreakpointDto | IDataBreakpointDto>;\n}\n\nexport interface ISourceMultiBreakpointDto {\n\ttype: 'sourceMulti';\n\turi: UriComponents;\n\tlines: {\n\t\tid: string;\n\t\tenabled: boolean;\n\t\tcondition?: string;\n\t\thitCondition?: string;\n\t\tlogMessage?: string;\n\t\tline: number;\n\t\tcharacter: number;\n\t\tmode?: string;\n\t}[];\n}\n\nexport interface IDebugSessionFullDto {\n\tid: DebugSessionUUID;\n\ttype: string;\n\tname: string;\n\tparent: DebugSessionUUID | undefined;\n\tfolderUri: UriComponents | undefined;\n\tconfiguration: IConfig;\n}\n\nexport type IDebugSessionDto = IDebugSessionFullDto | DebugSessionUUID;\n\nexport interface IThreadFocusDto {\n\tkind: 'thread';\n\tsessionId: string;\n\tthreadId: number;\n}\n\nexport interface IStackFrameFocusDto {\n\tkind: 'stackFrame';\n\tsessionId: string;\n\tthreadId: number;\n\tframeId: number;\n}\n\n\nexport interface ExtHostDebugServiceShape {\n\t$substituteVariables(folder: UriComponents | undefined, config: IConfig): Promise<IConfig>;\n\t$runInTerminal(args: DebugProtocol.RunInTerminalRequestArguments, sessionId: string): Promise<number | undefined>;\n\t$startDASession(handle: number, session: IDebugSessionDto): Promise<void>;\n\t$stopDASession(handle: number): Promise<void>;\n\t$sendDAMessage(handle: number, message: DebugProtocol.ProtocolMessage): void;\n\t$resolveDebugConfiguration(handle: number, folder: UriComponents | undefined, debugConfiguration: IConfig, token: CancellationToken): Promise<IConfig | null | undefined>;\n\t$resolveDebugConfigurationWithSubstitutedVariables(handle: number, folder: UriComponents | undefined, debugConfiguration: IConfig, token: CancellationToken): Promise<IConfig | null | undefined>;\n\t$provideDebugConfigurations(handle: number, folder: UriComponents | undefined, token: CancellationToken): Promise<IConfig[]>;\n\t$provideDebugAdapter(handle: number, session: IDebugSessionDto): Promise<Dto<IAdapterDescriptor>>;\n\t$acceptDebugSessionStarted(session: IDebugSessionDto): void;\n\t$acceptDebugSessionTerminated(session: IDebugSessionDto): void;\n\t$acceptDebugSessionActiveChanged(session: IDebugSessionDto | undefined): void;\n\t$acceptDebugSessionCustomEvent(session: IDebugSessionDto, event: any): void;\n\t$acceptBreakpointsDelta(delta: IBreakpointsDeltaDto): void;\n\t$acceptDebugSessionNameChanged(session: IDebugSessionDto, name: string): void;\n\t$acceptStackFrameFocus(focus: IThreadFocusDto | IStackFrameFocusDto | undefined): void;\n\t$provideDebugVisualizers(extensionId: string, id: string, context: IDebugVisualizationContext, token: CancellationToken): Promise<IDebugVisualization.Serialized[]>;\n\t$resolveDebugVisualizer(id: number, token: CancellationToken): Promise<MainThreadDebugVisualization>;\n\t$executeDebugVisualizerCommand(id: number): Promise<void>;\n\t$disposeDebugVisualizers(ids: number[]): void;\n\t$getVisualizerTreeItem(treeId: string, element: IDebugVisualizationContext): Promise<IDebugVisualizationTreeItem.Serialized | undefined>;\n\t$getVisualizerTreeItemChildren(treeId: string, element: number): Promise<IDebugVisualizationTreeItem.Serialized[]>;\n\t$editVisualizerTreeItem(element: number, value: string): Promise<IDebugVisualizationTreeItem.Serialized | undefined>;\n\t$disposeVisualizedTree(element: number): void;\n}\n\n\nexport interface DecorationRequest {\n\treadonly id: number;\n\treadonly uri: UriComponents;\n}\n\nexport type DecorationData = [boolean, string, string | ThemeIcon, ThemeColor];\nexport type DecorationReply = { [id: number]: DecorationData };\n\nexport interface ExtHostDecorationsShape {\n\t$provideDecorations(handle: number, requests: DecorationRequest[], token: CancellationToken): Promise<DecorationReply>;\n}\n\nexport interface ExtHostWindowShape {\n\t$onDidChangeWindowFocus(value: boolean): void;\n\t$onDidChangeWindowActive(value: boolean): void;\n}\n\nexport interface ExtHostLogLevelServiceShape {\n\t$setLogLevel(level: LogLevel, resource?: UriComponents): void;\n}\n\nexport interface MainThreadLoggerShape {\n\t$log(file: UriComponents, messages: [LogLevel, string][]): void;\n\t$flush(file: UriComponents): void;\n\t$createLogger(file: UriComponents, options?: ILoggerOptions): Promise<void>;\n\t$registerLogger(logger: UriDto<ILoggerResource>): Promise<void>;\n\t$deregisterLogger(resource: UriComponents): Promise<void>;\n\t$setVisibility(resource: UriComponents, visible: boolean): Promise<void>;\n}\n\nexport interface ExtHostOutputServiceShape {\n\t$setVisibleChannel(channelId: string | null): void;\n}\n\nexport interface ExtHostProgressShape {\n\t$acceptProgressCanceled(handle: number): void;\n}\n\nexport interface ExtHostCommentsShape {\n\t$createCommentThreadTemplate(commentControllerHandle: number, uriComponents: UriComponents, range: IRange | undefined, editorId?: string): Promise<void>;\n\t$updateCommentThreadTemplate(commentControllerHandle: number, threadHandle: number, range: IRange): Promise<void>;\n\t$deleteCommentThread(commentControllerHandle: number, commentThreadHandle: number): void;\n\t$provideCommentingRanges(commentControllerHandle: number, uriComponents: UriComponents, token: CancellationToken): Promise<{ ranges: IRange[]; fileComments: boolean } | undefined>;\n\t$toggleReaction(commentControllerHandle: number, threadHandle: number, uri: UriComponents, comment: languages.Comment, reaction: languages.CommentReaction): Promise<void>;\n\t$setActiveComment(controllerHandle: number, commentInfo: { commentThreadHandle: number; uniqueIdInThread?: number } | undefined): Promise<void>;\n}\n\nexport interface INotebookSelectionChangeEvent {\n\tselections: ICellRange[];\n}\n\nexport interface INotebookVisibleRangesEvent {\n\tranges: ICellRange[];\n}\n\nexport interface INotebookEditorPropertiesChangeData {\n\tvisibleRanges?: INotebookVisibleRangesEvent;\n\tselections?: INotebookSelectionChangeEvent;\n}\n\nexport interface INotebookDocumentPropertiesChangeData {\n\tmetadata?: notebookCommon.NotebookDocumentMetadata;\n}\n\nexport interface INotebookModelAddedData {\n\turi: UriComponents;\n\tversionId: number;\n\tcells: NotebookCellDto[];\n\tviewType: string;\n\tmetadata?: notebookCommon.NotebookDocumentMetadata;\n}\n\nexport interface INotebookEditorAddData {\n\tid: string;\n\tdocumentUri: UriComponents;\n\tselections: ICellRange[];\n\tvisibleRanges: ICellRange[];\n\tviewColumn?: number;\n}\n\nexport interface INotebookDocumentsAndEditorsDelta {\n\tremovedDocuments?: UriComponents[];\n\taddedDocuments?: INotebookModelAddedData[];\n\tremovedEditors?: string[];\n\taddedEditors?: INotebookEditorAddData[];\n\tnewActiveEditor?: string | null;\n\tvisibleEditors?: string[];\n}\n\nexport interface NotebookOutputItemDto {\n\treadonly mime: string;\n\treadonly valueBytes: VSBuffer;\n}\n\nexport interface NotebookOutputDto {\n\titems: NotebookOutputItemDto[];\n\toutputId: string;\n\tmetadata?: Record<string, any>;\n}\n\nexport interface NotebookCellDataDto {\n\tsource: string;\n\tlanguage: string;\n\tmime: string | undefined;\n\tcellKind: notebookCommon.CellKind;\n\toutputs: NotebookOutputDto[];\n\tmetadata?: notebookCommon.NotebookCellMetadata;\n\tinternalMetadata?: notebookCommon.NotebookCellInternalMetadata;\n}\n\nexport interface NotebookDataDto {\n\treadonly cells: NotebookCellDataDto[];\n\treadonly metadata: notebookCommon.NotebookDocumentMetadata;\n}\n\nexport interface NotebookCellDto {\n\thandle: number;\n\turi: UriComponents;\n\teol: string;\n\tsource: string[];\n\tlanguage: string;\n\tmime?: string;\n\tcellKind: notebookCommon.CellKind;\n\toutputs: NotebookOutputDto[];\n\tmetadata?: notebookCommon.NotebookCellMetadata;\n\tinternalMetadata?: notebookCommon.NotebookCellInternalMetadata;\n}\n\nexport type INotebookPartialFileStatsWithMetadata = Omit<files.IFileStatWithMetadata, 'resource' | 'children'>;\n\nexport interface ExtHostNotebookShape extends ExtHostNotebookDocumentsAndEditorsShape {\n\t$provideNotebookCellStatusBarItems(handle: number, uri: UriComponents, index: number, token: CancellationToken): Promise<INotebookCellStatusBarListDto | undefined>;\n\t$releaseNotebookCellStatusBarItems(id: number): void;\n\n\t$dataToNotebook(handle: number, data: VSBuffer, token: CancellationToken): Promise<SerializableObjectWithBuffers<NotebookDataDto>>;\n\t$notebookToData(handle: number, data: SerializableObjectWithBuffers<NotebookDataDto>, token: CancellationToken): Promise<VSBuffer>;\n\t$saveNotebook(handle: number, uri: UriComponents, versionId: number, options: files.IWriteFileOptions, token: CancellationToken): Promise<INotebookPartialFileStatsWithMetadata>;\n\n\t$searchInNotebooks(handle: number, textQuery: search.ITextQuery, viewTypeFileTargets: NotebookPriorityInfo[], otherViewTypeFileTargets: NotebookPriorityInfo[], token: CancellationToken): Promise<{ results: IRawClosedNotebookFileMatch[]; limitHit: boolean }>;\n}\n\nexport interface ExtHostNotebookDocumentSaveParticipantShape {\n\t$participateInSave(resource: UriComponents, reason: SaveReason, token: CancellationToken): Promise<boolean>;\n}\n\nexport interface ExtHostNotebookRenderersShape {\n\t$postRendererMessage(editorId: string, rendererId: string, message: unknown): void;\n}\n\nexport interface ExtHostNotebookDocumentsAndEditorsShape {\n\t$acceptDocumentAndEditorsDelta(delta: SerializableObjectWithBuffers<INotebookDocumentsAndEditorsDelta>): void;\n}\n\nexport type NotebookRawContentEventDto =\n\t// notebookCommon.NotebookCellsInitializeEvent<NotebookCellDto>\n\t| {\n\n\t\treadonly kind: notebookCommon.NotebookCellsChangeType.ModelChange;\n\t\treadonly changes: notebookCommon.NotebookCellTextModelSplice<NotebookCellDto>[];\n\t}\n\t| {\n\t\treadonly kind: notebookCommon.NotebookCellsChangeType.Move;\n\t\treadonly index: number;\n\t\treadonly length: number;\n\t\treadonly newIdx: number;\n\t}\n\t| {\n\t\treadonly kind: notebookCommon.NotebookCellsChangeType.Output;\n\t\treadonly index: number;\n\t\treadonly outputs: NotebookOutputDto[];\n\t}\n\t| {\n\t\treadonly kind: notebookCommon.NotebookCellsChangeType.OutputItem;\n\t\treadonly index: number;\n\t\treadonly outputId: string;\n\t\treadonly outputItems: NotebookOutputItemDto[];\n\t\treadonly append: boolean;\n\t}\n\t| notebookCommon.NotebookCellsChangeLanguageEvent\n\t| notebookCommon.NotebookCellsChangeMimeEvent\n\t| notebookCommon.NotebookCellsChangeMetadataEvent\n\t| notebookCommon.NotebookCellsChangeInternalMetadataEvent\n\t// | notebookCommon.NotebookDocumentChangeMetadataEvent\n\t| notebookCommon.NotebookCellContentChangeEvent\n\t// | notebookCommon.NotebookDocumentUnknownChangeEvent\n\t;\n\nexport type NotebookCellsChangedEventDto = {\n\treadonly rawEvents: NotebookRawContentEventDto[];\n\treadonly versionId: number;\n};\n\nexport interface ExtHostNotebookDocumentsShape {\n\t$acceptModelChanged(uriComponents: UriComponents, event: SerializableObjectWithBuffers<NotebookCellsChangedEventDto>, isDirty: boolean, newMetadata?: notebookCommon.NotebookDocumentMetadata): void;\n\t$acceptDirtyStateChanged(uriComponents: UriComponents, isDirty: boolean): void;\n\t$acceptModelSaved(uriComponents: UriComponents): void;\n}\n\nexport type INotebookEditorViewColumnInfo = Record<string, number>;\n\nexport interface ExtHostNotebookEditorsShape {\n\t$acceptEditorPropertiesChanged(id: string, data: INotebookEditorPropertiesChangeData): void;\n\t$acceptEditorViewColumns(data: INotebookEditorViewColumnInfo): void;\n}\n\nexport interface ExtHostNotebookKernelsShape {\n\t$acceptNotebookAssociation(handle: number, uri: UriComponents, value: boolean): void;\n\t$executeCells(handle: number, uri: UriComponents, handles: number[]): Promise<void>;\n\t$cancelCells(handle: number, uri: UriComponents, handles: number[]): Promise<void>;\n\t$acceptKernelMessageFromRenderer(handle: number, editorId: string, message: any): void;\n\t$cellExecutionChanged(uri: UriComponents, cellHandle: number, state: notebookCommon.NotebookCellExecutionState | undefined): void;\n\t$provideKernelSourceActions(handle: number, token: CancellationToken): Promise<notebookCommon.INotebookKernelSourceAction[]>;\n\t$provideVariables(handle: number, requestId: string, notebookUri: UriComponents, parentId: number | undefined, kind: 'named' | 'indexed', start: number, token: CancellationToken): Promise<void>;\n}\n\nexport interface ExtHostInteractiveShape {\n\t$willAddInteractiveDocument(uri: UriComponents, eol: string, languageId: string, notebookUri: UriComponents): void;\n\t$willRemoveInteractiveDocument(uri: UriComponents, notebookUri: UriComponents): void;\n}\n\nexport interface ExtHostStorageShape {\n\t$acceptValue(shared: boolean, extensionId: string, value: string): void;\n}\n\nexport interface ExtHostThemingShape {\n\t$onColorThemeChange(themeType: string): void;\n}\n\nexport interface MainThreadThemingShape extends IDisposable {\n}\n\nexport interface MainThreadLocalizationShape extends IDisposable {\n\t$fetchBuiltInBundleUri(id: string, language: string): Promise<UriComponents | undefined>;\n\t$fetchBundleContents(uriComponents: UriComponents): Promise<string>;\n}\n\nexport interface TunnelDto {\n\tremoteAddress: { port: number; host: string };\n\tlocalAddress: { port: number; host: string } | string;\n\tpublic: boolean;\n\tprivacy: TunnelPrivacyId | string;\n\tprotocol: string | undefined;\n}\n\n\nexport interface ExtHostTunnelServiceShape {\n\t$forwardPort(tunnelOptions: TunnelOptions, tunnelCreationOptions: TunnelCreationOptions): Promise<TunnelDto | string | undefined>;\n\t$closeTunnel(remote: { host: string; port: number }, silent?: boolean): Promise<void>;\n\t$onDidTunnelsChange(): Promise<void>;\n\t$registerCandidateFinder(enable: boolean): Promise<void>;\n\t$applyCandidateFilter(candidates: CandidatePort[]): Promise<CandidatePort[]>;\n\t$providePortAttributes(handles: number[], ports: number[], pid: number | undefined, commandline: string | undefined, cancellationToken: CancellationToken): Promise<ProvidedPortAttributes[]>;\n}\n\nexport interface ExtHostTimelineShape {\n\t$getTimeline(source: string, uri: UriComponents, options: TimelineOptions, token: CancellationToken): Promise<Dto<Timeline> | undefined>;\n}\n\nexport const enum ExtHostTestingResource {\n\tWorkspace,\n\tTextDocument\n}\n\nexport interface ExtHostTestingShape {\n\t$runControllerTests(req: IStartControllerTests[], token: CancellationToken): Promise<{ error?: string }[]>;\n\t$startContinuousRun(req: ICallProfileRunHandler[], token: CancellationToken): Promise<{ error?: string }[]>;\n\t$cancelExtensionTestRun(runId: string | undefined, taskId: string | undefined): void;\n\t/** Handles a diff of tests, as a result of a subscribeToDiffs() call */\n\t$acceptDiff(diff: TestsDiffOp.Serialized[]): void;\n\t/** Expands a test item's children, by the given number of levels. */\n\t$expandTest(testId: string, levels: number): Promise<void>;\n\t/** Requests coverage details for a test run. Errors if not available. */\n\t$getCoverageDetails(coverageId: string, testId: string | undefined, token: CancellationToken): Promise<CoverageDetails.Serialized[]>;\n\t/** Disposes resources associated with a test run. */\n\t$disposeRun(runId: string): void;\n\t/** Configures a test run config. */\n\t$configureRunProfile(controllerId: string, configId: number): void;\n\t/** Asks the controller to refresh its tests */\n\t$refreshTests(controllerId: string, token: CancellationToken): Promise<void>;\n\t/** Ensures any pending test diffs are flushed */\n\t$syncTests(): Promise<void>;\n\t/** Sets the active test run profiles */\n\t$setDefaultRunProfiles(profiles: Record</* controller id */string, /* profile id */ number[]>): void;\n\t$getTestsRelatedToCode(uri: UriComponents, position: IPosition, token: CancellationToken): Promise<string[]>;\n\t$getCodeRelatedToTest(testId: string, token: CancellationToken): Promise<ILocationDto[]>;\n\n\t// --- test results:\n\n\t/** Publishes that a test run finished. */\n\t$publishTestResults(results: ISerializedTestResults[]): void;\n\t/** Requests followup actions for a test (failure) message */\n\t$provideTestFollowups(req: TestMessageFollowupRequest, token: CancellationToken): Promise<TestMessageFollowupResponse[]>;\n\t/** Actions a followup actions for a test (failure) message */\n\t$executeTestFollowup(id: number): Promise<void>;\n\t/** Disposes followup actions for a test (failure) message */\n\t$disposeTestFollowups(id: number[]): void;\n}\n\nexport interface ExtHostLocalizationShape {\n\tgetMessage(extensionId: string, details: IStringDetails): string;\n\tgetBundle(extensionId: string): { [key: string]: string } | undefined;\n\tgetBundleUri(extensionId: string): URI | undefined;\n\tinitializeLocalizedMessages(extension: IExtensionDescription): Promise<void>;\n}\n\nexport interface IStringDetails {\n\tmessage: string;\n\targs?: Record<string | number, any>;\n\tcomment?: string | string[];\n}\n\nexport interface ITestControllerPatch {\n\tlabel?: string;\n\tcapabilities?: TestControllerCapability;\n}\n\nexport interface MainThreadTestingShape {\n\t// --- test lifecycle:\n\n\t/** Registers that there's a test controller with the given ID */\n\t$registerTestController(controllerId: string, label: string, capability: TestControllerCapability): void;\n\t/** Updates the label of an existing test controller. */\n\t$updateController(controllerId: string, patch: ITestControllerPatch): void;\n\t/** Diposes of the test controller with the given ID */\n\t$unregisterTestController(controllerId: string): void;\n\t/** Requests tests published to VS Code. */\n\t$subscribeToDiffs(): void;\n\t/** Stops requesting tests published to VS Code. */\n\t$unsubscribeFromDiffs(): void;\n\t/** Publishes that new tests were available on the given source. */\n\t$publishDiff(controllerId: string, diff: TestsDiffOp.Serialized[]): void;\n\t/** Gets coverage details from a test result. */\n\t$getCoverageDetails(resultId: string, taskIndex: number, uri: UriComponents, token: CancellationToken): Promise<CoverageDetails.Serialized[]>;\n\n\t// --- test run configurations:\n\n\t/** Called when a new test run configuration is available */\n\t$publishTestRunProfile(config: ITestRunProfile): void;\n\t/** Updates an existing test run configuration */\n\t$updateTestRunConfig(controllerId: string, configId: number, update: Partial<ITestRunProfile>): void;\n\t/** Removes a previously-published test run config */\n\t$removeTestProfile(controllerId: string, configId: number): void;\n\n\n\t// --- test run handling:\n\n\t/** Request by an extension to run tests. */\n\t$runTests(req: ResolvedTestRunRequest, token: CancellationToken): Promise<string>;\n\t/**\n\t * Adds tests to the run. The tests are given in descending depth. The first\n\t * item will be a previously-known test, or a test root.\n\t */\n\t$addTestsToRun(controllerId: string, runId: string, tests: ITestItem.Serialized[]): void;\n\t/** Updates the state of a test run in the given run. */\n\t$updateTestStateInRun(runId: string, taskId: string, testId: string, state: TestResultState, duration?: number): void;\n\t/** Appends a message to a test in the run. */\n\t$appendTestMessagesInRun(runId: string, taskId: string, testId: string, messages: ITestMessage.Serialized[]): void;\n\t/** Appends raw output to the test run.. */\n\t$appendOutputToRun(runId: string, taskId: string, output: VSBuffer, location?: ILocationDto, testId?: string): void;\n\t/** Triggered when coverage is added to test results. */\n\t$appendCoverage(runId: string, taskId: string, coverage: IFileCoverage.Serialized): void;\n\t/** Signals a task in a test run started. */\n\t$startedTestRunTask(runId: string, task: ITestRunTask): void;\n\t/** Signals a task in a test run ended. */\n\t$finishedTestRunTask(runId: string, taskId: string): void;\n\t/** Start a new extension-provided test run. */\n\t$startedExtensionTestRun(req: ExtensionRunTestsRequest): void;\n\t/** Signals that an extension-provided test run finished. */\n\t$finishedExtensionTestRun(runId: string): void;\n\t/** Marks a test (or controller) as retired in all results. */\n\t$markTestRetired(testIds: string[] | undefined): void;\n}\n\n// --- proxy identifiers\n\nexport const MainContext = {\n\tMainThreadAuthentication: createProxyIdentifier<MainThreadAuthenticationShape>('MainThreadAuthentication'),\n\tMainThreadBulkEdits: createProxyIdentifier<MainThreadBulkEditsShape>('MainThreadBulkEdits'),\n\tMainThreadLanguageModels: createProxyIdentifier<MainThreadLanguageModelsShape>('MainThreadLanguageModels'),\n\tMainThreadEmbeddings: createProxyIdentifier<MainThreadEmbeddingsShape>('MainThreadEmbeddings'),\n\tMainThreadChatAgents2: createProxyIdentifier<MainThreadChatAgentsShape2>('MainThreadChatAgents2'),\n\tMainThreadChatVariables: createProxyIdentifier<MainThreadChatVariablesShape>('MainThreadChatVariables'),\n\tMainThreadLanguageModelTools: createProxyIdentifier<MainThreadLanguageModelToolsShape>('MainThreadChatSkills'),\n\tMainThreadClipboard: createProxyIdentifier<MainThreadClipboardShape>('MainThreadClipboard'),\n\tMainThreadCommands: createProxyIdentifier<MainThreadCommandsShape>('MainThreadCommands'),\n\tMainThreadComments: createProxyIdentifier<MainThreadCommentsShape>('MainThreadComments'),\n\tMainThreadConfiguration: createProxyIdentifier<MainThreadConfigurationShape>('MainThreadConfiguration'),\n\tMainThreadConsole: createProxyIdentifier<MainThreadConsoleShape>('MainThreadConsole'),\n\tMainThreadDebugService: createProxyIdentifier<MainThreadDebugServiceShape>('MainThreadDebugService'),\n\tMainThreadDecorations: createProxyIdentifier<MainThreadDecorationsShape>('MainThreadDecorations'),\n\tMainThreadDiagnostics: createProxyIdentifier<MainThreadDiagnosticsShape>('MainThreadDiagnostics'),\n\tMainThreadDialogs: createProxyIdentifier<MainThreadDiaglogsShape>('MainThreadDiaglogs'),\n\tMainThreadDocuments: createProxyIdentifier<MainThreadDocumentsShape>('MainThreadDocuments'),\n\tMainThreadDocumentContentProviders: createProxyIdentifier<MainThreadDocumentContentProvidersShape>('MainThreadDocumentContentProviders'),\n\tMainThreadTextEditors: createProxyIdentifier<MainThreadTextEditorsShape>('MainThreadTextEditors'),\n\tMainThreadEditorInsets: createProxyIdentifier<MainThreadEditorInsetsShape>('MainThreadEditorInsets'),\n\tMainThreadEditorTabs: createProxyIdentifier<MainThreadEditorTabsShape>('MainThreadEditorTabs'),\n\tMainThreadErrors: createProxyIdentifier<MainThreadErrorsShape>('MainThreadErrors'),\n\tMainThreadTreeViews: createProxyIdentifier<MainThreadTreeViewsShape>('MainThreadTreeViews'),\n\tMainThreadDownloadService: createProxyIdentifier<MainThreadDownloadServiceShape>('MainThreadDownloadService'),\n\tMainThreadLanguageFeatures: createProxyIdentifier<MainThreadLanguageFeaturesShape>('MainThreadLanguageFeatures'),\n\tMainThreadLanguages: createProxyIdentifier<MainThreadLanguagesShape>('MainThreadLanguages'),\n\tMainThreadLogger: createProxyIdentifier<MainThreadLoggerShape>('MainThreadLogger'),\n\tMainThreadMessageService: createProxyIdentifier<MainThreadMessageServiceShape>('MainThreadMessageService'),\n\tMainThreadOutputService: createProxyIdentifier<MainThreadOutputServiceShape>('MainThreadOutputService'),\n\tMainThreadProgress: createProxyIdentifier<MainThreadProgressShape>('MainThreadProgress'),\n\tMainThreadQuickDiff: createProxyIdentifier<MainThreadQuickDiffShape>('MainThreadQuickDiff'),\n\tMainThreadQuickOpen: createProxyIdentifier<MainThreadQuickOpenShape>('MainThreadQuickOpen'),\n\tMainThreadStatusBar: createProxyIdentifier<MainThreadStatusBarShape>('MainThreadStatusBar'),\n\tMainThreadSecretState: createProxyIdentifier<MainThreadSecretStateShape>('MainThreadSecretState'),\n\tMainThreadStorage: createProxyIdentifier<MainThreadStorageShape>('MainThreadStorage'),\n\tMainThreadSpeech: createProxyIdentifier<MainThreadSpeechShape>('MainThreadSpeechProvider'),\n\tMainThreadTelemetry: createProxyIdentifier<MainThreadTelemetryShape>('MainThreadTelemetry'),\n\tMainThreadTerminalService: createProxyIdentifier<MainThreadTerminalServiceShape>('MainThreadTerminalService'),\n\tMainThreadTerminalShellIntegration: createProxyIdentifier<MainThreadTerminalShellIntegrationShape>('MainThreadTerminalShellIntegration'),\n\tMainThreadWebviews: createProxyIdentifier<MainThreadWebviewsShape>('MainThreadWebviews'),\n\tMainThreadWebviewPanels: createProxyIdentifier<MainThreadWebviewPanelsShape>('MainThreadWebviewPanels'),\n\tMainThreadWebviewViews: createProxyIdentifier<MainThreadWebviewViewsShape>('MainThreadWebviewViews'),\n\tMainThreadCustomEditors: createProxyIdentifier<MainThreadCustomEditorsShape>('MainThreadCustomEditors'),\n\tMainThreadUrls: createProxyIdentifier<MainThreadUrlsShape>('MainThreadUrls'),\n\tMainThreadUriOpeners: createProxyIdentifier<MainThreadUriOpenersShape>('MainThreadUriOpeners'),\n\tMainThreadProfileContentHandlers: createProxyIdentifier<MainThreadProfileContentHandlersShape>('MainThreadProfileContentHandlers'),\n\tMainThreadWorkspace: createProxyIdentifier<MainThreadWorkspaceShape>('MainThreadWorkspace'),\n\tMainThreadFileSystem: createProxyIdentifier<MainThreadFileSystemShape>('MainThreadFileSystem'),\n\tMainThreadFileSystemEventService: createProxyIdentifier<MainThreadFileSystemEventServiceShape>('MainThreadFileSystemEventService'),\n\tMainThreadExtensionService: createProxyIdentifier<MainThreadExtensionServiceShape>('MainThreadExtensionService'),\n\tMainThreadSCM: createProxyIdentifier<MainThreadSCMShape>('MainThreadSCM'),\n\tMainThreadSearch: createProxyIdentifier<MainThreadSearchShape>('MainThreadSearch'),\n\tMainThreadShare: createProxyIdentifier<MainThreadShareShape>('MainThreadShare'),\n\tMainThreadTask: createProxyIdentifier<MainThreadTaskShape>('MainThreadTask'),\n\tMainThreadWindow: createProxyIdentifier<MainThreadWindowShape>('MainThreadWindow'),\n\tMainThreadLabelService: createProxyIdentifier<MainThreadLabelServiceShape>('MainThreadLabelService'),\n\tMainThreadNotebook: createProxyIdentifier<MainThreadNotebookShape>('MainThreadNotebook'),\n\tMainThreadNotebookDocuments: createProxyIdentifier<MainThreadNotebookDocumentsShape>('MainThreadNotebookDocumentsShape'),\n\tMainThreadNotebookEditors: createProxyIdentifier<MainThreadNotebookEditorsShape>('MainThreadNotebookEditorsShape'),\n\tMainThreadNotebookKernels: createProxyIdentifier<MainThreadNotebookKernelsShape>('MainThreadNotebookKernels'),\n\tMainThreadNotebookRenderers: createProxyIdentifier<MainThreadNotebookRenderersShape>('MainThreadNotebookRenderers'),\n\tMainThreadInteractive: createProxyIdentifier<MainThreadInteractiveShape>('MainThreadInteractive'),\n\tMainThreadTheming: createProxyIdentifier<MainThreadThemingShape>('MainThreadTheming'),\n\tMainThreadTunnelService: createProxyIdentifier<MainThreadTunnelServiceShape>('MainThreadTunnelService'),\n\tMainThreadManagedSockets: createProxyIdentifier<MainThreadManagedSocketsShape>('MainThreadManagedSockets'),\n\tMainThreadTimeline: createProxyIdentifier<MainThreadTimelineShape>('MainThreadTimeline'),\n\tMainThreadTesting: createProxyIdentifier<MainThreadTestingShape>('MainThreadTesting'),\n\tMainThreadLocalization: createProxyIdentifier<MainThreadLocalizationShape>('MainThreadLocalizationShape'),\n\tMainThreadAiRelatedInformation: createProxyIdentifier<MainThreadAiRelatedInformationShape>('MainThreadAiRelatedInformation'),\n\tMainThreadAiEmbeddingVector: createProxyIdentifier<MainThreadAiEmbeddingVectorShape>('MainThreadAiEmbeddingVector')\n};\n\nexport const ExtHostContext = {\n\tExtHostCommands: createProxyIdentifier<ExtHostCommandsShape>('ExtHostCommands'),\n\tExtHostConfiguration: createProxyIdentifier<ExtHostConfigurationShape>('ExtHostConfiguration'),\n\tExtHostDiagnostics: createProxyIdentifier<ExtHostDiagnosticsShape>('ExtHostDiagnostics'),\n\tExtHostDebugService: createProxyIdentifier<ExtHostDebugServiceShape>('ExtHostDebugService'),\n\tExtHostDecorations: createProxyIdentifier<ExtHostDecorationsShape>('ExtHostDecorations'),\n\tExtHostDocumentsAndEditors: createProxyIdentifier<ExtHostDocumentsAndEditorsShape>('ExtHostDocumentsAndEditors'),\n\tExtHostDocuments: createProxyIdentifier<ExtHostDocumentsShape>('ExtHostDocuments'),\n\tExtHostDocumentContentProviders: createProxyIdentifier<ExtHostDocumentContentProvidersShape>('ExtHostDocumentContentProviders'),\n\tExtHostDocumentSaveParticipant: createProxyIdentifier<ExtHostDocumentSaveParticipantShape>('ExtHostDocumentSaveParticipant'),\n\tExtHostEditors: createProxyIdentifier<ExtHostEditorsShape>('ExtHostEditors'),\n\tExtHostTreeViews: createProxyIdentifier<ExtHostTreeViewsShape>('ExtHostTreeViews'),\n\tExtHostFileSystem: createProxyIdentifier<ExtHostFileSystemShape>('ExtHostFileSystem'),\n\tExtHostFileSystemInfo: createProxyIdentifier<ExtHostFileSystemInfoShape>('ExtHostFileSystemInfo'),\n\tExtHostFileSystemEventService: createProxyIdentifier<ExtHostFileSystemEventServiceShape>('ExtHostFileSystemEventService'),\n\tExtHostLanguages: createProxyIdentifier<ExtHostLanguagesShape>('ExtHostLanguages'),\n\tExtHostLanguageFeatures: createProxyIdentifier<ExtHostLanguageFeaturesShape>('ExtHostLanguageFeatures'),\n\tExtHostQuickOpen: createProxyIdentifier<ExtHostQuickOpenShape>('ExtHostQuickOpen'),\n\tExtHostQuickDiff: createProxyIdentifier<ExtHostQuickDiffShape>('ExtHostQuickDiff'),\n\tExtHostStatusBar: createProxyIdentifier<ExtHostStatusBarShape>('ExtHostStatusBar'),\n\tExtHostShare: createProxyIdentifier<ExtHostShareShape>('ExtHostShare'),\n\tExtHostExtensionService: createProxyIdentifier<ExtHostExtensionServiceShape>('ExtHostExtensionService'),\n\tExtHostLogLevelServiceShape: createProxyIdentifier<ExtHostLogLevelServiceShape>('ExtHostLogLevelServiceShape'),\n\tExtHostTerminalService: createProxyIdentifier<ExtHostTerminalServiceShape>('ExtHostTerminalService'),\n\tExtHostTerminalShellIntegration: createProxyIdentifier<ExtHostTerminalShellIntegrationShape>('ExtHostTerminalShellIntegration'),\n\tExtHostSCM: createProxyIdentifier<ExtHostSCMShape>('ExtHostSCM'),\n\tExtHostSearch: createProxyIdentifier<ExtHostSearchShape>('ExtHostSearch'),\n\tExtHostTask: createProxyIdentifier<ExtHostTaskShape>('ExtHostTask'),\n\tExtHostWorkspace: createProxyIdentifier<ExtHostWorkspaceShape>('ExtHostWorkspace'),\n\tExtHostWindow: createProxyIdentifier<ExtHostWindowShape>('ExtHostWindow'),\n\tExtHostWebviews: createProxyIdentifier<ExtHostWebviewsShape>('ExtHostWebviews'),\n\tExtHostWebviewPanels: createProxyIdentifier<ExtHostWebviewPanelsShape>('ExtHostWebviewPanels'),\n\tExtHostCustomEditors: createProxyIdentifier<ExtHostCustomEditorsShape>('ExtHostCustomEditors'),\n\tExtHostWebviewViews: createProxyIdentifier<ExtHostWebviewViewsShape>('ExtHostWebviewViews'),\n\tExtHostEditorInsets: createProxyIdentifier<ExtHostEditorInsetsShape>('ExtHostEditorInsets'),\n\tExtHostEditorTabs: createProxyIdentifier<IExtHostEditorTabsShape>('ExtHostEditorTabs'),\n\tExtHostProgress: createProxyIdentifier<ExtHostProgressShape>('ExtHostProgress'),\n\tExtHostComments: createProxyIdentifier<ExtHostCommentsShape>('ExtHostComments'),\n\tExtHostSecretState: createProxyIdentifier<ExtHostSecretStateShape>('ExtHostSecretState'),\n\tExtHostStorage: createProxyIdentifier<ExtHostStorageShape>('ExtHostStorage'),\n\tExtHostUrls: createProxyIdentifier<ExtHostUrlsShape>('ExtHostUrls'),\n\tExtHostUriOpeners: createProxyIdentifier<ExtHostUriOpenersShape>('ExtHostUriOpeners'),\n\tExtHostProfileContentHandlers: createProxyIdentifier<ExtHostProfileContentHandlersShape>('ExtHostProfileContentHandlers'),\n\tExtHostOutputService: createProxyIdentifier<ExtHostOutputServiceShape>('ExtHostOutputService'),\n\tExtHostLabelService: createProxyIdentifier<ExtHostLabelServiceShape>('ExtHostLabelService'),\n\tExtHostNotebook: createProxyIdentifier<ExtHostNotebookShape>('ExtHostNotebook'),\n\tExtHostNotebookDocuments: createProxyIdentifier<ExtHostNotebookDocumentsShape>('ExtHostNotebookDocuments'),\n\tExtHostNotebookEditors: createProxyIdentifier<ExtHostNotebookEditorsShape>('ExtHostNotebookEditors'),\n\tExtHostNotebookKernels: createProxyIdentifier<ExtHostNotebookKernelsShape>('ExtHostNotebookKernels'),\n\tExtHostNotebookRenderers: createProxyIdentifier<ExtHostNotebookRenderersShape>('ExtHostNotebookRenderers'),\n\tExtHostNotebookDocumentSaveParticipant: createProxyIdentifier<ExtHostNotebookDocumentSaveParticipantShape>('ExtHostNotebookDocumentSaveParticipant'),\n\tExtHostInteractive: createProxyIdentifier<ExtHostInteractiveShape>('ExtHostInteractive'),\n\tExtHostChatAgents2: createProxyIdentifier<ExtHostChatAgentsShape2>('ExtHostChatAgents'),\n\tExtHostChatVariables: createProxyIdentifier<ExtHostChatVariablesShape>('ExtHostChatVariables'),\n\tExtHostLanguageModelTools: createProxyIdentifier<ExtHostLanguageModelToolsShape>('ExtHostChatSkills'),\n\tExtHostChatProvider: createProxyIdentifier<ExtHostLanguageModelsShape>('ExtHostChatProvider'),\n\tExtHostSpeech: createProxyIdentifier<ExtHostSpeechShape>('ExtHostSpeech'),\n\tExtHostEmbeddings: createProxyIdentifier<ExtHostEmbeddingsShape>('ExtHostEmbeddings'),\n\tExtHostAiRelatedInformation: createProxyIdentifier<ExtHostAiRelatedInformationShape>('ExtHostAiRelatedInformation'),\n\tExtHostAiEmbeddingVector: createProxyIdentifier<ExtHostAiEmbeddingVectorShape>('ExtHostAiEmbeddingVector'),\n\tExtHostTheming: createProxyIdentifier<ExtHostThemingShape>('ExtHostTheming'),\n\tExtHostTunnelService: createProxyIdentifier<ExtHostTunnelServiceShape>('ExtHostTunnelService'),\n\tExtHostManagedSockets: createProxyIdentifier<ExtHostManagedSocketsShape>('ExtHostManagedSockets'),\n\tExtHostAuthentication: createProxyIdentifier<ExtHostAuthenticationShape>('ExtHostAuthentication'),\n\tExtHostTimeline: createProxyIdentifier<ExtHostTimelineShape>('ExtHostTimeline'),\n\tExtHostTesting: createProxyIdentifier<ExtHostTestingShape>('ExtHostTesting'),\n\tExtHostTelemetry: createProxyIdentifier<ExtHostTelemetryShape>('ExtHostTelemetry'),\n\tExtHostLocalization: createProxyIdentifier<ExtHostLocalizationShape>('ExtHostLocalization')\n};\n"],
  "mappings": "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",
  "names": ["TextEditorRevealType", "TabInputKind", "TabModelOperationKind", "WebviewEditorCapabilities", "WebviewMessageArrayBufferViewType", "CellOutputKind", "NotebookEditorRevealType", "CandidatePortSource", "ISuggestDataDtoField", "ISuggestResultDtoField", "ExtHostTestingResource"]
}
