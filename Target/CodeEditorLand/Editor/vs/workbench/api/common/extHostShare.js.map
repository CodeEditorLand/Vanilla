{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/api/common/extHostShare.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport type * as vscode from 'vscode';\nimport { ExtHostShareShape, IMainContext, IShareableItemDto, MainContext, MainThreadShareShape } from './extHost.protocol.js';\nimport { DocumentSelector, Range } from './extHostTypeConverters.js';\nimport { IURITransformer } from '../../../base/common/uriIpc.js';\nimport { CancellationToken } from '../../../base/common/cancellation.js';\nimport { URI, UriComponents } from '../../../base/common/uri.js';\n\nexport class ExtHostShare implements ExtHostShareShape {\n\tprivate static handlePool: number = 0;\n\n\tprivate proxy: MainThreadShareShape;\n\tprivate providers: Map<number, vscode.ShareProvider> = new Map();\n\n\tconstructor(\n\t\tmainContext: IMainContext,\n\t\tprivate readonly uriTransformer: IURITransformer | undefined\n\t) {\n\t\tthis.proxy = mainContext.getProxy(MainContext.MainThreadShare);\n\t}\n\n\tasync $provideShare(handle: number, shareableItem: IShareableItemDto, token: CancellationToken): Promise<UriComponents | string | undefined> {\n\t\tconst provider = this.providers.get(handle);\n\t\tconst result = await provider?.provideShare({ selection: Range.to(shareableItem.selection), resourceUri: URI.revive(shareableItem.resourceUri) }, token);\n\t\treturn result ?? undefined;\n\t}\n\n\tregisterShareProvider(selector: vscode.DocumentSelector, provider: vscode.ShareProvider): vscode.Disposable {\n\t\tconst handle = ExtHostShare.handlePool++;\n\t\tthis.providers.set(handle, provider);\n\t\tthis.proxy.$registerShareProvider(handle, DocumentSelector.from(selector, this.uriTransformer), provider.id, provider.label, provider.priority);\n\t\treturn {\n\t\t\tdispose: () => {\n\t\t\t\tthis.proxy.$unregisterShareProvider(handle);\n\t\t\t\tthis.providers.delete(handle);\n\t\t\t}\n\t\t};\n\t}\n}\n"],
  "mappings": ";;AAMA,SAAS,mBAAmB,cAAc,mBAAmB,aAAa,4BAA4B;AACtG,SAAS,kBAAkB,aAAa;AACxC,SAAS,uBAAuB;AAChC,SAAS,yBAAyB;AAClC,SAAS,KAAK,qBAAqB;AAE5B,MAAM,aAA0C;AAAA,EAMtD,YACC,aACiB,gBAChB;AADgB;AAEjB,SAAK,QAAQ,YAAY,SAAS,YAAY,eAAe;AAAA,EAC9D;AAAA,EAvBD,OAYuD;AAAA;AAAA;AAAA,EACtD,OAAe,aAAqB;AAAA,EAE5B;AAAA,EACA,YAA+C,oBAAI,IAAI;AAAA,EAS/D,MAAM,cAAc,QAAgB,eAAkC,OAAuE;AAC5I,UAAM,WAAW,KAAK,UAAU,IAAI,MAAM;AAC1C,UAAM,SAAS,MAAM,UAAU,aAAa,EAAE,WAAW,MAAM,GAAG,cAAc,SAAS,GAAG,aAAa,IAAI,OAAO,cAAc,WAAW,EAAE,GAAG,KAAK;AACvJ,WAAO,UAAU;AAAA,EAClB;AAAA,EAEA,sBAAsB,UAAmC,UAAmD;AAC3G,UAAM,SAAS,aAAa;AAC5B,SAAK,UAAU,IAAI,QAAQ,QAAQ;AACnC,SAAK,MAAM,uBAAuB,QAAQ,iBAAiB,KAAK,UAAU,KAAK,cAAc,GAAG,SAAS,IAAI,SAAS,OAAO,SAAS,QAAQ;AAC9I,WAAO;AAAA,MACN,SAAS,6BAAM;AACd,aAAK,MAAM,yBAAyB,MAAM;AAC1C,aAAK,UAAU,OAAO,MAAM;AAAA,MAC7B,GAHS;AAAA,IAIV;AAAA,EACD;AACD;",
  "names": []
}
