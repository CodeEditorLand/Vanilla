{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/api/common/extHostShare.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport type * as vscode from \"vscode\";\nimport type { CancellationToken } from \"../../../base/common/cancellation.js\";\nimport { URI, type UriComponents } from \"../../../base/common/uri.js\";\nimport type { IURITransformer } from \"../../../base/common/uriIpc.js\";\nimport {\n\ttype ExtHostShareShape,\n\ttype IMainContext,\n\ttype IShareableItemDto,\n\tMainContext,\n\ttype MainThreadShareShape,\n} from \"./extHost.protocol.js\";\nimport { DocumentSelector, Range } from \"./extHostTypeConverters.js\";\n\nexport class ExtHostShare implements ExtHostShareShape {\n\tprivate static handlePool = 0;\n\n\tprivate proxy: MainThreadShareShape;\n\tprivate providers: Map<number, vscode.ShareProvider> = new Map();\n\n\tconstructor(\n\t\tmainContext: IMainContext,\n\t\tprivate readonly uriTransformer: IURITransformer | undefined,\n\t) {\n\t\tthis.proxy = mainContext.getProxy(MainContext.MainThreadShare);\n\t}\n\n\tasync $provideShare(\n\t\thandle: number,\n\t\tshareableItem: IShareableItemDto,\n\t\ttoken: CancellationToken,\n\t): Promise<UriComponents | string | undefined> {\n\t\tconst provider = this.providers.get(handle);\n\t\tconst result = await provider?.provideShare(\n\t\t\t{\n\t\t\t\tselection: Range.to(shareableItem.selection),\n\t\t\t\tresourceUri: URI.revive(shareableItem.resourceUri),\n\t\t\t},\n\t\t\ttoken,\n\t\t);\n\t\treturn result ?? undefined;\n\t}\n\n\tregisterShareProvider(\n\t\tselector: vscode.DocumentSelector,\n\t\tprovider: vscode.ShareProvider,\n\t): vscode.Disposable {\n\t\tconst handle = ExtHostShare.handlePool++;\n\t\tthis.providers.set(handle, provider);\n\t\tthis.proxy.$registerShareProvider(\n\t\t\thandle,\n\t\t\tDocumentSelector.from(selector, this.uriTransformer),\n\t\t\tprovider.id,\n\t\t\tprovider.label,\n\t\t\tprovider.priority,\n\t\t);\n\t\treturn {\n\t\t\tdispose: () => {\n\t\t\t\tthis.proxy.$unregisterShareProvider(handle);\n\t\t\t\tthis.providers.delete(handle);\n\t\t\t},\n\t\t};\n\t}\n}\n"],
  "mappings": ";;AAOA,SAAS,WAA+B;AAExC;AAAA,EAIC;AAAA,OAEM;AACP,SAAS,kBAAkB,aAAa;AAEjC,MAAM,aAA0C;AAAA,EAMtD,YACC,aACiB,gBAChB;AADgB;AAEjB,SAAK,QAAQ,YAAY,SAAS,YAAY,eAAe;AAAA,EAC9D;AAAA,EA7BD,OAkBuD;AAAA;AAAA;AAAA,EACtD,OAAe,aAAa;AAAA,EAEpB;AAAA,EACA,YAA+C,oBAAI,IAAI;AAAA,EAS/D,MAAM,cACL,QACA,eACA,OAC8C;AAC9C,UAAM,WAAW,KAAK,UAAU,IAAI,MAAM;AAC1C,UAAM,SAAS,MAAM,UAAU;AAAA,MAC9B;AAAA,QACC,WAAW,MAAM,GAAG,cAAc,SAAS;AAAA,QAC3C,aAAa,IAAI,OAAO,cAAc,WAAW;AAAA,MAClD;AAAA,MACA;AAAA,IACD;AACA,WAAO,UAAU;AAAA,EAClB;AAAA,EAEA,sBACC,UACA,UACoB;AACpB,UAAM,SAAS,aAAa;AAC5B,SAAK,UAAU,IAAI,QAAQ,QAAQ;AACnC,SAAK,MAAM;AAAA,MACV;AAAA,MACA,iBAAiB,KAAK,UAAU,KAAK,cAAc;AAAA,MACnD,SAAS;AAAA,MACT,SAAS;AAAA,MACT,SAAS;AAAA,IACV;AACA,WAAO;AAAA,MACN,SAAS,6BAAM;AACd,aAAK,MAAM,yBAAyB,MAAM;AAC1C,aAAK,UAAU,OAAO,MAAM;AAAA,MAC7B,GAHS;AAAA,IAIV;AAAA,EACD;AACD;",
  "names": []
}
