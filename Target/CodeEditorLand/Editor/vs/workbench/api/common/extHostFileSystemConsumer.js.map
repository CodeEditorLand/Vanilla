{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/api/common/extHostFileSystemConsumer.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { MainContext, MainThreadFileSystemShape } from './extHost.protocol.js';\nimport type * as vscode from 'vscode';\nimport * as files from '../../../platform/files/common/files.js';\nimport { FileSystemError } from './extHostTypes.js';\nimport { VSBuffer } from '../../../base/common/buffer.js';\nimport { createDecorator } from '../../../platform/instantiation/common/instantiation.js';\nimport { IExtHostRpcService } from './extHostRpcService.js';\nimport { IExtHostFileSystemInfo } from './extHostFileSystemInfo.js';\nimport { IDisposable, toDisposable } from '../../../base/common/lifecycle.js';\nimport { ResourceQueue } from '../../../base/common/async.js';\nimport { IExtUri, extUri, extUriIgnorePathCase } from '../../../base/common/resources.js';\nimport { Schemas } from '../../../base/common/network.js';\nimport { IMarkdownString } from '../../../base/common/htmlContent.js';\n\nexport class ExtHostConsumerFileSystem {\n\n\treadonly _serviceBrand: undefined;\n\n\treadonly value: vscode.FileSystem;\n\n\tprivate readonly _proxy: MainThreadFileSystemShape;\n\tprivate readonly _fileSystemProvider = new Map<string, { impl: vscode.FileSystemProvider; extUri: IExtUri; isReadonly: boolean }>();\n\n\tprivate readonly _writeQueue = new ResourceQueue();\n\n\tconstructor(\n\t\t@IExtHostRpcService extHostRpc: IExtHostRpcService,\n\t\t@IExtHostFileSystemInfo fileSystemInfo: IExtHostFileSystemInfo,\n\t) {\n\t\tthis._proxy = extHostRpc.getProxy(MainContext.MainThreadFileSystem);\n\t\tconst that = this;\n\n\t\tthis.value = Object.freeze({\n\t\t\tasync stat(uri: vscode.Uri): Promise<vscode.FileStat> {\n\t\t\t\ttry {\n\t\t\t\t\tlet stat;\n\n\t\t\t\t\tconst provider = that._fileSystemProvider.get(uri.scheme);\n\t\t\t\t\tif (provider) {\n\t\t\t\t\t\t// use shortcut\n\t\t\t\t\t\tawait that._proxy.$ensureActivation(uri.scheme);\n\t\t\t\t\t\tstat = await provider.impl.stat(uri);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tstat = await that._proxy.$stat(uri);\n\t\t\t\t\t}\n\n\t\t\t\t\treturn {\n\t\t\t\t\t\ttype: stat.type,\n\t\t\t\t\t\tctime: stat.ctime,\n\t\t\t\t\t\tmtime: stat.mtime,\n\t\t\t\t\t\tsize: stat.size,\n\t\t\t\t\t\tpermissions: stat.permissions === files.FilePermission.Readonly ? 1 : undefined\n\t\t\t\t\t};\n\t\t\t\t} catch (err) {\n\t\t\t\t\tExtHostConsumerFileSystem._handleError(err);\n\t\t\t\t}\n\t\t\t},\n\t\t\tasync readDirectory(uri: vscode.Uri): Promise<[string, vscode.FileType][]> {\n\t\t\t\ttry {\n\t\t\t\t\tconst provider = that._fileSystemProvider.get(uri.scheme);\n\t\t\t\t\tif (provider) {\n\t\t\t\t\t\t// use shortcut\n\t\t\t\t\t\tawait that._proxy.$ensureActivation(uri.scheme);\n\t\t\t\t\t\treturn (await provider.impl.readDirectory(uri)).slice(); // safe-copy\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn await that._proxy.$readdir(uri);\n\t\t\t\t\t}\n\t\t\t\t} catch (err) {\n\t\t\t\t\treturn ExtHostConsumerFileSystem._handleError(err);\n\t\t\t\t}\n\t\t\t},\n\t\t\tasync createDirectory(uri: vscode.Uri): Promise<void> {\n\t\t\t\ttry {\n\t\t\t\t\tconst provider = that._fileSystemProvider.get(uri.scheme);\n\t\t\t\t\tif (provider && !provider.isReadonly) {\n\t\t\t\t\t\t// use shortcut\n\t\t\t\t\t\tawait that._proxy.$ensureActivation(uri.scheme);\n\t\t\t\t\t\treturn await that.mkdirp(provider.impl, provider.extUri, uri);\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn await that._proxy.$mkdir(uri);\n\t\t\t\t\t}\n\t\t\t\t} catch (err) {\n\t\t\t\t\treturn ExtHostConsumerFileSystem._handleError(err);\n\t\t\t\t}\n\t\t\t},\n\t\t\tasync readFile(uri: vscode.Uri): Promise<Uint8Array> {\n\t\t\t\ttry {\n\t\t\t\t\tconst provider = that._fileSystemProvider.get(uri.scheme);\n\t\t\t\t\tif (provider) {\n\t\t\t\t\t\t// use shortcut\n\t\t\t\t\t\tawait that._proxy.$ensureActivation(uri.scheme);\n\t\t\t\t\t\treturn (await provider.impl.readFile(uri)).slice(); // safe-copy\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconst buff = await that._proxy.$readFile(uri);\n\t\t\t\t\t\treturn buff.buffer;\n\t\t\t\t\t}\n\t\t\t\t} catch (err) {\n\t\t\t\t\treturn ExtHostConsumerFileSystem._handleError(err);\n\t\t\t\t}\n\t\t\t},\n\t\t\tasync writeFile(uri: vscode.Uri, content: Uint8Array): Promise<void> {\n\t\t\t\ttry {\n\t\t\t\t\tconst provider = that._fileSystemProvider.get(uri.scheme);\n\t\t\t\t\tif (provider && !provider.isReadonly) {\n\t\t\t\t\t\t// use shortcut\n\t\t\t\t\t\tawait that._proxy.$ensureActivation(uri.scheme);\n\t\t\t\t\t\tawait that.mkdirp(provider.impl, provider.extUri, provider.extUri.dirname(uri));\n\t\t\t\t\t\treturn await that._writeQueue.queueFor(uri, () => Promise.resolve(provider.impl.writeFile(uri, content, { create: true, overwrite: true })));\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn await that._proxy.$writeFile(uri, VSBuffer.wrap(content));\n\t\t\t\t\t}\n\t\t\t\t} catch (err) {\n\t\t\t\t\treturn ExtHostConsumerFileSystem._handleError(err);\n\t\t\t\t}\n\t\t\t},\n\t\t\tasync delete(uri: vscode.Uri, options?: { recursive?: boolean; useTrash?: boolean }): Promise<void> {\n\t\t\t\ttry {\n\t\t\t\t\tconst provider = that._fileSystemProvider.get(uri.scheme);\n\t\t\t\t\tif (provider && !provider.isReadonly && !options?.useTrash /* no shortcut: use trash */) {\n\t\t\t\t\t\t// use shortcut\n\t\t\t\t\t\tawait that._proxy.$ensureActivation(uri.scheme);\n\t\t\t\t\t\treturn await provider.impl.delete(uri, { recursive: false, ...options });\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn await that._proxy.$delete(uri, { recursive: false, useTrash: false, atomic: false, ...options });\n\t\t\t\t\t}\n\t\t\t\t} catch (err) {\n\t\t\t\t\treturn ExtHostConsumerFileSystem._handleError(err);\n\t\t\t\t}\n\t\t\t},\n\t\t\tasync rename(oldUri: vscode.Uri, newUri: vscode.Uri, options?: { overwrite?: boolean }): Promise<void> {\n\t\t\t\ttry {\n\t\t\t\t\t// no shortcut: potentially involves different schemes, does mkdirp\n\t\t\t\t\treturn await that._proxy.$rename(oldUri, newUri, { ...{ overwrite: false }, ...options });\n\t\t\t\t} catch (err) {\n\t\t\t\t\treturn ExtHostConsumerFileSystem._handleError(err);\n\t\t\t\t}\n\t\t\t},\n\t\t\tasync copy(source: vscode.Uri, destination: vscode.Uri, options?: { overwrite?: boolean }): Promise<void> {\n\t\t\t\ttry {\n\t\t\t\t\t// no shortcut: potentially involves different schemes, does mkdirp\n\t\t\t\t\treturn await that._proxy.$copy(source, destination, { ...{ overwrite: false }, ...options });\n\t\t\t\t} catch (err) {\n\t\t\t\t\treturn ExtHostConsumerFileSystem._handleError(err);\n\t\t\t\t}\n\t\t\t},\n\t\t\tisWritableFileSystem(scheme: string): boolean | undefined {\n\t\t\t\tconst capabilities = fileSystemInfo.getCapabilities(scheme);\n\t\t\t\tif (typeof capabilities === 'number') {\n\t\t\t\t\treturn !(capabilities & files.FileSystemProviderCapabilities.Readonly);\n\t\t\t\t}\n\t\t\t\treturn undefined;\n\t\t\t}\n\t\t});\n\t}\n\n\tprivate async mkdirp(provider: vscode.FileSystemProvider, providerExtUri: IExtUri, directory: vscode.Uri): Promise<void> {\n\t\tconst directoriesToCreate: string[] = [];\n\n\t\twhile (!providerExtUri.isEqual(directory, providerExtUri.dirname(directory))) {\n\t\t\ttry {\n\t\t\t\tconst stat = await provider.stat(directory);\n\t\t\t\tif ((stat.type & files.FileType.Directory) === 0) {\n\t\t\t\t\tthrow FileSystemError.FileExists(`Unable to create folder '${directory.scheme === Schemas.file ? directory.fsPath : directory.toString(true)}' that already exists but is not a directory`);\n\t\t\t\t}\n\n\t\t\t\tbreak; // we have hit a directory that exists -> good\n\t\t\t} catch (error) {\n\t\t\t\tif (files.toFileSystemProviderErrorCode(error) !== files.FileSystemProviderErrorCode.FileNotFound) {\n\t\t\t\t\tthrow error;\n\t\t\t\t}\n\n\t\t\t\t// further go up and remember to create this directory\n\t\t\t\tdirectoriesToCreate.push(providerExtUri.basename(directory));\n\t\t\t\tdirectory = providerExtUri.dirname(directory);\n\t\t\t}\n\t\t}\n\n\t\tfor (let i = directoriesToCreate.length - 1; i >= 0; i--) {\n\t\t\tdirectory = providerExtUri.joinPath(directory, directoriesToCreate[i]);\n\n\t\t\ttry {\n\t\t\t\tawait provider.createDirectory(directory);\n\t\t\t} catch (error) {\n\t\t\t\tif (files.toFileSystemProviderErrorCode(error) !== files.FileSystemProviderErrorCode.FileExists) {\n\t\t\t\t\t// For mkdirp() we tolerate that the mkdir() call fails\n\t\t\t\t\t// in case the folder already exists. This follows node.js\n\t\t\t\t\t// own implementation of fs.mkdir({ recursive: true }) and\n\t\t\t\t\t// reduces the chances of race conditions leading to errors\n\t\t\t\t\t// if multiple calls try to create the same folders\n\t\t\t\t\t// As such, we only throw an error here if it is other than\n\t\t\t\t\t// the fact that the file already exists.\n\t\t\t\t\t// (see also https://github.com/microsoft/vscode/issues/89834)\n\t\t\t\t\tthrow error;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate static _handleError(err: any): never {\n\t\t// desired error type\n\t\tif (err instanceof FileSystemError) {\n\t\t\tthrow err;\n\t\t}\n\n\t\t// file system provider error\n\t\tif (err instanceof files.FileSystemProviderError) {\n\t\t\tswitch (err.code) {\n\t\t\t\tcase files.FileSystemProviderErrorCode.FileExists: throw FileSystemError.FileExists(err.message);\n\t\t\t\tcase files.FileSystemProviderErrorCode.FileNotFound: throw FileSystemError.FileNotFound(err.message);\n\t\t\t\tcase files.FileSystemProviderErrorCode.FileNotADirectory: throw FileSystemError.FileNotADirectory(err.message);\n\t\t\t\tcase files.FileSystemProviderErrorCode.FileIsADirectory: throw FileSystemError.FileIsADirectory(err.message);\n\t\t\t\tcase files.FileSystemProviderErrorCode.NoPermissions: throw FileSystemError.NoPermissions(err.message);\n\t\t\t\tcase files.FileSystemProviderErrorCode.Unavailable: throw FileSystemError.Unavailable(err.message);\n\n\t\t\t\tdefault: throw new FileSystemError(err.message, err.name as files.FileSystemProviderErrorCode);\n\t\t\t}\n\t\t}\n\n\t\t// generic error\n\t\tif (!(err instanceof Error)) {\n\t\t\tthrow new FileSystemError(String(err));\n\t\t}\n\n\t\t// no provider (unknown scheme) error\n\t\tif (err.name === 'ENOPRO' || err.message.includes('ENOPRO')) {\n\t\t\tthrow FileSystemError.Unavailable(err.message);\n\t\t}\n\n\t\t// file system error\n\t\tswitch (err.name) {\n\t\t\tcase files.FileSystemProviderErrorCode.FileExists: throw FileSystemError.FileExists(err.message);\n\t\t\tcase files.FileSystemProviderErrorCode.FileNotFound: throw FileSystemError.FileNotFound(err.message);\n\t\t\tcase files.FileSystemProviderErrorCode.FileNotADirectory: throw FileSystemError.FileNotADirectory(err.message);\n\t\t\tcase files.FileSystemProviderErrorCode.FileIsADirectory: throw FileSystemError.FileIsADirectory(err.message);\n\t\t\tcase files.FileSystemProviderErrorCode.NoPermissions: throw FileSystemError.NoPermissions(err.message);\n\t\t\tcase files.FileSystemProviderErrorCode.Unavailable: throw FileSystemError.Unavailable(err.message);\n\n\t\t\tdefault: throw new FileSystemError(err.message, err.name as files.FileSystemProviderErrorCode);\n\t\t}\n\t}\n\n\t// ---\n\n\taddFileSystemProvider(scheme: string, provider: vscode.FileSystemProvider, options?: { isCaseSensitive?: boolean; isReadonly?: boolean | IMarkdownString }): IDisposable {\n\t\tthis._fileSystemProvider.set(scheme, { impl: provider, extUri: options?.isCaseSensitive ? extUri : extUriIgnorePathCase, isReadonly: !!options?.isReadonly });\n\t\treturn toDisposable(() => this._fileSystemProvider.delete(scheme));\n\t}\n\n\tgetFileSystemProviderExtUri(scheme: string) {\n\t\treturn this._fileSystemProvider.get(scheme)?.extUri ?? extUri;\n\t}\n}\n\nexport interface IExtHostConsumerFileSystem extends ExtHostConsumerFileSystem { }\nexport const IExtHostConsumerFileSystem = createDecorator<IExtHostConsumerFileSystem>('IExtHostConsumerFileSystem');\n"],
  "mappings": "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",
  "names": []
}
