{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/api/common/extHostFileSystemConsumer.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport type * as vscode from \"vscode\";\nimport { ResourceQueue } from \"../../../base/common/async.js\";\nimport { VSBuffer } from \"../../../base/common/buffer.js\";\nimport type { IMarkdownString } from \"../../../base/common/htmlContent.js\";\nimport {\n\ttype IDisposable,\n\ttoDisposable,\n} from \"../../../base/common/lifecycle.js\";\nimport { Schemas } from \"../../../base/common/network.js\";\nimport {\n\ttype IExtUri,\n\textUri,\n\textUriIgnorePathCase,\n} from \"../../../base/common/resources.js\";\nimport * as files from \"../../../platform/files/common/files.js\";\nimport { createDecorator } from \"../../../platform/instantiation/common/instantiation.js\";\nimport {\n\tMainContext,\n\ttype MainThreadFileSystemShape,\n} from \"./extHost.protocol.js\";\nimport { IExtHostFileSystemInfo } from \"./extHostFileSystemInfo.js\";\nimport { IExtHostRpcService } from \"./extHostRpcService.js\";\nimport { FileSystemError } from \"./extHostTypes.js\";\n\nexport class ExtHostConsumerFileSystem {\n\treadonly _serviceBrand: undefined;\n\n\treadonly value: vscode.FileSystem;\n\n\tprivate readonly _proxy: MainThreadFileSystemShape;\n\tprivate readonly _fileSystemProvider = new Map<\n\t\tstring,\n\t\t{\n\t\t\timpl: vscode.FileSystemProvider;\n\t\t\textUri: IExtUri;\n\t\t\tisReadonly: boolean;\n\t\t}\n\t>();\n\n\tprivate readonly _writeQueue = new ResourceQueue();\n\n\tconstructor(\n\t\t@IExtHostRpcService extHostRpc: IExtHostRpcService,\n\t\t@IExtHostFileSystemInfo fileSystemInfo: IExtHostFileSystemInfo,\n\t) {\n\t\tthis._proxy = extHostRpc.getProxy(MainContext.MainThreadFileSystem);\n\t\tconst that = this;\n\n\t\tthis.value = Object.freeze({\n\t\t\tasync stat(uri: vscode.Uri): Promise<vscode.FileStat> {\n\t\t\t\ttry {\n\t\t\t\t\tlet stat;\n\n\t\t\t\t\tconst provider = that._fileSystemProvider.get(uri.scheme);\n\t\t\t\t\tif (provider) {\n\t\t\t\t\t\t// use shortcut\n\t\t\t\t\t\tawait that._proxy.$ensureActivation(uri.scheme);\n\t\t\t\t\t\tstat = await provider.impl.stat(uri);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tstat = await that._proxy.$stat(uri);\n\t\t\t\t\t}\n\n\t\t\t\t\treturn {\n\t\t\t\t\t\ttype: stat.type,\n\t\t\t\t\t\tctime: stat.ctime,\n\t\t\t\t\t\tmtime: stat.mtime,\n\t\t\t\t\t\tsize: stat.size,\n\t\t\t\t\t\tpermissions:\n\t\t\t\t\t\t\tstat.permissions === files.FilePermission.Readonly\n\t\t\t\t\t\t\t\t? 1\n\t\t\t\t\t\t\t\t: undefined,\n\t\t\t\t\t};\n\t\t\t\t} catch (err) {\n\t\t\t\t\tExtHostConsumerFileSystem._handleError(err);\n\t\t\t\t}\n\t\t\t},\n\t\t\tasync readDirectory(\n\t\t\t\turi: vscode.Uri,\n\t\t\t): Promise<[string, vscode.FileType][]> {\n\t\t\t\ttry {\n\t\t\t\t\tconst provider = that._fileSystemProvider.get(uri.scheme);\n\t\t\t\t\tif (provider) {\n\t\t\t\t\t\t// use shortcut\n\t\t\t\t\t\tawait that._proxy.$ensureActivation(uri.scheme);\n\t\t\t\t\t\treturn (await provider.impl.readDirectory(uri)).slice(); // safe-copy\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn await that._proxy.$readdir(uri);\n\t\t\t\t\t}\n\t\t\t\t} catch (err) {\n\t\t\t\t\treturn ExtHostConsumerFileSystem._handleError(err);\n\t\t\t\t}\n\t\t\t},\n\t\t\tasync createDirectory(uri: vscode.Uri): Promise<void> {\n\t\t\t\ttry {\n\t\t\t\t\tconst provider = that._fileSystemProvider.get(uri.scheme);\n\t\t\t\t\tif (provider && !provider.isReadonly) {\n\t\t\t\t\t\t// use shortcut\n\t\t\t\t\t\tawait that._proxy.$ensureActivation(uri.scheme);\n\t\t\t\t\t\treturn await that.mkdirp(\n\t\t\t\t\t\t\tprovider.impl,\n\t\t\t\t\t\t\tprovider.extUri,\n\t\t\t\t\t\t\turi,\n\t\t\t\t\t\t);\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn await that._proxy.$mkdir(uri);\n\t\t\t\t\t}\n\t\t\t\t} catch (err) {\n\t\t\t\t\treturn ExtHostConsumerFileSystem._handleError(err);\n\t\t\t\t}\n\t\t\t},\n\t\t\tasync readFile(uri: vscode.Uri): Promise<Uint8Array> {\n\t\t\t\ttry {\n\t\t\t\t\tconst provider = that._fileSystemProvider.get(uri.scheme);\n\t\t\t\t\tif (provider) {\n\t\t\t\t\t\t// use shortcut\n\t\t\t\t\t\tawait that._proxy.$ensureActivation(uri.scheme);\n\t\t\t\t\t\treturn (await provider.impl.readFile(uri)).slice(); // safe-copy\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconst buff = await that._proxy.$readFile(uri);\n\t\t\t\t\t\treturn buff.buffer;\n\t\t\t\t\t}\n\t\t\t\t} catch (err) {\n\t\t\t\t\treturn ExtHostConsumerFileSystem._handleError(err);\n\t\t\t\t}\n\t\t\t},\n\t\t\tasync writeFile(\n\t\t\t\turi: vscode.Uri,\n\t\t\t\tcontent: Uint8Array,\n\t\t\t): Promise<void> {\n\t\t\t\ttry {\n\t\t\t\t\tconst provider = that._fileSystemProvider.get(uri.scheme);\n\t\t\t\t\tif (provider && !provider.isReadonly) {\n\t\t\t\t\t\t// use shortcut\n\t\t\t\t\t\tawait that._proxy.$ensureActivation(uri.scheme);\n\t\t\t\t\t\tawait that.mkdirp(\n\t\t\t\t\t\t\tprovider.impl,\n\t\t\t\t\t\t\tprovider.extUri,\n\t\t\t\t\t\t\tprovider.extUri.dirname(uri),\n\t\t\t\t\t\t);\n\t\t\t\t\t\treturn await that._writeQueue.queueFor(uri, () =>\n\t\t\t\t\t\t\tPromise.resolve(\n\t\t\t\t\t\t\t\tprovider.impl.writeFile(uri, content, {\n\t\t\t\t\t\t\t\t\tcreate: true,\n\t\t\t\t\t\t\t\t\toverwrite: true,\n\t\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t);\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn await that._proxy.$writeFile(\n\t\t\t\t\t\t\turi,\n\t\t\t\t\t\t\tVSBuffer.wrap(content),\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t} catch (err) {\n\t\t\t\t\treturn ExtHostConsumerFileSystem._handleError(err);\n\t\t\t\t}\n\t\t\t},\n\t\t\tasync delete(\n\t\t\t\turi: vscode.Uri,\n\t\t\t\toptions?: { recursive?: boolean; useTrash?: boolean },\n\t\t\t): Promise<void> {\n\t\t\t\ttry {\n\t\t\t\t\tconst provider = that._fileSystemProvider.get(uri.scheme);\n\t\t\t\t\tif (\n\t\t\t\t\t\tprovider &&\n\t\t\t\t\t\t!provider.isReadonly &&\n\t\t\t\t\t\t!options?.useTrash /* no shortcut: use trash */\n\t\t\t\t\t) {\n\t\t\t\t\t\t// use shortcut\n\t\t\t\t\t\tawait that._proxy.$ensureActivation(uri.scheme);\n\t\t\t\t\t\treturn await provider.impl.delete(uri, {\n\t\t\t\t\t\t\trecursive: false,\n\t\t\t\t\t\t\t...options,\n\t\t\t\t\t\t});\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn await that._proxy.$delete(uri, {\n\t\t\t\t\t\t\trecursive: false,\n\t\t\t\t\t\t\tuseTrash: false,\n\t\t\t\t\t\t\tatomic: false,\n\t\t\t\t\t\t\t...options,\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t} catch (err) {\n\t\t\t\t\treturn ExtHostConsumerFileSystem._handleError(err);\n\t\t\t\t}\n\t\t\t},\n\t\t\tasync rename(\n\t\t\t\toldUri: vscode.Uri,\n\t\t\t\tnewUri: vscode.Uri,\n\t\t\t\toptions?: { overwrite?: boolean },\n\t\t\t): Promise<void> {\n\t\t\t\ttry {\n\t\t\t\t\t// no shortcut: potentially involves different schemes, does mkdirp\n\t\t\t\t\treturn await that._proxy.$rename(oldUri, newUri, {\n\t\t\t\t\t\t...{ overwrite: false },\n\t\t\t\t\t\t...options,\n\t\t\t\t\t});\n\t\t\t\t} catch (err) {\n\t\t\t\t\treturn ExtHostConsumerFileSystem._handleError(err);\n\t\t\t\t}\n\t\t\t},\n\t\t\tasync copy(\n\t\t\t\tsource: vscode.Uri,\n\t\t\t\tdestination: vscode.Uri,\n\t\t\t\toptions?: { overwrite?: boolean },\n\t\t\t): Promise<void> {\n\t\t\t\ttry {\n\t\t\t\t\t// no shortcut: potentially involves different schemes, does mkdirp\n\t\t\t\t\treturn await that._proxy.$copy(source, destination, {\n\t\t\t\t\t\t...{ overwrite: false },\n\t\t\t\t\t\t...options,\n\t\t\t\t\t});\n\t\t\t\t} catch (err) {\n\t\t\t\t\treturn ExtHostConsumerFileSystem._handleError(err);\n\t\t\t\t}\n\t\t\t},\n\t\t\tisWritableFileSystem(scheme: string): boolean | undefined {\n\t\t\t\tconst capabilities = fileSystemInfo.getCapabilities(scheme);\n\t\t\t\tif (typeof capabilities === \"number\") {\n\t\t\t\t\treturn !(\n\t\t\t\t\t\tcapabilities &\n\t\t\t\t\t\tfiles.FileSystemProviderCapabilities.Readonly\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t\treturn undefined;\n\t\t\t},\n\t\t});\n\t}\n\n\tprivate async mkdirp(\n\t\tprovider: vscode.FileSystemProvider,\n\t\tproviderExtUri: IExtUri,\n\t\tdirectory: vscode.Uri,\n\t): Promise<void> {\n\t\tconst directoriesToCreate: string[] = [];\n\n\t\twhile (\n\t\t\t!providerExtUri.isEqual(\n\t\t\t\tdirectory,\n\t\t\t\tproviderExtUri.dirname(directory),\n\t\t\t)\n\t\t) {\n\t\t\ttry {\n\t\t\t\tconst stat = await provider.stat(directory);\n\t\t\t\tif ((stat.type & files.FileType.Directory) === 0) {\n\t\t\t\t\tthrow FileSystemError.FileExists(\n\t\t\t\t\t\t`Unable to create folder '${directory.scheme === Schemas.file ? directory.fsPath : directory.toString(true)}' that already exists but is not a directory`,\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\tbreak; // we have hit a directory that exists -> good\n\t\t\t} catch (error) {\n\t\t\t\tif (\n\t\t\t\t\tfiles.toFileSystemProviderErrorCode(error) !==\n\t\t\t\t\tfiles.FileSystemProviderErrorCode.FileNotFound\n\t\t\t\t) {\n\t\t\t\t\tthrow error;\n\t\t\t\t}\n\n\t\t\t\t// further go up and remember to create this directory\n\t\t\t\tdirectoriesToCreate.push(providerExtUri.basename(directory));\n\t\t\t\tdirectory = providerExtUri.dirname(directory);\n\t\t\t}\n\t\t}\n\n\t\tfor (let i = directoriesToCreate.length - 1; i >= 0; i--) {\n\t\t\tdirectory = providerExtUri.joinPath(\n\t\t\t\tdirectory,\n\t\t\t\tdirectoriesToCreate[i],\n\t\t\t);\n\n\t\t\ttry {\n\t\t\t\tawait provider.createDirectory(directory);\n\t\t\t} catch (error) {\n\t\t\t\tif (\n\t\t\t\t\tfiles.toFileSystemProviderErrorCode(error) !==\n\t\t\t\t\tfiles.FileSystemProviderErrorCode.FileExists\n\t\t\t\t) {\n\t\t\t\t\t// For mkdirp() we tolerate that the mkdir() call fails\n\t\t\t\t\t// in case the folder already exists. This follows node.js\n\t\t\t\t\t// own implementation of fs.mkdir({ recursive: true }) and\n\t\t\t\t\t// reduces the chances of race conditions leading to errors\n\t\t\t\t\t// if multiple calls try to create the same folders\n\t\t\t\t\t// As such, we only throw an error here if it is other than\n\t\t\t\t\t// the fact that the file already exists.\n\t\t\t\t\t// (see also https://github.com/microsoft/vscode/issues/89834)\n\t\t\t\t\tthrow error;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate static _handleError(err: any): never {\n\t\t// desired error type\n\t\tif (err instanceof FileSystemError) {\n\t\t\tthrow err;\n\t\t}\n\n\t\t// file system provider error\n\t\tif (err instanceof files.FileSystemProviderError) {\n\t\t\tswitch (err.code) {\n\t\t\t\tcase files.FileSystemProviderErrorCode.FileExists:\n\t\t\t\t\tthrow FileSystemError.FileExists(err.message);\n\t\t\t\tcase files.FileSystemProviderErrorCode.FileNotFound:\n\t\t\t\t\tthrow FileSystemError.FileNotFound(err.message);\n\t\t\t\tcase files.FileSystemProviderErrorCode.FileNotADirectory:\n\t\t\t\t\tthrow FileSystemError.FileNotADirectory(err.message);\n\t\t\t\tcase files.FileSystemProviderErrorCode.FileIsADirectory:\n\t\t\t\t\tthrow FileSystemError.FileIsADirectory(err.message);\n\t\t\t\tcase files.FileSystemProviderErrorCode.NoPermissions:\n\t\t\t\t\tthrow FileSystemError.NoPermissions(err.message);\n\t\t\t\tcase files.FileSystemProviderErrorCode.Unavailable:\n\t\t\t\t\tthrow FileSystemError.Unavailable(err.message);\n\n\t\t\t\tdefault:\n\t\t\t\t\tthrow new FileSystemError(\n\t\t\t\t\t\terr.message,\n\t\t\t\t\t\terr.name as files.FileSystemProviderErrorCode,\n\t\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\t// generic error\n\t\tif (!(err instanceof Error)) {\n\t\t\tthrow new FileSystemError(String(err));\n\t\t}\n\n\t\t// no provider (unknown scheme) error\n\t\tif (err.name === \"ENOPRO\" || err.message.includes(\"ENOPRO\")) {\n\t\t\tthrow FileSystemError.Unavailable(err.message);\n\t\t}\n\n\t\t// file system error\n\t\tswitch (err.name) {\n\t\t\tcase files.FileSystemProviderErrorCode.FileExists:\n\t\t\t\tthrow FileSystemError.FileExists(err.message);\n\t\t\tcase files.FileSystemProviderErrorCode.FileNotFound:\n\t\t\t\tthrow FileSystemError.FileNotFound(err.message);\n\t\t\tcase files.FileSystemProviderErrorCode.FileNotADirectory:\n\t\t\t\tthrow FileSystemError.FileNotADirectory(err.message);\n\t\t\tcase files.FileSystemProviderErrorCode.FileIsADirectory:\n\t\t\t\tthrow FileSystemError.FileIsADirectory(err.message);\n\t\t\tcase files.FileSystemProviderErrorCode.NoPermissions:\n\t\t\t\tthrow FileSystemError.NoPermissions(err.message);\n\t\t\tcase files.FileSystemProviderErrorCode.Unavailable:\n\t\t\t\tthrow FileSystemError.Unavailable(err.message);\n\n\t\t\tdefault:\n\t\t\t\tthrow new FileSystemError(\n\t\t\t\t\terr.message,\n\t\t\t\t\terr.name as files.FileSystemProviderErrorCode,\n\t\t\t\t);\n\t\t}\n\t}\n\n\t// ---\n\n\taddFileSystemProvider(\n\t\tscheme: string,\n\t\tprovider: vscode.FileSystemProvider,\n\t\toptions?: {\n\t\t\tisCaseSensitive?: boolean;\n\t\t\tisReadonly?: boolean | IMarkdownString;\n\t\t},\n\t): IDisposable {\n\t\tthis._fileSystemProvider.set(scheme, {\n\t\t\timpl: provider,\n\t\t\textUri: options?.isCaseSensitive ? extUri : extUriIgnorePathCase,\n\t\t\tisReadonly: !!options?.isReadonly,\n\t\t});\n\t\treturn toDisposable(() => this._fileSystemProvider.delete(scheme));\n\t}\n\n\tgetFileSystemProviderExtUri(scheme: string) {\n\t\treturn this._fileSystemProvider.get(scheme)?.extUri ?? extUri;\n\t}\n}\n\nexport interface IExtHostConsumerFileSystem extends ExtHostConsumerFileSystem {}\nexport const IExtHostConsumerFileSystem =\n\tcreateDecorator<IExtHostConsumerFileSystem>(\"IExtHostConsumerFileSystem\");\n"],
  "mappings": "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",
  "names": []
}
