{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/api/common/extHostCustomEditors.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { VSBuffer } from '../../../base/common/buffer.js';\nimport { CancellationToken } from '../../../base/common/cancellation.js';\nimport { hash } from '../../../base/common/hash.js';\nimport { DisposableStore } from '../../../base/common/lifecycle.js';\nimport { Schemas } from '../../../base/common/network.js';\nimport { joinPath } from '../../../base/common/resources.js';\nimport { URI, UriComponents } from '../../../base/common/uri.js';\nimport { IExtensionDescription } from '../../../platform/extensions/common/extensions.js';\nimport { ExtHostDocuments } from './extHostDocuments.js';\nimport { IExtensionStoragePaths } from './extHostStoragePaths.js';\nimport * as typeConverters from './extHostTypeConverters.js';\nimport { ExtHostWebviews, shouldSerializeBuffersForPostMessage, toExtensionData } from './extHostWebview.js';\nimport { ExtHostWebviewPanels } from './extHostWebviewPanels.js';\nimport { EditorGroupColumn } from '../../services/editor/common/editorGroupColumn.js';\nimport type * as vscode from 'vscode';\nimport { Cache } from './cache.js';\nimport * as extHostProtocol from './extHost.protocol.js';\nimport * as extHostTypes from './extHostTypes.js';\n\n\nclass CustomDocumentStoreEntry {\n\n\tprivate _backupCounter = 1;\n\n\tconstructor(\n\t\tpublic readonly document: vscode.CustomDocument,\n\t\tprivate readonly _storagePath: URI | undefined,\n\t) { }\n\n\tprivate readonly _edits = new Cache<vscode.CustomDocumentEditEvent>('custom documents');\n\n\tprivate _backup?: vscode.CustomDocumentBackup;\n\n\taddEdit(item: vscode.CustomDocumentEditEvent): number {\n\t\treturn this._edits.add([item]);\n\t}\n\n\tasync undo(editId: number, isDirty: boolean): Promise<void> {\n\t\tawait this.getEdit(editId).undo();\n\t\tif (!isDirty) {\n\t\t\tthis.disposeBackup();\n\t\t}\n\t}\n\n\tasync redo(editId: number, isDirty: boolean): Promise<void> {\n\t\tawait this.getEdit(editId).redo();\n\t\tif (!isDirty) {\n\t\t\tthis.disposeBackup();\n\t\t}\n\t}\n\n\tdisposeEdits(editIds: number[]): void {\n\t\tfor (const id of editIds) {\n\t\t\tthis._edits.delete(id);\n\t\t}\n\t}\n\n\tgetNewBackupUri(): URI {\n\t\tif (!this._storagePath) {\n\t\t\tthrow new Error('Backup requires a valid storage path');\n\t\t}\n\t\tconst fileName = hashPath(this.document.uri) + (this._backupCounter++);\n\t\treturn joinPath(this._storagePath, fileName);\n\t}\n\n\tupdateBackup(backup: vscode.CustomDocumentBackup): void {\n\t\tthis._backup?.delete();\n\t\tthis._backup = backup;\n\t}\n\n\tdisposeBackup(): void {\n\t\tthis._backup?.delete();\n\t\tthis._backup = undefined;\n\t}\n\n\tprivate getEdit(editId: number): vscode.CustomDocumentEditEvent {\n\t\tconst edit = this._edits.get(editId, 0);\n\t\tif (!edit) {\n\t\t\tthrow new Error('No edit found');\n\t\t}\n\t\treturn edit;\n\t}\n}\n\nclass CustomDocumentStore {\n\tprivate readonly _documents = new Map<string, CustomDocumentStoreEntry>();\n\n\tpublic get(viewType: string, resource: vscode.Uri): CustomDocumentStoreEntry | undefined {\n\t\treturn this._documents.get(this.key(viewType, resource));\n\t}\n\n\tpublic add(viewType: string, document: vscode.CustomDocument, storagePath: URI | undefined): CustomDocumentStoreEntry {\n\t\tconst key = this.key(viewType, document.uri);\n\t\tif (this._documents.has(key)) {\n\t\t\tthrow new Error(`Document already exists for viewType:${viewType} resource:${document.uri}`);\n\t\t}\n\t\tconst entry = new CustomDocumentStoreEntry(document, storagePath);\n\t\tthis._documents.set(key, entry);\n\t\treturn entry;\n\t}\n\n\tpublic delete(viewType: string, document: vscode.CustomDocument) {\n\t\tconst key = this.key(viewType, document.uri);\n\t\tthis._documents.delete(key);\n\t}\n\n\tprivate key(viewType: string, resource: vscode.Uri): string {\n\t\treturn `${viewType}@@@${resource}`;\n\t}\n}\n\nconst enum CustomEditorType {\n\tText,\n\tCustom\n}\n\ntype ProviderEntry = {\n\treadonly extension: IExtensionDescription;\n\treadonly type: CustomEditorType.Text;\n\treadonly provider: vscode.CustomTextEditorProvider;\n} | {\n\treadonly extension: IExtensionDescription;\n\treadonly type: CustomEditorType.Custom;\n\treadonly provider: vscode.CustomReadonlyEditorProvider;\n};\n\nclass EditorProviderStore {\n\tprivate readonly _providers = new Map<string, ProviderEntry>();\n\n\tpublic addTextProvider(viewType: string, extension: IExtensionDescription, provider: vscode.CustomTextEditorProvider): vscode.Disposable {\n\t\treturn this.add(viewType, { type: CustomEditorType.Text, extension, provider });\n\t}\n\n\tpublic addCustomProvider(viewType: string, extension: IExtensionDescription, provider: vscode.CustomReadonlyEditorProvider): vscode.Disposable {\n\t\treturn this.add(viewType, { type: CustomEditorType.Custom, extension, provider });\n\t}\n\n\tpublic get(viewType: string): ProviderEntry | undefined {\n\t\treturn this._providers.get(viewType);\n\t}\n\n\tprivate add(viewType: string, entry: ProviderEntry): vscode.Disposable {\n\t\tif (this._providers.has(viewType)) {\n\t\t\tthrow new Error(`Provider for viewType:${viewType} already registered`);\n\t\t}\n\t\tthis._providers.set(viewType, entry);\n\t\treturn new extHostTypes.Disposable(() => this._providers.delete(viewType));\n\t}\n}\n\nexport class ExtHostCustomEditors implements extHostProtocol.ExtHostCustomEditorsShape {\n\n\tprivate readonly _proxy: extHostProtocol.MainThreadCustomEditorsShape;\n\n\tprivate readonly _editorProviders = new EditorProviderStore();\n\n\tprivate readonly _documents = new CustomDocumentStore();\n\n\tconstructor(\n\t\tmainContext: extHostProtocol.IMainContext,\n\t\tprivate readonly _extHostDocuments: ExtHostDocuments,\n\t\tprivate readonly _extensionStoragePaths: IExtensionStoragePaths | undefined,\n\t\tprivate readonly _extHostWebview: ExtHostWebviews,\n\t\tprivate readonly _extHostWebviewPanels: ExtHostWebviewPanels,\n\t) {\n\t\tthis._proxy = mainContext.getProxy(extHostProtocol.MainContext.MainThreadCustomEditors);\n\t}\n\n\tpublic registerCustomEditorProvider(\n\t\textension: IExtensionDescription,\n\t\tviewType: string,\n\t\tprovider: vscode.CustomReadonlyEditorProvider | vscode.CustomTextEditorProvider,\n\t\toptions: { webviewOptions?: vscode.WebviewPanelOptions; supportsMultipleEditorsPerDocument?: boolean },\n\t): vscode.Disposable {\n\t\tconst disposables = new DisposableStore();\n\t\tif (isCustomTextEditorProvider(provider)) {\n\t\t\tdisposables.add(this._editorProviders.addTextProvider(viewType, extension, provider));\n\t\t\tthis._proxy.$registerTextEditorProvider(toExtensionData(extension), viewType, options.webviewOptions || {}, {\n\t\t\t\tsupportsMove: !!provider.moveCustomTextEditor,\n\t\t\t}, shouldSerializeBuffersForPostMessage(extension));\n\t\t} else {\n\t\t\tdisposables.add(this._editorProviders.addCustomProvider(viewType, extension, provider));\n\n\t\t\tif (isCustomEditorProviderWithEditingCapability(provider)) {\n\t\t\t\tdisposables.add(provider.onDidChangeCustomDocument(e => {\n\t\t\t\t\tconst entry = this.getCustomDocumentEntry(viewType, e.document.uri);\n\t\t\t\t\tif (isEditEvent(e)) {\n\t\t\t\t\t\tconst editId = entry.addEdit(e);\n\t\t\t\t\t\tthis._proxy.$onDidEdit(e.document.uri, viewType, editId, e.label);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis._proxy.$onContentChange(e.document.uri, viewType);\n\t\t\t\t\t}\n\t\t\t\t}));\n\t\t\t}\n\n\t\t\tthis._proxy.$registerCustomEditorProvider(toExtensionData(extension), viewType, options.webviewOptions || {}, !!options.supportsMultipleEditorsPerDocument, shouldSerializeBuffersForPostMessage(extension));\n\t\t}\n\n\t\treturn extHostTypes.Disposable.from(\n\t\t\tdisposables,\n\t\t\tnew extHostTypes.Disposable(() => {\n\t\t\t\tthis._proxy.$unregisterEditorProvider(viewType);\n\t\t\t}));\n\t}\n\n\tasync $createCustomDocument(resource: UriComponents, viewType: string, backupId: string | undefined, untitledDocumentData: VSBuffer | undefined, cancellation: CancellationToken) {\n\t\tconst entry = this._editorProviders.get(viewType);\n\t\tif (!entry) {\n\t\t\tthrow new Error(`No provider found for '${viewType}'`);\n\t\t}\n\n\t\tif (entry.type !== CustomEditorType.Custom) {\n\t\t\tthrow new Error(`Invalid provide type for '${viewType}'`);\n\t\t}\n\n\t\tconst revivedResource = URI.revive(resource);\n\t\tconst document = await entry.provider.openCustomDocument(revivedResource, { backupId, untitledDocumentData: untitledDocumentData?.buffer }, cancellation);\n\n\t\tlet storageRoot: URI | undefined;\n\t\tif (isCustomEditorProviderWithEditingCapability(entry.provider) && this._extensionStoragePaths) {\n\t\t\tstorageRoot = this._extensionStoragePaths.workspaceValue(entry.extension) ?? this._extensionStoragePaths.globalValue(entry.extension);\n\t\t}\n\t\tthis._documents.add(viewType, document, storageRoot);\n\n\t\treturn { editable: isCustomEditorProviderWithEditingCapability(entry.provider) };\n\t}\n\n\tasync $disposeCustomDocument(resource: UriComponents, viewType: string): Promise<void> {\n\t\tconst entry = this._editorProviders.get(viewType);\n\t\tif (!entry) {\n\t\t\tthrow new Error(`No provider found for '${viewType}'`);\n\t\t}\n\n\t\tif (entry.type !== CustomEditorType.Custom) {\n\t\t\tthrow new Error(`Invalid provider type for '${viewType}'`);\n\t\t}\n\n\t\tconst revivedResource = URI.revive(resource);\n\t\tconst { document } = this.getCustomDocumentEntry(viewType, revivedResource);\n\t\tthis._documents.delete(viewType, document);\n\t\tdocument.dispose();\n\t}\n\n\tasync $resolveCustomEditor(\n\t\tresource: UriComponents,\n\t\thandle: extHostProtocol.WebviewHandle,\n\t\tviewType: string,\n\t\tinitData: {\n\t\t\ttitle: string;\n\t\t\tcontentOptions: extHostProtocol.IWebviewContentOptions;\n\t\t\toptions: extHostProtocol.IWebviewPanelOptions;\n\t\t\tactive: boolean;\n\t\t},\n\t\tposition: EditorGroupColumn,\n\t\tcancellation: CancellationToken,\n\t): Promise<void> {\n\t\tconst entry = this._editorProviders.get(viewType);\n\t\tif (!entry) {\n\t\t\tthrow new Error(`No provider found for '${viewType}'`);\n\t\t}\n\n\t\tconst viewColumn = typeConverters.ViewColumn.to(position);\n\n\t\tconst webview = this._extHostWebview.createNewWebview(handle, initData.contentOptions, entry.extension);\n\t\tconst panel = this._extHostWebviewPanels.createNewWebviewPanel(handle, viewType, initData.title, viewColumn, initData.options, webview, initData.active);\n\n\t\tconst revivedResource = URI.revive(resource);\n\n\t\tswitch (entry.type) {\n\t\t\tcase CustomEditorType.Custom: {\n\t\t\t\tconst { document } = this.getCustomDocumentEntry(viewType, revivedResource);\n\t\t\t\treturn entry.provider.resolveCustomEditor(document, panel, cancellation);\n\t\t\t}\n\t\t\tcase CustomEditorType.Text: {\n\t\t\t\tconst document = this._extHostDocuments.getDocument(revivedResource);\n\t\t\t\treturn entry.provider.resolveCustomTextEditor(document, panel, cancellation);\n\t\t\t}\n\t\t\tdefault: {\n\t\t\t\tthrow new Error('Unknown webview provider type');\n\t\t\t}\n\t\t}\n\t}\n\n\t$disposeEdits(resourceComponents: UriComponents, viewType: string, editIds: number[]): void {\n\t\tconst document = this.getCustomDocumentEntry(viewType, resourceComponents);\n\t\tdocument.disposeEdits(editIds);\n\t}\n\n\tasync $onMoveCustomEditor(handle: string, newResourceComponents: UriComponents, viewType: string): Promise<void> {\n\t\tconst entry = this._editorProviders.get(viewType);\n\t\tif (!entry) {\n\t\t\tthrow new Error(`No provider found for '${viewType}'`);\n\t\t}\n\n\t\tif (!(entry.provider as vscode.CustomTextEditorProvider).moveCustomTextEditor) {\n\t\t\tthrow new Error(`Provider does not implement move '${viewType}'`);\n\t\t}\n\n\t\tconst webview = this._extHostWebviewPanels.getWebviewPanel(handle);\n\t\tif (!webview) {\n\t\t\tthrow new Error(`No webview found`);\n\t\t}\n\n\t\tconst resource = URI.revive(newResourceComponents);\n\t\tconst document = this._extHostDocuments.getDocument(resource);\n\t\tawait (entry.provider as vscode.CustomTextEditorProvider).moveCustomTextEditor!(document, webview, CancellationToken.None);\n\t}\n\n\tasync $undo(resourceComponents: UriComponents, viewType: string, editId: number, isDirty: boolean): Promise<void> {\n\t\tconst entry = this.getCustomDocumentEntry(viewType, resourceComponents);\n\t\treturn entry.undo(editId, isDirty);\n\t}\n\n\tasync $redo(resourceComponents: UriComponents, viewType: string, editId: number, isDirty: boolean): Promise<void> {\n\t\tconst entry = this.getCustomDocumentEntry(viewType, resourceComponents);\n\t\treturn entry.redo(editId, isDirty);\n\t}\n\n\tasync $revert(resourceComponents: UriComponents, viewType: string, cancellation: CancellationToken): Promise<void> {\n\t\tconst entry = this.getCustomDocumentEntry(viewType, resourceComponents);\n\t\tconst provider = this.getCustomEditorProvider(viewType);\n\t\tawait provider.revertCustomDocument(entry.document, cancellation);\n\t\tentry.disposeBackup();\n\t}\n\n\tasync $onSave(resourceComponents: UriComponents, viewType: string, cancellation: CancellationToken): Promise<void> {\n\t\tconst entry = this.getCustomDocumentEntry(viewType, resourceComponents);\n\t\tconst provider = this.getCustomEditorProvider(viewType);\n\t\tawait provider.saveCustomDocument(entry.document, cancellation);\n\t\tentry.disposeBackup();\n\t}\n\n\tasync $onSaveAs(resourceComponents: UriComponents, viewType: string, targetResource: UriComponents, cancellation: CancellationToken): Promise<void> {\n\t\tconst entry = this.getCustomDocumentEntry(viewType, resourceComponents);\n\t\tconst provider = this.getCustomEditorProvider(viewType);\n\t\treturn provider.saveCustomDocumentAs(entry.document, URI.revive(targetResource), cancellation);\n\t}\n\n\tasync $backup(resourceComponents: UriComponents, viewType: string, cancellation: CancellationToken): Promise<string> {\n\t\tconst entry = this.getCustomDocumentEntry(viewType, resourceComponents);\n\t\tconst provider = this.getCustomEditorProvider(viewType);\n\n\t\tconst backup = await provider.backupCustomDocument(entry.document, {\n\t\t\tdestination: entry.getNewBackupUri(),\n\t\t}, cancellation);\n\t\tentry.updateBackup(backup);\n\t\treturn backup.id;\n\t}\n\n\tprivate getCustomDocumentEntry(viewType: string, resource: UriComponents): CustomDocumentStoreEntry {\n\t\tconst entry = this._documents.get(viewType, URI.revive(resource));\n\t\tif (!entry) {\n\t\t\tthrow new Error('No custom document found');\n\t\t}\n\t\treturn entry;\n\t}\n\n\tprivate getCustomEditorProvider(viewType: string): vscode.CustomEditorProvider {\n\t\tconst entry = this._editorProviders.get(viewType);\n\t\tconst provider = entry?.provider;\n\t\tif (!provider || !isCustomEditorProviderWithEditingCapability(provider)) {\n\t\t\tthrow new Error('Custom document is not editable');\n\t\t}\n\t\treturn provider;\n\t}\n}\n\nfunction isCustomEditorProviderWithEditingCapability(provider: vscode.CustomTextEditorProvider | vscode.CustomEditorProvider | vscode.CustomReadonlyEditorProvider): provider is vscode.CustomEditorProvider {\n\treturn !!(provider as vscode.CustomEditorProvider).onDidChangeCustomDocument;\n}\n\nfunction isCustomTextEditorProvider(provider: vscode.CustomReadonlyEditorProvider<vscode.CustomDocument> | vscode.CustomTextEditorProvider): provider is vscode.CustomTextEditorProvider {\n\treturn typeof (provider as vscode.CustomTextEditorProvider).resolveCustomTextEditor === 'function';\n}\n\nfunction isEditEvent(e: vscode.CustomDocumentContentChangeEvent | vscode.CustomDocumentEditEvent): e is vscode.CustomDocumentEditEvent {\n\treturn typeof (e as vscode.CustomDocumentEditEvent).undo === 'function'\n\t\t&& typeof (e as vscode.CustomDocumentEditEvent).redo === 'function';\n}\n\nfunction hashPath(resource: URI): string {\n\tconst str = resource.scheme === Schemas.file || resource.scheme === Schemas.untitled ? resource.fsPath : resource.toString();\n\treturn hash(str) + '';\n}\n"],
  "mappings": "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",
  "names": ["CustomEditorType"]
}
