{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/api/common/extHostCustomEditors.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport type * as vscode from \"vscode\";\nimport type { VSBuffer } from \"../../../base/common/buffer.js\";\nimport { CancellationToken } from \"../../../base/common/cancellation.js\";\nimport { hash } from \"../../../base/common/hash.js\";\nimport { DisposableStore } from \"../../../base/common/lifecycle.js\";\nimport { Schemas } from \"../../../base/common/network.js\";\nimport { joinPath } from \"../../../base/common/resources.js\";\nimport { URI, type UriComponents } from \"../../../base/common/uri.js\";\nimport type { IExtensionDescription } from \"../../../platform/extensions/common/extensions.js\";\nimport type { EditorGroupColumn } from \"../../services/editor/common/editorGroupColumn.js\";\nimport { Cache } from \"./cache.js\";\nimport * as extHostProtocol from \"./extHost.protocol.js\";\nimport type { ExtHostDocuments } from \"./extHostDocuments.js\";\nimport type { IExtensionStoragePaths } from \"./extHostStoragePaths.js\";\nimport * as typeConverters from \"./extHostTypeConverters.js\";\nimport * as extHostTypes from \"./extHostTypes.js\";\nimport {\n\ttype ExtHostWebviews,\n\tshouldSerializeBuffersForPostMessage,\n\ttoExtensionData,\n} from \"./extHostWebview.js\";\nimport type { ExtHostWebviewPanels } from \"./extHostWebviewPanels.js\";\n\nclass CustomDocumentStoreEntry {\n\tprivate _backupCounter = 1;\n\n\tconstructor(\n\t\tpublic readonly document: vscode.CustomDocument,\n\t\tprivate readonly _storagePath: URI | undefined,\n\t) {}\n\n\tprivate readonly _edits = new Cache<vscode.CustomDocumentEditEvent>(\n\t\t\"custom documents\",\n\t);\n\n\tprivate _backup?: vscode.CustomDocumentBackup;\n\n\taddEdit(item: vscode.CustomDocumentEditEvent): number {\n\t\treturn this._edits.add([item]);\n\t}\n\n\tasync undo(editId: number, isDirty: boolean): Promise<void> {\n\t\tawait this.getEdit(editId).undo();\n\t\tif (!isDirty) {\n\t\t\tthis.disposeBackup();\n\t\t}\n\t}\n\n\tasync redo(editId: number, isDirty: boolean): Promise<void> {\n\t\tawait this.getEdit(editId).redo();\n\t\tif (!isDirty) {\n\t\t\tthis.disposeBackup();\n\t\t}\n\t}\n\n\tdisposeEdits(editIds: number[]): void {\n\t\tfor (const id of editIds) {\n\t\t\tthis._edits.delete(id);\n\t\t}\n\t}\n\n\tgetNewBackupUri(): URI {\n\t\tif (!this._storagePath) {\n\t\t\tthrow new Error(\"Backup requires a valid storage path\");\n\t\t}\n\t\tconst fileName = hashPath(this.document.uri) + this._backupCounter++;\n\t\treturn joinPath(this._storagePath, fileName);\n\t}\n\n\tupdateBackup(backup: vscode.CustomDocumentBackup): void {\n\t\tthis._backup?.delete();\n\t\tthis._backup = backup;\n\t}\n\n\tdisposeBackup(): void {\n\t\tthis._backup?.delete();\n\t\tthis._backup = undefined;\n\t}\n\n\tprivate getEdit(editId: number): vscode.CustomDocumentEditEvent {\n\t\tconst edit = this._edits.get(editId, 0);\n\t\tif (!edit) {\n\t\t\tthrow new Error(\"No edit found\");\n\t\t}\n\t\treturn edit;\n\t}\n}\n\nclass CustomDocumentStore {\n\tprivate readonly _documents = new Map<string, CustomDocumentStoreEntry>();\n\n\tpublic get(\n\t\tviewType: string,\n\t\tresource: vscode.Uri,\n\t): CustomDocumentStoreEntry | undefined {\n\t\treturn this._documents.get(this.key(viewType, resource));\n\t}\n\n\tpublic add(\n\t\tviewType: string,\n\t\tdocument: vscode.CustomDocument,\n\t\tstoragePath: URI | undefined,\n\t): CustomDocumentStoreEntry {\n\t\tconst key = this.key(viewType, document.uri);\n\t\tif (this._documents.has(key)) {\n\t\t\tthrow new Error(\n\t\t\t\t`Document already exists for viewType:${viewType} resource:${document.uri}`,\n\t\t\t);\n\t\t}\n\t\tconst entry = new CustomDocumentStoreEntry(document, storagePath);\n\t\tthis._documents.set(key, entry);\n\t\treturn entry;\n\t}\n\n\tpublic delete(viewType: string, document: vscode.CustomDocument) {\n\t\tconst key = this.key(viewType, document.uri);\n\t\tthis._documents.delete(key);\n\t}\n\n\tprivate key(viewType: string, resource: vscode.Uri): string {\n\t\treturn `${viewType}@@@${resource}`;\n\t}\n}\n\nenum CustomEditorType {\n\tText = 0,\n\tCustom = 1,\n}\n\ntype ProviderEntry =\n\t| {\n\t\t\treadonly extension: IExtensionDescription;\n\t\t\treadonly type: CustomEditorType.Text;\n\t\t\treadonly provider: vscode.CustomTextEditorProvider;\n\t  }\n\t| {\n\t\t\treadonly extension: IExtensionDescription;\n\t\t\treadonly type: CustomEditorType.Custom;\n\t\t\treadonly provider: vscode.CustomReadonlyEditorProvider;\n\t  };\n\nclass EditorProviderStore {\n\tprivate readonly _providers = new Map<string, ProviderEntry>();\n\n\tpublic addTextProvider(\n\t\tviewType: string,\n\t\textension: IExtensionDescription,\n\t\tprovider: vscode.CustomTextEditorProvider,\n\t): vscode.Disposable {\n\t\treturn this.add(viewType, {\n\t\t\ttype: CustomEditorType.Text,\n\t\t\textension,\n\t\t\tprovider,\n\t\t});\n\t}\n\n\tpublic addCustomProvider(\n\t\tviewType: string,\n\t\textension: IExtensionDescription,\n\t\tprovider: vscode.CustomReadonlyEditorProvider,\n\t): vscode.Disposable {\n\t\treturn this.add(viewType, {\n\t\t\ttype: CustomEditorType.Custom,\n\t\t\textension,\n\t\t\tprovider,\n\t\t});\n\t}\n\n\tpublic get(viewType: string): ProviderEntry | undefined {\n\t\treturn this._providers.get(viewType);\n\t}\n\n\tprivate add(viewType: string, entry: ProviderEntry): vscode.Disposable {\n\t\tif (this._providers.has(viewType)) {\n\t\t\tthrow new Error(\n\t\t\t\t`Provider for viewType:${viewType} already registered`,\n\t\t\t);\n\t\t}\n\t\tthis._providers.set(viewType, entry);\n\t\treturn new extHostTypes.Disposable(() =>\n\t\t\tthis._providers.delete(viewType),\n\t\t);\n\t}\n}\n\nexport class ExtHostCustomEditors\n\timplements extHostProtocol.ExtHostCustomEditorsShape\n{\n\tprivate readonly _proxy: extHostProtocol.MainThreadCustomEditorsShape;\n\n\tprivate readonly _editorProviders = new EditorProviderStore();\n\n\tprivate readonly _documents = new CustomDocumentStore();\n\n\tconstructor(\n\t\tmainContext: extHostProtocol.IMainContext,\n\t\tprivate readonly _extHostDocuments: ExtHostDocuments,\n\t\tprivate readonly _extensionStoragePaths:\n\t\t\t| IExtensionStoragePaths\n\t\t\t| undefined,\n\t\tprivate readonly _extHostWebview: ExtHostWebviews,\n\t\tprivate readonly _extHostWebviewPanels: ExtHostWebviewPanels,\n\t) {\n\t\tthis._proxy = mainContext.getProxy(\n\t\t\textHostProtocol.MainContext.MainThreadCustomEditors,\n\t\t);\n\t}\n\n\tpublic registerCustomEditorProvider(\n\t\textension: IExtensionDescription,\n\t\tviewType: string,\n\t\tprovider:\n\t\t\t| vscode.CustomReadonlyEditorProvider\n\t\t\t| vscode.CustomTextEditorProvider,\n\t\toptions: {\n\t\t\twebviewOptions?: vscode.WebviewPanelOptions;\n\t\t\tsupportsMultipleEditorsPerDocument?: boolean;\n\t\t},\n\t): vscode.Disposable {\n\t\tconst disposables = new DisposableStore();\n\t\tif (isCustomTextEditorProvider(provider)) {\n\t\t\tdisposables.add(\n\t\t\t\tthis._editorProviders.addTextProvider(\n\t\t\t\t\tviewType,\n\t\t\t\t\textension,\n\t\t\t\t\tprovider,\n\t\t\t\t),\n\t\t\t);\n\t\t\tthis._proxy.$registerTextEditorProvider(\n\t\t\t\ttoExtensionData(extension),\n\t\t\t\tviewType,\n\t\t\t\toptions.webviewOptions || {},\n\t\t\t\t{\n\t\t\t\t\tsupportsMove: !!provider.moveCustomTextEditor,\n\t\t\t\t},\n\t\t\t\tshouldSerializeBuffersForPostMessage(extension),\n\t\t\t);\n\t\t} else {\n\t\t\tdisposables.add(\n\t\t\t\tthis._editorProviders.addCustomProvider(\n\t\t\t\t\tviewType,\n\t\t\t\t\textension,\n\t\t\t\t\tprovider,\n\t\t\t\t),\n\t\t\t);\n\n\t\t\tif (isCustomEditorProviderWithEditingCapability(provider)) {\n\t\t\t\tdisposables.add(\n\t\t\t\t\tprovider.onDidChangeCustomDocument((e) => {\n\t\t\t\t\t\tconst entry = this.getCustomDocumentEntry(\n\t\t\t\t\t\t\tviewType,\n\t\t\t\t\t\t\te.document.uri,\n\t\t\t\t\t\t);\n\t\t\t\t\t\tif (isEditEvent(e)) {\n\t\t\t\t\t\t\tconst editId = entry.addEdit(e);\n\t\t\t\t\t\t\tthis._proxy.$onDidEdit(\n\t\t\t\t\t\t\t\te.document.uri,\n\t\t\t\t\t\t\t\tviewType,\n\t\t\t\t\t\t\t\teditId,\n\t\t\t\t\t\t\t\te.label,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tthis._proxy.$onContentChange(\n\t\t\t\t\t\t\t\te.document.uri,\n\t\t\t\t\t\t\t\tviewType,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\t\t\t\t\t}),\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tthis._proxy.$registerCustomEditorProvider(\n\t\t\t\ttoExtensionData(extension),\n\t\t\t\tviewType,\n\t\t\t\toptions.webviewOptions || {},\n\t\t\t\t!!options.supportsMultipleEditorsPerDocument,\n\t\t\t\tshouldSerializeBuffersForPostMessage(extension),\n\t\t\t);\n\t\t}\n\n\t\treturn extHostTypes.Disposable.from(\n\t\t\tdisposables,\n\t\t\tnew extHostTypes.Disposable(() => {\n\t\t\t\tthis._proxy.$unregisterEditorProvider(viewType);\n\t\t\t}),\n\t\t);\n\t}\n\n\tasync $createCustomDocument(\n\t\tresource: UriComponents,\n\t\tviewType: string,\n\t\tbackupId: string | undefined,\n\t\tuntitledDocumentData: VSBuffer | undefined,\n\t\tcancellation: CancellationToken,\n\t) {\n\t\tconst entry = this._editorProviders.get(viewType);\n\t\tif (!entry) {\n\t\t\tthrow new Error(`No provider found for '${viewType}'`);\n\t\t}\n\n\t\tif (entry.type !== CustomEditorType.Custom) {\n\t\t\tthrow new Error(`Invalid provide type for '${viewType}'`);\n\t\t}\n\n\t\tconst revivedResource = URI.revive(resource);\n\t\tconst document = await entry.provider.openCustomDocument(\n\t\t\trevivedResource,\n\t\t\t{ backupId, untitledDocumentData: untitledDocumentData?.buffer },\n\t\t\tcancellation,\n\t\t);\n\n\t\tlet storageRoot: URI | undefined;\n\t\tif (\n\t\t\tisCustomEditorProviderWithEditingCapability(entry.provider) &&\n\t\t\tthis._extensionStoragePaths\n\t\t) {\n\t\t\tstorageRoot =\n\t\t\t\tthis._extensionStoragePaths.workspaceValue(entry.extension) ??\n\t\t\t\tthis._extensionStoragePaths.globalValue(entry.extension);\n\t\t}\n\t\tthis._documents.add(viewType, document, storageRoot);\n\n\t\treturn {\n\t\t\teditable: isCustomEditorProviderWithEditingCapability(\n\t\t\t\tentry.provider,\n\t\t\t),\n\t\t};\n\t}\n\n\tasync $disposeCustomDocument(\n\t\tresource: UriComponents,\n\t\tviewType: string,\n\t): Promise<void> {\n\t\tconst entry = this._editorProviders.get(viewType);\n\t\tif (!entry) {\n\t\t\tthrow new Error(`No provider found for '${viewType}'`);\n\t\t}\n\n\t\tif (entry.type !== CustomEditorType.Custom) {\n\t\t\tthrow new Error(`Invalid provider type for '${viewType}'`);\n\t\t}\n\n\t\tconst revivedResource = URI.revive(resource);\n\t\tconst { document } = this.getCustomDocumentEntry(\n\t\t\tviewType,\n\t\t\trevivedResource,\n\t\t);\n\t\tthis._documents.delete(viewType, document);\n\t\tdocument.dispose();\n\t}\n\n\tasync $resolveCustomEditor(\n\t\tresource: UriComponents,\n\t\thandle: extHostProtocol.WebviewHandle,\n\t\tviewType: string,\n\t\tinitData: {\n\t\t\ttitle: string;\n\t\t\tcontentOptions: extHostProtocol.IWebviewContentOptions;\n\t\t\toptions: extHostProtocol.IWebviewPanelOptions;\n\t\t\tactive: boolean;\n\t\t},\n\t\tposition: EditorGroupColumn,\n\t\tcancellation: CancellationToken,\n\t): Promise<void> {\n\t\tconst entry = this._editorProviders.get(viewType);\n\t\tif (!entry) {\n\t\t\tthrow new Error(`No provider found for '${viewType}'`);\n\t\t}\n\n\t\tconst viewColumn = typeConverters.ViewColumn.to(position);\n\n\t\tconst webview = this._extHostWebview.createNewWebview(\n\t\t\thandle,\n\t\t\tinitData.contentOptions,\n\t\t\tentry.extension,\n\t\t);\n\t\tconst panel = this._extHostWebviewPanels.createNewWebviewPanel(\n\t\t\thandle,\n\t\t\tviewType,\n\t\t\tinitData.title,\n\t\t\tviewColumn,\n\t\t\tinitData.options,\n\t\t\twebview,\n\t\t\tinitData.active,\n\t\t);\n\n\t\tconst revivedResource = URI.revive(resource);\n\n\t\tswitch (entry.type) {\n\t\t\tcase CustomEditorType.Custom: {\n\t\t\t\tconst { document } = this.getCustomDocumentEntry(\n\t\t\t\t\tviewType,\n\t\t\t\t\trevivedResource,\n\t\t\t\t);\n\t\t\t\treturn entry.provider.resolveCustomEditor(\n\t\t\t\t\tdocument,\n\t\t\t\t\tpanel,\n\t\t\t\t\tcancellation,\n\t\t\t\t);\n\t\t\t}\n\t\t\tcase CustomEditorType.Text: {\n\t\t\t\tconst document =\n\t\t\t\t\tthis._extHostDocuments.getDocument(revivedResource);\n\t\t\t\treturn entry.provider.resolveCustomTextEditor(\n\t\t\t\t\tdocument,\n\t\t\t\t\tpanel,\n\t\t\t\t\tcancellation,\n\t\t\t\t);\n\t\t\t}\n\t\t\tdefault: {\n\t\t\t\tthrow new Error(\"Unknown webview provider type\");\n\t\t\t}\n\t\t}\n\t}\n\n\t$disposeEdits(\n\t\tresourceComponents: UriComponents,\n\t\tviewType: string,\n\t\teditIds: number[],\n\t): void {\n\t\tconst document = this.getCustomDocumentEntry(\n\t\t\tviewType,\n\t\t\tresourceComponents,\n\t\t);\n\t\tdocument.disposeEdits(editIds);\n\t}\n\n\tasync $onMoveCustomEditor(\n\t\thandle: string,\n\t\tnewResourceComponents: UriComponents,\n\t\tviewType: string,\n\t): Promise<void> {\n\t\tconst entry = this._editorProviders.get(viewType);\n\t\tif (!entry) {\n\t\t\tthrow new Error(`No provider found for '${viewType}'`);\n\t\t}\n\n\t\tif (\n\t\t\t!(entry.provider as vscode.CustomTextEditorProvider)\n\t\t\t\t.moveCustomTextEditor\n\t\t) {\n\t\t\tthrow new Error(`Provider does not implement move '${viewType}'`);\n\t\t}\n\n\t\tconst webview = this._extHostWebviewPanels.getWebviewPanel(handle);\n\t\tif (!webview) {\n\t\t\tthrow new Error(`No webview found`);\n\t\t}\n\n\t\tconst resource = URI.revive(newResourceComponents);\n\t\tconst document = this._extHostDocuments.getDocument(resource);\n\t\tawait (entry.provider as vscode.CustomTextEditorProvider)\n\t\t\t.moveCustomTextEditor!(document, webview, CancellationToken.None);\n\t}\n\n\tasync $undo(\n\t\tresourceComponents: UriComponents,\n\t\tviewType: string,\n\t\teditId: number,\n\t\tisDirty: boolean,\n\t): Promise<void> {\n\t\tconst entry = this.getCustomDocumentEntry(viewType, resourceComponents);\n\t\treturn entry.undo(editId, isDirty);\n\t}\n\n\tasync $redo(\n\t\tresourceComponents: UriComponents,\n\t\tviewType: string,\n\t\teditId: number,\n\t\tisDirty: boolean,\n\t): Promise<void> {\n\t\tconst entry = this.getCustomDocumentEntry(viewType, resourceComponents);\n\t\treturn entry.redo(editId, isDirty);\n\t}\n\n\tasync $revert(\n\t\tresourceComponents: UriComponents,\n\t\tviewType: string,\n\t\tcancellation: CancellationToken,\n\t): Promise<void> {\n\t\tconst entry = this.getCustomDocumentEntry(viewType, resourceComponents);\n\t\tconst provider = this.getCustomEditorProvider(viewType);\n\t\tawait provider.revertCustomDocument(entry.document, cancellation);\n\t\tentry.disposeBackup();\n\t}\n\n\tasync $onSave(\n\t\tresourceComponents: UriComponents,\n\t\tviewType: string,\n\t\tcancellation: CancellationToken,\n\t): Promise<void> {\n\t\tconst entry = this.getCustomDocumentEntry(viewType, resourceComponents);\n\t\tconst provider = this.getCustomEditorProvider(viewType);\n\t\tawait provider.saveCustomDocument(entry.document, cancellation);\n\t\tentry.disposeBackup();\n\t}\n\n\tasync $onSaveAs(\n\t\tresourceComponents: UriComponents,\n\t\tviewType: string,\n\t\ttargetResource: UriComponents,\n\t\tcancellation: CancellationToken,\n\t): Promise<void> {\n\t\tconst entry = this.getCustomDocumentEntry(viewType, resourceComponents);\n\t\tconst provider = this.getCustomEditorProvider(viewType);\n\t\treturn provider.saveCustomDocumentAs(\n\t\t\tentry.document,\n\t\t\tURI.revive(targetResource),\n\t\t\tcancellation,\n\t\t);\n\t}\n\n\tasync $backup(\n\t\tresourceComponents: UriComponents,\n\t\tviewType: string,\n\t\tcancellation: CancellationToken,\n\t): Promise<string> {\n\t\tconst entry = this.getCustomDocumentEntry(viewType, resourceComponents);\n\t\tconst provider = this.getCustomEditorProvider(viewType);\n\n\t\tconst backup = await provider.backupCustomDocument(\n\t\t\tentry.document,\n\t\t\t{\n\t\t\t\tdestination: entry.getNewBackupUri(),\n\t\t\t},\n\t\t\tcancellation,\n\t\t);\n\t\tentry.updateBackup(backup);\n\t\treturn backup.id;\n\t}\n\n\tprivate getCustomDocumentEntry(\n\t\tviewType: string,\n\t\tresource: UriComponents,\n\t): CustomDocumentStoreEntry {\n\t\tconst entry = this._documents.get(viewType, URI.revive(resource));\n\t\tif (!entry) {\n\t\t\tthrow new Error(\"No custom document found\");\n\t\t}\n\t\treturn entry;\n\t}\n\n\tprivate getCustomEditorProvider(\n\t\tviewType: string,\n\t): vscode.CustomEditorProvider {\n\t\tconst entry = this._editorProviders.get(viewType);\n\t\tconst provider = entry?.provider;\n\t\tif (\n\t\t\t!provider ||\n\t\t\t!isCustomEditorProviderWithEditingCapability(provider)\n\t\t) {\n\t\t\tthrow new Error(\"Custom document is not editable\");\n\t\t}\n\t\treturn provider;\n\t}\n}\n\nfunction isCustomEditorProviderWithEditingCapability(\n\tprovider:\n\t\t| vscode.CustomTextEditorProvider\n\t\t| vscode.CustomEditorProvider\n\t\t| vscode.CustomReadonlyEditorProvider,\n): provider is vscode.CustomEditorProvider {\n\treturn !!(provider as vscode.CustomEditorProvider)\n\t\t.onDidChangeCustomDocument;\n}\n\nfunction isCustomTextEditorProvider(\n\tprovider:\n\t\t| vscode.CustomReadonlyEditorProvider<vscode.CustomDocument>\n\t\t| vscode.CustomTextEditorProvider,\n): provider is vscode.CustomTextEditorProvider {\n\treturn (\n\t\ttypeof (provider as vscode.CustomTextEditorProvider)\n\t\t\t.resolveCustomTextEditor === \"function\"\n\t);\n}\n\nfunction isEditEvent(\n\te: vscode.CustomDocumentContentChangeEvent | vscode.CustomDocumentEditEvent,\n): e is vscode.CustomDocumentEditEvent {\n\treturn (\n\t\ttypeof (e as vscode.CustomDocumentEditEvent).undo === \"function\" &&\n\t\ttypeof (e as vscode.CustomDocumentEditEvent).redo === \"function\"\n\t);\n}\n\nfunction hashPath(resource: URI): string {\n\tconst str =\n\t\tresource.scheme === Schemas.file || resource.scheme === Schemas.untitled\n\t\t\t? resource.fsPath\n\t\t\t: resource.toString();\n\treturn hash(str) + \"\";\n}\n"],
  "mappings": "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",
  "names": ["CustomEditorType"]
}
