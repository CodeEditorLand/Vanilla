{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/api/common/configurationExtensionPoint.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as nls from '../../../nls.js';\nimport * as objects from '../../../base/common/objects.js';\nimport { Registry } from '../../../platform/registry/common/platform.js';\nimport { IJSONSchema } from '../../../base/common/jsonSchema.js';\nimport { ExtensionsRegistry, IExtensionPointUser } from '../../services/extensions/common/extensionsRegistry.js';\nimport { IConfigurationNode, IConfigurationRegistry, Extensions, validateProperty, ConfigurationScope, OVERRIDE_PROPERTY_REGEX, IConfigurationDefaults, configurationDefaultsSchemaId, IConfigurationDelta, getDefaultValue, getAllConfigurationProperties, parseScope } from '../../../platform/configuration/common/configurationRegistry.js';\nimport { IJSONContributionRegistry, Extensions as JSONExtensions } from '../../../platform/jsonschemas/common/jsonContributionRegistry.js';\nimport { workspaceSettingsSchemaId, launchSchemaId, tasksSchemaId } from '../../services/configuration/common/configuration.js';\nimport { isObject, isUndefined } from '../../../base/common/types.js';\nimport { ExtensionIdentifierMap, IExtensionManifest } from '../../../platform/extensions/common/extensions.js';\nimport { IStringDictionary } from '../../../base/common/collections.js';\nimport { Extensions as ExtensionFeaturesExtensions, IExtensionFeatureTableRenderer, IExtensionFeaturesRegistry, IRenderedData, IRowData, ITableData } from '../../services/extensionManagement/common/extensionFeatures.js';\nimport { Disposable } from '../../../base/common/lifecycle.js';\nimport { SyncDescriptor } from '../../../platform/instantiation/common/descriptors.js';\nimport { MarkdownString } from '../../../base/common/htmlContent.js';\n\nconst jsonRegistry = Registry.as<IJSONContributionRegistry>(JSONExtensions.JSONContribution);\nconst configurationRegistry = Registry.as<IConfigurationRegistry>(Extensions.Configuration);\n\nconst configurationEntrySchema: IJSONSchema = {\n\ttype: 'object',\n\tdefaultSnippets: [{ body: { title: '', properties: {} } }],\n\tproperties: {\n\t\ttitle: {\n\t\t\tdescription: nls.localize('vscode.extension.contributes.configuration.title', 'A title for the current category of settings. This label will be rendered in the Settings editor as a subheading. If the title is the same as the extension display name, then the category will be grouped under the main extension heading.'),\n\t\t\ttype: 'string'\n\t\t},\n\t\torder: {\n\t\t\tdescription: nls.localize('vscode.extension.contributes.configuration.order', 'When specified, gives the order of this category of settings relative to other categories.'),\n\t\t\ttype: 'integer'\n\t\t},\n\t\tproperties: {\n\t\t\tdescription: nls.localize('vscode.extension.contributes.configuration.properties', 'Description of the configuration properties.'),\n\t\t\ttype: 'object',\n\t\t\tpropertyNames: {\n\t\t\t\tpattern: '\\\\S+',\n\t\t\t\tpatternErrorMessage: nls.localize('vscode.extension.contributes.configuration.property.empty', 'Property should not be empty.'),\n\t\t\t},\n\t\t\tadditionalProperties: {\n\t\t\t\tanyOf: [\n\t\t\t\t\t{\n\t\t\t\t\t\ttitle: nls.localize('vscode.extension.contributes.configuration.properties.schema', 'Schema of the configuration property.'),\n\t\t\t\t\t\t$ref: 'http://json-schema.org/draft-07/schema#'\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\ttype: 'object',\n\t\t\t\t\t\tproperties: {\n\t\t\t\t\t\t\tscope: {\n\t\t\t\t\t\t\t\ttype: 'string',\n\t\t\t\t\t\t\t\tenum: ['application', 'machine', 'window', 'resource', 'language-overridable', 'machine-overridable'],\n\t\t\t\t\t\t\t\tdefault: 'window',\n\t\t\t\t\t\t\t\tenumDescriptions: [\n\t\t\t\t\t\t\t\t\tnls.localize('scope.application.description', \"Configuration that can be configured only in the user settings.\"),\n\t\t\t\t\t\t\t\t\tnls.localize('scope.machine.description', \"Configuration that can be configured only in the user settings or only in the remote settings.\"),\n\t\t\t\t\t\t\t\t\tnls.localize('scope.window.description', \"Configuration that can be configured in the user, remote or workspace settings.\"),\n\t\t\t\t\t\t\t\t\tnls.localize('scope.resource.description', \"Configuration that can be configured in the user, remote, workspace or folder settings.\"),\n\t\t\t\t\t\t\t\t\tnls.localize('scope.language-overridable.description', \"Resource configuration that can be configured in language specific settings.\"),\n\t\t\t\t\t\t\t\t\tnls.localize('scope.machine-overridable.description', \"Machine configuration that can be configured also in workspace or folder settings.\")\n\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\tmarkdownDescription: nls.localize('scope.description', \"Scope in which the configuration is applicable. Available scopes are `application`, `machine`, `window`, `resource`, and `machine-overridable`.\")\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tenumDescriptions: {\n\t\t\t\t\t\t\t\ttype: 'array',\n\t\t\t\t\t\t\t\titems: {\n\t\t\t\t\t\t\t\t\ttype: 'string',\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tdescription: nls.localize('scope.enumDescriptions', 'Descriptions for enum values')\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tmarkdownEnumDescriptions: {\n\t\t\t\t\t\t\t\ttype: 'array',\n\t\t\t\t\t\t\t\titems: {\n\t\t\t\t\t\t\t\t\ttype: 'string',\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tdescription: nls.localize('scope.markdownEnumDescriptions', 'Descriptions for enum values in the markdown format.')\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tenumItemLabels: {\n\t\t\t\t\t\t\t\ttype: 'array',\n\t\t\t\t\t\t\t\titems: {\n\t\t\t\t\t\t\t\t\ttype: 'string'\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tmarkdownDescription: nls.localize('scope.enumItemLabels', 'Labels for enum values to be displayed in the Settings editor. When specified, the {0} values still show after the labels, but less prominently.', '`enum`')\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tmarkdownDescription: {\n\t\t\t\t\t\t\t\ttype: 'string',\n\t\t\t\t\t\t\t\tdescription: nls.localize('scope.markdownDescription', 'The description in the markdown format.')\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tdeprecationMessage: {\n\t\t\t\t\t\t\t\ttype: 'string',\n\t\t\t\t\t\t\t\tdescription: nls.localize('scope.deprecationMessage', 'If set, the property is marked as deprecated and the given message is shown as an explanation.')\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tmarkdownDeprecationMessage: {\n\t\t\t\t\t\t\t\ttype: 'string',\n\t\t\t\t\t\t\t\tdescription: nls.localize('scope.markdownDeprecationMessage', 'If set, the property is marked as deprecated and the given message is shown as an explanation in the markdown format.')\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\teditPresentation: {\n\t\t\t\t\t\t\t\ttype: 'string',\n\t\t\t\t\t\t\t\tenum: ['singlelineText', 'multilineText'],\n\t\t\t\t\t\t\t\tenumDescriptions: [\n\t\t\t\t\t\t\t\t\tnls.localize('scope.singlelineText.description', 'The value will be shown in an inputbox.'),\n\t\t\t\t\t\t\t\t\tnls.localize('scope.multilineText.description', 'The value will be shown in a textarea.')\n\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\tdefault: 'singlelineText',\n\t\t\t\t\t\t\t\tdescription: nls.localize('scope.editPresentation', 'When specified, controls the presentation format of the string setting.')\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\torder: {\n\t\t\t\t\t\t\t\ttype: 'integer',\n\t\t\t\t\t\t\t\tdescription: nls.localize('scope.order', 'When specified, gives the order of this setting relative to other settings within the same category. Settings with an order property will be placed before settings without this property set.')\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tignoreSync: {\n\t\t\t\t\t\t\t\ttype: 'boolean',\n\t\t\t\t\t\t\t\tdescription: nls.localize('scope.ignoreSync', 'When enabled, Settings Sync will not sync the user value of this configuration by default.')\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t}\n\t\t}\n\t}\n};\n\n// build up a delta across two ext points and only apply it once\nlet _configDelta: IConfigurationDelta | undefined;\n\n\n// BEGIN VSCode extension point `configurationDefaults`\nconst defaultConfigurationExtPoint = ExtensionsRegistry.registerExtensionPoint<IConfigurationNode>({\n\textensionPoint: 'configurationDefaults',\n\tjsonSchema: {\n\t\t$ref: configurationDefaultsSchemaId,\n\t}\n});\ndefaultConfigurationExtPoint.setHandler((extensions, { added, removed }) => {\n\n\tif (_configDelta) {\n\t\t// HIGHLY unlikely, but just in case\n\t\tconfigurationRegistry.deltaConfiguration(_configDelta);\n\t}\n\n\tconst configNow = _configDelta = {};\n\t// schedule a HIGHLY unlikely task in case only the default configurations EXT point changes\n\tqueueMicrotask(() => {\n\t\tif (_configDelta === configNow) {\n\t\t\tconfigurationRegistry.deltaConfiguration(_configDelta);\n\t\t\t_configDelta = undefined;\n\t\t}\n\t});\n\n\tif (removed.length) {\n\t\tconst removedDefaultConfigurations = removed.map<IConfigurationDefaults>(extension => ({ overrides: objects.deepClone(extension.value), source: { id: extension.description.identifier.value, displayName: extension.description.displayName } }));\n\t\t_configDelta.removedDefaults = removedDefaultConfigurations;\n\t}\n\tif (added.length) {\n\t\tconst registeredProperties = configurationRegistry.getConfigurationProperties();\n\t\tconst allowedScopes = [ConfigurationScope.MACHINE_OVERRIDABLE, ConfigurationScope.WINDOW, ConfigurationScope.RESOURCE, ConfigurationScope.LANGUAGE_OVERRIDABLE];\n\t\tconst addedDefaultConfigurations = added.map<IConfigurationDefaults>(extension => {\n\t\t\tconst overrides: IStringDictionary<any> = objects.deepClone(extension.value);\n\t\t\tfor (const key of Object.keys(overrides)) {\n\t\t\t\tconst registeredPropertyScheme = registeredProperties[key];\n\t\t\t\tif (registeredPropertyScheme?.disallowConfigurationDefault) {\n\t\t\t\t\textension.collector.warn(nls.localize('config.property.preventDefaultConfiguration.warning', \"Cannot register configuration defaults for '{0}'. This setting does not allow contributing configuration defaults.\", key));\n\t\t\t\t\tdelete overrides[key];\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tif (!OVERRIDE_PROPERTY_REGEX.test(key)) {\n\t\t\t\t\tif (registeredPropertyScheme?.scope && !allowedScopes.includes(registeredPropertyScheme.scope)) {\n\t\t\t\t\t\textension.collector.warn(nls.localize('config.property.defaultConfiguration.warning', \"Cannot register configuration defaults for '{0}'. Only defaults for machine-overridable, window, resource and language overridable scoped settings are supported.\", key));\n\t\t\t\t\t\tdelete overrides[key];\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn { overrides, source: { id: extension.description.identifier.value, displayName: extension.description.displayName } };\n\t\t});\n\t\t_configDelta.addedDefaults = addedDefaultConfigurations;\n\t}\n});\n// END VSCode extension point `configurationDefaults`\n\n\n// BEGIN VSCode extension point `configuration`\nconst configurationExtPoint = ExtensionsRegistry.registerExtensionPoint<IConfigurationNode>({\n\textensionPoint: 'configuration',\n\tdeps: [defaultConfigurationExtPoint],\n\tjsonSchema: {\n\t\tdescription: nls.localize('vscode.extension.contributes.configuration', 'Contributes configuration settings.'),\n\t\toneOf: [\n\t\t\tconfigurationEntrySchema,\n\t\t\t{\n\t\t\t\ttype: 'array',\n\t\t\t\titems: configurationEntrySchema\n\t\t\t}\n\t\t]\n\t}\n});\n\nconst extensionConfigurations: ExtensionIdentifierMap<IConfigurationNode[]> = new ExtensionIdentifierMap<IConfigurationNode[]>();\n\nconfigurationExtPoint.setHandler((extensions, { added, removed }) => {\n\n\t// HIGHLY unlikely (only configuration but not defaultConfiguration EXT point changes)\n\t_configDelta ??= {};\n\n\tif (removed.length) {\n\t\tconst removedConfigurations: IConfigurationNode[] = [];\n\t\tfor (const extension of removed) {\n\t\t\tremovedConfigurations.push(...(extensionConfigurations.get(extension.description.identifier) || []));\n\t\t\textensionConfigurations.delete(extension.description.identifier);\n\t\t}\n\t\t_configDelta.removedConfigurations = removedConfigurations;\n\t}\n\n\tconst seenProperties = new Set<string>();\n\n\tfunction handleConfiguration(node: IConfigurationNode, extension: IExtensionPointUser<any>): IConfigurationNode {\n\t\tconst configuration = objects.deepClone(node);\n\n\t\tif (configuration.title && (typeof configuration.title !== 'string')) {\n\t\t\textension.collector.error(nls.localize('invalid.title', \"'configuration.title' must be a string\"));\n\t\t}\n\n\t\tvalidateProperties(configuration, extension);\n\n\t\tconfiguration.id = node.id || extension.description.identifier.value;\n\t\tconfiguration.extensionInfo = { id: extension.description.identifier.value, displayName: extension.description.displayName };\n\t\tconfiguration.restrictedProperties = extension.description.capabilities?.untrustedWorkspaces?.supported === 'limited' ? extension.description.capabilities?.untrustedWorkspaces.restrictedConfigurations : undefined;\n\t\tconfiguration.title = configuration.title || extension.description.displayName || extension.description.identifier.value;\n\t\treturn configuration;\n\t}\n\n\tfunction validateProperties(configuration: IConfigurationNode, extension: IExtensionPointUser<any>): void {\n\t\tconst properties = configuration.properties;\n\t\tif (properties) {\n\t\t\tif (typeof properties !== 'object') {\n\t\t\t\textension.collector.error(nls.localize('invalid.properties', \"'configuration.properties' must be an object\"));\n\t\t\t\tconfiguration.properties = {};\n\t\t\t}\n\t\t\tfor (const key in properties) {\n\t\t\t\tconst propertyConfiguration = properties[key];\n\t\t\t\tconst message = validateProperty(key, propertyConfiguration);\n\t\t\t\tif (message) {\n\t\t\t\t\tdelete properties[key];\n\t\t\t\t\textension.collector.warn(message);\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tif (seenProperties.has(key)) {\n\t\t\t\t\tdelete properties[key];\n\t\t\t\t\textension.collector.warn(nls.localize('config.property.duplicate', \"Cannot register '{0}'. This property is already registered.\", key));\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tif (!isObject(propertyConfiguration)) {\n\t\t\t\t\tdelete properties[key];\n\t\t\t\t\textension.collector.error(nls.localize('invalid.property', \"configuration.properties property '{0}' must be an object\", key));\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tseenProperties.add(key);\n\t\t\t\tpropertyConfiguration.scope = propertyConfiguration.scope ? parseScope(propertyConfiguration.scope.toString()) : ConfigurationScope.WINDOW;\n\t\t\t}\n\t\t}\n\t\tconst subNodes = configuration.allOf;\n\t\tif (subNodes) {\n\t\t\textension.collector.error(nls.localize('invalid.allOf', \"'configuration.allOf' is deprecated and should no longer be used. Instead, pass multiple configuration sections as an array to the 'configuration' contribution point.\"));\n\t\t\tfor (const node of subNodes) {\n\t\t\t\tvalidateProperties(node, extension);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (added.length) {\n\t\tconst addedConfigurations: IConfigurationNode[] = [];\n\t\tfor (const extension of added) {\n\t\t\tconst configurations: IConfigurationNode[] = [];\n\t\t\tconst value = <IConfigurationNode | IConfigurationNode[]>extension.value;\n\t\t\tif (Array.isArray(value)) {\n\t\t\t\tvalue.forEach(v => configurations.push(handleConfiguration(v, extension)));\n\t\t\t} else {\n\t\t\t\tconfigurations.push(handleConfiguration(value, extension));\n\t\t\t}\n\t\t\textensionConfigurations.set(extension.description.identifier, configurations);\n\t\t\taddedConfigurations.push(...configurations);\n\t\t}\n\n\t\t_configDelta.addedConfigurations = addedConfigurations;\n\t}\n\n\tconfigurationRegistry.deltaConfiguration(_configDelta);\n\t_configDelta = undefined;\n});\n// END VSCode extension point `configuration`\n\njsonRegistry.registerSchema('vscode://schemas/workspaceConfig', {\n\tallowComments: true,\n\tallowTrailingCommas: true,\n\tdefault: {\n\t\tfolders: [\n\t\t\t{\n\t\t\t\tpath: ''\n\t\t\t}\n\t\t],\n\t\tsettings: {\n\t\t}\n\t},\n\trequired: ['folders'],\n\tproperties: {\n\t\t'folders': {\n\t\t\tminItems: 0,\n\t\t\tuniqueItems: true,\n\t\t\tdescription: nls.localize('workspaceConfig.folders.description', \"List of folders to be loaded in the workspace.\"),\n\t\t\titems: {\n\t\t\t\ttype: 'object',\n\t\t\t\tdefaultSnippets: [{ body: { path: '$1' } }],\n\t\t\t\toneOf: [{\n\t\t\t\t\tproperties: {\n\t\t\t\t\t\tpath: {\n\t\t\t\t\t\t\ttype: 'string',\n\t\t\t\t\t\t\tdescription: nls.localize('workspaceConfig.path.description', \"A file path. e.g. `/root/folderA` or `./folderA` for a relative path that will be resolved against the location of the workspace file.\")\n\t\t\t\t\t\t},\n\t\t\t\t\t\tname: {\n\t\t\t\t\t\t\ttype: 'string',\n\t\t\t\t\t\t\tdescription: nls.localize('workspaceConfig.name.description', \"An optional name for the folder. \")\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\trequired: ['path']\n\t\t\t\t}, {\n\t\t\t\t\tproperties: {\n\t\t\t\t\t\turi: {\n\t\t\t\t\t\t\ttype: 'string',\n\t\t\t\t\t\t\tdescription: nls.localize('workspaceConfig.uri.description', \"URI of the folder\")\n\t\t\t\t\t\t},\n\t\t\t\t\t\tname: {\n\t\t\t\t\t\t\ttype: 'string',\n\t\t\t\t\t\t\tdescription: nls.localize('workspaceConfig.name.description', \"An optional name for the folder. \")\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\trequired: ['uri']\n\t\t\t\t}]\n\t\t\t}\n\t\t},\n\t\t'settings': {\n\t\t\ttype: 'object',\n\t\t\tdefault: {},\n\t\t\tdescription: nls.localize('workspaceConfig.settings.description', \"Workspace settings\"),\n\t\t\t$ref: workspaceSettingsSchemaId\n\t\t},\n\t\t'launch': {\n\t\t\ttype: 'object',\n\t\t\tdefault: { configurations: [], compounds: [] },\n\t\t\tdescription: nls.localize('workspaceConfig.launch.description', \"Workspace launch configurations\"),\n\t\t\t$ref: launchSchemaId\n\t\t},\n\t\t'tasks': {\n\t\t\ttype: 'object',\n\t\t\tdefault: { version: '2.0.0', tasks: [] },\n\t\t\tdescription: nls.localize('workspaceConfig.tasks.description', \"Workspace task configurations\"),\n\t\t\t$ref: tasksSchemaId\n\t\t},\n\t\t'extensions': {\n\t\t\ttype: 'object',\n\t\t\tdefault: {},\n\t\t\tdescription: nls.localize('workspaceConfig.extensions.description', \"Workspace extensions\"),\n\t\t\t$ref: 'vscode://schemas/extensions'\n\t\t},\n\t\t'remoteAuthority': {\n\t\t\ttype: 'string',\n\t\t\tdoNotSuggest: true,\n\t\t\tdescription: nls.localize('workspaceConfig.remoteAuthority', \"The remote server where the workspace is located.\"),\n\t\t},\n\t\t'transient': {\n\t\t\ttype: 'boolean',\n\t\t\tdoNotSuggest: true,\n\t\t\tdescription: nls.localize('workspaceConfig.transient', \"A transient workspace will disappear when restarting or reloading.\"),\n\t\t}\n\t},\n\terrorMessage: nls.localize('unknownWorkspaceProperty', \"Unknown workspace configuration property\")\n});\n\n\nclass SettingsTableRenderer extends Disposable implements IExtensionFeatureTableRenderer {\n\n\treadonly type = 'table';\n\n\tshouldRender(manifest: IExtensionManifest): boolean {\n\t\treturn !!manifest.contributes?.configuration;\n\t}\n\n\trender(manifest: IExtensionManifest): IRenderedData<ITableData> {\n\t\tconst configuration: IConfigurationNode[] = manifest.contributes?.configuration\n\t\t\t? Array.isArray(manifest.contributes.configuration) ? manifest.contributes.configuration : [manifest.contributes.configuration]\n\t\t\t: [];\n\n\t\tconst properties = getAllConfigurationProperties(configuration);\n\n\t\tconst contrib = properties ? Object.keys(properties) : [];\n\t\tconst headers = [nls.localize('setting name', \"ID\"), nls.localize('description', \"Description\"), nls.localize('default', \"Default\")];\n\t\tconst rows: IRowData[][] = contrib.sort((a, b) => a.localeCompare(b))\n\t\t\t.map(key => {\n\t\t\t\treturn [\n\t\t\t\t\tnew MarkdownString().appendMarkdown(`\\`${key}\\``),\n\t\t\t\t\tproperties[key].markdownDescription ? new MarkdownString(properties[key].markdownDescription, false) : properties[key].description ?? '',\n\t\t\t\t\tnew MarkdownString().appendCodeblock('json', JSON.stringify(isUndefined(properties[key].default) ? getDefaultValue(properties[key].type) : properties[key].default, null, 2)),\n\t\t\t\t];\n\t\t\t});\n\n\t\treturn {\n\t\t\tdata: {\n\t\t\t\theaders,\n\t\t\t\trows\n\t\t\t},\n\t\t\tdispose: () => { }\n\t\t};\n\t}\n}\n\nRegistry.as<IExtensionFeaturesRegistry>(ExtensionFeaturesExtensions.ExtensionFeaturesRegistry).registerExtensionFeature({\n\tid: 'configuration',\n\tlabel: nls.localize('settings', \"Settings\"),\n\taccess: {\n\t\tcanToggle: false\n\t},\n\trenderer: new SyncDescriptor(SettingsTableRenderer),\n});\n"],
  "mappings": "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",
  "names": []
}
