{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/api/common/extHostUriOpener.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CancellationToken } from '../../../base/common/cancellation.js';\nimport { toDisposable } from '../../../base/common/lifecycle.js';\nimport { Schemas } from '../../../base/common/network.js';\nimport { URI, UriComponents } from '../../../base/common/uri.js';\nimport * as languages from '../../../editor/common/languages.js';\nimport { ExtensionIdentifier } from '../../../platform/extensions/common/extensions.js';\nimport type * as vscode from 'vscode';\nimport { ExtHostUriOpenersShape, IMainContext, MainContext, MainThreadUriOpenersShape } from './extHost.protocol.js';\n\n\nexport class ExtHostUriOpeners implements ExtHostUriOpenersShape {\n\n\tprivate static readonly supportedSchemes = new Set<string>([Schemas.http, Schemas.https]);\n\n\tprivate readonly _proxy: MainThreadUriOpenersShape;\n\n\tprivate readonly _openers = new Map<string, vscode.ExternalUriOpener>();\n\n\tconstructor(\n\t\tmainContext: IMainContext,\n\t) {\n\t\tthis._proxy = mainContext.getProxy(MainContext.MainThreadUriOpeners);\n\t}\n\n\tregisterExternalUriOpener(\n\t\textensionId: ExtensionIdentifier,\n\t\tid: string,\n\t\topener: vscode.ExternalUriOpener,\n\t\tmetadata: vscode.ExternalUriOpenerMetadata,\n\t): vscode.Disposable {\n\t\tif (this._openers.has(id)) {\n\t\t\tthrow new Error(`Opener with id '${id}' already registered`);\n\t\t}\n\n\t\tconst invalidScheme = metadata.schemes.find(scheme => !ExtHostUriOpeners.supportedSchemes.has(scheme));\n\t\tif (invalidScheme) {\n\t\t\tthrow new Error(`Scheme '${invalidScheme}' is not supported. Only http and https are currently supported.`);\n\t\t}\n\n\t\tthis._openers.set(id, opener);\n\t\tthis._proxy.$registerUriOpener(id, metadata.schemes, extensionId, metadata.label);\n\n\t\treturn toDisposable(() => {\n\t\t\tthis._openers.delete(id);\n\t\t\tthis._proxy.$unregisterUriOpener(id);\n\t\t});\n\t}\n\n\tasync $canOpenUri(id: string, uriComponents: UriComponents, token: CancellationToken): Promise<languages.ExternalUriOpenerPriority> {\n\t\tconst opener = this._openers.get(id);\n\t\tif (!opener) {\n\t\t\tthrow new Error(`Unknown opener with id: ${id}`);\n\t\t}\n\n\t\tconst uri = URI.revive(uriComponents);\n\t\treturn opener.canOpenExternalUri(uri, token);\n\t}\n\n\tasync $openUri(id: string, context: { resolvedUri: UriComponents; sourceUri: UriComponents }, token: CancellationToken): Promise<void> {\n\t\tconst opener = this._openers.get(id);\n\t\tif (!opener) {\n\t\t\tthrow new Error(`Unknown opener id: '${id}'`);\n\t\t}\n\n\t\treturn opener.openExternalUri(URI.revive(context.resolvedUri), {\n\t\t\tsourceUri: URI.revive(context.sourceUri)\n\t\t}, token);\n\t}\n}\n"],
  "mappings": ";;AAKA,SAAS,yBAAyB;AAClC,SAAS,oBAAoB;AAC7B,SAAS,eAAe;AACxB,SAAS,KAAK,qBAAqB;AACnC,YAAY,eAAe;AAC3B,SAAS,2BAA2B;AAEpC,SAAS,wBAAwB,cAAc,aAAa,iCAAiC;AAGtF,MAAM,kBAAoD;AAAA,EAfjE,OAeiE;AAAA;AAAA;AAAA,EAEhE,OAAwB,mBAAmB,oBAAI,IAAY,CAAC,QAAQ,MAAM,QAAQ,KAAK,CAAC;AAAA,EAEvE;AAAA,EAEA,WAAW,oBAAI,IAAsC;AAAA,EAEtE,YACC,aACC;AACD,SAAK,SAAS,YAAY,SAAS,YAAY,oBAAoB;AAAA,EACpE;AAAA,EAEA,0BACC,aACA,IACA,QACA,UACoB;AACpB,QAAI,KAAK,SAAS,IAAI,EAAE,GAAG;AAC1B,YAAM,IAAI,MAAM,mBAAmB,EAAE,sBAAsB;AAAA,IAC5D;AAEA,UAAM,gBAAgB,SAAS,QAAQ,KAAK,YAAU,CAAC,kBAAkB,iBAAiB,IAAI,MAAM,CAAC;AACrG,QAAI,eAAe;AAClB,YAAM,IAAI,MAAM,WAAW,aAAa,kEAAkE;AAAA,IAC3G;AAEA,SAAK,SAAS,IAAI,IAAI,MAAM;AAC5B,SAAK,OAAO,mBAAmB,IAAI,SAAS,SAAS,aAAa,SAAS,KAAK;AAEhF,WAAO,aAAa,MAAM;AACzB,WAAK,SAAS,OAAO,EAAE;AACvB,WAAK,OAAO,qBAAqB,EAAE;AAAA,IACpC,CAAC;AAAA,EACF;AAAA,EAEA,MAAM,YAAY,IAAY,eAA8B,OAAwE;AACnI,UAAM,SAAS,KAAK,SAAS,IAAI,EAAE;AACnC,QAAI,CAAC,QAAQ;AACZ,YAAM,IAAI,MAAM,2BAA2B,EAAE,EAAE;AAAA,IAChD;AAEA,UAAM,MAAM,IAAI,OAAO,aAAa;AACpC,WAAO,OAAO,mBAAmB,KAAK,KAAK;AAAA,EAC5C;AAAA,EAEA,MAAM,SAAS,IAAY,SAAmE,OAAyC;AACtI,UAAM,SAAS,KAAK,SAAS,IAAI,EAAE;AACnC,QAAI,CAAC,QAAQ;AACZ,YAAM,IAAI,MAAM,uBAAuB,EAAE,GAAG;AAAA,IAC7C;AAEA,WAAO,OAAO,gBAAgB,IAAI,OAAO,QAAQ,WAAW,GAAG;AAAA,MAC9D,WAAW,IAAI,OAAO,QAAQ,SAAS;AAAA,IACxC,GAAG,KAAK;AAAA,EACT;AACD;",
  "names": []
}
