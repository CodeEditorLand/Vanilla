{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/api/common/extHostComments.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport type * as vscode from \"vscode\";\nimport { asPromise } from \"../../../base/common/async.js\";\nimport type { CancellationToken } from \"../../../base/common/cancellation.js\";\nimport { debounce } from \"../../../base/common/decorators.js\";\nimport { Emitter } from \"../../../base/common/event.js\";\nimport {\n\tDisposableStore,\n\tMutableDisposable,\n} from \"../../../base/common/lifecycle.js\";\nimport { MarshalledId } from \"../../../base/common/marshallingIds.js\";\nimport { URI, type UriComponents } from \"../../../base/common/uri.js\";\nimport type { IRange } from \"../../../editor/common/core/range.js\";\nimport * as languages from \"../../../editor/common/languages.js\";\nimport {\n\tExtensionIdentifierMap,\n\ttype IExtensionDescription,\n} from \"../../../platform/extensions/common/extensions.js\";\nimport type { MarshalledCommentThread } from \"../../common/comments.js\";\nimport { checkProposedApiEnabled } from \"../../services/extensions/common/extensions.js\";\nimport {\n\ttype CommentChanges,\n\ttype CommentThreadChanges,\n\ttype ExtHostCommentsShape,\n\ttype IMainContext,\n\tMainContext,\n} from \"./extHost.protocol.js\";\nimport type { ExtHostCommands } from \"./extHostCommands.js\";\nimport type { ExtHostDocuments } from \"./extHostDocuments.js\";\nimport * as extHostTypeConverter from \"./extHostTypeConverters.js\";\nimport * as types from \"./extHostTypes.js\";\n\ntype ProviderHandle = number;\n\ninterface ExtHostComments {\n\tcreateCommentController(\n\t\textension: IExtensionDescription,\n\t\tid: string,\n\t\tlabel: string,\n\t): vscode.CommentController;\n}\n\nexport function createExtHostComments(\n\tmainContext: IMainContext,\n\tcommands: ExtHostCommands,\n\tdocuments: ExtHostDocuments,\n): ExtHostCommentsShape & ExtHostComments {\n\tconst proxy = mainContext.getProxy(MainContext.MainThreadComments);\n\n\tclass ExtHostCommentsImpl implements ExtHostCommentsShape, ExtHostComments {\n\t\tprivate static handlePool = 0;\n\n\t\tprivate _commentControllers: Map<\n\t\t\tProviderHandle,\n\t\t\tExtHostCommentController\n\t\t> = new Map<ProviderHandle, ExtHostCommentController>();\n\n\t\tprivate _commentControllersByExtension: ExtensionIdentifierMap<\n\t\t\tExtHostCommentController[]\n\t\t> = new ExtensionIdentifierMap<ExtHostCommentController[]>();\n\n\t\tconstructor() {\n\t\t\tcommands.registerArgumentProcessor({\n\t\t\t\tprocessArgument: (arg) => {\n\t\t\t\t\tif (arg && arg.$mid === MarshalledId.CommentController) {\n\t\t\t\t\t\tconst commentController = this._commentControllers.get(\n\t\t\t\t\t\t\targ.handle,\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tif (!commentController) {\n\t\t\t\t\t\t\treturn arg;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn commentController.value;\n\t\t\t\t\t} else if (arg && arg.$mid === MarshalledId.CommentThread) {\n\t\t\t\t\t\tconst marshalledCommentThread: MarshalledCommentThread =\n\t\t\t\t\t\t\targ;\n\t\t\t\t\t\tconst commentController = this._commentControllers.get(\n\t\t\t\t\t\t\tmarshalledCommentThread.commentControlHandle,\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tif (!commentController) {\n\t\t\t\t\t\t\treturn marshalledCommentThread;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst commentThread =\n\t\t\t\t\t\t\tcommentController.getCommentThread(\n\t\t\t\t\t\t\t\tmarshalledCommentThread.commentThreadHandle,\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\tif (!commentThread) {\n\t\t\t\t\t\t\treturn marshalledCommentThread;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn commentThread.value;\n\t\t\t\t\t} else if (\n\t\t\t\t\t\targ &&\n\t\t\t\t\t\t(arg.$mid === MarshalledId.CommentThreadReply ||\n\t\t\t\t\t\t\targ.$mid === MarshalledId.CommentThreadInstance)\n\t\t\t\t\t) {\n\t\t\t\t\t\tconst commentController = this._commentControllers.get(\n\t\t\t\t\t\t\targ.thread.commentControlHandle,\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tif (!commentController) {\n\t\t\t\t\t\t\treturn arg;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst commentThread =\n\t\t\t\t\t\t\tcommentController.getCommentThread(\n\t\t\t\t\t\t\t\targ.thread.commentThreadHandle,\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\tif (!commentThread) {\n\t\t\t\t\t\t\treturn arg;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (arg.$mid === MarshalledId.CommentThreadInstance) {\n\t\t\t\t\t\t\treturn commentThread.value;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\tthread: commentThread.value,\n\t\t\t\t\t\t\ttext: arg.text,\n\t\t\t\t\t\t};\n\t\t\t\t\t} else if (arg && arg.$mid === MarshalledId.CommentNode) {\n\t\t\t\t\t\tconst commentController = this._commentControllers.get(\n\t\t\t\t\t\t\targ.thread.commentControlHandle,\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tif (!commentController) {\n\t\t\t\t\t\t\treturn arg;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst commentThread =\n\t\t\t\t\t\t\tcommentController.getCommentThread(\n\t\t\t\t\t\t\t\targ.thread.commentThreadHandle,\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\tif (!commentThread) {\n\t\t\t\t\t\t\treturn arg;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst commentUniqueId = arg.commentUniqueId;\n\n\t\t\t\t\t\tconst comment =\n\t\t\t\t\t\t\tcommentThread.getCommentByUniqueId(commentUniqueId);\n\n\t\t\t\t\t\tif (!comment) {\n\t\t\t\t\t\t\treturn arg;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn comment;\n\t\t\t\t\t} else if (\n\t\t\t\t\t\targ &&\n\t\t\t\t\t\targ.$mid === MarshalledId.CommentThreadNode\n\t\t\t\t\t) {\n\t\t\t\t\t\tconst commentController = this._commentControllers.get(\n\t\t\t\t\t\t\targ.thread.commentControlHandle,\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tif (!commentController) {\n\t\t\t\t\t\t\treturn arg;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst commentThread =\n\t\t\t\t\t\t\tcommentController.getCommentThread(\n\t\t\t\t\t\t\t\targ.thread.commentThreadHandle,\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\tif (!commentThread) {\n\t\t\t\t\t\t\treturn arg;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst body: string = arg.text;\n\t\t\t\t\t\tconst commentUniqueId = arg.commentUniqueId;\n\n\t\t\t\t\t\tconst comment =\n\t\t\t\t\t\t\tcommentThread.getCommentByUniqueId(commentUniqueId);\n\n\t\t\t\t\t\tif (!comment) {\n\t\t\t\t\t\t\treturn arg;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// If the old comment body was a markdown string, use a markdown string here too.\n\t\t\t\t\t\tif (typeof comment.body === \"string\") {\n\t\t\t\t\t\t\tcomment.body = body;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tcomment.body = new types.MarkdownString(body);\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn comment;\n\t\t\t\t\t}\n\n\t\t\t\t\treturn arg;\n\t\t\t\t},\n\t\t\t});\n\t\t}\n\n\t\tcreateCommentController(\n\t\t\textension: IExtensionDescription,\n\t\t\tid: string,\n\t\t\tlabel: string,\n\t\t): vscode.CommentController {\n\t\t\tconst handle = ExtHostCommentsImpl.handlePool++;\n\t\t\tconst commentController = new ExtHostCommentController(\n\t\t\t\textension,\n\t\t\t\thandle,\n\t\t\t\tid,\n\t\t\t\tlabel,\n\t\t\t);\n\t\t\tthis._commentControllers.set(\n\t\t\t\tcommentController.handle,\n\t\t\t\tcommentController,\n\t\t\t);\n\n\t\t\tconst commentControllers =\n\t\t\t\tthis._commentControllersByExtension.get(extension.identifier) ||\n\t\t\t\t[];\n\t\t\tcommentControllers.push(commentController);\n\t\t\tthis._commentControllersByExtension.set(\n\t\t\t\textension.identifier,\n\t\t\t\tcommentControllers,\n\t\t\t);\n\n\t\t\treturn commentController.value;\n\t\t}\n\n\t\tasync $createCommentThreadTemplate(\n\t\t\tcommentControllerHandle: number,\n\t\t\turiComponents: UriComponents,\n\t\t\trange: IRange | undefined,\n\t\t\teditorId?: string,\n\t\t): Promise<void> {\n\t\t\tconst commentController = this._commentControllers.get(\n\t\t\t\tcommentControllerHandle,\n\t\t\t);\n\n\t\t\tif (!commentController) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tcommentController.$createCommentThreadTemplate(\n\t\t\t\turiComponents,\n\t\t\t\trange,\n\t\t\t\teditorId,\n\t\t\t);\n\t\t}\n\n\t\tasync $setActiveComment(\n\t\t\tcontrollerHandle: number,\n\t\t\tcommentInfo: {\n\t\t\t\tcommentThreadHandle: number;\n\t\t\t\tuniqueIdInThread?: number;\n\t\t\t},\n\t\t): Promise<void> {\n\t\t\tconst commentController =\n\t\t\t\tthis._commentControllers.get(controllerHandle);\n\n\t\t\tif (!commentController) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tcommentController.$setActiveComment(commentInfo ?? undefined);\n\t\t}\n\n\t\tasync $updateCommentThreadTemplate(\n\t\t\tcommentControllerHandle: number,\n\t\t\tthreadHandle: number,\n\t\t\trange: IRange,\n\t\t) {\n\t\t\tconst commentController = this._commentControllers.get(\n\t\t\t\tcommentControllerHandle,\n\t\t\t);\n\n\t\t\tif (!commentController) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tcommentController.$updateCommentThreadTemplate(threadHandle, range);\n\t\t}\n\n\t\t$deleteCommentThread(\n\t\t\tcommentControllerHandle: number,\n\t\t\tcommentThreadHandle: number,\n\t\t) {\n\t\t\tconst commentController = this._commentControllers.get(\n\t\t\t\tcommentControllerHandle,\n\t\t\t);\n\n\t\t\tcommentController?.$deleteCommentThread(commentThreadHandle);\n\t\t}\n\n\t\tasync $provideCommentingRanges(\n\t\t\tcommentControllerHandle: number,\n\t\t\turiComponents: UriComponents,\n\t\t\ttoken: CancellationToken,\n\t\t): Promise<{ ranges: IRange[]; fileComments: boolean } | undefined> {\n\t\t\tconst commentController = this._commentControllers.get(\n\t\t\t\tcommentControllerHandle,\n\t\t\t);\n\n\t\t\tif (\n\t\t\t\t!commentController ||\n\t\t\t\t!commentController.commentingRangeProvider\n\t\t\t) {\n\t\t\t\treturn Promise.resolve(undefined);\n\t\t\t}\n\n\t\t\tconst document = await documents.ensureDocumentData(\n\t\t\t\tURI.revive(uriComponents),\n\t\t\t);\n\t\t\treturn asPromise(async () => {\n\t\t\t\tconst rangesResult = await (\n\t\t\t\t\tcommentController.commentingRangeProvider as vscode.CommentingRangeProvider2\n\t\t\t\t).provideCommentingRanges(document.document, token);\n\t\t\t\tlet ranges:\n\t\t\t\t\t| { ranges: vscode.Range[]; fileComments: boolean }\n\t\t\t\t\t| undefined;\n\t\t\t\tif (Array.isArray(rangesResult)) {\n\t\t\t\t\tranges = {\n\t\t\t\t\t\tranges: rangesResult,\n\t\t\t\t\t\tfileComments: false,\n\t\t\t\t\t};\n\t\t\t\t} else if (rangesResult) {\n\t\t\t\t\tranges = {\n\t\t\t\t\t\tranges: rangesResult.ranges || [],\n\t\t\t\t\t\tfileComments: rangesResult.enableFileComments || false,\n\t\t\t\t\t};\n\t\t\t\t} else {\n\t\t\t\t\tranges = rangesResult ?? undefined;\n\t\t\t\t}\n\t\t\t\treturn ranges;\n\t\t\t}).then((ranges) => {\n\t\t\t\tlet convertedResult:\n\t\t\t\t\t| { ranges: IRange[]; fileComments: boolean }\n\t\t\t\t\t| undefined;\n\t\t\t\tif (ranges) {\n\t\t\t\t\tconvertedResult = {\n\t\t\t\t\t\tranges: ranges.ranges.map((x) =>\n\t\t\t\t\t\t\textHostTypeConverter.Range.from(x),\n\t\t\t\t\t\t),\n\t\t\t\t\t\tfileComments: ranges.fileComments,\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t\treturn convertedResult;\n\t\t\t});\n\t\t}\n\n\t\t$toggleReaction(\n\t\t\tcommentControllerHandle: number,\n\t\t\tthreadHandle: number,\n\t\t\turi: UriComponents,\n\t\t\tcomment: languages.Comment,\n\t\t\treaction: languages.CommentReaction,\n\t\t): Promise<void> {\n\t\t\tconst commentController = this._commentControllers.get(\n\t\t\t\tcommentControllerHandle,\n\t\t\t);\n\n\t\t\tif (!commentController || !commentController.reactionHandler) {\n\t\t\t\treturn Promise.resolve(undefined);\n\t\t\t}\n\n\t\t\treturn asPromise(() => {\n\t\t\t\tconst commentThread =\n\t\t\t\t\tcommentController.getCommentThread(threadHandle);\n\t\t\t\tif (commentThread) {\n\t\t\t\t\tconst vscodeComment = commentThread.getCommentByUniqueId(\n\t\t\t\t\t\tcomment.uniqueIdInThread,\n\t\t\t\t\t);\n\n\t\t\t\t\tif (commentController !== undefined && vscodeComment) {\n\t\t\t\t\t\tif (commentController.reactionHandler) {\n\t\t\t\t\t\t\treturn commentController.reactionHandler(\n\t\t\t\t\t\t\t\tvscodeComment,\n\t\t\t\t\t\t\t\tconvertFromReaction(reaction),\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn Promise.resolve(undefined);\n\t\t\t});\n\t\t}\n\t}\n\ttype CommentThreadModification = Partial<{\n\t\trange: vscode.Range;\n\t\tlabel: string | undefined;\n\t\tcontextValue: string | undefined;\n\t\tcomments: vscode.Comment[];\n\t\tcollapsibleState: vscode.CommentThreadCollapsibleState;\n\t\tcanReply: boolean;\n\t\tstate: vscode.CommentThreadState;\n\t\tisTemplate: boolean;\n\t\tapplicability: vscode.CommentThreadApplicability;\n\t}>;\n\n\tclass ExtHostCommentThread implements vscode.CommentThread2 {\n\t\tprivate static _handlePool = 0;\n\t\treadonly handle = ExtHostCommentThread._handlePool++;\n\t\tpublic commentHandle = 0;\n\n\t\tprivate modifications: CommentThreadModification = Object.create(null);\n\n\t\tset threadId(id: string) {\n\t\t\tthis._id = id;\n\t\t}\n\n\t\tget threadId(): string {\n\t\t\treturn this._id!;\n\t\t}\n\n\t\tget id(): string {\n\t\t\treturn this._id!;\n\t\t}\n\n\t\tget resource(): vscode.Uri {\n\t\t\treturn this._uri;\n\t\t}\n\n\t\tget uri(): vscode.Uri {\n\t\t\treturn this._uri;\n\t\t}\n\n\t\tprivate readonly _onDidUpdateCommentThread = new Emitter<void>();\n\t\treadonly onDidUpdateCommentThread =\n\t\t\tthis._onDidUpdateCommentThread.event;\n\n\t\tset range(range: vscode.Range | undefined) {\n\t\t\tif (\n\t\t\t\t(range === undefined) !== (this._range === undefined) ||\n\t\t\t\t!range || !this._range ||\n\t\t\t\t!range.isEqual(this._range)\n\t\t\t) {\n\t\t\t\tthis._range = range;\n\t\t\t\tthis.modifications.range = range;\n\t\t\t\tthis._onDidUpdateCommentThread.fire();\n\t\t\t}\n\t\t}\n\n\t\tget range(): vscode.Range | undefined {\n\t\t\treturn this._range;\n\t\t}\n\n\t\tprivate _canReply = true;\n\n\t\tset canReply(state: boolean) {\n\t\t\tif (this._canReply !== state) {\n\t\t\t\tthis._canReply = state;\n\t\t\t\tthis.modifications.canReply = state;\n\t\t\t\tthis._onDidUpdateCommentThread.fire();\n\t\t\t}\n\t\t}\n\t\tget canReply() {\n\t\t\treturn this._canReply;\n\t\t}\n\n\t\tprivate _label: string | undefined;\n\n\t\tget label(): string | undefined {\n\t\t\treturn this._label;\n\t\t}\n\n\t\tset label(label: string | undefined) {\n\t\t\tthis._label = label;\n\t\t\tthis.modifications.label = label;\n\t\t\tthis._onDidUpdateCommentThread.fire();\n\t\t}\n\n\t\tprivate _contextValue: string | undefined;\n\n\t\tget contextValue(): string | undefined {\n\t\t\treturn this._contextValue;\n\t\t}\n\n\t\tset contextValue(context: string | undefined) {\n\t\t\tthis._contextValue = context;\n\t\t\tthis.modifications.contextValue = context;\n\t\t\tthis._onDidUpdateCommentThread.fire();\n\t\t}\n\n\t\tget comments(): vscode.Comment[] {\n\t\t\treturn this._comments;\n\t\t}\n\n\t\tset comments(newComments: vscode.Comment[]) {\n\t\t\tthis._comments = newComments;\n\t\t\tthis.modifications.comments = newComments;\n\t\t\tthis._onDidUpdateCommentThread.fire();\n\t\t}\n\n\t\tprivate _collapseState?: vscode.CommentThreadCollapsibleState;\n\n\t\tget collapsibleState(): vscode.CommentThreadCollapsibleState {\n\t\t\treturn this._collapseState!;\n\t\t}\n\n\t\tset collapsibleState(newState: vscode.CommentThreadCollapsibleState) {\n\t\t\tthis._collapseState = newState;\n\t\t\tthis.modifications.collapsibleState = newState;\n\t\t\tthis._onDidUpdateCommentThread.fire();\n\t\t}\n\n\t\tprivate _state?:\n\t\t\t| vscode.CommentThreadState\n\t\t\t| {\n\t\t\t\t\tresolved?: vscode.CommentThreadState;\n\t\t\t\t\tapplicability?: vscode.CommentThreadApplicability;\n\t\t\t  };\n\n\t\tget state():\n\t\t\t| vscode.CommentThreadState\n\t\t\t| {\n\t\t\t\t\tresolved?: vscode.CommentThreadState;\n\t\t\t\t\tapplicability?: vscode.CommentThreadApplicability;\n\t\t\t  }\n\t\t\t| undefined {\n\t\t\treturn this._state!;\n\t\t}\n\n\t\tset state(newState:\n\t\t\t| vscode.CommentThreadState\n\t\t\t| {\n\t\t\t\t\tresolved?: vscode.CommentThreadState;\n\t\t\t\t\tapplicability?: vscode.CommentThreadApplicability;\n\t\t\t  }) {\n\t\t\tthis._state = newState;\n\t\t\tif (typeof newState === \"object\") {\n\t\t\t\tcheckProposedApiEnabled(\n\t\t\t\t\tthis.extensionDescription,\n\t\t\t\t\t\"commentThreadApplicability\",\n\t\t\t\t);\n\t\t\t\tthis.modifications.state = newState.resolved;\n\t\t\t\tthis.modifications.applicability = newState.applicability;\n\t\t\t} else {\n\t\t\t\tthis.modifications.state = newState;\n\t\t\t}\n\t\t\tthis._onDidUpdateCommentThread.fire();\n\t\t}\n\n\t\tprivate _localDisposables: types.Disposable[];\n\n\t\tprivate _isDiposed: boolean;\n\n\t\tpublic get isDisposed(): boolean {\n\t\t\treturn this._isDiposed;\n\t\t}\n\n\t\tprivate _commentsMap: Map<vscode.Comment, number> = new Map<\n\t\t\tvscode.Comment,\n\t\t\tnumber\n\t\t>();\n\n\t\tprivate readonly _acceptInputDisposables =\n\t\t\tnew MutableDisposable<DisposableStore>();\n\n\t\treadonly value: vscode.CommentThread2;\n\n\t\tconstructor(\n\t\t\tcommentControllerId: string,\n\t\t\tprivate _commentControllerHandle: number,\n\t\t\tprivate _id: string | undefined,\n\t\t\tprivate _uri: vscode.Uri,\n\t\t\tprivate _range: vscode.Range | undefined,\n\t\t\tprivate _comments: vscode.Comment[],\n\t\t\tpublic readonly extensionDescription: IExtensionDescription,\n\t\t\tprivate _isTemplate: boolean,\n\t\t\teditorId?: string,\n\t\t) {\n\t\t\tthis._acceptInputDisposables.value = new DisposableStore();\n\n\t\t\tif (this._id === undefined) {\n\t\t\t\tthis._id = `${commentControllerId}.${this.handle}`;\n\t\t\t}\n\n\t\t\tproxy.$createCommentThread(\n\t\t\t\t_commentControllerHandle,\n\t\t\t\tthis.handle,\n\t\t\t\tthis._id,\n\t\t\t\tthis._uri,\n\t\t\t\textHostTypeConverter.Range.from(this._range),\n\t\t\t\tthis._comments.map((cmt) =>\n\t\t\t\t\tconvertToDTOComment(\n\t\t\t\t\t\tthis,\n\t\t\t\t\t\tcmt,\n\t\t\t\t\t\tthis._commentsMap,\n\t\t\t\t\t\tthis.extensionDescription,\n\t\t\t\t\t),\n\t\t\t\t),\n\t\t\t\textensionDescription.identifier,\n\t\t\t\tthis._isTemplate,\n\t\t\t\teditorId,\n\t\t\t);\n\n\t\t\tthis._localDisposables = [];\n\t\t\tthis._isDiposed = false;\n\n\t\t\tthis._localDisposables.push(\n\t\t\t\tthis.onDidUpdateCommentThread(() => {\n\t\t\t\t\tthis.eventuallyUpdateCommentThread();\n\t\t\t\t}),\n\t\t\t);\n\n\t\t\tthis._localDisposables.push({\n\t\t\t\tdispose: () => {\n\t\t\t\t\tproxy.$deleteCommentThread(\n\t\t\t\t\t\t_commentControllerHandle,\n\t\t\t\t\t\tthis.handle,\n\t\t\t\t\t);\n\t\t\t\t},\n\t\t\t});\n\n\t\t\tconst that = this;\n\t\t\tthis.value = {\n\t\t\t\tget uri() {\n\t\t\t\t\treturn that.uri;\n\t\t\t\t},\n\t\t\t\tget range() {\n\t\t\t\t\treturn that.range;\n\t\t\t\t},\n\t\t\t\tset range(value: vscode.Range | undefined) {\n\t\t\t\t\tthat.range = value;\n\t\t\t\t},\n\t\t\t\tget comments() {\n\t\t\t\t\treturn that.comments;\n\t\t\t\t},\n\t\t\t\tset comments(value: vscode.Comment[]) {\n\t\t\t\t\tthat.comments = value;\n\t\t\t\t},\n\t\t\t\tget collapsibleState() {\n\t\t\t\t\treturn that.collapsibleState;\n\t\t\t\t},\n\t\t\t\tset collapsibleState(value: vscode.CommentThreadCollapsibleState) {\n\t\t\t\t\tthat.collapsibleState = value;\n\t\t\t\t},\n\t\t\t\tget canReply() {\n\t\t\t\t\treturn that.canReply;\n\t\t\t\t},\n\t\t\t\tset canReply(state: boolean) {\n\t\t\t\t\tthat.canReply = state;\n\t\t\t\t},\n\t\t\t\tget contextValue() {\n\t\t\t\t\treturn that.contextValue;\n\t\t\t\t},\n\t\t\t\tset contextValue(value: string | undefined) {\n\t\t\t\t\tthat.contextValue = value;\n\t\t\t\t},\n\t\t\t\tget label() {\n\t\t\t\t\treturn that.label;\n\t\t\t\t},\n\t\t\t\tset label(value: string | undefined) {\n\t\t\t\t\tthat.label = value;\n\t\t\t\t},\n\t\t\t\tget state():\n\t\t\t\t\t| vscode.CommentThreadState\n\t\t\t\t\t| {\n\t\t\t\t\t\t\tresolved?: vscode.CommentThreadState;\n\t\t\t\t\t\t\tapplicability?: vscode.CommentThreadApplicability;\n\t\t\t\t\t  }\n\t\t\t\t\t| undefined {\n\t\t\t\t\treturn that.state;\n\t\t\t\t},\n\t\t\t\tset state(value:\n\t\t\t\t\t| vscode.CommentThreadState\n\t\t\t\t\t| {\n\t\t\t\t\t\t\tresolved?: vscode.CommentThreadState;\n\t\t\t\t\t\t\tapplicability?: vscode.CommentThreadApplicability;\n\t\t\t\t\t  }) {\n\t\t\t\t\tthat.state = value;\n\t\t\t\t},\n\t\t\t\treveal: (\n\t\t\t\t\tcomment?:\n\t\t\t\t\t\t| vscode.Comment\n\t\t\t\t\t\t| vscode.CommentThreadRevealOptions,\n\t\t\t\t\toptions?: vscode.CommentThreadRevealOptions,\n\t\t\t\t) => that.reveal(comment, options),\n\t\t\t\thide: () => that.hide(),\n\t\t\t\tdispose: () => {\n\t\t\t\t\tthat.dispose();\n\t\t\t\t},\n\t\t\t};\n\t\t}\n\n\t\tprivate updateIsTemplate() {\n\t\t\tif (this._isTemplate) {\n\t\t\t\tthis._isTemplate = false;\n\t\t\t\tthis.modifications.isTemplate = false;\n\t\t\t}\n\t\t}\n\n\t\t@debounce(100)\n\t\teventuallyUpdateCommentThread(): void {\n\t\t\tif (this._isDiposed) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tthis.updateIsTemplate();\n\n\t\t\tif (!this._acceptInputDisposables.value) {\n\t\t\t\tthis._acceptInputDisposables.value = new DisposableStore();\n\t\t\t}\n\n\t\t\tconst modified = (\n\t\t\t\tvalue: keyof CommentThreadModification,\n\t\t\t): boolean =>\n\t\t\t\tObject.prototype.hasOwnProperty.call(this.modifications, value);\n\n\t\t\tconst formattedModifications: CommentThreadChanges = {};\n\t\t\tif (modified(\"range\")) {\n\t\t\t\tformattedModifications.range = extHostTypeConverter.Range.from(\n\t\t\t\t\tthis._range,\n\t\t\t\t);\n\t\t\t}\n\t\t\tif (modified(\"label\")) {\n\t\t\t\tformattedModifications.label = this.label;\n\t\t\t}\n\t\t\tif (modified(\"contextValue\")) {\n\t\t\t\t/*\n\t\t\t\t * null -> cleared contextValue\n\t\t\t\t * undefined -> no change\n\t\t\t\t */\n\t\t\t\tformattedModifications.contextValue = this.contextValue ?? null;\n\t\t\t}\n\t\t\tif (modified(\"comments\")) {\n\t\t\t\tformattedModifications.comments = this._comments.map((cmt) =>\n\t\t\t\t\tconvertToDTOComment(\n\t\t\t\t\t\tthis,\n\t\t\t\t\t\tcmt,\n\t\t\t\t\t\tthis._commentsMap,\n\t\t\t\t\t\tthis.extensionDescription,\n\t\t\t\t\t),\n\t\t\t\t);\n\t\t\t}\n\t\t\tif (modified(\"collapsibleState\")) {\n\t\t\t\tformattedModifications.collapseState =\n\t\t\t\t\tconvertToCollapsibleState(this._collapseState);\n\t\t\t}\n\t\t\tif (modified(\"canReply\")) {\n\t\t\t\tformattedModifications.canReply = this.canReply;\n\t\t\t}\n\t\t\tif (modified(\"state\")) {\n\t\t\t\tformattedModifications.state = convertToState(this._state);\n\t\t\t}\n\t\t\tif (modified(\"applicability\")) {\n\t\t\t\tformattedModifications.applicability = convertToRelevance(\n\t\t\t\t\tthis._state,\n\t\t\t\t);\n\t\t\t}\n\t\t\tif (modified(\"isTemplate\")) {\n\t\t\t\tformattedModifications.isTemplate = this._isTemplate;\n\t\t\t}\n\t\t\tthis.modifications = {};\n\n\t\t\tproxy.$updateCommentThread(\n\t\t\t\tthis._commentControllerHandle,\n\t\t\t\tthis.handle,\n\t\t\t\tthis._id!,\n\t\t\t\tthis._uri,\n\t\t\t\tformattedModifications,\n\t\t\t);\n\t\t}\n\n\t\tgetCommentByUniqueId(uniqueId: number): vscode.Comment | undefined {\n\t\t\tfor (const key of this._commentsMap) {\n\t\t\t\tconst comment = key[0];\n\t\t\t\tconst id = key[1];\n\t\t\t\tif (uniqueId === id) {\n\t\t\t\t\treturn comment;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn;\n\t\t}\n\n\t\tasync reveal(\n\t\t\tcommentOrOptions?:\n\t\t\t\t| vscode.Comment\n\t\t\t\t| vscode.CommentThreadRevealOptions,\n\t\t\toptions?: vscode.CommentThreadRevealOptions,\n\t\t): Promise<void> {\n\t\t\tcheckProposedApiEnabled(this.extensionDescription, \"commentReveal\");\n\t\t\tlet comment: vscode.Comment | undefined;\n\t\t\tif (\n\t\t\t\tcommentOrOptions &&\n\t\t\t\t(commentOrOptions as vscode.Comment).body !== undefined\n\t\t\t) {\n\t\t\t\tcomment = commentOrOptions as vscode.Comment;\n\t\t\t} else {\n\t\t\t\toptions =\n\t\t\t\t\toptions ??\n\t\t\t\t\t(commentOrOptions as vscode.CommentThreadRevealOptions);\n\t\t\t}\n\t\t\tlet commentToReveal = comment\n\t\t\t\t? this._commentsMap.get(comment)\n\t\t\t\t: undefined;\n\t\t\tcommentToReveal ??= this._commentsMap.get(this._comments[0])!;\n\t\t\tlet preserveFocus = true;\n\t\t\tlet focusReply = false;\n\t\t\tif (options?.focus === types.CommentThreadFocus.Reply) {\n\t\t\t\tfocusReply = true;\n\t\t\t\tpreserveFocus = false;\n\t\t\t} else if (options?.focus === types.CommentThreadFocus.Comment) {\n\t\t\t\tpreserveFocus = false;\n\t\t\t}\n\t\t\treturn proxy.$revealCommentThread(\n\t\t\t\tthis._commentControllerHandle,\n\t\t\t\tthis.handle,\n\t\t\t\tcommentToReveal,\n\t\t\t\t{ preserveFocus, focusReply },\n\t\t\t);\n\t\t}\n\n\t\tasync hide(): Promise<void> {\n\t\t\treturn proxy.$hideCommentThread(\n\t\t\t\tthis._commentControllerHandle,\n\t\t\t\tthis.handle,\n\t\t\t);\n\t\t}\n\n\t\tdispose() {\n\t\t\tthis._isDiposed = true;\n\t\t\tthis._acceptInputDisposables.dispose();\n\t\t\tthis._localDisposables.forEach((disposable) =>\n\t\t\t\tdisposable.dispose(),\n\t\t\t);\n\t\t}\n\t}\n\n\ttype ReactionHandler = (\n\t\tcomment: vscode.Comment,\n\t\treaction: vscode.CommentReaction,\n\t) => Promise<void>;\n\n\tclass ExtHostCommentController {\n\t\tget id(): string {\n\t\t\treturn this._id;\n\t\t}\n\n\t\tget label(): string {\n\t\t\treturn this._label;\n\t\t}\n\n\t\tpublic get handle(): number {\n\t\t\treturn this._handle;\n\t\t}\n\n\t\tprivate _threads: Map<number, ExtHostCommentThread> = new Map<\n\t\t\tnumber,\n\t\t\tExtHostCommentThread\n\t\t>();\n\n\t\tprivate _commentingRangeProvider?: vscode.CommentingRangeProvider;\n\t\tget commentingRangeProvider():\n\t\t\t| vscode.CommentingRangeProvider\n\t\t\t| undefined {\n\t\t\treturn this._commentingRangeProvider;\n\t\t}\n\n\t\tset commentingRangeProvider(provider:\n\t\t\t| vscode.CommentingRangeProvider\n\t\t\t| undefined) {\n\t\t\tthis._commentingRangeProvider = provider;\n\t\t\tif (provider?.resourceHints) {\n\t\t\t\tcheckProposedApiEnabled(this._extension, \"commentingRangeHint\");\n\t\t\t}\n\t\t\tproxy.$updateCommentingRanges(this.handle, provider?.resourceHints);\n\t\t}\n\n\t\tprivate _reactionHandler?: ReactionHandler;\n\n\t\tget reactionHandler(): ReactionHandler | undefined {\n\t\t\treturn this._reactionHandler;\n\t\t}\n\n\t\tset reactionHandler(handler: ReactionHandler | undefined) {\n\t\t\tthis._reactionHandler = handler;\n\n\t\t\tproxy.$updateCommentControllerFeatures(this.handle, {\n\t\t\t\treactionHandler: !!handler,\n\t\t\t});\n\t\t}\n\n\t\tprivate _options: languages.CommentOptions | undefined;\n\n\t\tget options() {\n\t\t\treturn this._options;\n\t\t}\n\n\t\tset options(options: languages.CommentOptions | undefined) {\n\t\t\tthis._options = options;\n\n\t\t\tproxy.$updateCommentControllerFeatures(this.handle, {\n\t\t\t\toptions: this._options,\n\t\t\t});\n\t\t}\n\n\t\tprivate _activeComment: vscode.Comment | undefined;\n\n\t\tget activeComment(): vscode.Comment | undefined {\n\t\t\tcheckProposedApiEnabled(this._extension, \"activeComment\");\n\t\t\treturn this._activeComment;\n\t\t}\n\n\t\tprivate _activeThread: ExtHostCommentThread | undefined;\n\n\t\tget activeCommentThread(): vscode.CommentThread2 | undefined {\n\t\t\tcheckProposedApiEnabled(this._extension, \"activeComment\");\n\t\t\treturn this._activeThread?.value;\n\t\t}\n\n\t\tprivate _localDisposables: types.Disposable[];\n\t\treadonly value: vscode.CommentController;\n\n\t\tconstructor(\n\t\t\tprivate _extension: IExtensionDescription,\n\t\t\tprivate _handle: number,\n\t\t\tprivate _id: string,\n\t\t\tprivate _label: string,\n\t\t) {\n\t\t\tproxy.$registerCommentController(\n\t\t\t\tthis.handle,\n\t\t\t\t_id,\n\t\t\t\t_label,\n\t\t\t\tthis._extension.identifier.value,\n\t\t\t);\n\n\t\t\tconst that = this;\n\t\t\tthis.value = Object.freeze({\n\t\t\t\tid: that.id,\n\t\t\t\tlabel: that.label,\n\t\t\t\tget options() {\n\t\t\t\t\treturn that.options;\n\t\t\t\t},\n\t\t\t\tset options(options: vscode.CommentOptions | undefined) {\n\t\t\t\t\tthat.options = options;\n\t\t\t\t},\n\t\t\t\tget commentingRangeProvider():\n\t\t\t\t\t| vscode.CommentingRangeProvider\n\t\t\t\t\t| undefined {\n\t\t\t\t\treturn that.commentingRangeProvider;\n\t\t\t\t},\n\t\t\t\tset commentingRangeProvider(commentingRangeProvider:\n\t\t\t\t\t| vscode.CommentingRangeProvider\n\t\t\t\t\t| undefined) {\n\t\t\t\t\tthat.commentingRangeProvider = commentingRangeProvider;\n\t\t\t\t},\n\t\t\t\tget reactionHandler(): ReactionHandler | undefined {\n\t\t\t\t\treturn that.reactionHandler;\n\t\t\t\t},\n\t\t\t\tset reactionHandler(handler: ReactionHandler | undefined) {\n\t\t\t\t\tthat.reactionHandler = handler;\n\t\t\t\t},\n\t\t\t\t// get activeComment(): vscode.Comment | undefined { return that.activeComment; },\n\t\t\t\tget activeCommentThread(): vscode.CommentThread2 | undefined {\n\t\t\t\t\treturn that.activeCommentThread;\n\t\t\t\t},\n\t\t\t\tcreateCommentThread(\n\t\t\t\t\turi: vscode.Uri,\n\t\t\t\t\trange: vscode.Range | undefined,\n\t\t\t\t\tcomments: vscode.Comment[],\n\t\t\t\t): vscode.CommentThread | vscode.CommentThread2 {\n\t\t\t\t\treturn that.createCommentThread(uri, range, comments).value;\n\t\t\t\t},\n\t\t\t\tdispose: () => {\n\t\t\t\t\tthat.dispose();\n\t\t\t\t},\n\t\t\t}) as any; // TODO @alexr00 remove this cast when the proposed API is stable\n\n\t\t\tthis._localDisposables = [];\n\t\t\tthis._localDisposables.push({\n\t\t\t\tdispose: () => {\n\t\t\t\t\tproxy.$unregisterCommentController(this.handle);\n\t\t\t\t},\n\t\t\t});\n\t\t}\n\n\t\tcreateCommentThread(\n\t\t\tresource: vscode.Uri,\n\t\t\trange: vscode.Range | undefined,\n\t\t\tcomments: vscode.Comment[],\n\t\t): ExtHostCommentThread {\n\t\t\tif (range === undefined) {\n\t\t\t\tcheckProposedApiEnabled(this._extension, \"fileComments\");\n\t\t\t}\n\t\t\tconst commentThread = new ExtHostCommentThread(\n\t\t\t\tthis.id,\n\t\t\t\tthis.handle,\n\t\t\t\tundefined,\n\t\t\t\tresource,\n\t\t\t\trange,\n\t\t\t\tcomments,\n\t\t\t\tthis._extension,\n\t\t\t\tfalse,\n\t\t\t);\n\t\t\tthis._threads.set(commentThread.handle, commentThread);\n\t\t\treturn commentThread;\n\t\t}\n\n\t\t$setActiveComment(\n\t\t\tcommentInfo:\n\t\t\t\t| { commentThreadHandle: number; uniqueIdInThread?: number }\n\t\t\t\t| undefined,\n\t\t) {\n\t\t\tif (!commentInfo) {\n\t\t\t\tthis._activeComment = undefined;\n\t\t\t\tthis._activeThread = undefined;\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst thread = this._threads.get(commentInfo.commentThreadHandle);\n\t\t\tif (thread) {\n\t\t\t\tthis._activeComment = commentInfo.uniqueIdInThread\n\t\t\t\t\t? thread.getCommentByUniqueId(commentInfo.uniqueIdInThread)\n\t\t\t\t\t: undefined;\n\t\t\t\tthis._activeThread = thread;\n\t\t\t}\n\t\t}\n\n\t\t$createCommentThreadTemplate(\n\t\t\turiComponents: UriComponents,\n\t\t\trange: IRange | undefined,\n\t\t\teditorId?: string,\n\t\t): ExtHostCommentThread {\n\t\t\tconst commentThread = new ExtHostCommentThread(\n\t\t\t\tthis.id,\n\t\t\t\tthis.handle,\n\t\t\t\tundefined,\n\t\t\t\tURI.revive(uriComponents),\n\t\t\t\textHostTypeConverter.Range.to(range),\n\t\t\t\t[],\n\t\t\t\tthis._extension,\n\t\t\t\ttrue,\n\t\t\t\teditorId,\n\t\t\t);\n\t\t\tcommentThread.collapsibleState =\n\t\t\t\tlanguages.CommentThreadCollapsibleState.Expanded;\n\t\t\tthis._threads.set(commentThread.handle, commentThread);\n\t\t\treturn commentThread;\n\t\t}\n\n\t\t$updateCommentThreadTemplate(\n\t\t\tthreadHandle: number,\n\t\t\trange: IRange,\n\t\t): void {\n\t\t\tconst thread = this._threads.get(threadHandle);\n\t\t\tif (thread) {\n\t\t\t\tthread.range = extHostTypeConverter.Range.to(range);\n\t\t\t}\n\t\t}\n\n\t\t$deleteCommentThread(threadHandle: number): void {\n\t\t\tconst thread = this._threads.get(threadHandle);\n\n\t\t\tthread?.dispose();\n\n\t\t\tthis._threads.delete(threadHandle);\n\t\t}\n\n\t\tgetCommentThread(handle: number): ExtHostCommentThread | undefined {\n\t\t\treturn this._threads.get(handle);\n\t\t}\n\n\t\tdispose(): void {\n\t\t\tthis._threads.forEach((value) => {\n\t\t\t\tvalue.dispose();\n\t\t\t});\n\n\t\t\tthis._localDisposables.forEach((disposable) =>\n\t\t\t\tdisposable.dispose(),\n\t\t\t);\n\t\t}\n\t}\n\n\tfunction convertToDTOComment(\n\t\tthread: ExtHostCommentThread,\n\t\tvscodeComment: vscode.Comment,\n\t\tcommentsMap: Map<vscode.Comment, number>,\n\t\textension: IExtensionDescription,\n\t): CommentChanges {\n\t\tlet commentUniqueId = commentsMap.get(vscodeComment)!;\n\t\tif (!commentUniqueId) {\n\t\t\tcommentUniqueId = ++thread.commentHandle;\n\t\t\tcommentsMap.set(vscodeComment, commentUniqueId);\n\t\t}\n\n\t\tif (vscodeComment.state !== undefined) {\n\t\t\tcheckProposedApiEnabled(extension, \"commentsDraftState\");\n\t\t}\n\n\t\tif (\n\t\t\tvscodeComment.reactions?.some(\n\t\t\t\t(reaction) => reaction.reactors !== undefined,\n\t\t\t)\n\t\t) {\n\t\t\tcheckProposedApiEnabled(extension, \"commentReactor\");\n\t\t}\n\n\t\treturn {\n\t\t\tmode: vscodeComment.mode,\n\t\t\tcontextValue: vscodeComment.contextValue,\n\t\t\tuniqueIdInThread: commentUniqueId,\n\t\t\tbody:\n\t\t\t\ttypeof vscodeComment.body === \"string\"\n\t\t\t\t\t? vscodeComment.body\n\t\t\t\t\t: extHostTypeConverter.MarkdownString.from(\n\t\t\t\t\t\t\tvscodeComment.body,\n\t\t\t\t\t\t),\n\t\t\tuserName: vscodeComment.author.name,\n\t\t\tuserIconPath: vscodeComment.author.iconPath,\n\t\t\tlabel: vscodeComment.label,\n\t\t\tcommentReactions: vscodeComment.reactions\n\t\t\t\t? vscodeComment.reactions.map((reaction) =>\n\t\t\t\t\t\tconvertToReaction(reaction),\n\t\t\t\t\t)\n\t\t\t\t: undefined,\n\t\t\tstate: vscodeComment.state,\n\t\t\ttimestamp: vscodeComment.timestamp?.toJSON(),\n\t\t};\n\t}\n\n\tfunction convertToReaction(\n\t\treaction: vscode.CommentReaction,\n\t): languages.CommentReaction {\n\t\treturn {\n\t\t\tlabel: reaction.label,\n\t\t\ticonPath: reaction.iconPath\n\t\t\t\t? extHostTypeConverter.pathOrURIToURI(reaction.iconPath)\n\t\t\t\t: undefined,\n\t\t\tcount: reaction.count,\n\t\t\thasReacted: reaction.authorHasReacted,\n\t\t\treactors: (reaction.reactors &&\n\t\t\treaction.reactors.length > 0 &&\n\t\t\ttypeof reaction.reactors[0] !== \"string\"\n\t\t\t\t? (\n\t\t\t\t\t\treaction.reactors as languages.CommentAuthorInformation[]\n\t\t\t\t\t).map((reactor) => reactor.name)\n\t\t\t\t: reaction.reactors) as string[],\n\t\t};\n\t}\n\n\tfunction convertFromReaction(\n\t\treaction: languages.CommentReaction,\n\t): vscode.CommentReaction {\n\t\treturn {\n\t\t\tlabel: reaction.label || \"\",\n\t\t\tcount: reaction.count || 0,\n\t\t\ticonPath: reaction.iconPath ? URI.revive(reaction.iconPath) : \"\",\n\t\t\tauthorHasReacted: reaction.hasReacted || false,\n\t\t\treactors: reaction.reactors?.map((reactor) => ({ name: reactor })),\n\t\t};\n\t}\n\n\tfunction convertToCollapsibleState(\n\t\tkind: vscode.CommentThreadCollapsibleState | undefined,\n\t): languages.CommentThreadCollapsibleState {\n\t\tif (kind !== undefined) {\n\t\t\tswitch (kind) {\n\t\t\t\tcase types.CommentThreadCollapsibleState.Expanded:\n\t\t\t\t\treturn languages.CommentThreadCollapsibleState.Expanded;\n\t\t\t\tcase types.CommentThreadCollapsibleState.Collapsed:\n\t\t\t\t\treturn languages.CommentThreadCollapsibleState.Collapsed;\n\t\t\t}\n\t\t}\n\t\treturn languages.CommentThreadCollapsibleState.Collapsed;\n\t}\n\n\tfunction convertToState(\n\t\tkind:\n\t\t\t| vscode.CommentThreadState\n\t\t\t| {\n\t\t\t\t\tresolved?: vscode.CommentThreadState;\n\t\t\t\t\tapplicability?: vscode.CommentThreadApplicability;\n\t\t\t  }\n\t\t\t| undefined,\n\t): languages.CommentThreadState {\n\t\tlet resolvedKind: vscode.CommentThreadState | undefined;\n\t\tif (typeof kind === \"object\") {\n\t\t\tresolvedKind = kind.resolved;\n\t\t} else {\n\t\t\tresolvedKind = kind;\n\t\t}\n\n\t\tif (resolvedKind !== undefined) {\n\t\t\tswitch (resolvedKind) {\n\t\t\t\tcase types.CommentThreadState.Unresolved:\n\t\t\t\t\treturn languages.CommentThreadState.Unresolved;\n\t\t\t\tcase types.CommentThreadState.Resolved:\n\t\t\t\t\treturn languages.CommentThreadState.Resolved;\n\t\t\t}\n\t\t}\n\t\treturn languages.CommentThreadState.Unresolved;\n\t}\n\n\tfunction convertToRelevance(\n\t\tkind:\n\t\t\t| vscode.CommentThreadState\n\t\t\t| {\n\t\t\t\t\tresolved?: vscode.CommentThreadState;\n\t\t\t\t\tapplicability?: vscode.CommentThreadApplicability;\n\t\t\t  }\n\t\t\t| undefined,\n\t): languages.CommentThreadApplicability {\n\t\tlet applicabilityKind: vscode.CommentThreadApplicability | undefined;\n\t\tif (typeof kind === \"object\") {\n\t\t\tapplicabilityKind = kind.applicability;\n\t\t}\n\n\t\tif (applicabilityKind !== undefined) {\n\t\t\tswitch (applicabilityKind) {\n\t\t\t\tcase types.CommentThreadApplicability.Current:\n\t\t\t\t\treturn languages.CommentThreadApplicability.Current;\n\t\t\t\tcase types.CommentThreadApplicability.Outdated:\n\t\t\t\t\treturn languages.CommentThreadApplicability.Outdated;\n\t\t\t}\n\t\t}\n\t\treturn languages.CommentThreadApplicability.Current;\n\t}\n\n\treturn new ExtHostCommentsImpl();\n}\n"],
  "mappings": "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",
  "names": []
}
