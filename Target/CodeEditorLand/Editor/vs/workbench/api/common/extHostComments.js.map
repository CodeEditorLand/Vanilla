{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/api/common/extHostComments.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { asPromise } from '../../../base/common/async.js';\nimport { CancellationToken } from '../../../base/common/cancellation.js';\nimport { debounce } from '../../../base/common/decorators.js';\nimport { Emitter } from '../../../base/common/event.js';\nimport { DisposableStore, MutableDisposable } from '../../../base/common/lifecycle.js';\nimport { MarshalledId } from '../../../base/common/marshallingIds.js';\nimport { URI, UriComponents } from '../../../base/common/uri.js';\nimport { IRange } from '../../../editor/common/core/range.js';\nimport * as languages from '../../../editor/common/languages.js';\nimport { ExtensionIdentifierMap, IExtensionDescription } from '../../../platform/extensions/common/extensions.js';\nimport { ExtHostDocuments } from './extHostDocuments.js';\nimport * as extHostTypeConverter from './extHostTypeConverters.js';\nimport * as types from './extHostTypes.js';\nimport type * as vscode from 'vscode';\nimport { ExtHostCommentsShape, IMainContext, MainContext, CommentThreadChanges, CommentChanges } from './extHost.protocol.js';\nimport { ExtHostCommands } from './extHostCommands.js';\nimport { checkProposedApiEnabled } from '../../services/extensions/common/extensions.js';\nimport { MarshalledCommentThread } from '../../common/comments.js';\n\ntype ProviderHandle = number;\n\ninterface ExtHostComments {\n\tcreateCommentController(extension: IExtensionDescription, id: string, label: string): vscode.CommentController;\n}\n\nexport function createExtHostComments(mainContext: IMainContext, commands: ExtHostCommands, documents: ExtHostDocuments): ExtHostCommentsShape & ExtHostComments {\n\tconst proxy = mainContext.getProxy(MainContext.MainThreadComments);\n\n\tclass ExtHostCommentsImpl implements ExtHostCommentsShape, ExtHostComments {\n\n\t\tprivate static handlePool = 0;\n\n\n\t\tprivate _commentControllers: Map<ProviderHandle, ExtHostCommentController> = new Map<ProviderHandle, ExtHostCommentController>();\n\n\t\tprivate _commentControllersByExtension: ExtensionIdentifierMap<ExtHostCommentController[]> = new ExtensionIdentifierMap<ExtHostCommentController[]>();\n\n\n\t\tconstructor(\n\t\t) {\n\t\t\tcommands.registerArgumentProcessor({\n\t\t\t\tprocessArgument: arg => {\n\t\t\t\t\tif (arg && arg.$mid === MarshalledId.CommentController) {\n\t\t\t\t\t\tconst commentController = this._commentControllers.get(arg.handle);\n\n\t\t\t\t\t\tif (!commentController) {\n\t\t\t\t\t\t\treturn arg;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn commentController.value;\n\t\t\t\t\t} else if (arg && arg.$mid === MarshalledId.CommentThread) {\n\t\t\t\t\t\tconst marshalledCommentThread: MarshalledCommentThread = arg;\n\t\t\t\t\t\tconst commentController = this._commentControllers.get(marshalledCommentThread.commentControlHandle);\n\n\t\t\t\t\t\tif (!commentController) {\n\t\t\t\t\t\t\treturn marshalledCommentThread;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst commentThread = commentController.getCommentThread(marshalledCommentThread.commentThreadHandle);\n\n\t\t\t\t\t\tif (!commentThread) {\n\t\t\t\t\t\t\treturn marshalledCommentThread;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn commentThread.value;\n\t\t\t\t\t} else if (arg && (arg.$mid === MarshalledId.CommentThreadReply || arg.$mid === MarshalledId.CommentThreadInstance)) {\n\t\t\t\t\t\tconst commentController = this._commentControllers.get(arg.thread.commentControlHandle);\n\n\t\t\t\t\t\tif (!commentController) {\n\t\t\t\t\t\t\treturn arg;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst commentThread = commentController.getCommentThread(arg.thread.commentThreadHandle);\n\n\t\t\t\t\t\tif (!commentThread) {\n\t\t\t\t\t\t\treturn arg;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (arg.$mid === MarshalledId.CommentThreadInstance) {\n\t\t\t\t\t\t\treturn commentThread.value;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\tthread: commentThread.value,\n\t\t\t\t\t\t\ttext: arg.text\n\t\t\t\t\t\t};\n\t\t\t\t\t} else if (arg && arg.$mid === MarshalledId.CommentNode) {\n\t\t\t\t\t\tconst commentController = this._commentControllers.get(arg.thread.commentControlHandle);\n\n\t\t\t\t\t\tif (!commentController) {\n\t\t\t\t\t\t\treturn arg;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst commentThread = commentController.getCommentThread(arg.thread.commentThreadHandle);\n\n\t\t\t\t\t\tif (!commentThread) {\n\t\t\t\t\t\t\treturn arg;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst commentUniqueId = arg.commentUniqueId;\n\n\t\t\t\t\t\tconst comment = commentThread.getCommentByUniqueId(commentUniqueId);\n\n\t\t\t\t\t\tif (!comment) {\n\t\t\t\t\t\t\treturn arg;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn comment;\n\n\t\t\t\t\t} else if (arg && arg.$mid === MarshalledId.CommentThreadNode) {\n\t\t\t\t\t\tconst commentController = this._commentControllers.get(arg.thread.commentControlHandle);\n\n\t\t\t\t\t\tif (!commentController) {\n\t\t\t\t\t\t\treturn arg;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst commentThread = commentController.getCommentThread(arg.thread.commentThreadHandle);\n\n\t\t\t\t\t\tif (!commentThread) {\n\t\t\t\t\t\t\treturn arg;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst body: string = arg.text;\n\t\t\t\t\t\tconst commentUniqueId = arg.commentUniqueId;\n\n\t\t\t\t\t\tconst comment = commentThread.getCommentByUniqueId(commentUniqueId);\n\n\t\t\t\t\t\tif (!comment) {\n\t\t\t\t\t\t\treturn arg;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// If the old comment body was a markdown string, use a markdown string here too.\n\t\t\t\t\t\tif (typeof comment.body === 'string') {\n\t\t\t\t\t\t\tcomment.body = body;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tcomment.body = new types.MarkdownString(body);\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn comment;\n\t\t\t\t\t}\n\n\t\t\t\t\treturn arg;\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\tcreateCommentController(extension: IExtensionDescription, id: string, label: string): vscode.CommentController {\n\t\t\tconst handle = ExtHostCommentsImpl.handlePool++;\n\t\t\tconst commentController = new ExtHostCommentController(extension, handle, id, label);\n\t\t\tthis._commentControllers.set(commentController.handle, commentController);\n\n\t\t\tconst commentControllers = this._commentControllersByExtension.get(extension.identifier) || [];\n\t\t\tcommentControllers.push(commentController);\n\t\t\tthis._commentControllersByExtension.set(extension.identifier, commentControllers);\n\n\t\t\treturn commentController.value;\n\t\t}\n\n\t\tasync $createCommentThreadTemplate(commentControllerHandle: number, uriComponents: UriComponents, range: IRange | undefined, editorId?: string): Promise<void> {\n\t\t\tconst commentController = this._commentControllers.get(commentControllerHandle);\n\n\t\t\tif (!commentController) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tcommentController.$createCommentThreadTemplate(uriComponents, range, editorId);\n\t\t}\n\n\t\tasync $setActiveComment(controllerHandle: number, commentInfo: { commentThreadHandle: number; uniqueIdInThread?: number }): Promise<void> {\n\t\t\tconst commentController = this._commentControllers.get(controllerHandle);\n\n\t\t\tif (!commentController) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tcommentController.$setActiveComment(commentInfo ?? undefined);\n\t\t}\n\n\t\tasync $updateCommentThreadTemplate(commentControllerHandle: number, threadHandle: number, range: IRange) {\n\t\t\tconst commentController = this._commentControllers.get(commentControllerHandle);\n\n\t\t\tif (!commentController) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tcommentController.$updateCommentThreadTemplate(threadHandle, range);\n\t\t}\n\n\t\t$deleteCommentThread(commentControllerHandle: number, commentThreadHandle: number) {\n\t\t\tconst commentController = this._commentControllers.get(commentControllerHandle);\n\n\t\t\tcommentController?.$deleteCommentThread(commentThreadHandle);\n\t\t}\n\n\t\tasync $provideCommentingRanges(commentControllerHandle: number, uriComponents: UriComponents, token: CancellationToken): Promise<{ ranges: IRange[]; fileComments: boolean } | undefined> {\n\t\t\tconst commentController = this._commentControllers.get(commentControllerHandle);\n\n\t\t\tif (!commentController || !commentController.commentingRangeProvider) {\n\t\t\t\treturn Promise.resolve(undefined);\n\t\t\t}\n\n\t\t\tconst document = await documents.ensureDocumentData(URI.revive(uriComponents));\n\t\t\treturn asPromise(async () => {\n\t\t\t\tconst rangesResult = await (commentController.commentingRangeProvider as vscode.CommentingRangeProvider2).provideCommentingRanges(document.document, token);\n\t\t\t\tlet ranges: { ranges: vscode.Range[]; fileComments: boolean } | undefined;\n\t\t\t\tif (Array.isArray(rangesResult)) {\n\t\t\t\t\tranges = {\n\t\t\t\t\t\tranges: rangesResult,\n\t\t\t\t\t\tfileComments: false\n\t\t\t\t\t};\n\t\t\t\t} else if (rangesResult) {\n\t\t\t\t\tranges = {\n\t\t\t\t\t\tranges: rangesResult.ranges || [],\n\t\t\t\t\t\tfileComments: rangesResult.enableFileComments || false\n\t\t\t\t\t};\n\t\t\t\t} else {\n\t\t\t\t\tranges = rangesResult ?? undefined;\n\t\t\t\t}\n\t\t\t\treturn ranges;\n\t\t\t}).then(ranges => {\n\t\t\t\tlet convertedResult: { ranges: IRange[]; fileComments: boolean } | undefined = undefined;\n\t\t\t\tif (ranges) {\n\t\t\t\t\tconvertedResult = {\n\t\t\t\t\t\tranges: ranges.ranges.map(x => extHostTypeConverter.Range.from(x)),\n\t\t\t\t\t\tfileComments: ranges.fileComments\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t\treturn convertedResult;\n\t\t\t});\n\t\t}\n\n\t\t$toggleReaction(commentControllerHandle: number, threadHandle: number, uri: UriComponents, comment: languages.Comment, reaction: languages.CommentReaction): Promise<void> {\n\t\t\tconst commentController = this._commentControllers.get(commentControllerHandle);\n\n\t\t\tif (!commentController || !commentController.reactionHandler) {\n\t\t\t\treturn Promise.resolve(undefined);\n\t\t\t}\n\n\t\t\treturn asPromise(() => {\n\t\t\t\tconst commentThread = commentController.getCommentThread(threadHandle);\n\t\t\t\tif (commentThread) {\n\t\t\t\t\tconst vscodeComment = commentThread.getCommentByUniqueId(comment.uniqueIdInThread);\n\n\t\t\t\t\tif (commentController !== undefined && vscodeComment) {\n\t\t\t\t\t\tif (commentController.reactionHandler) {\n\t\t\t\t\t\t\treturn commentController.reactionHandler(vscodeComment, convertFromReaction(reaction));\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn Promise.resolve(undefined);\n\t\t\t});\n\t\t}\n\t}\n\ttype CommentThreadModification = Partial<{\n\t\trange: vscode.Range;\n\t\tlabel: string | undefined;\n\t\tcontextValue: string | undefined;\n\t\tcomments: vscode.Comment[];\n\t\tcollapsibleState: vscode.CommentThreadCollapsibleState;\n\t\tcanReply: boolean;\n\t\tstate: vscode.CommentThreadState;\n\t\tisTemplate: boolean;\n\t\tapplicability: vscode.CommentThreadApplicability;\n\t}>;\n\n\tclass ExtHostCommentThread implements vscode.CommentThread2 {\n\t\tprivate static _handlePool: number = 0;\n\t\treadonly handle = ExtHostCommentThread._handlePool++;\n\t\tpublic commentHandle: number = 0;\n\n\t\tprivate modifications: CommentThreadModification = Object.create(null);\n\n\t\tset threadId(id: string) {\n\t\t\tthis._id = id;\n\t\t}\n\n\t\tget threadId(): string {\n\t\t\treturn this._id!;\n\t\t}\n\n\t\tget id(): string {\n\t\t\treturn this._id!;\n\t\t}\n\n\t\tget resource(): vscode.Uri {\n\t\t\treturn this._uri;\n\t\t}\n\n\t\tget uri(): vscode.Uri {\n\t\t\treturn this._uri;\n\t\t}\n\n\t\tprivate readonly _onDidUpdateCommentThread = new Emitter<void>();\n\t\treadonly onDidUpdateCommentThread = this._onDidUpdateCommentThread.event;\n\n\t\tset range(range: vscode.Range | undefined) {\n\t\t\tif (((range === undefined) !== (this._range === undefined)) || (!range || !this._range || !range.isEqual(this._range))) {\n\t\t\t\tthis._range = range;\n\t\t\t\tthis.modifications.range = range;\n\t\t\t\tthis._onDidUpdateCommentThread.fire();\n\t\t\t}\n\t\t}\n\n\t\tget range(): vscode.Range | undefined {\n\t\t\treturn this._range;\n\t\t}\n\n\t\tprivate _canReply: boolean = true;\n\n\t\tset canReply(state: boolean) {\n\t\t\tif (this._canReply !== state) {\n\t\t\t\tthis._canReply = state;\n\t\t\t\tthis.modifications.canReply = state;\n\t\t\t\tthis._onDidUpdateCommentThread.fire();\n\t\t\t}\n\t\t}\n\t\tget canReply() {\n\t\t\treturn this._canReply;\n\t\t}\n\n\t\tprivate _label: string | undefined;\n\n\t\tget label(): string | undefined {\n\t\t\treturn this._label;\n\t\t}\n\n\t\tset label(label: string | undefined) {\n\t\t\tthis._label = label;\n\t\t\tthis.modifications.label = label;\n\t\t\tthis._onDidUpdateCommentThread.fire();\n\t\t}\n\n\t\tprivate _contextValue: string | undefined;\n\n\t\tget contextValue(): string | undefined {\n\t\t\treturn this._contextValue;\n\t\t}\n\n\t\tset contextValue(context: string | undefined) {\n\t\t\tthis._contextValue = context;\n\t\t\tthis.modifications.contextValue = context;\n\t\t\tthis._onDidUpdateCommentThread.fire();\n\t\t}\n\n\t\tget comments(): vscode.Comment[] {\n\t\t\treturn this._comments;\n\t\t}\n\n\t\tset comments(newComments: vscode.Comment[]) {\n\t\t\tthis._comments = newComments;\n\t\t\tthis.modifications.comments = newComments;\n\t\t\tthis._onDidUpdateCommentThread.fire();\n\t\t}\n\n\t\tprivate _collapseState?: vscode.CommentThreadCollapsibleState;\n\n\t\tget collapsibleState(): vscode.CommentThreadCollapsibleState {\n\t\t\treturn this._collapseState!;\n\t\t}\n\n\t\tset collapsibleState(newState: vscode.CommentThreadCollapsibleState) {\n\t\t\tthis._collapseState = newState;\n\t\t\tthis.modifications.collapsibleState = newState;\n\t\t\tthis._onDidUpdateCommentThread.fire();\n\t\t}\n\n\t\tprivate _state?: vscode.CommentThreadState | { resolved?: vscode.CommentThreadState; applicability?: vscode.CommentThreadApplicability };\n\n\t\tget state(): vscode.CommentThreadState | { resolved?: vscode.CommentThreadState; applicability?: vscode.CommentThreadApplicability } | undefined {\n\t\t\treturn this._state!;\n\t\t}\n\n\t\tset state(newState: vscode.CommentThreadState | { resolved?: vscode.CommentThreadState; applicability?: vscode.CommentThreadApplicability }) {\n\t\t\tthis._state = newState;\n\t\t\tif (typeof newState === 'object') {\n\t\t\t\tcheckProposedApiEnabled(this.extensionDescription, 'commentThreadApplicability');\n\t\t\t\tthis.modifications.state = newState.resolved;\n\t\t\t\tthis.modifications.applicability = newState.applicability;\n\t\t\t} else {\n\t\t\t\tthis.modifications.state = newState;\n\t\t\t}\n\t\t\tthis._onDidUpdateCommentThread.fire();\n\t\t}\n\n\t\tprivate _localDisposables: types.Disposable[];\n\n\t\tprivate _isDiposed: boolean;\n\n\t\tpublic get isDisposed(): boolean {\n\t\t\treturn this._isDiposed;\n\t\t}\n\n\t\tprivate _commentsMap: Map<vscode.Comment, number> = new Map<vscode.Comment, number>();\n\n\t\tprivate readonly _acceptInputDisposables = new MutableDisposable<DisposableStore>();\n\n\t\treadonly value: vscode.CommentThread2;\n\n\t\tconstructor(\n\t\t\tcommentControllerId: string,\n\t\t\tprivate _commentControllerHandle: number,\n\t\t\tprivate _id: string | undefined,\n\t\t\tprivate _uri: vscode.Uri,\n\t\t\tprivate _range: vscode.Range | undefined,\n\t\t\tprivate _comments: vscode.Comment[],\n\t\t\tpublic readonly extensionDescription: IExtensionDescription,\n\t\t\tprivate _isTemplate: boolean,\n\t\t\teditorId?: string\n\t\t) {\n\t\t\tthis._acceptInputDisposables.value = new DisposableStore();\n\n\t\t\tif (this._id === undefined) {\n\t\t\t\tthis._id = `${commentControllerId}.${this.handle}`;\n\t\t\t}\n\n\t\t\tproxy.$createCommentThread(\n\t\t\t\t_commentControllerHandle,\n\t\t\t\tthis.handle,\n\t\t\t\tthis._id,\n\t\t\t\tthis._uri,\n\t\t\t\textHostTypeConverter.Range.from(this._range),\n\t\t\t\tthis._comments.map(cmt => convertToDTOComment(this, cmt, this._commentsMap, this.extensionDescription)),\n\t\t\t\textensionDescription.identifier,\n\t\t\t\tthis._isTemplate,\n\t\t\t\teditorId\n\t\t\t);\n\n\t\t\tthis._localDisposables = [];\n\t\t\tthis._isDiposed = false;\n\n\t\t\tthis._localDisposables.push(this.onDidUpdateCommentThread(() => {\n\t\t\t\tthis.eventuallyUpdateCommentThread();\n\t\t\t}));\n\n\t\t\tthis._localDisposables.push({\n\t\t\t\tdispose: () => {\n\t\t\t\t\tproxy.$deleteCommentThread(\n\t\t\t\t\t\t_commentControllerHandle,\n\t\t\t\t\t\tthis.handle\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tconst that = this;\n\t\t\tthis.value = {\n\t\t\t\tget uri() { return that.uri; },\n\t\t\t\tget range() { return that.range; },\n\t\t\t\tset range(value: vscode.Range | undefined) { that.range = value; },\n\t\t\t\tget comments() { return that.comments; },\n\t\t\t\tset comments(value: vscode.Comment[]) { that.comments = value; },\n\t\t\t\tget collapsibleState() { return that.collapsibleState; },\n\t\t\t\tset collapsibleState(value: vscode.CommentThreadCollapsibleState) { that.collapsibleState = value; },\n\t\t\t\tget canReply() { return that.canReply; },\n\t\t\t\tset canReply(state: boolean) { that.canReply = state; },\n\t\t\t\tget contextValue() { return that.contextValue; },\n\t\t\t\tset contextValue(value: string | undefined) { that.contextValue = value; },\n\t\t\t\tget label() { return that.label; },\n\t\t\t\tset label(value: string | undefined) { that.label = value; },\n\t\t\t\tget state(): vscode.CommentThreadState | { resolved?: vscode.CommentThreadState; applicability?: vscode.CommentThreadApplicability } | undefined { return that.state; },\n\t\t\t\tset state(value: vscode.CommentThreadState | { resolved?: vscode.CommentThreadState; applicability?: vscode.CommentThreadApplicability }) { that.state = value; },\n\t\t\t\treveal: (comment?: vscode.Comment | vscode.CommentThreadRevealOptions, options?: vscode.CommentThreadRevealOptions) => that.reveal(comment, options),\n\t\t\t\thide: () => that.hide(),\n\t\t\t\tdispose: () => {\n\t\t\t\t\tthat.dispose();\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\n\t\tprivate updateIsTemplate() {\n\t\t\tif (this._isTemplate) {\n\t\t\t\tthis._isTemplate = false;\n\t\t\t\tthis.modifications.isTemplate = false;\n\t\t\t}\n\t\t}\n\n\t\t@debounce(100)\n\t\teventuallyUpdateCommentThread(): void {\n\t\t\tif (this._isDiposed) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tthis.updateIsTemplate();\n\n\t\t\tif (!this._acceptInputDisposables.value) {\n\t\t\t\tthis._acceptInputDisposables.value = new DisposableStore();\n\t\t\t}\n\n\t\t\tconst modified = (value: keyof CommentThreadModification): boolean =>\n\t\t\t\tObject.prototype.hasOwnProperty.call(this.modifications, value);\n\n\t\t\tconst formattedModifications: CommentThreadChanges = {};\n\t\t\tif (modified('range')) {\n\t\t\t\tformattedModifications.range = extHostTypeConverter.Range.from(this._range);\n\t\t\t}\n\t\t\tif (modified('label')) {\n\t\t\t\tformattedModifications.label = this.label;\n\t\t\t}\n\t\t\tif (modified('contextValue')) {\n\t\t\t\t/*\n\t\t\t\t * null -> cleared contextValue\n\t\t\t\t * undefined -> no change\n\t\t\t\t */\n\t\t\t\tformattedModifications.contextValue = this.contextValue ?? null;\n\t\t\t}\n\t\t\tif (modified('comments')) {\n\t\t\t\tformattedModifications.comments =\n\t\t\t\t\tthis._comments.map(cmt => convertToDTOComment(this, cmt, this._commentsMap, this.extensionDescription));\n\t\t\t}\n\t\t\tif (modified('collapsibleState')) {\n\t\t\t\tformattedModifications.collapseState = convertToCollapsibleState(this._collapseState);\n\t\t\t}\n\t\t\tif (modified('canReply')) {\n\t\t\t\tformattedModifications.canReply = this.canReply;\n\t\t\t}\n\t\t\tif (modified('state')) {\n\t\t\t\tformattedModifications.state = convertToState(this._state);\n\t\t\t}\n\t\t\tif (modified('applicability')) {\n\t\t\t\tformattedModifications.applicability = convertToRelevance(this._state);\n\t\t\t}\n\t\t\tif (modified('isTemplate')) {\n\t\t\t\tformattedModifications.isTemplate = this._isTemplate;\n\t\t\t}\n\t\t\tthis.modifications = {};\n\n\t\t\tproxy.$updateCommentThread(\n\t\t\t\tthis._commentControllerHandle,\n\t\t\t\tthis.handle,\n\t\t\t\tthis._id!,\n\t\t\t\tthis._uri,\n\t\t\t\tformattedModifications\n\t\t\t);\n\t\t}\n\n\t\tgetCommentByUniqueId(uniqueId: number): vscode.Comment | undefined {\n\t\t\tfor (const key of this._commentsMap) {\n\t\t\t\tconst comment = key[0];\n\t\t\t\tconst id = key[1];\n\t\t\t\tif (uniqueId === id) {\n\t\t\t\t\treturn comment;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn;\n\t\t}\n\n\t\tasync reveal(commentOrOptions?: vscode.Comment | vscode.CommentThreadRevealOptions, options?: vscode.CommentThreadRevealOptions): Promise<void> {\n\t\t\tcheckProposedApiEnabled(this.extensionDescription, 'commentReveal');\n\t\t\tlet comment: vscode.Comment | undefined;\n\t\t\tif (commentOrOptions && (commentOrOptions as vscode.Comment).body !== undefined) {\n\t\t\t\tcomment = commentOrOptions as vscode.Comment;\n\t\t\t} else {\n\t\t\t\toptions = options ?? commentOrOptions as vscode.CommentThreadRevealOptions;\n\t\t\t}\n\t\t\tlet commentToReveal = comment ? this._commentsMap.get(comment) : undefined;\n\t\t\tcommentToReveal ??= this._commentsMap.get(this._comments[0])!;\n\t\t\tlet preserveFocus: boolean = true;\n\t\t\tlet focusReply: boolean = false;\n\t\t\tif (options?.focus === types.CommentThreadFocus.Reply) {\n\t\t\t\tfocusReply = true;\n\t\t\t\tpreserveFocus = false;\n\t\t\t} else if (options?.focus === types.CommentThreadFocus.Comment) {\n\t\t\t\tpreserveFocus = false;\n\t\t\t}\n\t\t\treturn proxy.$revealCommentThread(this._commentControllerHandle, this.handle, commentToReveal, { preserveFocus, focusReply });\n\t\t}\n\n\t\tasync hide(): Promise<void> {\n\t\t\treturn proxy.$hideCommentThread(this._commentControllerHandle, this.handle);\n\t\t}\n\n\t\tdispose() {\n\t\t\tthis._isDiposed = true;\n\t\t\tthis._acceptInputDisposables.dispose();\n\t\t\tthis._localDisposables.forEach(disposable => disposable.dispose());\n\t\t}\n\t}\n\n\ttype ReactionHandler = (comment: vscode.Comment, reaction: vscode.CommentReaction) => Promise<void>;\n\n\tclass ExtHostCommentController {\n\t\tget id(): string {\n\t\t\treturn this._id;\n\t\t}\n\n\t\tget label(): string {\n\t\t\treturn this._label;\n\t\t}\n\n\t\tpublic get handle(): number {\n\t\t\treturn this._handle;\n\t\t}\n\n\t\tprivate _threads: Map<number, ExtHostCommentThread> = new Map<number, ExtHostCommentThread>();\n\n\t\tprivate _commentingRangeProvider?: vscode.CommentingRangeProvider;\n\t\tget commentingRangeProvider(): vscode.CommentingRangeProvider | undefined {\n\t\t\treturn this._commentingRangeProvider;\n\t\t}\n\n\t\tset commentingRangeProvider(provider: vscode.CommentingRangeProvider | undefined) {\n\t\t\tthis._commentingRangeProvider = provider;\n\t\t\tif (provider?.resourceHints) {\n\t\t\t\tcheckProposedApiEnabled(this._extension, 'commentingRangeHint');\n\t\t\t}\n\t\t\tproxy.$updateCommentingRanges(this.handle, provider?.resourceHints);\n\t\t}\n\n\t\tprivate _reactionHandler?: ReactionHandler;\n\n\t\tget reactionHandler(): ReactionHandler | undefined {\n\t\t\treturn this._reactionHandler;\n\t\t}\n\n\t\tset reactionHandler(handler: ReactionHandler | undefined) {\n\t\t\tthis._reactionHandler = handler;\n\n\t\t\tproxy.$updateCommentControllerFeatures(this.handle, { reactionHandler: !!handler });\n\t\t}\n\n\t\tprivate _options: languages.CommentOptions | undefined;\n\n\t\tget options() {\n\t\t\treturn this._options;\n\t\t}\n\n\t\tset options(options: languages.CommentOptions | undefined) {\n\t\t\tthis._options = options;\n\n\t\t\tproxy.$updateCommentControllerFeatures(this.handle, { options: this._options });\n\t\t}\n\n\t\tprivate _activeComment: vscode.Comment | undefined;\n\n\t\tget activeComment(): vscode.Comment | undefined {\n\t\t\tcheckProposedApiEnabled(this._extension, 'activeComment');\n\t\t\treturn this._activeComment;\n\t\t}\n\n\t\tprivate _activeThread: ExtHostCommentThread | undefined;\n\n\t\tget activeCommentThread(): vscode.CommentThread2 | undefined {\n\t\t\tcheckProposedApiEnabled(this._extension, 'activeComment');\n\t\t\treturn this._activeThread?.value;\n\t\t}\n\n\t\tprivate _localDisposables: types.Disposable[];\n\t\treadonly value: vscode.CommentController;\n\n\t\tconstructor(\n\t\t\tprivate _extension: IExtensionDescription,\n\t\t\tprivate _handle: number,\n\t\t\tprivate _id: string,\n\t\t\tprivate _label: string\n\t\t) {\n\t\t\tproxy.$registerCommentController(this.handle, _id, _label, this._extension.identifier.value);\n\n\t\t\tconst that = this;\n\t\t\tthis.value = Object.freeze({\n\t\t\t\tid: that.id,\n\t\t\t\tlabel: that.label,\n\t\t\t\tget options() { return that.options; },\n\t\t\t\tset options(options: vscode.CommentOptions | undefined) { that.options = options; },\n\t\t\t\tget commentingRangeProvider(): vscode.CommentingRangeProvider | undefined { return that.commentingRangeProvider; },\n\t\t\t\tset commentingRangeProvider(commentingRangeProvider: vscode.CommentingRangeProvider | undefined) { that.commentingRangeProvider = commentingRangeProvider; },\n\t\t\t\tget reactionHandler(): ReactionHandler | undefined { return that.reactionHandler; },\n\t\t\t\tset reactionHandler(handler: ReactionHandler | undefined) { that.reactionHandler = handler; },\n\t\t\t\t// get activeComment(): vscode.Comment | undefined { return that.activeComment; },\n\t\t\t\tget activeCommentThread(): vscode.CommentThread2 | undefined { return that.activeCommentThread; },\n\t\t\t\tcreateCommentThread(uri: vscode.Uri, range: vscode.Range | undefined, comments: vscode.Comment[]): vscode.CommentThread | vscode.CommentThread2 {\n\t\t\t\t\treturn that.createCommentThread(uri, range, comments).value;\n\t\t\t\t},\n\t\t\t\tdispose: () => { that.dispose(); },\n\t\t\t}) as any; // TODO @alexr00 remove this cast when the proposed API is stable\n\n\t\t\tthis._localDisposables = [];\n\t\t\tthis._localDisposables.push({\n\t\t\t\tdispose: () => {\n\t\t\t\t\tproxy.$unregisterCommentController(this.handle);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\tcreateCommentThread(resource: vscode.Uri, range: vscode.Range | undefined, comments: vscode.Comment[]): ExtHostCommentThread {\n\t\t\tif (range === undefined) {\n\t\t\t\tcheckProposedApiEnabled(this._extension, 'fileComments');\n\t\t\t}\n\t\t\tconst commentThread = new ExtHostCommentThread(this.id, this.handle, undefined, resource, range, comments, this._extension, false);\n\t\t\tthis._threads.set(commentThread.handle, commentThread);\n\t\t\treturn commentThread;\n\t\t}\n\n\t\t$setActiveComment(commentInfo: { commentThreadHandle: number; uniqueIdInThread?: number } | undefined) {\n\t\t\tif (!commentInfo) {\n\t\t\t\tthis._activeComment = undefined;\n\t\t\t\tthis._activeThread = undefined;\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst thread = this._threads.get(commentInfo.commentThreadHandle);\n\t\t\tif (thread) {\n\t\t\t\tthis._activeComment = commentInfo.uniqueIdInThread ? thread.getCommentByUniqueId(commentInfo.uniqueIdInThread) : undefined;\n\t\t\t\tthis._activeThread = thread;\n\t\t\t}\n\t\t}\n\n\t\t$createCommentThreadTemplate(uriComponents: UriComponents, range: IRange | undefined, editorId?: string): ExtHostCommentThread {\n\t\t\tconst commentThread = new ExtHostCommentThread(this.id, this.handle, undefined, URI.revive(uriComponents), extHostTypeConverter.Range.to(range), [], this._extension, true, editorId);\n\t\t\tcommentThread.collapsibleState = languages.CommentThreadCollapsibleState.Expanded;\n\t\t\tthis._threads.set(commentThread.handle, commentThread);\n\t\t\treturn commentThread;\n\t\t}\n\n\t\t$updateCommentThreadTemplate(threadHandle: number, range: IRange): void {\n\t\t\tconst thread = this._threads.get(threadHandle);\n\t\t\tif (thread) {\n\t\t\t\tthread.range = extHostTypeConverter.Range.to(range);\n\t\t\t}\n\t\t}\n\n\t\t$deleteCommentThread(threadHandle: number): void {\n\t\t\tconst thread = this._threads.get(threadHandle);\n\n\t\t\tthread?.dispose();\n\n\t\t\tthis._threads.delete(threadHandle);\n\t\t}\n\n\t\tgetCommentThread(handle: number): ExtHostCommentThread | undefined {\n\t\t\treturn this._threads.get(handle);\n\t\t}\n\n\t\tdispose(): void {\n\t\t\tthis._threads.forEach(value => {\n\t\t\t\tvalue.dispose();\n\t\t\t});\n\n\t\t\tthis._localDisposables.forEach(disposable => disposable.dispose());\n\t\t}\n\t}\n\n\tfunction convertToDTOComment(thread: ExtHostCommentThread, vscodeComment: vscode.Comment, commentsMap: Map<vscode.Comment, number>, extension: IExtensionDescription): CommentChanges {\n\t\tlet commentUniqueId = commentsMap.get(vscodeComment)!;\n\t\tif (!commentUniqueId) {\n\t\t\tcommentUniqueId = ++thread.commentHandle;\n\t\t\tcommentsMap.set(vscodeComment, commentUniqueId);\n\t\t}\n\n\t\tif (vscodeComment.state !== undefined) {\n\t\t\tcheckProposedApiEnabled(extension, 'commentsDraftState');\n\t\t}\n\n\t\tif (vscodeComment.reactions?.some(reaction => reaction.reactors !== undefined)) {\n\t\t\tcheckProposedApiEnabled(extension, 'commentReactor');\n\t\t}\n\n\t\treturn {\n\t\t\tmode: vscodeComment.mode,\n\t\t\tcontextValue: vscodeComment.contextValue,\n\t\t\tuniqueIdInThread: commentUniqueId,\n\t\t\tbody: (typeof vscodeComment.body === 'string') ? vscodeComment.body : extHostTypeConverter.MarkdownString.from(vscodeComment.body),\n\t\t\tuserName: vscodeComment.author.name,\n\t\t\tuserIconPath: vscodeComment.author.iconPath,\n\t\t\tlabel: vscodeComment.label,\n\t\t\tcommentReactions: vscodeComment.reactions ? vscodeComment.reactions.map(reaction => convertToReaction(reaction)) : undefined,\n\t\t\tstate: vscodeComment.state,\n\t\t\ttimestamp: vscodeComment.timestamp?.toJSON()\n\t\t};\n\t}\n\n\tfunction convertToReaction(reaction: vscode.CommentReaction): languages.CommentReaction {\n\t\treturn {\n\t\t\tlabel: reaction.label,\n\t\t\ticonPath: reaction.iconPath ? extHostTypeConverter.pathOrURIToURI(reaction.iconPath) : undefined,\n\t\t\tcount: reaction.count,\n\t\t\thasReacted: reaction.authorHasReacted,\n\t\t\treactors: ((reaction.reactors && (reaction.reactors.length > 0) && (typeof reaction.reactors[0] !== 'string')) ? (reaction.reactors as languages.CommentAuthorInformation[]).map(reactor => reactor.name) : reaction.reactors) as string[]\n\t\t};\n\t}\n\n\tfunction convertFromReaction(reaction: languages.CommentReaction): vscode.CommentReaction {\n\t\treturn {\n\t\t\tlabel: reaction.label || '',\n\t\t\tcount: reaction.count || 0,\n\t\t\ticonPath: reaction.iconPath ? URI.revive(reaction.iconPath) : '',\n\t\t\tauthorHasReacted: reaction.hasReacted || false,\n\t\t\treactors: reaction.reactors?.map(reactor => ({ name: reactor }))\n\t\t};\n\t}\n\n\tfunction convertToCollapsibleState(kind: vscode.CommentThreadCollapsibleState | undefined): languages.CommentThreadCollapsibleState {\n\t\tif (kind !== undefined) {\n\t\t\tswitch (kind) {\n\t\t\t\tcase types.CommentThreadCollapsibleState.Expanded:\n\t\t\t\t\treturn languages.CommentThreadCollapsibleState.Expanded;\n\t\t\t\tcase types.CommentThreadCollapsibleState.Collapsed:\n\t\t\t\t\treturn languages.CommentThreadCollapsibleState.Collapsed;\n\t\t\t}\n\t\t}\n\t\treturn languages.CommentThreadCollapsibleState.Collapsed;\n\t}\n\n\tfunction convertToState(kind: vscode.CommentThreadState | { resolved?: vscode.CommentThreadState; applicability?: vscode.CommentThreadApplicability } | undefined): languages.CommentThreadState {\n\t\tlet resolvedKind: vscode.CommentThreadState | undefined;\n\t\tif (typeof kind === 'object') {\n\t\t\tresolvedKind = kind.resolved;\n\t\t} else {\n\t\t\tresolvedKind = kind;\n\t\t}\n\n\t\tif (resolvedKind !== undefined) {\n\t\t\tswitch (resolvedKind) {\n\t\t\t\tcase types.CommentThreadState.Unresolved:\n\t\t\t\t\treturn languages.CommentThreadState.Unresolved;\n\t\t\t\tcase types.CommentThreadState.Resolved:\n\t\t\t\t\treturn languages.CommentThreadState.Resolved;\n\t\t\t}\n\t\t}\n\t\treturn languages.CommentThreadState.Unresolved;\n\t}\n\n\tfunction convertToRelevance(kind: vscode.CommentThreadState | { resolved?: vscode.CommentThreadState; applicability?: vscode.CommentThreadApplicability } | undefined): languages.CommentThreadApplicability {\n\t\tlet applicabilityKind: vscode.CommentThreadApplicability | undefined = undefined;\n\t\tif (typeof kind === 'object') {\n\t\t\tapplicabilityKind = kind.applicability;\n\t\t}\n\n\t\tif (applicabilityKind !== undefined) {\n\t\t\tswitch (applicabilityKind) {\n\t\t\t\tcase types.CommentThreadApplicability.Current:\n\t\t\t\t\treturn languages.CommentThreadApplicability.Current;\n\t\t\t\tcase types.CommentThreadApplicability.Outdated:\n\t\t\t\t\treturn languages.CommentThreadApplicability.Outdated;\n\t\t\t}\n\t\t}\n\t\treturn languages.CommentThreadApplicability.Current;\n\t}\n\n\treturn new ExtHostCommentsImpl();\n}\n"],
  "mappings": "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",
  "names": []
}
