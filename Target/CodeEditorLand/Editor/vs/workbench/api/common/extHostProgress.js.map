{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/api/common/extHostProgress.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { ProgressOptions } from 'vscode';\nimport { MainThreadProgressShape, ExtHostProgressShape } from './extHost.protocol.js';\nimport { ProgressLocation } from './extHostTypeConverters.js';\nimport { Progress, IProgressStep } from '../../../platform/progress/common/progress.js';\nimport { CancellationTokenSource, CancellationToken } from '../../../base/common/cancellation.js';\nimport { throttle } from '../../../base/common/decorators.js';\nimport { IExtensionDescription } from '../../../platform/extensions/common/extensions.js';\nimport { onUnexpectedExternalError } from '../../../base/common/errors.js';\n\nexport class ExtHostProgress implements ExtHostProgressShape {\n\n\tprivate _proxy: MainThreadProgressShape;\n\tprivate _handles: number = 0;\n\tprivate _mapHandleToCancellationSource: Map<number, CancellationTokenSource> = new Map();\n\n\tconstructor(proxy: MainThreadProgressShape) {\n\t\tthis._proxy = proxy;\n\t}\n\n\tasync withProgress<R>(extension: IExtensionDescription, options: ProgressOptions, task: (progress: Progress<IProgressStep>, token: CancellationToken) => Thenable<R>): Promise<R> {\n\t\tconst handle = this._handles++;\n\t\tconst { title, location, cancellable } = options;\n\t\tconst source = { label: extension.displayName || extension.name, id: extension.identifier.value };\n\n\t\tthis._proxy.$startProgress(handle, { location: ProgressLocation.from(location), title, source, cancellable }, !extension.isUnderDevelopment ? extension.identifier.value : undefined).catch(onUnexpectedExternalError);\n\t\treturn this._withProgress(handle, task, !!cancellable);\n\t}\n\n\tprivate _withProgress<R>(handle: number, task: (progress: Progress<IProgressStep>, token: CancellationToken) => Thenable<R>, cancellable: boolean): Thenable<R> {\n\t\tlet source: CancellationTokenSource | undefined;\n\t\tif (cancellable) {\n\t\t\tsource = new CancellationTokenSource();\n\t\t\tthis._mapHandleToCancellationSource.set(handle, source);\n\t\t}\n\n\t\tconst progressEnd = (handle: number): void => {\n\t\t\tthis._proxy.$progressEnd(handle);\n\t\t\tthis._mapHandleToCancellationSource.delete(handle);\n\t\t\tsource?.dispose();\n\t\t};\n\n\t\tlet p: Thenable<R>;\n\n\t\ttry {\n\t\t\tp = task(new ProgressCallback(this._proxy, handle), cancellable && source ? source.token : CancellationToken.None);\n\t\t} catch (err) {\n\t\t\tprogressEnd(handle);\n\t\t\tthrow err;\n\t\t}\n\n\t\tp.then(result => progressEnd(handle), err => progressEnd(handle));\n\t\treturn p;\n\t}\n\n\tpublic $acceptProgressCanceled(handle: number): void {\n\t\tconst source = this._mapHandleToCancellationSource.get(handle);\n\t\tif (source) {\n\t\t\tsource.cancel();\n\t\t\tthis._mapHandleToCancellationSource.delete(handle);\n\t\t}\n\t}\n}\n\nfunction mergeProgress(result: IProgressStep, currentValue: IProgressStep): IProgressStep {\n\tresult.message = currentValue.message;\n\tif (typeof currentValue.increment === 'number') {\n\t\tif (typeof result.increment === 'number') {\n\t\t\tresult.increment += currentValue.increment;\n\t\t} else {\n\t\t\tresult.increment = currentValue.increment;\n\t\t}\n\t}\n\n\treturn result;\n}\n\nclass ProgressCallback extends Progress<IProgressStep> {\n\tconstructor(private _proxy: MainThreadProgressShape, private _handle: number) {\n\t\tsuper(p => this.throttledReport(p));\n\t}\n\n\t@throttle(100, (result: IProgressStep, currentValue: IProgressStep) => mergeProgress(result, currentValue), () => Object.create(null))\n\tthrottledReport(p: IProgressStep): void {\n\t\tthis._proxy.$progressReport(this._handle, p);\n\t}\n}\n"],
  "mappings": ";;;;;;;;;;;AAKA,SAAS,uBAAuB;AAChC,SAAS,yBAAyB,4BAA4B;AAC9D,SAAS,wBAAwB;AACjC,SAAS,UAAU,qBAAqB;AACxC,SAAS,yBAAyB,yBAAyB;AAC3D,SAAS,gBAAgB;AACzB,SAAS,6BAA6B;AACtC,SAAS,iCAAiC;AAEnC,MAAM,gBAAgD;AAAA,EAd7D,OAc6D;AAAA;AAAA;AAAA,EAEpD;AAAA,EACA,WAAmB;AAAA,EACnB,iCAAuE,oBAAI,IAAI;AAAA,EAEvF,YAAY,OAAgC;AAC3C,SAAK,SAAS;AAAA,EACf;AAAA,EAEA,MAAM,aAAgB,WAAkC,SAA0B,MAAgG;AACjL,UAAM,SAAS,KAAK;AACpB,UAAM,EAAE,OAAO,UAAU,YAAY,IAAI;AACzC,UAAM,SAAS,EAAE,OAAO,UAAU,eAAe,UAAU,MAAM,IAAI,UAAU,WAAW,MAAM;AAEhG,SAAK,OAAO,eAAe,QAAQ,EAAE,UAAU,iBAAiB,KAAK,QAAQ,GAAG,OAAO,QAAQ,YAAY,GAAG,CAAC,UAAU,qBAAqB,UAAU,WAAW,QAAQ,MAAS,EAAE,MAAM,yBAAyB;AACrN,WAAO,KAAK,cAAc,QAAQ,MAAM,CAAC,CAAC,WAAW;AAAA,EACtD;AAAA,EAEQ,cAAiB,QAAgB,MAAoF,aAAmC;AAC/J,QAAI;AACJ,QAAI,aAAa;AAChB,eAAS,IAAI,wBAAwB;AACrC,WAAK,+BAA+B,IAAI,QAAQ,MAAM;AAAA,IACvD;AAEA,UAAM,cAAc,wBAACA,YAAyB;AAC7C,WAAK,OAAO,aAAaA,OAAM;AAC/B,WAAK,+BAA+B,OAAOA,OAAM;AACjD,cAAQ,QAAQ;AAAA,IACjB,GAJoB;AAMpB,QAAI;AAEJ,QAAI;AACH,UAAI,KAAK,IAAI,iBAAiB,KAAK,QAAQ,MAAM,GAAG,eAAe,SAAS,OAAO,QAAQ,kBAAkB,IAAI;AAAA,IAClH,SAAS,KAAK;AACb,kBAAY,MAAM;AAClB,YAAM;AAAA,IACP;AAEA,MAAE,KAAK,YAAU,YAAY,MAAM,GAAG,SAAO,YAAY,MAAM,CAAC;AAChE,WAAO;AAAA,EACR;AAAA,EAEO,wBAAwB,QAAsB;AACpD,UAAM,SAAS,KAAK,+BAA+B,IAAI,MAAM;AAC7D,QAAI,QAAQ;AACX,aAAO,OAAO;AACd,WAAK,+BAA+B,OAAO,MAAM;AAAA,IAClD;AAAA,EACD;AACD;AAEA,SAAS,cAAc,QAAuB,cAA4C;AACzF,SAAO,UAAU,aAAa;AAC9B,MAAI,OAAO,aAAa,cAAc,UAAU;AAC/C,QAAI,OAAO,OAAO,cAAc,UAAU;AACzC,aAAO,aAAa,aAAa;AAAA,IAClC,OAAO;AACN,aAAO,YAAY,aAAa;AAAA,IACjC;AAAA,EACD;AAEA,SAAO;AACR;AAXS;AAaT,MAAM,yBAAyB,SAAwB;AAAA,EACtD,YAAoB,QAAyC,SAAiB;AAC7E,UAAM,OAAK,KAAK,gBAAgB,CAAC,CAAC;AADf;AAAyC;AAAA,EAE7D;AAAA,EApFD,OAiFuD;AAAA;AAAA;AAAA,EAMtD,gBAAgB,GAAwB;AACvC,SAAK,OAAO,gBAAgB,KAAK,SAAS,CAAC;AAAA,EAC5C;AACD;AAHC;AAAA,EADC,SAAS,KAAK,CAAC,QAAuB,iBAAgC,cAAc,QAAQ,YAAY,GAAG,MAAM,uBAAO,OAAO,IAAI,CAAC;AAAA,GALhI,iBAML;",
  "names": ["handle"]
}
