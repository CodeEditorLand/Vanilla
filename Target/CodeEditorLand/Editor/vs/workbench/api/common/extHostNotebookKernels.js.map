{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/api/common/extHostNotebookKernels.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { asArray } from '../../../base/common/arrays.js';\nimport { DeferredPromise, timeout } from '../../../base/common/async.js';\nimport { CancellationToken, CancellationTokenSource } from '../../../base/common/cancellation.js';\nimport { Emitter } from '../../../base/common/event.js';\nimport { Disposable, DisposableStore, IDisposable } from '../../../base/common/lifecycle.js';\nimport { ResourceMap } from '../../../base/common/map.js';\nimport { URI, UriComponents } from '../../../base/common/uri.js';\nimport { ExtensionIdentifier, IExtensionDescription } from '../../../platform/extensions/common/extensions.js';\nimport { ILogService } from '../../../platform/log/common/log.js';\nimport { ExtHostNotebookKernelsShape, ICellExecuteUpdateDto, IMainContext, INotebookKernelDto2, MainContext, MainThreadNotebookKernelsShape, NotebookOutputDto, VariablesResult } from './extHost.protocol.js';\nimport { ApiCommand, ApiCommandArgument, ApiCommandResult, ExtHostCommands } from './extHostCommands.js';\nimport { IExtHostInitDataService } from './extHostInitDataService.js';\nimport { ExtHostNotebookController } from './extHostNotebook.js';\nimport { ExtHostCell, ExtHostNotebookDocument } from './extHostNotebookDocument.js';\nimport * as extHostTypeConverters from './extHostTypeConverters.js';\nimport { NotebookCellExecutionState as ExtHostNotebookCellExecutionState, NotebookCellOutput, NotebookControllerAffinity2, NotebookVariablesRequestKind } from './extHostTypes.js';\nimport { asWebviewUri } from '../../contrib/webview/common/webview.js';\nimport { INotebookKernelSourceAction, NotebookCellExecutionState } from '../../contrib/notebook/common/notebookCommon.js';\nimport { CellExecutionUpdateType } from '../../contrib/notebook/common/notebookExecutionService.js';\nimport { checkProposedApiEnabled } from '../../services/extensions/common/extensions.js';\nimport { SerializableObjectWithBuffers } from '../../services/extensions/common/proxyIdentifier.js';\nimport * as vscode from 'vscode';\nimport { variablePageSize } from '../../contrib/notebook/common/notebookKernelService.js';\n\ninterface IKernelData {\n\textensionId: ExtensionIdentifier;\n\tcontroller: vscode.NotebookController;\n\tonDidChangeSelection: Emitter<{ selected: boolean; notebook: vscode.NotebookDocument }>;\n\tonDidReceiveMessage: Emitter<{ editor: vscode.NotebookEditor; message: any }>;\n\tassociatedNotebooks: ResourceMap<boolean>;\n}\n\ntype ExtHostSelectKernelArgs = ControllerInfo | { notebookEditor: vscode.NotebookEditor } | ControllerInfo & { notebookEditor: vscode.NotebookEditor } | undefined;\ntype SelectKernelReturnArgs = ControllerInfo | { notebookEditorId: string } | ControllerInfo & { notebookEditorId: string } | undefined;\ntype ControllerInfo = { id: string; extension: string };\n\n\nexport class ExtHostNotebookKernels implements ExtHostNotebookKernelsShape {\n\n\tprivate readonly _proxy: MainThreadNotebookKernelsShape;\n\tprivate readonly _activeExecutions = new ResourceMap<NotebookCellExecutionTask>();\n\tprivate readonly _activeNotebookExecutions = new ResourceMap<[NotebookExecutionTask, IDisposable]>();\n\n\tprivate _kernelDetectionTask = new Map<number, vscode.NotebookControllerDetectionTask>();\n\tprivate _kernelDetectionTaskHandlePool: number = 0;\n\n\tprivate _kernelSourceActionProviders = new Map<number, vscode.NotebookKernelSourceActionProvider>();\n\tprivate _kernelSourceActionProviderHandlePool: number = 0;\n\n\tprivate readonly _kernelData = new Map<number, IKernelData>();\n\tprivate _handlePool: number = 0;\n\n\tprivate readonly _onDidChangeCellExecutionState = new Emitter<vscode.NotebookCellExecutionStateChangeEvent>();\n\treadonly onDidChangeNotebookCellExecutionState = this._onDidChangeCellExecutionState.event;\n\n\tconstructor(\n\t\tmainContext: IMainContext,\n\t\tprivate readonly _initData: IExtHostInitDataService,\n\t\tprivate readonly _extHostNotebook: ExtHostNotebookController,\n\t\tprivate _commands: ExtHostCommands,\n\t\t@ILogService private readonly _logService: ILogService,\n\t) {\n\t\tthis._proxy = mainContext.getProxy(MainContext.MainThreadNotebookKernels);\n\n\t\t// todo@rebornix @joyceerhl: move to APICommands once stabilized.\n\t\tconst selectKernelApiCommand = new ApiCommand(\n\t\t\t'notebook.selectKernel',\n\t\t\t'_notebook.selectKernel',\n\t\t\t'Trigger kernel picker for specified notebook editor widget',\n\t\t\t[\n\t\t\t\tnew ApiCommandArgument<ExtHostSelectKernelArgs, SelectKernelReturnArgs>('options', 'Select kernel options', v => true, (v: ExtHostSelectKernelArgs) => {\n\t\t\t\t\tif (v && 'notebookEditor' in v && 'id' in v) {\n\t\t\t\t\t\tconst notebookEditorId = this._extHostNotebook.getIdByEditor(v.notebookEditor);\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\tid: v.id, extension: v.extension, notebookEditorId\n\t\t\t\t\t\t};\n\t\t\t\t\t} else if (v && 'notebookEditor' in v) {\n\t\t\t\t\t\tconst notebookEditorId = this._extHostNotebook.getIdByEditor(v.notebookEditor);\n\t\t\t\t\t\tif (notebookEditorId === undefined) {\n\t\t\t\t\t\t\tthrow new Error(`Cannot invoke 'notebook.selectKernel' for unrecognized notebook editor ${v.notebookEditor.notebook.uri.toString()}`);\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn { notebookEditorId };\n\t\t\t\t\t}\n\t\t\t\t\treturn v;\n\t\t\t\t})\n\t\t\t],\n\t\t\tApiCommandResult.Void);\n\n\t\tconst requestKernelVariablesApiCommand = new ApiCommand(\n\t\t\t'vscode.executeNotebookVariableProvider',\n\t\t\t'_executeNotebookVariableProvider',\n\t\t\t'Execute notebook variable provider',\n\t\t\t[ApiCommandArgument.Uri],\n\t\t\tnew ApiCommandResult<VariablesResult[], vscode.VariablesResult[]>('A promise that resolves to an array of variables', (value, apiArgs) => {\n\t\t\t\treturn value.map(variable => {\n\t\t\t\t\treturn {\n\t\t\t\t\t\tvariable: {\n\t\t\t\t\t\t\tname: variable.name,\n\t\t\t\t\t\t\tvalue: variable.value,\n\t\t\t\t\t\t\texpression: variable.expression,\n\t\t\t\t\t\t\ttype: variable.type,\n\t\t\t\t\t\t\tlanguage: variable.language\n\t\t\t\t\t\t},\n\t\t\t\t\t\thasNamedChildren: variable.hasNamedChildren,\n\t\t\t\t\t\tindexedChildrenCount: variable.indexedChildrenCount\n\t\t\t\t\t};\n\t\t\t\t});\n\t\t\t})\n\t\t);\n\t\tthis._commands.registerApiCommand(selectKernelApiCommand);\n\t\tthis._commands.registerApiCommand(requestKernelVariablesApiCommand);\n\t}\n\n\tcreateNotebookController(extension: IExtensionDescription, id: string, viewType: string, label: string, handler?: (cells: vscode.NotebookCell[], notebook: vscode.NotebookDocument, controller: vscode.NotebookController) => void | Thenable<void>, preloads?: vscode.NotebookRendererScript[]): vscode.NotebookController {\n\n\t\tfor (const data of this._kernelData.values()) {\n\t\t\tif (data.controller.id === id && ExtensionIdentifier.equals(extension.identifier, data.extensionId)) {\n\t\t\t\tthrow new Error(`notebook controller with id '${id}' ALREADY exist`);\n\t\t\t}\n\t\t}\n\n\n\t\tconst handle = this._handlePool++;\n\t\tconst that = this;\n\n\t\tthis._logService.trace(`NotebookController[${handle}], CREATED by ${extension.identifier.value}, ${id}`);\n\n\t\tconst _defaultExecutHandler = () => console.warn(`NO execute handler from notebook controller '${data.id}' of extension: '${extension.identifier}'`);\n\n\t\tlet isDisposed = false;\n\n\t\tconst onDidChangeSelection = new Emitter<{ selected: boolean; notebook: vscode.NotebookDocument }>();\n\t\tconst onDidReceiveMessage = new Emitter<{ editor: vscode.NotebookEditor; message: any }>();\n\n\t\tconst data: INotebookKernelDto2 = {\n\t\t\tid: createKernelId(extension.identifier, id),\n\t\t\tnotebookType: viewType,\n\t\t\textensionId: extension.identifier,\n\t\t\textensionLocation: extension.extensionLocation,\n\t\t\tlabel: label || extension.identifier.value,\n\t\t\tpreloads: preloads ? preloads.map(extHostTypeConverters.NotebookRendererScript.from) : []\n\t\t};\n\n\t\t//\n\t\tlet _executeHandler = handler ?? _defaultExecutHandler;\n\t\tlet _interruptHandler: ((this: vscode.NotebookController, notebook: vscode.NotebookDocument) => void | Thenable<void>) | undefined;\n\t\tlet _variableProvider: vscode.NotebookVariableProvider | undefined;\n\n\t\tthis._proxy.$addKernel(handle, data).catch(err => {\n\t\t\t// this can happen when a kernel with that ID is already registered\n\t\t\tconsole.log(err);\n\t\t\tisDisposed = true;\n\t\t});\n\n\t\t// update: all setters write directly into the dto object\n\t\t// and trigger an update. the actual update will only happen\n\t\t// once per event loop execution\n\t\tlet tokenPool = 0;\n\t\tconst _update = () => {\n\t\t\tif (isDisposed) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst myToken = ++tokenPool;\n\t\t\tPromise.resolve().then(() => {\n\t\t\t\tif (myToken === tokenPool) {\n\t\t\t\t\tthis._proxy.$updateKernel(handle, data);\n\t\t\t\t}\n\t\t\t});\n\t\t};\n\n\t\t// notebook documents that are associated to this controller\n\t\tconst associatedNotebooks = new ResourceMap<boolean>();\n\n\t\tconst controller: vscode.NotebookController = {\n\t\t\tget id() { return id; },\n\t\t\tget notebookType() { return data.notebookType; },\n\t\t\tonDidChangeSelectedNotebooks: onDidChangeSelection.event,\n\t\t\tget label() {\n\t\t\t\treturn data.label;\n\t\t\t},\n\t\t\tset label(value) {\n\t\t\t\tdata.label = value ?? extension.displayName ?? extension.name;\n\t\t\t\t_update();\n\t\t\t},\n\t\t\tget detail() {\n\t\t\t\treturn data.detail ?? '';\n\t\t\t},\n\t\t\tset detail(value) {\n\t\t\t\tdata.detail = value;\n\t\t\t\t_update();\n\t\t\t},\n\t\t\tget description() {\n\t\t\t\treturn data.description ?? '';\n\t\t\t},\n\t\t\tset description(value) {\n\t\t\t\tdata.description = value;\n\t\t\t\t_update();\n\t\t\t},\n\t\t\tget supportedLanguages() {\n\t\t\t\treturn data.supportedLanguages;\n\t\t\t},\n\t\t\tset supportedLanguages(value) {\n\t\t\t\tdata.supportedLanguages = value;\n\t\t\t\t_update();\n\t\t\t},\n\t\t\tget supportsExecutionOrder() {\n\t\t\t\treturn data.supportsExecutionOrder ?? false;\n\t\t\t},\n\t\t\tset supportsExecutionOrder(value) {\n\t\t\t\tdata.supportsExecutionOrder = value;\n\t\t\t\t_update();\n\t\t\t},\n\t\t\tget rendererScripts() {\n\t\t\t\treturn data.preloads ? data.preloads.map(extHostTypeConverters.NotebookRendererScript.to) : [];\n\t\t\t},\n\t\t\tget executeHandler() {\n\t\t\t\treturn _executeHandler;\n\t\t\t},\n\t\t\tset executeHandler(value) {\n\t\t\t\t_executeHandler = value ?? _defaultExecutHandler;\n\t\t\t},\n\t\t\tget interruptHandler() {\n\t\t\t\treturn _interruptHandler;\n\t\t\t},\n\t\t\tset interruptHandler(value) {\n\t\t\t\t_interruptHandler = value;\n\t\t\t\tdata.supportsInterrupt = Boolean(value);\n\t\t\t\t_update();\n\t\t\t},\n\t\t\tset variableProvider(value) {\n\t\t\t\tcheckProposedApiEnabled(extension, 'notebookVariableProvider');\n\t\t\t\t_variableProvider = value;\n\t\t\t\tdata.hasVariableProvider = !!value;\n\t\t\t\tvalue?.onDidChangeVariables(e => that._proxy.$variablesUpdated(e.uri));\n\t\t\t\t_update();\n\t\t\t},\n\t\t\tget variableProvider() {\n\t\t\t\treturn _variableProvider;\n\t\t\t},\n\t\t\tcreateNotebookCellExecution(cell) {\n\t\t\t\tif (isDisposed) {\n\t\t\t\t\tthrow new Error('notebook controller is DISPOSED');\n\t\t\t\t}\n\t\t\t\tif (!associatedNotebooks.has(cell.notebook.uri)) {\n\t\t\t\t\tthat._logService.trace(`NotebookController[${handle}] NOT associated to notebook, associated to THESE notebooks:`, Array.from(associatedNotebooks.keys()).map(u => u.toString()));\n\t\t\t\t\tthrow new Error(`notebook controller is NOT associated to notebook: ${cell.notebook.uri.toString()}`);\n\t\t\t\t}\n\t\t\t\treturn that._createNotebookCellExecution(cell, createKernelId(extension.identifier, this.id));\n\t\t\t},\n\t\t\tcreateNotebookExecution(notebook) {\n\t\t\t\tcheckProposedApiEnabled(extension, 'notebookExecution');\n\t\t\t\tif (isDisposed) {\n\t\t\t\t\tthrow new Error('notebook controller is DISPOSED');\n\t\t\t\t}\n\t\t\t\tif (!associatedNotebooks.has(notebook.uri)) {\n\t\t\t\t\tthat._logService.trace(`NotebookController[${handle}] NOT associated to notebook, associated to THESE notebooks:`, Array.from(associatedNotebooks.keys()).map(u => u.toString()));\n\t\t\t\t\tthrow new Error(`notebook controller is NOT associated to notebook: ${notebook.uri.toString()}`);\n\t\t\t\t}\n\t\t\t\treturn that._createNotebookExecution(notebook, createKernelId(extension.identifier, this.id));\n\t\t\t},\n\t\t\tdispose: () => {\n\t\t\t\tif (!isDisposed) {\n\t\t\t\t\tthis._logService.trace(`NotebookController[${handle}], DISPOSED`);\n\t\t\t\t\tisDisposed = true;\n\t\t\t\t\tthis._kernelData.delete(handle);\n\t\t\t\t\tonDidChangeSelection.dispose();\n\t\t\t\t\tonDidReceiveMessage.dispose();\n\t\t\t\t\tthis._proxy.$removeKernel(handle);\n\t\t\t\t}\n\t\t\t},\n\t\t\t// --- priority\n\t\t\tupdateNotebookAffinity(notebook, priority) {\n\t\t\t\tif (priority === NotebookControllerAffinity2.Hidden) {\n\t\t\t\t\t// This api only adds an extra enum value, the function is the same, so just gate on the new value being passed\n\t\t\t\t\t// for proposedAPI check.\n\t\t\t\t\tcheckProposedApiEnabled(extension, 'notebookControllerAffinityHidden');\n\t\t\t\t}\n\t\t\t\tthat._proxy.$updateNotebookPriority(handle, notebook.uri, priority);\n\t\t\t},\n\t\t\t// --- ipc\n\t\t\tonDidReceiveMessage: onDidReceiveMessage.event,\n\t\t\tpostMessage(message, editor) {\n\t\t\t\tcheckProposedApiEnabled(extension, 'notebookMessaging');\n\t\t\t\treturn that._proxy.$postMessage(handle, editor && that._extHostNotebook.getIdByEditor(editor), message);\n\t\t\t},\n\t\t\tasWebviewUri(uri: URI) {\n\t\t\t\tcheckProposedApiEnabled(extension, 'notebookMessaging');\n\t\t\t\treturn asWebviewUri(uri, that._initData.remote);\n\t\t\t},\n\t\t};\n\n\t\tthis._kernelData.set(handle, {\n\t\t\textensionId: extension.identifier,\n\t\t\tcontroller,\n\t\t\tonDidReceiveMessage,\n\t\t\tonDidChangeSelection,\n\t\t\tassociatedNotebooks\n\t\t});\n\t\treturn controller;\n\t}\n\n\tgetIdByController(controller: vscode.NotebookController) {\n\t\tfor (const [_, candidate] of this._kernelData) {\n\t\t\tif (candidate.controller === controller) {\n\t\t\t\treturn createKernelId(candidate.extensionId, controller.id);\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n\n\tcreateNotebookControllerDetectionTask(extension: IExtensionDescription, viewType: string): vscode.NotebookControllerDetectionTask {\n\t\tconst handle = this._kernelDetectionTaskHandlePool++;\n\t\tconst that = this;\n\n\t\tthis._logService.trace(`NotebookControllerDetectionTask[${handle}], CREATED by ${extension.identifier.value}`);\n\t\tthis._proxy.$addKernelDetectionTask(handle, viewType);\n\n\t\tconst detectionTask: vscode.NotebookControllerDetectionTask = {\n\t\t\tdispose: () => {\n\t\t\t\tthis._kernelDetectionTask.delete(handle);\n\t\t\t\tthat._proxy.$removeKernelDetectionTask(handle);\n\t\t\t}\n\t\t};\n\n\t\tthis._kernelDetectionTask.set(handle, detectionTask);\n\t\treturn detectionTask;\n\t}\n\n\tregisterKernelSourceActionProvider(extension: IExtensionDescription, viewType: string, provider: vscode.NotebookKernelSourceActionProvider) {\n\t\tconst handle = this._kernelSourceActionProviderHandlePool++;\n\t\tconst eventHandle = typeof provider.onDidChangeNotebookKernelSourceActions === 'function' ? handle : undefined;\n\t\tconst that = this;\n\n\t\tthis._kernelSourceActionProviders.set(handle, provider);\n\t\tthis._logService.trace(`NotebookKernelSourceActionProvider[${handle}], CREATED by ${extension.identifier.value}`);\n\t\tthis._proxy.$addKernelSourceActionProvider(handle, handle, viewType);\n\n\t\tlet subscription: vscode.Disposable | undefined;\n\t\tif (eventHandle !== undefined) {\n\t\t\tsubscription = provider.onDidChangeNotebookKernelSourceActions!(_ => this._proxy.$emitNotebookKernelSourceActionsChangeEvent(eventHandle));\n\t\t}\n\n\t\treturn {\n\t\t\tdispose: () => {\n\t\t\t\tthis._kernelSourceActionProviders.delete(handle);\n\t\t\t\tthat._proxy.$removeKernelSourceActionProvider(handle, handle);\n\t\t\t\tsubscription?.dispose();\n\t\t\t}\n\t\t};\n\t}\n\n\tasync $provideKernelSourceActions(handle: number, token: CancellationToken): Promise<INotebookKernelSourceAction[]> {\n\t\tconst provider = this._kernelSourceActionProviders.get(handle);\n\t\tif (provider) {\n\t\t\tconst disposables = new DisposableStore();\n\t\t\tconst ret = await provider.provideNotebookKernelSourceActions(token);\n\t\t\treturn (ret ?? []).map(item => extHostTypeConverters.NotebookKernelSourceAction.from(item, this._commands.converter, disposables));\n\t\t}\n\t\treturn [];\n\t}\n\n\t$acceptNotebookAssociation(handle: number, uri: UriComponents, value: boolean): void {\n\t\tconst obj = this._kernelData.get(handle);\n\t\tif (obj) {\n\t\t\t// update data structure\n\t\t\tconst notebook = this._extHostNotebook.getNotebookDocument(URI.revive(uri))!;\n\t\t\tif (value) {\n\t\t\t\tobj.associatedNotebooks.set(notebook.uri, true);\n\t\t\t} else {\n\t\t\t\tobj.associatedNotebooks.delete(notebook.uri);\n\t\t\t}\n\t\t\tthis._logService.trace(`NotebookController[${handle}] ASSOCIATE notebook`, notebook.uri.toString(), value);\n\t\t\t// send event\n\t\t\tobj.onDidChangeSelection.fire({\n\t\t\t\tselected: value,\n\t\t\t\tnotebook: notebook.apiNotebook\n\t\t\t});\n\t\t}\n\t}\n\n\tasync $executeCells(handle: number, uri: UriComponents, handles: number[]): Promise<void> {\n\t\tconst obj = this._kernelData.get(handle);\n\t\tif (!obj) {\n\t\t\t// extension can dispose kernels in the meantime\n\t\t\treturn;\n\t\t}\n\t\tconst document = this._extHostNotebook.getNotebookDocument(URI.revive(uri));\n\t\tconst cells: vscode.NotebookCell[] = [];\n\t\tfor (const cellHandle of handles) {\n\t\t\tconst cell = document.getCell(cellHandle);\n\t\t\tif (cell) {\n\t\t\t\tcells.push(cell.apiCell);\n\t\t\t}\n\t\t}\n\n\t\ttry {\n\t\t\tthis._logService.trace(`NotebookController[${handle}] EXECUTE cells`, document.uri.toString(), cells.length);\n\t\t\tawait obj.controller.executeHandler.call(obj.controller, cells, document.apiNotebook, obj.controller);\n\t\t} catch (err) {\n\t\t\t//\n\t\t\tthis._logService.error(`NotebookController[${handle}] execute cells FAILED`, err);\n\t\t\tconsole.error(err);\n\t\t}\n\t}\n\n\tasync $cancelCells(handle: number, uri: UriComponents, handles: number[]): Promise<void> {\n\t\tconst obj = this._kernelData.get(handle);\n\t\tif (!obj) {\n\t\t\t// extension can dispose kernels in the meantime\n\t\t\treturn;\n\t\t}\n\n\t\t// cancel or interrupt depends on the controller. When an interrupt handler is used we\n\t\t// don't trigger the cancelation token of executions.\n\t\tconst document = this._extHostNotebook.getNotebookDocument(URI.revive(uri));\n\t\tif (obj.controller.interruptHandler) {\n\t\t\tawait obj.controller.interruptHandler.call(obj.controller, document.apiNotebook);\n\n\t\t} else {\n\t\t\tfor (const cellHandle of handles) {\n\t\t\t\tconst cell = document.getCell(cellHandle);\n\t\t\t\tif (cell) {\n\t\t\t\t\tthis._activeExecutions.get(cell.uri)?.cancel();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (obj.controller.interruptHandler) {\n\t\t\t// If we're interrupting all cells, we also need to cancel the notebook level execution.\n\t\t\tconst items = this._activeNotebookExecutions.get(document.uri);\n\t\t\tthis._activeNotebookExecutions.delete(document.uri);\n\t\t\tif (handles.length && Array.isArray(items) && items.length) {\n\t\t\t\titems.forEach(d => d.dispose());\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate id = 0;\n\tprivate variableStore: Record<string, vscode.Variable> = {};\n\n\tasync $provideVariables(handle: number, requestId: string, notebookUri: UriComponents, parentId: number | undefined, kind: 'named' | 'indexed', start: number, token: CancellationToken): Promise<void> {\n\t\tconst obj = this._kernelData.get(handle);\n\t\tif (!obj) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst document = this._extHostNotebook.getNotebookDocument(URI.revive(notebookUri));\n\t\tconst variableProvider = obj.controller.variableProvider;\n\t\tif (!variableProvider) {\n\t\t\treturn;\n\t\t}\n\n\t\tlet parent: vscode.Variable | undefined = undefined;\n\t\tif (parentId !== undefined) {\n\t\t\tparent = this.variableStore[parentId];\n\t\t\tif (!parent) {\n\t\t\t\t// request for unknown parent\n\t\t\t\treturn;\n\t\t\t}\n\t\t} else {\n\t\t\t// root request, clear store\n\t\t\tthis.variableStore = {};\n\t\t}\n\n\n\t\tconst requestKind = kind === 'named' ? NotebookVariablesRequestKind.Named : NotebookVariablesRequestKind.Indexed;\n\t\tconst variableResults = variableProvider.provideVariables(document.apiNotebook, parent, requestKind, start, token);\n\n\t\tlet resultCount = 0;\n\t\tfor await (const result of variableResults) {\n\t\t\tif (token.isCancellationRequested) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst variable = {\n\t\t\t\tid: this.id++,\n\t\t\t\tname: result.variable.name,\n\t\t\t\tvalue: result.variable.value,\n\t\t\t\ttype: result.variable.type,\n\t\t\t\tinterfaces: result.variable.interfaces,\n\t\t\t\tlanguage: result.variable.language,\n\t\t\t\texpression: result.variable.expression,\n\t\t\t\thasNamedChildren: result.hasNamedChildren,\n\t\t\t\tindexedChildrenCount: result.indexedChildrenCount,\n\t\t\t\textensionId: obj.extensionId.value,\n\t\t\t};\n\t\t\tthis.variableStore[variable.id] = result.variable;\n\t\t\tthis._proxy.$receiveVariable(requestId, variable);\n\n\t\t\tif (resultCount++ >= variablePageSize) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t}\n\n\t$acceptKernelMessageFromRenderer(handle: number, editorId: string, message: any): void {\n\t\tconst obj = this._kernelData.get(handle);\n\t\tif (!obj) {\n\t\t\t// extension can dispose kernels in the meantime\n\t\t\treturn;\n\t\t}\n\n\t\tconst editor = this._extHostNotebook.getEditorById(editorId);\n\t\tobj.onDidReceiveMessage.fire(Object.freeze({ editor: editor.apiEditor, message }));\n\t}\n\n\t$cellExecutionChanged(uri: UriComponents, cellHandle: number, state: NotebookCellExecutionState | undefined): void {\n\t\tconst document = this._extHostNotebook.getNotebookDocument(URI.revive(uri));\n\t\tconst cell = document.getCell(cellHandle);\n\t\tif (cell) {\n\t\t\tconst newState = state ? extHostTypeConverters.NotebookCellExecutionState.to(state) : ExtHostNotebookCellExecutionState.Idle;\n\t\t\tif (newState !== undefined) {\n\t\t\t\tthis._onDidChangeCellExecutionState.fire({\n\t\t\t\t\tcell: cell.apiCell,\n\t\t\t\t\tstate: newState\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t}\n\n\t// ---\n\n\t_createNotebookCellExecution(cell: vscode.NotebookCell, controllerId: string): vscode.NotebookCellExecution {\n\t\tif (cell.index < 0) {\n\t\t\tthrow new Error('CANNOT execute cell that has been REMOVED from notebook');\n\t\t}\n\t\tconst notebook = this._extHostNotebook.getNotebookDocument(cell.notebook.uri);\n\t\tconst cellObj = notebook.getCellFromApiCell(cell);\n\t\tif (!cellObj) {\n\t\t\tthrow new Error('invalid cell');\n\t\t}\n\t\tif (this._activeExecutions.has(cellObj.uri)) {\n\t\t\tthrow new Error(`duplicate execution for ${cellObj.uri}`);\n\t\t}\n\t\tconst execution = new NotebookCellExecutionTask(controllerId, cellObj, this._proxy);\n\t\tthis._activeExecutions.set(cellObj.uri, execution);\n\t\tconst listener = execution.onDidChangeState(() => {\n\t\t\tif (execution.state === NotebookCellExecutionTaskState.Resolved) {\n\t\t\t\texecution.dispose();\n\t\t\t\tlistener.dispose();\n\t\t\t\tthis._activeExecutions.delete(cellObj.uri);\n\t\t\t}\n\t\t});\n\t\treturn execution.asApiObject();\n\t}\n\n\t// ---\n\n\t_createNotebookExecution(nb: vscode.NotebookDocument, controllerId: string): vscode.NotebookExecution {\n\t\tconst notebook = this._extHostNotebook.getNotebookDocument(nb.uri);\n\t\tconst runningCell = nb.getCells().find(cell => {\n\t\t\tconst apiCell = notebook.getCellFromApiCell(cell);\n\t\t\treturn apiCell && this._activeExecutions.has(apiCell.uri);\n\t\t});\n\t\tif (runningCell) {\n\t\t\tthrow new Error(`duplicate cell execution for ${runningCell.document.uri}`);\n\t\t}\n\t\tif (this._activeNotebookExecutions.has(notebook.uri)) {\n\t\t\tthrow new Error(`duplicate notebook execution for ${notebook.uri}`);\n\t\t}\n\t\tconst execution = new NotebookExecutionTask(controllerId, notebook, this._proxy);\n\t\tconst listener = execution.onDidChangeState(() => {\n\t\t\tif (execution.state === NotebookExecutionTaskState.Resolved) {\n\t\t\t\texecution.dispose();\n\t\t\t\tlistener.dispose();\n\t\t\t\tthis._activeNotebookExecutions.delete(notebook.uri);\n\t\t\t}\n\t\t});\n\t\tthis._activeNotebookExecutions.set(notebook.uri, [execution, listener]);\n\t\treturn execution.asApiObject();\n\t}\n}\n\n\nenum NotebookCellExecutionTaskState {\n\tInit,\n\tStarted,\n\tResolved\n}\n\nclass NotebookCellExecutionTask extends Disposable {\n\tprivate static HANDLE = 0;\n\tprivate _handle = NotebookCellExecutionTask.HANDLE++;\n\n\tprivate _onDidChangeState = new Emitter<void>();\n\treadonly onDidChangeState = this._onDidChangeState.event;\n\n\tprivate _state = NotebookCellExecutionTaskState.Init;\n\tget state(): NotebookCellExecutionTaskState { return this._state; }\n\n\tprivate readonly _tokenSource = this._register(new CancellationTokenSource());\n\n\tprivate readonly _collector: TimeoutBasedCollector<ICellExecuteUpdateDto>;\n\n\tprivate _executionOrder: number | undefined;\n\n\tconstructor(\n\t\tcontrollerId: string,\n\t\tprivate readonly _cell: ExtHostCell,\n\t\tprivate readonly _proxy: MainThreadNotebookKernelsShape\n\t) {\n\t\tsuper();\n\n\t\tthis._collector = new TimeoutBasedCollector(10, updates => this.update(updates));\n\n\t\tthis._executionOrder = _cell.internalMetadata.executionOrder;\n\t\tthis._proxy.$createExecution(this._handle, controllerId, this._cell.notebook.uri, this._cell.handle);\n\t}\n\n\tcancel(): void {\n\t\tthis._tokenSource.cancel();\n\t}\n\n\tprivate async updateSoon(update: ICellExecuteUpdateDto): Promise<void> {\n\t\tawait this._collector.addItem(update);\n\t}\n\n\tprivate async update(update: ICellExecuteUpdateDto | ICellExecuteUpdateDto[]): Promise<void> {\n\t\tconst updates = Array.isArray(update) ? update : [update];\n\t\treturn this._proxy.$updateExecution(this._handle, new SerializableObjectWithBuffers(updates));\n\t}\n\n\tprivate verifyStateForOutput() {\n\t\tif (this._state === NotebookCellExecutionTaskState.Init) {\n\t\t\tthrow new Error('Must call start before modifying cell output');\n\t\t}\n\n\t\tif (this._state === NotebookCellExecutionTaskState.Resolved) {\n\t\t\tthrow new Error('Cannot modify cell output after calling resolve');\n\t\t}\n\t}\n\n\tprivate cellIndexToHandle(cellOrCellIndex: vscode.NotebookCell | undefined): number {\n\t\tlet cell: ExtHostCell | undefined = this._cell;\n\t\tif (cellOrCellIndex) {\n\t\t\tcell = this._cell.notebook.getCellFromApiCell(cellOrCellIndex);\n\t\t}\n\t\tif (!cell) {\n\t\t\tthrow new Error('INVALID cell');\n\t\t}\n\t\treturn cell.handle;\n\t}\n\n\tprivate validateAndConvertOutputs(items: vscode.NotebookCellOutput[]): NotebookOutputDto[] {\n\t\treturn items.map(output => {\n\t\t\tconst newOutput = NotebookCellOutput.ensureUniqueMimeTypes(output.items, true);\n\t\t\tif (newOutput === output.items) {\n\t\t\t\treturn extHostTypeConverters.NotebookCellOutput.from(output);\n\t\t\t}\n\t\t\treturn extHostTypeConverters.NotebookCellOutput.from({\n\t\t\t\titems: newOutput,\n\t\t\t\tid: output.id,\n\t\t\t\tmetadata: output.metadata\n\t\t\t});\n\t\t});\n\t}\n\n\tprivate async updateOutputs(outputs: vscode.NotebookCellOutput | vscode.NotebookCellOutput[], cell: vscode.NotebookCell | undefined, append: boolean): Promise<void> {\n\t\tconst handle = this.cellIndexToHandle(cell);\n\t\tconst outputDtos = this.validateAndConvertOutputs(asArray(outputs));\n\t\treturn this.updateSoon(\n\t\t\t{\n\t\t\t\teditType: CellExecutionUpdateType.Output,\n\t\t\t\tcellHandle: handle,\n\t\t\t\tappend,\n\t\t\t\toutputs: outputDtos\n\t\t\t});\n\t}\n\n\tprivate async updateOutputItems(items: vscode.NotebookCellOutputItem | vscode.NotebookCellOutputItem[], output: vscode.NotebookCellOutput, append: boolean): Promise<void> {\n\t\titems = NotebookCellOutput.ensureUniqueMimeTypes(asArray(items), true);\n\t\treturn this.updateSoon({\n\t\t\teditType: CellExecutionUpdateType.OutputItems,\n\t\t\titems: items.map(extHostTypeConverters.NotebookCellOutputItem.from),\n\t\t\toutputId: output.id,\n\t\t\tappend\n\t\t});\n\t}\n\n\tasApiObject(): vscode.NotebookCellExecution {\n\t\tconst that = this;\n\t\tconst result: vscode.NotebookCellExecution = {\n\t\t\tget token() { return that._tokenSource.token; },\n\t\t\tget cell() { return that._cell.apiCell; },\n\t\t\tget executionOrder() { return that._executionOrder; },\n\t\t\tset executionOrder(v: number | undefined) {\n\t\t\t\tthat._executionOrder = v;\n\t\t\t\tthat.update([{\n\t\t\t\t\teditType: CellExecutionUpdateType.ExecutionState,\n\t\t\t\t\texecutionOrder: that._executionOrder\n\t\t\t\t}]);\n\t\t\t},\n\n\t\t\tstart(startTime?: number): void {\n\t\t\t\tif (that._state === NotebookCellExecutionTaskState.Resolved || that._state === NotebookCellExecutionTaskState.Started) {\n\t\t\t\t\tthrow new Error('Cannot call start again');\n\t\t\t\t}\n\n\t\t\t\tthat._state = NotebookCellExecutionTaskState.Started;\n\t\t\t\tthat._onDidChangeState.fire();\n\n\t\t\t\tthat.update({\n\t\t\t\t\teditType: CellExecutionUpdateType.ExecutionState,\n\t\t\t\t\trunStartTime: startTime\n\t\t\t\t});\n\t\t\t},\n\n\t\t\tend(success: boolean | undefined, endTime?: number, executionError?: vscode.CellExecutionError): void {\n\t\t\t\tif (that._state === NotebookCellExecutionTaskState.Resolved) {\n\t\t\t\t\tthrow new Error('Cannot call resolve twice');\n\t\t\t\t}\n\n\t\t\t\tthat._state = NotebookCellExecutionTaskState.Resolved;\n\t\t\t\tthat._onDidChangeState.fire();\n\n\t\t\t\t// The last update needs to be ordered correctly and applied immediately,\n\t\t\t\t// so we use updateSoon and immediately flush.\n\t\t\t\tthat._collector.flush();\n\n\t\t\t\tconst error = executionError ? {\n\t\t\t\t\tmessage: executionError.message,\n\t\t\t\t\tstack: executionError.stack,\n\t\t\t\t\tlocation: executionError?.location ? {\n\t\t\t\t\t\tstartLineNumber: executionError.location.start.line,\n\t\t\t\t\t\tstartColumn: executionError.location.start.character,\n\t\t\t\t\t\tendLineNumber: executionError.location.end.line,\n\t\t\t\t\t\tendColumn: executionError.location.end.character\n\t\t\t\t\t} : undefined,\n\t\t\t\t\turi: executionError.uri\n\t\t\t\t} : undefined;\n\n\t\t\t\tthat._proxy.$completeExecution(that._handle, new SerializableObjectWithBuffers({\n\t\t\t\t\trunEndTime: endTime,\n\t\t\t\t\tlastRunSuccess: success,\n\t\t\t\t\terror\n\t\t\t\t}));\n\t\t\t},\n\n\t\t\tclearOutput(cell?: vscode.NotebookCell): Thenable<void> {\n\t\t\t\tthat.verifyStateForOutput();\n\t\t\t\treturn that.updateOutputs([], cell, false);\n\t\t\t},\n\n\t\t\tappendOutput(outputs: vscode.NotebookCellOutput | vscode.NotebookCellOutput[], cell?: vscode.NotebookCell): Promise<void> {\n\t\t\t\tthat.verifyStateForOutput();\n\t\t\t\treturn that.updateOutputs(outputs, cell, true);\n\t\t\t},\n\n\t\t\treplaceOutput(outputs: vscode.NotebookCellOutput | vscode.NotebookCellOutput[], cell?: vscode.NotebookCell): Promise<void> {\n\t\t\t\tthat.verifyStateForOutput();\n\t\t\t\treturn that.updateOutputs(outputs, cell, false);\n\t\t\t},\n\n\t\t\tappendOutputItems(items: vscode.NotebookCellOutputItem | vscode.NotebookCellOutputItem[], output: vscode.NotebookCellOutput): Promise<void> {\n\t\t\t\tthat.verifyStateForOutput();\n\t\t\t\treturn that.updateOutputItems(items, output, true);\n\t\t\t},\n\n\t\t\treplaceOutputItems(items: vscode.NotebookCellOutputItem | vscode.NotebookCellOutputItem[], output: vscode.NotebookCellOutput): Promise<void> {\n\t\t\t\tthat.verifyStateForOutput();\n\t\t\t\treturn that.updateOutputItems(items, output, false);\n\t\t\t}\n\t\t};\n\t\treturn Object.freeze(result);\n\t}\n}\n\n\nenum NotebookExecutionTaskState {\n\tInit,\n\tStarted,\n\tResolved\n}\n\n\nclass NotebookExecutionTask extends Disposable {\n\tprivate static HANDLE = 0;\n\tprivate _handle = NotebookExecutionTask.HANDLE++;\n\n\tprivate _onDidChangeState = new Emitter<void>();\n\treadonly onDidChangeState = this._onDidChangeState.event;\n\n\tprivate _state = NotebookExecutionTaskState.Init;\n\tget state(): NotebookExecutionTaskState { return this._state; }\n\n\tprivate readonly _tokenSource = this._register(new CancellationTokenSource());\n\n\tconstructor(\n\t\tcontrollerId: string,\n\t\tprivate readonly _notebook: ExtHostNotebookDocument,\n\t\tprivate readonly _proxy: MainThreadNotebookKernelsShape\n\t) {\n\t\tsuper();\n\n\t\tthis._proxy.$createNotebookExecution(this._handle, controllerId, this._notebook.uri);\n\t}\n\n\tcancel(): void {\n\t\tthis._tokenSource.cancel();\n\t}\n\tasApiObject(): vscode.NotebookExecution {\n\t\tconst result: vscode.NotebookExecution = {\n\t\t\tstart: () => {\n\t\t\t\tif (this._state === NotebookExecutionTaskState.Resolved || this._state === NotebookExecutionTaskState.Started) {\n\t\t\t\t\tthrow new Error('Cannot call start again');\n\t\t\t\t}\n\n\t\t\t\tthis._state = NotebookExecutionTaskState.Started;\n\t\t\t\tthis._onDidChangeState.fire();\n\n\t\t\t\tthis._proxy.$beginNotebookExecution(this._handle);\n\t\t\t},\n\n\t\t\tend: () => {\n\t\t\t\tif (this._state === NotebookExecutionTaskState.Resolved) {\n\t\t\t\t\tthrow new Error('Cannot call resolve twice');\n\t\t\t\t}\n\n\t\t\t\tthis._state = NotebookExecutionTaskState.Resolved;\n\t\t\t\tthis._onDidChangeState.fire();\n\n\t\t\t\tthis._proxy.$completeNotebookExecution(this._handle);\n\t\t\t},\n\n\t\t};\n\t\treturn Object.freeze(result);\n\t}\n}\n\nclass TimeoutBasedCollector<T> {\n\tprivate batch: T[] = [];\n\tprivate startedTimer = Date.now();\n\tprivate currentDeferred: DeferredPromise<void> | undefined;\n\n\tconstructor(\n\t\tprivate readonly delay: number,\n\t\tprivate readonly callback: (items: T[]) => Promise<void>) { }\n\n\taddItem(item: T): Promise<void> {\n\t\tthis.batch.push(item);\n\t\tif (!this.currentDeferred) {\n\t\t\tthis.currentDeferred = new DeferredPromise<void>();\n\t\t\tthis.startedTimer = Date.now();\n\t\t\ttimeout(this.delay).then(() => {\n\t\t\t\treturn this.flush();\n\t\t\t});\n\t\t}\n\n\t\t// This can be called by the extension repeatedly for a long time before the timeout is able to run.\n\t\t// Force a flush after the delay.\n\t\tif (Date.now() - this.startedTimer > this.delay) {\n\t\t\treturn this.flush();\n\t\t}\n\n\t\treturn this.currentDeferred.p;\n\t}\n\n\tflush(): Promise<void> {\n\t\tif (this.batch.length === 0 || !this.currentDeferred) {\n\t\t\treturn Promise.resolve();\n\t\t}\n\n\t\tconst deferred = this.currentDeferred;\n\t\tthis.currentDeferred = undefined;\n\t\tconst batch = this.batch;\n\t\tthis.batch = [];\n\t\treturn this.callback(batch)\n\t\t\t.finally(() => deferred.complete());\n\t}\n}\n\nexport function createKernelId(extensionIdentifier: ExtensionIdentifier, id: string): string {\n\treturn `${extensionIdentifier.value}/${id}`;\n}\n"],
  "mappings": "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",
  "names": ["data", "NotebookCellExecutionTaskState", "NotebookExecutionTaskState"]
}
