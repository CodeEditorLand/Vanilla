{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/api/common/extHostStoragePaths.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IExtensionDescription } from '../../../platform/extensions/common/extensions.js';\nimport { createDecorator } from '../../../platform/instantiation/common/instantiation.js';\nimport { IExtHostInitDataService } from './extHostInitDataService.js';\nimport { ILogService } from '../../../platform/log/common/log.js';\nimport { IEnvironment, IStaticWorkspaceData } from '../../services/extensions/common/extensionHostProtocol.js';\nimport { IExtHostConsumerFileSystem } from './extHostFileSystemConsumer.js';\nimport { URI } from '../../../base/common/uri.js';\n\nexport const IExtensionStoragePaths = createDecorator<IExtensionStoragePaths>('IExtensionStoragePaths');\n\nexport interface IExtensionStoragePaths {\n\treadonly _serviceBrand: undefined;\n\twhenReady: Promise<any>;\n\tworkspaceValue(extension: IExtensionDescription): URI | undefined;\n\tglobalValue(extension: IExtensionDescription): URI;\n\tonWillDeactivateAll(): void;\n}\n\nexport class ExtensionStoragePaths implements IExtensionStoragePaths {\n\n\treadonly _serviceBrand: undefined;\n\n\tprivate readonly _workspace?: IStaticWorkspaceData;\n\tprotected readonly _environment: IEnvironment;\n\n\treadonly whenReady: Promise<URI | undefined>;\n\tprivate _value?: URI;\n\n\tconstructor(\n\t\t@IExtHostInitDataService initData: IExtHostInitDataService,\n\t\t@ILogService protected readonly _logService: ILogService,\n\t\t@IExtHostConsumerFileSystem private readonly _extHostFileSystem: IExtHostConsumerFileSystem\n\t) {\n\t\tthis._workspace = initData.workspace ?? undefined;\n\t\tthis._environment = initData.environment;\n\t\tthis.whenReady = this._getOrCreateWorkspaceStoragePath().then(value => this._value = value);\n\t}\n\n\tprotected async _getWorkspaceStorageURI(storageName: string): Promise<URI> {\n\t\treturn URI.joinPath(this._environment.workspaceStorageHome, storageName);\n\t}\n\n\tprivate async _getOrCreateWorkspaceStoragePath(): Promise<URI | undefined> {\n\t\tif (!this._workspace) {\n\t\t\treturn Promise.resolve(undefined);\n\t\t}\n\t\tconst storageName = this._workspace.id;\n\t\tconst storageUri = await this._getWorkspaceStorageURI(storageName);\n\n\t\ttry {\n\t\t\tawait this._extHostFileSystem.value.stat(storageUri);\n\t\t\tthis._logService.trace('[ExtHostStorage] storage dir already exists', storageUri);\n\t\t\treturn storageUri;\n\t\t} catch {\n\t\t\t// doesn't exist, that's OK\n\t\t}\n\n\t\ttry {\n\t\t\tthis._logService.trace('[ExtHostStorage] creating dir and metadata-file', storageUri);\n\t\t\tawait this._extHostFileSystem.value.createDirectory(storageUri);\n\t\t\tawait this._extHostFileSystem.value.writeFile(\n\t\t\t\tURI.joinPath(storageUri, 'meta.json'),\n\t\t\t\tnew TextEncoder().encode(JSON.stringify({\n\t\t\t\t\tid: this._workspace.id,\n\t\t\t\t\tconfiguration: URI.revive(this._workspace.configuration)?.toString(),\n\t\t\t\t\tname: this._workspace.name\n\t\t\t\t}, undefined, 2))\n\t\t\t);\n\t\t\treturn storageUri;\n\n\t\t} catch (e) {\n\t\t\tthis._logService.error('[ExtHostStorage]', e);\n\t\t\treturn undefined;\n\t\t}\n\t}\n\n\tworkspaceValue(extension: IExtensionDescription): URI | undefined {\n\t\tif (this._value) {\n\t\t\treturn URI.joinPath(this._value, extension.identifier.value);\n\t\t}\n\t\treturn undefined;\n\t}\n\n\tglobalValue(extension: IExtensionDescription): URI {\n\t\treturn URI.joinPath(this._environment.globalStorageHome, extension.identifier.value.toLowerCase());\n\t}\n\n\tonWillDeactivateAll(): void {\n\t}\n}\n"],
  "mappings": ";;;;;;;;;;;;AAKA,SAAS,6BAA6B;AACtC,SAAS,uBAAuB;AAChC,SAAS,+BAA+B;AACxC,SAAS,mBAAmB;AAC5B,SAAS,cAAc,4BAA4B;AACnD,SAAS,kCAAkC;AAC3C,SAAS,WAAW;AAEb,MAAM,yBAAyB,gBAAwC,wBAAwB;AAU/F,IAAM,wBAAN,MAA8D;AAAA,EAUpE,YAC0B,UACO,aACa,oBAC5C;AAF+B;AACa;AAE7C,SAAK,aAAa,SAAS,aAAa;AACxC,SAAK,eAAe,SAAS;AAC7B,SAAK,YAAY,KAAK,iCAAiC,EAAE,KAAK,WAAS,KAAK,SAAS,KAAK;AAAA,EAC3F;AAAA,EAzCD,OAuBqE;AAAA;AAAA;AAAA,EAE3D;AAAA,EAEQ;AAAA,EACE;AAAA,EAEV;AAAA,EACD;AAAA,EAYR,MAAgB,wBAAwB,aAAmC;AAC1E,WAAO,IAAI,SAAS,KAAK,aAAa,sBAAsB,WAAW;AAAA,EACxE;AAAA,EAEA,MAAc,mCAA6D;AAC1E,QAAI,CAAC,KAAK,YAAY;AACrB,aAAO,QAAQ,QAAQ,MAAS;AAAA,IACjC;AACA,UAAM,cAAc,KAAK,WAAW;AACpC,UAAM,aAAa,MAAM,KAAK,wBAAwB,WAAW;AAEjE,QAAI;AACH,YAAM,KAAK,mBAAmB,MAAM,KAAK,UAAU;AACnD,WAAK,YAAY,MAAM,+CAA+C,UAAU;AAChF,aAAO;AAAA,IACR,QAAQ;AAAA,IAER;AAEA,QAAI;AACH,WAAK,YAAY,MAAM,mDAAmD,UAAU;AACpF,YAAM,KAAK,mBAAmB,MAAM,gBAAgB,UAAU;AAC9D,YAAM,KAAK,mBAAmB,MAAM;AAAA,QACnC,IAAI,SAAS,YAAY,WAAW;AAAA,QACpC,IAAI,YAAY,EAAE,OAAO,KAAK,UAAU;AAAA,UACvC,IAAI,KAAK,WAAW;AAAA,UACpB,eAAe,IAAI,OAAO,KAAK,WAAW,aAAa,GAAG,SAAS;AAAA,UACnE,MAAM,KAAK,WAAW;AAAA,QACvB,GAAG,QAAW,CAAC,CAAC;AAAA,MACjB;AACA,aAAO;AAAA,IAER,SAAS,GAAG;AACX,WAAK,YAAY,MAAM,oBAAoB,CAAC;AAC5C,aAAO;AAAA,IACR;AAAA,EACD;AAAA,EAEA,eAAe,WAAmD;AACjE,QAAI,KAAK,QAAQ;AAChB,aAAO,IAAI,SAAS,KAAK,QAAQ,UAAU,WAAW,KAAK;AAAA,IAC5D;AACA,WAAO;AAAA,EACR;AAAA,EAEA,YAAY,WAAuC;AAClD,WAAO,IAAI,SAAS,KAAK,aAAa,mBAAmB,UAAU,WAAW,MAAM,YAAY,CAAC;AAAA,EAClG;AAAA,EAEA,sBAA4B;AAAA,EAC5B;AACD;AAvEa,wBAAN;AAAA,EAWJ;AAAA,EACA;AAAA,EACA;AAAA,GAbU;",
  "names": []
}
