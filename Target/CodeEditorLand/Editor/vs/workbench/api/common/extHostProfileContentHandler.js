import"../../../base/common/cancellation.js";import{toDisposable as i}from"../../../base/common/lifecycle.js";import{isString as s}from"../../../base/common/types.js";import{URI as a}from"../../../base/common/uri.js";import"../../../platform/extensions/common/extensions.js";import{checkProposedApiEnabled as l}from"../../services/extensions/common/extensions.js";import"../../services/userDataProfile/common/userDataProfile.js";import{MainContext as d}from"./extHost.protocol.js";class M{proxy;handlers=new Map;constructor(r){this.proxy=r.getProxy(d.MainThreadProfileContentHandlers)}registerProfileContentHandler(r,e,n){if(l(r,"profileContentHandlers"),this.handlers.has(e))throw new Error(`Handler with id '${e}' already registered`);return this.handlers.set(e,n),this.proxy.$registerProfileContentHandler(e,n.name,n.description,r.identifier.value),i(()=>{this.handlers.delete(e),this.proxy.$unregisterProfileContentHandler(e)})}async $saveProfile(r,e,n,t){const o=this.handlers.get(r);if(!o)throw new Error(`Unknown handler with id: ${r}`);return o.saveProfile(e,n,t)}async $readProfile(r,e,n){const t=this.handlers.get(r);if(!t)throw new Error(`Unknown handler with id: ${r}`);return t.readProfile(s(e)?e:a.revive(e),n)}}export{M as ExtHostProfileContentHandlers};
