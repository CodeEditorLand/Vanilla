var u=Object.defineProperty;var f=Object.getOwnPropertyDescriptor;var h=(l,e,t,r)=>{for(var o=r>1?void 0:r?f(e,t):e,i=l.length-1,n;i>=0;i--)(n=l[i])&&(o=(r?n(e,t,o):n(o))||o);return r&&o&&u(e,t,o),o},d=(l,e)=>(t,r)=>e(t,r,l);import{Emitter as m}from"../../../../vs/base/common/event.js";import{Disposable as E}from"../../../../vs/base/common/lifecycle.js";import{mixin as p}from"../../../../vs/base/common/objects.js";import{URI as v}from"../../../../vs/base/common/uri.js";import{localize as b}from"../../../../vs/nls.js";import"../../../../vs/platform/extensions/common/extensions.js";import{createDecorator as _}from"../../../../vs/platform/instantiation/common/instantiation.js";import{ILoggerService as T,isLogLevel as L,LogLevel as D}from"../../../../vs/platform/log/common/log.js";import{getRemoteName as C}from"../../../../vs/platform/remote/common/remoteHosts.js";import{TelemetryLevel as a}from"../../../../vs/platform/telemetry/common/telemetry.js";import{cleanData as y,cleanRemoteAuthority as I,extensionTelemetryLogChannelId as x}from"../../../../vs/platform/telemetry/common/telemetryUtils.js";import"../../../../vs/workbench/api/common/extHost.protocol.js";import{IExtHostInitDataService as S}from"../../../../vs/workbench/api/common/extHostInitDataService.js";import{UIKind as c}from"../../../../vs/workbench/services/extensions/common/extensionHostProtocol.js";let g=class extends E{constructor(t,r){super();this.initData=t;this.loggerService=r;this.extHostTelemetryLogFile=v.revive(this.initData.environment.extensionTelemetryLogResource),this._inLoggingOnlyMode=this.initData.environment.isExtensionTelemetryLoggingOnly,this._outputLogger=r.createLogger(this.extHostTelemetryLogFile,{id:x,name:b("extensionTelemetryLog","Extension Telemetry{0}",this._inLoggingOnlyMode?" (Not Sent)":""),hidden:!0}),this._register(this._outputLogger),this._register(r.onDidChangeLogLevel(o=>{L(o)&&this.updateLoggerVisibility()})),this._outputLogger.info("Below are logs for extension telemetry events sent to the telemetry output channel API once the log level is set to trace."),this._outputLogger.info("===========================================================")}_serviceBrand;_onDidChangeTelemetryEnabled=this._register(new m);onDidChangeTelemetryEnabled=this._onDidChangeTelemetryEnabled.event;_onDidChangeTelemetryConfiguration=this._register(new m);onDidChangeTelemetryConfiguration=this._onDidChangeTelemetryConfiguration.event;_productConfig={usage:!0,error:!0};_level=a.NONE;_telemetryIsSupported=!1;_oldTelemetryEnablement;_inLoggingOnlyMode=!1;extHostTelemetryLogFile;_outputLogger;_telemetryLoggers=new Map;updateLoggerVisibility(){this.loggerService.setVisibility(this.extHostTelemetryLogFile,this._telemetryIsSupported&&this.loggerService.getLogLevel()===D.Trace)}getTelemetryConfiguration(){return this._level===a.USAGE}getTelemetryDetails(){return{isCrashEnabled:this._level>=a.CRASH,isErrorsEnabled:this._productConfig.error?this._level>=a.ERROR:!1,isUsageEnabled:this._productConfig.usage?this._level>=a.USAGE:!1}}instantiateLogger(t,r,o){const i=this.getTelemetryDetails(),n=new w(r,o,t,this._outputLogger,this._inLoggingOnlyMode,this.getBuiltInCommonProperties(t),{isUsageEnabled:i.isUsageEnabled,isErrorsEnabled:i.isErrorsEnabled}),s=this._telemetryLoggers.get(t.identifier.value)??[];return this._telemetryLoggers.set(t.identifier.value,[...s,n]),n.apiTelemetryLogger}$initializeTelemetryLevel(t,r,o){this._level=t,this._telemetryIsSupported=r,this._productConfig=o??{usage:!0,error:!0},this.updateLoggerVisibility()}getBuiltInCommonProperties(t){const r=Object.create(null);switch(r["common.extname"]=`${t.publisher}.${t.name}`,r["common.extversion"]=t.version,r["common.vscodemachineid"]=this.initData.telemetryInfo.machineId,r["common.vscodesessionid"]=this.initData.telemetryInfo.sessionId,r["common.sqmid"]=this.initData.telemetryInfo.sqmId,r["common.devDeviceId"]=this.initData.telemetryInfo.devDeviceId,r["common.vscodeversion"]=this.initData.version,r["common.isnewappinstall"]=U(this.initData.telemetryInfo.firstSessionDate),r["common.product"]=this.initData.environment.appHost,this.initData.uiKind){case c.Web:r["common.uikind"]="web";break;case c.Desktop:r["common.uikind"]="desktop";break;default:r["common.uikind"]="unknown"}return r["common.remotename"]=C(I(this.initData.remote.authority)),r}$onDidChangeTelemetryLevel(t){this._oldTelemetryEnablement=this.getTelemetryConfiguration(),this._level=t;const r=this.getTelemetryDetails();this._telemetryLoggers.forEach((o,i)=>{const n=o.filter(s=>!s.isDisposed);n.length===0?this._telemetryLoggers.delete(i):this._telemetryLoggers.set(i,n)}),this._telemetryLoggers.forEach(o=>{for(const i of o)i.updateTelemetryEnablements(r.isUsageEnabled,r.isErrorsEnabled)}),this._oldTelemetryEnablement!==this.getTelemetryConfiguration()&&this._onDidChangeTelemetryEnabled.fire(this.getTelemetryConfiguration()),this._onDidChangeTelemetryConfiguration.fire(this.getTelemetryDetails()),this.updateLoggerVisibility()}onExtensionError(t,r){const i=this._telemetryLoggers.get(t.value)?.filter(s=>!s.isDisposed);if(!i)return this._telemetryLoggers.delete(t.value),!1;let n=!1;for(const s of i)s.ignoreUnhandledExtHostErrors||(s.logError(r),n=!0);return n}};g=h([d(0,S),d(1,T)],g);class w{constructor(e,t,r,o,i,n,s){this._extension=r;this._logger=o;this._inLoggingOnlyMode=i;this._commonProperties=n;this.ignoreUnhandledExtHostErrors=t?.ignoreUnhandledErrors??!1,this._ignoreBuiltinCommonProperties=t?.ignoreBuiltInCommonProperties??!1,this._additionalCommonProperties=t?.additionalCommonProperties,this._sender=e,this._telemetryEnablements={isUsageEnabled:s.isUsageEnabled,isErrorsEnabled:s.isErrorsEnabled}}static validateSender(e){if(typeof e!="object")throw new TypeError("TelemetrySender argument is invalid");if(typeof e.sendEventData!="function")throw new TypeError("TelemetrySender.sendEventData must be a function");if(typeof e.sendErrorData!="function")throw new TypeError("TelemetrySender.sendErrorData must be a function");if(typeof e.flush<"u"&&typeof e.flush!="function")throw new TypeError("TelemetrySender.flush must be a function or undefined")}_onDidChangeEnableStates=new m;_ignoreBuiltinCommonProperties;_additionalCommonProperties;ignoreUnhandledExtHostErrors;_telemetryEnablements;_apiObject;_sender;updateTelemetryEnablements(e,t){this._apiObject&&(this._telemetryEnablements={isUsageEnabled:e,isErrorsEnabled:t},this._onDidChangeEnableStates.fire(this._apiObject))}mixInCommonPropsAndCleanData(e){let t="properties"in e?e.properties??{}:e;return t=y(t,[]),this._additionalCommonProperties&&(t=p(t,this._additionalCommonProperties)),this._ignoreBuiltinCommonProperties||(t=p(t,this._commonProperties)),"properties"in e?e.properties=t:e=t,e}logEvent(e,t){this._sender&&(this._extension.publisher==="vscode"?e=this._extension.name+"/"+e:e=this._extension.identifier.value+"/"+e,t=this.mixInCommonPropsAndCleanData(t||{}),this._inLoggingOnlyMode||this._sender?.sendEventData(e,t),this._logger.trace(e,t))}logUsage(e,t){this._telemetryEnablements.isUsageEnabled&&this.logEvent(e,t)}logError(e,t){if(!(!this._telemetryEnablements.isErrorsEnabled||!this._sender))if(typeof e=="string")this.logEvent(e,t);else{const r={name:e.name,message:e.message,stack:e.stack,cause:e.cause},o=y(r,[]),i=new Error(o.message,{cause:o.cause});i.stack=o.stack,i.name=o.name,t=this.mixInCommonPropsAndCleanData(t||{}),this._inLoggingOnlyMode||this._sender.sendErrorData(i,t),this._logger.trace("exception",t)}}get apiTelemetryLogger(){if(!this._apiObject){const e=this,t={logUsage:e.logUsage.bind(e),get isUsageEnabled(){return e._telemetryEnablements.isUsageEnabled},get isErrorsEnabled(){return e._telemetryEnablements.isErrorsEnabled},logError:e.logError.bind(e),dispose:e.dispose.bind(e),onDidChangeEnableStates:e._onDidChangeEnableStates.event.bind(e)};this._apiObject=Object.freeze(t)}return this._apiObject}get isDisposed(){return!this._sender}dispose(){if(this._sender?.flush){let e=this._sender;this._sender=void 0,Promise.resolve(e.flush()).then(e=void 0),this._apiObject=void 0}else this._sender=void 0}}function U(l){const e=Date.now()-new Date(l).getTime();return isNaN(e)?!1:e<1e3*60*60*24}const Z=_("IExtHostTelemetry");export{g as ExtHostTelemetry,w as ExtHostTelemetryLogger,Z as IExtHostTelemetry,U as isNewAppInstall};
