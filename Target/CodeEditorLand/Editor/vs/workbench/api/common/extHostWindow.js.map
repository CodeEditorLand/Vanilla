{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/api/common/extHostWindow.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport type { WindowState } from \"vscode\";\nimport { Emitter, type Event } from \"../../../base/common/event.js\";\nimport { Schemas } from \"../../../base/common/network.js\";\nimport { isFalsyOrWhitespace } from \"../../../base/common/strings.js\";\nimport { URI } from \"../../../base/common/uri.js\";\nimport { createDecorator } from \"../../../platform/instantiation/common/instantiation.js\";\nimport {\n\ttype ExtHostWindowShape,\n\ttype IOpenUriOptions,\n\tMainContext,\n\ttype MainThreadWindowShape,\n} from \"./extHost.protocol.js\";\nimport { IExtHostRpcService } from \"./extHostRpcService.js\";\n\nexport class ExtHostWindow implements ExtHostWindowShape {\n\tprivate static InitialState: WindowState = {\n\t\tfocused: true,\n\t\tactive: true,\n\t};\n\n\tprivate _proxy: MainThreadWindowShape;\n\n\tprivate readonly _onDidChangeWindowState = new Emitter<WindowState>();\n\treadonly onDidChangeWindowState: Event<WindowState> =\n\t\tthis._onDidChangeWindowState.event;\n\n\tprivate _state = ExtHostWindow.InitialState;\n\n\tgetState(): WindowState {\n\t\t// todo@connor4312: this can be changed to just return this._state after proposed api is finalized\n\t\tconst state = this._state;\n\n\t\treturn {\n\t\t\tget focused() {\n\t\t\t\treturn state.focused;\n\t\t\t},\n\t\t\tget active() {\n\t\t\t\treturn state.active;\n\t\t\t},\n\t\t};\n\t}\n\n\tconstructor(@IExtHostRpcService extHostRpc: IExtHostRpcService) {\n\t\tthis._proxy = extHostRpc.getProxy(MainContext.MainThreadWindow);\n\t\tthis._proxy.$getInitialState().then(({ isFocused, isActive }) => {\n\t\t\tthis.onDidChangeWindowProperty('focused', isFocused);\n\t\t\tthis.onDidChangeWindowProperty('active', isActive);\n\t\t});\n\t}\n\n\t$onDidChangeWindowFocus(value: boolean) {\n\t\tthis.onDidChangeWindowProperty(\"focused\", value);\n\t}\n\n\t$onDidChangeWindowActive(value: boolean) {\n\t\tthis.onDidChangeWindowProperty(\"active\", value);\n\t}\n\n\tonDidChangeWindowProperty(\n\t\tproperty: keyof WindowState,\n\t\tvalue: boolean,\n\t): void {\n\t\tif (value === this._state[property]) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis._state = { ...this._state, [property]: value };\n\t\tthis._onDidChangeWindowState.fire(this._state);\n\t}\n\n\topenUri(\n\t\tstringOrUri: string | URI,\n\t\toptions: IOpenUriOptions,\n\t): Promise<boolean> {\n\t\tlet uriAsString: string | undefined;\n\t\tif (typeof stringOrUri === \"string\") {\n\t\t\turiAsString = stringOrUri;\n\t\t\ttry {\n\t\t\t\tstringOrUri = URI.parse(stringOrUri);\n\t\t\t} catch (e) {\n\t\t\t\treturn Promise.reject(`Invalid uri - '${stringOrUri}'`);\n\t\t\t}\n\t\t}\n\t\tif (isFalsyOrWhitespace(stringOrUri.scheme)) {\n\t\t\treturn Promise.reject(\"Invalid scheme - cannot be empty\");\n\t\t} else if (stringOrUri.scheme === Schemas.command) {\n\t\t\treturn Promise.reject(`Invalid scheme '${stringOrUri.scheme}'`);\n\t\t}\n\t\treturn this._proxy.$openUri(stringOrUri, uriAsString, options);\n\t}\n\n\tasync asExternalUri(uri: URI, options: IOpenUriOptions): Promise<URI> {\n\t\tif (isFalsyOrWhitespace(uri.scheme)) {\n\t\t\treturn Promise.reject(\"Invalid scheme - cannot be empty\");\n\t\t}\n\n\t\tconst result = await this._proxy.$asExternalUri(uri, options);\n\t\treturn URI.from(result);\n\t}\n}\n\nexport const IExtHostWindow = createDecorator<IExtHostWindow>(\"IExtHostWindow\");\nexport interface IExtHostWindow extends ExtHostWindow, ExtHostWindowShape {}\n"],
  "mappings": ";;;;;;;;;;;;AAMA,SAAS,eAA2B;AACpC,SAAS,eAAe;AACxB,SAAS,2BAA2B;AACpC,SAAS,WAAW;AACpB,SAAS,uBAAuB;AAChC;AAAA,EAGC;AAAA,OAEM;AACP,SAAS,0BAA0B;AAE5B,IAAM,gBAAN,MAAkD;AAAA,EAnBzD,OAmByD;AAAA;AAAA;AAAA,EACxD,OAAe,eAA4B;AAAA,IAC1C,SAAS;AAAA,IACT,QAAQ;AAAA,EACT;AAAA,EAEQ;AAAA,EAES,0BAA0B,IAAI,QAAqB;AAAA,EAC3D,yBACR,KAAK,wBAAwB;AAAA,EAEtB,SAAS,cAAc;AAAA,EAE/B,WAAwB;AAEvB,UAAM,QAAQ,KAAK;AAEnB,WAAO;AAAA,MACN,IAAI,UAAU;AACb,eAAO,MAAM;AAAA,MACd;AAAA,MACA,IAAI,SAAS;AACZ,eAAO,MAAM;AAAA,MACd;AAAA,IACD;AAAA,EACD;AAAA,EAEA,YAAgC,YAAgC;AAC/D,SAAK,SAAS,WAAW,SAAS,YAAY,gBAAgB;AAC9D,SAAK,OAAO,iBAAiB,EAAE,KAAK,CAAC,EAAE,WAAW,SAAS,MAAM;AAChE,WAAK,0BAA0B,WAAW,SAAS;AACnD,WAAK,0BAA0B,UAAU,QAAQ;AAAA,IAClD,CAAC;AAAA,EACF;AAAA,EAEA,wBAAwB,OAAgB;AACvC,SAAK,0BAA0B,WAAW,KAAK;AAAA,EAChD;AAAA,EAEA,yBAAyB,OAAgB;AACxC,SAAK,0BAA0B,UAAU,KAAK;AAAA,EAC/C;AAAA,EAEA,0BACC,UACA,OACO;AACP,QAAI,UAAU,KAAK,OAAO,QAAQ,GAAG;AACpC;AAAA,IACD;AAEA,SAAK,SAAS,EAAE,GAAG,KAAK,QAAQ,CAAC,QAAQ,GAAG,MAAM;AAClD,SAAK,wBAAwB,KAAK,KAAK,MAAM;AAAA,EAC9C;AAAA,EAEA,QACC,aACA,SACmB;AACnB,QAAI;AACJ,QAAI,OAAO,gBAAgB,UAAU;AACpC,oBAAc;AACd,UAAI;AACH,sBAAc,IAAI,MAAM,WAAW;AAAA,MACpC,SAAS,GAAG;AACX,eAAO,QAAQ,OAAO,kBAAkB,WAAW,GAAG;AAAA,MACvD;AAAA,IACD;AACA,QAAI,oBAAoB,YAAY,MAAM,GAAG;AAC5C,aAAO,QAAQ,OAAO,kCAAkC;AAAA,IACzD,WAAW,YAAY,WAAW,QAAQ,SAAS;AAClD,aAAO,QAAQ,OAAO,mBAAmB,YAAY,MAAM,GAAG;AAAA,IAC/D;AACA,WAAO,KAAK,OAAO,SAAS,aAAa,aAAa,OAAO;AAAA,EAC9D;AAAA,EAEA,MAAM,cAAc,KAAU,SAAwC;AACrE,QAAI,oBAAoB,IAAI,MAAM,GAAG;AACpC,aAAO,QAAQ,OAAO,kCAAkC;AAAA,IACzD;AAEA,UAAM,SAAS,MAAM,KAAK,OAAO,eAAe,KAAK,OAAO;AAC5D,WAAO,IAAI,KAAK,MAAM;AAAA,EACvB;AACD;AArFa,gBAAN;AAAA,EA4BO;AAAA,GA5BD;AAuFN,MAAM,iBAAiB,gBAAgC,gBAAgB;",
  "names": []
}
