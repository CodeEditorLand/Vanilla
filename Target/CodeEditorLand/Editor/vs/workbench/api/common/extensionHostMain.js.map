{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/api/common/extensionHostMain.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as errors from '../../../base/common/errors.js';\nimport * as performance from '../../../base/common/performance.js';\nimport { URI } from '../../../base/common/uri.js';\nimport { IURITransformer } from '../../../base/common/uriIpc.js';\nimport { IMessagePassingProtocol } from '../../../base/parts/ipc/common/ipc.js';\nimport { MainContext, MainThreadConsoleShape } from './extHost.protocol.js';\nimport { IExtensionHostInitData } from '../../services/extensions/common/extensionHostProtocol.js';\nimport { RPCProtocol } from '../../services/extensions/common/rpcProtocol.js';\nimport { ExtensionIdentifier, IExtensionDescription } from '../../../platform/extensions/common/extensions.js';\nimport { ILogService } from '../../../platform/log/common/log.js';\nimport { getSingletonServiceDescriptors } from '../../../platform/instantiation/common/extensions.js';\nimport { ServiceCollection } from '../../../platform/instantiation/common/serviceCollection.js';\nimport { IExtHostInitDataService } from './extHostInitDataService.js';\nimport { InstantiationService } from '../../../platform/instantiation/common/instantiationService.js';\nimport { IInstantiationService, ServicesAccessor } from '../../../platform/instantiation/common/instantiation.js';\nimport { IExtHostRpcService, ExtHostRpcService } from './extHostRpcService.js';\nimport { IURITransformerService, URITransformerService } from './extHostUriTransformerService.js';\nimport { IExtHostExtensionService, IHostUtils } from './extHostExtensionService.js';\nimport { IExtHostTelemetry } from './extHostTelemetry.js';\nimport { Mutable } from '../../../base/common/types.js';\n\nexport interface IExitFn {\n\t(code?: number): any;\n}\n\nexport interface IConsolePatchFn {\n\t(mainThreadConsole: MainThreadConsoleShape): any;\n}\n\nexport abstract class ErrorHandler {\n\n\tstatic async installEarlyHandler(accessor: ServicesAccessor): Promise<void> {\n\n\t\t// increase number of stack frames (from 10, https://github.com/v8/v8/wiki/Stack-Trace-API)\n\t\tError.stackTraceLimit = 100;\n\n\t\t// does NOT dependent of extension information, can be installed immediately, and simply forwards\n\t\t// to the log service and main thread errors\n\t\tconst logService = accessor.get(ILogService);\n\t\tconst rpcService = accessor.get(IExtHostRpcService);\n\t\tconst mainThreadErrors = rpcService.getProxy(MainContext.MainThreadErrors);\n\n\t\terrors.setUnexpectedErrorHandler(err => {\n\t\t\tlogService.error(err);\n\t\t\tconst data = errors.transformErrorForSerialization(err);\n\t\t\tmainThreadErrors.$onUnexpectedError(data);\n\t\t});\n\t}\n\n\tstatic async installFullHandler(accessor: ServicesAccessor): Promise<void> {\n\t\t// uses extension knowledges to correlate errors with extensions\n\n\t\tconst logService = accessor.get(ILogService);\n\t\tconst rpcService = accessor.get(IExtHostRpcService);\n\t\tconst extensionService = accessor.get(IExtHostExtensionService);\n\t\tconst extensionTelemetry = accessor.get(IExtHostTelemetry);\n\n\t\tconst mainThreadExtensions = rpcService.getProxy(MainContext.MainThreadExtensionService);\n\t\tconst mainThreadErrors = rpcService.getProxy(MainContext.MainThreadErrors);\n\n\t\tconst map = await extensionService.getExtensionPathIndex();\n\t\tconst extensionErrors = new WeakMap<Error, { extensionIdentifier: ExtensionIdentifier | undefined; stack: string }>();\n\n\t\t// PART 1\n\t\t// set the prepareStackTrace-handle and use it as a side-effect to associate errors\n\t\t// with extensions - this works by looking up callsites in the extension path index\n\t\tfunction prepareStackTraceAndFindExtension(error: Error, stackTrace: errors.V8CallSite[]) {\n\t\t\tif (extensionErrors.has(error)) {\n\t\t\t\treturn extensionErrors.get(error)!.stack;\n\t\t\t}\n\t\t\tlet stackTraceMessage = '';\n\t\t\tlet extension: IExtensionDescription | undefined;\n\t\t\tlet fileName: string | null;\n\t\t\tfor (const call of stackTrace) {\n\t\t\t\tstackTraceMessage += `\\n\\tat ${call.toString()}`;\n\t\t\t\tfileName = call.getFileName();\n\t\t\t\tif (!extension && fileName) {\n\t\t\t\t\textension = map.findSubstr(URI.file(fileName));\n\t\t\t\t}\n\t\t\t}\n\t\t\tconst result = `${error.name || 'Error'}: ${error.message || ''}${stackTraceMessage}`;\n\t\t\textensionErrors.set(error, { extensionIdentifier: extension?.identifier, stack: result });\n\t\t\treturn result;\n\t\t}\n\n\t\tconst _wasWrapped = Symbol('prepareStackTrace wrapped');\n\t\tlet _prepareStackTrace = prepareStackTraceAndFindExtension;\n\n\t\tObject.defineProperty(Error, 'prepareStackTrace', {\n\t\t\tconfigurable: false,\n\t\t\tget() {\n\t\t\t\treturn _prepareStackTrace;\n\t\t\t},\n\t\t\tset(v) {\n\t\t\t\tif (v === prepareStackTraceAndFindExtension || !v || v[_wasWrapped]) {\n\t\t\t\t\t_prepareStackTrace = v || prepareStackTraceAndFindExtension;\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t_prepareStackTrace = function (error, stackTrace) {\n\t\t\t\t\tprepareStackTraceAndFindExtension(error, stackTrace);\n\t\t\t\t\treturn v.call(Error, error, stackTrace);\n\t\t\t\t};\n\n\t\t\t\tObject.assign(_prepareStackTrace, { [_wasWrapped]: true });\n\t\t\t},\n\t\t});\n\n\t\t// PART 2\n\t\t// set the unexpectedErrorHandler and check for extensions that have been identified as\n\t\t// having caused the error. Note that the runtime order is actually reversed, the code\n\t\t// below accesses the stack-property which triggers the code above\n\t\terrors.setUnexpectedErrorHandler(err => {\n\t\t\tlogService.error(err);\n\n\t\t\tconst errorData = errors.transformErrorForSerialization(err);\n\t\t\tconst stackData = extensionErrors.get(err);\n\t\t\tif (!stackData?.extensionIdentifier) {\n\t\t\t\tmainThreadErrors.$onUnexpectedError(errorData);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tmainThreadExtensions.$onExtensionRuntimeError(stackData.extensionIdentifier, errorData);\n\t\t\tconst reported = extensionTelemetry.onExtensionError(stackData.extensionIdentifier, err);\n\t\t\tlogService.trace('forwarded error to extension?', reported, stackData);\n\t\t});\n\t}\n}\n\nexport class ExtensionHostMain {\n\n\tprivate readonly _hostUtils: IHostUtils;\n\tprivate readonly _rpcProtocol: RPCProtocol;\n\tprivate readonly _extensionService: IExtHostExtensionService;\n\tprivate readonly _logService: ILogService;\n\n\tconstructor(\n\t\tprotocol: IMessagePassingProtocol,\n\t\tinitData: IExtensionHostInitData,\n\t\thostUtils: IHostUtils,\n\t\turiTransformer: IURITransformer | null,\n\t\tmessagePorts?: ReadonlyMap<string, MessagePort>\n\t) {\n\t\tthis._hostUtils = hostUtils;\n\t\tthis._rpcProtocol = new RPCProtocol(protocol, null, uriTransformer);\n\n\t\t// ensure URIs are transformed and revived\n\t\tinitData = ExtensionHostMain._transform(initData, this._rpcProtocol);\n\n\t\t// bootstrap services\n\t\tconst services = new ServiceCollection(...getSingletonServiceDescriptors());\n\t\tservices.set(IExtHostInitDataService, { _serviceBrand: undefined, ...initData, messagePorts });\n\t\tservices.set(IExtHostRpcService, new ExtHostRpcService(this._rpcProtocol));\n\t\tservices.set(IURITransformerService, new URITransformerService(uriTransformer));\n\t\tservices.set(IHostUtils, hostUtils);\n\n\t\tconst instaService: IInstantiationService = new InstantiationService(services, true);\n\n\t\tinstaService.invokeFunction(ErrorHandler.installEarlyHandler);\n\n\t\t// ugly self - inject\n\t\tthis._logService = instaService.invokeFunction(accessor => accessor.get(ILogService));\n\n\t\tperformance.mark(`code/extHost/didCreateServices`);\n\t\tif (this._hostUtils.pid) {\n\t\t\tthis._logService.info(`Extension host with pid ${this._hostUtils.pid} started`);\n\t\t} else {\n\t\t\tthis._logService.info(`Extension host started`);\n\t\t}\n\t\tthis._logService.trace('initData', initData);\n\n\t\t// ugly self - inject\n\t\t// must call initialize *after* creating the extension service\n\t\t// because `initialize` itself creates instances that depend on it\n\t\tthis._extensionService = instaService.invokeFunction(accessor => accessor.get(IExtHostExtensionService));\n\t\tthis._extensionService.initialize();\n\n\t\t// install error handler that is extension-aware\n\t\tinstaService.invokeFunction(ErrorHandler.installFullHandler);\n\t}\n\n\tasync asBrowserUri(uri: URI): Promise<URI> {\n\t\tconst mainThreadExtensionsProxy = this._rpcProtocol.getProxy(MainContext.MainThreadExtensionService);\n\t\treturn URI.revive(await mainThreadExtensionsProxy.$asBrowserUri(uri));\n\t}\n\n\tterminate(reason: string): void {\n\t\tthis._extensionService.terminate(reason);\n\t}\n\n\tprivate static _transform(initData: IExtensionHostInitData, rpcProtocol: RPCProtocol): IExtensionHostInitData {\n\t\tinitData.extensions.allExtensions.forEach((ext) => {\n\t\t\t(<Mutable<IExtensionDescription>>ext).extensionLocation = URI.revive(rpcProtocol.transformIncomingURIs(ext.extensionLocation));\n\t\t});\n\t\tinitData.environment.appRoot = URI.revive(rpcProtocol.transformIncomingURIs(initData.environment.appRoot));\n\t\tconst extDevLocs = initData.environment.extensionDevelopmentLocationURI;\n\t\tif (extDevLocs) {\n\t\t\tinitData.environment.extensionDevelopmentLocationURI = extDevLocs.map(url => URI.revive(rpcProtocol.transformIncomingURIs(url)));\n\t\t}\n\t\tinitData.environment.extensionTestsLocationURI = URI.revive(rpcProtocol.transformIncomingURIs(initData.environment.extensionTestsLocationURI));\n\t\tinitData.environment.globalStorageHome = URI.revive(rpcProtocol.transformIncomingURIs(initData.environment.globalStorageHome));\n\t\tinitData.environment.workspaceStorageHome = URI.revive(rpcProtocol.transformIncomingURIs(initData.environment.workspaceStorageHome));\n\t\tinitData.environment.extensionTelemetryLogResource = URI.revive(rpcProtocol.transformIncomingURIs(initData.environment.extensionTelemetryLogResource));\n\t\tinitData.nlsBaseUrl = URI.revive(rpcProtocol.transformIncomingURIs(initData.nlsBaseUrl));\n\t\tinitData.logsLocation = URI.revive(rpcProtocol.transformIncomingURIs(initData.logsLocation));\n\t\tinitData.workspace = rpcProtocol.transformIncomingURIs(initData.workspace);\n\t\treturn initData;\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
