{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/api/common/extensionHostMain.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as errors from \"../../../base/common/errors.js\";\nimport * as performance from \"../../../base/common/performance.js\";\nimport type { Mutable } from \"../../../base/common/types.js\";\nimport { URI } from \"../../../base/common/uri.js\";\nimport type { IURITransformer } from \"../../../base/common/uriIpc.js\";\nimport type { IMessagePassingProtocol } from \"../../../base/parts/ipc/common/ipc.js\";\nimport type {\n\tExtensionIdentifier,\n\tIExtensionDescription,\n} from \"../../../platform/extensions/common/extensions.js\";\nimport { getSingletonServiceDescriptors } from \"../../../platform/instantiation/common/extensions.js\";\nimport type {\n\tIInstantiationService,\n\tServicesAccessor,\n} from \"../../../platform/instantiation/common/instantiation.js\";\nimport { InstantiationService } from \"../../../platform/instantiation/common/instantiationService.js\";\nimport { ServiceCollection } from \"../../../platform/instantiation/common/serviceCollection.js\";\nimport { ILogService } from \"../../../platform/log/common/log.js\";\nimport type { IExtensionHostInitData } from \"../../services/extensions/common/extensionHostProtocol.js\";\nimport { RPCProtocol } from \"../../services/extensions/common/rpcProtocol.js\";\nimport {\n\tMainContext,\n\ttype MainThreadConsoleShape,\n} from \"./extHost.protocol.js\";\nimport {\n\tIExtHostExtensionService,\n\tIHostUtils,\n} from \"./extHostExtensionService.js\";\nimport { IExtHostInitDataService } from \"./extHostInitDataService.js\";\nimport { ExtHostRpcService, IExtHostRpcService } from \"./extHostRpcService.js\";\nimport { IExtHostTelemetry } from \"./extHostTelemetry.js\";\nimport {\n\tIURITransformerService,\n\tURITransformerService,\n} from \"./extHostUriTransformerService.js\";\n\nexport interface IExitFn {\n\t(code?: number): any;\n}\n\nexport interface IConsolePatchFn {\n\t(mainThreadConsole: MainThreadConsoleShape): any;\n}\n\nexport abstract class ErrorHandler {\n\tstatic async installEarlyHandler(\n\t\taccessor: ServicesAccessor,\n\t): Promise<void> {\n\t\t// increase number of stack frames (from 10, https://github.com/v8/v8/wiki/Stack-Trace-API)\n\t\tError.stackTraceLimit = 100;\n\n\t\t// does NOT dependent of extension information, can be installed immediately, and simply forwards\n\t\t// to the log service and main thread errors\n\t\tconst logService = accessor.get(ILogService);\n\t\tconst rpcService = accessor.get(IExtHostRpcService);\n\t\tconst mainThreadErrors = rpcService.getProxy(\n\t\t\tMainContext.MainThreadErrors,\n\t\t);\n\n\t\terrors.setUnexpectedErrorHandler((err) => {\n\t\t\tlogService.error(err);\n\t\t\tconst data = errors.transformErrorForSerialization(err);\n\t\t\tmainThreadErrors.$onUnexpectedError(data);\n\t\t});\n\t}\n\n\tstatic async installFullHandler(accessor: ServicesAccessor): Promise<void> {\n\t\t// uses extension knowledges to correlate errors with extensions\n\n\t\tconst logService = accessor.get(ILogService);\n\t\tconst rpcService = accessor.get(IExtHostRpcService);\n\t\tconst extensionService = accessor.get(IExtHostExtensionService);\n\t\tconst extensionTelemetry = accessor.get(IExtHostTelemetry);\n\n\t\tconst mainThreadExtensions = rpcService.getProxy(\n\t\t\tMainContext.MainThreadExtensionService,\n\t\t);\n\t\tconst mainThreadErrors = rpcService.getProxy(\n\t\t\tMainContext.MainThreadErrors,\n\t\t);\n\n\t\tconst map = await extensionService.getExtensionPathIndex();\n\t\tconst extensionErrors = new WeakMap<\n\t\t\tError,\n\t\t\t{\n\t\t\t\textensionIdentifier: ExtensionIdentifier | undefined;\n\t\t\t\tstack: string;\n\t\t\t}\n\t\t>();\n\n\t\t// PART 1\n\t\t// set the prepareStackTrace-handle and use it as a side-effect to associate errors\n\t\t// with extensions - this works by looking up callsites in the extension path index\n\t\tfunction prepareStackTraceAndFindExtension(\n\t\t\terror: Error,\n\t\t\tstackTrace: errors.V8CallSite[],\n\t\t) {\n\t\t\tif (extensionErrors.has(error)) {\n\t\t\t\treturn extensionErrors.get(error)!.stack;\n\t\t\t}\n\t\t\tlet stackTraceMessage = \"\";\n\t\t\tlet extension: IExtensionDescription | undefined;\n\t\t\tlet fileName: string | null;\n\t\t\tfor (const call of stackTrace) {\n\t\t\t\tstackTraceMessage += `\\n\\tat ${call.toString()}`;\n\t\t\t\tfileName = call.getFileName();\n\t\t\t\tif (!extension && fileName) {\n\t\t\t\t\textension = map.findSubstr(URI.file(fileName));\n\t\t\t\t}\n\t\t\t}\n\t\t\tconst result = `${error.name || \"Error\"}: ${error.message || \"\"}${stackTraceMessage}`;\n\t\t\textensionErrors.set(error, {\n\t\t\t\textensionIdentifier: extension?.identifier,\n\t\t\t\tstack: result,\n\t\t\t});\n\t\t\treturn result;\n\t\t}\n\n\t\tconst _wasWrapped = Symbol(\"prepareStackTrace wrapped\");\n\t\tlet _prepareStackTrace = prepareStackTraceAndFindExtension;\n\n\t\tObject.defineProperty(Error, \"prepareStackTrace\", {\n\t\t\tconfigurable: false,\n\t\t\tget() {\n\t\t\t\treturn _prepareStackTrace;\n\t\t\t},\n\t\t\tset(v) {\n\t\t\t\tif (\n\t\t\t\t\tv === prepareStackTraceAndFindExtension ||\n\t\t\t\t\t!v ||\n\t\t\t\t\tv[_wasWrapped]\n\t\t\t\t) {\n\t\t\t\t\t_prepareStackTrace = v || prepareStackTraceAndFindExtension;\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t_prepareStackTrace = (error, stackTrace) => {\n\t\t\t\t\tprepareStackTraceAndFindExtension(error, stackTrace);\n\t\t\t\t\treturn v.call(Error, error, stackTrace);\n\t\t\t\t};\n\n\t\t\t\tObject.assign(_prepareStackTrace, { [_wasWrapped]: true });\n\t\t\t},\n\t\t});\n\n\t\t// PART 2\n\t\t// set the unexpectedErrorHandler and check for extensions that have been identified as\n\t\t// having caused the error. Note that the runtime order is actually reversed, the code\n\t\t// below accesses the stack-property which triggers the code above\n\t\terrors.setUnexpectedErrorHandler((err) => {\n\t\t\tlogService.error(err);\n\n\t\t\tconst errorData = errors.transformErrorForSerialization(err);\n\t\t\tconst stackData = extensionErrors.get(err);\n\t\t\tif (!stackData?.extensionIdentifier) {\n\t\t\t\tmainThreadErrors.$onUnexpectedError(errorData);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tmainThreadExtensions.$onExtensionRuntimeError(\n\t\t\t\tstackData.extensionIdentifier,\n\t\t\t\terrorData,\n\t\t\t);\n\t\t\tconst reported = extensionTelemetry.onExtensionError(\n\t\t\t\tstackData.extensionIdentifier,\n\t\t\t\terr,\n\t\t\t);\n\t\t\tlogService.trace(\n\t\t\t\t\"forwarded error to extension?\",\n\t\t\t\treported,\n\t\t\t\tstackData,\n\t\t\t);\n\t\t});\n\t}\n}\n\nexport class ExtensionHostMain {\n\tprivate readonly _hostUtils: IHostUtils;\n\tprivate readonly _rpcProtocol: RPCProtocol;\n\tprivate readonly _extensionService: IExtHostExtensionService;\n\tprivate readonly _logService: ILogService;\n\n\tconstructor(\n\t\tprotocol: IMessagePassingProtocol,\n\t\tinitData: IExtensionHostInitData,\n\t\thostUtils: IHostUtils,\n\t\turiTransformer: IURITransformer | null,\n\t\tmessagePorts?: ReadonlyMap<string, MessagePort>,\n\t) {\n\t\tthis._hostUtils = hostUtils;\n\t\tthis._rpcProtocol = new RPCProtocol(protocol, null, uriTransformer);\n\n\t\t// ensure URIs are transformed and revived\n\t\tinitData = ExtensionHostMain._transform(initData, this._rpcProtocol);\n\n\t\t// bootstrap services\n\t\tconst services = new ServiceCollection(\n\t\t\t...getSingletonServiceDescriptors(),\n\t\t);\n\t\tservices.set(IExtHostInitDataService, {\n\t\t\t_serviceBrand: undefined,\n\t\t\t...initData,\n\t\t\tmessagePorts,\n\t\t});\n\t\tservices.set(\n\t\t\tIExtHostRpcService,\n\t\t\tnew ExtHostRpcService(this._rpcProtocol),\n\t\t);\n\t\tservices.set(\n\t\t\tIURITransformerService,\n\t\t\tnew URITransformerService(uriTransformer),\n\t\t);\n\t\tservices.set(IHostUtils, hostUtils);\n\n\t\tconst instaService: IInstantiationService = new InstantiationService(\n\t\t\tservices,\n\t\t\ttrue,\n\t\t);\n\n\t\tinstaService.invokeFunction(ErrorHandler.installEarlyHandler);\n\n\t\t// ugly self - inject\n\t\tthis._logService = instaService.invokeFunction((accessor) =>\n\t\t\taccessor.get(ILogService),\n\t\t);\n\n\t\tperformance.mark(`code/extHost/didCreateServices`);\n\t\tif (this._hostUtils.pid) {\n\t\t\tthis._logService.info(\n\t\t\t\t`Extension host with pid ${this._hostUtils.pid} started`,\n\t\t\t);\n\t\t} else {\n\t\t\tthis._logService.info(`Extension host started`);\n\t\t}\n\t\tthis._logService.trace(\"initData\", initData);\n\n\t\t// ugly self - inject\n\t\t// must call initialize *after* creating the extension service\n\t\t// because `initialize` itself creates instances that depend on it\n\t\tthis._extensionService = instaService.invokeFunction((accessor) =>\n\t\t\taccessor.get(IExtHostExtensionService),\n\t\t);\n\t\tthis._extensionService.initialize();\n\n\t\t// install error handler that is extension-aware\n\t\tinstaService.invokeFunction(ErrorHandler.installFullHandler);\n\t}\n\n\tasync asBrowserUri(uri: URI): Promise<URI> {\n\t\tconst mainThreadExtensionsProxy = this._rpcProtocol.getProxy(\n\t\t\tMainContext.MainThreadExtensionService,\n\t\t);\n\t\treturn URI.revive(await mainThreadExtensionsProxy.$asBrowserUri(uri));\n\t}\n\n\tterminate(reason: string): void {\n\t\tthis._extensionService.terminate(reason);\n\t}\n\n\tprivate static _transform(\n\t\tinitData: IExtensionHostInitData,\n\t\trpcProtocol: RPCProtocol,\n\t): IExtensionHostInitData {\n\t\tinitData.extensions.allExtensions.forEach((ext) => {\n\t\t\t(<Mutable<IExtensionDescription>>ext).extensionLocation =\n\t\t\t\tURI.revive(\n\t\t\t\t\trpcProtocol.transformIncomingURIs(ext.extensionLocation),\n\t\t\t\t);\n\t\t});\n\t\tinitData.environment.appRoot = URI.revive(\n\t\t\trpcProtocol.transformIncomingURIs(initData.environment.appRoot),\n\t\t);\n\t\tconst extDevLocs = initData.environment.extensionDevelopmentLocationURI;\n\t\tif (extDevLocs) {\n\t\t\tinitData.environment.extensionDevelopmentLocationURI =\n\t\t\t\textDevLocs.map((url) =>\n\t\t\t\t\tURI.revive(rpcProtocol.transformIncomingURIs(url)),\n\t\t\t\t);\n\t\t}\n\t\tinitData.environment.extensionTestsLocationURI = URI.revive(\n\t\t\trpcProtocol.transformIncomingURIs(\n\t\t\t\tinitData.environment.extensionTestsLocationURI,\n\t\t\t),\n\t\t);\n\t\tinitData.environment.globalStorageHome = URI.revive(\n\t\t\trpcProtocol.transformIncomingURIs(\n\t\t\t\tinitData.environment.globalStorageHome,\n\t\t\t),\n\t\t);\n\t\tinitData.environment.workspaceStorageHome = URI.revive(\n\t\t\trpcProtocol.transformIncomingURIs(\n\t\t\t\tinitData.environment.workspaceStorageHome,\n\t\t\t),\n\t\t);\n\t\tinitData.environment.extensionTelemetryLogResource = URI.revive(\n\t\t\trpcProtocol.transformIncomingURIs(\n\t\t\t\tinitData.environment.extensionTelemetryLogResource,\n\t\t\t),\n\t\t);\n\t\tinitData.nlsBaseUrl = URI.revive(\n\t\t\trpcProtocol.transformIncomingURIs(initData.nlsBaseUrl),\n\t\t);\n\t\tinitData.logsLocation = URI.revive(\n\t\t\trpcProtocol.transformIncomingURIs(initData.logsLocation),\n\t\t);\n\t\tinitData.workspace = rpcProtocol.transformIncomingURIs(\n\t\t\tinitData.workspace,\n\t\t);\n\t\treturn initData;\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
