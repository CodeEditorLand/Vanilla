{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/api/common/extHostDiagnostics.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n/* eslint-disable local/code-no-native-private */\n\nimport { localize } from '../../../nls.js';\nimport { IMarkerData, MarkerSeverity } from '../../../platform/markers/common/markers.js';\nimport { URI, UriComponents } from '../../../base/common/uri.js';\nimport type * as vscode from 'vscode';\nimport { MainContext, MainThreadDiagnosticsShape, ExtHostDiagnosticsShape, IMainContext } from './extHost.protocol.js';\nimport { DiagnosticSeverity } from './extHostTypes.js';\nimport * as converter from './extHostTypeConverters.js';\nimport { Event, Emitter, DebounceEmitter } from '../../../base/common/event.js';\nimport { ILogService } from '../../../platform/log/common/log.js';\nimport { ResourceMap } from '../../../base/common/map.js';\nimport { ExtensionIdentifier } from '../../../platform/extensions/common/extensions.js';\nimport { IExtHostFileSystemInfo } from './extHostFileSystemInfo.js';\nimport { IExtUri } from '../../../base/common/resources.js';\nimport { ExtHostDocumentsAndEditors } from './extHostDocumentsAndEditors.js';\n\nexport class DiagnosticCollection implements vscode.DiagnosticCollection {\n\n\treadonly #proxy: MainThreadDiagnosticsShape | undefined;\n\treadonly #onDidChangeDiagnostics: Emitter<readonly vscode.Uri[]>;\n\treadonly #data: ResourceMap<vscode.Diagnostic[]>;\n\n\tprivate _isDisposed = false;\n\n\tconstructor(\n\t\tprivate readonly _name: string,\n\t\tprivate readonly _owner: string,\n\t\tprivate readonly _maxDiagnosticsTotal: number,\n\t\tprivate readonly _maxDiagnosticsPerFile: number,\n\t\tprivate readonly _modelVersionIdProvider: (uri: URI) => number | undefined,\n\t\textUri: IExtUri,\n\t\tproxy: MainThreadDiagnosticsShape | undefined,\n\t\tonDidChangeDiagnostics: Emitter<readonly vscode.Uri[]>\n\t) {\n\t\tthis._maxDiagnosticsTotal = Math.max(_maxDiagnosticsPerFile, _maxDiagnosticsTotal);\n\t\tthis.#data = new ResourceMap(uri => extUri.getComparisonKey(uri));\n\t\tthis.#proxy = proxy;\n\t\tthis.#onDidChangeDiagnostics = onDidChangeDiagnostics;\n\t}\n\n\tdispose(): void {\n\t\tif (!this._isDisposed) {\n\t\t\tthis.#onDidChangeDiagnostics.fire([...this.#data.keys()]);\n\t\t\tthis.#proxy?.$clear(this._owner);\n\t\t\tthis.#data.clear();\n\t\t\tthis._isDisposed = true;\n\t\t}\n\t}\n\n\tget name(): string {\n\t\tthis._checkDisposed();\n\t\treturn this._name;\n\t}\n\n\tset(uri: vscode.Uri, diagnostics: ReadonlyArray<vscode.Diagnostic>): void;\n\tset(entries: ReadonlyArray<[vscode.Uri, ReadonlyArray<vscode.Diagnostic>]>): void;\n\tset(first: vscode.Uri | ReadonlyArray<[vscode.Uri, ReadonlyArray<vscode.Diagnostic>]>, diagnostics?: ReadonlyArray<vscode.Diagnostic>) {\n\n\t\tif (!first) {\n\t\t\t// this set-call is a clear-call\n\t\t\tthis.clear();\n\t\t\treturn;\n\t\t}\n\n\t\t// the actual implementation for #set\n\n\t\tthis._checkDisposed();\n\t\tlet toSync: vscode.Uri[] = [];\n\n\t\tif (URI.isUri(first)) {\n\n\t\t\tif (!diagnostics) {\n\t\t\t\t// remove this entry\n\t\t\t\tthis.delete(first);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// update single row\n\t\t\tthis.#data.set(first, diagnostics.slice());\n\t\t\ttoSync = [first];\n\n\t\t} else if (Array.isArray(first)) {\n\t\t\t// update many rows\n\t\t\ttoSync = [];\n\t\t\tlet lastUri: vscode.Uri | undefined;\n\n\t\t\t// ensure stable-sort\n\t\t\tfirst = [...first].sort(DiagnosticCollection._compareIndexedTuplesByUri);\n\n\t\t\tfor (const tuple of first) {\n\t\t\t\tconst [uri, diagnostics] = tuple;\n\t\t\t\tif (!lastUri || uri.toString() !== lastUri.toString()) {\n\t\t\t\t\tif (lastUri && this.#data.get(lastUri)!.length === 0) {\n\t\t\t\t\t\tthis.#data.delete(lastUri);\n\t\t\t\t\t}\n\t\t\t\t\tlastUri = uri;\n\t\t\t\t\ttoSync.push(uri);\n\t\t\t\t\tthis.#data.set(uri, []);\n\t\t\t\t}\n\n\t\t\t\tif (!diagnostics) {\n\t\t\t\t\t// [Uri, undefined] means clear this\n\t\t\t\t\tconst currentDiagnostics = this.#data.get(uri);\n\t\t\t\t\tif (currentDiagnostics) {\n\t\t\t\t\t\tcurrentDiagnostics.length = 0;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tconst currentDiagnostics = this.#data.get(uri);\n\t\t\t\t\tcurrentDiagnostics?.push(...diagnostics);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// send event for extensions\n\t\tthis.#onDidChangeDiagnostics.fire(toSync);\n\n\t\t// compute change and send to main side\n\t\tif (!this.#proxy) {\n\t\t\treturn;\n\t\t}\n\t\tconst entries: [URI, IMarkerData[]][] = [];\n\t\tlet totalMarkerCount = 0;\n\t\tfor (const uri of toSync) {\n\t\t\tlet marker: IMarkerData[] = [];\n\t\t\tconst diagnostics = this.#data.get(uri);\n\t\t\tif (diagnostics) {\n\n\t\t\t\t// no more than N diagnostics per file\n\t\t\t\tif (diagnostics.length > this._maxDiagnosticsPerFile) {\n\t\t\t\t\tmarker = [];\n\t\t\t\t\tconst order = [DiagnosticSeverity.Error, DiagnosticSeverity.Warning, DiagnosticSeverity.Information, DiagnosticSeverity.Hint];\n\t\t\t\t\torderLoop: for (let i = 0; i < 4; i++) {\n\t\t\t\t\t\tfor (const diagnostic of diagnostics) {\n\t\t\t\t\t\t\tif (diagnostic.severity === order[i]) {\n\t\t\t\t\t\t\t\tconst len = marker.push({ ...converter.Diagnostic.from(diagnostic), modelVersionId: this._modelVersionIdProvider(uri) });\n\t\t\t\t\t\t\t\tif (len === this._maxDiagnosticsPerFile) {\n\t\t\t\t\t\t\t\t\tbreak orderLoop;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// add 'signal' marker for showing omitted errors/warnings\n\t\t\t\t\tmarker.push({\n\t\t\t\t\t\tseverity: MarkerSeverity.Info,\n\t\t\t\t\t\tmessage: localize({ key: 'limitHit', comment: ['amount of errors/warning skipped due to limits'] }, \"Not showing {0} further errors and warnings.\", diagnostics.length - this._maxDiagnosticsPerFile),\n\t\t\t\t\t\tstartLineNumber: marker[marker.length - 1].startLineNumber,\n\t\t\t\t\t\tstartColumn: marker[marker.length - 1].startColumn,\n\t\t\t\t\t\tendLineNumber: marker[marker.length - 1].endLineNumber,\n\t\t\t\t\t\tendColumn: marker[marker.length - 1].endColumn\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\tmarker = diagnostics.map(diag => ({ ...converter.Diagnostic.from(diag), modelVersionId: this._modelVersionIdProvider(uri) }));\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tentries.push([uri, marker]);\n\n\t\t\ttotalMarkerCount += marker.length;\n\t\t\tif (totalMarkerCount > this._maxDiagnosticsTotal) {\n\t\t\t\t// ignore markers that are above the limit\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tthis.#proxy.$changeMany(this._owner, entries);\n\t}\n\n\tdelete(uri: vscode.Uri): void {\n\t\tthis._checkDisposed();\n\t\tthis.#onDidChangeDiagnostics.fire([uri]);\n\t\tthis.#data.delete(uri);\n\t\tthis.#proxy?.$changeMany(this._owner, [[uri, undefined]]);\n\t}\n\n\tclear(): void {\n\t\tthis._checkDisposed();\n\t\tthis.#onDidChangeDiagnostics.fire([...this.#data.keys()]);\n\t\tthis.#data.clear();\n\t\tthis.#proxy?.$clear(this._owner);\n\t}\n\n\tforEach(callback: (uri: URI, diagnostics: ReadonlyArray<vscode.Diagnostic>, collection: DiagnosticCollection) => any, thisArg?: any): void {\n\t\tthis._checkDisposed();\n\t\tfor (const [uri, values] of this) {\n\t\t\tcallback.call(thisArg, uri, values, this);\n\t\t}\n\t}\n\n\t*[Symbol.iterator](): IterableIterator<[uri: vscode.Uri, diagnostics: readonly vscode.Diagnostic[]]> {\n\t\tthis._checkDisposed();\n\t\tfor (const uri of this.#data.keys()) {\n\t\t\tyield [uri, this.get(uri)];\n\t\t}\n\t}\n\n\tget(uri: URI): ReadonlyArray<vscode.Diagnostic> {\n\t\tthis._checkDisposed();\n\t\tconst result = this.#data.get(uri);\n\t\tif (Array.isArray(result)) {\n\t\t\treturn Object.freeze(result.slice(0));\n\t\t}\n\t\treturn [];\n\t}\n\n\thas(uri: URI): boolean {\n\t\tthis._checkDisposed();\n\t\treturn Array.isArray(this.#data.get(uri));\n\t}\n\n\tprivate _checkDisposed() {\n\t\tif (this._isDisposed) {\n\t\t\tthrow new Error('illegal state - object is disposed');\n\t\t}\n\t}\n\n\tprivate static _compareIndexedTuplesByUri(a: [vscode.Uri, readonly vscode.Diagnostic[]], b: [vscode.Uri, readonly vscode.Diagnostic[]]): number {\n\t\tif (a[0].toString() < b[0].toString()) {\n\t\t\treturn -1;\n\t\t} else if (a[0].toString() > b[0].toString()) {\n\t\t\treturn 1;\n\t\t} else {\n\t\t\treturn 0;\n\t\t}\n\t}\n}\n\nexport class ExtHostDiagnostics implements ExtHostDiagnosticsShape {\n\n\tprivate static _idPool: number = 0;\n\tprivate static readonly _maxDiagnosticsPerFile: number = 1000;\n\tprivate static readonly _maxDiagnosticsTotal: number = 1.1 * this._maxDiagnosticsPerFile;\n\n\tprivate readonly _proxy: MainThreadDiagnosticsShape;\n\tprivate readonly _collections = new Map<string, DiagnosticCollection>();\n\tprivate readonly _onDidChangeDiagnostics = new DebounceEmitter<readonly vscode.Uri[]>({ merge: all => all.flat(), delay: 50 });\n\n\tstatic _mapper(last: readonly vscode.Uri[]): { uris: readonly vscode.Uri[] } {\n\t\tconst map = new ResourceMap<vscode.Uri>();\n\t\tfor (const uri of last) {\n\t\t\tmap.set(uri, uri);\n\t\t}\n\t\treturn { uris: Object.freeze(Array.from(map.values())) };\n\t}\n\n\treadonly onDidChangeDiagnostics: Event<vscode.DiagnosticChangeEvent> = Event.map(this._onDidChangeDiagnostics.event, ExtHostDiagnostics._mapper);\n\n\tconstructor(\n\t\tmainContext: IMainContext,\n\t\t@ILogService private readonly _logService: ILogService,\n\t\t@IExtHostFileSystemInfo private readonly _fileSystemInfoService: IExtHostFileSystemInfo,\n\t\tprivate readonly _extHostDocumentsAndEditors: ExtHostDocumentsAndEditors,\n\t) {\n\t\tthis._proxy = mainContext.getProxy(MainContext.MainThreadDiagnostics);\n\t}\n\n\tcreateDiagnosticCollection(extensionId: ExtensionIdentifier, name?: string): vscode.DiagnosticCollection {\n\n\t\tconst { _collections, _proxy, _onDidChangeDiagnostics, _logService, _fileSystemInfoService, _extHostDocumentsAndEditors } = this;\n\n\t\tconst loggingProxy = new class implements MainThreadDiagnosticsShape {\n\t\t\t$changeMany(owner: string, entries: [UriComponents, IMarkerData[] | undefined][]): void {\n\t\t\t\t_proxy.$changeMany(owner, entries);\n\t\t\t\t_logService.trace('[DiagnosticCollection] change many (extension, owner, uris)', extensionId.value, owner, entries.length === 0 ? 'CLEARING' : entries);\n\t\t\t}\n\t\t\t$clear(owner: string): void {\n\t\t\t\t_proxy.$clear(owner);\n\t\t\t\t_logService.trace('[DiagnosticCollection] remove all (extension, owner)', extensionId.value, owner);\n\t\t\t}\n\t\t\tdispose(): void {\n\t\t\t\t_proxy.dispose();\n\t\t\t}\n\t\t};\n\n\n\t\tlet owner: string;\n\t\tif (!name) {\n\t\t\tname = '_generated_diagnostic_collection_name_#' + ExtHostDiagnostics._idPool++;\n\t\t\towner = name;\n\t\t} else if (!_collections.has(name)) {\n\t\t\towner = name;\n\t\t} else {\n\t\t\tthis._logService.warn(`DiagnosticCollection with name '${name}' does already exist.`);\n\t\t\tdo {\n\t\t\t\towner = name + ExtHostDiagnostics._idPool++;\n\t\t\t} while (_collections.has(owner));\n\t\t}\n\n\t\tconst result = new class extends DiagnosticCollection {\n\t\t\tconstructor() {\n\t\t\t\tsuper(\n\t\t\t\t\tname!, owner,\n\t\t\t\t\tExtHostDiagnostics._maxDiagnosticsTotal,\n\t\t\t\t\tExtHostDiagnostics._maxDiagnosticsPerFile,\n\t\t\t\t\turi => _extHostDocumentsAndEditors.getDocument(uri)?.version,\n\t\t\t\t\t_fileSystemInfoService.extUri, loggingProxy, _onDidChangeDiagnostics\n\t\t\t\t);\n\t\t\t\t_collections.set(owner, this);\n\t\t\t}\n\t\t\toverride dispose() {\n\t\t\t\tsuper.dispose();\n\t\t\t\t_collections.delete(owner);\n\t\t\t}\n\t\t};\n\n\t\treturn result;\n\t}\n\n\tgetDiagnostics(resource: vscode.Uri): ReadonlyArray<vscode.Diagnostic>;\n\tgetDiagnostics(): ReadonlyArray<[vscode.Uri, ReadonlyArray<vscode.Diagnostic>]>;\n\tgetDiagnostics(resource?: vscode.Uri): ReadonlyArray<vscode.Diagnostic> | ReadonlyArray<[vscode.Uri, ReadonlyArray<vscode.Diagnostic>]>;\n\tgetDiagnostics(resource?: vscode.Uri): ReadonlyArray<vscode.Diagnostic> | ReadonlyArray<[vscode.Uri, ReadonlyArray<vscode.Diagnostic>]> {\n\t\tif (resource) {\n\t\t\treturn this._getDiagnostics(resource);\n\t\t} else {\n\t\t\tconst index = new Map<string, number>();\n\t\t\tconst res: [vscode.Uri, vscode.Diagnostic[]][] = [];\n\t\t\tfor (const collection of this._collections.values()) {\n\t\t\t\tcollection.forEach((uri, diagnostics) => {\n\t\t\t\t\tlet idx = index.get(uri.toString());\n\t\t\t\t\tif (typeof idx === 'undefined') {\n\t\t\t\t\t\tidx = res.length;\n\t\t\t\t\t\tindex.set(uri.toString(), idx);\n\t\t\t\t\t\tres.push([uri, []]);\n\t\t\t\t\t}\n\t\t\t\t\tres[idx][1] = res[idx][1].concat(...diagnostics);\n\t\t\t\t});\n\t\t\t}\n\t\t\treturn res;\n\t\t}\n\t}\n\n\tprivate _getDiagnostics(resource: vscode.Uri): ReadonlyArray<vscode.Diagnostic> {\n\t\tlet res: vscode.Diagnostic[] = [];\n\t\tfor (const collection of this._collections.values()) {\n\t\t\tif (collection.has(resource)) {\n\t\t\t\tres = res.concat(collection.get(resource));\n\t\t\t}\n\t\t}\n\t\treturn res;\n\t}\n\n\tprivate _mirrorCollection: vscode.DiagnosticCollection | undefined;\n\n\t$acceptMarkersChange(data: [UriComponents, IMarkerData[]][]): void {\n\n\t\tif (!this._mirrorCollection) {\n\t\t\tconst name = '_generated_mirror';\n\t\t\tconst collection = new DiagnosticCollection(\n\t\t\t\tname, name,\n\t\t\t\tNumber.MAX_SAFE_INTEGER, Number.MAX_SAFE_INTEGER, // no limits because this collection is just a mirror of \"sanitized\" data\n\t\t\t\t_uri => undefined,\n\t\t\t\tthis._fileSystemInfoService.extUri, undefined, this._onDidChangeDiagnostics\n\t\t\t);\n\t\t\tthis._collections.set(name, collection);\n\t\t\tthis._mirrorCollection = collection;\n\t\t}\n\n\t\tfor (const [uri, markers] of data) {\n\t\t\tthis._mirrorCollection.set(URI.revive(uri), markers.map(converter.Diagnostic.to));\n\t\t}\n\t}\n}\n"],
  "mappings": "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",
  "names": ["diagnostics", "owner"]
}
