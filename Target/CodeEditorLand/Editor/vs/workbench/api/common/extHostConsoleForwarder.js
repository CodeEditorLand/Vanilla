var g=Object.defineProperty;var d=Object.getOwnPropertyDescriptor;var c=(n,t,r,e)=>{for(var o=e>1?void 0:e?d(t,r):t,a=n.length-1,s;a>=0;a--)(s=n[a])&&(o=(e?s(t,r,o):s(o))||o);return e&&o&&g(t,r,o),o},l=(n,t)=>(r,e)=>t(r,e,n);import{safeStringify as h}from"../../../base/common/objects.js";import{MainContext as p}from"./extHost.protocol.js";import{IExtHostInitDataService as u}from"./extHostInitDataService.js";import{IExtHostRpcService as f}from"./extHostRpcService.js";let i=class{_mainThreadConsole;_includeStack;_logNative;constructor(t,r){this._mainThreadConsole=t.getProxy(p.MainThreadConsole),this._includeStack=r.consoleForward.includeStack,this._logNative=r.consoleForward.logNative,this._wrapConsoleMethod("info","log"),this._wrapConsoleMethod("log","log"),this._wrapConsoleMethod("warn","warn"),this._wrapConsoleMethod("debug","debug"),this._wrapConsoleMethod("error","error")}_wrapConsoleMethod(t,r){const e=console[t];Object.defineProperty(console,t,{set:()=>{},get:()=>()=>{this._handleConsoleCall(t,r,e,arguments)}})}_handleConsoleCall(t,r,e,o){this._mainThreadConsole.$logExtensionHostMessage({type:"__$console",severity:r,arguments:_(o,this._includeStack)}),this._logNative&&this._nativeConsoleLogMessage(t,e,o)}};i=c([l(0,f),l(1,u)],i);const m=1e5;function _(n,t){const r=[];if(n.length)for(let e=0;e<n.length;e++){let o=n[e];if(typeof o>"u")o="undefined";else if(o instanceof Error){const a=o;a.stack?o=a.stack:o=a.toString()}r.push(o)}if(t){const e=new Error().stack;e&&r.push({__$stack:e.split(`
`).slice(3).join(`
`)})}try{const e=h(r);return e.length>m?"Output omitted for a large object that exceeds the limits":e}catch(e){return`Output omitted for an object that cannot be inspected ('${e.toString()}')`}}export{i as AbstractExtHostConsoleForwarder};
