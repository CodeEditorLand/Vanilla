import{Emitter as n}from"../../../base/common/event.js";import"../../../platform/extensionManagement/common/extensionStorage.js";import{createDecorator as i}from"../../../platform/instantiation/common/instantiation.js";import"../../../platform/log/common/log.js";import{MainContext as s}from"./extHost.protocol.js";import"./extHostRpcService.js";class m{constructor(e,t){this._logService=t;this._proxy=e.getProxy(s.MainThreadStorage)}_serviceBrand;_proxy;_onDidChangeStorage=new n;onDidChangeStorage=this._onDidChangeStorage.event;registerExtensionStorageKeysToSync(e,t){this._proxy.$registerExtensionStorageKeysToSync(e,t)}async initializeExtensionStorage(e,t,o){const r=await this._proxy.$initializeExtensionStorage(e,t);let a;return r&&(a=this.safeParseValue(e,t,r)),a||o}setValue(e,t,o){return this._proxy.$setValue(e,t,o)}$acceptValue(e,t,o){const r=this.safeParseValue(e,t,o);r&&this._onDidChangeStorage.fire({shared:e,key:t,value:r})}safeParseValue(e,t,o){try{return JSON.parse(o)}catch(r){this._logService.error(`[extHostStorage] unexpected error parsing storage contents (extensionId: ${t}, global: ${e}): ${r}`)}}}const y=i("IExtHostStorage");export{m as ExtHostStorage,y as IExtHostStorage};
