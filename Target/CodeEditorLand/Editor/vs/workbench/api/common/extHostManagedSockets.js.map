{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/api/common/extHostManagedSockets.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport type * as vscode from \"vscode\";\nimport { VSBuffer } from \"../../../base/common/buffer.js\";\nimport {\n\tDisposable,\n\tDisposableStore,\n\ttoDisposable,\n} from \"../../../base/common/lifecycle.js\";\nimport { createDecorator } from \"../../../platform/instantiation/common/instantiation.js\";\nimport {\n\ttype ExtHostManagedSocketsShape,\n\tMainContext,\n\ttype MainThreadManagedSocketsShape,\n} from \"./extHost.protocol.js\";\nimport { IExtHostRpcService } from \"./extHostRpcService.js\";\n\nexport interface IExtHostManagedSockets extends ExtHostManagedSocketsShape {\n\tsetFactory(\n\t\tsocketFactoryId: number,\n\t\tmakeConnection: () => Thenable<vscode.ManagedMessagePassing>,\n\t): void;\n\treadonly _serviceBrand: undefined;\n}\n\nexport const IExtHostManagedSockets = createDecorator<IExtHostManagedSockets>(\n\t\"IExtHostManagedSockets\",\n);\n\nexport class ExtHostManagedSockets implements IExtHostManagedSockets {\n\tdeclare readonly _serviceBrand: undefined;\n\n\tprivate readonly _proxy: MainThreadManagedSocketsShape;\n\tprivate _remoteSocketIdCounter = 0;\n\tprivate _factory: ManagedSocketFactory | null = null;\n\tprivate readonly _managedRemoteSockets: Map<number, ManagedSocket> =\n\t\tnew Map();\n\n\tconstructor(@IExtHostRpcService extHostRpc: IExtHostRpcService) {\n\t\tthis._proxy = extHostRpc.getProxy(MainContext.MainThreadManagedSockets);\n\t}\n\n\tsetFactory(\n\t\tsocketFactoryId: number,\n\t\tmakeConnection: () => Thenable<vscode.ManagedMessagePassing>,\n\t): void {\n\t\t// Terminate all previous sockets\n\t\tfor (const socket of this._managedRemoteSockets.values()) {\n\t\t\t// calling dispose() will lead to it removing itself from the map\n\t\t\tsocket.dispose();\n\t\t}\n\t\t// Unregister previous factory\n\t\tif (this._factory) {\n\t\t\tthis._proxy.$unregisterSocketFactory(this._factory.socketFactoryId);\n\t\t}\n\n\t\tthis._factory = new ManagedSocketFactory(\n\t\t\tsocketFactoryId,\n\t\t\tmakeConnection,\n\t\t);\n\t\tthis._proxy.$registerSocketFactory(this._factory.socketFactoryId);\n\t}\n\n\tasync $openRemoteSocket(socketFactoryId: number): Promise<number> {\n\t\tif (\n\t\t\t!this._factory ||\n\t\t\tthis._factory.socketFactoryId !== socketFactoryId\n\t\t) {\n\t\t\tthrow new Error(`No socket factory with id ${socketFactoryId}`);\n\t\t}\n\n\t\tconst id = ++this._remoteSocketIdCounter;\n\t\tconst socket = await this._factory.makeConnection();\n\t\tconst disposable = new DisposableStore();\n\t\tthis._managedRemoteSockets.set(\n\t\t\tid,\n\t\t\tnew ManagedSocket(id, socket, disposable),\n\t\t);\n\n\t\tdisposable.add(\n\t\t\ttoDisposable(() => this._managedRemoteSockets.delete(id)),\n\t\t);\n\t\tdisposable.add(\n\t\t\tsocket.onDidEnd(() => {\n\t\t\t\tthis._proxy.$onDidManagedSocketEnd(id);\n\t\t\t\tdisposable.dispose();\n\t\t\t}),\n\t\t);\n\t\tdisposable.add(\n\t\t\tsocket.onDidClose((e) => {\n\t\t\t\tthis._proxy.$onDidManagedSocketClose(\n\t\t\t\t\tid,\n\t\t\t\t\te?.stack ?? e?.message,\n\t\t\t\t);\n\t\t\t\tdisposable.dispose();\n\t\t\t}),\n\t\t);\n\t\tdisposable.add(\n\t\t\tsocket.onDidReceiveMessage((e) =>\n\t\t\t\tthis._proxy.$onDidManagedSocketHaveData(id, VSBuffer.wrap(e)),\n\t\t\t),\n\t\t);\n\n\t\treturn id;\n\t}\n\n\t$remoteSocketWrite(socketId: number, buffer: VSBuffer): void {\n\t\tthis._managedRemoteSockets.get(socketId)?.actual.send(buffer.buffer);\n\t}\n\n\t$remoteSocketEnd(socketId: number): void {\n\t\tconst socket = this._managedRemoteSockets.get(socketId);\n\t\tif (socket) {\n\t\t\tsocket.actual.end();\n\t\t\tsocket.dispose();\n\t\t}\n\t}\n\n\tasync $remoteSocketDrain(socketId: number): Promise<void> {\n\t\tawait this._managedRemoteSockets.get(socketId)?.actual.drain?.();\n\t}\n}\n\nclass ManagedSocketFactory {\n\tconstructor(\n\t\tpublic readonly socketFactoryId: number,\n\t\tpublic readonly makeConnection: () => Thenable<vscode.ManagedMessagePassing>,\n\t) {}\n}\n\nclass ManagedSocket extends Disposable {\n\tconstructor(\n\t\tpublic readonly socketId: number,\n\t\tpublic readonly actual: vscode.ManagedMessagePassing,\n\t\tdisposer: DisposableStore,\n\t) {\n\t\tsuper();\n\t\tthis._register(disposer);\n\t}\n}\n"],
  "mappings": ";;;;;;;;;;;;AAMA,SAAS,gBAAgB;AACzB;AAAA,EACC;AAAA,EACA;AAAA,EACA;AAAA,OACM;AACP,SAAS,uBAAuB;AAChC;AAAA,EAEC;AAAA,OAEM;AACP,SAAS,0BAA0B;AAU5B,MAAM,yBAAyB;AAAA,EACrC;AACD;AAEO,IAAM,wBAAN,MAA8D;AAAA,EAhCrE,OAgCqE;AAAA;AAAA;AAAA,EAGnD;AAAA,EACT,yBAAyB;AAAA,EACzB,WAAwC;AAAA,EAC/B,wBAChB,oBAAI,IAAI;AAAA,EAET,YAAgC,YAAgC;AAC/D,SAAK,SAAS,WAAW,SAAS,YAAY,wBAAwB;AAAA,EACvE;AAAA,EAEA,WACC,iBACA,gBACO;AAEP,eAAW,UAAU,KAAK,sBAAsB,OAAO,GAAG;AAEzD,aAAO,QAAQ;AAAA,IAChB;AAEA,QAAI,KAAK,UAAU;AAClB,WAAK,OAAO,yBAAyB,KAAK,SAAS,eAAe;AAAA,IACnE;AAEA,SAAK,WAAW,IAAI;AAAA,MACnB;AAAA,MACA;AAAA,IACD;AACA,SAAK,OAAO,uBAAuB,KAAK,SAAS,eAAe;AAAA,EACjE;AAAA,EAEA,MAAM,kBAAkB,iBAA0C;AACjE,QACC,CAAC,KAAK,YACN,KAAK,SAAS,oBAAoB,iBACjC;AACD,YAAM,IAAI,MAAM,6BAA6B,eAAe,EAAE;AAAA,IAC/D;AAEA,UAAM,KAAK,EAAE,KAAK;AAClB,UAAM,SAAS,MAAM,KAAK,SAAS,eAAe;AAClD,UAAM,aAAa,IAAI,gBAAgB;AACvC,SAAK,sBAAsB;AAAA,MAC1B;AAAA,MACA,IAAI,cAAc,IAAI,QAAQ,UAAU;AAAA,IACzC;AAEA,eAAW;AAAA,MACV,aAAa,MAAM,KAAK,sBAAsB,OAAO,EAAE,CAAC;AAAA,IACzD;AACA,eAAW;AAAA,MACV,OAAO,SAAS,MAAM;AACrB,aAAK,OAAO,uBAAuB,EAAE;AACrC,mBAAW,QAAQ;AAAA,MACpB,CAAC;AAAA,IACF;AACA,eAAW;AAAA,MACV,OAAO,WAAW,CAAC,MAAM;AACxB,aAAK,OAAO;AAAA,UACX;AAAA,UACA,GAAG,SAAS,GAAG;AAAA,QAChB;AACA,mBAAW,QAAQ;AAAA,MACpB,CAAC;AAAA,IACF;AACA,eAAW;AAAA,MACV,OAAO;AAAA,QAAoB,CAAC,MAC3B,KAAK,OAAO,4BAA4B,IAAI,SAAS,KAAK,CAAC,CAAC;AAAA,MAC7D;AAAA,IACD;AAEA,WAAO;AAAA,EACR;AAAA,EAEA,mBAAmB,UAAkB,QAAwB;AAC5D,SAAK,sBAAsB,IAAI,QAAQ,GAAG,OAAO,KAAK,OAAO,MAAM;AAAA,EACpE;AAAA,EAEA,iBAAiB,UAAwB;AACxC,UAAM,SAAS,KAAK,sBAAsB,IAAI,QAAQ;AACtD,QAAI,QAAQ;AACX,aAAO,OAAO,IAAI;AAClB,aAAO,QAAQ;AAAA,IAChB;AAAA,EACD;AAAA,EAEA,MAAM,mBAAmB,UAAiC;AACzD,UAAM,KAAK,sBAAsB,IAAI,QAAQ,GAAG,OAAO,QAAQ;AAAA,EAChE;AACD;AA5Fa,wBAAN;AAAA,EASO;AAAA,GATD;AA8Fb,MAAM,qBAAqB;AAAA,EAC1B,YACiB,iBACA,gBACf;AAFe;AACA;AAAA,EACd;AAAA,EAlIJ,OA8H2B;AAAA;AAAA;AAK3B;AAEA,MAAM,sBAAsB,WAAW;AAAA,EACtC,YACiB,UACA,QAChB,UACC;AACD,UAAM;AAJU;AACA;AAIhB,SAAK,UAAU,QAAQ;AAAA,EACxB;AAAA,EA7ID,OAqIuC;AAAA;AAAA;AASvC;",
  "names": []
}
