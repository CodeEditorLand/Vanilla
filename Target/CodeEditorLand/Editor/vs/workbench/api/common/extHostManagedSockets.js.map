{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/api/common/extHostManagedSockets.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { ExtHostManagedSocketsShape, MainContext, MainThreadManagedSocketsShape } from './extHost.protocol.js';\nimport { createDecorator } from '../../../platform/instantiation/common/instantiation.js';\nimport * as vscode from 'vscode';\nimport { Disposable, DisposableStore, toDisposable } from '../../../base/common/lifecycle.js';\nimport { IExtHostRpcService } from './extHostRpcService.js';\nimport { VSBuffer } from '../../../base/common/buffer.js';\n\nexport interface IExtHostManagedSockets extends ExtHostManagedSocketsShape {\n\tsetFactory(socketFactoryId: number, makeConnection: () => Thenable<vscode.ManagedMessagePassing>): void;\n\treadonly _serviceBrand: undefined;\n}\n\nexport const IExtHostManagedSockets = createDecorator<IExtHostManagedSockets>('IExtHostManagedSockets');\n\nexport class ExtHostManagedSockets implements IExtHostManagedSockets {\n\tdeclare readonly _serviceBrand: undefined;\n\n\tprivate readonly _proxy: MainThreadManagedSocketsShape;\n\tprivate _remoteSocketIdCounter = 0;\n\tprivate _factory: ManagedSocketFactory | null = null;\n\tprivate readonly _managedRemoteSockets: Map<number, ManagedSocket> = new Map();\n\n\tconstructor(\n\t\t@IExtHostRpcService extHostRpc: IExtHostRpcService,\n\t) {\n\t\tthis._proxy = extHostRpc.getProxy(MainContext.MainThreadManagedSockets);\n\t}\n\n\tsetFactory(socketFactoryId: number, makeConnection: () => Thenable<vscode.ManagedMessagePassing>): void {\n\t\t// Terminate all previous sockets\n\t\tfor (const socket of this._managedRemoteSockets.values()) {\n\t\t\t// calling dispose() will lead to it removing itself from the map\n\t\t\tsocket.dispose();\n\t\t}\n\t\t// Unregister previous factory\n\t\tif (this._factory) {\n\t\t\tthis._proxy.$unregisterSocketFactory(this._factory.socketFactoryId);\n\t\t}\n\n\t\tthis._factory = new ManagedSocketFactory(socketFactoryId, makeConnection);\n\t\tthis._proxy.$registerSocketFactory(this._factory.socketFactoryId);\n\t}\n\n\tasync $openRemoteSocket(socketFactoryId: number): Promise<number> {\n\t\tif (!this._factory || this._factory.socketFactoryId !== socketFactoryId) {\n\t\t\tthrow new Error(`No socket factory with id ${socketFactoryId}`);\n\t\t}\n\n\t\tconst id = (++this._remoteSocketIdCounter);\n\t\tconst socket = await this._factory.makeConnection();\n\t\tconst disposable = new DisposableStore();\n\t\tthis._managedRemoteSockets.set(id, new ManagedSocket(id, socket, disposable));\n\n\t\tdisposable.add(toDisposable(() => this._managedRemoteSockets.delete(id)));\n\t\tdisposable.add(socket.onDidEnd(() => {\n\t\t\tthis._proxy.$onDidManagedSocketEnd(id);\n\t\t\tdisposable.dispose();\n\t\t}));\n\t\tdisposable.add(socket.onDidClose(e => {\n\t\t\tthis._proxy.$onDidManagedSocketClose(id, e?.stack ?? e?.message);\n\t\t\tdisposable.dispose();\n\t\t}));\n\t\tdisposable.add(socket.onDidReceiveMessage(e => this._proxy.$onDidManagedSocketHaveData(id, VSBuffer.wrap(e))));\n\n\t\treturn id;\n\t}\n\n\t$remoteSocketWrite(socketId: number, buffer: VSBuffer): void {\n\t\tthis._managedRemoteSockets.get(socketId)?.actual.send(buffer.buffer);\n\t}\n\n\t$remoteSocketEnd(socketId: number): void {\n\t\tconst socket = this._managedRemoteSockets.get(socketId);\n\t\tif (socket) {\n\t\t\tsocket.actual.end();\n\t\t\tsocket.dispose();\n\t\t}\n\t}\n\n\tasync $remoteSocketDrain(socketId: number): Promise<void> {\n\t\tawait this._managedRemoteSockets.get(socketId)?.actual.drain?.();\n\t}\n}\n\nclass ManagedSocketFactory {\n\tconstructor(\n\t\tpublic readonly socketFactoryId: number,\n\t\tpublic readonly makeConnection: () => Thenable<vscode.ManagedMessagePassing>,\n\t) { }\n}\n\nclass ManagedSocket extends Disposable {\n\tconstructor(\n\t\tpublic readonly socketId: number,\n\t\tpublic readonly actual: vscode.ManagedMessagePassing,\n\t\tdisposer: DisposableStore,\n\t) {\n\t\tsuper();\n\t\tthis._register(disposer);\n\t}\n}\n"],
  "mappings": ";;;;;;;;;;;;AAKA,SAAS,4BAA4B,aAAa,qCAAqC;AACvF,SAAS,uBAAuB;AAChC,YAAY,YAAY;AACxB,SAAS,YAAY,iBAAiB,oBAAoB;AAC1D,SAAS,0BAA0B;AACnC,SAAS,gBAAgB;AAOlB,MAAM,yBAAyB,gBAAwC,wBAAwB;AAE/F,IAAM,wBAAN,MAA8D;AAAA,EAnBrE,OAmBqE;AAAA;AAAA;AAAA,EAGnD;AAAA,EACT,yBAAyB;AAAA,EACzB,WAAwC;AAAA,EAC/B,wBAAoD,oBAAI,IAAI;AAAA,EAE7E,YACqB,YACnB;AACD,SAAK,SAAS,WAAW,SAAS,YAAY,wBAAwB;AAAA,EACvE;AAAA,EAEA,WAAW,iBAAyB,gBAAoE;AAEvG,eAAW,UAAU,KAAK,sBAAsB,OAAO,GAAG;AAEzD,aAAO,QAAQ;AAAA,IAChB;AAEA,QAAI,KAAK,UAAU;AAClB,WAAK,OAAO,yBAAyB,KAAK,SAAS,eAAe;AAAA,IACnE;AAEA,SAAK,WAAW,IAAI,qBAAqB,iBAAiB,cAAc;AACxE,SAAK,OAAO,uBAAuB,KAAK,SAAS,eAAe;AAAA,EACjE;AAAA,EAEA,MAAM,kBAAkB,iBAA0C;AACjE,QAAI,CAAC,KAAK,YAAY,KAAK,SAAS,oBAAoB,iBAAiB;AACxE,YAAM,IAAI,MAAM,6BAA6B,eAAe,EAAE;AAAA,IAC/D;AAEA,UAAM,KAAM,EAAE,KAAK;AACnB,UAAM,SAAS,MAAM,KAAK,SAAS,eAAe;AAClD,UAAM,aAAa,IAAI,gBAAgB;AACvC,SAAK,sBAAsB,IAAI,IAAI,IAAI,cAAc,IAAI,QAAQ,UAAU,CAAC;AAE5E,eAAW,IAAI,aAAa,MAAM,KAAK,sBAAsB,OAAO,EAAE,CAAC,CAAC;AACxE,eAAW,IAAI,OAAO,SAAS,MAAM;AACpC,WAAK,OAAO,uBAAuB,EAAE;AACrC,iBAAW,QAAQ;AAAA,IACpB,CAAC,CAAC;AACF,eAAW,IAAI,OAAO,WAAW,OAAK;AACrC,WAAK,OAAO,yBAAyB,IAAI,GAAG,SAAS,GAAG,OAAO;AAC/D,iBAAW,QAAQ;AAAA,IACpB,CAAC,CAAC;AACF,eAAW,IAAI,OAAO,oBAAoB,OAAK,KAAK,OAAO,4BAA4B,IAAI,SAAS,KAAK,CAAC,CAAC,CAAC,CAAC;AAE7G,WAAO;AAAA,EACR;AAAA,EAEA,mBAAmB,UAAkB,QAAwB;AAC5D,SAAK,sBAAsB,IAAI,QAAQ,GAAG,OAAO,KAAK,OAAO,MAAM;AAAA,EACpE;AAAA,EAEA,iBAAiB,UAAwB;AACxC,UAAM,SAAS,KAAK,sBAAsB,IAAI,QAAQ;AACtD,QAAI,QAAQ;AACX,aAAO,OAAO,IAAI;AAClB,aAAO,QAAQ;AAAA,IAChB;AAAA,EACD;AAAA,EAEA,MAAM,mBAAmB,UAAiC;AACzD,UAAM,KAAK,sBAAsB,IAAI,QAAQ,GAAG,OAAO,QAAQ;AAAA,EAChE;AACD;AApEa,wBAAN;AAAA,EASJ;AAAA,GATU;AAsEb,MAAM,qBAAqB;AAAA,EAC1B,YACiB,iBACA,gBACf;AAFe;AACA;AAAA,EACb;AAAA,EA7FL,OAyF2B;AAAA;AAAA;AAK3B;AAEA,MAAM,sBAAsB,WAAW;AAAA,EACtC,YACiB,UACA,QAChB,UACC;AACD,UAAM;AAJU;AACA;AAIhB,SAAK,UAAU,QAAQ;AAAA,EACxB;AAAA,EAxGD,OAgGuC;AAAA;AAAA;AASvC;",
  "names": []
}
