{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/api/common/extHostTestItem.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as editorRange from '../../../editor/common/core/range.js';\nimport { createPrivateApiFor, getPrivateApiFor, IExtHostTestItemApi } from './extHostTestingPrivateApi.js';\nimport { TestId, TestIdPathParts } from '../../contrib/testing/common/testId.js';\nimport { createTestItemChildren, ExtHostTestItemEvent, ITestChildrenLike, ITestItemApi, ITestItemChildren, TestItemCollection, TestItemEventOp } from '../../contrib/testing/common/testItemCollection.js';\nimport { denamespaceTestTag, ITestItem, ITestItemContext } from '../../contrib/testing/common/testTypes.js';\nimport type * as vscode from 'vscode';\nimport * as Convert from './extHostTypeConverters.js';\nimport { URI } from '../../../base/common/uri.js';\nimport { ExtHostDocumentsAndEditors } from './extHostDocumentsAndEditors.js';\n\nconst testItemPropAccessor = <K extends keyof vscode.TestItem>(\n\tapi: IExtHostTestItemApi,\n\tdefaultValue: vscode.TestItem[K],\n\tequals: (a: vscode.TestItem[K], b: vscode.TestItem[K]) => boolean,\n\ttoUpdate: (newValue: vscode.TestItem[K], oldValue: vscode.TestItem[K]) => ExtHostTestItemEvent,\n) => {\n\tlet value = defaultValue;\n\treturn {\n\t\tenumerable: true,\n\t\tconfigurable: false,\n\t\tget() {\n\t\t\treturn value;\n\t\t},\n\t\tset(newValue: vscode.TestItem[K]) {\n\t\t\tif (!equals(value, newValue)) {\n\t\t\t\tconst oldValue = value;\n\t\t\t\tvalue = newValue;\n\t\t\t\tapi.listener?.(toUpdate(newValue, oldValue));\n\t\t\t}\n\t\t},\n\t};\n};\n\ntype WritableProps = Pick<vscode.TestItem, 'range' | 'label' | 'description' | 'sortText' | 'canResolveChildren' | 'busy' | 'error' | 'tags'>;\n\nconst strictEqualComparator = <T>(a: T, b: T) => a === b;\n\nconst propComparators: { [K in keyof Required<WritableProps>]: (a: vscode.TestItem[K], b: vscode.TestItem[K]) => boolean } = {\n\trange: (a, b) => {\n\t\tif (a === b) { return true; }\n\t\tif (!a || !b) { return false; }\n\t\treturn a.isEqual(b);\n\t},\n\tlabel: strictEqualComparator,\n\tdescription: strictEqualComparator,\n\tsortText: strictEqualComparator,\n\tbusy: strictEqualComparator,\n\terror: strictEqualComparator,\n\tcanResolveChildren: strictEqualComparator,\n\ttags: (a, b) => {\n\t\tif (a.length !== b.length) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (a.some(t1 => !b.find(t2 => t1.id === t2.id))) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn true;\n\t},\n};\n\nconst evSetProps = <T>(fn: (newValue: T) => Partial<ITestItem>): (newValue: T) => ExtHostTestItemEvent =>\n\tv => ({ op: TestItemEventOp.SetProp, update: fn(v) });\n\nconst makePropDescriptors = (api: IExtHostTestItemApi, label: string): { [K in keyof Required<WritableProps>]: PropertyDescriptor } => ({\n\trange: (() => {\n\t\tlet value: vscode.Range | undefined;\n\t\tconst updateProps = evSetProps<vscode.Range | undefined>(r => ({ range: editorRange.Range.lift(Convert.Range.from(r)) }));\n\t\treturn {\n\t\t\tenumerable: true,\n\t\t\tconfigurable: false,\n\t\t\tget() {\n\t\t\t\treturn value;\n\t\t\t},\n\t\t\tset(newValue: vscode.Range | undefined) {\n\t\t\t\tapi.listener?.({ op: TestItemEventOp.DocumentSynced });\n\t\t\t\tif (!propComparators.range(value, newValue)) {\n\t\t\t\t\tvalue = newValue;\n\t\t\t\t\tapi.listener?.(updateProps(newValue));\n\t\t\t\t}\n\t\t\t},\n\t\t};\n\t})(),\n\tlabel: testItemPropAccessor<'label'>(api, label, propComparators.label, evSetProps(label => ({ label }))),\n\tdescription: testItemPropAccessor<'description'>(api, undefined, propComparators.description, evSetProps(description => ({ description }))),\n\tsortText: testItemPropAccessor<'sortText'>(api, undefined, propComparators.sortText, evSetProps(sortText => ({ sortText }))),\n\tcanResolveChildren: testItemPropAccessor<'canResolveChildren'>(api, false, propComparators.canResolveChildren, state => ({\n\t\top: TestItemEventOp.UpdateCanResolveChildren,\n\t\tstate,\n\t})),\n\tbusy: testItemPropAccessor<'busy'>(api, false, propComparators.busy, evSetProps(busy => ({ busy }))),\n\terror: testItemPropAccessor<'error'>(api, undefined, propComparators.error, evSetProps(error => ({ error: Convert.MarkdownString.fromStrict(error) || null }))),\n\ttags: testItemPropAccessor<'tags'>(api, [], propComparators.tags, (current, previous) => ({\n\t\top: TestItemEventOp.SetTags,\n\t\tnew: current.map(Convert.TestTag.from),\n\t\told: previous.map(Convert.TestTag.from),\n\t})),\n});\n\nconst toItemFromPlain = (item: ITestItem.Serialized): TestItemImpl => {\n\tconst testId = TestId.fromString(item.extId);\n\tconst testItem = new TestItemImpl(testId.controllerId, testId.localId, item.label, URI.revive(item.uri) || undefined);\n\ttestItem.range = Convert.Range.to(item.range || undefined);\n\ttestItem.description = item.description || undefined;\n\ttestItem.sortText = item.sortText || undefined;\n\ttestItem.tags = item.tags.map(t => Convert.TestTag.to({ id: denamespaceTestTag(t).tagId }));\n\treturn testItem;\n};\n\nexport const toItemFromContext = (context: ITestItemContext): TestItemImpl => {\n\tlet node: TestItemImpl | undefined;\n\tfor (const test of context.tests) {\n\t\tconst next = toItemFromPlain(test.item);\n\t\tgetPrivateApiFor(next).parent = node;\n\t\tnode = next;\n\t}\n\n\treturn node!;\n};\n\nexport class TestItemImpl implements vscode.TestItem {\n\tpublic readonly id!: string;\n\tpublic readonly uri!: vscode.Uri | undefined;\n\tpublic readonly children!: ITestItemChildren<vscode.TestItem>;\n\tpublic readonly parent!: TestItemImpl | undefined;\n\n\tpublic range!: vscode.Range | undefined;\n\tpublic description!: string | undefined;\n\tpublic sortText!: string | undefined;\n\tpublic label!: string;\n\tpublic error!: string | vscode.MarkdownString;\n\tpublic busy!: boolean;\n\tpublic canResolveChildren!: boolean;\n\tpublic tags!: readonly vscode.TestTag[];\n\n\t/**\n\t * Note that data is deprecated and here for back-compat only\n\t */\n\tconstructor(controllerId: string, id: string, label: string, uri: vscode.Uri | undefined) {\n\t\tif (id.includes(TestIdPathParts.Delimiter)) {\n\t\t\tthrow new Error(`Test IDs may not include the ${JSON.stringify(id)} symbol`);\n\t\t}\n\n\t\tconst api = createPrivateApiFor(this, controllerId);\n\t\tObject.defineProperties(this, {\n\t\t\tid: {\n\t\t\t\tvalue: id,\n\t\t\t\tenumerable: true,\n\t\t\t\twritable: false,\n\t\t\t},\n\t\t\turi: {\n\t\t\t\tvalue: uri,\n\t\t\t\tenumerable: true,\n\t\t\t\twritable: false,\n\t\t\t},\n\t\t\tparent: {\n\t\t\t\tenumerable: false,\n\t\t\t\tget() {\n\t\t\t\t\treturn api.parent instanceof TestItemRootImpl ? undefined : api.parent;\n\t\t\t\t},\n\t\t\t},\n\t\t\tchildren: {\n\t\t\t\tvalue: createTestItemChildren(api, getPrivateApiFor, TestItemImpl),\n\t\t\t\tenumerable: true,\n\t\t\t\twritable: false,\n\t\t\t},\n\t\t\t...makePropDescriptors(api, label),\n\t\t});\n\t}\n}\n\nexport class TestItemRootImpl extends TestItemImpl {\n\tpublic readonly _isRoot = true;\n\n\tconstructor(controllerId: string, label: string) {\n\t\tsuper(controllerId, controllerId, label, undefined);\n\t}\n}\n\nexport class ExtHostTestItemCollection extends TestItemCollection<TestItemImpl> {\n\tconstructor(controllerId: string, controllerLabel: string, editors: ExtHostDocumentsAndEditors) {\n\t\tsuper({\n\t\t\tcontrollerId,\n\t\t\tgetDocumentVersion: uri => uri && editors.getDocument(uri)?.version,\n\t\t\tgetApiFor: getPrivateApiFor as (impl: TestItemImpl) => ITestItemApi<TestItemImpl>,\n\t\t\tgetChildren: (item) => item.children as ITestChildrenLike<TestItemImpl>,\n\t\t\troot: new TestItemRootImpl(controllerId, controllerLabel),\n\t\t\ttoITestItem: Convert.TestItem.from,\n\t\t});\n\t}\n}\n"],
  "mappings": "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",
  "names": ["label"]
}
