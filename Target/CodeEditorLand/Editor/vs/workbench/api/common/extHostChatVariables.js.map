{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/api/common/extHostChatVariables.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CancellationToken } from '../../../base/common/cancellation.js';\nimport { onUnexpectedExternalError } from '../../../base/common/errors.js';\nimport { IDisposable, toDisposable } from '../../../base/common/lifecycle.js';\nimport { ThemeIcon } from '../../../base/common/themables.js';\nimport { IExtensionDescription } from '../../../platform/extensions/common/extensions.js';\nimport { ExtHostChatVariablesShape, IChatVariableResolverProgressDto, IMainContext, MainContext, MainThreadChatVariablesShape } from './extHost.protocol.js';\nimport * as typeConvert from './extHostTypeConverters.js';\nimport * as extHostTypes from './extHostTypes.js';\nimport { IChatRequestVariableValue, IChatVariableData } from '../../contrib/chat/common/chatVariables.js';\nimport { checkProposedApiEnabled } from '../../services/extensions/common/extensions.js';\nimport type * as vscode from 'vscode';\n\nexport class ExtHostChatVariables implements ExtHostChatVariablesShape {\n\n\tprivate static _idPool = 0;\n\n\tprivate readonly _resolver = new Map<number, { extension: IExtensionDescription; data: IChatVariableData; resolver: vscode.ChatVariableResolver }>();\n\tprivate readonly _proxy: MainThreadChatVariablesShape;\n\n\tconstructor(mainContext: IMainContext) {\n\t\tthis._proxy = mainContext.getProxy(MainContext.MainThreadChatVariables);\n\t}\n\n\tasync $resolveVariable(handle: number, requestId: string, messageText: string, token: CancellationToken): Promise<IChatRequestVariableValue | undefined> {\n\t\tconst item = this._resolver.get(handle);\n\t\tif (!item) {\n\t\t\treturn undefined;\n\t\t}\n\t\ttry {\n\t\t\tif (item.resolver.resolve2) {\n\t\t\t\tcheckProposedApiEnabled(item.extension, 'chatParticipantAdditions');\n\t\t\t\tconst stream = new ChatVariableResolverResponseStream(requestId, this._proxy);\n\t\t\t\tconst value = await item.resolver.resolve2(item.data.name, { prompt: messageText }, stream.apiObject, token);\n\n\t\t\t\t// Temp, ignoring other returned values to convert the array into a single value\n\t\t\t\tif (value && value[0]) {\n\t\t\t\t\treturn value[0].value;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tconst value = await item.resolver.resolve(item.data.name, { prompt: messageText }, token);\n\t\t\t\tif (value && value[0]) {\n\t\t\t\t\treturn value[0].value;\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (err) {\n\t\t\tonUnexpectedExternalError(err);\n\t\t}\n\t\treturn undefined;\n\t}\n\n\tregisterVariableResolver(extension: IExtensionDescription, id: string, name: string, userDescription: string, modelDescription: string | undefined, isSlow: boolean | undefined, resolver: vscode.ChatVariableResolver, fullName?: string, themeIconId?: string): IDisposable {\n\t\tconst handle = ExtHostChatVariables._idPool++;\n\t\tconst icon = themeIconId ? ThemeIcon.fromId(themeIconId) : undefined;\n\t\tthis._resolver.set(handle, { extension, data: { id, name, description: userDescription, modelDescription, icon }, resolver: resolver });\n\t\tthis._proxy.$registerVariable(handle, { id, name, description: userDescription, modelDescription, isSlow, fullName, icon });\n\n\t\treturn toDisposable(() => {\n\t\t\tthis._resolver.delete(handle);\n\t\t\tthis._proxy.$unregisterVariable(handle);\n\t\t});\n\t}\n}\n\nclass ChatVariableResolverResponseStream {\n\n\tprivate _isClosed: boolean = false;\n\tprivate _apiObject: vscode.ChatVariableResolverResponseStream | undefined;\n\n\tconstructor(\n\t\tprivate readonly _requestId: string,\n\t\tprivate readonly _proxy: MainThreadChatVariablesShape,\n\t) { }\n\n\tclose() {\n\t\tthis._isClosed = true;\n\t}\n\n\tget apiObject() {\n\t\tif (!this._apiObject) {\n\t\t\tconst that = this;\n\n\t\t\tfunction throwIfDone(source: Function | undefined) {\n\t\t\t\tif (that._isClosed) {\n\t\t\t\t\tconst err = new Error('Response stream has been closed');\n\t\t\t\t\tError.captureStackTrace(err, source);\n\t\t\t\t\tthrow err;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst _report = (progress: IChatVariableResolverProgressDto) => {\n\t\t\t\tthis._proxy.$handleProgressChunk(this._requestId, progress);\n\t\t\t};\n\n\t\t\tthis._apiObject = {\n\t\t\t\tprogress(value) {\n\t\t\t\t\tthrowIfDone(this.progress);\n\t\t\t\t\tconst part = new extHostTypes.ChatResponseProgressPart(value);\n\t\t\t\t\tconst dto = typeConvert.ChatResponseProgressPart.from(part);\n\t\t\t\t\t_report(dto);\n\t\t\t\t\treturn this;\n\t\t\t\t},\n\t\t\t\treference(value) {\n\t\t\t\t\tthrowIfDone(this.reference);\n\t\t\t\t\tconst part = new extHostTypes.ChatResponseReferencePart(value);\n\t\t\t\t\tconst dto = typeConvert.ChatResponseReferencePart.from(part);\n\t\t\t\t\t_report(dto);\n\t\t\t\t\treturn this;\n\t\t\t\t},\n\t\t\t\tpush(part) {\n\t\t\t\t\tthrowIfDone(this.push);\n\n\t\t\t\t\tif (part instanceof extHostTypes.ChatResponseReferencePart) {\n\t\t\t\t\t\t_report(typeConvert.ChatResponseReferencePart.from(part));\n\t\t\t\t\t} else if (part instanceof extHostTypes.ChatResponseProgressPart) {\n\t\t\t\t\t\t_report(typeConvert.ChatResponseProgressPart.from(part));\n\t\t\t\t\t}\n\n\t\t\t\t\treturn this;\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\n\t\treturn this._apiObject;\n\t}\n}\n"],
  "mappings": ";;AAKA,SAAS,yBAAyB;AAClC,SAAS,iCAAiC;AAC1C,SAAS,aAAa,oBAAoB;AAC1C,SAAS,iBAAiB;AAC1B,SAAS,6BAA6B;AACtC,SAAS,2BAA2B,kCAAkC,cAAc,aAAa,oCAAoC;AACrI,YAAY,iBAAiB;AAC7B,YAAY,kBAAkB;AAC9B,SAAS,2BAA2B,yBAAyB;AAC7D,SAAS,+BAA+B;AAGjC,MAAM,qBAA0D;AAAA,EAjBvE,OAiBuE;AAAA;AAAA;AAAA,EAEtE,OAAe,UAAU;AAAA,EAER,YAAY,oBAAI,IAAkH;AAAA,EAClI;AAAA,EAEjB,YAAY,aAA2B;AACtC,SAAK,SAAS,YAAY,SAAS,YAAY,uBAAuB;AAAA,EACvE;AAAA,EAEA,MAAM,iBAAiB,QAAgB,WAAmB,aAAqB,OAA0E;AACxJ,UAAM,OAAO,KAAK,UAAU,IAAI,MAAM;AACtC,QAAI,CAAC,MAAM;AACV,aAAO;AAAA,IACR;AACA,QAAI;AACH,UAAI,KAAK,SAAS,UAAU;AAC3B,gCAAwB,KAAK,WAAW,0BAA0B;AAClE,cAAM,SAAS,IAAI,mCAAmC,WAAW,KAAK,MAAM;AAC5E,cAAM,QAAQ,MAAM,KAAK,SAAS,SAAS,KAAK,KAAK,MAAM,EAAE,QAAQ,YAAY,GAAG,OAAO,WAAW,KAAK;AAG3G,YAAI,SAAS,MAAM,CAAC,GAAG;AACtB,iBAAO,MAAM,CAAC,EAAE;AAAA,QACjB;AAAA,MACD,OAAO;AACN,cAAM,QAAQ,MAAM,KAAK,SAAS,QAAQ,KAAK,KAAK,MAAM,EAAE,QAAQ,YAAY,GAAG,KAAK;AACxF,YAAI,SAAS,MAAM,CAAC,GAAG;AACtB,iBAAO,MAAM,CAAC,EAAE;AAAA,QACjB;AAAA,MACD;AAAA,IACD,SAAS,KAAK;AACb,gCAA0B,GAAG;AAAA,IAC9B;AACA,WAAO;AAAA,EACR;AAAA,EAEA,yBAAyB,WAAkC,IAAY,MAAc,iBAAyB,kBAAsC,QAA6B,UAAuC,UAAmB,aAAmC;AAC7Q,UAAM,SAAS,qBAAqB;AACpC,UAAM,OAAO,cAAc,UAAU,OAAO,WAAW,IAAI;AAC3D,SAAK,UAAU,IAAI,QAAQ,EAAE,WAAW,MAAM,EAAE,IAAI,MAAM,aAAa,iBAAiB,kBAAkB,KAAK,GAAG,SAAmB,CAAC;AACtI,SAAK,OAAO,kBAAkB,QAAQ,EAAE,IAAI,MAAM,aAAa,iBAAiB,kBAAkB,QAAQ,UAAU,KAAK,CAAC;AAE1H,WAAO,aAAa,MAAM;AACzB,WAAK,UAAU,OAAO,MAAM;AAC5B,WAAK,OAAO,oBAAoB,MAAM;AAAA,IACvC,CAAC;AAAA,EACF;AACD;AAEA,MAAM,mCAAmC;AAAA,EAKxC,YACkB,YACA,QAChB;AAFgB;AACA;AAAA,EACd;AAAA,EA5EL,OAoEyC;AAAA;AAAA;AAAA,EAEhC,YAAqB;AAAA,EACrB;AAAA,EAOR,QAAQ;AACP,SAAK,YAAY;AAAA,EAClB;AAAA,EAEA,IAAI,YAAY;AACf,QAAI,CAAC,KAAK,YAAY;AAGrB,UAASA,eAAT,SAAqB,QAA8B;AAClD,YAAI,KAAK,WAAW;AACnB,gBAAM,MAAM,IAAI,MAAM,iCAAiC;AACvD,gBAAM,kBAAkB,KAAK,MAAM;AACnC,gBAAM;AAAA,QACP;AAAA,MACD;AANS,wBAAAA;AAAA,aAAAA,cAAA;AAFT,YAAM,OAAO;AAUb,YAAM,UAAU,wBAAC,aAA+C;AAC/D,aAAK,OAAO,qBAAqB,KAAK,YAAY,QAAQ;AAAA,MAC3D,GAFgB;AAIhB,WAAK,aAAa;AAAA,QACjB,SAAS,OAAO;AACf,UAAAA,aAAY,KAAK,QAAQ;AACzB,gBAAM,OAAO,IAAI,aAAa,yBAAyB,KAAK;AAC5D,gBAAM,MAAM,YAAY,yBAAyB,KAAK,IAAI;AAC1D,kBAAQ,GAAG;AACX,iBAAO;AAAA,QACR;AAAA,QACA,UAAU,OAAO;AAChB,UAAAA,aAAY,KAAK,SAAS;AAC1B,gBAAM,OAAO,IAAI,aAAa,0BAA0B,KAAK;AAC7D,gBAAM,MAAM,YAAY,0BAA0B,KAAK,IAAI;AAC3D,kBAAQ,GAAG;AACX,iBAAO;AAAA,QACR;AAAA,QACA,KAAK,MAAM;AACV,UAAAA,aAAY,KAAK,IAAI;AAErB,cAAI,gBAAgB,aAAa,2BAA2B;AAC3D,oBAAQ,YAAY,0BAA0B,KAAK,IAAI,CAAC;AAAA,UACzD,WAAW,gBAAgB,aAAa,0BAA0B;AACjE,oBAAQ,YAAY,yBAAyB,KAAK,IAAI,CAAC;AAAA,UACxD;AAEA,iBAAO;AAAA,QACR;AAAA,MACD;AAAA,IACD;AAEA,WAAO,KAAK;AAAA,EACb;AACD;",
  "names": ["throwIfDone"]
}
