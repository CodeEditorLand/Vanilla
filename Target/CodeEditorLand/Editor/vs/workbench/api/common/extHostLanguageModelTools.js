import{raceCancellation as i}from"../../../../vs/base/common/async.js";import{CancellationToken as g}from"../../../../vs/base/common/cancellation.js";import{CancellationError as c}from"../../../../vs/base/common/errors.js";import{toDisposable as u}from"../../../../vs/base/common/lifecycle.js";import{revive as T}from"../../../../vs/base/common/marshalling.js";import{generateUuid as p}from"../../../../vs/base/common/uuid.js";import"../../../../vs/platform/extensions/common/extensions.js";import{MainContext as d}from"../../../../vs/workbench/api/common/extHost.protocol.js";import*as r from"../../../../vs/workbench/api/common/extHostTypeConverters.js";import"../../../../vs/workbench/contrib/chat/common/languageModelToolsService.js";class O{_registeredTools=new Map;_proxy;_tokenCountFuncs=new Map;_allTools=new Map;constructor(o){this._proxy=o.getProxy(d.MainThreadLanguageModelTools),this._proxy.$getTools().then(e=>{for(const t of e)this._allTools.set(t.id,T(t))})}async $countTokensForInvocation(o,e,t){const n=this._tokenCountFuncs.get(o);if(!n)throw new Error(`Tool invocation call ${o} not found`);return await n(e,t)}async invokeTool(o,e,t){const n=p();e.tokenOptions&&this._tokenCountFuncs.set(n,e.tokenOptions.countTokens);try{const s=await this._proxy.$invokeTool({toolId:o,callId:n,parameters:e.parameters,tokenBudget:e.tokenOptions?.tokenBudget},t);return r.LanguageModelToolResult.to(s)}finally{this._tokenCountFuncs.delete(n)}}$onDidChangeTools(o){this._allTools.clear();for(const e of o)this._allTools.set(e.id,e)}get tools(){return Array.from(this._allTools.values()).map(o=>r.LanguageModelToolDescription.to(o))}async $invokeTool(o,e){const t=this._registeredTools.get(o.toolId);if(!t)throw new Error(`Unknown tool ${o.toolId}`);const n={parameters:o.parameters};o.tokenBudget!==void 0&&(n.tokenOptions={tokenBudget:o.tokenBudget,countTokens:this._tokenCountFuncs.get(o.callId)||((a,l=g.None)=>this._proxy.$countTokensForInvocation(o.callId,a,l))});const s=await i(Promise.resolve(t.tool.invoke(n,e)),e);if(!s)throw new c;return r.LanguageModelToolResult.from(s)}registerTool(o,e,t){return this._registeredTools.set(e,{extension:o,tool:t}),this._proxy.$registerTool(e),u(()=>{this._registeredTools.delete(e),this._proxy.$unregisterTool(e)})}}export{O as ExtHostLanguageModelTools};
