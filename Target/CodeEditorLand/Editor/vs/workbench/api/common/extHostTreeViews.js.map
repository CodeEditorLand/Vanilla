{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/api/common/extHostTreeViews.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport type * as vscode from \"vscode\";\nimport { coalesce, equals } from \"../../../base/common/arrays.js\";\nimport { asPromise } from \"../../../base/common/async.js\";\nimport {\n\ttype CancellationToken,\n\tCancellationTokenSource,\n} from \"../../../base/common/cancellation.js\";\nimport { Emitter, Event } from \"../../../base/common/event.js\";\nimport {\n\ttype IMarkdownString,\n\tisMarkdownString,\n} from \"../../../base/common/htmlContent.js\";\nimport {\n\tDisposable,\n\tDisposableStore,\n\ttype IDisposable,\n} from \"../../../base/common/lifecycle.js\";\nimport { basename } from \"../../../base/common/resources.js\";\nimport { isString, isUndefinedOrNull } from \"../../../base/common/types.js\";\nimport { URI } from \"../../../base/common/uri.js\";\nimport {\n\ttype ITreeViewsDnDService,\n\tTreeViewsDnDService,\n} from \"../../../editor/common/services/treeViewsDnd.js\";\nimport { localize } from \"../../../nls.js\";\nimport type { IAccessibilityInformation } from \"../../../platform/accessibility/common/accessibility.js\";\nimport type { IExtensionDescription } from \"../../../platform/extensions/common/extensions.js\";\nimport type { ILogService } from \"../../../platform/log/common/log.js\";\nimport {\n\ttype IRevealOptions,\n\ttype ITreeItem,\n\ttype ITreeItemCheckboxState,\n\ttype ITreeItemLabel,\n\tNoTreeViewError,\n\ttype TreeCommand,\n\ttype TreeViewItemHandleArg,\n\ttype TreeViewPaneHandleArg,\n} from \"../../common/views.js\";\nimport { checkProposedApiEnabled } from \"../../services/extensions/common/extensions.js\";\nimport type {\n\tCheckboxUpdate,\n\tDataTransferDTO,\n\tExtHostTreeViewsShape,\n\tMainThreadTreeViewsShape,\n} from \"./extHost.protocol.js\";\nimport type { CommandsConverter, ExtHostCommands } from \"./extHostCommands.js\";\nimport {\n\tDataTransfer,\n\tMarkdownString,\n\tViewBadge,\n} from \"./extHostTypeConverters.js\";\nimport * as extHostTypes from \"./extHostTypes.js\";\n\ntype TreeItemHandle = string;\n\nfunction toTreeItemLabel(\n\tlabel: any,\n\textension: IExtensionDescription,\n): ITreeItemLabel | undefined {\n\tif (isString(label)) {\n\t\treturn { label };\n\t}\n\n\tif (label && typeof label === \"object\" && typeof label.label === \"string\") {\n\t\tlet highlights: [number, number][] | undefined;\n\t\tif (Array.isArray(label.highlights)) {\n\t\t\thighlights = (<[number, number][]>label.highlights).filter(\n\t\t\t\t(highlight) =>\n\t\t\t\t\thighlight.length === 2 &&\n\t\t\t\t\ttypeof highlight[0] === \"number\" &&\n\t\t\t\t\ttypeof highlight[1] === \"number\",\n\t\t\t);\n\t\t\thighlights = highlights.length ? highlights : undefined;\n\t\t}\n\t\treturn { label: label.label, highlights };\n\t}\n\n\treturn undefined;\n}\n\nexport class ExtHostTreeViews\n\textends Disposable\n\timplements ExtHostTreeViewsShape\n{\n\tprivate treeViews: Map<string, ExtHostTreeView<any>> = new Map<\n\t\tstring,\n\t\tExtHostTreeView<any>\n\t>();\n\tprivate treeDragAndDropService: ITreeViewsDnDService<vscode.DataTransfer> =\n\t\tnew TreeViewsDnDService<vscode.DataTransfer>();\n\n\tconstructor(\n\t\tprivate _proxy: MainThreadTreeViewsShape,\n\t\tprivate commands: ExtHostCommands,\n\t\tprivate logService: ILogService,\n\t) {\n\t\tsuper();\n\t\tfunction isTreeViewConvertableItem(arg: any): boolean {\n\t\t\treturn (\n\t\t\t\targ &&\n\t\t\t\targ.$treeViewId &&\n\t\t\t\t(arg.$treeItemHandle ||\n\t\t\t\t\targ.$selectedTreeItems ||\n\t\t\t\t\targ.$focusedTreeItem)\n\t\t\t);\n\t\t}\n\t\tcommands.registerArgumentProcessor({\n\t\t\tprocessArgument: (arg) => {\n\t\t\t\tif (isTreeViewConvertableItem(arg)) {\n\t\t\t\t\treturn this.convertArgument(arg);\n\t\t\t\t} else if (Array.isArray(arg) && arg.length > 0) {\n\t\t\t\t\treturn arg.map((item) => {\n\t\t\t\t\t\tif (isTreeViewConvertableItem(item)) {\n\t\t\t\t\t\t\treturn this.convertArgument(item);\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn item;\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\treturn arg;\n\t\t\t},\n\t\t});\n\t}\n\n\tregisterTreeDataProvider<T>(\n\t\tid: string,\n\t\ttreeDataProvider: vscode.TreeDataProvider<T>,\n\t\textension: IExtensionDescription,\n\t): vscode.Disposable {\n\t\tconst treeView = this.createTreeView(\n\t\t\tid,\n\t\t\t{ treeDataProvider },\n\t\t\textension,\n\t\t);\n\t\treturn { dispose: () => treeView.dispose() };\n\t}\n\n\tcreateTreeView<T>(\n\t\tviewId: string,\n\t\toptions: vscode.TreeViewOptions<T>,\n\t\textension: IExtensionDescription,\n\t): vscode.TreeView<T> {\n\t\tif (!options || !options.treeDataProvider) {\n\t\t\tthrow new Error(\"Options with treeDataProvider is mandatory\");\n\t\t}\n\t\tconst dropMimeTypes =\n\t\t\toptions.dragAndDropController?.dropMimeTypes ?? [];\n\t\tconst dragMimeTypes =\n\t\t\toptions.dragAndDropController?.dragMimeTypes ?? [];\n\t\tconst hasHandleDrag = !!options.dragAndDropController?.handleDrag;\n\t\tconst hasHandleDrop = !!options.dragAndDropController?.handleDrop;\n\t\tconst treeView = this.createExtHostTreeView(viewId, options, extension);\n\t\tconst proxyOptions = {\n\t\t\tshowCollapseAll: !!options.showCollapseAll,\n\t\t\tcanSelectMany: !!options.canSelectMany,\n\t\t\tdropMimeTypes,\n\t\t\tdragMimeTypes,\n\t\t\thasHandleDrag,\n\t\t\thasHandleDrop,\n\t\t\tmanuallyManageCheckboxes: !!options.manageCheckboxStateManually,\n\t\t};\n\t\tconst registerPromise = this._proxy.$registerTreeViewDataProvider(\n\t\t\tviewId,\n\t\t\tproxyOptions,\n\t\t);\n\t\tconst view = {\n\t\t\tget onDidCollapseElement() {\n\t\t\t\treturn treeView.onDidCollapseElement;\n\t\t\t},\n\t\t\tget onDidExpandElement() {\n\t\t\t\treturn treeView.onDidExpandElement;\n\t\t\t},\n\t\t\tget selection() {\n\t\t\t\treturn treeView.selectedElements;\n\t\t\t},\n\t\t\tget onDidChangeSelection() {\n\t\t\t\treturn treeView.onDidChangeSelection;\n\t\t\t},\n\t\t\tget activeItem() {\n\t\t\t\tcheckProposedApiEnabled(extension, \"treeViewActiveItem\");\n\t\t\t\treturn treeView.focusedElement;\n\t\t\t},\n\t\t\tget onDidChangeActiveItem() {\n\t\t\t\tcheckProposedApiEnabled(extension, \"treeViewActiveItem\");\n\t\t\t\treturn treeView.onDidChangeActiveItem;\n\t\t\t},\n\t\t\tget visible() {\n\t\t\t\treturn treeView.visible;\n\t\t\t},\n\t\t\tget onDidChangeVisibility() {\n\t\t\t\treturn treeView.onDidChangeVisibility;\n\t\t\t},\n\t\t\tget onDidChangeCheckboxState() {\n\t\t\t\treturn treeView.onDidChangeCheckboxState;\n\t\t\t},\n\t\t\tget message() {\n\t\t\t\treturn treeView.message;\n\t\t\t},\n\t\t\tset message(message: string | vscode.MarkdownString) {\n\t\t\t\tif (isMarkdownString(message)) {\n\t\t\t\t\tcheckProposedApiEnabled(\n\t\t\t\t\t\textension,\n\t\t\t\t\t\t\"treeViewMarkdownMessage\",\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t\ttreeView.message = message;\n\t\t\t},\n\t\t\tget title() {\n\t\t\t\treturn treeView.title;\n\t\t\t},\n\t\t\tset title(title: string) {\n\t\t\t\ttreeView.title = title;\n\t\t\t},\n\t\t\tget description() {\n\t\t\t\treturn treeView.description;\n\t\t\t},\n\t\t\tset description(description: string | undefined) {\n\t\t\t\ttreeView.description = description;\n\t\t\t},\n\t\t\tget badge() {\n\t\t\t\treturn treeView.badge;\n\t\t\t},\n\t\t\tset badge(badge: vscode.ViewBadge | undefined) {\n\t\t\t\tif (\n\t\t\t\t\tbadge !== undefined &&\n\t\t\t\t\textHostTypes.ViewBadge.isViewBadge(badge)\n\t\t\t\t) {\n\t\t\t\t\ttreeView.badge = {\n\t\t\t\t\t\tvalue: Math.floor(Math.abs(badge.value)),\n\t\t\t\t\t\ttooltip: badge.tooltip,\n\t\t\t\t\t};\n\t\t\t\t} else if (badge === undefined) {\n\t\t\t\t\ttreeView.badge = undefined;\n\t\t\t\t}\n\t\t\t},\n\t\t\treveal: (element: T, options?: IRevealOptions): Promise<void> => {\n\t\t\t\treturn treeView.reveal(element, options);\n\t\t\t},\n\t\t\tdispose: async () => {\n\t\t\t\t// Wait for the registration promise to finish before doing the dispose.\n\t\t\t\tawait registerPromise;\n\t\t\t\tthis.treeViews.delete(viewId);\n\t\t\t\ttreeView.dispose();\n\t\t\t},\n\t\t};\n\t\tthis._register(view);\n\t\treturn view as vscode.TreeView<T>;\n\t}\n\n\t$getChildren(\n\t\ttreeViewId: string,\n\t\ttreeItemHandle?: string,\n\t): Promise<ITreeItem[] | undefined> {\n\t\tconst treeView = this.treeViews.get(treeViewId);\n\t\tif (!treeView) {\n\t\t\treturn Promise.reject(new NoTreeViewError(treeViewId));\n\t\t}\n\t\treturn treeView.getChildren(treeItemHandle);\n\t}\n\n\tasync $handleDrop(\n\t\tdestinationViewId: string,\n\t\trequestId: number,\n\t\ttreeDataTransferDTO: DataTransferDTO,\n\t\ttargetItemHandle: string | undefined,\n\t\ttoken: CancellationToken,\n\t\toperationUuid?: string,\n\t\tsourceViewId?: string,\n\t\tsourceTreeItemHandles?: string[],\n\t): Promise<void> {\n\t\tconst treeView = this.treeViews.get(destinationViewId);\n\t\tif (!treeView) {\n\t\t\treturn Promise.reject(new NoTreeViewError(destinationViewId));\n\t\t}\n\n\t\tconst treeDataTransfer = DataTransfer.toDataTransfer(\n\t\t\ttreeDataTransferDTO,\n\t\t\tasync (dataItemIndex) => {\n\t\t\t\treturn (\n\t\t\t\t\tawait this._proxy.$resolveDropFileData(\n\t\t\t\t\t\tdestinationViewId,\n\t\t\t\t\t\trequestId,\n\t\t\t\t\t\tdataItemIndex,\n\t\t\t\t\t)\n\t\t\t\t).buffer;\n\t\t\t},\n\t\t);\n\t\tif (sourceViewId === destinationViewId && sourceTreeItemHandles) {\n\t\t\tawait this.addAdditionalTransferItems(\n\t\t\t\ttreeDataTransfer,\n\t\t\t\ttreeView,\n\t\t\t\tsourceTreeItemHandles,\n\t\t\t\ttoken,\n\t\t\t\toperationUuid,\n\t\t\t);\n\t\t}\n\t\treturn treeView.onDrop(treeDataTransfer, targetItemHandle, token);\n\t}\n\n\tprivate async addAdditionalTransferItems(\n\t\ttreeDataTransfer: vscode.DataTransfer,\n\t\ttreeView: ExtHostTreeView<any>,\n\t\tsourceTreeItemHandles: string[],\n\t\ttoken: CancellationToken,\n\t\toperationUuid?: string,\n\t): Promise<vscode.DataTransfer | undefined> {\n\t\tconst existingTransferOperation =\n\t\t\tthis.treeDragAndDropService.removeDragOperationTransfer(\n\t\t\t\toperationUuid,\n\t\t\t);\n\t\tif (existingTransferOperation) {\n\t\t\t(await existingTransferOperation)?.forEach((value, key) => {\n\t\t\t\tif (value) {\n\t\t\t\t\ttreeDataTransfer.set(key, value);\n\t\t\t\t}\n\t\t\t});\n\t\t} else if (operationUuid && treeView.handleDrag) {\n\t\t\tconst willDropPromise = treeView.handleDrag(\n\t\t\t\tsourceTreeItemHandles,\n\t\t\t\ttreeDataTransfer,\n\t\t\t\ttoken,\n\t\t\t);\n\t\t\tthis.treeDragAndDropService.addDragOperationTransfer(\n\t\t\t\toperationUuid,\n\t\t\t\twillDropPromise,\n\t\t\t);\n\t\t\tawait willDropPromise;\n\t\t}\n\t\treturn treeDataTransfer;\n\t}\n\n\tasync $handleDrag(\n\t\tsourceViewId: string,\n\t\tsourceTreeItemHandles: string[],\n\t\toperationUuid: string,\n\t\ttoken: CancellationToken,\n\t): Promise<DataTransferDTO | undefined> {\n\t\tconst treeView = this.treeViews.get(sourceViewId);\n\t\tif (!treeView) {\n\t\t\treturn Promise.reject(new NoTreeViewError(sourceViewId));\n\t\t}\n\n\t\tconst treeDataTransfer = await this.addAdditionalTransferItems(\n\t\t\tnew extHostTypes.DataTransfer(),\n\t\t\ttreeView,\n\t\t\tsourceTreeItemHandles,\n\t\t\ttoken,\n\t\t\toperationUuid,\n\t\t);\n\t\tif (!treeDataTransfer || token.isCancellationRequested) {\n\t\t\treturn;\n\t\t}\n\n\t\treturn DataTransfer.from(treeDataTransfer);\n\t}\n\n\tasync $hasResolve(treeViewId: string): Promise<boolean> {\n\t\tconst treeView = this.treeViews.get(treeViewId);\n\t\tif (!treeView) {\n\t\t\tthrow new NoTreeViewError(treeViewId);\n\t\t}\n\t\treturn treeView.hasResolve;\n\t}\n\n\t$resolve(\n\t\ttreeViewId: string,\n\t\ttreeItemHandle: string,\n\t\ttoken: vscode.CancellationToken,\n\t): Promise<ITreeItem | undefined> {\n\t\tconst treeView = this.treeViews.get(treeViewId);\n\t\tif (!treeView) {\n\t\t\tthrow new NoTreeViewError(treeViewId);\n\t\t}\n\t\treturn treeView.resolveTreeItem(treeItemHandle, token);\n\t}\n\n\t$setExpanded(\n\t\ttreeViewId: string,\n\t\ttreeItemHandle: string,\n\t\texpanded: boolean,\n\t): void {\n\t\tconst treeView = this.treeViews.get(treeViewId);\n\t\tif (!treeView) {\n\t\t\tthrow new NoTreeViewError(treeViewId);\n\t\t}\n\t\ttreeView.setExpanded(treeItemHandle, expanded);\n\t}\n\n\t$setSelectionAndFocus(\n\t\ttreeViewId: string,\n\t\tselectedHandles: string[],\n\t\tfocusedHandle: string,\n\t) {\n\t\tconst treeView = this.treeViews.get(treeViewId);\n\t\tif (!treeView) {\n\t\t\tthrow new NoTreeViewError(treeViewId);\n\t\t}\n\t\ttreeView.setSelectionAndFocus(selectedHandles, focusedHandle);\n\t}\n\n\t$setVisible(treeViewId: string, isVisible: boolean): void {\n\t\tconst treeView = this.treeViews.get(treeViewId);\n\t\tif (!treeView) {\n\t\t\tif (!isVisible) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tthrow new NoTreeViewError(treeViewId);\n\t\t}\n\t\ttreeView.setVisible(isVisible);\n\t}\n\n\t$changeCheckboxState(\n\t\ttreeViewId: string,\n\t\tcheckboxUpdate: CheckboxUpdate[],\n\t): void {\n\t\tconst treeView = this.treeViews.get(treeViewId);\n\t\tif (!treeView) {\n\t\t\tthrow new NoTreeViewError(treeViewId);\n\t\t}\n\t\ttreeView.setCheckboxState(checkboxUpdate);\n\t}\n\n\tprivate createExtHostTreeView<T>(\n\t\tid: string,\n\t\toptions: vscode.TreeViewOptions<T>,\n\t\textension: IExtensionDescription,\n\t): ExtHostTreeView<T> {\n\t\tconst treeView = this._register(\n\t\t\tnew ExtHostTreeView<T>(\n\t\t\t\tid,\n\t\t\t\toptions,\n\t\t\t\tthis._proxy,\n\t\t\t\tthis.commands.converter,\n\t\t\t\tthis.logService,\n\t\t\t\textension,\n\t\t\t),\n\t\t);\n\t\tthis.treeViews.set(id, treeView);\n\t\treturn treeView;\n\t}\n\n\tprivate convertArgument(\n\t\targ: TreeViewItemHandleArg | TreeViewPaneHandleArg,\n\t): any {\n\t\tconst treeView = this.treeViews.get(arg.$treeViewId);\n\t\tif (treeView && \"$treeItemHandle\" in arg) {\n\t\t\treturn treeView.getExtensionElement(arg.$treeItemHandle);\n\t\t}\n\t\tif (treeView && \"$focusedTreeItem\" in arg && arg.$focusedTreeItem) {\n\t\t\treturn treeView.focusedElement;\n\t\t}\n\t\treturn null;\n\t}\n}\n\ntype Root = null | undefined | void;\ntype TreeData<T> = { message: boolean; element: T | T[] | Root | false };\n\ninterface TreeNode extends IDisposable {\n\titem: ITreeItem;\n\textensionItem: vscode.TreeItem;\n\tparent: TreeNode | Root;\n\tchildren?: TreeNode[];\n\tdisposableStore: DisposableStore;\n}\n\nclass ExtHostTreeView<T> extends Disposable {\n\tprivate static readonly LABEL_HANDLE_PREFIX = \"0\";\n\tprivate static readonly ID_HANDLE_PREFIX = \"1\";\n\n\tprivate readonly dataProvider: vscode.TreeDataProvider<T>;\n\tprivate readonly dndController:\n\t\t| vscode.TreeDragAndDropController<T>\n\t\t| undefined;\n\n\tprivate roots: TreeNode[] | undefined = undefined;\n\tprivate elements: Map<TreeItemHandle, T> = new Map<TreeItemHandle, T>();\n\tprivate nodes: Map<T, TreeNode> = new Map<T, TreeNode>();\n\n\tprivate _visible = false;\n\tget visible(): boolean {\n\t\treturn this._visible;\n\t}\n\n\tprivate _selectedHandles: TreeItemHandle[] = [];\n\tget selectedElements(): T[] {\n\t\treturn <T[]>(\n\t\t\tthis._selectedHandles\n\t\t\t\t.map((handle) => this.getExtensionElement(handle))\n\t\t\t\t.filter((element) => !isUndefinedOrNull(element))\n\t\t);\n\t}\n\n\tprivate _focusedHandle: TreeItemHandle | undefined = undefined;\n\tget focusedElement(): T | undefined {\n\t\treturn <T | undefined>(\n\t\t\t(this._focusedHandle\n\t\t\t\t? this.getExtensionElement(this._focusedHandle)\n\t\t\t\t: undefined)\n\t\t);\n\t}\n\n\tprivate _onDidExpandElement: Emitter<vscode.TreeViewExpansionEvent<T>> =\n\t\tthis._register(new Emitter<vscode.TreeViewExpansionEvent<T>>());\n\treadonly onDidExpandElement: Event<vscode.TreeViewExpansionEvent<T>> =\n\t\tthis._onDidExpandElement.event;\n\n\tprivate _onDidCollapseElement: Emitter<vscode.TreeViewExpansionEvent<T>> =\n\t\tthis._register(new Emitter<vscode.TreeViewExpansionEvent<T>>());\n\treadonly onDidCollapseElement: Event<vscode.TreeViewExpansionEvent<T>> =\n\t\tthis._onDidCollapseElement.event;\n\n\tprivate _onDidChangeSelection: Emitter<\n\t\tvscode.TreeViewSelectionChangeEvent<T>\n\t> = this._register(new Emitter<vscode.TreeViewSelectionChangeEvent<T>>());\n\treadonly onDidChangeSelection: Event<\n\t\tvscode.TreeViewSelectionChangeEvent<T>\n\t> = this._onDidChangeSelection.event;\n\n\tprivate _onDidChangeActiveItem: Emitter<\n\t\tvscode.TreeViewActiveItemChangeEvent<T>\n\t> = this._register(new Emitter<vscode.TreeViewActiveItemChangeEvent<T>>());\n\treadonly onDidChangeActiveItem: Event<\n\t\tvscode.TreeViewActiveItemChangeEvent<T>\n\t> = this._onDidChangeActiveItem.event;\n\n\tprivate _onDidChangeVisibility: Emitter<vscode.TreeViewVisibilityChangeEvent> =\n\t\tthis._register(new Emitter<vscode.TreeViewVisibilityChangeEvent>());\n\treadonly onDidChangeVisibility: Event<vscode.TreeViewVisibilityChangeEvent> =\n\t\tthis._onDidChangeVisibility.event;\n\n\tprivate _onDidChangeCheckboxState = this._register(\n\t\tnew Emitter<vscode.TreeCheckboxChangeEvent<T>>(),\n\t);\n\treadonly onDidChangeCheckboxState: Event<\n\t\tvscode.TreeCheckboxChangeEvent<T>\n\t> = this._onDidChangeCheckboxState.event;\n\n\tprivate _onDidChangeData: Emitter<TreeData<T>> = this._register(\n\t\tnew Emitter<TreeData<T>>(),\n\t);\n\n\tprivate refreshPromise: Promise<void> = Promise.resolve();\n\tprivate refreshQueue: Promise<void> = Promise.resolve();\n\n\tconstructor(\n\t\tprivate viewId: string,\n\t\toptions: vscode.TreeViewOptions<T>,\n\t\tprivate proxy: MainThreadTreeViewsShape,\n\t\tprivate commands: CommandsConverter,\n\t\tprivate logService: ILogService,\n\t\tprivate extension: IExtensionDescription,\n\t) {\n\t\tsuper();\n\t\tif (extension.contributes && extension.contributes.views) {\n\t\t\tfor (const location in extension.contributes.views) {\n\t\t\t\tfor (const view of extension.contributes.views[location]) {\n\t\t\t\t\tif (view.id === viewId) {\n\t\t\t\t\t\tthis._title = view.name;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tthis.dataProvider = options.treeDataProvider;\n\t\tthis.dndController = options.dragAndDropController;\n\t\tif (this.dataProvider.onDidChangeTreeData) {\n\t\t\tthis._register(\n\t\t\t\tthis.dataProvider.onDidChangeTreeData((elementOrElements) => {\n\t\t\t\t\tif (\n\t\t\t\t\t\tArray.isArray(elementOrElements) &&\n\t\t\t\t\t\telementOrElements.length === 0\n\t\t\t\t\t) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\tthis._onDidChangeData.fire({\n\t\t\t\t\t\tmessage: false,\n\t\t\t\t\t\telement: elementOrElements,\n\t\t\t\t\t});\n\t\t\t\t}),\n\t\t\t);\n\t\t}\n\n\t\tlet refreshingPromise: Promise<void> | null;\n\t\tlet promiseCallback: () => void;\n\t\tconst onDidChangeData = Event.debounce<\n\t\t\tTreeData<T>,\n\t\t\t{ message: boolean; elements: (T | Root)[] }\n\t\t>(\n\t\t\tthis._onDidChangeData.event,\n\t\t\t(result, current) => {\n\t\t\t\tif (!result) {\n\t\t\t\t\tresult = { message: false, elements: [] };\n\t\t\t\t}\n\t\t\t\tif (current.element !== false) {\n\t\t\t\t\tif (!refreshingPromise) {\n\t\t\t\t\t\t// New refresh has started\n\t\t\t\t\t\trefreshingPromise = new Promise(\n\t\t\t\t\t\t\t(c) => (promiseCallback = c),\n\t\t\t\t\t\t);\n\t\t\t\t\t\tthis.refreshPromise = this.refreshPromise.then(\n\t\t\t\t\t\t\t() => refreshingPromise!,\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t\tif (Array.isArray(current.element)) {\n\t\t\t\t\t\tresult.elements.push(...current.element);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresult.elements.push(current.element);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (current.message) {\n\t\t\t\t\tresult.message = true;\n\t\t\t\t}\n\t\t\t\treturn result;\n\t\t\t},\n\t\t\t200,\n\t\t\ttrue,\n\t\t);\n\t\tthis._register(\n\t\t\tonDidChangeData(({ message, elements }) => {\n\t\t\t\tif (elements.length) {\n\t\t\t\t\tthis.refreshQueue = this.refreshQueue.then(() => {\n\t\t\t\t\t\tconst _promiseCallback = promiseCallback;\n\t\t\t\t\t\trefreshingPromise = null;\n\t\t\t\t\t\treturn this.refresh(elements).then(() =>\n\t\t\t\t\t\t\t_promiseCallback(),\n\t\t\t\t\t\t);\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\tif (message) {\n\t\t\t\t\tthis.proxy.$setMessage(\n\t\t\t\t\t\tthis.viewId,\n\t\t\t\t\t\tMarkdownString.fromStrict(this._message) ?? \"\",\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}),\n\t\t);\n\t}\n\n\tasync getChildren(\n\t\tparentHandle: TreeItemHandle | Root,\n\t): Promise<ITreeItem[] | undefined> {\n\t\tconst parentElement = parentHandle\n\t\t\t? this.getExtensionElement(parentHandle)\n\t\t\t: undefined;\n\t\tif (parentHandle && !parentElement) {\n\t\t\tthis.logService.error(\n\t\t\t\t`No tree item with id \\'${parentHandle}\\' found.`,\n\t\t\t);\n\t\t\treturn Promise.resolve([]);\n\t\t}\n\n\t\tlet childrenNodes: TreeNode[] | undefined =\n\t\t\tthis.getChildrenNodes(parentHandle); // Get it from cache\n\n\t\tif (!childrenNodes) {\n\t\t\tchildrenNodes = await this.fetchChildrenNodes(parentElement);\n\t\t}\n\n\t\treturn childrenNodes ? childrenNodes.map((n) => n.item) : undefined;\n\t}\n\n\tgetExtensionElement(treeItemHandle: TreeItemHandle): T | undefined {\n\t\treturn this.elements.get(treeItemHandle);\n\t}\n\n\treveal(element: T | undefined, options?: IRevealOptions): Promise<void> {\n\t\toptions = options ? options : { select: true, focus: false };\n\t\tconst select = isUndefinedOrNull(options.select)\n\t\t\t? true\n\t\t\t: options.select;\n\t\tconst focus = isUndefinedOrNull(options.focus) ? false : options.focus;\n\t\tconst expand = isUndefinedOrNull(options.expand)\n\t\t\t? false\n\t\t\t: options.expand;\n\n\t\tif (typeof this.dataProvider.getParent !== \"function\") {\n\t\t\treturn Promise.reject(\n\t\t\t\tnew Error(\n\t\t\t\t\t`Required registered TreeDataProvider to implement 'getParent' method to access 'reveal' method`,\n\t\t\t\t),\n\t\t\t);\n\t\t}\n\n\t\tif (element) {\n\t\t\treturn this.refreshPromise\n\t\t\t\t.then(() => this.resolveUnknownParentChain(element))\n\t\t\t\t.then(\n\t\t\t\t\t(parentChain) =>\n\t\t\t\t\t\tthis.resolveTreeNode(\n\t\t\t\t\t\t\telement,\n\t\t\t\t\t\t\tparentChain[parentChain.length - 1],\n\t\t\t\t\t\t).then((treeNode) =>\n\t\t\t\t\t\t\tthis.proxy.$reveal(\n\t\t\t\t\t\t\t\tthis.viewId,\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\titem: treeNode.item,\n\t\t\t\t\t\t\t\t\tparentChain: parentChain.map((p) => p.item),\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{ select, focus, expand },\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t),\n\t\t\t\t\t(error) => this.logService.error(error),\n\t\t\t\t);\n\t\t} else {\n\t\t\treturn this.proxy.$reveal(this.viewId, undefined, {\n\t\t\t\tselect,\n\t\t\t\tfocus,\n\t\t\t\texpand,\n\t\t\t});\n\t\t}\n\t}\n\n\tprivate _message: string | vscode.MarkdownString = \"\";\n\tget message(): string | vscode.MarkdownString {\n\t\treturn this._message;\n\t}\n\n\tset message(message: string | vscode.MarkdownString) {\n\t\tthis._message = message;\n\t\tthis._onDidChangeData.fire({ message: true, element: false });\n\t}\n\n\tprivate _title = \"\";\n\tget title(): string {\n\t\treturn this._title;\n\t}\n\n\tset title(title: string) {\n\t\tthis._title = title;\n\t\tthis.proxy.$setTitle(this.viewId, title, this._description);\n\t}\n\n\tprivate _description: string | undefined;\n\tget description(): string | undefined {\n\t\treturn this._description;\n\t}\n\n\tset description(description: string | undefined) {\n\t\tthis._description = description;\n\t\tthis.proxy.$setTitle(this.viewId, this._title, description);\n\t}\n\n\tprivate _badge: vscode.ViewBadge | undefined;\n\tget badge(): vscode.ViewBadge | undefined {\n\t\treturn this._badge;\n\t}\n\n\tset badge(badge: vscode.ViewBadge | undefined) {\n\t\tif (\n\t\t\tthis._badge?.value === badge?.value &&\n\t\t\tthis._badge?.tooltip === badge?.tooltip\n\t\t) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis._badge = ViewBadge.from(badge);\n\t\tthis.proxy.$setBadge(this.viewId, badge);\n\t}\n\n\tsetExpanded(treeItemHandle: TreeItemHandle, expanded: boolean): void {\n\t\tconst element = this.getExtensionElement(treeItemHandle);\n\t\tif (element) {\n\t\t\tif (expanded) {\n\t\t\t\tthis._onDidExpandElement.fire(Object.freeze({ element }));\n\t\t\t} else {\n\t\t\t\tthis._onDidCollapseElement.fire(Object.freeze({ element }));\n\t\t\t}\n\t\t}\n\t}\n\n\tsetSelectionAndFocus(\n\t\tselectedHandles: TreeItemHandle[],\n\t\tfocusedHandle: string,\n\t): void {\n\t\tconst changedSelection = !equals(\n\t\t\tthis._selectedHandles,\n\t\t\tselectedHandles,\n\t\t);\n\t\tthis._selectedHandles = selectedHandles;\n\n\t\tconst changedFocus = this._focusedHandle !== focusedHandle;\n\t\tthis._focusedHandle = focusedHandle;\n\n\t\tif (changedSelection) {\n\t\t\tthis._onDidChangeSelection.fire(\n\t\t\t\tObject.freeze({ selection: this.selectedElements }),\n\t\t\t);\n\t\t}\n\n\t\tif (changedFocus) {\n\t\t\tthis._onDidChangeActiveItem.fire(\n\t\t\t\tObject.freeze({ activeItem: this.focusedElement }),\n\t\t\t);\n\t\t}\n\t}\n\n\tsetVisible(visible: boolean): void {\n\t\tif (visible !== this._visible) {\n\t\t\tthis._visible = visible;\n\t\t\tthis._onDidChangeVisibility.fire(\n\t\t\t\tObject.freeze({ visible: this._visible }),\n\t\t\t);\n\t\t}\n\t}\n\n\tasync setCheckboxState(checkboxUpdates: CheckboxUpdate[]) {\n\t\ttype CheckboxUpdateWithItem = {\n\t\t\textensionItem: NonNullable<T>;\n\t\t\ttreeItem: vscode.TreeItem;\n\t\t\tnewState: extHostTypes.TreeItemCheckboxState;\n\t\t};\n\t\tconst items = (\n\t\t\tawait Promise.all(\n\t\t\t\tcheckboxUpdates.map(async (checkboxUpdate) => {\n\t\t\t\t\tconst extensionItem = this.getExtensionElement(\n\t\t\t\t\t\tcheckboxUpdate.treeItemHandle,\n\t\t\t\t\t);\n\t\t\t\t\tif (extensionItem) {\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\textensionItem: extensionItem,\n\t\t\t\t\t\t\ttreeItem:\n\t\t\t\t\t\t\t\tawait this.dataProvider.getTreeItem(\n\t\t\t\t\t\t\t\t\textensionItem,\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\tnewState: checkboxUpdate.newState\n\t\t\t\t\t\t\t\t? extHostTypes.TreeItemCheckboxState.Checked\n\t\t\t\t\t\t\t\t: extHostTypes.TreeItemCheckboxState.Unchecked,\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\t\t\t\t\treturn Promise.resolve(undefined);\n\t\t\t\t}),\n\t\t\t)\n\t\t).filter<CheckboxUpdateWithItem>(\n\t\t\t(item): item is CheckboxUpdateWithItem => item !== undefined,\n\t\t);\n\n\t\titems.forEach((item) => {\n\t\t\titem.treeItem.checkboxState = item.newState\n\t\t\t\t? extHostTypes.TreeItemCheckboxState.Checked\n\t\t\t\t: extHostTypes.TreeItemCheckboxState.Unchecked;\n\t\t});\n\n\t\tthis._onDidChangeCheckboxState.fire({\n\t\t\titems: items.map((item) => [item.extensionItem, item.newState]),\n\t\t});\n\t}\n\n\tasync handleDrag(\n\t\tsourceTreeItemHandles: TreeItemHandle[],\n\t\ttreeDataTransfer: vscode.DataTransfer,\n\t\ttoken: CancellationToken,\n\t): Promise<vscode.DataTransfer | undefined> {\n\t\tconst extensionTreeItems: T[] = [];\n\t\tfor (const sourceHandle of sourceTreeItemHandles) {\n\t\t\tconst extensionItem = this.getExtensionElement(sourceHandle);\n\t\t\tif (extensionItem) {\n\t\t\t\textensionTreeItems.push(extensionItem);\n\t\t\t}\n\t\t}\n\n\t\tif (\n\t\t\t!this.dndController?.handleDrag ||\n\t\t\textensionTreeItems.length === 0\n\t\t) {\n\t\t\treturn;\n\t\t}\n\t\tawait this.dndController.handleDrag(\n\t\t\textensionTreeItems,\n\t\t\ttreeDataTransfer,\n\t\t\ttoken,\n\t\t);\n\t\treturn treeDataTransfer;\n\t}\n\n\tget hasHandleDrag(): boolean {\n\t\treturn !!this.dndController?.handleDrag;\n\t}\n\n\tasync onDrop(\n\t\ttreeDataTransfer: vscode.DataTransfer,\n\t\ttargetHandleOrNode: TreeItemHandle | undefined,\n\t\ttoken: CancellationToken,\n\t): Promise<void> {\n\t\tconst target = targetHandleOrNode\n\t\t\t? this.getExtensionElement(targetHandleOrNode)\n\t\t\t: undefined;\n\t\tif (\n\t\t\t(!target && targetHandleOrNode) ||\n\t\t\t!this.dndController?.handleDrop\n\t\t) {\n\t\t\treturn;\n\t\t}\n\t\treturn asPromise(() =>\n\t\t\tthis.dndController?.handleDrop\n\t\t\t\t? this.dndController.handleDrop(target, treeDataTransfer, token)\n\t\t\t\t: undefined,\n\t\t);\n\t}\n\n\tget hasResolve(): boolean {\n\t\treturn !!this.dataProvider.resolveTreeItem;\n\t}\n\n\tasync resolveTreeItem(\n\t\ttreeItemHandle: string,\n\t\ttoken: vscode.CancellationToken,\n\t): Promise<ITreeItem | undefined> {\n\t\tif (!this.dataProvider.resolveTreeItem) {\n\t\t\treturn;\n\t\t}\n\t\tconst element = this.elements.get(treeItemHandle);\n\t\tif (element) {\n\t\t\tconst node = this.nodes.get(element);\n\t\t\tif (node) {\n\t\t\t\tconst resolve =\n\t\t\t\t\t(await this.dataProvider.resolveTreeItem(\n\t\t\t\t\t\tnode.extensionItem,\n\t\t\t\t\t\telement,\n\t\t\t\t\t\ttoken,\n\t\t\t\t\t)) ?? node.extensionItem;\n\t\t\t\tthis.validateTreeItem(resolve);\n\t\t\t\t// Resolvable elements. Currently only tooltip and command.\n\t\t\t\tnode.item.tooltip = this.getTooltip(resolve.tooltip);\n\t\t\t\tnode.item.command = this.getCommand(\n\t\t\t\t\tnode.disposableStore,\n\t\t\t\t\tresolve.command,\n\t\t\t\t);\n\t\t\t\treturn node.item;\n\t\t\t}\n\t\t}\n\t\treturn;\n\t}\n\n\tprivate resolveUnknownParentChain(element: T): Promise<TreeNode[]> {\n\t\treturn this.resolveParent(element).then((parent) => {\n\t\t\tif (!parent) {\n\t\t\t\treturn Promise.resolve([]);\n\t\t\t}\n\t\t\treturn this.resolveUnknownParentChain(parent).then((result) =>\n\t\t\t\tthis.resolveTreeNode(parent, result[result.length - 1]).then(\n\t\t\t\t\t(parentNode) => {\n\t\t\t\t\t\tresult.push(parentNode);\n\t\t\t\t\t\treturn result;\n\t\t\t\t\t},\n\t\t\t\t),\n\t\t\t);\n\t\t});\n\t}\n\n\tprivate resolveParent(element: T): Promise<T | Root> {\n\t\tconst node = this.nodes.get(element);\n\t\tif (node) {\n\t\t\treturn Promise.resolve(\n\t\t\t\tnode.parent\n\t\t\t\t\t? this.elements.get(node.parent.item.handle)\n\t\t\t\t\t: undefined,\n\t\t\t);\n\t\t}\n\t\treturn asPromise(() => this.dataProvider.getParent!(element));\n\t}\n\n\tprivate resolveTreeNode(element: T, parent?: TreeNode): Promise<TreeNode> {\n\t\tconst node = this.nodes.get(element);\n\t\tif (node) {\n\t\t\treturn Promise.resolve(node);\n\t\t}\n\t\treturn asPromise(() => this.dataProvider.getTreeItem(element))\n\t\t\t.then((extTreeItem) =>\n\t\t\t\tthis.createHandle(element, extTreeItem, parent, true),\n\t\t\t)\n\t\t\t.then((handle) =>\n\t\t\t\tthis.getChildren(parent ? parent.item.handle : undefined).then(\n\t\t\t\t\t() => {\n\t\t\t\t\t\tconst cachedElement = this.getExtensionElement(handle);\n\t\t\t\t\t\tif (cachedElement) {\n\t\t\t\t\t\t\tconst node = this.nodes.get(cachedElement);\n\t\t\t\t\t\t\tif (node) {\n\t\t\t\t\t\t\t\treturn Promise.resolve(node);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthrow new Error(\n\t\t\t\t\t\t\t`Cannot resolve tree item for element ${handle} from extension ${this.extension.identifier.value}`,\n\t\t\t\t\t\t);\n\t\t\t\t\t},\n\t\t\t\t),\n\t\t\t);\n\t}\n\n\tprivate getChildrenNodes(\n\t\tparentNodeOrHandle: TreeNode | TreeItemHandle | Root,\n\t): TreeNode[] | undefined {\n\t\tif (parentNodeOrHandle) {\n\t\t\tlet parentNode: TreeNode | undefined;\n\t\t\tif (typeof parentNodeOrHandle === \"string\") {\n\t\t\t\tconst parentElement =\n\t\t\t\t\tthis.getExtensionElement(parentNodeOrHandle);\n\t\t\t\tparentNode = parentElement\n\t\t\t\t\t? this.nodes.get(parentElement)\n\t\t\t\t\t: undefined;\n\t\t\t} else {\n\t\t\t\tparentNode = parentNodeOrHandle;\n\t\t\t}\n\t\t\treturn parentNode ? parentNode.children || undefined : undefined;\n\t\t}\n\t\treturn this.roots;\n\t}\n\n\tprivate async fetchChildrenNodes(\n\t\tparentElement?: T,\n\t): Promise<TreeNode[] | undefined> {\n\t\t// clear children cache\n\t\tthis.clearChildren(parentElement);\n\n\t\tconst cts = new CancellationTokenSource(\n\t\t\tthis._refreshCancellationSource.token,\n\t\t);\n\n\t\ttry {\n\t\t\tconst parentNode = parentElement\n\t\t\t\t? this.nodes.get(parentElement)\n\t\t\t\t: undefined;\n\t\t\tconst elements = await this.dataProvider.getChildren(parentElement);\n\t\t\tif (cts.token.isCancellationRequested) {\n\t\t\t\treturn undefined;\n\t\t\t}\n\n\t\t\tconst coalescedElements = coalesce(elements || []);\n\t\t\tconst treeItems = await Promise.all(\n\t\t\t\tcoalesce(coalescedElements).map((element) => {\n\t\t\t\t\treturn this.dataProvider.getTreeItem(element);\n\t\t\t\t}),\n\t\t\t);\n\t\t\tif (cts.token.isCancellationRequested) {\n\t\t\t\treturn undefined;\n\t\t\t}\n\n\t\t\t// createAndRegisterTreeNodes adds the nodes to a cache. This must be done sync so that they get added in the correct order.\n\t\t\tconst items = treeItems.map((item, index) =>\n\t\t\t\titem\n\t\t\t\t\t? this.createAndRegisterTreeNode(\n\t\t\t\t\t\t\tcoalescedElements[index],\n\t\t\t\t\t\t\titem,\n\t\t\t\t\t\t\tparentNode,\n\t\t\t\t\t\t)\n\t\t\t\t\t: null,\n\t\t\t);\n\n\t\t\treturn coalesce(items);\n\t\t} finally {\n\t\t\tcts.dispose();\n\t\t}\n\t}\n\n\tprivate _refreshCancellationSource = new CancellationTokenSource();\n\n\tprivate refresh(elements: (T | Root)[]): Promise<void> {\n\t\tconst hasRoot = elements.some((element) => !element);\n\t\tif (hasRoot) {\n\t\t\t// Cancel any pending children fetches\n\t\t\tthis._refreshCancellationSource.dispose(true);\n\t\t\tthis._refreshCancellationSource = new CancellationTokenSource();\n\n\t\t\tthis.clearAll(); // clear cache\n\t\t\treturn this.proxy.$refresh(this.viewId);\n\t\t} else {\n\t\t\tconst handlesToRefresh = this.getHandlesToRefresh(<T[]>elements);\n\t\t\tif (handlesToRefresh.length) {\n\t\t\t\treturn this.refreshHandles(handlesToRefresh);\n\t\t\t}\n\t\t}\n\t\treturn Promise.resolve(undefined);\n\t}\n\n\tprivate getHandlesToRefresh(elements: T[]): TreeItemHandle[] {\n\t\tconst elementsToUpdate = new Set<TreeItemHandle>();\n\t\tconst elementNodes = elements.map((element) => this.nodes.get(element));\n\t\tfor (const elementNode of elementNodes) {\n\t\t\tif (elementNode && !elementsToUpdate.has(elementNode.item.handle)) {\n\t\t\t\t// check if an ancestor of extElement is already in the elements list\n\t\t\t\tlet currentNode: TreeNode | undefined = elementNode;\n\t\t\t\twhile (\n\t\t\t\t\tcurrentNode &&\n\t\t\t\t\tcurrentNode.parent &&\n\t\t\t\t\telementNodes.findIndex(\n\t\t\t\t\t\t(node) =>\n\t\t\t\t\t\t\tcurrentNode &&\n\t\t\t\t\t\t\tcurrentNode.parent &&\n\t\t\t\t\t\t\tnode &&\n\t\t\t\t\t\t\tnode.item.handle === currentNode.parent.item.handle,\n\t\t\t\t\t) === -1\n\t\t\t\t) {\n\t\t\t\t\tconst parentElement: T | undefined = this.elements.get(\n\t\t\t\t\t\tcurrentNode.parent.item.handle,\n\t\t\t\t\t);\n\t\t\t\t\tcurrentNode = parentElement\n\t\t\t\t\t\t? this.nodes.get(parentElement)\n\t\t\t\t\t\t: undefined;\n\t\t\t\t}\n\t\t\t\tif (currentNode && !currentNode.parent) {\n\t\t\t\t\telementsToUpdate.add(elementNode.item.handle);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tconst handlesToUpdate: TreeItemHandle[] = [];\n\t\t// Take only top level elements\n\t\telementsToUpdate.forEach((handle) => {\n\t\t\tconst element = this.elements.get(handle);\n\t\t\tif (element) {\n\t\t\t\tconst node = this.nodes.get(element);\n\t\t\t\tif (\n\t\t\t\t\tnode &&\n\t\t\t\t\t(!node.parent ||\n\t\t\t\t\t\t!elementsToUpdate.has(node.parent.item.handle))\n\t\t\t\t) {\n\t\t\t\t\thandlesToUpdate.push(handle);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\treturn handlesToUpdate;\n\t}\n\n\tprivate refreshHandles(itemHandles: TreeItemHandle[]): Promise<void> {\n\t\tconst itemsToRefresh: { [treeItemHandle: string]: ITreeItem } = {};\n\t\treturn Promise.all(\n\t\t\titemHandles.map((treeItemHandle) =>\n\t\t\t\tthis.refreshNode(treeItemHandle).then((node) => {\n\t\t\t\t\tif (node) {\n\t\t\t\t\t\titemsToRefresh[treeItemHandle] = node.item;\n\t\t\t\t\t}\n\t\t\t\t}),\n\t\t\t),\n\t\t).then(() =>\n\t\t\tObject.keys(itemsToRefresh).length\n\t\t\t\t? this.proxy.$refresh(this.viewId, itemsToRefresh)\n\t\t\t\t: undefined,\n\t\t);\n\t}\n\n\tprivate refreshNode(\n\t\ttreeItemHandle: TreeItemHandle,\n\t): Promise<TreeNode | null> {\n\t\tconst extElement = this.getExtensionElement(treeItemHandle);\n\t\tif (extElement) {\n\t\t\tconst existing = this.nodes.get(extElement);\n\t\t\tif (existing) {\n\t\t\t\tthis.clearChildren(extElement); // clear children cache\n\t\t\t\treturn asPromise(() =>\n\t\t\t\t\tthis.dataProvider.getTreeItem(extElement),\n\t\t\t\t).then((extTreeItem) => {\n\t\t\t\t\tif (extTreeItem) {\n\t\t\t\t\t\tconst newNode = this.createTreeNode(\n\t\t\t\t\t\t\textElement,\n\t\t\t\t\t\t\textTreeItem,\n\t\t\t\t\t\t\texisting.parent,\n\t\t\t\t\t\t);\n\t\t\t\t\t\tthis.updateNodeCache(\n\t\t\t\t\t\t\textElement,\n\t\t\t\t\t\t\tnewNode,\n\t\t\t\t\t\t\texisting,\n\t\t\t\t\t\t\texisting.parent,\n\t\t\t\t\t\t);\n\t\t\t\t\t\texisting.dispose();\n\t\t\t\t\t\treturn newNode;\n\t\t\t\t\t}\n\t\t\t\t\treturn null;\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t\treturn Promise.resolve(null);\n\t}\n\n\tprivate createAndRegisterTreeNode(\n\t\telement: T,\n\t\textTreeItem: vscode.TreeItem,\n\t\tparentNode: TreeNode | Root,\n\t): TreeNode {\n\t\tconst node = this.createTreeNode(element, extTreeItem, parentNode);\n\t\tif (extTreeItem.id && this.elements.has(node.item.handle)) {\n\t\t\tthrow new Error(\n\t\t\t\tlocalize(\n\t\t\t\t\t\"treeView.duplicateElement\",\n\t\t\t\t\t\"Element with id {0} is already registered\",\n\t\t\t\t\textTreeItem.id,\n\t\t\t\t),\n\t\t\t);\n\t\t}\n\t\tthis.addNodeToCache(element, node);\n\t\tthis.addNodeToParentCache(node, parentNode);\n\t\treturn node;\n\t}\n\n\tprivate getTooltip(\n\t\ttooltip?: string | vscode.MarkdownString,\n\t): string | IMarkdownString | undefined {\n\t\tif (extHostTypes.MarkdownString.isMarkdownString(tooltip)) {\n\t\t\treturn MarkdownString.from(tooltip);\n\t\t}\n\t\treturn tooltip;\n\t}\n\n\tprivate getCommand(\n\t\tdisposable: DisposableStore,\n\t\tcommand?: vscode.Command,\n\t): TreeCommand | undefined {\n\t\treturn command\n\t\t\t? {\n\t\t\t\t\t...this.commands.toInternal(command, disposable),\n\t\t\t\t\toriginalId: command.command,\n\t\t\t\t}\n\t\t\t: undefined;\n\t}\n\n\tprivate getCheckbox(\n\t\textensionTreeItem: vscode.TreeItem,\n\t): ITreeItemCheckboxState | undefined {\n\t\tif (extensionTreeItem.checkboxState === undefined) {\n\t\t\treturn undefined;\n\t\t}\n\t\tlet checkboxState: extHostTypes.TreeItemCheckboxState;\n\t\tlet tooltip: string | undefined;\n\t\tlet accessibilityInformation: IAccessibilityInformation | undefined;\n\t\tif (typeof extensionTreeItem.checkboxState === \"number\") {\n\t\t\tcheckboxState = extensionTreeItem.checkboxState;\n\t\t} else {\n\t\t\tcheckboxState = extensionTreeItem.checkboxState.state;\n\t\t\ttooltip = extensionTreeItem.checkboxState.tooltip;\n\t\t\taccessibilityInformation =\n\t\t\t\textensionTreeItem.checkboxState.accessibilityInformation;\n\t\t}\n\t\treturn {\n\t\t\tisChecked:\n\t\t\t\tcheckboxState === extHostTypes.TreeItemCheckboxState.Checked,\n\t\t\ttooltip,\n\t\t\taccessibilityInformation,\n\t\t};\n\t}\n\n\tprivate validateTreeItem(extensionTreeItem: vscode.TreeItem) {\n\t\tif (\n\t\t\t!extHostTypes.TreeItem.isTreeItem(extensionTreeItem, this.extension)\n\t\t) {\n\t\t\tthrow new Error(\n\t\t\t\t`Extension ${this.extension.identifier.value} has provided an invalid tree item.`,\n\t\t\t);\n\t\t}\n\t}\n\n\tprivate createTreeNode(\n\t\telement: T,\n\t\textensionTreeItem: vscode.TreeItem,\n\t\tparent: TreeNode | Root,\n\t): TreeNode {\n\t\tthis.validateTreeItem(extensionTreeItem);\n\t\tconst disposableStore = this._register(new DisposableStore());\n\t\tconst handle = this.createHandle(element, extensionTreeItem, parent);\n\t\tconst icon = this.getLightIconPath(extensionTreeItem);\n\t\tconst item: ITreeItem = {\n\t\t\thandle,\n\t\t\tparentHandle: parent ? parent.item.handle : undefined,\n\t\t\tlabel: toTreeItemLabel(extensionTreeItem.label, this.extension),\n\t\t\tdescription: extensionTreeItem.description,\n\t\t\tresourceUri: extensionTreeItem.resourceUri,\n\t\t\ttooltip: this.getTooltip(extensionTreeItem.tooltip),\n\t\t\tcommand: this.getCommand(\n\t\t\t\tdisposableStore,\n\t\t\t\textensionTreeItem.command,\n\t\t\t),\n\t\t\tcontextValue: extensionTreeItem.contextValue,\n\t\t\ticon,\n\t\t\ticonDark: this.getDarkIconPath(extensionTreeItem) || icon,\n\t\t\tthemeIcon: this.getThemeIcon(extensionTreeItem),\n\t\t\tcollapsibleState: isUndefinedOrNull(\n\t\t\t\textensionTreeItem.collapsibleState,\n\t\t\t)\n\t\t\t\t? extHostTypes.TreeItemCollapsibleState.None\n\t\t\t\t: extensionTreeItem.collapsibleState,\n\t\t\taccessibilityInformation:\n\t\t\t\textensionTreeItem.accessibilityInformation,\n\t\t\tcheckbox: this.getCheckbox(extensionTreeItem),\n\t\t};\n\n\t\treturn {\n\t\t\titem,\n\t\t\textensionItem: extensionTreeItem,\n\t\t\tparent,\n\t\t\tchildren: undefined,\n\t\t\tdisposableStore,\n\t\t\tdispose(): void {\n\t\t\t\tdisposableStore.dispose();\n\t\t\t},\n\t\t};\n\t}\n\n\tprivate getThemeIcon(\n\t\textensionTreeItem: vscode.TreeItem,\n\t): extHostTypes.ThemeIcon | undefined {\n\t\treturn extensionTreeItem.iconPath instanceof extHostTypes.ThemeIcon\n\t\t\t? extensionTreeItem.iconPath\n\t\t\t: undefined;\n\t}\n\n\tprivate createHandle(\n\t\telement: T,\n\t\t{ id, label, resourceUri }: vscode.TreeItem,\n\t\tparent: TreeNode | Root,\n\t\treturnFirst?: boolean,\n\t): TreeItemHandle {\n\t\tif (id) {\n\t\t\treturn `${ExtHostTreeView.ID_HANDLE_PREFIX}/${id}`;\n\t\t}\n\n\t\tconst treeItemLabel = toTreeItemLabel(label, this.extension);\n\t\tconst prefix: string = parent\n\t\t\t? parent.item.handle\n\t\t\t: ExtHostTreeView.LABEL_HANDLE_PREFIX;\n\t\tlet elementId = treeItemLabel\n\t\t\t? treeItemLabel.label\n\t\t\t: resourceUri\n\t\t\t\t? basename(resourceUri)\n\t\t\t\t: \"\";\n\t\telementId =\n\t\t\telementId.indexOf(\"/\") !== -1\n\t\t\t\t? elementId.replace(\"/\", \"//\")\n\t\t\t\t: elementId;\n\t\tconst existingHandle = this.nodes.has(element)\n\t\t\t? this.nodes.get(element)!.item.handle\n\t\t\t: undefined;\n\t\tconst childrenNodes = this.getChildrenNodes(parent) || [];\n\n\t\tlet handle: TreeItemHandle;\n\t\tlet counter = 0;\n\t\tdo {\n\t\t\thandle = `${prefix}/${counter}:${elementId}`;\n\t\t\tif (\n\t\t\t\treturnFirst ||\n\t\t\t\t!this.elements.has(handle) ||\n\t\t\t\texistingHandle === handle\n\t\t\t) {\n\t\t\t\t// Return first if asked for or\n\t\t\t\t// Return if handle does not exist or\n\t\t\t\t// Return if handle is being reused\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcounter++;\n\t\t} while (counter <= childrenNodes.length);\n\n\t\treturn handle;\n\t}\n\n\tprivate getLightIconPath(\n\t\textensionTreeItem: vscode.TreeItem,\n\t): URI | undefined {\n\t\tif (\n\t\t\textensionTreeItem.iconPath &&\n\t\t\t!(extensionTreeItem.iconPath instanceof extHostTypes.ThemeIcon)\n\t\t) {\n\t\t\tif (\n\t\t\t\ttypeof extensionTreeItem.iconPath === \"string\" ||\n\t\t\t\tURI.isUri(extensionTreeItem.iconPath)\n\t\t\t) {\n\t\t\t\treturn this.getIconPath(extensionTreeItem.iconPath);\n\t\t\t}\n\t\t\treturn this.getIconPath(\n\t\t\t\t(<{ light: string | URI; dark: string | URI }>(\n\t\t\t\t\textensionTreeItem.iconPath\n\t\t\t\t)).light,\n\t\t\t);\n\t\t}\n\t\treturn undefined;\n\t}\n\n\tprivate getDarkIconPath(\n\t\textensionTreeItem: vscode.TreeItem,\n\t): URI | undefined {\n\t\tif (\n\t\t\textensionTreeItem.iconPath &&\n\t\t\t!(extensionTreeItem.iconPath instanceof extHostTypes.ThemeIcon) &&\n\t\t\t(<{ light: string | URI; dark: string | URI }>(\n\t\t\t\textensionTreeItem.iconPath\n\t\t\t)).dark\n\t\t) {\n\t\t\treturn this.getIconPath(\n\t\t\t\t(<{ light: string | URI; dark: string | URI }>(\n\t\t\t\t\textensionTreeItem.iconPath\n\t\t\t\t)).dark,\n\t\t\t);\n\t\t}\n\t\treturn undefined;\n\t}\n\n\tprivate getIconPath(iconPath: string | URI): URI {\n\t\tif (URI.isUri(iconPath)) {\n\t\t\treturn iconPath;\n\t\t}\n\t\treturn URI.file(iconPath);\n\t}\n\n\tprivate addNodeToCache(element: T, node: TreeNode): void {\n\t\tthis.elements.set(node.item.handle, element);\n\t\tthis.nodes.set(element, node);\n\t}\n\n\tprivate updateNodeCache(\n\t\telement: T,\n\t\tnewNode: TreeNode,\n\t\texisting: TreeNode,\n\t\tparentNode: TreeNode | Root,\n\t): void {\n\t\t// Remove from the cache\n\t\tthis.elements.delete(newNode.item.handle);\n\t\tthis.nodes.delete(element);\n\t\tif (newNode.item.handle !== existing.item.handle) {\n\t\t\tthis.elements.delete(existing.item.handle);\n\t\t}\n\n\t\t// Add the new node to the cache\n\t\tthis.addNodeToCache(element, newNode);\n\n\t\t// Replace the node in parent's children nodes\n\t\tconst childrenNodes = this.getChildrenNodes(parentNode) || [];\n\t\tconst childNode = childrenNodes.filter(\n\t\t\t(c) => c.item.handle === existing.item.handle,\n\t\t)[0];\n\t\tif (childNode) {\n\t\t\tchildrenNodes.splice(childrenNodes.indexOf(childNode), 1, newNode);\n\t\t}\n\t}\n\n\tprivate addNodeToParentCache(\n\t\tnode: TreeNode,\n\t\tparentNode: TreeNode | Root,\n\t): void {\n\t\tif (parentNode) {\n\t\t\tif (!parentNode.children) {\n\t\t\t\tparentNode.children = [];\n\t\t\t}\n\t\t\tparentNode.children.push(node);\n\t\t} else {\n\t\t\tif (!this.roots) {\n\t\t\t\tthis.roots = [];\n\t\t\t}\n\t\t\tthis.roots.push(node);\n\t\t}\n\t}\n\n\tprivate clearChildren(parentElement?: T): void {\n\t\tif (parentElement) {\n\t\t\tconst node = this.nodes.get(parentElement);\n\t\t\tif (node) {\n\t\t\t\tif (node.children) {\n\t\t\t\t\tfor (const child of node.children) {\n\t\t\t\t\t\tconst childElement = this.elements.get(\n\t\t\t\t\t\t\tchild.item.handle,\n\t\t\t\t\t\t);\n\t\t\t\t\t\tif (childElement) {\n\t\t\t\t\t\t\tthis.clear(childElement);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tnode.children = undefined;\n\t\t\t}\n\t\t} else {\n\t\t\tthis.clearAll();\n\t\t}\n\t}\n\n\tprivate clear(element: T): void {\n\t\tconst node = this.nodes.get(element);\n\t\tif (node) {\n\t\t\tif (node.children) {\n\t\t\t\tfor (const child of node.children) {\n\t\t\t\t\tconst childElement = this.elements.get(child.item.handle);\n\t\t\t\t\tif (childElement) {\n\t\t\t\t\t\tthis.clear(childElement);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis.nodes.delete(element);\n\t\t\tthis.elements.delete(node.item.handle);\n\t\t\tnode.dispose();\n\t\t}\n\t}\n\n\tprivate clearAll(): void {\n\t\tthis.roots = undefined;\n\t\tthis.elements.clear();\n\t\tthis.nodes.forEach((node) => node.dispose());\n\t\tthis.nodes.clear();\n\t}\n\n\toverride dispose() {\n\t\tsuper.dispose();\n\t\tthis._refreshCancellationSource.dispose();\n\n\t\tthis.clearAll();\n\t\tthis.proxy.$disposeTree(this.viewId);\n\t}\n}\n"],
  "mappings": "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",
  "names": ["options", "node"]
}
