{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/api/common/extHostTreeViews.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { localize } from '../../../nls.js';\nimport type * as vscode from 'vscode';\nimport { basename } from '../../../base/common/resources.js';\nimport { URI } from '../../../base/common/uri.js';\nimport { Emitter, Event } from '../../../base/common/event.js';\nimport { Disposable, DisposableStore, IDisposable } from '../../../base/common/lifecycle.js';\nimport { CheckboxUpdate, DataTransferDTO, ExtHostTreeViewsShape, MainThreadTreeViewsShape } from './extHost.protocol.js';\nimport { ITreeItem, TreeViewItemHandleArg, ITreeItemLabel, IRevealOptions, TreeCommand, TreeViewPaneHandleArg, ITreeItemCheckboxState, NoTreeViewError } from '../../common/views.js';\nimport { ExtHostCommands, CommandsConverter } from './extHostCommands.js';\nimport { asPromise } from '../../../base/common/async.js';\nimport * as extHostTypes from './extHostTypes.js';\nimport { isUndefinedOrNull, isString } from '../../../base/common/types.js';\nimport { equals, coalesce } from '../../../base/common/arrays.js';\nimport { ILogService } from '../../../platform/log/common/log.js';\nimport { IExtensionDescription } from '../../../platform/extensions/common/extensions.js';\nimport { MarkdownString, ViewBadge, DataTransfer } from './extHostTypeConverters.js';\nimport { IMarkdownString, isMarkdownString } from '../../../base/common/htmlContent.js';\nimport { CancellationToken, CancellationTokenSource } from '../../../base/common/cancellation.js';\nimport { ITreeViewsDnDService, TreeViewsDnDService } from '../../../editor/common/services/treeViewsDnd.js';\nimport { IAccessibilityInformation } from '../../../platform/accessibility/common/accessibility.js';\nimport { checkProposedApiEnabled } from '../../services/extensions/common/extensions.js';\n\ntype TreeItemHandle = string;\n\nfunction toTreeItemLabel(label: any, extension: IExtensionDescription): ITreeItemLabel | undefined {\n\tif (isString(label)) {\n\t\treturn { label };\n\t}\n\n\tif (label\n\t\t&& typeof label === 'object'\n\t\t&& typeof label.label === 'string') {\n\t\tlet highlights: [number, number][] | undefined = undefined;\n\t\tif (Array.isArray(label.highlights)) {\n\t\t\thighlights = (<[number, number][]>label.highlights).filter((highlight => highlight.length === 2 && typeof highlight[0] === 'number' && typeof highlight[1] === 'number'));\n\t\t\thighlights = highlights.length ? highlights : undefined;\n\t\t}\n\t\treturn { label: label.label, highlights };\n\t}\n\n\treturn undefined;\n}\n\n\nexport class ExtHostTreeViews extends Disposable implements ExtHostTreeViewsShape {\n\n\tprivate treeViews: Map<string, ExtHostTreeView<any>> = new Map<string, ExtHostTreeView<any>>();\n\tprivate treeDragAndDropService: ITreeViewsDnDService<vscode.DataTransfer> = new TreeViewsDnDService<vscode.DataTransfer>();\n\n\tconstructor(\n\t\tprivate _proxy: MainThreadTreeViewsShape,\n\t\tprivate commands: ExtHostCommands,\n\t\tprivate logService: ILogService\n\t) {\n\t\tsuper();\n\t\tfunction isTreeViewConvertableItem(arg: any): boolean {\n\t\t\treturn arg && arg.$treeViewId && (arg.$treeItemHandle || arg.$selectedTreeItems || arg.$focusedTreeItem);\n\t\t}\n\t\tcommands.registerArgumentProcessor({\n\t\t\tprocessArgument: arg => {\n\t\t\t\tif (isTreeViewConvertableItem(arg)) {\n\t\t\t\t\treturn this.convertArgument(arg);\n\t\t\t\t} else if (Array.isArray(arg) && (arg.length > 0)) {\n\t\t\t\t\treturn arg.map(item => {\n\t\t\t\t\t\tif (isTreeViewConvertableItem(item)) {\n\t\t\t\t\t\t\treturn this.convertArgument(item);\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn item;\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\treturn arg;\n\t\t\t}\n\t\t});\n\t}\n\n\tregisterTreeDataProvider<T>(id: string, treeDataProvider: vscode.TreeDataProvider<T>, extension: IExtensionDescription): vscode.Disposable {\n\t\tconst treeView = this.createTreeView(id, { treeDataProvider }, extension);\n\t\treturn { dispose: () => treeView.dispose() };\n\t}\n\n\tcreateTreeView<T>(viewId: string, options: vscode.TreeViewOptions<T>, extension: IExtensionDescription): vscode.TreeView<T> {\n\t\tif (!options || !options.treeDataProvider) {\n\t\t\tthrow new Error('Options with treeDataProvider is mandatory');\n\t\t}\n\t\tconst dropMimeTypes = options.dragAndDropController?.dropMimeTypes ?? [];\n\t\tconst dragMimeTypes = options.dragAndDropController?.dragMimeTypes ?? [];\n\t\tconst hasHandleDrag = !!options.dragAndDropController?.handleDrag;\n\t\tconst hasHandleDrop = !!options.dragAndDropController?.handleDrop;\n\t\tconst treeView = this.createExtHostTreeView(viewId, options, extension);\n\t\tconst proxyOptions = { showCollapseAll: !!options.showCollapseAll, canSelectMany: !!options.canSelectMany, dropMimeTypes, dragMimeTypes, hasHandleDrag, hasHandleDrop, manuallyManageCheckboxes: !!options.manageCheckboxStateManually };\n\t\tconst registerPromise = this._proxy.$registerTreeViewDataProvider(viewId, proxyOptions);\n\t\tconst view = {\n\t\t\tget onDidCollapseElement() { return treeView.onDidCollapseElement; },\n\t\t\tget onDidExpandElement() { return treeView.onDidExpandElement; },\n\t\t\tget selection() { return treeView.selectedElements; },\n\t\t\tget onDidChangeSelection() { return treeView.onDidChangeSelection; },\n\t\t\tget activeItem() {\n\t\t\t\tcheckProposedApiEnabled(extension, 'treeViewActiveItem');\n\t\t\t\treturn treeView.focusedElement;\n\t\t\t},\n\t\t\tget onDidChangeActiveItem() {\n\t\t\t\tcheckProposedApiEnabled(extension, 'treeViewActiveItem');\n\t\t\t\treturn treeView.onDidChangeActiveItem;\n\t\t\t},\n\t\t\tget visible() { return treeView.visible; },\n\t\t\tget onDidChangeVisibility() { return treeView.onDidChangeVisibility; },\n\t\t\tget onDidChangeCheckboxState() {\n\t\t\t\treturn treeView.onDidChangeCheckboxState;\n\t\t\t},\n\t\t\tget message() { return treeView.message; },\n\t\t\tset message(message: string | vscode.MarkdownString) {\n\t\t\t\tif (isMarkdownString(message)) {\n\t\t\t\t\tcheckProposedApiEnabled(extension, 'treeViewMarkdownMessage');\n\t\t\t\t}\n\t\t\t\ttreeView.message = message;\n\t\t\t},\n\t\t\tget title() { return treeView.title; },\n\t\t\tset title(title: string) {\n\t\t\t\ttreeView.title = title;\n\t\t\t},\n\t\t\tget description() {\n\t\t\t\treturn treeView.description;\n\t\t\t},\n\t\t\tset description(description: string | undefined) {\n\t\t\t\ttreeView.description = description;\n\t\t\t},\n\t\t\tget badge() {\n\t\t\t\treturn treeView.badge;\n\t\t\t},\n\t\t\tset badge(badge: vscode.ViewBadge | undefined) {\n\t\t\t\tif ((badge !== undefined) && extHostTypes.ViewBadge.isViewBadge(badge)) {\n\t\t\t\t\ttreeView.badge = {\n\t\t\t\t\t\tvalue: Math.floor(Math.abs(badge.value)),\n\t\t\t\t\t\ttooltip: badge.tooltip\n\t\t\t\t\t};\n\t\t\t\t} else if (badge === undefined) {\n\t\t\t\t\ttreeView.badge = undefined;\n\t\t\t\t}\n\t\t\t},\n\t\t\treveal: (element: T, options?: IRevealOptions): Promise<void> => {\n\t\t\t\treturn treeView.reveal(element, options);\n\t\t\t},\n\t\t\tdispose: async () => {\n\t\t\t\t// Wait for the registration promise to finish before doing the dispose.\n\t\t\t\tawait registerPromise;\n\t\t\t\tthis.treeViews.delete(viewId);\n\t\t\t\ttreeView.dispose();\n\t\t\t}\n\t\t};\n\t\tthis._register(view);\n\t\treturn view as vscode.TreeView<T>;\n\t}\n\n\t$getChildren(treeViewId: string, treeItemHandle?: string): Promise<ITreeItem[] | undefined> {\n\t\tconst treeView = this.treeViews.get(treeViewId);\n\t\tif (!treeView) {\n\t\t\treturn Promise.reject(new NoTreeViewError(treeViewId));\n\t\t}\n\t\treturn treeView.getChildren(treeItemHandle);\n\t}\n\n\tasync $handleDrop(destinationViewId: string, requestId: number, treeDataTransferDTO: DataTransferDTO, targetItemHandle: string | undefined, token: CancellationToken,\n\t\toperationUuid?: string, sourceViewId?: string, sourceTreeItemHandles?: string[]): Promise<void> {\n\t\tconst treeView = this.treeViews.get(destinationViewId);\n\t\tif (!treeView) {\n\t\t\treturn Promise.reject(new NoTreeViewError(destinationViewId));\n\t\t}\n\n\t\tconst treeDataTransfer = DataTransfer.toDataTransfer(treeDataTransferDTO, async dataItemIndex => {\n\t\t\treturn (await this._proxy.$resolveDropFileData(destinationViewId, requestId, dataItemIndex)).buffer;\n\t\t});\n\t\tif ((sourceViewId === destinationViewId) && sourceTreeItemHandles) {\n\t\t\tawait this.addAdditionalTransferItems(treeDataTransfer, treeView, sourceTreeItemHandles, token, operationUuid);\n\t\t}\n\t\treturn treeView.onDrop(treeDataTransfer, targetItemHandle, token);\n\t}\n\n\tprivate async addAdditionalTransferItems(treeDataTransfer: vscode.DataTransfer, treeView: ExtHostTreeView<any>,\n\t\tsourceTreeItemHandles: string[], token: CancellationToken, operationUuid?: string): Promise<vscode.DataTransfer | undefined> {\n\t\tconst existingTransferOperation = this.treeDragAndDropService.removeDragOperationTransfer(operationUuid);\n\t\tif (existingTransferOperation) {\n\t\t\t(await existingTransferOperation)?.forEach((value, key) => {\n\t\t\t\tif (value) {\n\t\t\t\t\ttreeDataTransfer.set(key, value);\n\t\t\t\t}\n\t\t\t});\n\t\t} else if (operationUuid && treeView.handleDrag) {\n\t\t\tconst willDropPromise = treeView.handleDrag(sourceTreeItemHandles, treeDataTransfer, token);\n\t\t\tthis.treeDragAndDropService.addDragOperationTransfer(operationUuid, willDropPromise);\n\t\t\tawait willDropPromise;\n\t\t}\n\t\treturn treeDataTransfer;\n\t}\n\n\tasync $handleDrag(sourceViewId: string, sourceTreeItemHandles: string[], operationUuid: string, token: CancellationToken): Promise<DataTransferDTO | undefined> {\n\t\tconst treeView = this.treeViews.get(sourceViewId);\n\t\tif (!treeView) {\n\t\t\treturn Promise.reject(new NoTreeViewError(sourceViewId));\n\t\t}\n\n\t\tconst treeDataTransfer = await this.addAdditionalTransferItems(new extHostTypes.DataTransfer(), treeView, sourceTreeItemHandles, token, operationUuid);\n\t\tif (!treeDataTransfer || token.isCancellationRequested) {\n\t\t\treturn;\n\t\t}\n\n\t\treturn DataTransfer.from(treeDataTransfer);\n\t}\n\n\tasync $hasResolve(treeViewId: string): Promise<boolean> {\n\t\tconst treeView = this.treeViews.get(treeViewId);\n\t\tif (!treeView) {\n\t\t\tthrow new NoTreeViewError(treeViewId);\n\t\t}\n\t\treturn treeView.hasResolve;\n\t}\n\n\t$resolve(treeViewId: string, treeItemHandle: string, token: vscode.CancellationToken): Promise<ITreeItem | undefined> {\n\t\tconst treeView = this.treeViews.get(treeViewId);\n\t\tif (!treeView) {\n\t\t\tthrow new NoTreeViewError(treeViewId);\n\t\t}\n\t\treturn treeView.resolveTreeItem(treeItemHandle, token);\n\t}\n\n\t$setExpanded(treeViewId: string, treeItemHandle: string, expanded: boolean): void {\n\t\tconst treeView = this.treeViews.get(treeViewId);\n\t\tif (!treeView) {\n\t\t\tthrow new NoTreeViewError(treeViewId);\n\t\t}\n\t\ttreeView.setExpanded(treeItemHandle, expanded);\n\t}\n\n\t$setSelectionAndFocus(treeViewId: string, selectedHandles: string[], focusedHandle: string) {\n\t\tconst treeView = this.treeViews.get(treeViewId);\n\t\tif (!treeView) {\n\t\t\tthrow new NoTreeViewError(treeViewId);\n\t\t}\n\t\ttreeView.setSelectionAndFocus(selectedHandles, focusedHandle);\n\t}\n\n\t$setVisible(treeViewId: string, isVisible: boolean): void {\n\t\tconst treeView = this.treeViews.get(treeViewId);\n\t\tif (!treeView) {\n\t\t\tif (!isVisible) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tthrow new NoTreeViewError(treeViewId);\n\t\t}\n\t\ttreeView.setVisible(isVisible);\n\t}\n\n\t$changeCheckboxState(treeViewId: string, checkboxUpdate: CheckboxUpdate[]): void {\n\t\tconst treeView = this.treeViews.get(treeViewId);\n\t\tif (!treeView) {\n\t\t\tthrow new NoTreeViewError(treeViewId);\n\t\t}\n\t\ttreeView.setCheckboxState(checkboxUpdate);\n\t}\n\n\tprivate createExtHostTreeView<T>(id: string, options: vscode.TreeViewOptions<T>, extension: IExtensionDescription): ExtHostTreeView<T> {\n\t\tconst treeView = this._register(new ExtHostTreeView<T>(id, options, this._proxy, this.commands.converter, this.logService, extension));\n\t\tthis.treeViews.set(id, treeView);\n\t\treturn treeView;\n\t}\n\n\tprivate convertArgument(arg: TreeViewItemHandleArg | TreeViewPaneHandleArg): any {\n\t\tconst treeView = this.treeViews.get(arg.$treeViewId);\n\t\tif (treeView && '$treeItemHandle' in arg) {\n\t\t\treturn treeView.getExtensionElement(arg.$treeItemHandle);\n\t\t}\n\t\tif (treeView && '$focusedTreeItem' in arg && arg.$focusedTreeItem) {\n\t\t\treturn treeView.focusedElement;\n\t\t}\n\t\treturn null;\n\t}\n}\n\ntype Root = null | undefined | void;\ntype TreeData<T> = { message: boolean; element: T | T[] | Root | false };\n\ninterface TreeNode extends IDisposable {\n\titem: ITreeItem;\n\textensionItem: vscode.TreeItem;\n\tparent: TreeNode | Root;\n\tchildren?: TreeNode[];\n\tdisposableStore: DisposableStore;\n}\n\nclass ExtHostTreeView<T> extends Disposable {\n\n\tprivate static readonly LABEL_HANDLE_PREFIX = '0';\n\tprivate static readonly ID_HANDLE_PREFIX = '1';\n\n\tprivate readonly dataProvider: vscode.TreeDataProvider<T>;\n\tprivate readonly dndController: vscode.TreeDragAndDropController<T> | undefined;\n\n\tprivate roots: TreeNode[] | undefined = undefined;\n\tprivate elements: Map<TreeItemHandle, T> = new Map<TreeItemHandle, T>();\n\tprivate nodes: Map<T, TreeNode> = new Map<T, TreeNode>();\n\n\tprivate _visible: boolean = false;\n\tget visible(): boolean { return this._visible; }\n\n\tprivate _selectedHandles: TreeItemHandle[] = [];\n\tget selectedElements(): T[] { return <T[]>this._selectedHandles.map(handle => this.getExtensionElement(handle)).filter(element => !isUndefinedOrNull(element)); }\n\n\tprivate _focusedHandle: TreeItemHandle | undefined = undefined;\n\tget focusedElement(): T | undefined { return <T | undefined>(this._focusedHandle ? this.getExtensionElement(this._focusedHandle) : undefined); }\n\n\tprivate _onDidExpandElement: Emitter<vscode.TreeViewExpansionEvent<T>> = this._register(new Emitter<vscode.TreeViewExpansionEvent<T>>());\n\treadonly onDidExpandElement: Event<vscode.TreeViewExpansionEvent<T>> = this._onDidExpandElement.event;\n\n\tprivate _onDidCollapseElement: Emitter<vscode.TreeViewExpansionEvent<T>> = this._register(new Emitter<vscode.TreeViewExpansionEvent<T>>());\n\treadonly onDidCollapseElement: Event<vscode.TreeViewExpansionEvent<T>> = this._onDidCollapseElement.event;\n\n\tprivate _onDidChangeSelection: Emitter<vscode.TreeViewSelectionChangeEvent<T>> = this._register(new Emitter<vscode.TreeViewSelectionChangeEvent<T>>());\n\treadonly onDidChangeSelection: Event<vscode.TreeViewSelectionChangeEvent<T>> = this._onDidChangeSelection.event;\n\n\tprivate _onDidChangeActiveItem: Emitter<vscode.TreeViewActiveItemChangeEvent<T>> = this._register(new Emitter<vscode.TreeViewActiveItemChangeEvent<T>>());\n\treadonly onDidChangeActiveItem: Event<vscode.TreeViewActiveItemChangeEvent<T>> = this._onDidChangeActiveItem.event;\n\n\tprivate _onDidChangeVisibility: Emitter<vscode.TreeViewVisibilityChangeEvent> = this._register(new Emitter<vscode.TreeViewVisibilityChangeEvent>());\n\treadonly onDidChangeVisibility: Event<vscode.TreeViewVisibilityChangeEvent> = this._onDidChangeVisibility.event;\n\n\tprivate _onDidChangeCheckboxState = this._register(new Emitter<vscode.TreeCheckboxChangeEvent<T>>());\n\treadonly onDidChangeCheckboxState: Event<vscode.TreeCheckboxChangeEvent<T>> = this._onDidChangeCheckboxState.event;\n\n\tprivate _onDidChangeData: Emitter<TreeData<T>> = this._register(new Emitter<TreeData<T>>());\n\n\tprivate refreshPromise: Promise<void> = Promise.resolve();\n\tprivate refreshQueue: Promise<void> = Promise.resolve();\n\n\tconstructor(\n\t\tprivate viewId: string, options: vscode.TreeViewOptions<T>,\n\t\tprivate proxy: MainThreadTreeViewsShape,\n\t\tprivate commands: CommandsConverter,\n\t\tprivate logService: ILogService,\n\t\tprivate extension: IExtensionDescription\n\t) {\n\t\tsuper();\n\t\tif (extension.contributes && extension.contributes.views) {\n\t\t\tfor (const location in extension.contributes.views) {\n\t\t\t\tfor (const view of extension.contributes.views[location]) {\n\t\t\t\t\tif (view.id === viewId) {\n\t\t\t\t\t\tthis._title = view.name;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tthis.dataProvider = options.treeDataProvider;\n\t\tthis.dndController = options.dragAndDropController;\n\t\tif (this.dataProvider.onDidChangeTreeData) {\n\t\t\tthis._register(this.dataProvider.onDidChangeTreeData(elementOrElements => {\n\t\t\t\tif (Array.isArray(elementOrElements) && elementOrElements.length === 0) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tthis._onDidChangeData.fire({ message: false, element: elementOrElements });\n\t\t\t}));\n\t\t}\n\n\t\tlet refreshingPromise: Promise<void> | null;\n\t\tlet promiseCallback: () => void;\n\t\tconst onDidChangeData = Event.debounce<TreeData<T>, { message: boolean; elements: (T | Root)[] }>(this._onDidChangeData.event, (result, current) => {\n\t\t\tif (!result) {\n\t\t\t\tresult = { message: false, elements: [] };\n\t\t\t}\n\t\t\tif (current.element !== false) {\n\t\t\t\tif (!refreshingPromise) {\n\t\t\t\t\t// New refresh has started\n\t\t\t\t\trefreshingPromise = new Promise(c => promiseCallback = c);\n\t\t\t\t\tthis.refreshPromise = this.refreshPromise.then(() => refreshingPromise!);\n\t\t\t\t}\n\t\t\t\tif (Array.isArray(current.element)) {\n\t\t\t\t\tresult.elements.push(...current.element);\n\t\t\t\t} else {\n\t\t\t\t\tresult.elements.push(current.element);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (current.message) {\n\t\t\t\tresult.message = true;\n\t\t\t}\n\t\t\treturn result;\n\t\t}, 200, true);\n\t\tthis._register(onDidChangeData(({ message, elements }) => {\n\t\t\tif (elements.length) {\n\t\t\t\tthis.refreshQueue = this.refreshQueue.then(() => {\n\t\t\t\t\tconst _promiseCallback = promiseCallback;\n\t\t\t\t\trefreshingPromise = null;\n\t\t\t\t\treturn this.refresh(elements).then(() => _promiseCallback());\n\t\t\t\t});\n\t\t\t}\n\t\t\tif (message) {\n\t\t\t\tthis.proxy.$setMessage(this.viewId, MarkdownString.fromStrict(this._message) ?? '');\n\t\t\t}\n\t\t}));\n\t}\n\n\tasync getChildren(parentHandle: TreeItemHandle | Root): Promise<ITreeItem[] | undefined> {\n\t\tconst parentElement = parentHandle ? this.getExtensionElement(parentHandle) : undefined;\n\t\tif (parentHandle && !parentElement) {\n\t\t\tthis.logService.error(`No tree item with id \\'${parentHandle}\\' found.`);\n\t\t\treturn Promise.resolve([]);\n\t\t}\n\n\t\tlet childrenNodes: TreeNode[] | undefined = this.getChildrenNodes(parentHandle); // Get it from cache\n\n\t\tif (!childrenNodes) {\n\t\t\tchildrenNodes = await this.fetchChildrenNodes(parentElement);\n\t\t}\n\n\t\treturn childrenNodes ? childrenNodes.map(n => n.item) : undefined;\n\t}\n\n\tgetExtensionElement(treeItemHandle: TreeItemHandle): T | undefined {\n\t\treturn this.elements.get(treeItemHandle);\n\t}\n\n\treveal(element: T | undefined, options?: IRevealOptions): Promise<void> {\n\t\toptions = options ? options : { select: true, focus: false };\n\t\tconst select = isUndefinedOrNull(options.select) ? true : options.select;\n\t\tconst focus = isUndefinedOrNull(options.focus) ? false : options.focus;\n\t\tconst expand = isUndefinedOrNull(options.expand) ? false : options.expand;\n\n\t\tif (typeof this.dataProvider.getParent !== 'function') {\n\t\t\treturn Promise.reject(new Error(`Required registered TreeDataProvider to implement 'getParent' method to access 'reveal' method`));\n\t\t}\n\n\t\tif (element) {\n\t\t\treturn this.refreshPromise\n\t\t\t\t.then(() => this.resolveUnknownParentChain(element))\n\t\t\t\t.then(parentChain => this.resolveTreeNode(element, parentChain[parentChain.length - 1])\n\t\t\t\t\t.then(treeNode => this.proxy.$reveal(this.viewId, { item: treeNode.item, parentChain: parentChain.map(p => p.item) }, { select, focus, expand })), error => this.logService.error(error));\n\t\t} else {\n\t\t\treturn this.proxy.$reveal(this.viewId, undefined, { select, focus, expand });\n\t\t}\n\t}\n\n\tprivate _message: string | vscode.MarkdownString = '';\n\tget message(): string | vscode.MarkdownString {\n\t\treturn this._message;\n\t}\n\n\tset message(message: string | vscode.MarkdownString) {\n\t\tthis._message = message;\n\t\tthis._onDidChangeData.fire({ message: true, element: false });\n\t}\n\n\tprivate _title: string = '';\n\tget title(): string {\n\t\treturn this._title;\n\t}\n\n\tset title(title: string) {\n\t\tthis._title = title;\n\t\tthis.proxy.$setTitle(this.viewId, title, this._description);\n\t}\n\n\tprivate _description: string | undefined;\n\tget description(): string | undefined {\n\t\treturn this._description;\n\t}\n\n\tset description(description: string | undefined) {\n\t\tthis._description = description;\n\t\tthis.proxy.$setTitle(this.viewId, this._title, description);\n\t}\n\n\tprivate _badge: vscode.ViewBadge | undefined;\n\tget badge(): vscode.ViewBadge | undefined {\n\t\treturn this._badge;\n\t}\n\n\tset badge(badge: vscode.ViewBadge | undefined) {\n\t\tif (this._badge?.value === badge?.value &&\n\t\t\tthis._badge?.tooltip === badge?.tooltip) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis._badge = ViewBadge.from(badge);\n\t\tthis.proxy.$setBadge(this.viewId, badge);\n\t}\n\n\tsetExpanded(treeItemHandle: TreeItemHandle, expanded: boolean): void {\n\t\tconst element = this.getExtensionElement(treeItemHandle);\n\t\tif (element) {\n\t\t\tif (expanded) {\n\t\t\t\tthis._onDidExpandElement.fire(Object.freeze({ element }));\n\t\t\t} else {\n\t\t\t\tthis._onDidCollapseElement.fire(Object.freeze({ element }));\n\t\t\t}\n\t\t}\n\t}\n\n\tsetSelectionAndFocus(selectedHandles: TreeItemHandle[], focusedHandle: string): void {\n\t\tconst changedSelection = !equals(this._selectedHandles, selectedHandles);\n\t\tthis._selectedHandles = selectedHandles;\n\n\t\tconst changedFocus = this._focusedHandle !== focusedHandle;\n\t\tthis._focusedHandle = focusedHandle;\n\n\t\tif (changedSelection) {\n\t\t\tthis._onDidChangeSelection.fire(Object.freeze({ selection: this.selectedElements }));\n\t\t}\n\n\t\tif (changedFocus) {\n\t\t\tthis._onDidChangeActiveItem.fire(Object.freeze({ activeItem: this.focusedElement }));\n\t\t}\n\t}\n\n\tsetVisible(visible: boolean): void {\n\t\tif (visible !== this._visible) {\n\t\t\tthis._visible = visible;\n\t\t\tthis._onDidChangeVisibility.fire(Object.freeze({ visible: this._visible }));\n\t\t}\n\t}\n\n\tasync setCheckboxState(checkboxUpdates: CheckboxUpdate[]) {\n\t\ttype CheckboxUpdateWithItem = { extensionItem: NonNullable<T>; treeItem: vscode.TreeItem; newState: extHostTypes.TreeItemCheckboxState };\n\t\tconst items = (await Promise.all(checkboxUpdates.map(async checkboxUpdate => {\n\t\t\tconst extensionItem = this.getExtensionElement(checkboxUpdate.treeItemHandle);\n\t\t\tif (extensionItem) {\n\t\t\t\treturn {\n\t\t\t\t\textensionItem: extensionItem,\n\t\t\t\t\ttreeItem: await this.dataProvider.getTreeItem(extensionItem),\n\t\t\t\t\tnewState: checkboxUpdate.newState ? extHostTypes.TreeItemCheckboxState.Checked : extHostTypes.TreeItemCheckboxState.Unchecked\n\t\t\t\t};\n\t\t\t}\n\t\t\treturn Promise.resolve(undefined);\n\t\t}))).filter<CheckboxUpdateWithItem>((item): item is CheckboxUpdateWithItem => item !== undefined);\n\n\t\titems.forEach(item => {\n\t\t\titem.treeItem.checkboxState = item.newState ? extHostTypes.TreeItemCheckboxState.Checked : extHostTypes.TreeItemCheckboxState.Unchecked;\n\t\t});\n\n\t\tthis._onDidChangeCheckboxState.fire({ items: items.map(item => [item.extensionItem, item.newState]) });\n\t}\n\n\tasync handleDrag(sourceTreeItemHandles: TreeItemHandle[], treeDataTransfer: vscode.DataTransfer, token: CancellationToken): Promise<vscode.DataTransfer | undefined> {\n\t\tconst extensionTreeItems: T[] = [];\n\t\tfor (const sourceHandle of sourceTreeItemHandles) {\n\t\t\tconst extensionItem = this.getExtensionElement(sourceHandle);\n\t\t\tif (extensionItem) {\n\t\t\t\textensionTreeItems.push(extensionItem);\n\t\t\t}\n\t\t}\n\n\t\tif (!this.dndController?.handleDrag || (extensionTreeItems.length === 0)) {\n\t\t\treturn;\n\t\t}\n\t\tawait this.dndController.handleDrag(extensionTreeItems, treeDataTransfer, token);\n\t\treturn treeDataTransfer;\n\t}\n\n\tget hasHandleDrag(): boolean {\n\t\treturn !!this.dndController?.handleDrag;\n\t}\n\n\tasync onDrop(treeDataTransfer: vscode.DataTransfer, targetHandleOrNode: TreeItemHandle | undefined, token: CancellationToken): Promise<void> {\n\t\tconst target = targetHandleOrNode ? this.getExtensionElement(targetHandleOrNode) : undefined;\n\t\tif ((!target && targetHandleOrNode) || !this.dndController?.handleDrop) {\n\t\t\treturn;\n\t\t}\n\t\treturn asPromise(() => this.dndController?.handleDrop\n\t\t\t? this.dndController.handleDrop(target, treeDataTransfer, token)\n\t\t\t: undefined);\n\t}\n\n\tget hasResolve(): boolean {\n\t\treturn !!this.dataProvider.resolveTreeItem;\n\t}\n\n\tasync resolveTreeItem(treeItemHandle: string, token: vscode.CancellationToken): Promise<ITreeItem | undefined> {\n\t\tif (!this.dataProvider.resolveTreeItem) {\n\t\t\treturn;\n\t\t}\n\t\tconst element = this.elements.get(treeItemHandle);\n\t\tif (element) {\n\t\t\tconst node = this.nodes.get(element);\n\t\t\tif (node) {\n\t\t\t\tconst resolve = await this.dataProvider.resolveTreeItem(node.extensionItem, element, token) ?? node.extensionItem;\n\t\t\t\tthis.validateTreeItem(resolve);\n\t\t\t\t// Resolvable elements. Currently only tooltip and command.\n\t\t\t\tnode.item.tooltip = this.getTooltip(resolve.tooltip);\n\t\t\t\tnode.item.command = this.getCommand(node.disposableStore, resolve.command);\n\t\t\t\treturn node.item;\n\t\t\t}\n\t\t}\n\t\treturn;\n\t}\n\n\tprivate resolveUnknownParentChain(element: T): Promise<TreeNode[]> {\n\t\treturn this.resolveParent(element)\n\t\t\t.then((parent) => {\n\t\t\t\tif (!parent) {\n\t\t\t\t\treturn Promise.resolve([]);\n\t\t\t\t}\n\t\t\t\treturn this.resolveUnknownParentChain(parent)\n\t\t\t\t\t.then(result => this.resolveTreeNode(parent, result[result.length - 1])\n\t\t\t\t\t\t.then(parentNode => {\n\t\t\t\t\t\t\tresult.push(parentNode);\n\t\t\t\t\t\t\treturn result;\n\t\t\t\t\t\t}));\n\t\t\t});\n\t}\n\n\tprivate resolveParent(element: T): Promise<T | Root> {\n\t\tconst node = this.nodes.get(element);\n\t\tif (node) {\n\t\t\treturn Promise.resolve(node.parent ? this.elements.get(node.parent.item.handle) : undefined);\n\t\t}\n\t\treturn asPromise(() => this.dataProvider.getParent!(element));\n\t}\n\n\tprivate resolveTreeNode(element: T, parent?: TreeNode): Promise<TreeNode> {\n\t\tconst node = this.nodes.get(element);\n\t\tif (node) {\n\t\t\treturn Promise.resolve(node);\n\t\t}\n\t\treturn asPromise(() => this.dataProvider.getTreeItem(element))\n\t\t\t.then(extTreeItem => this.createHandle(element, extTreeItem, parent, true))\n\t\t\t.then(handle => this.getChildren(parent ? parent.item.handle : undefined)\n\t\t\t\t.then(() => {\n\t\t\t\t\tconst cachedElement = this.getExtensionElement(handle);\n\t\t\t\t\tif (cachedElement) {\n\t\t\t\t\t\tconst node = this.nodes.get(cachedElement);\n\t\t\t\t\t\tif (node) {\n\t\t\t\t\t\t\treturn Promise.resolve(node);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tthrow new Error(`Cannot resolve tree item for element ${handle} from extension ${this.extension.identifier.value}`);\n\t\t\t\t}));\n\t}\n\n\tprivate getChildrenNodes(parentNodeOrHandle: TreeNode | TreeItemHandle | Root): TreeNode[] | undefined {\n\t\tif (parentNodeOrHandle) {\n\t\t\tlet parentNode: TreeNode | undefined;\n\t\t\tif (typeof parentNodeOrHandle === 'string') {\n\t\t\t\tconst parentElement = this.getExtensionElement(parentNodeOrHandle);\n\t\t\t\tparentNode = parentElement ? this.nodes.get(parentElement) : undefined;\n\t\t\t} else {\n\t\t\t\tparentNode = parentNodeOrHandle;\n\t\t\t}\n\t\t\treturn parentNode ? parentNode.children || undefined : undefined;\n\t\t}\n\t\treturn this.roots;\n\t}\n\n\tprivate async fetchChildrenNodes(parentElement?: T): Promise<TreeNode[] | undefined> {\n\t\t// clear children cache\n\t\tthis.clearChildren(parentElement);\n\n\t\tconst cts = new CancellationTokenSource(this._refreshCancellationSource.token);\n\n\t\ttry {\n\t\t\tconst parentNode = parentElement ? this.nodes.get(parentElement) : undefined;\n\t\t\tconst elements = await this.dataProvider.getChildren(parentElement);\n\t\t\tif (cts.token.isCancellationRequested) {\n\t\t\t\treturn undefined;\n\t\t\t}\n\n\t\t\tconst coalescedElements = coalesce(elements || []);\n\t\t\tconst treeItems = await Promise.all(coalesce(coalescedElements).map(element => {\n\t\t\t\treturn this.dataProvider.getTreeItem(element);\n\t\t\t}));\n\t\t\tif (cts.token.isCancellationRequested) {\n\t\t\t\treturn undefined;\n\t\t\t}\n\n\t\t\t// createAndRegisterTreeNodes adds the nodes to a cache. This must be done sync so that they get added in the correct order.\n\t\t\tconst items = treeItems.map((item, index) => item ? this.createAndRegisterTreeNode(coalescedElements[index], item, parentNode) : null);\n\n\t\t\treturn coalesce(items);\n\t\t} finally {\n\t\t\tcts.dispose();\n\t\t}\n\t}\n\n\tprivate _refreshCancellationSource = new CancellationTokenSource();\n\n\tprivate refresh(elements: (T | Root)[]): Promise<void> {\n\t\tconst hasRoot = elements.some(element => !element);\n\t\tif (hasRoot) {\n\t\t\t// Cancel any pending children fetches\n\t\t\tthis._refreshCancellationSource.dispose(true);\n\t\t\tthis._refreshCancellationSource = new CancellationTokenSource();\n\n\t\t\tthis.clearAll(); // clear cache\n\t\t\treturn this.proxy.$refresh(this.viewId);\n\t\t} else {\n\t\t\tconst handlesToRefresh = this.getHandlesToRefresh(<T[]>elements);\n\t\t\tif (handlesToRefresh.length) {\n\t\t\t\treturn this.refreshHandles(handlesToRefresh);\n\t\t\t}\n\t\t}\n\t\treturn Promise.resolve(undefined);\n\t}\n\n\tprivate getHandlesToRefresh(elements: T[]): TreeItemHandle[] {\n\t\tconst elementsToUpdate = new Set<TreeItemHandle>();\n\t\tconst elementNodes = elements.map(element => this.nodes.get(element));\n\t\tfor (const elementNode of elementNodes) {\n\t\t\tif (elementNode && !elementsToUpdate.has(elementNode.item.handle)) {\n\t\t\t\t// check if an ancestor of extElement is already in the elements list\n\t\t\t\tlet currentNode: TreeNode | undefined = elementNode;\n\t\t\t\twhile (currentNode && currentNode.parent && elementNodes.findIndex(node => currentNode && currentNode.parent && node && node.item.handle === currentNode.parent.item.handle) === -1) {\n\t\t\t\t\tconst parentElement: T | undefined = this.elements.get(currentNode.parent.item.handle);\n\t\t\t\t\tcurrentNode = parentElement ? this.nodes.get(parentElement) : undefined;\n\t\t\t\t}\n\t\t\t\tif (currentNode && !currentNode.parent) {\n\t\t\t\t\telementsToUpdate.add(elementNode.item.handle);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tconst handlesToUpdate: TreeItemHandle[] = [];\n\t\t// Take only top level elements\n\t\telementsToUpdate.forEach((handle) => {\n\t\t\tconst element = this.elements.get(handle);\n\t\t\tif (element) {\n\t\t\t\tconst node = this.nodes.get(element);\n\t\t\t\tif (node && (!node.parent || !elementsToUpdate.has(node.parent.item.handle))) {\n\t\t\t\t\thandlesToUpdate.push(handle);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\treturn handlesToUpdate;\n\t}\n\n\tprivate refreshHandles(itemHandles: TreeItemHandle[]): Promise<void> {\n\t\tconst itemsToRefresh: { [treeItemHandle: string]: ITreeItem } = {};\n\t\treturn Promise.all(itemHandles.map(treeItemHandle =>\n\t\t\tthis.refreshNode(treeItemHandle)\n\t\t\t\t.then(node => {\n\t\t\t\t\tif (node) {\n\t\t\t\t\t\titemsToRefresh[treeItemHandle] = node.item;\n\t\t\t\t\t}\n\t\t\t\t})))\n\t\t\t.then(() => Object.keys(itemsToRefresh).length ? this.proxy.$refresh(this.viewId, itemsToRefresh) : undefined);\n\t}\n\n\tprivate refreshNode(treeItemHandle: TreeItemHandle): Promise<TreeNode | null> {\n\t\tconst extElement = this.getExtensionElement(treeItemHandle);\n\t\tif (extElement) {\n\t\t\tconst existing = this.nodes.get(extElement);\n\t\t\tif (existing) {\n\t\t\t\tthis.clearChildren(extElement); // clear children cache\n\t\t\t\treturn asPromise(() => this.dataProvider.getTreeItem(extElement))\n\t\t\t\t\t.then(extTreeItem => {\n\t\t\t\t\t\tif (extTreeItem) {\n\t\t\t\t\t\t\tconst newNode = this.createTreeNode(extElement, extTreeItem, existing.parent);\n\t\t\t\t\t\t\tthis.updateNodeCache(extElement, newNode, existing, existing.parent);\n\t\t\t\t\t\t\texisting.dispose();\n\t\t\t\t\t\t\treturn newNode;\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t});\n\t\t\t}\n\t\t}\n\t\treturn Promise.resolve(null);\n\t}\n\n\tprivate createAndRegisterTreeNode(element: T, extTreeItem: vscode.TreeItem, parentNode: TreeNode | Root): TreeNode {\n\t\tconst node = this.createTreeNode(element, extTreeItem, parentNode);\n\t\tif (extTreeItem.id && this.elements.has(node.item.handle)) {\n\t\t\tthrow new Error(localize('treeView.duplicateElement', 'Element with id {0} is already registered', extTreeItem.id));\n\t\t}\n\t\tthis.addNodeToCache(element, node);\n\t\tthis.addNodeToParentCache(node, parentNode);\n\t\treturn node;\n\t}\n\n\tprivate getTooltip(tooltip?: string | vscode.MarkdownString): string | IMarkdownString | undefined {\n\t\tif (extHostTypes.MarkdownString.isMarkdownString(tooltip)) {\n\t\t\treturn MarkdownString.from(tooltip);\n\t\t}\n\t\treturn tooltip;\n\t}\n\n\tprivate getCommand(disposable: DisposableStore, command?: vscode.Command): TreeCommand | undefined {\n\t\treturn command ? { ...this.commands.toInternal(command, disposable), originalId: command.command } : undefined;\n\t}\n\n\tprivate getCheckbox(extensionTreeItem: vscode.TreeItem): ITreeItemCheckboxState | undefined {\n\t\tif (extensionTreeItem.checkboxState === undefined) {\n\t\t\treturn undefined;\n\t\t}\n\t\tlet checkboxState: extHostTypes.TreeItemCheckboxState;\n\t\tlet tooltip: string | undefined = undefined;\n\t\tlet accessibilityInformation: IAccessibilityInformation | undefined = undefined;\n\t\tif (typeof extensionTreeItem.checkboxState === 'number') {\n\t\t\tcheckboxState = extensionTreeItem.checkboxState;\n\t\t} else {\n\t\t\tcheckboxState = extensionTreeItem.checkboxState.state;\n\t\t\ttooltip = extensionTreeItem.checkboxState.tooltip;\n\t\t\taccessibilityInformation = extensionTreeItem.checkboxState.accessibilityInformation;\n\t\t}\n\t\treturn { isChecked: checkboxState === extHostTypes.TreeItemCheckboxState.Checked, tooltip, accessibilityInformation };\n\t}\n\n\tprivate validateTreeItem(extensionTreeItem: vscode.TreeItem) {\n\t\tif (!extHostTypes.TreeItem.isTreeItem(extensionTreeItem, this.extension)) {\n\t\t\tthrow new Error(`Extension ${this.extension.identifier.value} has provided an invalid tree item.`);\n\t\t}\n\t}\n\n\tprivate createTreeNode(element: T, extensionTreeItem: vscode.TreeItem, parent: TreeNode | Root): TreeNode {\n\t\tthis.validateTreeItem(extensionTreeItem);\n\t\tconst disposableStore = this._register(new DisposableStore());\n\t\tconst handle = this.createHandle(element, extensionTreeItem, parent);\n\t\tconst icon = this.getLightIconPath(extensionTreeItem);\n\t\tconst item: ITreeItem = {\n\t\t\thandle,\n\t\t\tparentHandle: parent ? parent.item.handle : undefined,\n\t\t\tlabel: toTreeItemLabel(extensionTreeItem.label, this.extension),\n\t\t\tdescription: extensionTreeItem.description,\n\t\t\tresourceUri: extensionTreeItem.resourceUri,\n\t\t\ttooltip: this.getTooltip(extensionTreeItem.tooltip),\n\t\t\tcommand: this.getCommand(disposableStore, extensionTreeItem.command),\n\t\t\tcontextValue: extensionTreeItem.contextValue,\n\t\t\ticon,\n\t\t\ticonDark: this.getDarkIconPath(extensionTreeItem) || icon,\n\t\t\tthemeIcon: this.getThemeIcon(extensionTreeItem),\n\t\t\tcollapsibleState: isUndefinedOrNull(extensionTreeItem.collapsibleState) ? extHostTypes.TreeItemCollapsibleState.None : extensionTreeItem.collapsibleState,\n\t\t\taccessibilityInformation: extensionTreeItem.accessibilityInformation,\n\t\t\tcheckbox: this.getCheckbox(extensionTreeItem),\n\t\t};\n\n\t\treturn {\n\t\t\titem,\n\t\t\textensionItem: extensionTreeItem,\n\t\t\tparent,\n\t\t\tchildren: undefined,\n\t\t\tdisposableStore,\n\t\t\tdispose(): void { disposableStore.dispose(); }\n\t\t};\n\t}\n\n\tprivate getThemeIcon(extensionTreeItem: vscode.TreeItem): extHostTypes.ThemeIcon | undefined {\n\t\treturn extensionTreeItem.iconPath instanceof extHostTypes.ThemeIcon ? extensionTreeItem.iconPath : undefined;\n\t}\n\n\tprivate createHandle(element: T, { id, label, resourceUri }: vscode.TreeItem, parent: TreeNode | Root, returnFirst?: boolean): TreeItemHandle {\n\t\tif (id) {\n\t\t\treturn `${ExtHostTreeView.ID_HANDLE_PREFIX}/${id}`;\n\t\t}\n\n\t\tconst treeItemLabel = toTreeItemLabel(label, this.extension);\n\t\tconst prefix: string = parent ? parent.item.handle : ExtHostTreeView.LABEL_HANDLE_PREFIX;\n\t\tlet elementId = treeItemLabel ? treeItemLabel.label : resourceUri ? basename(resourceUri) : '';\n\t\telementId = elementId.indexOf('/') !== -1 ? elementId.replace('/', '//') : elementId;\n\t\tconst existingHandle = this.nodes.has(element) ? this.nodes.get(element)!.item.handle : undefined;\n\t\tconst childrenNodes = (this.getChildrenNodes(parent) || []);\n\n\t\tlet handle: TreeItemHandle;\n\t\tlet counter = 0;\n\t\tdo {\n\t\t\thandle = `${prefix}/${counter}:${elementId}`;\n\t\t\tif (returnFirst || !this.elements.has(handle) || existingHandle === handle) {\n\t\t\t\t// Return first if asked for or\n\t\t\t\t// Return if handle does not exist or\n\t\t\t\t// Return if handle is being reused\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcounter++;\n\t\t} while (counter <= childrenNodes.length);\n\n\t\treturn handle;\n\t}\n\n\tprivate getLightIconPath(extensionTreeItem: vscode.TreeItem): URI | undefined {\n\t\tif (extensionTreeItem.iconPath && !(extensionTreeItem.iconPath instanceof extHostTypes.ThemeIcon)) {\n\t\t\tif (typeof extensionTreeItem.iconPath === 'string'\n\t\t\t\t|| URI.isUri(extensionTreeItem.iconPath)) {\n\t\t\t\treturn this.getIconPath(extensionTreeItem.iconPath);\n\t\t\t}\n\t\t\treturn this.getIconPath((<{ light: string | URI; dark: string | URI }>extensionTreeItem.iconPath).light);\n\t\t}\n\t\treturn undefined;\n\t}\n\n\tprivate getDarkIconPath(extensionTreeItem: vscode.TreeItem): URI | undefined {\n\t\tif (extensionTreeItem.iconPath && !(extensionTreeItem.iconPath instanceof extHostTypes.ThemeIcon) && (<{ light: string | URI; dark: string | URI }>extensionTreeItem.iconPath).dark) {\n\t\t\treturn this.getIconPath((<{ light: string | URI; dark: string | URI }>extensionTreeItem.iconPath).dark);\n\t\t}\n\t\treturn undefined;\n\t}\n\n\tprivate getIconPath(iconPath: string | URI): URI {\n\t\tif (URI.isUri(iconPath)) {\n\t\t\treturn iconPath;\n\t\t}\n\t\treturn URI.file(iconPath);\n\t}\n\n\tprivate addNodeToCache(element: T, node: TreeNode): void {\n\t\tthis.elements.set(node.item.handle, element);\n\t\tthis.nodes.set(element, node);\n\t}\n\n\tprivate updateNodeCache(element: T, newNode: TreeNode, existing: TreeNode, parentNode: TreeNode | Root): void {\n\t\t// Remove from the cache\n\t\tthis.elements.delete(newNode.item.handle);\n\t\tthis.nodes.delete(element);\n\t\tif (newNode.item.handle !== existing.item.handle) {\n\t\t\tthis.elements.delete(existing.item.handle);\n\t\t}\n\n\t\t// Add the new node to the cache\n\t\tthis.addNodeToCache(element, newNode);\n\n\t\t// Replace the node in parent's children nodes\n\t\tconst childrenNodes = (this.getChildrenNodes(parentNode) || []);\n\t\tconst childNode = childrenNodes.filter(c => c.item.handle === existing.item.handle)[0];\n\t\tif (childNode) {\n\t\t\tchildrenNodes.splice(childrenNodes.indexOf(childNode), 1, newNode);\n\t\t}\n\t}\n\n\tprivate addNodeToParentCache(node: TreeNode, parentNode: TreeNode | Root): void {\n\t\tif (parentNode) {\n\t\t\tif (!parentNode.children) {\n\t\t\t\tparentNode.children = [];\n\t\t\t}\n\t\t\tparentNode.children.push(node);\n\t\t} else {\n\t\t\tif (!this.roots) {\n\t\t\t\tthis.roots = [];\n\t\t\t}\n\t\t\tthis.roots.push(node);\n\t\t}\n\t}\n\n\tprivate clearChildren(parentElement?: T): void {\n\t\tif (parentElement) {\n\t\t\tconst node = this.nodes.get(parentElement);\n\t\t\tif (node) {\n\t\t\t\tif (node.children) {\n\t\t\t\t\tfor (const child of node.children) {\n\t\t\t\t\t\tconst childElement = this.elements.get(child.item.handle);\n\t\t\t\t\t\tif (childElement) {\n\t\t\t\t\t\t\tthis.clear(childElement);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tnode.children = undefined;\n\t\t\t}\n\t\t} else {\n\t\t\tthis.clearAll();\n\t\t}\n\t}\n\n\tprivate clear(element: T): void {\n\t\tconst node = this.nodes.get(element);\n\t\tif (node) {\n\t\t\tif (node.children) {\n\t\t\t\tfor (const child of node.children) {\n\t\t\t\t\tconst childElement = this.elements.get(child.item.handle);\n\t\t\t\t\tif (childElement) {\n\t\t\t\t\t\tthis.clear(childElement);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis.nodes.delete(element);\n\t\t\tthis.elements.delete(node.item.handle);\n\t\t\tnode.dispose();\n\t\t}\n\t}\n\n\tprivate clearAll(): void {\n\t\tthis.roots = undefined;\n\t\tthis.elements.clear();\n\t\tthis.nodes.forEach(node => node.dispose());\n\t\tthis.nodes.clear();\n\t}\n\n\toverride dispose() {\n\t\tsuper.dispose();\n\t\tthis._refreshCancellationSource.dispose();\n\n\t\tthis.clearAll();\n\t\tthis.proxy.$disposeTree(this.viewId);\n\t}\n}\n"],
  "mappings": "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",
  "names": ["options", "node"]
}
