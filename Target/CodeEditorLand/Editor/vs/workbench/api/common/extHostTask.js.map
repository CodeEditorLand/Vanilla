{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/api/common/extHostTask.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n/* eslint-disable local/code-no-native-private */\n\nimport { asPromise } from \"../../../base/common/async.js\";\nimport { Emitter, type Event } from \"../../../base/common/event.js\";\nimport { URI, type UriComponents } from \"../../../base/common/uri.js\";\n\nimport type * as vscode from \"vscode\";\nimport { asArray } from \"../../../base/common/arrays.js\";\nimport { CancellationToken } from \"../../../base/common/cancellation.js\";\nimport {\n\tErrorNoTelemetry,\n\tNotSupportedError,\n} from \"../../../base/common/errors.js\";\nimport { Schemas } from \"../../../base/common/network.js\";\nimport * as Platform from \"../../../base/common/platform.js\";\nimport type { IExtensionDescription } from \"../../../platform/extensions/common/extensions.js\";\nimport { createDecorator } from \"../../../platform/instantiation/common/instantiation.js\";\nimport { ILogService } from \"../../../platform/log/common/log.js\";\nimport { USER_TASKS_GROUP_KEY } from \"../../contrib/tasks/common/tasks.js\";\nimport {\n\ttype ExtHostTaskShape,\n\tMainContext,\n\ttype MainThreadTaskShape,\n} from \"./extHost.protocol.js\";\nimport { IExtHostApiDeprecationService } from \"./extHostApiDeprecationService.js\";\nimport { IExtHostConfiguration } from \"./extHostConfiguration.js\";\nimport { IExtHostDocumentsAndEditors } from \"./extHostDocumentsAndEditors.js\";\nimport { IExtHostInitDataService } from \"./extHostInitDataService.js\";\nimport { IExtHostRpcService } from \"./extHostRpcService.js\";\nimport { IExtHostTerminalService } from \"./extHostTerminalService.js\";\nimport * as types from \"./extHostTypes.js\";\nimport {\n\tIExtHostWorkspace,\n\ttype IExtHostWorkspaceProvider,\n} from \"./extHostWorkspace.js\";\nimport type * as tasks from \"./shared/tasks.js\";\n\nexport interface IExtHostTask extends ExtHostTaskShape {\n\treadonly _serviceBrand: undefined;\n\n\ttaskExecutions: vscode.TaskExecution[];\n\tonDidStartTask: Event<vscode.TaskStartEvent>;\n\tonDidEndTask: Event<vscode.TaskEndEvent>;\n\tonDidStartTaskProcess: Event<vscode.TaskProcessStartEvent>;\n\tonDidEndTaskProcess: Event<vscode.TaskProcessEndEvent>;\n\n\tregisterTaskProvider(\n\t\textension: IExtensionDescription,\n\t\ttype: string,\n\t\tprovider: vscode.TaskProvider,\n\t): vscode.Disposable;\n\tregisterTaskSystem(scheme: string, info: tasks.ITaskSystemInfoDTO): void;\n\tfetchTasks(filter?: vscode.TaskFilter): Promise<vscode.Task[]>;\n\texecuteTask(\n\t\textension: IExtensionDescription,\n\t\ttask: vscode.Task,\n\t): Promise<vscode.TaskExecution>;\n\tterminateTask(execution: vscode.TaskExecution): Promise<void>;\n}\n\nnamespace TaskDefinitionDTO {\n\texport function from(\n\t\tvalue: vscode.TaskDefinition,\n\t): tasks.ITaskDefinitionDTO | undefined {\n\t\tif (value === undefined || value === null) {\n\t\t\treturn undefined;\n\t\t}\n\t\treturn value;\n\t}\n\texport function to(\n\t\tvalue: tasks.ITaskDefinitionDTO,\n\t): vscode.TaskDefinition | undefined {\n\t\tif (value === undefined || value === null) {\n\t\t\treturn undefined;\n\t\t}\n\t\treturn value;\n\t}\n}\n\nnamespace TaskPresentationOptionsDTO {\n\texport function from(\n\t\tvalue: vscode.TaskPresentationOptions,\n\t): tasks.ITaskPresentationOptionsDTO | undefined {\n\t\tif (value === undefined || value === null) {\n\t\t\treturn undefined;\n\t\t}\n\t\treturn value;\n\t}\n\texport function to(\n\t\tvalue: tasks.ITaskPresentationOptionsDTO,\n\t): vscode.TaskPresentationOptions | undefined {\n\t\tif (value === undefined || value === null) {\n\t\t\treturn undefined;\n\t\t}\n\t\treturn value;\n\t}\n}\n\nnamespace ProcessExecutionOptionsDTO {\n\texport function from(\n\t\tvalue: vscode.ProcessExecutionOptions,\n\t): tasks.IProcessExecutionOptionsDTO | undefined {\n\t\tif (value === undefined || value === null) {\n\t\t\treturn undefined;\n\t\t}\n\t\treturn value;\n\t}\n\texport function to(\n\t\tvalue: tasks.IProcessExecutionOptionsDTO,\n\t): vscode.ProcessExecutionOptions | undefined {\n\t\tif (value === undefined || value === null) {\n\t\t\treturn undefined;\n\t\t}\n\t\treturn value;\n\t}\n}\n\nnamespace ProcessExecutionDTO {\n\texport function is(\n\t\tvalue:\n\t\t\t| tasks.IShellExecutionDTO\n\t\t\t| tasks.IProcessExecutionDTO\n\t\t\t| tasks.ICustomExecutionDTO\n\t\t\t| undefined,\n\t): value is tasks.IProcessExecutionDTO {\n\t\tif (value) {\n\t\t\tconst candidate = value as tasks.IProcessExecutionDTO;\n\t\t\treturn candidate && !!candidate.process;\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t}\n\texport function from(\n\t\tvalue: vscode.ProcessExecution,\n\t): tasks.IProcessExecutionDTO | undefined {\n\t\tif (value === undefined || value === null) {\n\t\t\treturn undefined;\n\t\t}\n\t\tconst result: tasks.IProcessExecutionDTO = {\n\t\t\tprocess: value.process,\n\t\t\targs: value.args,\n\t\t};\n\t\tif (value.options) {\n\t\t\tresult.options = ProcessExecutionOptionsDTO.from(value.options);\n\t\t}\n\t\treturn result;\n\t}\n\texport function to(\n\t\tvalue: tasks.IProcessExecutionDTO,\n\t): types.ProcessExecution | undefined {\n\t\tif (value === undefined || value === null) {\n\t\t\treturn undefined;\n\t\t}\n\t\treturn new types.ProcessExecution(\n\t\t\tvalue.process,\n\t\t\tvalue.args,\n\t\t\tvalue.options,\n\t\t);\n\t}\n}\n\nnamespace ShellExecutionOptionsDTO {\n\texport function from(\n\t\tvalue: vscode.ShellExecutionOptions,\n\t): tasks.IShellExecutionOptionsDTO | undefined {\n\t\tif (value === undefined || value === null) {\n\t\t\treturn undefined;\n\t\t}\n\t\treturn value;\n\t}\n\texport function to(\n\t\tvalue: tasks.IShellExecutionOptionsDTO,\n\t): vscode.ShellExecutionOptions | undefined {\n\t\tif (value === undefined || value === null) {\n\t\t\treturn undefined;\n\t\t}\n\t\treturn value;\n\t}\n}\n\nnamespace ShellExecutionDTO {\n\texport function is(\n\t\tvalue:\n\t\t\t| tasks.IShellExecutionDTO\n\t\t\t| tasks.IProcessExecutionDTO\n\t\t\t| tasks.ICustomExecutionDTO\n\t\t\t| undefined,\n\t): value is tasks.IShellExecutionDTO {\n\t\tif (value) {\n\t\t\tconst candidate = value as tasks.IShellExecutionDTO;\n\t\t\treturn (\n\t\t\t\tcandidate && (!!candidate.commandLine || !!candidate.command)\n\t\t\t);\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t}\n\texport function from(\n\t\tvalue: vscode.ShellExecution,\n\t): tasks.IShellExecutionDTO | undefined {\n\t\tif (value === undefined || value === null) {\n\t\t\treturn undefined;\n\t\t}\n\t\tconst result: tasks.IShellExecutionDTO = {};\n\t\tif (value.commandLine !== undefined) {\n\t\t\tresult.commandLine = value.commandLine;\n\t\t} else {\n\t\t\tresult.command = value.command;\n\t\t\tresult.args = value.args;\n\t\t}\n\t\tif (value.options) {\n\t\t\tresult.options = ShellExecutionOptionsDTO.from(value.options);\n\t\t}\n\t\treturn result;\n\t}\n\texport function to(\n\t\tvalue: tasks.IShellExecutionDTO,\n\t): types.ShellExecution | undefined {\n\t\tif (\n\t\t\tvalue === undefined ||\n\t\t\tvalue === null ||\n\t\t\t(value.command === undefined && value.commandLine === undefined)\n\t\t) {\n\t\t\treturn undefined;\n\t\t}\n\t\tif (value.commandLine) {\n\t\t\treturn new types.ShellExecution(value.commandLine, value.options);\n\t\t} else {\n\t\t\treturn new types.ShellExecution(\n\t\t\t\tvalue.command!,\n\t\t\t\tvalue.args ? value.args : [],\n\t\t\t\tvalue.options,\n\t\t\t);\n\t\t}\n\t}\n}\n\nexport namespace CustomExecutionDTO {\n\texport function is(\n\t\tvalue:\n\t\t\t| tasks.IShellExecutionDTO\n\t\t\t| tasks.IProcessExecutionDTO\n\t\t\t| tasks.ICustomExecutionDTO\n\t\t\t| undefined,\n\t): value is tasks.ICustomExecutionDTO {\n\t\tif (value) {\n\t\t\tconst candidate = value as tasks.ICustomExecutionDTO;\n\t\t\treturn candidate && candidate.customExecution === \"customExecution\";\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\texport function from(\n\t\tvalue: vscode.CustomExecution,\n\t): tasks.ICustomExecutionDTO {\n\t\treturn {\n\t\t\tcustomExecution: \"customExecution\",\n\t\t};\n\t}\n\n\texport function to(\n\t\ttaskId: string,\n\t\tprovidedCustomExeutions: Map<string, types.CustomExecution>,\n\t): types.CustomExecution | undefined {\n\t\treturn providedCustomExeutions.get(taskId);\n\t}\n}\n\nexport namespace TaskHandleDTO {\n\texport function from(\n\t\tvalue: types.Task,\n\t\tworkspaceService?: IExtHostWorkspace,\n\t): tasks.ITaskHandleDTO {\n\t\tlet folder: UriComponents | string;\n\t\tif (value.scope !== undefined && typeof value.scope !== \"number\") {\n\t\t\tfolder = value.scope.uri;\n\t\t} else if (\n\t\t\tvalue.scope !== undefined &&\n\t\t\ttypeof value.scope === \"number\"\n\t\t) {\n\t\t\tif (\n\t\t\t\tvalue.scope === types.TaskScope.Workspace &&\n\t\t\t\tworkspaceService &&\n\t\t\t\tworkspaceService.workspaceFile\n\t\t\t) {\n\t\t\t\tfolder = workspaceService.workspaceFile;\n\t\t\t} else {\n\t\t\t\tfolder = USER_TASKS_GROUP_KEY;\n\t\t\t}\n\t\t}\n\t\treturn {\n\t\t\tid: value._id!,\n\t\t\tworkspaceFolder: folder!,\n\t\t};\n\t}\n}\nnamespace TaskGroupDTO {\n\texport function from(\n\t\tvalue: vscode.TaskGroup,\n\t): tasks.ITaskGroupDTO | undefined {\n\t\tif (value === undefined || value === null) {\n\t\t\treturn undefined;\n\t\t}\n\t\treturn { _id: value.id, isDefault: value.isDefault };\n\t}\n}\n\nexport namespace TaskDTO {\n\texport function fromMany(\n\t\ttasks: vscode.Task[],\n\t\textension: IExtensionDescription,\n\t): tasks.ITaskDTO[] {\n\t\tif (tasks === undefined || tasks === null) {\n\t\t\treturn [];\n\t\t}\n\t\tconst result: tasks.ITaskDTO[] = [];\n\t\tfor (const task of tasks) {\n\t\t\tconst converted = from(task, extension);\n\t\t\tif (converted) {\n\t\t\t\tresult.push(converted);\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n\n\texport function from(\n\t\tvalue: vscode.Task,\n\t\textension: IExtensionDescription,\n\t): tasks.ITaskDTO | undefined {\n\t\tif (value === undefined || value === null) {\n\t\t\treturn undefined;\n\t\t}\n\t\tlet execution:\n\t\t\t| tasks.IShellExecutionDTO\n\t\t\t| tasks.IProcessExecutionDTO\n\t\t\t| tasks.ICustomExecutionDTO\n\t\t\t| undefined;\n\t\tif (value.execution instanceof types.ProcessExecution) {\n\t\t\texecution = ProcessExecutionDTO.from(value.execution);\n\t\t} else if (value.execution instanceof types.ShellExecution) {\n\t\t\texecution = ShellExecutionDTO.from(value.execution);\n\t\t} else if (\n\t\t\tvalue.execution &&\n\t\t\tvalue.execution instanceof types.CustomExecution\n\t\t) {\n\t\t\texecution = CustomExecutionDTO.from(\n\t\t\t\t<types.CustomExecution>value.execution,\n\t\t\t);\n\t\t}\n\n\t\tconst definition: tasks.ITaskDefinitionDTO | undefined =\n\t\t\tTaskDefinitionDTO.from(value.definition);\n\t\tlet scope: number | UriComponents;\n\t\tif (value.scope) {\n\t\t\tif (typeof value.scope === \"number\") {\n\t\t\t\tscope = value.scope;\n\t\t\t} else {\n\t\t\t\tscope = value.scope.uri;\n\t\t\t}\n\t\t} else {\n\t\t\t// To continue to support the deprecated task constructor that doesn't take a scope, we must add a scope here:\n\t\t\tscope = types.TaskScope.Workspace;\n\t\t}\n\t\tif (!definition || !scope) {\n\t\t\treturn undefined;\n\t\t}\n\t\tconst result: tasks.ITaskDTO = {\n\t\t\t_id: (value as types.Task)._id!,\n\t\t\tdefinition,\n\t\t\tname: value.name,\n\t\t\tsource: {\n\t\t\t\textensionId: extension.identifier.value,\n\t\t\t\tlabel: value.source,\n\t\t\t\tscope: scope,\n\t\t\t},\n\t\t\texecution: execution!,\n\t\t\tisBackground: value.isBackground,\n\t\t\tgroup: TaskGroupDTO.from(value.group as vscode.TaskGroup),\n\t\t\tpresentationOptions: TaskPresentationOptionsDTO.from(\n\t\t\t\tvalue.presentationOptions,\n\t\t\t),\n\t\t\tproblemMatchers: asArray(value.problemMatchers),\n\t\t\thasDefinedMatchers: (value as types.Task).hasDefinedMatchers,\n\t\t\trunOptions: value.runOptions\n\t\t\t\t? value.runOptions\n\t\t\t\t: { reevaluateOnRerun: true },\n\t\t\tdetail: value.detail,\n\t\t};\n\t\treturn result;\n\t}\n\texport async function to(\n\t\tvalue: tasks.ITaskDTO | undefined,\n\t\tworkspace: IExtHostWorkspaceProvider,\n\t\tprovidedCustomExeutions: Map<string, types.CustomExecution>,\n\t): Promise<types.Task | undefined> {\n\t\tif (value === undefined || value === null) {\n\t\t\treturn undefined;\n\t\t}\n\t\tlet execution:\n\t\t\t| types.ShellExecution\n\t\t\t| types.ProcessExecution\n\t\t\t| types.CustomExecution\n\t\t\t| undefined;\n\t\tif (ProcessExecutionDTO.is(value.execution)) {\n\t\t\texecution = ProcessExecutionDTO.to(value.execution);\n\t\t} else if (ShellExecutionDTO.is(value.execution)) {\n\t\t\texecution = ShellExecutionDTO.to(value.execution);\n\t\t} else if (CustomExecutionDTO.is(value.execution)) {\n\t\t\texecution = CustomExecutionDTO.to(\n\t\t\t\tvalue._id,\n\t\t\t\tprovidedCustomExeutions,\n\t\t\t);\n\t\t}\n\t\tconst definition: vscode.TaskDefinition | undefined =\n\t\t\tTaskDefinitionDTO.to(value.definition);\n\t\tlet scope:\n\t\t\t| vscode.TaskScope.Global\n\t\t\t| vscode.TaskScope.Workspace\n\t\t\t| vscode.WorkspaceFolder\n\t\t\t| undefined;\n\t\tif (value.source) {\n\t\t\tif (value.source.scope !== undefined) {\n\t\t\t\tif (typeof value.source.scope === \"number\") {\n\t\t\t\t\tscope = value.source.scope;\n\t\t\t\t} else {\n\t\t\t\t\tscope = await workspace.resolveWorkspaceFolder(\n\t\t\t\t\t\tURI.revive(value.source.scope),\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tscope = types.TaskScope.Workspace;\n\t\t\t}\n\t\t}\n\t\tif (!definition || !scope) {\n\t\t\treturn undefined;\n\t\t}\n\t\tconst result = new types.Task(\n\t\t\tdefinition,\n\t\t\tscope,\n\t\t\tvalue.name!,\n\t\t\tvalue.source.label,\n\t\t\texecution,\n\t\t\tvalue.problemMatchers,\n\t\t);\n\t\tif (value.isBackground !== undefined) {\n\t\t\tresult.isBackground = value.isBackground;\n\t\t}\n\t\tif (value.group !== undefined) {\n\t\t\tresult.group = types.TaskGroup.from(value.group._id);\n\t\t\tif (result.group && value.group.isDefault) {\n\t\t\t\tresult.group = new types.TaskGroup(\n\t\t\t\t\tresult.group.id,\n\t\t\t\t\tresult.group.label,\n\t\t\t\t);\n\t\t\t\tif (value.group.isDefault === true) {\n\t\t\t\t\tresult.group.isDefault = value.group.isDefault;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (value.presentationOptions) {\n\t\t\tresult.presentationOptions = TaskPresentationOptionsDTO.to(\n\t\t\t\tvalue.presentationOptions,\n\t\t\t)!;\n\t\t}\n\t\tif (value._id) {\n\t\t\tresult._id = value._id;\n\t\t}\n\t\tif (value.detail) {\n\t\t\tresult.detail = value.detail;\n\t\t}\n\t\treturn result;\n\t}\n}\n\nnamespace TaskFilterDTO {\n\texport function from(\n\t\tvalue: vscode.TaskFilter | undefined,\n\t): tasks.ITaskFilterDTO | undefined {\n\t\treturn value;\n\t}\n\n\texport function to(\n\t\tvalue: tasks.ITaskFilterDTO,\n\t): vscode.TaskFilter | undefined {\n\t\tif (!value) {\n\t\t\treturn undefined;\n\t\t}\n\t\treturn Object.assign(Object.create(null), value);\n\t}\n}\n\nclass TaskExecutionImpl implements vscode.TaskExecution {\n\treadonly #tasks: ExtHostTaskBase;\n\n\tconstructor(\n\t\ttasks: ExtHostTaskBase,\n\t\treadonly _id: string,\n\t\tprivate readonly _task: vscode.Task,\n\t) {\n\t\tthis.#tasks = tasks;\n\t}\n\n\tpublic get task(): vscode.Task {\n\t\treturn this._task;\n\t}\n\n\tpublic terminate(): void {\n\t\tthis.#tasks.terminateTask(this);\n\t}\n\n\tpublic fireDidStartProcess(value: tasks.ITaskProcessStartedDTO): void {}\n\n\tpublic fireDidEndProcess(value: tasks.ITaskProcessEndedDTO): void {}\n}\n\nexport interface HandlerData {\n\ttype: string;\n\tprovider: vscode.TaskProvider;\n\textension: IExtensionDescription;\n}\n\nexport abstract class ExtHostTaskBase\n\timplements ExtHostTaskShape, IExtHostTask\n{\n\treadonly _serviceBrand: undefined;\n\n\tprotected readonly _proxy: MainThreadTaskShape;\n\tprotected readonly _workspaceProvider: IExtHostWorkspaceProvider;\n\tprotected readonly _editorService: IExtHostDocumentsAndEditors;\n\tprotected readonly _configurationService: IExtHostConfiguration;\n\tprotected readonly _terminalService: IExtHostTerminalService;\n\tprotected readonly _logService: ILogService;\n\tprotected readonly _deprecationService: IExtHostApiDeprecationService;\n\tprotected _handleCounter: number;\n\tprotected _handlers: Map<number, HandlerData>;\n\tprotected _taskExecutions: Map<string, TaskExecutionImpl>;\n\tprotected _taskExecutionPromises: Map<string, Promise<TaskExecutionImpl>>;\n\tprotected _providedCustomExecutions2: Map<string, types.CustomExecution>;\n\tprivate _notProvidedCustomExecutions: Set<string>; // Used for custom executions tasks that are created and run through executeTask.\n\tprotected _activeCustomExecutions2: Map<string, types.CustomExecution>;\n\tprivate _lastStartedTask: string | undefined;\n\tprotected readonly _onDidExecuteTask: Emitter<vscode.TaskStartEvent> =\n\t\tnew Emitter<vscode.TaskStartEvent>();\n\tprotected readonly _onDidTerminateTask: Emitter<vscode.TaskEndEvent> =\n\t\tnew Emitter<vscode.TaskEndEvent>();\n\n\tprotected readonly _onDidTaskProcessStarted: Emitter<vscode.TaskProcessStartEvent> =\n\t\tnew Emitter<vscode.TaskProcessStartEvent>();\n\tprotected readonly _onDidTaskProcessEnded: Emitter<vscode.TaskProcessEndEvent> =\n\t\tnew Emitter<vscode.TaskProcessEndEvent>();\n\n\tconstructor(\n\t\t@IExtHostRpcService extHostRpc: IExtHostRpcService,\n\t\t@IExtHostInitDataService initData: IExtHostInitDataService,\n\t\t@IExtHostWorkspace workspaceService: IExtHostWorkspace,\n\t\t@IExtHostDocumentsAndEditors editorService: IExtHostDocumentsAndEditors,\n\t\t@IExtHostConfiguration configurationService: IExtHostConfiguration,\n\t\t@IExtHostTerminalService extHostTerminalService: IExtHostTerminalService,\n\t\t@ILogService logService: ILogService,\n\t\t@IExtHostApiDeprecationService deprecationService: IExtHostApiDeprecationService,\n\t) {\n\t\tthis._proxy = extHostRpc.getProxy(MainContext.MainThreadTask);\n\t\tthis._workspaceProvider = workspaceService;\n\t\tthis._editorService = editorService;\n\t\tthis._configurationService = configurationService;\n\t\tthis._terminalService = extHostTerminalService;\n\t\tthis._handleCounter = 0;\n\t\tthis._handlers = new Map<number, HandlerData>();\n\t\tthis._taskExecutions = new Map<string, TaskExecutionImpl>();\n\t\tthis._taskExecutionPromises = new Map<\n\t\t\tstring,\n\t\t\tPromise<TaskExecutionImpl>\n\t\t>();\n\t\tthis._providedCustomExecutions2 = new Map<\n\t\t\tstring,\n\t\t\ttypes.CustomExecution\n\t\t>();\n\t\tthis._notProvidedCustomExecutions = new Set<string>();\n\t\tthis._activeCustomExecutions2 = new Map<\n\t\t\tstring,\n\t\t\ttypes.CustomExecution\n\t\t>();\n\t\tthis._logService = logService;\n\t\tthis._deprecationService = deprecationService;\n\t\tthis._proxy.$registerSupportedExecutions(true);\n\t}\n\n\tpublic registerTaskProvider(\n\t\textension: IExtensionDescription,\n\t\ttype: string,\n\t\tprovider: vscode.TaskProvider,\n\t): vscode.Disposable {\n\t\tif (!provider) {\n\t\t\treturn new types.Disposable(() => {});\n\t\t}\n\t\tconst handle = this.nextHandle();\n\t\tthis._handlers.set(handle, { type, provider, extension });\n\t\tthis._proxy.$registerTaskProvider(handle, type);\n\t\treturn new types.Disposable(() => {\n\t\t\tthis._handlers.delete(handle);\n\t\t\tthis._proxy.$unregisterTaskProvider(handle);\n\t\t});\n\t}\n\n\tpublic registerTaskSystem(\n\t\tscheme: string,\n\t\tinfo: tasks.ITaskSystemInfoDTO,\n\t): void {\n\t\tthis._proxy.$registerTaskSystem(scheme, info);\n\t}\n\n\tpublic fetchTasks(filter?: vscode.TaskFilter): Promise<vscode.Task[]> {\n\t\treturn this._proxy\n\t\t\t.$fetchTasks(TaskFilterDTO.from(filter))\n\t\t\t.then(async (values) => {\n\t\t\t\tconst result: vscode.Task[] = [];\n\t\t\t\tfor (const value of values) {\n\t\t\t\t\tconst task = await TaskDTO.to(\n\t\t\t\t\t\tvalue,\n\t\t\t\t\t\tthis._workspaceProvider,\n\t\t\t\t\t\tthis._providedCustomExecutions2,\n\t\t\t\t\t);\n\t\t\t\t\tif (task) {\n\t\t\t\t\t\tresult.push(task);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn result;\n\t\t\t});\n\t}\n\n\tpublic abstract executeTask(\n\t\textension: IExtensionDescription,\n\t\ttask: vscode.Task,\n\t): Promise<vscode.TaskExecution>;\n\n\tpublic get taskExecutions(): vscode.TaskExecution[] {\n\t\tconst result: vscode.TaskExecution[] = [];\n\t\tthis._taskExecutions.forEach((value) => result.push(value));\n\t\treturn result;\n\t}\n\n\tpublic terminateTask(execution: vscode.TaskExecution): Promise<void> {\n\t\tif (!(execution instanceof TaskExecutionImpl)) {\n\t\t\tthrow new Error(\"No valid task execution provided\");\n\t\t}\n\t\treturn this._proxy.$terminateTask((execution as TaskExecutionImpl)._id);\n\t}\n\n\tpublic get onDidStartTask(): Event<vscode.TaskStartEvent> {\n\t\treturn this._onDidExecuteTask.event;\n\t}\n\n\tpublic async $onDidStartTask(\n\t\texecution: tasks.ITaskExecutionDTO,\n\t\tterminalId: number,\n\t\tresolvedDefinition: tasks.ITaskDefinitionDTO,\n\t): Promise<void> {\n\t\tconst customExecution: types.CustomExecution | undefined =\n\t\t\tthis._providedCustomExecutions2.get(execution.id);\n\t\tif (customExecution) {\n\t\t\t// Clone the custom execution to keep the original untouched. This is important for multiple runs of the same task.\n\t\t\tthis._activeCustomExecutions2.set(execution.id, customExecution);\n\t\t\tthis._terminalService.attachPtyToTerminal(\n\t\t\t\tterminalId,\n\t\t\t\tawait customExecution.callback(resolvedDefinition),\n\t\t\t);\n\t\t}\n\t\tthis._lastStartedTask = execution.id;\n\n\t\tthis._onDidExecuteTask.fire({\n\t\t\texecution: await this.getTaskExecution(execution),\n\t\t});\n\t}\n\n\tpublic get onDidEndTask(): Event<vscode.TaskEndEvent> {\n\t\treturn this._onDidTerminateTask.event;\n\t}\n\n\tpublic async $OnDidEndTask(\n\t\texecution: tasks.ITaskExecutionDTO,\n\t): Promise<void> {\n\t\tif (!this._taskExecutionPromises.has(execution.id)) {\n\t\t\t// Event already fired by the main thread\n\t\t\t// See https://github.com/microsoft/vscode/commit/aaf73920aeae171096d205efb2c58804a32b6846\n\t\t\treturn;\n\t\t}\n\t\tconst _execution = await this.getTaskExecution(execution);\n\t\tthis._taskExecutionPromises.delete(execution.id);\n\t\tthis._taskExecutions.delete(execution.id);\n\t\tthis.customExecutionComplete(execution);\n\t\tthis._onDidTerminateTask.fire({\n\t\t\texecution: _execution,\n\t\t});\n\t}\n\n\tpublic get onDidStartTaskProcess(): Event<vscode.TaskProcessStartEvent> {\n\t\treturn this._onDidTaskProcessStarted.event;\n\t}\n\n\tpublic async $onDidStartTaskProcess(\n\t\tvalue: tasks.ITaskProcessStartedDTO,\n\t): Promise<void> {\n\t\tconst execution = await this.getTaskExecution(value.id);\n\t\tthis._onDidTaskProcessStarted.fire({\n\t\t\texecution: execution,\n\t\t\tprocessId: value.processId,\n\t\t});\n\t}\n\n\tpublic get onDidEndTaskProcess(): Event<vscode.TaskProcessEndEvent> {\n\t\treturn this._onDidTaskProcessEnded.event;\n\t}\n\n\tpublic async $onDidEndTaskProcess(\n\t\tvalue: tasks.ITaskProcessEndedDTO,\n\t): Promise<void> {\n\t\tconst execution = await this.getTaskExecution(value.id);\n\t\tthis._onDidTaskProcessEnded.fire({\n\t\t\texecution: execution,\n\t\t\texitCode: value.exitCode,\n\t\t});\n\t}\n\n\tprotected abstract provideTasksInternal(\n\t\tvalidTypes: { [key: string]: boolean },\n\t\ttaskIdPromises: Promise<void>[],\n\t\thandler: HandlerData,\n\t\tvalue: vscode.Task[] | null | undefined,\n\t): { tasks: tasks.ITaskDTO[]; extension: IExtensionDescription };\n\n\tpublic $provideTasks(\n\t\thandle: number,\n\t\tvalidTypes: { [key: string]: boolean },\n\t): Promise<tasks.ITaskSetDTO> {\n\t\tconst handler = this._handlers.get(handle);\n\t\tif (!handler) {\n\t\t\treturn Promise.reject(new Error(\"no handler found\"));\n\t\t}\n\n\t\t// Set up a list of task ID promises that we can wait on\n\t\t// before returning the provided tasks. The ensures that\n\t\t// our task IDs are calculated for any custom execution tasks.\n\t\t// Knowing this ID ahead of time is needed because when a task\n\t\t// start event is fired this is when the custom execution is called.\n\t\t// The task start event is also the first time we see the ID from the main\n\t\t// thread, which is too late for us because we need to save an map\n\t\t// from an ID to the custom execution function. (Kind of a cart before the horse problem).\n\t\tconst taskIdPromises: Promise<void>[] = [];\n\t\tconst fetchPromise = asPromise(() =>\n\t\t\thandler.provider.provideTasks(CancellationToken.None),\n\t\t).then((value) => {\n\t\t\treturn this.provideTasksInternal(\n\t\t\t\tvalidTypes,\n\t\t\t\ttaskIdPromises,\n\t\t\t\thandler,\n\t\t\t\tvalue,\n\t\t\t);\n\t\t});\n\n\t\treturn new Promise((resolve) => {\n\t\t\tfetchPromise.then((result) => {\n\t\t\t\tPromise.all(taskIdPromises).then(() => {\n\t\t\t\t\tresolve(result);\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t}\n\n\tprotected abstract resolveTaskInternal(\n\t\tresolvedTaskDTO: tasks.ITaskDTO,\n\t): Promise<tasks.ITaskDTO | undefined>;\n\n\tpublic async $resolveTask(\n\t\thandle: number,\n\t\ttaskDTO: tasks.ITaskDTO,\n\t): Promise<tasks.ITaskDTO | undefined> {\n\t\tconst handler = this._handlers.get(handle);\n\t\tif (!handler) {\n\t\t\treturn Promise.reject(new Error(\"no handler found\"));\n\t\t}\n\n\t\tif (taskDTO.definition.type !== handler.type) {\n\t\t\tthrow new Error(\n\t\t\t\t`Unexpected: Task of type [${taskDTO.definition.type}] cannot be resolved by provider of type [${handler.type}].`,\n\t\t\t);\n\t\t}\n\n\t\tconst task = await TaskDTO.to(\n\t\t\ttaskDTO,\n\t\t\tthis._workspaceProvider,\n\t\t\tthis._providedCustomExecutions2,\n\t\t);\n\t\tif (!task) {\n\t\t\tthrow new Error(\"Unexpected: Task cannot be resolved.\");\n\t\t}\n\n\t\tconst resolvedTask = await handler.provider.resolveTask(\n\t\t\ttask,\n\t\t\tCancellationToken.None,\n\t\t);\n\t\tif (!resolvedTask) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.checkDeprecation(resolvedTask, handler);\n\n\t\tconst resolvedTaskDTO: tasks.ITaskDTO | undefined = TaskDTO.from(\n\t\t\tresolvedTask,\n\t\t\thandler.extension,\n\t\t);\n\t\tif (!resolvedTaskDTO) {\n\t\t\tthrow new Error(\"Unexpected: Task cannot be resolved.\");\n\t\t}\n\n\t\tif (resolvedTask.definition !== task.definition) {\n\t\t\tthrow new Error(\n\t\t\t\t\"Unexpected: The resolved task definition must be the same object as the original task definition. The task definition cannot be changed.\",\n\t\t\t);\n\t\t}\n\n\t\tif (CustomExecutionDTO.is(resolvedTaskDTO.execution)) {\n\t\t\tawait this.addCustomExecution(resolvedTaskDTO, resolvedTask, true);\n\t\t}\n\n\t\treturn await this.resolveTaskInternal(resolvedTaskDTO);\n\t}\n\n\tpublic abstract $resolveVariables(\n\t\turiComponents: UriComponents,\n\t\ttoResolve: {\n\t\t\tprocess?: { name: string; cwd?: string; path?: string };\n\t\t\tvariables: string[];\n\t\t},\n\t): Promise<{ process?: string; variables: { [key: string]: string } }>;\n\n\tprivate nextHandle(): number {\n\t\treturn this._handleCounter++;\n\t}\n\n\tprotected async addCustomExecution(\n\t\ttaskDTO: tasks.ITaskDTO,\n\t\ttask: vscode.Task,\n\t\tisProvided: boolean,\n\t): Promise<void> {\n\t\tconst taskId = await this._proxy.$createTaskId(taskDTO);\n\t\tif (!isProvided && !this._providedCustomExecutions2.has(taskId)) {\n\t\t\tthis._notProvidedCustomExecutions.add(taskId);\n\t\t\t// Also add to active executions when not coming from a provider to prevent timing issue.\n\t\t\tthis._activeCustomExecutions2.set(\n\t\t\t\ttaskId,\n\t\t\t\t<types.CustomExecution>task.execution,\n\t\t\t);\n\t\t}\n\t\tthis._providedCustomExecutions2.set(\n\t\t\ttaskId,\n\t\t\t<types.CustomExecution>task.execution,\n\t\t);\n\t}\n\n\tprotected async getTaskExecution(\n\t\texecution: tasks.ITaskExecutionDTO | string,\n\t\ttask?: vscode.Task,\n\t): Promise<TaskExecutionImpl> {\n\t\tif (typeof execution === \"string\") {\n\t\t\tconst taskExecution = this._taskExecutionPromises.get(execution);\n\t\t\tif (!taskExecution) {\n\t\t\t\tthrow new ErrorNoTelemetry(\n\t\t\t\t\t\"Unexpected: The specified task is missing an execution\",\n\t\t\t\t);\n\t\t\t}\n\t\t\treturn taskExecution;\n\t\t}\n\n\t\tconst result: Promise<TaskExecutionImpl> | undefined =\n\t\t\tthis._taskExecutionPromises.get(execution.id);\n\t\tif (result) {\n\t\t\treturn result;\n\t\t}\n\n\t\tlet executionPromise: Promise<TaskExecutionImpl>;\n\t\tif (task) {\n\t\t\texecutionPromise = Promise.resolve(\n\t\t\t\tnew TaskExecutionImpl(this, execution.id, task),\n\t\t\t);\n\t\t} else {\n\t\t\texecutionPromise = TaskDTO.to(\n\t\t\t\texecution.task,\n\t\t\t\tthis._workspaceProvider,\n\t\t\t\tthis._providedCustomExecutions2,\n\t\t\t).then((t) => {\n\t\t\t\tif (!t) {\n\t\t\t\t\tthrow new ErrorNoTelemetry(\n\t\t\t\t\t\t\"Unexpected: Task does not exist.\",\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t\treturn new TaskExecutionImpl(this, execution.id, t);\n\t\t\t});\n\t\t}\n\t\tthis._taskExecutionPromises.set(execution.id, executionPromise);\n\t\treturn executionPromise.then((taskExecution) => {\n\t\t\tthis._taskExecutions.set(execution.id, taskExecution);\n\t\t\treturn taskExecution;\n\t\t});\n\t}\n\n\tprotected checkDeprecation(task: vscode.Task, handler: HandlerData) {\n\t\tconst tTask = task as types.Task;\n\t\tif (tTask._deprecated) {\n\t\t\tthis._deprecationService.report(\n\t\t\t\t\"Task.constructor\",\n\t\t\t\thandler.extension,\n\t\t\t\t\"Use the Task constructor that takes a `scope` instead.\",\n\t\t\t);\n\t\t}\n\t}\n\n\tprivate customExecutionComplete(execution: tasks.ITaskExecutionDTO): void {\n\t\tconst extensionCallback2: vscode.CustomExecution | undefined =\n\t\t\tthis._activeCustomExecutions2.get(execution.id);\n\t\tif (extensionCallback2) {\n\t\t\tthis._activeCustomExecutions2.delete(execution.id);\n\t\t}\n\n\t\t// Technically we don't really need to do this, however, if an extension\n\t\t// is executing a task through \"executeTask\" over and over again\n\t\t// with different properties in the task definition, then the map of executions\n\t\t// could grow indefinitely, something we don't want.\n\t\tif (\n\t\t\tthis._notProvidedCustomExecutions.has(execution.id) &&\n\t\t\tthis._lastStartedTask !== execution.id\n\t\t) {\n\t\t\tthis._providedCustomExecutions2.delete(execution.id);\n\t\t\tthis._notProvidedCustomExecutions.delete(execution.id);\n\t\t}\n\t\tconst iterator = this._notProvidedCustomExecutions.values();\n\t\tlet iteratorResult = iterator.next();\n\t\twhile (!iteratorResult.done) {\n\t\t\tif (\n\t\t\t\t!this._activeCustomExecutions2.has(iteratorResult.value) &&\n\t\t\t\tthis._lastStartedTask !== iteratorResult.value\n\t\t\t) {\n\t\t\t\tthis._providedCustomExecutions2.delete(iteratorResult.value);\n\t\t\t\tthis._notProvidedCustomExecutions.delete(iteratorResult.value);\n\t\t\t}\n\t\t\titeratorResult = iterator.next();\n\t\t}\n\t}\n\n\tpublic abstract $jsonTasksSupported(): Promise<boolean>;\n\n\tpublic abstract $findExecutable(\n\t\tcommand: string,\n\t\tcwd?: string | undefined,\n\t\tpaths?: string[] | undefined,\n\t): Promise<string | undefined>;\n}\n\nexport class WorkerExtHostTask extends ExtHostTaskBase {\n\tconstructor(\n\t\t@IExtHostRpcService extHostRpc: IExtHostRpcService,\n\t\t@IExtHostInitDataService initData: IExtHostInitDataService,\n\t\t@IExtHostWorkspace workspaceService: IExtHostWorkspace,\n\t\t@IExtHostDocumentsAndEditors editorService: IExtHostDocumentsAndEditors,\n\t\t@IExtHostConfiguration configurationService: IExtHostConfiguration,\n\t\t@IExtHostTerminalService extHostTerminalService: IExtHostTerminalService,\n\t\t@ILogService logService: ILogService,\n\t\t@IExtHostApiDeprecationService deprecationService: IExtHostApiDeprecationService,\n\t) {\n\t\tsuper(\n\t\t\textHostRpc,\n\t\t\tinitData,\n\t\t\tworkspaceService,\n\t\t\teditorService,\n\t\t\tconfigurationService,\n\t\t\textHostTerminalService,\n\t\t\tlogService,\n\t\t\tdeprecationService,\n\t\t);\n\t\tthis.registerTaskSystem(Schemas.vscodeRemote, {\n\t\t\tscheme: Schemas.vscodeRemote,\n\t\t\tauthority: \"\",\n\t\t\tplatform: Platform.PlatformToString(Platform.Platform.Web),\n\t\t});\n\t}\n\n\tpublic async executeTask(\n\t\textension: IExtensionDescription,\n\t\ttask: vscode.Task,\n\t): Promise<vscode.TaskExecution> {\n\t\tif (!task.execution) {\n\t\t\tthrow new Error(\"Tasks to execute must include an execution\");\n\t\t}\n\n\t\tconst dto = TaskDTO.from(task, extension);\n\t\tif (dto === undefined) {\n\t\t\tthrow new Error(\"Task is not valid\");\n\t\t}\n\n\t\t// If this task is a custom execution, then we need to save it away\n\t\t// in the provided custom execution map that is cleaned up after the\n\t\t// task is executed.\n\t\tif (CustomExecutionDTO.is(dto.execution)) {\n\t\t\tawait this.addCustomExecution(dto, task, false);\n\t\t} else {\n\t\t\tthrow new NotSupportedError();\n\t\t}\n\n\t\t// Always get the task execution first to prevent timing issues when retrieving it later\n\t\tconst execution = await this.getTaskExecution(\n\t\t\tawait this._proxy.$getTaskExecution(dto),\n\t\t\ttask,\n\t\t);\n\t\tthis._proxy.$executeTask(dto).catch((error) => {\n\t\t\tthrow new Error(error);\n\t\t});\n\t\treturn execution;\n\t}\n\n\tprotected provideTasksInternal(\n\t\tvalidTypes: { [key: string]: boolean },\n\t\ttaskIdPromises: Promise<void>[],\n\t\thandler: HandlerData,\n\t\tvalue: vscode.Task[] | null | undefined,\n\t): { tasks: tasks.ITaskDTO[]; extension: IExtensionDescription } {\n\t\tconst taskDTOs: tasks.ITaskDTO[] = [];\n\t\tif (value) {\n\t\t\tfor (const task of value) {\n\t\t\t\tthis.checkDeprecation(task, handler);\n\t\t\t\tif (!task.definition || !validTypes[task.definition.type]) {\n\t\t\t\t\tconst source = task.source ? task.source : \"No task source\";\n\t\t\t\t\tthis._logService.warn(\n\t\t\t\t\t\t`The task [${source}, ${task.name}] uses an undefined task type. The task will be ignored in the future.`,\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\tconst taskDTO: tasks.ITaskDTO | undefined = TaskDTO.from(\n\t\t\t\t\ttask,\n\t\t\t\t\thandler.extension,\n\t\t\t\t);\n\t\t\t\tif (taskDTO && CustomExecutionDTO.is(taskDTO.execution)) {\n\t\t\t\t\ttaskDTOs.push(taskDTO);\n\t\t\t\t\t// The ID is calculated on the main thread task side, so, let's call into it here.\n\t\t\t\t\t// We need the task id's pre-computed for custom task executions because when OnDidStartTask\n\t\t\t\t\t// is invoked, we have to be able to map it back to our data.\n\t\t\t\t\ttaskIdPromises.push(\n\t\t\t\t\t\tthis.addCustomExecution(taskDTO, task, true),\n\t\t\t\t\t);\n\t\t\t\t} else {\n\t\t\t\t\tthis._logService.warn(\n\t\t\t\t\t\t\"Only custom execution tasks supported.\",\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn {\n\t\t\ttasks: taskDTOs,\n\t\t\textension: handler.extension,\n\t\t};\n\t}\n\n\tprotected async resolveTaskInternal(\n\t\tresolvedTaskDTO: tasks.ITaskDTO,\n\t): Promise<tasks.ITaskDTO | undefined> {\n\t\tif (CustomExecutionDTO.is(resolvedTaskDTO.execution)) {\n\t\t\treturn resolvedTaskDTO;\n\t\t} else {\n\t\t\tthis._logService.warn(\"Only custom execution tasks supported.\");\n\t\t}\n\t\treturn undefined;\n\t}\n\n\tpublic async $resolveVariables(\n\t\turiComponents: UriComponents,\n\t\ttoResolve: {\n\t\t\tprocess?: { name: string; cwd?: string; path?: string };\n\t\t\tvariables: string[];\n\t\t},\n\t): Promise<{ process?: string; variables: { [key: string]: string } }> {\n\t\tconst result = {\n\t\t\tprocess: (<unknown>undefined) as string,\n\t\t\tvariables: Object.create(null),\n\t\t};\n\t\treturn result;\n\t}\n\n\tpublic async $jsonTasksSupported(): Promise<boolean> {\n\t\treturn false;\n\t}\n\n\tpublic async $findExecutable(\n\t\tcommand: string,\n\t\tcwd?: string | undefined,\n\t\tpaths?: string[] | undefined,\n\t): Promise<string | undefined> {\n\t\treturn undefined;\n\t}\n}\n\nexport const IExtHostTask = createDecorator<IExtHostTask>(\"IExtHostTask\");\n"],
  "mappings": "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",
  "names": ["TaskDefinitionDTO", "TaskPresentationOptionsDTO", "ProcessExecutionOptionsDTO", "ProcessExecutionDTO", "ShellExecutionOptionsDTO", "ShellExecutionDTO", "CustomExecutionDTO", "TaskHandleDTO", "TaskGroupDTO", "TaskDTO", "TaskFilterDTO"]
}
