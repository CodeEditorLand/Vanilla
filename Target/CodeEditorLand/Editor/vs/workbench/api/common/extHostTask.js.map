{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/api/common/extHostTask.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n/* eslint-disable local/code-no-native-private */\n\nimport { URI, UriComponents } from '../../../base/common/uri.js';\nimport { asPromise } from '../../../base/common/async.js';\nimport { Event, Emitter } from '../../../base/common/event.js';\n\nimport { MainContext, MainThreadTaskShape, ExtHostTaskShape } from './extHost.protocol.js';\nimport * as types from './extHostTypes.js';\nimport { IExtHostWorkspaceProvider, IExtHostWorkspace } from './extHostWorkspace.js';\nimport type * as vscode from 'vscode';\nimport * as tasks from './shared/tasks.js';\nimport { IExtHostDocumentsAndEditors } from './extHostDocumentsAndEditors.js';\nimport { IExtHostConfiguration } from './extHostConfiguration.js';\nimport { CancellationToken } from '../../../base/common/cancellation.js';\nimport { IExtensionDescription } from '../../../platform/extensions/common/extensions.js';\nimport { IExtHostTerminalService } from './extHostTerminalService.js';\nimport { IExtHostRpcService } from './extHostRpcService.js';\nimport { IExtHostInitDataService } from './extHostInitDataService.js';\nimport { createDecorator } from '../../../platform/instantiation/common/instantiation.js';\nimport { Schemas } from '../../../base/common/network.js';\nimport * as Platform from '../../../base/common/platform.js';\nimport { ILogService } from '../../../platform/log/common/log.js';\nimport { IExtHostApiDeprecationService } from './extHostApiDeprecationService.js';\nimport { USER_TASKS_GROUP_KEY } from '../../contrib/tasks/common/tasks.js';\nimport { ErrorNoTelemetry, NotSupportedError } from '../../../base/common/errors.js';\nimport { asArray } from '../../../base/common/arrays.js';\n\nexport interface IExtHostTask extends ExtHostTaskShape {\n\n\treadonly _serviceBrand: undefined;\n\n\ttaskExecutions: vscode.TaskExecution[];\n\tonDidStartTask: Event<vscode.TaskStartEvent>;\n\tonDidEndTask: Event<vscode.TaskEndEvent>;\n\tonDidStartTaskProcess: Event<vscode.TaskProcessStartEvent>;\n\tonDidEndTaskProcess: Event<vscode.TaskProcessEndEvent>;\n\n\tregisterTaskProvider(extension: IExtensionDescription, type: string, provider: vscode.TaskProvider): vscode.Disposable;\n\tregisterTaskSystem(scheme: string, info: tasks.ITaskSystemInfoDTO): void;\n\tfetchTasks(filter?: vscode.TaskFilter): Promise<vscode.Task[]>;\n\texecuteTask(extension: IExtensionDescription, task: vscode.Task): Promise<vscode.TaskExecution>;\n\tterminateTask(execution: vscode.TaskExecution): Promise<void>;\n}\n\nnamespace TaskDefinitionDTO {\n\texport function from(value: vscode.TaskDefinition): tasks.ITaskDefinitionDTO | undefined {\n\t\tif (value === undefined || value === null) {\n\t\t\treturn undefined;\n\t\t}\n\t\treturn value;\n\t}\n\texport function to(value: tasks.ITaskDefinitionDTO): vscode.TaskDefinition | undefined {\n\t\tif (value === undefined || value === null) {\n\t\t\treturn undefined;\n\t\t}\n\t\treturn value;\n\t}\n}\n\nnamespace TaskPresentationOptionsDTO {\n\texport function from(value: vscode.TaskPresentationOptions): tasks.ITaskPresentationOptionsDTO | undefined {\n\t\tif (value === undefined || value === null) {\n\t\t\treturn undefined;\n\t\t}\n\t\treturn value;\n\t}\n\texport function to(value: tasks.ITaskPresentationOptionsDTO): vscode.TaskPresentationOptions | undefined {\n\t\tif (value === undefined || value === null) {\n\t\t\treturn undefined;\n\t\t}\n\t\treturn value;\n\t}\n}\n\nnamespace ProcessExecutionOptionsDTO {\n\texport function from(value: vscode.ProcessExecutionOptions): tasks.IProcessExecutionOptionsDTO | undefined {\n\t\tif (value === undefined || value === null) {\n\t\t\treturn undefined;\n\t\t}\n\t\treturn value;\n\t}\n\texport function to(value: tasks.IProcessExecutionOptionsDTO): vscode.ProcessExecutionOptions | undefined {\n\t\tif (value === undefined || value === null) {\n\t\t\treturn undefined;\n\t\t}\n\t\treturn value;\n\t}\n}\n\nnamespace ProcessExecutionDTO {\n\texport function is(value: tasks.IShellExecutionDTO | tasks.IProcessExecutionDTO | tasks.ICustomExecutionDTO | undefined): value is tasks.IProcessExecutionDTO {\n\t\tif (value) {\n\t\t\tconst candidate = value as tasks.IProcessExecutionDTO;\n\t\t\treturn candidate && !!candidate.process;\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t}\n\texport function from(value: vscode.ProcessExecution): tasks.IProcessExecutionDTO | undefined {\n\t\tif (value === undefined || value === null) {\n\t\t\treturn undefined;\n\t\t}\n\t\tconst result: tasks.IProcessExecutionDTO = {\n\t\t\tprocess: value.process,\n\t\t\targs: value.args\n\t\t};\n\t\tif (value.options) {\n\t\t\tresult.options = ProcessExecutionOptionsDTO.from(value.options);\n\t\t}\n\t\treturn result;\n\t}\n\texport function to(value: tasks.IProcessExecutionDTO): types.ProcessExecution | undefined {\n\t\tif (value === undefined || value === null) {\n\t\t\treturn undefined;\n\t\t}\n\t\treturn new types.ProcessExecution(value.process, value.args, value.options);\n\t}\n}\n\nnamespace ShellExecutionOptionsDTO {\n\texport function from(value: vscode.ShellExecutionOptions): tasks.IShellExecutionOptionsDTO | undefined {\n\t\tif (value === undefined || value === null) {\n\t\t\treturn undefined;\n\t\t}\n\t\treturn value;\n\t}\n\texport function to(value: tasks.IShellExecutionOptionsDTO): vscode.ShellExecutionOptions | undefined {\n\t\tif (value === undefined || value === null) {\n\t\t\treturn undefined;\n\t\t}\n\t\treturn value;\n\t}\n}\n\nnamespace ShellExecutionDTO {\n\texport function is(value: tasks.IShellExecutionDTO | tasks.IProcessExecutionDTO | tasks.ICustomExecutionDTO | undefined): value is tasks.IShellExecutionDTO {\n\t\tif (value) {\n\t\t\tconst candidate = value as tasks.IShellExecutionDTO;\n\t\t\treturn candidate && (!!candidate.commandLine || !!candidate.command);\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t}\n\texport function from(value: vscode.ShellExecution): tasks.IShellExecutionDTO | undefined {\n\t\tif (value === undefined || value === null) {\n\t\t\treturn undefined;\n\t\t}\n\t\tconst result: tasks.IShellExecutionDTO = {\n\t\t};\n\t\tif (value.commandLine !== undefined) {\n\t\t\tresult.commandLine = value.commandLine;\n\t\t} else {\n\t\t\tresult.command = value.command;\n\t\t\tresult.args = value.args;\n\t\t}\n\t\tif (value.options) {\n\t\t\tresult.options = ShellExecutionOptionsDTO.from(value.options);\n\t\t}\n\t\treturn result;\n\t}\n\texport function to(value: tasks.IShellExecutionDTO): types.ShellExecution | undefined {\n\t\tif (value === undefined || value === null || (value.command === undefined && value.commandLine === undefined)) {\n\t\t\treturn undefined;\n\t\t}\n\t\tif (value.commandLine) {\n\t\t\treturn new types.ShellExecution(value.commandLine, value.options);\n\t\t} else {\n\t\t\treturn new types.ShellExecution(value.command!, value.args ? value.args : [], value.options);\n\t\t}\n\t}\n}\n\nexport namespace CustomExecutionDTO {\n\texport function is(value: tasks.IShellExecutionDTO | tasks.IProcessExecutionDTO | tasks.ICustomExecutionDTO | undefined): value is tasks.ICustomExecutionDTO {\n\t\tif (value) {\n\t\t\tconst candidate = value as tasks.ICustomExecutionDTO;\n\t\t\treturn candidate && candidate.customExecution === 'customExecution';\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\texport function from(value: vscode.CustomExecution): tasks.ICustomExecutionDTO {\n\t\treturn {\n\t\t\tcustomExecution: 'customExecution'\n\t\t};\n\t}\n\n\texport function to(taskId: string, providedCustomExeutions: Map<string, types.CustomExecution>): types.CustomExecution | undefined {\n\t\treturn providedCustomExeutions.get(taskId);\n\t}\n}\n\n\nexport namespace TaskHandleDTO {\n\texport function from(value: types.Task, workspaceService?: IExtHostWorkspace): tasks.ITaskHandleDTO {\n\t\tlet folder: UriComponents | string;\n\t\tif (value.scope !== undefined && typeof value.scope !== 'number') {\n\t\t\tfolder = value.scope.uri;\n\t\t} else if (value.scope !== undefined && typeof value.scope === 'number') {\n\t\t\tif ((value.scope === types.TaskScope.Workspace) && workspaceService && workspaceService.workspaceFile) {\n\t\t\t\tfolder = workspaceService.workspaceFile;\n\t\t\t} else {\n\t\t\t\tfolder = USER_TASKS_GROUP_KEY;\n\t\t\t}\n\t\t}\n\t\treturn {\n\t\t\tid: value._id!,\n\t\t\tworkspaceFolder: folder!\n\t\t};\n\t}\n}\nnamespace TaskGroupDTO {\n\texport function from(value: vscode.TaskGroup): tasks.ITaskGroupDTO | undefined {\n\t\tif (value === undefined || value === null) {\n\t\t\treturn undefined;\n\t\t}\n\t\treturn { _id: value.id, isDefault: value.isDefault };\n\t}\n}\n\nexport namespace TaskDTO {\n\texport function fromMany(tasks: vscode.Task[], extension: IExtensionDescription): tasks.ITaskDTO[] {\n\t\tif (tasks === undefined || tasks === null) {\n\t\t\treturn [];\n\t\t}\n\t\tconst result: tasks.ITaskDTO[] = [];\n\t\tfor (const task of tasks) {\n\t\t\tconst converted = from(task, extension);\n\t\t\tif (converted) {\n\t\t\t\tresult.push(converted);\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n\n\texport function from(value: vscode.Task, extension: IExtensionDescription): tasks.ITaskDTO | undefined {\n\t\tif (value === undefined || value === null) {\n\t\t\treturn undefined;\n\t\t}\n\t\tlet execution: tasks.IShellExecutionDTO | tasks.IProcessExecutionDTO | tasks.ICustomExecutionDTO | undefined;\n\t\tif (value.execution instanceof types.ProcessExecution) {\n\t\t\texecution = ProcessExecutionDTO.from(value.execution);\n\t\t} else if (value.execution instanceof types.ShellExecution) {\n\t\t\texecution = ShellExecutionDTO.from(value.execution);\n\t\t} else if (value.execution && value.execution instanceof types.CustomExecution) {\n\t\t\texecution = CustomExecutionDTO.from(<types.CustomExecution>value.execution);\n\t\t}\n\n\t\tconst definition: tasks.ITaskDefinitionDTO | undefined = TaskDefinitionDTO.from(value.definition);\n\t\tlet scope: number | UriComponents;\n\t\tif (value.scope) {\n\t\t\tif (typeof value.scope === 'number') {\n\t\t\t\tscope = value.scope;\n\t\t\t} else {\n\t\t\t\tscope = value.scope.uri;\n\t\t\t}\n\t\t} else {\n\t\t\t// To continue to support the deprecated task constructor that doesn't take a scope, we must add a scope here:\n\t\t\tscope = types.TaskScope.Workspace;\n\t\t}\n\t\tif (!definition || !scope) {\n\t\t\treturn undefined;\n\t\t}\n\t\tconst result: tasks.ITaskDTO = {\n\t\t\t_id: (value as types.Task)._id!,\n\t\t\tdefinition,\n\t\t\tname: value.name,\n\t\t\tsource: {\n\t\t\t\textensionId: extension.identifier.value,\n\t\t\t\tlabel: value.source,\n\t\t\t\tscope: scope\n\t\t\t},\n\t\t\texecution: execution!,\n\t\t\tisBackground: value.isBackground,\n\t\t\tgroup: TaskGroupDTO.from(value.group as vscode.TaskGroup),\n\t\t\tpresentationOptions: TaskPresentationOptionsDTO.from(value.presentationOptions),\n\t\t\tproblemMatchers: asArray(value.problemMatchers),\n\t\t\thasDefinedMatchers: (value as types.Task).hasDefinedMatchers,\n\t\t\trunOptions: value.runOptions ? value.runOptions : { reevaluateOnRerun: true },\n\t\t\tdetail: value.detail\n\t\t};\n\t\treturn result;\n\t}\n\texport async function to(value: tasks.ITaskDTO | undefined, workspace: IExtHostWorkspaceProvider, providedCustomExeutions: Map<string, types.CustomExecution>): Promise<types.Task | undefined> {\n\t\tif (value === undefined || value === null) {\n\t\t\treturn undefined;\n\t\t}\n\t\tlet execution: types.ShellExecution | types.ProcessExecution | types.CustomExecution | undefined;\n\t\tif (ProcessExecutionDTO.is(value.execution)) {\n\t\t\texecution = ProcessExecutionDTO.to(value.execution);\n\t\t} else if (ShellExecutionDTO.is(value.execution)) {\n\t\t\texecution = ShellExecutionDTO.to(value.execution);\n\t\t} else if (CustomExecutionDTO.is(value.execution)) {\n\t\t\texecution = CustomExecutionDTO.to(value._id, providedCustomExeutions);\n\t\t}\n\t\tconst definition: vscode.TaskDefinition | undefined = TaskDefinitionDTO.to(value.definition);\n\t\tlet scope: vscode.TaskScope.Global | vscode.TaskScope.Workspace | vscode.WorkspaceFolder | undefined;\n\t\tif (value.source) {\n\t\t\tif (value.source.scope !== undefined) {\n\t\t\t\tif (typeof value.source.scope === 'number') {\n\t\t\t\t\tscope = value.source.scope;\n\t\t\t\t} else {\n\t\t\t\t\tscope = await workspace.resolveWorkspaceFolder(URI.revive(value.source.scope));\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tscope = types.TaskScope.Workspace;\n\t\t\t}\n\t\t}\n\t\tif (!definition || !scope) {\n\t\t\treturn undefined;\n\t\t}\n\t\tconst result = new types.Task(definition, scope, value.name!, value.source.label, execution, value.problemMatchers);\n\t\tif (value.isBackground !== undefined) {\n\t\t\tresult.isBackground = value.isBackground;\n\t\t}\n\t\tif (value.group !== undefined) {\n\t\t\tresult.group = types.TaskGroup.from(value.group._id);\n\t\t\tif (result.group && value.group.isDefault) {\n\t\t\t\tresult.group = new types.TaskGroup(result.group.id, result.group.label);\n\t\t\t\tif (value.group.isDefault === true) {\n\t\t\t\t\tresult.group.isDefault = value.group.isDefault;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (value.presentationOptions) {\n\t\t\tresult.presentationOptions = TaskPresentationOptionsDTO.to(value.presentationOptions)!;\n\t\t}\n\t\tif (value._id) {\n\t\t\tresult._id = value._id;\n\t\t}\n\t\tif (value.detail) {\n\t\t\tresult.detail = value.detail;\n\t\t}\n\t\treturn result;\n\t}\n}\n\nnamespace TaskFilterDTO {\n\texport function from(value: vscode.TaskFilter | undefined): tasks.ITaskFilterDTO | undefined {\n\t\treturn value;\n\t}\n\n\texport function to(value: tasks.ITaskFilterDTO): vscode.TaskFilter | undefined {\n\t\tif (!value) {\n\t\t\treturn undefined;\n\t\t}\n\t\treturn Object.assign(Object.create(null), value);\n\t}\n}\n\nclass TaskExecutionImpl implements vscode.TaskExecution {\n\n\treadonly #tasks: ExtHostTaskBase;\n\n\tconstructor(tasks: ExtHostTaskBase, readonly _id: string, private readonly _task: vscode.Task) {\n\t\tthis.#tasks = tasks;\n\t}\n\n\tpublic get task(): vscode.Task {\n\t\treturn this._task;\n\t}\n\n\tpublic terminate(): void {\n\t\tthis.#tasks.terminateTask(this);\n\t}\n\n\tpublic fireDidStartProcess(value: tasks.ITaskProcessStartedDTO): void {\n\t}\n\n\tpublic fireDidEndProcess(value: tasks.ITaskProcessEndedDTO): void {\n\t}\n}\n\nexport interface HandlerData {\n\ttype: string;\n\tprovider: vscode.TaskProvider;\n\textension: IExtensionDescription;\n}\n\nexport abstract class ExtHostTaskBase implements ExtHostTaskShape, IExtHostTask {\n\treadonly _serviceBrand: undefined;\n\n\tprotected readonly _proxy: MainThreadTaskShape;\n\tprotected readonly _workspaceProvider: IExtHostWorkspaceProvider;\n\tprotected readonly _editorService: IExtHostDocumentsAndEditors;\n\tprotected readonly _configurationService: IExtHostConfiguration;\n\tprotected readonly _terminalService: IExtHostTerminalService;\n\tprotected readonly _logService: ILogService;\n\tprotected readonly _deprecationService: IExtHostApiDeprecationService;\n\tprotected _handleCounter: number;\n\tprotected _handlers: Map<number, HandlerData>;\n\tprotected _taskExecutions: Map<string, TaskExecutionImpl>;\n\tprotected _taskExecutionPromises: Map<string, Promise<TaskExecutionImpl>>;\n\tprotected _providedCustomExecutions2: Map<string, types.CustomExecution>;\n\tprivate _notProvidedCustomExecutions: Set<string>; // Used for custom executions tasks that are created and run through executeTask.\n\tprotected _activeCustomExecutions2: Map<string, types.CustomExecution>;\n\tprivate _lastStartedTask: string | undefined;\n\tprotected readonly _onDidExecuteTask: Emitter<vscode.TaskStartEvent> = new Emitter<vscode.TaskStartEvent>();\n\tprotected readonly _onDidTerminateTask: Emitter<vscode.TaskEndEvent> = new Emitter<vscode.TaskEndEvent>();\n\n\tprotected readonly _onDidTaskProcessStarted: Emitter<vscode.TaskProcessStartEvent> = new Emitter<vscode.TaskProcessStartEvent>();\n\tprotected readonly _onDidTaskProcessEnded: Emitter<vscode.TaskProcessEndEvent> = new Emitter<vscode.TaskProcessEndEvent>();\n\n\tconstructor(\n\t\t@IExtHostRpcService extHostRpc: IExtHostRpcService,\n\t\t@IExtHostInitDataService initData: IExtHostInitDataService,\n\t\t@IExtHostWorkspace workspaceService: IExtHostWorkspace,\n\t\t@IExtHostDocumentsAndEditors editorService: IExtHostDocumentsAndEditors,\n\t\t@IExtHostConfiguration configurationService: IExtHostConfiguration,\n\t\t@IExtHostTerminalService extHostTerminalService: IExtHostTerminalService,\n\t\t@ILogService logService: ILogService,\n\t\t@IExtHostApiDeprecationService deprecationService: IExtHostApiDeprecationService\n\t) {\n\t\tthis._proxy = extHostRpc.getProxy(MainContext.MainThreadTask);\n\t\tthis._workspaceProvider = workspaceService;\n\t\tthis._editorService = editorService;\n\t\tthis._configurationService = configurationService;\n\t\tthis._terminalService = extHostTerminalService;\n\t\tthis._handleCounter = 0;\n\t\tthis._handlers = new Map<number, HandlerData>();\n\t\tthis._taskExecutions = new Map<string, TaskExecutionImpl>();\n\t\tthis._taskExecutionPromises = new Map<string, Promise<TaskExecutionImpl>>();\n\t\tthis._providedCustomExecutions2 = new Map<string, types.CustomExecution>();\n\t\tthis._notProvidedCustomExecutions = new Set<string>();\n\t\tthis._activeCustomExecutions2 = new Map<string, types.CustomExecution>();\n\t\tthis._logService = logService;\n\t\tthis._deprecationService = deprecationService;\n\t\tthis._proxy.$registerSupportedExecutions(true);\n\t}\n\n\tpublic registerTaskProvider(extension: IExtensionDescription, type: string, provider: vscode.TaskProvider): vscode.Disposable {\n\t\tif (!provider) {\n\t\t\treturn new types.Disposable(() => { });\n\t\t}\n\t\tconst handle = this.nextHandle();\n\t\tthis._handlers.set(handle, { type, provider, extension });\n\t\tthis._proxy.$registerTaskProvider(handle, type);\n\t\treturn new types.Disposable(() => {\n\t\t\tthis._handlers.delete(handle);\n\t\t\tthis._proxy.$unregisterTaskProvider(handle);\n\t\t});\n\t}\n\n\tpublic registerTaskSystem(scheme: string, info: tasks.ITaskSystemInfoDTO): void {\n\t\tthis._proxy.$registerTaskSystem(scheme, info);\n\t}\n\n\tpublic fetchTasks(filter?: vscode.TaskFilter): Promise<vscode.Task[]> {\n\t\treturn this._proxy.$fetchTasks(TaskFilterDTO.from(filter)).then(async (values) => {\n\t\t\tconst result: vscode.Task[] = [];\n\t\t\tfor (const value of values) {\n\t\t\t\tconst task = await TaskDTO.to(value, this._workspaceProvider, this._providedCustomExecutions2);\n\t\t\t\tif (task) {\n\t\t\t\t\tresult.push(task);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn result;\n\t\t});\n\t}\n\n\tpublic abstract executeTask(extension: IExtensionDescription, task: vscode.Task): Promise<vscode.TaskExecution>;\n\n\tpublic get taskExecutions(): vscode.TaskExecution[] {\n\t\tconst result: vscode.TaskExecution[] = [];\n\t\tthis._taskExecutions.forEach(value => result.push(value));\n\t\treturn result;\n\t}\n\n\tpublic terminateTask(execution: vscode.TaskExecution): Promise<void> {\n\t\tif (!(execution instanceof TaskExecutionImpl)) {\n\t\t\tthrow new Error('No valid task execution provided');\n\t\t}\n\t\treturn this._proxy.$terminateTask((execution as TaskExecutionImpl)._id);\n\t}\n\n\tpublic get onDidStartTask(): Event<vscode.TaskStartEvent> {\n\t\treturn this._onDidExecuteTask.event;\n\t}\n\n\tpublic async $onDidStartTask(execution: tasks.ITaskExecutionDTO, terminalId: number, resolvedDefinition: tasks.ITaskDefinitionDTO): Promise<void> {\n\t\tconst customExecution: types.CustomExecution | undefined = this._providedCustomExecutions2.get(execution.id);\n\t\tif (customExecution) {\n\t\t\t// Clone the custom execution to keep the original untouched. This is important for multiple runs of the same task.\n\t\t\tthis._activeCustomExecutions2.set(execution.id, customExecution);\n\t\t\tthis._terminalService.attachPtyToTerminal(terminalId, await customExecution.callback(resolvedDefinition));\n\t\t}\n\t\tthis._lastStartedTask = execution.id;\n\n\t\tthis._onDidExecuteTask.fire({\n\t\t\texecution: await this.getTaskExecution(execution)\n\t\t});\n\t}\n\n\tpublic get onDidEndTask(): Event<vscode.TaskEndEvent> {\n\t\treturn this._onDidTerminateTask.event;\n\t}\n\n\tpublic async $OnDidEndTask(execution: tasks.ITaskExecutionDTO): Promise<void> {\n\t\tif (!this._taskExecutionPromises.has(execution.id)) {\n\t\t\t// Event already fired by the main thread\n\t\t\t// See https://github.com/microsoft/vscode/commit/aaf73920aeae171096d205efb2c58804a32b6846\n\t\t\treturn;\n\t\t}\n\t\tconst _execution = await this.getTaskExecution(execution);\n\t\tthis._taskExecutionPromises.delete(execution.id);\n\t\tthis._taskExecutions.delete(execution.id);\n\t\tthis.customExecutionComplete(execution);\n\t\tthis._onDidTerminateTask.fire({\n\t\t\texecution: _execution\n\t\t});\n\t}\n\n\tpublic get onDidStartTaskProcess(): Event<vscode.TaskProcessStartEvent> {\n\t\treturn this._onDidTaskProcessStarted.event;\n\t}\n\n\tpublic async $onDidStartTaskProcess(value: tasks.ITaskProcessStartedDTO): Promise<void> {\n\t\tconst execution = await this.getTaskExecution(value.id);\n\t\tthis._onDidTaskProcessStarted.fire({\n\t\t\texecution: execution,\n\t\t\tprocessId: value.processId\n\t\t});\n\t}\n\n\tpublic get onDidEndTaskProcess(): Event<vscode.TaskProcessEndEvent> {\n\t\treturn this._onDidTaskProcessEnded.event;\n\t}\n\n\tpublic async $onDidEndTaskProcess(value: tasks.ITaskProcessEndedDTO): Promise<void> {\n\t\tconst execution = await this.getTaskExecution(value.id);\n\t\tthis._onDidTaskProcessEnded.fire({\n\t\t\texecution: execution,\n\t\t\texitCode: value.exitCode\n\t\t});\n\t}\n\n\tprotected abstract provideTasksInternal(validTypes: { [key: string]: boolean }, taskIdPromises: Promise<void>[], handler: HandlerData, value: vscode.Task[] | null | undefined): { tasks: tasks.ITaskDTO[]; extension: IExtensionDescription };\n\n\tpublic $provideTasks(handle: number, validTypes: { [key: string]: boolean }): Promise<tasks.ITaskSetDTO> {\n\t\tconst handler = this._handlers.get(handle);\n\t\tif (!handler) {\n\t\t\treturn Promise.reject(new Error('no handler found'));\n\t\t}\n\n\t\t// Set up a list of task ID promises that we can wait on\n\t\t// before returning the provided tasks. The ensures that\n\t\t// our task IDs are calculated for any custom execution tasks.\n\t\t// Knowing this ID ahead of time is needed because when a task\n\t\t// start event is fired this is when the custom execution is called.\n\t\t// The task start event is also the first time we see the ID from the main\n\t\t// thread, which is too late for us because we need to save an map\n\t\t// from an ID to the custom execution function. (Kind of a cart before the horse problem).\n\t\tconst taskIdPromises: Promise<void>[] = [];\n\t\tconst fetchPromise = asPromise(() => handler.provider.provideTasks(CancellationToken.None)).then(value => {\n\t\t\treturn this.provideTasksInternal(validTypes, taskIdPromises, handler, value);\n\t\t});\n\n\t\treturn new Promise((resolve) => {\n\t\t\tfetchPromise.then((result) => {\n\t\t\t\tPromise.all(taskIdPromises).then(() => {\n\t\t\t\t\tresolve(result);\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t}\n\n\tprotected abstract resolveTaskInternal(resolvedTaskDTO: tasks.ITaskDTO): Promise<tasks.ITaskDTO | undefined>;\n\n\tpublic async $resolveTask(handle: number, taskDTO: tasks.ITaskDTO): Promise<tasks.ITaskDTO | undefined> {\n\t\tconst handler = this._handlers.get(handle);\n\t\tif (!handler) {\n\t\t\treturn Promise.reject(new Error('no handler found'));\n\t\t}\n\n\t\tif (taskDTO.definition.type !== handler.type) {\n\t\t\tthrow new Error(`Unexpected: Task of type [${taskDTO.definition.type}] cannot be resolved by provider of type [${handler.type}].`);\n\t\t}\n\n\t\tconst task = await TaskDTO.to(taskDTO, this._workspaceProvider, this._providedCustomExecutions2);\n\t\tif (!task) {\n\t\t\tthrow new Error('Unexpected: Task cannot be resolved.');\n\t\t}\n\n\t\tconst resolvedTask = await handler.provider.resolveTask(task, CancellationToken.None);\n\t\tif (!resolvedTask) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.checkDeprecation(resolvedTask, handler);\n\n\t\tconst resolvedTaskDTO: tasks.ITaskDTO | undefined = TaskDTO.from(resolvedTask, handler.extension);\n\t\tif (!resolvedTaskDTO) {\n\t\t\tthrow new Error('Unexpected: Task cannot be resolved.');\n\t\t}\n\n\t\tif (resolvedTask.definition !== task.definition) {\n\t\t\tthrow new Error('Unexpected: The resolved task definition must be the same object as the original task definition. The task definition cannot be changed.');\n\t\t}\n\n\t\tif (CustomExecutionDTO.is(resolvedTaskDTO.execution)) {\n\t\t\tawait this.addCustomExecution(resolvedTaskDTO, resolvedTask, true);\n\t\t}\n\n\t\treturn await this.resolveTaskInternal(resolvedTaskDTO);\n\t}\n\n\tpublic abstract $resolveVariables(uriComponents: UriComponents, toResolve: { process?: { name: string; cwd?: string; path?: string }; variables: string[] }): Promise<{ process?: string; variables: { [key: string]: string } }>;\n\n\tprivate nextHandle(): number {\n\t\treturn this._handleCounter++;\n\t}\n\n\tprotected async addCustomExecution(taskDTO: tasks.ITaskDTO, task: vscode.Task, isProvided: boolean): Promise<void> {\n\t\tconst taskId = await this._proxy.$createTaskId(taskDTO);\n\t\tif (!isProvided && !this._providedCustomExecutions2.has(taskId)) {\n\t\t\tthis._notProvidedCustomExecutions.add(taskId);\n\t\t\t// Also add to active executions when not coming from a provider to prevent timing issue.\n\t\t\tthis._activeCustomExecutions2.set(taskId, <types.CustomExecution>task.execution);\n\t\t}\n\t\tthis._providedCustomExecutions2.set(taskId, <types.CustomExecution>task.execution);\n\t}\n\n\tprotected async getTaskExecution(execution: tasks.ITaskExecutionDTO | string, task?: vscode.Task): Promise<TaskExecutionImpl> {\n\t\tif (typeof execution === 'string') {\n\t\t\tconst taskExecution = this._taskExecutionPromises.get(execution);\n\t\t\tif (!taskExecution) {\n\t\t\t\tthrow new ErrorNoTelemetry('Unexpected: The specified task is missing an execution');\n\t\t\t}\n\t\t\treturn taskExecution;\n\t\t}\n\n\t\tconst result: Promise<TaskExecutionImpl> | undefined = this._taskExecutionPromises.get(execution.id);\n\t\tif (result) {\n\t\t\treturn result;\n\t\t}\n\n\t\tlet executionPromise: Promise<TaskExecutionImpl>;\n\t\tif (!task) {\n\t\t\texecutionPromise = TaskDTO.to(execution.task, this._workspaceProvider, this._providedCustomExecutions2).then(t => {\n\t\t\t\tif (!t) {\n\t\t\t\t\tthrow new ErrorNoTelemetry('Unexpected: Task does not exist.');\n\t\t\t\t}\n\t\t\t\treturn new TaskExecutionImpl(this, execution.id, t);\n\t\t\t});\n\t\t} else {\n\t\t\texecutionPromise = Promise.resolve(new TaskExecutionImpl(this, execution.id, task));\n\t\t}\n\t\tthis._taskExecutionPromises.set(execution.id, executionPromise);\n\t\treturn executionPromise.then(taskExecution => {\n\t\t\tthis._taskExecutions.set(execution.id, taskExecution);\n\t\t\treturn taskExecution;\n\t\t});\n\t}\n\n\tprotected checkDeprecation(task: vscode.Task, handler: HandlerData) {\n\t\tconst tTask = (task as types.Task);\n\t\tif (tTask._deprecated) {\n\t\t\tthis._deprecationService.report('Task.constructor', handler.extension, 'Use the Task constructor that takes a `scope` instead.');\n\t\t}\n\t}\n\n\tprivate customExecutionComplete(execution: tasks.ITaskExecutionDTO): void {\n\t\tconst extensionCallback2: vscode.CustomExecution | undefined = this._activeCustomExecutions2.get(execution.id);\n\t\tif (extensionCallback2) {\n\t\t\tthis._activeCustomExecutions2.delete(execution.id);\n\t\t}\n\n\t\t// Technically we don't really need to do this, however, if an extension\n\t\t// is executing a task through \"executeTask\" over and over again\n\t\t// with different properties in the task definition, then the map of executions\n\t\t// could grow indefinitely, something we don't want.\n\t\tif (this._notProvidedCustomExecutions.has(execution.id) && (this._lastStartedTask !== execution.id)) {\n\t\t\tthis._providedCustomExecutions2.delete(execution.id);\n\t\t\tthis._notProvidedCustomExecutions.delete(execution.id);\n\t\t}\n\t\tconst iterator = this._notProvidedCustomExecutions.values();\n\t\tlet iteratorResult = iterator.next();\n\t\twhile (!iteratorResult.done) {\n\t\t\tif (!this._activeCustomExecutions2.has(iteratorResult.value) && (this._lastStartedTask !== iteratorResult.value)) {\n\t\t\t\tthis._providedCustomExecutions2.delete(iteratorResult.value);\n\t\t\t\tthis._notProvidedCustomExecutions.delete(iteratorResult.value);\n\t\t\t}\n\t\t\titeratorResult = iterator.next();\n\t\t}\n\t}\n\n\tpublic abstract $jsonTasksSupported(): Promise<boolean>;\n\n\tpublic abstract $findExecutable(command: string, cwd?: string | undefined, paths?: string[] | undefined): Promise<string | undefined>;\n}\n\nexport class WorkerExtHostTask extends ExtHostTaskBase {\n\tconstructor(\n\t\t@IExtHostRpcService extHostRpc: IExtHostRpcService,\n\t\t@IExtHostInitDataService initData: IExtHostInitDataService,\n\t\t@IExtHostWorkspace workspaceService: IExtHostWorkspace,\n\t\t@IExtHostDocumentsAndEditors editorService: IExtHostDocumentsAndEditors,\n\t\t@IExtHostConfiguration configurationService: IExtHostConfiguration,\n\t\t@IExtHostTerminalService extHostTerminalService: IExtHostTerminalService,\n\t\t@ILogService logService: ILogService,\n\t\t@IExtHostApiDeprecationService deprecationService: IExtHostApiDeprecationService\n\t) {\n\t\tsuper(extHostRpc, initData, workspaceService, editorService, configurationService, extHostTerminalService, logService, deprecationService);\n\t\tthis.registerTaskSystem(Schemas.vscodeRemote, {\n\t\t\tscheme: Schemas.vscodeRemote,\n\t\t\tauthority: '',\n\t\t\tplatform: Platform.PlatformToString(Platform.Platform.Web)\n\t\t});\n\t}\n\n\tpublic async executeTask(extension: IExtensionDescription, task: vscode.Task): Promise<vscode.TaskExecution> {\n\t\tif (!task.execution) {\n\t\t\tthrow new Error('Tasks to execute must include an execution');\n\t\t}\n\n\t\tconst dto = TaskDTO.from(task, extension);\n\t\tif (dto === undefined) {\n\t\t\tthrow new Error('Task is not valid');\n\t\t}\n\n\t\t// If this task is a custom execution, then we need to save it away\n\t\t// in the provided custom execution map that is cleaned up after the\n\t\t// task is executed.\n\t\tif (CustomExecutionDTO.is(dto.execution)) {\n\t\t\tawait this.addCustomExecution(dto, task, false);\n\t\t} else {\n\t\t\tthrow new NotSupportedError();\n\t\t}\n\n\t\t// Always get the task execution first to prevent timing issues when retrieving it later\n\t\tconst execution = await this.getTaskExecution(await this._proxy.$getTaskExecution(dto), task);\n\t\tthis._proxy.$executeTask(dto).catch(error => { throw new Error(error); });\n\t\treturn execution;\n\t}\n\n\tprotected provideTasksInternal(validTypes: { [key: string]: boolean }, taskIdPromises: Promise<void>[], handler: HandlerData, value: vscode.Task[] | null | undefined): { tasks: tasks.ITaskDTO[]; extension: IExtensionDescription } {\n\t\tconst taskDTOs: tasks.ITaskDTO[] = [];\n\t\tif (value) {\n\t\t\tfor (const task of value) {\n\t\t\t\tthis.checkDeprecation(task, handler);\n\t\t\t\tif (!task.definition || !validTypes[task.definition.type]) {\n\t\t\t\t\tconst source = task.source ? task.source : 'No task source';\n\t\t\t\t\tthis._logService.warn(`The task [${source}, ${task.name}] uses an undefined task type. The task will be ignored in the future.`);\n\t\t\t\t}\n\n\t\t\t\tconst taskDTO: tasks.ITaskDTO | undefined = TaskDTO.from(task, handler.extension);\n\t\t\t\tif (taskDTO && CustomExecutionDTO.is(taskDTO.execution)) {\n\t\t\t\t\ttaskDTOs.push(taskDTO);\n\t\t\t\t\t// The ID is calculated on the main thread task side, so, let's call into it here.\n\t\t\t\t\t// We need the task id's pre-computed for custom task executions because when OnDidStartTask\n\t\t\t\t\t// is invoked, we have to be able to map it back to our data.\n\t\t\t\t\ttaskIdPromises.push(this.addCustomExecution(taskDTO, task, true));\n\t\t\t\t} else {\n\t\t\t\t\tthis._logService.warn('Only custom execution tasks supported.');\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn {\n\t\t\ttasks: taskDTOs,\n\t\t\textension: handler.extension\n\t\t};\n\t}\n\n\tprotected async resolveTaskInternal(resolvedTaskDTO: tasks.ITaskDTO): Promise<tasks.ITaskDTO | undefined> {\n\t\tif (CustomExecutionDTO.is(resolvedTaskDTO.execution)) {\n\t\t\treturn resolvedTaskDTO;\n\t\t} else {\n\t\t\tthis._logService.warn('Only custom execution tasks supported.');\n\t\t}\n\t\treturn undefined;\n\t}\n\n\tpublic async $resolveVariables(uriComponents: UriComponents, toResolve: { process?: { name: string; cwd?: string; path?: string }; variables: string[] }): Promise<{ process?: string; variables: { [key: string]: string } }> {\n\t\tconst result = {\n\t\t\tprocess: <unknown>undefined as string,\n\t\t\tvariables: Object.create(null)\n\t\t};\n\t\treturn result;\n\t}\n\n\tpublic async $jsonTasksSupported(): Promise<boolean> {\n\t\treturn false;\n\t}\n\n\tpublic async $findExecutable(command: string, cwd?: string | undefined, paths?: string[] | undefined): Promise<string | undefined> {\n\t\treturn undefined;\n\t}\n}\n\nexport const IExtHostTask = createDecorator<IExtHostTask>('IExtHostTask');\n"],
  "mappings": "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",
  "names": ["TaskDefinitionDTO", "TaskPresentationOptionsDTO", "ProcessExecutionOptionsDTO", "ProcessExecutionDTO", "ShellExecutionOptionsDTO", "ShellExecutionDTO", "CustomExecutionDTO", "TaskHandleDTO", "TaskGroupDTO", "TaskDTO", "tasks", "TaskFilterDTO"]
}
