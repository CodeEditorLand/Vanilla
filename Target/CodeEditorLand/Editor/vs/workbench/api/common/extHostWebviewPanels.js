import{Emitter as c}from"../../../base/common/event.js";import{Disposable as p}from"../../../base/common/lifecycle.js";import{URI as P}from"../../../base/common/uri.js";import{generateUuid as W}from"../../../base/common/uuid.js";import*as w from"./extHostTypeConverters.js";import{serializeWebviewOptions as f,toExtensionData as m,shouldSerializeBuffersForPostMessage as b}from"./extHostWebview.js";import*as x from"./extHost.protocol.js";import*as g from"./extHostTypes.js";class H extends p{#e;#i;#l;#n;#v;#s;#r;#t=void 0;#d=!0;#a;#o=!1;#w=this._register(new c);onDidDispose=this.#w.event;#c=this._register(new c);onDidChangeViewState=this.#c.event;constructor(t,e,s,i){super(),this.#e=t,this.#i=e,this.#n=s,this.#l=i.viewType,this.#v=i.panelOptions,this.#t=i.viewColumn,this.#s=i.title,this.#a=i.active}dispose(){this.#o||(this.#o=!0,this.#w.fire(),this.#i.$disposeWebview(this.#e),this.#n.dispose(),super.dispose())}get webview(){return this.assertNotDisposed(),this.#n}get viewType(){return this.assertNotDisposed(),this.#l}get title(){return this.assertNotDisposed(),this.#s}set title(t){this.assertNotDisposed(),this.#s!==t&&(this.#s=t,this.#i.$setTitle(this.#e,t))}get iconPath(){return this.assertNotDisposed(),this.#r}set iconPath(t){this.assertNotDisposed(),this.#r!==t&&(this.#r=t,this.#i.$setIconPath(this.#e,P.isUri(t)?{light:t,dark:t}:t))}get options(){return this.#v}get viewColumn(){if(this.assertNotDisposed(),!(typeof this.#t=="number"&&this.#t<0))return this.#t}get active(){return this.assertNotDisposed(),this.#a}get visible(){return this.assertNotDisposed(),this.#d}_updateViewState(t){this.#o||(this.active!==t.active||this.visible!==t.visible||this.viewColumn!==t.viewColumn)&&(this.#a=t.active,this.#d=t.visible,this.#t=t.viewColumn,this.#c.fire({webviewPanel:this}))}reveal(t,e){this.assertNotDisposed(),this.#i.$reveal(this.#e,{viewColumn:typeof t>"u"?void 0:w.ViewColumn.from(t),preserveFocus:!!e})}assertNotDisposed(){if(this.#o)throw new Error("Webview is disposed")}}class h extends p{constructor(e,s,i){super();this.webviews=s;this.workspace=i;this._proxy=e.getProxy(x.MainContext.MainThreadWebviewPanels)}static newHandle(){return W()}_proxy;_webviewPanels=new Map;_serializers=new Map;dispose(){super.dispose(),this._webviewPanels.forEach(e=>e.dispose()),this._webviewPanels.clear()}createWebviewPanel(e,s,i,n,o={}){const r=typeof n=="object"?n.viewColumn:n,l={viewColumn:w.ViewColumn.from(r),preserveFocus:typeof n=="object"&&!!n.preserveFocus},a=b(e),v=h.newHandle();this._proxy.$createWebviewPanel(m(e),v,s,{title:i,panelOptions:C(o),webviewOptions:f(e,this.workspace,o),serializeBuffersForPostMessage:a},l);const u=this.webviews.createNewWebview(v,o,e);return this.createNewWebviewPanel(v,s,i,r,o,u,!0)}$onDidChangeWebviewPanelViewStates(e){const s=Object.keys(e);s.sort((i,n)=>{const o=e[i],r=e[n];return o.active?1:r.active?-1:+o.visible-+r.visible});for(const i of s){const n=this.getWebviewPanel(i);if(!n)continue;const o=e[i];n._updateViewState({active:o.active,visible:o.visible,viewColumn:w.ViewColumn.to(o.position)})}}async $onDidDisposeWebviewPanel(e){this.getWebviewPanel(e)?.dispose(),this._webviewPanels.delete(e),this.webviews.deleteWebview(e)}registerWebviewPanelSerializer(e,s,i){if(this._serializers.has(s))throw new Error(`Serializer for '${s}' already registered`);return this._serializers.set(s,{serializer:i,extension:e}),this._proxy.$registerSerializer(s,{serializeBuffersForPostMessage:b(e)}),new g.Disposable(()=>{this._serializers.delete(s),this._proxy.$unregisterSerializer(s)})}async $deserializeWebviewPanel(e,s,i,n){const o=this._serializers.get(s);if(!o)throw new Error(`No serializer found for '${s}'`);const{serializer:r,extension:l}=o,a=this.webviews.createNewWebview(e,i.webviewOptions,l),v=this.createNewWebviewPanel(e,s,i.title,n,i.panelOptions,a,i.active);await r.deserializeWebviewPanel(v,i.state)}createNewWebviewPanel(e,s,i,n,o,r,l){const a=new H(e,this._proxy,r,{viewType:s,title:i,viewColumn:n,panelOptions:o,active:l});return this._webviewPanels.set(e,a),a}getWebviewPanel(e){return this._webviewPanels.get(e)}}function C(d){return{enableFindWidget:d.enableFindWidget,retainContextWhenHidden:d.retainContextWhenHidden}}export{h as ExtHostWebviewPanels};
