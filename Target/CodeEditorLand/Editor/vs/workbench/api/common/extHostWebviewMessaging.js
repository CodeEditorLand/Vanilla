import{VSBuffer as A}from"../../../base/common/buffer.js";import*as r from"./extHost.protocol.js";class o{buffers=[];add(i){let s=this.buffers.indexOf(i);return s<0&&(s=this.buffers.length,this.buffers.push(i)),s}}function c(n,i){if(i.serializeBuffersForPostMessage){const s=new o,u=JSON.stringify(n,(a,e)=>{if(e instanceof ArrayBuffer)return{$$vscode_array_buffer_reference$$:!0,index:s.add(e)};if(ArrayBuffer.isView(e)){const f=b(e);if(f)return{$$vscode_array_buffer_reference$$:!0,index:s.add(e.buffer),view:{type:f,byteLength:e.byteLength,byteOffset:e.byteOffset}}}return e}),y=s.buffers.map(a=>{const e=new Uint8Array(a);return A.wrap(e)});return{message:u,buffers:y}}else return{message:JSON.stringify(n),buffers:[]}}function b(n){switch(n.constructor.name){case"Int8Array":return r.WebviewMessageArrayBufferViewType.Int8Array;case"Uint8Array":return r.WebviewMessageArrayBufferViewType.Uint8Array;case"Uint8ClampedArray":return r.WebviewMessageArrayBufferViewType.Uint8ClampedArray;case"Int16Array":return r.WebviewMessageArrayBufferViewType.Int16Array;case"Uint16Array":return r.WebviewMessageArrayBufferViewType.Uint16Array;case"Int32Array":return r.WebviewMessageArrayBufferViewType.Int32Array;case"Uint32Array":return r.WebviewMessageArrayBufferViewType.Uint32Array;case"Float32Array":return r.WebviewMessageArrayBufferViewType.Float32Array;case"Float64Array":return r.WebviewMessageArrayBufferViewType.Float64Array;case"BigInt64Array":return r.WebviewMessageArrayBufferViewType.BigInt64Array;case"BigUint64Array":return r.WebviewMessageArrayBufferViewType.BigUint64Array}}function B(n,i){const s=i.map(y=>{const a=new ArrayBuffer(y.byteLength);return new Uint8Array(a).set(y.buffer),a}),w=i.length?(y,a)=>{if(a&&typeof a=="object"&&a.$$vscode_array_buffer_reference$$){const e=a,{index:f}=e,t=s[f];if(e.view)switch(e.view.type){case r.WebviewMessageArrayBufferViewType.Int8Array:return new Int8Array(t,e.view.byteOffset,e.view.byteLength/Int8Array.BYTES_PER_ELEMENT);case r.WebviewMessageArrayBufferViewType.Uint8Array:return new Uint8Array(t,e.view.byteOffset,e.view.byteLength/Uint8Array.BYTES_PER_ELEMENT);case r.WebviewMessageArrayBufferViewType.Uint8ClampedArray:return new Uint8ClampedArray(t,e.view.byteOffset,e.view.byteLength/Uint8ClampedArray.BYTES_PER_ELEMENT);case r.WebviewMessageArrayBufferViewType.Int16Array:return new Int16Array(t,e.view.byteOffset,e.view.byteLength/Int16Array.BYTES_PER_ELEMENT);case r.WebviewMessageArrayBufferViewType.Uint16Array:return new Uint16Array(t,e.view.byteOffset,e.view.byteLength/Uint16Array.BYTES_PER_ELEMENT);case r.WebviewMessageArrayBufferViewType.Int32Array:return new Int32Array(t,e.view.byteOffset,e.view.byteLength/Int32Array.BYTES_PER_ELEMENT);case r.WebviewMessageArrayBufferViewType.Uint32Array:return new Uint32Array(t,e.view.byteOffset,e.view.byteLength/Uint32Array.BYTES_PER_ELEMENT);case r.WebviewMessageArrayBufferViewType.Float32Array:return new Float32Array(t,e.view.byteOffset,e.view.byteLength/Float32Array.BYTES_PER_ELEMENT);case r.WebviewMessageArrayBufferViewType.Float64Array:return new Float64Array(t,e.view.byteOffset,e.view.byteLength/Float64Array.BYTES_PER_ELEMENT);case r.WebviewMessageArrayBufferViewType.BigInt64Array:return new BigInt64Array(t,e.view.byteOffset,e.view.byteLength/BigInt64Array.BYTES_PER_ELEMENT);case r.WebviewMessageArrayBufferViewType.BigUint64Array:return new BigUint64Array(t,e.view.byteOffset,e.view.byteLength/BigUint64Array.BYTES_PER_ELEMENT);default:throw new Error("Unknown array buffer view type")}return t}return a}:void 0;return{message:JSON.parse(n,w),arrayBuffers:s}}export{B as deserializeWebviewMessage,c as serializeWebviewMessage};
