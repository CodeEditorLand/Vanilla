{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/api/common/extHostConfiguration.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { mixin, deepClone } from '../../../base/common/objects.js';\nimport { Event, Emitter } from '../../../base/common/event.js';\nimport type * as vscode from 'vscode';\nimport { ExtHostWorkspace, IExtHostWorkspace } from './extHostWorkspace.js';\nimport { ExtHostConfigurationShape, MainThreadConfigurationShape, IConfigurationInitData, MainContext } from './extHost.protocol.js';\nimport { ConfigurationTarget as ExtHostConfigurationTarget } from './extHostTypes.js';\nimport { ConfigurationTarget, IConfigurationChange, IConfigurationData, IConfigurationOverrides } from '../../../platform/configuration/common/configuration.js';\nimport { Configuration, ConfigurationChangeEvent } from '../../../platform/configuration/common/configurationModels.js';\nimport { ConfigurationScope, OVERRIDE_PROPERTY_REGEX } from '../../../platform/configuration/common/configurationRegistry.js';\nimport { isObject } from '../../../base/common/types.js';\nimport { ExtensionIdentifier, IExtensionDescription } from '../../../platform/extensions/common/extensions.js';\nimport { Barrier } from '../../../base/common/async.js';\nimport { createDecorator } from '../../../platform/instantiation/common/instantiation.js';\nimport { IExtHostRpcService } from './extHostRpcService.js';\nimport { ILogService } from '../../../platform/log/common/log.js';\nimport { Workspace } from '../../../platform/workspace/common/workspace.js';\nimport { URI } from '../../../base/common/uri.js';\n\nfunction lookUp(tree: any, key: string) {\n\tif (key) {\n\t\tconst parts = key.split('.');\n\t\tlet node = tree;\n\t\tfor (let i = 0; node && i < parts.length; i++) {\n\t\t\tnode = node[parts[i]];\n\t\t}\n\t\treturn node;\n\t}\n}\n\ntype ConfigurationInspect<T> = {\n\tkey: string;\n\n\tdefaultValue?: T;\n\tglobalValue?: T;\n\tworkspaceValue?: T;\n\tworkspaceFolderValue?: T;\n\n\tdefaultLanguageValue?: T;\n\tglobalLanguageValue?: T;\n\tworkspaceLanguageValue?: T;\n\tworkspaceFolderLanguageValue?: T;\n\n\tlanguageIds?: string[];\n};\n\nfunction isUri(thing: any): thing is vscode.Uri {\n\treturn thing instanceof URI;\n}\n\nfunction isResourceLanguage(thing: any): thing is { uri: URI; languageId: string } {\n\treturn thing\n\t\t&& thing.uri instanceof URI\n\t\t&& (thing.languageId && typeof thing.languageId === 'string');\n}\n\nfunction isLanguage(thing: any): thing is { languageId: string } {\n\treturn thing\n\t\t&& !thing.uri\n\t\t&& (thing.languageId && typeof thing.languageId === 'string');\n}\n\nfunction isWorkspaceFolder(thing: any): thing is vscode.WorkspaceFolder {\n\treturn thing\n\t\t&& thing.uri instanceof URI\n\t\t&& (!thing.name || typeof thing.name === 'string')\n\t\t&& (!thing.index || typeof thing.index === 'number');\n}\n\nfunction scopeToOverrides(scope: vscode.ConfigurationScope | undefined | null): IConfigurationOverrides | undefined {\n\tif (isUri(scope)) {\n\t\treturn { resource: scope };\n\t}\n\tif (isResourceLanguage(scope)) {\n\t\treturn { resource: scope.uri, overrideIdentifier: scope.languageId };\n\t}\n\tif (isLanguage(scope)) {\n\t\treturn { overrideIdentifier: scope.languageId };\n\t}\n\tif (isWorkspaceFolder(scope)) {\n\t\treturn { resource: scope.uri };\n\t}\n\tif (scope === null) {\n\t\treturn { resource: null };\n\t}\n\treturn undefined;\n}\n\nexport class ExtHostConfiguration implements ExtHostConfigurationShape {\n\n\treadonly _serviceBrand: undefined;\n\n\tprivate readonly _proxy: MainThreadConfigurationShape;\n\tprivate readonly _logService: ILogService;\n\tprivate readonly _extHostWorkspace: ExtHostWorkspace;\n\tprivate readonly _barrier: Barrier;\n\tprivate _actual: ExtHostConfigProvider | null;\n\n\tconstructor(\n\t\t@IExtHostRpcService extHostRpc: IExtHostRpcService,\n\t\t@IExtHostWorkspace extHostWorkspace: IExtHostWorkspace,\n\t\t@ILogService logService: ILogService,\n\t) {\n\t\tthis._proxy = extHostRpc.getProxy(MainContext.MainThreadConfiguration);\n\t\tthis._extHostWorkspace = extHostWorkspace;\n\t\tthis._logService = logService;\n\t\tthis._barrier = new Barrier();\n\t\tthis._actual = null;\n\t}\n\n\tpublic getConfigProvider(): Promise<ExtHostConfigProvider> {\n\t\treturn this._barrier.wait().then(_ => this._actual!);\n\t}\n\n\t$initializeConfiguration(data: IConfigurationInitData): void {\n\t\tthis._actual = new ExtHostConfigProvider(this._proxy, this._extHostWorkspace, data, this._logService);\n\t\tthis._barrier.open();\n\t}\n\n\t$acceptConfigurationChanged(data: IConfigurationInitData, change: IConfigurationChange): void {\n\t\tthis.getConfigProvider().then(provider => provider.$acceptConfigurationChanged(data, change));\n\t}\n}\n\nexport class ExtHostConfigProvider {\n\n\tprivate readonly _onDidChangeConfiguration = new Emitter<vscode.ConfigurationChangeEvent>();\n\tprivate readonly _proxy: MainThreadConfigurationShape;\n\tprivate readonly _extHostWorkspace: ExtHostWorkspace;\n\tprivate _configurationScopes: Map<string, ConfigurationScope | undefined>;\n\tprivate _configuration: Configuration;\n\tprivate _logService: ILogService;\n\n\tconstructor(proxy: MainThreadConfigurationShape, extHostWorkspace: ExtHostWorkspace, data: IConfigurationInitData, logService: ILogService) {\n\t\tthis._proxy = proxy;\n\t\tthis._logService = logService;\n\t\tthis._extHostWorkspace = extHostWorkspace;\n\t\tthis._configuration = Configuration.parse(data, logService);\n\t\tthis._configurationScopes = this._toMap(data.configurationScopes);\n\t}\n\n\tget onDidChangeConfiguration(): Event<vscode.ConfigurationChangeEvent> {\n\t\treturn this._onDidChangeConfiguration && this._onDidChangeConfiguration.event;\n\t}\n\n\t$acceptConfigurationChanged(data: IConfigurationInitData, change: IConfigurationChange) {\n\t\tconst previous = { data: this._configuration.toData(), workspace: this._extHostWorkspace.workspace };\n\t\tthis._configuration = Configuration.parse(data, this._logService);\n\t\tthis._configurationScopes = this._toMap(data.configurationScopes);\n\t\tthis._onDidChangeConfiguration.fire(this._toConfigurationChangeEvent(change, previous));\n\t}\n\n\tgetConfiguration(section?: string, scope?: vscode.ConfigurationScope | null, extensionDescription?: IExtensionDescription): vscode.WorkspaceConfiguration {\n\t\tconst overrides = scopeToOverrides(scope) || {};\n\t\tconst config = this._toReadonlyValue(section\n\t\t\t? lookUp(this._configuration.getValue(undefined, overrides, this._extHostWorkspace.workspace), section)\n\t\t\t: this._configuration.getValue(undefined, overrides, this._extHostWorkspace.workspace));\n\n\t\tif (section) {\n\t\t\tthis._validateConfigurationAccess(section, overrides, extensionDescription?.identifier);\n\t\t}\n\n\t\tfunction parseConfigurationTarget(arg: boolean | ExtHostConfigurationTarget): ConfigurationTarget | null {\n\t\t\tif (arg === undefined || arg === null) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\tif (typeof arg === 'boolean') {\n\t\t\t\treturn arg ? ConfigurationTarget.USER : ConfigurationTarget.WORKSPACE;\n\t\t\t}\n\n\t\t\tswitch (arg) {\n\t\t\t\tcase ExtHostConfigurationTarget.Global: return ConfigurationTarget.USER;\n\t\t\t\tcase ExtHostConfigurationTarget.Workspace: return ConfigurationTarget.WORKSPACE;\n\t\t\t\tcase ExtHostConfigurationTarget.WorkspaceFolder: return ConfigurationTarget.WORKSPACE_FOLDER;\n\t\t\t}\n\t\t}\n\n\t\tconst result: vscode.WorkspaceConfiguration = {\n\t\t\thas(key: string): boolean {\n\t\t\t\treturn typeof lookUp(config, key) !== 'undefined';\n\t\t\t},\n\t\t\tget: <T>(key: string, defaultValue?: T) => {\n\t\t\t\tthis._validateConfigurationAccess(section ? `${section}.${key}` : key, overrides, extensionDescription?.identifier);\n\t\t\t\tlet result = lookUp(config, key);\n\t\t\t\tif (typeof result === 'undefined') {\n\t\t\t\t\tresult = defaultValue;\n\t\t\t\t} else {\n\t\t\t\t\tlet clonedConfig: any | undefined = undefined;\n\t\t\t\t\tconst cloneOnWriteProxy = (target: any, accessor: string): any => {\n\t\t\t\t\t\tif (isObject(target)) {\n\t\t\t\t\t\t\tlet clonedTarget: any | undefined = undefined;\n\t\t\t\t\t\t\tconst cloneTarget = () => {\n\t\t\t\t\t\t\t\tclonedConfig = clonedConfig ? clonedConfig : deepClone(config);\n\t\t\t\t\t\t\t\tclonedTarget = clonedTarget ? clonedTarget : lookUp(clonedConfig, accessor);\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\treturn new Proxy(target, {\n\t\t\t\t\t\t\t\tget: (target: any, property: PropertyKey) => {\n\t\t\t\t\t\t\t\t\tif (typeof property === 'string' && property.toLowerCase() === 'tojson') {\n\t\t\t\t\t\t\t\t\t\tcloneTarget();\n\t\t\t\t\t\t\t\t\t\treturn () => clonedTarget;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tif (clonedConfig) {\n\t\t\t\t\t\t\t\t\t\tclonedTarget = clonedTarget ? clonedTarget : lookUp(clonedConfig, accessor);\n\t\t\t\t\t\t\t\t\t\treturn clonedTarget[property];\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tconst result = target[property];\n\t\t\t\t\t\t\t\t\tif (typeof property === 'string') {\n\t\t\t\t\t\t\t\t\t\treturn cloneOnWriteProxy(result, `${accessor}.${property}`);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\treturn result;\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tset: (_target: any, property: PropertyKey, value: any) => {\n\t\t\t\t\t\t\t\t\tcloneTarget();\n\t\t\t\t\t\t\t\t\tif (clonedTarget) {\n\t\t\t\t\t\t\t\t\t\tclonedTarget[property] = value;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tdeleteProperty: (_target: any, property: PropertyKey) => {\n\t\t\t\t\t\t\t\t\tcloneTarget();\n\t\t\t\t\t\t\t\t\tif (clonedTarget) {\n\t\t\t\t\t\t\t\t\t\tdelete clonedTarget[property];\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tdefineProperty: (_target: any, property: PropertyKey, descriptor: any) => {\n\t\t\t\t\t\t\t\t\tcloneTarget();\n\t\t\t\t\t\t\t\t\tif (clonedTarget) {\n\t\t\t\t\t\t\t\t\t\tObject.defineProperty(clonedTarget, property, descriptor);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (Array.isArray(target)) {\n\t\t\t\t\t\t\treturn deepClone(target);\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn target;\n\t\t\t\t\t};\n\t\t\t\t\tresult = cloneOnWriteProxy(result, key);\n\t\t\t\t}\n\t\t\t\treturn result;\n\t\t\t},\n\t\t\tupdate: (key: string, value: any, extHostConfigurationTarget: ExtHostConfigurationTarget | boolean, scopeToLanguage?: boolean) => {\n\t\t\t\tkey = section ? `${section}.${key}` : key;\n\t\t\t\tconst target = parseConfigurationTarget(extHostConfigurationTarget);\n\t\t\t\tif (value !== undefined) {\n\t\t\t\t\treturn this._proxy.$updateConfigurationOption(target, key, value, overrides, scopeToLanguage);\n\t\t\t\t} else {\n\t\t\t\t\treturn this._proxy.$removeConfigurationOption(target, key, overrides, scopeToLanguage);\n\t\t\t\t}\n\t\t\t},\n\t\t\tinspect: <T>(key: string): ConfigurationInspect<T> | undefined => {\n\t\t\t\tkey = section ? `${section}.${key}` : key;\n\t\t\t\tconst config = this._configuration.inspect<T>(key, overrides, this._extHostWorkspace.workspace);\n\t\t\t\tif (config) {\n\t\t\t\t\treturn {\n\t\t\t\t\t\tkey,\n\n\t\t\t\t\t\tdefaultValue: deepClone(config.policy?.value ?? config.default?.value),\n\t\t\t\t\t\tglobalValue: deepClone(config.user?.value ?? config.application?.value),\n\t\t\t\t\t\tworkspaceValue: deepClone(config.workspace?.value),\n\t\t\t\t\t\tworkspaceFolderValue: deepClone(config.workspaceFolder?.value),\n\n\t\t\t\t\t\tdefaultLanguageValue: deepClone(config.default?.override),\n\t\t\t\t\t\tglobalLanguageValue: deepClone(config.user?.override ?? config.application?.override),\n\t\t\t\t\t\tworkspaceLanguageValue: deepClone(config.workspace?.override),\n\t\t\t\t\t\tworkspaceFolderLanguageValue: deepClone(config.workspaceFolder?.override),\n\n\t\t\t\t\t\tlanguageIds: deepClone(config.overrideIdentifiers)\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t\treturn undefined;\n\t\t\t}\n\t\t};\n\n\t\tif (typeof config === 'object') {\n\t\t\tmixin(result, config, false);\n\t\t}\n\n\t\treturn Object.freeze(result);\n\t}\n\n\tprivate _toReadonlyValue(result: any): any {\n\t\tconst readonlyProxy = (target: any): any => {\n\t\t\treturn isObject(target) ?\n\t\t\t\tnew Proxy(target, {\n\t\t\t\t\tget: (target: any, property: PropertyKey) => readonlyProxy(target[property]),\n\t\t\t\t\tset: (_target: any, property: PropertyKey, _value: any) => { throw new Error(`TypeError: Cannot assign to read only property '${String(property)}' of object`); },\n\t\t\t\t\tdeleteProperty: (_target: any, property: PropertyKey) => { throw new Error(`TypeError: Cannot delete read only property '${String(property)}' of object`); },\n\t\t\t\t\tdefineProperty: (_target: any, property: PropertyKey) => { throw new Error(`TypeError: Cannot define property '${String(property)}' for a readonly object`); },\n\t\t\t\t\tsetPrototypeOf: (_target: any) => { throw new Error(`TypeError: Cannot set prototype for a readonly object`); },\n\t\t\t\t\tisExtensible: () => false,\n\t\t\t\t\tpreventExtensions: () => true\n\t\t\t\t}) : target;\n\t\t};\n\t\treturn readonlyProxy(result);\n\t}\n\n\tprivate _validateConfigurationAccess(key: string, overrides?: IConfigurationOverrides, extensionId?: ExtensionIdentifier): void {\n\t\tconst scope = OVERRIDE_PROPERTY_REGEX.test(key) ? ConfigurationScope.RESOURCE : this._configurationScopes.get(key);\n\t\tconst extensionIdText = extensionId ? `[${extensionId.value}] ` : '';\n\t\tif (ConfigurationScope.RESOURCE === scope) {\n\t\t\tif (typeof overrides?.resource === 'undefined') {\n\t\t\t\tthis._logService.warn(`${extensionIdText}Accessing a resource scoped configuration without providing a resource is not expected. To get the effective value for '${key}', provide the URI of a resource or 'null' for any resource.`);\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\t\tif (ConfigurationScope.WINDOW === scope) {\n\t\t\tif (overrides?.resource) {\n\t\t\t\tthis._logService.warn(`${extensionIdText}Accessing a window scoped configuration for a resource is not expected. To associate '${key}' to a resource, define its scope to 'resource' in configuration contributions in 'package.json'.`);\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\t}\n\n\tprivate _toConfigurationChangeEvent(change: IConfigurationChange, previous: { data: IConfigurationData; workspace: Workspace | undefined }): vscode.ConfigurationChangeEvent {\n\t\tconst event = new ConfigurationChangeEvent(change, previous, this._configuration, this._extHostWorkspace.workspace, this._logService);\n\t\treturn Object.freeze({\n\t\t\taffectsConfiguration: (section: string, scope?: vscode.ConfigurationScope) => event.affectsConfiguration(section, scopeToOverrides(scope))\n\t\t});\n\t}\n\n\tprivate _toMap(scopes: [string, ConfigurationScope | undefined][]): Map<string, ConfigurationScope | undefined> {\n\t\treturn scopes.reduce((result, scope) => { result.set(scope[0], scope[1]); return result; }, new Map<string, ConfigurationScope | undefined>());\n\t}\n\n}\n\nexport const IExtHostConfiguration = createDecorator<IExtHostConfiguration>('IExtHostConfiguration');\nexport interface IExtHostConfiguration extends ExtHostConfiguration { }\n"],
  "mappings": "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",
  "names": ["result", "target", "config"]
}
