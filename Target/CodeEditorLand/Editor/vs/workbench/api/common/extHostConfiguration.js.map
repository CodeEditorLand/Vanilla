{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/api/common/extHostConfiguration.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport type * as vscode from \"vscode\";\nimport { Barrier } from \"../../../base/common/async.js\";\nimport { Emitter, type Event } from \"../../../base/common/event.js\";\nimport { deepClone, mixin } from \"../../../base/common/objects.js\";\nimport { isObject } from \"../../../base/common/types.js\";\nimport { URI } from \"../../../base/common/uri.js\";\nimport {\n\tConfigurationTarget,\n\ttype IConfigurationChange,\n\ttype IConfigurationData,\n\ttype IConfigurationOverrides,\n} from \"../../../platform/configuration/common/configuration.js\";\nimport {\n\tConfiguration,\n\tConfigurationChangeEvent,\n} from \"../../../platform/configuration/common/configurationModels.js\";\nimport {\n\tConfigurationScope,\n\tOVERRIDE_PROPERTY_REGEX,\n} from \"../../../platform/configuration/common/configurationRegistry.js\";\nimport type {\n\tExtensionIdentifier,\n\tIExtensionDescription,\n} from \"../../../platform/extensions/common/extensions.js\";\nimport { createDecorator } from \"../../../platform/instantiation/common/instantiation.js\";\nimport { ILogService } from \"../../../platform/log/common/log.js\";\nimport type { Workspace } from \"../../../platform/workspace/common/workspace.js\";\nimport {\n\ttype ExtHostConfigurationShape,\n\ttype IConfigurationInitData,\n\tMainContext,\n\ttype MainThreadConfigurationShape,\n} from \"./extHost.protocol.js\";\nimport { IExtHostRpcService } from \"./extHostRpcService.js\";\nimport { ConfigurationTarget as ExtHostConfigurationTarget } from \"./extHostTypes.js\";\nimport {\n\ttype ExtHostWorkspace,\n\tIExtHostWorkspace,\n} from \"./extHostWorkspace.js\";\n\nfunction lookUp(tree: any, key: string) {\n\tif (key) {\n\t\tconst parts = key.split(\".\");\n\t\tlet node = tree;\n\t\tfor (let i = 0; node && i < parts.length; i++) {\n\t\t\tnode = node[parts[i]];\n\t\t}\n\t\treturn node;\n\t}\n}\n\ntype ConfigurationInspect<T> = {\n\tkey: string;\n\n\tdefaultValue?: T;\n\tglobalValue?: T;\n\tworkspaceValue?: T;\n\tworkspaceFolderValue?: T;\n\n\tdefaultLanguageValue?: T;\n\tglobalLanguageValue?: T;\n\tworkspaceLanguageValue?: T;\n\tworkspaceFolderLanguageValue?: T;\n\n\tlanguageIds?: string[];\n};\n\nfunction isUri(thing: any): thing is vscode.Uri {\n\treturn thing instanceof URI;\n}\n\nfunction isResourceLanguage(\n\tthing: any,\n): thing is { uri: URI; languageId: string } {\n\treturn (\n\t\tthing &&\n\t\tthing.uri instanceof URI &&\n\t\tthing.languageId &&\n\t\ttypeof thing.languageId === \"string\"\n\t);\n}\n\nfunction isLanguage(thing: any): thing is { languageId: string } {\n\treturn (\n\t\tthing &&\n\t\t!thing.uri &&\n\t\tthing.languageId &&\n\t\ttypeof thing.languageId === \"string\"\n\t);\n}\n\nfunction isWorkspaceFolder(thing: any): thing is vscode.WorkspaceFolder {\n\treturn (\n\t\tthing &&\n\t\tthing.uri instanceof URI &&\n\t\t(!thing.name || typeof thing.name === \"string\") &&\n\t\t(!thing.index || typeof thing.index === \"number\")\n\t);\n}\n\nfunction scopeToOverrides(\n\tscope: vscode.ConfigurationScope | undefined | null,\n): IConfigurationOverrides | undefined {\n\tif (isUri(scope)) {\n\t\treturn { resource: scope };\n\t}\n\tif (isResourceLanguage(scope)) {\n\t\treturn { resource: scope.uri, overrideIdentifier: scope.languageId };\n\t}\n\tif (isLanguage(scope)) {\n\t\treturn { overrideIdentifier: scope.languageId };\n\t}\n\tif (isWorkspaceFolder(scope)) {\n\t\treturn { resource: scope.uri };\n\t}\n\tif (scope === null) {\n\t\treturn { resource: null };\n\t}\n\treturn undefined;\n}\n\nexport class ExtHostConfiguration implements ExtHostConfigurationShape {\n\treadonly _serviceBrand: undefined;\n\n\tprivate readonly _proxy: MainThreadConfigurationShape;\n\tprivate readonly _logService: ILogService;\n\tprivate readonly _extHostWorkspace: ExtHostWorkspace;\n\tprivate readonly _barrier: Barrier;\n\tprivate _actual: ExtHostConfigProvider | null;\n\n\tconstructor(\n\t\t@IExtHostRpcService extHostRpc: IExtHostRpcService,\n\t\t@IExtHostWorkspace extHostWorkspace: IExtHostWorkspace,\n\t\t@ILogService logService: ILogService,\n\t) {\n\t\tthis._proxy = extHostRpc.getProxy(MainContext.MainThreadConfiguration);\n\t\tthis._extHostWorkspace = extHostWorkspace;\n\t\tthis._logService = logService;\n\t\tthis._barrier = new Barrier();\n\t\tthis._actual = null;\n\t}\n\n\tpublic getConfigProvider(): Promise<ExtHostConfigProvider> {\n\t\treturn this._barrier.wait().then((_) => this._actual!);\n\t}\n\n\t$initializeConfiguration(data: IConfigurationInitData): void {\n\t\tthis._actual = new ExtHostConfigProvider(\n\t\t\tthis._proxy,\n\t\t\tthis._extHostWorkspace,\n\t\t\tdata,\n\t\t\tthis._logService,\n\t\t);\n\t\tthis._barrier.open();\n\t}\n\n\t$acceptConfigurationChanged(\n\t\tdata: IConfigurationInitData,\n\t\tchange: IConfigurationChange,\n\t): void {\n\t\tthis.getConfigProvider().then((provider) =>\n\t\t\tprovider.$acceptConfigurationChanged(data, change),\n\t\t);\n\t}\n}\n\nexport class ExtHostConfigProvider {\n\tprivate readonly _onDidChangeConfiguration =\n\t\tnew Emitter<vscode.ConfigurationChangeEvent>();\n\tprivate readonly _proxy: MainThreadConfigurationShape;\n\tprivate readonly _extHostWorkspace: ExtHostWorkspace;\n\tprivate _configurationScopes: Map<string, ConfigurationScope | undefined>;\n\tprivate _configuration: Configuration;\n\tprivate _logService: ILogService;\n\n\tconstructor(\n\t\tproxy: MainThreadConfigurationShape,\n\t\textHostWorkspace: ExtHostWorkspace,\n\t\tdata: IConfigurationInitData,\n\t\tlogService: ILogService,\n\t) {\n\t\tthis._proxy = proxy;\n\t\tthis._logService = logService;\n\t\tthis._extHostWorkspace = extHostWorkspace;\n\t\tthis._configuration = Configuration.parse(data, logService);\n\t\tthis._configurationScopes = this._toMap(data.configurationScopes);\n\t}\n\n\tget onDidChangeConfiguration(): Event<vscode.ConfigurationChangeEvent> {\n\t\treturn (\n\t\t\tthis._onDidChangeConfiguration &&\n\t\t\tthis._onDidChangeConfiguration.event\n\t\t);\n\t}\n\n\t$acceptConfigurationChanged(\n\t\tdata: IConfigurationInitData,\n\t\tchange: IConfigurationChange,\n\t) {\n\t\tconst previous = {\n\t\t\tdata: this._configuration.toData(),\n\t\t\tworkspace: this._extHostWorkspace.workspace,\n\t\t};\n\t\tthis._configuration = Configuration.parse(data, this._logService);\n\t\tthis._configurationScopes = this._toMap(data.configurationScopes);\n\t\tthis._onDidChangeConfiguration.fire(\n\t\t\tthis._toConfigurationChangeEvent(change, previous),\n\t\t);\n\t}\n\n\tgetConfiguration(\n\t\tsection?: string,\n\t\tscope?: vscode.ConfigurationScope | null,\n\t\textensionDescription?: IExtensionDescription,\n\t): vscode.WorkspaceConfiguration {\n\t\tconst overrides = scopeToOverrides(scope) || {};\n\t\tconst config = this._toReadonlyValue(\n\t\t\tsection\n\t\t\t\t? lookUp(\n\t\t\t\t\t\tthis._configuration.getValue(\n\t\t\t\t\t\t\tundefined,\n\t\t\t\t\t\t\toverrides,\n\t\t\t\t\t\t\tthis._extHostWorkspace.workspace,\n\t\t\t\t\t\t),\n\t\t\t\t\t\tsection,\n\t\t\t\t\t)\n\t\t\t\t: this._configuration.getValue(\n\t\t\t\t\t\tundefined,\n\t\t\t\t\t\toverrides,\n\t\t\t\t\t\tthis._extHostWorkspace.workspace,\n\t\t\t\t\t),\n\t\t);\n\n\t\tif (section) {\n\t\t\tthis._validateConfigurationAccess(\n\t\t\t\tsection,\n\t\t\t\toverrides,\n\t\t\t\textensionDescription?.identifier,\n\t\t\t);\n\t\t}\n\n\t\tfunction parseConfigurationTarget(\n\t\t\targ: boolean | ExtHostConfigurationTarget,\n\t\t): ConfigurationTarget | null {\n\t\t\tif (arg === undefined || arg === null) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\tif (typeof arg === \"boolean\") {\n\t\t\t\treturn arg\n\t\t\t\t\t? ConfigurationTarget.USER\n\t\t\t\t\t: ConfigurationTarget.WORKSPACE;\n\t\t\t}\n\n\t\t\tswitch (arg) {\n\t\t\t\tcase ExtHostConfigurationTarget.Global:\n\t\t\t\t\treturn ConfigurationTarget.USER;\n\t\t\t\tcase ExtHostConfigurationTarget.Workspace:\n\t\t\t\t\treturn ConfigurationTarget.WORKSPACE;\n\t\t\t\tcase ExtHostConfigurationTarget.WorkspaceFolder:\n\t\t\t\t\treturn ConfigurationTarget.WORKSPACE_FOLDER;\n\t\t\t}\n\t\t}\n\n\t\tconst result: vscode.WorkspaceConfiguration = {\n\t\t\thas(key: string): boolean {\n\t\t\t\treturn typeof lookUp(config, key) !== \"undefined\";\n\t\t\t},\n\t\t\tget: <T>(key: string, defaultValue?: T) => {\n\t\t\t\tthis._validateConfigurationAccess(\n\t\t\t\t\tsection ? `${section}.${key}` : key,\n\t\t\t\t\toverrides,\n\t\t\t\t\textensionDescription?.identifier,\n\t\t\t\t);\n\t\t\t\tlet result = lookUp(config, key);\n\t\t\t\tif (typeof result === \"undefined\") {\n\t\t\t\t\tresult = defaultValue;\n\t\t\t\t} else {\n\t\t\t\t\tlet clonedConfig: any | undefined;\n\t\t\t\t\tconst cloneOnWriteProxy = (\n\t\t\t\t\t\ttarget: any,\n\t\t\t\t\t\taccessor: string,\n\t\t\t\t\t): any => {\n\t\t\t\t\t\tif (isObject(target)) {\n\t\t\t\t\t\t\tlet clonedTarget: any | undefined;\n\t\t\t\t\t\t\tconst cloneTarget = () => {\n\t\t\t\t\t\t\t\tclonedConfig = clonedConfig\n\t\t\t\t\t\t\t\t\t? clonedConfig\n\t\t\t\t\t\t\t\t\t: deepClone(config);\n\t\t\t\t\t\t\t\tclonedTarget = clonedTarget\n\t\t\t\t\t\t\t\t\t? clonedTarget\n\t\t\t\t\t\t\t\t\t: lookUp(clonedConfig, accessor);\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\treturn new Proxy(target, {\n\t\t\t\t\t\t\t\tget: (target: any, property: PropertyKey) => {\n\t\t\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\t\t\ttypeof property === \"string\" &&\n\t\t\t\t\t\t\t\t\t\tproperty.toLowerCase() === \"tojson\"\n\t\t\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\t\t\tcloneTarget();\n\t\t\t\t\t\t\t\t\t\treturn () => clonedTarget;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tif (clonedConfig) {\n\t\t\t\t\t\t\t\t\t\tclonedTarget = clonedTarget\n\t\t\t\t\t\t\t\t\t\t\t? clonedTarget\n\t\t\t\t\t\t\t\t\t\t\t: lookUp(clonedConfig, accessor);\n\t\t\t\t\t\t\t\t\t\treturn clonedTarget[property];\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tconst result = target[property];\n\t\t\t\t\t\t\t\t\tif (typeof property === \"string\") {\n\t\t\t\t\t\t\t\t\t\treturn cloneOnWriteProxy(\n\t\t\t\t\t\t\t\t\t\t\tresult,\n\t\t\t\t\t\t\t\t\t\t\t`${accessor}.${property}`,\n\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\treturn result;\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tset: (\n\t\t\t\t\t\t\t\t\t_target: any,\n\t\t\t\t\t\t\t\t\tproperty: PropertyKey,\n\t\t\t\t\t\t\t\t\tvalue: any,\n\t\t\t\t\t\t\t\t) => {\n\t\t\t\t\t\t\t\t\tcloneTarget();\n\t\t\t\t\t\t\t\t\tif (clonedTarget) {\n\t\t\t\t\t\t\t\t\t\tclonedTarget[property] = value;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tdeleteProperty: (\n\t\t\t\t\t\t\t\t\t_target: any,\n\t\t\t\t\t\t\t\t\tproperty: PropertyKey,\n\t\t\t\t\t\t\t\t) => {\n\t\t\t\t\t\t\t\t\tcloneTarget();\n\t\t\t\t\t\t\t\t\tif (clonedTarget) {\n\t\t\t\t\t\t\t\t\t\tdelete clonedTarget[property];\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tdefineProperty: (\n\t\t\t\t\t\t\t\t\t_target: any,\n\t\t\t\t\t\t\t\t\tproperty: PropertyKey,\n\t\t\t\t\t\t\t\t\tdescriptor: any,\n\t\t\t\t\t\t\t\t) => {\n\t\t\t\t\t\t\t\t\tcloneTarget();\n\t\t\t\t\t\t\t\t\tif (clonedTarget) {\n\t\t\t\t\t\t\t\t\t\tObject.defineProperty(\n\t\t\t\t\t\t\t\t\t\t\tclonedTarget,\n\t\t\t\t\t\t\t\t\t\t\tproperty,\n\t\t\t\t\t\t\t\t\t\t\tdescriptor,\n\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (Array.isArray(target)) {\n\t\t\t\t\t\t\treturn deepClone(target);\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn target;\n\t\t\t\t\t};\n\t\t\t\t\tresult = cloneOnWriteProxy(result, key);\n\t\t\t\t}\n\t\t\t\treturn result;\n\t\t\t},\n\t\t\tupdate: (\n\t\t\t\tkey: string,\n\t\t\t\tvalue: any,\n\t\t\t\textHostConfigurationTarget:\n\t\t\t\t\t| ExtHostConfigurationTarget\n\t\t\t\t\t| boolean,\n\t\t\t\tscopeToLanguage?: boolean,\n\t\t\t) => {\n\t\t\t\tkey = section ? `${section}.${key}` : key;\n\t\t\t\tconst target = parseConfigurationTarget(\n\t\t\t\t\textHostConfigurationTarget,\n\t\t\t\t);\n\t\t\t\tif (value !== undefined) {\n\t\t\t\t\treturn this._proxy.$updateConfigurationOption(\n\t\t\t\t\t\ttarget,\n\t\t\t\t\t\tkey,\n\t\t\t\t\t\tvalue,\n\t\t\t\t\t\toverrides,\n\t\t\t\t\t\tscopeToLanguage,\n\t\t\t\t\t);\n\t\t\t\t} else {\n\t\t\t\t\treturn this._proxy.$removeConfigurationOption(\n\t\t\t\t\t\ttarget,\n\t\t\t\t\t\tkey,\n\t\t\t\t\t\toverrides,\n\t\t\t\t\t\tscopeToLanguage,\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t},\n\t\t\tinspect: <T>(key: string): ConfigurationInspect<T> | undefined => {\n\t\t\t\tkey = section ? `${section}.${key}` : key;\n\t\t\t\tconst config = this._configuration.inspect<T>(\n\t\t\t\t\tkey,\n\t\t\t\t\toverrides,\n\t\t\t\t\tthis._extHostWorkspace.workspace,\n\t\t\t\t);\n\t\t\t\tif (config) {\n\t\t\t\t\treturn {\n\t\t\t\t\t\tkey,\n\n\t\t\t\t\t\tdefaultValue: deepClone(\n\t\t\t\t\t\t\tconfig.policy?.value ?? config.default?.value,\n\t\t\t\t\t\t),\n\t\t\t\t\t\tglobalValue: deepClone(\n\t\t\t\t\t\t\tconfig.user?.value ?? config.application?.value,\n\t\t\t\t\t\t),\n\t\t\t\t\t\tworkspaceValue: deepClone(config.workspace?.value),\n\t\t\t\t\t\tworkspaceFolderValue: deepClone(\n\t\t\t\t\t\t\tconfig.workspaceFolder?.value,\n\t\t\t\t\t\t),\n\n\t\t\t\t\t\tdefaultLanguageValue: deepClone(\n\t\t\t\t\t\t\tconfig.default?.override,\n\t\t\t\t\t\t),\n\t\t\t\t\t\tglobalLanguageValue: deepClone(\n\t\t\t\t\t\t\tconfig.user?.override ??\n\t\t\t\t\t\t\t\tconfig.application?.override,\n\t\t\t\t\t\t),\n\t\t\t\t\t\tworkspaceLanguageValue: deepClone(\n\t\t\t\t\t\t\tconfig.workspace?.override,\n\t\t\t\t\t\t),\n\t\t\t\t\t\tworkspaceFolderLanguageValue: deepClone(\n\t\t\t\t\t\t\tconfig.workspaceFolder?.override,\n\t\t\t\t\t\t),\n\n\t\t\t\t\t\tlanguageIds: deepClone(config.overrideIdentifiers),\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t\treturn undefined;\n\t\t\t},\n\t\t};\n\n\t\tif (typeof config === \"object\") {\n\t\t\tmixin(result, config, false);\n\t\t}\n\n\t\treturn Object.freeze(result);\n\t}\n\n\tprivate _toReadonlyValue(result: any): any {\n\t\tconst readonlyProxy = (target: any): any => {\n\t\t\treturn isObject(target)\n\t\t\t\t? new Proxy(target, {\n\t\t\t\t\t\tget: (target: any, property: PropertyKey) =>\n\t\t\t\t\t\t\treadonlyProxy(target[property]),\n\t\t\t\t\t\tset: (\n\t\t\t\t\t\t\t_target: any,\n\t\t\t\t\t\t\tproperty: PropertyKey,\n\t\t\t\t\t\t\t_value: any,\n\t\t\t\t\t\t) => {\n\t\t\t\t\t\t\tthrow new Error(\n\t\t\t\t\t\t\t\t`TypeError: Cannot assign to read only property '${String(property)}' of object`,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t},\n\t\t\t\t\t\tdeleteProperty: (\n\t\t\t\t\t\t\t_target: any,\n\t\t\t\t\t\t\tproperty: PropertyKey,\n\t\t\t\t\t\t) => {\n\t\t\t\t\t\t\tthrow new Error(\n\t\t\t\t\t\t\t\t`TypeError: Cannot delete read only property '${String(property)}' of object`,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t},\n\t\t\t\t\t\tdefineProperty: (\n\t\t\t\t\t\t\t_target: any,\n\t\t\t\t\t\t\tproperty: PropertyKey,\n\t\t\t\t\t\t) => {\n\t\t\t\t\t\t\tthrow new Error(\n\t\t\t\t\t\t\t\t`TypeError: Cannot define property '${String(property)}' for a readonly object`,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t},\n\t\t\t\t\t\tsetPrototypeOf: (_target: any) => {\n\t\t\t\t\t\t\tthrow new Error(\n\t\t\t\t\t\t\t\t`TypeError: Cannot set prototype for a readonly object`,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t},\n\t\t\t\t\t\tisExtensible: () => false,\n\t\t\t\t\t\tpreventExtensions: () => true,\n\t\t\t\t\t})\n\t\t\t\t: target;\n\t\t};\n\t\treturn readonlyProxy(result);\n\t}\n\n\tprivate _validateConfigurationAccess(\n\t\tkey: string,\n\t\toverrides?: IConfigurationOverrides,\n\t\textensionId?: ExtensionIdentifier,\n\t): void {\n\t\tconst scope = OVERRIDE_PROPERTY_REGEX.test(key)\n\t\t\t? ConfigurationScope.RESOURCE\n\t\t\t: this._configurationScopes.get(key);\n\t\tconst extensionIdText = extensionId ? `[${extensionId.value}] ` : \"\";\n\t\tif (ConfigurationScope.RESOURCE === scope) {\n\t\t\tif (typeof overrides?.resource === \"undefined\") {\n\t\t\t\tthis._logService.warn(\n\t\t\t\t\t`${extensionIdText}Accessing a resource scoped configuration without providing a resource is not expected. To get the effective value for '${key}', provide the URI of a resource or 'null' for any resource.`,\n\t\t\t\t);\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\t\tif (ConfigurationScope.WINDOW === scope) {\n\t\t\tif (overrides?.resource) {\n\t\t\t\tthis._logService.warn(\n\t\t\t\t\t`${extensionIdText}Accessing a window scoped configuration for a resource is not expected. To associate '${key}' to a resource, define its scope to 'resource' in configuration contributions in 'package.json'.`,\n\t\t\t\t);\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\t}\n\n\tprivate _toConfigurationChangeEvent(\n\t\tchange: IConfigurationChange,\n\t\tprevious: {\n\t\t\tdata: IConfigurationData;\n\t\t\tworkspace: Workspace | undefined;\n\t\t},\n\t): vscode.ConfigurationChangeEvent {\n\t\tconst event = new ConfigurationChangeEvent(\n\t\t\tchange,\n\t\t\tprevious,\n\t\t\tthis._configuration,\n\t\t\tthis._extHostWorkspace.workspace,\n\t\t\tthis._logService,\n\t\t);\n\t\treturn Object.freeze({\n\t\t\taffectsConfiguration: (\n\t\t\t\tsection: string,\n\t\t\t\tscope?: vscode.ConfigurationScope,\n\t\t\t) => event.affectsConfiguration(section, scopeToOverrides(scope)),\n\t\t});\n\t}\n\n\tprivate _toMap(\n\t\tscopes: [string, ConfigurationScope | undefined][],\n\t): Map<string, ConfigurationScope | undefined> {\n\t\treturn scopes.reduce((result, scope) => {\n\t\t\tresult.set(scope[0], scope[1]);\n\t\t\treturn result;\n\t\t}, new Map<string, ConfigurationScope | undefined>());\n\t}\n}\n\nexport const IExtHostConfiguration = createDecorator<IExtHostConfiguration>(\n\t\"IExtHostConfiguration\",\n);\nexport interface IExtHostConfiguration extends ExtHostConfiguration {}\n"],
  "mappings": "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",
  "names": ["result", "target", "config"]
}
