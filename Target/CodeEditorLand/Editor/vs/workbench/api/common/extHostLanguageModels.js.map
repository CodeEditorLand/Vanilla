{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/api/common/extHostLanguageModels.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport type * as vscode from \"vscode\";\nimport {\n\tAsyncIterableObject,\n\tAsyncIterableSource,\n} from \"../../../base/common/async.js\";\nimport { CancellationToken } from \"../../../base/common/cancellation.js\";\nimport { toErrorMessage } from \"../../../base/common/errorMessage.js\";\nimport {\n\tCancellationError,\n\ttype SerializedError,\n\ttransformErrorForSerialization,\n\ttransformErrorFromSerialization,\n} from \"../../../base/common/errors.js\";\nimport { Emitter, Event } from \"../../../base/common/event.js\";\nimport { Iterable } from \"../../../base/common/iterator.js\";\nimport {\n\ttype IDisposable,\n\ttoDisposable,\n} from \"../../../base/common/lifecycle.js\";\nimport { localize } from \"../../../nls.js\";\nimport {\n\tExtensionIdentifier,\n\tExtensionIdentifierMap,\n\tExtensionIdentifierSet,\n\ttype IExtensionDescription,\n} from \"../../../platform/extensions/common/extensions.js\";\nimport { createDecorator } from \"../../../platform/instantiation/common/instantiation.js\";\nimport { ILogService } from \"../../../platform/log/common/log.js\";\nimport { Progress } from \"../../../platform/progress/common/progress.js\";\nimport type {\n\tIChatMessage,\n\tIChatResponseFragment,\n\tIChatResponsePart,\n\tILanguageModelChatMetadata,\n} from \"../../contrib/chat/common/languageModels.js\";\nimport { INTERNAL_AUTH_PROVIDER_PREFIX } from \"../../services/authentication/common/authentication.js\";\nimport { checkProposedApiEnabled } from \"../../services/extensions/common/extensions.js\";\nimport {\n\ttype ExtHostLanguageModelsShape,\n\tMainContext,\n\ttype MainThreadLanguageModelsShape,\n} from \"./extHost.protocol.js\";\nimport { IExtHostAuthentication } from \"./extHostAuthentication.js\";\nimport { IExtHostRpcService } from \"./extHostRpcService.js\";\nimport * as typeConvert from \"./extHostTypeConverters.js\";\nimport * as extHostTypes from \"./extHostTypes.js\";\n\nexport interface IExtHostLanguageModels extends ExtHostLanguageModels {}\n\nexport const IExtHostLanguageModels = createDecorator<IExtHostLanguageModels>(\n\t\"IExtHostLanguageModels\",\n);\n\ntype LanguageModelData = {\n\treadonly languageModelId: string;\n\treadonly extension: ExtensionIdentifier;\n\treadonly provider: vscode.ChatResponseProvider;\n};\n\nclass LanguageModelResponseStream {\n\treadonly stream = new AsyncIterableSource<\n\t\t| vscode.LanguageModelChatResponseTextPart\n\t\t| vscode.LanguageModelChatResponseToolCallPart\n\t>();\n\n\tconstructor(\n\t\treadonly option: number,\n\t\tstream?: AsyncIterableSource<\n\t\t\t| vscode.LanguageModelChatResponseTextPart\n\t\t\t| vscode.LanguageModelChatResponseToolCallPart\n\t\t>,\n\t) {\n\t\tthis.stream =\n\t\t\tstream ??\n\t\t\tnew AsyncIterableSource<\n\t\t\t\t| vscode.LanguageModelChatResponseTextPart\n\t\t\t\t| vscode.LanguageModelChatResponseToolCallPart\n\t\t\t>();\n\t}\n}\n\nclass LanguageModelResponse {\n\treadonly apiObject: vscode.LanguageModelChatResponse;\n\n\tprivate readonly _responseStreams = new Map<\n\t\tnumber,\n\t\tLanguageModelResponseStream\n\t>();\n\tprivate readonly _defaultStream = new AsyncIterableSource<\n\t\t| vscode.LanguageModelChatResponseTextPart\n\t\t| vscode.LanguageModelChatResponseToolCallPart\n\t>();\n\tprivate _isDone = false;\n\n\tconstructor() {\n\t\tconst that = this;\n\t\tthis.apiObject = {\n\t\t\t// result: promise,\n\t\t\tget stream() {\n\t\t\t\treturn that._defaultStream.asyncIterable;\n\t\t\t},\n\t\t\tget text() {\n\t\t\t\treturn AsyncIterableObject.map(\n\t\t\t\t\tthat._defaultStream.asyncIterable,\n\t\t\t\t\t(part) => {\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\tpart instanceof extHostTypes.LanguageModelTextPart\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\treturn part.value;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\treturn undefined;\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t).coalesce();\n\t\t\t},\n\t\t};\n\t}\n\n\tprivate *_streams() {\n\t\tif (this._responseStreams.size > 0) {\n\t\t\tfor (const [, value] of this._responseStreams) {\n\t\t\t\tyield value.stream;\n\t\t\t}\n\t\t} else {\n\t\t\tyield this._defaultStream;\n\t\t}\n\t}\n\n\thandleFragment(fragment: IChatResponseFragment): void {\n\t\tif (this._isDone) {\n\t\t\treturn;\n\t\t}\n\t\tlet res = this._responseStreams.get(fragment.index);\n\t\tif (!res) {\n\t\t\tif (this._responseStreams.size === 0) {\n\t\t\t\t// the first response claims the default response\n\t\t\t\tres = new LanguageModelResponseStream(\n\t\t\t\t\tfragment.index,\n\t\t\t\t\tthis._defaultStream,\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\tres = new LanguageModelResponseStream(fragment.index);\n\t\t\t}\n\t\t\tthis._responseStreams.set(fragment.index, res);\n\t\t}\n\n\t\tlet out:\n\t\t\t| vscode.LanguageModelChatResponseTextPart\n\t\t\t| vscode.LanguageModelChatResponseToolCallPart;\n\t\tif (fragment.part.type === \"text\") {\n\t\t\tout = new extHostTypes.LanguageModelTextPart(fragment.part.value);\n\t\t} else {\n\t\t\tout = new extHostTypes.LanguageModelToolCallPart(\n\t\t\t\tfragment.part.name,\n\t\t\t\tfragment.part.toolCallId,\n\t\t\t\tfragment.part.parameters,\n\t\t\t);\n\t\t}\n\t\tres.stream.emitOne(out);\n\t}\n\n\treject(err: Error): void {\n\t\tthis._isDone = true;\n\t\tfor (const stream of this._streams()) {\n\t\t\tstream.reject(err);\n\t\t}\n\t}\n\n\tresolve(): void {\n\t\tthis._isDone = true;\n\t\tfor (const stream of this._streams()) {\n\t\t\tstream.resolve();\n\t\t}\n\t}\n}\n\nexport class ExtHostLanguageModels implements ExtHostLanguageModelsShape {\n\tdeclare _serviceBrand: undefined;\n\n\tprivate static _idPool = 1;\n\n\tprivate readonly _proxy: MainThreadLanguageModelsShape;\n\tprivate readonly _onDidChangeModelAccess = new Emitter<{\n\t\tfrom: ExtensionIdentifier;\n\t\tto: ExtensionIdentifier;\n\t}>();\n\tprivate readonly _onDidChangeProviders = new Emitter<void>();\n\treadonly onDidChangeProviders = this._onDidChangeProviders.event;\n\n\tprivate readonly _languageModels = new Map<number, LanguageModelData>();\n\tprivate readonly _allLanguageModelData = new Map<\n\t\tstring,\n\t\t{\n\t\t\tmetadata: ILanguageModelChatMetadata;\n\t\t\tapiObjects: ExtensionIdentifierMap<vscode.LanguageModelChat>;\n\t\t}\n\t>(); // these are ALL models, not just the one in this EH\n\tprivate readonly _modelAccessList =\n\t\tnew ExtensionIdentifierMap<ExtensionIdentifierSet>();\n\tprivate readonly _pendingRequest = new Map<\n\t\tnumber,\n\t\t{ languageModelId: string; res: LanguageModelResponse }\n\t>();\n\n\tconstructor(\n\t\t@IExtHostRpcService extHostRpc: IExtHostRpcService,\n\t\t@ILogService private readonly _logService: ILogService,\n\t\t@IExtHostAuthentication private readonly _extHostAuthentication: IExtHostAuthentication,\n\t) {\n\t\tthis._proxy = extHostRpc.getProxy(MainContext.MainThreadLanguageModels);\n\t}\n\n\tdispose(): void {\n\t\tthis._onDidChangeModelAccess.dispose();\n\t\tthis._onDidChangeProviders.dispose();\n\t}\n\n\tregisterLanguageModel(\n\t\textension: IExtensionDescription,\n\t\tidentifier: string,\n\t\tprovider: vscode.ChatResponseProvider,\n\t\tmetadata: vscode.ChatResponseProviderMetadata,\n\t): IDisposable {\n\t\tconst handle = ExtHostLanguageModels._idPool++;\n\t\tthis._languageModels.set(handle, {\n\t\t\textension: extension.identifier,\n\t\t\tprovider,\n\t\t\tlanguageModelId: identifier,\n\t\t});\n\t\tlet auth;\n\t\tif (metadata.auth) {\n\t\t\tauth = {\n\t\t\t\tproviderLabel: extension.displayName || extension.name,\n\t\t\t\taccountLabel:\n\t\t\t\t\ttypeof metadata.auth === \"object\"\n\t\t\t\t\t\t? metadata.auth.label\n\t\t\t\t\t\t: undefined,\n\t\t\t};\n\t\t}\n\t\tthis._proxy.$registerLanguageModelProvider(\n\t\t\thandle,\n\t\t\t`${ExtensionIdentifier.toKey(extension.identifier)}/${handle}/${identifier}`,\n\t\t\t{\n\t\t\t\textension: extension.identifier,\n\t\t\t\tid: identifier,\n\t\t\t\tvendor:\n\t\t\t\t\tmetadata.vendor ??\n\t\t\t\t\tExtensionIdentifier.toKey(extension.identifier),\n\t\t\t\tname: metadata.name ?? \"\",\n\t\t\t\tfamily: metadata.family ?? \"\",\n\t\t\t\tversion: metadata.version,\n\t\t\t\tmaxInputTokens: metadata.maxInputTokens,\n\t\t\t\tmaxOutputTokens: metadata.maxOutputTokens,\n\t\t\t\tauth,\n\t\t\t\ttargetExtensions: metadata.extensions,\n\t\t\t},\n\t\t);\n\n\t\tconst responseReceivedListener =\n\t\t\tprovider.onDidReceiveLanguageModelResponse2?.(\n\t\t\t\t({ extensionId, participant, tokenCount }) => {\n\t\t\t\t\tthis._proxy.$whenLanguageModelChatRequestMade(\n\t\t\t\t\t\tidentifier,\n\t\t\t\t\t\tnew ExtensionIdentifier(extensionId),\n\t\t\t\t\t\tparticipant,\n\t\t\t\t\t\ttokenCount,\n\t\t\t\t\t);\n\t\t\t\t},\n\t\t\t);\n\n\t\treturn toDisposable(() => {\n\t\t\tthis._languageModels.delete(handle);\n\t\t\tthis._proxy.$unregisterProvider(handle);\n\t\t\tresponseReceivedListener?.dispose();\n\t\t});\n\t}\n\n\tasync $startChatRequest(\n\t\thandle: number,\n\t\trequestId: number,\n\t\tfrom: ExtensionIdentifier,\n\t\tmessages: IChatMessage[],\n\t\toptions: vscode.LanguageModelChatRequestOptions,\n\t\ttoken: CancellationToken,\n\t): Promise<void> {\n\t\tconst data = this._languageModels.get(handle);\n\t\tif (!data) {\n\t\t\tthrow new Error(\"Provider not found\");\n\t\t}\n\t\tconst progress = new Progress<vscode.ChatResponseFragment2>(\n\t\t\tasync (fragment) => {\n\t\t\t\tif (token.isCancellationRequested) {\n\t\t\t\t\tthis._logService.warn(\n\t\t\t\t\t\t`[CHAT](${data.extension.value}) CANNOT send progress because the REQUEST IS CANCELLED`,\n\t\t\t\t\t);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tlet part: IChatResponsePart | undefined;\n\t\t\t\tif (\n\t\t\t\t\tfragment.part instanceof\n\t\t\t\t\textHostTypes.LanguageModelToolCallPart\n\t\t\t\t) {\n\t\t\t\t\tpart = {\n\t\t\t\t\t\ttype: \"tool_use\",\n\t\t\t\t\t\tname: fragment.part.name,\n\t\t\t\t\t\tparameters: fragment.part.parameters,\n\t\t\t\t\t\ttoolCallId: fragment.part.toolCallId,\n\t\t\t\t\t};\n\t\t\t\t} else if (\n\t\t\t\t\tfragment.part instanceof extHostTypes.LanguageModelTextPart\n\t\t\t\t) {\n\t\t\t\t\tpart = { type: \"text\", value: fragment.part.value };\n\t\t\t\t}\n\n\t\t\t\tif (!part) {\n\t\t\t\t\tthis._logService.warn(\n\t\t\t\t\t\t`[CHAT](${data.extension.value}) UNKNOWN part ${JSON.stringify(fragment)}`,\n\t\t\t\t\t);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tthis._proxy.$reportResponsePart(requestId, {\n\t\t\t\t\tindex: fragment.index,\n\t\t\t\t\tpart,\n\t\t\t\t});\n\t\t\t},\n\t\t);\n\n\t\tlet p: Promise<any>;\n\n\t\tif (data.provider.provideLanguageModelResponse2) {\n\t\t\tp = Promise.resolve(\n\t\t\t\tdata.provider.provideLanguageModelResponse2(\n\t\t\t\t\tmessages.map(typeConvert.LanguageModelChatMessage.to),\n\t\t\t\t\toptions,\n\t\t\t\t\tExtensionIdentifier.toKey(from),\n\t\t\t\t\tprogress,\n\t\t\t\t\ttoken,\n\t\t\t\t),\n\t\t\t);\n\t\t} else {\n\t\t\tconst progress2 = new Progress<vscode.ChatResponseFragment>(\n\t\t\t\tasync (fragment) => {\n\t\t\t\t\tprogress.report({\n\t\t\t\t\t\tindex: fragment.index,\n\t\t\t\t\t\tpart: new extHostTypes.LanguageModelTextPart(\n\t\t\t\t\t\t\tfragment.part,\n\t\t\t\t\t\t),\n\t\t\t\t\t});\n\t\t\t\t},\n\t\t\t);\n\n\t\t\tp = Promise.resolve(\n\t\t\t\tdata.provider.provideLanguageModelResponse(\n\t\t\t\t\tmessages.map(typeConvert.LanguageModelChatMessage.to),\n\t\t\t\t\toptions?.modelOptions ?? {},\n\t\t\t\t\tExtensionIdentifier.toKey(from),\n\t\t\t\t\tprogress2,\n\t\t\t\t\ttoken,\n\t\t\t\t),\n\t\t\t);\n\t\t}\n\n\t\tp.then(\n\t\t\t() => {\n\t\t\t\tthis._proxy.$reportResponseDone(requestId, undefined);\n\t\t\t},\n\t\t\t(err) => {\n\t\t\t\tthis._proxy.$reportResponseDone(\n\t\t\t\t\trequestId,\n\t\t\t\t\ttransformErrorForSerialization(err),\n\t\t\t\t);\n\t\t\t},\n\t\t);\n\t}\n\n\t//#region --- token counting\n\n\t$provideTokenLength(\n\t\thandle: number,\n\t\tvalue: string,\n\t\ttoken: CancellationToken,\n\t): Promise<number> {\n\t\tconst data = this._languageModels.get(handle);\n\t\tif (!data) {\n\t\t\treturn Promise.resolve(0);\n\t\t}\n\t\treturn Promise.resolve(data.provider.provideTokenCount(value, token));\n\t}\n\n\t//#region --- making request\n\n\t$acceptChatModelMetadata(data: {\n\t\tadded?:\n\t\t\t| { identifier: string; metadata: ILanguageModelChatMetadata }[]\n\t\t\t| undefined;\n\t\tremoved?: string[] | undefined;\n\t}): void {\n\t\tif (data.added) {\n\t\t\tfor (const { identifier, metadata } of data.added) {\n\t\t\t\tthis._allLanguageModelData.set(identifier, {\n\t\t\t\t\tmetadata,\n\t\t\t\t\tapiObjects: new ExtensionIdentifierMap(),\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t\tif (data.removed) {\n\t\t\tfor (const id of data.removed) {\n\t\t\t\t// clean up\n\t\t\t\tthis._allLanguageModelData.delete(id);\n\n\t\t\t\t// cancel pending requests for this model\n\t\t\t\tfor (const [key, value] of this._pendingRequest) {\n\t\t\t\t\tif (value.languageModelId === id) {\n\t\t\t\t\t\tvalue.res.reject(new CancellationError());\n\t\t\t\t\t\tthis._pendingRequest.delete(key);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// TODO@jrieken@TylerLeonhardt - this is a temporary hack to populate the auth providers\n\t\tdata.added?.forEach((added) => this._fakeAuthPopulate(added.metadata));\n\n\t\tthis._onDidChangeProviders.fire(undefined);\n\t}\n\n\tasync selectLanguageModels(\n\t\textension: IExtensionDescription,\n\t\tselector: vscode.LanguageModelChatSelector,\n\t) {\n\t\t// this triggers extension activation\n\t\tconst models = await this._proxy.$selectChatModels({\n\t\t\t...selector,\n\t\t\textension: extension.identifier,\n\t\t});\n\n\t\tconst result: vscode.LanguageModelChat[] = [];\n\t\tconst that = this;\n\t\tfor (const identifier of models) {\n\t\t\tconst data = this._allLanguageModelData.get(identifier);\n\t\t\tif (!data) {\n\t\t\t\t// model gone? is this an error on us?\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// make sure auth information is correct\n\t\t\tif (this._isUsingAuth(extension.identifier, data.metadata)) {\n\t\t\t\tawait this._fakeAuthPopulate(data.metadata);\n\t\t\t}\n\n\t\t\tlet apiObject = data.apiObjects.get(extension.identifier);\n\n\t\t\tif (!apiObject) {\n\t\t\t\tapiObject = {\n\t\t\t\t\tid: identifier,\n\t\t\t\t\tvendor: data.metadata.vendor,\n\t\t\t\t\tfamily: data.metadata.family,\n\t\t\t\t\tversion: data.metadata.version,\n\t\t\t\t\tname: data.metadata.name,\n\t\t\t\t\tmaxInputTokens: data.metadata.maxInputTokens,\n\t\t\t\t\tcountTokens(text, token) {\n\t\t\t\t\t\tif (!that._allLanguageModelData.has(identifier)) {\n\t\t\t\t\t\t\tthrow extHostTypes.LanguageModelError.NotFound(\n\t\t\t\t\t\t\t\tidentifier,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn that._computeTokenLength(\n\t\t\t\t\t\t\tidentifier,\n\t\t\t\t\t\t\ttext,\n\t\t\t\t\t\t\ttoken ?? CancellationToken.None,\n\t\t\t\t\t\t);\n\t\t\t\t\t},\n\t\t\t\t\tsendRequest(messages, options, token) {\n\t\t\t\t\t\tif (!that._allLanguageModelData.has(identifier)) {\n\t\t\t\t\t\t\tthrow extHostTypes.LanguageModelError.NotFound(\n\t\t\t\t\t\t\t\tidentifier,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn that._sendChatRequest(\n\t\t\t\t\t\t\textension,\n\t\t\t\t\t\t\tidentifier,\n\t\t\t\t\t\t\tmessages,\n\t\t\t\t\t\t\toptions ?? {},\n\t\t\t\t\t\t\ttoken ?? CancellationToken.None,\n\t\t\t\t\t\t);\n\t\t\t\t\t},\n\t\t\t\t};\n\n\t\t\t\tObject.freeze(apiObject);\n\t\t\t\tdata.apiObjects.set(extension.identifier, apiObject);\n\t\t\t}\n\n\t\t\tresult.push(apiObject);\n\t\t}\n\n\t\treturn result;\n\t}\n\n\tprivate async _sendChatRequest(\n\t\textension: IExtensionDescription,\n\t\tlanguageModelId: string,\n\t\tmessages: vscode.LanguageModelChatMessage[],\n\t\toptions: vscode.LanguageModelChatRequestOptions,\n\t\ttoken: CancellationToken,\n\t) {\n\t\tconst internalMessages: IChatMessage[] = this._convertMessages(\n\t\t\textension,\n\t\t\tmessages,\n\t\t);\n\n\t\tconst from = extension.identifier;\n\t\tconst metadata =\n\t\t\tthis._allLanguageModelData.get(languageModelId)?.metadata;\n\n\t\tif (!metadata || !this._allLanguageModelData.has(languageModelId)) {\n\t\t\tthrow extHostTypes.LanguageModelError.NotFound(\n\t\t\t\t`Language model '${languageModelId}' is unknown.`,\n\t\t\t);\n\t\t}\n\n\t\tif (this._isUsingAuth(from, metadata)) {\n\t\t\tconst success = await this._getAuthAccess(\n\t\t\t\textension,\n\t\t\t\t{\n\t\t\t\t\tidentifier: metadata.extension,\n\t\t\t\t\tdisplayName: metadata.auth.providerLabel,\n\t\t\t\t},\n\t\t\t\toptions.justification,\n\t\t\t\tfalse,\n\t\t\t);\n\n\t\t\tif (\n\t\t\t\t!success ||\n\t\t\t\t!this._modelAccessList.get(from)?.has(metadata.extension)\n\t\t\t) {\n\t\t\t\tthrow extHostTypes.LanguageModelError.NoPermissions(\n\t\t\t\t\t`Language model '${languageModelId}' cannot be used by '${from.value}'.`,\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\ttry {\n\t\t\tconst requestId = (Math.random() * 1e6) | 0;\n\t\t\tconst res = new LanguageModelResponse();\n\t\t\tthis._pendingRequest.set(requestId, { languageModelId, res });\n\n\t\t\ttry {\n\t\t\t\tawait this._proxy.$tryStartChatRequest(\n\t\t\t\t\tfrom,\n\t\t\t\t\tlanguageModelId,\n\t\t\t\t\trequestId,\n\t\t\t\t\tinternalMessages,\n\t\t\t\t\toptions,\n\t\t\t\t\ttoken,\n\t\t\t\t);\n\t\t\t} catch (error) {\n\t\t\t\t// error'ing here means that the request could NOT be started/made, e.g. wrong model, no access, etc, but\n\t\t\t\t// later the response can fail as well. Those failures are communicated via the stream-object\n\t\t\t\tthis._pendingRequest.delete(requestId);\n\t\t\t\tthrow error;\n\t\t\t}\n\n\t\t\treturn res.apiObject;\n\t\t} catch (error) {\n\t\t\tif (error.name === extHostTypes.LanguageModelError.name) {\n\t\t\t\tthrow error;\n\t\t\t}\n\t\t\tthrow new extHostTypes.LanguageModelError(\n\t\t\t\t`Language model '${languageModelId}' errored: ${toErrorMessage(error)}`,\n\t\t\t\t\"Unknown\",\n\t\t\t\terror,\n\t\t\t);\n\t\t}\n\t}\n\n\tprivate _convertMessages(\n\t\textension: IExtensionDescription,\n\t\tmessages: vscode.LanguageModelChatMessage[],\n\t) {\n\t\tconst internalMessages: IChatMessage[] = [];\n\t\tfor (const message of messages) {\n\t\t\tif (\n\t\t\t\t(message.role as number) ===\n\t\t\t\textHostTypes.LanguageModelChatMessageRole.System\n\t\t\t) {\n\t\t\t\tcheckProposedApiEnabled(extension, \"languageModelSystem\");\n\t\t\t}\n\t\t\tif (\n\t\t\t\tmessage.content2.some(\n\t\t\t\t\t(part) =>\n\t\t\t\t\t\tpart instanceof\n\t\t\t\t\t\textHostTypes.LanguageModelToolResultPart,\n\t\t\t\t)\n\t\t\t) {\n\t\t\t\tcheckProposedApiEnabled(extension, \"lmTools\");\n\t\t\t}\n\t\t\tinternalMessages.push(\n\t\t\t\ttypeConvert.LanguageModelChatMessage.from(message),\n\t\t\t);\n\t\t}\n\t\treturn internalMessages;\n\t}\n\n\tasync $acceptResponsePart(\n\t\trequestId: number,\n\t\tchunk: IChatResponseFragment,\n\t): Promise<void> {\n\t\tconst data = this._pendingRequest.get(requestId);\n\t\tif (data) {\n\t\t\tdata.res.handleFragment(chunk);\n\t\t}\n\t}\n\n\tasync $acceptResponseDone(\n\t\trequestId: number,\n\t\terror: SerializedError | undefined,\n\t): Promise<void> {\n\t\tconst data = this._pendingRequest.get(requestId);\n\t\tif (!data) {\n\t\t\treturn;\n\t\t}\n\t\tthis._pendingRequest.delete(requestId);\n\t\tif (error) {\n\t\t\t// we error the stream because that's the only way to signal\n\t\t\t// that the request has failed\n\t\t\tdata.res.reject(transformErrorFromSerialization(error));\n\t\t} else {\n\t\t\tdata.res.resolve();\n\t\t}\n\t}\n\n\t// BIG HACK: Using AuthenticationProviders to check access to Language Models\n\tprivate async _getAuthAccess(\n\t\tfrom: IExtensionDescription,\n\t\tto: { identifier: ExtensionIdentifier; displayName: string },\n\t\tjustification: string | undefined,\n\t\tsilent: boolean | undefined,\n\t): Promise<boolean> {\n\t\t// This needs to be done in both MainThread & ExtHost ChatProvider\n\t\tconst providerId = INTERNAL_AUTH_PROVIDER_PREFIX + to.identifier.value;\n\t\tconst session = await this._extHostAuthentication.getSession(\n\t\t\tfrom,\n\t\t\tproviderId,\n\t\t\t[],\n\t\t\t{ silent: true },\n\t\t);\n\n\t\tif (session) {\n\t\t\tthis.$updateModelAccesslist([\n\t\t\t\t{ from: from.identifier, to: to.identifier, enabled: true },\n\t\t\t]);\n\t\t\treturn true;\n\t\t}\n\n\t\tif (silent) {\n\t\t\treturn false;\n\t\t}\n\n\t\ttry {\n\t\t\tconst detail = justification\n\t\t\t\t? localize(\n\t\t\t\t\t\t\"chatAccessWithJustification\",\n\t\t\t\t\t\t\"Justification: {1}\",\n\t\t\t\t\t\tto.displayName,\n\t\t\t\t\t\tjustification,\n\t\t\t\t\t)\n\t\t\t\t: undefined;\n\t\t\tawait this._extHostAuthentication.getSession(from, providerId, [], {\n\t\t\t\tforceNewSession: { detail },\n\t\t\t});\n\t\t\tthis.$updateModelAccesslist([\n\t\t\t\t{ from: from.identifier, to: to.identifier, enabled: true },\n\t\t\t]);\n\t\t\treturn true;\n\t\t} catch (err) {\n\t\t\t// ignore\n\t\t\treturn false;\n\t\t}\n\t}\n\n\tprivate _isUsingAuth(\n\t\tfrom: ExtensionIdentifier,\n\t\ttoMetadata: ILanguageModelChatMetadata,\n\t): toMetadata is ILanguageModelChatMetadata & {\n\t\tauth: NonNullable<ILanguageModelChatMetadata[\"auth\"]>;\n\t} {\n\t\t// If the 'to' extension uses an auth check\n\t\treturn (\n\t\t\t!!toMetadata.auth &&\n\t\t\t// And we're asking from a different extension\n\t\t\t!ExtensionIdentifier.equals(toMetadata.extension, from)\n\t\t);\n\t}\n\n\tprivate async _fakeAuthPopulate(\n\t\tmetadata: ILanguageModelChatMetadata,\n\t): Promise<void> {\n\t\tif (!metadata.auth) {\n\t\t\treturn;\n\t\t}\n\n\t\tfor (const from of this._languageAccessInformationExtensions) {\n\t\t\ttry {\n\t\t\t\tawait this._getAuthAccess(\n\t\t\t\t\tfrom,\n\t\t\t\t\t{ identifier: metadata.extension, displayName: \"\" },\n\t\t\t\t\tundefined,\n\t\t\t\t\ttrue,\n\t\t\t\t);\n\t\t\t} catch (err) {\n\t\t\t\tthis._logService.error(\"Fake Auth request failed\");\n\t\t\t\tthis._logService.error(err);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate async _computeTokenLength(\n\t\tlanguageModelId: string,\n\t\tvalue: string | vscode.LanguageModelChatMessage,\n\t\ttoken: vscode.CancellationToken,\n\t): Promise<number> {\n\t\tconst data = this._allLanguageModelData.get(languageModelId);\n\t\tif (!data) {\n\t\t\tthrow extHostTypes.LanguageModelError.NotFound(\n\t\t\t\t`Language model '${languageModelId}' is unknown.`,\n\t\t\t);\n\t\t}\n\n\t\tconst local = Iterable.find(\n\t\t\tthis._languageModels.values(),\n\t\t\t(candidate) => candidate.languageModelId === languageModelId,\n\t\t);\n\t\tif (local) {\n\t\t\t// stay inside the EH\n\t\t\treturn local.provider.provideTokenCount(value, token);\n\t\t}\n\n\t\treturn this._proxy.$countTokens(\n\t\t\tlanguageModelId,\n\t\t\ttypeof value === \"string\"\n\t\t\t\t? value\n\t\t\t\t: typeConvert.LanguageModelChatMessage.from(value),\n\t\t\ttoken,\n\t\t);\n\t}\n\n\t$updateModelAccesslist(\n\t\tdata: {\n\t\t\tfrom: ExtensionIdentifier;\n\t\t\tto: ExtensionIdentifier;\n\t\t\tenabled: boolean;\n\t\t}[],\n\t): void {\n\t\tconst updated = new Array<{\n\t\t\tfrom: ExtensionIdentifier;\n\t\t\tto: ExtensionIdentifier;\n\t\t}>();\n\t\tfor (const { from, to, enabled } of data) {\n\t\t\tconst set =\n\t\t\t\tthis._modelAccessList.get(from) ?? new ExtensionIdentifierSet();\n\t\t\tconst oldValue = set.has(to);\n\t\t\tif (oldValue !== enabled) {\n\t\t\t\tif (enabled) {\n\t\t\t\t\tset.add(to);\n\t\t\t\t} else {\n\t\t\t\t\tset.delete(to);\n\t\t\t\t}\n\t\t\t\tthis._modelAccessList.set(from, set);\n\t\t\t\tconst newItem = { from, to };\n\t\t\t\tupdated.push(newItem);\n\t\t\t\tthis._onDidChangeModelAccess.fire(newItem);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate readonly _languageAccessInformationExtensions = new Set<\n\t\tReadonly<IExtensionDescription>\n\t>();\n\n\tcreateLanguageModelAccessInformation(\n\t\tfrom: Readonly<IExtensionDescription>,\n\t): vscode.LanguageModelAccessInformation {\n\t\tthis._languageAccessInformationExtensions.add(from);\n\n\t\tconst that = this;\n\t\tconst _onDidChangeAccess = Event.signal(\n\t\t\tEvent.filter(this._onDidChangeModelAccess.event, (e) =>\n\t\t\t\tExtensionIdentifier.equals(e.from, from.identifier),\n\t\t\t),\n\t\t);\n\t\tconst _onDidAddRemove = Event.signal(this._onDidChangeProviders.event);\n\n\t\treturn {\n\t\t\tget onDidChange() {\n\t\t\t\treturn Event.any(_onDidChangeAccess, _onDidAddRemove);\n\t\t\t},\n\t\t\tcanSendRequest(\n\t\t\t\tchat: vscode.LanguageModelChat,\n\t\t\t): boolean | undefined {\n\t\t\t\tlet metadata: ILanguageModelChatMetadata | undefined;\n\n\t\t\t\tout: for (const [_, value] of that._allLanguageModelData) {\n\t\t\t\t\tfor (const candidate of value.apiObjects.values()) {\n\t\t\t\t\t\tif (candidate === chat) {\n\t\t\t\t\t\t\tmetadata = value.metadata;\n\t\t\t\t\t\t\tbreak out;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (!metadata) {\n\t\t\t\t\treturn undefined;\n\t\t\t\t}\n\t\t\t\tif (!that._isUsingAuth(from.identifier, metadata)) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\n\t\t\t\tconst list = that._modelAccessList.get(from.identifier);\n\t\t\t\tif (!list) {\n\t\t\t\t\treturn undefined;\n\t\t\t\t}\n\t\t\t\treturn list.has(metadata.extension);\n\t\t\t},\n\t\t};\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
