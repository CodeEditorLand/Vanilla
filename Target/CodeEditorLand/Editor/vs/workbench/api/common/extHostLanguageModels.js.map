{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/api/common/extHostLanguageModels.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { AsyncIterableObject, AsyncIterableSource } from '../../../base/common/async.js';\nimport { CancellationToken } from '../../../base/common/cancellation.js';\nimport { toErrorMessage } from '../../../base/common/errorMessage.js';\nimport { CancellationError, SerializedError, transformErrorForSerialization, transformErrorFromSerialization } from '../../../base/common/errors.js';\nimport { Emitter, Event } from '../../../base/common/event.js';\nimport { Iterable } from '../../../base/common/iterator.js';\nimport { IDisposable, toDisposable } from '../../../base/common/lifecycle.js';\nimport { localize } from '../../../nls.js';\nimport { ExtensionIdentifier, ExtensionIdentifierMap, ExtensionIdentifierSet, IExtensionDescription } from '../../../platform/extensions/common/extensions.js';\nimport { createDecorator } from '../../../platform/instantiation/common/instantiation.js';\nimport { ILogService } from '../../../platform/log/common/log.js';\nimport { Progress } from '../../../platform/progress/common/progress.js';\nimport { ExtHostLanguageModelsShape, MainContext, MainThreadLanguageModelsShape } from './extHost.protocol.js';\nimport { IExtHostAuthentication } from './extHostAuthentication.js';\nimport { IExtHostRpcService } from './extHostRpcService.js';\nimport * as typeConvert from './extHostTypeConverters.js';\nimport * as extHostTypes from './extHostTypes.js';\nimport { IChatMessage, IChatResponseFragment, IChatResponsePart, ILanguageModelChatMetadata } from '../../contrib/chat/common/languageModels.js';\nimport { INTERNAL_AUTH_PROVIDER_PREFIX } from '../../services/authentication/common/authentication.js';\nimport { checkProposedApiEnabled } from '../../services/extensions/common/extensions.js';\nimport type * as vscode from 'vscode';\n\nexport interface IExtHostLanguageModels extends ExtHostLanguageModels { }\n\nexport const IExtHostLanguageModels = createDecorator<IExtHostLanguageModels>('IExtHostLanguageModels');\n\ntype LanguageModelData = {\n\treadonly languageModelId: string;\n\treadonly extension: ExtensionIdentifier;\n\treadonly provider: vscode.ChatResponseProvider;\n};\n\nclass LanguageModelResponseStream {\n\n\treadonly stream = new AsyncIterableSource<vscode.LanguageModelChatResponseTextPart | vscode.LanguageModelChatResponseToolCallPart>();\n\n\tconstructor(\n\t\treadonly option: number,\n\t\tstream?: AsyncIterableSource<vscode.LanguageModelChatResponseTextPart | vscode.LanguageModelChatResponseToolCallPart>\n\t) {\n\t\tthis.stream = stream ?? new AsyncIterableSource<vscode.LanguageModelChatResponseTextPart | vscode.LanguageModelChatResponseToolCallPart>();\n\t}\n}\n\nclass LanguageModelResponse {\n\n\treadonly apiObject: vscode.LanguageModelChatResponse;\n\n\tprivate readonly _responseStreams = new Map<number, LanguageModelResponseStream>();\n\tprivate readonly _defaultStream = new AsyncIterableSource<vscode.LanguageModelChatResponseTextPart | vscode.LanguageModelChatResponseToolCallPart>();\n\tprivate _isDone: boolean = false;\n\n\tconstructor() {\n\n\t\tconst that = this;\n\t\tthis.apiObject = {\n\t\t\t// result: promise,\n\t\t\tget stream() {\n\t\t\t\treturn that._defaultStream.asyncIterable;\n\t\t\t},\n\t\t\tget text() {\n\t\t\t\treturn AsyncIterableObject.map(that._defaultStream.asyncIterable, part => {\n\t\t\t\t\tif (part instanceof extHostTypes.LanguageModelTextPart) {\n\t\t\t\t\t\treturn part.value;\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn undefined;\n\t\t\t\t\t}\n\t\t\t\t}).coalesce();\n\t\t\t},\n\t\t};\n\t}\n\n\tprivate * _streams() {\n\t\tif (this._responseStreams.size > 0) {\n\t\t\tfor (const [, value] of this._responseStreams) {\n\t\t\t\tyield value.stream;\n\t\t\t}\n\t\t} else {\n\t\t\tyield this._defaultStream;\n\t\t}\n\t}\n\n\thandleFragment(fragment: IChatResponseFragment): void {\n\t\tif (this._isDone) {\n\t\t\treturn;\n\t\t}\n\t\tlet res = this._responseStreams.get(fragment.index);\n\t\tif (!res) {\n\t\t\tif (this._responseStreams.size === 0) {\n\t\t\t\t// the first response claims the default response\n\t\t\t\tres = new LanguageModelResponseStream(fragment.index, this._defaultStream);\n\t\t\t} else {\n\t\t\t\tres = new LanguageModelResponseStream(fragment.index);\n\t\t\t}\n\t\t\tthis._responseStreams.set(fragment.index, res);\n\t\t}\n\n\t\tlet out: vscode.LanguageModelChatResponseTextPart | vscode.LanguageModelChatResponseToolCallPart;\n\t\tif (fragment.part.type === 'text') {\n\t\t\tout = new extHostTypes.LanguageModelTextPart(fragment.part.value);\n\t\t} else {\n\t\t\tout = new extHostTypes.LanguageModelToolCallPart(fragment.part.name, fragment.part.toolCallId, fragment.part.parameters);\n\t\t}\n\t\tres.stream.emitOne(out);\n\t}\n\n\n\treject(err: Error): void {\n\t\tthis._isDone = true;\n\t\tfor (const stream of this._streams()) {\n\t\t\tstream.reject(err);\n\t\t}\n\t}\n\n\tresolve(): void {\n\t\tthis._isDone = true;\n\t\tfor (const stream of this._streams()) {\n\t\t\tstream.resolve();\n\t\t}\n\t}\n}\n\nexport class ExtHostLanguageModels implements ExtHostLanguageModelsShape {\n\n\tdeclare _serviceBrand: undefined;\n\n\tprivate static _idPool = 1;\n\n\tprivate readonly _proxy: MainThreadLanguageModelsShape;\n\tprivate readonly _onDidChangeModelAccess = new Emitter<{ from: ExtensionIdentifier; to: ExtensionIdentifier }>();\n\tprivate readonly _onDidChangeProviders = new Emitter<void>();\n\treadonly onDidChangeProviders = this._onDidChangeProviders.event;\n\n\tprivate readonly _languageModels = new Map<number, LanguageModelData>();\n\tprivate readonly _allLanguageModelData = new Map<string, { metadata: ILanguageModelChatMetadata; apiObjects: ExtensionIdentifierMap<vscode.LanguageModelChat> }>(); // these are ALL models, not just the one in this EH\n\tprivate readonly _modelAccessList = new ExtensionIdentifierMap<ExtensionIdentifierSet>();\n\tprivate readonly _pendingRequest = new Map<number, { languageModelId: string; res: LanguageModelResponse }>();\n\n\tconstructor(\n\t\t@IExtHostRpcService extHostRpc: IExtHostRpcService,\n\t\t@ILogService private readonly _logService: ILogService,\n\t\t@IExtHostAuthentication private readonly _extHostAuthentication: IExtHostAuthentication,\n\t) {\n\t\tthis._proxy = extHostRpc.getProxy(MainContext.MainThreadLanguageModels);\n\t}\n\n\tdispose(): void {\n\t\tthis._onDidChangeModelAccess.dispose();\n\t\tthis._onDidChangeProviders.dispose();\n\t}\n\n\tregisterLanguageModel(extension: IExtensionDescription, identifier: string, provider: vscode.ChatResponseProvider, metadata: vscode.ChatResponseProviderMetadata): IDisposable {\n\n\t\tconst handle = ExtHostLanguageModels._idPool++;\n\t\tthis._languageModels.set(handle, { extension: extension.identifier, provider, languageModelId: identifier });\n\t\tlet auth;\n\t\tif (metadata.auth) {\n\t\t\tauth = {\n\t\t\t\tproviderLabel: extension.displayName || extension.name,\n\t\t\t\taccountLabel: typeof metadata.auth === 'object' ? metadata.auth.label : undefined\n\t\t\t};\n\t\t}\n\t\tthis._proxy.$registerLanguageModelProvider(handle, `${ExtensionIdentifier.toKey(extension.identifier)}/${handle}/${identifier}`, {\n\t\t\textension: extension.identifier,\n\t\t\tid: identifier,\n\t\t\tvendor: metadata.vendor ?? ExtensionIdentifier.toKey(extension.identifier),\n\t\t\tname: metadata.name ?? '',\n\t\t\tfamily: metadata.family ?? '',\n\t\t\tversion: metadata.version,\n\t\t\tmaxInputTokens: metadata.maxInputTokens,\n\t\t\tmaxOutputTokens: metadata.maxOutputTokens,\n\t\t\tauth,\n\t\t\ttargetExtensions: metadata.extensions\n\t\t});\n\n\t\tconst responseReceivedListener = provider.onDidReceiveLanguageModelResponse2?.(({ extensionId, participant, tokenCount }) => {\n\t\t\tthis._proxy.$whenLanguageModelChatRequestMade(identifier, new ExtensionIdentifier(extensionId), participant, tokenCount);\n\t\t});\n\n\t\treturn toDisposable(() => {\n\t\t\tthis._languageModels.delete(handle);\n\t\t\tthis._proxy.$unregisterProvider(handle);\n\t\t\tresponseReceivedListener?.dispose();\n\t\t});\n\t}\n\n\tasync $startChatRequest(handle: number, requestId: number, from: ExtensionIdentifier, messages: IChatMessage[], options: vscode.LanguageModelChatRequestOptions, token: CancellationToken): Promise<void> {\n\t\tconst data = this._languageModels.get(handle);\n\t\tif (!data) {\n\t\t\tthrow new Error('Provider not found');\n\t\t}\n\t\tconst progress = new Progress<vscode.ChatResponseFragment2>(async fragment => {\n\t\t\tif (token.isCancellationRequested) {\n\t\t\t\tthis._logService.warn(`[CHAT](${data.extension.value}) CANNOT send progress because the REQUEST IS CANCELLED`);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tlet part: IChatResponsePart | undefined;\n\t\t\tif (fragment.part instanceof extHostTypes.LanguageModelToolCallPart) {\n\t\t\t\tpart = { type: 'tool_use', name: fragment.part.name, parameters: fragment.part.parameters, toolCallId: fragment.part.toolCallId };\n\t\t\t} else if (fragment.part instanceof extHostTypes.LanguageModelTextPart) {\n\t\t\t\tpart = { type: 'text', value: fragment.part.value };\n\t\t\t}\n\n\t\t\tif (!part) {\n\t\t\t\tthis._logService.warn(`[CHAT](${data.extension.value}) UNKNOWN part ${JSON.stringify(fragment)}`);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis._proxy.$reportResponsePart(requestId, { index: fragment.index, part });\n\t\t});\n\n\t\tlet p: Promise<any>;\n\n\t\tif (data.provider.provideLanguageModelResponse2) {\n\n\t\t\tp = Promise.resolve(data.provider.provideLanguageModelResponse2(\n\t\t\t\tmessages.map(typeConvert.LanguageModelChatMessage.to),\n\t\t\t\toptions,\n\t\t\t\tExtensionIdentifier.toKey(from),\n\t\t\t\tprogress,\n\t\t\t\ttoken\n\t\t\t));\n\n\t\t} else {\n\n\t\t\tconst progress2 = new Progress<vscode.ChatResponseFragment>(async fragment => {\n\t\t\t\tprogress.report({ index: fragment.index, part: new extHostTypes.LanguageModelTextPart(fragment.part) });\n\t\t\t});\n\n\t\t\tp = Promise.resolve(data.provider.provideLanguageModelResponse(\n\t\t\t\tmessages.map(typeConvert.LanguageModelChatMessage.to),\n\t\t\t\toptions?.modelOptions ?? {},\n\t\t\t\tExtensionIdentifier.toKey(from),\n\t\t\t\tprogress2,\n\t\t\t\ttoken\n\t\t\t));\n\t\t}\n\n\t\tp.then(() => {\n\t\t\tthis._proxy.$reportResponseDone(requestId, undefined);\n\t\t}, err => {\n\t\t\tthis._proxy.$reportResponseDone(requestId, transformErrorForSerialization(err));\n\t\t});\n\t}\n\n\t//#region --- token counting\n\n\t$provideTokenLength(handle: number, value: string, token: CancellationToken): Promise<number> {\n\t\tconst data = this._languageModels.get(handle);\n\t\tif (!data) {\n\t\t\treturn Promise.resolve(0);\n\t\t}\n\t\treturn Promise.resolve(data.provider.provideTokenCount(value, token));\n\t}\n\n\n\t//#region --- making request\n\n\t$acceptChatModelMetadata(data: { added?: { identifier: string; metadata: ILanguageModelChatMetadata }[] | undefined; removed?: string[] | undefined }): void {\n\t\tif (data.added) {\n\t\t\tfor (const { identifier, metadata } of data.added) {\n\t\t\t\tthis._allLanguageModelData.set(identifier, { metadata, apiObjects: new ExtensionIdentifierMap() });\n\t\t\t}\n\t\t}\n\t\tif (data.removed) {\n\t\t\tfor (const id of data.removed) {\n\t\t\t\t// clean up\n\t\t\t\tthis._allLanguageModelData.delete(id);\n\n\t\t\t\t// cancel pending requests for this model\n\t\t\t\tfor (const [key, value] of this._pendingRequest) {\n\t\t\t\t\tif (value.languageModelId === id) {\n\t\t\t\t\t\tvalue.res.reject(new CancellationError());\n\t\t\t\t\t\tthis._pendingRequest.delete(key);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// TODO@jrieken@TylerLeonhardt - this is a temporary hack to populate the auth providers\n\t\tdata.added?.forEach(added => this._fakeAuthPopulate(added.metadata));\n\n\t\tthis._onDidChangeProviders.fire(undefined);\n\t}\n\n\tasync selectLanguageModels(extension: IExtensionDescription, selector: vscode.LanguageModelChatSelector) {\n\n\t\t// this triggers extension activation\n\t\tconst models = await this._proxy.$selectChatModels({ ...selector, extension: extension.identifier });\n\n\t\tconst result: vscode.LanguageModelChat[] = [];\n\t\tconst that = this;\n\t\tfor (const identifier of models) {\n\t\t\tconst data = this._allLanguageModelData.get(identifier);\n\t\t\tif (!data) {\n\t\t\t\t// model gone? is this an error on us?\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// make sure auth information is correct\n\t\t\tif (this._isUsingAuth(extension.identifier, data.metadata)) {\n\t\t\t\tawait this._fakeAuthPopulate(data.metadata);\n\t\t\t}\n\n\t\t\tlet apiObject = data.apiObjects.get(extension.identifier);\n\n\t\t\tif (!apiObject) {\n\t\t\t\tapiObject = {\n\t\t\t\t\tid: identifier,\n\t\t\t\t\tvendor: data.metadata.vendor,\n\t\t\t\t\tfamily: data.metadata.family,\n\t\t\t\t\tversion: data.metadata.version,\n\t\t\t\t\tname: data.metadata.name,\n\t\t\t\t\tmaxInputTokens: data.metadata.maxInputTokens,\n\t\t\t\t\tcountTokens(text, token) {\n\t\t\t\t\t\tif (!that._allLanguageModelData.has(identifier)) {\n\t\t\t\t\t\t\tthrow extHostTypes.LanguageModelError.NotFound(identifier);\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn that._computeTokenLength(identifier, text, token ?? CancellationToken.None);\n\t\t\t\t\t},\n\t\t\t\t\tsendRequest(messages, options, token) {\n\t\t\t\t\t\tif (!that._allLanguageModelData.has(identifier)) {\n\t\t\t\t\t\t\tthrow extHostTypes.LanguageModelError.NotFound(identifier);\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn that._sendChatRequest(extension, identifier, messages, options ?? {}, token ?? CancellationToken.None);\n\t\t\t\t\t}\n\t\t\t\t};\n\n\t\t\t\tObject.freeze(apiObject);\n\t\t\t\tdata.apiObjects.set(extension.identifier, apiObject);\n\t\t\t}\n\n\t\t\tresult.push(apiObject);\n\t\t}\n\n\t\treturn result;\n\t}\n\n\tprivate async _sendChatRequest(extension: IExtensionDescription, languageModelId: string, messages: vscode.LanguageModelChatMessage[], options: vscode.LanguageModelChatRequestOptions, token: CancellationToken) {\n\n\t\tconst internalMessages: IChatMessage[] = this._convertMessages(extension, messages);\n\n\t\tconst from = extension.identifier;\n\t\tconst metadata = this._allLanguageModelData.get(languageModelId)?.metadata;\n\n\t\tif (!metadata || !this._allLanguageModelData.has(languageModelId)) {\n\t\t\tthrow extHostTypes.LanguageModelError.NotFound(`Language model '${languageModelId}' is unknown.`);\n\t\t}\n\n\t\tif (this._isUsingAuth(from, metadata)) {\n\t\t\tconst success = await this._getAuthAccess(extension, { identifier: metadata.extension, displayName: metadata.auth.providerLabel }, options.justification, false);\n\n\t\t\tif (!success || !this._modelAccessList.get(from)?.has(metadata.extension)) {\n\t\t\t\tthrow extHostTypes.LanguageModelError.NoPermissions(`Language model '${languageModelId}' cannot be used by '${from.value}'.`);\n\t\t\t}\n\t\t}\n\n\t\ttry {\n\t\t\tconst requestId = (Math.random() * 1e6) | 0;\n\t\t\tconst res = new LanguageModelResponse();\n\t\t\tthis._pendingRequest.set(requestId, { languageModelId, res });\n\n\t\t\ttry {\n\t\t\t\tawait this._proxy.$tryStartChatRequest(from, languageModelId, requestId, internalMessages, options, token);\n\n\t\t\t} catch (error) {\n\t\t\t\t// error'ing here means that the request could NOT be started/made, e.g. wrong model, no access, etc, but\n\t\t\t\t// later the response can fail as well. Those failures are communicated via the stream-object\n\t\t\t\tthis._pendingRequest.delete(requestId);\n\t\t\t\tthrow error;\n\t\t\t}\n\n\t\t\treturn res.apiObject;\n\n\t\t} catch (error) {\n\t\t\tif (error.name === extHostTypes.LanguageModelError.name) {\n\t\t\t\tthrow error;\n\t\t\t}\n\t\t\tthrow new extHostTypes.LanguageModelError(\n\t\t\t\t`Language model '${languageModelId}' errored: ${toErrorMessage(error)}`,\n\t\t\t\t'Unknown',\n\t\t\t\terror\n\t\t\t);\n\t\t}\n\t}\n\n\tprivate _convertMessages(extension: IExtensionDescription, messages: vscode.LanguageModelChatMessage[]) {\n\t\tconst internalMessages: IChatMessage[] = [];\n\t\tfor (const message of messages) {\n\t\t\tif (message.role as number === extHostTypes.LanguageModelChatMessageRole.System) {\n\t\t\t\tcheckProposedApiEnabled(extension, 'languageModelSystem');\n\t\t\t}\n\t\t\tif (message.content2.some(part => part instanceof extHostTypes.LanguageModelToolResultPart)) {\n\t\t\t\tcheckProposedApiEnabled(extension, 'lmTools');\n\t\t\t}\n\t\t\tinternalMessages.push(typeConvert.LanguageModelChatMessage.from(message));\n\t\t}\n\t\treturn internalMessages;\n\t}\n\n\tasync $acceptResponsePart(requestId: number, chunk: IChatResponseFragment): Promise<void> {\n\t\tconst data = this._pendingRequest.get(requestId);\n\t\tif (data) {\n\t\t\tdata.res.handleFragment(chunk);\n\t\t}\n\t}\n\n\tasync $acceptResponseDone(requestId: number, error: SerializedError | undefined): Promise<void> {\n\t\tconst data = this._pendingRequest.get(requestId);\n\t\tif (!data) {\n\t\t\treturn;\n\t\t}\n\t\tthis._pendingRequest.delete(requestId);\n\t\tif (error) {\n\t\t\t// we error the stream because that's the only way to signal\n\t\t\t// that the request has failed\n\t\t\tdata.res.reject(transformErrorFromSerialization(error));\n\t\t} else {\n\t\t\tdata.res.resolve();\n\t\t}\n\t}\n\n\t// BIG HACK: Using AuthenticationProviders to check access to Language Models\n\tprivate async _getAuthAccess(from: IExtensionDescription, to: { identifier: ExtensionIdentifier; displayName: string }, justification: string | undefined, silent: boolean | undefined): Promise<boolean> {\n\t\t// This needs to be done in both MainThread & ExtHost ChatProvider\n\t\tconst providerId = INTERNAL_AUTH_PROVIDER_PREFIX + to.identifier.value;\n\t\tconst session = await this._extHostAuthentication.getSession(from, providerId, [], { silent: true });\n\n\t\tif (session) {\n\t\t\tthis.$updateModelAccesslist([{ from: from.identifier, to: to.identifier, enabled: true }]);\n\t\t\treturn true;\n\t\t}\n\n\t\tif (silent) {\n\t\t\treturn false;\n\t\t}\n\n\t\ttry {\n\t\t\tconst detail = justification\n\t\t\t\t? localize('chatAccessWithJustification', \"Justification: {1}\", to.displayName, justification)\n\t\t\t\t: undefined;\n\t\t\tawait this._extHostAuthentication.getSession(from, providerId, [], { forceNewSession: { detail } });\n\t\t\tthis.$updateModelAccesslist([{ from: from.identifier, to: to.identifier, enabled: true }]);\n\t\t\treturn true;\n\n\t\t} catch (err) {\n\t\t\t// ignore\n\t\t\treturn false;\n\t\t}\n\t}\n\n\tprivate _isUsingAuth(from: ExtensionIdentifier, toMetadata: ILanguageModelChatMetadata): toMetadata is ILanguageModelChatMetadata & { auth: NonNullable<ILanguageModelChatMetadata['auth']> } {\n\t\t// If the 'to' extension uses an auth check\n\t\treturn !!toMetadata.auth\n\t\t\t// And we're asking from a different extension\n\t\t\t&& !ExtensionIdentifier.equals(toMetadata.extension, from);\n\t}\n\n\tprivate async _fakeAuthPopulate(metadata: ILanguageModelChatMetadata): Promise<void> {\n\n\t\tif (!metadata.auth) {\n\t\t\treturn;\n\t\t}\n\n\t\tfor (const from of this._languageAccessInformationExtensions) {\n\t\t\ttry {\n\t\t\t\tawait this._getAuthAccess(from, { identifier: metadata.extension, displayName: '' }, undefined, true);\n\t\t\t} catch (err) {\n\t\t\t\tthis._logService.error('Fake Auth request failed');\n\t\t\t\tthis._logService.error(err);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate async _computeTokenLength(languageModelId: string, value: string | vscode.LanguageModelChatMessage, token: vscode.CancellationToken): Promise<number> {\n\n\t\tconst data = this._allLanguageModelData.get(languageModelId);\n\t\tif (!data) {\n\t\t\tthrow extHostTypes.LanguageModelError.NotFound(`Language model '${languageModelId}' is unknown.`);\n\t\t}\n\n\t\tconst local = Iterable.find(this._languageModels.values(), candidate => candidate.languageModelId === languageModelId);\n\t\tif (local) {\n\t\t\t// stay inside the EH\n\t\t\treturn local.provider.provideTokenCount(value, token);\n\t\t}\n\n\t\treturn this._proxy.$countTokens(languageModelId, (typeof value === 'string' ? value : typeConvert.LanguageModelChatMessage.from(value)), token);\n\t}\n\n\t$updateModelAccesslist(data: { from: ExtensionIdentifier; to: ExtensionIdentifier; enabled: boolean }[]): void {\n\t\tconst updated = new Array<{ from: ExtensionIdentifier; to: ExtensionIdentifier }>();\n\t\tfor (const { from, to, enabled } of data) {\n\t\t\tconst set = this._modelAccessList.get(from) ?? new ExtensionIdentifierSet();\n\t\t\tconst oldValue = set.has(to);\n\t\t\tif (oldValue !== enabled) {\n\t\t\t\tif (enabled) {\n\t\t\t\t\tset.add(to);\n\t\t\t\t} else {\n\t\t\t\t\tset.delete(to);\n\t\t\t\t}\n\t\t\t\tthis._modelAccessList.set(from, set);\n\t\t\t\tconst newItem = { from, to };\n\t\t\t\tupdated.push(newItem);\n\t\t\t\tthis._onDidChangeModelAccess.fire(newItem);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate readonly _languageAccessInformationExtensions = new Set<Readonly<IExtensionDescription>>();\n\n\tcreateLanguageModelAccessInformation(from: Readonly<IExtensionDescription>): vscode.LanguageModelAccessInformation {\n\n\t\tthis._languageAccessInformationExtensions.add(from);\n\n\t\tconst that = this;\n\t\tconst _onDidChangeAccess = Event.signal(Event.filter(this._onDidChangeModelAccess.event, e => ExtensionIdentifier.equals(e.from, from.identifier)));\n\t\tconst _onDidAddRemove = Event.signal(this._onDidChangeProviders.event);\n\n\t\treturn {\n\t\t\tget onDidChange() {\n\t\t\t\treturn Event.any(_onDidChangeAccess, _onDidAddRemove);\n\t\t\t},\n\t\t\tcanSendRequest(chat: vscode.LanguageModelChat): boolean | undefined {\n\n\t\t\t\tlet metadata: ILanguageModelChatMetadata | undefined;\n\n\t\t\t\tout: for (const [_, value] of that._allLanguageModelData) {\n\t\t\t\t\tfor (const candidate of value.apiObjects.values()) {\n\t\t\t\t\t\tif (candidate === chat) {\n\t\t\t\t\t\t\tmetadata = value.metadata;\n\t\t\t\t\t\t\tbreak out;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (!metadata) {\n\t\t\t\t\treturn undefined;\n\t\t\t\t}\n\t\t\t\tif (!that._isUsingAuth(from.identifier, metadata)) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\n\t\t\t\tconst list = that._modelAccessList.get(from.identifier);\n\t\t\t\tif (!list) {\n\t\t\t\t\treturn undefined;\n\t\t\t\t}\n\t\t\t\treturn list.has(metadata.extension);\n\t\t\t}\n\t\t};\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
