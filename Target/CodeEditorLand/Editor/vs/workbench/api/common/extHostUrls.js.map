{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/api/common/extHostUrls.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport type * as vscode from 'vscode';\nimport { MainContext, IMainContext, ExtHostUrlsShape, MainThreadUrlsShape } from './extHost.protocol.js';\nimport { URI, UriComponents } from '../../../base/common/uri.js';\nimport { toDisposable } from '../../../base/common/lifecycle.js';\nimport { onUnexpectedError } from '../../../base/common/errors.js';\nimport { ExtensionIdentifierSet, IExtensionDescription } from '../../../platform/extensions/common/extensions.js';\n\nexport class ExtHostUrls implements ExtHostUrlsShape {\n\n\tprivate static HandlePool = 0;\n\tprivate readonly _proxy: MainThreadUrlsShape;\n\n\tprivate handles = new ExtensionIdentifierSet();\n\tprivate handlers = new Map<number, vscode.UriHandler>();\n\n\tconstructor(\n\t\tmainContext: IMainContext\n\t) {\n\t\tthis._proxy = mainContext.getProxy(MainContext.MainThreadUrls);\n\t}\n\n\tregisterUriHandler(extension: IExtensionDescription, handler: vscode.UriHandler): vscode.Disposable {\n\t\tconst extensionId = extension.identifier;\n\t\tif (this.handles.has(extensionId)) {\n\t\t\tthrow new Error(`Protocol handler already registered for extension ${extensionId}`);\n\t\t}\n\n\t\tconst handle = ExtHostUrls.HandlePool++;\n\t\tthis.handles.add(extensionId);\n\t\tthis.handlers.set(handle, handler);\n\t\tthis._proxy.$registerUriHandler(handle, extensionId, extension.displayName || extension.name);\n\n\t\treturn toDisposable(() => {\n\t\t\tthis.handles.delete(extensionId);\n\t\t\tthis.handlers.delete(handle);\n\t\t\tthis._proxy.$unregisterUriHandler(handle);\n\t\t});\n\t}\n\n\t$handleExternalUri(handle: number, uri: UriComponents): Promise<void> {\n\t\tconst handler = this.handlers.get(handle);\n\n\t\tif (!handler) {\n\t\t\treturn Promise.resolve(undefined);\n\t\t}\n\t\ttry {\n\t\t\thandler.handleUri(URI.revive(uri));\n\t\t} catch (err) {\n\t\t\tonUnexpectedError(err);\n\t\t}\n\n\t\treturn Promise.resolve(undefined);\n\t}\n\n\tasync createAppUri(uri: URI): Promise<vscode.Uri> {\n\t\treturn URI.revive(await this._proxy.$createAppUri(uri));\n\t}\n}\n"],
  "mappings": ";;AAMA,SAAS,aAAa,cAAc,kBAAkB,2BAA2B;AACjF,SAAS,KAAK,qBAAqB;AACnC,SAAS,oBAAoB;AAC7B,SAAS,yBAAyB;AAClC,SAAS,wBAAwB,6BAA6B;AAEvD,MAAM,YAAwC;AAAA,EAZrD,OAYqD;AAAA;AAAA;AAAA,EAEpD,OAAe,aAAa;AAAA,EACX;AAAA,EAET,UAAU,IAAI,uBAAuB;AAAA,EACrC,WAAW,oBAAI,IAA+B;AAAA,EAEtD,YACC,aACC;AACD,SAAK,SAAS,YAAY,SAAS,YAAY,cAAc;AAAA,EAC9D;AAAA,EAEA,mBAAmB,WAAkC,SAA+C;AACnG,UAAM,cAAc,UAAU;AAC9B,QAAI,KAAK,QAAQ,IAAI,WAAW,GAAG;AAClC,YAAM,IAAI,MAAM,qDAAqD,WAAW,EAAE;AAAA,IACnF;AAEA,UAAM,SAAS,YAAY;AAC3B,SAAK,QAAQ,IAAI,WAAW;AAC5B,SAAK,SAAS,IAAI,QAAQ,OAAO;AACjC,SAAK,OAAO,oBAAoB,QAAQ,aAAa,UAAU,eAAe,UAAU,IAAI;AAE5F,WAAO,aAAa,MAAM;AACzB,WAAK,QAAQ,OAAO,WAAW;AAC/B,WAAK,SAAS,OAAO,MAAM;AAC3B,WAAK,OAAO,sBAAsB,MAAM;AAAA,IACzC,CAAC;AAAA,EACF;AAAA,EAEA,mBAAmB,QAAgB,KAAmC;AACrE,UAAM,UAAU,KAAK,SAAS,IAAI,MAAM;AAExC,QAAI,CAAC,SAAS;AACb,aAAO,QAAQ,QAAQ,MAAS;AAAA,IACjC;AACA,QAAI;AACH,cAAQ,UAAU,IAAI,OAAO,GAAG,CAAC;AAAA,IAClC,SAAS,KAAK;AACb,wBAAkB,GAAG;AAAA,IACtB;AAEA,WAAO,QAAQ,QAAQ,MAAS;AAAA,EACjC;AAAA,EAEA,MAAM,aAAa,KAA+B;AACjD,WAAO,IAAI,OAAO,MAAM,KAAK,OAAO,cAAc,GAAG,CAAC;AAAA,EACvD;AACD;",
  "names": []
}
