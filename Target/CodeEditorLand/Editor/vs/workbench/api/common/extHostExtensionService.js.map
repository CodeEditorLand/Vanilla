{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/api/common/extHostExtensionService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n/* eslint-disable local/code-no-native-private */\n\nimport type * as vscode from \"vscode\";\nimport {\n\tBarrier,\n\tIntervalTimer,\n\tasPromise,\n\ttimeout,\n} from \"../../../base/common/async.js\";\nimport { VSBuffer } from \"../../../base/common/buffer.js\";\nimport * as errors from \"../../../base/common/errors.js\";\nimport { Emitter, Event } from \"../../../base/common/event.js\";\nimport {\n\tDisposable,\n\tDisposableStore,\n\ttype IDisposable,\n\tdispose,\n\ttoDisposable,\n} from \"../../../base/common/lifecycle.js\";\nimport { Schemas } from \"../../../base/common/network.js\";\nimport * as path from \"../../../base/common/path.js\";\nimport * as performance from \"../../../base/common/performance.js\";\nimport { isCI, setTimeout0 } from \"../../../base/common/platform.js\";\nimport {\n\textUriBiasedIgnorePathCase,\n\tjoinPath,\n\toriginalFSPath,\n} from \"../../../base/common/resources.js\";\nimport { StopWatch } from \"../../../base/common/stopwatch.js\";\nimport { TernarySearchTree } from \"../../../base/common/ternarySearchTree.js\";\nimport { URI, type UriComponents } from \"../../../base/common/uri.js\";\nimport * as nls from \"../../../nls.js\";\nimport {\n\tExtensionIdentifier,\n\tExtensionIdentifierMap,\n\tExtensionIdentifierSet,\n\ttype IExtensionDescription,\n} from \"../../../platform/extensions/common/extensions.js\";\nimport {\n\tIInstantiationService,\n\tcreateDecorator,\n} from \"../../../platform/instantiation/common/instantiation.js\";\nimport { ServiceCollection } from \"../../../platform/instantiation/common/serviceCollection.js\";\nimport { ILogService } from \"../../../platform/log/common/log.js\";\nimport {\n\ttype IRemoteConnectionData,\n\tManagedRemoteConnection,\n\tRemoteAuthorityResolverErrorCode,\n\ttype ResolvedAuthority,\n\ttype ResolvedOptions,\n\ttype TunnelInformation,\n\tWebSocketRemoteConnection,\n\tgetRemoteAuthorityPrefix,\n} from \"../../../platform/remote/common/remoteAuthorityResolver.js\";\nimport {\n\tExtensionDescriptionRegistry,\n\ttype IActivationEventsReader,\n} from \"../../services/extensions/common/extensionDescriptionRegistry.js\";\nimport type {\n\tIExtensionDescriptionDelta,\n\tIExtensionHostInitData,\n} from \"../../services/extensions/common/extensionHostProtocol.js\";\nimport type { IResolveAuthorityResult } from \"../../services/extensions/common/extensionHostProxy.js\";\nimport {\n\tActivationKind,\n\ttype ExtensionActivationReason,\n\ttype MissingExtensionDependency,\n\tcheckProposedApiEnabled,\n\tisProposedApiEnabled,\n} from \"../../services/extensions/common/extensions.js\";\nimport type { Dto } from \"../../services/extensions/common/proxyIdentifier.js\";\nimport {\n\ttype IExtensionActivationHost,\n\tcheckActivateWorkspaceContainsExtension,\n} from \"../../services/extensions/common/workspaceContains.js\";\nimport {\n\ttype ExtHostExtensionServiceShape,\n\tMainContext,\n\ttype MainThreadExtensionServiceShape,\n\ttype MainThreadTelemetryShape,\n\ttype MainThreadWorkspaceShape,\n} from \"./extHost.protocol.js\";\nimport {\n\ttype ExtHostConfiguration,\n\tIExtHostConfiguration,\n} from \"./extHostConfiguration.js\";\nimport {\n\tActivatedExtension,\n\tEmptyExtension,\n\tExtensionActivationTimes,\n\tExtensionActivationTimesBuilder,\n\ttype ExtensionActivationTimesFragment,\n\tExtensionsActivator,\n\tHostExtension,\n\ttype IExtensionAPI,\n\ttype IExtensionModule,\n} from \"./extHostExtensionActivator.js\";\nimport { IExtHostInitDataService } from \"./extHostInitDataService.js\";\nimport { IExtHostLanguageModels } from \"./extHostLanguageModels.js\";\nimport { IExtHostLocalizationService } from \"./extHostLocalizationService.js\";\nimport { IExtHostManagedSockets } from \"./extHostManagedSockets.js\";\nimport { ExtensionGlobalMemento, ExtensionMemento } from \"./extHostMemento.js\";\nimport { IExtHostRpcService } from \"./extHostRpcService.js\";\nimport {\n\tExtHostSecretState,\n\tIExtHostSecretState,\n} from \"./extHostSecretState.js\";\nimport { ExtensionSecrets } from \"./extHostSecrets.js\";\nimport { ExtHostStorage, IExtHostStorage } from \"./extHostStorage.js\";\nimport { IExtensionStoragePaths } from \"./extHostStoragePaths.js\";\nimport { IExtHostTerminalService } from \"./extHostTerminalService.js\";\nimport { IExtHostTunnelService } from \"./extHostTunnelService.js\";\nimport {\n\tManagedResolvedAuthority as ExtHostManagedResolvedAuthority,\n\tExtensionKind,\n\tExtensionMode,\n\ttype ExtensionRuntime,\n\tRemoteAuthorityResolverError,\n} from \"./extHostTypes.js\";\nimport {\n\ttype ExtHostWorkspace,\n\tIExtHostWorkspace,\n} from \"./extHostWorkspace.js\";\n\ninterface ITestRunner {\n\t/** Old test runner API, as exported from `vscode/lib/testrunner` */\n\trun(\n\t\ttestsRoot: string,\n\t\tclb: (error: Error, failures?: number) => void,\n\t): void;\n}\n\ninterface INewTestRunner {\n\t/** New test runner API, as explained in the extension test doc */\n\trun(): Promise<void>;\n}\n\nexport const IHostUtils = createDecorator<IHostUtils>(\"IHostUtils\");\n\nexport interface IHostUtils {\n\treadonly _serviceBrand: undefined;\n\treadonly pid: number | undefined;\n\texit(code: number): void;\n\tfsExists?(path: string): Promise<boolean>;\n\tfsRealpath?(path: string): Promise<string>;\n}\n\ntype TelemetryActivationEventFragment = {\n\tid: {\n\t\tclassification: \"PublicNonPersonalData\";\n\t\tpurpose: \"FeatureInsight\";\n\t\tcomment: \"The identifier of an extension\";\n\t};\n\tname: {\n\t\tclassification: \"PublicNonPersonalData\";\n\t\tpurpose: \"FeatureInsight\";\n\t\tcomment: \"The name of the extension\";\n\t};\n\textensionVersion: {\n\t\tclassification: \"PublicNonPersonalData\";\n\t\tpurpose: \"FeatureInsight\";\n\t\tcomment: \"The version of the extension\";\n\t};\n\tpublisherDisplayName: {\n\t\tclassification: \"SystemMetaData\";\n\t\tpurpose: \"FeatureInsight\";\n\t\tcomment: \"The publisher of the extension\";\n\t};\n\tactivationEvents: {\n\t\tclassification: \"SystemMetaData\";\n\t\tpurpose: \"FeatureInsight\";\n\t\tcomment: \"All activation events of the extension\";\n\t};\n\tisBuiltin: {\n\t\tclassification: \"SystemMetaData\";\n\t\tpurpose: \"FeatureInsight\";\n\t\tcomment: \"If the extension is builtin or git installed\";\n\t};\n\treason: {\n\t\tclassification: \"SystemMetaData\";\n\t\tpurpose: \"FeatureInsight\";\n\t\tcomment: \"The activation event\";\n\t};\n\treasonId: {\n\t\tclassification: \"PublicNonPersonalData\";\n\t\tpurpose: \"FeatureInsight\";\n\t\tcomment: \"The identifier of the activation event\";\n\t};\n};\n\nexport abstract class AbstractExtHostExtensionService\n\textends Disposable\n\timplements ExtHostExtensionServiceShape\n{\n\treadonly _serviceBrand: undefined;\n\n\tabstract readonly extensionRuntime: ExtensionRuntime;\n\n\tprivate readonly _onDidChangeRemoteConnectionData = this._register(\n\t\tnew Emitter<void>(),\n\t);\n\tpublic readonly onDidChangeRemoteConnectionData =\n\t\tthis._onDidChangeRemoteConnectionData.event;\n\n\tprotected readonly _hostUtils: IHostUtils;\n\tprotected readonly _initData: IExtensionHostInitData;\n\tprotected readonly _extHostContext: IExtHostRpcService;\n\tprotected readonly _instaService: IInstantiationService;\n\tprotected readonly _extHostWorkspace: ExtHostWorkspace;\n\tprotected readonly _extHostConfiguration: ExtHostConfiguration;\n\tprotected readonly _logService: ILogService;\n\tprotected readonly _extHostTunnelService: IExtHostTunnelService;\n\tprotected readonly _extHostTerminalService: IExtHostTerminalService;\n\tprotected readonly _extHostLocalizationService: IExtHostLocalizationService;\n\n\tprotected readonly _mainThreadWorkspaceProxy: MainThreadWorkspaceShape;\n\tprotected readonly _mainThreadTelemetryProxy: MainThreadTelemetryShape;\n\tprotected readonly _mainThreadExtensionsProxy: MainThreadExtensionServiceShape;\n\n\tprivate readonly _almostReadyToRunExtensions: Barrier;\n\tprivate readonly _readyToStartExtensionHost: Barrier;\n\tprivate readonly _readyToRunExtensions: Barrier;\n\tprivate readonly _eagerExtensionsActivated: Barrier;\n\n\tprivate readonly _activationEventsReader: SyncedActivationEventsReader;\n\tprotected readonly _myRegistry: ExtensionDescriptionRegistry;\n\tprotected readonly _globalRegistry: ExtensionDescriptionRegistry;\n\tprivate readonly _storage: ExtHostStorage;\n\tprivate readonly _secretState: ExtHostSecretState;\n\tprivate readonly _storagePath: IExtensionStoragePaths;\n\tprivate readonly _activator: ExtensionsActivator;\n\tprivate _extensionPathIndex: Promise<ExtensionPaths> | null;\n\tprivate _realPathCache = new Map<string, Promise<string>>();\n\n\tprivate readonly _resolvers: {\n\t\t[authorityPrefix: string]: vscode.RemoteAuthorityResolver;\n\t};\n\n\tprivate _started: boolean;\n\tprivate _isTerminating = false;\n\tprivate _remoteConnectionData: IRemoteConnectionData | null;\n\n\tconstructor(\n\t\t@IInstantiationService instaService: IInstantiationService,\n\t\t@IHostUtils hostUtils: IHostUtils,\n\t\t@IExtHostRpcService extHostContext: IExtHostRpcService,\n\t\t@IExtHostWorkspace extHostWorkspace: IExtHostWorkspace,\n\t\t@IExtHostConfiguration extHostConfiguration: IExtHostConfiguration,\n\t\t@ILogService logService: ILogService,\n\t\t@IExtHostInitDataService initData: IExtHostInitDataService,\n\t\t@IExtensionStoragePaths storagePath: IExtensionStoragePaths,\n\t\t@IExtHostTunnelService extHostTunnelService: IExtHostTunnelService,\n\t\t@IExtHostTerminalService\n\t\textHostTerminalService: IExtHostTerminalService,\n\t\t@IExtHostLocalizationService\n\t\textHostLocalizationService: IExtHostLocalizationService,\n\t\t@IExtHostManagedSockets\n\t\tprivate readonly _extHostManagedSockets: IExtHostManagedSockets,\n\t\t@IExtHostLanguageModels\n\t\tprivate readonly _extHostLanguageModels: IExtHostLanguageModels,\n\t) {\n\t\tsuper();\n\t\tthis._hostUtils = hostUtils;\n\t\tthis._extHostContext = extHostContext;\n\t\tthis._initData = initData;\n\n\t\tthis._extHostWorkspace = extHostWorkspace;\n\t\tthis._extHostConfiguration = extHostConfiguration;\n\t\tthis._logService = logService;\n\t\tthis._extHostTunnelService = extHostTunnelService;\n\t\tthis._extHostTerminalService = extHostTerminalService;\n\t\tthis._extHostLocalizationService = extHostLocalizationService;\n\n\t\tthis._mainThreadWorkspaceProxy = this._extHostContext.getProxy(\n\t\t\tMainContext.MainThreadWorkspace,\n\t\t);\n\t\tthis._mainThreadTelemetryProxy = this._extHostContext.getProxy(\n\t\t\tMainContext.MainThreadTelemetry,\n\t\t);\n\t\tthis._mainThreadExtensionsProxy = this._extHostContext.getProxy(\n\t\t\tMainContext.MainThreadExtensionService,\n\t\t);\n\n\t\tthis._almostReadyToRunExtensions = new Barrier();\n\t\tthis._readyToStartExtensionHost = new Barrier();\n\t\tthis._readyToRunExtensions = new Barrier();\n\t\tthis._eagerExtensionsActivated = new Barrier();\n\t\tthis._activationEventsReader = new SyncedActivationEventsReader(\n\t\t\tthis._initData.extensions.activationEvents,\n\t\t);\n\t\tthis._globalRegistry = new ExtensionDescriptionRegistry(\n\t\t\tthis._activationEventsReader,\n\t\t\tthis._initData.extensions.allExtensions,\n\t\t);\n\t\tconst myExtensionsSet = new ExtensionIdentifierSet(\n\t\t\tthis._initData.extensions.myExtensions,\n\t\t);\n\t\tthis._myRegistry = new ExtensionDescriptionRegistry(\n\t\t\tthis._activationEventsReader,\n\t\t\tfilterExtensions(this._globalRegistry, myExtensionsSet),\n\t\t);\n\n\t\tif (isCI) {\n\t\t\tthis._logService.info(\n\t\t\t\t`Creating extension host with the following global extensions: ${printExtIds(this._globalRegistry)}`,\n\t\t\t);\n\t\t\tthis._logService.info(\n\t\t\t\t`Creating extension host with the following local extensions: ${printExtIds(this._myRegistry)}`,\n\t\t\t);\n\t\t}\n\n\t\tthis._storage = new ExtHostStorage(\n\t\t\tthis._extHostContext,\n\t\t\tthis._logService,\n\t\t);\n\t\tthis._secretState = new ExtHostSecretState(this._extHostContext);\n\t\tthis._storagePath = storagePath;\n\n\t\tthis._instaService = this._store.add(\n\t\t\tinstaService.createChild(\n\t\t\t\tnew ServiceCollection(\n\t\t\t\t\t[IExtHostStorage, this._storage],\n\t\t\t\t\t[IExtHostSecretState, this._secretState],\n\t\t\t\t),\n\t\t\t),\n\t\t);\n\n\t\tthis._activator = this._register(\n\t\t\tnew ExtensionsActivator(\n\t\t\t\tthis._myRegistry,\n\t\t\t\tthis._globalRegistry,\n\t\t\t\t{\n\t\t\t\t\tonExtensionActivationError: (\n\t\t\t\t\t\textensionId: ExtensionIdentifier,\n\t\t\t\t\t\terror: Error,\n\t\t\t\t\t\tmissingExtensionDependency: MissingExtensionDependency | null,\n\t\t\t\t\t): void => {\n\t\t\t\t\t\tthis._mainThreadExtensionsProxy.$onExtensionActivationError(\n\t\t\t\t\t\t\textensionId,\n\t\t\t\t\t\t\terrors.transformErrorForSerialization(error),\n\t\t\t\t\t\t\tmissingExtensionDependency,\n\t\t\t\t\t\t);\n\t\t\t\t\t},\n\n\t\t\t\t\tactualActivateExtension: async (\n\t\t\t\t\t\textensionId: ExtensionIdentifier,\n\t\t\t\t\t\treason: ExtensionActivationReason,\n\t\t\t\t\t): Promise<ActivatedExtension> => {\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\tExtensionDescriptionRegistry.isHostExtension(\n\t\t\t\t\t\t\t\textensionId,\n\t\t\t\t\t\t\t\tthis._myRegistry,\n\t\t\t\t\t\t\t\tthis._globalRegistry,\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\tawait this._mainThreadExtensionsProxy.$activateExtension(\n\t\t\t\t\t\t\t\textensionId,\n\t\t\t\t\t\t\t\treason,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\treturn new HostExtension();\n\t\t\t\t\t\t}\n\t\t\t\t\t\tconst extensionDescription =\n\t\t\t\t\t\t\tthis._myRegistry.getExtensionDescription(\n\t\t\t\t\t\t\t\textensionId,\n\t\t\t\t\t\t\t)!;\n\t\t\t\t\t\treturn this._activateExtension(\n\t\t\t\t\t\t\textensionDescription,\n\t\t\t\t\t\t\treason,\n\t\t\t\t\t\t);\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tthis._logService,\n\t\t\t),\n\t\t);\n\t\tthis._extensionPathIndex = null;\n\t\tthis._resolvers = Object.create(null);\n\t\tthis._started = false;\n\t\tthis._remoteConnectionData = this._initData.remote.connectionData;\n\t}\n\n\tpublic getRemoteConnectionData(): IRemoteConnectionData | null {\n\t\treturn this._remoteConnectionData;\n\t}\n\n\tpublic async initialize(): Promise<void> {\n\t\ttry {\n\t\t\tawait this._beforeAlmostReadyToRunExtensions();\n\t\t\tthis._almostReadyToRunExtensions.open();\n\n\t\t\tawait this._extHostWorkspace.waitForInitializeCall();\n\t\t\tperformance.mark(\"code/extHost/ready\");\n\t\t\tthis._readyToStartExtensionHost.open();\n\n\t\t\tif (this._initData.autoStart) {\n\t\t\t\tthis._startExtensionHost();\n\t\t\t}\n\t\t} catch (err) {\n\t\t\terrors.onUnexpectedError(err);\n\t\t}\n\t}\n\n\tprivate async _deactivateAll(): Promise<void> {\n\t\tthis._storagePath.onWillDeactivateAll();\n\n\t\tlet allPromises: Promise<void>[] = [];\n\t\ttry {\n\t\t\tconst allExtensions =\n\t\t\t\tthis._myRegistry.getAllExtensionDescriptions();\n\t\t\tconst allExtensionsIds = allExtensions.map((ext) => ext.identifier);\n\t\t\tconst activatedExtensions = allExtensionsIds.filter((id) =>\n\t\t\t\tthis.isActivated(id),\n\t\t\t);\n\n\t\t\tallPromises = activatedExtensions.map((extensionId) => {\n\t\t\t\treturn this._deactivate(extensionId);\n\t\t\t});\n\t\t} catch (err) {\n\t\t\t// TODO: write to log once we have one\n\t\t}\n\t\tawait Promise.all(allPromises);\n\t}\n\n\tpublic terminate(reason: string, code = 0): void {\n\t\tif (this._isTerminating) {\n\t\t\t// we are already shutting down...\n\t\t\treturn;\n\t\t}\n\t\tthis._isTerminating = true;\n\t\tthis._logService.info(`Extension host terminating: ${reason}`);\n\t\tthis._logService.flush();\n\n\t\tthis._extHostTerminalService.dispose();\n\t\tthis._activator.dispose();\n\n\t\terrors.setUnexpectedErrorHandler((err) => {\n\t\t\tthis._logService.error(err);\n\t\t});\n\n\t\t// Invalidate all proxies\n\t\tthis._extHostContext.dispose();\n\n\t\tconst extensionsDeactivated = this._deactivateAll();\n\n\t\t// Give extensions at most 5 seconds to wrap up any async deactivate, then exit\n\t\tPromise.race([timeout(5000), extensionsDeactivated]).finally(() => {\n\t\t\tif (this._hostUtils.pid) {\n\t\t\t\tthis._logService.info(\n\t\t\t\t\t`Extension host with pid ${this._hostUtils.pid} exiting with code ${code}`,\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\tthis._logService.info(\n\t\t\t\t\t`Extension host exiting with code ${code}`,\n\t\t\t\t);\n\t\t\t}\n\t\t\tthis._logService.flush();\n\t\t\tthis._logService.dispose();\n\t\t\tthis._hostUtils.exit(code);\n\t\t});\n\t}\n\n\tpublic isActivated(extensionId: ExtensionIdentifier): boolean {\n\t\tif (this._readyToRunExtensions.isOpen()) {\n\t\t\treturn this._activator.isActivated(extensionId);\n\t\t}\n\t\treturn false;\n\t}\n\n\tpublic async getExtension(\n\t\textensionId: string,\n\t): Promise<IExtensionDescription | undefined> {\n\t\tconst ext =\n\t\t\tawait this._mainThreadExtensionsProxy.$getExtension(extensionId);\n\t\treturn (\n\t\t\text && {\n\t\t\t\t...ext,\n\t\t\t\tidentifier: new ExtensionIdentifier(ext.identifier.value),\n\t\t\t\textensionLocation: URI.revive(ext.extensionLocation),\n\t\t\t}\n\t\t);\n\t}\n\n\tprivate _activateByEvent(\n\t\tactivationEvent: string,\n\t\tstartup: boolean,\n\t): Promise<void> {\n\t\treturn this._activator.activateByEvent(activationEvent, startup);\n\t}\n\n\tprivate _activateById(\n\t\textensionId: ExtensionIdentifier,\n\t\treason: ExtensionActivationReason,\n\t): Promise<void> {\n\t\treturn this._activator.activateById(extensionId, reason);\n\t}\n\n\tpublic activateByIdWithErrors(\n\t\textensionId: ExtensionIdentifier,\n\t\treason: ExtensionActivationReason,\n\t): Promise<void> {\n\t\treturn this._activateById(extensionId, reason).then(() => {\n\t\t\tconst extension =\n\t\t\t\tthis._activator.getActivatedExtension(extensionId);\n\t\t\tif (extension.activationFailed) {\n\t\t\t\t// activation failed => bubble up the error as the promise result\n\t\t\t\treturn Promise.reject(extension.activationFailedError);\n\t\t\t}\n\t\t\treturn undefined;\n\t\t});\n\t}\n\n\tpublic getExtensionRegistry(): Promise<ExtensionDescriptionRegistry> {\n\t\treturn this._readyToRunExtensions.wait().then((_) => this._myRegistry);\n\t}\n\n\tpublic getExtensionExports(\n\t\textensionId: ExtensionIdentifier,\n\t): IExtensionAPI | null | undefined {\n\t\tif (this._readyToRunExtensions.isOpen()) {\n\t\t\treturn this._activator.getActivatedExtension(extensionId).exports;\n\t\t} else {\n\t\t\ttry {\n\t\t\t\treturn this._activator.getActivatedExtension(extensionId)\n\t\t\t\t\t.exports;\n\t\t\t} catch (err) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Applies realpath to file-uris and returns all others uris unmodified.\n\t * The real path is cached for the lifetime of the extension host.\n\t */\n\tprivate async _realPathExtensionUri(uri: URI): Promise<URI> {\n\t\tif (uri.scheme === Schemas.file && this._hostUtils.fsRealpath) {\n\t\t\tconst fsPath = uri.fsPath;\n\t\t\tif (!this._realPathCache.has(fsPath)) {\n\t\t\t\tthis._realPathCache.set(\n\t\t\t\t\tfsPath,\n\t\t\t\t\tthis._hostUtils.fsRealpath(fsPath),\n\t\t\t\t);\n\t\t\t}\n\t\t\tconst realpathValue = await this._realPathCache.get(fsPath)!;\n\t\t\treturn URI.file(realpathValue);\n\t\t}\n\t\treturn uri;\n\t}\n\n\t// create trie to enable fast 'filename -> extension id' look up\n\tpublic async getExtensionPathIndex(): Promise<ExtensionPaths> {\n\t\tif (!this._extensionPathIndex) {\n\t\t\tthis._extensionPathIndex = this._createExtensionPathIndex(\n\t\t\t\tthis._myRegistry.getAllExtensionDescriptions(),\n\t\t\t).then((searchTree) => {\n\t\t\t\treturn new ExtensionPaths(searchTree);\n\t\t\t});\n\t\t}\n\t\treturn this._extensionPathIndex;\n\t}\n\n\t/**\n\t * create trie to enable fast 'filename -> extension id' look up\n\t */\n\tprivate async _createExtensionPathIndex(\n\t\textensions: IExtensionDescription[],\n\t): Promise<TernarySearchTree<URI, IExtensionDescription>> {\n\t\tconst tst = TernarySearchTree.forUris<IExtensionDescription>((key) => {\n\t\t\t// using the default/biased extUri-util because the IExtHostFileSystemInfo-service\n\t\t\t// isn't ready to be used yet, e.g the knowledge about `file` protocol and others\n\t\t\t// comes in while this code runs\n\t\t\treturn extUriBiasedIgnorePathCase.ignorePathCasing(key);\n\t\t});\n\t\t// const tst = TernarySearchTree.forUris<IExtensionDescription>(key => true);\n\t\tawait Promise.all(\n\t\t\textensions.map(async (ext) => {\n\t\t\t\tif (this._getEntryPoint(ext)) {\n\t\t\t\t\tconst uri = await this._realPathExtensionUri(\n\t\t\t\t\t\text.extensionLocation,\n\t\t\t\t\t);\n\t\t\t\t\ttst.set(uri, ext);\n\t\t\t\t}\n\t\t\t}),\n\t\t);\n\t\treturn tst;\n\t}\n\n\tprivate _deactivate(extensionId: ExtensionIdentifier): Promise<void> {\n\t\tlet result = Promise.resolve(undefined);\n\n\t\tif (!this._readyToRunExtensions.isOpen()) {\n\t\t\treturn result;\n\t\t}\n\n\t\tif (!this._activator.isActivated(extensionId)) {\n\t\t\treturn result;\n\t\t}\n\n\t\tconst extension = this._activator.getActivatedExtension(extensionId);\n\t\tif (!extension) {\n\t\t\treturn result;\n\t\t}\n\n\t\t// call deactivate if available\n\t\ttry {\n\t\t\tif (typeof extension.module.deactivate === \"function\") {\n\t\t\t\tresult = Promise.resolve(extension.module.deactivate()).then(\n\t\t\t\t\tundefined,\n\t\t\t\t\t(err) => {\n\t\t\t\t\t\tthis._logService.error(err);\n\t\t\t\t\t\treturn Promise.resolve(undefined);\n\t\t\t\t\t},\n\t\t\t\t);\n\t\t\t}\n\t\t} catch (err) {\n\t\t\tthis._logService.error(\n\t\t\t\t`An error occurred when deactivating the extension '${extensionId.value}':`,\n\t\t\t);\n\t\t\tthis._logService.error(err);\n\t\t}\n\n\t\t// clean up subscriptions\n\t\ttry {\n\t\t\textension.disposable.dispose();\n\t\t} catch (err) {\n\t\t\tthis._logService.error(\n\t\t\t\t`An error occurred when disposing the subscriptions for extension '${extensionId.value}':`,\n\t\t\t);\n\t\t\tthis._logService.error(err);\n\t\t}\n\n\t\treturn result;\n\t}\n\n\t// --- impl\n\n\tprivate async _activateExtension(\n\t\textensionDescription: IExtensionDescription,\n\t\treason: ExtensionActivationReason,\n\t): Promise<ActivatedExtension> {\n\t\tif (this._initData.remote.isRemote) {\n\t\t\t// remote extension host process\n\t\t\t// do not wait for renderer confirmation\n\t\t\tthis._mainThreadExtensionsProxy.$onWillActivateExtension(\n\t\t\t\textensionDescription.identifier,\n\t\t\t);\n\t\t} else {\n\t\t\t// local extension host process\n\t\t\tawait this._mainThreadExtensionsProxy.$onWillActivateExtension(\n\t\t\t\textensionDescription.identifier,\n\t\t\t);\n\t\t}\n\t\treturn this._doActivateExtension(extensionDescription, reason).then(\n\t\t\t(activatedExtension) => {\n\t\t\t\tconst activationTimes = activatedExtension.activationTimes;\n\t\t\t\tthis._mainThreadExtensionsProxy.$onDidActivateExtension(\n\t\t\t\t\textensionDescription.identifier,\n\t\t\t\t\tactivationTimes.codeLoadingTime,\n\t\t\t\t\tactivationTimes.activateCallTime,\n\t\t\t\t\tactivationTimes.activateResolvedTime,\n\t\t\t\t\treason,\n\t\t\t\t);\n\t\t\t\tthis._logExtensionActivationTimes(\n\t\t\t\t\textensionDescription,\n\t\t\t\t\treason,\n\t\t\t\t\t\"success\",\n\t\t\t\t\tactivationTimes,\n\t\t\t\t);\n\t\t\t\treturn activatedExtension;\n\t\t\t},\n\t\t\t(err) => {\n\t\t\t\tthis._logExtensionActivationTimes(\n\t\t\t\t\textensionDescription,\n\t\t\t\t\treason,\n\t\t\t\t\t\"failure\",\n\t\t\t\t);\n\t\t\t\tthrow err;\n\t\t\t},\n\t\t);\n\t}\n\n\tprivate _logExtensionActivationTimes(\n\t\textensionDescription: IExtensionDescription,\n\t\treason: ExtensionActivationReason,\n\t\toutcome: string,\n\t\tactivationTimes?: ExtensionActivationTimes,\n\t) {\n\t\tconst event = getTelemetryActivationEvent(extensionDescription, reason);\n\t\ttype ExtensionActivationTimesClassification = {\n\t\t\towner: \"jrieken\";\n\t\t\tcomment: \"Timestamps for extension activation\";\n\t\t\toutcome: {\n\t\t\t\tclassification: \"SystemMetaData\";\n\t\t\t\tpurpose: \"FeatureInsight\";\n\t\t\t\tcomment: \"Did extension activation succeed or fail\";\n\t\t\t};\n\t\t} & TelemetryActivationEventFragment &\n\t\t\tExtensionActivationTimesFragment;\n\n\t\ttype ExtensionActivationTimesEvent = {\n\t\t\toutcome: string;\n\t\t} & ActivationTimesEvent &\n\t\t\tTelemetryActivationEvent;\n\n\t\ttype ActivationTimesEvent = {\n\t\t\tstartup?: boolean;\n\t\t\tcodeLoadingTime?: number;\n\t\t\tactivateCallTime?: number;\n\t\t\tactivateResolvedTime?: number;\n\t\t};\n\n\t\tthis._mainThreadTelemetryProxy.$publicLog2<\n\t\t\tExtensionActivationTimesEvent,\n\t\t\tExtensionActivationTimesClassification\n\t\t>(\"extensionActivationTimes\", {\n\t\t\t...event,\n\t\t\t...(activationTimes || {}),\n\t\t\toutcome,\n\t\t});\n\t}\n\n\tprivate _doActivateExtension(\n\t\textensionDescription: IExtensionDescription,\n\t\treason: ExtensionActivationReason,\n\t): Promise<ActivatedExtension> {\n\t\tconst event = getTelemetryActivationEvent(extensionDescription, reason);\n\t\ttype ActivatePluginClassification = {\n\t\t\towner: \"jrieken\";\n\t\t\tcomment: \"Data about how/why an extension was activated\";\n\t\t} & TelemetryActivationEventFragment;\n\t\tthis._mainThreadTelemetryProxy.$publicLog2<\n\t\t\tTelemetryActivationEvent,\n\t\t\tActivatePluginClassification\n\t\t>(\"activatePlugin\", event);\n\t\tconst entryPoint = this._getEntryPoint(extensionDescription);\n\t\tif (!entryPoint) {\n\t\t\t// Treat the extension as being empty => NOT AN ERROR CASE\n\t\t\treturn Promise.resolve(\n\t\t\t\tnew EmptyExtension(ExtensionActivationTimes.NONE),\n\t\t\t);\n\t\t}\n\n\t\tthis._logService.info(\n\t\t\t`ExtensionService#_doActivateExtension ${extensionDescription.identifier.value}, startup: ${reason.startup}, activationEvent: '${reason.activationEvent}'${extensionDescription.identifier.value !== reason.extensionId.value ? `, root cause: ${reason.extensionId.value}` : ``}`,\n\t\t);\n\t\tthis._logService.flush();\n\n\t\tconst extensionInternalStore = new DisposableStore(); // disposables that follow the extension lifecycle\n\t\tconst activationTimesBuilder = new ExtensionActivationTimesBuilder(\n\t\t\treason.startup,\n\t\t);\n\t\treturn Promise.all([\n\t\t\tthis._loadCommonJSModule<IExtensionModule>(\n\t\t\t\textensionDescription,\n\t\t\t\tjoinPath(extensionDescription.extensionLocation, entryPoint),\n\t\t\t\tactivationTimesBuilder,\n\t\t\t),\n\t\t\tthis._loadExtensionContext(\n\t\t\t\textensionDescription,\n\t\t\t\textensionInternalStore,\n\t\t\t),\n\t\t])\n\t\t\t.then((values) => {\n\t\t\t\tperformance.mark(\n\t\t\t\t\t`code/extHost/willActivateExtension/${extensionDescription.identifier.value}`,\n\t\t\t\t);\n\t\t\t\treturn AbstractExtHostExtensionService._callActivate(\n\t\t\t\t\tthis._logService,\n\t\t\t\t\textensionDescription.identifier,\n\t\t\t\t\tvalues[0],\n\t\t\t\t\tvalues[1],\n\t\t\t\t\textensionInternalStore,\n\t\t\t\t\tactivationTimesBuilder,\n\t\t\t\t);\n\t\t\t})\n\t\t\t.then((activatedExtension) => {\n\t\t\t\tperformance.mark(\n\t\t\t\t\t`code/extHost/didActivateExtension/${extensionDescription.identifier.value}`,\n\t\t\t\t);\n\t\t\t\treturn activatedExtension;\n\t\t\t});\n\t}\n\n\tprivate _loadExtensionContext(\n\t\textensionDescription: IExtensionDescription,\n\t\textensionInternalStore: DisposableStore,\n\t): Promise<vscode.ExtensionContext> {\n\t\tconst languageModelAccessInformation =\n\t\t\tthis._extHostLanguageModels.createLanguageModelAccessInformation(\n\t\t\t\textensionDescription,\n\t\t\t);\n\t\tconst globalState = extensionInternalStore.add(\n\t\t\tnew ExtensionGlobalMemento(extensionDescription, this._storage),\n\t\t);\n\t\tconst workspaceState = extensionInternalStore.add(\n\t\t\tnew ExtensionMemento(\n\t\t\t\textensionDescription.identifier.value,\n\t\t\t\tfalse,\n\t\t\t\tthis._storage,\n\t\t\t),\n\t\t);\n\t\tconst secrets = extensionInternalStore.add(\n\t\t\tnew ExtensionSecrets(extensionDescription, this._secretState),\n\t\t);\n\t\tconst extensionMode = extensionDescription.isUnderDevelopment\n\t\t\t? this._initData.environment.extensionTestsLocationURI\n\t\t\t\t? ExtensionMode.Test\n\t\t\t\t: ExtensionMode.Development\n\t\t\t: ExtensionMode.Production;\n\t\tconst extensionKind = this._initData.remote.isRemote\n\t\t\t? ExtensionKind.Workspace\n\t\t\t: ExtensionKind.UI;\n\n\t\tthis._logService.trace(\n\t\t\t`ExtensionService#loadExtensionContext ${extensionDescription.identifier.value}`,\n\t\t);\n\n\t\treturn Promise.all([\n\t\t\tglobalState.whenReady,\n\t\t\tworkspaceState.whenReady,\n\t\t\tthis._storagePath.whenReady,\n\t\t]).then(() => {\n\t\t\tconst that = this;\n\t\t\tlet extension: vscode.Extension<any> | undefined;\n\n\t\t\tlet messagePassingProtocol:\n\t\t\t\t| vscode.MessagePassingProtocol\n\t\t\t\t| undefined;\n\t\t\tconst messagePort = isProposedApiEnabled(\n\t\t\t\textensionDescription,\n\t\t\t\t\"ipc\",\n\t\t\t)\n\t\t\t\t? this._initData.messagePorts?.get(\n\t\t\t\t\t\tExtensionIdentifier.toKey(\n\t\t\t\t\t\t\textensionDescription.identifier,\n\t\t\t\t\t\t),\n\t\t\t\t\t)\n\t\t\t\t: undefined;\n\n\t\t\treturn Object.freeze<vscode.ExtensionContext>({\n\t\t\t\tglobalState,\n\t\t\t\tworkspaceState,\n\t\t\t\tsecrets,\n\t\t\t\tsubscriptions: [],\n\t\t\t\tget languageModelAccessInformation() {\n\t\t\t\t\treturn languageModelAccessInformation;\n\t\t\t\t},\n\t\t\t\tget extensionUri() {\n\t\t\t\t\treturn extensionDescription.extensionLocation;\n\t\t\t\t},\n\t\t\t\tget extensionPath() {\n\t\t\t\t\treturn extensionDescription.extensionLocation.fsPath;\n\t\t\t\t},\n\t\t\t\tasAbsolutePath(relativePath: string) {\n\t\t\t\t\treturn path.join(\n\t\t\t\t\t\textensionDescription.extensionLocation.fsPath,\n\t\t\t\t\t\trelativePath,\n\t\t\t\t\t);\n\t\t\t\t},\n\t\t\t\tget storagePath() {\n\t\t\t\t\treturn that._storagePath.workspaceValue(\n\t\t\t\t\t\textensionDescription,\n\t\t\t\t\t)?.fsPath;\n\t\t\t\t},\n\t\t\t\tget globalStoragePath() {\n\t\t\t\t\treturn that._storagePath.globalValue(extensionDescription)\n\t\t\t\t\t\t.fsPath;\n\t\t\t\t},\n\t\t\t\tget logPath() {\n\t\t\t\t\treturn path.join(\n\t\t\t\t\t\tthat._initData.logsLocation.fsPath,\n\t\t\t\t\t\textensionDescription.identifier.value,\n\t\t\t\t\t);\n\t\t\t\t},\n\t\t\t\tget logUri() {\n\t\t\t\t\treturn URI.joinPath(\n\t\t\t\t\t\tthat._initData.logsLocation,\n\t\t\t\t\t\textensionDescription.identifier.value,\n\t\t\t\t\t);\n\t\t\t\t},\n\t\t\t\tget storageUri() {\n\t\t\t\t\treturn that._storagePath.workspaceValue(\n\t\t\t\t\t\textensionDescription,\n\t\t\t\t\t);\n\t\t\t\t},\n\t\t\t\tget globalStorageUri() {\n\t\t\t\t\treturn that._storagePath.globalValue(extensionDescription);\n\t\t\t\t},\n\t\t\t\tget extensionMode() {\n\t\t\t\t\treturn extensionMode;\n\t\t\t\t},\n\t\t\t\tget extension() {\n\t\t\t\t\tif (extension === undefined) {\n\t\t\t\t\t\textension = new Extension(\n\t\t\t\t\t\t\tthat,\n\t\t\t\t\t\t\textensionDescription.identifier,\n\t\t\t\t\t\t\textensionDescription,\n\t\t\t\t\t\t\textensionKind,\n\t\t\t\t\t\t\tfalse,\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t\treturn extension;\n\t\t\t\t},\n\t\t\t\tget extensionRuntime() {\n\t\t\t\t\tcheckProposedApiEnabled(\n\t\t\t\t\t\textensionDescription,\n\t\t\t\t\t\t\"extensionRuntime\",\n\t\t\t\t\t);\n\t\t\t\t\treturn that.extensionRuntime;\n\t\t\t\t},\n\t\t\t\tget environmentVariableCollection() {\n\t\t\t\t\treturn that._extHostTerminalService.getEnvironmentVariableCollection(\n\t\t\t\t\t\textensionDescription,\n\t\t\t\t\t);\n\t\t\t\t},\n\t\t\t\tget messagePassingProtocol() {\n\t\t\t\t\tif (!messagePassingProtocol) {\n\t\t\t\t\t\tif (!messagePort) {\n\t\t\t\t\t\t\treturn undefined;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst onDidReceiveMessage = Event.buffer(\n\t\t\t\t\t\t\tEvent.fromDOMEventEmitter(\n\t\t\t\t\t\t\t\tmessagePort,\n\t\t\t\t\t\t\t\t\"message\",\n\t\t\t\t\t\t\t\t(e) => e.data,\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t);\n\t\t\t\t\t\tmessagePort.start();\n\t\t\t\t\t\tmessagePassingProtocol = {\n\t\t\t\t\t\t\tonDidReceiveMessage,\n\t\t\t\t\t\t\tpostMessage: messagePort.postMessage.bind(\n\t\t\t\t\t\t\t\tmessagePort,\n\t\t\t\t\t\t\t) as any,\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\n\t\t\t\t\treturn messagePassingProtocol;\n\t\t\t\t},\n\t\t\t});\n\t\t});\n\t}\n\n\tprivate static _callActivate(\n\t\tlogService: ILogService,\n\t\textensionId: ExtensionIdentifier,\n\t\textensionModule: IExtensionModule,\n\t\tcontext: vscode.ExtensionContext,\n\t\textensionInternalStore: IDisposable,\n\t\tactivationTimesBuilder: ExtensionActivationTimesBuilder,\n\t): Promise<ActivatedExtension> {\n\t\t// Make sure the extension's surface is not undefined\n\t\textensionModule = extensionModule || {\n\t\t\tactivate: undefined,\n\t\t\tdeactivate: undefined,\n\t\t};\n\n\t\treturn this._callActivateOptional(\n\t\t\tlogService,\n\t\t\textensionId,\n\t\t\textensionModule,\n\t\t\tcontext,\n\t\t\tactivationTimesBuilder,\n\t\t).then((extensionExports) => {\n\t\t\treturn new ActivatedExtension(\n\t\t\t\tfalse,\n\t\t\t\tnull,\n\t\t\t\tactivationTimesBuilder.build(),\n\t\t\t\textensionModule,\n\t\t\t\textensionExports,\n\t\t\t\ttoDisposable(() => {\n\t\t\t\t\textensionInternalStore.dispose();\n\t\t\t\t\tdispose(context.subscriptions);\n\t\t\t\t}),\n\t\t\t);\n\t\t});\n\t}\n\n\tprivate static _callActivateOptional(\n\t\tlogService: ILogService,\n\t\textensionId: ExtensionIdentifier,\n\t\textensionModule: IExtensionModule,\n\t\tcontext: vscode.ExtensionContext,\n\t\tactivationTimesBuilder: ExtensionActivationTimesBuilder,\n\t): Promise<IExtensionAPI> {\n\t\tif (typeof extensionModule.activate === \"function\") {\n\t\t\ttry {\n\t\t\t\tactivationTimesBuilder.activateCallStart();\n\t\t\t\tlogService.trace(\n\t\t\t\t\t`ExtensionService#_callActivateOptional ${extensionId.value}`,\n\t\t\t\t);\n\t\t\t\tconst scope = typeof global === \"object\" ? global : self; // `global` is nodejs while `self` is for workers\n\t\t\t\tconst activateResult: Promise<IExtensionAPI> =\n\t\t\t\t\textensionModule.activate.apply(scope, [context]);\n\t\t\t\tactivationTimesBuilder.activateCallStop();\n\n\t\t\t\tactivationTimesBuilder.activateResolveStart();\n\t\t\t\treturn Promise.resolve(activateResult).then((value) => {\n\t\t\t\t\tactivationTimesBuilder.activateResolveStop();\n\t\t\t\t\treturn value;\n\t\t\t\t});\n\t\t\t} catch (err) {\n\t\t\t\treturn Promise.reject(err);\n\t\t\t}\n\t\t} else {\n\t\t\t// No activate found => the module is the extension's exports\n\t\t\treturn Promise.resolve<IExtensionAPI>(extensionModule);\n\t\t}\n\t}\n\n\t// -- eager activation\n\n\tprivate _activateOneStartupFinished(\n\t\tdesc: IExtensionDescription,\n\t\tactivationEvent: string,\n\t): void {\n\t\tthis._activateById(desc.identifier, {\n\t\t\tstartup: false,\n\t\t\textensionId: desc.identifier,\n\t\t\tactivationEvent: activationEvent,\n\t\t}).then(undefined, (err) => {\n\t\t\tthis._logService.error(err);\n\t\t});\n\t}\n\n\tprivate _activateAllStartupFinishedDeferred(\n\t\textensions: IExtensionDescription[],\n\t\tstart = 0,\n\t): void {\n\t\tconst timeBudget = 50; // 50 milliseconds\n\t\tconst startTime = Date.now();\n\n\t\tsetTimeout0(() => {\n\t\t\tfor (let i = start; i < extensions.length; i += 1) {\n\t\t\t\tconst desc = extensions[i];\n\t\t\t\tfor (const activationEvent of desc.activationEvents ?? []) {\n\t\t\t\t\tif (activationEvent === \"onStartupFinished\") {\n\t\t\t\t\t\tif (Date.now() - startTime > timeBudget) {\n\t\t\t\t\t\t\t// time budget for current task has been exceeded\n\t\t\t\t\t\t\t// set a new task to activate current and remaining extensions\n\t\t\t\t\t\t\tthis._activateAllStartupFinishedDeferred(\n\t\t\t\t\t\t\t\textensions,\n\t\t\t\t\t\t\t\ti,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tthis._activateOneStartupFinished(\n\t\t\t\t\t\t\t\tdesc,\n\t\t\t\t\t\t\t\tactivationEvent,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n\n\tprivate _activateAllStartupFinished(): void {\n\t\t// startup is considered finished\n\t\tthis._mainThreadExtensionsProxy.$setPerformanceMarks(\n\t\t\tperformance.getMarks(),\n\t\t);\n\n\t\tthis._extHostConfiguration\n\t\t\t.getConfigProvider()\n\t\t\t.then((configProvider) => {\n\t\t\t\tconst shouldDeferActivation = configProvider\n\t\t\t\t\t.getConfiguration(\"extensions.experimental\")\n\t\t\t\t\t.get<boolean>(\"deferredStartupFinishedActivation\");\n\t\t\t\tconst allExtensionDescriptions =\n\t\t\t\t\tthis._myRegistry.getAllExtensionDescriptions();\n\t\t\t\tif (shouldDeferActivation) {\n\t\t\t\t\tthis._activateAllStartupFinishedDeferred(\n\t\t\t\t\t\tallExtensionDescriptions,\n\t\t\t\t\t);\n\t\t\t\t} else {\n\t\t\t\t\tfor (const desc of allExtensionDescriptions) {\n\t\t\t\t\t\tif (desc.activationEvents) {\n\t\t\t\t\t\t\tfor (const activationEvent of desc.activationEvents) {\n\t\t\t\t\t\t\t\tif (activationEvent === \"onStartupFinished\") {\n\t\t\t\t\t\t\t\t\tthis._activateOneStartupFinished(\n\t\t\t\t\t\t\t\t\t\tdesc,\n\t\t\t\t\t\t\t\t\t\tactivationEvent,\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t}\n\n\t// Handle \"eager\" activation extensions\n\tprivate _handleEagerExtensions(): Promise<void> {\n\t\tconst starActivation = this._activateByEvent(\"*\", true).then(\n\t\t\tundefined,\n\t\t\t(err) => {\n\t\t\t\tthis._logService.error(err);\n\t\t\t},\n\t\t);\n\n\t\tthis._register(\n\t\t\tthis._extHostWorkspace.onDidChangeWorkspace((e) =>\n\t\t\t\tthis._handleWorkspaceContainsEagerExtensions(e.added),\n\t\t\t),\n\t\t);\n\t\tconst folders = this._extHostWorkspace.workspace\n\t\t\t? this._extHostWorkspace.workspace.folders\n\t\t\t: [];\n\t\tconst workspaceContainsActivation =\n\t\t\tthis._handleWorkspaceContainsEagerExtensions(folders);\n\t\tconst remoteResolverActivation =\n\t\t\tthis._handleRemoteResolverEagerExtensions();\n\t\tconst eagerExtensionsActivation = Promise.all([\n\t\t\tremoteResolverActivation,\n\t\t\tstarActivation,\n\t\t\tworkspaceContainsActivation,\n\t\t]).then(() => {});\n\n\t\tPromise.race([eagerExtensionsActivation, timeout(10000)]).then(() => {\n\t\t\tthis._activateAllStartupFinished();\n\t\t});\n\n\t\treturn eagerExtensionsActivation;\n\t}\n\n\tprivate _handleWorkspaceContainsEagerExtensions(\n\t\tfolders: ReadonlyArray<vscode.WorkspaceFolder>,\n\t): Promise<void> {\n\t\tif (folders.length === 0) {\n\t\t\treturn Promise.resolve(undefined);\n\t\t}\n\n\t\treturn Promise.all(\n\t\t\tthis._myRegistry.getAllExtensionDescriptions().map((desc) => {\n\t\t\t\treturn this._handleWorkspaceContainsEagerExtension(\n\t\t\t\t\tfolders,\n\t\t\t\t\tdesc,\n\t\t\t\t);\n\t\t\t}),\n\t\t).then(() => {});\n\t}\n\n\tprivate async _handleWorkspaceContainsEagerExtension(\n\t\tfolders: ReadonlyArray<vscode.WorkspaceFolder>,\n\t\tdesc: IExtensionDescription,\n\t): Promise<void> {\n\t\tif (this.isActivated(desc.identifier)) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst localWithRemote =\n\t\t\t!this._initData.remote.isRemote &&\n\t\t\t!!this._initData.remote.authority;\n\t\tconst host: IExtensionActivationHost = {\n\t\t\tlogService: this._logService,\n\t\t\tfolders: folders.map((folder) => folder.uri),\n\t\t\tforceUsingSearch: localWithRemote || !this._hostUtils.fsExists,\n\t\t\texists: (uri) => this._hostUtils.fsExists!(uri.fsPath),\n\t\t\tcheckExists: (folders, includes, token) =>\n\t\t\t\tthis._mainThreadWorkspaceProxy.$checkExists(\n\t\t\t\t\tfolders,\n\t\t\t\t\tincludes,\n\t\t\t\t\ttoken,\n\t\t\t\t),\n\t\t};\n\n\t\tconst result = await checkActivateWorkspaceContainsExtension(\n\t\t\thost,\n\t\t\tdesc,\n\t\t);\n\t\tif (!result) {\n\t\t\treturn;\n\t\t}\n\n\t\treturn this._activateById(desc.identifier, {\n\t\t\tstartup: true,\n\t\t\textensionId: desc.identifier,\n\t\t\tactivationEvent: result.activationEvent,\n\t\t}).then(undefined, (err) => this._logService.error(err));\n\t}\n\n\tprivate async _handleRemoteResolverEagerExtensions(): Promise<void> {\n\t\tif (this._initData.remote.authority) {\n\t\t\treturn this._activateByEvent(\n\t\t\t\t`onResolveRemoteAuthority:${this._initData.remote.authority}`,\n\t\t\t\tfalse,\n\t\t\t);\n\t\t}\n\t}\n\n\tpublic async $extensionTestsExecute(): Promise<number> {\n\t\tawait this._eagerExtensionsActivated.wait();\n\t\ttry {\n\t\t\treturn await this._doHandleExtensionTests();\n\t\t} catch (error) {\n\t\t\tconsole.error(error); // ensure any error message makes it onto the console\n\t\t\tthrow error;\n\t\t}\n\t}\n\n\tprivate async _doHandleExtensionTests(): Promise<number> {\n\t\tconst { extensionDevelopmentLocationURI, extensionTestsLocationURI } =\n\t\t\tthis._initData.environment;\n\t\tif (!extensionDevelopmentLocationURI || !extensionTestsLocationURI) {\n\t\t\tthrow new Error(\n\t\t\t\tnls.localize(\"extensionTestError1\", \"Cannot load test runner.\"),\n\t\t\t);\n\t\t}\n\n\t\t// Require the test runner via node require from the provided path\n\t\tconst testRunner = await this._loadCommonJSModule<\n\t\t\tITestRunner | INewTestRunner | undefined\n\t\t>(\n\t\t\tnull,\n\t\t\textensionTestsLocationURI,\n\t\t\tnew ExtensionActivationTimesBuilder(false),\n\t\t);\n\n\t\tif (!testRunner || typeof testRunner.run !== \"function\") {\n\t\t\tthrow new Error(\n\t\t\t\tnls.localize(\n\t\t\t\t\t\"extensionTestError\",\n\t\t\t\t\t\"Path {0} does not point to a valid extension test runner.\",\n\t\t\t\t\textensionTestsLocationURI.toString(),\n\t\t\t\t),\n\t\t\t);\n\t\t}\n\n\t\t// Execute the runner if it follows the old `run` spec\n\t\treturn new Promise<number>((resolve, reject) => {\n\t\t\tconst oldTestRunnerCallback = (\n\t\t\t\terror: Error,\n\t\t\t\tfailures: number | undefined,\n\t\t\t) => {\n\t\t\t\tif (error) {\n\t\t\t\t\tif (isCI) {\n\t\t\t\t\t\tthis._logService.error(\n\t\t\t\t\t\t\t`Test runner called back with error`,\n\t\t\t\t\t\t\terror,\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t\treject(error);\n\t\t\t\t} else {\n\t\t\t\t\tif (isCI) {\n\t\t\t\t\t\tif (failures) {\n\t\t\t\t\t\t\tthis._logService.info(\n\t\t\t\t\t\t\t\t`Test runner called back with ${failures} failures.`,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tthis._logService.info(\n\t\t\t\t\t\t\t\t`Test runner called back with successful outcome.`,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tresolve(\n\t\t\t\t\t\ttypeof failures === \"number\" && failures > 0\n\t\t\t\t\t\t\t? 1 /* ERROR */\n\t\t\t\t\t\t\t: 0 /* OK */,\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tconst extensionTestsPath = originalFSPath(\n\t\t\t\textensionTestsLocationURI,\n\t\t\t); // for the old test runner API\n\n\t\t\tconst runResult = testRunner.run(\n\t\t\t\textensionTestsPath,\n\t\t\t\toldTestRunnerCallback,\n\t\t\t);\n\n\t\t\t// Using the new API `run(): Promise<void>`\n\t\t\tif (runResult && runResult.then) {\n\t\t\t\trunResult\n\t\t\t\t\t.then(() => {\n\t\t\t\t\t\tif (isCI) {\n\t\t\t\t\t\t\tthis._logService.info(\n\t\t\t\t\t\t\t\t`Test runner finished successfully.`,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tresolve(0);\n\t\t\t\t\t})\n\t\t\t\t\t.catch((err: unknown) => {\n\t\t\t\t\t\tif (isCI) {\n\t\t\t\t\t\t\tthis._logService.error(\n\t\t\t\t\t\t\t\t`Test runner finished with error`,\n\t\t\t\t\t\t\t\terr,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\t\t\t\t\t\treject(\n\t\t\t\t\t\t\terr instanceof Error && err.stack\n\t\t\t\t\t\t\t\t? err.stack\n\t\t\t\t\t\t\t\t: String(err),\n\t\t\t\t\t\t);\n\t\t\t\t\t});\n\t\t\t}\n\t\t});\n\t}\n\n\tprivate _startExtensionHost(): Promise<void> {\n\t\tif (this._started) {\n\t\t\tthrow new Error(`Extension host is already started!`);\n\t\t}\n\t\tthis._started = true;\n\n\t\treturn this._readyToStartExtensionHost\n\t\t\t.wait()\n\t\t\t.then(() => this._readyToRunExtensions.open())\n\t\t\t.then(() => {\n\t\t\t\t// wait for all activation events that came in during workbench startup, but at maximum 1s\n\t\t\t\treturn Promise.race([\n\t\t\t\t\tthis._activator.waitForActivatingExtensions(),\n\t\t\t\t\ttimeout(1000),\n\t\t\t\t]);\n\t\t\t})\n\t\t\t.then(() => this._handleEagerExtensions())\n\t\t\t.then(() => {\n\t\t\t\tthis._eagerExtensionsActivated.open();\n\t\t\t\tthis._logService.info(`Eager extensions activated`);\n\t\t\t});\n\t}\n\n\t// -- called by extensions\n\n\tpublic registerRemoteAuthorityResolver(\n\t\tauthorityPrefix: string,\n\t\tresolver: vscode.RemoteAuthorityResolver,\n\t): vscode.Disposable {\n\t\tthis._resolvers[authorityPrefix] = resolver;\n\t\treturn toDisposable(() => {\n\t\t\tdelete this._resolvers[authorityPrefix];\n\t\t});\n\t}\n\n\tpublic async getRemoteExecServer(\n\t\tremoteAuthority: string,\n\t): Promise<vscode.ExecServer | undefined> {\n\t\tconst { resolver } =\n\t\t\tawait this._activateAndGetResolver(remoteAuthority);\n\t\treturn resolver?.resolveExecServer?.(remoteAuthority, {\n\t\t\tresolveAttempt: 0,\n\t\t});\n\t}\n\n\t// -- called by main thread\n\n\tprivate async _activateAndGetResolver(\n\t\tremoteAuthority: string,\n\t): Promise<{\n\t\tauthorityPrefix: string;\n\t\tresolver: vscode.RemoteAuthorityResolver | undefined;\n\t}> {\n\t\tconst authorityPlusIndex = remoteAuthority.indexOf(\"+\");\n\t\tif (authorityPlusIndex === -1) {\n\t\t\tthrow new RemoteAuthorityResolverError(\n\t\t\t\t`Not an authority that can be resolved!`,\n\t\t\t\tRemoteAuthorityResolverErrorCode.InvalidAuthority,\n\t\t\t);\n\t\t}\n\t\tconst authorityPrefix = remoteAuthority.substr(0, authorityPlusIndex);\n\n\t\tawait this._almostReadyToRunExtensions.wait();\n\t\tawait this._activateByEvent(\n\t\t\t`onResolveRemoteAuthority:${authorityPrefix}`,\n\t\t\tfalse,\n\t\t);\n\n\t\treturn { authorityPrefix, resolver: this._resolvers[authorityPrefix] };\n\t}\n\n\tpublic async $resolveAuthority(\n\t\tremoteAuthorityChain: string,\n\t\tresolveAttempt: number,\n\t): Promise<Dto<IResolveAuthorityResult>> {\n\t\tconst sw = StopWatch.create(false);\n\t\tconst prefix = () =>\n\t\t\t`[resolveAuthority(${getRemoteAuthorityPrefix(remoteAuthorityChain)},${resolveAttempt})][${sw.elapsed()}ms] `;\n\t\tconst logInfo = (msg: string) =>\n\t\t\tthis._logService.info(`${prefix()}${msg}`);\n\t\tconst logWarning = (msg: string) =>\n\t\t\tthis._logService.warn(`${prefix()}${msg}`);\n\t\tconst logError = (msg: string, err: any = undefined) =>\n\t\t\tthis._logService.error(`${prefix()}${msg}`, err);\n\t\tconst normalizeError = (err: unknown) => {\n\t\t\tif (err instanceof RemoteAuthorityResolverError) {\n\t\t\t\treturn {\n\t\t\t\t\ttype: \"error\" as const,\n\t\t\t\t\terror: {\n\t\t\t\t\t\tcode: err._code,\n\t\t\t\t\t\tmessage: err._message,\n\t\t\t\t\t\tdetail: err._detail,\n\t\t\t\t\t},\n\t\t\t\t};\n\t\t\t}\n\t\t\tthrow err;\n\t\t};\n\n\t\tconst getResolver = async (remoteAuthority: string) => {\n\t\t\tlogInfo(`activating resolver for ${remoteAuthority}...`);\n\t\t\tconst { resolver, authorityPrefix } =\n\t\t\t\tawait this._activateAndGetResolver(remoteAuthority);\n\t\t\tif (!resolver) {\n\t\t\t\tlogError(`no resolver for ${authorityPrefix}`);\n\t\t\t\tthrow new RemoteAuthorityResolverError(\n\t\t\t\t\t`No remote extension installed to resolve ${authorityPrefix}.`,\n\t\t\t\t\tRemoteAuthorityResolverErrorCode.NoResolverFound,\n\t\t\t\t);\n\t\t\t}\n\t\t\treturn { resolver, authorityPrefix, remoteAuthority };\n\t\t};\n\n\t\tconst chain = remoteAuthorityChain.split(/@|%40/g).reverse();\n\t\tlogInfo(`activating remote resolvers ${chain.join(\" -> \")}`);\n\n\t\tlet resolvers;\n\t\ttry {\n\t\t\tresolvers = await Promise.all(chain.map(getResolver)).catch(\n\t\t\t\tasync (e: Error) => {\n\t\t\t\t\tif (\n\t\t\t\t\t\t!(e instanceof RemoteAuthorityResolverError) ||\n\t\t\t\t\t\te._code !==\n\t\t\t\t\t\t\tRemoteAuthorityResolverErrorCode.InvalidAuthority\n\t\t\t\t\t) {\n\t\t\t\t\t\tthrow e;\n\t\t\t\t\t}\n\t\t\t\t\tlogWarning(\n\t\t\t\t\t\t`resolving nested authorities failed: ${e.message}`,\n\t\t\t\t\t);\n\t\t\t\t\treturn [await getResolver(remoteAuthorityChain)];\n\t\t\t\t},\n\t\t\t);\n\t\t} catch (e) {\n\t\t\treturn normalizeError(e);\n\t\t}\n\n\t\tconst intervalLogger = new IntervalTimer();\n\t\tintervalLogger.cancelAndSet(() => logInfo(\"waiting...\"), 1000);\n\n\t\tlet result!: vscode.ResolverResult;\n\t\tlet execServer: vscode.ExecServer | undefined;\n\t\tfor (const [\n\t\t\ti,\n\t\t\t{ authorityPrefix, resolver, remoteAuthority },\n\t\t] of resolvers.entries()) {\n\t\t\ttry {\n\t\t\t\tif (i === resolvers.length - 1) {\n\t\t\t\t\tlogInfo(`invoking final resolve()...`);\n\t\t\t\t\tperformance.mark(\n\t\t\t\t\t\t`code/extHost/willResolveAuthority/${authorityPrefix}`,\n\t\t\t\t\t);\n\t\t\t\t\tresult = await resolver.resolve(remoteAuthority, {\n\t\t\t\t\t\tresolveAttempt,\n\t\t\t\t\t\texecServer,\n\t\t\t\t\t});\n\t\t\t\t\tperformance.mark(\n\t\t\t\t\t\t`code/extHost/didResolveAuthorityOK/${authorityPrefix}`,\n\t\t\t\t\t);\n\t\t\t\t\tlogInfo(`setting tunnel factory...`);\n\t\t\t\t\tthis._register(\n\t\t\t\t\t\tawait this._extHostTunnelService.setTunnelFactory(\n\t\t\t\t\t\t\tresolver,\n\t\t\t\t\t\t\tExtHostManagedResolvedAuthority.isManagedResolvedAuthority(\n\t\t\t\t\t\t\t\tresult,\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t? result\n\t\t\t\t\t\t\t\t: undefined,\n\t\t\t\t\t\t),\n\t\t\t\t\t);\n\t\t\t\t} else {\n\t\t\t\t\tlogInfo(\n\t\t\t\t\t\t`invoking resolveExecServer() for ${remoteAuthority}`,\n\t\t\t\t\t);\n\t\t\t\t\tperformance.mark(\n\t\t\t\t\t\t`code/extHost/willResolveExecServer/${authorityPrefix}`,\n\t\t\t\t\t);\n\t\t\t\t\texecServer = await resolver.resolveExecServer?.(\n\t\t\t\t\t\tremoteAuthority,\n\t\t\t\t\t\t{ resolveAttempt, execServer },\n\t\t\t\t\t);\n\t\t\t\t\tif (!execServer) {\n\t\t\t\t\t\tthrow new RemoteAuthorityResolverError(\n\t\t\t\t\t\t\t`Exec server was not available for ${remoteAuthority}`,\n\t\t\t\t\t\t\tRemoteAuthorityResolverErrorCode.NoResolverFound,\n\t\t\t\t\t\t); // we did, in fact, break the chain :(\n\t\t\t\t\t}\n\t\t\t\t\tperformance.mark(\n\t\t\t\t\t\t`code/extHost/didResolveExecServerOK/${authorityPrefix}`,\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\tperformance.mark(\n\t\t\t\t\t`code/extHost/didResolveAuthorityError/${authorityPrefix}`,\n\t\t\t\t);\n\t\t\t\tlogError(`returned an error`, e);\n\t\t\t\tintervalLogger.dispose();\n\t\t\t\treturn normalizeError(e);\n\t\t\t}\n\t\t}\n\n\t\tintervalLogger.dispose();\n\n\t\tconst tunnelInformation: TunnelInformation = {\n\t\t\tenvironmentTunnels: result.environmentTunnels,\n\t\t\tfeatures: result.tunnelFeatures\n\t\t\t\t? {\n\t\t\t\t\t\televation: result.tunnelFeatures.elevation,\n\t\t\t\t\t\tprivacyOptions: result.tunnelFeatures.privacyOptions,\n\t\t\t\t\t\tprotocol:\n\t\t\t\t\t\t\tresult.tunnelFeatures.protocol === undefined\n\t\t\t\t\t\t\t\t? true\n\t\t\t\t\t\t\t\t: result.tunnelFeatures.protocol,\n\t\t\t\t\t}\n\t\t\t\t: undefined,\n\t\t};\n\n\t\t// Split merged API result into separate authority/options\n\t\tconst options: ResolvedOptions = {\n\t\t\textensionHostEnv: result.extensionHostEnv,\n\t\t\tisTrusted: result.isTrusted,\n\t\t\tauthenticationSession:\n\t\t\t\tresult.authenticationSessionForInitializingExtensions\n\t\t\t\t\t? {\n\t\t\t\t\t\t\tid: result\n\t\t\t\t\t\t\t\t.authenticationSessionForInitializingExtensions\n\t\t\t\t\t\t\t\t.id,\n\t\t\t\t\t\t\tproviderId:\n\t\t\t\t\t\t\t\tresult\n\t\t\t\t\t\t\t\t\t.authenticationSessionForInitializingExtensions\n\t\t\t\t\t\t\t\t\t.providerId,\n\t\t\t\t\t\t}\n\t\t\t\t\t: undefined,\n\t\t};\n\n\t\t// extension are not required to return an instance of ResolvedAuthority or ManagedResolvedAuthority, so don't use `instanceof`\n\t\tlogInfo(\n\t\t\t`returned ${ExtHostManagedResolvedAuthority.isManagedResolvedAuthority(result) ? \"managed authority\" : `${result.host}:${result.port}`}`,\n\t\t);\n\n\t\tlet authority: ResolvedAuthority;\n\t\tif (\n\t\t\tExtHostManagedResolvedAuthority.isManagedResolvedAuthority(result)\n\t\t) {\n\t\t\t// The socket factory is identified by the `resolveAttempt`, since that is a number which\n\t\t\t// always increments and is unique over all resolve() calls in a workbench session.\n\t\t\tconst socketFactoryId = resolveAttempt;\n\n\t\t\t// There is only on managed socket factory at a time, so we can just overwrite the old one.\n\t\t\tthis._extHostManagedSockets.setFactory(\n\t\t\t\tsocketFactoryId,\n\t\t\t\tresult.makeConnection,\n\t\t\t);\n\n\t\t\tauthority = {\n\t\t\t\tauthority: remoteAuthorityChain,\n\t\t\t\tconnectTo: new ManagedRemoteConnection(socketFactoryId),\n\t\t\t\tconnectionToken: result.connectionToken,\n\t\t\t};\n\t\t} else {\n\t\t\tauthority = {\n\t\t\t\tauthority: remoteAuthorityChain,\n\t\t\t\tconnectTo: new WebSocketRemoteConnection(\n\t\t\t\t\tresult.host,\n\t\t\t\t\tresult.port,\n\t\t\t\t),\n\t\t\t\tconnectionToken: result.connectionToken,\n\t\t\t};\n\t\t}\n\n\t\treturn {\n\t\t\ttype: \"ok\",\n\t\t\tvalue: {\n\t\t\t\tauthority: authority as Dto<ResolvedAuthority>,\n\t\t\t\toptions,\n\t\t\t\ttunnelInformation,\n\t\t\t},\n\t\t};\n\t}\n\n\tpublic async $getCanonicalURI(\n\t\tremoteAuthority: string,\n\t\turiComponents: UriComponents,\n\t): Promise<UriComponents | null> {\n\t\tthis._logService.info(\n\t\t\t`$getCanonicalURI invoked for authority (${getRemoteAuthorityPrefix(remoteAuthority)})`,\n\t\t);\n\n\t\tconst { resolver } =\n\t\t\tawait this._activateAndGetResolver(remoteAuthority);\n\t\tif (!resolver) {\n\t\t\t// Return `null` if no resolver for `remoteAuthority` is found.\n\t\t\treturn null;\n\t\t}\n\n\t\tconst uri = URI.revive(uriComponents);\n\n\t\tif (typeof resolver.getCanonicalURI === \"undefined\") {\n\t\t\t// resolver cannot compute canonical URI\n\t\t\treturn uri;\n\t\t}\n\n\t\tconst result = await asPromise(() => resolver.getCanonicalURI!(uri));\n\t\tif (!result) {\n\t\t\treturn uri;\n\t\t}\n\n\t\treturn result;\n\t}\n\n\tpublic async $startExtensionHost(\n\t\textensionsDelta: IExtensionDescriptionDelta,\n\t): Promise<void> {\n\t\textensionsDelta.toAdd.forEach(\n\t\t\t(extension) =>\n\t\t\t\t((<any>extension).extensionLocation = URI.revive(\n\t\t\t\t\textension.extensionLocation,\n\t\t\t\t)),\n\t\t);\n\n\t\tconst { globalRegistry, myExtensions } = applyExtensionsDelta(\n\t\t\tthis._activationEventsReader,\n\t\t\tthis._globalRegistry,\n\t\t\tthis._myRegistry,\n\t\t\textensionsDelta,\n\t\t);\n\t\tconst newSearchTree =\n\t\t\tawait this._createExtensionPathIndex(myExtensions);\n\t\tconst extensionsPaths = await this.getExtensionPathIndex();\n\t\textensionsPaths.setSearchTree(newSearchTree);\n\t\tthis._globalRegistry.set(globalRegistry.getAllExtensionDescriptions());\n\t\tthis._myRegistry.set(myExtensions);\n\n\t\tif (isCI) {\n\t\t\tthis._logService.info(\n\t\t\t\t`$startExtensionHost: global extensions: ${printExtIds(this._globalRegistry)}`,\n\t\t\t);\n\t\t\tthis._logService.info(\n\t\t\t\t`$startExtensionHost: local extensions: ${printExtIds(this._myRegistry)}`,\n\t\t\t);\n\t\t}\n\n\t\treturn this._startExtensionHost();\n\t}\n\n\tpublic $activateByEvent(\n\t\tactivationEvent: string,\n\t\tactivationKind: ActivationKind,\n\t): Promise<void> {\n\t\tif (activationKind === ActivationKind.Immediate) {\n\t\t\treturn this._almostReadyToRunExtensions\n\t\t\t\t.wait()\n\t\t\t\t.then((_) => this._activateByEvent(activationEvent, false));\n\t\t}\n\n\t\treturn this._readyToRunExtensions\n\t\t\t.wait()\n\t\t\t.then((_) => this._activateByEvent(activationEvent, false));\n\t}\n\n\tpublic async $activate(\n\t\textensionId: ExtensionIdentifier,\n\t\treason: ExtensionActivationReason,\n\t): Promise<boolean> {\n\t\tawait this._readyToRunExtensions.wait();\n\t\tif (!this._myRegistry.getExtensionDescription(extensionId)) {\n\t\t\t// unknown extension => ignore\n\t\t\treturn false;\n\t\t}\n\t\tawait this._activateById(extensionId, reason);\n\t\treturn true;\n\t}\n\n\tpublic async $deltaExtensions(\n\t\textensionsDelta: IExtensionDescriptionDelta,\n\t): Promise<void> {\n\t\textensionsDelta.toAdd.forEach(\n\t\t\t(extension) =>\n\t\t\t\t((<any>extension).extensionLocation = URI.revive(\n\t\t\t\t\textension.extensionLocation,\n\t\t\t\t)),\n\t\t);\n\n\t\t// First build up and update the trie and only afterwards apply the delta\n\t\tconst { globalRegistry, myExtensions } = applyExtensionsDelta(\n\t\t\tthis._activationEventsReader,\n\t\t\tthis._globalRegistry,\n\t\t\tthis._myRegistry,\n\t\t\textensionsDelta,\n\t\t);\n\t\tconst newSearchTree =\n\t\t\tawait this._createExtensionPathIndex(myExtensions);\n\t\tconst extensionsPaths = await this.getExtensionPathIndex();\n\t\textensionsPaths.setSearchTree(newSearchTree);\n\t\tthis._globalRegistry.set(globalRegistry.getAllExtensionDescriptions());\n\t\tthis._myRegistry.set(myExtensions);\n\n\t\tif (isCI) {\n\t\t\tthis._logService.info(\n\t\t\t\t`$deltaExtensions: global extensions: ${printExtIds(this._globalRegistry)}`,\n\t\t\t);\n\t\t\tthis._logService.info(\n\t\t\t\t`$deltaExtensions: local extensions: ${printExtIds(this._myRegistry)}`,\n\t\t\t);\n\t\t}\n\n\t\treturn Promise.resolve(undefined);\n\t}\n\n\tpublic async $test_latency(n: number): Promise<number> {\n\t\treturn n;\n\t}\n\n\tpublic async $test_up(b: VSBuffer): Promise<number> {\n\t\treturn b.byteLength;\n\t}\n\n\tpublic async $test_down(size: number): Promise<VSBuffer> {\n\t\tconst buff = VSBuffer.alloc(size);\n\t\tconst value = Math.random() % 256;\n\t\tfor (let i = 0; i < size; i++) {\n\t\t\tbuff.writeUInt8(value, i);\n\t\t}\n\t\treturn buff;\n\t}\n\n\tpublic async $updateRemoteConnectionData(\n\t\tconnectionData: IRemoteConnectionData,\n\t): Promise<void> {\n\t\tthis._remoteConnectionData = connectionData;\n\t\tthis._onDidChangeRemoteConnectionData.fire();\n\t}\n\n\tprotected abstract _beforeAlmostReadyToRunExtensions(): Promise<void>;\n\tprotected abstract _getEntryPoint(\n\t\textensionDescription: IExtensionDescription,\n\t): string | undefined;\n\tprotected abstract _loadCommonJSModule<T extends object | undefined>(\n\t\textensionId: IExtensionDescription | null,\n\t\tmodule: URI,\n\t\tactivationTimesBuilder: ExtensionActivationTimesBuilder,\n\t): Promise<T>;\n\tpublic abstract $setRemoteEnvironment(env: {\n\t\t[key: string]: string | null;\n\t}): Promise<void>;\n}\n\nfunction applyExtensionsDelta(\n\tactivationEventsReader: SyncedActivationEventsReader,\n\toldGlobalRegistry: ExtensionDescriptionRegistry,\n\toldMyRegistry: ExtensionDescriptionRegistry,\n\textensionsDelta: IExtensionDescriptionDelta,\n) {\n\tactivationEventsReader.addActivationEvents(\n\t\textensionsDelta.addActivationEvents,\n\t);\n\tconst globalRegistry = new ExtensionDescriptionRegistry(\n\t\tactivationEventsReader,\n\t\toldGlobalRegistry.getAllExtensionDescriptions(),\n\t);\n\tglobalRegistry.deltaExtensions(\n\t\textensionsDelta.toAdd,\n\t\textensionsDelta.toRemove,\n\t);\n\n\tconst myExtensionsSet = new ExtensionIdentifierSet(\n\t\toldMyRegistry\n\t\t\t.getAllExtensionDescriptions()\n\t\t\t.map((extension) => extension.identifier),\n\t);\n\tfor (const extensionId of extensionsDelta.myToRemove) {\n\t\tmyExtensionsSet.delete(extensionId);\n\t}\n\tfor (const extensionId of extensionsDelta.myToAdd) {\n\t\tmyExtensionsSet.add(extensionId);\n\t}\n\tconst myExtensions = filterExtensions(globalRegistry, myExtensionsSet);\n\n\treturn { globalRegistry, myExtensions };\n}\n\ntype TelemetryActivationEvent = {\n\tid: string;\n\tname: string;\n\textensionVersion: string;\n\tpublisherDisplayName: string;\n\tactivationEvents: string | null;\n\tisBuiltin: boolean;\n\treason: string;\n\treasonId: string;\n};\n\nfunction getTelemetryActivationEvent(\n\textensionDescription: IExtensionDescription,\n\treason: ExtensionActivationReason,\n): TelemetryActivationEvent {\n\tconst event = {\n\t\tid: extensionDescription.identifier.value,\n\t\tname: extensionDescription.name,\n\t\textensionVersion: extensionDescription.version,\n\t\tpublisherDisplayName: extensionDescription.publisher,\n\t\tactivationEvents: extensionDescription.activationEvents\n\t\t\t? extensionDescription.activationEvents.join(\",\")\n\t\t\t: null,\n\t\tisBuiltin: extensionDescription.isBuiltin,\n\t\treason: reason.activationEvent,\n\t\treasonId: reason.extensionId.value,\n\t};\n\n\treturn event;\n}\n\nfunction printExtIds(registry: ExtensionDescriptionRegistry) {\n\treturn registry\n\t\t.getAllExtensionDescriptions()\n\t\t.map((ext) => ext.identifier.value)\n\t\t.join(\",\");\n}\n\nexport const IExtHostExtensionService =\n\tcreateDecorator<IExtHostExtensionService>(\"IExtHostExtensionService\");\n\nexport interface IExtHostExtensionService\n\textends AbstractExtHostExtensionService {\n\treadonly _serviceBrand: undefined;\n\tinitialize(): Promise<void>;\n\tterminate(reason: string): void;\n\tgetExtension(\n\t\textensionId: string,\n\t): Promise<IExtensionDescription | undefined>;\n\tisActivated(extensionId: ExtensionIdentifier): boolean;\n\tactivateByIdWithErrors(\n\t\textensionId: ExtensionIdentifier,\n\t\treason: ExtensionActivationReason,\n\t): Promise<void>;\n\tgetExtensionExports(\n\t\textensionId: ExtensionIdentifier,\n\t): IExtensionAPI | null | undefined;\n\tgetExtensionRegistry(): Promise<ExtensionDescriptionRegistry>;\n\tgetExtensionPathIndex(): Promise<ExtensionPaths>;\n\tregisterRemoteAuthorityResolver(\n\t\tauthorityPrefix: string,\n\t\tresolver: vscode.RemoteAuthorityResolver,\n\t): vscode.Disposable;\n\tgetRemoteExecServer(\n\t\tauthority: string,\n\t): Promise<vscode.ExecServer | undefined>;\n\n\tonDidChangeRemoteConnectionData: Event<void>;\n\tgetRemoteConnectionData(): IRemoteConnectionData | null;\n}\n\nexport class Extension<T extends object | null | undefined>\n\timplements vscode.Extension<T>\n{\n\t#extensionService: IExtHostExtensionService;\n\t#originExtensionId: ExtensionIdentifier;\n\t#identifier: ExtensionIdentifier;\n\n\treadonly id: string;\n\treadonly extensionUri: URI;\n\treadonly extensionPath: string;\n\treadonly packageJSON: IExtensionDescription;\n\treadonly extensionKind: vscode.ExtensionKind;\n\treadonly isFromDifferentExtensionHost: boolean;\n\n\tconstructor(\n\t\textensionService: IExtHostExtensionService,\n\t\toriginExtensionId: ExtensionIdentifier,\n\t\tdescription: IExtensionDescription,\n\t\tkind: ExtensionKind,\n\t\tisFromDifferentExtensionHost: boolean,\n\t) {\n\t\tthis.#extensionService = extensionService;\n\t\tthis.#originExtensionId = originExtensionId;\n\t\tthis.#identifier = description.identifier;\n\t\tthis.id = description.identifier.value;\n\t\tthis.extensionUri = description.extensionLocation;\n\t\tthis.extensionPath = path.normalize(\n\t\t\toriginalFSPath(description.extensionLocation),\n\t\t);\n\t\tthis.packageJSON = description;\n\t\tthis.extensionKind = kind;\n\t\tthis.isFromDifferentExtensionHost = isFromDifferentExtensionHost;\n\t}\n\n\tget isActive(): boolean {\n\t\t// TODO@alexdima support this\n\t\treturn this.#extensionService.isActivated(this.#identifier);\n\t}\n\n\tget exports(): T {\n\t\tif (\n\t\t\tthis.packageJSON.api === \"none\" ||\n\t\t\tthis.isFromDifferentExtensionHost\n\t\t) {\n\t\t\treturn undefined!; // Strict nulloverride - Public api\n\t\t}\n\t\treturn <T>this.#extensionService.getExtensionExports(this.#identifier);\n\t}\n\n\tasync activate(): Promise<T> {\n\t\tif (this.isFromDifferentExtensionHost) {\n\t\t\tthrow new Error(\"Cannot activate foreign extension\"); // TODO@alexdima support this\n\t\t}\n\t\tawait this.#extensionService.activateByIdWithErrors(this.#identifier, {\n\t\t\tstartup: false,\n\t\t\textensionId: this.#originExtensionId,\n\t\t\tactivationEvent: \"api\",\n\t\t});\n\t\treturn this.exports;\n\t}\n}\n\nfunction filterExtensions(\n\tglobalRegistry: ExtensionDescriptionRegistry,\n\tdesiredExtensions: ExtensionIdentifierSet,\n): IExtensionDescription[] {\n\treturn globalRegistry\n\t\t.getAllExtensionDescriptions()\n\t\t.filter((extension) => desiredExtensions.has(extension.identifier));\n}\n\nexport class ExtensionPaths {\n\tconstructor(\n\t\tprivate _searchTree: TernarySearchTree<URI, IExtensionDescription>,\n\t) {}\n\n\tsetSearchTree(\n\t\tsearchTree: TernarySearchTree<URI, IExtensionDescription>,\n\t): void {\n\t\tthis._searchTree = searchTree;\n\t}\n\n\tfindSubstr(key: URI): IExtensionDescription | undefined {\n\t\treturn this._searchTree.findSubstr(key);\n\t}\n\n\tforEach(callback: (value: IExtensionDescription, index: URI) => any): void {\n\t\treturn this._searchTree.forEach(callback);\n\t}\n}\n\n/**\n * This mirrors the activation events as seen by the renderer. The renderer\n * is the only one which can have a reliable view of activation events because\n * implicit activation events are generated via extension points, and they\n * are registered only on the renderer side.\n */\nclass SyncedActivationEventsReader implements IActivationEventsReader {\n\tprivate readonly _map = new ExtensionIdentifierMap<string[]>();\n\n\tconstructor(activationEvents: { [extensionId: string]: string[] }) {\n\t\tthis.addActivationEvents(activationEvents);\n\t}\n\n\tpublic readActivationEvents(\n\t\textensionDescription: IExtensionDescription,\n\t): string[] {\n\t\treturn this._map.get(extensionDescription.identifier) ?? [];\n\t}\n\n\tpublic addActivationEvents(activationEvents: {\n\t\t[extensionId: string]: string[];\n\t}): void {\n\t\tfor (const extensionId of Object.keys(activationEvents)) {\n\t\t\tthis._map.set(extensionId, activationEvents[extensionId]);\n\t\t}\n\t}\n}\n"],
  "mappings": "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",
  "names": ["folders"]
}
