{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/api/common/extHostExtensionService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n/* eslint-disable local/code-no-native-private */\n\nimport * as nls from '../../../nls.js';\nimport * as path from '../../../base/common/path.js';\nimport * as performance from '../../../base/common/performance.js';\nimport { originalFSPath, joinPath, extUriBiasedIgnorePathCase } from '../../../base/common/resources.js';\nimport { asPromise, Barrier, IntervalTimer, timeout } from '../../../base/common/async.js';\nimport { dispose, toDisposable, Disposable, DisposableStore, IDisposable } from '../../../base/common/lifecycle.js';\nimport { TernarySearchTree } from '../../../base/common/ternarySearchTree.js';\nimport { URI, UriComponents } from '../../../base/common/uri.js';\nimport { ILogService } from '../../../platform/log/common/log.js';\nimport { ExtHostExtensionServiceShape, MainContext, MainThreadExtensionServiceShape, MainThreadTelemetryShape, MainThreadWorkspaceShape } from './extHost.protocol.js';\nimport { IExtensionDescriptionDelta, IExtensionHostInitData } from '../../services/extensions/common/extensionHostProtocol.js';\nimport { ExtHostConfiguration, IExtHostConfiguration } from './extHostConfiguration.js';\nimport { ActivatedExtension, EmptyExtension, ExtensionActivationTimes, ExtensionActivationTimesBuilder, ExtensionsActivator, IExtensionAPI, IExtensionModule, HostExtension, ExtensionActivationTimesFragment } from './extHostExtensionActivator.js';\nimport { ExtHostStorage, IExtHostStorage } from './extHostStorage.js';\nimport { ExtHostWorkspace, IExtHostWorkspace } from './extHostWorkspace.js';\nimport { MissingExtensionDependency, ActivationKind, checkProposedApiEnabled, isProposedApiEnabled, ExtensionActivationReason } from '../../services/extensions/common/extensions.js';\nimport { ExtensionDescriptionRegistry, IActivationEventsReader } from '../../services/extensions/common/extensionDescriptionRegistry.js';\nimport * as errors from '../../../base/common/errors.js';\nimport type * as vscode from 'vscode';\nimport { ExtensionIdentifier, ExtensionIdentifierMap, ExtensionIdentifierSet, IExtensionDescription } from '../../../platform/extensions/common/extensions.js';\nimport { VSBuffer } from '../../../base/common/buffer.js';\nimport { ExtensionGlobalMemento, ExtensionMemento } from './extHostMemento.js';\nimport { RemoteAuthorityResolverError, ExtensionKind, ExtensionMode, ExtensionRuntime, ManagedResolvedAuthority as ExtHostManagedResolvedAuthority } from './extHostTypes.js';\nimport { ResolvedAuthority, ResolvedOptions, RemoteAuthorityResolverErrorCode, IRemoteConnectionData, getRemoteAuthorityPrefix, TunnelInformation, ManagedRemoteConnection, WebSocketRemoteConnection } from '../../../platform/remote/common/remoteAuthorityResolver.js';\nimport { IInstantiationService, createDecorator } from '../../../platform/instantiation/common/instantiation.js';\nimport { IExtHostInitDataService } from './extHostInitDataService.js';\nimport { IExtensionStoragePaths } from './extHostStoragePaths.js';\nimport { IExtHostRpcService } from './extHostRpcService.js';\nimport { ServiceCollection } from '../../../platform/instantiation/common/serviceCollection.js';\nimport { IExtHostTunnelService } from './extHostTunnelService.js';\nimport { IExtHostTerminalService } from './extHostTerminalService.js';\nimport { IExtHostLanguageModels } from './extHostLanguageModels.js';\nimport { Emitter, Event } from '../../../base/common/event.js';\nimport { IExtensionActivationHost, checkActivateWorkspaceContainsExtension } from '../../services/extensions/common/workspaceContains.js';\nimport { ExtHostSecretState, IExtHostSecretState } from './extHostSecretState.js';\nimport { ExtensionSecrets } from './extHostSecrets.js';\nimport { Schemas } from '../../../base/common/network.js';\nimport { IResolveAuthorityResult } from '../../services/extensions/common/extensionHostProxy.js';\nimport { IExtHostLocalizationService } from './extHostLocalizationService.js';\nimport { StopWatch } from '../../../base/common/stopwatch.js';\nimport { isCI, setTimeout0 } from '../../../base/common/platform.js';\nimport { IExtHostManagedSockets } from './extHostManagedSockets.js';\nimport { Dto } from '../../services/extensions/common/proxyIdentifier.js';\n\ninterface ITestRunner {\n\t/** Old test runner API, as exported from `vscode/lib/testrunner` */\n\trun(testsRoot: string, clb: (error: Error, failures?: number) => void): void;\n}\n\ninterface INewTestRunner {\n\t/** New test runner API, as explained in the extension test doc */\n\trun(): Promise<void>;\n}\n\nexport const IHostUtils = createDecorator<IHostUtils>('IHostUtils');\n\nexport interface IHostUtils {\n\treadonly _serviceBrand: undefined;\n\treadonly pid: number | undefined;\n\texit(code: number): void;\n\tfsExists?(path: string): Promise<boolean>;\n\tfsRealpath?(path: string): Promise<string>;\n}\n\ntype TelemetryActivationEventFragment = {\n\tid: { classification: 'PublicNonPersonalData'; purpose: 'FeatureInsight'; comment: 'The identifier of an extension' };\n\tname: { classification: 'PublicNonPersonalData'; purpose: 'FeatureInsight'; comment: 'The name of the extension' };\n\textensionVersion: { classification: 'PublicNonPersonalData'; purpose: 'FeatureInsight'; comment: 'The version of the extension' };\n\tpublisherDisplayName: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'The publisher of the extension' };\n\tactivationEvents: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'All activation events of the extension' };\n\tisBuiltin: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'If the extension is builtin or git installed' };\n\treason: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'The activation event' };\n\treasonId: { classification: 'PublicNonPersonalData'; purpose: 'FeatureInsight'; comment: 'The identifier of the activation event' };\n};\n\nexport abstract class AbstractExtHostExtensionService extends Disposable implements ExtHostExtensionServiceShape {\n\n\treadonly _serviceBrand: undefined;\n\n\tabstract readonly extensionRuntime: ExtensionRuntime;\n\n\tprivate readonly _onDidChangeRemoteConnectionData = this._register(new Emitter<void>());\n\tpublic readonly onDidChangeRemoteConnectionData = this._onDidChangeRemoteConnectionData.event;\n\n\tprotected readonly _hostUtils: IHostUtils;\n\tprotected readonly _initData: IExtensionHostInitData;\n\tprotected readonly _extHostContext: IExtHostRpcService;\n\tprotected readonly _instaService: IInstantiationService;\n\tprotected readonly _extHostWorkspace: ExtHostWorkspace;\n\tprotected readonly _extHostConfiguration: ExtHostConfiguration;\n\tprotected readonly _logService: ILogService;\n\tprotected readonly _extHostTunnelService: IExtHostTunnelService;\n\tprotected readonly _extHostTerminalService: IExtHostTerminalService;\n\tprotected readonly _extHostLocalizationService: IExtHostLocalizationService;\n\n\tprotected readonly _mainThreadWorkspaceProxy: MainThreadWorkspaceShape;\n\tprotected readonly _mainThreadTelemetryProxy: MainThreadTelemetryShape;\n\tprotected readonly _mainThreadExtensionsProxy: MainThreadExtensionServiceShape;\n\n\tprivate readonly _almostReadyToRunExtensions: Barrier;\n\tprivate readonly _readyToStartExtensionHost: Barrier;\n\tprivate readonly _readyToRunExtensions: Barrier;\n\tprivate readonly _eagerExtensionsActivated: Barrier;\n\n\tprivate readonly _activationEventsReader: SyncedActivationEventsReader;\n\tprotected readonly _myRegistry: ExtensionDescriptionRegistry;\n\tprotected readonly _globalRegistry: ExtensionDescriptionRegistry;\n\tprivate readonly _storage: ExtHostStorage;\n\tprivate readonly _secretState: ExtHostSecretState;\n\tprivate readonly _storagePath: IExtensionStoragePaths;\n\tprivate readonly _activator: ExtensionsActivator;\n\tprivate _extensionPathIndex: Promise<ExtensionPaths> | null;\n\tprivate _realPathCache = new Map<string, Promise<string>>();\n\n\tprivate readonly _resolvers: { [authorityPrefix: string]: vscode.RemoteAuthorityResolver };\n\n\tprivate _started: boolean;\n\tprivate _isTerminating: boolean = false;\n\tprivate _remoteConnectionData: IRemoteConnectionData | null;\n\n\tconstructor(\n\t\t@IInstantiationService instaService: IInstantiationService,\n\t\t@IHostUtils hostUtils: IHostUtils,\n\t\t@IExtHostRpcService extHostContext: IExtHostRpcService,\n\t\t@IExtHostWorkspace extHostWorkspace: IExtHostWorkspace,\n\t\t@IExtHostConfiguration extHostConfiguration: IExtHostConfiguration,\n\t\t@ILogService logService: ILogService,\n\t\t@IExtHostInitDataService initData: IExtHostInitDataService,\n\t\t@IExtensionStoragePaths storagePath: IExtensionStoragePaths,\n\t\t@IExtHostTunnelService extHostTunnelService: IExtHostTunnelService,\n\t\t@IExtHostTerminalService extHostTerminalService: IExtHostTerminalService,\n\t\t@IExtHostLocalizationService extHostLocalizationService: IExtHostLocalizationService,\n\t\t@IExtHostManagedSockets private readonly _extHostManagedSockets: IExtHostManagedSockets,\n\t\t@IExtHostLanguageModels private readonly _extHostLanguageModels: IExtHostLanguageModels,\n\t) {\n\t\tsuper();\n\t\tthis._hostUtils = hostUtils;\n\t\tthis._extHostContext = extHostContext;\n\t\tthis._initData = initData;\n\n\t\tthis._extHostWorkspace = extHostWorkspace;\n\t\tthis._extHostConfiguration = extHostConfiguration;\n\t\tthis._logService = logService;\n\t\tthis._extHostTunnelService = extHostTunnelService;\n\t\tthis._extHostTerminalService = extHostTerminalService;\n\t\tthis._extHostLocalizationService = extHostLocalizationService;\n\n\t\tthis._mainThreadWorkspaceProxy = this._extHostContext.getProxy(MainContext.MainThreadWorkspace);\n\t\tthis._mainThreadTelemetryProxy = this._extHostContext.getProxy(MainContext.MainThreadTelemetry);\n\t\tthis._mainThreadExtensionsProxy = this._extHostContext.getProxy(MainContext.MainThreadExtensionService);\n\n\t\tthis._almostReadyToRunExtensions = new Barrier();\n\t\tthis._readyToStartExtensionHost = new Barrier();\n\t\tthis._readyToRunExtensions = new Barrier();\n\t\tthis._eagerExtensionsActivated = new Barrier();\n\t\tthis._activationEventsReader = new SyncedActivationEventsReader(this._initData.extensions.activationEvents);\n\t\tthis._globalRegistry = new ExtensionDescriptionRegistry(this._activationEventsReader, this._initData.extensions.allExtensions);\n\t\tconst myExtensionsSet = new ExtensionIdentifierSet(this._initData.extensions.myExtensions);\n\t\tthis._myRegistry = new ExtensionDescriptionRegistry(\n\t\t\tthis._activationEventsReader,\n\t\t\tfilterExtensions(this._globalRegistry, myExtensionsSet)\n\t\t);\n\n\t\tif (isCI) {\n\t\t\tthis._logService.info(`Creating extension host with the following global extensions: ${printExtIds(this._globalRegistry)}`);\n\t\t\tthis._logService.info(`Creating extension host with the following local extensions: ${printExtIds(this._myRegistry)}`);\n\t\t}\n\n\t\tthis._storage = new ExtHostStorage(this._extHostContext, this._logService);\n\t\tthis._secretState = new ExtHostSecretState(this._extHostContext);\n\t\tthis._storagePath = storagePath;\n\n\t\tthis._instaService = this._store.add(instaService.createChild(new ServiceCollection(\n\t\t\t[IExtHostStorage, this._storage],\n\t\t\t[IExtHostSecretState, this._secretState]\n\t\t)));\n\n\t\tthis._activator = this._register(new ExtensionsActivator(\n\t\t\tthis._myRegistry,\n\t\t\tthis._globalRegistry,\n\t\t\t{\n\t\t\t\tonExtensionActivationError: (extensionId: ExtensionIdentifier, error: Error, missingExtensionDependency: MissingExtensionDependency | null): void => {\n\t\t\t\t\tthis._mainThreadExtensionsProxy.$onExtensionActivationError(extensionId, errors.transformErrorForSerialization(error), missingExtensionDependency);\n\t\t\t\t},\n\n\t\t\t\tactualActivateExtension: async (extensionId: ExtensionIdentifier, reason: ExtensionActivationReason): Promise<ActivatedExtension> => {\n\t\t\t\t\tif (ExtensionDescriptionRegistry.isHostExtension(extensionId, this._myRegistry, this._globalRegistry)) {\n\t\t\t\t\t\tawait this._mainThreadExtensionsProxy.$activateExtension(extensionId, reason);\n\t\t\t\t\t\treturn new HostExtension();\n\t\t\t\t\t}\n\t\t\t\t\tconst extensionDescription = this._myRegistry.getExtensionDescription(extensionId)!;\n\t\t\t\t\treturn this._activateExtension(extensionDescription, reason);\n\t\t\t\t}\n\t\t\t},\n\t\t\tthis._logService\n\t\t));\n\t\tthis._extensionPathIndex = null;\n\t\tthis._resolvers = Object.create(null);\n\t\tthis._started = false;\n\t\tthis._remoteConnectionData = this._initData.remote.connectionData;\n\t}\n\n\tpublic getRemoteConnectionData(): IRemoteConnectionData | null {\n\t\treturn this._remoteConnectionData;\n\t}\n\n\tpublic async initialize(): Promise<void> {\n\t\ttry {\n\n\t\t\tawait this._beforeAlmostReadyToRunExtensions();\n\t\t\tthis._almostReadyToRunExtensions.open();\n\n\t\t\tawait this._extHostWorkspace.waitForInitializeCall();\n\t\t\tperformance.mark('code/extHost/ready');\n\t\t\tthis._readyToStartExtensionHost.open();\n\n\t\t\tif (this._initData.autoStart) {\n\t\t\t\tthis._startExtensionHost();\n\t\t\t}\n\t\t} catch (err) {\n\t\t\terrors.onUnexpectedError(err);\n\t\t}\n\t}\n\n\tprivate async _deactivateAll(): Promise<void> {\n\t\tthis._storagePath.onWillDeactivateAll();\n\n\t\tlet allPromises: Promise<void>[] = [];\n\t\ttry {\n\t\t\tconst allExtensions = this._myRegistry.getAllExtensionDescriptions();\n\t\t\tconst allExtensionsIds = allExtensions.map(ext => ext.identifier);\n\t\t\tconst activatedExtensions = allExtensionsIds.filter(id => this.isActivated(id));\n\n\t\t\tallPromises = activatedExtensions.map((extensionId) => {\n\t\t\t\treturn this._deactivate(extensionId);\n\t\t\t});\n\t\t} catch (err) {\n\t\t\t// TODO: write to log once we have one\n\t\t}\n\t\tawait Promise.all(allPromises);\n\t}\n\n\tpublic terminate(reason: string, code: number = 0): void {\n\t\tif (this._isTerminating) {\n\t\t\t// we are already shutting down...\n\t\t\treturn;\n\t\t}\n\t\tthis._isTerminating = true;\n\t\tthis._logService.info(`Extension host terminating: ${reason}`);\n\t\tthis._logService.flush();\n\n\t\tthis._extHostTerminalService.dispose();\n\t\tthis._activator.dispose();\n\n\t\terrors.setUnexpectedErrorHandler((err) => {\n\t\t\tthis._logService.error(err);\n\t\t});\n\n\t\t// Invalidate all proxies\n\t\tthis._extHostContext.dispose();\n\n\t\tconst extensionsDeactivated = this._deactivateAll();\n\n\t\t// Give extensions at most 5 seconds to wrap up any async deactivate, then exit\n\t\tPromise.race([timeout(5000), extensionsDeactivated]).finally(() => {\n\t\t\tif (this._hostUtils.pid) {\n\t\t\t\tthis._logService.info(`Extension host with pid ${this._hostUtils.pid} exiting with code ${code}`);\n\t\t\t} else {\n\t\t\t\tthis._logService.info(`Extension host exiting with code ${code}`);\n\t\t\t}\n\t\t\tthis._logService.flush();\n\t\t\tthis._logService.dispose();\n\t\t\tthis._hostUtils.exit(code);\n\t\t});\n\t}\n\n\tpublic isActivated(extensionId: ExtensionIdentifier): boolean {\n\t\tif (this._readyToRunExtensions.isOpen()) {\n\t\t\treturn this._activator.isActivated(extensionId);\n\t\t}\n\t\treturn false;\n\t}\n\n\tpublic async getExtension(extensionId: string): Promise<IExtensionDescription | undefined> {\n\t\tconst ext = await this._mainThreadExtensionsProxy.$getExtension(extensionId);\n\t\treturn ext && {\n\t\t\t...ext,\n\t\t\tidentifier: new ExtensionIdentifier(ext.identifier.value),\n\t\t\textensionLocation: URI.revive(ext.extensionLocation)\n\t\t};\n\t}\n\n\tprivate _activateByEvent(activationEvent: string, startup: boolean): Promise<void> {\n\t\treturn this._activator.activateByEvent(activationEvent, startup);\n\t}\n\n\tprivate _activateById(extensionId: ExtensionIdentifier, reason: ExtensionActivationReason): Promise<void> {\n\t\treturn this._activator.activateById(extensionId, reason);\n\t}\n\n\tpublic activateByIdWithErrors(extensionId: ExtensionIdentifier, reason: ExtensionActivationReason): Promise<void> {\n\t\treturn this._activateById(extensionId, reason).then(() => {\n\t\t\tconst extension = this._activator.getActivatedExtension(extensionId);\n\t\t\tif (extension.activationFailed) {\n\t\t\t\t// activation failed => bubble up the error as the promise result\n\t\t\t\treturn Promise.reject(extension.activationFailedError);\n\t\t\t}\n\t\t\treturn undefined;\n\t\t});\n\t}\n\n\tpublic getExtensionRegistry(): Promise<ExtensionDescriptionRegistry> {\n\t\treturn this._readyToRunExtensions.wait().then(_ => this._myRegistry);\n\t}\n\n\tpublic getExtensionExports(extensionId: ExtensionIdentifier): IExtensionAPI | null | undefined {\n\t\tif (this._readyToRunExtensions.isOpen()) {\n\t\t\treturn this._activator.getActivatedExtension(extensionId).exports;\n\t\t} else {\n\t\t\ttry {\n\t\t\t\treturn this._activator.getActivatedExtension(extensionId).exports;\n\t\t\t} catch (err) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Applies realpath to file-uris and returns all others uris unmodified.\n\t * The real path is cached for the lifetime of the extension host.\n\t */\n\tprivate async _realPathExtensionUri(uri: URI): Promise<URI> {\n\t\tif (uri.scheme === Schemas.file && this._hostUtils.fsRealpath) {\n\t\t\tconst fsPath = uri.fsPath;\n\t\t\tif (!this._realPathCache.has(fsPath)) {\n\t\t\t\tthis._realPathCache.set(fsPath, this._hostUtils.fsRealpath(fsPath));\n\t\t\t}\n\t\t\tconst realpathValue = await this._realPathCache.get(fsPath)!;\n\t\t\treturn URI.file(realpathValue);\n\t\t}\n\t\treturn uri;\n\t}\n\n\t// create trie to enable fast 'filename -> extension id' look up\n\tpublic async getExtensionPathIndex(): Promise<ExtensionPaths> {\n\t\tif (!this._extensionPathIndex) {\n\t\t\tthis._extensionPathIndex = this._createExtensionPathIndex(this._myRegistry.getAllExtensionDescriptions()).then((searchTree) => {\n\t\t\t\treturn new ExtensionPaths(searchTree);\n\t\t\t});\n\t\t}\n\t\treturn this._extensionPathIndex;\n\t}\n\n\t/**\n\t * create trie to enable fast 'filename -> extension id' look up\n\t */\n\tprivate async _createExtensionPathIndex(extensions: IExtensionDescription[]): Promise<TernarySearchTree<URI, IExtensionDescription>> {\n\t\tconst tst = TernarySearchTree.forUris<IExtensionDescription>(key => {\n\t\t\t// using the default/biased extUri-util because the IExtHostFileSystemInfo-service\n\t\t\t// isn't ready to be used yet, e.g the knowledge about `file` protocol and others\n\t\t\t// comes in while this code runs\n\t\t\treturn extUriBiasedIgnorePathCase.ignorePathCasing(key);\n\t\t});\n\t\t// const tst = TernarySearchTree.forUris<IExtensionDescription>(key => true);\n\t\tawait Promise.all(extensions.map(async (ext) => {\n\t\t\tif (this._getEntryPoint(ext)) {\n\t\t\t\tconst uri = await this._realPathExtensionUri(ext.extensionLocation);\n\t\t\t\ttst.set(uri, ext);\n\t\t\t}\n\t\t}));\n\t\treturn tst;\n\t}\n\n\tprivate _deactivate(extensionId: ExtensionIdentifier): Promise<void> {\n\t\tlet result = Promise.resolve(undefined);\n\n\t\tif (!this._readyToRunExtensions.isOpen()) {\n\t\t\treturn result;\n\t\t}\n\n\t\tif (!this._activator.isActivated(extensionId)) {\n\t\t\treturn result;\n\t\t}\n\n\t\tconst extension = this._activator.getActivatedExtension(extensionId);\n\t\tif (!extension) {\n\t\t\treturn result;\n\t\t}\n\n\t\t// call deactivate if available\n\t\ttry {\n\t\t\tif (typeof extension.module.deactivate === 'function') {\n\t\t\t\tresult = Promise.resolve(extension.module.deactivate()).then(undefined, (err) => {\n\t\t\t\t\tthis._logService.error(err);\n\t\t\t\t\treturn Promise.resolve(undefined);\n\t\t\t\t});\n\t\t\t}\n\t\t} catch (err) {\n\t\t\tthis._logService.error(`An error occurred when deactivating the extension '${extensionId.value}':`);\n\t\t\tthis._logService.error(err);\n\t\t}\n\n\t\t// clean up subscriptions\n\t\ttry {\n\t\t\textension.disposable.dispose();\n\t\t} catch (err) {\n\t\t\tthis._logService.error(`An error occurred when disposing the subscriptions for extension '${extensionId.value}':`);\n\t\t\tthis._logService.error(err);\n\t\t}\n\n\t\treturn result;\n\t}\n\n\t// --- impl\n\n\tprivate async _activateExtension(extensionDescription: IExtensionDescription, reason: ExtensionActivationReason): Promise<ActivatedExtension> {\n\t\tif (!this._initData.remote.isRemote) {\n\t\t\t// local extension host process\n\t\t\tawait this._mainThreadExtensionsProxy.$onWillActivateExtension(extensionDescription.identifier);\n\t\t} else {\n\t\t\t// remote extension host process\n\t\t\t// do not wait for renderer confirmation\n\t\t\tthis._mainThreadExtensionsProxy.$onWillActivateExtension(extensionDescription.identifier);\n\t\t}\n\t\treturn this._doActivateExtension(extensionDescription, reason).then((activatedExtension) => {\n\t\t\tconst activationTimes = activatedExtension.activationTimes;\n\t\t\tthis._mainThreadExtensionsProxy.$onDidActivateExtension(extensionDescription.identifier, activationTimes.codeLoadingTime, activationTimes.activateCallTime, activationTimes.activateResolvedTime, reason);\n\t\t\tthis._logExtensionActivationTimes(extensionDescription, reason, 'success', activationTimes);\n\t\t\treturn activatedExtension;\n\t\t}, (err) => {\n\t\t\tthis._logExtensionActivationTimes(extensionDescription, reason, 'failure');\n\t\t\tthrow err;\n\t\t});\n\t}\n\n\tprivate _logExtensionActivationTimes(extensionDescription: IExtensionDescription, reason: ExtensionActivationReason, outcome: string, activationTimes?: ExtensionActivationTimes) {\n\t\tconst event = getTelemetryActivationEvent(extensionDescription, reason);\n\t\ttype ExtensionActivationTimesClassification = {\n\t\t\towner: 'jrieken';\n\t\t\tcomment: 'Timestamps for extension activation';\n\t\t\toutcome: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'Did extension activation succeed or fail' };\n\t\t} & TelemetryActivationEventFragment & ExtensionActivationTimesFragment;\n\n\t\ttype ExtensionActivationTimesEvent = {\n\t\t\toutcome: string;\n\t\t} & ActivationTimesEvent & TelemetryActivationEvent;\n\n\t\ttype ActivationTimesEvent = {\n\t\t\tstartup?: boolean;\n\t\t\tcodeLoadingTime?: number;\n\t\t\tactivateCallTime?: number;\n\t\t\tactivateResolvedTime?: number;\n\t\t};\n\n\t\tthis._mainThreadTelemetryProxy.$publicLog2<ExtensionActivationTimesEvent, ExtensionActivationTimesClassification>('extensionActivationTimes', {\n\t\t\t...event,\n\t\t\t...(activationTimes || {}),\n\t\t\toutcome\n\t\t});\n\t}\n\n\tprivate _doActivateExtension(extensionDescription: IExtensionDescription, reason: ExtensionActivationReason): Promise<ActivatedExtension> {\n\t\tconst event = getTelemetryActivationEvent(extensionDescription, reason);\n\t\ttype ActivatePluginClassification = {\n\t\t\towner: 'jrieken';\n\t\t\tcomment: 'Data about how/why an extension was activated';\n\t\t} & TelemetryActivationEventFragment;\n\t\tthis._mainThreadTelemetryProxy.$publicLog2<TelemetryActivationEvent, ActivatePluginClassification>('activatePlugin', event);\n\t\tconst entryPoint = this._getEntryPoint(extensionDescription);\n\t\tif (!entryPoint) {\n\t\t\t// Treat the extension as being empty => NOT AN ERROR CASE\n\t\t\treturn Promise.resolve(new EmptyExtension(ExtensionActivationTimes.NONE));\n\t\t}\n\n\t\tthis._logService.info(`ExtensionService#_doActivateExtension ${extensionDescription.identifier.value}, startup: ${reason.startup}, activationEvent: '${reason.activationEvent}'${extensionDescription.identifier.value !== reason.extensionId.value ? `, root cause: ${reason.extensionId.value}` : ``}`);\n\t\tthis._logService.flush();\n\n\t\tconst extensionInternalStore = new DisposableStore(); // disposables that follow the extension lifecycle\n\t\tconst activationTimesBuilder = new ExtensionActivationTimesBuilder(reason.startup);\n\t\treturn Promise.all([\n\t\t\tthis._loadCommonJSModule<IExtensionModule>(extensionDescription, joinPath(extensionDescription.extensionLocation, entryPoint), activationTimesBuilder),\n\t\t\tthis._loadExtensionContext(extensionDescription, extensionInternalStore)\n\t\t]).then(values => {\n\t\t\tperformance.mark(`code/extHost/willActivateExtension/${extensionDescription.identifier.value}`);\n\t\t\treturn AbstractExtHostExtensionService._callActivate(this._logService, extensionDescription.identifier, values[0], values[1], extensionInternalStore, activationTimesBuilder);\n\t\t}).then((activatedExtension) => {\n\t\t\tperformance.mark(`code/extHost/didActivateExtension/${extensionDescription.identifier.value}`);\n\t\t\treturn activatedExtension;\n\t\t});\n\t}\n\n\tprivate _loadExtensionContext(extensionDescription: IExtensionDescription, extensionInternalStore: DisposableStore): Promise<vscode.ExtensionContext> {\n\n\t\tconst languageModelAccessInformation = this._extHostLanguageModels.createLanguageModelAccessInformation(extensionDescription);\n\t\tconst globalState = extensionInternalStore.add(new ExtensionGlobalMemento(extensionDescription, this._storage));\n\t\tconst workspaceState = extensionInternalStore.add(new ExtensionMemento(extensionDescription.identifier.value, false, this._storage));\n\t\tconst secrets = extensionInternalStore.add(new ExtensionSecrets(extensionDescription, this._secretState));\n\t\tconst extensionMode = extensionDescription.isUnderDevelopment\n\t\t\t? (this._initData.environment.extensionTestsLocationURI ? ExtensionMode.Test : ExtensionMode.Development)\n\t\t\t: ExtensionMode.Production;\n\t\tconst extensionKind = this._initData.remote.isRemote ? ExtensionKind.Workspace : ExtensionKind.UI;\n\n\t\tthis._logService.trace(`ExtensionService#loadExtensionContext ${extensionDescription.identifier.value}`);\n\n\t\treturn Promise.all([\n\t\t\tglobalState.whenReady,\n\t\t\tworkspaceState.whenReady,\n\t\t\tthis._storagePath.whenReady\n\t\t]).then(() => {\n\t\t\tconst that = this;\n\t\t\tlet extension: vscode.Extension<any> | undefined;\n\n\t\t\tlet messagePassingProtocol: vscode.MessagePassingProtocol | undefined;\n\t\t\tconst messagePort = isProposedApiEnabled(extensionDescription, 'ipc')\n\t\t\t\t? this._initData.messagePorts?.get(ExtensionIdentifier.toKey(extensionDescription.identifier))\n\t\t\t\t: undefined;\n\n\t\t\treturn Object.freeze<vscode.ExtensionContext>({\n\t\t\t\tglobalState,\n\t\t\t\tworkspaceState,\n\t\t\t\tsecrets,\n\t\t\t\tsubscriptions: [],\n\t\t\t\tget languageModelAccessInformation() { return languageModelAccessInformation; },\n\t\t\t\tget extensionUri() { return extensionDescription.extensionLocation; },\n\t\t\t\tget extensionPath() { return extensionDescription.extensionLocation.fsPath; },\n\t\t\t\tasAbsolutePath(relativePath: string) { return path.join(extensionDescription.extensionLocation.fsPath, relativePath); },\n\t\t\t\tget storagePath() { return that._storagePath.workspaceValue(extensionDescription)?.fsPath; },\n\t\t\t\tget globalStoragePath() { return that._storagePath.globalValue(extensionDescription).fsPath; },\n\t\t\t\tget logPath() { return path.join(that._initData.logsLocation.fsPath, extensionDescription.identifier.value); },\n\t\t\t\tget logUri() { return URI.joinPath(that._initData.logsLocation, extensionDescription.identifier.value); },\n\t\t\t\tget storageUri() { return that._storagePath.workspaceValue(extensionDescription); },\n\t\t\t\tget globalStorageUri() { return that._storagePath.globalValue(extensionDescription); },\n\t\t\t\tget extensionMode() { return extensionMode; },\n\t\t\t\tget extension() {\n\t\t\t\t\tif (extension === undefined) {\n\t\t\t\t\t\textension = new Extension(that, extensionDescription.identifier, extensionDescription, extensionKind, false);\n\t\t\t\t\t}\n\t\t\t\t\treturn extension;\n\t\t\t\t},\n\t\t\t\tget extensionRuntime() {\n\t\t\t\t\tcheckProposedApiEnabled(extensionDescription, 'extensionRuntime');\n\t\t\t\t\treturn that.extensionRuntime;\n\t\t\t\t},\n\t\t\t\tget environmentVariableCollection() { return that._extHostTerminalService.getEnvironmentVariableCollection(extensionDescription); },\n\t\t\t\tget messagePassingProtocol() {\n\t\t\t\t\tif (!messagePassingProtocol) {\n\t\t\t\t\t\tif (!messagePort) {\n\t\t\t\t\t\t\treturn undefined;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst onDidReceiveMessage = Event.buffer(Event.fromDOMEventEmitter(messagePort, 'message', e => e.data));\n\t\t\t\t\t\tmessagePort.start();\n\t\t\t\t\t\tmessagePassingProtocol = {\n\t\t\t\t\t\t\tonDidReceiveMessage,\n\t\t\t\t\t\t\tpostMessage: messagePort.postMessage.bind(messagePort) as any\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\n\t\t\t\t\treturn messagePassingProtocol;\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t}\n\n\tprivate static _callActivate(logService: ILogService, extensionId: ExtensionIdentifier, extensionModule: IExtensionModule, context: vscode.ExtensionContext, extensionInternalStore: IDisposable, activationTimesBuilder: ExtensionActivationTimesBuilder): Promise<ActivatedExtension> {\n\t\t// Make sure the extension's surface is not undefined\n\t\textensionModule = extensionModule || {\n\t\t\tactivate: undefined,\n\t\t\tdeactivate: undefined\n\t\t};\n\n\t\treturn this._callActivateOptional(logService, extensionId, extensionModule, context, activationTimesBuilder).then((extensionExports) => {\n\t\t\treturn new ActivatedExtension(false, null, activationTimesBuilder.build(), extensionModule, extensionExports, toDisposable(() => {\n\t\t\t\textensionInternalStore.dispose();\n\t\t\t\tdispose(context.subscriptions);\n\t\t\t}));\n\t\t});\n\t}\n\n\tprivate static _callActivateOptional(logService: ILogService, extensionId: ExtensionIdentifier, extensionModule: IExtensionModule, context: vscode.ExtensionContext, activationTimesBuilder: ExtensionActivationTimesBuilder): Promise<IExtensionAPI> {\n\t\tif (typeof extensionModule.activate === 'function') {\n\t\t\ttry {\n\t\t\t\tactivationTimesBuilder.activateCallStart();\n\t\t\t\tlogService.trace(`ExtensionService#_callActivateOptional ${extensionId.value}`);\n\t\t\t\tconst scope = typeof global === 'object' ? global : self; // `global` is nodejs while `self` is for workers\n\t\t\t\tconst activateResult: Promise<IExtensionAPI> = extensionModule.activate.apply(scope, [context]);\n\t\t\t\tactivationTimesBuilder.activateCallStop();\n\n\t\t\t\tactivationTimesBuilder.activateResolveStart();\n\t\t\t\treturn Promise.resolve(activateResult).then((value) => {\n\t\t\t\t\tactivationTimesBuilder.activateResolveStop();\n\t\t\t\t\treturn value;\n\t\t\t\t});\n\t\t\t} catch (err) {\n\t\t\t\treturn Promise.reject(err);\n\t\t\t}\n\t\t} else {\n\t\t\t// No activate found => the module is the extension's exports\n\t\t\treturn Promise.resolve<IExtensionAPI>(extensionModule);\n\t\t}\n\t}\n\n\t// -- eager activation\n\n\tprivate _activateOneStartupFinished(desc: IExtensionDescription, activationEvent: string): void {\n\t\tthis._activateById(desc.identifier, {\n\t\t\tstartup: false,\n\t\t\textensionId: desc.identifier,\n\t\t\tactivationEvent: activationEvent\n\t\t}).then(undefined, (err) => {\n\t\t\tthis._logService.error(err);\n\t\t});\n\t}\n\n\tprivate _activateAllStartupFinishedDeferred(extensions: IExtensionDescription[], start: number = 0): void {\n\t\tconst timeBudget = 50; // 50 milliseconds\n\t\tconst startTime = Date.now();\n\n\t\tsetTimeout0(() => {\n\t\t\tfor (let i = start; i < extensions.length; i += 1) {\n\t\t\t\tconst desc = extensions[i];\n\t\t\t\tfor (const activationEvent of (desc.activationEvents ?? [])) {\n\t\t\t\t\tif (activationEvent === 'onStartupFinished') {\n\t\t\t\t\t\tif (Date.now() - startTime > timeBudget) {\n\t\t\t\t\t\t\t// time budget for current task has been exceeded\n\t\t\t\t\t\t\t// set a new task to activate current and remaining extensions\n\t\t\t\t\t\t\tthis._activateAllStartupFinishedDeferred(extensions, i);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tthis._activateOneStartupFinished(desc, activationEvent);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n\n\tprivate _activateAllStartupFinished(): void {\n\t\t// startup is considered finished\n\t\tthis._mainThreadExtensionsProxy.$setPerformanceMarks(performance.getMarks());\n\n\t\tthis._extHostConfiguration.getConfigProvider().then((configProvider) => {\n\t\t\tconst shouldDeferActivation = configProvider.getConfiguration('extensions.experimental').get<boolean>('deferredStartupFinishedActivation');\n\t\t\tconst allExtensionDescriptions = this._myRegistry.getAllExtensionDescriptions();\n\t\t\tif (shouldDeferActivation) {\n\t\t\t\tthis._activateAllStartupFinishedDeferred(allExtensionDescriptions);\n\t\t\t} else {\n\t\t\t\tfor (const desc of allExtensionDescriptions) {\n\t\t\t\t\tif (desc.activationEvents) {\n\t\t\t\t\t\tfor (const activationEvent of desc.activationEvents) {\n\t\t\t\t\t\t\tif (activationEvent === 'onStartupFinished') {\n\t\t\t\t\t\t\t\tthis._activateOneStartupFinished(desc, activationEvent);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n\n\t// Handle \"eager\" activation extensions\n\tprivate _handleEagerExtensions(): Promise<void> {\n\t\tconst starActivation = this._activateByEvent('*', true).then(undefined, (err) => {\n\t\t\tthis._logService.error(err);\n\t\t});\n\n\t\tthis._register(this._extHostWorkspace.onDidChangeWorkspace((e) => this._handleWorkspaceContainsEagerExtensions(e.added)));\n\t\tconst folders = this._extHostWorkspace.workspace ? this._extHostWorkspace.workspace.folders : [];\n\t\tconst workspaceContainsActivation = this._handleWorkspaceContainsEagerExtensions(folders);\n\t\tconst remoteResolverActivation = this._handleRemoteResolverEagerExtensions();\n\t\tconst eagerExtensionsActivation = Promise.all([remoteResolverActivation, starActivation, workspaceContainsActivation]).then(() => { });\n\n\t\tPromise.race([eagerExtensionsActivation, timeout(10000)]).then(() => {\n\t\t\tthis._activateAllStartupFinished();\n\t\t});\n\n\t\treturn eagerExtensionsActivation;\n\t}\n\n\tprivate _handleWorkspaceContainsEagerExtensions(folders: ReadonlyArray<vscode.WorkspaceFolder>): Promise<void> {\n\t\tif (folders.length === 0) {\n\t\t\treturn Promise.resolve(undefined);\n\t\t}\n\n\t\treturn Promise.all(\n\t\t\tthis._myRegistry.getAllExtensionDescriptions().map((desc) => {\n\t\t\t\treturn this._handleWorkspaceContainsEagerExtension(folders, desc);\n\t\t\t})\n\t\t).then(() => { });\n\t}\n\n\tprivate async _handleWorkspaceContainsEagerExtension(folders: ReadonlyArray<vscode.WorkspaceFolder>, desc: IExtensionDescription): Promise<void> {\n\t\tif (this.isActivated(desc.identifier)) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst localWithRemote = !this._initData.remote.isRemote && !!this._initData.remote.authority;\n\t\tconst host: IExtensionActivationHost = {\n\t\t\tlogService: this._logService,\n\t\t\tfolders: folders.map(folder => folder.uri),\n\t\t\tforceUsingSearch: localWithRemote || !this._hostUtils.fsExists,\n\t\t\texists: (uri) => this._hostUtils.fsExists!(uri.fsPath),\n\t\t\tcheckExists: (folders, includes, token) => this._mainThreadWorkspaceProxy.$checkExists(folders, includes, token)\n\t\t};\n\n\t\tconst result = await checkActivateWorkspaceContainsExtension(host, desc);\n\t\tif (!result) {\n\t\t\treturn;\n\t\t}\n\n\t\treturn (\n\t\t\tthis._activateById(desc.identifier, { startup: true, extensionId: desc.identifier, activationEvent: result.activationEvent })\n\t\t\t\t.then(undefined, err => this._logService.error(err))\n\t\t);\n\t}\n\n\tprivate async _handleRemoteResolverEagerExtensions(): Promise<void> {\n\t\tif (this._initData.remote.authority) {\n\t\t\treturn this._activateByEvent(`onResolveRemoteAuthority:${this._initData.remote.authority}`, false);\n\t\t}\n\t}\n\n\tpublic async $extensionTestsExecute(): Promise<number> {\n\t\tawait this._eagerExtensionsActivated.wait();\n\t\ttry {\n\t\t\treturn await this._doHandleExtensionTests();\n\t\t} catch (error) {\n\t\t\tconsole.error(error); // ensure any error message makes it onto the console\n\t\t\tthrow error;\n\t\t}\n\t}\n\n\tprivate async _doHandleExtensionTests(): Promise<number> {\n\t\tconst { extensionDevelopmentLocationURI, extensionTestsLocationURI } = this._initData.environment;\n\t\tif (!extensionDevelopmentLocationURI || !extensionTestsLocationURI) {\n\t\t\tthrow new Error(nls.localize('extensionTestError1', \"Cannot load test runner.\"));\n\t\t}\n\n\t\t// Require the test runner via node require from the provided path\n\t\tconst testRunner = await this._loadCommonJSModule<ITestRunner | INewTestRunner | undefined>(null, extensionTestsLocationURI, new ExtensionActivationTimesBuilder(false));\n\n\t\tif (!testRunner || typeof testRunner.run !== 'function') {\n\t\t\tthrow new Error(nls.localize('extensionTestError', \"Path {0} does not point to a valid extension test runner.\", extensionTestsLocationURI.toString()));\n\t\t}\n\n\t\t// Execute the runner if it follows the old `run` spec\n\t\treturn new Promise<number>((resolve, reject) => {\n\t\t\tconst oldTestRunnerCallback = (error: Error, failures: number | undefined) => {\n\t\t\t\tif (error) {\n\t\t\t\t\tif (isCI) {\n\t\t\t\t\t\tthis._logService.error(`Test runner called back with error`, error);\n\t\t\t\t\t}\n\t\t\t\t\treject(error);\n\t\t\t\t} else {\n\t\t\t\t\tif (isCI) {\n\t\t\t\t\t\tif (failures) {\n\t\t\t\t\t\t\tthis._logService.info(`Test runner called back with ${failures} failures.`);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tthis._logService.info(`Test runner called back with successful outcome.`);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tresolve((typeof failures === 'number' && failures > 0) ? 1 /* ERROR */ : 0 /* OK */);\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tconst extensionTestsPath = originalFSPath(extensionTestsLocationURI); // for the old test runner API\n\n\t\t\tconst runResult = testRunner.run(extensionTestsPath, oldTestRunnerCallback);\n\n\t\t\t// Using the new API `run(): Promise<void>`\n\t\t\tif (runResult && runResult.then) {\n\t\t\t\trunResult\n\t\t\t\t\t.then(() => {\n\t\t\t\t\t\tif (isCI) {\n\t\t\t\t\t\t\tthis._logService.info(`Test runner finished successfully.`);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tresolve(0);\n\t\t\t\t\t})\n\t\t\t\t\t.catch((err: unknown) => {\n\t\t\t\t\t\tif (isCI) {\n\t\t\t\t\t\t\tthis._logService.error(`Test runner finished with error`, err);\n\t\t\t\t\t\t}\n\t\t\t\t\t\treject(err instanceof Error && err.stack ? err.stack : String(err));\n\t\t\t\t\t});\n\t\t\t}\n\t\t});\n\t}\n\n\tprivate _startExtensionHost(): Promise<void> {\n\t\tif (this._started) {\n\t\t\tthrow new Error(`Extension host is already started!`);\n\t\t}\n\t\tthis._started = true;\n\n\t\treturn this._readyToStartExtensionHost.wait()\n\t\t\t.then(() => this._readyToRunExtensions.open())\n\t\t\t.then(() => {\n\t\t\t\t// wait for all activation events that came in during workbench startup, but at maximum 1s\n\t\t\t\treturn Promise.race([this._activator.waitForActivatingExtensions(), timeout(1000)]);\n\t\t\t})\n\t\t\t.then(() => this._handleEagerExtensions())\n\t\t\t.then(() => {\n\t\t\t\tthis._eagerExtensionsActivated.open();\n\t\t\t\tthis._logService.info(`Eager extensions activated`);\n\t\t\t});\n\t}\n\n\t// -- called by extensions\n\n\tpublic registerRemoteAuthorityResolver(authorityPrefix: string, resolver: vscode.RemoteAuthorityResolver): vscode.Disposable {\n\t\tthis._resolvers[authorityPrefix] = resolver;\n\t\treturn toDisposable(() => {\n\t\t\tdelete this._resolvers[authorityPrefix];\n\t\t});\n\t}\n\n\tpublic async getRemoteExecServer(remoteAuthority: string): Promise<vscode.ExecServer | undefined> {\n\t\tconst { resolver } = await this._activateAndGetResolver(remoteAuthority);\n\t\treturn resolver?.resolveExecServer?.(remoteAuthority, { resolveAttempt: 0 });\n\t}\n\n\t// -- called by main thread\n\n\tprivate async _activateAndGetResolver(remoteAuthority: string): Promise<{ authorityPrefix: string; resolver: vscode.RemoteAuthorityResolver | undefined }> {\n\t\tconst authorityPlusIndex = remoteAuthority.indexOf('+');\n\t\tif (authorityPlusIndex === -1) {\n\t\t\tthrow new RemoteAuthorityResolverError(`Not an authority that can be resolved!`, RemoteAuthorityResolverErrorCode.InvalidAuthority);\n\t\t}\n\t\tconst authorityPrefix = remoteAuthority.substr(0, authorityPlusIndex);\n\n\t\tawait this._almostReadyToRunExtensions.wait();\n\t\tawait this._activateByEvent(`onResolveRemoteAuthority:${authorityPrefix}`, false);\n\n\t\treturn { authorityPrefix, resolver: this._resolvers[authorityPrefix] };\n\t}\n\n\tpublic async $resolveAuthority(remoteAuthorityChain: string, resolveAttempt: number): Promise<Dto<IResolveAuthorityResult>> {\n\t\tconst sw = StopWatch.create(false);\n\t\tconst prefix = () => `[resolveAuthority(${getRemoteAuthorityPrefix(remoteAuthorityChain)},${resolveAttempt})][${sw.elapsed()}ms] `;\n\t\tconst logInfo = (msg: string) => this._logService.info(`${prefix()}${msg}`);\n\t\tconst logWarning = (msg: string) => this._logService.warn(`${prefix()}${msg}`);\n\t\tconst logError = (msg: string, err: any = undefined) => this._logService.error(`${prefix()}${msg}`, err);\n\t\tconst normalizeError = (err: unknown) => {\n\t\t\tif (err instanceof RemoteAuthorityResolverError) {\n\t\t\t\treturn {\n\t\t\t\t\ttype: 'error' as const,\n\t\t\t\t\terror: {\n\t\t\t\t\t\tcode: err._code,\n\t\t\t\t\t\tmessage: err._message,\n\t\t\t\t\t\tdetail: err._detail\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t}\n\t\t\tthrow err;\n\t\t};\n\n\t\tconst getResolver = async (remoteAuthority: string) => {\n\t\t\tlogInfo(`activating resolver for ${remoteAuthority}...`);\n\t\t\tconst { resolver, authorityPrefix } = await this._activateAndGetResolver(remoteAuthority);\n\t\t\tif (!resolver) {\n\t\t\t\tlogError(`no resolver for ${authorityPrefix}`);\n\t\t\t\tthrow new RemoteAuthorityResolverError(`No remote extension installed to resolve ${authorityPrefix}.`, RemoteAuthorityResolverErrorCode.NoResolverFound);\n\t\t\t}\n\t\t\treturn { resolver, authorityPrefix, remoteAuthority };\n\t\t};\n\n\t\tconst chain = remoteAuthorityChain.split(/@|%40/g).reverse();\n\t\tlogInfo(`activating remote resolvers ${chain.join(' -> ')}`);\n\n\t\tlet resolvers;\n\t\ttry {\n\t\t\tresolvers = await Promise.all(chain.map(getResolver)).catch(async (e: Error) => {\n\t\t\t\tif (!(e instanceof RemoteAuthorityResolverError) || e._code !== RemoteAuthorityResolverErrorCode.InvalidAuthority) { throw e; }\n\t\t\t\tlogWarning(`resolving nested authorities failed: ${e.message}`);\n\t\t\t\treturn [await getResolver(remoteAuthorityChain)];\n\t\t\t});\n\t\t} catch (e) {\n\t\t\treturn normalizeError(e);\n\t\t}\n\n\t\tconst intervalLogger = new IntervalTimer();\n\t\tintervalLogger.cancelAndSet(() => logInfo('waiting...'), 1000);\n\n\t\tlet result!: vscode.ResolverResult;\n\t\tlet execServer: vscode.ExecServer | undefined;\n\t\tfor (const [i, { authorityPrefix, resolver, remoteAuthority }] of resolvers.entries()) {\n\t\t\ttry {\n\t\t\t\tif (i === resolvers.length - 1) {\n\t\t\t\t\tlogInfo(`invoking final resolve()...`);\n\t\t\t\t\tperformance.mark(`code/extHost/willResolveAuthority/${authorityPrefix}`);\n\t\t\t\t\tresult = await resolver.resolve(remoteAuthority, { resolveAttempt, execServer });\n\t\t\t\t\tperformance.mark(`code/extHost/didResolveAuthorityOK/${authorityPrefix}`);\n\t\t\t\t\tlogInfo(`setting tunnel factory...`);\n\t\t\t\t\tthis._register(await this._extHostTunnelService.setTunnelFactory(\n\t\t\t\t\t\tresolver,\n\t\t\t\t\t\tExtHostManagedResolvedAuthority.isManagedResolvedAuthority(result) ? result : undefined\n\t\t\t\t\t));\n\t\t\t\t} else {\n\t\t\t\t\tlogInfo(`invoking resolveExecServer() for ${remoteAuthority}`);\n\t\t\t\t\tperformance.mark(`code/extHost/willResolveExecServer/${authorityPrefix}`);\n\t\t\t\t\texecServer = await resolver.resolveExecServer?.(remoteAuthority, { resolveAttempt, execServer });\n\t\t\t\t\tif (!execServer) {\n\t\t\t\t\t\tthrow new RemoteAuthorityResolverError(`Exec server was not available for ${remoteAuthority}`, RemoteAuthorityResolverErrorCode.NoResolverFound); // we did, in fact, break the chain :(\n\t\t\t\t\t}\n\t\t\t\t\tperformance.mark(`code/extHost/didResolveExecServerOK/${authorityPrefix}`);\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\tperformance.mark(`code/extHost/didResolveAuthorityError/${authorityPrefix}`);\n\t\t\t\tlogError(`returned an error`, e);\n\t\t\t\tintervalLogger.dispose();\n\t\t\t\treturn normalizeError(e);\n\t\t\t}\n\t\t}\n\n\t\tintervalLogger.dispose();\n\n\t\tconst tunnelInformation: TunnelInformation = {\n\t\t\tenvironmentTunnels: result.environmentTunnels,\n\t\t\tfeatures: result.tunnelFeatures ? {\n\t\t\t\televation: result.tunnelFeatures.elevation,\n\t\t\t\tprivacyOptions: result.tunnelFeatures.privacyOptions,\n\t\t\t\tprotocol: result.tunnelFeatures.protocol === undefined ? true : result.tunnelFeatures.protocol,\n\t\t\t} : undefined\n\t\t};\n\n\t\t// Split merged API result into separate authority/options\n\t\tconst options: ResolvedOptions = {\n\t\t\textensionHostEnv: result.extensionHostEnv,\n\t\t\tisTrusted: result.isTrusted,\n\t\t\tauthenticationSession: result.authenticationSessionForInitializingExtensions ? { id: result.authenticationSessionForInitializingExtensions.id, providerId: result.authenticationSessionForInitializingExtensions.providerId } : undefined\n\t\t};\n\n\t\t// extension are not required to return an instance of ResolvedAuthority or ManagedResolvedAuthority, so don't use `instanceof`\n\t\tlogInfo(`returned ${ExtHostManagedResolvedAuthority.isManagedResolvedAuthority(result) ? 'managed authority' : `${result.host}:${result.port}`}`);\n\n\t\tlet authority: ResolvedAuthority;\n\t\tif (ExtHostManagedResolvedAuthority.isManagedResolvedAuthority(result)) {\n\t\t\t// The socket factory is identified by the `resolveAttempt`, since that is a number which\n\t\t\t// always increments and is unique over all resolve() calls in a workbench session.\n\t\t\tconst socketFactoryId = resolveAttempt;\n\n\t\t\t// There is only on managed socket factory at a time, so we can just overwrite the old one.\n\t\t\tthis._extHostManagedSockets.setFactory(socketFactoryId, result.makeConnection);\n\n\t\t\tauthority = {\n\t\t\t\tauthority: remoteAuthorityChain,\n\t\t\t\tconnectTo: new ManagedRemoteConnection(socketFactoryId),\n\t\t\t\tconnectionToken: result.connectionToken\n\t\t\t};\n\t\t} else {\n\t\t\tauthority = {\n\t\t\t\tauthority: remoteAuthorityChain,\n\t\t\t\tconnectTo: new WebSocketRemoteConnection(result.host, result.port),\n\t\t\t\tconnectionToken: result.connectionToken\n\t\t\t};\n\t\t}\n\n\t\treturn {\n\t\t\ttype: 'ok',\n\t\t\tvalue: {\n\t\t\t\tauthority: authority as Dto<ResolvedAuthority>,\n\t\t\t\toptions,\n\t\t\t\ttunnelInformation,\n\t\t\t}\n\t\t};\n\t}\n\n\tpublic async $getCanonicalURI(remoteAuthority: string, uriComponents: UriComponents): Promise<UriComponents | null> {\n\t\tthis._logService.info(`$getCanonicalURI invoked for authority (${getRemoteAuthorityPrefix(remoteAuthority)})`);\n\n\t\tconst { resolver } = await this._activateAndGetResolver(remoteAuthority);\n\t\tif (!resolver) {\n\t\t\t// Return `null` if no resolver for `remoteAuthority` is found.\n\t\t\treturn null;\n\t\t}\n\n\t\tconst uri = URI.revive(uriComponents);\n\n\t\tif (typeof resolver.getCanonicalURI === 'undefined') {\n\t\t\t// resolver cannot compute canonical URI\n\t\t\treturn uri;\n\t\t}\n\n\t\tconst result = await asPromise(() => resolver.getCanonicalURI!(uri));\n\t\tif (!result) {\n\t\t\treturn uri;\n\t\t}\n\n\t\treturn result;\n\t}\n\n\tpublic async $startExtensionHost(extensionsDelta: IExtensionDescriptionDelta): Promise<void> {\n\t\textensionsDelta.toAdd.forEach((extension) => (<any>extension).extensionLocation = URI.revive(extension.extensionLocation));\n\n\t\tconst { globalRegistry, myExtensions } = applyExtensionsDelta(this._activationEventsReader, this._globalRegistry, this._myRegistry, extensionsDelta);\n\t\tconst newSearchTree = await this._createExtensionPathIndex(myExtensions);\n\t\tconst extensionsPaths = await this.getExtensionPathIndex();\n\t\textensionsPaths.setSearchTree(newSearchTree);\n\t\tthis._globalRegistry.set(globalRegistry.getAllExtensionDescriptions());\n\t\tthis._myRegistry.set(myExtensions);\n\n\t\tif (isCI) {\n\t\t\tthis._logService.info(`$startExtensionHost: global extensions: ${printExtIds(this._globalRegistry)}`);\n\t\t\tthis._logService.info(`$startExtensionHost: local extensions: ${printExtIds(this._myRegistry)}`);\n\t\t}\n\n\t\treturn this._startExtensionHost();\n\t}\n\n\tpublic $activateByEvent(activationEvent: string, activationKind: ActivationKind): Promise<void> {\n\t\tif (activationKind === ActivationKind.Immediate) {\n\t\t\treturn this._almostReadyToRunExtensions.wait()\n\t\t\t\t.then(_ => this._activateByEvent(activationEvent, false));\n\t\t}\n\n\t\treturn (\n\t\t\tthis._readyToRunExtensions.wait()\n\t\t\t\t.then(_ => this._activateByEvent(activationEvent, false))\n\t\t);\n\t}\n\n\tpublic async $activate(extensionId: ExtensionIdentifier, reason: ExtensionActivationReason): Promise<boolean> {\n\t\tawait this._readyToRunExtensions.wait();\n\t\tif (!this._myRegistry.getExtensionDescription(extensionId)) {\n\t\t\t// unknown extension => ignore\n\t\t\treturn false;\n\t\t}\n\t\tawait this._activateById(extensionId, reason);\n\t\treturn true;\n\t}\n\n\tpublic async $deltaExtensions(extensionsDelta: IExtensionDescriptionDelta): Promise<void> {\n\t\textensionsDelta.toAdd.forEach((extension) => (<any>extension).extensionLocation = URI.revive(extension.extensionLocation));\n\n\t\t// First build up and update the trie and only afterwards apply the delta\n\t\tconst { globalRegistry, myExtensions } = applyExtensionsDelta(this._activationEventsReader, this._globalRegistry, this._myRegistry, extensionsDelta);\n\t\tconst newSearchTree = await this._createExtensionPathIndex(myExtensions);\n\t\tconst extensionsPaths = await this.getExtensionPathIndex();\n\t\textensionsPaths.setSearchTree(newSearchTree);\n\t\tthis._globalRegistry.set(globalRegistry.getAllExtensionDescriptions());\n\t\tthis._myRegistry.set(myExtensions);\n\n\t\tif (isCI) {\n\t\t\tthis._logService.info(`$deltaExtensions: global extensions: ${printExtIds(this._globalRegistry)}`);\n\t\t\tthis._logService.info(`$deltaExtensions: local extensions: ${printExtIds(this._myRegistry)}`);\n\t\t}\n\n\t\treturn Promise.resolve(undefined);\n\t}\n\n\tpublic async $test_latency(n: number): Promise<number> {\n\t\treturn n;\n\t}\n\n\tpublic async $test_up(b: VSBuffer): Promise<number> {\n\t\treturn b.byteLength;\n\t}\n\n\tpublic async $test_down(size: number): Promise<VSBuffer> {\n\t\tconst buff = VSBuffer.alloc(size);\n\t\tconst value = Math.random() % 256;\n\t\tfor (let i = 0; i < size; i++) {\n\t\t\tbuff.writeUInt8(value, i);\n\t\t}\n\t\treturn buff;\n\t}\n\n\tpublic async $updateRemoteConnectionData(connectionData: IRemoteConnectionData): Promise<void> {\n\t\tthis._remoteConnectionData = connectionData;\n\t\tthis._onDidChangeRemoteConnectionData.fire();\n\t}\n\n\tprotected abstract _beforeAlmostReadyToRunExtensions(): Promise<void>;\n\tprotected abstract _getEntryPoint(extensionDescription: IExtensionDescription): string | undefined;\n\tprotected abstract _loadCommonJSModule<T extends object | undefined>(extensionId: IExtensionDescription | null, module: URI, activationTimesBuilder: ExtensionActivationTimesBuilder): Promise<T>;\n\tpublic abstract $setRemoteEnvironment(env: { [key: string]: string | null }): Promise<void>;\n}\n\nfunction applyExtensionsDelta(activationEventsReader: SyncedActivationEventsReader, oldGlobalRegistry: ExtensionDescriptionRegistry, oldMyRegistry: ExtensionDescriptionRegistry, extensionsDelta: IExtensionDescriptionDelta) {\n\tactivationEventsReader.addActivationEvents(extensionsDelta.addActivationEvents);\n\tconst globalRegistry = new ExtensionDescriptionRegistry(activationEventsReader, oldGlobalRegistry.getAllExtensionDescriptions());\n\tglobalRegistry.deltaExtensions(extensionsDelta.toAdd, extensionsDelta.toRemove);\n\n\tconst myExtensionsSet = new ExtensionIdentifierSet(oldMyRegistry.getAllExtensionDescriptions().map(extension => extension.identifier));\n\tfor (const extensionId of extensionsDelta.myToRemove) {\n\t\tmyExtensionsSet.delete(extensionId);\n\t}\n\tfor (const extensionId of extensionsDelta.myToAdd) {\n\t\tmyExtensionsSet.add(extensionId);\n\t}\n\tconst myExtensions = filterExtensions(globalRegistry, myExtensionsSet);\n\n\treturn { globalRegistry, myExtensions };\n}\n\ntype TelemetryActivationEvent = {\n\tid: string;\n\tname: string;\n\textensionVersion: string;\n\tpublisherDisplayName: string;\n\tactivationEvents: string | null;\n\tisBuiltin: boolean;\n\treason: string;\n\treasonId: string;\n};\n\nfunction getTelemetryActivationEvent(extensionDescription: IExtensionDescription, reason: ExtensionActivationReason): TelemetryActivationEvent {\n\tconst event = {\n\t\tid: extensionDescription.identifier.value,\n\t\tname: extensionDescription.name,\n\t\textensionVersion: extensionDescription.version,\n\t\tpublisherDisplayName: extensionDescription.publisher,\n\t\tactivationEvents: extensionDescription.activationEvents ? extensionDescription.activationEvents.join(',') : null,\n\t\tisBuiltin: extensionDescription.isBuiltin,\n\t\treason: reason.activationEvent,\n\t\treasonId: reason.extensionId.value,\n\t};\n\n\treturn event;\n}\n\nfunction printExtIds(registry: ExtensionDescriptionRegistry) {\n\treturn registry.getAllExtensionDescriptions().map(ext => ext.identifier.value).join(',');\n}\n\nexport const IExtHostExtensionService = createDecorator<IExtHostExtensionService>('IExtHostExtensionService');\n\nexport interface IExtHostExtensionService extends AbstractExtHostExtensionService {\n\treadonly _serviceBrand: undefined;\n\tinitialize(): Promise<void>;\n\tterminate(reason: string): void;\n\tgetExtension(extensionId: string): Promise<IExtensionDescription | undefined>;\n\tisActivated(extensionId: ExtensionIdentifier): boolean;\n\tactivateByIdWithErrors(extensionId: ExtensionIdentifier, reason: ExtensionActivationReason): Promise<void>;\n\tgetExtensionExports(extensionId: ExtensionIdentifier): IExtensionAPI | null | undefined;\n\tgetExtensionRegistry(): Promise<ExtensionDescriptionRegistry>;\n\tgetExtensionPathIndex(): Promise<ExtensionPaths>;\n\tregisterRemoteAuthorityResolver(authorityPrefix: string, resolver: vscode.RemoteAuthorityResolver): vscode.Disposable;\n\tgetRemoteExecServer(authority: string): Promise<vscode.ExecServer | undefined>;\n\n\tonDidChangeRemoteConnectionData: Event<void>;\n\tgetRemoteConnectionData(): IRemoteConnectionData | null;\n}\n\nexport class Extension<T extends object | null | undefined> implements vscode.Extension<T> {\n\n\t#extensionService: IExtHostExtensionService;\n\t#originExtensionId: ExtensionIdentifier;\n\t#identifier: ExtensionIdentifier;\n\n\treadonly id: string;\n\treadonly extensionUri: URI;\n\treadonly extensionPath: string;\n\treadonly packageJSON: IExtensionDescription;\n\treadonly extensionKind: vscode.ExtensionKind;\n\treadonly isFromDifferentExtensionHost: boolean;\n\n\tconstructor(extensionService: IExtHostExtensionService, originExtensionId: ExtensionIdentifier, description: IExtensionDescription, kind: ExtensionKind, isFromDifferentExtensionHost: boolean) {\n\t\tthis.#extensionService = extensionService;\n\t\tthis.#originExtensionId = originExtensionId;\n\t\tthis.#identifier = description.identifier;\n\t\tthis.id = description.identifier.value;\n\t\tthis.extensionUri = description.extensionLocation;\n\t\tthis.extensionPath = path.normalize(originalFSPath(description.extensionLocation));\n\t\tthis.packageJSON = description;\n\t\tthis.extensionKind = kind;\n\t\tthis.isFromDifferentExtensionHost = isFromDifferentExtensionHost;\n\t}\n\n\tget isActive(): boolean {\n\t\t// TODO@alexdima support this\n\t\treturn this.#extensionService.isActivated(this.#identifier);\n\t}\n\n\tget exports(): T {\n\t\tif (this.packageJSON.api === 'none' || this.isFromDifferentExtensionHost) {\n\t\t\treturn undefined!; // Strict nulloverride - Public api\n\t\t}\n\t\treturn <T>this.#extensionService.getExtensionExports(this.#identifier);\n\t}\n\n\tasync activate(): Promise<T> {\n\t\tif (this.isFromDifferentExtensionHost) {\n\t\t\tthrow new Error('Cannot activate foreign extension'); // TODO@alexdima support this\n\t\t}\n\t\tawait this.#extensionService.activateByIdWithErrors(this.#identifier, { startup: false, extensionId: this.#originExtensionId, activationEvent: 'api' });\n\t\treturn this.exports;\n\t}\n}\n\nfunction filterExtensions(globalRegistry: ExtensionDescriptionRegistry, desiredExtensions: ExtensionIdentifierSet): IExtensionDescription[] {\n\treturn globalRegistry.getAllExtensionDescriptions().filter(\n\t\textension => desiredExtensions.has(extension.identifier)\n\t);\n}\n\nexport class ExtensionPaths {\n\n\tconstructor(\n\t\tprivate _searchTree: TernarySearchTree<URI, IExtensionDescription>\n\t) { }\n\n\tsetSearchTree(searchTree: TernarySearchTree<URI, IExtensionDescription>): void {\n\t\tthis._searchTree = searchTree;\n\t}\n\n\tfindSubstr(key: URI): IExtensionDescription | undefined {\n\t\treturn this._searchTree.findSubstr(key);\n\t}\n\n\tforEach(callback: (value: IExtensionDescription, index: URI) => any): void {\n\t\treturn this._searchTree.forEach(callback);\n\t}\n}\n\n/**\n * This mirrors the activation events as seen by the renderer. The renderer\n * is the only one which can have a reliable view of activation events because\n * implicit activation events are generated via extension points, and they\n * are registered only on the renderer side.\n */\nclass SyncedActivationEventsReader implements IActivationEventsReader {\n\n\tprivate readonly _map = new ExtensionIdentifierMap<string[]>();\n\n\tconstructor(activationEvents: { [extensionId: string]: string[] }) {\n\t\tthis.addActivationEvents(activationEvents);\n\t}\n\n\tpublic readActivationEvents(extensionDescription: IExtensionDescription): string[] {\n\t\treturn this._map.get(extensionDescription.identifier) ?? [];\n\t}\n\n\tpublic addActivationEvents(activationEvents: { [extensionId: string]: string[] }): void {\n\t\tfor (const extensionId of Object.keys(activationEvents)) {\n\t\t\tthis._map.set(extensionId, activationEvents[extensionId]);\n\t\t}\n\t}\n}\n"],
  "mappings": "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",
  "names": ["folders"]
}
