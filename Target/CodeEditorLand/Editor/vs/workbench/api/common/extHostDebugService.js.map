{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/api/common/extHostDebugService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport type * as vscode from \"vscode\";\nimport { coalesce } from \"../../../base/common/arrays.js\";\nimport { asPromise } from \"../../../base/common/async.js\";\nimport type { CancellationToken } from \"../../../base/common/cancellation.js\";\nimport { Emitter, type Event } from \"../../../base/common/event.js\";\nimport {\n\tDisposable as DisposableCls,\n\ttoDisposable,\n} from \"../../../base/common/lifecycle.js\";\nimport { ThemeIcon as ThemeIconUtils } from \"../../../base/common/themables.js\";\nimport { URI, type UriComponents } from \"../../../base/common/uri.js\";\nimport {\n\tExtensionIdentifier,\n\ttype IExtensionDescription,\n} from \"../../../platform/extensions/common/extensions.js\";\nimport { createDecorator } from \"../../../platform/instantiation/common/instantiation.js\";\nimport type { ISignService } from \"../../../platform/sign/common/sign.js\";\nimport type { IWorkspaceFolder } from \"../../../platform/workspace/common/workspace.js\";\nimport { AbstractDebugAdapter } from \"../../contrib/debug/common/abstractDebugAdapter.js\";\nimport {\n\tDebugVisualizationType,\n\ttype IAdapterDescriptor,\n\ttype IConfig,\n\ttype IDebugAdapter,\n\ttype IDebugAdapterExecutable,\n\ttype IDebugAdapterImpl,\n\ttype IDebugAdapterNamedPipeServer,\n\ttype IDebugAdapterServer,\n\ttype IDebugVisualization,\n\ttype IDebugVisualizationContext,\n\ttype IDebugVisualizationTreeItem,\n\ttype IDebuggerContribution,\n\ttype MainThreadDebugVisualization,\n} from \"../../contrib/debug/common/debug.js\";\nimport {\n\tconvertToDAPaths,\n\tconvertToVSCPaths,\n\tisDebuggerMainContribution,\n} from \"../../contrib/debug/common/debugUtils.js\";\nimport type { ExtensionDescriptionRegistry } from \"../../services/extensions/common/extensionDescriptionRegistry.js\";\nimport type { Dto } from \"../../services/extensions/common/proxyIdentifier.js\";\nimport {\n\ttype DebugSessionUUID,\n\ttype ExtHostDebugServiceShape,\n\ttype IBreakpointsDeltaDto,\n\ttype IDebugSessionDto,\n\ttype IFunctionBreakpointDto,\n\ttype ISourceMultiBreakpointDto,\n\ttype IStackFrameFocusDto,\n\ttype IThreadFocusDto,\n\tMainContext,\n\ttype MainThreadDebugServiceShape,\n} from \"./extHost.protocol.js\";\nimport { IExtHostCommands } from \"./extHostCommands.js\";\nimport { IExtHostConfiguration } from \"./extHostConfiguration.js\";\nimport { IExtHostEditorTabs } from \"./extHostEditorTabs.js\";\nimport { IExtHostExtensionService } from \"./extHostExtensionService.js\";\nimport { IExtHostRpcService } from \"./extHostRpcService.js\";\nimport { IExtHostTesting } from \"./extHostTesting.js\";\nimport * as Convert from \"./extHostTypeConverters.js\";\nimport {\n\ttype Breakpoint,\n\tDataBreakpoint,\n\tDebugAdapterExecutable,\n\tDebugAdapterInlineImplementation,\n\tDebugAdapterNamedPipeServer,\n\tDebugAdapterServer,\n\tDebugConsoleMode,\n\tDebugStackFrame,\n\tDebugThread,\n\tDisposable,\n\tFunctionBreakpoint,\n\tLocation,\n\tPosition,\n\tSourceBreakpoint,\n\tThemeIcon,\n\tsetBreakpointId,\n} from \"./extHostTypes.js\";\nimport { IExtHostVariableResolverProvider } from \"./extHostVariableResolverService.js\";\nimport { IExtHostWorkspace } from \"./extHostWorkspace.js\";\n\nexport const IExtHostDebugService = createDecorator<IExtHostDebugService>(\n\t\"IExtHostDebugService\",\n);\n\nexport interface IExtHostDebugService extends ExtHostDebugServiceShape {\n\treadonly _serviceBrand: undefined;\n\n\tonDidStartDebugSession: Event<vscode.DebugSession>;\n\tonDidTerminateDebugSession: Event<vscode.DebugSession>;\n\tonDidChangeActiveDebugSession: Event<vscode.DebugSession | undefined>;\n\tactiveDebugSession: vscode.DebugSession | undefined;\n\tactiveDebugConsole: vscode.DebugConsole;\n\tonDidReceiveDebugSessionCustomEvent: Event<vscode.DebugSessionCustomEvent>;\n\tonDidChangeBreakpoints: Event<vscode.BreakpointsChangeEvent>;\n\tbreakpoints: vscode.Breakpoint[];\n\tonDidChangeActiveStackItem: Event<\n\t\tvscode.DebugThread | vscode.DebugStackFrame | undefined\n\t>;\n\tactiveStackItem: vscode.DebugThread | vscode.DebugStackFrame | undefined;\n\n\taddBreakpoints(breakpoints0: readonly vscode.Breakpoint[]): Promise<void>;\n\tremoveBreakpoints(\n\t\tbreakpoints0: readonly vscode.Breakpoint[],\n\t): Promise<void>;\n\tstartDebugging(\n\t\tfolder: vscode.WorkspaceFolder | undefined,\n\t\tnameOrConfig: string | vscode.DebugConfiguration,\n\t\toptions: vscode.DebugSessionOptions,\n\t): Promise<boolean>;\n\tstopDebugging(session?: vscode.DebugSession): Promise<void>;\n\tregisterDebugConfigurationProvider(\n\t\ttype: string,\n\t\tprovider: vscode.DebugConfigurationProvider,\n\t\ttrigger: vscode.DebugConfigurationProviderTriggerKind,\n\t): vscode.Disposable;\n\tregisterDebugAdapterDescriptorFactory(\n\t\textension: IExtensionDescription,\n\t\ttype: string,\n\t\tfactory: vscode.DebugAdapterDescriptorFactory,\n\t): vscode.Disposable;\n\tregisterDebugAdapterTrackerFactory(\n\t\ttype: string,\n\t\tfactory: vscode.DebugAdapterTrackerFactory,\n\t): vscode.Disposable;\n\tregisterDebugVisualizationProvider<T extends vscode.DebugVisualization>(\n\t\textension: IExtensionDescription,\n\t\tid: string,\n\t\tprovider: vscode.DebugVisualizationProvider<T>,\n\t): vscode.Disposable;\n\tregisterDebugVisualizationTree<T extends vscode.DebugTreeItem>(\n\t\textension: IExtensionDescription,\n\t\tid: string,\n\t\tprovider: vscode.DebugVisualizationTree<T>,\n\t): vscode.Disposable;\n\tasDebugSourceUri(\n\t\tsource: vscode.DebugProtocolSource,\n\t\tsession?: vscode.DebugSession,\n\t): vscode.Uri;\n}\n\nexport abstract class ExtHostDebugServiceBase\n\textends DisposableCls\n\timplements IExtHostDebugService, ExtHostDebugServiceShape\n{\n\treadonly _serviceBrand: undefined;\n\n\tprivate _configProviderHandleCounter: number;\n\tprivate _configProviders: ConfigProviderTuple[];\n\n\tprivate _adapterFactoryHandleCounter: number;\n\tprivate _adapterFactories: DescriptorFactoryTuple[];\n\n\tprivate _trackerFactoryHandleCounter: number;\n\tprivate _trackerFactories: TrackerFactoryTuple[];\n\n\tprivate _debugServiceProxy: MainThreadDebugServiceShape;\n\tprivate _debugSessions: Map<DebugSessionUUID, ExtHostDebugSession> =\n\t\tnew Map<DebugSessionUUID, ExtHostDebugSession>();\n\n\tprivate readonly _onDidStartDebugSession: Emitter<vscode.DebugSession>;\n\tget onDidStartDebugSession(): Event<vscode.DebugSession> {\n\t\treturn this._onDidStartDebugSession.event;\n\t}\n\n\tprivate readonly _onDidTerminateDebugSession: Emitter<vscode.DebugSession>;\n\tget onDidTerminateDebugSession(): Event<vscode.DebugSession> {\n\t\treturn this._onDidTerminateDebugSession.event;\n\t}\n\n\tprivate readonly _onDidChangeActiveDebugSession: Emitter<\n\t\tvscode.DebugSession | undefined\n\t>;\n\tget onDidChangeActiveDebugSession(): Event<\n\t\tvscode.DebugSession | undefined\n\t> {\n\t\treturn this._onDidChangeActiveDebugSession.event;\n\t}\n\n\tprivate _activeDebugSession: ExtHostDebugSession | undefined;\n\tget activeDebugSession(): vscode.DebugSession | undefined {\n\t\treturn this._activeDebugSession?.api;\n\t}\n\n\tprivate readonly _onDidReceiveDebugSessionCustomEvent: Emitter<vscode.DebugSessionCustomEvent>;\n\tget onDidReceiveDebugSessionCustomEvent(): Event<vscode.DebugSessionCustomEvent> {\n\t\treturn this._onDidReceiveDebugSessionCustomEvent.event;\n\t}\n\n\tprivate _activeDebugConsole: ExtHostDebugConsole;\n\tget activeDebugConsole(): vscode.DebugConsole {\n\t\treturn this._activeDebugConsole.value;\n\t}\n\n\tprivate _breakpoints: Map<string, vscode.Breakpoint>;\n\n\tprivate readonly _onDidChangeBreakpoints: Emitter<vscode.BreakpointsChangeEvent>;\n\n\tprivate _activeStackItem:\n\t\t| vscode.DebugThread\n\t\t| vscode.DebugStackFrame\n\t\t| undefined;\n\tprivate readonly _onDidChangeActiveStackItem: Emitter<\n\t\tvscode.DebugThread | vscode.DebugStackFrame | undefined\n\t>;\n\n\tprivate _debugAdapters: Map<number, IDebugAdapter>;\n\tprivate _debugAdaptersTrackers: Map<number, vscode.DebugAdapterTracker>;\n\n\tprivate _debugVisualizationTreeItemIdsCounter = 0;\n\tprivate readonly _debugVisualizationProviders = new Map<\n\t\tstring,\n\t\tvscode.DebugVisualizationProvider\n\t>();\n\tprivate readonly _debugVisualizationTrees = new Map<\n\t\tstring,\n\t\tvscode.DebugVisualizationTree\n\t>();\n\tprivate readonly _debugVisualizationTreeItemIds = new WeakMap<\n\t\tvscode.DebugTreeItem,\n\t\tnumber\n\t>();\n\tprivate readonly _debugVisualizationElements = new Map<\n\t\tnumber,\n\t\t{ provider: string; item: vscode.DebugTreeItem; children?: number[] }\n\t>();\n\n\tprivate _signService: ISignService | undefined;\n\n\tprivate readonly _visualizers = new Map<\n\t\tnumber,\n\t\t{\n\t\t\tv: vscode.DebugVisualization;\n\t\t\tprovider: vscode.DebugVisualizationProvider;\n\t\t\textensionId: string;\n\t\t}\n\t>();\n\tprivate _visualizerIdCounter = 0;\n\n\tconstructor(\n\t\t@IExtHostRpcService extHostRpcService: IExtHostRpcService,\n\t\t@IExtHostWorkspace protected _workspaceService: IExtHostWorkspace,\n\t\t@IExtHostExtensionService private _extensionService: IExtHostExtensionService,\n\t\t@IExtHostConfiguration protected _configurationService: IExtHostConfiguration,\n\t\t@IExtHostEditorTabs protected _editorTabs: IExtHostEditorTabs,\n\t\t@IExtHostVariableResolverProvider private _variableResolver: IExtHostVariableResolverProvider,\n\t\t@IExtHostCommands private _commands: IExtHostCommands,\n\t\t@IExtHostTesting private _testing: IExtHostTesting,\n\t) {\n\t\tsuper();\n\n\t\tthis._configProviderHandleCounter = 0;\n\t\tthis._configProviders = [];\n\n\t\tthis._adapterFactoryHandleCounter = 0;\n\t\tthis._adapterFactories = [];\n\n\t\tthis._trackerFactoryHandleCounter = 0;\n\t\tthis._trackerFactories = [];\n\n\t\tthis._debugAdapters = new Map();\n\t\tthis._debugAdaptersTrackers = new Map();\n\n\t\tthis._onDidStartDebugSession = this._register(new Emitter<vscode.DebugSession>());\n\t\tthis._onDidTerminateDebugSession = this._register(new Emitter<vscode.DebugSession>());\n\t\tthis._onDidChangeActiveDebugSession = this._register(new Emitter<vscode.DebugSession | undefined>());\n\t\tthis._onDidReceiveDebugSessionCustomEvent = this._register(new Emitter<vscode.DebugSessionCustomEvent>());\n\n\t\tthis._debugServiceProxy = extHostRpcService.getProxy(MainContext.MainThreadDebugService);\n\n\t\tthis._onDidChangeBreakpoints = this._register(new Emitter<vscode.BreakpointsChangeEvent>());\n\n\t\tthis._onDidChangeActiveStackItem = this._register(new Emitter<vscode.DebugThread | vscode.DebugStackFrame | undefined>());\n\n\t\tthis._activeDebugConsole = new ExtHostDebugConsole(this._debugServiceProxy);\n\n\t\tthis._breakpoints = new Map<string, vscode.Breakpoint>();\n\n\t\tthis._extensionService.getExtensionRegistry().then((extensionRegistry: ExtensionDescriptionRegistry) => {\n\t\t\tthis._register(extensionRegistry.onDidChange(_ => {\n\t\t\t\tthis.registerAllDebugTypes(extensionRegistry);\n\t\t\t}));\n\t\t\tthis.registerAllDebugTypes(extensionRegistry);\n\t\t});\n\t}\n\n\tpublic async $getVisualizerTreeItem(\n\t\ttreeId: string,\n\t\telement: IDebugVisualizationContext,\n\t): Promise<IDebugVisualizationTreeItem | undefined> {\n\t\tconst context = this.hydrateVisualizationContext(element);\n\t\tif (!context) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\tconst item = await this._debugVisualizationTrees\n\t\t\t.get(treeId)\n\t\t\t?.getTreeItem?.(context);\n\t\treturn item ? this.convertVisualizerTreeItem(treeId, item) : undefined;\n\t}\n\n\tpublic registerDebugVisualizationTree<T extends vscode.DebugTreeItem>(\n\t\tmanifest: IExtensionDescription,\n\t\tid: string,\n\t\tprovider: vscode.DebugVisualizationTree<T>,\n\t): vscode.Disposable {\n\t\tconst extensionId = ExtensionIdentifier.toKey(manifest.identifier);\n\t\tconst key = this.extensionVisKey(extensionId, id);\n\t\tif (this._debugVisualizationProviders.has(key)) {\n\t\t\tthrow new Error(\n\t\t\t\t`A debug visualization provider with id '${id}' is already registered`,\n\t\t\t);\n\t\t}\n\n\t\tthis._debugVisualizationTrees.set(key, provider);\n\t\tthis._debugServiceProxy.$registerDebugVisualizerTree(\n\t\t\tkey,\n\t\t\t!!provider.editItem,\n\t\t);\n\t\treturn toDisposable(() => {\n\t\t\tthis._debugServiceProxy.$unregisterDebugVisualizerTree(key);\n\t\t\tthis._debugVisualizationTrees.delete(id);\n\t\t});\n\t}\n\n\tpublic async $getVisualizerTreeItemChildren(\n\t\ttreeId: string,\n\t\telement: number,\n\t): Promise<IDebugVisualizationTreeItem[]> {\n\t\tconst item = this._debugVisualizationElements.get(element)?.item;\n\t\tif (!item) {\n\t\t\treturn [];\n\t\t}\n\n\t\tconst children = await this._debugVisualizationTrees\n\t\t\t.get(treeId)\n\t\t\t?.getChildren?.(item);\n\t\treturn (\n\t\t\tchildren?.map((i) => this.convertVisualizerTreeItem(treeId, i)) ||\n\t\t\t[]\n\t\t);\n\t}\n\n\tpublic async $editVisualizerTreeItem(\n\t\telement: number,\n\t\tvalue: string,\n\t): Promise<IDebugVisualizationTreeItem | undefined> {\n\t\tconst e = this._debugVisualizationElements.get(element);\n\t\tif (!e) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\tconst r = await this._debugVisualizationTrees\n\t\t\t.get(e.provider)\n\t\t\t?.editItem?.(e.item, value);\n\t\treturn this.convertVisualizerTreeItem(e.provider, r || e.item);\n\t}\n\n\tpublic $disposeVisualizedTree(element: number): void {\n\t\tconst root = this._debugVisualizationElements.get(element);\n\t\tif (!root) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst queue = [root.children];\n\t\tfor (const children of queue) {\n\t\t\tif (children) {\n\t\t\t\tfor (const child of children) {\n\t\t\t\t\tqueue.push(\n\t\t\t\t\t\tthis._debugVisualizationElements.get(child)?.children,\n\t\t\t\t\t);\n\t\t\t\t\tthis._debugVisualizationElements.delete(child);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate convertVisualizerTreeItem(\n\t\ttreeId: string,\n\t\titem: vscode.DebugTreeItem,\n\t): IDebugVisualizationTreeItem {\n\t\tlet id = this._debugVisualizationTreeItemIds.get(item);\n\t\tif (!id) {\n\t\t\tid = this._debugVisualizationTreeItemIdsCounter++;\n\t\t\tthis._debugVisualizationTreeItemIds.set(item, id);\n\t\t\tthis._debugVisualizationElements.set(id, {\n\t\t\t\tprovider: treeId,\n\t\t\t\titem,\n\t\t\t});\n\t\t}\n\n\t\treturn Convert.DebugTreeItem.from(item, id);\n\t}\n\n\tpublic asDebugSourceUri(\n\t\tsrc: vscode.DebugProtocolSource,\n\t\tsession?: vscode.DebugSession,\n\t): URI {\n\t\tconst source = <any>src;\n\n\t\tif (\n\t\t\ttypeof source.sourceReference === \"number\" &&\n\t\t\tsource.sourceReference > 0\n\t\t) {\n\t\t\t// src can be retrieved via DAP's \"source\" request\n\n\t\t\tlet debug = `debug:${encodeURIComponent(source.path || \"\")}`;\n\t\t\tlet sep = \"?\";\n\n\t\t\tif (session) {\n\t\t\t\tdebug += `${sep}session=${encodeURIComponent(session.id)}`;\n\t\t\t\tsep = \"&\";\n\t\t\t}\n\n\t\t\tdebug += `${sep}ref=${source.sourceReference}`;\n\n\t\t\treturn URI.parse(debug);\n\t\t} else if (source.path) {\n\t\t\t// src is just a local file path\n\t\t\treturn URI.file(source.path);\n\t\t} else {\n\t\t\tthrow new Error(\n\t\t\t\t`cannot create uri from DAP 'source' object; properties 'path' and 'sourceReference' are both missing.`,\n\t\t\t);\n\t\t}\n\t}\n\n\tprivate registerAllDebugTypes(\n\t\textensionRegistry: ExtensionDescriptionRegistry,\n\t) {\n\t\tconst debugTypes: string[] = [];\n\n\t\tfor (const ed of extensionRegistry.getAllExtensionDescriptions()) {\n\t\t\tif (ed.contributes) {\n\t\t\t\tconst debuggers = <IDebuggerContribution[]>(\n\t\t\t\t\ted.contributes[\"debuggers\"]\n\t\t\t\t);\n\t\t\t\tif (debuggers && debuggers.length > 0) {\n\t\t\t\t\tfor (const dbg of debuggers) {\n\t\t\t\t\t\tif (isDebuggerMainContribution(dbg)) {\n\t\t\t\t\t\t\tdebugTypes.push(dbg.type);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tthis._debugServiceProxy.$registerDebugTypes(debugTypes);\n\t}\n\n\t// extension debug API\n\n\tget activeStackItem():\n\t\t| vscode.DebugThread\n\t\t| vscode.DebugStackFrame\n\t\t| undefined {\n\t\treturn this._activeStackItem;\n\t}\n\n\tget onDidChangeActiveStackItem(): Event<\n\t\tvscode.DebugThread | vscode.DebugStackFrame | undefined\n\t> {\n\t\treturn this._onDidChangeActiveStackItem.event;\n\t}\n\n\tget onDidChangeBreakpoints(): Event<vscode.BreakpointsChangeEvent> {\n\t\treturn this._onDidChangeBreakpoints.event;\n\t}\n\n\tget breakpoints(): vscode.Breakpoint[] {\n\t\tconst result: vscode.Breakpoint[] = [];\n\t\tthis._breakpoints.forEach((bp) => result.push(bp));\n\t\treturn result;\n\t}\n\n\tpublic async $resolveDebugVisualizer(\n\t\tid: number,\n\t\ttoken: CancellationToken,\n\t): Promise<MainThreadDebugVisualization> {\n\t\tconst visualizer = this._visualizers.get(id);\n\t\tif (!visualizer) {\n\t\t\tthrow new Error(`No debug visualizer found with id '${id}'`);\n\t\t}\n\n\t\tlet { v, provider, extensionId } = visualizer;\n\t\tif (!v.visualization) {\n\t\t\tv = (await provider.resolveDebugVisualization?.(v, token)) || v;\n\t\t\tvisualizer.v = v;\n\t\t}\n\n\t\tif (!v.visualization) {\n\t\t\tthrow new Error(\n\t\t\t\t`No visualization returned from resolveDebugVisualization in '${provider}'`,\n\t\t\t);\n\t\t}\n\n\t\treturn this.serializeVisualization(extensionId, v.visualization)!;\n\t}\n\n\tpublic async $executeDebugVisualizerCommand(id: number): Promise<void> {\n\t\tconst visualizer = this._visualizers.get(id);\n\t\tif (!visualizer) {\n\t\t\tthrow new Error(`No debug visualizer found with id '${id}'`);\n\t\t}\n\n\t\tconst command = visualizer.v.visualization;\n\t\tif (command && \"command\" in command) {\n\t\t\tthis._commands.executeCommand(\n\t\t\t\tcommand.command,\n\t\t\t\t...(command.arguments || []),\n\t\t\t);\n\t\t}\n\t}\n\n\tprivate hydrateVisualizationContext(\n\t\tcontext: IDebugVisualizationContext,\n\t): vscode.DebugVisualizationContext | undefined {\n\t\tconst session = this._debugSessions.get(context.sessionId);\n\t\treturn (\n\t\t\tsession && {\n\t\t\t\tsession: session.api,\n\t\t\t\tvariable: context.variable,\n\t\t\t\tcontainerId: context.containerId,\n\t\t\t\tframeId: context.frameId,\n\t\t\t\tthreadId: context.threadId,\n\t\t\t}\n\t\t);\n\t}\n\n\tpublic async $provideDebugVisualizers(\n\t\textensionId: string,\n\t\tid: string,\n\t\tcontext: IDebugVisualizationContext,\n\t\ttoken: CancellationToken,\n\t): Promise<IDebugVisualization.Serialized[]> {\n\t\tconst contextHydrated = this.hydrateVisualizationContext(context);\n\t\tconst key = this.extensionVisKey(extensionId, id);\n\t\tconst provider = this._debugVisualizationProviders.get(key);\n\t\tif (!contextHydrated || !provider) {\n\t\t\treturn []; // probably ended in the meantime\n\t\t}\n\n\t\tconst visualizations = await provider.provideDebugVisualization(\n\t\t\tcontextHydrated,\n\t\t\ttoken,\n\t\t);\n\n\t\tif (!visualizations) {\n\t\t\treturn [];\n\t\t}\n\n\t\treturn visualizations.map((v) => {\n\t\t\tconst id = ++this._visualizerIdCounter;\n\t\t\tthis._visualizers.set(id, { v, provider, extensionId });\n\t\t\tconst icon = v.iconPath\n\t\t\t\t? this.getIconPathOrClass(v.iconPath)\n\t\t\t\t: undefined;\n\t\t\treturn {\n\t\t\t\tid,\n\t\t\t\tname: v.name,\n\t\t\t\ticonClass: icon?.iconClass,\n\t\t\t\ticonPath: icon?.iconPath,\n\t\t\t\tvisualization: this.serializeVisualization(\n\t\t\t\t\textensionId,\n\t\t\t\t\tv.visualization,\n\t\t\t\t),\n\t\t\t};\n\t\t});\n\t}\n\n\tpublic $disposeDebugVisualizers(ids: number[]): void {\n\t\tfor (const id of ids) {\n\t\t\tthis._visualizers.delete(id);\n\t\t}\n\t}\n\n\tpublic registerDebugVisualizationProvider<\n\t\tT extends vscode.DebugVisualization,\n\t>(\n\t\tmanifest: IExtensionDescription,\n\t\tid: string,\n\t\tprovider: vscode.DebugVisualizationProvider<T>,\n\t): vscode.Disposable {\n\t\tif (!manifest.contributes?.debugVisualizers?.some((r) => r.id === id)) {\n\t\t\tthrow new Error(\n\t\t\t\t`Extensions may only call registerDebugVisualizationProvider() for renderers they contribute (got ${id})`,\n\t\t\t);\n\t\t}\n\n\t\tconst extensionId = ExtensionIdentifier.toKey(manifest.identifier);\n\t\tconst key = this.extensionVisKey(extensionId, id);\n\t\tif (this._debugVisualizationProviders.has(key)) {\n\t\t\tthrow new Error(\n\t\t\t\t`A debug visualization provider with id '${id}' is already registered`,\n\t\t\t);\n\t\t}\n\n\t\tthis._debugVisualizationProviders.set(key, provider);\n\t\tthis._debugServiceProxy.$registerDebugVisualizer(extensionId, id);\n\t\treturn toDisposable(() => {\n\t\t\tthis._debugServiceProxy.$unregisterDebugVisualizer(extensionId, id);\n\t\t\tthis._debugVisualizationProviders.delete(id);\n\t\t});\n\t}\n\n\tpublic addBreakpoints(breakpoints0: vscode.Breakpoint[]): Promise<void> {\n\t\t// filter only new breakpoints\n\t\tconst breakpoints = breakpoints0.filter((bp) => {\n\t\t\tconst id = bp.id;\n\t\t\tif (!this._breakpoints.has(id)) {\n\t\t\t\tthis._breakpoints.set(id, bp);\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\treturn false;\n\t\t});\n\n\t\t// send notification for added breakpoints\n\t\tthis.fireBreakpointChanges(breakpoints, [], []);\n\n\t\t// convert added breakpoints to DTOs\n\t\tconst dtos: Array<ISourceMultiBreakpointDto | IFunctionBreakpointDto> =\n\t\t\t[];\n\t\tconst map = new Map<string, ISourceMultiBreakpointDto>();\n\t\tfor (const bp of breakpoints) {\n\t\t\tif (bp instanceof SourceBreakpoint) {\n\t\t\t\tlet dto = map.get(bp.location.uri.toString());\n\t\t\t\tif (!dto) {\n\t\t\t\t\tdto = {\n\t\t\t\t\t\ttype: \"sourceMulti\",\n\t\t\t\t\t\turi: bp.location.uri,\n\t\t\t\t\t\tlines: [],\n\t\t\t\t\t} satisfies ISourceMultiBreakpointDto;\n\t\t\t\t\tmap.set(bp.location.uri.toString(), dto);\n\t\t\t\t\tdtos.push(dto);\n\t\t\t\t}\n\t\t\t\tdto.lines.push({\n\t\t\t\t\tid: bp.id,\n\t\t\t\t\tenabled: bp.enabled,\n\t\t\t\t\tcondition: bp.condition,\n\t\t\t\t\thitCondition: bp.hitCondition,\n\t\t\t\t\tlogMessage: bp.logMessage,\n\t\t\t\t\tline: bp.location.range.start.line,\n\t\t\t\t\tcharacter: bp.location.range.start.character,\n\t\t\t\t\tmode: bp.mode,\n\t\t\t\t});\n\t\t\t} else if (bp instanceof FunctionBreakpoint) {\n\t\t\t\tdtos.push({\n\t\t\t\t\ttype: \"function\",\n\t\t\t\t\tid: bp.id,\n\t\t\t\t\tenabled: bp.enabled,\n\t\t\t\t\thitCondition: bp.hitCondition,\n\t\t\t\t\tlogMessage: bp.logMessage,\n\t\t\t\t\tcondition: bp.condition,\n\t\t\t\t\tfunctionName: bp.functionName,\n\t\t\t\t\tmode: bp.mode,\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\t// send DTOs to VS Code\n\t\treturn this._debugServiceProxy.$registerBreakpoints(dtos);\n\t}\n\n\tpublic removeBreakpoints(breakpoints0: vscode.Breakpoint[]): Promise<void> {\n\t\t// remove from array\n\t\tconst breakpoints = breakpoints0.filter((b) =>\n\t\t\tthis._breakpoints.delete(b.id),\n\t\t);\n\n\t\t// send notification\n\t\tthis.fireBreakpointChanges([], breakpoints, []);\n\n\t\t// unregister with VS Code\n\t\tconst ids = breakpoints\n\t\t\t.filter((bp) => bp instanceof SourceBreakpoint)\n\t\t\t.map((bp) => bp.id);\n\t\tconst fids = breakpoints\n\t\t\t.filter((bp) => bp instanceof FunctionBreakpoint)\n\t\t\t.map((bp) => bp.id);\n\t\tconst dids = breakpoints\n\t\t\t.filter((bp) => bp instanceof DataBreakpoint)\n\t\t\t.map((bp) => bp.id);\n\t\treturn this._debugServiceProxy.$unregisterBreakpoints(ids, fids, dids);\n\t}\n\n\tpublic startDebugging(\n\t\tfolder: vscode.WorkspaceFolder | undefined,\n\t\tnameOrConfig: string | vscode.DebugConfiguration,\n\t\toptions: vscode.DebugSessionOptions,\n\t): Promise<boolean> {\n\t\tconst testRunMeta =\n\t\t\toptions.testRun && this._testing.getMetadataForRun(options.testRun);\n\n\t\treturn this._debugServiceProxy.$startDebugging(\n\t\t\tfolder ? folder.uri : undefined,\n\t\t\tnameOrConfig,\n\t\t\t{\n\t\t\t\tparentSessionID: options.parentSession\n\t\t\t\t\t? options.parentSession.id\n\t\t\t\t\t: undefined,\n\t\t\t\tlifecycleManagedByParent: options.lifecycleManagedByParent,\n\t\t\t\trepl:\n\t\t\t\t\toptions.consoleMode === DebugConsoleMode.MergeWithParent\n\t\t\t\t\t\t? \"mergeWithParent\"\n\t\t\t\t\t\t: \"separate\",\n\t\t\t\tnoDebug: options.noDebug,\n\t\t\t\tcompact: options.compact,\n\t\t\t\tsuppressSaveBeforeStart: options.suppressSaveBeforeStart,\n\t\t\t\ttestRun: testRunMeta && {\n\t\t\t\t\trunId: testRunMeta.runId,\n\t\t\t\t\ttaskId: testRunMeta.taskId,\n\t\t\t\t},\n\n\t\t\t\t// Check debugUI for back-compat, #147264\n\t\t\t\tsuppressDebugStatusbar:\n\t\t\t\t\toptions.suppressDebugStatusbar ??\n\t\t\t\t\t(options as any).debugUI?.simple,\n\t\t\t\tsuppressDebugToolbar:\n\t\t\t\t\toptions.suppressDebugToolbar ??\n\t\t\t\t\t(options as any).debugUI?.simple,\n\t\t\t\tsuppressDebugView:\n\t\t\t\t\toptions.suppressDebugView ??\n\t\t\t\t\t(options as any).debugUI?.simple,\n\t\t\t},\n\t\t);\n\t}\n\n\tpublic stopDebugging(session?: vscode.DebugSession): Promise<void> {\n\t\treturn this._debugServiceProxy.$stopDebugging(\n\t\t\tsession ? session.id : undefined,\n\t\t);\n\t}\n\n\tpublic registerDebugConfigurationProvider(\n\t\ttype: string,\n\t\tprovider: vscode.DebugConfigurationProvider,\n\t\ttrigger: vscode.DebugConfigurationProviderTriggerKind,\n\t): vscode.Disposable {\n\t\tif (!provider) {\n\t\t\treturn new Disposable(() => {});\n\t\t}\n\n\t\tconst handle = this._configProviderHandleCounter++;\n\t\tthis._configProviders.push({ type, handle, provider });\n\n\t\tthis._debugServiceProxy.$registerDebugConfigurationProvider(\n\t\t\ttype,\n\t\t\ttrigger,\n\t\t\t!!provider.provideDebugConfigurations,\n\t\t\t!!provider.resolveDebugConfiguration,\n\t\t\t!!provider.resolveDebugConfigurationWithSubstitutedVariables,\n\t\t\thandle,\n\t\t);\n\n\t\treturn new Disposable(() => {\n\t\t\tthis._configProviders = this._configProviders.filter(\n\t\t\t\t(p) => p.provider !== provider,\n\t\t\t); // remove\n\t\t\tthis._debugServiceProxy.$unregisterDebugConfigurationProvider(\n\t\t\t\thandle,\n\t\t\t);\n\t\t});\n\t}\n\n\tpublic registerDebugAdapterDescriptorFactory(\n\t\textension: IExtensionDescription,\n\t\ttype: string,\n\t\tfactory: vscode.DebugAdapterDescriptorFactory,\n\t): vscode.Disposable {\n\t\tif (!factory) {\n\t\t\treturn new Disposable(() => {});\n\t\t}\n\n\t\t// a DebugAdapterDescriptorFactory can only be registered in the extension that contributes the debugger\n\t\tif (!this.definesDebugType(extension, type)) {\n\t\t\tthrow new Error(\n\t\t\t\t`a DebugAdapterDescriptorFactory can only be registered from the extension that defines the '${type}' debugger.`,\n\t\t\t);\n\t\t}\n\n\t\t// make sure that only one factory for this type is registered\n\t\tif (this.getAdapterDescriptorFactoryByType(type)) {\n\t\t\tthrow new Error(\n\t\t\t\t`a DebugAdapterDescriptorFactory can only be registered once per a type.`,\n\t\t\t);\n\t\t}\n\n\t\tconst handle = this._adapterFactoryHandleCounter++;\n\t\tthis._adapterFactories.push({ type, handle, factory });\n\n\t\tthis._debugServiceProxy.$registerDebugAdapterDescriptorFactory(\n\t\t\ttype,\n\t\t\thandle,\n\t\t);\n\n\t\treturn new Disposable(() => {\n\t\t\tthis._adapterFactories = this._adapterFactories.filter(\n\t\t\t\t(p) => p.factory !== factory,\n\t\t\t); // remove\n\t\t\tthis._debugServiceProxy.$unregisterDebugAdapterDescriptorFactory(\n\t\t\t\thandle,\n\t\t\t);\n\t\t});\n\t}\n\n\tpublic registerDebugAdapterTrackerFactory(\n\t\ttype: string,\n\t\tfactory: vscode.DebugAdapterTrackerFactory,\n\t): vscode.Disposable {\n\t\tif (!factory) {\n\t\t\treturn new Disposable(() => {});\n\t\t}\n\n\t\tconst handle = this._trackerFactoryHandleCounter++;\n\t\tthis._trackerFactories.push({ type, handle, factory });\n\n\t\treturn new Disposable(() => {\n\t\t\tthis._trackerFactories = this._trackerFactories.filter(\n\t\t\t\t(p) => p.factory !== factory,\n\t\t\t); // remove\n\t\t});\n\t}\n\n\t// RPC methods (ExtHostDebugServiceShape)\n\n\tpublic async $runInTerminal(\n\t\targs: DebugProtocol.RunInTerminalRequestArguments,\n\t\tsessionId: string,\n\t): Promise<number | undefined> {\n\t\treturn Promise.resolve(undefined);\n\t}\n\n\tpublic async $substituteVariables(\n\t\tfolderUri: UriComponents | undefined,\n\t\tconfig: IConfig,\n\t): Promise<IConfig> {\n\t\tlet ws: IWorkspaceFolder | undefined;\n\t\tconst folder = await this.getFolder(folderUri);\n\t\tif (folder) {\n\t\t\tws = {\n\t\t\t\turi: folder.uri,\n\t\t\t\tname: folder.name,\n\t\t\t\tindex: folder.index,\n\t\t\t\ttoResource: () => {\n\t\t\t\t\tthrow new Error(\"Not implemented\");\n\t\t\t\t},\n\t\t\t};\n\t\t}\n\t\tconst variableResolver = await this._variableResolver.getResolver();\n\t\treturn variableResolver.resolveAnyAsync(ws, config);\n\t}\n\n\tprotected createDebugAdapter(\n\t\tadapter: vscode.DebugAdapterDescriptor,\n\t\tsession: ExtHostDebugSession,\n\t): AbstractDebugAdapter | undefined {\n\t\tif (adapter instanceof DebugAdapterInlineImplementation) {\n\t\t\treturn new DirectDebugAdapter(adapter.implementation);\n\t\t}\n\t\treturn undefined;\n\t}\n\n\tprotected createSignService(): ISignService | undefined {\n\t\treturn undefined;\n\t}\n\n\tpublic async $startDASession(\n\t\tdebugAdapterHandle: number,\n\t\tsessionDto: IDebugSessionDto,\n\t): Promise<void> {\n\t\tconst session = await this.getSession(sessionDto);\n\n\t\treturn this.getAdapterDescriptor(\n\t\t\tthis.getAdapterDescriptorFactoryByType(session.type),\n\t\t\tsession,\n\t\t).then((daDescriptor) => {\n\t\t\tif (!daDescriptor) {\n\t\t\t\tthrow new Error(\n\t\t\t\t\t`Couldn't find a debug adapter descriptor for debug type '${session.type}' (extension might have failed to activate)`,\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tconst da = this.createDebugAdapter(daDescriptor, session);\n\t\t\tif (!da) {\n\t\t\t\tthrow new Error(\n\t\t\t\t\t`Couldn't create a debug adapter for type '${session.type}'.`,\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tconst debugAdapter = da;\n\n\t\t\tthis._debugAdapters.set(debugAdapterHandle, debugAdapter);\n\n\t\t\treturn this.getDebugAdapterTrackers(session).then((tracker) => {\n\t\t\t\tif (tracker) {\n\t\t\t\t\tthis._debugAdaptersTrackers.set(\n\t\t\t\t\t\tdebugAdapterHandle,\n\t\t\t\t\t\ttracker,\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\tdebugAdapter.onMessage(async (message) => {\n\t\t\t\t\tif (\n\t\t\t\t\t\tmessage.type === \"request\" &&\n\t\t\t\t\t\t(<DebugProtocol.Request>message).command === \"handshake\"\n\t\t\t\t\t) {\n\t\t\t\t\t\tconst request = <DebugProtocol.Request>message;\n\n\t\t\t\t\t\tconst response: DebugProtocol.Response = {\n\t\t\t\t\t\t\ttype: \"response\",\n\t\t\t\t\t\t\tseq: 0,\n\t\t\t\t\t\t\tcommand: request.command,\n\t\t\t\t\t\t\trequest_seq: request.seq,\n\t\t\t\t\t\t\tsuccess: true,\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\tif (!this._signService) {\n\t\t\t\t\t\t\tthis._signService = this.createSignService();\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tif (this._signService) {\n\t\t\t\t\t\t\t\tconst signature = await this._signService.sign(\n\t\t\t\t\t\t\t\t\trequest.arguments.value,\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\tresponse.body = {\n\t\t\t\t\t\t\t\t\tsignature: signature,\n\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t\tdebugAdapter.sendResponse(response);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tthrow new Error(\"no signer\");\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\t\tresponse.success = false;\n\t\t\t\t\t\t\tresponse.message = e.message;\n\t\t\t\t\t\t\tdebugAdapter.sendResponse(response);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (tracker && tracker.onDidSendMessage) {\n\t\t\t\t\t\t\ttracker.onDidSendMessage(message);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// DA -> VS Code\n\t\t\t\t\t\tmessage = convertToVSCPaths(message, true);\n\n\t\t\t\t\t\tthis._debugServiceProxy.$acceptDAMessage(\n\t\t\t\t\t\t\tdebugAdapterHandle,\n\t\t\t\t\t\t\tmessage,\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\tdebugAdapter.onError((err) => {\n\t\t\t\t\tif (tracker && tracker.onError) {\n\t\t\t\t\t\ttracker.onError(err);\n\t\t\t\t\t}\n\t\t\t\t\tthis._debugServiceProxy.$acceptDAError(\n\t\t\t\t\t\tdebugAdapterHandle,\n\t\t\t\t\t\terr.name,\n\t\t\t\t\t\terr.message,\n\t\t\t\t\t\terr.stack,\n\t\t\t\t\t);\n\t\t\t\t});\n\t\t\t\tdebugAdapter.onExit((code: number | null) => {\n\t\t\t\t\tif (tracker && tracker.onExit) {\n\t\t\t\t\t\ttracker.onExit(code ?? undefined, undefined);\n\t\t\t\t\t}\n\t\t\t\t\tthis._debugServiceProxy.$acceptDAExit(\n\t\t\t\t\t\tdebugAdapterHandle,\n\t\t\t\t\t\tcode ?? undefined,\n\t\t\t\t\t\tundefined,\n\t\t\t\t\t);\n\t\t\t\t});\n\n\t\t\t\tif (tracker && tracker.onWillStartSession) {\n\t\t\t\t\ttracker.onWillStartSession();\n\t\t\t\t}\n\n\t\t\t\treturn debugAdapter.startSession();\n\t\t\t});\n\t\t});\n\t}\n\n\tpublic $sendDAMessage(\n\t\tdebugAdapterHandle: number,\n\t\tmessage: DebugProtocol.ProtocolMessage,\n\t): void {\n\t\t// VS Code -> DA\n\t\tmessage = convertToDAPaths(message, false);\n\n\t\tconst tracker = this._debugAdaptersTrackers.get(debugAdapterHandle); // TODO@AW: same handle?\n\t\tif (tracker && tracker.onWillReceiveMessage) {\n\t\t\ttracker.onWillReceiveMessage(message);\n\t\t}\n\n\t\tconst da = this._debugAdapters.get(debugAdapterHandle);\n\t\tda?.sendMessage(message);\n\t}\n\n\tpublic $stopDASession(debugAdapterHandle: number): Promise<void> {\n\t\tconst tracker = this._debugAdaptersTrackers.get(debugAdapterHandle);\n\t\tthis._debugAdaptersTrackers.delete(debugAdapterHandle);\n\t\tif (tracker && tracker.onWillStopSession) {\n\t\t\ttracker.onWillStopSession();\n\t\t}\n\n\t\tconst da = this._debugAdapters.get(debugAdapterHandle);\n\t\tthis._debugAdapters.delete(debugAdapterHandle);\n\t\tif (da) {\n\t\t\treturn da.stopSession();\n\t\t} else {\n\t\t\treturn Promise.resolve(void 0);\n\t\t}\n\t}\n\n\tpublic $acceptBreakpointsDelta(delta: IBreakpointsDeltaDto): void {\n\t\tconst a: vscode.Breakpoint[] = [];\n\t\tconst r: vscode.Breakpoint[] = [];\n\t\tconst c: vscode.Breakpoint[] = [];\n\n\t\tif (delta.added) {\n\t\t\tfor (const bpd of delta.added) {\n\t\t\t\tconst id = bpd.id;\n\t\t\t\tif (id && !this._breakpoints.has(id)) {\n\t\t\t\t\tlet bp: Breakpoint;\n\t\t\t\t\tif (bpd.type === \"function\") {\n\t\t\t\t\t\tbp = new FunctionBreakpoint(\n\t\t\t\t\t\t\tbpd.functionName,\n\t\t\t\t\t\t\tbpd.enabled,\n\t\t\t\t\t\t\tbpd.condition,\n\t\t\t\t\t\t\tbpd.hitCondition,\n\t\t\t\t\t\t\tbpd.logMessage,\n\t\t\t\t\t\t\tbpd.mode,\n\t\t\t\t\t\t);\n\t\t\t\t\t} else if (bpd.type === \"data\") {\n\t\t\t\t\t\tbp = new DataBreakpoint(\n\t\t\t\t\t\t\tbpd.label,\n\t\t\t\t\t\t\tbpd.dataId,\n\t\t\t\t\t\t\tbpd.canPersist,\n\t\t\t\t\t\t\tbpd.enabled,\n\t\t\t\t\t\t\tbpd.hitCondition,\n\t\t\t\t\t\t\tbpd.condition,\n\t\t\t\t\t\t\tbpd.logMessage,\n\t\t\t\t\t\t\tbpd.mode,\n\t\t\t\t\t\t);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconst uri = URI.revive(bpd.uri);\n\t\t\t\t\t\tbp = new SourceBreakpoint(\n\t\t\t\t\t\t\tnew Location(\n\t\t\t\t\t\t\t\turi,\n\t\t\t\t\t\t\t\tnew Position(bpd.line, bpd.character),\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\tbpd.enabled,\n\t\t\t\t\t\t\tbpd.condition,\n\t\t\t\t\t\t\tbpd.hitCondition,\n\t\t\t\t\t\t\tbpd.logMessage,\n\t\t\t\t\t\t\tbpd.mode,\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t\tsetBreakpointId(bp, id);\n\t\t\t\t\tthis._breakpoints.set(id, bp);\n\t\t\t\t\ta.push(bp);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (delta.removed) {\n\t\t\tfor (const id of delta.removed) {\n\t\t\t\tconst bp = this._breakpoints.get(id);\n\t\t\t\tif (bp) {\n\t\t\t\t\tthis._breakpoints.delete(id);\n\t\t\t\t\tr.push(bp);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (delta.changed) {\n\t\t\tfor (const bpd of delta.changed) {\n\t\t\t\tif (bpd.id) {\n\t\t\t\t\tconst bp = this._breakpoints.get(bpd.id);\n\t\t\t\t\tif (bp) {\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\tbp instanceof FunctionBreakpoint &&\n\t\t\t\t\t\t\tbpd.type === \"function\"\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\tconst fbp = <any>bp;\n\t\t\t\t\t\t\tfbp.enabled = bpd.enabled;\n\t\t\t\t\t\t\tfbp.condition = bpd.condition;\n\t\t\t\t\t\t\tfbp.hitCondition = bpd.hitCondition;\n\t\t\t\t\t\t\tfbp.logMessage = bpd.logMessage;\n\t\t\t\t\t\t\tfbp.functionName = bpd.functionName;\n\t\t\t\t\t\t} else if (\n\t\t\t\t\t\t\tbp instanceof SourceBreakpoint &&\n\t\t\t\t\t\t\tbpd.type === \"source\"\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\tconst sbp = <any>bp;\n\t\t\t\t\t\t\tsbp.enabled = bpd.enabled;\n\t\t\t\t\t\t\tsbp.condition = bpd.condition;\n\t\t\t\t\t\t\tsbp.hitCondition = bpd.hitCondition;\n\t\t\t\t\t\t\tsbp.logMessage = bpd.logMessage;\n\t\t\t\t\t\t\tsbp.location = new Location(\n\t\t\t\t\t\t\t\tURI.revive(bpd.uri),\n\t\t\t\t\t\t\t\tnew Position(bpd.line, bpd.character),\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tc.push(bp);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tthis.fireBreakpointChanges(a, r, c);\n\t}\n\n\tpublic async $acceptStackFrameFocus(\n\t\tfocusDto: IThreadFocusDto | IStackFrameFocusDto | undefined,\n\t): Promise<void> {\n\t\tlet focus: vscode.DebugThread | vscode.DebugStackFrame | undefined;\n\t\tif (focusDto) {\n\t\t\tconst session = await this.getSession(focusDto.sessionId);\n\t\t\tif (focusDto.kind === \"thread\") {\n\t\t\t\tfocus = new DebugThread(session.api, focusDto.threadId);\n\t\t\t} else {\n\t\t\t\tfocus = new DebugStackFrame(\n\t\t\t\t\tsession.api,\n\t\t\t\t\tfocusDto.threadId,\n\t\t\t\t\tfocusDto.frameId,\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\tthis._activeStackItem = focus;\n\t\tthis._onDidChangeActiveStackItem.fire(this._activeStackItem);\n\t}\n\n\tpublic $provideDebugConfigurations(\n\t\tconfigProviderHandle: number,\n\t\tfolderUri: UriComponents | undefined,\n\t\ttoken: CancellationToken,\n\t): Promise<vscode.DebugConfiguration[]> {\n\t\treturn asPromise(async () => {\n\t\t\tconst provider =\n\t\t\t\tthis.getConfigProviderByHandle(configProviderHandle);\n\t\t\tif (!provider) {\n\t\t\t\tthrow new Error(\"no DebugConfigurationProvider found\");\n\t\t\t}\n\t\t\tif (!provider.provideDebugConfigurations) {\n\t\t\t\tthrow new Error(\n\t\t\t\t\t\"DebugConfigurationProvider has no method provideDebugConfigurations\",\n\t\t\t\t);\n\t\t\t}\n\t\t\tconst folder = await this.getFolder(folderUri);\n\t\t\treturn provider.provideDebugConfigurations(folder, token);\n\t\t}).then((debugConfigurations) => {\n\t\t\tif (!debugConfigurations) {\n\t\t\t\tthrow new Error(\n\t\t\t\t\t\"nothing returned from DebugConfigurationProvider.provideDebugConfigurations\",\n\t\t\t\t);\n\t\t\t}\n\t\t\treturn debugConfigurations;\n\t\t});\n\t}\n\n\tpublic $resolveDebugConfiguration(\n\t\tconfigProviderHandle: number,\n\t\tfolderUri: UriComponents | undefined,\n\t\tdebugConfiguration: vscode.DebugConfiguration,\n\t\ttoken: CancellationToken,\n\t): Promise<vscode.DebugConfiguration | null | undefined> {\n\t\treturn asPromise(async () => {\n\t\t\tconst provider =\n\t\t\t\tthis.getConfigProviderByHandle(configProviderHandle);\n\t\t\tif (!provider) {\n\t\t\t\tthrow new Error(\"no DebugConfigurationProvider found\");\n\t\t\t}\n\t\t\tif (!provider.resolveDebugConfiguration) {\n\t\t\t\tthrow new Error(\n\t\t\t\t\t\"DebugConfigurationProvider has no method resolveDebugConfiguration\",\n\t\t\t\t);\n\t\t\t}\n\t\t\tconst folder = await this.getFolder(folderUri);\n\t\t\treturn provider.resolveDebugConfiguration(\n\t\t\t\tfolder,\n\t\t\t\tdebugConfiguration,\n\t\t\t\ttoken,\n\t\t\t);\n\t\t});\n\t}\n\n\tpublic $resolveDebugConfigurationWithSubstitutedVariables(\n\t\tconfigProviderHandle: number,\n\t\tfolderUri: UriComponents | undefined,\n\t\tdebugConfiguration: vscode.DebugConfiguration,\n\t\ttoken: CancellationToken,\n\t): Promise<vscode.DebugConfiguration | null | undefined> {\n\t\treturn asPromise(async () => {\n\t\t\tconst provider =\n\t\t\t\tthis.getConfigProviderByHandle(configProviderHandle);\n\t\t\tif (!provider) {\n\t\t\t\tthrow new Error(\"no DebugConfigurationProvider found\");\n\t\t\t}\n\t\t\tif (!provider.resolveDebugConfigurationWithSubstitutedVariables) {\n\t\t\t\tthrow new Error(\n\t\t\t\t\t\"DebugConfigurationProvider has no method resolveDebugConfigurationWithSubstitutedVariables\",\n\t\t\t\t);\n\t\t\t}\n\t\t\tconst folder = await this.getFolder(folderUri);\n\t\t\treturn provider.resolveDebugConfigurationWithSubstitutedVariables(\n\t\t\t\tfolder,\n\t\t\t\tdebugConfiguration,\n\t\t\t\ttoken,\n\t\t\t);\n\t\t});\n\t}\n\n\tpublic async $provideDebugAdapter(\n\t\tadapterFactoryHandle: number,\n\t\tsessionDto: IDebugSessionDto,\n\t): Promise<Dto<IAdapterDescriptor>> {\n\t\tconst adapterDescriptorFactory =\n\t\t\tthis.getAdapterDescriptorFactoryByHandle(adapterFactoryHandle);\n\t\tif (!adapterDescriptorFactory) {\n\t\t\treturn Promise.reject(\n\t\t\t\tnew Error(\"no adapter descriptor factory found for handle\"),\n\t\t\t);\n\t\t}\n\t\tconst session = await this.getSession(sessionDto);\n\t\treturn this.getAdapterDescriptor(\n\t\t\tadapterDescriptorFactory,\n\t\t\tsession,\n\t\t).then((adapterDescriptor) => {\n\t\t\tif (!adapterDescriptor) {\n\t\t\t\tthrow new Error(\n\t\t\t\t\t`Couldn't find a debug adapter descriptor for debug type '${session.type}'`,\n\t\t\t\t);\n\t\t\t}\n\t\t\treturn this.convertToDto(adapterDescriptor);\n\t\t});\n\t}\n\n\tpublic async $acceptDebugSessionStarted(\n\t\tsessionDto: IDebugSessionDto,\n\t): Promise<void> {\n\t\tconst session = await this.getSession(sessionDto);\n\t\tthis._onDidStartDebugSession.fire(session.api);\n\t}\n\n\tpublic async $acceptDebugSessionTerminated(\n\t\tsessionDto: IDebugSessionDto,\n\t): Promise<void> {\n\t\tconst session = await this.getSession(sessionDto);\n\t\tif (session) {\n\t\t\tthis._onDidTerminateDebugSession.fire(session.api);\n\t\t\tthis._debugSessions.delete(session.id);\n\t\t}\n\t}\n\n\tpublic async $acceptDebugSessionActiveChanged(\n\t\tsessionDto: IDebugSessionDto | undefined,\n\t): Promise<void> {\n\t\tthis._activeDebugSession = sessionDto\n\t\t\t? await this.getSession(sessionDto)\n\t\t\t: undefined;\n\t\tthis._onDidChangeActiveDebugSession.fire(this._activeDebugSession?.api);\n\t}\n\n\tpublic async $acceptDebugSessionNameChanged(\n\t\tsessionDto: IDebugSessionDto,\n\t\tname: string,\n\t): Promise<void> {\n\t\tconst session = await this.getSession(sessionDto);\n\t\tsession?._acceptNameChanged(name);\n\t}\n\n\tpublic async $acceptDebugSessionCustomEvent(\n\t\tsessionDto: IDebugSessionDto,\n\t\tevent: any,\n\t): Promise<void> {\n\t\tconst session = await this.getSession(sessionDto);\n\t\tconst ee: vscode.DebugSessionCustomEvent = {\n\t\t\tsession: session.api,\n\t\t\tevent: event.event,\n\t\t\tbody: event.body,\n\t\t};\n\t\tthis._onDidReceiveDebugSessionCustomEvent.fire(ee);\n\t}\n\n\t// private & dto helpers\n\n\tprivate convertToDto(\n\t\tx: vscode.DebugAdapterDescriptor,\n\t): Dto<IAdapterDescriptor> {\n\t\tif (x instanceof DebugAdapterExecutable) {\n\t\t\treturn this.convertExecutableToDto(x);\n\t\t} else if (x instanceof DebugAdapterServer) {\n\t\t\treturn this.convertServerToDto(x);\n\t\t} else if (x instanceof DebugAdapterNamedPipeServer) {\n\t\t\treturn this.convertPipeServerToDto(x);\n\t\t} else if (x instanceof DebugAdapterInlineImplementation) {\n\t\t\treturn this.convertImplementationToDto(x);\n\t\t} else {\n\t\t\tthrow new Error(\"convertToDto unexpected type\");\n\t\t}\n\t}\n\n\tprotected convertExecutableToDto(\n\t\tx: DebugAdapterExecutable,\n\t): IDebugAdapterExecutable {\n\t\treturn {\n\t\t\ttype: \"executable\",\n\t\t\tcommand: x.command,\n\t\t\targs: x.args,\n\t\t\toptions: x.options,\n\t\t};\n\t}\n\n\tprotected convertServerToDto(x: DebugAdapterServer): IDebugAdapterServer {\n\t\treturn {\n\t\t\ttype: \"server\",\n\t\t\tport: x.port,\n\t\t\thost: x.host,\n\t\t};\n\t}\n\n\tprotected convertPipeServerToDto(\n\t\tx: DebugAdapterNamedPipeServer,\n\t): IDebugAdapterNamedPipeServer {\n\t\treturn {\n\t\t\ttype: \"pipeServer\",\n\t\t\tpath: x.path,\n\t\t};\n\t}\n\n\tprotected convertImplementationToDto(\n\t\tx: DebugAdapterInlineImplementation,\n\t): IDebugAdapterImpl {\n\t\treturn {\n\t\t\ttype: \"implementation\",\n\t\t};\n\t}\n\n\tprivate getAdapterDescriptorFactoryByType(\n\t\ttype: string,\n\t): vscode.DebugAdapterDescriptorFactory | undefined {\n\t\tconst results = this._adapterFactories.filter((p) => p.type === type);\n\t\tif (results.length > 0) {\n\t\t\treturn results[0].factory;\n\t\t}\n\t\treturn undefined;\n\t}\n\n\tprivate getAdapterDescriptorFactoryByHandle(\n\t\thandle: number,\n\t): vscode.DebugAdapterDescriptorFactory | undefined {\n\t\tconst results = this._adapterFactories.filter(\n\t\t\t(p) => p.handle === handle,\n\t\t);\n\t\tif (results.length > 0) {\n\t\t\treturn results[0].factory;\n\t\t}\n\t\treturn undefined;\n\t}\n\n\tprivate getConfigProviderByHandle(\n\t\thandle: number,\n\t): vscode.DebugConfigurationProvider | undefined {\n\t\tconst results = this._configProviders.filter(\n\t\t\t(p) => p.handle === handle,\n\t\t);\n\t\tif (results.length > 0) {\n\t\t\treturn results[0].provider;\n\t\t}\n\t\treturn undefined;\n\t}\n\n\tprivate definesDebugType(ed: IExtensionDescription, type: string) {\n\t\tif (ed.contributes) {\n\t\t\tconst debuggers = ed.contributes[\"debuggers\"];\n\t\t\tif (debuggers && debuggers.length > 0) {\n\t\t\t\tfor (const dbg of debuggers) {\n\t\t\t\t\t// only debugger contributions with a \"label\" are considered a \"defining\" debugger contribution\n\t\t\t\t\tif (dbg.label && dbg.type) {\n\t\t\t\t\t\tif (dbg.type === type) {\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\n\tprivate getDebugAdapterTrackers(\n\t\tsession: ExtHostDebugSession,\n\t): Promise<vscode.DebugAdapterTracker | undefined> {\n\t\tconst config = session.configuration;\n\t\tconst type = config.type;\n\n\t\tconst promises = this._trackerFactories\n\t\t\t.filter((tuple) => tuple.type === type || tuple.type === \"*\")\n\t\t\t.map((tuple) =>\n\t\t\t\tasPromise<vscode.ProviderResult<vscode.DebugAdapterTracker>>(\n\t\t\t\t\t() => tuple.factory.createDebugAdapterTracker(session.api),\n\t\t\t\t).then(\n\t\t\t\t\t(p) => p,\n\t\t\t\t\t(err) => null,\n\t\t\t\t),\n\t\t\t);\n\n\t\treturn Promise.race([\n\t\t\tPromise.all(promises).then((result) => {\n\t\t\t\tconst trackers = coalesce(result); // filter null\n\t\t\t\tif (trackers.length > 0) {\n\t\t\t\t\treturn new MultiTracker(trackers);\n\t\t\t\t}\n\t\t\t\treturn undefined;\n\t\t\t}),\n\t\t\tnew Promise<undefined>((resolve) =>\n\t\t\t\tsetTimeout(() => resolve(undefined), 1000),\n\t\t\t),\n\t\t]).catch((err) => {\n\t\t\t// ignore errors\n\t\t\treturn undefined;\n\t\t});\n\t}\n\n\tprivate async getAdapterDescriptor(\n\t\tadapterDescriptorFactory:\n\t\t\t| vscode.DebugAdapterDescriptorFactory\n\t\t\t| undefined,\n\t\tsession: ExtHostDebugSession,\n\t): Promise<vscode.DebugAdapterDescriptor | undefined> {\n\t\t// a \"debugServer\" attribute in the launch config takes precedence\n\t\tconst serverPort = session.configuration.debugServer;\n\t\tif (typeof serverPort === \"number\") {\n\t\t\treturn Promise.resolve(new DebugAdapterServer(serverPort));\n\t\t}\n\n\t\tif (adapterDescriptorFactory) {\n\t\t\tconst extensionRegistry =\n\t\t\t\tawait this._extensionService.getExtensionRegistry();\n\t\t\treturn asPromise(() =>\n\t\t\t\tadapterDescriptorFactory.createDebugAdapterDescriptor(\n\t\t\t\t\tsession.api,\n\t\t\t\t\tthis.daExecutableFromPackage(session, extensionRegistry),\n\t\t\t\t),\n\t\t\t).then((daDescriptor) => {\n\t\t\t\tif (daDescriptor) {\n\t\t\t\t\treturn daDescriptor;\n\t\t\t\t}\n\t\t\t\treturn undefined;\n\t\t\t});\n\t\t}\n\n\t\t// fallback: use executable information from package.json\n\t\tconst extensionRegistry =\n\t\t\tawait this._extensionService.getExtensionRegistry();\n\t\treturn Promise.resolve(\n\t\t\tthis.daExecutableFromPackage(session, extensionRegistry),\n\t\t);\n\t}\n\n\tprotected daExecutableFromPackage(\n\t\tsession: ExtHostDebugSession,\n\t\textensionRegistry: ExtensionDescriptionRegistry,\n\t): DebugAdapterExecutable | undefined {\n\t\treturn undefined;\n\t}\n\n\tprivate fireBreakpointChanges(\n\t\tadded: vscode.Breakpoint[],\n\t\tremoved: vscode.Breakpoint[],\n\t\tchanged: vscode.Breakpoint[],\n\t) {\n\t\tif (added.length > 0 || removed.length > 0 || changed.length > 0) {\n\t\t\tthis._onDidChangeBreakpoints.fire(\n\t\t\t\tObject.freeze({\n\t\t\t\t\tadded,\n\t\t\t\t\tremoved,\n\t\t\t\t\tchanged,\n\t\t\t\t}),\n\t\t\t);\n\t\t}\n\t}\n\n\tprivate async getSession(\n\t\tdto: IDebugSessionDto,\n\t): Promise<ExtHostDebugSession> {\n\t\tif (dto) {\n\t\t\tif (typeof dto === \"string\") {\n\t\t\t\tconst ds = this._debugSessions.get(dto);\n\t\t\t\tif (ds) {\n\t\t\t\t\treturn ds;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tlet ds = this._debugSessions.get(dto.id);\n\t\t\t\tif (!ds) {\n\t\t\t\t\tconst folder = await this.getFolder(dto.folderUri);\n\t\t\t\t\tconst parent = dto.parent\n\t\t\t\t\t\t? this._debugSessions.get(dto.parent)\n\t\t\t\t\t\t: undefined;\n\t\t\t\t\tds = new ExtHostDebugSession(\n\t\t\t\t\t\tthis._debugServiceProxy,\n\t\t\t\t\t\tdto.id,\n\t\t\t\t\t\tdto.type,\n\t\t\t\t\t\tdto.name,\n\t\t\t\t\t\tfolder,\n\t\t\t\t\t\tdto.configuration,\n\t\t\t\t\t\tparent?.api,\n\t\t\t\t\t);\n\t\t\t\t\tthis._debugSessions.set(ds.id, ds);\n\t\t\t\t\tthis._debugServiceProxy.$sessionCached(ds.id);\n\t\t\t\t}\n\t\t\t\treturn ds;\n\t\t\t}\n\t\t}\n\t\tthrow new Error(\"cannot find session\");\n\t}\n\n\tprivate getFolder(\n\t\t_folderUri: UriComponents | undefined,\n\t): Promise<vscode.WorkspaceFolder | undefined> {\n\t\tif (_folderUri) {\n\t\t\tconst folderURI = URI.revive(_folderUri);\n\t\t\treturn this._workspaceService.resolveWorkspaceFolder(folderURI);\n\t\t}\n\t\treturn Promise.resolve(undefined);\n\t}\n\n\tprivate extensionVisKey(extensionId: string, id: string) {\n\t\treturn `${extensionId}\\0${id}`;\n\t}\n\n\tprivate serializeVisualization(\n\t\textensionId: string,\n\t\tviz: vscode.DebugVisualization[\"visualization\"],\n\t): MainThreadDebugVisualization | undefined {\n\t\tif (!viz) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\tif (\"title\" in viz && \"command\" in viz) {\n\t\t\treturn { type: DebugVisualizationType.Command };\n\t\t}\n\n\t\tif (\"treeId\" in viz) {\n\t\t\treturn {\n\t\t\t\ttype: DebugVisualizationType.Tree,\n\t\t\t\tid: `${extensionId}\\0${viz.treeId}`,\n\t\t\t};\n\t\t}\n\n\t\tthrow new Error(\"Unsupported debug visualization type\");\n\t}\n\n\tprivate getIconPathOrClass(icon: vscode.DebugVisualization[\"iconPath\"]) {\n\t\tconst iconPathOrIconClass = this.getIconUris(icon);\n\t\tlet iconPath: { dark: URI; light?: URI | undefined } | undefined;\n\t\tlet iconClass: string | undefined;\n\t\tif (\"id\" in iconPathOrIconClass) {\n\t\t\ticonClass = ThemeIconUtils.asClassName(iconPathOrIconClass);\n\t\t} else {\n\t\t\ticonPath = iconPathOrIconClass;\n\t\t}\n\n\t\treturn {\n\t\t\ticonPath,\n\t\t\ticonClass,\n\t\t};\n\t}\n\n\tprivate getIconUris(\n\t\ticonPath: vscode.DebugVisualization[\"iconPath\"],\n\t): { dark: URI; light?: URI } | { id: string } {\n\t\tif (iconPath instanceof ThemeIcon) {\n\t\t\treturn { id: iconPath.id };\n\t\t}\n\t\tconst dark =\n\t\t\ttypeof iconPath === \"object\" && \"dark\" in iconPath\n\t\t\t\t? iconPath.dark\n\t\t\t\t: iconPath;\n\t\tconst light =\n\t\t\ttypeof iconPath === \"object\" && \"light\" in iconPath\n\t\t\t\t? iconPath.light\n\t\t\t\t: iconPath;\n\t\treturn {\n\t\t\tdark: (typeof dark === \"string\" ? URI.file(dark) : dark) as URI,\n\t\t\tlight: (typeof light === \"string\" ? URI.file(light) : light) as URI,\n\t\t};\n\t}\n}\n\nexport class ExtHostDebugSession {\n\tprivate apiSession?: vscode.DebugSession;\n\tconstructor(\n\t\tprivate _debugServiceProxy: MainThreadDebugServiceShape,\n\t\tprivate _id: DebugSessionUUID,\n\t\tprivate _type: string,\n\t\tprivate _name: string,\n\t\tprivate _workspaceFolder: vscode.WorkspaceFolder | undefined,\n\t\tprivate _configuration: vscode.DebugConfiguration,\n\t\tprivate _parentSession: vscode.DebugSession | undefined,\n\t) {}\n\n\tpublic get api(): vscode.DebugSession {\n\t\tconst that = this;\n\t\treturn (this.apiSession ??= Object.freeze({\n\t\t\tid: that._id,\n\t\t\ttype: that._type,\n\t\t\tget name() {\n\t\t\t\treturn that._name;\n\t\t\t},\n\t\t\tset name(name: string) {\n\t\t\t\tthat._name = name;\n\t\t\t\tthat._debugServiceProxy.$setDebugSessionName(that._id, name);\n\t\t\t},\n\t\t\tparentSession: that._parentSession,\n\t\t\tworkspaceFolder: that._workspaceFolder,\n\t\t\tconfiguration: that._configuration,\n\t\t\tcustomRequest(command: string, args: any): Promise<any> {\n\t\t\t\treturn that._debugServiceProxy.$customDebugAdapterRequest(\n\t\t\t\t\tthat._id,\n\t\t\t\t\tcommand,\n\t\t\t\t\targs,\n\t\t\t\t);\n\t\t\t},\n\t\t\tgetDebugProtocolBreakpoint(\n\t\t\t\tbreakpoint: vscode.Breakpoint,\n\t\t\t): Promise<vscode.DebugProtocolBreakpoint | undefined> {\n\t\t\t\treturn that._debugServiceProxy.$getDebugProtocolBreakpoint(\n\t\t\t\t\tthat._id,\n\t\t\t\t\tbreakpoint.id,\n\t\t\t\t);\n\t\t\t},\n\t\t}));\n\t}\n\n\tpublic get id(): string {\n\t\treturn this._id;\n\t}\n\n\tpublic get type(): string {\n\t\treturn this._type;\n\t}\n\n\t_acceptNameChanged(name: string) {\n\t\tthis._name = name;\n\t}\n\n\tpublic get configuration(): vscode.DebugConfiguration {\n\t\treturn this._configuration;\n\t}\n}\n\nexport class ExtHostDebugConsole {\n\treadonly value: vscode.DebugConsole;\n\n\tconstructor(proxy: MainThreadDebugServiceShape) {\n\t\tthis.value = Object.freeze({\n\t\t\tappend(value: string): void {\n\t\t\t\tproxy.$appendDebugConsole(value);\n\t\t\t},\n\t\t\tappendLine(value: string): void {\n\t\t\t\tthis.append(value + \"\\n\");\n\t\t\t},\n\t\t});\n\t}\n}\n\ninterface ConfigProviderTuple {\n\ttype: string;\n\thandle: number;\n\tprovider: vscode.DebugConfigurationProvider;\n}\n\ninterface DescriptorFactoryTuple {\n\ttype: string;\n\thandle: number;\n\tfactory: vscode.DebugAdapterDescriptorFactory;\n}\n\ninterface TrackerFactoryTuple {\n\ttype: string;\n\thandle: number;\n\tfactory: vscode.DebugAdapterTrackerFactory;\n}\n\nclass MultiTracker implements vscode.DebugAdapterTracker {\n\tconstructor(private trackers: vscode.DebugAdapterTracker[]) {}\n\n\tonWillStartSession(): void {\n\t\tthis.trackers.forEach((t) =>\n\t\t\tt.onWillStartSession ? t.onWillStartSession() : undefined,\n\t\t);\n\t}\n\n\tonWillReceiveMessage(message: any): void {\n\t\tthis.trackers.forEach((t) =>\n\t\t\tt.onWillReceiveMessage\n\t\t\t\t? t.onWillReceiveMessage(message)\n\t\t\t\t: undefined,\n\t\t);\n\t}\n\n\tonDidSendMessage(message: any): void {\n\t\tthis.trackers.forEach((t) =>\n\t\t\tt.onDidSendMessage ? t.onDidSendMessage(message) : undefined,\n\t\t);\n\t}\n\n\tonWillStopSession(): void {\n\t\tthis.trackers.forEach((t) =>\n\t\t\tt.onWillStopSession ? t.onWillStopSession() : undefined,\n\t\t);\n\t}\n\n\tonError(error: Error): void {\n\t\tthis.trackers.forEach((t) =>\n\t\t\tt.onError ? t.onError(error) : undefined,\n\t\t);\n\t}\n\n\tonExit(code: number, signal: string): void {\n\t\tthis.trackers.forEach((t) =>\n\t\t\tt.onExit ? t.onExit(code, signal) : undefined,\n\t\t);\n\t}\n}\n\n/*\n * Call directly into a debug adapter implementation\n */\nclass DirectDebugAdapter extends AbstractDebugAdapter {\n\tconstructor(private implementation: vscode.DebugAdapter) {\n\t\tsuper();\n\n\t\timplementation.onDidSendMessage(\n\t\t\t(message: vscode.DebugProtocolMessage) => {\n\t\t\t\tthis.acceptMessage(message as DebugProtocol.ProtocolMessage);\n\t\t\t},\n\t\t);\n\t}\n\n\tstartSession(): Promise<void> {\n\t\treturn Promise.resolve(undefined);\n\t}\n\n\tsendMessage(message: DebugProtocol.ProtocolMessage): void {\n\t\tthis.implementation.handleMessage(message);\n\t}\n\n\tstopSession(): Promise<void> {\n\t\tthis.implementation.dispose();\n\t\treturn Promise.resolve(undefined);\n\t}\n}\n\nexport class WorkerExtHostDebugService extends ExtHostDebugServiceBase {\n\tconstructor(\n\t\t@IExtHostRpcService extHostRpcService: IExtHostRpcService,\n\t\t@IExtHostWorkspace workspaceService: IExtHostWorkspace,\n\t\t@IExtHostExtensionService extensionService: IExtHostExtensionService,\n\t\t@IExtHostConfiguration configurationService: IExtHostConfiguration,\n\t\t@IExtHostEditorTabs editorTabs: IExtHostEditorTabs,\n\t\t@IExtHostVariableResolverProvider variableResolver: IExtHostVariableResolverProvider,\n\t\t@IExtHostCommands commands: IExtHostCommands,\n\t\t@IExtHostTesting testing: IExtHostTesting,\n\t) {\n\t\tsuper(\n\t\t\textHostRpcService,\n\t\t\tworkspaceService,\n\t\t\textensionService,\n\t\t\tconfigurationService,\n\t\t\teditorTabs,\n\t\t\tvariableResolver,\n\t\t\tcommands,\n\t\t\ttesting,\n\t\t);\n\t}\n}\n"],
  "mappings": ";;;;;;;;;;;;AAMA,SAAS,gBAAgB;AACzB,SAAS,iBAAiB;AAE1B,SAAS,eAA2B;AACpC;AAAA,EACC,cAAc;AAAA,EACd;AAAA,OACM;AACP,SAAS,aAAa,sBAAsB;AAC5C,SAAS,WAA+B;AACxC;AAAA,EACC;AAAA,OAEM;AACP,SAAS,uBAAuB;AAGhC,SAAS,4BAA4B;AACrC;AAAA,EACC;AAAA,OAaM;AACP;AAAA,EACC;AAAA,EACA;AAAA,EACA;AAAA,OACM;AAGP;AAAA,EASC;AAAA,OAEM;AACP,SAAS,wBAAwB;AACjC,SAAS,6BAA6B;AACtC,SAAS,0BAA0B;AACnC,SAAS,gCAAgC;AACzC,SAAS,0BAA0B;AACnC,SAAS,uBAAuB;AAChC,YAAY,aAAa;AACzB;AAAA,EAEC;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,OACM;AACP,SAAS,wCAAwC;AACjD,SAAS,yBAAyB;AAE3B,MAAM,uBAAuB;AAAA,EACnC;AACD;AA0DO,IAAe,0BAAf,cACE,cAET;AAAA,EA+FC,YACqB,mBACS,mBACK,mBACD,uBACH,aACY,mBAChB,WACD,UACxB;AACD,UAAM;AARuB;AACK;AACD;AACH;AACY;AAChB;AACD;AAIzB,SAAK,+BAA+B;AACpC,SAAK,mBAAmB,CAAC;AAEzB,SAAK,+BAA+B;AACpC,SAAK,oBAAoB,CAAC;AAE1B,SAAK,+BAA+B;AACpC,SAAK,oBAAoB,CAAC;AAE1B,SAAK,iBAAiB,oBAAI,IAAI;AAC9B,SAAK,yBAAyB,oBAAI,IAAI;AAEtC,SAAK,0BAA0B,KAAK,UAAU,IAAI,QAA6B,CAAC;AAChF,SAAK,8BAA8B,KAAK,UAAU,IAAI,QAA6B,CAAC;AACpF,SAAK,iCAAiC,KAAK,UAAU,IAAI,QAAyC,CAAC;AACnG,SAAK,uCAAuC,KAAK,UAAU,IAAI,QAAwC,CAAC;AAExG,SAAK,qBAAqB,kBAAkB,SAAS,YAAY,sBAAsB;AAEvF,SAAK,0BAA0B,KAAK,UAAU,IAAI,QAAuC,CAAC;AAE1F,SAAK,8BAA8B,KAAK,UAAU,IAAI,QAAiE,CAAC;AAExH,SAAK,sBAAsB,IAAI,oBAAoB,KAAK,kBAAkB;AAE1E,SAAK,eAAe,oBAAI,IAA+B;AAEvD,SAAK,kBAAkB,qBAAqB,EAAE,KAAK,CAAC,sBAAoD;AACvG,WAAK,UAAU,kBAAkB,YAAY,OAAK;AACjD,aAAK,sBAAsB,iBAAiB;AAAA,MAC7C,CAAC,CAAC;AACF,WAAK,sBAAsB,iBAAiB;AAAA,IAC7C,CAAC;AAAA,EACF;AAAA,EAjSD,OAqJA;AAAA;AAAA;AAAA,EACU;AAAA,EAED;AAAA,EACA;AAAA,EAEA;AAAA,EACA;AAAA,EAEA;AAAA,EACA;AAAA,EAEA;AAAA,EACA,iBACP,oBAAI,IAA2C;AAAA,EAE/B;AAAA,EACjB,IAAI,yBAAqD;AACxD,WAAO,KAAK,wBAAwB;AAAA,EACrC;AAAA,EAEiB;AAAA,EACjB,IAAI,6BAAyD;AAC5D,WAAO,KAAK,4BAA4B;AAAA,EACzC;AAAA,EAEiB;AAAA,EAGjB,IAAI,gCAEF;AACD,WAAO,KAAK,+BAA+B;AAAA,EAC5C;AAAA,EAEQ;AAAA,EACR,IAAI,qBAAsD;AACzD,WAAO,KAAK,qBAAqB;AAAA,EAClC;AAAA,EAEiB;AAAA,EACjB,IAAI,sCAA6E;AAChF,WAAO,KAAK,qCAAqC;AAAA,EAClD;AAAA,EAEQ;AAAA,EACR,IAAI,qBAA0C;AAC7C,WAAO,KAAK,oBAAoB;AAAA,EACjC;AAAA,EAEQ;AAAA,EAES;AAAA,EAET;AAAA,EAIS;AAAA,EAIT;AAAA,EACA;AAAA,EAEA,wCAAwC;AAAA,EAC/B,+BAA+B,oBAAI,IAGlD;AAAA,EACe,2BAA2B,oBAAI,IAG9C;AAAA,EACe,iCAAiC,oBAAI,QAGpD;AAAA,EACe,8BAA8B,oBAAI,IAGjD;AAAA,EAEM;AAAA,EAES,eAAe,oBAAI,IAOlC;AAAA,EACM,uBAAuB;AAAA,EAiD/B,MAAa,uBACZ,QACA,SACmD;AACnD,UAAM,UAAU,KAAK,4BAA4B,OAAO;AACxD,QAAI,CAAC,SAAS;AACb,aAAO;AAAA,IACR;AAEA,UAAM,OAAO,MAAM,KAAK,yBACtB,IAAI,MAAM,GACT,cAAc,OAAO;AACxB,WAAO,OAAO,KAAK,0BAA0B,QAAQ,IAAI,IAAI;AAAA,EAC9D;AAAA,EAEO,+BACN,UACA,IACA,UACoB;AACpB,UAAM,cAAc,oBAAoB,MAAM,SAAS,UAAU;AACjE,UAAM,MAAM,KAAK,gBAAgB,aAAa,EAAE;AAChD,QAAI,KAAK,6BAA6B,IAAI,GAAG,GAAG;AAC/C,YAAM,IAAI;AAAA,QACT,2CAA2C,EAAE;AAAA,MAC9C;AAAA,IACD;AAEA,SAAK,yBAAyB,IAAI,KAAK,QAAQ;AAC/C,SAAK,mBAAmB;AAAA,MACvB;AAAA,MACA,CAAC,CAAC,SAAS;AAAA,IACZ;AACA,WAAO,aAAa,MAAM;AACzB,WAAK,mBAAmB,+BAA+B,GAAG;AAC1D,WAAK,yBAAyB,OAAO,EAAE;AAAA,IACxC,CAAC;AAAA,EACF;AAAA,EAEA,MAAa,+BACZ,QACA,SACyC;AACzC,UAAM,OAAO,KAAK,4BAA4B,IAAI,OAAO,GAAG;AAC5D,QAAI,CAAC,MAAM;AACV,aAAO,CAAC;AAAA,IACT;AAEA,UAAM,WAAW,MAAM,KAAK,yBAC1B,IAAI,MAAM,GACT,cAAc,IAAI;AACrB,WACC,UAAU,IAAI,CAAC,MAAM,KAAK,0BAA0B,QAAQ,CAAC,CAAC,KAC9D,CAAC;AAAA,EAEH;AAAA,EAEA,MAAa,wBACZ,SACA,OACmD;AACnD,UAAM,IAAI,KAAK,4BAA4B,IAAI,OAAO;AACtD,QAAI,CAAC,GAAG;AACP,aAAO;AAAA,IACR;AAEA,UAAM,IAAI,MAAM,KAAK,yBACnB,IAAI,EAAE,QAAQ,GACb,WAAW,EAAE,MAAM,KAAK;AAC3B,WAAO,KAAK,0BAA0B,EAAE,UAAU,KAAK,EAAE,IAAI;AAAA,EAC9D;AAAA,EAEO,uBAAuB,SAAuB;AACpD,UAAM,OAAO,KAAK,4BAA4B,IAAI,OAAO;AACzD,QAAI,CAAC,MAAM;AACV;AAAA,IACD;AAEA,UAAM,QAAQ,CAAC,KAAK,QAAQ;AAC5B,eAAW,YAAY,OAAO;AAC7B,UAAI,UAAU;AACb,mBAAW,SAAS,UAAU;AAC7B,gBAAM;AAAA,YACL,KAAK,4BAA4B,IAAI,KAAK,GAAG;AAAA,UAC9C;AACA,eAAK,4BAA4B,OAAO,KAAK;AAAA,QAC9C;AAAA,MACD;AAAA,IACD;AAAA,EACD;AAAA,EAEQ,0BACP,QACA,MAC8B;AAC9B,QAAI,KAAK,KAAK,+BAA+B,IAAI,IAAI;AACrD,QAAI,CAAC,IAAI;AACR,WAAK,KAAK;AACV,WAAK,+BAA+B,IAAI,MAAM,EAAE;AAChD,WAAK,4BAA4B,IAAI,IAAI;AAAA,QACxC,UAAU;AAAA,QACV;AAAA,MACD,CAAC;AAAA,IACF;AAEA,WAAO,QAAQ,cAAc,KAAK,MAAM,EAAE;AAAA,EAC3C;AAAA,EAEO,iBACN,KACA,SACM;AACN,UAAM,SAAc;AAEpB,QACC,OAAO,OAAO,oBAAoB,YAClC,OAAO,kBAAkB,GACxB;AAGD,UAAI,QAAQ,SAAS,mBAAmB,OAAO,QAAQ,EAAE,CAAC;AAC1D,UAAI,MAAM;AAEV,UAAI,SAAS;AACZ,iBAAS,GAAG,GAAG,WAAW,mBAAmB,QAAQ,EAAE,CAAC;AACxD,cAAM;AAAA,MACP;AAEA,eAAS,GAAG,GAAG,OAAO,OAAO,eAAe;AAE5C,aAAO,IAAI,MAAM,KAAK;AAAA,IACvB,WAAW,OAAO,MAAM;AAEvB,aAAO,IAAI,KAAK,OAAO,IAAI;AAAA,IAC5B,OAAO;AACN,YAAM,IAAI;AAAA,QACT;AAAA,MACD;AAAA,IACD;AAAA,EACD;AAAA,EAEQ,sBACP,mBACC;AACD,UAAM,aAAuB,CAAC;AAE9B,eAAW,MAAM,kBAAkB,4BAA4B,GAAG;AACjE,UAAI,GAAG,aAAa;AACnB,cAAM,YACL,GAAG,YAAY,WAAW;AAE3B,YAAI,aAAa,UAAU,SAAS,GAAG;AACtC,qBAAW,OAAO,WAAW;AAC5B,gBAAI,2BAA2B,GAAG,GAAG;AACpC,yBAAW,KAAK,IAAI,IAAI;AAAA,YACzB;AAAA,UACD;AAAA,QACD;AAAA,MACD;AAAA,IACD;AAEA,SAAK,mBAAmB,oBAAoB,UAAU;AAAA,EACvD;AAAA;AAAA,EAIA,IAAI,kBAGS;AACZ,WAAO,KAAK;AAAA,EACb;AAAA,EAEA,IAAI,6BAEF;AACD,WAAO,KAAK,4BAA4B;AAAA,EACzC;AAAA,EAEA,IAAI,yBAA+D;AAClE,WAAO,KAAK,wBAAwB;AAAA,EACrC;AAAA,EAEA,IAAI,cAAmC;AACtC,UAAM,SAA8B,CAAC;AACrC,SAAK,aAAa,QAAQ,CAAC,OAAO,OAAO,KAAK,EAAE,CAAC;AACjD,WAAO;AAAA,EACR;AAAA,EAEA,MAAa,wBACZ,IACA,OACwC;AACxC,UAAM,aAAa,KAAK,aAAa,IAAI,EAAE;AAC3C,QAAI,CAAC,YAAY;AAChB,YAAM,IAAI,MAAM,sCAAsC,EAAE,GAAG;AAAA,IAC5D;AAEA,QAAI,EAAE,GAAG,UAAU,YAAY,IAAI;AACnC,QAAI,CAAC,EAAE,eAAe;AACrB,UAAK,MAAM,SAAS,4BAA4B,GAAG,KAAK,KAAM;AAC9D,iBAAW,IAAI;AAAA,IAChB;AAEA,QAAI,CAAC,EAAE,eAAe;AACrB,YAAM,IAAI;AAAA,QACT,gEAAgE,QAAQ;AAAA,MACzE;AAAA,IACD;AAEA,WAAO,KAAK,uBAAuB,aAAa,EAAE,aAAa;AAAA,EAChE;AAAA,EAEA,MAAa,+BAA+B,IAA2B;AACtE,UAAM,aAAa,KAAK,aAAa,IAAI,EAAE;AAC3C,QAAI,CAAC,YAAY;AAChB,YAAM,IAAI,MAAM,sCAAsC,EAAE,GAAG;AAAA,IAC5D;AAEA,UAAM,UAAU,WAAW,EAAE;AAC7B,QAAI,WAAW,aAAa,SAAS;AACpC,WAAK,UAAU;AAAA,QACd,QAAQ;AAAA,QACR,GAAI,QAAQ,aAAa,CAAC;AAAA,MAC3B;AAAA,IACD;AAAA,EACD;AAAA,EAEQ,4BACP,SAC+C;AAC/C,UAAM,UAAU,KAAK,eAAe,IAAI,QAAQ,SAAS;AACzD,WACC,WAAW;AAAA,MACV,SAAS,QAAQ;AAAA,MACjB,UAAU,QAAQ;AAAA,MAClB,aAAa,QAAQ;AAAA,MACrB,SAAS,QAAQ;AAAA,MACjB,UAAU,QAAQ;AAAA,IACnB;AAAA,EAEF;AAAA,EAEA,MAAa,yBACZ,aACA,IACA,SACA,OAC4C;AAC5C,UAAM,kBAAkB,KAAK,4BAA4B,OAAO;AAChE,UAAM,MAAM,KAAK,gBAAgB,aAAa,EAAE;AAChD,UAAM,WAAW,KAAK,6BAA6B,IAAI,GAAG;AAC1D,QAAI,CAAC,mBAAmB,CAAC,UAAU;AAClC,aAAO,CAAC;AAAA,IACT;AAEA,UAAM,iBAAiB,MAAM,SAAS;AAAA,MACrC;AAAA,MACA;AAAA,IACD;AAEA,QAAI,CAAC,gBAAgB;AACpB,aAAO,CAAC;AAAA,IACT;AAEA,WAAO,eAAe,IAAI,CAAC,MAAM;AAChC,YAAMA,MAAK,EAAE,KAAK;AAClB,WAAK,aAAa,IAAIA,KAAI,EAAE,GAAG,UAAU,YAAY,CAAC;AACtD,YAAM,OAAO,EAAE,WACZ,KAAK,mBAAmB,EAAE,QAAQ,IAClC;AACH,aAAO;AAAA,QACN,IAAAA;AAAA,QACA,MAAM,EAAE;AAAA,QACR,WAAW,MAAM;AAAA,QACjB,UAAU,MAAM;AAAA,QAChB,eAAe,KAAK;AAAA,UACnB;AAAA,UACA,EAAE;AAAA,QACH;AAAA,MACD;AAAA,IACD,CAAC;AAAA,EACF;AAAA,EAEO,yBAAyB,KAAqB;AACpD,eAAW,MAAM,KAAK;AACrB,WAAK,aAAa,OAAO,EAAE;AAAA,IAC5B;AAAA,EACD;AAAA,EAEO,mCAGN,UACA,IACA,UACoB;AACpB,QAAI,CAAC,SAAS,aAAa,kBAAkB,KAAK,CAAC,MAAM,EAAE,OAAO,EAAE,GAAG;AACtE,YAAM,IAAI;AAAA,QACT,oGAAoG,EAAE;AAAA,MACvG;AAAA,IACD;AAEA,UAAM,cAAc,oBAAoB,MAAM,SAAS,UAAU;AACjE,UAAM,MAAM,KAAK,gBAAgB,aAAa,EAAE;AAChD,QAAI,KAAK,6BAA6B,IAAI,GAAG,GAAG;AAC/C,YAAM,IAAI;AAAA,QACT,2CAA2C,EAAE;AAAA,MAC9C;AAAA,IACD;AAEA,SAAK,6BAA6B,IAAI,KAAK,QAAQ;AACnD,SAAK,mBAAmB,yBAAyB,aAAa,EAAE;AAChE,WAAO,aAAa,MAAM;AACzB,WAAK,mBAAmB,2BAA2B,aAAa,EAAE;AAClE,WAAK,6BAA6B,OAAO,EAAE;AAAA,IAC5C,CAAC;AAAA,EACF;AAAA,EAEO,eAAe,cAAkD;AAEvE,UAAM,cAAc,aAAa,OAAO,CAAC,OAAO;AAC/C,YAAM,KAAK,GAAG;AACd,UAAI,CAAC,KAAK,aAAa,IAAI,EAAE,GAAG;AAC/B,aAAK,aAAa,IAAI,IAAI,EAAE;AAC5B,eAAO;AAAA,MACR;AACA,aAAO;AAAA,IACR,CAAC;AAGD,SAAK,sBAAsB,aAAa,CAAC,GAAG,CAAC,CAAC;AAG9C,UAAM,OACL,CAAC;AACF,UAAM,MAAM,oBAAI,IAAuC;AACvD,eAAW,MAAM,aAAa;AAC7B,UAAI,cAAc,kBAAkB;AACnC,YAAI,MAAM,IAAI,IAAI,GAAG,SAAS,IAAI,SAAS,CAAC;AAC5C,YAAI,CAAC,KAAK;AACT,gBAAM;AAAA,YACL,MAAM;AAAA,YACN,KAAK,GAAG,SAAS;AAAA,YACjB,OAAO,CAAC;AAAA,UACT;AACA,cAAI,IAAI,GAAG,SAAS,IAAI,SAAS,GAAG,GAAG;AACvC,eAAK,KAAK,GAAG;AAAA,QACd;AACA,YAAI,MAAM,KAAK;AAAA,UACd,IAAI,GAAG;AAAA,UACP,SAAS,GAAG;AAAA,UACZ,WAAW,GAAG;AAAA,UACd,cAAc,GAAG;AAAA,UACjB,YAAY,GAAG;AAAA,UACf,MAAM,GAAG,SAAS,MAAM,MAAM;AAAA,UAC9B,WAAW,GAAG,SAAS,MAAM,MAAM;AAAA,UACnC,MAAM,GAAG;AAAA,QACV,CAAC;AAAA,MACF,WAAW,cAAc,oBAAoB;AAC5C,aAAK,KAAK;AAAA,UACT,MAAM;AAAA,UACN,IAAI,GAAG;AAAA,UACP,SAAS,GAAG;AAAA,UACZ,cAAc,GAAG;AAAA,UACjB,YAAY,GAAG;AAAA,UACf,WAAW,GAAG;AAAA,UACd,cAAc,GAAG;AAAA,UACjB,MAAM,GAAG;AAAA,QACV,CAAC;AAAA,MACF;AAAA,IACD;AAGA,WAAO,KAAK,mBAAmB,qBAAqB,IAAI;AAAA,EACzD;AAAA,EAEO,kBAAkB,cAAkD;AAE1E,UAAM,cAAc,aAAa;AAAA,MAAO,CAAC,MACxC,KAAK,aAAa,OAAO,EAAE,EAAE;AAAA,IAC9B;AAGA,SAAK,sBAAsB,CAAC,GAAG,aAAa,CAAC,CAAC;AAG9C,UAAM,MAAM,YACV,OAAO,CAAC,OAAO,cAAc,gBAAgB,EAC7C,IAAI,CAAC,OAAO,GAAG,EAAE;AACnB,UAAM,OAAO,YACX,OAAO,CAAC,OAAO,cAAc,kBAAkB,EAC/C,IAAI,CAAC,OAAO,GAAG,EAAE;AACnB,UAAM,OAAO,YACX,OAAO,CAAC,OAAO,cAAc,cAAc,EAC3C,IAAI,CAAC,OAAO,GAAG,EAAE;AACnB,WAAO,KAAK,mBAAmB,uBAAuB,KAAK,MAAM,IAAI;AAAA,EACtE;AAAA,EAEO,eACN,QACA,cACA,SACmB;AACnB,UAAM,cACL,QAAQ,WAAW,KAAK,SAAS,kBAAkB,QAAQ,OAAO;AAEnE,WAAO,KAAK,mBAAmB;AAAA,MAC9B,SAAS,OAAO,MAAM;AAAA,MACtB;AAAA,MACA;AAAA,QACC,iBAAiB,QAAQ,gBACtB,QAAQ,cAAc,KACtB;AAAA,QACH,0BAA0B,QAAQ;AAAA,QAClC,MACC,QAAQ,gBAAgB,iBAAiB,kBACtC,oBACA;AAAA,QACJ,SAAS,QAAQ;AAAA,QACjB,SAAS,QAAQ;AAAA,QACjB,yBAAyB,QAAQ;AAAA,QACjC,SAAS,eAAe;AAAA,UACvB,OAAO,YAAY;AAAA,UACnB,QAAQ,YAAY;AAAA,QACrB;AAAA;AAAA,QAGA,wBACC,QAAQ,0BACP,QAAgB,SAAS;AAAA,QAC3B,sBACC,QAAQ,wBACP,QAAgB,SAAS;AAAA,QAC3B,mBACC,QAAQ,qBACP,QAAgB,SAAS;AAAA,MAC5B;AAAA,IACD;AAAA,EACD;AAAA,EAEO,cAAc,SAA8C;AAClE,WAAO,KAAK,mBAAmB;AAAA,MAC9B,UAAU,QAAQ,KAAK;AAAA,IACxB;AAAA,EACD;AAAA,EAEO,mCACN,MACA,UACA,SACoB;AACpB,QAAI,CAAC,UAAU;AACd,aAAO,IAAI,WAAW,MAAM;AAAA,MAAC,CAAC;AAAA,IAC/B;AAEA,UAAM,SAAS,KAAK;AACpB,SAAK,iBAAiB,KAAK,EAAE,MAAM,QAAQ,SAAS,CAAC;AAErD,SAAK,mBAAmB;AAAA,MACvB;AAAA,MACA;AAAA,MACA,CAAC,CAAC,SAAS;AAAA,MACX,CAAC,CAAC,SAAS;AAAA,MACX,CAAC,CAAC,SAAS;AAAA,MACX;AAAA,IACD;AAEA,WAAO,IAAI,WAAW,MAAM;AAC3B,WAAK,mBAAmB,KAAK,iBAAiB;AAAA,QAC7C,CAAC,MAAM,EAAE,aAAa;AAAA,MACvB;AACA,WAAK,mBAAmB;AAAA,QACvB;AAAA,MACD;AAAA,IACD,CAAC;AAAA,EACF;AAAA,EAEO,sCACN,WACA,MACA,SACoB;AACpB,QAAI,CAAC,SAAS;AACb,aAAO,IAAI,WAAW,MAAM;AAAA,MAAC,CAAC;AAAA,IAC/B;AAGA,QAAI,CAAC,KAAK,iBAAiB,WAAW,IAAI,GAAG;AAC5C,YAAM,IAAI;AAAA,QACT,+FAA+F,IAAI;AAAA,MACpG;AAAA,IACD;AAGA,QAAI,KAAK,kCAAkC,IAAI,GAAG;AACjD,YAAM,IAAI;AAAA,QACT;AAAA,MACD;AAAA,IACD;AAEA,UAAM,SAAS,KAAK;AACpB,SAAK,kBAAkB,KAAK,EAAE,MAAM,QAAQ,QAAQ,CAAC;AAErD,SAAK,mBAAmB;AAAA,MACvB;AAAA,MACA;AAAA,IACD;AAEA,WAAO,IAAI,WAAW,MAAM;AAC3B,WAAK,oBAAoB,KAAK,kBAAkB;AAAA,QAC/C,CAAC,MAAM,EAAE,YAAY;AAAA,MACtB;AACA,WAAK,mBAAmB;AAAA,QACvB;AAAA,MACD;AAAA,IACD,CAAC;AAAA,EACF;AAAA,EAEO,mCACN,MACA,SACoB;AACpB,QAAI,CAAC,SAAS;AACb,aAAO,IAAI,WAAW,MAAM;AAAA,MAAC,CAAC;AAAA,IAC/B;AAEA,UAAM,SAAS,KAAK;AACpB,SAAK,kBAAkB,KAAK,EAAE,MAAM,QAAQ,QAAQ,CAAC;AAErD,WAAO,IAAI,WAAW,MAAM;AAC3B,WAAK,oBAAoB,KAAK,kBAAkB;AAAA,QAC/C,CAAC,MAAM,EAAE,YAAY;AAAA,MACtB;AAAA,IACD,CAAC;AAAA,EACF;AAAA;AAAA,EAIA,MAAa,eACZ,MACA,WAC8B;AAC9B,WAAO,QAAQ,QAAQ,MAAS;AAAA,EACjC;AAAA,EAEA,MAAa,qBACZ,WACA,QACmB;AACnB,QAAI;AACJ,UAAM,SAAS,MAAM,KAAK,UAAU,SAAS;AAC7C,QAAI,QAAQ;AACX,WAAK;AAAA,QACJ,KAAK,OAAO;AAAA,QACZ,MAAM,OAAO;AAAA,QACb,OAAO,OAAO;AAAA,QACd,YAAY,6BAAM;AACjB,gBAAM,IAAI,MAAM,iBAAiB;AAAA,QAClC,GAFY;AAAA,MAGb;AAAA,IACD;AACA,UAAM,mBAAmB,MAAM,KAAK,kBAAkB,YAAY;AAClE,WAAO,iBAAiB,gBAAgB,IAAI,MAAM;AAAA,EACnD;AAAA,EAEU,mBACT,SACA,SACmC;AACnC,QAAI,mBAAmB,kCAAkC;AACxD,aAAO,IAAI,mBAAmB,QAAQ,cAAc;AAAA,IACrD;AACA,WAAO;AAAA,EACR;AAAA,EAEU,oBAA8C;AACvD,WAAO;AAAA,EACR;AAAA,EAEA,MAAa,gBACZ,oBACA,YACgB;AAChB,UAAM,UAAU,MAAM,KAAK,WAAW,UAAU;AAEhD,WAAO,KAAK;AAAA,MACX,KAAK,kCAAkC,QAAQ,IAAI;AAAA,MACnD;AAAA,IACD,EAAE,KAAK,CAAC,iBAAiB;AACxB,UAAI,CAAC,cAAc;AAClB,cAAM,IAAI;AAAA,UACT,4DAA4D,QAAQ,IAAI;AAAA,QACzE;AAAA,MACD;AAEA,YAAM,KAAK,KAAK,mBAAmB,cAAc,OAAO;AACxD,UAAI,CAAC,IAAI;AACR,cAAM,IAAI;AAAA,UACT,6CAA6C,QAAQ,IAAI;AAAA,QAC1D;AAAA,MACD;AAEA,YAAM,eAAe;AAErB,WAAK,eAAe,IAAI,oBAAoB,YAAY;AAExD,aAAO,KAAK,wBAAwB,OAAO,EAAE,KAAK,CAAC,YAAY;AAC9D,YAAI,SAAS;AACZ,eAAK,uBAAuB;AAAA,YAC3B;AAAA,YACA;AAAA,UACD;AAAA,QACD;AAEA,qBAAa,UAAU,OAAO,YAAY;AACzC,cACC,QAAQ,SAAS,aACO,QAAS,YAAY,aAC5C;AACD,kBAAM,UAAiC;AAEvC,kBAAM,WAAmC;AAAA,cACxC,MAAM;AAAA,cACN,KAAK;AAAA,cACL,SAAS,QAAQ;AAAA,cACjB,aAAa,QAAQ;AAAA,cACrB,SAAS;AAAA,YACV;AAEA,gBAAI,CAAC,KAAK,cAAc;AACvB,mBAAK,eAAe,KAAK,kBAAkB;AAAA,YAC5C;AAEA,gBAAI;AACH,kBAAI,KAAK,cAAc;AACtB,sBAAM,YAAY,MAAM,KAAK,aAAa;AAAA,kBACzC,QAAQ,UAAU;AAAA,gBACnB;AACA,yBAAS,OAAO;AAAA,kBACf;AAAA,gBACD;AACA,6BAAa,aAAa,QAAQ;AAAA,cACnC,OAAO;AACN,sBAAM,IAAI,MAAM,WAAW;AAAA,cAC5B;AAAA,YACD,SAAS,GAAG;AACX,uBAAS,UAAU;AACnB,uBAAS,UAAU,EAAE;AACrB,2BAAa,aAAa,QAAQ;AAAA,YACnC;AAAA,UACD,OAAO;AACN,gBAAI,WAAW,QAAQ,kBAAkB;AACxC,sBAAQ,iBAAiB,OAAO;AAAA,YACjC;AAGA,sBAAU,kBAAkB,SAAS,IAAI;AAEzC,iBAAK,mBAAmB;AAAA,cACvB;AAAA,cACA;AAAA,YACD;AAAA,UACD;AAAA,QACD,CAAC;AACD,qBAAa,QAAQ,CAAC,QAAQ;AAC7B,cAAI,WAAW,QAAQ,SAAS;AAC/B,oBAAQ,QAAQ,GAAG;AAAA,UACpB;AACA,eAAK,mBAAmB;AAAA,YACvB;AAAA,YACA,IAAI;AAAA,YACJ,IAAI;AAAA,YACJ,IAAI;AAAA,UACL;AAAA,QACD,CAAC;AACD,qBAAa,OAAO,CAAC,SAAwB;AAC5C,cAAI,WAAW,QAAQ,QAAQ;AAC9B,oBAAQ,OAAO,QAAQ,QAAW,MAAS;AAAA,UAC5C;AACA,eAAK,mBAAmB;AAAA,YACvB;AAAA,YACA,QAAQ;AAAA,YACR;AAAA,UACD;AAAA,QACD,CAAC;AAED,YAAI,WAAW,QAAQ,oBAAoB;AAC1C,kBAAQ,mBAAmB;AAAA,QAC5B;AAEA,eAAO,aAAa,aAAa;AAAA,MAClC,CAAC;AAAA,IACF,CAAC;AAAA,EACF;AAAA,EAEO,eACN,oBACA,SACO;AAEP,cAAU,iBAAiB,SAAS,KAAK;AAEzC,UAAM,UAAU,KAAK,uBAAuB,IAAI,kBAAkB;AAClE,QAAI,WAAW,QAAQ,sBAAsB;AAC5C,cAAQ,qBAAqB,OAAO;AAAA,IACrC;AAEA,UAAM,KAAK,KAAK,eAAe,IAAI,kBAAkB;AACrD,QAAI,YAAY,OAAO;AAAA,EACxB;AAAA,EAEO,eAAe,oBAA2C;AAChE,UAAM,UAAU,KAAK,uBAAuB,IAAI,kBAAkB;AAClE,SAAK,uBAAuB,OAAO,kBAAkB;AACrD,QAAI,WAAW,QAAQ,mBAAmB;AACzC,cAAQ,kBAAkB;AAAA,IAC3B;AAEA,UAAM,KAAK,KAAK,eAAe,IAAI,kBAAkB;AACrD,SAAK,eAAe,OAAO,kBAAkB;AAC7C,QAAI,IAAI;AACP,aAAO,GAAG,YAAY;AAAA,IACvB,OAAO;AACN,aAAO,QAAQ,QAAQ,MAAM;AAAA,IAC9B;AAAA,EACD;AAAA,EAEO,wBAAwB,OAAmC;AACjE,UAAM,IAAyB,CAAC;AAChC,UAAM,IAAyB,CAAC;AAChC,UAAM,IAAyB,CAAC;AAEhC,QAAI,MAAM,OAAO;AAChB,iBAAW,OAAO,MAAM,OAAO;AAC9B,cAAM,KAAK,IAAI;AACf,YAAI,MAAM,CAAC,KAAK,aAAa,IAAI,EAAE,GAAG;AACrC,cAAI;AACJ,cAAI,IAAI,SAAS,YAAY;AAC5B,iBAAK,IAAI;AAAA,cACR,IAAI;AAAA,cACJ,IAAI;AAAA,cACJ,IAAI;AAAA,cACJ,IAAI;AAAA,cACJ,IAAI;AAAA,cACJ,IAAI;AAAA,YACL;AAAA,UACD,WAAW,IAAI,SAAS,QAAQ;AAC/B,iBAAK,IAAI;AAAA,cACR,IAAI;AAAA,cACJ,IAAI;AAAA,cACJ,IAAI;AAAA,cACJ,IAAI;AAAA,cACJ,IAAI;AAAA,cACJ,IAAI;AAAA,cACJ,IAAI;AAAA,cACJ,IAAI;AAAA,YACL;AAAA,UACD,OAAO;AACN,kBAAM,MAAM,IAAI,OAAO,IAAI,GAAG;AAC9B,iBAAK,IAAI;AAAA,cACR,IAAI;AAAA,gBACH;AAAA,gBACA,IAAI,SAAS,IAAI,MAAM,IAAI,SAAS;AAAA,cACrC;AAAA,cACA,IAAI;AAAA,cACJ,IAAI;AAAA,cACJ,IAAI;AAAA,cACJ,IAAI;AAAA,cACJ,IAAI;AAAA,YACL;AAAA,UACD;AACA,0BAAgB,IAAI,EAAE;AACtB,eAAK,aAAa,IAAI,IAAI,EAAE;AAC5B,YAAE,KAAK,EAAE;AAAA,QACV;AAAA,MACD;AAAA,IACD;AAEA,QAAI,MAAM,SAAS;AAClB,iBAAW,MAAM,MAAM,SAAS;AAC/B,cAAM,KAAK,KAAK,aAAa,IAAI,EAAE;AACnC,YAAI,IAAI;AACP,eAAK,aAAa,OAAO,EAAE;AAC3B,YAAE,KAAK,EAAE;AAAA,QACV;AAAA,MACD;AAAA,IACD;AAEA,QAAI,MAAM,SAAS;AAClB,iBAAW,OAAO,MAAM,SAAS;AAChC,YAAI,IAAI,IAAI;AACX,gBAAM,KAAK,KAAK,aAAa,IAAI,IAAI,EAAE;AACvC,cAAI,IAAI;AACP,gBACC,cAAc,sBACd,IAAI,SAAS,YACZ;AACD,oBAAM,MAAW;AACjB,kBAAI,UAAU,IAAI;AAClB,kBAAI,YAAY,IAAI;AACpB,kBAAI,eAAe,IAAI;AACvB,kBAAI,aAAa,IAAI;AACrB,kBAAI,eAAe,IAAI;AAAA,YACxB,WACC,cAAc,oBACd,IAAI,SAAS,UACZ;AACD,oBAAM,MAAW;AACjB,kBAAI,UAAU,IAAI;AAClB,kBAAI,YAAY,IAAI;AACpB,kBAAI,eAAe,IAAI;AACvB,kBAAI,aAAa,IAAI;AACrB,kBAAI,WAAW,IAAI;AAAA,gBAClB,IAAI,OAAO,IAAI,GAAG;AAAA,gBAClB,IAAI,SAAS,IAAI,MAAM,IAAI,SAAS;AAAA,cACrC;AAAA,YACD;AACA,cAAE,KAAK,EAAE;AAAA,UACV;AAAA,QACD;AAAA,MACD;AAAA,IACD;AAEA,SAAK,sBAAsB,GAAG,GAAG,CAAC;AAAA,EACnC;AAAA,EAEA,MAAa,uBACZ,UACgB;AAChB,QAAI;AACJ,QAAI,UAAU;AACb,YAAM,UAAU,MAAM,KAAK,WAAW,SAAS,SAAS;AACxD,UAAI,SAAS,SAAS,UAAU;AAC/B,gBAAQ,IAAI,YAAY,QAAQ,KAAK,SAAS,QAAQ;AAAA,MACvD,OAAO;AACN,gBAAQ,IAAI;AAAA,UACX,QAAQ;AAAA,UACR,SAAS;AAAA,UACT,SAAS;AAAA,QACV;AAAA,MACD;AAAA,IACD;AAEA,SAAK,mBAAmB;AACxB,SAAK,4BAA4B,KAAK,KAAK,gBAAgB;AAAA,EAC5D;AAAA,EAEO,4BACN,sBACA,WACA,OACuC;AACvC,WAAO,UAAU,YAAY;AAC5B,YAAM,WACL,KAAK,0BAA0B,oBAAoB;AACpD,UAAI,CAAC,UAAU;AACd,cAAM,IAAI,MAAM,qCAAqC;AAAA,MACtD;AACA,UAAI,CAAC,SAAS,4BAA4B;AACzC,cAAM,IAAI;AAAA,UACT;AAAA,QACD;AAAA,MACD;AACA,YAAM,SAAS,MAAM,KAAK,UAAU,SAAS;AAC7C,aAAO,SAAS,2BAA2B,QAAQ,KAAK;AAAA,IACzD,CAAC,EAAE,KAAK,CAAC,wBAAwB;AAChC,UAAI,CAAC,qBAAqB;AACzB,cAAM,IAAI;AAAA,UACT;AAAA,QACD;AAAA,MACD;AACA,aAAO;AAAA,IACR,CAAC;AAAA,EACF;AAAA,EAEO,2BACN,sBACA,WACA,oBACA,OACwD;AACxD,WAAO,UAAU,YAAY;AAC5B,YAAM,WACL,KAAK,0BAA0B,oBAAoB;AACpD,UAAI,CAAC,UAAU;AACd,cAAM,IAAI,MAAM,qCAAqC;AAAA,MACtD;AACA,UAAI,CAAC,SAAS,2BAA2B;AACxC,cAAM,IAAI;AAAA,UACT;AAAA,QACD;AAAA,MACD;AACA,YAAM,SAAS,MAAM,KAAK,UAAU,SAAS;AAC7C,aAAO,SAAS;AAAA,QACf;AAAA,QACA;AAAA,QACA;AAAA,MACD;AAAA,IACD,CAAC;AAAA,EACF;AAAA,EAEO,mDACN,sBACA,WACA,oBACA,OACwD;AACxD,WAAO,UAAU,YAAY;AAC5B,YAAM,WACL,KAAK,0BAA0B,oBAAoB;AACpD,UAAI,CAAC,UAAU;AACd,cAAM,IAAI,MAAM,qCAAqC;AAAA,MACtD;AACA,UAAI,CAAC,SAAS,mDAAmD;AAChE,cAAM,IAAI;AAAA,UACT;AAAA,QACD;AAAA,MACD;AACA,YAAM,SAAS,MAAM,KAAK,UAAU,SAAS;AAC7C,aAAO,SAAS;AAAA,QACf;AAAA,QACA;AAAA,QACA;AAAA,MACD;AAAA,IACD,CAAC;AAAA,EACF;AAAA,EAEA,MAAa,qBACZ,sBACA,YACmC;AACnC,UAAM,2BACL,KAAK,oCAAoC,oBAAoB;AAC9D,QAAI,CAAC,0BAA0B;AAC9B,aAAO,QAAQ;AAAA,QACd,IAAI,MAAM,gDAAgD;AAAA,MAC3D;AAAA,IACD;AACA,UAAM,UAAU,MAAM,KAAK,WAAW,UAAU;AAChD,WAAO,KAAK;AAAA,MACX;AAAA,MACA;AAAA,IACD,EAAE,KAAK,CAAC,sBAAsB;AAC7B,UAAI,CAAC,mBAAmB;AACvB,cAAM,IAAI;AAAA,UACT,4DAA4D,QAAQ,IAAI;AAAA,QACzE;AAAA,MACD;AACA,aAAO,KAAK,aAAa,iBAAiB;AAAA,IAC3C,CAAC;AAAA,EACF;AAAA,EAEA,MAAa,2BACZ,YACgB;AAChB,UAAM,UAAU,MAAM,KAAK,WAAW,UAAU;AAChD,SAAK,wBAAwB,KAAK,QAAQ,GAAG;AAAA,EAC9C;AAAA,EAEA,MAAa,8BACZ,YACgB;AAChB,UAAM,UAAU,MAAM,KAAK,WAAW,UAAU;AAChD,QAAI,SAAS;AACZ,WAAK,4BAA4B,KAAK,QAAQ,GAAG;AACjD,WAAK,eAAe,OAAO,QAAQ,EAAE;AAAA,IACtC;AAAA,EACD;AAAA,EAEA,MAAa,iCACZ,YACgB;AAChB,SAAK,sBAAsB,aACxB,MAAM,KAAK,WAAW,UAAU,IAChC;AACH,SAAK,+BAA+B,KAAK,KAAK,qBAAqB,GAAG;AAAA,EACvE;AAAA,EAEA,MAAa,+BACZ,YACA,MACgB;AAChB,UAAM,UAAU,MAAM,KAAK,WAAW,UAAU;AAChD,aAAS,mBAAmB,IAAI;AAAA,EACjC;AAAA,EAEA,MAAa,+BACZ,YACA,OACgB;AAChB,UAAM,UAAU,MAAM,KAAK,WAAW,UAAU;AAChD,UAAM,KAAqC;AAAA,MAC1C,SAAS,QAAQ;AAAA,MACjB,OAAO,MAAM;AAAA,MACb,MAAM,MAAM;AAAA,IACb;AACA,SAAK,qCAAqC,KAAK,EAAE;AAAA,EAClD;AAAA;AAAA,EAIQ,aACP,GAC0B;AAC1B,QAAI,aAAa,wBAAwB;AACxC,aAAO,KAAK,uBAAuB,CAAC;AAAA,IACrC,WAAW,aAAa,oBAAoB;AAC3C,aAAO,KAAK,mBAAmB,CAAC;AAAA,IACjC,WAAW,aAAa,6BAA6B;AACpD,aAAO,KAAK,uBAAuB,CAAC;AAAA,IACrC,WAAW,aAAa,kCAAkC;AACzD,aAAO,KAAK,2BAA2B,CAAC;AAAA,IACzC,OAAO;AACN,YAAM,IAAI,MAAM,8BAA8B;AAAA,IAC/C;AAAA,EACD;AAAA,EAEU,uBACT,GAC0B;AAC1B,WAAO;AAAA,MACN,MAAM;AAAA,MACN,SAAS,EAAE;AAAA,MACX,MAAM,EAAE;AAAA,MACR,SAAS,EAAE;AAAA,IACZ;AAAA,EACD;AAAA,EAEU,mBAAmB,GAA4C;AACxE,WAAO;AAAA,MACN,MAAM;AAAA,MACN,MAAM,EAAE;AAAA,MACR,MAAM,EAAE;AAAA,IACT;AAAA,EACD;AAAA,EAEU,uBACT,GAC+B;AAC/B,WAAO;AAAA,MACN,MAAM;AAAA,MACN,MAAM,EAAE;AAAA,IACT;AAAA,EACD;AAAA,EAEU,2BACT,GACoB;AACpB,WAAO;AAAA,MACN,MAAM;AAAA,IACP;AAAA,EACD;AAAA,EAEQ,kCACP,MACmD;AACnD,UAAM,UAAU,KAAK,kBAAkB,OAAO,CAAC,MAAM,EAAE,SAAS,IAAI;AACpE,QAAI,QAAQ,SAAS,GAAG;AACvB,aAAO,QAAQ,CAAC,EAAE;AAAA,IACnB;AACA,WAAO;AAAA,EACR;AAAA,EAEQ,oCACP,QACmD;AACnD,UAAM,UAAU,KAAK,kBAAkB;AAAA,MACtC,CAAC,MAAM,EAAE,WAAW;AAAA,IACrB;AACA,QAAI,QAAQ,SAAS,GAAG;AACvB,aAAO,QAAQ,CAAC,EAAE;AAAA,IACnB;AACA,WAAO;AAAA,EACR;AAAA,EAEQ,0BACP,QACgD;AAChD,UAAM,UAAU,KAAK,iBAAiB;AAAA,MACrC,CAAC,MAAM,EAAE,WAAW;AAAA,IACrB;AACA,QAAI,QAAQ,SAAS,GAAG;AACvB,aAAO,QAAQ,CAAC,EAAE;AAAA,IACnB;AACA,WAAO;AAAA,EACR;AAAA,EAEQ,iBAAiB,IAA2B,MAAc;AACjE,QAAI,GAAG,aAAa;AACnB,YAAM,YAAY,GAAG,YAAY,WAAW;AAC5C,UAAI,aAAa,UAAU,SAAS,GAAG;AACtC,mBAAW,OAAO,WAAW;AAE5B,cAAI,IAAI,SAAS,IAAI,MAAM;AAC1B,gBAAI,IAAI,SAAS,MAAM;AACtB,qBAAO;AAAA,YACR;AAAA,UACD;AAAA,QACD;AAAA,MACD;AAAA,IACD;AACA,WAAO;AAAA,EACR;AAAA,EAEQ,wBACP,SACkD;AAClD,UAAM,SAAS,QAAQ;AACvB,UAAM,OAAO,OAAO;AAEpB,UAAM,WAAW,KAAK,kBACpB,OAAO,CAAC,UAAU,MAAM,SAAS,QAAQ,MAAM,SAAS,GAAG,EAC3D;AAAA,MAAI,CAAC,UACL;AAAA,QACC,MAAM,MAAM,QAAQ,0BAA0B,QAAQ,GAAG;AAAA,MAC1D,EAAE;AAAA,QACD,CAAC,MAAM;AAAA,QACP,CAAC,QAAQ;AAAA,MACV;AAAA,IACD;AAED,WAAO,QAAQ,KAAK;AAAA,MACnB,QAAQ,IAAI,QAAQ,EAAE,KAAK,CAAC,WAAW;AACtC,cAAM,WAAW,SAAS,MAAM;AAChC,YAAI,SAAS,SAAS,GAAG;AACxB,iBAAO,IAAI,aAAa,QAAQ;AAAA,QACjC;AACA,eAAO;AAAA,MACR,CAAC;AAAA,MACD,IAAI;AAAA,QAAmB,CAAC,YACvB,WAAW,MAAM,QAAQ,MAAS,GAAG,GAAI;AAAA,MAC1C;AAAA,IACD,CAAC,EAAE,MAAM,CAAC,QAAQ;AAEjB,aAAO;AAAA,IACR,CAAC;AAAA,EACF;AAAA,EAEA,MAAc,qBACb,0BAGA,SACqD;AAErD,UAAM,aAAa,QAAQ,cAAc;AACzC,QAAI,OAAO,eAAe,UAAU;AACnC,aAAO,QAAQ,QAAQ,IAAI,mBAAmB,UAAU,CAAC;AAAA,IAC1D;AAEA,QAAI,0BAA0B;AAC7B,YAAMC,qBACL,MAAM,KAAK,kBAAkB,qBAAqB;AACnD,aAAO;AAAA,QAAU,MAChB,yBAAyB;AAAA,UACxB,QAAQ;AAAA,UACR,KAAK,wBAAwB,SAASA,kBAAiB;AAAA,QACxD;AAAA,MACD,EAAE,KAAK,CAAC,iBAAiB;AACxB,YAAI,cAAc;AACjB,iBAAO;AAAA,QACR;AACA,eAAO;AAAA,MACR,CAAC;AAAA,IACF;AAGA,UAAM,oBACL,MAAM,KAAK,kBAAkB,qBAAqB;AACnD,WAAO,QAAQ;AAAA,MACd,KAAK,wBAAwB,SAAS,iBAAiB;AAAA,IACxD;AAAA,EACD;AAAA,EAEU,wBACT,SACA,mBACqC;AACrC,WAAO;AAAA,EACR;AAAA,EAEQ,sBACP,OACA,SACA,SACC;AACD,QAAI,MAAM,SAAS,KAAK,QAAQ,SAAS,KAAK,QAAQ,SAAS,GAAG;AACjE,WAAK,wBAAwB;AAAA,QAC5B,OAAO,OAAO;AAAA,UACb;AAAA,UACA;AAAA,UACA;AAAA,QACD,CAAC;AAAA,MACF;AAAA,IACD;AAAA,EACD;AAAA,EAEA,MAAc,WACb,KAC+B;AAC/B,QAAI,KAAK;AACR,UAAI,OAAO,QAAQ,UAAU;AAC5B,cAAM,KAAK,KAAK,eAAe,IAAI,GAAG;AACtC,YAAI,IAAI;AACP,iBAAO;AAAA,QACR;AAAA,MACD,OAAO;AACN,YAAI,KAAK,KAAK,eAAe,IAAI,IAAI,EAAE;AACvC,YAAI,CAAC,IAAI;AACR,gBAAM,SAAS,MAAM,KAAK,UAAU,IAAI,SAAS;AACjD,gBAAM,SAAS,IAAI,SAChB,KAAK,eAAe,IAAI,IAAI,MAAM,IAClC;AACH,eAAK,IAAI;AAAA,YACR,KAAK;AAAA,YACL,IAAI;AAAA,YACJ,IAAI;AAAA,YACJ,IAAI;AAAA,YACJ;AAAA,YACA,IAAI;AAAA,YACJ,QAAQ;AAAA,UACT;AACA,eAAK,eAAe,IAAI,GAAG,IAAI,EAAE;AACjC,eAAK,mBAAmB,eAAe,GAAG,EAAE;AAAA,QAC7C;AACA,eAAO;AAAA,MACR;AAAA,IACD;AACA,UAAM,IAAI,MAAM,qBAAqB;AAAA,EACtC;AAAA,EAEQ,UACP,YAC8C;AAC9C,QAAI,YAAY;AACf,YAAM,YAAY,IAAI,OAAO,UAAU;AACvC,aAAO,KAAK,kBAAkB,uBAAuB,SAAS;AAAA,IAC/D;AACA,WAAO,QAAQ,QAAQ,MAAS;AAAA,EACjC;AAAA,EAEQ,gBAAgB,aAAqB,IAAY;AACxD,WAAO,GAAG,WAAW,KAAK,EAAE;AAAA,EAC7B;AAAA,EAEQ,uBACP,aACA,KAC2C;AAC3C,QAAI,CAAC,KAAK;AACT,aAAO;AAAA,IACR;AAEA,QAAI,WAAW,OAAO,aAAa,KAAK;AACvC,aAAO,EAAE,MAAM,uBAAuB,QAAQ;AAAA,IAC/C;AAEA,QAAI,YAAY,KAAK;AACpB,aAAO;AAAA,QACN,MAAM,uBAAuB;AAAA,QAC7B,IAAI,GAAG,WAAW,KAAK,IAAI,MAAM;AAAA,MAClC;AAAA,IACD;AAEA,UAAM,IAAI,MAAM,sCAAsC;AAAA,EACvD;AAAA,EAEQ,mBAAmB,MAA6C;AACvE,UAAM,sBAAsB,KAAK,YAAY,IAAI;AACjD,QAAI;AACJ,QAAI;AACJ,QAAI,QAAQ,qBAAqB;AAChC,kBAAY,eAAe,YAAY,mBAAmB;AAAA,IAC3D,OAAO;AACN,iBAAW;AAAA,IACZ;AAEA,WAAO;AAAA,MACN;AAAA,MACA;AAAA,IACD;AAAA,EACD;AAAA,EAEQ,YACP,UAC8C;AAC9C,QAAI,oBAAoB,WAAW;AAClC,aAAO,EAAE,IAAI,SAAS,GAAG;AAAA,IAC1B;AACA,UAAM,OACL,OAAO,aAAa,YAAY,UAAU,WACvC,SAAS,OACT;AACJ,UAAM,QACL,OAAO,aAAa,YAAY,WAAW,WACxC,SAAS,QACT;AACJ,WAAO;AAAA,MACN,MAAO,OAAO,SAAS,WAAW,IAAI,KAAK,IAAI,IAAI;AAAA,MACnD,OAAQ,OAAO,UAAU,WAAW,IAAI,KAAK,KAAK,IAAI;AAAA,IACvD;AAAA,EACD;AACD;AAx6CsB,0BAAf;AAAA,EAmGJ;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,GA1GmB;AA06Cf,MAAM,oBAAoB;AAAA,EAEhC,YACS,oBACA,KACA,OACA,OACA,kBACA,gBACA,gBACP;AAPO;AACA;AACA;AACA;AACA;AACA;AACA;AAAA,EACN;AAAA,EAtkDJ,OA4jDiC;AAAA;AAAA;AAAA,EACxB;AAAA,EAWR,IAAW,MAA2B;AACrC,UAAM,OAAO;AACb,WAAQ,KAAK,eAAe,OAAO,OAAO;AAAA,MACzC,IAAI,KAAK;AAAA,MACT,MAAM,KAAK;AAAA,MACX,IAAI,OAAO;AACV,eAAO,KAAK;AAAA,MACb;AAAA,MACA,IAAI,KAAK,MAAc;AACtB,aAAK,QAAQ;AACb,aAAK,mBAAmB,qBAAqB,KAAK,KAAK,IAAI;AAAA,MAC5D;AAAA,MACA,eAAe,KAAK;AAAA,MACpB,iBAAiB,KAAK;AAAA,MACtB,eAAe,KAAK;AAAA,MACpB,cAAc,SAAiB,MAAyB;AACvD,eAAO,KAAK,mBAAmB;AAAA,UAC9B,KAAK;AAAA,UACL;AAAA,UACA;AAAA,QACD;AAAA,MACD;AAAA,MACA,2BACC,YACsD;AACtD,eAAO,KAAK,mBAAmB;AAAA,UAC9B,KAAK;AAAA,UACL,WAAW;AAAA,QACZ;AAAA,MACD;AAAA,IACD,CAAC;AAAA,EACF;AAAA,EAEA,IAAW,KAAa;AACvB,WAAO,KAAK;AAAA,EACb;AAAA,EAEA,IAAW,OAAe;AACzB,WAAO,KAAK;AAAA,EACb;AAAA,EAEA,mBAAmB,MAAc;AAChC,SAAK,QAAQ;AAAA,EACd;AAAA,EAEA,IAAW,gBAA2C;AACrD,WAAO,KAAK;AAAA,EACb;AACD;AAEO,MAAM,oBAAoB;AAAA,EA1nDjC,OA0nDiC;AAAA;AAAA;AAAA,EACvB;AAAA,EAET,YAAY,OAAoC;AAC/C,SAAK,QAAQ,OAAO,OAAO;AAAA,MAC1B,OAAO,OAAqB;AAC3B,cAAM,oBAAoB,KAAK;AAAA,MAChC;AAAA,MACA,WAAW,OAAqB;AAC/B,aAAK,OAAO,QAAQ,IAAI;AAAA,MACzB;AAAA,IACD,CAAC;AAAA,EACF;AACD;AAoBA,MAAM,aAAmD;AAAA,EACxD,YAAoB,UAAwC;AAAxC;AAAA,EAAyC;AAAA,EA5pD9D,OA2pDyD;AAAA;AAAA;AAAA,EAGxD,qBAA2B;AAC1B,SAAK,SAAS;AAAA,MAAQ,CAAC,MACtB,EAAE,qBAAqB,EAAE,mBAAmB,IAAI;AAAA,IACjD;AAAA,EACD;AAAA,EAEA,qBAAqB,SAAoB;AACxC,SAAK,SAAS;AAAA,MAAQ,CAAC,MACtB,EAAE,uBACC,EAAE,qBAAqB,OAAO,IAC9B;AAAA,IACJ;AAAA,EACD;AAAA,EAEA,iBAAiB,SAAoB;AACpC,SAAK,SAAS;AAAA,MAAQ,CAAC,MACtB,EAAE,mBAAmB,EAAE,iBAAiB,OAAO,IAAI;AAAA,IACpD;AAAA,EACD;AAAA,EAEA,oBAA0B;AACzB,SAAK,SAAS;AAAA,MAAQ,CAAC,MACtB,EAAE,oBAAoB,EAAE,kBAAkB,IAAI;AAAA,IAC/C;AAAA,EACD;AAAA,EAEA,QAAQ,OAAoB;AAC3B,SAAK,SAAS;AAAA,MAAQ,CAAC,MACtB,EAAE,UAAU,EAAE,QAAQ,KAAK,IAAI;AAAA,IAChC;AAAA,EACD;AAAA,EAEA,OAAO,MAAc,QAAsB;AAC1C,SAAK,SAAS;AAAA,MAAQ,CAAC,MACtB,EAAE,SAAS,EAAE,OAAO,MAAM,MAAM,IAAI;AAAA,IACrC;AAAA,EACD;AACD;AAKA,MAAM,2BAA2B,qBAAqB;AAAA,EACrD,YAAoB,gBAAqC;AACxD,UAAM;AADa;AAGnB,mBAAe;AAAA,MACd,CAAC,YAAyC;AACzC,aAAK,cAAc,OAAwC;AAAA,MAC5D;AAAA,IACD;AAAA,EACD;AAAA,EAjtDD,OAwsDsD;AAAA;AAAA;AAAA,EAWrD,eAA8B;AAC7B,WAAO,QAAQ,QAAQ,MAAS;AAAA,EACjC;AAAA,EAEA,YAAY,SAA8C;AACzD,SAAK,eAAe,cAAc,OAAO;AAAA,EAC1C;AAAA,EAEA,cAA6B;AAC5B,SAAK,eAAe,QAAQ;AAC5B,WAAO,QAAQ,QAAQ,MAAS;AAAA,EACjC;AACD;AAEO,IAAM,4BAAN,cAAwC,wBAAwB;AAAA,EAjuDvE,OAiuDuE;AAAA;AAAA;AAAA,EACtE,YACqB,mBACD,kBACO,kBACH,sBACH,YACc,kBAChB,UACD,SAChB;AACD;AAAA,MACC;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACD;AAAA,EACD;AACD;AAtBa,4BAAN;AAAA,EAEJ;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,GATU;",
  "names": ["id", "extensionRegistry"]
}
