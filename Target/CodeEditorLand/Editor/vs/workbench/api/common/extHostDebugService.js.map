{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/api/common/extHostDebugService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport type * as vscode from 'vscode';\nimport { coalesce } from '../../../base/common/arrays.js';\nimport { asPromise } from '../../../base/common/async.js';\nimport { CancellationToken } from '../../../base/common/cancellation.js';\nimport { Emitter, Event } from '../../../base/common/event.js';\nimport { Disposable as DisposableCls, toDisposable } from '../../../base/common/lifecycle.js';\nimport { ThemeIcon as ThemeIconUtils } from '../../../base/common/themables.js';\nimport { URI, UriComponents } from '../../../base/common/uri.js';\nimport { ExtensionIdentifier, IExtensionDescription } from '../../../platform/extensions/common/extensions.js';\nimport { createDecorator } from '../../../platform/instantiation/common/instantiation.js';\nimport { ISignService } from '../../../platform/sign/common/sign.js';\nimport { IWorkspaceFolder } from '../../../platform/workspace/common/workspace.js';\nimport { AbstractDebugAdapter } from '../../contrib/debug/common/abstractDebugAdapter.js';\nimport { DebugVisualizationType, IAdapterDescriptor, IConfig, IDebugAdapter, IDebugAdapterExecutable, IDebugAdapterImpl, IDebugAdapterNamedPipeServer, IDebugAdapterServer, IDebuggerContribution, IDebugVisualization, IDebugVisualizationContext, IDebugVisualizationTreeItem, MainThreadDebugVisualization } from '../../contrib/debug/common/debug.js';\nimport { convertToDAPaths, convertToVSCPaths, isDebuggerMainContribution } from '../../contrib/debug/common/debugUtils.js';\nimport { ExtensionDescriptionRegistry } from '../../services/extensions/common/extensionDescriptionRegistry.js';\nimport { Dto } from '../../services/extensions/common/proxyIdentifier.js';\nimport { DebugSessionUUID, ExtHostDebugServiceShape, IBreakpointsDeltaDto, IDebugSessionDto, IFunctionBreakpointDto, ISourceMultiBreakpointDto, IStackFrameFocusDto, IThreadFocusDto, MainContext, MainThreadDebugServiceShape } from './extHost.protocol.js';\nimport { IExtHostCommands } from './extHostCommands.js';\nimport { IExtHostConfiguration } from './extHostConfiguration.js';\nimport { IExtHostEditorTabs } from './extHostEditorTabs.js';\nimport { IExtHostExtensionService } from './extHostExtensionService.js';\nimport { IExtHostRpcService } from './extHostRpcService.js';\nimport { IExtHostTesting } from './extHostTesting.js';\nimport * as Convert from './extHostTypeConverters.js';\nimport { Breakpoint, DataBreakpoint, DebugAdapterExecutable, DebugAdapterInlineImplementation, DebugAdapterNamedPipeServer, DebugAdapterServer, DebugConsoleMode, DebugStackFrame, DebugThread, Disposable, FunctionBreakpoint, Location, Position, setBreakpointId, SourceBreakpoint, ThemeIcon } from './extHostTypes.js';\nimport { IExtHostVariableResolverProvider } from './extHostVariableResolverService.js';\nimport { IExtHostWorkspace } from './extHostWorkspace.js';\n\nexport const IExtHostDebugService = createDecorator<IExtHostDebugService>('IExtHostDebugService');\n\nexport interface IExtHostDebugService extends ExtHostDebugServiceShape {\n\n\treadonly _serviceBrand: undefined;\n\n\tonDidStartDebugSession: Event<vscode.DebugSession>;\n\tonDidTerminateDebugSession: Event<vscode.DebugSession>;\n\tonDidChangeActiveDebugSession: Event<vscode.DebugSession | undefined>;\n\tactiveDebugSession: vscode.DebugSession | undefined;\n\tactiveDebugConsole: vscode.DebugConsole;\n\tonDidReceiveDebugSessionCustomEvent: Event<vscode.DebugSessionCustomEvent>;\n\tonDidChangeBreakpoints: Event<vscode.BreakpointsChangeEvent>;\n\tbreakpoints: vscode.Breakpoint[];\n\tonDidChangeActiveStackItem: Event<vscode.DebugThread | vscode.DebugStackFrame | undefined>;\n\tactiveStackItem: vscode.DebugThread | vscode.DebugStackFrame | undefined;\n\n\taddBreakpoints(breakpoints0: readonly vscode.Breakpoint[]): Promise<void>;\n\tremoveBreakpoints(breakpoints0: readonly vscode.Breakpoint[]): Promise<void>;\n\tstartDebugging(folder: vscode.WorkspaceFolder | undefined, nameOrConfig: string | vscode.DebugConfiguration, options: vscode.DebugSessionOptions): Promise<boolean>;\n\tstopDebugging(session?: vscode.DebugSession): Promise<void>;\n\tregisterDebugConfigurationProvider(type: string, provider: vscode.DebugConfigurationProvider, trigger: vscode.DebugConfigurationProviderTriggerKind): vscode.Disposable;\n\tregisterDebugAdapterDescriptorFactory(extension: IExtensionDescription, type: string, factory: vscode.DebugAdapterDescriptorFactory): vscode.Disposable;\n\tregisterDebugAdapterTrackerFactory(type: string, factory: vscode.DebugAdapterTrackerFactory): vscode.Disposable;\n\tregisterDebugVisualizationProvider<T extends vscode.DebugVisualization>(extension: IExtensionDescription, id: string, provider: vscode.DebugVisualizationProvider<T>): vscode.Disposable;\n\tregisterDebugVisualizationTree<T extends vscode.DebugTreeItem>(extension: IExtensionDescription, id: string, provider: vscode.DebugVisualizationTree<T>): vscode.Disposable;\n\tasDebugSourceUri(source: vscode.DebugProtocolSource, session?: vscode.DebugSession): vscode.Uri;\n}\n\nexport abstract class ExtHostDebugServiceBase extends DisposableCls implements IExtHostDebugService, ExtHostDebugServiceShape {\n\n\treadonly _serviceBrand: undefined;\n\n\tprivate _configProviderHandleCounter: number;\n\tprivate _configProviders: ConfigProviderTuple[];\n\n\tprivate _adapterFactoryHandleCounter: number;\n\tprivate _adapterFactories: DescriptorFactoryTuple[];\n\n\tprivate _trackerFactoryHandleCounter: number;\n\tprivate _trackerFactories: TrackerFactoryTuple[];\n\n\tprivate _debugServiceProxy: MainThreadDebugServiceShape;\n\tprivate _debugSessions: Map<DebugSessionUUID, ExtHostDebugSession> = new Map<DebugSessionUUID, ExtHostDebugSession>();\n\n\tprivate readonly _onDidStartDebugSession: Emitter<vscode.DebugSession>;\n\tget onDidStartDebugSession(): Event<vscode.DebugSession> { return this._onDidStartDebugSession.event; }\n\n\tprivate readonly _onDidTerminateDebugSession: Emitter<vscode.DebugSession>;\n\tget onDidTerminateDebugSession(): Event<vscode.DebugSession> { return this._onDidTerminateDebugSession.event; }\n\n\tprivate readonly _onDidChangeActiveDebugSession: Emitter<vscode.DebugSession | undefined>;\n\tget onDidChangeActiveDebugSession(): Event<vscode.DebugSession | undefined> { return this._onDidChangeActiveDebugSession.event; }\n\n\tprivate _activeDebugSession: ExtHostDebugSession | undefined;\n\tget activeDebugSession(): vscode.DebugSession | undefined { return this._activeDebugSession?.api; }\n\n\tprivate readonly _onDidReceiveDebugSessionCustomEvent: Emitter<vscode.DebugSessionCustomEvent>;\n\tget onDidReceiveDebugSessionCustomEvent(): Event<vscode.DebugSessionCustomEvent> { return this._onDidReceiveDebugSessionCustomEvent.event; }\n\n\tprivate _activeDebugConsole: ExtHostDebugConsole;\n\tget activeDebugConsole(): vscode.DebugConsole { return this._activeDebugConsole.value; }\n\n\tprivate _breakpoints: Map<string, vscode.Breakpoint>;\n\n\tprivate readonly _onDidChangeBreakpoints: Emitter<vscode.BreakpointsChangeEvent>;\n\n\tprivate _activeStackItem: vscode.DebugThread | vscode.DebugStackFrame | undefined;\n\tprivate readonly _onDidChangeActiveStackItem: Emitter<vscode.DebugThread | vscode.DebugStackFrame | undefined>;\n\n\tprivate _debugAdapters: Map<number, IDebugAdapter>;\n\tprivate _debugAdaptersTrackers: Map<number, vscode.DebugAdapterTracker>;\n\n\tprivate _debugVisualizationTreeItemIdsCounter = 0;\n\tprivate readonly _debugVisualizationProviders = new Map<string, vscode.DebugVisualizationProvider>();\n\tprivate readonly _debugVisualizationTrees = new Map<string, vscode.DebugVisualizationTree>();\n\tprivate readonly _debugVisualizationTreeItemIds = new WeakMap<vscode.DebugTreeItem, number>();\n\tprivate readonly _debugVisualizationElements = new Map<number, { provider: string; item: vscode.DebugTreeItem; children?: number[] }>();\n\n\tprivate _signService: ISignService | undefined;\n\n\tprivate readonly _visualizers = new Map<number, { v: vscode.DebugVisualization; provider: vscode.DebugVisualizationProvider; extensionId: string }>();\n\tprivate _visualizerIdCounter = 0;\n\n\tconstructor(\n\t\t@IExtHostRpcService extHostRpcService: IExtHostRpcService,\n\t\t@IExtHostWorkspace protected _workspaceService: IExtHostWorkspace,\n\t\t@IExtHostExtensionService private _extensionService: IExtHostExtensionService,\n\t\t@IExtHostConfiguration protected _configurationService: IExtHostConfiguration,\n\t\t@IExtHostEditorTabs protected _editorTabs: IExtHostEditorTabs,\n\t\t@IExtHostVariableResolverProvider private _variableResolver: IExtHostVariableResolverProvider,\n\t\t@IExtHostCommands private _commands: IExtHostCommands,\n\t\t@IExtHostTesting private _testing: IExtHostTesting,\n\t) {\n\t\tsuper();\n\n\t\tthis._configProviderHandleCounter = 0;\n\t\tthis._configProviders = [];\n\n\t\tthis._adapterFactoryHandleCounter = 0;\n\t\tthis._adapterFactories = [];\n\n\t\tthis._trackerFactoryHandleCounter = 0;\n\t\tthis._trackerFactories = [];\n\n\t\tthis._debugAdapters = new Map();\n\t\tthis._debugAdaptersTrackers = new Map();\n\n\t\tthis._onDidStartDebugSession = this._register(new Emitter<vscode.DebugSession>());\n\t\tthis._onDidTerminateDebugSession = this._register(new Emitter<vscode.DebugSession>());\n\t\tthis._onDidChangeActiveDebugSession = this._register(new Emitter<vscode.DebugSession | undefined>());\n\t\tthis._onDidReceiveDebugSessionCustomEvent = this._register(new Emitter<vscode.DebugSessionCustomEvent>());\n\n\t\tthis._debugServiceProxy = extHostRpcService.getProxy(MainContext.MainThreadDebugService);\n\n\t\tthis._onDidChangeBreakpoints = this._register(new Emitter<vscode.BreakpointsChangeEvent>());\n\n\t\tthis._onDidChangeActiveStackItem = this._register(new Emitter<vscode.DebugThread | vscode.DebugStackFrame | undefined>());\n\n\t\tthis._activeDebugConsole = new ExtHostDebugConsole(this._debugServiceProxy);\n\n\t\tthis._breakpoints = new Map<string, vscode.Breakpoint>();\n\n\t\tthis._extensionService.getExtensionRegistry().then((extensionRegistry: ExtensionDescriptionRegistry) => {\n\t\t\tthis._register(extensionRegistry.onDidChange(_ => {\n\t\t\t\tthis.registerAllDebugTypes(extensionRegistry);\n\t\t\t}));\n\t\t\tthis.registerAllDebugTypes(extensionRegistry);\n\t\t});\n\t}\n\n\tpublic async $getVisualizerTreeItem(treeId: string, element: IDebugVisualizationContext): Promise<IDebugVisualizationTreeItem | undefined> {\n\t\tconst context = this.hydrateVisualizationContext(element);\n\t\tif (!context) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\tconst item = await this._debugVisualizationTrees.get(treeId)?.getTreeItem?.(context);\n\t\treturn item ? this.convertVisualizerTreeItem(treeId, item) : undefined;\n\t}\n\n\tpublic registerDebugVisualizationTree<T extends vscode.DebugTreeItem>(manifest: IExtensionDescription, id: string, provider: vscode.DebugVisualizationTree<T>): vscode.Disposable {\n\t\tconst extensionId = ExtensionIdentifier.toKey(manifest.identifier);\n\t\tconst key = this.extensionVisKey(extensionId, id);\n\t\tif (this._debugVisualizationProviders.has(key)) {\n\t\t\tthrow new Error(`A debug visualization provider with id '${id}' is already registered`);\n\t\t}\n\n\t\tthis._debugVisualizationTrees.set(key, provider);\n\t\tthis._debugServiceProxy.$registerDebugVisualizerTree(key, !!provider.editItem);\n\t\treturn toDisposable(() => {\n\t\t\tthis._debugServiceProxy.$unregisterDebugVisualizerTree(key);\n\t\t\tthis._debugVisualizationTrees.delete(id);\n\t\t});\n\t}\n\n\tpublic async $getVisualizerTreeItemChildren(treeId: string, element: number): Promise<IDebugVisualizationTreeItem[]> {\n\t\tconst item = this._debugVisualizationElements.get(element)?.item;\n\t\tif (!item) {\n\t\t\treturn [];\n\t\t}\n\n\t\tconst children = await this._debugVisualizationTrees.get(treeId)?.getChildren?.(item);\n\t\treturn children?.map(i => this.convertVisualizerTreeItem(treeId, i)) || [];\n\t}\n\n\tpublic async $editVisualizerTreeItem(element: number, value: string): Promise<IDebugVisualizationTreeItem | undefined> {\n\t\tconst e = this._debugVisualizationElements.get(element);\n\t\tif (!e) { return undefined; }\n\n\t\tconst r = await this._debugVisualizationTrees.get(e.provider)?.editItem?.(e.item, value);\n\t\treturn this.convertVisualizerTreeItem(e.provider, r || e.item);\n\t}\n\n\tpublic $disposeVisualizedTree(element: number): void {\n\t\tconst root = this._debugVisualizationElements.get(element);\n\t\tif (!root) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst queue = [root.children];\n\t\tfor (const children of queue) {\n\t\t\tif (children) {\n\t\t\t\tfor (const child of children) {\n\t\t\t\t\tqueue.push(this._debugVisualizationElements.get(child)?.children);\n\t\t\t\t\tthis._debugVisualizationElements.delete(child);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate convertVisualizerTreeItem(treeId: string, item: vscode.DebugTreeItem): IDebugVisualizationTreeItem {\n\t\tlet id = this._debugVisualizationTreeItemIds.get(item);\n\t\tif (!id) {\n\t\t\tid = this._debugVisualizationTreeItemIdsCounter++;\n\t\t\tthis._debugVisualizationTreeItemIds.set(item, id);\n\t\t\tthis._debugVisualizationElements.set(id, { provider: treeId, item });\n\t\t}\n\n\t\treturn Convert.DebugTreeItem.from(item, id);\n\t}\n\n\tpublic asDebugSourceUri(src: vscode.DebugProtocolSource, session?: vscode.DebugSession): URI {\n\n\t\tconst source = <any>src;\n\n\t\tif (typeof source.sourceReference === 'number' && source.sourceReference > 0) {\n\t\t\t// src can be retrieved via DAP's \"source\" request\n\n\t\t\tlet debug = `debug:${encodeURIComponent(source.path || '')}`;\n\t\t\tlet sep = '?';\n\n\t\t\tif (session) {\n\t\t\t\tdebug += `${sep}session=${encodeURIComponent(session.id)}`;\n\t\t\t\tsep = '&';\n\t\t\t}\n\n\t\t\tdebug += `${sep}ref=${source.sourceReference}`;\n\n\t\t\treturn URI.parse(debug);\n\t\t} else if (source.path) {\n\t\t\t// src is just a local file path\n\t\t\treturn URI.file(source.path);\n\t\t} else {\n\t\t\tthrow new Error(`cannot create uri from DAP 'source' object; properties 'path' and 'sourceReference' are both missing.`);\n\t\t}\n\t}\n\n\tprivate registerAllDebugTypes(extensionRegistry: ExtensionDescriptionRegistry) {\n\n\t\tconst debugTypes: string[] = [];\n\n\t\tfor (const ed of extensionRegistry.getAllExtensionDescriptions()) {\n\t\t\tif (ed.contributes) {\n\t\t\t\tconst debuggers = <IDebuggerContribution[]>ed.contributes['debuggers'];\n\t\t\t\tif (debuggers && debuggers.length > 0) {\n\t\t\t\t\tfor (const dbg of debuggers) {\n\t\t\t\t\t\tif (isDebuggerMainContribution(dbg)) {\n\t\t\t\t\t\t\tdebugTypes.push(dbg.type);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tthis._debugServiceProxy.$registerDebugTypes(debugTypes);\n\t}\n\n\t// extension debug API\n\n\n\tget activeStackItem(): vscode.DebugThread | vscode.DebugStackFrame | undefined {\n\t\treturn this._activeStackItem;\n\t}\n\n\tget onDidChangeActiveStackItem(): Event<vscode.DebugThread | vscode.DebugStackFrame | undefined> {\n\t\treturn this._onDidChangeActiveStackItem.event;\n\t}\n\n\tget onDidChangeBreakpoints(): Event<vscode.BreakpointsChangeEvent> {\n\t\treturn this._onDidChangeBreakpoints.event;\n\t}\n\n\tget breakpoints(): vscode.Breakpoint[] {\n\t\tconst result: vscode.Breakpoint[] = [];\n\t\tthis._breakpoints.forEach(bp => result.push(bp));\n\t\treturn result;\n\t}\n\n\tpublic async $resolveDebugVisualizer(id: number, token: CancellationToken): Promise<MainThreadDebugVisualization> {\n\t\tconst visualizer = this._visualizers.get(id);\n\t\tif (!visualizer) {\n\t\t\tthrow new Error(`No debug visualizer found with id '${id}'`);\n\t\t}\n\n\t\tlet { v, provider, extensionId } = visualizer;\n\t\tif (!v.visualization) {\n\t\t\tv = await provider.resolveDebugVisualization?.(v, token) || v;\n\t\t\tvisualizer.v = v;\n\t\t}\n\n\t\tif (!v.visualization) {\n\t\t\tthrow new Error(`No visualization returned from resolveDebugVisualization in '${provider}'`);\n\t\t}\n\n\t\treturn this.serializeVisualization(extensionId, v.visualization)!;\n\t}\n\n\tpublic async $executeDebugVisualizerCommand(id: number): Promise<void> {\n\t\tconst visualizer = this._visualizers.get(id);\n\t\tif (!visualizer) {\n\t\t\tthrow new Error(`No debug visualizer found with id '${id}'`);\n\t\t}\n\n\t\tconst command = visualizer.v.visualization;\n\t\tif (command && 'command' in command) {\n\t\t\tthis._commands.executeCommand(command.command, ...(command.arguments || []));\n\t\t}\n\t}\n\n\tprivate hydrateVisualizationContext(context: IDebugVisualizationContext): vscode.DebugVisualizationContext | undefined {\n\t\tconst session = this._debugSessions.get(context.sessionId);\n\t\treturn session && {\n\t\t\tsession: session.api,\n\t\t\tvariable: context.variable,\n\t\t\tcontainerId: context.containerId,\n\t\t\tframeId: context.frameId,\n\t\t\tthreadId: context.threadId,\n\t\t};\n\t}\n\n\tpublic async $provideDebugVisualizers(extensionId: string, id: string, context: IDebugVisualizationContext, token: CancellationToken): Promise<IDebugVisualization.Serialized[]> {\n\t\tconst contextHydrated = this.hydrateVisualizationContext(context);\n\t\tconst key = this.extensionVisKey(extensionId, id);\n\t\tconst provider = this._debugVisualizationProviders.get(key);\n\t\tif (!contextHydrated || !provider) {\n\t\t\treturn []; // probably ended in the meantime\n\t\t}\n\n\t\tconst visualizations = await provider.provideDebugVisualization(contextHydrated, token);\n\n\t\tif (!visualizations) {\n\t\t\treturn [];\n\t\t}\n\n\t\treturn visualizations.map(v => {\n\t\t\tconst id = ++this._visualizerIdCounter;\n\t\t\tthis._visualizers.set(id, { v, provider, extensionId });\n\t\t\tconst icon = v.iconPath ? this.getIconPathOrClass(v.iconPath) : undefined;\n\t\t\treturn {\n\t\t\t\tid,\n\t\t\t\tname: v.name,\n\t\t\t\ticonClass: icon?.iconClass,\n\t\t\t\ticonPath: icon?.iconPath,\n\t\t\t\tvisualization: this.serializeVisualization(extensionId, v.visualization),\n\t\t\t};\n\t\t});\n\t}\n\n\tpublic $disposeDebugVisualizers(ids: number[]): void {\n\t\tfor (const id of ids) {\n\t\t\tthis._visualizers.delete(id);\n\t\t}\n\t}\n\n\tpublic registerDebugVisualizationProvider<T extends vscode.DebugVisualization>(manifest: IExtensionDescription, id: string, provider: vscode.DebugVisualizationProvider<T>): vscode.Disposable {\n\t\tif (!manifest.contributes?.debugVisualizers?.some(r => r.id === id)) {\n\t\t\tthrow new Error(`Extensions may only call registerDebugVisualizationProvider() for renderers they contribute (got ${id})`);\n\t\t}\n\n\t\tconst extensionId = ExtensionIdentifier.toKey(manifest.identifier);\n\t\tconst key = this.extensionVisKey(extensionId, id);\n\t\tif (this._debugVisualizationProviders.has(key)) {\n\t\t\tthrow new Error(`A debug visualization provider with id '${id}' is already registered`);\n\t\t}\n\n\t\tthis._debugVisualizationProviders.set(key, provider);\n\t\tthis._debugServiceProxy.$registerDebugVisualizer(extensionId, id);\n\t\treturn toDisposable(() => {\n\t\t\tthis._debugServiceProxy.$unregisterDebugVisualizer(extensionId, id);\n\t\t\tthis._debugVisualizationProviders.delete(id);\n\t\t});\n\t}\n\n\tpublic addBreakpoints(breakpoints0: vscode.Breakpoint[]): Promise<void> {\n\t\t// filter only new breakpoints\n\t\tconst breakpoints = breakpoints0.filter(bp => {\n\t\t\tconst id = bp.id;\n\t\t\tif (!this._breakpoints.has(id)) {\n\t\t\t\tthis._breakpoints.set(id, bp);\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\treturn false;\n\t\t});\n\n\t\t// send notification for added breakpoints\n\t\tthis.fireBreakpointChanges(breakpoints, [], []);\n\n\t\t// convert added breakpoints to DTOs\n\t\tconst dtos: Array<ISourceMultiBreakpointDto | IFunctionBreakpointDto> = [];\n\t\tconst map = new Map<string, ISourceMultiBreakpointDto>();\n\t\tfor (const bp of breakpoints) {\n\t\t\tif (bp instanceof SourceBreakpoint) {\n\t\t\t\tlet dto = map.get(bp.location.uri.toString());\n\t\t\t\tif (!dto) {\n\t\t\t\t\tdto = {\n\t\t\t\t\t\ttype: 'sourceMulti',\n\t\t\t\t\t\turi: bp.location.uri,\n\t\t\t\t\t\tlines: []\n\t\t\t\t\t} satisfies ISourceMultiBreakpointDto;\n\t\t\t\t\tmap.set(bp.location.uri.toString(), dto);\n\t\t\t\t\tdtos.push(dto);\n\t\t\t\t}\n\t\t\t\tdto.lines.push({\n\t\t\t\t\tid: bp.id,\n\t\t\t\t\tenabled: bp.enabled,\n\t\t\t\t\tcondition: bp.condition,\n\t\t\t\t\thitCondition: bp.hitCondition,\n\t\t\t\t\tlogMessage: bp.logMessage,\n\t\t\t\t\tline: bp.location.range.start.line,\n\t\t\t\t\tcharacter: bp.location.range.start.character,\n\t\t\t\t\tmode: bp.mode,\n\t\t\t\t});\n\t\t\t} else if (bp instanceof FunctionBreakpoint) {\n\t\t\t\tdtos.push({\n\t\t\t\t\ttype: 'function',\n\t\t\t\t\tid: bp.id,\n\t\t\t\t\tenabled: bp.enabled,\n\t\t\t\t\thitCondition: bp.hitCondition,\n\t\t\t\t\tlogMessage: bp.logMessage,\n\t\t\t\t\tcondition: bp.condition,\n\t\t\t\t\tfunctionName: bp.functionName,\n\t\t\t\t\tmode: bp.mode,\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\t// send DTOs to VS Code\n\t\treturn this._debugServiceProxy.$registerBreakpoints(dtos);\n\t}\n\n\tpublic removeBreakpoints(breakpoints0: vscode.Breakpoint[]): Promise<void> {\n\t\t// remove from array\n\t\tconst breakpoints = breakpoints0.filter(b => this._breakpoints.delete(b.id));\n\n\t\t// send notification\n\t\tthis.fireBreakpointChanges([], breakpoints, []);\n\n\t\t// unregister with VS Code\n\t\tconst ids = breakpoints.filter(bp => bp instanceof SourceBreakpoint).map(bp => bp.id);\n\t\tconst fids = breakpoints.filter(bp => bp instanceof FunctionBreakpoint).map(bp => bp.id);\n\t\tconst dids = breakpoints.filter(bp => bp instanceof DataBreakpoint).map(bp => bp.id);\n\t\treturn this._debugServiceProxy.$unregisterBreakpoints(ids, fids, dids);\n\t}\n\n\tpublic startDebugging(folder: vscode.WorkspaceFolder | undefined, nameOrConfig: string | vscode.DebugConfiguration, options: vscode.DebugSessionOptions): Promise<boolean> {\n\t\tconst testRunMeta = options.testRun && this._testing.getMetadataForRun(options.testRun);\n\n\t\treturn this._debugServiceProxy.$startDebugging(folder ? folder.uri : undefined, nameOrConfig, {\n\t\t\tparentSessionID: options.parentSession ? options.parentSession.id : undefined,\n\t\t\tlifecycleManagedByParent: options.lifecycleManagedByParent,\n\t\t\trepl: options.consoleMode === DebugConsoleMode.MergeWithParent ? 'mergeWithParent' : 'separate',\n\t\t\tnoDebug: options.noDebug,\n\t\t\tcompact: options.compact,\n\t\t\tsuppressSaveBeforeStart: options.suppressSaveBeforeStart,\n\t\t\ttestRun: testRunMeta && {\n\t\t\t\trunId: testRunMeta.runId,\n\t\t\t\ttaskId: testRunMeta.taskId,\n\t\t\t},\n\n\t\t\t// Check debugUI for back-compat, #147264\n\t\t\tsuppressDebugStatusbar: options.suppressDebugStatusbar ?? (options as any).debugUI?.simple,\n\t\t\tsuppressDebugToolbar: options.suppressDebugToolbar ?? (options as any).debugUI?.simple,\n\t\t\tsuppressDebugView: options.suppressDebugView ?? (options as any).debugUI?.simple,\n\t\t});\n\t}\n\n\tpublic stopDebugging(session?: vscode.DebugSession): Promise<void> {\n\t\treturn this._debugServiceProxy.$stopDebugging(session ? session.id : undefined);\n\t}\n\n\tpublic registerDebugConfigurationProvider(type: string, provider: vscode.DebugConfigurationProvider, trigger: vscode.DebugConfigurationProviderTriggerKind): vscode.Disposable {\n\n\t\tif (!provider) {\n\t\t\treturn new Disposable(() => { });\n\t\t}\n\n\t\tconst handle = this._configProviderHandleCounter++;\n\t\tthis._configProviders.push({ type, handle, provider });\n\n\t\tthis._debugServiceProxy.$registerDebugConfigurationProvider(type, trigger,\n\t\t\t!!provider.provideDebugConfigurations,\n\t\t\t!!provider.resolveDebugConfiguration,\n\t\t\t!!provider.resolveDebugConfigurationWithSubstitutedVariables,\n\t\t\thandle);\n\n\t\treturn new Disposable(() => {\n\t\t\tthis._configProviders = this._configProviders.filter(p => p.provider !== provider);\t\t// remove\n\t\t\tthis._debugServiceProxy.$unregisterDebugConfigurationProvider(handle);\n\t\t});\n\t}\n\n\tpublic registerDebugAdapterDescriptorFactory(extension: IExtensionDescription, type: string, factory: vscode.DebugAdapterDescriptorFactory): vscode.Disposable {\n\n\t\tif (!factory) {\n\t\t\treturn new Disposable(() => { });\n\t\t}\n\n\t\t// a DebugAdapterDescriptorFactory can only be registered in the extension that contributes the debugger\n\t\tif (!this.definesDebugType(extension, type)) {\n\t\t\tthrow new Error(`a DebugAdapterDescriptorFactory can only be registered from the extension that defines the '${type}' debugger.`);\n\t\t}\n\n\t\t// make sure that only one factory for this type is registered\n\t\tif (this.getAdapterDescriptorFactoryByType(type)) {\n\t\t\tthrow new Error(`a DebugAdapterDescriptorFactory can only be registered once per a type.`);\n\t\t}\n\n\t\tconst handle = this._adapterFactoryHandleCounter++;\n\t\tthis._adapterFactories.push({ type, handle, factory });\n\n\t\tthis._debugServiceProxy.$registerDebugAdapterDescriptorFactory(type, handle);\n\n\t\treturn new Disposable(() => {\n\t\t\tthis._adapterFactories = this._adapterFactories.filter(p => p.factory !== factory);\t\t// remove\n\t\t\tthis._debugServiceProxy.$unregisterDebugAdapterDescriptorFactory(handle);\n\t\t});\n\t}\n\n\tpublic registerDebugAdapterTrackerFactory(type: string, factory: vscode.DebugAdapterTrackerFactory): vscode.Disposable {\n\n\t\tif (!factory) {\n\t\t\treturn new Disposable(() => { });\n\t\t}\n\n\t\tconst handle = this._trackerFactoryHandleCounter++;\n\t\tthis._trackerFactories.push({ type, handle, factory });\n\n\t\treturn new Disposable(() => {\n\t\t\tthis._trackerFactories = this._trackerFactories.filter(p => p.factory !== factory);\t\t// remove\n\t\t});\n\t}\n\n\t// RPC methods (ExtHostDebugServiceShape)\n\n\tpublic async $runInTerminal(args: DebugProtocol.RunInTerminalRequestArguments, sessionId: string): Promise<number | undefined> {\n\t\treturn Promise.resolve(undefined);\n\t}\n\n\tpublic async $substituteVariables(folderUri: UriComponents | undefined, config: IConfig): Promise<IConfig> {\n\t\tlet ws: IWorkspaceFolder | undefined;\n\t\tconst folder = await this.getFolder(folderUri);\n\t\tif (folder) {\n\t\t\tws = {\n\t\t\t\turi: folder.uri,\n\t\t\t\tname: folder.name,\n\t\t\t\tindex: folder.index,\n\t\t\t\ttoResource: () => {\n\t\t\t\t\tthrow new Error('Not implemented');\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\t\tconst variableResolver = await this._variableResolver.getResolver();\n\t\treturn variableResolver.resolveAnyAsync(ws, config);\n\t}\n\n\tprotected createDebugAdapter(adapter: vscode.DebugAdapterDescriptor, session: ExtHostDebugSession): AbstractDebugAdapter | undefined {\n\t\tif (adapter instanceof DebugAdapterInlineImplementation) {\n\t\t\treturn new DirectDebugAdapter(adapter.implementation);\n\t\t}\n\t\treturn undefined;\n\t}\n\n\tprotected createSignService(): ISignService | undefined {\n\t\treturn undefined;\n\t}\n\n\tpublic async $startDASession(debugAdapterHandle: number, sessionDto: IDebugSessionDto): Promise<void> {\n\t\tconst mythis = this;\n\n\t\tconst session = await this.getSession(sessionDto);\n\n\t\treturn this.getAdapterDescriptor(this.getAdapterDescriptorFactoryByType(session.type), session).then(daDescriptor => {\n\n\t\t\tif (!daDescriptor) {\n\t\t\t\tthrow new Error(`Couldn't find a debug adapter descriptor for debug type '${session.type}' (extension might have failed to activate)`);\n\t\t\t}\n\n\t\t\tconst da = this.createDebugAdapter(daDescriptor, session);\n\t\t\tif (!da) {\n\t\t\t\tthrow new Error(`Couldn't create a debug adapter for type '${session.type}'.`);\n\t\t\t}\n\n\t\t\tconst debugAdapter = da;\n\n\t\t\tthis._debugAdapters.set(debugAdapterHandle, debugAdapter);\n\n\t\t\treturn this.getDebugAdapterTrackers(session).then(tracker => {\n\n\t\t\t\tif (tracker) {\n\t\t\t\t\tthis._debugAdaptersTrackers.set(debugAdapterHandle, tracker);\n\t\t\t\t}\n\n\t\t\t\tdebugAdapter.onMessage(async message => {\n\n\t\t\t\t\tif (message.type === 'request' && (<DebugProtocol.Request>message).command === 'handshake') {\n\n\t\t\t\t\t\tconst request = <DebugProtocol.Request>message;\n\n\t\t\t\t\t\tconst response: DebugProtocol.Response = {\n\t\t\t\t\t\t\ttype: 'response',\n\t\t\t\t\t\t\tseq: 0,\n\t\t\t\t\t\t\tcommand: request.command,\n\t\t\t\t\t\t\trequest_seq: request.seq,\n\t\t\t\t\t\t\tsuccess: true\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\tif (!this._signService) {\n\t\t\t\t\t\t\tthis._signService = this.createSignService();\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tif (this._signService) {\n\t\t\t\t\t\t\t\tconst signature = await this._signService.sign(request.arguments.value);\n\t\t\t\t\t\t\t\tresponse.body = {\n\t\t\t\t\t\t\t\t\tsignature: signature\n\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t\tdebugAdapter.sendResponse(response);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tthrow new Error('no signer');\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\t\tresponse.success = false;\n\t\t\t\t\t\t\tresponse.message = e.message;\n\t\t\t\t\t\t\tdebugAdapter.sendResponse(response);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (tracker && tracker.onDidSendMessage) {\n\t\t\t\t\t\t\ttracker.onDidSendMessage(message);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// DA -> VS Code\n\t\t\t\t\t\tmessage = convertToVSCPaths(message, true);\n\n\t\t\t\t\t\tmythis._debugServiceProxy.$acceptDAMessage(debugAdapterHandle, message);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\tdebugAdapter.onError(err => {\n\t\t\t\t\tif (tracker && tracker.onError) {\n\t\t\t\t\t\ttracker.onError(err);\n\t\t\t\t\t}\n\t\t\t\t\tthis._debugServiceProxy.$acceptDAError(debugAdapterHandle, err.name, err.message, err.stack);\n\t\t\t\t});\n\t\t\t\tdebugAdapter.onExit((code: number | null) => {\n\t\t\t\t\tif (tracker && tracker.onExit) {\n\t\t\t\t\t\ttracker.onExit(code ?? undefined, undefined);\n\t\t\t\t\t}\n\t\t\t\t\tthis._debugServiceProxy.$acceptDAExit(debugAdapterHandle, code ?? undefined, undefined);\n\t\t\t\t});\n\n\t\t\t\tif (tracker && tracker.onWillStartSession) {\n\t\t\t\t\ttracker.onWillStartSession();\n\t\t\t\t}\n\n\t\t\t\treturn debugAdapter.startSession();\n\t\t\t});\n\t\t});\n\t}\n\n\tpublic $sendDAMessage(debugAdapterHandle: number, message: DebugProtocol.ProtocolMessage): void {\n\n\t\t// VS Code -> DA\n\t\tmessage = convertToDAPaths(message, false);\n\n\t\tconst tracker = this._debugAdaptersTrackers.get(debugAdapterHandle);\t// TODO@AW: same handle?\n\t\tif (tracker && tracker.onWillReceiveMessage) {\n\t\t\ttracker.onWillReceiveMessage(message);\n\t\t}\n\n\t\tconst da = this._debugAdapters.get(debugAdapterHandle);\n\t\tda?.sendMessage(message);\n\t}\n\n\tpublic $stopDASession(debugAdapterHandle: number): Promise<void> {\n\n\t\tconst tracker = this._debugAdaptersTrackers.get(debugAdapterHandle);\n\t\tthis._debugAdaptersTrackers.delete(debugAdapterHandle);\n\t\tif (tracker && tracker.onWillStopSession) {\n\t\t\ttracker.onWillStopSession();\n\t\t}\n\n\t\tconst da = this._debugAdapters.get(debugAdapterHandle);\n\t\tthis._debugAdapters.delete(debugAdapterHandle);\n\t\tif (da) {\n\t\t\treturn da.stopSession();\n\t\t} else {\n\t\t\treturn Promise.resolve(void 0);\n\t\t}\n\t}\n\n\tpublic $acceptBreakpointsDelta(delta: IBreakpointsDeltaDto): void {\n\n\t\tconst a: vscode.Breakpoint[] = [];\n\t\tconst r: vscode.Breakpoint[] = [];\n\t\tconst c: vscode.Breakpoint[] = [];\n\n\t\tif (delta.added) {\n\t\t\tfor (const bpd of delta.added) {\n\t\t\t\tconst id = bpd.id;\n\t\t\t\tif (id && !this._breakpoints.has(id)) {\n\t\t\t\t\tlet bp: Breakpoint;\n\t\t\t\t\tif (bpd.type === 'function') {\n\t\t\t\t\t\tbp = new FunctionBreakpoint(bpd.functionName, bpd.enabled, bpd.condition, bpd.hitCondition, bpd.logMessage, bpd.mode);\n\t\t\t\t\t} else if (bpd.type === 'data') {\n\t\t\t\t\t\tbp = new DataBreakpoint(bpd.label, bpd.dataId, bpd.canPersist, bpd.enabled, bpd.hitCondition, bpd.condition, bpd.logMessage, bpd.mode);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconst uri = URI.revive(bpd.uri);\n\t\t\t\t\t\tbp = new SourceBreakpoint(new Location(uri, new Position(bpd.line, bpd.character)), bpd.enabled, bpd.condition, bpd.hitCondition, bpd.logMessage, bpd.mode);\n\t\t\t\t\t}\n\t\t\t\t\tsetBreakpointId(bp, id);\n\t\t\t\t\tthis._breakpoints.set(id, bp);\n\t\t\t\t\ta.push(bp);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (delta.removed) {\n\t\t\tfor (const id of delta.removed) {\n\t\t\t\tconst bp = this._breakpoints.get(id);\n\t\t\t\tif (bp) {\n\t\t\t\t\tthis._breakpoints.delete(id);\n\t\t\t\t\tr.push(bp);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (delta.changed) {\n\t\t\tfor (const bpd of delta.changed) {\n\t\t\t\tif (bpd.id) {\n\t\t\t\t\tconst bp = this._breakpoints.get(bpd.id);\n\t\t\t\t\tif (bp) {\n\t\t\t\t\t\tif (bp instanceof FunctionBreakpoint && bpd.type === 'function') {\n\t\t\t\t\t\t\tconst fbp = <any>bp;\n\t\t\t\t\t\t\tfbp.enabled = bpd.enabled;\n\t\t\t\t\t\t\tfbp.condition = bpd.condition;\n\t\t\t\t\t\t\tfbp.hitCondition = bpd.hitCondition;\n\t\t\t\t\t\t\tfbp.logMessage = bpd.logMessage;\n\t\t\t\t\t\t\tfbp.functionName = bpd.functionName;\n\t\t\t\t\t\t} else if (bp instanceof SourceBreakpoint && bpd.type === 'source') {\n\t\t\t\t\t\t\tconst sbp = <any>bp;\n\t\t\t\t\t\t\tsbp.enabled = bpd.enabled;\n\t\t\t\t\t\t\tsbp.condition = bpd.condition;\n\t\t\t\t\t\t\tsbp.hitCondition = bpd.hitCondition;\n\t\t\t\t\t\t\tsbp.logMessage = bpd.logMessage;\n\t\t\t\t\t\t\tsbp.location = new Location(URI.revive(bpd.uri), new Position(bpd.line, bpd.character));\n\t\t\t\t\t\t}\n\t\t\t\t\t\tc.push(bp);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tthis.fireBreakpointChanges(a, r, c);\n\t}\n\n\tpublic async $acceptStackFrameFocus(focusDto: IThreadFocusDto | IStackFrameFocusDto | undefined): Promise<void> {\n\t\tlet focus: vscode.DebugThread | vscode.DebugStackFrame | undefined;\n\t\tif (focusDto) {\n\t\t\tconst session = await this.getSession(focusDto.sessionId);\n\t\t\tif (focusDto.kind === 'thread') {\n\t\t\t\tfocus = new DebugThread(session.api, focusDto.threadId);\n\t\t\t} else {\n\t\t\t\tfocus = new DebugStackFrame(session.api, focusDto.threadId, focusDto.frameId);\n\t\t\t}\n\t\t}\n\n\t\tthis._activeStackItem = focus;\n\t\tthis._onDidChangeActiveStackItem.fire(this._activeStackItem);\n\t}\n\n\tpublic $provideDebugConfigurations(configProviderHandle: number, folderUri: UriComponents | undefined, token: CancellationToken): Promise<vscode.DebugConfiguration[]> {\n\t\treturn asPromise(async () => {\n\t\t\tconst provider = this.getConfigProviderByHandle(configProviderHandle);\n\t\t\tif (!provider) {\n\t\t\t\tthrow new Error('no DebugConfigurationProvider found');\n\t\t\t}\n\t\t\tif (!provider.provideDebugConfigurations) {\n\t\t\t\tthrow new Error('DebugConfigurationProvider has no method provideDebugConfigurations');\n\t\t\t}\n\t\t\tconst folder = await this.getFolder(folderUri);\n\t\t\treturn provider.provideDebugConfigurations(folder, token);\n\t\t}).then(debugConfigurations => {\n\t\t\tif (!debugConfigurations) {\n\t\t\t\tthrow new Error('nothing returned from DebugConfigurationProvider.provideDebugConfigurations');\n\t\t\t}\n\t\t\treturn debugConfigurations;\n\t\t});\n\t}\n\n\tpublic $resolveDebugConfiguration(configProviderHandle: number, folderUri: UriComponents | undefined, debugConfiguration: vscode.DebugConfiguration, token: CancellationToken): Promise<vscode.DebugConfiguration | null | undefined> {\n\t\treturn asPromise(async () => {\n\t\t\tconst provider = this.getConfigProviderByHandle(configProviderHandle);\n\t\t\tif (!provider) {\n\t\t\t\tthrow new Error('no DebugConfigurationProvider found');\n\t\t\t}\n\t\t\tif (!provider.resolveDebugConfiguration) {\n\t\t\t\tthrow new Error('DebugConfigurationProvider has no method resolveDebugConfiguration');\n\t\t\t}\n\t\t\tconst folder = await this.getFolder(folderUri);\n\t\t\treturn provider.resolveDebugConfiguration(folder, debugConfiguration, token);\n\t\t});\n\t}\n\n\tpublic $resolveDebugConfigurationWithSubstitutedVariables(configProviderHandle: number, folderUri: UriComponents | undefined, debugConfiguration: vscode.DebugConfiguration, token: CancellationToken): Promise<vscode.DebugConfiguration | null | undefined> {\n\t\treturn asPromise(async () => {\n\t\t\tconst provider = this.getConfigProviderByHandle(configProviderHandle);\n\t\t\tif (!provider) {\n\t\t\t\tthrow new Error('no DebugConfigurationProvider found');\n\t\t\t}\n\t\t\tif (!provider.resolveDebugConfigurationWithSubstitutedVariables) {\n\t\t\t\tthrow new Error('DebugConfigurationProvider has no method resolveDebugConfigurationWithSubstitutedVariables');\n\t\t\t}\n\t\t\tconst folder = await this.getFolder(folderUri);\n\t\t\treturn provider.resolveDebugConfigurationWithSubstitutedVariables(folder, debugConfiguration, token);\n\t\t});\n\t}\n\n\tpublic async $provideDebugAdapter(adapterFactoryHandle: number, sessionDto: IDebugSessionDto): Promise<Dto<IAdapterDescriptor>> {\n\t\tconst adapterDescriptorFactory = this.getAdapterDescriptorFactoryByHandle(adapterFactoryHandle);\n\t\tif (!adapterDescriptorFactory) {\n\t\t\treturn Promise.reject(new Error('no adapter descriptor factory found for handle'));\n\t\t}\n\t\tconst session = await this.getSession(sessionDto);\n\t\treturn this.getAdapterDescriptor(adapterDescriptorFactory, session).then(adapterDescriptor => {\n\t\t\tif (!adapterDescriptor) {\n\t\t\t\tthrow new Error(`Couldn't find a debug adapter descriptor for debug type '${session.type}'`);\n\t\t\t}\n\t\t\treturn this.convertToDto(adapterDescriptor);\n\t\t});\n\t}\n\n\tpublic async $acceptDebugSessionStarted(sessionDto: IDebugSessionDto): Promise<void> {\n\t\tconst session = await this.getSession(sessionDto);\n\t\tthis._onDidStartDebugSession.fire(session.api);\n\t}\n\n\tpublic async $acceptDebugSessionTerminated(sessionDto: IDebugSessionDto): Promise<void> {\n\t\tconst session = await this.getSession(sessionDto);\n\t\tif (session) {\n\t\t\tthis._onDidTerminateDebugSession.fire(session.api);\n\t\t\tthis._debugSessions.delete(session.id);\n\t\t}\n\t}\n\n\tpublic async $acceptDebugSessionActiveChanged(sessionDto: IDebugSessionDto | undefined): Promise<void> {\n\t\tthis._activeDebugSession = sessionDto ? await this.getSession(sessionDto) : undefined;\n\t\tthis._onDidChangeActiveDebugSession.fire(this._activeDebugSession?.api);\n\t}\n\n\tpublic async $acceptDebugSessionNameChanged(sessionDto: IDebugSessionDto, name: string): Promise<void> {\n\t\tconst session = await this.getSession(sessionDto);\n\t\tsession?._acceptNameChanged(name);\n\t}\n\n\tpublic async $acceptDebugSessionCustomEvent(sessionDto: IDebugSessionDto, event: any): Promise<void> {\n\t\tconst session = await this.getSession(sessionDto);\n\t\tconst ee: vscode.DebugSessionCustomEvent = {\n\t\t\tsession: session.api,\n\t\t\tevent: event.event,\n\t\t\tbody: event.body\n\t\t};\n\t\tthis._onDidReceiveDebugSessionCustomEvent.fire(ee);\n\t}\n\n\t// private & dto helpers\n\n\tprivate convertToDto(x: vscode.DebugAdapterDescriptor): Dto<IAdapterDescriptor> {\n\t\tif (x instanceof DebugAdapterExecutable) {\n\t\t\treturn this.convertExecutableToDto(x);\n\t\t} else if (x instanceof DebugAdapterServer) {\n\t\t\treturn this.convertServerToDto(x);\n\t\t} else if (x instanceof DebugAdapterNamedPipeServer) {\n\t\t\treturn this.convertPipeServerToDto(x);\n\t\t} else if (x instanceof DebugAdapterInlineImplementation) {\n\t\t\treturn this.convertImplementationToDto(x);\n\t\t} else {\n\t\t\tthrow new Error('convertToDto unexpected type');\n\t\t}\n\t}\n\n\tprotected convertExecutableToDto(x: DebugAdapterExecutable): IDebugAdapterExecutable {\n\t\treturn {\n\t\t\ttype: 'executable',\n\t\t\tcommand: x.command,\n\t\t\targs: x.args,\n\t\t\toptions: x.options\n\t\t};\n\t}\n\n\tprotected convertServerToDto(x: DebugAdapterServer): IDebugAdapterServer {\n\t\treturn {\n\t\t\ttype: 'server',\n\t\t\tport: x.port,\n\t\t\thost: x.host\n\t\t};\n\t}\n\n\tprotected convertPipeServerToDto(x: DebugAdapterNamedPipeServer): IDebugAdapterNamedPipeServer {\n\t\treturn {\n\t\t\ttype: 'pipeServer',\n\t\t\tpath: x.path\n\t\t};\n\t}\n\n\tprotected convertImplementationToDto(x: DebugAdapterInlineImplementation): IDebugAdapterImpl {\n\t\treturn {\n\t\t\ttype: 'implementation',\n\t\t};\n\t}\n\n\tprivate getAdapterDescriptorFactoryByType(type: string): vscode.DebugAdapterDescriptorFactory | undefined {\n\t\tconst results = this._adapterFactories.filter(p => p.type === type);\n\t\tif (results.length > 0) {\n\t\t\treturn results[0].factory;\n\t\t}\n\t\treturn undefined;\n\t}\n\n\tprivate getAdapterDescriptorFactoryByHandle(handle: number): vscode.DebugAdapterDescriptorFactory | undefined {\n\t\tconst results = this._adapterFactories.filter(p => p.handle === handle);\n\t\tif (results.length > 0) {\n\t\t\treturn results[0].factory;\n\t\t}\n\t\treturn undefined;\n\t}\n\n\tprivate getConfigProviderByHandle(handle: number): vscode.DebugConfigurationProvider | undefined {\n\t\tconst results = this._configProviders.filter(p => p.handle === handle);\n\t\tif (results.length > 0) {\n\t\t\treturn results[0].provider;\n\t\t}\n\t\treturn undefined;\n\t}\n\n\tprivate definesDebugType(ed: IExtensionDescription, type: string) {\n\t\tif (ed.contributes) {\n\t\t\tconst debuggers = ed.contributes['debuggers'];\n\t\t\tif (debuggers && debuggers.length > 0) {\n\t\t\t\tfor (const dbg of debuggers) {\n\t\t\t\t\t// only debugger contributions with a \"label\" are considered a \"defining\" debugger contribution\n\t\t\t\t\tif (dbg.label && dbg.type) {\n\t\t\t\t\t\tif (dbg.type === type) {\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\n\tprivate getDebugAdapterTrackers(session: ExtHostDebugSession): Promise<vscode.DebugAdapterTracker | undefined> {\n\n\t\tconst config = session.configuration;\n\t\tconst type = config.type;\n\n\t\tconst promises = this._trackerFactories\n\t\t\t.filter(tuple => tuple.type === type || tuple.type === '*')\n\t\t\t.map(tuple => asPromise<vscode.ProviderResult<vscode.DebugAdapterTracker>>(() => tuple.factory.createDebugAdapterTracker(session.api)).then(p => p, err => null));\n\n\t\treturn Promise.race([\n\t\t\tPromise.all(promises).then(result => {\n\t\t\t\tconst trackers = coalesce(result);\t// filter null\n\t\t\t\tif (trackers.length > 0) {\n\t\t\t\t\treturn new MultiTracker(trackers);\n\t\t\t\t}\n\t\t\t\treturn undefined;\n\t\t\t}),\n\t\t\tnew Promise<undefined>(resolve => setTimeout(() => resolve(undefined), 1000)),\n\t\t]).catch(err => {\n\t\t\t// ignore errors\n\t\t\treturn undefined;\n\t\t});\n\t}\n\n\tprivate async getAdapterDescriptor(adapterDescriptorFactory: vscode.DebugAdapterDescriptorFactory | undefined, session: ExtHostDebugSession): Promise<vscode.DebugAdapterDescriptor | undefined> {\n\n\t\t// a \"debugServer\" attribute in the launch config takes precedence\n\t\tconst serverPort = session.configuration.debugServer;\n\t\tif (typeof serverPort === 'number') {\n\t\t\treturn Promise.resolve(new DebugAdapterServer(serverPort));\n\t\t}\n\n\t\tif (adapterDescriptorFactory) {\n\t\t\tconst extensionRegistry = await this._extensionService.getExtensionRegistry();\n\t\t\treturn asPromise(() => adapterDescriptorFactory.createDebugAdapterDescriptor(session.api, this.daExecutableFromPackage(session, extensionRegistry))).then(daDescriptor => {\n\t\t\t\tif (daDescriptor) {\n\t\t\t\t\treturn daDescriptor;\n\t\t\t\t}\n\t\t\t\treturn undefined;\n\t\t\t});\n\t\t}\n\n\t\t// fallback: use executable information from package.json\n\t\tconst extensionRegistry = await this._extensionService.getExtensionRegistry();\n\t\treturn Promise.resolve(this.daExecutableFromPackage(session, extensionRegistry));\n\t}\n\n\tprotected daExecutableFromPackage(session: ExtHostDebugSession, extensionRegistry: ExtensionDescriptionRegistry): DebugAdapterExecutable | undefined {\n\t\treturn undefined;\n\t}\n\n\tprivate fireBreakpointChanges(added: vscode.Breakpoint[], removed: vscode.Breakpoint[], changed: vscode.Breakpoint[]) {\n\t\tif (added.length > 0 || removed.length > 0 || changed.length > 0) {\n\t\t\tthis._onDidChangeBreakpoints.fire(Object.freeze({\n\t\t\t\tadded,\n\t\t\t\tremoved,\n\t\t\t\tchanged,\n\t\t\t}));\n\t\t}\n\t}\n\n\tprivate async getSession(dto: IDebugSessionDto): Promise<ExtHostDebugSession> {\n\t\tif (dto) {\n\t\t\tif (typeof dto === 'string') {\n\t\t\t\tconst ds = this._debugSessions.get(dto);\n\t\t\t\tif (ds) {\n\t\t\t\t\treturn ds;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tlet ds = this._debugSessions.get(dto.id);\n\t\t\t\tif (!ds) {\n\t\t\t\t\tconst folder = await this.getFolder(dto.folderUri);\n\t\t\t\t\tconst parent = dto.parent ? this._debugSessions.get(dto.parent) : undefined;\n\t\t\t\t\tds = new ExtHostDebugSession(this._debugServiceProxy, dto.id, dto.type, dto.name, folder, dto.configuration, parent?.api);\n\t\t\t\t\tthis._debugSessions.set(ds.id, ds);\n\t\t\t\t\tthis._debugServiceProxy.$sessionCached(ds.id);\n\t\t\t\t}\n\t\t\t\treturn ds;\n\t\t\t}\n\t\t}\n\t\tthrow new Error('cannot find session');\n\t}\n\n\tprivate getFolder(_folderUri: UriComponents | undefined): Promise<vscode.WorkspaceFolder | undefined> {\n\t\tif (_folderUri) {\n\t\t\tconst folderURI = URI.revive(_folderUri);\n\t\t\treturn this._workspaceService.resolveWorkspaceFolder(folderURI);\n\t\t}\n\t\treturn Promise.resolve(undefined);\n\t}\n\n\tprivate extensionVisKey(extensionId: string, id: string) {\n\t\treturn `${extensionId}\\0${id}`;\n\t}\n\n\tprivate serializeVisualization(extensionId: string, viz: vscode.DebugVisualization['visualization']): MainThreadDebugVisualization | undefined {\n\t\tif (!viz) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\tif ('title' in viz && 'command' in viz) {\n\t\t\treturn { type: DebugVisualizationType.Command };\n\t\t}\n\n\t\tif ('treeId' in viz) {\n\t\t\treturn { type: DebugVisualizationType.Tree, id: `${extensionId}\\0${viz.treeId}` };\n\t\t}\n\n\t\tthrow new Error('Unsupported debug visualization type');\n\t}\n\n\tprivate getIconPathOrClass(icon: vscode.DebugVisualization['iconPath']) {\n\t\tconst iconPathOrIconClass = this.getIconUris(icon);\n\t\tlet iconPath: { dark: URI; light?: URI | undefined } | undefined;\n\t\tlet iconClass: string | undefined;\n\t\tif ('id' in iconPathOrIconClass) {\n\t\t\ticonClass = ThemeIconUtils.asClassName(iconPathOrIconClass);\n\t\t} else {\n\t\t\ticonPath = iconPathOrIconClass;\n\t\t}\n\n\t\treturn {\n\t\t\ticonPath,\n\t\t\ticonClass\n\t\t};\n\t}\n\n\tprivate getIconUris(iconPath: vscode.DebugVisualization['iconPath']): { dark: URI; light?: URI } | { id: string } {\n\t\tif (iconPath instanceof ThemeIcon) {\n\t\t\treturn { id: iconPath.id };\n\t\t}\n\t\tconst dark = typeof iconPath === 'object' && 'dark' in iconPath ? iconPath.dark : iconPath;\n\t\tconst light = typeof iconPath === 'object' && 'light' in iconPath ? iconPath.light : iconPath;\n\t\treturn {\n\t\t\tdark: (typeof dark === 'string' ? URI.file(dark) : dark) as URI,\n\t\t\tlight: (typeof light === 'string' ? URI.file(light) : light) as URI,\n\t\t};\n\t}\n}\n\nexport class ExtHostDebugSession {\n\tprivate apiSession?: vscode.DebugSession;\n\tconstructor(\n\t\tprivate _debugServiceProxy: MainThreadDebugServiceShape,\n\t\tprivate _id: DebugSessionUUID,\n\t\tprivate _type: string,\n\t\tprivate _name: string,\n\t\tprivate _workspaceFolder: vscode.WorkspaceFolder | undefined,\n\t\tprivate _configuration: vscode.DebugConfiguration,\n\t\tprivate _parentSession: vscode.DebugSession | undefined) {\n\t}\n\n\tpublic get api(): vscode.DebugSession {\n\t\tconst that = this;\n\t\treturn this.apiSession ??= Object.freeze({\n\t\t\tid: that._id,\n\t\t\ttype: that._type,\n\t\t\tget name() {\n\t\t\t\treturn that._name;\n\t\t\t},\n\t\t\tset name(name: string) {\n\t\t\t\tthat._name = name;\n\t\t\t\tthat._debugServiceProxy.$setDebugSessionName(that._id, name);\n\t\t\t},\n\t\t\tparentSession: that._parentSession,\n\t\t\tworkspaceFolder: that._workspaceFolder,\n\t\t\tconfiguration: that._configuration,\n\t\t\tcustomRequest(command: string, args: any): Promise<any> {\n\t\t\t\treturn that._debugServiceProxy.$customDebugAdapterRequest(that._id, command, args);\n\t\t\t},\n\t\t\tgetDebugProtocolBreakpoint(breakpoint: vscode.Breakpoint): Promise<vscode.DebugProtocolBreakpoint | undefined> {\n\t\t\t\treturn that._debugServiceProxy.$getDebugProtocolBreakpoint(that._id, breakpoint.id);\n\t\t\t}\n\t\t});\n\t}\n\n\tpublic get id(): string {\n\t\treturn this._id;\n\t}\n\n\tpublic get type(): string {\n\t\treturn this._type;\n\t}\n\n\t_acceptNameChanged(name: string) {\n\t\tthis._name = name;\n\t}\n\n\tpublic get configuration(): vscode.DebugConfiguration {\n\t\treturn this._configuration;\n\t}\n}\n\nexport class ExtHostDebugConsole {\n\n\treadonly value: vscode.DebugConsole;\n\n\tconstructor(proxy: MainThreadDebugServiceShape) {\n\n\t\tthis.value = Object.freeze({\n\t\t\tappend(value: string): void {\n\t\t\t\tproxy.$appendDebugConsole(value);\n\t\t\t},\n\t\t\tappendLine(value: string): void {\n\t\t\t\tthis.append(value + '\\n');\n\t\t\t}\n\t\t});\n\t}\n}\n\ninterface ConfigProviderTuple {\n\ttype: string;\n\thandle: number;\n\tprovider: vscode.DebugConfigurationProvider;\n}\n\ninterface DescriptorFactoryTuple {\n\ttype: string;\n\thandle: number;\n\tfactory: vscode.DebugAdapterDescriptorFactory;\n}\n\ninterface TrackerFactoryTuple {\n\ttype: string;\n\thandle: number;\n\tfactory: vscode.DebugAdapterTrackerFactory;\n}\n\nclass MultiTracker implements vscode.DebugAdapterTracker {\n\n\tconstructor(private trackers: vscode.DebugAdapterTracker[]) {\n\t}\n\n\tonWillStartSession(): void {\n\t\tthis.trackers.forEach(t => t.onWillStartSession ? t.onWillStartSession() : undefined);\n\t}\n\n\tonWillReceiveMessage(message: any): void {\n\t\tthis.trackers.forEach(t => t.onWillReceiveMessage ? t.onWillReceiveMessage(message) : undefined);\n\t}\n\n\tonDidSendMessage(message: any): void {\n\t\tthis.trackers.forEach(t => t.onDidSendMessage ? t.onDidSendMessage(message) : undefined);\n\t}\n\n\tonWillStopSession(): void {\n\t\tthis.trackers.forEach(t => t.onWillStopSession ? t.onWillStopSession() : undefined);\n\t}\n\n\tonError(error: Error): void {\n\t\tthis.trackers.forEach(t => t.onError ? t.onError(error) : undefined);\n\t}\n\n\tonExit(code: number, signal: string): void {\n\t\tthis.trackers.forEach(t => t.onExit ? t.onExit(code, signal) : undefined);\n\t}\n}\n\n/*\n * Call directly into a debug adapter implementation\n */\nclass DirectDebugAdapter extends AbstractDebugAdapter {\n\n\tconstructor(private implementation: vscode.DebugAdapter) {\n\t\tsuper();\n\n\t\timplementation.onDidSendMessage((message: vscode.DebugProtocolMessage) => {\n\t\t\tthis.acceptMessage(message as DebugProtocol.ProtocolMessage);\n\t\t});\n\t}\n\n\tstartSession(): Promise<void> {\n\t\treturn Promise.resolve(undefined);\n\t}\n\n\tsendMessage(message: DebugProtocol.ProtocolMessage): void {\n\t\tthis.implementation.handleMessage(message);\n\t}\n\n\tstopSession(): Promise<void> {\n\t\tthis.implementation.dispose();\n\t\treturn Promise.resolve(undefined);\n\t}\n}\n\n\nexport class WorkerExtHostDebugService extends ExtHostDebugServiceBase {\n\tconstructor(\n\t\t@IExtHostRpcService extHostRpcService: IExtHostRpcService,\n\t\t@IExtHostWorkspace workspaceService: IExtHostWorkspace,\n\t\t@IExtHostExtensionService extensionService: IExtHostExtensionService,\n\t\t@IExtHostConfiguration configurationService: IExtHostConfiguration,\n\t\t@IExtHostEditorTabs editorTabs: IExtHostEditorTabs,\n\t\t@IExtHostVariableResolverProvider variableResolver: IExtHostVariableResolverProvider,\n\t\t@IExtHostCommands commands: IExtHostCommands,\n\t\t@IExtHostTesting testing: IExtHostTesting,\n\t) {\n\t\tsuper(extHostRpcService, workspaceService, extensionService, configurationService, editorTabs, variableResolver, commands, testing);\n\t}\n}\n"],
  "mappings": "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",
  "names": ["id", "extensionRegistry"]
}
