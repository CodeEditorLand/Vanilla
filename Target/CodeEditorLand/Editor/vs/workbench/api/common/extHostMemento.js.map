{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/api/common/extHostMemento.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport type * as vscode from \"vscode\";\nimport {\n\tDeferredPromise,\n\tRunOnceScheduler,\n} from \"../../../base/common/async.js\";\nimport type { IDisposable } from \"../../../base/common/lifecycle.js\";\nimport type { IExtensionDescription } from \"../../../platform/extensions/common/extensions.js\";\nimport type { ExtHostStorage } from \"./extHostStorage.js\";\n\nexport class ExtensionMemento implements vscode.Memento {\n\tprotected readonly _id: string;\n\tprivate readonly _shared: boolean;\n\tprotected readonly _storage: ExtHostStorage;\n\n\tprivate readonly _init: Promise<ExtensionMemento>;\n\tprivate _value?: { [n: string]: any };\n\tprivate readonly _storageListener: IDisposable;\n\n\tprivate _deferredPromises: Map<string, DeferredPromise<void>> = new Map();\n\tprivate _scheduler: RunOnceScheduler;\n\n\tconstructor(id: string, global: boolean, storage: ExtHostStorage) {\n\t\tthis._id = id;\n\t\tthis._shared = global;\n\t\tthis._storage = storage;\n\n\t\tthis._init = this._storage\n\t\t\t.initializeExtensionStorage(\n\t\t\t\tthis._shared,\n\t\t\t\tthis._id,\n\t\t\t\tObject.create(null),\n\t\t\t)\n\t\t\t.then((value) => {\n\t\t\t\tthis._value = value;\n\t\t\t\treturn this;\n\t\t\t});\n\n\t\tthis._storageListener = this._storage.onDidChangeStorage((e) => {\n\t\t\tif (e.shared === this._shared && e.key === this._id) {\n\t\t\t\tthis._value = e.value;\n\t\t\t}\n\t\t});\n\n\t\tthis._scheduler = new RunOnceScheduler(() => {\n\t\t\tconst records = this._deferredPromises;\n\t\t\tthis._deferredPromises = new Map();\n\t\t\t(async () => {\n\t\t\t\ttry {\n\t\t\t\t\tawait this._storage.setValue(\n\t\t\t\t\t\tthis._shared,\n\t\t\t\t\t\tthis._id,\n\t\t\t\t\t\tthis._value!,\n\t\t\t\t\t);\n\t\t\t\t\tfor (const value of records.values()) {\n\t\t\t\t\t\tvalue.complete();\n\t\t\t\t\t}\n\t\t\t\t} catch (e) {\n\t\t\t\t\tfor (const value of records.values()) {\n\t\t\t\t\t\tvalue.error(e);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t})();\n\t\t}, 0);\n\t}\n\n\tkeys(): readonly string[] {\n\t\t// Filter out `undefined` values, as they can stick around in the `_value` until the `onDidChangeStorage` event runs\n\t\treturn Object.entries(this._value ?? {})\n\t\t\t.filter(([, value]) => value !== undefined)\n\t\t\t.map(([key]) => key);\n\t}\n\n\tget whenReady(): Promise<ExtensionMemento> {\n\t\treturn this._init;\n\t}\n\n\tget<T>(key: string): T | undefined;\n\tget<T>(key: string, defaultValue: T): T;\n\tget<T>(key: string, defaultValue?: T): T {\n\t\tlet value = this._value![key];\n\t\tif (typeof value === \"undefined\") {\n\t\t\tvalue = defaultValue;\n\t\t}\n\t\treturn value;\n\t}\n\n\tupdate(key: string, value: any): Promise<void> {\n\t\tthis._value![key] = value;\n\n\t\tconst record = this._deferredPromises.get(key);\n\t\tif (record !== undefined) {\n\t\t\treturn record.p;\n\t\t}\n\n\t\tconst promise = new DeferredPromise<void>();\n\t\tthis._deferredPromises.set(key, promise);\n\n\t\tif (!this._scheduler.isScheduled()) {\n\t\t\tthis._scheduler.schedule();\n\t\t}\n\n\t\treturn promise.p;\n\t}\n\n\tdispose(): void {\n\t\tthis._storageListener.dispose();\n\t}\n}\n\nexport class ExtensionGlobalMemento extends ExtensionMemento {\n\tprivate readonly _extension: IExtensionDescription;\n\n\tsetKeysForSync(keys: string[]): void {\n\t\tthis._storage.registerExtensionStorageKeysToSync(\n\t\t\t{ id: this._id, version: this._extension.version },\n\t\t\tkeys,\n\t\t);\n\t}\n\n\tconstructor(\n\t\textensionDescription: IExtensionDescription,\n\t\tstorage: ExtHostStorage,\n\t) {\n\t\tsuper(extensionDescription.identifier.value, true, storage);\n\t\tthis._extension = extensionDescription;\n\t}\n}\n"],
  "mappings": ";;AAMA;AAAA,EACC;AAAA,EACA;AAAA,OACM;AAKA,MAAM,iBAA2C;AAAA,EAdxD,OAcwD;AAAA;AAAA;AAAA,EACpC;AAAA,EACF;AAAA,EACE;AAAA,EAEF;AAAA,EACT;AAAA,EACS;AAAA,EAET,oBAAwD,oBAAI,IAAI;AAAA,EAChE;AAAA,EAER,YAAY,IAAY,QAAiB,SAAyB;AACjE,SAAK,MAAM;AACX,SAAK,UAAU;AACf,SAAK,WAAW;AAEhB,SAAK,QAAQ,KAAK,SAChB;AAAA,MACA,KAAK;AAAA,MACL,KAAK;AAAA,MACL,uBAAO,OAAO,IAAI;AAAA,IACnB,EACC,KAAK,CAAC,UAAU;AAChB,WAAK,SAAS;AACd,aAAO;AAAA,IACR,CAAC;AAEF,SAAK,mBAAmB,KAAK,SAAS,mBAAmB,CAAC,MAAM;AAC/D,UAAI,EAAE,WAAW,KAAK,WAAW,EAAE,QAAQ,KAAK,KAAK;AACpD,aAAK,SAAS,EAAE;AAAA,MACjB;AAAA,IACD,CAAC;AAED,SAAK,aAAa,IAAI,iBAAiB,MAAM;AAC5C,YAAM,UAAU,KAAK;AACrB,WAAK,oBAAoB,oBAAI,IAAI;AACjC,OAAC,YAAY;AACZ,YAAI;AACH,gBAAM,KAAK,SAAS;AAAA,YACnB,KAAK;AAAA,YACL,KAAK;AAAA,YACL,KAAK;AAAA,UACN;AACA,qBAAW,SAAS,QAAQ,OAAO,GAAG;AACrC,kBAAM,SAAS;AAAA,UAChB;AAAA,QACD,SAAS,GAAG;AACX,qBAAW,SAAS,QAAQ,OAAO,GAAG;AACrC,kBAAM,MAAM,CAAC;AAAA,UACd;AAAA,QACD;AAAA,MACD,GAAG;AAAA,IACJ,GAAG,CAAC;AAAA,EACL;AAAA,EAEA,OAA0B;AAEzB,WAAO,OAAO,QAAQ,KAAK,UAAU,CAAC,CAAC,EACrC,OAAO,CAAC,CAAC,EAAE,KAAK,MAAM,UAAU,MAAS,EACzC,IAAI,CAAC,CAAC,GAAG,MAAM,GAAG;AAAA,EACrB;AAAA,EAEA,IAAI,YAAuC;AAC1C,WAAO,KAAK;AAAA,EACb;AAAA,EAIA,IAAO,KAAa,cAAqB;AACxC,QAAI,QAAQ,KAAK,OAAQ,GAAG;AAC5B,QAAI,OAAO,UAAU,aAAa;AACjC,cAAQ;AAAA,IACT;AACA,WAAO;AAAA,EACR;AAAA,EAEA,OAAO,KAAa,OAA2B;AAC9C,SAAK,OAAQ,GAAG,IAAI;AAEpB,UAAM,SAAS,KAAK,kBAAkB,IAAI,GAAG;AAC7C,QAAI,WAAW,QAAW;AACzB,aAAO,OAAO;AAAA,IACf;AAEA,UAAM,UAAU,IAAI,gBAAsB;AAC1C,SAAK,kBAAkB,IAAI,KAAK,OAAO;AAEvC,QAAI,CAAC,KAAK,WAAW,YAAY,GAAG;AACnC,WAAK,WAAW,SAAS;AAAA,IAC1B;AAEA,WAAO,QAAQ;AAAA,EAChB;AAAA,EAEA,UAAgB;AACf,SAAK,iBAAiB,QAAQ;AAAA,EAC/B;AACD;AAEO,MAAM,+BAA+B,iBAAiB;AAAA,EAlH7D,OAkH6D;AAAA;AAAA;AAAA,EAC3C;AAAA,EAEjB,eAAe,MAAsB;AACpC,SAAK,SAAS;AAAA,MACb,EAAE,IAAI,KAAK,KAAK,SAAS,KAAK,WAAW,QAAQ;AAAA,MACjD;AAAA,IACD;AAAA,EACD;AAAA,EAEA,YACC,sBACA,SACC;AACD,UAAM,qBAAqB,WAAW,OAAO,MAAM,OAAO;AAC1D,SAAK,aAAa;AAAA,EACnB;AACD;",
  "names": []
}
