{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/api/common/extHostDecorations.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport type * as vscode from 'vscode';\nimport { URI } from '../../../base/common/uri.js';\nimport { MainContext, ExtHostDecorationsShape, MainThreadDecorationsShape, DecorationData, DecorationRequest, DecorationReply } from './extHost.protocol.js';\nimport { Disposable, FileDecoration } from './extHostTypes.js';\nimport { CancellationToken } from '../../../base/common/cancellation.js';\nimport { IExtensionDescription } from '../../../platform/extensions/common/extensions.js';\nimport { createDecorator } from '../../../platform/instantiation/common/instantiation.js';\nimport { IExtHostRpcService } from './extHostRpcService.js';\nimport { ILogService } from '../../../platform/log/common/log.js';\nimport { asArray, groupBy } from '../../../base/common/arrays.js';\nimport { compare, count } from '../../../base/common/strings.js';\nimport { dirname } from '../../../base/common/path.js';\nimport { checkProposedApiEnabled } from '../../services/extensions/common/extensions.js';\n\ninterface ProviderData {\n\tprovider: vscode.FileDecorationProvider;\n\textensionDescription: IExtensionDescription;\n}\n\nexport class ExtHostDecorations implements ExtHostDecorationsShape {\n\n\tprivate static _handlePool = 0;\n\tprivate static _maxEventSize = 250;\n\n\treadonly _serviceBrand: undefined;\n\tprivate readonly _provider = new Map<number, ProviderData>();\n\tprivate readonly _proxy: MainThreadDecorationsShape;\n\n\tconstructor(\n\t\t@IExtHostRpcService extHostRpc: IExtHostRpcService,\n\t\t@ILogService private readonly _logService: ILogService,\n\t) {\n\t\tthis._proxy = extHostRpc.getProxy(MainContext.MainThreadDecorations);\n\t}\n\n\tregisterFileDecorationProvider(provider: vscode.FileDecorationProvider, extensionDescription: IExtensionDescription): vscode.Disposable {\n\t\tconst handle = ExtHostDecorations._handlePool++;\n\t\tthis._provider.set(handle, { provider, extensionDescription });\n\t\tthis._proxy.$registerDecorationProvider(handle, extensionDescription.identifier.value);\n\n\t\tconst listener = provider.onDidChangeFileDecorations && provider.onDidChangeFileDecorations(e => {\n\t\t\tif (!e) {\n\t\t\t\tthis._proxy.$onDidChange(handle, null);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst array = asArray(e);\n\t\t\tif (array.length <= ExtHostDecorations._maxEventSize) {\n\t\t\t\tthis._proxy.$onDidChange(handle, array);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// too many resources per event. pick one resource per folder, starting\n\t\t\t// with parent folders\n\t\t\tthis._logService.warn('[Decorations] CAPPING events from decorations provider', extensionDescription.identifier.value, array.length);\n\t\t\tconst mapped = array.map(uri => ({ uri, rank: count(uri.path, '/') }));\n\t\t\tconst groups = groupBy(mapped, (a, b) => a.rank - b.rank || compare(a.uri.path, b.uri.path));\n\t\t\tconst picked: URI[] = [];\n\t\t\touter: for (const uris of groups) {\n\t\t\t\tlet lastDirname: string | undefined;\n\t\t\t\tfor (const obj of uris) {\n\t\t\t\t\tconst myDirname = dirname(obj.uri.path);\n\t\t\t\t\tif (lastDirname !== myDirname) {\n\t\t\t\t\t\tlastDirname = myDirname;\n\t\t\t\t\t\tif (picked.push(obj.uri) >= ExtHostDecorations._maxEventSize) {\n\t\t\t\t\t\t\tbreak outer;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis._proxy.$onDidChange(handle, picked);\n\t\t});\n\n\t\treturn new Disposable(() => {\n\t\t\tlistener?.dispose();\n\t\t\tthis._proxy.$unregisterDecorationProvider(handle);\n\t\t\tthis._provider.delete(handle);\n\t\t});\n\t}\n\n\tasync $provideDecorations(handle: number, requests: DecorationRequest[], token: CancellationToken): Promise<DecorationReply> {\n\n\t\tif (!this._provider.has(handle)) {\n\t\t\t// might have been unregistered in the meantime\n\t\t\treturn Object.create(null);\n\t\t}\n\n\t\tconst result: DecorationReply = Object.create(null);\n\t\tconst { provider, extensionDescription: extensionId } = this._provider.get(handle)!;\n\n\t\tawait Promise.all(requests.map(async request => {\n\t\t\ttry {\n\t\t\t\tconst { uri, id } = request;\n\t\t\t\tconst data = await Promise.resolve(provider.provideFileDecoration(URI.revive(uri), token));\n\t\t\t\tif (!data) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\ttry {\n\t\t\t\t\tFileDecoration.validate(data);\n\t\t\t\t\tif (data.badge && typeof data.badge !== 'string') {\n\t\t\t\t\t\tcheckProposedApiEnabled(extensionId, 'codiconDecoration');\n\t\t\t\t\t}\n\t\t\t\t\tresult[id] = <DecorationData>[data.propagate, data.tooltip, data.badge, data.color];\n\t\t\t\t} catch (e) {\n\t\t\t\t\tthis._logService.warn(`INVALID decoration from extension '${extensionId.identifier.value}': ${e}`);\n\t\t\t\t}\n\t\t\t} catch (err) {\n\t\t\t\tthis._logService.error(err);\n\t\t\t}\n\t\t}));\n\n\t\treturn result;\n\t}\n}\n\nexport const IExtHostDecorations = createDecorator<IExtHostDecorations>('IExtHostDecorations');\nexport interface IExtHostDecorations extends ExtHostDecorations { }\n"],
  "mappings": "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",
  "names": []
}
