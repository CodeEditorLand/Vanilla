{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/api/common/extHostStorage.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { MainContext, MainThreadStorageShape, ExtHostStorageShape } from './extHost.protocol.js';\nimport { Emitter } from '../../../base/common/event.js';\nimport { IExtHostRpcService } from './extHostRpcService.js';\nimport { createDecorator } from '../../../platform/instantiation/common/instantiation.js';\nimport { IExtensionIdWithVersion } from '../../../platform/extensionManagement/common/extensionStorage.js';\nimport { ILogService } from '../../../platform/log/common/log.js';\n\nexport interface IStorageChangeEvent {\n\tshared: boolean;\n\tkey: string;\n\tvalue: object;\n}\n\nexport class ExtHostStorage implements ExtHostStorageShape {\n\n\treadonly _serviceBrand: undefined;\n\n\tprivate _proxy: MainThreadStorageShape;\n\n\tprivate readonly _onDidChangeStorage = new Emitter<IStorageChangeEvent>();\n\treadonly onDidChangeStorage = this._onDidChangeStorage.event;\n\n\tconstructor(\n\t\tmainContext: IExtHostRpcService,\n\t\tprivate readonly _logService: ILogService\n\t) {\n\t\tthis._proxy = mainContext.getProxy(MainContext.MainThreadStorage);\n\t}\n\n\tregisterExtensionStorageKeysToSync(extension: IExtensionIdWithVersion, keys: string[]): void {\n\t\tthis._proxy.$registerExtensionStorageKeysToSync(extension, keys);\n\t}\n\n\tasync initializeExtensionStorage(shared: boolean, key: string, defaultValue?: object): Promise<object | undefined> {\n\t\tconst value = await this._proxy.$initializeExtensionStorage(shared, key);\n\n\t\tlet parsedValue: object | undefined;\n\t\tif (value) {\n\t\t\tparsedValue = this.safeParseValue(shared, key, value);\n\t\t}\n\n\t\treturn parsedValue || defaultValue;\n\t}\n\n\tsetValue(shared: boolean, key: string, value: object): Promise<void> {\n\t\treturn this._proxy.$setValue(shared, key, value);\n\t}\n\n\t$acceptValue(shared: boolean, key: string, value: string): void {\n\t\tconst parsedValue = this.safeParseValue(shared, key, value);\n\t\tif (parsedValue) {\n\t\t\tthis._onDidChangeStorage.fire({ shared, key, value: parsedValue });\n\t\t}\n\t}\n\n\tprivate safeParseValue(shared: boolean, key: string, value: string): object | undefined {\n\t\ttry {\n\t\t\treturn JSON.parse(value);\n\t\t} catch (error) {\n\t\t\t// Do not fail this call but log it for diagnostics\n\t\t\t// https://github.com/microsoft/vscode/issues/132777\n\t\t\tthis._logService.error(`[extHostStorage] unexpected error parsing storage contents (extensionId: ${key}, global: ${shared}): ${error}`);\n\t\t}\n\n\t\treturn undefined;\n\t}\n}\n\nexport interface IExtHostStorage extends ExtHostStorage { }\nexport const IExtHostStorage = createDecorator<IExtHostStorage>('IExtHostStorage');\n"],
  "mappings": ";;AAKA,SAAS,aAAa,wBAAwB,2BAA2B;AACzE,SAAS,eAAe;AACxB,SAAS,0BAA0B;AACnC,SAAS,uBAAuB;AAChC,SAAS,+BAA+B;AACxC,SAAS,mBAAmB;AAQrB,MAAM,eAA8C;AAAA,EAS1D,YACC,aACiB,aAChB;AADgB;AAEjB,SAAK,SAAS,YAAY,SAAS,YAAY,iBAAiB;AAAA,EACjE;AAAA,EAhCD,OAkB2D;AAAA;AAAA;AAAA,EAEjD;AAAA,EAED;AAAA,EAES,sBAAsB,IAAI,QAA6B;AAAA,EAC/D,qBAAqB,KAAK,oBAAoB;AAAA,EASvD,mCAAmC,WAAoC,MAAsB;AAC5F,SAAK,OAAO,oCAAoC,WAAW,IAAI;AAAA,EAChE;AAAA,EAEA,MAAM,2BAA2B,QAAiB,KAAa,cAAoD;AAClH,UAAM,QAAQ,MAAM,KAAK,OAAO,4BAA4B,QAAQ,GAAG;AAEvE,QAAI;AACJ,QAAI,OAAO;AACV,oBAAc,KAAK,eAAe,QAAQ,KAAK,KAAK;AAAA,IACrD;AAEA,WAAO,eAAe;AAAA,EACvB;AAAA,EAEA,SAAS,QAAiB,KAAa,OAA8B;AACpE,WAAO,KAAK,OAAO,UAAU,QAAQ,KAAK,KAAK;AAAA,EAChD;AAAA,EAEA,aAAa,QAAiB,KAAa,OAAqB;AAC/D,UAAM,cAAc,KAAK,eAAe,QAAQ,KAAK,KAAK;AAC1D,QAAI,aAAa;AAChB,WAAK,oBAAoB,KAAK,EAAE,QAAQ,KAAK,OAAO,YAAY,CAAC;AAAA,IAClE;AAAA,EACD;AAAA,EAEQ,eAAe,QAAiB,KAAa,OAAmC;AACvF,QAAI;AACH,aAAO,KAAK,MAAM,KAAK;AAAA,IACxB,SAAS,OAAO;AAGf,WAAK,YAAY,MAAM,4EAA4E,GAAG,aAAa,MAAM,MAAM,KAAK,EAAE;AAAA,IACvI;AAEA,WAAO;AAAA,EACR;AACD;AAGO,MAAM,kBAAkB,gBAAiC,iBAAiB;",
  "names": []
}
