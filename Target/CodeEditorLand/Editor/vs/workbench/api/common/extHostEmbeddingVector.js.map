{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/api/common/extHostEmbeddingVector.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport type { CancellationToken, EmbeddingVectorProvider } from \"vscode\";\nimport type { IExtensionDescription } from \"../../../platform/extensions/common/extensions.js\";\nimport {\n\ttype ExtHostAiEmbeddingVectorShape,\n\ttype IMainContext,\n\tMainContext,\n\ttype MainThreadAiEmbeddingVectorShape,\n} from \"./extHost.protocol.js\";\nimport { Disposable } from \"./extHostTypes.js\";\n\nexport class ExtHostAiEmbeddingVector implements ExtHostAiEmbeddingVectorShape {\n\tprivate _AiEmbeddingVectorProviders: Map<number, EmbeddingVectorProvider> =\n\t\tnew Map();\n\tprivate _nextHandle = 0;\n\n\tprivate readonly _proxy: MainThreadAiEmbeddingVectorShape;\n\n\tconstructor(mainContext: IMainContext) {\n\t\tthis._proxy = mainContext.getProxy(\n\t\t\tMainContext.MainThreadAiEmbeddingVector,\n\t\t);\n\t}\n\n\tasync $provideAiEmbeddingVector(\n\t\thandle: number,\n\t\tstrings: string[],\n\t\ttoken: CancellationToken,\n\t): Promise<number[][]> {\n\t\tif (this._AiEmbeddingVectorProviders.size === 0) {\n\t\t\tthrow new Error(\"No embedding vector providers registered\");\n\t\t}\n\n\t\tconst provider = this._AiEmbeddingVectorProviders.get(handle);\n\t\tif (!provider) {\n\t\t\tthrow new Error(\"Embedding vector provider not found\");\n\t\t}\n\n\t\tconst result = await provider.provideEmbeddingVector(strings, token);\n\t\tif (!result) {\n\t\t\tthrow new Error(\"Embedding vector provider returned undefined\");\n\t\t}\n\t\treturn result;\n\t}\n\n\tregisterEmbeddingVectorProvider(\n\t\textension: IExtensionDescription,\n\t\tmodel: string,\n\t\tprovider: EmbeddingVectorProvider,\n\t): Disposable {\n\t\tconst handle = this._nextHandle;\n\t\tthis._nextHandle++;\n\t\tthis._AiEmbeddingVectorProviders.set(handle, provider);\n\t\tthis._proxy.$registerAiEmbeddingVectorProvider(model, handle);\n\t\treturn new Disposable(() => {\n\t\t\tthis._proxy.$unregisterAiEmbeddingVectorProvider(handle);\n\t\t\tthis._AiEmbeddingVectorProviders.delete(handle);\n\t\t});\n\t}\n}\n"],
  "mappings": ";;AAOA;AAAA,EAGC;AAAA,OAEM;AACP,SAAS,kBAAkB;AAEpB,MAAM,yBAAkE;AAAA,EAf/E,OAe+E;AAAA;AAAA;AAAA,EACtE,8BACP,oBAAI,IAAI;AAAA,EACD,cAAc;AAAA,EAEL;AAAA,EAEjB,YAAY,aAA2B;AACtC,SAAK,SAAS,YAAY;AAAA,MACzB,YAAY;AAAA,IACb;AAAA,EACD;AAAA,EAEA,MAAM,0BACL,QACA,SACA,OACsB;AACtB,QAAI,KAAK,4BAA4B,SAAS,GAAG;AAChD,YAAM,IAAI,MAAM,0CAA0C;AAAA,IAC3D;AAEA,UAAM,WAAW,KAAK,4BAA4B,IAAI,MAAM;AAC5D,QAAI,CAAC,UAAU;AACd,YAAM,IAAI,MAAM,qCAAqC;AAAA,IACtD;AAEA,UAAM,SAAS,MAAM,SAAS,uBAAuB,SAAS,KAAK;AACnE,QAAI,CAAC,QAAQ;AACZ,YAAM,IAAI,MAAM,8CAA8C;AAAA,IAC/D;AACA,WAAO;AAAA,EACR;AAAA,EAEA,gCACC,WACA,OACA,UACa;AACb,UAAM,SAAS,KAAK;AACpB,SAAK;AACL,SAAK,4BAA4B,IAAI,QAAQ,QAAQ;AACrD,SAAK,OAAO,mCAAmC,OAAO,MAAM;AAC5D,WAAO,IAAI,WAAW,MAAM;AAC3B,WAAK,OAAO,qCAAqC,MAAM;AACvD,WAAK,4BAA4B,OAAO,MAAM;AAAA,IAC/C,CAAC;AAAA,EACF;AACD;",
  "names": []
}
