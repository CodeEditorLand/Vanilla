import*as e from"../../../nls.js";import*as m from"../../../base/common/objects.js";import{Registry as h}from"../../../platform/registry/common/platform.js";import{ExtensionsRegistry as I}from"../../services/extensions/common/extensionsRegistry.js";import{Extensions as D,validateProperty as z,ConfigurationScope as u,OVERRIDE_PROPERTY_REGEX as S,configurationDefaultsSchemaId as E,getDefaultValue as N,getAllConfigurationProperties as x,parseScope as R}from"../../../platform/configuration/common/configurationRegistry.js";import{Extensions as O}from"../../../platform/jsonschemas/common/jsonContributionRegistry.js";import{workspaceSettingsSchemaId as P,launchSchemaId as j,tasksSchemaId as A}from"../../services/configuration/common/configuration.js";import{isObject as T,isUndefined as M}from"../../../base/common/types.js";import{ExtensionIdentifierMap as W}from"../../../platform/extensions/common/extensions.js";import{Extensions as U}from"../../services/extensionManagement/common/extensionFeatures.js";import{Disposable as $}from"../../../base/common/lifecycle.js";import{SyncDescriptor as F}from"../../../platform/instantiation/common/descriptors.js";import{MarkdownString as y}from"../../../base/common/htmlContent.js";const J=h.as(O.JSONContribution),g=h.as(D.Configuration),v={type:"object",defaultSnippets:[{body:{title:"",properties:{}}}],properties:{title:{description:e.localize("vscode.extension.contributes.configuration.title","A title for the current category of settings. This label will be rendered in the Settings editor as a subheading. If the title is the same as the extension display name, then the category will be grouped under the main extension heading."),type:"string"},order:{description:e.localize("vscode.extension.contributes.configuration.order","When specified, gives the order of this category of settings relative to other categories."),type:"integer"},properties:{description:e.localize("vscode.extension.contributes.configuration.properties","Description of the configuration properties."),type:"object",propertyNames:{pattern:"\\S+",patternErrorMessage:e.localize("vscode.extension.contributes.configuration.property.empty","Property should not be empty.")},additionalProperties:{anyOf:[{title:e.localize("vscode.extension.contributes.configuration.properties.schema","Schema of the configuration property."),$ref:"http://json-schema.org/draft-07/schema#"},{type:"object",properties:{scope:{type:"string",enum:["application","machine","window","resource","language-overridable","machine-overridable"],default:"window",enumDescriptions:[e.localize("scope.application.description","Configuration that can be configured only in the user settings."),e.localize("scope.machine.description","Configuration that can be configured only in the user settings or only in the remote settings."),e.localize("scope.window.description","Configuration that can be configured in the user, remote or workspace settings."),e.localize("scope.resource.description","Configuration that can be configured in the user, remote, workspace or folder settings."),e.localize("scope.language-overridable.description","Resource configuration that can be configured in language specific settings."),e.localize("scope.machine-overridable.description","Machine configuration that can be configured also in workspace or folder settings.")],markdownDescription:e.localize("scope.description","Scope in which the configuration is applicable. Available scopes are `application`, `machine`, `window`, `resource`, and `machine-overridable`.")},enumDescriptions:{type:"array",items:{type:"string"},description:e.localize("scope.enumDescriptions","Descriptions for enum values")},markdownEnumDescriptions:{type:"array",items:{type:"string"},description:e.localize("scope.markdownEnumDescriptions","Descriptions for enum values in the markdown format.")},enumItemLabels:{type:"array",items:{type:"string"},markdownDescription:e.localize("scope.enumItemLabels","Labels for enum values to be displayed in the Settings editor. When specified, the {0} values still show after the labels, but less prominently.","`enum`")},markdownDescription:{type:"string",description:e.localize("scope.markdownDescription","The description in the markdown format.")},deprecationMessage:{type:"string",description:e.localize("scope.deprecationMessage","If set, the property is marked as deprecated and the given message is shown as an explanation.")},markdownDeprecationMessage:{type:"string",description:e.localize("scope.markdownDeprecationMessage","If set, the property is marked as deprecated and the given message is shown as an explanation in the markdown format.")},editPresentation:{type:"string",enum:["singlelineText","multilineText"],enumDescriptions:[e.localize("scope.singlelineText.description","The value will be shown in an inputbox."),e.localize("scope.multilineText.description","The value will be shown in a textarea.")],default:"singlelineText",description:e.localize("scope.editPresentation","When specified, controls the presentation format of the string setting.")},order:{type:"integer",description:e.localize("scope.order","When specified, gives the order of this setting relative to other settings within the same category. Settings with an order property will be placed before settings without this property set.")},ignoreSync:{type:"boolean",description:e.localize("scope.ignoreSync","When enabled, Settings Sync will not sync the user value of this configuration by default.")}}}]}}}};let a;const k=I.registerExtensionPoint({extensionPoint:"configurationDefaults",jsonSchema:{$ref:E}});k.setHandler((w,{added:c,removed:d})=>{a&&g.deltaConfiguration(a);const r=a={};if(queueMicrotask(()=>{a===r&&(g.deltaConfiguration(a),a=void 0)}),d.length){const p=d.map(l=>({overrides:m.deepClone(l.value),source:{id:l.description.identifier.value,displayName:l.description.displayName}}));a.removedDefaults=p}if(c.length){const p=g.getConfigurationProperties(),l=[u.MACHINE_OVERRIDABLE,u.WINDOW,u.RESOURCE,u.LANGUAGE_OVERRIDABLE],n=c.map(i=>{const o=m.deepClone(i.value);for(const s of Object.keys(o)){const t=p[s];if(t?.disallowConfigurationDefault){i.collector.warn(e.localize("config.property.preventDefaultConfiguration.warning","Cannot register configuration defaults for '{0}'. This setting does not allow contributing configuration defaults.",s)),delete o[s];continue}if(!S.test(s)&&t?.scope&&!l.includes(t.scope)){i.collector.warn(e.localize("config.property.defaultConfiguration.warning","Cannot register configuration defaults for '{0}'. Only defaults for machine-overridable, window, resource and language overridable scoped settings are supported.",s)),delete o[s];continue}}return{overrides:o,source:{id:i.description.identifier.value,displayName:i.description.displayName}}});a.addedDefaults=n}});const L=I.registerExtensionPoint({extensionPoint:"configuration",deps:[k],jsonSchema:{description:e.localize("vscode.extension.contributes.configuration","Contributes configuration settings."),oneOf:[v,{type:"array",items:v}]}}),b=new W;L.setHandler((w,{added:c,removed:d})=>{if(a??={},d.length){const n=[];for(const i of d)n.push(...b.get(i.description.identifier)||[]),b.delete(i.description.identifier);a.removedConfigurations=n}const r=new Set;function p(n,i){const o=m.deepClone(n);return o.title&&typeof o.title!="string"&&i.collector.error(e.localize("invalid.title","'configuration.title' must be a string")),l(o,i),o.id=n.id||i.description.identifier.value,o.extensionInfo={id:i.description.identifier.value,displayName:i.description.displayName},o.restrictedProperties=i.description.capabilities?.untrustedWorkspaces?.supported==="limited"?i.description.capabilities?.untrustedWorkspaces.restrictedConfigurations:void 0,o.title=o.title||i.description.displayName||i.description.identifier.value,o}function l(n,i){const o=n.properties;if(o){typeof o!="object"&&(i.collector.error(e.localize("invalid.properties","'configuration.properties' must be an object")),n.properties={});for(const t in o){const f=o[t],C=z(t,f);if(C){delete o[t],i.collector.warn(C);continue}if(r.has(t)){delete o[t],i.collector.warn(e.localize("config.property.duplicate","Cannot register '{0}'. This property is already registered.",t));continue}if(!T(f)){delete o[t],i.collector.error(e.localize("invalid.property","configuration.properties property '{0}' must be an object",t));continue}r.add(t),f.scope=f.scope?R(f.scope.toString()):u.WINDOW}}const s=n.allOf;if(s){i.collector.error(e.localize("invalid.allOf","'configuration.allOf' is deprecated and should no longer be used. Instead, pass multiple configuration sections as an array to the 'configuration' contribution point."));for(const t of s)l(t,i)}}if(c.length){const n=[];for(const i of c){const o=[],s=i.value;Array.isArray(s)?s.forEach(t=>o.push(p(t,i))):o.push(p(s,i)),b.set(i.description.identifier,o),n.push(...o)}a.addedConfigurations=n}g.deltaConfiguration(a),a=void 0}),J.registerSchema("vscode://schemas/workspaceConfig",{allowComments:!0,allowTrailingCommas:!0,default:{folders:[{path:""}],settings:{}},required:["folders"],properties:{folders:{minItems:0,uniqueItems:!0,description:e.localize("workspaceConfig.folders.description","List of folders to be loaded in the workspace."),items:{type:"object",defaultSnippets:[{body:{path:"$1"}}],oneOf:[{properties:{path:{type:"string",description:e.localize("workspaceConfig.path.description","A file path. e.g. `/root/folderA` or `./folderA` for a relative path that will be resolved against the location of the workspace file.")},name:{type:"string",description:e.localize("workspaceConfig.name.description","An optional name for the folder. ")}},required:["path"]},{properties:{uri:{type:"string",description:e.localize("workspaceConfig.uri.description","URI of the folder")},name:{type:"string",description:e.localize("workspaceConfig.name.description","An optional name for the folder. ")}},required:["uri"]}]}},settings:{type:"object",default:{},description:e.localize("workspaceConfig.settings.description","Workspace settings"),$ref:P},launch:{type:"object",default:{configurations:[],compounds:[]},description:e.localize("workspaceConfig.launch.description","Workspace launch configurations"),$ref:j},tasks:{type:"object",default:{version:"2.0.0",tasks:[]},description:e.localize("workspaceConfig.tasks.description","Workspace task configurations"),$ref:A},extensions:{type:"object",default:{},description:e.localize("workspaceConfig.extensions.description","Workspace extensions"),$ref:"vscode://schemas/extensions"},remoteAuthority:{type:"string",doNotSuggest:!0,description:e.localize("workspaceConfig.remoteAuthority","The remote server where the workspace is located.")},transient:{type:"boolean",doNotSuggest:!0,description:e.localize("workspaceConfig.transient","A transient workspace will disappear when restarting or reloading.")}},errorMessage:e.localize("unknownWorkspaceProperty","Unknown workspace configuration property")});class q extends ${type="table";shouldRender(c){return!!c.contributes?.configuration}render(c){const d=c.contributes?.configuration?Array.isArray(c.contributes.configuration)?c.contributes.configuration:[c.contributes.configuration]:[],r=x(d),p=r?Object.keys(r):[],l=[e.localize("setting name","ID"),e.localize("description","Description"),e.localize("default","Default")],n=p.sort((i,o)=>i.localeCompare(o)).map(i=>[new y().appendMarkdown(`\`${i}\``),r[i].markdownDescription?new y(r[i].markdownDescription,!1):r[i].description??"",new y().appendCodeblock("json",JSON.stringify(M(r[i].default)?N(r[i].type):r[i].default,null,2))]);return{data:{headers:l,rows:n},dispose:()=>{}}}}h.as(U.ExtensionFeaturesRegistry).registerExtensionFeature({id:"configuration",label:e.localize("settings","Settings"),access:{canToggle:!1},renderer:new F(q)});
