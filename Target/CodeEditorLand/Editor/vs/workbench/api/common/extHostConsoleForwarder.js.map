{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/api/common/extHostConsoleForwarder.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IStackArgument } from '../../../base/common/console.js';\nimport { safeStringify } from '../../../base/common/objects.js';\nimport { MainContext, MainThreadConsoleShape } from './extHost.protocol.js';\nimport { IExtHostInitDataService } from './extHostInitDataService.js';\nimport { IExtHostRpcService } from './extHostRpcService.js';\n\nexport abstract class AbstractExtHostConsoleForwarder {\n\n\tprivate readonly _mainThreadConsole: MainThreadConsoleShape;\n\tprivate readonly _includeStack: boolean;\n\tprivate readonly _logNative: boolean;\n\n\tconstructor(\n\t\t@IExtHostRpcService extHostRpc: IExtHostRpcService,\n\t\t@IExtHostInitDataService initData: IExtHostInitDataService,\n\t) {\n\t\tthis._mainThreadConsole = extHostRpc.getProxy(MainContext.MainThreadConsole);\n\t\tthis._includeStack = initData.consoleForward.includeStack;\n\t\tthis._logNative = initData.consoleForward.logNative;\n\n\t\t// Pass console logging to the outside so that we have it in the main side if told so\n\t\tthis._wrapConsoleMethod('info', 'log');\n\t\tthis._wrapConsoleMethod('log', 'log');\n\t\tthis._wrapConsoleMethod('warn', 'warn');\n\t\tthis._wrapConsoleMethod('debug', 'debug');\n\t\tthis._wrapConsoleMethod('error', 'error');\n\t}\n\n\t/**\n\t * Wraps a console message so that it is transmitted to the renderer. If\n\t * native logging is turned on, the original console message will be written\n\t * as well. This is needed since the console methods are \"magic\" in V8 and\n\t * are the only methods that allow later introspection of logged variables.\n\t *\n\t * The wrapped property is not defined with `writable: false` to avoid\n\t * throwing errors, but rather a no-op setting. See https://github.com/microsoft/vscode-extension-telemetry/issues/88\n\t */\n\tprivate _wrapConsoleMethod(method: 'log' | 'info' | 'warn' | 'error' | 'debug', severity: 'log' | 'warn' | 'error' | 'debug') {\n\t\tconst that = this;\n\t\tconst original = console[method];\n\n\t\tObject.defineProperty(console, method, {\n\t\t\tset: () => { },\n\t\t\tget: () => function () {\n\t\t\t\tthat._handleConsoleCall(method, severity, original, arguments);\n\t\t\t},\n\t\t});\n\t}\n\n\tprivate _handleConsoleCall(method: 'log' | 'info' | 'warn' | 'error' | 'debug', severity: 'log' | 'warn' | 'error' | 'debug', original: (...args: any[]) => void, args: IArguments): void {\n\t\tthis._mainThreadConsole.$logExtensionHostMessage({\n\t\t\ttype: '__$console',\n\t\t\tseverity,\n\t\t\targuments: safeStringifyArgumentsToArray(args, this._includeStack)\n\t\t});\n\t\tif (this._logNative) {\n\t\t\tthis._nativeConsoleLogMessage(method, original, args);\n\t\t}\n\t}\n\n\tprotected abstract _nativeConsoleLogMessage(method: 'log' | 'info' | 'warn' | 'error' | 'debug', original: (...args: any[]) => void, args: IArguments): void;\n\n}\n\nconst MAX_LENGTH = 100000;\n\n/**\n * Prevent circular stringify and convert arguments to real array\n */\nfunction safeStringifyArgumentsToArray(args: IArguments, includeStack: boolean): string {\n\tconst argsArray = [];\n\n\t// Massage some arguments with special treatment\n\tif (args.length) {\n\t\tfor (let i = 0; i < args.length; i++) {\n\t\t\tlet arg = args[i];\n\n\t\t\t// Any argument of type 'undefined' needs to be specially treated because\n\t\t\t// JSON.stringify will simply ignore those. We replace them with the string\n\t\t\t// 'undefined' which is not 100% right, but good enough to be logged to console\n\t\t\tif (typeof arg === 'undefined') {\n\t\t\t\targ = 'undefined';\n\t\t\t}\n\n\t\t\t// Any argument that is an Error will be changed to be just the error stack/message\n\t\t\t// itself because currently cannot serialize the error over entirely.\n\t\t\telse if (arg instanceof Error) {\n\t\t\t\tconst errorObj = arg;\n\t\t\t\tif (errorObj.stack) {\n\t\t\t\t\targ = errorObj.stack;\n\t\t\t\t} else {\n\t\t\t\t\targ = errorObj.toString();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\targsArray.push(arg);\n\t\t}\n\t}\n\n\t// Add the stack trace as payload if we are told so. We remove the message and the 2 top frames\n\t// to start the stacktrace where the console message was being written\n\tif (includeStack) {\n\t\tconst stack = new Error().stack;\n\t\tif (stack) {\n\t\t\targsArray.push({ __$stack: stack.split('\\n').slice(3).join('\\n') } satisfies IStackArgument);\n\t\t}\n\t}\n\n\ttry {\n\t\tconst res = safeStringify(argsArray);\n\n\t\tif (res.length > MAX_LENGTH) {\n\t\t\treturn 'Output omitted for a large object that exceeds the limits';\n\t\t}\n\n\t\treturn res;\n\t} catch (error) {\n\t\treturn `Output omitted for an object that cannot be inspected ('${error.toString()}')`;\n\t}\n}\n"],
  "mappings": ";;;;;;;;;;;;AAKA,SAAS,sBAAsB;AAC/B,SAAS,qBAAqB;AAC9B,SAAS,aAAa,8BAA8B;AACpD,SAAS,+BAA+B;AACxC,SAAS,0BAA0B;AAE5B,IAAe,kCAAf,MAA+C;AAAA,EAXtD,OAWsD;AAAA;AAAA;AAAA,EAEpC;AAAA,EACA;AAAA,EACA;AAAA,EAEjB,YACqB,YACK,UACxB;AACD,SAAK,qBAAqB,WAAW,SAAS,YAAY,iBAAiB;AAC3E,SAAK,gBAAgB,SAAS,eAAe;AAC7C,SAAK,aAAa,SAAS,eAAe;AAG1C,SAAK,mBAAmB,QAAQ,KAAK;AACrC,SAAK,mBAAmB,OAAO,KAAK;AACpC,SAAK,mBAAmB,QAAQ,MAAM;AACtC,SAAK,mBAAmB,SAAS,OAAO;AACxC,SAAK,mBAAmB,SAAS,OAAO;AAAA,EACzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAWQ,mBAAmB,QAAqD,UAA8C;AAC7H,UAAM,OAAO;AACb,UAAM,WAAW,QAAQ,MAAM;AAE/B,WAAO,eAAe,SAAS,QAAQ;AAAA,MACtC,KAAK,6BAAM;AAAA,MAAE,GAAR;AAAA,MACL,KAAK,6BAAM,WAAY;AACtB,aAAK,mBAAmB,QAAQ,UAAU,UAAU,SAAS;AAAA,MAC9D,GAFK;AAAA,IAGN,CAAC;AAAA,EACF;AAAA,EAEQ,mBAAmB,QAAqD,UAA8C,UAAoC,MAAwB;AACzL,SAAK,mBAAmB,yBAAyB;AAAA,MAChD,MAAM;AAAA,MACN;AAAA,MACA,WAAW,8BAA8B,MAAM,KAAK,aAAa;AAAA,IAClE,CAAC;AACD,QAAI,KAAK,YAAY;AACpB,WAAK,yBAAyB,QAAQ,UAAU,IAAI;AAAA,IACrD;AAAA,EACD;AAID;AAxDsB,kCAAf;AAAA,EAOJ;AAAA,EACA;AAAA,GARmB;AA0DtB,MAAM,aAAa;AAKnB,SAAS,8BAA8B,MAAkB,cAA+B;AACvF,QAAM,YAAY,CAAC;AAGnB,MAAI,KAAK,QAAQ;AAChB,aAAS,IAAI,GAAG,IAAI,KAAK,QAAQ,KAAK;AACrC,UAAI,MAAM,KAAK,CAAC;AAKhB,UAAI,OAAO,QAAQ,aAAa;AAC/B,cAAM;AAAA,MACP,WAIS,eAAe,OAAO;AAC9B,cAAM,WAAW;AACjB,YAAI,SAAS,OAAO;AACnB,gBAAM,SAAS;AAAA,QAChB,OAAO;AACN,gBAAM,SAAS,SAAS;AAAA,QACzB;AAAA,MACD;AAEA,gBAAU,KAAK,GAAG;AAAA,IACnB;AAAA,EACD;AAIA,MAAI,cAAc;AACjB,UAAM,QAAQ,IAAI,MAAM,EAAE;AAC1B,QAAI,OAAO;AACV,gBAAU,KAAK,EAAE,UAAU,MAAM,MAAM,IAAI,EAAE,MAAM,CAAC,EAAE,KAAK,IAAI,EAAE,CAA0B;AAAA,IAC5F;AAAA,EACD;AAEA,MAAI;AACH,UAAM,MAAM,cAAc,SAAS;AAEnC,QAAI,IAAI,SAAS,YAAY;AAC5B,aAAO;AAAA,IACR;AAEA,WAAO;AAAA,EACR,SAAS,OAAO;AACf,WAAO,2DAA2D,MAAM,SAAS,CAAC;AAAA,EACnF;AACD;AAlDS;",
  "names": []
}
