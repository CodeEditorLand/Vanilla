{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/api/common/extHostTerminalService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport type * as vscode from \"vscode\";\nimport { Promises } from \"../../../base/common/async.js\";\nimport { CancellationTokenSource } from \"../../../base/common/cancellation.js\";\nimport { NotSupportedError } from \"../../../base/common/errors.js\";\nimport { Emitter, type Event } from \"../../../base/common/event.js\";\nimport {\n\tDisposable,\n\tDisposableStore,\n\ttype IDisposable,\n\tMutableDisposable,\n} from \"../../../base/common/lifecycle.js\";\nimport { MarshalledId } from \"../../../base/common/marshallingIds.js\";\nimport { ThemeColor } from \"../../../base/common/themables.js\";\nimport { URI } from \"../../../base/common/uri.js\";\nimport { generateUuid } from \"../../../base/common/uuid.js\";\nimport { localize } from \"../../../nls.js\";\nimport type { IExtensionDescription } from \"../../../platform/extensions/common/extensions.js\";\nimport { createDecorator } from \"../../../platform/instantiation/common/instantiation.js\";\nimport type {\n\tIEnvironmentVariableCollectionDescription,\n\tIEnvironmentVariableMutator,\n\tISerializableEnvironmentVariableCollection,\n} from \"../../../platform/terminal/common/environmentVariable.js\";\nimport {\n\tserializeEnvironmentDescriptionMap,\n\tserializeEnvironmentVariableCollection,\n} from \"../../../platform/terminal/common/environmentVariableShared.js\";\nimport {\n\ttype ICreateContributedTerminalProfileOptions,\n\ttype IProcessProperty,\n\ttype IProcessPropertyMap,\n\ttype IProcessReadyEvent,\n\ttype IShellLaunchConfigDto,\n\ttype ITerminalChildProcess,\n\ttype ITerminalLaunchError,\n\ttype ITerminalProfile,\n\tProcessPropertyType,\n\ttype TerminalIcon,\n\ttype TerminalLocation,\n} from \"../../../platform/terminal/common/terminal.js\";\nimport { TerminalDataBufferer } from \"../../../platform/terminal/common/terminalDataBuffering.js\";\nimport type { ISerializedTerminalInstanceContext } from \"../../contrib/terminal/common/terminal.js\";\nimport type { EditorGroupColumn } from \"../../services/editor/common/editorGroupColumn.js\";\nimport {\n\ttype ExtHostTerminalIdentifier,\n\ttype ExtHostTerminalServiceShape,\n\ttype ICommandDto,\n\ttype ITerminalCommandDto,\n\ttype ITerminalDimensionsDto,\n\ttype ITerminalLinkDto,\n\ttype ITerminalQuickFixOpenerDto,\n\ttype ITerminalQuickFixTerminalCommandDto,\n\tMainContext,\n\ttype MainThreadTerminalServiceShape,\n\ttype TerminalCommandMatchResultDto,\n} from \"./extHost.protocol.js\";\nimport { IExtHostCommands } from \"./extHostCommands.js\";\nimport { IExtHostRpcService } from \"./extHostRpcService.js\";\nimport { TerminalQuickFix, ViewColumn } from \"./extHostTypeConverters.js\";\nimport {\n\tEnvironmentVariableMutatorType,\n\ttype TerminalExitReason,\n\tDisposable as VSCodeDisposable,\n} from \"./extHostTypes.js\";\n\nexport interface IExtHostTerminalService\n\textends ExtHostTerminalServiceShape,\n\t\tIDisposable {\n\treadonly _serviceBrand: undefined;\n\n\tactiveTerminal: vscode.Terminal | undefined;\n\tterminals: vscode.Terminal[];\n\n\treadonly onDidCloseTerminal: Event<vscode.Terminal>;\n\treadonly onDidOpenTerminal: Event<vscode.Terminal>;\n\treadonly onDidChangeActiveTerminal: Event<vscode.Terminal | undefined>;\n\treadonly onDidChangeTerminalDimensions: Event<vscode.TerminalDimensionsChangeEvent>;\n\treadonly onDidChangeTerminalState: Event<vscode.Terminal>;\n\treadonly onDidWriteTerminalData: Event<vscode.TerminalDataWriteEvent>;\n\treadonly onDidExecuteTerminalCommand: Event<vscode.TerminalExecutedCommand>;\n\treadonly onDidChangeShell: Event<string>;\n\n\tcreateTerminal(\n\t\tname?: string,\n\t\tshellPath?: string,\n\t\tshellArgs?: readonly string[] | string,\n\t): vscode.Terminal;\n\tcreateTerminalFromOptions(\n\t\toptions: vscode.TerminalOptions,\n\t\tinternalOptions?: ITerminalInternalOptions,\n\t): vscode.Terminal;\n\tcreateExtensionTerminal(\n\t\toptions: vscode.ExtensionTerminalOptions,\n\t): vscode.Terminal;\n\tattachPtyToTerminal(id: number, pty: vscode.Pseudoterminal): void;\n\tgetDefaultShell(useAutomationShell: boolean): string;\n\tgetDefaultShellArgs(useAutomationShell: boolean): string[] | string;\n\tregisterLinkProvider(\n\t\tprovider: vscode.TerminalLinkProvider,\n\t): vscode.Disposable;\n\tregisterProfileProvider(\n\t\textension: IExtensionDescription,\n\t\tid: string,\n\t\tprovider: vscode.TerminalProfileProvider,\n\t): vscode.Disposable;\n\tregisterTerminalQuickFixProvider(\n\t\tid: string,\n\t\textensionId: string,\n\t\tprovider: vscode.TerminalQuickFixProvider,\n\t): vscode.Disposable;\n\tgetEnvironmentVariableCollection(\n\t\textension: IExtensionDescription,\n\t): IEnvironmentVariableCollection;\n\tgetTerminalById(id: number): ExtHostTerminal | null;\n\tgetTerminalIdByApiObject(apiTerminal: vscode.Terminal): number | null;\n}\n\ninterface IEnvironmentVariableCollection\n\textends vscode.EnvironmentVariableCollection {\n\tgetScoped(\n\t\tscope: vscode.EnvironmentVariableScope,\n\t): vscode.EnvironmentVariableCollection;\n}\n\nexport interface ITerminalInternalOptions {\n\tcwd?: string | URI;\n\tisFeatureTerminal?: boolean;\n\tforceShellIntegration?: boolean;\n\tuseShellEnvironment?: boolean;\n\tresolvedExtHostIdentifier?: ExtHostTerminalIdentifier;\n\t/**\n\t * This location is different from the API location because it can include splitActiveTerminal,\n\t * a property we resolve internally\n\t */\n\tlocation?:\n\t\t| TerminalLocation\n\t\t| { viewColumn: number; preserveState?: boolean }\n\t\t| { splitActiveTerminal: boolean };\n}\n\nexport const IExtHostTerminalService = createDecorator<IExtHostTerminalService>(\n\t\"IExtHostTerminalService\",\n);\n\nexport class ExtHostTerminal extends Disposable {\n\tprivate _disposed = false;\n\tprivate _pidPromise: Promise<number | undefined>;\n\tprivate _cols: number | undefined;\n\tprivate _pidPromiseComplete:\n\t\t| ((value: number | undefined) => any)\n\t\t| undefined;\n\tprivate _rows: number | undefined;\n\tprivate _exitStatus: vscode.TerminalExitStatus | undefined;\n\tprivate _state: vscode.TerminalState = { isInteractedWith: false };\n\tprivate _selection: string | undefined;\n\n\tshellIntegration: vscode.TerminalShellIntegration | undefined;\n\n\tpublic isOpen = false;\n\n\treadonly value: vscode.Terminal;\n\n\tprotected readonly _onWillDispose = this._register(new Emitter<void>());\n\treadonly onWillDispose = this._onWillDispose.event;\n\n\tconstructor(\n\t\tprivate _proxy: MainThreadTerminalServiceShape,\n\t\tpublic _id: ExtHostTerminalIdentifier,\n\t\tprivate readonly _creationOptions:\n\t\t\t| vscode.TerminalOptions\n\t\t\t| vscode.ExtensionTerminalOptions,\n\t\tprivate _name?: string,\n\t) {\n\t\tsuper();\n\n\t\tthis._creationOptions = Object.freeze(this._creationOptions);\n\t\tthis._pidPromise = new Promise<number | undefined>(\n\t\t\t(c) => (this._pidPromiseComplete = c),\n\t\t);\n\n\t\tconst that = this;\n\t\tthis.value = {\n\t\t\tget name(): string {\n\t\t\t\treturn that._name || \"\";\n\t\t\t},\n\t\t\tget processId(): Promise<number | undefined> {\n\t\t\t\treturn that._pidPromise;\n\t\t\t},\n\t\t\tget creationOptions(): Readonly<\n\t\t\t\tvscode.TerminalOptions | vscode.ExtensionTerminalOptions\n\t\t\t> {\n\t\t\t\treturn that._creationOptions;\n\t\t\t},\n\t\t\tget exitStatus(): vscode.TerminalExitStatus | undefined {\n\t\t\t\treturn that._exitStatus;\n\t\t\t},\n\t\t\tget state(): vscode.TerminalState {\n\t\t\t\treturn that._state;\n\t\t\t},\n\t\t\tget selection(): string | undefined {\n\t\t\t\treturn that._selection;\n\t\t\t},\n\t\t\tget shellIntegration():\n\t\t\t\t| vscode.TerminalShellIntegration\n\t\t\t\t| undefined {\n\t\t\t\treturn that.shellIntegration;\n\t\t\t},\n\t\t\tsendText(text: string, shouldExecute = true): void {\n\t\t\t\tthat._checkDisposed();\n\t\t\t\tthat._proxy.$sendText(that._id, text, shouldExecute);\n\t\t\t},\n\t\t\tshow(preserveFocus: boolean): void {\n\t\t\t\tthat._checkDisposed();\n\t\t\t\tthat._proxy.$show(that._id, preserveFocus);\n\t\t\t},\n\t\t\thide(): void {\n\t\t\t\tthat._checkDisposed();\n\t\t\t\tthat._proxy.$hide(that._id);\n\t\t\t},\n\t\t\tdispose(): void {\n\t\t\t\tif (!that._disposed) {\n\t\t\t\t\tthat._disposed = true;\n\t\t\t\t\tthat._proxy.$dispose(that._id);\n\t\t\t\t}\n\t\t\t},\n\t\t\tget dimensions(): vscode.TerminalDimensions | undefined {\n\t\t\t\tif (that._cols === undefined || that._rows === undefined) {\n\t\t\t\t\treturn undefined;\n\t\t\t\t}\n\t\t\t\treturn {\n\t\t\t\t\tcolumns: that._cols,\n\t\t\t\t\trows: that._rows,\n\t\t\t\t};\n\t\t\t},\n\t\t};\n\t}\n\n\toverride dispose(): void {\n\t\tthis._onWillDispose.fire();\n\t\tsuper.dispose();\n\t}\n\n\tpublic async create(\n\t\toptions: vscode.TerminalOptions,\n\t\tinternalOptions?: ITerminalInternalOptions,\n\t): Promise<void> {\n\t\tif (typeof this._id !== \"string\") {\n\t\t\tthrow new Error(\"Terminal has already been created\");\n\t\t}\n\t\tawait this._proxy.$createTerminal(this._id, {\n\t\t\tname: options.name,\n\t\t\tshellPath: options.shellPath ?? undefined,\n\t\t\tshellArgs: options.shellArgs ?? undefined,\n\t\t\tcwd: options.cwd ?? internalOptions?.cwd ?? undefined,\n\t\t\tenv: options.env ?? undefined,\n\t\t\ticon: asTerminalIcon(options.iconPath) ?? undefined,\n\t\t\tcolor: ThemeColor.isThemeColor(options.color)\n\t\t\t\t? options.color.id\n\t\t\t\t: undefined,\n\t\t\tinitialText: options.message ?? undefined,\n\t\t\tstrictEnv: options.strictEnv ?? undefined,\n\t\t\thideFromUser: options.hideFromUser ?? undefined,\n\t\t\tforceShellIntegration:\n\t\t\t\tinternalOptions?.forceShellIntegration ?? undefined,\n\t\t\tisFeatureTerminal: internalOptions?.isFeatureTerminal ?? undefined,\n\t\t\tisExtensionOwnedTerminal: true,\n\t\t\tuseShellEnvironment:\n\t\t\t\tinternalOptions?.useShellEnvironment ?? undefined,\n\t\t\tlocation:\n\t\t\t\tinternalOptions?.location ||\n\t\t\t\tthis._serializeParentTerminal(\n\t\t\t\t\toptions.location,\n\t\t\t\t\tinternalOptions?.resolvedExtHostIdentifier,\n\t\t\t\t),\n\t\t\tisTransient: options.isTransient ?? undefined,\n\t\t});\n\t}\n\n\tpublic async createExtensionTerminal(\n\t\tlocation?:\n\t\t\t| TerminalLocation\n\t\t\t| vscode.TerminalEditorLocationOptions\n\t\t\t| vscode.TerminalSplitLocationOptions,\n\t\tinternalOptions?: ITerminalInternalOptions,\n\t\tparentTerminal?: ExtHostTerminalIdentifier,\n\t\ticonPath?: TerminalIcon,\n\t\tcolor?: ThemeColor,\n\t): Promise<number> {\n\t\tif (typeof this._id !== \"string\") {\n\t\t\tthrow new Error(\"Terminal has already been created\");\n\t\t}\n\t\tawait this._proxy.$createTerminal(this._id, {\n\t\t\tname: this._name,\n\t\t\tisExtensionCustomPtyTerminal: true,\n\t\t\ticon: iconPath,\n\t\t\tcolor: ThemeColor.isThemeColor(color) ? color.id : undefined,\n\t\t\tlocation:\n\t\t\t\tinternalOptions?.location ||\n\t\t\t\tthis._serializeParentTerminal(location, parentTerminal),\n\t\t\tisTransient: true,\n\t\t});\n\t\t// At this point, the id has been set via `$acceptTerminalOpened`\n\t\tif (typeof this._id === \"string\") {\n\t\t\tthrow new Error(\"Terminal creation failed\");\n\t\t}\n\t\treturn this._id;\n\t}\n\n\tprivate _serializeParentTerminal(\n\t\tlocation?:\n\t\t\t| TerminalLocation\n\t\t\t| vscode.TerminalEditorLocationOptions\n\t\t\t| vscode.TerminalSplitLocationOptions,\n\t\tparentTerminal?: ExtHostTerminalIdentifier,\n\t):\n\t\t| TerminalLocation\n\t\t| { viewColumn: EditorGroupColumn; preserveFocus?: boolean }\n\t\t| { parentTerminal: ExtHostTerminalIdentifier }\n\t\t| undefined {\n\t\tif (typeof location === \"object\") {\n\t\t\tif (\n\t\t\t\t\"parentTerminal\" in location &&\n\t\t\t\tlocation.parentTerminal &&\n\t\t\t\tparentTerminal\n\t\t\t) {\n\t\t\t\treturn { parentTerminal };\n\t\t\t}\n\n\t\t\tif (\"viewColumn\" in location) {\n\t\t\t\treturn {\n\t\t\t\t\tviewColumn: ViewColumn.from(location.viewColumn),\n\t\t\t\t\tpreserveFocus: location.preserveFocus,\n\t\t\t\t};\n\t\t\t}\n\n\t\t\treturn undefined;\n\t\t}\n\n\t\treturn location;\n\t}\n\n\tprivate _checkDisposed() {\n\t\tif (this._disposed) {\n\t\t\tthrow new Error(\"Terminal has already been disposed\");\n\t\t}\n\t}\n\n\tpublic set name(name: string) {\n\t\tthis._name = name;\n\t}\n\n\tpublic setExitStatus(code: number | undefined, reason: TerminalExitReason) {\n\t\tthis._exitStatus = Object.freeze({ code, reason });\n\t}\n\n\tpublic setDimensions(cols: number, rows: number): boolean {\n\t\tif (cols === this._cols && rows === this._rows) {\n\t\t\t// Nothing changed\n\t\t\treturn false;\n\t\t}\n\t\tif (cols === 0 || rows === 0) {\n\t\t\treturn false;\n\t\t}\n\t\tthis._cols = cols;\n\t\tthis._rows = rows;\n\t\treturn true;\n\t}\n\n\tpublic setInteractedWith(): boolean {\n\t\tif (!this._state.isInteractedWith) {\n\t\t\tthis._state = { isInteractedWith: true };\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\n\tpublic setSelection(selection: string | undefined): void {\n\t\tthis._selection = selection;\n\t}\n\n\tpublic _setProcessId(processId: number | undefined): void {\n\t\t// The event may fire 2 times when the panel is restored\n\t\tif (this._pidPromiseComplete) {\n\t\t\tthis._pidPromiseComplete(processId);\n\t\t\tthis._pidPromiseComplete = undefined;\n\t\t} else {\n\t\t\t// Recreate the promise if this is the nth processId set (e.g. reused task terminals)\n\t\t\tthis._pidPromise.then((pid) => {\n\t\t\t\tif (pid !== processId) {\n\t\t\t\t\tthis._pidPromise = Promise.resolve(processId);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}\n}\n\nclass ExtHostPseudoterminal implements ITerminalChildProcess {\n\treadonly id = 0;\n\treadonly shouldPersist = false;\n\n\tprivate readonly _onProcessData = new Emitter<string>();\n\tpublic readonly onProcessData: Event<string> = this._onProcessData.event;\n\tprivate readonly _onProcessReady = new Emitter<IProcessReadyEvent>();\n\tpublic get onProcessReady(): Event<IProcessReadyEvent> {\n\t\treturn this._onProcessReady.event;\n\t}\n\tprivate readonly _onDidChangeProperty = new Emitter<\n\t\tIProcessProperty<any>\n\t>();\n\tpublic readonly onDidChangeProperty = this._onDidChangeProperty.event;\n\tprivate readonly _onProcessExit = new Emitter<number | undefined>();\n\tpublic readonly onProcessExit: Event<number | undefined> =\n\t\tthis._onProcessExit.event;\n\n\tconstructor(private readonly _pty: vscode.Pseudoterminal) {}\n\n\trefreshProperty<T extends ProcessPropertyType>(\n\t\tproperty: ProcessPropertyType,\n\t): Promise<IProcessPropertyMap[T]> {\n\t\tthrow new Error(\n\t\t\t`refreshProperty is not suppported in extension owned terminals. property: ${property}`,\n\t\t);\n\t}\n\n\tupdateProperty<T extends ProcessPropertyType>(\n\t\tproperty: ProcessPropertyType,\n\t\tvalue: IProcessPropertyMap[T],\n\t): Promise<void> {\n\t\tthrow new Error(\n\t\t\t`updateProperty is not suppported in extension owned terminals. property: ${property}, value: ${value}`,\n\t\t);\n\t}\n\n\tasync start(): Promise<undefined> {\n\t\treturn undefined;\n\t}\n\n\tshutdown(): void {\n\t\tthis._pty.close();\n\t}\n\n\tinput(data: string): void {\n\t\tthis._pty.handleInput?.(data);\n\t}\n\n\tresize(cols: number, rows: number): void {\n\t\tthis._pty.setDimensions?.({ columns: cols, rows });\n\t}\n\n\tclearBuffer(): void | Promise<void> {\n\t\t// no-op\n\t}\n\n\tasync processBinary(data: string): Promise<void> {\n\t\t// No-op, processBinary is not supported in extension owned terminals.\n\t}\n\n\tacknowledgeDataEvent(charCount: number): void {\n\t\t// No-op, flow control is not supported in extension owned terminals. If this is ever\n\t\t// implemented it will need new pause and resume VS Code APIs.\n\t}\n\n\tasync setUnicodeVersion(version: \"6\" | \"11\"): Promise<void> {\n\t\t// No-op, xterm-headless isn't used for extension owned terminals.\n\t}\n\n\tgetInitialCwd(): Promise<string> {\n\t\treturn Promise.resolve(\"\");\n\t}\n\n\tgetCwd(): Promise<string> {\n\t\treturn Promise.resolve(\"\");\n\t}\n\n\tstartSendingEvents(\n\t\tinitialDimensions: ITerminalDimensionsDto | undefined,\n\t): void {\n\t\t// Attach the listeners\n\t\tthis._pty.onDidWrite((e) => this._onProcessData.fire(e));\n\t\tthis._pty.onDidClose?.((e: number | void = undefined) => {\n\t\t\tthis._onProcessExit.fire(e === void 0 ? undefined : e);\n\t\t});\n\t\tthis._pty.onDidOverrideDimensions?.((e) => {\n\t\t\tif (e) {\n\t\t\t\tthis._onDidChangeProperty.fire({\n\t\t\t\t\ttype: ProcessPropertyType.OverrideDimensions,\n\t\t\t\t\tvalue: { cols: e.columns, rows: e.rows },\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t\tthis._pty.onDidChangeName?.((title) => {\n\t\t\tthis._onDidChangeProperty.fire({\n\t\t\t\ttype: ProcessPropertyType.Title,\n\t\t\t\tvalue: title,\n\t\t\t});\n\t\t});\n\n\t\tthis._pty.open(initialDimensions ? initialDimensions : undefined);\n\n\t\tif (initialDimensions) {\n\t\t\tthis._pty.setDimensions?.(initialDimensions);\n\t\t}\n\n\t\tthis._onProcessReady.fire({ pid: -1, cwd: \"\", windowsPty: undefined });\n\t}\n}\n\nlet nextLinkId = 1;\n\ninterface ICachedLinkEntry {\n\tprovider: vscode.TerminalLinkProvider;\n\tlink: vscode.TerminalLink;\n}\n\nexport abstract class BaseExtHostTerminalService\n\textends Disposable\n\timplements IExtHostTerminalService, ExtHostTerminalServiceShape\n{\n\treadonly _serviceBrand: undefined;\n\n\tprotected _proxy: MainThreadTerminalServiceShape;\n\tprotected _activeTerminal: ExtHostTerminal | undefined;\n\tprotected _terminals: ExtHostTerminal[] = [];\n\tprotected _terminalProcesses: Map<number, ITerminalChildProcess> =\n\t\tnew Map();\n\tprotected _terminalProcessDisposables: { [id: number]: IDisposable } = {};\n\tprotected _extensionTerminalAwaitingStart: {\n\t\t[id: number]:\n\t\t\t| { initialDimensions: ITerminalDimensionsDto | undefined }\n\t\t\t| undefined;\n\t} = {};\n\tprotected _getTerminalPromises: {\n\t\t[id: number]: Promise<ExtHostTerminal | undefined>;\n\t} = {};\n\tprotected _environmentVariableCollections: Map<\n\t\tstring,\n\t\tUnifiedEnvironmentVariableCollection\n\t> = new Map();\n\tprivate _defaultProfile: ITerminalProfile | undefined;\n\tprivate _defaultAutomationProfile: ITerminalProfile | undefined;\n\tprivate readonly _lastQuickFixCommands: MutableDisposable<IDisposable> =\n\t\tthis._register(new MutableDisposable());\n\n\tprivate readonly _bufferer: TerminalDataBufferer;\n\tprivate readonly _linkProviders: Set<vscode.TerminalLinkProvider> =\n\t\tnew Set();\n\tprivate readonly _profileProviders: Map<\n\t\tstring,\n\t\tvscode.TerminalProfileProvider\n\t> = new Map();\n\tprivate readonly _quickFixProviders: Map<\n\t\tstring,\n\t\tvscode.TerminalQuickFixProvider\n\t> = new Map();\n\tprivate readonly _terminalLinkCache: Map<\n\t\tnumber,\n\t\tMap<number, ICachedLinkEntry>\n\t> = new Map();\n\tprivate readonly _terminalLinkCancellationSource: Map<\n\t\tnumber,\n\t\tCancellationTokenSource\n\t> = new Map();\n\n\tpublic get activeTerminal(): vscode.Terminal | undefined {\n\t\treturn this._activeTerminal?.value;\n\t}\n\tpublic get terminals(): vscode.Terminal[] {\n\t\treturn this._terminals.map((term) => term.value);\n\t}\n\n\tprotected readonly _onDidCloseTerminal = new Emitter<vscode.Terminal>();\n\treadonly onDidCloseTerminal = this._onDidCloseTerminal.event;\n\tprotected readonly _onDidOpenTerminal = new Emitter<vscode.Terminal>();\n\treadonly onDidOpenTerminal = this._onDidOpenTerminal.event;\n\tprotected readonly _onDidChangeActiveTerminal = new Emitter<\n\t\tvscode.Terminal | undefined\n\t>();\n\treadonly onDidChangeActiveTerminal = this._onDidChangeActiveTerminal.event;\n\tprotected readonly _onDidChangeTerminalDimensions =\n\t\tnew Emitter<vscode.TerminalDimensionsChangeEvent>();\n\treadonly onDidChangeTerminalDimensions =\n\t\tthis._onDidChangeTerminalDimensions.event;\n\tprotected readonly _onDidChangeTerminalState =\n\t\tnew Emitter<vscode.Terminal>();\n\treadonly onDidChangeTerminalState = this._onDidChangeTerminalState.event;\n\tprotected readonly _onDidChangeShell = new Emitter<string>();\n\treadonly onDidChangeShell = this._onDidChangeShell.event;\n\n\tprotected readonly _onDidWriteTerminalData =\n\t\tnew Emitter<vscode.TerminalDataWriteEvent>({\n\t\t\tonWillAddFirstListener: () => this._proxy.$startSendingDataEvents(),\n\t\t\tonDidRemoveLastListener: () => this._proxy.$stopSendingDataEvents(),\n\t\t});\n\treadonly onDidWriteTerminalData = this._onDidWriteTerminalData.event;\n\tprotected readonly _onDidExecuteCommand =\n\t\tnew Emitter<vscode.TerminalExecutedCommand>({\n\t\t\tonWillAddFirstListener: () =>\n\t\t\t\tthis._proxy.$startSendingCommandEvents(),\n\t\t\tonDidRemoveLastListener: () =>\n\t\t\t\tthis._proxy.$stopSendingCommandEvents(),\n\t\t});\n\treadonly onDidExecuteTerminalCommand = this._onDidExecuteCommand.event;\n\n\tconstructor(\n\t\tsupportsProcesses: boolean,\n\t\t@IExtHostCommands private readonly _extHostCommands: IExtHostCommands,\n\t\t@IExtHostRpcService extHostRpc: IExtHostRpcService,\n\t) {\n\t\tsuper();\n\t\tthis._proxy = extHostRpc.getProxy(\n\t\t\tMainContext.MainThreadTerminalService,\n\t\t);\n\t\tthis._bufferer = new TerminalDataBufferer(this._proxy.$sendProcessData);\n\t\tthis._proxy.$registerProcessSupport(supportsProcesses);\n\t\tthis._extHostCommands.registerArgumentProcessor({\n\t\t\tprocessArgument: (arg) => {\n\t\t\t\tconst deserialize = (arg: any) => {\n\t\t\t\t\tconst cast = arg as ISerializedTerminalInstanceContext;\n\t\t\t\t\treturn this.getTerminalById(cast.instanceId)?.value;\n\t\t\t\t};\n\t\t\t\tswitch (arg?.$mid) {\n\t\t\t\t\tcase MarshalledId.TerminalContext:\n\t\t\t\t\t\treturn deserialize(arg);\n\t\t\t\t\tdefault: {\n\t\t\t\t\t\t// Do array transformation in place as this is a hot path\n\t\t\t\t\t\tif (Array.isArray(arg)) {\n\t\t\t\t\t\t\tfor (let i = 0; i < arg.length; i++) {\n\t\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\t\targ[i].$mid === MarshalledId.TerminalContext\n\t\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\t\targ[i] = deserialize(arg[i]);\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t// Probably something else, so exit early\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn arg;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\t\t});\n\t\tthis._register({\n\t\t\tdispose: () => {\n\t\t\t\tfor (const [_, terminalProcess] of this._terminalProcesses) {\n\t\t\t\t\tterminalProcess.shutdown(true);\n\t\t\t\t}\n\t\t\t},\n\t\t});\n\t}\n\n\tpublic abstract createTerminal(\n\t\tname?: string,\n\t\tshellPath?: string,\n\t\tshellArgs?: string[] | string,\n\t): vscode.Terminal;\n\tpublic abstract createTerminalFromOptions(\n\t\toptions: vscode.TerminalOptions,\n\t\tinternalOptions?: ITerminalInternalOptions,\n\t): vscode.Terminal;\n\n\tpublic getDefaultShell(useAutomationShell: boolean): string {\n\t\tconst profile = useAutomationShell\n\t\t\t? this._defaultAutomationProfile\n\t\t\t: this._defaultProfile;\n\t\treturn profile?.path || \"\";\n\t}\n\n\tpublic getDefaultShellArgs(useAutomationShell: boolean): string[] | string {\n\t\tconst profile = useAutomationShell\n\t\t\t? this._defaultAutomationProfile\n\t\t\t: this._defaultProfile;\n\t\treturn profile?.args || [];\n\t}\n\n\tpublic createExtensionTerminal(\n\t\toptions: vscode.ExtensionTerminalOptions,\n\t\tinternalOptions?: ITerminalInternalOptions,\n\t): vscode.Terminal {\n\t\tconst terminal = new ExtHostTerminal(\n\t\t\tthis._proxy,\n\t\t\tgenerateUuid(),\n\t\t\toptions,\n\t\t\toptions.name,\n\t\t);\n\t\tconst p = new ExtHostPseudoterminal(options.pty);\n\t\tterminal\n\t\t\t.createExtensionTerminal(\n\t\t\t\toptions.location,\n\t\t\t\tinternalOptions,\n\t\t\t\tthis._serializeParentTerminal(options, internalOptions)\n\t\t\t\t\t.resolvedExtHostIdentifier,\n\t\t\t\tasTerminalIcon(options.iconPath),\n\t\t\t\tasTerminalColor(options.color),\n\t\t\t)\n\t\t\t.then((id) => {\n\t\t\t\tconst disposable = this._setupExtHostProcessListeners(id, p);\n\t\t\t\tthis._terminalProcessDisposables[id] = disposable;\n\t\t\t});\n\t\tthis._terminals.push(terminal);\n\t\treturn terminal.value;\n\t}\n\n\tprotected _serializeParentTerminal(\n\t\toptions: vscode.TerminalOptions,\n\t\tinternalOptions?: ITerminalInternalOptions,\n\t): ITerminalInternalOptions {\n\t\tinternalOptions = internalOptions ? internalOptions : {};\n\t\tif (\n\t\t\toptions.location &&\n\t\t\ttypeof options.location === \"object\" &&\n\t\t\t\"parentTerminal\" in options.location\n\t\t) {\n\t\t\tconst parentTerminal = options.location.parentTerminal;\n\t\t\tif (parentTerminal) {\n\t\t\t\tconst parentExtHostTerminal = this._terminals.find(\n\t\t\t\t\t(t) => t.value === parentTerminal,\n\t\t\t\t);\n\t\t\t\tif (parentExtHostTerminal) {\n\t\t\t\t\tinternalOptions.resolvedExtHostIdentifier =\n\t\t\t\t\t\tparentExtHostTerminal._id;\n\t\t\t\t}\n\t\t\t}\n\t\t} else if (options.location && typeof options.location !== \"object\") {\n\t\t\tinternalOptions.location = options.location;\n\t\t} else if (\n\t\t\tinternalOptions.location &&\n\t\t\ttypeof internalOptions.location === \"object\" &&\n\t\t\t\"splitActiveTerminal\" in internalOptions.location\n\t\t) {\n\t\t\tinternalOptions.location = { splitActiveTerminal: true };\n\t\t}\n\t\treturn internalOptions;\n\t}\n\n\tpublic attachPtyToTerminal(id: number, pty: vscode.Pseudoterminal): void {\n\t\tconst terminal = this.getTerminalById(id);\n\t\tif (!terminal) {\n\t\t\tthrow new Error(\n\t\t\t\t`Cannot resolve terminal with id ${id} for virtual process`,\n\t\t\t);\n\t\t}\n\t\tconst p = new ExtHostPseudoterminal(pty);\n\t\tconst disposable = this._setupExtHostProcessListeners(id, p);\n\t\tthis._terminalProcessDisposables[id] = disposable;\n\t}\n\n\tpublic async $acceptActiveTerminalChanged(\n\t\tid: number | null,\n\t): Promise<void> {\n\t\tconst original = this._activeTerminal;\n\t\tif (id === null) {\n\t\t\tthis._activeTerminal = undefined;\n\t\t\tif (original !== this._activeTerminal) {\n\t\t\t\tthis._onDidChangeActiveTerminal.fire(this._activeTerminal);\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\t\tconst terminal = this.getTerminalById(id);\n\t\tif (terminal) {\n\t\t\tthis._activeTerminal = terminal;\n\t\t\tif (original !== this._activeTerminal) {\n\t\t\t\tthis._onDidChangeActiveTerminal.fire(\n\t\t\t\t\tthis._activeTerminal.value,\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic async $acceptTerminalProcessData(\n\t\tid: number,\n\t\tdata: string,\n\t): Promise<void> {\n\t\tconst terminal = this.getTerminalById(id);\n\t\tif (terminal) {\n\t\t\tthis._onDidWriteTerminalData.fire({\n\t\t\t\tterminal: terminal.value,\n\t\t\t\tdata,\n\t\t\t});\n\t\t}\n\t}\n\n\tpublic async $acceptTerminalDimensions(\n\t\tid: number,\n\t\tcols: number,\n\t\trows: number,\n\t): Promise<void> {\n\t\tconst terminal = this.getTerminalById(id);\n\t\tif (terminal) {\n\t\t\tif (terminal.setDimensions(cols, rows)) {\n\t\t\t\tthis._onDidChangeTerminalDimensions.fire({\n\t\t\t\t\tterminal: terminal.value,\n\t\t\t\t\tdimensions: terminal.value\n\t\t\t\t\t\t.dimensions as vscode.TerminalDimensions,\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic async $acceptDidExecuteCommand(\n\t\tid: number,\n\t\tcommand: ITerminalCommandDto,\n\t): Promise<void> {\n\t\tconst terminal = this.getTerminalById(id);\n\t\tif (terminal) {\n\t\t\tthis._onDidExecuteCommand.fire({\n\t\t\t\tterminal: terminal.value,\n\t\t\t\t...command,\n\t\t\t});\n\t\t}\n\t}\n\n\tpublic async $acceptTerminalMaximumDimensions(\n\t\tid: number,\n\t\tcols: number,\n\t\trows: number,\n\t): Promise<void> {\n\t\t// Extension pty terminal only - when virtual process resize fires it means that the\n\t\t// terminal's maximum dimensions changed\n\t\tthis._terminalProcesses.get(id)?.resize(cols, rows);\n\t}\n\n\tpublic async $acceptTerminalTitleChange(\n\t\tid: number,\n\t\tname: string,\n\t): Promise<void> {\n\t\tconst terminal = this.getTerminalById(id);\n\t\tif (terminal) {\n\t\t\tterminal.name = name;\n\t\t}\n\t}\n\n\tpublic async $acceptTerminalClosed(\n\t\tid: number,\n\t\texitCode: number | undefined,\n\t\texitReason: TerminalExitReason,\n\t): Promise<void> {\n\t\tconst index = this._getTerminalObjectIndexById(this._terminals, id);\n\t\tif (index !== null) {\n\t\t\tconst terminal = this._terminals.splice(index, 1)[0];\n\t\t\tterminal.setExitStatus(exitCode, exitReason);\n\t\t\tthis._onDidCloseTerminal.fire(terminal.value);\n\t\t}\n\t}\n\n\tpublic $acceptTerminalOpened(\n\t\tid: number,\n\t\textHostTerminalId: string | undefined,\n\t\tname: string,\n\t\tshellLaunchConfigDto: IShellLaunchConfigDto,\n\t): void {\n\t\tif (extHostTerminalId) {\n\t\t\t// Resolve with the renderer generated id\n\t\t\tconst index = this._getTerminalObjectIndexById(\n\t\t\t\tthis._terminals,\n\t\t\t\textHostTerminalId,\n\t\t\t);\n\t\t\tif (index !== null) {\n\t\t\t\t// The terminal has already been created (via createTerminal*), only fire the event\n\t\t\t\tthis._terminals[index]._id = id;\n\t\t\t\tthis._onDidOpenTerminal.fire(this.terminals[index]);\n\t\t\t\tthis._terminals[index].isOpen = true;\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\tconst creationOptions: vscode.TerminalOptions = {\n\t\t\tname: shellLaunchConfigDto.name,\n\t\t\tshellPath: shellLaunchConfigDto.executable,\n\t\t\tshellArgs: shellLaunchConfigDto.args,\n\t\t\tcwd:\n\t\t\t\ttypeof shellLaunchConfigDto.cwd === \"string\"\n\t\t\t\t\t? shellLaunchConfigDto.cwd\n\t\t\t\t\t: URI.revive(shellLaunchConfigDto.cwd),\n\t\t\tenv: shellLaunchConfigDto.env,\n\t\t\thideFromUser: shellLaunchConfigDto.hideFromUser,\n\t\t};\n\t\tconst terminal = new ExtHostTerminal(\n\t\t\tthis._proxy,\n\t\t\tid,\n\t\t\tcreationOptions,\n\t\t\tname,\n\t\t);\n\t\tthis._terminals.push(terminal);\n\t\tthis._onDidOpenTerminal.fire(terminal.value);\n\t\tterminal.isOpen = true;\n\t}\n\n\tpublic async $acceptTerminalProcessId(\n\t\tid: number,\n\t\tprocessId: number,\n\t): Promise<void> {\n\t\tconst terminal = this.getTerminalById(id);\n\t\tterminal?._setProcessId(processId);\n\t}\n\n\tpublic async $startExtensionTerminal(\n\t\tid: number,\n\t\tinitialDimensions: ITerminalDimensionsDto | undefined,\n\t): Promise<ITerminalLaunchError | undefined> {\n\t\t// Make sure the ExtHostTerminal exists so onDidOpenTerminal has fired before we call\n\t\t// Pseudoterminal.start\n\t\tconst terminal = this.getTerminalById(id);\n\t\tif (!terminal) {\n\t\t\treturn {\n\t\t\t\tmessage: localize(\n\t\t\t\t\t\"launchFail.idMissingOnExtHost\",\n\t\t\t\t\t\"Could not find the terminal with id {0} on the extension host\",\n\t\t\t\t\tid,\n\t\t\t\t),\n\t\t\t};\n\t\t}\n\n\t\t// Wait for onDidOpenTerminal to fire\n\t\tif (!terminal.isOpen) {\n\t\t\tawait new Promise<void>((r) => {\n\t\t\t\t// Ensure open is called after onDidOpenTerminal\n\t\t\t\tconst listener = this.onDidOpenTerminal(async (e) => {\n\t\t\t\t\tif (e === terminal.value) {\n\t\t\t\t\t\tlistener.dispose();\n\t\t\t\t\t\tr();\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\n\t\tconst terminalProcess = this._terminalProcesses.get(id);\n\t\tif (terminalProcess) {\n\t\t\t(terminalProcess as ExtHostPseudoterminal).startSendingEvents(\n\t\t\t\tinitialDimensions,\n\t\t\t);\n\t\t} else {\n\t\t\t// Defer startSendingEvents call to when _setupExtHostProcessListeners is called\n\t\t\tthis._extensionTerminalAwaitingStart[id] = { initialDimensions };\n\t\t}\n\n\t\treturn undefined;\n\t}\n\n\tprotected _setupExtHostProcessListeners(\n\t\tid: number,\n\t\tp: ITerminalChildProcess,\n\t): IDisposable {\n\t\tconst disposables = new DisposableStore();\n\t\tdisposables.add(\n\t\t\tp.onProcessReady((e) =>\n\t\t\t\tthis._proxy.$sendProcessReady(id, e.pid, e.cwd, e.windowsPty),\n\t\t\t),\n\t\t);\n\t\tdisposables.add(\n\t\t\tp.onDidChangeProperty((property) =>\n\t\t\t\tthis._proxy.$sendProcessProperty(id, property),\n\t\t\t),\n\t\t);\n\n\t\t// Buffer data events to reduce the amount of messages going to the renderer\n\t\tthis._bufferer.startBuffering(id, p.onProcessData);\n\t\tdisposables.add(\n\t\t\tp.onProcessExit((exitCode) => this._onProcessExit(id, exitCode)),\n\t\t);\n\t\tthis._terminalProcesses.set(id, p);\n\n\t\tconst awaitingStart = this._extensionTerminalAwaitingStart[id];\n\t\tif (awaitingStart && p instanceof ExtHostPseudoterminal) {\n\t\t\tp.startSendingEvents(awaitingStart.initialDimensions);\n\t\t\tdelete this._extensionTerminalAwaitingStart[id];\n\t\t}\n\n\t\treturn disposables;\n\t}\n\n\tpublic $acceptProcessAckDataEvent(id: number, charCount: number): void {\n\t\tthis._terminalProcesses.get(id)?.acknowledgeDataEvent(charCount);\n\t}\n\n\tpublic $acceptProcessInput(id: number, data: string): void {\n\t\tthis._terminalProcesses.get(id)?.input(data);\n\t}\n\n\tpublic $acceptTerminalInteraction(id: number): void {\n\t\tconst terminal = this.getTerminalById(id);\n\t\tif (terminal?.setInteractedWith()) {\n\t\t\tthis._onDidChangeTerminalState.fire(terminal.value);\n\t\t}\n\t}\n\n\tpublic $acceptTerminalSelection(\n\t\tid: number,\n\t\tselection: string | undefined,\n\t): void {\n\t\tthis.getTerminalById(id)?.setSelection(selection);\n\t}\n\n\tpublic $acceptProcessResize(id: number, cols: number, rows: number): void {\n\t\ttry {\n\t\t\tthis._terminalProcesses.get(id)?.resize(cols, rows);\n\t\t} catch (error) {\n\t\t\t// We tried to write to a closed pipe / channel.\n\t\t\tif (\n\t\t\t\terror.code !== \"EPIPE\" &&\n\t\t\t\terror.code !== \"ERR_IPC_CHANNEL_CLOSED\"\n\t\t\t) {\n\t\t\t\tthrow error;\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic $acceptProcessShutdown(id: number, immediate: boolean): void {\n\t\tthis._terminalProcesses.get(id)?.shutdown(immediate);\n\t}\n\n\tpublic $acceptProcessRequestInitialCwd(id: number): void {\n\t\tthis._terminalProcesses\n\t\t\t.get(id)\n\t\t\t?.getInitialCwd()\n\t\t\t.then((initialCwd) =>\n\t\t\t\tthis._proxy.$sendProcessProperty(id, {\n\t\t\t\t\ttype: ProcessPropertyType.InitialCwd,\n\t\t\t\t\tvalue: initialCwd,\n\t\t\t\t}),\n\t\t\t);\n\t}\n\n\tpublic $acceptProcessRequestCwd(id: number): void {\n\t\tthis._terminalProcesses\n\t\t\t.get(id)\n\t\t\t?.getCwd()\n\t\t\t.then((cwd) =>\n\t\t\t\tthis._proxy.$sendProcessProperty(id, {\n\t\t\t\t\ttype: ProcessPropertyType.Cwd,\n\t\t\t\t\tvalue: cwd,\n\t\t\t\t}),\n\t\t\t);\n\t}\n\n\tpublic $acceptProcessRequestLatency(id: number): Promise<number> {\n\t\treturn Promise.resolve(id);\n\t}\n\n\tpublic registerLinkProvider(\n\t\tprovider: vscode.TerminalLinkProvider,\n\t): vscode.Disposable {\n\t\tthis._linkProviders.add(provider);\n\t\tif (this._linkProviders.size === 1) {\n\t\t\tthis._proxy.$startLinkProvider();\n\t\t}\n\t\treturn new VSCodeDisposable(() => {\n\t\t\tthis._linkProviders.delete(provider);\n\t\t\tif (this._linkProviders.size === 0) {\n\t\t\t\tthis._proxy.$stopLinkProvider();\n\t\t\t}\n\t\t});\n\t}\n\n\tpublic registerProfileProvider(\n\t\textension: IExtensionDescription,\n\t\tid: string,\n\t\tprovider: vscode.TerminalProfileProvider,\n\t): vscode.Disposable {\n\t\tif (this._profileProviders.has(id)) {\n\t\t\tthrow new Error(\n\t\t\t\t`Terminal profile provider \"${id}\" already registered`,\n\t\t\t);\n\t\t}\n\t\tthis._profileProviders.set(id, provider);\n\t\tthis._proxy.$registerProfileProvider(id, extension.identifier.value);\n\t\treturn new VSCodeDisposable(() => {\n\t\t\tthis._profileProviders.delete(id);\n\t\t\tthis._proxy.$unregisterProfileProvider(id);\n\t\t});\n\t}\n\n\tpublic registerTerminalQuickFixProvider(\n\t\tid: string,\n\t\textensionId: string,\n\t\tprovider: vscode.TerminalQuickFixProvider,\n\t): vscode.Disposable {\n\t\tif (this._quickFixProviders.has(id)) {\n\t\t\tthrow new Error(\n\t\t\t\t`Terminal quick fix provider \"${id}\" is already registered`,\n\t\t\t);\n\t\t}\n\t\tthis._quickFixProviders.set(id, provider);\n\t\tthis._proxy.$registerQuickFixProvider(id, extensionId);\n\t\treturn new VSCodeDisposable(() => {\n\t\t\tthis._quickFixProviders.delete(id);\n\t\t\tthis._proxy.$unregisterQuickFixProvider(id);\n\t\t});\n\t}\n\n\tpublic async $provideTerminalQuickFixes(\n\t\tid: string,\n\t\tmatchResult: TerminalCommandMatchResultDto,\n\t): Promise<\n\t\t| (\n\t\t\t\t| ITerminalQuickFixTerminalCommandDto\n\t\t\t\t| ITerminalQuickFixOpenerDto\n\t\t\t\t| ICommandDto\n\t\t  )[]\n\t\t| ITerminalQuickFixTerminalCommandDto\n\t\t| ITerminalQuickFixOpenerDto\n\t\t| ICommandDto\n\t\t| undefined\n\t> {\n\t\tconst token = new CancellationTokenSource().token;\n\t\tif (token.isCancellationRequested) {\n\t\t\treturn;\n\t\t}\n\t\tconst provider = this._quickFixProviders.get(id);\n\t\tif (!provider) {\n\t\t\treturn;\n\t\t}\n\t\tconst quickFixes = await provider.provideTerminalQuickFixes(\n\t\t\tmatchResult,\n\t\t\ttoken,\n\t\t);\n\t\tif (\n\t\t\tquickFixes === null ||\n\t\t\t(Array.isArray(quickFixes) && quickFixes.length === 0)\n\t\t) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\tconst store = new DisposableStore();\n\t\tthis._lastQuickFixCommands.value = store;\n\n\t\t// Single\n\t\tif (!Array.isArray(quickFixes)) {\n\t\t\treturn quickFixes\n\t\t\t\t? TerminalQuickFix.from(\n\t\t\t\t\t\tquickFixes,\n\t\t\t\t\t\tthis._extHostCommands.converter,\n\t\t\t\t\t\tstore,\n\t\t\t\t\t)\n\t\t\t\t: undefined;\n\t\t}\n\n\t\t// Many\n\t\tconst result = [];\n\t\tfor (const fix of quickFixes) {\n\t\t\tconst converted = TerminalQuickFix.from(\n\t\t\t\tfix,\n\t\t\t\tthis._extHostCommands.converter,\n\t\t\t\tstore,\n\t\t\t);\n\t\t\tif (converted) {\n\t\t\t\tresult.push(converted);\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n\n\tpublic async $createContributedProfileTerminal(\n\t\tid: string,\n\t\toptions: ICreateContributedTerminalProfileOptions,\n\t): Promise<void> {\n\t\tconst token = new CancellationTokenSource().token;\n\t\tlet profile = await this._profileProviders\n\t\t\t.get(id)\n\t\t\t?.provideTerminalProfile(token);\n\t\tif (token.isCancellationRequested) {\n\t\t\treturn;\n\t\t}\n\t\tif (profile && !(\"options\" in profile)) {\n\t\t\tprofile = { options: profile };\n\t\t}\n\n\t\tif (!profile || !(\"options\" in profile)) {\n\t\t\tthrow new Error(\n\t\t\t\t`No terminal profile options provided for id \"${id}\"`,\n\t\t\t);\n\t\t}\n\n\t\tif (\"pty\" in profile.options) {\n\t\t\tthis.createExtensionTerminal(profile.options, options);\n\t\t\treturn;\n\t\t}\n\t\tthis.createTerminalFromOptions(profile.options, options);\n\t}\n\n\tpublic async $provideLinks(\n\t\tterminalId: number,\n\t\tline: string,\n\t): Promise<ITerminalLinkDto[]> {\n\t\tconst terminal = this.getTerminalById(terminalId);\n\t\tif (!terminal) {\n\t\t\treturn [];\n\t\t}\n\n\t\t// Discard any cached links the terminal has been holding, currently all links are released\n\t\t// when new links are provided.\n\t\tthis._terminalLinkCache.delete(terminalId);\n\n\t\tconst oldToken = this._terminalLinkCancellationSource.get(terminalId);\n\t\toldToken?.dispose(true);\n\t\tconst cancellationSource = new CancellationTokenSource();\n\t\tthis._terminalLinkCancellationSource.set(\n\t\t\tterminalId,\n\t\t\tcancellationSource,\n\t\t);\n\n\t\tconst result: ITerminalLinkDto[] = [];\n\t\tconst context: vscode.TerminalLinkContext = {\n\t\t\tterminal: terminal.value,\n\t\t\tline,\n\t\t};\n\t\tconst promises: vscode.ProviderResult<{\n\t\t\tprovider: vscode.TerminalLinkProvider;\n\t\t\tlinks: vscode.TerminalLink[];\n\t\t}>[] = [];\n\n\t\tfor (const provider of this._linkProviders) {\n\t\t\tpromises.push(\n\t\t\t\tPromises.withAsyncBody(async (r) => {\n\t\t\t\t\tcancellationSource.token.onCancellationRequested(() =>\n\t\t\t\t\t\tr({ provider, links: [] }),\n\t\t\t\t\t);\n\t\t\t\t\tconst links =\n\t\t\t\t\t\t(await provider.provideTerminalLinks(\n\t\t\t\t\t\t\tcontext,\n\t\t\t\t\t\t\tcancellationSource.token,\n\t\t\t\t\t\t)) || [];\n\t\t\t\t\tif (!cancellationSource.token.isCancellationRequested) {\n\t\t\t\t\t\tr({ provider, links });\n\t\t\t\t\t}\n\t\t\t\t}),\n\t\t\t);\n\t\t}\n\n\t\tconst provideResults = await Promise.all(promises);\n\n\t\tif (cancellationSource.token.isCancellationRequested) {\n\t\t\treturn [];\n\t\t}\n\n\t\tconst cacheLinkMap = new Map<number, ICachedLinkEntry>();\n\t\tfor (const provideResult of provideResults) {\n\t\t\tif (provideResult && provideResult.links.length > 0) {\n\t\t\t\tresult.push(\n\t\t\t\t\t...provideResult.links.map((providerLink) => {\n\t\t\t\t\t\tconst link = {\n\t\t\t\t\t\t\tid: nextLinkId++,\n\t\t\t\t\t\t\tstartIndex: providerLink.startIndex,\n\t\t\t\t\t\t\tlength: providerLink.length,\n\t\t\t\t\t\t\tlabel: providerLink.tooltip,\n\t\t\t\t\t\t};\n\t\t\t\t\t\tcacheLinkMap.set(link.id, {\n\t\t\t\t\t\t\tprovider: provideResult.provider,\n\t\t\t\t\t\t\tlink: providerLink,\n\t\t\t\t\t\t});\n\t\t\t\t\t\treturn link;\n\t\t\t\t\t}),\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\tthis._terminalLinkCache.set(terminalId, cacheLinkMap);\n\n\t\treturn result;\n\t}\n\n\t$activateLink(terminalId: number, linkId: number): void {\n\t\tconst cachedLink = this._terminalLinkCache.get(terminalId)?.get(linkId);\n\t\tif (!cachedLink) {\n\t\t\treturn;\n\t\t}\n\t\tcachedLink.provider.handleTerminalLink(cachedLink.link);\n\t}\n\n\tprivate _onProcessExit(id: number, exitCode: number | undefined): void {\n\t\tthis._bufferer.stopBuffering(id);\n\n\t\t// Remove process reference\n\t\tthis._terminalProcesses.delete(id);\n\t\tdelete this._extensionTerminalAwaitingStart[id];\n\n\t\t// Clean up process disposables\n\t\tconst processDiposable = this._terminalProcessDisposables[id];\n\t\tif (processDiposable) {\n\t\t\tprocessDiposable.dispose();\n\t\t\tdelete this._terminalProcessDisposables[id];\n\t\t}\n\t\t// Send exit event to main side\n\t\tthis._proxy.$sendProcessExit(id, exitCode);\n\t}\n\n\tpublic getTerminalById(id: number): ExtHostTerminal | null {\n\t\treturn this._getTerminalObjectById(this._terminals, id);\n\t}\n\n\tpublic getTerminalIdByApiObject(terminal: vscode.Terminal): number | null {\n\t\tconst index = this._terminals.findIndex((item) => {\n\t\t\treturn item.value === terminal;\n\t\t});\n\t\treturn index >= 0 ? index : null;\n\t}\n\n\tprivate _getTerminalObjectById<T extends ExtHostTerminal>(\n\t\tarray: T[],\n\t\tid: number,\n\t): T | null {\n\t\tconst index = this._getTerminalObjectIndexById(array, id);\n\t\treturn index !== null ? array[index] : null;\n\t}\n\n\tprivate _getTerminalObjectIndexById<T extends ExtHostTerminal>(\n\t\tarray: T[],\n\t\tid: ExtHostTerminalIdentifier,\n\t): number | null {\n\t\tconst index = array.findIndex((item) => {\n\t\t\treturn item._id === id;\n\t\t});\n\t\treturn index >= 0 ? index : null;\n\t}\n\n\tpublic getEnvironmentVariableCollection(\n\t\textension: IExtensionDescription,\n\t): IEnvironmentVariableCollection {\n\t\tlet collection = this._environmentVariableCollections.get(\n\t\t\textension.identifier.value,\n\t\t);\n\t\tif (!collection) {\n\t\t\tcollection = this._register(\n\t\t\t\tnew UnifiedEnvironmentVariableCollection(),\n\t\t\t);\n\t\t\tthis._setEnvironmentVariableCollection(\n\t\t\t\textension.identifier.value,\n\t\t\t\tcollection,\n\t\t\t);\n\t\t}\n\t\treturn collection.getScopedEnvironmentVariableCollection(undefined);\n\t}\n\n\tprivate _syncEnvironmentVariableCollection(\n\t\textensionIdentifier: string,\n\t\tcollection: UnifiedEnvironmentVariableCollection,\n\t): void {\n\t\tconst serialized = serializeEnvironmentVariableCollection(\n\t\t\tcollection.map,\n\t\t);\n\t\tconst serializedDescription = serializeEnvironmentDescriptionMap(\n\t\t\tcollection.descriptionMap,\n\t\t);\n\t\tthis._proxy.$setEnvironmentVariableCollection(\n\t\t\textensionIdentifier,\n\t\t\tcollection.persistent,\n\t\t\tserialized.length === 0 ? undefined : serialized,\n\t\t\tserializedDescription,\n\t\t);\n\t}\n\n\tpublic $initEnvironmentVariableCollections(\n\t\tcollections: [string, ISerializableEnvironmentVariableCollection][],\n\t): void {\n\t\tcollections.forEach((entry) => {\n\t\t\tconst extensionIdentifier = entry[0];\n\t\t\tconst collection = this._register(\n\t\t\t\tnew UnifiedEnvironmentVariableCollection(entry[1]),\n\t\t\t);\n\t\t\tthis._setEnvironmentVariableCollection(\n\t\t\t\textensionIdentifier,\n\t\t\t\tcollection,\n\t\t\t);\n\t\t});\n\t}\n\n\tpublic $acceptDefaultProfile(\n\t\tprofile: ITerminalProfile,\n\t\tautomationProfile: ITerminalProfile,\n\t): void {\n\t\tconst oldProfile = this._defaultProfile;\n\t\tthis._defaultProfile = profile;\n\t\tthis._defaultAutomationProfile = automationProfile;\n\t\tif (oldProfile?.path !== profile.path) {\n\t\t\tthis._onDidChangeShell.fire(profile.path);\n\t\t}\n\t}\n\n\tprivate _setEnvironmentVariableCollection(\n\t\textensionIdentifier: string,\n\t\tcollection: UnifiedEnvironmentVariableCollection,\n\t): void {\n\t\tthis._environmentVariableCollections.set(\n\t\t\textensionIdentifier,\n\t\t\tcollection,\n\t\t);\n\t\tthis._register(\n\t\t\tcollection.onDidChangeCollection(() => {\n\t\t\t\t// When any collection value changes send this immediately, this is done to ensure\n\t\t\t\t// following calls to createTerminal will be created with the new environment. It will\n\t\t\t\t// result in more noise by sending multiple updates when called but collections are\n\t\t\t\t// expected to be small.\n\t\t\t\tthis._syncEnvironmentVariableCollection(\n\t\t\t\t\textensionIdentifier,\n\t\t\t\t\tcollection,\n\t\t\t\t);\n\t\t\t}),\n\t\t);\n\t}\n}\n\n/**\n * Unified environment variable collection carrying information for all scopes, for a specific extension.\n */\nclass UnifiedEnvironmentVariableCollection extends Disposable {\n\treadonly map: Map<string, IEnvironmentVariableMutator> = new Map();\n\tprivate readonly scopedCollections: Map<\n\t\tstring,\n\t\tScopedEnvironmentVariableCollection\n\t> = new Map();\n\treadonly descriptionMap: Map<\n\t\tstring,\n\t\tIEnvironmentVariableCollectionDescription\n\t> = new Map();\n\tprivate _persistent = true;\n\n\tpublic get persistent(): boolean {\n\t\treturn this._persistent;\n\t}\n\tpublic set persistent(value: boolean) {\n\t\tthis._persistent = value;\n\t\tthis._onDidChangeCollection.fire();\n\t}\n\n\tprotected readonly _onDidChangeCollection: Emitter<void> =\n\t\tnew Emitter<void>();\n\tget onDidChangeCollection(): Event<void> {\n\t\treturn this._onDidChangeCollection && this._onDidChangeCollection.event;\n\t}\n\n\tconstructor(serialized?: ISerializableEnvironmentVariableCollection) {\n\t\tsuper();\n\t\tthis.map = new Map(serialized);\n\t}\n\n\tgetScopedEnvironmentVariableCollection(\n\t\tscope: vscode.EnvironmentVariableScope | undefined,\n\t): IEnvironmentVariableCollection {\n\t\tconst scopedCollectionKey = this.getScopeKey(scope);\n\t\tlet scopedCollection = this.scopedCollections.get(scopedCollectionKey);\n\t\tif (!scopedCollection) {\n\t\t\tscopedCollection = new ScopedEnvironmentVariableCollection(\n\t\t\t\tthis,\n\t\t\t\tscope,\n\t\t\t);\n\t\t\tthis.scopedCollections.set(scopedCollectionKey, scopedCollection);\n\t\t\tthis._register(\n\t\t\t\tscopedCollection.onDidChangeCollection(() =>\n\t\t\t\t\tthis._onDidChangeCollection.fire(),\n\t\t\t\t),\n\t\t\t);\n\t\t}\n\t\treturn scopedCollection;\n\t}\n\n\treplace(\n\t\tvariable: string,\n\t\tvalue: string,\n\t\toptions: vscode.EnvironmentVariableMutatorOptions | undefined,\n\t\tscope: vscode.EnvironmentVariableScope | undefined,\n\t): void {\n\t\tthis._setIfDiffers(variable, {\n\t\t\tvalue,\n\t\t\ttype: EnvironmentVariableMutatorType.Replace,\n\t\t\toptions: options ?? { applyAtProcessCreation: true },\n\t\t\tscope,\n\t\t});\n\t}\n\n\tappend(\n\t\tvariable: string,\n\t\tvalue: string,\n\t\toptions: vscode.EnvironmentVariableMutatorOptions | undefined,\n\t\tscope: vscode.EnvironmentVariableScope | undefined,\n\t): void {\n\t\tthis._setIfDiffers(variable, {\n\t\t\tvalue,\n\t\t\ttype: EnvironmentVariableMutatorType.Append,\n\t\t\toptions: options ?? { applyAtProcessCreation: true },\n\t\t\tscope,\n\t\t});\n\t}\n\n\tprepend(\n\t\tvariable: string,\n\t\tvalue: string,\n\t\toptions: vscode.EnvironmentVariableMutatorOptions | undefined,\n\t\tscope: vscode.EnvironmentVariableScope | undefined,\n\t): void {\n\t\tthis._setIfDiffers(variable, {\n\t\t\tvalue,\n\t\t\ttype: EnvironmentVariableMutatorType.Prepend,\n\t\t\toptions: options ?? { applyAtProcessCreation: true },\n\t\t\tscope,\n\t\t});\n\t}\n\n\tprivate _setIfDiffers(\n\t\tvariable: string,\n\t\tmutator: vscode.EnvironmentVariableMutator & {\n\t\t\tscope: vscode.EnvironmentVariableScope | undefined;\n\t\t},\n\t): void {\n\t\tif (\n\t\t\tmutator.options &&\n\t\t\tmutator.options.applyAtProcessCreation === false &&\n\t\t\t!mutator.options.applyAtShellIntegration\n\t\t) {\n\t\t\tthrow new Error(\n\t\t\t\t\"EnvironmentVariableMutatorOptions must apply at either process creation or shell integration\",\n\t\t\t);\n\t\t}\n\t\tconst key = this.getKey(variable, mutator.scope);\n\t\tconst current = this.map.get(key);\n\t\tconst newOptions = mutator.options\n\t\t\t? {\n\t\t\t\t\tapplyAtProcessCreation:\n\t\t\t\t\t\tmutator.options.applyAtProcessCreation ?? false,\n\t\t\t\t\tapplyAtShellIntegration:\n\t\t\t\t\t\tmutator.options.applyAtShellIntegration ?? false,\n\t\t\t\t}\n\t\t\t: {\n\t\t\t\t\tapplyAtProcessCreation: true,\n\t\t\t\t};\n\t\tif (\n\t\t\t!current ||\n\t\t\tcurrent.value !== mutator.value ||\n\t\t\tcurrent.type !== mutator.type ||\n\t\t\tcurrent.options?.applyAtProcessCreation !==\n\t\t\t\tnewOptions.applyAtProcessCreation ||\n\t\t\tcurrent.options?.applyAtShellIntegration !==\n\t\t\t\tnewOptions.applyAtShellIntegration ||\n\t\t\tcurrent.scope?.workspaceFolder?.index !==\n\t\t\t\tmutator.scope?.workspaceFolder?.index\n\t\t) {\n\t\t\tconst key = this.getKey(variable, mutator.scope);\n\t\t\tconst value: IEnvironmentVariableMutator = {\n\t\t\t\tvariable,\n\t\t\t\t...mutator,\n\t\t\t\toptions: newOptions,\n\t\t\t};\n\t\t\tthis.map.set(key, value);\n\t\t\tthis._onDidChangeCollection.fire();\n\t\t}\n\t}\n\n\tget(\n\t\tvariable: string,\n\t\tscope: vscode.EnvironmentVariableScope | undefined,\n\t): vscode.EnvironmentVariableMutator | undefined {\n\t\tconst key = this.getKey(variable, scope);\n\t\tconst value = this.map.get(key);\n\t\t// TODO: Set options to defaults if needed\n\t\treturn value ? convertMutator(value) : undefined;\n\t}\n\n\tprivate getKey(\n\t\tvariable: string,\n\t\tscope: vscode.EnvironmentVariableScope | undefined,\n\t) {\n\t\tconst scopeKey = this.getScopeKey(scope);\n\t\treturn scopeKey.length ? `${variable}:::${scopeKey}` : variable;\n\t}\n\n\tprivate getScopeKey(\n\t\tscope: vscode.EnvironmentVariableScope | undefined,\n\t): string {\n\t\treturn this.getWorkspaceKey(scope?.workspaceFolder) ?? \"\";\n\t}\n\n\tprivate getWorkspaceKey(\n\t\tworkspaceFolder: vscode.WorkspaceFolder | undefined,\n\t): string | undefined {\n\t\treturn workspaceFolder ? workspaceFolder.uri.toString() : undefined;\n\t}\n\n\tpublic getVariableMap(\n\t\tscope: vscode.EnvironmentVariableScope | undefined,\n\t): Map<string, vscode.EnvironmentVariableMutator> {\n\t\tconst map = new Map<string, vscode.EnvironmentVariableMutator>();\n\t\tfor (const [_, value] of this.map) {\n\t\t\tif (this.getScopeKey(value.scope) === this.getScopeKey(scope)) {\n\t\t\t\tmap.set(value.variable, convertMutator(value));\n\t\t\t}\n\t\t}\n\t\treturn map;\n\t}\n\n\tdelete(\n\t\tvariable: string,\n\t\tscope: vscode.EnvironmentVariableScope | undefined,\n\t): void {\n\t\tconst key = this.getKey(variable, scope);\n\t\tthis.map.delete(key);\n\t\tthis._onDidChangeCollection.fire();\n\t}\n\n\tclear(scope: vscode.EnvironmentVariableScope | undefined): void {\n\t\tif (scope?.workspaceFolder) {\n\t\t\tfor (const [key, mutator] of this.map) {\n\t\t\t\tif (\n\t\t\t\t\tmutator.scope?.workspaceFolder?.index ===\n\t\t\t\t\tscope.workspaceFolder.index\n\t\t\t\t) {\n\t\t\t\t\tthis.map.delete(key);\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis.clearDescription(scope);\n\t\t} else {\n\t\t\tthis.map.clear();\n\t\t\tthis.descriptionMap.clear();\n\t\t}\n\t\tthis._onDidChangeCollection.fire();\n\t}\n\n\tsetDescription(\n\t\tdescription: string | vscode.MarkdownString | undefined,\n\t\tscope: vscode.EnvironmentVariableScope | undefined,\n\t): void {\n\t\tconst key = this.getScopeKey(scope);\n\t\tconst current = this.descriptionMap.get(key);\n\t\tif (!current || current.description !== description) {\n\t\t\tlet descriptionStr: string | undefined;\n\t\t\tif (typeof description === \"string\") {\n\t\t\t\tdescriptionStr = description;\n\t\t\t} else {\n\t\t\t\t// Only take the description before the first `\\n\\n`, so that the description doesn't mess up the UI\n\t\t\t\tdescriptionStr = description?.value.split(\"\\n\\n\")[0];\n\t\t\t}\n\t\t\tconst value: IEnvironmentVariableCollectionDescription = {\n\t\t\t\tdescription: descriptionStr,\n\t\t\t\tscope,\n\t\t\t};\n\t\t\tthis.descriptionMap.set(key, value);\n\t\t\tthis._onDidChangeCollection.fire();\n\t\t}\n\t}\n\n\tpublic getDescription(\n\t\tscope: vscode.EnvironmentVariableScope | undefined,\n\t): string | vscode.MarkdownString | undefined {\n\t\tconst key = this.getScopeKey(scope);\n\t\treturn this.descriptionMap.get(key)?.description;\n\t}\n\n\tprivate clearDescription(\n\t\tscope: vscode.EnvironmentVariableScope | undefined,\n\t): void {\n\t\tconst key = this.getScopeKey(scope);\n\t\tthis.descriptionMap.delete(key);\n\t}\n}\n\nclass ScopedEnvironmentVariableCollection\n\timplements IEnvironmentVariableCollection\n{\n\tpublic get persistent(): boolean {\n\t\treturn this.collection.persistent;\n\t}\n\tpublic set persistent(value: boolean) {\n\t\tthis.collection.persistent = value;\n\t}\n\n\tprotected readonly _onDidChangeCollection = new Emitter<void>();\n\tget onDidChangeCollection(): Event<void> {\n\t\treturn this._onDidChangeCollection && this._onDidChangeCollection.event;\n\t}\n\n\tconstructor(\n\t\tprivate readonly collection: UnifiedEnvironmentVariableCollection,\n\t\tprivate readonly scope: vscode.EnvironmentVariableScope | undefined,\n\t) {}\n\n\tgetScoped(scope: vscode.EnvironmentVariableScope | undefined) {\n\t\treturn this.collection.getScopedEnvironmentVariableCollection(scope);\n\t}\n\n\treplace(\n\t\tvariable: string,\n\t\tvalue: string,\n\t\toptions?: vscode.EnvironmentVariableMutatorOptions | undefined,\n\t): void {\n\t\tthis.collection.replace(variable, value, options, this.scope);\n\t}\n\n\tappend(\n\t\tvariable: string,\n\t\tvalue: string,\n\t\toptions?: vscode.EnvironmentVariableMutatorOptions | undefined,\n\t): void {\n\t\tthis.collection.append(variable, value, options, this.scope);\n\t}\n\n\tprepend(\n\t\tvariable: string,\n\t\tvalue: string,\n\t\toptions?: vscode.EnvironmentVariableMutatorOptions | undefined,\n\t): void {\n\t\tthis.collection.prepend(variable, value, options, this.scope);\n\t}\n\n\tget(variable: string): vscode.EnvironmentVariableMutator | undefined {\n\t\treturn this.collection.get(variable, this.scope);\n\t}\n\n\tforEach(\n\t\tcallback: (\n\t\t\tvariable: string,\n\t\t\tmutator: vscode.EnvironmentVariableMutator,\n\t\t\tcollection: vscode.EnvironmentVariableCollection,\n\t\t) => any,\n\t\tthisArg?: any,\n\t): void {\n\t\tthis.collection\n\t\t\t.getVariableMap(this.scope)\n\t\t\t.forEach(\n\t\t\t\t(value, variable) =>\n\t\t\t\t\tcallback.call(thisArg, variable, value, this),\n\t\t\t\tthis.scope,\n\t\t\t);\n\t}\n\n\t[Symbol.iterator](): IterableIterator<\n\t\t[variable: string, mutator: vscode.EnvironmentVariableMutator]\n\t> {\n\t\treturn this.collection.getVariableMap(this.scope).entries();\n\t}\n\n\tdelete(variable: string): void {\n\t\tthis.collection.delete(variable, this.scope);\n\t\tthis._onDidChangeCollection.fire(undefined);\n\t}\n\n\tclear(): void {\n\t\tthis.collection.clear(this.scope);\n\t}\n\n\tset description(description: string | vscode.MarkdownString | undefined) {\n\t\tthis.collection.setDescription(description, this.scope);\n\t}\n\n\tget description(): string | vscode.MarkdownString | undefined {\n\t\treturn this.collection.getDescription(this.scope);\n\t}\n}\n\nexport class WorkerExtHostTerminalService extends BaseExtHostTerminalService {\n\tconstructor(\n\t\t@IExtHostCommands extHostCommands: IExtHostCommands,\n\t\t@IExtHostRpcService extHostRpc: IExtHostRpcService,\n\t) {\n\t\tsuper(false, extHostCommands, extHostRpc);\n\t}\n\n\tpublic createTerminal(\n\t\tname?: string,\n\t\tshellPath?: string,\n\t\tshellArgs?: string[] | string,\n\t): vscode.Terminal {\n\t\tthrow new NotSupportedError();\n\t}\n\n\tpublic createTerminalFromOptions(\n\t\toptions: vscode.TerminalOptions,\n\t\tinternalOptions?: ITerminalInternalOptions,\n\t): vscode.Terminal {\n\t\tthrow new NotSupportedError();\n\t}\n}\n\nfunction asTerminalIcon(\n\ticonPath?:\n\t\t| vscode.Uri\n\t\t| { light: vscode.Uri; dark: vscode.Uri }\n\t\t| vscode.ThemeIcon,\n): TerminalIcon | undefined {\n\tif (!iconPath || typeof iconPath === \"string\") {\n\t\treturn undefined;\n\t}\n\n\tif (!(\"id\" in iconPath)) {\n\t\treturn iconPath;\n\t}\n\n\treturn {\n\t\tid: iconPath.id,\n\t\tcolor: iconPath.color as ThemeColor,\n\t};\n}\n\nfunction asTerminalColor(color?: vscode.ThemeColor): ThemeColor | undefined {\n\treturn ThemeColor.isThemeColor(color) ? (color as ThemeColor) : undefined;\n}\n\nfunction convertMutator(\n\tmutator: IEnvironmentVariableMutator,\n): vscode.EnvironmentVariableMutator {\n\tconst newMutator = { ...mutator };\n\tdelete newMutator.scope;\n\tnewMutator.options = newMutator.options ?? undefined;\n\tdelete (newMutator as any).variable;\n\treturn newMutator as vscode.EnvironmentVariableMutator;\n}\n"],
  "mappings": "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",
  "names": ["arg", "key"]
}
