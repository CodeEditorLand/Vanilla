{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/api/common/extHostTerminalService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport type * as vscode from 'vscode';\nimport { Event, Emitter } from '../../../base/common/event.js';\nimport { ExtHostTerminalServiceShape, MainContext, MainThreadTerminalServiceShape, ITerminalDimensionsDto, ITerminalLinkDto, ExtHostTerminalIdentifier, ICommandDto, ITerminalQuickFixOpenerDto, ITerminalQuickFixTerminalCommandDto, TerminalCommandMatchResultDto, ITerminalCommandDto } from './extHost.protocol.js';\nimport { createDecorator } from '../../../platform/instantiation/common/instantiation.js';\nimport { URI } from '../../../base/common/uri.js';\nimport { IExtHostRpcService } from './extHostRpcService.js';\nimport { IDisposable, DisposableStore, Disposable, MutableDisposable } from '../../../base/common/lifecycle.js';\nimport { Disposable as VSCodeDisposable, EnvironmentVariableMutatorType, TerminalExitReason } from './extHostTypes.js';\nimport { IExtensionDescription } from '../../../platform/extensions/common/extensions.js';\nimport { localize } from '../../../nls.js';\nimport { NotSupportedError } from '../../../base/common/errors.js';\nimport { serializeEnvironmentDescriptionMap, serializeEnvironmentVariableCollection } from '../../../platform/terminal/common/environmentVariableShared.js';\nimport { CancellationTokenSource } from '../../../base/common/cancellation.js';\nimport { generateUuid } from '../../../base/common/uuid.js';\nimport { IEnvironmentVariableCollectionDescription, IEnvironmentVariableMutator, ISerializableEnvironmentVariableCollection } from '../../../platform/terminal/common/environmentVariable.js';\nimport { ICreateContributedTerminalProfileOptions, IProcessReadyEvent, IShellLaunchConfigDto, ITerminalChildProcess, ITerminalLaunchError, ITerminalProfile, TerminalIcon, TerminalLocation, IProcessProperty, ProcessPropertyType, IProcessPropertyMap } from '../../../platform/terminal/common/terminal.js';\nimport { TerminalDataBufferer } from '../../../platform/terminal/common/terminalDataBuffering.js';\nimport { ThemeColor } from '../../../base/common/themables.js';\nimport { Promises } from '../../../base/common/async.js';\nimport { EditorGroupColumn } from '../../services/editor/common/editorGroupColumn.js';\nimport { TerminalQuickFix, ViewColumn } from './extHostTypeConverters.js';\nimport { IExtHostCommands } from './extHostCommands.js';\nimport { MarshalledId } from '../../../base/common/marshallingIds.js';\nimport { ISerializedTerminalInstanceContext } from '../../contrib/terminal/common/terminal.js';\n\nexport interface IExtHostTerminalService extends ExtHostTerminalServiceShape, IDisposable {\n\n\treadonly _serviceBrand: undefined;\n\n\tactiveTerminal: vscode.Terminal | undefined;\n\tterminals: vscode.Terminal[];\n\n\treadonly onDidCloseTerminal: Event<vscode.Terminal>;\n\treadonly onDidOpenTerminal: Event<vscode.Terminal>;\n\treadonly onDidChangeActiveTerminal: Event<vscode.Terminal | undefined>;\n\treadonly onDidChangeTerminalDimensions: Event<vscode.TerminalDimensionsChangeEvent>;\n\treadonly onDidChangeTerminalState: Event<vscode.Terminal>;\n\treadonly onDidWriteTerminalData: Event<vscode.TerminalDataWriteEvent>;\n\treadonly onDidExecuteTerminalCommand: Event<vscode.TerminalExecutedCommand>;\n\treadonly onDidChangeShell: Event<string>;\n\n\tcreateTerminal(name?: string, shellPath?: string, shellArgs?: readonly string[] | string): vscode.Terminal;\n\tcreateTerminalFromOptions(options: vscode.TerminalOptions, internalOptions?: ITerminalInternalOptions): vscode.Terminal;\n\tcreateExtensionTerminal(options: vscode.ExtensionTerminalOptions): vscode.Terminal;\n\tattachPtyToTerminal(id: number, pty: vscode.Pseudoterminal): void;\n\tgetDefaultShell(useAutomationShell: boolean): string;\n\tgetDefaultShellArgs(useAutomationShell: boolean): string[] | string;\n\tregisterLinkProvider(provider: vscode.TerminalLinkProvider): vscode.Disposable;\n\tregisterProfileProvider(extension: IExtensionDescription, id: string, provider: vscode.TerminalProfileProvider): vscode.Disposable;\n\tregisterTerminalQuickFixProvider(id: string, extensionId: string, provider: vscode.TerminalQuickFixProvider): vscode.Disposable;\n\tgetEnvironmentVariableCollection(extension: IExtensionDescription): IEnvironmentVariableCollection;\n\tgetTerminalById(id: number): ExtHostTerminal | null;\n\tgetTerminalIdByApiObject(apiTerminal: vscode.Terminal): number | null;\n}\n\ninterface IEnvironmentVariableCollection extends vscode.EnvironmentVariableCollection {\n\tgetScoped(scope: vscode.EnvironmentVariableScope): vscode.EnvironmentVariableCollection;\n}\n\nexport interface ITerminalInternalOptions {\n\tcwd?: string | URI;\n\tisFeatureTerminal?: boolean;\n\tforceShellIntegration?: boolean;\n\tuseShellEnvironment?: boolean;\n\tresolvedExtHostIdentifier?: ExtHostTerminalIdentifier;\n\t/**\n\t * This location is different from the API location because it can include splitActiveTerminal,\n\t * a property we resolve internally\n\t */\n\tlocation?: TerminalLocation | { viewColumn: number; preserveState?: boolean } | { splitActiveTerminal: boolean };\n}\n\nexport const IExtHostTerminalService = createDecorator<IExtHostTerminalService>('IExtHostTerminalService');\n\nexport class ExtHostTerminal extends Disposable {\n\tprivate _disposed: boolean = false;\n\tprivate _pidPromise: Promise<number | undefined>;\n\tprivate _cols: number | undefined;\n\tprivate _pidPromiseComplete: ((value: number | undefined) => any) | undefined;\n\tprivate _rows: number | undefined;\n\tprivate _exitStatus: vscode.TerminalExitStatus | undefined;\n\tprivate _state: vscode.TerminalState = { isInteractedWith: false };\n\tprivate _selection: string | undefined;\n\n\tshellIntegration: vscode.TerminalShellIntegration | undefined;\n\n\tpublic isOpen: boolean = false;\n\n\treadonly value: vscode.Terminal;\n\n\tprotected readonly _onWillDispose = this._register(new Emitter<void>());\n\treadonly onWillDispose = this._onWillDispose.event;\n\n\tconstructor(\n\t\tprivate _proxy: MainThreadTerminalServiceShape,\n\t\tpublic _id: ExtHostTerminalIdentifier,\n\t\tprivate readonly _creationOptions: vscode.TerminalOptions | vscode.ExtensionTerminalOptions,\n\t\tprivate _name?: string,\n\t) {\n\t\tsuper();\n\n\t\tthis._creationOptions = Object.freeze(this._creationOptions);\n\t\tthis._pidPromise = new Promise<number | undefined>(c => this._pidPromiseComplete = c);\n\n\t\tconst that = this;\n\t\tthis.value = {\n\t\t\tget name(): string {\n\t\t\t\treturn that._name || '';\n\t\t\t},\n\t\t\tget processId(): Promise<number | undefined> {\n\t\t\t\treturn that._pidPromise;\n\t\t\t},\n\t\t\tget creationOptions(): Readonly<vscode.TerminalOptions | vscode.ExtensionTerminalOptions> {\n\t\t\t\treturn that._creationOptions;\n\t\t\t},\n\t\t\tget exitStatus(): vscode.TerminalExitStatus | undefined {\n\t\t\t\treturn that._exitStatus;\n\t\t\t},\n\t\t\tget state(): vscode.TerminalState {\n\t\t\t\treturn that._state;\n\t\t\t},\n\t\t\tget selection(): string | undefined {\n\t\t\t\treturn that._selection;\n\t\t\t},\n\t\t\tget shellIntegration(): vscode.TerminalShellIntegration | undefined {\n\t\t\t\treturn that.shellIntegration;\n\t\t\t},\n\t\t\tsendText(text: string, shouldExecute: boolean = true): void {\n\t\t\t\tthat._checkDisposed();\n\t\t\t\tthat._proxy.$sendText(that._id, text, shouldExecute);\n\t\t\t},\n\t\t\tshow(preserveFocus: boolean): void {\n\t\t\t\tthat._checkDisposed();\n\t\t\t\tthat._proxy.$show(that._id, preserveFocus);\n\t\t\t},\n\t\t\thide(): void {\n\t\t\t\tthat._checkDisposed();\n\t\t\t\tthat._proxy.$hide(that._id);\n\t\t\t},\n\t\t\tdispose(): void {\n\t\t\t\tif (!that._disposed) {\n\t\t\t\t\tthat._disposed = true;\n\t\t\t\t\tthat._proxy.$dispose(that._id);\n\t\t\t\t}\n\t\t\t},\n\t\t\tget dimensions(): vscode.TerminalDimensions | undefined {\n\t\t\t\tif (that._cols === undefined || that._rows === undefined) {\n\t\t\t\t\treturn undefined;\n\t\t\t\t}\n\t\t\t\treturn {\n\t\t\t\t\tcolumns: that._cols,\n\t\t\t\t\trows: that._rows\n\t\t\t\t};\n\t\t\t}\n\t\t};\n\t}\n\n\toverride dispose(): void {\n\t\tthis._onWillDispose.fire();\n\t\tsuper.dispose();\n\t}\n\n\tpublic async create(\n\t\toptions: vscode.TerminalOptions,\n\t\tinternalOptions?: ITerminalInternalOptions,\n\t): Promise<void> {\n\t\tif (typeof this._id !== 'string') {\n\t\t\tthrow new Error('Terminal has already been created');\n\t\t}\n\t\tawait this._proxy.$createTerminal(this._id, {\n\t\t\tname: options.name,\n\t\t\tshellPath: options.shellPath ?? undefined,\n\t\t\tshellArgs: options.shellArgs ?? undefined,\n\t\t\tcwd: options.cwd ?? internalOptions?.cwd ?? undefined,\n\t\t\tenv: options.env ?? undefined,\n\t\t\ticon: asTerminalIcon(options.iconPath) ?? undefined,\n\t\t\tcolor: ThemeColor.isThemeColor(options.color) ? options.color.id : undefined,\n\t\t\tinitialText: options.message ?? undefined,\n\t\t\tstrictEnv: options.strictEnv ?? undefined,\n\t\t\thideFromUser: options.hideFromUser ?? undefined,\n\t\t\tforceShellIntegration: internalOptions?.forceShellIntegration ?? undefined,\n\t\t\tisFeatureTerminal: internalOptions?.isFeatureTerminal ?? undefined,\n\t\t\tisExtensionOwnedTerminal: true,\n\t\t\tuseShellEnvironment: internalOptions?.useShellEnvironment ?? undefined,\n\t\t\tlocation: internalOptions?.location || this._serializeParentTerminal(options.location, internalOptions?.resolvedExtHostIdentifier),\n\t\t\tisTransient: options.isTransient ?? undefined,\n\t\t});\n\t}\n\n\n\tpublic async createExtensionTerminal(location?: TerminalLocation | vscode.TerminalEditorLocationOptions | vscode.TerminalSplitLocationOptions, internalOptions?: ITerminalInternalOptions, parentTerminal?: ExtHostTerminalIdentifier, iconPath?: TerminalIcon, color?: ThemeColor): Promise<number> {\n\t\tif (typeof this._id !== 'string') {\n\t\t\tthrow new Error('Terminal has already been created');\n\t\t}\n\t\tawait this._proxy.$createTerminal(this._id, {\n\t\t\tname: this._name,\n\t\t\tisExtensionCustomPtyTerminal: true,\n\t\t\ticon: iconPath,\n\t\t\tcolor: ThemeColor.isThemeColor(color) ? color.id : undefined,\n\t\t\tlocation: internalOptions?.location || this._serializeParentTerminal(location, parentTerminal),\n\t\t\tisTransient: true\n\t\t});\n\t\t// At this point, the id has been set via `$acceptTerminalOpened`\n\t\tif (typeof this._id === 'string') {\n\t\t\tthrow new Error('Terminal creation failed');\n\t\t}\n\t\treturn this._id;\n\t}\n\n\tprivate _serializeParentTerminal(location?: TerminalLocation | vscode.TerminalEditorLocationOptions | vscode.TerminalSplitLocationOptions, parentTerminal?: ExtHostTerminalIdentifier): TerminalLocation | { viewColumn: EditorGroupColumn; preserveFocus?: boolean } | { parentTerminal: ExtHostTerminalIdentifier } | undefined {\n\t\tif (typeof location === 'object') {\n\t\t\tif ('parentTerminal' in location && location.parentTerminal && parentTerminal) {\n\t\t\t\treturn { parentTerminal };\n\t\t\t}\n\n\t\t\tif ('viewColumn' in location) {\n\t\t\t\treturn { viewColumn: ViewColumn.from(location.viewColumn), preserveFocus: location.preserveFocus };\n\t\t\t}\n\n\t\t\treturn undefined;\n\t\t}\n\n\t\treturn location;\n\t}\n\n\tprivate _checkDisposed() {\n\t\tif (this._disposed) {\n\t\t\tthrow new Error('Terminal has already been disposed');\n\t\t}\n\t}\n\n\tpublic set name(name: string) {\n\t\tthis._name = name;\n\t}\n\n\tpublic setExitStatus(code: number | undefined, reason: TerminalExitReason) {\n\t\tthis._exitStatus = Object.freeze({ code, reason });\n\t}\n\n\tpublic setDimensions(cols: number, rows: number): boolean {\n\t\tif (cols === this._cols && rows === this._rows) {\n\t\t\t// Nothing changed\n\t\t\treturn false;\n\t\t}\n\t\tif (cols === 0 || rows === 0) {\n\t\t\treturn false;\n\t\t}\n\t\tthis._cols = cols;\n\t\tthis._rows = rows;\n\t\treturn true;\n\t}\n\n\tpublic setInteractedWith(): boolean {\n\t\tif (!this._state.isInteractedWith) {\n\t\t\tthis._state = { isInteractedWith: true };\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\n\tpublic setSelection(selection: string | undefined): void {\n\t\tthis._selection = selection;\n\t}\n\n\tpublic _setProcessId(processId: number | undefined): void {\n\t\t// The event may fire 2 times when the panel is restored\n\t\tif (this._pidPromiseComplete) {\n\t\t\tthis._pidPromiseComplete(processId);\n\t\t\tthis._pidPromiseComplete = undefined;\n\t\t} else {\n\t\t\t// Recreate the promise if this is the nth processId set (e.g. reused task terminals)\n\t\t\tthis._pidPromise.then(pid => {\n\t\t\t\tif (pid !== processId) {\n\t\t\t\t\tthis._pidPromise = Promise.resolve(processId);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}\n}\n\nclass ExtHostPseudoterminal implements ITerminalChildProcess {\n\treadonly id = 0;\n\treadonly shouldPersist = false;\n\n\tprivate readonly _onProcessData = new Emitter<string>();\n\tpublic readonly onProcessData: Event<string> = this._onProcessData.event;\n\tprivate readonly _onProcessReady = new Emitter<IProcessReadyEvent>();\n\tpublic get onProcessReady(): Event<IProcessReadyEvent> { return this._onProcessReady.event; }\n\tprivate readonly _onDidChangeProperty = new Emitter<IProcessProperty<any>>();\n\tpublic readonly onDidChangeProperty = this._onDidChangeProperty.event;\n\tprivate readonly _onProcessExit = new Emitter<number | undefined>();\n\tpublic readonly onProcessExit: Event<number | undefined> = this._onProcessExit.event;\n\n\tconstructor(private readonly _pty: vscode.Pseudoterminal) { }\n\n\trefreshProperty<T extends ProcessPropertyType>(property: ProcessPropertyType): Promise<IProcessPropertyMap[T]> {\n\t\tthrow new Error(`refreshProperty is not suppported in extension owned terminals. property: ${property}`);\n\t}\n\n\tupdateProperty<T extends ProcessPropertyType>(property: ProcessPropertyType, value: IProcessPropertyMap[T]): Promise<void> {\n\t\tthrow new Error(`updateProperty is not suppported in extension owned terminals. property: ${property}, value: ${value}`);\n\t}\n\n\tasync start(): Promise<undefined> {\n\t\treturn undefined;\n\t}\n\n\tshutdown(): void {\n\t\tthis._pty.close();\n\t}\n\n\tinput(data: string): void {\n\t\tthis._pty.handleInput?.(data);\n\t}\n\n\tresize(cols: number, rows: number): void {\n\t\tthis._pty.setDimensions?.({ columns: cols, rows });\n\t}\n\n\tclearBuffer(): void | Promise<void> {\n\t\t// no-op\n\t}\n\n\tasync processBinary(data: string): Promise<void> {\n\t\t// No-op, processBinary is not supported in extension owned terminals.\n\t}\n\n\tacknowledgeDataEvent(charCount: number): void {\n\t\t// No-op, flow control is not supported in extension owned terminals. If this is ever\n\t\t// implemented it will need new pause and resume VS Code APIs.\n\t}\n\n\tasync setUnicodeVersion(version: '6' | '11'): Promise<void> {\n\t\t// No-op, xterm-headless isn't used for extension owned terminals.\n\t}\n\n\tgetInitialCwd(): Promise<string> {\n\t\treturn Promise.resolve('');\n\t}\n\n\tgetCwd(): Promise<string> {\n\t\treturn Promise.resolve('');\n\t}\n\n\tstartSendingEvents(initialDimensions: ITerminalDimensionsDto | undefined): void {\n\t\t// Attach the listeners\n\t\tthis._pty.onDidWrite(e => this._onProcessData.fire(e));\n\t\tthis._pty.onDidClose?.((e: number | void = undefined) => {\n\t\t\tthis._onProcessExit.fire(e === void 0 ? undefined : e);\n\t\t});\n\t\tthis._pty.onDidOverrideDimensions?.(e => {\n\t\t\tif (e) {\n\t\t\t\tthis._onDidChangeProperty.fire({ type: ProcessPropertyType.OverrideDimensions, value: { cols: e.columns, rows: e.rows } });\n\t\t\t}\n\t\t});\n\t\tthis._pty.onDidChangeName?.(title => {\n\t\t\tthis._onDidChangeProperty.fire({ type: ProcessPropertyType.Title, value: title });\n\t\t});\n\n\t\tthis._pty.open(initialDimensions ? initialDimensions : undefined);\n\n\t\tif (initialDimensions) {\n\t\t\tthis._pty.setDimensions?.(initialDimensions);\n\t\t}\n\n\t\tthis._onProcessReady.fire({ pid: -1, cwd: '', windowsPty: undefined });\n\t}\n}\n\nlet nextLinkId = 1;\n\ninterface ICachedLinkEntry {\n\tprovider: vscode.TerminalLinkProvider;\n\tlink: vscode.TerminalLink;\n}\n\nexport abstract class BaseExtHostTerminalService extends Disposable implements IExtHostTerminalService, ExtHostTerminalServiceShape {\n\n\treadonly _serviceBrand: undefined;\n\n\tprotected _proxy: MainThreadTerminalServiceShape;\n\tprotected _activeTerminal: ExtHostTerminal | undefined;\n\tprotected _terminals: ExtHostTerminal[] = [];\n\tprotected _terminalProcesses: Map<number, ITerminalChildProcess> = new Map();\n\tprotected _terminalProcessDisposables: { [id: number]: IDisposable } = {};\n\tprotected _extensionTerminalAwaitingStart: { [id: number]: { initialDimensions: ITerminalDimensionsDto | undefined } | undefined } = {};\n\tprotected _getTerminalPromises: { [id: number]: Promise<ExtHostTerminal | undefined> } = {};\n\tprotected _environmentVariableCollections: Map<string, UnifiedEnvironmentVariableCollection> = new Map();\n\tprivate _defaultProfile: ITerminalProfile | undefined;\n\tprivate _defaultAutomationProfile: ITerminalProfile | undefined;\n\tprivate readonly _lastQuickFixCommands: MutableDisposable<IDisposable> = this._register(new MutableDisposable());\n\n\tprivate readonly _bufferer: TerminalDataBufferer;\n\tprivate readonly _linkProviders: Set<vscode.TerminalLinkProvider> = new Set();\n\tprivate readonly _profileProviders: Map<string, vscode.TerminalProfileProvider> = new Map();\n\tprivate readonly _quickFixProviders: Map<string, vscode.TerminalQuickFixProvider> = new Map();\n\tprivate readonly _terminalLinkCache: Map<number, Map<number, ICachedLinkEntry>> = new Map();\n\tprivate readonly _terminalLinkCancellationSource: Map<number, CancellationTokenSource> = new Map();\n\n\tpublic get activeTerminal(): vscode.Terminal | undefined { return this._activeTerminal?.value; }\n\tpublic get terminals(): vscode.Terminal[] { return this._terminals.map(term => term.value); }\n\n\tprotected readonly _onDidCloseTerminal = new Emitter<vscode.Terminal>();\n\treadonly onDidCloseTerminal = this._onDidCloseTerminal.event;\n\tprotected readonly _onDidOpenTerminal = new Emitter<vscode.Terminal>();\n\treadonly onDidOpenTerminal = this._onDidOpenTerminal.event;\n\tprotected readonly _onDidChangeActiveTerminal = new Emitter<vscode.Terminal | undefined>();\n\treadonly onDidChangeActiveTerminal = this._onDidChangeActiveTerminal.event;\n\tprotected readonly _onDidChangeTerminalDimensions = new Emitter<vscode.TerminalDimensionsChangeEvent>();\n\treadonly onDidChangeTerminalDimensions = this._onDidChangeTerminalDimensions.event;\n\tprotected readonly _onDidChangeTerminalState = new Emitter<vscode.Terminal>();\n\treadonly onDidChangeTerminalState = this._onDidChangeTerminalState.event;\n\tprotected readonly _onDidChangeShell = new Emitter<string>();\n\treadonly onDidChangeShell = this._onDidChangeShell.event;\n\n\tprotected readonly _onDidWriteTerminalData = new Emitter<vscode.TerminalDataWriteEvent>({\n\t\tonWillAddFirstListener: () => this._proxy.$startSendingDataEvents(),\n\t\tonDidRemoveLastListener: () => this._proxy.$stopSendingDataEvents()\n\t});\n\treadonly onDidWriteTerminalData = this._onDidWriteTerminalData.event;\n\tprotected readonly _onDidExecuteCommand = new Emitter<vscode.TerminalExecutedCommand>({\n\t\tonWillAddFirstListener: () => this._proxy.$startSendingCommandEvents(),\n\t\tonDidRemoveLastListener: () => this._proxy.$stopSendingCommandEvents()\n\t});\n\treadonly onDidExecuteTerminalCommand = this._onDidExecuteCommand.event;\n\n\tconstructor(\n\t\tsupportsProcesses: boolean,\n\t\t@IExtHostCommands private readonly _extHostCommands: IExtHostCommands,\n\t\t@IExtHostRpcService extHostRpc: IExtHostRpcService\n\t) {\n\t\tsuper();\n\t\tthis._proxy = extHostRpc.getProxy(MainContext.MainThreadTerminalService);\n\t\tthis._bufferer = new TerminalDataBufferer(this._proxy.$sendProcessData);\n\t\tthis._proxy.$registerProcessSupport(supportsProcesses);\n\t\tthis._extHostCommands.registerArgumentProcessor({\n\t\t\tprocessArgument: arg => {\n\t\t\t\tconst deserialize = (arg: any) => {\n\t\t\t\t\tconst cast = arg as ISerializedTerminalInstanceContext;\n\t\t\t\t\treturn this.getTerminalById(cast.instanceId)?.value;\n\t\t\t\t};\n\t\t\t\tswitch (arg?.$mid) {\n\t\t\t\t\tcase MarshalledId.TerminalContext: return deserialize(arg);\n\t\t\t\t\tdefault: {\n\t\t\t\t\t\t// Do array transformation in place as this is a hot path\n\t\t\t\t\t\tif (Array.isArray(arg)) {\n\t\t\t\t\t\t\tfor (let i = 0; i < arg.length; i++) {\n\t\t\t\t\t\t\t\tif (arg[i].$mid === MarshalledId.TerminalContext) {\n\t\t\t\t\t\t\t\t\targ[i] = deserialize(arg[i]);\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t// Probably something else, so exit early\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn arg;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\tthis._register({\n\t\t\tdispose: () => {\n\t\t\t\tfor (const [_, terminalProcess] of this._terminalProcesses) {\n\t\t\t\t\tterminalProcess.shutdown(true);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n\n\tpublic abstract createTerminal(name?: string, shellPath?: string, shellArgs?: string[] | string): vscode.Terminal;\n\tpublic abstract createTerminalFromOptions(options: vscode.TerminalOptions, internalOptions?: ITerminalInternalOptions): vscode.Terminal;\n\n\tpublic getDefaultShell(useAutomationShell: boolean): string {\n\t\tconst profile = useAutomationShell ? this._defaultAutomationProfile : this._defaultProfile;\n\t\treturn profile?.path || '';\n\t}\n\n\tpublic getDefaultShellArgs(useAutomationShell: boolean): string[] | string {\n\t\tconst profile = useAutomationShell ? this._defaultAutomationProfile : this._defaultProfile;\n\t\treturn profile?.args || [];\n\t}\n\n\tpublic createExtensionTerminal(options: vscode.ExtensionTerminalOptions, internalOptions?: ITerminalInternalOptions): vscode.Terminal {\n\t\tconst terminal = new ExtHostTerminal(this._proxy, generateUuid(), options, options.name);\n\t\tconst p = new ExtHostPseudoterminal(options.pty);\n\t\tterminal.createExtensionTerminal(options.location, internalOptions, this._serializeParentTerminal(options, internalOptions).resolvedExtHostIdentifier, asTerminalIcon(options.iconPath), asTerminalColor(options.color)).then(id => {\n\t\t\tconst disposable = this._setupExtHostProcessListeners(id, p);\n\t\t\tthis._terminalProcessDisposables[id] = disposable;\n\t\t});\n\t\tthis._terminals.push(terminal);\n\t\treturn terminal.value;\n\t}\n\n\tprotected _serializeParentTerminal(options: vscode.TerminalOptions, internalOptions?: ITerminalInternalOptions): ITerminalInternalOptions {\n\t\tinternalOptions = internalOptions ? internalOptions : {};\n\t\tif (options.location && typeof options.location === 'object' && 'parentTerminal' in options.location) {\n\t\t\tconst parentTerminal = options.location.parentTerminal;\n\t\t\tif (parentTerminal) {\n\t\t\t\tconst parentExtHostTerminal = this._terminals.find(t => t.value === parentTerminal);\n\t\t\t\tif (parentExtHostTerminal) {\n\t\t\t\t\tinternalOptions.resolvedExtHostIdentifier = parentExtHostTerminal._id;\n\t\t\t\t}\n\t\t\t}\n\t\t} else if (options.location && typeof options.location !== 'object') {\n\t\t\tinternalOptions.location = options.location;\n\t\t} else if (internalOptions.location && typeof internalOptions.location === 'object' && 'splitActiveTerminal' in internalOptions.location) {\n\t\t\tinternalOptions.location = { splitActiveTerminal: true };\n\t\t}\n\t\treturn internalOptions;\n\t}\n\n\tpublic attachPtyToTerminal(id: number, pty: vscode.Pseudoterminal): void {\n\t\tconst terminal = this.getTerminalById(id);\n\t\tif (!terminal) {\n\t\t\tthrow new Error(`Cannot resolve terminal with id ${id} for virtual process`);\n\t\t}\n\t\tconst p = new ExtHostPseudoterminal(pty);\n\t\tconst disposable = this._setupExtHostProcessListeners(id, p);\n\t\tthis._terminalProcessDisposables[id] = disposable;\n\t}\n\n\tpublic async $acceptActiveTerminalChanged(id: number | null): Promise<void> {\n\t\tconst original = this._activeTerminal;\n\t\tif (id === null) {\n\t\t\tthis._activeTerminal = undefined;\n\t\t\tif (original !== this._activeTerminal) {\n\t\t\t\tthis._onDidChangeActiveTerminal.fire(this._activeTerminal);\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\t\tconst terminal = this.getTerminalById(id);\n\t\tif (terminal) {\n\t\t\tthis._activeTerminal = terminal;\n\t\t\tif (original !== this._activeTerminal) {\n\t\t\t\tthis._onDidChangeActiveTerminal.fire(this._activeTerminal.value);\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic async $acceptTerminalProcessData(id: number, data: string): Promise<void> {\n\t\tconst terminal = this.getTerminalById(id);\n\t\tif (terminal) {\n\t\t\tthis._onDidWriteTerminalData.fire({ terminal: terminal.value, data });\n\t\t}\n\t}\n\n\tpublic async $acceptTerminalDimensions(id: number, cols: number, rows: number): Promise<void> {\n\t\tconst terminal = this.getTerminalById(id);\n\t\tif (terminal) {\n\t\t\tif (terminal.setDimensions(cols, rows)) {\n\t\t\t\tthis._onDidChangeTerminalDimensions.fire({\n\t\t\t\t\tterminal: terminal.value,\n\t\t\t\t\tdimensions: terminal.value.dimensions as vscode.TerminalDimensions\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic async $acceptDidExecuteCommand(id: number, command: ITerminalCommandDto): Promise<void> {\n\t\tconst terminal = this.getTerminalById(id);\n\t\tif (terminal) {\n\t\t\tthis._onDidExecuteCommand.fire({ terminal: terminal.value, ...command });\n\t\t}\n\t}\n\n\tpublic async $acceptTerminalMaximumDimensions(id: number, cols: number, rows: number): Promise<void> {\n\t\t// Extension pty terminal only - when virtual process resize fires it means that the\n\t\t// terminal's maximum dimensions changed\n\t\tthis._terminalProcesses.get(id)?.resize(cols, rows);\n\t}\n\n\tpublic async $acceptTerminalTitleChange(id: number, name: string): Promise<void> {\n\t\tconst terminal = this.getTerminalById(id);\n\t\tif (terminal) {\n\t\t\tterminal.name = name;\n\t\t}\n\t}\n\n\tpublic async $acceptTerminalClosed(id: number, exitCode: number | undefined, exitReason: TerminalExitReason): Promise<void> {\n\t\tconst index = this._getTerminalObjectIndexById(this._terminals, id);\n\t\tif (index !== null) {\n\t\t\tconst terminal = this._terminals.splice(index, 1)[0];\n\t\t\tterminal.setExitStatus(exitCode, exitReason);\n\t\t\tthis._onDidCloseTerminal.fire(terminal.value);\n\t\t}\n\t}\n\n\tpublic $acceptTerminalOpened(id: number, extHostTerminalId: string | undefined, name: string, shellLaunchConfigDto: IShellLaunchConfigDto): void {\n\t\tif (extHostTerminalId) {\n\t\t\t// Resolve with the renderer generated id\n\t\t\tconst index = this._getTerminalObjectIndexById(this._terminals, extHostTerminalId);\n\t\t\tif (index !== null) {\n\t\t\t\t// The terminal has already been created (via createTerminal*), only fire the event\n\t\t\t\tthis._terminals[index]._id = id;\n\t\t\t\tthis._onDidOpenTerminal.fire(this.terminals[index]);\n\t\t\t\tthis._terminals[index].isOpen = true;\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\tconst creationOptions: vscode.TerminalOptions = {\n\t\t\tname: shellLaunchConfigDto.name,\n\t\t\tshellPath: shellLaunchConfigDto.executable,\n\t\t\tshellArgs: shellLaunchConfigDto.args,\n\t\t\tcwd: typeof shellLaunchConfigDto.cwd === 'string' ? shellLaunchConfigDto.cwd : URI.revive(shellLaunchConfigDto.cwd),\n\t\t\tenv: shellLaunchConfigDto.env,\n\t\t\thideFromUser: shellLaunchConfigDto.hideFromUser\n\t\t};\n\t\tconst terminal = new ExtHostTerminal(this._proxy, id, creationOptions, name);\n\t\tthis._terminals.push(terminal);\n\t\tthis._onDidOpenTerminal.fire(terminal.value);\n\t\tterminal.isOpen = true;\n\t}\n\n\tpublic async $acceptTerminalProcessId(id: number, processId: number): Promise<void> {\n\t\tconst terminal = this.getTerminalById(id);\n\t\tterminal?._setProcessId(processId);\n\t}\n\n\tpublic async $startExtensionTerminal(id: number, initialDimensions: ITerminalDimensionsDto | undefined): Promise<ITerminalLaunchError | undefined> {\n\t\t// Make sure the ExtHostTerminal exists so onDidOpenTerminal has fired before we call\n\t\t// Pseudoterminal.start\n\t\tconst terminal = this.getTerminalById(id);\n\t\tif (!terminal) {\n\t\t\treturn { message: localize('launchFail.idMissingOnExtHost', \"Could not find the terminal with id {0} on the extension host\", id) };\n\t\t}\n\n\t\t// Wait for onDidOpenTerminal to fire\n\t\tif (!terminal.isOpen) {\n\t\t\tawait new Promise<void>(r => {\n\t\t\t\t// Ensure open is called after onDidOpenTerminal\n\t\t\t\tconst listener = this.onDidOpenTerminal(async e => {\n\t\t\t\t\tif (e === terminal.value) {\n\t\t\t\t\t\tlistener.dispose();\n\t\t\t\t\t\tr();\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\n\t\tconst terminalProcess = this._terminalProcesses.get(id);\n\t\tif (terminalProcess) {\n\t\t\t(terminalProcess as ExtHostPseudoterminal).startSendingEvents(initialDimensions);\n\t\t} else {\n\t\t\t// Defer startSendingEvents call to when _setupExtHostProcessListeners is called\n\t\t\tthis._extensionTerminalAwaitingStart[id] = { initialDimensions };\n\t\t}\n\n\t\treturn undefined;\n\t}\n\n\tprotected _setupExtHostProcessListeners(id: number, p: ITerminalChildProcess): IDisposable {\n\t\tconst disposables = new DisposableStore();\n\t\tdisposables.add(p.onProcessReady(e => this._proxy.$sendProcessReady(id, e.pid, e.cwd, e.windowsPty)));\n\t\tdisposables.add(p.onDidChangeProperty(property => this._proxy.$sendProcessProperty(id, property)));\n\n\t\t// Buffer data events to reduce the amount of messages going to the renderer\n\t\tthis._bufferer.startBuffering(id, p.onProcessData);\n\t\tdisposables.add(p.onProcessExit(exitCode => this._onProcessExit(id, exitCode)));\n\t\tthis._terminalProcesses.set(id, p);\n\n\t\tconst awaitingStart = this._extensionTerminalAwaitingStart[id];\n\t\tif (awaitingStart && p instanceof ExtHostPseudoterminal) {\n\t\t\tp.startSendingEvents(awaitingStart.initialDimensions);\n\t\t\tdelete this._extensionTerminalAwaitingStart[id];\n\t\t}\n\n\t\treturn disposables;\n\t}\n\n\tpublic $acceptProcessAckDataEvent(id: number, charCount: number): void {\n\t\tthis._terminalProcesses.get(id)?.acknowledgeDataEvent(charCount);\n\t}\n\n\tpublic $acceptProcessInput(id: number, data: string): void {\n\t\tthis._terminalProcesses.get(id)?.input(data);\n\t}\n\n\tpublic $acceptTerminalInteraction(id: number): void {\n\t\tconst terminal = this.getTerminalById(id);\n\t\tif (terminal?.setInteractedWith()) {\n\t\t\tthis._onDidChangeTerminalState.fire(terminal.value);\n\t\t}\n\t}\n\n\tpublic $acceptTerminalSelection(id: number, selection: string | undefined): void {\n\t\tthis.getTerminalById(id)?.setSelection(selection);\n\t}\n\n\tpublic $acceptProcessResize(id: number, cols: number, rows: number): void {\n\t\ttry {\n\t\t\tthis._terminalProcesses.get(id)?.resize(cols, rows);\n\t\t} catch (error) {\n\t\t\t// We tried to write to a closed pipe / channel.\n\t\t\tif (error.code !== 'EPIPE' && error.code !== 'ERR_IPC_CHANNEL_CLOSED') {\n\t\t\t\tthrow (error);\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic $acceptProcessShutdown(id: number, immediate: boolean): void {\n\t\tthis._terminalProcesses.get(id)?.shutdown(immediate);\n\t}\n\n\tpublic $acceptProcessRequestInitialCwd(id: number): void {\n\t\tthis._terminalProcesses.get(id)?.getInitialCwd().then(initialCwd => this._proxy.$sendProcessProperty(id, { type: ProcessPropertyType.InitialCwd, value: initialCwd }));\n\t}\n\n\tpublic $acceptProcessRequestCwd(id: number): void {\n\t\tthis._terminalProcesses.get(id)?.getCwd().then(cwd => this._proxy.$sendProcessProperty(id, { type: ProcessPropertyType.Cwd, value: cwd }));\n\t}\n\n\tpublic $acceptProcessRequestLatency(id: number): Promise<number> {\n\t\treturn Promise.resolve(id);\n\t}\n\n\tpublic registerLinkProvider(provider: vscode.TerminalLinkProvider): vscode.Disposable {\n\t\tthis._linkProviders.add(provider);\n\t\tif (this._linkProviders.size === 1) {\n\t\t\tthis._proxy.$startLinkProvider();\n\t\t}\n\t\treturn new VSCodeDisposable(() => {\n\t\t\tthis._linkProviders.delete(provider);\n\t\t\tif (this._linkProviders.size === 0) {\n\t\t\t\tthis._proxy.$stopLinkProvider();\n\t\t\t}\n\t\t});\n\t}\n\n\n\tpublic registerProfileProvider(extension: IExtensionDescription, id: string, provider: vscode.TerminalProfileProvider): vscode.Disposable {\n\t\tif (this._profileProviders.has(id)) {\n\t\t\tthrow new Error(`Terminal profile provider \"${id}\" already registered`);\n\t\t}\n\t\tthis._profileProviders.set(id, provider);\n\t\tthis._proxy.$registerProfileProvider(id, extension.identifier.value);\n\t\treturn new VSCodeDisposable(() => {\n\t\t\tthis._profileProviders.delete(id);\n\t\t\tthis._proxy.$unregisterProfileProvider(id);\n\t\t});\n\t}\n\n\tpublic registerTerminalQuickFixProvider(id: string, extensionId: string, provider: vscode.TerminalQuickFixProvider): vscode.Disposable {\n\t\tif (this._quickFixProviders.has(id)) {\n\t\t\tthrow new Error(`Terminal quick fix provider \"${id}\" is already registered`);\n\t\t}\n\t\tthis._quickFixProviders.set(id, provider);\n\t\tthis._proxy.$registerQuickFixProvider(id, extensionId);\n\t\treturn new VSCodeDisposable(() => {\n\t\t\tthis._quickFixProviders.delete(id);\n\t\t\tthis._proxy.$unregisterQuickFixProvider(id);\n\t\t});\n\t}\n\n\tpublic async $provideTerminalQuickFixes(id: string, matchResult: TerminalCommandMatchResultDto): Promise<(ITerminalQuickFixTerminalCommandDto | ITerminalQuickFixOpenerDto | ICommandDto)[] | ITerminalQuickFixTerminalCommandDto | ITerminalQuickFixOpenerDto | ICommandDto | undefined> {\n\t\tconst token = new CancellationTokenSource().token;\n\t\tif (token.isCancellationRequested) {\n\t\t\treturn;\n\t\t}\n\t\tconst provider = this._quickFixProviders.get(id);\n\t\tif (!provider) {\n\t\t\treturn;\n\t\t}\n\t\tconst quickFixes = await provider.provideTerminalQuickFixes(matchResult, token);\n\t\tif (quickFixes === null || (Array.isArray(quickFixes) && quickFixes.length === 0)) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\tconst store = new DisposableStore();\n\t\tthis._lastQuickFixCommands.value = store;\n\n\t\t// Single\n\t\tif (!Array.isArray(quickFixes)) {\n\t\t\treturn quickFixes ? TerminalQuickFix.from(quickFixes, this._extHostCommands.converter, store) : undefined;\n\t\t}\n\n\t\t// Many\n\t\tconst result = [];\n\t\tfor (const fix of quickFixes) {\n\t\t\tconst converted = TerminalQuickFix.from(fix, this._extHostCommands.converter, store);\n\t\t\tif (converted) {\n\t\t\t\tresult.push(converted);\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n\n\tpublic async $createContributedProfileTerminal(id: string, options: ICreateContributedTerminalProfileOptions): Promise<void> {\n\t\tconst token = new CancellationTokenSource().token;\n\t\tlet profile = await this._profileProviders.get(id)?.provideTerminalProfile(token);\n\t\tif (token.isCancellationRequested) {\n\t\t\treturn;\n\t\t}\n\t\tif (profile && !('options' in profile)) {\n\t\t\tprofile = { options: profile };\n\t\t}\n\n\t\tif (!profile || !('options' in profile)) {\n\t\t\tthrow new Error(`No terminal profile options provided for id \"${id}\"`);\n\t\t}\n\n\t\tif ('pty' in profile.options) {\n\t\t\tthis.createExtensionTerminal(profile.options, options);\n\t\t\treturn;\n\t\t}\n\t\tthis.createTerminalFromOptions(profile.options, options);\n\t}\n\n\tpublic async $provideLinks(terminalId: number, line: string): Promise<ITerminalLinkDto[]> {\n\t\tconst terminal = this.getTerminalById(terminalId);\n\t\tif (!terminal) {\n\t\t\treturn [];\n\t\t}\n\n\t\t// Discard any cached links the terminal has been holding, currently all links are released\n\t\t// when new links are provided.\n\t\tthis._terminalLinkCache.delete(terminalId);\n\n\t\tconst oldToken = this._terminalLinkCancellationSource.get(terminalId);\n\t\toldToken?.dispose(true);\n\t\tconst cancellationSource = new CancellationTokenSource();\n\t\tthis._terminalLinkCancellationSource.set(terminalId, cancellationSource);\n\n\t\tconst result: ITerminalLinkDto[] = [];\n\t\tconst context: vscode.TerminalLinkContext = { terminal: terminal.value, line };\n\t\tconst promises: vscode.ProviderResult<{ provider: vscode.TerminalLinkProvider; links: vscode.TerminalLink[] }>[] = [];\n\n\t\tfor (const provider of this._linkProviders) {\n\t\t\tpromises.push(Promises.withAsyncBody(async r => {\n\t\t\t\tcancellationSource.token.onCancellationRequested(() => r({ provider, links: [] }));\n\t\t\t\tconst links = (await provider.provideTerminalLinks(context, cancellationSource.token)) || [];\n\t\t\t\tif (!cancellationSource.token.isCancellationRequested) {\n\t\t\t\t\tr({ provider, links });\n\t\t\t\t}\n\t\t\t}));\n\t\t}\n\n\t\tconst provideResults = await Promise.all(promises);\n\n\t\tif (cancellationSource.token.isCancellationRequested) {\n\t\t\treturn [];\n\t\t}\n\n\t\tconst cacheLinkMap = new Map<number, ICachedLinkEntry>();\n\t\tfor (const provideResult of provideResults) {\n\t\t\tif (provideResult && provideResult.links.length > 0) {\n\t\t\t\tresult.push(...provideResult.links.map(providerLink => {\n\t\t\t\t\tconst link = {\n\t\t\t\t\t\tid: nextLinkId++,\n\t\t\t\t\t\tstartIndex: providerLink.startIndex,\n\t\t\t\t\t\tlength: providerLink.length,\n\t\t\t\t\t\tlabel: providerLink.tooltip\n\t\t\t\t\t};\n\t\t\t\t\tcacheLinkMap.set(link.id, {\n\t\t\t\t\t\tprovider: provideResult.provider,\n\t\t\t\t\t\tlink: providerLink\n\t\t\t\t\t});\n\t\t\t\t\treturn link;\n\t\t\t\t}));\n\t\t\t}\n\t\t}\n\n\t\tthis._terminalLinkCache.set(terminalId, cacheLinkMap);\n\n\t\treturn result;\n\t}\n\n\t$activateLink(terminalId: number, linkId: number): void {\n\t\tconst cachedLink = this._terminalLinkCache.get(terminalId)?.get(linkId);\n\t\tif (!cachedLink) {\n\t\t\treturn;\n\t\t}\n\t\tcachedLink.provider.handleTerminalLink(cachedLink.link);\n\t}\n\n\tprivate _onProcessExit(id: number, exitCode: number | undefined): void {\n\t\tthis._bufferer.stopBuffering(id);\n\n\t\t// Remove process reference\n\t\tthis._terminalProcesses.delete(id);\n\t\tdelete this._extensionTerminalAwaitingStart[id];\n\n\t\t// Clean up process disposables\n\t\tconst processDiposable = this._terminalProcessDisposables[id];\n\t\tif (processDiposable) {\n\t\t\tprocessDiposable.dispose();\n\t\t\tdelete this._terminalProcessDisposables[id];\n\t\t}\n\t\t// Send exit event to main side\n\t\tthis._proxy.$sendProcessExit(id, exitCode);\n\t}\n\n\tpublic getTerminalById(id: number): ExtHostTerminal | null {\n\t\treturn this._getTerminalObjectById(this._terminals, id);\n\t}\n\n\tpublic getTerminalIdByApiObject(terminal: vscode.Terminal): number | null {\n\t\tconst index = this._terminals.findIndex(item => {\n\t\t\treturn item.value === terminal;\n\t\t});\n\t\treturn index >= 0 ? index : null;\n\t}\n\n\tprivate _getTerminalObjectById<T extends ExtHostTerminal>(array: T[], id: number): T | null {\n\t\tconst index = this._getTerminalObjectIndexById(array, id);\n\t\treturn index !== null ? array[index] : null;\n\t}\n\n\tprivate _getTerminalObjectIndexById<T extends ExtHostTerminal>(array: T[], id: ExtHostTerminalIdentifier): number | null {\n\t\tconst index = array.findIndex(item => {\n\t\t\treturn item._id === id;\n\t\t});\n\t\treturn index >= 0 ? index : null;\n\t}\n\n\tpublic getEnvironmentVariableCollection(extension: IExtensionDescription): IEnvironmentVariableCollection {\n\t\tlet collection = this._environmentVariableCollections.get(extension.identifier.value);\n\t\tif (!collection) {\n\t\t\tcollection = this._register(new UnifiedEnvironmentVariableCollection());\n\t\t\tthis._setEnvironmentVariableCollection(extension.identifier.value, collection);\n\t\t}\n\t\treturn collection.getScopedEnvironmentVariableCollection(undefined);\n\t}\n\n\tprivate _syncEnvironmentVariableCollection(extensionIdentifier: string, collection: UnifiedEnvironmentVariableCollection): void {\n\t\tconst serialized = serializeEnvironmentVariableCollection(collection.map);\n\t\tconst serializedDescription = serializeEnvironmentDescriptionMap(collection.descriptionMap);\n\t\tthis._proxy.$setEnvironmentVariableCollection(extensionIdentifier, collection.persistent, serialized.length === 0 ? undefined : serialized, serializedDescription);\n\t}\n\n\tpublic $initEnvironmentVariableCollections(collections: [string, ISerializableEnvironmentVariableCollection][]): void {\n\t\tcollections.forEach(entry => {\n\t\t\tconst extensionIdentifier = entry[0];\n\t\t\tconst collection = this._register(new UnifiedEnvironmentVariableCollection(entry[1]));\n\t\t\tthis._setEnvironmentVariableCollection(extensionIdentifier, collection);\n\t\t});\n\t}\n\n\tpublic $acceptDefaultProfile(profile: ITerminalProfile, automationProfile: ITerminalProfile): void {\n\t\tconst oldProfile = this._defaultProfile;\n\t\tthis._defaultProfile = profile;\n\t\tthis._defaultAutomationProfile = automationProfile;\n\t\tif (oldProfile?.path !== profile.path) {\n\t\t\tthis._onDidChangeShell.fire(profile.path);\n\t\t}\n\t}\n\n\tprivate _setEnvironmentVariableCollection(extensionIdentifier: string, collection: UnifiedEnvironmentVariableCollection): void {\n\t\tthis._environmentVariableCollections.set(extensionIdentifier, collection);\n\t\tthis._register(collection.onDidChangeCollection(() => {\n\t\t\t// When any collection value changes send this immediately, this is done to ensure\n\t\t\t// following calls to createTerminal will be created with the new environment. It will\n\t\t\t// result in more noise by sending multiple updates when called but collections are\n\t\t\t// expected to be small.\n\t\t\tthis._syncEnvironmentVariableCollection(extensionIdentifier, collection);\n\t\t}));\n\t}\n}\n\n/**\n * Unified environment variable collection carrying information for all scopes, for a specific extension.\n */\nclass UnifiedEnvironmentVariableCollection extends Disposable {\n\treadonly map: Map<string, IEnvironmentVariableMutator> = new Map();\n\tprivate readonly scopedCollections: Map<string, ScopedEnvironmentVariableCollection> = new Map();\n\treadonly descriptionMap: Map<string, IEnvironmentVariableCollectionDescription> = new Map();\n\tprivate _persistent: boolean = true;\n\n\tpublic get persistent(): boolean { return this._persistent; }\n\tpublic set persistent(value: boolean) {\n\t\tthis._persistent = value;\n\t\tthis._onDidChangeCollection.fire();\n\t}\n\n\tprotected readonly _onDidChangeCollection: Emitter<void> = new Emitter<void>();\n\tget onDidChangeCollection(): Event<void> { return this._onDidChangeCollection && this._onDidChangeCollection.event; }\n\n\tconstructor(\n\t\tserialized?: ISerializableEnvironmentVariableCollection\n\t) {\n\t\tsuper();\n\t\tthis.map = new Map(serialized);\n\t}\n\n\tgetScopedEnvironmentVariableCollection(scope: vscode.EnvironmentVariableScope | undefined): IEnvironmentVariableCollection {\n\t\tconst scopedCollectionKey = this.getScopeKey(scope);\n\t\tlet scopedCollection = this.scopedCollections.get(scopedCollectionKey);\n\t\tif (!scopedCollection) {\n\t\t\tscopedCollection = new ScopedEnvironmentVariableCollection(this, scope);\n\t\t\tthis.scopedCollections.set(scopedCollectionKey, scopedCollection);\n\t\t\tthis._register(scopedCollection.onDidChangeCollection(() => this._onDidChangeCollection.fire()));\n\t\t}\n\t\treturn scopedCollection;\n\t}\n\n\treplace(variable: string, value: string, options: vscode.EnvironmentVariableMutatorOptions | undefined, scope: vscode.EnvironmentVariableScope | undefined): void {\n\t\tthis._setIfDiffers(variable, { value, type: EnvironmentVariableMutatorType.Replace, options: options ?? { applyAtProcessCreation: true }, scope });\n\t}\n\n\tappend(variable: string, value: string, options: vscode.EnvironmentVariableMutatorOptions | undefined, scope: vscode.EnvironmentVariableScope | undefined): void {\n\t\tthis._setIfDiffers(variable, { value, type: EnvironmentVariableMutatorType.Append, options: options ?? { applyAtProcessCreation: true }, scope });\n\t}\n\n\tprepend(variable: string, value: string, options: vscode.EnvironmentVariableMutatorOptions | undefined, scope: vscode.EnvironmentVariableScope | undefined): void {\n\t\tthis._setIfDiffers(variable, { value, type: EnvironmentVariableMutatorType.Prepend, options: options ?? { applyAtProcessCreation: true }, scope });\n\t}\n\n\tprivate _setIfDiffers(variable: string, mutator: vscode.EnvironmentVariableMutator & { scope: vscode.EnvironmentVariableScope | undefined }): void {\n\t\tif (mutator.options && mutator.options.applyAtProcessCreation === false && !mutator.options.applyAtShellIntegration) {\n\t\t\tthrow new Error('EnvironmentVariableMutatorOptions must apply at either process creation or shell integration');\n\t\t}\n\t\tconst key = this.getKey(variable, mutator.scope);\n\t\tconst current = this.map.get(key);\n\t\tconst newOptions = mutator.options ? {\n\t\t\tapplyAtProcessCreation: mutator.options.applyAtProcessCreation ?? false,\n\t\t\tapplyAtShellIntegration: mutator.options.applyAtShellIntegration ?? false,\n\t\t} : {\n\t\t\tapplyAtProcessCreation: true\n\t\t};\n\t\tif (\n\t\t\t!current ||\n\t\t\tcurrent.value !== mutator.value ||\n\t\t\tcurrent.type !== mutator.type ||\n\t\t\tcurrent.options?.applyAtProcessCreation !== newOptions.applyAtProcessCreation ||\n\t\t\tcurrent.options?.applyAtShellIntegration !== newOptions.applyAtShellIntegration ||\n\t\t\tcurrent.scope?.workspaceFolder?.index !== mutator.scope?.workspaceFolder?.index\n\t\t) {\n\t\t\tconst key = this.getKey(variable, mutator.scope);\n\t\t\tconst value: IEnvironmentVariableMutator = {\n\t\t\t\tvariable,\n\t\t\t\t...mutator,\n\t\t\t\toptions: newOptions\n\t\t\t};\n\t\t\tthis.map.set(key, value);\n\t\t\tthis._onDidChangeCollection.fire();\n\t\t}\n\t}\n\n\tget(variable: string, scope: vscode.EnvironmentVariableScope | undefined): vscode.EnvironmentVariableMutator | undefined {\n\t\tconst key = this.getKey(variable, scope);\n\t\tconst value = this.map.get(key);\n\t\t// TODO: Set options to defaults if needed\n\t\treturn value ? convertMutator(value) : undefined;\n\t}\n\n\tprivate getKey(variable: string, scope: vscode.EnvironmentVariableScope | undefined) {\n\t\tconst scopeKey = this.getScopeKey(scope);\n\t\treturn scopeKey.length ? `${variable}:::${scopeKey}` : variable;\n\t}\n\n\tprivate getScopeKey(scope: vscode.EnvironmentVariableScope | undefined): string {\n\t\treturn this.getWorkspaceKey(scope?.workspaceFolder) ?? '';\n\t}\n\n\tprivate getWorkspaceKey(workspaceFolder: vscode.WorkspaceFolder | undefined): string | undefined {\n\t\treturn workspaceFolder ? workspaceFolder.uri.toString() : undefined;\n\t}\n\n\tpublic getVariableMap(scope: vscode.EnvironmentVariableScope | undefined): Map<string, vscode.EnvironmentVariableMutator> {\n\t\tconst map = new Map<string, vscode.EnvironmentVariableMutator>();\n\t\tfor (const [_, value] of this.map) {\n\t\t\tif (this.getScopeKey(value.scope) === this.getScopeKey(scope)) {\n\t\t\t\tmap.set(value.variable, convertMutator(value));\n\t\t\t}\n\t\t}\n\t\treturn map;\n\t}\n\n\tdelete(variable: string, scope: vscode.EnvironmentVariableScope | undefined): void {\n\t\tconst key = this.getKey(variable, scope);\n\t\tthis.map.delete(key);\n\t\tthis._onDidChangeCollection.fire();\n\t}\n\n\tclear(scope: vscode.EnvironmentVariableScope | undefined): void {\n\t\tif (scope?.workspaceFolder) {\n\t\t\tfor (const [key, mutator] of this.map) {\n\t\t\t\tif (mutator.scope?.workspaceFolder?.index === scope.workspaceFolder.index) {\n\t\t\t\t\tthis.map.delete(key);\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis.clearDescription(scope);\n\t\t} else {\n\t\t\tthis.map.clear();\n\t\t\tthis.descriptionMap.clear();\n\t\t}\n\t\tthis._onDidChangeCollection.fire();\n\t}\n\n\tsetDescription(description: string | vscode.MarkdownString | undefined, scope: vscode.EnvironmentVariableScope | undefined): void {\n\t\tconst key = this.getScopeKey(scope);\n\t\tconst current = this.descriptionMap.get(key);\n\t\tif (!current || current.description !== description) {\n\t\t\tlet descriptionStr: string | undefined;\n\t\t\tif (typeof description === 'string') {\n\t\t\t\tdescriptionStr = description;\n\t\t\t} else {\n\t\t\t\t// Only take the description before the first `\\n\\n`, so that the description doesn't mess up the UI\n\t\t\t\tdescriptionStr = description?.value.split('\\n\\n')[0];\n\t\t\t}\n\t\t\tconst value: IEnvironmentVariableCollectionDescription = { description: descriptionStr, scope };\n\t\t\tthis.descriptionMap.set(key, value);\n\t\t\tthis._onDidChangeCollection.fire();\n\t\t}\n\t}\n\n\tpublic getDescription(scope: vscode.EnvironmentVariableScope | undefined): string | vscode.MarkdownString | undefined {\n\t\tconst key = this.getScopeKey(scope);\n\t\treturn this.descriptionMap.get(key)?.description;\n\t}\n\n\tprivate clearDescription(scope: vscode.EnvironmentVariableScope | undefined): void {\n\t\tconst key = this.getScopeKey(scope);\n\t\tthis.descriptionMap.delete(key);\n\t}\n}\n\nclass ScopedEnvironmentVariableCollection implements IEnvironmentVariableCollection {\n\tpublic get persistent(): boolean { return this.collection.persistent; }\n\tpublic set persistent(value: boolean) {\n\t\tthis.collection.persistent = value;\n\t}\n\n\tprotected readonly _onDidChangeCollection = new Emitter<void>();\n\tget onDidChangeCollection(): Event<void> { return this._onDidChangeCollection && this._onDidChangeCollection.event; }\n\n\tconstructor(\n\t\tprivate readonly collection: UnifiedEnvironmentVariableCollection,\n\t\tprivate readonly scope: vscode.EnvironmentVariableScope | undefined\n\t) {\n\t}\n\n\tgetScoped(scope: vscode.EnvironmentVariableScope | undefined) {\n\t\treturn this.collection.getScopedEnvironmentVariableCollection(scope);\n\t}\n\n\treplace(variable: string, value: string, options?: vscode.EnvironmentVariableMutatorOptions | undefined): void {\n\t\tthis.collection.replace(variable, value, options, this.scope);\n\t}\n\n\tappend(variable: string, value: string, options?: vscode.EnvironmentVariableMutatorOptions | undefined): void {\n\t\tthis.collection.append(variable, value, options, this.scope);\n\t}\n\n\tprepend(variable: string, value: string, options?: vscode.EnvironmentVariableMutatorOptions | undefined): void {\n\t\tthis.collection.prepend(variable, value, options, this.scope);\n\t}\n\n\tget(variable: string): vscode.EnvironmentVariableMutator | undefined {\n\t\treturn this.collection.get(variable, this.scope);\n\t}\n\n\tforEach(callback: (variable: string, mutator: vscode.EnvironmentVariableMutator, collection: vscode.EnvironmentVariableCollection) => any, thisArg?: any): void {\n\t\tthis.collection.getVariableMap(this.scope).forEach((value, variable) => callback.call(thisArg, variable, value, this), this.scope);\n\t}\n\n\t[Symbol.iterator](): IterableIterator<[variable: string, mutator: vscode.EnvironmentVariableMutator]> {\n\t\treturn this.collection.getVariableMap(this.scope).entries();\n\t}\n\n\tdelete(variable: string): void {\n\t\tthis.collection.delete(variable, this.scope);\n\t\tthis._onDidChangeCollection.fire(undefined);\n\t}\n\n\tclear(): void {\n\t\tthis.collection.clear(this.scope);\n\t}\n\n\tset description(description: string | vscode.MarkdownString | undefined) {\n\t\tthis.collection.setDescription(description, this.scope);\n\t}\n\n\tget description(): string | vscode.MarkdownString | undefined {\n\t\treturn this.collection.getDescription(this.scope);\n\t}\n}\n\nexport class WorkerExtHostTerminalService extends BaseExtHostTerminalService {\n\tconstructor(\n\t\t@IExtHostCommands extHostCommands: IExtHostCommands,\n\t\t@IExtHostRpcService extHostRpc: IExtHostRpcService\n\t) {\n\t\tsuper(false, extHostCommands, extHostRpc);\n\t}\n\n\tpublic createTerminal(name?: string, shellPath?: string, shellArgs?: string[] | string): vscode.Terminal {\n\t\tthrow new NotSupportedError();\n\t}\n\n\tpublic createTerminalFromOptions(options: vscode.TerminalOptions, internalOptions?: ITerminalInternalOptions): vscode.Terminal {\n\t\tthrow new NotSupportedError();\n\t}\n}\n\nfunction asTerminalIcon(iconPath?: vscode.Uri | { light: vscode.Uri; dark: vscode.Uri } | vscode.ThemeIcon): TerminalIcon | undefined {\n\tif (!iconPath || typeof iconPath === 'string') {\n\t\treturn undefined;\n\t}\n\n\tif (!('id' in iconPath)) {\n\t\treturn iconPath;\n\t}\n\n\treturn {\n\t\tid: iconPath.id,\n\t\tcolor: iconPath.color as ThemeColor\n\t};\n}\n\nfunction asTerminalColor(color?: vscode.ThemeColor): ThemeColor | undefined {\n\treturn ThemeColor.isThemeColor(color) ? color as ThemeColor : undefined;\n}\n\nfunction convertMutator(mutator: IEnvironmentVariableMutator): vscode.EnvironmentVariableMutator {\n\tconst newMutator = { ...mutator };\n\tdelete newMutator.scope;\n\tnewMutator.options = newMutator.options ?? undefined;\n\tdelete (newMutator as any).variable;\n\treturn newMutator as vscode.EnvironmentVariableMutator;\n}\n"],
  "mappings": "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",
  "names": ["arg", "key"]
}
