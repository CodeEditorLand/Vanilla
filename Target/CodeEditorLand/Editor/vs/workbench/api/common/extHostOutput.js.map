{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/api/common/extHostOutput.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport type * as vscode from \"vscode\";\nimport { VSBuffer } from \"../../../base/common/buffer.js\";\nimport { toLocalISOString } from \"../../../base/common/date.js\";\nimport { Emitter } from \"../../../base/common/event.js\";\nimport { DisposableStore } from \"../../../base/common/lifecycle.js\";\nimport { isString } from \"../../../base/common/types.js\";\nimport type { URI } from \"../../../base/common/uri.js\";\nimport {\n\tExtensionIdentifier,\n\ttype IExtensionDescription,\n} from \"../../../platform/extensions/common/extensions.js\";\nimport {\n\tFileSystemProviderErrorCode,\n\ttoFileSystemProviderErrorCode,\n} from \"../../../platform/files/common/files.js\";\nimport { createDecorator } from \"../../../platform/instantiation/common/instantiation.js\";\nimport {\n\tAbstractMessageLogger,\n\tILogService,\n\ttype ILogger,\n\tILoggerService,\n\ttype LogLevel,\n\tlog,\n\tparseLogLevel,\n} from \"../../../platform/log/common/log.js\";\nimport { OutputChannelUpdateMode } from \"../../services/output/common/output.js\";\nimport {\n\ttype ExtHostOutputServiceShape,\n\tMainContext,\n\ttype MainThreadOutputServiceShape,\n} from \"./extHost.protocol.js\";\nimport { IExtHostConsumerFileSystem } from \"./extHostFileSystemConsumer.js\";\nimport { IExtHostFileSystemInfo } from \"./extHostFileSystemInfo.js\";\nimport { IExtHostInitDataService } from \"./extHostInitDataService.js\";\nimport { IExtHostRpcService } from \"./extHostRpcService.js\";\n\nclass ExtHostOutputChannel\n\textends AbstractMessageLogger\n\timplements vscode.LogOutputChannel\n{\n\tprivate offset = 0;\n\n\tprivate _disposed = false;\n\tget disposed(): boolean {\n\t\treturn this._disposed;\n\t}\n\n\tpublic visible = false;\n\n\tconstructor(\n\t\treadonly id: string,\n\t\treadonly name: string,\n\t\tprotected readonly logger: ILogger,\n\t\tprotected readonly proxy: MainThreadOutputServiceShape,\n\t\treadonly extension: IExtensionDescription,\n\t) {\n\t\tsuper();\n\t\tthis.setLevel(logger.getLevel());\n\t\tthis._register(\n\t\t\tlogger.onDidChangeLogLevel((level) => this.setLevel(level)),\n\t\t);\n\t}\n\n\tget logLevel(): LogLevel {\n\t\treturn this.getLevel();\n\t}\n\n\tappendLine(value: string): void {\n\t\tthis.append(value + \"\\n\");\n\t}\n\n\tappend(value: string): void {\n\t\tthis.info(value);\n\t}\n\n\tclear(): void {\n\t\tconst till = this.offset;\n\t\tthis.logger.flush();\n\t\tthis.proxy.$update(this.id, OutputChannelUpdateMode.Clear, till);\n\t}\n\n\treplace(value: string): void {\n\t\tconst till = this.offset;\n\t\tthis.info(value);\n\t\tthis.proxy.$update(this.id, OutputChannelUpdateMode.Replace, till);\n\t\tif (this.visible) {\n\t\t\tthis.logger.flush();\n\t\t}\n\t}\n\n\tshow(\n\t\tcolumnOrPreserveFocus?: vscode.ViewColumn | boolean,\n\t\tpreserveFocus?: boolean,\n\t): void {\n\t\tthis.logger.flush();\n\t\tthis.proxy.$reveal(\n\t\t\tthis.id,\n\t\t\t!!(typeof columnOrPreserveFocus === \"boolean\"\n\t\t\t\t? columnOrPreserveFocus\n\t\t\t\t: preserveFocus),\n\t\t);\n\t}\n\n\thide(): void {\n\t\tthis.proxy.$close(this.id);\n\t}\n\n\tprotected log(level: LogLevel, message: string): void {\n\t\tthis.offset += VSBuffer.fromString(message).byteLength;\n\t\tlog(this.logger, level, message);\n\t\tif (this.visible) {\n\t\t\tthis.logger.flush();\n\t\t\tthis.proxy.$update(this.id, OutputChannelUpdateMode.Append);\n\t\t}\n\t}\n\n\toverride dispose(): void {\n\t\tsuper.dispose();\n\n\t\tif (!this._disposed) {\n\t\t\tthis.proxy.$dispose(this.id);\n\t\t\tthis._disposed = true;\n\t\t}\n\t}\n}\n\nclass ExtHostLogOutputChannel extends ExtHostOutputChannel {\n\toverride appendLine(value: string): void {\n\t\tthis.append(value);\n\t}\n}\n\nexport class ExtHostOutputService implements ExtHostOutputServiceShape {\n\treadonly _serviceBrand: undefined;\n\n\tprivate readonly proxy: MainThreadOutputServiceShape;\n\n\tprivate readonly outputsLocation: URI;\n\tprivate outputDirectoryPromise: Thenable<URI> | undefined;\n\tprivate readonly extensionLogDirectoryPromise = new Map<\n\t\tstring,\n\t\tThenable<URI>\n\t>();\n\tprivate namePool = 1;\n\n\tprivate readonly channels = new Map<\n\t\tstring,\n\t\tExtHostLogOutputChannel | ExtHostOutputChannel\n\t>();\n\tprivate visibleChannelId: string | null = null;\n\n\tconstructor(\n\t\t@IExtHostRpcService extHostRpc: IExtHostRpcService,\n\t\t@IExtHostInitDataService\n\t\tprivate readonly initData: IExtHostInitDataService,\n\t\t@IExtHostConsumerFileSystem\n\t\tprivate readonly extHostFileSystem: IExtHostConsumerFileSystem,\n\t\t@IExtHostFileSystemInfo\n\t\tprivate readonly extHostFileSystemInfo: IExtHostFileSystemInfo,\n\t\t@ILoggerService private readonly loggerService: ILoggerService,\n\t\t@ILogService private readonly logService: ILogService,\n\t) {\n\t\tthis.proxy = extHostRpc.getProxy(MainContext.MainThreadOutputService);\n\t\tthis.outputsLocation = this.extHostFileSystemInfo.extUri.joinPath(\n\t\t\tinitData.logsLocation,\n\t\t\t`output_logging_${toLocalISOString(new Date()).replace(/-|:|\\.\\d+Z$/g, \"\")}`,\n\t\t);\n\t}\n\n\t$setVisibleChannel(visibleChannelId: string | null): void {\n\t\tthis.visibleChannelId = visibleChannelId;\n\t\tfor (const [id, channel] of this.channels) {\n\t\t\tchannel.visible = id === this.visibleChannelId;\n\t\t}\n\t}\n\n\tcreateOutputChannel(\n\t\tname: string,\n\t\toptions: string | { log: true } | undefined,\n\t\textension: IExtensionDescription,\n\t): vscode.OutputChannel | vscode.LogOutputChannel {\n\t\tname = name.trim();\n\t\tif (!name) {\n\t\t\tthrow new Error(\"illegal argument `name`. must not be falsy\");\n\t\t}\n\t\tconst log = typeof options === \"object\" && options.log;\n\t\tconst languageId = isString(options) ? options : undefined;\n\t\tif (isString(languageId) && !languageId.trim()) {\n\t\t\tthrow new Error(\"illegal argument `languageId`. must not be empty\");\n\t\t}\n\t\tlet logLevel: LogLevel | undefined;\n\t\tconst logLevelValue = this.initData.environment.extensionLogLevel?.find(\n\t\t\t([identifier]) =>\n\t\t\t\tExtensionIdentifier.equals(extension.identifier, identifier),\n\t\t)?.[1];\n\t\tif (logLevelValue) {\n\t\t\tlogLevel = parseLogLevel(logLevelValue);\n\t\t}\n\t\tconst extHostOutputChannel = log\n\t\t\t? this.doCreateLogOutputChannel(name, logLevel, extension)\n\t\t\t: this.doCreateOutputChannel(name, languageId, extension);\n\t\textHostOutputChannel.then((channel) => {\n\t\t\tthis.channels.set(channel.id, channel);\n\t\t\tchannel.visible = channel.id === this.visibleChannelId;\n\t\t});\n\t\treturn log\n\t\t\t? this.createExtHostLogOutputChannel(\n\t\t\t\t\tname,\n\t\t\t\t\tlogLevel ?? this.logService.getLevel(),\n\t\t\t\t\t<Promise<ExtHostOutputChannel>>extHostOutputChannel,\n\t\t\t\t)\n\t\t\t: this.createExtHostOutputChannel(\n\t\t\t\t\tname,\n\t\t\t\t\t<Promise<ExtHostOutputChannel>>extHostOutputChannel,\n\t\t\t\t);\n\t}\n\n\tprivate async doCreateOutputChannel(\n\t\tname: string,\n\t\tlanguageId: string | undefined,\n\t\textension: IExtensionDescription,\n\t): Promise<ExtHostOutputChannel> {\n\t\tif (!this.outputDirectoryPromise) {\n\t\t\tthis.outputDirectoryPromise = this.extHostFileSystem.value\n\t\t\t\t.createDirectory(this.outputsLocation)\n\t\t\t\t.then(() => this.outputsLocation);\n\t\t}\n\t\tconst outputDir = await this.outputDirectoryPromise;\n\t\tconst file = this.extHostFileSystemInfo.extUri.joinPath(\n\t\t\toutputDir,\n\t\t\t`${this.namePool++}-${name.replace(/[\\\\/:*?\"<>|]/g, \"\")}.log`,\n\t\t);\n\t\tconst logger = this.loggerService.createLogger(file, {\n\t\t\tlogLevel: \"always\",\n\t\t\tdonotRotate: true,\n\t\t\tdonotUseFormatters: true,\n\t\t\thidden: true,\n\t\t});\n\t\tconst id = await this.proxy.$register(\n\t\t\tname,\n\t\t\tfile,\n\t\t\tlanguageId,\n\t\t\textension.identifier.value,\n\t\t);\n\t\treturn new ExtHostOutputChannel(\n\t\t\tid,\n\t\t\tname,\n\t\t\tlogger,\n\t\t\tthis.proxy,\n\t\t\textension,\n\t\t);\n\t}\n\n\tprivate async doCreateLogOutputChannel(\n\t\tname: string,\n\t\tlogLevel: LogLevel | undefined,\n\t\textension: IExtensionDescription,\n\t): Promise<ExtHostLogOutputChannel> {\n\t\tconst extensionLogDir =\n\t\t\tawait this.createExtensionLogDirectory(extension);\n\t\tconst fileName = name.replace(/[\\\\/:*?\"<>|]/g, \"\");\n\t\tconst file = this.extHostFileSystemInfo.extUri.joinPath(\n\t\t\textensionLogDir,\n\t\t\t`${fileName}.log`,\n\t\t);\n\t\tconst id = `${extension.identifier.value}.${fileName}`;\n\t\tconst logger = this.loggerService.createLogger(file, {\n\t\t\tid,\n\t\t\tname,\n\t\t\tlogLevel,\n\t\t\textensionId: extension.identifier.value,\n\t\t});\n\t\treturn new ExtHostLogOutputChannel(\n\t\t\tid,\n\t\t\tname,\n\t\t\tlogger,\n\t\t\tthis.proxy,\n\t\t\textension,\n\t\t);\n\t}\n\n\tprivate createExtensionLogDirectory(\n\t\textension: IExtensionDescription,\n\t): Thenable<URI> {\n\t\tlet extensionLogDirectoryPromise =\n\t\t\tthis.extensionLogDirectoryPromise.get(extension.identifier.value);\n\t\tif (!extensionLogDirectoryPromise) {\n\t\t\tconst extensionLogDirectory =\n\t\t\t\tthis.extHostFileSystemInfo.extUri.joinPath(\n\t\t\t\t\tthis.initData.logsLocation,\n\t\t\t\t\textension.identifier.value,\n\t\t\t\t);\n\t\t\tthis.extensionLogDirectoryPromise.set(\n\t\t\t\textension.identifier.value,\n\t\t\t\t(extensionLogDirectoryPromise = (async () => {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tawait this.extHostFileSystem.value.createDirectory(\n\t\t\t\t\t\t\textensionLogDirectory,\n\t\t\t\t\t\t);\n\t\t\t\t\t} catch (err) {\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\ttoFileSystemProviderErrorCode(err) !==\n\t\t\t\t\t\t\tFileSystemProviderErrorCode.FileExists\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\tthrow err;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\treturn extensionLogDirectory;\n\t\t\t\t})()),\n\t\t\t);\n\t\t}\n\t\treturn extensionLogDirectoryPromise;\n\t}\n\n\tprivate createExtHostOutputChannel(\n\t\tname: string,\n\t\tchannelPromise: Promise<ExtHostOutputChannel>,\n\t): vscode.OutputChannel {\n\t\tlet disposed = false;\n\t\tconst validate = () => {\n\t\t\tif (disposed) {\n\t\t\t\tthrow new Error(\"Channel has been closed\");\n\t\t\t}\n\t\t};\n\t\treturn {\n\t\t\tget name(): string {\n\t\t\t\treturn name;\n\t\t\t},\n\t\t\tappend(value: string): void {\n\t\t\t\tvalidate();\n\t\t\t\tchannelPromise.then((channel) => channel.append(value));\n\t\t\t},\n\t\t\tappendLine(value: string): void {\n\t\t\t\tvalidate();\n\t\t\t\tchannelPromise.then((channel) => channel.appendLine(value));\n\t\t\t},\n\t\t\tclear(): void {\n\t\t\t\tvalidate();\n\t\t\t\tchannelPromise.then((channel) => channel.clear());\n\t\t\t},\n\t\t\treplace(value: string): void {\n\t\t\t\tvalidate();\n\t\t\t\tchannelPromise.then((channel) => channel.replace(value));\n\t\t\t},\n\t\t\tshow(\n\t\t\t\tcolumnOrPreserveFocus?: vscode.ViewColumn | boolean,\n\t\t\t\tpreserveFocus?: boolean,\n\t\t\t): void {\n\t\t\t\tvalidate();\n\t\t\t\tchannelPromise.then((channel) =>\n\t\t\t\t\tchannel.show(columnOrPreserveFocus, preserveFocus),\n\t\t\t\t);\n\t\t\t},\n\t\t\thide(): void {\n\t\t\t\tvalidate();\n\t\t\t\tchannelPromise.then((channel) => channel.hide());\n\t\t\t},\n\t\t\tdispose(): void {\n\t\t\t\tdisposed = true;\n\t\t\t\tchannelPromise.then((channel) => channel.dispose());\n\t\t\t},\n\t\t};\n\t}\n\n\tprivate createExtHostLogOutputChannel(\n\t\tname: string,\n\t\tlogLevel: LogLevel,\n\t\tchannelPromise: Promise<ExtHostOutputChannel>,\n\t): vscode.LogOutputChannel {\n\t\tconst disposables = new DisposableStore();\n\t\tconst validate = () => {\n\t\t\tif (disposables.isDisposed) {\n\t\t\t\tthrow new Error(\"Channel has been closed\");\n\t\t\t}\n\t\t};\n\t\tconst onDidChangeLogLevel = disposables.add(new Emitter<LogLevel>());\n\t\tfunction setLogLevel(newLogLevel: LogLevel): void {\n\t\t\tlogLevel = newLogLevel;\n\t\t\tonDidChangeLogLevel.fire(newLogLevel);\n\t\t}\n\t\tchannelPromise.then((channel) => {\n\t\t\tdisposables.add(channel);\n\t\t\tif (channel.logLevel !== logLevel) {\n\t\t\t\tsetLogLevel(channel.logLevel);\n\t\t\t}\n\t\t\tdisposables.add(channel.onDidChangeLogLevel((e) => setLogLevel(e)));\n\t\t});\n\t\treturn {\n\t\t\t...this.createExtHostOutputChannel(name, channelPromise),\n\t\t\tget logLevel() {\n\t\t\t\treturn logLevel;\n\t\t\t},\n\t\t\tonDidChangeLogLevel: onDidChangeLogLevel.event,\n\t\t\ttrace(value: string, ...args: any[]): void {\n\t\t\t\tvalidate();\n\t\t\t\tchannelPromise.then((channel) => channel.trace(value, ...args));\n\t\t\t},\n\t\t\tdebug(value: string, ...args: any[]): void {\n\t\t\t\tvalidate();\n\t\t\t\tchannelPromise.then((channel) => channel.debug(value, ...args));\n\t\t\t},\n\t\t\tinfo(value: string, ...args: any[]): void {\n\t\t\t\tvalidate();\n\t\t\t\tchannelPromise.then((channel) => channel.info(value, ...args));\n\t\t\t},\n\t\t\twarn(value: string, ...args: any[]): void {\n\t\t\t\tvalidate();\n\t\t\t\tchannelPromise.then((channel) => channel.warn(value, ...args));\n\t\t\t},\n\t\t\terror(value: Error | string, ...args: any[]): void {\n\t\t\t\tvalidate();\n\t\t\t\tchannelPromise.then((channel) => channel.error(value, ...args));\n\t\t\t},\n\t\t\tdispose(): void {\n\t\t\t\tdisposables.dispose();\n\t\t\t},\n\t\t};\n\t}\n}\n\nexport interface IExtHostOutputService extends ExtHostOutputService {}\nexport const IExtHostOutputService = createDecorator<IExtHostOutputService>(\n\t\"IExtHostOutputService\",\n);\n"],
  "mappings": "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",
  "names": ["log"]
}
