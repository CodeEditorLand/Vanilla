{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/api/common/extHostRequireInterceptor.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport type * as vscode from \"vscode\";\nimport * as performance from \"../../../base/common/performance.js\";\nimport { escapeRegExpCharacters } from \"../../../base/common/strings.js\";\nimport { URI } from \"../../../base/common/uri.js\";\nimport { ExtensionIdentifierMap } from \"../../../platform/extensions/common/extensions.js\";\nimport { IInstantiationService } from \"../../../platform/instantiation/common/instantiation.js\";\nimport { ILogService } from \"../../../platform/log/common/log.js\";\nimport { nullExtensionDescription } from \"../../services/extensions/common/extensions.js\";\nimport type {\n\tIExtensionApiFactory,\n\tIExtensionRegistries,\n} from \"./extHost.api.impl.js\";\nimport {\n\tMainContext,\n\ttype MainThreadTelemetryShape,\n} from \"./extHost.protocol.js\";\nimport {\n\ttype ExtHostConfigProvider,\n\tIExtHostConfiguration,\n} from \"./extHostConfiguration.js\";\nimport {\n\ttype ExtensionPaths,\n\tIExtHostExtensionService,\n} from \"./extHostExtensionService.js\";\nimport { IExtHostInitDataService } from \"./extHostInitDataService.js\";\nimport { IExtHostRpcService } from \"./extHostRpcService.js\";\n\ninterface LoadFunction {\n\t(request: string): any;\n}\n\ninterface IAlternativeModuleProvider {\n\talternativeModuleName(name: string): string | undefined;\n}\n\ninterface INodeModuleFactory extends Partial<IAlternativeModuleProvider> {\n\treadonly nodeModuleName: string | string[];\n\tload(request: string, parent: URI, original: LoadFunction): any;\n}\n\nexport abstract class RequireInterceptor {\n\tprotected readonly _factories: Map<string, INodeModuleFactory>;\n\tprotected readonly _alternatives: ((\n\t\tmoduleName: string,\n\t) => string | undefined)[];\n\n\tconstructor(\n\t\tprivate _apiFactory: IExtensionApiFactory,\n\t\tprivate _extensionRegistry: IExtensionRegistries,\n\t\t@IInstantiationService\n\t\tprivate readonly _instaService: IInstantiationService,\n\t\t@IExtHostConfiguration\n\t\tprivate readonly _extHostConfiguration: IExtHostConfiguration,\n\t\t@IExtHostExtensionService\n\t\tprivate readonly _extHostExtensionService: IExtHostExtensionService,\n\t\t@IExtHostInitDataService\n\t\tprivate readonly _initData: IExtHostInitDataService,\n\t\t@ILogService private readonly _logService: ILogService,\n\t) {\n\t\tthis._factories = new Map<string, INodeModuleFactory>();\n\t\tthis._alternatives = [];\n\t}\n\n\tasync install(): Promise<void> {\n\t\tthis._installInterceptor();\n\n\t\tperformance.mark(\"code/extHost/willWaitForConfig\");\n\t\tconst configProvider =\n\t\t\tawait this._extHostConfiguration.getConfigProvider();\n\t\tperformance.mark(\"code/extHost/didWaitForConfig\");\n\t\tconst extensionPaths =\n\t\t\tawait this._extHostExtensionService.getExtensionPathIndex();\n\n\t\tthis.register(\n\t\t\tnew VSCodeNodeModuleFactory(\n\t\t\t\tthis._apiFactory,\n\t\t\t\textensionPaths,\n\t\t\t\tthis._extensionRegistry,\n\t\t\t\tconfigProvider,\n\t\t\t\tthis._logService,\n\t\t\t),\n\t\t);\n\t\tthis.register(\n\t\t\tthis._instaService.createInstance(NodeModuleAliasingModuleFactory),\n\t\t);\n\t\tif (this._initData.remote.isRemote) {\n\t\t\tthis.register(\n\t\t\t\tthis._instaService.createInstance(\n\t\t\t\t\tOpenNodeModuleFactory,\n\t\t\t\t\textensionPaths,\n\t\t\t\t\tthis._initData.environment.appUriScheme,\n\t\t\t\t),\n\t\t\t);\n\t\t}\n\t}\n\n\tprotected abstract _installInterceptor(): void;\n\n\tpublic register(\n\t\tinterceptor: INodeModuleFactory | IAlternativeModuleProvider,\n\t): void {\n\t\tif (\"nodeModuleName\" in interceptor) {\n\t\t\tif (Array.isArray(interceptor.nodeModuleName)) {\n\t\t\t\tfor (const moduleName of interceptor.nodeModuleName) {\n\t\t\t\t\tthis._factories.set(moduleName, interceptor);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthis._factories.set(interceptor.nodeModuleName, interceptor);\n\t\t\t}\n\t\t}\n\n\t\tif (typeof interceptor.alternativeModuleName === \"function\") {\n\t\t\tthis._alternatives.push((moduleName) => {\n\t\t\t\treturn interceptor.alternativeModuleName!(moduleName);\n\t\t\t});\n\t\t}\n\t}\n}\n\n//#region --- module renames\n\nclass NodeModuleAliasingModuleFactory implements IAlternativeModuleProvider {\n\t/**\n\t * Map of aliased internal node_modules, used to allow for modules to be\n\t * renamed without breaking extensions. In the form \"original -> new name\".\n\t */\n\tprivate static readonly aliased: ReadonlyMap<string, string> = new Map([\n\t\t[\"vscode-ripgrep\", \"@vscode/ripgrep\"],\n\t\t[\"vscode-windows-registry\", \"@vscode/windows-registry\"],\n\t]);\n\n\tprivate readonly re?: RegExp;\n\n\tconstructor(@IExtHostInitDataService initData: IExtHostInitDataService) {\n\t\tif (\n\t\t\tinitData.environment.appRoot &&\n\t\t\tNodeModuleAliasingModuleFactory.aliased.size\n\t\t) {\n\t\t\tconst root = escapeRegExpCharacters(\n\t\t\t\tthis.forceForwardSlashes(initData.environment.appRoot.fsPath),\n\t\t\t);\n\t\t\t// decompose ${appRoot}/node_modules/foo/bin to ['${appRoot}/node_modules/', 'foo', '/bin'],\n\t\t\t// and likewise the more complex form ${appRoot}/node_modules.asar.unpacked/@vcode/foo/bin\n\t\t\t// to ['${appRoot}/node_modules.asar.unpacked/',' @vscode/foo', '/bin'].\n\t\t\tconst npmIdChrs = `[a-z0-9_.-]`;\n\t\t\tconst npmModuleName = `@${npmIdChrs}+\\\\/${npmIdChrs}+|${npmIdChrs}+`;\n\t\t\tconst moduleFolders =\n\t\t\t\t\"node_modules|node_modules\\\\.asar(?:\\\\.unpacked)?\";\n\t\t\tthis.re = new RegExp(\n\t\t\t\t`^(${root}/${moduleFolders}\\\\/)(${npmModuleName})(.*)$`,\n\t\t\t\t\"i\",\n\t\t\t);\n\t\t}\n\t}\n\n\tpublic alternativeModuleName(name: string): string | undefined {\n\t\tif (!this.re) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst result = this.re.exec(this.forceForwardSlashes(name));\n\t\tif (!result) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst [, prefix, moduleName, suffix] = result;\n\t\tconst dealiased =\n\t\t\tNodeModuleAliasingModuleFactory.aliased.get(moduleName);\n\t\tif (dealiased === undefined) {\n\t\t\treturn;\n\t\t}\n\n\t\tconsole.warn(\n\t\t\t`${moduleName} as been renamed to ${dealiased}, please update your imports`,\n\t\t);\n\n\t\treturn prefix + dealiased + suffix;\n\t}\n\n\tprivate forceForwardSlashes(str: string) {\n\t\treturn str.replace(/\\\\/g, \"/\");\n\t}\n}\n\n//#endregion\n\n//#region --- vscode-module\n\nclass VSCodeNodeModuleFactory implements INodeModuleFactory {\n\tpublic readonly nodeModuleName = \"vscode\";\n\n\tprivate readonly _extApiImpl = new ExtensionIdentifierMap<typeof vscode>();\n\tprivate _defaultApiImpl?: typeof vscode;\n\n\tconstructor(\n\t\tprivate readonly _apiFactory: IExtensionApiFactory,\n\t\tprivate readonly _extensionPaths: ExtensionPaths,\n\t\tprivate readonly _extensionRegistry: IExtensionRegistries,\n\t\tprivate readonly _configProvider: ExtHostConfigProvider,\n\t\tprivate readonly _logService: ILogService,\n\t) {}\n\n\tpublic load(_request: string, parent: URI): any {\n\t\t// get extension id from filename and api for extension\n\t\tconst ext = this._extensionPaths.findSubstr(parent);\n\t\tif (ext) {\n\t\t\tlet apiImpl = this._extApiImpl.get(ext.identifier);\n\t\t\tif (!apiImpl) {\n\t\t\t\tapiImpl = this._apiFactory(\n\t\t\t\t\text,\n\t\t\t\t\tthis._extensionRegistry,\n\t\t\t\t\tthis._configProvider,\n\t\t\t\t);\n\t\t\t\tthis._extApiImpl.set(ext.identifier, apiImpl);\n\t\t\t}\n\t\t\treturn apiImpl;\n\t\t}\n\n\t\t// fall back to a default implementation\n\t\tif (!this._defaultApiImpl) {\n\t\t\tlet extensionPathsPretty = \"\";\n\t\t\tthis._extensionPaths.forEach(\n\t\t\t\t(value, index) =>\n\t\t\t\t\t(extensionPathsPretty += `\\t${index} -> ${value.identifier.value}\\n`),\n\t\t\t);\n\t\t\tthis._logService.warn(\n\t\t\t\t`Could not identify extension for 'vscode' require call from ${parent}. These are the extension path mappings: \\n${extensionPathsPretty}`,\n\t\t\t);\n\t\t\tthis._defaultApiImpl = this._apiFactory(\n\t\t\t\tnullExtensionDescription,\n\t\t\t\tthis._extensionRegistry,\n\t\t\t\tthis._configProvider,\n\t\t\t);\n\t\t}\n\t\treturn this._defaultApiImpl;\n\t}\n}\n\n//#endregion\n\n//#region --- opn/open-module\n\ninterface OpenOptions {\n\twait: boolean;\n\tapp: string | string[];\n}\n\ninterface IOriginalOpen {\n\t(target: string, options?: OpenOptions): Thenable<any>;\n}\n\ninterface IOpenModule {\n\t(target: string, options?: OpenOptions): Thenable<void>;\n}\n\nclass OpenNodeModuleFactory implements INodeModuleFactory {\n\tpublic readonly nodeModuleName: string[] = [\"open\", \"opn\"];\n\n\tprivate _extensionId: string | undefined;\n\tprivate _original?: IOriginalOpen;\n\tprivate _impl: IOpenModule;\n\tprivate _mainThreadTelemetry: MainThreadTelemetryShape;\n\n\tconstructor(\n\t\tprivate readonly _extensionPaths: ExtensionPaths,\n\t\tprivate readonly _appUriScheme: string,\n\t\t@IExtHostRpcService rpcService: IExtHostRpcService,\n\t) {\n\t\tthis._mainThreadTelemetry = rpcService.getProxy(\n\t\t\tMainContext.MainThreadTelemetry,\n\t\t);\n\t\tconst mainThreadWindow = rpcService.getProxy(\n\t\t\tMainContext.MainThreadWindow,\n\t\t);\n\n\t\tthis._impl = (target, options) => {\n\t\t\tconst uri: URI = URI.parse(target);\n\t\t\t// If we have options use the original method.\n\t\t\tif (options) {\n\t\t\t\treturn this.callOriginal(target, options);\n\t\t\t}\n\t\t\tif (uri.scheme === \"http\" || uri.scheme === \"https\") {\n\t\t\t\treturn mainThreadWindow.$openUri(uri, target, {\n\t\t\t\t\tallowTunneling: true,\n\t\t\t\t});\n\t\t\t} else if (\n\t\t\t\turi.scheme === \"mailto\" ||\n\t\t\t\turi.scheme === this._appUriScheme\n\t\t\t) {\n\t\t\t\treturn mainThreadWindow.$openUri(uri, target, {});\n\t\t\t}\n\t\t\treturn this.callOriginal(target, options);\n\t\t};\n\t}\n\n\tpublic load(request: string, parent: URI, original: LoadFunction): any {\n\t\t// get extension id from filename and api for extension\n\t\tconst extension = this._extensionPaths.findSubstr(parent);\n\t\tif (extension) {\n\t\t\tthis._extensionId = extension.identifier.value;\n\t\t\tthis.sendShimmingTelemetry();\n\t\t}\n\n\t\tthis._original = original(request);\n\t\treturn this._impl;\n\t}\n\n\tprivate callOriginal(\n\t\ttarget: string,\n\t\toptions: OpenOptions | undefined,\n\t): Thenable<any> {\n\t\tthis.sendNoForwardTelemetry();\n\t\treturn this._original!(target, options);\n\t}\n\n\tprivate sendShimmingTelemetry(): void {\n\t\tif (!this._extensionId) {\n\t\t\treturn;\n\t\t}\n\t\ttype ShimmingOpenClassification = {\n\t\t\towner: \"jrieken\";\n\t\t\tcomment: \"Know when the open-shim was used\";\n\t\t\textension: {\n\t\t\t\tclassification: \"SystemMetaData\";\n\t\t\t\tpurpose: \"FeatureInsight\";\n\t\t\t\tcomment: \"The extension is question\";\n\t\t\t};\n\t\t};\n\t\tthis._mainThreadTelemetry.$publicLog2<\n\t\t\t{ extension: string },\n\t\t\tShimmingOpenClassification\n\t\t>(\"shimming.open\", { extension: this._extensionId });\n\t}\n\n\tprivate sendNoForwardTelemetry(): void {\n\t\tif (!this._extensionId) {\n\t\t\treturn;\n\t\t}\n\t\ttype ShimmingOpenCallNoForwardClassification = {\n\t\t\towner: \"jrieken\";\n\t\t\tcomment: \"Know when the open-shim was used\";\n\t\t\textension: {\n\t\t\t\tclassification: \"SystemMetaData\";\n\t\t\t\tpurpose: \"FeatureInsight\";\n\t\t\t\tcomment: \"The extension is question\";\n\t\t\t};\n\t\t};\n\t\tthis._mainThreadTelemetry.$publicLog2<\n\t\t\t{ extension: string },\n\t\t\tShimmingOpenCallNoForwardClassification\n\t\t>(\"shimming.open.call.noForward\", { extension: this._extensionId });\n\t}\n}\n\n//#endregion\n"],
  "mappings": "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",
  "names": []
}
