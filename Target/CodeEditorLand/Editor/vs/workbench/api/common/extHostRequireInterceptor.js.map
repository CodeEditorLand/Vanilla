{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/api/common/extHostRequireInterceptor.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as performance from '../../../base/common/performance.js';\nimport { URI } from '../../../base/common/uri.js';\nimport { MainThreadTelemetryShape, MainContext } from './extHost.protocol.js';\nimport { ExtHostConfigProvider, IExtHostConfiguration } from './extHostConfiguration.js';\nimport { nullExtensionDescription } from '../../services/extensions/common/extensions.js';\nimport * as vscode from 'vscode';\nimport { ExtensionIdentifierMap } from '../../../platform/extensions/common/extensions.js';\nimport { IExtensionApiFactory, IExtensionRegistries } from './extHost.api.impl.js';\nimport { IExtHostRpcService } from './extHostRpcService.js';\nimport { IExtHostInitDataService } from './extHostInitDataService.js';\nimport { IInstantiationService } from '../../../platform/instantiation/common/instantiation.js';\nimport { ExtensionPaths, IExtHostExtensionService } from './extHostExtensionService.js';\nimport { ILogService } from '../../../platform/log/common/log.js';\nimport { escapeRegExpCharacters } from '../../../base/common/strings.js';\n\n\ninterface LoadFunction {\n\t(request: string): any;\n}\n\ninterface IAlternativeModuleProvider {\n\talternativeModuleName(name: string): string | undefined;\n}\n\ninterface INodeModuleFactory extends Partial<IAlternativeModuleProvider> {\n\treadonly nodeModuleName: string | string[];\n\tload(request: string, parent: URI, original: LoadFunction): any;\n}\n\nexport abstract class RequireInterceptor {\n\n\tprotected readonly _factories: Map<string, INodeModuleFactory>;\n\tprotected readonly _alternatives: ((moduleName: string) => string | undefined)[];\n\n\tconstructor(\n\t\tprivate _apiFactory: IExtensionApiFactory,\n\t\tprivate _extensionRegistry: IExtensionRegistries,\n\t\t@IInstantiationService private readonly _instaService: IInstantiationService,\n\t\t@IExtHostConfiguration private readonly _extHostConfiguration: IExtHostConfiguration,\n\t\t@IExtHostExtensionService private readonly _extHostExtensionService: IExtHostExtensionService,\n\t\t@IExtHostInitDataService private readonly _initData: IExtHostInitDataService,\n\t\t@ILogService private readonly _logService: ILogService,\n\t) {\n\t\tthis._factories = new Map<string, INodeModuleFactory>();\n\t\tthis._alternatives = [];\n\t}\n\n\tasync install(): Promise<void> {\n\n\t\tthis._installInterceptor();\n\n\t\tperformance.mark('code/extHost/willWaitForConfig');\n\t\tconst configProvider = await this._extHostConfiguration.getConfigProvider();\n\t\tperformance.mark('code/extHost/didWaitForConfig');\n\t\tconst extensionPaths = await this._extHostExtensionService.getExtensionPathIndex();\n\n\t\tthis.register(new VSCodeNodeModuleFactory(this._apiFactory, extensionPaths, this._extensionRegistry, configProvider, this._logService));\n\t\tthis.register(this._instaService.createInstance(NodeModuleAliasingModuleFactory));\n\t\tif (this._initData.remote.isRemote) {\n\t\t\tthis.register(this._instaService.createInstance(OpenNodeModuleFactory, extensionPaths, this._initData.environment.appUriScheme));\n\t\t}\n\t}\n\n\tprotected abstract _installInterceptor(): void;\n\n\tpublic register(interceptor: INodeModuleFactory | IAlternativeModuleProvider): void {\n\t\tif ('nodeModuleName' in interceptor) {\n\t\t\tif (Array.isArray(interceptor.nodeModuleName)) {\n\t\t\t\tfor (const moduleName of interceptor.nodeModuleName) {\n\t\t\t\t\tthis._factories.set(moduleName, interceptor);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthis._factories.set(interceptor.nodeModuleName, interceptor);\n\t\t\t}\n\t\t}\n\n\t\tif (typeof interceptor.alternativeModuleName === 'function') {\n\t\t\tthis._alternatives.push((moduleName) => {\n\t\t\t\treturn interceptor.alternativeModuleName!(moduleName);\n\t\t\t});\n\t\t}\n\t}\n}\n\n//#region --- module renames\n\nclass NodeModuleAliasingModuleFactory implements IAlternativeModuleProvider {\n\t/**\n\t * Map of aliased internal node_modules, used to allow for modules to be\n\t * renamed without breaking extensions. In the form \"original -> new name\".\n\t */\n\tprivate static readonly aliased: ReadonlyMap<string, string> = new Map([\n\t\t['vscode-ripgrep', '@vscode/ripgrep'],\n\t\t['vscode-windows-registry', '@vscode/windows-registry'],\n\t]);\n\n\tprivate readonly re?: RegExp;\n\n\tconstructor(@IExtHostInitDataService initData: IExtHostInitDataService) {\n\t\tif (initData.environment.appRoot && NodeModuleAliasingModuleFactory.aliased.size) {\n\t\t\tconst root = escapeRegExpCharacters(this.forceForwardSlashes(initData.environment.appRoot.fsPath));\n\t\t\t// decompose ${appRoot}/node_modules/foo/bin to ['${appRoot}/node_modules/', 'foo', '/bin'],\n\t\t\t// and likewise the more complex form ${appRoot}/node_modules.asar.unpacked/@vcode/foo/bin\n\t\t\t// to ['${appRoot}/node_modules.asar.unpacked/',' @vscode/foo', '/bin'].\n\t\t\tconst npmIdChrs = `[a-z0-9_.-]`;\n\t\t\tconst npmModuleName = `@${npmIdChrs}+\\\\/${npmIdChrs}+|${npmIdChrs}+`;\n\t\t\tconst moduleFolders = 'node_modules|node_modules\\\\.asar(?:\\\\.unpacked)?';\n\t\t\tthis.re = new RegExp(`^(${root}/${moduleFolders}\\\\/)(${npmModuleName})(.*)$`, 'i');\n\t\t}\n\t}\n\n\tpublic alternativeModuleName(name: string): string | undefined {\n\t\tif (!this.re) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst result = this.re.exec(this.forceForwardSlashes(name));\n\t\tif (!result) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst [, prefix, moduleName, suffix] = result;\n\t\tconst dealiased = NodeModuleAliasingModuleFactory.aliased.get(moduleName);\n\t\tif (dealiased === undefined) {\n\t\t\treturn;\n\t\t}\n\n\t\tconsole.warn(`${moduleName} as been renamed to ${dealiased}, please update your imports`);\n\n\t\treturn prefix + dealiased + suffix;\n\t}\n\n\tprivate forceForwardSlashes(str: string) {\n\t\treturn str.replace(/\\\\/g, '/');\n\t}\n}\n\n//#endregion\n\n//#region --- vscode-module\n\nclass VSCodeNodeModuleFactory implements INodeModuleFactory {\n\tpublic readonly nodeModuleName = 'vscode';\n\n\tprivate readonly _extApiImpl = new ExtensionIdentifierMap<typeof vscode>();\n\tprivate _defaultApiImpl?: typeof vscode;\n\n\tconstructor(\n\t\tprivate readonly _apiFactory: IExtensionApiFactory,\n\t\tprivate readonly _extensionPaths: ExtensionPaths,\n\t\tprivate readonly _extensionRegistry: IExtensionRegistries,\n\t\tprivate readonly _configProvider: ExtHostConfigProvider,\n\t\tprivate readonly _logService: ILogService,\n\t) {\n\t}\n\n\tpublic load(_request: string, parent: URI): any {\n\n\t\t// get extension id from filename and api for extension\n\t\tconst ext = this._extensionPaths.findSubstr(parent);\n\t\tif (ext) {\n\t\t\tlet apiImpl = this._extApiImpl.get(ext.identifier);\n\t\t\tif (!apiImpl) {\n\t\t\t\tapiImpl = this._apiFactory(ext, this._extensionRegistry, this._configProvider);\n\t\t\t\tthis._extApiImpl.set(ext.identifier, apiImpl);\n\t\t\t}\n\t\t\treturn apiImpl;\n\t\t}\n\n\t\t// fall back to a default implementation\n\t\tif (!this._defaultApiImpl) {\n\t\t\tlet extensionPathsPretty = '';\n\t\t\tthis._extensionPaths.forEach((value, index) => extensionPathsPretty += `\\t${index} -> ${value.identifier.value}\\n`);\n\t\t\tthis._logService.warn(`Could not identify extension for 'vscode' require call from ${parent}. These are the extension path mappings: \\n${extensionPathsPretty}`);\n\t\t\tthis._defaultApiImpl = this._apiFactory(nullExtensionDescription, this._extensionRegistry, this._configProvider);\n\t\t}\n\t\treturn this._defaultApiImpl;\n\t}\n}\n\n//#endregion\n\n//#region --- opn/open-module\n\ninterface OpenOptions {\n\twait: boolean;\n\tapp: string | string[];\n}\n\ninterface IOriginalOpen {\n\t(target: string, options?: OpenOptions): Thenable<any>;\n}\n\ninterface IOpenModule {\n\t(target: string, options?: OpenOptions): Thenable<void>;\n}\n\nclass OpenNodeModuleFactory implements INodeModuleFactory {\n\n\tpublic readonly nodeModuleName: string[] = ['open', 'opn'];\n\n\tprivate _extensionId: string | undefined;\n\tprivate _original?: IOriginalOpen;\n\tprivate _impl: IOpenModule;\n\tprivate _mainThreadTelemetry: MainThreadTelemetryShape;\n\n\tconstructor(\n\t\tprivate readonly _extensionPaths: ExtensionPaths,\n\t\tprivate readonly _appUriScheme: string,\n\t\t@IExtHostRpcService rpcService: IExtHostRpcService,\n\t) {\n\n\t\tthis._mainThreadTelemetry = rpcService.getProxy(MainContext.MainThreadTelemetry);\n\t\tconst mainThreadWindow = rpcService.getProxy(MainContext.MainThreadWindow);\n\n\t\tthis._impl = (target, options) => {\n\t\t\tconst uri: URI = URI.parse(target);\n\t\t\t// If we have options use the original method.\n\t\t\tif (options) {\n\t\t\t\treturn this.callOriginal(target, options);\n\t\t\t}\n\t\t\tif (uri.scheme === 'http' || uri.scheme === 'https') {\n\t\t\t\treturn mainThreadWindow.$openUri(uri, target, { allowTunneling: true });\n\t\t\t} else if (uri.scheme === 'mailto' || uri.scheme === this._appUriScheme) {\n\t\t\t\treturn mainThreadWindow.$openUri(uri, target, {});\n\t\t\t}\n\t\t\treturn this.callOriginal(target, options);\n\t\t};\n\t}\n\n\tpublic load(request: string, parent: URI, original: LoadFunction): any {\n\t\t// get extension id from filename and api for extension\n\t\tconst extension = this._extensionPaths.findSubstr(parent);\n\t\tif (extension) {\n\t\t\tthis._extensionId = extension.identifier.value;\n\t\t\tthis.sendShimmingTelemetry();\n\t\t}\n\n\t\tthis._original = original(request);\n\t\treturn this._impl;\n\t}\n\n\tprivate callOriginal(target: string, options: OpenOptions | undefined): Thenable<any> {\n\t\tthis.sendNoForwardTelemetry();\n\t\treturn this._original!(target, options);\n\t}\n\n\tprivate sendShimmingTelemetry(): void {\n\t\tif (!this._extensionId) {\n\t\t\treturn;\n\t\t}\n\t\ttype ShimmingOpenClassification = {\n\t\t\towner: 'jrieken';\n\t\t\tcomment: 'Know when the open-shim was used';\n\t\t\textension: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'The extension is question' };\n\t\t};\n\t\tthis._mainThreadTelemetry.$publicLog2<{ extension: string }, ShimmingOpenClassification>('shimming.open', { extension: this._extensionId });\n\t}\n\n\tprivate sendNoForwardTelemetry(): void {\n\t\tif (!this._extensionId) {\n\t\t\treturn;\n\t\t}\n\t\ttype ShimmingOpenCallNoForwardClassification = {\n\t\t\towner: 'jrieken';\n\t\t\tcomment: 'Know when the open-shim was used';\n\t\t\textension: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'The extension is question' };\n\t\t};\n\t\tthis._mainThreadTelemetry.$publicLog2<{ extension: string }, ShimmingOpenCallNoForwardClassification>('shimming.open.call.noForward', { extension: this._extensionId });\n\t}\n}\n\n//#endregion\n"],
  "mappings": "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",
  "names": []
}
