{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/api/common/extHostSearch.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IDisposable, toDisposable } from '../../../base/common/lifecycle.js';\nimport type * as vscode from 'vscode';\nimport { ExtHostSearchShape, MainThreadSearchShape, MainContext } from './extHost.protocol.js';\nimport { createDecorator } from '../../../platform/instantiation/common/instantiation.js';\nimport { FileSearchManager } from '../../services/search/common/fileSearchManager.js';\nimport { IExtHostRpcService } from './extHostRpcService.js';\nimport { IURITransformerService } from './extHostUriTransformerService.js';\nimport { ILogService } from '../../../platform/log/common/log.js';\nimport { IRawFileQuery, ISearchCompleteStats, IFileQuery, IRawTextQuery, IRawQuery, ITextQuery, IFolderQuery, IRawAITextQuery, IAITextQuery } from '../../services/search/common/search.js';\nimport { URI, UriComponents } from '../../../base/common/uri.js';\nimport { TextSearchManager } from '../../services/search/common/textSearchManager.js';\nimport { CancellationToken } from '../../../base/common/cancellation.js';\nimport { revive } from '../../../base/common/marshalling.js';\nimport { OldAITextSearchProviderConverter, OldFileSearchProviderConverter, OldTextSearchProviderConverter } from '../../services/search/common/searchExtConversionTypes.js';\n\nexport interface IExtHostSearch extends ExtHostSearchShape {\n\tregisterTextSearchProviderOld(scheme: string, provider: vscode.TextSearchProvider): IDisposable;\n\tregisterAITextSearchProviderOld(scheme: string, provider: vscode.AITextSearchProvider): IDisposable;\n\tregisterFileSearchProviderOld(scheme: string, provider: vscode.FileSearchProvider): IDisposable;\n\tregisterTextSearchProvider(scheme: string, provider: vscode.TextSearchProviderNew): IDisposable;\n\tregisterAITextSearchProvider(scheme: string, provider: vscode.AITextSearchProviderNew): IDisposable;\n\tregisterFileSearchProvider(scheme: string, provider: vscode.FileSearchProviderNew): IDisposable;\n\tdoInternalFileSearchWithCustomCallback(query: IFileQuery, token: CancellationToken, handleFileMatch: (data: URI[]) => void): Promise<ISearchCompleteStats>;\n}\n\nexport const IExtHostSearch = createDecorator<IExtHostSearch>('IExtHostSearch');\n\nexport class ExtHostSearch implements IExtHostSearch {\n\n\tprotected readonly _proxy: MainThreadSearchShape = this.extHostRpc.getProxy(MainContext.MainThreadSearch);\n\tprotected _handlePool: number = 0;\n\n\tprivate readonly _textSearchProvider = new Map<number, vscode.TextSearchProviderNew>();\n\tprivate readonly _textSearchUsedSchemes = new Set<string>();\n\n\tprivate readonly _aiTextSearchProvider = new Map<number, vscode.AITextSearchProviderNew>();\n\tprivate readonly _aiTextSearchUsedSchemes = new Set<string>();\n\n\tprivate readonly _fileSearchProvider = new Map<number, vscode.FileSearchProviderNew>();\n\tprivate readonly _fileSearchUsedSchemes = new Set<string>();\n\n\tprivate readonly _fileSearchManager = new FileSearchManager();\n\n\tconstructor(\n\t\t@IExtHostRpcService private extHostRpc: IExtHostRpcService,\n\t\t@IURITransformerService protected _uriTransformer: IURITransformerService,\n\t\t@ILogService protected _logService: ILogService,\n\t) { }\n\n\tprotected _transformScheme(scheme: string): string {\n\t\treturn this._uriTransformer.transformOutgoingScheme(scheme);\n\t}\n\n\tregisterTextSearchProviderOld(scheme: string, provider: vscode.TextSearchProvider): IDisposable {\n\t\tif (this._textSearchUsedSchemes.has(scheme)) {\n\t\t\tthrow new Error(`a text search provider for the scheme '${scheme}' is already registered`);\n\t\t}\n\n\t\tthis._textSearchUsedSchemes.add(scheme);\n\t\tconst handle = this._handlePool++;\n\t\tthis._textSearchProvider.set(handle, new OldTextSearchProviderConverter(provider));\n\t\tthis._proxy.$registerTextSearchProvider(handle, this._transformScheme(scheme));\n\t\treturn toDisposable(() => {\n\t\t\tthis._textSearchUsedSchemes.delete(scheme);\n\t\t\tthis._textSearchProvider.delete(handle);\n\t\t\tthis._proxy.$unregisterProvider(handle);\n\t\t});\n\t}\n\n\tregisterTextSearchProvider(scheme: string, provider: vscode.TextSearchProviderNew): IDisposable {\n\t\tif (this._textSearchUsedSchemes.has(scheme)) {\n\t\t\tthrow new Error(`a text search provider for the scheme '${scheme}' is already registered`);\n\t\t}\n\n\t\tthis._textSearchUsedSchemes.add(scheme);\n\t\tconst handle = this._handlePool++;\n\t\tthis._textSearchProvider.set(handle, provider);\n\t\tthis._proxy.$registerTextSearchProvider(handle, this._transformScheme(scheme));\n\t\treturn toDisposable(() => {\n\t\t\tthis._textSearchUsedSchemes.delete(scheme);\n\t\t\tthis._textSearchProvider.delete(handle);\n\t\t\tthis._proxy.$unregisterProvider(handle);\n\t\t});\n\t}\n\n\tregisterAITextSearchProviderOld(scheme: string, provider: vscode.AITextSearchProvider): IDisposable {\n\t\tif (this._aiTextSearchUsedSchemes.has(scheme)) {\n\t\t\tthrow new Error(`an AI text search provider for the scheme '${scheme}'is already registered`);\n\t\t}\n\n\t\tthis._aiTextSearchUsedSchemes.add(scheme);\n\t\tconst handle = this._handlePool++;\n\t\tthis._aiTextSearchProvider.set(handle, new OldAITextSearchProviderConverter(provider));\n\t\tthis._proxy.$registerAITextSearchProvider(handle, this._transformScheme(scheme));\n\t\treturn toDisposable(() => {\n\t\t\tthis._aiTextSearchUsedSchemes.delete(scheme);\n\t\t\tthis._aiTextSearchProvider.delete(handle);\n\t\t\tthis._proxy.$unregisterProvider(handle);\n\t\t});\n\t}\n\n\tregisterAITextSearchProvider(scheme: string, provider: vscode.AITextSearchProviderNew): IDisposable {\n\t\tif (this._aiTextSearchUsedSchemes.has(scheme)) {\n\t\t\tthrow new Error(`an AI text search provider for the scheme '${scheme}'is already registered`);\n\t\t}\n\n\t\tthis._aiTextSearchUsedSchemes.add(scheme);\n\t\tconst handle = this._handlePool++;\n\t\tthis._aiTextSearchProvider.set(handle, provider);\n\t\tthis._proxy.$registerAITextSearchProvider(handle, this._transformScheme(scheme));\n\t\treturn toDisposable(() => {\n\t\t\tthis._aiTextSearchUsedSchemes.delete(scheme);\n\t\t\tthis._aiTextSearchProvider.delete(handle);\n\t\t\tthis._proxy.$unregisterProvider(handle);\n\t\t});\n\t}\n\n\tregisterFileSearchProviderOld(scheme: string, provider: vscode.FileSearchProvider): IDisposable {\n\t\tif (this._fileSearchUsedSchemes.has(scheme)) {\n\t\t\tthrow new Error(`a file search provider for the scheme '${scheme}' is already registered`);\n\t\t}\n\n\t\tthis._fileSearchUsedSchemes.add(scheme);\n\t\tconst handle = this._handlePool++;\n\t\tthis._fileSearchProvider.set(handle, new OldFileSearchProviderConverter(provider));\n\t\tthis._proxy.$registerFileSearchProvider(handle, this._transformScheme(scheme));\n\t\treturn toDisposable(() => {\n\t\t\tthis._fileSearchUsedSchemes.delete(scheme);\n\t\t\tthis._fileSearchProvider.delete(handle);\n\t\t\tthis._proxy.$unregisterProvider(handle);\n\t\t});\n\t}\n\n\tregisterFileSearchProvider(scheme: string, provider: vscode.FileSearchProviderNew): IDisposable {\n\t\tif (this._fileSearchUsedSchemes.has(scheme)) {\n\t\t\tthrow new Error(`a file search provider for the scheme '${scheme}' is already registered`);\n\t\t}\n\n\t\tthis._fileSearchUsedSchemes.add(scheme);\n\t\tconst handle = this._handlePool++;\n\t\tthis._fileSearchProvider.set(handle, provider);\n\t\tthis._proxy.$registerFileSearchProvider(handle, this._transformScheme(scheme));\n\t\treturn toDisposable(() => {\n\t\t\tthis._fileSearchUsedSchemes.delete(scheme);\n\t\t\tthis._fileSearchProvider.delete(handle);\n\t\t\tthis._proxy.$unregisterProvider(handle);\n\t\t});\n\t}\n\n\t$provideFileSearchResults(handle: number, session: number, rawQuery: IRawFileQuery, token: vscode.CancellationToken): Promise<ISearchCompleteStats> {\n\t\tconst query = reviveQuery(rawQuery);\n\t\tconst provider = this._fileSearchProvider.get(handle);\n\t\tif (provider) {\n\t\t\treturn this._fileSearchManager.fileSearch(query, provider, batch => {\n\t\t\t\tthis._proxy.$handleFileMatch(handle, session, batch.map(p => p.resource));\n\t\t\t}, token);\n\t\t} else {\n\t\t\tthrow new Error('unknown provider: ' + handle);\n\t\t}\n\t}\n\n\tasync doInternalFileSearchWithCustomCallback(query: IFileQuery, token: CancellationToken, handleFileMatch: (data: URI[]) => void): Promise<ISearchCompleteStats> {\n\t\treturn { messages: [] };\n\t}\n\n\t$clearCache(cacheKey: string): Promise<void> {\n\t\tthis._fileSearchManager.clearCache(cacheKey);\n\n\t\treturn Promise.resolve(undefined);\n\t}\n\n\t$provideTextSearchResults(handle: number, session: number, rawQuery: IRawTextQuery, token: vscode.CancellationToken): Promise<ISearchCompleteStats> {\n\t\tconst provider = this._textSearchProvider.get(handle);\n\t\tif (!provider || !provider.provideTextSearchResults) {\n\t\t\tthrow new Error(`Unknown Text Search Provider ${handle}`);\n\t\t}\n\n\t\tconst query = reviveQuery(rawQuery);\n\t\tconst engine = this.createTextSearchManager(query, provider);\n\t\treturn engine.search(progress => this._proxy.$handleTextMatch(handle, session, progress), token);\n\t}\n\n\t$provideAITextSearchResults(handle: number, session: number, rawQuery: IRawAITextQuery, token: vscode.CancellationToken): Promise<ISearchCompleteStats> {\n\t\tconst provider = this._aiTextSearchProvider.get(handle);\n\t\tif (!provider || !provider.provideAITextSearchResults) {\n\t\t\tthrow new Error(`Unknown AI Text Search Provider ${handle}`);\n\t\t}\n\n\t\tconst query = reviveQuery(rawQuery);\n\t\tconst engine = this.createAITextSearchManager(query, provider);\n\t\treturn engine.search(progress => this._proxy.$handleTextMatch(handle, session, progress), token);\n\t}\n\n\t$enableExtensionHostSearch(): void { }\n\n\tprotected createTextSearchManager(query: ITextQuery, provider: vscode.TextSearchProviderNew): TextSearchManager {\n\t\treturn new TextSearchManager({ query, provider }, {\n\t\t\treaddir: resource => Promise.resolve([]),\n\t\t\ttoCanonicalName: encoding => encoding\n\t\t}, 'textSearchProvider');\n\t}\n\n\tprotected createAITextSearchManager(query: IAITextQuery, provider: vscode.AITextSearchProviderNew): TextSearchManager {\n\t\treturn new TextSearchManager({ query, provider }, {\n\t\t\treaddir: resource => Promise.resolve([]),\n\t\t\ttoCanonicalName: encoding => encoding\n\t\t}, 'aiTextSearchProvider');\n\t}\n}\n\nexport function reviveQuery<U extends IRawQuery>(rawQuery: U): U extends IRawTextQuery ? ITextQuery : U extends IRawAITextQuery ? IAITextQuery : IFileQuery {\n\treturn {\n\t\t...<any>rawQuery, // TODO@rob ???\n\t\t...{\n\t\t\tfolderQueries: rawQuery.folderQueries && rawQuery.folderQueries.map(reviveFolderQuery),\n\t\t\textraFileResources: rawQuery.extraFileResources && rawQuery.extraFileResources.map(components => URI.revive(components))\n\t\t}\n\t};\n}\n\nfunction reviveFolderQuery(rawFolderQuery: IFolderQuery<UriComponents>): IFolderQuery<URI> {\n\treturn revive(rawFolderQuery);\n}\n\n"],
  "mappings": "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",
  "names": []
}
