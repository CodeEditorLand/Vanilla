{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/api/common/extHostSearch.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport type * as vscode from \"vscode\";\nimport type { CancellationToken } from \"../../../base/common/cancellation.js\";\nimport {\n\ttype IDisposable,\n\ttoDisposable,\n} from \"../../../base/common/lifecycle.js\";\nimport { revive } from \"../../../base/common/marshalling.js\";\nimport { URI, type UriComponents } from \"../../../base/common/uri.js\";\nimport { createDecorator } from \"../../../platform/instantiation/common/instantiation.js\";\nimport { ILogService } from \"../../../platform/log/common/log.js\";\nimport { FileSearchManager } from \"../../services/search/common/fileSearchManager.js\";\nimport type {\n\tIAITextQuery,\n\tIFileQuery,\n\tIFolderQuery,\n\tIRawAITextQuery,\n\tIRawFileQuery,\n\tIRawQuery,\n\tIRawTextQuery,\n\tISearchCompleteStats,\n\tITextQuery,\n} from \"../../services/search/common/search.js\";\nimport {\n\tOldAITextSearchProviderConverter,\n\tOldFileSearchProviderConverter,\n\tOldTextSearchProviderConverter,\n} from \"../../services/search/common/searchExtConversionTypes.js\";\nimport { TextSearchManager } from \"../../services/search/common/textSearchManager.js\";\nimport {\n\ttype ExtHostSearchShape,\n\tMainContext,\n\ttype MainThreadSearchShape,\n} from \"./extHost.protocol.js\";\nimport { IExtHostRpcService } from \"./extHostRpcService.js\";\nimport { IURITransformerService } from \"./extHostUriTransformerService.js\";\n\nexport interface IExtHostSearch extends ExtHostSearchShape {\n\tregisterTextSearchProviderOld(\n\t\tscheme: string,\n\t\tprovider: vscode.TextSearchProvider,\n\t): IDisposable;\n\tregisterAITextSearchProviderOld(\n\t\tscheme: string,\n\t\tprovider: vscode.AITextSearchProvider,\n\t): IDisposable;\n\tregisterFileSearchProviderOld(\n\t\tscheme: string,\n\t\tprovider: vscode.FileSearchProvider,\n\t): IDisposable;\n\tregisterTextSearchProvider(\n\t\tscheme: string,\n\t\tprovider: vscode.TextSearchProviderNew,\n\t): IDisposable;\n\tregisterAITextSearchProvider(\n\t\tscheme: string,\n\t\tprovider: vscode.AITextSearchProviderNew,\n\t): IDisposable;\n\tregisterFileSearchProvider(\n\t\tscheme: string,\n\t\tprovider: vscode.FileSearchProviderNew,\n\t): IDisposable;\n\tdoInternalFileSearchWithCustomCallback(\n\t\tquery: IFileQuery,\n\t\ttoken: CancellationToken,\n\t\thandleFileMatch: (data: URI[]) => void,\n\t): Promise<ISearchCompleteStats>;\n}\n\nexport const IExtHostSearch = createDecorator<IExtHostSearch>(\"IExtHostSearch\");\n\nexport class ExtHostSearch implements IExtHostSearch {\n\tprotected readonly _proxy: MainThreadSearchShape = this.extHostRpc.getProxy(\n\t\tMainContext.MainThreadSearch,\n\t);\n\tprotected _handlePool = 0;\n\n\tprivate readonly _textSearchProvider = new Map<\n\t\tnumber,\n\t\tvscode.TextSearchProviderNew\n\t>();\n\tprivate readonly _textSearchUsedSchemes = new Set<string>();\n\n\tprivate readonly _aiTextSearchProvider = new Map<\n\t\tnumber,\n\t\tvscode.AITextSearchProviderNew\n\t>();\n\tprivate readonly _aiTextSearchUsedSchemes = new Set<string>();\n\n\tprivate readonly _fileSearchProvider = new Map<\n\t\tnumber,\n\t\tvscode.FileSearchProviderNew\n\t>();\n\tprivate readonly _fileSearchUsedSchemes = new Set<string>();\n\n\tprivate readonly _fileSearchManager = new FileSearchManager();\n\n\tconstructor(\n\t\t@IExtHostRpcService private extHostRpc: IExtHostRpcService,\n\t\t@IURITransformerService\n\t\tprotected _uriTransformer: IURITransformerService,\n\t\t@ILogService protected _logService: ILogService,\n\t) {}\n\n\tprotected _transformScheme(scheme: string): string {\n\t\treturn this._uriTransformer.transformOutgoingScheme(scheme);\n\t}\n\n\tregisterTextSearchProviderOld(\n\t\tscheme: string,\n\t\tprovider: vscode.TextSearchProvider,\n\t): IDisposable {\n\t\tif (this._textSearchUsedSchemes.has(scheme)) {\n\t\t\tthrow new Error(\n\t\t\t\t`a text search provider for the scheme '${scheme}' is already registered`,\n\t\t\t);\n\t\t}\n\n\t\tthis._textSearchUsedSchemes.add(scheme);\n\t\tconst handle = this._handlePool++;\n\t\tthis._textSearchProvider.set(\n\t\t\thandle,\n\t\t\tnew OldTextSearchProviderConverter(provider),\n\t\t);\n\t\tthis._proxy.$registerTextSearchProvider(\n\t\t\thandle,\n\t\t\tthis._transformScheme(scheme),\n\t\t);\n\t\treturn toDisposable(() => {\n\t\t\tthis._textSearchUsedSchemes.delete(scheme);\n\t\t\tthis._textSearchProvider.delete(handle);\n\t\t\tthis._proxy.$unregisterProvider(handle);\n\t\t});\n\t}\n\n\tregisterTextSearchProvider(\n\t\tscheme: string,\n\t\tprovider: vscode.TextSearchProviderNew,\n\t): IDisposable {\n\t\tif (this._textSearchUsedSchemes.has(scheme)) {\n\t\t\tthrow new Error(\n\t\t\t\t`a text search provider for the scheme '${scheme}' is already registered`,\n\t\t\t);\n\t\t}\n\n\t\tthis._textSearchUsedSchemes.add(scheme);\n\t\tconst handle = this._handlePool++;\n\t\tthis._textSearchProvider.set(handle, provider);\n\t\tthis._proxy.$registerTextSearchProvider(\n\t\t\thandle,\n\t\t\tthis._transformScheme(scheme),\n\t\t);\n\t\treturn toDisposable(() => {\n\t\t\tthis._textSearchUsedSchemes.delete(scheme);\n\t\t\tthis._textSearchProvider.delete(handle);\n\t\t\tthis._proxy.$unregisterProvider(handle);\n\t\t});\n\t}\n\n\tregisterAITextSearchProviderOld(\n\t\tscheme: string,\n\t\tprovider: vscode.AITextSearchProvider,\n\t): IDisposable {\n\t\tif (this._aiTextSearchUsedSchemes.has(scheme)) {\n\t\t\tthrow new Error(\n\t\t\t\t`an AI text search provider for the scheme '${scheme}'is already registered`,\n\t\t\t);\n\t\t}\n\n\t\tthis._aiTextSearchUsedSchemes.add(scheme);\n\t\tconst handle = this._handlePool++;\n\t\tthis._aiTextSearchProvider.set(\n\t\t\thandle,\n\t\t\tnew OldAITextSearchProviderConverter(provider),\n\t\t);\n\t\tthis._proxy.$registerAITextSearchProvider(\n\t\t\thandle,\n\t\t\tthis._transformScheme(scheme),\n\t\t);\n\t\treturn toDisposable(() => {\n\t\t\tthis._aiTextSearchUsedSchemes.delete(scheme);\n\t\t\tthis._aiTextSearchProvider.delete(handle);\n\t\t\tthis._proxy.$unregisterProvider(handle);\n\t\t});\n\t}\n\n\tregisterAITextSearchProvider(\n\t\tscheme: string,\n\t\tprovider: vscode.AITextSearchProviderNew,\n\t): IDisposable {\n\t\tif (this._aiTextSearchUsedSchemes.has(scheme)) {\n\t\t\tthrow new Error(\n\t\t\t\t`an AI text search provider for the scheme '${scheme}'is already registered`,\n\t\t\t);\n\t\t}\n\n\t\tthis._aiTextSearchUsedSchemes.add(scheme);\n\t\tconst handle = this._handlePool++;\n\t\tthis._aiTextSearchProvider.set(handle, provider);\n\t\tthis._proxy.$registerAITextSearchProvider(\n\t\t\thandle,\n\t\t\tthis._transformScheme(scheme),\n\t\t);\n\t\treturn toDisposable(() => {\n\t\t\tthis._aiTextSearchUsedSchemes.delete(scheme);\n\t\t\tthis._aiTextSearchProvider.delete(handle);\n\t\t\tthis._proxy.$unregisterProvider(handle);\n\t\t});\n\t}\n\n\tregisterFileSearchProviderOld(\n\t\tscheme: string,\n\t\tprovider: vscode.FileSearchProvider,\n\t): IDisposable {\n\t\tif (this._fileSearchUsedSchemes.has(scheme)) {\n\t\t\tthrow new Error(\n\t\t\t\t`a file search provider for the scheme '${scheme}' is already registered`,\n\t\t\t);\n\t\t}\n\n\t\tthis._fileSearchUsedSchemes.add(scheme);\n\t\tconst handle = this._handlePool++;\n\t\tthis._fileSearchProvider.set(\n\t\t\thandle,\n\t\t\tnew OldFileSearchProviderConverter(provider),\n\t\t);\n\t\tthis._proxy.$registerFileSearchProvider(\n\t\t\thandle,\n\t\t\tthis._transformScheme(scheme),\n\t\t);\n\t\treturn toDisposable(() => {\n\t\t\tthis._fileSearchUsedSchemes.delete(scheme);\n\t\t\tthis._fileSearchProvider.delete(handle);\n\t\t\tthis._proxy.$unregisterProvider(handle);\n\t\t});\n\t}\n\n\tregisterFileSearchProvider(\n\t\tscheme: string,\n\t\tprovider: vscode.FileSearchProviderNew,\n\t): IDisposable {\n\t\tif (this._fileSearchUsedSchemes.has(scheme)) {\n\t\t\tthrow new Error(\n\t\t\t\t`a file search provider for the scheme '${scheme}' is already registered`,\n\t\t\t);\n\t\t}\n\n\t\tthis._fileSearchUsedSchemes.add(scheme);\n\t\tconst handle = this._handlePool++;\n\t\tthis._fileSearchProvider.set(handle, provider);\n\t\tthis._proxy.$registerFileSearchProvider(\n\t\t\thandle,\n\t\t\tthis._transformScheme(scheme),\n\t\t);\n\t\treturn toDisposable(() => {\n\t\t\tthis._fileSearchUsedSchemes.delete(scheme);\n\t\t\tthis._fileSearchProvider.delete(handle);\n\t\t\tthis._proxy.$unregisterProvider(handle);\n\t\t});\n\t}\n\n\t$provideFileSearchResults(\n\t\thandle: number,\n\t\tsession: number,\n\t\trawQuery: IRawFileQuery,\n\t\ttoken: vscode.CancellationToken,\n\t): Promise<ISearchCompleteStats> {\n\t\tconst query = reviveQuery(rawQuery);\n\t\tconst provider = this._fileSearchProvider.get(handle);\n\t\tif (provider) {\n\t\t\treturn this._fileSearchManager.fileSearch(\n\t\t\t\tquery,\n\t\t\t\tprovider,\n\t\t\t\t(batch) => {\n\t\t\t\t\tthis._proxy.$handleFileMatch(\n\t\t\t\t\t\thandle,\n\t\t\t\t\t\tsession,\n\t\t\t\t\t\tbatch.map((p) => p.resource),\n\t\t\t\t\t);\n\t\t\t\t},\n\t\t\t\ttoken,\n\t\t\t);\n\t\t} else {\n\t\t\tthrow new Error(\"unknown provider: \" + handle);\n\t\t}\n\t}\n\n\tasync doInternalFileSearchWithCustomCallback(\n\t\tquery: IFileQuery,\n\t\ttoken: CancellationToken,\n\t\thandleFileMatch: (data: URI[]) => void,\n\t): Promise<ISearchCompleteStats> {\n\t\treturn { messages: [] };\n\t}\n\n\t$clearCache(cacheKey: string): Promise<void> {\n\t\tthis._fileSearchManager.clearCache(cacheKey);\n\n\t\treturn Promise.resolve(undefined);\n\t}\n\n\t$provideTextSearchResults(\n\t\thandle: number,\n\t\tsession: number,\n\t\trawQuery: IRawTextQuery,\n\t\ttoken: vscode.CancellationToken,\n\t): Promise<ISearchCompleteStats> {\n\t\tconst provider = this._textSearchProvider.get(handle);\n\t\tif (!provider || !provider.provideTextSearchResults) {\n\t\t\tthrow new Error(`Unknown Text Search Provider ${handle}`);\n\t\t}\n\n\t\tconst query = reviveQuery(rawQuery);\n\t\tconst engine = this.createTextSearchManager(query, provider);\n\t\treturn engine.search(\n\t\t\t(progress) =>\n\t\t\t\tthis._proxy.$handleTextMatch(handle, session, progress),\n\t\t\ttoken,\n\t\t);\n\t}\n\n\t$provideAITextSearchResults(\n\t\thandle: number,\n\t\tsession: number,\n\t\trawQuery: IRawAITextQuery,\n\t\ttoken: vscode.CancellationToken,\n\t): Promise<ISearchCompleteStats> {\n\t\tconst provider = this._aiTextSearchProvider.get(handle);\n\t\tif (!provider || !provider.provideAITextSearchResults) {\n\t\t\tthrow new Error(`Unknown AI Text Search Provider ${handle}`);\n\t\t}\n\n\t\tconst query = reviveQuery(rawQuery);\n\t\tconst engine = this.createAITextSearchManager(query, provider);\n\t\treturn engine.search(\n\t\t\t(progress) =>\n\t\t\t\tthis._proxy.$handleTextMatch(handle, session, progress),\n\t\t\ttoken,\n\t\t);\n\t}\n\n\t$enableExtensionHostSearch(): void {}\n\n\tprotected createTextSearchManager(\n\t\tquery: ITextQuery,\n\t\tprovider: vscode.TextSearchProviderNew,\n\t): TextSearchManager {\n\t\treturn new TextSearchManager(\n\t\t\t{ query, provider },\n\t\t\t{\n\t\t\t\treaddir: (resource) => Promise.resolve([]),\n\t\t\t\ttoCanonicalName: (encoding) => encoding,\n\t\t\t},\n\t\t\t\"textSearchProvider\",\n\t\t);\n\t}\n\n\tprotected createAITextSearchManager(\n\t\tquery: IAITextQuery,\n\t\tprovider: vscode.AITextSearchProviderNew,\n\t): TextSearchManager {\n\t\treturn new TextSearchManager(\n\t\t\t{ query, provider },\n\t\t\t{\n\t\t\t\treaddir: (resource) => Promise.resolve([]),\n\t\t\t\ttoCanonicalName: (encoding) => encoding,\n\t\t\t},\n\t\t\t\"aiTextSearchProvider\",\n\t\t);\n\t}\n}\n\nexport function reviveQuery<U extends IRawQuery>(\n\trawQuery: U,\n): U extends IRawTextQuery\n\t? ITextQuery\n\t: U extends IRawAITextQuery\n\t\t? IAITextQuery\n\t\t: IFileQuery {\n\treturn {\n\t\t...(<any>rawQuery), // TODO@rob ???\n\t\t...{\n\t\t\tfolderQueries:\n\t\t\t\trawQuery.folderQueries &&\n\t\t\t\trawQuery.folderQueries.map(reviveFolderQuery),\n\t\t\textraFileResources:\n\t\t\t\trawQuery.extraFileResources &&\n\t\t\t\trawQuery.extraFileResources.map((components) =>\n\t\t\t\t\tURI.revive(components),\n\t\t\t\t),\n\t\t},\n\t};\n}\n\nfunction reviveFolderQuery(\n\trawFolderQuery: IFolderQuery<UriComponents>,\n): IFolderQuery<URI> {\n\treturn revive(rawFolderQuery);\n}\n"],
  "mappings": "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",
  "names": []
}
