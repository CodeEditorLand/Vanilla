{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/api/common/extHostAiRelatedInformation.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IExtensionDescription } from '../../../platform/extensions/common/extensions.js';\nimport { ExtHostAiRelatedInformationShape, IMainContext, MainContext, MainThreadAiRelatedInformationShape } from './extHost.protocol.js';\nimport type { CancellationToken, RelatedInformationProvider, RelatedInformationType, RelatedInformationResult } from 'vscode';\nimport { Disposable } from './extHostTypes.js';\n\nexport class ExtHostRelatedInformation implements ExtHostAiRelatedInformationShape {\n\tprivate _relatedInformationProviders: Map<number, RelatedInformationProvider> = new Map();\n\tprivate _nextHandle = 0;\n\n\tprivate readonly _proxy: MainThreadAiRelatedInformationShape;\n\n\tconstructor(mainContext: IMainContext) {\n\t\tthis._proxy = mainContext.getProxy(MainContext.MainThreadAiRelatedInformation);\n\t}\n\n\tasync $provideAiRelatedInformation(handle: number, query: string, token: CancellationToken): Promise<RelatedInformationResult[]> {\n\t\tif (this._relatedInformationProviders.size === 0) {\n\t\t\tthrow new Error('No related information providers registered');\n\t\t}\n\n\t\tconst provider = this._relatedInformationProviders.get(handle);\n\t\tif (!provider) {\n\t\t\tthrow new Error('related information provider not found');\n\t\t}\n\n\t\tconst result = await provider.provideRelatedInformation(query, token) ?? [];\n\t\treturn result;\n\t}\n\n\tgetRelatedInformation(extension: IExtensionDescription, query: string, types: RelatedInformationType[]): Promise<RelatedInformationResult[]> {\n\t\treturn this._proxy.$getAiRelatedInformation(query, types);\n\t}\n\n\tregisterRelatedInformationProvider(extension: IExtensionDescription, type: RelatedInformationType, provider: RelatedInformationProvider): Disposable {\n\t\tconst handle = this._nextHandle;\n\t\tthis._nextHandle++;\n\t\tthis._relatedInformationProviders.set(handle, provider);\n\t\tthis._proxy.$registerAiRelatedInformationProvider(handle, type);\n\t\treturn new Disposable(() => {\n\t\t\tthis._proxy.$unregisterAiRelatedInformationProvider(handle);\n\t\t\tthis._relatedInformationProviders.delete(handle);\n\t\t});\n\t}\n}\n"],
  "mappings": ";;AAKA,SAAS,6BAA6B;AACtC,SAAS,kCAAkC,cAAc,aAAa,2CAA2C;AAEjH,SAAS,kBAAkB;AAEpB,MAAM,0BAAsE;AAAA,EAVnF,OAUmF;AAAA;AAAA;AAAA,EAC1E,+BAAwE,oBAAI,IAAI;AAAA,EAChF,cAAc;AAAA,EAEL;AAAA,EAEjB,YAAY,aAA2B;AACtC,SAAK,SAAS,YAAY,SAAS,YAAY,8BAA8B;AAAA,EAC9E;AAAA,EAEA,MAAM,6BAA6B,QAAgB,OAAe,OAA+D;AAChI,QAAI,KAAK,6BAA6B,SAAS,GAAG;AACjD,YAAM,IAAI,MAAM,6CAA6C;AAAA,IAC9D;AAEA,UAAM,WAAW,KAAK,6BAA6B,IAAI,MAAM;AAC7D,QAAI,CAAC,UAAU;AACd,YAAM,IAAI,MAAM,wCAAwC;AAAA,IACzD;AAEA,UAAM,SAAS,MAAM,SAAS,0BAA0B,OAAO,KAAK,KAAK,CAAC;AAC1E,WAAO;AAAA,EACR;AAAA,EAEA,sBAAsB,WAAkC,OAAe,OAAsE;AAC5I,WAAO,KAAK,OAAO,yBAAyB,OAAO,KAAK;AAAA,EACzD;AAAA,EAEA,mCAAmC,WAAkC,MAA8B,UAAkD;AACpJ,UAAM,SAAS,KAAK;AACpB,SAAK;AACL,SAAK,6BAA6B,IAAI,QAAQ,QAAQ;AACtD,SAAK,OAAO,sCAAsC,QAAQ,IAAI;AAC9D,WAAO,IAAI,WAAW,MAAM;AAC3B,WAAK,OAAO,wCAAwC,MAAM;AAC1D,WAAK,6BAA6B,OAAO,MAAM;AAAA,IAChD,CAAC;AAAA,EACF;AACD;",
  "names": []
}
