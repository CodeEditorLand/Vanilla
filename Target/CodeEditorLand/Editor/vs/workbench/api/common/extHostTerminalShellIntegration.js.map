{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/api/common/extHostTerminalShellIntegration.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport type * as vscode from 'vscode';\nimport { TerminalShellExecutionCommandLineConfidence } from './extHostTypes.js';\nimport { Disposable, DisposableStore, toDisposable } from '../../../base/common/lifecycle.js';\nimport { createDecorator } from '../../../platform/instantiation/common/instantiation.js';\nimport { MainContext, type ExtHostTerminalShellIntegrationShape, type MainThreadTerminalShellIntegrationShape } from './extHost.protocol.js';\nimport { IExtHostRpcService } from './extHostRpcService.js';\nimport { IExtHostTerminalService } from './extHostTerminalService.js';\nimport { Emitter, type Event } from '../../../base/common/event.js';\nimport { URI, type UriComponents } from '../../../base/common/uri.js';\nimport { AsyncIterableObject, Barrier, type AsyncIterableEmitter } from '../../../base/common/async.js';\n\nexport interface IExtHostTerminalShellIntegration extends ExtHostTerminalShellIntegrationShape {\n\treadonly _serviceBrand: undefined;\n\n\treadonly onDidChangeTerminalShellIntegration: Event<vscode.TerminalShellIntegrationChangeEvent>;\n\treadonly onDidStartTerminalShellExecution: Event<vscode.TerminalShellExecutionStartEvent>;\n\treadonly onDidEndTerminalShellExecution: Event<vscode.TerminalShellExecutionEndEvent>;\n}\nexport const IExtHostTerminalShellIntegration = createDecorator<IExtHostTerminalShellIntegration>('IExtHostTerminalShellIntegration');\n\nexport class ExtHostTerminalShellIntegration extends Disposable implements IExtHostTerminalShellIntegration {\n\n\treadonly _serviceBrand: undefined;\n\n\tprotected _proxy: MainThreadTerminalShellIntegrationShape;\n\n\tprivate _activeShellIntegrations: Map</*instanceId*/number, InternalTerminalShellIntegration> = new Map();\n\n\tprotected readonly _onDidChangeTerminalShellIntegration = new Emitter<vscode.TerminalShellIntegrationChangeEvent>();\n\treadonly onDidChangeTerminalShellIntegration = this._onDidChangeTerminalShellIntegration.event;\n\tprotected readonly _onDidStartTerminalShellExecution = new Emitter<vscode.TerminalShellExecutionStartEvent>();\n\treadonly onDidStartTerminalShellExecution = this._onDidStartTerminalShellExecution.event;\n\tprotected readonly _onDidEndTerminalShellExecution = new Emitter<vscode.TerminalShellExecutionEndEvent>();\n\treadonly onDidEndTerminalShellExecution = this._onDidEndTerminalShellExecution.event;\n\n\tconstructor(\n\t\t@IExtHostRpcService extHostRpc: IExtHostRpcService,\n\t\t@IExtHostTerminalService private readonly _extHostTerminalService: IExtHostTerminalService,\n\t) {\n\t\tsuper();\n\n\t\tthis._proxy = extHostRpc.getProxy(MainContext.MainThreadTerminalShellIntegration);\n\n\t\t// Clean up listeners\n\t\tthis._register(toDisposable(() => {\n\t\t\tfor (const [_, integration] of this._activeShellIntegrations) {\n\t\t\t\tintegration.dispose();\n\t\t\t}\n\t\t\tthis._activeShellIntegrations.clear();\n\t\t}));\n\n\t\t// Convenient test code:\n\t\t// this.onDidChangeTerminalShellIntegration(e => {\n\t\t// \tconsole.log('*** onDidChangeTerminalShellIntegration', e);\n\t\t// });\n\t\t// this.onDidStartTerminalShellExecution(async e => {\n\t\t// \tconsole.log('*** onDidStartTerminalShellExecution', e);\n\t\t// \t// new Promise<void>(r => {\n\t\t// \t// \t(async () => {\n\t\t// \t// \t\tfor await (const d of e.execution.read()) {\n\t\t// \t// \t\t\tconsole.log('data2', d);\n\t\t// \t// \t\t}\n\t\t// \t// \t})();\n\t\t// \t// });\n\t\t// \tfor await (const d of e.execution.read()) {\n\t\t// \t\tconsole.log('data', d);\n\t\t// \t}\n\t\t// });\n\t\t// this.onDidEndTerminalShellExecution(e => {\n\t\t// \tconsole.log('*** onDidEndTerminalShellExecution', e);\n\t\t// });\n\t\t// setTimeout(() => {\n\t\t// \tconsole.log('before executeCommand(\\\"echo hello\\\")');\n\t\t// \tArray.from(this._activeShellIntegrations.values())[0].value.executeCommand('echo hello');\n\t\t// \tconsole.log('after executeCommand(\\\"echo hello\\\")');\n\t\t// }, 4000);\n\t}\n\n\tpublic $shellIntegrationChange(instanceId: number): void {\n\t\tconst terminal = this._extHostTerminalService.getTerminalById(instanceId);\n\t\tif (!terminal) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst apiTerminal = terminal.value;\n\t\tlet shellIntegration = this._activeShellIntegrations.get(instanceId);\n\t\tif (!shellIntegration) {\n\t\t\tshellIntegration = new InternalTerminalShellIntegration(terminal.value, this._onDidStartTerminalShellExecution);\n\t\t\tthis._activeShellIntegrations.set(instanceId, shellIntegration);\n\t\t\tshellIntegration.store.add(terminal.onWillDispose(() => this._activeShellIntegrations.get(instanceId)?.dispose()));\n\t\t\tshellIntegration.store.add(shellIntegration.onDidRequestShellExecution(commandLine => this._proxy.$executeCommand(instanceId, commandLine)));\n\t\t\tshellIntegration.store.add(shellIntegration.onDidRequestEndExecution(e => this._onDidEndTerminalShellExecution.fire(e)));\n\t\t\tshellIntegration.store.add(shellIntegration.onDidRequestChangeShellIntegration(e => this._onDidChangeTerminalShellIntegration.fire(e)));\n\t\t\tterminal.shellIntegration = shellIntegration.value;\n\t\t}\n\t\tthis._onDidChangeTerminalShellIntegration.fire({\n\t\t\tterminal: apiTerminal,\n\t\t\tshellIntegration: shellIntegration.value\n\t\t});\n\t}\n\n\tpublic $shellExecutionStart(instanceId: number, commandLineValue: string, commandLineConfidence: TerminalShellExecutionCommandLineConfidence, isTrusted: boolean, cwd: UriComponents | undefined): void {\n\t\t// Force shellIntegration creation if it hasn't been created yet, this could when events\n\t\t// don't come through on startup\n\t\tif (!this._activeShellIntegrations.has(instanceId)) {\n\t\t\tthis.$shellIntegrationChange(instanceId);\n\t\t}\n\t\tconst commandLine: vscode.TerminalShellExecutionCommandLine = {\n\t\t\tvalue: commandLineValue,\n\t\t\tconfidence: commandLineConfidence,\n\t\t\tisTrusted\n\t\t};\n\t\tthis._activeShellIntegrations.get(instanceId)?.startShellExecution(commandLine, URI.revive(cwd));\n\t}\n\n\tpublic $shellExecutionEnd(instanceId: number, commandLineValue: string, commandLineConfidence: TerminalShellExecutionCommandLineConfidence, isTrusted: boolean, exitCode: number | undefined): void {\n\t\tconst commandLine: vscode.TerminalShellExecutionCommandLine = {\n\t\t\tvalue: commandLineValue,\n\t\t\tconfidence: commandLineConfidence,\n\t\t\tisTrusted\n\t\t};\n\t\tthis._activeShellIntegrations.get(instanceId)?.endShellExecution(commandLine, exitCode);\n\t}\n\n\tpublic $shellExecutionData(instanceId: number, data: string): void {\n\t\tthis._activeShellIntegrations.get(instanceId)?.emitData(data);\n\t}\n\n\tpublic $cwdChange(instanceId: number, cwd: UriComponents | undefined): void {\n\t\tthis._activeShellIntegrations.get(instanceId)?.setCwd(URI.revive(cwd));\n\t}\n\n\tpublic $closeTerminal(instanceId: number): void {\n\t\tthis._activeShellIntegrations.get(instanceId)?.dispose();\n\t\tthis._activeShellIntegrations.delete(instanceId);\n\n\t}\n}\n\nclass InternalTerminalShellIntegration extends Disposable {\n\tprivate _currentExecution: InternalTerminalShellExecution | undefined;\n\tget currentExecution(): InternalTerminalShellExecution | undefined { return this._currentExecution; }\n\n\tprivate _ignoreNextExecution: boolean = false;\n\tprivate _cwd: URI | undefined;\n\n\treadonly store: DisposableStore = this._register(new DisposableStore());\n\n\treadonly value: vscode.TerminalShellIntegration;\n\n\tprotected readonly _onDidRequestChangeShellIntegration = this._register(new Emitter<vscode.TerminalShellIntegrationChangeEvent>());\n\treadonly onDidRequestChangeShellIntegration = this._onDidRequestChangeShellIntegration.event;\n\tprotected readonly _onDidRequestShellExecution = this._register(new Emitter<string>());\n\treadonly onDidRequestShellExecution = this._onDidRequestShellExecution.event;\n\tprotected readonly _onDidRequestEndExecution = this._register(new Emitter<vscode.TerminalShellExecutionEndEvent>());\n\treadonly onDidRequestEndExecution = this._onDidRequestEndExecution.event;\n\n\tconstructor(\n\t\tprivate readonly _terminal: vscode.Terminal,\n\t\tprivate readonly _onDidStartTerminalShellExecution: Emitter<vscode.TerminalShellExecutionStartEvent>\n\t) {\n\t\tsuper();\n\n\t\tconst that = this;\n\t\tthis.value = {\n\t\t\tget cwd(): URI | undefined {\n\t\t\t\treturn that._cwd;\n\t\t\t},\n\t\t\t// executeCommand(commandLine: string): vscode.TerminalShellExecution;\n\t\t\t// executeCommand(executable: string, args: string[]): vscode.TerminalShellExecution;\n\t\t\texecuteCommand(commandLineOrExecutable: string, args?: string[]): vscode.TerminalShellExecution {\n\t\t\t\tlet commandLineValue: string = commandLineOrExecutable;\n\t\t\t\tif (args) {\n\t\t\t\t\tcommandLineValue += ` \"${args.map(e => `${e.replaceAll('\"', '\\\\\"')}`).join('\" \"')}\"`;\n\t\t\t\t}\n\n\t\t\t\tthat._onDidRequestShellExecution.fire(commandLineValue);\n\t\t\t\t// Fire the event in a microtask to allow the extension to use the execution before\n\t\t\t\t// the start event fires\n\t\t\t\tconst commandLine: vscode.TerminalShellExecutionCommandLine = {\n\t\t\t\t\tvalue: commandLineValue,\n\t\t\t\t\tconfidence: TerminalShellExecutionCommandLineConfidence.High,\n\t\t\t\t\tisTrusted: true\n\t\t\t\t};\n\t\t\t\tconst execution = that.startShellExecution(commandLine, that._cwd, true).value;\n\t\t\t\tthat._ignoreNextExecution = true;\n\t\t\t\treturn execution;\n\t\t\t}\n\t\t};\n\t}\n\n\tstartShellExecution(commandLine: vscode.TerminalShellExecutionCommandLine, cwd: URI | undefined, fireEventInMicrotask?: boolean): InternalTerminalShellExecution {\n\t\tif (this._ignoreNextExecution && this._currentExecution) {\n\t\t\tthis._ignoreNextExecution = false;\n\t\t} else {\n\t\t\tif (this._currentExecution) {\n\t\t\t\tthis._currentExecution.endExecution(undefined);\n\t\t\t\tthis._onDidRequestEndExecution.fire({ terminal: this._terminal, shellIntegration: this.value, execution: this._currentExecution.value, exitCode: undefined });\n\t\t\t}\n\t\t\t// Fallback to the shell integration's cwd as the cwd may not have been restored after a reload\n\t\t\tconst currentExecution = this._currentExecution = new InternalTerminalShellExecution(commandLine, cwd ?? this._cwd);\n\t\t\tif (fireEventInMicrotask) {\n\t\t\t\tqueueMicrotask(() => this._onDidStartTerminalShellExecution.fire({ terminal: this._terminal, shellIntegration: this.value, execution: currentExecution.value }));\n\t\t\t} else {\n\t\t\t\tthis._onDidStartTerminalShellExecution.fire({ terminal: this._terminal, shellIntegration: this.value, execution: this._currentExecution.value });\n\t\t\t}\n\t\t}\n\t\treturn this._currentExecution;\n\t}\n\n\temitData(data: string): void {\n\t\tthis.currentExecution?.emitData(data);\n\t}\n\n\tendShellExecution(commandLine: vscode.TerminalShellExecutionCommandLine | undefined, exitCode: number | undefined): void {\n\t\tif (this._currentExecution) {\n\t\t\tthis._currentExecution.endExecution(commandLine);\n\t\t\tthis._onDidRequestEndExecution.fire({ terminal: this._terminal, shellIntegration: this.value, execution: this._currentExecution.value, exitCode });\n\t\t\tthis._currentExecution = undefined;\n\t\t}\n\t}\n\n\tsetCwd(cwd: URI | undefined): void {\n\t\tlet wasChanged = false;\n\t\tif (URI.isUri(this._cwd)) {\n\t\t\twasChanged = !URI.isUri(cwd) || this._cwd.toString() !== cwd.toString();\n\t\t} else if (this._cwd !== cwd) {\n\t\t\twasChanged = true;\n\t\t}\n\t\tif (wasChanged) {\n\t\t\tthis._cwd = cwd;\n\t\t\tthis._onDidRequestChangeShellIntegration.fire({ terminal: this._terminal, shellIntegration: this.value });\n\t\t}\n\t}\n}\n\nclass InternalTerminalShellExecution {\n\tprivate _dataStream: ShellExecutionDataStream | undefined;\n\n\tprivate _ended: boolean = false;\n\n\treadonly value: vscode.TerminalShellExecution;\n\n\tconstructor(\n\t\tprivate _commandLine: vscode.TerminalShellExecutionCommandLine,\n\t\treadonly cwd: URI | undefined,\n\t) {\n\t\tconst that = this;\n\t\tthis.value = {\n\t\t\tget commandLine(): vscode.TerminalShellExecutionCommandLine {\n\t\t\t\treturn that._commandLine;\n\t\t\t},\n\t\t\tget cwd(): URI | undefined {\n\t\t\t\treturn that.cwd;\n\t\t\t},\n\t\t\tread(): AsyncIterable<string> {\n\t\t\t\treturn that._createDataStream();\n\t\t\t}\n\t\t};\n\t}\n\n\tprivate _createDataStream(): AsyncIterable<string> {\n\t\tif (!this._dataStream) {\n\t\t\tif (this._ended) {\n\t\t\t\treturn AsyncIterableObject.EMPTY;\n\t\t\t}\n\t\t\tthis._dataStream = new ShellExecutionDataStream();\n\t\t}\n\t\treturn this._dataStream.createIterable();\n\t}\n\n\temitData(data: string): void {\n\t\tthis._dataStream?.emitData(data);\n\t}\n\n\tendExecution(commandLine: vscode.TerminalShellExecutionCommandLine | undefined): void {\n\t\tif (commandLine) {\n\t\t\tthis._commandLine = commandLine;\n\t\t}\n\t\tthis._dataStream?.endExecution();\n\t\tthis._dataStream = undefined;\n\t\tthis._ended = true;\n\t}\n}\n\nclass ShellExecutionDataStream extends Disposable {\n\tprivate _barrier: Barrier | undefined;\n\tprivate _emitters: AsyncIterableEmitter<string>[] = [];\n\n\tcreateIterable(): AsyncIterable<string> {\n\t\tif (!this._barrier) {\n\t\t\tthis._barrier = new Barrier();\n\t\t}\n\t\tconst barrier = this._barrier;\n\t\tconst iterable = new AsyncIterableObject<string>(async emitter => {\n\t\t\tthis._emitters.push(emitter);\n\t\t\tawait barrier.wait();\n\t\t});\n\t\treturn iterable;\n\t}\n\n\temitData(data: string): void {\n\t\tfor (const emitter of this._emitters) {\n\t\t\temitter.emitOne(data);\n\t\t}\n\t}\n\n\tendExecution(): void {\n\t\tthis._barrier?.open();\n\t\tthis._barrier = undefined;\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
