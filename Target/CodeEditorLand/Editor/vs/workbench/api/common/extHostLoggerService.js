var l=Object.defineProperty;var n=Object.getOwnPropertyDescriptor;var a=(i,o,e,t)=>{for(var r=t>1?void 0:t?n(o,e):o,s=i.length-1,p;s>=0;s--)(p=i[s])&&(r=(t?p(o,e,r):p(r))||r);return t&&r&&l(o,e,r),r},L=(i,o)=>(e,t)=>o(e,t,i);import{revive as v}from"../../../base/common/marshalling.js";import{URI as h}from"../../../base/common/uri.js";import{AbstractLoggerService as d,AbstractMessageLogger as y}from"../../../platform/log/common/log.js";import{MainContext as c}from"./extHost.protocol.js";import{IExtHostInitDataService as f}from"./extHostInitDataService.js";import{IExtHostRpcService as m}from"./extHostRpcService.js";let g=class extends d{_proxy;constructor(o,e){super(e.logLevel,e.logsLocation,e.loggers.map(t=>v(t))),this._proxy=o.getProxy(c.MainThreadLogger)}$setLogLevel(o,e){e?this.setLogLevel(h.revive(e),o):this.setLogLevel(o)}setVisibility(o,e){super.setVisibility(o,e),this._proxy.$setVisibility(o,e)}doCreateLogger(o,e,t){return new x(this._proxy,o,e,t)}};g=a([L(0,m),L(1,f)],g);class x extends y{constructor(e,t,r,s){super(s?.logLevel==="always");this.proxy=e;this.file=t;this.setLevel(r),this.proxy.$createLogger(t,s).then(()=>{this.doLog(this.buffer),this.isLoggerCreated=!0})}isLoggerCreated=!1;buffer=[];log(e,t){const r=[[e,t]];this.isLoggerCreated?this.doLog(r):this.buffer.push(...r)}doLog(e){this.proxy.$log(this.file,e)}flush(){this.proxy.$flush(this.file)}}export{g as ExtHostLoggerService};
