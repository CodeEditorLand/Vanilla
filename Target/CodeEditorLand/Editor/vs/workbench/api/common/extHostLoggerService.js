var l=Object.defineProperty;var n=Object.getOwnPropertyDescriptor;var p=(i,o,e,r)=>{for(var t=r>1?void 0:r?n(o,e):o,s=i.length-1,L;s>=0;s--)(L=i[s])&&(t=(r?L(o,e,t):L(t))||t);return r&&t&&l(o,e,t),t},a=(i,o)=>(e,r)=>o(e,r,i);import{AbstractMessageLogger as v,AbstractLoggerService as h}from"../../../platform/log/common/log.js";import{MainContext as d}from"./extHost.protocol.js";import{IExtHostInitDataService as c}from"./extHostInitDataService.js";import{IExtHostRpcService as f}from"./extHostRpcService.js";import{URI as m}from"../../../base/common/uri.js";import{revive as x}from"../../../base/common/marshalling.js";let g=class extends h{_proxy;constructor(o,e){super(e.logLevel,e.logsLocation,e.loggers.map(r=>x(r))),this._proxy=o.getProxy(d.MainThreadLogger)}$setLogLevel(o,e){e?this.setLogLevel(m.revive(e),o):this.setLogLevel(o)}setVisibility(o,e){super.setVisibility(o,e),this._proxy.$setVisibility(o,e)}doCreateLogger(o,e,r){return new y(this._proxy,o,e,r)}};g=p([a(0,f),a(1,c)],g);class y extends v{constructor(e,r,t,s){super(s?.logLevel==="always");this.proxy=e;this.file=r;this.setLevel(t),this.proxy.$createLogger(r,s).then(()=>{this.doLog(this.buffer),this.isLoggerCreated=!0})}isLoggerCreated=!1;buffer=[];log(e,r){const t=[[e,r]];this.isLoggerCreated?this.doLog(t):this.buffer.push(...t)}doLog(e){this.proxy.$log(this.file,e)}flush(){this.proxy.$flush(this.file)}}export{g as ExtHostLoggerService};
