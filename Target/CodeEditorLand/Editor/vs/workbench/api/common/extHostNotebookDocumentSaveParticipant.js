import"vscode";import"../../../base/common/cancellation.js";import{AsyncEmitter as d}from"../../../base/common/event.js";import{URI as v}from"../../../base/common/uri.js";import"../../../platform/extensions/common/extensions.js";import"../../../platform/log/common/log.js";import"../../common/editor.js";import{SerializableObjectWithBuffers as p}from"../../services/extensions/common/proxyIdentifier.js";import"./extHost.protocol.js";import"./extHostNotebook.js";import{TextDocumentSaveReason as u,WorkspaceEdit as E}from"./extHostTypeConverters.js";import{WorkspaceEdit as k}from"./extHostTypes.js";class O{constructor(n,i,e,r={timeout:1500,errors:3}){this._logService=n;this._notebooksAndEditors=i;this._mainThreadBulkEdits=e;this._thresholds=r}_onWillSaveNotebookDocumentEvent=new d;dispose(){}getOnWillSaveNotebookDocumentEvent(n){return(i,e,r)=>{const o=function(t){i.call(e,t)};return o.extension=n,this._onWillSaveNotebookDocumentEvent.event(o,void 0,r)}}async $participateInSave(n,i,e){const r=v.revive(n),o=this._notebooksAndEditors.getNotebookDocument(r);if(!o)throw new Error("Unable to resolve notebook document");const a=[];if(await this._onWillSaveNotebookDocumentEvent.fireAsync({notebook:o.apiNotebook,reason:u.to(i)},e,async(l,s)=>{const m=Date.now(),c=await await Promise.resolve(l);Date.now()-m>this._thresholds.timeout&&this._logService.warn("onWillSaveNotebookDocument-listener from extension",s.extension.identifier),!e.isCancellationRequested&&c&&(c instanceof k?a.push(c):this._logService.warn("onWillSaveNotebookDocument-listener from extension",s.extension.identifier,"ignored due to invalid data"))}),e.isCancellationRequested)return!1;if(a.length===0)return!0;const t={edits:[]};for(const l of a){const{edits:s}=E.from(l);t.edits=t.edits.concat(s)}return this._mainThreadBulkEdits.$tryApplyWorkspaceEdit(new p(t))}}export{O as ExtHostNotebookDocumentSaveParticipant};
