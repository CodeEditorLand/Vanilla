var m=Object.defineProperty;var w=Object.getOwnPropertyDescriptor;var d=(a,e,t,o)=>{for(var i=o>1?void 0:o?w(e,t):e,r=a.length-1,s;r>=0;r--)(s=a[r])&&(i=(o?s(e,t,i):s(i))||i);return o&&i&&m(e,t,i),i},p=(a,e)=>(t,o)=>e(t,o,a);import{Emitter as W}from"../../../base/common/event.js";import{Schemas as f}from"../../../base/common/network.js";import{isFalsyOrWhitespace as c}from"../../../base/common/strings.js";import{URI as h}from"../../../base/common/uri.js";import{createDecorator as y}from"../../../platform/instantiation/common/instantiation.js";import{MainContext as S}from"./extHost.protocol.js";import{IExtHostRpcService as u}from"./extHostRpcService.js";let n=class{static InitialState={focused:!0,active:!0};_proxy;_onDidChangeWindowState=new W;onDidChangeWindowState=this._onDidChangeWindowState.event;_state=n.InitialState;getState(){const e=this._state;return{get focused(){return e.focused},get active(){return e.active}}}constructor(e){this._proxy=e.getProxy(S.MainThreadWindow),this._proxy.$getInitialState().then(({isFocused:t,isActive:o})=>{this.onDidChangeWindowProperty("focused",t),this.onDidChangeWindowProperty("active",o)})}$onDidChangeWindowFocus(e){this.onDidChangeWindowProperty("focused",e)}$onDidChangeWindowActive(e){this.onDidChangeWindowProperty("active",e)}onDidChangeWindowProperty(e,t){t!==this._state[e]&&(this._state={...this._state,[e]:t},this._onDidChangeWindowState.fire(this._state))}openUri(e,t){let o;if(typeof e=="string"){o=e;try{e=h.parse(e)}catch{return Promise.reject(`Invalid uri - '${e}'`)}}return c(e.scheme)?Promise.reject("Invalid scheme - cannot be empty"):e.scheme===f.command?Promise.reject(`Invalid scheme '${e.scheme}'`):this._proxy.$openUri(e,o,t)}async asExternalUri(e,t){if(c(e.scheme))return Promise.reject("Invalid scheme - cannot be empty");const o=await this._proxy.$asExternalUri(e,t);return h.from(o)}};n=d([p(0,u)],n);const P=y("IExtHostWindow");export{n as ExtHostWindow,P as IExtHostWindow};
