{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/api/common/extHostWebviewMessaging.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { VSBuffer } from '../../../base/common/buffer.js';\nimport * as extHostProtocol from './extHost.protocol.js';\n\nclass ArrayBufferSet {\n\tpublic readonly buffers: ArrayBuffer[] = [];\n\n\tpublic add(buffer: ArrayBuffer): number {\n\t\tlet index = this.buffers.indexOf(buffer);\n\t\tif (index < 0) {\n\t\t\tindex = this.buffers.length;\n\t\t\tthis.buffers.push(buffer);\n\t\t}\n\t\treturn index;\n\t}\n}\n\nexport function serializeWebviewMessage(\n\tmessage: any,\n\toptions: { serializeBuffersForPostMessage?: boolean }\n): { message: string; buffers: VSBuffer[] } {\n\tif (options.serializeBuffersForPostMessage) {\n\t\t// Extract all ArrayBuffers from the message and replace them with references.\n\t\tconst arrayBuffers = new ArrayBufferSet();\n\n\t\tconst replacer = (_key: string, value: any) => {\n\t\t\tif (value instanceof ArrayBuffer) {\n\t\t\t\tconst index = arrayBuffers.add(value);\n\t\t\t\treturn {\n\t\t\t\t\t$$vscode_array_buffer_reference$$: true,\n\t\t\t\t\tindex,\n\t\t\t\t} satisfies extHostProtocol.WebviewMessageArrayBufferReference;\n\t\t\t} else if (ArrayBuffer.isView(value)) {\n\t\t\t\tconst type = getTypedArrayType(value);\n\t\t\t\tif (type) {\n\t\t\t\t\tconst index = arrayBuffers.add(value.buffer);\n\t\t\t\t\treturn {\n\t\t\t\t\t\t$$vscode_array_buffer_reference$$: true,\n\t\t\t\t\t\tindex,\n\t\t\t\t\t\tview: {\n\t\t\t\t\t\t\ttype: type,\n\t\t\t\t\t\t\tbyteLength: value.byteLength,\n\t\t\t\t\t\t\tbyteOffset: value.byteOffset,\n\t\t\t\t\t\t}\n\t\t\t\t\t} satisfies extHostProtocol.WebviewMessageArrayBufferReference;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn value;\n\t\t};\n\n\t\tconst serializedMessage = JSON.stringify(message, replacer);\n\n\t\tconst buffers = arrayBuffers.buffers.map(arrayBuffer => {\n\t\t\tconst bytes = new Uint8Array(arrayBuffer);\n\t\t\treturn VSBuffer.wrap(bytes);\n\t\t});\n\n\t\treturn { message: serializedMessage, buffers };\n\t} else {\n\t\treturn { message: JSON.stringify(message), buffers: [] };\n\t}\n}\n\nfunction getTypedArrayType(value: ArrayBufferView): extHostProtocol.WebviewMessageArrayBufferViewType | undefined {\n\tswitch (value.constructor.name) {\n\t\tcase 'Int8Array': return extHostProtocol.WebviewMessageArrayBufferViewType.Int8Array;\n\t\tcase 'Uint8Array': return extHostProtocol.WebviewMessageArrayBufferViewType.Uint8Array;\n\t\tcase 'Uint8ClampedArray': return extHostProtocol.WebviewMessageArrayBufferViewType.Uint8ClampedArray;\n\t\tcase 'Int16Array': return extHostProtocol.WebviewMessageArrayBufferViewType.Int16Array;\n\t\tcase 'Uint16Array': return extHostProtocol.WebviewMessageArrayBufferViewType.Uint16Array;\n\t\tcase 'Int32Array': return extHostProtocol.WebviewMessageArrayBufferViewType.Int32Array;\n\t\tcase 'Uint32Array': return extHostProtocol.WebviewMessageArrayBufferViewType.Uint32Array;\n\t\tcase 'Float32Array': return extHostProtocol.WebviewMessageArrayBufferViewType.Float32Array;\n\t\tcase 'Float64Array': return extHostProtocol.WebviewMessageArrayBufferViewType.Float64Array;\n\t\tcase 'BigInt64Array': return extHostProtocol.WebviewMessageArrayBufferViewType.BigInt64Array;\n\t\tcase 'BigUint64Array': return extHostProtocol.WebviewMessageArrayBufferViewType.BigUint64Array;\n\t}\n\treturn undefined;\n}\n\nexport function deserializeWebviewMessage(jsonMessage: string, buffers: VSBuffer[]): { message: any; arrayBuffers: ArrayBuffer[] } {\n\tconst arrayBuffers: ArrayBuffer[] = buffers.map(buffer => {\n\t\tconst arrayBuffer = new ArrayBuffer(buffer.byteLength);\n\t\tconst uint8Array = new Uint8Array(arrayBuffer);\n\t\tuint8Array.set(buffer.buffer);\n\t\treturn arrayBuffer;\n\t});\n\n\tconst reviver = !buffers.length ? undefined : (_key: string, value: any) => {\n\t\tif (value && typeof value === 'object' && (value as extHostProtocol.WebviewMessageArrayBufferReference).$$vscode_array_buffer_reference$$) {\n\t\t\tconst ref = value as extHostProtocol.WebviewMessageArrayBufferReference;\n\t\t\tconst { index } = ref;\n\t\t\tconst arrayBuffer = arrayBuffers[index];\n\t\t\tif (ref.view) {\n\t\t\t\tswitch (ref.view.type) {\n\t\t\t\t\tcase extHostProtocol.WebviewMessageArrayBufferViewType.Int8Array: return new Int8Array(arrayBuffer, ref.view.byteOffset, ref.view.byteLength / Int8Array.BYTES_PER_ELEMENT);\n\t\t\t\t\tcase extHostProtocol.WebviewMessageArrayBufferViewType.Uint8Array: return new Uint8Array(arrayBuffer, ref.view.byteOffset, ref.view.byteLength / Uint8Array.BYTES_PER_ELEMENT);\n\t\t\t\t\tcase extHostProtocol.WebviewMessageArrayBufferViewType.Uint8ClampedArray: return new Uint8ClampedArray(arrayBuffer, ref.view.byteOffset, ref.view.byteLength / Uint8ClampedArray.BYTES_PER_ELEMENT);\n\t\t\t\t\tcase extHostProtocol.WebviewMessageArrayBufferViewType.Int16Array: return new Int16Array(arrayBuffer, ref.view.byteOffset, ref.view.byteLength / Int16Array.BYTES_PER_ELEMENT);\n\t\t\t\t\tcase extHostProtocol.WebviewMessageArrayBufferViewType.Uint16Array: return new Uint16Array(arrayBuffer, ref.view.byteOffset, ref.view.byteLength / Uint16Array.BYTES_PER_ELEMENT);\n\t\t\t\t\tcase extHostProtocol.WebviewMessageArrayBufferViewType.Int32Array: return new Int32Array(arrayBuffer, ref.view.byteOffset, ref.view.byteLength / Int32Array.BYTES_PER_ELEMENT);\n\t\t\t\t\tcase extHostProtocol.WebviewMessageArrayBufferViewType.Uint32Array: return new Uint32Array(arrayBuffer, ref.view.byteOffset, ref.view.byteLength / Uint32Array.BYTES_PER_ELEMENT);\n\t\t\t\t\tcase extHostProtocol.WebviewMessageArrayBufferViewType.Float32Array: return new Float32Array(arrayBuffer, ref.view.byteOffset, ref.view.byteLength / Float32Array.BYTES_PER_ELEMENT);\n\t\t\t\t\tcase extHostProtocol.WebviewMessageArrayBufferViewType.Float64Array: return new Float64Array(arrayBuffer, ref.view.byteOffset, ref.view.byteLength / Float64Array.BYTES_PER_ELEMENT);\n\t\t\t\t\tcase extHostProtocol.WebviewMessageArrayBufferViewType.BigInt64Array: return new BigInt64Array(arrayBuffer, ref.view.byteOffset, ref.view.byteLength / BigInt64Array.BYTES_PER_ELEMENT);\n\t\t\t\t\tcase extHostProtocol.WebviewMessageArrayBufferViewType.BigUint64Array: return new BigUint64Array(arrayBuffer, ref.view.byteOffset, ref.view.byteLength / BigUint64Array.BYTES_PER_ELEMENT);\n\t\t\t\t\tdefault: throw new Error('Unknown array buffer view type');\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn arrayBuffer;\n\t\t}\n\t\treturn value;\n\t};\n\n\tconst message = JSON.parse(jsonMessage, reviver);\n\treturn { message, arrayBuffers };\n}\n"],
  "mappings": "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",
  "names": []
}
