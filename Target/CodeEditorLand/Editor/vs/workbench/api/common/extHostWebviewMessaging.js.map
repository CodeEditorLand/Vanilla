{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/api/common/extHostWebviewMessaging.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { VSBuffer } from \"../../../base/common/buffer.js\";\nimport * as extHostProtocol from \"./extHost.protocol.js\";\n\nclass ArrayBufferSet {\n\tpublic readonly buffers: ArrayBuffer[] = [];\n\n\tpublic add(buffer: ArrayBuffer): number {\n\t\tlet index = this.buffers.indexOf(buffer);\n\t\tif (index < 0) {\n\t\t\tindex = this.buffers.length;\n\t\t\tthis.buffers.push(buffer);\n\t\t}\n\t\treturn index;\n\t}\n}\n\nexport function serializeWebviewMessage(\n\tmessage: any,\n\toptions: { serializeBuffersForPostMessage?: boolean },\n): { message: string; buffers: VSBuffer[] } {\n\tif (options.serializeBuffersForPostMessage) {\n\t\t// Extract all ArrayBuffers from the message and replace them with references.\n\t\tconst arrayBuffers = new ArrayBufferSet();\n\n\t\tconst replacer = (_key: string, value: any) => {\n\t\t\tif (value instanceof ArrayBuffer) {\n\t\t\t\tconst index = arrayBuffers.add(value);\n\t\t\t\treturn {\n\t\t\t\t\t$$vscode_array_buffer_reference$$: true,\n\t\t\t\t\tindex,\n\t\t\t\t} satisfies extHostProtocol.WebviewMessageArrayBufferReference;\n\t\t\t} else if (ArrayBuffer.isView(value)) {\n\t\t\t\tconst type = getTypedArrayType(value);\n\t\t\t\tif (type) {\n\t\t\t\t\tconst index = arrayBuffers.add(value.buffer);\n\t\t\t\t\treturn {\n\t\t\t\t\t\t$$vscode_array_buffer_reference$$: true,\n\t\t\t\t\t\tindex,\n\t\t\t\t\t\tview: {\n\t\t\t\t\t\t\ttype: type,\n\t\t\t\t\t\t\tbyteLength: value.byteLength,\n\t\t\t\t\t\t\tbyteOffset: value.byteOffset,\n\t\t\t\t\t\t},\n\t\t\t\t\t} satisfies extHostProtocol.WebviewMessageArrayBufferReference;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn value;\n\t\t};\n\n\t\tconst serializedMessage = JSON.stringify(message, replacer);\n\n\t\tconst buffers = arrayBuffers.buffers.map((arrayBuffer) => {\n\t\t\tconst bytes = new Uint8Array(arrayBuffer);\n\t\t\treturn VSBuffer.wrap(bytes);\n\t\t});\n\n\t\treturn { message: serializedMessage, buffers };\n\t} else {\n\t\treturn { message: JSON.stringify(message), buffers: [] };\n\t}\n}\n\nfunction getTypedArrayType(\n\tvalue: ArrayBufferView,\n): extHostProtocol.WebviewMessageArrayBufferViewType | undefined {\n\tswitch (value.constructor.name) {\n\t\tcase \"Int8Array\":\n\t\t\treturn extHostProtocol.WebviewMessageArrayBufferViewType.Int8Array;\n\t\tcase \"Uint8Array\":\n\t\t\treturn extHostProtocol.WebviewMessageArrayBufferViewType.Uint8Array;\n\t\tcase \"Uint8ClampedArray\":\n\t\t\treturn extHostProtocol.WebviewMessageArrayBufferViewType\n\t\t\t\t.Uint8ClampedArray;\n\t\tcase \"Int16Array\":\n\t\t\treturn extHostProtocol.WebviewMessageArrayBufferViewType.Int16Array;\n\t\tcase \"Uint16Array\":\n\t\t\treturn extHostProtocol.WebviewMessageArrayBufferViewType\n\t\t\t\t.Uint16Array;\n\t\tcase \"Int32Array\":\n\t\t\treturn extHostProtocol.WebviewMessageArrayBufferViewType.Int32Array;\n\t\tcase \"Uint32Array\":\n\t\t\treturn extHostProtocol.WebviewMessageArrayBufferViewType\n\t\t\t\t.Uint32Array;\n\t\tcase \"Float32Array\":\n\t\t\treturn extHostProtocol.WebviewMessageArrayBufferViewType\n\t\t\t\t.Float32Array;\n\t\tcase \"Float64Array\":\n\t\t\treturn extHostProtocol.WebviewMessageArrayBufferViewType\n\t\t\t\t.Float64Array;\n\t\tcase \"BigInt64Array\":\n\t\t\treturn extHostProtocol.WebviewMessageArrayBufferViewType\n\t\t\t\t.BigInt64Array;\n\t\tcase \"BigUint64Array\":\n\t\t\treturn extHostProtocol.WebviewMessageArrayBufferViewType\n\t\t\t\t.BigUint64Array;\n\t}\n\treturn undefined;\n}\n\nexport function deserializeWebviewMessage(\n\tjsonMessage: string,\n\tbuffers: VSBuffer[],\n): { message: any; arrayBuffers: ArrayBuffer[] } {\n\tconst arrayBuffers: ArrayBuffer[] = buffers.map((buffer) => {\n\t\tconst arrayBuffer = new ArrayBuffer(buffer.byteLength);\n\t\tconst uint8Array = new Uint8Array(arrayBuffer);\n\t\tuint8Array.set(buffer.buffer);\n\t\treturn arrayBuffer;\n\t});\n\n\tconst reviver = buffers.length\n\t\t? (_key: string, value: any) => {\n\t\t\t\tif (\n\t\t\t\t\tvalue &&\n\t\t\t\t\ttypeof value === \"object\" &&\n\t\t\t\t\t(\n\t\t\t\t\t\tvalue as extHostProtocol.WebviewMessageArrayBufferReference\n\t\t\t\t\t).$$vscode_array_buffer_reference$$\n\t\t\t\t) {\n\t\t\t\t\tconst ref =\n\t\t\t\t\t\tvalue as extHostProtocol.WebviewMessageArrayBufferReference;\n\t\t\t\t\tconst { index } = ref;\n\t\t\t\t\tconst arrayBuffer = arrayBuffers[index];\n\t\t\t\t\tif (ref.view) {\n\t\t\t\t\t\tswitch (ref.view.type) {\n\t\t\t\t\t\t\tcase extHostProtocol\n\t\t\t\t\t\t\t\t.WebviewMessageArrayBufferViewType.Int8Array:\n\t\t\t\t\t\t\t\treturn new Int8Array(\n\t\t\t\t\t\t\t\t\tarrayBuffer,\n\t\t\t\t\t\t\t\t\tref.view.byteOffset,\n\t\t\t\t\t\t\t\t\tref.view.byteLength /\n\t\t\t\t\t\t\t\t\t\tInt8Array.BYTES_PER_ELEMENT,\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tcase extHostProtocol\n\t\t\t\t\t\t\t\t.WebviewMessageArrayBufferViewType.Uint8Array:\n\t\t\t\t\t\t\t\treturn new Uint8Array(\n\t\t\t\t\t\t\t\t\tarrayBuffer,\n\t\t\t\t\t\t\t\t\tref.view.byteOffset,\n\t\t\t\t\t\t\t\t\tref.view.byteLength /\n\t\t\t\t\t\t\t\t\t\tUint8Array.BYTES_PER_ELEMENT,\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tcase extHostProtocol\n\t\t\t\t\t\t\t\t.WebviewMessageArrayBufferViewType\n\t\t\t\t\t\t\t\t.Uint8ClampedArray:\n\t\t\t\t\t\t\t\treturn new Uint8ClampedArray(\n\t\t\t\t\t\t\t\t\tarrayBuffer,\n\t\t\t\t\t\t\t\t\tref.view.byteOffset,\n\t\t\t\t\t\t\t\t\tref.view.byteLength /\n\t\t\t\t\t\t\t\t\t\tUint8ClampedArray.BYTES_PER_ELEMENT,\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tcase extHostProtocol\n\t\t\t\t\t\t\t\t.WebviewMessageArrayBufferViewType.Int16Array:\n\t\t\t\t\t\t\t\treturn new Int16Array(\n\t\t\t\t\t\t\t\t\tarrayBuffer,\n\t\t\t\t\t\t\t\t\tref.view.byteOffset,\n\t\t\t\t\t\t\t\t\tref.view.byteLength /\n\t\t\t\t\t\t\t\t\t\tInt16Array.BYTES_PER_ELEMENT,\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tcase extHostProtocol\n\t\t\t\t\t\t\t\t.WebviewMessageArrayBufferViewType.Uint16Array:\n\t\t\t\t\t\t\t\treturn new Uint16Array(\n\t\t\t\t\t\t\t\t\tarrayBuffer,\n\t\t\t\t\t\t\t\t\tref.view.byteOffset,\n\t\t\t\t\t\t\t\t\tref.view.byteLength /\n\t\t\t\t\t\t\t\t\t\tUint16Array.BYTES_PER_ELEMENT,\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tcase extHostProtocol\n\t\t\t\t\t\t\t\t.WebviewMessageArrayBufferViewType.Int32Array:\n\t\t\t\t\t\t\t\treturn new Int32Array(\n\t\t\t\t\t\t\t\t\tarrayBuffer,\n\t\t\t\t\t\t\t\t\tref.view.byteOffset,\n\t\t\t\t\t\t\t\t\tref.view.byteLength /\n\t\t\t\t\t\t\t\t\t\tInt32Array.BYTES_PER_ELEMENT,\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tcase extHostProtocol\n\t\t\t\t\t\t\t\t.WebviewMessageArrayBufferViewType.Uint32Array:\n\t\t\t\t\t\t\t\treturn new Uint32Array(\n\t\t\t\t\t\t\t\t\tarrayBuffer,\n\t\t\t\t\t\t\t\t\tref.view.byteOffset,\n\t\t\t\t\t\t\t\t\tref.view.byteLength /\n\t\t\t\t\t\t\t\t\t\tUint32Array.BYTES_PER_ELEMENT,\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tcase extHostProtocol\n\t\t\t\t\t\t\t\t.WebviewMessageArrayBufferViewType.Float32Array:\n\t\t\t\t\t\t\t\treturn new Float32Array(\n\t\t\t\t\t\t\t\t\tarrayBuffer,\n\t\t\t\t\t\t\t\t\tref.view.byteOffset,\n\t\t\t\t\t\t\t\t\tref.view.byteLength /\n\t\t\t\t\t\t\t\t\t\tFloat32Array.BYTES_PER_ELEMENT,\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tcase extHostProtocol\n\t\t\t\t\t\t\t\t.WebviewMessageArrayBufferViewType.Float64Array:\n\t\t\t\t\t\t\t\treturn new Float64Array(\n\t\t\t\t\t\t\t\t\tarrayBuffer,\n\t\t\t\t\t\t\t\t\tref.view.byteOffset,\n\t\t\t\t\t\t\t\t\tref.view.byteLength /\n\t\t\t\t\t\t\t\t\t\tFloat64Array.BYTES_PER_ELEMENT,\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tcase extHostProtocol\n\t\t\t\t\t\t\t\t.WebviewMessageArrayBufferViewType\n\t\t\t\t\t\t\t\t.BigInt64Array:\n\t\t\t\t\t\t\t\treturn new BigInt64Array(\n\t\t\t\t\t\t\t\t\tarrayBuffer,\n\t\t\t\t\t\t\t\t\tref.view.byteOffset,\n\t\t\t\t\t\t\t\t\tref.view.byteLength /\n\t\t\t\t\t\t\t\t\t\tBigInt64Array.BYTES_PER_ELEMENT,\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tcase extHostProtocol\n\t\t\t\t\t\t\t\t.WebviewMessageArrayBufferViewType\n\t\t\t\t\t\t\t\t.BigUint64Array:\n\t\t\t\t\t\t\t\treturn new BigUint64Array(\n\t\t\t\t\t\t\t\t\tarrayBuffer,\n\t\t\t\t\t\t\t\t\tref.view.byteOffset,\n\t\t\t\t\t\t\t\t\tref.view.byteLength /\n\t\t\t\t\t\t\t\t\t\tBigUint64Array.BYTES_PER_ELEMENT,\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\tthrow new Error(\n\t\t\t\t\t\t\t\t\t\"Unknown array buffer view type\",\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\treturn arrayBuffer;\n\t\t\t\t}\n\t\t\t\treturn value;\n\t\t\t}\n\t\t: undefined;\n\n\tconst message = JSON.parse(jsonMessage, reviver);\n\treturn { message, arrayBuffers };\n}\n"],
  "mappings": ";;AAKA,SAAS,gBAAgB;AACzB,YAAY,qBAAqB;AAEjC,MAAM,eAAe;AAAA,EARrB,OAQqB;AAAA;AAAA;AAAA,EACJ,UAAyB,CAAC;AAAA,EAEnC,IAAI,QAA6B;AACvC,QAAI,QAAQ,KAAK,QAAQ,QAAQ,MAAM;AACvC,QAAI,QAAQ,GAAG;AACd,cAAQ,KAAK,QAAQ;AACrB,WAAK,QAAQ,KAAK,MAAM;AAAA,IACzB;AACA,WAAO;AAAA,EACR;AACD;AAEO,SAAS,wBACf,SACA,SAC2C;AAC3C,MAAI,QAAQ,gCAAgC;AAE3C,UAAM,eAAe,IAAI,eAAe;AAExC,UAAM,WAAW,wBAAC,MAAc,UAAe;AAC9C,UAAI,iBAAiB,aAAa;AACjC,cAAM,QAAQ,aAAa,IAAI,KAAK;AACpC,eAAO;AAAA,UACN,mCAAmC;AAAA,UACnC;AAAA,QACD;AAAA,MACD,WAAW,YAAY,OAAO,KAAK,GAAG;AACrC,cAAM,OAAO,kBAAkB,KAAK;AACpC,YAAI,MAAM;AACT,gBAAM,QAAQ,aAAa,IAAI,MAAM,MAAM;AAC3C,iBAAO;AAAA,YACN,mCAAmC;AAAA,YACnC;AAAA,YACA,MAAM;AAAA,cACL;AAAA,cACA,YAAY,MAAM;AAAA,cAClB,YAAY,MAAM;AAAA,YACnB;AAAA,UACD;AAAA,QACD;AAAA,MACD;AAEA,aAAO;AAAA,IACR,GAxBiB;AA0BjB,UAAM,oBAAoB,KAAK,UAAU,SAAS,QAAQ;AAE1D,UAAM,UAAU,aAAa,QAAQ,IAAI,CAAC,gBAAgB;AACzD,YAAM,QAAQ,IAAI,WAAW,WAAW;AACxC,aAAO,SAAS,KAAK,KAAK;AAAA,IAC3B,CAAC;AAED,WAAO,EAAE,SAAS,mBAAmB,QAAQ;AAAA,EAC9C,OAAO;AACN,WAAO,EAAE,SAAS,KAAK,UAAU,OAAO,GAAG,SAAS,CAAC,EAAE;AAAA,EACxD;AACD;AA7CgB;AA+ChB,SAAS,kBACR,OACgE;AAChE,UAAQ,MAAM,YAAY,MAAM;AAAA,IAC/B,KAAK;AACJ,aAAO,gBAAgB,kCAAkC;AAAA,IAC1D,KAAK;AACJ,aAAO,gBAAgB,kCAAkC;AAAA,IAC1D,KAAK;AACJ,aAAO,gBAAgB,kCACrB;AAAA,IACH,KAAK;AACJ,aAAO,gBAAgB,kCAAkC;AAAA,IAC1D,KAAK;AACJ,aAAO,gBAAgB,kCACrB;AAAA,IACH,KAAK;AACJ,aAAO,gBAAgB,kCAAkC;AAAA,IAC1D,KAAK;AACJ,aAAO,gBAAgB,kCACrB;AAAA,IACH,KAAK;AACJ,aAAO,gBAAgB,kCACrB;AAAA,IACH,KAAK;AACJ,aAAO,gBAAgB,kCACrB;AAAA,IACH,KAAK;AACJ,aAAO,gBAAgB,kCACrB;AAAA,IACH,KAAK;AACJ,aAAO,gBAAgB,kCACrB;AAAA,EACJ;AACA,SAAO;AACR;AAnCS;AAqCF,SAAS,0BACf,aACA,SACgD;AAChD,QAAM,eAA8B,QAAQ,IAAI,CAAC,WAAW;AAC3D,UAAM,cAAc,IAAI,YAAY,OAAO,UAAU;AACrD,UAAM,aAAa,IAAI,WAAW,WAAW;AAC7C,eAAW,IAAI,OAAO,MAAM;AAC5B,WAAO;AAAA,EACR,CAAC;AAED,QAAM,UAAU,QAAQ,SACrB,CAAC,MAAc,UAAe;AAC9B,QACC,SACA,OAAO,UAAU,YAEhB,MACC,mCACD;AACD,YAAM,MACL;AACD,YAAM,EAAE,MAAM,IAAI;AAClB,YAAM,cAAc,aAAa,KAAK;AACtC,UAAI,IAAI,MAAM;AACb,gBAAQ,IAAI,KAAK,MAAM;AAAA,UACtB,KAAK,gBACH,kCAAkC;AACnC,mBAAO,IAAI;AAAA,cACV;AAAA,cACA,IAAI,KAAK;AAAA,cACT,IAAI,KAAK,aACR,UAAU;AAAA,YACZ;AAAA,UACD,KAAK,gBACH,kCAAkC;AACnC,mBAAO,IAAI;AAAA,cACV;AAAA,cACA,IAAI,KAAK;AAAA,cACT,IAAI,KAAK,aACR,WAAW;AAAA,YACb;AAAA,UACD,KAAK,gBACH,kCACA;AACD,mBAAO,IAAI;AAAA,cACV;AAAA,cACA,IAAI,KAAK;AAAA,cACT,IAAI,KAAK,aACR,kBAAkB;AAAA,YACpB;AAAA,UACD,KAAK,gBACH,kCAAkC;AACnC,mBAAO,IAAI;AAAA,cACV;AAAA,cACA,IAAI,KAAK;AAAA,cACT,IAAI,KAAK,aACR,WAAW;AAAA,YACb;AAAA,UACD,KAAK,gBACH,kCAAkC;AACnC,mBAAO,IAAI;AAAA,cACV;AAAA,cACA,IAAI,KAAK;AAAA,cACT,IAAI,KAAK,aACR,YAAY;AAAA,YACd;AAAA,UACD,KAAK,gBACH,kCAAkC;AACnC,mBAAO,IAAI;AAAA,cACV;AAAA,cACA,IAAI,KAAK;AAAA,cACT,IAAI,KAAK,aACR,WAAW;AAAA,YACb;AAAA,UACD,KAAK,gBACH,kCAAkC;AACnC,mBAAO,IAAI;AAAA,cACV;AAAA,cACA,IAAI,KAAK;AAAA,cACT,IAAI,KAAK,aACR,YAAY;AAAA,YACd;AAAA,UACD,KAAK,gBACH,kCAAkC;AACnC,mBAAO,IAAI;AAAA,cACV;AAAA,cACA,IAAI,KAAK;AAAA,cACT,IAAI,KAAK,aACR,aAAa;AAAA,YACf;AAAA,UACD,KAAK,gBACH,kCAAkC;AACnC,mBAAO,IAAI;AAAA,cACV;AAAA,cACA,IAAI,KAAK;AAAA,cACT,IAAI,KAAK,aACR,aAAa;AAAA,YACf;AAAA,UACD,KAAK,gBACH,kCACA;AACD,mBAAO,IAAI;AAAA,cACV;AAAA,cACA,IAAI,KAAK;AAAA,cACT,IAAI,KAAK,aACR,cAAc;AAAA,YAChB;AAAA,UACD,KAAK,gBACH,kCACA;AACD,mBAAO,IAAI;AAAA,cACV;AAAA,cACA,IAAI,KAAK;AAAA,cACT,IAAI,KAAK,aACR,eAAe;AAAA,YACjB;AAAA,UACD;AACC,kBAAM,IAAI;AAAA,cACT;AAAA,YACD;AAAA,QACF;AAAA,MACD;AACA,aAAO;AAAA,IACR;AACA,WAAO;AAAA,EACR,IACC;AAEH,QAAM,UAAU,KAAK,MAAM,aAAa,OAAO;AAC/C,SAAO,EAAE,SAAS,aAAa;AAChC;AAnIgB;",
  "names": []
}
