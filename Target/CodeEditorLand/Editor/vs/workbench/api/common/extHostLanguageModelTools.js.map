{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/api/common/extHostLanguageModelTools.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport type * as vscode from \"vscode\";\nimport { raceCancellation } from \"../../../base/common/async.js\";\nimport { CancellationToken } from \"../../../base/common/cancellation.js\";\nimport { CancellationError } from \"../../../base/common/errors.js\";\nimport {\n\ttype IDisposable,\n\ttoDisposable,\n} from \"../../../base/common/lifecycle.js\";\nimport { revive } from \"../../../base/common/marshalling.js\";\nimport { generateUuid } from \"../../../base/common/uuid.js\";\nimport type { IExtensionDescription } from \"../../../platform/extensions/common/extensions.js\";\nimport type {\n\tIToolInvocation,\n\tIToolInvocationContext,\n\tIToolResult,\n} from \"../../contrib/chat/common/languageModelToolsService.js\";\nimport {\n\ttype ExtHostLanguageModelToolsShape,\n\ttype IMainContext,\n\ttype IToolDataDto,\n\tMainContext,\n\ttype MainThreadLanguageModelToolsShape,\n} from \"./extHost.protocol.js\";\nimport * as typeConvert from \"./extHostTypeConverters.js\";\n\nexport class ExtHostLanguageModelTools\n\timplements ExtHostLanguageModelToolsShape\n{\n\t/** A map of tools that were registered in this EH */\n\tprivate readonly _registeredTools = new Map<\n\t\tstring,\n\t\t{ extension: IExtensionDescription; tool: vscode.LanguageModelTool }\n\t>();\n\tprivate readonly _proxy: MainThreadLanguageModelToolsShape;\n\tprivate readonly _tokenCountFuncs = new Map<\n\t\t/* call ID */ string,\n\t\t(text: string, token?: vscode.CancellationToken) => Thenable<number>\n\t>();\n\n\t/** A map of all known tools, from other EHs or registered in vscode core */\n\tprivate readonly _allTools = new Map<string, IToolDataDto>();\n\n\tconstructor(mainContext: IMainContext) {\n\t\tthis._proxy = mainContext.getProxy(\n\t\t\tMainContext.MainThreadLanguageModelTools,\n\t\t);\n\n\t\tthis._proxy.$getTools().then((tools) => {\n\t\t\tfor (const tool of tools) {\n\t\t\t\tthis._allTools.set(tool.id, revive(tool));\n\t\t\t}\n\t\t});\n\t}\n\n\tasync $countTokensForInvocation(\n\t\tcallId: string,\n\t\tinput: string,\n\t\ttoken: CancellationToken,\n\t): Promise<number> {\n\t\tconst fn = this._tokenCountFuncs.get(callId);\n\t\tif (!fn) {\n\t\t\tthrow new Error(`Tool invocation call ${callId} not found`);\n\t\t}\n\n\t\treturn await fn(input, token);\n\t}\n\n\tasync invokeTool(\n\t\ttoolId: string,\n\t\toptions: vscode.LanguageModelToolInvocationOptions,\n\t\ttoken: CancellationToken,\n\t): Promise<vscode.LanguageModelToolResult> {\n\t\tconst callId = generateUuid();\n\t\tif (options.tokenOptions) {\n\t\t\tthis._tokenCountFuncs.set(callId, options.tokenOptions.countTokens);\n\t\t}\n\t\ttry {\n\t\t\t// Making the round trip here because not all tools were necessarily registered in this EH\n\t\t\tconst result = await this._proxy.$invokeTool(\n\t\t\t\t{\n\t\t\t\t\ttoolId,\n\t\t\t\t\tcallId,\n\t\t\t\t\tparameters: options.parameters,\n\t\t\t\t\ttokenBudget: options.tokenOptions?.tokenBudget,\n\t\t\t\t\tcontext: options.toolInvocationToken as\n\t\t\t\t\t\t| IToolInvocationContext\n\t\t\t\t\t\t| undefined,\n\t\t\t\t},\n\t\t\t\ttoken,\n\t\t\t);\n\t\t\treturn typeConvert.LanguageModelToolResult.to(result);\n\t\t} finally {\n\t\t\tthis._tokenCountFuncs.delete(callId);\n\t\t}\n\t}\n\n\t$onDidChangeTools(tools: IToolDataDto[]): void {\n\t\tthis._allTools.clear();\n\t\tfor (const tool of tools) {\n\t\t\tthis._allTools.set(tool.id, tool);\n\t\t}\n\t}\n\n\tget tools(): vscode.LanguageModelToolDescription[] {\n\t\treturn Array.from(this._allTools.values()).map((tool) =>\n\t\t\ttypeConvert.LanguageModelToolDescription.to(tool),\n\t\t);\n\t}\n\n\tasync $invokeTool(\n\t\tdto: IToolInvocation,\n\t\ttoken: CancellationToken,\n\t): Promise<IToolResult> {\n\t\tconst item = this._registeredTools.get(dto.toolId);\n\t\tif (!item) {\n\t\t\tthrow new Error(`Unknown tool ${dto.toolId}`);\n\t\t}\n\n\t\tconst options: vscode.LanguageModelToolInvocationOptions = {\n\t\t\tparameters: dto.parameters,\n\t\t\ttoolInvocationToken: dto.context,\n\t\t};\n\t\tif (dto.tokenBudget !== undefined) {\n\t\t\toptions.tokenOptions = {\n\t\t\t\ttokenBudget: dto.tokenBudget,\n\t\t\t\tcountTokens:\n\t\t\t\t\tthis._tokenCountFuncs.get(dto.callId) ||\n\t\t\t\t\t((value, token = CancellationToken.None) =>\n\t\t\t\t\t\tthis._proxy.$countTokensForInvocation(\n\t\t\t\t\t\t\tdto.callId,\n\t\t\t\t\t\t\tvalue,\n\t\t\t\t\t\t\ttoken,\n\t\t\t\t\t\t)),\n\t\t\t};\n\t\t}\n\n\t\t// Some participant in extHostChatAgents calls invokeTool, goes to extHostLMTools\n\t\t// mainThreadLMTools invokes the tool, which calls back to extHostLMTools\n\t\t// The tool requests permission\n\t\t// The tool in extHostLMTools calls for permission back to mainThreadLMTools\n\t\t// And back to extHostLMTools, and back to the participant in extHostChatAgents\n\t\t// Is there a tool call ID to identify the call?\n\t\tconst extensionResult = await raceCancellation(\n\t\t\tPromise.resolve(item.tool.invoke(options, token)),\n\t\t\ttoken,\n\t\t);\n\t\tif (!extensionResult) {\n\t\t\tthrow new CancellationError();\n\t\t}\n\n\t\tfor (const key of Object.keys(extensionResult)) {\n\t\t\tconst value = extensionResult[key];\n\t\t\tif (value instanceof Promise) {\n\t\t\t\tthrow new Error(`Tool result for '${key}' cannot be a Promise`);\n\t\t\t}\n\t\t}\n\n\t\treturn typeConvert.LanguageModelToolResult.from(extensionResult);\n\t}\n\n\tregisterTool(\n\t\textension: IExtensionDescription,\n\t\tname: string,\n\t\ttool: vscode.LanguageModelTool,\n\t): IDisposable {\n\t\tthis._registeredTools.set(name, { extension, tool });\n\t\tthis._proxy.$registerTool(name);\n\n\t\treturn toDisposable(() => {\n\t\t\tthis._registeredTools.delete(name);\n\t\t\tthis._proxy.$unregisterTool(name);\n\t\t});\n\t}\n}\n"],
  "mappings": "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",
  "names": ["token"]
}
