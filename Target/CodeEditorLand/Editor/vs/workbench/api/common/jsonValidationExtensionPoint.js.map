{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/api/common/jsonValidationExtensionPoint.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { MarkdownString } from \"../../../base/common/htmlContent.js\";\nimport { Disposable } from \"../../../base/common/lifecycle.js\";\nimport * as resources from \"../../../base/common/resources.js\";\nimport { isString } from \"../../../base/common/types.js\";\nimport * as nls from \"../../../nls.js\";\nimport type { IExtensionManifest } from \"../../../platform/extensions/common/extensions.js\";\nimport { SyncDescriptor } from \"../../../platform/instantiation/common/descriptors.js\";\nimport { Registry } from \"../../../platform/registry/common/platform.js\";\nimport {\n\tExtensions,\n\ttype IExtensionFeatureTableRenderer,\n\ttype IExtensionFeaturesRegistry,\n\ttype IRenderedData,\n\ttype IRowData,\n\ttype ITableData,\n} from \"../../services/extensionManagement/common/extensionFeatures.js\";\nimport { ExtensionsRegistry } from \"../../services/extensions/common/extensionsRegistry.js\";\n\ninterface IJSONValidationExtensionPoint {\n\tfileMatch: string | string[];\n\turl: string;\n}\n\nconst configurationExtPoint = ExtensionsRegistry.registerExtensionPoint<\n\tIJSONValidationExtensionPoint[]\n>({\n\textensionPoint: \"jsonValidation\",\n\tdefaultExtensionKind: [\"workspace\", \"web\"],\n\tjsonSchema: {\n\t\tdescription: nls.localize(\n\t\t\t\"contributes.jsonValidation\",\n\t\t\t\"Contributes json schema configuration.\",\n\t\t),\n\t\ttype: \"array\",\n\t\tdefaultSnippets: [\n\t\t\t{ body: [{ fileMatch: \"${1:file.json}\", url: \"${2:url}\" }] },\n\t\t],\n\t\titems: {\n\t\t\ttype: \"object\",\n\t\t\tdefaultSnippets: [\n\t\t\t\t{ body: { fileMatch: \"${1:file.json}\", url: \"${2:url}\" } },\n\t\t\t],\n\t\t\tproperties: {\n\t\t\t\tfileMatch: {\n\t\t\t\t\ttype: [\"string\", \"array\"],\n\t\t\t\t\tdescription: nls.localize(\n\t\t\t\t\t\t\"contributes.jsonValidation.fileMatch\",\n\t\t\t\t\t\t'The file pattern (or an array of patterns) to match, for example \"package.json\" or \"*.launch\". Exclusion patterns start with \\'!\\'',\n\t\t\t\t\t),\n\t\t\t\t\titems: {\n\t\t\t\t\t\ttype: [\"string\"],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\turl: {\n\t\t\t\t\tdescription: nls.localize(\n\t\t\t\t\t\t\"contributes.jsonValidation.url\",\n\t\t\t\t\t\t\"A schema URL ('http:', 'https:') or relative path to the extension folder ('./').\",\n\t\t\t\t\t),\n\t\t\t\t\ttype: \"string\",\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t},\n});\n\nexport class JSONValidationExtensionPoint {\n\tconstructor() {\n\t\tconfigurationExtPoint.setHandler((extensions) => {\n\t\t\tfor (const extension of extensions) {\n\t\t\t\tconst extensionValue = <IJSONValidationExtensionPoint[]>(\n\t\t\t\t\textension.value\n\t\t\t\t);\n\t\t\t\tconst collector = extension.collector;\n\t\t\t\tconst extensionLocation =\n\t\t\t\t\textension.description.extensionLocation;\n\n\t\t\t\tif (!extensionValue || !Array.isArray(extensionValue)) {\n\t\t\t\t\tcollector.error(\n\t\t\t\t\t\tnls.localize(\n\t\t\t\t\t\t\t\"invalid.jsonValidation\",\n\t\t\t\t\t\t\t\"'configuration.jsonValidation' must be a array\",\n\t\t\t\t\t\t),\n\t\t\t\t\t);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\textensionValue.forEach((extension) => {\n\t\t\t\t\tif (\n\t\t\t\t\t\t!isString(extension.fileMatch) &&\n\t\t\t\t\t\t!(\n\t\t\t\t\t\t\tArray.isArray(extension.fileMatch) &&\n\t\t\t\t\t\t\textension.fileMatch.every(isString)\n\t\t\t\t\t\t)\n\t\t\t\t\t) {\n\t\t\t\t\t\tcollector.error(\n\t\t\t\t\t\t\tnls.localize(\n\t\t\t\t\t\t\t\t\"invalid.fileMatch\",\n\t\t\t\t\t\t\t\t\"'configuration.jsonValidation.fileMatch' must be defined as a string or an array of strings.\",\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\tconst uri = extension.url;\n\t\t\t\t\tif (!isString(uri)) {\n\t\t\t\t\t\tcollector.error(\n\t\t\t\t\t\t\tnls.localize(\n\t\t\t\t\t\t\t\t\"invalid.url\",\n\t\t\t\t\t\t\t\t\"'configuration.jsonValidation.url' must be a URL or relative path\",\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\tif (uri.startsWith(\"./\")) {\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tconst colorThemeLocation = resources.joinPath(\n\t\t\t\t\t\t\t\textensionLocation,\n\t\t\t\t\t\t\t\turi,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\t!resources.isEqualOrParent(\n\t\t\t\t\t\t\t\t\tcolorThemeLocation,\n\t\t\t\t\t\t\t\t\textensionLocation,\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\tcollector.warn(\n\t\t\t\t\t\t\t\t\tnls.localize(\n\t\t\t\t\t\t\t\t\t\t\"invalid.path.1\",\n\t\t\t\t\t\t\t\t\t\t\"Expected `contributes.{0}.url` ({1}) to be included inside extension's folder ({2}). This might make the extension non-portable.\",\n\t\t\t\t\t\t\t\t\t\tconfigurationExtPoint.name,\n\t\t\t\t\t\t\t\t\t\tcolorThemeLocation.toString(),\n\t\t\t\t\t\t\t\t\t\textensionLocation.path,\n\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\t\tcollector.error(\n\t\t\t\t\t\t\t\tnls.localize(\n\t\t\t\t\t\t\t\t\t\"invalid.url.fileschema\",\n\t\t\t\t\t\t\t\t\t\"'configuration.jsonValidation.url' is an invalid relative URL: {0}\",\n\t\t\t\t\t\t\t\t\te.message,\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if (!/^[^:/?#]+:\\/\\//.test(uri)) {\n\t\t\t\t\t\tcollector.error(\n\t\t\t\t\t\t\tnls.localize(\n\t\t\t\t\t\t\t\t\"invalid.url.schema\",\n\t\t\t\t\t\t\t\t\"'configuration.jsonValidation.url' must be an absolute URL or start with './'  to reference schemas located in the extension.\",\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t}\n}\n\nclass JSONValidationDataRenderer\n\textends Disposable\n\timplements IExtensionFeatureTableRenderer\n{\n\treadonly type = \"table\";\n\n\tshouldRender(manifest: IExtensionManifest): boolean {\n\t\treturn !!manifest.contributes?.jsonValidation;\n\t}\n\n\trender(manifest: IExtensionManifest): IRenderedData<ITableData> {\n\t\tconst contrib = manifest.contributes?.jsonValidation || [];\n\t\tif (!contrib.length) {\n\t\t\treturn { data: { headers: [], rows: [] }, dispose: () => {} };\n\t\t}\n\n\t\tconst headers = [\n\t\t\tnls.localize(\"fileMatch\", \"File Match\"),\n\t\t\tnls.localize(\"schema\", \"Schema\"),\n\t\t];\n\n\t\tconst rows: IRowData[][] = contrib.map((v) => {\n\t\t\treturn [\n\t\t\t\tnew MarkdownString().appendMarkdown(\n\t\t\t\t\t`\\`${Array.isArray(v.fileMatch) ? v.fileMatch.join(\", \") : v.fileMatch}\\``,\n\t\t\t\t),\n\t\t\t\tv.url,\n\t\t\t];\n\t\t});\n\n\t\treturn {\n\t\t\tdata: {\n\t\t\t\theaders,\n\t\t\t\trows,\n\t\t\t},\n\t\t\tdispose: () => {},\n\t\t};\n\t}\n}\n\nRegistry.as<IExtensionFeaturesRegistry>(\n\tExtensions.ExtensionFeaturesRegistry,\n).registerExtensionFeature({\n\tid: \"jsonValidation\",\n\tlabel: nls.localize(\"jsonValidation\", \"JSON Validation\"),\n\taccess: {\n\t\tcanToggle: false,\n\t},\n\trenderer: new SyncDescriptor(JSONValidationDataRenderer),\n});\n"],
  "mappings": "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",
  "names": ["extension"]
}
