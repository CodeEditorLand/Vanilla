{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/api/common/extHostStatusBar.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n/* eslint-disable local/code-no-native-private */\n\nimport type * as vscode from \"vscode\";\nimport { DisposableStore } from \"../../../base/common/lifecycle.js\";\nimport { isNumber } from \"../../../base/common/types.js\";\nimport { localize } from \"../../../nls.js\";\nimport type { IExtensionDescription } from \"../../../platform/extensions/common/extensions.js\";\nimport {\n\ttype ExtHostStatusBarShape,\n\ttype ICommandDto,\n\ttype IMainContext,\n\tMainContext,\n\ttype MainThreadStatusBarShape,\n\ttype StatusBarItemDto,\n} from \"./extHost.protocol.js\";\nimport type { CommandsConverter } from \"./extHostCommands.js\";\nimport { MarkdownString } from \"./extHostTypeConverters.js\";\nimport {\n\tDisposable,\n\tStatusBarAlignment as ExtHostStatusBarAlignment,\n\tThemeColor,\n\tasStatusBarItemIdentifier,\n} from \"./extHostTypes.js\";\n\nexport class ExtHostStatusBarEntry implements vscode.StatusBarItem {\n\tprivate static ID_GEN = 0;\n\n\tprivate static ALLOWED_BACKGROUND_COLORS = new Map<string, ThemeColor>([\n\t\t[\n\t\t\t\"statusBarItem.errorBackground\",\n\t\t\tnew ThemeColor(\"statusBarItem.errorForeground\"),\n\t\t],\n\t\t[\n\t\t\t\"statusBarItem.warningBackground\",\n\t\t\tnew ThemeColor(\"statusBarItem.warningForeground\"),\n\t\t],\n\t]);\n\n\t#proxy: MainThreadStatusBarShape;\n\t#commands: CommandsConverter;\n\n\tprivate readonly _entryId: string;\n\n\tprivate _extension?: IExtensionDescription;\n\n\tprivate _id?: string;\n\tprivate _alignment: number;\n\tprivate _priority?: number;\n\n\tprivate _disposed = false;\n\tprivate _visible?: boolean;\n\n\tprivate _text = \"\";\n\tprivate _tooltip?: string | vscode.MarkdownString;\n\tprivate _name?: string;\n\tprivate _color?: string | ThemeColor;\n\tprivate _backgroundColor?: ThemeColor;\n\t// eslint-disable-next-line local/code-no-potentially-unsafe-disposables\n\tprivate _latestCommandRegistration?: DisposableStore;\n\tprivate readonly _staleCommandRegistrations = new DisposableStore();\n\tprivate _command?: {\n\t\treadonly fromApi: string | vscode.Command;\n\t\treadonly internal: ICommandDto;\n\t};\n\n\tprivate _timeoutHandle: any;\n\tprivate _accessibilityInformation?: vscode.AccessibilityInformation;\n\n\tconstructor(\n\t\tproxy: MainThreadStatusBarShape,\n\t\tcommands: CommandsConverter,\n\t\tstaticItems: ReadonlyMap<string, StatusBarItemDto>,\n\t\textension: IExtensionDescription,\n\t\tid?: string,\n\t\talignment?: ExtHostStatusBarAlignment,\n\t\tpriority?: number,\n\t);\n\tconstructor(\n\t\tproxy: MainThreadStatusBarShape,\n\t\tcommands: CommandsConverter,\n\t\tstaticItems: ReadonlyMap<string, StatusBarItemDto>,\n\t\textension: IExtensionDescription | undefined,\n\t\tid: string,\n\t\talignment?: ExtHostStatusBarAlignment,\n\t\tpriority?: number,\n\t);\n\tconstructor(\n\t\tproxy: MainThreadStatusBarShape,\n\t\tcommands: CommandsConverter,\n\t\tstaticItems: ReadonlyMap<string, StatusBarItemDto>,\n\t\textension?: IExtensionDescription,\n\t\tid?: string,\n\t\talignment: ExtHostStatusBarAlignment = ExtHostStatusBarAlignment.Left,\n\t\tpriority?: number,\n\t) {\n\t\tthis.#proxy = proxy;\n\t\tthis.#commands = commands;\n\n\t\tif (id && extension) {\n\t\t\tthis._entryId = asStatusBarItemIdentifier(extension.identifier, id);\n\t\t\t// if new item already exists mark it as visible and copy properties\n\t\t\t// this can only happen when an item was contributed by an extension\n\t\t\tconst item = staticItems.get(this._entryId);\n\t\t\tif (item) {\n\t\t\t\talignment = item.alignLeft\n\t\t\t\t\t? ExtHostStatusBarAlignment.Left\n\t\t\t\t\t: ExtHostStatusBarAlignment.Right;\n\t\t\t\tpriority = item.priority;\n\t\t\t\tthis._visible = true;\n\t\t\t\tthis.name = item.name;\n\t\t\t\tthis.text = item.text;\n\t\t\t\tthis.tooltip = item.tooltip;\n\t\t\t\tthis.command = item.command;\n\t\t\t\tthis.accessibilityInformation = item.accessibilityInformation;\n\t\t\t}\n\t\t} else {\n\t\t\tthis._entryId = String(ExtHostStatusBarEntry.ID_GEN++);\n\t\t}\n\t\tthis._extension = extension;\n\n\t\tthis._id = id;\n\t\tthis._alignment = alignment;\n\t\tthis._priority = this.validatePriority(priority);\n\t}\n\n\tprivate validatePriority(priority?: number): number | undefined {\n\t\tif (!isNumber(priority)) {\n\t\t\treturn undefined; // using this method to catch `NaN` too!\n\t\t}\n\n\t\t// Our RPC mechanism use JSON to serialize data which does\n\t\t// not support `Infinity` so we need to fill in the number\n\t\t// equivalent as close as possible.\n\t\t// https://github.com/microsoft/vscode/issues/133317\n\n\t\tif (priority === Number.POSITIVE_INFINITY) {\n\t\t\treturn Number.MAX_VALUE;\n\t\t}\n\n\t\tif (priority === Number.NEGATIVE_INFINITY) {\n\t\t\treturn -Number.MAX_VALUE;\n\t\t}\n\n\t\treturn priority;\n\t}\n\n\tpublic get id(): string {\n\t\treturn this._id ?? this._extension!.identifier.value;\n\t}\n\n\tpublic get alignment(): vscode.StatusBarAlignment {\n\t\treturn this._alignment;\n\t}\n\n\tpublic get priority(): number | undefined {\n\t\treturn this._priority;\n\t}\n\n\tpublic get text(): string {\n\t\treturn this._text;\n\t}\n\n\tpublic get name(): string | undefined {\n\t\treturn this._name;\n\t}\n\n\tpublic get tooltip(): vscode.MarkdownString | string | undefined {\n\t\treturn this._tooltip;\n\t}\n\n\tpublic get color(): string | ThemeColor | undefined {\n\t\treturn this._color;\n\t}\n\n\tpublic get backgroundColor(): ThemeColor | undefined {\n\t\treturn this._backgroundColor;\n\t}\n\n\tpublic get command(): string | vscode.Command | undefined {\n\t\treturn this._command?.fromApi;\n\t}\n\n\tpublic get accessibilityInformation():\n\t\t| vscode.AccessibilityInformation\n\t\t| undefined {\n\t\treturn this._accessibilityInformation;\n\t}\n\n\tpublic set text(text: string) {\n\t\tthis._text = text;\n\t\tthis.update();\n\t}\n\n\tpublic set name(name: string | undefined) {\n\t\tthis._name = name;\n\t\tthis.update();\n\t}\n\n\tpublic set tooltip(tooltip: vscode.MarkdownString | string | undefined) {\n\t\tthis._tooltip = tooltip;\n\t\tthis.update();\n\t}\n\n\tpublic set color(color: string | ThemeColor | undefined) {\n\t\tthis._color = color;\n\t\tthis.update();\n\t}\n\n\tpublic set backgroundColor(color: ThemeColor | undefined) {\n\t\tif (\n\t\t\tcolor &&\n\t\t\t!ExtHostStatusBarEntry.ALLOWED_BACKGROUND_COLORS.has(color.id)\n\t\t) {\n\t\t\tcolor = undefined;\n\t\t}\n\n\t\tthis._backgroundColor = color;\n\t\tthis.update();\n\t}\n\n\tpublic set command(command: string | vscode.Command | undefined) {\n\t\tif (this._command?.fromApi === command) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (this._latestCommandRegistration) {\n\t\t\tthis._staleCommandRegistrations.add(\n\t\t\t\tthis._latestCommandRegistration,\n\t\t\t);\n\t\t}\n\t\tthis._latestCommandRegistration = new DisposableStore();\n\t\tif (typeof command === \"string\") {\n\t\t\tthis._command = {\n\t\t\t\tfromApi: command,\n\t\t\t\tinternal: this.#commands.toInternal(\n\t\t\t\t\t{ title: \"\", command },\n\t\t\t\t\tthis._latestCommandRegistration,\n\t\t\t\t),\n\t\t\t};\n\t\t} else if (command) {\n\t\t\tthis._command = {\n\t\t\t\tfromApi: command,\n\t\t\t\tinternal: this.#commands.toInternal(\n\t\t\t\t\tcommand,\n\t\t\t\t\tthis._latestCommandRegistration,\n\t\t\t\t),\n\t\t\t};\n\t\t} else {\n\t\t\tthis._command = undefined;\n\t\t}\n\t\tthis.update();\n\t}\n\n\tpublic set accessibilityInformation(accessibilityInformation:\n\t\t| vscode.AccessibilityInformation\n\t\t| undefined) {\n\t\tthis._accessibilityInformation = accessibilityInformation;\n\t\tthis.update();\n\t}\n\n\tpublic show(): void {\n\t\tthis._visible = true;\n\t\tthis.update();\n\t}\n\n\tpublic hide(): void {\n\t\tclearTimeout(this._timeoutHandle);\n\t\tthis._visible = false;\n\t\tthis.#proxy.$disposeEntry(this._entryId);\n\t}\n\n\tprivate update(): void {\n\t\tif (this._disposed || !this._visible) {\n\t\t\treturn;\n\t\t}\n\n\t\tclearTimeout(this._timeoutHandle);\n\n\t\t// Defer the update so that multiple changes to setters dont cause a redraw each\n\t\tthis._timeoutHandle = setTimeout(() => {\n\t\t\tthis._timeoutHandle = undefined;\n\n\t\t\t// If the id is not set, derive it from the extension identifier,\n\t\t\t// otherwise make sure to prefix it with the extension identifier\n\t\t\t// to get a more unique value across extensions.\n\t\t\tlet id: string;\n\t\t\tif (this._extension) {\n\t\t\t\tif (this._id) {\n\t\t\t\t\tid = `${this._extension.identifier.value}.${this._id}`;\n\t\t\t\t} else {\n\t\t\t\t\tid = this._extension.identifier.value;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tid = this._id!;\n\t\t\t}\n\n\t\t\t// If the name is not set, derive it from the extension descriptor\n\t\t\tlet name: string;\n\t\t\tif (this._name) {\n\t\t\t\tname = this._name;\n\t\t\t} else {\n\t\t\t\tname = localize(\n\t\t\t\t\t\"extensionLabel\",\n\t\t\t\t\t\"{0} (Extension)\",\n\t\t\t\t\tthis._extension!.displayName || this._extension!.name,\n\t\t\t\t);\n\t\t\t}\n\n\t\t\t// If a background color is set, the foreground is determined\n\t\t\tlet color = this._color;\n\t\t\tif (this._backgroundColor) {\n\t\t\t\tcolor = ExtHostStatusBarEntry.ALLOWED_BACKGROUND_COLORS.get(\n\t\t\t\t\tthis._backgroundColor.id,\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tconst tooltip = MarkdownString.fromStrict(this._tooltip);\n\n\t\t\t// Set to status bar\n\t\t\tthis.#proxy.$setEntry(\n\t\t\t\tthis._entryId,\n\t\t\t\tid,\n\t\t\t\tthis._extension?.identifier.value,\n\t\t\t\tname,\n\t\t\t\tthis._text,\n\t\t\t\ttooltip,\n\t\t\t\tthis._command?.internal,\n\t\t\t\tcolor,\n\t\t\t\tthis._backgroundColor,\n\t\t\t\tthis._alignment === ExtHostStatusBarAlignment.Left,\n\t\t\t\tthis._priority,\n\t\t\t\tthis._accessibilityInformation,\n\t\t\t);\n\n\t\t\t// clean-up state commands _after_ updating the UI\n\t\t\tthis._staleCommandRegistrations.clear();\n\t\t}, 0);\n\t}\n\n\tpublic dispose(): void {\n\t\tthis.hide();\n\t\tthis._disposed = true;\n\t}\n}\n\nclass StatusBarMessage {\n\tprivate readonly _item: vscode.StatusBarItem;\n\tprivate readonly _messages: { message: string }[] = [];\n\n\tconstructor(statusBar: ExtHostStatusBar) {\n\t\tthis._item = statusBar.createStatusBarEntry(\n\t\t\tundefined,\n\t\t\t\"status.extensionMessage\",\n\t\t\tExtHostStatusBarAlignment.Left,\n\t\t\tNumber.MIN_VALUE,\n\t\t);\n\t\tthis._item.name = localize(\n\t\t\t\"status.extensionMessage\",\n\t\t\t\"Extension Status\",\n\t\t);\n\t}\n\n\tdispose() {\n\t\tthis._messages.length = 0;\n\t\tthis._item.dispose();\n\t}\n\n\tsetMessage(message: string): Disposable {\n\t\tconst data: { message: string } = { message }; // use object to not confuse equal strings\n\t\tthis._messages.unshift(data);\n\t\tthis._update();\n\n\t\treturn new Disposable(() => {\n\t\t\tconst idx = this._messages.indexOf(data);\n\t\t\tif (idx >= 0) {\n\t\t\t\tthis._messages.splice(idx, 1);\n\t\t\t\tthis._update();\n\t\t\t}\n\t\t});\n\t}\n\n\tprivate _update() {\n\t\tif (this._messages.length > 0) {\n\t\t\tthis._item.text = this._messages[0].message;\n\t\t\tthis._item.show();\n\t\t} else {\n\t\t\tthis._item.hide();\n\t\t}\n\t}\n}\n\nexport class ExtHostStatusBar implements ExtHostStatusBarShape {\n\tprivate readonly _proxy: MainThreadStatusBarShape;\n\tprivate readonly _commands: CommandsConverter;\n\tprivate readonly _statusMessage: StatusBarMessage;\n\tprivate readonly _existingItems = new Map<string, StatusBarItemDto>();\n\n\tconstructor(mainContext: IMainContext, commands: CommandsConverter) {\n\t\tthis._proxy = mainContext.getProxy(MainContext.MainThreadStatusBar);\n\t\tthis._commands = commands;\n\t\tthis._statusMessage = new StatusBarMessage(this);\n\t}\n\n\t$acceptStaticEntries(added: StatusBarItemDto[]): void {\n\t\tfor (const item of added) {\n\t\t\tthis._existingItems.set(item.entryId, item);\n\t\t}\n\t}\n\n\tcreateStatusBarEntry(\n\t\textension: IExtensionDescription | undefined,\n\t\tid: string,\n\t\talignment?: ExtHostStatusBarAlignment,\n\t\tpriority?: number,\n\t): vscode.StatusBarItem;\n\tcreateStatusBarEntry(\n\t\textension: IExtensionDescription,\n\t\tid?: string,\n\t\talignment?: ExtHostStatusBarAlignment,\n\t\tpriority?: number,\n\t): vscode.StatusBarItem;\n\tcreateStatusBarEntry(\n\t\textension: IExtensionDescription,\n\t\tid: string,\n\t\talignment?: ExtHostStatusBarAlignment,\n\t\tpriority?: number,\n\t): vscode.StatusBarItem {\n\t\treturn new ExtHostStatusBarEntry(\n\t\t\tthis._proxy,\n\t\t\tthis._commands,\n\t\t\tthis._existingItems,\n\t\t\textension,\n\t\t\tid,\n\t\t\talignment,\n\t\t\tpriority,\n\t\t);\n\t}\n\n\tsetStatusBarMessage(\n\t\ttext: string,\n\t\ttimeoutOrThenable?: number | Thenable<any>,\n\t): Disposable {\n\t\tconst d = this._statusMessage.setMessage(text);\n\t\tlet handle: any;\n\n\t\tif (typeof timeoutOrThenable === \"number\") {\n\t\t\thandle = setTimeout(() => d.dispose(), timeoutOrThenable);\n\t\t} else if (typeof timeoutOrThenable !== \"undefined\") {\n\t\t\ttimeoutOrThenable.then(\n\t\t\t\t() => d.dispose(),\n\t\t\t\t() => d.dispose(),\n\t\t\t);\n\t\t}\n\n\t\treturn new Disposable(() => {\n\t\t\td.dispose();\n\t\t\tclearTimeout(handle);\n\t\t});\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
