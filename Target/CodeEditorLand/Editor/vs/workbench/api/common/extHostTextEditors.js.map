{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/api/common/extHostTextEditors.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as arrays from '../../../base/common/arrays.js';\nimport { Emitter, Event } from '../../../base/common/event.js';\nimport { Disposable } from '../../../base/common/lifecycle.js';\nimport { IExtensionDescription } from '../../../platform/extensions/common/extensions.js';\nimport { ExtHostEditorsShape, IEditorPropertiesChangeData, IMainContext, ITextDocumentShowOptions, ITextEditorPositionData, MainContext, MainThreadTextEditorsShape } from './extHost.protocol.js';\nimport { ExtHostDocumentsAndEditors } from './extHostDocumentsAndEditors.js';\nimport { ExtHostTextEditor, TextEditorDecorationType } from './extHostTextEditor.js';\nimport * as TypeConverters from './extHostTypeConverters.js';\nimport { TextEditorSelectionChangeKind } from './extHostTypes.js';\nimport * as vscode from 'vscode';\n\nexport class ExtHostEditors extends Disposable implements ExtHostEditorsShape {\n\n\tprivate readonly _onDidChangeTextEditorSelection = new Emitter<vscode.TextEditorSelectionChangeEvent>();\n\tprivate readonly _onDidChangeTextEditorOptions = new Emitter<vscode.TextEditorOptionsChangeEvent>();\n\tprivate readonly _onDidChangeTextEditorVisibleRanges = new Emitter<vscode.TextEditorVisibleRangesChangeEvent>();\n\tprivate readonly _onDidChangeTextEditorViewColumn = new Emitter<vscode.TextEditorViewColumnChangeEvent>();\n\tprivate readonly _onDidChangeActiveTextEditor = new Emitter<vscode.TextEditor | undefined>();\n\tprivate readonly _onDidChangeVisibleTextEditors = new Emitter<readonly vscode.TextEditor[]>();\n\n\treadonly onDidChangeTextEditorSelection: Event<vscode.TextEditorSelectionChangeEvent> = this._onDidChangeTextEditorSelection.event;\n\treadonly onDidChangeTextEditorOptions: Event<vscode.TextEditorOptionsChangeEvent> = this._onDidChangeTextEditorOptions.event;\n\treadonly onDidChangeTextEditorVisibleRanges: Event<vscode.TextEditorVisibleRangesChangeEvent> = this._onDidChangeTextEditorVisibleRanges.event;\n\treadonly onDidChangeTextEditorViewColumn: Event<vscode.TextEditorViewColumnChangeEvent> = this._onDidChangeTextEditorViewColumn.event;\n\treadonly onDidChangeActiveTextEditor: Event<vscode.TextEditor | undefined> = this._onDidChangeActiveTextEditor.event;\n\treadonly onDidChangeVisibleTextEditors: Event<readonly vscode.TextEditor[]> = this._onDidChangeVisibleTextEditors.event;\n\n\tprivate readonly _proxy: MainThreadTextEditorsShape;\n\n\tconstructor(\n\t\tmainContext: IMainContext,\n\t\tprivate readonly _extHostDocumentsAndEditors: ExtHostDocumentsAndEditors,\n\t) {\n\t\tsuper();\n\t\tthis._proxy = mainContext.getProxy(MainContext.MainThreadTextEditors);\n\n\t\tthis._register(this._extHostDocumentsAndEditors.onDidChangeVisibleTextEditors(e => this._onDidChangeVisibleTextEditors.fire(e)));\n\t\tthis._register(this._extHostDocumentsAndEditors.onDidChangeActiveTextEditor(e => this._onDidChangeActiveTextEditor.fire(e)));\n\t}\n\n\tgetActiveTextEditor(): vscode.TextEditor | undefined {\n\t\treturn this._extHostDocumentsAndEditors.activeEditor();\n\t}\n\n\tgetVisibleTextEditors(): vscode.TextEditor[];\n\tgetVisibleTextEditors(internal: true): ExtHostTextEditor[];\n\tgetVisibleTextEditors(internal?: true): ExtHostTextEditor[] | vscode.TextEditor[] {\n\t\tconst editors = this._extHostDocumentsAndEditors.allEditors();\n\t\treturn internal\n\t\t\t? editors\n\t\t\t: editors.map(editor => editor.value);\n\t}\n\n\tshowTextDocument(document: vscode.TextDocument, column: vscode.ViewColumn, preserveFocus: boolean): Promise<vscode.TextEditor>;\n\tshowTextDocument(document: vscode.TextDocument, options: { column: vscode.ViewColumn; preserveFocus: boolean; pinned: boolean }): Promise<vscode.TextEditor>;\n\tshowTextDocument(document: vscode.TextDocument, columnOrOptions: vscode.ViewColumn | vscode.TextDocumentShowOptions | undefined, preserveFocus?: boolean): Promise<vscode.TextEditor>;\n\tasync showTextDocument(document: vscode.TextDocument, columnOrOptions: vscode.ViewColumn | vscode.TextDocumentShowOptions | undefined, preserveFocus?: boolean): Promise<vscode.TextEditor> {\n\t\tlet options: ITextDocumentShowOptions;\n\t\tif (typeof columnOrOptions === 'number') {\n\t\t\toptions = {\n\t\t\t\tposition: TypeConverters.ViewColumn.from(columnOrOptions),\n\t\t\t\tpreserveFocus\n\t\t\t};\n\t\t} else if (typeof columnOrOptions === 'object') {\n\t\t\toptions = {\n\t\t\t\tposition: TypeConverters.ViewColumn.from(columnOrOptions.viewColumn),\n\t\t\t\tpreserveFocus: columnOrOptions.preserveFocus,\n\t\t\t\tselection: typeof columnOrOptions.selection === 'object' ? TypeConverters.Range.from(columnOrOptions.selection) : undefined,\n\t\t\t\tpinned: typeof columnOrOptions.preview === 'boolean' ? !columnOrOptions.preview : undefined\n\t\t\t};\n\t\t} else {\n\t\t\toptions = {\n\t\t\t\tpreserveFocus: false\n\t\t\t};\n\t\t}\n\n\t\tconst editorId = await this._proxy.$tryShowTextDocument(document.uri, options);\n\t\tconst editor = editorId && this._extHostDocumentsAndEditors.getEditor(editorId);\n\t\tif (editor) {\n\t\t\treturn editor.value;\n\t\t}\n\t\t// we have no editor... having an id means that we had an editor\n\t\t// on the main side and that it isn't the current editor anymore...\n\t\tif (editorId) {\n\t\t\tthrow new Error(`Could NOT open editor for \"${document.uri.toString()}\" because another editor opened in the meantime.`);\n\t\t} else {\n\t\t\tthrow new Error(`Could NOT open editor for \"${document.uri.toString()}\".`);\n\t\t}\n\t}\n\n\tcreateTextEditorDecorationType(extension: IExtensionDescription, options: vscode.DecorationRenderOptions): vscode.TextEditorDecorationType {\n\t\treturn new TextEditorDecorationType(this._proxy, extension, options).value;\n\t}\n\n\t// --- called from main thread\n\n\t$acceptEditorPropertiesChanged(id: string, data: IEditorPropertiesChangeData): void {\n\t\tconst textEditor = this._extHostDocumentsAndEditors.getEditor(id);\n\t\tif (!textEditor) {\n\t\t\tthrow new Error('unknown text editor');\n\t\t}\n\n\t\t// (1) set all properties\n\t\tif (data.options) {\n\t\t\ttextEditor._acceptOptions(data.options);\n\t\t}\n\t\tif (data.selections) {\n\t\t\tconst selections = data.selections.selections.map(TypeConverters.Selection.to);\n\t\t\ttextEditor._acceptSelections(selections);\n\t\t}\n\t\tif (data.visibleRanges) {\n\t\t\tconst visibleRanges = arrays.coalesce(data.visibleRanges.map(TypeConverters.Range.to));\n\t\t\ttextEditor._acceptVisibleRanges(visibleRanges);\n\t\t}\n\n\t\t// (2) fire change events\n\t\tif (data.options) {\n\t\t\tthis._onDidChangeTextEditorOptions.fire({\n\t\t\t\ttextEditor: textEditor.value,\n\t\t\t\toptions: { ...data.options, lineNumbers: TypeConverters.TextEditorLineNumbersStyle.to(data.options.lineNumbers) }\n\t\t\t});\n\t\t}\n\t\tif (data.selections) {\n\t\t\tconst kind = TextEditorSelectionChangeKind.fromValue(data.selections.source);\n\t\t\tconst selections = data.selections.selections.map(TypeConverters.Selection.to);\n\t\t\tthis._onDidChangeTextEditorSelection.fire({\n\t\t\t\ttextEditor: textEditor.value,\n\t\t\t\tselections,\n\t\t\t\tkind\n\t\t\t});\n\t\t}\n\t\tif (data.visibleRanges) {\n\t\t\tconst visibleRanges = arrays.coalesce(data.visibleRanges.map(TypeConverters.Range.to));\n\t\t\tthis._onDidChangeTextEditorVisibleRanges.fire({\n\t\t\t\ttextEditor: textEditor.value,\n\t\t\t\tvisibleRanges\n\t\t\t});\n\t\t}\n\t}\n\n\t$acceptEditorPositionData(data: ITextEditorPositionData): void {\n\t\tfor (const id in data) {\n\t\t\tconst textEditor = this._extHostDocumentsAndEditors.getEditor(id);\n\t\t\tif (!textEditor) {\n\t\t\t\tthrow new Error('Unknown text editor');\n\t\t\t}\n\t\t\tconst viewColumn = TypeConverters.ViewColumn.to(data[id]);\n\t\t\tif (textEditor.value.viewColumn !== viewColumn) {\n\t\t\t\ttextEditor._acceptViewColumn(viewColumn);\n\t\t\t\tthis._onDidChangeTextEditorViewColumn.fire({ textEditor: textEditor.value, viewColumn });\n\t\t\t}\n\t\t}\n\t}\n\n\tgetDiffInformation(id: string): Promise<vscode.LineChange[]> {\n\t\treturn Promise.resolve(this._proxy.$getDiffInformation(id));\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
