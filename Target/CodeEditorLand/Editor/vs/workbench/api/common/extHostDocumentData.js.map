{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/api/common/extHostDocumentData.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport type * as vscode from \"vscode\";\nimport { equals } from \"../../../base/common/arrays.js\";\nimport { ok } from \"../../../base/common/assert.js\";\nimport { Schemas } from \"../../../base/common/network.js\";\nimport { regExpLeadsToEndlessLoop } from \"../../../base/common/strings.js\";\nimport type { URI } from \"../../../base/common/uri.js\";\nimport {\n\tensureValidWordDefinition,\n\tgetWordAtText,\n} from \"../../../editor/common/core/wordHelper.js\";\nimport { MirrorTextModel } from \"../../../editor/common/model/mirrorTextModel.js\";\nimport type { MainThreadDocumentsShape } from \"./extHost.protocol.js\";\nimport { EndOfLine, Position, Range } from \"./extHostTypes.js\";\n\nconst _languageId2WordDefinition = new Map<string, RegExp>();\nexport function setWordDefinitionFor(\n\tlanguageId: string,\n\twordDefinition: RegExp | undefined,\n): void {\n\tif (wordDefinition) {\n\t\t_languageId2WordDefinition.set(languageId, wordDefinition);\n\t} else {\n\t\t_languageId2WordDefinition.delete(languageId);\n\t}\n}\n\nfunction getWordDefinitionFor(languageId: string): RegExp | undefined {\n\treturn _languageId2WordDefinition.get(languageId);\n}\n\nexport class ExtHostDocumentData extends MirrorTextModel {\n\tprivate _document?: vscode.TextDocument;\n\tprivate _isDisposed = false;\n\n\tconstructor(\n\t\tprivate readonly _proxy: MainThreadDocumentsShape,\n\t\turi: URI,\n\t\tlines: string[],\n\t\teol: string,\n\t\tversionId: number,\n\t\tprivate _languageId: string,\n\t\tprivate _isDirty: boolean,\n\t) {\n\t\tsuper(uri, lines, eol, versionId);\n\t}\n\n\t// eslint-disable-next-line local/code-must-use-super-dispose\n\toverride dispose(): void {\n\t\t// we don't really dispose documents but let\n\t\t// extensions still read from them. some\n\t\t// operations, live saving, will now error tho\n\t\tok(!this._isDisposed);\n\t\tthis._isDisposed = true;\n\t\tthis._isDirty = false;\n\t}\n\n\tequalLines(lines: readonly string[]): boolean {\n\t\treturn equals(this._lines, lines);\n\t}\n\n\tget document(): vscode.TextDocument {\n\t\tif (!this._document) {\n\t\t\tconst that = this;\n\t\t\tthis._document = {\n\t\t\t\tget uri() {\n\t\t\t\t\treturn that._uri;\n\t\t\t\t},\n\t\t\t\tget fileName() {\n\t\t\t\t\treturn that._uri.fsPath;\n\t\t\t\t},\n\t\t\t\tget isUntitled() {\n\t\t\t\t\treturn that._uri.scheme === Schemas.untitled;\n\t\t\t\t},\n\t\t\t\tget languageId() {\n\t\t\t\t\treturn that._languageId;\n\t\t\t\t},\n\t\t\t\tget version() {\n\t\t\t\t\treturn that._versionId;\n\t\t\t\t},\n\t\t\t\tget isClosed() {\n\t\t\t\t\treturn that._isDisposed;\n\t\t\t\t},\n\t\t\t\tget isDirty() {\n\t\t\t\t\treturn that._isDirty;\n\t\t\t\t},\n\t\t\t\tsave() {\n\t\t\t\t\treturn that._save();\n\t\t\t\t},\n\t\t\t\tgetText(range?) {\n\t\t\t\t\treturn range ? that._getTextInRange(range) : that.getText();\n\t\t\t\t},\n\t\t\t\tget eol() {\n\t\t\t\t\treturn that._eol === \"\\n\" ? EndOfLine.LF : EndOfLine.CRLF;\n\t\t\t\t},\n\t\t\t\tget lineCount() {\n\t\t\t\t\treturn that._lines.length;\n\t\t\t\t},\n\t\t\t\tlineAt(lineOrPos: number | vscode.Position) {\n\t\t\t\t\treturn that._lineAt(lineOrPos);\n\t\t\t\t},\n\t\t\t\toffsetAt(pos) {\n\t\t\t\t\treturn that._offsetAt(pos);\n\t\t\t\t},\n\t\t\t\tpositionAt(offset) {\n\t\t\t\t\treturn that._positionAt(offset);\n\t\t\t\t},\n\t\t\t\tvalidateRange(ran) {\n\t\t\t\t\treturn that._validateRange(ran);\n\t\t\t\t},\n\t\t\t\tvalidatePosition(pos) {\n\t\t\t\t\treturn that._validatePosition(pos);\n\t\t\t\t},\n\t\t\t\tgetWordRangeAtPosition(pos, regexp?) {\n\t\t\t\t\treturn that._getWordRangeAtPosition(pos, regexp);\n\t\t\t\t},\n\t\t\t\t[Symbol.for(\"debug.description\")]() {\n\t\t\t\t\treturn `TextDocument(${that._uri.toString()})`;\n\t\t\t\t},\n\t\t\t};\n\t\t}\n\t\treturn Object.freeze(this._document);\n\t}\n\n\t_acceptLanguageId(newLanguageId: string): void {\n\t\tok(!this._isDisposed);\n\t\tthis._languageId = newLanguageId;\n\t}\n\n\t_acceptIsDirty(isDirty: boolean): void {\n\t\tok(!this._isDisposed);\n\t\tthis._isDirty = isDirty;\n\t}\n\n\tprivate _save(): Promise<boolean> {\n\t\tif (this._isDisposed) {\n\t\t\treturn Promise.reject(new Error(\"Document has been closed\"));\n\t\t}\n\t\treturn this._proxy.$trySaveDocument(this._uri);\n\t}\n\n\tprivate _getTextInRange(_range: vscode.Range): string {\n\t\tconst range = this._validateRange(_range);\n\n\t\tif (range.isEmpty) {\n\t\t\treturn \"\";\n\t\t}\n\n\t\tif (range.isSingleLine) {\n\t\t\treturn this._lines[range.start.line].substring(\n\t\t\t\trange.start.character,\n\t\t\t\trange.end.character,\n\t\t\t);\n\t\t}\n\n\t\tconst lineEnding = this._eol,\n\t\t\tstartLineIndex = range.start.line,\n\t\t\tendLineIndex = range.end.line,\n\t\t\tresultLines: string[] = [];\n\n\t\tresultLines.push(\n\t\t\tthis._lines[startLineIndex].substring(range.start.character),\n\t\t);\n\t\tfor (let i = startLineIndex + 1; i < endLineIndex; i++) {\n\t\t\tresultLines.push(this._lines[i]);\n\t\t}\n\t\tresultLines.push(\n\t\t\tthis._lines[endLineIndex].substring(0, range.end.character),\n\t\t);\n\n\t\treturn resultLines.join(lineEnding);\n\t}\n\n\tprivate _lineAt(lineOrPosition: number | vscode.Position): vscode.TextLine {\n\t\tlet line: number | undefined;\n\t\tif (lineOrPosition instanceof Position) {\n\t\t\tline = lineOrPosition.line;\n\t\t} else if (typeof lineOrPosition === \"number\") {\n\t\t\tline = lineOrPosition;\n\t\t}\n\n\t\tif (\n\t\t\ttypeof line !== \"number\" ||\n\t\t\tline < 0 ||\n\t\t\tline >= this._lines.length ||\n\t\t\tMath.floor(line) !== line\n\t\t) {\n\t\t\tthrow new Error(\"Illegal value for `line`\");\n\t\t}\n\n\t\treturn new ExtHostDocumentLine(\n\t\t\tline,\n\t\t\tthis._lines[line],\n\t\t\tline === this._lines.length - 1,\n\t\t);\n\t}\n\n\tprivate _offsetAt(position: vscode.Position): number {\n\t\tposition = this._validatePosition(position);\n\t\tthis._ensureLineStarts();\n\t\treturn (\n\t\t\tthis._lineStarts!.getPrefixSum(position.line - 1) +\n\t\t\tposition.character\n\t\t);\n\t}\n\n\tprivate _positionAt(offset: number): vscode.Position {\n\t\toffset = Math.floor(offset);\n\t\toffset = Math.max(0, offset);\n\n\t\tthis._ensureLineStarts();\n\t\tconst out = this._lineStarts!.getIndexOf(offset);\n\n\t\tconst lineLength = this._lines[out.index].length;\n\n\t\t// Ensure we return a valid position\n\t\treturn new Position(out.index, Math.min(out.remainder, lineLength));\n\t}\n\n\t// ---- range math\n\n\tprivate _validateRange(range: vscode.Range): vscode.Range {\n\t\tif (!(range instanceof Range)) {\n\t\t\tthrow new Error(\"Invalid argument\");\n\t\t}\n\n\t\tconst start = this._validatePosition(range.start);\n\t\tconst end = this._validatePosition(range.end);\n\n\t\tif (start === range.start && end === range.end) {\n\t\t\treturn range;\n\t\t}\n\t\treturn new Range(start.line, start.character, end.line, end.character);\n\t}\n\n\tprivate _validatePosition(position: vscode.Position): vscode.Position {\n\t\tif (!(position instanceof Position)) {\n\t\t\tthrow new Error(\"Invalid argument\");\n\t\t}\n\n\t\tif (this._lines.length === 0) {\n\t\t\treturn position.with(0, 0);\n\t\t}\n\n\t\tlet { line, character } = position;\n\t\tlet hasChanged = false;\n\n\t\tif (line < 0) {\n\t\t\tline = 0;\n\t\t\tcharacter = 0;\n\t\t\thasChanged = true;\n\t\t} else if (line >= this._lines.length) {\n\t\t\tline = this._lines.length - 1;\n\t\t\tcharacter = this._lines[line].length;\n\t\t\thasChanged = true;\n\t\t} else {\n\t\t\tconst maxCharacter = this._lines[line].length;\n\t\t\tif (character < 0) {\n\t\t\t\tcharacter = 0;\n\t\t\t\thasChanged = true;\n\t\t\t} else if (character > maxCharacter) {\n\t\t\t\tcharacter = maxCharacter;\n\t\t\t\thasChanged = true;\n\t\t\t}\n\t\t}\n\n\t\tif (!hasChanged) {\n\t\t\treturn position;\n\t\t}\n\t\treturn new Position(line, character);\n\t}\n\n\tprivate _getWordRangeAtPosition(\n\t\t_position: vscode.Position,\n\t\tregexp?: RegExp,\n\t): vscode.Range | undefined {\n\t\tconst position = this._validatePosition(_position);\n\n\t\tif (!regexp) {\n\t\t\t// use default when custom-regexp isn't provided\n\t\t\tregexp = getWordDefinitionFor(this._languageId);\n\t\t} else if (regExpLeadsToEndlessLoop(regexp)) {\n\t\t\t// use default when custom-regexp is bad\n\t\t\tthrow new Error(\n\t\t\t\t`[getWordRangeAtPosition]: ignoring custom regexp '${regexp.source}' because it matches the empty string.`,\n\t\t\t);\n\t\t}\n\n\t\tconst wordAtText = getWordAtText(\n\t\t\tposition.character + 1,\n\t\t\tensureValidWordDefinition(regexp),\n\t\t\tthis._lines[position.line],\n\t\t\t0,\n\t\t);\n\n\t\tif (wordAtText) {\n\t\t\treturn new Range(\n\t\t\t\tposition.line,\n\t\t\t\twordAtText.startColumn - 1,\n\t\t\t\tposition.line,\n\t\t\t\twordAtText.endColumn - 1,\n\t\t\t);\n\t\t}\n\t\treturn undefined;\n\t}\n}\n\nexport class ExtHostDocumentLine implements vscode.TextLine {\n\tprivate readonly _line: number;\n\tprivate readonly _text: string;\n\tprivate readonly _isLastLine: boolean;\n\n\tconstructor(line: number, text: string, isLastLine: boolean) {\n\t\tthis._line = line;\n\t\tthis._text = text;\n\t\tthis._isLastLine = isLastLine;\n\t}\n\n\tpublic get lineNumber(): number {\n\t\treturn this._line;\n\t}\n\n\tpublic get text(): string {\n\t\treturn this._text;\n\t}\n\n\tpublic get range(): Range {\n\t\treturn new Range(this._line, 0, this._line, this._text.length);\n\t}\n\n\tpublic get rangeIncludingLineBreak(): Range {\n\t\tif (this._isLastLine) {\n\t\t\treturn this.range;\n\t\t}\n\t\treturn new Range(this._line, 0, this._line + 1, 0);\n\t}\n\n\tpublic get firstNonWhitespaceCharacterIndex(): number {\n\t\t//TODO@api, rename to 'leadingWhitespaceLength'\n\t\treturn /^(\\s*)/.exec(this._text)![1].length;\n\t}\n\n\tpublic get isEmptyOrWhitespace(): boolean {\n\t\treturn this.firstNonWhitespaceCharacterIndex === this._text.length;\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
