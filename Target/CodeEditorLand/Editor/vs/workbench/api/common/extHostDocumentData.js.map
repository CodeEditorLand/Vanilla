{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/api/common/extHostDocumentData.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { ok } from '../../../base/common/assert.js';\nimport { Schemas } from '../../../base/common/network.js';\nimport { regExpLeadsToEndlessLoop } from '../../../base/common/strings.js';\nimport { URI } from '../../../base/common/uri.js';\nimport { MirrorTextModel } from '../../../editor/common/model/mirrorTextModel.js';\nimport { ensureValidWordDefinition, getWordAtText } from '../../../editor/common/core/wordHelper.js';\nimport { MainThreadDocumentsShape } from './extHost.protocol.js';\nimport { EndOfLine, Position, Range } from './extHostTypes.js';\nimport type * as vscode from 'vscode';\nimport { equals } from '../../../base/common/arrays.js';\n\nconst _languageId2WordDefinition = new Map<string, RegExp>();\nexport function setWordDefinitionFor(languageId: string, wordDefinition: RegExp | undefined): void {\n\tif (!wordDefinition) {\n\t\t_languageId2WordDefinition.delete(languageId);\n\t} else {\n\t\t_languageId2WordDefinition.set(languageId, wordDefinition);\n\t}\n}\n\nfunction getWordDefinitionFor(languageId: string): RegExp | undefined {\n\treturn _languageId2WordDefinition.get(languageId);\n}\n\nexport class ExtHostDocumentData extends MirrorTextModel {\n\n\tprivate _document?: vscode.TextDocument;\n\tprivate _isDisposed: boolean = false;\n\n\tconstructor(\n\t\tprivate readonly _proxy: MainThreadDocumentsShape,\n\t\turi: URI, lines: string[], eol: string, versionId: number,\n\t\tprivate _languageId: string,\n\t\tprivate _isDirty: boolean,\n\t) {\n\t\tsuper(uri, lines, eol, versionId);\n\t}\n\n\t// eslint-disable-next-line local/code-must-use-super-dispose\n\toverride dispose(): void {\n\t\t// we don't really dispose documents but let\n\t\t// extensions still read from them. some\n\t\t// operations, live saving, will now error tho\n\t\tok(!this._isDisposed);\n\t\tthis._isDisposed = true;\n\t\tthis._isDirty = false;\n\t}\n\n\tequalLines(lines: readonly string[]): boolean {\n\t\treturn equals(this._lines, lines);\n\t}\n\n\tget document(): vscode.TextDocument {\n\t\tif (!this._document) {\n\t\t\tconst that = this;\n\t\t\tthis._document = {\n\t\t\t\tget uri() { return that._uri; },\n\t\t\t\tget fileName() { return that._uri.fsPath; },\n\t\t\t\tget isUntitled() { return that._uri.scheme === Schemas.untitled; },\n\t\t\t\tget languageId() { return that._languageId; },\n\t\t\t\tget version() { return that._versionId; },\n\t\t\t\tget isClosed() { return that._isDisposed; },\n\t\t\t\tget isDirty() { return that._isDirty; },\n\t\t\t\tsave() { return that._save(); },\n\t\t\t\tgetText(range?) { return range ? that._getTextInRange(range) : that.getText(); },\n\t\t\t\tget eol() { return that._eol === '\\n' ? EndOfLine.LF : EndOfLine.CRLF; },\n\t\t\t\tget lineCount() { return that._lines.length; },\n\t\t\t\tlineAt(lineOrPos: number | vscode.Position) { return that._lineAt(lineOrPos); },\n\t\t\t\toffsetAt(pos) { return that._offsetAt(pos); },\n\t\t\t\tpositionAt(offset) { return that._positionAt(offset); },\n\t\t\t\tvalidateRange(ran) { return that._validateRange(ran); },\n\t\t\t\tvalidatePosition(pos) { return that._validatePosition(pos); },\n\t\t\t\tgetWordRangeAtPosition(pos, regexp?) { return that._getWordRangeAtPosition(pos, regexp); },\n\t\t\t\t[Symbol.for('debug.description')]() {\n\t\t\t\t\treturn `TextDocument(${that._uri.toString()})`;\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\t\treturn Object.freeze(this._document);\n\t}\n\n\t_acceptLanguageId(newLanguageId: string): void {\n\t\tok(!this._isDisposed);\n\t\tthis._languageId = newLanguageId;\n\t}\n\n\t_acceptIsDirty(isDirty: boolean): void {\n\t\tok(!this._isDisposed);\n\t\tthis._isDirty = isDirty;\n\t}\n\n\tprivate _save(): Promise<boolean> {\n\t\tif (this._isDisposed) {\n\t\t\treturn Promise.reject(new Error('Document has been closed'));\n\t\t}\n\t\treturn this._proxy.$trySaveDocument(this._uri);\n\t}\n\n\tprivate _getTextInRange(_range: vscode.Range): string {\n\t\tconst range = this._validateRange(_range);\n\n\t\tif (range.isEmpty) {\n\t\t\treturn '';\n\t\t}\n\n\t\tif (range.isSingleLine) {\n\t\t\treturn this._lines[range.start.line].substring(range.start.character, range.end.character);\n\t\t}\n\n\t\tconst lineEnding = this._eol,\n\t\t\tstartLineIndex = range.start.line,\n\t\t\tendLineIndex = range.end.line,\n\t\t\tresultLines: string[] = [];\n\n\t\tresultLines.push(this._lines[startLineIndex].substring(range.start.character));\n\t\tfor (let i = startLineIndex + 1; i < endLineIndex; i++) {\n\t\t\tresultLines.push(this._lines[i]);\n\t\t}\n\t\tresultLines.push(this._lines[endLineIndex].substring(0, range.end.character));\n\n\t\treturn resultLines.join(lineEnding);\n\t}\n\n\tprivate _lineAt(lineOrPosition: number | vscode.Position): vscode.TextLine {\n\n\t\tlet line: number | undefined;\n\t\tif (lineOrPosition instanceof Position) {\n\t\t\tline = lineOrPosition.line;\n\t\t} else if (typeof lineOrPosition === 'number') {\n\t\t\tline = lineOrPosition;\n\t\t}\n\n\t\tif (typeof line !== 'number' || line < 0 || line >= this._lines.length || Math.floor(line) !== line) {\n\t\t\tthrow new Error('Illegal value for `line`');\n\t\t}\n\n\t\treturn new ExtHostDocumentLine(line, this._lines[line], line === this._lines.length - 1);\n\t}\n\n\tprivate _offsetAt(position: vscode.Position): number {\n\t\tposition = this._validatePosition(position);\n\t\tthis._ensureLineStarts();\n\t\treturn this._lineStarts!.getPrefixSum(position.line - 1) + position.character;\n\t}\n\n\tprivate _positionAt(offset: number): vscode.Position {\n\t\toffset = Math.floor(offset);\n\t\toffset = Math.max(0, offset);\n\n\t\tthis._ensureLineStarts();\n\t\tconst out = this._lineStarts!.getIndexOf(offset);\n\n\t\tconst lineLength = this._lines[out.index].length;\n\n\t\t// Ensure we return a valid position\n\t\treturn new Position(out.index, Math.min(out.remainder, lineLength));\n\t}\n\n\t// ---- range math\n\n\tprivate _validateRange(range: vscode.Range): vscode.Range {\n\t\tif (!(range instanceof Range)) {\n\t\t\tthrow new Error('Invalid argument');\n\t\t}\n\n\t\tconst start = this._validatePosition(range.start);\n\t\tconst end = this._validatePosition(range.end);\n\n\t\tif (start === range.start && end === range.end) {\n\t\t\treturn range;\n\t\t}\n\t\treturn new Range(start.line, start.character, end.line, end.character);\n\t}\n\n\tprivate _validatePosition(position: vscode.Position): vscode.Position {\n\t\tif (!(position instanceof Position)) {\n\t\t\tthrow new Error('Invalid argument');\n\t\t}\n\n\t\tif (this._lines.length === 0) {\n\t\t\treturn position.with(0, 0);\n\t\t}\n\n\t\tlet { line, character } = position;\n\t\tlet hasChanged = false;\n\n\t\tif (line < 0) {\n\t\t\tline = 0;\n\t\t\tcharacter = 0;\n\t\t\thasChanged = true;\n\t\t}\n\t\telse if (line >= this._lines.length) {\n\t\t\tline = this._lines.length - 1;\n\t\t\tcharacter = this._lines[line].length;\n\t\t\thasChanged = true;\n\t\t}\n\t\telse {\n\t\t\tconst maxCharacter = this._lines[line].length;\n\t\t\tif (character < 0) {\n\t\t\t\tcharacter = 0;\n\t\t\t\thasChanged = true;\n\t\t\t}\n\t\t\telse if (character > maxCharacter) {\n\t\t\t\tcharacter = maxCharacter;\n\t\t\t\thasChanged = true;\n\t\t\t}\n\t\t}\n\n\t\tif (!hasChanged) {\n\t\t\treturn position;\n\t\t}\n\t\treturn new Position(line, character);\n\t}\n\n\tprivate _getWordRangeAtPosition(_position: vscode.Position, regexp?: RegExp): vscode.Range | undefined {\n\t\tconst position = this._validatePosition(_position);\n\n\t\tif (!regexp) {\n\t\t\t// use default when custom-regexp isn't provided\n\t\t\tregexp = getWordDefinitionFor(this._languageId);\n\n\t\t} else if (regExpLeadsToEndlessLoop(regexp)) {\n\t\t\t// use default when custom-regexp is bad\n\t\t\tthrow new Error(`[getWordRangeAtPosition]: ignoring custom regexp '${regexp.source}' because it matches the empty string.`);\n\t\t}\n\n\t\tconst wordAtText = getWordAtText(\n\t\t\tposition.character + 1,\n\t\t\tensureValidWordDefinition(regexp),\n\t\t\tthis._lines[position.line],\n\t\t\t0\n\t\t);\n\n\t\tif (wordAtText) {\n\t\t\treturn new Range(position.line, wordAtText.startColumn - 1, position.line, wordAtText.endColumn - 1);\n\t\t}\n\t\treturn undefined;\n\t}\n}\n\nexport class ExtHostDocumentLine implements vscode.TextLine {\n\n\tprivate readonly _line: number;\n\tprivate readonly _text: string;\n\tprivate readonly _isLastLine: boolean;\n\n\tconstructor(line: number, text: string, isLastLine: boolean) {\n\t\tthis._line = line;\n\t\tthis._text = text;\n\t\tthis._isLastLine = isLastLine;\n\t}\n\n\tpublic get lineNumber(): number {\n\t\treturn this._line;\n\t}\n\n\tpublic get text(): string {\n\t\treturn this._text;\n\t}\n\n\tpublic get range(): Range {\n\t\treturn new Range(this._line, 0, this._line, this._text.length);\n\t}\n\n\tpublic get rangeIncludingLineBreak(): Range {\n\t\tif (this._isLastLine) {\n\t\t\treturn this.range;\n\t\t}\n\t\treturn new Range(this._line, 0, this._line + 1, 0);\n\t}\n\n\tpublic get firstNonWhitespaceCharacterIndex(): number {\n\t\t//TODO@api, rename to 'leadingWhitespaceLength'\n\t\treturn /^(\\s*)/.exec(this._text)![1].length;\n\t}\n\n\tpublic get isEmptyOrWhitespace(): boolean {\n\t\treturn this.firstNonWhitespaceCharacterIndex === this._text.length;\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
