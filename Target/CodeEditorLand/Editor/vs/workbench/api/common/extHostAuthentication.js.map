{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/api/common/extHostAuthentication.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport type * as vscode from \"vscode\";\nimport { Emitter, type Event } from \"../../../base/common/event.js\";\nimport {\n\tExtensionIdentifier,\n\ttype IExtensionDescription,\n} from \"../../../platform/extensions/common/extensions.js\";\nimport { createDecorator } from \"../../../platform/instantiation/common/instantiation.js\";\nimport { INTERNAL_AUTH_PROVIDER_PREFIX } from \"../../services/authentication/common/authentication.js\";\nimport {\n\ttype ExtHostAuthenticationShape,\n\tMainContext,\n\ttype MainThreadAuthenticationShape,\n} from \"./extHost.protocol.js\";\nimport { IExtHostRpcService } from \"./extHostRpcService.js\";\nimport { Disposable } from \"./extHostTypes.js\";\n\nexport interface IExtHostAuthentication extends ExtHostAuthentication {}\nexport const IExtHostAuthentication = createDecorator<IExtHostAuthentication>(\n\t\"IExtHostAuthentication\",\n);\n\ninterface ProviderWithMetadata {\n\tlabel: string;\n\tprovider: vscode.AuthenticationProvider;\n\toptions: vscode.AuthenticationProviderOptions;\n}\n\nexport class ExtHostAuthentication implements ExtHostAuthenticationShape {\n\tdeclare _serviceBrand: undefined;\n\n\tprivate _proxy: MainThreadAuthenticationShape;\n\tprivate _authenticationProviders: Map<string, ProviderWithMetadata> =\n\t\tnew Map<string, ProviderWithMetadata>();\n\n\tprivate _onDidChangeSessions =\n\t\tnew Emitter<vscode.AuthenticationSessionsChangeEvent>();\n\treadonly onDidChangeSessions: Event<vscode.AuthenticationSessionsChangeEvent> =\n\t\tthis._onDidChangeSessions.event;\n\n\tprivate _getSessionTaskSingler = new TaskSingler<\n\t\tvscode.AuthenticationSession | undefined\n\t>();\n\n\tconstructor(@IExtHostRpcService extHostRpc: IExtHostRpcService) {\n\t\tthis._proxy = extHostRpc.getProxy(MainContext.MainThreadAuthentication);\n\t}\n\n\tasync getSession(\n\t\trequestingExtension: IExtensionDescription,\n\t\tproviderId: string,\n\t\tscopes: readonly string[],\n\t\toptions: vscode.AuthenticationGetSessionOptions &\n\t\t\t(\n\t\t\t\t| { createIfNone: true }\n\t\t\t\t| { forceNewSession: true }\n\t\t\t\t| {\n\t\t\t\t\t\tforceNewSession: vscode.AuthenticationForceNewSessionOptions;\n\t\t\t\t  }\n\t\t\t),\n\t): Promise<vscode.AuthenticationSession>;\n\tasync getSession(\n\t\trequestingExtension: IExtensionDescription,\n\t\tproviderId: string,\n\t\tscopes: readonly string[],\n\t\toptions: vscode.AuthenticationGetSessionOptions & {\n\t\t\tforceNewSession: true;\n\t\t},\n\t): Promise<vscode.AuthenticationSession>;\n\tasync getSession(\n\t\trequestingExtension: IExtensionDescription,\n\t\tproviderId: string,\n\t\tscopes: readonly string[],\n\t\toptions: vscode.AuthenticationGetSessionOptions & {\n\t\t\tforceNewSession: vscode.AuthenticationForceNewSessionOptions;\n\t\t},\n\t): Promise<vscode.AuthenticationSession>;\n\tasync getSession(\n\t\trequestingExtension: IExtensionDescription,\n\t\tproviderId: string,\n\t\tscopes: readonly string[],\n\t\toptions: vscode.AuthenticationGetSessionOptions,\n\t): Promise<vscode.AuthenticationSession | undefined>;\n\tasync getSession(\n\t\trequestingExtension: IExtensionDescription,\n\t\tproviderId: string,\n\t\tscopes: readonly string[],\n\t\toptions: vscode.AuthenticationGetSessionOptions = {},\n\t): Promise<vscode.AuthenticationSession | undefined> {\n\t\tconst extensionId = ExtensionIdentifier.toKey(\n\t\t\trequestingExtension.identifier,\n\t\t);\n\t\tconst sortedScopes = [...scopes].sort().join(\" \");\n\t\treturn await this._getSessionTaskSingler.getOrCreate(\n\t\t\t`${extensionId} ${providerId} ${sortedScopes}`,\n\t\t\tasync () => {\n\t\t\t\tawait this._proxy.$ensureProvider(providerId);\n\t\t\t\tconst extensionName =\n\t\t\t\t\trequestingExtension.displayName || requestingExtension.name;\n\t\t\t\treturn this._proxy.$getSession(\n\t\t\t\t\tproviderId,\n\t\t\t\t\tscopes,\n\t\t\t\t\textensionId,\n\t\t\t\t\textensionName,\n\t\t\t\t\toptions,\n\t\t\t\t);\n\t\t\t},\n\t\t);\n\t}\n\n\tasync getAccounts(providerId: string) {\n\t\tawait this._proxy.$ensureProvider(providerId);\n\t\treturn await this._proxy.$getAccounts(providerId);\n\t}\n\n\tasync removeSession(providerId: string, sessionId: string): Promise<void> {\n\t\tconst providerData = this._authenticationProviders.get(providerId);\n\t\tif (!providerData) {\n\t\t\treturn this._proxy.$removeSession(providerId, sessionId);\n\t\t}\n\n\t\treturn providerData.provider.removeSession(sessionId);\n\t}\n\n\tregisterAuthenticationProvider(\n\t\tid: string,\n\t\tlabel: string,\n\t\tprovider: vscode.AuthenticationProvider,\n\t\toptions?: vscode.AuthenticationProviderOptions,\n\t): vscode.Disposable {\n\t\tif (this._authenticationProviders.get(id)) {\n\t\t\tthrow new Error(\n\t\t\t\t`An authentication provider with id '${id}' is already registered.`,\n\t\t\t);\n\t\t}\n\n\t\tthis._authenticationProviders.set(id, {\n\t\t\tlabel,\n\t\t\tprovider,\n\t\t\toptions: options ?? { supportsMultipleAccounts: false },\n\t\t});\n\t\tconst listener = provider.onDidChangeSessions((e) =>\n\t\t\tthis._proxy.$sendDidChangeSessions(id, e),\n\t\t);\n\t\tthis._proxy.$registerAuthenticationProvider(\n\t\t\tid,\n\t\t\tlabel,\n\t\t\toptions?.supportsMultipleAccounts ?? false,\n\t\t);\n\n\t\treturn new Disposable(() => {\n\t\t\tlistener.dispose();\n\t\t\tthis._authenticationProviders.delete(id);\n\t\t\tthis._proxy.$unregisterAuthenticationProvider(id);\n\t\t});\n\t}\n\n\tasync $createSession(\n\t\tproviderId: string,\n\t\tscopes: string[],\n\t\toptions: vscode.AuthenticationProviderSessionOptions,\n\t): Promise<vscode.AuthenticationSession> {\n\t\tconst providerData = this._authenticationProviders.get(providerId);\n\t\tif (providerData) {\n\t\t\treturn await providerData.provider.createSession(scopes, options);\n\t\t}\n\n\t\tthrow new Error(\n\t\t\t`Unable to find authentication provider with handle: ${providerId}`,\n\t\t);\n\t}\n\n\tasync $removeSession(providerId: string, sessionId: string): Promise<void> {\n\t\tconst providerData = this._authenticationProviders.get(providerId);\n\t\tif (providerData) {\n\t\t\treturn await providerData.provider.removeSession(sessionId);\n\t\t}\n\n\t\tthrow new Error(\n\t\t\t`Unable to find authentication provider with handle: ${providerId}`,\n\t\t);\n\t}\n\n\tasync $getSessions(\n\t\tproviderId: string,\n\t\tscopes: ReadonlyArray<string> | undefined,\n\t\toptions: vscode.AuthenticationProviderSessionOptions,\n\t): Promise<ReadonlyArray<vscode.AuthenticationSession>> {\n\t\tconst providerData = this._authenticationProviders.get(providerId);\n\t\tif (providerData) {\n\t\t\treturn await providerData.provider.getSessions(scopes, options);\n\t\t}\n\n\t\tthrow new Error(\n\t\t\t`Unable to find authentication provider with handle: ${providerId}`,\n\t\t);\n\t}\n\n\t$onDidChangeAuthenticationSessions(id: string, label: string) {\n\t\t// Don't fire events for the internal auth providers\n\t\tif (!id.startsWith(INTERNAL_AUTH_PROVIDER_PREFIX)) {\n\t\t\tthis._onDidChangeSessions.fire({ provider: { id, label } });\n\t\t}\n\t\treturn Promise.resolve();\n\t}\n}\n\nclass TaskSingler<T> {\n\tprivate _inFlightPromises = new Map<string, Promise<T>>();\n\tgetOrCreate(key: string, promiseFactory: () => Promise<T>) {\n\t\tconst inFlight = this._inFlightPromises.get(key);\n\t\tif (inFlight) {\n\t\t\treturn inFlight;\n\t\t}\n\n\t\tconst promise = promiseFactory().finally(() =>\n\t\t\tthis._inFlightPromises.delete(key),\n\t\t);\n\t\tthis._inFlightPromises.set(key, promise);\n\n\t\treturn promise;\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
