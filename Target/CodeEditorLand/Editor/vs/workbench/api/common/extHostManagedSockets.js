var m=Object.defineProperty;var p=Object.getOwnPropertyDescriptor;var d=(r,t,e,a)=>{for(var o=a>1?void 0:a?p(t,e):t,s=r.length-1,c;s>=0;s--)(c=r[s])&&(o=(a?c(t,e,o):c(o))||o);return a&&o&&m(t,e,o),o},i=(r,t)=>(e,a)=>t(e,a,r);import{VSBuffer as g}from"../../../base/common/buffer.js";import{Disposable as k,DisposableStore as y,toDisposable as S}from"../../../base/common/lifecycle.js";import{createDecorator as l}from"../../../platform/instantiation/common/instantiation.js";import{MainContext as u}from"./extHost.protocol.js";import{IExtHostRpcService as h}from"./extHostRpcService.js";const R=l("IExtHostManagedSockets");let n=class{_proxy;_remoteSocketIdCounter=0;_factory=null;_managedRemoteSockets=new Map;constructor(t){this._proxy=t.getProxy(u.MainThreadManagedSockets)}setFactory(t,e){for(const a of this._managedRemoteSockets.values())a.dispose();this._factory&&this._proxy.$unregisterSocketFactory(this._factory.socketFactoryId),this._factory=new f(t,e),this._proxy.$registerSocketFactory(this._factory.socketFactoryId)}async $openRemoteSocket(t){if(!this._factory||this._factory.socketFactoryId!==t)throw new Error(`No socket factory with id ${t}`);const e=++this._remoteSocketIdCounter,a=await this._factory.makeConnection(),o=new y;return this._managedRemoteSockets.set(e,new M(e,a,o)),o.add(S(()=>this._managedRemoteSockets.delete(e))),o.add(a.onDidEnd(()=>{this._proxy.$onDidManagedSocketEnd(e),o.dispose()})),o.add(a.onDidClose(s=>{this._proxy.$onDidManagedSocketClose(e,s?.stack??s?.message),o.dispose()})),o.add(a.onDidReceiveMessage(s=>this._proxy.$onDidManagedSocketHaveData(e,g.wrap(s)))),e}$remoteSocketWrite(t,e){this._managedRemoteSockets.get(t)?.actual.send(e.buffer)}$remoteSocketEnd(t){const e=this._managedRemoteSockets.get(t);e&&(e.actual.end(),e.dispose())}async $remoteSocketDrain(t){await this._managedRemoteSockets.get(t)?.actual.drain?.()}};n=d([i(0,h)],n);class f{constructor(t,e){this.socketFactoryId=t;this.makeConnection=e}}class M extends k{constructor(e,a,o){super();this.socketId=e;this.actual=a;this._register(o)}}export{n as ExtHostManagedSockets,R as IExtHostManagedSockets};
