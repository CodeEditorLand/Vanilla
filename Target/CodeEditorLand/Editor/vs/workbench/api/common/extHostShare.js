import{MainContext as i}from"./extHost.protocol.js";import{DocumentSelector as a,Range as n}from"./extHostTypeConverters.js";import{URI as s}from"../../../base/common/uri.js";class t{constructor(o,e){this.uriTransformer=e;this.proxy=o.getProxy(i.MainThreadShare)}static handlePool=0;proxy;providers=new Map;async $provideShare(o,e,r){return await this.providers.get(o)?.provideShare({selection:n.to(e.selection),resourceUri:s.revive(e.resourceUri)},r)??void 0}registerShareProvider(o,e){const r=t.handlePool++;return this.providers.set(r,e),this.proxy.$registerShareProvider(r,a.from(o,this.uriTransformer),e.id,e.label,e.priority),{dispose:()=>{this.proxy.$unregisterShareProvider(r),this.providers.delete(r)}}}}export{t as ExtHostShare};
