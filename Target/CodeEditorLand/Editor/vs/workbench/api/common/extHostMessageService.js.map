{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/api/common/extHostMessageService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport Severity from '../../../base/common/severity.js';\nimport type * as vscode from 'vscode';\nimport { MainContext, MainThreadMessageServiceShape, MainThreadMessageOptions, IMainContext } from './extHost.protocol.js';\nimport { IExtensionDescription } from '../../../platform/extensions/common/extensions.js';\nimport { ILogService } from '../../../platform/log/common/log.js';\nimport { checkProposedApiEnabled } from '../../services/extensions/common/extensions.js';\n\nfunction isMessageItem(item: any): item is vscode.MessageItem {\n\treturn item && item.title;\n}\n\nexport class ExtHostMessageService {\n\n\tprivate _proxy: MainThreadMessageServiceShape;\n\n\tconstructor(\n\t\tmainContext: IMainContext,\n\t\t@ILogService private readonly _logService: ILogService\n\t) {\n\t\tthis._proxy = mainContext.getProxy(MainContext.MainThreadMessageService);\n\t}\n\n\n\tshowMessage(extension: IExtensionDescription, severity: Severity, message: string, optionsOrFirstItem: vscode.MessageOptions | string | undefined, rest: string[]): Promise<string | undefined>;\n\tshowMessage(extension: IExtensionDescription, severity: Severity, message: string, optionsOrFirstItem: vscode.MessageOptions | vscode.MessageItem | undefined, rest: vscode.MessageItem[]): Promise<vscode.MessageItem | undefined>;\n\tshowMessage(extension: IExtensionDescription, severity: Severity, message: string, optionsOrFirstItem: vscode.MessageOptions | vscode.MessageItem | string | undefined, rest: Array<vscode.MessageItem | string>): Promise<string | vscode.MessageItem | undefined>;\n\tshowMessage(extension: IExtensionDescription, severity: Severity, message: string, optionsOrFirstItem: vscode.MessageOptions | string | vscode.MessageItem | undefined, rest: Array<string | vscode.MessageItem>): Promise<string | vscode.MessageItem | undefined> {\n\n\t\tconst options: MainThreadMessageOptions = {\n\t\t\tsource: { identifier: extension.identifier, label: extension.displayName || extension.name }\n\t\t};\n\t\tlet items: (string | vscode.MessageItem)[];\n\n\t\tif (typeof optionsOrFirstItem === 'string' || isMessageItem(optionsOrFirstItem)) {\n\t\t\titems = [optionsOrFirstItem, ...rest];\n\t\t} else {\n\t\t\toptions.modal = optionsOrFirstItem?.modal;\n\t\t\toptions.useCustom = optionsOrFirstItem?.useCustom;\n\t\t\toptions.detail = optionsOrFirstItem?.detail;\n\t\t\titems = rest;\n\t\t}\n\n\t\tif (options.useCustom) {\n\t\t\tcheckProposedApiEnabled(extension, 'resolvers');\n\t\t}\n\n\t\tconst commands: { title: string; isCloseAffordance: boolean; handle: number }[] = [];\n\t\tlet hasCloseAffordance = false;\n\n\t\tfor (let handle = 0; handle < items.length; handle++) {\n\t\t\tconst command = items[handle];\n\t\t\tif (typeof command === 'string') {\n\t\t\t\tcommands.push({ title: command, handle, isCloseAffordance: false });\n\t\t\t} else if (typeof command === 'object') {\n\t\t\t\tconst { title, isCloseAffordance } = command;\n\t\t\t\tcommands.push({ title, isCloseAffordance: !!isCloseAffordance, handle });\n\t\t\t\tif (isCloseAffordance) {\n\t\t\t\t\tif (hasCloseAffordance) {\n\t\t\t\t\t\tthis._logService.warn(`[${extension.identifier}] Only one message item can have 'isCloseAffordance':`, command);\n\t\t\t\t\t} else {\n\t\t\t\t\t\thasCloseAffordance = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthis._logService.warn(`[${extension.identifier}] Invalid message item:`, command);\n\t\t\t}\n\t\t}\n\n\t\treturn this._proxy.$showMessage(severity, message, options, commands).then(handle => {\n\t\t\tif (typeof handle === 'number') {\n\t\t\t\treturn items[handle];\n\t\t\t}\n\t\t\treturn undefined;\n\t\t});\n\t}\n}\n"],
  "mappings": ";;;;;;;;;;;;AAKA,OAAO,cAAc;AAErB,SAAS,aAAa,+BAA+B,0BAA0B,oBAAoB;AACnG,SAAS,6BAA6B;AACtC,SAAS,mBAAmB;AAC5B,SAAS,+BAA+B;AAExC,SAAS,cAAc,MAAuC;AAC7D,SAAO,QAAQ,KAAK;AACrB;AAFS;AAIF,IAAM,wBAAN,MAA4B;AAAA,EAIlC,YACC,aAC8B,aAC7B;AAD6B;AAE9B,SAAK,SAAS,YAAY,SAAS,YAAY,wBAAwB;AAAA,EACxE;AAAA,EAzBD,OAgBmC;AAAA;AAAA;AAAA,EAE1B;AAAA,EAaR,YAAY,WAAkC,UAAoB,SAAiB,oBAAqF,MAA4F;AAEnQ,UAAM,UAAoC;AAAA,MACzC,QAAQ,EAAE,YAAY,UAAU,YAAY,OAAO,UAAU,eAAe,UAAU,KAAK;AAAA,IAC5F;AACA,QAAI;AAEJ,QAAI,OAAO,uBAAuB,YAAY,cAAc,kBAAkB,GAAG;AAChF,cAAQ,CAAC,oBAAoB,GAAG,IAAI;AAAA,IACrC,OAAO;AACN,cAAQ,QAAQ,oBAAoB;AACpC,cAAQ,YAAY,oBAAoB;AACxC,cAAQ,SAAS,oBAAoB;AACrC,cAAQ;AAAA,IACT;AAEA,QAAI,QAAQ,WAAW;AACtB,8BAAwB,WAAW,WAAW;AAAA,IAC/C;AAEA,UAAM,WAA4E,CAAC;AACnF,QAAI,qBAAqB;AAEzB,aAAS,SAAS,GAAG,SAAS,MAAM,QAAQ,UAAU;AACrD,YAAM,UAAU,MAAM,MAAM;AAC5B,UAAI,OAAO,YAAY,UAAU;AAChC,iBAAS,KAAK,EAAE,OAAO,SAAS,QAAQ,mBAAmB,MAAM,CAAC;AAAA,MACnE,WAAW,OAAO,YAAY,UAAU;AACvC,cAAM,EAAE,OAAO,kBAAkB,IAAI;AACrC,iBAAS,KAAK,EAAE,OAAO,mBAAmB,CAAC,CAAC,mBAAmB,OAAO,CAAC;AACvE,YAAI,mBAAmB;AACtB,cAAI,oBAAoB;AACvB,iBAAK,YAAY,KAAK,IAAI,UAAU,UAAU,yDAAyD,OAAO;AAAA,UAC/G,OAAO;AACN,iCAAqB;AAAA,UACtB;AAAA,QACD;AAAA,MACD,OAAO;AACN,aAAK,YAAY,KAAK,IAAI,UAAU,UAAU,2BAA2B,OAAO;AAAA,MACjF;AAAA,IACD;AAEA,WAAO,KAAK,OAAO,aAAa,UAAU,SAAS,SAAS,QAAQ,EAAE,KAAK,YAAU;AACpF,UAAI,OAAO,WAAW,UAAU;AAC/B,eAAO,MAAM,MAAM;AAAA,MACpB;AACA,aAAO;AAAA,IACR,CAAC;AAAA,EACF;AACD;AAhEa,wBAAN;AAAA,EAMJ;AAAA,GANU;",
  "names": []
}
