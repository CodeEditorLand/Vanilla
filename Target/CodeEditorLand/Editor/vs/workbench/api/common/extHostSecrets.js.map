{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/api/common/extHostSecrets.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n/* eslint-disable local/code-no-native-private */\n\nimport type * as vscode from \"vscode\";\n\nimport { Event } from \"../../../base/common/event.js\";\nimport { DisposableStore } from \"../../../base/common/lifecycle.js\";\nimport {\n\tExtensionIdentifier,\n\ttype IExtensionDescription,\n} from \"../../../platform/extensions/common/extensions.js\";\nimport type { ExtHostSecretState } from \"./extHostSecretState.js\";\n\nexport class ExtensionSecrets implements vscode.SecretStorage {\n\tprotected readonly _id: string;\n\treadonly #secretState: ExtHostSecretState;\n\n\treadonly onDidChange: Event<vscode.SecretStorageChangeEvent>;\n\treadonly disposables = new DisposableStore();\n\n\tconstructor(\n\t\textensionDescription: IExtensionDescription,\n\t\tsecretState: ExtHostSecretState,\n\t) {\n\t\tthis._id = ExtensionIdentifier.toKey(extensionDescription.identifier);\n\t\tthis.#secretState = secretState;\n\n\t\tthis.onDidChange = Event.map(\n\t\t\tEvent.filter(\n\t\t\t\tthis.#secretState.onDidChangePassword,\n\t\t\t\t(e) => e.extensionId === this._id,\n\t\t\t),\n\t\t\t(e) => ({ key: e.key }),\n\t\t\tthis.disposables,\n\t\t);\n\t}\n\n\tdispose() {\n\t\tthis.disposables.dispose();\n\t}\n\n\tget(key: string): Promise<string | undefined> {\n\t\treturn this.#secretState.get(this._id, key);\n\t}\n\n\tstore(key: string, value: string): Promise<void> {\n\t\treturn this.#secretState.store(this._id, key, value);\n\t}\n\n\tdelete(key: string): Promise<void> {\n\t\treturn this.#secretState.delete(this._id, key);\n\t}\n}\n"],
  "mappings": ";;AASA,SAAS,aAAa;AACtB,SAAS,uBAAuB;AAChC;AAAA,EACC;AAAA,OAEM;AAGA,MAAM,iBAAiD;AAAA,EAjB9D,OAiB8D;AAAA;AAAA;AAAA,EAC1C;AAAA,EACV;AAAA,EAEA;AAAA,EACA,cAAc,IAAI,gBAAgB;AAAA,EAE3C,YACC,sBACA,aACC;AACD,SAAK,MAAM,oBAAoB,MAAM,qBAAqB,UAAU;AACpE,SAAK,eAAe;AAEpB,SAAK,cAAc,MAAM;AAAA,MACxB,MAAM;AAAA,QACL,KAAK,aAAa;AAAA,QAClB,CAAC,MAAM,EAAE,gBAAgB,KAAK;AAAA,MAC/B;AAAA,MACA,CAAC,OAAO,EAAE,KAAK,EAAE,IAAI;AAAA,MACrB,KAAK;AAAA,IACN;AAAA,EACD;AAAA,EAEA,UAAU;AACT,SAAK,YAAY,QAAQ;AAAA,EAC1B;AAAA,EAEA,IAAI,KAA0C;AAC7C,WAAO,KAAK,aAAa,IAAI,KAAK,KAAK,GAAG;AAAA,EAC3C;AAAA,EAEA,MAAM,KAAa,OAA8B;AAChD,WAAO,KAAK,aAAa,MAAM,KAAK,KAAK,KAAK,KAAK;AAAA,EACpD;AAAA,EAEA,OAAO,KAA4B;AAClC,WAAO,KAAK,aAAa,OAAO,KAAK,KAAK,GAAG;AAAA,EAC9C;AACD;",
  "names": []
}
