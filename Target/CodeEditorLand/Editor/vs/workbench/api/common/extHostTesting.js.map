{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/api/common/extHostTesting.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n/* eslint-disable local/code-no-native-private */\n\nimport type * as vscode from \"vscode\";\nimport { RunOnceScheduler } from \"../../../base/common/async.js\";\nimport { VSBuffer } from \"../../../base/common/buffer.js\";\nimport {\n\tCancellationToken,\n\tCancellationTokenSource,\n} from \"../../../base/common/cancellation.js\";\nimport { Emitter, Event } from \"../../../base/common/event.js\";\nimport { createSingleCallFunction } from \"../../../base/common/functional.js\";\nimport { hash } from \"../../../base/common/hash.js\";\nimport {\n\tDisposable,\n\tDisposableStore,\n\ttoDisposable,\n} from \"../../../base/common/lifecycle.js\";\nimport { MarshalledId } from \"../../../base/common/marshallingIds.js\";\nimport { isDefined } from \"../../../base/common/types.js\";\nimport { URI, type UriComponents } from \"../../../base/common/uri.js\";\nimport { generateUuid } from \"../../../base/common/uuid.js\";\nimport type { IPosition } from \"../../../editor/common/core/position.js\";\nimport type { IExtensionDescription } from \"../../../platform/extensions/common/extensions.js\";\nimport { createDecorator } from \"../../../platform/instantiation/common/instantiation.js\";\nimport { ILogService } from \"../../../platform/log/common/log.js\";\nimport { TestCommandId } from \"../../contrib/testing/common/constants.js\";\nimport { TestId, TestPosition } from \"../../contrib/testing/common/testId.js\";\nimport { InvalidTestItemError } from \"../../contrib/testing/common/testItemCollection.js\";\nimport {\n\tAbstractIncrementalTestCollection,\n\ttype CoverageDetails,\n\ttype ICallProfileRunHandler,\n\ttype ISerializedTestResults,\n\ttype IStartControllerTests,\n\ttype IStartControllerTestsResult,\n\ttype ITestErrorMessage,\n\ttype ITestItem,\n\ttype ITestItemContext,\n\ttype ITestMessageMenuArgs,\n\ttype ITestRunProfile,\n\ttype IncrementalChangeCollector,\n\ttype IncrementalTestCollectionItem,\n\ttype InternalTestItem,\n\tTestControllerCapability,\n\ttype TestMessageFollowupRequest,\n\ttype TestMessageFollowupResponse,\n\tTestResultState,\n\tTestRunProfileBitset,\n\ttype TestsDiff,\n\tTestsDiffOp,\n\tisStartControllerTests,\n} from \"../../contrib/testing/common/testTypes.js\";\nimport { checkProposedApiEnabled } from \"../../services/extensions/common/extensions.js\";\nimport {\n\ttype ExtHostTestingShape,\n\ttype ILocationDto,\n\tMainContext,\n\ttype MainThreadTestingShape,\n} from \"./extHost.protocol.js\";\nimport { IExtHostCommands } from \"./extHostCommands.js\";\nimport { IExtHostDocumentsAndEditors } from \"./extHostDocumentsAndEditors.js\";\nimport { IExtHostRpcService } from \"./extHostRpcService.js\";\nimport {\n\tExtHostTestItemCollection,\n\tTestItemImpl,\n\tTestItemRootImpl,\n\ttoItemFromContext,\n} from \"./extHostTestItem.js\";\nimport * as Convert from \"./extHostTypeConverters.js\";\nimport {\n\tFileCoverage,\n\tTestRunProfileKind,\n\tTestRunRequest,\n} from \"./extHostTypes.js\";\n\ninterface ControllerInfo {\n\tcontroller: vscode.TestController;\n\tprofiles: Map<number, vscode.TestRunProfile>;\n\tcollection: ExtHostTestItemCollection;\n\textension: IExtensionDescription;\n\trelatedCodeProvider?: vscode.TestRelatedCodeProvider;\n\tactiveProfiles: Set<number>;\n}\n\ntype DefaultProfileChangeEvent = Map<\n\t/* controllerId */ string,\n\tMap</* profileId */ number, boolean>\n>;\n\nlet followupCounter = 0;\n\nconst testResultInternalIDs = new WeakMap<vscode.TestRunResult, string>();\n\nexport const IExtHostTesting =\n\tcreateDecorator<IExtHostTesting>(\"IExtHostTesting\");\nexport interface IExtHostTesting extends ExtHostTesting {\n\treadonly _serviceBrand: undefined;\n}\n\nexport class ExtHostTesting extends Disposable implements ExtHostTestingShape {\n\tdeclare readonly _serviceBrand: undefined;\n\n\tprivate readonly resultsChangedEmitter = this._register(\n\t\tnew Emitter<void>(),\n\t);\n\tprotected readonly controllers = new Map<\n\t\t/* controller ID */ string,\n\t\tControllerInfo\n\t>();\n\tprivate readonly proxy: MainThreadTestingShape;\n\tprivate readonly runTracker: TestRunCoordinator;\n\tprivate readonly observer: TestObservers;\n\tprivate readonly defaultProfilesChangedEmitter = this._register(\n\t\tnew Emitter<DefaultProfileChangeEvent>(),\n\t);\n\tprivate readonly followupProviders = new Set<vscode.TestFollowupProvider>();\n\tprivate readonly testFollowups = new Map<number, vscode.Command>();\n\n\tpublic onResultsChanged = this.resultsChangedEmitter.event;\n\tpublic results: ReadonlyArray<vscode.TestRunResult> = [];\n\n\tconstructor(\n\t\t@IExtHostRpcService rpc: IExtHostRpcService,\n\t\t@ILogService private readonly logService: ILogService,\n\t\t@IExtHostCommands private readonly commands: IExtHostCommands,\n\t\t@IExtHostDocumentsAndEditors private readonly editors: IExtHostDocumentsAndEditors,\n\t) {\n\t\tsuper();\n\t\tthis.proxy = rpc.getProxy(MainContext.MainThreadTesting);\n\t\tthis.observer = new TestObservers(this.proxy);\n\t\tthis.runTracker = new TestRunCoordinator(this.proxy, logService);\n\n\t\tcommands.registerArgumentProcessor({\n\t\t\tprocessArgument: arg => {\n\t\t\t\tswitch (arg?.$mid) {\n\t\t\t\t\tcase MarshalledId.TestItemContext: {\n\t\t\t\t\t\tconst cast = arg as ITestItemContext;\n\t\t\t\t\t\tconst targetTest = cast.tests[cast.tests.length - 1].item.extId;\n\t\t\t\t\t\tconst controller = this.controllers.get(TestId.root(targetTest));\n\t\t\t\t\t\treturn controller?.collection.tree.get(targetTest)?.actual ?? toItemFromContext(arg);\n\t\t\t\t\t}\n\t\t\t\t\tcase MarshalledId.TestMessageMenuArgs: {\n\t\t\t\t\t\tconst { test, message } = arg as ITestMessageMenuArgs;\n\t\t\t\t\t\tconst extId = test.item.extId;\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\ttest: this.controllers.get(TestId.root(extId))?.collection.tree.get(extId)?.actual\n\t\t\t\t\t\t\t\t?? toItemFromContext({ $mid: MarshalledId.TestItemContext, tests: [test] }),\n\t\t\t\t\t\t\tmessage: Convert.TestMessage.to(message as ITestErrorMessage.Serialized),\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\t\t\t\t\tdefault: return arg;\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tcommands.registerCommand(false, 'testing.getExplorerSelection', async (): Promise<any> => {\n\t\t\tconst inner = await commands.executeCommand<{\n\t\t\t\tinclude: string[];\n\t\t\t\texclude: string[];\n\t\t\t}>(TestCommandId.GetExplorerSelection);\n\n\t\t\tconst lookup = (i: string) => {\n\t\t\t\tconst controller = this.controllers.get(TestId.root(i));\n\t\t\t\tif (!controller) { return undefined; }\n\t\t\t\treturn TestId.isRoot(i) ? controller.controller : controller.collection.tree.get(i)?.actual;\n\t\t\t};\n\n\t\t\treturn {\n\t\t\t\tinclude: inner?.include.map(lookup).filter(isDefined) || [],\n\t\t\t\texclude: inner?.exclude.map(lookup).filter(isDefined) || [],\n\t\t\t};\n\t\t});\n\t}\n\n\t//#region public API\n\n\t/**\n\t * Implements vscode.test.registerTestProvider\n\t */\n\tpublic createTestController(\n\t\textension: IExtensionDescription,\n\t\tcontrollerId: string,\n\t\tlabel: string,\n\t\trefreshHandler?: (token: CancellationToken) => Thenable<void> | void,\n\t): vscode.TestController {\n\t\tif (this.controllers.has(controllerId)) {\n\t\t\tthrow new Error(\n\t\t\t\t`Attempt to insert a duplicate controller with ID \"${controllerId}\"`,\n\t\t\t);\n\t\t}\n\n\t\tconst disposable = new DisposableStore();\n\t\tconst collection = disposable.add(\n\t\t\tnew ExtHostTestItemCollection(controllerId, label, this.editors),\n\t\t);\n\t\tcollection.root.label = label;\n\n\t\tconst profiles = new Map<number, vscode.TestRunProfile>();\n\t\tconst activeProfiles = new Set<number>();\n\t\tconst proxy = this.proxy;\n\n\t\tconst getCapability = () => {\n\t\t\tlet cap = 0;\n\t\t\tif (refreshHandler) {\n\t\t\t\tcap |= TestControllerCapability.Refresh;\n\t\t\t}\n\t\t\tconst rcp = info.relatedCodeProvider;\n\t\t\tif (rcp) {\n\t\t\t\tif (rcp?.provideRelatedTests) {\n\t\t\t\t\tcap |= TestControllerCapability.TestRelatedToCode;\n\t\t\t\t}\n\t\t\t\tif (rcp?.provideRelatedCode) {\n\t\t\t\t\tcap |= TestControllerCapability.CodeRelatedToTest;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn cap as TestControllerCapability;\n\t\t};\n\n\t\tconst controller: vscode.TestController = {\n\t\t\titems: collection.root.children,\n\t\t\tget label() {\n\t\t\t\treturn label;\n\t\t\t},\n\t\t\tset label(value: string) {\n\t\t\t\tlabel = value;\n\t\t\t\tcollection.root.label = value;\n\t\t\t\tproxy.$updateController(controllerId, { label });\n\t\t\t},\n\t\t\tget refreshHandler() {\n\t\t\t\treturn refreshHandler;\n\t\t\t},\n\t\t\tset refreshHandler(value:\n\t\t\t\t| ((token: CancellationToken) => Thenable<void> | void)\n\t\t\t\t| undefined) {\n\t\t\t\trefreshHandler = value;\n\t\t\t\tproxy.$updateController(controllerId, {\n\t\t\t\t\tcapabilities: getCapability(),\n\t\t\t\t});\n\t\t\t},\n\t\t\tget id() {\n\t\t\t\treturn controllerId;\n\t\t\t},\n\t\t\tget relatedCodeProvider() {\n\t\t\t\treturn info.relatedCodeProvider;\n\t\t\t},\n\t\t\tset relatedCodeProvider(value:\n\t\t\t\t| vscode.TestRelatedCodeProvider\n\t\t\t\t| undefined) {\n\t\t\t\tcheckProposedApiEnabled(extension, \"testRelatedCode\");\n\t\t\t\tinfo.relatedCodeProvider = value;\n\t\t\t\tproxy.$updateController(controllerId, {\n\t\t\t\t\tcapabilities: getCapability(),\n\t\t\t\t});\n\t\t\t},\n\t\t\tcreateRunProfile: (\n\t\t\t\tlabel,\n\t\t\t\tgroup,\n\t\t\t\trunHandler,\n\t\t\t\tisDefault,\n\t\t\t\ttag?: vscode.TestTag | undefined,\n\t\t\t\tsupportsContinuousRun?: boolean,\n\t\t\t) => {\n\t\t\t\t// Derive the profile ID from a hash so that the same profile will tend\n\t\t\t\t// to have the same hashes, allowing re-run requests to work across reloads.\n\t\t\t\tlet profileId = hash(label);\n\t\t\t\twhile (profiles.has(profileId)) {\n\t\t\t\t\tprofileId++;\n\t\t\t\t}\n\n\t\t\t\treturn new TestRunProfileImpl(\n\t\t\t\t\tthis.proxy,\n\t\t\t\t\tprofiles,\n\t\t\t\t\tactiveProfiles,\n\t\t\t\t\tthis.defaultProfilesChangedEmitter.event,\n\t\t\t\t\tcontrollerId,\n\t\t\t\t\tprofileId,\n\t\t\t\t\tlabel,\n\t\t\t\t\tgroup,\n\t\t\t\t\trunHandler,\n\t\t\t\t\tisDefault,\n\t\t\t\t\ttag,\n\t\t\t\t\tsupportsContinuousRun,\n\t\t\t\t);\n\t\t\t},\n\t\t\tcreateTestItem(id, label, uri) {\n\t\t\t\treturn new TestItemImpl(controllerId, id, label, uri);\n\t\t\t},\n\t\t\tcreateTestRun: (request, name, persist = true) => {\n\t\t\t\treturn this.runTracker.createTestRun(\n\t\t\t\t\textension,\n\t\t\t\t\tcontrollerId,\n\t\t\t\t\tcollection,\n\t\t\t\t\trequest,\n\t\t\t\t\tname,\n\t\t\t\t\tpersist,\n\t\t\t\t);\n\t\t\t},\n\t\t\tinvalidateTestResults: (items) => {\n\t\t\t\tif (items === undefined) {\n\t\t\t\t\tthis.proxy.$markTestRetired(undefined);\n\t\t\t\t} else {\n\t\t\t\t\tconst itemsArr = items instanceof Array ? items : [items];\n\t\t\t\t\tthis.proxy.$markTestRetired(\n\t\t\t\t\t\titemsArr.map((i) =>\n\t\t\t\t\t\t\tTestId.fromExtHostTestItem(\n\t\t\t\t\t\t\t\ti!,\n\t\t\t\t\t\t\t\tcontrollerId,\n\t\t\t\t\t\t\t).toString(),\n\t\t\t\t\t\t),\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t},\n\t\t\tset resolveHandler(fn) {\n\t\t\t\tcollection.resolveHandler = fn;\n\t\t\t},\n\t\t\tget resolveHandler() {\n\t\t\t\treturn collection.resolveHandler as\n\t\t\t\t\t| undefined\n\t\t\t\t\t| ((item?: vscode.TestItem) => void);\n\t\t\t},\n\t\t\tdispose: () => {\n\t\t\t\tdisposable.dispose();\n\t\t\t},\n\t\t};\n\n\t\tconst info: ControllerInfo = {\n\t\t\tcontroller,\n\t\t\tcollection,\n\t\t\tprofiles,\n\t\t\textension,\n\t\t\tactiveProfiles,\n\t\t};\n\t\tproxy.$registerTestController(controllerId, label, getCapability());\n\t\tdisposable.add(\n\t\t\ttoDisposable(() => proxy.$unregisterTestController(controllerId)),\n\t\t);\n\n\t\tthis.controllers.set(controllerId, info);\n\t\tdisposable.add(\n\t\t\ttoDisposable(() => this.controllers.delete(controllerId)),\n\t\t);\n\n\t\tdisposable.add(\n\t\t\tcollection.onDidGenerateDiff((diff) =>\n\t\t\t\tproxy.$publishDiff(\n\t\t\t\t\tcontrollerId,\n\t\t\t\t\tdiff.map(TestsDiffOp.serialize),\n\t\t\t\t),\n\t\t\t),\n\t\t);\n\n\t\treturn controller;\n\t}\n\n\t/**\n\t * Implements vscode.test.createTestObserver\n\t */\n\tpublic createTestObserver() {\n\t\treturn this.observer.checkout();\n\t}\n\n\t/**\n\t * Implements vscode.test.runTests\n\t */\n\tpublic async runTests(\n\t\treq: vscode.TestRunRequest,\n\t\ttoken = CancellationToken.None,\n\t) {\n\t\tconst profile = tryGetProfileFromTestRunReq(req);\n\t\tif (!profile) {\n\t\t\tthrow new Error(\n\t\t\t\t\"The request passed to `vscode.test.runTests` must include a profile\",\n\t\t\t);\n\t\t}\n\n\t\tconst controller = this.controllers.get(profile.controllerId);\n\t\tif (!controller) {\n\t\t\tthrow new Error(\"Controller not found\");\n\t\t}\n\n\t\tawait this.proxy.$runTests(\n\t\t\t{\n\t\t\t\tpreserveFocus: req.preserveFocus ?? true,\n\t\t\t\tgroup: profileGroupToBitset[profile.kind],\n\t\t\t\ttargets: [\n\t\t\t\t\t{\n\t\t\t\t\t\ttestIds: req.include?.map((t) =>\n\t\t\t\t\t\t\tTestId.fromExtHostTestItem(\n\t\t\t\t\t\t\t\tt,\n\t\t\t\t\t\t\t\tcontroller.collection.root.id,\n\t\t\t\t\t\t\t).toString(),\n\t\t\t\t\t\t) ?? [controller.collection.root.id],\n\t\t\t\t\t\tprofileId: profile.profileId,\n\t\t\t\t\t\tcontrollerId: profile.controllerId,\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\texclude: req.exclude?.map((t) => t.id),\n\t\t\t},\n\t\t\ttoken,\n\t\t);\n\t}\n\n\t/**\n\t * Implements vscode.test.registerTestFollowupProvider\n\t */\n\tpublic registerTestFollowupProvider(\n\t\tprovider: vscode.TestFollowupProvider,\n\t): vscode.Disposable {\n\t\tthis.followupProviders.add(provider);\n\t\treturn {\n\t\t\tdispose: () => {\n\t\t\t\tthis.followupProviders.delete(provider);\n\t\t\t},\n\t\t};\n\t}\n\n\t//#endregion\n\n\t//#region RPC methods\n\t/**\n\t * @inheritdoc\n\t */\n\tasync $getTestsRelatedToCode(\n\t\turi: UriComponents,\n\t\t_position: IPosition,\n\t\ttoken: CancellationToken,\n\t): Promise<string[]> {\n\t\tconst doc = this.editors.getDocument(URI.revive(uri));\n\t\tif (!doc) {\n\t\t\treturn [];\n\t\t}\n\n\t\tconst position = Convert.Position.to(_position);\n\t\tconst related: string[] = [];\n\t\tawait Promise.all(\n\t\t\t[...this.controllers.values()].map(async (c) => {\n\t\t\t\tlet tests: vscode.TestItem[] | undefined | null;\n\t\t\t\ttry {\n\t\t\t\t\ttests = await c.relatedCodeProvider?.provideRelatedTests?.(\n\t\t\t\t\t\tdoc.document,\n\t\t\t\t\t\tposition,\n\t\t\t\t\t\ttoken,\n\t\t\t\t\t);\n\t\t\t\t} catch (e) {\n\t\t\t\t\tif (!token.isCancellationRequested) {\n\t\t\t\t\t\tthis.logService.warn(\n\t\t\t\t\t\t\t`Error thrown while providing related tests for ${c.controller.label}`,\n\t\t\t\t\t\t\te,\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (tests) {\n\t\t\t\t\tfor (const test of tests) {\n\t\t\t\t\t\trelated.push(\n\t\t\t\t\t\t\tTestId.fromExtHostTestItem(\n\t\t\t\t\t\t\t\ttest,\n\t\t\t\t\t\t\t\tc.controller.id,\n\t\t\t\t\t\t\t).toString(),\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t\tc.collection.flushDiff();\n\t\t\t\t}\n\t\t\t}),\n\t\t);\n\n\t\treturn related;\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\tasync $getCodeRelatedToTest(\n\t\ttestId: string,\n\t\ttoken: CancellationToken,\n\t): Promise<ILocationDto[]> {\n\t\tconst controller = this.controllers.get(TestId.root(testId));\n\t\tif (!controller) {\n\t\t\treturn [];\n\t\t}\n\n\t\tconst test = controller.collection.tree.get(testId);\n\t\tif (!test) {\n\t\t\treturn [];\n\t\t}\n\n\t\tconst locations =\n\t\t\tawait controller.relatedCodeProvider?.provideRelatedCode?.(\n\t\t\t\ttest.actual,\n\t\t\t\ttoken,\n\t\t\t);\n\t\treturn locations?.map(Convert.location.from) ?? [];\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\t$syncTests(): Promise<void> {\n\t\tfor (const { collection } of this.controllers.values()) {\n\t\t\tcollection.flushDiff();\n\t\t}\n\n\t\treturn Promise.resolve();\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\tasync $getCoverageDetails(\n\t\tcoverageId: string,\n\t\ttestId: string | undefined,\n\t\ttoken: CancellationToken,\n\t): Promise<CoverageDetails.Serialized[]> {\n\t\tconst details = await this.runTracker.getCoverageDetails(\n\t\t\tcoverageId,\n\t\t\ttestId,\n\t\t\ttoken,\n\t\t);\n\t\treturn details?.map(Convert.TestCoverage.fromDetails);\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\tasync $disposeRun(runId: string) {\n\t\tthis.runTracker.disposeTestRun(runId);\n\t}\n\n\t/** @inheritdoc */\n\t$configureRunProfile(controllerId: string, profileId: number) {\n\t\tthis.controllers\n\t\t\t.get(controllerId)\n\t\t\t?.profiles.get(profileId)\n\t\t\t?.configureHandler?.();\n\t}\n\n\t/** @inheritdoc */\n\t$setDefaultRunProfiles(\n\t\tprofiles: Record</* controller id */ string, /* profile id */ number[]>,\n\t): void {\n\t\tconst evt: DefaultProfileChangeEvent = new Map();\n\t\tfor (const [controllerId, profileIds] of Object.entries(profiles)) {\n\t\t\tconst ctrl = this.controllers.get(controllerId);\n\t\t\tif (!ctrl) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tconst changes = new Map<number, boolean>();\n\t\t\tconst added = profileIds.filter(\n\t\t\t\t(id) => !ctrl.activeProfiles.has(id),\n\t\t\t);\n\t\t\tconst removed = [...ctrl.activeProfiles].filter(\n\t\t\t\t(id) => !profileIds.includes(id),\n\t\t\t);\n\t\t\tfor (const id of added) {\n\t\t\t\tchanges.set(id, true);\n\t\t\t\tctrl.activeProfiles.add(id);\n\t\t\t}\n\t\t\tfor (const id of removed) {\n\t\t\t\tchanges.set(id, false);\n\t\t\t\tctrl.activeProfiles.delete(id);\n\t\t\t}\n\t\t\tif (changes.size) {\n\t\t\t\tevt.set(controllerId, changes);\n\t\t\t}\n\t\t}\n\n\t\tthis.defaultProfilesChangedEmitter.fire(evt);\n\t}\n\n\t/** @inheritdoc */\n\tasync $refreshTests(controllerId: string, token: CancellationToken) {\n\t\tawait this.controllers\n\t\t\t.get(controllerId)\n\t\t\t?.controller.refreshHandler?.(token);\n\t}\n\n\t/**\n\t * Updates test results shown to extensions.\n\t * @override\n\t */\n\tpublic $publishTestResults(results: ISerializedTestResults[]): void {\n\t\tthis.results = Object.freeze(\n\t\t\tresults\n\t\t\t\t.map((r) => {\n\t\t\t\t\tconst o = Convert.TestResults.to(r);\n\t\t\t\t\tconst taskWithCoverage = r.tasks.findIndex(\n\t\t\t\t\t\t(t) => t.hasCoverage,\n\t\t\t\t\t);\n\t\t\t\t\tif (taskWithCoverage !== -1) {\n\t\t\t\t\t\to.getDetailedCoverage = (\n\t\t\t\t\t\t\turi,\n\t\t\t\t\t\t\ttoken = CancellationToken.None,\n\t\t\t\t\t\t) =>\n\t\t\t\t\t\t\tthis.proxy\n\t\t\t\t\t\t\t\t.$getCoverageDetails(\n\t\t\t\t\t\t\t\t\tr.id,\n\t\t\t\t\t\t\t\t\ttaskWithCoverage,\n\t\t\t\t\t\t\t\t\turi,\n\t\t\t\t\t\t\t\t\ttoken,\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t.then((r) => r.map(Convert.TestCoverage.to));\n\t\t\t\t\t}\n\n\t\t\t\t\ttestResultInternalIDs.set(o, r.id);\n\t\t\t\t\treturn o;\n\t\t\t\t})\n\t\t\t\t.concat(this.results)\n\t\t\t\t.sort((a, b) => b.completedAt - a.completedAt)\n\t\t\t\t.slice(0, 32),\n\t\t);\n\n\t\tthis.resultsChangedEmitter.fire();\n\t}\n\n\t/**\n\t * Expands the nodes in the test tree. If levels is less than zero, it will\n\t * be treated as infinite.\n\t */\n\tpublic async $expandTest(testId: string, levels: number) {\n\t\tconst collection = this.controllers.get(\n\t\t\tTestId.fromString(testId).controllerId,\n\t\t)?.collection;\n\t\tif (collection) {\n\t\t\tawait collection.expand(\n\t\t\t\ttestId,\n\t\t\t\tlevels < 0 ? Number.POSITIVE_INFINITY : levels,\n\t\t\t);\n\t\t\tcollection.flushDiff();\n\t\t}\n\t}\n\n\t/**\n\t * Receives a test update from the main thread. Called (eventually) whenever\n\t * tests change.\n\t */\n\tpublic $acceptDiff(diff: TestsDiffOp.Serialized[]): void {\n\t\tthis.observer.applyDiff(\n\t\t\tdiff.map((d) =>\n\t\t\t\tTestsDiffOp.deserialize({ asCanonicalUri: (u) => u }, d),\n\t\t\t),\n\t\t);\n\t}\n\n\t/**\n\t * Runs tests with the given set of IDs. Allows for test from multiple\n\t * providers to be run.\n\t * @inheritdoc\n\t */\n\tpublic async $runControllerTests(\n\t\treqs: IStartControllerTests[],\n\t\ttoken: CancellationToken,\n\t): Promise<IStartControllerTestsResult[]> {\n\t\treturn Promise.all(\n\t\t\treqs.map((req) => this.runControllerTestRequest(req, false, token)),\n\t\t);\n\t}\n\n\t/**\n\t * Starts continuous test runs with the given set of IDs. Allows for test from\n\t * multiple providers to be run.\n\t * @inheritdoc\n\t */\n\tpublic async $startContinuousRun(\n\t\treqs: IStartControllerTests[],\n\t\ttoken: CancellationToken,\n\t): Promise<IStartControllerTestsResult[]> {\n\t\tconst cts = new CancellationTokenSource(token);\n\t\tconst res = await Promise.all(\n\t\t\treqs.map((req) =>\n\t\t\t\tthis.runControllerTestRequest(req, true, cts.token),\n\t\t\t),\n\t\t);\n\n\t\t// avoid returning until cancellation is requested, otherwise ipc disposes of the token\n\t\tif (!token.isCancellationRequested && !res.some((r) => r.error)) {\n\t\t\tawait new Promise((r) => token.onCancellationRequested(r));\n\t\t}\n\n\t\tcts.dispose(true);\n\t\treturn res;\n\t}\n\n\t/** @inheritdoc */\n\tpublic async $provideTestFollowups(\n\t\treq: TestMessageFollowupRequest,\n\t\ttoken: CancellationToken,\n\t): Promise<TestMessageFollowupResponse[]> {\n\t\tconst results = this.results.find(\n\t\t\t(r) => testResultInternalIDs.get(r) === req.resultId,\n\t\t);\n\t\tconst test =\n\t\t\tresults &&\n\t\t\tfindTestInResultSnapshot(\n\t\t\t\tTestId.fromString(req.extId),\n\t\t\t\tresults?.results,\n\t\t\t);\n\t\tif (!test) {\n\t\t\treturn [];\n\t\t}\n\n\t\tlet followups: vscode.Command[] = [];\n\t\tawait Promise.all(\n\t\t\t[...this.followupProviders].map(async (provider) => {\n\t\t\t\ttry {\n\t\t\t\t\tconst r = await provider.provideFollowup(\n\t\t\t\t\t\tresults,\n\t\t\t\t\t\ttest,\n\t\t\t\t\t\treq.taskIndex,\n\t\t\t\t\t\treq.messageIndex,\n\t\t\t\t\t\ttoken,\n\t\t\t\t\t);\n\t\t\t\t\tif (r) {\n\t\t\t\t\t\tfollowups = followups.concat(r);\n\t\t\t\t\t}\n\t\t\t\t} catch (e) {\n\t\t\t\t\tthis.logService.error(\n\t\t\t\t\t\t`Error thrown while providing followup for test message`,\n\t\t\t\t\t\te,\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}),\n\t\t);\n\n\t\tif (token.isCancellationRequested) {\n\t\t\treturn [];\n\t\t}\n\n\t\treturn followups.map((command) => {\n\t\t\tconst id = followupCounter++;\n\t\t\tthis.testFollowups.set(id, command);\n\t\t\treturn { title: command.title, id };\n\t\t});\n\t}\n\n\t$disposeTestFollowups(id: number[]): void {\n\t\tfor (const i of id) {\n\t\t\tthis.testFollowups.delete(i);\n\t\t}\n\t}\n\n\t$executeTestFollowup(id: number): Promise<void> {\n\t\tconst command = this.testFollowups.get(id);\n\t\tif (!command) {\n\t\t\treturn Promise.resolve();\n\t\t}\n\n\t\treturn this.commands.executeCommand(\n\t\t\tcommand.command,\n\t\t\t...(command.arguments || []),\n\t\t);\n\t}\n\n\t/**\n\t * Cancels an ongoing test run.\n\t */\n\tpublic $cancelExtensionTestRun(\n\t\trunId: string | undefined,\n\t\ttaskId: string | undefined,\n\t) {\n\t\tif (runId === undefined) {\n\t\t\tthis.runTracker.cancelAllRuns();\n\t\t} else {\n\t\t\tthis.runTracker.cancelRunById(runId, taskId);\n\t\t}\n\t}\n\n\t//#endregion\n\n\tpublic getMetadataForRun(run: vscode.TestRun) {\n\t\tfor (const tracker of this.runTracker.trackers) {\n\t\t\tconst taskId = tracker.getTaskIdForRun(run);\n\t\t\tif (taskId) {\n\t\t\t\treturn { taskId, runId: tracker.id };\n\t\t\t}\n\t\t}\n\n\t\treturn undefined;\n\t}\n\n\tprivate async runControllerTestRequest(\n\t\treq: ICallProfileRunHandler | ICallProfileRunHandler,\n\t\tisContinuous: boolean,\n\t\ttoken: CancellationToken,\n\t): Promise<IStartControllerTestsResult> {\n\t\tconst lookup = this.controllers.get(req.controllerId);\n\t\tif (!lookup) {\n\t\t\treturn {};\n\t\t}\n\n\t\tconst { collection, profiles, extension } = lookup;\n\t\tconst profile = profiles.get(req.profileId);\n\t\tif (!profile) {\n\t\t\treturn {};\n\t\t}\n\n\t\tconst includeTests = req.testIds\n\t\t\t.map((testId) => collection.tree.get(testId))\n\t\t\t.filter(isDefined);\n\n\t\tconst excludeTests = req.excludeExtIds\n\t\t\t.map((id) => lookup.collection.tree.get(id))\n\t\t\t.filter(isDefined)\n\t\t\t.filter((exclude) =>\n\t\t\t\tincludeTests.some(\n\t\t\t\t\t(include) =>\n\t\t\t\t\t\tinclude.fullId.compare(exclude.fullId) ===\n\t\t\t\t\t\tTestPosition.IsChild,\n\t\t\t\t),\n\t\t\t);\n\n\t\tif (!includeTests.length) {\n\t\t\treturn {};\n\t\t}\n\n\t\tconst publicReq = new TestRunRequest(\n\t\t\tincludeTests.some((i) => i.actual instanceof TestItemRootImpl)\n\t\t\t\t? undefined\n\t\t\t\t: includeTests.map((t) => t.actual),\n\t\t\texcludeTests.map((t) => t.actual),\n\t\t\tprofile,\n\t\t\tisContinuous,\n\t\t);\n\n\t\tconst tracker =\n\t\t\tisStartControllerTests(req) &&\n\t\t\tthis.runTracker.prepareForMainThreadTestRun(\n\t\t\t\textension,\n\t\t\t\tpublicReq,\n\t\t\t\tTestRunDto.fromInternal(req, lookup.collection),\n\t\t\t\tprofile,\n\t\t\t\ttoken,\n\t\t\t);\n\n\t\ttry {\n\t\t\tawait profile.runHandler(publicReq, token);\n\t\t\treturn {};\n\t\t} catch (e) {\n\t\t\treturn { error: String(e) };\n\t\t} finally {\n\t\t\tif (tracker) {\n\t\t\t\tif (tracker.hasRunningTasks && !token.isCancellationRequested) {\n\t\t\t\t\tawait Event.toPromise(tracker.onEnd);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n// Deadline after being requested by a user that a test run is forcibly cancelled.\nconst RUN_CANCEL_DEADLINE = 10_000;\n\nenum TestRunTrackerState {\n\t// Default state\n\tRunning = 0,\n\t// Cancellation is requested, but the run is still going.\n\tCancelling = 1,\n\t// All tasks have ended\n\tEnded = 2,\n}\n\nclass TestRunTracker extends Disposable {\n\tprivate state = TestRunTrackerState.Running;\n\tprivate running = 0;\n\tprivate readonly tasks = new Map<\n\t\t/* task ID */ string,\n\t\t{ cts: CancellationTokenSource; run: vscode.TestRun }\n\t>();\n\tprivate readonly sharedTestIds = new Set<string>();\n\tprivate readonly cts: CancellationTokenSource;\n\tprivate readonly endEmitter = this._register(new Emitter<void>());\n\tprivate readonly onDidDispose: Event<void>;\n\tprivate readonly publishedCoverage = new Map<\n\t\tstring,\n\t\t{ report: vscode.FileCoverage; extIds: string[] }\n\t>();\n\n\t/**\n\t * Fires when a test ends, and no more tests are left running.\n\t */\n\tpublic readonly onEnd = this.endEmitter.event;\n\n\t/**\n\t * Gets whether there are any tests running.\n\t */\n\tpublic get hasRunningTasks() {\n\t\treturn this.running > 0;\n\t}\n\n\t/**\n\t * Gets the run ID.\n\t */\n\tpublic get id() {\n\t\treturn this.dto.id;\n\t}\n\n\tconstructor(\n\t\tprivate readonly dto: TestRunDto,\n\t\tprivate readonly proxy: MainThreadTestingShape,\n\t\tprivate readonly logService: ILogService,\n\t\tprivate readonly profile: vscode.TestRunProfile | undefined,\n\t\tprivate readonly extension: IExtensionDescription,\n\t\tparentToken?: CancellationToken,\n\t) {\n\t\tsuper();\n\t\tthis.cts = this._register(new CancellationTokenSource(parentToken));\n\n\t\tconst forciblyEnd = this._register(\n\t\t\tnew RunOnceScheduler(\n\t\t\t\t() => this.forciblyEndTasks(),\n\t\t\t\tRUN_CANCEL_DEADLINE,\n\t\t\t),\n\t\t);\n\t\tthis._register(\n\t\t\tthis.cts.token.onCancellationRequested(() =>\n\t\t\t\tforciblyEnd.schedule(),\n\t\t\t),\n\t\t);\n\n\t\tconst didDisposeEmitter = new Emitter<void>();\n\t\tthis.onDidDispose = didDisposeEmitter.event;\n\t\tthis._register(\n\t\t\ttoDisposable(() => {\n\t\t\t\tdidDisposeEmitter.fire();\n\t\t\t\tdidDisposeEmitter.dispose();\n\t\t\t}),\n\t\t);\n\t}\n\n\t/** Gets the task ID from a test run object. */\n\tpublic getTaskIdForRun(run: vscode.TestRun) {\n\t\tfor (const [taskId, { run: r }] of this.tasks) {\n\t\t\tif (r === run) {\n\t\t\t\treturn taskId;\n\t\t\t}\n\t\t}\n\n\t\treturn undefined;\n\t}\n\n\t/** Requests cancellation of the run. On the second call, forces cancellation. */\n\tpublic cancel(taskId?: string) {\n\t\tif (taskId) {\n\t\t\tthis.tasks.get(taskId)?.cts.cancel();\n\t\t} else if (this.state === TestRunTrackerState.Running) {\n\t\t\tthis.cts.cancel();\n\t\t\tthis.state = TestRunTrackerState.Cancelling;\n\t\t} else if (this.state === TestRunTrackerState.Cancelling) {\n\t\t\tthis.forciblyEndTasks();\n\t\t}\n\t}\n\n\t/** Gets details for a previously-emitted coverage object. */\n\tpublic async getCoverageDetails(\n\t\tid: string,\n\t\ttestId: string | undefined,\n\t\ttoken: CancellationToken,\n\t): Promise<vscode.FileCoverageDetail[]> {\n\t\tconst [, taskId] = TestId.fromString(id).path; /** runId, taskId, URI */\n\t\tconst coverage = this.publishedCoverage.get(id);\n\t\tif (!coverage) {\n\t\t\treturn [];\n\t\t}\n\n\t\tconst { report, extIds } = coverage;\n\t\tconst task = this.tasks.get(taskId);\n\t\tif (!task) {\n\t\t\tthrow new Error(\"unreachable: run task was not found\");\n\t\t}\n\n\t\tlet testItem: vscode.TestItem | undefined;\n\t\tif (testId && report instanceof FileCoverage) {\n\t\t\tconst index = extIds.indexOf(testId);\n\t\t\tif (index === -1) {\n\t\t\t\treturn []; // ??\n\t\t\t}\n\t\t\ttestItem = report.fromTests[index];\n\t\t}\n\n\t\tconst details = testItem\n\t\t\t? this.profile?.loadDetailedCoverageForTest?.(\n\t\t\t\t\ttask.run,\n\t\t\t\t\treport,\n\t\t\t\t\ttestItem,\n\t\t\t\t\ttoken,\n\t\t\t\t)\n\t\t\t: this.profile?.loadDetailedCoverage?.(task.run, report, token);\n\n\t\treturn (await details) ?? [];\n\t}\n\n\t/** Creates the public test run interface to give to extensions. */\n\tpublic createRun(name: string | undefined): vscode.TestRun {\n\t\tconst runId = this.dto.id;\n\t\tconst ctrlId = this.dto.controllerId;\n\t\tconst taskId = generateUuid();\n\n\t\tconst guardTestMutation =\n\t\t\t<Args extends unknown[]>(\n\t\t\t\tfn: (test: vscode.TestItem, ...args: Args) => void,\n\t\t\t) =>\n\t\t\t(test: vscode.TestItem, ...args: Args) => {\n\t\t\t\tif (ended) {\n\t\t\t\t\tthis.logService.warn(\n\t\t\t\t\t\t`Setting the state of test \"${test.id}\" is a no-op after the run ends.`,\n\t\t\t\t\t);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tthis.ensureTestIsKnown(test);\n\t\t\t\tfn(test, ...args);\n\t\t\t};\n\n\t\tconst appendMessages = (\n\t\t\ttest: vscode.TestItem,\n\t\t\tmessages: vscode.TestMessage | readonly vscode.TestMessage[],\n\t\t) => {\n\t\t\tconst converted =\n\t\t\t\tmessages instanceof Array\n\t\t\t\t\t? messages.map(Convert.TestMessage.from)\n\t\t\t\t\t: [Convert.TestMessage.from(messages)];\n\n\t\t\tif (test.uri && test.range) {\n\t\t\t\tconst defaultLocation: ILocationDto = {\n\t\t\t\t\trange: Convert.Range.from(test.range),\n\t\t\t\t\turi: test.uri,\n\t\t\t\t};\n\t\t\t\tfor (const message of converted) {\n\t\t\t\t\tmessage.location = message.location || defaultLocation;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.proxy.$appendTestMessagesInRun(\n\t\t\t\trunId,\n\t\t\t\ttaskId,\n\t\t\t\tTestId.fromExtHostTestItem(test, ctrlId).toString(),\n\t\t\t\tconverted,\n\t\t\t);\n\t\t};\n\n\t\tlet ended = false;\n\t\t// tasks are alive for as long as the tracker is alive, so simple this._register is fine:\n\t\tconst cts = this._register(new CancellationTokenSource(this.cts.token));\n\n\t\t// one-off map used to associate test items with incrementing IDs in `addCoverage`.\n\t\t// There's no need to include their entire ID, we just want to make sure they're\n\t\t// stable and unique. Normal map is okay since TestRun lifetimes are limited.\n\t\tconst run: vscode.TestRun = {\n\t\t\tisPersisted: this.dto.isPersisted,\n\t\t\ttoken: cts.token,\n\t\t\tname,\n\t\t\tonDidDispose: this.onDidDispose,\n\t\t\taddCoverage: (coverage) => {\n\t\t\t\tif (ended) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst fromTests =\n\t\t\t\t\tcoverage instanceof FileCoverage ? coverage.fromTests : [];\n\t\t\t\tif (fromTests.length) {\n\t\t\t\t\tcheckProposedApiEnabled(\n\t\t\t\t\t\tthis.extension,\n\t\t\t\t\t\t\"attributableCoverage\",\n\t\t\t\t\t);\n\t\t\t\t\tfor (const test of fromTests) {\n\t\t\t\t\t\tthis.ensureTestIsKnown(test);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tconst uriStr = coverage.uri.toString();\n\t\t\t\tconst id = new TestId([runId, taskId, uriStr]).toString();\n\t\t\t\t// it's a lil funky, but it's possible for a test item's ID to change after\n\t\t\t\t// it's been reported if it's rehomed under a different parent. Record its\n\t\t\t\t// ID at the time when the coverage report is generated so we can reference\n\t\t\t\t// it later if needeed.\n\t\t\t\tthis.publishedCoverage.set(id, {\n\t\t\t\t\treport: coverage,\n\t\t\t\t\textIds: fromTests.map((t) =>\n\t\t\t\t\t\tTestId.fromExtHostTestItem(t, ctrlId).toString(),\n\t\t\t\t\t),\n\t\t\t\t});\n\t\t\t\tthis.proxy.$appendCoverage(\n\t\t\t\t\trunId,\n\t\t\t\t\ttaskId,\n\t\t\t\t\tConvert.TestCoverage.fromFile(ctrlId, id, coverage),\n\t\t\t\t);\n\t\t\t},\n\t\t\t//#region state mutation\n\t\t\tenqueued: guardTestMutation((test) => {\n\t\t\t\tthis.proxy.$updateTestStateInRun(\n\t\t\t\t\trunId,\n\t\t\t\t\ttaskId,\n\t\t\t\t\tTestId.fromExtHostTestItem(test, ctrlId).toString(),\n\t\t\t\t\tTestResultState.Queued,\n\t\t\t\t);\n\t\t\t}),\n\t\t\tskipped: guardTestMutation((test) => {\n\t\t\t\tthis.proxy.$updateTestStateInRun(\n\t\t\t\t\trunId,\n\t\t\t\t\ttaskId,\n\t\t\t\t\tTestId.fromExtHostTestItem(test, ctrlId).toString(),\n\t\t\t\t\tTestResultState.Skipped,\n\t\t\t\t);\n\t\t\t}),\n\t\t\tstarted: guardTestMutation((test) => {\n\t\t\t\tthis.proxy.$updateTestStateInRun(\n\t\t\t\t\trunId,\n\t\t\t\t\ttaskId,\n\t\t\t\t\tTestId.fromExtHostTestItem(test, ctrlId).toString(),\n\t\t\t\t\tTestResultState.Running,\n\t\t\t\t);\n\t\t\t}),\n\t\t\terrored: guardTestMutation((test, messages, duration) => {\n\t\t\t\tappendMessages(test, messages);\n\t\t\t\tthis.proxy.$updateTestStateInRun(\n\t\t\t\t\trunId,\n\t\t\t\t\ttaskId,\n\t\t\t\t\tTestId.fromExtHostTestItem(test, ctrlId).toString(),\n\t\t\t\t\tTestResultState.Errored,\n\t\t\t\t\tduration,\n\t\t\t\t);\n\t\t\t}),\n\t\t\tfailed: guardTestMutation((test, messages, duration) => {\n\t\t\t\tappendMessages(test, messages);\n\t\t\t\tthis.proxy.$updateTestStateInRun(\n\t\t\t\t\trunId,\n\t\t\t\t\ttaskId,\n\t\t\t\t\tTestId.fromExtHostTestItem(test, ctrlId).toString(),\n\t\t\t\t\tTestResultState.Failed,\n\t\t\t\t\tduration,\n\t\t\t\t);\n\t\t\t}),\n\t\t\tpassed: guardTestMutation((test, duration) => {\n\t\t\t\tthis.proxy.$updateTestStateInRun(\n\t\t\t\t\trunId,\n\t\t\t\t\ttaskId,\n\t\t\t\t\tTestId.fromExtHostTestItem(\n\t\t\t\t\t\ttest,\n\t\t\t\t\t\tthis.dto.controllerId,\n\t\t\t\t\t).toString(),\n\t\t\t\t\tTestResultState.Passed,\n\t\t\t\t\tduration,\n\t\t\t\t);\n\t\t\t}),\n\t\t\t//#endregion\n\t\t\tappendOutput: (\n\t\t\t\toutput,\n\t\t\t\tlocation?: vscode.Location,\n\t\t\t\ttest?: vscode.TestItem,\n\t\t\t) => {\n\t\t\t\tif (ended) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (test) {\n\t\t\t\t\tthis.ensureTestIsKnown(test);\n\t\t\t\t}\n\n\t\t\t\tthis.proxy.$appendOutputToRun(\n\t\t\t\t\trunId,\n\t\t\t\t\ttaskId,\n\t\t\t\t\tVSBuffer.fromString(output),\n\t\t\t\t\tlocation && Convert.location.from(location),\n\t\t\t\t\ttest && TestId.fromExtHostTestItem(test, ctrlId).toString(),\n\t\t\t\t);\n\t\t\t},\n\t\t\tend: () => {\n\t\t\t\tif (ended) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tended = true;\n\t\t\t\tthis.proxy.$finishedTestRunTask(runId, taskId);\n\t\t\t\tif (!--this.running) {\n\t\t\t\t\tthis.markEnded();\n\t\t\t\t}\n\t\t\t},\n\t\t};\n\n\t\tthis.running++;\n\t\tthis.tasks.set(taskId, { run, cts });\n\t\tthis.proxy.$startedTestRunTask(runId, {\n\t\t\tid: taskId,\n\t\t\tctrlId: this.dto.controllerId,\n\t\t\tname:\n\t\t\t\tname ||\n\t\t\t\tthis.extension.displayName ||\n\t\t\t\tthis.extension.identifier.value,\n\t\t\trunning: true,\n\t\t});\n\n\t\treturn run;\n\t}\n\n\tprivate forciblyEndTasks() {\n\t\tfor (const { run } of this.tasks.values()) {\n\t\t\trun.end();\n\t\t}\n\t}\n\n\tprivate markEnded() {\n\t\tif (this.state !== TestRunTrackerState.Ended) {\n\t\t\tthis.state = TestRunTrackerState.Ended;\n\t\t\tthis.endEmitter.fire();\n\t\t}\n\t}\n\n\tprivate ensureTestIsKnown(test: vscode.TestItem) {\n\t\tif (!(test instanceof TestItemImpl)) {\n\t\t\tthrow new InvalidTestItemError(test.id);\n\t\t}\n\n\t\tif (\n\t\t\tthis.sharedTestIds.has(\n\t\t\t\tTestId.fromExtHostTestItem(\n\t\t\t\t\ttest,\n\t\t\t\t\tthis.dto.controllerId,\n\t\t\t\t).toString(),\n\t\t\t)\n\t\t) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst chain: ITestItem.Serialized[] = [];\n\t\tconst root = this.dto.colllection.root;\n\t\twhile (true) {\n\t\t\tconst converted = Convert.TestItem.from(test as TestItemImpl);\n\t\t\tchain.unshift(converted);\n\n\t\t\tif (this.sharedTestIds.has(converted.extId)) {\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tthis.sharedTestIds.add(converted.extId);\n\t\t\tif (test === root) {\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\ttest = test.parent || root;\n\t\t}\n\n\t\tthis.proxy.$addTestsToRun(this.dto.controllerId, this.dto.id, chain);\n\t}\n\n\tpublic override dispose(): void {\n\t\tthis.markEnded();\n\t\tsuper.dispose();\n\t}\n}\n\n/**\n * Queues runs for a single extension and provides the currently-executing\n * run so that `createTestRun` can be properly correlated.\n */\nexport class TestRunCoordinator {\n\tprivate readonly tracked = new Map<vscode.TestRunRequest, TestRunTracker>();\n\tprivate readonly trackedById = new Map<string, TestRunTracker>();\n\n\tpublic get trackers() {\n\t\treturn this.tracked.values();\n\t}\n\n\tconstructor(\n\t\tprivate readonly proxy: MainThreadTestingShape,\n\t\tprivate readonly logService: ILogService,\n\t) {}\n\n\t/**\n\t * Gets a coverage report for a given run and task ID.\n\t */\n\tpublic getCoverageDetails(\n\t\tid: string,\n\t\ttestId: string | undefined,\n\t\ttoken: vscode.CancellationToken,\n\t) {\n\t\tconst runId = TestId.root(id);\n\t\treturn (\n\t\t\tthis.trackedById\n\t\t\t\t.get(runId)\n\t\t\t\t?.getCoverageDetails(id, testId, token) || []\n\t\t);\n\t}\n\n\t/**\n\t * Disposes the test run, called when the main thread is no longer interested\n\t * in associated data.\n\t */\n\tpublic disposeTestRun(runId: string) {\n\t\tthis.trackedById.get(runId)?.dispose();\n\t\tthis.trackedById.delete(runId);\n\t\tfor (const [req, { id }] of this.tracked) {\n\t\t\tif (id === runId) {\n\t\t\t\tthis.tracked.delete(req);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Registers a request as being invoked by the main thread, so\n\t * `$startedExtensionTestRun` is not invoked. The run must eventually\n\t * be cancelled manually.\n\t */\n\tpublic prepareForMainThreadTestRun(\n\t\textension: IExtensionDescription,\n\t\treq: vscode.TestRunRequest,\n\t\tdto: TestRunDto,\n\t\tprofile: vscode.TestRunProfile,\n\t\ttoken: CancellationToken,\n\t) {\n\t\treturn this.getTracker(req, dto, profile, extension, token);\n\t}\n\n\t/**\n\t * Cancels an existing test run via its cancellation token.\n\t */\n\tpublic cancelRunById(runId: string, taskId?: string) {\n\t\tthis.trackedById.get(runId)?.cancel(taskId);\n\t}\n\n\t/**\n\t * Cancels an existing test run via its cancellation token.\n\t */\n\tpublic cancelAllRuns() {\n\t\tfor (const tracker of this.tracked.values()) {\n\t\t\ttracker.cancel();\n\t\t}\n\t}\n\n\t/**\n\t * Implements the public `createTestRun` API.\n\t */\n\tpublic createTestRun(\n\t\textension: IExtensionDescription,\n\t\tcontrollerId: string,\n\t\tcollection: ExtHostTestItemCollection,\n\t\trequest: vscode.TestRunRequest,\n\t\tname: string | undefined,\n\t\tpersist: boolean,\n\t): vscode.TestRun {\n\t\tconst existing = this.tracked.get(request);\n\t\tif (existing) {\n\t\t\treturn existing.createRun(name);\n\t\t}\n\n\t\t// If there is not an existing tracked extension for the request, start\n\t\t// a new, detached session.\n\t\tconst dto = TestRunDto.fromPublic(\n\t\t\tcontrollerId,\n\t\t\tcollection,\n\t\t\trequest,\n\t\t\tpersist,\n\t\t);\n\t\tconst profile = tryGetProfileFromTestRunReq(request);\n\t\tthis.proxy.$startedExtensionTestRun({\n\t\t\tcontrollerId,\n\t\t\tcontinuous: !!request.continuous,\n\t\t\tprofile: profile && {\n\t\t\t\tgroup: profileGroupToBitset[profile.kind],\n\t\t\t\tid: profile.profileId,\n\t\t\t},\n\t\t\texclude:\n\t\t\t\trequest.exclude?.map((t) =>\n\t\t\t\t\tTestId.fromExtHostTestItem(\n\t\t\t\t\t\tt,\n\t\t\t\t\t\tcollection.root.id,\n\t\t\t\t\t).toString(),\n\t\t\t\t) ?? [],\n\t\t\tid: dto.id,\n\t\t\tinclude: request.include?.map((t) =>\n\t\t\t\tTestId.fromExtHostTestItem(t, collection.root.id).toString(),\n\t\t\t) ?? [collection.root.id],\n\t\t\tpreserveFocus: request.preserveFocus ?? true,\n\t\t\tpersist,\n\t\t});\n\n\t\tconst tracker = this.getTracker(\n\t\t\trequest,\n\t\t\tdto,\n\t\t\trequest.profile,\n\t\t\textension,\n\t\t);\n\t\tEvent.once(tracker.onEnd)(() => {\n\t\t\tthis.proxy.$finishedExtensionTestRun(dto.id);\n\t\t});\n\n\t\treturn tracker.createRun(name);\n\t}\n\n\tprivate getTracker(\n\t\treq: vscode.TestRunRequest,\n\t\tdto: TestRunDto,\n\t\tprofile: vscode.TestRunProfile | undefined,\n\t\textension: IExtensionDescription,\n\t\ttoken?: CancellationToken,\n\t) {\n\t\tconst tracker = new TestRunTracker(\n\t\t\tdto,\n\t\t\tthis.proxy,\n\t\t\tthis.logService,\n\t\t\tprofile,\n\t\t\textension,\n\t\t\ttoken,\n\t\t);\n\t\tthis.tracked.set(req, tracker);\n\t\tthis.trackedById.set(tracker.id, tracker);\n\t\treturn tracker;\n\t}\n}\n\nconst tryGetProfileFromTestRunReq = (request: vscode.TestRunRequest) => {\n\tif (!request.profile) {\n\t\treturn undefined;\n\t}\n\n\tif (!(request.profile instanceof TestRunProfileImpl)) {\n\t\tthrow new Error(\n\t\t\t`TestRunRequest.profile is not an instance created from TestController.createRunProfile`,\n\t\t);\n\t}\n\n\treturn request.profile;\n};\n\nexport class TestRunDto {\n\tpublic static fromPublic(\n\t\tcontrollerId: string,\n\t\tcollection: ExtHostTestItemCollection,\n\t\trequest: vscode.TestRunRequest,\n\t\tpersist: boolean,\n\t) {\n\t\treturn new TestRunDto(\n\t\t\tcontrollerId,\n\t\t\tgenerateUuid(),\n\t\t\tpersist,\n\t\t\tcollection,\n\t\t);\n\t}\n\n\tpublic static fromInternal(\n\t\trequest: IStartControllerTests,\n\t\tcollection: ExtHostTestItemCollection,\n\t) {\n\t\treturn new TestRunDto(\n\t\t\trequest.controllerId,\n\t\t\trequest.runId,\n\t\t\ttrue,\n\t\t\tcollection,\n\t\t);\n\t}\n\n\tconstructor(\n\t\tpublic readonly controllerId: string,\n\t\tpublic readonly id: string,\n\t\tpublic readonly isPersisted: boolean,\n\t\tpublic readonly colllection: ExtHostTestItemCollection,\n\t) {}\n}\n\n/**\n * @private\n */\ninterface MirroredCollectionTestItem extends IncrementalTestCollectionItem {\n\trevived: vscode.TestItem;\n\tdepth: number;\n}\n\nclass MirroredChangeCollector\n\timplements IncrementalChangeCollector<MirroredCollectionTestItem>\n{\n\tprivate readonly added = new Set<MirroredCollectionTestItem>();\n\tprivate readonly updated = new Set<MirroredCollectionTestItem>();\n\tprivate readonly removed = new Set<MirroredCollectionTestItem>();\n\n\tprivate readonly alreadyRemoved = new Set<string>();\n\n\tpublic get isEmpty() {\n\t\treturn (\n\t\t\tthis.added.size === 0 &&\n\t\t\tthis.removed.size === 0 &&\n\t\t\tthis.updated.size === 0\n\t\t);\n\t}\n\n\tconstructor(private readonly emitter: Emitter<vscode.TestsChangeEvent>) {}\n\n\t/**\n\t * @inheritdoc\n\t */\n\tpublic add(node: MirroredCollectionTestItem): void {\n\t\tthis.added.add(node);\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\tpublic update(node: MirroredCollectionTestItem): void {\n\t\tObject.assign(node.revived, Convert.TestItem.toPlain(node.item));\n\t\tif (!this.added.has(node)) {\n\t\t\tthis.updated.add(node);\n\t\t}\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\tpublic remove(node: MirroredCollectionTestItem): void {\n\t\tif (this.added.has(node)) {\n\t\t\tthis.added.delete(node);\n\t\t\treturn;\n\t\t}\n\n\t\tthis.updated.delete(node);\n\n\t\tconst parentId = TestId.parentId(node.item.extId);\n\t\tif (parentId && this.alreadyRemoved.has(parentId.toString())) {\n\t\t\tthis.alreadyRemoved.add(node.item.extId);\n\t\t\treturn;\n\t\t}\n\n\t\tthis.removed.add(node);\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\tpublic getChangeEvent(): vscode.TestsChangeEvent {\n\t\tconst { added, updated, removed } = this;\n\t\treturn {\n\t\t\tget added() {\n\t\t\t\treturn [...added].map((n) => n.revived);\n\t\t\t},\n\t\t\tget updated() {\n\t\t\t\treturn [...updated].map((n) => n.revived);\n\t\t\t},\n\t\t\tget removed() {\n\t\t\t\treturn [...removed].map((n) => n.revived);\n\t\t\t},\n\t\t};\n\t}\n\n\tpublic complete() {\n\t\tif (!this.isEmpty) {\n\t\t\tthis.emitter.fire(this.getChangeEvent());\n\t\t}\n\t}\n}\n\n/**\n * Maintains tests in this extension host sent from the main thread.\n * @private\n */\nclass MirroredTestCollection extends AbstractIncrementalTestCollection<MirroredCollectionTestItem> {\n\tprivate changeEmitter = new Emitter<vscode.TestsChangeEvent>();\n\n\t/**\n\t * Change emitter that fires with the same semantics as `TestObserver.onDidChangeTests`.\n\t */\n\tpublic readonly onDidChangeTests = this.changeEmitter.event;\n\n\t/**\n\t * Gets a list of root test items.\n\t */\n\tpublic get rootTests() {\n\t\treturn this.roots;\n\t}\n\n\t/**\n\t *\n\t * If the test ID exists, returns its underlying ID.\n\t */\n\tpublic getMirroredTestDataById(itemId: string) {\n\t\treturn this.items.get(itemId);\n\t}\n\n\t/**\n\t * If the test item is a mirrored test item, returns its underlying ID.\n\t */\n\tpublic getMirroredTestDataByReference(item: vscode.TestItem) {\n\t\treturn this.items.get(item.id);\n\t}\n\n\t/**\n\t * @override\n\t */\n\tprotected createItem(\n\t\titem: InternalTestItem,\n\t\tparent?: MirroredCollectionTestItem,\n\t): MirroredCollectionTestItem {\n\t\treturn {\n\t\t\t...item,\n\t\t\t// todo@connor4312: make this work well again with children\n\t\t\trevived: Convert.TestItem.toPlain(item.item) as vscode.TestItem,\n\t\t\tdepth: parent ? parent.depth + 1 : 0,\n\t\t\tchildren: new Set(),\n\t\t};\n\t}\n\n\t/**\n\t * @override\n\t */\n\tprotected override createChangeCollector() {\n\t\treturn new MirroredChangeCollector(this.changeEmitter);\n\t}\n}\n\nclass TestObservers {\n\tprivate current?: {\n\t\tobservers: number;\n\t\ttests: MirroredTestCollection;\n\t};\n\n\tconstructor(private readonly proxy: MainThreadTestingShape) {}\n\n\tpublic checkout(): vscode.TestObserver {\n\t\tif (!this.current) {\n\t\t\tthis.current = this.createObserverData();\n\t\t}\n\n\t\tconst current = this.current;\n\t\tcurrent.observers++;\n\n\t\treturn {\n\t\t\tonDidChangeTest: current.tests.onDidChangeTests,\n\t\t\tget tests() {\n\t\t\t\treturn [...current.tests.rootTests].map((t) => t.revived);\n\t\t\t},\n\t\t\tdispose: createSingleCallFunction(() => {\n\t\t\t\tif (--current.observers === 0) {\n\t\t\t\t\tthis.proxy.$unsubscribeFromDiffs();\n\t\t\t\t\tthis.current = undefined;\n\t\t\t\t}\n\t\t\t}),\n\t\t};\n\t}\n\n\t/**\n\t * Gets the internal test data by its reference.\n\t */\n\tpublic getMirroredTestDataByReference(ref: vscode.TestItem) {\n\t\treturn this.current?.tests.getMirroredTestDataByReference(ref);\n\t}\n\n\t/**\n\t * Applies test diffs to the current set of observed tests.\n\t */\n\tpublic applyDiff(diff: TestsDiff) {\n\t\tthis.current?.tests.apply(diff);\n\t}\n\n\tprivate createObserverData() {\n\t\tconst tests = new MirroredTestCollection({ asCanonicalUri: (u) => u });\n\t\tthis.proxy.$subscribeToDiffs();\n\t\treturn { observers: 0, tests };\n\t}\n}\n\nconst updateProfile = (\n\timpl: TestRunProfileImpl,\n\tproxy: MainThreadTestingShape,\n\tinitial: ITestRunProfile | undefined,\n\tupdate: Partial<ITestRunProfile>,\n) => {\n\tif (initial) {\n\t\tObject.assign(initial, update);\n\t} else {\n\t\tproxy.$updateTestRunConfig(impl.controllerId, impl.profileId, update);\n\t}\n};\n\nexport class TestRunProfileImpl implements vscode.TestRunProfile {\n\treadonly #proxy: MainThreadTestingShape;\n\treadonly #activeProfiles: Set<number>;\n\treadonly #onDidChangeDefaultProfiles: Event<DefaultProfileChangeEvent>;\n\t#initialPublish?: ITestRunProfile;\n\t#profiles?: Map<number, vscode.TestRunProfile>;\n\tprivate _configureHandler?: () => void;\n\n\tpublic get label() {\n\t\treturn this._label;\n\t}\n\n\tpublic set label(label: string) {\n\t\tif (label !== this._label) {\n\t\t\tthis._label = label;\n\t\t\tupdateProfile(this, this.#proxy, this.#initialPublish, { label });\n\t\t}\n\t}\n\n\tpublic get supportsContinuousRun() {\n\t\treturn this._supportsContinuousRun;\n\t}\n\n\tpublic set supportsContinuousRun(supports: boolean) {\n\t\tif (supports !== this._supportsContinuousRun) {\n\t\t\tthis._supportsContinuousRun = supports;\n\t\t\tupdateProfile(this, this.#proxy, this.#initialPublish, {\n\t\t\t\tsupportsContinuousRun: supports,\n\t\t\t});\n\t\t}\n\t}\n\n\tpublic get isDefault() {\n\t\treturn this.#activeProfiles.has(this.profileId);\n\t}\n\n\tpublic set isDefault(isDefault: boolean) {\n\t\tif (isDefault !== this.isDefault) {\n\t\t\t// #activeProfiles is synced from the main thread, so we can make\n\t\t\t// provisional changes here that will get confirmed momentarily\n\t\t\tif (isDefault) {\n\t\t\t\tthis.#activeProfiles.add(this.profileId);\n\t\t\t} else {\n\t\t\t\tthis.#activeProfiles.delete(this.profileId);\n\t\t\t}\n\n\t\t\tupdateProfile(this, this.#proxy, this.#initialPublish, {\n\t\t\t\tisDefault,\n\t\t\t});\n\t\t}\n\t}\n\n\tpublic get tag() {\n\t\treturn this._tag;\n\t}\n\n\tpublic set tag(tag: vscode.TestTag | undefined) {\n\t\tif (tag?.id !== this._tag?.id) {\n\t\t\tthis._tag = tag;\n\t\t\tupdateProfile(this, this.#proxy, this.#initialPublish, {\n\t\t\t\ttag: tag\n\t\t\t\t\t? Convert.TestTag.namespace(this.controllerId, tag.id)\n\t\t\t\t\t: null,\n\t\t\t});\n\t\t}\n\t}\n\n\tpublic get configureHandler() {\n\t\treturn this._configureHandler;\n\t}\n\n\tpublic set configureHandler(handler: undefined | (() => void)) {\n\t\tif (handler !== this._configureHandler) {\n\t\t\tthis._configureHandler = handler;\n\t\t\tupdateProfile(this, this.#proxy, this.#initialPublish, {\n\t\t\t\thasConfigurationHandler: !!handler,\n\t\t\t});\n\t\t}\n\t}\n\n\tpublic get onDidChangeDefault() {\n\t\treturn Event.chain(this.#onDidChangeDefaultProfiles, ($) =>\n\t\t\t$.map((ev) =>\n\t\t\t\tev.get(this.controllerId)?.get(this.profileId),\n\t\t\t).filter(isDefined),\n\t\t);\n\t}\n\n\tconstructor(\n\t\tproxy: MainThreadTestingShape,\n\t\tprofiles: Map<number, vscode.TestRunProfile>,\n\t\tactiveProfiles: Set<number>,\n\t\tonDidChangeActiveProfiles: Event<DefaultProfileChangeEvent>,\n\t\tpublic readonly controllerId: string,\n\t\tpublic readonly profileId: number,\n\t\tprivate _label: string,\n\t\tpublic readonly kind: vscode.TestRunProfileKind,\n\t\tpublic runHandler: (\n\t\t\trequest: vscode.TestRunRequest,\n\t\t\ttoken: vscode.CancellationToken,\n\t\t) => Thenable<void> | void,\n\t\t_isDefault = false,\n\t\tpublic _tag: vscode.TestTag | undefined = undefined,\n\t\tprivate _supportsContinuousRun = false,\n\t) {\n\t\tthis.#proxy = proxy;\n\t\tthis.#profiles = profiles;\n\t\tthis.#activeProfiles = activeProfiles;\n\t\tthis.#onDidChangeDefaultProfiles = onDidChangeActiveProfiles;\n\t\tprofiles.set(profileId, this);\n\n\t\tconst groupBitset = profileGroupToBitset[kind];\n\t\tif (typeof groupBitset !== \"number\") {\n\t\t\tthrow new Error(`Unknown TestRunProfile.group ${kind}`);\n\t\t}\n\n\t\tif (_isDefault) {\n\t\t\tactiveProfiles.add(profileId);\n\t\t}\n\n\t\tthis.#initialPublish = {\n\t\t\tprofileId: profileId,\n\t\t\tcontrollerId,\n\t\t\ttag: _tag\n\t\t\t\t? Convert.TestTag.namespace(this.controllerId, _tag.id)\n\t\t\t\t: null,\n\t\t\tlabel: _label,\n\t\t\tgroup: groupBitset,\n\t\t\tisDefault: _isDefault,\n\t\t\thasConfigurationHandler: false,\n\t\t\tsupportsContinuousRun: _supportsContinuousRun,\n\t\t};\n\n\t\t// we send the initial profile publish out on the next microtask so that\n\t\t// initially setting the isDefault value doesn't overwrite a user-configured value\n\t\tqueueMicrotask(() => {\n\t\t\tif (this.#initialPublish) {\n\t\t\t\tthis.#proxy.$publishTestRunProfile(this.#initialPublish);\n\t\t\t\tthis.#initialPublish = undefined;\n\t\t\t}\n\t\t});\n\t}\n\n\tdispose(): void {\n\t\tif (this.#profiles?.delete(this.profileId)) {\n\t\t\tthis.#profiles = undefined;\n\t\t\tthis.#proxy.$removeTestProfile(this.controllerId, this.profileId);\n\t\t}\n\t\tthis.#initialPublish = undefined;\n\t}\n}\n\nconst profileGroupToBitset: {\n\t[K in TestRunProfileKind]: TestRunProfileBitset;\n} = {\n\t[TestRunProfileKind.Coverage]: TestRunProfileBitset.Coverage,\n\t[TestRunProfileKind.Debug]: TestRunProfileBitset.Debug,\n\t[TestRunProfileKind.Run]: TestRunProfileBitset.Run,\n};\n\nfunction findTestInResultSnapshot(\n\textId: TestId,\n\tsnapshot: readonly Readonly<vscode.TestResultSnapshot>[],\n) {\n\tfor (let i = 0; i < extId.path.length; i++) {\n\t\tconst item = snapshot.find((s) => s.id === extId.path[i]);\n\t\tif (!item) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\tif (i === extId.path.length - 1) {\n\t\t\treturn item;\n\t\t}\n\n\t\tsnapshot = item.children;\n\t}\n\n\treturn undefined;\n}\n"],
  "mappings": "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",
  "names": ["label", "r", "TestRunTrackerState"]
}
