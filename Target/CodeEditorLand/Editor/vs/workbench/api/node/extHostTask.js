var y=Object.defineProperty;var E=Object.getOwnPropertyDescriptor;var x=(d,p,r,e)=>{for(var t=e>1?void 0:e?E(p,r):p,s=d.length-1,o;s>=0;s--)(o=d[s])&&(t=(e?o(p,r,t):o(t))||t);return e&&t&&y(p,r,t),t},a=(d,p)=>(r,e)=>p(r,e,d);import*as w from"../../../base/common/path.js";import{homedir as I}from"os";import{Schemas as f}from"../../../base/common/network.js";import*as g from"../../../base/common/resources.js";import{URI as k}from"../../../base/common/uri.js";import{win32 as h}from"../../../base/node/processes.js";import{ILogService as b}from"../../../platform/log/common/log.js";import{WorkspaceFolder as D}from"../../../platform/workspace/common/workspace.js";import{IExtHostApiDeprecationService as H}from"../common/extHostApiDeprecationService.js";import{IExtHostConfiguration as S}from"../common/extHostConfiguration.js";import{IExtHostDocumentsAndEditors as O}from"../common/extHostDocumentsAndEditors.js";import{IExtHostInitDataService as P}from"../common/extHostInitDataService.js";import{IExtHostRpcService as A}from"../common/extHostRpcService.js";import{CustomExecutionDTO as v,ExtHostTaskBase as _,TaskDTO as T,TaskHandleDTO as $}from"../common/extHostTask.js";import{IExtHostTerminalService as F}from"../common/extHostTerminalService.js";import{IExtHostVariableResolverProvider as W}from"../common/extHostVariableResolverService.js";import{IExtHostWorkspace as R}from"../common/extHostWorkspace.js";let l=class extends _{constructor(r,e,t,s,o,i,n,m,c){super(r,e,t,s,o,i,n,m);this.workspaceService=t;this.variableResolver=c;e.remote.isRemote&&e.remote.authority?this.registerTaskSystem(f.vscodeRemote,{scheme:f.vscodeRemote,authority:e.remote.authority,platform:process.platform}):this.registerTaskSystem(f.file,{scheme:f.file,authority:"",platform:process.platform}),this._proxy.$registerSupportedExecutions(!0,!0,!0)}async executeTask(r,e){const t=e;if(!e.execution&&t._id===void 0)throw new Error("Tasks to execute must include an execution");if(t._id!==void 0){const s=$.from(t,this.workspaceService),o=await this._proxy.$getTaskExecution(s);if(o.task===void 0)throw new Error("Task from execution DTO is undefined");const i=await this.getTaskExecution(o,e);return this._proxy.$executeTask(s).catch(()=>{}),i}else{const s=T.from(e,r);if(s===void 0)return Promise.reject(new Error("Task is not valid"));v.is(s.execution)&&await this.addCustomExecution(s,e,!1);const o=await this.getTaskExecution(await this._proxy.$getTaskExecution(s),e);return this._proxy.$executeTask(s).catch(()=>{}),o}}provideTasksInternal(r,e,t,s){const o=[];if(s)for(const i of s){this.checkDeprecation(i,t),(!i.definition||!r[i.definition.type])&&this._logService.warn(`The task [${i.source}, ${i.name}] uses an undefined task type. The task will be ignored in the future.`);const n=T.from(i,t.extension);n&&(o.push(n),v.is(n.execution)&&e.push(this.addCustomExecution(n,i,!0)))}return{tasks:o,extension:t.extension}}async resolveTaskInternal(r){return r}async getAFolder(r){let e=r&&r.length>0?r[0]:void 0;if(!e){const t=k.file(I());e=new D({uri:t,name:g.basename(t),index:0})}return{uri:e.uri,name:e.name,index:e.index,toResource:()=>{throw new Error("Not implemented")}}}async $resolveVariables(r,e){const t=k.revive(r),s={process:void 0,variables:Object.create(null)},o=await this._workspaceProvider.resolveWorkspaceFolder(t),i=await this._workspaceProvider.getWorkspaceFolders2()??[],n=await this.variableResolver.getResolver(),m=o?{uri:o.uri,name:o.name,index:o.index,toResource:()=>{throw new Error("Not implemented")}}:await this.getAFolder(i);for(const c of e.variables)s.variables[c]=await n.resolveAsync(m,c);if(e.process!==void 0){let c;if(e.process.path!==void 0){c=e.process.path.split(w.delimiter);for(let u=0;u<c.length;u++)c[u]=await n.resolveAsync(m,c[u])}s.process=await h.findExecutable(await n.resolveAsync(m,e.process.name),e.process.cwd!==void 0?await n.resolveAsync(m,e.process.cwd):void 0,c)}return s}async $jsonTasksSupported(){return!0}async $findExecutable(r,e,t){return h.findExecutable(r,e,t)}};l=x([a(0,A),a(1,P),a(2,R),a(3,O),a(4,S),a(5,F),a(6,b),a(7,H),a(8,W)],l);export{l as ExtHostTask};
