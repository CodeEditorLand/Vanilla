{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/api/node/extHostCLIServer.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as fs from \"fs\";\nimport * as http from \"http\";\nimport { URI } from \"../../../base/common/uri.js\";\nimport { createRandomIPCHandle } from \"../../../base/parts/ipc/node/ipc.net.js\";\nimport { ILogService } from \"../../../platform/log/common/log.js\";\nimport type {\n\tIOpenWindowOptions,\n\tIWindowOpenable,\n} from \"../../../platform/window/common/window.js\";\nimport { hasWorkspaceFileExtension } from \"../../../platform/workspace/common/workspace.js\";\nimport { IExtHostCommands } from \"../common/extHostCommands.js\";\n\nexport interface OpenCommandPipeArgs {\n\ttype: \"open\";\n\tfileURIs?: string[];\n\tfolderURIs?: string[];\n\tforceNewWindow?: boolean;\n\tdiffMode?: boolean;\n\tmergeMode?: boolean;\n\taddMode?: boolean;\n\tgotoLineMode?: boolean;\n\tforceReuseWindow?: boolean;\n\twaitMarkerFilePath?: string;\n\tremoteAuthority?: string | null;\n}\n\nexport interface OpenExternalCommandPipeArgs {\n\ttype: \"openExternal\";\n\turis: string[];\n}\n\nexport interface StatusPipeArgs {\n\ttype: \"status\";\n}\n\nexport interface ExtensionManagementPipeArgs {\n\ttype: \"extensionManagement\";\n\tlist?: { showVersions?: boolean; category?: string };\n\tinstall?: string[];\n\tuninstall?: string[];\n\tforce?: boolean;\n}\n\nexport type PipeCommand =\n\t| OpenCommandPipeArgs\n\t| StatusPipeArgs\n\t| OpenExternalCommandPipeArgs\n\t| ExtensionManagementPipeArgs;\n\nexport interface ICommandsExecuter {\n\texecuteCommand<T>(id: string, ...args: any[]): Promise<T>;\n}\n\nexport class CLIServerBase {\n\tprivate readonly _server: http.Server;\n\n\tconstructor(\n\t\tprivate readonly _commands: ICommandsExecuter,\n\t\tprivate readonly logService: ILogService,\n\t\tprivate readonly _ipcHandlePath: string,\n\t) {\n\t\tthis._server = http.createServer((req, res) =>\n\t\t\tthis.onRequest(req, res),\n\t\t);\n\t\tthis.setup().catch((err) => {\n\t\t\tlogService.error(err);\n\t\t\treturn \"\";\n\t\t});\n\t}\n\n\tpublic get ipcHandlePath() {\n\t\treturn this._ipcHandlePath;\n\t}\n\n\tprivate async setup(): Promise<string> {\n\t\ttry {\n\t\t\tthis._server.listen(this.ipcHandlePath);\n\t\t\tthis._server.on(\"error\", (err) => this.logService.error(err));\n\t\t} catch (err) {\n\t\t\tthis.logService.error(\"Could not start open from terminal server.\");\n\t\t}\n\n\t\treturn this._ipcHandlePath;\n\t}\n\n\tprivate onRequest(\n\t\treq: http.IncomingMessage,\n\t\tres: http.ServerResponse,\n\t): void {\n\t\tconst sendResponse = (\n\t\t\tstatusCode: number,\n\t\t\treturnObj: string | undefined,\n\t\t) => {\n\t\t\tres.writeHead(statusCode, { \"content-type\": \"application/json\" });\n\t\t\tres.end(\n\t\t\t\tJSON.stringify(returnObj || null),\n\t\t\t\t(err?: any) => err && this.logService.error(err),\n\t\t\t); // CodeQL [SM01524] Only the message portion of errors are passed in.\n\t\t};\n\n\t\tconst chunks: string[] = [];\n\t\treq.setEncoding(\"utf8\");\n\t\treq.on(\"data\", (d: string) => chunks.push(d));\n\t\treq.on(\"end\", async () => {\n\t\t\ttry {\n\t\t\t\tconst data: PipeCommand | any = JSON.parse(chunks.join(\"\"));\n\t\t\t\tlet returnObj: string | undefined;\n\t\t\t\tswitch (data.type) {\n\t\t\t\t\tcase \"open\":\n\t\t\t\t\t\treturnObj = await this.open(data);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"openExternal\":\n\t\t\t\t\t\treturnObj = await this.openExternal(data);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"status\":\n\t\t\t\t\t\treturnObj = await this.getStatus(data);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"extensionManagement\":\n\t\t\t\t\t\treturnObj = await this.manageExtensions(data);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tsendResponse(404, `Unknown message type: ${data.type}`);\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tsendResponse(200, returnObj);\n\t\t\t} catch (e) {\n\t\t\t\tconst message =\n\t\t\t\t\te instanceof Error ? e.message : JSON.stringify(e);\n\t\t\t\tsendResponse(500, message);\n\t\t\t\tthis.logService.error(\"Error while processing pipe request\", e);\n\t\t\t}\n\t\t});\n\t}\n\n\tprivate async open(data: OpenCommandPipeArgs): Promise<undefined> {\n\t\tconst {\n\t\t\tfileURIs,\n\t\t\tfolderURIs,\n\t\t\tforceNewWindow,\n\t\t\tdiffMode,\n\t\t\tmergeMode,\n\t\t\taddMode,\n\t\t\tforceReuseWindow,\n\t\t\tgotoLineMode,\n\t\t\twaitMarkerFilePath,\n\t\t\tremoteAuthority,\n\t\t} = data;\n\t\tconst urisToOpen: IWindowOpenable[] = [];\n\t\tif (Array.isArray(folderURIs)) {\n\t\t\tfor (const s of folderURIs) {\n\t\t\t\ttry {\n\t\t\t\t\turisToOpen.push({ folderUri: URI.parse(s) });\n\t\t\t\t} catch (e) {\n\t\t\t\t\t// ignore\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (Array.isArray(fileURIs)) {\n\t\t\tfor (const s of fileURIs) {\n\t\t\t\ttry {\n\t\t\t\t\tif (hasWorkspaceFileExtension(s)) {\n\t\t\t\t\t\turisToOpen.push({ workspaceUri: URI.parse(s) });\n\t\t\t\t\t} else {\n\t\t\t\t\t\turisToOpen.push({ fileUri: URI.parse(s) });\n\t\t\t\t\t}\n\t\t\t\t} catch (e) {\n\t\t\t\t\t// ignore\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tconst waitMarkerFileURI = waitMarkerFilePath\n\t\t\t? URI.file(waitMarkerFilePath)\n\t\t\t: undefined;\n\t\tconst preferNewWindow =\n\t\t\t!forceReuseWindow && !waitMarkerFileURI && !addMode;\n\t\tconst windowOpenArgs: IOpenWindowOptions = {\n\t\t\tforceNewWindow,\n\t\t\tdiffMode,\n\t\t\tmergeMode,\n\t\t\taddMode,\n\t\t\tgotoLineMode,\n\t\t\tforceReuseWindow,\n\t\t\tpreferNewWindow,\n\t\t\twaitMarkerFileURI,\n\t\t\tremoteAuthority,\n\t\t};\n\t\tthis._commands.executeCommand(\n\t\t\t\"_remoteCLI.windowOpen\",\n\t\t\turisToOpen,\n\t\t\twindowOpenArgs,\n\t\t);\n\t}\n\n\tprivate async openExternal(\n\t\tdata: OpenExternalCommandPipeArgs,\n\t): Promise<undefined> {\n\t\tfor (const uriString of data.uris) {\n\t\t\tconst uri = URI.parse(uriString);\n\t\t\tconst urioOpen = uri.scheme === \"file\" ? uri : uriString; // workaround for #112577\n\t\t\tawait this._commands.executeCommand(\n\t\t\t\t\"_remoteCLI.openExternal\",\n\t\t\t\turioOpen,\n\t\t\t);\n\t\t}\n\t}\n\n\tprivate async manageExtensions(\n\t\tdata: ExtensionManagementPipeArgs,\n\t): Promise<string | undefined> {\n\t\tconst toExtOrVSIX = (inputs: string[] | undefined) =>\n\t\t\tinputs?.map((input) =>\n\t\t\t\t/\\.vsix$/i.test(input) ? URI.parse(input) : input,\n\t\t\t);\n\t\tconst commandArgs = {\n\t\t\tlist: data.list,\n\t\t\tinstall: toExtOrVSIX(data.install),\n\t\t\tuninstall: toExtOrVSIX(data.uninstall),\n\t\t\tforce: data.force,\n\t\t};\n\t\treturn await this._commands.executeCommand<string | undefined>(\n\t\t\t\"_remoteCLI.manageExtensions\",\n\t\t\tcommandArgs,\n\t\t);\n\t}\n\n\tprivate async getStatus(data: StatusPipeArgs): Promise<string | undefined> {\n\t\treturn await this._commands.executeCommand<string | undefined>(\n\t\t\t\"_remoteCLI.getSystemStatus\",\n\t\t);\n\t}\n\n\tdispose(): void {\n\t\tthis._server.close();\n\n\t\tif (\n\t\t\tthis._ipcHandlePath &&\n\t\t\tprocess.platform !== \"win32\" &&\n\t\t\tfs.existsSync(this._ipcHandlePath)\n\t\t) {\n\t\t\tfs.unlinkSync(this._ipcHandlePath);\n\t\t}\n\t}\n}\n\nexport class CLIServer extends CLIServerBase {\n\tconstructor(\n\t\t@IExtHostCommands commands: IExtHostCommands,\n\t\t@ILogService logService: ILogService,\n\t) {\n\t\tsuper(commands, logService, createRandomIPCHandle());\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
