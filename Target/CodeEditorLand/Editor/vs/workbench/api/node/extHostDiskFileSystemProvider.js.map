{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/api/node/extHostDiskFileSystemProvider.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport type * as vscode from 'vscode';\nimport { IExtHostConsumerFileSystem } from '../common/extHostFileSystemConsumer.js';\nimport { Schemas } from '../../../base/common/network.js';\nimport { ILogService } from '../../../platform/log/common/log.js';\nimport { DiskFileSystemProvider } from '../../../platform/files/node/diskFileSystemProvider.js';\nimport { FilePermission } from '../../../platform/files/common/files.js';\nimport { isLinux } from '../../../base/common/platform.js';\n\nexport class ExtHostDiskFileSystemProvider {\n\n\tconstructor(\n\t\t@IExtHostConsumerFileSystem extHostConsumerFileSystem: IExtHostConsumerFileSystem,\n\t\t@ILogService logService: ILogService\n\t) {\n\n\t\t// Register disk file system provider so that certain\n\t\t// file operations can execute fast within the extension\n\t\t// host without roundtripping.\n\t\textHostConsumerFileSystem.addFileSystemProvider(Schemas.file, new DiskFileSystemProviderAdapter(logService), { isCaseSensitive: isLinux });\n\t}\n}\n\nclass DiskFileSystemProviderAdapter implements vscode.FileSystemProvider {\n\n\tprivate readonly impl = new DiskFileSystemProvider(this.logService);\n\n\tconstructor(private readonly logService: ILogService) { }\n\n\tasync stat(uri: vscode.Uri): Promise<vscode.FileStat> {\n\t\tconst stat = await this.impl.stat(uri);\n\n\t\treturn {\n\t\t\ttype: stat.type,\n\t\t\tctime: stat.ctime,\n\t\t\tmtime: stat.mtime,\n\t\t\tsize: stat.size,\n\t\t\tpermissions: stat.permissions === FilePermission.Readonly ? 1 : undefined\n\t\t};\n\t}\n\n\treadDirectory(uri: vscode.Uri): Promise<[string, vscode.FileType][]> {\n\t\treturn this.impl.readdir(uri);\n\t}\n\n\tcreateDirectory(uri: vscode.Uri): Promise<void> {\n\t\treturn this.impl.mkdir(uri);\n\t}\n\n\treadFile(uri: vscode.Uri): Promise<Uint8Array> {\n\t\treturn this.impl.readFile(uri);\n\t}\n\n\twriteFile(uri: vscode.Uri, content: Uint8Array, options: { readonly create: boolean; readonly overwrite: boolean }): Promise<void> {\n\t\treturn this.impl.writeFile(uri, content, { ...options, unlock: false, atomic: false });\n\t}\n\n\tdelete(uri: vscode.Uri, options: { readonly recursive: boolean }): Promise<void> {\n\t\treturn this.impl.delete(uri, { ...options, useTrash: false, atomic: false });\n\t}\n\n\trename(oldUri: vscode.Uri, newUri: vscode.Uri, options: { readonly overwrite: boolean }): Promise<void> {\n\t\treturn this.impl.rename(oldUri, newUri, options);\n\t}\n\n\tcopy(source: vscode.Uri, destination: vscode.Uri, options: { readonly overwrite: boolean }): Promise<void> {\n\t\treturn this.impl.copy(source, destination, options);\n\t}\n\n\t// --- Not Implemented ---\n\n\tget onDidChangeFile(): never { throw new Error('Method not implemented.'); }\n\twatch(uri: vscode.Uri, options: { readonly recursive: boolean; readonly excludes: readonly string[] }): vscode.Disposable { throw new Error('Method not implemented.'); }\n}\n"],
  "mappings": ";;;;;;;;;;;;AAMA,SAAS,kCAAkC;AAC3C,SAAS,eAAe;AACxB,SAAS,mBAAmB;AAC5B,SAAS,8BAA8B;AACvC,SAAS,sBAAsB;AAC/B,SAAS,eAAe;AAEjB,IAAM,gCAAN,MAAoC;AAAA,EAb3C,OAa2C;AAAA;AAAA;AAAA,EAE1C,YAC6B,2BACf,YACZ;AAKD,8BAA0B,sBAAsB,QAAQ,MAAM,IAAI,8BAA8B,UAAU,GAAG,EAAE,iBAAiB,QAAQ,CAAC;AAAA,EAC1I;AACD;AAZa,gCAAN;AAAA,EAGJ;AAAA,EACA;AAAA,GAJU;AAcb,MAAM,8BAAmE;AAAA,EAIxE,YAA6B,YAAyB;AAAzB;AAAA,EAA2B;AAAA,EA/BzD,OA2ByE;AAAA;AAAA;AAAA,EAEvD,OAAO,IAAI,uBAAuB,KAAK,UAAU;AAAA,EAIlE,MAAM,KAAK,KAA2C;AACrD,UAAM,OAAO,MAAM,KAAK,KAAK,KAAK,GAAG;AAErC,WAAO;AAAA,MACN,MAAM,KAAK;AAAA,MACX,OAAO,KAAK;AAAA,MACZ,OAAO,KAAK;AAAA,MACZ,MAAM,KAAK;AAAA,MACX,aAAa,KAAK,gBAAgB,eAAe,WAAW,IAAI;AAAA,IACjE;AAAA,EACD;AAAA,EAEA,cAAc,KAAuD;AACpE,WAAO,KAAK,KAAK,QAAQ,GAAG;AAAA,EAC7B;AAAA,EAEA,gBAAgB,KAAgC;AAC/C,WAAO,KAAK,KAAK,MAAM,GAAG;AAAA,EAC3B;AAAA,EAEA,SAAS,KAAsC;AAC9C,WAAO,KAAK,KAAK,SAAS,GAAG;AAAA,EAC9B;AAAA,EAEA,UAAU,KAAiB,SAAqB,SAAmF;AAClI,WAAO,KAAK,KAAK,UAAU,KAAK,SAAS,EAAE,GAAG,SAAS,QAAQ,OAAO,QAAQ,MAAM,CAAC;AAAA,EACtF;AAAA,EAEA,OAAO,KAAiB,SAAyD;AAChF,WAAO,KAAK,KAAK,OAAO,KAAK,EAAE,GAAG,SAAS,UAAU,OAAO,QAAQ,MAAM,CAAC;AAAA,EAC5E;AAAA,EAEA,OAAO,QAAoB,QAAoB,SAAyD;AACvG,WAAO,KAAK,KAAK,OAAO,QAAQ,QAAQ,OAAO;AAAA,EAChD;AAAA,EAEA,KAAK,QAAoB,aAAyB,SAAyD;AAC1G,WAAO,KAAK,KAAK,KAAK,QAAQ,aAAa,OAAO;AAAA,EACnD;AAAA;AAAA,EAIA,IAAI,kBAAyB;AAAE,UAAM,IAAI,MAAM,yBAAyB;AAAA,EAAG;AAAA,EAC3E,MAAM,KAAiB,SAAmG;AAAE,UAAM,IAAI,MAAM,yBAAyB;AAAA,EAAG;AACzK;",
  "names": []
}
