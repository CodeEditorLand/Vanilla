{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/api/node/extHostDiskFileSystemProvider.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport type * as vscode from \"vscode\";\nimport { Schemas } from \"../../../base/common/network.js\";\nimport { isLinux } from \"../../../base/common/platform.js\";\nimport { FilePermission } from \"../../../platform/files/common/files.js\";\nimport { DiskFileSystemProvider } from \"../../../platform/files/node/diskFileSystemProvider.js\";\nimport { ILogService } from \"../../../platform/log/common/log.js\";\nimport { IExtHostConsumerFileSystem } from \"../common/extHostFileSystemConsumer.js\";\n\nexport class ExtHostDiskFileSystemProvider {\n\tconstructor(\n\t\t@IExtHostConsumerFileSystem extHostConsumerFileSystem: IExtHostConsumerFileSystem,\n\t\t@ILogService logService: ILogService,\n\t) {\n\t\t// Register disk file system provider so that certain\n\t\t// file operations can execute fast within the extension\n\t\t// host without roundtripping.\n\t\textHostConsumerFileSystem.addFileSystemProvider(\n\t\t\tSchemas.file,\n\t\t\tnew DiskFileSystemProviderAdapter(logService),\n\t\t\t{ isCaseSensitive: isLinux },\n\t\t);\n\t}\n}\n\nclass DiskFileSystemProviderAdapter implements vscode.FileSystemProvider {\n\tprivate readonly impl = new DiskFileSystemProvider(this.logService);\n\n\tconstructor(private readonly logService: ILogService) {}\n\n\tasync stat(uri: vscode.Uri): Promise<vscode.FileStat> {\n\t\tconst stat = await this.impl.stat(uri);\n\n\t\treturn {\n\t\t\ttype: stat.type,\n\t\t\tctime: stat.ctime,\n\t\t\tmtime: stat.mtime,\n\t\t\tsize: stat.size,\n\t\t\tpermissions:\n\t\t\t\tstat.permissions === FilePermission.Readonly ? 1 : undefined,\n\t\t};\n\t}\n\n\treadDirectory(uri: vscode.Uri): Promise<[string, vscode.FileType][]> {\n\t\treturn this.impl.readdir(uri);\n\t}\n\n\tcreateDirectory(uri: vscode.Uri): Promise<void> {\n\t\treturn this.impl.mkdir(uri);\n\t}\n\n\treadFile(uri: vscode.Uri): Promise<Uint8Array> {\n\t\treturn this.impl.readFile(uri);\n\t}\n\n\twriteFile(\n\t\turi: vscode.Uri,\n\t\tcontent: Uint8Array,\n\t\toptions: { readonly create: boolean; readonly overwrite: boolean },\n\t): Promise<void> {\n\t\treturn this.impl.writeFile(uri, content, {\n\t\t\t...options,\n\t\t\tunlock: false,\n\t\t\tatomic: false,\n\t\t});\n\t}\n\n\tdelete(\n\t\turi: vscode.Uri,\n\t\toptions: { readonly recursive: boolean },\n\t): Promise<void> {\n\t\treturn this.impl.delete(uri, {\n\t\t\t...options,\n\t\t\tuseTrash: false,\n\t\t\tatomic: false,\n\t\t});\n\t}\n\n\trename(\n\t\toldUri: vscode.Uri,\n\t\tnewUri: vscode.Uri,\n\t\toptions: { readonly overwrite: boolean },\n\t): Promise<void> {\n\t\treturn this.impl.rename(oldUri, newUri, options);\n\t}\n\n\tcopy(\n\t\tsource: vscode.Uri,\n\t\tdestination: vscode.Uri,\n\t\toptions: { readonly overwrite: boolean },\n\t): Promise<void> {\n\t\treturn this.impl.copy(source, destination, options);\n\t}\n\n\t// --- Not Implemented ---\n\n\tget onDidChangeFile(): never {\n\t\tthrow new Error(\"Method not implemented.\");\n\t}\n\twatch(\n\t\turi: vscode.Uri,\n\t\toptions: {\n\t\t\treadonly recursive: boolean;\n\t\t\treadonly excludes: readonly string[];\n\t\t},\n\t): vscode.Disposable {\n\t\tthrow new Error(\"Method not implemented.\");\n\t}\n}\n"],
  "mappings": ";;;;;;;;;;;;AAMA,SAAS,eAAe;AACxB,SAAS,eAAe;AACxB,SAAS,sBAAsB;AAC/B,SAAS,8BAA8B;AACvC,SAAS,mBAAmB;AAC5B,SAAS,kCAAkC;AAEpC,IAAM,gCAAN,MAAoC;AAAA,EAb3C,OAa2C;AAAA;AAAA;AAAA,EAC1C,YAC6B,2BACf,YACZ;AAID,8BAA0B;AAAA,MACzB,QAAQ;AAAA,MACR,IAAI,8BAA8B,UAAU;AAAA,MAC5C,EAAE,iBAAiB,QAAQ;AAAA,IAC5B;AAAA,EACD;AACD;AAda,gCAAN;AAAA,EAEJ;AAAA,EACA;AAAA,GAHU;AAgBb,MAAM,8BAAmE;AAAA,EAGxE,YAA6B,YAAyB;AAAzB;AAAA,EAA0B;AAAA,EAhCxD,OA6ByE;AAAA;AAAA;AAAA,EACvD,OAAO,IAAI,uBAAuB,KAAK,UAAU;AAAA,EAIlE,MAAM,KAAK,KAA2C;AACrD,UAAM,OAAO,MAAM,KAAK,KAAK,KAAK,GAAG;AAErC,WAAO;AAAA,MACN,MAAM,KAAK;AAAA,MACX,OAAO,KAAK;AAAA,MACZ,OAAO,KAAK;AAAA,MACZ,MAAM,KAAK;AAAA,MACX,aACC,KAAK,gBAAgB,eAAe,WAAW,IAAI;AAAA,IACrD;AAAA,EACD;AAAA,EAEA,cAAc,KAAuD;AACpE,WAAO,KAAK,KAAK,QAAQ,GAAG;AAAA,EAC7B;AAAA,EAEA,gBAAgB,KAAgC;AAC/C,WAAO,KAAK,KAAK,MAAM,GAAG;AAAA,EAC3B;AAAA,EAEA,SAAS,KAAsC;AAC9C,WAAO,KAAK,KAAK,SAAS,GAAG;AAAA,EAC9B;AAAA,EAEA,UACC,KACA,SACA,SACgB;AAChB,WAAO,KAAK,KAAK,UAAU,KAAK,SAAS;AAAA,MACxC,GAAG;AAAA,MACH,QAAQ;AAAA,MACR,QAAQ;AAAA,IACT,CAAC;AAAA,EACF;AAAA,EAEA,OACC,KACA,SACgB;AAChB,WAAO,KAAK,KAAK,OAAO,KAAK;AAAA,MAC5B,GAAG;AAAA,MACH,UAAU;AAAA,MACV,QAAQ;AAAA,IACT,CAAC;AAAA,EACF;AAAA,EAEA,OACC,QACA,QACA,SACgB;AAChB,WAAO,KAAK,KAAK,OAAO,QAAQ,QAAQ,OAAO;AAAA,EAChD;AAAA,EAEA,KACC,QACA,aACA,SACgB;AAChB,WAAO,KAAK,KAAK,KAAK,QAAQ,aAAa,OAAO;AAAA,EACnD;AAAA;AAAA,EAIA,IAAI,kBAAyB;AAC5B,UAAM,IAAI,MAAM,yBAAyB;AAAA,EAC1C;AAAA,EACA,MACC,KACA,SAIoB;AACpB,UAAM,IAAI,MAAM,yBAAyB;AAAA,EAC1C;AACD;",
  "names": []
}
