var w=Object.defineProperty;var D=Object.getOwnPropertyDescriptor;var h=(a,r,e,t)=>{for(var n=t>1?void 0:t?D(r,e):r,s=a.length-1,o;s>=0;s--)(o=a[s])&&(n=(t?o(r,e,n):o(n))||n);return t&&n&&w(r,e,n),n},l=(a,r)=>(e,t)=>r(e,t,a);import{createCancelablePromise as A,firstParallel as P,timeout as H}from"../../../base/common/async.js";import*as p from"../../../base/common/platform.js";import*as _ from"../../../nls.js";import{LinuxExternalTerminalService as C,MacExternalTerminalService as y,WindowsExternalTerminalService as R}from"../../../platform/externalTerminal/node/externalTerminalService.js";import{SignService as k}from"../../../platform/sign/node/signService.js";import{ExecutableDebugAdapter as T,NamedPipeDebugAdapter as U,SocketDebugAdapter as O}from"../../contrib/debug/node/debugAdapter.js";import{hasChildProcesses as L,prepareCommand as W}from"../../contrib/debug/node/terminals.js";import{IExtHostCommands as B}from"../common/extHostCommands.js";import{IExtHostConfiguration as F}from"../common/extHostConfiguration.js";import{ExtHostDebugServiceBase as N}from"../common/extHostDebugService.js";import{IExtHostEditorTabs as q}from"../common/extHostEditorTabs.js";import{IExtHostExtensionService as M}from"../common/extHostExtensionService.js";import{IExtHostRpcService as z}from"../common/extHostRpcService.js";import{IExtHostTerminalService as V}from"../common/extHostTerminalService.js";import{IExtHostTesting as $}from"../common/extHostTesting.js";import{DebugAdapterExecutable as b,DebugAdapterNamedPipeServer as J,DebugAdapterServer as j,ThemeIcon as G}from"../common/extHostTypes.js";import{IExtHostVariableResolverProvider as K}from"../common/extHostVariableResolverService.js";import{IExtHostWorkspace as Q}from"../common/extHostWorkspace.js";let g=class extends N{constructor(e,t,n,s,o,c,d,i,f){super(e,t,n,s,c,d,i,f);this._terminalService=o}_serviceBrand;_integratedTerminalInstances=new v;_terminalDisposedListener;createDebugAdapter(e,t){return e instanceof b?new T(this.convertExecutableToDto(e),t.type):e instanceof j?new O(this.convertServerToDto(e)):e instanceof J?new U(this.convertPipeServerToDto(e)):super.createDebugAdapter(e,t)}daExecutableFromPackage(e,t){const n=T.platformAdapterExecutable(t.getAllExtensionDescriptions(),e.type);if(n)return new b(n.command,n.args,n.options)}createSignService(){return new k}async $runInTerminal(e,t){if(e.kind==="integrated"){this._terminalDisposedListener||(this._terminalDisposedListener=this._register(this._terminalService.onDidCloseTerminal(m=>{this._integratedTerminalInstances.onTerminalClosed(m)})));const n=await this._configurationService.getConfigProvider(),s=this._terminalService.getDefaultShell(!0),o=this._terminalService.getDefaultShellArgs(!0),c=e.title||_.localize("debug.terminal.title","Debug Process"),d=JSON.stringify({shell:s,shellArgs:o});let i=await this._integratedTerminalInstances.checkout(d,c),f,x=!1;if(i)f=e.cwd;else{const m={shellPath:s,shellArgs:o,cwd:e.cwd,name:c,iconPath:new G("debug")};x=!0,i=this._terminalService.createTerminalFromOptions(m,{isFeatureTerminal:!0,forceShellIntegration:!0,useShellEnvironment:!0}),this._integratedTerminalInstances.insert(i,d)}i.show(!0);const I=await i.processId;x?await new Promise(m=>setTimeout(m,1e3)):(i.state.isInteractedWith&&(i.sendText(""),await H(200)),n.getConfiguration("debug.terminal").get("clearBeforeReusing")&&(s.indexOf("powershell")>=0||s.indexOf("pwsh")>=0||s.indexOf("cmd.exe")>=0?i.sendText("cls"):s.indexOf("bash")>=0?i.sendText("clear"):p.isWindows?i.sendText("cls"):i.sendText("clear")));const E=W(s,e.args,!!e.argsCanBeInterpretedByShell,f,e.env);i.sendText(E);const S=this.onDidTerminateDebugSession(m=>{m.id===t&&(this._integratedTerminalInstances.free(i),S.dispose())});return I}else if(e.kind==="external")return X(e,await this._configurationService.getConfigProvider());return super.$runInTerminal(e,t)}};g=h([l(0,z),l(1,Q),l(2,M),l(3,F),l(4,V),l(5,q),l(6,K),l(7,B),l(8,$)],g);let u;function X(a,r){if(!u)if(p.isWindows)u=new R;else if(p.isMacintosh)u=new y;else if(p.isLinux)u=new C;else throw new Error("external terminals not supported on this platform");const e=r.getConfiguration("terminal");return u.runInTerminal(a.title,a.cwd,a.args,a.env||{},e.external||{})}class v{static minUseDelay=1e3;_terminalInstances=new Map;async checkout(r,e,t=!1){const s=[...this._terminalInstances.entries()].map(([o,c])=>A(async d=>{if(o.name!==e||c.lastUsedAt!==-1&&await L(await o.processId))return null;const i=Date.now();return c.lastUsedAt+v.minUseDelay>i||d.isCancellationRequested?null:c.config!==r?(t&&o.dispose(),null):(c.lastUsedAt=i,o)}));return await P(s,o=>!!o)}insert(r,e){this._terminalInstances.set(r,{lastUsedAt:Date.now(),config:e})}free(r){const e=this._terminalInstances.get(r);e&&(e.lastUsedAt=-1)}onTerminalClosed(r){this._terminalInstances.delete(r)}}export{g as ExtHostDebugService};
