var _=Object.defineProperty;var H=Object.getOwnPropertyDescriptor;var b=(l,r,e,i)=>{for(var n=i>1?void 0:i?H(r,e):r,s=l.length-1,o;s>=0;s--)(o=l[s])&&(n=(i?o(r,e,n):o(n))||n);return i&&n&&_(r,e,n),n},a=(l,r)=>(e,i)=>r(e,i,l);import"vscode";import{createCancelablePromise as C,disposableTimeout as y,firstParallel as R,RunOnceScheduler as k,timeout as O}from"../../../base/common/async.js";import{DisposableStore as U}from"../../../base/common/lifecycle.js";import*as h from"../../../base/common/platform.js";import*as W from"../../../nls.js";import"../../../platform/externalTerminal/common/externalTerminal.js";import{LinuxExternalTerminalService as L,MacExternalTerminalService as B,WindowsExternalTerminalService as M}from"../../../platform/externalTerminal/node/externalTerminalService.js";import"../../../platform/sign/common/sign.js";import{SignService as F}from"../../../platform/sign/node/signService.js";import"../../contrib/debug/common/abstractDebugAdapter.js";import{ExecutableDebugAdapter as D,NamedPipeDebugAdapter as N,SocketDebugAdapter as q}from"../../contrib/debug/node/debugAdapter.js";import{hasChildProcesses as z,prepareCommand as V}from"../../contrib/debug/node/terminals.js";import"../../services/extensions/common/extensionDescriptionRegistry.js";import{IExtHostCommands as $}from"../common/extHostCommands.js";import{IExtHostConfiguration as J}from"../common/extHostConfiguration.js";import{ExtHostDebugServiceBase as j}from"../common/extHostDebugService.js";import{IExtHostEditorTabs as G}from"../common/extHostEditorTabs.js";import{IExtHostExtensionService as K}from"../common/extHostExtensionService.js";import{IExtHostRpcService as Q}from"../common/extHostRpcService.js";import{IExtHostTerminalService as X}from"../common/extHostTerminalService.js";import{IExtHostTesting as Y}from"../common/extHostTesting.js";import{DebugAdapterExecutable as E,DebugAdapterNamedPipeServer as Z,DebugAdapterServer as ee,ThemeIcon as te}from"../common/extHostTypes.js";import{IExtHostVariableResolverProvider as ie}from"../common/extHostVariableResolverService.js";import{IExtHostWorkspace as re}from"../common/extHostWorkspace.js";import{IExtHostTerminalShellIntegration as ne}from"../common/extHostTerminalShellIntegration.js";let x=class extends j{constructor(e,i,n,s,o,c,u,t,g,v){super(e,i,n,s,u,t,g,v);this._terminalService=o;this._terminalShellIntegrationService=c}_serviceBrand;_integratedTerminalInstances=new S;_terminalDisposedListener;createDebugAdapter(e,i){return e instanceof E?new D(this.convertExecutableToDto(e),i.type):e instanceof ee?new q(this.convertServerToDto(e)):e instanceof Z?new N(this.convertPipeServerToDto(e)):super.createDebugAdapter(e,i)}daExecutableFromPackage(e,i){const n=D.platformAdapterExecutable(i.getAllExtensionDescriptions(),e.type);if(n)return new E(n.command,n.args,n.options)}createSignService(){return new F}async $runInTerminal(e,i){if(e.kind==="integrated"){this._terminalDisposedListener||(this._terminalDisposedListener=this._register(this._terminalService.onDidCloseTerminal(d=>{this._integratedTerminalInstances.onTerminalClosed(d)})));const n=await this._configurationService.getConfigProvider(),s=this._terminalService.getDefaultShell(!0),o=this._terminalService.getDefaultShellArgs(!0),c=e.title||W.localize("debug.terminal.title","Debug Process"),u=JSON.stringify({shell:s,shellArgs:o});let t=await this._integratedTerminalInstances.checkout(u,c),g,v=!1;if(t)g=e.cwd;else{const d={shellPath:s,shellArgs:o,cwd:e.cwd,name:c,iconPath:new te("debug")};v=!0,t=this._terminalService.createTerminalFromOptions(d,{isFeatureTerminal:!0,forceShellIntegration:!0,useShellEnvironment:!0}),this._integratedTerminalInstances.insert(t,u)}t.show(!0);const w=await t.processId;if(v){let d;(m=>(m[m.DataDebounce=500]="DataDebounce",m[m.MaxDelay=5e3]="MaxDelay"))(d||={});const f=new U;await new Promise(I=>{const P=f.add(new k(I,500));f.add(this._terminalService.onDidWriteTerminalData(m=>{m.terminal===t&&P.schedule()})),f.add(this._terminalShellIntegrationService.onDidChangeTerminalShellIntegration(m=>{m.terminal===t&&I()})),f.add(y(I,5e3))}),f.dispose()}else t.state.isInteractedWith&&!t.shellIntegration&&(t.sendText(""),await O(200)),n.getConfiguration("debug.terminal").get("clearBeforeReusing")&&(s.indexOf("powershell")>=0||s.indexOf("pwsh")>=0||s.indexOf("cmd.exe")>=0?t.sendText("cls"):s.indexOf("bash")>=0?t.sendText("clear"):h.isWindows?t.sendText("cls"):t.sendText("clear"));const T=V(s,e.args,!!e.argsCanBeInterpretedByShell,g,e.env);t.shellIntegration?t.shellIntegration.executeCommand(T):t.sendText(T);const A=this.onDidTerminateDebugSession(d=>{d.id===i&&(this._integratedTerminalInstances.free(t),A.dispose())});return w}else if(e.kind==="external")return se(e,await this._configurationService.getConfigProvider());return super.$runInTerminal(e,i)}};x=b([a(0,Q),a(1,re),a(2,K),a(3,J),a(4,X),a(5,ne),a(6,G),a(7,ie),a(8,$),a(9,Y)],x);let p;function se(l,r){if(!p)if(h.isWindows)p=new M;else if(h.isMacintosh)p=new B;else if(h.isLinux)p=new L;else throw new Error("external terminals not supported on this platform");const e=r.getConfiguration("terminal");return p.runInTerminal(l.title,l.cwd,l.args,l.env||{},e.external||{})}class S{static minUseDelay=1e3;_terminalInstances=new Map;async checkout(r,e,i=!1){const s=[...this._terminalInstances.entries()].map(([o,c])=>C(async u=>{if(o.name!==e||c.lastUsedAt!==-1&&await z(await o.processId))return null;const t=Date.now();return c.lastUsedAt+S.minUseDelay>t||u.isCancellationRequested?null:c.config!==r?(i&&o.dispose(),null):(c.lastUsedAt=t,o)}));return await R(s,o=>!!o)}insert(r,e){this._terminalInstances.set(r,{lastUsedAt:Date.now(),config:e})}free(r){const e=this._terminalInstances.get(r);e&&(e.lastUsedAt=-1)}onTerminalClosed(r){this._terminalInstances.delete(r)}}export{x as ExtHostDebugService};
