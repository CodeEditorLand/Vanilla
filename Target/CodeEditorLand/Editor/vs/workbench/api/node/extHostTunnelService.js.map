{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/api/node/extHostTunnelService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { exec } from \"child_process\";\nimport * as fs from \"fs\";\nimport type * as vscode from \"vscode\";\nimport { VSBuffer } from \"../../../base/common/buffer.js\";\nimport { Emitter } from \"../../../base/common/event.js\";\nimport { DisposableStore } from \"../../../base/common/lifecycle.js\";\nimport { MovingAverage } from \"../../../base/common/numbers.js\";\nimport { isLinux } from \"../../../base/common/platform.js\";\nimport * as resources from \"../../../base/common/resources.js\";\nimport { URI } from \"../../../base/common/uri.js\";\nimport * as pfs from \"../../../base/node/pfs.js\";\nimport {\n\ttype ISocket,\n\tSocketCloseEventType,\n} from \"../../../base/parts/ipc/common/ipc.net.js\";\nimport { ILogService } from \"../../../platform/log/common/log.js\";\nimport {\n\tManagedSocket,\n\ttype RemoteSocketHalf,\n\tconnectManagedSocket,\n} from \"../../../platform/remote/common/managedSocket.js\";\nimport { ManagedRemoteConnection } from \"../../../platform/remote/common/remoteAuthorityResolver.js\";\nimport { ISignService } from \"../../../platform/sign/common/sign.js\";\nimport {\n\tisAllInterfaces,\n\tisLocalhost,\n} from \"../../../platform/tunnel/common/tunnel.js\";\nimport { NodeRemoteTunnel } from \"../../../platform/tunnel/node/tunnelService.js\";\nimport {\n\ttype CandidatePort,\n\tparseAddress,\n} from \"../../services/remote/common/tunnelModel.js\";\nimport { IExtHostInitDataService } from \"../common/extHostInitDataService.js\";\nimport { IExtHostRpcService } from \"../common/extHostRpcService.js\";\nimport { ExtHostTunnelService } from \"../common/extHostTunnelService.js\";\n\nexport function getSockets(\n\tstdout: string,\n): Record<string, { pid: number; socket: number }> {\n\tconst lines = stdout.trim().split(\"\\n\");\n\tconst mapped: { pid: number; socket: number }[] = [];\n\tlines.forEach((line) => {\n\t\tconst match = /\\/proc\\/(\\d+)\\/fd\\/\\d+ -> socket:\\[(\\d+)\\]/.exec(line)!;\n\t\tif (match && match.length >= 3) {\n\t\t\tmapped.push({\n\t\t\t\tpid: Number.parseInt(match[1], 10),\n\t\t\t\tsocket: Number.parseInt(match[2], 10),\n\t\t\t});\n\t\t}\n\t});\n\tconst socketMap = mapped.reduce(\n\t\t(m: Record<string, (typeof mapped)[0]>, socket) => {\n\t\t\tm[socket.socket] = socket;\n\t\t\treturn m;\n\t\t},\n\t\t{},\n\t);\n\treturn socketMap;\n}\n\nexport function loadListeningPorts(\n\t...stdouts: string[]\n): { socket: number; ip: string; port: number }[] {\n\tconst table = ([] as Record<string, string>[]).concat(\n\t\t...stdouts.map(loadConnectionTable),\n\t);\n\treturn [\n\t\t...new Map(\n\t\t\ttable\n\t\t\t\t.filter((row) => row.st === \"0A\")\n\t\t\t\t.map((row) => {\n\t\t\t\t\tconst address = row.local_address.split(\":\");\n\t\t\t\t\treturn {\n\t\t\t\t\t\tsocket: Number.parseInt(row.inode, 10),\n\t\t\t\t\t\tip: parseIpAddress(address[0]),\n\t\t\t\t\t\tport: Number.parseInt(address[1], 16),\n\t\t\t\t\t};\n\t\t\t\t})\n\t\t\t\t.map((port) => [port.ip + \":\" + port.port, port]),\n\t\t).values(),\n\t];\n}\n\nexport function parseIpAddress(hex: string): string {\n\tlet result = \"\";\n\tif (hex.length === 8) {\n\t\tfor (let i = hex.length - 2; i >= 0; i -= 2) {\n\t\t\tresult += Number.parseInt(hex.substr(i, 2), 16);\n\t\t\tif (i !== 0) {\n\t\t\t\tresult += \".\";\n\t\t\t}\n\t\t}\n\t} else {\n\t\t// Nice explanation of host format in tcp6 file: https://serverfault.com/questions/592574/why-does-proc-net-tcp6-represents-1-as-1000\n\t\tfor (let i = 0; i < hex.length; i += 8) {\n\t\t\tconst word = hex.substring(i, i + 8);\n\t\t\tlet subWord = \"\";\n\t\t\tfor (let j = 8; j >= 2; j -= 2) {\n\t\t\t\tsubWord += word.substring(j - 2, j);\n\t\t\t\tif (j === 6 || j === 2) {\n\t\t\t\t\t// Trim leading zeros\n\t\t\t\t\tsubWord = Number.parseInt(subWord, 16).toString(16);\n\t\t\t\t\tresult += `${subWord}`;\n\t\t\t\t\tsubWord = \"\";\n\t\t\t\t\tif (i + j !== hex.length - 6) {\n\t\t\t\t\t\tresult += \":\";\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}\n\nexport function loadConnectionTable(stdout: string): Record<string, string>[] {\n\tconst lines = stdout.trim().split(\"\\n\");\n\tconst names = lines\n\t\t.shift()!\n\t\t.trim()\n\t\t.split(/\\s+/)\n\t\t.filter((name) => name !== \"rx_queue\" && name !== \"tm->when\");\n\tconst table = lines.map((line) =>\n\t\tline\n\t\t\t.trim()\n\t\t\t.split(/\\s+/)\n\t\t\t.reduce((obj: Record<string, string>, value, i) => {\n\t\t\t\tobj[names[i] || i] = value;\n\t\t\t\treturn obj;\n\t\t\t}, {}),\n\t);\n\treturn table;\n}\n\nfunction knownExcludeCmdline(command: string): boolean {\n\treturn (\n\t\t!!command.match(/.*\\.vscode-server-[a-zA-Z]+\\/bin.*/) ||\n\t\tcommand.indexOf(\"out/server-main.js\") !== -1 ||\n\t\tcommand.indexOf(\"_productName=VSCode\") !== -1\n\t);\n}\n\nexport function getRootProcesses(stdout: string) {\n\tconst lines = stdout.trim().split(\"\\n\");\n\tconst mapped: { pid: number; cmd: string; ppid: number }[] = [];\n\tlines.forEach((line) => {\n\t\tconst match =\n\t\t\t/^\\d+\\s+\\D+\\s+root\\s+(\\d+)\\s+(\\d+).+\\d+:\\d+:\\d+\\s+(.+)$/.exec(\n\t\t\t\tline,\n\t\t\t)!;\n\t\tif (match && match.length >= 4) {\n\t\t\tmapped.push({\n\t\t\t\tpid: Number.parseInt(match[1], 10),\n\t\t\t\tppid: Number.parseInt(match[2]),\n\t\t\t\tcmd: match[3],\n\t\t\t});\n\t\t}\n\t});\n\treturn mapped;\n}\n\nexport async function findPorts(\n\tconnections: { socket: number; ip: string; port: number }[],\n\tsocketMap: Record<string, { pid: number; socket: number }>,\n\tprocesses: { pid: number; cwd: string; cmd: string }[],\n): Promise<CandidatePort[]> {\n\tconst processMap = processes.reduce(\n\t\t(m: Record<string, (typeof processes)[0]>, process) => {\n\t\t\tm[process.pid] = process;\n\t\t\treturn m;\n\t\t},\n\t\t{},\n\t);\n\n\tconst ports: CandidatePort[] = [];\n\tconnections.forEach(({ socket, ip, port }) => {\n\t\tconst pid = socketMap[socket] ? socketMap[socket].pid : undefined;\n\t\tconst command: string | undefined = pid\n\t\t\t? processMap[pid]?.cmd\n\t\t\t: undefined;\n\t\tif (pid && command && !knownExcludeCmdline(command)) {\n\t\t\tports.push({ host: ip, port, detail: command, pid });\n\t\t}\n\t});\n\treturn ports;\n}\n\nexport function tryFindRootPorts(\n\tconnections: { socket: number; ip: string; port: number }[],\n\trootProcessesStdout: string,\n\tpreviousPorts: Map<number, CandidatePort & { ppid: number }>,\n): Map<number, CandidatePort & { ppid: number }> {\n\tconst ports: Map<number, CandidatePort & { ppid: number }> = new Map();\n\tconst rootProcesses = getRootProcesses(rootProcessesStdout);\n\n\tfor (const connection of connections) {\n\t\tconst previousPort = previousPorts.get(connection.port);\n\t\tif (previousPort) {\n\t\t\tports.set(connection.port, previousPort);\n\t\t\tcontinue;\n\t\t}\n\t\tconst rootProcessMatch = rootProcesses.find((value) =>\n\t\t\tvalue.cmd.includes(`${connection.port}`),\n\t\t);\n\t\tif (rootProcessMatch) {\n\t\t\tlet bestMatch = rootProcessMatch;\n\t\t\t// There are often several processes that \"look\" like they could match the port.\n\t\t\t// The one we want is usually the child of the other. Find the most child process.\n\t\t\tlet mostChild:\n\t\t\t\t| { pid: number; cmd: string; ppid: number }\n\t\t\t\t| undefined;\n\t\t\tdo {\n\t\t\t\tmostChild = rootProcesses.find(\n\t\t\t\t\t(value) => value.ppid === bestMatch.pid,\n\t\t\t\t);\n\t\t\t\tif (mostChild) {\n\t\t\t\t\tbestMatch = mostChild;\n\t\t\t\t}\n\t\t\t} while (mostChild);\n\t\t\tports.set(connection.port, {\n\t\t\t\thost: connection.ip,\n\t\t\t\tport: connection.port,\n\t\t\t\tpid: bestMatch.pid,\n\t\t\t\tdetail: bestMatch.cmd,\n\t\t\t\tppid: bestMatch.ppid,\n\t\t\t});\n\t\t} else {\n\t\t\tports.set(connection.port, {\n\t\t\t\thost: connection.ip,\n\t\t\t\tport: connection.port,\n\t\t\t\tppid: Number.MAX_VALUE,\n\t\t\t});\n\t\t}\n\t}\n\n\treturn ports;\n}\n\nexport class NodeExtHostTunnelService extends ExtHostTunnelService {\n\tprivate _initialCandidates: CandidatePort[] | undefined = undefined;\n\tprivate _foundRootPorts: Map<number, CandidatePort & { ppid: number }> =\n\t\tnew Map();\n\tprivate _candidateFindingEnabled = false;\n\n\tconstructor(\n\t\t@IExtHostRpcService extHostRpc: IExtHostRpcService,\n\t\t@IExtHostInitDataService private readonly initData: IExtHostInitDataService,\n\t\t@ILogService logService: ILogService,\n\t\t@ISignService private readonly signService: ISignService,\n\t) {\n\t\tsuper(extHostRpc, initData, logService);\n\t\tif (isLinux && initData.remote.isRemote && initData.remote.authority) {\n\t\t\tthis._proxy.$setRemoteTunnelService(process.pid);\n\t\t\tthis.setInitialCandidates();\n\t\t}\n\t}\n\n\toverride async $registerCandidateFinder(enable: boolean): Promise<void> {\n\t\tif (enable && this._candidateFindingEnabled) {\n\t\t\t// already enabled\n\t\t\treturn;\n\t\t}\n\n\t\tthis._candidateFindingEnabled = enable;\n\t\tlet oldPorts:\n\t\t\t| { host: string; port: number; detail?: string }[]\n\t\t\t| undefined;\n\n\t\t// If we already have found initial candidates send those immediately.\n\t\tif (this._initialCandidates) {\n\t\t\toldPorts = this._initialCandidates;\n\t\t\tawait this._proxy.$onFoundNewCandidates(this._initialCandidates);\n\t\t}\n\n\t\t// Regularly scan to see if the candidate ports have changed.\n\t\tconst movingAverage = new MovingAverage();\n\t\tlet scanCount = 0;\n\t\twhile (this._candidateFindingEnabled) {\n\t\t\tconst startTime = new Date().getTime();\n\t\t\tconst newPorts = (await this.findCandidatePorts()).filter(\n\t\t\t\t(candidate) =>\n\t\t\t\t\tisLocalhost(candidate.host) ||\n\t\t\t\t\tisAllInterfaces(candidate.host),\n\t\t\t);\n\t\t\tthis.logService.trace(\n\t\t\t\t`ForwardedPorts: (ExtHostTunnelService) found candidate ports ${newPorts.map((port) => port.port).join(\", \")}`,\n\t\t\t);\n\t\t\tconst timeTaken = new Date().getTime() - startTime;\n\t\t\tthis.logService.trace(\n\t\t\t\t`ForwardedPorts: (ExtHostTunnelService) candidate port scan took ${timeTaken} ms.`,\n\t\t\t);\n\t\t\t// Do not count the first few scans towards the moving average as they are likely to be slower.\n\t\t\tif (scanCount++ > 3) {\n\t\t\t\tmovingAverage.update(timeTaken);\n\t\t\t}\n\t\t\tif (\n\t\t\t\t!oldPorts ||\n\t\t\t\tJSON.stringify(oldPorts) !== JSON.stringify(newPorts)\n\t\t\t) {\n\t\t\t\toldPorts = newPorts;\n\t\t\t\tawait this._proxy.$onFoundNewCandidates(oldPorts);\n\t\t\t}\n\t\t\tconst delay = this.calculateDelay(movingAverage.value);\n\t\t\tthis.logService.trace(\n\t\t\t\t`ForwardedPorts: (ExtHostTunnelService) next candidate port scan in ${delay} ms.`,\n\t\t\t);\n\t\t\tawait new Promise<void>((resolve) =>\n\t\t\t\tsetTimeout(() => resolve(), delay),\n\t\t\t);\n\t\t}\n\t}\n\n\tprivate calculateDelay(movingAverage: number) {\n\t\t// Some local testing indicated that the moving average might be between 50-100 ms.\n\t\treturn Math.max(movingAverage * 20, 2000);\n\t}\n\n\tprivate async setInitialCandidates(): Promise<void> {\n\t\tthis._initialCandidates = await this.findCandidatePorts();\n\t\tthis.logService.trace(\n\t\t\t`ForwardedPorts: (ExtHostTunnelService) Initial candidates found: ${this._initialCandidates.map((c) => c.port).join(\", \")}`,\n\t\t);\n\t}\n\n\tprivate async findCandidatePorts(): Promise<CandidatePort[]> {\n\t\tlet tcp = \"\";\n\t\tlet tcp6 = \"\";\n\t\ttry {\n\t\t\ttcp = await fs.promises.readFile(\"/proc/net/tcp\", \"utf8\");\n\t\t\ttcp6 = await fs.promises.readFile(\"/proc/net/tcp6\", \"utf8\");\n\t\t} catch (e) {\n\t\t\t// File reading error. No additional handling needed.\n\t\t}\n\t\tconst connections: { socket: number; ip: string; port: number }[] =\n\t\t\tloadListeningPorts(tcp, tcp6);\n\n\t\tconst procSockets: string = await new Promise((resolve) => {\n\t\t\texec(\n\t\t\t\t\"ls -l /proc/[0-9]*/fd/[0-9]* | grep socket:\",\n\t\t\t\t(error, stdout, stderr) => {\n\t\t\t\t\tresolve(stdout);\n\t\t\t\t},\n\t\t\t);\n\t\t});\n\t\tconst socketMap = getSockets(procSockets);\n\n\t\tconst procChildren = await pfs.Promises.readdir(\"/proc\");\n\t\tconst processes: {\n\t\t\tpid: number;\n\t\t\tcwd: string;\n\t\t\tcmd: string;\n\t\t}[] = [];\n\t\tfor (const childName of procChildren) {\n\t\t\ttry {\n\t\t\t\tconst pid: number = Number(childName);\n\t\t\t\tconst childUri = resources.joinPath(\n\t\t\t\t\tURI.file(\"/proc\"),\n\t\t\t\t\tchildName,\n\t\t\t\t);\n\t\t\t\tconst childStat = await fs.promises.stat(childUri.fsPath);\n\t\t\t\tif (childStat.isDirectory() && !isNaN(pid)) {\n\t\t\t\t\tconst cwd = await fs.promises.readlink(\n\t\t\t\t\t\tresources.joinPath(childUri, \"cwd\").fsPath,\n\t\t\t\t\t);\n\t\t\t\t\tconst cmd = await fs.promises.readFile(\n\t\t\t\t\t\tresources.joinPath(childUri, \"cmdline\").fsPath,\n\t\t\t\t\t\t\"utf8\",\n\t\t\t\t\t);\n\t\t\t\t\tprocesses.push({ pid, cwd, cmd });\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\t//\n\t\t\t}\n\t\t}\n\n\t\tconst unFoundConnections: {\n\t\t\tsocket: number;\n\t\t\tip: string;\n\t\t\tport: number;\n\t\t}[] = [];\n\t\tconst filteredConnections = connections.filter((connection) => {\n\t\t\tconst foundConnection = socketMap[connection.socket];\n\t\t\tif (!foundConnection) {\n\t\t\t\tunFoundConnections.push(connection);\n\t\t\t}\n\t\t\treturn foundConnection;\n\t\t});\n\n\t\tconst foundPorts = findPorts(filteredConnections, socketMap, processes);\n\t\tlet heuristicPorts: CandidatePort[] | undefined;\n\t\tthis.logService.trace(\n\t\t\t`ForwardedPorts: (ExtHostTunnelService) number of possible root ports ${unFoundConnections.length}`,\n\t\t);\n\t\tif (unFoundConnections.length > 0) {\n\t\t\tconst rootProcesses: string = await new Promise((resolve) => {\n\t\t\t\texec(\"ps -F -A -l | grep root\", (error, stdout, stderr) => {\n\t\t\t\t\tresolve(stdout);\n\t\t\t\t});\n\t\t\t});\n\t\t\tthis._foundRootPorts = tryFindRootPorts(\n\t\t\t\tunFoundConnections,\n\t\t\t\trootProcesses,\n\t\t\t\tthis._foundRootPorts,\n\t\t\t);\n\t\t\theuristicPorts = Array.from(this._foundRootPorts.values());\n\t\t\tthis.logService.trace(\n\t\t\t\t`ForwardedPorts: (ExtHostTunnelService) heuristic ports ${heuristicPorts.map((heuristicPort) => heuristicPort.port).join(\", \")}`,\n\t\t\t);\n\t\t}\n\t\treturn foundPorts.then((foundCandidates) => {\n\t\t\tif (heuristicPorts) {\n\t\t\t\treturn foundCandidates.concat(heuristicPorts);\n\t\t\t} else {\n\t\t\t\treturn foundCandidates;\n\t\t\t}\n\t\t});\n\t}\n\n\tprotected override makeManagedTunnelFactory(\n\t\tauthority: vscode.ManagedResolvedAuthority,\n\t): vscode.RemoteAuthorityResolver[\"tunnelFactory\"] {\n\t\treturn async (tunnelOptions) => {\n\t\t\tconst t = new NodeRemoteTunnel(\n\t\t\t\t{\n\t\t\t\t\tcommit: this.initData.commit,\n\t\t\t\t\tquality: this.initData.quality,\n\t\t\t\t\tlogService: this.logService,\n\t\t\t\t\tipcLogger: null,\n\t\t\t\t\t// services and address providers have stubs since we don't need\n\t\t\t\t\t// the connection identification that the renderer process uses\n\t\t\t\t\tremoteSocketFactoryService: {\n\t\t\t\t\t\t_serviceBrand: undefined,\n\t\t\t\t\t\tasync connect(\n\t\t\t\t\t\t\t_connectTo: ManagedRemoteConnection,\n\t\t\t\t\t\t\tpath: string,\n\t\t\t\t\t\t\tquery: string,\n\t\t\t\t\t\t\tdebugLabel: string,\n\t\t\t\t\t\t): Promise<ISocket> {\n\t\t\t\t\t\t\tconst result = await authority.makeConnection();\n\t\t\t\t\t\t\treturn ExtHostManagedSocket.connect(\n\t\t\t\t\t\t\t\tresult,\n\t\t\t\t\t\t\t\tpath,\n\t\t\t\t\t\t\t\tquery,\n\t\t\t\t\t\t\t\tdebugLabel,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t},\n\t\t\t\t\t\tregister() {\n\t\t\t\t\t\t\tthrow new Error(\"not implemented\");\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\taddressProvider: {\n\t\t\t\t\t\tgetAddress() {\n\t\t\t\t\t\t\treturn Promise.resolve({\n\t\t\t\t\t\t\t\tconnectTo: new ManagedRemoteConnection(0),\n\t\t\t\t\t\t\t\tconnectionToken: authority.connectionToken,\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\tsignService: this.signService,\n\t\t\t\t},\n\t\t\t\t\"localhost\",\n\t\t\t\ttunnelOptions.remoteAddress.host || \"localhost\",\n\t\t\t\ttunnelOptions.remoteAddress.port,\n\t\t\t\ttunnelOptions.localAddressPort,\n\t\t\t);\n\n\t\t\tawait t.waitForReady();\n\n\t\t\tconst disposeEmitter = new Emitter<void>();\n\n\t\t\treturn {\n\t\t\t\tlocalAddress: parseAddress(t.localAddress) ?? t.localAddress,\n\t\t\t\tremoteAddress: {\n\t\t\t\t\tport: t.tunnelRemotePort,\n\t\t\t\t\thost: t.tunnelRemoteHost,\n\t\t\t\t},\n\t\t\t\tonDidDispose: disposeEmitter.event,\n\t\t\t\tdispose: () => {\n\t\t\t\t\tt.dispose();\n\t\t\t\t\tdisposeEmitter.fire();\n\t\t\t\t\tdisposeEmitter.dispose();\n\t\t\t\t},\n\t\t\t};\n\t\t};\n\t}\n}\n\nclass ExtHostManagedSocket extends ManagedSocket {\n\tpublic static connect(\n\t\tpassing: vscode.ManagedMessagePassing,\n\t\tpath: string,\n\t\tquery: string,\n\t\tdebugLabel: string,\n\t): Promise<ExtHostManagedSocket> {\n\t\tconst d = new DisposableStore();\n\t\tconst half: RemoteSocketHalf = {\n\t\t\tonClose: d.add(new Emitter()),\n\t\t\tonData: d.add(new Emitter()),\n\t\t\tonEnd: d.add(new Emitter()),\n\t\t};\n\n\t\td.add(\n\t\t\tpassing.onDidReceiveMessage((d) =>\n\t\t\t\thalf.onData.fire(VSBuffer.wrap(d)),\n\t\t\t),\n\t\t);\n\t\td.add(passing.onDidEnd(() => half.onEnd.fire()));\n\t\td.add(\n\t\t\tpassing.onDidClose((error) =>\n\t\t\t\thalf.onClose.fire({\n\t\t\t\t\ttype: SocketCloseEventType.NodeSocketCloseEvent,\n\t\t\t\t\terror,\n\t\t\t\t\thadError: !!error,\n\t\t\t\t}),\n\t\t\t),\n\t\t);\n\n\t\tconst socket = new ExtHostManagedSocket(passing, debugLabel, half);\n\t\tsocket._register(d);\n\t\treturn connectManagedSocket(socket, path, query, debugLabel, half);\n\t}\n\n\tconstructor(\n\t\tprivate readonly passing: vscode.ManagedMessagePassing,\n\t\tdebugLabel: string,\n\t\thalf: RemoteSocketHalf,\n\t) {\n\t\tsuper(debugLabel, half);\n\t}\n\n\tpublic override write(buffer: VSBuffer): void {\n\t\tthis.passing.send(buffer.buffer);\n\t}\n\tprotected override closeRemote(): void {\n\t\tthis.passing.end();\n\t}\n\n\tpublic override async drain(): Promise<void> {\n\t\tawait this.passing.drain?.();\n\t}\n}\n"],
  "mappings": "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",
  "names": ["process", "d"]
}
