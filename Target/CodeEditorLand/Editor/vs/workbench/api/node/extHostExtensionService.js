import{Schemas as p}from"../../../../vs/base/common/network.js";import*as c from"vs/base/common/performance";import{URI as f}from"../../../../vs/base/common/uri.js";import{realpathSync as _}from"../../../../vs/base/node/extpath.js";import"../../../../vs/platform/extensions/common/extensions.js";import{createApiFactoryAndRegisterActors as h}from"../../../../vs/workbench/api/common/extHost.api.impl.js";import"../../../../vs/workbench/api/common/extHostExtensionActivator.js";import{AbstractExtHostExtensionService as v}from"../../../../vs/workbench/api/common/extHostExtensionService.js";import{RequireInterceptor as u}from"../../../../vs/workbench/api/common/extHostRequireInterceptor.js";import{ExtensionRuntime as x}from"../../../../vs/workbench/api/common/extHostTypes.js";import{CLIServer as g}from"../../../../vs/workbench/api/node/extHostCLIServer.js";import{ExtHostConsoleForwarder as S}from"../../../../vs/workbench/api/node/extHostConsoleForwarder.js";import{ExtHostDiskFileSystemProvider as y}from"../../../../vs/workbench/api/node/extHostDiskFileSystemProvider.js";import{ExtHostDownloadService as E}from"../../../../vs/workbench/api/node/extHostDownloadService.js";import{connectProxyResolver as I}from"../../../../vs/workbench/api/node/proxyResolver.js";class R extends u{_installInterceptor(){const e=this,t=globalThis._VSCODE_NODE_MODULES.module,o=t._load;t._load=function(i,a,m){return i=r(i),e._factories.has(i)?e._factories.get(i).load(i,f.file(_(a.filename)),d=>o.apply(this,[d,a,m])):o.apply(this,arguments)};const n=t._resolveLookupPaths;t._resolveLookupPaths=(s,i)=>n.call(this,r(s),i);const r=s=>{for(const i of e._alternatives){const a=i(s);if(a){s=a;break}}return s}}}class z extends v{extensionRuntime=x.Node;async _beforeAlmostReadyToRunExtensions(){this._instaService.createInstance(S);const e=this._instaService.invokeFunction(h);if(this._instaService.createInstance(E),this._initData.remote.isRemote&&this._initData.remote.authority){const n=this._instaService.createInstance(g);process.env.VSCODE_IPC_HOOK_CLI=n.ipcHandlePath}this._instaService.createInstance(y),await this._instaService.createInstance(R,e,{mine:this._myRegistry,all:this._globalRegistry}).install(),c.mark("code/extHost/didInitAPI");const o=await this._extHostConfiguration.getConfigProvider();await I(this._extHostWorkspace,o,this,this._logService,this._mainThreadTelemetryProxy,this._initData),c.mark("code/extHost/didInitProxyResolver")}_getEntryPoint(e){return e.main}async _loadCommonJSModule(e,t,o){if(t.scheme!==p.file)throw new Error(`Cannot load URI: '${t}', must be of file-scheme`);let n=null;o.codeLoadingStart(),this._logService.trace(`ExtensionService#loadCommonJSModule ${t.toString(!0)}`),this._logService.flush();const r=e?.identifier.value;e&&await this._extHostLocalizationService.initializeLocalizedMessages(e);try{r&&c.mark(`code/extHost/willLoadExtensionCode/${r}`),n=(require.__$__nodeRequire??require)(t.fsPath)}finally{r&&c.mark(`code/extHost/didLoadExtensionCode/${r}`),o.codeLoadingStop()}return n}async $setRemoteEnvironment(e){if(this._initData.remote.isRemote)for(const t in e){const o=e[t];o===null?delete process.env[t]:process.env[t]=o}}}export{z as ExtHostExtensionService};
