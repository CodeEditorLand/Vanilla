import{createRequire as f}from"node:module";import{Schemas as h}from"../../../base/common/network.js";import*as c from"../../../base/common/performance.js";import{URI as _}from"../../../base/common/uri.js";import{realpathSync as v}from"../../../base/node/extpath.js";import"../../../platform/extensions/common/extensions.js";import{createApiFactoryAndRegisterActors as u}from"../common/extHost.api.impl.js";import"../common/extHostExtensionActivator.js";import{AbstractExtHostExtensionService as x}from"../common/extHostExtensionService.js";import{RequireInterceptor as g}from"../common/extHostRequireInterceptor.js";import{ExtensionRuntime as y}from"../common/extHostTypes.js";import{CLIServer as S}from"./extHostCLIServer.js";import{ExtHostConsoleForwarder as E}from"./extHostConsoleForwarder.js";import{ExtHostDiskFileSystemProvider as I}from"./extHostDiskFileSystemProvider.js";import{ExtHostDownloadService as R}from"./extHostDownloadService.js";import{connectProxyResolver as P}from"./proxyResolver.js";const l=f(import.meta.url);class k extends g{_installInterceptor(){const e=this,t=l("module"),o=t._load;t._load=function(i,a,d){return i=r(i),e._factories.has(i)?e._factories.get(i).load(i,_.file(v(a.filename)),p=>o.apply(this,[p,a,d])):o.apply(this,arguments)};const n=t._resolveLookupPaths;t._resolveLookupPaths=(s,i)=>n.call(this,r(s),i);const r=s=>{for(const i of e._alternatives){const a=i(s);if(a){s=a;break}}return s}}}class K extends x{extensionRuntime=y.Node;async _beforeAlmostReadyToRunExtensions(){this._instaService.createInstance(E);const e=this._instaService.invokeFunction(u);if(this._instaService.createInstance(R),this._initData.remote.isRemote&&this._initData.remote.authority){const n=this._instaService.createInstance(S);process.env.VSCODE_IPC_HOOK_CLI=n.ipcHandlePath}this._instaService.createInstance(I),await this._instaService.createInstance(k,e,{mine:this._myRegistry,all:this._globalRegistry}).install(),c.mark("code/extHost/didInitAPI");const o=await this._extHostConfiguration.getConfigProvider();await P(this._extHostWorkspace,o,this,this._logService,this._mainThreadTelemetryProxy,this._initData),c.mark("code/extHost/didInitProxyResolver")}_getEntryPoint(e){return e.main}async _loadCommonJSModule(e,t,o){if(t.scheme!==h.file)throw new Error(`Cannot load URI: '${t}', must be of file-scheme`);let n=null;o.codeLoadingStart(),this._logService.trace(`ExtensionService#loadCommonJSModule ${t.toString(!0)}`),this._logService.flush();const r=e?.identifier.value;e&&await this._extHostLocalizationService.initializeLocalizedMessages(e);try{r&&c.mark(`code/extHost/willLoadExtensionCode/${r}`),n=(l.__$__nodeRequire??l)(t.fsPath)}finally{r&&c.mark(`code/extHost/didLoadExtensionCode/${r}`),o.codeLoadingStop()}return n}async $setRemoteEnvironment(e){if(this._initData.remote.isRemote)for(const t in e){const o=e[t];o===null?delete process.env[t]:process.env[t]=o}}}export{K as ExtHostExtensionService};
