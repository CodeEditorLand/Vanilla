var g=Object.defineProperty;var v=Object.getOwnPropertyDescriptor;var m=(h,o,e,r)=>{for(var i=r>1?void 0:r?v(o,e):o,t=h.length-1,a;t>=0;t--)(a=h[t])&&(i=(r?a(o,e,i):a(i))||i);return r&&i&&g(o,e,i),i},n=(h,o)=>(e,r)=>o(e,r,h);import{DisposableStore as f,toDisposable as C}from"../../../base/common/lifecycle.js";import{Schemas as l}from"../../../base/common/network.js";import{URI as P}from"../../../base/common/uri.js";import*as I from"../../../base/node/pfs.js";import{ILogService as _}from"../../../platform/log/common/log.js";import{isSerializedFileMatch as T}from"../../services/search/common/search.js";import{SearchService as y}from"../../services/search/node/rawSearchService.js";import{RipgrepSearchProvider as u}from"../../services/search/node/ripgrepSearchProvider.js";import{OutputChannel as p}from"../../services/search/node/ripgrepSearchUtils.js";import{NativeTextSearchManager as b}from"../../services/search/node/textSearchManager.js";import{IExtHostConfiguration as F}from"../common/extHostConfiguration.js";import{IExtHostInitDataService as x}from"../common/extHostInitDataService.js";import{IExtHostRpcService as E}from"../common/extHostRpcService.js";import{ExtHostSearch as H,reviveQuery as w}from"../common/extHostSearch.js";import{IURITransformerService as R}from"../common/extHostUriTransformerService.js";let c=class extends H{constructor(e,r,i,t,a){super(e,i,a);this.configurationService=t;this.getNumThreads=this.getNumThreads.bind(this),this.getNumThreadsCached=this.getNumThreadsCached.bind(this),this.handleConfigurationChanged=this.handleConfigurationChanged.bind(this);const s=new p("RipgrepSearchUD",this._logService);this._disposables.add(this.registerTextSearchProvider(l.vscodeUserData,new u(s,this.getNumThreadsCached))),r.remote.isRemote&&r.remote.authority&&this._registerEHSearchProviders(),t.getConfigProvider().then(d=>{this.isDisposed||this._disposables.add(d.onDidChangeConfiguration(this.handleConfigurationChanged))})}_pfs=I;_internalFileSearchHandle=-1;_internalFileSearchProvider=null;_registeredEHSearchProvider=!1;_numThreadsPromise;_disposables=new f;isDisposed=!1;handleConfigurationChanged(e){e.affectsConfiguration("search")&&(this._numThreadsPromise=void 0)}async getNumThreads(){return(await this.configurationService.getConfigProvider()).getConfiguration("search").get("ripgrep.maxThreads")}async getNumThreadsCached(){return this._numThreadsPromise||(this._numThreadsPromise=this.getNumThreads()),this._numThreadsPromise}dispose(){this.isDisposed=!0,this._disposables.dispose()}$enableExtensionHostSearch(){this._registerEHSearchProviders()}_registerEHSearchProviders(){if(this._registeredEHSearchProvider)return;this._registeredEHSearchProvider=!0;const e=new p("RipgrepSearchEH",this._logService);this._disposables.add(this.registerTextSearchProvider(l.file,new u(e,this.getNumThreadsCached))),this._disposables.add(this.registerInternalFileSearchProvider(l.file,new y("fileSearchProvider",this.getNumThreadsCached)))}registerInternalFileSearchProvider(e,r){const i=this._handlePool++;return this._internalFileSearchProvider=r,this._internalFileSearchHandle=i,this._proxy.$registerFileSearchProvider(i,this._transformScheme(e)),C(()=>{this._internalFileSearchProvider=null,this._proxy.$unregisterProvider(i)})}$provideFileSearchResults(e,r,i,t){const a=w(i);if(e===this._internalFileSearchHandle){const s=Date.now();return this.doInternalFileSearch(e,r,a,t).then(d=>{const S=Date.now()-s;return this._logService.debug(`Ext host file search time: ${S}ms`),d})}return super.$provideFileSearchResults(e,r,i,t)}async doInternalFileSearchWithCustomCallback(e,r,i){const t=s=>{if(T(s)&&(s=[s]),Array.isArray(s)){i(s.map(d=>P.file(d.path)));return}s.message&&this._logService.debug("ExtHostSearch",s.message)};if(!this._internalFileSearchProvider)throw new Error("No internal file search handler");const a=await this.getNumThreadsCached();return this._internalFileSearchProvider.doFileSearch(e,a,t,r)}async doInternalFileSearch(e,r,i,t){return this.doInternalFileSearchWithCustomCallback(i,t,a=>{this._proxy.$handleFileMatch(e,r,a)})}$clearCache(e){return this._internalFileSearchProvider?.clearCache(e),super.$clearCache(e)}createTextSearchManager(e,r){return new b(e,r,void 0,"textSearchProvider")}};c=m([n(0,E),n(1,x),n(2,R),n(3,F),n(4,_)],c);export{c as NativeExtHostSearch};
