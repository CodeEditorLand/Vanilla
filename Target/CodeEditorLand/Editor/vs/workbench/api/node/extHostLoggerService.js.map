{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/api/node/extHostLoggerService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Schemas } from \"../../../base/common/network.js\";\nimport type { URI } from \"../../../base/common/uri.js\";\nimport { generateUuid } from \"../../../base/common/uuid.js\";\nimport type {\n\tILogger,\n\tILoggerOptions,\n\tILoggerResource,\n\tLogLevel,\n} from \"../../../platform/log/common/log.js\";\nimport { SpdLogLogger } from \"../../../platform/log/node/spdlogLog.js\";\nimport { ExtHostLoggerService as BaseExtHostLoggerService } from \"../common/extHostLoggerService.js\";\n\nexport class ExtHostLoggerService extends BaseExtHostLoggerService {\n\tprotected override doCreateLogger(\n\t\tresource: URI,\n\t\tlogLevel: LogLevel,\n\t\toptions?: ILoggerOptions,\n\t): ILogger {\n\t\tif (resource.scheme === Schemas.file) {\n\t\t\t/* Create the logger in the Extension Host process to prevent loggers (log, output channels...) traffic  over IPC */\n\t\t\treturn new SpdLogLogger(\n\t\t\t\toptions?.name || generateUuid(),\n\t\t\t\tresource.fsPath,\n\t\t\t\t!options?.donotRotate,\n\t\t\t\t!!options?.donotUseFormatters,\n\t\t\t\tlogLevel,\n\t\t\t);\n\t\t}\n\t\treturn super.doCreateLogger(resource, logLevel, options);\n\t}\n\n\toverride registerLogger(resource: ILoggerResource): void {\n\t\tsuper.registerLogger(resource);\n\t\tthis._proxy.$registerLogger(resource);\n\t}\n\n\toverride deregisterLogger(resource: URI): void {\n\t\tsuper.deregisterLogger(resource);\n\t\tthis._proxy.$deregisterLogger(resource);\n\t}\n}\n"],
  "mappings": ";;AAKA,SAAS,eAAe;AAExB,SAAS,oBAAoB;AAO7B,SAAS,oBAAoB;AAC7B,SAAS,wBAAwB,gCAAgC;AAE1D,MAAM,6BAA6B,yBAAyB;AAAA,EAjBnE,OAiBmE;AAAA;AAAA;AAAA,EAC/C,eAClB,UACA,UACA,SACU;AACV,QAAI,SAAS,WAAW,QAAQ,MAAM;AAErC,aAAO,IAAI;AAAA,QACV,SAAS,QAAQ,aAAa;AAAA,QAC9B,SAAS;AAAA,QACT,CAAC,SAAS;AAAA,QACV,CAAC,CAAC,SAAS;AAAA,QACX;AAAA,MACD;AAAA,IACD;AACA,WAAO,MAAM,eAAe,UAAU,UAAU,OAAO;AAAA,EACxD;AAAA,EAES,eAAe,UAAiC;AACxD,UAAM,eAAe,QAAQ;AAC7B,SAAK,OAAO,gBAAgB,QAAQ;AAAA,EACrC;AAAA,EAES,iBAAiB,UAAqB;AAC9C,UAAM,iBAAiB,QAAQ;AAC/B,SAAK,OAAO,kBAAkB,QAAQ;AAAA,EACvC;AACD;",
  "names": []
}
