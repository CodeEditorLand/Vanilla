{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/api/node/extHostLoggerService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { ILogger, ILoggerOptions, ILoggerResource, LogLevel } from '../../../platform/log/common/log.js';\nimport { URI } from '../../../base/common/uri.js';\nimport { ExtHostLoggerService as BaseExtHostLoggerService } from '../common/extHostLoggerService.js';\nimport { Schemas } from '../../../base/common/network.js';\nimport { SpdLogLogger } from '../../../platform/log/node/spdlogLog.js';\nimport { generateUuid } from '../../../base/common/uuid.js';\n\nexport class ExtHostLoggerService extends BaseExtHostLoggerService {\n\n\tprotected override doCreateLogger(resource: URI, logLevel: LogLevel, options?: ILoggerOptions): ILogger {\n\t\tif (resource.scheme === Schemas.file) {\n\t\t\t/* Create the logger in the Extension Host process to prevent loggers (log, output channels...) traffic  over IPC */\n\t\t\treturn new SpdLogLogger(options?.name || generateUuid(), resource.fsPath, !options?.donotRotate, !!options?.donotUseFormatters, logLevel);\n\t\t}\n\t\treturn super.doCreateLogger(resource, logLevel, options);\n\t}\n\n\toverride registerLogger(resource: ILoggerResource): void {\n\t\tsuper.registerLogger(resource);\n\t\tthis._proxy.$registerLogger(resource);\n\t}\n\n\toverride deregisterLogger(resource: URI): void {\n\t\tsuper.deregisterLogger(resource);\n\t\tthis._proxy.$deregisterLogger(resource);\n\t}\n\n}\n"],
  "mappings": ";;AAKA,SAAS,SAAS,gBAAgB,iBAAiB,gBAAgB;AACnE,SAAS,WAAW;AACpB,SAAS,wBAAwB,gCAAgC;AACjE,SAAS,eAAe;AACxB,SAAS,oBAAoB;AAC7B,SAAS,oBAAoB;AAEtB,MAAM,6BAA6B,yBAAyB;AAAA,EAZnE,OAYmE;AAAA;AAAA;AAAA,EAE/C,eAAe,UAAe,UAAoB,SAAmC;AACvG,QAAI,SAAS,WAAW,QAAQ,MAAM;AAErC,aAAO,IAAI,aAAa,SAAS,QAAQ,aAAa,GAAG,SAAS,QAAQ,CAAC,SAAS,aAAa,CAAC,CAAC,SAAS,oBAAoB,QAAQ;AAAA,IACzI;AACA,WAAO,MAAM,eAAe,UAAU,UAAU,OAAO;AAAA,EACxD;AAAA,EAES,eAAe,UAAiC;AACxD,UAAM,eAAe,QAAQ;AAC7B,SAAK,OAAO,gBAAgB,QAAQ;AAAA,EACrC;AAAA,EAES,iBAAiB,UAAqB;AAC9C,UAAM,iBAAiB,QAAQ;AAC/B,SAAK,OAAO,kBAAkB,QAAQ;AAAA,EACvC;AAED;",
  "names": []
}
