{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/api/node/extHostDebugService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport type * as vscode from 'vscode';\nimport { createCancelablePromise, firstParallel, timeout } from '../../../base/common/async.js';\nimport { IDisposable } from '../../../base/common/lifecycle.js';\nimport * as platform from '../../../base/common/platform.js';\nimport * as nls from '../../../nls.js';\nimport { IExternalTerminalService } from '../../../platform/externalTerminal/common/externalTerminal.js';\nimport { LinuxExternalTerminalService, MacExternalTerminalService, WindowsExternalTerminalService } from '../../../platform/externalTerminal/node/externalTerminalService.js';\nimport { ISignService } from '../../../platform/sign/common/sign.js';\nimport { SignService } from '../../../platform/sign/node/signService.js';\nimport { AbstractDebugAdapter } from '../../contrib/debug/common/abstractDebugAdapter.js';\nimport { ExecutableDebugAdapter, NamedPipeDebugAdapter, SocketDebugAdapter } from '../../contrib/debug/node/debugAdapter.js';\nimport { hasChildProcesses, prepareCommand } from '../../contrib/debug/node/terminals.js';\nimport { ExtensionDescriptionRegistry } from '../../services/extensions/common/extensionDescriptionRegistry.js';\nimport { IExtHostCommands } from '../common/extHostCommands.js';\nimport { ExtHostConfigProvider, IExtHostConfiguration } from '../common/extHostConfiguration.js';\nimport { ExtHostDebugServiceBase, ExtHostDebugSession } from '../common/extHostDebugService.js';\nimport { IExtHostEditorTabs } from '../common/extHostEditorTabs.js';\nimport { IExtHostExtensionService } from '../common/extHostExtensionService.js';\nimport { IExtHostRpcService } from '../common/extHostRpcService.js';\nimport { IExtHostTerminalService } from '../common/extHostTerminalService.js';\nimport { IExtHostTesting } from '../common/extHostTesting.js';\nimport { DebugAdapterExecutable, DebugAdapterNamedPipeServer, DebugAdapterServer, ThemeIcon } from '../common/extHostTypes.js';\nimport { IExtHostVariableResolverProvider } from '../common/extHostVariableResolverService.js';\nimport { IExtHostWorkspace } from '../common/extHostWorkspace.js';\n\nexport class ExtHostDebugService extends ExtHostDebugServiceBase {\n\n\toverride readonly _serviceBrand: undefined;\n\n\tprivate _integratedTerminalInstances = new DebugTerminalCollection();\n\tprivate _terminalDisposedListener: IDisposable | undefined;\n\n\tconstructor(\n\t\t@IExtHostRpcService extHostRpcService: IExtHostRpcService,\n\t\t@IExtHostWorkspace workspaceService: IExtHostWorkspace,\n\t\t@IExtHostExtensionService extensionService: IExtHostExtensionService,\n\t\t@IExtHostConfiguration configurationService: IExtHostConfiguration,\n\t\t@IExtHostTerminalService private _terminalService: IExtHostTerminalService,\n\t\t@IExtHostEditorTabs editorTabs: IExtHostEditorTabs,\n\t\t@IExtHostVariableResolverProvider variableResolver: IExtHostVariableResolverProvider,\n\t\t@IExtHostCommands commands: IExtHostCommands,\n\t\t@IExtHostTesting testing: IExtHostTesting,\n\t) {\n\t\tsuper(extHostRpcService, workspaceService, extensionService, configurationService, editorTabs, variableResolver, commands, testing);\n\t}\n\n\tprotected override createDebugAdapter(adapter: vscode.DebugAdapterDescriptor, session: ExtHostDebugSession): AbstractDebugAdapter | undefined {\n\t\tif (adapter instanceof DebugAdapterExecutable) {\n\t\t\treturn new ExecutableDebugAdapter(this.convertExecutableToDto(adapter), session.type);\n\t\t} else if (adapter instanceof DebugAdapterServer) {\n\t\t\treturn new SocketDebugAdapter(this.convertServerToDto(adapter));\n\t\t} else if (adapter instanceof DebugAdapterNamedPipeServer) {\n\t\t\treturn new NamedPipeDebugAdapter(this.convertPipeServerToDto(adapter));\n\t\t} else {\n\t\t\treturn super.createDebugAdapter(adapter, session);\n\t\t}\n\t}\n\n\tprotected override daExecutableFromPackage(session: ExtHostDebugSession, extensionRegistry: ExtensionDescriptionRegistry): DebugAdapterExecutable | undefined {\n\t\tconst dae = ExecutableDebugAdapter.platformAdapterExecutable(extensionRegistry.getAllExtensionDescriptions(), session.type);\n\t\tif (dae) {\n\t\t\treturn new DebugAdapterExecutable(dae.command, dae.args, dae.options);\n\t\t}\n\t\treturn undefined;\n\t}\n\n\tprotected override createSignService(): ISignService | undefined {\n\t\treturn new SignService();\n\t}\n\n\tpublic override async $runInTerminal(args: DebugProtocol.RunInTerminalRequestArguments, sessionId: string): Promise<number | undefined> {\n\n\t\tif (args.kind === 'integrated') {\n\n\t\t\tif (!this._terminalDisposedListener) {\n\t\t\t\t// React on terminal disposed and check if that is the debug terminal #12956\n\t\t\t\tthis._terminalDisposedListener = this._register(this._terminalService.onDidCloseTerminal(terminal => {\n\t\t\t\t\tthis._integratedTerminalInstances.onTerminalClosed(terminal);\n\t\t\t\t}));\n\t\t\t}\n\n\t\t\tconst configProvider = await this._configurationService.getConfigProvider();\n\t\t\tconst shell = this._terminalService.getDefaultShell(true);\n\t\t\tconst shellArgs = this._terminalService.getDefaultShellArgs(true);\n\n\t\t\tconst terminalName = args.title || nls.localize('debug.terminal.title', \"Debug Process\");\n\n\t\t\tconst shellConfig = JSON.stringify({ shell, shellArgs });\n\t\t\tlet terminal = await this._integratedTerminalInstances.checkout(shellConfig, terminalName);\n\n\t\t\tlet cwdForPrepareCommand: string | undefined;\n\t\t\tlet giveShellTimeToInitialize = false;\n\n\t\t\tif (!terminal) {\n\t\t\t\tconst options: vscode.TerminalOptions = {\n\t\t\t\t\tshellPath: shell,\n\t\t\t\t\tshellArgs: shellArgs,\n\t\t\t\t\tcwd: args.cwd,\n\t\t\t\t\tname: terminalName,\n\t\t\t\t\ticonPath: new ThemeIcon('debug'),\n\t\t\t\t};\n\t\t\t\tgiveShellTimeToInitialize = true;\n\t\t\t\tterminal = this._terminalService.createTerminalFromOptions(options, {\n\t\t\t\t\tisFeatureTerminal: true,\n\t\t\t\t\t// Since debug termnials are REPLs, we want shell integration to be enabled.\n\t\t\t\t\t// Ignore isFeatureTerminal when evaluating shell integration enablement.\n\t\t\t\t\tforceShellIntegration: true,\n\t\t\t\t\tuseShellEnvironment: true\n\t\t\t\t});\n\t\t\t\tthis._integratedTerminalInstances.insert(terminal, shellConfig);\n\n\t\t\t} else {\n\t\t\t\tcwdForPrepareCommand = args.cwd;\n\t\t\t}\n\n\t\t\tterminal.show(true);\n\n\t\t\tconst shellProcessId = await terminal.processId;\n\n\t\t\tif (giveShellTimeToInitialize) {\n\t\t\t\t// give a new terminal some time to initialize the shell\n\t\t\t\tawait new Promise(resolve => setTimeout(resolve, 1000));\n\t\t\t} else {\n\t\t\t\tif (terminal.state.isInteractedWith) {\n\t\t\t\t\tterminal.sendText('\\u0003'); // Ctrl+C for #106743. Not part of the same command for #107969\n\t\t\t\t\tawait timeout(200); // mirroring https://github.com/microsoft/vscode/blob/c67ccc70ece5f472ec25464d3eeb874cfccee9f1/src/vs/workbench/contrib/terminal/browser/terminalInstance.ts#L852-L857\n\t\t\t\t}\n\n\t\t\t\tif (configProvider.getConfiguration('debug.terminal').get<boolean>('clearBeforeReusing')) {\n\t\t\t\t\t// clear terminal before reusing it\n\t\t\t\t\tif (shell.indexOf('powershell') >= 0 || shell.indexOf('pwsh') >= 0 || shell.indexOf('cmd.exe') >= 0) {\n\t\t\t\t\t\tterminal.sendText('cls');\n\t\t\t\t\t} else if (shell.indexOf('bash') >= 0) {\n\t\t\t\t\t\tterminal.sendText('clear');\n\t\t\t\t\t} else if (platform.isWindows) {\n\t\t\t\t\t\tterminal.sendText('cls');\n\t\t\t\t\t} else {\n\t\t\t\t\t\tterminal.sendText('clear');\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst command = prepareCommand(shell, args.args, !!args.argsCanBeInterpretedByShell, cwdForPrepareCommand, args.env);\n\t\t\tterminal.sendText(command);\n\n\t\t\t// Mark terminal as unused when its session ends, see #112055\n\t\t\tconst sessionListener = this.onDidTerminateDebugSession(s => {\n\t\t\t\tif (s.id === sessionId) {\n\t\t\t\t\tthis._integratedTerminalInstances.free(terminal);\n\t\t\t\t\tsessionListener.dispose();\n\t\t\t\t}\n\t\t\t});\n\n\t\t\treturn shellProcessId;\n\n\t\t} else if (args.kind === 'external') {\n\t\t\treturn runInExternalTerminal(args, await this._configurationService.getConfigProvider());\n\t\t}\n\t\treturn super.$runInTerminal(args, sessionId);\n\t}\n}\n\nlet externalTerminalService: IExternalTerminalService | undefined = undefined;\n\nfunction runInExternalTerminal(args: DebugProtocol.RunInTerminalRequestArguments, configProvider: ExtHostConfigProvider): Promise<number | undefined> {\n\tif (!externalTerminalService) {\n\t\tif (platform.isWindows) {\n\t\t\texternalTerminalService = new WindowsExternalTerminalService();\n\t\t} else if (platform.isMacintosh) {\n\t\t\texternalTerminalService = new MacExternalTerminalService();\n\t\t} else if (platform.isLinux) {\n\t\t\texternalTerminalService = new LinuxExternalTerminalService();\n\t\t} else {\n\t\t\tthrow new Error('external terminals not supported on this platform');\n\t\t}\n\t}\n\tconst config = configProvider.getConfiguration('terminal');\n\treturn externalTerminalService.runInTerminal(args.title!, args.cwd, args.args, args.env || {}, config.external || {});\n}\n\nclass DebugTerminalCollection {\n\t/**\n\t * Delay before a new terminal is a candidate for reuse. See #71850\n\t */\n\tprivate static minUseDelay = 1000;\n\n\tprivate _terminalInstances = new Map<vscode.Terminal, { lastUsedAt: number; config: string }>();\n\n\tpublic async checkout(config: string, name: string, cleanupOthersByName = false) {\n\t\tconst entries = [...this._terminalInstances.entries()];\n\t\tconst promises = entries.map(([terminal, termInfo]) => createCancelablePromise(async ct => {\n\n\t\t\t// Only allow terminals that match the title.  See #123189\n\t\t\tif (terminal.name !== name) {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\tif (termInfo.lastUsedAt !== -1 && await hasChildProcesses(await terminal.processId)) {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\t// important: date check and map operations must be synchronous\n\t\t\tconst now = Date.now();\n\t\t\tif (termInfo.lastUsedAt + DebugTerminalCollection.minUseDelay > now || ct.isCancellationRequested) {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\tif (termInfo.config !== config) {\n\t\t\t\tif (cleanupOthersByName) {\n\t\t\t\t\tterminal.dispose();\n\t\t\t\t}\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\ttermInfo.lastUsedAt = now;\n\t\t\treturn terminal;\n\t\t}));\n\n\t\treturn await firstParallel(promises, (t): t is vscode.Terminal => !!t);\n\t}\n\n\tpublic insert(terminal: vscode.Terminal, termConfig: string) {\n\t\tthis._terminalInstances.set(terminal, { lastUsedAt: Date.now(), config: termConfig });\n\t}\n\n\tpublic free(terminal: vscode.Terminal) {\n\t\tconst info = this._terminalInstances.get(terminal);\n\t\tif (info) {\n\t\t\tinfo.lastUsedAt = -1;\n\t\t}\n\t}\n\n\tpublic onTerminalClosed(terminal: vscode.Terminal) {\n\t\tthis._terminalInstances.delete(terminal);\n\t}\n}\n"],
  "mappings": "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",
  "names": ["terminal"]
}
