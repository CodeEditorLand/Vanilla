{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/api/node/extHostDebugService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport type * as vscode from \"vscode\";\nimport {\n\tcreateCancelablePromise,\n\tfirstParallel,\n\ttimeout,\n} from \"../../../base/common/async.js\";\nimport type { IDisposable } from \"../../../base/common/lifecycle.js\";\nimport * as platform from \"../../../base/common/platform.js\";\nimport * as nls from \"../../../nls.js\";\nimport type { IExternalTerminalService } from \"../../../platform/externalTerminal/common/externalTerminal.js\";\nimport {\n\tLinuxExternalTerminalService,\n\tMacExternalTerminalService,\n\tWindowsExternalTerminalService,\n} from \"../../../platform/externalTerminal/node/externalTerminalService.js\";\nimport type { ISignService } from \"../../../platform/sign/common/sign.js\";\nimport { SignService } from \"../../../platform/sign/node/signService.js\";\nimport type { AbstractDebugAdapter } from \"../../contrib/debug/common/abstractDebugAdapter.js\";\nimport {\n\tExecutableDebugAdapter,\n\tNamedPipeDebugAdapter,\n\tSocketDebugAdapter,\n} from \"../../contrib/debug/node/debugAdapter.js\";\nimport {\n\thasChildProcesses,\n\tprepareCommand,\n} from \"../../contrib/debug/node/terminals.js\";\nimport type { ExtensionDescriptionRegistry } from \"../../services/extensions/common/extensionDescriptionRegistry.js\";\nimport { IExtHostCommands } from \"../common/extHostCommands.js\";\nimport {\n\ttype ExtHostConfigProvider,\n\tIExtHostConfiguration,\n} from \"../common/extHostConfiguration.js\";\nimport {\n\tExtHostDebugServiceBase,\n\ttype ExtHostDebugSession,\n} from \"../common/extHostDebugService.js\";\nimport { IExtHostEditorTabs } from \"../common/extHostEditorTabs.js\";\nimport { IExtHostExtensionService } from \"../common/extHostExtensionService.js\";\nimport { IExtHostRpcService } from \"../common/extHostRpcService.js\";\nimport { IExtHostTerminalService } from \"../common/extHostTerminalService.js\";\nimport { IExtHostTesting } from \"../common/extHostTesting.js\";\nimport {\n\tDebugAdapterExecutable,\n\tDebugAdapterNamedPipeServer,\n\tDebugAdapterServer,\n\tThemeIcon,\n} from \"../common/extHostTypes.js\";\nimport { IExtHostVariableResolverProvider } from \"../common/extHostVariableResolverService.js\";\nimport { IExtHostWorkspace } from \"../common/extHostWorkspace.js\";\n\nexport class ExtHostDebugService extends ExtHostDebugServiceBase {\n\toverride readonly _serviceBrand: undefined;\n\n\tprivate _integratedTerminalInstances = new DebugTerminalCollection();\n\tprivate _terminalDisposedListener: IDisposable | undefined;\n\n\tconstructor(\n\t\t@IExtHostRpcService extHostRpcService: IExtHostRpcService,\n\t\t@IExtHostWorkspace workspaceService: IExtHostWorkspace,\n\t\t@IExtHostExtensionService extensionService: IExtHostExtensionService,\n\t\t@IExtHostConfiguration configurationService: IExtHostConfiguration,\n\t\t@IExtHostTerminalService\n\t\tprivate _terminalService: IExtHostTerminalService,\n\t\t@IExtHostEditorTabs editorTabs: IExtHostEditorTabs,\n\t\t@IExtHostVariableResolverProvider\n\t\tvariableResolver: IExtHostVariableResolverProvider,\n\t\t@IExtHostCommands commands: IExtHostCommands,\n\t\t@IExtHostTesting testing: IExtHostTesting,\n\t) {\n\t\tsuper(\n\t\t\textHostRpcService,\n\t\t\tworkspaceService,\n\t\t\textensionService,\n\t\t\tconfigurationService,\n\t\t\teditorTabs,\n\t\t\tvariableResolver,\n\t\t\tcommands,\n\t\t\ttesting,\n\t\t);\n\t}\n\n\tprotected override createDebugAdapter(\n\t\tadapter: vscode.DebugAdapterDescriptor,\n\t\tsession: ExtHostDebugSession,\n\t): AbstractDebugAdapter | undefined {\n\t\tif (adapter instanceof DebugAdapterExecutable) {\n\t\t\treturn new ExecutableDebugAdapter(\n\t\t\t\tthis.convertExecutableToDto(adapter),\n\t\t\t\tsession.type,\n\t\t\t);\n\t\t} else if (adapter instanceof DebugAdapterServer) {\n\t\t\treturn new SocketDebugAdapter(this.convertServerToDto(adapter));\n\t\t} else if (adapter instanceof DebugAdapterNamedPipeServer) {\n\t\t\treturn new NamedPipeDebugAdapter(\n\t\t\t\tthis.convertPipeServerToDto(adapter),\n\t\t\t);\n\t\t} else {\n\t\t\treturn super.createDebugAdapter(adapter, session);\n\t\t}\n\t}\n\n\tprotected override daExecutableFromPackage(\n\t\tsession: ExtHostDebugSession,\n\t\textensionRegistry: ExtensionDescriptionRegistry,\n\t): DebugAdapterExecutable | undefined {\n\t\tconst dae = ExecutableDebugAdapter.platformAdapterExecutable(\n\t\t\textensionRegistry.getAllExtensionDescriptions(),\n\t\t\tsession.type,\n\t\t);\n\t\tif (dae) {\n\t\t\treturn new DebugAdapterExecutable(\n\t\t\t\tdae.command,\n\t\t\t\tdae.args,\n\t\t\t\tdae.options,\n\t\t\t);\n\t\t}\n\t\treturn undefined;\n\t}\n\n\tprotected override createSignService(): ISignService | undefined {\n\t\treturn new SignService();\n\t}\n\n\tpublic override async $runInTerminal(\n\t\targs: DebugProtocol.RunInTerminalRequestArguments,\n\t\tsessionId: string,\n\t): Promise<number | undefined> {\n\t\tif (args.kind === \"integrated\") {\n\t\t\tif (!this._terminalDisposedListener) {\n\t\t\t\t// React on terminal disposed and check if that is the debug terminal #12956\n\t\t\t\tthis._terminalDisposedListener = this._register(\n\t\t\t\t\tthis._terminalService.onDidCloseTerminal((terminal) => {\n\t\t\t\t\t\tthis._integratedTerminalInstances.onTerminalClosed(\n\t\t\t\t\t\t\tterminal,\n\t\t\t\t\t\t);\n\t\t\t\t\t}),\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tconst configProvider =\n\t\t\t\tawait this._configurationService.getConfigProvider();\n\t\t\tconst shell = this._terminalService.getDefaultShell(true);\n\t\t\tconst shellArgs = this._terminalService.getDefaultShellArgs(true);\n\n\t\t\tconst terminalName =\n\t\t\t\targs.title ||\n\t\t\t\tnls.localize(\"debug.terminal.title\", \"Debug Process\");\n\n\t\t\tconst shellConfig = JSON.stringify({ shell, shellArgs });\n\t\t\tlet terminal = await this._integratedTerminalInstances.checkout(\n\t\t\t\tshellConfig,\n\t\t\t\tterminalName,\n\t\t\t);\n\n\t\t\tlet cwdForPrepareCommand: string | undefined;\n\t\t\tlet giveShellTimeToInitialize = false;\n\n\t\t\tif (terminal) {\n\t\t\t\tcwdForPrepareCommand = args.cwd;\n\t\t\t} else {\n\t\t\t\tconst options: vscode.TerminalOptions = {\n\t\t\t\t\tshellPath: shell,\n\t\t\t\t\tshellArgs: shellArgs,\n\t\t\t\t\tcwd: args.cwd,\n\t\t\t\t\tname: terminalName,\n\t\t\t\t\ticonPath: new ThemeIcon(\"debug\"),\n\t\t\t\t};\n\t\t\t\tgiveShellTimeToInitialize = true;\n\t\t\t\tterminal = this._terminalService.createTerminalFromOptions(\n\t\t\t\t\toptions,\n\t\t\t\t\t{\n\t\t\t\t\t\tisFeatureTerminal: true,\n\t\t\t\t\t\t// Since debug termnials are REPLs, we want shell integration to be enabled.\n\t\t\t\t\t\t// Ignore isFeatureTerminal when evaluating shell integration enablement.\n\t\t\t\t\t\tforceShellIntegration: true,\n\t\t\t\t\t\tuseShellEnvironment: true,\n\t\t\t\t\t},\n\t\t\t\t);\n\t\t\t\tthis._integratedTerminalInstances.insert(terminal, shellConfig);\n\t\t\t}\n\n\t\t\tterminal.show(true);\n\n\t\t\tconst shellProcessId = await terminal.processId;\n\n\t\t\tif (giveShellTimeToInitialize) {\n\t\t\t\t// give a new terminal some time to initialize the shell\n\t\t\t\tawait new Promise((resolve) => setTimeout(resolve, 1000));\n\t\t\t} else {\n\t\t\t\tif (terminal.state.isInteractedWith) {\n\t\t\t\t\tterminal.sendText(\"\\u0003\"); // Ctrl+C for #106743. Not part of the same command for #107969\n\t\t\t\t\tawait timeout(200); // mirroring https://github.com/microsoft/vscode/blob/c67ccc70ece5f472ec25464d3eeb874cfccee9f1/src/vs/workbench/contrib/terminal/browser/terminalInstance.ts#L852-L857\n\t\t\t\t}\n\n\t\t\t\tif (\n\t\t\t\t\tconfigProvider\n\t\t\t\t\t\t.getConfiguration(\"debug.terminal\")\n\t\t\t\t\t\t.get<boolean>(\"clearBeforeReusing\")\n\t\t\t\t) {\n\t\t\t\t\t// clear terminal before reusing it\n\t\t\t\t\tif (\n\t\t\t\t\t\tshell.indexOf(\"powershell\") >= 0 ||\n\t\t\t\t\t\tshell.indexOf(\"pwsh\") >= 0 ||\n\t\t\t\t\t\tshell.indexOf(\"cmd.exe\") >= 0\n\t\t\t\t\t) {\n\t\t\t\t\t\tterminal.sendText(\"cls\");\n\t\t\t\t\t} else if (shell.indexOf(\"bash\") >= 0) {\n\t\t\t\t\t\tterminal.sendText(\"clear\");\n\t\t\t\t\t} else if (platform.isWindows) {\n\t\t\t\t\t\tterminal.sendText(\"cls\");\n\t\t\t\t\t} else {\n\t\t\t\t\t\tterminal.sendText(\"clear\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst command = prepareCommand(\n\t\t\t\tshell,\n\t\t\t\targs.args,\n\t\t\t\t!!args.argsCanBeInterpretedByShell,\n\t\t\t\tcwdForPrepareCommand,\n\t\t\t\targs.env,\n\t\t\t);\n\t\t\tterminal.sendText(command);\n\n\t\t\t// Mark terminal as unused when its session ends, see #112055\n\t\t\tconst sessionListener = this.onDidTerminateDebugSession((s) => {\n\t\t\t\tif (s.id === sessionId) {\n\t\t\t\t\tthis._integratedTerminalInstances.free(terminal);\n\t\t\t\t\tsessionListener.dispose();\n\t\t\t\t}\n\t\t\t});\n\n\t\t\treturn shellProcessId;\n\t\t} else if (args.kind === \"external\") {\n\t\t\treturn runInExternalTerminal(\n\t\t\t\targs,\n\t\t\t\tawait this._configurationService.getConfigProvider(),\n\t\t\t);\n\t\t}\n\t\treturn super.$runInTerminal(args, sessionId);\n\t}\n}\n\nlet externalTerminalService: IExternalTerminalService | undefined;\n\nfunction runInExternalTerminal(\n\targs: DebugProtocol.RunInTerminalRequestArguments,\n\tconfigProvider: ExtHostConfigProvider,\n): Promise<number | undefined> {\n\tif (!externalTerminalService) {\n\t\tif (platform.isWindows) {\n\t\t\texternalTerminalService = new WindowsExternalTerminalService();\n\t\t} else if (platform.isMacintosh) {\n\t\t\texternalTerminalService = new MacExternalTerminalService();\n\t\t} else if (platform.isLinux) {\n\t\t\texternalTerminalService = new LinuxExternalTerminalService();\n\t\t} else {\n\t\t\tthrow new Error(\n\t\t\t\t\"external terminals not supported on this platform\",\n\t\t\t);\n\t\t}\n\t}\n\tconst config = configProvider.getConfiguration(\"terminal\");\n\treturn externalTerminalService.runInTerminal(\n\t\targs.title!,\n\t\targs.cwd,\n\t\targs.args,\n\t\targs.env || {},\n\t\tconfig.external || {},\n\t);\n}\n\nclass DebugTerminalCollection {\n\t/**\n\t * Delay before a new terminal is a candidate for reuse. See #71850\n\t */\n\tprivate static minUseDelay = 1000;\n\n\tprivate _terminalInstances = new Map<\n\t\tvscode.Terminal,\n\t\t{ lastUsedAt: number; config: string }\n\t>();\n\n\tpublic async checkout(\n\t\tconfig: string,\n\t\tname: string,\n\t\tcleanupOthersByName = false,\n\t) {\n\t\tconst entries = [...this._terminalInstances.entries()];\n\t\tconst promises = entries.map(([terminal, termInfo]) =>\n\t\t\tcreateCancelablePromise(async (ct) => {\n\t\t\t\t// Only allow terminals that match the title.  See #123189\n\t\t\t\tif (terminal.name !== name) {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\n\t\t\t\tif (\n\t\t\t\t\ttermInfo.lastUsedAt !== -1 &&\n\t\t\t\t\t(await hasChildProcesses(await terminal.processId))\n\t\t\t\t) {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\n\t\t\t\t// important: date check and map operations must be synchronous\n\t\t\t\tconst now = Date.now();\n\t\t\t\tif (\n\t\t\t\t\ttermInfo.lastUsedAt + DebugTerminalCollection.minUseDelay >\n\t\t\t\t\t\tnow ||\n\t\t\t\t\tct.isCancellationRequested\n\t\t\t\t) {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\n\t\t\t\tif (termInfo.config !== config) {\n\t\t\t\t\tif (cleanupOthersByName) {\n\t\t\t\t\t\tterminal.dispose();\n\t\t\t\t\t}\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\n\t\t\t\ttermInfo.lastUsedAt = now;\n\t\t\t\treturn terminal;\n\t\t\t}),\n\t\t);\n\n\t\treturn await firstParallel(promises, (t): t is vscode.Terminal => !!t);\n\t}\n\n\tpublic insert(terminal: vscode.Terminal, termConfig: string) {\n\t\tthis._terminalInstances.set(terminal, {\n\t\t\tlastUsedAt: Date.now(),\n\t\t\tconfig: termConfig,\n\t\t});\n\t}\n\n\tpublic free(terminal: vscode.Terminal) {\n\t\tconst info = this._terminalInstances.get(terminal);\n\t\tif (info) {\n\t\t\tinfo.lastUsedAt = -1;\n\t\t}\n\t}\n\n\tpublic onTerminalClosed(terminal: vscode.Terminal) {\n\t\tthis._terminalInstances.delete(terminal);\n\t}\n}\n"],
  "mappings": ";;;;;;;;;;;;AAMA;AAAA,EACC;AAAA,EACA;AAAA,EACA;AAAA,OACM;AAEP,YAAY,cAAc;AAC1B,YAAY,SAAS;AAErB;AAAA,EACC;AAAA,EACA;AAAA,EACA;AAAA,OACM;AAEP,SAAS,mBAAmB;AAE5B;AAAA,EACC;AAAA,EACA;AAAA,EACA;AAAA,OACM;AACP;AAAA,EACC;AAAA,EACA;AAAA,OACM;AAEP,SAAS,wBAAwB;AACjC;AAAA,EAEC;AAAA,OACM;AACP;AAAA,EACC;AAAA,OAEM;AACP,SAAS,0BAA0B;AACnC,SAAS,gCAAgC;AACzC,SAAS,0BAA0B;AACnC,SAAS,+BAA+B;AACxC,SAAS,uBAAuB;AAChC;AAAA,EACC;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,OACM;AACP,SAAS,wCAAwC;AACjD,SAAS,yBAAyB;AAE3B,IAAM,sBAAN,cAAkC,wBAAwB;AAAA,EAMhE,YACqB,mBACD,kBACO,kBACH,sBAEf,kBACY,YAEpB,kBACkB,UACD,SAChB;AACD;AAAA,MACC;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACD;AAhBQ;AAAA,EAiBT;AAAA,EArFD,OAwDiE;AAAA;AAAA;AAAA,EAC9C;AAAA,EAEV,+BAA+B,IAAI,wBAAwB;AAAA,EAC3D;AAAA,EA2BW,mBAClB,SACA,SACmC;AACnC,QAAI,mBAAmB,wBAAwB;AAC9C,aAAO,IAAI;AAAA,QACV,KAAK,uBAAuB,OAAO;AAAA,QACnC,QAAQ;AAAA,MACT;AAAA,IACD,WAAW,mBAAmB,oBAAoB;AACjD,aAAO,IAAI,mBAAmB,KAAK,mBAAmB,OAAO,CAAC;AAAA,IAC/D,WAAW,mBAAmB,6BAA6B;AAC1D,aAAO,IAAI;AAAA,QACV,KAAK,uBAAuB,OAAO;AAAA,MACpC;AAAA,IACD,OAAO;AACN,aAAO,MAAM,mBAAmB,SAAS,OAAO;AAAA,IACjD;AAAA,EACD;AAAA,EAEmB,wBAClB,SACA,mBACqC;AACrC,UAAM,MAAM,uBAAuB;AAAA,MAClC,kBAAkB,4BAA4B;AAAA,MAC9C,QAAQ;AAAA,IACT;AACA,QAAI,KAAK;AACR,aAAO,IAAI;AAAA,QACV,IAAI;AAAA,QACJ,IAAI;AAAA,QACJ,IAAI;AAAA,MACL;AAAA,IACD;AACA,WAAO;AAAA,EACR;AAAA,EAEmB,oBAA8C;AAChE,WAAO,IAAI,YAAY;AAAA,EACxB;AAAA,EAEA,MAAsB,eACrB,MACA,WAC8B;AAC9B,QAAI,KAAK,SAAS,cAAc;AAC/B,UAAI,CAAC,KAAK,2BAA2B;AAEpC,aAAK,4BAA4B,KAAK;AAAA,UACrC,KAAK,iBAAiB,mBAAmB,CAACA,cAAa;AACtD,iBAAK,6BAA6B;AAAA,cACjCA;AAAA,YACD;AAAA,UACD,CAAC;AAAA,QACF;AAAA,MACD;AAEA,YAAM,iBACL,MAAM,KAAK,sBAAsB,kBAAkB;AACpD,YAAM,QAAQ,KAAK,iBAAiB,gBAAgB,IAAI;AACxD,YAAM,YAAY,KAAK,iBAAiB,oBAAoB,IAAI;AAEhE,YAAM,eACL,KAAK,SACL,IAAI,SAAS,wBAAwB,eAAe;AAErD,YAAM,cAAc,KAAK,UAAU,EAAE,OAAO,UAAU,CAAC;AACvD,UAAI,WAAW,MAAM,KAAK,6BAA6B;AAAA,QACtD;AAAA,QACA;AAAA,MACD;AAEA,UAAI;AACJ,UAAI,4BAA4B;AAEhC,UAAI,UAAU;AACb,+BAAuB,KAAK;AAAA,MAC7B,OAAO;AACN,cAAM,UAAkC;AAAA,UACvC,WAAW;AAAA,UACX;AAAA,UACA,KAAK,KAAK;AAAA,UACV,MAAM;AAAA,UACN,UAAU,IAAI,UAAU,OAAO;AAAA,QAChC;AACA,oCAA4B;AAC5B,mBAAW,KAAK,iBAAiB;AAAA,UAChC;AAAA,UACA;AAAA,YACC,mBAAmB;AAAA;AAAA;AAAA,YAGnB,uBAAuB;AAAA,YACvB,qBAAqB;AAAA,UACtB;AAAA,QACD;AACA,aAAK,6BAA6B,OAAO,UAAU,WAAW;AAAA,MAC/D;AAEA,eAAS,KAAK,IAAI;AAElB,YAAM,iBAAiB,MAAM,SAAS;AAEtC,UAAI,2BAA2B;AAE9B,cAAM,IAAI,QAAQ,CAAC,YAAY,WAAW,SAAS,GAAI,CAAC;AAAA,MACzD,OAAO;AACN,YAAI,SAAS,MAAM,kBAAkB;AACpC,mBAAS,SAAS,GAAQ;AAC1B,gBAAM,QAAQ,GAAG;AAAA,QAClB;AAEA,YACC,eACE,iBAAiB,gBAAgB,EACjC,IAAa,oBAAoB,GAClC;AAED,cACC,MAAM,QAAQ,YAAY,KAAK,KAC/B,MAAM,QAAQ,MAAM,KAAK,KACzB,MAAM,QAAQ,SAAS,KAAK,GAC3B;AACD,qBAAS,SAAS,KAAK;AAAA,UACxB,WAAW,MAAM,QAAQ,MAAM,KAAK,GAAG;AACtC,qBAAS,SAAS,OAAO;AAAA,UAC1B,WAAW,SAAS,WAAW;AAC9B,qBAAS,SAAS,KAAK;AAAA,UACxB,OAAO;AACN,qBAAS,SAAS,OAAO;AAAA,UAC1B;AAAA,QACD;AAAA,MACD;AAEA,YAAM,UAAU;AAAA,QACf;AAAA,QACA,KAAK;AAAA,QACL,CAAC,CAAC,KAAK;AAAA,QACP;AAAA,QACA,KAAK;AAAA,MACN;AACA,eAAS,SAAS,OAAO;AAGzB,YAAM,kBAAkB,KAAK,2BAA2B,CAAC,MAAM;AAC9D,YAAI,EAAE,OAAO,WAAW;AACvB,eAAK,6BAA6B,KAAK,QAAQ;AAC/C,0BAAgB,QAAQ;AAAA,QACzB;AAAA,MACD,CAAC;AAED,aAAO;AAAA,IACR,WAAW,KAAK,SAAS,YAAY;AACpC,aAAO;AAAA,QACN;AAAA,QACA,MAAM,KAAK,sBAAsB,kBAAkB;AAAA,MACpD;AAAA,IACD;AACA,WAAO,MAAM,eAAe,MAAM,SAAS;AAAA,EAC5C;AACD;AAhMa,sBAAN;AAAA,EAOJ;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EAEA;AAAA,EACA;AAAA,EAEA;AAAA,EACA;AAAA,GAjBU;AAkMb,IAAI;AAEJ,SAAS,sBACR,MACA,gBAC8B;AAC9B,MAAI,CAAC,yBAAyB;AAC7B,QAAI,SAAS,WAAW;AACvB,gCAA0B,IAAI,+BAA+B;AAAA,IAC9D,WAAW,SAAS,aAAa;AAChC,gCAA0B,IAAI,2BAA2B;AAAA,IAC1D,WAAW,SAAS,SAAS;AAC5B,gCAA0B,IAAI,6BAA6B;AAAA,IAC5D,OAAO;AACN,YAAM,IAAI;AAAA,QACT;AAAA,MACD;AAAA,IACD;AAAA,EACD;AACA,QAAM,SAAS,eAAe,iBAAiB,UAAU;AACzD,SAAO,wBAAwB;AAAA,IAC9B,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK,OAAO,CAAC;AAAA,IACb,OAAO,YAAY,CAAC;AAAA,EACrB;AACD;AAzBS;AA2BT,MAAM,wBAAwB;AAAA,EAvR9B,OAuR8B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAI7B,OAAe,cAAc;AAAA,EAErB,qBAAqB,oBAAI,IAG/B;AAAA,EAEF,MAAa,SACZ,QACA,MACA,sBAAsB,OACrB;AACD,UAAM,UAAU,CAAC,GAAG,KAAK,mBAAmB,QAAQ,CAAC;AACrD,UAAM,WAAW,QAAQ;AAAA,MAAI,CAAC,CAAC,UAAU,QAAQ,MAChD,wBAAwB,OAAO,OAAO;AAErC,YAAI,SAAS,SAAS,MAAM;AAC3B,iBAAO;AAAA,QACR;AAEA,YACC,SAAS,eAAe,MACvB,MAAM,kBAAkB,MAAM,SAAS,SAAS,GAChD;AACD,iBAAO;AAAA,QACR;AAGA,cAAM,MAAM,KAAK,IAAI;AACrB,YACC,SAAS,aAAa,wBAAwB,cAC7C,OACD,GAAG,yBACF;AACD,iBAAO;AAAA,QACR;AAEA,YAAI,SAAS,WAAW,QAAQ;AAC/B,cAAI,qBAAqB;AACxB,qBAAS,QAAQ;AAAA,UAClB;AACA,iBAAO;AAAA,QACR;AAEA,iBAAS,aAAa;AACtB,eAAO;AAAA,MACR,CAAC;AAAA,IACF;AAEA,WAAO,MAAM,cAAc,UAAU,CAAC,MAA4B,CAAC,CAAC,CAAC;AAAA,EACtE;AAAA,EAEO,OAAO,UAA2B,YAAoB;AAC5D,SAAK,mBAAmB,IAAI,UAAU;AAAA,MACrC,YAAY,KAAK,IAAI;AAAA,MACrB,QAAQ;AAAA,IACT,CAAC;AAAA,EACF;AAAA,EAEO,KAAK,UAA2B;AACtC,UAAM,OAAO,KAAK,mBAAmB,IAAI,QAAQ;AACjD,QAAI,MAAM;AACT,WAAK,aAAa;AAAA,IACnB;AAAA,EACD;AAAA,EAEO,iBAAiB,UAA2B;AAClD,SAAK,mBAAmB,OAAO,QAAQ;AAAA,EACxC;AACD;",
  "names": ["terminal"]
}
