{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/api/node/proxyResolver.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n// ESM-comment-begin\n// import * as http from 'http';\n// import * as https from 'https';\n// import * as tls from 'tls';\n// import * as net from 'net';\n// ESM-comment-end\n\nimport { IExtHostWorkspaceProvider } from '../common/extHostWorkspace.js';\nimport { ExtHostConfigProvider } from '../common/extHostConfiguration.js';\nimport { MainThreadTelemetryShape } from '../common/extHost.protocol.js';\nimport { IExtensionHostInitData } from '../../services/extensions/common/extensionHostProtocol.js';\nimport { ExtHostExtensionService } from './extHostExtensionService.js';\nimport { URI } from '../../../base/common/uri.js';\nimport { ILogService, LogLevel as LogServiceLevel } from '../../../platform/log/common/log.js';\nimport { IExtensionDescription } from '../../../platform/extensions/common/extensions.js';\nimport { LogLevel, createHttpPatch, createProxyResolver, createTlsPatch, ProxySupportSetting, ProxyAgentParams, createNetPatch, loadSystemCertificates } from '@vscode/proxy-agent';\nimport { AuthInfo } from '../../../platform/request/common/request.js';\n\n// ESM-uncomment-begin\nimport { createRequire } from 'node:module';\nconst require = createRequire(import.meta.url);\nconst http = require('http');\nconst https = require('https');\nconst tls = require('tls');\nconst net = require('net');\n// ESM-uncomment-end\n\nconst systemCertificatesV2Default = false;\n\nexport function connectProxyResolver(\n\textHostWorkspace: IExtHostWorkspaceProvider,\n\tconfigProvider: ExtHostConfigProvider,\n\textensionService: ExtHostExtensionService,\n\textHostLogService: ILogService,\n\tmainThreadTelemetry: MainThreadTelemetryShape,\n\tinitData: IExtensionHostInitData,\n) {\n\tconst useHostProxy = initData.environment.useHostProxy;\n\tconst doUseHostProxy = typeof useHostProxy === 'boolean' ? useHostProxy : !initData.remote.isRemote;\n\tconst params: ProxyAgentParams = {\n\t\tresolveProxy: url => extHostWorkspace.resolveProxy(url),\n\t\tlookupProxyAuthorization: lookupProxyAuthorization.bind(undefined, extHostWorkspace, extHostLogService, mainThreadTelemetry, configProvider, {}, {}, initData.remote.isRemote, doUseHostProxy),\n\t\tgetProxyURL: () => configProvider.getConfiguration('http').get('proxy'),\n\t\tgetProxySupport: () => configProvider.getConfiguration('http').get<ProxySupportSetting>('proxySupport') || 'off',\n\t\tgetNoProxyConfig: () => configProvider.getConfiguration('http').get<string[]>('noProxy') || [],\n\t\taddCertificatesV1: () => certSettingV1(configProvider),\n\t\taddCertificatesV2: () => certSettingV2(configProvider),\n\t\tlog: extHostLogService,\n\t\tgetLogLevel: () => {\n\t\t\tconst level = extHostLogService.getLevel();\n\t\t\tswitch (level) {\n\t\t\t\tcase LogServiceLevel.Trace: return LogLevel.Trace;\n\t\t\t\tcase LogServiceLevel.Debug: return LogLevel.Debug;\n\t\t\t\tcase LogServiceLevel.Info: return LogLevel.Info;\n\t\t\t\tcase LogServiceLevel.Warning: return LogLevel.Warning;\n\t\t\t\tcase LogServiceLevel.Error: return LogLevel.Error;\n\t\t\t\tcase LogServiceLevel.Off: return LogLevel.Off;\n\t\t\t\tdefault: return never(level);\n\t\t\t}\n\t\t\tfunction never(level: never) {\n\t\t\t\textHostLogService.error('Unknown log level', level);\n\t\t\t\treturn LogLevel.Debug;\n\t\t\t}\n\t\t},\n\t\tproxyResolveTelemetry: () => { },\n\t\tuseHostProxy: doUseHostProxy,\n\t\tloadAdditionalCertificates: async () => {\n\t\t\tconst promises: Promise<string[]>[] = [];\n\t\t\tif (initData.remote.isRemote) {\n\t\t\t\tpromises.push(loadSystemCertificates({ log: extHostLogService }));\n\t\t\t}\n\t\t\tif (doUseHostProxy) {\n\t\t\t\textHostLogService.trace('ProxyResolver#loadAdditionalCertificates: Loading certificates from main process');\n\t\t\t\tconst certs = extHostWorkspace.loadCertificates(); // Loading from main process to share cache.\n\t\t\t\tcerts.then(certs => extHostLogService.trace('ProxyResolver#loadAdditionalCertificates: Loaded certificates from main process', certs.length));\n\t\t\t\tpromises.push(certs);\n\t\t\t}\n\t\t\t// Using https.globalAgent because it is shared with proxy.test.ts and mutable.\n\t\t\tif (initData.environment.extensionTestsLocationURI && (https.globalAgent as any).testCertificates?.length) {\n\t\t\t\textHostLogService.trace('ProxyResolver#loadAdditionalCertificates: Loading test certificates');\n\t\t\t\tpromises.push(Promise.resolve((https.globalAgent as any).testCertificates as string[]));\n\t\t\t}\n\t\t\treturn (await Promise.all(promises)).flat();\n\t\t},\n\t\tenv: process.env,\n\t};\n\tconst resolveProxy = createProxyResolver(params);\n\tconst lookup = createPatchedModules(params, resolveProxy);\n\treturn configureModuleLoading(extensionService, lookup);\n}\n\nfunction createPatchedModules(params: ProxyAgentParams, resolveProxy: ReturnType<typeof createProxyResolver>) {\n\n\tfunction mergeModules(module: any, patch: any) {\n\t\treturn Object.assign(module.default || module, patch);\n\t}\n\n\treturn {\n\t\thttp: mergeModules(http, createHttpPatch(params, http, resolveProxy)),\n\t\thttps: mergeModules(https, createHttpPatch(params, https, resolveProxy)),\n\t\tnet: mergeModules(net, createNetPatch(params, net)),\n\t\ttls: mergeModules(tls, createTlsPatch(params, tls))\n\t};\n}\n\nfunction certSettingV1(configProvider: ExtHostConfigProvider) {\n\tconst http = configProvider.getConfiguration('http');\n\treturn !http.get<boolean>('experimental.systemCertificatesV2', systemCertificatesV2Default) && !!http.get<boolean>('systemCertificates');\n}\n\nfunction certSettingV2(configProvider: ExtHostConfigProvider) {\n\tconst http = configProvider.getConfiguration('http');\n\treturn !!http.get<boolean>('experimental.systemCertificatesV2', systemCertificatesV2Default) && !!http.get<boolean>('systemCertificates');\n}\n\nconst modulesCache = new Map<IExtensionDescription | undefined, { http?: typeof http; https?: typeof https }>();\nfunction configureModuleLoading(extensionService: ExtHostExtensionService, lookup: ReturnType<typeof createPatchedModules>): Promise<void> {\n\treturn extensionService.getExtensionPathIndex()\n\t\t.then(extensionPaths => {\n\t\t\tconst node_module = require('module');\n\t\t\tconst original = node_module._load;\n\t\t\tnode_module._load = function load(request: string, parent: { filename: string }, isMain: boolean) {\n\t\t\t\tif (request === 'net') {\n\t\t\t\t\treturn lookup.net;\n\t\t\t\t}\n\n\t\t\t\tif (request === 'tls') {\n\t\t\t\t\treturn lookup.tls;\n\t\t\t\t}\n\n\t\t\t\tif (request !== 'http' && request !== 'https') {\n\t\t\t\t\treturn original.apply(this, arguments);\n\t\t\t\t}\n\n\t\t\t\tconst ext = extensionPaths.findSubstr(URI.file(parent.filename));\n\t\t\t\tlet cache = modulesCache.get(ext);\n\t\t\t\tif (!cache) {\n\t\t\t\t\tmodulesCache.set(ext, cache = {});\n\t\t\t\t}\n\t\t\t\tif (!cache[request]) {\n\t\t\t\t\tconst mod = lookup[request];\n\t\t\t\t\tcache[request] = <any>{ ...mod }; // Copy to work around #93167.\n\t\t\t\t}\n\t\t\t\treturn cache[request];\n\t\t\t};\n\t\t});\n}\n\nasync function lookupProxyAuthorization(\n\textHostWorkspace: IExtHostWorkspaceProvider,\n\textHostLogService: ILogService,\n\tmainThreadTelemetry: MainThreadTelemetryShape,\n\tconfigProvider: ExtHostConfigProvider,\n\tproxyAuthenticateCache: Record<string, string | string[] | undefined>,\n\tbasicAuthCache: Record<string, string | undefined>,\n\tisRemote: boolean,\n\tuseHostProxy: boolean,\n\tproxyURL: string,\n\tproxyAuthenticate: string | string[] | undefined,\n\tstate: { kerberosRequested?: boolean; basicAuthCacheUsed?: boolean; basicAuthAttempt?: number }\n): Promise<string | undefined> {\n\tconst cached = proxyAuthenticateCache[proxyURL];\n\tif (proxyAuthenticate) {\n\t\tproxyAuthenticateCache[proxyURL] = proxyAuthenticate;\n\t}\n\textHostLogService.trace('ProxyResolver#lookupProxyAuthorization callback', `proxyURL:${proxyURL}`, `proxyAuthenticate:${proxyAuthenticate}`, `proxyAuthenticateCache:${cached}`);\n\tconst header = proxyAuthenticate || cached;\n\tconst authenticate = Array.isArray(header) ? header : typeof header === 'string' ? [header] : [];\n\tsendTelemetry(mainThreadTelemetry, authenticate, isRemote);\n\tif (authenticate.some(a => /^(Negotiate|Kerberos)( |$)/i.test(a)) && !state.kerberosRequested) {\n\t\tstate.kerberosRequested = true;\n\n\t\ttry {\n\t\t\tconst kerberos = await import('kerberos');\n\t\t\tconst url = new URL(proxyURL);\n\t\t\tconst spn = configProvider.getConfiguration('http').get<string>('proxyKerberosServicePrincipal')\n\t\t\t\t|| (process.platform === 'win32' ? `HTTP/${url.hostname}` : `HTTP@${url.hostname}`);\n\t\t\textHostLogService.debug('ProxyResolver#lookupProxyAuthorization Kerberos authentication lookup', `proxyURL:${proxyURL}`, `spn:${spn}`);\n\t\t\tconst client = await kerberos.initializeClient(spn);\n\t\t\tconst response = await client.step('');\n\t\t\treturn 'Negotiate ' + response;\n\t\t} catch (err) {\n\t\t\textHostLogService.debug('ProxyResolver#lookupProxyAuthorization Kerberos authentication failed', err);\n\t\t}\n\n\t\tif (isRemote && useHostProxy) {\n\t\t\textHostLogService.debug('ProxyResolver#lookupProxyAuthorization Kerberos authentication lookup on host', `proxyURL:${proxyURL}`);\n\t\t\tconst auth = await extHostWorkspace.lookupKerberosAuthorization(proxyURL);\n\t\t\tif (auth) {\n\t\t\t\treturn 'Negotiate ' + auth;\n\t\t\t}\n\t\t}\n\t}\n\tconst basicAuthHeader = authenticate.find(a => /^Basic( |$)/i.test(a));\n\tif (basicAuthHeader) {\n\t\ttry {\n\t\t\tconst cachedAuth = basicAuthCache[proxyURL];\n\t\t\tif (cachedAuth) {\n\t\t\t\tif (state.basicAuthCacheUsed) {\n\t\t\t\t\textHostLogService.debug('ProxyResolver#lookupProxyAuthorization Basic authentication deleting cached credentials', `proxyURL:${proxyURL}`);\n\t\t\t\t\tdelete basicAuthCache[proxyURL];\n\t\t\t\t} else {\n\t\t\t\t\textHostLogService.debug('ProxyResolver#lookupProxyAuthorization Basic authentication using cached credentials', `proxyURL:${proxyURL}`);\n\t\t\t\t\tstate.basicAuthCacheUsed = true;\n\t\t\t\t\treturn cachedAuth;\n\t\t\t\t}\n\t\t\t}\n\t\t\tstate.basicAuthAttempt = (state.basicAuthAttempt || 0) + 1;\n\t\t\tconst realm = / realm=\"([^\"]+)\"/i.exec(basicAuthHeader)?.[1];\n\t\t\textHostLogService.debug('ProxyResolver#lookupProxyAuthorization Basic authentication lookup', `proxyURL:${proxyURL}`, `realm:${realm}`);\n\t\t\tconst url = new URL(proxyURL);\n\t\t\tconst authInfo: AuthInfo = {\n\t\t\t\tscheme: 'basic',\n\t\t\t\thost: url.hostname,\n\t\t\t\tport: Number(url.port),\n\t\t\t\trealm: realm || '',\n\t\t\t\tisProxy: true,\n\t\t\t\tattempt: state.basicAuthAttempt,\n\t\t\t};\n\t\t\tconst credentials = await extHostWorkspace.lookupAuthorization(authInfo);\n\t\t\tif (credentials) {\n\t\t\t\textHostLogService.debug('ProxyResolver#lookupProxyAuthorization Basic authentication received credentials', `proxyURL:${proxyURL}`, `realm:${realm}`);\n\t\t\t\tconst auth = 'Basic ' + Buffer.from(`${credentials.username}:${credentials.password}`).toString('base64');\n\t\t\t\tbasicAuthCache[proxyURL] = auth;\n\t\t\t\treturn auth;\n\t\t\t} else {\n\t\t\t\textHostLogService.debug('ProxyResolver#lookupProxyAuthorization Basic authentication received no credentials', `proxyURL:${proxyURL}`, `realm:${realm}`);\n\t\t\t}\n\t\t} catch (err) {\n\t\t\textHostLogService.error('ProxyResolver#lookupProxyAuthorization Basic authentication failed', err);\n\t\t}\n\t}\n\treturn undefined;\n}\n\ntype ProxyAuthenticationClassification = {\n\towner: 'chrmarti';\n\tcomment: 'Data about proxy authentication requests';\n\tauthenticationType: { classification: 'PublicNonPersonalData'; purpose: 'FeatureInsight'; comment: 'Type of the authentication requested' };\n\textensionHostType: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'Type of the extension host' };\n};\n\ntype ProxyAuthenticationEvent = {\n\tauthenticationType: string;\n\textensionHostType: string;\n};\n\nlet telemetrySent = false;\n\nfunction sendTelemetry(mainThreadTelemetry: MainThreadTelemetryShape, authenticate: string[], isRemote: boolean) {\n\tif (telemetrySent || !authenticate.length) {\n\t\treturn;\n\t}\n\ttelemetrySent = true;\n\n\tmainThreadTelemetry.$publicLog2<ProxyAuthenticationEvent, ProxyAuthenticationClassification>('proxyAuthenticationRequest', {\n\t\tauthenticationType: authenticate.map(a => a.split(' ')[0]).join(','),\n\t\textensionHostType: isRemote ? 'remote' : 'local',\n\t});\n}\n"],
  "mappings": "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",
  "names": ["require", "level", "certs", "http"]
}
