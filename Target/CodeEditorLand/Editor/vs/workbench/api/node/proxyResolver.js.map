{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/api/node/proxyResolver.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n// ESM-comment-begin\n// import * as http from 'http';\n// import * as https from 'https';\n// import * as tls from 'tls';\n// import * as net from 'net';\n// ESM-comment-end\n\nimport {\n\tLogLevel,\n\ttype ProxyAgentParams,\n\ttype ProxySupportSetting,\n\tcreateHttpPatch,\n\tcreateNetPatch,\n\tcreateProxyResolver,\n\tcreateTlsPatch,\n\tloadSystemCertificates,\n} from \"@vscode/proxy-agent\";\nimport { URI } from \"../../../base/common/uri.js\";\nimport type { IExtensionDescription } from \"../../../platform/extensions/common/extensions.js\";\nimport {\n\ttype ILogService,\n\tLogLevel as LogServiceLevel,\n} from \"../../../platform/log/common/log.js\";\nimport type { AuthInfo } from \"../../../platform/request/common/request.js\";\nimport type { IExtensionHostInitData } from \"../../services/extensions/common/extensionHostProtocol.js\";\nimport type { MainThreadTelemetryShape } from \"../common/extHost.protocol.js\";\nimport type { ExtHostConfigProvider } from \"../common/extHostConfiguration.js\";\nimport type { IExtHostWorkspaceProvider } from \"../common/extHostWorkspace.js\";\nimport type { ExtHostExtensionService } from \"./extHostExtensionService.js\";\n\n// ESM-uncomment-begin\nimport { createRequire } from \"node:module\";\nconst require = createRequire(import.meta.url);\nconst http = require(\"http\");\nconst https = require(\"https\");\nconst tls = require(\"tls\");\nconst net = require(\"net\");\n// ESM-uncomment-end\n\nconst systemCertificatesV2Default = false;\n\nexport function connectProxyResolver(\n\textHostWorkspace: IExtHostWorkspaceProvider,\n\tconfigProvider: ExtHostConfigProvider,\n\textensionService: ExtHostExtensionService,\n\textHostLogService: ILogService,\n\tmainThreadTelemetry: MainThreadTelemetryShape,\n\tinitData: IExtensionHostInitData,\n) {\n\tconst useHostProxy = initData.environment.useHostProxy;\n\tconst doUseHostProxy =\n\t\ttypeof useHostProxy === \"boolean\"\n\t\t\t? useHostProxy\n\t\t\t: !initData.remote.isRemote;\n\tconst params: ProxyAgentParams = {\n\t\tresolveProxy: (url) => extHostWorkspace.resolveProxy(url),\n\t\tlookupProxyAuthorization: lookupProxyAuthorization.bind(\n\t\t\tundefined,\n\t\t\textHostWorkspace,\n\t\t\textHostLogService,\n\t\t\tmainThreadTelemetry,\n\t\t\tconfigProvider,\n\t\t\t{},\n\t\t\t{},\n\t\t\tinitData.remote.isRemote,\n\t\t\tdoUseHostProxy,\n\t\t),\n\t\tgetProxyURL: () => configProvider.getConfiguration(\"http\").get(\"proxy\"),\n\t\tgetProxySupport: () =>\n\t\t\tconfigProvider\n\t\t\t\t.getConfiguration(\"http\")\n\t\t\t\t.get<ProxySupportSetting>(\"proxySupport\") || \"off\",\n\t\tgetNoProxyConfig: () =>\n\t\t\tconfigProvider.getConfiguration(\"http\").get<string[]>(\"noProxy\") ||\n\t\t\t[],\n\t\taddCertificatesV1: () => certSettingV1(configProvider),\n\t\taddCertificatesV2: () => certSettingV2(configProvider),\n\t\tlog: extHostLogService,\n\t\tgetLogLevel: () => {\n\t\t\tconst level = extHostLogService.getLevel();\n\t\t\tswitch (level) {\n\t\t\t\tcase LogServiceLevel.Trace:\n\t\t\t\t\treturn LogLevel.Trace;\n\t\t\t\tcase LogServiceLevel.Debug:\n\t\t\t\t\treturn LogLevel.Debug;\n\t\t\t\tcase LogServiceLevel.Info:\n\t\t\t\t\treturn LogLevel.Info;\n\t\t\t\tcase LogServiceLevel.Warning:\n\t\t\t\t\treturn LogLevel.Warning;\n\t\t\t\tcase LogServiceLevel.Error:\n\t\t\t\t\treturn LogLevel.Error;\n\t\t\t\tcase LogServiceLevel.Off:\n\t\t\t\t\treturn LogLevel.Off;\n\t\t\t\tdefault:\n\t\t\t\t\treturn never(level);\n\t\t\t}\n\t\t\tfunction never(level: never) {\n\t\t\t\textHostLogService.error(\"Unknown log level\", level);\n\t\t\t\treturn LogLevel.Debug;\n\t\t\t}\n\t\t},\n\t\tproxyResolveTelemetry: () => {},\n\t\tuseHostProxy: doUseHostProxy,\n\t\tloadAdditionalCertificates: async () => {\n\t\t\tconst promises: Promise<string[]>[] = [];\n\t\t\tif (initData.remote.isRemote) {\n\t\t\t\tpromises.push(\n\t\t\t\t\tloadSystemCertificates({ log: extHostLogService }),\n\t\t\t\t);\n\t\t\t}\n\t\t\tif (doUseHostProxy) {\n\t\t\t\textHostLogService.trace(\n\t\t\t\t\t\"ProxyResolver#loadAdditionalCertificates: Loading certificates from main process\",\n\t\t\t\t);\n\t\t\t\tconst certs = extHostWorkspace.loadCertificates(); // Loading from main process to share cache.\n\t\t\t\tcerts.then((certs) =>\n\t\t\t\t\textHostLogService.trace(\n\t\t\t\t\t\t\"ProxyResolver#loadAdditionalCertificates: Loaded certificates from main process\",\n\t\t\t\t\t\tcerts.length,\n\t\t\t\t\t),\n\t\t\t\t);\n\t\t\t\tpromises.push(certs);\n\t\t\t}\n\t\t\t// Using https.globalAgent because it is shared with proxy.test.ts and mutable.\n\t\t\tif (\n\t\t\t\tinitData.environment.extensionTestsLocationURI &&\n\t\t\t\t(https.globalAgent as any).testCertificates?.length\n\t\t\t) {\n\t\t\t\textHostLogService.trace(\n\t\t\t\t\t\"ProxyResolver#loadAdditionalCertificates: Loading test certificates\",\n\t\t\t\t);\n\t\t\t\tpromises.push(\n\t\t\t\t\tPromise.resolve(\n\t\t\t\t\t\t(https.globalAgent as any).testCertificates as string[],\n\t\t\t\t\t),\n\t\t\t\t);\n\t\t\t}\n\t\t\treturn (await Promise.all(promises)).flat();\n\t\t},\n\t\tenv: process.env,\n\t};\n\tconst resolveProxy = createProxyResolver(params);\n\tconst lookup = createPatchedModules(params, resolveProxy);\n\treturn configureModuleLoading(extensionService, lookup);\n}\n\nfunction createPatchedModules(\n\tparams: ProxyAgentParams,\n\tresolveProxy: ReturnType<typeof createProxyResolver>,\n) {\n\tfunction mergeModules(module: any, patch: any) {\n\t\treturn Object.assign(module.default || module, patch);\n\t}\n\n\treturn {\n\t\thttp: mergeModules(http, createHttpPatch(params, http, resolveProxy)),\n\t\thttps: mergeModules(\n\t\t\thttps,\n\t\t\tcreateHttpPatch(params, https, resolveProxy),\n\t\t),\n\t\tnet: mergeModules(net, createNetPatch(params, net)),\n\t\ttls: mergeModules(tls, createTlsPatch(params, tls)),\n\t};\n}\n\nfunction certSettingV1(configProvider: ExtHostConfigProvider) {\n\tconst http = configProvider.getConfiguration(\"http\");\n\treturn (\n\t\t!http.get<boolean>(\n\t\t\t\"experimental.systemCertificatesV2\",\n\t\t\tsystemCertificatesV2Default,\n\t\t) && !!http.get<boolean>(\"systemCertificates\")\n\t);\n}\n\nfunction certSettingV2(configProvider: ExtHostConfigProvider) {\n\tconst http = configProvider.getConfiguration(\"http\");\n\treturn (\n\t\t!!http.get<boolean>(\n\t\t\t\"experimental.systemCertificatesV2\",\n\t\t\tsystemCertificatesV2Default,\n\t\t) && !!http.get<boolean>(\"systemCertificates\")\n\t);\n}\n\nconst modulesCache = new Map<\n\tIExtensionDescription | undefined,\n\t{ http?: typeof http; https?: typeof https }\n>();\nfunction configureModuleLoading(\n\textensionService: ExtHostExtensionService,\n\tlookup: ReturnType<typeof createPatchedModules>,\n): Promise<void> {\n\treturn extensionService.getExtensionPathIndex().then((extensionPaths) => {\n\t\tconst node_module = require(\"module\");\n\t\tconst original = node_module._load;\n\t\tnode_module._load = function load(\n\t\t\trequest: string,\n\t\t\tparent: { filename: string },\n\t\t\tisMain: boolean,\n\t\t) {\n\t\t\tif (request === \"net\") {\n\t\t\t\treturn lookup.net;\n\t\t\t}\n\n\t\t\tif (request === \"tls\") {\n\t\t\t\treturn lookup.tls;\n\t\t\t}\n\n\t\t\tif (request !== \"http\" && request !== \"https\") {\n\t\t\t\treturn original.apply(this, arguments);\n\t\t\t}\n\n\t\t\tconst ext = extensionPaths.findSubstr(URI.file(parent.filename));\n\t\t\tlet cache = modulesCache.get(ext);\n\t\t\tif (!cache) {\n\t\t\t\tmodulesCache.set(ext, (cache = {}));\n\t\t\t}\n\t\t\tif (!cache[request]) {\n\t\t\t\tconst mod = lookup[request];\n\t\t\t\tcache[request] = <any>{ ...mod }; // Copy to work around #93167.\n\t\t\t}\n\t\t\treturn cache[request];\n\t\t};\n\t});\n}\n\nasync function lookupProxyAuthorization(\n\textHostWorkspace: IExtHostWorkspaceProvider,\n\textHostLogService: ILogService,\n\tmainThreadTelemetry: MainThreadTelemetryShape,\n\tconfigProvider: ExtHostConfigProvider,\n\tproxyAuthenticateCache: Record<string, string | string[] | undefined>,\n\tbasicAuthCache: Record<string, string | undefined>,\n\tisRemote: boolean,\n\tuseHostProxy: boolean,\n\tproxyURL: string,\n\tproxyAuthenticate: string | string[] | undefined,\n\tstate: {\n\t\tkerberosRequested?: boolean;\n\t\tbasicAuthCacheUsed?: boolean;\n\t\tbasicAuthAttempt?: number;\n\t},\n): Promise<string | undefined> {\n\tconst cached = proxyAuthenticateCache[proxyURL];\n\tif (proxyAuthenticate) {\n\t\tproxyAuthenticateCache[proxyURL] = proxyAuthenticate;\n\t}\n\textHostLogService.trace(\n\t\t\"ProxyResolver#lookupProxyAuthorization callback\",\n\t\t`proxyURL:${proxyURL}`,\n\t\t`proxyAuthenticate:${proxyAuthenticate}`,\n\t\t`proxyAuthenticateCache:${cached}`,\n\t);\n\tconst header = proxyAuthenticate || cached;\n\tconst authenticate = Array.isArray(header)\n\t\t? header\n\t\t: typeof header === \"string\"\n\t\t\t? [header]\n\t\t\t: [];\n\tsendTelemetry(mainThreadTelemetry, authenticate, isRemote);\n\tif (\n\t\tauthenticate.some((a) => /^(Negotiate|Kerberos)( |$)/i.test(a)) &&\n\t\t!state.kerberosRequested\n\t) {\n\t\tstate.kerberosRequested = true;\n\n\t\ttry {\n\t\t\tconst kerberos = await import(\"kerberos\");\n\t\t\tconst url = new URL(proxyURL);\n\t\t\tconst spn =\n\t\t\t\tconfigProvider\n\t\t\t\t\t.getConfiguration(\"http\")\n\t\t\t\t\t.get<string>(\"proxyKerberosServicePrincipal\") ||\n\t\t\t\t(process.platform === \"win32\"\n\t\t\t\t\t? `HTTP/${url.hostname}`\n\t\t\t\t\t: `HTTP@${url.hostname}`);\n\t\t\textHostLogService.debug(\n\t\t\t\t\"ProxyResolver#lookupProxyAuthorization Kerberos authentication lookup\",\n\t\t\t\t`proxyURL:${proxyURL}`,\n\t\t\t\t`spn:${spn}`,\n\t\t\t);\n\t\t\tconst client = await kerberos.initializeClient(spn);\n\t\t\tconst response = await client.step(\"\");\n\t\t\treturn \"Negotiate \" + response;\n\t\t} catch (err) {\n\t\t\textHostLogService.debug(\n\t\t\t\t\"ProxyResolver#lookupProxyAuthorization Kerberos authentication failed\",\n\t\t\t\terr,\n\t\t\t);\n\t\t}\n\n\t\tif (isRemote && useHostProxy) {\n\t\t\textHostLogService.debug(\n\t\t\t\t\"ProxyResolver#lookupProxyAuthorization Kerberos authentication lookup on host\",\n\t\t\t\t`proxyURL:${proxyURL}`,\n\t\t\t);\n\t\t\tconst auth =\n\t\t\t\tawait extHostWorkspace.lookupKerberosAuthorization(proxyURL);\n\t\t\tif (auth) {\n\t\t\t\treturn \"Negotiate \" + auth;\n\t\t\t}\n\t\t}\n\t}\n\tconst basicAuthHeader = authenticate.find((a) => /^Basic( |$)/i.test(a));\n\tif (basicAuthHeader) {\n\t\ttry {\n\t\t\tconst cachedAuth = basicAuthCache[proxyURL];\n\t\t\tif (cachedAuth) {\n\t\t\t\tif (state.basicAuthCacheUsed) {\n\t\t\t\t\textHostLogService.debug(\n\t\t\t\t\t\t\"ProxyResolver#lookupProxyAuthorization Basic authentication deleting cached credentials\",\n\t\t\t\t\t\t`proxyURL:${proxyURL}`,\n\t\t\t\t\t);\n\t\t\t\t\tdelete basicAuthCache[proxyURL];\n\t\t\t\t} else {\n\t\t\t\t\textHostLogService.debug(\n\t\t\t\t\t\t\"ProxyResolver#lookupProxyAuthorization Basic authentication using cached credentials\",\n\t\t\t\t\t\t`proxyURL:${proxyURL}`,\n\t\t\t\t\t);\n\t\t\t\t\tstate.basicAuthCacheUsed = true;\n\t\t\t\t\treturn cachedAuth;\n\t\t\t\t}\n\t\t\t}\n\t\t\tstate.basicAuthAttempt = (state.basicAuthAttempt || 0) + 1;\n\t\t\tconst realm = / realm=\"([^\"]+)\"/i.exec(basicAuthHeader)?.[1];\n\t\t\textHostLogService.debug(\n\t\t\t\t\"ProxyResolver#lookupProxyAuthorization Basic authentication lookup\",\n\t\t\t\t`proxyURL:${proxyURL}`,\n\t\t\t\t`realm:${realm}`,\n\t\t\t);\n\t\t\tconst url = new URL(proxyURL);\n\t\t\tconst authInfo: AuthInfo = {\n\t\t\t\tscheme: \"basic\",\n\t\t\t\thost: url.hostname,\n\t\t\t\tport: Number(url.port),\n\t\t\t\trealm: realm || \"\",\n\t\t\t\tisProxy: true,\n\t\t\t\tattempt: state.basicAuthAttempt,\n\t\t\t};\n\t\t\tconst credentials =\n\t\t\t\tawait extHostWorkspace.lookupAuthorization(authInfo);\n\t\t\tif (credentials) {\n\t\t\t\textHostLogService.debug(\n\t\t\t\t\t\"ProxyResolver#lookupProxyAuthorization Basic authentication received credentials\",\n\t\t\t\t\t`proxyURL:${proxyURL}`,\n\t\t\t\t\t`realm:${realm}`,\n\t\t\t\t);\n\t\t\t\tconst auth =\n\t\t\t\t\t\"Basic \" +\n\t\t\t\t\tBuffer.from(\n\t\t\t\t\t\t`${credentials.username}:${credentials.password}`,\n\t\t\t\t\t).toString(\"base64\");\n\t\t\t\tbasicAuthCache[proxyURL] = auth;\n\t\t\t\treturn auth;\n\t\t\t} else {\n\t\t\t\textHostLogService.debug(\n\t\t\t\t\t\"ProxyResolver#lookupProxyAuthorization Basic authentication received no credentials\",\n\t\t\t\t\t`proxyURL:${proxyURL}`,\n\t\t\t\t\t`realm:${realm}`,\n\t\t\t\t);\n\t\t\t}\n\t\t} catch (err) {\n\t\t\textHostLogService.error(\n\t\t\t\t\"ProxyResolver#lookupProxyAuthorization Basic authentication failed\",\n\t\t\t\terr,\n\t\t\t);\n\t\t}\n\t}\n\treturn undefined;\n}\n\ntype ProxyAuthenticationClassification = {\n\towner: \"chrmarti\";\n\tcomment: \"Data about proxy authentication requests\";\n\tauthenticationType: {\n\t\tclassification: \"PublicNonPersonalData\";\n\t\tpurpose: \"FeatureInsight\";\n\t\tcomment: \"Type of the authentication requested\";\n\t};\n\textensionHostType: {\n\t\tclassification: \"SystemMetaData\";\n\t\tpurpose: \"FeatureInsight\";\n\t\tcomment: \"Type of the extension host\";\n\t};\n};\n\ntype ProxyAuthenticationEvent = {\n\tauthenticationType: string;\n\textensionHostType: string;\n};\n\nlet telemetrySent = false;\n\nfunction sendTelemetry(\n\tmainThreadTelemetry: MainThreadTelemetryShape,\n\tauthenticate: string[],\n\tisRemote: boolean,\n) {\n\tif (telemetrySent || !authenticate.length) {\n\t\treturn;\n\t}\n\ttelemetrySent = true;\n\n\tmainThreadTelemetry.$publicLog2<\n\t\tProxyAuthenticationEvent,\n\t\tProxyAuthenticationClassification\n\t>(\"proxyAuthenticationRequest\", {\n\t\tauthenticationType: authenticate.map((a) => a.split(\" \")[0]).join(\",\"),\n\t\textensionHostType: isRemote ? \"remote\" : \"local\",\n\t});\n}\n"],
  "mappings": "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",
  "names": ["require", "level", "certs", "http"]
}
