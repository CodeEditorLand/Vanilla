{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/api/node/extHostExtensionService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as performance from '../../../base/common/performance.js';\nimport { createApiFactoryAndRegisterActors } from '../common/extHost.api.impl.js';\nimport { RequireInterceptor } from '../common/extHostRequireInterceptor.js';\nimport { ExtensionActivationTimesBuilder } from '../common/extHostExtensionActivator.js';\nimport { connectProxyResolver } from './proxyResolver.js';\nimport { AbstractExtHostExtensionService } from '../common/extHostExtensionService.js';\nimport { ExtHostDownloadService } from './extHostDownloadService.js';\nimport { URI } from '../../../base/common/uri.js';\nimport { Schemas } from '../../../base/common/network.js';\nimport { IExtensionDescription } from '../../../platform/extensions/common/extensions.js';\nimport { ExtensionRuntime } from '../common/extHostTypes.js';\nimport { CLIServer } from './extHostCLIServer.js';\nimport { realpathSync } from '../../../base/node/extpath.js';\nimport { ExtHostConsoleForwarder } from './extHostConsoleForwarder.js';\nimport { ExtHostDiskFileSystemProvider } from './extHostDiskFileSystemProvider.js';\n// ESM-uncomment-begin\nimport { createRequire } from 'node:module';\nconst require = createRequire(import.meta.url);\n// ESM-uncomment-end\n\nclass NodeModuleRequireInterceptor extends RequireInterceptor {\n\n\tprotected _installInterceptor(): void {\n\t\tconst that = this;\n\t\tconst node_module = require('module');\n\t\tconst originalLoad = node_module._load;\n\t\tnode_module._load = function load(request: string, parent: { filename: string }, isMain: boolean) {\n\t\t\trequest = applyAlternatives(request);\n\t\t\tif (!that._factories.has(request)) {\n\t\t\t\treturn originalLoad.apply(this, arguments);\n\t\t\t}\n\t\t\treturn that._factories.get(request)!.load(\n\t\t\t\trequest,\n\t\t\t\tURI.file(realpathSync(parent.filename)),\n\t\t\t\trequest => originalLoad.apply(this, [request, parent, isMain])\n\t\t\t);\n\t\t};\n\n\t\tconst originalLookup = node_module._resolveLookupPaths;\n\t\tnode_module._resolveLookupPaths = (request: string, parent: unknown) => {\n\t\t\treturn originalLookup.call(this, applyAlternatives(request), parent);\n\t\t};\n\n\t\tconst originalResolveFilename = node_module._resolveFilename;\n\t\tnode_module._resolveFilename = function resolveFilename(request: string, parent: unknown, isMain: boolean, options?: { paths?: string[] }) {\n\t\t\tif (request === 'vsda' && Array.isArray(options?.paths) && options.paths.length === 0) {\n\t\t\t\t// ESM: ever since we moved to ESM, `require.main` will be `undefined` for extensions\n\t\t\t\t// Some extensions have been using `require.resolve('vsda', { paths: require.main.paths })`\n\t\t\t\t// to find the `vsda` module in our app root. To be backwards compatible with this pattern,\n\t\t\t\t// we help by filling in the `paths` array with the node modules paths of the current module.\n\t\t\t\toptions.paths = node_module._nodeModulePaths(import.meta.dirname);\n\t\t\t}\n\t\t\treturn originalResolveFilename.call(this, request, parent, isMain, options);\n\t\t};\n\n\t\tconst applyAlternatives = (request: string) => {\n\t\t\tfor (const alternativeModuleName of that._alternatives) {\n\t\t\t\tconst alternative = alternativeModuleName(request);\n\t\t\t\tif (alternative) {\n\t\t\t\t\trequest = alternative;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn request;\n\t\t};\n\t}\n}\n\nexport class ExtHostExtensionService extends AbstractExtHostExtensionService {\n\n\treadonly extensionRuntime = ExtensionRuntime.Node;\n\n\tprotected async _beforeAlmostReadyToRunExtensions(): Promise<void> {\n\t\t// make sure console.log calls make it to the render\n\t\tthis._instaService.createInstance(ExtHostConsoleForwarder);\n\n\t\t// initialize API and register actors\n\t\tconst extensionApiFactory = this._instaService.invokeFunction(createApiFactoryAndRegisterActors);\n\n\t\t// Register Download command\n\t\tthis._instaService.createInstance(ExtHostDownloadService);\n\n\t\t// Register CLI Server for ipc\n\t\tif (this._initData.remote.isRemote && this._initData.remote.authority) {\n\t\t\tconst cliServer = this._instaService.createInstance(CLIServer);\n\t\t\tprocess.env['VSCODE_IPC_HOOK_CLI'] = cliServer.ipcHandlePath;\n\t\t}\n\n\t\t// Register local file system shortcut\n\t\tthis._instaService.createInstance(ExtHostDiskFileSystemProvider);\n\n\t\t// Module loading tricks\n\t\tconst interceptor = this._instaService.createInstance(NodeModuleRequireInterceptor, extensionApiFactory, { mine: this._myRegistry, all: this._globalRegistry });\n\t\tawait interceptor.install();\n\t\tperformance.mark('code/extHost/didInitAPI');\n\n\t\t// Do this when extension service exists, but extensions are not being activated yet.\n\t\tconst configProvider = await this._extHostConfiguration.getConfigProvider();\n\t\tawait connectProxyResolver(this._extHostWorkspace, configProvider, this, this._logService, this._mainThreadTelemetryProxy, this._initData);\n\t\tperformance.mark('code/extHost/didInitProxyResolver');\n\t}\n\n\tprotected _getEntryPoint(extensionDescription: IExtensionDescription): string | undefined {\n\t\treturn extensionDescription.main;\n\t}\n\n\tprotected async _loadCommonJSModule<T>(extension: IExtensionDescription | null, module: URI, activationTimesBuilder: ExtensionActivationTimesBuilder): Promise<T> {\n\t\tif (module.scheme !== Schemas.file) {\n\t\t\tthrow new Error(`Cannot load URI: '${module}', must be of file-scheme`);\n\t\t}\n\t\tlet r: T | null = null;\n\t\tactivationTimesBuilder.codeLoadingStart();\n\t\tthis._logService.trace(`ExtensionService#loadCommonJSModule ${module.toString(true)}`);\n\t\tthis._logService.flush();\n\t\tconst extensionId = extension?.identifier.value;\n\t\tif (extension) {\n\t\t\tawait this._extHostLocalizationService.initializeLocalizedMessages(extension);\n\t\t}\n\t\ttry {\n\t\t\tif (extensionId) {\n\t\t\t\tperformance.mark(`code/extHost/willLoadExtensionCode/${extensionId}`);\n\t\t\t}\n\t\t\tr = <T>(require.__$__nodeRequire ?? require /* TODO@esm drop the first */)(module.fsPath);\n\t\t} finally {\n\t\t\tif (extensionId) {\n\t\t\t\tperformance.mark(`code/extHost/didLoadExtensionCode/${extensionId}`);\n\t\t\t}\n\t\t\tactivationTimesBuilder.codeLoadingStop();\n\t\t}\n\t\treturn r;\n\t}\n\n\tpublic async $setRemoteEnvironment(env: { [key: string]: string | null }): Promise<void> {\n\t\tif (!this._initData.remote.isRemote) {\n\t\t\treturn;\n\t\t}\n\n\t\tfor (const key in env) {\n\t\t\tconst value = env[key];\n\t\t\tif (value === null) {\n\t\t\t\tdelete process.env[key];\n\t\t\t} else {\n\t\t\t\tprocess.env[key] = value;\n\t\t\t}\n\t\t}\n\t}\n}\n"],
  "mappings": "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",
  "names": ["require", "request"]
}
