{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/api/node/extHostSearch.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport type * as vscode from \"vscode\";\nimport {\n\tDisposableStore,\n\ttype IDisposable,\n\ttoDisposable,\n} from \"../../../base/common/lifecycle.js\";\nimport { Schemas } from \"../../../base/common/network.js\";\nimport { URI } from \"../../../base/common/uri.js\";\nimport * as pfs from \"../../../base/node/pfs.js\";\nimport { ILogService } from \"../../../platform/log/common/log.js\";\nimport {\n\ttype IFileQuery,\n\ttype IRawFileQuery,\n\ttype ISearchCompleteStats,\n\ttype ISerializedSearchProgressItem,\n\ttype ITextQuery,\n\tisSerializedFileMatch,\n} from \"../../services/search/common/search.js\";\nimport type { TextSearchManager } from \"../../services/search/common/textSearchManager.js\";\nimport { SearchService } from \"../../services/search/node/rawSearchService.js\";\nimport { RipgrepSearchProvider } from \"../../services/search/node/ripgrepSearchProvider.js\";\nimport { OutputChannel } from \"../../services/search/node/ripgrepSearchUtils.js\";\nimport { NativeTextSearchManager } from \"../../services/search/node/textSearchManager.js\";\nimport { IExtHostConfiguration } from \"../common/extHostConfiguration.js\";\nimport { IExtHostInitDataService } from \"../common/extHostInitDataService.js\";\nimport { IExtHostRpcService } from \"../common/extHostRpcService.js\";\nimport { ExtHostSearch, reviveQuery } from \"../common/extHostSearch.js\";\nimport { IURITransformerService } from \"../common/extHostUriTransformerService.js\";\n\nexport class NativeExtHostSearch extends ExtHostSearch implements IDisposable {\n\tprotected _pfs: typeof pfs = pfs; // allow extending for tests\n\n\tprivate _internalFileSearchHandle = -1;\n\tprivate _internalFileSearchProvider: SearchService | null = null;\n\n\tprivate _registeredEHSearchProvider = false;\n\n\tprivate _numThreadsPromise: Promise<number | undefined> | undefined;\n\n\tprivate readonly _disposables = new DisposableStore();\n\n\tprivate isDisposed = false;\n\n\tconstructor(\n\t\t@IExtHostRpcService extHostRpc: IExtHostRpcService,\n\t\t@IExtHostInitDataService initData: IExtHostInitDataService,\n\t\t@IURITransformerService _uriTransformer: IURITransformerService,\n\t\t@IExtHostConfiguration\n\t\tprivate readonly configurationService: IExtHostConfiguration,\n\t\t@ILogService _logService: ILogService,\n\t) {\n\t\tsuper(extHostRpc, _uriTransformer, _logService);\n\t\tthis.getNumThreads = this.getNumThreads.bind(this);\n\t\tthis.getNumThreadsCached = this.getNumThreadsCached.bind(this);\n\t\tthis.handleConfigurationChanged =\n\t\t\tthis.handleConfigurationChanged.bind(this);\n\t\tconst outputChannel = new OutputChannel(\n\t\t\t\"RipgrepSearchUD\",\n\t\t\tthis._logService,\n\t\t);\n\t\tthis._disposables.add(\n\t\t\tthis.registerTextSearchProvider(\n\t\t\t\tSchemas.vscodeUserData,\n\t\t\t\tnew RipgrepSearchProvider(\n\t\t\t\t\toutputChannel,\n\t\t\t\t\tthis.getNumThreadsCached,\n\t\t\t\t),\n\t\t\t),\n\t\t);\n\t\tif (initData.remote.isRemote && initData.remote.authority) {\n\t\t\tthis._registerEHSearchProviders();\n\t\t}\n\n\t\tconfigurationService.getConfigProvider().then((provider) => {\n\t\t\tif (this.isDisposed) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tthis._disposables.add(\n\t\t\t\tprovider.onDidChangeConfiguration(\n\t\t\t\t\tthis.handleConfigurationChanged,\n\t\t\t\t),\n\t\t\t);\n\t\t});\n\t}\n\n\tprivate handleConfigurationChanged(event: vscode.ConfigurationChangeEvent) {\n\t\tif (!event.affectsConfiguration(\"search\")) {\n\t\t\treturn;\n\t\t}\n\t\tthis._numThreadsPromise = undefined;\n\t}\n\n\tasync getNumThreads(): Promise<number | undefined> {\n\t\tconst configProvider =\n\t\t\tawait this.configurationService.getConfigProvider();\n\t\tconst numThreads = configProvider\n\t\t\t.getConfiguration(\"search\")\n\t\t\t.get<number>(\"ripgrep.maxThreads\");\n\t\treturn numThreads;\n\t}\n\n\tasync getNumThreadsCached(): Promise<number | undefined> {\n\t\tif (!this._numThreadsPromise) {\n\t\t\tthis._numThreadsPromise = this.getNumThreads();\n\t\t}\n\t\treturn this._numThreadsPromise;\n\t}\n\n\tdispose(): void {\n\t\tthis.isDisposed = true;\n\t\tthis._disposables.dispose();\n\t}\n\n\toverride $enableExtensionHostSearch(): void {\n\t\tthis._registerEHSearchProviders();\n\t}\n\n\tprivate _registerEHSearchProviders(): void {\n\t\tif (this._registeredEHSearchProvider) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis._registeredEHSearchProvider = true;\n\t\tconst outputChannel = new OutputChannel(\n\t\t\t\"RipgrepSearchEH\",\n\t\t\tthis._logService,\n\t\t);\n\t\tthis._disposables.add(\n\t\t\tthis.registerTextSearchProvider(\n\t\t\t\tSchemas.file,\n\t\t\t\tnew RipgrepSearchProvider(\n\t\t\t\t\toutputChannel,\n\t\t\t\t\tthis.getNumThreadsCached,\n\t\t\t\t),\n\t\t\t),\n\t\t);\n\t\tthis._disposables.add(\n\t\t\tthis.registerInternalFileSearchProvider(\n\t\t\t\tSchemas.file,\n\t\t\t\tnew SearchService(\n\t\t\t\t\t\"fileSearchProvider\",\n\t\t\t\t\tthis.getNumThreadsCached,\n\t\t\t\t),\n\t\t\t),\n\t\t);\n\t}\n\n\tprivate registerInternalFileSearchProvider(\n\t\tscheme: string,\n\t\tprovider: SearchService,\n\t): IDisposable {\n\t\tconst handle = this._handlePool++;\n\t\tthis._internalFileSearchProvider = provider;\n\t\tthis._internalFileSearchHandle = handle;\n\t\tthis._proxy.$registerFileSearchProvider(\n\t\t\thandle,\n\t\t\tthis._transformScheme(scheme),\n\t\t);\n\t\treturn toDisposable(() => {\n\t\t\tthis._internalFileSearchProvider = null;\n\t\t\tthis._proxy.$unregisterProvider(handle);\n\t\t});\n\t}\n\n\toverride $provideFileSearchResults(\n\t\thandle: number,\n\t\tsession: number,\n\t\trawQuery: IRawFileQuery,\n\t\ttoken: vscode.CancellationToken,\n\t): Promise<ISearchCompleteStats> {\n\t\tconst query = reviveQuery(rawQuery);\n\t\tif (handle === this._internalFileSearchHandle) {\n\t\t\tconst start = Date.now();\n\t\t\treturn this.doInternalFileSearch(\n\t\t\t\thandle,\n\t\t\t\tsession,\n\t\t\t\tquery,\n\t\t\t\ttoken,\n\t\t\t).then((result) => {\n\t\t\t\tconst elapsed = Date.now() - start;\n\t\t\t\tthis._logService.debug(\n\t\t\t\t\t`Ext host file search time: ${elapsed}ms`,\n\t\t\t\t);\n\t\t\t\treturn result;\n\t\t\t});\n\t\t}\n\n\t\treturn super.$provideFileSearchResults(\n\t\t\thandle,\n\t\t\tsession,\n\t\t\trawQuery,\n\t\t\ttoken,\n\t\t);\n\t}\n\n\toverride async doInternalFileSearchWithCustomCallback(\n\t\trawQuery: IFileQuery,\n\t\ttoken: vscode.CancellationToken,\n\t\thandleFileMatch: (data: URI[]) => void,\n\t): Promise<ISearchCompleteStats> {\n\t\tconst onResult = (ev: ISerializedSearchProgressItem) => {\n\t\t\tif (isSerializedFileMatch(ev)) {\n\t\t\t\tev = [ev];\n\t\t\t}\n\n\t\t\tif (Array.isArray(ev)) {\n\t\t\t\thandleFileMatch(ev.map((m) => URI.file(m.path)));\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (ev.message) {\n\t\t\t\tthis._logService.debug(\"ExtHostSearch\", ev.message);\n\t\t\t}\n\t\t};\n\n\t\tif (!this._internalFileSearchProvider) {\n\t\t\tthrow new Error(\"No internal file search handler\");\n\t\t}\n\t\tconst numThreads = await this.getNumThreadsCached();\n\t\treturn <Promise<ISearchCompleteStats>>(\n\t\t\tthis._internalFileSearchProvider.doFileSearch(\n\t\t\t\trawQuery,\n\t\t\t\tnumThreads,\n\t\t\t\tonResult,\n\t\t\t\ttoken,\n\t\t\t)\n\t\t);\n\t}\n\n\tprivate async doInternalFileSearch(\n\t\thandle: number,\n\t\tsession: number,\n\t\trawQuery: IFileQuery,\n\t\ttoken: vscode.CancellationToken,\n\t): Promise<ISearchCompleteStats> {\n\t\treturn this.doInternalFileSearchWithCustomCallback(\n\t\t\trawQuery,\n\t\t\ttoken,\n\t\t\t(data) => {\n\t\t\t\tthis._proxy.$handleFileMatch(handle, session, data);\n\t\t\t},\n\t\t);\n\t}\n\n\toverride $clearCache(cacheKey: string): Promise<void> {\n\t\tthis._internalFileSearchProvider?.clearCache(cacheKey);\n\n\t\treturn super.$clearCache(cacheKey);\n\t}\n\n\tprotected override createTextSearchManager(\n\t\tquery: ITextQuery,\n\t\tprovider: vscode.TextSearchProviderNew,\n\t): TextSearchManager {\n\t\treturn new NativeTextSearchManager(\n\t\t\tquery,\n\t\t\tprovider,\n\t\t\tundefined,\n\t\t\t\"textSearchProvider\",\n\t\t);\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
