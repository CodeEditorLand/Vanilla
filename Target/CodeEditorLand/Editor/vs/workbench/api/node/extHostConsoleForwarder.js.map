{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/api/node/extHostConsoleForwarder.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { NativeLogMarkers } from \"../../services/extensions/common/extensionHostProtocol.js\";\nimport { AbstractExtHostConsoleForwarder } from \"../common/extHostConsoleForwarder.js\";\nimport { IExtHostInitDataService } from \"../common/extHostInitDataService.js\";\nimport { IExtHostRpcService } from \"../common/extHostRpcService.js\";\n\nconst MAX_STREAM_BUFFER_LENGTH = 1024 * 1024;\n\nexport class ExtHostConsoleForwarder extends AbstractExtHostConsoleForwarder {\n\tprivate _isMakingConsoleCall = false;\n\n\tconstructor(\n\t\t@IExtHostRpcService extHostRpc: IExtHostRpcService,\n\t\t@IExtHostInitDataService initData: IExtHostInitDataService,\n\t) {\n\t\tsuper(extHostRpc, initData);\n\n\t\tthis._wrapStream(\"stderr\", \"error\");\n\t\tthis._wrapStream(\"stdout\", \"log\");\n\t}\n\n\tprotected override _nativeConsoleLogMessage(\n\t\tmethod: \"log\" | \"info\" | \"warn\" | \"error\" | \"debug\",\n\t\toriginal: (...args: any[]) => void,\n\t\targs: IArguments,\n\t) {\n\t\tconst stream =\n\t\t\tmethod === \"error\" || method === \"warn\"\n\t\t\t\t? process.stderr\n\t\t\t\t: process.stdout;\n\t\tthis._isMakingConsoleCall = true;\n\t\tstream.write(`\\n${NativeLogMarkers.Start}\\n`);\n\t\toriginal.apply(console, args as any);\n\t\tstream.write(`\\n${NativeLogMarkers.End}\\n`);\n\t\tthis._isMakingConsoleCall = false;\n\t}\n\n\t/**\n\t * Wraps process.stderr/stdout.write() so that it is transmitted to the\n\t * renderer or CLI. It both calls through to the original method as well\n\t * as to console.log with complete lines so that they're made available\n\t * to the debugger/CLI.\n\t */\n\tprivate _wrapStream(\n\t\tstreamName: \"stdout\" | \"stderr\",\n\t\tseverity: \"log\" | \"warn\" | \"error\",\n\t) {\n\t\tconst stream = process[streamName];\n\t\tconst original = stream.write;\n\n\t\tlet buf = \"\";\n\n\t\tObject.defineProperty(stream, \"write\", {\n\t\t\tset: () => {},\n\t\t\tget:\n\t\t\t\t() =>\n\t\t\t\t(\n\t\t\t\t\tchunk: Uint8Array | string,\n\t\t\t\t\tencoding?: BufferEncoding,\n\t\t\t\t\tcallback?: (err?: Error) => void,\n\t\t\t\t) => {\n\t\t\t\t\tif (!this._isMakingConsoleCall) {\n\t\t\t\t\t\tbuf += (chunk as any).toString(encoding);\n\t\t\t\t\t\tconst eol =\n\t\t\t\t\t\t\tbuf.length > MAX_STREAM_BUFFER_LENGTH\n\t\t\t\t\t\t\t\t? buf.length\n\t\t\t\t\t\t\t\t: buf.lastIndexOf(\"\\n\");\n\t\t\t\t\t\tif (eol !== -1) {\n\t\t\t\t\t\t\tconsole[severity](buf.slice(0, eol));\n\t\t\t\t\t\t\tbuf = buf.slice(eol + 1);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\toriginal.call(stream, chunk, encoding, callback);\n\t\t\t\t},\n\t\t});\n\t}\n}\n"],
  "mappings": ";;;;;;;;;;;;AAKA,SAAS,wBAAwB;AACjC,SAAS,uCAAuC;AAChD,SAAS,+BAA+B;AACxC,SAAS,0BAA0B;AAEnC,MAAM,2BAA2B,OAAO;AAEjC,IAAM,0BAAN,cAAsC,gCAAgC;AAAA,EAZ7E,OAY6E;AAAA;AAAA;AAAA,EACpE,uBAAuB;AAAA,EAE/B,YACqB,YACK,UACxB;AACD,UAAM,YAAY,QAAQ;AAE1B,SAAK,YAAY,UAAU,OAAO;AAClC,SAAK,YAAY,UAAU,KAAK;AAAA,EACjC;AAAA,EAEmB,yBAClB,QACA,UACA,MACC;AACD,UAAM,SACL,WAAW,WAAW,WAAW,SAC9B,QAAQ,SACR,QAAQ;AACZ,SAAK,uBAAuB;AAC5B,WAAO,MAAM;AAAA,EAAK,iBAAiB,KAAK;AAAA,CAAI;AAC5C,aAAS,MAAM,SAAS,IAAW;AACnC,WAAO,MAAM;AAAA,EAAK,iBAAiB,GAAG;AAAA,CAAI;AAC1C,SAAK,uBAAuB;AAAA,EAC7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQQ,YACP,YACA,UACC;AACD,UAAM,SAAS,QAAQ,UAAU;AACjC,UAAM,WAAW,OAAO;AAExB,QAAI,MAAM;AAEV,WAAO,eAAe,QAAQ,SAAS;AAAA,MACtC,KAAK,6BAAM;AAAA,MAAC,GAAP;AAAA,MACL,KACC,6BACA,CACC,OACA,UACA,aACI;AACJ,YAAI,CAAC,KAAK,sBAAsB;AAC/B,iBAAQ,MAAc,SAAS,QAAQ;AACvC,gBAAM,MACL,IAAI,SAAS,2BACV,IAAI,SACJ,IAAI,YAAY,IAAI;AACxB,cAAI,QAAQ,IAAI;AACf,oBAAQ,QAAQ,EAAE,IAAI,MAAM,GAAG,GAAG,CAAC;AACnC,kBAAM,IAAI,MAAM,MAAM,CAAC;AAAA,UACxB;AAAA,QACD;AAEA,iBAAS,KAAK,QAAQ,OAAO,UAAU,QAAQ;AAAA,MAChD,GAnBA;AAAA,IAoBF,CAAC;AAAA,EACF;AACD;AArEa,0BAAN;AAAA,EAIJ;AAAA,EACA;AAAA,GALU;",
  "names": []
}
