{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/api/node/extHostTask.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as path from '../../../base/common/path.js';\n\nimport { URI, UriComponents } from '../../../base/common/uri.js';\nimport { win32 } from '../../../base/node/processes.js';\nimport * as types from '../common/extHostTypes.js';\nimport { IExtHostWorkspace } from '../common/extHostWorkspace.js';\nimport type * as vscode from 'vscode';\nimport * as tasks from '../common/shared/tasks.js';\nimport { IExtHostDocumentsAndEditors } from '../common/extHostDocumentsAndEditors.js';\nimport { IExtHostConfiguration } from '../common/extHostConfiguration.js';\nimport { IWorkspaceFolder, WorkspaceFolder } from '../../../platform/workspace/common/workspace.js';\nimport { IExtensionDescription } from '../../../platform/extensions/common/extensions.js';\nimport { IExtHostTerminalService } from '../common/extHostTerminalService.js';\nimport { IExtHostRpcService } from '../common/extHostRpcService.js';\nimport { IExtHostInitDataService } from '../common/extHostInitDataService.js';\nimport { ExtHostTaskBase, TaskHandleDTO, TaskDTO, CustomExecutionDTO, HandlerData } from '../common/extHostTask.js';\nimport { Schemas } from '../../../base/common/network.js';\nimport { ILogService } from '../../../platform/log/common/log.js';\nimport { IExtHostApiDeprecationService } from '../common/extHostApiDeprecationService.js';\nimport * as resources from '../../../base/common/resources.js';\nimport { homedir } from 'os';\nimport { IExtHostVariableResolverProvider } from '../common/extHostVariableResolverService.js';\n\nexport class ExtHostTask extends ExtHostTaskBase {\n\tconstructor(\n\t\t@IExtHostRpcService extHostRpc: IExtHostRpcService,\n\t\t@IExtHostInitDataService initData: IExtHostInitDataService,\n\t\t@IExtHostWorkspace private readonly workspaceService: IExtHostWorkspace,\n\t\t@IExtHostDocumentsAndEditors editorService: IExtHostDocumentsAndEditors,\n\t\t@IExtHostConfiguration configurationService: IExtHostConfiguration,\n\t\t@IExtHostTerminalService extHostTerminalService: IExtHostTerminalService,\n\t\t@ILogService logService: ILogService,\n\t\t@IExtHostApiDeprecationService deprecationService: IExtHostApiDeprecationService,\n\t\t@IExtHostVariableResolverProvider private readonly variableResolver: IExtHostVariableResolverProvider,\n\t) {\n\t\tsuper(extHostRpc, initData, workspaceService, editorService, configurationService, extHostTerminalService, logService, deprecationService);\n\t\tif (initData.remote.isRemote && initData.remote.authority) {\n\t\t\tthis.registerTaskSystem(Schemas.vscodeRemote, {\n\t\t\t\tscheme: Schemas.vscodeRemote,\n\t\t\t\tauthority: initData.remote.authority,\n\t\t\t\tplatform: process.platform\n\t\t\t});\n\t\t} else {\n\t\t\tthis.registerTaskSystem(Schemas.file, {\n\t\t\t\tscheme: Schemas.file,\n\t\t\t\tauthority: '',\n\t\t\t\tplatform: process.platform\n\t\t\t});\n\t\t}\n\t\tthis._proxy.$registerSupportedExecutions(true, true, true);\n\t}\n\n\tpublic async executeTask(extension: IExtensionDescription, task: vscode.Task): Promise<vscode.TaskExecution> {\n\t\tconst tTask = (task as types.Task);\n\n\t\tif (!task.execution && (tTask._id === undefined)) {\n\t\t\tthrow new Error('Tasks to execute must include an execution');\n\t\t}\n\n\t\t// We have a preserved ID. So the task didn't change.\n\t\tif (tTask._id !== undefined) {\n\t\t\t// Always get the task execution first to prevent timing issues when retrieving it later\n\t\t\tconst handleDto = TaskHandleDTO.from(tTask, this.workspaceService);\n\t\t\tconst executionDTO = await this._proxy.$getTaskExecution(handleDto);\n\t\t\tif (executionDTO.task === undefined) {\n\t\t\t\tthrow new Error('Task from execution DTO is undefined');\n\t\t\t}\n\t\t\tconst execution = await this.getTaskExecution(executionDTO, task);\n\t\t\tthis._proxy.$executeTask(handleDto).catch(() => { /* The error here isn't actionable. */ });\n\t\t\treturn execution;\n\t\t} else {\n\t\t\tconst dto = TaskDTO.from(task, extension);\n\t\t\tif (dto === undefined) {\n\t\t\t\treturn Promise.reject(new Error('Task is not valid'));\n\t\t\t}\n\n\t\t\t// If this task is a custom execution, then we need to save it away\n\t\t\t// in the provided custom execution map that is cleaned up after the\n\t\t\t// task is executed.\n\t\t\tif (CustomExecutionDTO.is(dto.execution)) {\n\t\t\t\tawait this.addCustomExecution(dto, task, false);\n\t\t\t}\n\t\t\t// Always get the task execution first to prevent timing issues when retrieving it later\n\t\t\tconst execution = await this.getTaskExecution(await this._proxy.$getTaskExecution(dto), task);\n\t\t\tthis._proxy.$executeTask(dto).catch(() => { /* The error here isn't actionable. */ });\n\t\t\treturn execution;\n\t\t}\n\t}\n\n\tprotected provideTasksInternal(validTypes: { [key: string]: boolean }, taskIdPromises: Promise<void>[], handler: HandlerData, value: vscode.Task[] | null | undefined): { tasks: tasks.ITaskDTO[]; extension: IExtensionDescription } {\n\t\tconst taskDTOs: tasks.ITaskDTO[] = [];\n\t\tif (value) {\n\t\t\tfor (const task of value) {\n\t\t\t\tthis.checkDeprecation(task, handler);\n\n\t\t\t\tif (!task.definition || !validTypes[task.definition.type]) {\n\t\t\t\t\tthis._logService.warn(`The task [${task.source}, ${task.name}] uses an undefined task type. The task will be ignored in the future.`);\n\t\t\t\t}\n\n\t\t\t\tconst taskDTO: tasks.ITaskDTO | undefined = TaskDTO.from(task, handler.extension);\n\t\t\t\tif (taskDTO) {\n\t\t\t\t\ttaskDTOs.push(taskDTO);\n\n\t\t\t\t\tif (CustomExecutionDTO.is(taskDTO.execution)) {\n\t\t\t\t\t\t// The ID is calculated on the main thread task side, so, let's call into it here.\n\t\t\t\t\t\t// We need the task id's pre-computed for custom task executions because when OnDidStartTask\n\t\t\t\t\t\t// is invoked, we have to be able to map it back to our data.\n\t\t\t\t\t\ttaskIdPromises.push(this.addCustomExecution(taskDTO, task, true));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn {\n\t\t\ttasks: taskDTOs,\n\t\t\textension: handler.extension\n\t\t};\n\t}\n\n\tprotected async resolveTaskInternal(resolvedTaskDTO: tasks.ITaskDTO): Promise<tasks.ITaskDTO | undefined> {\n\t\treturn resolvedTaskDTO;\n\t}\n\n\tprivate async getAFolder(workspaceFolders: vscode.WorkspaceFolder[] | undefined): Promise<IWorkspaceFolder> {\n\t\tlet folder = (workspaceFolders && workspaceFolders.length > 0) ? workspaceFolders[0] : undefined;\n\t\tif (!folder) {\n\t\t\tconst userhome = URI.file(homedir());\n\t\t\tfolder = new WorkspaceFolder({ uri: userhome, name: resources.basename(userhome), index: 0 });\n\t\t}\n\t\treturn {\n\t\t\turi: folder.uri,\n\t\t\tname: folder.name,\n\t\t\tindex: folder.index,\n\t\t\ttoResource: () => {\n\t\t\t\tthrow new Error('Not implemented');\n\t\t\t}\n\t\t};\n\t}\n\n\tpublic async $resolveVariables(uriComponents: UriComponents, toResolve: { process?: { name: string; cwd?: string; path?: string }; variables: string[] }): Promise<{ process?: string; variables: { [key: string]: string } }> {\n\t\tconst uri: URI = URI.revive(uriComponents);\n\t\tconst result = {\n\t\t\tprocess: <unknown>undefined as string,\n\t\t\tvariables: Object.create(null)\n\t\t};\n\t\tconst workspaceFolder = await this._workspaceProvider.resolveWorkspaceFolder(uri);\n\t\tconst workspaceFolders = (await this._workspaceProvider.getWorkspaceFolders2()) ?? [];\n\n\t\tconst resolver = await this.variableResolver.getResolver();\n\t\tconst ws: IWorkspaceFolder = workspaceFolder ? {\n\t\t\turi: workspaceFolder.uri,\n\t\t\tname: workspaceFolder.name,\n\t\t\tindex: workspaceFolder.index,\n\t\t\ttoResource: () => {\n\t\t\t\tthrow new Error('Not implemented');\n\t\t\t}\n\t\t} : await this.getAFolder(workspaceFolders);\n\n\t\tfor (const variable of toResolve.variables) {\n\t\t\tresult.variables[variable] = await resolver.resolveAsync(ws, variable);\n\t\t}\n\t\tif (toResolve.process !== undefined) {\n\t\t\tlet paths: string[] | undefined = undefined;\n\t\t\tif (toResolve.process.path !== undefined) {\n\t\t\t\tpaths = toResolve.process.path.split(path.delimiter);\n\t\t\t\tfor (let i = 0; i < paths.length; i++) {\n\t\t\t\t\tpaths[i] = await resolver.resolveAsync(ws, paths[i]);\n\t\t\t\t}\n\t\t\t}\n\t\t\tresult.process = await win32.findExecutable(\n\t\t\t\tawait resolver.resolveAsync(ws, toResolve.process.name),\n\t\t\t\ttoResolve.process.cwd !== undefined ? await resolver.resolveAsync(ws, toResolve.process.cwd) : undefined,\n\t\t\t\tpaths\n\t\t\t);\n\t\t}\n\t\treturn result;\n\t}\n\n\tpublic async $jsonTasksSupported(): Promise<boolean> {\n\t\treturn true;\n\t}\n\n\tpublic async $findExecutable(command: string, cwd?: string, paths?: string[]): Promise<string> {\n\t\treturn win32.findExecutable(command, cwd, paths);\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
