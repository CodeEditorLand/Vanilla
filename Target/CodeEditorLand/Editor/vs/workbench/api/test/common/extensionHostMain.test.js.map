{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/api/test/common/extensionHostMain.test.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport assert from 'assert';\nimport { SerializedError, errorHandler, onUnexpectedError } from '../../../../base/common/errors.js';\nimport { isFirefox, isSafari } from '../../../../base/common/platform.js';\nimport { TernarySearchTree } from '../../../../base/common/ternarySearchTree.js';\nimport { URI } from '../../../../base/common/uri.js';\nimport { mock } from '../../../../base/test/common/mock.js';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from '../../../../base/test/common/utils.js';\nimport { ExtensionIdentifier, IExtensionDescription } from '../../../../platform/extensions/common/extensions.js';\nimport { InstantiationService } from '../../../../platform/instantiation/common/instantiationService.js';\nimport { ServiceCollection } from '../../../../platform/instantiation/common/serviceCollection.js';\nimport { ILogService, NullLogService } from '../../../../platform/log/common/log.js';\nimport { MainThreadExtensionServiceShape } from '../../common/extHost.protocol.js';\nimport { ExtensionPaths, IExtHostExtensionService } from '../../common/extHostExtensionService.js';\nimport { IExtHostRpcService } from '../../common/extHostRpcService.js';\nimport { IExtHostTelemetry } from '../../common/extHostTelemetry.js';\nimport { ErrorHandler } from '../../common/extensionHostMain.js';\nimport { nullExtensionDescription } from '../../../services/extensions/common/extensions.js';\nimport { ProxyIdentifier, Proxied } from '../../../services/extensions/common/proxyIdentifier.js';\n\n\nsuite('ExtensionHostMain#ErrorHandler - Wrapping prepareStackTrace can cause slowdown and eventual stack overflow #184926 ', function () {\n\n\tif (isFirefox || isSafari) {\n\t\treturn;\n\t}\n\n\tconst extensionsIndex = TernarySearchTree.forUris<IExtensionDescription>();\n\tconst mainThreadExtensionsService = new class extends mock<MainThreadExtensionServiceShape>() {\n\t\toverride $onExtensionRuntimeError(extensionId: ExtensionIdentifier, data: SerializedError): void {\n\n\t\t}\n\t};\n\n\tconst collection = new ServiceCollection(\n\t\t[ILogService, new NullLogService()],\n\t\t[IExtHostTelemetry, new class extends mock<IExtHostTelemetry>() {\n\t\t\tdeclare readonly _serviceBrand: undefined;\n\t\t\toverride onExtensionError(extension: ExtensionIdentifier, error: Error): boolean {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}],\n\t\t[IExtHostExtensionService, new class extends mock<IExtHostExtensionService & any>() {\n\t\t\tdeclare readonly _serviceBrand: undefined;\n\t\t\tgetExtensionPathIndex() {\n\t\t\t\treturn new class extends ExtensionPaths {\n\t\t\t\t\toverride findSubstr(key: URI): IExtensionDescription | undefined {\n\t\t\t\t\t\tfindSubstrCount++;\n\t\t\t\t\t\treturn nullExtensionDescription;\n\t\t\t\t\t}\n\n\t\t\t\t}(extensionsIndex);\n\t\t\t}\n\t\t}],\n\t\t[IExtHostRpcService, new class extends mock<IExtHostRpcService>() {\n\t\t\tdeclare readonly _serviceBrand: undefined;\n\t\t\toverride getProxy<T>(identifier: ProxyIdentifier<T>): Proxied<T> {\n\t\t\t\treturn <any>mainThreadExtensionsService;\n\t\t\t}\n\t\t}]\n\t);\n\n\tconst originalPrepareStackTrace = Error.prepareStackTrace;\n\tconst insta = new InstantiationService(collection, false);\n\n\tlet existingErrorHandler: (e: any) => void;\n\tlet findSubstrCount = 0;\n\n\tensureNoDisposablesAreLeakedInTestSuite();\n\n\tsuiteSetup(async function () {\n\t\texistingErrorHandler = errorHandler.getUnexpectedErrorHandler();\n\t\tawait insta.invokeFunction(ErrorHandler.installFullHandler);\n\t});\n\n\tsuiteTeardown(function () {\n\t\terrorHandler.setUnexpectedErrorHandler(existingErrorHandler);\n\t});\n\n\tsetup(async function () {\n\t\tfindSubstrCount = 0;\n\t});\n\n\tteardown(() => {\n\t\tError.prepareStackTrace = originalPrepareStackTrace;\n\t});\n\n\ttest('basics', function () {\n\n\t\tconst err = new Error('test1');\n\n\t\tonUnexpectedError(err);\n\n\t\tassert.strictEqual(findSubstrCount, 1);\n\n\t});\n\n\ttest('set/reset prepareStackTrace-callback', function () {\n\n\t\tconst original = Error.prepareStackTrace;\n\t\tError.prepareStackTrace = (_error, _stack) => 'stack';\n\t\tconst probeErr = new Error();\n\t\tconst stack = probeErr.stack;\n\t\tassert.ok(stack);\n\t\tError.prepareStackTrace = original;\n\t\tassert.strictEqual(findSubstrCount, 1);\n\n\t\t// already checked\n\t\tonUnexpectedError(probeErr);\n\t\tassert.strictEqual(findSubstrCount, 1);\n\n\t\t// one more error\n\t\tconst err = new Error('test2');\n\t\tonUnexpectedError(err);\n\n\t\tassert.strictEqual(findSubstrCount, 2);\n\t});\n\n\ttest('wrap prepareStackTrace-callback', function () {\n\n\t\tfunction do_something_else(params: string) {\n\t\t\treturn params;\n\t\t}\n\n\t\tconst original = Error.prepareStackTrace;\n\t\tError.prepareStackTrace = (...args) => {\n\t\t\treturn do_something_else(original?.(...args));\n\t\t};\n\t\tconst probeErr = new Error();\n\t\tconst stack = probeErr.stack;\n\t\tassert.ok(stack);\n\n\n\t\tonUnexpectedError(probeErr);\n\t\tassert.strictEqual(findSubstrCount, 1);\n\t});\n\n\ttest('prevent rewrapping', function () {\n\n\t\tlet do_something_count = 0;\n\t\tfunction do_something(params: any) {\n\t\t\tdo_something_count++;\n\t\t}\n\n\t\tError.prepareStackTrace = (result, stack) => {\n\t\t\tdo_something(stack);\n\t\t\treturn 'fakestack';\n\t\t};\n\n\t\tfor (let i = 0; i < 2_500; ++i) {\n\t\t\tError.prepareStackTrace = Error.prepareStackTrace;\n\t\t}\n\n\t\tconst probeErr = new Error();\n\t\tconst stack = probeErr.stack;\n\t\tassert.strictEqual(stack, 'fakestack');\n\n\t\tonUnexpectedError(probeErr);\n\t\tassert.strictEqual(findSubstrCount, 1);\n\n\t\tconst probeErr2 = new Error();\n\t\tonUnexpectedError(probeErr2);\n\t\tassert.strictEqual(findSubstrCount, 2);\n\t\tassert.strictEqual(do_something_count, 2);\n\t});\n\n\n\tsuite('https://gist.github.com/thecrypticace/f0f2e182082072efdaf0f8e1537d2cce', function () {\n\n\t\ttest(\"Restored, separate operations\", () => {\n\t\t\t// Actual Test\n\t\t\tlet original;\n\n\t\t\t// Operation 1\n\t\t\toriginal = Error.prepareStackTrace;\n\t\t\tfor (let i = 0; i < 12_500; ++i) { Error.prepareStackTrace = Error.prepareStackTrace; }\n\t\t\tconst err1 = new Error();\n\t\t\tassert.ok(err1.stack);\n\t\t\tassert.strictEqual(findSubstrCount, 1);\n\t\t\tError.prepareStackTrace = original;\n\n\t\t\t// Operation 2\n\t\t\toriginal = Error.prepareStackTrace;\n\t\t\tfor (let i = 0; i < 12_500; ++i) { Error.prepareStackTrace = Error.prepareStackTrace; }\n\t\t\tassert.ok(new Error().stack);\n\t\t\tassert.strictEqual(findSubstrCount, 2);\n\t\t\tError.prepareStackTrace = original;\n\n\t\t\t// Operation 3\n\t\t\toriginal = Error.prepareStackTrace;\n\t\t\tfor (let i = 0; i < 12_500; ++i) { Error.prepareStackTrace = Error.prepareStackTrace; }\n\t\t\tassert.ok(new Error().stack);\n\t\t\tassert.strictEqual(findSubstrCount, 3);\n\t\t\tError.prepareStackTrace = original;\n\n\t\t\t// Operation 4\n\t\t\toriginal = Error.prepareStackTrace;\n\t\t\tfor (let i = 0; i < 12_500; ++i) { Error.prepareStackTrace = Error.prepareStackTrace; }\n\t\t\tassert.ok(new Error().stack);\n\t\t\tassert.strictEqual(findSubstrCount, 4);\n\t\t\tError.prepareStackTrace = original;\n\n\t\t\t// Back to Operation 1\n\t\t\tassert.ok(err1.stack);\n\t\t\tassert.strictEqual(findSubstrCount, 4);\n\t\t});\n\n\t\ttest(\"Never restored, separate operations\", () => {\n\t\t\t// Operation 1\n\t\t\tfor (let i = 0; i < 12_500; ++i) { Error.prepareStackTrace = Error.prepareStackTrace; }\n\t\t\tassert.ok(new Error().stack);\n\n\t\t\t// Operation 2\n\t\t\tfor (let i = 0; i < 12_500; ++i) { Error.prepareStackTrace = Error.prepareStackTrace; }\n\t\t\tassert.ok(new Error().stack);\n\n\t\t\t// Operation 3\n\t\t\tfor (let i = 0; i < 12_500; ++i) { Error.prepareStackTrace = Error.prepareStackTrace; }\n\t\t\tassert.ok(new Error().stack);\n\n\t\t\t// Operation 4\n\t\t\tfor (let i = 0; i < 12_500; ++i) { Error.prepareStackTrace = Error.prepareStackTrace; }\n\t\t\tassert.ok(new Error().stack);\n\t\t});\n\n\t\ttest(\"Restored, too many uses before restoration\", async () => {\n\t\t\tconst original = Error.prepareStackTrace;\n\t\t\tError.prepareStackTrace = (_, stack) => stack;\n\n\t\t\t// Operation 1 \u2014 more uses of `prepareStackTrace`\n\t\t\tfor (let i = 0; i < 10_000; ++i) { Error.prepareStackTrace = Error.prepareStackTrace; }\n\t\t\tassert.ok(new Error().stack);\n\n\t\t\tError.prepareStackTrace = original;\n\t\t});\n\t});\n});\n"],
  "mappings": "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",
  "names": ["stack"]
}
