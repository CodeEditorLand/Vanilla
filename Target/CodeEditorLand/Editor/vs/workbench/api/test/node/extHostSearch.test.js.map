{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/api/test/node/extHostSearch.test.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport assert from 'assert';\nimport { mapArrayOrNot } from '../../../../base/common/arrays.js';\nimport { timeout } from '../../../../base/common/async.js';\nimport { CancellationTokenSource } from '../../../../base/common/cancellation.js';\nimport { isCancellationError } from '../../../../base/common/errors.js';\nimport { revive } from '../../../../base/common/marshalling.js';\nimport { joinPath } from '../../../../base/common/resources.js';\nimport { URI, UriComponents } from '../../../../base/common/uri.js';\nimport * as pfs from '../../../../base/node/pfs.js';\nimport { mock } from '../../../../base/test/common/mock.js';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from '../../../../base/test/common/utils.js';\nimport { NullLogService } from '../../../../platform/log/common/log.js';\nimport { MainContext, MainThreadSearchShape } from '../../common/extHost.protocol.js';\nimport { ExtHostConfigProvider, IExtHostConfiguration } from '../../common/extHostConfiguration.js';\nimport { IExtHostInitDataService } from '../../common/extHostInitDataService.js';\nimport { Range } from '../../common/extHostTypes.js';\nimport { URITransformerService } from '../../common/extHostUriTransformerService.js';\nimport { NativeExtHostSearch } from '../../node/extHostSearch.js';\nimport { TestRPCProtocol } from '../common/testRPCProtocol.js';\nimport { IFileMatch, IFileQuery, IPatternInfo, IRawFileMatch2, ISearchCompleteStats, ISearchQuery, ITextQuery, QueryType, resultIsMatch } from '../../../services/search/common/search.js';\nimport { TextSearchManager } from '../../../services/search/common/textSearchManager.js';\nimport { NativeTextSearchManager } from '../../../services/search/node/textSearchManager.js';\nimport type * as vscode from 'vscode';\n\nlet rpcProtocol: TestRPCProtocol;\nlet extHostSearch: NativeExtHostSearch;\n\nlet mockMainThreadSearch: MockMainThreadSearch;\nclass MockMainThreadSearch implements MainThreadSearchShape {\n\tlastHandle!: number;\n\n\tresults: Array<UriComponents | IRawFileMatch2> = [];\n\n\t$registerFileSearchProvider(handle: number, scheme: string): void {\n\t\tthis.lastHandle = handle;\n\t}\n\n\t$registerTextSearchProvider(handle: number, scheme: string): void {\n\t\tthis.lastHandle = handle;\n\t}\n\n\t$registerAITextSearchProvider(handle: number, scheme: string): void {\n\t\tthis.lastHandle = handle;\n\t}\n\n\t$unregisterProvider(handle: number): void {\n\t}\n\n\t$handleFileMatch(handle: number, session: number, data: UriComponents[]): void {\n\t\tthis.results.push(...data);\n\t}\n\n\t$handleTextMatch(handle: number, session: number, data: IRawFileMatch2[]): void {\n\t\tthis.results.push(...data);\n\t}\n\n\t$handleTelemetry(eventName: string, data: any): void {\n\t}\n\n\tdispose() {\n\t}\n}\n\nlet mockPFS: Partial<typeof pfs>;\n\nfunction extensionResultIsMatch(data: vscode.TextSearchResult): data is vscode.TextSearchMatch {\n\treturn !!(<vscode.TextSearchMatch>data).preview;\n}\n\nsuite('ExtHostSearch', () => {\n\tconst disposables = ensureNoDisposablesAreLeakedInTestSuite();\n\n\tasync function registerTestTextSearchProvider(provider: vscode.TextSearchProvider, scheme = 'file'): Promise<void> {\n\t\tdisposables.add(extHostSearch.registerTextSearchProviderOld(scheme, provider));\n\t\tawait rpcProtocol.sync();\n\t}\n\n\tasync function registerTestFileSearchProvider(provider: vscode.FileSearchProvider, scheme = 'file'): Promise<void> {\n\t\tdisposables.add(extHostSearch.registerFileSearchProviderOld(scheme, provider));\n\t\tawait rpcProtocol.sync();\n\t}\n\n\tasync function runFileSearch(query: IFileQuery, cancel = false): Promise<{ results: URI[]; stats: ISearchCompleteStats }> {\n\t\tlet stats: ISearchCompleteStats;\n\t\ttry {\n\t\t\tconst cancellation = new CancellationTokenSource();\n\t\t\tconst p = extHostSearch.$provideFileSearchResults(mockMainThreadSearch.lastHandle, 0, query, cancellation.token);\n\t\t\tif (cancel) {\n\t\t\t\tawait timeout(0);\n\t\t\t\tcancellation.cancel();\n\t\t\t}\n\n\t\t\tstats = await p;\n\t\t} catch (err) {\n\t\t\tif (!isCancellationError(err)) {\n\t\t\t\tawait rpcProtocol.sync();\n\t\t\t\tthrow err;\n\t\t\t}\n\t\t}\n\n\t\tawait rpcProtocol.sync();\n\t\treturn {\n\t\t\tresults: (<UriComponents[]>mockMainThreadSearch.results).map(r => URI.revive(r)),\n\t\t\tstats: stats!\n\t\t};\n\t}\n\n\tasync function runTextSearch(query: ITextQuery): Promise<{ results: IFileMatch[]; stats: ISearchCompleteStats }> {\n\t\tlet stats: ISearchCompleteStats;\n\t\ttry {\n\t\t\tconst cancellation = new CancellationTokenSource();\n\t\t\tconst p = extHostSearch.$provideTextSearchResults(mockMainThreadSearch.lastHandle, 0, query, cancellation.token);\n\n\t\t\tstats = await p;\n\t\t} catch (err) {\n\t\t\tif (!isCancellationError(err)) {\n\t\t\t\tawait rpcProtocol.sync();\n\t\t\t\tthrow err;\n\t\t\t}\n\t\t}\n\n\t\tawait rpcProtocol.sync();\n\t\tconst results: IFileMatch[] = revive(<IRawFileMatch2[]>mockMainThreadSearch.results);\n\n\t\treturn { results, stats: stats! };\n\t}\n\n\tsetup(() => {\n\t\trpcProtocol = new TestRPCProtocol();\n\n\t\tmockMainThreadSearch = new MockMainThreadSearch();\n\t\tconst logService = new NullLogService();\n\n\t\trpcProtocol.set(MainContext.MainThreadSearch, mockMainThreadSearch);\n\n\t\tmockPFS = {};\n\t\textHostSearch = disposables.add(new class extends NativeExtHostSearch {\n\t\t\tconstructor() {\n\t\t\t\tsuper(\n\t\t\t\t\trpcProtocol,\n\t\t\t\t\tnew class extends mock<IExtHostInitDataService>() { override remote = { isRemote: false, authority: undefined, connectionData: null }; },\n\t\t\t\t\tnew URITransformerService(null),\n\t\t\t\t\tnew class extends mock<IExtHostConfiguration>() {\n\t\t\t\t\t\toverride async getConfigProvider(): Promise<ExtHostConfigProvider> {\n\t\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\tonDidChangeConfiguration(_listener: (event: vscode.ConfigurationChangeEvent) => void) { },\n\t\t\t\t\t\t\t\tgetConfiguration(): vscode.WorkspaceConfiguration {\n\t\t\t\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\t\t\tget() { },\n\t\t\t\t\t\t\t\t\t\thas() {\n\t\t\t\t\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\tinspect() {\n\t\t\t\t\t\t\t\t\t\t\treturn undefined;\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\tasync update() { }\n\t\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t\t},\n\n\t\t\t\t\t\t\t} as ExtHostConfigProvider;\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\tlogService\n\t\t\t\t);\n\t\t\t\tthis._pfs = mockPFS as any;\n\t\t\t}\n\n\t\t\tprotected override createTextSearchManager(query: ITextQuery, provider: vscode.TextSearchProviderNew): TextSearchManager {\n\t\t\t\treturn new NativeTextSearchManager(query, provider, this._pfs);\n\t\t\t}\n\t\t});\n\t});\n\n\tteardown(() => {\n\t\treturn rpcProtocol.sync();\n\t});\n\n\tconst rootFolderA = URI.file('/foo/bar1');\n\tconst rootFolderB = URI.file('/foo/bar2');\n\tconst fancyScheme = 'fancy';\n\tconst fancySchemeFolderA = URI.from({ scheme: fancyScheme, path: '/project/folder1' });\n\n\tsuite('File:', () => {\n\n\t\tfunction getSimpleQuery(filePattern = ''): IFileQuery {\n\t\t\treturn {\n\t\t\t\ttype: QueryType.File,\n\n\t\t\t\tfilePattern,\n\t\t\t\tfolderQueries: [\n\t\t\t\t\t{ folder: rootFolderA }\n\t\t\t\t]\n\t\t\t};\n\t\t}\n\n\t\tfunction compareURIs(actual: URI[], expected: URI[]) {\n\t\t\tconst sortAndStringify = (arr: URI[]) => arr.sort().map(u => u.toString());\n\n\t\t\tassert.deepStrictEqual(\n\t\t\t\tsortAndStringify(actual),\n\t\t\t\tsortAndStringify(expected));\n\t\t}\n\n\t\ttest('no results', async () => {\n\t\t\tawait registerTestFileSearchProvider({\n\t\t\t\tprovideFileSearchResults(query: vscode.FileSearchQuery, options: vscode.FileSearchOptions, token: vscode.CancellationToken): Promise<URI[]> {\n\t\t\t\t\treturn Promise.resolve(null!);\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tconst { results, stats } = await runFileSearch(getSimpleQuery());\n\t\t\tassert(!stats.limitHit);\n\t\t\tassert(!results.length);\n\t\t});\n\n\t\ttest('simple results', async () => {\n\t\t\tconst reportedResults = [\n\t\t\t\tjoinPath(rootFolderA, 'file1.ts'),\n\t\t\t\tjoinPath(rootFolderA, 'file2.ts'),\n\t\t\t\tjoinPath(rootFolderA, 'subfolder/file3.ts')\n\t\t\t];\n\n\t\t\tawait registerTestFileSearchProvider({\n\t\t\t\tprovideFileSearchResults(query: vscode.FileSearchQuery, options: vscode.FileSearchOptions, token: vscode.CancellationToken): Promise<URI[]> {\n\t\t\t\t\treturn Promise.resolve(reportedResults);\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tconst { results, stats } = await runFileSearch(getSimpleQuery());\n\t\t\tassert(!stats.limitHit);\n\t\t\tassert.strictEqual(results.length, 3);\n\t\t\tcompareURIs(results, reportedResults);\n\t\t});\n\n\t\ttest('Search canceled', async () => {\n\t\t\tlet cancelRequested = false;\n\t\t\tawait registerTestFileSearchProvider({\n\t\t\t\tprovideFileSearchResults(query: vscode.FileSearchQuery, options: vscode.FileSearchOptions, token: vscode.CancellationToken): Promise<URI[]> {\n\n\t\t\t\t\treturn new Promise((resolve, reject) => {\n\t\t\t\t\t\tfunction onCancel() {\n\t\t\t\t\t\t\tcancelRequested = true;\n\n\t\t\t\t\t\t\tresolve([joinPath(options.folder, 'file1.ts')]); // or reject or nothing?\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (token.isCancellationRequested) {\n\t\t\t\t\t\t\tonCancel();\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tdisposables.add(token.onCancellationRequested(() => onCancel()));\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tconst { results } = await runFileSearch(getSimpleQuery(), true);\n\t\t\tassert(cancelRequested);\n\t\t\tassert(!results.length);\n\t\t});\n\n\t\ttest('session cancellation should work', async () => {\n\t\t\tlet numSessionCancelled = 0;\n\t\t\tconst disposables: (vscode.Disposable | undefined)[] = [];\n\t\t\tawait registerTestFileSearchProvider({\n\t\t\t\tprovideFileSearchResults(query: vscode.FileSearchQuery, options: vscode.FileSearchOptions, token: vscode.CancellationToken): Promise<URI[]> {\n\n\t\t\t\t\tdisposables.push(options.session?.onCancellationRequested(() => {\n\t\t\t\t\t\tnumSessionCancelled++;\n\t\t\t\t\t}));\n\n\t\t\t\t\treturn Promise.resolve([]);\n\t\t\t\t}\n\t\t\t});\n\n\n\t\t\tawait runFileSearch({ ...getSimpleQuery(), cacheKey: '1' }, true);\n\t\t\tawait runFileSearch({ ...getSimpleQuery(), cacheKey: '2' }, true);\n\t\t\textHostSearch.$clearCache('1');\n\t\t\tassert.strictEqual(numSessionCancelled, 1);\n\t\t\tdisposables.forEach(d => d?.dispose());\n\t\t});\n\n\t\ttest('provider returns null', async () => {\n\t\t\tawait registerTestFileSearchProvider({\n\t\t\t\tprovideFileSearchResults(query: vscode.FileSearchQuery, options: vscode.FileSearchOptions, token: vscode.CancellationToken): Promise<URI[]> {\n\t\t\t\t\treturn null!;\n\t\t\t\t}\n\t\t\t});\n\n\t\t\ttry {\n\t\t\t\tawait runFileSearch(getSimpleQuery());\n\t\t\t\tassert(false, 'Expected to fail');\n\t\t\t} catch {\n\t\t\t\t// Expected to throw\n\t\t\t}\n\t\t});\n\n\t\ttest('all provider calls get global include/excludes', async () => {\n\t\t\tawait registerTestFileSearchProvider({\n\t\t\t\tprovideFileSearchResults(query: vscode.FileSearchQuery, options: vscode.FileSearchOptions, token: vscode.CancellationToken): Promise<URI[]> {\n\t\t\t\t\tassert(options.excludes.length === 2 && options.includes.length === 2, 'Missing global include/excludes');\n\t\t\t\t\treturn Promise.resolve(null!);\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tconst query: ISearchQuery = {\n\t\t\t\ttype: QueryType.File,\n\n\t\t\t\tfilePattern: '',\n\t\t\t\tincludePattern: {\n\t\t\t\t\t'foo': true,\n\t\t\t\t\t'bar': true\n\t\t\t\t},\n\t\t\t\texcludePattern: {\n\t\t\t\t\t'something': true,\n\t\t\t\t\t'else': true\n\t\t\t\t},\n\t\t\t\tfolderQueries: [\n\t\t\t\t\t{ folder: rootFolderA },\n\t\t\t\t\t{ folder: rootFolderB }\n\t\t\t\t]\n\t\t\t};\n\n\t\t\tawait runFileSearch(query);\n\t\t});\n\n\t\ttest('global/local include/excludes combined', async () => {\n\t\t\tawait registerTestFileSearchProvider({\n\t\t\t\tprovideFileSearchResults(query: vscode.FileSearchQuery, options: vscode.FileSearchOptions, token: vscode.CancellationToken): Promise<URI[]> {\n\t\t\t\t\tif (options.folder.toString() === rootFolderA.toString()) {\n\t\t\t\t\t\tassert.deepStrictEqual(options.includes.sort(), ['*.ts', 'foo']);\n\t\t\t\t\t\tassert.deepStrictEqual(options.excludes.sort(), ['*.js', 'bar']);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tassert.deepStrictEqual(options.includes.sort(), ['*.ts']);\n\t\t\t\t\t\tassert.deepStrictEqual(options.excludes.sort(), ['*.js']);\n\t\t\t\t\t}\n\n\t\t\t\t\treturn Promise.resolve(null!);\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tconst query: ISearchQuery = {\n\t\t\t\ttype: QueryType.File,\n\n\t\t\t\tfilePattern: '',\n\t\t\t\tincludePattern: {\n\t\t\t\t\t'*.ts': true\n\t\t\t\t},\n\t\t\t\texcludePattern: {\n\t\t\t\t\t'*.js': true\n\t\t\t\t},\n\t\t\t\tfolderQueries: [\n\t\t\t\t\t{\n\t\t\t\t\t\tfolder: rootFolderA,\n\t\t\t\t\t\tincludePattern: {\n\t\t\t\t\t\t\t'foo': true\n\t\t\t\t\t\t},\n\t\t\t\t\t\texcludePattern: [{\n\t\t\t\t\t\t\tpattern: {\n\t\t\t\t\t\t\t\t'bar': true\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}]\n\t\t\t\t\t},\n\t\t\t\t\t{ folder: rootFolderB }\n\t\t\t\t]\n\t\t\t};\n\n\t\t\tawait runFileSearch(query);\n\t\t});\n\n\t\ttest('include/excludes resolved correctly', async () => {\n\t\t\tawait registerTestFileSearchProvider({\n\t\t\t\tprovideFileSearchResults(query: vscode.FileSearchQuery, options: vscode.FileSearchOptions, token: vscode.CancellationToken): Promise<URI[]> {\n\t\t\t\t\tassert.deepStrictEqual(options.includes.sort(), ['*.jsx', '*.ts']);\n\t\t\t\t\tassert.deepStrictEqual(options.excludes.sort(), []);\n\n\t\t\t\t\treturn Promise.resolve(null!);\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tconst query: ISearchQuery = {\n\t\t\t\ttype: QueryType.File,\n\n\t\t\t\tfilePattern: '',\n\t\t\t\tincludePattern: {\n\t\t\t\t\t'*.ts': true,\n\t\t\t\t\t'*.jsx': false\n\t\t\t\t},\n\t\t\t\texcludePattern: {\n\t\t\t\t\t'*.js': true,\n\t\t\t\t\t'*.tsx': false\n\t\t\t\t},\n\t\t\t\tfolderQueries: [\n\t\t\t\t\t{\n\t\t\t\t\t\tfolder: rootFolderA,\n\t\t\t\t\t\tincludePattern: {\n\t\t\t\t\t\t\t'*.jsx': true\n\t\t\t\t\t\t},\n\t\t\t\t\t\texcludePattern: [{\n\t\t\t\t\t\t\tpattern: {\n\t\t\t\t\t\t\t\t'*.js': false\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}]\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t};\n\n\t\t\tawait runFileSearch(query);\n\t\t});\n\n\t\ttest('basic sibling exclude clause', async () => {\n\t\t\tconst reportedResults = [\n\t\t\t\t'file1.ts',\n\t\t\t\t'file1.js',\n\t\t\t];\n\n\t\t\tawait registerTestFileSearchProvider({\n\t\t\t\tprovideFileSearchResults(query: vscode.FileSearchQuery, options: vscode.FileSearchOptions, token: vscode.CancellationToken): Promise<URI[]> {\n\t\t\t\t\treturn Promise.resolve(reportedResults\n\t\t\t\t\t\t.map(relativePath => joinPath(options.folder, relativePath)));\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tconst query: ISearchQuery = {\n\t\t\t\ttype: QueryType.File,\n\n\t\t\t\tfilePattern: '',\n\t\t\t\texcludePattern: {\n\t\t\t\t\t'*.js': {\n\t\t\t\t\t\twhen: '$(basename).ts'\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tfolderQueries: [\n\t\t\t\t\t{ folder: rootFolderA }\n\t\t\t\t]\n\t\t\t};\n\n\t\t\tconst { results } = await runFileSearch(query);\n\t\t\tcompareURIs(\n\t\t\t\tresults,\n\t\t\t\t[\n\t\t\t\t\tjoinPath(rootFolderA, 'file1.ts')\n\t\t\t\t]);\n\t\t});\n\n\t\t// https://github.com/microsoft/vscode-remotehub/issues/255\n\t\ttest('include, sibling exclude, and subfolder', async () => {\n\t\t\tconst reportedResults = [\n\t\t\t\t'foo/file1.ts',\n\t\t\t\t'foo/file1.js',\n\t\t\t];\n\n\t\t\tawait registerTestFileSearchProvider({\n\t\t\t\tprovideFileSearchResults(query: vscode.FileSearchQuery, options: vscode.FileSearchOptions, token: vscode.CancellationToken): Promise<URI[]> {\n\t\t\t\t\treturn Promise.resolve(reportedResults\n\t\t\t\t\t\t.map(relativePath => joinPath(options.folder, relativePath)));\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tconst query: ISearchQuery = {\n\t\t\t\ttype: QueryType.File,\n\n\t\t\t\tfilePattern: '',\n\t\t\t\tincludePattern: { '**/*.ts': true },\n\t\t\t\texcludePattern: {\n\t\t\t\t\t'*.js': {\n\t\t\t\t\t\twhen: '$(basename).ts'\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tfolderQueries: [\n\t\t\t\t\t{ folder: rootFolderA }\n\t\t\t\t]\n\t\t\t};\n\n\t\t\tconst { results } = await runFileSearch(query);\n\t\t\tcompareURIs(\n\t\t\t\tresults,\n\t\t\t\t[\n\t\t\t\t\tjoinPath(rootFolderA, 'foo/file1.ts')\n\t\t\t\t]);\n\t\t});\n\n\t\ttest('multiroot sibling exclude clause', async () => {\n\n\t\t\tawait registerTestFileSearchProvider({\n\t\t\t\tprovideFileSearchResults(query: vscode.FileSearchQuery, options: vscode.FileSearchOptions, token: vscode.CancellationToken): Promise<URI[]> {\n\t\t\t\t\tlet reportedResults: URI[];\n\t\t\t\t\tif (options.folder.fsPath === rootFolderA.fsPath) {\n\t\t\t\t\t\treportedResults = [\n\t\t\t\t\t\t\t'folder/fileA.scss',\n\t\t\t\t\t\t\t'folder/fileA.css',\n\t\t\t\t\t\t\t'folder/file2.css'\n\t\t\t\t\t\t].map(relativePath => joinPath(rootFolderA, relativePath));\n\t\t\t\t\t} else {\n\t\t\t\t\t\treportedResults = [\n\t\t\t\t\t\t\t'fileB.ts',\n\t\t\t\t\t\t\t'fileB.js',\n\t\t\t\t\t\t\t'file3.js'\n\t\t\t\t\t\t].map(relativePath => joinPath(rootFolderB, relativePath));\n\t\t\t\t\t}\n\n\t\t\t\t\treturn Promise.resolve(reportedResults);\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tconst query: ISearchQuery = {\n\t\t\t\ttype: QueryType.File,\n\n\t\t\t\tfilePattern: '',\n\t\t\t\texcludePattern: {\n\t\t\t\t\t'*.js': {\n\t\t\t\t\t\twhen: '$(basename).ts'\n\t\t\t\t\t},\n\t\t\t\t\t'*.css': true\n\t\t\t\t},\n\t\t\t\tfolderQueries: [\n\t\t\t\t\t{\n\t\t\t\t\t\tfolder: rootFolderA,\n\t\t\t\t\t\texcludePattern: [{\n\t\t\t\t\t\t\tpattern: {\n\t\t\t\t\t\t\t\t'folder/*.css': {\n\t\t\t\t\t\t\t\t\twhen: '$(basename).scss'\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}]\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tfolder: rootFolderB,\n\t\t\t\t\t\texcludePattern: [{\n\t\t\t\t\t\t\tpattern: {\n\t\t\t\t\t\t\t\t'*.js': false\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}]\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t};\n\n\t\t\tconst { results } = await runFileSearch(query);\n\t\t\tcompareURIs(\n\t\t\t\tresults,\n\t\t\t\t[\n\t\t\t\t\tjoinPath(rootFolderA, 'folder/fileA.scss'),\n\t\t\t\t\tjoinPath(rootFolderA, 'folder/file2.css'),\n\n\t\t\t\t\tjoinPath(rootFolderB, 'fileB.ts'),\n\t\t\t\t\tjoinPath(rootFolderB, 'fileB.js'),\n\t\t\t\t\tjoinPath(rootFolderB, 'file3.js'),\n\t\t\t\t]);\n\t\t});\n\n\t\ttest('max results = 1', async () => {\n\t\t\tconst reportedResults = [\n\t\t\t\tjoinPath(rootFolderA, 'file1.ts'),\n\t\t\t\tjoinPath(rootFolderA, 'file2.ts'),\n\t\t\t\tjoinPath(rootFolderA, 'file3.ts'),\n\t\t\t];\n\n\t\t\tlet wasCanceled = false;\n\t\t\tawait registerTestFileSearchProvider({\n\t\t\t\tprovideFileSearchResults(query: vscode.FileSearchQuery, options: vscode.FileSearchOptions, token: vscode.CancellationToken): Promise<URI[]> {\n\t\t\t\t\tdisposables.add(token.onCancellationRequested(() => wasCanceled = true));\n\n\t\t\t\t\treturn Promise.resolve(reportedResults);\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tconst query: ISearchQuery = {\n\t\t\t\ttype: QueryType.File,\n\n\t\t\t\tfilePattern: '',\n\t\t\t\tmaxResults: 1,\n\n\t\t\t\tfolderQueries: [\n\t\t\t\t\t{\n\t\t\t\t\t\tfolder: rootFolderA\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t};\n\n\t\t\tconst { results, stats } = await runFileSearch(query);\n\t\t\tassert(stats.limitHit, 'Expected to return limitHit');\n\t\t\tassert.strictEqual(results.length, 1);\n\t\t\tcompareURIs(results, reportedResults.slice(0, 1));\n\t\t\tassert(wasCanceled, 'Expected to be canceled when hitting limit');\n\t\t});\n\n\t\ttest('max results = 2', async () => {\n\t\t\tconst reportedResults = [\n\t\t\t\tjoinPath(rootFolderA, 'file1.ts'),\n\t\t\t\tjoinPath(rootFolderA, 'file2.ts'),\n\t\t\t\tjoinPath(rootFolderA, 'file3.ts'),\n\t\t\t];\n\n\t\t\tlet wasCanceled = false;\n\t\t\tawait registerTestFileSearchProvider({\n\t\t\t\tprovideFileSearchResults(query: vscode.FileSearchQuery, options: vscode.FileSearchOptions, token: vscode.CancellationToken): Promise<URI[]> {\n\t\t\t\t\tdisposables.add(token.onCancellationRequested(() => wasCanceled = true));\n\n\t\t\t\t\treturn Promise.resolve(reportedResults);\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tconst query: ISearchQuery = {\n\t\t\t\ttype: QueryType.File,\n\n\t\t\t\tfilePattern: '',\n\t\t\t\tmaxResults: 2,\n\n\t\t\t\tfolderQueries: [\n\t\t\t\t\t{\n\t\t\t\t\t\tfolder: rootFolderA\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t};\n\n\t\t\tconst { results, stats } = await runFileSearch(query);\n\t\t\tassert(stats.limitHit, 'Expected to return limitHit');\n\t\t\tassert.strictEqual(results.length, 2);\n\t\t\tcompareURIs(results, reportedResults.slice(0, 2));\n\t\t\tassert(wasCanceled, 'Expected to be canceled when hitting limit');\n\t\t});\n\n\t\ttest('provider returns maxResults exactly', async () => {\n\t\t\tconst reportedResults = [\n\t\t\t\tjoinPath(rootFolderA, 'file1.ts'),\n\t\t\t\tjoinPath(rootFolderA, 'file2.ts'),\n\t\t\t];\n\n\t\t\tlet wasCanceled = false;\n\t\t\tawait registerTestFileSearchProvider({\n\t\t\t\tprovideFileSearchResults(query: vscode.FileSearchQuery, options: vscode.FileSearchOptions, token: vscode.CancellationToken): Promise<URI[]> {\n\t\t\t\t\tdisposables.add(token.onCancellationRequested(() => wasCanceled = true));\n\n\t\t\t\t\treturn Promise.resolve(reportedResults);\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tconst query: ISearchQuery = {\n\t\t\t\ttype: QueryType.File,\n\n\t\t\t\tfilePattern: '',\n\t\t\t\tmaxResults: 2,\n\n\t\t\t\tfolderQueries: [\n\t\t\t\t\t{\n\t\t\t\t\t\tfolder: rootFolderA\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t};\n\n\t\t\tconst { results, stats } = await runFileSearch(query);\n\t\t\tassert(!stats.limitHit, 'Expected not to return limitHit');\n\t\t\tassert.strictEqual(results.length, 2);\n\t\t\tcompareURIs(results, reportedResults);\n\t\t\tassert(!wasCanceled, 'Expected not to be canceled when just reaching limit');\n\t\t});\n\n\t\ttest('multiroot max results', async () => {\n\t\t\tlet cancels = 0;\n\t\t\tawait registerTestFileSearchProvider({\n\t\t\t\tasync provideFileSearchResults(query: vscode.FileSearchQuery, options: vscode.FileSearchOptions, token: vscode.CancellationToken): Promise<URI[]> {\n\t\t\t\t\tdisposables.add(token.onCancellationRequested(() => cancels++));\n\n\t\t\t\t\t// Provice results async so it has a chance to invoke every provider\n\t\t\t\t\tawait new Promise(r => process.nextTick(r));\n\t\t\t\t\treturn [\n\t\t\t\t\t\t'file1.ts',\n\t\t\t\t\t\t'file2.ts',\n\t\t\t\t\t\t'file3.ts',\n\t\t\t\t\t].map(relativePath => joinPath(options.folder, relativePath));\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tconst query: ISearchQuery = {\n\t\t\t\ttype: QueryType.File,\n\n\t\t\t\tfilePattern: '',\n\t\t\t\tmaxResults: 2,\n\n\t\t\t\tfolderQueries: [\n\t\t\t\t\t{\n\t\t\t\t\t\tfolder: rootFolderA\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tfolder: rootFolderB\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t};\n\n\t\t\tconst { results } = await runFileSearch(query);\n\t\t\tassert.strictEqual(results.length, 2); // Don't care which 2 we got\n\t\t\tassert.strictEqual(cancels, 2, 'Expected all invocations to be canceled when hitting limit');\n\t\t});\n\n\t\ttest('works with non-file schemes', async () => {\n\t\t\tconst reportedResults = [\n\t\t\t\tjoinPath(fancySchemeFolderA, 'file1.ts'),\n\t\t\t\tjoinPath(fancySchemeFolderA, 'file2.ts'),\n\t\t\t\tjoinPath(fancySchemeFolderA, 'subfolder/file3.ts'),\n\n\t\t\t];\n\n\t\t\tawait registerTestFileSearchProvider({\n\t\t\t\tprovideFileSearchResults(query: vscode.FileSearchQuery, options: vscode.FileSearchOptions, token: vscode.CancellationToken): Promise<URI[]> {\n\t\t\t\t\treturn Promise.resolve(reportedResults);\n\t\t\t\t}\n\t\t\t}, fancyScheme);\n\n\t\t\tconst query: ISearchQuery = {\n\t\t\t\ttype: QueryType.File,\n\t\t\t\tfilePattern: '',\n\t\t\t\tfolderQueries: [\n\t\t\t\t\t{\n\t\t\t\t\t\tfolder: fancySchemeFolderA\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t};\n\n\t\t\tconst { results } = await runFileSearch(query);\n\t\t\tcompareURIs(results, reportedResults);\n\t\t});\n\t\ttest('if onlyFileScheme is set, do not call custom schemes', async () => {\n\t\t\tlet fancySchemeCalled = false;\n\t\t\tawait registerTestFileSearchProvider({\n\t\t\t\tprovideFileSearchResults(query: vscode.FileSearchQuery, options: vscode.FileSearchOptions, token: vscode.CancellationToken): Promise<URI[]> {\n\t\t\t\t\tfancySchemeCalled = true;\n\t\t\t\t\treturn Promise.resolve([]);\n\t\t\t\t}\n\t\t\t}, fancyScheme);\n\n\t\t\tconst query: ISearchQuery = {\n\t\t\t\ttype: QueryType.File,\n\t\t\t\tfilePattern: '',\n\t\t\t\tfolderQueries: []\n\t\t\t};\n\n\t\t\tawait runFileSearch(query);\n\t\t\tassert(!fancySchemeCalled);\n\t\t});\n\t});\n\n\tsuite('Text:', () => {\n\n\t\tfunction makePreview(text: string): vscode.TextSearchMatch['preview'] {\n\t\t\treturn {\n\t\t\t\tmatches: [new Range(0, 0, 0, text.length)],\n\t\t\t\ttext\n\t\t\t};\n\t\t}\n\n\t\tfunction makeTextResult(baseFolder: URI, relativePath: string): vscode.TextSearchMatch {\n\t\t\treturn {\n\t\t\t\tpreview: makePreview('foo'),\n\t\t\t\tranges: [new Range(0, 0, 0, 3)],\n\t\t\t\turi: joinPath(baseFolder, relativePath)\n\t\t\t};\n\t\t}\n\n\t\tfunction getSimpleQuery(queryText: string): ITextQuery {\n\t\t\treturn {\n\t\t\t\ttype: QueryType.Text,\n\t\t\t\tcontentPattern: getPattern(queryText),\n\n\t\t\t\tfolderQueries: [\n\t\t\t\t\t{ folder: rootFolderA }\n\t\t\t\t]\n\t\t\t};\n\t\t}\n\n\t\tfunction getPattern(queryText: string): IPatternInfo {\n\t\t\treturn {\n\t\t\t\tpattern: queryText\n\t\t\t};\n\t\t}\n\n\t\tfunction assertResults(actual: IFileMatch[], expected: vscode.TextSearchResult[]) {\n\t\t\tconst actualTextSearchResults: vscode.TextSearchResult[] = [];\n\t\t\tfor (const fileMatch of actual) {\n\t\t\t\t// Make relative\n\t\t\t\tfor (const lineResult of fileMatch.results!) {\n\t\t\t\t\tif (resultIsMatch(lineResult)) {\n\t\t\t\t\t\tactualTextSearchResults.push({\n\t\t\t\t\t\t\tpreview: {\n\t\t\t\t\t\t\t\ttext: lineResult.previewText,\n\t\t\t\t\t\t\t\tmatches: mapArrayOrNot(\n\t\t\t\t\t\t\t\t\tlineResult.rangeLocations.map(r => r.preview),\n\t\t\t\t\t\t\t\t\tm => new Range(m.startLineNumber, m.startColumn, m.endLineNumber, m.endColumn))\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tranges: mapArrayOrNot(\n\t\t\t\t\t\t\t\tlineResult.rangeLocations.map(r => r.source),\n\t\t\t\t\t\t\t\tr => new Range(r.startLineNumber, r.startColumn, r.endLineNumber, r.endColumn),\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\turi: fileMatch.resource\n\t\t\t\t\t\t});\n\t\t\t\t\t} else {\n\t\t\t\t\t\tactualTextSearchResults.push(<vscode.TextSearchContext>{\n\t\t\t\t\t\t\ttext: lineResult.text,\n\t\t\t\t\t\t\tlineNumber: lineResult.lineNumber,\n\t\t\t\t\t\t\turi: fileMatch.resource\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst rangeToString = (r: vscode.Range) => `(${r.start.line}, ${r.start.character}), (${r.end.line}, ${r.end.character})`;\n\n\t\t\tconst makeComparable = (results: vscode.TextSearchResult[]) => results\n\t\t\t\t.sort((a, b) => {\n\t\t\t\t\tconst compareKeyA = a.uri.toString() + ': ' + (extensionResultIsMatch(a) ? a.preview.text : a.text);\n\t\t\t\t\tconst compareKeyB = b.uri.toString() + ': ' + (extensionResultIsMatch(b) ? b.preview.text : b.text);\n\t\t\t\t\treturn compareKeyB.localeCompare(compareKeyA);\n\t\t\t\t})\n\t\t\t\t.map(r => extensionResultIsMatch(r) ? {\n\t\t\t\t\turi: r.uri.toString(),\n\t\t\t\t\trange: mapArrayOrNot(r.ranges, rangeToString),\n\t\t\t\t\tpreview: {\n\t\t\t\t\t\ttext: r.preview.text,\n\t\t\t\t\t\tmatch: null // Don't care about this right now\n\t\t\t\t\t}\n\t\t\t\t} : {\n\t\t\t\t\turi: r.uri.toString(),\n\t\t\t\t\ttext: r.text,\n\t\t\t\t\tlineNumber: r.lineNumber\n\t\t\t\t});\n\n\t\t\treturn assert.deepStrictEqual(\n\t\t\t\tmakeComparable(actualTextSearchResults),\n\t\t\t\tmakeComparable(expected));\n\t\t}\n\n\t\ttest('no results', async () => {\n\t\t\tawait registerTestTextSearchProvider({\n\t\t\t\tprovideTextSearchResults(query: vscode.TextSearchQuery, options: vscode.TextSearchOptions, progress: vscode.Progress<vscode.TextSearchResult>, token: vscode.CancellationToken): Promise<vscode.TextSearchComplete> {\n\t\t\t\t\treturn Promise.resolve(null!);\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tconst { results, stats } = await runTextSearch(getSimpleQuery('foo'));\n\t\t\tassert(!stats.limitHit);\n\t\t\tassert(!results.length);\n\t\t});\n\n\t\ttest('basic results', async () => {\n\t\t\tconst providedResults: vscode.TextSearchResult[] = [\n\t\t\t\tmakeTextResult(rootFolderA, 'file1.ts'),\n\t\t\t\tmakeTextResult(rootFolderA, 'file2.ts')\n\t\t\t];\n\n\t\t\tawait registerTestTextSearchProvider({\n\t\t\t\tprovideTextSearchResults(query: vscode.TextSearchQuery, options: vscode.TextSearchOptions, progress: vscode.Progress<vscode.TextSearchResult>, token: vscode.CancellationToken): Promise<vscode.TextSearchComplete> {\n\t\t\t\t\tprovidedResults.forEach(r => progress.report(r));\n\t\t\t\t\treturn Promise.resolve(null!);\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tconst { results, stats } = await runTextSearch(getSimpleQuery('foo'));\n\t\t\tassert(!stats.limitHit);\n\t\t\tassertResults(results, providedResults);\n\t\t});\n\n\t\ttest('all provider calls get global include/excludes', async () => {\n\t\t\tawait registerTestTextSearchProvider({\n\t\t\t\tprovideTextSearchResults(query: vscode.TextSearchQuery, options: vscode.TextSearchOptions, progress: vscode.Progress<vscode.TextSearchResult>, token: vscode.CancellationToken): Promise<vscode.TextSearchComplete> {\n\t\t\t\t\tassert.strictEqual(options.includes.length, 1);\n\t\t\t\t\tassert.strictEqual(options.excludes.length, 1);\n\t\t\t\t\treturn Promise.resolve(null!);\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tconst query: ITextQuery = {\n\t\t\t\ttype: QueryType.Text,\n\t\t\t\tcontentPattern: getPattern('foo'),\n\n\t\t\t\tincludePattern: {\n\t\t\t\t\t'*.ts': true\n\t\t\t\t},\n\n\t\t\t\texcludePattern: {\n\t\t\t\t\t'*.js': true\n\t\t\t\t},\n\n\t\t\t\tfolderQueries: [\n\t\t\t\t\t{ folder: rootFolderA },\n\t\t\t\t\t{ folder: rootFolderB }\n\t\t\t\t]\n\t\t\t};\n\n\t\t\tawait runTextSearch(query);\n\t\t});\n\n\t\ttest('global/local include/excludes combined', async () => {\n\t\t\tawait registerTestTextSearchProvider({\n\t\t\t\tprovideTextSearchResults(query: vscode.TextSearchQuery, options: vscode.TextSearchOptions, progress: vscode.Progress<vscode.TextSearchResult>, token: vscode.CancellationToken): Promise<vscode.TextSearchComplete> {\n\t\t\t\t\tif (options.folder.toString() === rootFolderA.toString()) {\n\t\t\t\t\t\tassert.deepStrictEqual(options.includes.sort(), ['*.ts', 'foo']);\n\t\t\t\t\t\tassert.deepStrictEqual(options.excludes.sort(), ['*.js', 'bar']);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tassert.deepStrictEqual(options.includes.sort(), ['*.ts']);\n\t\t\t\t\t\tassert.deepStrictEqual(options.excludes.sort(), ['*.js']);\n\t\t\t\t\t}\n\n\t\t\t\t\treturn Promise.resolve(null!);\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tconst query: ITextQuery = {\n\t\t\t\ttype: QueryType.Text,\n\t\t\t\tcontentPattern: getPattern('foo'),\n\n\t\t\t\tincludePattern: {\n\t\t\t\t\t'*.ts': true\n\t\t\t\t},\n\t\t\t\texcludePattern: {\n\t\t\t\t\t'*.js': true\n\t\t\t\t},\n\t\t\t\tfolderQueries: [\n\t\t\t\t\t{\n\t\t\t\t\t\tfolder: rootFolderA,\n\t\t\t\t\t\tincludePattern: {\n\t\t\t\t\t\t\t'foo': true\n\t\t\t\t\t\t},\n\t\t\t\t\t\texcludePattern: [{\n\t\t\t\t\t\t\tpattern: {\n\t\t\t\t\t\t\t\t'bar': true\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}]\n\t\t\t\t\t},\n\t\t\t\t\t{ folder: rootFolderB }\n\t\t\t\t]\n\t\t\t};\n\n\t\t\tawait runTextSearch(query);\n\t\t});\n\n\t\ttest('include/excludes resolved correctly', async () => {\n\t\t\tawait registerTestTextSearchProvider({\n\t\t\t\tprovideTextSearchResults(query: vscode.TextSearchQuery, options: vscode.TextSearchOptions, progress: vscode.Progress<vscode.TextSearchResult>, token: vscode.CancellationToken): Promise<vscode.TextSearchComplete> {\n\t\t\t\t\tassert.deepStrictEqual(options.includes.sort(), ['*.jsx', '*.ts']);\n\t\t\t\t\tassert.deepStrictEqual(options.excludes.sort(), []);\n\n\t\t\t\t\treturn Promise.resolve(null!);\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tconst query: ISearchQuery = {\n\t\t\t\ttype: QueryType.Text,\n\t\t\t\tcontentPattern: getPattern('foo'),\n\n\t\t\t\tincludePattern: {\n\t\t\t\t\t'*.ts': true,\n\t\t\t\t\t'*.jsx': false\n\t\t\t\t},\n\t\t\t\texcludePattern: {\n\t\t\t\t\t'*.js': true,\n\t\t\t\t\t'*.tsx': false\n\t\t\t\t},\n\t\t\t\tfolderQueries: [\n\t\t\t\t\t{\n\t\t\t\t\t\tfolder: rootFolderA,\n\t\t\t\t\t\tincludePattern: {\n\t\t\t\t\t\t\t'*.jsx': true\n\t\t\t\t\t\t},\n\t\t\t\t\t\texcludePattern: [{\n\t\t\t\t\t\t\tpattern: {\n\t\t\t\t\t\t\t\t'*.js': false\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}]\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t};\n\n\t\t\tawait runTextSearch(query);\n\t\t});\n\n\t\ttest('provider fail', async () => {\n\t\t\tawait registerTestTextSearchProvider({\n\t\t\t\tprovideTextSearchResults(query: vscode.TextSearchQuery, options: vscode.TextSearchOptions, progress: vscode.Progress<vscode.TextSearchResult>, token: vscode.CancellationToken): Promise<vscode.TextSearchComplete> {\n\t\t\t\t\tthrow new Error('Provider fail');\n\t\t\t\t}\n\t\t\t});\n\n\t\t\ttry {\n\t\t\t\tawait runTextSearch(getSimpleQuery('foo'));\n\t\t\t\tassert(false, 'Expected to fail');\n\t\t\t} catch {\n\t\t\t\t// expected to fail\n\t\t\t}\n\t\t});\n\n\t\ttest('basic sibling clause', async () => {\n\t\t\t(mockPFS as any).Promises = {\n\t\t\t\treaddir: (_path: string): any => {\n\t\t\t\t\tif (_path === rootFolderA.fsPath) {\n\t\t\t\t\t\treturn Promise.resolve([\n\t\t\t\t\t\t\t'file1.js',\n\t\t\t\t\t\t\t'file1.ts'\n\t\t\t\t\t\t]);\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn Promise.reject(new Error('Wrong path'));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tconst providedResults: vscode.TextSearchResult[] = [\n\t\t\t\tmakeTextResult(rootFolderA, 'file1.js'),\n\t\t\t\tmakeTextResult(rootFolderA, 'file1.ts')\n\t\t\t];\n\n\t\t\tawait registerTestTextSearchProvider({\n\t\t\t\tprovideTextSearchResults(query: vscode.TextSearchQuery, options: vscode.TextSearchOptions, progress: vscode.Progress<vscode.TextSearchResult>, token: vscode.CancellationToken): Promise<vscode.TextSearchComplete> {\n\t\t\t\t\tprovidedResults.forEach(r => progress.report(r));\n\t\t\t\t\treturn Promise.resolve(null!);\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tconst query: ISearchQuery = {\n\t\t\t\ttype: QueryType.Text,\n\t\t\t\tcontentPattern: getPattern('foo'),\n\n\t\t\t\texcludePattern: {\n\t\t\t\t\t'*.js': {\n\t\t\t\t\t\twhen: '$(basename).ts'\n\t\t\t\t\t}\n\t\t\t\t},\n\n\t\t\t\tfolderQueries: [\n\t\t\t\t\t{ folder: rootFolderA }\n\t\t\t\t]\n\t\t\t};\n\n\t\t\tconst { results } = await runTextSearch(query);\n\t\t\tassertResults(results, providedResults.slice(1));\n\t\t});\n\n\t\ttest('multiroot sibling clause', async () => {\n\t\t\t(mockPFS as any).Promises = {\n\t\t\t\treaddir: (_path: string): any => {\n\t\t\t\t\tif (_path === joinPath(rootFolderA, 'folder').fsPath) {\n\t\t\t\t\t\treturn Promise.resolve([\n\t\t\t\t\t\t\t'fileA.scss',\n\t\t\t\t\t\t\t'fileA.css',\n\t\t\t\t\t\t\t'file2.css'\n\t\t\t\t\t\t]);\n\t\t\t\t\t} else if (_path === rootFolderB.fsPath) {\n\t\t\t\t\t\treturn Promise.resolve([\n\t\t\t\t\t\t\t'fileB.ts',\n\t\t\t\t\t\t\t'fileB.js',\n\t\t\t\t\t\t\t'file3.js'\n\t\t\t\t\t\t]);\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn Promise.reject(new Error('Wrong path'));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tawait registerTestTextSearchProvider({\n\t\t\t\tprovideTextSearchResults(query: vscode.TextSearchQuery, options: vscode.TextSearchOptions, progress: vscode.Progress<vscode.TextSearchResult>, token: vscode.CancellationToken): Promise<vscode.TextSearchComplete> {\n\t\t\t\t\tlet reportedResults;\n\t\t\t\t\tif (options.folder.fsPath === rootFolderA.fsPath) {\n\t\t\t\t\t\treportedResults = [\n\t\t\t\t\t\t\tmakeTextResult(rootFolderA, 'folder/fileA.scss'),\n\t\t\t\t\t\t\tmakeTextResult(rootFolderA, 'folder/fileA.css'),\n\t\t\t\t\t\t\tmakeTextResult(rootFolderA, 'folder/file2.css')\n\t\t\t\t\t\t];\n\t\t\t\t\t} else {\n\t\t\t\t\t\treportedResults = [\n\t\t\t\t\t\t\tmakeTextResult(rootFolderB, 'fileB.ts'),\n\t\t\t\t\t\t\tmakeTextResult(rootFolderB, 'fileB.js'),\n\t\t\t\t\t\t\tmakeTextResult(rootFolderB, 'file3.js')\n\t\t\t\t\t\t];\n\t\t\t\t\t}\n\n\t\t\t\t\treportedResults.forEach(r => progress.report(r));\n\t\t\t\t\treturn Promise.resolve(null!);\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tconst query: ISearchQuery = {\n\t\t\t\ttype: QueryType.Text,\n\t\t\t\tcontentPattern: getPattern('foo'),\n\n\t\t\t\texcludePattern: {\n\t\t\t\t\t'*.js': {\n\t\t\t\t\t\twhen: '$(basename).ts'\n\t\t\t\t\t},\n\t\t\t\t\t'*.css': true\n\t\t\t\t},\n\t\t\t\tfolderQueries: [\n\t\t\t\t\t{\n\t\t\t\t\t\tfolder: rootFolderA,\n\t\t\t\t\t\texcludePattern: [{\n\t\t\t\t\t\t\tpattern: {\n\t\t\t\t\t\t\t\t'folder/*.css': {\n\t\t\t\t\t\t\t\t\twhen: '$(basename).scss'\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}]\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tfolder: rootFolderB,\n\t\t\t\t\t\texcludePattern: [{\n\t\t\t\t\t\t\tpattern: {\n\t\t\t\t\t\t\t\t'*.js': false\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}]\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t};\n\n\t\t\tconst { results } = await runTextSearch(query);\n\t\t\tassertResults(results, [\n\t\t\t\tmakeTextResult(rootFolderA, 'folder/fileA.scss'),\n\t\t\t\tmakeTextResult(rootFolderA, 'folder/file2.css'),\n\t\t\t\tmakeTextResult(rootFolderB, 'fileB.ts'),\n\t\t\t\tmakeTextResult(rootFolderB, 'fileB.js'),\n\t\t\t\tmakeTextResult(rootFolderB, 'file3.js')]);\n\t\t});\n\n\t\ttest('include pattern applied', async () => {\n\t\t\tconst providedResults: vscode.TextSearchResult[] = [\n\t\t\t\tmakeTextResult(rootFolderA, 'file1.js'),\n\t\t\t\tmakeTextResult(rootFolderA, 'file1.ts')\n\t\t\t];\n\n\t\t\tawait registerTestTextSearchProvider({\n\t\t\t\tprovideTextSearchResults(query: vscode.TextSearchQuery, options: vscode.TextSearchOptions, progress: vscode.Progress<vscode.TextSearchResult>, token: vscode.CancellationToken): Promise<vscode.TextSearchComplete> {\n\t\t\t\t\tprovidedResults.forEach(r => progress.report(r));\n\t\t\t\t\treturn Promise.resolve(null!);\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tconst query: ISearchQuery = {\n\t\t\t\ttype: QueryType.Text,\n\t\t\t\tcontentPattern: getPattern('foo'),\n\n\t\t\t\tincludePattern: {\n\t\t\t\t\t'*.ts': true\n\t\t\t\t},\n\n\t\t\t\tfolderQueries: [\n\t\t\t\t\t{ folder: rootFolderA }\n\t\t\t\t]\n\t\t\t};\n\n\t\t\tconst { results } = await runTextSearch(query);\n\t\t\tassertResults(results, providedResults.slice(1));\n\t\t});\n\n\t\ttest('max results = 1', async () => {\n\t\t\tconst providedResults: vscode.TextSearchResult[] = [\n\t\t\t\tmakeTextResult(rootFolderA, 'file1.ts'),\n\t\t\t\tmakeTextResult(rootFolderA, 'file2.ts')\n\t\t\t];\n\n\t\t\tlet wasCanceled = false;\n\t\t\tawait registerTestTextSearchProvider({\n\t\t\t\tprovideTextSearchResults(query: vscode.TextSearchQuery, options: vscode.TextSearchOptions, progress: vscode.Progress<vscode.TextSearchResult>, token: vscode.CancellationToken): Promise<vscode.TextSearchComplete> {\n\t\t\t\t\tdisposables.add(token.onCancellationRequested(() => wasCanceled = true));\n\t\t\t\t\tprovidedResults.forEach(r => progress.report(r));\n\t\t\t\t\treturn Promise.resolve(null!);\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tconst query: ISearchQuery = {\n\t\t\t\ttype: QueryType.Text,\n\t\t\t\tcontentPattern: getPattern('foo'),\n\n\t\t\t\tmaxResults: 1,\n\n\t\t\t\tfolderQueries: [\n\t\t\t\t\t{ folder: rootFolderA }\n\t\t\t\t]\n\t\t\t};\n\n\t\t\tconst { results, stats } = await runTextSearch(query);\n\t\t\tassert(stats.limitHit, 'Expected to return limitHit');\n\t\t\tassertResults(results, providedResults.slice(0, 1));\n\t\t\tassert(wasCanceled, 'Expected to be canceled');\n\t\t});\n\n\t\ttest('max results = 2', async () => {\n\t\t\tconst providedResults: vscode.TextSearchResult[] = [\n\t\t\t\tmakeTextResult(rootFolderA, 'file1.ts'),\n\t\t\t\tmakeTextResult(rootFolderA, 'file2.ts'),\n\t\t\t\tmakeTextResult(rootFolderA, 'file3.ts')\n\t\t\t];\n\n\t\t\tlet wasCanceled = false;\n\t\t\tawait registerTestTextSearchProvider({\n\t\t\t\tprovideTextSearchResults(query: vscode.TextSearchQuery, options: vscode.TextSearchOptions, progress: vscode.Progress<vscode.TextSearchResult>, token: vscode.CancellationToken): Promise<vscode.TextSearchComplete> {\n\t\t\t\t\tdisposables.add(token.onCancellationRequested(() => wasCanceled = true));\n\t\t\t\t\tprovidedResults.forEach(r => progress.report(r));\n\t\t\t\t\treturn Promise.resolve(null!);\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tconst query: ISearchQuery = {\n\t\t\t\ttype: QueryType.Text,\n\t\t\t\tcontentPattern: getPattern('foo'),\n\n\t\t\t\tmaxResults: 2,\n\n\t\t\t\tfolderQueries: [\n\t\t\t\t\t{ folder: rootFolderA }\n\t\t\t\t]\n\t\t\t};\n\n\t\t\tconst { results, stats } = await runTextSearch(query);\n\t\t\tassert(stats.limitHit, 'Expected to return limitHit');\n\t\t\tassertResults(results, providedResults.slice(0, 2));\n\t\t\tassert(wasCanceled, 'Expected to be canceled');\n\t\t});\n\n\t\ttest('provider returns maxResults exactly', async () => {\n\t\t\tconst providedResults: vscode.TextSearchResult[] = [\n\t\t\t\tmakeTextResult(rootFolderA, 'file1.ts'),\n\t\t\t\tmakeTextResult(rootFolderA, 'file2.ts')\n\t\t\t];\n\n\t\t\tlet wasCanceled = false;\n\t\t\tawait registerTestTextSearchProvider({\n\t\t\t\tprovideTextSearchResults(query: vscode.TextSearchQuery, options: vscode.TextSearchOptions, progress: vscode.Progress<vscode.TextSearchResult>, token: vscode.CancellationToken): Promise<vscode.TextSearchComplete> {\n\t\t\t\t\tdisposables.add(token.onCancellationRequested(() => wasCanceled = true));\n\t\t\t\t\tprovidedResults.forEach(r => progress.report(r));\n\t\t\t\t\treturn Promise.resolve(null!);\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tconst query: ISearchQuery = {\n\t\t\t\ttype: QueryType.Text,\n\t\t\t\tcontentPattern: getPattern('foo'),\n\n\t\t\t\tmaxResults: 2,\n\n\t\t\t\tfolderQueries: [\n\t\t\t\t\t{ folder: rootFolderA }\n\t\t\t\t]\n\t\t\t};\n\n\t\t\tconst { results, stats } = await runTextSearch(query);\n\t\t\tassert(!stats.limitHit, 'Expected not to return limitHit');\n\t\t\tassertResults(results, providedResults);\n\t\t\tassert(!wasCanceled, 'Expected not to be canceled');\n\t\t});\n\n\t\ttest('provider returns early with limitHit', async () => {\n\t\t\tconst providedResults: vscode.TextSearchResult[] = [\n\t\t\t\tmakeTextResult(rootFolderA, 'file1.ts'),\n\t\t\t\tmakeTextResult(rootFolderA, 'file2.ts'),\n\t\t\t\tmakeTextResult(rootFolderA, 'file3.ts')\n\t\t\t];\n\n\t\t\tawait registerTestTextSearchProvider({\n\t\t\t\tprovideTextSearchResults(query: vscode.TextSearchQuery, options: vscode.TextSearchOptions, progress: vscode.Progress<vscode.TextSearchResult>, token: vscode.CancellationToken): Promise<vscode.TextSearchComplete> {\n\t\t\t\t\tprovidedResults.forEach(r => progress.report(r));\n\t\t\t\t\treturn Promise.resolve({ limitHit: true });\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tconst query: ISearchQuery = {\n\t\t\t\ttype: QueryType.Text,\n\t\t\t\tcontentPattern: getPattern('foo'),\n\n\t\t\t\tmaxResults: 1000,\n\n\t\t\t\tfolderQueries: [\n\t\t\t\t\t{ folder: rootFolderA }\n\t\t\t\t]\n\t\t\t};\n\n\t\t\tconst { results, stats } = await runTextSearch(query);\n\t\t\tassert(stats.limitHit, 'Expected to return limitHit');\n\t\t\tassertResults(results, providedResults);\n\t\t});\n\n\t\ttest('multiroot max results', async () => {\n\t\t\tlet cancels = 0;\n\t\t\tawait registerTestTextSearchProvider({\n\t\t\t\tasync provideTextSearchResults(query: vscode.TextSearchQuery, options: vscode.TextSearchOptions, progress: vscode.Progress<vscode.TextSearchResult>, token: vscode.CancellationToken): Promise<vscode.TextSearchComplete> {\n\t\t\t\t\tdisposables.add(token.onCancellationRequested(() => cancels++));\n\t\t\t\t\tawait new Promise(r => process.nextTick(r));\n\t\t\t\t\t[\n\t\t\t\t\t\t'file1.ts',\n\t\t\t\t\t\t'file2.ts',\n\t\t\t\t\t\t'file3.ts',\n\t\t\t\t\t].forEach(f => progress.report(makeTextResult(options.folder, f)));\n\t\t\t\t\treturn null!;\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tconst query: ISearchQuery = {\n\t\t\t\ttype: QueryType.Text,\n\t\t\t\tcontentPattern: getPattern('foo'),\n\n\t\t\t\tmaxResults: 2,\n\n\t\t\t\tfolderQueries: [\n\t\t\t\t\t{ folder: rootFolderA },\n\t\t\t\t\t{ folder: rootFolderB }\n\t\t\t\t]\n\t\t\t};\n\n\t\t\tconst { results } = await runTextSearch(query);\n\t\t\tassert.strictEqual(results.length, 2);\n\t\t\tassert.strictEqual(cancels, 2);\n\t\t});\n\n\t\ttest('works with non-file schemes', async () => {\n\t\t\tconst providedResults: vscode.TextSearchResult[] = [\n\t\t\t\tmakeTextResult(fancySchemeFolderA, 'file1.ts'),\n\t\t\t\tmakeTextResult(fancySchemeFolderA, 'file2.ts'),\n\t\t\t\tmakeTextResult(fancySchemeFolderA, 'file3.ts')\n\t\t\t];\n\n\t\t\tawait registerTestTextSearchProvider({\n\t\t\t\tprovideTextSearchResults(query: vscode.TextSearchQuery, options: vscode.TextSearchOptions, progress: vscode.Progress<vscode.TextSearchResult>, token: vscode.CancellationToken): Promise<vscode.TextSearchComplete> {\n\t\t\t\t\tprovidedResults.forEach(r => progress.report(r));\n\t\t\t\t\treturn Promise.resolve(null!);\n\t\t\t\t}\n\t\t\t}, fancyScheme);\n\n\t\t\tconst query: ISearchQuery = {\n\t\t\t\ttype: QueryType.Text,\n\t\t\t\tcontentPattern: getPattern('foo'),\n\n\t\t\t\tfolderQueries: [\n\t\t\t\t\t{ folder: fancySchemeFolderA }\n\t\t\t\t]\n\t\t\t};\n\n\t\t\tconst { results } = await runTextSearch(query);\n\t\t\tassertResults(results, providedResults);\n\t\t});\n\t});\n});\n"],
  "mappings": "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",
  "names": ["disposables", "query"]
}
