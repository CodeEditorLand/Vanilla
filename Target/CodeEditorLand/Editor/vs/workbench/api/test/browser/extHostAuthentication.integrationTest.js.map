{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/api/test/browser/extHostAuthentication.integrationTest.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport assert from 'assert';\nimport { DisposableStore } from '../../../../base/common/lifecycle.js';\nimport { IDialogService } from '../../../../platform/dialogs/common/dialogs.js';\nimport { TestDialogService } from '../../../../platform/dialogs/test/common/testDialogService.js';\nimport { TestInstantiationService } from '../../../../platform/instantiation/test/common/instantiationServiceMock.js';\nimport { INotificationService } from '../../../../platform/notification/common/notification.js';\nimport { TestNotificationService } from '../../../../platform/notification/test/common/testNotificationService.js';\nimport { IQuickInputHideEvent, IQuickInputService, IQuickPickDidAcceptEvent } from '../../../../platform/quickinput/common/quickInput.js';\nimport { IStorageService } from '../../../../platform/storage/common/storage.js';\nimport { ITelemetryService } from '../../../../platform/telemetry/common/telemetry.js';\nimport { NullTelemetryService } from '../../../../platform/telemetry/common/telemetryUtils.js';\nimport { MainThreadAuthentication } from '../../browser/mainThreadAuthentication.js';\nimport { ExtHostContext, MainContext } from '../../common/extHost.protocol.js';\nimport { ExtHostAuthentication } from '../../common/extHostAuthentication.js';\nimport { IActivityService } from '../../../services/activity/common/activity.js';\nimport { AuthenticationService } from '../../../services/authentication/browser/authenticationService.js';\nimport { IAuthenticationExtensionsService, IAuthenticationService } from '../../../services/authentication/common/authentication.js';\nimport { IExtensionService, nullExtensionDescription as extensionDescription } from '../../../services/extensions/common/extensions.js';\nimport { IRemoteAgentService } from '../../../services/remote/common/remoteAgentService.js';\nimport { TestRPCProtocol } from '../common/testRPCProtocol.js';\nimport { TestEnvironmentService, TestQuickInputService, TestRemoteAgentService } from '../../../test/browser/workbenchTestServices.js';\nimport { TestActivityService, TestExtensionService, TestProductService, TestStorageService } from '../../../test/common/workbenchTestServices.js';\nimport type { AuthenticationProvider, AuthenticationSession } from 'vscode';\nimport { IBrowserWorkbenchEnvironmentService } from '../../../services/environment/browser/environmentService.js';\nimport { IProductService } from '../../../../platform/product/common/productService.js';\nimport { AuthenticationAccessService, IAuthenticationAccessService } from '../../../services/authentication/browser/authenticationAccessService.js';\nimport { AuthenticationUsageService, IAuthenticationUsageService } from '../../../services/authentication/browser/authenticationUsageService.js';\nimport { AuthenticationExtensionsService } from '../../../services/authentication/browser/authenticationExtensionsService.js';\n\nclass AuthQuickPick {\n\tprivate listener: ((e: IQuickPickDidAcceptEvent) => any) | undefined;\n\tpublic items = [];\n\tpublic get selectedItems(): string[] {\n\t\treturn this.items;\n\t}\n\n\tonDidAccept(listener: (e: IQuickPickDidAcceptEvent) => any) {\n\t\tthis.listener = listener;\n\t}\n\tonDidHide(listener: (e: IQuickInputHideEvent) => any) {\n\n\t}\n\tdispose() {\n\n\t}\n\tshow() {\n\t\tthis.listener!({\n\t\t\tinBackground: false\n\t\t});\n\t}\n}\nclass AuthTestQuickInputService extends TestQuickInputService {\n\toverride createQuickPick() {\n\t\treturn <any>new AuthQuickPick();\n\t}\n}\n\nclass TestAuthProvider implements AuthenticationProvider {\n\tprivate id = 1;\n\tprivate sessions = new Map<string, AuthenticationSession>();\n\tonDidChangeSessions = () => { return { dispose() { } }; };\n\tconstructor(private readonly authProviderName: string) { }\n\tasync getSessions(scopes?: readonly string[]): Promise<AuthenticationSession[]> {\n\t\tif (!scopes) {\n\t\t\treturn [...this.sessions.values()];\n\t\t}\n\n\t\tif (scopes[0] === 'return multiple') {\n\t\t\treturn [...this.sessions.values()];\n\t\t}\n\t\tconst sessions = this.sessions.get(scopes.join(' '));\n\t\treturn sessions ? [sessions] : [];\n\t}\n\tasync createSession(scopes: readonly string[]): Promise<AuthenticationSession> {\n\t\tconst scopesStr = scopes.join(' ');\n\t\tconst session = {\n\t\t\tscopes,\n\t\t\tid: `${this.id}`,\n\t\t\taccount: {\n\t\t\t\tlabel: this.authProviderName,\n\t\t\t\tid: `${this.id}`,\n\t\t\t},\n\t\t\taccessToken: Math.random() + '',\n\t\t};\n\t\tthis.sessions.set(scopesStr, session);\n\t\tthis.id++;\n\t\treturn session;\n\t}\n\tasync removeSession(sessionId: string): Promise<void> {\n\t\tthis.sessions.delete(sessionId);\n\t}\n\n}\n\nsuite('ExtHostAuthentication', () => {\n\tlet disposables: DisposableStore;\n\n\tlet extHostAuthentication: ExtHostAuthentication;\n\tlet instantiationService: TestInstantiationService;\n\n\tsuiteSetup(async () => {\n\t\tinstantiationService = new TestInstantiationService();\n\t\tinstantiationService.stub(IDialogService, new TestDialogService({ confirmed: true }));\n\t\tinstantiationService.stub(IStorageService, new TestStorageService());\n\t\tinstantiationService.stub(IQuickInputService, new AuthTestQuickInputService());\n\t\tinstantiationService.stub(IExtensionService, new TestExtensionService());\n\n\t\tinstantiationService.stub(IActivityService, new TestActivityService());\n\t\tinstantiationService.stub(IRemoteAgentService, new TestRemoteAgentService());\n\t\tinstantiationService.stub(INotificationService, new TestNotificationService());\n\t\tinstantiationService.stub(ITelemetryService, NullTelemetryService);\n\t\tinstantiationService.stub(IBrowserWorkbenchEnvironmentService, TestEnvironmentService);\n\t\tinstantiationService.stub(IProductService, TestProductService);\n\t\tinstantiationService.stub(IAuthenticationAccessService, instantiationService.createInstance(AuthenticationAccessService));\n\t\tinstantiationService.stub(IAuthenticationUsageService, instantiationService.createInstance(AuthenticationUsageService));\n\t\tconst rpcProtocol = new TestRPCProtocol();\n\n\t\tinstantiationService.stub(IAuthenticationService, instantiationService.createInstance(AuthenticationService));\n\t\tinstantiationService.stub(IAuthenticationExtensionsService, instantiationService.createInstance(AuthenticationExtensionsService));\n\t\trpcProtocol.set(MainContext.MainThreadAuthentication, instantiationService.createInstance(MainThreadAuthentication, rpcProtocol));\n\t\textHostAuthentication = new ExtHostAuthentication(rpcProtocol);\n\t\trpcProtocol.set(ExtHostContext.ExtHostAuthentication, extHostAuthentication);\n\t});\n\n\tsetup(async () => {\n\t\tdisposables = new DisposableStore();\n\t\tdisposables.add(extHostAuthentication.registerAuthenticationProvider('test', 'test provider', new TestAuthProvider('test')));\n\t\tdisposables.add(extHostAuthentication.registerAuthenticationProvider(\n\t\t\t'test-multiple',\n\t\t\t'test multiple provider',\n\t\t\tnew TestAuthProvider('test-multiple'),\n\t\t\t{ supportsMultipleAccounts: true }));\n\t});\n\n\tsuiteTeardown(() => {\n\t\tinstantiationService.dispose();\n\t});\n\n\tteardown(() => {\n\t\tdisposables.dispose();\n\t});\n\n\ttest('createIfNone - true', async () => {\n\t\tconst scopes = ['foo'];\n\t\tconst session = await extHostAuthentication.getSession(\n\t\t\textensionDescription,\n\t\t\t'test',\n\t\t\tscopes,\n\t\t\t{\n\t\t\t\tcreateIfNone: true\n\t\t\t});\n\t\tassert.strictEqual(session?.id, '1');\n\t\tassert.strictEqual(session?.scopes[0], 'foo');\n\t});\n\n\ttest('createIfNone - false', async () => {\n\t\tconst scopes = ['foo'];\n\t\tconst nosession = await extHostAuthentication.getSession(\n\t\t\textensionDescription,\n\t\t\t'test',\n\t\t\tscopes,\n\t\t\t{});\n\t\tassert.strictEqual(nosession, undefined);\n\n\t\t// Now create the session\n\t\tconst session = await extHostAuthentication.getSession(\n\t\t\textensionDescription,\n\t\t\t'test',\n\t\t\tscopes,\n\t\t\t{\n\t\t\t\tcreateIfNone: true\n\t\t\t});\n\n\t\tassert.strictEqual(session?.id, '1');\n\t\tassert.strictEqual(session?.scopes[0], 'foo');\n\n\t\tconst session2 = await extHostAuthentication.getSession(\n\t\t\textensionDescription,\n\t\t\t'test',\n\t\t\tscopes,\n\t\t\t{});\n\n\t\tassert.strictEqual(session2?.id, session.id);\n\t\tassert.strictEqual(session2?.scopes[0], session.scopes[0]);\n\t\tassert.strictEqual(session2?.accessToken, session.accessToken);\n\t});\n\n\t// should behave the same as createIfNone: false\n\ttest('silent - true', async () => {\n\t\tconst scopes = ['foo'];\n\t\tconst nosession = await extHostAuthentication.getSession(\n\t\t\textensionDescription,\n\t\t\t'test',\n\t\t\tscopes,\n\t\t\t{\n\t\t\t\tsilent: true\n\t\t\t});\n\t\tassert.strictEqual(nosession, undefined);\n\n\t\t// Now create the session\n\t\tconst session = await extHostAuthentication.getSession(\n\t\t\textensionDescription,\n\t\t\t'test',\n\t\t\tscopes,\n\t\t\t{\n\t\t\t\tcreateIfNone: true\n\t\t\t});\n\n\t\tassert.strictEqual(session?.id, '1');\n\t\tassert.strictEqual(session?.scopes[0], 'foo');\n\n\t\tconst session2 = await extHostAuthentication.getSession(\n\t\t\textensionDescription,\n\t\t\t'test',\n\t\t\tscopes,\n\t\t\t{\n\t\t\t\tsilent: true\n\t\t\t});\n\n\t\tassert.strictEqual(session.id, session2?.id);\n\t\tassert.strictEqual(session.scopes[0], session2?.scopes[0]);\n\t});\n\n\ttest('forceNewSession - true - existing session', async () => {\n\t\tconst scopes = ['foo'];\n\t\tconst session1 = await extHostAuthentication.getSession(\n\t\t\textensionDescription,\n\t\t\t'test',\n\t\t\tscopes,\n\t\t\t{\n\t\t\t\tcreateIfNone: true\n\t\t\t});\n\n\t\t// Now create the session\n\t\tconst session2 = await extHostAuthentication.getSession(\n\t\t\textensionDescription,\n\t\t\t'test',\n\t\t\tscopes,\n\t\t\t{\n\t\t\t\tforceNewSession: true\n\t\t\t});\n\n\t\tassert.strictEqual(session2?.id, '2');\n\t\tassert.strictEqual(session2?.scopes[0], 'foo');\n\t\tassert.notStrictEqual(session1.accessToken, session2?.accessToken);\n\t});\n\n\t// Should behave like createIfNone: true\n\ttest('forceNewSession - true - no existing session', async () => {\n\t\tconst scopes = ['foo'];\n\t\tconst session = await extHostAuthentication.getSession(\n\t\t\textensionDescription,\n\t\t\t'test',\n\t\t\tscopes,\n\t\t\t{\n\t\t\t\tforceNewSession: true\n\t\t\t});\n\t\tassert.strictEqual(session?.id, '1');\n\t\tassert.strictEqual(session?.scopes[0], 'foo');\n\t});\n\n\ttest('forceNewSession - detail', async () => {\n\t\tconst scopes = ['foo'];\n\t\tconst session1 = await extHostAuthentication.getSession(\n\t\t\textensionDescription,\n\t\t\t'test',\n\t\t\tscopes,\n\t\t\t{\n\t\t\t\tcreateIfNone: true\n\t\t\t});\n\n\t\t// Now create the session\n\t\tconst session2 = await extHostAuthentication.getSession(\n\t\t\textensionDescription,\n\t\t\t'test',\n\t\t\tscopes,\n\t\t\t{\n\t\t\t\tforceNewSession: { detail: 'bar' }\n\t\t\t});\n\n\t\tassert.strictEqual(session2?.id, '2');\n\t\tassert.strictEqual(session2?.scopes[0], 'foo');\n\t\tassert.notStrictEqual(session1.accessToken, session2?.accessToken);\n\t});\n\n\t//#region Multi-Account AuthProvider\n\n\ttest('clearSessionPreference - true', async () => {\n\t\tconst scopes = ['foo'];\n\t\t// Now create the session\n\t\tconst session = await extHostAuthentication.getSession(\n\t\t\textensionDescription,\n\t\t\t'test-multiple',\n\t\t\tscopes,\n\t\t\t{\n\t\t\t\tcreateIfNone: true\n\t\t\t});\n\n\t\tassert.strictEqual(session?.id, '1');\n\t\tassert.strictEqual(session?.scopes[0], scopes[0]);\n\n\t\tconst scopes2 = ['bar'];\n\t\tconst session2 = await extHostAuthentication.getSession(\n\t\t\textensionDescription,\n\t\t\t'test-multiple',\n\t\t\tscopes2,\n\t\t\t{\n\t\t\t\tcreateIfNone: true\n\t\t\t});\n\t\tassert.strictEqual(session2?.id, '2');\n\t\tassert.strictEqual(session2?.scopes[0], scopes2[0]);\n\n\t\tconst session3 = await extHostAuthentication.getSession(\n\t\t\textensionDescription,\n\t\t\t'test-multiple',\n\t\t\t['return multiple'],\n\t\t\t{\n\t\t\t\tclearSessionPreference: true,\n\t\t\t\tcreateIfNone: true\n\t\t\t});\n\n\t\t// clearing session preference causes us to get the first session\n\t\t// because it would normally show a quick pick for the user to choose\n\t\tassert.strictEqual(session3?.id, session.id);\n\t\tassert.strictEqual(session3?.scopes[0], session.scopes[0]);\n\t\tassert.strictEqual(session3?.accessToken, session.accessToken);\n\t});\n\n\ttest('silently getting session should return a session (if any) regardless of preference - fixes #137819', async () => {\n\t\tconst scopes = ['foo'];\n\t\t// Now create the session\n\t\tconst session = await extHostAuthentication.getSession(\n\t\t\textensionDescription,\n\t\t\t'test-multiple',\n\t\t\tscopes,\n\t\t\t{\n\t\t\t\tcreateIfNone: true\n\t\t\t});\n\n\t\tassert.strictEqual(session?.id, '1');\n\t\tassert.strictEqual(session?.scopes[0], scopes[0]);\n\n\t\tconst scopes2 = ['bar'];\n\t\tconst session2 = await extHostAuthentication.getSession(\n\t\t\textensionDescription,\n\t\t\t'test-multiple',\n\t\t\tscopes2,\n\t\t\t{\n\t\t\t\tcreateIfNone: true\n\t\t\t});\n\t\tassert.strictEqual(session2?.id, '2');\n\t\tassert.strictEqual(session2?.scopes[0], scopes2[0]);\n\n\t\tconst shouldBeSession1 = await extHostAuthentication.getSession(\n\t\t\textensionDescription,\n\t\t\t'test-multiple',\n\t\t\tscopes,\n\t\t\t{});\n\t\tassert.strictEqual(shouldBeSession1?.id, session.id);\n\t\tassert.strictEqual(shouldBeSession1?.scopes[0], session.scopes[0]);\n\t\tassert.strictEqual(shouldBeSession1?.accessToken, session.accessToken);\n\n\t\tconst shouldBeSession2 = await extHostAuthentication.getSession(\n\t\t\textensionDescription,\n\t\t\t'test-multiple',\n\t\t\tscopes2,\n\t\t\t{});\n\t\tassert.strictEqual(shouldBeSession2?.id, session2.id);\n\t\tassert.strictEqual(shouldBeSession2?.scopes[0], session2.scopes[0]);\n\t\tassert.strictEqual(shouldBeSession2?.accessToken, session2.accessToken);\n\t});\n\n\t//#endregion\n\n\t//#region error cases\n\n\ttest('createIfNone and forceNewSession', async () => {\n\t\ttry {\n\t\t\tawait extHostAuthentication.getSession(\n\t\t\t\textensionDescription,\n\t\t\t\t'test',\n\t\t\t\t['foo'],\n\t\t\t\t{\n\t\t\t\t\tcreateIfNone: true,\n\t\t\t\t\tforceNewSession: true\n\t\t\t\t});\n\t\t\tassert.fail('should have thrown an Error.');\n\t\t} catch (e) {\n\t\t\tassert.ok(e);\n\t\t}\n\t});\n\n\ttest('forceNewSession and silent', async () => {\n\t\ttry {\n\t\t\tawait extHostAuthentication.getSession(\n\t\t\t\textensionDescription,\n\t\t\t\t'test',\n\t\t\t\t['foo'],\n\t\t\t\t{\n\t\t\t\t\tforceNewSession: true,\n\t\t\t\t\tsilent: true\n\t\t\t\t});\n\t\t\tassert.fail('should have thrown an Error.');\n\t\t} catch (e) {\n\t\t\tassert.ok(e);\n\t\t}\n\t});\n\n\ttest('createIfNone and silent', async () => {\n\t\ttry {\n\t\t\tawait extHostAuthentication.getSession(\n\t\t\t\textensionDescription,\n\t\t\t\t'test',\n\t\t\t\t['foo'],\n\t\t\t\t{\n\t\t\t\t\tcreateIfNone: true,\n\t\t\t\t\tsilent: true\n\t\t\t\t});\n\t\t\tassert.fail('should have thrown an Error.');\n\t\t} catch (e) {\n\t\t\tassert.ok(e);\n\t\t}\n\t});\n\n\ttest('Can get multiple sessions (with different scopes) in one extension', async () => {\n\t\tlet session: AuthenticationSession | undefined = await extHostAuthentication.getSession(\n\t\t\textensionDescription,\n\t\t\t'test-multiple',\n\t\t\t['foo'],\n\t\t\t{\n\t\t\t\tcreateIfNone: true\n\t\t\t});\n\t\tsession = await extHostAuthentication.getSession(\n\t\t\textensionDescription,\n\t\t\t'test-multiple',\n\t\t\t['bar'],\n\t\t\t{\n\t\t\t\tcreateIfNone: true\n\t\t\t});\n\t\tassert.strictEqual(session?.id, '2');\n\t\tassert.strictEqual(session?.scopes[0], 'bar');\n\n\t\tsession = await extHostAuthentication.getSession(\n\t\t\textensionDescription,\n\t\t\t'test-multiple',\n\t\t\t['foo'],\n\t\t\t{\n\t\t\t\tcreateIfNone: false\n\t\t\t});\n\t\tassert.strictEqual(session?.id, '1');\n\t\tassert.strictEqual(session?.scopes[0], 'foo');\n\t});\n\n\ttest('Can get multiple sessions (from different providers) in one extension', async () => {\n\t\tlet session: AuthenticationSession | undefined = await extHostAuthentication.getSession(\n\t\t\textensionDescription,\n\t\t\t'test-multiple',\n\t\t\t['foo'],\n\t\t\t{\n\t\t\t\tcreateIfNone: true\n\t\t\t});\n\t\tsession = await extHostAuthentication.getSession(\n\t\t\textensionDescription,\n\t\t\t'test',\n\t\t\t['foo'],\n\t\t\t{\n\t\t\t\tcreateIfNone: true\n\t\t\t});\n\t\tassert.strictEqual(session?.id, '1');\n\t\tassert.strictEqual(session?.scopes[0], 'foo');\n\t\tassert.strictEqual(session?.account.label, 'test');\n\n\t\tconst session2 = await extHostAuthentication.getSession(\n\t\t\textensionDescription,\n\t\t\t'test-multiple',\n\t\t\t['foo'],\n\t\t\t{\n\t\t\t\tcreateIfNone: false\n\t\t\t});\n\t\tassert.strictEqual(session2?.id, '1');\n\t\tassert.strictEqual(session2?.scopes[0], 'foo');\n\t\tassert.strictEqual(session2?.account.label, 'test-multiple');\n\t});\n\n\ttest('Can get multiple sessions (from different providers) in one extension at the same time', async () => {\n\t\tconst sessionP: Promise<AuthenticationSession | undefined> = extHostAuthentication.getSession(\n\t\t\textensionDescription,\n\t\t\t'test',\n\t\t\t['foo'],\n\t\t\t{\n\t\t\t\tcreateIfNone: true\n\t\t\t});\n\t\tconst session2P: Promise<AuthenticationSession | undefined> = extHostAuthentication.getSession(\n\t\t\textensionDescription,\n\t\t\t'test-multiple',\n\t\t\t['foo'],\n\t\t\t{\n\t\t\t\tcreateIfNone: true\n\t\t\t});\n\t\tconst session = await sessionP;\n\t\tassert.strictEqual(session?.id, '1');\n\t\tassert.strictEqual(session?.scopes[0], 'foo');\n\t\tassert.strictEqual(session?.account.label, 'test');\n\n\t\tconst session2 = await session2P;\n\t\tassert.strictEqual(session2?.id, '1');\n\t\tassert.strictEqual(session2?.scopes[0], 'foo');\n\t\tassert.strictEqual(session2?.account.label, 'test-multiple');\n\t});\n\n\n\t//#endregion\n});\n"],
  "mappings": "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",
  "names": []
}
