{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/api/test/browser/extHostDocumentsAndEditors.test.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport assert from 'assert';\nimport { URI } from '../../../../base/common/uri.js';\nimport { ExtHostDocumentsAndEditors } from '../../common/extHostDocumentsAndEditors.js';\nimport { TestRPCProtocol } from '../common/testRPCProtocol.js';\nimport { NullLogService } from '../../../../platform/log/common/log.js';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from '../../../../base/test/common/utils.js';\n\nsuite('ExtHostDocumentsAndEditors', () => {\n\n\tlet editors: ExtHostDocumentsAndEditors;\n\n\tsetup(function () {\n\t\teditors = new ExtHostDocumentsAndEditors(new TestRPCProtocol(), new NullLogService());\n\t});\n\n\tensureNoDisposablesAreLeakedInTestSuite();\n\n\ttest('The value of TextDocument.isClosed is incorrect when a text document is closed, #27949', () => {\n\n\t\teditors.$acceptDocumentsAndEditorsDelta({\n\t\t\taddedDocuments: [{\n\t\t\t\tEOL: '\\n',\n\t\t\t\tisDirty: true,\n\t\t\t\tlanguageId: 'fooLang',\n\t\t\t\turi: URI.parse('foo:bar'),\n\t\t\t\tversionId: 1,\n\t\t\t\tlines: [\n\t\t\t\t\t'first',\n\t\t\t\t\t'second'\n\t\t\t\t]\n\t\t\t}]\n\t\t});\n\n\t\treturn new Promise((resolve, reject) => {\n\n\t\t\tconst d = editors.onDidRemoveDocuments(e => {\n\t\t\t\ttry {\n\n\t\t\t\t\tfor (const data of e) {\n\t\t\t\t\t\tassert.strictEqual(data.document.isClosed, true);\n\t\t\t\t\t}\n\t\t\t\t\tresolve(undefined);\n\t\t\t\t} catch (e) {\n\t\t\t\t\treject(e);\n\t\t\t\t} finally {\n\t\t\t\t\td.dispose();\n\t\t\t\t}\n\t\t\t});\n\n\t\t\teditors.$acceptDocumentsAndEditorsDelta({\n\t\t\t\tremovedDocuments: [URI.parse('foo:bar')]\n\t\t\t});\n\n\t\t});\n\t});\n\n});\n"],
  "mappings": "AAKA,OAAO,YAAY;AACnB,SAAS,WAAW;AACpB,SAAS,kCAAkC;AAC3C,SAAS,uBAAuB;AAChC,SAAS,sBAAsB;AAC/B,SAAS,+CAA+C;AAExD,MAAM,8BAA8B,MAAM;AAEzC,MAAI;AAEJ,QAAM,WAAY;AACjB,cAAU,IAAI,2BAA2B,IAAI,gBAAgB,GAAG,IAAI,eAAe,CAAC;AAAA,EACrF,CAAC;AAED,0CAAwC;AAExC,OAAK,0FAA0F,MAAM;AAEpG,YAAQ,gCAAgC;AAAA,MACvC,gBAAgB,CAAC;AAAA,QAChB,KAAK;AAAA,QACL,SAAS;AAAA,QACT,YAAY;AAAA,QACZ,KAAK,IAAI,MAAM,SAAS;AAAA,QACxB,WAAW;AAAA,QACX,OAAO;AAAA,UACN;AAAA,UACA;AAAA,QACD;AAAA,MACD,CAAC;AAAA,IACF,CAAC;AAED,WAAO,IAAI,QAAQ,CAAC,SAAS,WAAW;AAEvC,YAAM,IAAI,QAAQ,qBAAqB,OAAK;AAC3C,YAAI;AAEH,qBAAW,QAAQ,GAAG;AACrB,mBAAO,YAAY,KAAK,SAAS,UAAU,IAAI;AAAA,UAChD;AACA,kBAAQ,MAAS;AAAA,QAClB,SAASA,IAAG;AACX,iBAAOA,EAAC;AAAA,QACT,UAAE;AACD,YAAE,QAAQ;AAAA,QACX;AAAA,MACD,CAAC;AAED,cAAQ,gCAAgC;AAAA,QACvC,kBAAkB,CAAC,IAAI,MAAM,SAAS,CAAC;AAAA,MACxC,CAAC;AAAA,IAEF,CAAC;AAAA,EACF,CAAC;AAEF,CAAC;",
  "names": ["e"]
}
