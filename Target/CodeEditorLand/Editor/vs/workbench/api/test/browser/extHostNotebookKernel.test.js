import e from"assert";import{Barrier as $}from"../../../../base/common/async.js";import{DisposableStore as F}from"../../../../base/common/lifecycle.js";import{URI as K}from"../../../../base/common/uri.js";import{ExtensionIdentifier as M}from"../../../../platform/extensions/common/extensions.js";import{NullLogService as E}from"../../../../platform/log/common/log.js";import{MainContext as x}from"../../common/extHost.protocol.js";import{ExtHostCommands as U}from"../../common/extHostCommands.js";import{ExtHostDocuments as O}from"../../common/extHostDocuments.js";import{ExtHostDocumentsAndEditors as z}from"../../common/extHostDocumentsAndEditors.js";import"../../common/extHostInitDataService.js";import{ExtHostNotebookController as P}from"../../common/extHostNotebook.js";import"../../common/extHostNotebookDocument.js";import{ExtHostNotebookDocuments as R}from"../../common/extHostNotebookDocuments.js";import{ExtHostNotebookKernels as B}from"../../common/extHostNotebookKernels.js";import{NotebookCellOutput as g,NotebookCellOutputItem as S}from"../../common/extHostTypes.js";import{CellKind as T,CellUri as I,NotebookCellsChangeType as _}from"../../../contrib/notebook/common/notebookCommon.js";import{CellExecutionUpdateType as A}from"../../../contrib/notebook/common/notebookExecutionService.js";import{nullExtensionDescription as d}from"../../../services/extensions/common/extensions.js";import{SerializableObjectWithBuffers as w}from"../../../services/extensions/common/proxyIdentifier.js";import{TestRPCProtocol as j}from"../common/testRPCProtocol.js";import{mock as b}from"../../../test/common/workbenchTestServices.js";import"../../common/extHostTelemetry.js";import{ExtHostConsumerFileSystem as W}from"../../common/extHostFileSystemConsumer.js";import{ExtHostFileSystemInfo as L}from"../../common/extHostFileSystemInfo.js";import{ensureNoDisposablesAreLeakedInTestSuite as G}from"../../../../base/test/common/utils.js";import{ExtHostSearch as J}from"../../common/extHostSearch.js";import{URITransformerService as Q}from"../../common/extHostUriTransformerService.js";suite("NotebookKernel",function(){let l,r,n,C,N,p,D,h,y,v;const f=K.parse("test:///notebook.file"),c=new Map,i=new F,H=[],m=[],q=[];teardown(function(){i.clear()}),G(),setup(async function(){H.length=0,m.length=0,q.length=0,c.clear(),l=new j,l.set(x.MainThreadCommands,new class extends b(){$registerCommand(){}}),l.set(x.MainThreadNotebookKernels,new class extends b(){async $addKernel(t,o){c.set(t,o)}$removeKernel(t){c.delete(t)}$updateKernel(t,o){e.strictEqual(c.has(t),!0),c.set(t,{...c.get(t),...o})}$createExecution(t,o,s,u){H.push({notebook:s,cell:u})}$updateExecution(t,o){m.push(...o.value)}$completeExecution(t,o){q.push(o.value)}}),l.set(x.MainThreadNotebookDocuments,new class extends b(){}),l.set(x.MainThreadNotebook,new class extends b(){async $registerNotebookSerializer(){}async $unregisterNotebookSerializer(){}}),C=new z(l,new E),N=i.add(new O(l,C)),h=new U(l,new E,new class extends b(){onExtensionError(){return!0}}),y=new W(l,new L),v=new J(l,new Q(null),new E),p=new P(l,h,C,N,y,v,new E),D=new R(p),p.$acceptDocumentAndEditorsDelta(new w({addedDocuments:[{uri:f,viewType:"test",versionId:0,cells:[{handle:0,uri:I.generate(f,0),source:["### Heading"],eol:`
`,language:"markdown",cellKind:T.Markup,outputs:[]},{handle:1,uri:I.generate(f,1),source:['console.log("aaa")','console.log("bbb")'],eol:`
`,language:"javascript",cellKind:T.Code,outputs:[]}]}],addedEditors:[{documentUri:f,id:"_notebook_editor_0",selections:[{start:0,end:1}],visibleRanges:[]}]})),p.$acceptDocumentAndEditorsDelta(new w({newActiveEditor:"_notebook_editor_0"})),n=p.notebookDocuments[0],i.add(n),i.add(N),r=new B(l,new class extends b(){},p,h,new E)}),test("create/dispose kernel",async function(){const t=r.createNotebookController(d,"foo","*","Foo");e.throws(()=>t.id="dd"),e.throws(()=>t.notebookType="dd"),e.ok(t),e.strictEqual(t.id,"foo"),e.strictEqual(t.label,"Foo"),e.strictEqual(t.notebookType,"*"),await l.sync(),e.strictEqual(c.size,1);const[o]=c.values();e.strictEqual(o.id,"nullExtensionDescription/foo"),e.strictEqual(M.equals(o.extensionId,d.identifier),!0),e.strictEqual(o.label,"Foo"),e.strictEqual(o.notebookType,"*"),t.dispose(),await l.sync(),e.strictEqual(c.size,0)}),test("update kernel",async function(){const t=i.add(r.createNotebookController(d,"foo","*","Foo"));await l.sync(),e.ok(t);let[o]=c.values();e.strictEqual(o.id,"nullExtensionDescription/foo"),e.strictEqual(o.label,"Foo"),t.label="Far",e.strictEqual(t.label,"Far"),await l.sync(),[o]=c.values(),e.strictEqual(o.id,"nullExtensionDescription/foo"),e.strictEqual(o.label,"Far")}),test("execute - simple createNotebookCellExecution",function(){const t=i.add(r.createNotebookController(d,"foo","*","Foo"));r.$acceptNotebookAssociation(0,n.uri,!0);const o=n.apiNotebook.cellAt(0),s=t.createNotebookCellExecution(o);s.start(),s.end(void 0)}),test("createNotebookCellExecution, must be selected/associated",function(){const t=i.add(r.createNotebookController(d,"foo","*","Foo"));e.throws(()=>{t.createNotebookCellExecution(n.apiNotebook.cellAt(0))}),r.$acceptNotebookAssociation(0,n.uri,!0),t.createNotebookCellExecution(n.apiNotebook.cellAt(0)).end(!0)}),test("createNotebookCellExecution, cell must be alive",function(){const t=i.add(r.createNotebookController(d,"foo","*","Foo")),o=n.apiNotebook.cellAt(0);r.$acceptNotebookAssociation(0,n.uri,!0),D.$acceptModelChanged(n.uri,new w({versionId:12,rawEvents:[{kind:_.ModelChange,changes:[[0,n.apiNotebook.cellCount,[]]]}]}),!0),e.strictEqual(o.index,-1),e.throws(()=>{t.createNotebookCellExecution(o)})}),test("interrupt handler, cancellation",async function(){let t=0,o=0;const s=i.add(r.createNotebookController(d,"foo","*","Foo"));s.interruptHandler=()=>{t+=1},r.$acceptNotebookAssociation(0,n.uri,!0);const u=n.apiNotebook.cellAt(0),a=s.createNotebookCellExecution(u);i.add(a.token.onCancellationRequested(()=>o+=1)),await r.$cancelCells(0,n.uri,[0]),e.strictEqual(t,1),e.strictEqual(o,0),await r.$cancelCells(0,n.uri,[0]),e.strictEqual(t,2),e.strictEqual(o,0),a.end(!1)}),test("set outputs on cancel",async function(){const t=i.add(r.createNotebookController(d,"foo","*","Foo"));r.$acceptNotebookAssociation(0,n.uri,!0);const o=n.apiNotebook.cellAt(0),s=t.createNotebookCellExecution(o);s.start();const u=new $;i.add(s.token.onCancellationRequested(async()=>{await s.replaceOutput(new g([S.text("canceled")])),s.end(!0),u.open()})),m.length=0,await r.$cancelCells(0,n.uri,[0]),await u.wait(),e.strictEqual(m.length>0,!0);let a=!1;for(const k of m)k.editType===A.Output&&(e.strictEqual(k.append,!1),e.strictEqual(k.outputs.length,1),e.strictEqual(k.outputs[0].items.length,1),e.deepStrictEqual(Array.from(k.outputs[0].items[0].valueBytes.buffer),Array.from(new TextEncoder().encode("canceled"))),a=!0);e.ok(a)}),test("set outputs on interrupt",async function(){const t=r.createNotebookController(d,"foo","*","Foo");r.$acceptNotebookAssociation(0,n.uri,!0);const o=n.apiNotebook.cellAt(0),s=t.createNotebookCellExecution(o);s.start(),t.interruptHandler=async a=>{e.ok(n.apiNotebook===a),await s.replaceOutput(new g([S.text("interrupted")])),s.end(!0)},m.length=0,await r.$cancelCells(0,n.uri,[0]),e.strictEqual(m.length>0,!0);let u=!1;for(const a of m)a.editType===A.Output&&(e.strictEqual(a.append,!1),e.strictEqual(a.outputs.length,1),e.strictEqual(a.outputs[0].items.length,1),e.deepStrictEqual(Array.from(a.outputs[0].items[0].valueBytes.buffer),Array.from(new TextEncoder().encode("interrupted"))),u=!0);e.ok(u)})});
