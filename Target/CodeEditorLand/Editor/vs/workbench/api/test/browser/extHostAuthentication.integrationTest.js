import e from"assert";import{DisposableStore as p}from"../../../../base/common/lifecycle.js";import{IDialogService as d}from"../../../../platform/dialogs/common/dialogs.js";import{TestDialogService as m}from"../../../../platform/dialogs/test/common/testDialogService.js";import{TestInstantiationService as S}from"../../../../platform/instantiation/test/common/instantiationServiceMock.js";import{INotificationService as E}from"../../../../platform/notification/common/notification.js";import{TestNotificationService as h}from"../../../../platform/notification/test/common/testNotificationService.js";import{IQuickInputService as v}from"../../../../platform/quickinput/common/quickInput.js";import{IStorageService as w}from"../../../../platform/storage/common/storage.js";import{ITelemetryService as g}from"../../../../platform/telemetry/common/telemetry.js";import{NullTelemetryService as I}from"../../../../platform/telemetry/common/telemetryUtils.js";import{MainThreadAuthentication as q}from"../../browser/mainThreadAuthentication.js";import{ExtHostContext as A,MainContext as N}from"../../common/extHost.protocol.js";import{ExtHostAuthentication as y}from"../../common/extHostAuthentication.js";import{IActivityService as k}from"../../../services/activity/common/activity.js";import{AuthenticationService as T}from"../../../services/authentication/browser/authenticationService.js";import{IAuthenticationExtensionsService as b,IAuthenticationService as P}from"../../../services/authentication/common/authentication.js";import{IExtensionService as x,nullExtensionDescription as o}from"../../../services/extensions/common/extensions.js";import{IRemoteAgentService as D}from"../../../services/remote/common/remoteAgentService.js";import{TestRPCProtocol as Q}from"../common/testRPCProtocol.js";import{TestEnvironmentService as H,TestQuickInputService as C,TestRemoteAgentService as M}from"../../../test/browser/workbenchTestServices.js";import{TestActivityService as B,TestExtensionService as R,TestProductService as j,TestStorageService as U}from"../../../test/common/workbenchTestServices.js";import{IBrowserWorkbenchEnvironmentService as $}from"../../../services/environment/browser/environmentService.js";import{IProductService as W}from"../../../../platform/product/common/productService.js";import{AuthenticationAccessService as z,IAuthenticationAccessService as F}from"../../../services/authentication/browser/authenticationAccessService.js";import{AuthenticationUsageService as G,IAuthenticationUsageService as J}from"../../../services/authentication/browser/authenticationUsageService.js";import{AuthenticationExtensionsService as K}from"../../../services/authentication/browser/authenticationExtensionsService.js";class L{listener;items=[];get selectedItems(){return this.items}onDidAccept(s){this.listener=s}onDidHide(s){}dispose(){}show(){this.listener({inBackground:!1})}}class O extends C{createQuickPick(){return new L}}class f{constructor(s){this.authProviderName=s}id=1;sessions=new Map;onDidChangeSessions=()=>({dispose(){}});async getSessions(s){if(!s)return[...this.sessions.values()];if(s[0]==="return multiple")return[...this.sessions.values()];const r=this.sessions.get(s.join(" "));return r?[r]:[]}async createSession(s){const r=s.join(" "),t={scopes:s,id:`${this.id}`,account:{label:this.authProviderName,id:`${this.id}`},accessToken:Math.random()+""};return this.sessions.set(r,t),this.id++,t}async removeSession(s){this.sessions.delete(s)}}suite("ExtHostAuthentication",()=>{let a,s,r;suiteSetup(async()=>{r=new S,r.stub(d,new m({confirmed:!0})),r.stub(w,new U),r.stub(v,new O),r.stub(x,new R),r.stub(k,new B),r.stub(D,new M),r.stub(E,new h),r.stub(g,I),r.stub($,H),r.stub(W,j),r.stub(F,r.createInstance(z)),r.stub(J,r.createInstance(G));const t=new Q;r.stub(P,r.createInstance(T)),r.stub(b,r.createInstance(K)),t.set(N.MainThreadAuthentication,r.createInstance(q,t)),s=new y(t),t.set(A.ExtHostAuthentication,s)}),setup(async()=>{a=new p,a.add(s.registerAuthenticationProvider("test","test provider",new f("test"))),a.add(s.registerAuthenticationProvider("test-multiple","test multiple provider",new f("test-multiple"),{supportsMultipleAccounts:!0}))}),suiteTeardown(()=>{r.dispose()}),teardown(()=>{a.dispose()}),test("createIfNone - true",async()=>{const t=["foo"],i=await s.getSession(o,"test",t,{createIfNone:!0});e.strictEqual(i?.id,"1"),e.strictEqual(i?.scopes[0],"foo")}),test("createIfNone - false",async()=>{const t=["foo"],i=await s.getSession(o,"test",t,{});e.strictEqual(i,void 0);const n=await s.getSession(o,"test",t,{createIfNone:!0});e.strictEqual(n?.id,"1"),e.strictEqual(n?.scopes[0],"foo");const c=await s.getSession(o,"test",t,{});e.strictEqual(c?.id,n.id),e.strictEqual(c?.scopes[0],n.scopes[0]),e.strictEqual(c?.accessToken,n.accessToken)}),test("silent - true",async()=>{const t=["foo"],i=await s.getSession(o,"test",t,{silent:!0});e.strictEqual(i,void 0);const n=await s.getSession(o,"test",t,{createIfNone:!0});e.strictEqual(n?.id,"1"),e.strictEqual(n?.scopes[0],"foo");const c=await s.getSession(o,"test",t,{silent:!0});e.strictEqual(n.id,c?.id),e.strictEqual(n.scopes[0],c?.scopes[0])}),test("forceNewSession - true - existing session",async()=>{const t=["foo"],i=await s.getSession(o,"test",t,{createIfNone:!0}),n=await s.getSession(o,"test",t,{forceNewSession:!0});e.strictEqual(n?.id,"2"),e.strictEqual(n?.scopes[0],"foo"),e.notStrictEqual(i.accessToken,n?.accessToken)}),test("forceNewSession - true - no existing session",async()=>{const t=["foo"],i=await s.getSession(o,"test",t,{forceNewSession:!0});e.strictEqual(i?.id,"1"),e.strictEqual(i?.scopes[0],"foo")}),test("forceNewSession - detail",async()=>{const t=["foo"],i=await s.getSession(o,"test",t,{createIfNone:!0}),n=await s.getSession(o,"test",t,{forceNewSession:{detail:"bar"}});e.strictEqual(n?.id,"2"),e.strictEqual(n?.scopes[0],"foo"),e.notStrictEqual(i.accessToken,n?.accessToken)}),test("clearSessionPreference - true",async()=>{const t=["foo"],i=await s.getSession(o,"test-multiple",t,{createIfNone:!0});e.strictEqual(i?.id,"1"),e.strictEqual(i?.scopes[0],t[0]);const n=["bar"],c=await s.getSession(o,"test-multiple",n,{createIfNone:!0});e.strictEqual(c?.id,"2"),e.strictEqual(c?.scopes[0],n[0]);const u=await s.getSession(o,"test-multiple",["return multiple"],{clearSessionPreference:!0,createIfNone:!0});e.strictEqual(u?.id,i.id),e.strictEqual(u?.scopes[0],i.scopes[0]),e.strictEqual(u?.accessToken,i.accessToken)}),test("silently getting session should return a session (if any) regardless of preference - fixes #137819",async()=>{const t=["foo"],i=await s.getSession(o,"test-multiple",t,{createIfNone:!0});e.strictEqual(i?.id,"1"),e.strictEqual(i?.scopes[0],t[0]);const n=["bar"],c=await s.getSession(o,"test-multiple",n,{createIfNone:!0});e.strictEqual(c?.id,"2"),e.strictEqual(c?.scopes[0],n[0]);const u=await s.getSession(o,"test-multiple",t,{});e.strictEqual(u?.id,i.id),e.strictEqual(u?.scopes[0],i.scopes[0]),e.strictEqual(u?.accessToken,i.accessToken);const l=await s.getSession(o,"test-multiple",n,{});e.strictEqual(l?.id,c.id),e.strictEqual(l?.scopes[0],c.scopes[0]),e.strictEqual(l?.accessToken,c.accessToken)}),test("createIfNone and forceNewSession",async()=>{try{await s.getSession(o,"test",["foo"],{createIfNone:!0,forceNewSession:!0}),e.fail("should have thrown an Error.")}catch(t){e.ok(t)}}),test("forceNewSession and silent",async()=>{try{await s.getSession(o,"test",["foo"],{forceNewSession:!0,silent:!0}),e.fail("should have thrown an Error.")}catch(t){e.ok(t)}}),test("createIfNone and silent",async()=>{try{await s.getSession(o,"test",["foo"],{createIfNone:!0,silent:!0}),e.fail("should have thrown an Error.")}catch(t){e.ok(t)}}),test("Can get multiple sessions (with different scopes) in one extension",async()=>{let t=await s.getSession(o,"test-multiple",["foo"],{createIfNone:!0});t=await s.getSession(o,"test-multiple",["bar"],{createIfNone:!0}),e.strictEqual(t?.id,"2"),e.strictEqual(t?.scopes[0],"bar"),t=await s.getSession(o,"test-multiple",["foo"],{createIfNone:!1}),e.strictEqual(t?.id,"1"),e.strictEqual(t?.scopes[0],"foo")}),test("Can get multiple sessions (from different providers) in one extension",async()=>{let t=await s.getSession(o,"test-multiple",["foo"],{createIfNone:!0});t=await s.getSession(o,"test",["foo"],{createIfNone:!0}),e.strictEqual(t?.id,"1"),e.strictEqual(t?.scopes[0],"foo"),e.strictEqual(t?.account.label,"test");const i=await s.getSession(o,"test-multiple",["foo"],{createIfNone:!1});e.strictEqual(i?.id,"1"),e.strictEqual(i?.scopes[0],"foo"),e.strictEqual(i?.account.label,"test-multiple")}),test("Can get multiple sessions (from different providers) in one extension at the same time",async()=>{const t=s.getSession(o,"test",["foo"],{createIfNone:!0}),i=s.getSession(o,"test-multiple",["foo"],{createIfNone:!0}),n=await t;e.strictEqual(n?.id,"1"),e.strictEqual(n?.scopes[0],"foo"),e.strictEqual(n?.account.label,"test");const c=await i;e.strictEqual(c?.id,"1"),e.strictEqual(c?.scopes[0],"foo"),e.strictEqual(c?.account.label,"test-multiple")})});
