{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/api/test/browser/mainThreadDiagnostics.test.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport assert from 'assert';\nimport { timeout } from '../../../../base/common/async.js';\nimport { URI, UriComponents } from '../../../../base/common/uri.js';\nimport { runWithFakedTimers } from '../../../../base/test/common/timeTravelScheduler.js';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from '../../../../base/test/common/utils.js';\nimport { MarkerService } from '../../../../platform/markers/common/markerService.js';\nimport { IMarkerData } from '../../../../platform/markers/common/markers.js';\nimport { IUriIdentityService } from '../../../../platform/uriIdentity/common/uriIdentity.js';\nimport { MainThreadDiagnostics } from '../../browser/mainThreadDiagnostics.js';\nimport { IExtHostContext } from '../../../services/extensions/common/extHostCustomers.js';\nimport { ExtensionHostKind } from '../../../services/extensions/common/extensionHostKind.js';\nimport { mock } from '../../../test/common/workbenchTestServices.js';\n\n\nsuite('MainThreadDiagnostics', function () {\n\n\tlet markerService: MarkerService;\n\n\tsetup(function () {\n\t\tmarkerService = new MarkerService();\n\t});\n\n\tteardown(function () {\n\t\tmarkerService.dispose();\n\t});\n\n\tensureNoDisposablesAreLeakedInTestSuite();\n\n\ttest('clear markers on dispose', function () {\n\n\t\tconst diag = new MainThreadDiagnostics(\n\t\t\tnew class implements IExtHostContext {\n\t\t\t\tremoteAuthority = '';\n\t\t\t\textensionHostKind = ExtensionHostKind.LocalProcess;\n\t\t\t\tdispose() { }\n\t\t\t\tassertRegistered() { }\n\t\t\t\tset(v: any): any { return null; }\n\t\t\t\tgetProxy(): any {\n\t\t\t\t\treturn {\n\t\t\t\t\t\t$acceptMarkersChange() { }\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t\tdrain(): any { return null; }\n\t\t\t},\n\t\t\tmarkerService,\n\t\t\tnew class extends mock<IUriIdentityService>() {\n\t\t\t\toverride asCanonicalUri(uri: URI) { return uri; }\n\t\t\t}\n\t\t);\n\n\t\tdiag.$changeMany('foo', [[URI.file('a'), [{\n\t\t\tcode: '666',\n\t\t\tstartLineNumber: 1,\n\t\t\tstartColumn: 1,\n\t\t\tendLineNumber: 1,\n\t\t\tendColumn: 1,\n\t\t\tmessage: 'fffff',\n\t\t\tseverity: 1,\n\t\t\tsource: 'me'\n\t\t}]]]);\n\n\t\tassert.strictEqual(markerService.read().length, 1);\n\t\tdiag.dispose();\n\t\tassert.strictEqual(markerService.read().length, 0);\n\t});\n\n\ttest('OnDidChangeDiagnostics triggers twice on same diagnostics #136434', function () {\n\n\t\treturn runWithFakedTimers({}, async () => {\n\n\t\t\tconst changedData: [UriComponents, IMarkerData[]][][] = [];\n\n\t\t\tconst diag = new MainThreadDiagnostics(\n\t\t\t\tnew class implements IExtHostContext {\n\t\t\t\t\tremoteAuthority = '';\n\t\t\t\t\textensionHostKind = ExtensionHostKind.LocalProcess;\n\t\t\t\t\tdispose() { }\n\t\t\t\t\tassertRegistered() { }\n\t\t\t\t\tset(v: any): any { return null; }\n\t\t\t\t\tgetProxy(): any {\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t$acceptMarkersChange(data: [UriComponents, IMarkerData[]][]) {\n\t\t\t\t\t\t\t\tchangedData.push(data);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\t\t\t\t\tdrain(): any { return null; }\n\t\t\t\t},\n\t\t\t\tmarkerService,\n\t\t\t\tnew class extends mock<IUriIdentityService>() {\n\t\t\t\t\toverride asCanonicalUri(uri: URI) { return uri; }\n\t\t\t\t}\n\t\t\t);\n\n\t\t\tconst markerDataStub = {\n\t\t\t\tcode: '666',\n\t\t\t\tstartLineNumber: 1,\n\t\t\t\tstartColumn: 1,\n\t\t\t\tendLineNumber: 1,\n\t\t\t\tendColumn: 1,\n\t\t\t\tseverity: 1,\n\t\t\t\tsource: 'me'\n\t\t\t};\n\t\t\tconst target = URI.file('a');\n\t\t\tdiag.$changeMany('foo', [[target, [{ ...markerDataStub, message: 'same_owner' }]]]);\n\t\t\tmarkerService.changeOne('bar', target, [{ ...markerDataStub, message: 'forgein_owner' }]);\n\n\t\t\t// added one marker via the API and one via the ext host. the latter must not\n\t\t\t// trigger an event to the extension host\n\n\t\t\tawait timeout(0);\n\t\t\tassert.strictEqual(markerService.read().length, 2);\n\t\t\tassert.strictEqual(changedData.length, 1);\n\t\t\tassert.strictEqual(changedData[0].length, 1);\n\t\t\tassert.strictEqual(changedData[0][0][1][0].message, 'forgein_owner');\n\n\t\t\tdiag.dispose();\n\t\t});\n\t});\n\n\ttest('onDidChangeDiagnostics different behavior when \"extensionKind\" ui running on remote workspace #136955', function () {\n\t\treturn runWithFakedTimers({}, async () => {\n\n\t\t\tconst markerData: IMarkerData = {\n\t\t\t\tcode: '666',\n\t\t\t\tstartLineNumber: 1,\n\t\t\t\tstartColumn: 1,\n\t\t\t\tendLineNumber: 1,\n\t\t\t\tendColumn: 1,\n\t\t\t\tseverity: 1,\n\t\t\t\tsource: 'me',\n\t\t\t\tmessage: 'message'\n\t\t\t};\n\t\t\tconst target = URI.file('a');\n\t\t\tmarkerService.changeOne('bar', target, [markerData]);\n\n\t\t\tconst changedData: [UriComponents, IMarkerData[]][][] = [];\n\n\t\t\tconst diag = new MainThreadDiagnostics(\n\t\t\t\tnew class implements IExtHostContext {\n\t\t\t\t\tremoteAuthority = '';\n\t\t\t\t\textensionHostKind = ExtensionHostKind.LocalProcess;\n\t\t\t\t\tdispose() { }\n\t\t\t\t\tassertRegistered() { }\n\t\t\t\t\tset(v: any): any { return null; }\n\t\t\t\t\tgetProxy(): any {\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t$acceptMarkersChange(data: [UriComponents, IMarkerData[]][]) {\n\t\t\t\t\t\t\t\tchangedData.push(data);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\t\t\t\t\tdrain(): any { return null; }\n\t\t\t\t},\n\t\t\t\tmarkerService,\n\t\t\t\tnew class extends mock<IUriIdentityService>() {\n\t\t\t\t\toverride asCanonicalUri(uri: URI) { return uri; }\n\t\t\t\t}\n\t\t\t);\n\n\t\t\tdiag.$clear('bar');\n\t\t\tawait timeout(0);\n\t\t\tassert.strictEqual(markerService.read().length, 0);\n\t\t\tassert.strictEqual(changedData.length, 1);\n\n\t\t\tdiag.dispose();\n\t\t});\n\t});\n});\n"],
  "mappings": "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",
  "names": []
}
