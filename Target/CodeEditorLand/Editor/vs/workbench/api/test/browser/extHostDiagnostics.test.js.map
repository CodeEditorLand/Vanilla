{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/api/test/browser/extHostDiagnostics.test.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport assert from 'assert';\nimport { URI, UriComponents } from '../../../../base/common/uri.js';\nimport { DiagnosticCollection, ExtHostDiagnostics } from '../../common/extHostDiagnostics.js';\nimport { Diagnostic, DiagnosticSeverity, Range, DiagnosticRelatedInformation, Location } from '../../common/extHostTypes.js';\nimport { MainThreadDiagnosticsShape, IMainContext } from '../../common/extHost.protocol.js';\nimport { IMarkerData, MarkerSeverity } from '../../../../platform/markers/common/markers.js';\nimport { mock } from '../../../../base/test/common/mock.js';\nimport { Emitter, Event } from '../../../../base/common/event.js';\nimport { NullLogService } from '../../../../platform/log/common/log.js';\nimport type * as vscode from 'vscode';\nimport { nullExtensionDescription } from '../../../services/extensions/common/extensions.js';\nimport { ExtUri, extUri } from '../../../../base/common/resources.js';\nimport { IExtHostFileSystemInfo } from '../../common/extHostFileSystemInfo.js';\nimport { runWithFakedTimers } from '../../../../base/test/common/timeTravelScheduler.js';\nimport { IExtHostDocumentsAndEditors } from '../../common/extHostDocumentsAndEditors.js';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from '../../../../base/test/common/utils.js';\n\nsuite('ExtHostDiagnostics', () => {\n\n\tclass DiagnosticsShape extends mock<MainThreadDiagnosticsShape>() {\n\t\toverride $changeMany(owner: string, entries: [UriComponents, IMarkerData[]][]): void {\n\t\t\t//\n\t\t}\n\t\toverride $clear(owner: string): void {\n\t\t\t//\n\t\t}\n\t}\n\n\tconst fileSystemInfoService = new class extends mock<IExtHostFileSystemInfo>() {\n\t\toverride readonly extUri = extUri;\n\t};\n\n\tconst versionProvider = (uri: URI): number | undefined => {\n\t\treturn undefined;\n\t};\n\n\tconst store = ensureNoDisposablesAreLeakedInTestSuite();\n\n\ttest('disposeCheck', () => {\n\n\t\tconst collection = new DiagnosticCollection('test', 'test', 100, 100, versionProvider, extUri, new DiagnosticsShape(), new Emitter());\n\n\t\tcollection.dispose();\n\t\tcollection.dispose(); // that's OK\n\t\tassert.throws(() => collection.name);\n\t\tassert.throws(() => collection.clear());\n\t\tassert.throws(() => collection.delete(URI.parse('aa:bb')));\n\t\tassert.throws(() => collection.forEach(() => { }));\n\t\tassert.throws(() => collection.get(URI.parse('aa:bb')));\n\t\tassert.throws(() => collection.has(URI.parse('aa:bb')));\n\t\tassert.throws(() => collection.set(URI.parse('aa:bb'), []));\n\t\tassert.throws(() => collection.set(URI.parse('aa:bb'), undefined!));\n\t});\n\n\n\ttest('diagnostic collection, forEach, clear, has', function () {\n\t\tlet collection = new DiagnosticCollection('test', 'test', 100, 100, versionProvider, extUri, new DiagnosticsShape(), new Emitter());\n\t\tassert.strictEqual(collection.name, 'test');\n\t\tcollection.dispose();\n\t\tassert.throws(() => collection.name);\n\n\t\tlet c = 0;\n\t\tcollection = new DiagnosticCollection('test', 'test', 100, 100, versionProvider, extUri, new DiagnosticsShape(), new Emitter());\n\t\tcollection.forEach(() => c++);\n\t\tassert.strictEqual(c, 0);\n\n\t\tcollection.set(URI.parse('foo:bar'), [\n\t\t\tnew Diagnostic(new Range(0, 0, 1, 1), 'message-1'),\n\t\t\tnew Diagnostic(new Range(0, 0, 1, 1), 'message-2')\n\t\t]);\n\t\tcollection.forEach(() => c++);\n\t\tassert.strictEqual(c, 1);\n\n\t\tc = 0;\n\t\tcollection.clear();\n\t\tcollection.forEach(() => c++);\n\t\tassert.strictEqual(c, 0);\n\n\t\tcollection.set(URI.parse('foo:bar1'), [\n\t\t\tnew Diagnostic(new Range(0, 0, 1, 1), 'message-1'),\n\t\t\tnew Diagnostic(new Range(0, 0, 1, 1), 'message-2')\n\t\t]);\n\t\tcollection.set(URI.parse('foo:bar2'), [\n\t\t\tnew Diagnostic(new Range(0, 0, 1, 1), 'message-1'),\n\t\t\tnew Diagnostic(new Range(0, 0, 1, 1), 'message-2')\n\t\t]);\n\t\tcollection.forEach(() => c++);\n\t\tassert.strictEqual(c, 2);\n\n\t\tassert.ok(collection.has(URI.parse('foo:bar1')));\n\t\tassert.ok(collection.has(URI.parse('foo:bar2')));\n\t\tassert.ok(!collection.has(URI.parse('foo:bar3')));\n\t\tcollection.delete(URI.parse('foo:bar1'));\n\t\tassert.ok(!collection.has(URI.parse('foo:bar1')));\n\n\t\tcollection.dispose();\n\t});\n\n\ttest('diagnostic collection, immutable read', function () {\n\t\tconst collection = new DiagnosticCollection('test', 'test', 100, 100, versionProvider, extUri, new DiagnosticsShape(), new Emitter());\n\t\tcollection.set(URI.parse('foo:bar'), [\n\t\t\tnew Diagnostic(new Range(0, 0, 1, 1), 'message-1'),\n\t\t\tnew Diagnostic(new Range(0, 0, 1, 1), 'message-2')\n\t\t]);\n\n\t\tlet array = collection.get(URI.parse('foo:bar')) as Diagnostic[];\n\t\tassert.throws(() => array.length = 0);\n\t\tassert.throws(() => array.pop());\n\t\tassert.throws(() => array[0] = new Diagnostic(new Range(0, 0, 0, 0), 'evil'));\n\n\t\tcollection.forEach((uri: URI, array: readonly vscode.Diagnostic[]): any => {\n\t\t\tassert.throws(() => (array as Diagnostic[]).length = 0);\n\t\t\tassert.throws(() => (array as Diagnostic[]).pop());\n\t\t\tassert.throws(() => (array as Diagnostic[])[0] = new Diagnostic(new Range(0, 0, 0, 0), 'evil'));\n\t\t});\n\n\t\tarray = collection.get(URI.parse('foo:bar')) as Diagnostic[];\n\t\tassert.strictEqual(array.length, 2);\n\n\t\tcollection.dispose();\n\t});\n\n\n\ttest('diagnostics collection, set with dupliclated tuples', function () {\n\t\tconst collection = new DiagnosticCollection('test', 'test', 100, 100, versionProvider, extUri, new DiagnosticsShape(), new Emitter());\n\t\tconst uri = URI.parse('sc:hightower');\n\t\tcollection.set([\n\t\t\t[uri, [new Diagnostic(new Range(0, 0, 0, 1), 'message-1')]],\n\t\t\t[URI.parse('some:thing'), [new Diagnostic(new Range(0, 0, 1, 1), 'something')]],\n\t\t\t[uri, [new Diagnostic(new Range(0, 0, 0, 1), 'message-2')]],\n\t\t]);\n\n\t\tlet array = collection.get(uri);\n\t\tassert.strictEqual(array.length, 2);\n\t\tlet [first, second] = array;\n\t\tassert.strictEqual(first.message, 'message-1');\n\t\tassert.strictEqual(second.message, 'message-2');\n\n\t\t// clear\n\t\tcollection.delete(uri);\n\t\tassert.ok(!collection.has(uri));\n\n\t\t// bad tuple clears 1/2\n\t\tcollection.set([\n\t\t\t[uri, [new Diagnostic(new Range(0, 0, 0, 1), 'message-1')]],\n\t\t\t[URI.parse('some:thing'), [new Diagnostic(new Range(0, 0, 1, 1), 'something')]],\n\t\t\t[uri, undefined!]\n\t\t]);\n\t\tassert.ok(!collection.has(uri));\n\n\t\t// clear\n\t\tcollection.delete(uri);\n\t\tassert.ok(!collection.has(uri));\n\n\t\t// bad tuple clears 2/2\n\t\tcollection.set([\n\t\t\t[uri, [new Diagnostic(new Range(0, 0, 0, 1), 'message-1')]],\n\t\t\t[URI.parse('some:thing'), [new Diagnostic(new Range(0, 0, 1, 1), 'something')]],\n\t\t\t[uri, undefined!],\n\t\t\t[uri, [new Diagnostic(new Range(0, 0, 0, 1), 'message-2')]],\n\t\t\t[uri, [new Diagnostic(new Range(0, 0, 0, 1), 'message-3')]],\n\t\t]);\n\n\t\tarray = collection.get(uri);\n\t\tassert.strictEqual(array.length, 2);\n\t\t[first, second] = array;\n\t\tassert.strictEqual(first.message, 'message-2');\n\t\tassert.strictEqual(second.message, 'message-3');\n\n\t\tcollection.dispose();\n\t});\n\n\ttest('diagnostics collection, set tuple overrides, #11547', function () {\n\n\t\tlet lastEntries!: [UriComponents, IMarkerData[]][];\n\t\tconst collection = new DiagnosticCollection('test', 'test', 100, 100, versionProvider, extUri, new class extends DiagnosticsShape {\n\t\t\toverride $changeMany(owner: string, entries: [UriComponents, IMarkerData[]][]): void {\n\t\t\t\tlastEntries = entries;\n\t\t\t\treturn super.$changeMany(owner, entries);\n\t\t\t}\n\t\t}, new Emitter());\n\t\tconst uri = URI.parse('sc:hightower');\n\n\t\tcollection.set([[uri, [new Diagnostic(new Range(0, 0, 1, 1), 'error')]]]);\n\t\tassert.strictEqual(collection.get(uri).length, 1);\n\t\tassert.strictEqual(collection.get(uri)[0].message, 'error');\n\t\tassert.strictEqual(lastEntries.length, 1);\n\t\tconst [[, data1]] = lastEntries;\n\t\tassert.strictEqual(data1.length, 1);\n\t\tassert.strictEqual(data1[0].message, 'error');\n\t\tlastEntries = undefined!;\n\n\t\tcollection.set([[uri, [new Diagnostic(new Range(0, 0, 1, 1), 'warning')]]]);\n\t\tassert.strictEqual(collection.get(uri).length, 1);\n\t\tassert.strictEqual(collection.get(uri)[0].message, 'warning');\n\t\tassert.strictEqual(lastEntries.length, 1);\n\t\tconst [[, data2]] = lastEntries;\n\t\tassert.strictEqual(data2.length, 1);\n\t\tassert.strictEqual(data2[0].message, 'warning');\n\t\tlastEntries = undefined!;\n\t});\n\n\ttest('do send message when not making a change', function () {\n\n\t\tlet changeCount = 0;\n\t\tlet eventCount = 0;\n\n\t\tconst emitter = new Emitter<any>();\n\t\tstore.add(emitter.event(_ => eventCount += 1));\n\t\tconst collection = new DiagnosticCollection('test', 'test', 100, 100, versionProvider, extUri, new class extends DiagnosticsShape {\n\t\t\toverride $changeMany() {\n\t\t\t\tchangeCount += 1;\n\t\t\t}\n\t\t}, emitter);\n\n\t\tconst uri = URI.parse('sc:hightower');\n\t\tconst diag = new Diagnostic(new Range(0, 0, 0, 1), 'ffff');\n\n\t\tcollection.set(uri, [diag]);\n\t\tassert.strictEqual(changeCount, 1);\n\t\tassert.strictEqual(eventCount, 1);\n\n\t\tcollection.set(uri, [diag]);\n\t\tassert.strictEqual(changeCount, 2);\n\t\tassert.strictEqual(eventCount, 2);\n\n\t});\n\n\ttest('diagnostics collection, tuples and undefined (small array), #15585', function () {\n\n\t\tconst collection = new DiagnosticCollection('test', 'test', 100, 100, versionProvider, extUri, new DiagnosticsShape(), new Emitter());\n\t\tconst uri = URI.parse('sc:hightower');\n\t\tconst uri2 = URI.parse('sc:nomad');\n\t\tconst diag = new Diagnostic(new Range(0, 0, 0, 1), 'ffff');\n\n\t\tcollection.set([\n\t\t\t[uri, [diag, diag, diag]],\n\t\t\t[uri, undefined!],\n\t\t\t[uri, [diag]],\n\n\t\t\t[uri2, [diag, diag]],\n\t\t\t[uri2, undefined!],\n\t\t\t[uri2, [diag]],\n\t\t]);\n\n\t\tassert.strictEqual(collection.get(uri).length, 1);\n\t\tassert.strictEqual(collection.get(uri2).length, 1);\n\t});\n\n\ttest('diagnostics collection, tuples and undefined (large array), #15585', function () {\n\n\t\tconst collection = new DiagnosticCollection('test', 'test', 100, 100, versionProvider, extUri, new DiagnosticsShape(), new Emitter());\n\t\tconst tuples: [URI, Diagnostic[]][] = [];\n\n\t\tfor (let i = 0; i < 500; i++) {\n\t\t\tconst uri = URI.parse('sc:hightower#' + i);\n\t\t\tconst diag = new Diagnostic(new Range(0, 0, 0, 1), i.toString());\n\n\t\t\ttuples.push([uri, [diag, diag, diag]]);\n\t\t\ttuples.push([uri, undefined!]);\n\t\t\ttuples.push([uri, [diag]]);\n\t\t}\n\n\t\tcollection.set(tuples);\n\n\t\tfor (let i = 0; i < 500; i++) {\n\t\t\tconst uri = URI.parse('sc:hightower#' + i);\n\t\t\tassert.strictEqual(collection.has(uri), true);\n\t\t\tassert.strictEqual(collection.get(uri).length, 1);\n\t\t}\n\t});\n\n\ttest('diagnostic capping (max per file)', function () {\n\n\t\tlet lastEntries!: [UriComponents, IMarkerData[]][];\n\t\tconst collection = new DiagnosticCollection('test', 'test', 100, 250, versionProvider, extUri, new class extends DiagnosticsShape {\n\t\t\toverride $changeMany(owner: string, entries: [UriComponents, IMarkerData[]][]): void {\n\t\t\t\tlastEntries = entries;\n\t\t\t\treturn super.$changeMany(owner, entries);\n\t\t\t}\n\t\t}, new Emitter());\n\t\tconst uri = URI.parse('aa:bb');\n\n\t\tconst diagnostics: Diagnostic[] = [];\n\t\tfor (let i = 0; i < 500; i++) {\n\t\t\tdiagnostics.push(new Diagnostic(new Range(i, 0, i + 1, 0), `error#${i}`, i < 300\n\t\t\t\t? DiagnosticSeverity.Warning\n\t\t\t\t: DiagnosticSeverity.Error));\n\t\t}\n\n\t\tcollection.set(uri, diagnostics);\n\t\tassert.strictEqual(collection.get(uri).length, 500);\n\t\tassert.strictEqual(lastEntries.length, 1);\n\t\tassert.strictEqual(lastEntries[0][1].length, 251);\n\t\tassert.strictEqual(lastEntries[0][1][0].severity, MarkerSeverity.Error);\n\t\tassert.strictEqual(lastEntries[0][1][200].severity, MarkerSeverity.Warning);\n\t\tassert.strictEqual(lastEntries[0][1][250].severity, MarkerSeverity.Info);\n\t});\n\n\ttest('diagnostic capping (max files)', function () {\n\n\t\tlet lastEntries!: [UriComponents, IMarkerData[]][];\n\t\tconst collection = new DiagnosticCollection('test', 'test', 2, 1, versionProvider, extUri, new class extends DiagnosticsShape {\n\t\t\toverride $changeMany(owner: string, entries: [UriComponents, IMarkerData[]][]): void {\n\t\t\t\tlastEntries = entries;\n\t\t\t\treturn super.$changeMany(owner, entries);\n\t\t\t}\n\t\t}, new Emitter());\n\n\t\tconst diag = new Diagnostic(new Range(0, 0, 1, 1), 'Hello');\n\n\n\t\tcollection.set([\n\t\t\t[URI.parse('aa:bb1'), [diag]],\n\t\t\t[URI.parse('aa:bb2'), [diag]],\n\t\t\t[URI.parse('aa:bb3'), [diag]],\n\t\t\t[URI.parse('aa:bb4'), [diag]],\n\t\t]);\n\t\tassert.strictEqual(lastEntries.length, 3); // goes above the limit and then stops\n\t});\n\n\ttest('diagnostic eventing', async function () {\n\t\tconst emitter = new Emitter<readonly URI[]>();\n\t\tconst collection = new DiagnosticCollection('ddd', 'test', 100, 100, versionProvider, extUri, new DiagnosticsShape(), emitter);\n\n\t\tconst diag1 = new Diagnostic(new Range(1, 1, 2, 3), 'diag1');\n\t\tconst diag2 = new Diagnostic(new Range(1, 1, 2, 3), 'diag2');\n\t\tconst diag3 = new Diagnostic(new Range(1, 1, 2, 3), 'diag3');\n\n\t\tlet p = Event.toPromise(emitter.event).then(a => {\n\t\t\tassert.strictEqual(a.length, 1);\n\t\t\tassert.strictEqual(a[0].toString(), 'aa:bb');\n\t\t\tassert.ok(URI.isUri(a[0]));\n\t\t});\n\t\tcollection.set(URI.parse('aa:bb'), []);\n\t\tawait p;\n\n\t\tp = Event.toPromise(emitter.event).then(e => {\n\t\t\tassert.strictEqual(e.length, 2);\n\t\t\tassert.ok(URI.isUri(e[0]));\n\t\t\tassert.ok(URI.isUri(e[1]));\n\t\t\tassert.strictEqual(e[0].toString(), 'aa:bb');\n\t\t\tassert.strictEqual(e[1].toString(), 'aa:cc');\n\t\t});\n\t\tcollection.set([\n\t\t\t[URI.parse('aa:bb'), [diag1]],\n\t\t\t[URI.parse('aa:cc'), [diag2, diag3]],\n\t\t]);\n\t\tawait p;\n\n\t\tp = Event.toPromise(emitter.event).then(e => {\n\t\t\tassert.strictEqual(e.length, 2);\n\t\t\tassert.ok(URI.isUri(e[0]));\n\t\t\tassert.ok(URI.isUri(e[1]));\n\t\t});\n\t\tcollection.clear();\n\t\tawait p;\n\t});\n\n\ttest('vscode.languages.onDidChangeDiagnostics Does Not Provide Document URI #49582', async function () {\n\t\tconst emitter = new Emitter<readonly URI[]>();\n\t\tconst collection = new DiagnosticCollection('ddd', 'test', 100, 100, versionProvider, extUri, new DiagnosticsShape(), emitter);\n\n\t\tconst diag1 = new Diagnostic(new Range(1, 1, 2, 3), 'diag1');\n\n\t\t// delete\n\t\tcollection.set(URI.parse('aa:bb'), [diag1]);\n\t\tlet p = Event.toPromise(emitter.event).then(e => {\n\t\t\tassert.strictEqual(e[0].toString(), 'aa:bb');\n\t\t});\n\t\tcollection.delete(URI.parse('aa:bb'));\n\t\tawait p;\n\n\t\t// set->undefined (as delete)\n\t\tcollection.set(URI.parse('aa:bb'), [diag1]);\n\t\tp = Event.toPromise(emitter.event).then(e => {\n\t\t\tassert.strictEqual(e[0].toString(), 'aa:bb');\n\t\t});\n\t\tcollection.set(URI.parse('aa:bb'), undefined!);\n\t\tawait p;\n\t});\n\n\ttest('diagnostics with related information', function (done) {\n\n\t\tconst collection = new DiagnosticCollection('ddd', 'test', 100, 100, versionProvider, extUri, new class extends DiagnosticsShape {\n\t\t\toverride $changeMany(owner: string, entries: [UriComponents, IMarkerData[]][]) {\n\n\t\t\t\tconst [[, data]] = entries;\n\t\t\t\tassert.strictEqual(entries.length, 1);\n\t\t\t\tassert.strictEqual(data.length, 1);\n\n\t\t\t\tconst [diag] = data;\n\t\t\t\tassert.strictEqual(diag.relatedInformation!.length, 2);\n\t\t\t\tassert.strictEqual(diag.relatedInformation![0].message, 'more1');\n\t\t\t\tassert.strictEqual(diag.relatedInformation![1].message, 'more2');\n\t\t\t\tdone();\n\t\t\t}\n\t\t}, new Emitter<any>());\n\n\t\tconst diag = new Diagnostic(new Range(0, 0, 1, 1), 'Foo');\n\t\tdiag.relatedInformation = [\n\t\t\tnew DiagnosticRelatedInformation(new Location(URI.parse('cc:dd'), new Range(0, 0, 0, 0)), 'more1'),\n\t\t\tnew DiagnosticRelatedInformation(new Location(URI.parse('cc:ee'), new Range(0, 0, 0, 0)), 'more2')\n\t\t];\n\n\t\tcollection.set(URI.parse('aa:bb'), [diag]);\n\t});\n\n\ttest('vscode.languages.getDiagnostics appears to return old diagnostics in some circumstances #54359', function () {\n\t\tconst ownerHistory: string[] = [];\n\t\tconst diags = new ExtHostDiagnostics(new class implements IMainContext {\n\t\t\tgetProxy(id: any): any {\n\t\t\t\treturn new class DiagnosticsShape {\n\t\t\t\t\t$clear(owner: string): void {\n\t\t\t\t\t\townerHistory.push(owner);\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t}\n\t\t\tset(): any {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\tdispose() { }\n\t\t\tassertRegistered(): void {\n\n\t\t\t}\n\t\t\tdrain() {\n\t\t\t\treturn undefined!;\n\t\t\t}\n\t\t}, new NullLogService(), fileSystemInfoService, new class extends mock<IExtHostDocumentsAndEditors>() {\n\t\t\toverride getDocument() {\n\t\t\t\treturn undefined;\n\t\t\t}\n\t\t});\n\n\t\tconst collection1 = diags.createDiagnosticCollection(nullExtensionDescription.identifier, 'foo');\n\t\tconst collection2 = diags.createDiagnosticCollection(nullExtensionDescription.identifier, 'foo'); // warns, uses a different owner\n\n\t\tcollection1.clear();\n\t\tcollection2.clear();\n\n\t\tassert.strictEqual(ownerHistory.length, 2);\n\t\tassert.strictEqual(ownerHistory[0], 'foo');\n\t\tassert.strictEqual(ownerHistory[1], 'foo0');\n\t});\n\n\ttest('Error updating diagnostics from extension #60394', function () {\n\t\tlet callCount = 0;\n\t\tconst collection = new DiagnosticCollection('ddd', 'test', 100, 100, versionProvider, extUri, new class extends DiagnosticsShape {\n\t\t\toverride $changeMany(owner: string, entries: [UriComponents, IMarkerData[]][]) {\n\t\t\t\tcallCount += 1;\n\t\t\t}\n\t\t}, new Emitter<any>());\n\n\t\tconst array: Diagnostic[] = [];\n\t\tconst diag1 = new Diagnostic(new Range(0, 0, 1, 1), 'Foo');\n\t\tconst diag2 = new Diagnostic(new Range(0, 0, 1, 1), 'Bar');\n\n\t\tarray.push(diag1, diag2);\n\n\t\tcollection.set(URI.parse('test:me'), array);\n\t\tassert.strictEqual(callCount, 1);\n\n\t\tcollection.set(URI.parse('test:me'), array);\n\t\tassert.strictEqual(callCount, 2); // equal array\n\n\t\tarray.push(diag2);\n\t\tcollection.set(URI.parse('test:me'), array);\n\t\tassert.strictEqual(callCount, 3); // same but un-equal array\n\t});\n\n\ttest('Version id is set whenever possible', function () {\n\n\t\tconst all: [UriComponents, IMarkerData[]][] = [];\n\n\t\tconst collection = new DiagnosticCollection('ddd', 'test', 100, 100, uri => {\n\t\t\treturn 7;\n\t\t}, extUri, new class extends DiagnosticsShape {\n\t\t\toverride $changeMany(_owner: string, entries: [UriComponents, IMarkerData[]][]) {\n\t\t\t\tall.push(...entries);\n\t\t\t}\n\t\t}, new Emitter<any>());\n\n\t\tconst array: Diagnostic[] = [];\n\t\tconst diag1 = new Diagnostic(new Range(0, 0, 1, 1), 'Foo');\n\t\tconst diag2 = new Diagnostic(new Range(0, 0, 1, 1), 'Bar');\n\n\t\tarray.push(diag1, diag2);\n\n\t\tcollection.set(URI.parse('test:one'), array);\n\t\tcollection.set(URI.parse('test:two'), [diag1]);\n\t\tcollection.set(URI.parse('test:three'), [diag2]);\n\n\t\tconst allVersions = all.map(tuple => tuple[1].map(t => t.modelVersionId)).flat();\n\t\tassert.deepStrictEqual(allVersions, [7, 7, 7, 7]);\n\t});\n\n\ttest('Diagnostics created by tasks aren\\'t accessible to extensions #47292', async function () {\n\t\treturn runWithFakedTimers({}, async function () {\n\n\t\t\tconst diags = new ExtHostDiagnostics(new class implements IMainContext {\n\t\t\t\tgetProxy(id: any): any {\n\t\t\t\t\treturn {};\n\t\t\t\t}\n\t\t\t\tset(): any {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t\tdispose() { }\n\t\t\t\tassertRegistered(): void {\n\n\t\t\t\t}\n\t\t\t\tdrain() {\n\t\t\t\t\treturn undefined!;\n\t\t\t\t}\n\t\t\t}, new NullLogService(), fileSystemInfoService, new class extends mock<IExtHostDocumentsAndEditors>() {\n\t\t\t\toverride getDocument() {\n\t\t\t\t\treturn undefined;\n\t\t\t\t}\n\t\t\t});\n\n\n\t\t\t//\n\t\t\tconst uri = URI.parse('foo:bar');\n\t\t\tconst data: IMarkerData[] = [{\n\t\t\t\tmessage: 'message',\n\t\t\t\tstartLineNumber: 1,\n\t\t\t\tstartColumn: 1,\n\t\t\t\tendLineNumber: 1,\n\t\t\t\tendColumn: 1,\n\t\t\t\tseverity: MarkerSeverity.Info\n\t\t\t}];\n\n\t\t\tconst p1 = Event.toPromise(diags.onDidChangeDiagnostics);\n\t\t\tdiags.$acceptMarkersChange([[uri, data]]);\n\t\t\tawait p1;\n\t\t\tassert.strictEqual(diags.getDiagnostics(uri).length, 1);\n\n\t\t\tconst p2 = Event.toPromise(diags.onDidChangeDiagnostics);\n\t\t\tdiags.$acceptMarkersChange([[uri, []]]);\n\t\t\tawait p2;\n\t\t\tassert.strictEqual(diags.getDiagnostics(uri).length, 0);\n\t\t});\n\t});\n\n\ttest('languages.getDiagnostics doesn\\'t handle case insensitivity correctly #128198', function () {\n\n\t\tconst diags = new ExtHostDiagnostics(new class implements IMainContext {\n\t\t\tgetProxy(id: any): any {\n\t\t\t\treturn new DiagnosticsShape();\n\t\t\t}\n\t\t\tset(): any {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\tdispose() { }\n\t\t\tassertRegistered(): void {\n\n\t\t\t}\n\t\t\tdrain() {\n\t\t\t\treturn undefined!;\n\t\t\t}\n\t\t}, new NullLogService(), new class extends mock<IExtHostFileSystemInfo>() {\n\n\t\t\toverride readonly extUri = new ExtUri(uri => uri.scheme === 'insensitive');\n\t\t}, new class extends mock<IExtHostDocumentsAndEditors>() {\n\t\t\toverride getDocument() {\n\t\t\t\treturn undefined;\n\t\t\t}\n\t\t});\n\n\t\tconst col = diags.createDiagnosticCollection(nullExtensionDescription.identifier);\n\n\t\tconst uriSensitive = URI.from({ scheme: 'foo', path: '/SOME/path' });\n\t\tconst uriSensitiveCaseB = uriSensitive.with({ path: uriSensitive.path.toUpperCase() });\n\n\t\tconst uriInSensitive = URI.from({ scheme: 'insensitive', path: '/SOME/path' });\n\t\tconst uriInSensitiveUpper = uriInSensitive.with({ path: uriInSensitive.path.toUpperCase() });\n\n\t\tcol.set(uriSensitive, [new Diagnostic(new Range(0, 0, 0, 0), 'sensitive')]);\n\t\tcol.set(uriInSensitive, [new Diagnostic(new Range(0, 0, 0, 0), 'insensitive')]);\n\n\t\t// collection itself honours casing\n\t\tassert.strictEqual(col.get(uriSensitive)?.length, 1);\n\t\tassert.strictEqual(col.get(uriSensitiveCaseB)?.length, 0);\n\n\t\tassert.strictEqual(col.get(uriInSensitive)?.length, 1);\n\t\tassert.strictEqual(col.get(uriInSensitiveUpper)?.length, 1);\n\n\t\t// languages.getDiagnostics honours casing\n\t\tassert.strictEqual(diags.getDiagnostics(uriSensitive)?.length, 1);\n\t\tassert.strictEqual(diags.getDiagnostics(uriSensitiveCaseB)?.length, 0);\n\n\t\tassert.strictEqual(diags.getDiagnostics(uriInSensitive)?.length, 1);\n\t\tassert.strictEqual(diags.getDiagnostics(uriInSensitiveUpper)?.length, 1);\n\n\n\t\tconst fromForEach: URI[] = [];\n\t\tcol.forEach(uri => fromForEach.push(uri));\n\t\tassert.strictEqual(fromForEach.length, 2);\n\t\tassert.strictEqual(fromForEach[0].toString(), uriSensitive.toString());\n\t\tassert.strictEqual(fromForEach[1].toString(), uriInSensitive.toString());\n\t});\n});\n"],
  "mappings": "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",
  "names": ["array", "diag"]
}
