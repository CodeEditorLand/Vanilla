{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/api/test/browser/extHostTelemetry.test.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport assert from 'assert';\nimport { URI } from '../../../../base/common/uri.js';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from '../../../../base/test/common/utils.js';\nimport { ExtensionIdentifier, IExtensionDescription, TargetPlatform } from '../../../../platform/extensions/common/extensions.js';\nimport { DEFAULT_LOG_LEVEL, LogLevel } from '../../../../platform/log/common/log.js';\nimport { TelemetryLevel } from '../../../../platform/telemetry/common/telemetry.js';\nimport { TestTelemetryLoggerService } from '../../../../platform/telemetry/test/common/telemetryLogAppender.test.js';\nimport { IExtHostInitDataService } from '../../common/extHostInitDataService.js';\nimport { ExtHostTelemetry, ExtHostTelemetryLogger } from '../../common/extHostTelemetry.js';\nimport { IEnvironment } from '../../../services/extensions/common/extensionHostProtocol.js';\nimport { mock } from '../../../test/common/workbenchTestServices.js';\nimport type { TelemetryLoggerOptions, TelemetrySender } from 'vscode';\n\ninterface TelemetryLoggerSpy {\n\tdataArr: any[];\n\texceptionArr: any[];\n\tflushCalled: boolean;\n}\n\nsuite('ExtHostTelemetry', function () {\n\tconst store = ensureNoDisposablesAreLeakedInTestSuite();\n\n\tconst mockEnvironment: IEnvironment = {\n\t\tisExtensionDevelopmentDebug: false,\n\t\textensionDevelopmentLocationURI: undefined,\n\t\textensionTestsLocationURI: undefined,\n\t\tappRoot: undefined,\n\t\tappName: 'test',\n\t\textensionTelemetryLogResource: URI.parse('fake'),\n\t\tisExtensionTelemetryLoggingOnly: false,\n\t\tappHost: 'test',\n\t\tappLanguage: 'en',\n\t\tglobalStorageHome: URI.parse('fake'),\n\t\tworkspaceStorageHome: URI.parse('fake'),\n\t\tappUriScheme: 'test',\n\t};\n\n\tconst mockTelemetryInfo = {\n\t\tfirstSessionDate: '2020-01-01T00:00:00.000Z',\n\t\tsessionId: 'test',\n\t\tmachineId: 'test',\n\t\tsqmId: 'test',\n\t\tdevDeviceId: 'test'\n\t};\n\n\tconst mockRemote = {\n\t\tauthority: 'test',\n\t\tisRemote: false,\n\t\tconnectionData: null\n\t};\n\n\tconst mockExtensionIdentifier: IExtensionDescription = {\n\t\tidentifier: new ExtensionIdentifier('test-extension'),\n\t\ttargetPlatform: TargetPlatform.UNIVERSAL,\n\t\tisBuiltin: true,\n\t\tisUserBuiltin: true,\n\t\tisUnderDevelopment: true,\n\t\tname: 'test-extension',\n\t\tpublisher: 'vscode',\n\t\tversion: '1.0.0',\n\t\tengines: { vscode: '*' },\n\t\textensionLocation: URI.parse('fake'),\n\t\tenabledApiProposals: undefined,\n\t};\n\n\tconst createExtHostTelemetry = () => {\n\t\tconst extensionTelemetry = new ExtHostTelemetry(new class extends mock<IExtHostInitDataService>() {\n\t\t\toverride environment: IEnvironment = mockEnvironment;\n\t\t\toverride telemetryInfo = mockTelemetryInfo;\n\t\t\toverride remote = mockRemote;\n\t\t}, new TestTelemetryLoggerService(DEFAULT_LOG_LEVEL));\n\t\tstore.add(extensionTelemetry);\n\t\textensionTelemetry.$initializeTelemetryLevel(TelemetryLevel.USAGE, true, { usage: true, error: true });\n\t\treturn extensionTelemetry;\n\t};\n\n\tconst createLogger = (functionSpy: TelemetryLoggerSpy, extHostTelemetry?: ExtHostTelemetry, options?: TelemetryLoggerOptions) => {\n\t\tconst extensionTelemetry = extHostTelemetry ?? createExtHostTelemetry();\n\t\t// This is the appender which the extension would contribute\n\t\tconst appender: TelemetrySender = {\n\t\t\tsendEventData: (eventName: string, data) => {\n\t\t\t\tfunctionSpy.dataArr.push({ eventName, data });\n\t\t\t},\n\t\t\tsendErrorData: (exception, data) => {\n\t\t\t\tfunctionSpy.exceptionArr.push({ exception, data });\n\t\t\t},\n\t\t\tflush: () => {\n\t\t\t\tfunctionSpy.flushCalled = true;\n\t\t\t}\n\t\t};\n\n\t\tif (extHostTelemetry) {\n\t\t\tstore.add(extHostTelemetry);\n\t\t}\n\n\t\tconst logger = extensionTelemetry.instantiateLogger(mockExtensionIdentifier, appender, options);\n\t\tstore.add(logger);\n\t\treturn logger;\n\t};\n\n\ttest('Validate sender instances', function () {\n\t\tassert.throws(() => ExtHostTelemetryLogger.validateSender(<any>null));\n\t\tassert.throws(() => ExtHostTelemetryLogger.validateSender(<any>1));\n\t\tassert.throws(() => ExtHostTelemetryLogger.validateSender(<any>{}));\n\t\tassert.throws(() => {\n\t\t\tExtHostTelemetryLogger.validateSender(<any>{\n\t\t\t\tsendErrorData: () => { },\n\t\t\t\tsendEventData: true\n\t\t\t});\n\t\t});\n\t\tassert.throws(() => {\n\t\t\tExtHostTelemetryLogger.validateSender(<any>{\n\t\t\t\tsendErrorData: 123,\n\t\t\t\tsendEventData: () => { },\n\t\t\t});\n\t\t});\n\t\tassert.throws(() => {\n\t\t\tExtHostTelemetryLogger.validateSender(<any>{\n\t\t\t\tsendErrorData: () => { },\n\t\t\t\tsendEventData: () => { },\n\t\t\t\tflush: true\n\t\t\t});\n\t\t});\n\t});\n\n\ttest('Ensure logger gets proper telemetry level during initialization', function () {\n\t\tconst extensionTelemetry = createExtHostTelemetry();\n\t\tlet config = extensionTelemetry.getTelemetryDetails();\n\t\tassert.strictEqual(config.isCrashEnabled, true);\n\t\tassert.strictEqual(config.isUsageEnabled, true);\n\t\tassert.strictEqual(config.isErrorsEnabled, true);\n\n\t\t// Initialize would never be called twice, but this is just for testing\n\t\textensionTelemetry.$initializeTelemetryLevel(TelemetryLevel.ERROR, true, { usage: true, error: true });\n\t\tconfig = extensionTelemetry.getTelemetryDetails();\n\t\tassert.strictEqual(config.isCrashEnabled, true);\n\t\tassert.strictEqual(config.isUsageEnabled, false);\n\t\tassert.strictEqual(config.isErrorsEnabled, true);\n\n\t\textensionTelemetry.$initializeTelemetryLevel(TelemetryLevel.CRASH, true, { usage: true, error: true });\n\t\tconfig = extensionTelemetry.getTelemetryDetails();\n\t\tassert.strictEqual(config.isCrashEnabled, true);\n\t\tassert.strictEqual(config.isUsageEnabled, false);\n\t\tassert.strictEqual(config.isErrorsEnabled, false);\n\n\t\textensionTelemetry.$initializeTelemetryLevel(TelemetryLevel.USAGE, true, { usage: false, error: true });\n\t\tconfig = extensionTelemetry.getTelemetryDetails();\n\t\tassert.strictEqual(config.isCrashEnabled, true);\n\t\tassert.strictEqual(config.isUsageEnabled, false);\n\t\tassert.strictEqual(config.isErrorsEnabled, true);\n\t\textensionTelemetry.dispose();\n\t});\n\n\ttest('Simple log event to TelemetryLogger', function () {\n\t\tconst functionSpy: TelemetryLoggerSpy = { dataArr: [], exceptionArr: [], flushCalled: false };\n\n\t\tconst logger = createLogger(functionSpy);\n\n\t\tlogger.logUsage('test-event', { 'test-data': 'test-data' });\n\t\tassert.strictEqual(functionSpy.dataArr.length, 1);\n\t\tassert.strictEqual(functionSpy.dataArr[0].eventName, `${mockExtensionIdentifier.name}/test-event`);\n\t\tassert.strictEqual(functionSpy.dataArr[0].data['test-data'], 'test-data');\n\n\t\tlogger.logUsage('test-event', { 'test-data': 'test-data' });\n\t\tassert.strictEqual(functionSpy.dataArr.length, 2);\n\n\t\tlogger.logError('test-event', { 'test-data': 'test-data' });\n\t\tassert.strictEqual(functionSpy.dataArr.length, 3);\n\n\t\tlogger.logError(new Error('test-error'), { 'test-data': 'test-data' });\n\t\tassert.strictEqual(functionSpy.dataArr.length, 3);\n\t\tassert.strictEqual(functionSpy.exceptionArr.length, 1);\n\n\n\t\t// Assert not flushed\n\t\tassert.strictEqual(functionSpy.flushCalled, false);\n\n\t\t// Call flush and assert that flush occurs\n\t\tlogger.dispose();\n\t\tassert.strictEqual(functionSpy.flushCalled, true);\n\n\t});\n\n\ttest('Simple log event to TelemetryLogger with options', function () {\n\t\tconst functionSpy: TelemetryLoggerSpy = { dataArr: [], exceptionArr: [], flushCalled: false };\n\n\t\tconst logger = createLogger(functionSpy, undefined, { additionalCommonProperties: { 'common.foo': 'bar' } });\n\n\t\tlogger.logUsage('test-event', { 'test-data': 'test-data' });\n\t\tassert.strictEqual(functionSpy.dataArr.length, 1);\n\t\tassert.strictEqual(functionSpy.dataArr[0].eventName, `${mockExtensionIdentifier.name}/test-event`);\n\t\tassert.strictEqual(functionSpy.dataArr[0].data['test-data'], 'test-data');\n\t\tassert.strictEqual(functionSpy.dataArr[0].data['common.foo'], 'bar');\n\n\t\tlogger.logUsage('test-event', { 'test-data': 'test-data' });\n\t\tassert.strictEqual(functionSpy.dataArr.length, 2);\n\n\t\tlogger.logError('test-event', { 'test-data': 'test-data' });\n\t\tassert.strictEqual(functionSpy.dataArr.length, 3);\n\n\t\tlogger.logError(new Error('test-error'), { 'test-data': 'test-data' });\n\t\tassert.strictEqual(functionSpy.dataArr.length, 3);\n\t\tassert.strictEqual(functionSpy.exceptionArr.length, 1);\n\n\n\t\t// Assert not flushed\n\t\tassert.strictEqual(functionSpy.flushCalled, false);\n\n\t\t// Call flush and assert that flush occurs\n\t\tlogger.dispose();\n\t\tassert.strictEqual(functionSpy.flushCalled, true);\n\n\t});\n\n\ttest('Log error should get common properties #193205', function () {\n\t\tconst functionSpy: TelemetryLoggerSpy = { dataArr: [], exceptionArr: [], flushCalled: false };\n\n\t\tconst logger = createLogger(functionSpy, undefined, { additionalCommonProperties: { 'common.foo': 'bar' } });\n\t\tlogger.logError(new Error('Test error'));\n\t\tassert.strictEqual(functionSpy.exceptionArr.length, 1);\n\t\tassert.strictEqual(functionSpy.exceptionArr[0].data['common.foo'], 'bar');\n\t\tassert.strictEqual(functionSpy.exceptionArr[0].data['common.product'], 'test');\n\n\t\tlogger.logError('test-error-event');\n\t\tassert.strictEqual(functionSpy.dataArr.length, 1);\n\t\tassert.strictEqual(functionSpy.dataArr[0].data['common.foo'], 'bar');\n\t\tassert.strictEqual(functionSpy.dataArr[0].data['common.product'], 'test');\n\n\t\tlogger.logError('test-error-event', { 'test-data': 'test-data' });\n\t\tassert.strictEqual(functionSpy.dataArr.length, 2);\n\t\tassert.strictEqual(functionSpy.dataArr[1].data['common.foo'], 'bar');\n\t\tassert.strictEqual(functionSpy.dataArr[1].data['common.product'], 'test');\n\n\t\tlogger.logError('test-error-event', { properties: { 'test-data': 'test-data' } });\n\t\tassert.strictEqual(functionSpy.dataArr.length, 3);\n\t\tassert.strictEqual(functionSpy.dataArr[2].data.properties['common.foo'], 'bar');\n\t\tassert.strictEqual(functionSpy.dataArr[2].data.properties['common.product'], 'test');\n\n\t\tlogger.dispose();\n\t\tassert.strictEqual(functionSpy.flushCalled, true);\n\t});\n\n\n\ttest('Ensure logger properly cleans PII', function () {\n\t\tconst functionSpy: TelemetryLoggerSpy = { dataArr: [], exceptionArr: [], flushCalled: false };\n\n\t\tconst logger = createLogger(functionSpy);\n\n\t\t// Log an event with a bunch of PII, this should all get cleaned out\n\t\tlogger.logUsage('test-event', {\n\t\t\t'fake-password': 'pwd=123',\n\t\t\t'fake-email': 'no-reply@example.com',\n\t\t\t'fake-token': 'token=123',\n\t\t\t'fake-slack-token': 'xoxp-123',\n\t\t\t'fake-path': '/Users/username/.vscode/extensions',\n\t\t});\n\n\t\tassert.strictEqual(functionSpy.dataArr.length, 1);\n\t\tassert.strictEqual(functionSpy.dataArr[0].eventName, `${mockExtensionIdentifier.name}/test-event`);\n\t\tassert.strictEqual(functionSpy.dataArr[0].data['fake-password'], '<REDACTED: Generic Secret>');\n\t\tassert.strictEqual(functionSpy.dataArr[0].data['fake-email'], '<REDACTED: Email>');\n\t\tassert.strictEqual(functionSpy.dataArr[0].data['fake-token'], '<REDACTED: Generic Secret>');\n\t\tassert.strictEqual(functionSpy.dataArr[0].data['fake-slack-token'], '<REDACTED: Slack Token>');\n\t\tassert.strictEqual(functionSpy.dataArr[0].data['fake-path'], '<REDACTED: user-file-path>');\n\t});\n\n\ttest('Ensure output channel is logged to', function () {\n\n\t\t// Have to re-duplicate code here because I the logger service isn't exposed in the simple setup functions\n\t\tconst loggerService = new TestTelemetryLoggerService(LogLevel.Trace);\n\t\tconst extensionTelemetry = new ExtHostTelemetry(new class extends mock<IExtHostInitDataService>() {\n\t\t\toverride environment: IEnvironment = mockEnvironment;\n\t\t\toverride telemetryInfo = mockTelemetryInfo;\n\t\t\toverride remote = mockRemote;\n\t\t}, loggerService);\n\t\textensionTelemetry.$initializeTelemetryLevel(TelemetryLevel.USAGE, true, { usage: true, error: true });\n\n\t\tconst functionSpy: TelemetryLoggerSpy = { dataArr: [], exceptionArr: [], flushCalled: false };\n\n\t\tconst logger = createLogger(functionSpy, extensionTelemetry);\n\n\t\t// Ensure headers are logged on instantiation\n\t\tassert.strictEqual(loggerService.createLogger().logs.length, 2);\n\n\t\tlogger.logUsage('test-event', { 'test-data': 'test-data' });\n\t\t// Initial header is logged then the event\n\t\tassert.strictEqual(loggerService.createLogger().logs.length, 3);\n\t\tassert.ok(loggerService.createLogger().logs[2].startsWith('test-extension/test-event'));\n\t});\n});\n"],
  "mappings": "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",
  "names": []
}
