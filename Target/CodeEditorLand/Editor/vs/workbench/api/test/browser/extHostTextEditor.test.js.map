{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/api/test/browser/extHostTextEditor.test.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport assert from 'assert';\nimport { Lazy } from '../../../../base/common/lazy.js';\nimport { URI } from '../../../../base/common/uri.js';\nimport { mock } from '../../../../base/test/common/mock.js';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from '../../../../base/test/common/utils.js';\nimport { RenderLineNumbersType, TextEditorCursorStyle } from '../../../../editor/common/config/editorOptions.js';\nimport { NullLogService } from '../../../../platform/log/common/log.js';\nimport { IResolvedTextEditorConfiguration, ITextEditorConfigurationUpdate, MainThreadTextEditorsShape } from '../../common/extHost.protocol.js';\nimport { ExtHostDocumentData } from '../../common/extHostDocumentData.js';\nimport { ExtHostTextEditor, ExtHostTextEditorOptions } from '../../common/extHostTextEditor.js';\nimport { Range, TextEditorLineNumbersStyle } from '../../common/extHostTypes.js';\n\nsuite('ExtHostTextEditor', () => {\n\n\tlet editor: ExtHostTextEditor;\n\tconst doc = new ExtHostDocumentData(undefined!, URI.file(''), [\n\t\t'aaaa bbbb+cccc abc'\n\t], '\\n', 1, 'text', false);\n\n\tsetup(() => {\n\t\teditor = new ExtHostTextEditor('fake', null!, new NullLogService(), new Lazy(() => doc.document), [], { cursorStyle: TextEditorCursorStyle.Line, insertSpaces: true, lineNumbers: 1, tabSize: 4, indentSize: 4, originalIndentSize: 'tabSize' }, [], 1);\n\t});\n\n\ttest('disposed editor', () => {\n\n\t\tassert.ok(editor.value.document);\n\t\teditor._acceptViewColumn(3);\n\t\tassert.strictEqual(3, editor.value.viewColumn);\n\n\t\teditor.dispose();\n\n\t\tassert.throws(() => editor._acceptViewColumn(2));\n\t\tassert.strictEqual(3, editor.value.viewColumn);\n\n\t\tassert.ok(editor.value.document);\n\t\tassert.throws(() => editor._acceptOptions(null!));\n\t\tassert.throws(() => editor._acceptSelections([]));\n\t});\n\n\ttest('API [bug]: registerTextEditorCommand clears redo stack even if no edits are made #55163', async function () {\n\t\tlet applyCount = 0;\n\t\tconst editor = new ExtHostTextEditor('edt1',\n\t\t\tnew class extends mock<MainThreadTextEditorsShape>() {\n\t\t\t\toverride $tryApplyEdits(): Promise<boolean> {\n\t\t\t\t\tapplyCount += 1;\n\t\t\t\t\treturn Promise.resolve(true);\n\t\t\t\t}\n\t\t\t}, new NullLogService(), new Lazy(() => doc.document), [], { cursorStyle: TextEditorCursorStyle.Line, insertSpaces: true, lineNumbers: 1, tabSize: 4, indentSize: 4, originalIndentSize: 'tabSize' }, [], 1);\n\n\t\tawait editor.value.edit(edit => { });\n\t\tassert.strictEqual(applyCount, 0);\n\n\t\tawait editor.value.edit(edit => { edit.setEndOfLine(1); });\n\t\tassert.strictEqual(applyCount, 1);\n\n\t\tawait editor.value.edit(edit => { edit.delete(new Range(0, 0, 1, 1)); });\n\t\tassert.strictEqual(applyCount, 2);\n\t});\n\n\tensureNoDisposablesAreLeakedInTestSuite();\n});\n\nsuite('ExtHostTextEditorOptions', () => {\n\n\tlet opts: ExtHostTextEditorOptions;\n\tlet calls: ITextEditorConfigurationUpdate[] = [];\n\n\tsetup(() => {\n\t\tcalls = [];\n\t\tconst mockProxy: MainThreadTextEditorsShape = {\n\t\t\tdispose: undefined!,\n\t\t\t$trySetOptions: (id: string, options: ITextEditorConfigurationUpdate) => {\n\t\t\t\tassert.strictEqual(id, '1');\n\t\t\t\tcalls.push(options);\n\t\t\t\treturn Promise.resolve(undefined);\n\t\t\t},\n\t\t\t$tryShowTextDocument: undefined!,\n\t\t\t$registerTextEditorDecorationType: undefined!,\n\t\t\t$removeTextEditorDecorationType: undefined!,\n\t\t\t$tryShowEditor: undefined!,\n\t\t\t$tryHideEditor: undefined!,\n\t\t\t$trySetDecorations: undefined!,\n\t\t\t$trySetDecorationsFast: undefined!,\n\t\t\t$tryRevealRange: undefined!,\n\t\t\t$trySetSelections: undefined!,\n\t\t\t$tryApplyEdits: undefined!,\n\t\t\t$tryInsertSnippet: undefined!,\n\t\t\t$getDiffInformation: undefined!\n\t\t};\n\t\topts = new ExtHostTextEditorOptions(mockProxy, '1', {\n\t\t\ttabSize: 4,\n\t\t\tindentSize: 4,\n\t\t\toriginalIndentSize: 'tabSize',\n\t\t\tinsertSpaces: false,\n\t\t\tcursorStyle: TextEditorCursorStyle.Line,\n\t\t\tlineNumbers: RenderLineNumbersType.On\n\t\t}, new NullLogService());\n\t});\n\n\tteardown(() => {\n\t\topts = null!;\n\t\tcalls = null!;\n\t});\n\n\tfunction assertState(opts: ExtHostTextEditorOptions, expected: Omit<IResolvedTextEditorConfiguration, 'originalIndentSize'>): void {\n\t\tconst actual = {\n\t\t\ttabSize: opts.value.tabSize,\n\t\t\tindentSize: opts.value.indentSize,\n\t\t\tinsertSpaces: opts.value.insertSpaces,\n\t\t\tcursorStyle: opts.value.cursorStyle,\n\t\t\tlineNumbers: opts.value.lineNumbers\n\t\t};\n\t\tassert.deepStrictEqual(actual, expected);\n\t}\n\n\ttest('can set tabSize to the same value', () => {\n\t\topts.value.tabSize = 4;\n\t\tassertState(opts, {\n\t\t\ttabSize: 4,\n\t\t\tindentSize: 4,\n\t\t\tinsertSpaces: false,\n\t\t\tcursorStyle: TextEditorCursorStyle.Line,\n\t\t\tlineNumbers: RenderLineNumbersType.On\n\t\t});\n\t\tassert.deepStrictEqual(calls, []);\n\t});\n\n\ttest('can change tabSize to positive integer', () => {\n\t\topts.value.tabSize = 1;\n\t\tassertState(opts, {\n\t\t\ttabSize: 1,\n\t\t\tindentSize: 4,\n\t\t\tinsertSpaces: false,\n\t\t\tcursorStyle: TextEditorCursorStyle.Line,\n\t\t\tlineNumbers: RenderLineNumbersType.On\n\t\t});\n\t\tassert.deepStrictEqual(calls, [{ tabSize: 1 }]);\n\t});\n\n\ttest('can change tabSize to positive float', () => {\n\t\topts.value.tabSize = 2.3;\n\t\tassertState(opts, {\n\t\t\ttabSize: 2,\n\t\t\tindentSize: 4,\n\t\t\tinsertSpaces: false,\n\t\t\tcursorStyle: TextEditorCursorStyle.Line,\n\t\t\tlineNumbers: RenderLineNumbersType.On\n\t\t});\n\t\tassert.deepStrictEqual(calls, [{ tabSize: 2 }]);\n\t});\n\n\ttest('can change tabSize to a string number', () => {\n\t\topts.value.tabSize = '2';\n\t\tassertState(opts, {\n\t\t\ttabSize: 2,\n\t\t\tindentSize: 4,\n\t\t\tinsertSpaces: false,\n\t\t\tcursorStyle: TextEditorCursorStyle.Line,\n\t\t\tlineNumbers: RenderLineNumbersType.On\n\t\t});\n\t\tassert.deepStrictEqual(calls, [{ tabSize: 2 }]);\n\t});\n\n\ttest('tabSize can request indentation detection', () => {\n\t\topts.value.tabSize = 'auto';\n\t\tassertState(opts, {\n\t\t\ttabSize: 4,\n\t\t\tindentSize: 4,\n\t\t\tinsertSpaces: false,\n\t\t\tcursorStyle: TextEditorCursorStyle.Line,\n\t\t\tlineNumbers: RenderLineNumbersType.On\n\t\t});\n\t\tassert.deepStrictEqual(calls, [{ tabSize: 'auto' }]);\n\t});\n\n\ttest('ignores invalid tabSize 1', () => {\n\t\topts.value.tabSize = null!;\n\t\tassertState(opts, {\n\t\t\ttabSize: 4,\n\t\t\tindentSize: 4,\n\t\t\tinsertSpaces: false,\n\t\t\tcursorStyle: TextEditorCursorStyle.Line,\n\t\t\tlineNumbers: RenderLineNumbersType.On\n\t\t});\n\t\tassert.deepStrictEqual(calls, []);\n\t});\n\n\ttest('ignores invalid tabSize 2', () => {\n\t\topts.value.tabSize = -5;\n\t\tassertState(opts, {\n\t\t\ttabSize: 4,\n\t\t\tindentSize: 4,\n\t\t\tinsertSpaces: false,\n\t\t\tcursorStyle: TextEditorCursorStyle.Line,\n\t\t\tlineNumbers: RenderLineNumbersType.On\n\t\t});\n\t\tassert.deepStrictEqual(calls, []);\n\t});\n\n\ttest('ignores invalid tabSize 3', () => {\n\t\topts.value.tabSize = 'hello';\n\t\tassertState(opts, {\n\t\t\ttabSize: 4,\n\t\t\tindentSize: 4,\n\t\t\tinsertSpaces: false,\n\t\t\tcursorStyle: TextEditorCursorStyle.Line,\n\t\t\tlineNumbers: RenderLineNumbersType.On\n\t\t});\n\t\tassert.deepStrictEqual(calls, []);\n\t});\n\n\ttest('ignores invalid tabSize 4', () => {\n\t\topts.value.tabSize = '-17';\n\t\tassertState(opts, {\n\t\t\ttabSize: 4,\n\t\t\tindentSize: 4,\n\t\t\tinsertSpaces: false,\n\t\t\tcursorStyle: TextEditorCursorStyle.Line,\n\t\t\tlineNumbers: RenderLineNumbersType.On\n\t\t});\n\t\tassert.deepStrictEqual(calls, []);\n\t});\n\n\ttest('can set indentSize to the same value', () => {\n\t\topts.value.indentSize = 4;\n\t\tassertState(opts, {\n\t\t\ttabSize: 4,\n\t\t\tindentSize: 4,\n\t\t\tinsertSpaces: false,\n\t\t\tcursorStyle: TextEditorCursorStyle.Line,\n\t\t\tlineNumbers: RenderLineNumbersType.On\n\t\t});\n\t\tassert.deepStrictEqual(calls, [{ indentSize: 4 }]);\n\t});\n\n\ttest('can change indentSize to positive integer', () => {\n\t\topts.value.indentSize = 1;\n\t\tassertState(opts, {\n\t\t\ttabSize: 4,\n\t\t\tindentSize: 1,\n\t\t\tinsertSpaces: false,\n\t\t\tcursorStyle: TextEditorCursorStyle.Line,\n\t\t\tlineNumbers: RenderLineNumbersType.On\n\t\t});\n\t\tassert.deepStrictEqual(calls, [{ indentSize: 1 }]);\n\t});\n\n\ttest('can change indentSize to positive float', () => {\n\t\topts.value.indentSize = 2.3;\n\t\tassertState(opts, {\n\t\t\ttabSize: 4,\n\t\t\tindentSize: 2,\n\t\t\tinsertSpaces: false,\n\t\t\tcursorStyle: TextEditorCursorStyle.Line,\n\t\t\tlineNumbers: RenderLineNumbersType.On\n\t\t});\n\t\tassert.deepStrictEqual(calls, [{ indentSize: 2 }]);\n\t});\n\n\ttest('can change indentSize to a string number', () => {\n\t\topts.value.indentSize = <any>'2';\n\t\tassertState(opts, {\n\t\t\ttabSize: 4,\n\t\t\tindentSize: 2,\n\t\t\tinsertSpaces: false,\n\t\t\tcursorStyle: TextEditorCursorStyle.Line,\n\t\t\tlineNumbers: RenderLineNumbersType.On\n\t\t});\n\t\tassert.deepStrictEqual(calls, [{ indentSize: 2 }]);\n\t});\n\n\ttest('indentSize can request to use tabSize', () => {\n\t\topts.value.indentSize = 'tabSize';\n\t\tassertState(opts, {\n\t\t\ttabSize: 4,\n\t\t\tindentSize: 4,\n\t\t\tinsertSpaces: false,\n\t\t\tcursorStyle: TextEditorCursorStyle.Line,\n\t\t\tlineNumbers: RenderLineNumbersType.On\n\t\t});\n\t\tassert.deepStrictEqual(calls, [{ indentSize: 'tabSize' }]);\n\t});\n\n\ttest('indentSize cannot request indentation detection', () => {\n\t\topts.value.indentSize = <any>'auto';\n\t\tassertState(opts, {\n\t\t\ttabSize: 4,\n\t\t\tindentSize: 4,\n\t\t\tinsertSpaces: false,\n\t\t\tcursorStyle: TextEditorCursorStyle.Line,\n\t\t\tlineNumbers: RenderLineNumbersType.On\n\t\t});\n\t\tassert.deepStrictEqual(calls, []);\n\t});\n\n\ttest('ignores invalid indentSize 1', () => {\n\t\topts.value.indentSize = null!;\n\t\tassertState(opts, {\n\t\t\ttabSize: 4,\n\t\t\tindentSize: 4,\n\t\t\tinsertSpaces: false,\n\t\t\tcursorStyle: TextEditorCursorStyle.Line,\n\t\t\tlineNumbers: RenderLineNumbersType.On\n\t\t});\n\t\tassert.deepStrictEqual(calls, []);\n\t});\n\n\ttest('ignores invalid indentSize 2', () => {\n\t\topts.value.indentSize = -5;\n\t\tassertState(opts, {\n\t\t\ttabSize: 4,\n\t\t\tindentSize: 4,\n\t\t\tinsertSpaces: false,\n\t\t\tcursorStyle: TextEditorCursorStyle.Line,\n\t\t\tlineNumbers: RenderLineNumbersType.On\n\t\t});\n\t\tassert.deepStrictEqual(calls, []);\n\t});\n\n\ttest('ignores invalid indentSize 3', () => {\n\t\topts.value.indentSize = <any>'hello';\n\t\tassertState(opts, {\n\t\t\ttabSize: 4,\n\t\t\tindentSize: 4,\n\t\t\tinsertSpaces: false,\n\t\t\tcursorStyle: TextEditorCursorStyle.Line,\n\t\t\tlineNumbers: RenderLineNumbersType.On\n\t\t});\n\t\tassert.deepStrictEqual(calls, []);\n\t});\n\n\ttest('ignores invalid indentSize 4', () => {\n\t\topts.value.indentSize = <any>'-17';\n\t\tassertState(opts, {\n\t\t\ttabSize: 4,\n\t\t\tindentSize: 4,\n\t\t\tinsertSpaces: false,\n\t\t\tcursorStyle: TextEditorCursorStyle.Line,\n\t\t\tlineNumbers: RenderLineNumbersType.On\n\t\t});\n\t\tassert.deepStrictEqual(calls, []);\n\t});\n\n\ttest('can set insertSpaces to the same value', () => {\n\t\topts.value.insertSpaces = false;\n\t\tassertState(opts, {\n\t\t\ttabSize: 4,\n\t\t\tindentSize: 4,\n\t\t\tinsertSpaces: false,\n\t\t\tcursorStyle: TextEditorCursorStyle.Line,\n\t\t\tlineNumbers: RenderLineNumbersType.On\n\t\t});\n\t\tassert.deepStrictEqual(calls, []);\n\t});\n\n\ttest('can set insertSpaces to boolean', () => {\n\t\topts.value.insertSpaces = true;\n\t\tassertState(opts, {\n\t\t\ttabSize: 4,\n\t\t\tindentSize: 4,\n\t\t\tinsertSpaces: true,\n\t\t\tcursorStyle: TextEditorCursorStyle.Line,\n\t\t\tlineNumbers: RenderLineNumbersType.On\n\t\t});\n\t\tassert.deepStrictEqual(calls, [{ insertSpaces: true }]);\n\t});\n\n\ttest('can set insertSpaces to false string', () => {\n\t\topts.value.insertSpaces = 'false';\n\t\tassertState(opts, {\n\t\t\ttabSize: 4,\n\t\t\tindentSize: 4,\n\t\t\tinsertSpaces: false,\n\t\t\tcursorStyle: TextEditorCursorStyle.Line,\n\t\t\tlineNumbers: RenderLineNumbersType.On\n\t\t});\n\t\tassert.deepStrictEqual(calls, []);\n\t});\n\n\ttest('can set insertSpaces to truey', () => {\n\t\topts.value.insertSpaces = 'hello';\n\t\tassertState(opts, {\n\t\t\ttabSize: 4,\n\t\t\tindentSize: 4,\n\t\t\tinsertSpaces: true,\n\t\t\tcursorStyle: TextEditorCursorStyle.Line,\n\t\t\tlineNumbers: RenderLineNumbersType.On\n\t\t});\n\t\tassert.deepStrictEqual(calls, [{ insertSpaces: true }]);\n\t});\n\n\ttest('insertSpaces can request indentation detection', () => {\n\t\topts.value.insertSpaces = 'auto';\n\t\tassertState(opts, {\n\t\t\ttabSize: 4,\n\t\t\tindentSize: 4,\n\t\t\tinsertSpaces: false,\n\t\t\tcursorStyle: TextEditorCursorStyle.Line,\n\t\t\tlineNumbers: RenderLineNumbersType.On\n\t\t});\n\t\tassert.deepStrictEqual(calls, [{ insertSpaces: 'auto' }]);\n\t});\n\n\ttest('can set cursorStyle to same value', () => {\n\t\topts.value.cursorStyle = TextEditorCursorStyle.Line;\n\t\tassertState(opts, {\n\t\t\ttabSize: 4,\n\t\t\tindentSize: 4,\n\t\t\tinsertSpaces: false,\n\t\t\tcursorStyle: TextEditorCursorStyle.Line,\n\t\t\tlineNumbers: RenderLineNumbersType.On\n\t\t});\n\t\tassert.deepStrictEqual(calls, []);\n\t});\n\n\ttest('can change cursorStyle', () => {\n\t\topts.value.cursorStyle = TextEditorCursorStyle.Block;\n\t\tassertState(opts, {\n\t\t\ttabSize: 4,\n\t\t\tindentSize: 4,\n\t\t\tinsertSpaces: false,\n\t\t\tcursorStyle: TextEditorCursorStyle.Block,\n\t\t\tlineNumbers: RenderLineNumbersType.On\n\t\t});\n\t\tassert.deepStrictEqual(calls, [{ cursorStyle: TextEditorCursorStyle.Block }]);\n\t});\n\n\ttest('can set lineNumbers to same value', () => {\n\t\topts.value.lineNumbers = TextEditorLineNumbersStyle.On;\n\t\tassertState(opts, {\n\t\t\ttabSize: 4,\n\t\t\tindentSize: 4,\n\t\t\tinsertSpaces: false,\n\t\t\tcursorStyle: TextEditorCursorStyle.Line,\n\t\t\tlineNumbers: RenderLineNumbersType.On\n\t\t});\n\t\tassert.deepStrictEqual(calls, []);\n\t});\n\n\ttest('can change lineNumbers', () => {\n\t\topts.value.lineNumbers = TextEditorLineNumbersStyle.Off;\n\t\tassertState(opts, {\n\t\t\ttabSize: 4,\n\t\t\tindentSize: 4,\n\t\t\tinsertSpaces: false,\n\t\t\tcursorStyle: TextEditorCursorStyle.Line,\n\t\t\tlineNumbers: RenderLineNumbersType.Off\n\t\t});\n\t\tassert.deepStrictEqual(calls, [{ lineNumbers: RenderLineNumbersType.Off }]);\n\t});\n\n\ttest('can do bulk updates 0', () => {\n\t\topts.assign({\n\t\t\ttabSize: 4,\n\t\t\tindentSize: 4,\n\t\t\tinsertSpaces: false,\n\t\t\tcursorStyle: TextEditorCursorStyle.Line,\n\t\t\tlineNumbers: TextEditorLineNumbersStyle.On\n\t\t});\n\t\tassertState(opts, {\n\t\t\ttabSize: 4,\n\t\t\tindentSize: 4,\n\t\t\tinsertSpaces: false,\n\t\t\tcursorStyle: TextEditorCursorStyle.Line,\n\t\t\tlineNumbers: RenderLineNumbersType.On\n\t\t});\n\t\tassert.deepStrictEqual(calls, [{ indentSize: 4 }]);\n\t});\n\n\ttest('can do bulk updates 1', () => {\n\t\topts.assign({\n\t\t\ttabSize: 'auto',\n\t\t\tinsertSpaces: true\n\t\t});\n\t\tassertState(opts, {\n\t\t\ttabSize: 4,\n\t\t\tindentSize: 4,\n\t\t\tinsertSpaces: true,\n\t\t\tcursorStyle: TextEditorCursorStyle.Line,\n\t\t\tlineNumbers: RenderLineNumbersType.On\n\t\t});\n\t\tassert.deepStrictEqual(calls, [{ tabSize: 'auto', insertSpaces: true }]);\n\t});\n\n\ttest('can do bulk updates 2', () => {\n\t\topts.assign({\n\t\t\ttabSize: 3,\n\t\t\tinsertSpaces: 'auto'\n\t\t});\n\t\tassertState(opts, {\n\t\t\ttabSize: 3,\n\t\t\tindentSize: 4,\n\t\t\tinsertSpaces: false,\n\t\t\tcursorStyle: TextEditorCursorStyle.Line,\n\t\t\tlineNumbers: RenderLineNumbersType.On\n\t\t});\n\t\tassert.deepStrictEqual(calls, [{ tabSize: 3, insertSpaces: 'auto' }]);\n\t});\n\n\ttest('can do bulk updates 3', () => {\n\t\topts.assign({\n\t\t\tcursorStyle: TextEditorCursorStyle.Block,\n\t\t\tlineNumbers: TextEditorLineNumbersStyle.Relative\n\t\t});\n\t\tassertState(opts, {\n\t\t\ttabSize: 4,\n\t\t\tindentSize: 4,\n\t\t\tinsertSpaces: false,\n\t\t\tcursorStyle: TextEditorCursorStyle.Block,\n\t\t\tlineNumbers: RenderLineNumbersType.Relative\n\t\t});\n\t\tassert.deepStrictEqual(calls, [{ cursorStyle: TextEditorCursorStyle.Block, lineNumbers: RenderLineNumbersType.Relative }]);\n\t});\n\n\tensureNoDisposablesAreLeakedInTestSuite();\n});\n"],
  "mappings": "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",
  "names": ["editor", "opts"]
}
