{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/api/test/browser/mainThreadDocumentContentProviders.test.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport assert from 'assert';\nimport { URI } from '../../../../base/common/uri.js';\nimport { MainThreadDocumentContentProviders } from '../../browser/mainThreadDocumentContentProviders.js';\nimport { createTextModel } from '../../../../editor/test/common/testTextModel.js';\nimport { mock } from '../../../../base/test/common/mock.js';\nimport { IModelService } from '../../../../editor/common/services/model.js';\nimport { IEditorWorkerService } from '../../../../editor/common/services/editorWorker.js';\nimport { TestRPCProtocol } from '../common/testRPCProtocol.js';\nimport { TextEdit } from '../../../../editor/common/languages.js';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from '../../../../base/test/common/utils.js';\n\nsuite('MainThreadDocumentContentProviders', function () {\n\n\tconst store = ensureNoDisposablesAreLeakedInTestSuite();\n\n\ttest('events are processed properly', function () {\n\n\t\tconst uri = URI.parse('test:uri');\n\t\tconst model = createTextModel('1', undefined, undefined, uri);\n\n\t\tconst providers = new MainThreadDocumentContentProviders(new TestRPCProtocol(), null!, null!,\n\t\t\tnew class extends mock<IModelService>() {\n\t\t\t\toverride getModel(_uri: URI) {\n\t\t\t\t\tassert.strictEqual(uri.toString(), _uri.toString());\n\t\t\t\t\treturn model;\n\t\t\t\t}\n\t\t\t},\n\t\t\tnew class extends mock<IEditorWorkerService>() {\n\t\t\t\toverride computeMoreMinimalEdits(_uri: URI, data: TextEdit[] | undefined) {\n\t\t\t\t\tassert.strictEqual(model.getValue(), '1');\n\t\t\t\t\treturn Promise.resolve(data);\n\t\t\t\t}\n\t\t\t},\n\t\t);\n\n\t\tstore.add(model);\n\t\tstore.add(providers);\n\n\t\treturn new Promise<void>((resolve, reject) => {\n\t\t\tlet expectedEvents = 1;\n\t\t\tstore.add(model.onDidChangeContent(e => {\n\t\t\t\texpectedEvents -= 1;\n\t\t\t\ttry {\n\t\t\t\t\tassert.ok(expectedEvents >= 0);\n\t\t\t\t} catch (err) {\n\t\t\t\t\treject(err);\n\t\t\t\t}\n\t\t\t\tif (model.getValue() === '1\\n2\\n3') {\n\t\t\t\t\tmodel.dispose();\n\t\t\t\t\tresolve();\n\t\t\t\t}\n\t\t\t}));\n\t\t\tproviders.$onVirtualDocumentChange(uri, '1\\n2');\n\t\t\tproviders.$onVirtualDocumentChange(uri, '1\\n2\\n3');\n\t\t});\n\t});\n});\n"],
  "mappings": "AAKA,OAAO,YAAY;AACnB,SAAS,WAAW;AACpB,SAAS,0CAA0C;AACnD,SAAS,uBAAuB;AAChC,SAAS,YAAY;AACrB,SAAS,qBAAqB;AAC9B,SAAS,4BAA4B;AACrC,SAAS,uBAAuB;AAChC,SAAS,gBAAgB;AACzB,SAAS,+CAA+C;AAExD,MAAM,sCAAsC,WAAY;AAEvD,QAAM,QAAQ,wCAAwC;AAEtD,OAAK,iCAAiC,WAAY;AAEjD,UAAM,MAAM,IAAI,MAAM,UAAU;AAChC,UAAM,QAAQ,gBAAgB,KAAK,QAAW,QAAW,GAAG;AAE5D,UAAM,YAAY,IAAI;AAAA,MAAmC,IAAI,gBAAgB;AAAA,MAAG;AAAA,MAAO;AAAA,MACtF,IAAI,cAAc,KAAoB,EAAE;AAAA,QAC9B,SAAS,MAAW;AAC5B,iBAAO,YAAY,IAAI,SAAS,GAAG,KAAK,SAAS,CAAC;AAClD,iBAAO;AAAA,QACR;AAAA,MACD;AAAA,MACA,IAAI,cAAc,KAA2B,EAAE;AAAA,QACrC,wBAAwB,MAAW,MAA8B;AACzE,iBAAO,YAAY,MAAM,SAAS,GAAG,GAAG;AACxC,iBAAO,QAAQ,QAAQ,IAAI;AAAA,QAC5B;AAAA,MACD;AAAA,IACD;AAEA,UAAM,IAAI,KAAK;AACf,UAAM,IAAI,SAAS;AAEnB,WAAO,IAAI,QAAc,CAAC,SAAS,WAAW;AAC7C,UAAI,iBAAiB;AACrB,YAAM,IAAI,MAAM,mBAAmB,OAAK;AACvC,0BAAkB;AAClB,YAAI;AACH,iBAAO,GAAG,kBAAkB,CAAC;AAAA,QAC9B,SAAS,KAAK;AACb,iBAAO,GAAG;AAAA,QACX;AACA,YAAI,MAAM,SAAS,MAAM,WAAW;AACnC,gBAAM,QAAQ;AACd,kBAAQ;AAAA,QACT;AAAA,MACD,CAAC,CAAC;AACF,gBAAU,yBAAyB,KAAK,MAAM;AAC9C,gBAAU,yBAAyB,KAAK,SAAS;AAAA,IAClD,CAAC;AAAA,EACF,CAAC;AACF,CAAC;",
  "names": []
}
