{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/api/test/browser/mainThreadWorkspace.test.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport assert from 'assert';\nimport { CancellationToken } from '../../../../base/common/cancellation.js';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from '../../../../base/test/common/utils.js';\nimport { IConfigurationService } from '../../../../platform/configuration/common/configuration.js';\nimport { TestConfigurationService } from '../../../../platform/configuration/test/common/testConfigurationService.js';\nimport { TestInstantiationService } from '../../../../platform/instantiation/test/common/instantiationServiceMock.js';\nimport { MainThreadWorkspace } from '../../browser/mainThreadWorkspace.js';\nimport { SingleProxyRPCProtocol } from '../common/testRPCProtocol.js';\nimport { IFileQuery, ISearchService } from '../../../services/search/common/search.js';\nimport { workbenchInstantiationService } from '../../../test/browser/workbenchTestServices.js';\nimport { URI, UriComponents } from '../../../../base/common/uri.js';\n\nsuite('MainThreadWorkspace', () => {\n\tconst disposables = ensureNoDisposablesAreLeakedInTestSuite();\n\n\tlet configService: TestConfigurationService;\n\tlet instantiationService: TestInstantiationService;\n\n\tsetup(() => {\n\t\tinstantiationService = workbenchInstantiationService(undefined, disposables) as TestInstantiationService;\n\n\t\tconfigService = instantiationService.get(IConfigurationService) as TestConfigurationService;\n\t\tconfigService.setUserConfiguration('search', {});\n\t});\n\n\ttest('simple', () => {\n\t\tinstantiationService.stub(ISearchService, {\n\t\t\tfileSearch(query: IFileQuery) {\n\t\t\t\tassert.strictEqual(query.folderQueries.length, 1);\n\t\t\t\tassert.strictEqual(query.folderQueries[0].disregardIgnoreFiles, true);\n\n\t\t\t\tassert.deepStrictEqual({ ...query.includePattern }, { 'foo': true });\n\t\t\t\tassert.strictEqual(query.maxResults, 10);\n\n\t\t\t\treturn Promise.resolve({ results: [], messages: [] });\n\t\t\t}\n\t\t});\n\n\t\tconst mtw = disposables.add(instantiationService.createInstance(MainThreadWorkspace, SingleProxyRPCProtocol({ $initializeWorkspace: () => { } })));\n\t\treturn mtw.$startFileSearch(null, { maxResults: 10, includePattern: 'foo', disregardSearchExcludeSettings: true }, CancellationToken.None);\n\t});\n\n\ttest('exclude defaults', () => {\n\t\tconfigService.setUserConfiguration('search', {\n\t\t\t'exclude': { 'searchExclude': true }\n\t\t});\n\t\tconfigService.setUserConfiguration('files', {\n\t\t\t'exclude': { 'filesExclude': true }\n\t\t});\n\n\t\tinstantiationService.stub(ISearchService, {\n\t\t\tfileSearch(query: IFileQuery) {\n\t\t\t\tassert.strictEqual(query.folderQueries.length, 1);\n\t\t\t\tassert.strictEqual(query.folderQueries[0].disregardIgnoreFiles, true);\n\t\t\t\tassert.strictEqual(query.folderQueries[0].excludePattern?.length, 1);\n\t\t\t\tassert.deepStrictEqual(query.folderQueries[0].excludePattern[0].pattern, { 'filesExclude': true });\n\n\t\t\t\treturn Promise.resolve({ results: [], messages: [] });\n\t\t\t}\n\t\t});\n\n\t\tconst mtw = disposables.add(instantiationService.createInstance(MainThreadWorkspace, SingleProxyRPCProtocol({ $initializeWorkspace: () => { } })));\n\t\treturn mtw.$startFileSearch(null, { maxResults: 10, includePattern: '', disregardSearchExcludeSettings: true }, CancellationToken.None);\n\t});\n\n\ttest('disregard excludes', () => {\n\t\tconfigService.setUserConfiguration('search', {\n\t\t\t'exclude': { 'searchExclude': true }\n\t\t});\n\t\tconfigService.setUserConfiguration('files', {\n\t\t\t'exclude': { 'filesExclude': true }\n\t\t});\n\n\t\tinstantiationService.stub(ISearchService, {\n\t\t\tfileSearch(query: IFileQuery) {\n\t\t\t\tassert.deepStrictEqual(query.folderQueries[0].excludePattern, []);\n\t\t\t\tassert.deepStrictEqual(query.excludePattern, undefined);\n\n\t\t\t\treturn Promise.resolve({ results: [], messages: [] });\n\t\t\t}\n\t\t});\n\n\t\tconst mtw = disposables.add(instantiationService.createInstance(MainThreadWorkspace, SingleProxyRPCProtocol({ $initializeWorkspace: () => { } })));\n\t\treturn mtw.$startFileSearch(null, { maxResults: 10, includePattern: '', disregardSearchExcludeSettings: true, disregardExcludeSettings: true }, CancellationToken.None);\n\t});\n\n\ttest('do not disregard anything if disregardExcludeSettings is true', () => {\n\t\tconfigService.setUserConfiguration('search', {\n\t\t\t'exclude': { 'searchExclude': true }\n\t\t});\n\t\tconfigService.setUserConfiguration('files', {\n\t\t\t'exclude': { 'filesExclude': true }\n\t\t});\n\n\t\tinstantiationService.stub(ISearchService, {\n\t\t\tfileSearch(query: IFileQuery) {\n\t\t\t\tassert.strictEqual(query.folderQueries.length, 1);\n\t\t\t\tassert.strictEqual(query.folderQueries[0].disregardIgnoreFiles, true);\n\t\t\t\tassert.deepStrictEqual(query.folderQueries[0].excludePattern, []);\n\n\t\t\t\treturn Promise.resolve({ results: [], messages: [] });\n\t\t\t}\n\t\t});\n\n\t\tconst mtw = disposables.add(instantiationService.createInstance(MainThreadWorkspace, SingleProxyRPCProtocol({ $initializeWorkspace: () => { } })));\n\t\treturn mtw.$startFileSearch(null, { maxResults: 10, includePattern: '', disregardExcludeSettings: true, disregardSearchExcludeSettings: false }, CancellationToken.None);\n\t});\n\n\ttest('exclude string', () => {\n\t\tinstantiationService.stub(ISearchService, {\n\t\t\tfileSearch(query: IFileQuery) {\n\t\t\t\tassert.deepStrictEqual(query.folderQueries[0].excludePattern, []);\n\t\t\t\tassert.deepStrictEqual({ ...query.excludePattern }, { 'exclude/**': true });\n\n\t\t\t\treturn Promise.resolve({ results: [], messages: [] });\n\t\t\t}\n\t\t});\n\n\t\tconst mtw = disposables.add(instantiationService.createInstance(MainThreadWorkspace, SingleProxyRPCProtocol({ $initializeWorkspace: () => { } })));\n\t\treturn mtw.$startFileSearch(null, { maxResults: 10, includePattern: '', excludePattern: [{ pattern: 'exclude/**' }], disregardSearchExcludeSettings: true }, CancellationToken.None);\n\t});\n\ttest('Valid revived URI after moving to EH', () => {\n\t\tconst uriComponents: UriComponents = {\n\t\t\tscheme: 'test',\n\t\t\tpath: '/Users/username/Downloads',\n\t\t};\n\t\tinstantiationService.stub(ISearchService, {\n\t\t\tfileSearch(query: IFileQuery) {\n\t\t\t\tassert.strictEqual(query.folderQueries?.length, 1);\n\t\t\t\tassert.ok(URI.isUri(query.folderQueries[0].folder));\n\t\t\t\tassert.strictEqual(query.folderQueries[0].folder.path, '/Users/username/Downloads');\n\t\t\t\tassert.strictEqual(query.folderQueries[0].folder.scheme, 'test');\n\n\t\t\t\treturn Promise.resolve({ results: [], messages: [] });\n\t\t\t}\n\t\t});\n\n\t\tconst mtw = disposables.add(instantiationService.createInstance(MainThreadWorkspace, SingleProxyRPCProtocol({ $initializeWorkspace: () => { } })));\n\t\treturn mtw.$startFileSearch(uriComponents, { filePattern: '*.md' }, CancellationToken.None);\n\t});\n});\n"],
  "mappings": "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",
  "names": []
}
