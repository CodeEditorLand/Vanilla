{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/api/test/browser/mainThreadManagedSockets.test.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport assert from 'assert';\nimport { disposableTimeout, timeout } from '../../../../base/common/async.js';\nimport { VSBuffer } from '../../../../base/common/buffer.js';\nimport { Emitter } from '../../../../base/common/event.js';\nimport { DisposableStore } from '../../../../base/common/lifecycle.js';\nimport { SocketCloseEvent } from '../../../../base/parts/ipc/common/ipc.net.js';\nimport { mock } from '../../../../base/test/common/mock.js';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from '../../../../base/test/common/utils.js';\nimport { RemoteSocketHalf } from '../../../../platform/remote/common/managedSocket.js';\nimport { MainThreadManagedSocket } from '../../browser/mainThreadManagedSockets.js';\nimport { ExtHostManagedSocketsShape } from '../../common/extHost.protocol.js';\n\nsuite('MainThreadManagedSockets', () => {\n\n\tconst ds = ensureNoDisposablesAreLeakedInTestSuite();\n\n\tsuite('ManagedSocket', () => {\n\t\tlet extHost: ExtHostMock;\n\t\tlet half: RemoteSocketHalf;\n\n\t\tclass ExtHostMock extends mock<ExtHostManagedSocketsShape>() {\n\t\t\tprivate onDidFire = new Emitter<void>();\n\t\t\tpublic readonly events: any[] = [];\n\n\t\t\toverride $remoteSocketWrite(socketId: number, buffer: VSBuffer): void {\n\t\t\t\tthis.events.push({ socketId, data: buffer.toString() });\n\t\t\t\tthis.onDidFire.fire();\n\t\t\t}\n\n\t\t\toverride $remoteSocketDrain(socketId: number) {\n\t\t\t\tthis.events.push({ socketId, event: 'drain' });\n\t\t\t\tthis.onDidFire.fire();\n\t\t\t\treturn Promise.resolve();\n\t\t\t}\n\n\t\t\toverride $remoteSocketEnd(socketId: number) {\n\t\t\t\tthis.events.push({ socketId, event: 'end' });\n\t\t\t\tthis.onDidFire.fire();\n\t\t\t}\n\n\t\t\texpectEvent(test: (evt: any) => void, message: string) {\n\t\t\t\tif (this.events.some(test)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst d = new DisposableStore();\n\t\t\t\treturn new Promise<void>(resolve => {\n\t\t\t\t\td.add(this.onDidFire.event(() => {\n\t\t\t\t\t\tif (this.events.some(test)) {\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t}));\n\t\t\t\t\td.add(disposableTimeout(() => {\n\t\t\t\t\t\tthrow new Error(`Expected ${message} but only had ${JSON.stringify(this.events, null, 2)}`);\n\t\t\t\t\t}, 1000));\n\t\t\t\t}).finally(() => d.dispose());\n\t\t\t}\n\t\t}\n\n\t\tsetup(() => {\n\t\t\textHost = new ExtHostMock();\n\t\t\thalf = {\n\t\t\t\tonClose: new Emitter<SocketCloseEvent>(),\n\t\t\t\tonData: new Emitter<VSBuffer>(),\n\t\t\t\tonEnd: new Emitter<void>(),\n\t\t\t};\n\t\t});\n\n\t\tasync function doConnect() {\n\t\t\tconst socket = MainThreadManagedSocket.connect(1, extHost, '/hello', 'world=true', '', half);\n\t\t\tawait extHost.expectEvent(evt => evt.data && evt.data.startsWith('GET ws://localhost/hello?world=true&skipWebSocketFrames=true HTTP/1.1\\r\\nConnection: Upgrade\\r\\nUpgrade: websocket\\r\\nSec-WebSocket-Key:'), 'websocket open event');\n\t\t\thalf.onData.fire(VSBuffer.fromString('Opened successfully ;)\\r\\n\\r\\n'));\n\t\t\treturn ds.add(await socket);\n\t\t}\n\n\t\ttest('connects', async () => {\n\t\t\tawait doConnect();\n\t\t});\n\n\t\ttest('includes trailing connection data', async () => {\n\t\t\tconst socketProm = MainThreadManagedSocket.connect(1, extHost, '/hello', 'world=true', '', half);\n\t\t\tawait extHost.expectEvent(evt => evt.data && evt.data.includes('GET ws://localhost'), 'websocket open event');\n\t\t\thalf.onData.fire(VSBuffer.fromString('Opened successfully ;)\\r\\n\\r\\nSome trailing data'));\n\t\t\tconst socket = ds.add(await socketProm);\n\n\t\t\tconst data: string[] = [];\n\t\t\tds.add(socket.onData(d => data.push(d.toString())));\n\t\t\tawait timeout(1); // allow microtasks to flush\n\t\t\tassert.deepStrictEqual(data, ['Some trailing data']);\n\t\t});\n\n\t\ttest('round trips data', async () => {\n\t\t\tconst socket = await doConnect();\n\t\t\tconst data: string[] = [];\n\t\t\tds.add(socket.onData(d => data.push(d.toString())));\n\n\t\t\tsocket.write(VSBuffer.fromString('ping'));\n\t\t\tawait extHost.expectEvent(evt => evt.data === 'ping', 'expected ping');\n\t\t\thalf.onData.fire(VSBuffer.fromString(\"pong\"));\n\t\t\tassert.deepStrictEqual(data, ['pong']);\n\t\t});\n\t});\n});\n"],
  "mappings": "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",
  "names": ["test"]
}
