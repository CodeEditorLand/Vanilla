{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/api/test/browser/extHostTesting.test.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport assert from 'assert';\nimport * as sinon from 'sinon';\nimport { timeout } from '../../../../base/common/async.js';\nimport { VSBuffer } from '../../../../base/common/buffer.js';\nimport { CancellationTokenSource } from '../../../../base/common/cancellation.js';\nimport { Event } from '../../../../base/common/event.js';\nimport { Iterable } from '../../../../base/common/iterator.js';\nimport { URI } from '../../../../base/common/uri.js';\nimport { mock, mockObject, MockObject } from '../../../../base/test/common/mock.js';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from '../../../../base/test/common/utils.js';\nimport * as editorRange from '../../../../editor/common/core/range.js';\nimport { ExtensionIdentifier, IExtensionDescription } from '../../../../platform/extensions/common/extensions.js';\nimport { NullLogService } from '../../../../platform/log/common/log.js';\nimport { MainThreadTestingShape } from '../../common/extHost.protocol.js';\nimport { ExtHostCommands } from '../../common/extHostCommands.js';\nimport { ExtHostDocumentsAndEditors } from '../../common/extHostDocumentsAndEditors.js';\nimport { IExtHostTelemetry } from '../../common/extHostTelemetry.js';\nimport { ExtHostTesting, TestRunCoordinator, TestRunDto, TestRunProfileImpl } from '../../common/extHostTesting.js';\nimport { ExtHostTestItemCollection, TestItemImpl } from '../../common/extHostTestItem.js';\nimport * as convert from '../../common/extHostTypeConverters.js';\nimport { Location, Position, Range, TestMessage, TestRunProfileKind, TestRunRequest as TestRunRequestImpl, TestTag } from '../../common/extHostTypes.js';\nimport { AnyCallRPCProtocol } from '../common/testRPCProtocol.js';\nimport { TestId } from '../../../contrib/testing/common/testId.js';\nimport { TestDiffOpType, TestItemExpandState, TestMessageType, TestsDiff } from '../../../contrib/testing/common/testTypes.js';\nimport { nullExtensionDescription } from '../../../services/extensions/common/extensions.js';\nimport type { TestController, TestItem, TestRunProfile, TestRunRequest } from 'vscode';\n\nconst simplify = (item: TestItem) => ({\n\tid: item.id,\n\tlabel: item.label,\n\turi: item.uri,\n\trange: item.range,\n});\n\nconst assertTreesEqual = (a: TestItemImpl | undefined, b: TestItemImpl | undefined) => {\n\tif (!a) {\n\t\tthrow new assert.AssertionError({ message: 'Expected a to be defined', actual: a });\n\t}\n\n\tif (!b) {\n\t\tthrow new assert.AssertionError({ message: 'Expected b to be defined', actual: b });\n\t}\n\n\tassert.deepStrictEqual(simplify(a), simplify(b));\n\n\tconst aChildren = [...a.children].map(([_, c]) => c.id).sort();\n\tconst bChildren = [...b.children].map(([_, c]) => c.id).sort();\n\tassert.strictEqual(aChildren.length, bChildren.length, `expected ${a.label}.children.length == ${b.label}.children.length`);\n\taChildren.forEach(key => assertTreesEqual(a.children.get(key) as TestItemImpl, b.children.get(key) as TestItemImpl));\n};\n\n// const assertTreeListEqual = (a: ReadonlyArray<TestItem>, b: ReadonlyArray<TestItem>) => {\n// \tassert.strictEqual(a.length, b.length, `expected a.length == n.length`);\n// \ta.forEach((_, i) => assertTreesEqual(a[i], b[i]));\n// };\n\n// class TestMirroredCollection extends MirroredTestCollection {\n// \tpublic changeEvent!: TestChangeEvent;\n\n// \tconstructor() {\n// \t\tsuper();\n// \t\tthis.onDidChangeTests(evt => this.changeEvent = evt);\n// \t}\n\n// \tpublic get length() {\n// \t\treturn this.items.size;\n// \t}\n// }\n\nsuite('ExtHost Testing', () => {\n\tclass TestExtHostTestItemCollection extends ExtHostTestItemCollection {\n\t\tpublic setDiff(diff: TestsDiff) {\n\t\t\tthis.diff = diff;\n\t\t}\n\t}\n\n\tteardown(() => {\n\t\tsinon.restore();\n\t});\n\n\tconst ds = ensureNoDisposablesAreLeakedInTestSuite();\n\n\tlet single: TestExtHostTestItemCollection;\n\tlet resolveCalls: (string | undefined)[] = [];\n\tsetup(() => {\n\t\tresolveCalls = [];\n\t\tsingle = ds.add(new TestExtHostTestItemCollection('ctrlId', 'root', {\n\t\t\tgetDocument: () => undefined,\n\t\t} as Partial<ExtHostDocumentsAndEditors> as ExtHostDocumentsAndEditors));\n\t\tsingle.resolveHandler = item => {\n\t\t\tresolveCalls.push(item?.id);\n\t\t\tif (item === undefined) {\n\t\t\t\tconst a = new TestItemImpl('ctrlId', 'id-a', 'a', URI.file('/'));\n\t\t\t\ta.canResolveChildren = true;\n\t\t\t\tconst b = new TestItemImpl('ctrlId', 'id-b', 'b', URI.file('/'));\n\t\t\t\tsingle.root.children.add(a);\n\t\t\t\tsingle.root.children.add(b);\n\t\t\t} else if (item.id === 'id-a') {\n\t\t\t\titem.children.add(new TestItemImpl('ctrlId', 'id-aa', 'aa', URI.file('/')));\n\t\t\t\titem.children.add(new TestItemImpl('ctrlId', 'id-ab', 'ab', URI.file('/')));\n\t\t\t}\n\t\t};\n\n\t\tds.add(single.onDidGenerateDiff(d => single.setDiff(d /* don't clear during testing */)));\n\t});\n\n\tsuite('OwnedTestCollection', () => {\n\t\ttest('adds a root recursively', async () => {\n\t\t\tawait single.expand(single.root.id, Infinity);\n\t\t\tconst a = single.root.children.get('id-a') as TestItemImpl;\n\t\t\tconst b = single.root.children.get('id-b') as TestItemImpl;\n\t\t\tassert.deepStrictEqual(single.collectDiff(), [\n\t\t\t\t{\n\t\t\t\t\top: TestDiffOpType.Add,\n\t\t\t\t\titem: { controllerId: 'ctrlId', expand: TestItemExpandState.BusyExpanding, item: { ...convert.TestItem.from(single.root) } }\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\top: TestDiffOpType.Add,\n\t\t\t\t\titem: { controllerId: 'ctrlId', expand: TestItemExpandState.BusyExpanding, item: { ...convert.TestItem.from(a) } }\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\top: TestDiffOpType.Add,\n\t\t\t\t\titem: { controllerId: 'ctrlId', expand: TestItemExpandState.NotExpandable, item: convert.TestItem.from(a.children.get('id-aa') as TestItemImpl) }\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\top: TestDiffOpType.Add,\n\t\t\t\t\titem: { controllerId: 'ctrlId', expand: TestItemExpandState.NotExpandable, item: convert.TestItem.from(a.children.get('id-ab') as TestItemImpl) }\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\top: TestDiffOpType.Update,\n\t\t\t\t\titem: { extId: new TestId(['ctrlId', 'id-a']).toString(), expand: TestItemExpandState.Expanded }\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\top: TestDiffOpType.Add,\n\t\t\t\t\titem: { controllerId: 'ctrlId', expand: TestItemExpandState.NotExpandable, item: convert.TestItem.from(b) }\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\top: TestDiffOpType.Update,\n\t\t\t\t\titem: { extId: single.root.id, expand: TestItemExpandState.Expanded }\n\t\t\t\t},\n\t\t\t]);\n\t\t});\n\n\t\ttest('parents are set correctly', () => {\n\t\t\tsingle.expand(single.root.id, Infinity);\n\t\t\tsingle.collectDiff();\n\n\t\t\tconst a = single.root.children.get('id-a')!;\n\t\t\tconst ab = a.children.get('id-ab')!;\n\t\t\tassert.strictEqual(a.parent, undefined);\n\t\t\tassert.strictEqual(ab.parent, a);\n\t\t});\n\n\t\ttest('can add an item with same ID as root', () => {\n\t\t\tsingle.collectDiff();\n\n\t\t\tconst child = new TestItemImpl('ctrlId', 'ctrlId', 'c', undefined);\n\t\t\tsingle.root.children.add(child);\n\t\t\tassert.deepStrictEqual(single.collectDiff(), [\n\t\t\t\t{\n\t\t\t\t\top: TestDiffOpType.Add,\n\t\t\t\t\titem: { controllerId: 'ctrlId', expand: TestItemExpandState.NotExpandable, item: convert.TestItem.from(child) },\n\t\t\t\t}\n\t\t\t]);\n\t\t});\n\n\t\ttest('no-ops if items not changed', () => {\n\t\t\tsingle.collectDiff();\n\t\t\tassert.deepStrictEqual(single.collectDiff(), []);\n\t\t});\n\n\t\ttest('watches property mutations', () => {\n\t\t\tsingle.expand(single.root.id, Infinity);\n\t\t\tsingle.collectDiff();\n\t\t\tsingle.root.children.get('id-a')!.description = 'Hello world'; /* item a */\n\n\t\t\tassert.deepStrictEqual(single.collectDiff(), [\n\t\t\t\t{\n\t\t\t\t\top: TestDiffOpType.Update,\n\t\t\t\t\titem: { extId: new TestId(['ctrlId', 'id-a']).toString(), item: { description: 'Hello world' } },\n\t\t\t\t}\n\t\t\t]);\n\t\t});\n\n\t\ttest('removes children', () => {\n\t\t\tsingle.expand(single.root.id, Infinity);\n\t\t\tsingle.collectDiff();\n\t\t\tsingle.root.children.delete('id-a');\n\n\t\t\tassert.deepStrictEqual(single.collectDiff(), [\n\t\t\t\t{ op: TestDiffOpType.Remove, itemId: new TestId(['ctrlId', 'id-a']).toString() },\n\t\t\t]);\n\t\t\tassert.deepStrictEqual(\n\t\t\t\t[...single.tree.keys()].sort(),\n\t\t\t\t[single.root.id, new TestId(['ctrlId', 'id-b']).toString()],\n\t\t\t);\n\t\t\tassert.strictEqual(single.tree.size, 2);\n\t\t});\n\n\t\ttest('adds new children', () => {\n\t\t\tsingle.expand(single.root.id, Infinity);\n\t\t\tsingle.collectDiff();\n\t\t\tconst child = new TestItemImpl('ctrlId', 'id-ac', 'c', undefined);\n\t\t\tsingle.root.children.get('id-a')!.children.add(child);\n\n\t\t\tassert.deepStrictEqual(single.collectDiff(), [\n\t\t\t\t{\n\t\t\t\t\top: TestDiffOpType.Add, item: {\n\t\t\t\t\t\tcontrollerId: 'ctrlId',\n\t\t\t\t\t\texpand: TestItemExpandState.NotExpandable,\n\t\t\t\t\t\titem: convert.TestItem.from(child),\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t]);\n\t\t\tassert.deepStrictEqual(\n\t\t\t\t[...single.tree.values()].map(n => n.actual.id).sort(),\n\t\t\t\t[single.root.id, 'id-a', 'id-aa', 'id-ab', 'id-ac', 'id-b'],\n\t\t\t);\n\t\t\tassert.strictEqual(single.tree.size, 6);\n\t\t});\n\n\t\ttest('manages tags correctly', () => {\n\t\t\tsingle.expand(single.root.id, Infinity);\n\t\t\tsingle.collectDiff();\n\t\t\tconst tag1 = new TestTag('tag1');\n\t\t\tconst tag2 = new TestTag('tag2');\n\t\t\tconst tag3 = new TestTag('tag3');\n\t\t\tconst child = new TestItemImpl('ctrlId', 'id-ac', 'c', undefined);\n\t\t\tchild.tags = [tag1, tag2];\n\t\t\tsingle.root.children.get('id-a')!.children.add(child);\n\n\t\t\tassert.deepStrictEqual(single.collectDiff(), [\n\t\t\t\t{ op: TestDiffOpType.AddTag, tag: { id: 'ctrlId\\0tag1' } },\n\t\t\t\t{ op: TestDiffOpType.AddTag, tag: { id: 'ctrlId\\0tag2' } },\n\t\t\t\t{\n\t\t\t\t\top: TestDiffOpType.Add, item: {\n\t\t\t\t\t\tcontrollerId: 'ctrlId',\n\t\t\t\t\t\texpand: TestItemExpandState.NotExpandable,\n\t\t\t\t\t\titem: convert.TestItem.from(child),\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t]);\n\n\t\t\tchild.tags = [tag2, tag3];\n\t\t\tassert.deepStrictEqual(single.collectDiff(), [\n\t\t\t\t{ op: TestDiffOpType.AddTag, tag: { id: 'ctrlId\\0tag3' } },\n\t\t\t\t{\n\t\t\t\t\top: TestDiffOpType.Update, item: {\n\t\t\t\t\t\textId: new TestId(['ctrlId', 'id-a', 'id-ac']).toString(),\n\t\t\t\t\t\titem: { tags: ['ctrlId\\0tag2', 'ctrlId\\0tag3'] }\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t{ op: TestDiffOpType.RemoveTag, id: 'ctrlId\\0tag1' },\n\t\t\t]);\n\n\t\t\tconst a = single.root.children.get('id-a')!;\n\t\t\ta.tags = [tag2];\n\t\t\ta.children.replace([]);\n\t\t\tassert.deepStrictEqual(single.collectDiff().filter(t => t.op === TestDiffOpType.RemoveTag), [\n\t\t\t\t{ op: TestDiffOpType.RemoveTag, id: 'ctrlId\\0tag3' },\n\t\t\t]);\n\t\t});\n\n\t\ttest('replaces on uri change', () => {\n\t\t\tsingle.expand(single.root.id, Infinity);\n\t\t\tsingle.collectDiff();\n\n\t\t\tconst oldA = single.root.children.get('id-a') as TestItemImpl;\n\t\t\tconst uri = single.root.children.get('id-a')!.uri?.with({ path: '/different' });\n\t\t\tconst newA = new TestItemImpl('ctrlId', 'id-a', 'Hello world', uri);\n\t\t\tnewA.children.replace([...oldA.children].map(([_, item]) => item));\n\t\t\tsingle.root.children.replace([...single.root.children].map(([id, i]) => id === 'id-a' ? newA : i));\n\n\t\t\tassert.deepStrictEqual(single.collectDiff(), [\n\t\t\t\t{ op: TestDiffOpType.Remove, itemId: new TestId(['ctrlId', 'id-a']).toString() },\n\t\t\t\t{\n\t\t\t\t\top: TestDiffOpType.Add,\n\t\t\t\t\titem: { controllerId: 'ctrlId', expand: TestItemExpandState.NotExpandable, item: { ...convert.TestItem.from(newA) } }\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\top: TestDiffOpType.Add,\n\t\t\t\t\titem: { controllerId: 'ctrlId', expand: TestItemExpandState.NotExpandable, item: convert.TestItem.from(newA.children.get('id-aa') as TestItemImpl) }\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\top: TestDiffOpType.Add,\n\t\t\t\t\titem: { controllerId: 'ctrlId', expand: TestItemExpandState.NotExpandable, item: convert.TestItem.from(newA.children.get('id-ab') as TestItemImpl) }\n\t\t\t\t},\n\t\t\t]);\n\t\t});\n\n\t\ttest('treats in-place replacement as mutation', () => {\n\t\t\tsingle.expand(single.root.id, Infinity);\n\t\t\tsingle.collectDiff();\n\n\t\t\tconst oldA = single.root.children.get('id-a') as TestItemImpl;\n\t\t\tconst uri = single.root.children.get('id-a')!.uri;\n\t\t\tconst newA = new TestItemImpl('ctrlId', 'id-a', 'Hello world', uri);\n\t\t\tnewA.children.replace([...oldA.children].map(([_, item]) => item));\n\t\t\tsingle.root.children.replace([\n\t\t\t\tnewA,\n\t\t\t\tnew TestItemImpl('ctrlId', 'id-b', single.root.children.get('id-b')!.label, uri),\n\t\t\t]);\n\n\t\t\tassert.deepStrictEqual(single.collectDiff(), [\n\t\t\t\t{\n\t\t\t\t\top: TestDiffOpType.Update,\n\t\t\t\t\titem: { extId: new TestId(['ctrlId', 'id-a']).toString(), item: { label: 'Hello world' } },\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\top: TestDiffOpType.DocumentSynced,\n\t\t\t\t\tdocv: undefined,\n\t\t\t\t\turi: uri\n\t\t\t\t}\n\t\t\t]);\n\n\t\t\tnewA.label = 'still connected';\n\t\t\tassert.deepStrictEqual(single.collectDiff(), [\n\t\t\t\t{\n\t\t\t\t\top: TestDiffOpType.Update,\n\t\t\t\t\titem: { extId: new TestId(['ctrlId', 'id-a']).toString(), item: { label: 'still connected' } }\n\t\t\t\t},\n\t\t\t]);\n\n\t\t\toldA.label = 'no longer connected';\n\t\t\tassert.deepStrictEqual(single.collectDiff(), []);\n\t\t});\n\n\t\tsuite('expandibility restoration', () => {\n\t\t\tconst doReplace = async (canResolveChildren = true) => {\n\t\t\t\tconst uri = single.root.children.get('id-a')!.uri;\n\t\t\t\tconst newA = new TestItemImpl('ctrlId', 'id-a', 'Hello world', uri);\n\t\t\t\tnewA.canResolveChildren = canResolveChildren;\n\t\t\t\tsingle.root.children.replace([\n\t\t\t\t\tnewA,\n\t\t\t\t\tnew TestItemImpl('ctrlId', 'id-b', single.root.children.get('id-b')!.label, uri),\n\t\t\t\t]);\n\t\t\t\tawait timeout(0); // drain microtasks\n\t\t\t};\n\n\t\t\ttest('does not restore an unexpanded state', async () => {\n\t\t\t\tawait single.expand(single.root.id, 0);\n\t\t\t\tassert.deepStrictEqual(resolveCalls, [undefined]);\n\t\t\t\tawait doReplace();\n\t\t\t\tassert.deepStrictEqual(resolveCalls, [undefined]);\n\t\t\t});\n\n\t\t\ttest('restores resolve state on replacement', async () => {\n\t\t\t\tawait single.expand(single.root.id, Infinity);\n\t\t\t\tassert.deepStrictEqual(resolveCalls, [undefined, 'id-a']);\n\t\t\t\tawait doReplace();\n\t\t\t\tassert.deepStrictEqual(resolveCalls, [undefined, 'id-a', 'id-a']);\n\t\t\t});\n\n\t\t\ttest('does not expand if new child is not expandable', async () => {\n\t\t\t\tawait single.expand(single.root.id, Infinity);\n\t\t\t\tassert.deepStrictEqual(resolveCalls, [undefined, 'id-a']);\n\t\t\t\tawait doReplace(false);\n\t\t\t\tassert.deepStrictEqual(resolveCalls, [undefined, 'id-a']);\n\t\t\t});\n\t\t});\n\n\t\ttest('treats in-place replacement as mutation deeply', () => {\n\t\t\tsingle.expand(single.root.id, Infinity);\n\t\t\tsingle.collectDiff();\n\n\t\t\tconst oldA = single.root.children.get('id-a')!;\n\t\t\tconst uri = oldA.uri;\n\t\t\tconst newA = new TestItemImpl('ctrlId', 'id-a', single.root.children.get('id-a')!.label, uri);\n\t\t\tconst oldAA = oldA.children.get('id-aa')!;\n\t\t\tconst oldAB = oldA.children.get('id-ab')!;\n\t\t\tconst newAB = new TestItemImpl('ctrlId', 'id-ab', 'Hello world', uri);\n\t\t\tnewA.children.replace([oldAA, newAB]);\n\t\t\tsingle.root.children.replace([newA, single.root.children.get('id-b')!]);\n\n\t\t\tassert.deepStrictEqual(single.collectDiff(), [\n\t\t\t\t{\n\t\t\t\t\top: TestDiffOpType.Update,\n\t\t\t\t\titem: { extId: TestId.fromExtHostTestItem(oldAB, 'ctrlId').toString(), item: { label: 'Hello world' } },\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\top: TestDiffOpType.DocumentSynced,\n\t\t\t\t\tdocv: undefined,\n\t\t\t\t\turi: uri\n\t\t\t\t}\n\t\t\t]);\n\n\t\t\toldAA.label = 'still connected1';\n\t\t\tnewAB.label = 'still connected2';\n\t\t\toldAB.label = 'not connected3';\n\t\t\tassert.deepStrictEqual(single.collectDiff(), [\n\t\t\t\t{\n\t\t\t\t\top: TestDiffOpType.Update,\n\t\t\t\t\titem: { extId: new TestId(['ctrlId', 'id-a', 'id-aa']).toString(), item: { label: 'still connected1' } }\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\top: TestDiffOpType.Update,\n\t\t\t\t\titem: { extId: new TestId(['ctrlId', 'id-a', 'id-ab']).toString(), item: { label: 'still connected2' } }\n\t\t\t\t},\n\t\t\t]);\n\n\t\t\tassert.strictEqual(newAB.parent, newA);\n\t\t\tassert.strictEqual(oldAA.parent, newA);\n\t\t\tassert.deepStrictEqual(newA.parent, undefined);\n\t\t});\n\n\t\ttest('moves an item to be a new child', async () => {\n\t\t\tawait single.expand(single.root.id, 0);\n\t\t\tsingle.collectDiff();\n\t\t\tconst b = single.root.children.get('id-b') as TestItemImpl;\n\t\t\tconst a = single.root.children.get('id-a') as TestItemImpl;\n\t\t\ta.children.add(b);\n\t\t\tassert.deepStrictEqual(single.collectDiff(), [\n\t\t\t\t{\n\t\t\t\t\top: TestDiffOpType.Remove,\n\t\t\t\t\titemId: new TestId(['ctrlId', 'id-b']).toString(),\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\top: TestDiffOpType.Add,\n\t\t\t\t\titem: { controllerId: 'ctrlId', expand: TestItemExpandState.NotExpandable, item: convert.TestItem.from(b) }\n\t\t\t\t},\n\t\t\t]);\n\n\t\t\tb.label = 'still connected';\n\t\t\tassert.deepStrictEqual(single.collectDiff(), [\n\t\t\t\t{\n\t\t\t\t\top: TestDiffOpType.Update,\n\t\t\t\t\titem: { extId: new TestId(['ctrlId', 'id-a', 'id-b']).toString(), item: { label: 'still connected' } }\n\t\t\t\t},\n\t\t\t]);\n\n\t\t\tassert.deepStrictEqual([...single.root.children].map(([_, item]) => item), [single.root.children.get('id-a')]);\n\t\t\tassert.deepStrictEqual(b.parent, a);\n\t\t});\n\n\t\ttest('sends document sync events', async () => {\n\t\t\tawait single.expand(single.root.id, 0);\n\t\t\tsingle.collectDiff();\n\n\t\t\tconst a = single.root.children.get('id-a') as TestItemImpl;\n\t\t\ta.range = new Range(new Position(0, 0), new Position(1, 0));\n\n\t\t\tassert.deepStrictEqual(single.collectDiff(), [\n\t\t\t\t{\n\t\t\t\t\top: TestDiffOpType.DocumentSynced,\n\t\t\t\t\tdocv: undefined,\n\t\t\t\t\turi: URI.file('/')\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\top: TestDiffOpType.Update,\n\t\t\t\t\titem: {\n\t\t\t\t\t\textId: new TestId(['ctrlId', 'id-a']).toString(),\n\t\t\t\t\t\titem: {\n\t\t\t\t\t\t\trange: editorRange.Range.lift({\n\t\t\t\t\t\t\t\tendColumn: 1,\n\t\t\t\t\t\t\t\tendLineNumber: 2,\n\t\t\t\t\t\t\t\tstartColumn: 1,\n\t\t\t\t\t\t\t\tstartLineNumber: 1\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t]);\n\n\t\t\t// sends on replace even if it's a no-op\n\t\t\ta.range = a.range;\n\t\t\tassert.deepStrictEqual(single.collectDiff(), [\n\t\t\t\t{\n\t\t\t\t\top: TestDiffOpType.DocumentSynced,\n\t\t\t\t\tdocv: undefined,\n\t\t\t\t\turi: URI.file('/')\n\t\t\t\t},\n\t\t\t]);\n\n\t\t\t// sends on a child replacement\n\t\t\tconst uri = URI.file('/');\n\t\t\tconst a2 = new TestItemImpl('ctrlId', 'id-a', 'a', uri);\n\t\t\ta2.range = a.range;\n\t\t\tsingle.root.children.replace([a2, single.root.children.get('id-b')!]);\n\t\t\tassert.deepStrictEqual(single.collectDiff(), [\n\t\t\t\t{\n\t\t\t\t\top: TestDiffOpType.DocumentSynced,\n\t\t\t\t\tdocv: undefined,\n\t\t\t\t\turi\n\t\t\t\t},\n\t\t\t]);\n\t\t});\n\t});\n\n\n\tsuite('MirroredTestCollection', () => {\n\t\t// todo@connor4312: re-renable when we figure out what observing looks like we async children\n\t\t// \tlet m: TestMirroredCollection;\n\t\t// \tsetup(() => m = new TestMirroredCollection());\n\n\t\t// \ttest('mirrors creation of the root', () => {\n\t\t// \t\tconst tests = testStubs.nested();\n\t\t// \t\tsingle.addRoot(tests, 'pid');\n\t\t// \t\tsingle.expand(single.root.id, Infinity);\n\t\t// \t\tm.apply(single.collectDiff());\n\t\t// \t\tassertTreesEqual(m.rootTestItems[0], owned.getTestById(single.root.id)![1].actual);\n\t\t// \t\tassert.strictEqual(m.length, single.itemToInternal.size);\n\t\t// \t});\n\n\t\t// \ttest('mirrors node deletion', () => {\n\t\t// \t\tconst tests = testStubs.nested();\n\t\t// \t\tsingle.addRoot(tests, 'pid');\n\t\t// \t\tm.apply(single.collectDiff());\n\t\t// \t\tsingle.expand(single.root.id, Infinity);\n\t\t// \t\ttests.children!.splice(0, 1);\n\t\t// \t\tsingle.onItemChange(tests, 'pid');\n\t\t// \t\tsingle.expand(single.root.id, Infinity);\n\t\t// \t\tm.apply(single.collectDiff());\n\n\t\t// \t\tassertTreesEqual(m.rootTestItems[0], owned.getTestById(single.root.id)![1].actual);\n\t\t// \t\tassert.strictEqual(m.length, single.itemToInternal.size);\n\t\t// \t});\n\n\t\t// \ttest('mirrors node addition', () => {\n\t\t// \t\tconst tests = testStubs.nested();\n\t\t// \t\tsingle.addRoot(tests, 'pid');\n\t\t// \t\tm.apply(single.collectDiff());\n\t\t// \t\ttests.children![0].children!.push(stubTest('ac'));\n\t\t// \t\tsingle.onItemChange(tests, 'pid');\n\t\t// \t\tm.apply(single.collectDiff());\n\n\t\t// \t\tassertTreesEqual(m.rootTestItems[0], owned.getTestById(single.root.id)![1].actual);\n\t\t// \t\tassert.strictEqual(m.length, single.itemToInternal.size);\n\t\t// \t});\n\n\t\t// \ttest('mirrors node update', () => {\n\t\t// \t\tconst tests = testStubs.nested();\n\t\t// \t\tsingle.addRoot(tests, 'pid');\n\t\t// \t\tm.apply(single.collectDiff());\n\t\t// \t\ttests.children![0].description = 'Hello world'; /* item a */\n\t\t// \t\tsingle.onItemChange(tests, 'pid');\n\t\t// \t\tm.apply(single.collectDiff());\n\n\t\t// \t\tassertTreesEqual(m.rootTestItems[0], owned.getTestById(single.root.id)![1].actual);\n\t\t// \t});\n\n\t\t// \tsuite('MirroredChangeCollector', () => {\n\t\t// \t\tlet tests = testStubs.nested();\n\t\t// \t\tsetup(() => {\n\t\t// \t\t\ttests = testStubs.nested();\n\t\t// \t\t\tsingle.addRoot(tests, 'pid');\n\t\t// \t\t\tm.apply(single.collectDiff());\n\t\t// \t\t});\n\n\t\t// \t\ttest('creates change for root', () => {\n\t\t// \t\t\tassertTreeListEqual(m.changeEvent.added, [\n\t\t// \t\t\t\ttests,\n\t\t// \t\t\t\ttests.children[0],\n\t\t// \t\t\t\ttests.children![0].children![0],\n\t\t// \t\t\t\ttests.children![0].children![1],\n\t\t// \t\t\t\ttests.children[1],\n\t\t// \t\t\t]);\n\t\t// \t\t\tassertTreeListEqual(m.changeEvent.removed, []);\n\t\t// \t\t\tassertTreeListEqual(m.changeEvent.updated, []);\n\t\t// \t\t});\n\n\t\t// \t\ttest('creates change for delete', () => {\n\t\t// \t\t\tconst rm = tests.children.shift()!;\n\t\t// \t\t\tsingle.onItemChange(tests, 'pid');\n\t\t// \t\t\tm.apply(single.collectDiff());\n\n\t\t// \t\t\tassertTreeListEqual(m.changeEvent.added, []);\n\t\t// \t\t\tassertTreeListEqual(m.changeEvent.removed, [\n\t\t// \t\t\t\t{ ...rm },\n\t\t// \t\t\t\t{ ...rm.children![0] },\n\t\t// \t\t\t\t{ ...rm.children![1] },\n\t\t// \t\t\t]);\n\t\t// \t\t\tassertTreeListEqual(m.changeEvent.updated, []);\n\t\t// \t\t});\n\n\t\t// \t\ttest('creates change for update', () => {\n\t\t// \t\t\ttests.children[0].label = 'updated!';\n\t\t// \t\t\tsingle.onItemChange(tests, 'pid');\n\t\t// \t\t\tm.apply(single.collectDiff());\n\n\t\t// \t\t\tassertTreeListEqual(m.changeEvent.added, []);\n\t\t// \t\t\tassertTreeListEqual(m.changeEvent.removed, []);\n\t\t// \t\t\tassertTreeListEqual(m.changeEvent.updated, [tests.children[0]]);\n\t\t// \t\t});\n\n\t\t// \t\ttest('is a no-op if a node is added and removed', () => {\n\t\t// \t\t\tconst nested = testStubs.nested('id2-');\n\t\t// \t\t\ttests.children.push(nested);\n\t\t// \t\t\tsingle.onItemChange(tests, 'pid');\n\t\t// \t\t\ttests.children.pop();\n\t\t// \t\t\tsingle.onItemChange(tests, 'pid');\n\t\t// \t\t\tconst previousEvent = m.changeEvent;\n\t\t// \t\t\tm.apply(single.collectDiff());\n\t\t// \t\t\tassert.strictEqual(m.changeEvent, previousEvent);\n\t\t// \t\t});\n\n\t\t// \t\ttest('is a single-op if a node is added and changed', () => {\n\t\t// \t\t\tconst child = stubTest('c');\n\t\t// \t\t\ttests.children.push(child);\n\t\t// \t\t\tsingle.onItemChange(tests, 'pid');\n\t\t// \t\t\tchild.label = 'd';\n\t\t// \t\t\tsingle.onItemChange(tests, 'pid');\n\t\t// \t\t\tm.apply(single.collectDiff());\n\n\t\t// \t\t\tassertTreeListEqual(m.changeEvent.added, [child]);\n\t\t// \t\t\tassertTreeListEqual(m.changeEvent.removed, []);\n\t\t// \t\t\tassertTreeListEqual(m.changeEvent.updated, []);\n\t\t// \t\t});\n\n\t\t// \t\ttest('gets the common ancestor (1)', () => {\n\t\t// \t\t\ttests.children![0].children![0].label = 'za';\n\t\t// \t\t\ttests.children![0].children![1].label = 'zb';\n\t\t// \t\t\tsingle.onItemChange(tests, 'pid');\n\t\t// \t\t\tm.apply(single.collectDiff());\n\n\t\t// \t\t});\n\n\t\t// \t\ttest('gets the common ancestor (2)', () => {\n\t\t// \t\t\ttests.children![0].children![0].label = 'za';\n\t\t// \t\t\ttests.children![1].label = 'ab';\n\t\t// \t\t\tsingle.onItemChange(tests, 'pid');\n\t\t// \t\t\tm.apply(single.collectDiff());\n\t\t// \t\t});\n\t\t// \t});\n\t});\n\n\tsuite('TestRunTracker', () => {\n\t\tlet proxy: MockObject<MainThreadTestingShape>;\n\t\tlet c: TestRunCoordinator;\n\t\tlet cts: CancellationTokenSource;\n\t\tlet configuration: TestRunProfileImpl;\n\n\t\tlet req: TestRunRequest;\n\n\t\tlet dto: TestRunDto;\n\t\tconst ext: IExtensionDescription = {} as any;\n\n\t\tteardown(() => {\n\t\t\tfor (const { id } of c.trackers) {\n\t\t\t\tc.disposeTestRun(id);\n\t\t\t}\n\t\t});\n\n\t\tsetup(async () => {\n\t\t\tproxy = mockObject<MainThreadTestingShape>()();\n\t\t\tcts = new CancellationTokenSource();\n\t\t\tc = new TestRunCoordinator(proxy, new NullLogService());\n\n\t\t\tconfiguration = new TestRunProfileImpl(mockObject<MainThreadTestingShape>()(), new Map(), new Set(), Event.None, 'ctrlId', 42, 'Do Run', TestRunProfileKind.Run, () => { }, false);\n\n\t\t\tawait single.expand(single.root.id, Infinity);\n\t\t\tsingle.collectDiff();\n\n\t\t\treq = {\n\t\t\t\tinclude: undefined,\n\t\t\t\texclude: [single.root.children.get('id-b')!],\n\t\t\t\tprofile: configuration,\n\t\t\t\tpreserveFocus: false,\n\t\t\t};\n\n\t\t\tdto = TestRunDto.fromInternal({\n\t\t\t\tcontrollerId: 'ctrl',\n\t\t\t\tprofileId: configuration.profileId,\n\t\t\t\texcludeExtIds: ['id-b'],\n\t\t\t\trunId: 'run-id',\n\t\t\t\ttestIds: [single.root.id],\n\t\t\t}, single);\n\t\t});\n\n\t\ttest('tracks a run started from a main thread request', () => {\n\t\t\tconst tracker = ds.add(c.prepareForMainThreadTestRun(ext, req, dto, configuration, cts.token));\n\t\t\tassert.strictEqual(tracker.hasRunningTasks, false);\n\n\t\t\tconst task1 = c.createTestRun(ext, 'ctrl', single, req, 'run1', true);\n\t\t\tconst task2 = c.createTestRun(ext, 'ctrl', single, req, 'run2', true);\n\t\t\tassert.strictEqual(proxy.$startedExtensionTestRun.called, false);\n\t\t\tassert.strictEqual(tracker.hasRunningTasks, true);\n\n\t\t\ttask1.appendOutput('hello');\n\t\t\tconst taskId = proxy.$appendOutputToRun.args[0]?.[1];\n\t\t\tassert.deepStrictEqual([['run-id', taskId, VSBuffer.fromString('hello'), undefined, undefined]], proxy.$appendOutputToRun.args);\n\t\t\ttask1.end();\n\n\t\t\tassert.strictEqual(proxy.$finishedExtensionTestRun.called, false);\n\t\t\tassert.strictEqual(tracker.hasRunningTasks, true);\n\n\t\t\ttask2.end();\n\n\t\t\tassert.strictEqual(proxy.$finishedExtensionTestRun.called, false);\n\t\t\tassert.strictEqual(tracker.hasRunningTasks, false);\n\t\t});\n\n\t\ttest('run cancel force ends after a timeout', () => {\n\t\t\tconst clock = sinon.useFakeTimers();\n\t\t\ttry {\n\t\t\t\tconst tracker = ds.add(c.prepareForMainThreadTestRun(ext, req, dto, configuration, cts.token));\n\t\t\t\tconst task = c.createTestRun(ext, 'ctrl', single, req, 'run1', true);\n\t\t\t\tconst onEnded = sinon.stub();\n\t\t\t\tds.add(tracker.onEnd(onEnded));\n\n\t\t\t\tassert.strictEqual(task.token.isCancellationRequested, false);\n\t\t\t\tassert.strictEqual(tracker.hasRunningTasks, true);\n\t\t\t\ttracker.cancel();\n\n\t\t\t\tassert.strictEqual(task.token.isCancellationRequested, true);\n\t\t\t\tassert.strictEqual(tracker.hasRunningTasks, true);\n\n\t\t\t\tclock.tick(9999);\n\t\t\t\tassert.strictEqual(tracker.hasRunningTasks, true);\n\t\t\t\tassert.strictEqual(onEnded.called, false);\n\n\t\t\t\tclock.tick(1);\n\t\t\t\tassert.strictEqual(onEnded.called, true);\n\t\t\t\tassert.strictEqual(tracker.hasRunningTasks, false);\n\t\t\t} finally {\n\t\t\t\tclock.restore();\n\t\t\t}\n\t\t});\n\n\t\ttest('run cancel force ends on second cancellation request', () => {\n\t\t\tconst tracker = ds.add(c.prepareForMainThreadTestRun(ext, req, dto, configuration, cts.token));\n\t\t\tconst task = c.createTestRun(ext, 'ctrl', single, req, 'run1', true);\n\t\t\tconst onEnded = sinon.stub();\n\t\t\tds.add(tracker.onEnd(onEnded));\n\n\t\t\tassert.strictEqual(task.token.isCancellationRequested, false);\n\t\t\tassert.strictEqual(tracker.hasRunningTasks, true);\n\t\t\ttracker.cancel();\n\n\t\t\tassert.strictEqual(task.token.isCancellationRequested, true);\n\t\t\tassert.strictEqual(tracker.hasRunningTasks, true);\n\t\t\tassert.strictEqual(onEnded.called, false);\n\t\t\ttracker.cancel();\n\n\t\t\tassert.strictEqual(tracker.hasRunningTasks, false);\n\t\t\tassert.strictEqual(onEnded.called, true);\n\t\t});\n\n\t\ttest('tracks a run started from an extension request', () => {\n\t\t\tconst task1 = c.createTestRun(ext, 'ctrl', single, req, 'hello world', false);\n\n\t\t\tconst tracker = Iterable.first(c.trackers)!;\n\t\t\tassert.strictEqual(tracker.hasRunningTasks, true);\n\t\t\tassert.deepStrictEqual(proxy.$startedExtensionTestRun.args, [\n\t\t\t\t[{\n\t\t\t\t\tprofile: { group: 2, id: 42 },\n\t\t\t\t\tcontrollerId: 'ctrl',\n\t\t\t\t\tid: tracker.id,\n\t\t\t\t\tinclude: [single.root.id],\n\t\t\t\t\texclude: [new TestId(['ctrlId', 'id-b']).toString()],\n\t\t\t\t\tpersist: false,\n\t\t\t\t\tcontinuous: false,\n\t\t\t\t\tpreserveFocus: false,\n\t\t\t\t}]\n\t\t\t]);\n\n\t\t\tconst task2 = c.createTestRun(ext, 'ctrl', single, req, 'run2', true);\n\t\t\tconst task3Detached = c.createTestRun(ext, 'ctrl', single, { ...req }, 'task3Detached', true);\n\n\t\t\ttask1.end();\n\t\t\tassert.strictEqual(proxy.$finishedExtensionTestRun.called, false);\n\t\t\tassert.strictEqual(tracker.hasRunningTasks, true);\n\n\t\t\ttask2.end();\n\t\t\tassert.deepStrictEqual(proxy.$finishedExtensionTestRun.args, [[tracker.id]]);\n\t\t\tassert.strictEqual(tracker.hasRunningTasks, false);\n\n\t\t\ttask3Detached.end();\n\t\t});\n\n\t\ttest('adds tests to run smartly', () => {\n\t\t\tconst task1 = c.createTestRun(ext, 'ctrlId', single, req, 'hello world', false);\n\t\t\tconst tracker = Iterable.first(c.trackers)!;\n\t\t\tconst expectedArgs: unknown[][] = [];\n\t\t\tassert.deepStrictEqual(proxy.$addTestsToRun.args, expectedArgs);\n\n\t\t\ttask1.passed(single.root.children.get('id-a')!.children.get('id-aa')!);\n\t\t\texpectedArgs.push([\n\t\t\t\t'ctrlId',\n\t\t\t\ttracker.id,\n\t\t\t\t[\n\t\t\t\t\tconvert.TestItem.from(single.root),\n\t\t\t\t\tconvert.TestItem.from(single.root.children.get('id-a') as TestItemImpl),\n\t\t\t\t\tconvert.TestItem.from(single.root.children.get('id-a')!.children.get('id-aa') as TestItemImpl),\n\t\t\t\t]\n\t\t\t]);\n\t\t\tassert.deepStrictEqual(proxy.$addTestsToRun.args, expectedArgs);\n\n\t\t\ttask1.enqueued(single.root.children.get('id-a')!.children.get('id-ab')!);\n\t\t\texpectedArgs.push([\n\t\t\t\t'ctrlId',\n\t\t\t\ttracker.id,\n\t\t\t\t[\n\t\t\t\t\tconvert.TestItem.from(single.root.children.get('id-a') as TestItemImpl),\n\t\t\t\t\tconvert.TestItem.from(single.root.children.get('id-a')!.children.get('id-ab') as TestItemImpl),\n\t\t\t\t],\n\t\t\t]);\n\t\t\tassert.deepStrictEqual(proxy.$addTestsToRun.args, expectedArgs);\n\n\t\t\ttask1.passed(single.root.children.get('id-a')!.children.get('id-ab')!);\n\t\t\tassert.deepStrictEqual(proxy.$addTestsToRun.args, expectedArgs);\n\n\t\t\ttask1.end();\n\t\t});\n\n\t\ttest('adds test messages to run', () => {\n\t\t\tconst test1 = new TestItemImpl('ctrlId', 'id-c', 'test c', URI.file('/testc.txt'));\n\t\t\tconst test2 = new TestItemImpl('ctrlId', 'id-d', 'test d', URI.file('/testd.txt'));\n\t\t\ttest1.range = test2.range = new Range(new Position(0, 0), new Position(1, 0));\n\t\t\tsingle.root.children.replace([test1, test2]);\n\t\t\tconst task = c.createTestRun(ext, 'ctrlId', single, req, 'hello world', false);\n\n\t\t\tconst message1 = new TestMessage('some message');\n\t\t\tmessage1.location = new Location(URI.file('/a.txt'), new Position(0, 0));\n\t\t\ttask.failed(test1, message1);\n\n\t\t\tconst args = proxy.$appendTestMessagesInRun.args[0];\n\t\t\tassert.deepStrictEqual(proxy.$appendTestMessagesInRun.args[0], [\n\t\t\t\targs[0],\n\t\t\t\targs[1],\n\t\t\t\tnew TestId(['ctrlId', 'id-c']).toString(),\n\t\t\t\t[{\n\t\t\t\t\tmessage: 'some message',\n\t\t\t\t\ttype: TestMessageType.Error,\n\t\t\t\t\texpected: undefined,\n\t\t\t\t\tcontextValue: undefined,\n\t\t\t\t\tactual: undefined,\n\t\t\t\t\tlocation: convert.location.from(message1.location),\n\t\t\t\t\tstackTrace: undefined,\n\t\t\t\t}]\n\t\t\t]);\n\n\t\t\t// should use test location as default\n\t\t\ttask.failed(test2, new TestMessage('some message'));\n\t\t\tassert.deepStrictEqual(proxy.$appendTestMessagesInRun.args[1], [\n\t\t\t\targs[0],\n\t\t\t\targs[1],\n\t\t\t\tnew TestId(['ctrlId', 'id-d']).toString(),\n\t\t\t\t[{\n\t\t\t\t\tmessage: 'some message',\n\t\t\t\t\ttype: TestMessageType.Error,\n\t\t\t\t\tcontextValue: undefined,\n\t\t\t\t\texpected: undefined,\n\t\t\t\t\tactual: undefined,\n\t\t\t\t\tlocation: convert.location.from({ uri: test2.uri!, range: test2.range }),\n\t\t\t\t\tstackTrace: undefined,\n\t\t\t\t}]\n\t\t\t]);\n\n\t\t\ttask.end();\n\t\t});\n\n\t\ttest('guards calls after runs are ended', () => {\n\t\t\tconst task = c.createTestRun(ext, 'ctrl', single, req, 'hello world', false);\n\t\t\ttask.end();\n\n\t\t\ttask.failed(single.root, new TestMessage('some message'));\n\t\t\ttask.appendOutput('output');\n\n\t\t\tassert.strictEqual(proxy.$addTestsToRun.called, false);\n\t\t\tassert.strictEqual(proxy.$appendOutputToRun.called, false);\n\t\t\tassert.strictEqual(proxy.$appendTestMessagesInRun.called, false);\n\t\t});\n\n\t\ttest('sets state of test with identical local IDs (#131827)', () => {\n\t\t\tconst testA = single.root.children.get('id-a');\n\t\t\tconst testB = single.root.children.get('id-b');\n\t\t\tconst childA = new TestItemImpl('ctrlId', 'id-child', 'child', undefined);\n\t\t\ttestA!.children.replace([childA]);\n\t\t\tconst childB = new TestItemImpl('ctrlId', 'id-child', 'child', undefined);\n\t\t\ttestB!.children.replace([childB]);\n\n\t\t\tconst task1 = c.createTestRun(ext, 'ctrl', single, new TestRunRequestImpl(), 'hello world', false);\n\t\t\tconst tracker = Iterable.first(c.trackers)!;\n\n\t\t\ttask1.passed(childA);\n\t\t\ttask1.passed(childB);\n\t\t\tassert.deepStrictEqual(proxy.$addTestsToRun.args, [\n\t\t\t\t[\n\t\t\t\t\t'ctrl',\n\t\t\t\t\ttracker.id,\n\t\t\t\t\t[single.root, testA, childA].map(t => convert.TestItem.from(t as TestItemImpl)),\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t'ctrl',\n\t\t\t\t\ttracker.id,\n\t\t\t\t\t[single.root, testB, childB].map(t => convert.TestItem.from(t as TestItemImpl)),\n\t\t\t\t],\n\t\t\t]);\n\n\t\t\ttask1.end();\n\t\t});\n\t});\n\n\tsuite('service', () => {\n\t\tlet ctrl: TestExtHostTesting;\n\n\t\tclass TestExtHostTesting extends ExtHostTesting {\n\t\t\tpublic getProfileInternalId(ctrl: TestController, profile: TestRunProfile) {\n\t\t\t\tfor (const [id, p] of this.controllers.get(ctrl.id)!.profiles) {\n\t\t\t\t\tif (profile === p) {\n\t\t\t\t\t\treturn id;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tthrow new Error('profile not found');\n\t\t\t}\n\t\t}\n\n\t\tsetup(() => {\n\t\t\tconst rpcProtocol = AnyCallRPCProtocol();\n\t\t\tctrl = ds.add(new TestExtHostTesting(\n\t\t\t\trpcProtocol,\n\t\t\t\tnew NullLogService(),\n\t\t\t\tnew ExtHostCommands(rpcProtocol, new NullLogService(), new class extends mock<IExtHostTelemetry>() {\n\t\t\t\t\toverride onExtensionError(): boolean {\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t}),\n\t\t\t\tnew ExtHostDocumentsAndEditors(rpcProtocol, new NullLogService()),\n\t\t\t));\n\t\t});\n\n\t\ttest('exposes active profiles correctly', async () => {\n\t\t\tconst extA = { ...nullExtensionDescription, identifier: new ExtensionIdentifier('ext.a'), enabledApiProposals: ['testingActiveProfile'] };\n\t\t\tconst extB = { ...nullExtensionDescription, identifier: new ExtensionIdentifier('ext.b'), enabledApiProposals: ['testingActiveProfile'] };\n\n\t\t\tconst ctrlA = ds.add(ctrl.createTestController(extA, 'a', 'ctrla'));\n\t\t\tconst profAA = ds.add(ctrlA.createRunProfile('aa', TestRunProfileKind.Run, () => { }));\n\t\t\tconst profAB = ds.add(ctrlA.createRunProfile('ab', TestRunProfileKind.Run, () => { }));\n\n\t\t\tconst ctrlB = ds.add(ctrl.createTestController(extB, 'b', 'ctrlb'));\n\t\t\tconst profBA = ds.add(ctrlB.createRunProfile('ba', TestRunProfileKind.Run, () => { }));\n\t\t\tconst profBB = ds.add(ctrlB.createRunProfile('bb', TestRunProfileKind.Run, () => { }));\n\t\t\tconst neverCalled = sinon.stub();\n\n\t\t\t// empty default state:\n\t\t\tassert.deepStrictEqual(profAA.isDefault, false);\n\t\t\tassert.deepStrictEqual(profBA.isDefault, false);\n\t\t\tassert.deepStrictEqual(profBB.isDefault, false);\n\n\t\t\t// fires a change event:\n\t\t\tconst changeA = Event.toPromise(profAA.onDidChangeDefault as Event<boolean>);\n\t\t\tconst changeBA = Event.toPromise(profBA.onDidChangeDefault as Event<boolean>);\n\t\t\tconst changeBB = Event.toPromise(profBB.onDidChangeDefault as Event<boolean>);\n\n\t\t\tds.add(profAB.onDidChangeDefault(neverCalled));\n\t\t\tassert.strictEqual(neverCalled.called, false);\n\n\t\t\tctrl.$setDefaultRunProfiles({\n\t\t\t\ta: [ctrl.getProfileInternalId(ctrlA, profAA)],\n\t\t\t\tb: [ctrl.getProfileInternalId(ctrlB, profBA), ctrl.getProfileInternalId(ctrlB, profBB)]\n\t\t\t});\n\n\t\t\tassert.deepStrictEqual(await changeA, true);\n\t\t\tassert.deepStrictEqual(await changeBA, true);\n\t\t\tassert.deepStrictEqual(await changeBB, true);\n\n\t\t\t// updates internal state:\n\t\t\tassert.deepStrictEqual(profAA.isDefault, true);\n\t\t\tassert.deepStrictEqual(profBA.isDefault, true);\n\t\t\tassert.deepStrictEqual(profBB.isDefault, true);\n\t\t\tassert.deepStrictEqual(profAB.isDefault, false);\n\n\t\t\t// no-ops if equal\n\t\t\tds.add(profAA.onDidChangeDefault(neverCalled));\n\t\t\tctrl.$setDefaultRunProfiles({\n\t\t\t\ta: [ctrl.getProfileInternalId(ctrlA, profAA)],\n\t\t\t});\n\t\t\tassert.strictEqual(neverCalled.called, false);\n\t\t});\n\t});\n});\n"],
  "mappings": "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",
  "names": ["ctrl"]
}
