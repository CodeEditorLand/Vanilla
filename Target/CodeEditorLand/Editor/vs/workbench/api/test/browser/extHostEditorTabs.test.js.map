{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/api/test/browser/extHostEditorTabs.test.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport type * as vscode from 'vscode';\nimport assert from 'assert';\nimport { URI } from '../../../../base/common/uri.js';\nimport { mock } from '../../../../base/test/common/mock.js';\nimport { IEditorTabDto, IEditorTabGroupDto, MainThreadEditorTabsShape, TabInputKind, TabModelOperationKind, TextInputDto } from '../../common/extHost.protocol.js';\nimport { ExtHostEditorTabs } from '../../common/extHostEditorTabs.js';\nimport { SingleProxyRPCProtocol } from '../common/testRPCProtocol.js';\nimport { TextMergeTabInput, TextTabInput } from '../../common/extHostTypes.js';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from '../../../../base/test/common/utils.js';\n\nsuite('ExtHostEditorTabs', function () {\n\n\tconst defaultTabDto: IEditorTabDto = {\n\t\tid: 'uniquestring',\n\t\tinput: { kind: TabInputKind.TextInput, uri: URI.parse('file://abc/def.txt') },\n\t\tisActive: true,\n\t\tisDirty: true,\n\t\tisPinned: true,\n\t\tisPreview: false,\n\t\tlabel: 'label1',\n\t};\n\n\tfunction createTabDto(dto?: Partial<IEditorTabDto>): IEditorTabDto {\n\t\treturn { ...defaultTabDto, ...dto };\n\t}\n\n\tconst store = ensureNoDisposablesAreLeakedInTestSuite();\n\n\ttest('Ensure empty model throws when accessing active group', function () {\n\t\tconst extHostEditorTabs = new ExtHostEditorTabs(\n\t\t\tSingleProxyRPCProtocol(new class extends mock<MainThreadEditorTabsShape>() {\n\t\t\t\t// override/implement $moveTab or $closeTab\n\t\t\t})\n\t\t);\n\n\t\tassert.strictEqual(extHostEditorTabs.tabGroups.all.length, 0);\n\t\t// Active group should never be undefined (there is always an active group). Ensure accessing it undefined throws.\n\t\t// TODO @lramos15 Add a throw on the main side when a model is sent without an active group\n\t\tassert.throws(() => extHostEditorTabs.tabGroups.activeTabGroup);\n\t});\n\n\ttest('single tab', function () {\n\n\t\tconst extHostEditorTabs = new ExtHostEditorTabs(\n\t\t\tSingleProxyRPCProtocol(new class extends mock<MainThreadEditorTabsShape>() {\n\t\t\t\t// override/implement $moveTab or $closeTab\n\t\t\t})\n\t\t);\n\n\t\tconst tab: IEditorTabDto = createTabDto({\n\t\t\tid: 'uniquestring',\n\t\t\tisActive: true,\n\t\t\tisDirty: true,\n\t\t\tisPinned: true,\n\t\t\tlabel: 'label1',\n\t\t});\n\n\t\textHostEditorTabs.$acceptEditorTabModel([{\n\t\t\tisActive: true,\n\t\t\tviewColumn: 0,\n\t\t\tgroupId: 12,\n\t\t\ttabs: [tab]\n\t\t}]);\n\t\tassert.strictEqual(extHostEditorTabs.tabGroups.all.length, 1);\n\t\tconst [first] = extHostEditorTabs.tabGroups.all;\n\t\tassert.ok(first.activeTab);\n\t\tassert.strictEqual(first.tabs.indexOf(first.activeTab), 0);\n\n\t\t{\n\t\t\textHostEditorTabs.$acceptEditorTabModel([{\n\t\t\t\tisActive: true,\n\t\t\t\tviewColumn: 0,\n\t\t\t\tgroupId: 12,\n\t\t\t\ttabs: [tab]\n\t\t\t}]);\n\t\t\tassert.strictEqual(extHostEditorTabs.tabGroups.all.length, 1);\n\t\t\tconst [first] = extHostEditorTabs.tabGroups.all;\n\t\t\tassert.ok(first.activeTab);\n\t\t\tassert.strictEqual(first.tabs.indexOf(first.activeTab), 0);\n\t\t}\n\t});\n\n\ttest('Empty tab group', function () {\n\t\tconst extHostEditorTabs = new ExtHostEditorTabs(\n\t\t\tSingleProxyRPCProtocol(new class extends mock<MainThreadEditorTabsShape>() {\n\t\t\t\t// override/implement $moveTab or $closeTab\n\t\t\t})\n\t\t);\n\n\t\textHostEditorTabs.$acceptEditorTabModel([{\n\t\t\tisActive: true,\n\t\t\tviewColumn: 0,\n\t\t\tgroupId: 12,\n\t\t\ttabs: []\n\t\t}]);\n\t\tassert.strictEqual(extHostEditorTabs.tabGroups.all.length, 1);\n\t\tconst [first] = extHostEditorTabs.tabGroups.all;\n\t\tassert.strictEqual(first.activeTab, undefined);\n\t\tassert.strictEqual(first.tabs.length, 0);\n\t});\n\n\ttest('Ensure tabGroup change events fires', function () {\n\t\tconst extHostEditorTabs = new ExtHostEditorTabs(\n\t\t\tSingleProxyRPCProtocol(new class extends mock<MainThreadEditorTabsShape>() {\n\t\t\t\t// override/implement $moveTab or $closeTab\n\t\t\t})\n\t\t);\n\n\t\tlet count = 0;\n\t\tstore.add(extHostEditorTabs.tabGroups.onDidChangeTabGroups(() => count++));\n\n\t\tassert.strictEqual(count, 0);\n\n\t\textHostEditorTabs.$acceptEditorTabModel([{\n\t\t\tisActive: true,\n\t\t\tviewColumn: 0,\n\t\t\tgroupId: 12,\n\t\t\ttabs: []\n\t\t}]);\n\t\tassert.ok(extHostEditorTabs.tabGroups.activeTabGroup);\n\t\tconst activeTabGroup: vscode.TabGroup = extHostEditorTabs.tabGroups.activeTabGroup;\n\t\tassert.strictEqual(extHostEditorTabs.tabGroups.all.length, 1);\n\t\tassert.strictEqual(activeTabGroup.tabs.length, 0);\n\t\tassert.strictEqual(count, 1);\n\t});\n\n\ttest('Check TabGroupChangeEvent properties', function () {\n\t\tconst extHostEditorTabs = new ExtHostEditorTabs(\n\t\t\tSingleProxyRPCProtocol(new class extends mock<MainThreadEditorTabsShape>() {\n\t\t\t\t// override/implement $moveTab or $closeTab\n\t\t\t})\n\t\t);\n\n\t\tconst group1Data: IEditorTabGroupDto = {\n\t\t\tisActive: true,\n\t\t\tviewColumn: 0,\n\t\t\tgroupId: 12,\n\t\t\ttabs: []\n\t\t};\n\t\tconst group2Data: IEditorTabGroupDto = { ...group1Data, groupId: 13 };\n\n\t\tconst events: vscode.TabGroupChangeEvent[] = [];\n\t\tstore.add(extHostEditorTabs.tabGroups.onDidChangeTabGroups(e => events.push(e)));\n\t\t// OPEN\n\t\textHostEditorTabs.$acceptEditorTabModel([group1Data]);\n\t\tassert.deepStrictEqual(events, [{\n\t\t\tchanged: [],\n\t\t\tclosed: [],\n\t\t\topened: [extHostEditorTabs.tabGroups.activeTabGroup]\n\t\t}]);\n\n\t\t// OPEN, CHANGE\n\t\tevents.length = 0;\n\t\textHostEditorTabs.$acceptEditorTabModel([{ ...group1Data, isActive: false }, group2Data]);\n\t\tassert.deepStrictEqual(events, [{\n\t\t\tchanged: [extHostEditorTabs.tabGroups.all[0]],\n\t\t\tclosed: [],\n\t\t\topened: [extHostEditorTabs.tabGroups.all[1]]\n\t\t}]);\n\n\t\t// CHANGE\n\t\tevents.length = 0;\n\t\textHostEditorTabs.$acceptEditorTabModel([group1Data, { ...group2Data, isActive: false }]);\n\t\tassert.deepStrictEqual(events, [{\n\t\t\tchanged: extHostEditorTabs.tabGroups.all,\n\t\t\tclosed: [],\n\t\t\topened: []\n\t\t}]);\n\n\t\t// CLOSE, CHANGE\n\t\tevents.length = 0;\n\t\tconst oldActiveGroup = extHostEditorTabs.tabGroups.activeTabGroup;\n\t\textHostEditorTabs.$acceptEditorTabModel([group2Data]);\n\t\tassert.deepStrictEqual(events, [{\n\t\t\tchanged: extHostEditorTabs.tabGroups.all,\n\t\t\tclosed: [oldActiveGroup],\n\t\t\topened: []\n\t\t}]);\n\t});\n\n\ttest('Ensure reference equality for activeTab and activeGroup', function () {\n\t\tconst extHostEditorTabs = new ExtHostEditorTabs(\n\t\t\tSingleProxyRPCProtocol(new class extends mock<MainThreadEditorTabsShape>() {\n\t\t\t\t// override/implement $moveTab or $closeTab\n\t\t\t})\n\t\t);\n\t\tconst tab = createTabDto({\n\t\t\tid: 'uniquestring',\n\t\t\tisActive: true,\n\t\t\tisDirty: true,\n\t\t\tisPinned: true,\n\t\t\tlabel: 'label1',\n\t\t\teditorId: 'default',\n\t\t});\n\n\t\textHostEditorTabs.$acceptEditorTabModel([{\n\t\t\tisActive: true,\n\t\t\tviewColumn: 0,\n\t\t\tgroupId: 12,\n\t\t\ttabs: [tab]\n\t\t}]);\n\t\tassert.strictEqual(extHostEditorTabs.tabGroups.all.length, 1);\n\t\tconst [first] = extHostEditorTabs.tabGroups.all;\n\t\tassert.ok(first.activeTab);\n\t\tassert.strictEqual(first.tabs.indexOf(first.activeTab), 0);\n\t\tassert.strictEqual(first.activeTab, first.tabs[0]);\n\t\tassert.strictEqual(extHostEditorTabs.tabGroups.activeTabGroup, first);\n\t});\n\n\ttest('TextMergeTabInput surfaces in the UI', function () {\n\n\t\tconst extHostEditorTabs = new ExtHostEditorTabs(\n\t\t\tSingleProxyRPCProtocol(new class extends mock<MainThreadEditorTabsShape>() {\n\t\t\t\t// override/implement $moveTab or $closeTab\n\t\t\t})\n\t\t);\n\n\t\tconst tab: IEditorTabDto = createTabDto({\n\t\t\tinput: {\n\t\t\t\tkind: TabInputKind.TextMergeInput,\n\t\t\t\tbase: URI.from({ scheme: 'test', path: 'base' }),\n\t\t\t\tinput1: URI.from({ scheme: 'test', path: 'input1' }),\n\t\t\t\tinput2: URI.from({ scheme: 'test', path: 'input2' }),\n\t\t\t\tresult: URI.from({ scheme: 'test', path: 'result' }),\n\t\t\t}\n\t\t});\n\n\t\textHostEditorTabs.$acceptEditorTabModel([{\n\t\t\tisActive: true,\n\t\t\tviewColumn: 0,\n\t\t\tgroupId: 12,\n\t\t\ttabs: [tab]\n\t\t}]);\n\t\tassert.strictEqual(extHostEditorTabs.tabGroups.all.length, 1);\n\t\tconst [first] = extHostEditorTabs.tabGroups.all;\n\t\tassert.ok(first.activeTab);\n\t\tassert.strictEqual(first.tabs.indexOf(first.activeTab), 0);\n\t\tassert.ok(first.activeTab.input instanceof TextMergeTabInput);\n\t});\n\n\ttest('Ensure reference stability', function () {\n\n\t\tconst extHostEditorTabs = new ExtHostEditorTabs(\n\t\t\tSingleProxyRPCProtocol(new class extends mock<MainThreadEditorTabsShape>() {\n\t\t\t\t// override/implement $moveTab or $closeTab\n\t\t\t})\n\t\t);\n\t\tconst tabDto = createTabDto();\n\n\t\t// single dirty tab\n\n\t\textHostEditorTabs.$acceptEditorTabModel([{\n\t\t\tisActive: true,\n\t\t\tviewColumn: 0,\n\t\t\tgroupId: 12,\n\t\t\ttabs: [tabDto]\n\t\t}]);\n\t\tlet all = extHostEditorTabs.tabGroups.all.map(group => group.tabs).flat();\n\t\tassert.strictEqual(all.length, 1);\n\t\tconst apiTab1 = all[0];\n\t\tassert.ok(apiTab1.input instanceof TextTabInput);\n\t\tassert.strictEqual(tabDto.input.kind, TabInputKind.TextInput);\n\t\tconst dtoResource = (tabDto.input as TextInputDto).uri;\n\t\tassert.strictEqual(apiTab1.input.uri.toString(), URI.revive(dtoResource).toString());\n\t\tassert.strictEqual(apiTab1.isDirty, true);\n\n\n\t\t// NOT DIRTY anymore\n\n\t\tconst tabDto2: IEditorTabDto = { ...tabDto, isDirty: false };\n\t\t// Accept a simple update\n\t\textHostEditorTabs.$acceptTabOperation({\n\t\t\tkind: TabModelOperationKind.TAB_UPDATE,\n\t\t\tindex: 0,\n\t\t\ttabDto: tabDto2,\n\t\t\tgroupId: 12\n\t\t});\n\n\t\tall = extHostEditorTabs.tabGroups.all.map(group => group.tabs).flat();\n\t\tassert.strictEqual(all.length, 1);\n\t\tconst apiTab2 = all[0];\n\t\tassert.ok(apiTab1.input instanceof TextTabInput);\n\t\tassert.strictEqual(apiTab1.input.uri.toString(), URI.revive(dtoResource).toString());\n\t\tassert.strictEqual(apiTab2.isDirty, false);\n\n\t\tassert.strictEqual(apiTab1 === apiTab2, true);\n\t});\n\n\ttest('Tab.isActive working', function () {\n\n\t\tconst extHostEditorTabs = new ExtHostEditorTabs(\n\t\t\tSingleProxyRPCProtocol(new class extends mock<MainThreadEditorTabsShape>() {\n\t\t\t\t// override/implement $moveTab or $closeTab\n\t\t\t})\n\t\t);\n\t\tconst tabDtoAAA = createTabDto({\n\t\t\tid: 'AAA',\n\t\t\tisActive: true,\n\t\t\tisDirty: true,\n\t\t\tisPinned: true,\n\t\t\tlabel: 'label1',\n\t\t\tinput: { kind: TabInputKind.TextInput, uri: URI.parse('file://abc/AAA.txt') },\n\t\t\teditorId: 'default'\n\t\t});\n\n\t\tconst tabDtoBBB = createTabDto({\n\t\t\tid: 'BBB',\n\t\t\tisActive: false,\n\t\t\tisDirty: true,\n\t\t\tisPinned: true,\n\t\t\tlabel: 'label1',\n\t\t\tinput: { kind: TabInputKind.TextInput, uri: URI.parse('file://abc/BBB.txt') },\n\t\t\teditorId: 'default'\n\t\t});\n\n\t\t// single dirty tab\n\n\t\textHostEditorTabs.$acceptEditorTabModel([{\n\t\t\tisActive: true,\n\t\t\tviewColumn: 0,\n\t\t\tgroupId: 12,\n\t\t\ttabs: [tabDtoAAA, tabDtoBBB]\n\t\t}]);\n\n\t\tconst all = extHostEditorTabs.tabGroups.all.map(group => group.tabs).flat();\n\t\tassert.strictEqual(all.length, 2);\n\n\t\tconst activeTab1 = extHostEditorTabs.tabGroups.activeTabGroup?.activeTab;\n\t\tassert.ok(activeTab1?.input instanceof TextTabInput);\n\t\tassert.strictEqual(tabDtoAAA.input.kind, TabInputKind.TextInput);\n\t\tconst dtoAAAResource = (tabDtoAAA.input as TextInputDto).uri;\n\t\tassert.strictEqual(activeTab1?.input?.uri.toString(), URI.revive(dtoAAAResource)?.toString());\n\t\tassert.strictEqual(activeTab1?.isActive, true);\n\n\t\textHostEditorTabs.$acceptTabOperation({\n\t\t\tgroupId: 12,\n\t\t\tindex: 1,\n\t\t\tkind: TabModelOperationKind.TAB_UPDATE,\n\t\t\ttabDto: { ...tabDtoBBB, isActive: true } /// BBB is now active\n\t\t});\n\n\t\tconst activeTab2 = extHostEditorTabs.tabGroups.activeTabGroup?.activeTab;\n\t\tassert.ok(activeTab2?.input instanceof TextTabInput);\n\t\tassert.strictEqual(tabDtoBBB.input.kind, TabInputKind.TextInput);\n\t\tconst dtoBBBResource = (tabDtoBBB.input as TextInputDto).uri;\n\t\tassert.strictEqual(activeTab2?.input?.uri.toString(), URI.revive(dtoBBBResource)?.toString());\n\t\tassert.strictEqual(activeTab2?.isActive, true);\n\t\tassert.strictEqual(activeTab1?.isActive, false);\n\t});\n\n\ttest('vscode.window.tagGroups is immutable', function () {\n\n\t\tconst extHostEditorTabs = new ExtHostEditorTabs(\n\t\t\tSingleProxyRPCProtocol(new class extends mock<MainThreadEditorTabsShape>() {\n\t\t\t\t// override/implement $moveTab or $closeTab\n\t\t\t})\n\t\t);\n\n\t\tassert.throws(() => {\n\t\t\t// @ts-expect-error write to readonly prop\n\t\t\textHostEditorTabs.tabGroups.activeTabGroup = undefined;\n\t\t});\n\t\tassert.throws(() => {\n\t\t\t// @ts-expect-error write to readonly prop\n\t\t\textHostEditorTabs.tabGroups.all.length = 0;\n\t\t});\n\t\tassert.throws(() => {\n\t\t\t// @ts-expect-error write to readonly prop\n\t\t\textHostEditorTabs.tabGroups.onDidChangeActiveTabGroup = undefined;\n\t\t});\n\t\tassert.throws(() => {\n\t\t\t// @ts-expect-error write to readonly prop\n\t\t\textHostEditorTabs.tabGroups.onDidChangeTabGroups = undefined;\n\t\t});\n\t});\n\n\ttest('Ensure close is called with all tab ids', function () {\n\t\tconst closedTabIds: string[][] = [];\n\t\tconst extHostEditorTabs = new ExtHostEditorTabs(\n\t\t\tSingleProxyRPCProtocol(new class extends mock<MainThreadEditorTabsShape>() {\n\t\t\t\t// override/implement $moveTab or $closeTab\n\t\t\t\toverride async $closeTab(tabIds: string[], preserveFocus?: boolean) {\n\t\t\t\t\tclosedTabIds.push(tabIds);\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t})\n\t\t);\n\t\tconst tab: IEditorTabDto = createTabDto({\n\t\t\tid: 'uniquestring',\n\t\t\tisActive: true,\n\t\t\tisDirty: true,\n\t\t\tisPinned: true,\n\t\t\tlabel: 'label1',\n\t\t\teditorId: 'default'\n\t\t});\n\n\t\textHostEditorTabs.$acceptEditorTabModel([{\n\t\t\tisActive: true,\n\t\t\tviewColumn: 0,\n\t\t\tgroupId: 12,\n\t\t\ttabs: [tab]\n\t\t}]);\n\t\tassert.strictEqual(extHostEditorTabs.tabGroups.all.length, 1);\n\t\tconst activeTab = extHostEditorTabs.tabGroups.activeTabGroup?.activeTab;\n\t\tassert.ok(activeTab);\n\t\textHostEditorTabs.tabGroups.close(activeTab, false);\n\t\tassert.strictEqual(closedTabIds.length, 1);\n\t\tassert.deepStrictEqual(closedTabIds[0], ['uniquestring']);\n\t\t// Close with array\n\t\textHostEditorTabs.tabGroups.close([activeTab], false);\n\t\tassert.strictEqual(closedTabIds.length, 2);\n\t\tassert.deepStrictEqual(closedTabIds[1], ['uniquestring']);\n\t});\n\n\ttest('Update tab only sends tab change event', async function () {\n\t\tconst closedTabIds: string[][] = [];\n\t\tconst extHostEditorTabs = new ExtHostEditorTabs(\n\t\t\tSingleProxyRPCProtocol(new class extends mock<MainThreadEditorTabsShape>() {\n\t\t\t\t// override/implement $moveTab or $closeTab\n\t\t\t\toverride async $closeTab(tabIds: string[], preserveFocus?: boolean) {\n\t\t\t\t\tclosedTabIds.push(tabIds);\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t})\n\t\t);\n\t\tconst tabDto: IEditorTabDto = createTabDto({\n\t\t\tid: 'uniquestring',\n\t\t\tisActive: true,\n\t\t\tisDirty: true,\n\t\t\tisPinned: true,\n\t\t\tlabel: 'label1',\n\t\t\teditorId: 'default'\n\t\t});\n\n\t\textHostEditorTabs.$acceptEditorTabModel([{\n\t\t\tisActive: true,\n\t\t\tviewColumn: 0,\n\t\t\tgroupId: 12,\n\t\t\ttabs: [tabDto]\n\t\t}]);\n\n\t\tassert.strictEqual(extHostEditorTabs.tabGroups.all.length, 1);\n\t\tassert.strictEqual(extHostEditorTabs.tabGroups.all.map(g => g.tabs).flat().length, 1);\n\n\t\tconst tab = extHostEditorTabs.tabGroups.all[0].tabs[0];\n\n\n\t\tconst p = new Promise<vscode.TabChangeEvent>(resolve => store.add(extHostEditorTabs.tabGroups.onDidChangeTabs(resolve)));\n\n\t\textHostEditorTabs.$acceptTabOperation({\n\t\t\tgroupId: 12,\n\t\t\tindex: 0,\n\t\t\tkind: TabModelOperationKind.TAB_UPDATE,\n\t\t\ttabDto: { ...tabDto, label: 'NEW LABEL' }\n\t\t});\n\n\t\tconst changedTab = (await p).changed[0];\n\n\t\tassert.ok(tab === changedTab);\n\t\tassert.strictEqual(changedTab.label, 'NEW LABEL');\n\n\t});\n\n\ttest('Active tab', function () {\n\n\t\tconst extHostEditorTabs = new ExtHostEditorTabs(\n\t\t\tSingleProxyRPCProtocol(new class extends mock<MainThreadEditorTabsShape>() {\n\t\t\t\t// override/implement $moveTab or $closeTab\n\t\t\t})\n\t\t);\n\n\t\tconst tab1: IEditorTabDto = createTabDto({\n\t\t\tid: 'uniquestring',\n\t\t\tisActive: true,\n\t\t\tisDirty: true,\n\t\t\tisPinned: true,\n\t\t\tlabel: 'label1',\n\t\t});\n\n\t\tconst tab2: IEditorTabDto = createTabDto({\n\t\t\tisActive: false,\n\t\t\tid: 'uniquestring2',\n\t\t});\n\n\t\tconst tab3: IEditorTabDto = createTabDto({\n\t\t\tisActive: false,\n\t\t\tid: 'uniquestring3',\n\t\t});\n\n\t\textHostEditorTabs.$acceptEditorTabModel([{\n\t\t\tisActive: true,\n\t\t\tviewColumn: 0,\n\t\t\tgroupId: 12,\n\t\t\ttabs: [tab1, tab2, tab3]\n\t\t}]);\n\n\t\tassert.strictEqual(extHostEditorTabs.tabGroups.all.length, 1);\n\t\tassert.strictEqual(extHostEditorTabs.tabGroups.all.map(g => g.tabs).flat().length, 3);\n\n\t\t// Active tab is correct\n\t\tassert.strictEqual(extHostEditorTabs.tabGroups.activeTabGroup?.activeTab, extHostEditorTabs.tabGroups.activeTabGroup?.tabs[0]);\n\n\t\t// Switching active tab works\n\t\ttab1.isActive = false;\n\t\ttab2.isActive = true;\n\t\textHostEditorTabs.$acceptTabOperation({\n\t\t\tgroupId: 12,\n\t\t\tindex: 0,\n\t\t\tkind: TabModelOperationKind.TAB_UPDATE,\n\t\t\ttabDto: tab1\n\t\t});\n\t\textHostEditorTabs.$acceptTabOperation({\n\t\t\tgroupId: 12,\n\t\t\tindex: 1,\n\t\t\tkind: TabModelOperationKind.TAB_UPDATE,\n\t\t\ttabDto: tab2\n\t\t});\n\t\tassert.strictEqual(extHostEditorTabs.tabGroups.activeTabGroup?.activeTab, extHostEditorTabs.tabGroups.activeTabGroup?.tabs[1]);\n\n\t\t//Closing tabs out works\n\t\ttab3.isActive = true;\n\t\textHostEditorTabs.$acceptEditorTabModel([{\n\t\t\tisActive: true,\n\t\t\tviewColumn: 0,\n\t\t\tgroupId: 12,\n\t\t\ttabs: [tab3]\n\t\t}]);\n\t\tassert.strictEqual(extHostEditorTabs.tabGroups.all.length, 1);\n\t\tassert.strictEqual(extHostEditorTabs.tabGroups.all.map(g => g.tabs).flat().length, 1);\n\t\tassert.strictEqual(extHostEditorTabs.tabGroups.activeTabGroup?.activeTab, extHostEditorTabs.tabGroups.activeTabGroup?.tabs[0]);\n\n\t\t// Closing out all tabs returns undefine active tab\n\t\textHostEditorTabs.$acceptEditorTabModel([{\n\t\t\tisActive: true,\n\t\t\tviewColumn: 0,\n\t\t\tgroupId: 12,\n\t\t\ttabs: []\n\t\t}]);\n\t\tassert.strictEqual(extHostEditorTabs.tabGroups.all.length, 1);\n\t\tassert.strictEqual(extHostEditorTabs.tabGroups.all.map(g => g.tabs).flat().length, 0);\n\t\tassert.strictEqual(extHostEditorTabs.tabGroups.activeTabGroup?.activeTab, undefined);\n\t});\n\n\ttest('Tab operations patches open and close correctly', function () {\n\t\tconst extHostEditorTabs = new ExtHostEditorTabs(\n\t\t\tSingleProxyRPCProtocol(new class extends mock<MainThreadEditorTabsShape>() {\n\t\t\t\t// override/implement $moveTab or $closeTab\n\t\t\t})\n\t\t);\n\n\t\tconst tab1: IEditorTabDto = createTabDto({\n\t\t\tid: 'uniquestring',\n\t\t\tisActive: true,\n\t\t\tlabel: 'label1',\n\t\t});\n\n\t\tconst tab2: IEditorTabDto = createTabDto({\n\t\t\tisActive: false,\n\t\t\tid: 'uniquestring2',\n\t\t\tlabel: 'label2',\n\t\t});\n\n\t\tconst tab3: IEditorTabDto = createTabDto({\n\t\t\tisActive: false,\n\t\t\tid: 'uniquestring3',\n\t\t\tlabel: 'label3',\n\t\t});\n\n\t\textHostEditorTabs.$acceptEditorTabModel([{\n\t\t\tisActive: true,\n\t\t\tviewColumn: 0,\n\t\t\tgroupId: 12,\n\t\t\ttabs: [tab1, tab2, tab3]\n\t\t}]);\n\n\t\tassert.strictEqual(extHostEditorTabs.tabGroups.all.length, 1);\n\t\tassert.strictEqual(extHostEditorTabs.tabGroups.all.map(g => g.tabs).flat().length, 3);\n\n\t\t// Close tab 2\n\t\textHostEditorTabs.$acceptTabOperation({\n\t\t\tgroupId: 12,\n\t\t\tindex: 1,\n\t\t\tkind: TabModelOperationKind.TAB_CLOSE,\n\t\t\ttabDto: tab2\n\t\t});\n\t\tassert.strictEqual(extHostEditorTabs.tabGroups.all.length, 1);\n\t\tassert.strictEqual(extHostEditorTabs.tabGroups.all.map(g => g.tabs).flat().length, 2);\n\n\t\t// Close active tab and update tab 3 to be active\n\t\textHostEditorTabs.$acceptTabOperation({\n\t\t\tgroupId: 12,\n\t\t\tindex: 0,\n\t\t\tkind: TabModelOperationKind.TAB_CLOSE,\n\t\t\ttabDto: tab1\n\t\t});\n\t\tassert.strictEqual(extHostEditorTabs.tabGroups.all.length, 1);\n\t\tassert.strictEqual(extHostEditorTabs.tabGroups.all.map(g => g.tabs).flat().length, 1);\n\t\ttab3.isActive = true;\n\t\textHostEditorTabs.$acceptTabOperation({\n\t\t\tgroupId: 12,\n\t\t\tindex: 0,\n\t\t\tkind: TabModelOperationKind.TAB_UPDATE,\n\t\t\ttabDto: tab3\n\t\t});\n\t\tassert.strictEqual(extHostEditorTabs.tabGroups.all.length, 1);\n\t\tassert.strictEqual(extHostEditorTabs.tabGroups.all.map(g => g.tabs).flat().length, 1);\n\t\tassert.strictEqual(extHostEditorTabs.tabGroups.all[0]?.activeTab?.label, 'label3');\n\n\t\t// Open tab 2 back\n\t\textHostEditorTabs.$acceptTabOperation({\n\t\t\tgroupId: 12,\n\t\t\tindex: 1,\n\t\t\tkind: TabModelOperationKind.TAB_OPEN,\n\t\t\ttabDto: tab2\n\t\t});\n\t\tassert.strictEqual(extHostEditorTabs.tabGroups.all.length, 1);\n\t\tassert.strictEqual(extHostEditorTabs.tabGroups.all.map(g => g.tabs).flat().length, 2);\n\t\tassert.strictEqual(extHostEditorTabs.tabGroups.all[0]?.tabs[1]?.label, 'label2');\n\t});\n\n\ttest('Tab operations patches move correctly', function () {\n\t\tconst extHostEditorTabs = new ExtHostEditorTabs(\n\t\t\tSingleProxyRPCProtocol(new class extends mock<MainThreadEditorTabsShape>() {\n\t\t\t\t// override/implement $moveTab or $closeTab\n\t\t\t})\n\t\t);\n\n\t\tconst tab1: IEditorTabDto = createTabDto({\n\t\t\tid: 'uniquestring',\n\t\t\tisActive: true,\n\t\t\tlabel: 'label1',\n\t\t});\n\n\t\tconst tab2: IEditorTabDto = createTabDto({\n\t\t\tisActive: false,\n\t\t\tid: 'uniquestring2',\n\t\t\tlabel: 'label2',\n\t\t});\n\n\t\tconst tab3: IEditorTabDto = createTabDto({\n\t\t\tisActive: false,\n\t\t\tid: 'uniquestring3',\n\t\t\tlabel: 'label3',\n\t\t});\n\n\t\textHostEditorTabs.$acceptEditorTabModel([{\n\t\t\tisActive: true,\n\t\t\tviewColumn: 0,\n\t\t\tgroupId: 12,\n\t\t\ttabs: [tab1, tab2, tab3]\n\t\t}]);\n\n\t\tassert.strictEqual(extHostEditorTabs.tabGroups.all.length, 1);\n\t\tassert.strictEqual(extHostEditorTabs.tabGroups.all.map(g => g.tabs).flat().length, 3);\n\n\t\t// Move tab 2 to index 0\n\t\textHostEditorTabs.$acceptTabOperation({\n\t\t\tgroupId: 12,\n\t\t\tindex: 0,\n\t\t\toldIndex: 1,\n\t\t\tkind: TabModelOperationKind.TAB_MOVE,\n\t\t\ttabDto: tab2\n\t\t});\n\t\tassert.strictEqual(extHostEditorTabs.tabGroups.all.length, 1);\n\t\tassert.strictEqual(extHostEditorTabs.tabGroups.all.map(g => g.tabs).flat().length, 3);\n\t\tassert.strictEqual(extHostEditorTabs.tabGroups.all[0]?.tabs[0]?.label, 'label2');\n\n\t\t// Move tab 3 to index 1\n\t\textHostEditorTabs.$acceptTabOperation({\n\t\t\tgroupId: 12,\n\t\t\tindex: 1,\n\t\t\toldIndex: 2,\n\t\t\tkind: TabModelOperationKind.TAB_MOVE,\n\t\t\ttabDto: tab3\n\t\t});\n\t\tassert.strictEqual(extHostEditorTabs.tabGroups.all.length, 1);\n\t\tassert.strictEqual(extHostEditorTabs.tabGroups.all.map(g => g.tabs).flat().length, 3);\n\t\tassert.strictEqual(extHostEditorTabs.tabGroups.all[0]?.tabs[1]?.label, 'label3');\n\t\tassert.strictEqual(extHostEditorTabs.tabGroups.all[0]?.tabs[0]?.label, 'label2');\n\t\tassert.strictEqual(extHostEditorTabs.tabGroups.all[0]?.tabs[2]?.label, 'label1');\n\t});\n});\n"],
  "mappings": "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",
  "names": ["first"]
}
