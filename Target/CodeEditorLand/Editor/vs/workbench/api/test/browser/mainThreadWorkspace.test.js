import t from"assert";import{CancellationToken as l}from"../../../../base/common/cancellation.js";import{ensureNoDisposablesAreLeakedInTestSuite as d}from"../../../../base/test/common/utils.js";import{IConfigurationService as f}from"../../../../platform/configuration/common/configuration.js";import"../../../../platform/configuration/test/common/testConfigurationService.js";import"../../../../platform/instantiation/test/common/instantiationServiceMock.js";import{MainThreadWorkspace as n}from"../../browser/mainThreadWorkspace.js";import{SingleProxyRPCProtocol as u}from"../common/testRPCProtocol.js";import{ISearchService as o}from"../../../services/search/common/search.js";import{workbenchInstantiationService as m}from"../../../test/browser/workbenchTestServices.js";import{URI as g}from"../../../../base/common/uri.js";suite("MainThreadWorkspace",()=>{const i=d();let s,r;setup(()=>{r=m(void 0,i),s=r.get(f),s.setUserConfiguration("search",{})}),test("simple",()=>(r.stub(o,{fileSearch(e){return t.strictEqual(e.folderQueries.length,1),t.strictEqual(e.folderQueries[0].disregardIgnoreFiles,!0),t.deepStrictEqual({...e.includePattern},{foo:!0}),t.strictEqual(e.maxResults,10),Promise.resolve({results:[],messages:[]})}}),i.add(r.createInstance(n,u({$initializeWorkspace:()=>{}}))).$startFileSearch(null,{maxResults:10,includePattern:"foo",disregardSearchExcludeSettings:!0},l.None))),test("exclude defaults",()=>(s.setUserConfiguration("search",{exclude:{searchExclude:!0}}),s.setUserConfiguration("files",{exclude:{filesExclude:!0}}),r.stub(o,{fileSearch(e){return t.strictEqual(e.folderQueries.length,1),t.strictEqual(e.folderQueries[0].disregardIgnoreFiles,!0),t.strictEqual(e.folderQueries[0].excludePattern?.length,1),t.deepStrictEqual(e.folderQueries[0].excludePattern[0].pattern,{filesExclude:!0}),Promise.resolve({results:[],messages:[]})}}),i.add(r.createInstance(n,u({$initializeWorkspace:()=>{}}))).$startFileSearch(null,{maxResults:10,includePattern:"",disregardSearchExcludeSettings:!0},l.None))),test("disregard excludes",()=>(s.setUserConfiguration("search",{exclude:{searchExclude:!0}}),s.setUserConfiguration("files",{exclude:{filesExclude:!0}}),r.stub(o,{fileSearch(e){return t.deepStrictEqual(e.folderQueries[0].excludePattern,[]),t.deepStrictEqual(e.excludePattern,void 0),Promise.resolve({results:[],messages:[]})}}),i.add(r.createInstance(n,u({$initializeWorkspace:()=>{}}))).$startFileSearch(null,{maxResults:10,includePattern:"",disregardSearchExcludeSettings:!0,disregardExcludeSettings:!0},l.None))),test("do not disregard anything if disregardExcludeSettings is true",()=>(s.setUserConfiguration("search",{exclude:{searchExclude:!0}}),s.setUserConfiguration("files",{exclude:{filesExclude:!0}}),r.stub(o,{fileSearch(e){return t.strictEqual(e.folderQueries.length,1),t.strictEqual(e.folderQueries[0].disregardIgnoreFiles,!0),t.deepStrictEqual(e.folderQueries[0].excludePattern,[]),Promise.resolve({results:[],messages:[]})}}),i.add(r.createInstance(n,u({$initializeWorkspace:()=>{}}))).$startFileSearch(null,{maxResults:10,includePattern:"",disregardExcludeSettings:!0,disregardSearchExcludeSettings:!1},l.None))),test("exclude string",()=>(r.stub(o,{fileSearch(e){return t.deepStrictEqual(e.folderQueries[0].excludePattern,[]),t.deepStrictEqual({...e.excludePattern},{"exclude/**":!0}),Promise.resolve({results:[],messages:[]})}}),i.add(r.createInstance(n,u({$initializeWorkspace:()=>{}}))).$startFileSearch(null,{maxResults:10,includePattern:"",excludePattern:[{pattern:"exclude/**"}],disregardSearchExcludeSettings:!0},l.None))),test("Valid revived URI after moving to EH",()=>{const a={scheme:"test",path:"/Users/username/Downloads"};return r.stub(o,{fileSearch(c){return t.strictEqual(c.folderQueries?.length,1),t.ok(g.isUri(c.folderQueries[0].folder)),t.strictEqual(c.folderQueries[0].folder.path,"/Users/username/Downloads"),t.strictEqual(c.folderQueries[0].folder.scheme,"test"),Promise.resolve({results:[],messages:[]})}}),i.add(r.createInstance(n,u({$initializeWorkspace:()=>{}}))).$startFileSearch(a,{filePattern:"*.md"},l.None)})});
