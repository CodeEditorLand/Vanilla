import*as w from"../../../../nls.js";import d from"assert";import{mock as I}from"../../../../base/test/common/mock.js";import{ensureNoDisposablesAreLeakedInTestSuite as f}from"../../../../base/test/common/utils.js";import{SyncDescriptor as g}from"../../../../platform/instantiation/common/descriptors.js";import"../../../../platform/instantiation/test/common/instantiationServiceMock.js";import{NullLogService as h}from"../../../../platform/log/common/log.js";import{TestNotificationService as y}from"../../../../platform/notification/test/common/testNotificationService.js";import{Registry as p}from"../../../../platform/registry/common/platform.js";import{MainThreadTreeViews as S}from"../../browser/mainThreadTreeViews.js";import"../../common/extHost.protocol.js";import{CustomTreeView as x}from"../../../browser/parts/views/treeView.js";import{Extensions as V,IViewDescriptorService as v,TreeItemCollapsibleState as T,ViewContainerLocation as C}from"../../../common/views.js";import"../../../services/extensions/common/extHostCustomers.js";import{ExtensionHostKind as D}from"../../../services/extensions/common/extensionHostKind.js";import{ViewDescriptorService as E}from"../../../services/views/browser/viewDescriptorService.js";import{TestViewsService as H,workbenchInstantiationService as b}from"../../../test/browser/workbenchTestServices.js";import{TestExtensionService as R}from"../../../test/common/workbenchTestServices.js";suite("MainThreadHostTreeView",function(){const o="testTreeView",n="customValue",r=p.as(V.ViewsRegistry);class u extends I(){async $getChildren(t,m){return[{handle:"testItem1",collapsibleState:T.Expanded,customProp:n}]}async $hasResolve(){return!1}$setVisible(){}}let i,a,c;teardown(()=>{r.deregisterViews(r.getViews(i),i)});const s=f();setup(async()=>{const e=b(void 0,s),t=s.add(e.createInstance(E));e.stub(v,t),i=p.as(V.ViewContainersRegistry).registerViewContainer({id:"testContainer",title:w.localize2("test","test"),ctorDescriptor:new g({})},C.Sidebar);const m={id:o,ctorDescriptor:null,name:w.localize2("Test View 1","Test View 1"),treeView:s.add(e.createInstance(x,"testTree","Test Title","extension.id"))};r.registerViews([m],i);const l=new R;c=new u,a=s.add(new S(new class{remoteAuthority="";extensionHostKind=D.LocalProcess;dispose(){}assertRegistered(){}set(M){return null}getProxy(){return c}drain(){return null}},new H,new y,l,new h)),a.$registerTreeViewDataProvider(o,{showCollapseAll:!1,canSelectMany:!1,dropMimeTypes:[],dragMimeTypes:[],hasHandleDrag:!1,hasHandleDrop:!1,manuallyManageCheckboxes:!1}),await l.whenInstalledExtensionsRegistered()}),test("getChildren keeps custom properties",async()=>{const t=await r.getView(o).treeView.dataProvider?.getChildren({handle:"root",collapsibleState:T.Expanded});d(t.length===1,"Exactly one child should be returned"),d(t[0].customProp===n,"Tree Items should keep custom properties")})});
