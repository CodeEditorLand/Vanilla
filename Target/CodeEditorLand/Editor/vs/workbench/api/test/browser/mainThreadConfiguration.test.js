import i from"assert";import*as d from"sinon";import{URI as f}from"../../../../base/common/uri.js";import{Registry as C}from"../../../../platform/registry/common/platform.js";import{Extensions as l,ConfigurationScope as p}from"../../../../platform/configuration/common/configurationRegistry.js";import{IWorkspaceContextService as r,WorkbenchState as a}from"../../../../platform/workspace/common/workspace.js";import{TestInstantiationService as w}from"../../../../platform/instantiation/test/common/instantiationServiceMock.js";import{MainThreadConfiguration as u}from"../../browser/mainThreadConfiguration.js";import{SingleProxyRPCProtocol as s}from"../common/testRPCProtocol.js";import{IConfigurationService as g,ConfigurationTarget as e}from"../../../../platform/configuration/common/configuration.js";import{WorkspaceService as O}from"../../../services/configuration/browser/configurationService.js";import{IEnvironmentService as b}from"../../../../platform/environment/common/environment.js";suite("MainThreadConfiguration",function(){const n={$initializeConfiguration:()=>{}};let t,o;suiteSetup(()=>{C.as(l.Configuration).registerConfiguration({id:"extHostConfiguration",title:"a",type:"object",properties:{"extHostConfiguration.resource":{description:"extHostConfiguration.resource",type:"boolean",default:!0,scope:p.RESOURCE},"extHostConfiguration.window":{description:"extHostConfiguration.resource",type:"boolean",default:!0,scope:p.WINDOW}}})}),setup(()=>{o=d.spy(),t=new w,t.stub(g,O),t.stub(g,"onDidUpdateConfiguration",d.mock()),t.stub(g,"onDidChangeConfiguration",d.mock()),t.stub(g,"updateValue",o),t.stub(b,{isBuilt:!1})}),teardown(()=>{t.dispose()}),test("update resource configuration without configuration target defaults to workspace in multi root workspace when no resource is provided",function(){t.stub(r,{getWorkbenchState:()=>a.WORKSPACE}),t.createInstance(u,s(n)).$updateConfigurationOption(null,"extHostConfiguration.resource","value",void 0,void 0),i.strictEqual(e.WORKSPACE,o.args[0][3])}),test("update resource configuration without configuration target defaults to workspace in folder workspace when resource is provider",function(){t.stub(r,{getWorkbenchState:()=>a.FOLDER}),t.createInstance(u,s(n)).$updateConfigurationOption(null,"extHostConfiguration.resource","value",{resource:f.file("abc")},void 0),i.strictEqual(e.WORKSPACE,o.args[0][3])}),test("update resource configuration without configuration target defaults to workspace in folder workspace when no resource is provider",function(){t.stub(r,{getWorkbenchState:()=>a.FOLDER}),t.createInstance(u,s(n)).$updateConfigurationOption(null,"extHostConfiguration.resource","value",void 0,void 0),i.strictEqual(e.WORKSPACE,o.args[0][3])}),test("update window configuration without configuration target defaults to workspace in multi root workspace when no resource is provided",function(){t.stub(r,{getWorkbenchState:()=>a.WORKSPACE}),t.createInstance(u,s(n)).$updateConfigurationOption(null,"extHostConfiguration.window","value",void 0,void 0),i.strictEqual(e.WORKSPACE,o.args[0][3])}),test("update window configuration without configuration target defaults to workspace in multi root workspace when resource is provided",function(){t.stub(r,{getWorkbenchState:()=>a.WORKSPACE}),t.createInstance(u,s(n)).$updateConfigurationOption(null,"extHostConfiguration.window","value",{resource:f.file("abc")},void 0),i.strictEqual(e.WORKSPACE,o.args[0][3])}),test("update window configuration without configuration target defaults to workspace in folder workspace when resource is provider",function(){t.stub(r,{getWorkbenchState:()=>a.FOLDER}),t.createInstance(u,s(n)).$updateConfigurationOption(null,"extHostConfiguration.window","value",{resource:f.file("abc")},void 0),i.strictEqual(e.WORKSPACE,o.args[0][3])}),test("update window configuration without configuration target defaults to workspace in folder workspace when no resource is provider",function(){t.stub(r,{getWorkbenchState:()=>a.FOLDER}),t.createInstance(u,s(n)).$updateConfigurationOption(null,"extHostConfiguration.window","value",void 0,void 0),i.strictEqual(e.WORKSPACE,o.args[0][3])}),test("update resource configuration without configuration target defaults to folder",function(){t.stub(r,{getWorkbenchState:()=>a.WORKSPACE}),t.createInstance(u,s(n)).$updateConfigurationOption(null,"extHostConfiguration.resource","value",{resource:f.file("abc")},void 0),i.strictEqual(e.WORKSPACE_FOLDER,o.args[0][3])}),test("update configuration with user configuration target",function(){t.stub(r,{getWorkbenchState:()=>a.FOLDER}),t.createInstance(u,s(n)).$updateConfigurationOption(e.USER,"extHostConfiguration.window","value",{resource:f.file("abc")},void 0),i.strictEqual(e.USER,o.args[0][3])}),test("update configuration with workspace configuration target",function(){t.stub(r,{getWorkbenchState:()=>a.FOLDER}),t.createInstance(u,s(n)).$updateConfigurationOption(e.WORKSPACE,"extHostConfiguration.window","value",{resource:f.file("abc")},void 0),i.strictEqual(e.WORKSPACE,o.args[0][3])}),test("update configuration with folder configuration target",function(){t.stub(r,{getWorkbenchState:()=>a.FOLDER}),t.createInstance(u,s(n)).$updateConfigurationOption(e.WORKSPACE_FOLDER,"extHostConfiguration.window","value",{resource:f.file("abc")},void 0),i.strictEqual(e.WORKSPACE_FOLDER,o.args[0][3])}),test("remove resource configuration without configuration target defaults to workspace in multi root workspace when no resource is provided",function(){t.stub(r,{getWorkbenchState:()=>a.WORKSPACE}),t.createInstance(u,s(n)).$removeConfigurationOption(null,"extHostConfiguration.resource",void 0,void 0),i.strictEqual(e.WORKSPACE,o.args[0][3])}),test("remove resource configuration without configuration target defaults to workspace in folder workspace when resource is provider",function(){t.stub(r,{getWorkbenchState:()=>a.FOLDER}),t.createInstance(u,s(n)).$removeConfigurationOption(null,"extHostConfiguration.resource",{resource:f.file("abc")},void 0),i.strictEqual(e.WORKSPACE,o.args[0][3])}),test("remove resource configuration without configuration target defaults to workspace in folder workspace when no resource is provider",function(){t.stub(r,{getWorkbenchState:()=>a.FOLDER}),t.createInstance(u,s(n)).$removeConfigurationOption(null,"extHostConfiguration.resource",void 0,void 0),i.strictEqual(e.WORKSPACE,o.args[0][3])}),test("remove window configuration without configuration target defaults to workspace in multi root workspace when no resource is provided",function(){t.stub(r,{getWorkbenchState:()=>a.WORKSPACE}),t.createInstance(u,s(n)).$removeConfigurationOption(null,"extHostConfiguration.window",void 0,void 0),i.strictEqual(e.WORKSPACE,o.args[0][3])}),test("remove window configuration without configuration target defaults to workspace in multi root workspace when resource is provided",function(){t.stub(r,{getWorkbenchState:()=>a.WORKSPACE}),t.createInstance(u,s(n)).$removeConfigurationOption(null,"extHostConfiguration.window",{resource:f.file("abc")},void 0),i.strictEqual(e.WORKSPACE,o.args[0][3])}),test("remove window configuration without configuration target defaults to workspace in folder workspace when resource is provider",function(){t.stub(r,{getWorkbenchState:()=>a.FOLDER}),t.createInstance(u,s(n)).$removeConfigurationOption(null,"extHostConfiguration.window",{resource:f.file("abc")},void 0),i.strictEqual(e.WORKSPACE,o.args[0][3])}),test("remove window configuration without configuration target defaults to workspace in folder workspace when no resource is provider",function(){t.stub(r,{getWorkbenchState:()=>a.FOLDER}),t.createInstance(u,s(n)).$removeConfigurationOption(null,"extHostConfiguration.window",void 0,void 0),i.strictEqual(e.WORKSPACE,o.args[0][3])}),test("remove configuration without configuration target defaults to folder",function(){t.stub(r,{getWorkbenchState:()=>a.WORKSPACE}),t.createInstance(u,s(n)).$removeConfigurationOption(null,"extHostConfiguration.resource",{resource:f.file("abc")},void 0),i.strictEqual(e.WORKSPACE_FOLDER,o.args[0][3])})});
