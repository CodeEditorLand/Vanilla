{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/api/test/browser/mainThreadConfiguration.test.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport assert from 'assert';\nimport * as sinon from 'sinon';\nimport { URI } from '../../../../base/common/uri.js';\nimport { Registry } from '../../../../platform/registry/common/platform.js';\nimport { Extensions, IConfigurationRegistry, ConfigurationScope } from '../../../../platform/configuration/common/configurationRegistry.js';\nimport { IWorkspaceContextService, WorkbenchState } from '../../../../platform/workspace/common/workspace.js';\nimport { TestInstantiationService } from '../../../../platform/instantiation/test/common/instantiationServiceMock.js';\nimport { MainThreadConfiguration } from '../../browser/mainThreadConfiguration.js';\nimport { SingleProxyRPCProtocol } from '../common/testRPCProtocol.js';\nimport { IConfigurationService, ConfigurationTarget } from '../../../../platform/configuration/common/configuration.js';\nimport { WorkspaceService } from '../../../services/configuration/browser/configurationService.js';\nimport { IEnvironmentService } from '../../../../platform/environment/common/environment.js';\n\nsuite('MainThreadConfiguration', function () {\n\n\tconst proxy = {\n\t\t$initializeConfiguration: () => { }\n\t};\n\tlet instantiationService: TestInstantiationService;\n\tlet target: sinon.SinonSpy;\n\n\tsuiteSetup(() => {\n\t\tRegistry.as<IConfigurationRegistry>(Extensions.Configuration).registerConfiguration({\n\t\t\t'id': 'extHostConfiguration',\n\t\t\t'title': 'a',\n\t\t\t'type': 'object',\n\t\t\t'properties': {\n\t\t\t\t'extHostConfiguration.resource': {\n\t\t\t\t\t'description': 'extHostConfiguration.resource',\n\t\t\t\t\t'type': 'boolean',\n\t\t\t\t\t'default': true,\n\t\t\t\t\t'scope': ConfigurationScope.RESOURCE\n\t\t\t\t},\n\t\t\t\t'extHostConfiguration.window': {\n\t\t\t\t\t'description': 'extHostConfiguration.resource',\n\t\t\t\t\t'type': 'boolean',\n\t\t\t\t\t'default': true,\n\t\t\t\t\t'scope': ConfigurationScope.WINDOW\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t});\n\n\tsetup(() => {\n\t\ttarget = sinon.spy();\n\n\t\tinstantiationService = new TestInstantiationService();\n\t\tinstantiationService.stub(IConfigurationService, WorkspaceService);\n\t\tinstantiationService.stub(IConfigurationService, 'onDidUpdateConfiguration', sinon.mock());\n\t\tinstantiationService.stub(IConfigurationService, 'onDidChangeConfiguration', sinon.mock());\n\t\tinstantiationService.stub(IConfigurationService, 'updateValue', target);\n\t\tinstantiationService.stub(IEnvironmentService, {\n\t\t\tisBuilt: false\n\t\t});\n\t});\n\n\tteardown(() => {\n\t\tinstantiationService.dispose();\n\t});\n\n\ttest('update resource configuration without configuration target defaults to workspace in multi root workspace when no resource is provided', function () {\n\t\tinstantiationService.stub(IWorkspaceContextService, <IWorkspaceContextService>{ getWorkbenchState: () => WorkbenchState.WORKSPACE });\n\t\tconst testObject: MainThreadConfiguration = instantiationService.createInstance(MainThreadConfiguration, SingleProxyRPCProtocol(proxy));\n\n\t\ttestObject.$updateConfigurationOption(null, 'extHostConfiguration.resource', 'value', undefined, undefined);\n\n\t\tassert.strictEqual(ConfigurationTarget.WORKSPACE, target.args[0][3]);\n\t});\n\n\ttest('update resource configuration without configuration target defaults to workspace in folder workspace when resource is provider', function () {\n\t\tinstantiationService.stub(IWorkspaceContextService, <IWorkspaceContextService>{ getWorkbenchState: () => WorkbenchState.FOLDER });\n\t\tconst testObject: MainThreadConfiguration = instantiationService.createInstance(MainThreadConfiguration, SingleProxyRPCProtocol(proxy));\n\n\t\ttestObject.$updateConfigurationOption(null, 'extHostConfiguration.resource', 'value', { resource: URI.file('abc') }, undefined);\n\n\t\tassert.strictEqual(ConfigurationTarget.WORKSPACE, target.args[0][3]);\n\t});\n\n\ttest('update resource configuration without configuration target defaults to workspace in folder workspace when no resource is provider', function () {\n\t\tinstantiationService.stub(IWorkspaceContextService, <IWorkspaceContextService>{ getWorkbenchState: () => WorkbenchState.FOLDER });\n\t\tconst testObject: MainThreadConfiguration = instantiationService.createInstance(MainThreadConfiguration, SingleProxyRPCProtocol(proxy));\n\n\t\ttestObject.$updateConfigurationOption(null, 'extHostConfiguration.resource', 'value', undefined, undefined);\n\n\t\tassert.strictEqual(ConfigurationTarget.WORKSPACE, target.args[0][3]);\n\t});\n\n\ttest('update window configuration without configuration target defaults to workspace in multi root workspace when no resource is provided', function () {\n\t\tinstantiationService.stub(IWorkspaceContextService, <IWorkspaceContextService>{ getWorkbenchState: () => WorkbenchState.WORKSPACE });\n\t\tconst testObject: MainThreadConfiguration = instantiationService.createInstance(MainThreadConfiguration, SingleProxyRPCProtocol(proxy));\n\n\t\ttestObject.$updateConfigurationOption(null, 'extHostConfiguration.window', 'value', undefined, undefined);\n\n\t\tassert.strictEqual(ConfigurationTarget.WORKSPACE, target.args[0][3]);\n\t});\n\n\ttest('update window configuration without configuration target defaults to workspace in multi root workspace when resource is provided', function () {\n\t\tinstantiationService.stub(IWorkspaceContextService, <IWorkspaceContextService>{ getWorkbenchState: () => WorkbenchState.WORKSPACE });\n\t\tconst testObject: MainThreadConfiguration = instantiationService.createInstance(MainThreadConfiguration, SingleProxyRPCProtocol(proxy));\n\n\t\ttestObject.$updateConfigurationOption(null, 'extHostConfiguration.window', 'value', { resource: URI.file('abc') }, undefined);\n\n\t\tassert.strictEqual(ConfigurationTarget.WORKSPACE, target.args[0][3]);\n\t});\n\n\ttest('update window configuration without configuration target defaults to workspace in folder workspace when resource is provider', function () {\n\t\tinstantiationService.stub(IWorkspaceContextService, <IWorkspaceContextService>{ getWorkbenchState: () => WorkbenchState.FOLDER });\n\t\tconst testObject: MainThreadConfiguration = instantiationService.createInstance(MainThreadConfiguration, SingleProxyRPCProtocol(proxy));\n\n\t\ttestObject.$updateConfigurationOption(null, 'extHostConfiguration.window', 'value', { resource: URI.file('abc') }, undefined);\n\n\t\tassert.strictEqual(ConfigurationTarget.WORKSPACE, target.args[0][3]);\n\t});\n\n\ttest('update window configuration without configuration target defaults to workspace in folder workspace when no resource is provider', function () {\n\t\tinstantiationService.stub(IWorkspaceContextService, <IWorkspaceContextService>{ getWorkbenchState: () => WorkbenchState.FOLDER });\n\t\tconst testObject: MainThreadConfiguration = instantiationService.createInstance(MainThreadConfiguration, SingleProxyRPCProtocol(proxy));\n\n\t\ttestObject.$updateConfigurationOption(null, 'extHostConfiguration.window', 'value', undefined, undefined);\n\n\t\tassert.strictEqual(ConfigurationTarget.WORKSPACE, target.args[0][3]);\n\t});\n\n\ttest('update resource configuration without configuration target defaults to folder', function () {\n\t\tinstantiationService.stub(IWorkspaceContextService, <IWorkspaceContextService>{ getWorkbenchState: () => WorkbenchState.WORKSPACE });\n\t\tconst testObject: MainThreadConfiguration = instantiationService.createInstance(MainThreadConfiguration, SingleProxyRPCProtocol(proxy));\n\n\t\ttestObject.$updateConfigurationOption(null, 'extHostConfiguration.resource', 'value', { resource: URI.file('abc') }, undefined);\n\n\t\tassert.strictEqual(ConfigurationTarget.WORKSPACE_FOLDER, target.args[0][3]);\n\t});\n\n\ttest('update configuration with user configuration target', function () {\n\t\tinstantiationService.stub(IWorkspaceContextService, <IWorkspaceContextService>{ getWorkbenchState: () => WorkbenchState.FOLDER });\n\t\tconst testObject: MainThreadConfiguration = instantiationService.createInstance(MainThreadConfiguration, SingleProxyRPCProtocol(proxy));\n\n\t\ttestObject.$updateConfigurationOption(ConfigurationTarget.USER, 'extHostConfiguration.window', 'value', { resource: URI.file('abc') }, undefined);\n\n\t\tassert.strictEqual(ConfigurationTarget.USER, target.args[0][3]);\n\t});\n\n\ttest('update configuration with workspace configuration target', function () {\n\t\tinstantiationService.stub(IWorkspaceContextService, <IWorkspaceContextService>{ getWorkbenchState: () => WorkbenchState.FOLDER });\n\t\tconst testObject: MainThreadConfiguration = instantiationService.createInstance(MainThreadConfiguration, SingleProxyRPCProtocol(proxy));\n\n\t\ttestObject.$updateConfigurationOption(ConfigurationTarget.WORKSPACE, 'extHostConfiguration.window', 'value', { resource: URI.file('abc') }, undefined);\n\n\t\tassert.strictEqual(ConfigurationTarget.WORKSPACE, target.args[0][3]);\n\t});\n\n\ttest('update configuration with folder configuration target', function () {\n\t\tinstantiationService.stub(IWorkspaceContextService, <IWorkspaceContextService>{ getWorkbenchState: () => WorkbenchState.FOLDER });\n\t\tconst testObject: MainThreadConfiguration = instantiationService.createInstance(MainThreadConfiguration, SingleProxyRPCProtocol(proxy));\n\n\t\ttestObject.$updateConfigurationOption(ConfigurationTarget.WORKSPACE_FOLDER, 'extHostConfiguration.window', 'value', { resource: URI.file('abc') }, undefined);\n\n\t\tassert.strictEqual(ConfigurationTarget.WORKSPACE_FOLDER, target.args[0][3]);\n\t});\n\n\ttest('remove resource configuration without configuration target defaults to workspace in multi root workspace when no resource is provided', function () {\n\t\tinstantiationService.stub(IWorkspaceContextService, <IWorkspaceContextService>{ getWorkbenchState: () => WorkbenchState.WORKSPACE });\n\t\tconst testObject: MainThreadConfiguration = instantiationService.createInstance(MainThreadConfiguration, SingleProxyRPCProtocol(proxy));\n\n\t\ttestObject.$removeConfigurationOption(null, 'extHostConfiguration.resource', undefined, undefined);\n\n\t\tassert.strictEqual(ConfigurationTarget.WORKSPACE, target.args[0][3]);\n\t});\n\n\ttest('remove resource configuration without configuration target defaults to workspace in folder workspace when resource is provider', function () {\n\t\tinstantiationService.stub(IWorkspaceContextService, <IWorkspaceContextService>{ getWorkbenchState: () => WorkbenchState.FOLDER });\n\t\tconst testObject: MainThreadConfiguration = instantiationService.createInstance(MainThreadConfiguration, SingleProxyRPCProtocol(proxy));\n\n\t\ttestObject.$removeConfigurationOption(null, 'extHostConfiguration.resource', { resource: URI.file('abc') }, undefined);\n\n\t\tassert.strictEqual(ConfigurationTarget.WORKSPACE, target.args[0][3]);\n\t});\n\n\ttest('remove resource configuration without configuration target defaults to workspace in folder workspace when no resource is provider', function () {\n\t\tinstantiationService.stub(IWorkspaceContextService, <IWorkspaceContextService>{ getWorkbenchState: () => WorkbenchState.FOLDER });\n\t\tconst testObject: MainThreadConfiguration = instantiationService.createInstance(MainThreadConfiguration, SingleProxyRPCProtocol(proxy));\n\n\t\ttestObject.$removeConfigurationOption(null, 'extHostConfiguration.resource', undefined, undefined);\n\n\t\tassert.strictEqual(ConfigurationTarget.WORKSPACE, target.args[0][3]);\n\t});\n\n\ttest('remove window configuration without configuration target defaults to workspace in multi root workspace when no resource is provided', function () {\n\t\tinstantiationService.stub(IWorkspaceContextService, <IWorkspaceContextService>{ getWorkbenchState: () => WorkbenchState.WORKSPACE });\n\t\tconst testObject: MainThreadConfiguration = instantiationService.createInstance(MainThreadConfiguration, SingleProxyRPCProtocol(proxy));\n\n\t\ttestObject.$removeConfigurationOption(null, 'extHostConfiguration.window', undefined, undefined);\n\n\t\tassert.strictEqual(ConfigurationTarget.WORKSPACE, target.args[0][3]);\n\t});\n\n\ttest('remove window configuration without configuration target defaults to workspace in multi root workspace when resource is provided', function () {\n\t\tinstantiationService.stub(IWorkspaceContextService, <IWorkspaceContextService>{ getWorkbenchState: () => WorkbenchState.WORKSPACE });\n\t\tconst testObject: MainThreadConfiguration = instantiationService.createInstance(MainThreadConfiguration, SingleProxyRPCProtocol(proxy));\n\n\t\ttestObject.$removeConfigurationOption(null, 'extHostConfiguration.window', { resource: URI.file('abc') }, undefined);\n\n\t\tassert.strictEqual(ConfigurationTarget.WORKSPACE, target.args[0][3]);\n\t});\n\n\ttest('remove window configuration without configuration target defaults to workspace in folder workspace when resource is provider', function () {\n\t\tinstantiationService.stub(IWorkspaceContextService, <IWorkspaceContextService>{ getWorkbenchState: () => WorkbenchState.FOLDER });\n\t\tconst testObject: MainThreadConfiguration = instantiationService.createInstance(MainThreadConfiguration, SingleProxyRPCProtocol(proxy));\n\n\t\ttestObject.$removeConfigurationOption(null, 'extHostConfiguration.window', { resource: URI.file('abc') }, undefined);\n\n\t\tassert.strictEqual(ConfigurationTarget.WORKSPACE, target.args[0][3]);\n\t});\n\n\ttest('remove window configuration without configuration target defaults to workspace in folder workspace when no resource is provider', function () {\n\t\tinstantiationService.stub(IWorkspaceContextService, <IWorkspaceContextService>{ getWorkbenchState: () => WorkbenchState.FOLDER });\n\t\tconst testObject: MainThreadConfiguration = instantiationService.createInstance(MainThreadConfiguration, SingleProxyRPCProtocol(proxy));\n\n\t\ttestObject.$removeConfigurationOption(null, 'extHostConfiguration.window', undefined, undefined);\n\n\t\tassert.strictEqual(ConfigurationTarget.WORKSPACE, target.args[0][3]);\n\t});\n\n\ttest('remove configuration without configuration target defaults to folder', function () {\n\t\tinstantiationService.stub(IWorkspaceContextService, <IWorkspaceContextService>{ getWorkbenchState: () => WorkbenchState.WORKSPACE });\n\t\tconst testObject: MainThreadConfiguration = instantiationService.createInstance(MainThreadConfiguration, SingleProxyRPCProtocol(proxy));\n\n\t\ttestObject.$removeConfigurationOption(null, 'extHostConfiguration.resource', { resource: URI.file('abc') }, undefined);\n\n\t\tassert.strictEqual(ConfigurationTarget.WORKSPACE_FOLDER, target.args[0][3]);\n\t});\n});\n"],
  "mappings": "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",
  "names": []
}
