{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/api/test/browser/extHostWebview.test.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport assert from 'assert';\nimport { DisposableStore } from '../../../../base/common/lifecycle.js';\nimport { Schemas } from '../../../../base/common/network.js';\nimport { URI } from '../../../../base/common/uri.js';\nimport { mock } from '../../../../base/test/common/mock.js';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from '../../../../base/test/common/utils.js';\nimport { IExtensionDescription } from '../../../../platform/extensions/common/extensions.js';\nimport { NullLogService } from '../../../../platform/log/common/log.js';\nimport { MainThreadWebviewManager } from '../../browser/mainThreadWebviewManager.js';\nimport { NullApiDeprecationService } from '../../common/extHostApiDeprecationService.js';\nimport { IExtHostRpcService } from '../../common/extHostRpcService.js';\nimport { ExtHostWebviews } from '../../common/extHostWebview.js';\nimport { ExtHostWebviewPanels } from '../../common/extHostWebviewPanels.js';\nimport { SingleProxyRPCProtocol } from '../common/testRPCProtocol.js';\nimport { decodeAuthority, webviewResourceBaseHost } from '../../../contrib/webview/common/webview.js';\nimport { EditorGroupColumn } from '../../../services/editor/common/editorGroupColumn.js';\nimport { IExtHostContext } from '../../../services/extensions/common/extHostCustomers.js';\nimport type * as vscode from 'vscode';\n\nsuite('ExtHostWebview', () => {\n\tlet disposables: DisposableStore;\n\tlet rpcProtocol: (IExtHostRpcService & IExtHostContext) | undefined;\n\n\tsetup(() => {\n\t\tdisposables = new DisposableStore();\n\n\t\tconst shape = createNoopMainThreadWebviews();\n\t\trpcProtocol = SingleProxyRPCProtocol(shape);\n\t});\n\n\tteardown(() => {\n\t\tdisposables.dispose();\n\t});\n\n\tensureNoDisposablesAreLeakedInTestSuite();\n\n\tfunction createWebview(rpcProtocol: (IExtHostRpcService & IExtHostContext) | undefined, remoteAuthority: string | undefined) {\n\t\tconst extHostWebviews = disposables.add(new ExtHostWebviews(rpcProtocol!, {\n\t\t\tauthority: remoteAuthority,\n\t\t\tisRemote: !!remoteAuthority,\n\t\t}, undefined, new NullLogService(), NullApiDeprecationService));\n\n\t\tconst extHostWebviewPanels = disposables.add(new ExtHostWebviewPanels(rpcProtocol!, extHostWebviews, undefined));\n\n\t\treturn disposables.add(extHostWebviewPanels.createWebviewPanel({\n\t\t\textensionLocation: URI.from({\n\t\t\t\tscheme: remoteAuthority ? Schemas.vscodeRemote : Schemas.file,\n\t\t\t\tauthority: remoteAuthority,\n\t\t\t\tpath: '/ext/path',\n\t\t\t})\n\t\t} as IExtensionDescription, 'type', 'title', 1, {}));\n\t}\n\n\ttest('Cannot register multiple serializers for the same view type', async () => {\n\t\tconst viewType = 'view.type';\n\n\t\tconst extHostWebviews = disposables.add(new ExtHostWebviews(rpcProtocol!, { authority: undefined, isRemote: false }, undefined, new NullLogService(), NullApiDeprecationService));\n\n\t\tconst extHostWebviewPanels = disposables.add(new ExtHostWebviewPanels(rpcProtocol!, extHostWebviews, undefined));\n\n\t\tlet lastInvokedDeserializer: vscode.WebviewPanelSerializer | undefined = undefined;\n\n\t\tclass NoopSerializer implements vscode.WebviewPanelSerializer {\n\t\t\tasync deserializeWebviewPanel(webview: vscode.WebviewPanel, _state: any): Promise<void> {\n\t\t\t\tlastInvokedDeserializer = this;\n\t\t\t\tdisposables.add(webview);\n\t\t\t}\n\t\t}\n\n\t\tconst extension = {} as IExtensionDescription;\n\n\t\tconst serializerA = new NoopSerializer();\n\t\tconst serializerB = new NoopSerializer();\n\n\t\tconst serializerARegistration = extHostWebviewPanels.registerWebviewPanelSerializer(extension, viewType, serializerA);\n\n\t\tawait extHostWebviewPanels.$deserializeWebviewPanel('x', viewType, {\n\t\t\ttitle: 'title',\n\t\t\tstate: {},\n\t\t\tpanelOptions: {},\n\t\t\twebviewOptions: {},\n\t\t\tactive: true,\n\t\t}, 0 as EditorGroupColumn);\n\t\tassert.strictEqual(lastInvokedDeserializer, serializerA);\n\n\t\tassert.throws(\n\t\t\t() => disposables.add(extHostWebviewPanels.registerWebviewPanelSerializer(extension, viewType, serializerB)),\n\t\t\t'Should throw when registering two serializers for the same view');\n\n\t\tserializerARegistration.dispose();\n\n\t\tdisposables.add(extHostWebviewPanels.registerWebviewPanelSerializer(extension, viewType, serializerB));\n\n\t\tawait extHostWebviewPanels.$deserializeWebviewPanel('x', viewType, {\n\t\t\ttitle: 'title',\n\t\t\tstate: {},\n\t\t\tpanelOptions: {},\n\t\t\twebviewOptions: {},\n\t\t\tactive: true,\n\t\t}, 0 as EditorGroupColumn);\n\t\tassert.strictEqual(lastInvokedDeserializer, serializerB);\n\t});\n\n\ttest('asWebviewUri for local file paths', () => {\n\t\tconst webview = createWebview(rpcProtocol, /* remoteAuthority */undefined);\n\n\t\tassert.strictEqual(\n\t\t\t(webview.webview.asWebviewUri(URI.parse('file:///Users/codey/file.html')).toString()),\n\t\t\t`https://file%2B.vscode-resource.${webviewResourceBaseHost}/Users/codey/file.html`,\n\t\t\t'Unix basic'\n\t\t);\n\n\t\tassert.strictEqual(\n\t\t\t(webview.webview.asWebviewUri(URI.parse('file:///Users/codey/file.html#frag')).toString()),\n\t\t\t`https://file%2B.vscode-resource.${webviewResourceBaseHost}/Users/codey/file.html#frag`,\n\t\t\t'Unix should preserve fragment'\n\t\t);\n\n\t\tassert.strictEqual(\n\t\t\t(webview.webview.asWebviewUri(URI.parse('file:///Users/codey/f%20ile.html')).toString()),\n\t\t\t`https://file%2B.vscode-resource.${webviewResourceBaseHost}/Users/codey/f%20ile.html`,\n\t\t\t'Unix with encoding'\n\t\t);\n\n\t\tassert.strictEqual(\n\t\t\t(webview.webview.asWebviewUri(URI.parse('file://localhost/Users/codey/file.html')).toString()),\n\t\t\t`https://file%2Blocalhost.vscode-resource.${webviewResourceBaseHost}/Users/codey/file.html`,\n\t\t\t'Unix should preserve authority'\n\t\t);\n\n\t\tassert.strictEqual(\n\t\t\t(webview.webview.asWebviewUri(URI.parse('file:///c:/codey/file.txt')).toString()),\n\t\t\t`https://file%2B.vscode-resource.${webviewResourceBaseHost}/c%3A/codey/file.txt`,\n\t\t\t'Windows C drive'\n\t\t);\n\t});\n\n\ttest('asWebviewUri for remote file paths', () => {\n\t\tconst webview = createWebview(rpcProtocol, /* remoteAuthority */ 'remote');\n\n\t\tassert.strictEqual(\n\t\t\t(webview.webview.asWebviewUri(URI.parse('file:///Users/codey/file.html')).toString()),\n\t\t\t`https://vscode-remote%2Bremote.vscode-resource.${webviewResourceBaseHost}/Users/codey/file.html`,\n\t\t\t'Unix basic'\n\t\t);\n\t});\n\n\ttest('asWebviewUri for remote with / and + in name', () => {\n\t\tconst webview = createWebview(rpcProtocol, /* remoteAuthority */ 'remote');\n\t\tconst authority = 'ssh-remote+localhost=foo/bar';\n\n\t\tconst sourceUri = URI.from({\n\t\t\tscheme: 'vscode-remote',\n\t\t\tauthority: authority,\n\t\t\tpath: '/Users/cody/x.png'\n\t\t});\n\n\t\tconst webviewUri = webview.webview.asWebviewUri(sourceUri);\n\t\tassert.strictEqual(\n\t\t\twebviewUri.toString(),\n\t\t\t`https://vscode-remote%2Bssh-002dremote-002blocalhost-003dfoo-002fbar.vscode-resource.vscode-cdn.net/Users/cody/x.png`,\n\t\t\t'Check transform');\n\n\t\tassert.strictEqual(\n\t\t\tdecodeAuthority(webviewUri.authority),\n\t\t\t`vscode-remote+${authority}.vscode-resource.vscode-cdn.net`,\n\t\t\t'Check decoded authority'\n\t\t);\n\t});\n\n\ttest('asWebviewUri for remote with port in name', () => {\n\t\tconst webview = createWebview(rpcProtocol, /* remoteAuthority */ 'remote');\n\t\tconst authority = 'localhost:8080';\n\n\t\tconst sourceUri = URI.from({\n\t\t\tscheme: 'vscode-remote',\n\t\t\tauthority: authority,\n\t\t\tpath: '/Users/cody/x.png'\n\t\t});\n\n\t\tconst webviewUri = webview.webview.asWebviewUri(sourceUri);\n\t\tassert.strictEqual(\n\t\t\twebviewUri.toString(),\n\t\t\t`https://vscode-remote%2Blocalhost-003a8080.vscode-resource.vscode-cdn.net/Users/cody/x.png`,\n\t\t\t'Check transform');\n\n\t\tassert.strictEqual(\n\t\t\tdecodeAuthority(webviewUri.authority),\n\t\t\t`vscode-remote+${authority}.vscode-resource.vscode-cdn.net`,\n\t\t\t'Check decoded authority'\n\t\t);\n\t});\n});\n\n\nfunction createNoopMainThreadWebviews() {\n\treturn new class extends mock<MainThreadWebviewManager>() {\n\t\t$disposeWebview() { /* noop */ }\n\t\t$createWebviewPanel() { /* noop */ }\n\t\t$registerSerializer() { /* noop */ }\n\t\t$unregisterSerializer() { /* noop */ }\n\t};\n}\n"],
  "mappings": "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",
  "names": ["rpcProtocol"]
}
