{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/api/test/browser/mainThreadCommands.test.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport assert from 'assert';\nimport { MainThreadCommands } from '../../browser/mainThreadCommands.js';\nimport { CommandsRegistry, ICommandService } from '../../../../platform/commands/common/commands.js';\nimport { SingleProxyRPCProtocol } from '../common/testRPCProtocol.js';\nimport { IExtensionService } from '../../../services/extensions/common/extensions.js';\nimport { mock } from '../../../../base/test/common/mock.js';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from '../../../../base/test/common/utils.js';\n\nsuite('MainThreadCommands', function () {\n\n\tensureNoDisposablesAreLeakedInTestSuite();\n\n\ttest('dispose on unregister', function () {\n\n\t\tconst commands = new MainThreadCommands(SingleProxyRPCProtocol(null), undefined!, new class extends mock<IExtensionService>() { });\n\t\tassert.strictEqual(CommandsRegistry.getCommand('foo'), undefined);\n\n\t\t// register\n\t\tcommands.$registerCommand('foo');\n\t\tassert.ok(CommandsRegistry.getCommand('foo'));\n\n\t\t// unregister\n\t\tcommands.$unregisterCommand('foo');\n\t\tassert.strictEqual(CommandsRegistry.getCommand('foo'), undefined);\n\n\t\tcommands.dispose();\n\n\t});\n\n\ttest('unregister all on dispose', function () {\n\n\t\tconst commands = new MainThreadCommands(SingleProxyRPCProtocol(null), undefined!, new class extends mock<IExtensionService>() { });\n\t\tassert.strictEqual(CommandsRegistry.getCommand('foo'), undefined);\n\n\t\tcommands.$registerCommand('foo');\n\t\tcommands.$registerCommand('bar');\n\n\t\tassert.ok(CommandsRegistry.getCommand('foo'));\n\t\tassert.ok(CommandsRegistry.getCommand('bar'));\n\n\t\tcommands.dispose();\n\n\t\tassert.strictEqual(CommandsRegistry.getCommand('foo'), undefined);\n\t\tassert.strictEqual(CommandsRegistry.getCommand('bar'), undefined);\n\t});\n\n\ttest('activate and throw when needed', async function () {\n\n\t\tconst activations: string[] = [];\n\t\tconst runs: string[] = [];\n\n\t\tconst commands = new MainThreadCommands(\n\t\t\tSingleProxyRPCProtocol(null),\n\t\t\tnew class extends mock<ICommandService>() {\n\t\t\t\toverride executeCommand<T>(id: string): Promise<T | undefined> {\n\t\t\t\t\truns.push(id);\n\t\t\t\t\treturn Promise.resolve(undefined);\n\t\t\t\t}\n\t\t\t},\n\t\t\tnew class extends mock<IExtensionService>() {\n\t\t\t\toverride activateByEvent(id: string) {\n\t\t\t\t\tactivations.push(id);\n\t\t\t\t\treturn Promise.resolve();\n\t\t\t\t}\n\t\t\t}\n\t\t);\n\n\t\t// case 1: arguments and retry\n\t\ttry {\n\t\t\tactivations.length = 0;\n\t\t\tawait commands.$executeCommand('bazz', [1, 2, { n: 3 }], true);\n\t\t\tassert.ok(false);\n\t\t} catch (e) {\n\t\t\tassert.deepStrictEqual(activations, ['onCommand:bazz']);\n\t\t\tassert.strictEqual((<Error>e).message, '$executeCommand:retry');\n\t\t}\n\n\t\t// case 2: no arguments and retry\n\t\truns.length = 0;\n\t\tawait commands.$executeCommand('bazz', [], true);\n\t\tassert.deepStrictEqual(runs, ['bazz']);\n\n\t\t// case 3: arguments and no retry\n\t\truns.length = 0;\n\t\tawait commands.$executeCommand('bazz', [1, 2, true], false);\n\t\tassert.deepStrictEqual(runs, ['bazz']);\n\n\t\tcommands.dispose();\n\t});\n});\n"],
  "mappings": "AAKA,OAAO,YAAY;AACnB,SAAS,0BAA0B;AACnC,SAAS,kBAAkB,uBAAuB;AAClD,SAAS,8BAA8B;AACvC,SAAS,yBAAyB;AAClC,SAAS,YAAY;AACrB,SAAS,+CAA+C;AAExD,MAAM,sBAAsB,WAAY;AAEvC,0CAAwC;AAExC,OAAK,yBAAyB,WAAY;AAEzC,UAAM,WAAW,IAAI,mBAAmB,uBAAuB,IAAI,GAAG,QAAY,IAAI,cAAc,KAAwB,EAAE;AAAA,IAAE,GAAC;AACjI,WAAO,YAAY,iBAAiB,WAAW,KAAK,GAAG,MAAS;AAGhE,aAAS,iBAAiB,KAAK;AAC/B,WAAO,GAAG,iBAAiB,WAAW,KAAK,CAAC;AAG5C,aAAS,mBAAmB,KAAK;AACjC,WAAO,YAAY,iBAAiB,WAAW,KAAK,GAAG,MAAS;AAEhE,aAAS,QAAQ;AAAA,EAElB,CAAC;AAED,OAAK,6BAA6B,WAAY;AAE7C,UAAM,WAAW,IAAI,mBAAmB,uBAAuB,IAAI,GAAG,QAAY,IAAI,cAAc,KAAwB,EAAE;AAAA,IAAE,GAAC;AACjI,WAAO,YAAY,iBAAiB,WAAW,KAAK,GAAG,MAAS;AAEhE,aAAS,iBAAiB,KAAK;AAC/B,aAAS,iBAAiB,KAAK;AAE/B,WAAO,GAAG,iBAAiB,WAAW,KAAK,CAAC;AAC5C,WAAO,GAAG,iBAAiB,WAAW,KAAK,CAAC;AAE5C,aAAS,QAAQ;AAEjB,WAAO,YAAY,iBAAiB,WAAW,KAAK,GAAG,MAAS;AAChE,WAAO,YAAY,iBAAiB,WAAW,KAAK,GAAG,MAAS;AAAA,EACjE,CAAC;AAED,OAAK,kCAAkC,iBAAkB;AAExD,UAAM,cAAwB,CAAC;AAC/B,UAAM,OAAiB,CAAC;AAExB,UAAM,WAAW,IAAI;AAAA,MACpB,uBAAuB,IAAI;AAAA,MAC3B,IAAI,cAAc,KAAsB,EAAE;AAAA,QAChC,eAAkB,IAAoC;AAC9D,eAAK,KAAK,EAAE;AACZ,iBAAO,QAAQ,QAAQ,MAAS;AAAA,QACjC;AAAA,MACD;AAAA,MACA,IAAI,cAAc,KAAwB,EAAE;AAAA,QAClC,gBAAgB,IAAY;AACpC,sBAAY,KAAK,EAAE;AACnB,iBAAO,QAAQ,QAAQ;AAAA,QACxB;AAAA,MACD;AAAA,IACD;AAGA,QAAI;AACH,kBAAY,SAAS;AACrB,YAAM,SAAS,gBAAgB,QAAQ,CAAC,GAAG,GAAG,EAAE,GAAG,EAAE,CAAC,GAAG,IAAI;AAC7D,aAAO,GAAG,KAAK;AAAA,IAChB,SAAS,GAAG;AACX,aAAO,gBAAgB,aAAa,CAAC,gBAAgB,CAAC;AACtD,aAAO,YAAoB,EAAG,SAAS,uBAAuB;AAAA,IAC/D;AAGA,SAAK,SAAS;AACd,UAAM,SAAS,gBAAgB,QAAQ,CAAC,GAAG,IAAI;AAC/C,WAAO,gBAAgB,MAAM,CAAC,MAAM,CAAC;AAGrC,SAAK,SAAS;AACd,UAAM,SAAS,gBAAgB,QAAQ,CAAC,GAAG,GAAG,IAAI,GAAG,KAAK;AAC1D,WAAO,gBAAgB,MAAM,CAAC,MAAM,CAAC;AAErC,aAAS,QAAQ;AAAA,EAClB,CAAC;AACF,CAAC;",
  "names": []
}
