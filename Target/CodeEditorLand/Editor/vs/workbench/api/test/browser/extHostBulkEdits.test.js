import s from"assert";import*as i from"../../common/extHostTypes.js";import{MainContext as c}from"../../common/extHost.protocol.js";import{URI as n}from"../../../../base/common/uri.js";import{mock as p}from"../../../../base/test/common/mock.js";import{ExtHostDocumentsAndEditors as u}from"../../common/extHostDocumentsAndEditors.js";import{SingleProxyRPCProtocol as m,TestRPCProtocol as E}from"../common/testRPCProtocol.js";import{NullLogService as f}from"../../../../platform/log/common/log.js";import{ExtHostBulkEdits as k}from"../../common/extHostBulkEdits.js";import{nullExtensionDescription as d}from"../../../services/extensions/common/extensions.js";import{ensureNoDisposablesAreLeakedInTestSuite as W}from"../../../../base/test/common/utils.js";import"../../../services/extensions/common/proxyIdentifier.js";suite("ExtHostBulkEdits.applyWorkspaceEdit",()=>{const a=n.parse("foo:bar");let r,t;setup(()=>{t=null;const e=new E;e.set(c.MainThreadBulkEdits,new class extends p(){$tryApplyWorkspaceEdit(l){return t=l.value,Promise.resolve(!0)}});const o=new u(m(null),new f);o.$acceptDocumentsAndEditorsDelta({addedDocuments:[{isDirty:!1,languageId:"foo",uri:a,versionId:1337,lines:["foo"],EOL:`
`}]}),r=new k(e,o)}),W(),test("uses version id if document available",async()=>{const e=new i.WorkspaceEdit;e.replace(a,new i.Range(0,0,0,0),"hello"),await r.applyWorkspaceEdit(e,d,void 0),s.strictEqual(t.edits.length,1);const[o]=t.edits;s.strictEqual(o.versionId,1337)}),test("does not use version id if document is not available",async()=>{const e=new i.WorkspaceEdit;e.replace(n.parse("foo:bar2"),new i.Range(0,0,0,0),"hello"),await r.applyWorkspaceEdit(e,d,void 0),s.strictEqual(t.edits.length,1);const[o]=t.edits;s.ok(typeof o.versionId>"u")})});
