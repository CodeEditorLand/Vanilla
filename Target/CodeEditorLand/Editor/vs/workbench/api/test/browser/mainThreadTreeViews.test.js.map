{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/api/test/browser/mainThreadTreeViews.test.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as nls from '../../../../nls.js';\nimport assert from 'assert';\nimport { mock } from '../../../../base/test/common/mock.js';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from '../../../../base/test/common/utils.js';\nimport { SyncDescriptor } from '../../../../platform/instantiation/common/descriptors.js';\nimport { TestInstantiationService } from '../../../../platform/instantiation/test/common/instantiationServiceMock.js';\nimport { NullLogService } from '../../../../platform/log/common/log.js';\nimport { TestNotificationService } from '../../../../platform/notification/test/common/testNotificationService.js';\nimport { Registry } from '../../../../platform/registry/common/platform.js';\nimport { MainThreadTreeViews } from '../../browser/mainThreadTreeViews.js';\nimport { ExtHostTreeViewsShape } from '../../common/extHost.protocol.js';\nimport { CustomTreeView } from '../../../browser/parts/views/treeView.js';\nimport { Extensions, ITreeItem, ITreeView, ITreeViewDescriptor, IViewContainersRegistry, IViewDescriptorService, IViewsRegistry, TreeItemCollapsibleState, ViewContainer, ViewContainerLocation } from '../../../common/views.js';\nimport { IExtHostContext } from '../../../services/extensions/common/extHostCustomers.js';\nimport { ExtensionHostKind } from '../../../services/extensions/common/extensionHostKind.js';\nimport { ViewDescriptorService } from '../../../services/views/browser/viewDescriptorService.js';\nimport { TestViewsService, workbenchInstantiationService } from '../../../test/browser/workbenchTestServices.js';\nimport { TestExtensionService } from '../../../test/common/workbenchTestServices.js';\n\nsuite('MainThreadHostTreeView', function () {\n\tconst testTreeViewId = 'testTreeView';\n\tconst customValue = 'customValue';\n\tconst ViewsRegistry = Registry.as<IViewsRegistry>(Extensions.ViewsRegistry);\n\n\tinterface CustomTreeItem extends ITreeItem {\n\t\tcustomProp: string;\n\t}\n\n\tclass MockExtHostTreeViewsShape extends mock<ExtHostTreeViewsShape>() {\n\t\toverride async $getChildren(treeViewId: string, treeItemHandle?: string): Promise<ITreeItem[]> {\n\t\t\treturn [<CustomTreeItem>{ handle: 'testItem1', collapsibleState: TreeItemCollapsibleState.Expanded, customProp: customValue }];\n\t\t}\n\n\t\toverride async $hasResolve(): Promise<boolean> {\n\t\t\treturn false;\n\t\t}\n\n\t\toverride $setVisible(): void { }\n\t}\n\n\tlet container: ViewContainer;\n\tlet mainThreadTreeViews: MainThreadTreeViews;\n\tlet extHostTreeViewsShape: MockExtHostTreeViewsShape;\n\n\tteardown(() => {\n\t\tViewsRegistry.deregisterViews(ViewsRegistry.getViews(container), container);\n\t});\n\n\tconst disposables = ensureNoDisposablesAreLeakedInTestSuite();\n\n\tsetup(async () => {\n\t\tconst instantiationService: TestInstantiationService = workbenchInstantiationService(undefined, disposables);\n\t\tconst viewDescriptorService = disposables.add(instantiationService.createInstance(ViewDescriptorService));\n\t\tinstantiationService.stub(IViewDescriptorService, viewDescriptorService);\n\t\tcontainer = Registry.as<IViewContainersRegistry>(Extensions.ViewContainersRegistry).registerViewContainer({ id: 'testContainer', title: nls.localize2('test', 'test'), ctorDescriptor: new SyncDescriptor(<any>{}) }, ViewContainerLocation.Sidebar);\n\t\tconst viewDescriptor: ITreeViewDescriptor = {\n\t\t\tid: testTreeViewId,\n\t\t\tctorDescriptor: null!,\n\t\t\tname: nls.localize2('Test View 1', 'Test View 1'),\n\t\t\ttreeView: disposables.add(instantiationService.createInstance(CustomTreeView, 'testTree', 'Test Title', 'extension.id')),\n\t\t};\n\t\tViewsRegistry.registerViews([viewDescriptor], container);\n\n\t\tconst testExtensionService = new TestExtensionService();\n\t\textHostTreeViewsShape = new MockExtHostTreeViewsShape();\n\t\tmainThreadTreeViews = disposables.add(new MainThreadTreeViews(\n\t\t\tnew class implements IExtHostContext {\n\t\t\t\tremoteAuthority = '';\n\t\t\t\textensionHostKind = ExtensionHostKind.LocalProcess;\n\t\t\t\tdispose() { }\n\t\t\t\tassertRegistered() { }\n\t\t\t\tset(v: any): any { return null; }\n\t\t\t\tgetProxy(): any {\n\t\t\t\t\treturn extHostTreeViewsShape;\n\t\t\t\t}\n\t\t\t\tdrain(): any { return null; }\n\t\t\t}, new TestViewsService(), new TestNotificationService(), testExtensionService, new NullLogService()));\n\t\tmainThreadTreeViews.$registerTreeViewDataProvider(testTreeViewId, { showCollapseAll: false, canSelectMany: false, dropMimeTypes: [], dragMimeTypes: [], hasHandleDrag: false, hasHandleDrop: false, manuallyManageCheckboxes: false });\n\t\tawait testExtensionService.whenInstalledExtensionsRegistered();\n\t});\n\n\ttest('getChildren keeps custom properties', async () => {\n\t\tconst treeView: ITreeView = (<ITreeViewDescriptor>ViewsRegistry.getView(testTreeViewId)).treeView;\n\t\tconst children = await treeView.dataProvider?.getChildren({ handle: 'root', collapsibleState: TreeItemCollapsibleState.Expanded });\n\t\tassert(children!.length === 1, 'Exactly one child should be returned');\n\t\tassert((<CustomTreeItem>children![0]).customProp === customValue, 'Tree Items should keep custom properties');\n\t});\n\n\n});\n"],
  "mappings": "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",
  "names": []
}
