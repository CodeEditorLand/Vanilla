{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/api/test/browser/extHostCommands.test.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport assert from 'assert';\nimport { ExtHostCommands } from '../../common/extHostCommands.js';\nimport { MainThreadCommandsShape } from '../../common/extHost.protocol.js';\nimport { CommandsRegistry } from '../../../../platform/commands/common/commands.js';\nimport { SingleProxyRPCProtocol } from '../common/testRPCProtocol.js';\nimport { mock } from '../../../../base/test/common/mock.js';\nimport { NullLogService } from '../../../../platform/log/common/log.js';\nimport { IExtHostTelemetry } from '../../common/extHostTelemetry.js';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from '../../../../base/test/common/utils.js';\n\nsuite('ExtHostCommands', function () {\n\tensureNoDisposablesAreLeakedInTestSuite();\n\n\ttest('dispose calls unregister', function () {\n\n\t\tlet lastUnregister: string;\n\n\t\tconst shape = new class extends mock<MainThreadCommandsShape>() {\n\t\t\toverride $registerCommand(id: string): void {\n\t\t\t\t//\n\t\t\t}\n\t\t\toverride $unregisterCommand(id: string): void {\n\t\t\t\tlastUnregister = id;\n\t\t\t}\n\t\t};\n\n\t\tconst commands = new ExtHostCommands(\n\t\t\tSingleProxyRPCProtocol(shape),\n\t\t\tnew NullLogService(),\n\t\t\tnew class extends mock<IExtHostTelemetry>() {\n\t\t\t\toverride onExtensionError(): boolean {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t);\n\t\tcommands.registerCommand(true, 'foo', (): any => { }).dispose();\n\t\tassert.strictEqual(lastUnregister!, 'foo');\n\t\tassert.strictEqual(CommandsRegistry.getCommand('foo'), undefined);\n\n\t});\n\n\ttest('dispose bubbles only once', function () {\n\n\t\tlet unregisterCounter = 0;\n\n\t\tconst shape = new class extends mock<MainThreadCommandsShape>() {\n\t\t\toverride $registerCommand(id: string): void {\n\t\t\t\t//\n\t\t\t}\n\t\t\toverride $unregisterCommand(id: string): void {\n\t\t\t\tunregisterCounter += 1;\n\t\t\t}\n\t\t};\n\n\t\tconst commands = new ExtHostCommands(\n\t\t\tSingleProxyRPCProtocol(shape),\n\t\t\tnew NullLogService(),\n\t\t\tnew class extends mock<IExtHostTelemetry>() {\n\t\t\t\toverride onExtensionError(): boolean {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t);\n\t\tconst reg = commands.registerCommand(true, 'foo', (): any => { });\n\t\treg.dispose();\n\t\treg.dispose();\n\t\treg.dispose();\n\t\tassert.strictEqual(unregisterCounter, 1);\n\t});\n\n\ttest('execute with retry', async function () {\n\n\t\tlet count = 0;\n\n\t\tconst shape = new class extends mock<MainThreadCommandsShape>() {\n\t\t\toverride $registerCommand(id: string): void {\n\t\t\t\t//\n\t\t\t}\n\t\t\toverride async $executeCommand<T>(id: string, args: any[], retry: boolean): Promise<T | undefined> {\n\t\t\t\tcount++;\n\t\t\t\tassert.strictEqual(retry, count === 1);\n\t\t\t\tif (count === 1) {\n\t\t\t\t\tassert.strictEqual(retry, true);\n\t\t\t\t\tthrow new Error('$executeCommand:retry');\n\t\t\t\t} else {\n\t\t\t\t\tassert.strictEqual(retry, false);\n\t\t\t\t\treturn <any>17;\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tconst commands = new ExtHostCommands(\n\t\t\tSingleProxyRPCProtocol(shape),\n\t\t\tnew NullLogService(),\n\t\t\tnew class extends mock<IExtHostTelemetry>() {\n\t\t\t\toverride onExtensionError(): boolean {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t);\n\n\t\tconst result: number = await commands.executeCommand('fooo', [this, true]);\n\t\tassert.strictEqual(result, 17);\n\t\tassert.strictEqual(count, 2);\n\t});\n\n\ttest('onCommand:abc activates extensions when executed from command palette, but not when executed programmatically with vscode.commands.executeCommand #150293', async function () {\n\n\t\tconst activationEvents: string[] = [];\n\n\t\tconst shape = new class extends mock<MainThreadCommandsShape>() {\n\t\t\toverride $registerCommand(id: string): void {\n\t\t\t\t//\n\t\t\t}\n\t\t\toverride $fireCommandActivationEvent(id: string): void {\n\t\t\t\tactivationEvents.push(id);\n\t\t\t}\n\t\t};\n\t\tconst commands = new ExtHostCommands(\n\t\t\tSingleProxyRPCProtocol(shape),\n\t\t\tnew NullLogService(),\n\t\t\tnew class extends mock<IExtHostTelemetry>() {\n\t\t\t\toverride onExtensionError(): boolean {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t);\n\n\t\tcommands.registerCommand(true, 'extCmd', (args: any): any => args);\n\n\t\tconst result: unknown = await commands.executeCommand('extCmd', this);\n\t\tassert.strictEqual(result, this);\n\t\tassert.deepStrictEqual(activationEvents, ['extCmd']);\n\t});\n});\n"],
  "mappings": "AAKA,OAAO,YAAY;AACnB,SAAS,uBAAuB;AAChC,SAAS,+BAA+B;AACxC,SAAS,wBAAwB;AACjC,SAAS,8BAA8B;AACvC,SAAS,YAAY;AACrB,SAAS,sBAAsB;AAC/B,SAAS,yBAAyB;AAClC,SAAS,+CAA+C;AAExD,MAAM,mBAAmB,WAAY;AACpC,0CAAwC;AAExC,OAAK,4BAA4B,WAAY;AAE5C,QAAI;AAEJ,UAAM,QAAQ,IAAI,cAAc,KAA8B,EAAE;AAAA,MACtD,iBAAiB,IAAkB;AAAA,MAE5C;AAAA,MACS,mBAAmB,IAAkB;AAC7C,yBAAiB;AAAA,MAClB;AAAA,IACD;AAEA,UAAM,WAAW,IAAI;AAAA,MACpB,uBAAuB,KAAK;AAAA,MAC5B,IAAI,eAAe;AAAA,MACnB,IAAI,cAAc,KAAwB,EAAE;AAAA,QAClC,mBAA4B;AACpC,iBAAO;AAAA,QACR;AAAA,MACD;AAAA,IACD;AACA,aAAS,gBAAgB,MAAM,OAAO,MAAW;AAAA,IAAE,CAAC,EAAE,QAAQ;AAC9D,WAAO,YAAY,gBAAiB,KAAK;AACzC,WAAO,YAAY,iBAAiB,WAAW,KAAK,GAAG,MAAS;AAAA,EAEjE,CAAC;AAED,OAAK,6BAA6B,WAAY;AAE7C,QAAI,oBAAoB;AAExB,UAAM,QAAQ,IAAI,cAAc,KAA8B,EAAE;AAAA,MACtD,iBAAiB,IAAkB;AAAA,MAE5C;AAAA,MACS,mBAAmB,IAAkB;AAC7C,6BAAqB;AAAA,MACtB;AAAA,IACD;AAEA,UAAM,WAAW,IAAI;AAAA,MACpB,uBAAuB,KAAK;AAAA,MAC5B,IAAI,eAAe;AAAA,MACnB,IAAI,cAAc,KAAwB,EAAE;AAAA,QAClC,mBAA4B;AACpC,iBAAO;AAAA,QACR;AAAA,MACD;AAAA,IACD;AACA,UAAM,MAAM,SAAS,gBAAgB,MAAM,OAAO,MAAW;AAAA,IAAE,CAAC;AAChE,QAAI,QAAQ;AACZ,QAAI,QAAQ;AACZ,QAAI,QAAQ;AACZ,WAAO,YAAY,mBAAmB,CAAC;AAAA,EACxC,CAAC;AAED,OAAK,sBAAsB,iBAAkB;AAE5C,QAAI,QAAQ;AAEZ,UAAM,QAAQ,IAAI,cAAc,KAA8B,EAAE;AAAA,MACtD,iBAAiB,IAAkB;AAAA,MAE5C;AAAA,MACA,MAAe,gBAAmB,IAAY,MAAa,OAAwC;AAClG;AACA,eAAO,YAAY,OAAO,UAAU,CAAC;AACrC,YAAI,UAAU,GAAG;AAChB,iBAAO,YAAY,OAAO,IAAI;AAC9B,gBAAM,IAAI,MAAM,uBAAuB;AAAA,QACxC,OAAO;AACN,iBAAO,YAAY,OAAO,KAAK;AAC/B,iBAAY;AAAA,QACb;AAAA,MACD;AAAA,IACD;AAEA,UAAM,WAAW,IAAI;AAAA,MACpB,uBAAuB,KAAK;AAAA,MAC5B,IAAI,eAAe;AAAA,MACnB,IAAI,cAAc,KAAwB,EAAE;AAAA,QAClC,mBAA4B;AACpC,iBAAO;AAAA,QACR;AAAA,MACD;AAAA,IACD;AAEA,UAAM,SAAiB,MAAM,SAAS,eAAe,QAAQ,CAAC,MAAM,IAAI,CAAC;AACzE,WAAO,YAAY,QAAQ,EAAE;AAC7B,WAAO,YAAY,OAAO,CAAC;AAAA,EAC5B,CAAC;AAED,OAAK,6JAA6J,iBAAkB;AAEnL,UAAM,mBAA6B,CAAC;AAEpC,UAAM,QAAQ,IAAI,cAAc,KAA8B,EAAE;AAAA,MACtD,iBAAiB,IAAkB;AAAA,MAE5C;AAAA,MACS,4BAA4B,IAAkB;AACtD,yBAAiB,KAAK,EAAE;AAAA,MACzB;AAAA,IACD;AACA,UAAM,WAAW,IAAI;AAAA,MACpB,uBAAuB,KAAK;AAAA,MAC5B,IAAI,eAAe;AAAA,MACnB,IAAI,cAAc,KAAwB,EAAE;AAAA,QAClC,mBAA4B;AACpC,iBAAO;AAAA,QACR;AAAA,MACD;AAAA,IACD;AAEA,aAAS,gBAAgB,MAAM,UAAU,CAAC,SAAmB,IAAI;AAEjE,UAAM,SAAkB,MAAM,SAAS,eAAe,UAAU,IAAI;AACpE,WAAO,YAAY,QAAQ,IAAI;AAC/B,WAAO,gBAAgB,kBAAkB,CAAC,QAAQ,CAAC;AAAA,EACpD,CAAC;AACF,CAAC;",
  "names": []
}
