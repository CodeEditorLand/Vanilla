{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/api/test/browser/extHostNotebookKernel.test.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport assert from 'assert';\nimport { Barrier } from '../../../../base/common/async.js';\nimport { DisposableStore } from '../../../../base/common/lifecycle.js';\nimport { URI, UriComponents } from '../../../../base/common/uri.js';\nimport { ExtensionIdentifier } from '../../../../platform/extensions/common/extensions.js';\nimport { NullLogService } from '../../../../platform/log/common/log.js';\nimport { ICellExecuteUpdateDto, ICellExecutionCompleteDto, INotebookKernelDto2, MainContext, MainThreadCommandsShape, MainThreadNotebookDocumentsShape, MainThreadNotebookKernelsShape, MainThreadNotebookShape } from '../../common/extHost.protocol.js';\nimport { ExtHostCommands } from '../../common/extHostCommands.js';\nimport { ExtHostDocuments } from '../../common/extHostDocuments.js';\nimport { ExtHostDocumentsAndEditors } from '../../common/extHostDocumentsAndEditors.js';\nimport { IExtHostInitDataService } from '../../common/extHostInitDataService.js';\nimport { ExtHostNotebookController } from '../../common/extHostNotebook.js';\nimport { ExtHostNotebookDocument } from '../../common/extHostNotebookDocument.js';\nimport { ExtHostNotebookDocuments } from '../../common/extHostNotebookDocuments.js';\nimport { ExtHostNotebookKernels } from '../../common/extHostNotebookKernels.js';\nimport { NotebookCellOutput, NotebookCellOutputItem } from '../../common/extHostTypes.js';\nimport { CellKind, CellUri, NotebookCellsChangeType } from '../../../contrib/notebook/common/notebookCommon.js';\nimport { CellExecutionUpdateType } from '../../../contrib/notebook/common/notebookExecutionService.js';\nimport { nullExtensionDescription } from '../../../services/extensions/common/extensions.js';\nimport { SerializableObjectWithBuffers } from '../../../services/extensions/common/proxyIdentifier.js';\nimport { TestRPCProtocol } from '../common/testRPCProtocol.js';\nimport { mock } from '../../../test/common/workbenchTestServices.js';\nimport { IExtHostTelemetry } from '../../common/extHostTelemetry.js';\nimport { ExtHostConsumerFileSystem } from '../../common/extHostFileSystemConsumer.js';\nimport { ExtHostFileSystemInfo } from '../../common/extHostFileSystemInfo.js';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from '../../../../base/test/common/utils.js';\nimport { ExtHostSearch } from '../../common/extHostSearch.js';\nimport { URITransformerService } from '../../common/extHostUriTransformerService.js';\n\nsuite('NotebookKernel', function () {\n\tlet rpcProtocol: TestRPCProtocol;\n\tlet extHostNotebookKernels: ExtHostNotebookKernels;\n\tlet notebook: ExtHostNotebookDocument;\n\tlet extHostDocumentsAndEditors: ExtHostDocumentsAndEditors;\n\tlet extHostDocuments: ExtHostDocuments;\n\tlet extHostNotebooks: ExtHostNotebookController;\n\tlet extHostNotebookDocuments: ExtHostNotebookDocuments;\n\tlet extHostCommands: ExtHostCommands;\n\tlet extHostConsumerFileSystem: ExtHostConsumerFileSystem;\n\tlet extHostSearch: ExtHostSearch;\n\n\tconst notebookUri = URI.parse('test:///notebook.file');\n\tconst kernelData = new Map<number, INotebookKernelDto2>();\n\tconst disposables = new DisposableStore();\n\n\tconst cellExecuteCreate: { notebook: UriComponents; cell: number }[] = [];\n\tconst cellExecuteUpdates: ICellExecuteUpdateDto[] = [];\n\tconst cellExecuteComplete: ICellExecutionCompleteDto[] = [];\n\n\tteardown(function () {\n\t\tdisposables.clear();\n\t});\n\n\tensureNoDisposablesAreLeakedInTestSuite();\n\n\tsetup(async function () {\n\t\tcellExecuteCreate.length = 0;\n\t\tcellExecuteUpdates.length = 0;\n\t\tcellExecuteComplete.length = 0;\n\t\tkernelData.clear();\n\n\t\trpcProtocol = new TestRPCProtocol();\n\t\trpcProtocol.set(MainContext.MainThreadCommands, new class extends mock<MainThreadCommandsShape>() {\n\t\t\toverride $registerCommand() { }\n\t\t});\n\t\trpcProtocol.set(MainContext.MainThreadNotebookKernels, new class extends mock<MainThreadNotebookKernelsShape>() {\n\t\t\toverride async $addKernel(handle: number, data: INotebookKernelDto2): Promise<void> {\n\t\t\t\tkernelData.set(handle, data);\n\t\t\t}\n\t\t\toverride $removeKernel(handle: number) {\n\t\t\t\tkernelData.delete(handle);\n\t\t\t}\n\t\t\toverride $updateKernel(handle: number, data: Partial<INotebookKernelDto2>) {\n\t\t\t\tassert.strictEqual(kernelData.has(handle), true);\n\t\t\t\tkernelData.set(handle, { ...kernelData.get(handle)!, ...data, });\n\t\t\t}\n\t\t\toverride $createExecution(handle: number, controllerId: string, uri: UriComponents, cellHandle: number): void {\n\t\t\t\tcellExecuteCreate.push({ notebook: uri, cell: cellHandle });\n\t\t\t}\n\t\t\toverride $updateExecution(handle: number, data: SerializableObjectWithBuffers<ICellExecuteUpdateDto[]>): void {\n\t\t\t\tcellExecuteUpdates.push(...data.value);\n\t\t\t}\n\t\t\toverride $completeExecution(handle: number, data: SerializableObjectWithBuffers<ICellExecutionCompleteDto>): void {\n\t\t\t\tcellExecuteComplete.push(data.value);\n\t\t\t}\n\t\t});\n\t\trpcProtocol.set(MainContext.MainThreadNotebookDocuments, new class extends mock<MainThreadNotebookDocumentsShape>() {\n\n\t\t});\n\t\trpcProtocol.set(MainContext.MainThreadNotebook, new class extends mock<MainThreadNotebookShape>() {\n\t\t\toverride async $registerNotebookSerializer() { }\n\t\t\toverride async $unregisterNotebookSerializer() { }\n\t\t});\n\t\textHostDocumentsAndEditors = new ExtHostDocumentsAndEditors(rpcProtocol, new NullLogService());\n\t\textHostDocuments = disposables.add(new ExtHostDocuments(rpcProtocol, extHostDocumentsAndEditors));\n\t\textHostCommands = new ExtHostCommands(rpcProtocol, new NullLogService(), new class extends mock<IExtHostTelemetry>() {\n\t\t\toverride onExtensionError(): boolean {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t});\n\t\textHostConsumerFileSystem = new ExtHostConsumerFileSystem(rpcProtocol, new ExtHostFileSystemInfo());\n\t\textHostSearch = new ExtHostSearch(rpcProtocol, new URITransformerService(null), new NullLogService());\n\t\textHostNotebooks = new ExtHostNotebookController(rpcProtocol, extHostCommands, extHostDocumentsAndEditors, extHostDocuments, extHostConsumerFileSystem, extHostSearch, new NullLogService());\n\n\t\textHostNotebookDocuments = new ExtHostNotebookDocuments(extHostNotebooks);\n\n\t\textHostNotebooks.$acceptDocumentAndEditorsDelta(new SerializableObjectWithBuffers({\n\t\t\taddedDocuments: [{\n\t\t\t\turi: notebookUri,\n\t\t\t\tviewType: 'test',\n\t\t\t\tversionId: 0,\n\t\t\t\tcells: [{\n\t\t\t\t\thandle: 0,\n\t\t\t\t\turi: CellUri.generate(notebookUri, 0),\n\t\t\t\t\tsource: ['### Heading'],\n\t\t\t\t\teol: '\\n',\n\t\t\t\t\tlanguage: 'markdown',\n\t\t\t\t\tcellKind: CellKind.Markup,\n\t\t\t\t\toutputs: [],\n\t\t\t\t}, {\n\t\t\t\t\thandle: 1,\n\t\t\t\t\turi: CellUri.generate(notebookUri, 1),\n\t\t\t\t\tsource: ['console.log(\"aaa\")', 'console.log(\"bbb\")'],\n\t\t\t\t\teol: '\\n',\n\t\t\t\t\tlanguage: 'javascript',\n\t\t\t\t\tcellKind: CellKind.Code,\n\t\t\t\t\toutputs: [],\n\t\t\t\t}],\n\t\t\t}],\n\t\t\taddedEditors: [{\n\t\t\t\tdocumentUri: notebookUri,\n\t\t\t\tid: '_notebook_editor_0',\n\t\t\t\tselections: [{ start: 0, end: 1 }],\n\t\t\t\tvisibleRanges: []\n\t\t\t}]\n\t\t}));\n\t\textHostNotebooks.$acceptDocumentAndEditorsDelta(new SerializableObjectWithBuffers({ newActiveEditor: '_notebook_editor_0' }));\n\n\t\tnotebook = extHostNotebooks.notebookDocuments[0]!;\n\n\t\tdisposables.add(notebook);\n\t\tdisposables.add(extHostDocuments);\n\n\n\t\textHostNotebookKernels = new ExtHostNotebookKernels(\n\t\t\trpcProtocol,\n\t\t\tnew class extends mock<IExtHostInitDataService>() { },\n\t\t\textHostNotebooks,\n\t\t\textHostCommands,\n\t\t\tnew NullLogService()\n\t\t);\n\t});\n\n\ttest('create/dispose kernel', async function () {\n\n\t\tconst kernel = extHostNotebookKernels.createNotebookController(nullExtensionDescription, 'foo', '*', 'Foo');\n\n\t\tassert.throws(() => (<any>kernel).id = 'dd');\n\t\tassert.throws(() => (<any>kernel).notebookType = 'dd');\n\n\t\tassert.ok(kernel);\n\t\tassert.strictEqual(kernel.id, 'foo');\n\t\tassert.strictEqual(kernel.label, 'Foo');\n\t\tassert.strictEqual(kernel.notebookType, '*');\n\n\t\tawait rpcProtocol.sync();\n\t\tassert.strictEqual(kernelData.size, 1);\n\n\t\tconst [first] = kernelData.values();\n\t\tassert.strictEqual(first.id, 'nullExtensionDescription/foo');\n\t\tassert.strictEqual(ExtensionIdentifier.equals(first.extensionId, nullExtensionDescription.identifier), true);\n\t\tassert.strictEqual(first.label, 'Foo');\n\t\tassert.strictEqual(first.notebookType, '*');\n\n\t\tkernel.dispose();\n\t\tawait rpcProtocol.sync();\n\t\tassert.strictEqual(kernelData.size, 0);\n\t});\n\n\ttest('update kernel', async function () {\n\n\t\tconst kernel = disposables.add(extHostNotebookKernels.createNotebookController(nullExtensionDescription, 'foo', '*', 'Foo'));\n\n\t\tawait rpcProtocol.sync();\n\t\tassert.ok(kernel);\n\n\t\tlet [first] = kernelData.values();\n\t\tassert.strictEqual(first.id, 'nullExtensionDescription/foo');\n\t\tassert.strictEqual(first.label, 'Foo');\n\n\t\tkernel.label = 'Far';\n\t\tassert.strictEqual(kernel.label, 'Far');\n\n\t\tawait rpcProtocol.sync();\n\t\t[first] = kernelData.values();\n\t\tassert.strictEqual(first.id, 'nullExtensionDescription/foo');\n\t\tassert.strictEqual(first.label, 'Far');\n\t});\n\n\ttest('execute - simple createNotebookCellExecution', function () {\n\t\tconst kernel = disposables.add(extHostNotebookKernels.createNotebookController(nullExtensionDescription, 'foo', '*', 'Foo'));\n\n\t\textHostNotebookKernels.$acceptNotebookAssociation(0, notebook.uri, true);\n\n\t\tconst cell1 = notebook.apiNotebook.cellAt(0);\n\t\tconst task = kernel.createNotebookCellExecution(cell1);\n\t\ttask.start();\n\t\ttask.end(undefined);\n\t});\n\n\ttest('createNotebookCellExecution, must be selected/associated', function () {\n\t\tconst kernel = disposables.add(extHostNotebookKernels.createNotebookController(nullExtensionDescription, 'foo', '*', 'Foo'));\n\t\tassert.throws(() => {\n\t\t\tkernel.createNotebookCellExecution(notebook.apiNotebook.cellAt(0));\n\t\t});\n\n\t\textHostNotebookKernels.$acceptNotebookAssociation(0, notebook.uri, true);\n\t\tconst execution = kernel.createNotebookCellExecution(notebook.apiNotebook.cellAt(0));\n\t\texecution.end(true);\n\t});\n\n\ttest('createNotebookCellExecution, cell must be alive', function () {\n\t\tconst kernel = disposables.add(extHostNotebookKernels.createNotebookController(nullExtensionDescription, 'foo', '*', 'Foo'));\n\n\t\tconst cell1 = notebook.apiNotebook.cellAt(0);\n\n\t\textHostNotebookKernels.$acceptNotebookAssociation(0, notebook.uri, true);\n\t\textHostNotebookDocuments.$acceptModelChanged(notebook.uri, new SerializableObjectWithBuffers({\n\t\t\tversionId: 12,\n\t\t\trawEvents: [{\n\t\t\t\tkind: NotebookCellsChangeType.ModelChange,\n\t\t\t\tchanges: [[0, notebook.apiNotebook.cellCount, []]]\n\t\t\t}]\n\t\t}), true);\n\n\t\tassert.strictEqual(cell1.index, -1);\n\n\t\tassert.throws(() => {\n\t\t\tkernel.createNotebookCellExecution(cell1);\n\t\t});\n\t});\n\n\ttest('interrupt handler, cancellation', async function () {\n\n\t\tlet interruptCallCount = 0;\n\t\tlet tokenCancelCount = 0;\n\n\t\tconst kernel = disposables.add(extHostNotebookKernels.createNotebookController(nullExtensionDescription, 'foo', '*', 'Foo'));\n\t\tkernel.interruptHandler = () => { interruptCallCount += 1; };\n\t\textHostNotebookKernels.$acceptNotebookAssociation(0, notebook.uri, true);\n\n\t\tconst cell1 = notebook.apiNotebook.cellAt(0);\n\n\t\tconst task = kernel.createNotebookCellExecution(cell1);\n\t\tdisposables.add(task.token.onCancellationRequested(() => tokenCancelCount += 1));\n\n\t\tawait extHostNotebookKernels.$cancelCells(0, notebook.uri, [0]);\n\t\tassert.strictEqual(interruptCallCount, 1);\n\t\tassert.strictEqual(tokenCancelCount, 0);\n\n\t\tawait extHostNotebookKernels.$cancelCells(0, notebook.uri, [0]);\n\t\tassert.strictEqual(interruptCallCount, 2);\n\t\tassert.strictEqual(tokenCancelCount, 0);\n\n\t\t// should cancelling the cells end the execution task?\n\t\ttask.end(false);\n\t});\n\n\ttest('set outputs on cancel', async function () {\n\n\t\tconst kernel = disposables.add(extHostNotebookKernels.createNotebookController(nullExtensionDescription, 'foo', '*', 'Foo'));\n\t\textHostNotebookKernels.$acceptNotebookAssociation(0, notebook.uri, true);\n\n\t\tconst cell1 = notebook.apiNotebook.cellAt(0);\n\t\tconst task = kernel.createNotebookCellExecution(cell1);\n\t\ttask.start();\n\n\t\tconst b = new Barrier();\n\n\t\tdisposables.add(\n\t\t\ttask.token.onCancellationRequested(async () => {\n\t\t\t\tawait task.replaceOutput(new NotebookCellOutput([NotebookCellOutputItem.text('canceled')]));\n\t\t\t\ttask.end(true);\n\t\t\t\tb.open(); // use barrier to signal that cancellation has happened\n\t\t\t})\n\t\t);\n\n\t\tcellExecuteUpdates.length = 0;\n\t\tawait extHostNotebookKernels.$cancelCells(0, notebook.uri, [0]);\n\n\t\tawait b.wait();\n\n\t\tassert.strictEqual(cellExecuteUpdates.length > 0, true);\n\n\t\tlet found = false;\n\t\tfor (const edit of cellExecuteUpdates) {\n\t\t\tif (edit.editType === CellExecutionUpdateType.Output) {\n\t\t\t\tassert.strictEqual(edit.append, false);\n\t\t\t\tassert.strictEqual(edit.outputs.length, 1);\n\t\t\t\tassert.strictEqual(edit.outputs[0].items.length, 1);\n\t\t\t\tassert.deepStrictEqual(Array.from(edit.outputs[0].items[0].valueBytes.buffer), Array.from(new TextEncoder().encode('canceled')));\n\t\t\t\tfound = true;\n\t\t\t}\n\t\t}\n\t\tassert.ok(found);\n\t});\n\n\ttest('set outputs on interrupt', async function () {\n\n\t\tconst kernel = extHostNotebookKernels.createNotebookController(nullExtensionDescription, 'foo', '*', 'Foo');\n\t\textHostNotebookKernels.$acceptNotebookAssociation(0, notebook.uri, true);\n\n\n\t\tconst cell1 = notebook.apiNotebook.cellAt(0);\n\t\tconst task = kernel.createNotebookCellExecution(cell1);\n\t\ttask.start();\n\n\t\tkernel.interruptHandler = async _notebook => {\n\t\t\tassert.ok(notebook.apiNotebook === _notebook);\n\t\t\tawait task.replaceOutput(new NotebookCellOutput([NotebookCellOutputItem.text('interrupted')]));\n\t\t\ttask.end(true);\n\t\t};\n\n\t\tcellExecuteUpdates.length = 0;\n\t\tawait extHostNotebookKernels.$cancelCells(0, notebook.uri, [0]);\n\n\t\tassert.strictEqual(cellExecuteUpdates.length > 0, true);\n\n\t\tlet found = false;\n\t\tfor (const edit of cellExecuteUpdates) {\n\t\t\tif (edit.editType === CellExecutionUpdateType.Output) {\n\t\t\t\tassert.strictEqual(edit.append, false);\n\t\t\t\tassert.strictEqual(edit.outputs.length, 1);\n\t\t\t\tassert.strictEqual(edit.outputs[0].items.length, 1);\n\t\t\t\tassert.deepStrictEqual(Array.from(edit.outputs[0].items[0].valueBytes.buffer), Array.from(new TextEncoder().encode('interrupted')));\n\t\t\t\tfound = true;\n\t\t\t}\n\t\t}\n\t\tassert.ok(found);\n\t});\n});\n"],
  "mappings": "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",
  "names": []
}
