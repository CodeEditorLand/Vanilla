{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/api/test/browser/extHostMessagerService.test.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport assert from 'assert';\nimport { MainThreadMessageService } from '../../browser/mainThreadMessageService.js';\nimport { IDialogService, IPrompt, IPromptButton } from '../../../../platform/dialogs/common/dialogs.js';\nimport { INotificationService, INotification, NoOpNotification, INotificationHandle, Severity, IPromptChoice, IPromptOptions, IStatusMessageOptions, INotificationSource, INotificationSourceFilter, NotificationsFilter } from '../../../../platform/notification/common/notification.js';\nimport { ICommandService } from '../../../../platform/commands/common/commands.js';\nimport { mock } from '../../../../base/test/common/mock.js';\nimport { IDisposable, Disposable } from '../../../../base/common/lifecycle.js';\nimport { Event } from '../../../../base/common/event.js';\nimport { TestDialogService } from '../../../../platform/dialogs/test/common/testDialogService.js';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from '../../../../base/test/common/utils.js';\nimport { TestExtensionService } from '../../../test/common/workbenchTestServices.js';\n\nconst emptyCommandService: ICommandService = {\n\t_serviceBrand: undefined,\n\tonWillExecuteCommand: () => Disposable.None,\n\tonDidExecuteCommand: () => Disposable.None,\n\texecuteCommand: (commandId: string, ...args: any[]): Promise<any> => {\n\t\treturn Promise.resolve(undefined);\n\t}\n};\n\nconst emptyNotificationService = new class implements INotificationService {\n\tdeclare readonly _serviceBrand: undefined;\n\tonDidAddNotification: Event<INotification> = Event.None;\n\tonDidRemoveNotification: Event<INotification> = Event.None;\n\tonDidChangeFilter: Event<void> = Event.None;\n\tnotify(...args: any[]): never {\n\t\tthrow new Error('not implemented');\n\t}\n\tinfo(...args: any[]): never {\n\t\tthrow new Error('not implemented');\n\t}\n\twarn(...args: any[]): never {\n\t\tthrow new Error('not implemented');\n\t}\n\terror(...args: any[]): never {\n\t\tthrow new Error('not implemented');\n\t}\n\tprompt(severity: Severity, message: string, choices: IPromptChoice[], options?: IPromptOptions): INotificationHandle {\n\t\tthrow new Error('not implemented');\n\t}\n\tstatus(message: string | Error, options?: IStatusMessageOptions): IDisposable {\n\t\treturn Disposable.None;\n\t}\n\tsetFilter(): void {\n\t\tthrow new Error('not implemented');\n\t}\n\tgetFilter(source?: INotificationSource | undefined): NotificationsFilter {\n\t\tthrow new Error('not implemented');\n\t}\n\tgetFilters(): INotificationSourceFilter[] {\n\t\tthrow new Error('not implemented');\n\t}\n\tremoveFilter(sourceId: string): void {\n\t\tthrow new Error('not implemented');\n\t}\n};\n\nclass EmptyNotificationService implements INotificationService {\n\tdeclare readonly _serviceBrand: undefined;\n\tfilter: boolean = false;\n\tconstructor(private withNotify: (notification: INotification) => void) {\n\t}\n\n\tonDidAddNotification: Event<INotification> = Event.None;\n\tonDidRemoveNotification: Event<INotification> = Event.None;\n\tonDidChangeFilter: Event<void> = Event.None;\n\tnotify(notification: INotification): INotificationHandle {\n\t\tthis.withNotify(notification);\n\n\t\treturn new NoOpNotification();\n\t}\n\tinfo(message: any): void {\n\t\tthrow new Error('Method not implemented.');\n\t}\n\twarn(message: any): void {\n\t\tthrow new Error('Method not implemented.');\n\t}\n\terror(message: any): void {\n\t\tthrow new Error('Method not implemented.');\n\t}\n\tprompt(severity: Severity, message: string, choices: IPromptChoice[], options?: IPromptOptions): INotificationHandle {\n\t\tthrow new Error('Method not implemented');\n\t}\n\tstatus(message: string, options?: IStatusMessageOptions): IDisposable {\n\t\treturn Disposable.None;\n\t}\n\tsetFilter(): void {\n\t\tthrow new Error('Method not implemented.');\n\t}\n\tgetFilter(source?: INotificationSource | undefined): NotificationsFilter {\n\t\tthrow new Error('Method not implemented.');\n\t}\n\tgetFilters(): INotificationSourceFilter[] {\n\t\tthrow new Error('Method not implemented.');\n\t}\n\tremoveFilter(sourceId: string): void {\n\t\tthrow new Error('Method not implemented.');\n\t}\n}\n\nsuite('ExtHostMessageService', function () {\n\n\ttest('propagte handle on select', async function () {\n\n\t\tconst service = new MainThreadMessageService(null!, new EmptyNotificationService(notification => {\n\t\t\tassert.strictEqual(notification.actions!.primary!.length, 1);\n\t\t\tqueueMicrotask(() => notification.actions!.primary![0].run());\n\t\t}), emptyCommandService, new TestDialogService(), new TestExtensionService());\n\n\t\tconst handle = await service.$showMessage(1, 'h', {}, [{ handle: 42, title: 'a thing', isCloseAffordance: true }]);\n\t\tassert.strictEqual(handle, 42);\n\n\t\tservice.dispose();\n\t});\n\n\tsuite('modal', () => {\n\t\ttest('calls dialog service', async () => {\n\t\t\tconst service = new MainThreadMessageService(null!, emptyNotificationService, emptyCommandService, new class extends mock<IDialogService>() {\n\t\t\t\toverride prompt({ type, message, buttons, cancelButton }: IPrompt<any>) {\n\t\t\t\t\tassert.strictEqual(type, 1);\n\t\t\t\t\tassert.strictEqual(message, 'h');\n\t\t\t\t\tassert.strictEqual(buttons!.length, 1);\n\t\t\t\t\tassert.strictEqual((cancelButton as IPromptButton<unknown>)!.label, 'Cancel');\n\t\t\t\t\treturn Promise.resolve({ result: buttons![0].run({ checkboxChecked: false }) });\n\t\t\t\t}\n\t\t\t} as IDialogService, new TestExtensionService());\n\n\t\t\tconst handle = await service.$showMessage(1, 'h', { modal: true }, [{ handle: 42, title: 'a thing', isCloseAffordance: false }]);\n\t\t\tassert.strictEqual(handle, 42);\n\n\t\t\tservice.dispose();\n\t\t});\n\n\t\ttest('returns undefined when cancelled', async () => {\n\t\t\tconst service = new MainThreadMessageService(null!, emptyNotificationService, emptyCommandService, new class extends mock<IDialogService>() {\n\t\t\t\toverride prompt(prompt: IPrompt<any>) {\n\t\t\t\t\treturn Promise.resolve({ result: (prompt.cancelButton as IPromptButton<unknown>)!.run({ checkboxChecked: false }) });\n\t\t\t\t}\n\t\t\t} as IDialogService, new TestExtensionService());\n\n\t\t\tconst handle = await service.$showMessage(1, 'h', { modal: true }, [{ handle: 42, title: 'a thing', isCloseAffordance: false }]);\n\t\t\tassert.strictEqual(handle, undefined);\n\n\t\t\tservice.dispose();\n\t\t});\n\n\t\ttest('hides Cancel button when not needed', async () => {\n\t\t\tconst service = new MainThreadMessageService(null!, emptyNotificationService, emptyCommandService, new class extends mock<IDialogService>() {\n\t\t\t\toverride prompt({ type, message, buttons, cancelButton }: IPrompt<any>) {\n\t\t\t\t\tassert.strictEqual(buttons!.length, 0);\n\t\t\t\t\tassert.ok(cancelButton);\n\t\t\t\t\treturn Promise.resolve({ result: (cancelButton as IPromptButton<unknown>).run({ checkboxChecked: false }) });\n\t\t\t\t}\n\t\t\t} as IDialogService, new TestExtensionService());\n\n\t\t\tconst handle = await service.$showMessage(1, 'h', { modal: true }, [{ handle: 42, title: 'a thing', isCloseAffordance: true }]);\n\t\t\tassert.strictEqual(handle, 42);\n\n\t\t\tservice.dispose();\n\t\t});\n\t});\n\n\tensureNoDisposablesAreLeakedInTestSuite();\n});\n"],
  "mappings": "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",
  "names": []
}
