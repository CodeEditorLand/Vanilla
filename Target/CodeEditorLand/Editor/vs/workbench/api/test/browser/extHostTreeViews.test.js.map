{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/api/test/browser/extHostTreeViews.test.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport assert from 'assert';\nimport * as sinon from 'sinon';\nimport { Emitter } from '../../../../base/common/event.js';\nimport { ExtHostTreeViews } from '../../common/extHostTreeViews.js';\nimport { ExtHostCommands } from '../../common/extHostCommands.js';\nimport { MainThreadTreeViewsShape, MainContext, MainThreadCommandsShape } from '../../common/extHost.protocol.js';\nimport { TreeDataProvider, TreeItem } from 'vscode';\nimport { TestRPCProtocol } from '../common/testRPCProtocol.js';\nimport { mock } from '../../../../base/test/common/mock.js';\nimport { TreeItemCollapsibleState, ITreeItem, IRevealOptions } from '../../../common/views.js';\nimport { NullLogService } from '../../../../platform/log/common/log.js';\nimport type { IDisposable } from '../../../../base/common/lifecycle.js';\nimport { nullExtensionDescription as extensionsDescription } from '../../../services/extensions/common/extensions.js';\nimport { runWithFakedTimers } from '../../../../base/test/common/timeTravelScheduler.js';\nimport { IExtHostTelemetry } from '../../common/extHostTelemetry.js';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from '../../../../base/test/common/utils.js';\n\nsuite('ExtHostTreeView', function () {\n\tconst store = ensureNoDisposablesAreLeakedInTestSuite();\n\n\tclass RecordingShape extends mock<MainThreadTreeViewsShape>() {\n\n\t\tonRefresh = new Emitter<{ [treeItemHandle: string]: ITreeItem }>();\n\n\t\toverride async $registerTreeViewDataProvider(treeViewId: string): Promise<void> {\n\t\t}\n\n\t\toverride $refresh(viewId: string, itemsToRefresh: { [treeItemHandle: string]: ITreeItem }): Promise<void> {\n\t\t\treturn Promise.resolve(null).then(() => {\n\t\t\t\tthis.onRefresh.fire(itemsToRefresh);\n\t\t\t});\n\t\t}\n\n\t\toverride $reveal(treeViewId: string, itemInfo: { item: ITreeItem; parentChain: ITreeItem[] } | undefined, options: IRevealOptions): Promise<void> {\n\t\t\treturn Promise.resolve();\n\t\t}\n\n\t\toverride $disposeTree(treeViewId: string): Promise<void> {\n\t\t\treturn Promise.resolve();\n\t\t}\n\n\t}\n\n\tlet testObject: ExtHostTreeViews;\n\tlet target: RecordingShape;\n\tlet onDidChangeTreeNode: Emitter<{ key: string } | undefined>;\n\tlet onDidChangeTreeNodeWithId: Emitter<{ key: string }>;\n\tlet tree: { [key: string]: any };\n\tlet labels: { [key: string]: string };\n\tlet nodes: { [key: string]: { key: string } };\n\n\tsetup(() => {\n\t\ttree = {\n\t\t\t'a': {\n\t\t\t\t'aa': {},\n\t\t\t\t'ab': {}\n\t\t\t},\n\t\t\t'b': {\n\t\t\t\t'ba': {},\n\t\t\t\t'bb': {}\n\t\t\t}\n\t\t};\n\n\t\tlabels = {};\n\t\tnodes = {};\n\n\t\tconst rpcProtocol = new TestRPCProtocol();\n\n\t\trpcProtocol.set(MainContext.MainThreadCommands, new class extends mock<MainThreadCommandsShape>() {\n\t\t\toverride $registerCommand() { }\n\t\t});\n\t\ttarget = new RecordingShape();\n\t\ttestObject = store.add(new ExtHostTreeViews(target, new ExtHostCommands(\n\t\t\trpcProtocol,\n\t\t\tnew NullLogService(),\n\t\t\tnew class extends mock<IExtHostTelemetry>() {\n\t\t\t\toverride onExtensionError(): boolean {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t), new NullLogService()));\n\t\tonDidChangeTreeNode = new Emitter<{ key: string } | undefined>();\n\t\tonDidChangeTreeNodeWithId = new Emitter<{ key: string }>();\n\t\ttestObject.createTreeView('testNodeTreeProvider', { treeDataProvider: aNodeTreeDataProvider() }, extensionsDescription);\n\t\ttestObject.createTreeView('testNodeWithIdTreeProvider', { treeDataProvider: aNodeWithIdTreeDataProvider() }, extensionsDescription);\n\t\ttestObject.createTreeView('testNodeWithHighlightsTreeProvider', { treeDataProvider: aNodeWithHighlightedLabelTreeDataProvider() }, extensionsDescription);\n\n\t\treturn loadCompleteTree('testNodeTreeProvider');\n\t});\n\n\ttest('construct node tree', () => {\n\t\treturn testObject.$getChildren('testNodeTreeProvider')\n\t\t\t.then(elements => {\n\t\t\t\tconst actuals = elements?.map(e => e.handle);\n\t\t\t\tassert.deepStrictEqual(actuals, ['0/0:a', '0/0:b']);\n\t\t\t\treturn Promise.all([\n\t\t\t\t\ttestObject.$getChildren('testNodeTreeProvider', '0/0:a')\n\t\t\t\t\t\t.then(children => {\n\t\t\t\t\t\t\tconst actuals = children?.map(e => e.handle);\n\t\t\t\t\t\t\tassert.deepStrictEqual(actuals, ['0/0:a/0:aa', '0/0:a/0:ab']);\n\t\t\t\t\t\t\treturn Promise.all([\n\t\t\t\t\t\t\t\ttestObject.$getChildren('testNodeTreeProvider', '0/0:a/0:aa').then(children => assert.strictEqual(children?.length, 0)),\n\t\t\t\t\t\t\t\ttestObject.$getChildren('testNodeTreeProvider', '0/0:a/0:ab').then(children => assert.strictEqual(children?.length, 0))\n\t\t\t\t\t\t\t]);\n\t\t\t\t\t\t}),\n\t\t\t\t\ttestObject.$getChildren('testNodeTreeProvider', '0/0:b')\n\t\t\t\t\t\t.then(children => {\n\t\t\t\t\t\t\tconst actuals = children?.map(e => e.handle);\n\t\t\t\t\t\t\tassert.deepStrictEqual(actuals, ['0/0:b/0:ba', '0/0:b/0:bb']);\n\t\t\t\t\t\t\treturn Promise.all([\n\t\t\t\t\t\t\t\ttestObject.$getChildren('testNodeTreeProvider', '0/0:b/0:ba').then(children => assert.strictEqual(children?.length, 0)),\n\t\t\t\t\t\t\t\ttestObject.$getChildren('testNodeTreeProvider', '0/0:b/0:bb').then(children => assert.strictEqual(children?.length, 0))\n\t\t\t\t\t\t\t]);\n\t\t\t\t\t\t})\n\t\t\t\t]);\n\t\t\t});\n\t});\n\n\ttest('construct id tree', () => {\n\t\treturn testObject.$getChildren('testNodeWithIdTreeProvider')\n\t\t\t.then(elements => {\n\t\t\t\tconst actuals = elements?.map(e => e.handle);\n\t\t\t\tassert.deepStrictEqual(actuals, ['1/a', '1/b']);\n\t\t\t\treturn Promise.all([\n\t\t\t\t\ttestObject.$getChildren('testNodeWithIdTreeProvider', '1/a')\n\t\t\t\t\t\t.then(children => {\n\t\t\t\t\t\t\tconst actuals = children?.map(e => e.handle);\n\t\t\t\t\t\t\tassert.deepStrictEqual(actuals, ['1/aa', '1/ab']);\n\t\t\t\t\t\t\treturn Promise.all([\n\t\t\t\t\t\t\t\ttestObject.$getChildren('testNodeWithIdTreeProvider', '1/aa').then(children => assert.strictEqual(children?.length, 0)),\n\t\t\t\t\t\t\t\ttestObject.$getChildren('testNodeWithIdTreeProvider', '1/ab').then(children => assert.strictEqual(children?.length, 0))\n\t\t\t\t\t\t\t]);\n\t\t\t\t\t\t}),\n\t\t\t\t\ttestObject.$getChildren('testNodeWithIdTreeProvider', '1/b')\n\t\t\t\t\t\t.then(children => {\n\t\t\t\t\t\t\tconst actuals = children?.map(e => e.handle);\n\t\t\t\t\t\t\tassert.deepStrictEqual(actuals, ['1/ba', '1/bb']);\n\t\t\t\t\t\t\treturn Promise.all([\n\t\t\t\t\t\t\t\ttestObject.$getChildren('testNodeWithIdTreeProvider', '1/ba').then(children => assert.strictEqual(children?.length, 0)),\n\t\t\t\t\t\t\t\ttestObject.$getChildren('testNodeWithIdTreeProvider', '1/bb').then(children => assert.strictEqual(children?.length, 0))\n\t\t\t\t\t\t\t]);\n\t\t\t\t\t\t})\n\t\t\t\t]);\n\t\t\t});\n\t});\n\n\ttest('construct highlights tree', () => {\n\t\treturn testObject.$getChildren('testNodeWithHighlightsTreeProvider')\n\t\t\t.then(elements => {\n\t\t\t\tassert.deepStrictEqual(removeUnsetKeys(elements), [{\n\t\t\t\t\thandle: '1/a',\n\t\t\t\t\tlabel: { label: 'a', highlights: [[0, 2], [3, 5]] },\n\t\t\t\t\tcollapsibleState: TreeItemCollapsibleState.Collapsed\n\t\t\t\t}, {\n\t\t\t\t\thandle: '1/b',\n\t\t\t\t\tlabel: { label: 'b', highlights: [[0, 2], [3, 5]] },\n\t\t\t\t\tcollapsibleState: TreeItemCollapsibleState.Collapsed\n\t\t\t\t}]);\n\t\t\t\treturn Promise.all([\n\t\t\t\t\ttestObject.$getChildren('testNodeWithHighlightsTreeProvider', '1/a')\n\t\t\t\t\t\t.then(children => {\n\t\t\t\t\t\t\tassert.deepStrictEqual(removeUnsetKeys(children), [{\n\t\t\t\t\t\t\t\thandle: '1/aa',\n\t\t\t\t\t\t\t\tparentHandle: '1/a',\n\t\t\t\t\t\t\t\tlabel: { label: 'aa', highlights: [[0, 2], [3, 5]] },\n\t\t\t\t\t\t\t\tcollapsibleState: TreeItemCollapsibleState.None\n\t\t\t\t\t\t\t}, {\n\t\t\t\t\t\t\t\thandle: '1/ab',\n\t\t\t\t\t\t\t\tparentHandle: '1/a',\n\t\t\t\t\t\t\t\tlabel: { label: 'ab', highlights: [[0, 2], [3, 5]] },\n\t\t\t\t\t\t\t\tcollapsibleState: TreeItemCollapsibleState.None\n\t\t\t\t\t\t\t}]);\n\t\t\t\t\t\t}),\n\t\t\t\t\ttestObject.$getChildren('testNodeWithHighlightsTreeProvider', '1/b')\n\t\t\t\t\t\t.then(children => {\n\t\t\t\t\t\t\tassert.deepStrictEqual(removeUnsetKeys(children), [{\n\t\t\t\t\t\t\t\thandle: '1/ba',\n\t\t\t\t\t\t\t\tparentHandle: '1/b',\n\t\t\t\t\t\t\t\tlabel: { label: 'ba', highlights: [[0, 2], [3, 5]] },\n\t\t\t\t\t\t\t\tcollapsibleState: TreeItemCollapsibleState.None\n\t\t\t\t\t\t\t}, {\n\t\t\t\t\t\t\t\thandle: '1/bb',\n\t\t\t\t\t\t\t\tparentHandle: '1/b',\n\t\t\t\t\t\t\t\tlabel: { label: 'bb', highlights: [[0, 2], [3, 5]] },\n\t\t\t\t\t\t\t\tcollapsibleState: TreeItemCollapsibleState.None\n\t\t\t\t\t\t\t}]);\n\t\t\t\t\t\t})\n\t\t\t\t]);\n\t\t\t});\n\t});\n\n\ttest('error is thrown if id is not unique', (done) => {\n\t\ttree['a'] = {\n\t\t\t'aa': {},\n\t\t};\n\t\ttree['b'] = {\n\t\t\t'aa': {},\n\t\t\t'ba': {}\n\t\t};\n\t\tlet caughtExpectedError = false;\n\t\tstore.add(target.onRefresh.event(() => {\n\t\t\ttestObject.$getChildren('testNodeWithIdTreeProvider')\n\t\t\t\t.then(elements => {\n\t\t\t\t\tconst actuals = elements?.map(e => e.handle);\n\t\t\t\t\tassert.deepStrictEqual(actuals, ['1/a', '1/b']);\n\t\t\t\t\treturn testObject.$getChildren('testNodeWithIdTreeProvider', '1/a')\n\t\t\t\t\t\t.then(() => testObject.$getChildren('testNodeWithIdTreeProvider', '1/b'))\n\t\t\t\t\t\t.then(() => assert.fail('Should fail with duplicate id'))\n\t\t\t\t\t\t.catch(() => caughtExpectedError = true)\n\t\t\t\t\t\t.finally(() => caughtExpectedError ? done() : assert.fail('Expected duplicate id error not thrown.'));\n\t\t\t\t});\n\t\t}));\n\t\tonDidChangeTreeNode.fire(undefined);\n\t});\n\n\ttest('refresh root', function (done) {\n\t\tstore.add(target.onRefresh.event(actuals => {\n\t\t\tassert.strictEqual(undefined, actuals);\n\t\t\tdone();\n\t\t}));\n\t\tonDidChangeTreeNode.fire(undefined);\n\t});\n\n\ttest('refresh a parent node', () => {\n\t\treturn new Promise((c, e) => {\n\t\t\tstore.add(target.onRefresh.event(actuals => {\n\t\t\t\tassert.deepStrictEqual(['0/0:b'], Object.keys(actuals));\n\t\t\t\tassert.deepStrictEqual(removeUnsetKeys(actuals['0/0:b']), {\n\t\t\t\t\thandle: '0/0:b',\n\t\t\t\t\tlabel: { label: 'b' },\n\t\t\t\t\tcollapsibleState: TreeItemCollapsibleState.Collapsed\n\t\t\t\t});\n\t\t\t\tc(undefined);\n\t\t\t}));\n\t\t\tonDidChangeTreeNode.fire(getNode('b'));\n\t\t});\n\t});\n\n\ttest('refresh a leaf node', function (done) {\n\t\tstore.add(target.onRefresh.event(actuals => {\n\t\t\tassert.deepStrictEqual(['0/0:b/0:bb'], Object.keys(actuals));\n\t\t\tassert.deepStrictEqual(removeUnsetKeys(actuals['0/0:b/0:bb']), {\n\t\t\t\thandle: '0/0:b/0:bb',\n\t\t\t\tparentHandle: '0/0:b',\n\t\t\t\tlabel: { label: 'bb' },\n\t\t\t\tcollapsibleState: TreeItemCollapsibleState.None\n\t\t\t});\n\t\t\tdone();\n\t\t}));\n\t\tonDidChangeTreeNode.fire(getNode('bb'));\n\t});\n\n\tasync function runWithEventMerging(action: (resolve: () => void) => void) {\n\t\tawait runWithFakedTimers({}, async () => {\n\t\t\tawait new Promise<void>((resolve) => {\n\t\t\t\tlet subscription: IDisposable | undefined = undefined;\n\t\t\t\tsubscription = target.onRefresh.event(() => {\n\t\t\t\t\tsubscription!.dispose();\n\t\t\t\t\tresolve();\n\t\t\t\t});\n\t\t\t\tonDidChangeTreeNode.fire(getNode('b'));\n\t\t\t});\n\t\t\tawait new Promise<void>(action);\n\t\t});\n\t}\n\n\ttest('refresh parent and child node trigger refresh only on parent - scenario 1', async () => {\n\t\treturn runWithEventMerging((resolve) => {\n\t\t\tstore.add(target.onRefresh.event(actuals => {\n\t\t\t\tassert.deepStrictEqual(['0/0:b', '0/0:a/0:aa'], Object.keys(actuals));\n\t\t\t\tassert.deepStrictEqual(removeUnsetKeys(actuals['0/0:b']), {\n\t\t\t\t\thandle: '0/0:b',\n\t\t\t\t\tlabel: { label: 'b' },\n\t\t\t\t\tcollapsibleState: TreeItemCollapsibleState.Collapsed\n\t\t\t\t});\n\t\t\t\tassert.deepStrictEqual(removeUnsetKeys(actuals['0/0:a/0:aa']), {\n\t\t\t\t\thandle: '0/0:a/0:aa',\n\t\t\t\t\tparentHandle: '0/0:a',\n\t\t\t\t\tlabel: { label: 'aa' },\n\t\t\t\t\tcollapsibleState: TreeItemCollapsibleState.None\n\t\t\t\t});\n\t\t\t\tresolve();\n\t\t\t}));\n\t\t\tonDidChangeTreeNode.fire(getNode('b'));\n\t\t\tonDidChangeTreeNode.fire(getNode('aa'));\n\t\t\tonDidChangeTreeNode.fire(getNode('bb'));\n\t\t});\n\t});\n\n\ttest('refresh parent and child node trigger refresh only on parent - scenario 2', async () => {\n\t\treturn runWithEventMerging((resolve) => {\n\t\t\tstore.add(target.onRefresh.event(actuals => {\n\t\t\t\tassert.deepStrictEqual(['0/0:a/0:aa', '0/0:b'], Object.keys(actuals));\n\t\t\t\tassert.deepStrictEqual(removeUnsetKeys(actuals['0/0:b']), {\n\t\t\t\t\thandle: '0/0:b',\n\t\t\t\t\tlabel: { label: 'b' },\n\t\t\t\t\tcollapsibleState: TreeItemCollapsibleState.Collapsed\n\t\t\t\t});\n\t\t\t\tassert.deepStrictEqual(removeUnsetKeys(actuals['0/0:a/0:aa']), {\n\t\t\t\t\thandle: '0/0:a/0:aa',\n\t\t\t\t\tparentHandle: '0/0:a',\n\t\t\t\t\tlabel: { label: 'aa' },\n\t\t\t\t\tcollapsibleState: TreeItemCollapsibleState.None\n\t\t\t\t});\n\t\t\t\tresolve();\n\t\t\t}));\n\t\t\tonDidChangeTreeNode.fire(getNode('bb'));\n\t\t\tonDidChangeTreeNode.fire(getNode('aa'));\n\t\t\tonDidChangeTreeNode.fire(getNode('b'));\n\t\t});\n\t});\n\n\ttest('refresh an element for label change', function (done) {\n\t\tlabels['a'] = 'aa';\n\t\tstore.add(target.onRefresh.event(actuals => {\n\t\t\tassert.deepStrictEqual(['0/0:a'], Object.keys(actuals));\n\t\t\tassert.deepStrictEqual(removeUnsetKeys(actuals['0/0:a']), {\n\t\t\t\thandle: '0/0:aa',\n\t\t\t\tlabel: { label: 'aa' },\n\t\t\t\tcollapsibleState: TreeItemCollapsibleState.Collapsed\n\t\t\t});\n\t\t\tdone();\n\t\t}));\n\t\tonDidChangeTreeNode.fire(getNode('a'));\n\t});\n\n\ttest('refresh calls are throttled on roots', () => {\n\t\treturn runWithEventMerging((resolve) => {\n\t\t\tstore.add(target.onRefresh.event(actuals => {\n\t\t\t\tassert.strictEqual(undefined, actuals);\n\t\t\t\tresolve();\n\t\t\t}));\n\t\t\tonDidChangeTreeNode.fire(undefined);\n\t\t\tonDidChangeTreeNode.fire(undefined);\n\t\t\tonDidChangeTreeNode.fire(undefined);\n\t\t\tonDidChangeTreeNode.fire(undefined);\n\t\t});\n\t});\n\n\ttest('refresh calls are throttled on elements', () => {\n\t\treturn runWithEventMerging((resolve) => {\n\t\t\tstore.add(target.onRefresh.event(actuals => {\n\t\t\t\tassert.deepStrictEqual(['0/0:a', '0/0:b'], Object.keys(actuals));\n\t\t\t\tresolve();\n\t\t\t}));\n\n\t\t\tonDidChangeTreeNode.fire(getNode('a'));\n\t\t\tonDidChangeTreeNode.fire(getNode('b'));\n\t\t\tonDidChangeTreeNode.fire(getNode('b'));\n\t\t\tonDidChangeTreeNode.fire(getNode('a'));\n\t\t});\n\t});\n\n\ttest('refresh calls are throttled on unknown elements', () => {\n\t\treturn runWithEventMerging((resolve) => {\n\t\t\tstore.add(target.onRefresh.event(actuals => {\n\t\t\t\tassert.deepStrictEqual(['0/0:a', '0/0:b'], Object.keys(actuals));\n\t\t\t\tresolve();\n\t\t\t}));\n\n\t\t\tonDidChangeTreeNode.fire(getNode('a'));\n\t\t\tonDidChangeTreeNode.fire(getNode('b'));\n\t\t\tonDidChangeTreeNode.fire(getNode('g'));\n\t\t\tonDidChangeTreeNode.fire(getNode('a'));\n\t\t});\n\t});\n\n\ttest('refresh calls are throttled on unknown elements and root', () => {\n\t\treturn runWithEventMerging((resolve) => {\n\t\t\tstore.add(target.onRefresh.event(actuals => {\n\t\t\t\tassert.strictEqual(undefined, actuals);\n\t\t\t\tresolve();\n\t\t\t}));\n\n\t\t\tonDidChangeTreeNode.fire(getNode('a'));\n\t\t\tonDidChangeTreeNode.fire(getNode('b'));\n\t\t\tonDidChangeTreeNode.fire(getNode('g'));\n\t\t\tonDidChangeTreeNode.fire(undefined);\n\t\t});\n\t});\n\n\ttest('refresh calls are throttled on elements and root', () => {\n\t\treturn runWithEventMerging((resolve) => {\n\t\t\tstore.add(target.onRefresh.event(actuals => {\n\t\t\t\tassert.strictEqual(undefined, actuals);\n\t\t\t\tresolve();\n\t\t\t}));\n\n\t\t\tonDidChangeTreeNode.fire(getNode('a'));\n\t\t\tonDidChangeTreeNode.fire(getNode('b'));\n\t\t\tonDidChangeTreeNode.fire(undefined);\n\t\t\tonDidChangeTreeNode.fire(getNode('a'));\n\t\t});\n\t});\n\n\ttest('generate unique handles from labels by escaping them', (done) => {\n\t\ttree = {\n\t\t\t'a/0:b': {}\n\t\t};\n\n\t\tstore.add(target.onRefresh.event(() => {\n\t\t\ttestObject.$getChildren('testNodeTreeProvider')\n\t\t\t\t.then(elements => {\n\t\t\t\t\tassert.deepStrictEqual(elements?.map(e => e.handle), ['0/0:a//0:b']);\n\t\t\t\t\tdone();\n\t\t\t\t});\n\t\t}));\n\t\tonDidChangeTreeNode.fire(undefined);\n\t});\n\n\ttest('tree with duplicate labels', (done) => {\n\n\t\tconst dupItems = {\n\t\t\t'adup1': 'c',\n\t\t\t'adup2': 'g',\n\t\t\t'bdup1': 'e',\n\t\t\t'hdup1': 'i',\n\t\t\t'hdup2': 'l',\n\t\t\t'jdup1': 'k'\n\t\t};\n\n\t\tlabels['c'] = 'a';\n\t\tlabels['e'] = 'b';\n\t\tlabels['g'] = 'a';\n\t\tlabels['i'] = 'h';\n\t\tlabels['l'] = 'h';\n\t\tlabels['k'] = 'j';\n\n\t\ttree[dupItems['adup1']] = {};\n\t\ttree['d'] = {};\n\n\t\tconst bdup1Tree: { [key: string]: any } = {};\n\t\tbdup1Tree['h'] = {};\n\t\tbdup1Tree[dupItems['hdup1']] = {};\n\t\tbdup1Tree['j'] = {};\n\t\tbdup1Tree[dupItems['jdup1']] = {};\n\t\tbdup1Tree[dupItems['hdup2']] = {};\n\n\t\ttree[dupItems['bdup1']] = bdup1Tree;\n\t\ttree['f'] = {};\n\t\ttree[dupItems['adup2']] = {};\n\n\t\tstore.add(target.onRefresh.event(() => {\n\t\t\ttestObject.$getChildren('testNodeTreeProvider')\n\t\t\t\t.then(elements => {\n\t\t\t\t\tconst actuals = elements?.map(e => e.handle);\n\t\t\t\t\tassert.deepStrictEqual(actuals, ['0/0:a', '0/0:b', '0/1:a', '0/0:d', '0/1:b', '0/0:f', '0/2:a']);\n\t\t\t\t\treturn testObject.$getChildren('testNodeTreeProvider', '0/1:b')\n\t\t\t\t\t\t.then(elements => {\n\t\t\t\t\t\t\tconst actuals = elements?.map(e => e.handle);\n\t\t\t\t\t\t\tassert.deepStrictEqual(actuals, ['0/1:b/0:h', '0/1:b/1:h', '0/1:b/0:j', '0/1:b/1:j', '0/1:b/2:h']);\n\t\t\t\t\t\t\tdone();\n\t\t\t\t\t\t});\n\t\t\t\t});\n\t\t}));\n\n\t\tonDidChangeTreeNode.fire(undefined);\n\t});\n\n\ttest('getChildren is not returned from cache if refreshed', (done) => {\n\t\ttree = {\n\t\t\t'c': {}\n\t\t};\n\n\t\tstore.add(target.onRefresh.event(() => {\n\t\t\ttestObject.$getChildren('testNodeTreeProvider')\n\t\t\t\t.then(elements => {\n\t\t\t\t\tassert.deepStrictEqual(elements?.map(e => e.handle), ['0/0:c']);\n\t\t\t\t\tdone();\n\t\t\t\t});\n\t\t}));\n\n\t\tonDidChangeTreeNode.fire(undefined);\n\t});\n\n\ttest('getChildren is returned from cache if not refreshed', () => {\n\t\ttree = {\n\t\t\t'c': {}\n\t\t};\n\n\t\treturn testObject.$getChildren('testNodeTreeProvider')\n\t\t\t.then(elements => {\n\t\t\t\tassert.deepStrictEqual(elements?.map(e => e.handle), ['0/0:a', '0/0:b']);\n\t\t\t});\n\t});\n\n\ttest('reveal will throw an error if getParent is not implemented', () => {\n\t\tconst treeView = testObject.createTreeView('treeDataProvider', { treeDataProvider: aNodeTreeDataProvider() }, extensionsDescription);\n\t\treturn treeView.reveal({ key: 'a' })\n\t\t\t.then(() => assert.fail('Reveal should throw an error as getParent is not implemented'), () => null);\n\t});\n\n\ttest('reveal will return empty array for root element', () => {\n\t\tconst revealTarget = sinon.spy(target, '$reveal');\n\t\tconst treeView = testObject.createTreeView('treeDataProvider', { treeDataProvider: aCompleteNodeTreeDataProvider() }, extensionsDescription);\n\t\tconst expected = {\n\t\t\titem:\n\t\t\t\t{ handle: '0/0:a', label: { label: 'a' }, collapsibleState: TreeItemCollapsibleState.Collapsed },\n\t\t\tparentChain: []\n\t\t};\n\t\treturn treeView.reveal({ key: 'a' })\n\t\t\t.then(() => {\n\t\t\t\tassert.ok(revealTarget.calledOnce);\n\t\t\t\tassert.deepStrictEqual('treeDataProvider', revealTarget.args[0][0]);\n\t\t\t\tassert.deepStrictEqual(expected, removeUnsetKeys(revealTarget.args[0][1]));\n\t\t\t\tassert.deepStrictEqual({ select: true, focus: false, expand: false }, revealTarget.args[0][2]);\n\t\t\t});\n\t});\n\n\ttest('reveal will return parents array for an element when hierarchy is not loaded', () => {\n\t\tconst revealTarget = sinon.spy(target, '$reveal');\n\t\tconst treeView = testObject.createTreeView('treeDataProvider', { treeDataProvider: aCompleteNodeTreeDataProvider() }, extensionsDescription);\n\t\tconst expected = {\n\t\t\titem: { handle: '0/0:a/0:aa', label: { label: 'aa' }, collapsibleState: TreeItemCollapsibleState.None, parentHandle: '0/0:a' },\n\t\t\tparentChain: [{ handle: '0/0:a', label: { label: 'a' }, collapsibleState: TreeItemCollapsibleState.Collapsed }]\n\t\t};\n\t\treturn treeView.reveal({ key: 'aa' })\n\t\t\t.then(() => {\n\t\t\t\tassert.ok(revealTarget.calledOnce);\n\t\t\t\tassert.deepStrictEqual('treeDataProvider', revealTarget.args[0][0]);\n\t\t\t\tassert.deepStrictEqual(expected.item, removeUnsetKeys(revealTarget.args[0][1]!.item));\n\t\t\t\tassert.deepStrictEqual(expected.parentChain, (<Array<any>>(revealTarget.args[0][1]!.parentChain)).map(arg => removeUnsetKeys(arg)));\n\t\t\t\tassert.deepStrictEqual({ select: true, focus: false, expand: false }, revealTarget.args[0][2]);\n\t\t\t});\n\t});\n\n\ttest('reveal will return parents array for an element when hierarchy is loaded', () => {\n\t\tconst revealTarget = sinon.spy(target, '$reveal');\n\t\tconst treeView = testObject.createTreeView('treeDataProvider', { treeDataProvider: aCompleteNodeTreeDataProvider() }, extensionsDescription);\n\t\tconst expected = {\n\t\t\titem: { handle: '0/0:a/0:aa', label: { label: 'aa' }, collapsibleState: TreeItemCollapsibleState.None, parentHandle: '0/0:a' },\n\t\t\tparentChain: [{ handle: '0/0:a', label: { label: 'a' }, collapsibleState: TreeItemCollapsibleState.Collapsed }]\n\t\t};\n\t\treturn testObject.$getChildren('treeDataProvider')\n\t\t\t.then(() => testObject.$getChildren('treeDataProvider', '0/0:a'))\n\t\t\t.then(() => treeView.reveal({ key: 'aa' })\n\t\t\t\t.then(() => {\n\t\t\t\t\tassert.ok(revealTarget.calledOnce);\n\t\t\t\t\tassert.deepStrictEqual('treeDataProvider', revealTarget.args[0][0]);\n\t\t\t\t\tassert.deepStrictEqual(expected.item, removeUnsetKeys(revealTarget.args[0][1]!.item));\n\t\t\t\t\tassert.deepStrictEqual(expected.parentChain, (<Array<any>>(revealTarget.args[0][1]!.parentChain)).map(arg => removeUnsetKeys(arg)));\n\t\t\t\t\tassert.deepStrictEqual({ select: true, focus: false, expand: false }, revealTarget.args[0][2]);\n\t\t\t\t}));\n\t});\n\n\ttest('reveal will return parents array for deeper element with no selection', () => {\n\t\ttree = {\n\t\t\t'b': {\n\t\t\t\t'ba': {\n\t\t\t\t\t'bac': {}\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t\tconst revealTarget = sinon.spy(target, '$reveal');\n\t\tconst treeView = testObject.createTreeView('treeDataProvider', { treeDataProvider: aCompleteNodeTreeDataProvider() }, extensionsDescription);\n\t\tconst expected = {\n\t\t\titem: { handle: '0/0:b/0:ba/0:bac', label: { label: 'bac' }, collapsibleState: TreeItemCollapsibleState.None, parentHandle: '0/0:b/0:ba' },\n\t\t\tparentChain: [\n\t\t\t\t{ handle: '0/0:b', label: { label: 'b' }, collapsibleState: TreeItemCollapsibleState.Collapsed },\n\t\t\t\t{ handle: '0/0:b/0:ba', label: { label: 'ba' }, collapsibleState: TreeItemCollapsibleState.Collapsed, parentHandle: '0/0:b' }\n\t\t\t]\n\t\t};\n\t\treturn treeView.reveal({ key: 'bac' }, { select: false, focus: false, expand: false })\n\t\t\t.then(() => {\n\t\t\t\tassert.ok(revealTarget.calledOnce);\n\t\t\t\tassert.deepStrictEqual('treeDataProvider', revealTarget.args[0][0]);\n\t\t\t\tassert.deepStrictEqual(expected.item, removeUnsetKeys(revealTarget.args[0][1]!.item));\n\t\t\t\tassert.deepStrictEqual(expected.parentChain, (<Array<any>>(revealTarget.args[0][1]!.parentChain)).map(arg => removeUnsetKeys(arg)));\n\t\t\t\tassert.deepStrictEqual({ select: false, focus: false, expand: false }, revealTarget.args[0][2]);\n\t\t\t});\n\t});\n\n\ttest('reveal after first udpate', () => {\n\t\tconst revealTarget = sinon.spy(target, '$reveal');\n\t\tconst treeView = testObject.createTreeView('treeDataProvider', { treeDataProvider: aCompleteNodeTreeDataProvider() }, extensionsDescription);\n\t\tconst expected = {\n\t\t\titem: { handle: '0/0:a/0:ac', label: { label: 'ac' }, collapsibleState: TreeItemCollapsibleState.None, parentHandle: '0/0:a' },\n\t\t\tparentChain: [{ handle: '0/0:a', label: { label: 'a' }, collapsibleState: TreeItemCollapsibleState.Collapsed }]\n\t\t};\n\t\treturn loadCompleteTree('treeDataProvider')\n\t\t\t.then(() => {\n\t\t\t\ttree = {\n\t\t\t\t\t'a': {\n\t\t\t\t\t\t'aa': {},\n\t\t\t\t\t\t'ac': {}\n\t\t\t\t\t},\n\t\t\t\t\t'b': {\n\t\t\t\t\t\t'ba': {},\n\t\t\t\t\t\t'bb': {}\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t\tonDidChangeTreeNode.fire(getNode('a'));\n\n\t\t\t\treturn treeView.reveal({ key: 'ac' })\n\t\t\t\t\t.then(() => {\n\t\t\t\t\t\tassert.ok(revealTarget.calledOnce);\n\t\t\t\t\t\tassert.deepStrictEqual('treeDataProvider', revealTarget.args[0][0]);\n\t\t\t\t\t\tassert.deepStrictEqual(expected.item, removeUnsetKeys(revealTarget.args[0][1]!.item));\n\t\t\t\t\t\tassert.deepStrictEqual(expected.parentChain, (<Array<any>>(revealTarget.args[0][1]!.parentChain)).map(arg => removeUnsetKeys(arg)));\n\t\t\t\t\t\tassert.deepStrictEqual({ select: true, focus: false, expand: false }, revealTarget.args[0][2]);\n\t\t\t\t\t});\n\t\t\t});\n\t});\n\n\ttest('reveal after second udpate', () => {\n\t\tconst revealTarget = sinon.spy(target, '$reveal');\n\t\tconst treeView = testObject.createTreeView('treeDataProvider', { treeDataProvider: aCompleteNodeTreeDataProvider() }, extensionsDescription);\n\t\treturn loadCompleteTree('treeDataProvider')\n\t\t\t.then(() => {\n\t\t\t\treturn runWithEventMerging((resolve) => {\n\t\t\t\t\ttree = {\n\t\t\t\t\t\t'a': {\n\t\t\t\t\t\t\t'aa': {},\n\t\t\t\t\t\t\t'ac': {}\n\t\t\t\t\t\t},\n\t\t\t\t\t\t'b': {\n\t\t\t\t\t\t\t'ba': {},\n\t\t\t\t\t\t\t'bb': {}\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t\tonDidChangeTreeNode.fire(getNode('a'));\n\t\t\t\t\ttree = {\n\t\t\t\t\t\t'a': {\n\t\t\t\t\t\t\t'aa': {},\n\t\t\t\t\t\t\t'ac': {}\n\t\t\t\t\t\t},\n\t\t\t\t\t\t'b': {\n\t\t\t\t\t\t\t'ba': {},\n\t\t\t\t\t\t\t'bc': {}\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t\tonDidChangeTreeNode.fire(getNode('b'));\n\t\t\t\t\tresolve();\n\t\t\t\t}).then(() => {\n\t\t\t\t\treturn treeView.reveal({ key: 'bc' })\n\t\t\t\t\t\t.then(() => {\n\t\t\t\t\t\t\tassert.ok(revealTarget.calledOnce);\n\t\t\t\t\t\t\tassert.deepStrictEqual('treeDataProvider', revealTarget.args[0][0]);\n\t\t\t\t\t\t\tassert.deepStrictEqual({ handle: '0/0:b/0:bc', label: { label: 'bc' }, collapsibleState: TreeItemCollapsibleState.None, parentHandle: '0/0:b' }, removeUnsetKeys(revealTarget.args[0][1]!.item));\n\t\t\t\t\t\t\tassert.deepStrictEqual([{ handle: '0/0:b', label: { label: 'b' }, collapsibleState: TreeItemCollapsibleState.Collapsed }], (<Array<any>>revealTarget.args[0][1]!.parentChain).map(arg => removeUnsetKeys(arg)));\n\t\t\t\t\t\t\tassert.deepStrictEqual({ select: true, focus: false, expand: false }, revealTarget.args[0][2]);\n\t\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t});\n\t});\n\n\tfunction loadCompleteTree(treeId: string, element?: string): Promise<null> {\n\t\treturn testObject.$getChildren(treeId, element)\n\t\t\t.then(elements => elements?.map(e => loadCompleteTree(treeId, e.handle)))\n\t\t\t.then(() => null);\n\t}\n\n\tfunction removeUnsetKeys(obj: any): any {\n\t\tif (Array.isArray(obj)) {\n\t\t\treturn obj.map(o => removeUnsetKeys(o));\n\t\t}\n\n\t\tif (typeof obj === 'object') {\n\t\t\tconst result: { [key: string]: any } = {};\n\t\t\tfor (const key of Object.keys(obj)) {\n\t\t\t\tif (obj[key] !== undefined) {\n\t\t\t\t\tresult[key] = removeUnsetKeys(obj[key]);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn result;\n\t\t}\n\t\treturn obj;\n\t}\n\n\tfunction aNodeTreeDataProvider(): TreeDataProvider<{ key: string }> {\n\t\treturn {\n\t\t\tgetChildren: (element: { key: string }): { key: string }[] => {\n\t\t\t\treturn getChildren(element ? element.key : undefined).map(key => getNode(key));\n\t\t\t},\n\t\t\tgetTreeItem: (element: { key: string }): TreeItem => {\n\t\t\t\treturn getTreeItem(element.key);\n\t\t\t},\n\t\t\tonDidChangeTreeData: onDidChangeTreeNode.event\n\t\t};\n\t}\n\n\tfunction aCompleteNodeTreeDataProvider(): TreeDataProvider<{ key: string }> {\n\t\treturn {\n\t\t\tgetChildren: (element: { key: string }): { key: string }[] => {\n\t\t\t\treturn getChildren(element ? element.key : undefined).map(key => getNode(key));\n\t\t\t},\n\t\t\tgetTreeItem: (element: { key: string }): TreeItem => {\n\t\t\t\treturn getTreeItem(element.key);\n\t\t\t},\n\t\t\tgetParent: ({ key }: { key: string }): { key: string } | undefined => {\n\t\t\t\tconst parentKey = key.substring(0, key.length - 1);\n\t\t\t\treturn parentKey ? new Key(parentKey) : undefined;\n\t\t\t},\n\t\t\tonDidChangeTreeData: onDidChangeTreeNode.event\n\t\t};\n\t}\n\n\tfunction aNodeWithIdTreeDataProvider(): TreeDataProvider<{ key: string }> {\n\t\treturn {\n\t\t\tgetChildren: (element: { key: string }): { key: string }[] => {\n\t\t\t\treturn getChildren(element ? element.key : undefined).map(key => getNode(key));\n\t\t\t},\n\t\t\tgetTreeItem: (element: { key: string }): TreeItem => {\n\t\t\t\tconst treeItem = getTreeItem(element.key);\n\t\t\t\ttreeItem.id = element.key;\n\t\t\t\treturn treeItem;\n\t\t\t},\n\t\t\tonDidChangeTreeData: onDidChangeTreeNodeWithId.event\n\t\t};\n\t}\n\n\tfunction aNodeWithHighlightedLabelTreeDataProvider(): TreeDataProvider<{ key: string }> {\n\t\treturn {\n\t\t\tgetChildren: (element: { key: string }): { key: string }[] => {\n\t\t\t\treturn getChildren(element ? element.key : undefined).map(key => getNode(key));\n\t\t\t},\n\t\t\tgetTreeItem: (element: { key: string }): TreeItem => {\n\t\t\t\tconst treeItem = getTreeItem(element.key, [[0, 2], [3, 5]]);\n\t\t\t\ttreeItem.id = element.key;\n\t\t\t\treturn treeItem;\n\t\t\t},\n\t\t\tonDidChangeTreeData: onDidChangeTreeNodeWithId.event\n\t\t};\n\t}\n\n\tfunction getTreeElement(element: string): any {\n\t\tlet parent = tree;\n\t\tfor (let i = 0; i < element.length; i++) {\n\t\t\tparent = parent[element.substring(0, i + 1)];\n\t\t\tif (!parent) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t}\n\t\treturn parent;\n\t}\n\n\tfunction getChildren(key: string | undefined): string[] {\n\t\tif (!key) {\n\t\t\treturn Object.keys(tree);\n\t\t}\n\t\tconst treeElement = getTreeElement(key);\n\t\tif (treeElement) {\n\t\t\treturn Object.keys(treeElement);\n\t\t}\n\t\treturn [];\n\t}\n\n\tfunction getTreeItem(key: string, highlights?: [number, number][]): TreeItem {\n\t\tconst treeElement = getTreeElement(key);\n\t\treturn {\n\t\t\tlabel: <any>{ label: labels[key] || key, highlights },\n\t\t\tcollapsibleState: treeElement && Object.keys(treeElement).length ? TreeItemCollapsibleState.Collapsed : TreeItemCollapsibleState.None\n\t\t};\n\t}\n\n\tfunction getNode(key: string): { key: string } {\n\t\tif (!nodes[key]) {\n\t\t\tnodes[key] = new Key(key);\n\t\t}\n\t\treturn nodes[key];\n\t}\n\n\tclass Key {\n\t\tconstructor(readonly key: string) { }\n\t}\n\n});\n"],
  "mappings": "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",
  "names": ["actuals", "children", "elements"]
}
