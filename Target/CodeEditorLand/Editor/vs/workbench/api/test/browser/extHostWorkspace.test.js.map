{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/api/test/browser/extHostWorkspace.test.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport assert from 'assert';\nimport { CancellationToken } from '../../../../base/common/cancellation.js';\nimport { basename } from '../../../../base/common/path.js';\nimport { URI, UriComponents } from '../../../../base/common/uri.js';\nimport { ExtensionIdentifier } from '../../../../platform/extensions/common/extensions.js';\nimport { ILogService, NullLogService } from '../../../../platform/log/common/log.js';\nimport { IWorkspaceFolderData } from '../../../../platform/workspace/common/workspace.js';\nimport { MainThreadWorkspace } from '../../browser/mainThreadWorkspace.js';\nimport { IMainContext, IWorkspaceData, MainContext, ITextSearchComplete } from '../../common/extHost.protocol.js';\nimport { RelativePattern } from '../../common/extHostTypes.js';\nimport { ExtHostWorkspace } from '../../common/extHostWorkspace.js';\nimport { mock } from '../../../../base/test/common/mock.js';\nimport { TestRPCProtocol } from '../common/testRPCProtocol.js';\nimport { ExtHostRpcService } from '../../common/extHostRpcService.js';\nimport { IExtHostInitDataService } from '../../common/extHostInitDataService.js';\nimport { IFileQueryBuilderOptions, ITextQueryBuilderOptions } from '../../../services/search/common/queryBuilder.js';\nimport { IPatternInfo } from '../../../services/search/common/search.js';\nimport { isLinux, isWindows } from '../../../../base/common/platform.js';\nimport { IExtHostFileSystemInfo } from '../../common/extHostFileSystemInfo.js';\nimport { FileSystemProviderCapabilities } from '../../../../platform/files/common/files.js';\nimport { nullExtensionDescription as extensionDescriptor } from '../../../services/extensions/common/extensions.js';\nimport { IURITransformerService } from '../../common/extHostUriTransformerService.js';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from '../../../../base/test/common/utils.js';\nimport { ExcludeSettingOptions } from '../../../services/search/common/searchExtTypes.js';\n\nfunction createExtHostWorkspace(mainContext: IMainContext, data: IWorkspaceData, logService: ILogService): ExtHostWorkspace {\n\tconst result = new ExtHostWorkspace(\n\t\tnew ExtHostRpcService(mainContext),\n\t\tnew class extends mock<IExtHostInitDataService>() { override workspace = data; },\n\t\tnew class extends mock<IExtHostFileSystemInfo>() { override getCapabilities() { return isLinux ? FileSystemProviderCapabilities.PathCaseSensitive : undefined; } },\n\t\tlogService,\n\t\tnew class extends mock<IURITransformerService>() { }\n\t);\n\tresult.$initializeWorkspace(data, true);\n\treturn result;\n}\n\nsuite('ExtHostWorkspace', function () {\n\n\tensureNoDisposablesAreLeakedInTestSuite();\n\n\tfunction assertAsRelativePath(workspace: ExtHostWorkspace, input: string, expected: string, includeWorkspace?: boolean) {\n\t\tconst actual = workspace.getRelativePath(input, includeWorkspace);\n\t\tassert.strictEqual(actual, expected);\n\t}\n\n\ttest('asRelativePath', () => {\n\n\t\tconst ws = createExtHostWorkspace(new TestRPCProtocol(), { id: 'foo', folders: [aWorkspaceFolderData(URI.file('/Coding/Applications/NewsWoWBot'), 0)], name: 'Test' }, new NullLogService());\n\n\t\tassertAsRelativePath(ws, '/Coding/Applications/NewsWoWBot/bernd/das/brot', 'bernd/das/brot');\n\t\tassertAsRelativePath(ws, '/Apps/DartPubCache/hosted/pub.dartlang.org/convert-2.0.1/lib/src/hex.dart',\n\t\t\t'/Apps/DartPubCache/hosted/pub.dartlang.org/convert-2.0.1/lib/src/hex.dart');\n\n\t\tassertAsRelativePath(ws, '', '');\n\t\tassertAsRelativePath(ws, '/foo/bar', '/foo/bar');\n\t\tassertAsRelativePath(ws, 'in/out', 'in/out');\n\t});\n\n\ttest('asRelativePath, same paths, #11402', function () {\n\t\tconst root = '/home/aeschli/workspaces/samples/docker';\n\t\tconst input = '/home/aeschli/workspaces/samples/docker';\n\t\tconst ws = createExtHostWorkspace(new TestRPCProtocol(), { id: 'foo', folders: [aWorkspaceFolderData(URI.file(root), 0)], name: 'Test' }, new NullLogService());\n\n\t\tassertAsRelativePath(ws, input, input);\n\n\t\tconst input2 = '/home/aeschli/workspaces/samples/docker/a.file';\n\t\tassertAsRelativePath(ws, input2, 'a.file');\n\t});\n\n\ttest('asRelativePath, no workspace', function () {\n\t\tconst ws = createExtHostWorkspace(new TestRPCProtocol(), null!, new NullLogService());\n\t\tassertAsRelativePath(ws, '', '');\n\t\tassertAsRelativePath(ws, '/foo/bar', '/foo/bar');\n\t});\n\n\ttest('asRelativePath, multiple folders', function () {\n\t\tconst ws = createExtHostWorkspace(new TestRPCProtocol(), { id: 'foo', folders: [aWorkspaceFolderData(URI.file('/Coding/One'), 0), aWorkspaceFolderData(URI.file('/Coding/Two'), 1)], name: 'Test' }, new NullLogService());\n\t\tassertAsRelativePath(ws, '/Coding/One/file.txt', 'One/file.txt');\n\t\tassertAsRelativePath(ws, '/Coding/Two/files/out.txt', 'Two/files/out.txt');\n\t\tassertAsRelativePath(ws, '/Coding/Two2/files/out.txt', '/Coding/Two2/files/out.txt');\n\t});\n\n\ttest('slightly inconsistent behaviour of asRelativePath and getWorkspaceFolder, #31553', function () {\n\t\tconst mrws = createExtHostWorkspace(new TestRPCProtocol(), { id: 'foo', folders: [aWorkspaceFolderData(URI.file('/Coding/One'), 0), aWorkspaceFolderData(URI.file('/Coding/Two'), 1)], name: 'Test' }, new NullLogService());\n\n\t\tassertAsRelativePath(mrws, '/Coding/One/file.txt', 'One/file.txt');\n\t\tassertAsRelativePath(mrws, '/Coding/One/file.txt', 'One/file.txt', true);\n\t\tassertAsRelativePath(mrws, '/Coding/One/file.txt', 'file.txt', false);\n\t\tassertAsRelativePath(mrws, '/Coding/Two/files/out.txt', 'Two/files/out.txt');\n\t\tassertAsRelativePath(mrws, '/Coding/Two/files/out.txt', 'Two/files/out.txt', true);\n\t\tassertAsRelativePath(mrws, '/Coding/Two/files/out.txt', 'files/out.txt', false);\n\t\tassertAsRelativePath(mrws, '/Coding/Two2/files/out.txt', '/Coding/Two2/files/out.txt');\n\t\tassertAsRelativePath(mrws, '/Coding/Two2/files/out.txt', '/Coding/Two2/files/out.txt', true);\n\t\tassertAsRelativePath(mrws, '/Coding/Two2/files/out.txt', '/Coding/Two2/files/out.txt', false);\n\n\t\tconst srws = createExtHostWorkspace(new TestRPCProtocol(), { id: 'foo', folders: [aWorkspaceFolderData(URI.file('/Coding/One'), 0)], name: 'Test' }, new NullLogService());\n\t\tassertAsRelativePath(srws, '/Coding/One/file.txt', 'file.txt');\n\t\tassertAsRelativePath(srws, '/Coding/One/file.txt', 'file.txt', false);\n\t\tassertAsRelativePath(srws, '/Coding/One/file.txt', 'One/file.txt', true);\n\t\tassertAsRelativePath(srws, '/Coding/Two2/files/out.txt', '/Coding/Two2/files/out.txt');\n\t\tassertAsRelativePath(srws, '/Coding/Two2/files/out.txt', '/Coding/Two2/files/out.txt', true);\n\t\tassertAsRelativePath(srws, '/Coding/Two2/files/out.txt', '/Coding/Two2/files/out.txt', false);\n\t});\n\n\ttest('getPath, legacy', function () {\n\t\tlet ws = createExtHostWorkspace(new TestRPCProtocol(), { id: 'foo', name: 'Test', folders: [] }, new NullLogService());\n\t\tassert.strictEqual(ws.getPath(), undefined);\n\n\t\tws = createExtHostWorkspace(new TestRPCProtocol(), null!, new NullLogService());\n\t\tassert.strictEqual(ws.getPath(), undefined);\n\n\t\tws = createExtHostWorkspace(new TestRPCProtocol(), undefined!, new NullLogService());\n\t\tassert.strictEqual(ws.getPath(), undefined);\n\n\t\tws = createExtHostWorkspace(new TestRPCProtocol(), { id: 'foo', name: 'Test', folders: [aWorkspaceFolderData(URI.file('Folder'), 0), aWorkspaceFolderData(URI.file('Another/Folder'), 1)] }, new NullLogService());\n\t\tassert.strictEqual(ws.getPath()!.replace(/\\\\/g, '/'), '/Folder');\n\n\t\tws = createExtHostWorkspace(new TestRPCProtocol(), { id: 'foo', name: 'Test', folders: [aWorkspaceFolderData(URI.file('/Folder'), 0)] }, new NullLogService());\n\t\tassert.strictEqual(ws.getPath()!.replace(/\\\\/g, '/'), '/Folder');\n\t});\n\n\ttest('WorkspaceFolder has name and index', function () {\n\t\tconst ws = createExtHostWorkspace(new TestRPCProtocol(), { id: 'foo', folders: [aWorkspaceFolderData(URI.file('/Coding/One'), 0), aWorkspaceFolderData(URI.file('/Coding/Two'), 1)], name: 'Test' }, new NullLogService());\n\n\t\tconst [one, two] = ws.getWorkspaceFolders()!;\n\n\t\tassert.strictEqual(one.name, 'One');\n\t\tassert.strictEqual(one.index, 0);\n\t\tassert.strictEqual(two.name, 'Two');\n\t\tassert.strictEqual(two.index, 1);\n\t});\n\n\ttest('getContainingWorkspaceFolder', () => {\n\t\tconst ws = createExtHostWorkspace(new TestRPCProtocol(), {\n\t\t\tid: 'foo',\n\t\t\tname: 'Test',\n\t\t\tfolders: [\n\t\t\t\taWorkspaceFolderData(URI.file('/Coding/One'), 0),\n\t\t\t\taWorkspaceFolderData(URI.file('/Coding/Two'), 1),\n\t\t\t\taWorkspaceFolderData(URI.file('/Coding/Two/Nested'), 2)\n\t\t\t]\n\t\t}, new NullLogService());\n\n\t\tlet folder = ws.getWorkspaceFolder(URI.file('/foo/bar'));\n\t\tassert.strictEqual(folder, undefined);\n\n\t\tfolder = ws.getWorkspaceFolder(URI.file('/Coding/One/file/path.txt'))!;\n\t\tassert.strictEqual(folder.name, 'One');\n\n\t\tfolder = ws.getWorkspaceFolder(URI.file('/Coding/Two/file/path.txt'))!;\n\t\tassert.strictEqual(folder.name, 'Two');\n\n\t\tfolder = ws.getWorkspaceFolder(URI.file('/Coding/Two/Nest'))!;\n\t\tassert.strictEqual(folder.name, 'Two');\n\n\t\tfolder = ws.getWorkspaceFolder(URI.file('/Coding/Two/Nested/file'))!;\n\t\tassert.strictEqual(folder.name, 'Nested');\n\n\t\tfolder = ws.getWorkspaceFolder(URI.file('/Coding/Two/Nested/f'))!;\n\t\tassert.strictEqual(folder.name, 'Nested');\n\n\t\tfolder = ws.getWorkspaceFolder(URI.file('/Coding/Two/Nested'), true)!;\n\t\tassert.strictEqual(folder.name, 'Two');\n\n\t\tfolder = ws.getWorkspaceFolder(URI.file('/Coding/Two/Nested/'), true)!;\n\t\tassert.strictEqual(folder.name, 'Two');\n\n\t\tfolder = ws.getWorkspaceFolder(URI.file('/Coding/Two/Nested'))!;\n\t\tassert.strictEqual(folder.name, 'Nested');\n\n\t\tfolder = ws.getWorkspaceFolder(URI.file('/Coding/Two/Nested/'))!;\n\t\tassert.strictEqual(folder.name, 'Nested');\n\n\t\tfolder = ws.getWorkspaceFolder(URI.file('/Coding/Two'), true)!;\n\t\tassert.strictEqual(folder, undefined);\n\n\t\tfolder = ws.getWorkspaceFolder(URI.file('/Coding/Two'), false)!;\n\t\tassert.strictEqual(folder.name, 'Two');\n\t});\n\n\ttest('Multiroot change event should have a delta, #29641', function (done) {\n\t\tconst ws = createExtHostWorkspace(new TestRPCProtocol(), { id: 'foo', name: 'Test', folders: [] }, new NullLogService());\n\n\t\tlet finished = false;\n\t\tconst finish = (error?: any) => {\n\t\t\tif (!finished) {\n\t\t\t\tfinished = true;\n\t\t\t\tdone(error);\n\t\t\t}\n\t\t};\n\n\t\tlet sub = ws.onDidChangeWorkspace(e => {\n\t\t\ttry {\n\t\t\t\tassert.deepStrictEqual(e.added, []);\n\t\t\t\tassert.deepStrictEqual(e.removed, []);\n\t\t\t} catch (error) {\n\t\t\t\tfinish(error);\n\t\t\t}\n\t\t});\n\t\tws.$acceptWorkspaceData({ id: 'foo', name: 'Test', folders: [] });\n\t\tsub.dispose();\n\n\t\tsub = ws.onDidChangeWorkspace(e => {\n\t\t\ttry {\n\t\t\t\tassert.deepStrictEqual(e.removed, []);\n\t\t\t\tassert.strictEqual(e.added.length, 1);\n\t\t\t\tassert.strictEqual(e.added[0].uri.toString(), 'foo:bar');\n\t\t\t} catch (error) {\n\t\t\t\tfinish(error);\n\t\t\t}\n\t\t});\n\t\tws.$acceptWorkspaceData({ id: 'foo', name: 'Test', folders: [aWorkspaceFolderData(URI.parse('foo:bar'), 0)] });\n\t\tsub.dispose();\n\n\t\tsub = ws.onDidChangeWorkspace(e => {\n\t\t\ttry {\n\t\t\t\tassert.deepStrictEqual(e.removed, []);\n\t\t\t\tassert.strictEqual(e.added.length, 1);\n\t\t\t\tassert.strictEqual(e.added[0].uri.toString(), 'foo:bar2');\n\t\t\t} catch (error) {\n\t\t\t\tfinish(error);\n\t\t\t}\n\t\t});\n\t\tws.$acceptWorkspaceData({ id: 'foo', name: 'Test', folders: [aWorkspaceFolderData(URI.parse('foo:bar'), 0), aWorkspaceFolderData(URI.parse('foo:bar2'), 1)] });\n\t\tsub.dispose();\n\n\t\tsub = ws.onDidChangeWorkspace(e => {\n\t\t\ttry {\n\t\t\t\tassert.strictEqual(e.removed.length, 2);\n\t\t\t\tassert.strictEqual(e.removed[0].uri.toString(), 'foo:bar');\n\t\t\t\tassert.strictEqual(e.removed[1].uri.toString(), 'foo:bar2');\n\n\t\t\t\tassert.strictEqual(e.added.length, 1);\n\t\t\t\tassert.strictEqual(e.added[0].uri.toString(), 'foo:bar3');\n\t\t\t} catch (error) {\n\t\t\t\tfinish(error);\n\t\t\t}\n\t\t});\n\t\tws.$acceptWorkspaceData({ id: 'foo', name: 'Test', folders: [aWorkspaceFolderData(URI.parse('foo:bar3'), 0)] });\n\t\tsub.dispose();\n\t\tfinish();\n\t});\n\n\ttest('Multiroot change keeps existing workspaces live', function () {\n\t\tconst ws = createExtHostWorkspace(new TestRPCProtocol(), { id: 'foo', name: 'Test', folders: [aWorkspaceFolderData(URI.parse('foo:bar'), 0)] }, new NullLogService());\n\n\t\tconst firstFolder = ws.getWorkspaceFolders()![0];\n\t\tws.$acceptWorkspaceData({ id: 'foo', name: 'Test', folders: [aWorkspaceFolderData(URI.parse('foo:bar2'), 0), aWorkspaceFolderData(URI.parse('foo:bar'), 1, 'renamed')] });\n\n\t\tassert.strictEqual(ws.getWorkspaceFolders()![1], firstFolder);\n\t\tassert.strictEqual(firstFolder.index, 1);\n\t\tassert.strictEqual(firstFolder.name, 'renamed');\n\n\t\tws.$acceptWorkspaceData({ id: 'foo', name: 'Test', folders: [aWorkspaceFolderData(URI.parse('foo:bar3'), 0), aWorkspaceFolderData(URI.parse('foo:bar2'), 1), aWorkspaceFolderData(URI.parse('foo:bar'), 2)] });\n\t\tassert.strictEqual(ws.getWorkspaceFolders()![2], firstFolder);\n\t\tassert.strictEqual(firstFolder.index, 2);\n\n\t\tws.$acceptWorkspaceData({ id: 'foo', name: 'Test', folders: [aWorkspaceFolderData(URI.parse('foo:bar3'), 0)] });\n\t\tws.$acceptWorkspaceData({ id: 'foo', name: 'Test', folders: [aWorkspaceFolderData(URI.parse('foo:bar3'), 0), aWorkspaceFolderData(URI.parse('foo:bar'), 1)] });\n\n\t\tassert.notStrictEqual(firstFolder, ws.workspace!.folders[0]);\n\t});\n\n\ttest('updateWorkspaceFolders - invalid arguments', function () {\n\t\tlet ws = createExtHostWorkspace(new TestRPCProtocol(), { id: 'foo', name: 'Test', folders: [] }, new NullLogService());\n\n\t\tassert.strictEqual(false, ws.updateWorkspaceFolders(extensionDescriptor, null!, null!));\n\t\tassert.strictEqual(false, ws.updateWorkspaceFolders(extensionDescriptor, 0, 0));\n\t\tassert.strictEqual(false, ws.updateWorkspaceFolders(extensionDescriptor, 0, 1));\n\t\tassert.strictEqual(false, ws.updateWorkspaceFolders(extensionDescriptor, 1, 0));\n\t\tassert.strictEqual(false, ws.updateWorkspaceFolders(extensionDescriptor, -1, 0));\n\t\tassert.strictEqual(false, ws.updateWorkspaceFolders(extensionDescriptor, -1, -1));\n\n\t\tws = createExtHostWorkspace(new TestRPCProtocol(), { id: 'foo', name: 'Test', folders: [aWorkspaceFolderData(URI.parse('foo:bar'), 0)] }, new NullLogService());\n\n\t\tassert.strictEqual(false, ws.updateWorkspaceFolders(extensionDescriptor, 1, 1));\n\t\tassert.strictEqual(false, ws.updateWorkspaceFolders(extensionDescriptor, 0, 2));\n\t\tassert.strictEqual(false, ws.updateWorkspaceFolders(extensionDescriptor, 0, 1, asUpdateWorkspaceFolderData(URI.parse('foo:bar'))));\n\t});\n\n\ttest('updateWorkspaceFolders - valid arguments', function (done) {\n\t\tlet finished = false;\n\t\tconst finish = (error?: any) => {\n\t\t\tif (!finished) {\n\t\t\t\tfinished = true;\n\t\t\t\tdone(error);\n\t\t\t}\n\t\t};\n\n\t\tconst protocol: IMainContext = {\n\t\t\tgetProxy: () => { return undefined!; },\n\t\t\tset: () => { return undefined!; },\n\t\t\tdispose: () => { },\n\t\t\tassertRegistered: () => { },\n\t\t\tdrain: () => { return undefined!; },\n\t\t};\n\n\t\tconst ws = createExtHostWorkspace(protocol, { id: 'foo', name: 'Test', folders: [] }, new NullLogService());\n\n\t\t//\n\t\t// Add one folder\n\t\t//\n\n\t\tassert.strictEqual(true, ws.updateWorkspaceFolders(extensionDescriptor, 0, 0, asUpdateWorkspaceFolderData(URI.parse('foo:bar'))));\n\t\tassert.strictEqual(1, ws.workspace!.folders.length);\n\t\tassert.strictEqual(ws.workspace!.folders[0].uri.toString(), URI.parse('foo:bar').toString());\n\n\t\tconst firstAddedFolder = ws.getWorkspaceFolders()![0];\n\n\t\tlet gotEvent = false;\n\t\tlet sub = ws.onDidChangeWorkspace(e => {\n\t\t\ttry {\n\t\t\t\tassert.deepStrictEqual(e.removed, []);\n\t\t\t\tassert.strictEqual(e.added.length, 1);\n\t\t\t\tassert.strictEqual(e.added[0].uri.toString(), 'foo:bar');\n\t\t\t\tassert.strictEqual(e.added[0], firstAddedFolder); // verify object is still live\n\t\t\t\tgotEvent = true;\n\t\t\t} catch (error) {\n\t\t\t\tfinish(error);\n\t\t\t}\n\t\t});\n\t\tws.$acceptWorkspaceData({ id: 'foo', name: 'Test', folders: [aWorkspaceFolderData(URI.parse('foo:bar'), 0)] }); // simulate acknowledgement from main side\n\t\tassert.strictEqual(gotEvent, true);\n\t\tsub.dispose();\n\t\tassert.strictEqual(ws.getWorkspaceFolders()![0], firstAddedFolder); // verify object is still live\n\n\t\t//\n\t\t// Add two more folders\n\t\t//\n\n\t\tassert.strictEqual(true, ws.updateWorkspaceFolders(extensionDescriptor, 1, 0, asUpdateWorkspaceFolderData(URI.parse('foo:bar1')), asUpdateWorkspaceFolderData(URI.parse('foo:bar2'))));\n\t\tassert.strictEqual(3, ws.workspace!.folders.length);\n\t\tassert.strictEqual(ws.workspace!.folders[0].uri.toString(), URI.parse('foo:bar').toString());\n\t\tassert.strictEqual(ws.workspace!.folders[1].uri.toString(), URI.parse('foo:bar1').toString());\n\t\tassert.strictEqual(ws.workspace!.folders[2].uri.toString(), URI.parse('foo:bar2').toString());\n\n\t\tconst secondAddedFolder = ws.getWorkspaceFolders()![1];\n\t\tconst thirdAddedFolder = ws.getWorkspaceFolders()![2];\n\n\t\tgotEvent = false;\n\t\tsub = ws.onDidChangeWorkspace(e => {\n\t\t\ttry {\n\t\t\t\tassert.deepStrictEqual(e.removed, []);\n\t\t\t\tassert.strictEqual(e.added.length, 2);\n\t\t\t\tassert.strictEqual(e.added[0].uri.toString(), 'foo:bar1');\n\t\t\t\tassert.strictEqual(e.added[1].uri.toString(), 'foo:bar2');\n\t\t\t\tassert.strictEqual(e.added[0], secondAddedFolder);\n\t\t\t\tassert.strictEqual(e.added[1], thirdAddedFolder);\n\t\t\t\tgotEvent = true;\n\t\t\t} catch (error) {\n\t\t\t\tfinish(error);\n\t\t\t}\n\t\t});\n\t\tws.$acceptWorkspaceData({ id: 'foo', name: 'Test', folders: [aWorkspaceFolderData(URI.parse('foo:bar'), 0), aWorkspaceFolderData(URI.parse('foo:bar1'), 1), aWorkspaceFolderData(URI.parse('foo:bar2'), 2)] }); // simulate acknowledgement from main side\n\t\tassert.strictEqual(gotEvent, true);\n\t\tsub.dispose();\n\t\tassert.strictEqual(ws.getWorkspaceFolders()![0], firstAddedFolder); // verify object is still live\n\t\tassert.strictEqual(ws.getWorkspaceFolders()![1], secondAddedFolder); // verify object is still live\n\t\tassert.strictEqual(ws.getWorkspaceFolders()![2], thirdAddedFolder); // verify object is still live\n\n\t\t//\n\t\t// Remove one folder\n\t\t//\n\n\t\tassert.strictEqual(true, ws.updateWorkspaceFolders(extensionDescriptor, 2, 1));\n\t\tassert.strictEqual(2, ws.workspace!.folders.length);\n\t\tassert.strictEqual(ws.workspace!.folders[0].uri.toString(), URI.parse('foo:bar').toString());\n\t\tassert.strictEqual(ws.workspace!.folders[1].uri.toString(), URI.parse('foo:bar1').toString());\n\n\t\tgotEvent = false;\n\t\tsub = ws.onDidChangeWorkspace(e => {\n\t\t\ttry {\n\t\t\t\tassert.deepStrictEqual(e.added, []);\n\t\t\t\tassert.strictEqual(e.removed.length, 1);\n\t\t\t\tassert.strictEqual(e.removed[0], thirdAddedFolder);\n\t\t\t\tgotEvent = true;\n\t\t\t} catch (error) {\n\t\t\t\tfinish(error);\n\t\t\t}\n\t\t});\n\t\tws.$acceptWorkspaceData({ id: 'foo', name: 'Test', folders: [aWorkspaceFolderData(URI.parse('foo:bar'), 0), aWorkspaceFolderData(URI.parse('foo:bar1'), 1)] }); // simulate acknowledgement from main side\n\t\tassert.strictEqual(gotEvent, true);\n\t\tsub.dispose();\n\t\tassert.strictEqual(ws.getWorkspaceFolders()![0], firstAddedFolder); // verify object is still live\n\t\tassert.strictEqual(ws.getWorkspaceFolders()![1], secondAddedFolder); // verify object is still live\n\n\t\t//\n\t\t// Rename folder\n\t\t//\n\n\t\tassert.strictEqual(true, ws.updateWorkspaceFolders(extensionDescriptor, 0, 2, asUpdateWorkspaceFolderData(URI.parse('foo:bar'), 'renamed 1'), asUpdateWorkspaceFolderData(URI.parse('foo:bar1'), 'renamed 2')));\n\t\tassert.strictEqual(2, ws.workspace!.folders.length);\n\t\tassert.strictEqual(ws.workspace!.folders[0].uri.toString(), URI.parse('foo:bar').toString());\n\t\tassert.strictEqual(ws.workspace!.folders[1].uri.toString(), URI.parse('foo:bar1').toString());\n\t\tassert.strictEqual(ws.workspace!.folders[0].name, 'renamed 1');\n\t\tassert.strictEqual(ws.workspace!.folders[1].name, 'renamed 2');\n\t\tassert.strictEqual(ws.getWorkspaceFolders()![0].name, 'renamed 1');\n\t\tassert.strictEqual(ws.getWorkspaceFolders()![1].name, 'renamed 2');\n\n\t\tgotEvent = false;\n\t\tsub = ws.onDidChangeWorkspace(e => {\n\t\t\ttry {\n\t\t\t\tassert.deepStrictEqual(e.added, []);\n\t\t\t\tassert.strictEqual(e.removed.length, 0);\n\t\t\t\tgotEvent = true;\n\t\t\t} catch (error) {\n\t\t\t\tfinish(error);\n\t\t\t}\n\t\t});\n\t\tws.$acceptWorkspaceData({ id: 'foo', name: 'Test', folders: [aWorkspaceFolderData(URI.parse('foo:bar'), 0, 'renamed 1'), aWorkspaceFolderData(URI.parse('foo:bar1'), 1, 'renamed 2')] }); // simulate acknowledgement from main side\n\t\tassert.strictEqual(gotEvent, true);\n\t\tsub.dispose();\n\t\tassert.strictEqual(ws.getWorkspaceFolders()![0], firstAddedFolder); // verify object is still live\n\t\tassert.strictEqual(ws.getWorkspaceFolders()![1], secondAddedFolder); // verify object is still live\n\t\tassert.strictEqual(ws.workspace!.folders[0].name, 'renamed 1');\n\t\tassert.strictEqual(ws.workspace!.folders[1].name, 'renamed 2');\n\t\tassert.strictEqual(ws.getWorkspaceFolders()![0].name, 'renamed 1');\n\t\tassert.strictEqual(ws.getWorkspaceFolders()![1].name, 'renamed 2');\n\n\t\t//\n\t\t// Add and remove folders\n\t\t//\n\n\t\tassert.strictEqual(true, ws.updateWorkspaceFolders(extensionDescriptor, 0, 2, asUpdateWorkspaceFolderData(URI.parse('foo:bar3')), asUpdateWorkspaceFolderData(URI.parse('foo:bar4'))));\n\t\tassert.strictEqual(2, ws.workspace!.folders.length);\n\t\tassert.strictEqual(ws.workspace!.folders[0].uri.toString(), URI.parse('foo:bar3').toString());\n\t\tassert.strictEqual(ws.workspace!.folders[1].uri.toString(), URI.parse('foo:bar4').toString());\n\n\t\tconst fourthAddedFolder = ws.getWorkspaceFolders()![0];\n\t\tconst fifthAddedFolder = ws.getWorkspaceFolders()![1];\n\n\t\tgotEvent = false;\n\t\tsub = ws.onDidChangeWorkspace(e => {\n\t\t\ttry {\n\t\t\t\tassert.strictEqual(e.added.length, 2);\n\t\t\t\tassert.strictEqual(e.added[0], fourthAddedFolder);\n\t\t\t\tassert.strictEqual(e.added[1], fifthAddedFolder);\n\t\t\t\tassert.strictEqual(e.removed.length, 2);\n\t\t\t\tassert.strictEqual(e.removed[0], firstAddedFolder);\n\t\t\t\tassert.strictEqual(e.removed[1], secondAddedFolder);\n\t\t\t\tgotEvent = true;\n\t\t\t} catch (error) {\n\t\t\t\tfinish(error);\n\t\t\t}\n\t\t});\n\t\tws.$acceptWorkspaceData({ id: 'foo', name: 'Test', folders: [aWorkspaceFolderData(URI.parse('foo:bar3'), 0), aWorkspaceFolderData(URI.parse('foo:bar4'), 1)] }); // simulate acknowledgement from main side\n\t\tassert.strictEqual(gotEvent, true);\n\t\tsub.dispose();\n\t\tassert.strictEqual(ws.getWorkspaceFolders()![0], fourthAddedFolder); // verify object is still live\n\t\tassert.strictEqual(ws.getWorkspaceFolders()![1], fifthAddedFolder); // verify object is still live\n\n\t\t//\n\t\t// Swap folders\n\t\t//\n\n\t\tassert.strictEqual(true, ws.updateWorkspaceFolders(extensionDescriptor, 0, 2, asUpdateWorkspaceFolderData(URI.parse('foo:bar4')), asUpdateWorkspaceFolderData(URI.parse('foo:bar3'))));\n\t\tassert.strictEqual(2, ws.workspace!.folders.length);\n\t\tassert.strictEqual(ws.workspace!.folders[0].uri.toString(), URI.parse('foo:bar4').toString());\n\t\tassert.strictEqual(ws.workspace!.folders[1].uri.toString(), URI.parse('foo:bar3').toString());\n\n\t\tassert.strictEqual(ws.getWorkspaceFolders()![0], fifthAddedFolder); // verify object is still live\n\t\tassert.strictEqual(ws.getWorkspaceFolders()![1], fourthAddedFolder); // verify object is still live\n\n\t\tgotEvent = false;\n\t\tsub = ws.onDidChangeWorkspace(e => {\n\t\t\ttry {\n\t\t\t\tassert.strictEqual(e.added.length, 0);\n\t\t\t\tassert.strictEqual(e.removed.length, 0);\n\t\t\t\tgotEvent = true;\n\t\t\t} catch (error) {\n\t\t\t\tfinish(error);\n\t\t\t}\n\t\t});\n\t\tws.$acceptWorkspaceData({ id: 'foo', name: 'Test', folders: [aWorkspaceFolderData(URI.parse('foo:bar4'), 0), aWorkspaceFolderData(URI.parse('foo:bar3'), 1)] }); // simulate acknowledgement from main side\n\t\tassert.strictEqual(gotEvent, true);\n\t\tsub.dispose();\n\t\tassert.strictEqual(ws.getWorkspaceFolders()![0], fifthAddedFolder); // verify object is still live\n\t\tassert.strictEqual(ws.getWorkspaceFolders()![1], fourthAddedFolder); // verify object is still live\n\t\tassert.strictEqual(fifthAddedFolder.index, 0);\n\t\tassert.strictEqual(fourthAddedFolder.index, 1);\n\n\t\t//\n\t\t// Add one folder after the other without waiting for confirmation (not supported currently)\n\t\t//\n\n\t\tassert.strictEqual(true, ws.updateWorkspaceFolders(extensionDescriptor, 2, 0, asUpdateWorkspaceFolderData(URI.parse('foo:bar5'))));\n\n\t\tassert.strictEqual(3, ws.workspace!.folders.length);\n\t\tassert.strictEqual(ws.workspace!.folders[0].uri.toString(), URI.parse('foo:bar4').toString());\n\t\tassert.strictEqual(ws.workspace!.folders[1].uri.toString(), URI.parse('foo:bar3').toString());\n\t\tassert.strictEqual(ws.workspace!.folders[2].uri.toString(), URI.parse('foo:bar5').toString());\n\n\t\tconst sixthAddedFolder = ws.getWorkspaceFolders()![2];\n\n\t\tgotEvent = false;\n\t\tsub = ws.onDidChangeWorkspace(e => {\n\t\t\ttry {\n\t\t\t\tassert.strictEqual(e.added.length, 1);\n\t\t\t\tassert.strictEqual(e.added[0], sixthAddedFolder);\n\t\t\t\tgotEvent = true;\n\t\t\t} catch (error) {\n\t\t\t\tfinish(error);\n\t\t\t}\n\t\t});\n\t\tws.$acceptWorkspaceData({\n\t\t\tid: 'foo', name: 'Test', folders: [\n\t\t\t\taWorkspaceFolderData(URI.parse('foo:bar4'), 0),\n\t\t\t\taWorkspaceFolderData(URI.parse('foo:bar3'), 1),\n\t\t\t\taWorkspaceFolderData(URI.parse('foo:bar5'), 2)\n\t\t\t]\n\t\t}); // simulate acknowledgement from main side\n\t\tassert.strictEqual(gotEvent, true);\n\t\tsub.dispose();\n\n\t\tassert.strictEqual(ws.getWorkspaceFolders()![0], fifthAddedFolder); // verify object is still live\n\t\tassert.strictEqual(ws.getWorkspaceFolders()![1], fourthAddedFolder); // verify object is still live\n\t\tassert.strictEqual(ws.getWorkspaceFolders()![2], sixthAddedFolder); // verify object is still live\n\n\t\tfinish();\n\t});\n\n\ttest('Multiroot change event is immutable', function (done) {\n\t\tlet finished = false;\n\t\tconst finish = (error?: any) => {\n\t\t\tif (!finished) {\n\t\t\t\tfinished = true;\n\t\t\t\tdone(error);\n\t\t\t}\n\t\t};\n\n\t\tconst ws = createExtHostWorkspace(new TestRPCProtocol(), { id: 'foo', name: 'Test', folders: [] }, new NullLogService());\n\t\tconst sub = ws.onDidChangeWorkspace(e => {\n\t\t\ttry {\n\t\t\t\tassert.throws(() => {\n\t\t\t\t\t(<any>e).added = [];\n\t\t\t\t});\n\t\t\t\t// assert.throws(() => {\n\t\t\t\t// \t(<any>e.added)[0] = null;\n\t\t\t\t// });\n\t\t\t} catch (error) {\n\t\t\t\tfinish(error);\n\t\t\t}\n\t\t});\n\t\tws.$acceptWorkspaceData({ id: 'foo', name: 'Test', folders: [] });\n\t\tsub.dispose();\n\t\tfinish();\n\t});\n\n\ttest('`vscode.workspace.getWorkspaceFolder(file)` don\\'t return workspace folder when file open from command line. #36221', function () {\n\t\tif (isWindows) {\n\n\t\t\tconst ws = createExtHostWorkspace(new TestRPCProtocol(), {\n\t\t\t\tid: 'foo', name: 'Test', folders: [\n\t\t\t\t\taWorkspaceFolderData(URI.file('c:/Users/marek/Desktop/vsc_test/'), 0)\n\t\t\t\t]\n\t\t\t}, new NullLogService());\n\n\t\t\tassert.ok(ws.getWorkspaceFolder(URI.file('c:/Users/marek/Desktop/vsc_test/a.txt')));\n\t\t\tassert.ok(ws.getWorkspaceFolder(URI.file('C:/Users/marek/Desktop/vsc_test/b.txt')));\n\t\t}\n\t});\n\n\tfunction aWorkspaceFolderData(uri: URI, index: number, name: string = ''): IWorkspaceFolderData {\n\t\treturn {\n\t\t\turi,\n\t\t\tindex,\n\t\t\tname: name || basename(uri.path)\n\t\t};\n\t}\n\n\tfunction asUpdateWorkspaceFolderData(uri: URI, name?: string): { uri: URI; name?: string } {\n\t\treturn { uri, name };\n\t}\n\n\tsuite('findFiles -', function () {\n\t\ttest('string include', () => {\n\t\t\tconst root = '/project/foo';\n\t\t\tconst rpcProtocol = new TestRPCProtocol();\n\n\t\t\tlet mainThreadCalled = false;\n\t\t\trpcProtocol.set(MainContext.MainThreadWorkspace, new class extends mock<MainThreadWorkspace>() {\n\t\t\t\toverride $startFileSearch(_includeFolder: UriComponents | null, options: IFileQueryBuilderOptions, token: CancellationToken): Promise<URI[] | null> {\n\t\t\t\t\tmainThreadCalled = true;\n\t\t\t\t\tassert.strictEqual(options.includePattern, 'foo');\n\t\t\t\t\tassert.strictEqual(_includeFolder, null);\n\t\t\t\t\tassert.strictEqual(options.excludePattern, undefined);\n\t\t\t\t\tassert.strictEqual(options.disregardExcludeSettings, false);\n\t\t\t\t\tassert.strictEqual(options.maxResults, 10);\n\t\t\t\t\treturn Promise.resolve(null);\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tconst ws = createExtHostWorkspace(rpcProtocol, { id: 'foo', folders: [aWorkspaceFolderData(URI.file(root), 0)], name: 'Test' }, new NullLogService());\n\t\t\treturn ws.findFiles('foo', undefined, 10, new ExtensionIdentifier('test')).then(() => {\n\t\t\t\tassert(mainThreadCalled, 'mainThreadCalled');\n\t\t\t});\n\t\t});\n\n\t\tfunction testFindFilesInclude(pattern: RelativePattern) {\n\t\t\tconst root = '/project/foo';\n\t\t\tconst rpcProtocol = new TestRPCProtocol();\n\n\t\t\tlet mainThreadCalled = false;\n\t\t\trpcProtocol.set(MainContext.MainThreadWorkspace, new class extends mock<MainThreadWorkspace>() {\n\t\t\t\toverride $startFileSearch(_includeFolder: UriComponents | null, options: IFileQueryBuilderOptions, token: CancellationToken): Promise<URI[] | null> {\n\t\t\t\t\tmainThreadCalled = true;\n\t\t\t\t\tassert.strictEqual(options.includePattern, 'glob/**');\n\t\t\t\t\tassert.deepStrictEqual(_includeFolder ? URI.from(_includeFolder).toJSON() : null, URI.file('/other/folder').toJSON());\n\t\t\t\t\tassert.strictEqual(options.excludePattern, undefined);\n\t\t\t\t\tassert.strictEqual(options.disregardExcludeSettings, false);\n\t\t\t\t\treturn Promise.resolve(null);\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tconst ws = createExtHostWorkspace(rpcProtocol, { id: 'foo', folders: [aWorkspaceFolderData(URI.file(root), 0)], name: 'Test' }, new NullLogService());\n\t\t\treturn ws.findFiles(pattern, undefined, 10, new ExtensionIdentifier('test')).then(() => {\n\t\t\t\tassert(mainThreadCalled, 'mainThreadCalled');\n\t\t\t});\n\t\t}\n\n\t\ttest('RelativePattern include (string)', () => {\n\t\t\treturn testFindFilesInclude(new RelativePattern('/other/folder', 'glob/**'));\n\t\t});\n\n\t\ttest('RelativePattern include (URI)', () => {\n\t\t\treturn testFindFilesInclude(new RelativePattern(URI.file('/other/folder'), 'glob/**'));\n\t\t});\n\n\t\ttest('no excludes', () => {\n\t\t\tconst root = '/project/foo';\n\t\t\tconst rpcProtocol = new TestRPCProtocol();\n\n\t\t\tlet mainThreadCalled = false;\n\t\t\trpcProtocol.set(MainContext.MainThreadWorkspace, new class extends mock<MainThreadWorkspace>() {\n\t\t\t\toverride $startFileSearch(_includeFolder: UriComponents | null, options: IFileQueryBuilderOptions, token: CancellationToken): Promise<URI[] | null> {\n\t\t\t\t\tmainThreadCalled = true;\n\t\t\t\t\tassert.strictEqual(options.includePattern, 'glob/**');\n\t\t\t\t\tassert.deepStrictEqual(URI.revive(_includeFolder!).toString(), URI.file('/other/folder').toString());\n\t\t\t\t\tassert.strictEqual(options.excludePattern, undefined);\n\t\t\t\t\tassert.strictEqual(options.disregardExcludeSettings, true);\n\t\t\t\t\treturn Promise.resolve(null);\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tconst ws = createExtHostWorkspace(rpcProtocol, { id: 'foo', folders: [aWorkspaceFolderData(URI.file(root), 0)], name: 'Test' }, new NullLogService());\n\t\t\treturn ws.findFiles(new RelativePattern('/other/folder', 'glob/**'), null, 10, new ExtensionIdentifier('test')).then(() => {\n\t\t\t\tassert(mainThreadCalled, 'mainThreadCalled');\n\t\t\t});\n\t\t});\n\n\t\ttest('with cancelled token', () => {\n\t\t\tconst root = '/project/foo';\n\t\t\tconst rpcProtocol = new TestRPCProtocol();\n\n\t\t\tlet mainThreadCalled = false;\n\t\t\trpcProtocol.set(MainContext.MainThreadWorkspace, new class extends mock<MainThreadWorkspace>() {\n\t\t\t\toverride $startFileSearch(_includeFolder: UriComponents | null, options: IFileQueryBuilderOptions, token: CancellationToken): Promise<URI[] | null> {\n\t\t\t\t\tmainThreadCalled = true;\n\t\t\t\t\treturn Promise.resolve(null);\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tconst ws = createExtHostWorkspace(rpcProtocol, { id: 'foo', folders: [aWorkspaceFolderData(URI.file(root), 0)], name: 'Test' }, new NullLogService());\n\n\t\t\tconst token = CancellationToken.Cancelled;\n\t\t\treturn ws.findFiles(new RelativePattern('/other/folder', 'glob/**'), null, 10, new ExtensionIdentifier('test'), token).then(() => {\n\t\t\t\tassert(!mainThreadCalled, '!mainThreadCalled');\n\t\t\t});\n\t\t});\n\n\t\ttest('RelativePattern exclude', () => {\n\t\t\tconst root = '/project/foo';\n\t\t\tconst rpcProtocol = new TestRPCProtocol();\n\n\t\t\tlet mainThreadCalled = false;\n\t\t\trpcProtocol.set(MainContext.MainThreadWorkspace, new class extends mock<MainThreadWorkspace>() {\n\t\t\t\toverride $startFileSearch(_includeFolder: UriComponents | null, options: IFileQueryBuilderOptions, token: CancellationToken): Promise<URI[] | null> {\n\t\t\t\t\tmainThreadCalled = true;\n\t\t\t\t\tassert.strictEqual(options.disregardExcludeSettings, false);\n\t\t\t\t\tassert.strictEqual(options.excludePattern?.length, 1);\n\t\t\t\t\tassert.strictEqual(options.excludePattern[0].pattern, 'glob/**'); // Note that the base portion is ignored, see #52651\n\t\t\t\t\treturn Promise.resolve(null);\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tconst ws = createExtHostWorkspace(rpcProtocol, { id: 'foo', folders: [aWorkspaceFolderData(URI.file(root), 0)], name: 'Test' }, new NullLogService());\n\t\t\treturn ws.findFiles('', new RelativePattern(root, 'glob/**'), 10, new ExtensionIdentifier('test')).then(() => {\n\t\t\t\tassert(mainThreadCalled, 'mainThreadCalled');\n\t\t\t});\n\t\t});\n\t});\n\n\tsuite('findFiles2 -', function () {\n\t\ttest('string include', () => {\n\t\t\tconst root = '/project/foo';\n\t\t\tconst rpcProtocol = new TestRPCProtocol();\n\n\t\t\tlet mainThreadCalled = false;\n\t\t\trpcProtocol.set(MainContext.MainThreadWorkspace, new class extends mock<MainThreadWorkspace>() {\n\t\t\t\toverride $startFileSearch(_includeFolder: UriComponents | null, options: IFileQueryBuilderOptions, token: CancellationToken): Promise<URI[] | null> {\n\t\t\t\t\tmainThreadCalled = true;\n\t\t\t\t\tassert.strictEqual(options.filePattern, 'foo');\n\t\t\t\t\tassert.strictEqual(options.includePattern, undefined);\n\t\t\t\t\tassert.strictEqual(_includeFolder, null);\n\t\t\t\t\tassert.strictEqual(options.excludePattern, undefined);\n\t\t\t\t\tassert.strictEqual(options.disregardExcludeSettings, false);\n\t\t\t\t\tassert.strictEqual(options.maxResults, 10);\n\t\t\t\t\treturn Promise.resolve(null);\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tconst ws = createExtHostWorkspace(rpcProtocol, { id: 'foo', folders: [aWorkspaceFolderData(URI.file(root), 0)], name: 'Test' }, new NullLogService());\n\t\t\treturn ws.findFiles2('foo', { maxResults: 10, useDefaultExcludes: true }, new ExtensionIdentifier('test')).then(() => {\n\t\t\t\tassert(mainThreadCalled, 'mainThreadCalled');\n\t\t\t});\n\t\t});\n\n\t\tfunction testFindFiles2Include(pattern: RelativePattern) {\n\t\t\tconst root = '/project/foo';\n\t\t\tconst rpcProtocol = new TestRPCProtocol();\n\n\t\t\tlet mainThreadCalled = false;\n\t\t\trpcProtocol.set(MainContext.MainThreadWorkspace, new class extends mock<MainThreadWorkspace>() {\n\t\t\t\toverride $startFileSearch(_includeFolder: UriComponents | null, options: IFileQueryBuilderOptions, token: CancellationToken): Promise<URI[] | null> {\n\t\t\t\t\tmainThreadCalled = true;\n\t\t\t\t\tassert.strictEqual(options.filePattern, 'glob/**');\n\t\t\t\t\tassert.strictEqual(options.includePattern, undefined);\n\t\t\t\t\tassert.deepStrictEqual(_includeFolder ? URI.from(_includeFolder).toJSON() : null, URI.file('/other/folder').toJSON());\n\t\t\t\t\tassert.strictEqual(options.excludePattern, undefined);\n\t\t\t\t\tassert.strictEqual(options.disregardExcludeSettings, false);\n\t\t\t\t\treturn Promise.resolve(null);\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tconst ws = createExtHostWorkspace(rpcProtocol, { id: 'foo', folders: [aWorkspaceFolderData(URI.file(root), 0)], name: 'Test' }, new NullLogService());\n\t\t\treturn ws.findFiles2(pattern, { maxResults: 10 }, new ExtensionIdentifier('test')).then(() => {\n\t\t\t\tassert(mainThreadCalled, 'mainThreadCalled');\n\t\t\t});\n\t\t}\n\n\t\ttest('RelativePattern include (string)', () => {\n\t\t\treturn testFindFiles2Include(new RelativePattern('/other/folder', 'glob/**'));\n\t\t});\n\n\t\ttest('RelativePattern include (URI)', () => {\n\t\t\treturn testFindFiles2Include(new RelativePattern(URI.file('/other/folder'), 'glob/**'));\n\t\t});\n\n\t\ttest('no excludes', () => {\n\t\t\tconst root = '/project/foo';\n\t\t\tconst rpcProtocol = new TestRPCProtocol();\n\n\t\t\tlet mainThreadCalled = false;\n\t\t\trpcProtocol.set(MainContext.MainThreadWorkspace, new class extends mock<MainThreadWorkspace>() {\n\t\t\t\toverride $startFileSearch(_includeFolder: UriComponents | null, options: IFileQueryBuilderOptions, token: CancellationToken): Promise<URI[] | null> {\n\t\t\t\t\tmainThreadCalled = true;\n\t\t\t\t\tassert.strictEqual(options.filePattern, 'glob/**');\n\t\t\t\t\tassert.strictEqual(options.includePattern, undefined);\n\t\t\t\t\tassert.deepStrictEqual(URI.revive(_includeFolder!).toString(), URI.file('/other/folder').toString());\n\t\t\t\t\tassert.strictEqual(options.excludePattern, undefined);\n\t\t\t\t\tassert.strictEqual(options.disregardExcludeSettings, false);\n\t\t\t\t\treturn Promise.resolve(null);\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tconst ws = createExtHostWorkspace(rpcProtocol, { id: 'foo', folders: [aWorkspaceFolderData(URI.file(root), 0)], name: 'Test' }, new NullLogService());\n\t\t\treturn ws.findFiles2(new RelativePattern('/other/folder', 'glob/**'), {}, new ExtensionIdentifier('test')).then(() => {\n\t\t\t\tassert(mainThreadCalled, 'mainThreadCalled');\n\t\t\t});\n\t\t});\n\n\t\ttest('with cancelled token', () => {\n\t\t\tconst root = '/project/foo';\n\t\t\tconst rpcProtocol = new TestRPCProtocol();\n\n\t\t\tlet mainThreadCalled = false;\n\t\t\trpcProtocol.set(MainContext.MainThreadWorkspace, new class extends mock<MainThreadWorkspace>() {\n\t\t\t\toverride $startFileSearch(_includeFolder: UriComponents | null, options: IFileQueryBuilderOptions, token: CancellationToken): Promise<URI[] | null> {\n\t\t\t\t\tmainThreadCalled = true;\n\t\t\t\t\treturn Promise.resolve(null);\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tconst ws = createExtHostWorkspace(rpcProtocol, { id: 'foo', folders: [aWorkspaceFolderData(URI.file(root), 0)], name: 'Test' }, new NullLogService());\n\n\t\t\tconst token = CancellationToken.Cancelled;\n\t\t\treturn ws.findFiles2(new RelativePattern('/other/folder', 'glob/**'), {}, new ExtensionIdentifier('test'), token).then(() => {\n\t\t\t\tassert(!mainThreadCalled, '!mainThreadCalled');\n\t\t\t});\n\t\t});\n\n\t\ttest('RelativePattern exclude', () => {\n\t\t\tconst root = '/project/foo';\n\t\t\tconst rpcProtocol = new TestRPCProtocol();\n\n\t\t\tlet mainThreadCalled = false;\n\t\t\trpcProtocol.set(MainContext.MainThreadWorkspace, new class extends mock<MainThreadWorkspace>() {\n\t\t\t\toverride $startFileSearch(_includeFolder: UriComponents | null, options: IFileQueryBuilderOptions, token: CancellationToken): Promise<URI[] | null> {\n\t\t\t\t\tmainThreadCalled = true;\n\t\t\t\t\tassert.strictEqual(options.disregardExcludeSettings, false);\n\t\t\t\t\tassert.strictEqual(options.excludePattern?.length, 1);\n\t\t\t\t\tassert.strictEqual(options.excludePattern[0].pattern, 'glob/**'); // Note that the base portion is ignored, see #52651\n\t\t\t\t\treturn Promise.resolve(null);\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tconst ws = createExtHostWorkspace(rpcProtocol, { id: 'foo', folders: [aWorkspaceFolderData(URI.file(root), 0)], name: 'Test' }, new NullLogService());\n\t\t\treturn ws.findFiles2('', { exclude: new RelativePattern(root, 'glob/**') }, new ExtensionIdentifier('test')).then(() => {\n\t\t\t\tassert(mainThreadCalled, 'mainThreadCalled');\n\t\t\t});\n\t\t});\n\t\ttest('useIgnoreFiles', () => {\n\t\t\tconst root = '/project/foo';\n\t\t\tconst rpcProtocol = new TestRPCProtocol();\n\n\t\t\tlet mainThreadCalled = false;\n\t\t\trpcProtocol.set(MainContext.MainThreadWorkspace, new class extends mock<MainThreadWorkspace>() {\n\t\t\t\toverride $startFileSearch(_includeFolder: UriComponents | null, options: IFileQueryBuilderOptions, token: CancellationToken): Promise<URI[] | null> {\n\t\t\t\t\tmainThreadCalled = true;\n\t\t\t\t\tassert.strictEqual(options.disregardExcludeSettings, false);\n\t\t\t\t\tassert.strictEqual(options.disregardIgnoreFiles, false);\n\t\t\t\t\tassert.strictEqual(options.disregardGlobalIgnoreFiles, false);\n\t\t\t\t\tassert.strictEqual(options.disregardParentIgnoreFiles, false);\n\t\t\t\t\treturn Promise.resolve(null);\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tconst ws = createExtHostWorkspace(rpcProtocol, { id: 'foo', folders: [aWorkspaceFolderData(URI.file(root), 0)], name: 'Test' }, new NullLogService());\n\t\t\treturn ws.findFiles2('', { useIgnoreFiles: true, useParentIgnoreFiles: true, useGlobalIgnoreFiles: true }, new ExtensionIdentifier('test')).then(() => {\n\t\t\t\tassert(mainThreadCalled, 'mainThreadCalled');\n\t\t\t});\n\t\t});\n\n\t\ttest('use symlinks', () => {\n\t\t\tconst root = '/project/foo';\n\t\t\tconst rpcProtocol = new TestRPCProtocol();\n\n\t\t\tlet mainThreadCalled = false;\n\t\t\trpcProtocol.set(MainContext.MainThreadWorkspace, new class extends mock<MainThreadWorkspace>() {\n\t\t\t\toverride $startFileSearch(_includeFolder: UriComponents | null, options: IFileQueryBuilderOptions, token: CancellationToken): Promise<URI[] | null> {\n\t\t\t\t\tmainThreadCalled = true;\n\t\t\t\t\tassert.strictEqual(options.ignoreSymlinks, false);\n\t\t\t\t\treturn Promise.resolve(null);\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tconst ws = createExtHostWorkspace(rpcProtocol, { id: 'foo', folders: [aWorkspaceFolderData(URI.file(root), 0)], name: 'Test' }, new NullLogService());\n\t\t\treturn ws.findFiles2('', { followSymlinks: true }, new ExtensionIdentifier('test')).then(() => {\n\t\t\t\tassert(mainThreadCalled, 'mainThreadCalled');\n\t\t\t});\n\t\t});\n\t});\n\n\tsuite('findFiles2New -', function () {\n\t\ttest('string include', () => {\n\t\t\tconst root = '/project/foo';\n\t\t\tconst rpcProtocol = new TestRPCProtocol();\n\n\t\t\tlet mainThreadCalled = false;\n\t\t\trpcProtocol.set(MainContext.MainThreadWorkspace, new class extends mock<MainThreadWorkspace>() {\n\t\t\t\toverride $startFileSearch(_includeFolder: UriComponents | null, options: IFileQueryBuilderOptions, token: CancellationToken): Promise<URI[] | null> {\n\t\t\t\t\tmainThreadCalled = true;\n\t\t\t\t\tassert.strictEqual(options.filePattern, 'foo');\n\t\t\t\t\tassert.strictEqual(options.includePattern, undefined);\n\t\t\t\t\tassert.strictEqual(_includeFolder, null);\n\t\t\t\t\tassert.strictEqual(options.excludePattern, undefined);\n\t\t\t\t\tassert.strictEqual(options.disregardExcludeSettings, false);\n\t\t\t\t\tassert.strictEqual(options.maxResults, 10);\n\t\t\t\t\treturn Promise.resolve(null);\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tconst ws = createExtHostWorkspace(rpcProtocol, { id: 'foo', folders: [aWorkspaceFolderData(URI.file(root), 0)], name: 'Test' }, new NullLogService());\n\t\t\treturn ws.findFiles2New(['foo'], { maxResults: 10, useExcludeSettings: ExcludeSettingOptions.FilesExclude }, new ExtensionIdentifier('test')).then(() => {\n\t\t\t\tassert(mainThreadCalled, 'mainThreadCalled');\n\t\t\t});\n\t\t});\n\n\t\tfunction testFindFiles2NewInclude(pattern: RelativePattern[]) {\n\t\t\tconst root = '/project/foo';\n\t\t\tconst rpcProtocol = new TestRPCProtocol();\n\n\t\t\tlet mainThreadCalled = false;\n\t\t\trpcProtocol.set(MainContext.MainThreadWorkspace, new class extends mock<MainThreadWorkspace>() {\n\t\t\t\toverride $startFileSearch(_includeFolder: UriComponents | null, options: IFileQueryBuilderOptions, token: CancellationToken): Promise<URI[] | null> {\n\t\t\t\t\tmainThreadCalled = true;\n\t\t\t\t\tassert.strictEqual(options.filePattern, 'glob/**');\n\t\t\t\t\tassert.strictEqual(options.includePattern, undefined);\n\t\t\t\t\tassert.deepStrictEqual(_includeFolder ? URI.from(_includeFolder).toJSON() : null, URI.file('/other/folder').toJSON());\n\t\t\t\t\tassert.strictEqual(options.excludePattern, undefined);\n\t\t\t\t\tassert.strictEqual(options.disregardExcludeSettings, false);\n\t\t\t\t\treturn Promise.resolve(null);\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tconst ws = createExtHostWorkspace(rpcProtocol, { id: 'foo', folders: [aWorkspaceFolderData(URI.file(root), 0)], name: 'Test' }, new NullLogService());\n\t\t\treturn ws.findFiles2New(pattern, { maxResults: 10 }, new ExtensionIdentifier('test')).then(() => {\n\t\t\t\tassert(mainThreadCalled, 'mainThreadCalled');\n\t\t\t});\n\t\t}\n\n\t\ttest('RelativePattern include (string)', () => {\n\t\t\treturn testFindFiles2NewInclude([new RelativePattern('/other/folder', 'glob/**')]);\n\t\t});\n\n\t\ttest('RelativePattern include (URI)', () => {\n\t\t\treturn testFindFiles2NewInclude([new RelativePattern(URI.file('/other/folder'), 'glob/**')]);\n\t\t});\n\n\t\ttest('no excludes', () => {\n\t\t\tconst root = '/project/foo';\n\t\t\tconst rpcProtocol = new TestRPCProtocol();\n\n\t\t\tlet mainThreadCalled = false;\n\t\t\trpcProtocol.set(MainContext.MainThreadWorkspace, new class extends mock<MainThreadWorkspace>() {\n\t\t\t\toverride $startFileSearch(_includeFolder: UriComponents | null, options: IFileQueryBuilderOptions, token: CancellationToken): Promise<URI[] | null> {\n\t\t\t\t\tmainThreadCalled = true;\n\t\t\t\t\tassert.strictEqual(options.filePattern, 'glob/**');\n\t\t\t\t\tassert.strictEqual(options.includePattern, undefined);\n\t\t\t\t\tassert.deepStrictEqual(URI.revive(_includeFolder!).toString(), URI.file('/other/folder').toString());\n\t\t\t\t\tassert.strictEqual(options.excludePattern, undefined);\n\t\t\t\t\tassert.strictEqual(options.disregardExcludeSettings, false);\n\t\t\t\t\treturn Promise.resolve(null);\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tconst ws = createExtHostWorkspace(rpcProtocol, { id: 'foo', folders: [aWorkspaceFolderData(URI.file(root), 0)], name: 'Test' }, new NullLogService());\n\t\t\treturn ws.findFiles2New([new RelativePattern('/other/folder', 'glob/**')], {}, new ExtensionIdentifier('test')).then(() => {\n\t\t\t\tassert(mainThreadCalled, 'mainThreadCalled');\n\t\t\t});\n\t\t});\n\n\t\ttest('with cancelled token', () => {\n\t\t\tconst root = '/project/foo';\n\t\t\tconst rpcProtocol = new TestRPCProtocol();\n\n\t\t\tlet mainThreadCalled = false;\n\t\t\trpcProtocol.set(MainContext.MainThreadWorkspace, new class extends mock<MainThreadWorkspace>() {\n\t\t\t\toverride $startFileSearch(_includeFolder: UriComponents | null, options: IFileQueryBuilderOptions, token: CancellationToken): Promise<URI[] | null> {\n\t\t\t\t\tmainThreadCalled = true;\n\t\t\t\t\treturn Promise.resolve(null);\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tconst ws = createExtHostWorkspace(rpcProtocol, { id: 'foo', folders: [aWorkspaceFolderData(URI.file(root), 0)], name: 'Test' }, new NullLogService());\n\n\t\t\tconst token = CancellationToken.Cancelled;\n\t\t\treturn ws.findFiles2New([new RelativePattern('/other/folder', 'glob/**')], {}, new ExtensionIdentifier('test'), token).then(() => {\n\t\t\t\tassert(!mainThreadCalled, '!mainThreadCalled');\n\t\t\t});\n\t\t});\n\n\t\ttest('RelativePattern exclude', () => {\n\t\t\tconst root = '/project/foo';\n\t\t\tconst rpcProtocol = new TestRPCProtocol();\n\n\t\t\tlet mainThreadCalled = false;\n\t\t\trpcProtocol.set(MainContext.MainThreadWorkspace, new class extends mock<MainThreadWorkspace>() {\n\t\t\t\toverride $startFileSearch(_includeFolder: UriComponents | null, options: IFileQueryBuilderOptions, token: CancellationToken): Promise<URI[] | null> {\n\t\t\t\t\tmainThreadCalled = true;\n\t\t\t\t\tassert.strictEqual(options.disregardExcludeSettings, false);\n\t\t\t\t\tassert.strictEqual(options.excludePattern?.length, 1);\n\t\t\t\t\tassert.strictEqual(options.excludePattern[0].pattern, 'glob/**'); // Note that the base portion is ignored, see #52651\n\t\t\t\t\treturn Promise.resolve(null);\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tconst ws = createExtHostWorkspace(rpcProtocol, { id: 'foo', folders: [aWorkspaceFolderData(URI.file(root), 0)], name: 'Test' }, new NullLogService());\n\t\t\treturn ws.findFiles2New([''], { exclude: [new RelativePattern(root, 'glob/**')] }, new ExtensionIdentifier('test')).then(() => {\n\t\t\t\tassert(mainThreadCalled, 'mainThreadCalled');\n\t\t\t});\n\t\t});\n\t\ttest('useIgnoreFiles', () => {\n\t\t\tconst root = '/project/foo';\n\t\t\tconst rpcProtocol = new TestRPCProtocol();\n\n\t\t\tlet mainThreadCalled = false;\n\t\t\trpcProtocol.set(MainContext.MainThreadWorkspace, new class extends mock<MainThreadWorkspace>() {\n\t\t\t\toverride $startFileSearch(_includeFolder: UriComponents | null, options: IFileQueryBuilderOptions, token: CancellationToken): Promise<URI[] | null> {\n\t\t\t\t\tmainThreadCalled = true;\n\t\t\t\t\tassert.strictEqual(options.disregardExcludeSettings, false);\n\t\t\t\t\tassert.strictEqual(options.disregardIgnoreFiles, false);\n\t\t\t\t\tassert.strictEqual(options.disregardGlobalIgnoreFiles, false);\n\t\t\t\t\tassert.strictEqual(options.disregardParentIgnoreFiles, false);\n\t\t\t\t\treturn Promise.resolve(null);\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tconst ws = createExtHostWorkspace(rpcProtocol, { id: 'foo', folders: [aWorkspaceFolderData(URI.file(root), 0)], name: 'Test' }, new NullLogService());\n\t\t\treturn ws.findFiles2New([''], { useIgnoreFiles: { local: true, parent: true, global: true } }, new ExtensionIdentifier('test')).then(() => {\n\t\t\t\tassert(mainThreadCalled, 'mainThreadCalled');\n\t\t\t});\n\t\t});\n\n\t\ttest('use symlinks', () => {\n\t\t\tconst root = '/project/foo';\n\t\t\tconst rpcProtocol = new TestRPCProtocol();\n\n\t\t\tlet mainThreadCalled = false;\n\t\t\trpcProtocol.set(MainContext.MainThreadWorkspace, new class extends mock<MainThreadWorkspace>() {\n\t\t\t\toverride $startFileSearch(_includeFolder: UriComponents | null, options: IFileQueryBuilderOptions, token: CancellationToken): Promise<URI[] | null> {\n\t\t\t\t\tmainThreadCalled = true;\n\t\t\t\t\tassert.strictEqual(options.ignoreSymlinks, false);\n\t\t\t\t\treturn Promise.resolve(null);\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tconst ws = createExtHostWorkspace(rpcProtocol, { id: 'foo', folders: [aWorkspaceFolderData(URI.file(root), 0)], name: 'Test' }, new NullLogService());\n\t\t\treturn ws.findFiles2New([''], { followSymlinks: true }, new ExtensionIdentifier('test')).then(() => {\n\t\t\t\tassert(mainThreadCalled, 'mainThreadCalled');\n\t\t\t});\n\t\t});\n\n\t\t// todo: add tests with multiple filePatterns and excludes\n\n\t});\n\n\tsuite('findTextInFiles -', function () {\n\t\ttest('no include', async () => {\n\t\t\tconst root = '/project/foo';\n\t\t\tconst rpcProtocol = new TestRPCProtocol();\n\n\t\t\tlet mainThreadCalled = false;\n\t\t\trpcProtocol.set(MainContext.MainThreadWorkspace, new class extends mock<MainThreadWorkspace>() {\n\t\t\t\toverride async $startTextSearch(query: IPatternInfo, folder: UriComponents | null, options: ITextQueryBuilderOptions, requestId: number, token: CancellationToken): Promise<ITextSearchComplete | null> {\n\t\t\t\t\tmainThreadCalled = true;\n\t\t\t\t\tassert.strictEqual(query.pattern, 'foo');\n\t\t\t\t\tassert.strictEqual(folder, null);\n\t\t\t\t\tassert.strictEqual(options.includePattern, undefined);\n\t\t\t\t\tassert.strictEqual(options.excludePattern, undefined);\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tconst ws = createExtHostWorkspace(rpcProtocol, { id: 'foo', folders: [aWorkspaceFolderData(URI.file(root), 0)], name: 'Test' }, new NullLogService());\n\t\t\tawait ws.findTextInFiles({ pattern: 'foo' }, {}, () => { }, new ExtensionIdentifier('test'));\n\t\t\tassert(mainThreadCalled, 'mainThreadCalled');\n\t\t});\n\n\t\ttest('string include', async () => {\n\t\t\tconst root = '/project/foo';\n\t\t\tconst rpcProtocol = new TestRPCProtocol();\n\n\t\t\tlet mainThreadCalled = false;\n\t\t\trpcProtocol.set(MainContext.MainThreadWorkspace, new class extends mock<MainThreadWorkspace>() {\n\t\t\t\toverride async $startTextSearch(query: IPatternInfo, folder: UriComponents | null, options: ITextQueryBuilderOptions, requestId: number, token: CancellationToken): Promise<ITextSearchComplete | null> {\n\t\t\t\t\tmainThreadCalled = true;\n\t\t\t\t\tassert.strictEqual(query.pattern, 'foo');\n\t\t\t\t\tassert.strictEqual(folder, null);\n\t\t\t\t\tassert.strictEqual(options.includePattern, '**/files');\n\t\t\t\t\tassert.strictEqual(options.excludePattern, undefined);\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tconst ws = createExtHostWorkspace(rpcProtocol, { id: 'foo', folders: [aWorkspaceFolderData(URI.file(root), 0)], name: 'Test' }, new NullLogService());\n\t\t\tawait ws.findTextInFiles({ pattern: 'foo' }, { include: '**/files' }, () => { }, new ExtensionIdentifier('test'));\n\t\t\tassert(mainThreadCalled, 'mainThreadCalled');\n\t\t});\n\n\t\ttest('RelativePattern include', async () => {\n\t\t\tconst root = '/project/foo';\n\t\t\tconst rpcProtocol = new TestRPCProtocol();\n\n\t\t\tlet mainThreadCalled = false;\n\t\t\trpcProtocol.set(MainContext.MainThreadWorkspace, new class extends mock<MainThreadWorkspace>() {\n\t\t\t\toverride async $startTextSearch(query: IPatternInfo, folder: UriComponents | null, options: ITextQueryBuilderOptions, requestId: number, token: CancellationToken): Promise<ITextSearchComplete | null> {\n\t\t\t\t\tmainThreadCalled = true;\n\t\t\t\t\tassert.strictEqual(query.pattern, 'foo');\n\t\t\t\t\tassert.deepStrictEqual(URI.revive(folder!).toString(), URI.file('/other/folder').toString());\n\t\t\t\t\tassert.strictEqual(options.includePattern, 'glob/**');\n\t\t\t\t\tassert.strictEqual(options.excludePattern, undefined);\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tconst ws = createExtHostWorkspace(rpcProtocol, { id: 'foo', folders: [aWorkspaceFolderData(URI.file(root), 0)], name: 'Test' }, new NullLogService());\n\t\t\tawait ws.findTextInFiles({ pattern: 'foo' }, { include: new RelativePattern('/other/folder', 'glob/**') }, () => { }, new ExtensionIdentifier('test'));\n\t\t\tassert(mainThreadCalled, 'mainThreadCalled');\n\t\t});\n\n\t\ttest('with cancelled token', async () => {\n\t\t\tconst root = '/project/foo';\n\t\t\tconst rpcProtocol = new TestRPCProtocol();\n\n\t\t\tlet mainThreadCalled = false;\n\t\t\trpcProtocol.set(MainContext.MainThreadWorkspace, new class extends mock<MainThreadWorkspace>() {\n\t\t\t\toverride async $startTextSearch(query: IPatternInfo, folder: UriComponents | null, options: ITextQueryBuilderOptions, requestId: number, token: CancellationToken): Promise<ITextSearchComplete | null> {\n\t\t\t\t\tmainThreadCalled = true;\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tconst ws = createExtHostWorkspace(rpcProtocol, { id: 'foo', folders: [aWorkspaceFolderData(URI.file(root), 0)], name: 'Test' }, new NullLogService());\n\t\t\tconst token = CancellationToken.Cancelled;\n\t\t\tawait ws.findTextInFiles({ pattern: 'foo' }, {}, () => { }, new ExtensionIdentifier('test'), token);\n\t\t\tassert(!mainThreadCalled, '!mainThreadCalled');\n\t\t});\n\n\t\ttest('RelativePattern exclude', async () => {\n\t\t\tconst root = '/project/foo';\n\t\t\tconst rpcProtocol = new TestRPCProtocol();\n\n\t\t\tlet mainThreadCalled = false;\n\t\t\trpcProtocol.set(MainContext.MainThreadWorkspace, new class extends mock<MainThreadWorkspace>() {\n\t\t\t\toverride async $startTextSearch(query: IPatternInfo, folder: UriComponents | null, options: ITextQueryBuilderOptions, requestId: number, token: CancellationToken): Promise<ITextSearchComplete | null> {\n\t\t\t\t\tmainThreadCalled = true;\n\t\t\t\t\tassert.strictEqual(query.pattern, 'foo');\n\t\t\t\t\tassert.deepStrictEqual(folder, null);\n\t\t\t\t\tassert.strictEqual(options.includePattern, undefined);\n\t\t\t\t\tassert.strictEqual(options.excludePattern?.length, 1);\n\t\t\t\t\tassert.strictEqual(options.excludePattern[0].pattern, 'glob/**'); // exclude folder is ignored...\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tconst ws = createExtHostWorkspace(rpcProtocol, { id: 'foo', folders: [aWorkspaceFolderData(URI.file(root), 0)], name: 'Test' }, new NullLogService());\n\t\t\tawait ws.findTextInFiles({ pattern: 'foo' }, { exclude: new RelativePattern('/other/folder', 'glob/**') }, () => { }, new ExtensionIdentifier('test'));\n\t\t\tassert(mainThreadCalled, 'mainThreadCalled');\n\t\t});\n\t});\n\n\tsuite('findTextInFilesNew -', function () {\n\t\ttest('no include', async () => {\n\t\t\tconst root = '/project/foo';\n\t\t\tconst rpcProtocol = new TestRPCProtocol();\n\n\t\t\tlet mainThreadCalled = false;\n\t\t\trpcProtocol.set(MainContext.MainThreadWorkspace, new class extends mock<MainThreadWorkspace>() {\n\t\t\t\toverride async $startTextSearch(query: IPatternInfo, folder: UriComponents | null, options: ITextQueryBuilderOptions, requestId: number, token: CancellationToken): Promise<ITextSearchComplete | null> {\n\t\t\t\t\tmainThreadCalled = true;\n\t\t\t\t\tassert.strictEqual(query.pattern, 'foo');\n\t\t\t\t\tassert.strictEqual(folder, null);\n\t\t\t\t\tassert.strictEqual(options.includePattern, undefined);\n\t\t\t\t\tassert.strictEqual(options.excludePattern, undefined);\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tconst ws = createExtHostWorkspace(rpcProtocol, { id: 'foo', folders: [aWorkspaceFolderData(URI.file(root), 0)], name: 'Test' }, new NullLogService());\n\t\t\tawait (ws.findTextInFilesNew({ pattern: 'foo' }, {}, new ExtensionIdentifier('test'))).complete;\n\t\t\tassert(mainThreadCalled, 'mainThreadCalled');\n\t\t});\n\n\t\ttest('string include', async () => {\n\t\t\tconst root = '/project/foo';\n\t\t\tconst rpcProtocol = new TestRPCProtocol();\n\n\t\t\tlet mainThreadCalled = false;\n\t\t\trpcProtocol.set(MainContext.MainThreadWorkspace, new class extends mock<MainThreadWorkspace>() {\n\t\t\t\toverride async $startTextSearch(query: IPatternInfo, folder: UriComponents | null, options: ITextQueryBuilderOptions, requestId: number, token: CancellationToken): Promise<ITextSearchComplete | null> {\n\t\t\t\t\tmainThreadCalled = true;\n\t\t\t\t\tassert.strictEqual(query.pattern, 'foo');\n\t\t\t\t\tassert.strictEqual(folder, null);\n\t\t\t\t\tassert.strictEqual(options.includePattern, '**/files');\n\t\t\t\t\tassert.strictEqual(options.excludePattern, undefined);\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tconst ws = createExtHostWorkspace(rpcProtocol, { id: 'foo', folders: [aWorkspaceFolderData(URI.file(root), 0)], name: 'Test' }, new NullLogService());\n\t\t\tawait (ws.findTextInFilesNew({ pattern: 'foo' }, { include: ['**/files'] }, new ExtensionIdentifier('test'))).complete;\n\t\t\tassert(mainThreadCalled, 'mainThreadCalled');\n\t\t});\n\n\t\ttest('RelativePattern include', async () => {\n\t\t\tconst root = '/project/foo';\n\t\t\tconst rpcProtocol = new TestRPCProtocol();\n\n\t\t\tlet mainThreadCalled = false;\n\t\t\trpcProtocol.set(MainContext.MainThreadWorkspace, new class extends mock<MainThreadWorkspace>() {\n\t\t\t\toverride async $startTextSearch(query: IPatternInfo, folder: UriComponents | null, options: ITextQueryBuilderOptions, requestId: number, token: CancellationToken): Promise<ITextSearchComplete | null> {\n\t\t\t\t\tmainThreadCalled = true;\n\t\t\t\t\tassert.strictEqual(query.pattern, 'foo');\n\t\t\t\t\tassert.deepStrictEqual(URI.revive(folder!).toString(), URI.file('/other/folder').toString());\n\t\t\t\t\tassert.strictEqual(options.includePattern, 'glob/**');\n\t\t\t\t\tassert.strictEqual(options.excludePattern, undefined);\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tconst ws = createExtHostWorkspace(rpcProtocol, { id: 'foo', folders: [aWorkspaceFolderData(URI.file(root), 0)], name: 'Test' }, new NullLogService());\n\t\t\tawait (ws.findTextInFilesNew({ pattern: 'foo' }, { include: [new RelativePattern('/other/folder', 'glob/**')] }, new ExtensionIdentifier('test'))).complete;\n\t\t\tassert(mainThreadCalled, 'mainThreadCalled');\n\t\t});\n\n\t\ttest('with cancelled token', async () => {\n\t\t\tconst root = '/project/foo';\n\t\t\tconst rpcProtocol = new TestRPCProtocol();\n\n\t\t\tlet mainThreadCalled = false;\n\t\t\trpcProtocol.set(MainContext.MainThreadWorkspace, new class extends mock<MainThreadWorkspace>() {\n\t\t\t\toverride async $startTextSearch(query: IPatternInfo, folder: UriComponents | null, options: ITextQueryBuilderOptions, requestId: number, token: CancellationToken): Promise<ITextSearchComplete | null> {\n\t\t\t\t\tmainThreadCalled = true;\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tconst ws = createExtHostWorkspace(rpcProtocol, { id: 'foo', folders: [aWorkspaceFolderData(URI.file(root), 0)], name: 'Test' }, new NullLogService());\n\t\t\tconst token = CancellationToken.Cancelled;\n\t\t\tawait (ws.findTextInFilesNew({ pattern: 'foo' }, undefined, new ExtensionIdentifier('test'), token)).complete;\n\t\t\tassert(!mainThreadCalled, '!mainThreadCalled');\n\t\t});\n\n\t\ttest('RelativePattern exclude', async () => {\n\t\t\tconst root = '/project/foo';\n\t\t\tconst rpcProtocol = new TestRPCProtocol();\n\n\t\t\tlet mainThreadCalled = false;\n\t\t\trpcProtocol.set(MainContext.MainThreadWorkspace, new class extends mock<MainThreadWorkspace>() {\n\t\t\t\toverride async $startTextSearch(query: IPatternInfo, folder: UriComponents | null, options: ITextQueryBuilderOptions, requestId: number, token: CancellationToken): Promise<ITextSearchComplete | null> {\n\t\t\t\t\tmainThreadCalled = true;\n\t\t\t\t\tassert.strictEqual(query.pattern, 'foo');\n\t\t\t\t\tassert.deepStrictEqual(folder, null);\n\t\t\t\t\tassert.strictEqual(options.includePattern, undefined);\n\t\t\t\t\tassert.strictEqual(options.excludePattern?.length, 1);\n\t\t\t\t\tassert.strictEqual(options.excludePattern[0].pattern, 'glob/**'); // exclude folder is ignored...\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tconst ws = createExtHostWorkspace(rpcProtocol, { id: 'foo', folders: [aWorkspaceFolderData(URI.file(root), 0)], name: 'Test' }, new NullLogService());\n\t\t\tawait (ws.findTextInFilesNew({ pattern: 'foo' }, { exclude: [new RelativePattern('/other/folder', 'glob/**')] }, new ExtensionIdentifier('test'))).complete;\n\t\t\tassert(mainThreadCalled, 'mainThreadCalled');\n\t\t});\n\n\t\t// TODO: test multiple includes/excludess\n\t});\n});\n"],
  "mappings": "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",
  "names": ["token"]
}
