{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/api/test/browser/extHostTypeConverter.test.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n\nimport assert from 'assert';\nimport * as extHostTypes from '../../common/extHostTypes.js';\nimport { MarkdownString, NotebookCellOutputItem, NotebookData, LanguageSelector, WorkspaceEdit } from '../../common/extHostTypeConverters.js';\nimport { isEmptyObject } from '../../../../base/common/types.js';\nimport { URI } from '../../../../base/common/uri.js';\nimport { IWorkspaceTextEditDto } from '../../common/extHost.protocol.js';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from '../../../../base/test/common/utils.js';\n\nsuite('ExtHostTypeConverter', function () {\n\n\tensureNoDisposablesAreLeakedInTestSuite();\n\n\tfunction size<T>(from: Record<any, any>): number {\n\t\tlet count = 0;\n\t\tfor (const key in from) {\n\t\t\tif (Object.prototype.hasOwnProperty.call(from, key)) {\n\t\t\t\tcount += 1;\n\t\t\t}\n\t\t}\n\t\treturn count;\n\t}\n\n\ttest('MarkdownConvert - uris', function () {\n\n\t\tlet data = MarkdownString.from('Hello');\n\t\tassert.strictEqual(isEmptyObject(data.uris), true);\n\t\tassert.strictEqual(data.value, 'Hello');\n\n\t\tdata = MarkdownString.from('Hello [link](foo)');\n\t\tassert.strictEqual(data.value, 'Hello [link](foo)');\n\t\tassert.strictEqual(isEmptyObject(data.uris), true); // no scheme, no uri\n\n\t\tdata = MarkdownString.from('Hello [link](www.noscheme.bad)');\n\t\tassert.strictEqual(data.value, 'Hello [link](www.noscheme.bad)');\n\t\tassert.strictEqual(isEmptyObject(data.uris), true); // no scheme, no uri\n\n\t\tdata = MarkdownString.from('Hello [link](foo:path)');\n\t\tassert.strictEqual(data.value, 'Hello [link](foo:path)');\n\t\tassert.strictEqual(size(data.uris!), 1);\n\t\tassert.ok(!!data.uris!['foo:path']);\n\n\t\tdata = MarkdownString.from('hello@foo.bar');\n\t\tassert.strictEqual(data.value, 'hello@foo.bar');\n\t\tassert.strictEqual(size(data.uris!), 1);\n\t\t// assert.ok(!!data.uris!['mailto:hello@foo.bar']);\n\n\t\tdata = MarkdownString.from('*hello* [click](command:me)');\n\t\tassert.strictEqual(data.value, '*hello* [click](command:me)');\n\t\tassert.strictEqual(size(data.uris!), 1);\n\t\tassert.ok(!!data.uris!['command:me']);\n\n\t\tdata = MarkdownString.from('*hello* [click](file:///somepath/here). [click](file:///somepath/here)');\n\t\tassert.strictEqual(data.value, '*hello* [click](file:///somepath/here). [click](file:///somepath/here)');\n\t\tassert.strictEqual(size(data.uris!), 1);\n\t\tassert.ok(!!data.uris!['file:///somepath/here']);\n\n\t\tdata = MarkdownString.from('*hello* [click](file:///somepath/here). [click](file:///somepath/here)');\n\t\tassert.strictEqual(data.value, '*hello* [click](file:///somepath/here). [click](file:///somepath/here)');\n\t\tassert.strictEqual(size(data.uris!), 1);\n\t\tassert.ok(!!data.uris!['file:///somepath/here']);\n\n\t\tdata = MarkdownString.from('*hello* [click](file:///somepath/here). [click](file:///somepath/here2)');\n\t\tassert.strictEqual(data.value, '*hello* [click](file:///somepath/here). [click](file:///somepath/here2)');\n\t\tassert.strictEqual(size(data.uris!), 2);\n\t\tassert.ok(!!data.uris!['file:///somepath/here']);\n\t\tassert.ok(!!data.uris!['file:///somepath/here2']);\n\t});\n\n\ttest('NPM script explorer running a script from the hover does not work #65561', function () {\n\n\t\tconst data = MarkdownString.from('*hello* [click](command:npm.runScriptFromHover?%7B%22documentUri%22%3A%7B%22%24mid%22%3A1%2C%22external%22%3A%22file%3A%2F%2F%2Fc%253A%2Ffoo%2Fbaz.ex%22%2C%22path%22%3A%22%2Fc%3A%2Ffoo%2Fbaz.ex%22%2C%22scheme%22%3A%22file%22%7D%2C%22script%22%3A%22dev%22%7D)');\n\t\t// assert that both uri get extracted but that the latter is only decoded once...\n\t\tassert.strictEqual(size(data.uris!), 2);\n\t\tfor (const value of Object.values(data.uris!)) {\n\t\t\tif (value.scheme === 'file') {\n\t\t\t\tassert.ok(URI.revive(value).toString().indexOf('file:///c%3A') === 0);\n\t\t\t} else {\n\t\t\t\tassert.strictEqual(value.scheme, 'command');\n\t\t\t}\n\t\t}\n\t});\n\n\ttest('Notebook metadata is ignored when using Notebook Serializer #125716', function () {\n\n\t\tconst d = new extHostTypes.NotebookData([]);\n\t\td.cells.push(new extHostTypes.NotebookCellData(extHostTypes.NotebookCellKind.Code, 'hello', 'fooLang'));\n\t\td.metadata = { foo: 'bar', bar: 123 };\n\n\t\tconst dto = NotebookData.from(d);\n\n\t\tassert.strictEqual(dto.cells.length, 1);\n\t\tassert.strictEqual(dto.cells[0].language, 'fooLang');\n\t\tassert.strictEqual(dto.cells[0].source, 'hello');\n\t\tassert.deepStrictEqual(dto.metadata, d.metadata);\n\t});\n\n\ttest('NotebookCellOutputItem', function () {\n\n\t\tconst item = extHostTypes.NotebookCellOutputItem.text('Hello', 'foo/bar');\n\n\t\tconst dto = NotebookCellOutputItem.from(item);\n\n\t\tassert.strictEqual(dto.mime, 'foo/bar');\n\t\tassert.deepStrictEqual(Array.from(dto.valueBytes.buffer), Array.from(new TextEncoder().encode('Hello')));\n\n\t\tconst item2 = NotebookCellOutputItem.to(dto);\n\n\t\tassert.strictEqual(item2.mime, item.mime);\n\t\tassert.deepStrictEqual(Array.from(item2.data), Array.from(item.data));\n\t});\n\n\ttest('LanguageSelector', function () {\n\t\tconst out = LanguageSelector.from({ language: 'bat', notebookType: 'xxx' });\n\t\tassert.ok(typeof out === 'object');\n\t\tassert.deepStrictEqual(out, {\n\t\t\tlanguage: 'bat',\n\t\t\tnotebookType: 'xxx',\n\t\t\tscheme: undefined,\n\t\t\tpattern: undefined,\n\t\t\texclusive: undefined,\n\t\t});\n\t});\n\n\ttest('JS/TS Surround With Code Actions provide bad Workspace Edits when obtained by VSCode Command API #178654', function () {\n\n\t\tconst uri = URI.parse('file:///foo/bar');\n\t\tconst ws = new extHostTypes.WorkspaceEdit();\n\t\tws.set(uri, [extHostTypes.SnippetTextEdit.insert(new extHostTypes.Position(1, 1), new extHostTypes.SnippetString('foo$0bar'))]);\n\n\t\tconst dto = WorkspaceEdit.from(ws);\n\t\tconst first = <IWorkspaceTextEditDto>dto.edits[0];\n\t\tassert.strictEqual(first.textEdit.insertAsSnippet, true);\n\n\t\tconst ws2 = WorkspaceEdit.to(dto);\n\t\tconst dto2 = WorkspaceEdit.from(ws2);\n\t\tconst first2 = <IWorkspaceTextEditDto>dto2.edits[0];\n\t\tassert.strictEqual(first2.textEdit.insertAsSnippet, true);\n\t});\n});\n"],
  "mappings": "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",
  "names": []
}
