var d=Object.defineProperty;var p=Object.getOwnPropertyDescriptor;var c=(u,i,t,n)=>{for(var e=n>1?void 0:n?p(i,t):i,o=u.length-1,r;o>=0;o--)(r=u[o])&&(e=(n?r(i,t,e):r(e))||e);return n&&e&&d(i,t,e),e},f=(u,i)=>(t,n)=>i(t,n,u);import"../../../../vs/base/common/lifecycle.js";import{URI as g}from"../../../../vs/base/common/uri.js";import{ConfigurationTarget as a,IConfigurationService as m}from"../../../../vs/platform/configuration/common/configuration.js";import{Extensions as l,ConfigurationScope as C,getScopes as v}from"../../../../vs/platform/configuration/common/configurationRegistry.js";import{IEnvironmentService as I}from"../../../../vs/platform/environment/common/environment.js";import{Registry as S}from"../../../../vs/platform/registry/common/platform.js";import{IWorkspaceContextService as h,WorkbenchState as E}from"../../../../vs/platform/workspace/common/workspace.js";import{extHostNamedCustomer as _}from"../../../../vs/workbench/services/extensions/common/extHostCustomers.js";import{ExtHostContext as x,MainContext as O}from"../common/extHost.protocol.js";let s=class{constructor(i,t,n,e){this._workspaceContextService=t;this.configurationService=n;this._environmentService=e;const o=i.getProxy(x.ExtHostConfiguration);o.$initializeConfiguration(this._getConfigurationData()),this._configurationListener=n.onDidChangeConfiguration(r=>{o.$acceptConfigurationChanged(this._getConfigurationData(),r.change)})}_configurationListener;_getConfigurationData(){const i={...this.configurationService.getConfigurationData(),configurationScopes:[]};return(!this._environmentService.isBuilt||this._environmentService.isExtensionDevelopment)&&(i.configurationScopes=v()),i}dispose(){this._configurationListener.dispose()}$updateConfigurationOption(i,t,n,e,o){return e={resource:e?.resource?g.revive(e.resource):void 0,overrideIdentifier:e?.overrideIdentifier},this.writeConfiguration(i,t,n,e,o)}$removeConfigurationOption(i,t,n,e){return n={resource:n?.resource?g.revive(n.resource):void 0,overrideIdentifier:n?.overrideIdentifier},this.writeConfiguration(i,t,void 0,n,e)}writeConfiguration(i,t,n,e,o){i=i??this.deriveConfigurationTarget(t,e);const r=this.configurationService.inspect(t,e);switch(i){case a.MEMORY:return this._updateValue(t,n,i,r?.memory?.override,e,o);case a.WORKSPACE_FOLDER:return this._updateValue(t,n,i,r?.workspaceFolder?.override,e,o);case a.WORKSPACE:return this._updateValue(t,n,i,r?.workspace?.override,e,o);case a.USER_REMOTE:return this._updateValue(t,n,i,r?.userRemote?.override,e,o);default:return this._updateValue(t,n,i,r?.userLocal?.override,e,o)}}_updateValue(i,t,n,e,o,r){return o=r===!0?o:r===!1?{resource:o.resource}:o.overrideIdentifier&&e!==void 0?o:{resource:o.resource},this.configurationService.updateValue(i,t,o,n,{donotNotifyError:!0})}deriveConfigurationTarget(i,t){if(t.resource&&this._workspaceContextService.getWorkbenchState()===E.WORKSPACE){const n=S.as(l.Configuration).getConfigurationProperties();if(n[i]&&(n[i].scope===C.RESOURCE||n[i].scope===C.LANGUAGE_OVERRIDABLE))return a.WORKSPACE_FOLDER}return a.WORKSPACE}};s=c([_(O.MainThreadConfiguration),f(1,h),f(2,m),f(3,I)],s);export{s as MainThreadConfiguration};
