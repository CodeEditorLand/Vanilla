var d=Object.defineProperty;var m=Object.getOwnPropertyDescriptor;var f=(t,i,o,r)=>{for(var e=r>1?void 0:r?m(i,o):i,s=t.length-1,p;s>=0;s--)(p=t[s])&&(e=(r?p(i,o,e):p(e))||e);return r&&e&&d(i,o,e),e},a=(t,i)=>(o,r)=>i(o,r,t);import{CancellationToken as D}from"../../../base/common/cancellation.js";import{DisposableMap as u}from"../../../base/common/lifecycle.js";import{URI as c}from"../../../base/common/uri.js";import{IQuickDiffService as l}from"../../contrib/scm/common/quickDiff.js";import{extHostNamedCustomer as x}from"../../services/extensions/common/extHostCustomers.js";import{ExtHostContext as y,MainContext as k}from"../common/extHost.protocol.js";let n=class{constructor(i,o){this.quickDiffService=o;this.proxy=i.getProxy(y.ExtHostQuickDiff)}proxy;providerDisposables=new u;async $registerQuickDiffProvider(i,o,r,e){const s={label:r,rootUri:c.revive(e),selector:o,isSCM:!1,getOriginalResource:async v=>c.revive(await this.proxy.$provideOriginalResource(i,v,D.None))},p=this.quickDiffService.addQuickDiffProvider(s);this.providerDisposables.set(i,p)}async $unregisterQuickDiffProvider(i){this.providerDisposables.has(i)&&this.providerDisposables.deleteAndDispose(i)}dispose(){this.providerDisposables.dispose()}};n=f([x(k.MainThreadQuickDiff),a(1,l)],n);export{n as MainThreadQuickDiff};
