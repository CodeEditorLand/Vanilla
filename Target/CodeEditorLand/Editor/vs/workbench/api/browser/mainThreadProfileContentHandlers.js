var x=Object.defineProperty;var P=Object.getOwnPropertyDescriptor;var f=(i,o,e,r)=>{for(var t=r>1?void 0:r?P(o,e):o,n=i.length-1,s;n>=0;n--)(s=i[n])&&(t=(r?s(o,e,t):s(t))||t);return r&&t&&x(o,e,t),t},m=(i,o)=>(e,r)=>o(e,r,i);import{Disposable as g,DisposableMap as H}from"../../../base/common/lifecycle.js";import{revive as c}from"../../../base/common/marshalling.js";import{ExtHostContext as v,MainContext as C}from"../common/extHost.protocol.js";import{extHostNamedCustomer as I}from"../../services/extensions/common/extHostCustomers.js";import{IUserDataProfileImportExportService as u}from"../../services/userDataProfile/common/userDataProfile.js";let a=class extends g{constructor(e,r){super();this.userDataProfileImportExportService=r;this.proxy=e.getProxy(v.ExtHostProfileContentHandlers)}proxy;registeredHandlers=this._register(new H);async $registerProfileContentHandler(e,r,t,n){this.registeredHandlers.set(e,this.userDataProfileImportExportService.registerProfileContentHandler(e,{name:r,description:t,extensionId:n,saveProfile:async(s,l,d)=>{const p=await this.proxy.$saveProfile(e,s,l,d);return p?c(p):null},readProfile:async(s,l)=>this.proxy.$readProfile(e,s,l)}))}async $unregisterProfileContentHandler(e){this.registeredHandlers.deleteAndDispose(e)}};a=f([I(C.MainThreadProfileContentHandlers),m(1,u)],a);export{a as MainThreadProfileContentHandlers};
