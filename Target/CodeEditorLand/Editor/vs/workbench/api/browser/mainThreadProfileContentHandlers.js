var x=Object.defineProperty;var c=Object.getOwnPropertyDescriptor;var m=(i,o,e,t)=>{for(var r=t>1?void 0:t?c(o,e):o,n=i.length-1,s;n>=0;n--)(s=i[n])&&(r=(t?s(o,e,r):s(r))||r);return t&&r&&x(o,e,r),r},f=(i,o)=>(e,t)=>o(e,t,i);import{Disposable as y,DisposableMap as P}from"../../../base/common/lifecycle.js";import{revive as g}from"../../../base/common/marshalling.js";import{extHostNamedCustomer as H}from"../../services/extensions/common/extHostCustomers.js";import{IUserDataProfileImportExportService as v}from"../../services/userDataProfile/common/userDataProfile.js";import{ExtHostContext as u,MainContext as C}from"../common/extHost.protocol.js";let a=class extends y{constructor(e,t){super();this.userDataProfileImportExportService=t;this.proxy=e.getProxy(u.ExtHostProfileContentHandlers)}proxy;registeredHandlers=this._register(new P);async $registerProfileContentHandler(e,t,r,n){this.registeredHandlers.set(e,this.userDataProfileImportExportService.registerProfileContentHandler(e,{name:t,description:r,extensionId:n,saveProfile:async(s,l,d)=>{const p=await this.proxy.$saveProfile(e,s,l,d);return p?g(p):null},readProfile:async(s,l)=>this.proxy.$readProfile(e,s,l)}))}async $unregisterProfileContentHandler(e){this.registeredHandlers.deleteAndDispose(e)}};a=m([H(C.MainThreadProfileContentHandlers),f(1,v)],a);export{a as MainThreadProfileContentHandlers};
