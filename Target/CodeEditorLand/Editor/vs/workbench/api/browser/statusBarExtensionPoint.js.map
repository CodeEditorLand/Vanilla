{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/api/browser/statusBarExtensionPoint.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Emitter, type Event } from \"../../../base/common/event.js\";\nimport { hash } from \"../../../base/common/hash.js\";\nimport type { IMarkdownString } from \"../../../base/common/htmlContent.js\";\nimport { getCodiconAriaLabel } from \"../../../base/common/iconLabels.js\";\nimport { Iterable } from \"../../../base/common/iterator.js\";\nimport type { IJSONSchema } from \"../../../base/common/jsonSchema.js\";\nimport {\n\tDisposableStore,\n\ttype IDisposable,\n\ttoDisposable,\n} from \"../../../base/common/lifecycle.js\";\nimport type { ThemeColor } from \"../../../base/common/themables.js\";\nimport type { Command } from \"../../../editor/common/languages.js\";\nimport { localize } from \"../../../nls.js\";\nimport {\n\ttype IAccessibilityInformation,\n\tisAccessibilityInformation,\n} from \"../../../platform/accessibility/common/accessibility.js\";\nimport { ExtensionIdentifier } from \"../../../platform/extensions/common/extensions.js\";\nimport {\n\tInstantiationType,\n\tregisterSingleton,\n} from \"../../../platform/instantiation/common/extensions.js\";\nimport { createDecorator } from \"../../../platform/instantiation/common/instantiation.js\";\nimport {\n\tSTATUS_BAR_ERROR_ITEM_BACKGROUND,\n\tSTATUS_BAR_WARNING_ITEM_BACKGROUND,\n} from \"../../common/theme.js\";\nimport { isProposedApiEnabled } from \"../../services/extensions/common/extensions.js\";\nimport { ExtensionsRegistry } from \"../../services/extensions/common/extensionsRegistry.js\";\nimport {\n\ttype IStatusbarEntry,\n\ttype IStatusbarEntryAccessor,\n\ttype IStatusbarEntryPriority,\n\tIStatusbarService,\n\ttype StatusbarAlignment as MainThreadStatusBarAlignment,\n\tStatusbarAlignment,\n\ttype StatusbarEntryKind,\n} from \"../../services/statusbar/browser/statusbar.js\";\nimport { asStatusBarItemIdentifier } from \"../common/extHostTypes.js\";\n\n// --- service\n\nexport const IExtensionStatusBarItemService =\n\tcreateDecorator<IExtensionStatusBarItemService>(\n\t\t\"IExtensionStatusBarItemService\",\n\t);\n\nexport interface IExtensionStatusBarItemChangeEvent {\n\treadonly added?: ExtensionStatusBarEntry;\n\treadonly removed?: string;\n}\n\nexport type ExtensionStatusBarEntry = [\n\tstring,\n\t{\n\t\tentry: IStatusbarEntry;\n\t\talignment: MainThreadStatusBarAlignment;\n\t\tpriority: number;\n\t},\n];\n\nexport enum StatusBarUpdateKind {\n\tDidDefine = 0,\n\tDidUpdate = 1,\n}\n\nexport interface IExtensionStatusBarItemService {\n\treadonly _serviceBrand: undefined;\n\n\tonDidChange: Event<IExtensionStatusBarItemChangeEvent>;\n\n\tsetOrUpdateEntry(\n\t\tid: string,\n\t\tstatusId: string,\n\t\textensionId: string | undefined,\n\t\tname: string,\n\t\ttext: string,\n\t\ttooltip: IMarkdownString | string | undefined,\n\t\tcommand: Command | undefined,\n\t\tcolor: string | ThemeColor | undefined,\n\t\tbackgroundColor: ThemeColor | undefined,\n\t\talignLeft: boolean,\n\t\tpriority: number | undefined,\n\t\taccessibilityInformation: IAccessibilityInformation | undefined,\n\t): StatusBarUpdateKind;\n\n\tunsetEntry(id: string): void;\n\n\tgetEntries(): Iterable<ExtensionStatusBarEntry>;\n}\n\nclass ExtensionStatusBarItemService implements IExtensionStatusBarItemService {\n\tdeclare readonly _serviceBrand: undefined;\n\n\tprivate readonly _entries: Map<\n\t\tstring,\n\t\t{\n\t\t\taccessor: IStatusbarEntryAccessor;\n\t\t\tentry: IStatusbarEntry;\n\t\t\talignment: MainThreadStatusBarAlignment;\n\t\t\tpriority: number;\n\t\t\tdisposable: IDisposable;\n\t\t}\n\t> = new Map();\n\n\tprivate readonly _onDidChange =\n\t\tnew Emitter<IExtensionStatusBarItemChangeEvent>();\n\treadonly onDidChange: Event<IExtensionStatusBarItemChangeEvent> =\n\t\tthis._onDidChange.event;\n\n\tconstructor(\n\t\t@IStatusbarService\n\t\tprivate readonly _statusbarService: IStatusbarService,\n\t) {}\n\n\tdispose(): void {\n\t\tthis._entries.forEach((entry) => entry.accessor.dispose());\n\t\tthis._entries.clear();\n\t\tthis._onDidChange.dispose();\n\t}\n\n\tsetOrUpdateEntry(\n\t\tentryId: string,\n\t\tid: string,\n\t\textensionId: string | undefined,\n\t\tname: string,\n\t\ttext: string,\n\t\ttooltip: IMarkdownString | string | undefined,\n\t\tcommand: Command | undefined,\n\t\tcolor: string | ThemeColor | undefined,\n\t\tbackgroundColor: ThemeColor | undefined,\n\t\talignLeft: boolean,\n\t\tpriority: number | undefined,\n\t\taccessibilityInformation: IAccessibilityInformation | undefined,\n\t): StatusBarUpdateKind {\n\t\t// if there are icons in the text use the tooltip for the aria label\n\t\tlet ariaLabel: string;\n\t\tlet role: string | undefined;\n\t\tif (accessibilityInformation) {\n\t\t\tariaLabel = accessibilityInformation.label;\n\t\t\trole = accessibilityInformation.role;\n\t\t} else {\n\t\t\tariaLabel = getCodiconAriaLabel(text);\n\t\t\tif (tooltip) {\n\t\t\t\tconst tooltipString =\n\t\t\t\t\ttypeof tooltip === \"string\" ? tooltip : tooltip.value;\n\t\t\t\tariaLabel += `, ${tooltipString}`;\n\t\t\t}\n\t\t}\n\t\tlet kind: StatusbarEntryKind | undefined;\n\t\tswitch (backgroundColor?.id) {\n\t\t\tcase STATUS_BAR_ERROR_ITEM_BACKGROUND:\n\t\t\tcase STATUS_BAR_WARNING_ITEM_BACKGROUND:\n\t\t\t\t// override well known colors that map to status entry kinds to support associated themable hover colors\n\t\t\t\tkind =\n\t\t\t\t\tbackgroundColor.id === STATUS_BAR_ERROR_ITEM_BACKGROUND\n\t\t\t\t\t\t? \"error\"\n\t\t\t\t\t\t: \"warning\";\n\t\t\t\tcolor = undefined;\n\t\t\t\tbackgroundColor = undefined;\n\t\t}\n\t\tconst entry: IStatusbarEntry = {\n\t\t\tname,\n\t\t\ttext,\n\t\t\ttooltip,\n\t\t\tcommand,\n\t\t\tcolor,\n\t\t\tbackgroundColor,\n\t\t\tariaLabel,\n\t\t\trole,\n\t\t\tkind,\n\t\t};\n\n\t\tif (typeof priority === \"undefined\") {\n\t\t\tpriority = 0;\n\t\t}\n\n\t\tlet alignment = alignLeft\n\t\t\t? StatusbarAlignment.LEFT\n\t\t\t: StatusbarAlignment.RIGHT;\n\n\t\t// alignment and priority can only be set once (at creation time)\n\t\tconst existingEntry = this._entries.get(entryId);\n\t\tif (existingEntry) {\n\t\t\talignment = existingEntry.alignment;\n\t\t\tpriority = existingEntry.priority;\n\t\t}\n\n\t\t// Create new entry if not existing\n\t\tif (existingEntry) {\n\t\t\t// Otherwise update\n\t\t\texistingEntry.accessor.update(entry);\n\t\t\texistingEntry.entry = entry;\n\t\t\treturn StatusBarUpdateKind.DidUpdate;\n\t\t} else {\n\t\t\tlet entryPriority: number | IStatusbarEntryPriority;\n\t\t\tif (typeof extensionId === \"string\") {\n\t\t\t\t// We cannot enforce unique priorities across all extensions, so we\n\t\t\t\t// use the extension identifier as a secondary sort key to reduce\n\t\t\t\t// the likelyhood of collisions.\n\t\t\t\t// See https://github.com/microsoft/vscode/issues/177835\n\t\t\t\t// See https://github.com/microsoft/vscode/issues/123827\n\t\t\t\tentryPriority = {\n\t\t\t\t\tprimary: priority,\n\t\t\t\t\tsecondary: hash(extensionId),\n\t\t\t\t};\n\t\t\t} else {\n\t\t\t\tentryPriority = priority;\n\t\t\t}\n\n\t\t\tconst accessor = this._statusbarService.addEntry(\n\t\t\t\tentry,\n\t\t\t\tid,\n\t\t\t\talignment,\n\t\t\t\tentryPriority,\n\t\t\t);\n\t\t\tthis._entries.set(entryId, {\n\t\t\t\taccessor,\n\t\t\t\tentry,\n\t\t\t\talignment,\n\t\t\t\tpriority,\n\t\t\t\tdisposable: toDisposable(() => {\n\t\t\t\t\taccessor.dispose();\n\t\t\t\t\tthis._entries.delete(entryId);\n\t\t\t\t\tthis._onDidChange.fire({ removed: entryId });\n\t\t\t\t}),\n\t\t\t});\n\n\t\t\tthis._onDidChange.fire({\n\t\t\t\tadded: [entryId, { entry, alignment, priority }],\n\t\t\t});\n\t\t\treturn StatusBarUpdateKind.DidDefine;\n\t\t}\n\t}\n\n\tunsetEntry(entryId: string): void {\n\t\tthis._entries.get(entryId)?.disposable.dispose();\n\t\tthis._entries.delete(entryId);\n\t}\n\n\tgetEntries(): Iterable<\n\t\t[\n\t\t\tstring,\n\t\t\t{\n\t\t\t\tentry: IStatusbarEntry;\n\t\t\t\talignment: MainThreadStatusBarAlignment;\n\t\t\t\tpriority: number;\n\t\t\t},\n\t\t]\n\t> {\n\t\treturn this._entries.entries();\n\t}\n}\n\nregisterSingleton(\n\tIExtensionStatusBarItemService,\n\tExtensionStatusBarItemService,\n\tInstantiationType.Delayed,\n);\n\n// --- extension point and reading of it\n\ninterface IUserFriendlyStatusItemEntry {\n\tid: string;\n\tname: string;\n\ttext: string;\n\talignment: \"left\" | \"right\";\n\tcommand?: string;\n\tpriority?: number;\n\ttooltip?: string;\n\taccessibilityInformation?: IAccessibilityInformation;\n}\n\nfunction isUserFriendlyStatusItemEntry(\n\tcandidate: any,\n): candidate is IUserFriendlyStatusItemEntry {\n\tconst obj = candidate as IUserFriendlyStatusItemEntry;\n\treturn (\n\t\ttypeof obj.id === \"string\" &&\n\t\tobj.id.length > 0 &&\n\t\ttypeof obj.name === \"string\" &&\n\t\ttypeof obj.text === \"string\" &&\n\t\t(obj.alignment === \"left\" || obj.alignment === \"right\") &&\n\t\t(obj.command === undefined || typeof obj.command === \"string\") &&\n\t\t(obj.tooltip === undefined || typeof obj.tooltip === \"string\") &&\n\t\t(obj.priority === undefined || typeof obj.priority === \"number\") &&\n\t\t(obj.accessibilityInformation === undefined ||\n\t\t\tisAccessibilityInformation(obj.accessibilityInformation))\n\t);\n}\n\nconst statusBarItemSchema: IJSONSchema = {\n\ttype: \"object\",\n\trequired: [\"id\", \"text\", \"alignment\", \"name\"],\n\tproperties: {\n\t\tid: {\n\t\t\ttype: \"string\",\n\t\t\tmarkdownDescription: localize(\n\t\t\t\t\"id\",\n\t\t\t\t\"The identifier of the status bar entry. Must be unique within the extension. The same value must be used when calling the `vscode.window.createStatusBarItem(id, ...)`-API\",\n\t\t\t),\n\t\t},\n\t\tname: {\n\t\t\ttype: \"string\",\n\t\t\tdescription: localize(\n\t\t\t\t\"name\",\n\t\t\t\t\"The name of the entry, like 'Python Language Indicator', 'Git Status' etc. Try to keep the length of the name short, yet descriptive enough that users can understand what the status bar item is about.\",\n\t\t\t),\n\t\t},\n\t\ttext: {\n\t\t\ttype: \"string\",\n\t\t\tdescription: localize(\n\t\t\t\t\"text\",\n\t\t\t\t\"The text to show for the entry. You can embed icons in the text by leveraging the `$(<name>)`-syntax, like 'Hello $(globe)!'\",\n\t\t\t),\n\t\t},\n\t\ttooltip: {\n\t\t\ttype: \"string\",\n\t\t\tdescription: localize(\"tooltip\", \"The tooltip text for the entry.\"),\n\t\t},\n\t\tcommand: {\n\t\t\ttype: \"string\",\n\t\t\tdescription: localize(\n\t\t\t\t\"command\",\n\t\t\t\t\"The command to execute when the status bar entry is clicked.\",\n\t\t\t),\n\t\t},\n\t\talignment: {\n\t\t\ttype: \"string\",\n\t\t\tenum: [\"left\", \"right\"],\n\t\t\tdescription: localize(\n\t\t\t\t\"alignment\",\n\t\t\t\t\"The alignment of the status bar entry.\",\n\t\t\t),\n\t\t},\n\t\tpriority: {\n\t\t\ttype: \"number\",\n\t\t\tdescription: localize(\n\t\t\t\t\"priority\",\n\t\t\t\t\"The priority of the status bar entry. Higher value means the item should be shown more to the left.\",\n\t\t\t),\n\t\t},\n\t\taccessibilityInformation: {\n\t\t\ttype: \"object\",\n\t\t\tdescription: localize(\n\t\t\t\t\"accessibilityInformation\",\n\t\t\t\t\"Defines the role and aria label to be used when the status bar entry is focused.\",\n\t\t\t),\n\t\t\tproperties: {\n\t\t\t\trole: {\n\t\t\t\t\ttype: \"string\",\n\t\t\t\t\tdescription: localize(\n\t\t\t\t\t\t\"accessibilityInformation.role\",\n\t\t\t\t\t\t\"The role of the status bar entry which defines how a screen reader interacts with it. More about aria roles can be found here https://w3c.github.io/aria/#widget_roles\",\n\t\t\t\t\t),\n\t\t\t\t},\n\t\t\t\tlabel: {\n\t\t\t\t\ttype: \"string\",\n\t\t\t\t\tdescription: localize(\n\t\t\t\t\t\t\"accessibilityInformation.label\",\n\t\t\t\t\t\t\"The aria label of the status bar entry. Defaults to the entry's text.\",\n\t\t\t\t\t),\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t},\n};\n\nconst statusBarItemsSchema: IJSONSchema = {\n\tdescription: localize(\n\t\t\"vscode.extension.contributes.statusBarItems\",\n\t\t\"Contributes items to the status bar.\",\n\t),\n\toneOf: [\n\t\tstatusBarItemSchema,\n\t\t{\n\t\t\ttype: \"array\",\n\t\t\titems: statusBarItemSchema,\n\t\t},\n\t],\n};\n\nconst statusBarItemsExtensionPoint = ExtensionsRegistry.registerExtensionPoint<\n\tIUserFriendlyStatusItemEntry | IUserFriendlyStatusItemEntry[]\n>({\n\textensionPoint: \"statusBarItems\",\n\tjsonSchema: statusBarItemsSchema,\n});\n\nexport class StatusBarItemsExtensionPoint {\n\tconstructor(@IExtensionStatusBarItemService statusBarItemsService: IExtensionStatusBarItemService) {\n\n\t\tconst contributions = new DisposableStore();\n\n\t\tstatusBarItemsExtensionPoint.setHandler((extensions) => {\n\t\t\tcontributions.clear();\n\n\t\t\tfor (const entry of extensions) {\n\t\t\t\tif (\n\t\t\t\t\t!isProposedApiEnabled(\n\t\t\t\t\t\tentry.description,\n\t\t\t\t\t\t\"contribStatusBarItems\",\n\t\t\t\t\t)\n\t\t\t\t) {\n\t\t\t\t\tentry.collector.error(\n\t\t\t\t\t\t`The ${statusBarItemsExtensionPoint.name} is proposed API`,\n\t\t\t\t\t);\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tconst { value, collector } = entry;\n\n\t\t\t\tfor (const candidate of Iterable.wrap(value)) {\n\t\t\t\t\tif (!isUserFriendlyStatusItemEntry(candidate)) {\n\t\t\t\t\t\tcollector.error(\n\t\t\t\t\t\t\tlocalize(\n\t\t\t\t\t\t\t\t\"invalid\",\n\t\t\t\t\t\t\t\t\"Invalid status bar item contribution.\",\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t);\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst fullItemId = asStatusBarItemIdentifier(\n\t\t\t\t\t\tentry.description.identifier,\n\t\t\t\t\t\tcandidate.id,\n\t\t\t\t\t);\n\n\t\t\t\t\tconst kind = statusBarItemsService.setOrUpdateEntry(\n\t\t\t\t\t\tfullItemId,\n\t\t\t\t\t\tfullItemId,\n\t\t\t\t\t\tExtensionIdentifier.toKey(entry.description.identifier),\n\t\t\t\t\t\tcandidate.name ??\n\t\t\t\t\t\t\tentry.description.displayName ??\n\t\t\t\t\t\t\tentry.description.name,\n\t\t\t\t\t\tcandidate.text,\n\t\t\t\t\t\tcandidate.tooltip,\n\t\t\t\t\t\tcandidate.command\n\t\t\t\t\t\t\t? { id: candidate.command, title: candidate.name }\n\t\t\t\t\t\t\t: undefined,\n\t\t\t\t\t\tundefined,\n\t\t\t\t\t\tundefined,\n\t\t\t\t\t\tcandidate.alignment === \"left\",\n\t\t\t\t\t\tcandidate.priority,\n\t\t\t\t\t\tcandidate.accessibilityInformation,\n\t\t\t\t\t);\n\n\t\t\t\t\tif (kind === StatusBarUpdateKind.DidDefine) {\n\t\t\t\t\t\tcontributions.add(\n\t\t\t\t\t\t\ttoDisposable(() =>\n\t\t\t\t\t\t\t\tstatusBarItemsService.unsetEntry(fullItemId),\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n}\n"],
  "mappings": "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",
  "names": ["StatusBarUpdateKind"]
}
