{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/api/browser/mainThreadWebviewPanels.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { onUnexpectedError } from '../../../base/common/errors.js';\nimport { Event } from '../../../base/common/event.js';\nimport { Disposable, DisposableMap } from '../../../base/common/lifecycle.js';\nimport { URI } from '../../../base/common/uri.js';\nimport { generateUuid } from '../../../base/common/uuid.js';\nimport { IConfigurationService } from '../../../platform/configuration/common/configuration.js';\nimport { IStorageService } from '../../../platform/storage/common/storage.js';\nimport { ITelemetryService } from '../../../platform/telemetry/common/telemetry.js';\nimport { MainThreadWebviews, reviveWebviewContentOptions, reviveWebviewExtension } from './mainThreadWebviews.js';\nimport * as extHostProtocol from '../common/extHost.protocol.js';\nimport { DiffEditorInput } from '../../common/editor/diffEditorInput.js';\nimport { EditorInput } from '../../common/editor/editorInput.js';\nimport { ExtensionKeyedWebviewOriginStore, WebviewOptions } from '../../contrib/webview/browser/webview.js';\nimport { WebviewInput } from '../../contrib/webviewPanel/browser/webviewEditorInput.js';\nimport { WebviewIcons } from '../../contrib/webviewPanel/browser/webviewIconManager.js';\nimport { IWebViewShowOptions, IWebviewWorkbenchService } from '../../contrib/webviewPanel/browser/webviewWorkbenchService.js';\nimport { editorGroupToColumn } from '../../services/editor/common/editorGroupColumn.js';\nimport { GroupLocation, GroupsOrder, IEditorGroup, IEditorGroupsService, preferredSideBySideGroupDirection } from '../../services/editor/common/editorGroupsService.js';\nimport { ACTIVE_GROUP, IEditorService, PreferredGroup, SIDE_GROUP } from '../../services/editor/common/editorService.js';\nimport { IExtensionService } from '../../services/extensions/common/extensions.js';\nimport { IExtHostContext } from '../../services/extensions/common/extHostCustomers.js';\n\n/**\n * Bi-directional map between webview handles and inputs.\n */\nclass WebviewInputStore {\n\tprivate readonly _handlesToInputs = new Map<string, WebviewInput>();\n\tprivate readonly _inputsToHandles = new Map<WebviewInput, string>();\n\n\tpublic add(handle: string, input: WebviewInput): void {\n\t\tthis._handlesToInputs.set(handle, input);\n\t\tthis._inputsToHandles.set(input, handle);\n\t}\n\n\tpublic getHandleForInput(input: WebviewInput): string | undefined {\n\t\treturn this._inputsToHandles.get(input);\n\t}\n\n\tpublic getInputForHandle(handle: string): WebviewInput | undefined {\n\t\treturn this._handlesToInputs.get(handle);\n\t}\n\n\tpublic delete(handle: string): void {\n\t\tconst input = this.getInputForHandle(handle);\n\t\tthis._handlesToInputs.delete(handle);\n\t\tif (input) {\n\t\t\tthis._inputsToHandles.delete(input);\n\t\t}\n\t}\n\n\tpublic get size(): number {\n\t\treturn this._handlesToInputs.size;\n\t}\n\n\t[Symbol.iterator](): Iterator<WebviewInput> {\n\t\treturn this._handlesToInputs.values();\n\t}\n}\n\nclass WebviewViewTypeTransformer {\n\tpublic constructor(\n\t\tpublic readonly prefix: string,\n\t) { }\n\n\tpublic fromExternal(viewType: string): string {\n\t\treturn this.prefix + viewType;\n\t}\n\n\tpublic toExternal(viewType: string): string | undefined {\n\t\treturn viewType.startsWith(this.prefix)\n\t\t\t? viewType.substr(this.prefix.length)\n\t\t\t: undefined;\n\t}\n}\n\nexport class MainThreadWebviewPanels extends Disposable implements extHostProtocol.MainThreadWebviewPanelsShape {\n\n\tprivate readonly webviewPanelViewType = new WebviewViewTypeTransformer('mainThreadWebview-');\n\n\tprivate readonly _proxy: extHostProtocol.ExtHostWebviewPanelsShape;\n\n\tprivate readonly _webviewInputs = new WebviewInputStore();\n\n\tprivate readonly _revivers = this._register(new DisposableMap<string>());\n\n\tprivate readonly webviewOriginStore: ExtensionKeyedWebviewOriginStore;\n\n\tconstructor(\n\t\tcontext: IExtHostContext,\n\t\tprivate readonly _mainThreadWebviews: MainThreadWebviews,\n\t\t@IConfigurationService private readonly _configurationService: IConfigurationService,\n\t\t@IEditorGroupsService private readonly _editorGroupService: IEditorGroupsService,\n\t\t@IEditorService private readonly _editorService: IEditorService,\n\t\t@IExtensionService extensionService: IExtensionService,\n\t\t@IStorageService storageService: IStorageService,\n\t\t@ITelemetryService private readonly _telemetryService: ITelemetryService,\n\t\t@IWebviewWorkbenchService private readonly _webviewWorkbenchService: IWebviewWorkbenchService,\n\t) {\n\t\tsuper();\n\n\t\tthis.webviewOriginStore = new ExtensionKeyedWebviewOriginStore('mainThreadWebviewPanel.origins', storageService);\n\n\t\tthis._proxy = context.getProxy(extHostProtocol.ExtHostContext.ExtHostWebviewPanels);\n\n\t\tthis._register(Event.any(\n\t\t\t_editorService.onDidActiveEditorChange,\n\t\t\t_editorService.onDidVisibleEditorsChange,\n\t\t\t_editorGroupService.onDidAddGroup,\n\t\t\t_editorGroupService.onDidRemoveGroup,\n\t\t\t_editorGroupService.onDidMoveGroup,\n\t\t)(() => {\n\t\t\tthis.updateWebviewViewStates(this._editorService.activeEditor);\n\t\t}));\n\n\t\tthis._register(_webviewWorkbenchService.onDidChangeActiveWebviewEditor(input => {\n\t\t\tthis.updateWebviewViewStates(input);\n\t\t}));\n\n\t\t// This reviver's only job is to activate extensions.\n\t\t// This should trigger the real reviver to be registered from the extension host side.\n\t\tthis._register(_webviewWorkbenchService.registerResolver({\n\t\t\tcanResolve: (webview: WebviewInput) => {\n\t\t\t\tconst viewType = this.webviewPanelViewType.toExternal(webview.viewType);\n\t\t\t\tif (typeof viewType === 'string') {\n\t\t\t\t\textensionService.activateByEvent(`onWebviewPanel:${viewType}`);\n\t\t\t\t}\n\t\t\t\treturn false;\n\t\t\t},\n\t\t\tresolveWebview: () => { throw new Error('not implemented'); }\n\t\t}));\n\t}\n\n\tpublic get webviewInputs(): Iterable<WebviewInput> { return this._webviewInputs; }\n\n\tpublic addWebviewInput(handle: extHostProtocol.WebviewHandle, input: WebviewInput, options: { serializeBuffersForPostMessage: boolean }): void {\n\t\tthis._webviewInputs.add(handle, input);\n\t\tthis._mainThreadWebviews.addWebview(handle, input.webview, options);\n\n\t\tinput.webview.onDidDispose(() => {\n\t\t\tthis._proxy.$onDidDisposeWebviewPanel(handle).finally(() => {\n\t\t\t\tthis._webviewInputs.delete(handle);\n\t\t\t});\n\t\t});\n\t}\n\n\tpublic $createWebviewPanel(\n\t\textensionData: extHostProtocol.WebviewExtensionDescription,\n\t\thandle: extHostProtocol.WebviewHandle,\n\t\tviewType: string,\n\t\tinitData: extHostProtocol.IWebviewInitData,\n\t\tshowOptions: extHostProtocol.WebviewPanelShowOptions,\n\t): void {\n\t\tconst targetGroup = this.getTargetGroupFromShowOptions(showOptions);\n\t\tconst mainThreadShowOptions: IWebViewShowOptions = showOptions ? {\n\t\t\tpreserveFocus: !!showOptions.preserveFocus,\n\t\t\tgroup: targetGroup\n\t\t} : {};\n\n\t\tconst extension = reviveWebviewExtension(extensionData);\n\t\tconst origin = this.webviewOriginStore.getOrigin(viewType, extension.id);\n\n\t\tconst webview = this._webviewWorkbenchService.openWebview({\n\t\t\torigin,\n\t\t\tprovidedViewType: viewType,\n\t\t\ttitle: initData.title,\n\t\t\toptions: reviveWebviewOptions(initData.panelOptions),\n\t\t\tcontentOptions: reviveWebviewContentOptions(initData.webviewOptions),\n\t\t\textension\n\t\t}, this.webviewPanelViewType.fromExternal(viewType), initData.title, mainThreadShowOptions);\n\n\t\tthis.addWebviewInput(handle, webview, { serializeBuffersForPostMessage: initData.serializeBuffersForPostMessage });\n\n\t\tconst payload = {\n\t\t\textensionId: extension.id.value,\n\t\t\tviewType\n\t\t} as const;\n\n\t\ttype Classification = {\n\t\t\textensionId: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'Id of the extension that created the webview panel' };\n\t\t\tviewType: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'Id of the webview' };\n\t\t\towner: 'mjbvz';\n\t\t\tcomment: 'Triggered when a webview is created. Records the type of webview and the extension which created it';\n\t\t};\n\n\t\tthis._telemetryService.publicLog2<typeof payload, Classification>('webviews:createWebviewPanel', payload);\n\t}\n\n\tpublic $disposeWebview(handle: extHostProtocol.WebviewHandle): void {\n\t\tconst webview = this.tryGetWebviewInput(handle);\n\t\tif (!webview) {\n\t\t\treturn;\n\t\t}\n\t\twebview.dispose();\n\t}\n\n\tpublic $setTitle(handle: extHostProtocol.WebviewHandle, value: string): void {\n\t\tthis.tryGetWebviewInput(handle)?.setName(value);\n\t}\n\n\tpublic $setIconPath(handle: extHostProtocol.WebviewHandle, value: extHostProtocol.IWebviewIconPath | undefined): void {\n\t\tconst webview = this.tryGetWebviewInput(handle);\n\t\tif (webview) {\n\t\t\twebview.iconPath = reviveWebviewIcon(value);\n\t\t}\n\t}\n\n\tpublic $reveal(handle: extHostProtocol.WebviewHandle, showOptions: extHostProtocol.WebviewPanelShowOptions): void {\n\t\tconst webview = this.tryGetWebviewInput(handle);\n\t\tif (!webview || webview.isDisposed()) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst targetGroup = this.getTargetGroupFromShowOptions(showOptions);\n\t\tthis._webviewWorkbenchService.revealWebview(webview, targetGroup, !!showOptions.preserveFocus);\n\t}\n\n\tprivate getTargetGroupFromShowOptions(showOptions: extHostProtocol.WebviewPanelShowOptions): PreferredGroup {\n\t\tif (typeof showOptions.viewColumn === 'undefined'\n\t\t\t|| showOptions.viewColumn === ACTIVE_GROUP\n\t\t\t|| (this._editorGroupService.count === 1 && this._editorGroupService.activeGroup.isEmpty)\n\t\t) {\n\t\t\treturn ACTIVE_GROUP;\n\t\t}\n\n\t\tif (showOptions.viewColumn === SIDE_GROUP) {\n\t\t\treturn SIDE_GROUP;\n\t\t}\n\n\t\tif (showOptions.viewColumn >= 0) {\n\t\t\t// First check to see if an existing group exists\n\t\t\tconst groupInColumn = this._editorGroupService.getGroups(GroupsOrder.GRID_APPEARANCE)[showOptions.viewColumn];\n\t\t\tif (groupInColumn) {\n\t\t\t\treturn groupInColumn.id;\n\t\t\t}\n\n\t\t\t// We are dealing with an unknown group and therefore need a new group.\n\t\t\t// Note that the new group's id may not match the one requested. We only allow\n\t\t\t// creating a single new group, so if someone passes in `showOptions.viewColumn = 99`\n\t\t\t// and there are two editor groups open, we simply create a third editor group instead\n\t\t\t// of creating all the groups up to 99.\n\t\t\tconst newGroup = this._editorGroupService.findGroup({ location: GroupLocation.LAST });\n\t\t\tif (newGroup) {\n\t\t\t\tconst direction = preferredSideBySideGroupDirection(this._configurationService);\n\t\t\t\treturn this._editorGroupService.addGroup(newGroup, direction);\n\t\t\t}\n\t\t}\n\n\t\treturn ACTIVE_GROUP;\n\t}\n\n\tpublic $registerSerializer(viewType: string, options: { serializeBuffersForPostMessage: boolean }): void {\n\t\tif (this._revivers.has(viewType)) {\n\t\t\tthrow new Error(`Reviver for ${viewType} already registered`);\n\t\t}\n\n\t\tthis._revivers.set(viewType, this._webviewWorkbenchService.registerResolver({\n\t\t\tcanResolve: (webviewInput) => {\n\t\t\t\treturn webviewInput.viewType === this.webviewPanelViewType.fromExternal(viewType);\n\t\t\t},\n\t\t\tresolveWebview: async (webviewInput): Promise<void> => {\n\t\t\t\tconst viewType = this.webviewPanelViewType.toExternal(webviewInput.viewType);\n\t\t\t\tif (!viewType) {\n\t\t\t\t\twebviewInput.webview.setHtml(this._mainThreadWebviews.getWebviewResolvedFailedContent(webviewInput.viewType));\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst handle = generateUuid();\n\n\t\t\t\tthis.addWebviewInput(handle, webviewInput, options);\n\n\t\t\t\tlet state = undefined;\n\t\t\t\tif (webviewInput.webview.state) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tstate = JSON.parse(webviewInput.webview.state);\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\tconsole.error('Could not load webview state', e, webviewInput.webview.state);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\ttry {\n\t\t\t\t\tawait this._proxy.$deserializeWebviewPanel(handle, viewType, {\n\t\t\t\t\t\ttitle: webviewInput.getTitle(),\n\t\t\t\t\t\tstate,\n\t\t\t\t\t\tpanelOptions: webviewInput.webview.options,\n\t\t\t\t\t\twebviewOptions: webviewInput.webview.contentOptions,\n\t\t\t\t\t\tactive: webviewInput === this._editorService.activeEditor,\n\t\t\t\t\t}, editorGroupToColumn(this._editorGroupService, webviewInput.group || 0));\n\t\t\t\t} catch (error) {\n\t\t\t\t\tonUnexpectedError(error);\n\t\t\t\t\twebviewInput.webview.setHtml(this._mainThreadWebviews.getWebviewResolvedFailedContent(viewType));\n\t\t\t\t}\n\t\t\t}\n\t\t}));\n\t}\n\n\tpublic $unregisterSerializer(viewType: string): void {\n\t\tif (!this._revivers.has(viewType)) {\n\t\t\tthrow new Error(`No reviver for ${viewType} registered`);\n\t\t}\n\n\t\tthis._revivers.deleteAndDispose(viewType);\n\t}\n\n\tprivate updateWebviewViewStates(activeEditorInput: EditorInput | undefined) {\n\t\tif (!this._webviewInputs.size) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst viewStates: extHostProtocol.WebviewPanelViewStateData = {};\n\n\t\tconst updateViewStatesForInput = (group: IEditorGroup, topLevelInput: EditorInput, editorInput: EditorInput) => {\n\t\t\tif (!(editorInput instanceof WebviewInput)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\teditorInput.updateGroup(group.id);\n\n\t\t\tconst handle = this._webviewInputs.getHandleForInput(editorInput);\n\t\t\tif (handle) {\n\t\t\t\tviewStates[handle] = {\n\t\t\t\t\tvisible: topLevelInput === group.activeEditor,\n\t\t\t\t\tactive: editorInput === activeEditorInput,\n\t\t\t\t\tposition: editorGroupToColumn(this._editorGroupService, group.id),\n\t\t\t\t};\n\t\t\t}\n\t\t};\n\n\t\tfor (const group of this._editorGroupService.groups) {\n\t\t\tfor (const input of group.editors) {\n\t\t\t\tif (input instanceof DiffEditorInput) {\n\t\t\t\t\tupdateViewStatesForInput(group, input, input.primary);\n\t\t\t\t\tupdateViewStatesForInput(group, input, input.secondary);\n\t\t\t\t} else {\n\t\t\t\t\tupdateViewStatesForInput(group, input, input);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (Object.keys(viewStates).length) {\n\t\t\tthis._proxy.$onDidChangeWebviewPanelViewStates(viewStates);\n\t\t}\n\t}\n\n\tprivate tryGetWebviewInput(handle: extHostProtocol.WebviewHandle): WebviewInput | undefined {\n\t\treturn this._webviewInputs.getInputForHandle(handle);\n\t}\n}\n\nfunction reviveWebviewIcon(value: extHostProtocol.IWebviewIconPath | undefined): WebviewIcons | undefined {\n\tif (!value) {\n\t\treturn undefined;\n\t}\n\treturn {\n\t\tlight: URI.revive(value.light),\n\t\tdark: URI.revive(value.dark),\n\t};\n}\n\nfunction reviveWebviewOptions(panelOptions: extHostProtocol.IWebviewPanelOptions): WebviewOptions {\n\treturn {\n\t\tenableFindWidget: panelOptions.enableFindWidget,\n\t\tretainContextWhenHidden: panelOptions.retainContextWhenHidden,\n\t};\n}\n"],
  "mappings": "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",
  "names": ["viewType"]
}
