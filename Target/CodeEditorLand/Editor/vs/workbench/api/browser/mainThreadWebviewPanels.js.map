{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/api/browser/mainThreadWebviewPanels.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { onUnexpectedError } from \"../../../base/common/errors.js\";\nimport { Event } from \"../../../base/common/event.js\";\nimport { Disposable, DisposableMap } from \"../../../base/common/lifecycle.js\";\nimport { URI } from \"../../../base/common/uri.js\";\nimport { generateUuid } from \"../../../base/common/uuid.js\";\nimport { IConfigurationService } from \"../../../platform/configuration/common/configuration.js\";\nimport { IStorageService } from \"../../../platform/storage/common/storage.js\";\nimport { ITelemetryService } from \"../../../platform/telemetry/common/telemetry.js\";\nimport { DiffEditorInput } from \"../../common/editor/diffEditorInput.js\";\nimport type { EditorInput } from \"../../common/editor/editorInput.js\";\nimport {\n\tExtensionKeyedWebviewOriginStore,\n\ttype WebviewOptions,\n} from \"../../contrib/webview/browser/webview.js\";\nimport { WebviewInput } from \"../../contrib/webviewPanel/browser/webviewEditorInput.js\";\nimport type { WebviewIcons } from \"../../contrib/webviewPanel/browser/webviewIconManager.js\";\nimport {\n\ttype IWebViewShowOptions,\n\tIWebviewWorkbenchService,\n} from \"../../contrib/webviewPanel/browser/webviewWorkbenchService.js\";\nimport { editorGroupToColumn } from \"../../services/editor/common/editorGroupColumn.js\";\nimport {\n\tGroupLocation,\n\tGroupsOrder,\n\ttype IEditorGroup,\n\tIEditorGroupsService,\n\tpreferredSideBySideGroupDirection,\n} from \"../../services/editor/common/editorGroupsService.js\";\nimport {\n\tACTIVE_GROUP,\n\tIEditorService,\n\ttype PreferredGroup,\n\tSIDE_GROUP,\n} from \"../../services/editor/common/editorService.js\";\nimport type { IExtHostContext } from \"../../services/extensions/common/extHostCustomers.js\";\nimport { IExtensionService } from \"../../services/extensions/common/extensions.js\";\nimport * as extHostProtocol from \"../common/extHost.protocol.js\";\nimport {\n\ttype MainThreadWebviews,\n\treviveWebviewContentOptions,\n\treviveWebviewExtension,\n} from \"./mainThreadWebviews.js\";\n\n/**\n * Bi-directional map between webview handles and inputs.\n */\nclass WebviewInputStore {\n\tprivate readonly _handlesToInputs = new Map<string, WebviewInput>();\n\tprivate readonly _inputsToHandles = new Map<WebviewInput, string>();\n\n\tpublic add(handle: string, input: WebviewInput): void {\n\t\tthis._handlesToInputs.set(handle, input);\n\t\tthis._inputsToHandles.set(input, handle);\n\t}\n\n\tpublic getHandleForInput(input: WebviewInput): string | undefined {\n\t\treturn this._inputsToHandles.get(input);\n\t}\n\n\tpublic getInputForHandle(handle: string): WebviewInput | undefined {\n\t\treturn this._handlesToInputs.get(handle);\n\t}\n\n\tpublic delete(handle: string): void {\n\t\tconst input = this.getInputForHandle(handle);\n\t\tthis._handlesToInputs.delete(handle);\n\t\tif (input) {\n\t\t\tthis._inputsToHandles.delete(input);\n\t\t}\n\t}\n\n\tpublic get size(): number {\n\t\treturn this._handlesToInputs.size;\n\t}\n\n\t[Symbol.iterator](): Iterator<WebviewInput> {\n\t\treturn this._handlesToInputs.values();\n\t}\n}\n\nclass WebviewViewTypeTransformer {\n\tpublic constructor(public readonly prefix: string) {}\n\n\tpublic fromExternal(viewType: string): string {\n\t\treturn this.prefix + viewType;\n\t}\n\n\tpublic toExternal(viewType: string): string | undefined {\n\t\treturn viewType.startsWith(this.prefix)\n\t\t\t? viewType.substr(this.prefix.length)\n\t\t\t: undefined;\n\t}\n}\n\nexport class MainThreadWebviewPanels\n\textends Disposable\n\timplements extHostProtocol.MainThreadWebviewPanelsShape\n{\n\tprivate readonly webviewPanelViewType = new WebviewViewTypeTransformer(\n\t\t\"mainThreadWebview-\",\n\t);\n\n\tprivate readonly _proxy: extHostProtocol.ExtHostWebviewPanelsShape;\n\n\tprivate readonly _webviewInputs = new WebviewInputStore();\n\n\tprivate readonly _revivers = this._register(new DisposableMap<string>());\n\n\tprivate readonly webviewOriginStore: ExtensionKeyedWebviewOriginStore;\n\n\tconstructor(\n\t\tcontext: IExtHostContext,\n\t\tprivate readonly _mainThreadWebviews: MainThreadWebviews,\n\t\t@IConfigurationService\n\t\tprivate readonly _configurationService: IConfigurationService,\n\t\t@IEditorGroupsService\n\t\tprivate readonly _editorGroupService: IEditorGroupsService,\n\t\t@IEditorService private readonly _editorService: IEditorService,\n\t\t@IExtensionService extensionService: IExtensionService,\n\t\t@IStorageService storageService: IStorageService,\n\t\t@ITelemetryService\n\t\tprivate readonly _telemetryService: ITelemetryService,\n\t\t@IWebviewWorkbenchService\n\t\tprivate readonly _webviewWorkbenchService: IWebviewWorkbenchService,\n\t) {\n\t\tsuper();\n\n\t\tthis.webviewOriginStore = new ExtensionKeyedWebviewOriginStore(\n\t\t\t\"mainThreadWebviewPanel.origins\",\n\t\t\tstorageService,\n\t\t);\n\n\t\tthis._proxy = context.getProxy(\n\t\t\textHostProtocol.ExtHostContext.ExtHostWebviewPanels,\n\t\t);\n\n\t\tthis._register(\n\t\t\tEvent.any(\n\t\t\t\t_editorService.onDidActiveEditorChange,\n\t\t\t\t_editorService.onDidVisibleEditorsChange,\n\t\t\t\t_editorGroupService.onDidAddGroup,\n\t\t\t\t_editorGroupService.onDidRemoveGroup,\n\t\t\t\t_editorGroupService.onDidMoveGroup,\n\t\t\t)(() => {\n\t\t\t\tthis.updateWebviewViewStates(this._editorService.activeEditor);\n\t\t\t}),\n\t\t);\n\n\t\tthis._register(\n\t\t\t_webviewWorkbenchService.onDidChangeActiveWebviewEditor((input) => {\n\t\t\t\tthis.updateWebviewViewStates(input);\n\t\t\t}),\n\t\t);\n\n\t\t// This reviver's only job is to activate extensions.\n\t\t// This should trigger the real reviver to be registered from the extension host side.\n\t\tthis._register(\n\t\t\t_webviewWorkbenchService.registerResolver({\n\t\t\t\tcanResolve: (webview: WebviewInput) => {\n\t\t\t\t\tconst viewType = this.webviewPanelViewType.toExternal(\n\t\t\t\t\t\twebview.viewType,\n\t\t\t\t\t);\n\t\t\t\t\tif (typeof viewType === \"string\") {\n\t\t\t\t\t\textensionService.activateByEvent(\n\t\t\t\t\t\t\t`onWebviewPanel:${viewType}`,\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t\treturn false;\n\t\t\t\t},\n\t\t\t\tresolveWebview: () => {\n\t\t\t\t\tthrow new Error(\"not implemented\");\n\t\t\t\t},\n\t\t\t}),\n\t\t);\n\t}\n\n\tpublic get webviewInputs(): Iterable<WebviewInput> {\n\t\treturn this._webviewInputs;\n\t}\n\n\tpublic addWebviewInput(\n\t\thandle: extHostProtocol.WebviewHandle,\n\t\tinput: WebviewInput,\n\t\toptions: { serializeBuffersForPostMessage: boolean },\n\t): void {\n\t\tthis._webviewInputs.add(handle, input);\n\t\tthis._mainThreadWebviews.addWebview(handle, input.webview, options);\n\n\t\tinput.webview.onDidDispose(() => {\n\t\t\tthis._proxy.$onDidDisposeWebviewPanel(handle).finally(() => {\n\t\t\t\tthis._webviewInputs.delete(handle);\n\t\t\t});\n\t\t});\n\t}\n\n\tpublic $createWebviewPanel(\n\t\textensionData: extHostProtocol.WebviewExtensionDescription,\n\t\thandle: extHostProtocol.WebviewHandle,\n\t\tviewType: string,\n\t\tinitData: extHostProtocol.IWebviewInitData,\n\t\tshowOptions: extHostProtocol.WebviewPanelShowOptions,\n\t): void {\n\t\tconst targetGroup = this.getTargetGroupFromShowOptions(showOptions);\n\t\tconst mainThreadShowOptions: IWebViewShowOptions = showOptions\n\t\t\t? {\n\t\t\t\t\tpreserveFocus: !!showOptions.preserveFocus,\n\t\t\t\t\tgroup: targetGroup,\n\t\t\t\t}\n\t\t\t: {};\n\n\t\tconst extension = reviveWebviewExtension(extensionData);\n\t\tconst origin = this.webviewOriginStore.getOrigin(\n\t\t\tviewType,\n\t\t\textension.id,\n\t\t);\n\n\t\tconst webview = this._webviewWorkbenchService.openWebview(\n\t\t\t{\n\t\t\t\torigin,\n\t\t\t\tprovidedViewType: viewType,\n\t\t\t\ttitle: initData.title,\n\t\t\t\toptions: reviveWebviewOptions(initData.panelOptions),\n\t\t\t\tcontentOptions: reviveWebviewContentOptions(\n\t\t\t\t\tinitData.webviewOptions,\n\t\t\t\t),\n\t\t\t\textension,\n\t\t\t},\n\t\t\tthis.webviewPanelViewType.fromExternal(viewType),\n\t\t\tinitData.title,\n\t\t\tmainThreadShowOptions,\n\t\t);\n\n\t\tthis.addWebviewInput(handle, webview, {\n\t\t\tserializeBuffersForPostMessage:\n\t\t\t\tinitData.serializeBuffersForPostMessage,\n\t\t});\n\n\t\tconst payload = {\n\t\t\textensionId: extension.id.value,\n\t\t\tviewType,\n\t\t} as const;\n\n\t\ttype Classification = {\n\t\t\textensionId: {\n\t\t\t\tclassification: \"SystemMetaData\";\n\t\t\t\tpurpose: \"FeatureInsight\";\n\t\t\t\tcomment: \"Id of the extension that created the webview panel\";\n\t\t\t};\n\t\t\tviewType: {\n\t\t\t\tclassification: \"SystemMetaData\";\n\t\t\t\tpurpose: \"FeatureInsight\";\n\t\t\t\tcomment: \"Id of the webview\";\n\t\t\t};\n\t\t\towner: \"mjbvz\";\n\t\t\tcomment: \"Triggered when a webview is created. Records the type of webview and the extension which created it\";\n\t\t};\n\n\t\tthis._telemetryService.publicLog2<typeof payload, Classification>(\n\t\t\t\"webviews:createWebviewPanel\",\n\t\t\tpayload,\n\t\t);\n\t}\n\n\tpublic $disposeWebview(handle: extHostProtocol.WebviewHandle): void {\n\t\tconst webview = this.tryGetWebviewInput(handle);\n\t\tif (!webview) {\n\t\t\treturn;\n\t\t}\n\t\twebview.dispose();\n\t}\n\n\tpublic $setTitle(\n\t\thandle: extHostProtocol.WebviewHandle,\n\t\tvalue: string,\n\t): void {\n\t\tthis.tryGetWebviewInput(handle)?.setName(value);\n\t}\n\n\tpublic $setIconPath(\n\t\thandle: extHostProtocol.WebviewHandle,\n\t\tvalue: extHostProtocol.IWebviewIconPath | undefined,\n\t): void {\n\t\tconst webview = this.tryGetWebviewInput(handle);\n\t\tif (webview) {\n\t\t\twebview.iconPath = reviveWebviewIcon(value);\n\t\t}\n\t}\n\n\tpublic $reveal(\n\t\thandle: extHostProtocol.WebviewHandle,\n\t\tshowOptions: extHostProtocol.WebviewPanelShowOptions,\n\t): void {\n\t\tconst webview = this.tryGetWebviewInput(handle);\n\t\tif (!webview || webview.isDisposed()) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst targetGroup = this.getTargetGroupFromShowOptions(showOptions);\n\t\tthis._webviewWorkbenchService.revealWebview(\n\t\t\twebview,\n\t\t\ttargetGroup,\n\t\t\t!!showOptions.preserveFocus,\n\t\t);\n\t}\n\n\tprivate getTargetGroupFromShowOptions(\n\t\tshowOptions: extHostProtocol.WebviewPanelShowOptions,\n\t): PreferredGroup {\n\t\tif (\n\t\t\ttypeof showOptions.viewColumn === \"undefined\" ||\n\t\t\tshowOptions.viewColumn === ACTIVE_GROUP ||\n\t\t\t(this._editorGroupService.count === 1 &&\n\t\t\t\tthis._editorGroupService.activeGroup.isEmpty)\n\t\t) {\n\t\t\treturn ACTIVE_GROUP;\n\t\t}\n\n\t\tif (showOptions.viewColumn === SIDE_GROUP) {\n\t\t\treturn SIDE_GROUP;\n\t\t}\n\n\t\tif (showOptions.viewColumn >= 0) {\n\t\t\t// First check to see if an existing group exists\n\t\t\tconst groupInColumn = this._editorGroupService.getGroups(\n\t\t\t\tGroupsOrder.GRID_APPEARANCE,\n\t\t\t)[showOptions.viewColumn];\n\t\t\tif (groupInColumn) {\n\t\t\t\treturn groupInColumn.id;\n\t\t\t}\n\n\t\t\t// We are dealing with an unknown group and therefore need a new group.\n\t\t\t// Note that the new group's id may not match the one requested. We only allow\n\t\t\t// creating a single new group, so if someone passes in `showOptions.viewColumn = 99`\n\t\t\t// and there are two editor groups open, we simply create a third editor group instead\n\t\t\t// of creating all the groups up to 99.\n\t\t\tconst newGroup = this._editorGroupService.findGroup({\n\t\t\t\tlocation: GroupLocation.LAST,\n\t\t\t});\n\t\t\tif (newGroup) {\n\t\t\t\tconst direction = preferredSideBySideGroupDirection(\n\t\t\t\t\tthis._configurationService,\n\t\t\t\t);\n\t\t\t\treturn this._editorGroupService.addGroup(newGroup, direction);\n\t\t\t}\n\t\t}\n\n\t\treturn ACTIVE_GROUP;\n\t}\n\n\tpublic $registerSerializer(\n\t\tviewType: string,\n\t\toptions: { serializeBuffersForPostMessage: boolean },\n\t): void {\n\t\tif (this._revivers.has(viewType)) {\n\t\t\tthrow new Error(`Reviver for ${viewType} already registered`);\n\t\t}\n\n\t\tthis._revivers.set(\n\t\t\tviewType,\n\t\t\tthis._webviewWorkbenchService.registerResolver({\n\t\t\t\tcanResolve: (webviewInput) => {\n\t\t\t\t\treturn (\n\t\t\t\t\t\twebviewInput.viewType ===\n\t\t\t\t\t\tthis.webviewPanelViewType.fromExternal(viewType)\n\t\t\t\t\t);\n\t\t\t\t},\n\t\t\t\tresolveWebview: async (webviewInput): Promise<void> => {\n\t\t\t\t\tconst viewType = this.webviewPanelViewType.toExternal(\n\t\t\t\t\t\twebviewInput.viewType,\n\t\t\t\t\t);\n\t\t\t\t\tif (!viewType) {\n\t\t\t\t\t\twebviewInput.webview.setHtml(\n\t\t\t\t\t\t\tthis._mainThreadWebviews.getWebviewResolvedFailedContent(\n\t\t\t\t\t\t\t\twebviewInput.viewType,\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst handle = generateUuid();\n\n\t\t\t\t\tthis.addWebviewInput(handle, webviewInput, options);\n\n\t\t\t\t\tlet state;\n\t\t\t\t\tif (webviewInput.webview.state) {\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tstate = JSON.parse(webviewInput.webview.state);\n\t\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\t\tconsole.error(\n\t\t\t\t\t\t\t\t\"Could not load webview state\",\n\t\t\t\t\t\t\t\te,\n\t\t\t\t\t\t\t\twebviewInput.webview.state,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tawait this._proxy.$deserializeWebviewPanel(\n\t\t\t\t\t\t\thandle,\n\t\t\t\t\t\t\tviewType,\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\ttitle: webviewInput.getTitle(),\n\t\t\t\t\t\t\t\tstate,\n\t\t\t\t\t\t\t\tpanelOptions: webviewInput.webview.options,\n\t\t\t\t\t\t\t\twebviewOptions:\n\t\t\t\t\t\t\t\t\twebviewInput.webview.contentOptions,\n\t\t\t\t\t\t\t\tactive:\n\t\t\t\t\t\t\t\t\twebviewInput ===\n\t\t\t\t\t\t\t\t\tthis._editorService.activeEditor,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\teditorGroupToColumn(\n\t\t\t\t\t\t\t\tthis._editorGroupService,\n\t\t\t\t\t\t\t\twebviewInput.group || 0,\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t);\n\t\t\t\t\t} catch (error) {\n\t\t\t\t\t\tonUnexpectedError(error);\n\t\t\t\t\t\twebviewInput.webview.setHtml(\n\t\t\t\t\t\t\tthis._mainThreadWebviews.getWebviewResolvedFailedContent(\n\t\t\t\t\t\t\t\tviewType,\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t}),\n\t\t);\n\t}\n\n\tpublic $unregisterSerializer(viewType: string): void {\n\t\tif (!this._revivers.has(viewType)) {\n\t\t\tthrow new Error(`No reviver for ${viewType} registered`);\n\t\t}\n\n\t\tthis._revivers.deleteAndDispose(viewType);\n\t}\n\n\tprivate updateWebviewViewStates(\n\t\tactiveEditorInput: EditorInput | undefined,\n\t) {\n\t\tif (!this._webviewInputs.size) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst viewStates: extHostProtocol.WebviewPanelViewStateData = {};\n\n\t\tconst updateViewStatesForInput = (\n\t\t\tgroup: IEditorGroup,\n\t\t\ttopLevelInput: EditorInput,\n\t\t\teditorInput: EditorInput,\n\t\t) => {\n\t\t\tif (!(editorInput instanceof WebviewInput)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\teditorInput.updateGroup(group.id);\n\n\t\t\tconst handle = this._webviewInputs.getHandleForInput(editorInput);\n\t\t\tif (handle) {\n\t\t\t\tviewStates[handle] = {\n\t\t\t\t\tvisible: topLevelInput === group.activeEditor,\n\t\t\t\t\tactive: editorInput === activeEditorInput,\n\t\t\t\t\tposition: editorGroupToColumn(\n\t\t\t\t\t\tthis._editorGroupService,\n\t\t\t\t\t\tgroup.id,\n\t\t\t\t\t),\n\t\t\t\t};\n\t\t\t}\n\t\t};\n\n\t\tfor (const group of this._editorGroupService.groups) {\n\t\t\tfor (const input of group.editors) {\n\t\t\t\tif (input instanceof DiffEditorInput) {\n\t\t\t\t\tupdateViewStatesForInput(group, input, input.primary);\n\t\t\t\t\tupdateViewStatesForInput(group, input, input.secondary);\n\t\t\t\t} else {\n\t\t\t\t\tupdateViewStatesForInput(group, input, input);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (Object.keys(viewStates).length) {\n\t\t\tthis._proxy.$onDidChangeWebviewPanelViewStates(viewStates);\n\t\t}\n\t}\n\n\tprivate tryGetWebviewInput(\n\t\thandle: extHostProtocol.WebviewHandle,\n\t): WebviewInput | undefined {\n\t\treturn this._webviewInputs.getInputForHandle(handle);\n\t}\n}\n\nfunction reviveWebviewIcon(\n\tvalue: extHostProtocol.IWebviewIconPath | undefined,\n): WebviewIcons | undefined {\n\tif (!value) {\n\t\treturn undefined;\n\t}\n\treturn {\n\t\tlight: URI.revive(value.light),\n\t\tdark: URI.revive(value.dark),\n\t};\n}\n\nfunction reviveWebviewOptions(\n\tpanelOptions: extHostProtocol.IWebviewPanelOptions,\n): WebviewOptions {\n\treturn {\n\t\tenableFindWidget: panelOptions.enableFindWidget,\n\t\tretainContextWhenHidden: panelOptions.retainContextWhenHidden,\n\t};\n}\n"],
  "mappings": "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",
  "names": ["viewType"]
}
