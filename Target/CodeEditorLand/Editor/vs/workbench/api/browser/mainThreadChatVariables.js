var d=Object.defineProperty;var C=Object.getOwnPropertyDescriptor;var b=(t,e,r,a)=>{for(var s=a>1?void 0:a?C(e,r):e,o=t.length-1,i;o>=0;o--)(i=t[o])&&(s=(a?i(e,r,s):i(s))||s);return a&&s&&d(e,r,s),s},h=(t,e)=>(r,a)=>e(r,a,t);import{DisposableMap as m}from"../../../base/common/lifecycle.js";import{revive as p}from"../../../base/common/marshalling.js";import{IChatVariablesService as c}from"../../contrib/chat/common/chatVariables.js";import{extHostNamedCustomer as x}from"../../services/extensions/common/extHostCustomers.js";import{ExtHostContext as u,MainContext as I}from"../common/extHost.protocol.js";let l=class{constructor(e,r){this._chatVariablesService=r;this._proxy=e.getProxy(u.ExtHostChatVariables)}_proxy;_variables=new m;_pendingProgress=new Map;dispose(){this._variables.clearAndDisposeAll()}$registerVariable(e,r){const a=this._chatVariablesService.registerVariable(r,async(s,o,i,v,g)=>{const n=`${i.sessionId}-${e}`;this._pendingProgress.set(n,v);const V=p(await this._proxy.$resolveVariable(e,n,s,g));return this._pendingProgress.delete(n),V});this._variables.set(e,a)}async $handleProgressChunk(e,r){const a=p(r);this._pendingProgress.get(e)?.(a)}$unregisterVariable(e){this._variables.deleteAndDispose(e)}};l=b([x(I.MainThreadChatVariables),h(1,c)],l);export{l as MainThreadChatVariables};
