{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/api/browser/mainThreadConsole.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { extHostNamedCustomer, IExtHostContext } from '../../services/extensions/common/extHostCustomers.js';\nimport { MainContext, MainThreadConsoleShape } from '../common/extHost.protocol.js';\nimport { IEnvironmentService } from '../../../platform/environment/common/environment.js';\nimport { IRemoteConsoleLog, log } from '../../../base/common/console.js';\nimport { logRemoteEntry, logRemoteEntryIfError } from '../../services/extensions/common/remoteConsoleUtil.js';\nimport { parseExtensionDevOptions } from '../../services/extensions/common/extensionDevOptions.js';\nimport { ILogService } from '../../../platform/log/common/log.js';\n\n@extHostNamedCustomer(MainContext.MainThreadConsole)\nexport class MainThreadConsole implements MainThreadConsoleShape {\n\n\tprivate readonly _isExtensionDevTestFromCli: boolean;\n\n\tconstructor(\n\t\t_extHostContext: IExtHostContext,\n\t\t@IEnvironmentService private readonly _environmentService: IEnvironmentService,\n\t\t@ILogService private readonly _logService: ILogService,\n\t) {\n\t\tconst devOpts = parseExtensionDevOptions(this._environmentService);\n\t\tthis._isExtensionDevTestFromCli = devOpts.isExtensionDevTestFromCli;\n\t}\n\n\tdispose(): void {\n\t\t//\n\t}\n\n\t$logExtensionHostMessage(entry: IRemoteConsoleLog): void {\n\t\tif (this._isExtensionDevTestFromCli) {\n\t\t\t// If running tests from cli, log to the log service everything\n\t\t\tlogRemoteEntry(this._logService, entry);\n\t\t} else {\n\t\t\t// Log to the log service only errors and log everything to local console\n\t\t\tlogRemoteEntryIfError(this._logService, entry, 'Extension Host');\n\t\t\tlog(entry, 'Extension Host');\n\t\t}\n\t}\n}\n"],
  "mappings": ";;;;;;;;;;;;AAKA,SAAS,sBAAsB,uBAAuB;AACtD,SAAS,aAAa,8BAA8B;AACpD,SAAS,2BAA2B;AACpC,SAAS,mBAAmB,WAAW;AACvC,SAAS,gBAAgB,6BAA6B;AACtD,SAAS,gCAAgC;AACzC,SAAS,mBAAmB;AAGrB,IAAM,oBAAN,MAA0D;AAAA,EAIhE,YACC,iBACsC,qBACR,aAC7B;AAFqC;AACR;AAE9B,UAAM,UAAU,yBAAyB,KAAK,mBAAmB;AACjE,SAAK,6BAA6B,QAAQ;AAAA,EAC3C;AAAA,EATiB;AAAA,EAWjB,UAAgB;AAAA,EAEhB;AAAA,EAEA,yBAAyB,OAAgC;AACxD,QAAI,KAAK,4BAA4B;AAEpC,qBAAe,KAAK,aAAa,KAAK;AAAA,IACvC,OAAO;AAEN,4BAAsB,KAAK,aAAa,OAAO,gBAAgB;AAC/D,UAAI,OAAO,gBAAgB;AAAA,IAC5B;AAAA,EACD;AACD;AA3BiE;AAApD,oBAAN;AAAA,EADN,qBAAqB,YAAY,iBAAiB;AAAA,EAOhD;AAAA,EACA;AAAA,GAPU;",
  "names": []
}
