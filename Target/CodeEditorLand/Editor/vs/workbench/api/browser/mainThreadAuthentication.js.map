{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/api/browser/mainThreadAuthentication.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CancellationError } from \"../../../base/common/errors.js\";\nimport { Emitter, type Event } from \"../../../base/common/event.js\";\nimport { Disposable, DisposableMap } from \"../../../base/common/lifecycle.js\";\nimport Severity from \"../../../base/common/severity.js\";\nimport { URI, type UriComponents } from \"../../../base/common/uri.js\";\nimport * as nls from \"../../../nls.js\";\nimport {\n\tIDialogService,\n\ttype IPromptButton,\n} from \"../../../platform/dialogs/common/dialogs.js\";\nimport { INotificationService } from \"../../../platform/notification/common/notification.js\";\nimport { IOpenerService } from \"../../../platform/opener/common/opener.js\";\nimport { ITelemetryService } from \"../../../platform/telemetry/common/telemetry.js\";\nimport { IAuthenticationAccessService } from \"../../services/authentication/browser/authenticationAccessService.js\";\nimport { getAuthenticationProviderActivationEvent } from \"../../services/authentication/browser/authenticationService.js\";\nimport { IAuthenticationUsageService } from \"../../services/authentication/browser/authenticationUsageService.js\";\nimport {\n\ttype AuthenticationSession,\n\ttype AuthenticationSessionAccount,\n\ttype AuthenticationSessionsChangeEvent,\n\ttype IAuthenticationCreateSessionOptions,\n\tIAuthenticationExtensionsService,\n\ttype IAuthenticationProvider,\n\ttype IAuthenticationProviderSessionOptions,\n\tIAuthenticationService,\n\tINTERNAL_AUTH_PROVIDER_PREFIX as INTERNAL_MODEL_AUTH_PROVIDER_PREFIX,\n} from \"../../services/authentication/common/authentication.js\";\nimport {\n\ttype IExtHostContext,\n\textHostNamedCustomer,\n} from \"../../services/extensions/common/extHostCustomers.js\";\nimport {\n\tActivationKind,\n\tIExtensionService,\n} from \"../../services/extensions/common/extensions.js\";\nimport {\n\ttype ExtHostAuthenticationShape,\n\tExtHostContext,\n\tMainContext,\n\ttype MainThreadAuthenticationShape,\n} from \"../common/extHost.protocol.js\";\n\ninterface AuthenticationForceNewSessionOptions {\n\tdetail?: string;\n\tlearnMore?: UriComponents;\n\tsessionToRecreate?: AuthenticationSession;\n}\n\ninterface AuthenticationGetSessionOptions {\n\tclearSessionPreference?: boolean;\n\tcreateIfNone?: boolean;\n\tforceNewSession?: boolean | AuthenticationForceNewSessionOptions;\n\tsilent?: boolean;\n\taccount?: AuthenticationSessionAccount;\n}\n\nexport class MainThreadAuthenticationProvider\n\textends Disposable\n\timplements IAuthenticationProvider\n{\n\treadonly onDidChangeSessions: Event<AuthenticationSessionsChangeEvent>;\n\n\tconstructor(\n\t\tprivate readonly _proxy: ExtHostAuthenticationShape,\n\t\tpublic readonly id: string,\n\t\tpublic readonly label: string,\n\t\tpublic readonly supportsMultipleAccounts: boolean,\n\t\tprivate readonly notificationService: INotificationService,\n\t\tonDidChangeSessionsEmitter: Emitter<AuthenticationSessionsChangeEvent>,\n\t) {\n\t\tsuper();\n\t\tthis.onDidChangeSessions = onDidChangeSessionsEmitter.event;\n\t}\n\n\tasync getSessions(\n\t\tscopes: string[] | undefined,\n\t\toptions: IAuthenticationProviderSessionOptions,\n\t) {\n\t\treturn this._proxy.$getSessions(this.id, scopes, options);\n\t}\n\n\tcreateSession(\n\t\tscopes: string[],\n\t\toptions: IAuthenticationCreateSessionOptions,\n\t): Promise<AuthenticationSession> {\n\t\treturn this._proxy.$createSession(this.id, scopes, options);\n\t}\n\n\tasync removeSession(sessionId: string): Promise<void> {\n\t\tawait this._proxy.$removeSession(this.id, sessionId);\n\t\tthis.notificationService.info(\n\t\t\tnls.localize(\"signedOut\", \"Successfully signed out.\"),\n\t\t);\n\t}\n}\n\n@extHostNamedCustomer(MainContext.MainThreadAuthentication)\nexport class MainThreadAuthentication\n\textends Disposable\n\timplements MainThreadAuthenticationShape\n{\n\tprivate readonly _proxy: ExtHostAuthenticationShape;\n\n\tprivate readonly _registrations = this._register(\n\t\tnew DisposableMap<string>(),\n\t);\n\n\tconstructor(\n\t\textHostContext: IExtHostContext,\n\t\t@IAuthenticationService private readonly authenticationService: IAuthenticationService,\n\t\t@IAuthenticationExtensionsService private readonly authenticationExtensionsService: IAuthenticationExtensionsService,\n\t\t@IAuthenticationAccessService private readonly authenticationAccessService: IAuthenticationAccessService,\n\t\t@IAuthenticationUsageService private readonly authenticationUsageService: IAuthenticationUsageService,\n\t\t@IDialogService private readonly dialogService: IDialogService,\n\t\t@INotificationService private readonly notificationService: INotificationService,\n\t\t@IExtensionService private readonly extensionService: IExtensionService,\n\t\t@ITelemetryService private readonly telemetryService: ITelemetryService,\n\t\t@IOpenerService private readonly openerService: IOpenerService\n\t) {\n\t\tsuper();\n\t\tthis._proxy = extHostContext.getProxy(ExtHostContext.ExtHostAuthentication);\n\n\t\tthis._register(this.authenticationService.onDidChangeSessions(e => {\n\t\t\tthis._proxy.$onDidChangeAuthenticationSessions(e.providerId, e.label);\n\t\t}));\n\t}\n\n\tasync $registerAuthenticationProvider(\n\t\tid: string,\n\t\tlabel: string,\n\t\tsupportsMultipleAccounts: boolean,\n\t): Promise<void> {\n\t\tconst emitter = new Emitter<AuthenticationSessionsChangeEvent>();\n\t\tthis._registrations.set(id, emitter);\n\t\tconst provider = new MainThreadAuthenticationProvider(\n\t\t\tthis._proxy,\n\t\t\tid,\n\t\t\tlabel,\n\t\t\tsupportsMultipleAccounts,\n\t\t\tthis.notificationService,\n\t\t\temitter,\n\t\t);\n\t\tthis.authenticationService.registerAuthenticationProvider(id, provider);\n\t}\n\n\t$unregisterAuthenticationProvider(id: string): void {\n\t\tthis._registrations.deleteAndDispose(id);\n\t\tthis.authenticationService.unregisterAuthenticationProvider(id);\n\t}\n\n\tasync $ensureProvider(id: string): Promise<void> {\n\t\tif (\n\t\t\t!this.authenticationService.isAuthenticationProviderRegistered(id)\n\t\t) {\n\t\t\treturn await this.extensionService.activateByEvent(\n\t\t\t\tgetAuthenticationProviderActivationEvent(id),\n\t\t\t\tActivationKind.Immediate,\n\t\t\t);\n\t\t}\n\t}\n\n\t$sendDidChangeSessions(\n\t\tproviderId: string,\n\t\tevent: AuthenticationSessionsChangeEvent,\n\t): void {\n\t\tconst obj = this._registrations.get(providerId);\n\t\tif (obj instanceof Emitter) {\n\t\t\tobj.fire(event);\n\t\t}\n\t}\n\n\t$removeSession(providerId: string, sessionId: string): Promise<void> {\n\t\treturn this.authenticationService.removeSession(providerId, sessionId);\n\t}\n\tprivate async loginPrompt(\n\t\tprovider: IAuthenticationProvider,\n\t\textensionName: string,\n\t\trecreatingSession: boolean,\n\t\toptions?: AuthenticationForceNewSessionOptions,\n\t): Promise<boolean> {\n\t\tlet message: string;\n\n\t\t// An internal provider is a special case which is for model access only.\n\t\tif (provider.id.startsWith(INTERNAL_MODEL_AUTH_PROVIDER_PREFIX)) {\n\t\t\tmessage = nls.localize(\n\t\t\t\t\"confirmModelAccess\",\n\t\t\t\t\"The extension '{0}' wants to access the language models provided by {1}.\",\n\t\t\t\textensionName,\n\t\t\t\tprovider.label,\n\t\t\t);\n\t\t} else {\n\t\t\tmessage = recreatingSession\n\t\t\t\t? nls.localize(\n\t\t\t\t\t\t\"confirmRelogin\",\n\t\t\t\t\t\t\"The extension '{0}' wants you to sign in again using {1}.\",\n\t\t\t\t\t\textensionName,\n\t\t\t\t\t\tprovider.label,\n\t\t\t\t\t)\n\t\t\t\t: nls.localize(\n\t\t\t\t\t\t\"confirmLogin\",\n\t\t\t\t\t\t\"The extension '{0}' wants to sign in using {1}.\",\n\t\t\t\t\t\textensionName,\n\t\t\t\t\t\tprovider.label,\n\t\t\t\t\t);\n\t\t}\n\n\t\tconst buttons: IPromptButton<boolean | undefined>[] = [\n\t\t\t{\n\t\t\t\tlabel: nls.localize(\n\t\t\t\t\t{ key: \"allow\", comment: [\"&& denotes a mnemonic\"] },\n\t\t\t\t\t\"&&Allow\",\n\t\t\t\t),\n\t\t\t\trun() {\n\t\t\t\t\treturn true;\n\t\t\t\t},\n\t\t\t},\n\t\t];\n\t\tif (options?.learnMore) {\n\t\t\tbuttons.push({\n\t\t\t\tlabel: nls.localize(\"learnMore\", \"Learn more\"),\n\t\t\t\trun: async () => {\n\t\t\t\t\tconst result = this.loginPrompt(\n\t\t\t\t\t\tprovider,\n\t\t\t\t\t\textensionName,\n\t\t\t\t\t\trecreatingSession,\n\t\t\t\t\t\toptions,\n\t\t\t\t\t);\n\t\t\t\t\tawait this.openerService.open(\n\t\t\t\t\t\tURI.revive(options.learnMore!),\n\t\t\t\t\t\t{ allowCommands: true },\n\t\t\t\t\t);\n\t\t\t\t\treturn await result;\n\t\t\t\t},\n\t\t\t});\n\t\t}\n\t\tconst { result } = await this.dialogService.prompt({\n\t\t\ttype: Severity.Info,\n\t\t\tmessage,\n\t\t\tbuttons,\n\t\t\tdetail: options?.detail,\n\t\t\tcancelButton: true,\n\t\t});\n\n\t\treturn result ?? false;\n\t}\n\n\tprivate async continueWithIncorrectAccountPrompt(\n\t\tchosenAccountLabel: string,\n\t\trequestedAccountLabel: string,\n\t): Promise<boolean> {\n\t\tconst result = await this.dialogService.prompt({\n\t\t\tmessage: nls.localize(\n\t\t\t\t\"incorrectAccount\",\n\t\t\t\t\"Incorrect account detected\",\n\t\t\t),\n\t\t\tdetail: nls.localize(\n\t\t\t\t\"incorrectAccountDetail\",\n\t\t\t\t\"The chosen account, {0}, does not match the requested account, {1}.\",\n\t\t\t\tchosenAccountLabel,\n\t\t\t\trequestedAccountLabel,\n\t\t\t),\n\t\t\ttype: Severity.Warning,\n\t\t\tcancelButton: true,\n\t\t\tbuttons: [\n\t\t\t\t{\n\t\t\t\t\tlabel: nls.localize(\"keep\", \"Keep {0}\", chosenAccountLabel),\n\t\t\t\t\trun: () => chosenAccountLabel,\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tlabel: nls.localize(\n\t\t\t\t\t\t\"loginWith\",\n\t\t\t\t\t\t\"Login with {0}\",\n\t\t\t\t\t\trequestedAccountLabel,\n\t\t\t\t\t),\n\t\t\t\t\trun: () => requestedAccountLabel,\n\t\t\t\t},\n\t\t\t],\n\t\t});\n\n\t\tif (!result.result) {\n\t\t\tthrow new CancellationError();\n\t\t}\n\n\t\treturn result.result === chosenAccountLabel;\n\t}\n\n\tprivate async doGetSession(\n\t\tproviderId: string,\n\t\tscopes: string[],\n\t\textensionId: string,\n\t\textensionName: string,\n\t\toptions: AuthenticationGetSessionOptions,\n\t): Promise<AuthenticationSession | undefined> {\n\t\tconst sessions = await this.authenticationService.getSessions(\n\t\t\tproviderId,\n\t\t\tscopes,\n\t\t\toptions.account,\n\t\t\ttrue,\n\t\t);\n\t\tconst provider = this.authenticationService.getProvider(providerId);\n\n\t\t// Error cases\n\t\tif (options.forceNewSession && options.createIfNone) {\n\t\t\tthrow new Error(\n\t\t\t\t\"Invalid combination of options. Please remove one of the following: forceNewSession, createIfNone\",\n\t\t\t);\n\t\t}\n\t\tif (options.forceNewSession && options.silent) {\n\t\t\tthrow new Error(\n\t\t\t\t\"Invalid combination of options. Please remove one of the following: forceNewSession, silent\",\n\t\t\t);\n\t\t}\n\t\tif (options.createIfNone && options.silent) {\n\t\t\tthrow new Error(\n\t\t\t\t\"Invalid combination of options. Please remove one of the following: createIfNone, silent\",\n\t\t\t);\n\t\t}\n\n\t\tif (options.clearSessionPreference) {\n\t\t\t// Clearing the session preference is usually paired with createIfNone, so just remove the preference and\n\t\t\t// defer to the rest of the logic in this function to choose the session.\n\t\t\tthis.authenticationExtensionsService.removeSessionPreference(\n\t\t\t\tproviderId,\n\t\t\t\textensionId,\n\t\t\t\tscopes,\n\t\t\t);\n\t\t}\n\n\t\t// Check if the sessions we have are valid\n\t\tif (!options.forceNewSession && sessions.length) {\n\t\t\tif (provider.supportsMultipleAccounts) {\n\t\t\t\t// If we have an existing session preference, use that. If not, we'll return any valid session at the end of this function.\n\t\t\t\tconst existingSessionPreference =\n\t\t\t\t\tthis.authenticationExtensionsService.getSessionPreference(\n\t\t\t\t\t\tproviderId,\n\t\t\t\t\t\textensionId,\n\t\t\t\t\t\tscopes,\n\t\t\t\t\t);\n\t\t\t\tif (existingSessionPreference) {\n\t\t\t\t\tconst matchingSession = sessions.find(\n\t\t\t\t\t\t(session) => session.id === existingSessionPreference,\n\t\t\t\t\t);\n\t\t\t\t\tif (\n\t\t\t\t\t\tmatchingSession &&\n\t\t\t\t\t\tthis.authenticationAccessService.isAccessAllowed(\n\t\t\t\t\t\t\tproviderId,\n\t\t\t\t\t\t\tmatchingSession.account.label,\n\t\t\t\t\t\t\textensionId,\n\t\t\t\t\t\t)\n\t\t\t\t\t) {\n\t\t\t\t\t\treturn matchingSession;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else if (\n\t\t\t\tthis.authenticationAccessService.isAccessAllowed(\n\t\t\t\t\tproviderId,\n\t\t\t\t\tsessions[0].account.label,\n\t\t\t\t\textensionId,\n\t\t\t\t)\n\t\t\t) {\n\t\t\t\treturn sessions[0];\n\t\t\t}\n\t\t}\n\n\t\t// We may need to prompt because we don't have a valid session\n\t\t// modal flows\n\t\tif (options.createIfNone || options.forceNewSession) {\n\t\t\tlet uiOptions: AuthenticationForceNewSessionOptions | undefined;\n\t\t\tif (typeof options.forceNewSession === \"object\") {\n\t\t\t\tuiOptions = options.forceNewSession;\n\t\t\t}\n\n\t\t\t// We only want to show the \"recreating session\" prompt if we are using forceNewSession & there are sessions\n\t\t\t// that we will be \"forcing through\".\n\t\t\tconst recreatingSession = !!(\n\t\t\t\toptions.forceNewSession && sessions.length\n\t\t\t);\n\t\t\tconst isAllowed = await this.loginPrompt(\n\t\t\t\tprovider,\n\t\t\t\textensionName,\n\t\t\t\trecreatingSession,\n\t\t\t\tuiOptions,\n\t\t\t);\n\t\t\tif (!isAllowed) {\n\t\t\t\tthrow new Error(\"User did not consent to login.\");\n\t\t\t}\n\n\t\t\tlet session: AuthenticationSession;\n\t\t\tif (sessions?.length && !options.forceNewSession) {\n\t\t\t\tsession =\n\t\t\t\t\tprovider.supportsMultipleAccounts && !options.account\n\t\t\t\t\t\t? await this.authenticationExtensionsService.selectSession(\n\t\t\t\t\t\t\t\tproviderId,\n\t\t\t\t\t\t\t\textensionId,\n\t\t\t\t\t\t\t\textensionName,\n\t\t\t\t\t\t\t\tscopes,\n\t\t\t\t\t\t\t\tsessions,\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t: sessions[0];\n\t\t\t} else {\n\t\t\t\tlet accountToCreate: AuthenticationSessionAccount | undefined =\n\t\t\t\t\toptions.account;\n\t\t\t\tif (!accountToCreate) {\n\t\t\t\t\tconst sessionIdToRecreate =\n\t\t\t\t\t\tthis.authenticationExtensionsService.getSessionPreference(\n\t\t\t\t\t\t\tproviderId,\n\t\t\t\t\t\t\textensionId,\n\t\t\t\t\t\t\tscopes,\n\t\t\t\t\t\t);\n\t\t\t\t\taccountToCreate = sessionIdToRecreate\n\t\t\t\t\t\t? sessions.find(\n\t\t\t\t\t\t\t\t(session) => session.id === sessionIdToRecreate,\n\t\t\t\t\t\t\t)?.account\n\t\t\t\t\t\t: undefined;\n\t\t\t\t}\n\n\t\t\t\tdo {\n\t\t\t\t\tsession = await this.authenticationService.createSession(\n\t\t\t\t\t\tproviderId,\n\t\t\t\t\t\tscopes,\n\t\t\t\t\t\t{ activateImmediate: true, account: accountToCreate },\n\t\t\t\t\t);\n\t\t\t\t} while (\n\t\t\t\t\taccountToCreate &&\n\t\t\t\t\taccountToCreate.label !== session.account.label &&\n\t\t\t\t\t!(await this.continueWithIncorrectAccountPrompt(\n\t\t\t\t\t\tsession.account.label,\n\t\t\t\t\t\taccountToCreate.label,\n\t\t\t\t\t))\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tthis.authenticationAccessService.updateAllowedExtensions(\n\t\t\t\tproviderId,\n\t\t\t\tsession.account.label,\n\t\t\t\t[{ id: extensionId, name: extensionName, allowed: true }],\n\t\t\t);\n\t\t\tthis.authenticationExtensionsService.updateSessionPreference(\n\t\t\t\tproviderId,\n\t\t\t\textensionId,\n\t\t\t\tsession,\n\t\t\t);\n\t\t\treturn session;\n\t\t}\n\n\t\t// For the silent flows, if we have a session, even though it may not be the user's preference, we'll return it anyway because it might be for a specific\n\t\t// set of scopes.\n\t\tconst validSession = sessions.find((session) =>\n\t\t\tthis.authenticationAccessService.isAccessAllowed(\n\t\t\t\tproviderId,\n\t\t\t\tsession.account.label,\n\t\t\t\textensionId,\n\t\t\t),\n\t\t);\n\t\tif (validSession) {\n\t\t\treturn validSession;\n\t\t}\n\n\t\t// passive flows (silent or default)\n\t\tif (!options.silent) {\n\t\t\t// If there is a potential session, but the extension doesn't have access to it, use the \"grant access\" flow,\n\t\t\t// otherwise request a new one.\n\t\t\tsessions.length\n\t\t\t\t? this.authenticationExtensionsService.requestSessionAccess(\n\t\t\t\t\t\tproviderId,\n\t\t\t\t\t\textensionId,\n\t\t\t\t\t\textensionName,\n\t\t\t\t\t\tscopes,\n\t\t\t\t\t\tsessions,\n\t\t\t\t\t)\n\t\t\t\t: await this.authenticationExtensionsService.requestNewSession(\n\t\t\t\t\t\tproviderId,\n\t\t\t\t\t\tscopes,\n\t\t\t\t\t\textensionId,\n\t\t\t\t\t\textensionName,\n\t\t\t\t\t);\n\t\t}\n\t\treturn undefined;\n\t}\n\n\tasync $getSession(\n\t\tproviderId: string,\n\t\tscopes: string[],\n\t\textensionId: string,\n\t\textensionName: string,\n\t\toptions: AuthenticationGetSessionOptions,\n\t): Promise<AuthenticationSession | undefined> {\n\t\tconst session = await this.doGetSession(\n\t\t\tproviderId,\n\t\t\tscopes,\n\t\t\textensionId,\n\t\t\textensionName,\n\t\t\toptions,\n\t\t);\n\n\t\tif (session) {\n\t\t\tthis.sendProviderUsageTelemetry(extensionId, providerId);\n\t\t\tthis.authenticationUsageService.addAccountUsage(\n\t\t\t\tproviderId,\n\t\t\t\tsession.account.label,\n\t\t\t\textensionId,\n\t\t\t\textensionName,\n\t\t\t);\n\t\t}\n\n\t\treturn session;\n\t}\n\n\tasync $getAccounts(\n\t\tproviderId: string,\n\t): Promise<ReadonlyArray<AuthenticationSessionAccount>> {\n\t\tconst accounts =\n\t\t\tawait this.authenticationService.getAccounts(providerId);\n\t\treturn accounts;\n\t}\n\n\tprivate sendProviderUsageTelemetry(\n\t\textensionId: string,\n\t\tproviderId: string,\n\t): void {\n\t\ttype AuthProviderUsageClassification = {\n\t\t\towner: \"TylerLeonhardt\";\n\t\t\tcomment: \"Used to see which extensions are using which providers\";\n\t\t\textensionId: {\n\t\t\t\tclassification: \"SystemMetaData\";\n\t\t\t\tpurpose: \"FeatureInsight\";\n\t\t\t\tcomment: \"The extension id.\";\n\t\t\t};\n\t\t\tproviderId: {\n\t\t\t\tclassification: \"SystemMetaData\";\n\t\t\t\tpurpose: \"FeatureInsight\";\n\t\t\t\tcomment: \"The provider id.\";\n\t\t\t};\n\t\t};\n\t\tthis.telemetryService.publicLog2<\n\t\t\t{ extensionId: string; providerId: string },\n\t\t\tAuthProviderUsageClassification\n\t\t>(\"authentication.providerUsage\", { providerId, extensionId });\n\t}\n}\n"],
  "mappings": "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",
  "names": ["result", "session"]
}
