{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/api/browser/mainThreadShare.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CancellationToken } from '../../../base/common/cancellation.js';\nimport { IDisposable, dispose } from '../../../base/common/lifecycle.js';\nimport { URI } from '../../../base/common/uri.js';\nimport { ExtHostContext, ExtHostShareShape, IDocumentFilterDto, MainContext, MainThreadShareShape } from '../common/extHost.protocol.js';\nimport { IShareProvider, IShareService, IShareableItem } from '../../contrib/share/common/share.js';\nimport { IExtHostContext, extHostNamedCustomer } from '../../services/extensions/common/extHostCustomers.js';\n\n@extHostNamedCustomer(MainContext.MainThreadShare)\nexport class MainThreadShare implements MainThreadShareShape {\n\n\tprivate readonly proxy: ExtHostShareShape;\n\tprivate providers = new Map<number, IShareProvider>();\n\tprivate providerDisposables = new Map<number, IDisposable>();\n\n\tconstructor(\n\t\textHostContext: IExtHostContext,\n\t\t@IShareService private readonly shareService: IShareService\n\t) {\n\t\tthis.proxy = extHostContext.getProxy(ExtHostContext.ExtHostShare);\n\t}\n\n\t$registerShareProvider(handle: number, selector: IDocumentFilterDto[], id: string, label: string, priority: number): void {\n\t\tconst provider: IShareProvider = {\n\t\t\tid,\n\t\t\tlabel,\n\t\t\tselector,\n\t\t\tpriority,\n\t\t\tprovideShare: async (item: IShareableItem) => {\n\t\t\t\tconst result = await this.proxy.$provideShare(handle, item, CancellationToken.None);\n\t\t\t\treturn typeof result === 'string' ? result : URI.revive(result);\n\t\t\t}\n\t\t};\n\t\tthis.providers.set(handle, provider);\n\t\tconst disposable = this.shareService.registerShareProvider(provider);\n\t\tthis.providerDisposables.set(handle, disposable);\n\t}\n\n\t$unregisterShareProvider(handle: number): void {\n\t\tif (this.providers.has(handle)) {\n\t\t\tthis.providers.delete(handle);\n\t\t}\n\t\tif (this.providerDisposables.has(handle)) {\n\t\t\tthis.providerDisposables.delete(handle);\n\t\t}\n\t}\n\n\tdispose(): void {\n\t\tthis.providers.clear();\n\t\tdispose(this.providerDisposables.values());\n\t\tthis.providerDisposables.clear();\n\t}\n}\n"],
  "mappings": ";;;;;;;;;;;;AAKA,SAAS,yBAAyB;AAClC,SAAS,aAAa,eAAe;AACrC,SAAS,WAAW;AACpB,SAAS,gBAAgB,mBAAmB,oBAAoB,aAAa,4BAA4B;AACzG,SAAS,gBAAgB,eAAe,sBAAsB;AAC9D,SAAS,iBAAiB,4BAA4B;AAG/C,IAAM,kBAAN,MAAsD;AAAA,EAM5D,YACC,gBACgC,cAC/B;AAD+B;AAEhC,SAAK,QAAQ,eAAe,SAAS,eAAe,YAAY;AAAA,EACjE;AAAA,EATiB;AAAA,EACT,YAAY,oBAAI,IAA4B;AAAA,EAC5C,sBAAsB,oBAAI,IAAyB;AAAA,EAS3D,uBAAuB,QAAgB,UAAgC,IAAY,OAAe,UAAwB;AACzH,UAAM,WAA2B;AAAA,MAChC;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA,cAAc,8BAAO,SAAyB;AAC7C,cAAM,SAAS,MAAM,KAAK,MAAM,cAAc,QAAQ,MAAM,kBAAkB,IAAI;AAClF,eAAO,OAAO,WAAW,WAAW,SAAS,IAAI,OAAO,MAAM;AAAA,MAC/D,GAHc;AAAA,IAIf;AACA,SAAK,UAAU,IAAI,QAAQ,QAAQ;AACnC,UAAM,aAAa,KAAK,aAAa,sBAAsB,QAAQ;AACnE,SAAK,oBAAoB,IAAI,QAAQ,UAAU;AAAA,EAChD;AAAA,EAEA,yBAAyB,QAAsB;AAC9C,QAAI,KAAK,UAAU,IAAI,MAAM,GAAG;AAC/B,WAAK,UAAU,OAAO,MAAM;AAAA,IAC7B;AACA,QAAI,KAAK,oBAAoB,IAAI,MAAM,GAAG;AACzC,WAAK,oBAAoB,OAAO,MAAM;AAAA,IACvC;AAAA,EACD;AAAA,EAEA,UAAgB;AACf,SAAK,UAAU,MAAM;AACrB,YAAQ,KAAK,oBAAoB,OAAO,CAAC;AACzC,SAAK,oBAAoB,MAAM;AAAA,EAChC;AACD;AA3C6D;AAAhD,kBAAN;AAAA,EADN,qBAAqB,YAAY,eAAe;AAAA,EAS9C;AAAA,GARU;",
  "names": []
}
