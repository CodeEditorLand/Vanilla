{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/api/browser/mainThreadTask.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as nls from '../../../nls.js';\n\nimport { URI, UriComponents } from '../../../base/common/uri.js';\nimport { generateUuid } from '../../../base/common/uuid.js';\nimport * as Types from '../../../base/common/types.js';\nimport * as Platform from '../../../base/common/platform.js';\nimport { IStringDictionary } from '../../../base/common/collections.js';\nimport { Disposable, IDisposable } from '../../../base/common/lifecycle.js';\n\nimport { IWorkspace, IWorkspaceContextService, IWorkspaceFolder } from '../../../platform/workspace/common/workspace.js';\n\nimport {\n\tContributedTask, ConfiguringTask, KeyedTaskIdentifier, ITaskExecution, Task, ITaskEvent, TaskEventKind,\n\tIPresentationOptions, CommandOptions, ICommandConfiguration, RuntimeType, CustomTask, TaskScope, TaskSource,\n\tTaskSourceKind, IExtensionTaskSource, IRunOptions, ITaskSet, TaskGroup, TaskDefinition, PresentationOptions, RunOptions\n} from '../../contrib/tasks/common/tasks.js';\n\n\nimport { IResolveSet, IResolvedVariables } from '../../contrib/tasks/common/taskSystem.js';\nimport { ITaskService, ITaskFilter, ITaskProvider } from '../../contrib/tasks/common/taskService.js';\n\nimport { extHostNamedCustomer, IExtHostContext } from '../../services/extensions/common/extHostCustomers.js';\nimport { ExtHostContext, MainThreadTaskShape, ExtHostTaskShape, MainContext } from '../common/extHost.protocol.js';\nimport {\n\tITaskDefinitionDTO, ITaskExecutionDTO, IProcessExecutionOptionsDTO, ITaskPresentationOptionsDTO,\n\tIProcessExecutionDTO, IShellExecutionDTO, IShellExecutionOptionsDTO, ICustomExecutionDTO, ITaskDTO, ITaskSourceDTO, ITaskHandleDTO, ITaskFilterDTO, ITaskProcessStartedDTO, ITaskProcessEndedDTO, ITaskSystemInfoDTO,\n\tIRunOptionsDTO, ITaskGroupDTO\n} from '../common/shared/tasks.js';\nimport { IConfigurationResolverService } from '../../services/configurationResolver/common/configurationResolver.js';\nimport { ConfigurationTarget } from '../../../platform/configuration/common/configuration.js';\nimport { ErrorNoTelemetry } from '../../../base/common/errors.js';\n\nnamespace TaskExecutionDTO {\n\texport function from(value: ITaskExecution): ITaskExecutionDTO {\n\t\treturn {\n\t\t\tid: value.id,\n\t\t\ttask: TaskDTO.from(value.task)\n\t\t};\n\t}\n}\n\nnamespace TaskProcessStartedDTO {\n\texport function from(value: ITaskExecution, processId: number): ITaskProcessStartedDTO {\n\t\treturn {\n\t\t\tid: value.id,\n\t\t\tprocessId\n\t\t};\n\t}\n}\n\nnamespace TaskProcessEndedDTO {\n\texport function from(value: ITaskExecution, exitCode: number | undefined): ITaskProcessEndedDTO {\n\t\treturn {\n\t\t\tid: value.id,\n\t\t\texitCode\n\t\t};\n\t}\n}\n\nnamespace TaskDefinitionDTO {\n\texport function from(value: KeyedTaskIdentifier): ITaskDefinitionDTO {\n\t\tconst result = Object.assign(Object.create(null), value);\n\t\tdelete result._key;\n\t\treturn result;\n\t}\n\texport function to(value: ITaskDefinitionDTO, executeOnly: boolean): KeyedTaskIdentifier | undefined {\n\t\tlet result = TaskDefinition.createTaskIdentifier(value, console);\n\t\tif (result === undefined && executeOnly) {\n\t\t\tresult = {\n\t\t\t\t_key: generateUuid(),\n\t\t\t\ttype: '$executeOnly'\n\t\t\t};\n\t\t}\n\t\treturn result;\n\t}\n}\n\nnamespace TaskPresentationOptionsDTO {\n\texport function from(value: IPresentationOptions | undefined): ITaskPresentationOptionsDTO | undefined {\n\t\tif (value === undefined || value === null) {\n\t\t\treturn undefined;\n\t\t}\n\t\treturn Object.assign(Object.create(null), value);\n\t}\n\texport function to(value: ITaskPresentationOptionsDTO | undefined): IPresentationOptions {\n\t\tif (value === undefined || value === null) {\n\t\t\treturn PresentationOptions.defaults;\n\t\t}\n\t\treturn Object.assign(Object.create(null), PresentationOptions.defaults, value);\n\t}\n}\n\nnamespace RunOptionsDTO {\n\texport function from(value: IRunOptions): IRunOptionsDTO | undefined {\n\t\tif (value === undefined || value === null) {\n\t\t\treturn undefined;\n\t\t}\n\t\treturn Object.assign(Object.create(null), value);\n\t}\n\texport function to(value: IRunOptionsDTO | undefined): IRunOptions {\n\t\tif (value === undefined || value === null) {\n\t\t\treturn RunOptions.defaults;\n\t\t}\n\t\treturn Object.assign(Object.create(null), RunOptions.defaults, value);\n\t}\n}\n\nnamespace ProcessExecutionOptionsDTO {\n\texport function from(value: CommandOptions): IProcessExecutionOptionsDTO | undefined {\n\t\tif (value === undefined || value === null) {\n\t\t\treturn undefined;\n\t\t}\n\t\treturn {\n\t\t\tcwd: value.cwd,\n\t\t\tenv: value.env\n\t\t};\n\t}\n\texport function to(value: IProcessExecutionOptionsDTO | undefined): CommandOptions {\n\t\tif (value === undefined || value === null) {\n\t\t\treturn CommandOptions.defaults;\n\t\t}\n\t\treturn {\n\t\t\tcwd: value.cwd || CommandOptions.defaults.cwd,\n\t\t\tenv: value.env\n\t\t};\n\t}\n}\n\nnamespace ProcessExecutionDTO {\n\texport function is(value: IShellExecutionDTO | IProcessExecutionDTO | ICustomExecutionDTO): value is IProcessExecutionDTO {\n\t\tconst candidate = value as IProcessExecutionDTO;\n\t\treturn candidate && !!candidate.process;\n\t}\n\texport function from(value: ICommandConfiguration): IProcessExecutionDTO {\n\t\tconst process: string = Types.isString(value.name) ? value.name : value.name!.value;\n\t\tconst args: string[] = value.args ? value.args.map(value => Types.isString(value) ? value : value.value) : [];\n\t\tconst result: IProcessExecutionDTO = {\n\t\t\tprocess: process,\n\t\t\targs: args\n\t\t};\n\t\tif (value.options) {\n\t\t\tresult.options = ProcessExecutionOptionsDTO.from(value.options);\n\t\t}\n\t\treturn result;\n\t}\n\texport function to(value: IProcessExecutionDTO): ICommandConfiguration {\n\t\tconst result: ICommandConfiguration = {\n\t\t\truntime: RuntimeType.Process,\n\t\t\tname: value.process,\n\t\t\targs: value.args,\n\t\t\tpresentation: undefined\n\t\t};\n\t\tresult.options = ProcessExecutionOptionsDTO.to(value.options);\n\t\treturn result;\n\t}\n}\n\nnamespace ShellExecutionOptionsDTO {\n\texport function from(value: CommandOptions): IShellExecutionOptionsDTO | undefined {\n\t\tif (value === undefined || value === null) {\n\t\t\treturn undefined;\n\t\t}\n\t\tconst result: IShellExecutionOptionsDTO = {\n\t\t\tcwd: value.cwd || CommandOptions.defaults.cwd,\n\t\t\tenv: value.env\n\t\t};\n\t\tif (value.shell) {\n\t\t\tresult.executable = value.shell.executable;\n\t\t\tresult.shellArgs = value.shell.args;\n\t\t\tresult.shellQuoting = value.shell.quoting;\n\t\t}\n\t\treturn result;\n\t}\n\texport function to(value: IShellExecutionOptionsDTO): CommandOptions | undefined {\n\t\tif (value === undefined || value === null) {\n\t\t\treturn undefined;\n\t\t}\n\t\tconst result: CommandOptions = {\n\t\t\tcwd: value.cwd,\n\t\t\tenv: value.env\n\t\t};\n\t\tif (value.executable) {\n\t\t\tresult.shell = {\n\t\t\t\texecutable: value.executable\n\t\t\t};\n\t\t\tif (value.shellArgs) {\n\t\t\t\tresult.shell.args = value.shellArgs;\n\t\t\t}\n\t\t\tif (value.shellQuoting) {\n\t\t\t\tresult.shell.quoting = value.shellQuoting;\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n}\n\nnamespace ShellExecutionDTO {\n\texport function is(value: IShellExecutionDTO | IProcessExecutionDTO | ICustomExecutionDTO): value is IShellExecutionDTO {\n\t\tconst candidate = value as IShellExecutionDTO;\n\t\treturn candidate && (!!candidate.commandLine || !!candidate.command);\n\t}\n\texport function from(value: ICommandConfiguration): IShellExecutionDTO {\n\t\tconst result: IShellExecutionDTO = {};\n\t\tif (value.name && Types.isString(value.name) && (value.args === undefined || value.args === null || value.args.length === 0)) {\n\t\t\tresult.commandLine = value.name;\n\t\t} else {\n\t\t\tresult.command = value.name;\n\t\t\tresult.args = value.args;\n\t\t}\n\t\tif (value.options) {\n\t\t\tresult.options = ShellExecutionOptionsDTO.from(value.options);\n\t\t}\n\t\treturn result;\n\t}\n\texport function to(value: IShellExecutionDTO): ICommandConfiguration {\n\t\tconst result: ICommandConfiguration = {\n\t\t\truntime: RuntimeType.Shell,\n\t\t\tname: value.commandLine ? value.commandLine : value.command,\n\t\t\targs: value.args,\n\t\t\tpresentation: undefined\n\t\t};\n\t\tif (value.options) {\n\t\t\tresult.options = ShellExecutionOptionsDTO.to(value.options);\n\t\t}\n\t\treturn result;\n\t}\n}\n\nnamespace CustomExecutionDTO {\n\texport function is(value: IShellExecutionDTO | IProcessExecutionDTO | ICustomExecutionDTO): value is ICustomExecutionDTO {\n\t\tconst candidate = value as ICustomExecutionDTO;\n\t\treturn candidate && candidate.customExecution === 'customExecution';\n\t}\n\n\texport function from(value: ICommandConfiguration): ICustomExecutionDTO {\n\t\treturn {\n\t\t\tcustomExecution: 'customExecution'\n\t\t};\n\t}\n\n\texport function to(value: ICustomExecutionDTO): ICommandConfiguration {\n\t\treturn {\n\t\t\truntime: RuntimeType.CustomExecution,\n\t\t\tpresentation: undefined\n\t\t};\n\t}\n}\n\nnamespace TaskSourceDTO {\n\texport function from(value: TaskSource): ITaskSourceDTO {\n\t\tconst result: ITaskSourceDTO = {\n\t\t\tlabel: value.label\n\t\t};\n\t\tif (value.kind === TaskSourceKind.Extension) {\n\t\t\tresult.extensionId = value.extension;\n\t\t\tif (value.workspaceFolder) {\n\t\t\t\tresult.scope = value.workspaceFolder.uri;\n\t\t\t} else {\n\t\t\t\tresult.scope = value.scope;\n\t\t\t}\n\t\t} else if (value.kind === TaskSourceKind.Workspace) {\n\t\t\tresult.extensionId = '$core';\n\t\t\tresult.scope = value.config.workspaceFolder ? value.config.workspaceFolder.uri : TaskScope.Global;\n\t\t}\n\t\treturn result;\n\t}\n\texport function to(value: ITaskSourceDTO, workspace: IWorkspaceContextService): IExtensionTaskSource {\n\t\tlet scope: TaskScope;\n\t\tlet workspaceFolder: IWorkspaceFolder | undefined;\n\t\tif ((value.scope === undefined) || ((typeof value.scope === 'number') && (value.scope !== TaskScope.Global))) {\n\t\t\tif (workspace.getWorkspace().folders.length === 0) {\n\t\t\t\tscope = TaskScope.Global;\n\t\t\t\tworkspaceFolder = undefined;\n\t\t\t} else {\n\t\t\t\tscope = TaskScope.Folder;\n\t\t\t\tworkspaceFolder = workspace.getWorkspace().folders[0];\n\t\t\t}\n\t\t} else if (typeof value.scope === 'number') {\n\t\t\tscope = value.scope;\n\t\t} else {\n\t\t\tscope = TaskScope.Folder;\n\t\t\tworkspaceFolder = workspace.getWorkspaceFolder(URI.revive(value.scope)) ?? undefined;\n\t\t}\n\t\tconst result: IExtensionTaskSource = {\n\t\t\tkind: TaskSourceKind.Extension,\n\t\t\tlabel: value.label,\n\t\t\textension: value.extensionId,\n\t\t\tscope,\n\t\t\tworkspaceFolder\n\t\t};\n\t\treturn result;\n\t}\n}\n\nnamespace TaskHandleDTO {\n\texport function is(value: any): value is ITaskHandleDTO {\n\t\tconst candidate: ITaskHandleDTO = value;\n\t\treturn candidate && Types.isString(candidate.id) && !!candidate.workspaceFolder;\n\t}\n}\n\nnamespace TaskDTO {\n\texport function from(task: Task | ConfiguringTask): ITaskDTO | undefined {\n\t\tif (task === undefined || task === null || (!CustomTask.is(task) && !ContributedTask.is(task) && !ConfiguringTask.is(task))) {\n\t\t\treturn undefined;\n\t\t}\n\t\tconst result: ITaskDTO = {\n\t\t\t_id: task._id,\n\t\t\tname: task.configurationProperties.name,\n\t\t\tdefinition: TaskDefinitionDTO.from(task.getDefinition(true)),\n\t\t\tsource: TaskSourceDTO.from(task._source),\n\t\t\texecution: undefined,\n\t\t\tpresentationOptions: !ConfiguringTask.is(task) && task.command ? TaskPresentationOptionsDTO.from(task.command.presentation) : undefined,\n\t\t\tisBackground: task.configurationProperties.isBackground,\n\t\t\tproblemMatchers: [],\n\t\t\thasDefinedMatchers: ContributedTask.is(task) ? task.hasDefinedMatchers : false,\n\t\t\trunOptions: RunOptionsDTO.from(task.runOptions),\n\t\t};\n\t\tresult.group = TaskGroupDTO.from(task.configurationProperties.group);\n\n\t\tif (task.configurationProperties.detail) {\n\t\t\tresult.detail = task.configurationProperties.detail;\n\t\t}\n\t\tif (!ConfiguringTask.is(task) && task.command) {\n\t\t\tswitch (task.command.runtime) {\n\t\t\t\tcase RuntimeType.Process: result.execution = ProcessExecutionDTO.from(task.command); break;\n\t\t\t\tcase RuntimeType.Shell: result.execution = ShellExecutionDTO.from(task.command); break;\n\t\t\t\tcase RuntimeType.CustomExecution: result.execution = CustomExecutionDTO.from(task.command); break;\n\t\t\t}\n\t\t}\n\t\tif (task.configurationProperties.problemMatchers) {\n\t\t\tfor (const matcher of task.configurationProperties.problemMatchers) {\n\t\t\t\tif (Types.isString(matcher)) {\n\t\t\t\t\tresult.problemMatchers.push(matcher);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n\n\texport function to(task: ITaskDTO | undefined, workspace: IWorkspaceContextService, executeOnly: boolean, icon?: { id?: string; color?: string }, hide?: boolean): ContributedTask | undefined {\n\t\tif (!task || (typeof task.name !== 'string')) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\tlet command: ICommandConfiguration | undefined;\n\t\tif (task.execution) {\n\t\t\tif (ShellExecutionDTO.is(task.execution)) {\n\t\t\t\tcommand = ShellExecutionDTO.to(task.execution);\n\t\t\t} else if (ProcessExecutionDTO.is(task.execution)) {\n\t\t\t\tcommand = ProcessExecutionDTO.to(task.execution);\n\t\t\t} else if (CustomExecutionDTO.is(task.execution)) {\n\t\t\t\tcommand = CustomExecutionDTO.to(task.execution);\n\t\t\t}\n\t\t}\n\n\t\tif (!command) {\n\t\t\treturn undefined;\n\t\t}\n\t\tcommand.presentation = TaskPresentationOptionsDTO.to(task.presentationOptions);\n\t\tconst source = TaskSourceDTO.to(task.source, workspace);\n\n\t\tconst label = nls.localize('task.label', '{0}: {1}', source.label, task.name);\n\t\tconst definition = TaskDefinitionDTO.to(task.definition, executeOnly)!;\n\t\tconst id = (CustomExecutionDTO.is(task.execution!) && task._id) ? task._id : `${task.source.extensionId}.${definition._key}`;\n\t\tconst result: ContributedTask = new ContributedTask(\n\t\t\tid, // uuidMap.getUUID(identifier)\n\t\t\tsource,\n\t\t\tlabel,\n\t\t\tdefinition.type,\n\t\t\tdefinition,\n\t\t\tcommand,\n\t\t\ttask.hasDefinedMatchers,\n\t\t\tRunOptionsDTO.to(task.runOptions),\n\t\t\t{\n\t\t\t\tname: task.name,\n\t\t\t\tidentifier: label,\n\t\t\t\tgroup: task.group,\n\t\t\t\tisBackground: !!task.isBackground,\n\t\t\t\tproblemMatchers: task.problemMatchers.slice(),\n\t\t\t\tdetail: task.detail,\n\t\t\t\ticon,\n\t\t\t\thide\n\t\t\t}\n\t\t);\n\t\treturn result;\n\t}\n}\n\nnamespace TaskGroupDTO {\n\texport function from(value: string | TaskGroup | undefined): ITaskGroupDTO | undefined {\n\t\tif (value === undefined) {\n\t\t\treturn undefined;\n\t\t}\n\t\treturn {\n\t\t\t_id: (typeof value === 'string') ? value : value._id,\n\t\t\tisDefault: (typeof value === 'string') ? false : ((typeof value.isDefault === 'string') ? false : value.isDefault)\n\t\t};\n\t}\n}\n\nnamespace TaskFilterDTO {\n\texport function from(value: ITaskFilter): ITaskFilterDTO {\n\t\treturn value;\n\t}\n\texport function to(value: ITaskFilterDTO | undefined): ITaskFilter | undefined {\n\t\treturn value;\n\t}\n}\n\n@extHostNamedCustomer(MainContext.MainThreadTask)\nexport class MainThreadTask extends Disposable implements MainThreadTaskShape {\n\n\tprivate readonly _extHostContext: IExtHostContext | undefined;\n\tprivate readonly _proxy: ExtHostTaskShape;\n\tprivate readonly _providers: Map<number, { disposable: IDisposable; provider: ITaskProvider }>;\n\n\tconstructor(\n\t\textHostContext: IExtHostContext,\n\t\t@ITaskService private readonly _taskService: ITaskService,\n\t\t@IWorkspaceContextService private readonly _workspaceContextServer: IWorkspaceContextService,\n\t\t@IConfigurationResolverService private readonly _configurationResolverService: IConfigurationResolverService\n\t) {\n\t\tsuper();\n\t\tthis._proxy = extHostContext.getProxy(ExtHostContext.ExtHostTask);\n\t\tthis._providers = new Map();\n\t\tthis._register(this._taskService.onDidStateChange(async (event: ITaskEvent) => {\n\t\t\tif (event.kind === TaskEventKind.Changed) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst task = event.__task;\n\t\t\tif (event.kind === TaskEventKind.Start) {\n\t\t\t\tconst execution = TaskExecutionDTO.from(task.getTaskExecution());\n\t\t\t\tlet resolvedDefinition: ITaskDefinitionDTO = execution.task!.definition;\n\t\t\t\tif (execution.task?.execution && CustomExecutionDTO.is(execution.task.execution) && event.resolvedVariables) {\n\t\t\t\t\tconst dictionary: IStringDictionary<string> = {};\n\t\t\t\t\tfor (const [key, value] of event.resolvedVariables.entries()) {\n\t\t\t\t\t\tdictionary[key] = value;\n\t\t\t\t\t}\n\t\t\t\t\tresolvedDefinition = await this._configurationResolverService.resolveAnyAsync(task.getWorkspaceFolder(),\n\t\t\t\t\t\texecution.task.definition, dictionary);\n\t\t\t\t}\n\t\t\t\tthis._proxy.$onDidStartTask(execution, event.terminalId, resolvedDefinition);\n\t\t\t} else if (event.kind === TaskEventKind.ProcessStarted) {\n\t\t\t\tthis._proxy.$onDidStartTaskProcess(TaskProcessStartedDTO.from(task.getTaskExecution(), event.processId));\n\t\t\t} else if (event.kind === TaskEventKind.ProcessEnded) {\n\t\t\t\tthis._proxy.$onDidEndTaskProcess(TaskProcessEndedDTO.from(task.getTaskExecution(), event.exitCode));\n\t\t\t} else if (event.kind === TaskEventKind.End) {\n\t\t\t\tthis._proxy.$OnDidEndTask(TaskExecutionDTO.from(task.getTaskExecution()));\n\t\t\t}\n\t\t}));\n\t}\n\n\tpublic override dispose(): void {\n\t\tfor (const value of this._providers.values()) {\n\t\t\tvalue.disposable.dispose();\n\t\t}\n\t\tthis._providers.clear();\n\t\tsuper.dispose();\n\t}\n\n\t$createTaskId(taskDTO: ITaskDTO): Promise<string> {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tconst task = TaskDTO.to(taskDTO, this._workspaceContextServer, true);\n\t\t\tif (task) {\n\t\t\t\tresolve(task._id);\n\t\t\t} else {\n\t\t\t\treject(new Error('Task could not be created from DTO'));\n\t\t\t}\n\t\t});\n\t}\n\n\tpublic $registerTaskProvider(handle: number, type: string): Promise<void> {\n\t\tconst provider: ITaskProvider = {\n\t\t\tprovideTasks: (validTypes: IStringDictionary<boolean>) => {\n\t\t\t\treturn Promise.resolve(this._proxy.$provideTasks(handle, validTypes)).then((value) => {\n\t\t\t\t\tconst tasks: Task[] = [];\n\t\t\t\t\tfor (const dto of value.tasks) {\n\t\t\t\t\t\tconst task = TaskDTO.to(dto, this._workspaceContextServer, true);\n\t\t\t\t\t\tif (task) {\n\t\t\t\t\t\t\ttasks.push(task);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tconsole.error(`Task System: can not convert task: ${JSON.stringify(dto.definition, undefined, 0)}. Task will be dropped`);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\treturn {\n\t\t\t\t\t\ttasks,\n\t\t\t\t\t\textension: value.extension\n\t\t\t\t\t} as ITaskSet;\n\t\t\t\t});\n\t\t\t},\n\t\t\tresolveTask: (task: ConfiguringTask) => {\n\t\t\t\tconst dto = TaskDTO.from(task);\n\n\t\t\t\tif (dto) {\n\t\t\t\t\tdto.name = ((dto.name === undefined) ? '' : dto.name); // Using an empty name causes the name to default to the one given by the provider.\n\t\t\t\t\treturn Promise.resolve(this._proxy.$resolveTask(handle, dto)).then(resolvedTask => {\n\t\t\t\t\t\tif (resolvedTask) {\n\t\t\t\t\t\t\treturn TaskDTO.to(resolvedTask, this._workspaceContextServer, true, task.configurationProperties.icon, task.configurationProperties.hide);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn undefined;\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\treturn Promise.resolve<ContributedTask | undefined>(undefined);\n\t\t\t}\n\t\t};\n\t\tconst disposable = this._taskService.registerTaskProvider(provider, type);\n\t\tthis._providers.set(handle, { disposable, provider });\n\t\treturn Promise.resolve(undefined);\n\t}\n\n\tpublic $unregisterTaskProvider(handle: number): Promise<void> {\n\t\tconst provider = this._providers.get(handle);\n\t\tif (provider) {\n\t\t\tprovider.disposable.dispose();\n\t\t\tthis._providers.delete(handle);\n\t\t}\n\t\treturn Promise.resolve(undefined);\n\t}\n\n\tpublic $fetchTasks(filter?: ITaskFilterDTO): Promise<ITaskDTO[]> {\n\t\treturn this._taskService.tasks(TaskFilterDTO.to(filter)).then((tasks) => {\n\t\t\tconst result: ITaskDTO[] = [];\n\t\t\tfor (const task of tasks) {\n\t\t\t\tconst item = TaskDTO.from(task);\n\t\t\t\tif (item) {\n\t\t\t\t\tresult.push(item);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn result;\n\t\t});\n\t}\n\n\tprivate getWorkspace(value: UriComponents | string): string | IWorkspace | IWorkspaceFolder | null {\n\t\tlet workspace;\n\t\tif (typeof value === 'string') {\n\t\t\tworkspace = value;\n\t\t} else {\n\t\t\tconst workspaceObject = this._workspaceContextServer.getWorkspace();\n\t\t\tconst uri = URI.revive(value);\n\t\t\tif (workspaceObject.configuration?.toString() === uri.toString()) {\n\t\t\t\tworkspace = workspaceObject;\n\t\t\t} else {\n\t\t\t\tworkspace = this._workspaceContextServer.getWorkspaceFolder(uri);\n\t\t\t}\n\t\t}\n\t\treturn workspace;\n\t}\n\n\tpublic async $getTaskExecution(value: ITaskHandleDTO | ITaskDTO): Promise<ITaskExecutionDTO> {\n\t\tif (TaskHandleDTO.is(value)) {\n\t\t\tconst workspace = this.getWorkspace(value.workspaceFolder);\n\t\t\tif (workspace) {\n\t\t\t\tconst task = await this._taskService.getTask(workspace, value.id, true);\n\t\t\t\tif (task) {\n\t\t\t\t\treturn {\n\t\t\t\t\t\tid: task._id,\n\t\t\t\t\t\ttask: TaskDTO.from(task)\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t\tthrow new Error('Task not found');\n\t\t\t} else {\n\t\t\t\tthrow new Error('No workspace folder');\n\t\t\t}\n\t\t} else {\n\t\t\tconst task = TaskDTO.to(value, this._workspaceContextServer, true)!;\n\t\t\treturn {\n\t\t\t\tid: task._id,\n\t\t\t\ttask: TaskDTO.from(task)\n\t\t\t};\n\t\t}\n\t}\n\n\t// Passing in a TaskHandleDTO will cause the task to get re-resolved, which is important for tasks are coming from the core,\n\t// such as those gotten from a fetchTasks, since they can have missing configuration properties.\n\tpublic $executeTask(value: ITaskHandleDTO | ITaskDTO): Promise<ITaskExecutionDTO> {\n\t\treturn new Promise<ITaskExecutionDTO>((resolve, reject) => {\n\t\t\tif (TaskHandleDTO.is(value)) {\n\t\t\t\tconst workspace = this.getWorkspace(value.workspaceFolder);\n\t\t\t\tif (workspace) {\n\t\t\t\t\tthis._taskService.getTask(workspace, value.id, true).then((task: Task | undefined) => {\n\t\t\t\t\t\tif (!task) {\n\t\t\t\t\t\t\treject(new Error('Task not found'));\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tconst result: ITaskExecutionDTO = {\n\t\t\t\t\t\t\t\tid: value.id,\n\t\t\t\t\t\t\t\ttask: TaskDTO.from(task)\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\tthis._taskService.run(task).then(summary => {\n\t\t\t\t\t\t\t\t// Ensure that the task execution gets cleaned up if the exit code is undefined\n\t\t\t\t\t\t\t\t// This can happen when the task has dependent tasks and one of them failed\n\t\t\t\t\t\t\t\tif ((summary?.exitCode === undefined) || (summary.exitCode !== 0)) {\n\t\t\t\t\t\t\t\t\tthis._proxy.$OnDidEndTask(result);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}, reason => {\n\t\t\t\t\t\t\t\t// eat the error, it has already been surfaced to the user and we don't care about it here\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\tresolve(result);\n\t\t\t\t\t\t}\n\t\t\t\t\t}, (_error) => {\n\t\t\t\t\t\treject(new Error('Task not found'));\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\treject(new Error('No workspace folder'));\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tconst task = TaskDTO.to(value, this._workspaceContextServer, true)!;\n\t\t\t\tthis._taskService.run(task).then(undefined, reason => {\n\t\t\t\t\t// eat the error, it has already been surfaced to the user and we don't care about it here\n\t\t\t\t});\n\t\t\t\tconst result: ITaskExecutionDTO = {\n\t\t\t\t\tid: task._id,\n\t\t\t\t\ttask: TaskDTO.from(task)\n\t\t\t\t};\n\t\t\t\tresolve(result);\n\t\t\t}\n\t\t});\n\t}\n\n\n\tpublic $customExecutionComplete(id: string, result?: number): Promise<void> {\n\t\treturn new Promise<void>((resolve, reject) => {\n\t\t\tthis._taskService.getActiveTasks().then((tasks) => {\n\t\t\t\tfor (const task of tasks) {\n\t\t\t\t\tif (id === task._id) {\n\t\t\t\t\t\tthis._taskService.extensionCallbackTaskComplete(task, result).then((value) => {\n\t\t\t\t\t\t\tresolve(undefined);\n\t\t\t\t\t\t}, (error) => {\n\t\t\t\t\t\t\treject(error);\n\t\t\t\t\t\t});\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treject(new Error('Task to mark as complete not found'));\n\t\t\t});\n\t\t});\n\t}\n\n\tpublic $terminateTask(id: string): Promise<void> {\n\t\treturn new Promise<void>((resolve, reject) => {\n\t\t\tthis._taskService.getActiveTasks().then((tasks) => {\n\t\t\t\tfor (const task of tasks) {\n\t\t\t\t\tif (id === task._id) {\n\t\t\t\t\t\tthis._taskService.terminate(task).then((value) => {\n\t\t\t\t\t\t\tresolve(undefined);\n\t\t\t\t\t\t}, (error) => {\n\t\t\t\t\t\t\treject(undefined);\n\t\t\t\t\t\t});\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treject(new ErrorNoTelemetry('Task to terminate not found'));\n\t\t\t});\n\t\t});\n\t}\n\n\tpublic $registerTaskSystem(key: string, info: ITaskSystemInfoDTO): void {\n\t\tlet platform: Platform.Platform;\n\t\tswitch (info.platform) {\n\t\t\tcase 'Web':\n\t\t\t\tplatform = Platform.Platform.Web;\n\t\t\t\tbreak;\n\t\t\tcase 'win32':\n\t\t\t\tplatform = Platform.Platform.Windows;\n\t\t\t\tbreak;\n\t\t\tcase 'darwin':\n\t\t\t\tplatform = Platform.Platform.Mac;\n\t\t\t\tbreak;\n\t\t\tcase 'linux':\n\t\t\t\tplatform = Platform.Platform.Linux;\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tplatform = Platform.platform;\n\t\t}\n\t\tthis._taskService.registerTaskSystem(key, {\n\t\t\tplatform: platform,\n\t\t\turiProvider: (path: string): URI => {\n\t\t\t\treturn URI.from({ scheme: info.scheme, authority: info.authority, path });\n\t\t\t},\n\t\t\tcontext: this._extHostContext,\n\t\t\tresolveVariables: (workspaceFolder: IWorkspaceFolder, toResolve: IResolveSet, target: ConfigurationTarget): Promise<IResolvedVariables | undefined> => {\n\t\t\t\tconst vars: string[] = [];\n\t\t\t\ttoResolve.variables.forEach(item => vars.push(item));\n\t\t\t\treturn Promise.resolve(this._proxy.$resolveVariables(workspaceFolder.uri, { process: toResolve.process, variables: vars })).then(values => {\n\t\t\t\t\tconst partiallyResolvedVars = Array.from(Object.values(values.variables));\n\t\t\t\t\treturn new Promise<IResolvedVariables | undefined>((resolve, reject) => {\n\t\t\t\t\t\tthis._configurationResolverService.resolveWithInteraction(workspaceFolder, partiallyResolvedVars, 'tasks', undefined, target).then(resolvedVars => {\n\t\t\t\t\t\t\tif (!resolvedVars) {\n\t\t\t\t\t\t\t\tresolve(undefined);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tconst result: IResolvedVariables = {\n\t\t\t\t\t\t\t\tprocess: undefined,\n\t\t\t\t\t\t\t\tvariables: new Map<string, string>()\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\tfor (let i = 0; i < partiallyResolvedVars.length; i++) {\n\t\t\t\t\t\t\t\tconst variableName = vars[i].substring(2, vars[i].length - 1);\n\t\t\t\t\t\t\t\tif (resolvedVars && values.variables[vars[i]] === vars[i]) {\n\t\t\t\t\t\t\t\t\tconst resolved = resolvedVars.get(variableName);\n\t\t\t\t\t\t\t\t\tif (typeof resolved === 'string') {\n\t\t\t\t\t\t\t\t\t\tresult.variables.set(variableName, resolved);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tresult.variables.set(variableName, partiallyResolvedVars[i]);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (Types.isString(values.process)) {\n\t\t\t\t\t\t\t\tresult.process = values.process;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tresolve(result);\n\t\t\t\t\t\t}, reason => {\n\t\t\t\t\t\t\treject(reason);\n\t\t\t\t\t\t});\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t},\n\t\t\tfindExecutable: (command: string, cwd?: string, paths?: string[]): Promise<string | undefined> => {\n\t\t\t\treturn this._proxy.$findExecutable(command, cwd, paths);\n\t\t\t}\n\t\t});\n\t}\n\n\tasync $registerSupportedExecutions(custom?: boolean, shell?: boolean, process?: boolean): Promise<void> {\n\t\treturn this._taskService.registerSupportedExecutions(custom, shell, process);\n\t}\n\n}\n"],
  "mappings": "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",
  "names": ["TaskExecutionDTO", "TaskProcessStartedDTO", "TaskProcessEndedDTO", "TaskDefinitionDTO", "TaskPresentationOptionsDTO", "RunOptionsDTO", "ProcessExecutionOptionsDTO", "ProcessExecutionDTO", "value", "ShellExecutionOptionsDTO", "ShellExecutionDTO", "CustomExecutionDTO", "TaskSourceDTO", "TaskHandleDTO", "TaskDTO", "TaskGroupDTO", "TaskFilterDTO"]
}
