{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/api/browser/mainThreadTask.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as nls from \"../../../nls.js\";\n\nimport type { IStringDictionary } from \"../../../base/common/collections.js\";\nimport {\n\tDisposable,\n\ttype IDisposable,\n} from \"../../../base/common/lifecycle.js\";\nimport * as Platform from \"../../../base/common/platform.js\";\nimport * as Types from \"../../../base/common/types.js\";\nimport { URI, type UriComponents } from \"../../../base/common/uri.js\";\nimport { generateUuid } from \"../../../base/common/uuid.js\";\n\nimport {\n\ttype IWorkspace,\n\tIWorkspaceContextService,\n\ttype IWorkspaceFolder,\n} from \"../../../platform/workspace/common/workspace.js\";\n\nimport {\n\tCommandOptions,\n\tConfiguringTask,\n\tContributedTask,\n\tCustomTask,\n\ttype ICommandConfiguration,\n\ttype IExtensionTaskSource,\n\ttype IPresentationOptions,\n\ttype IRunOptions,\n\ttype ITaskEvent,\n\ttype ITaskExecution,\n\ttype ITaskSet,\n\ttype KeyedTaskIdentifier,\n\tPresentationOptions,\n\tRunOptions,\n\tRuntimeType,\n\ttype Task,\n\tTaskDefinition,\n\tTaskEventKind,\n\ttype TaskGroup,\n\tTaskScope,\n\ttype TaskSource,\n\tTaskSourceKind,\n} from \"../../contrib/tasks/common/tasks.js\";\n\nimport {\n\ttype ITaskFilter,\n\ttype ITaskProvider,\n\tITaskService,\n} from \"../../contrib/tasks/common/taskService.js\";\nimport type {\n\tIResolveSet,\n\tIResolvedVariables,\n} from \"../../contrib/tasks/common/taskSystem.js\";\n\nimport { ErrorNoTelemetry } from \"../../../base/common/errors.js\";\nimport type { ConfigurationTarget } from \"../../../platform/configuration/common/configuration.js\";\nimport { IConfigurationResolverService } from \"../../services/configurationResolver/common/configurationResolver.js\";\nimport {\n\ttype IExtHostContext,\n\textHostNamedCustomer,\n} from \"../../services/extensions/common/extHostCustomers.js\";\nimport {\n\tExtHostContext,\n\ttype ExtHostTaskShape,\n\tMainContext,\n\ttype MainThreadTaskShape,\n} from \"../common/extHost.protocol.js\";\nimport type {\n\tICustomExecutionDTO,\n\tIProcessExecutionDTO,\n\tIProcessExecutionOptionsDTO,\n\tIRunOptionsDTO,\n\tIShellExecutionDTO,\n\tIShellExecutionOptionsDTO,\n\tITaskDTO,\n\tITaskDefinitionDTO,\n\tITaskExecutionDTO,\n\tITaskFilterDTO,\n\tITaskGroupDTO,\n\tITaskHandleDTO,\n\tITaskPresentationOptionsDTO,\n\tITaskProcessEndedDTO,\n\tITaskProcessStartedDTO,\n\tITaskSourceDTO,\n\tITaskSystemInfoDTO,\n} from \"../common/shared/tasks.js\";\n\nnamespace TaskExecutionDTO {\n\texport function from(value: ITaskExecution): ITaskExecutionDTO {\n\t\treturn {\n\t\t\tid: value.id,\n\t\t\ttask: TaskDTO.from(value.task),\n\t\t};\n\t}\n}\n\nnamespace TaskProcessStartedDTO {\n\texport function from(\n\t\tvalue: ITaskExecution,\n\t\tprocessId: number,\n\t): ITaskProcessStartedDTO {\n\t\treturn {\n\t\t\tid: value.id,\n\t\t\tprocessId,\n\t\t};\n\t}\n}\n\nnamespace TaskProcessEndedDTO {\n\texport function from(\n\t\tvalue: ITaskExecution,\n\t\texitCode: number | undefined,\n\t): ITaskProcessEndedDTO {\n\t\treturn {\n\t\t\tid: value.id,\n\t\t\texitCode,\n\t\t};\n\t}\n}\n\nnamespace TaskDefinitionDTO {\n\texport function from(value: KeyedTaskIdentifier): ITaskDefinitionDTO {\n\t\tconst result = Object.assign(Object.create(null), value);\n\t\tdelete result._key;\n\t\treturn result;\n\t}\n\texport function to(\n\t\tvalue: ITaskDefinitionDTO,\n\t\texecuteOnly: boolean,\n\t): KeyedTaskIdentifier | undefined {\n\t\tlet result = TaskDefinition.createTaskIdentifier(value, console);\n\t\tif (result === undefined && executeOnly) {\n\t\t\tresult = {\n\t\t\t\t_key: generateUuid(),\n\t\t\t\ttype: \"$executeOnly\",\n\t\t\t};\n\t\t}\n\t\treturn result;\n\t}\n}\n\nnamespace TaskPresentationOptionsDTO {\n\texport function from(\n\t\tvalue: IPresentationOptions | undefined,\n\t): ITaskPresentationOptionsDTO | undefined {\n\t\tif (value === undefined || value === null) {\n\t\t\treturn undefined;\n\t\t}\n\t\treturn Object.assign(Object.create(null), value);\n\t}\n\texport function to(\n\t\tvalue: ITaskPresentationOptionsDTO | undefined,\n\t): IPresentationOptions {\n\t\tif (value === undefined || value === null) {\n\t\t\treturn PresentationOptions.defaults;\n\t\t}\n\t\treturn Object.assign(\n\t\t\tObject.create(null),\n\t\t\tPresentationOptions.defaults,\n\t\t\tvalue,\n\t\t);\n\t}\n}\n\nnamespace RunOptionsDTO {\n\texport function from(value: IRunOptions): IRunOptionsDTO | undefined {\n\t\tif (value === undefined || value === null) {\n\t\t\treturn undefined;\n\t\t}\n\t\treturn Object.assign(Object.create(null), value);\n\t}\n\texport function to(value: IRunOptionsDTO | undefined): IRunOptions {\n\t\tif (value === undefined || value === null) {\n\t\t\treturn RunOptions.defaults;\n\t\t}\n\t\treturn Object.assign(Object.create(null), RunOptions.defaults, value);\n\t}\n}\n\nnamespace ProcessExecutionOptionsDTO {\n\texport function from(\n\t\tvalue: CommandOptions,\n\t): IProcessExecutionOptionsDTO | undefined {\n\t\tif (value === undefined || value === null) {\n\t\t\treturn undefined;\n\t\t}\n\t\treturn {\n\t\t\tcwd: value.cwd,\n\t\t\tenv: value.env,\n\t\t};\n\t}\n\texport function to(\n\t\tvalue: IProcessExecutionOptionsDTO | undefined,\n\t): CommandOptions {\n\t\tif (value === undefined || value === null) {\n\t\t\treturn CommandOptions.defaults;\n\t\t}\n\t\treturn {\n\t\t\tcwd: value.cwd || CommandOptions.defaults.cwd,\n\t\t\tenv: value.env,\n\t\t};\n\t}\n}\n\nnamespace ProcessExecutionDTO {\n\texport function is(\n\t\tvalue: IShellExecutionDTO | IProcessExecutionDTO | ICustomExecutionDTO,\n\t): value is IProcessExecutionDTO {\n\t\tconst candidate = value as IProcessExecutionDTO;\n\t\treturn candidate && !!candidate.process;\n\t}\n\texport function from(value: ICommandConfiguration): IProcessExecutionDTO {\n\t\tconst process: string = Types.isString(value.name)\n\t\t\t? value.name\n\t\t\t: value.name!.value;\n\t\tconst args: string[] = value.args\n\t\t\t? value.args.map((value) =>\n\t\t\t\t\tTypes.isString(value) ? value : value.value,\n\t\t\t\t)\n\t\t\t: [];\n\t\tconst result: IProcessExecutionDTO = {\n\t\t\tprocess: process,\n\t\t\targs: args,\n\t\t};\n\t\tif (value.options) {\n\t\t\tresult.options = ProcessExecutionOptionsDTO.from(value.options);\n\t\t}\n\t\treturn result;\n\t}\n\texport function to(value: IProcessExecutionDTO): ICommandConfiguration {\n\t\tconst result: ICommandConfiguration = {\n\t\t\truntime: RuntimeType.Process,\n\t\t\tname: value.process,\n\t\t\targs: value.args,\n\t\t\tpresentation: undefined,\n\t\t};\n\t\tresult.options = ProcessExecutionOptionsDTO.to(value.options);\n\t\treturn result;\n\t}\n}\n\nnamespace ShellExecutionOptionsDTO {\n\texport function from(\n\t\tvalue: CommandOptions,\n\t): IShellExecutionOptionsDTO | undefined {\n\t\tif (value === undefined || value === null) {\n\t\t\treturn undefined;\n\t\t}\n\t\tconst result: IShellExecutionOptionsDTO = {\n\t\t\tcwd: value.cwd || CommandOptions.defaults.cwd,\n\t\t\tenv: value.env,\n\t\t};\n\t\tif (value.shell) {\n\t\t\tresult.executable = value.shell.executable;\n\t\t\tresult.shellArgs = value.shell.args;\n\t\t\tresult.shellQuoting = value.shell.quoting;\n\t\t}\n\t\treturn result;\n\t}\n\texport function to(\n\t\tvalue: IShellExecutionOptionsDTO,\n\t): CommandOptions | undefined {\n\t\tif (value === undefined || value === null) {\n\t\t\treturn undefined;\n\t\t}\n\t\tconst result: CommandOptions = {\n\t\t\tcwd: value.cwd,\n\t\t\tenv: value.env,\n\t\t};\n\t\tif (value.executable) {\n\t\t\tresult.shell = {\n\t\t\t\texecutable: value.executable,\n\t\t\t};\n\t\t\tif (value.shellArgs) {\n\t\t\t\tresult.shell.args = value.shellArgs;\n\t\t\t}\n\t\t\tif (value.shellQuoting) {\n\t\t\t\tresult.shell.quoting = value.shellQuoting;\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n}\n\nnamespace ShellExecutionDTO {\n\texport function is(\n\t\tvalue: IShellExecutionDTO | IProcessExecutionDTO | ICustomExecutionDTO,\n\t): value is IShellExecutionDTO {\n\t\tconst candidate = value as IShellExecutionDTO;\n\t\treturn candidate && (!!candidate.commandLine || !!candidate.command);\n\t}\n\texport function from(value: ICommandConfiguration): IShellExecutionDTO {\n\t\tconst result: IShellExecutionDTO = {};\n\t\tif (\n\t\t\tvalue.name &&\n\t\t\tTypes.isString(value.name) &&\n\t\t\t(value.args === undefined ||\n\t\t\t\tvalue.args === null ||\n\t\t\t\tvalue.args.length === 0)\n\t\t) {\n\t\t\tresult.commandLine = value.name;\n\t\t} else {\n\t\t\tresult.command = value.name;\n\t\t\tresult.args = value.args;\n\t\t}\n\t\tif (value.options) {\n\t\t\tresult.options = ShellExecutionOptionsDTO.from(value.options);\n\t\t}\n\t\treturn result;\n\t}\n\texport function to(value: IShellExecutionDTO): ICommandConfiguration {\n\t\tconst result: ICommandConfiguration = {\n\t\t\truntime: RuntimeType.Shell,\n\t\t\tname: value.commandLine ? value.commandLine : value.command,\n\t\t\targs: value.args,\n\t\t\tpresentation: undefined,\n\t\t};\n\t\tif (value.options) {\n\t\t\tresult.options = ShellExecutionOptionsDTO.to(value.options);\n\t\t}\n\t\treturn result;\n\t}\n}\n\nnamespace CustomExecutionDTO {\n\texport function is(\n\t\tvalue: IShellExecutionDTO | IProcessExecutionDTO | ICustomExecutionDTO,\n\t): value is ICustomExecutionDTO {\n\t\tconst candidate = value as ICustomExecutionDTO;\n\t\treturn candidate && candidate.customExecution === \"customExecution\";\n\t}\n\n\texport function from(value: ICommandConfiguration): ICustomExecutionDTO {\n\t\treturn {\n\t\t\tcustomExecution: \"customExecution\",\n\t\t};\n\t}\n\n\texport function to(value: ICustomExecutionDTO): ICommandConfiguration {\n\t\treturn {\n\t\t\truntime: RuntimeType.CustomExecution,\n\t\t\tpresentation: undefined,\n\t\t};\n\t}\n}\n\nnamespace TaskSourceDTO {\n\texport function from(value: TaskSource): ITaskSourceDTO {\n\t\tconst result: ITaskSourceDTO = {\n\t\t\tlabel: value.label,\n\t\t};\n\t\tif (value.kind === TaskSourceKind.Extension) {\n\t\t\tresult.extensionId = value.extension;\n\t\t\tif (value.workspaceFolder) {\n\t\t\t\tresult.scope = value.workspaceFolder.uri;\n\t\t\t} else {\n\t\t\t\tresult.scope = value.scope;\n\t\t\t}\n\t\t} else if (value.kind === TaskSourceKind.Workspace) {\n\t\t\tresult.extensionId = \"$core\";\n\t\t\tresult.scope = value.config.workspaceFolder\n\t\t\t\t? value.config.workspaceFolder.uri\n\t\t\t\t: TaskScope.Global;\n\t\t}\n\t\treturn result;\n\t}\n\texport function to(\n\t\tvalue: ITaskSourceDTO,\n\t\tworkspace: IWorkspaceContextService,\n\t): IExtensionTaskSource {\n\t\tlet scope: TaskScope;\n\t\tlet workspaceFolder: IWorkspaceFolder | undefined;\n\t\tif (\n\t\t\tvalue.scope === undefined ||\n\t\t\t(typeof value.scope === \"number\" &&\n\t\t\t\tvalue.scope !== TaskScope.Global)\n\t\t) {\n\t\t\tif (workspace.getWorkspace().folders.length === 0) {\n\t\t\t\tscope = TaskScope.Global;\n\t\t\t\tworkspaceFolder = undefined;\n\t\t\t} else {\n\t\t\t\tscope = TaskScope.Folder;\n\t\t\t\tworkspaceFolder = workspace.getWorkspace().folders[0];\n\t\t\t}\n\t\t} else if (typeof value.scope === \"number\") {\n\t\t\tscope = value.scope;\n\t\t} else {\n\t\t\tscope = TaskScope.Folder;\n\t\t\tworkspaceFolder =\n\t\t\t\tworkspace.getWorkspaceFolder(URI.revive(value.scope)) ??\n\t\t\t\tundefined;\n\t\t}\n\t\tconst result: IExtensionTaskSource = {\n\t\t\tkind: TaskSourceKind.Extension,\n\t\t\tlabel: value.label,\n\t\t\textension: value.extensionId,\n\t\t\tscope,\n\t\t\tworkspaceFolder,\n\t\t};\n\t\treturn result;\n\t}\n}\n\nnamespace TaskHandleDTO {\n\texport function is(value: any): value is ITaskHandleDTO {\n\t\tconst candidate: ITaskHandleDTO = value;\n\t\treturn (\n\t\t\tcandidate &&\n\t\t\tTypes.isString(candidate.id) &&\n\t\t\t!!candidate.workspaceFolder\n\t\t);\n\t}\n}\n\nnamespace TaskDTO {\n\texport function from(task: Task | ConfiguringTask): ITaskDTO | undefined {\n\t\tif (\n\t\t\ttask === undefined ||\n\t\t\ttask === null ||\n\t\t\t(!CustomTask.is(task) &&\n\t\t\t\t!ContributedTask.is(task) &&\n\t\t\t\t!ConfiguringTask.is(task))\n\t\t) {\n\t\t\treturn undefined;\n\t\t}\n\t\tconst result: ITaskDTO = {\n\t\t\t_id: task._id,\n\t\t\tname: task.configurationProperties.name,\n\t\t\tdefinition: TaskDefinitionDTO.from(task.getDefinition(true)),\n\t\t\tsource: TaskSourceDTO.from(task._source),\n\t\t\texecution: undefined,\n\t\t\tpresentationOptions:\n\t\t\t\t!ConfiguringTask.is(task) && task.command\n\t\t\t\t\t? TaskPresentationOptionsDTO.from(task.command.presentation)\n\t\t\t\t\t: undefined,\n\t\t\tisBackground: task.configurationProperties.isBackground,\n\t\t\tproblemMatchers: [],\n\t\t\thasDefinedMatchers: ContributedTask.is(task)\n\t\t\t\t? task.hasDefinedMatchers\n\t\t\t\t: false,\n\t\t\trunOptions: RunOptionsDTO.from(task.runOptions),\n\t\t};\n\t\tresult.group = TaskGroupDTO.from(task.configurationProperties.group);\n\n\t\tif (task.configurationProperties.detail) {\n\t\t\tresult.detail = task.configurationProperties.detail;\n\t\t}\n\t\tif (!ConfiguringTask.is(task) && task.command) {\n\t\t\tswitch (task.command.runtime) {\n\t\t\t\tcase RuntimeType.Process:\n\t\t\t\t\tresult.execution = ProcessExecutionDTO.from(task.command);\n\t\t\t\t\tbreak;\n\t\t\t\tcase RuntimeType.Shell:\n\t\t\t\t\tresult.execution = ShellExecutionDTO.from(task.command);\n\t\t\t\t\tbreak;\n\t\t\t\tcase RuntimeType.CustomExecution:\n\t\t\t\t\tresult.execution = CustomExecutionDTO.from(task.command);\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (task.configurationProperties.problemMatchers) {\n\t\t\tfor (const matcher of task.configurationProperties\n\t\t\t\t.problemMatchers) {\n\t\t\t\tif (Types.isString(matcher)) {\n\t\t\t\t\tresult.problemMatchers.push(matcher);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n\n\texport function to(\n\t\ttask: ITaskDTO | undefined,\n\t\tworkspace: IWorkspaceContextService,\n\t\texecuteOnly: boolean,\n\t\ticon?: { id?: string; color?: string },\n\t\thide?: boolean,\n\t): ContributedTask | undefined {\n\t\tif (!task || typeof task.name !== \"string\") {\n\t\t\treturn undefined;\n\t\t}\n\n\t\tlet command: ICommandConfiguration | undefined;\n\t\tif (task.execution) {\n\t\t\tif (ShellExecutionDTO.is(task.execution)) {\n\t\t\t\tcommand = ShellExecutionDTO.to(task.execution);\n\t\t\t} else if (ProcessExecutionDTO.is(task.execution)) {\n\t\t\t\tcommand = ProcessExecutionDTO.to(task.execution);\n\t\t\t} else if (CustomExecutionDTO.is(task.execution)) {\n\t\t\t\tcommand = CustomExecutionDTO.to(task.execution);\n\t\t\t}\n\t\t}\n\n\t\tif (!command) {\n\t\t\treturn undefined;\n\t\t}\n\t\tcommand.presentation = TaskPresentationOptionsDTO.to(\n\t\t\ttask.presentationOptions,\n\t\t);\n\t\tconst source = TaskSourceDTO.to(task.source, workspace);\n\n\t\tconst label = nls.localize(\n\t\t\t\"task.label\",\n\t\t\t\"{0}: {1}\",\n\t\t\tsource.label,\n\t\t\ttask.name,\n\t\t);\n\t\tconst definition = TaskDefinitionDTO.to(task.definition, executeOnly)!;\n\t\tconst id =\n\t\t\tCustomExecutionDTO.is(task.execution!) && task._id\n\t\t\t\t? task._id\n\t\t\t\t: `${task.source.extensionId}.${definition._key}`;\n\t\tconst result: ContributedTask = new ContributedTask(\n\t\t\tid, // uuidMap.getUUID(identifier)\n\t\t\tsource,\n\t\t\tlabel,\n\t\t\tdefinition.type,\n\t\t\tdefinition,\n\t\t\tcommand,\n\t\t\ttask.hasDefinedMatchers,\n\t\t\tRunOptionsDTO.to(task.runOptions),\n\t\t\t{\n\t\t\t\tname: task.name,\n\t\t\t\tidentifier: label,\n\t\t\t\tgroup: task.group,\n\t\t\t\tisBackground: !!task.isBackground,\n\t\t\t\tproblemMatchers: task.problemMatchers.slice(),\n\t\t\t\tdetail: task.detail,\n\t\t\t\ticon,\n\t\t\t\thide,\n\t\t\t},\n\t\t);\n\t\treturn result;\n\t}\n}\n\nnamespace TaskGroupDTO {\n\texport function from(\n\t\tvalue: string | TaskGroup | undefined,\n\t): ITaskGroupDTO | undefined {\n\t\tif (value === undefined) {\n\t\t\treturn undefined;\n\t\t}\n\t\treturn {\n\t\t\t_id: typeof value === \"string\" ? value : value._id,\n\t\t\tisDefault:\n\t\t\t\ttypeof value === \"string\"\n\t\t\t\t\t? false\n\t\t\t\t\t: typeof value.isDefault === \"string\"\n\t\t\t\t\t\t? false\n\t\t\t\t\t\t: value.isDefault,\n\t\t};\n\t}\n}\n\nnamespace TaskFilterDTO {\n\texport function from(value: ITaskFilter): ITaskFilterDTO {\n\t\treturn value;\n\t}\n\texport function to(\n\t\tvalue: ITaskFilterDTO | undefined,\n\t): ITaskFilter | undefined {\n\t\treturn value;\n\t}\n}\n\n@extHostNamedCustomer(MainContext.MainThreadTask)\nexport class MainThreadTask extends Disposable implements MainThreadTaskShape {\n\tprivate readonly _extHostContext: IExtHostContext | undefined;\n\tprivate readonly _proxy: ExtHostTaskShape;\n\tprivate readonly _providers: Map<\n\t\tnumber,\n\t\t{ disposable: IDisposable; provider: ITaskProvider }\n\t>;\n\n\tconstructor(\n\t\textHostContext: IExtHostContext,\n\t\t@ITaskService private readonly _taskService: ITaskService,\n\t\t@IWorkspaceContextService private readonly _workspaceContextServer: IWorkspaceContextService,\n\t\t@IConfigurationResolverService private readonly _configurationResolverService: IConfigurationResolverService\n\t) {\n\t\tsuper();\n\t\tthis._proxy = extHostContext.getProxy(ExtHostContext.ExtHostTask);\n\t\tthis._providers = new Map();\n\t\tthis._register(this._taskService.onDidStateChange(async (event: ITaskEvent) => {\n\t\t\tif (event.kind === TaskEventKind.Changed) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst task = event.__task;\n\t\t\tif (event.kind === TaskEventKind.Start) {\n\t\t\t\tconst execution = TaskExecutionDTO.from(task.getTaskExecution());\n\t\t\t\tlet resolvedDefinition: ITaskDefinitionDTO = execution.task!.definition;\n\t\t\t\tif (execution.task?.execution && CustomExecutionDTO.is(execution.task.execution) && event.resolvedVariables) {\n\t\t\t\t\tconst dictionary: IStringDictionary<string> = {};\n\t\t\t\t\tfor (const [key, value] of event.resolvedVariables.entries()) {\n\t\t\t\t\t\tdictionary[key] = value;\n\t\t\t\t\t}\n\t\t\t\t\tresolvedDefinition = await this._configurationResolverService.resolveAnyAsync(task.getWorkspaceFolder(),\n\t\t\t\t\t\texecution.task.definition, dictionary);\n\t\t\t\t}\n\t\t\t\tthis._proxy.$onDidStartTask(execution, event.terminalId, resolvedDefinition);\n\t\t\t} else if (event.kind === TaskEventKind.ProcessStarted) {\n\t\t\t\tthis._proxy.$onDidStartTaskProcess(TaskProcessStartedDTO.from(task.getTaskExecution(), event.processId));\n\t\t\t} else if (event.kind === TaskEventKind.ProcessEnded) {\n\t\t\t\tthis._proxy.$onDidEndTaskProcess(TaskProcessEndedDTO.from(task.getTaskExecution(), event.exitCode));\n\t\t\t} else if (event.kind === TaskEventKind.End) {\n\t\t\t\tthis._proxy.$OnDidEndTask(TaskExecutionDTO.from(task.getTaskExecution()));\n\t\t\t}\n\t\t}));\n\t}\n\n\tpublic override dispose(): void {\n\t\tfor (const value of this._providers.values()) {\n\t\t\tvalue.disposable.dispose();\n\t\t}\n\t\tthis._providers.clear();\n\t\tsuper.dispose();\n\t}\n\n\t$createTaskId(taskDTO: ITaskDTO): Promise<string> {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tconst task = TaskDTO.to(\n\t\t\t\ttaskDTO,\n\t\t\t\tthis._workspaceContextServer,\n\t\t\t\ttrue,\n\t\t\t);\n\t\t\tif (task) {\n\t\t\t\tresolve(task._id);\n\t\t\t} else {\n\t\t\t\treject(new Error(\"Task could not be created from DTO\"));\n\t\t\t}\n\t\t});\n\t}\n\n\tpublic $registerTaskProvider(handle: number, type: string): Promise<void> {\n\t\tconst provider: ITaskProvider = {\n\t\t\tprovideTasks: (validTypes: IStringDictionary<boolean>) => {\n\t\t\t\treturn Promise.resolve(\n\t\t\t\t\tthis._proxy.$provideTasks(handle, validTypes),\n\t\t\t\t).then((value) => {\n\t\t\t\t\tconst tasks: Task[] = [];\n\t\t\t\t\tfor (const dto of value.tasks) {\n\t\t\t\t\t\tconst task = TaskDTO.to(\n\t\t\t\t\t\t\tdto,\n\t\t\t\t\t\t\tthis._workspaceContextServer,\n\t\t\t\t\t\t\ttrue,\n\t\t\t\t\t\t);\n\t\t\t\t\t\tif (task) {\n\t\t\t\t\t\t\ttasks.push(task);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tconsole.error(\n\t\t\t\t\t\t\t\t`Task System: can not convert task: ${JSON.stringify(dto.definition, undefined, 0)}. Task will be dropped`,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\treturn {\n\t\t\t\t\t\ttasks,\n\t\t\t\t\t\textension: value.extension,\n\t\t\t\t\t} as ITaskSet;\n\t\t\t\t});\n\t\t\t},\n\t\t\tresolveTask: (task: ConfiguringTask) => {\n\t\t\t\tconst dto = TaskDTO.from(task);\n\n\t\t\t\tif (dto) {\n\t\t\t\t\tdto.name = dto.name === undefined ? \"\" : dto.name; // Using an empty name causes the name to default to the one given by the provider.\n\t\t\t\t\treturn Promise.resolve(\n\t\t\t\t\t\tthis._proxy.$resolveTask(handle, dto),\n\t\t\t\t\t).then((resolvedTask) => {\n\t\t\t\t\t\tif (resolvedTask) {\n\t\t\t\t\t\t\treturn TaskDTO.to(\n\t\t\t\t\t\t\t\tresolvedTask,\n\t\t\t\t\t\t\t\tthis._workspaceContextServer,\n\t\t\t\t\t\t\t\ttrue,\n\t\t\t\t\t\t\t\ttask.configurationProperties.icon,\n\t\t\t\t\t\t\t\ttask.configurationProperties.hide,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn undefined;\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\treturn Promise.resolve<ContributedTask | undefined>(undefined);\n\t\t\t},\n\t\t};\n\t\tconst disposable = this._taskService.registerTaskProvider(\n\t\t\tprovider,\n\t\t\ttype,\n\t\t);\n\t\tthis._providers.set(handle, { disposable, provider });\n\t\treturn Promise.resolve(undefined);\n\t}\n\n\tpublic $unregisterTaskProvider(handle: number): Promise<void> {\n\t\tconst provider = this._providers.get(handle);\n\t\tif (provider) {\n\t\t\tprovider.disposable.dispose();\n\t\t\tthis._providers.delete(handle);\n\t\t}\n\t\treturn Promise.resolve(undefined);\n\t}\n\n\tpublic $fetchTasks(filter?: ITaskFilterDTO): Promise<ITaskDTO[]> {\n\t\treturn this._taskService\n\t\t\t.tasks(TaskFilterDTO.to(filter))\n\t\t\t.then((tasks) => {\n\t\t\t\tconst result: ITaskDTO[] = [];\n\t\t\t\tfor (const task of tasks) {\n\t\t\t\t\tconst item = TaskDTO.from(task);\n\t\t\t\t\tif (item) {\n\t\t\t\t\t\tresult.push(item);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn result;\n\t\t\t});\n\t}\n\n\tprivate getWorkspace(\n\t\tvalue: UriComponents | string,\n\t): string | IWorkspace | IWorkspaceFolder | null {\n\t\tlet workspace;\n\t\tif (typeof value === \"string\") {\n\t\t\tworkspace = value;\n\t\t} else {\n\t\t\tconst workspaceObject = this._workspaceContextServer.getWorkspace();\n\t\t\tconst uri = URI.revive(value);\n\t\t\tif (workspaceObject.configuration?.toString() === uri.toString()) {\n\t\t\t\tworkspace = workspaceObject;\n\t\t\t} else {\n\t\t\t\tworkspace =\n\t\t\t\t\tthis._workspaceContextServer.getWorkspaceFolder(uri);\n\t\t\t}\n\t\t}\n\t\treturn workspace;\n\t}\n\n\tpublic async $getTaskExecution(\n\t\tvalue: ITaskHandleDTO | ITaskDTO,\n\t): Promise<ITaskExecutionDTO> {\n\t\tif (TaskHandleDTO.is(value)) {\n\t\t\tconst workspace = this.getWorkspace(value.workspaceFolder);\n\t\t\tif (workspace) {\n\t\t\t\tconst task = await this._taskService.getTask(\n\t\t\t\t\tworkspace,\n\t\t\t\t\tvalue.id,\n\t\t\t\t\ttrue,\n\t\t\t\t);\n\t\t\t\tif (task) {\n\t\t\t\t\treturn {\n\t\t\t\t\t\tid: task._id,\n\t\t\t\t\t\ttask: TaskDTO.from(task),\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t\tthrow new Error(\"Task not found\");\n\t\t\t} else {\n\t\t\t\tthrow new Error(\"No workspace folder\");\n\t\t\t}\n\t\t} else {\n\t\t\tconst task = TaskDTO.to(value, this._workspaceContextServer, true)!;\n\t\t\treturn {\n\t\t\t\tid: task._id,\n\t\t\t\ttask: TaskDTO.from(task),\n\t\t\t};\n\t\t}\n\t}\n\n\t// Passing in a TaskHandleDTO will cause the task to get re-resolved, which is important for tasks are coming from the core,\n\t// such as those gotten from a fetchTasks, since they can have missing configuration properties.\n\tpublic $executeTask(\n\t\tvalue: ITaskHandleDTO | ITaskDTO,\n\t): Promise<ITaskExecutionDTO> {\n\t\treturn new Promise<ITaskExecutionDTO>((resolve, reject) => {\n\t\t\tif (TaskHandleDTO.is(value)) {\n\t\t\t\tconst workspace = this.getWorkspace(value.workspaceFolder);\n\t\t\t\tif (workspace) {\n\t\t\t\t\tthis._taskService.getTask(workspace, value.id, true).then(\n\t\t\t\t\t\t(task: Task | undefined) => {\n\t\t\t\t\t\t\tif (task) {\n\t\t\t\t\t\t\t\tconst result: ITaskExecutionDTO = {\n\t\t\t\t\t\t\t\t\tid: value.id,\n\t\t\t\t\t\t\t\t\ttask: TaskDTO.from(task),\n\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t\tthis._taskService.run(task).then(\n\t\t\t\t\t\t\t\t\t(summary) => {\n\t\t\t\t\t\t\t\t\t\t// Ensure that the task execution gets cleaned up if the exit code is undefined\n\t\t\t\t\t\t\t\t\t\t// This can happen when the task has dependent tasks and one of them failed\n\t\t\t\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\t\t\t\tsummary?.exitCode === undefined ||\n\t\t\t\t\t\t\t\t\t\t\tsummary.exitCode !== 0\n\t\t\t\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\t\t\t\tthis._proxy.$OnDidEndTask(result);\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t(reason) => {\n\t\t\t\t\t\t\t\t\t\t// eat the error, it has already been surfaced to the user and we don't care about it here\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\tresolve(result);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\treject(new Error(\"Task not found\"));\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t},\n\t\t\t\t\t\t(_error) => {\n\t\t\t\t\t\t\treject(new Error(\"Task not found\"));\n\t\t\t\t\t\t},\n\t\t\t\t\t);\n\t\t\t\t} else {\n\t\t\t\t\treject(new Error(\"No workspace folder\"));\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tconst task = TaskDTO.to(\n\t\t\t\t\tvalue,\n\t\t\t\t\tthis._workspaceContextServer,\n\t\t\t\t\ttrue,\n\t\t\t\t)!;\n\t\t\t\tthis._taskService.run(task).then(undefined, (reason) => {\n\t\t\t\t\t// eat the error, it has already been surfaced to the user and we don't care about it here\n\t\t\t\t});\n\t\t\t\tconst result: ITaskExecutionDTO = {\n\t\t\t\t\tid: task._id,\n\t\t\t\t\ttask: TaskDTO.from(task),\n\t\t\t\t};\n\t\t\t\tresolve(result);\n\t\t\t}\n\t\t});\n\t}\n\n\tpublic $customExecutionComplete(\n\t\tid: string,\n\t\tresult?: number,\n\t): Promise<void> {\n\t\treturn new Promise<void>((resolve, reject) => {\n\t\t\tthis._taskService.getActiveTasks().then((tasks) => {\n\t\t\t\tfor (const task of tasks) {\n\t\t\t\t\tif (id === task._id) {\n\t\t\t\t\t\tthis._taskService\n\t\t\t\t\t\t\t.extensionCallbackTaskComplete(task, result)\n\t\t\t\t\t\t\t.then(\n\t\t\t\t\t\t\t\t(value) => {\n\t\t\t\t\t\t\t\t\tresolve(undefined);\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t(error) => {\n\t\t\t\t\t\t\t\t\treject(error);\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treject(new Error(\"Task to mark as complete not found\"));\n\t\t\t});\n\t\t});\n\t}\n\n\tpublic $terminateTask(id: string): Promise<void> {\n\t\treturn new Promise<void>((resolve, reject) => {\n\t\t\tthis._taskService.getActiveTasks().then((tasks) => {\n\t\t\t\tfor (const task of tasks) {\n\t\t\t\t\tif (id === task._id) {\n\t\t\t\t\t\tthis._taskService.terminate(task).then(\n\t\t\t\t\t\t\t(value) => {\n\t\t\t\t\t\t\t\tresolve(undefined);\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t(error) => {\n\t\t\t\t\t\t\t\treject(undefined);\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treject(new ErrorNoTelemetry(\"Task to terminate not found\"));\n\t\t\t});\n\t\t});\n\t}\n\n\tpublic $registerTaskSystem(key: string, info: ITaskSystemInfoDTO): void {\n\t\tlet platform: Platform.Platform;\n\t\tswitch (info.platform) {\n\t\t\tcase \"Web\":\n\t\t\t\tplatform = Platform.Platform.Web;\n\t\t\t\tbreak;\n\t\t\tcase \"win32\":\n\t\t\t\tplatform = Platform.Platform.Windows;\n\t\t\t\tbreak;\n\t\t\tcase \"darwin\":\n\t\t\t\tplatform = Platform.Platform.Mac;\n\t\t\t\tbreak;\n\t\t\tcase \"linux\":\n\t\t\t\tplatform = Platform.Platform.Linux;\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tplatform = Platform.platform;\n\t\t}\n\t\tthis._taskService.registerTaskSystem(key, {\n\t\t\tplatform: platform,\n\t\t\turiProvider: (path: string): URI => {\n\t\t\t\treturn URI.from({\n\t\t\t\t\tscheme: info.scheme,\n\t\t\t\t\tauthority: info.authority,\n\t\t\t\t\tpath,\n\t\t\t\t});\n\t\t\t},\n\t\t\tcontext: this._extHostContext,\n\t\t\tresolveVariables: (\n\t\t\t\tworkspaceFolder: IWorkspaceFolder,\n\t\t\t\ttoResolve: IResolveSet,\n\t\t\t\ttarget: ConfigurationTarget,\n\t\t\t): Promise<IResolvedVariables | undefined> => {\n\t\t\t\tconst vars: string[] = [];\n\t\t\t\ttoResolve.variables.forEach((item) => vars.push(item));\n\t\t\t\treturn Promise.resolve(\n\t\t\t\t\tthis._proxy.$resolveVariables(workspaceFolder.uri, {\n\t\t\t\t\t\tprocess: toResolve.process,\n\t\t\t\t\t\tvariables: vars,\n\t\t\t\t\t}),\n\t\t\t\t).then((values) => {\n\t\t\t\t\tconst partiallyResolvedVars = Array.from(\n\t\t\t\t\t\tObject.values(values.variables),\n\t\t\t\t\t);\n\t\t\t\t\treturn new Promise<IResolvedVariables | undefined>(\n\t\t\t\t\t\t(resolve, reject) => {\n\t\t\t\t\t\t\tthis._configurationResolverService\n\t\t\t\t\t\t\t\t.resolveWithInteraction(\n\t\t\t\t\t\t\t\t\tworkspaceFolder,\n\t\t\t\t\t\t\t\t\tpartiallyResolvedVars,\n\t\t\t\t\t\t\t\t\t\"tasks\",\n\t\t\t\t\t\t\t\t\tundefined,\n\t\t\t\t\t\t\t\t\ttarget,\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t.then(\n\t\t\t\t\t\t\t\t\t(resolvedVars) => {\n\t\t\t\t\t\t\t\t\t\tif (!resolvedVars) {\n\t\t\t\t\t\t\t\t\t\t\tresolve(undefined);\n\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\tconst result: IResolvedVariables = {\n\t\t\t\t\t\t\t\t\t\t\tprocess: undefined,\n\t\t\t\t\t\t\t\t\t\t\tvariables: new Map<\n\t\t\t\t\t\t\t\t\t\t\t\tstring,\n\t\t\t\t\t\t\t\t\t\t\t\tstring\n\t\t\t\t\t\t\t\t\t\t\t>(),\n\t\t\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t\t\t\tfor (\n\t\t\t\t\t\t\t\t\t\t\tlet i = 0;\n\t\t\t\t\t\t\t\t\t\t\ti < partiallyResolvedVars.length;\n\t\t\t\t\t\t\t\t\t\t\ti++\n\t\t\t\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\t\t\t\tconst variableName = vars[\n\t\t\t\t\t\t\t\t\t\t\t\ti\n\t\t\t\t\t\t\t\t\t\t\t].substring(2, vars[i].length - 1);\n\t\t\t\t\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\t\t\t\t\tresolvedVars &&\n\t\t\t\t\t\t\t\t\t\t\t\tvalues.variables[vars[i]] ===\n\t\t\t\t\t\t\t\t\t\t\t\t\tvars[i]\n\t\t\t\t\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\t\t\t\t\tconst resolved =\n\t\t\t\t\t\t\t\t\t\t\t\t\tresolvedVars.get(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tvariableName,\n\t\t\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\t\t\t\t\t\ttypeof resolved === \"string\"\n\t\t\t\t\t\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tresult.variables.set(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tvariableName,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tresolved,\n\t\t\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\t\tresult.variables.set(\n\t\t\t\t\t\t\t\t\t\t\t\t\tvariableName,\n\t\t\t\t\t\t\t\t\t\t\t\t\tpartiallyResolvedVars[i],\n\t\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tif (Types.isString(values.process)) {\n\t\t\t\t\t\t\t\t\t\t\tresult.process = values.process;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tresolve(result);\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t(reason) => {\n\t\t\t\t\t\t\t\t\t\treject(reason);\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t},\n\t\t\t\t\t);\n\t\t\t\t});\n\t\t\t},\n\t\t\tfindExecutable: (\n\t\t\t\tcommand: string,\n\t\t\t\tcwd?: string,\n\t\t\t\tpaths?: string[],\n\t\t\t): Promise<string | undefined> => {\n\t\t\t\treturn this._proxy.$findExecutable(command, cwd, paths);\n\t\t\t},\n\t\t});\n\t}\n\n\tasync $registerSupportedExecutions(\n\t\tcustom?: boolean,\n\t\tshell?: boolean,\n\t\tprocess?: boolean,\n\t): Promise<void> {\n\t\treturn this._taskService.registerSupportedExecutions(\n\t\t\tcustom,\n\t\t\tshell,\n\t\t\tprocess,\n\t\t);\n\t}\n}\n"],
  "mappings": "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",
  "names": ["TaskExecutionDTO", "TaskProcessStartedDTO", "TaskProcessEndedDTO", "TaskDefinitionDTO", "TaskPresentationOptionsDTO", "RunOptionsDTO", "ProcessExecutionOptionsDTO", "ProcessExecutionDTO", "value", "ShellExecutionOptionsDTO", "ShellExecutionDTO", "CustomExecutionDTO", "TaskSourceDTO", "TaskHandleDTO", "TaskDTO", "TaskGroupDTO", "TaskFilterDTO"]
}
