var m=Object.defineProperty;var v=Object.getOwnPropertyDescriptor;var c=(t,e,r,s)=>{for(var o=s>1?void 0:s?v(e,r):e,i=t.length-1,p;i>=0;i--)(p=t[i])&&(o=(s?p(e,r,o):p(o))||o);return s&&o&&m(e,r,o),o},a=(t,e)=>(r,s)=>e(r,s,t);import{Action as P}from"../../../base/common/actions.js";import{localize as d}from"../../../nls.js";import{ICommandService as x}from"../../../platform/commands/common/commands.js";import{IProgressService as y,ProgressLocation as g}from"../../../platform/progress/common/progress.js";import{extHostNamedCustomer as S}from"../../services/extensions/common/extHostCustomers.js";import{ExtHostContext as _,MainContext as I}from"../common/extHost.protocol.js";class f extends P{constructor(e,r,s){super(e,r,void 0,!0,()=>s.executeCommand("_extensions.manage",e))}}let n=class{constructor(e,r,s){this._commandService=s;this._proxy=e.getProxy(_.ExtHostProgress),this._progressService=r}_progressService;_progress=new Map;_proxy;dispose(){this._progress.forEach(e=>e.resolve()),this._progress.clear()}async $startProgress(e,r,s){const o=this._createTask(e);r.location===g.Notification&&s&&(r={...r,location:g.Notification,secondaryActions:[new f(s,d("manageExtension","Manage Extension"),this._commandService)]}),this._progressService.withProgress(r,o,()=>this._proxy.$acceptProgressCanceled(e))}$progressReport(e,r){this._progress.get(e)?.progress.report(r)}$progressEnd(e){const r=this._progress.get(e);r&&(r.resolve(),this._progress.delete(e))}_createTask(e){return r=>new Promise(s=>{this._progress.set(e,{resolve:s,progress:r})})}};n=c([S(I.MainThreadProgress),a(1,y),a(2,x)],n);export{n as MainThreadProgress};
