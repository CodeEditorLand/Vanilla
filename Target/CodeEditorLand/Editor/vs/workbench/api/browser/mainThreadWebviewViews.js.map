{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/api/browser/mainThreadWebviewViews.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport type { CancellationToken } from \"../../../base/common/cancellation.js\";\nimport { onUnexpectedError } from \"../../../base/common/errors.js\";\nimport { Disposable, DisposableMap } from \"../../../base/common/lifecycle.js\";\nimport { generateUuid } from \"../../../base/common/uuid.js\";\nimport { ITelemetryService } from \"../../../platform/telemetry/common/telemetry.js\";\nimport type { IViewBadge } from \"../../common/views.js\";\nimport {\n\tIWebviewViewService,\n\ttype WebviewView,\n} from \"../../contrib/webviewView/browser/webviewViewService.js\";\nimport type { IExtHostContext } from \"../../services/extensions/common/extHostCustomers.js\";\nimport * as extHostProtocol from \"../common/extHost.protocol.js\";\nimport {\n\ttype MainThreadWebviews,\n\treviveWebviewExtension,\n} from \"./mainThreadWebviews.js\";\n\nexport class MainThreadWebviewsViews\n\textends Disposable\n\timplements extHostProtocol.MainThreadWebviewViewsShape\n{\n\tprivate readonly _proxy: extHostProtocol.ExtHostWebviewViewsShape;\n\n\tprivate readonly _webviewViews = this._register(\n\t\tnew DisposableMap<string, WebviewView>(),\n\t);\n\tprivate readonly _webviewViewProviders = this._register(\n\t\tnew DisposableMap<string>(),\n\t);\n\n\tconstructor(\n\t\tcontext: IExtHostContext,\n\t\tprivate readonly mainThreadWebviews: MainThreadWebviews,\n\t\t@ITelemetryService private readonly _telemetryService: ITelemetryService,\n\t\t@IWebviewViewService private readonly _webviewViewService: IWebviewViewService,\n\t) {\n\t\tsuper();\n\n\t\tthis._proxy = context.getProxy(extHostProtocol.ExtHostContext.ExtHostWebviewViews);\n\t}\n\n\tpublic $setWebviewViewTitle(\n\t\thandle: extHostProtocol.WebviewHandle,\n\t\tvalue: string | undefined,\n\t): void {\n\t\tconst webviewView = this.getWebviewView(handle);\n\t\twebviewView.title = value;\n\t}\n\n\tpublic $setWebviewViewDescription(\n\t\thandle: extHostProtocol.WebviewHandle,\n\t\tvalue: string | undefined,\n\t): void {\n\t\tconst webviewView = this.getWebviewView(handle);\n\t\twebviewView.description = value;\n\t}\n\n\tpublic $setWebviewViewBadge(\n\t\thandle: string,\n\t\tbadge: IViewBadge | undefined,\n\t): void {\n\t\tconst webviewView = this.getWebviewView(handle);\n\t\twebviewView.badge = badge;\n\t}\n\n\tpublic $show(\n\t\thandle: extHostProtocol.WebviewHandle,\n\t\tpreserveFocus: boolean,\n\t): void {\n\t\tconst webviewView = this.getWebviewView(handle);\n\t\twebviewView.show(preserveFocus);\n\t}\n\n\tpublic $registerWebviewViewProvider(\n\t\textensionData: extHostProtocol.WebviewExtensionDescription,\n\t\tviewType: string,\n\t\toptions: {\n\t\t\tretainContextWhenHidden?: boolean;\n\t\t\tserializeBuffersForPostMessage: boolean;\n\t\t},\n\t): void {\n\t\tif (this._webviewViewProviders.has(viewType)) {\n\t\t\tthrow new Error(`View provider for ${viewType} already registered`);\n\t\t}\n\n\t\tconst extension = reviveWebviewExtension(extensionData);\n\n\t\tconst registration = this._webviewViewService.register(viewType, {\n\t\t\tresolve: async (\n\t\t\t\twebviewView: WebviewView,\n\t\t\t\tcancellation: CancellationToken,\n\t\t\t) => {\n\t\t\t\tconst handle = generateUuid();\n\n\t\t\t\tthis._webviewViews.set(handle, webviewView);\n\t\t\t\tthis.mainThreadWebviews.addWebview(\n\t\t\t\t\thandle,\n\t\t\t\t\twebviewView.webview,\n\t\t\t\t\t{\n\t\t\t\t\t\tserializeBuffersForPostMessage:\n\t\t\t\t\t\t\toptions.serializeBuffersForPostMessage,\n\t\t\t\t\t},\n\t\t\t\t);\n\n\t\t\t\tlet state;\n\t\t\t\tif (webviewView.webview.state) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tstate = JSON.parse(webviewView.webview.state);\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\tconsole.error(\n\t\t\t\t\t\t\t\"Could not load webview state\",\n\t\t\t\t\t\t\te,\n\t\t\t\t\t\t\twebviewView.webview.state,\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\twebviewView.webview.extension = extension;\n\n\t\t\t\tif (options) {\n\t\t\t\t\twebviewView.webview.options = options;\n\t\t\t\t}\n\n\t\t\t\twebviewView.onDidChangeVisibility((visible) => {\n\t\t\t\t\tthis._proxy.$onDidChangeWebviewViewVisibility(\n\t\t\t\t\t\thandle,\n\t\t\t\t\t\tvisible,\n\t\t\t\t\t);\n\t\t\t\t});\n\n\t\t\t\twebviewView.onDispose(() => {\n\t\t\t\t\tthis._proxy.$disposeWebviewView(handle);\n\t\t\t\t\tthis._webviewViews.deleteAndDispose(handle);\n\t\t\t\t});\n\n\t\t\t\ttype CreateWebviewViewTelemetry = {\n\t\t\t\t\textensionId: string;\n\t\t\t\t\tid: string;\n\t\t\t\t};\n\t\t\t\ttype Classification = {\n\t\t\t\t\textensionId: {\n\t\t\t\t\t\tclassification: \"SystemMetaData\";\n\t\t\t\t\t\tpurpose: \"FeatureInsight\";\n\t\t\t\t\t\tcomment: \"Id of the extension\";\n\t\t\t\t\t};\n\t\t\t\t\tid: {\n\t\t\t\t\t\tclassification: \"SystemMetaData\";\n\t\t\t\t\t\tpurpose: \"FeatureInsight\";\n\t\t\t\t\t\tcomment: \"Id of the view\";\n\t\t\t\t\t};\n\t\t\t\t\towner: \"digitarald\";\n\t\t\t\t\tcomment: \"Helps to gain insights on what extension contributed views are most popular\";\n\t\t\t\t};\n\t\t\t\tthis._telemetryService.publicLog2<\n\t\t\t\t\tCreateWebviewViewTelemetry,\n\t\t\t\t\tClassification\n\t\t\t\t>(\"webviews:createWebviewView\", {\n\t\t\t\t\textensionId: extension.id.value,\n\t\t\t\t\tid: viewType,\n\t\t\t\t});\n\n\t\t\t\ttry {\n\t\t\t\t\tawait this._proxy.$resolveWebviewView(\n\t\t\t\t\t\thandle,\n\t\t\t\t\t\tviewType,\n\t\t\t\t\t\twebviewView.title,\n\t\t\t\t\t\tstate,\n\t\t\t\t\t\tcancellation,\n\t\t\t\t\t);\n\t\t\t\t} catch (error) {\n\t\t\t\t\tonUnexpectedError(error);\n\t\t\t\t\twebviewView.webview.setHtml(\n\t\t\t\t\t\tthis.mainThreadWebviews.getWebviewResolvedFailedContent(\n\t\t\t\t\t\t\tviewType,\n\t\t\t\t\t\t),\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t},\n\t\t});\n\n\t\tthis._webviewViewProviders.set(viewType, registration);\n\t}\n\n\tpublic $unregisterWebviewViewProvider(viewType: string): void {\n\t\tif (!this._webviewViewProviders.has(viewType)) {\n\t\t\tthrow new Error(`No view provider for ${viewType} registered`);\n\t\t}\n\n\t\tthis._webviewViewProviders.deleteAndDispose(viewType);\n\t}\n\n\tprivate getWebviewView(handle: string): WebviewView {\n\t\tconst webviewView = this._webviewViews.get(handle);\n\t\tif (!webviewView) {\n\t\t\tthrow new Error(\"unknown webview view\");\n\t\t}\n\t\treturn webviewView;\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
