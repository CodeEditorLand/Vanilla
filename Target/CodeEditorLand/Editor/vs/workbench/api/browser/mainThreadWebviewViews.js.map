{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/api/browser/mainThreadWebviewViews.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CancellationToken } from '../../../base/common/cancellation.js';\nimport { onUnexpectedError } from '../../../base/common/errors.js';\nimport { Disposable, DisposableMap } from '../../../base/common/lifecycle.js';\nimport { generateUuid } from '../../../base/common/uuid.js';\nimport { MainThreadWebviews, reviveWebviewExtension } from './mainThreadWebviews.js';\nimport * as extHostProtocol from '../common/extHost.protocol.js';\nimport { IViewBadge } from '../../common/views.js';\nimport { IWebviewViewService, WebviewView } from '../../contrib/webviewView/browser/webviewViewService.js';\nimport { ITelemetryService } from '../../../platform/telemetry/common/telemetry.js';\nimport { IExtHostContext } from '../../services/extensions/common/extHostCustomers.js';\n\n\nexport class MainThreadWebviewsViews extends Disposable implements extHostProtocol.MainThreadWebviewViewsShape {\n\n\tprivate readonly _proxy: extHostProtocol.ExtHostWebviewViewsShape;\n\n\tprivate readonly _webviewViews = this._register(new DisposableMap<string, WebviewView>());\n\tprivate readonly _webviewViewProviders = this._register(new DisposableMap<string>());\n\n\tconstructor(\n\t\tcontext: IExtHostContext,\n\t\tprivate readonly mainThreadWebviews: MainThreadWebviews,\n\t\t@ITelemetryService private readonly _telemetryService: ITelemetryService,\n\t\t@IWebviewViewService private readonly _webviewViewService: IWebviewViewService,\n\t) {\n\t\tsuper();\n\n\t\tthis._proxy = context.getProxy(extHostProtocol.ExtHostContext.ExtHostWebviewViews);\n\t}\n\n\tpublic $setWebviewViewTitle(handle: extHostProtocol.WebviewHandle, value: string | undefined): void {\n\t\tconst webviewView = this.getWebviewView(handle);\n\t\twebviewView.title = value;\n\t}\n\n\tpublic $setWebviewViewDescription(handle: extHostProtocol.WebviewHandle, value: string | undefined): void {\n\t\tconst webviewView = this.getWebviewView(handle);\n\t\twebviewView.description = value;\n\t}\n\n\tpublic $setWebviewViewBadge(handle: string, badge: IViewBadge | undefined): void {\n\t\tconst webviewView = this.getWebviewView(handle);\n\t\twebviewView.badge = badge;\n\t}\n\n\tpublic $show(handle: extHostProtocol.WebviewHandle, preserveFocus: boolean): void {\n\t\tconst webviewView = this.getWebviewView(handle);\n\t\twebviewView.show(preserveFocus);\n\t}\n\n\tpublic $registerWebviewViewProvider(\n\t\textensionData: extHostProtocol.WebviewExtensionDescription,\n\t\tviewType: string,\n\t\toptions: { retainContextWhenHidden?: boolean; serializeBuffersForPostMessage: boolean }\n\t): void {\n\t\tif (this._webviewViewProviders.has(viewType)) {\n\t\t\tthrow new Error(`View provider for ${viewType} already registered`);\n\t\t}\n\n\t\tconst extension = reviveWebviewExtension(extensionData);\n\n\t\tconst registration = this._webviewViewService.register(viewType, {\n\t\t\tresolve: async (webviewView: WebviewView, cancellation: CancellationToken) => {\n\t\t\t\tconst handle = generateUuid();\n\n\t\t\t\tthis._webviewViews.set(handle, webviewView);\n\t\t\t\tthis.mainThreadWebviews.addWebview(handle, webviewView.webview, { serializeBuffersForPostMessage: options.serializeBuffersForPostMessage });\n\n\t\t\t\tlet state = undefined;\n\t\t\t\tif (webviewView.webview.state) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tstate = JSON.parse(webviewView.webview.state);\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\tconsole.error('Could not load webview state', e, webviewView.webview.state);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\twebviewView.webview.extension = extension;\n\n\t\t\t\tif (options) {\n\t\t\t\t\twebviewView.webview.options = options;\n\t\t\t\t}\n\n\t\t\t\twebviewView.onDidChangeVisibility(visible => {\n\t\t\t\t\tthis._proxy.$onDidChangeWebviewViewVisibility(handle, visible);\n\t\t\t\t});\n\n\t\t\t\twebviewView.onDispose(() => {\n\t\t\t\t\tthis._proxy.$disposeWebviewView(handle);\n\t\t\t\t\tthis._webviewViews.deleteAndDispose(handle);\n\t\t\t\t});\n\n\t\t\t\ttype CreateWebviewViewTelemetry = {\n\t\t\t\t\textensionId: string;\n\t\t\t\t\tid: string;\n\t\t\t\t};\n\t\t\t\ttype Classification = {\n\t\t\t\t\textensionId: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'Id of the extension' };\n\t\t\t\t\tid: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'Id of the view' };\n\t\t\t\t\towner: 'digitarald';\n\t\t\t\t\tcomment: 'Helps to gain insights on what extension contributed views are most popular';\n\t\t\t\t};\n\t\t\t\tthis._telemetryService.publicLog2<CreateWebviewViewTelemetry, Classification>('webviews:createWebviewView', {\n\t\t\t\t\textensionId: extension.id.value,\n\t\t\t\t\tid: viewType,\n\t\t\t\t});\n\n\t\t\t\ttry {\n\t\t\t\t\tawait this._proxy.$resolveWebviewView(handle, viewType, webviewView.title, state, cancellation);\n\t\t\t\t} catch (error) {\n\t\t\t\t\tonUnexpectedError(error);\n\t\t\t\t\twebviewView.webview.setHtml(this.mainThreadWebviews.getWebviewResolvedFailedContent(viewType));\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tthis._webviewViewProviders.set(viewType, registration);\n\t}\n\n\tpublic $unregisterWebviewViewProvider(viewType: string): void {\n\t\tif (!this._webviewViewProviders.has(viewType)) {\n\t\t\tthrow new Error(`No view provider for ${viewType} registered`);\n\t\t}\n\n\t\tthis._webviewViewProviders.deleteAndDispose(viewType);\n\t}\n\n\tprivate getWebviewView(handle: string): WebviewView {\n\t\tconst webviewView = this._webviewViews.get(handle);\n\t\tif (!webviewView) {\n\t\t\tthrow new Error('unknown webview view');\n\t\t}\n\t\treturn webviewView;\n\t}\n}\n\n"],
  "mappings": "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",
  "names": []
}
