var T=Object.defineProperty;var p=Object.getOwnPropertyDescriptor;var c=(l,a,o,s)=>{for(var e=s>1?void 0:s?p(a,o):a,t=l.length-1,n;t>=0;t--)(n=l[t])&&(e=(s?n(a,o,e):n(e))||e);return s&&e&&T(a,o,e),e},i=(l,a)=>(o,s)=>a(o,s,l);import"../../../base/common/cancellation.js";import{MarkdownString as h}from"../../../base/common/htmlContent.js";import{Disposable as u,DisposableMap as d}from"../../../base/common/lifecycle.js";import"../../contrib/chat/common/chatModel.js";import{IChatService as m}from"../../contrib/chat/common/chatService.js";import{ILanguageModelToolsService as v}from"../../contrib/chat/common/languageModelToolsService.js";import{extHostNamedCustomer as k}from"../../services/extensions/common/extHostCustomers.js";import{ExtHostContext as C,MainContext as I}from"../common/extHost.protocol.js";import{MainThreadChatTask as _}from"./mainThreadChatAgents2.js";let r=class extends u{constructor(o,s,e){super();this._languageModelToolsService=s;this._chatService=e;this._proxy=o.getProxy(C.ExtHostLanguageModelTools),this._register(this._languageModelToolsService.onDidChangeTools(t=>this._proxy.$onDidChangeTools([...this._languageModelToolsService.getTools()])))}_proxy;_tools=this._register(new d);_countTokenCallbacks=new Map;async $getTools(){return Array.from(this._languageModelToolsService.getTools())}async $invokeTool(o,s){let e;if(o.context){const t=this._chatService.getSession(o.context?.sessionId),n=t.getRequests().at(-1),g=this._languageModelToolsService.getTool(o.toolId);e=new _(new h(`Using ${g?.displayName??o.toolId}`)),t.acceptResponseProgress(n,e)}try{return await this._languageModelToolsService.invokeTool(o,(t,n)=>this._proxy.$countTokensForInvocation(o.callId,t,n),s)}finally{e?.complete()}}$countTokensForInvocation(o,s,e){const t=this._countTokenCallbacks.get(o);if(!t)throw new Error(`Tool invocation call ${o} not found`);return t(s,e)}$registerTool(o){const s=this._languageModelToolsService.registerToolImplementation(o,{invoke:async(e,t,n)=>{try{return this._countTokenCallbacks.set(e.callId,t),await this._proxy.$invokeTool(e,n)}finally{this._countTokenCallbacks.delete(e.callId)}}});this._tools.set(o,s)}$unregisterTool(o){this._tools.deleteAndDispose(o)}};r=c([k(I.MainThreadLanguageModelTools),i(1,v),i(2,m)],r);export{r as MainThreadLanguageModelTools};
