var p=Object.defineProperty;var T=Object.getOwnPropertyDescriptor;var c=(l,a,o,n)=>{for(var e=n>1?void 0:n?T(a,o):a,t=l.length-1,s;t>=0;t--)(s=l[t])&&(e=(n?s(a,o,e):s(e))||e);return n&&e&&p(a,o,e),e},r=(l,a)=>(o,n)=>a(o,n,l);import{MarkdownString as h}from"../../../base/common/htmlContent.js";import{Disposable as d,DisposableMap as m}from"../../../base/common/lifecycle.js";import{IChatService as u}from"../../contrib/chat/common/chatService.js";import{ILanguageModelToolsService as y}from"../../contrib/chat/common/languageModelToolsService.js";import{extHostNamedCustomer as v}from"../../services/extensions/common/extHostCustomers.js";import{ExtHostContext as k,MainContext as C}from"../common/extHost.protocol.js";import{MainThreadChatTask as I}from"./mainThreadChatAgents2.js";let i=class extends d{constructor(o,n,e){super();this._languageModelToolsService=n;this._chatService=e;this._proxy=o.getProxy(k.ExtHostLanguageModelTools),this._register(this._languageModelToolsService.onDidChangeTools(t=>this._proxy.$onDidChangeTools([...this._languageModelToolsService.getTools()])))}_proxy;_tools=this._register(new m);_countTokenCallbacks=new Map;async $getTools(){return Array.from(this._languageModelToolsService.getTools())}async $invokeTool(o,n){let e;if(o.context){const t=this._chatService.getSession(o.context?.sessionId),s=t.getRequests().at(-1),g=this._languageModelToolsService.getTool(o.toolId);e=new I(new h(`Using ${g?.displayName??o.toolId}`)),t.acceptResponseProgress(s,e)}try{return await this._languageModelToolsService.invokeTool(o,(t,s)=>this._proxy.$countTokensForInvocation(o.callId,t,s),n)}finally{e?.complete()}}$countTokensForInvocation(o,n,e){const t=this._countTokenCallbacks.get(o);if(!t)throw new Error(`Tool invocation call ${o} not found`);return t(n,e)}$registerTool(o){const n=this._languageModelToolsService.registerToolImplementation(o,{invoke:async(e,t,s)=>{try{return this._countTokenCallbacks.set(e.callId,t),await this._proxy.$invokeTool(e,s)}finally{this._countTokenCallbacks.delete(e.callId)}}});this._tools.set(o,n)}$unregisterTool(o){this._tools.deleteAndDispose(o)}};i=c([v(C.MainThreadLanguageModelTools),r(1,y),r(2,u)],i);export{i as MainThreadLanguageModelTools};
