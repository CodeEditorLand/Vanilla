var F=Object.defineProperty;var M=Object.getOwnPropertyDescriptor;var H=(a,e,i)=>e in a?F(a,e,{enumerable:!0,configurable:!0,writable:!0,value:i}):a[e]=i;var R=(a,e,i,c)=>{for(var l=c>1?void 0:c?M(e,i):e,u=a.length-1,s;u>=0;u--)(s=a[u])&&(l=(c?s(e,i,l):s(l))||l);return c&&l&&F(e,i,l),l},m=(a,e)=>(i,c)=>e(i,c,a);var b=(a,e,i)=>H(a,typeof e!="symbol"?e+"":e,i);import{DisposableMap as K,DisposableStore as P}from"../../../base/common/lifecycle.js";import{FileOperation as p,IFileService as B}from"../../../platform/files/common/files.js";import{extHostNamedCustomer as J}from"../../services/extensions/common/extHostCustomers.js";import{ExtHostContext as q,MainContext as V}from"../common/extHost.protocol.js";import{localize as t}from"../../../nls.js";import{IWorkingCopyFileService as Y}from"../../services/workingCopy/common/workingCopyFileService.js";import{IBulkEditService as G}from"../../../editor/browser/services/bulkEditService.js";import{IProgressService as z,ProgressLocation as j}from"../../../platform/progress/common/progress.js";import{raceCancellation as Q}from"../../../base/common/async.js";import{CancellationTokenSource as X}from"../../../base/common/cancellation.js";import{IDialogService as Z}from"../../../platform/dialogs/common/dialogs.js";import _ from"../../../base/common/severity.js";import{IStorageService as $,StorageScope as I,StorageTarget as ee}from"../../../platform/storage/common/storage.js";import{Action2 as te,registerAction2 as ie}from"../../../platform/actions/common/actions.js";import"../../../platform/instantiation/common/instantiation.js";import{ILogService as N}from"../../../platform/log/common/log.js";import{IEnvironmentService as ne}from"../../../platform/environment/common/environment.js";import{IUriIdentityService as oe}from"../../../platform/uriIdentity/common/uriIdentity.js";import{reviveWorkspaceEditDto as re}from"./mainThreadBulkEdits.js";import{URI as se}from"../../../base/common/uri.js";let g=class{constructor(e,i,c,l,u,s,r,h,x,S,ae){this._fileService=i;this._logService=ae;this._proxy=e.getProxy(q.ExtHostFileSystemEventService),this._listener.add(i.onDidFilesChange(d=>{this._proxy.$onFileEvent({created:d.rawAdded,changed:d.rawUpdated,deleted:d.rawDeleted})}));const D=this,W=new class{async participate(d,f,C,k,A){if(C?.isUndoing)return;const y=new X(A),T=setTimeout(()=>y.cancel(),k),n=await u.withProgress({location:j.Notification,title:this._progressLabel(f),cancellable:!0,delay:Math.min(k/2,3e3)},()=>{const o=D._proxy.$onWillRunFileOperation(f,d,k,y.token);return Q(o,y.token)},()=>{y.cancel()}).finally(()=>{y.dispose(),clearTimeout(T)});if(!n||n.edit.edits.length===0)return;const U=n.edit.edits.some(o=>o.metadata?.needsConfirmation);let w=r.getBoolean(g.MementoKeyAdditionalEdits,I.PROFILE);if(x.extensionTestsLocationURI&&(w=!1),w===void 0){let o;if(n.extensionNames.length===1?f===p.CREATE?o=t("ask.1.create","Extension '{0}' wants to make refactoring changes with this file creation",n.extensionNames[0]):f===p.COPY?o=t("ask.1.copy","Extension '{0}' wants to make refactoring changes with this file copy",n.extensionNames[0]):f===p.MOVE?o=t("ask.1.move","Extension '{0}' wants to make refactoring changes with this file move",n.extensionNames[0]):o=t("ask.1.delete","Extension '{0}' wants to make refactoring changes with this file deletion",n.extensionNames[0]):f===p.CREATE?o=t({key:"ask.N.create",comment:['{0} is a number, e.g "3 extensions want..."']},"{0} extensions want to make refactoring changes with this file creation",n.extensionNames.length):f===p.COPY?o=t({key:"ask.N.copy",comment:['{0} is a number, e.g "3 extensions want..."']},"{0} extensions want to make refactoring changes with this file copy",n.extensionNames.length):f===p.MOVE?o=t({key:"ask.N.move",comment:['{0} is a number, e.g "3 extensions want..."']},"{0} extensions want to make refactoring changes with this file move",n.extensionNames.length):o=t({key:"ask.N.delete",comment:['{0} is a number, e.g "3 extensions want..."']},"{0} extensions want to make refactoring changes with this file deletion",n.extensionNames.length),U){const{confirmed:E}=await s.confirm({type:_.Info,message:o,primaryButton:t("preview","Show &&Preview"),cancelButton:t("cancel","Skip Changes")});if(w=!0,!E)return}else{let E;(v=>(v[v.OK=0]="OK",v[v.Preview=1]="Preview",v[v.Cancel=2]="Cancel"))(E||={});const{result:O,checkboxChecked:L}=await s.prompt({type:_.Info,message:o,buttons:[{label:t({key:"ok",comment:["&& denotes a mnemonic"]},"&&OK"),run:()=>0},{label:t({key:"preview",comment:["&& denotes a mnemonic"]},"Show &&Preview"),run:()=>1}],cancelButton:{label:t("cancel","Skip Changes"),run:()=>2},checkbox:{label:t("again","Do not ask me again")}});if(O===2)return;w=O===1,L&&r.store(g.MementoKeyAdditionalEdits,w,I.PROFILE,ee.USER)}}h.info("[onWill-handler] applying additional workspace edit from extensions",n.extensionNames),await l.apply(re(n.edit,S),{undoRedoGroupId:C?.undoRedoGroupId,showPreview:w})}_progressLabel(d){switch(d){case p.CREATE:return t("msg-create","Running 'File Create' participants...");case p.MOVE:return t("msg-rename","Running 'File Rename' participants...");case p.COPY:return t("msg-copy","Running 'File Copy' participants...");case p.DELETE:return t("msg-delete","Running 'File Delete' participants...");case p.WRITE:return t("msg-write","Running 'File Write' participants...")}}};this._listener.add(c.addFileOperationParticipant(W)),this._listener.add(c.onDidRunWorkingCopyFileOperation(d=>this._proxy.$onDidRunFileOperation(d.operation,d.files)))}_proxy;_listener=new P;_watches=new K;async $watch(e,i,c,l,u){const s=se.revive(c),r={...l};if(r.recursive)try{(await this._fileService.stat(s)).isDirectory||(r.recursive=!1)}catch{}if(u){this._logService.trace(`MainThreadFileSystemEventService#$watch(): request to start watching correlated (extension: ${e}, path: ${s.toString(!0)}, recursive: ${r.recursive}, session: ${i}, excludes: ${JSON.stringify(r.excludes)}, includes: ${JSON.stringify(r.includes)})`);const h=new P,x=h.add(this._fileService.createWatcher(s,r));h.add(x.onDidChange(S=>{this._proxy.$onFileEvent({session:i,created:S.rawAdded,changed:S.rawUpdated,deleted:S.rawDeleted})})),this._watches.set(i,h)}else{this._logService.trace(`MainThreadFileSystemEventService#$watch(): request to start watching uncorrelated (extension: ${e}, path: ${s.toString(!0)}, recursive: ${r.recursive}, session: ${i}, excludes: ${JSON.stringify(r.excludes)}, includes: ${JSON.stringify(r.includes)})`);const h=this._fileService.watch(s,r);this._watches.set(i,h)}}$unwatch(e){this._watches.has(e)&&(this._logService.trace(`MainThreadFileSystemEventService#$unwatch(): request to stop watching (session: ${e})`),this._watches.deleteAndDispose(e))}dispose(){this._listener.dispose(),this._watches.dispose()}};b(g,"MementoKeyAdditionalEdits","file.particpants.additionalEdits"),g=R([J(V.MainThreadFileSystemEventService),m(1,B),m(2,Y),m(3,G),m(4,z),m(5,Z),m(6,$),m(7,N),m(8,ne),m(9,oe),m(10,N)],g),ie(class extends te{constructor(){super({id:"files.participants.resetChoice",title:{value:t("label","Reset choice for 'File operation needs preview'"),original:"Reset choice for 'File operation needs preview'"},f1:!0})}run(e){e.get($).remove(g.MementoKeyAdditionalEdits,I.PROFILE)}});export{g as MainThreadFileSystemEventService};
