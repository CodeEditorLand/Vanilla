var U=Object.defineProperty;var B=Object.getOwnPropertyDescriptor;var P=(x,i,n,l)=>{for(var m=l>1?void 0:l?B(i,n):i,v=x.length-1,r;v>=0;v--)(r=x[v])&&(m=(l?r(i,n,m):r(m))||m);return l&&m&&U(i,n,m),m},c=(x,i)=>(n,l)=>i(n,l,x);import{DisposableMap as H,DisposableStore as R}from"../../../base/common/lifecycle.js";import{FileOperation as p,IFileService as K}from"../../../platform/files/common/files.js";import{extHostNamedCustomer as V}from"../../services/extensions/common/extHostCustomers.js";import{ExtHostContext as q,MainContext as G}from"../common/extHost.protocol.js";import{localize as e}from"../../../nls.js";import{IWorkingCopyFileService as Y}from"../../services/workingCopy/common/workingCopyFileService.js";import{IBulkEditService as z}from"../../../editor/browser/services/bulkEditService.js";import{IProgressService as j,ProgressLocation as J}from"../../../platform/progress/common/progress.js";import{raceCancellation as Q}from"../../../base/common/async.js";import{CancellationTokenSource as X}from"../../../base/common/cancellation.js";import{IDialogService as Z}from"../../../platform/dialogs/common/dialogs.js";import b from"../../../base/common/severity.js";import{IStorageService as $,StorageScope as C,StorageTarget as ee}from"../../../platform/storage/common/storage.js";import{Action2 as te,registerAction2 as ie}from"../../../platform/actions/common/actions.js";import{ILogService as W}from"../../../platform/log/common/log.js";import{IEnvironmentService as ne}from"../../../platform/environment/common/environment.js";import{IUriIdentityService as re}from"../../../platform/uriIdentity/common/uriIdentity.js";import{reviveWorkspaceEditDto as oe}from"./mainThreadBulkEdits.js";import{GLOBSTAR as ae}from"../../../base/common/glob.js";import{rtrim as se}from"../../../base/common/strings.js";import{URI as ce}from"../../../base/common/uri.js";import{IConfigurationService as le}from"../../../platform/configuration/common/configuration.js";import{normalizeWatcherPattern as me}from"../../../platform/files/common/watcher.js";import{IWorkspaceContextService as pe}from"../../../platform/workspace/common/workspace.js";let g=class{constructor(i,n,l,m,v,r,t,d,y,s,f,F,de){this._fileService=n;this._contextService=f;this._logService=F;this._configurationService=de;this._proxy=i.getProxy(q.ExtHostFileSystemEventService),this._listener.add(n.onDidFilesChange(h=>{this._proxy.$onFileEvent({created:h.rawAdded,changed:h.rawUpdated,deleted:h.rawDeleted})}));const D=this,T=new class{async participate(h,u,_,k,N){if(_?.isUndoing)return;const E=new X(N),A=setTimeout(()=>E.cancel(),k),o=await v.withProgress({location:J.Notification,title:this._progressLabel(u),cancellable:!0,delay:Math.min(k/2,3e3)},()=>{const a=D._proxy.$onWillRunFileOperation(u,h,k,E.token);return Q(a,E.token)},()=>{E.cancel()}).finally(()=>{E.dispose(),clearTimeout(A)});if(!o||o.edit.edits.length===0)return;const M=o.edit.edits.some(a=>a.metadata?.needsConfirmation);let w=t.getBoolean(g.MementoKeyAdditionalEdits,C.PROFILE);if(y.extensionTestsLocationURI&&(w=!1),w===void 0){let a;if(o.extensionNames.length===1?u===p.CREATE?a=e("ask.1.create","Extension '{0}' wants to make refactoring changes with this file creation",o.extensionNames[0]):u===p.COPY?a=e("ask.1.copy","Extension '{0}' wants to make refactoring changes with this file copy",o.extensionNames[0]):u===p.MOVE?a=e("ask.1.move","Extension '{0}' wants to make refactoring changes with this file move",o.extensionNames[0]):a=e("ask.1.delete","Extension '{0}' wants to make refactoring changes with this file deletion",o.extensionNames[0]):u===p.CREATE?a=e({key:"ask.N.create",comment:['{0} is a number, e.g "3 extensions want..."']},"{0} extensions want to make refactoring changes with this file creation",o.extensionNames.length):u===p.COPY?a=e({key:"ask.N.copy",comment:['{0} is a number, e.g "3 extensions want..."']},"{0} extensions want to make refactoring changes with this file copy",o.extensionNames.length):u===p.MOVE?a=e({key:"ask.N.move",comment:['{0} is a number, e.g "3 extensions want..."']},"{0} extensions want to make refactoring changes with this file move",o.extensionNames.length):a=e({key:"ask.N.delete",comment:['{0} is a number, e.g "3 extensions want..."']},"{0} extensions want to make refactoring changes with this file deletion",o.extensionNames.length),M){const{confirmed:I}=await r.confirm({type:b.Info,message:a,primaryButton:e("preview","Show &&Preview"),cancelButton:e("cancel","Skip Changes")});if(w=!0,!I)return}else{let I;(S=>(S[S.OK=0]="OK",S[S.Preview=1]="Preview",S[S.Cancel=2]="Cancel"))(I||={});const{result:O,checkboxChecked:L}=await r.prompt({type:b.Info,message:a,buttons:[{label:e({key:"ok",comment:["&& denotes a mnemonic"]},"&&OK"),run:()=>0},{label:e({key:"preview",comment:["&& denotes a mnemonic"]},"Show &&Preview"),run:()=>1}],cancelButton:{label:e("cancel","Skip Changes"),run:()=>2},checkbox:{label:e("again","Do not ask me again")}});if(O===2)return;w=O===1,L&&t.store(g.MementoKeyAdditionalEdits,w,C.PROFILE,ee.USER)}}d.info("[onWill-handler] applying additional workspace edit from extensions",o.extensionNames),await m.apply(oe(o.edit,s),{undoRedoGroupId:_?.undoRedoGroupId,showPreview:w})}_progressLabel(h){switch(h){case p.CREATE:return e("msg-create","Running 'File Create' participants...");case p.MOVE:return e("msg-rename","Running 'File Rename' participants...");case p.COPY:return e("msg-copy","Running 'File Copy' participants...");case p.DELETE:return e("msg-delete","Running 'File Delete' participants...");case p.WRITE:return e("msg-write","Running 'File Write' participants...")}}};this._listener.add(l.addFileOperationParticipant(T)),this._listener.add(l.onDidRunWorkingCopyFileOperation(h=>this._proxy.$onDidRunFileOperation(h.operation,h.files)))}static MementoKeyAdditionalEdits="file.particpants.additionalEdits";_proxy;_listener=new R;_watches=new H;async $watch(i,n,l,m,v){const r=ce.revive(l),t={...m};if(t.recursive)try{(await this._fileService.stat(r)).isDirectory||(t.recursive=!1)}catch{}if(v){this._logService.trace(`MainThreadFileSystemEventService#$watch(): request to start watching correlated (extension: ${i}, path: ${r.toString(!0)}, recursive: ${t.recursive}, session: ${n})`);const d=new R,y=d.add(this._fileService.createWatcher(r,t));d.add(y.onDidChange(s=>{this._proxy.$onFileEvent({session:n,created:s.rawAdded,changed:s.rawUpdated,deleted:s.rawDeleted})})),this._watches.set(n,d)}else{this._logService.trace(`MainThreadFileSystemEventService#$watch(): request to start watching uncorrelated (extension: ${i}, path: ${r.toString(!0)}, recursive: ${t.recursive}, session: ${n})`);const d=this._contextService.getWorkspaceFolder(r);if(t.recursive&&t.excludes.length===0){const s=this._configurationService.getValue();if(s.files?.watcherExclude)for(const f in s.files.watcherExclude)f&&s.files.watcherExclude[f]===!0&&t.excludes.push(f)}else if(!t.recursive&&d){const s=this._configurationService.getValue();if(s.files?.watcherExclude){for(const f in s.files.watcherExclude)if(f&&s.files.watcherExclude[f]===!0){t.includes||(t.includes=[]);const F=`${se(f,"/")}/${ae}`;t.includes.push(me(d.uri.fsPath,F))}}if(!t.includes||t.includes.length===0){this._logService.trace(`MainThreadFileSystemEventService#$watch(): ignoring request to start watching because path is inside workspace and no excludes are configured (extension: ${i}, path: ${r.toString(!0)}, recursive: ${t.recursive}, session: ${n})`);return}}const y=this._fileService.watch(r,t);this._watches.set(n,y)}}$unwatch(i){this._watches.has(i)&&(this._logService.trace(`MainThreadFileSystemEventService#$unwatch(): request to stop watching (session: ${i})`),this._watches.deleteAndDispose(i))}dispose(){this._listener.dispose(),this._watches.dispose()}};g=P([V(G.MainThreadFileSystemEventService),c(1,K),c(2,Y),c(3,z),c(4,j),c(5,Z),c(6,$),c(7,W),c(8,ne),c(9,re),c(10,pe),c(11,W),c(12,le)],g),ie(class extends te{constructor(){super({id:"files.participants.resetChoice",title:{value:e("label","Reset choice for 'File operation needs preview'"),original:"Reset choice for 'File operation needs preview'"},f1:!0})}run(i){i.get($).remove(g.MementoKeyAdditionalEdits,C.PROFILE)}});export{g as MainThreadFileSystemEventService};
