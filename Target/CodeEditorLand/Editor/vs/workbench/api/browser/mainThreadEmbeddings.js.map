{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/api/browser/mainThreadEmbeddings.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CancellationToken } from '../../../base/common/cancellation.js';\nimport { Emitter, Event } from '../../../base/common/event.js';\nimport { DisposableMap, DisposableStore, IDisposable } from '../../../base/common/lifecycle.js';\nimport { InstantiationType, registerSingleton } from '../../../platform/instantiation/common/extensions.js';\nimport { createDecorator } from '../../../platform/instantiation/common/instantiation.js';\nimport { ExtHostContext, ExtHostEmbeddingsShape, MainContext, MainThreadEmbeddingsShape } from '../common/extHost.protocol.js';\nimport { extHostNamedCustomer, IExtHostContext } from '../../services/extensions/common/extHostCustomers.js';\n\n\ninterface IEmbeddingsProvider {\n\tprovideEmbeddings(input: string[], token: CancellationToken): Promise<{ values: number[] }[]>;\n}\n\nconst IEmbeddingsService = createDecorator<IEmbeddingsService>('embeddingsService');\n\ninterface IEmbeddingsService {\n\n\t_serviceBrand: undefined;\n\n\treadonly onDidChange: Event<void>;\n\n\tallProviders: Iterable<string>;\n\n\tregisterProvider(id: string, provider: IEmbeddingsProvider): IDisposable;\n\n\tcomputeEmbeddings(id: string, input: string[], token: CancellationToken): Promise<{ values: number[] }[]>;\n}\n\nclass EmbeddingsService implements IEmbeddingsService {\n\t_serviceBrand: undefined;\n\n\tprivate providers: Map<string, IEmbeddingsProvider>;\n\n\tprivate readonly _onDidChange = new Emitter<void>();\n\treadonly onDidChange: Event<void> = this._onDidChange.event;\n\n\tconstructor() {\n\t\tthis.providers = new Map<string, IEmbeddingsProvider>();\n\t}\n\n\tget allProviders(): Iterable<string> {\n\t\treturn this.providers.keys();\n\t}\n\n\tregisterProvider(id: string, provider: IEmbeddingsProvider): IDisposable {\n\t\tthis.providers.set(id, provider);\n\t\tthis._onDidChange.fire();\n\t\treturn {\n\t\t\tdispose: () => {\n\t\t\t\tthis.providers.delete(id);\n\t\t\t\tthis._onDidChange.fire();\n\t\t\t}\n\t\t};\n\t}\n\n\tcomputeEmbeddings(id: string, input: string[], token: CancellationToken): Promise<{ values: number[] }[]> {\n\t\tconst provider = this.providers.get(id);\n\t\tif (provider) {\n\t\t\treturn provider.provideEmbeddings(input, token);\n\t\t} else {\n\t\t\treturn Promise.reject(new Error(`No embeddings provider registered with id: ${id}`));\n\t\t}\n\t}\n}\n\n\nregisterSingleton(IEmbeddingsService, EmbeddingsService, InstantiationType.Delayed);\n\n@extHostNamedCustomer(MainContext.MainThreadEmbeddings)\nexport class MainThreadEmbeddings implements MainThreadEmbeddingsShape {\n\n\tprivate readonly _store = new DisposableStore();\n\tprivate readonly _providers = this._store.add(new DisposableMap<number>);\n\tprivate readonly _proxy: ExtHostEmbeddingsShape;\n\n\tconstructor(\n\t\tcontext: IExtHostContext,\n\t\t@IEmbeddingsService private readonly embeddingsService: IEmbeddingsService\n\t) {\n\t\tthis._proxy = context.getProxy(ExtHostContext.ExtHostEmbeddings);\n\n\t\tthis._store.add(embeddingsService.onDidChange((() => {\n\t\t\tthis._proxy.$acceptEmbeddingModels(Array.from(embeddingsService.allProviders));\n\t\t})));\n\t}\n\n\tdispose(): void {\n\t\tthis._store.dispose();\n\t}\n\n\t$registerEmbeddingProvider(handle: number, identifier: string): void {\n\t\tconst registration = this.embeddingsService.registerProvider(identifier, {\n\t\t\tprovideEmbeddings: (input: string[], token: CancellationToken): Promise<{ values: number[] }[]> => {\n\t\t\t\treturn this._proxy.$provideEmbeddings(handle, input, token);\n\t\t\t}\n\t\t});\n\t\tthis._providers.set(handle, registration);\n\t}\n\n\t$unregisterEmbeddingProvider(handle: number): void {\n\t\tthis._providers.deleteAndDispose(handle);\n\t}\n\n\t$computeEmbeddings(embeddingsModel: string, input: string[], token: CancellationToken): Promise<{ values: number[] }[]> {\n\t\treturn this.embeddingsService.computeEmbeddings(embeddingsModel, input, token);\n\t}\n}\n"],
  "mappings": ";;;;;;;;;;;;AAKA,SAAS,yBAAyB;AAClC,SAAS,SAAS,aAAa;AAC/B,SAAS,eAAe,iBAAiB,mBAAmB;AAC5D,SAAS,mBAAmB,yBAAyB;AACrD,SAAS,uBAAuB;AAChC,SAAS,gBAAgB,wBAAwB,aAAa,iCAAiC;AAC/F,SAAS,sBAAsB,uBAAuB;AAOtD,MAAM,qBAAqB,gBAAoC,mBAAmB;AAelF,MAAM,kBAAgD;AAAA,EAjCtD,OAiCsD;AAAA;AAAA;AAAA,EACrD;AAAA,EAEQ;AAAA,EAES,eAAe,IAAI,QAAc;AAAA,EACzC,cAA2B,KAAK,aAAa;AAAA,EAEtD,cAAc;AACb,SAAK,YAAY,oBAAI,IAAiC;AAAA,EACvD;AAAA,EAEA,IAAI,eAAiC;AACpC,WAAO,KAAK,UAAU,KAAK;AAAA,EAC5B;AAAA,EAEA,iBAAiB,IAAY,UAA4C;AACxE,SAAK,UAAU,IAAI,IAAI,QAAQ;AAC/B,SAAK,aAAa,KAAK;AACvB,WAAO;AAAA,MACN,SAAS,6BAAM;AACd,aAAK,UAAU,OAAO,EAAE;AACxB,aAAK,aAAa,KAAK;AAAA,MACxB,GAHS;AAAA,IAIV;AAAA,EACD;AAAA,EAEA,kBAAkB,IAAY,OAAiB,OAA2D;AACzG,UAAM,WAAW,KAAK,UAAU,IAAI,EAAE;AACtC,QAAI,UAAU;AACb,aAAO,SAAS,kBAAkB,OAAO,KAAK;AAAA,IAC/C,OAAO;AACN,aAAO,QAAQ,OAAO,IAAI,MAAM,8CAA8C,EAAE,EAAE,CAAC;AAAA,IACpF;AAAA,EACD;AACD;AAGA,kBAAkB,oBAAoB,mBAAmB,kBAAkB,OAAO;AAG3E,IAAM,uBAAN,MAAgE;AAAA,EAMtE,YACC,SACqC,mBACpC;AADoC;AAErC,SAAK,SAAS,QAAQ,SAAS,eAAe,iBAAiB;AAE/D,SAAK,OAAO,IAAI,kBAAkB,YAAa,MAAM;AACpD,WAAK,OAAO,uBAAuB,MAAM,KAAK,kBAAkB,YAAY,CAAC;AAAA,IAC9E,CAAE,CAAC;AAAA,EACJ;AAAA,EAbiB,SAAS,IAAI,gBAAgB;AAAA,EAC7B,aAAa,KAAK,OAAO,IAAI,IAAI,eAAqB;AAAA,EACtD;AAAA,EAajB,UAAgB;AACf,SAAK,OAAO,QAAQ;AAAA,EACrB;AAAA,EAEA,2BAA2B,QAAgB,YAA0B;AACpE,UAAM,eAAe,KAAK,kBAAkB,iBAAiB,YAAY;AAAA,MACxE,mBAAmB,wBAAC,OAAiB,UAA8D;AAClG,eAAO,KAAK,OAAO,mBAAmB,QAAQ,OAAO,KAAK;AAAA,MAC3D,GAFmB;AAAA,IAGpB,CAAC;AACD,SAAK,WAAW,IAAI,QAAQ,YAAY;AAAA,EACzC;AAAA,EAEA,6BAA6B,QAAsB;AAClD,SAAK,WAAW,iBAAiB,MAAM;AAAA,EACxC;AAAA,EAEA,mBAAmB,iBAAyB,OAAiB,OAA2D;AACvH,WAAO,KAAK,kBAAkB,kBAAkB,iBAAiB,OAAO,KAAK;AAAA,EAC9E;AACD;AArCuE;AAA1D,uBAAN;AAAA,EADN,qBAAqB,YAAY,oBAAoB;AAAA,EASnD;AAAA,GARU;",
  "names": []
}
