{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/api/browser/mainThreadEmbeddings.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport type { CancellationToken } from \"../../../base/common/cancellation.js\";\nimport { Emitter, type Event } from \"../../../base/common/event.js\";\nimport {\n\tDisposableMap,\n\tDisposableStore,\n\ttype IDisposable,\n} from \"../../../base/common/lifecycle.js\";\nimport {\n\tInstantiationType,\n\tregisterSingleton,\n} from \"../../../platform/instantiation/common/extensions.js\";\nimport { createDecorator } from \"../../../platform/instantiation/common/instantiation.js\";\nimport {\n\ttype IExtHostContext,\n\textHostNamedCustomer,\n} from \"../../services/extensions/common/extHostCustomers.js\";\nimport {\n\tExtHostContext,\n\ttype ExtHostEmbeddingsShape,\n\tMainContext,\n\ttype MainThreadEmbeddingsShape,\n} from \"../common/extHost.protocol.js\";\n\ninterface IEmbeddingsProvider {\n\tprovideEmbeddings(\n\t\tinput: string[],\n\t\ttoken: CancellationToken,\n\t): Promise<{ values: number[] }[]>;\n}\n\nconst IEmbeddingsService =\n\tcreateDecorator<IEmbeddingsService>(\"embeddingsService\");\n\ninterface IEmbeddingsService {\n\t_serviceBrand: undefined;\n\n\treadonly onDidChange: Event<void>;\n\n\tallProviders: Iterable<string>;\n\n\tregisterProvider(id: string, provider: IEmbeddingsProvider): IDisposable;\n\n\tcomputeEmbeddings(\n\t\tid: string,\n\t\tinput: string[],\n\t\ttoken: CancellationToken,\n\t): Promise<{ values: number[] }[]>;\n}\n\nclass EmbeddingsService implements IEmbeddingsService {\n\t_serviceBrand: undefined;\n\n\tprivate providers: Map<string, IEmbeddingsProvider>;\n\n\tprivate readonly _onDidChange = new Emitter<void>();\n\treadonly onDidChange: Event<void> = this._onDidChange.event;\n\n\tconstructor() {\n\t\tthis.providers = new Map<string, IEmbeddingsProvider>();\n\t}\n\n\tget allProviders(): Iterable<string> {\n\t\treturn this.providers.keys();\n\t}\n\n\tregisterProvider(id: string, provider: IEmbeddingsProvider): IDisposable {\n\t\tthis.providers.set(id, provider);\n\t\tthis._onDidChange.fire();\n\t\treturn {\n\t\t\tdispose: () => {\n\t\t\t\tthis.providers.delete(id);\n\t\t\t\tthis._onDidChange.fire();\n\t\t\t},\n\t\t};\n\t}\n\n\tcomputeEmbeddings(\n\t\tid: string,\n\t\tinput: string[],\n\t\ttoken: CancellationToken,\n\t): Promise<{ values: number[] }[]> {\n\t\tconst provider = this.providers.get(id);\n\t\tif (provider) {\n\t\t\treturn provider.provideEmbeddings(input, token);\n\t\t} else {\n\t\t\treturn Promise.reject(\n\t\t\t\tnew Error(`No embeddings provider registered with id: ${id}`),\n\t\t\t);\n\t\t}\n\t}\n}\n\nregisterSingleton(\n\tIEmbeddingsService,\n\tEmbeddingsService,\n\tInstantiationType.Delayed,\n);\n\n@extHostNamedCustomer(MainContext.MainThreadEmbeddings)\nexport class MainThreadEmbeddings implements MainThreadEmbeddingsShape {\n\tprivate readonly _store = new DisposableStore();\n\tprivate readonly _providers = this._store.add(new DisposableMap<number>());\n\tprivate readonly _proxy: ExtHostEmbeddingsShape;\n\n\tconstructor(\n\t\tcontext: IExtHostContext,\n\t\t@IEmbeddingsService\n\t\tprivate readonly embeddingsService: IEmbeddingsService,\n\t) {\n\t\tthis._proxy = context.getProxy(ExtHostContext.ExtHostEmbeddings);\n\n\t\tthis._store.add(\n\t\t\tembeddingsService.onDidChange(() => {\n\t\t\t\tthis._proxy.$acceptEmbeddingModels(\n\t\t\t\t\tArray.from(embeddingsService.allProviders),\n\t\t\t\t);\n\t\t\t}),\n\t\t);\n\t}\n\n\tdispose(): void {\n\t\tthis._store.dispose();\n\t}\n\n\t$registerEmbeddingProvider(handle: number, identifier: string): void {\n\t\tconst registration = this.embeddingsService.registerProvider(\n\t\t\tidentifier,\n\t\t\t{\n\t\t\t\tprovideEmbeddings: (\n\t\t\t\t\tinput: string[],\n\t\t\t\t\ttoken: CancellationToken,\n\t\t\t\t): Promise<{ values: number[] }[]> => {\n\t\t\t\t\treturn this._proxy.$provideEmbeddings(handle, input, token);\n\t\t\t\t},\n\t\t\t},\n\t\t);\n\t\tthis._providers.set(handle, registration);\n\t}\n\n\t$unregisterEmbeddingProvider(handle: number): void {\n\t\tthis._providers.deleteAndDispose(handle);\n\t}\n\n\t$computeEmbeddings(\n\t\tembeddingsModel: string,\n\t\tinput: string[],\n\t\ttoken: CancellationToken,\n\t): Promise<{ values: number[] }[]> {\n\t\treturn this.embeddingsService.computeEmbeddings(\n\t\t\tembeddingsModel,\n\t\t\tinput,\n\t\t\ttoken,\n\t\t);\n\t}\n}\n"],
  "mappings": ";;;;;;;;;;;;AAMA,SAAS,eAA2B;AACpC;AAAA,EACC;AAAA,EACA;AAAA,OAEM;AACP;AAAA,EACC;AAAA,EACA;AAAA,OACM;AACP,SAAS,uBAAuB;AAChC;AAAA,EAEC;AAAA,OACM;AACP;AAAA,EACC;AAAA,EAEA;AAAA,OAEM;AASP,MAAM,qBACL,gBAAoC,mBAAmB;AAkBxD,MAAM,kBAAgD;AAAA,EAtDtD,OAsDsD;AAAA;AAAA;AAAA,EACrD;AAAA,EAEQ;AAAA,EAES,eAAe,IAAI,QAAc;AAAA,EACzC,cAA2B,KAAK,aAAa;AAAA,EAEtD,cAAc;AACb,SAAK,YAAY,oBAAI,IAAiC;AAAA,EACvD;AAAA,EAEA,IAAI,eAAiC;AACpC,WAAO,KAAK,UAAU,KAAK;AAAA,EAC5B;AAAA,EAEA,iBAAiB,IAAY,UAA4C;AACxE,SAAK,UAAU,IAAI,IAAI,QAAQ;AAC/B,SAAK,aAAa,KAAK;AACvB,WAAO;AAAA,MACN,SAAS,6BAAM;AACd,aAAK,UAAU,OAAO,EAAE;AACxB,aAAK,aAAa,KAAK;AAAA,MACxB,GAHS;AAAA,IAIV;AAAA,EACD;AAAA,EAEA,kBACC,IACA,OACA,OACkC;AAClC,UAAM,WAAW,KAAK,UAAU,IAAI,EAAE;AACtC,QAAI,UAAU;AACb,aAAO,SAAS,kBAAkB,OAAO,KAAK;AAAA,IAC/C,OAAO;AACN,aAAO,QAAQ;AAAA,QACd,IAAI,MAAM,8CAA8C,EAAE,EAAE;AAAA,MAC7D;AAAA,IACD;AAAA,EACD;AACD;AAEA;AAAA,EACC;AAAA,EACA;AAAA,EACA,kBAAkB;AACnB;AAGO,IAAM,uBAAN,MAAgE;AAAA,EAKtE,YACC,SAEiB,mBAChB;AADgB;AAEjB,SAAK,SAAS,QAAQ,SAAS,eAAe,iBAAiB;AAE/D,SAAK,OAAO;AAAA,MACX,kBAAkB,YAAY,MAAM;AACnC,aAAK,OAAO;AAAA,UACX,MAAM,KAAK,kBAAkB,YAAY;AAAA,QAC1C;AAAA,MACD,CAAC;AAAA,IACF;AAAA,EACD;AAAA,EAlBiB,SAAS,IAAI,gBAAgB;AAAA,EAC7B,aAAa,KAAK,OAAO,IAAI,IAAI,cAAsB,CAAC;AAAA,EACxD;AAAA,EAkBjB,UAAgB;AACf,SAAK,OAAO,QAAQ;AAAA,EACrB;AAAA,EAEA,2BAA2B,QAAgB,YAA0B;AACpE,UAAM,eAAe,KAAK,kBAAkB;AAAA,MAC3C;AAAA,MACA;AAAA,QACC,mBAAmB,wBAClB,OACA,UACqC;AACrC,iBAAO,KAAK,OAAO,mBAAmB,QAAQ,OAAO,KAAK;AAAA,QAC3D,GALmB;AAAA,MAMpB;AAAA,IACD;AACA,SAAK,WAAW,IAAI,QAAQ,YAAY;AAAA,EACzC;AAAA,EAEA,6BAA6B,QAAsB;AAClD,SAAK,WAAW,iBAAiB,MAAM;AAAA,EACxC;AAAA,EAEA,mBACC,iBACA,OACA,OACkC;AAClC,WAAO,KAAK,kBAAkB;AAAA,MAC7B;AAAA,MACA;AAAA,MACA;AAAA,IACD;AAAA,EACD;AACD;AAvDuE;AAA1D,uBAAN;AAAA,EADN,qBAAqB,YAAY,oBAAoB;AAAA,EAQnD;AAAA,GAPU;",
  "names": []
}
