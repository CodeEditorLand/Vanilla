var v=Object.defineProperty;var d=Object.getOwnPropertyDescriptor;var c=(s,t,e,i)=>{for(var o=i>1?void 0:i?d(t,e):t,r=s.length-1,a;r>=0;r--)(a=s[r])&&(o=(i?a(t,e,o):a(o))||o);return i&&o&&v(t,e,o),o},n=(s,t)=>(e,i)=>t(e,i,s);import{Event as m}from"../../../base/common/event.js";import{DisposableStore as h}from"../../../base/common/lifecycle.js";import{URI as l}from"../../../base/common/uri.js";import{IOpenerService as x}from"../../../platform/opener/common/opener.js";import{extHostNamedCustomer as y}from"../../services/extensions/common/extHostCustomers.js";import{IHostService as u}from"../../services/host/browser/host.js";import{IUserActivityService as S}from"../../services/userActivity/common/userActivityService.js";import{ExtHostContext as C,MainContext as I}from"../common/extHost.protocol.js";let p=class{constructor(t,e,i,o){this.hostService=e;this.openerService=i;this.userActivityService=o;this.proxy=t.getProxy(C.ExtHostWindow),m.latch(e.onDidChangeFocus)(this.proxy.$onDidChangeWindowFocus,this.proxy,this.disposables),o.onDidChangeIsActive(this.proxy.$onDidChangeWindowActive,this.proxy,this.disposables)}proxy;disposables=new h;dispose(){this.disposables.dispose()}$getInitialState(){return Promise.resolve({isFocused:this.hostService.hasFocus,isActive:this.userActivityService.isActive})}async $openUri(t,e,i){const o=l.from(t);let r;return e&&l.parse(e).toString()===o.toString()?r=e:r=o,this.openerService.open(r,{openExternal:!0,allowTunneling:i.allowTunneling,allowContributedOpeners:i.allowContributedOpeners})}async $asExternalUri(t,e){return(await this.openerService.resolveExternalUri(l.revive(t),e)).resolved}};p=c([y(I.MainThreadWindow),n(1,u),n(2,x),n(3,S)],p);export{p as MainThreadWindow};
