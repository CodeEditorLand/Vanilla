{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/api/browser/mainThreadLogService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { extHostNamedCustomer, IExtHostContext } from '../../services/extensions/common/extHostCustomers.js';\nimport { ILoggerOptions, ILoggerResource, ILoggerService, ILogService, isLogLevel, log, LogLevel, LogLevelToString, parseLogLevel } from '../../../platform/log/common/log.js';\nimport { DisposableStore } from '../../../base/common/lifecycle.js';\nimport { ExtHostContext, MainThreadLoggerShape, MainContext } from '../common/extHost.protocol.js';\nimport { UriComponents, URI, UriDto } from '../../../base/common/uri.js';\nimport { ServicesAccessor } from '../../../platform/instantiation/common/instantiation.js';\nimport { CommandsRegistry } from '../../../platform/commands/common/commands.js';\nimport { IEnvironmentService } from '../../../platform/environment/common/environment.js';\n\n@extHostNamedCustomer(MainContext.MainThreadLogger)\nexport class MainThreadLoggerService implements MainThreadLoggerShape {\n\n\tprivate readonly disposables = new DisposableStore();\n\n\tconstructor(\n\t\textHostContext: IExtHostContext,\n\t\t@ILoggerService private readonly loggerService: ILoggerService,\n\t) {\n\t\tconst proxy = extHostContext.getProxy(ExtHostContext.ExtHostLogLevelServiceShape);\n\t\tthis.disposables.add(loggerService.onDidChangeLogLevel(arg => {\n\t\t\tif (isLogLevel(arg)) {\n\t\t\t\tproxy.$setLogLevel(arg);\n\t\t\t} else {\n\t\t\t\tproxy.$setLogLevel(arg[1], arg[0]);\n\t\t\t}\n\t\t}));\n\t}\n\n\t$log(file: UriComponents, messages: [LogLevel, string][]): void {\n\t\tconst logger = this.loggerService.getLogger(URI.revive(file));\n\t\tif (!logger) {\n\t\t\tthrow new Error('Create the logger before logging');\n\t\t}\n\t\tfor (const [level, message] of messages) {\n\t\t\tlog(logger, level, message);\n\t\t}\n\t}\n\n\tasync $createLogger(file: UriComponents, options?: ILoggerOptions): Promise<void> {\n\t\tthis.loggerService.createLogger(URI.revive(file), options);\n\t}\n\n\tasync $registerLogger(logResource: UriDto<ILoggerResource>): Promise<void> {\n\t\tthis.loggerService.registerLogger({\n\t\t\t...logResource,\n\t\t\tresource: URI.revive(logResource.resource)\n\t\t});\n\t}\n\n\tasync $deregisterLogger(resource: UriComponents): Promise<void> {\n\t\tthis.loggerService.deregisterLogger(URI.revive(resource));\n\t}\n\n\tasync $setVisibility(resource: UriComponents, visible: boolean): Promise<void> {\n\t\tthis.loggerService.setVisibility(URI.revive(resource), visible);\n\t}\n\n\t$flush(file: UriComponents): void {\n\t\tconst logger = this.loggerService.getLogger(URI.revive(file));\n\t\tif (!logger) {\n\t\t\tthrow new Error('Create the logger before flushing');\n\t\t}\n\t\tlogger.flush();\n\t}\n\n\tdispose(): void {\n\t\tthis.disposables.dispose();\n\t}\n}\n\n// --- Internal commands to improve extension test runs\n\nCommandsRegistry.registerCommand('_extensionTests.setLogLevel', function (accessor: ServicesAccessor, level: string) {\n\tconst loggerService = accessor.get(ILoggerService);\n\tconst environmentService = accessor.get(IEnvironmentService);\n\n\tif (environmentService.isExtensionDevelopment && !!environmentService.extensionTestsLocationURI) {\n\t\tconst logLevel = parseLogLevel(level);\n\t\tif (logLevel !== undefined) {\n\t\t\tloggerService.setLogLevel(logLevel);\n\t\t}\n\t}\n});\n\nCommandsRegistry.registerCommand('_extensionTests.getLogLevel', function (accessor: ServicesAccessor) {\n\tconst logService = accessor.get(ILogService);\n\n\treturn LogLevelToString(logService.getLevel());\n});\n"],
  "mappings": ";;;;;;;;;;;;AAKA,SAAS,sBAAsB,uBAAuB;AACtD,SAAS,gBAAgB,iBAAiB,gBAAgB,aAAa,YAAY,KAAK,UAAU,kBAAkB,qBAAqB;AACzI,SAAS,uBAAuB;AAChC,SAAS,gBAAgB,uBAAuB,mBAAmB;AACnE,SAAS,eAAe,KAAK,cAAc;AAC3C,SAAS,wBAAwB;AACjC,SAAS,wBAAwB;AACjC,SAAS,2BAA2B;AAG7B,IAAM,0BAAN,MAA+D;AAAA,EAIrE,YACC,gBACiC,eAChC;AADgC;AAEjC,UAAM,QAAQ,eAAe,SAAS,eAAe,2BAA2B;AAChF,SAAK,YAAY,IAAI,cAAc,oBAAoB,SAAO;AAC7D,UAAI,WAAW,GAAG,GAAG;AACpB,cAAM,aAAa,GAAG;AAAA,MACvB,OAAO;AACN,cAAM,aAAa,IAAI,CAAC,GAAG,IAAI,CAAC,CAAC;AAAA,MAClC;AAAA,IACD,CAAC,CAAC;AAAA,EACH;AAAA,EAdiB,cAAc,IAAI,gBAAgB;AAAA,EAgBnD,KAAK,MAAqB,UAAsC;AAC/D,UAAM,SAAS,KAAK,cAAc,UAAU,IAAI,OAAO,IAAI,CAAC;AAC5D,QAAI,CAAC,QAAQ;AACZ,YAAM,IAAI,MAAM,kCAAkC;AAAA,IACnD;AACA,eAAW,CAAC,OAAO,OAAO,KAAK,UAAU;AACxC,UAAI,QAAQ,OAAO,OAAO;AAAA,IAC3B;AAAA,EACD;AAAA,EAEA,MAAM,cAAc,MAAqB,SAAyC;AACjF,SAAK,cAAc,aAAa,IAAI,OAAO,IAAI,GAAG,OAAO;AAAA,EAC1D;AAAA,EAEA,MAAM,gBAAgB,aAAqD;AAC1E,SAAK,cAAc,eAAe;AAAA,MACjC,GAAG;AAAA,MACH,UAAU,IAAI,OAAO,YAAY,QAAQ;AAAA,IAC1C,CAAC;AAAA,EACF;AAAA,EAEA,MAAM,kBAAkB,UAAwC;AAC/D,SAAK,cAAc,iBAAiB,IAAI,OAAO,QAAQ,CAAC;AAAA,EACzD;AAAA,EAEA,MAAM,eAAe,UAAyB,SAAiC;AAC9E,SAAK,cAAc,cAAc,IAAI,OAAO,QAAQ,GAAG,OAAO;AAAA,EAC/D;AAAA,EAEA,OAAO,MAA2B;AACjC,UAAM,SAAS,KAAK,cAAc,UAAU,IAAI,OAAO,IAAI,CAAC;AAC5D,QAAI,CAAC,QAAQ;AACZ,YAAM,IAAI,MAAM,mCAAmC;AAAA,IACpD;AACA,WAAO,MAAM;AAAA,EACd;AAAA,EAEA,UAAgB;AACf,SAAK,YAAY,QAAQ;AAAA,EAC1B;AACD;AA1DsE;AAAzD,0BAAN;AAAA,EADN,qBAAqB,YAAY,gBAAgB;AAAA,EAO/C;AAAA,GANU;AA8Db,iBAAiB,gBAAgB,+BAA+B,SAAU,UAA4B,OAAe;AACpH,QAAM,gBAAgB,SAAS,IAAI,cAAc;AACjD,QAAM,qBAAqB,SAAS,IAAI,mBAAmB;AAE3D,MAAI,mBAAmB,0BAA0B,CAAC,CAAC,mBAAmB,2BAA2B;AAChG,UAAM,WAAW,cAAc,KAAK;AACpC,QAAI,aAAa,QAAW;AAC3B,oBAAc,YAAY,QAAQ;AAAA,IACnC;AAAA,EACD;AACD,CAAC;AAED,iBAAiB,gBAAgB,+BAA+B,SAAU,UAA4B;AACrG,QAAM,aAAa,SAAS,IAAI,WAAW;AAE3C,SAAO,iBAAiB,WAAW,SAAS,CAAC;AAC9C,CAAC;",
  "names": []
}
