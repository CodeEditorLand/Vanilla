{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/api/browser/mainThreadLogService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { DisposableStore } from \"../../../base/common/lifecycle.js\";\nimport {\n\tURI,\n\ttype UriComponents,\n\ttype UriDto,\n} from \"../../../base/common/uri.js\";\nimport { CommandsRegistry } from \"../../../platform/commands/common/commands.js\";\nimport { IEnvironmentService } from \"../../../platform/environment/common/environment.js\";\nimport type { ServicesAccessor } from \"../../../platform/instantiation/common/instantiation.js\";\nimport {\n\tILogService,\n\ttype ILoggerOptions,\n\ttype ILoggerResource,\n\tILoggerService,\n\ttype LogLevel,\n\tLogLevelToString,\n\tisLogLevel,\n\tlog,\n\tparseLogLevel,\n} from \"../../../platform/log/common/log.js\";\nimport {\n\ttype IExtHostContext,\n\textHostNamedCustomer,\n} from \"../../services/extensions/common/extHostCustomers.js\";\nimport {\n\tExtHostContext,\n\tMainContext,\n\ttype MainThreadLoggerShape,\n} from \"../common/extHost.protocol.js\";\n\n@extHostNamedCustomer(MainContext.MainThreadLogger)\nexport class MainThreadLoggerService implements MainThreadLoggerShape {\n\tprivate readonly disposables = new DisposableStore();\n\n\tconstructor(\n\t\textHostContext: IExtHostContext,\n\t\t@ILoggerService private readonly loggerService: ILoggerService,\n\t) {\n\t\tconst proxy = extHostContext.getProxy(\n\t\t\tExtHostContext.ExtHostLogLevelServiceShape,\n\t\t);\n\t\tthis.disposables.add(\n\t\t\tloggerService.onDidChangeLogLevel((arg) => {\n\t\t\t\tif (isLogLevel(arg)) {\n\t\t\t\t\tproxy.$setLogLevel(arg);\n\t\t\t\t} else {\n\t\t\t\t\tproxy.$setLogLevel(arg[1], arg[0]);\n\t\t\t\t}\n\t\t\t}),\n\t\t);\n\t}\n\n\t$log(file: UriComponents, messages: [LogLevel, string][]): void {\n\t\tconst logger = this.loggerService.getLogger(URI.revive(file));\n\t\tif (!logger) {\n\t\t\tthrow new Error(\"Create the logger before logging\");\n\t\t}\n\t\tfor (const [level, message] of messages) {\n\t\t\tlog(logger, level, message);\n\t\t}\n\t}\n\n\tasync $createLogger(\n\t\tfile: UriComponents,\n\t\toptions?: ILoggerOptions,\n\t): Promise<void> {\n\t\tthis.loggerService.createLogger(URI.revive(file), options);\n\t}\n\n\tasync $registerLogger(logResource: UriDto<ILoggerResource>): Promise<void> {\n\t\tthis.loggerService.registerLogger({\n\t\t\t...logResource,\n\t\t\tresource: URI.revive(logResource.resource),\n\t\t});\n\t}\n\n\tasync $deregisterLogger(resource: UriComponents): Promise<void> {\n\t\tthis.loggerService.deregisterLogger(URI.revive(resource));\n\t}\n\n\tasync $setVisibility(\n\t\tresource: UriComponents,\n\t\tvisible: boolean,\n\t): Promise<void> {\n\t\tthis.loggerService.setVisibility(URI.revive(resource), visible);\n\t}\n\n\t$flush(file: UriComponents): void {\n\t\tconst logger = this.loggerService.getLogger(URI.revive(file));\n\t\tif (!logger) {\n\t\t\tthrow new Error(\"Create the logger before flushing\");\n\t\t}\n\t\tlogger.flush();\n\t}\n\n\tdispose(): void {\n\t\tthis.disposables.dispose();\n\t}\n}\n\n// --- Internal commands to improve extension test runs\n\nCommandsRegistry.registerCommand(\n\t\"_extensionTests.setLogLevel\",\n\t(accessor: ServicesAccessor, level: string) => {\n\t\tconst loggerService = accessor.get(ILoggerService);\n\t\tconst environmentService = accessor.get(IEnvironmentService);\n\n\t\tif (\n\t\t\tenvironmentService.isExtensionDevelopment &&\n\t\t\t!!environmentService.extensionTestsLocationURI\n\t\t) {\n\t\t\tconst logLevel = parseLogLevel(level);\n\t\t\tif (logLevel !== undefined) {\n\t\t\t\tloggerService.setLogLevel(logLevel);\n\t\t\t}\n\t\t}\n\t},\n);\n\nCommandsRegistry.registerCommand(\n\t\"_extensionTests.getLogLevel\",\n\t(accessor: ServicesAccessor) => {\n\t\tconst logService = accessor.get(ILogService);\n\n\t\treturn LogLevelToString(logService.getLevel());\n\t},\n);\n"],
  "mappings": ";;;;;;;;;;;;AAKA,SAAS,uBAAuB;AAChC;AAAA,EACC;AAAA,OAGM;AACP,SAAS,wBAAwB;AACjC,SAAS,2BAA2B;AAEpC;AAAA,EACC;AAAA,EAGA;AAAA,EAEA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,OACM;AACP;AAAA,EAEC;AAAA,OACM;AACP;AAAA,EACC;AAAA,EACA;AAAA,OAEM;AAGA,IAAM,0BAAN,MAA+D;AAAA,EAGrE,YACC,gBACiC,eAChC;AADgC;AAEjC,UAAM,QAAQ,eAAe;AAAA,MAC5B,eAAe;AAAA,IAChB;AACA,SAAK,YAAY;AAAA,MAChB,cAAc,oBAAoB,CAAC,QAAQ;AAC1C,YAAI,WAAW,GAAG,GAAG;AACpB,gBAAM,aAAa,GAAG;AAAA,QACvB,OAAO;AACN,gBAAM,aAAa,IAAI,CAAC,GAAG,IAAI,CAAC,CAAC;AAAA,QAClC;AAAA,MACD,CAAC;AAAA,IACF;AAAA,EACD;AAAA,EAlBiB,cAAc,IAAI,gBAAgB;AAAA,EAoBnD,KAAK,MAAqB,UAAsC;AAC/D,UAAM,SAAS,KAAK,cAAc,UAAU,IAAI,OAAO,IAAI,CAAC;AAC5D,QAAI,CAAC,QAAQ;AACZ,YAAM,IAAI,MAAM,kCAAkC;AAAA,IACnD;AACA,eAAW,CAAC,OAAO,OAAO,KAAK,UAAU;AACxC,UAAI,QAAQ,OAAO,OAAO;AAAA,IAC3B;AAAA,EACD;AAAA,EAEA,MAAM,cACL,MACA,SACgB;AAChB,SAAK,cAAc,aAAa,IAAI,OAAO,IAAI,GAAG,OAAO;AAAA,EAC1D;AAAA,EAEA,MAAM,gBAAgB,aAAqD;AAC1E,SAAK,cAAc,eAAe;AAAA,MACjC,GAAG;AAAA,MACH,UAAU,IAAI,OAAO,YAAY,QAAQ;AAAA,IAC1C,CAAC;AAAA,EACF;AAAA,EAEA,MAAM,kBAAkB,UAAwC;AAC/D,SAAK,cAAc,iBAAiB,IAAI,OAAO,QAAQ,CAAC;AAAA,EACzD;AAAA,EAEA,MAAM,eACL,UACA,SACgB;AAChB,SAAK,cAAc,cAAc,IAAI,OAAO,QAAQ,GAAG,OAAO;AAAA,EAC/D;AAAA,EAEA,OAAO,MAA2B;AACjC,UAAM,SAAS,KAAK,cAAc,UAAU,IAAI,OAAO,IAAI,CAAC;AAC5D,QAAI,CAAC,QAAQ;AACZ,YAAM,IAAI,MAAM,mCAAmC;AAAA,IACpD;AACA,WAAO,MAAM;AAAA,EACd;AAAA,EAEA,UAAgB;AACf,SAAK,YAAY,QAAQ;AAAA,EAC1B;AACD;AAnEsE;AAAzD,0BAAN;AAAA,EADN,qBAAqB,YAAY,gBAAgB;AAAA,EAM/C;AAAA,GALU;AAuEb,iBAAiB;AAAA,EAChB;AAAA,EACA,CAAC,UAA4B,UAAkB;AAC9C,UAAM,gBAAgB,SAAS,IAAI,cAAc;AACjD,UAAM,qBAAqB,SAAS,IAAI,mBAAmB;AAE3D,QACC,mBAAmB,0BACnB,CAAC,CAAC,mBAAmB,2BACpB;AACD,YAAM,WAAW,cAAc,KAAK;AACpC,UAAI,aAAa,QAAW;AAC3B,sBAAc,YAAY,QAAQ;AAAA,MACnC;AAAA,IACD;AAAA,EACD;AACD;AAEA,iBAAiB;AAAA,EAChB;AAAA,EACA,CAAC,aAA+B;AAC/B,UAAM,aAAa,SAAS,IAAI,WAAW;AAE3C,WAAO,iBAAiB,WAAW,SAAS,CAAC;AAAA,EAC9C;AACD;",
  "names": []
}
