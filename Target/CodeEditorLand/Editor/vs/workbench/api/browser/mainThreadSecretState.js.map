{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/api/browser/mainThreadSecretState.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { SequencerByKey } from \"../../../base/common/async.js\";\nimport { Disposable } from \"../../../base/common/lifecycle.js\";\nimport { ILogService } from \"../../../platform/log/common/log.js\";\nimport { ISecretStorageService } from \"../../../platform/secrets/common/secrets.js\";\nimport { IBrowserWorkbenchEnvironmentService } from \"../../services/environment/browser/environmentService.js\";\nimport {\n\ttype IExtHostContext,\n\textHostNamedCustomer,\n} from \"../../services/extensions/common/extHostCustomers.js\";\nimport {\n\tExtHostContext,\n\ttype ExtHostSecretStateShape,\n\tMainContext,\n\ttype MainThreadSecretStateShape,\n} from \"../common/extHost.protocol.js\";\n\n@extHostNamedCustomer(MainContext.MainThreadSecretState)\nexport class MainThreadSecretState\n\textends Disposable\n\timplements MainThreadSecretStateShape\n{\n\tprivate readonly _proxy: ExtHostSecretStateShape;\n\n\tprivate readonly _sequencer = new SequencerByKey<string>();\n\n\tconstructor(\n\t\textHostContext: IExtHostContext,\n\t\t@ISecretStorageService private readonly secretStorageService: ISecretStorageService,\n\t\t@ILogService private readonly logService: ILogService,\n\t\t@IBrowserWorkbenchEnvironmentService environmentService: IBrowserWorkbenchEnvironmentService\n\t) {\n\t\tsuper();\n\n\t\tthis._proxy = extHostContext.getProxy(ExtHostContext.ExtHostSecretState);\n\n\t\tthis._register(this.secretStorageService.onDidChangeSecret((e: string) => {\n\t\t\ttry {\n\t\t\t\tconst { extensionId, key } = this.parseKey(e);\n\t\t\t\tif (extensionId && key) {\n\t\t\t\t\tthis._proxy.$onDidChangePassword({ extensionId, key });\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\t// Core can use non-JSON values as keys, so we may not be able to parse them.\n\t\t\t}\n\t\t}));\n\t}\n\n\t$getPassword(\n\t\textensionId: string,\n\t\tkey: string,\n\t): Promise<string | undefined> {\n\t\tthis.logService.trace(\n\t\t\t`[mainThreadSecretState] Getting password for ${extensionId} extension: `,\n\t\t\tkey,\n\t\t);\n\t\treturn this._sequencer.queue(extensionId, () =>\n\t\t\tthis.doGetPassword(extensionId, key),\n\t\t);\n\t}\n\n\tprivate async doGetPassword(\n\t\textensionId: string,\n\t\tkey: string,\n\t): Promise<string | undefined> {\n\t\tconst fullKey = this.getKey(extensionId, key);\n\t\tconst password = await this.secretStorageService.get(fullKey);\n\t\tthis.logService.trace(\n\t\t\t`[mainThreadSecretState] ${password ? \"P\" : \"No p\"}assword found for: `,\n\t\t\textensionId,\n\t\t\tkey,\n\t\t);\n\t\treturn password;\n\t}\n\n\t$setPassword(\n\t\textensionId: string,\n\t\tkey: string,\n\t\tvalue: string,\n\t): Promise<void> {\n\t\tthis.logService.trace(\n\t\t\t`[mainThreadSecretState] Setting password for ${extensionId} extension: `,\n\t\t\tkey,\n\t\t);\n\t\treturn this._sequencer.queue(extensionId, () =>\n\t\t\tthis.doSetPassword(extensionId, key, value),\n\t\t);\n\t}\n\n\tprivate async doSetPassword(\n\t\textensionId: string,\n\t\tkey: string,\n\t\tvalue: string,\n\t): Promise<void> {\n\t\tconst fullKey = this.getKey(extensionId, key);\n\t\tawait this.secretStorageService.set(fullKey, value);\n\t\tthis.logService.trace(\n\t\t\t\"[mainThreadSecretState] Password set for: \",\n\t\t\textensionId,\n\t\t\tkey,\n\t\t);\n\t}\n\n\t$deletePassword(extensionId: string, key: string): Promise<void> {\n\t\tthis.logService.trace(\n\t\t\t`[mainThreadSecretState] Deleting password for ${extensionId} extension: `,\n\t\t\tkey,\n\t\t);\n\t\treturn this._sequencer.queue(extensionId, () =>\n\t\t\tthis.doDeletePassword(extensionId, key),\n\t\t);\n\t}\n\n\tprivate async doDeletePassword(\n\t\textensionId: string,\n\t\tkey: string,\n\t): Promise<void> {\n\t\tconst fullKey = this.getKey(extensionId, key);\n\t\tawait this.secretStorageService.delete(fullKey);\n\t\tthis.logService.trace(\n\t\t\t\"[mainThreadSecretState] Password deleted for: \",\n\t\t\textensionId,\n\t\t\tkey,\n\t\t);\n\t}\n\n\tprivate getKey(extensionId: string, key: string): string {\n\t\treturn JSON.stringify({ extensionId, key });\n\t}\n\n\tprivate parseKey(key: string): { extensionId: string; key: string } {\n\t\treturn JSON.parse(key);\n\t}\n}\n"],
  "mappings": ";;;;;;;;;;;;AAKA,SAAS,sBAAsB;AAC/B,SAAS,kBAAkB;AAC3B,SAAS,mBAAmB;AAC5B,SAAS,6BAA6B;AACtC,SAAS,2CAA2C;AACpD;AAAA,EAEC;AAAA,OACM;AACP;AAAA,EACC;AAAA,EAEA;AAAA,OAEM;AAGA,IAAM,wBAAN,cACE,WAET;AAAA,EAKC,YACC,gBACwC,sBACV,YACO,oBACpC;AACD,UAAM;AAJkC;AACV;AAK9B,SAAK,SAAS,eAAe,SAAS,eAAe,kBAAkB;AAEvE,SAAK,UAAU,KAAK,qBAAqB,kBAAkB,CAAC,MAAc;AACzE,UAAI;AACH,cAAM,EAAE,aAAa,IAAI,IAAI,KAAK,SAAS,CAAC;AAC5C,YAAI,eAAe,KAAK;AACvB,eAAK,OAAO,qBAAqB,EAAE,aAAa,IAAI,CAAC;AAAA,QACtD;AAAA,MACD,SAASA,IAAG;AAAA,MAEZ;AAAA,IACD,CAAC,CAAC;AAAA,EACH;AAAA,EAxBiB;AAAA,EAEA,aAAa,IAAI,eAAuB;AAAA,EAwBzD,aACC,aACA,KAC8B;AAC9B,SAAK,WAAW;AAAA,MACf,gDAAgD,WAAW;AAAA,MAC3D;AAAA,IACD;AACA,WAAO,KAAK,WAAW;AAAA,MAAM;AAAA,MAAa,MACzC,KAAK,cAAc,aAAa,GAAG;AAAA,IACpC;AAAA,EACD;AAAA,EAEA,MAAc,cACb,aACA,KAC8B;AAC9B,UAAM,UAAU,KAAK,OAAO,aAAa,GAAG;AAC5C,UAAM,WAAW,MAAM,KAAK,qBAAqB,IAAI,OAAO;AAC5D,SAAK,WAAW;AAAA,MACf,2BAA2B,WAAW,MAAM,MAAM;AAAA,MAClD;AAAA,MACA;AAAA,IACD;AACA,WAAO;AAAA,EACR;AAAA,EAEA,aACC,aACA,KACA,OACgB;AAChB,SAAK,WAAW;AAAA,MACf,gDAAgD,WAAW;AAAA,MAC3D;AAAA,IACD;AACA,WAAO,KAAK,WAAW;AAAA,MAAM;AAAA,MAAa,MACzC,KAAK,cAAc,aAAa,KAAK,KAAK;AAAA,IAC3C;AAAA,EACD;AAAA,EAEA,MAAc,cACb,aACA,KACA,OACgB;AAChB,UAAM,UAAU,KAAK,OAAO,aAAa,GAAG;AAC5C,UAAM,KAAK,qBAAqB,IAAI,SAAS,KAAK;AAClD,SAAK,WAAW;AAAA,MACf;AAAA,MACA;AAAA,MACA;AAAA,IACD;AAAA,EACD;AAAA,EAEA,gBAAgB,aAAqB,KAA4B;AAChE,SAAK,WAAW;AAAA,MACf,iDAAiD,WAAW;AAAA,MAC5D;AAAA,IACD;AACA,WAAO,KAAK,WAAW;AAAA,MAAM;AAAA,MAAa,MACzC,KAAK,iBAAiB,aAAa,GAAG;AAAA,IACvC;AAAA,EACD;AAAA,EAEA,MAAc,iBACb,aACA,KACgB;AAChB,UAAM,UAAU,KAAK,OAAO,aAAa,GAAG;AAC5C,UAAM,KAAK,qBAAqB,OAAO,OAAO;AAC9C,SAAK,WAAW;AAAA,MACf;AAAA,MACA;AAAA,MACA;AAAA,IACD;AAAA,EACD;AAAA,EAEQ,OAAO,aAAqB,KAAqB;AACxD,WAAO,KAAK,UAAU,EAAE,aAAa,IAAI,CAAC;AAAA,EAC3C;AAAA,EAEQ,SAAS,KAAmD;AACnE,WAAO,KAAK,MAAM,GAAG;AAAA,EACtB;AACD;AAhHA;AAHa,wBAAN;AAAA,EADN,qBAAqB,YAAY,qBAAqB;AAAA,EAWpD;AAAA,EACA;AAAA,EACA;AAAA,GAZU;",
  "names": ["e"]
}
