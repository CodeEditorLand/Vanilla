{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/api/browser/mainThreadComments.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport type { CancellationToken } from \"../../../base/common/cancellation.js\";\nimport { Codicon } from \"../../../base/common/codicons.js\";\nimport { Emitter, type Event } from \"../../../base/common/event.js\";\nimport {\n\tDisposable,\n\tDisposableStore,\n\ttype IDisposable,\n} from \"../../../base/common/lifecycle.js\";\nimport { MarshalledId } from \"../../../base/common/marshallingIds.js\";\nimport { Schemas } from \"../../../base/common/network.js\";\nimport { URI, type UriComponents } from \"../../../base/common/uri.js\";\nimport { type IRange, Range } from \"../../../editor/common/core/range.js\";\nimport * as languages from \"../../../editor/common/languages.js\";\nimport { localize } from \"../../../nls.js\";\nimport type { ExtensionIdentifier } from \"../../../platform/extensions/common/extensions.js\";\nimport { SyncDescriptor } from \"../../../platform/instantiation/common/descriptors.js\";\nimport { Registry } from \"../../../platform/registry/common/platform.js\";\nimport { registerIcon } from \"../../../platform/theme/common/iconRegistry.js\";\nimport { IUriIdentityService } from \"../../../platform/uriIdentity/common/uriIdentity.js\";\nimport { ViewPaneContainer } from \"../../browser/parts/views/viewPaneContainer.js\";\nimport type { MarshalledCommentThread } from \"../../common/comments.js\";\nimport {\n\ttype IViewContainersRegistry,\n\tIViewDescriptorService,\n\ttype IViewsRegistry,\n\ttype ViewContainer,\n\tViewContainerLocation,\n\tExtensions as ViewExtensions,\n} from \"../../common/views.js\";\nimport {\n\ttype ICommentController,\n\tICommentService,\n} from \"../../contrib/comments/browser/commentService.js\";\nimport { revealCommentThread } from \"../../contrib/comments/browser/commentsController.js\";\nimport {\n\tCOMMENTS_VIEW_ID,\n\tCOMMENTS_VIEW_STORAGE_ID,\n\tCOMMENTS_VIEW_TITLE,\n} from \"../../contrib/comments/browser/commentsTreeViewer.js\";\nimport { CommentsPanel } from \"../../contrib/comments/browser/commentsView.js\";\nimport type { ICellRange } from \"../../contrib/notebook/common/notebookRange.js\";\nimport { IEditorService } from \"../../services/editor/common/editorService.js\";\nimport {\n\ttype IExtHostContext,\n\textHostNamedCustomer,\n} from \"../../services/extensions/common/extHostCustomers.js\";\nimport { IViewsService } from \"../../services/views/common/viewsService.js\";\nimport {\n\ttype CommentProviderFeatures,\n\ttype CommentThreadChanges,\n\ttype ExtHostCommentsShape,\n\tExtHostContext,\n\tMainContext,\n\ttype MainThreadCommentsShape,\n} from \"../common/extHost.protocol.js\";\n\nexport class MainThreadCommentThread<T> implements languages.CommentThread<T> {\n\tprivate _input?: languages.CommentInput;\n\tget input(): languages.CommentInput | undefined {\n\t\treturn this._input;\n\t}\n\n\tset input(value: languages.CommentInput | undefined) {\n\t\tthis._input = value;\n\t\tthis._onDidChangeInput.fire(value);\n\t}\n\n\tprivate readonly _onDidChangeInput = new Emitter<\n\t\tlanguages.CommentInput | undefined\n\t>();\n\tget onDidChangeInput(): Event<languages.CommentInput | undefined> {\n\t\treturn this._onDidChangeInput.event;\n\t}\n\n\tprivate _label: string | undefined;\n\n\tget label(): string | undefined {\n\t\treturn this._label;\n\t}\n\n\tset label(label: string | undefined) {\n\t\tthis._label = label;\n\t\tthis._onDidChangeLabel.fire(this._label);\n\t}\n\n\tprivate _contextValue: string | undefined;\n\n\tget contextValue(): string | undefined {\n\t\treturn this._contextValue;\n\t}\n\n\tset contextValue(context: string | undefined) {\n\t\tthis._contextValue = context;\n\t}\n\n\tprivate readonly _onDidChangeLabel = new Emitter<string | undefined>();\n\treadonly onDidChangeLabel: Event<string | undefined> =\n\t\tthis._onDidChangeLabel.event;\n\n\tprivate _comments: ReadonlyArray<languages.Comment> | undefined;\n\n\tpublic get comments(): ReadonlyArray<languages.Comment> | undefined {\n\t\treturn this._comments;\n\t}\n\n\tpublic set comments(newComments:\n\t\t| ReadonlyArray<languages.Comment>\n\t\t| undefined) {\n\t\tthis._comments = newComments;\n\t\tthis._onDidChangeComments.fire(this._comments);\n\t}\n\n\tprivate readonly _onDidChangeComments = new Emitter<\n\t\treadonly languages.Comment[] | undefined\n\t>();\n\tget onDidChangeComments(): Event<readonly languages.Comment[] | undefined> {\n\t\treturn this._onDidChangeComments.event;\n\t}\n\n\tset range(range: T | undefined) {\n\t\tthis._range = range;\n\t}\n\n\tget range(): T | undefined {\n\t\treturn this._range;\n\t}\n\n\tprivate readonly _onDidChangeCanReply = new Emitter<boolean>();\n\tget onDidChangeCanReply(): Event<boolean> {\n\t\treturn this._onDidChangeCanReply.event;\n\t}\n\tset canReply(state: boolean) {\n\t\tthis._canReply = state;\n\t\tthis._onDidChangeCanReply.fire(this._canReply);\n\t}\n\n\tget canReply() {\n\t\treturn this._canReply;\n\t}\n\n\tprivate _collapsibleState:\n\t\t| languages.CommentThreadCollapsibleState\n\t\t| undefined;\n\tget collapsibleState() {\n\t\treturn this._collapsibleState;\n\t}\n\n\tset collapsibleState(newState:\n\t\t| languages.CommentThreadCollapsibleState\n\t\t| undefined) {\n\t\tif (newState !== this._collapsibleState) {\n\t\t\tthis._collapsibleState = newState;\n\t\t\tthis._onDidChangeCollapsibleState.fire(this._collapsibleState);\n\t\t}\n\t}\n\n\tprivate _initialCollapsibleState:\n\t\t| languages.CommentThreadCollapsibleState\n\t\t| undefined;\n\tget initialCollapsibleState() {\n\t\treturn this._initialCollapsibleState;\n\t}\n\n\tprivate set initialCollapsibleState(initialCollapsibleState:\n\t\t| languages.CommentThreadCollapsibleState\n\t\t| undefined) {\n\t\tthis._initialCollapsibleState = initialCollapsibleState;\n\t\tif (this.collapsibleState === undefined) {\n\t\t\tthis.collapsibleState = this.initialCollapsibleState;\n\t\t}\n\t\tthis._onDidChangeInitialCollapsibleState.fire(initialCollapsibleState);\n\t}\n\n\tprivate readonly _onDidChangeCollapsibleState = new Emitter<\n\t\tlanguages.CommentThreadCollapsibleState | undefined\n\t>();\n\tpublic onDidChangeCollapsibleState =\n\t\tthis._onDidChangeCollapsibleState.event;\n\tprivate readonly _onDidChangeInitialCollapsibleState = new Emitter<\n\t\tlanguages.CommentThreadCollapsibleState | undefined\n\t>();\n\tpublic onDidChangeInitialCollapsibleState =\n\t\tthis._onDidChangeInitialCollapsibleState.event;\n\n\tprivate _isDisposed: boolean;\n\n\tget isDisposed(): boolean {\n\t\treturn this._isDisposed;\n\t}\n\n\tisDocumentCommentThread(): this is languages.CommentThread<IRange> {\n\t\treturn this._range === undefined || Range.isIRange(this._range);\n\t}\n\n\tprivate _state: languages.CommentThreadState | undefined;\n\tget state() {\n\t\treturn this._state;\n\t}\n\n\tset state(newState: languages.CommentThreadState | undefined) {\n\t\tthis._state = newState;\n\t\tthis._onDidChangeState.fire(this._state);\n\t}\n\n\tprivate _applicability: languages.CommentThreadApplicability | undefined;\n\n\tget applicability(): languages.CommentThreadApplicability | undefined {\n\t\treturn this._applicability;\n\t}\n\n\tset applicability(value: languages.CommentThreadApplicability | undefined) {\n\t\tthis._applicability = value;\n\t\tthis._onDidChangeApplicability.fire(value);\n\t}\n\n\tprivate readonly _onDidChangeApplicability = new Emitter<\n\t\tlanguages.CommentThreadApplicability | undefined\n\t>();\n\treadonly onDidChangeApplicability: Event<\n\t\tlanguages.CommentThreadApplicability | undefined\n\t> = this._onDidChangeApplicability.event;\n\n\tpublic get isTemplate(): boolean {\n\t\treturn this._isTemplate;\n\t}\n\n\tprivate readonly _onDidChangeState = new Emitter<\n\t\tlanguages.CommentThreadState | undefined\n\t>();\n\tpublic onDidChangeState = this._onDidChangeState.event;\n\n\tconstructor(\n\t\tpublic commentThreadHandle: number,\n\t\tpublic controllerHandle: number,\n\t\tpublic extensionId: string,\n\t\tpublic threadId: string,\n\t\tpublic resource: string,\n\t\tprivate _range: T | undefined,\n\t\tcomments: languages.Comment[] | undefined,\n\t\tprivate _canReply: boolean,\n\t\tprivate _isTemplate: boolean,\n\t\tpublic editorId?: string,\n\t) {\n\t\tthis._isDisposed = false;\n\t\tif (_isTemplate) {\n\t\t\tthis.comments = [];\n\t\t} else if (comments) {\n\t\t\tthis._comments = comments;\n\t\t}\n\t}\n\n\tbatchUpdate(changes: CommentThreadChanges<T>) {\n\t\tconst modified = (value: keyof CommentThreadChanges): boolean =>\n\t\t\tObject.prototype.hasOwnProperty.call(changes, value);\n\n\t\tif (modified(\"range\")) {\n\t\t\tthis._range = changes.range!;\n\t\t}\n\t\tif (modified(\"label\")) {\n\t\t\tthis._label = changes.label;\n\t\t}\n\t\tif (modified(\"contextValue\")) {\n\t\t\tthis._contextValue =\n\t\t\t\tchanges.contextValue === null\n\t\t\t\t\t? undefined\n\t\t\t\t\t: changes.contextValue;\n\t\t}\n\t\tif (modified(\"comments\")) {\n\t\t\tthis.comments = changes.comments;\n\t\t}\n\t\tif (modified(\"collapseState\")) {\n\t\t\tthis.initialCollapsibleState = changes.collapseState;\n\t\t}\n\t\tif (modified(\"canReply\")) {\n\t\t\tthis.canReply = changes.canReply!;\n\t\t}\n\t\tif (modified(\"state\")) {\n\t\t\tthis.state = changes.state!;\n\t\t}\n\t\tif (modified(\"applicability\")) {\n\t\t\tthis.applicability = changes.applicability!;\n\t\t}\n\t\tif (modified(\"isTemplate\")) {\n\t\t\tthis._isTemplate = changes.isTemplate!;\n\t\t}\n\t}\n\n\thasComments(): boolean {\n\t\treturn !!this.comments && this.comments.length > 0;\n\t}\n\n\tdispose() {\n\t\tthis._isDisposed = true;\n\t\tthis._onDidChangeCollapsibleState.dispose();\n\t\tthis._onDidChangeComments.dispose();\n\t\tthis._onDidChangeInput.dispose();\n\t\tthis._onDidChangeLabel.dispose();\n\t\tthis._onDidChangeState.dispose();\n\t}\n\n\ttoJSON(): MarshalledCommentThread {\n\t\treturn {\n\t\t\t$mid: MarshalledId.CommentThread,\n\t\t\tcommentControlHandle: this.controllerHandle,\n\t\t\tcommentThreadHandle: this.commentThreadHandle,\n\t\t};\n\t}\n}\n\nexport class MainThreadCommentController implements ICommentController {\n\tget handle(): number {\n\t\treturn this._handle;\n\t}\n\n\tget id(): string {\n\t\treturn this._id;\n\t}\n\n\tget contextValue(): string {\n\t\treturn this._id;\n\t}\n\n\tget proxy(): ExtHostCommentsShape {\n\t\treturn this._proxy;\n\t}\n\n\tget label(): string {\n\t\treturn this._label;\n\t}\n\n\tprivate _reactions: languages.CommentReaction[] | undefined;\n\n\tget reactions() {\n\t\treturn this._reactions;\n\t}\n\n\tset reactions(reactions: languages.CommentReaction[] | undefined) {\n\t\tthis._reactions = reactions;\n\t}\n\n\tget options() {\n\t\treturn this._features.options;\n\t}\n\n\tprivate readonly _threads: Map<\n\t\tnumber,\n\t\tMainThreadCommentThread<IRange | ICellRange>\n\t> = new Map<number, MainThreadCommentThread<IRange | ICellRange>>();\n\tpublic activeEditingCommentThread?: MainThreadCommentThread<\n\t\tIRange | ICellRange\n\t>;\n\n\tget features(): CommentProviderFeatures {\n\t\treturn this._features;\n\t}\n\n\tget owner() {\n\t\treturn this._id;\n\t}\n\n\tconstructor(\n\t\tprivate readonly _proxy: ExtHostCommentsShape,\n\t\tprivate readonly _commentService: ICommentService,\n\t\tprivate readonly _handle: number,\n\t\tprivate readonly _uniqueId: string,\n\t\tprivate readonly _id: string,\n\t\tprivate readonly _label: string,\n\t\tprivate _features: CommentProviderFeatures,\n\t) {}\n\n\tasync setActiveCommentAndThread(\n\t\tcommentInfo:\n\t\t\t| { thread: languages.CommentThread; comment?: languages.Comment }\n\t\t\t| undefined,\n\t) {\n\t\treturn this._proxy.$setActiveComment(\n\t\t\tthis._handle,\n\t\t\tcommentInfo\n\t\t\t\t? {\n\t\t\t\t\t\tcommentThreadHandle:\n\t\t\t\t\t\t\tcommentInfo.thread.commentThreadHandle,\n\t\t\t\t\t\tuniqueIdInThread: commentInfo.comment?.uniqueIdInThread,\n\t\t\t\t\t}\n\t\t\t\t: undefined,\n\t\t);\n\t}\n\n\tupdateFeatures(features: CommentProviderFeatures) {\n\t\tthis._features = features;\n\t}\n\n\tcreateCommentThread(\n\t\textensionId: string,\n\t\tcommentThreadHandle: number,\n\t\tthreadId: string,\n\t\tresource: UriComponents,\n\t\trange: IRange | ICellRange | undefined,\n\t\tcomments: languages.Comment[],\n\t\tisTemplate: boolean,\n\t\teditorId?: string,\n\t): languages.CommentThread<IRange | ICellRange> {\n\t\tconst thread = new MainThreadCommentThread(\n\t\t\tcommentThreadHandle,\n\t\t\tthis.handle,\n\t\t\textensionId,\n\t\t\tthreadId,\n\t\t\tURI.revive(resource).toString(),\n\t\t\trange,\n\t\t\tcomments,\n\t\t\ttrue,\n\t\t\tisTemplate,\n\t\t\teditorId,\n\t\t);\n\n\t\tthis._threads.set(commentThreadHandle, thread);\n\n\t\tif (thread.isDocumentCommentThread()) {\n\t\t\tthis._commentService.updateComments(this._uniqueId, {\n\t\t\t\tadded: [thread],\n\t\t\t\tremoved: [],\n\t\t\t\tchanged: [],\n\t\t\t\tpending: [],\n\t\t\t});\n\t\t} else {\n\t\t\tthis._commentService.updateNotebookComments(this._uniqueId, {\n\t\t\t\tadded: [thread as MainThreadCommentThread<ICellRange>],\n\t\t\t\tremoved: [],\n\t\t\t\tchanged: [],\n\t\t\t\tpending: [],\n\t\t\t});\n\t\t}\n\n\t\treturn thread;\n\t}\n\n\tupdateCommentThread(\n\t\tcommentThreadHandle: number,\n\t\tthreadId: string,\n\t\tresource: UriComponents,\n\t\tchanges: CommentThreadChanges,\n\t): void {\n\t\tconst thread = this.getKnownThread(commentThreadHandle);\n\t\tthread.batchUpdate(changes);\n\n\t\tif (thread.isDocumentCommentThread()) {\n\t\t\tthis._commentService.updateComments(this._uniqueId, {\n\t\t\t\tadded: [],\n\t\t\t\tremoved: [],\n\t\t\t\tchanged: [thread],\n\t\t\t\tpending: [],\n\t\t\t});\n\t\t} else {\n\t\t\tthis._commentService.updateNotebookComments(this._uniqueId, {\n\t\t\t\tadded: [],\n\t\t\t\tremoved: [],\n\t\t\t\tchanged: [thread as MainThreadCommentThread<ICellRange>],\n\t\t\t\tpending: [],\n\t\t\t});\n\t\t}\n\t}\n\n\tdeleteCommentThread(commentThreadHandle: number) {\n\t\tconst thread = this.getKnownThread(commentThreadHandle);\n\t\tthis._threads.delete(commentThreadHandle);\n\t\tthread.dispose();\n\n\t\tif (thread.isDocumentCommentThread()) {\n\t\t\tthis._commentService.updateComments(this._uniqueId, {\n\t\t\t\tadded: [],\n\t\t\t\tremoved: [thread],\n\t\t\t\tchanged: [],\n\t\t\t\tpending: [],\n\t\t\t});\n\t\t} else {\n\t\t\tthis._commentService.updateNotebookComments(this._uniqueId, {\n\t\t\t\tadded: [],\n\t\t\t\tremoved: [thread as MainThreadCommentThread<ICellRange>],\n\t\t\t\tchanged: [],\n\t\t\t\tpending: [],\n\t\t\t});\n\t\t}\n\t}\n\n\tdeleteCommentThreadMain(commentThreadId: string) {\n\t\tthis._threads.forEach((thread) => {\n\t\t\tif (thread.threadId === commentThreadId) {\n\t\t\t\tthis._proxy.$deleteCommentThread(\n\t\t\t\t\tthis._handle,\n\t\t\t\t\tthread.commentThreadHandle,\n\t\t\t\t);\n\t\t\t}\n\t\t});\n\t}\n\n\tupdateInput(input: string) {\n\t\tconst thread = this.activeEditingCommentThread;\n\n\t\tif (thread && thread.input) {\n\t\t\tconst commentInput = thread.input;\n\t\t\tcommentInput.value = input;\n\t\t\tthread.input = commentInput;\n\t\t}\n\t}\n\n\tupdateCommentingRanges(\n\t\tresourceHints?: languages.CommentingRangeResourceHint,\n\t) {\n\t\tthis._commentService.updateCommentingRanges(\n\t\t\tthis._uniqueId,\n\t\t\tresourceHints,\n\t\t);\n\t}\n\n\tprivate getKnownThread(\n\t\tcommentThreadHandle: number,\n\t): MainThreadCommentThread<IRange | ICellRange> {\n\t\tconst thread = this._threads.get(commentThreadHandle);\n\t\tif (!thread) {\n\t\t\tthrow new Error(\"unknown thread\");\n\t\t}\n\t\treturn thread;\n\t}\n\n\tasync getDocumentComments(resource: URI, token: CancellationToken) {\n\t\tif (resource.scheme === Schemas.vscodeNotebookCell) {\n\t\t\treturn {\n\t\t\t\tuniqueOwner: this._uniqueId,\n\t\t\t\tlabel: this.label,\n\t\t\t\tthreads: [],\n\t\t\t\tcommentingRanges: {\n\t\t\t\t\tresource: resource,\n\t\t\t\t\tranges: [],\n\t\t\t\t\tfileComments: false,\n\t\t\t\t},\n\t\t\t};\n\t\t}\n\n\t\tconst ret: languages.CommentThread<IRange>[] = [];\n\t\tfor (const thread of [...this._threads.keys()]) {\n\t\t\tconst commentThread = this._threads.get(thread)!;\n\t\t\tif (commentThread.resource === resource.toString()) {\n\t\t\t\tif (commentThread.isDocumentCommentThread()) {\n\t\t\t\t\tret.push(commentThread);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tconst commentingRanges = await this._proxy.$provideCommentingRanges(\n\t\t\tthis.handle,\n\t\t\tresource,\n\t\t\ttoken,\n\t\t);\n\n\t\treturn {\n\t\t\tuniqueOwner: this._uniqueId,\n\t\t\tlabel: this.label,\n\t\t\tthreads: ret,\n\t\t\tcommentingRanges: {\n\t\t\t\tresource: resource,\n\t\t\t\tranges: commentingRanges?.ranges || [],\n\t\t\t\tfileComments: !!commentingRanges?.fileComments,\n\t\t\t},\n\t\t};\n\t}\n\n\tasync getNotebookComments(resource: URI, token: CancellationToken) {\n\t\tif (resource.scheme !== Schemas.vscodeNotebookCell) {\n\t\t\treturn {\n\t\t\t\tuniqueOwner: this._uniqueId,\n\t\t\t\tlabel: this.label,\n\t\t\t\tthreads: [],\n\t\t\t};\n\t\t}\n\n\t\tconst ret: languages.CommentThread<ICellRange>[] = [];\n\t\tfor (const thread of [...this._threads.keys()]) {\n\t\t\tconst commentThread = this._threads.get(thread)!;\n\t\t\tif (commentThread.resource === resource.toString()) {\n\t\t\t\tif (!commentThread.isDocumentCommentThread()) {\n\t\t\t\t\tret.push(\n\t\t\t\t\t\tcommentThread as languages.CommentThread<ICellRange>,\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn {\n\t\t\tuniqueOwner: this._uniqueId,\n\t\t\tlabel: this.label,\n\t\t\tthreads: ret,\n\t\t};\n\t}\n\n\tasync toggleReaction(\n\t\turi: URI,\n\t\tthread: languages.CommentThread,\n\t\tcomment: languages.Comment,\n\t\treaction: languages.CommentReaction,\n\t\ttoken: CancellationToken,\n\t): Promise<void> {\n\t\treturn this._proxy.$toggleReaction(\n\t\t\tthis._handle,\n\t\t\tthread.commentThreadHandle,\n\t\t\turi,\n\t\t\tcomment,\n\t\t\treaction,\n\t\t);\n\t}\n\n\tgetAllComments(): MainThreadCommentThread<IRange | ICellRange>[] {\n\t\tconst ret: MainThreadCommentThread<IRange | ICellRange>[] = [];\n\t\tfor (const thread of [...this._threads.keys()]) {\n\t\t\tret.push(this._threads.get(thread)!);\n\t\t}\n\n\t\treturn ret;\n\t}\n\n\tcreateCommentThreadTemplate(\n\t\tresource: UriComponents,\n\t\trange: IRange | undefined,\n\t\teditorId?: string,\n\t): Promise<void> {\n\t\treturn this._proxy.$createCommentThreadTemplate(\n\t\t\tthis.handle,\n\t\t\tresource,\n\t\t\trange,\n\t\t\teditorId,\n\t\t);\n\t}\n\n\tasync updateCommentThreadTemplate(threadHandle: number, range: IRange) {\n\t\tawait this._proxy.$updateCommentThreadTemplate(\n\t\t\tthis.handle,\n\t\t\tthreadHandle,\n\t\t\trange,\n\t\t);\n\t}\n\n\ttoJSON(): any {\n\t\treturn {\n\t\t\t$mid: MarshalledId.CommentController,\n\t\t\thandle: this.handle,\n\t\t};\n\t}\n}\n\nconst commentsViewIcon = registerIcon(\n\t\"comments-view-icon\",\n\tCodicon.commentDiscussion,\n\tlocalize(\"commentsViewIcon\", \"View icon of the comments view.\"),\n);\n\n@extHostNamedCustomer(MainContext.MainThreadComments)\nexport class MainThreadComments\n\textends Disposable\n\timplements MainThreadCommentsShape\n{\n\tprivate readonly _proxy: ExtHostCommentsShape;\n\n\tprivate _handlers = new Map<number, string>();\n\tprivate _commentControllers = new Map<\n\t\tnumber,\n\t\tMainThreadCommentController\n\t>();\n\n\tprivate _activeEditingCommentThread?: MainThreadCommentThread<\n\t\tIRange | ICellRange\n\t>;\n\tprivate readonly _activeEditingCommentThreadDisposables = this._register(\n\t\tnew DisposableStore(),\n\t);\n\n\tprivate _openViewListener: IDisposable | null = null;\n\n\tconstructor(\n\t\textHostContext: IExtHostContext,\n\t\t@ICommentService private readonly _commentService: ICommentService,\n\t\t@IViewsService private readonly _viewsService: IViewsService,\n\t\t@IViewDescriptorService\n\t\tprivate readonly _viewDescriptorService: IViewDescriptorService,\n\t\t@IUriIdentityService\n\t\tprivate readonly _uriIdentityService: IUriIdentityService,\n\t\t@IEditorService private readonly _editorService: IEditorService,\n\t) {\n\t\tsuper();\n\t\tthis._proxy = extHostContext.getProxy(ExtHostContext.ExtHostComments);\n\t\tthis._commentService.unregisterCommentController();\n\n\t\tthis._register(\n\t\t\tthis._commentService.onDidChangeActiveEditingCommentThread(\n\t\t\t\tasync (thread) => {\n\t\t\t\t\tconst handle = (\n\t\t\t\t\t\tthread as MainThreadCommentThread<IRange | ICellRange>\n\t\t\t\t\t).controllerHandle;\n\t\t\t\t\tconst controller = this._commentControllers.get(handle);\n\n\t\t\t\t\tif (!controller) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tthis._activeEditingCommentThreadDisposables.clear();\n\t\t\t\t\tthis._activeEditingCommentThread =\n\t\t\t\t\t\tthread as MainThreadCommentThread<IRange | ICellRange>;\n\t\t\t\t\tcontroller.activeEditingCommentThread =\n\t\t\t\t\t\tthis._activeEditingCommentThread;\n\t\t\t\t},\n\t\t\t),\n\t\t);\n\t}\n\n\t$registerCommentController(\n\t\thandle: number,\n\t\tid: string,\n\t\tlabel: string,\n\t\textensionId: string,\n\t): void {\n\t\tconst providerId = `${id}-${extensionId}`;\n\t\tthis._handlers.set(handle, providerId);\n\n\t\tconst provider = new MainThreadCommentController(\n\t\t\tthis._proxy,\n\t\t\tthis._commentService,\n\t\t\thandle,\n\t\t\tproviderId,\n\t\t\tid,\n\t\t\tlabel,\n\t\t\t{},\n\t\t);\n\t\tthis._commentService.registerCommentController(providerId, provider);\n\t\tthis._commentControllers.set(handle, provider);\n\n\t\tconst commentsPanelAlreadyConstructed =\n\t\t\t!!this._viewDescriptorService.getViewDescriptorById(\n\t\t\t\tCOMMENTS_VIEW_ID,\n\t\t\t);\n\t\tif (!commentsPanelAlreadyConstructed) {\n\t\t\tthis.registerView(commentsPanelAlreadyConstructed);\n\t\t}\n\t\tthis.registerViewListeners(commentsPanelAlreadyConstructed);\n\t\tthis._commentService.setWorkspaceComments(String(handle), []);\n\t}\n\n\t$unregisterCommentController(handle: number): void {\n\t\tconst providerId = this._handlers.get(handle);\n\t\tthis._handlers.delete(handle);\n\t\tthis._commentControllers.delete(handle);\n\n\t\tif (typeof providerId !== \"string\") {\n\t\t\treturn;\n\t\t\t// throw new Error('unknown handler');\n\t\t} else {\n\t\t\tthis._commentService.unregisterCommentController(providerId);\n\t\t}\n\t}\n\n\t$updateCommentControllerFeatures(\n\t\thandle: number,\n\t\tfeatures: CommentProviderFeatures,\n\t): void {\n\t\tconst provider = this._commentControllers.get(handle);\n\n\t\tif (!provider) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\tprovider.updateFeatures(features);\n\t}\n\n\t$createCommentThread(\n\t\thandle: number,\n\t\tcommentThreadHandle: number,\n\t\tthreadId: string,\n\t\tresource: UriComponents,\n\t\trange: IRange | ICellRange | undefined,\n\t\tcomments: languages.Comment[],\n\t\textensionId: ExtensionIdentifier,\n\t\tisTemplate: boolean,\n\t\teditorId?: string,\n\t): languages.CommentThread<IRange | ICellRange> | undefined {\n\t\tconst provider = this._commentControllers.get(handle);\n\n\t\tif (!provider) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\treturn provider.createCommentThread(\n\t\t\textensionId.value,\n\t\t\tcommentThreadHandle,\n\t\t\tthreadId,\n\t\t\tresource,\n\t\t\trange,\n\t\t\tcomments,\n\t\t\tisTemplate,\n\t\t\teditorId,\n\t\t);\n\t}\n\n\t$updateCommentThread(\n\t\thandle: number,\n\t\tcommentThreadHandle: number,\n\t\tthreadId: string,\n\t\tresource: UriComponents,\n\t\tchanges: CommentThreadChanges,\n\t): void {\n\t\tconst provider = this._commentControllers.get(handle);\n\n\t\tif (!provider) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\treturn provider.updateCommentThread(\n\t\t\tcommentThreadHandle,\n\t\t\tthreadId,\n\t\t\tresource,\n\t\t\tchanges,\n\t\t);\n\t}\n\n\t$deleteCommentThread(handle: number, commentThreadHandle: number) {\n\t\tconst provider = this._commentControllers.get(handle);\n\n\t\tif (!provider) {\n\t\t\treturn;\n\t\t}\n\n\t\treturn provider.deleteCommentThread(commentThreadHandle);\n\t}\n\n\t$updateCommentingRanges(\n\t\thandle: number,\n\t\tresourceHints?: languages.CommentingRangeResourceHint,\n\t) {\n\t\tconst provider = this._commentControllers.get(handle);\n\n\t\tif (!provider) {\n\t\t\treturn;\n\t\t}\n\n\t\tprovider.updateCommentingRanges(resourceHints);\n\t}\n\n\tasync $revealCommentThread(\n\t\thandle: number,\n\t\tcommentThreadHandle: number,\n\t\tcommentUniqueIdInThread: number,\n\t\toptions: languages.CommentThreadRevealOptions,\n\t): Promise<void> {\n\t\tconst provider = this._commentControllers.get(handle);\n\n\t\tif (!provider) {\n\t\t\treturn Promise.resolve();\n\t\t}\n\n\t\tconst thread = provider\n\t\t\t.getAllComments()\n\t\t\t.find(\n\t\t\t\t(thread) => thread.commentThreadHandle === commentThreadHandle,\n\t\t\t);\n\t\tif (!thread || !thread.isDocumentCommentThread()) {\n\t\t\treturn Promise.resolve();\n\t\t}\n\n\t\tconst comment = thread.comments?.find(\n\t\t\t(comment) => comment.uniqueIdInThread === commentUniqueIdInThread,\n\t\t);\n\n\t\trevealCommentThread(\n\t\t\tthis._commentService,\n\t\t\tthis._editorService,\n\t\t\tthis._uriIdentityService,\n\t\t\tthread,\n\t\t\tcomment,\n\t\t\toptions.focusReply,\n\t\t\tundefined,\n\t\t\toptions.preserveFocus,\n\t\t);\n\t}\n\n\tasync $hideCommentThread(\n\t\thandle: number,\n\t\tcommentThreadHandle: number,\n\t): Promise<void> {\n\t\tconst provider = this._commentControllers.get(handle);\n\n\t\tif (!provider) {\n\t\t\treturn Promise.resolve();\n\t\t}\n\n\t\tconst thread = provider\n\t\t\t.getAllComments()\n\t\t\t.find(\n\t\t\t\t(thread) => thread.commentThreadHandle === commentThreadHandle,\n\t\t\t);\n\t\tif (!thread || !thread.isDocumentCommentThread()) {\n\t\t\treturn Promise.resolve();\n\t\t}\n\n\t\tthread.collapsibleState =\n\t\t\tlanguages.CommentThreadCollapsibleState.Collapsed;\n\t}\n\n\tprivate registerView(commentsViewAlreadyRegistered: boolean) {\n\t\tif (!commentsViewAlreadyRegistered) {\n\t\t\tconst VIEW_CONTAINER: ViewContainer =\n\t\t\t\tRegistry.as<IViewContainersRegistry>(\n\t\t\t\t\tViewExtensions.ViewContainersRegistry,\n\t\t\t\t).registerViewContainer(\n\t\t\t\t\t{\n\t\t\t\t\t\tid: COMMENTS_VIEW_ID,\n\t\t\t\t\t\ttitle: COMMENTS_VIEW_TITLE,\n\t\t\t\t\t\tctorDescriptor: new SyncDescriptor(ViewPaneContainer, [\n\t\t\t\t\t\t\tCOMMENTS_VIEW_ID,\n\t\t\t\t\t\t\t{ mergeViewWithContainerWhenSingleView: true },\n\t\t\t\t\t\t]),\n\t\t\t\t\t\tstorageId: COMMENTS_VIEW_STORAGE_ID,\n\t\t\t\t\t\thideIfEmpty: true,\n\t\t\t\t\t\ticon: commentsViewIcon,\n\t\t\t\t\t\torder: 10,\n\t\t\t\t\t},\n\t\t\t\t\tViewContainerLocation.Panel,\n\t\t\t\t);\n\n\t\t\tRegistry.as<IViewsRegistry>(\n\t\t\t\tViewExtensions.ViewsRegistry,\n\t\t\t).registerViews(\n\t\t\t\t[\n\t\t\t\t\t{\n\t\t\t\t\t\tid: COMMENTS_VIEW_ID,\n\t\t\t\t\t\tname: COMMENTS_VIEW_TITLE,\n\t\t\t\t\t\tcanToggleVisibility: false,\n\t\t\t\t\t\tctorDescriptor: new SyncDescriptor(CommentsPanel),\n\t\t\t\t\t\tcanMoveView: true,\n\t\t\t\t\t\tcontainerIcon: commentsViewIcon,\n\t\t\t\t\t\tfocusCommand: {\n\t\t\t\t\t\t\tid: \"workbench.action.focusCommentsPanel\",\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\tVIEW_CONTAINER,\n\t\t\t);\n\t\t}\n\t}\n\n\tprivate setComments() {\n\t\t[...this._commentControllers.keys()].forEach((handle) => {\n\t\t\tconst threads = this._commentControllers\n\t\t\t\t.get(handle)!\n\t\t\t\t.getAllComments();\n\n\t\t\tif (threads.length) {\n\t\t\t\tconst providerId = this.getHandler(handle);\n\t\t\t\tthis._commentService.setWorkspaceComments(providerId, threads);\n\t\t\t}\n\t\t});\n\t}\n\n\tprivate registerViewOpenedListener() {\n\t\tif (!this._openViewListener) {\n\t\t\tthis._openViewListener =\n\t\t\t\tthis._viewsService.onDidChangeViewVisibility((e) => {\n\t\t\t\t\tif (e.id === COMMENTS_VIEW_ID && e.visible) {\n\t\t\t\t\t\tthis.setComments();\n\t\t\t\t\t\tif (this._openViewListener) {\n\t\t\t\t\t\t\tthis._openViewListener.dispose();\n\t\t\t\t\t\t\tthis._openViewListener = null;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t}\n\t}\n\n\t/**\n\t * If the comments view has never been opened, the constructor for it has not yet run so it has\n\t * no listeners for comment threads being set or updated. Listen for the view opening for the\n\t * first time and send it comments then.\n\t */\n\tprivate registerViewListeners(commentsPanelAlreadyConstructed: boolean) {\n\t\tif (!commentsPanelAlreadyConstructed) {\n\t\t\tthis.registerViewOpenedListener();\n\t\t}\n\n\t\tthis._register(\n\t\t\tthis._viewDescriptorService.onDidChangeContainer((e) => {\n\t\t\t\tif (e.views.find((view) => view.id === COMMENTS_VIEW_ID)) {\n\t\t\t\t\tthis.setComments();\n\t\t\t\t\tthis.registerViewOpenedListener();\n\t\t\t\t}\n\t\t\t}),\n\t\t);\n\t\tthis._register(\n\t\t\tthis._viewDescriptorService.onDidChangeContainerLocation((e) => {\n\t\t\t\tconst commentsContainer =\n\t\t\t\t\tthis._viewDescriptorService.getViewContainerByViewId(\n\t\t\t\t\t\tCOMMENTS_VIEW_ID,\n\t\t\t\t\t);\n\t\t\t\tif (e.viewContainer.id === commentsContainer?.id) {\n\t\t\t\t\tthis.setComments();\n\t\t\t\t\tthis.registerViewOpenedListener();\n\t\t\t\t}\n\t\t\t}),\n\t\t);\n\t}\n\n\tprivate getHandler(handle: number) {\n\t\tif (!this._handlers.has(handle)) {\n\t\t\tthrow new Error(\"Unknown handler\");\n\t\t}\n\t\treturn this._handlers.get(handle)!;\n\t}\n}\n"],
  "mappings": "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",
  "names": ["thread", "comment"]
}
