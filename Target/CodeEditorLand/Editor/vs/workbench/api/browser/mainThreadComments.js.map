{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/api/browser/mainThreadComments.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CancellationToken } from '../../../base/common/cancellation.js';\nimport { Emitter, Event } from '../../../base/common/event.js';\nimport { Disposable, DisposableStore, IDisposable } from '../../../base/common/lifecycle.js';\nimport { URI, UriComponents } from '../../../base/common/uri.js';\nimport { IRange, Range } from '../../../editor/common/core/range.js';\nimport * as languages from '../../../editor/common/languages.js';\nimport { ExtensionIdentifier } from '../../../platform/extensions/common/extensions.js';\nimport { Registry } from '../../../platform/registry/common/platform.js';\nimport { extHostNamedCustomer, IExtHostContext } from '../../services/extensions/common/extHostCustomers.js';\nimport { ICommentController, ICommentService } from '../../contrib/comments/browser/commentService.js';\nimport { CommentsPanel } from '../../contrib/comments/browser/commentsView.js';\nimport { CommentProviderFeatures, ExtHostCommentsShape, ExtHostContext, MainContext, MainThreadCommentsShape, CommentThreadChanges } from '../common/extHost.protocol.js';\nimport { COMMENTS_VIEW_ID, COMMENTS_VIEW_STORAGE_ID, COMMENTS_VIEW_TITLE } from '../../contrib/comments/browser/commentsTreeViewer.js';\nimport { ViewContainer, IViewContainersRegistry, Extensions as ViewExtensions, ViewContainerLocation, IViewsRegistry, IViewDescriptorService } from '../../common/views.js';\nimport { SyncDescriptor } from '../../../platform/instantiation/common/descriptors.js';\nimport { ViewPaneContainer } from '../../browser/parts/views/viewPaneContainer.js';\nimport { Codicon } from '../../../base/common/codicons.js';\nimport { registerIcon } from '../../../platform/theme/common/iconRegistry.js';\nimport { localize } from '../../../nls.js';\nimport { MarshalledId } from '../../../base/common/marshallingIds.js';\nimport { ICellRange } from '../../contrib/notebook/common/notebookRange.js';\nimport { Schemas } from '../../../base/common/network.js';\nimport { IViewsService } from '../../services/views/common/viewsService.js';\nimport { MarshalledCommentThread } from '../../common/comments.js';\nimport { revealCommentThread } from '../../contrib/comments/browser/commentsController.js';\nimport { IEditorService } from '../../services/editor/common/editorService.js';\nimport { IUriIdentityService } from '../../../platform/uriIdentity/common/uriIdentity.js';\n\nexport class MainThreadCommentThread<T> implements languages.CommentThread<T> {\n\tprivate _input?: languages.CommentInput;\n\tget input(): languages.CommentInput | undefined {\n\t\treturn this._input;\n\t}\n\n\tset input(value: languages.CommentInput | undefined) {\n\t\tthis._input = value;\n\t\tthis._onDidChangeInput.fire(value);\n\t}\n\n\tprivate readonly _onDidChangeInput = new Emitter<languages.CommentInput | undefined>();\n\tget onDidChangeInput(): Event<languages.CommentInput | undefined> { return this._onDidChangeInput.event; }\n\n\tprivate _label: string | undefined;\n\n\tget label(): string | undefined {\n\t\treturn this._label;\n\t}\n\n\tset label(label: string | undefined) {\n\t\tthis._label = label;\n\t\tthis._onDidChangeLabel.fire(this._label);\n\t}\n\n\tprivate _contextValue: string | undefined;\n\n\tget contextValue(): string | undefined {\n\t\treturn this._contextValue;\n\t}\n\n\tset contextValue(context: string | undefined) {\n\t\tthis._contextValue = context;\n\t}\n\n\tprivate readonly _onDidChangeLabel = new Emitter<string | undefined>();\n\treadonly onDidChangeLabel: Event<string | undefined> = this._onDidChangeLabel.event;\n\n\tprivate _comments: ReadonlyArray<languages.Comment> | undefined;\n\n\tpublic get comments(): ReadonlyArray<languages.Comment> | undefined {\n\t\treturn this._comments;\n\t}\n\n\tpublic set comments(newComments: ReadonlyArray<languages.Comment> | undefined) {\n\t\tthis._comments = newComments;\n\t\tthis._onDidChangeComments.fire(this._comments);\n\t}\n\n\tprivate readonly _onDidChangeComments = new Emitter<readonly languages.Comment[] | undefined>();\n\tget onDidChangeComments(): Event<readonly languages.Comment[] | undefined> { return this._onDidChangeComments.event; }\n\n\tset range(range: T | undefined) {\n\t\tthis._range = range;\n\t}\n\n\tget range(): T | undefined {\n\t\treturn this._range;\n\t}\n\n\tprivate readonly _onDidChangeCanReply = new Emitter<boolean>();\n\tget onDidChangeCanReply(): Event<boolean> { return this._onDidChangeCanReply.event; }\n\tset canReply(state: boolean) {\n\t\tthis._canReply = state;\n\t\tthis._onDidChangeCanReply.fire(this._canReply);\n\t}\n\n\tget canReply() {\n\t\treturn this._canReply;\n\t}\n\n\tprivate _collapsibleState: languages.CommentThreadCollapsibleState | undefined;\n\tget collapsibleState() {\n\t\treturn this._collapsibleState;\n\t}\n\n\tset collapsibleState(newState: languages.CommentThreadCollapsibleState | undefined) {\n\t\tif (newState !== this._collapsibleState) {\n\t\t\tthis._collapsibleState = newState;\n\t\t\tthis._onDidChangeCollapsibleState.fire(this._collapsibleState);\n\t\t}\n\t}\n\n\tprivate _initialCollapsibleState: languages.CommentThreadCollapsibleState | undefined;\n\tget initialCollapsibleState() {\n\t\treturn this._initialCollapsibleState;\n\t}\n\n\tprivate set initialCollapsibleState(initialCollapsibleState: languages.CommentThreadCollapsibleState | undefined) {\n\t\tthis._initialCollapsibleState = initialCollapsibleState;\n\t\tif (this.collapsibleState === undefined) {\n\t\t\tthis.collapsibleState = this.initialCollapsibleState;\n\t\t}\n\t\tthis._onDidChangeInitialCollapsibleState.fire(initialCollapsibleState);\n\t}\n\n\tprivate readonly _onDidChangeCollapsibleState = new Emitter<languages.CommentThreadCollapsibleState | undefined>();\n\tpublic onDidChangeCollapsibleState = this._onDidChangeCollapsibleState.event;\n\tprivate readonly _onDidChangeInitialCollapsibleState = new Emitter<languages.CommentThreadCollapsibleState | undefined>();\n\tpublic onDidChangeInitialCollapsibleState = this._onDidChangeInitialCollapsibleState.event;\n\n\tprivate _isDisposed: boolean;\n\n\tget isDisposed(): boolean {\n\t\treturn this._isDisposed;\n\t}\n\n\tisDocumentCommentThread(): this is languages.CommentThread<IRange> {\n\t\treturn this._range === undefined || Range.isIRange(this._range);\n\t}\n\n\tprivate _state: languages.CommentThreadState | undefined;\n\tget state() {\n\t\treturn this._state;\n\t}\n\n\tset state(newState: languages.CommentThreadState | undefined) {\n\t\tthis._state = newState;\n\t\tthis._onDidChangeState.fire(this._state);\n\t}\n\n\tprivate _applicability: languages.CommentThreadApplicability | undefined;\n\n\tget applicability(): languages.CommentThreadApplicability | undefined {\n\t\treturn this._applicability;\n\t}\n\n\tset applicability(value: languages.CommentThreadApplicability | undefined) {\n\t\tthis._applicability = value;\n\t\tthis._onDidChangeApplicability.fire(value);\n\t}\n\n\tprivate readonly _onDidChangeApplicability = new Emitter<languages.CommentThreadApplicability | undefined>();\n\treadonly onDidChangeApplicability: Event<languages.CommentThreadApplicability | undefined> = this._onDidChangeApplicability.event;\n\n\tpublic get isTemplate(): boolean {\n\t\treturn this._isTemplate;\n\t}\n\n\tprivate readonly _onDidChangeState = new Emitter<languages.CommentThreadState | undefined>();\n\tpublic onDidChangeState = this._onDidChangeState.event;\n\n\tconstructor(\n\t\tpublic commentThreadHandle: number,\n\t\tpublic controllerHandle: number,\n\t\tpublic extensionId: string,\n\t\tpublic threadId: string,\n\t\tpublic resource: string,\n\t\tprivate _range: T | undefined,\n\t\tcomments: languages.Comment[] | undefined,\n\t\tprivate _canReply: boolean,\n\t\tprivate _isTemplate: boolean,\n\t\tpublic editorId?: string\n\t) {\n\t\tthis._isDisposed = false;\n\t\tif (_isTemplate) {\n\t\t\tthis.comments = [];\n\t\t} else if (comments) {\n\t\t\tthis._comments = comments;\n\t\t}\n\t}\n\n\tbatchUpdate(changes: CommentThreadChanges<T>) {\n\t\tconst modified = (value: keyof CommentThreadChanges): boolean =>\n\t\t\tObject.prototype.hasOwnProperty.call(changes, value);\n\n\t\tif (modified('range')) { this._range = changes.range!; }\n\t\tif (modified('label')) { this._label = changes.label; }\n\t\tif (modified('contextValue')) { this._contextValue = changes.contextValue === null ? undefined : changes.contextValue; }\n\t\tif (modified('comments')) { this.comments = changes.comments; }\n\t\tif (modified('collapseState')) { this.initialCollapsibleState = changes.collapseState; }\n\t\tif (modified('canReply')) { this.canReply = changes.canReply!; }\n\t\tif (modified('state')) { this.state = changes.state!; }\n\t\tif (modified('applicability')) { this.applicability = changes.applicability!; }\n\t\tif (modified('isTemplate')) { this._isTemplate = changes.isTemplate!; }\n\t}\n\n\thasComments(): boolean {\n\t\treturn !!this.comments && this.comments.length > 0;\n\t}\n\n\tdispose() {\n\t\tthis._isDisposed = true;\n\t\tthis._onDidChangeCollapsibleState.dispose();\n\t\tthis._onDidChangeComments.dispose();\n\t\tthis._onDidChangeInput.dispose();\n\t\tthis._onDidChangeLabel.dispose();\n\t\tthis._onDidChangeState.dispose();\n\t}\n\n\ttoJSON(): MarshalledCommentThread {\n\t\treturn {\n\t\t\t$mid: MarshalledId.CommentThread,\n\t\t\tcommentControlHandle: this.controllerHandle,\n\t\t\tcommentThreadHandle: this.commentThreadHandle,\n\t\t};\n\t}\n}\n\nexport class MainThreadCommentController implements ICommentController {\n\tget handle(): number {\n\t\treturn this._handle;\n\t}\n\n\tget id(): string {\n\t\treturn this._id;\n\t}\n\n\tget contextValue(): string {\n\t\treturn this._id;\n\t}\n\n\tget proxy(): ExtHostCommentsShape {\n\t\treturn this._proxy;\n\t}\n\n\tget label(): string {\n\t\treturn this._label;\n\t}\n\n\tprivate _reactions: languages.CommentReaction[] | undefined;\n\n\tget reactions() {\n\t\treturn this._reactions;\n\t}\n\n\tset reactions(reactions: languages.CommentReaction[] | undefined) {\n\t\tthis._reactions = reactions;\n\t}\n\n\tget options() {\n\t\treturn this._features.options;\n\t}\n\n\tprivate readonly _threads: Map<number, MainThreadCommentThread<IRange | ICellRange>> = new Map<number, MainThreadCommentThread<IRange | ICellRange>>();\n\tpublic activeEditingCommentThread?: MainThreadCommentThread<IRange | ICellRange>;\n\n\tget features(): CommentProviderFeatures {\n\t\treturn this._features;\n\t}\n\n\tget owner() {\n\t\treturn this._id;\n\t}\n\n\tconstructor(\n\t\tprivate readonly _proxy: ExtHostCommentsShape,\n\t\tprivate readonly _commentService: ICommentService,\n\t\tprivate readonly _handle: number,\n\t\tprivate readonly _uniqueId: string,\n\t\tprivate readonly _id: string,\n\t\tprivate readonly _label: string,\n\t\tprivate _features: CommentProviderFeatures\n\t) { }\n\n\tasync setActiveCommentAndThread(commentInfo: { thread: languages.CommentThread; comment?: languages.Comment } | undefined) {\n\t\treturn this._proxy.$setActiveComment(this._handle, commentInfo ? { commentThreadHandle: commentInfo.thread.commentThreadHandle, uniqueIdInThread: commentInfo.comment?.uniqueIdInThread } : undefined);\n\t}\n\n\tupdateFeatures(features: CommentProviderFeatures) {\n\t\tthis._features = features;\n\t}\n\n\tcreateCommentThread(extensionId: string,\n\t\tcommentThreadHandle: number,\n\t\tthreadId: string,\n\t\tresource: UriComponents,\n\t\trange: IRange | ICellRange | undefined,\n\t\tcomments: languages.Comment[],\n\t\tisTemplate: boolean,\n\t\teditorId?: string\n\t): languages.CommentThread<IRange | ICellRange> {\n\t\tconst thread = new MainThreadCommentThread(\n\t\t\tcommentThreadHandle,\n\t\t\tthis.handle,\n\t\t\textensionId,\n\t\t\tthreadId,\n\t\t\tURI.revive(resource).toString(),\n\t\t\trange,\n\t\t\tcomments,\n\t\t\ttrue,\n\t\t\tisTemplate,\n\t\t\teditorId\n\t\t);\n\n\t\tthis._threads.set(commentThreadHandle, thread);\n\n\t\tif (thread.isDocumentCommentThread()) {\n\t\t\tthis._commentService.updateComments(this._uniqueId, {\n\t\t\t\tadded: [thread],\n\t\t\t\tremoved: [],\n\t\t\t\tchanged: [],\n\t\t\t\tpending: []\n\t\t\t});\n\t\t} else {\n\t\t\tthis._commentService.updateNotebookComments(this._uniqueId, {\n\t\t\t\tadded: [thread as MainThreadCommentThread<ICellRange>],\n\t\t\t\tremoved: [],\n\t\t\t\tchanged: [],\n\t\t\t\tpending: []\n\t\t\t});\n\t\t}\n\n\t\treturn thread;\n\t}\n\n\tupdateCommentThread(commentThreadHandle: number,\n\t\tthreadId: string,\n\t\tresource: UriComponents,\n\t\tchanges: CommentThreadChanges): void {\n\t\tconst thread = this.getKnownThread(commentThreadHandle);\n\t\tthread.batchUpdate(changes);\n\n\t\tif (thread.isDocumentCommentThread()) {\n\t\t\tthis._commentService.updateComments(this._uniqueId, {\n\t\t\t\tadded: [],\n\t\t\t\tremoved: [],\n\t\t\t\tchanged: [thread],\n\t\t\t\tpending: []\n\t\t\t});\n\t\t} else {\n\t\t\tthis._commentService.updateNotebookComments(this._uniqueId, {\n\t\t\t\tadded: [],\n\t\t\t\tremoved: [],\n\t\t\t\tchanged: [thread as MainThreadCommentThread<ICellRange>],\n\t\t\t\tpending: []\n\t\t\t});\n\t\t}\n\n\t}\n\n\tdeleteCommentThread(commentThreadHandle: number) {\n\t\tconst thread = this.getKnownThread(commentThreadHandle);\n\t\tthis._threads.delete(commentThreadHandle);\n\t\tthread.dispose();\n\n\t\tif (thread.isDocumentCommentThread()) {\n\t\t\tthis._commentService.updateComments(this._uniqueId, {\n\t\t\t\tadded: [],\n\t\t\t\tremoved: [thread],\n\t\t\t\tchanged: [],\n\t\t\t\tpending: []\n\t\t\t});\n\t\t} else {\n\t\t\tthis._commentService.updateNotebookComments(this._uniqueId, {\n\t\t\t\tadded: [],\n\t\t\t\tremoved: [thread as MainThreadCommentThread<ICellRange>],\n\t\t\t\tchanged: [],\n\t\t\t\tpending: []\n\t\t\t});\n\t\t}\n\t}\n\n\tdeleteCommentThreadMain(commentThreadId: string) {\n\t\tthis._threads.forEach(thread => {\n\t\t\tif (thread.threadId === commentThreadId) {\n\t\t\t\tthis._proxy.$deleteCommentThread(this._handle, thread.commentThreadHandle);\n\t\t\t}\n\t\t});\n\t}\n\n\tupdateInput(input: string) {\n\t\tconst thread = this.activeEditingCommentThread;\n\n\t\tif (thread && thread.input) {\n\t\t\tconst commentInput = thread.input;\n\t\t\tcommentInput.value = input;\n\t\t\tthread.input = commentInput;\n\t\t}\n\t}\n\n\tupdateCommentingRanges(resourceHints?: languages.CommentingRangeResourceHint) {\n\t\tthis._commentService.updateCommentingRanges(this._uniqueId, resourceHints);\n\t}\n\n\tprivate getKnownThread(commentThreadHandle: number): MainThreadCommentThread<IRange | ICellRange> {\n\t\tconst thread = this._threads.get(commentThreadHandle);\n\t\tif (!thread) {\n\t\t\tthrow new Error('unknown thread');\n\t\t}\n\t\treturn thread;\n\t}\n\n\tasync getDocumentComments(resource: URI, token: CancellationToken) {\n\t\tif (resource.scheme === Schemas.vscodeNotebookCell) {\n\t\t\treturn {\n\t\t\t\tuniqueOwner: this._uniqueId,\n\t\t\t\tlabel: this.label,\n\t\t\t\tthreads: [],\n\t\t\t\tcommentingRanges: {\n\t\t\t\t\tresource: resource,\n\t\t\t\t\tranges: [],\n\t\t\t\t\tfileComments: false\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\n\t\tconst ret: languages.CommentThread<IRange>[] = [];\n\t\tfor (const thread of [...this._threads.keys()]) {\n\t\t\tconst commentThread = this._threads.get(thread)!;\n\t\t\tif (commentThread.resource === resource.toString()) {\n\t\t\t\tif (commentThread.isDocumentCommentThread()) {\n\t\t\t\t\tret.push(commentThread);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tconst commentingRanges = await this._proxy.$provideCommentingRanges(this.handle, resource, token);\n\n\t\treturn {\n\t\t\tuniqueOwner: this._uniqueId,\n\t\t\tlabel: this.label,\n\t\t\tthreads: ret,\n\t\t\tcommentingRanges: {\n\t\t\t\tresource: resource,\n\t\t\t\tranges: commentingRanges?.ranges || [],\n\t\t\t\tfileComments: !!commentingRanges?.fileComments\n\t\t\t}\n\t\t};\n\t}\n\n\tasync getNotebookComments(resource: URI, token: CancellationToken) {\n\t\tif (resource.scheme !== Schemas.vscodeNotebookCell) {\n\t\t\treturn {\n\t\t\t\tuniqueOwner: this._uniqueId,\n\t\t\t\tlabel: this.label,\n\t\t\t\tthreads: []\n\t\t\t};\n\t\t}\n\n\t\tconst ret: languages.CommentThread<ICellRange>[] = [];\n\t\tfor (const thread of [...this._threads.keys()]) {\n\t\t\tconst commentThread = this._threads.get(thread)!;\n\t\t\tif (commentThread.resource === resource.toString()) {\n\t\t\t\tif (!commentThread.isDocumentCommentThread()) {\n\t\t\t\t\tret.push(commentThread as languages.CommentThread<ICellRange>);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn {\n\t\t\tuniqueOwner: this._uniqueId,\n\t\t\tlabel: this.label,\n\t\t\tthreads: ret\n\t\t};\n\t}\n\n\tasync toggleReaction(uri: URI, thread: languages.CommentThread, comment: languages.Comment, reaction: languages.CommentReaction, token: CancellationToken): Promise<void> {\n\t\treturn this._proxy.$toggleReaction(this._handle, thread.commentThreadHandle, uri, comment, reaction);\n\t}\n\n\tgetAllComments(): MainThreadCommentThread<IRange | ICellRange>[] {\n\t\tconst ret: MainThreadCommentThread<IRange | ICellRange>[] = [];\n\t\tfor (const thread of [...this._threads.keys()]) {\n\t\t\tret.push(this._threads.get(thread)!);\n\t\t}\n\n\t\treturn ret;\n\t}\n\n\tcreateCommentThreadTemplate(resource: UriComponents, range: IRange | undefined, editorId?: string): Promise<void> {\n\t\treturn this._proxy.$createCommentThreadTemplate(this.handle, resource, range, editorId);\n\t}\n\n\tasync updateCommentThreadTemplate(threadHandle: number, range: IRange) {\n\t\tawait this._proxy.$updateCommentThreadTemplate(this.handle, threadHandle, range);\n\t}\n\n\ttoJSON(): any {\n\t\treturn {\n\t\t\t$mid: MarshalledId.CommentController,\n\t\t\thandle: this.handle\n\t\t};\n\t}\n}\n\n\nconst commentsViewIcon = registerIcon('comments-view-icon', Codicon.commentDiscussion, localize('commentsViewIcon', 'View icon of the comments view.'));\n\n@extHostNamedCustomer(MainContext.MainThreadComments)\nexport class MainThreadComments extends Disposable implements MainThreadCommentsShape {\n\tprivate readonly _proxy: ExtHostCommentsShape;\n\n\tprivate _handlers = new Map<number, string>();\n\tprivate _commentControllers = new Map<number, MainThreadCommentController>();\n\n\tprivate _activeEditingCommentThread?: MainThreadCommentThread<IRange | ICellRange>;\n\tprivate readonly _activeEditingCommentThreadDisposables = this._register(new DisposableStore());\n\n\tprivate _openViewListener: IDisposable | null = null;\n\n\n\tconstructor(\n\t\textHostContext: IExtHostContext,\n\t\t@ICommentService private readonly _commentService: ICommentService,\n\t\t@IViewsService private readonly _viewsService: IViewsService,\n\t\t@IViewDescriptorService private readonly _viewDescriptorService: IViewDescriptorService,\n\t\t@IUriIdentityService private readonly _uriIdentityService: IUriIdentityService,\n\t\t@IEditorService private readonly _editorService: IEditorService\n\t) {\n\t\tsuper();\n\t\tthis._proxy = extHostContext.getProxy(ExtHostContext.ExtHostComments);\n\t\tthis._commentService.unregisterCommentController();\n\n\t\tthis._register(this._commentService.onDidChangeActiveEditingCommentThread(async thread => {\n\t\t\tconst handle = (thread as MainThreadCommentThread<IRange | ICellRange>).controllerHandle;\n\t\t\tconst controller = this._commentControllers.get(handle);\n\n\t\t\tif (!controller) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis._activeEditingCommentThreadDisposables.clear();\n\t\t\tthis._activeEditingCommentThread = thread as MainThreadCommentThread<IRange | ICellRange>;\n\t\t\tcontroller.activeEditingCommentThread = this._activeEditingCommentThread;\n\t\t}));\n\t}\n\n\t$registerCommentController(handle: number, id: string, label: string, extensionId: string): void {\n\t\tconst providerId = `${id}-${extensionId}`;\n\t\tthis._handlers.set(handle, providerId);\n\n\t\tconst provider = new MainThreadCommentController(this._proxy, this._commentService, handle, providerId, id, label, {});\n\t\tthis._commentService.registerCommentController(providerId, provider);\n\t\tthis._commentControllers.set(handle, provider);\n\n\t\tconst commentsPanelAlreadyConstructed = !!this._viewDescriptorService.getViewDescriptorById(COMMENTS_VIEW_ID);\n\t\tif (!commentsPanelAlreadyConstructed) {\n\t\t\tthis.registerView(commentsPanelAlreadyConstructed);\n\t\t}\n\t\tthis.registerViewListeners(commentsPanelAlreadyConstructed);\n\t\tthis._commentService.setWorkspaceComments(String(handle), []);\n\t}\n\n\t$unregisterCommentController(handle: number): void {\n\t\tconst providerId = this._handlers.get(handle);\n\t\tthis._handlers.delete(handle);\n\t\tthis._commentControllers.delete(handle);\n\n\t\tif (typeof providerId !== 'string') {\n\t\t\treturn;\n\t\t\t// throw new Error('unknown handler');\n\t\t} else {\n\t\t\tthis._commentService.unregisterCommentController(providerId);\n\t\t}\n\t}\n\n\t$updateCommentControllerFeatures(handle: number, features: CommentProviderFeatures): void {\n\t\tconst provider = this._commentControllers.get(handle);\n\n\t\tif (!provider) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\tprovider.updateFeatures(features);\n\t}\n\n\t$createCommentThread(handle: number,\n\t\tcommentThreadHandle: number,\n\t\tthreadId: string,\n\t\tresource: UriComponents,\n\t\trange: IRange | ICellRange | undefined,\n\t\tcomments: languages.Comment[],\n\t\textensionId: ExtensionIdentifier,\n\t\tisTemplate: boolean,\n\t\teditorId?: string\n\t): languages.CommentThread<IRange | ICellRange> | undefined {\n\t\tconst provider = this._commentControllers.get(handle);\n\n\t\tif (!provider) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\treturn provider.createCommentThread(extensionId.value, commentThreadHandle, threadId, resource, range, comments, isTemplate, editorId);\n\t}\n\n\t$updateCommentThread(handle: number,\n\t\tcommentThreadHandle: number,\n\t\tthreadId: string,\n\t\tresource: UriComponents,\n\t\tchanges: CommentThreadChanges): void {\n\t\tconst provider = this._commentControllers.get(handle);\n\n\t\tif (!provider) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\treturn provider.updateCommentThread(commentThreadHandle, threadId, resource, changes);\n\t}\n\n\t$deleteCommentThread(handle: number, commentThreadHandle: number) {\n\t\tconst provider = this._commentControllers.get(handle);\n\n\t\tif (!provider) {\n\t\t\treturn;\n\t\t}\n\n\t\treturn provider.deleteCommentThread(commentThreadHandle);\n\t}\n\n\t$updateCommentingRanges(handle: number, resourceHints?: languages.CommentingRangeResourceHint) {\n\t\tconst provider = this._commentControllers.get(handle);\n\n\t\tif (!provider) {\n\t\t\treturn;\n\t\t}\n\n\t\tprovider.updateCommentingRanges(resourceHints);\n\t}\n\n\tasync $revealCommentThread(handle: number, commentThreadHandle: number, commentUniqueIdInThread: number, options: languages.CommentThreadRevealOptions): Promise<void> {\n\t\tconst provider = this._commentControllers.get(handle);\n\n\t\tif (!provider) {\n\t\t\treturn Promise.resolve();\n\t\t}\n\n\t\tconst thread = provider.getAllComments().find(thread => thread.commentThreadHandle === commentThreadHandle);\n\t\tif (!thread || !thread.isDocumentCommentThread()) {\n\t\t\treturn Promise.resolve();\n\t\t}\n\n\t\tconst comment = thread.comments?.find(comment => comment.uniqueIdInThread === commentUniqueIdInThread);\n\n\t\trevealCommentThread(this._commentService, this._editorService, this._uriIdentityService, thread, comment, options.focusReply, undefined, options.preserveFocus);\n\t}\n\n\tasync $hideCommentThread(handle: number, commentThreadHandle: number): Promise<void> {\n\t\tconst provider = this._commentControllers.get(handle);\n\n\t\tif (!provider) {\n\t\t\treturn Promise.resolve();\n\t\t}\n\n\t\tconst thread = provider.getAllComments().find(thread => thread.commentThreadHandle === commentThreadHandle);\n\t\tif (!thread || !thread.isDocumentCommentThread()) {\n\t\t\treturn Promise.resolve();\n\t\t}\n\n\t\tthread.collapsibleState = languages.CommentThreadCollapsibleState.Collapsed;\n\t}\n\n\tprivate registerView(commentsViewAlreadyRegistered: boolean) {\n\t\tif (!commentsViewAlreadyRegistered) {\n\t\t\tconst VIEW_CONTAINER: ViewContainer = Registry.as<IViewContainersRegistry>(ViewExtensions.ViewContainersRegistry).registerViewContainer({\n\t\t\t\tid: COMMENTS_VIEW_ID,\n\t\t\t\ttitle: COMMENTS_VIEW_TITLE,\n\t\t\t\tctorDescriptor: new SyncDescriptor(ViewPaneContainer, [COMMENTS_VIEW_ID, { mergeViewWithContainerWhenSingleView: true }]),\n\t\t\t\tstorageId: COMMENTS_VIEW_STORAGE_ID,\n\t\t\t\thideIfEmpty: true,\n\t\t\t\ticon: commentsViewIcon,\n\t\t\t\torder: 10,\n\t\t\t}, ViewContainerLocation.Panel);\n\n\t\t\tRegistry.as<IViewsRegistry>(ViewExtensions.ViewsRegistry).registerViews([{\n\t\t\t\tid: COMMENTS_VIEW_ID,\n\t\t\t\tname: COMMENTS_VIEW_TITLE,\n\t\t\t\tcanToggleVisibility: false,\n\t\t\t\tctorDescriptor: new SyncDescriptor(CommentsPanel),\n\t\t\t\tcanMoveView: true,\n\t\t\t\tcontainerIcon: commentsViewIcon,\n\t\t\t\tfocusCommand: {\n\t\t\t\t\tid: 'workbench.action.focusCommentsPanel'\n\t\t\t\t}\n\t\t\t}], VIEW_CONTAINER);\n\t\t}\n\t}\n\n\tprivate setComments() {\n\t\t[...this._commentControllers.keys()].forEach(handle => {\n\t\t\tconst threads = this._commentControllers.get(handle)!.getAllComments();\n\n\t\t\tif (threads.length) {\n\t\t\t\tconst providerId = this.getHandler(handle);\n\t\t\t\tthis._commentService.setWorkspaceComments(providerId, threads);\n\t\t\t}\n\t\t});\n\t}\n\n\tprivate registerViewOpenedListener() {\n\t\tif (!this._openViewListener) {\n\t\t\tthis._openViewListener = this._viewsService.onDidChangeViewVisibility(e => {\n\t\t\t\tif (e.id === COMMENTS_VIEW_ID && e.visible) {\n\t\t\t\t\tthis.setComments();\n\t\t\t\t\tif (this._openViewListener) {\n\t\t\t\t\t\tthis._openViewListener.dispose();\n\t\t\t\t\t\tthis._openViewListener = null;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}\n\n\t/**\n\t * If the comments view has never been opened, the constructor for it has not yet run so it has\n\t * no listeners for comment threads being set or updated. Listen for the view opening for the\n\t * first time and send it comments then.\n\t */\n\tprivate registerViewListeners(commentsPanelAlreadyConstructed: boolean) {\n\t\tif (!commentsPanelAlreadyConstructed) {\n\t\t\tthis.registerViewOpenedListener();\n\t\t}\n\n\t\tthis._register(this._viewDescriptorService.onDidChangeContainer(e => {\n\t\t\tif (e.views.find(view => view.id === COMMENTS_VIEW_ID)) {\n\t\t\t\tthis.setComments();\n\t\t\t\tthis.registerViewOpenedListener();\n\t\t\t}\n\t\t}));\n\t\tthis._register(this._viewDescriptorService.onDidChangeContainerLocation(e => {\n\t\t\tconst commentsContainer = this._viewDescriptorService.getViewContainerByViewId(COMMENTS_VIEW_ID);\n\t\t\tif (e.viewContainer.id === commentsContainer?.id) {\n\t\t\t\tthis.setComments();\n\t\t\t\tthis.registerViewOpenedListener();\n\t\t\t}\n\t\t}));\n\t}\n\n\tprivate getHandler(handle: number) {\n\t\tif (!this._handlers.has(handle)) {\n\t\t\tthrow new Error('Unknown handler');\n\t\t}\n\t\treturn this._handlers.get(handle)!;\n\t}\n}\n"],
  "mappings": "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",
  "names": ["thread", "comment"]
}
