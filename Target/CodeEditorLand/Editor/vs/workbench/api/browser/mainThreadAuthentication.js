var y=Object.defineProperty;var E=Object.getOwnPropertyDescriptor;var d=(S,h,e,t)=>{for(var i=t>1?void 0:t?E(h,e):h,o=S.length-1,n;o>=0;o--)(n=S[o])&&(i=(t?n(h,e,i):n(i))||i);return t&&i&&y(h,e,i),i},u=(S,h)=>(e,t)=>h(e,t,S);import{Disposable as p,DisposableMap as b}from"../../../base/common/lifecycle.js";import*as l from"../../../nls.js";import{extHostNamedCustomer as x}from"../../services/extensions/common/extHostCustomers.js";import{IAuthenticationService as _,IAuthenticationExtensionsService as I,INTERNAL_AUTH_PROVIDER_PREFIX as C}from"../../services/authentication/common/authentication.js";import{ExtHostContext as N,MainContext as D}from"../common/extHost.protocol.js";import{IDialogService as O}from"../../../platform/dialogs/common/dialogs.js";import w from"../../../base/common/severity.js";import{INotificationService as T}from"../../../platform/notification/common/notification.js";import{ActivationKind as U,IExtensionService as M}from"../../services/extensions/common/extensions.js";import{ITelemetryService as R}from"../../../platform/telemetry/common/telemetry.js";import{Emitter as P}from"../../../base/common/event.js";import{IAuthenticationAccessService as $}from"../../services/authentication/browser/authenticationAccessService.js";import{IAuthenticationUsageService as z}from"../../services/authentication/browser/authenticationUsageService.js";import{getAuthenticationProviderActivationEvent as H}from"../../services/authentication/browser/authenticationService.js";import{URI as F}from"../../../base/common/uri.js";import{IOpenerService as B}from"../../../platform/opener/common/opener.js";import{CancellationError as G}from"../../../base/common/errors.js";class W extends p{constructor(e,t,i,o,n,s){super();this._proxy=e;this.id=t;this.label=i;this.supportsMultipleAccounts=o;this.notificationService=n;this.onDidChangeSessions=s.event}onDidChangeSessions;async getSessions(e,t){return this._proxy.$getSessions(this.id,e,t)}createSession(e,t){return this._proxy.$createSession(this.id,e,t)}async removeSession(e){await this._proxy.$removeSession(this.id,e),this.notificationService.info(l.localize("signedOut","Successfully signed out."))}}let A=class extends p{constructor(e,t,i,o,n,s,c,r,v,f){super();this.authenticationService=t;this.authenticationExtensionsService=i;this.authenticationAccessService=o;this.authenticationUsageService=n;this.dialogService=s;this.notificationService=c;this.extensionService=r;this.telemetryService=v;this.openerService=f;this._proxy=e.getProxy(N.ExtHostAuthentication),this._register(this.authenticationService.onDidChangeSessions(g=>{this._proxy.$onDidChangeAuthenticationSessions(g.providerId,g.label)})),this._register(this.authenticationExtensionsService.onDidChangeAccountPreference(g=>{const a=this.authenticationService.getProvider(g.providerId);this._proxy.$onDidChangeAuthenticationSessions(a.id,a.label,g.extensionIds)}))}_proxy;_registrations=this._register(new b);async $registerAuthenticationProvider(e,t,i){const o=new P;this._registrations.set(e,o);const n=new W(this._proxy,e,t,i,this.notificationService,o);this.authenticationService.registerAuthenticationProvider(e,n)}$unregisterAuthenticationProvider(e){this._registrations.deleteAndDispose(e),this.authenticationService.unregisterAuthenticationProvider(e)}async $ensureProvider(e){if(!this.authenticationService.isAuthenticationProviderRegistered(e))return await this.extensionService.activateByEvent(H(e),U.Immediate)}$sendDidChangeSessions(e,t){const i=this._registrations.get(e);i instanceof P&&i.fire(t)}$removeSession(e,t){return this.authenticationService.removeSession(e,t)}async loginPrompt(e,t,i,o){let n;e.id.startsWith(C)?n=l.localize("confirmModelAccess","The extension '{0}' wants to access the language models provided by {1}.",t,e.label):n=i?l.localize("confirmRelogin","The extension '{0}' wants you to sign in again using {1}.",t,e.label):l.localize("confirmLogin","The extension '{0}' wants to sign in using {1}.",t,e.label);const s=[{label:l.localize({key:"allow",comment:["&& denotes a mnemonic"]},"&&Allow"),run(){return!0}}];o?.learnMore&&s.push({label:l.localize("learnMore","Learn more"),run:async()=>{const r=this.loginPrompt(e,t,i,o);return await this.openerService.open(F.revive(o.learnMore),{allowCommands:!0}),await r}});const{result:c}=await this.dialogService.prompt({type:w.Info,message:n,buttons:s,detail:o?.detail,cancelButton:!0});return c??!1}async continueWithIncorrectAccountPrompt(e,t){const i=await this.dialogService.prompt({message:l.localize("incorrectAccount","Incorrect account detected"),detail:l.localize("incorrectAccountDetail","The chosen account, {0}, does not match the requested account, {1}.",e,t),type:w.Warning,cancelButton:!0,buttons:[{label:l.localize("keep","Keep {0}",e),run:()=>e},{label:l.localize("loginWith","Login with {0}",t),run:()=>t}]});if(!i.result)throw new G;return i.result===e}async doGetSession(e,t,i,o,n){const s=await this.authenticationService.getSessions(e,t,n.account,!0),c=this.authenticationService.getProvider(e);if(n.forceNewSession&&n.createIfNone)throw new Error("Invalid combination of options. Please remove one of the following: forceNewSession, createIfNone");if(n.forceNewSession&&n.silent)throw new Error("Invalid combination of options. Please remove one of the following: forceNewSession, silent");if(n.createIfNone&&n.silent)throw new Error("Invalid combination of options. Please remove one of the following: createIfNone, silent");n.clearSessionPreference&&this._removeAccountPreference(i,e,t);const r=this._getAccountPreference(i,e,t,s);if(!n.forceNewSession&&s.length){if(r&&this.authenticationAccessService.isAccessAllowed(e,r.account.label,i))return r;if(!c.supportsMultipleAccounts&&this.authenticationAccessService.isAccessAllowed(e,s[0].account.label,i))return s[0]}if(n.createIfNone||n.forceNewSession){let v;typeof n.forceNewSession=="object"&&(v=n.forceNewSession);const f=!!(n.forceNewSession&&s.length);if(!await this.loginPrompt(c,o,f,v))throw new Error("User did not consent to login.");let a;if(s?.length&&!n.forceNewSession)a=c.supportsMultipleAccounts&&!n.account?await this.authenticationExtensionsService.selectSession(e,i,o,t,s):s[0];else{const m=n.account??r?.account;do a=await this.authenticationService.createSession(e,t,{activateImmediate:!0,account:m});while(m&&m.label!==a.account.label&&!await this.continueWithIncorrectAccountPrompt(a.account.label,m.label))}return this.authenticationAccessService.updateAllowedExtensions(e,a.account.label,[{id:i,name:o,allowed:!0}]),this._updateAccountPreference(i,e,a),a}if(!r&&!this.authenticationExtensionsService.getAccountPreference(i,e)){const v=s.find(f=>this.authenticationAccessService.isAccessAllowed(e,f.account.label,i));if(v)return v}n.silent||(s.length?this.authenticationExtensionsService.requestSessionAccess(e,i,o,t,s):await this.authenticationExtensionsService.requestNewSession(e,t,i,o))}async $getSession(e,t,i,o,n){const s=await this.doGetSession(e,t,i,o,n);return s&&(this.sendProviderUsageTelemetry(i,e),this.authenticationUsageService.addAccountUsage(e,s.account.label,i,o)),s}async $getAccounts(e){return await this.authenticationService.getAccounts(e)}sendProviderUsageTelemetry(e,t){this.telemetryService.publicLog2("authentication.providerUsage",{providerId:t,extensionId:e})}_getAccountPreference(e,t,i,o){if(o.length===0)return;const n=this.authenticationExtensionsService.getAccountPreference(e,t);if(n)return o.find(r=>r.account.label===n);const s=this.authenticationExtensionsService.getSessionPreference(t,e,i);if(s){const c=o.find(r=>r.id===s);if(c)return this.authenticationExtensionsService.updateAccountPreference(e,t,c.account),c}}_updateAccountPreference(e,t,i){this.authenticationExtensionsService.updateAccountPreference(e,t,i.account),this.authenticationExtensionsService.updateSessionPreference(t,e,i)}_removeAccountPreference(e,t,i){this.authenticationExtensionsService.removeAccountPreference(e,t),this.authenticationExtensionsService.removeSessionPreference(t,e,i)}};A=d([x(D.MainThreadAuthentication),u(1,_),u(2,I),u(3,$),u(4,z),u(5,O),u(6,T),u(7,M),u(8,R),u(9,B)],A);export{A as MainThreadAuthentication,W as MainThreadAuthenticationProvider};
