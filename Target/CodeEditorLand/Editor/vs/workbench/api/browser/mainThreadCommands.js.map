{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/api/browser/mainThreadCommands.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport {\n\tDisposableMap,\n\ttype IDisposable,\n} from \"../../../base/common/lifecycle.js\";\nimport { revive } from \"../../../base/common/marshalling.js\";\nimport { isString } from \"../../../base/common/types.js\";\nimport {\n\tCommandsRegistry,\n\ttype ICommandMetadata,\n\tICommandService,\n} from \"../../../platform/commands/common/commands.js\";\nimport {\n\ttype IExtHostContext,\n\textHostNamedCustomer,\n} from \"../../services/extensions/common/extHostCustomers.js\";\nimport { IExtensionService } from \"../../services/extensions/common/extensions.js\";\nimport {\n\ttype Dto,\n\tSerializableObjectWithBuffers,\n} from \"../../services/extensions/common/proxyIdentifier.js\";\nimport {\n\ttype ExtHostCommandsShape,\n\tExtHostContext,\n\tMainContext,\n\ttype MainThreadCommandsShape,\n} from \"../common/extHost.protocol.js\";\n\n@extHostNamedCustomer(MainContext.MainThreadCommands)\nexport class MainThreadCommands implements MainThreadCommandsShape {\n\tprivate readonly _commandRegistrations = new DisposableMap<string>();\n\tprivate readonly _generateCommandsDocumentationRegistration: IDisposable;\n\tprivate readonly _proxy: ExtHostCommandsShape;\n\n\tconstructor(\n\t\textHostContext: IExtHostContext,\n\t\t@ICommandService private readonly _commandService: ICommandService,\n\t\t@IExtensionService private readonly _extensionService: IExtensionService,\n\t) {\n\t\tthis._proxy = extHostContext.getProxy(ExtHostContext.ExtHostCommands);\n\n\t\tthis._generateCommandsDocumentationRegistration = CommandsRegistry.registerCommand('_generateCommandsDocumentation', () => this._generateCommandsDocumentation());\n\t}\n\n\tdispose() {\n\t\tthis._commandRegistrations.dispose();\n\t\tthis._generateCommandsDocumentationRegistration.dispose();\n\t}\n\n\tprivate async _generateCommandsDocumentation(): Promise<void> {\n\t\tconst result = await this._proxy.$getContributedCommandMetadata();\n\n\t\t// add local commands\n\t\tconst commands = CommandsRegistry.getCommands();\n\t\tfor (const [id, command] of commands) {\n\t\t\tif (command.metadata) {\n\t\t\t\tresult[id] = command.metadata;\n\t\t\t}\n\t\t}\n\n\t\t// print all as markdown\n\t\tconst all: string[] = [];\n\t\tfor (const id in result) {\n\t\t\tall.push(\"`\" + id + \"` - \" + _generateMarkdown(result[id]));\n\t\t}\n\t\tconsole.log(all.join(\"\\n\"));\n\t}\n\n\t$registerCommand(id: string): void {\n\t\tthis._commandRegistrations.set(\n\t\t\tid,\n\t\t\tCommandsRegistry.registerCommand(id, (accessor, ...args) => {\n\t\t\t\treturn this._proxy\n\t\t\t\t\t.$executeContributedCommand(id, ...args)\n\t\t\t\t\t.then((result) => {\n\t\t\t\t\t\treturn revive(result);\n\t\t\t\t\t});\n\t\t\t}),\n\t\t);\n\t}\n\n\t$unregisterCommand(id: string): void {\n\t\tthis._commandRegistrations.deleteAndDispose(id);\n\t}\n\n\t$fireCommandActivationEvent(id: string): void {\n\t\tconst activationEvent = `onCommand:${id}`;\n\t\tif (!this._extensionService.activationEventIsDone(activationEvent)) {\n\t\t\t// this is NOT awaited because we only use it as drive-by-activation\n\t\t\t// for commands that are already known inside the extension host\n\t\t\tthis._extensionService.activateByEvent(activationEvent);\n\t\t}\n\t}\n\n\tasync $executeCommand<T>(\n\t\tid: string,\n\t\targs: any[] | SerializableObjectWithBuffers<any[]>,\n\t\tretry: boolean,\n\t): Promise<T | undefined> {\n\t\tif (args instanceof SerializableObjectWithBuffers) {\n\t\t\targs = args.value;\n\t\t}\n\t\tfor (let i = 0; i < args.length; i++) {\n\t\t\targs[i] = revive(args[i]);\n\t\t}\n\t\tif (retry && args.length > 0 && !CommandsRegistry.getCommand(id)) {\n\t\t\tawait this._extensionService.activateByEvent(`onCommand:${id}`);\n\t\t\tthrow new Error(\"$executeCommand:retry\");\n\t\t}\n\t\treturn this._commandService.executeCommand<T>(id, ...args);\n\t}\n\n\t$getCommands(): Promise<string[]> {\n\t\treturn Promise.resolve([...CommandsRegistry.getCommands().keys()]);\n\t}\n}\n\n// --- command doc\n\nfunction _generateMarkdown(\n\tdescription: string | Dto<ICommandMetadata> | ICommandMetadata,\n): string {\n\tif (typeof description === \"string\") {\n\t\treturn description;\n\t} else {\n\t\tconst descriptionString = isString(description.description)\n\t\t\t? description.description\n\t\t\t: // Our docs website is in English, so keep the original here.\n\t\t\t\tdescription.description.original;\n\t\tconst parts = [descriptionString];\n\t\tparts.push(\"\\n\\n\");\n\t\tif (description.args) {\n\t\t\tfor (const arg of description.args) {\n\t\t\t\tparts.push(`* _${arg.name}_ - ${arg.description || \"\"}\\n`);\n\t\t\t}\n\t\t}\n\t\tif (description.returns) {\n\t\t\tparts.push(`* _(returns)_ - ${description.returns}`);\n\t\t}\n\t\tparts.push(\"\\n\\n\");\n\t\treturn parts.join(\"\");\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
