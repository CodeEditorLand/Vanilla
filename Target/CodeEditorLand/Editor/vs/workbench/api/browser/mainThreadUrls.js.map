{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/api/browser/mainThreadUrls.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport type { IDisposable } from \"../../../base/common/lifecycle.js\";\nimport type { URI, UriComponents } from \"../../../base/common/uri.js\";\nimport { ExtensionIdentifier } from \"../../../platform/extensions/common/extensions.js\";\nimport {\n\ttype IOpenURLOptions,\n\tIURLService,\n} from \"../../../platform/url/common/url.js\";\nimport {\n\ttype IExtensionContributedURLHandler,\n\tIExtensionUrlHandler,\n} from \"../../services/extensions/browser/extensionUrlHandler.js\";\nimport {\n\ttype IExtHostContext,\n\textHostNamedCustomer,\n} from \"../../services/extensions/common/extHostCustomers.js\";\nimport {\n\tExtHostContext,\n\ttype ExtHostUrlsShape,\n\tMainContext,\n\ttype MainThreadUrlsShape,\n} from \"../common/extHost.protocol.js\";\n\nclass ExtensionUrlHandler implements IExtensionContributedURLHandler {\n\tconstructor(\n\t\tprivate readonly proxy: ExtHostUrlsShape,\n\t\tprivate readonly handle: number,\n\t\treadonly extensionId: ExtensionIdentifier,\n\t\treadonly extensionDisplayName: string,\n\t) {}\n\n\thandleURL(uri: URI, options?: IOpenURLOptions): Promise<boolean> {\n\t\tif (!ExtensionIdentifier.equals(this.extensionId, uri.authority)) {\n\t\t\treturn Promise.resolve(false);\n\t\t}\n\n\t\treturn Promise.resolve(\n\t\t\tthis.proxy.$handleExternalUri(this.handle, uri),\n\t\t).then(() => true);\n\t}\n}\n\n@extHostNamedCustomer(MainContext.MainThreadUrls)\nexport class MainThreadUrls implements MainThreadUrlsShape {\n\tprivate readonly proxy: ExtHostUrlsShape;\n\tprivate handlers = new Map<\n\t\tnumber,\n\t\t{ extensionId: ExtensionIdentifier; disposable: IDisposable }\n\t>();\n\n\tconstructor(\n\t\tcontext: IExtHostContext,\n\t\t@IURLService private readonly urlService: IURLService,\n\t\t@IExtensionUrlHandler private readonly extensionUrlHandler: IExtensionUrlHandler\n\t) {\n\t\tthis.proxy = context.getProxy(ExtHostContext.ExtHostUrls);\n\t}\n\n\t$registerUriHandler(\n\t\thandle: number,\n\t\textensionId: ExtensionIdentifier,\n\t\textensionDisplayName: string,\n\t): Promise<void> {\n\t\tconst handler = new ExtensionUrlHandler(\n\t\t\tthis.proxy,\n\t\t\thandle,\n\t\t\textensionId,\n\t\t\textensionDisplayName,\n\t\t);\n\t\tconst disposable = this.urlService.registerHandler(handler);\n\n\t\tthis.handlers.set(handle, { extensionId, disposable });\n\t\tthis.extensionUrlHandler.registerExtensionHandler(extensionId, handler);\n\n\t\treturn Promise.resolve(undefined);\n\t}\n\n\t$unregisterUriHandler(handle: number): Promise<void> {\n\t\tconst tuple = this.handlers.get(handle);\n\n\t\tif (!tuple) {\n\t\t\treturn Promise.resolve(undefined);\n\t\t}\n\n\t\tconst { extensionId, disposable } = tuple;\n\n\t\tthis.extensionUrlHandler.unregisterExtensionHandler(extensionId);\n\t\tthis.handlers.delete(handle);\n\t\tdisposable.dispose();\n\n\t\treturn Promise.resolve(undefined);\n\t}\n\n\tasync $createAppUri(uri: UriComponents): Promise<URI> {\n\t\treturn this.urlService.create(uri);\n\t}\n\n\tdispose(): void {\n\t\tthis.handlers.forEach(({ disposable }) => disposable.dispose());\n\t\tthis.handlers.clear();\n\t}\n}\n"],
  "mappings": ";;;;;;;;;;;;AAOA,SAAS,2BAA2B;AACpC;AAAA,EAEC;AAAA,OACM;AACP;AAAA,EAEC;AAAA,OACM;AACP;AAAA,EAEC;AAAA,OACM;AACP;AAAA,EACC;AAAA,EAEA;AAAA,OAEM;AAEP,MAAM,oBAA+D;AAAA,EACpE,YACkB,OACA,QACR,aACA,sBACR;AAJgB;AACA;AACR;AACA;AAAA,EACP;AAAA,EAjCJ,OA2BqE;AAAA;AAAA;AAAA,EAQpE,UAAU,KAAU,SAA6C;AAChE,QAAI,CAAC,oBAAoB,OAAO,KAAK,aAAa,IAAI,SAAS,GAAG;AACjE,aAAO,QAAQ,QAAQ,KAAK;AAAA,IAC7B;AAEA,WAAO,QAAQ;AAAA,MACd,KAAK,MAAM,mBAAmB,KAAK,QAAQ,GAAG;AAAA,IAC/C,EAAE,KAAK,MAAM,IAAI;AAAA,EAClB;AACD;AAGO,IAAM,iBAAN,MAAoD;AAAA,EAO1D,YACC,SAC8B,YACS,qBACtC;AAF6B;AACS;AAEvC,SAAK,QAAQ,QAAQ,SAAS,eAAe,WAAW;AAAA,EACzD;AAAA,EAZiB;AAAA,EACT,WAAW,oBAAI,IAGrB;AAAA,EAUF,oBACC,QACA,aACA,sBACgB;AAChB,UAAM,UAAU,IAAI;AAAA,MACnB,KAAK;AAAA,MACL;AAAA,MACA;AAAA,MACA;AAAA,IACD;AACA,UAAM,aAAa,KAAK,WAAW,gBAAgB,OAAO;AAE1D,SAAK,SAAS,IAAI,QAAQ,EAAE,aAAa,WAAW,CAAC;AACrD,SAAK,oBAAoB,yBAAyB,aAAa,OAAO;AAEtE,WAAO,QAAQ,QAAQ,MAAS;AAAA,EACjC;AAAA,EAEA,sBAAsB,QAA+B;AACpD,UAAM,QAAQ,KAAK,SAAS,IAAI,MAAM;AAEtC,QAAI,CAAC,OAAO;AACX,aAAO,QAAQ,QAAQ,MAAS;AAAA,IACjC;AAEA,UAAM,EAAE,aAAa,WAAW,IAAI;AAEpC,SAAK,oBAAoB,2BAA2B,WAAW;AAC/D,SAAK,SAAS,OAAO,MAAM;AAC3B,eAAW,QAAQ;AAEnB,WAAO,QAAQ,QAAQ,MAAS;AAAA,EACjC;AAAA,EAEA,MAAM,cAAc,KAAkC;AACrD,WAAO,KAAK,WAAW,OAAO,GAAG;AAAA,EAClC;AAAA,EAEA,UAAgB;AACf,SAAK,SAAS,QAAQ,CAAC,EAAE,WAAW,MAAM,WAAW,QAAQ,CAAC;AAC9D,SAAK,SAAS,MAAM;AAAA,EACrB;AACD;AA1D2D;AAA9C,iBAAN;AAAA,EADN,qBAAqB,YAAY,cAAc;AAAA,EAU7C;AAAA,EACA;AAAA,GAVU;",
  "names": []
}
