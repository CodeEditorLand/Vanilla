{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/api/browser/mainThreadMessageService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as nls from '../../../nls.js';\nimport Severity from '../../../base/common/severity.js';\nimport { IAction, toAction } from '../../../base/common/actions.js';\nimport { MainThreadMessageServiceShape, MainContext, MainThreadMessageOptions } from '../common/extHost.protocol.js';\nimport { extHostNamedCustomer, IExtHostContext } from '../../services/extensions/common/extHostCustomers.js';\nimport { IDialogService, IPromptButton } from '../../../platform/dialogs/common/dialogs.js';\nimport { INotificationService, INotificationSource } from '../../../platform/notification/common/notification.js';\nimport { Event } from '../../../base/common/event.js';\nimport { ICommandService } from '../../../platform/commands/common/commands.js';\nimport { IExtensionService } from '../../services/extensions/common/extensions.js';\nimport { IDisposable } from '../../../base/common/lifecycle.js';\n\n@extHostNamedCustomer(MainContext.MainThreadMessageService)\nexport class MainThreadMessageService implements MainThreadMessageServiceShape {\n\n\tprivate extensionsListener: IDisposable;\n\n\tconstructor(\n\t\textHostContext: IExtHostContext,\n\t\t@INotificationService private readonly _notificationService: INotificationService,\n\t\t@ICommandService private readonly _commandService: ICommandService,\n\t\t@IDialogService private readonly _dialogService: IDialogService,\n\t\t@IExtensionService extensionService: IExtensionService\n\t) {\n\t\tthis.extensionsListener = extensionService.onDidChangeExtensions(e => {\n\t\t\tfor (const extension of e.removed) {\n\t\t\t\tthis._notificationService.removeFilter(extension.identifier.value);\n\t\t\t}\n\t\t});\n\t}\n\n\tdispose(): void {\n\t\tthis.extensionsListener.dispose();\n\t}\n\n\t$showMessage(severity: Severity, message: string, options: MainThreadMessageOptions, commands: { title: string; isCloseAffordance: boolean; handle: number }[]): Promise<number | undefined> {\n\t\tif (options.modal) {\n\t\t\treturn this._showModalMessage(severity, message, options.detail, commands, options.useCustom);\n\t\t} else {\n\t\t\treturn this._showMessage(severity, message, commands, options);\n\t\t}\n\t}\n\n\tprivate _showMessage(severity: Severity, message: string, commands: { title: string; isCloseAffordance: boolean; handle: number }[], options: MainThreadMessageOptions): Promise<number | undefined> {\n\n\t\treturn new Promise<number | undefined>(resolve => {\n\n\t\t\tconst primaryActions: IAction[] = commands.map(command => toAction({\n\t\t\t\tid: `_extension_message_handle_${command.handle}`,\n\t\t\t\tlabel: command.title,\n\t\t\t\tenabled: true,\n\t\t\t\trun: () => {\n\t\t\t\t\tresolve(command.handle);\n\t\t\t\t\treturn Promise.resolve();\n\t\t\t\t}\n\t\t\t}));\n\n\t\t\tlet source: string | INotificationSource | undefined;\n\t\t\tif (options.source) {\n\t\t\t\tsource = {\n\t\t\t\t\tlabel: options.source.label,\n\t\t\t\t\tid: options.source.identifier.value\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tif (!source) {\n\t\t\t\tsource = nls.localize('defaultSource', \"Extension\");\n\t\t\t}\n\n\t\t\tconst secondaryActions: IAction[] = [];\n\t\t\tif (options.source) {\n\t\t\t\tsecondaryActions.push(toAction({\n\t\t\t\t\tid: options.source.identifier.value,\n\t\t\t\t\tlabel: nls.localize('manageExtension', \"Manage Extension\"),\n\t\t\t\t\trun: () => {\n\t\t\t\t\t\treturn this._commandService.executeCommand('_extensions.manage', options.source!.identifier.value);\n\t\t\t\t\t}\n\t\t\t\t}));\n\t\t\t}\n\n\t\t\tconst messageHandle = this._notificationService.notify({\n\t\t\t\tseverity,\n\t\t\t\tmessage,\n\t\t\t\tactions: { primary: primaryActions, secondary: secondaryActions },\n\t\t\t\tsource\n\t\t\t});\n\n\t\t\t// if promise has not been resolved yet, now is the time to ensure a return value\n\t\t\t// otherwise if already resolved it means the user clicked one of the buttons\n\t\t\tEvent.once(messageHandle.onDidClose)(() => {\n\t\t\t\tresolve(undefined);\n\t\t\t});\n\t\t});\n\t}\n\n\tprivate async _showModalMessage(severity: Severity, message: string, detail: string | undefined, commands: { title: string; isCloseAffordance: boolean; handle: number }[], useCustom?: boolean): Promise<number | undefined> {\n\t\tconst buttons: IPromptButton<number>[] = [];\n\t\tlet cancelButton: IPromptButton<number | undefined> | undefined = undefined;\n\n\t\tfor (const command of commands) {\n\t\t\tconst button: IPromptButton<number> = {\n\t\t\t\tlabel: command.title,\n\t\t\t\trun: () => command.handle\n\t\t\t};\n\n\t\t\tif (command.isCloseAffordance) {\n\t\t\t\tcancelButton = button;\n\t\t\t} else {\n\t\t\t\tbuttons.push(button);\n\t\t\t}\n\t\t}\n\n\t\tif (!cancelButton) {\n\t\t\tif (buttons.length > 0) {\n\t\t\t\tcancelButton = {\n\t\t\t\t\tlabel: nls.localize('cancel', \"Cancel\"),\n\t\t\t\t\trun: () => undefined\n\t\t\t\t};\n\t\t\t} else {\n\t\t\t\tcancelButton = {\n\t\t\t\t\tlabel: nls.localize({ key: 'ok', comment: ['&& denotes a mnemonic'] }, \"&&OK\"),\n\t\t\t\t\trun: () => undefined\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\n\t\tconst { result } = await this._dialogService.prompt({\n\t\t\ttype: severity,\n\t\t\tmessage,\n\t\t\tdetail,\n\t\t\tbuttons,\n\t\t\tcancelButton,\n\t\t\tcustom: useCustom\n\t\t});\n\n\t\treturn result;\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
