var p=Object.defineProperty;var m=Object.getOwnPropertyDescriptor;var d=(s,e,r,n)=>{for(var t=n>1?void 0:n?m(e,r):e,o=s.length-1,l;o>=0;o--)(l=s[o])&&(t=(n?l(e,r,t):l(t))||t);return n&&t&&p(e,r,t),t},a=(s,e)=>(r,n)=>e(r,n,s);import{ExtensionIdentifier as x}from"../../../platform/extensions/common/extensions.js";import{IURLService as h}from"../../../platform/url/common/url.js";import{IExtensionUrlHandler as u}from"../../services/extensions/browser/extensionUrlHandler.js";import{extHostNamedCustomer as U}from"../../services/extensions/common/extHostCustomers.js";import{ExtHostContext as c,MainContext as y}from"../common/extHost.protocol.js";class H{constructor(e,r,n,t){this.proxy=e;this.handle=r;this.extensionId=n;this.extensionDisplayName=t}handleURL(e,r){return x.equals(this.extensionId,e.authority)?Promise.resolve(this.proxy.$handleExternalUri(this.handle,e)).then(()=>!0):Promise.resolve(!1)}}let i=class{constructor(e,r,n){this.urlService=r;this.extensionUrlHandler=n;this.proxy=e.getProxy(c.ExtHostUrls)}proxy;handlers=new Map;$registerUriHandler(e,r,n){const t=new H(this.proxy,e,r,n),o=this.urlService.registerHandler(t);return this.handlers.set(e,{extensionId:r,disposable:o}),this.extensionUrlHandler.registerExtensionHandler(r,t),Promise.resolve(void 0)}$unregisterUriHandler(e){const r=this.handlers.get(e);if(!r)return Promise.resolve(void 0);const{extensionId:n,disposable:t}=r;return this.extensionUrlHandler.unregisterExtensionHandler(n),this.handlers.delete(e),t.dispose(),Promise.resolve(void 0)}async $createAppUri(e){return this.urlService.create(e)}dispose(){this.handlers.forEach(({disposable:e})=>e.dispose()),this.handlers.clear()}};i=d([U(y.MainThreadUrls),a(1,h),a(2,u)],i);export{i as MainThreadUrls};
