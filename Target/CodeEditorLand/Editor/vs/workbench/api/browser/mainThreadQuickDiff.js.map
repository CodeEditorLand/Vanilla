{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/api/browser/mainThreadQuickDiff.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CancellationToken } from '../../../base/common/cancellation.js';\nimport { DisposableMap, IDisposable } from '../../../base/common/lifecycle.js';\nimport { URI, UriComponents } from '../../../base/common/uri.js';\nimport { ExtHostContext, ExtHostQuickDiffShape, IDocumentFilterDto, MainContext, MainThreadQuickDiffShape } from '../common/extHost.protocol.js';\nimport { IQuickDiffService, QuickDiffProvider } from '../../contrib/scm/common/quickDiff.js';\nimport { extHostNamedCustomer, IExtHostContext } from '../../services/extensions/common/extHostCustomers.js';\n\n@extHostNamedCustomer(MainContext.MainThreadQuickDiff)\nexport class MainThreadQuickDiff implements MainThreadQuickDiffShape {\n\n\tprivate readonly proxy: ExtHostQuickDiffShape;\n\tprivate providerDisposables = new DisposableMap<number, IDisposable>();\n\n\tconstructor(\n\t\textHostContext: IExtHostContext,\n\t\t@IQuickDiffService private readonly quickDiffService: IQuickDiffService\n\t) {\n\t\tthis.proxy = extHostContext.getProxy(ExtHostContext.ExtHostQuickDiff);\n\t}\n\n\tasync $registerQuickDiffProvider(handle: number, selector: IDocumentFilterDto[], label: string, rootUri: UriComponents | undefined): Promise<void> {\n\t\tconst provider: QuickDiffProvider = {\n\t\t\tlabel,\n\t\t\trootUri: URI.revive(rootUri),\n\t\t\tselector,\n\t\t\tisSCM: false,\n\t\t\tgetOriginalResource: async (uri: URI) => {\n\t\t\t\treturn URI.revive(await this.proxy.$provideOriginalResource(handle, uri, CancellationToken.None));\n\t\t\t}\n\t\t};\n\t\tconst disposable = this.quickDiffService.addQuickDiffProvider(provider);\n\t\tthis.providerDisposables.set(handle, disposable);\n\t}\n\n\tasync $unregisterQuickDiffProvider(handle: number): Promise<void> {\n\t\tif (this.providerDisposables.has(handle)) {\n\t\t\tthis.providerDisposables.deleteAndDispose(handle);\n\t\t}\n\t}\n\n\tdispose(): void {\n\t\tthis.providerDisposables.dispose();\n\t}\n}\n"],
  "mappings": ";;;;;;;;;;;;AAKA,SAAS,yBAAyB;AAClC,SAAS,eAAe,mBAAmB;AAC3C,SAAS,KAAK,qBAAqB;AACnC,SAAS,gBAAgB,uBAAuB,oBAAoB,aAAa,gCAAgC;AACjH,SAAS,mBAAmB,yBAAyB;AACrD,SAAS,sBAAsB,uBAAuB;AAG/C,IAAM,sBAAN,MAA8D;AAAA,EAKpE,YACC,gBACoC,kBACnC;AADmC;AAEpC,SAAK,QAAQ,eAAe,SAAS,eAAe,gBAAgB;AAAA,EACrE;AAAA,EARiB;AAAA,EACT,sBAAsB,IAAI,cAAmC;AAAA,EASrE,MAAM,2BAA2B,QAAgB,UAAgC,OAAe,SAAmD;AAClJ,UAAM,WAA8B;AAAA,MACnC;AAAA,MACA,SAAS,IAAI,OAAO,OAAO;AAAA,MAC3B;AAAA,MACA,OAAO;AAAA,MACP,qBAAqB,8BAAO,QAAa;AACxC,eAAO,IAAI,OAAO,MAAM,KAAK,MAAM,yBAAyB,QAAQ,KAAK,kBAAkB,IAAI,CAAC;AAAA,MACjG,GAFqB;AAAA,IAGtB;AACA,UAAM,aAAa,KAAK,iBAAiB,qBAAqB,QAAQ;AACtE,SAAK,oBAAoB,IAAI,QAAQ,UAAU;AAAA,EAChD;AAAA,EAEA,MAAM,6BAA6B,QAA+B;AACjE,QAAI,KAAK,oBAAoB,IAAI,MAAM,GAAG;AACzC,WAAK,oBAAoB,iBAAiB,MAAM;AAAA,IACjD;AAAA,EACD;AAAA,EAEA,UAAgB;AACf,SAAK,oBAAoB,QAAQ;AAAA,EAClC;AACD;AAnCqE;AAAxD,sBAAN;AAAA,EADN,qBAAqB,YAAY,mBAAmB;AAAA,EAQlD;AAAA,GAPU;",
  "names": []
}
