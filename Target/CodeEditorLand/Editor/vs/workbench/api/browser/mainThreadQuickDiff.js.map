{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/api/browser/mainThreadQuickDiff.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CancellationToken } from \"../../../base/common/cancellation.js\";\nimport {\n\tDisposableMap,\n\ttype IDisposable,\n} from \"../../../base/common/lifecycle.js\";\nimport { URI, type UriComponents } from \"../../../base/common/uri.js\";\nimport {\n\tIQuickDiffService,\n\ttype QuickDiffProvider,\n} from \"../../contrib/scm/common/quickDiff.js\";\nimport {\n\ttype IExtHostContext,\n\textHostNamedCustomer,\n} from \"../../services/extensions/common/extHostCustomers.js\";\nimport {\n\tExtHostContext,\n\ttype ExtHostQuickDiffShape,\n\ttype IDocumentFilterDto,\n\tMainContext,\n\ttype MainThreadQuickDiffShape,\n} from \"../common/extHost.protocol.js\";\n\n@extHostNamedCustomer(MainContext.MainThreadQuickDiff)\nexport class MainThreadQuickDiff implements MainThreadQuickDiffShape {\n\tprivate readonly proxy: ExtHostQuickDiffShape;\n\tprivate providerDisposables = new DisposableMap<number, IDisposable>();\n\n\tconstructor(\n\t\textHostContext: IExtHostContext,\n\t\t@IQuickDiffService private readonly quickDiffService: IQuickDiffService,\n\t) {\n\t\tthis.proxy = extHostContext.getProxy(ExtHostContext.ExtHostQuickDiff);\n\t}\n\n\tasync $registerQuickDiffProvider(\n\t\thandle: number,\n\t\tselector: IDocumentFilterDto[],\n\t\tlabel: string,\n\t\trootUri: UriComponents | undefined,\n\t): Promise<void> {\n\t\tconst provider: QuickDiffProvider = {\n\t\t\tlabel,\n\t\t\trootUri: URI.revive(rootUri),\n\t\t\tselector,\n\t\t\tisSCM: false,\n\t\t\tgetOriginalResource: async (uri: URI) => {\n\t\t\t\treturn URI.revive(\n\t\t\t\t\tawait this.proxy.$provideOriginalResource(\n\t\t\t\t\t\thandle,\n\t\t\t\t\t\turi,\n\t\t\t\t\t\tCancellationToken.None,\n\t\t\t\t\t),\n\t\t\t\t);\n\t\t\t},\n\t\t};\n\t\tconst disposable = this.quickDiffService.addQuickDiffProvider(provider);\n\t\tthis.providerDisposables.set(handle, disposable);\n\t}\n\n\tasync $unregisterQuickDiffProvider(handle: number): Promise<void> {\n\t\tif (this.providerDisposables.has(handle)) {\n\t\t\tthis.providerDisposables.deleteAndDispose(handle);\n\t\t}\n\t}\n\n\tdispose(): void {\n\t\tthis.providerDisposables.dispose();\n\t}\n}\n"],
  "mappings": ";;;;;;;;;;;;AAKA,SAAS,yBAAyB;AAClC;AAAA,EACC;AAAA,OAEM;AACP,SAAS,WAA+B;AACxC;AAAA,EACC;AAAA,OAEM;AACP;AAAA,EAEC;AAAA,OACM;AACP;AAAA,EACC;AAAA,EAGA;AAAA,OAEM;AAGA,IAAM,sBAAN,MAA8D;AAAA,EAIpE,YACC,gBACoC,kBACnC;AADmC;AAEpC,SAAK,QAAQ,eAAe,SAAS,eAAe,gBAAgB;AAAA,EACrE;AAAA,EARiB;AAAA,EACT,sBAAsB,IAAI,cAAmC;AAAA,EASrE,MAAM,2BACL,QACA,UACA,OACA,SACgB;AAChB,UAAM,WAA8B;AAAA,MACnC;AAAA,MACA,SAAS,IAAI,OAAO,OAAO;AAAA,MAC3B;AAAA,MACA,OAAO;AAAA,MACP,qBAAqB,8BAAO,QAAa;AACxC,eAAO,IAAI;AAAA,UACV,MAAM,KAAK,MAAM;AAAA,YAChB;AAAA,YACA;AAAA,YACA,kBAAkB;AAAA,UACnB;AAAA,QACD;AAAA,MACD,GARqB;AAAA,IAStB;AACA,UAAM,aAAa,KAAK,iBAAiB,qBAAqB,QAAQ;AACtE,SAAK,oBAAoB,IAAI,QAAQ,UAAU;AAAA,EAChD;AAAA,EAEA,MAAM,6BAA6B,QAA+B;AACjE,QAAI,KAAK,oBAAoB,IAAI,MAAM,GAAG;AACzC,WAAK,oBAAoB,iBAAiB,MAAM;AAAA,IACjD;AAAA,EACD;AAAA,EAEA,UAAgB;AACf,SAAK,oBAAoB,QAAQ;AAAA,EAClC;AACD;AA7CqE;AAAxD,sBAAN;AAAA,EADN,qBAAqB,YAAY,mBAAmB;AAAA,EAOlD;AAAA,GANU;",
  "names": []
}
