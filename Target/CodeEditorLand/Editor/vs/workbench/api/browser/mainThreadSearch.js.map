{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/api/browser/mainThreadSearch.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CancellationToken } from '../../../base/common/cancellation.js';\nimport { DisposableStore, dispose, IDisposable } from '../../../base/common/lifecycle.js';\nimport { URI, UriComponents } from '../../../base/common/uri.js';\nimport { IConfigurationService } from '../../../platform/configuration/common/configuration.js';\nimport { ITelemetryService } from '../../../platform/telemetry/common/telemetry.js';\nimport { extHostNamedCustomer, IExtHostContext } from '../../services/extensions/common/extHostCustomers.js';\nimport { IFileMatch, IFileQuery, IRawFileMatch2, ISearchComplete, ISearchCompleteStats, ISearchProgressItem, ISearchQuery, ISearchResultProvider, ISearchService, ITextQuery, QueryType, SearchProviderType } from '../../services/search/common/search.js';\nimport { ExtHostContext, ExtHostSearchShape, MainContext, MainThreadSearchShape } from '../common/extHost.protocol.js';\nimport { revive } from '../../../base/common/marshalling.js';\nimport * as Constants from '../../contrib/search/common/constants.js';\nimport { IContextKeyService } from '../../../platform/contextkey/common/contextkey.js';\n\n@extHostNamedCustomer(MainContext.MainThreadSearch)\nexport class MainThreadSearch implements MainThreadSearchShape {\n\n\tprivate readonly _proxy: ExtHostSearchShape;\n\tprivate readonly _searchProvider = new Map<number, RemoteSearchProvider>();\n\n\tconstructor(\n\t\textHostContext: IExtHostContext,\n\t\t@ISearchService private readonly _searchService: ISearchService,\n\t\t@ITelemetryService private readonly _telemetryService: ITelemetryService,\n\t\t@IConfigurationService _configurationService: IConfigurationService,\n\t\t@IContextKeyService protected contextKeyService: IContextKeyService,\n\t) {\n\t\tthis._proxy = extHostContext.getProxy(ExtHostContext.ExtHostSearch);\n\t\tthis._proxy.$enableExtensionHostSearch();\n\t}\n\n\tdispose(): void {\n\t\tthis._searchProvider.forEach(value => value.dispose());\n\t\tthis._searchProvider.clear();\n\t}\n\n\t$registerTextSearchProvider(handle: number, scheme: string): void {\n\t\tthis._searchProvider.set(handle, new RemoteSearchProvider(this._searchService, SearchProviderType.text, scheme, handle, this._proxy));\n\t}\n\n\t$registerAITextSearchProvider(handle: number, scheme: string): void {\n\t\tConstants.SearchContext.hasAIResultProvider.bindTo(this.contextKeyService).set(true);\n\t\tthis._searchProvider.set(handle, new RemoteSearchProvider(this._searchService, SearchProviderType.aiText, scheme, handle, this._proxy));\n\t}\n\n\t$registerFileSearchProvider(handle: number, scheme: string): void {\n\t\tthis._searchProvider.set(handle, new RemoteSearchProvider(this._searchService, SearchProviderType.file, scheme, handle, this._proxy));\n\t}\n\n\t$unregisterProvider(handle: number): void {\n\t\tdispose(this._searchProvider.get(handle));\n\t\tthis._searchProvider.delete(handle);\n\t}\n\n\t$handleFileMatch(handle: number, session: number, data: UriComponents[]): void {\n\t\tconst provider = this._searchProvider.get(handle);\n\t\tif (!provider) {\n\t\t\tthrow new Error('Got result for unknown provider');\n\t\t}\n\n\t\tprovider.handleFindMatch(session, data);\n\t}\n\n\t$handleTextMatch(handle: number, session: number, data: IRawFileMatch2[]): void {\n\t\tconst provider = this._searchProvider.get(handle);\n\t\tif (!provider) {\n\t\t\tthrow new Error('Got result for unknown provider');\n\t\t}\n\n\t\tprovider.handleFindMatch(session, data);\n\t}\n\t$handleTelemetry(eventName: string, data: any): void {\n\t\tthis._telemetryService.publicLog(eventName, data);\n\t}\n}\n\nclass SearchOperation {\n\n\tprivate static _idPool = 0;\n\n\tconstructor(\n\t\treadonly progress?: (match: IFileMatch) => any,\n\t\treadonly id: number = ++SearchOperation._idPool,\n\t\treadonly matches = new Map<string, IFileMatch>()\n\t) {\n\t\t//\n\t}\n\n\taddMatch(match: IFileMatch): void {\n\t\tconst existingMatch = this.matches.get(match.resource.toString());\n\t\tif (existingMatch) {\n\t\t\t// TODO@rob clean up text/file result types\n\t\t\t// If a file search returns the same file twice, we would enter this branch.\n\t\t\t// It's possible that could happen, #90813\n\t\t\tif (existingMatch.results && match.results) {\n\t\t\t\texistingMatch.results.push(...match.results);\n\t\t\t}\n\t\t} else {\n\t\t\tthis.matches.set(match.resource.toString(), match);\n\t\t}\n\n\t\tthis.progress?.(match);\n\t}\n}\n\nclass RemoteSearchProvider implements ISearchResultProvider, IDisposable {\n\n\tprivate readonly _registrations = new DisposableStore();\n\tprivate readonly _searches = new Map<number, SearchOperation>();\n\n\tconstructor(\n\t\tsearchService: ISearchService,\n\t\ttype: SearchProviderType,\n\t\tprivate readonly _scheme: string,\n\t\tprivate readonly _handle: number,\n\t\tprivate readonly _proxy: ExtHostSearchShape\n\t) {\n\t\tthis._registrations.add(searchService.registerSearchResultProvider(this._scheme, type, this));\n\t}\n\n\tdispose(): void {\n\t\tthis._registrations.dispose();\n\t}\n\n\tfileSearch(query: IFileQuery, token: CancellationToken = CancellationToken.None): Promise<ISearchComplete> {\n\t\treturn this.doSearch(query, undefined, token);\n\t}\n\n\ttextSearch(query: ITextQuery, onProgress?: (p: ISearchProgressItem) => void, token: CancellationToken = CancellationToken.None): Promise<ISearchComplete> {\n\t\treturn this.doSearch(query, onProgress, token);\n\t}\n\n\tdoSearch(query: ISearchQuery, onProgress?: (p: ISearchProgressItem) => void, token: CancellationToken = CancellationToken.None): Promise<ISearchComplete> {\n\t\tif (!query.folderQueries.length) {\n\t\t\tthrow new Error('Empty folderQueries');\n\t\t}\n\n\t\tconst search = new SearchOperation(onProgress);\n\t\tthis._searches.set(search.id, search);\n\n\t\tconst searchP = this._provideSearchResults(query, search.id, token);\n\n\t\treturn Promise.resolve(searchP).then((result: ISearchCompleteStats) => {\n\t\t\tthis._searches.delete(search.id);\n\t\t\treturn { results: Array.from(search.matches.values()), stats: result.stats, limitHit: result.limitHit, messages: result.messages };\n\t\t}, err => {\n\t\t\tthis._searches.delete(search.id);\n\t\t\treturn Promise.reject(err);\n\t\t});\n\t}\n\n\tclearCache(cacheKey: string): Promise<void> {\n\t\treturn Promise.resolve(this._proxy.$clearCache(cacheKey));\n\t}\n\n\thandleFindMatch(session: number, dataOrUri: Array<UriComponents | IRawFileMatch2>): void {\n\t\tconst searchOp = this._searches.get(session);\n\n\t\tif (!searchOp) {\n\t\t\t// ignore...\n\t\t\treturn;\n\t\t}\n\n\t\tdataOrUri.forEach(result => {\n\t\t\tif ((<IRawFileMatch2>result).results) {\n\t\t\t\tsearchOp.addMatch(revive((<IRawFileMatch2>result)));\n\t\t\t} else {\n\t\t\t\tsearchOp.addMatch({\n\t\t\t\t\tresource: URI.revive(<UriComponents>result)\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t}\n\n\tprivate _provideSearchResults(query: ISearchQuery, session: number, token: CancellationToken): Promise<ISearchCompleteStats> {\n\t\tswitch (query.type) {\n\t\t\tcase QueryType.File:\n\t\t\t\treturn this._proxy.$provideFileSearchResults(this._handle, session, query, token);\n\t\t\tcase QueryType.Text:\n\t\t\t\treturn this._proxy.$provideTextSearchResults(this._handle, session, query, token);\n\t\t\tdefault:\n\t\t\t\treturn this._proxy.$provideAITextSearchResults(this._handle, session, query, token);\n\t\t}\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
