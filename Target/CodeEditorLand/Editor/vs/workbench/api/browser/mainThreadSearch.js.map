{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/api/browser/mainThreadSearch.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CancellationToken } from \"../../../base/common/cancellation.js\";\nimport {\n\tDisposableStore,\n\ttype IDisposable,\n\tdispose,\n} from \"../../../base/common/lifecycle.js\";\nimport { revive } from \"../../../base/common/marshalling.js\";\nimport { URI, type UriComponents } from \"../../../base/common/uri.js\";\nimport { IConfigurationService } from \"../../../platform/configuration/common/configuration.js\";\nimport { IContextKeyService } from \"../../../platform/contextkey/common/contextkey.js\";\nimport { ITelemetryService } from \"../../../platform/telemetry/common/telemetry.js\";\nimport * as Constants from \"../../contrib/search/common/constants.js\";\nimport {\n\ttype IExtHostContext,\n\textHostNamedCustomer,\n} from \"../../services/extensions/common/extHostCustomers.js\";\nimport {\n\ttype IFileMatch,\n\ttype IFileQuery,\n\ttype IRawFileMatch2,\n\ttype ISearchComplete,\n\ttype ISearchCompleteStats,\n\ttype ISearchProgressItem,\n\ttype ISearchQuery,\n\ttype ISearchResultProvider,\n\tISearchService,\n\ttype ITextQuery,\n\tQueryType,\n\tSearchProviderType,\n} from \"../../services/search/common/search.js\";\nimport {\n\tExtHostContext,\n\ttype ExtHostSearchShape,\n\tMainContext,\n\ttype MainThreadSearchShape,\n} from \"../common/extHost.protocol.js\";\n\n@extHostNamedCustomer(MainContext.MainThreadSearch)\nexport class MainThreadSearch implements MainThreadSearchShape {\n\tprivate readonly _proxy: ExtHostSearchShape;\n\tprivate readonly _searchProvider = new Map<number, RemoteSearchProvider>();\n\n\tconstructor(\n\t\textHostContext: IExtHostContext,\n\t\t@ISearchService private readonly _searchService: ISearchService,\n\t\t@ITelemetryService\n\t\tprivate readonly _telemetryService: ITelemetryService,\n\t\t@IConfigurationService _configurationService: IConfigurationService,\n\t\t@IContextKeyService protected contextKeyService: IContextKeyService,\n\t) {\n\t\tthis._proxy = extHostContext.getProxy(ExtHostContext.ExtHostSearch);\n\t\tthis._proxy.$enableExtensionHostSearch();\n\t}\n\n\tdispose(): void {\n\t\tthis._searchProvider.forEach((value) => value.dispose());\n\t\tthis._searchProvider.clear();\n\t}\n\n\t$registerTextSearchProvider(handle: number, scheme: string): void {\n\t\tthis._searchProvider.set(\n\t\t\thandle,\n\t\t\tnew RemoteSearchProvider(\n\t\t\t\tthis._searchService,\n\t\t\t\tSearchProviderType.text,\n\t\t\t\tscheme,\n\t\t\t\thandle,\n\t\t\t\tthis._proxy,\n\t\t\t),\n\t\t);\n\t}\n\n\t$registerAITextSearchProvider(handle: number, scheme: string): void {\n\t\tConstants.SearchContext.hasAIResultProvider\n\t\t\t.bindTo(this.contextKeyService)\n\t\t\t.set(true);\n\t\tthis._searchProvider.set(\n\t\t\thandle,\n\t\t\tnew RemoteSearchProvider(\n\t\t\t\tthis._searchService,\n\t\t\t\tSearchProviderType.aiText,\n\t\t\t\tscheme,\n\t\t\t\thandle,\n\t\t\t\tthis._proxy,\n\t\t\t),\n\t\t);\n\t}\n\n\t$registerFileSearchProvider(handle: number, scheme: string): void {\n\t\tthis._searchProvider.set(\n\t\t\thandle,\n\t\t\tnew RemoteSearchProvider(\n\t\t\t\tthis._searchService,\n\t\t\t\tSearchProviderType.file,\n\t\t\t\tscheme,\n\t\t\t\thandle,\n\t\t\t\tthis._proxy,\n\t\t\t),\n\t\t);\n\t}\n\n\t$unregisterProvider(handle: number): void {\n\t\tdispose(this._searchProvider.get(handle));\n\t\tthis._searchProvider.delete(handle);\n\t}\n\n\t$handleFileMatch(\n\t\thandle: number,\n\t\tsession: number,\n\t\tdata: UriComponents[],\n\t): void {\n\t\tconst provider = this._searchProvider.get(handle);\n\t\tif (!provider) {\n\t\t\tthrow new Error(\"Got result for unknown provider\");\n\t\t}\n\n\t\tprovider.handleFindMatch(session, data);\n\t}\n\n\t$handleTextMatch(\n\t\thandle: number,\n\t\tsession: number,\n\t\tdata: IRawFileMatch2[],\n\t): void {\n\t\tconst provider = this._searchProvider.get(handle);\n\t\tif (!provider) {\n\t\t\tthrow new Error(\"Got result for unknown provider\");\n\t\t}\n\n\t\tprovider.handleFindMatch(session, data);\n\t}\n\t$handleTelemetry(eventName: string, data: any): void {\n\t\tthis._telemetryService.publicLog(eventName, data);\n\t}\n}\n\nclass SearchOperation {\n\tprivate static _idPool = 0;\n\n\tconstructor(\n\t\treadonly progress?: (match: IFileMatch) => any,\n\t\treadonly id: number = ++SearchOperation._idPool,\n\t\treadonly matches = new Map<string, IFileMatch>(),\n\t) {\n\t\t//\n\t}\n\n\taddMatch(match: IFileMatch): void {\n\t\tconst existingMatch = this.matches.get(match.resource.toString());\n\t\tif (existingMatch) {\n\t\t\t// TODO@rob clean up text/file result types\n\t\t\t// If a file search returns the same file twice, we would enter this branch.\n\t\t\t// It's possible that could happen, #90813\n\t\t\tif (existingMatch.results && match.results) {\n\t\t\t\texistingMatch.results.push(...match.results);\n\t\t\t}\n\t\t} else {\n\t\t\tthis.matches.set(match.resource.toString(), match);\n\t\t}\n\n\t\tthis.progress?.(match);\n\t}\n}\n\nclass RemoteSearchProvider implements ISearchResultProvider, IDisposable {\n\tprivate readonly _registrations = new DisposableStore();\n\tprivate readonly _searches = new Map<number, SearchOperation>();\n\n\tconstructor(\n\t\tsearchService: ISearchService,\n\t\ttype: SearchProviderType,\n\t\tprivate readonly _scheme: string,\n\t\tprivate readonly _handle: number,\n\t\tprivate readonly _proxy: ExtHostSearchShape,\n\t) {\n\t\tthis._registrations.add(\n\t\t\tsearchService.registerSearchResultProvider(\n\t\t\t\tthis._scheme,\n\t\t\t\ttype,\n\t\t\t\tthis,\n\t\t\t),\n\t\t);\n\t}\n\n\tdispose(): void {\n\t\tthis._registrations.dispose();\n\t}\n\n\tfileSearch(\n\t\tquery: IFileQuery,\n\t\ttoken: CancellationToken = CancellationToken.None,\n\t): Promise<ISearchComplete> {\n\t\treturn this.doSearch(query, undefined, token);\n\t}\n\n\ttextSearch(\n\t\tquery: ITextQuery,\n\t\tonProgress?: (p: ISearchProgressItem) => void,\n\t\ttoken: CancellationToken = CancellationToken.None,\n\t): Promise<ISearchComplete> {\n\t\treturn this.doSearch(query, onProgress, token);\n\t}\n\n\tdoSearch(\n\t\tquery: ISearchQuery,\n\t\tonProgress?: (p: ISearchProgressItem) => void,\n\t\ttoken: CancellationToken = CancellationToken.None,\n\t): Promise<ISearchComplete> {\n\t\tif (!query.folderQueries.length) {\n\t\t\tthrow new Error(\"Empty folderQueries\");\n\t\t}\n\n\t\tconst search = new SearchOperation(onProgress);\n\t\tthis._searches.set(search.id, search);\n\n\t\tconst searchP = this._provideSearchResults(query, search.id, token);\n\n\t\treturn Promise.resolve(searchP).then(\n\t\t\t(result: ISearchCompleteStats) => {\n\t\t\t\tthis._searches.delete(search.id);\n\t\t\t\treturn {\n\t\t\t\t\tresults: Array.from(search.matches.values()),\n\t\t\t\t\tstats: result.stats,\n\t\t\t\t\tlimitHit: result.limitHit,\n\t\t\t\t\tmessages: result.messages,\n\t\t\t\t};\n\t\t\t},\n\t\t\t(err) => {\n\t\t\t\tthis._searches.delete(search.id);\n\t\t\t\treturn Promise.reject(err);\n\t\t\t},\n\t\t);\n\t}\n\n\tclearCache(cacheKey: string): Promise<void> {\n\t\treturn Promise.resolve(this._proxy.$clearCache(cacheKey));\n\t}\n\n\thandleFindMatch(\n\t\tsession: number,\n\t\tdataOrUri: Array<UriComponents | IRawFileMatch2>,\n\t): void {\n\t\tconst searchOp = this._searches.get(session);\n\n\t\tif (!searchOp) {\n\t\t\t// ignore...\n\t\t\treturn;\n\t\t}\n\n\t\tdataOrUri.forEach((result) => {\n\t\t\tif ((<IRawFileMatch2>result).results) {\n\t\t\t\tsearchOp.addMatch(revive(<IRawFileMatch2>result));\n\t\t\t} else {\n\t\t\t\tsearchOp.addMatch({\n\t\t\t\t\tresource: URI.revive(<UriComponents>result),\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t}\n\n\tprivate _provideSearchResults(\n\t\tquery: ISearchQuery,\n\t\tsession: number,\n\t\ttoken: CancellationToken,\n\t): Promise<ISearchCompleteStats> {\n\t\tswitch (query.type) {\n\t\t\tcase QueryType.File:\n\t\t\t\treturn this._proxy.$provideFileSearchResults(\n\t\t\t\t\tthis._handle,\n\t\t\t\t\tsession,\n\t\t\t\t\tquery,\n\t\t\t\t\ttoken,\n\t\t\t\t);\n\t\t\tcase QueryType.Text:\n\t\t\t\treturn this._proxy.$provideTextSearchResults(\n\t\t\t\t\tthis._handle,\n\t\t\t\t\tsession,\n\t\t\t\t\tquery,\n\t\t\t\t\ttoken,\n\t\t\t\t);\n\t\t\tdefault:\n\t\t\t\treturn this._proxy.$provideAITextSearchResults(\n\t\t\t\t\tthis._handle,\n\t\t\t\t\tsession,\n\t\t\t\t\tquery,\n\t\t\t\t\ttoken,\n\t\t\t\t);\n\t\t}\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
