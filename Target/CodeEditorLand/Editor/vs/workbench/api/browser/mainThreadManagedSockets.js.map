{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/api/browser/mainThreadManagedSockets.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { VSBuffer } from '../../../base/common/buffer.js';\nimport { Emitter } from '../../../base/common/event.js';\nimport { Disposable, IDisposable } from '../../../base/common/lifecycle.js';\nimport { ISocket, SocketCloseEventType } from '../../../base/parts/ipc/common/ipc.net.js';\nimport { ManagedSocket, RemoteSocketHalf, connectManagedSocket } from '../../../platform/remote/common/managedSocket.js';\nimport { ManagedRemoteConnection, RemoteConnectionType } from '../../../platform/remote/common/remoteAuthorityResolver.js';\nimport { IRemoteSocketFactoryService, ISocketFactory } from '../../../platform/remote/common/remoteSocketFactoryService.js';\nimport { ExtHostContext, ExtHostManagedSocketsShape, MainContext, MainThreadManagedSocketsShape } from '../common/extHost.protocol.js';\nimport { IExtHostContext, extHostNamedCustomer } from '../../services/extensions/common/extHostCustomers.js';\n\n@extHostNamedCustomer(MainContext.MainThreadManagedSockets)\nexport class MainThreadManagedSockets extends Disposable implements MainThreadManagedSocketsShape {\n\n\tprivate readonly _proxy: ExtHostManagedSocketsShape;\n\tprivate readonly _registrations = new Map<number, IDisposable>();\n\tprivate readonly _remoteSockets = new Map<number, RemoteSocketHalf>();\n\n\tconstructor(\n\t\textHostContext: IExtHostContext,\n\t\t@IRemoteSocketFactoryService private readonly _remoteSocketFactoryService: IRemoteSocketFactoryService,\n\t) {\n\t\tsuper();\n\t\tthis._proxy = extHostContext.getProxy(ExtHostContext.ExtHostManagedSockets);\n\t}\n\n\tasync $registerSocketFactory(socketFactoryId: number): Promise<void> {\n\t\tconst that = this;\n\t\tconst socketFactory = new class implements ISocketFactory<RemoteConnectionType.Managed> {\n\n\t\t\tsupports(connectTo: ManagedRemoteConnection): boolean {\n\t\t\t\treturn (connectTo.id === socketFactoryId);\n\t\t\t}\n\n\t\t\tconnect(connectTo: ManagedRemoteConnection, path: string, query: string, debugLabel: string): Promise<ISocket> {\n\t\t\t\treturn new Promise<ISocket>((resolve, reject) => {\n\t\t\t\t\tif (connectTo.id !== socketFactoryId) {\n\t\t\t\t\t\treturn reject(new Error('Invalid connectTo'));\n\t\t\t\t\t}\n\n\t\t\t\t\tconst factoryId = connectTo.id;\n\t\t\t\t\tthat._proxy.$openRemoteSocket(factoryId).then(socketId => {\n\t\t\t\t\t\tconst half: RemoteSocketHalf = {\n\t\t\t\t\t\t\tonClose: new Emitter(),\n\t\t\t\t\t\t\tonData: new Emitter(),\n\t\t\t\t\t\t\tonEnd: new Emitter(),\n\t\t\t\t\t\t};\n\t\t\t\t\t\tthat._remoteSockets.set(socketId, half);\n\n\t\t\t\t\t\tMainThreadManagedSocket.connect(socketId, that._proxy, path, query, debugLabel, half)\n\t\t\t\t\t\t\t.then(\n\t\t\t\t\t\t\t\tsocket => {\n\t\t\t\t\t\t\t\t\tsocket.onDidDispose(() => that._remoteSockets.delete(socketId));\n\t\t\t\t\t\t\t\t\tresolve(socket);\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\terr => {\n\t\t\t\t\t\t\t\t\tthat._remoteSockets.delete(socketId);\n\t\t\t\t\t\t\t\t\treject(err);\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t}).catch(reject);\n\t\t\t\t});\n\t\t\t}\n\t\t};\n\t\tthis._registrations.set(socketFactoryId, this._remoteSocketFactoryService.register(RemoteConnectionType.Managed, socketFactory));\n\n\t}\n\n\tasync $unregisterSocketFactory(socketFactoryId: number): Promise<void> {\n\t\tthis._registrations.get(socketFactoryId)?.dispose();\n\t}\n\n\t$onDidManagedSocketHaveData(socketId: number, data: VSBuffer): void {\n\t\tthis._remoteSockets.get(socketId)?.onData.fire(data);\n\t}\n\n\t$onDidManagedSocketClose(socketId: number, error: string | undefined): void {\n\t\tthis._remoteSockets.get(socketId)?.onClose.fire({\n\t\t\ttype: SocketCloseEventType.NodeSocketCloseEvent,\n\t\t\terror: error ? new Error(error) : undefined,\n\t\t\thadError: !!error\n\t\t});\n\t\tthis._remoteSockets.delete(socketId);\n\t}\n\n\t$onDidManagedSocketEnd(socketId: number): void {\n\t\tthis._remoteSockets.get(socketId)?.onEnd.fire();\n\t}\n}\n\nexport class MainThreadManagedSocket extends ManagedSocket {\n\tpublic static connect(\n\t\tsocketId: number,\n\t\tproxy: ExtHostManagedSocketsShape,\n\t\tpath: string, query: string, debugLabel: string,\n\t\thalf: RemoteSocketHalf\n\t): Promise<MainThreadManagedSocket> {\n\t\tconst socket = new MainThreadManagedSocket(socketId, proxy, debugLabel, half);\n\t\treturn connectManagedSocket(socket, path, query, debugLabel, half);\n\t}\n\n\tprivate constructor(\n\t\tprivate readonly socketId: number,\n\t\tprivate readonly proxy: ExtHostManagedSocketsShape,\n\t\tdebugLabel: string,\n\t\thalf: RemoteSocketHalf,\n\t) {\n\t\tsuper(debugLabel, half);\n\t}\n\n\tpublic override write(buffer: VSBuffer): void {\n\t\tthis.proxy.$remoteSocketWrite(this.socketId, buffer);\n\t}\n\n\tprotected override  closeRemote(): void {\n\t\tthis.proxy.$remoteSocketEnd(this.socketId);\n\t}\n\n\tpublic override drain(): Promise<void> {\n\t\treturn this.proxy.$remoteSocketDrain(this.socketId);\n\t}\n}\n"],
  "mappings": ";;;;;;;;;;;;AAKA,SAAS,gBAAgB;AACzB,SAAS,eAAe;AACxB,SAAS,YAAY,mBAAmB;AACxC,SAAS,SAAS,4BAA4B;AAC9C,SAAS,eAAe,kBAAkB,4BAA4B;AACtE,SAAS,yBAAyB,4BAA4B;AAC9D,SAAS,6BAA6B,sBAAsB;AAC5D,SAAS,gBAAgB,4BAA4B,aAAa,qCAAqC;AACvG,SAAS,iBAAiB,4BAA4B;AAG/C,IAAM,2BAAN,cAAuC,WAAoD;AAAA,EAMjG,YACC,gBAC8C,6BAC7C;AACD,UAAM;AAFwC;AAG9C,SAAK,SAAS,eAAe,SAAS,eAAe,qBAAqB;AAAA,EAC3E;AAAA,EAViB;AAAA,EACA,iBAAiB,oBAAI,IAAyB;AAAA,EAC9C,iBAAiB,oBAAI,IAA8B;AAAA,EAUpE,MAAM,uBAAuB,iBAAwC;AACpE,UAAM,OAAO;AACb,UAAM,gBAAgB,IAAI,MAA8D;AAAA,MAEvF,SAAS,WAA6C;AACrD,eAAQ,UAAU,OAAO;AAAA,MAC1B;AAAA,MAEA,QAAQ,WAAoC,MAAc,OAAe,YAAsC;AAC9G,eAAO,IAAI,QAAiB,CAAC,SAAS,WAAW;AAChD,cAAI,UAAU,OAAO,iBAAiB;AACrC,mBAAO,OAAO,IAAI,MAAM,mBAAmB,CAAC;AAAA,UAC7C;AAEA,gBAAM,YAAY,UAAU;AAC5B,eAAK,OAAO,kBAAkB,SAAS,EAAE,KAAK,cAAY;AACzD,kBAAM,OAAyB;AAAA,cAC9B,SAAS,IAAI,QAAQ;AAAA,cACrB,QAAQ,IAAI,QAAQ;AAAA,cACpB,OAAO,IAAI,QAAQ;AAAA,YACpB;AACA,iBAAK,eAAe,IAAI,UAAU,IAAI;AAEtC,oCAAwB,QAAQ,UAAU,KAAK,QAAQ,MAAM,OAAO,YAAY,IAAI,EAClF;AAAA,cACA,YAAU;AACT,uBAAO,aAAa,MAAM,KAAK,eAAe,OAAO,QAAQ,CAAC;AAC9D,wBAAQ,MAAM;AAAA,cACf;AAAA,cACA,SAAO;AACN,qBAAK,eAAe,OAAO,QAAQ;AACnC,uBAAO,GAAG;AAAA,cACX;AAAA,YAAC;AAAA,UACJ,CAAC,EAAE,MAAM,MAAM;AAAA,QAChB,CAAC;AAAA,MACF;AAAA,IACD;AACA,SAAK,eAAe,IAAI,iBAAiB,KAAK,4BAA4B,SAAS,qBAAqB,SAAS,aAAa,CAAC;AAAA,EAEhI;AAAA,EAEA,MAAM,yBAAyB,iBAAwC;AACtE,SAAK,eAAe,IAAI,eAAe,GAAG,QAAQ;AAAA,EACnD;AAAA,EAEA,4BAA4B,UAAkB,MAAsB;AACnE,SAAK,eAAe,IAAI,QAAQ,GAAG,OAAO,KAAK,IAAI;AAAA,EACpD;AAAA,EAEA,yBAAyB,UAAkB,OAAiC;AAC3E,SAAK,eAAe,IAAI,QAAQ,GAAG,QAAQ,KAAK;AAAA,MAC/C,MAAM,qBAAqB;AAAA,MAC3B,OAAO,QAAQ,IAAI,MAAM,KAAK,IAAI;AAAA,MAClC,UAAU,CAAC,CAAC;AAAA,IACb,CAAC;AACD,SAAK,eAAe,OAAO,QAAQ;AAAA,EACpC;AAAA,EAEA,uBAAuB,UAAwB;AAC9C,SAAK,eAAe,IAAI,QAAQ,GAAG,MAAM,KAAK;AAAA,EAC/C;AACD;AA3EkG;AAArF,2BAAN;AAAA,EADN,qBAAqB,YAAY,wBAAwB;AAAA,EASvD;AAAA,GARU;AA6EN,MAAM,gCAAgC,cAAc;AAAA,EAWlD,YACU,UACA,OACjB,YACA,MACC;AACD,UAAM,YAAY,IAAI;AALL;AACA;AAAA,EAKlB;AAAA,EA/GD,OA6F2D;AAAA;AAAA;AAAA,EAC1D,OAAc,QACb,UACA,OACA,MAAc,OAAe,YAC7B,MACmC;AACnC,UAAM,SAAS,IAAI,wBAAwB,UAAU,OAAO,YAAY,IAAI;AAC5E,WAAO,qBAAqB,QAAQ,MAAM,OAAO,YAAY,IAAI;AAAA,EAClE;AAAA,EAWgB,MAAM,QAAwB;AAC7C,SAAK,MAAM,mBAAmB,KAAK,UAAU,MAAM;AAAA,EACpD;AAAA,EAEoB,cAAoB;AACvC,SAAK,MAAM,iBAAiB,KAAK,QAAQ;AAAA,EAC1C;AAAA,EAEgB,QAAuB;AACtC,WAAO,KAAK,MAAM,mBAAmB,KAAK,QAAQ;AAAA,EACnD;AACD;",
  "names": []
}
