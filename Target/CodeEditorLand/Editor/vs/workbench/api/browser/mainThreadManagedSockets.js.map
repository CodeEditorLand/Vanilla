{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/api/browser/mainThreadManagedSockets.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport type { VSBuffer } from \"../../../base/common/buffer.js\";\nimport { Emitter } from \"../../../base/common/event.js\";\nimport {\n\tDisposable,\n\ttype IDisposable,\n} from \"../../../base/common/lifecycle.js\";\nimport {\n\ttype ISocket,\n\tSocketCloseEventType,\n} from \"../../../base/parts/ipc/common/ipc.net.js\";\nimport {\n\tManagedSocket,\n\ttype RemoteSocketHalf,\n\tconnectManagedSocket,\n} from \"../../../platform/remote/common/managedSocket.js\";\nimport {\n\ttype ManagedRemoteConnection,\n\tRemoteConnectionType,\n} from \"../../../platform/remote/common/remoteAuthorityResolver.js\";\nimport {\n\tIRemoteSocketFactoryService,\n\ttype ISocketFactory,\n} from \"../../../platform/remote/common/remoteSocketFactoryService.js\";\nimport {\n\ttype IExtHostContext,\n\textHostNamedCustomer,\n} from \"../../services/extensions/common/extHostCustomers.js\";\nimport {\n\tExtHostContext,\n\ttype ExtHostManagedSocketsShape,\n\tMainContext,\n\ttype MainThreadManagedSocketsShape,\n} from \"../common/extHost.protocol.js\";\n\n@extHostNamedCustomer(MainContext.MainThreadManagedSockets)\nexport class MainThreadManagedSockets\n\textends Disposable\n\timplements MainThreadManagedSocketsShape\n{\n\tprivate readonly _proxy: ExtHostManagedSocketsShape;\n\tprivate readonly _registrations = new Map<number, IDisposable>();\n\tprivate readonly _remoteSockets = new Map<number, RemoteSocketHalf>();\n\n\tconstructor(\n\t\textHostContext: IExtHostContext,\n\t\t@IRemoteSocketFactoryService\n\t\tprivate readonly _remoteSocketFactoryService: IRemoteSocketFactoryService,\n\t) {\n\t\tsuper();\n\t\tthis._proxy = extHostContext.getProxy(\n\t\t\tExtHostContext.ExtHostManagedSockets,\n\t\t);\n\t}\n\n\tasync $registerSocketFactory(socketFactoryId: number): Promise<void> {\n\t\tconst that = this;\n\t\tconst socketFactory = new (class\n\t\t\timplements ISocketFactory<RemoteConnectionType.Managed>\n\t\t{\n\t\t\tsupports(connectTo: ManagedRemoteConnection): boolean {\n\t\t\t\treturn connectTo.id === socketFactoryId;\n\t\t\t}\n\n\t\t\tconnect(\n\t\t\t\tconnectTo: ManagedRemoteConnection,\n\t\t\t\tpath: string,\n\t\t\t\tquery: string,\n\t\t\t\tdebugLabel: string,\n\t\t\t): Promise<ISocket> {\n\t\t\t\treturn new Promise<ISocket>((resolve, reject) => {\n\t\t\t\t\tif (connectTo.id !== socketFactoryId) {\n\t\t\t\t\t\treturn reject(new Error(\"Invalid connectTo\"));\n\t\t\t\t\t}\n\n\t\t\t\t\tconst factoryId = connectTo.id;\n\t\t\t\t\tthat._proxy\n\t\t\t\t\t\t.$openRemoteSocket(factoryId)\n\t\t\t\t\t\t.then((socketId) => {\n\t\t\t\t\t\t\tconst half: RemoteSocketHalf = {\n\t\t\t\t\t\t\t\tonClose: new Emitter(),\n\t\t\t\t\t\t\t\tonData: new Emitter(),\n\t\t\t\t\t\t\t\tonEnd: new Emitter(),\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\tthat._remoteSockets.set(socketId, half);\n\n\t\t\t\t\t\t\tMainThreadManagedSocket.connect(\n\t\t\t\t\t\t\t\tsocketId,\n\t\t\t\t\t\t\t\tthat._proxy,\n\t\t\t\t\t\t\t\tpath,\n\t\t\t\t\t\t\t\tquery,\n\t\t\t\t\t\t\t\tdebugLabel,\n\t\t\t\t\t\t\t\thalf,\n\t\t\t\t\t\t\t).then(\n\t\t\t\t\t\t\t\t(socket) => {\n\t\t\t\t\t\t\t\t\tsocket.onDidDispose(() =>\n\t\t\t\t\t\t\t\t\t\tthat._remoteSockets.delete(socketId),\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\tresolve(socket);\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t(err) => {\n\t\t\t\t\t\t\t\t\tthat._remoteSockets.delete(socketId);\n\t\t\t\t\t\t\t\t\treject(err);\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t})\n\t\t\t\t\t\t.catch(reject);\n\t\t\t\t});\n\t\t\t}\n\t\t})();\n\t\tthis._registrations.set(\n\t\t\tsocketFactoryId,\n\t\t\tthis._remoteSocketFactoryService.register(\n\t\t\t\tRemoteConnectionType.Managed,\n\t\t\t\tsocketFactory,\n\t\t\t),\n\t\t);\n\t}\n\n\tasync $unregisterSocketFactory(socketFactoryId: number): Promise<void> {\n\t\tthis._registrations.get(socketFactoryId)?.dispose();\n\t}\n\n\t$onDidManagedSocketHaveData(socketId: number, data: VSBuffer): void {\n\t\tthis._remoteSockets.get(socketId)?.onData.fire(data);\n\t}\n\n\t$onDidManagedSocketClose(\n\t\tsocketId: number,\n\t\terror: string | undefined,\n\t): void {\n\t\tthis._remoteSockets.get(socketId)?.onClose.fire({\n\t\t\ttype: SocketCloseEventType.NodeSocketCloseEvent,\n\t\t\terror: error ? new Error(error) : undefined,\n\t\t\thadError: !!error,\n\t\t});\n\t\tthis._remoteSockets.delete(socketId);\n\t}\n\n\t$onDidManagedSocketEnd(socketId: number): void {\n\t\tthis._remoteSockets.get(socketId)?.onEnd.fire();\n\t}\n}\n\nexport class MainThreadManagedSocket extends ManagedSocket {\n\tpublic static connect(\n\t\tsocketId: number,\n\t\tproxy: ExtHostManagedSocketsShape,\n\t\tpath: string,\n\t\tquery: string,\n\t\tdebugLabel: string,\n\t\thalf: RemoteSocketHalf,\n\t): Promise<MainThreadManagedSocket> {\n\t\tconst socket = new MainThreadManagedSocket(\n\t\t\tsocketId,\n\t\t\tproxy,\n\t\t\tdebugLabel,\n\t\t\thalf,\n\t\t);\n\t\treturn connectManagedSocket(socket, path, query, debugLabel, half);\n\t}\n\n\tprivate constructor(\n\t\tprivate readonly socketId: number,\n\t\tprivate readonly proxy: ExtHostManagedSocketsShape,\n\t\tdebugLabel: string,\n\t\thalf: RemoteSocketHalf,\n\t) {\n\t\tsuper(debugLabel, half);\n\t}\n\n\tpublic override write(buffer: VSBuffer): void {\n\t\tthis.proxy.$remoteSocketWrite(this.socketId, buffer);\n\t}\n\n\tprotected override closeRemote(): void {\n\t\tthis.proxy.$remoteSocketEnd(this.socketId);\n\t}\n\n\tpublic override drain(): Promise<void> {\n\t\treturn this.proxy.$remoteSocketDrain(this.socketId);\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
