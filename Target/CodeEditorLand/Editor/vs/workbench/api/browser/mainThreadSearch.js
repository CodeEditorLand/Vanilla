var S=Object.defineProperty;var u=Object.getOwnPropertyDescriptor;var v=(a,e,r,i)=>{for(var t=i>1?void 0:i?u(e,r):e,s=a.length-1,o;s>=0;s--)(o=a[s])&&(t=(i?o(e,r,t):o(t))||t);return i&&t&&S(e,r,t),t},h=(a,e)=>(r,i)=>e(r,i,a);import{CancellationToken as n}from"../../../base/common/cancellation.js";import{DisposableStore as y,dispose as I}from"../../../base/common/lifecycle.js";import{revive as _}from"../../../base/common/marshalling.js";import{URI as x}from"../../../base/common/uri.js";import{IConfigurationService as P}from"../../../platform/configuration/common/configuration.js";import{IContextKeyService as g}from"../../../platform/contextkey/common/contextkey.js";import{ITelemetryService as f}from"../../../platform/telemetry/common/telemetry.js";import*as C from"../../contrib/search/common/constants.js";import{extHostNamedCustomer as w}from"../../services/extensions/common/extHostCustomers.js";import{ISearchService as M,QueryType as m,SearchProviderType as d}from"../../services/search/common/search.js";import{ExtHostContext as T,MainContext as b}from"../common/extHost.protocol.js";let c=class{constructor(e,r,i,t,s){this._searchService=r;this._telemetryService=i;this.contextKeyService=s;this._proxy=e.getProxy(T.ExtHostSearch),this._proxy.$enableExtensionHostSearch()}_proxy;_searchProvider=new Map;dispose(){this._searchProvider.forEach(e=>e.dispose()),this._searchProvider.clear()}$registerTextSearchProvider(e,r){this._searchProvider.set(e,new p(this._searchService,d.text,r,e,this._proxy))}$registerAITextSearchProvider(e,r){C.SearchContext.hasAIResultProvider.bindTo(this.contextKeyService).set(!0),this._searchProvider.set(e,new p(this._searchService,d.aiText,r,e,this._proxy))}$registerFileSearchProvider(e,r){this._searchProvider.set(e,new p(this._searchService,d.file,r,e,this._proxy))}$unregisterProvider(e){I(this._searchProvider.get(e)),this._searchProvider.delete(e)}$handleFileMatch(e,r,i){const t=this._searchProvider.get(e);if(!t)throw new Error("Got result for unknown provider");t.handleFindMatch(r,i)}$handleTextMatch(e,r,i){const t=this._searchProvider.get(e);if(!t)throw new Error("Got result for unknown provider");t.handleFindMatch(r,i)}$handleTelemetry(e,r){this._telemetryService.publicLog(e,r)}};c=v([w(b.MainThreadSearch),h(1,M),h(2,f),h(3,P),h(4,g)],c);class l{constructor(e,r=++l._idPool,i=new Map){this.progress=e;this.id=r;this.matches=i}static _idPool=0;addMatch(e){const r=this.matches.get(e.resource.toString());r?r.results&&e.results&&r.results.push(...e.results):this.matches.set(e.resource.toString(),e),this.progress?.(e)}}class p{constructor(e,r,i,t,s){this._scheme=i;this._handle=t;this._proxy=s;this._registrations.add(e.registerSearchResultProvider(this._scheme,r,this))}_registrations=new y;_searches=new Map;dispose(){this._registrations.dispose()}fileSearch(e,r=n.None){return this.doSearch(e,void 0,r)}textSearch(e,r,i=n.None){return this.doSearch(e,r,i)}doSearch(e,r,i=n.None){if(!e.folderQueries.length)throw new Error("Empty folderQueries");const t=new l(r);this._searches.set(t.id,t);const s=this._provideSearchResults(e,t.id,i);return Promise.resolve(s).then(o=>(this._searches.delete(t.id),{results:Array.from(t.matches.values()),stats:o.stats,limitHit:o.limitHit,messages:o.messages}),o=>(this._searches.delete(t.id),Promise.reject(o)))}clearCache(e){return Promise.resolve(this._proxy.$clearCache(e))}handleFindMatch(e,r){const i=this._searches.get(e);i&&r.forEach(t=>{t.results?i.addMatch(_(t)):i.addMatch({resource:x.revive(t)})})}_provideSearchResults(e,r,i){switch(e.type){case m.File:return this._proxy.$provideFileSearchResults(this._handle,r,e,i);case m.Text:return this._proxy.$provideTextSearchResults(this._handle,r,e,i);default:return this._proxy.$provideAITextSearchResults(this._handle,r,e,i)}}}export{c as MainThreadSearch};
