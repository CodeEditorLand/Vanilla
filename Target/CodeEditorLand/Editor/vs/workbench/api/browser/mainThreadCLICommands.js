var I=Object.defineProperty;var h=Object.getOwnPropertyDescriptor;var g=(t,e,n,i)=>{for(var r=i>1?void 0:i?h(e,n):e,o=t.length-1,s;o>=0;o--)(s=t[o])&&(r=(i?s(e,n,r):s(r))||r);return i&&r&&I(e,n,r),r},m=(t,e)=>(n,i)=>e(n,i,t);import{Schemas as y}from"../../../base/common/network.js";import{isWeb as E}from"../../../base/common/platform.js";import{isString as f}from"../../../base/common/types.js";import{URI as S}from"../../../base/common/uri.js";import{localize as w}from"../../../nls.js";import{CommandsRegistry as v,ICommandService as u}from"../../../platform/commands/common/commands.js";import{IExtensionGalleryService as b,IExtensionManagementService as x}from"../../../platform/extensionManagement/common/extensionManagement.js";import{ExtensionManagementCLI as C}from"../../../platform/extensionManagement/common/extensionManagementCLI.js";import{getExtensionId as M}from"../../../platform/extensionManagement/common/extensionManagementUtil.js";import{IInstantiationService as A}from"../../../platform/instantiation/common/instantiation.js";import{ServiceCollection as _}from"../../../platform/instantiation/common/serviceCollection.js";import{ILabelService as L}from"../../../platform/label/common/label.js";import{AbstractMessageLogger as O}from"../../../platform/log/common/log.js";import{IOpenerService as W}from"../../../platform/opener/common/opener.js";import{IWorkbenchEnvironmentService as P}from"../../services/environment/common/environmentService.js";import{IExtensionManagementServerService as U}from"../../services/extensionManagement/common/extensionManagement.js";import{IExtensionManifestPropertiesService as j}from"../../services/extensions/common/extensionManifestPropertiesService.js";v.registerCommand("_remoteCLI.openExternal",(t,e)=>t.get(W).open(f(e)?e:S.revive(e),{openExternal:!0,allowTunneling:!0})),v.registerCommand("_remoteCLI.windowOpen",(t,e,n)=>{const i=t.get(u);return e.length?i.executeCommand("_files.windowOpen",e,n):i.executeCommand("_files.newWindow",n)}),v.registerCommand("_remoteCLI.getSystemStatus",t=>t.get(u).executeCommand("_issues.getSystemStatus")),v.registerCommand("_remoteCLI.manageExtensions",async(t,e)=>{const n=t.get(A),r=t.get(U).remoteExtensionManagementServer?.extensionManagementService;if(!r)return;const o=[],s=new class extends O{log(c,a){o.push(a)}},p=n.createChild(new _([x,r])).createInstance(l,s);if(e.list)await p.listExtensions(!!e.list.showVersions,e.list.category,void 0);else{const c=a=>a.map(d=>f(d)?d:S.revive(d));if(Array.isArray(e.install)&&e.install.length)try{await p.installExtensions(c(e.install),[],{isMachineScoped:!0},!!e.force)}catch(a){o.push(a.message)}if(Array.isArray(e.uninstall)&&e.uninstall.length)try{await p.uninstallExtensions(c(e.uninstall),!!e.force,void 0)}catch(a){o.push(a.message)}}return o.join(`
`)});let l=class extends C{constructor(n,i,r,o,s,p){super(n,i,r);this._extensionManifestPropertiesService=p;const c=s.remoteAuthority;this._location=c?o.getHostLabel(y.vscodeRemote,c):void 0}_location;get location(){return this._location}validateExtensionKind(n){return!this._extensionManifestPropertiesService.canExecuteOnWorkspace(n)&&!(E&&this._extensionManifestPropertiesService.canExecuteOnWeb(n))?(this.logger.info(w("cannot be installed","Cannot install the '{0}' extension because it is declared to not run in this setup.",M(n.publisher,n.name))),!1):!0}};l=g([m(1,x),m(2,b),m(3,L),m(4,P),m(5,j)],l);
