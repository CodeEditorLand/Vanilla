{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/api/browser/mainThreadNotebook.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { VSBuffer } from '../../../base/common/buffer.js';\nimport { CancellationToken } from '../../../base/common/cancellation.js';\nimport { Emitter } from '../../../base/common/event.js';\nimport { DisposableStore, dispose, IDisposable } from '../../../base/common/lifecycle.js';\nimport { StopWatch } from '../../../base/common/stopwatch.js';\nimport { assertType } from '../../../base/common/types.js';\nimport { URI } from '../../../base/common/uri.js';\nimport { CommandsRegistry } from '../../../platform/commands/common/commands.js';\nimport { ILogService } from '../../../platform/log/common/log.js';\nimport { NotebookDto } from './mainThreadNotebookDto.js';\nimport { INotebookCellStatusBarService } from '../../contrib/notebook/common/notebookCellStatusBarService.js';\nimport { INotebookCellStatusBarItemProvider, INotebookContributionData, INotebookExclusiveDocumentFilter, NotebookData, NotebookExtensionDescription, TransientOptions } from '../../contrib/notebook/common/notebookCommon.js';\nimport { INotebookService, SimpleNotebookProviderInfo } from '../../contrib/notebook/common/notebookService.js';\nimport { extHostNamedCustomer, IExtHostContext } from '../../services/extensions/common/extHostCustomers.js';\nimport { SerializableObjectWithBuffers } from '../../services/extensions/common/proxyIdentifier.js';\nimport { ExtHostContext, ExtHostNotebookShape, MainContext, MainThreadNotebookShape } from '../common/extHost.protocol.js';\nimport { IRelativePattern } from '../../../base/common/glob.js';\nimport { revive } from '../../../base/common/marshalling.js';\nimport { INotebookFileMatchNoModel } from '../../contrib/search/common/searchNotebookHelpers.js';\nimport { NotebookPriorityInfo } from '../../contrib/search/common/search.js';\nimport { coalesce } from '../../../base/common/arrays.js';\n\n@extHostNamedCustomer(MainContext.MainThreadNotebook)\nexport class MainThreadNotebooks implements MainThreadNotebookShape {\n\n\tprivate readonly _disposables = new DisposableStore();\n\n\tprivate readonly _proxy: ExtHostNotebookShape;\n\tprivate readonly _notebookSerializer = new Map<number, IDisposable>();\n\tprivate readonly _notebookCellStatusBarRegistrations = new Map<number, IDisposable>();\n\n\tconstructor(\n\t\textHostContext: IExtHostContext,\n\t\t@INotebookService private readonly _notebookService: INotebookService,\n\t\t@INotebookCellStatusBarService private readonly _cellStatusBarService: INotebookCellStatusBarService,\n\t\t@ILogService private readonly _logService: ILogService,\n\t) {\n\t\tthis._proxy = extHostContext.getProxy(ExtHostContext.ExtHostNotebook);\n\t}\n\n\tdispose(): void {\n\t\tthis._disposables.dispose();\n\t\tdispose(this._notebookSerializer.values());\n\t}\n\n\t$registerNotebookSerializer(handle: number, extension: NotebookExtensionDescription, viewType: string, options: TransientOptions, data: INotebookContributionData | undefined): void {\n\t\tconst disposables = new DisposableStore();\n\n\t\tdisposables.add(this._notebookService.registerNotebookSerializer(viewType, extension, {\n\t\t\toptions,\n\t\t\tdataToNotebook: async (data: VSBuffer): Promise<NotebookData> => {\n\t\t\t\tconst sw = new StopWatch();\n\t\t\t\tlet result: NotebookData;\n\t\t\t\tif (data.byteLength === 0 && viewType === 'interactive') {\n\t\t\t\t\t// we don't want any starting cells for an empty interactive window.\n\t\t\t\t\tresult = NotebookDto.fromNotebookDataDto({ cells: [], metadata: {} });\n\t\t\t\t} else {\n\t\t\t\t\tconst dto = await this._proxy.$dataToNotebook(handle, data, CancellationToken.None);\n\t\t\t\t\tresult = NotebookDto.fromNotebookDataDto(dto.value);\n\t\t\t\t}\n\t\t\t\tthis._logService.trace(`[NotebookSerializer] dataToNotebook DONE after ${sw.elapsed()}ms`, {\n\t\t\t\t\tviewType,\n\t\t\t\t\textensionId: extension.id.value,\n\t\t\t\t});\n\t\t\t\treturn result;\n\t\t\t},\n\t\t\tnotebookToData: (data: NotebookData): Promise<VSBuffer> => {\n\t\t\t\tconst sw = new StopWatch();\n\t\t\t\tconst result = this._proxy.$notebookToData(handle, new SerializableObjectWithBuffers(NotebookDto.toNotebookDataDto(data)), CancellationToken.None);\n\t\t\t\tthis._logService.trace(`[NotebookSerializer] notebookToData DONE after ${sw.elapsed()}`, {\n\t\t\t\t\tviewType,\n\t\t\t\t\textensionId: extension.id.value,\n\t\t\t\t});\n\t\t\t\treturn result;\n\t\t\t},\n\t\t\tsave: async (uri, versionId, options, token) => {\n\t\t\t\tconst stat = await this._proxy.$saveNotebook(handle, uri, versionId, options, token);\n\t\t\t\treturn {\n\t\t\t\t\t...stat,\n\t\t\t\t\tchildren: undefined,\n\t\t\t\t\tresource: uri\n\t\t\t\t};\n\t\t\t},\n\t\t\tsearchInNotebooks: async (textQuery, token, allPriorityInfo): Promise<{ results: INotebookFileMatchNoModel<URI>[]; limitHit: boolean }> => {\n\t\t\t\tconst contributedType = this._notebookService.getContributedNotebookType(viewType);\n\t\t\t\tif (!contributedType) {\n\t\t\t\t\treturn { results: [], limitHit: false };\n\t\t\t\t}\n\t\t\t\tconst fileNames = contributedType.selectors;\n\n\t\t\t\tconst includes = fileNames.map((selector) => {\n\t\t\t\t\tconst globPattern = (selector as INotebookExclusiveDocumentFilter).include || selector as IRelativePattern | string;\n\t\t\t\t\treturn globPattern.toString();\n\t\t\t\t});\n\n\t\t\t\tif (!includes.length) {\n\t\t\t\t\treturn {\n\t\t\t\t\t\tresults: [], limitHit: false\n\t\t\t\t\t};\n\t\t\t\t}\n\n\t\t\t\tconst thisPriorityInfo = coalesce<NotebookPriorityInfo>([{ isFromSettings: false, filenamePatterns: includes }, ...allPriorityInfo.get(viewType) ?? []]);\n\t\t\t\tconst otherEditorsPriorityInfo = Array.from(allPriorityInfo.keys())\n\t\t\t\t\t.flatMap(key => {\n\t\t\t\t\t\tif (key !== viewType) {\n\t\t\t\t\t\t\treturn allPriorityInfo.get(key) ?? [];\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn [];\n\t\t\t\t\t});\n\n\t\t\t\tconst searchComplete = await this._proxy.$searchInNotebooks(handle, textQuery, thisPriorityInfo, otherEditorsPriorityInfo, token);\n\t\t\t\tconst revivedResults: INotebookFileMatchNoModel<URI>[] = searchComplete.results.map(result => {\n\t\t\t\t\tconst resource = URI.revive(result.resource);\n\t\t\t\t\treturn {\n\t\t\t\t\t\tresource,\n\t\t\t\t\t\tcellResults: result.cellResults.map(e => revive(e))\n\t\t\t\t\t};\n\t\t\t\t});\n\t\t\t\treturn { results: revivedResults, limitHit: searchComplete.limitHit };\n\t\t\t}\n\t\t}));\n\n\t\tif (data) {\n\t\t\tdisposables.add(this._notebookService.registerContributedNotebookType(viewType, data));\n\t\t}\n\t\tthis._notebookSerializer.set(handle, disposables);\n\n\t\tthis._logService.trace('[NotebookSerializer] registered notebook serializer', {\n\t\t\tviewType,\n\t\t\textensionId: extension.id.value,\n\t\t});\n\t}\n\n\t$unregisterNotebookSerializer(handle: number): void {\n\t\tthis._notebookSerializer.get(handle)?.dispose();\n\t\tthis._notebookSerializer.delete(handle);\n\t}\n\n\t$emitCellStatusBarEvent(eventHandle: number): void {\n\t\tconst emitter = this._notebookCellStatusBarRegistrations.get(eventHandle);\n\t\tif (emitter instanceof Emitter) {\n\t\t\temitter.fire(undefined);\n\t\t}\n\t}\n\n\tasync $registerNotebookCellStatusBarItemProvider(handle: number, eventHandle: number | undefined, viewType: string): Promise<void> {\n\t\tconst that = this;\n\t\tconst provider: INotebookCellStatusBarItemProvider = {\n\t\t\tasync provideCellStatusBarItems(uri: URI, index: number, token: CancellationToken) {\n\t\t\t\tconst result = await that._proxy.$provideNotebookCellStatusBarItems(handle, uri, index, token);\n\t\t\t\treturn {\n\t\t\t\t\titems: result?.items ?? [],\n\t\t\t\t\tdispose() {\n\t\t\t\t\t\tif (result) {\n\t\t\t\t\t\t\tthat._proxy.$releaseNotebookCellStatusBarItems(result.cacheId);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t},\n\t\t\tviewType\n\t\t};\n\n\t\tif (typeof eventHandle === 'number') {\n\t\t\tconst emitter = new Emitter<void>();\n\t\t\tthis._notebookCellStatusBarRegistrations.set(eventHandle, emitter);\n\t\t\tprovider.onDidChangeStatusBarItems = emitter.event;\n\t\t}\n\n\t\tconst disposable = this._cellStatusBarService.registerCellStatusBarItemProvider(provider);\n\t\tthis._notebookCellStatusBarRegistrations.set(handle, disposable);\n\t}\n\n\tasync $unregisterNotebookCellStatusBarItemProvider(handle: number, eventHandle: number | undefined): Promise<void> {\n\t\tconst unregisterThing = (handle: number) => {\n\t\t\tconst entry = this._notebookCellStatusBarRegistrations.get(handle);\n\t\t\tif (entry) {\n\t\t\t\tthis._notebookCellStatusBarRegistrations.get(handle)?.dispose();\n\t\t\t\tthis._notebookCellStatusBarRegistrations.delete(handle);\n\t\t\t}\n\t\t};\n\t\tunregisterThing(handle);\n\t\tif (typeof eventHandle === 'number') {\n\t\t\tunregisterThing(eventHandle);\n\t\t}\n\t}\n}\n\nCommandsRegistry.registerCommand('_executeDataToNotebook', async (accessor, ...args) => {\n\n\tconst [notebookType, bytes] = args;\n\tassertType(typeof notebookType === 'string', 'string');\n\tassertType(bytes instanceof VSBuffer, 'VSBuffer');\n\n\tconst notebookService = accessor.get(INotebookService);\n\tconst info = await notebookService.withNotebookDataProvider(notebookType);\n\tif (!(info instanceof SimpleNotebookProviderInfo)) {\n\t\treturn;\n\t}\n\n\tconst dto = await info.serializer.dataToNotebook(bytes);\n\treturn new SerializableObjectWithBuffers(NotebookDto.toNotebookDataDto(dto));\n});\n\nCommandsRegistry.registerCommand('_executeNotebookToData', async (accessor, ...args) => {\n\n\tconst [notebookType, dto] = args;\n\tassertType(typeof notebookType === 'string', 'string');\n\tassertType(typeof dto === 'object');\n\n\tconst notebookService = accessor.get(INotebookService);\n\tconst info = await notebookService.withNotebookDataProvider(notebookType);\n\tif (!(info instanceof SimpleNotebookProviderInfo)) {\n\t\treturn;\n\t}\n\n\tconst data = NotebookDto.fromNotebookDataDto(dto.value);\n\tconst bytes = await info.serializer.notebookToData(data);\n\treturn bytes;\n});\n"],
  "mappings": ";;;;;;;;;;;;AAKA,SAAS,gBAAgB;AACzB,SAAS,yBAAyB;AAClC,SAAS,eAAe;AACxB,SAAS,iBAAiB,SAAS,mBAAmB;AACtD,SAAS,iBAAiB;AAC1B,SAAS,kBAAkB;AAC3B,SAAS,WAAW;AACpB,SAAS,wBAAwB;AACjC,SAAS,mBAAmB;AAC5B,SAAS,mBAAmB;AAC5B,SAAS,qCAAqC;AAC9C,SAAS,oCAAoC,2BAA2B,kCAAkC,cAAc,8BAA8B,wBAAwB;AAC9K,SAAS,kBAAkB,kCAAkC;AAC7D,SAAS,sBAAsB,uBAAuB;AACtD,SAAS,qCAAqC;AAC9C,SAAS,gBAAgB,sBAAsB,aAAa,+BAA+B;AAC3F,SAAS,wBAAwB;AACjC,SAAS,cAAc;AACvB,SAAS,iCAAiC;AAC1C,SAAS,4BAA4B;AACrC,SAAS,gBAAgB;AAGlB,IAAM,sBAAN,MAA6D;AAAA,EAQnE,YACC,gBACmC,kBACa,uBAClB,aAC7B;AAHkC;AACa;AAClB;AAE9B,SAAK,SAAS,eAAe,SAAS,eAAe,eAAe;AAAA,EACrE;AAAA,EAbiB,eAAe,IAAI,gBAAgB;AAAA,EAEnC;AAAA,EACA,sBAAsB,oBAAI,IAAyB;AAAA,EACnD,sCAAsC,oBAAI,IAAyB;AAAA,EAWpF,UAAgB;AACf,SAAK,aAAa,QAAQ;AAC1B,YAAQ,KAAK,oBAAoB,OAAO,CAAC;AAAA,EAC1C;AAAA,EAEA,4BAA4B,QAAgB,WAAyC,UAAkB,SAA2B,MAAmD;AACpL,UAAM,cAAc,IAAI,gBAAgB;AAExC,gBAAY,IAAI,KAAK,iBAAiB,2BAA2B,UAAU,WAAW;AAAA,MACrF;AAAA,MACA,gBAAgB,8BAAOA,UAA0C;AAChE,cAAM,KAAK,IAAI,UAAU;AACzB,YAAI;AACJ,YAAIA,MAAK,eAAe,KAAK,aAAa,eAAe;AAExD,mBAAS,YAAY,oBAAoB,EAAE,OAAO,CAAC,GAAG,UAAU,CAAC,EAAE,CAAC;AAAA,QACrE,OAAO;AACN,gBAAM,MAAM,MAAM,KAAK,OAAO,gBAAgB,QAAQA,OAAM,kBAAkB,IAAI;AAClF,mBAAS,YAAY,oBAAoB,IAAI,KAAK;AAAA,QACnD;AACA,aAAK,YAAY,MAAM,kDAAkD,GAAG,QAAQ,CAAC,MAAM;AAAA,UAC1F;AAAA,UACA,aAAa,UAAU,GAAG;AAAA,QAC3B,CAAC;AACD,eAAO;AAAA,MACR,GAfgB;AAAA,MAgBhB,gBAAgB,wBAACA,UAA0C;AAC1D,cAAM,KAAK,IAAI,UAAU;AACzB,cAAM,SAAS,KAAK,OAAO,gBAAgB,QAAQ,IAAI,8BAA8B,YAAY,kBAAkBA,KAAI,CAAC,GAAG,kBAAkB,IAAI;AACjJ,aAAK,YAAY,MAAM,kDAAkD,GAAG,QAAQ,CAAC,IAAI;AAAA,UACxF;AAAA,UACA,aAAa,UAAU,GAAG;AAAA,QAC3B,CAAC;AACD,eAAO;AAAA,MACR,GARgB;AAAA,MAShB,MAAM,8BAAO,KAAK,WAAWC,UAAS,UAAU;AAC/C,cAAM,OAAO,MAAM,KAAK,OAAO,cAAc,QAAQ,KAAK,WAAWA,UAAS,KAAK;AACnF,eAAO;AAAA,UACN,GAAG;AAAA,UACH,UAAU;AAAA,UACV,UAAU;AAAA,QACX;AAAA,MACD,GAPM;AAAA,MAQN,mBAAmB,8BAAO,WAAW,OAAO,oBAA+F;AAC1I,cAAM,kBAAkB,KAAK,iBAAiB,2BAA2B,QAAQ;AACjF,YAAI,CAAC,iBAAiB;AACrB,iBAAO,EAAE,SAAS,CAAC,GAAG,UAAU,MAAM;AAAA,QACvC;AACA,cAAM,YAAY,gBAAgB;AAElC,cAAM,WAAW,UAAU,IAAI,CAAC,aAAa;AAC5C,gBAAM,cAAe,SAA8C,WAAW;AAC9E,iBAAO,YAAY,SAAS;AAAA,QAC7B,CAAC;AAED,YAAI,CAAC,SAAS,QAAQ;AACrB,iBAAO;AAAA,YACN,SAAS,CAAC;AAAA,YAAG,UAAU;AAAA,UACxB;AAAA,QACD;AAEA,cAAM,mBAAmB,SAA+B,CAAC,EAAE,gBAAgB,OAAO,kBAAkB,SAAS,GAAG,GAAG,gBAAgB,IAAI,QAAQ,KAAK,CAAC,CAAC,CAAC;AACvJ,cAAM,2BAA2B,MAAM,KAAK,gBAAgB,KAAK,CAAC,EAChE,QAAQ,SAAO;AACf,cAAI,QAAQ,UAAU;AACrB,mBAAO,gBAAgB,IAAI,GAAG,KAAK,CAAC;AAAA,UACrC;AACA,iBAAO,CAAC;AAAA,QACT,CAAC;AAEF,cAAM,iBAAiB,MAAM,KAAK,OAAO,mBAAmB,QAAQ,WAAW,kBAAkB,0BAA0B,KAAK;AAChI,cAAM,iBAAmD,eAAe,QAAQ,IAAI,YAAU;AAC7F,gBAAM,WAAW,IAAI,OAAO,OAAO,QAAQ;AAC3C,iBAAO;AAAA,YACN;AAAA,YACA,aAAa,OAAO,YAAY,IAAI,OAAK,OAAO,CAAC,CAAC;AAAA,UACnD;AAAA,QACD,CAAC;AACD,eAAO,EAAE,SAAS,gBAAgB,UAAU,eAAe,SAAS;AAAA,MACrE,GApCmB;AAAA,IAqCpB,CAAC,CAAC;AAEF,QAAI,MAAM;AACT,kBAAY,IAAI,KAAK,iBAAiB,gCAAgC,UAAU,IAAI,CAAC;AAAA,IACtF;AACA,SAAK,oBAAoB,IAAI,QAAQ,WAAW;AAEhD,SAAK,YAAY,MAAM,uDAAuD;AAAA,MAC7E;AAAA,MACA,aAAa,UAAU,GAAG;AAAA,IAC3B,CAAC;AAAA,EACF;AAAA,EAEA,8BAA8B,QAAsB;AACnD,SAAK,oBAAoB,IAAI,MAAM,GAAG,QAAQ;AAC9C,SAAK,oBAAoB,OAAO,MAAM;AAAA,EACvC;AAAA,EAEA,wBAAwB,aAA2B;AAClD,UAAM,UAAU,KAAK,oCAAoC,IAAI,WAAW;AACxE,QAAI,mBAAmB,SAAS;AAC/B,cAAQ,KAAK,MAAS;AAAA,IACvB;AAAA,EACD;AAAA,EAEA,MAAM,2CAA2C,QAAgB,aAAiC,UAAiC;AAClI,UAAM,OAAO;AACb,UAAM,WAA+C;AAAA,MACpD,MAAM,0BAA0B,KAAU,OAAe,OAA0B;AAClF,cAAM,SAAS,MAAM,KAAK,OAAO,mCAAmC,QAAQ,KAAK,OAAO,KAAK;AAC7F,eAAO;AAAA,UACN,OAAO,QAAQ,SAAS,CAAC;AAAA,UACzB,UAAU;AACT,gBAAI,QAAQ;AACX,mBAAK,OAAO,mCAAmC,OAAO,OAAO;AAAA,YAC9D;AAAA,UACD;AAAA,QACD;AAAA,MACD;AAAA,MACA;AAAA,IACD;AAEA,QAAI,OAAO,gBAAgB,UAAU;AACpC,YAAM,UAAU,IAAI,QAAc;AAClC,WAAK,oCAAoC,IAAI,aAAa,OAAO;AACjE,eAAS,4BAA4B,QAAQ;AAAA,IAC9C;AAEA,UAAM,aAAa,KAAK,sBAAsB,kCAAkC,QAAQ;AACxF,SAAK,oCAAoC,IAAI,QAAQ,UAAU;AAAA,EAChE;AAAA,EAEA,MAAM,6CAA6C,QAAgB,aAAgD;AAClH,UAAM,kBAAkB,wBAACC,YAAmB;AAC3C,YAAM,QAAQ,KAAK,oCAAoC,IAAIA,OAAM;AACjE,UAAI,OAAO;AACV,aAAK,oCAAoC,IAAIA,OAAM,GAAG,QAAQ;AAC9D,aAAK,oCAAoC,OAAOA,OAAM;AAAA,MACvD;AAAA,IACD,GANwB;AAOxB,oBAAgB,MAAM;AACtB,QAAI,OAAO,gBAAgB,UAAU;AACpC,sBAAgB,WAAW;AAAA,IAC5B;AAAA,EACD;AACD;AAlKoE;AAAvD,sBAAN;AAAA,EADN,qBAAqB,YAAY,kBAAkB;AAAA,EAWjD;AAAA,EACA;AAAA,EACA;AAAA,GAZU;AAoKb,iBAAiB,gBAAgB,0BAA0B,OAAO,aAAa,SAAS;AAEvF,QAAM,CAAC,cAAc,KAAK,IAAI;AAC9B,aAAW,OAAO,iBAAiB,UAAU,QAAQ;AACrD,aAAW,iBAAiB,UAAU,UAAU;AAEhD,QAAM,kBAAkB,SAAS,IAAI,gBAAgB;AACrD,QAAM,OAAO,MAAM,gBAAgB,yBAAyB,YAAY;AACxE,MAAI,EAAE,gBAAgB,6BAA6B;AAClD;AAAA,EACD;AAEA,QAAM,MAAM,MAAM,KAAK,WAAW,eAAe,KAAK;AACtD,SAAO,IAAI,8BAA8B,YAAY,kBAAkB,GAAG,CAAC;AAC5E,CAAC;AAED,iBAAiB,gBAAgB,0BAA0B,OAAO,aAAa,SAAS;AAEvF,QAAM,CAAC,cAAc,GAAG,IAAI;AAC5B,aAAW,OAAO,iBAAiB,UAAU,QAAQ;AACrD,aAAW,OAAO,QAAQ,QAAQ;AAElC,QAAM,kBAAkB,SAAS,IAAI,gBAAgB;AACrD,QAAM,OAAO,MAAM,gBAAgB,yBAAyB,YAAY;AACxE,MAAI,EAAE,gBAAgB,6BAA6B;AAClD;AAAA,EACD;AAEA,QAAM,OAAO,YAAY,oBAAoB,IAAI,KAAK;AACtD,QAAM,QAAQ,MAAM,KAAK,WAAW,eAAe,IAAI;AACvD,SAAO;AACR,CAAC;",
  "names": ["data", "options", "handle"]
}
