{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/api/browser/mainThreadStatusBar.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { MainThreadStatusBarShape, MainContext, ExtHostContext, StatusBarItemDto } from '../common/extHost.protocol.js';\nimport { ThemeColor } from '../../../base/common/themables.js';\nimport { extHostNamedCustomer, IExtHostContext } from '../../services/extensions/common/extHostCustomers.js';\nimport { DisposableStore, toDisposable } from '../../../base/common/lifecycle.js';\nimport { Command } from '../../../editor/common/languages.js';\nimport { IAccessibilityInformation } from '../../../platform/accessibility/common/accessibility.js';\nimport { IMarkdownString } from '../../../base/common/htmlContent.js';\nimport { IExtensionStatusBarItemService, StatusBarUpdateKind } from './statusBarExtensionPoint.js';\nimport { IStatusbarEntry, StatusbarAlignment } from '../../services/statusbar/browser/statusbar.js';\n\n@extHostNamedCustomer(MainContext.MainThreadStatusBar)\nexport class MainThreadStatusBar implements MainThreadStatusBarShape {\n\n\tprivate readonly _store = new DisposableStore();\n\n\tconstructor(\n\t\textHostContext: IExtHostContext,\n\t\t@IExtensionStatusBarItemService private readonly statusbarService: IExtensionStatusBarItemService\n\t) {\n\t\tconst proxy = extHostContext.getProxy(ExtHostContext.ExtHostStatusBar);\n\n\t\t// once, at startup read existing items and send them over\n\t\tconst entries: StatusBarItemDto[] = [];\n\t\tfor (const [entryId, item] of statusbarService.getEntries()) {\n\t\t\tentries.push(asDto(entryId, item));\n\t\t}\n\n\t\tproxy.$acceptStaticEntries(entries);\n\n\t\tthis._store.add(statusbarService.onDidChange(e => {\n\t\t\tif (e.added) {\n\t\t\t\tproxy.$acceptStaticEntries([asDto(e.added[0], e.added[1])]);\n\t\t\t}\n\t\t}));\n\n\t\tfunction asDto(entryId: string, item: { entry: IStatusbarEntry; alignment: StatusbarAlignment; priority: number }): StatusBarItemDto {\n\t\t\treturn {\n\t\t\t\tentryId,\n\t\t\t\tname: item.entry.name,\n\t\t\t\ttext: item.entry.text,\n\t\t\t\ttooltip: item.entry.tooltip as string | undefined,\n\t\t\t\tcommand: typeof item.entry.command === 'string' ? item.entry.command : typeof item.entry.command === 'object' ? item.entry.command.id : undefined,\n\t\t\t\tpriority: item.priority,\n\t\t\t\talignLeft: item.alignment === StatusbarAlignment.LEFT,\n\t\t\t\taccessibilityInformation: item.entry.ariaLabel ? { label: item.entry.ariaLabel, role: item.entry.role } : undefined\n\t\t\t};\n\t\t}\n\t}\n\n\tdispose(): void {\n\t\tthis._store.dispose();\n\t}\n\n\t$setEntry(entryId: string, id: string, extensionId: string | undefined, name: string, text: string, tooltip: IMarkdownString | string | undefined, command: Command | undefined, color: string | ThemeColor | undefined, backgroundColor: ThemeColor | undefined, alignLeft: boolean, priority: number | undefined, accessibilityInformation: IAccessibilityInformation | undefined): void {\n\t\tconst kind = this.statusbarService.setOrUpdateEntry(entryId, id, extensionId, name, text, tooltip, command, color, backgroundColor, alignLeft, priority, accessibilityInformation);\n\t\tif (kind === StatusBarUpdateKind.DidDefine) {\n\t\t\tthis._store.add(toDisposable(() => this.statusbarService.unsetEntry(entryId)));\n\t\t}\n\t}\n\n\t$disposeEntry(entryId: string) {\n\t\tthis.statusbarService.unsetEntry(entryId);\n\t}\n}\n"],
  "mappings": ";;;;;;;;;;;;AAKA,SAAS,0BAA0B,aAAa,gBAAgB,wBAAwB;AACxF,SAAS,kBAAkB;AAC3B,SAAS,sBAAsB,uBAAuB;AACtD,SAAS,iBAAiB,oBAAoB;AAC9C,SAAS,eAAe;AACxB,SAAS,iCAAiC;AAC1C,SAAS,uBAAuB;AAChC,SAAS,gCAAgC,2BAA2B;AACpE,SAAS,iBAAiB,0BAA0B;AAG7C,IAAM,sBAAN,MAA8D;AAAA,EAIpE,YACC,gBACiD,kBAChD;AADgD;AAEjD,UAAM,QAAQ,eAAe,SAAS,eAAe,gBAAgB;AAGrE,UAAM,UAA8B,CAAC;AACrC,eAAW,CAAC,SAAS,IAAI,KAAK,iBAAiB,WAAW,GAAG;AAC5D,cAAQ,KAAK,MAAM,SAAS,IAAI,CAAC;AAAA,IAClC;AAEA,UAAM,qBAAqB,OAAO;AAElC,SAAK,OAAO,IAAI,iBAAiB,YAAY,OAAK;AACjD,UAAI,EAAE,OAAO;AACZ,cAAM,qBAAqB,CAAC,MAAM,EAAE,MAAM,CAAC,GAAG,EAAE,MAAM,CAAC,CAAC,CAAC,CAAC;AAAA,MAC3D;AAAA,IACD,CAAC,CAAC;AAEF,aAAS,MAAM,SAAiB,MAAqG;AACpI,aAAO;AAAA,QACN;AAAA,QACA,MAAM,KAAK,MAAM;AAAA,QACjB,MAAM,KAAK,MAAM;AAAA,QACjB,SAAS,KAAK,MAAM;AAAA,QACpB,SAAS,OAAO,KAAK,MAAM,YAAY,WAAW,KAAK,MAAM,UAAU,OAAO,KAAK,MAAM,YAAY,WAAW,KAAK,MAAM,QAAQ,KAAK;AAAA,QACxI,UAAU,KAAK;AAAA,QACf,WAAW,KAAK,cAAc,mBAAmB;AAAA,QACjD,0BAA0B,KAAK,MAAM,YAAY,EAAE,OAAO,KAAK,MAAM,WAAW,MAAM,KAAK,MAAM,KAAK,IAAI;AAAA,MAC3G;AAAA,IACD;AAXS;AAAA,EAYV;AAAA,EAlCiB,SAAS,IAAI,gBAAgB;AAAA,EAoC9C,UAAgB;AACf,SAAK,OAAO,QAAQ;AAAA,EACrB;AAAA,EAEA,UAAU,SAAiB,IAAY,aAAiC,MAAc,MAAc,SAA+C,SAA8B,OAAwC,iBAAyC,WAAoB,UAA8B,0BAAuE;AAC1X,UAAM,OAAO,KAAK,iBAAiB,iBAAiB,SAAS,IAAI,aAAa,MAAM,MAAM,SAAS,SAAS,OAAO,iBAAiB,WAAW,UAAU,wBAAwB;AACjL,QAAI,SAAS,oBAAoB,WAAW;AAC3C,WAAK,OAAO,IAAI,aAAa,MAAM,KAAK,iBAAiB,WAAW,OAAO,CAAC,CAAC;AAAA,IAC9E;AAAA,EACD;AAAA,EAEA,cAAc,SAAiB;AAC9B,SAAK,iBAAiB,WAAW,OAAO;AAAA,EACzC;AACD;AApDqE;AAAxD,sBAAN;AAAA,EADN,qBAAqB,YAAY,mBAAmB;AAAA,EAOlD;AAAA,GANU;",
  "names": []
}
