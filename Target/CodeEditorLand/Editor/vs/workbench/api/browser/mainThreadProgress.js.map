{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/api/browser/mainThreadProgress.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Action } from \"../../../base/common/actions.js\";\nimport { localize } from \"../../../nls.js\";\nimport { ICommandService } from \"../../../platform/commands/common/commands.js\";\nimport {\n\ttype IProgress,\n\ttype IProgressNotificationOptions,\n\ttype IProgressOptions,\n\tIProgressService,\n\ttype IProgressStep,\n\tProgressLocation,\n} from \"../../../platform/progress/common/progress.js\";\nimport {\n\ttype IExtHostContext,\n\textHostNamedCustomer,\n} from \"../../services/extensions/common/extHostCustomers.js\";\nimport {\n\tExtHostContext,\n\ttype ExtHostProgressShape,\n\tMainContext,\n\ttype MainThreadProgressShape,\n} from \"../common/extHost.protocol.js\";\n\nclass ManageExtensionAction extends Action {\n\tconstructor(\n\t\textensionId: string,\n\t\tlabel: string,\n\t\tcommandService: ICommandService,\n\t) {\n\t\tsuper(extensionId, label, undefined, true, () => {\n\t\t\treturn commandService.executeCommand(\n\t\t\t\t\"_extensions.manage\",\n\t\t\t\textensionId,\n\t\t\t);\n\t\t});\n\t}\n}\n\n@extHostNamedCustomer(MainContext.MainThreadProgress)\nexport class MainThreadProgress implements MainThreadProgressShape {\n\tprivate readonly _progressService: IProgressService;\n\tprivate _progress = new Map<\n\t\tnumber,\n\t\t{ resolve: () => void; progress: IProgress<IProgressStep> }\n\t>();\n\tprivate readonly _proxy: ExtHostProgressShape;\n\n\tconstructor(\n\t\textHostContext: IExtHostContext,\n\t\t@IProgressService progressService: IProgressService,\n\t\t@ICommandService private readonly _commandService: ICommandService\n\t) {\n\t\tthis._proxy = extHostContext.getProxy(ExtHostContext.ExtHostProgress);\n\t\tthis._progressService = progressService;\n\t}\n\n\tdispose(): void {\n\t\tthis._progress.forEach((handle) => handle.resolve());\n\t\tthis._progress.clear();\n\t}\n\n\tasync $startProgress(\n\t\thandle: number,\n\t\toptions: IProgressOptions,\n\t\textensionId?: string,\n\t): Promise<void> {\n\t\tconst task = this._createTask(handle);\n\n\t\tif (options.location === ProgressLocation.Notification && extensionId) {\n\t\t\tconst notificationOptions: IProgressNotificationOptions = {\n\t\t\t\t...options,\n\t\t\t\tlocation: ProgressLocation.Notification,\n\t\t\t\tsecondaryActions: [\n\t\t\t\t\tnew ManageExtensionAction(\n\t\t\t\t\t\textensionId,\n\t\t\t\t\t\tlocalize(\"manageExtension\", \"Manage Extension\"),\n\t\t\t\t\t\tthis._commandService,\n\t\t\t\t\t),\n\t\t\t\t],\n\t\t\t};\n\n\t\t\toptions = notificationOptions;\n\t\t}\n\n\t\tthis._progressService.withProgress(options, task, () =>\n\t\t\tthis._proxy.$acceptProgressCanceled(handle),\n\t\t);\n\t}\n\n\t$progressReport(handle: number, message: IProgressStep): void {\n\t\tconst entry = this._progress.get(handle);\n\t\tentry?.progress.report(message);\n\t}\n\n\t$progressEnd(handle: number): void {\n\t\tconst entry = this._progress.get(handle);\n\t\tif (entry) {\n\t\t\tentry.resolve();\n\t\t\tthis._progress.delete(handle);\n\t\t}\n\t}\n\n\tprivate _createTask(handle: number) {\n\t\treturn (progress: IProgress<IProgressStep>) => {\n\t\t\treturn new Promise<void>((resolve) => {\n\t\t\t\tthis._progress.set(handle, { resolve, progress });\n\t\t\t});\n\t\t};\n\t}\n}\n"],
  "mappings": ";;;;;;;;;;;;AAKA,SAAS,cAAc;AACvB,SAAS,gBAAgB;AACzB,SAAS,uBAAuB;AAChC;AAAA,EAIC;AAAA,EAEA;AAAA,OACM;AACP;AAAA,EAEC;AAAA,OACM;AACP;AAAA,EACC;AAAA,EAEA;AAAA,OAEM;AAEP,MAAM,8BAA8B,OAAO;AAAA,EA3B3C,OA2B2C;AAAA;AAAA;AAAA,EAC1C,YACC,aACA,OACA,gBACC;AACD,UAAM,aAAa,OAAO,QAAW,MAAM,MAAM;AAChD,aAAO,eAAe;AAAA,QACrB;AAAA,QACA;AAAA,MACD;AAAA,IACD,CAAC;AAAA,EACF;AACD;AAGO,IAAM,qBAAN,MAA4D;AAAA,EAQlE,YACC,gBACkB,iBACgB,iBACjC;AADiC;AAElC,SAAK,SAAS,eAAe,SAAS,eAAe,eAAe;AACpE,SAAK,mBAAmB;AAAA,EACzB;AAAA,EAdiB;AAAA,EACT,YAAY,oBAAI,IAGtB;AAAA,EACe;AAAA,EAWjB,UAAgB;AACf,SAAK,UAAU,QAAQ,CAAC,WAAW,OAAO,QAAQ,CAAC;AACnD,SAAK,UAAU,MAAM;AAAA,EACtB;AAAA,EAEA,MAAM,eACL,QACA,SACA,aACgB;AAChB,UAAM,OAAO,KAAK,YAAY,MAAM;AAEpC,QAAI,QAAQ,aAAa,iBAAiB,gBAAgB,aAAa;AACtE,YAAM,sBAAoD;AAAA,QACzD,GAAG;AAAA,QACH,UAAU,iBAAiB;AAAA,QAC3B,kBAAkB;AAAA,UACjB,IAAI;AAAA,YACH;AAAA,YACA,SAAS,mBAAmB,kBAAkB;AAAA,YAC9C,KAAK;AAAA,UACN;AAAA,QACD;AAAA,MACD;AAEA,gBAAU;AAAA,IACX;AAEA,SAAK,iBAAiB;AAAA,MAAa;AAAA,MAAS;AAAA,MAAM,MACjD,KAAK,OAAO,wBAAwB,MAAM;AAAA,IAC3C;AAAA,EACD;AAAA,EAEA,gBAAgB,QAAgB,SAA8B;AAC7D,UAAM,QAAQ,KAAK,UAAU,IAAI,MAAM;AACvC,WAAO,SAAS,OAAO,OAAO;AAAA,EAC/B;AAAA,EAEA,aAAa,QAAsB;AAClC,UAAM,QAAQ,KAAK,UAAU,IAAI,MAAM;AACvC,QAAI,OAAO;AACV,YAAM,QAAQ;AACd,WAAK,UAAU,OAAO,MAAM;AAAA,IAC7B;AAAA,EACD;AAAA,EAEQ,YAAY,QAAgB;AACnC,WAAO,CAAC,aAAuC;AAC9C,aAAO,IAAI,QAAc,CAAC,YAAY;AACrC,aAAK,UAAU,IAAI,QAAQ,EAAE,SAAS,SAAS,CAAC;AAAA,MACjD,CAAC;AAAA,IACF;AAAA,EACD;AACD;AAtEmE;AAAtD,qBAAN;AAAA,EADN,qBAAqB,YAAY,kBAAkB;AAAA,EAWjD;AAAA,EACA;AAAA,GAXU;",
  "names": []
}
