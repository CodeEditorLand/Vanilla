{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/api/browser/mainThreadConfiguration.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport type { IDisposable } from \"../../../base/common/lifecycle.js\";\nimport { URI } from \"../../../base/common/uri.js\";\nimport {\n\tConfigurationTarget,\n\ttype IConfigurationOverrides,\n\tIConfigurationService,\n} from \"../../../platform/configuration/common/configuration.js\";\nimport {\n\tExtensions as ConfigurationExtensions,\n\tConfigurationScope,\n\ttype IConfigurationRegistry,\n\tgetScopes,\n} from \"../../../platform/configuration/common/configurationRegistry.js\";\nimport { IEnvironmentService } from \"../../../platform/environment/common/environment.js\";\nimport { Registry } from \"../../../platform/registry/common/platform.js\";\nimport {\n\tIWorkspaceContextService,\n\tWorkbenchState,\n} from \"../../../platform/workspace/common/workspace.js\";\nimport {\n\ttype IExtHostContext,\n\textHostNamedCustomer,\n} from \"../../services/extensions/common/extHostCustomers.js\";\nimport {\n\tExtHostContext,\n\ttype IConfigurationInitData,\n\tMainContext,\n\ttype MainThreadConfigurationShape,\n} from \"../common/extHost.protocol.js\";\n\n@extHostNamedCustomer(MainContext.MainThreadConfiguration)\nexport class MainThreadConfiguration implements MainThreadConfigurationShape {\n\tprivate readonly _configurationListener: IDisposable;\n\n\tconstructor(\n\t\textHostContext: IExtHostContext,\n\t\t@IWorkspaceContextService private readonly _workspaceContextService: IWorkspaceContextService,\n\t\t@IConfigurationService private readonly configurationService: IConfigurationService,\n\t\t@IEnvironmentService private readonly _environmentService: IEnvironmentService,\n\t) {\n\t\tconst proxy = extHostContext.getProxy(ExtHostContext.ExtHostConfiguration);\n\n\t\tproxy.$initializeConfiguration(this._getConfigurationData());\n\t\tthis._configurationListener = configurationService.onDidChangeConfiguration(e => {\n\t\t\tproxy.$acceptConfigurationChanged(this._getConfigurationData(), e.change);\n\t\t});\n\t}\n\n\tprivate _getConfigurationData(): IConfigurationInitData {\n\t\tconst configurationData: IConfigurationInitData = {\n\t\t\t...this.configurationService.getConfigurationData()!,\n\t\t\tconfigurationScopes: [],\n\t\t};\n\t\t// Send configurations scopes only in development mode.\n\t\tif (\n\t\t\t!this._environmentService.isBuilt ||\n\t\t\tthis._environmentService.isExtensionDevelopment\n\t\t) {\n\t\t\tconfigurationData.configurationScopes = getScopes();\n\t\t}\n\t\treturn configurationData;\n\t}\n\n\tpublic dispose(): void {\n\t\tthis._configurationListener.dispose();\n\t}\n\n\t$updateConfigurationOption(\n\t\ttarget: ConfigurationTarget | null,\n\t\tkey: string,\n\t\tvalue: any,\n\t\toverrides: IConfigurationOverrides | undefined,\n\t\tscopeToLanguage: boolean | undefined,\n\t): Promise<void> {\n\t\toverrides = {\n\t\t\tresource: overrides?.resource\n\t\t\t\t? URI.revive(overrides.resource)\n\t\t\t\t: undefined,\n\t\t\toverrideIdentifier: overrides?.overrideIdentifier,\n\t\t};\n\t\treturn this.writeConfiguration(\n\t\t\ttarget,\n\t\t\tkey,\n\t\t\tvalue,\n\t\t\toverrides,\n\t\t\tscopeToLanguage,\n\t\t);\n\t}\n\n\t$removeConfigurationOption(\n\t\ttarget: ConfigurationTarget | null,\n\t\tkey: string,\n\t\toverrides: IConfigurationOverrides | undefined,\n\t\tscopeToLanguage: boolean | undefined,\n\t): Promise<void> {\n\t\toverrides = {\n\t\t\tresource: overrides?.resource\n\t\t\t\t? URI.revive(overrides.resource)\n\t\t\t\t: undefined,\n\t\t\toverrideIdentifier: overrides?.overrideIdentifier,\n\t\t};\n\t\treturn this.writeConfiguration(\n\t\t\ttarget,\n\t\t\tkey,\n\t\t\tundefined,\n\t\t\toverrides,\n\t\t\tscopeToLanguage,\n\t\t);\n\t}\n\n\tprivate writeConfiguration(\n\t\ttarget: ConfigurationTarget | null,\n\t\tkey: string,\n\t\tvalue: any,\n\t\toverrides: IConfigurationOverrides,\n\t\tscopeToLanguage: boolean | undefined,\n\t): Promise<void> {\n\t\ttarget =\n\t\t\ttarget !== null && target !== undefined\n\t\t\t\t? target\n\t\t\t\t: this.deriveConfigurationTarget(key, overrides);\n\t\tconst configurationValue = this.configurationService.inspect(\n\t\t\tkey,\n\t\t\toverrides,\n\t\t);\n\t\tswitch (target) {\n\t\t\tcase ConfigurationTarget.MEMORY:\n\t\t\t\treturn this._updateValue(\n\t\t\t\t\tkey,\n\t\t\t\t\tvalue,\n\t\t\t\t\ttarget,\n\t\t\t\t\tconfigurationValue?.memory?.override,\n\t\t\t\t\toverrides,\n\t\t\t\t\tscopeToLanguage,\n\t\t\t\t);\n\t\t\tcase ConfigurationTarget.WORKSPACE_FOLDER:\n\t\t\t\treturn this._updateValue(\n\t\t\t\t\tkey,\n\t\t\t\t\tvalue,\n\t\t\t\t\ttarget,\n\t\t\t\t\tconfigurationValue?.workspaceFolder?.override,\n\t\t\t\t\toverrides,\n\t\t\t\t\tscopeToLanguage,\n\t\t\t\t);\n\t\t\tcase ConfigurationTarget.WORKSPACE:\n\t\t\t\treturn this._updateValue(\n\t\t\t\t\tkey,\n\t\t\t\t\tvalue,\n\t\t\t\t\ttarget,\n\t\t\t\t\tconfigurationValue?.workspace?.override,\n\t\t\t\t\toverrides,\n\t\t\t\t\tscopeToLanguage,\n\t\t\t\t);\n\t\t\tcase ConfigurationTarget.USER_REMOTE:\n\t\t\t\treturn this._updateValue(\n\t\t\t\t\tkey,\n\t\t\t\t\tvalue,\n\t\t\t\t\ttarget,\n\t\t\t\t\tconfigurationValue?.userRemote?.override,\n\t\t\t\t\toverrides,\n\t\t\t\t\tscopeToLanguage,\n\t\t\t\t);\n\t\t\tdefault:\n\t\t\t\treturn this._updateValue(\n\t\t\t\t\tkey,\n\t\t\t\t\tvalue,\n\t\t\t\t\ttarget,\n\t\t\t\t\tconfigurationValue?.userLocal?.override,\n\t\t\t\t\toverrides,\n\t\t\t\t\tscopeToLanguage,\n\t\t\t\t);\n\t\t}\n\t}\n\n\tprivate _updateValue(\n\t\tkey: string,\n\t\tvalue: any,\n\t\tconfigurationTarget: ConfigurationTarget,\n\t\toverriddenValue: any | undefined,\n\t\toverrides: IConfigurationOverrides,\n\t\tscopeToLanguage: boolean | undefined,\n\t): Promise<void> {\n\t\toverrides =\n\t\t\tscopeToLanguage === true\n\t\t\t\t? overrides\n\t\t\t\t: scopeToLanguage === false\n\t\t\t\t\t? { resource: overrides.resource }\n\t\t\t\t\t: overrides.overrideIdentifier &&\n\t\t\t\t\t\t\toverriddenValue !== undefined\n\t\t\t\t\t\t? overrides\n\t\t\t\t\t\t: { resource: overrides.resource };\n\t\treturn this.configurationService.updateValue(\n\t\t\tkey,\n\t\t\tvalue,\n\t\t\toverrides,\n\t\t\tconfigurationTarget,\n\t\t\t{ donotNotifyError: true },\n\t\t);\n\t}\n\n\tprivate deriveConfigurationTarget(\n\t\tkey: string,\n\t\toverrides: IConfigurationOverrides,\n\t): ConfigurationTarget {\n\t\tif (\n\t\t\toverrides.resource &&\n\t\t\tthis._workspaceContextService.getWorkbenchState() ===\n\t\t\t\tWorkbenchState.WORKSPACE\n\t\t) {\n\t\t\tconst configurationProperties = Registry.as<IConfigurationRegistry>(\n\t\t\t\tConfigurationExtensions.Configuration,\n\t\t\t).getConfigurationProperties();\n\t\t\tif (\n\t\t\t\tconfigurationProperties[key] &&\n\t\t\t\t(configurationProperties[key].scope ===\n\t\t\t\t\tConfigurationScope.RESOURCE ||\n\t\t\t\t\tconfigurationProperties[key].scope ===\n\t\t\t\t\t\tConfigurationScope.LANGUAGE_OVERRIDABLE)\n\t\t\t) {\n\t\t\t\treturn ConfigurationTarget.WORKSPACE_FOLDER;\n\t\t\t}\n\t\t}\n\t\treturn ConfigurationTarget.WORKSPACE;\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
