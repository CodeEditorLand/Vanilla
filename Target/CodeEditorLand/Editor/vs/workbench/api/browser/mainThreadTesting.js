var x=Object.defineProperty;var I=Object.getOwnPropertyDescriptor;var m=(u,p,e,t)=>{for(var i=t>1?void 0:t?I(p,e):p,r=u.length-1,n;r>=0;r--)(n=u[r])&&(i=(t?n(p,e,i):n(i))||i);return t&&i&&x(p,e,i),i},d=(u,p)=>(e,t)=>p(e,t,u);import{Event as $}from"../../../base/common/event.js";import{Disposable as P,DisposableStore as D,MutableDisposable as w,toDisposable as L}from"../../../base/common/lifecycle.js";import{observableValue as R,transaction as b}from"../../../base/common/observable.js";import{WellDefinedPrefixTree as k}from"../../../base/common/prefixTree.js";import{URI as T}from"../../../base/common/uri.js";import{Range as y}from"../../../editor/common/core/range.js";import{IUriIdentityService as E}from"../../../platform/uriIdentity/common/uriIdentity.js";import{TestCoverage as z}from"../../contrib/testing/common/testCoverage.js";import{TestId as M}from"../../contrib/testing/common/testId.js";import{ITestProfileService as F}from"../../contrib/testing/common/testProfileService.js";import{LiveTestResult as c}from"../../contrib/testing/common/testResult.js";import{ITestResultService as O}from"../../contrib/testing/common/testResultService.js";import{ITestService as H}from"../../contrib/testing/common/testService.js";import{CoverageDetails as U,IFileCoverage as _,ITestItem as q,ITestMessage as j,TestRunProfileBitset as h,TestsDiffOp as C}from"../../contrib/testing/common/testTypes.js";import{extHostNamedCustomer as B}from"../../services/extensions/common/extHostCustomers.js";import{ExtHostContext as V,MainContext as W}from"../common/extHost.protocol.js";let v=class extends P{constructor(e,t,i,r,n){super();this.uriIdentityService=t;this.testService=i;this.testProfiles=r;this.resultService=n;this.proxy=e.getProxy(V.ExtHostTesting),this._register(this.testService.registerExtHost({provideTestFollowups:(s,o)=>this.proxy.$provideTestFollowups(s,o),executeTestFollowup:s=>this.proxy.$executeTestFollowup(s),disposeTestFollowups:s=>this.proxy.$disposeTestFollowups(s),getTestsRelatedToCode:(s,o,a)=>this.proxy.$getTestsRelatedToCode(s,o,a)})),this._register(this.testService.onDidCancelTestRun(({runId:s,taskId:o})=>{this.proxy.$cancelExtensionTestRun(s,o)})),this._register($.debounce(r.onDidChange,(s,o)=>o)(()=>{const s={};for(const o of[h.Run,h.Debug,h.Coverage])for(const a of this.testProfiles.getGroupDefaultProfiles(o))s[a.controllerId]??=[],s[a.controllerId].push(a.profileId);this.proxy.$setDefaultRunProfiles(s)})),this._register(n.onResultsChanged(s=>{if("completed"in s){const o=s.completed.toJSONWithMessages();o&&this.proxy.$publishTestResults([o])}else"removed"in s&&s.removed.forEach(o=>{o instanceof c&&this.proxy.$disposeRun(o.id)})}))}proxy;diffListener=this._register(new w);testProviderRegistrations=new Map;$markTestRetired(e){let t;if(e){t=new k;for(const i of e)t.insert(M.fromString(i).path,void 0)}for(const i of this.resultService.results)i instanceof c&&i.markRetired(t)}$publishTestRunProfile(e){const t=this.testProviderRegistrations.get(e.controllerId);t&&this.testProfiles.addProfile(t.instance,e)}$updateTestRunConfig(e,t,i){this.testProfiles.updateProfile(e,t,i)}$removeTestProfile(e,t){this.testProfiles.removeProfile(e,t)}$addTestsToRun(e,t,i){this.withLiveRun(t,r=>r.addTestChainToRun(e,i.map(n=>q.deserialize(this.uriIdentityService,n))))}$appendCoverage(e,t,i){this.withLiveRun(e,r=>{const n=r.tasks.find(o=>o.id===t);if(!n)return;const s=_.deserialize(this.uriIdentityService,i);b(o=>{let a=n.coverage.read(void 0);a?a.append(s,o):(a=new z(r,t,this.uriIdentityService,{getCoverageDetails:(l,g,f)=>this.proxy.$getCoverageDetails(l,g,f).then(S=>S.map(U.deserialize))}),a.append(s,o),n.coverage.set(a,o))})})}$startedExtensionTestRun(e){this.resultService.createLiveResult(e)}$startedTestRunTask(e,t){this.withLiveRun(e,i=>i.addTask(t))}$finishedTestRunTask(e,t){this.withLiveRun(e,i=>i.markTaskComplete(t))}$finishedExtensionTestRun(e){this.withLiveRun(e,t=>t.markComplete())}$updateTestStateInRun(e,t,i,r,n){this.withLiveRun(e,s=>s.updateState(i,t,r,n))}$appendOutputToRun(e,t,i,r,n){const s=r&&{uri:T.revive(r.uri),range:y.lift(r.range)};this.withLiveRun(e,o=>o.appendOutput(i,t,s,n))}$appendTestMessagesInRun(e,t,i,r){const n=this.resultService.getResult(e);if(n&&n instanceof c)for(const s of r)n.appendMessage(i,t,j.deserialize(this.uriIdentityService,s))}$registerTestController(e,t,i){const r=new D,n=R(`${e}.label`,t),s=R(`${e}.cap`,i),o={id:e,label:n,capabilities:s,syncTests:()=>this.proxy.$syncTests(),refreshTests:a=>this.proxy.$refreshTests(e,a),configureRunProfile:a=>this.proxy.$configureRunProfile(e,a),runTests:(a,l)=>this.proxy.$runControllerTests(a,l),startContinuousRun:(a,l)=>this.proxy.$startContinuousRun(a,l),expandTest:(a,l)=>this.proxy.$expandTest(a,isFinite(l)?l:-1),getRelatedCode:(a,l)=>this.proxy.$getCodeRelatedToTest(a,l).then(g=>g.map(f=>({uri:T.revive(f.uri),range:y.lift(f.range)})))};r.add(L(()=>this.testProfiles.removeProfile(e))),r.add(this.testService.registerTestController(e,o)),this.testProviderRegistrations.set(e,{instance:o,label:n,capabilities:s,disposable:r})}$updateController(e,t){const i=this.testProviderRegistrations.get(e);i&&b(r=>{t.label!==void 0&&i.label.set(t.label,r),t.capabilities!==void 0&&i.capabilities.set(t.capabilities,r)})}$unregisterTestController(e){this.testProviderRegistrations.get(e)?.disposable.dispose(),this.testProviderRegistrations.delete(e)}$subscribeToDiffs(){this.proxy.$acceptDiff(this.testService.collection.getReviverDiff().map(C.serialize)),this.diffListener.value=this.testService.onDidProcessDiff(this.proxy.$acceptDiff,this.proxy)}$unsubscribeFromDiffs(){this.diffListener.clear()}$publishDiff(e,t){this.testService.publishDiff(e,t.map(i=>C.deserialize(this.uriIdentityService,i)))}async $runTests(e,t){return(await this.testService.runResolvedTests(e,t)).id}async $getCoverageDetails(e,t,i,r){return await this.resultService.getResult(e)?.tasks[t]?.coverage.get()?.getUri(T.from(i))?.details(r)||[]}dispose(){super.dispose();for(const e of this.testProviderRegistrations.values())e.disposable.dispose();this.testProviderRegistrations.clear()}withLiveRun(e,t){const i=this.resultService.getResult(e);return i&&i instanceof c?t(i):void 0}};v=m([B(W.MainThreadTesting),d(1,E),d(2,H),d(3,F),d(4,O)],v);export{v as MainThreadTesting};
