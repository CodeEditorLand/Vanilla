{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/api/browser/mainThreadTesting.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { VSBuffer } from '../../../base/common/buffer.js';\nimport { CancellationToken } from '../../../base/common/cancellation.js';\nimport { Event } from '../../../base/common/event.js';\nimport { Disposable, DisposableStore, IDisposable, MutableDisposable, toDisposable } from '../../../base/common/lifecycle.js';\nimport { ISettableObservable, observableValue, transaction } from '../../../base/common/observable.js';\nimport { WellDefinedPrefixTree } from '../../../base/common/prefixTree.js';\nimport { URI, UriComponents } from '../../../base/common/uri.js';\nimport { Range } from '../../../editor/common/core/range.js';\nimport { IUriIdentityService } from '../../../platform/uriIdentity/common/uriIdentity.js';\nimport { TestCoverage } from '../../contrib/testing/common/testCoverage.js';\nimport { TestId } from '../../contrib/testing/common/testId.js';\nimport { ITestProfileService } from '../../contrib/testing/common/testProfileService.js';\nimport { LiveTestResult } from '../../contrib/testing/common/testResult.js';\nimport { ITestResultService } from '../../contrib/testing/common/testResultService.js';\nimport { IMainThreadTestController, ITestService } from '../../contrib/testing/common/testService.js';\nimport { CoverageDetails, ExtensionRunTestsRequest, IFileCoverage, ITestItem, ITestMessage, ITestRunProfile, ITestRunTask, ResolvedTestRunRequest, TestControllerCapability, TestResultState, TestRunProfileBitset, TestsDiffOp } from '../../contrib/testing/common/testTypes.js';\nimport { IExtHostContext, extHostNamedCustomer } from '../../services/extensions/common/extHostCustomers.js';\nimport { ExtHostContext, ExtHostTestingShape, ILocationDto, ITestControllerPatch, MainContext, MainThreadTestingShape } from '../common/extHost.protocol.js';\n\n@extHostNamedCustomer(MainContext.MainThreadTesting)\nexport class MainThreadTesting extends Disposable implements MainThreadTestingShape {\n\tprivate readonly proxy: ExtHostTestingShape;\n\tprivate readonly diffListener = this._register(new MutableDisposable());\n\tprivate readonly testProviderRegistrations = new Map<string, {\n\t\tinstance: IMainThreadTestController;\n\t\tlabel: ISettableObservable<string>;\n\t\tcapabilities: ISettableObservable<TestControllerCapability>;\n\t\tdisposable: IDisposable;\n\t}>();\n\n\tconstructor(\n\t\textHostContext: IExtHostContext,\n\t\t@IUriIdentityService private readonly uriIdentityService: IUriIdentityService,\n\t\t@ITestService private readonly testService: ITestService,\n\t\t@ITestProfileService private readonly testProfiles: ITestProfileService,\n\t\t@ITestResultService private readonly resultService: ITestResultService,\n\t) {\n\t\tsuper();\n\t\tthis.proxy = extHostContext.getProxy(ExtHostContext.ExtHostTesting);\n\n\t\tthis._register(this.testService.registerExtHost({\n\t\t\tprovideTestFollowups: (req, token) => this.proxy.$provideTestFollowups(req, token),\n\t\t\texecuteTestFollowup: id => this.proxy.$executeTestFollowup(id),\n\t\t\tdisposeTestFollowups: ids => this.proxy.$disposeTestFollowups(ids),\n\t\t\tgetTestsRelatedToCode: (uri, position, token) => this.proxy.$getTestsRelatedToCode(uri, position, token),\n\t\t}));\n\n\t\tthis._register(this.testService.onDidCancelTestRun(({ runId, taskId }) => {\n\t\t\tthis.proxy.$cancelExtensionTestRun(runId, taskId);\n\t\t}));\n\n\t\tthis._register(Event.debounce(testProfiles.onDidChange, (_last, e) => e)(() => {\n\t\t\tconst obj: Record</* controller id */string, /* profile id */ number[]> = {};\n\t\t\tfor (const group of [TestRunProfileBitset.Run, TestRunProfileBitset.Debug, TestRunProfileBitset.Coverage]) {\n\t\t\t\tfor (const profile of this.testProfiles.getGroupDefaultProfiles(group)) {\n\t\t\t\t\tobj[profile.controllerId] ??= [];\n\t\t\t\t\tobj[profile.controllerId].push(profile.profileId);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.proxy.$setDefaultRunProfiles(obj);\n\t\t}));\n\n\t\tthis._register(resultService.onResultsChanged(evt => {\n\t\t\tif ('completed' in evt) {\n\t\t\t\tconst serialized = evt.completed.toJSONWithMessages();\n\t\t\t\tif (serialized) {\n\t\t\t\t\tthis.proxy.$publishTestResults([serialized]);\n\t\t\t\t}\n\t\t\t} else if ('removed' in evt) {\n\t\t\t\tevt.removed.forEach(r => {\n\t\t\t\t\tif (r instanceof LiveTestResult) {\n\t\t\t\t\t\tthis.proxy.$disposeRun(r.id);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t}));\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\t$markTestRetired(testIds: string[] | undefined): void {\n\t\tlet tree: WellDefinedPrefixTree<undefined> | undefined;\n\t\tif (testIds) {\n\t\t\ttree = new WellDefinedPrefixTree();\n\t\t\tfor (const id of testIds) {\n\t\t\t\ttree.insert(TestId.fromString(id).path, undefined);\n\t\t\t}\n\t\t}\n\n\t\tfor (const result of this.resultService.results) {\n\t\t\t// all non-live results are already entirely outdated\n\t\t\tif (result instanceof LiveTestResult) {\n\t\t\t\tresult.markRetired(tree);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\t$publishTestRunProfile(profile: ITestRunProfile): void {\n\t\tconst controller = this.testProviderRegistrations.get(profile.controllerId);\n\t\tif (controller) {\n\t\t\tthis.testProfiles.addProfile(controller.instance, profile);\n\t\t}\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\t$updateTestRunConfig(controllerId: string, profileId: number, update: Partial<ITestRunProfile>): void {\n\t\tthis.testProfiles.updateProfile(controllerId, profileId, update);\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\t$removeTestProfile(controllerId: string, profileId: number): void {\n\t\tthis.testProfiles.removeProfile(controllerId, profileId);\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\t$addTestsToRun(controllerId: string, runId: string, tests: ITestItem.Serialized[]): void {\n\t\tthis.withLiveRun(runId, r => r.addTestChainToRun(controllerId,\n\t\t\ttests.map(t => ITestItem.deserialize(this.uriIdentityService, t))));\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\t$appendCoverage(runId: string, taskId: string, coverage: IFileCoverage.Serialized): void {\n\t\tthis.withLiveRun(runId, run => {\n\t\t\tconst task = run.tasks.find(t => t.id === taskId);\n\t\t\tif (!task) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst deserialized = IFileCoverage.deserialize(this.uriIdentityService, coverage);\n\n\t\t\ttransaction(tx => {\n\t\t\t\tlet value = task.coverage.read(undefined);\n\t\t\t\tif (!value) {\n\t\t\t\t\tvalue = new TestCoverage(run, taskId, this.uriIdentityService, {\n\t\t\t\t\t\tgetCoverageDetails: (id, testId, token) => this.proxy.$getCoverageDetails(id, testId, token)\n\t\t\t\t\t\t\t.then(r => r.map(CoverageDetails.deserialize)),\n\t\t\t\t\t});\n\t\t\t\t\tvalue.append(deserialized, tx);\n\t\t\t\t\t(task.coverage as ISettableObservable<TestCoverage>).set(value, tx);\n\t\t\t\t} else {\n\t\t\t\t\tvalue.append(deserialized, tx);\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\t$startedExtensionTestRun(req: ExtensionRunTestsRequest): void {\n\t\tthis.resultService.createLiveResult(req);\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\t$startedTestRunTask(runId: string, task: ITestRunTask): void {\n\t\tthis.withLiveRun(runId, r => r.addTask(task));\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\t$finishedTestRunTask(runId: string, taskId: string): void {\n\t\tthis.withLiveRun(runId, r => r.markTaskComplete(taskId));\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\t$finishedExtensionTestRun(runId: string): void {\n\t\tthis.withLiveRun(runId, r => r.markComplete());\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\tpublic $updateTestStateInRun(runId: string, taskId: string, testId: string, state: TestResultState, duration?: number): void {\n\t\tthis.withLiveRun(runId, r => r.updateState(testId, taskId, state, duration));\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\tpublic $appendOutputToRun(runId: string, taskId: string, output: VSBuffer, locationDto?: ILocationDto, testId?: string): void {\n\t\tconst location = locationDto && {\n\t\t\turi: URI.revive(locationDto.uri),\n\t\t\trange: Range.lift(locationDto.range)\n\t\t};\n\n\t\tthis.withLiveRun(runId, r => r.appendOutput(output, taskId, location, testId));\n\t}\n\n\n\t/**\n\t * @inheritdoc\n\t */\n\tpublic $appendTestMessagesInRun(runId: string, taskId: string, testId: string, messages: ITestMessage.Serialized[]): void {\n\t\tconst r = this.resultService.getResult(runId);\n\t\tif (r && r instanceof LiveTestResult) {\n\t\t\tfor (const message of messages) {\n\t\t\t\tr.appendMessage(testId, taskId, ITestMessage.deserialize(this.uriIdentityService, message));\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\tpublic $registerTestController(controllerId: string, _label: string, _capabilities: TestControllerCapability) {\n\t\tconst disposable = new DisposableStore();\n\t\tconst label = observableValue(`${controllerId}.label`, _label);\n\t\tconst capabilities = observableValue(`${controllerId}.cap`, _capabilities);\n\t\tconst controller: IMainThreadTestController = {\n\t\t\tid: controllerId,\n\t\t\tlabel,\n\t\t\tcapabilities,\n\t\t\tsyncTests: () => this.proxy.$syncTests(),\n\t\t\trefreshTests: token => this.proxy.$refreshTests(controllerId, token),\n\t\t\tconfigureRunProfile: id => this.proxy.$configureRunProfile(controllerId, id),\n\t\t\trunTests: (reqs, token) => this.proxy.$runControllerTests(reqs, token),\n\t\t\tstartContinuousRun: (reqs, token) => this.proxy.$startContinuousRun(reqs, token),\n\t\t\texpandTest: (testId, levels) => this.proxy.$expandTest(testId, isFinite(levels) ? levels : -1),\n\t\t\tgetRelatedCode: (testId, token) => this.proxy.$getCodeRelatedToTest(testId, token).then(locations =>\n\t\t\t\tlocations.map(l => ({\n\t\t\t\t\turi: URI.revive(l.uri),\n\t\t\t\t\trange: Range.lift(l.range)\n\t\t\t\t})),\n\t\t\t),\n\t\t};\n\n\t\tdisposable.add(toDisposable(() => this.testProfiles.removeProfile(controllerId)));\n\t\tdisposable.add(this.testService.registerTestController(controllerId, controller));\n\n\t\tthis.testProviderRegistrations.set(controllerId, {\n\t\t\tinstance: controller,\n\t\t\tlabel,\n\t\t\tcapabilities,\n\t\t\tdisposable\n\t\t});\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\tpublic $updateController(controllerId: string, patch: ITestControllerPatch) {\n\t\tconst controller = this.testProviderRegistrations.get(controllerId);\n\t\tif (!controller) {\n\t\t\treturn;\n\t\t}\n\n\t\ttransaction(tx => {\n\t\t\tif (patch.label !== undefined) {\n\t\t\t\tcontroller.label.set(patch.label, tx);\n\t\t\t}\n\n\t\t\tif (patch.capabilities !== undefined) {\n\t\t\t\tcontroller.capabilities.set(patch.capabilities, tx);\n\t\t\t}\n\t\t});\n\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\tpublic $unregisterTestController(controllerId: string) {\n\t\tthis.testProviderRegistrations.get(controllerId)?.disposable.dispose();\n\t\tthis.testProviderRegistrations.delete(controllerId);\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\tpublic $subscribeToDiffs(): void {\n\t\tthis.proxy.$acceptDiff(this.testService.collection.getReviverDiff().map(TestsDiffOp.serialize));\n\t\tthis.diffListener.value = this.testService.onDidProcessDiff(this.proxy.$acceptDiff, this.proxy);\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\tpublic $unsubscribeFromDiffs(): void {\n\t\tthis.diffListener.clear();\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\tpublic $publishDiff(controllerId: string, diff: TestsDiffOp.Serialized[]): void {\n\t\tthis.testService.publishDiff(controllerId,\n\t\t\tdiff.map(d => TestsDiffOp.deserialize(this.uriIdentityService, d)));\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\tpublic async $runTests(req: ResolvedTestRunRequest, token: CancellationToken): Promise<string> {\n\t\tconst result = await this.testService.runResolvedTests(req, token);\n\t\treturn result.id;\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\tpublic async $getCoverageDetails(resultId: string, taskIndex: number, uri: UriComponents, token: CancellationToken): Promise<CoverageDetails.Serialized[]> {\n\t\tconst details = await this.resultService.getResult(resultId)\n\t\t\t?.tasks[taskIndex]\n\t\t\t?.coverage.get()\n\t\t\t?.getUri(URI.from(uri))\n\t\t\t?.details(token);\n\n\t\t// Return empty if nothing. Some failure is always possible here because\n\t\t// results might be cleared in the meantime.\n\t\treturn details || [];\n\t}\n\n\tpublic override dispose() {\n\t\tsuper.dispose();\n\t\tfor (const subscription of this.testProviderRegistrations.values()) {\n\t\t\tsubscription.disposable.dispose();\n\t\t}\n\t\tthis.testProviderRegistrations.clear();\n\t}\n\n\tprivate withLiveRun<T>(runId: string, fn: (run: LiveTestResult) => T): T | undefined {\n\t\tconst r = this.resultService.getResult(runId);\n\t\treturn r && r instanceof LiveTestResult ? fn(r) : undefined;\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
