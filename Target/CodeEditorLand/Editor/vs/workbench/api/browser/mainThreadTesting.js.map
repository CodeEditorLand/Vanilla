{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/api/browser/mainThreadTesting.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport type { VSBuffer } from \"../../../base/common/buffer.js\";\nimport type { CancellationToken } from \"../../../base/common/cancellation.js\";\nimport { Event } from \"../../../base/common/event.js\";\nimport {\n\tDisposable,\n\tDisposableStore,\n\ttype IDisposable,\n\tMutableDisposable,\n\ttoDisposable,\n} from \"../../../base/common/lifecycle.js\";\nimport {\n\ttype ISettableObservable,\n\tobservableValue,\n\ttransaction,\n} from \"../../../base/common/observable.js\";\nimport { WellDefinedPrefixTree } from \"../../../base/common/prefixTree.js\";\nimport { URI, type UriComponents } from \"../../../base/common/uri.js\";\nimport { Range } from \"../../../editor/common/core/range.js\";\nimport { IUriIdentityService } from \"../../../platform/uriIdentity/common/uriIdentity.js\";\nimport { TestCoverage } from \"../../contrib/testing/common/testCoverage.js\";\nimport { TestId } from \"../../contrib/testing/common/testId.js\";\nimport { ITestProfileService } from \"../../contrib/testing/common/testProfileService.js\";\nimport { LiveTestResult } from \"../../contrib/testing/common/testResult.js\";\nimport { ITestResultService } from \"../../contrib/testing/common/testResultService.js\";\nimport {\n\ttype IMainThreadTestController,\n\tITestService,\n} from \"../../contrib/testing/common/testService.js\";\nimport {\n\tCoverageDetails,\n\ttype ExtensionRunTestsRequest,\n\tIFileCoverage,\n\tITestItem,\n\tITestMessage,\n\ttype ITestRunProfile,\n\ttype ITestRunTask,\n\ttype ResolvedTestRunRequest,\n\ttype TestControllerCapability,\n\ttype TestResultState,\n\tTestRunProfileBitset,\n\tTestsDiffOp,\n} from \"../../contrib/testing/common/testTypes.js\";\nimport {\n\ttype IExtHostContext,\n\textHostNamedCustomer,\n} from \"../../services/extensions/common/extHostCustomers.js\";\nimport {\n\tExtHostContext,\n\ttype ExtHostTestingShape,\n\ttype ILocationDto,\n\ttype ITestControllerPatch,\n\tMainContext,\n\ttype MainThreadTestingShape,\n} from \"../common/extHost.protocol.js\";\n\n@extHostNamedCustomer(MainContext.MainThreadTesting)\nexport class MainThreadTesting\n\textends Disposable\n\timplements MainThreadTestingShape\n{\n\tprivate readonly proxy: ExtHostTestingShape;\n\tprivate readonly diffListener = this._register(new MutableDisposable());\n\tprivate readonly testProviderRegistrations = new Map<\n\t\tstring,\n\t\t{\n\t\t\tinstance: IMainThreadTestController;\n\t\t\tlabel: ISettableObservable<string>;\n\t\t\tcapabilities: ISettableObservable<TestControllerCapability>;\n\t\t\tdisposable: IDisposable;\n\t\t}\n\t>();\n\n\tconstructor(\n\t\textHostContext: IExtHostContext,\n\t\t@IUriIdentityService\n\t\tprivate readonly uriIdentityService: IUriIdentityService,\n\t\t@ITestService private readonly testService: ITestService,\n\t\t@ITestProfileService private readonly testProfiles: ITestProfileService,\n\t\t@ITestResultService private readonly resultService: ITestResultService,\n\t) {\n\t\tsuper();\n\t\tthis.proxy = extHostContext.getProxy(ExtHostContext.ExtHostTesting);\n\n\t\tthis._register(\n\t\t\tthis.testService.registerExtHost({\n\t\t\t\tprovideTestFollowups: (req, token) =>\n\t\t\t\t\tthis.proxy.$provideTestFollowups(req, token),\n\t\t\t\texecuteTestFollowup: (id) =>\n\t\t\t\t\tthis.proxy.$executeTestFollowup(id),\n\t\t\t\tdisposeTestFollowups: (ids) =>\n\t\t\t\t\tthis.proxy.$disposeTestFollowups(ids),\n\t\t\t\tgetTestsRelatedToCode: (uri, position, token) =>\n\t\t\t\t\tthis.proxy.$getTestsRelatedToCode(uri, position, token),\n\t\t\t}),\n\t\t);\n\n\t\tthis._register(\n\t\t\tthis.testService.onDidCancelTestRun(({ runId, taskId }) => {\n\t\t\t\tthis.proxy.$cancelExtensionTestRun(runId, taskId);\n\t\t\t}),\n\t\t);\n\n\t\tthis._register(\n\t\t\tEvent.debounce(\n\t\t\t\ttestProfiles.onDidChange,\n\t\t\t\t(_last, e) => e,\n\t\t\t)(() => {\n\t\t\t\tconst obj: Record<\n\t\t\t\t\t/* controller id */ string,\n\t\t\t\t\t/* profile id */ number[]\n\t\t\t\t> = {};\n\t\t\t\tfor (const group of [\n\t\t\t\t\tTestRunProfileBitset.Run,\n\t\t\t\t\tTestRunProfileBitset.Debug,\n\t\t\t\t\tTestRunProfileBitset.Coverage,\n\t\t\t\t]) {\n\t\t\t\t\tfor (const profile of this.testProfiles.getGroupDefaultProfiles(\n\t\t\t\t\t\tgroup,\n\t\t\t\t\t)) {\n\t\t\t\t\t\tobj[profile.controllerId] ??= [];\n\t\t\t\t\t\tobj[profile.controllerId].push(profile.profileId);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tthis.proxy.$setDefaultRunProfiles(obj);\n\t\t\t}),\n\t\t);\n\n\t\tthis._register(\n\t\t\tresultService.onResultsChanged((evt) => {\n\t\t\t\tif (\"completed\" in evt) {\n\t\t\t\t\tconst serialized = evt.completed.toJSONWithMessages();\n\t\t\t\t\tif (serialized) {\n\t\t\t\t\t\tthis.proxy.$publishTestResults([serialized]);\n\t\t\t\t\t}\n\t\t\t\t} else if (\"removed\" in evt) {\n\t\t\t\t\tevt.removed.forEach((r) => {\n\t\t\t\t\t\tif (r instanceof LiveTestResult) {\n\t\t\t\t\t\t\tthis.proxy.$disposeRun(r.id);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}),\n\t\t);\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\t$markTestRetired(testIds: string[] | undefined): void {\n\t\tlet tree: WellDefinedPrefixTree<undefined> | undefined;\n\t\tif (testIds) {\n\t\t\ttree = new WellDefinedPrefixTree();\n\t\t\tfor (const id of testIds) {\n\t\t\t\ttree.insert(TestId.fromString(id).path, undefined);\n\t\t\t}\n\t\t}\n\n\t\tfor (const result of this.resultService.results) {\n\t\t\t// all non-live results are already entirely outdated\n\t\t\tif (result instanceof LiveTestResult) {\n\t\t\t\tresult.markRetired(tree);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\t$publishTestRunProfile(profile: ITestRunProfile): void {\n\t\tconst controller = this.testProviderRegistrations.get(\n\t\t\tprofile.controllerId,\n\t\t);\n\t\tif (controller) {\n\t\t\tthis.testProfiles.addProfile(controller.instance, profile);\n\t\t}\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\t$updateTestRunConfig(\n\t\tcontrollerId: string,\n\t\tprofileId: number,\n\t\tupdate: Partial<ITestRunProfile>,\n\t): void {\n\t\tthis.testProfiles.updateProfile(controllerId, profileId, update);\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\t$removeTestProfile(controllerId: string, profileId: number): void {\n\t\tthis.testProfiles.removeProfile(controllerId, profileId);\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\t$addTestsToRun(\n\t\tcontrollerId: string,\n\t\trunId: string,\n\t\ttests: ITestItem.Serialized[],\n\t): void {\n\t\tthis.withLiveRun(runId, (r) =>\n\t\t\tr.addTestChainToRun(\n\t\t\t\tcontrollerId,\n\t\t\t\ttests.map((t) =>\n\t\t\t\t\tITestItem.deserialize(this.uriIdentityService, t),\n\t\t\t\t),\n\t\t\t),\n\t\t);\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\t$appendCoverage(\n\t\trunId: string,\n\t\ttaskId: string,\n\t\tcoverage: IFileCoverage.Serialized,\n\t): void {\n\t\tthis.withLiveRun(runId, (run) => {\n\t\t\tconst task = run.tasks.find((t) => t.id === taskId);\n\t\t\tif (!task) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst deserialized = IFileCoverage.deserialize(\n\t\t\t\tthis.uriIdentityService,\n\t\t\t\tcoverage,\n\t\t\t);\n\n\t\t\ttransaction((tx) => {\n\t\t\t\tlet value = task.coverage.read(undefined);\n\t\t\t\tif (value) {\n\t\t\t\t\tvalue.append(deserialized, tx);\n\t\t\t\t} else {\n\t\t\t\t\tvalue = new TestCoverage(\n\t\t\t\t\t\trun,\n\t\t\t\t\t\ttaskId,\n\t\t\t\t\t\tthis.uriIdentityService,\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tgetCoverageDetails: (id, testId, token) =>\n\t\t\t\t\t\t\t\tthis.proxy\n\t\t\t\t\t\t\t\t\t.$getCoverageDetails(id, testId, token)\n\t\t\t\t\t\t\t\t\t.then((r) =>\n\t\t\t\t\t\t\t\t\t\tr.map(CoverageDetails.deserialize),\n\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t},\n\t\t\t\t\t);\n\t\t\t\t\tvalue.append(deserialized, tx);\n\t\t\t\t\t(task.coverage as ISettableObservable<TestCoverage>).set(\n\t\t\t\t\t\tvalue,\n\t\t\t\t\t\ttx,\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\t$startedExtensionTestRun(req: ExtensionRunTestsRequest): void {\n\t\tthis.resultService.createLiveResult(req);\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\t$startedTestRunTask(runId: string, task: ITestRunTask): void {\n\t\tthis.withLiveRun(runId, (r) => r.addTask(task));\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\t$finishedTestRunTask(runId: string, taskId: string): void {\n\t\tthis.withLiveRun(runId, (r) => r.markTaskComplete(taskId));\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\t$finishedExtensionTestRun(runId: string): void {\n\t\tthis.withLiveRun(runId, (r) => r.markComplete());\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\tpublic $updateTestStateInRun(\n\t\trunId: string,\n\t\ttaskId: string,\n\t\ttestId: string,\n\t\tstate: TestResultState,\n\t\tduration?: number,\n\t): void {\n\t\tthis.withLiveRun(runId, (r) =>\n\t\t\tr.updateState(testId, taskId, state, duration),\n\t\t);\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\tpublic $appendOutputToRun(\n\t\trunId: string,\n\t\ttaskId: string,\n\t\toutput: VSBuffer,\n\t\tlocationDto?: ILocationDto,\n\t\ttestId?: string,\n\t): void {\n\t\tconst location = locationDto && {\n\t\t\turi: URI.revive(locationDto.uri),\n\t\t\trange: Range.lift(locationDto.range),\n\t\t};\n\n\t\tthis.withLiveRun(runId, (r) =>\n\t\t\tr.appendOutput(output, taskId, location, testId),\n\t\t);\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\tpublic $appendTestMessagesInRun(\n\t\trunId: string,\n\t\ttaskId: string,\n\t\ttestId: string,\n\t\tmessages: ITestMessage.Serialized[],\n\t): void {\n\t\tconst r = this.resultService.getResult(runId);\n\t\tif (r && r instanceof LiveTestResult) {\n\t\t\tfor (const message of messages) {\n\t\t\t\tr.appendMessage(\n\t\t\t\t\ttestId,\n\t\t\t\t\ttaskId,\n\t\t\t\t\tITestMessage.deserialize(this.uriIdentityService, message),\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\tpublic $registerTestController(\n\t\tcontrollerId: string,\n\t\t_label: string,\n\t\t_capabilities: TestControllerCapability,\n\t) {\n\t\tconst disposable = new DisposableStore();\n\t\tconst label = observableValue(`${controllerId}.label`, _label);\n\t\tconst capabilities = observableValue(\n\t\t\t`${controllerId}.cap`,\n\t\t\t_capabilities,\n\t\t);\n\t\tconst controller: IMainThreadTestController = {\n\t\t\tid: controllerId,\n\t\t\tlabel,\n\t\t\tcapabilities,\n\t\t\tsyncTests: () => this.proxy.$syncTests(),\n\t\t\trefreshTests: (token) =>\n\t\t\t\tthis.proxy.$refreshTests(controllerId, token),\n\t\t\tconfigureRunProfile: (id) =>\n\t\t\t\tthis.proxy.$configureRunProfile(controllerId, id),\n\t\t\trunTests: (reqs, token) =>\n\t\t\t\tthis.proxy.$runControllerTests(reqs, token),\n\t\t\tstartContinuousRun: (reqs, token) =>\n\t\t\t\tthis.proxy.$startContinuousRun(reqs, token),\n\t\t\texpandTest: (testId, levels) =>\n\t\t\t\tthis.proxy.$expandTest(testId, isFinite(levels) ? levels : -1),\n\t\t\tgetRelatedCode: (testId, token) =>\n\t\t\t\tthis.proxy\n\t\t\t\t\t.$getCodeRelatedToTest(testId, token)\n\t\t\t\t\t.then((locations) =>\n\t\t\t\t\t\tlocations.map((l) => ({\n\t\t\t\t\t\t\turi: URI.revive(l.uri),\n\t\t\t\t\t\t\trange: Range.lift(l.range),\n\t\t\t\t\t\t})),\n\t\t\t\t\t),\n\t\t};\n\n\t\tdisposable.add(\n\t\t\ttoDisposable(() => this.testProfiles.removeProfile(controllerId)),\n\t\t);\n\t\tdisposable.add(\n\t\t\tthis.testService.registerTestController(controllerId, controller),\n\t\t);\n\n\t\tthis.testProviderRegistrations.set(controllerId, {\n\t\t\tinstance: controller,\n\t\t\tlabel,\n\t\t\tcapabilities,\n\t\t\tdisposable,\n\t\t});\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\tpublic $updateController(\n\t\tcontrollerId: string,\n\t\tpatch: ITestControllerPatch,\n\t) {\n\t\tconst controller = this.testProviderRegistrations.get(controllerId);\n\t\tif (!controller) {\n\t\t\treturn;\n\t\t}\n\n\t\ttransaction((tx) => {\n\t\t\tif (patch.label !== undefined) {\n\t\t\t\tcontroller.label.set(patch.label, tx);\n\t\t\t}\n\n\t\t\tif (patch.capabilities !== undefined) {\n\t\t\t\tcontroller.capabilities.set(patch.capabilities, tx);\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\tpublic $unregisterTestController(controllerId: string) {\n\t\tthis.testProviderRegistrations.get(controllerId)?.disposable.dispose();\n\t\tthis.testProviderRegistrations.delete(controllerId);\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\tpublic $subscribeToDiffs(): void {\n\t\tthis.proxy.$acceptDiff(\n\t\t\tthis.testService.collection\n\t\t\t\t.getReviverDiff()\n\t\t\t\t.map(TestsDiffOp.serialize),\n\t\t);\n\t\tthis.diffListener.value = this.testService.onDidProcessDiff(\n\t\t\tthis.proxy.$acceptDiff,\n\t\t\tthis.proxy,\n\t\t);\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\tpublic $unsubscribeFromDiffs(): void {\n\t\tthis.diffListener.clear();\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\tpublic $publishDiff(\n\t\tcontrollerId: string,\n\t\tdiff: TestsDiffOp.Serialized[],\n\t): void {\n\t\tthis.testService.publishDiff(\n\t\t\tcontrollerId,\n\t\t\tdiff.map((d) =>\n\t\t\t\tTestsDiffOp.deserialize(this.uriIdentityService, d),\n\t\t\t),\n\t\t);\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\tpublic async $runTests(\n\t\treq: ResolvedTestRunRequest,\n\t\ttoken: CancellationToken,\n\t): Promise<string> {\n\t\tconst result = await this.testService.runResolvedTests(req, token);\n\t\treturn result.id;\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\tpublic async $getCoverageDetails(\n\t\tresultId: string,\n\t\ttaskIndex: number,\n\t\turi: UriComponents,\n\t\ttoken: CancellationToken,\n\t): Promise<CoverageDetails.Serialized[]> {\n\t\tconst details = await this.resultService\n\t\t\t.getResult(resultId)\n\t\t\t?.tasks[taskIndex]?.coverage.get()\n\t\t\t?.getUri(URI.from(uri))\n\t\t\t?.details(token);\n\n\t\t// Return empty if nothing. Some failure is always possible here because\n\t\t// results might be cleared in the meantime.\n\t\treturn details || [];\n\t}\n\n\tpublic override dispose() {\n\t\tsuper.dispose();\n\t\tfor (const subscription of this.testProviderRegistrations.values()) {\n\t\t\tsubscription.disposable.dispose();\n\t\t}\n\t\tthis.testProviderRegistrations.clear();\n\t}\n\n\tprivate withLiveRun<T>(\n\t\trunId: string,\n\t\tfn: (run: LiveTestResult) => T,\n\t): T | undefined {\n\t\tconst r = this.resultService.getResult(runId);\n\t\treturn r && r instanceof LiveTestResult ? fn(r) : undefined;\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
