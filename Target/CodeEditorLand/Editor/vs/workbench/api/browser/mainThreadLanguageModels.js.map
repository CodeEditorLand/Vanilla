{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/api/browser/mainThreadLanguageModels.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { AsyncIterableSource, DeferredPromise } from '../../../base/common/async.js';\nimport { CancellationToken } from '../../../base/common/cancellation.js';\nimport { SerializedError, transformErrorForSerialization, transformErrorFromSerialization } from '../../../base/common/errors.js';\nimport { Emitter, Event } from '../../../base/common/event.js';\nimport { Disposable, DisposableMap, DisposableStore, IDisposable, toDisposable } from '../../../base/common/lifecycle.js';\nimport { localize } from '../../../nls.js';\nimport { ExtensionIdentifier } from '../../../platform/extensions/common/extensions.js';\nimport { ILogService } from '../../../platform/log/common/log.js';\nimport { ExtHostLanguageModelsShape, ExtHostContext, MainContext, MainThreadLanguageModelsShape } from '../common/extHost.protocol.js';\nimport { ILanguageModelStatsService } from '../../contrib/chat/common/languageModelStats.js';\nimport { ILanguageModelChatMetadata, IChatResponseFragment, ILanguageModelsService, IChatMessage, ILanguageModelChatSelector, ILanguageModelChatResponse } from '../../contrib/chat/common/languageModels.js';\nimport { IAuthenticationAccessService } from '../../services/authentication/browser/authenticationAccessService.js';\nimport { AuthenticationSession, AuthenticationSessionsChangeEvent, IAuthenticationProvider, IAuthenticationService, INTERNAL_AUTH_PROVIDER_PREFIX } from '../../services/authentication/common/authentication.js';\nimport { IExtHostContext, extHostNamedCustomer } from '../../services/extensions/common/extHostCustomers.js';\nimport { IExtensionService } from '../../services/extensions/common/extensions.js';\n\n@extHostNamedCustomer(MainContext.MainThreadLanguageModels)\nexport class MainThreadLanguageModels implements MainThreadLanguageModelsShape {\n\n\tprivate readonly _proxy: ExtHostLanguageModelsShape;\n\tprivate readonly _store = new DisposableStore();\n\tprivate readonly _providerRegistrations = new DisposableMap<number>();\n\tprivate readonly _pendingProgress = new Map<number, { defer: DeferredPromise<any>; stream: AsyncIterableSource<IChatResponseFragment> }>();\n\n\tconstructor(\n\t\textHostContext: IExtHostContext,\n\t\t@ILanguageModelsService private readonly _chatProviderService: ILanguageModelsService,\n\t\t@ILanguageModelStatsService private readonly _languageModelStatsService: ILanguageModelStatsService,\n\t\t@ILogService private readonly _logService: ILogService,\n\t\t@IAuthenticationService private readonly _authenticationService: IAuthenticationService,\n\t\t@IAuthenticationAccessService private readonly _authenticationAccessService: IAuthenticationAccessService,\n\t\t@IExtensionService private readonly _extensionService: IExtensionService\n\t) {\n\t\tthis._proxy = extHostContext.getProxy(ExtHostContext.ExtHostChatProvider);\n\t\tthis._proxy.$acceptChatModelMetadata({ added: _chatProviderService.getLanguageModelIds().map(id => ({ identifier: id, metadata: _chatProviderService.lookupLanguageModel(id)! })) });\n\t\tthis._store.add(_chatProviderService.onDidChangeLanguageModels(this._proxy.$acceptChatModelMetadata, this._proxy));\n\t}\n\n\tdispose(): void {\n\t\tthis._providerRegistrations.dispose();\n\t\tthis._store.dispose();\n\t}\n\n\t$registerLanguageModelProvider(handle: number, identifier: string, metadata: ILanguageModelChatMetadata): void {\n\t\tconst dipsosables = new DisposableStore();\n\t\tdipsosables.add(this._chatProviderService.registerLanguageModelChat(identifier, {\n\t\t\tmetadata,\n\t\t\tsendChatRequest: async (messages, from, options, token) => {\n\t\t\t\tconst requestId = (Math.random() * 1e6) | 0;\n\t\t\t\tconst defer = new DeferredPromise<any>();\n\t\t\t\tconst stream = new AsyncIterableSource<IChatResponseFragment>();\n\n\t\t\t\ttry {\n\t\t\t\t\tthis._pendingProgress.set(requestId, { defer, stream });\n\t\t\t\t\tawait this._proxy.$startChatRequest(handle, requestId, from, messages, options, token);\n\t\t\t\t} catch (err) {\n\t\t\t\t\tthis._pendingProgress.delete(requestId);\n\t\t\t\t\tthrow err;\n\t\t\t\t}\n\n\t\t\t\treturn {\n\t\t\t\t\tresult: defer.p,\n\t\t\t\t\tstream: stream.asyncIterable\n\t\t\t\t} satisfies ILanguageModelChatResponse;\n\t\t\t},\n\t\t\tprovideTokenCount: (str, token) => {\n\t\t\t\treturn this._proxy.$provideTokenLength(handle, str, token);\n\t\t\t},\n\t\t}));\n\t\tif (metadata.auth) {\n\t\t\tdipsosables.add(this._registerAuthenticationProvider(metadata.extension, metadata.auth));\n\t\t}\n\t\tthis._providerRegistrations.set(handle, dipsosables);\n\t}\n\n\tasync $reportResponsePart(requestId: number, chunk: IChatResponseFragment): Promise<void> {\n\t\tconst data = this._pendingProgress.get(requestId);\n\t\tthis._logService.trace('[LM] report response PART', Boolean(data), requestId, chunk);\n\t\tif (data) {\n\t\t\tdata.stream.emitOne(chunk);\n\t\t}\n\t}\n\n\tasync $reportResponseDone(requestId: number, err: SerializedError | undefined): Promise<void> {\n\t\tconst data = this._pendingProgress.get(requestId);\n\t\tthis._logService.trace('[LM] report response DONE', Boolean(data), requestId, err);\n\t\tif (data) {\n\t\t\tthis._pendingProgress.delete(requestId);\n\t\t\tif (err) {\n\t\t\t\tconst error = transformErrorFromSerialization(err);\n\t\t\t\tdata.stream.reject(error);\n\t\t\t\tdata.defer.error(error);\n\t\t\t} else {\n\t\t\t\tdata.stream.resolve();\n\t\t\t\tdata.defer.complete(undefined);\n\t\t\t}\n\t\t}\n\t}\n\n\t$unregisterProvider(handle: number): void {\n\t\tthis._providerRegistrations.deleteAndDispose(handle);\n\t}\n\n\t$selectChatModels(selector: ILanguageModelChatSelector): Promise<string[]> {\n\t\treturn this._chatProviderService.selectLanguageModels(selector);\n\t}\n\n\t$whenLanguageModelChatRequestMade(identifier: string, extensionId: ExtensionIdentifier, participant?: string | undefined, tokenCount?: number | undefined): void {\n\t\tthis._languageModelStatsService.update(identifier, extensionId, participant, tokenCount);\n\t}\n\n\tasync $tryStartChatRequest(extension: ExtensionIdentifier, providerId: string, requestId: number, messages: IChatMessage[], options: {}, token: CancellationToken): Promise<any> {\n\t\tthis._logService.trace('[CHAT] request STARTED', extension.value, requestId);\n\n\t\tconst response = await this._chatProviderService.sendChatRequest(providerId, extension, messages, options, token);\n\n\t\t// !!! IMPORTANT !!!\n\t\t// This method must return before the response is done (has streamed all parts)\n\t\t// and because of that we consume the stream without awaiting\n\t\t// !!! IMPORTANT !!!\n\t\tconst streaming = (async () => {\n\t\t\ttry {\n\t\t\t\tfor await (const part of response.stream) {\n\t\t\t\t\tthis._logService.trace('[CHAT] request PART', extension.value, requestId, part);\n\t\t\t\t\tawait this._proxy.$acceptResponsePart(requestId, part);\n\t\t\t\t}\n\t\t\t\tthis._logService.trace('[CHAT] request DONE', extension.value, requestId);\n\t\t\t} catch (err) {\n\t\t\t\tthis._logService.error('[CHAT] extension request ERRORED in STREAM', err, extension.value, requestId);\n\t\t\t\tthis._proxy.$acceptResponseDone(requestId, transformErrorForSerialization(err));\n\t\t\t}\n\t\t})();\n\n\t\t// When the response is done (signaled via its result) we tell the EH\n\t\tPromise.allSettled([response.result, streaming]).then(() => {\n\t\t\tthis._logService.debug('[CHAT] extension request DONE', extension.value, requestId);\n\t\t\tthis._proxy.$acceptResponseDone(requestId, undefined);\n\t\t}, err => {\n\t\t\tthis._logService.error('[CHAT] extension request ERRORED', err, extension.value, requestId);\n\t\t\tthis._proxy.$acceptResponseDone(requestId, transformErrorForSerialization(err));\n\t\t});\n\t}\n\n\n\t$countTokens(provider: string, value: string | IChatMessage, token: CancellationToken): Promise<number> {\n\t\treturn this._chatProviderService.computeTokenLength(provider, value, token);\n\t}\n\n\tprivate _registerAuthenticationProvider(extension: ExtensionIdentifier, auth: { providerLabel: string; accountLabel?: string | undefined }): IDisposable {\n\t\t// This needs to be done in both MainThread & ExtHost ChatProvider\n\t\tconst authProviderId = INTERNAL_AUTH_PROVIDER_PREFIX + extension.value;\n\n\t\t// Only register one auth provider per extension\n\t\tif (this._authenticationService.getProviderIds().includes(authProviderId)) {\n\t\t\treturn Disposable.None;\n\t\t}\n\n\t\tconst accountLabel = auth.accountLabel ?? localize('languageModelsAccountId', 'Language Models');\n\t\tconst disposables = new DisposableStore();\n\t\tthis._authenticationService.registerAuthenticationProvider(authProviderId, new LanguageModelAccessAuthProvider(authProviderId, auth.providerLabel, accountLabel));\n\t\tdisposables.add(toDisposable(() => {\n\t\t\tthis._authenticationService.unregisterAuthenticationProvider(authProviderId);\n\t\t}));\n\t\tdisposables.add(this._authenticationAccessService.onDidChangeExtensionSessionAccess(async (e) => {\n\t\t\tconst allowedExtensions = this._authenticationAccessService.readAllowedExtensions(authProviderId, accountLabel);\n\t\t\tconst accessList = [];\n\t\t\tfor (const allowedExtension of allowedExtensions) {\n\t\t\t\tconst from = await this._extensionService.getExtension(allowedExtension.id);\n\t\t\t\tif (from) {\n\t\t\t\t\taccessList.push({\n\t\t\t\t\t\tfrom: from.identifier,\n\t\t\t\t\t\tto: extension,\n\t\t\t\t\t\tenabled: allowedExtension.allowed ?? true\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis._proxy.$updateModelAccesslist(accessList);\n\t\t}));\n\t\treturn disposables;\n\t}\n}\n\n// The fake AuthenticationProvider that will be used to gate access to the Language Model. There will be one per provider.\nclass LanguageModelAccessAuthProvider implements IAuthenticationProvider {\n\tsupportsMultipleAccounts = false;\n\n\t// Important for updating the UI\n\tprivate _onDidChangeSessions: Emitter<AuthenticationSessionsChangeEvent> = new Emitter<AuthenticationSessionsChangeEvent>();\n\tonDidChangeSessions: Event<AuthenticationSessionsChangeEvent> = this._onDidChangeSessions.event;\n\n\tprivate _session: AuthenticationSession | undefined;\n\n\tconstructor(readonly id: string, readonly label: string, private readonly _accountLabel: string) { }\n\n\tasync getSessions(scopes?: string[] | undefined): Promise<readonly AuthenticationSession[]> {\n\t\t// If there are no scopes and no session that means no extension has requested a session yet\n\t\t// and the user is simply opening the Account menu. In that case, we should not return any \"sessions\".\n\t\tif (scopes === undefined && !this._session) {\n\t\t\treturn [];\n\t\t}\n\t\tif (this._session) {\n\t\t\treturn [this._session];\n\t\t}\n\t\treturn [await this.createSession(scopes || [])];\n\t}\n\tasync createSession(scopes: string[]): Promise<AuthenticationSession> {\n\t\tthis._session = this._createFakeSession(scopes);\n\t\tthis._onDidChangeSessions.fire({ added: [this._session], changed: [], removed: [] });\n\t\treturn this._session;\n\t}\n\tremoveSession(sessionId: string): Promise<void> {\n\t\tif (this._session) {\n\t\t\tthis._onDidChangeSessions.fire({ added: [], changed: [], removed: [this._session!] });\n\t\t\tthis._session = undefined;\n\t\t}\n\t\treturn Promise.resolve();\n\t}\n\n\tprivate _createFakeSession(scopes: string[]): AuthenticationSession {\n\t\treturn {\n\t\t\tid: 'fake-session',\n\t\t\taccount: {\n\t\t\t\tid: this.id,\n\t\t\t\tlabel: this._accountLabel,\n\t\t\t},\n\t\t\taccessToken: 'fake-access-token',\n\t\t\tscopes,\n\t\t};\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
