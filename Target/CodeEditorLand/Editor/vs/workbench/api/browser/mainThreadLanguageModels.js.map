{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/api/browser/mainThreadLanguageModels.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport {\n\tAsyncIterableSource,\n\tDeferredPromise,\n} from \"../../../base/common/async.js\";\nimport type { CancellationToken } from \"../../../base/common/cancellation.js\";\nimport {\n\ttype SerializedError,\n\ttransformErrorForSerialization,\n\ttransformErrorFromSerialization,\n} from \"../../../base/common/errors.js\";\nimport { Emitter, type Event } from \"../../../base/common/event.js\";\nimport {\n\tDisposable,\n\tDisposableMap,\n\tDisposableStore,\n\ttype IDisposable,\n\ttoDisposable,\n} from \"../../../base/common/lifecycle.js\";\nimport { localize } from \"../../../nls.js\";\nimport type { ExtensionIdentifier } from \"../../../platform/extensions/common/extensions.js\";\nimport { ILogService } from \"../../../platform/log/common/log.js\";\nimport { ILanguageModelStatsService } from \"../../contrib/chat/common/languageModelStats.js\";\nimport {\n\ttype IChatMessage,\n\ttype IChatResponseFragment,\n\ttype ILanguageModelChatMetadata,\n\ttype ILanguageModelChatResponse,\n\ttype ILanguageModelChatSelector,\n\tILanguageModelsService,\n} from \"../../contrib/chat/common/languageModels.js\";\nimport { IAuthenticationAccessService } from \"../../services/authentication/browser/authenticationAccessService.js\";\nimport {\n\ttype AuthenticationSession,\n\ttype AuthenticationSessionsChangeEvent,\n\ttype IAuthenticationProvider,\n\tIAuthenticationService,\n\tINTERNAL_AUTH_PROVIDER_PREFIX,\n} from \"../../services/authentication/common/authentication.js\";\nimport {\n\ttype IExtHostContext,\n\textHostNamedCustomer,\n} from \"../../services/extensions/common/extHostCustomers.js\";\nimport { IExtensionService } from \"../../services/extensions/common/extensions.js\";\nimport {\n\tExtHostContext,\n\ttype ExtHostLanguageModelsShape,\n\tMainContext,\n\ttype MainThreadLanguageModelsShape,\n} from \"../common/extHost.protocol.js\";\n\n@extHostNamedCustomer(MainContext.MainThreadLanguageModels)\nexport class MainThreadLanguageModels implements MainThreadLanguageModelsShape {\n\tprivate readonly _proxy: ExtHostLanguageModelsShape;\n\tprivate readonly _store = new DisposableStore();\n\tprivate readonly _providerRegistrations = new DisposableMap<number>();\n\tprivate readonly _pendingProgress = new Map<\n\t\tnumber,\n\t\t{\n\t\t\tdefer: DeferredPromise<any>;\n\t\t\tstream: AsyncIterableSource<IChatResponseFragment>;\n\t\t}\n\t>();\n\n\tconstructor(\n\t\textHostContext: IExtHostContext,\n\t\t@ILanguageModelsService private readonly _chatProviderService: ILanguageModelsService,\n\t\t@ILanguageModelStatsService private readonly _languageModelStatsService: ILanguageModelStatsService,\n\t\t@ILogService private readonly _logService: ILogService,\n\t\t@IAuthenticationService private readonly _authenticationService: IAuthenticationService,\n\t\t@IAuthenticationAccessService private readonly _authenticationAccessService: IAuthenticationAccessService,\n\t\t@IExtensionService private readonly _extensionService: IExtensionService\n\t) {\n\t\tthis._proxy = extHostContext.getProxy(ExtHostContext.ExtHostChatProvider);\n\t\tthis._proxy.$acceptChatModelMetadata({ added: _chatProviderService.getLanguageModelIds().map(id => ({ identifier: id, metadata: _chatProviderService.lookupLanguageModel(id)! })) });\n\t\tthis._store.add(_chatProviderService.onDidChangeLanguageModels(this._proxy.$acceptChatModelMetadata, this._proxy));\n\t}\n\n\tdispose(): void {\n\t\tthis._providerRegistrations.dispose();\n\t\tthis._store.dispose();\n\t}\n\n\t$registerLanguageModelProvider(\n\t\thandle: number,\n\t\tidentifier: string,\n\t\tmetadata: ILanguageModelChatMetadata,\n\t): void {\n\t\tconst dipsosables = new DisposableStore();\n\t\tdipsosables.add(\n\t\t\tthis._chatProviderService.registerLanguageModelChat(identifier, {\n\t\t\t\tmetadata,\n\t\t\t\tsendChatRequest: async (messages, from, options, token) => {\n\t\t\t\t\tconst requestId = (Math.random() * 1e6) | 0;\n\t\t\t\t\tconst defer = new DeferredPromise<any>();\n\t\t\t\t\tconst stream =\n\t\t\t\t\t\tnew AsyncIterableSource<IChatResponseFragment>();\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tthis._pendingProgress.set(requestId, { defer, stream });\n\t\t\t\t\t\tawait this._proxy.$startChatRequest(\n\t\t\t\t\t\t\thandle,\n\t\t\t\t\t\t\trequestId,\n\t\t\t\t\t\t\tfrom,\n\t\t\t\t\t\t\tmessages,\n\t\t\t\t\t\t\toptions,\n\t\t\t\t\t\t\ttoken,\n\t\t\t\t\t\t);\n\t\t\t\t\t} catch (err) {\n\t\t\t\t\t\tthis._pendingProgress.delete(requestId);\n\t\t\t\t\t\tthrow err;\n\t\t\t\t\t}\n\n\t\t\t\t\treturn {\n\t\t\t\t\t\tresult: defer.p,\n\t\t\t\t\t\tstream: stream.asyncIterable,\n\t\t\t\t\t} satisfies ILanguageModelChatResponse;\n\t\t\t\t},\n\t\t\t\tprovideTokenCount: (str, token) => {\n\t\t\t\t\treturn this._proxy.$provideTokenLength(handle, str, token);\n\t\t\t\t},\n\t\t\t}),\n\t\t);\n\t\tif (metadata.auth) {\n\t\t\tdipsosables.add(\n\t\t\t\tthis._registerAuthenticationProvider(\n\t\t\t\t\tmetadata.extension,\n\t\t\t\t\tmetadata.auth,\n\t\t\t\t),\n\t\t\t);\n\t\t}\n\t\tthis._providerRegistrations.set(handle, dipsosables);\n\t}\n\n\tasync $reportResponsePart(\n\t\trequestId: number,\n\t\tchunk: IChatResponseFragment,\n\t): Promise<void> {\n\t\tconst data = this._pendingProgress.get(requestId);\n\t\tthis._logService.trace(\n\t\t\t\"[LM] report response PART\",\n\t\t\tBoolean(data),\n\t\t\trequestId,\n\t\t\tchunk,\n\t\t);\n\t\tif (data) {\n\t\t\tdata.stream.emitOne(chunk);\n\t\t}\n\t}\n\n\tasync $reportResponseDone(\n\t\trequestId: number,\n\t\terr: SerializedError | undefined,\n\t): Promise<void> {\n\t\tconst data = this._pendingProgress.get(requestId);\n\t\tthis._logService.trace(\n\t\t\t\"[LM] report response DONE\",\n\t\t\tBoolean(data),\n\t\t\trequestId,\n\t\t\terr,\n\t\t);\n\t\tif (data) {\n\t\t\tthis._pendingProgress.delete(requestId);\n\t\t\tif (err) {\n\t\t\t\tconst error = transformErrorFromSerialization(err);\n\t\t\t\tdata.stream.reject(error);\n\t\t\t\tdata.defer.error(error);\n\t\t\t} else {\n\t\t\t\tdata.stream.resolve();\n\t\t\t\tdata.defer.complete(undefined);\n\t\t\t}\n\t\t}\n\t}\n\n\t$unregisterProvider(handle: number): void {\n\t\tthis._providerRegistrations.deleteAndDispose(handle);\n\t}\n\n\t$selectChatModels(selector: ILanguageModelChatSelector): Promise<string[]> {\n\t\treturn this._chatProviderService.selectLanguageModels(selector);\n\t}\n\n\t$whenLanguageModelChatRequestMade(\n\t\tidentifier: string,\n\t\textensionId: ExtensionIdentifier,\n\t\tparticipant?: string | undefined,\n\t\ttokenCount?: number | undefined,\n\t): void {\n\t\tthis._languageModelStatsService.update(\n\t\t\tidentifier,\n\t\t\textensionId,\n\t\t\tparticipant,\n\t\t\ttokenCount,\n\t\t);\n\t}\n\n\tasync $tryStartChatRequest(\n\t\textension: ExtensionIdentifier,\n\t\tproviderId: string,\n\t\trequestId: number,\n\t\tmessages: IChatMessage[],\n\t\toptions: {},\n\t\ttoken: CancellationToken,\n\t): Promise<any> {\n\t\tthis._logService.trace(\n\t\t\t\"[CHAT] request STARTED\",\n\t\t\textension.value,\n\t\t\trequestId,\n\t\t);\n\n\t\tconst response = await this._chatProviderService.sendChatRequest(\n\t\t\tproviderId,\n\t\t\textension,\n\t\t\tmessages,\n\t\t\toptions,\n\t\t\ttoken,\n\t\t);\n\n\t\t// !!! IMPORTANT !!!\n\t\t// This method must return before the response is done (has streamed all parts)\n\t\t// and because of that we consume the stream without awaiting\n\t\t// !!! IMPORTANT !!!\n\t\tconst streaming = (async () => {\n\t\t\ttry {\n\t\t\t\tfor await (const part of response.stream) {\n\t\t\t\t\tthis._logService.trace(\n\t\t\t\t\t\t\"[CHAT] request PART\",\n\t\t\t\t\t\textension.value,\n\t\t\t\t\t\trequestId,\n\t\t\t\t\t\tpart,\n\t\t\t\t\t);\n\t\t\t\t\tawait this._proxy.$acceptResponsePart(requestId, part);\n\t\t\t\t}\n\t\t\t\tthis._logService.trace(\n\t\t\t\t\t\"[CHAT] request DONE\",\n\t\t\t\t\textension.value,\n\t\t\t\t\trequestId,\n\t\t\t\t);\n\t\t\t} catch (err) {\n\t\t\t\tthis._logService.error(\n\t\t\t\t\t\"[CHAT] extension request ERRORED in STREAM\",\n\t\t\t\t\terr,\n\t\t\t\t\textension.value,\n\t\t\t\t\trequestId,\n\t\t\t\t);\n\t\t\t\tthis._proxy.$acceptResponseDone(\n\t\t\t\t\trequestId,\n\t\t\t\t\ttransformErrorForSerialization(err),\n\t\t\t\t);\n\t\t\t}\n\t\t})();\n\n\t\t// When the response is done (signaled via its result) we tell the EH\n\t\tPromise.allSettled([response.result, streaming]).then(\n\t\t\t() => {\n\t\t\t\tthis._logService.debug(\n\t\t\t\t\t\"[CHAT] extension request DONE\",\n\t\t\t\t\textension.value,\n\t\t\t\t\trequestId,\n\t\t\t\t);\n\t\t\t\tthis._proxy.$acceptResponseDone(requestId, undefined);\n\t\t\t},\n\t\t\t(err) => {\n\t\t\t\tthis._logService.error(\n\t\t\t\t\t\"[CHAT] extension request ERRORED\",\n\t\t\t\t\terr,\n\t\t\t\t\textension.value,\n\t\t\t\t\trequestId,\n\t\t\t\t);\n\t\t\t\tthis._proxy.$acceptResponseDone(\n\t\t\t\t\trequestId,\n\t\t\t\t\ttransformErrorForSerialization(err),\n\t\t\t\t);\n\t\t\t},\n\t\t);\n\t}\n\n\t$countTokens(\n\t\tprovider: string,\n\t\tvalue: string | IChatMessage,\n\t\ttoken: CancellationToken,\n\t): Promise<number> {\n\t\treturn this._chatProviderService.computeTokenLength(\n\t\t\tprovider,\n\t\t\tvalue,\n\t\t\ttoken,\n\t\t);\n\t}\n\n\tprivate _registerAuthenticationProvider(\n\t\textension: ExtensionIdentifier,\n\t\tauth: { providerLabel: string; accountLabel?: string | undefined },\n\t): IDisposable {\n\t\t// This needs to be done in both MainThread & ExtHost ChatProvider\n\t\tconst authProviderId = INTERNAL_AUTH_PROVIDER_PREFIX + extension.value;\n\n\t\t// Only register one auth provider per extension\n\t\tif (\n\t\t\tthis._authenticationService\n\t\t\t\t.getProviderIds()\n\t\t\t\t.includes(authProviderId)\n\t\t) {\n\t\t\treturn Disposable.None;\n\t\t}\n\n\t\tconst accountLabel =\n\t\t\tauth.accountLabel ??\n\t\t\tlocalize(\"languageModelsAccountId\", \"Language Models\");\n\t\tconst disposables = new DisposableStore();\n\t\tthis._authenticationService.registerAuthenticationProvider(\n\t\t\tauthProviderId,\n\t\t\tnew LanguageModelAccessAuthProvider(\n\t\t\t\tauthProviderId,\n\t\t\t\tauth.providerLabel,\n\t\t\t\taccountLabel,\n\t\t\t),\n\t\t);\n\t\tdisposables.add(\n\t\t\ttoDisposable(() => {\n\t\t\t\tthis._authenticationService.unregisterAuthenticationProvider(\n\t\t\t\t\tauthProviderId,\n\t\t\t\t);\n\t\t\t}),\n\t\t);\n\t\tdisposables.add(\n\t\t\tthis._authenticationAccessService.onDidChangeExtensionSessionAccess(\n\t\t\t\tasync (e) => {\n\t\t\t\t\tconst allowedExtensions =\n\t\t\t\t\t\tthis._authenticationAccessService.readAllowedExtensions(\n\t\t\t\t\t\t\tauthProviderId,\n\t\t\t\t\t\t\taccountLabel,\n\t\t\t\t\t\t);\n\t\t\t\t\tconst accessList = [];\n\t\t\t\t\tfor (const allowedExtension of allowedExtensions) {\n\t\t\t\t\t\tconst from = await this._extensionService.getExtension(\n\t\t\t\t\t\t\tallowedExtension.id,\n\t\t\t\t\t\t);\n\t\t\t\t\t\tif (from) {\n\t\t\t\t\t\t\taccessList.push({\n\t\t\t\t\t\t\t\tfrom: from.identifier,\n\t\t\t\t\t\t\t\tto: extension,\n\t\t\t\t\t\t\t\tenabled: allowedExtension.allowed ?? true,\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tthis._proxy.$updateModelAccesslist(accessList);\n\t\t\t\t},\n\t\t\t),\n\t\t);\n\t\treturn disposables;\n\t}\n}\n\n// The fake AuthenticationProvider that will be used to gate access to the Language Model. There will be one per provider.\nclass LanguageModelAccessAuthProvider implements IAuthenticationProvider {\n\tsupportsMultipleAccounts = false;\n\n\t// Important for updating the UI\n\tprivate _onDidChangeSessions: Emitter<AuthenticationSessionsChangeEvent> =\n\t\tnew Emitter<AuthenticationSessionsChangeEvent>();\n\tonDidChangeSessions: Event<AuthenticationSessionsChangeEvent> =\n\t\tthis._onDidChangeSessions.event;\n\n\tprivate _session: AuthenticationSession | undefined;\n\n\tconstructor(\n\t\treadonly id: string,\n\t\treadonly label: string,\n\t\tprivate readonly _accountLabel: string,\n\t) {}\n\n\tasync getSessions(\n\t\tscopes?: string[] | undefined,\n\t): Promise<readonly AuthenticationSession[]> {\n\t\t// If there are no scopes and no session that means no extension has requested a session yet\n\t\t// and the user is simply opening the Account menu. In that case, we should not return any \"sessions\".\n\t\tif (scopes === undefined && !this._session) {\n\t\t\treturn [];\n\t\t}\n\t\tif (this._session) {\n\t\t\treturn [this._session];\n\t\t}\n\t\treturn [await this.createSession(scopes || [])];\n\t}\n\tasync createSession(scopes: string[]): Promise<AuthenticationSession> {\n\t\tthis._session = this._createFakeSession(scopes);\n\t\tthis._onDidChangeSessions.fire({\n\t\t\tadded: [this._session],\n\t\t\tchanged: [],\n\t\t\tremoved: [],\n\t\t});\n\t\treturn this._session;\n\t}\n\tremoveSession(sessionId: string): Promise<void> {\n\t\tif (this._session) {\n\t\t\tthis._onDidChangeSessions.fire({\n\t\t\t\tadded: [],\n\t\t\t\tchanged: [],\n\t\t\t\tremoved: [this._session!],\n\t\t\t});\n\t\t\tthis._session = undefined;\n\t\t}\n\t\treturn Promise.resolve();\n\t}\n\n\tprivate _createFakeSession(scopes: string[]): AuthenticationSession {\n\t\treturn {\n\t\t\tid: \"fake-session\",\n\t\t\taccount: {\n\t\t\t\tid: this.id,\n\t\t\t\tlabel: this._accountLabel,\n\t\t\t},\n\t\t\taccessToken: \"fake-access-token\",\n\t\t\tscopes,\n\t\t};\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
