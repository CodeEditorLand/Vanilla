{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/api/browser/mainThreadChatAgents2.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { DeferredPromise } from '../../../base/common/async.js';\nimport { CancellationToken } from '../../../base/common/cancellation.js';\nimport { Emitter, Event } from '../../../base/common/event.js';\nimport { IMarkdownString } from '../../../base/common/htmlContent.js';\nimport { Disposable, DisposableMap, IDisposable } from '../../../base/common/lifecycle.js';\nimport { revive } from '../../../base/common/marshalling.js';\nimport { escapeRegExpCharacters } from '../../../base/common/strings.js';\nimport { ThemeIcon } from '../../../base/common/themables.js';\nimport { URI, UriComponents } from '../../../base/common/uri.js';\nimport { Position } from '../../../editor/common/core/position.js';\nimport { Range } from '../../../editor/common/core/range.js';\nimport { getWordAtText } from '../../../editor/common/core/wordHelper.js';\nimport { CompletionContext, CompletionItem, CompletionItemKind, CompletionList } from '../../../editor/common/languages.js';\nimport { ITextModel } from '../../../editor/common/model.js';\nimport { ILanguageFeaturesService } from '../../../editor/common/services/languageFeatures.js';\nimport { ExtensionIdentifier } from '../../../platform/extensions/common/extensions.js';\nimport { IInstantiationService } from '../../../platform/instantiation/common/instantiation.js';\nimport { ILogService } from '../../../platform/log/common/log.js';\nimport { ExtHostChatAgentsShape2, ExtHostContext, IChatParticipantMetadata, IChatProgressDto, IDynamicChatAgentProps, IExtensionChatAgentMetadata, MainContext, MainThreadChatAgentsShape2 } from '../common/extHost.protocol.js';\nimport { IChatWidgetService } from '../../contrib/chat/browser/chat.js';\nimport { ChatInputPart } from '../../contrib/chat/browser/chatInputPart.js';\nimport { AddDynamicVariableAction, IAddDynamicVariableContext } from '../../contrib/chat/browser/contrib/chatDynamicVariables.js';\nimport { ChatAgentLocation, IChatAgentHistoryEntry, IChatAgentImplementation, IChatAgentRequest, IChatAgentService } from '../../contrib/chat/common/chatAgents.js';\nimport { ChatRequestAgentPart } from '../../contrib/chat/common/chatParserTypes.js';\nimport { ChatRequestParser } from '../../contrib/chat/common/chatRequestParser.js';\nimport { IChatContentReference, IChatFollowup, IChatProgress, IChatService, IChatTask, IChatWarningMessage } from '../../contrib/chat/common/chatService.js';\nimport { IExtHostContext, extHostNamedCustomer } from '../../services/extensions/common/extHostCustomers.js';\nimport { IExtensionService } from '../../services/extensions/common/extensions.js';\n\ninterface AgentData {\n\tdispose: () => void;\n\tid: string;\n\textensionId: ExtensionIdentifier;\n\thasFollowups?: boolean;\n}\n\nclass MainThreadChatTask implements IChatTask {\n\tpublic readonly kind = 'progressTask';\n\n\tpublic readonly deferred = new DeferredPromise<string | void>();\n\n\tprivate readonly _onDidAddProgress = new Emitter<IChatWarningMessage | IChatContentReference>();\n\tpublic get onDidAddProgress(): Event<IChatWarningMessage | IChatContentReference> { return this._onDidAddProgress.event; }\n\n\tpublic readonly progress: (IChatWarningMessage | IChatContentReference)[] = [];\n\n\tconstructor(public content: IMarkdownString) { }\n\n\ttask() {\n\t\treturn this.deferred.p;\n\t}\n\n\tisSettled() {\n\t\treturn this.deferred.isSettled;\n\t}\n\n\tcomplete(v: string | void) {\n\t\tthis.deferred.complete(v);\n\t}\n\n\tadd(progress: IChatWarningMessage | IChatContentReference): void {\n\t\tthis.progress.push(progress);\n\t\tthis._onDidAddProgress.fire(progress);\n\t}\n}\n\n@extHostNamedCustomer(MainContext.MainThreadChatAgents2)\nexport class MainThreadChatAgents2 extends Disposable implements MainThreadChatAgentsShape2 {\n\n\tprivate readonly _agents = this._register(new DisposableMap<number, AgentData>());\n\tprivate readonly _agentCompletionProviders = this._register(new DisposableMap<number, IDisposable>());\n\tprivate readonly _agentIdsToCompletionProviders = this._register(new DisposableMap<string, IDisposable>);\n\n\tprivate readonly _chatParticipantDetectionProviders = this._register(new DisposableMap<number, IDisposable>());\n\n\tprivate readonly _pendingProgress = new Map<string, (part: IChatProgress) => void>();\n\tprivate readonly _proxy: ExtHostChatAgentsShape2;\n\n\tprivate _responsePartHandlePool = 0;\n\tprivate readonly _activeTasks = new Map<string, IChatTask>();\n\n\tconstructor(\n\t\textHostContext: IExtHostContext,\n\t\t@IChatAgentService private readonly _chatAgentService: IChatAgentService,\n\t\t@IChatService private readonly _chatService: IChatService,\n\t\t@ILanguageFeaturesService private readonly _languageFeaturesService: ILanguageFeaturesService,\n\t\t@IChatWidgetService private readonly _chatWidgetService: IChatWidgetService,\n\t\t@IInstantiationService private readonly _instantiationService: IInstantiationService,\n\t\t@ILogService private readonly _logService: ILogService,\n\t\t@IExtensionService private readonly _extensionService: IExtensionService,\n\t) {\n\t\tsuper();\n\t\tthis._proxy = extHostContext.getProxy(ExtHostContext.ExtHostChatAgents2);\n\n\t\tthis._register(this._chatService.onDidDisposeSession(e => {\n\t\t\tthis._proxy.$releaseSession(e.sessionId);\n\t\t}));\n\t\tthis._register(this._chatService.onDidPerformUserAction(e => {\n\t\t\tif (typeof e.agentId === 'string') {\n\t\t\t\tfor (const [handle, agent] of this._agents) {\n\t\t\t\t\tif (agent.id === e.agentId) {\n\t\t\t\t\t\tif (e.action.kind === 'vote') {\n\t\t\t\t\t\t\tthis._proxy.$acceptFeedback(handle, e.result ?? {}, e.action);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tthis._proxy.$acceptAction(handle, e.result || {}, e);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}));\n\t}\n\n\t$unregisterAgent(handle: number): void {\n\t\tthis._agents.deleteAndDispose(handle);\n\t}\n\n\t$transferActiveChatSession(toWorkspace: UriComponents): void {\n\t\tconst widget = this._chatWidgetService.lastFocusedWidget;\n\t\tconst sessionId = widget?.viewModel?.model.sessionId;\n\t\tif (!sessionId) {\n\t\t\tthis._logService.error(`MainThreadChat#$transferActiveChatSession: No active chat session found`);\n\t\t\treturn;\n\t\t}\n\n\t\tconst inputValue = widget?.inputEditor.getValue() ?? '';\n\t\tthis._chatService.transferChatSession({ sessionId, inputValue }, URI.revive(toWorkspace));\n\t}\n\n\t$registerAgent(handle: number, extension: ExtensionIdentifier, id: string, metadata: IExtensionChatAgentMetadata, dynamicProps: IDynamicChatAgentProps | undefined): void {\n\t\tconst staticAgentRegistration = this._chatAgentService.getAgent(id);\n\t\tif (!staticAgentRegistration && !dynamicProps) {\n\t\t\tif (this._chatAgentService.getAgentsByName(id).length) {\n\t\t\t\t// Likely some extension authors will not adopt the new ID, so give a hint if they register a\n\t\t\t\t// participant by name instead of ID.\n\t\t\t\tthrow new Error(`chatParticipant must be declared with an ID in package.json. The \"id\" property may be missing! \"${id}\"`);\n\t\t\t}\n\n\t\t\tthrow new Error(`chatParticipant must be declared in package.json: ${id}`);\n\t\t}\n\n\t\tconst impl: IChatAgentImplementation = {\n\t\t\tinvoke: async (request, progress, history, token) => {\n\t\t\t\tthis._pendingProgress.set(request.requestId, progress);\n\t\t\t\ttry {\n\t\t\t\t\treturn await this._proxy.$invokeAgent(handle, request, { history }, token) ?? {};\n\t\t\t\t} finally {\n\t\t\t\t\tthis._pendingProgress.delete(request.requestId);\n\t\t\t\t}\n\t\t\t},\n\t\t\tprovideFollowups: async (request, result, history, token): Promise<IChatFollowup[]> => {\n\t\t\t\tif (!this._agents.get(handle)?.hasFollowups) {\n\t\t\t\t\treturn [];\n\t\t\t\t}\n\n\t\t\t\treturn this._proxy.$provideFollowups(request, handle, result, { history }, token);\n\t\t\t},\n\t\t\tprovideWelcomeMessage: (location: ChatAgentLocation, token: CancellationToken) => {\n\t\t\t\treturn this._proxy.$provideWelcomeMessage(handle, location, token);\n\t\t\t},\n\t\t\tprovideChatTitle: (history, token) => {\n\t\t\t\treturn this._proxy.$provideChatTitle(handle, history, token);\n\t\t\t},\n\t\t\tprovideSampleQuestions: (location: ChatAgentLocation, token: CancellationToken) => {\n\t\t\t\treturn this._proxy.$provideSampleQuestions(handle, location, token);\n\t\t\t}\n\t\t};\n\n\t\tlet disposable: IDisposable;\n\t\tif (!staticAgentRegistration && dynamicProps) {\n\t\t\tconst extensionDescription = this._extensionService.extensions.find(e => ExtensionIdentifier.equals(e.identifier, extension));\n\t\t\tdisposable = this._chatAgentService.registerDynamicAgent(\n\t\t\t\t{\n\t\t\t\t\tid,\n\t\t\t\t\tname: dynamicProps.name,\n\t\t\t\t\tdescription: dynamicProps.description,\n\t\t\t\t\textensionId: extension,\n\t\t\t\t\textensionDisplayName: extensionDescription?.displayName ?? extension.value,\n\t\t\t\t\textensionPublisherId: extensionDescription?.publisher ?? '',\n\t\t\t\t\tpublisherDisplayName: dynamicProps.publisherName,\n\t\t\t\t\tfullName: dynamicProps.fullName,\n\t\t\t\t\tmetadata: revive(metadata),\n\t\t\t\t\tslashCommands: [],\n\t\t\t\t\tdisambiguation: [],\n\t\t\t\t\tlocations: [ChatAgentLocation.Panel] // TODO all dynamic participants are panel only?\n\t\t\t\t},\n\t\t\t\timpl);\n\t\t} else {\n\t\t\tdisposable = this._chatAgentService.registerAgentImplementation(id, impl);\n\t\t}\n\n\t\tthis._agents.set(handle, {\n\t\t\tid: id,\n\t\t\textensionId: extension,\n\t\t\tdispose: disposable.dispose,\n\t\t\thasFollowups: metadata.hasFollowups\n\t\t});\n\t}\n\n\t$updateAgent(handle: number, metadataUpdate: IExtensionChatAgentMetadata): void {\n\t\tconst data = this._agents.get(handle);\n\t\tif (!data) {\n\t\t\tthis._logService.error(`MainThreadChatAgents2#$updateAgent: No agent with handle ${handle} registered`);\n\t\t\treturn;\n\t\t}\n\t\tdata.hasFollowups = metadataUpdate.hasFollowups;\n\t\tthis._chatAgentService.updateAgent(data.id, revive(metadataUpdate));\n\t}\n\n\tasync $handleProgressChunk(requestId: string, progress: IChatProgressDto, responsePartHandle?: number): Promise<number | void> {\n\t\tconst revivedProgress = revive(progress) as IChatProgress;\n\t\tif (revivedProgress.kind === 'progressTask') {\n\t\t\tconst handle = ++this._responsePartHandlePool;\n\t\t\tconst responsePartId = `${requestId}_${handle}`;\n\t\t\tconst task = new MainThreadChatTask(revivedProgress.content);\n\t\t\tthis._activeTasks.set(responsePartId, task);\n\t\t\tthis._pendingProgress.get(requestId)?.(task);\n\t\t\treturn handle;\n\t\t} else if (responsePartHandle !== undefined) {\n\t\t\tconst responsePartId = `${requestId}_${responsePartHandle}`;\n\t\t\tconst task = this._activeTasks.get(responsePartId);\n\t\t\tswitch (revivedProgress.kind) {\n\t\t\t\tcase 'progressTaskResult':\n\t\t\t\t\tif (task && revivedProgress.content) {\n\t\t\t\t\t\ttask.complete(revivedProgress.content.value);\n\t\t\t\t\t\tthis._activeTasks.delete(responsePartId);\n\t\t\t\t\t} else {\n\t\t\t\t\t\ttask?.complete(undefined);\n\t\t\t\t\t}\n\t\t\t\t\treturn responsePartHandle;\n\t\t\t\tcase 'warning':\n\t\t\t\tcase 'reference':\n\t\t\t\t\ttask?.add(revivedProgress);\n\t\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\tthis._pendingProgress.get(requestId)?.(revivedProgress);\n\t}\n\n\t$registerAgentCompletionsProvider(handle: number, id: string, triggerCharacters: string[]): void {\n\t\tconst provide = async (query: string, token: CancellationToken) => {\n\t\t\tconst completions = await this._proxy.$invokeCompletionProvider(handle, query, token);\n\t\t\treturn completions.map((c) => ({ ...c, icon: c.icon ? ThemeIcon.fromId(c.icon) : undefined }));\n\t\t};\n\t\tthis._agentIdsToCompletionProviders.set(id, this._chatAgentService.registerAgentCompletionProvider(id, provide));\n\n\t\tthis._agentCompletionProviders.set(handle, this._languageFeaturesService.completionProvider.register({ scheme: ChatInputPart.INPUT_SCHEME, hasAccessToAllModels: true }, {\n\t\t\t_debugDisplayName: 'chatAgentCompletions:' + handle,\n\t\t\ttriggerCharacters,\n\t\t\tprovideCompletionItems: async (model: ITextModel, position: Position, _context: CompletionContext, token: CancellationToken) => {\n\t\t\t\tconst widget = this._chatWidgetService.getWidgetByInputUri(model.uri);\n\t\t\t\tif (!widget || !widget.viewModel) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst triggerCharsPart = triggerCharacters.map(c => escapeRegExpCharacters(c)).join('');\n\t\t\t\tconst wordRegex = new RegExp(`[${triggerCharsPart}]\\\\S*`, 'g');\n\t\t\t\tconst query = getWordAtText(position.column, wordRegex, model.getLineContent(position.lineNumber), 0)?.word ?? '';\n\n\t\t\t\tif (query && !triggerCharacters.some(c => query.startsWith(c))) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst parsedRequest = this._instantiationService.createInstance(ChatRequestParser).parseChatRequest(widget.viewModel.sessionId, model.getValue()).parts;\n\t\t\t\tconst agentPart = parsedRequest.find((part): part is ChatRequestAgentPart => part instanceof ChatRequestAgentPart);\n\t\t\t\tconst thisAgentId = this._agents.get(handle)?.id;\n\t\t\t\tif (agentPart?.agent.id !== thisAgentId) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst range = computeCompletionRanges(model, position, wordRegex);\n\t\t\t\tif (!range) {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\n\t\t\t\tconst result = await provide(query, token);\n\t\t\t\tconst variableItems = result.map(v => {\n\t\t\t\t\tconst insertText = v.insertText ?? (typeof v.label === 'string' ? v.label : v.label.label);\n\t\t\t\t\tconst rangeAfterInsert = new Range(range.insert.startLineNumber, range.insert.startColumn, range.insert.endLineNumber, range.insert.startColumn + insertText.length);\n\t\t\t\t\treturn {\n\t\t\t\t\t\tlabel: v.label,\n\t\t\t\t\t\trange,\n\t\t\t\t\t\tinsertText: insertText + ' ',\n\t\t\t\t\t\tkind: CompletionItemKind.Text,\n\t\t\t\t\t\tdetail: v.detail,\n\t\t\t\t\t\tdocumentation: v.documentation,\n\t\t\t\t\t\tcommand: { id: AddDynamicVariableAction.ID, title: '', arguments: [{ id: v.id, widget, range: rangeAfterInsert, variableData: revive(v.value) as any, command: v.command } satisfies IAddDynamicVariableContext] }\n\t\t\t\t\t} satisfies CompletionItem;\n\t\t\t\t});\n\n\t\t\t\treturn {\n\t\t\t\t\tsuggestions: variableItems\n\t\t\t\t} satisfies CompletionList;\n\t\t\t}\n\t\t}));\n\t}\n\n\t$unregisterAgentCompletionsProvider(handle: number, id: string): void {\n\t\tthis._agentCompletionProviders.deleteAndDispose(handle);\n\t\tthis._agentIdsToCompletionProviders.deleteAndDispose(id);\n\t}\n\n\t$registerChatParticipantDetectionProvider(handle: number): void {\n\t\tthis._chatParticipantDetectionProviders.set(handle, this._chatAgentService.registerChatParticipantDetectionProvider(handle,\n\t\t\t{\n\t\t\t\tprovideParticipantDetection: async (request: IChatAgentRequest, history: IChatAgentHistoryEntry[], options: { location: ChatAgentLocation; participants: IChatParticipantMetadata[] }, token: CancellationToken) => {\n\t\t\t\t\treturn await this._proxy.$detectChatParticipant(handle, request, { history }, options, token);\n\t\t\t\t}\n\t\t\t}\n\t\t));\n\t}\n\n\t$unregisterChatParticipantDetectionProvider(handle: number): void {\n\t\tthis._chatParticipantDetectionProviders.deleteAndDispose(handle);\n\t}\n}\n\n\nfunction computeCompletionRanges(model: ITextModel, position: Position, reg: RegExp): { insert: Range; replace: Range } | undefined {\n\tconst varWord = getWordAtText(position.column, reg, model.getLineContent(position.lineNumber), 0);\n\tif (!varWord && model.getWordUntilPosition(position).word) {\n\t\t// inside a \"normal\" word\n\t\treturn;\n\t}\n\n\tlet insert: Range;\n\tlet replace: Range;\n\tif (!varWord) {\n\t\tinsert = replace = Range.fromPositions(position);\n\t} else {\n\t\tinsert = new Range(position.lineNumber, varWord.startColumn, position.lineNumber, position.column);\n\t\treplace = new Range(position.lineNumber, varWord.startColumn, position.lineNumber, varWord.endColumn);\n\t}\n\n\treturn { insert, replace };\n}\n"],
  "mappings": "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",
  "names": []
}
