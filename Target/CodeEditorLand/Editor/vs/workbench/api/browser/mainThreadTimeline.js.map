{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/api/browser/mainThreadTimeline.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Emitter } from '../../../base/common/event.js';\nimport { CancellationToken } from '../../../base/common/cancellation.js';\nimport { URI } from '../../../base/common/uri.js';\nimport { ILogService } from '../../../platform/log/common/log.js';\nimport { MainContext, MainThreadTimelineShape, ExtHostTimelineShape, ExtHostContext } from '../common/extHost.protocol.js';\nimport { extHostNamedCustomer, IExtHostContext } from '../../services/extensions/common/extHostCustomers.js';\nimport { TimelineChangeEvent, TimelineOptions, TimelineProviderDescriptor, ITimelineService, Timeline } from '../../contrib/timeline/common/timeline.js';\nimport { revive } from '../../../base/common/marshalling.js';\n\n@extHostNamedCustomer(MainContext.MainThreadTimeline)\nexport class MainThreadTimeline implements MainThreadTimelineShape {\n\tprivate readonly _proxy: ExtHostTimelineShape;\n\tprivate readonly _providerEmitters = new Map<string, Emitter<TimelineChangeEvent>>();\n\n\tconstructor(\n\t\tcontext: IExtHostContext,\n\t\t@ILogService private readonly logService: ILogService,\n\t\t@ITimelineService private readonly _timelineService: ITimelineService\n\t) {\n\t\tthis._proxy = context.getProxy(ExtHostContext.ExtHostTimeline);\n\t}\n\n\t$registerTimelineProvider(provider: TimelineProviderDescriptor): void {\n\t\tthis.logService.trace(`MainThreadTimeline#registerTimelineProvider: id=${provider.id}`);\n\n\t\tconst proxy = this._proxy;\n\n\t\tconst emitters = this._providerEmitters;\n\t\tlet onDidChange = emitters.get(provider.id);\n\t\tif (onDidChange === undefined) {\n\t\t\tonDidChange = new Emitter<TimelineChangeEvent>();\n\t\t\temitters.set(provider.id, onDidChange);\n\t\t}\n\n\t\tthis._timelineService.registerTimelineProvider({\n\t\t\t...provider,\n\t\t\tonDidChange: onDidChange.event,\n\t\t\tasync provideTimeline(uri: URI, options: TimelineOptions, token: CancellationToken) {\n\t\t\t\treturn revive<Timeline>(await proxy.$getTimeline(provider.id, uri, options, token));\n\t\t\t},\n\t\t\tdispose() {\n\t\t\t\temitters.delete(provider.id);\n\t\t\t\tonDidChange?.dispose();\n\t\t\t}\n\t\t});\n\t}\n\n\t$unregisterTimelineProvider(id: string): void {\n\t\tthis.logService.trace(`MainThreadTimeline#unregisterTimelineProvider: id=${id}`);\n\n\t\tthis._timelineService.unregisterTimelineProvider(id);\n\t}\n\n\t$emitTimelineChangeEvent(e: TimelineChangeEvent): void {\n\t\tthis.logService.trace(`MainThreadTimeline#emitChangeEvent: id=${e.id}, uri=${e.uri?.toString(true)}`);\n\n\t\tconst emitter = this._providerEmitters.get(e.id);\n\t\temitter?.fire(e);\n\t}\n\n\tdispose(): void {\n\t\t// noop\n\t}\n}\n"],
  "mappings": ";;;;;;;;;;;;AAKA,SAAS,eAAe;AACxB,SAAS,yBAAyB;AAClC,SAAS,WAAW;AACpB,SAAS,mBAAmB;AAC5B,SAAS,aAAa,yBAAyB,sBAAsB,sBAAsB;AAC3F,SAAS,sBAAsB,uBAAuB;AACtD,SAAS,qBAAqB,iBAAiB,4BAA4B,kBAAkB,gBAAgB;AAC7G,SAAS,cAAc;AAGhB,IAAM,qBAAN,MAA4D;AAAA,EAIlE,YACC,SAC8B,YACK,kBAClC;AAF6B;AACK;AAEnC,SAAK,SAAS,QAAQ,SAAS,eAAe,eAAe;AAAA,EAC9D;AAAA,EATiB;AAAA,EACA,oBAAoB,oBAAI,IAA0C;AAAA,EAUnF,0BAA0B,UAA4C;AACrE,SAAK,WAAW,MAAM,mDAAmD,SAAS,EAAE,EAAE;AAEtF,UAAM,QAAQ,KAAK;AAEnB,UAAM,WAAW,KAAK;AACtB,QAAI,cAAc,SAAS,IAAI,SAAS,EAAE;AAC1C,QAAI,gBAAgB,QAAW;AAC9B,oBAAc,IAAI,QAA6B;AAC/C,eAAS,IAAI,SAAS,IAAI,WAAW;AAAA,IACtC;AAEA,SAAK,iBAAiB,yBAAyB;AAAA,MAC9C,GAAG;AAAA,MACH,aAAa,YAAY;AAAA,MACzB,MAAM,gBAAgB,KAAU,SAA0B,OAA0B;AACnF,eAAO,OAAiB,MAAM,MAAM,aAAa,SAAS,IAAI,KAAK,SAAS,KAAK,CAAC;AAAA,MACnF;AAAA,MACA,UAAU;AACT,iBAAS,OAAO,SAAS,EAAE;AAC3B,qBAAa,QAAQ;AAAA,MACtB;AAAA,IACD,CAAC;AAAA,EACF;AAAA,EAEA,4BAA4B,IAAkB;AAC7C,SAAK,WAAW,MAAM,qDAAqD,EAAE,EAAE;AAE/E,SAAK,iBAAiB,2BAA2B,EAAE;AAAA,EACpD;AAAA,EAEA,yBAAyB,GAA8B;AACtD,SAAK,WAAW,MAAM,0CAA0C,EAAE,EAAE,SAAS,EAAE,KAAK,SAAS,IAAI,CAAC,EAAE;AAEpG,UAAM,UAAU,KAAK,kBAAkB,IAAI,EAAE,EAAE;AAC/C,aAAS,KAAK,CAAC;AAAA,EAChB;AAAA,EAEA,UAAgB;AAAA,EAEhB;AACD;AArDmE;AAAtD,qBAAN;AAAA,EADN,qBAAqB,YAAY,kBAAkB;AAAA,EAOjD;AAAA,EACA;AAAA,GAPU;",
  "names": []
}
