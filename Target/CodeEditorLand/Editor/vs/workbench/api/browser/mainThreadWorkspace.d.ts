import { CancellationToken } from "vs/base/common/cancellation";
import { UriComponents } from "vs/base/common/uri";
import { IEnvironmentService } from "vs/platform/environment/common/environment";
import { IFileService } from "vs/platform/files/common/files";
import { IInstantiationService } from "vs/platform/instantiation/common/instantiation";
import { ILabelService } from "vs/platform/label/common/label";
import { INotificationService } from "vs/platform/notification/common/notification";
import { AuthInfo, Credentials, IRequestService } from "vs/platform/request/common/request";
import { ICanonicalUriService } from "vs/platform/workspace/common/canonicalUri";
import { IEditSessionIdentityService } from "vs/platform/workspace/common/editSessions";
import { IWorkspaceContextService } from "vs/platform/workspace/common/workspace";
import { IWorkspaceTrustManagementService, IWorkspaceTrustRequestService, WorkspaceTrustRequestOptions } from "vs/platform/workspace/common/workspaceTrust";
import { IEditorService } from "vs/workbench/services/editor/common/editorService";
import { IExtHostContext } from "vs/workbench/services/extensions/common/extHostCustomers";
import { IFileQueryBuilderOptions, ITextQueryBuilderOptions } from "vs/workbench/services/search/common/queryBuilder";
import { IPatternInfo, ISearchService } from "vs/workbench/services/search/common/search";
import { IWorkspaceEditingService } from "vs/workbench/services/workspaces/common/workspaceEditing";
import { ITextSearchComplete, MainThreadWorkspaceShape } from "../common/extHost.protocol";
export declare class MainThreadWorkspace implements MainThreadWorkspaceShape {
    private readonly _searchService;
    private readonly _contextService;
    private readonly _editSessionIdentityService;
    private readonly _canonicalUriService;
    private readonly _editorService;
    private readonly _workspaceEditingService;
    private readonly _notificationService;
    private readonly _requestService;
    private readonly _instantiationService;
    private readonly _labelService;
    private readonly _environmentService;
    private readonly _workspaceTrustManagementService;
    private readonly _workspaceTrustRequestService;
    private readonly _toDispose;
    private readonly _activeCancelTokens;
    private readonly _proxy;
    private readonly _queryBuilder;
    constructor(extHostContext: IExtHostContext, _searchService: ISearchService, _contextService: IWorkspaceContextService, _editSessionIdentityService: IEditSessionIdentityService, _canonicalUriService: ICanonicalUriService, _editorService: IEditorService, _workspaceEditingService: IWorkspaceEditingService, _notificationService: INotificationService, _requestService: IRequestService, _instantiationService: IInstantiationService, _labelService: ILabelService, _environmentService: IEnvironmentService, fileService: IFileService, _workspaceTrustManagementService: IWorkspaceTrustManagementService, _workspaceTrustRequestService: IWorkspaceTrustRequestService);
    dispose(): void;
    $updateWorkspaceFolders(extensionName: string, index: number, deleteCount: number, foldersToAdd: {
        uri: UriComponents;
        name?: string;
    }[]): Promise<void>;
    private getStatusMessage;
    private _onDidChangeWorkspace;
    private getWorkspaceData;
    $startFileSearch(_includeFolder: UriComponents | null, options: IFileQueryBuilderOptions, token: CancellationToken): Promise<UriComponents[] | null>;
    $startTextSearch(pattern: IPatternInfo, _folder: UriComponents | null, options: ITextQueryBuilderOptions, requestId: number, token: CancellationToken): Promise<ITextSearchComplete | null>;
    $checkExists(folders: readonly UriComponents[], includes: string[], token: CancellationToken): Promise<boolean>;
    $save(uriComponents: UriComponents, options: {
        saveAs: boolean;
    }): Promise<UriComponents | undefined>;
    private _saveResultToUris;
    $saveAll(includeUntitled?: boolean): Promise<boolean>;
    $resolveProxy(url: string): Promise<string | undefined>;
    $lookupAuthorization(authInfo: AuthInfo): Promise<Credentials | undefined>;
    $lookupKerberosAuthorization(url: string): Promise<string | undefined>;
    $loadCertificates(): Promise<string[]>;
    $requestWorkspaceTrust(options?: WorkspaceTrustRequestOptions): Promise<boolean | undefined>;
    private isWorkspaceTrusted;
    private _onDidGrantWorkspaceTrust;
    private registeredEditSessionProviders;
    $registerEditSessionIdentityProvider(handle: number, scheme: string): void;
    $unregisterEditSessionIdentityProvider(handle: number): void;
    private registeredCanonicalUriProviders;
    $registerCanonicalUriProvider(handle: number, scheme: string): void;
    $unregisterCanonicalUriProvider(handle: number): void;
}
