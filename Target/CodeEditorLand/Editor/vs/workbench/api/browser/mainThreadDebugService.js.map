{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/api/browser/mainThreadDebugService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { ErrorNoTelemetry } from \"../../../base/common/errors.js\";\nimport { Event } from \"../../../base/common/event.js\";\nimport {\n\tDisposableMap,\n\tDisposableStore,\n\ttype IDisposable,\n\ttoDisposable,\n} from \"../../../base/common/lifecycle.js\";\nimport severity from \"../../../base/common/severity.js\";\nimport { isDefined } from \"../../../base/common/types.js\";\nimport { type UriComponents, URI as uri } from \"../../../base/common/uri.js\";\nimport { ExtensionIdentifier } from \"../../../platform/extensions/common/extensions.js\";\nimport type { IWorkspaceFolder } from \"../../../platform/workspace/common/workspace.js\";\nimport { AbstractDebugAdapter } from \"../../contrib/debug/common/abstractDebugAdapter.js\";\nimport {\n\tDataBreakpointSetType,\n\ttype DebugConfigurationProviderTriggerKind,\n\ttype IBreakpoint,\n\ttype IBreakpointData,\n\ttype IConfig,\n\ttype IDataBreakpoint,\n\ttype IDebugAdapter,\n\ttype IDebugAdapterDescriptorFactory,\n\ttype IDebugAdapterFactory,\n\ttype IDebugConfigurationProvider,\n\tIDebugService,\n\ttype IDebugSession,\n\ttype IDebugSessionOptions,\n\tIDebugVisualization,\n\ttype IFunctionBreakpoint,\n\ttype IInstructionBreakpoint,\n} from \"../../contrib/debug/common/debug.js\";\nimport {\n\tconvertToDAPaths,\n\tconvertToVSCPaths,\n\tisSessionAttach,\n} from \"../../contrib/debug/common/debugUtils.js\";\nimport { IDebugVisualizerService } from \"../../contrib/debug/common/debugVisualizers.js\";\nimport {\n\ttype IExtHostContext,\n\textHostNamedCustomer,\n} from \"../../services/extensions/common/extHostCustomers.js\";\nimport {\n\ttype DebugSessionUUID,\n\tExtHostContext,\n\ttype ExtHostDebugServiceShape,\n\ttype IBreakpointsDeltaDto,\n\ttype IDataBreakpointDto,\n\ttype IDebugConfiguration,\n\ttype IDebugSessionDto,\n\ttype IFunctionBreakpointDto,\n\ttype ISourceBreakpointDto,\n\ttype ISourceMultiBreakpointDto,\n\ttype IStackFrameFocusDto,\n\ttype IStartDebuggingOptions,\n\ttype IThreadFocusDto,\n\tMainContext,\n\ttype MainThreadDebugServiceShape,\n} from \"../common/extHost.protocol.js\";\n\n@extHostNamedCustomer(MainContext.MainThreadDebugService)\nexport class MainThreadDebugService\n\timplements MainThreadDebugServiceShape, IDebugAdapterFactory\n{\n\tprivate readonly _proxy: ExtHostDebugServiceShape;\n\tprivate readonly _toDispose = new DisposableStore();\n\tprivate readonly _debugAdapters: Map<number, ExtensionHostDebugAdapter>;\n\tprivate _debugAdaptersHandleCounter = 1;\n\tprivate readonly _debugConfigurationProviders: Map<\n\t\tnumber,\n\t\tIDebugConfigurationProvider\n\t>;\n\tprivate readonly _debugAdapterDescriptorFactories: Map<\n\t\tnumber,\n\t\tIDebugAdapterDescriptorFactory\n\t>;\n\tprivate readonly _extHostKnownSessions: Set<DebugSessionUUID>;\n\tprivate readonly _visualizerHandles = new Map<string, IDisposable>();\n\tprivate readonly _visualizerTreeHandles = new Map<string, IDisposable>();\n\n\tconstructor(\n\t\textHostContext: IExtHostContext,\n\t\t@IDebugService private readonly debugService: IDebugService,\n\t\t@IDebugVisualizerService\n\t\tprivate readonly visualizerService: IDebugVisualizerService,\n\t) {\n\t\tthis._proxy = extHostContext.getProxy(\n\t\t\tExtHostContext.ExtHostDebugService,\n\t\t);\n\n\t\tconst sessionListeners = new DisposableMap<\n\t\t\tIDebugSession,\n\t\t\tDisposableStore\n\t\t>();\n\t\tthis._toDispose.add(sessionListeners);\n\t\tthis._toDispose.add(\n\t\t\tdebugService.onDidNewSession((session) => {\n\t\t\t\tthis._proxy.$acceptDebugSessionStarted(\n\t\t\t\t\tthis.getSessionDto(session),\n\t\t\t\t);\n\t\t\t\tconst store = sessionListeners.get(session);\n\t\t\t\tstore?.add(\n\t\t\t\t\tsession.onDidChangeName((name) => {\n\t\t\t\t\t\tthis._proxy.$acceptDebugSessionNameChanged(\n\t\t\t\t\t\t\tthis.getSessionDto(session),\n\t\t\t\t\t\t\tname,\n\t\t\t\t\t\t);\n\t\t\t\t\t}),\n\t\t\t\t);\n\t\t\t}),\n\t\t);\n\t\t// Need to start listening early to new session events because a custom event can come while a session is initialising\n\t\tthis._toDispose.add(\n\t\t\tdebugService.onWillNewSession((session) => {\n\t\t\t\tlet store = sessionListeners.get(session);\n\t\t\t\tif (!store) {\n\t\t\t\t\tstore = new DisposableStore();\n\t\t\t\t\tsessionListeners.set(session, store);\n\t\t\t\t}\n\t\t\t\tstore.add(\n\t\t\t\t\tsession.onDidCustomEvent((event) =>\n\t\t\t\t\t\tthis._proxy.$acceptDebugSessionCustomEvent(\n\t\t\t\t\t\t\tthis.getSessionDto(session),\n\t\t\t\t\t\t\tevent,\n\t\t\t\t\t\t),\n\t\t\t\t\t),\n\t\t\t\t);\n\t\t\t}),\n\t\t);\n\t\tthis._toDispose.add(\n\t\t\tdebugService.onDidEndSession(({ session, restart }) => {\n\t\t\t\tthis._proxy.$acceptDebugSessionTerminated(\n\t\t\t\t\tthis.getSessionDto(session),\n\t\t\t\t);\n\t\t\t\tthis._extHostKnownSessions.delete(session.getId());\n\n\t\t\t\t// keep the session listeners around since we still will get events after they restart\n\t\t\t\tif (!restart) {\n\t\t\t\t\tsessionListeners.deleteAndDispose(session);\n\t\t\t\t}\n\n\t\t\t\t// any restarted session will create a new DA, so always throw the old one away.\n\t\t\t\tfor (const [handle, value] of this._debugAdapters) {\n\t\t\t\t\tif (value.session === session) {\n\t\t\t\t\t\tthis._debugAdapters.delete(handle);\n\t\t\t\t\t\t// break;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}),\n\t\t);\n\t\tthis._toDispose.add(\n\t\t\tdebugService.getViewModel().onDidFocusSession((session) => {\n\t\t\t\tthis._proxy.$acceptDebugSessionActiveChanged(\n\t\t\t\t\tthis.getSessionDto(session),\n\t\t\t\t);\n\t\t\t}),\n\t\t);\n\t\tthis._toDispose.add(\n\t\t\ttoDisposable(() => {\n\t\t\t\tfor (const [handle, da] of this._debugAdapters) {\n\t\t\t\t\tda.fireError(handle, new Error(\"Extension host shut down\"));\n\t\t\t\t}\n\t\t\t}),\n\t\t);\n\n\t\tthis._debugAdapters = new Map();\n\t\tthis._debugConfigurationProviders = new Map();\n\t\tthis._debugAdapterDescriptorFactories = new Map();\n\t\tthis._extHostKnownSessions = new Set();\n\n\t\tconst viewModel = this.debugService.getViewModel();\n\t\tthis._toDispose.add(\n\t\t\tEvent.any(\n\t\t\t\tviewModel.onDidFocusStackFrame,\n\t\t\t\tviewModel.onDidFocusThread,\n\t\t\t)(() => {\n\t\t\t\tconst stackFrame = viewModel.focusedStackFrame;\n\t\t\t\tconst thread = viewModel.focusedThread;\n\t\t\t\tif (stackFrame) {\n\t\t\t\t\tthis._proxy.$acceptStackFrameFocus({\n\t\t\t\t\t\tkind: \"stackFrame\",\n\t\t\t\t\t\tthreadId: stackFrame.thread.threadId,\n\t\t\t\t\t\tframeId: stackFrame.frameId,\n\t\t\t\t\t\tsessionId: stackFrame.thread.session.getId(),\n\t\t\t\t\t} satisfies IStackFrameFocusDto);\n\t\t\t\t} else if (thread) {\n\t\t\t\t\tthis._proxy.$acceptStackFrameFocus({\n\t\t\t\t\t\tkind: \"thread\",\n\t\t\t\t\t\tthreadId: thread.threadId,\n\t\t\t\t\t\tsessionId: thread.session.getId(),\n\t\t\t\t\t} satisfies IThreadFocusDto);\n\t\t\t\t} else {\n\t\t\t\t\tthis._proxy.$acceptStackFrameFocus(undefined);\n\t\t\t\t}\n\t\t\t}),\n\t\t);\n\n\t\tthis.sendBreakpointsAndListen();\n\t}\n\n\t$registerDebugVisualizerTree(treeId: string, canEdit: boolean): void {\n\t\tthis.visualizerService.registerTree(treeId, {\n\t\t\tdisposeItem: (id) => this._proxy.$disposeVisualizedTree(id),\n\t\t\tgetChildren: (e) =>\n\t\t\t\tthis._proxy.$getVisualizerTreeItemChildren(treeId, e),\n\t\t\tgetTreeItem: (e) => this._proxy.$getVisualizerTreeItem(treeId, e),\n\t\t\teditItem: canEdit\n\t\t\t\t? (e, v) => this._proxy.$editVisualizerTreeItem(e, v)\n\t\t\t\t: undefined,\n\t\t});\n\t}\n\n\t$unregisterDebugVisualizerTree(treeId: string): void {\n\t\tthis._visualizerTreeHandles.get(treeId)?.dispose();\n\t\tthis._visualizerTreeHandles.delete(treeId);\n\t}\n\n\t$registerDebugVisualizer(extensionId: string, id: string): void {\n\t\tconst handle = this.visualizerService.register({\n\t\t\textensionId: new ExtensionIdentifier(extensionId),\n\t\t\tid,\n\t\t\tdisposeDebugVisualizers: (ids) =>\n\t\t\t\tthis._proxy.$disposeDebugVisualizers(ids),\n\t\t\texecuteDebugVisualizerCommand: (id) =>\n\t\t\t\tthis._proxy.$executeDebugVisualizerCommand(id),\n\t\t\tprovideDebugVisualizers: (context, token) =>\n\t\t\t\tthis._proxy\n\t\t\t\t\t.$provideDebugVisualizers(extensionId, id, context, token)\n\t\t\t\t\t.then((r) => r.map(IDebugVisualization.deserialize)),\n\t\t\tresolveDebugVisualizer: (viz, token) =>\n\t\t\t\tthis._proxy.$resolveDebugVisualizer(viz.id, token),\n\t\t});\n\t\tthis._visualizerHandles.set(`${extensionId}/${id}`, handle);\n\t}\n\n\t$unregisterDebugVisualizer(extensionId: string, id: string): void {\n\t\tconst key = `${extensionId}/${id}`;\n\t\tthis._visualizerHandles.get(key)?.dispose();\n\t\tthis._visualizerHandles.delete(key);\n\t}\n\n\tprivate sendBreakpointsAndListen(): void {\n\t\t// set up a handler to send more\n\t\tthis._toDispose.add(\n\t\t\tthis.debugService.getModel().onDidChangeBreakpoints((e) => {\n\t\t\t\t// Ignore session only breakpoint events since they should only reflect in the UI\n\t\t\t\tif (e && !e.sessionOnly) {\n\t\t\t\t\tconst delta: IBreakpointsDeltaDto = {};\n\t\t\t\t\tif (e.added) {\n\t\t\t\t\t\tdelta.added = this.convertToDto(e.added);\n\t\t\t\t\t}\n\t\t\t\t\tif (e.removed) {\n\t\t\t\t\t\tdelta.removed = e.removed.map((x) => x.getId());\n\t\t\t\t\t}\n\t\t\t\t\tif (e.changed) {\n\t\t\t\t\t\tdelta.changed = this.convertToDto(e.changed);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (delta.added || delta.removed || delta.changed) {\n\t\t\t\t\t\tthis._proxy.$acceptBreakpointsDelta(delta);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}),\n\t\t);\n\n\t\t// send all breakpoints\n\t\tconst bps = this.debugService.getModel().getBreakpoints();\n\t\tconst fbps = this.debugService.getModel().getFunctionBreakpoints();\n\t\tconst dbps = this.debugService.getModel().getDataBreakpoints();\n\t\tif (bps.length > 0 || fbps.length > 0) {\n\t\t\tthis._proxy.$acceptBreakpointsDelta({\n\t\t\t\tadded: this.convertToDto(bps)\n\t\t\t\t\t.concat(this.convertToDto(fbps))\n\t\t\t\t\t.concat(this.convertToDto(dbps)),\n\t\t\t});\n\t\t}\n\t}\n\n\tpublic dispose(): void {\n\t\tthis._toDispose.dispose();\n\t}\n\n\t// interface IDebugAdapterProvider\n\n\tcreateDebugAdapter(session: IDebugSession): IDebugAdapter {\n\t\tconst handle = this._debugAdaptersHandleCounter++;\n\t\tconst da = new ExtensionHostDebugAdapter(\n\t\t\tthis,\n\t\t\thandle,\n\t\t\tthis._proxy,\n\t\t\tsession,\n\t\t);\n\t\tthis._debugAdapters.set(handle, da);\n\t\treturn da;\n\t}\n\n\tsubstituteVariables(\n\t\tfolder: IWorkspaceFolder | undefined,\n\t\tconfig: IConfig,\n\t): Promise<IConfig> {\n\t\treturn Promise.resolve(\n\t\t\tthis._proxy.$substituteVariables(\n\t\t\t\tfolder ? folder.uri : undefined,\n\t\t\t\tconfig,\n\t\t\t),\n\t\t);\n\t}\n\n\trunInTerminal(\n\t\targs: DebugProtocol.RunInTerminalRequestArguments,\n\t\tsessionId: string,\n\t): Promise<number | undefined> {\n\t\treturn this._proxy.$runInTerminal(args, sessionId);\n\t}\n\n\t// RPC methods (MainThreadDebugServiceShape)\n\n\tpublic $registerDebugTypes(debugTypes: string[]) {\n\t\tthis._toDispose.add(\n\t\t\tthis.debugService\n\t\t\t\t.getAdapterManager()\n\t\t\t\t.registerDebugAdapterFactory(debugTypes, this),\n\t\t);\n\t}\n\n\tpublic $registerBreakpoints(\n\t\tDTOs: Array<\n\t\t\t| ISourceMultiBreakpointDto\n\t\t\t| IFunctionBreakpointDto\n\t\t\t| IDataBreakpointDto\n\t\t>,\n\t): Promise<void> {\n\t\tfor (const dto of DTOs) {\n\t\t\tif (dto.type === \"sourceMulti\") {\n\t\t\t\tconst rawbps = dto.lines.map(\n\t\t\t\t\t(l): IBreakpointData => ({\n\t\t\t\t\t\tid: l.id,\n\t\t\t\t\t\tenabled: l.enabled,\n\t\t\t\t\t\tlineNumber: l.line + 1,\n\t\t\t\t\t\tcolumn: l.character > 0 ? l.character + 1 : undefined, // a column value of 0 results in an omitted column attribute; see #46784\n\t\t\t\t\t\tcondition: l.condition,\n\t\t\t\t\t\thitCondition: l.hitCondition,\n\t\t\t\t\t\tlogMessage: l.logMessage,\n\t\t\t\t\t\tmode: l.mode,\n\t\t\t\t\t}),\n\t\t\t\t);\n\t\t\t\tthis.debugService.addBreakpoints(uri.revive(dto.uri), rawbps);\n\t\t\t} else if (dto.type === \"function\") {\n\t\t\t\tthis.debugService.addFunctionBreakpoint(\n\t\t\t\t\t{\n\t\t\t\t\t\tname: dto.functionName,\n\t\t\t\t\t\tmode: dto.mode,\n\t\t\t\t\t\tcondition: dto.condition,\n\t\t\t\t\t\thitCondition: dto.hitCondition,\n\t\t\t\t\t\tenabled: dto.enabled,\n\t\t\t\t\t\tlogMessage: dto.logMessage,\n\t\t\t\t\t},\n\t\t\t\t\tdto.id,\n\t\t\t\t);\n\t\t\t} else if (dto.type === \"data\") {\n\t\t\t\tthis.debugService.addDataBreakpoint({\n\t\t\t\t\tdescription: dto.label,\n\t\t\t\t\tsrc: {\n\t\t\t\t\t\ttype: DataBreakpointSetType.Variable,\n\t\t\t\t\t\tdataId: dto.dataId,\n\t\t\t\t\t},\n\t\t\t\t\tcanPersist: dto.canPersist,\n\t\t\t\t\taccessTypes: dto.accessTypes,\n\t\t\t\t\taccessType: dto.accessType,\n\t\t\t\t\tmode: dto.mode,\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t\treturn Promise.resolve();\n\t}\n\n\tpublic $unregisterBreakpoints(\n\t\tbreakpointIds: string[],\n\t\tfunctionBreakpointIds: string[],\n\t\tdataBreakpointIds: string[],\n\t): Promise<void> {\n\t\tbreakpointIds.forEach((id) => this.debugService.removeBreakpoints(id));\n\t\tfunctionBreakpointIds.forEach((id) =>\n\t\t\tthis.debugService.removeFunctionBreakpoints(id),\n\t\t);\n\t\tdataBreakpointIds.forEach((id) =>\n\t\t\tthis.debugService.removeDataBreakpoints(id),\n\t\t);\n\t\treturn Promise.resolve();\n\t}\n\n\tpublic $registerDebugConfigurationProvider(\n\t\tdebugType: string,\n\t\tproviderTriggerKind: DebugConfigurationProviderTriggerKind,\n\t\thasProvide: boolean,\n\t\thasResolve: boolean,\n\t\thasResolve2: boolean,\n\t\thandle: number,\n\t): Promise<void> {\n\t\tconst provider: IDebugConfigurationProvider = {\n\t\t\ttype: debugType,\n\t\t\ttriggerKind: providerTriggerKind,\n\t\t};\n\t\tif (hasProvide) {\n\t\t\tprovider.provideDebugConfigurations = (folder, token) => {\n\t\t\t\treturn this._proxy.$provideDebugConfigurations(\n\t\t\t\t\thandle,\n\t\t\t\t\tfolder,\n\t\t\t\t\ttoken,\n\t\t\t\t);\n\t\t\t};\n\t\t}\n\t\tif (hasResolve) {\n\t\t\tprovider.resolveDebugConfiguration = (folder, config, token) => {\n\t\t\t\treturn this._proxy.$resolveDebugConfiguration(\n\t\t\t\t\thandle,\n\t\t\t\t\tfolder,\n\t\t\t\t\tconfig,\n\t\t\t\t\ttoken,\n\t\t\t\t);\n\t\t\t};\n\t\t}\n\t\tif (hasResolve2) {\n\t\t\tprovider.resolveDebugConfigurationWithSubstitutedVariables = (\n\t\t\t\tfolder,\n\t\t\t\tconfig,\n\t\t\t\ttoken,\n\t\t\t) => {\n\t\t\t\treturn this._proxy.$resolveDebugConfigurationWithSubstitutedVariables(\n\t\t\t\t\thandle,\n\t\t\t\t\tfolder,\n\t\t\t\t\tconfig,\n\t\t\t\t\ttoken,\n\t\t\t\t);\n\t\t\t};\n\t\t}\n\t\tthis._debugConfigurationProviders.set(handle, provider);\n\t\tthis._toDispose.add(\n\t\t\tthis.debugService\n\t\t\t\t.getConfigurationManager()\n\t\t\t\t.registerDebugConfigurationProvider(provider),\n\t\t);\n\n\t\treturn Promise.resolve(undefined);\n\t}\n\n\tpublic $unregisterDebugConfigurationProvider(handle: number): void {\n\t\tconst provider = this._debugConfigurationProviders.get(handle);\n\t\tif (provider) {\n\t\t\tthis._debugConfigurationProviders.delete(handle);\n\t\t\tthis.debugService\n\t\t\t\t.getConfigurationManager()\n\t\t\t\t.unregisterDebugConfigurationProvider(provider);\n\t\t}\n\t}\n\n\tpublic $registerDebugAdapterDescriptorFactory(\n\t\tdebugType: string,\n\t\thandle: number,\n\t): Promise<void> {\n\t\tconst provider: IDebugAdapterDescriptorFactory = {\n\t\t\ttype: debugType,\n\t\t\tcreateDebugAdapterDescriptor: (session) => {\n\t\t\t\treturn Promise.resolve(\n\t\t\t\t\tthis._proxy.$provideDebugAdapter(\n\t\t\t\t\t\thandle,\n\t\t\t\t\t\tthis.getSessionDto(session),\n\t\t\t\t\t),\n\t\t\t\t);\n\t\t\t},\n\t\t};\n\t\tthis._debugAdapterDescriptorFactories.set(handle, provider);\n\t\tthis._toDispose.add(\n\t\t\tthis.debugService\n\t\t\t\t.getAdapterManager()\n\t\t\t\t.registerDebugAdapterDescriptorFactory(provider),\n\t\t);\n\n\t\treturn Promise.resolve(undefined);\n\t}\n\n\tpublic $unregisterDebugAdapterDescriptorFactory(handle: number): void {\n\t\tconst provider = this._debugAdapterDescriptorFactories.get(handle);\n\t\tif (provider) {\n\t\t\tthis._debugAdapterDescriptorFactories.delete(handle);\n\t\t\tthis.debugService\n\t\t\t\t.getAdapterManager()\n\t\t\t\t.unregisterDebugAdapterDescriptorFactory(provider);\n\t\t}\n\t}\n\n\tprivate getSession(\n\t\tsessionId: DebugSessionUUID | undefined,\n\t): IDebugSession | undefined {\n\t\tif (sessionId) {\n\t\t\treturn this.debugService.getModel().getSession(sessionId, true);\n\t\t}\n\t\treturn undefined;\n\t}\n\n\tpublic async $startDebugging(\n\t\tfolder: UriComponents | undefined,\n\t\tnameOrConfig: string | IDebugConfiguration,\n\t\toptions: IStartDebuggingOptions,\n\t): Promise<boolean> {\n\t\tconst folderUri = folder ? uri.revive(folder) : undefined;\n\t\tconst launch = this.debugService\n\t\t\t.getConfigurationManager()\n\t\t\t.getLaunch(folderUri);\n\t\tconst parentSession = this.getSession(options.parentSessionID);\n\t\tconst saveBeforeStart =\n\t\t\ttypeof options.suppressSaveBeforeStart === \"boolean\"\n\t\t\t\t? !options.suppressSaveBeforeStart\n\t\t\t\t: undefined;\n\t\tconst debugOptions: IDebugSessionOptions = {\n\t\t\tnoDebug: options.noDebug,\n\t\t\tparentSession,\n\t\t\tlifecycleManagedByParent: options.lifecycleManagedByParent,\n\t\t\trepl: options.repl,\n\t\t\tcompact: options.compact,\n\t\t\tcompoundRoot: parentSession?.compoundRoot,\n\t\t\tsaveBeforeRestart: saveBeforeStart,\n\t\t\ttestRun: options.testRun,\n\n\t\t\tsuppressDebugStatusbar: options.suppressDebugStatusbar,\n\t\t\tsuppressDebugToolbar: options.suppressDebugToolbar,\n\t\t\tsuppressDebugView: options.suppressDebugView,\n\t\t};\n\t\ttry {\n\t\t\treturn this.debugService.startDebugging(\n\t\t\t\tlaunch,\n\t\t\t\tnameOrConfig,\n\t\t\t\tdebugOptions,\n\t\t\t\tsaveBeforeStart,\n\t\t\t);\n\t\t} catch (err) {\n\t\t\tthrow new ErrorNoTelemetry(\n\t\t\t\terr && err.message ? err.message : \"cannot start debugging\",\n\t\t\t);\n\t\t}\n\t}\n\n\tpublic $setDebugSessionName(\n\t\tsessionId: DebugSessionUUID,\n\t\tname: string,\n\t): void {\n\t\tconst session = this.debugService.getModel().getSession(sessionId);\n\t\tsession?.setName(name);\n\t}\n\n\tpublic $customDebugAdapterRequest(\n\t\tsessionId: DebugSessionUUID,\n\t\trequest: string,\n\t\targs: any,\n\t): Promise<any> {\n\t\tconst session = this.debugService\n\t\t\t.getModel()\n\t\t\t.getSession(sessionId, true);\n\t\tif (session) {\n\t\t\treturn session.customRequest(request, args).then((response) => {\n\t\t\t\tif (response && response.success) {\n\t\t\t\t\treturn response.body;\n\t\t\t\t} else {\n\t\t\t\t\treturn Promise.reject(\n\t\t\t\t\t\tnew ErrorNoTelemetry(\n\t\t\t\t\t\t\tresponse\n\t\t\t\t\t\t\t\t? response.message\n\t\t\t\t\t\t\t\t: \"custom request failed\",\n\t\t\t\t\t\t),\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t\treturn Promise.reject(new ErrorNoTelemetry(\"debug session not found\"));\n\t}\n\n\tpublic $getDebugProtocolBreakpoint(\n\t\tsessionId: DebugSessionUUID,\n\t\tbreakpoinId: string,\n\t): Promise<DebugProtocol.Breakpoint | undefined> {\n\t\tconst session = this.debugService\n\t\t\t.getModel()\n\t\t\t.getSession(sessionId, true);\n\t\tif (session) {\n\t\t\treturn Promise.resolve(\n\t\t\t\tsession.getDebugProtocolBreakpoint(breakpoinId),\n\t\t\t);\n\t\t}\n\t\treturn Promise.reject(new ErrorNoTelemetry(\"debug session not found\"));\n\t}\n\n\tpublic $stopDebugging(\n\t\tsessionId: DebugSessionUUID | undefined,\n\t): Promise<void> {\n\t\tif (sessionId) {\n\t\t\tconst session = this.debugService\n\t\t\t\t.getModel()\n\t\t\t\t.getSession(sessionId, true);\n\t\t\tif (session) {\n\t\t\t\treturn this.debugService.stopSession(\n\t\t\t\t\tsession,\n\t\t\t\t\tisSessionAttach(session),\n\t\t\t\t);\n\t\t\t}\n\t\t} else {\n\t\t\t// stop all\n\t\t\treturn this.debugService.stopSession(undefined);\n\t\t}\n\t\treturn Promise.reject(new ErrorNoTelemetry(\"debug session not found\"));\n\t}\n\n\tpublic $appendDebugConsole(value: string): void {\n\t\t// Use warning as severity to get the orange color for messages coming from the debug extension\n\t\tconst session = this.debugService.getViewModel().focusedSession;\n\t\tsession?.appendToRepl({ output: value, sev: severity.Warning });\n\t}\n\n\tpublic $acceptDAMessage(\n\t\thandle: number,\n\t\tmessage: DebugProtocol.ProtocolMessage,\n\t) {\n\t\tthis.getDebugAdapter(handle).acceptMessage(\n\t\t\tconvertToVSCPaths(message, false),\n\t\t);\n\t}\n\n\tpublic $acceptDAError(\n\t\thandle: number,\n\t\tname: string,\n\t\tmessage: string,\n\t\tstack: string,\n\t) {\n\t\t// don't use getDebugAdapter since an error can be expected on a post-close\n\t\tthis._debugAdapters\n\t\t\t.get(handle)\n\t\t\t?.fireError(handle, new Error(`${name}: ${message}\\n${stack}`));\n\t}\n\n\tpublic $acceptDAExit(handle: number, code: number, signal: string) {\n\t\tthis.getDebugAdapter(handle).fireExit(handle, code, signal);\n\t}\n\n\tprivate getDebugAdapter(handle: number): ExtensionHostDebugAdapter {\n\t\tconst adapter = this._debugAdapters.get(handle);\n\t\tif (!adapter) {\n\t\t\tthrow new Error(\"Invalid debug adapter\");\n\t\t}\n\t\treturn adapter;\n\t}\n\n\t// dto helpers\n\n\tpublic $sessionCached(sessionID: string) {\n\t\t// remember that the EH has cached the session and we do not have to send it again\n\t\tthis._extHostKnownSessions.add(sessionID);\n\t}\n\n\tgetSessionDto(session: undefined): undefined;\n\tgetSessionDto(session: IDebugSession): IDebugSessionDto;\n\tgetSessionDto(\n\t\tsession: IDebugSession | undefined,\n\t): IDebugSessionDto | undefined;\n\tgetSessionDto(\n\t\tsession: IDebugSession | undefined,\n\t): IDebugSessionDto | undefined {\n\t\tif (session) {\n\t\t\tconst sessionID = <DebugSessionUUID>session.getId();\n\t\t\tif (this._extHostKnownSessions.has(sessionID)) {\n\t\t\t\treturn sessionID;\n\t\t\t} else {\n\t\t\t\t// this._sessions.add(sessionID); \t// #69534: see $sessionCached above\n\t\t\t\treturn {\n\t\t\t\t\tid: sessionID,\n\t\t\t\t\ttype: session.configuration.type,\n\t\t\t\t\tname: session.name,\n\t\t\t\t\tfolderUri: session.root ? session.root.uri : undefined,\n\t\t\t\t\tconfiguration: session.configuration,\n\t\t\t\t\tparent: session.parentSession?.getId(),\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\t\treturn undefined;\n\t}\n\n\tprivate convertToDto(\n\t\tbps: ReadonlyArray<\n\t\t\t| IBreakpoint\n\t\t\t| IFunctionBreakpoint\n\t\t\t| IDataBreakpoint\n\t\t\t| IInstructionBreakpoint\n\t\t>,\n\t): Array<\n\t\tISourceBreakpointDto | IFunctionBreakpointDto | IDataBreakpointDto\n\t> {\n\t\treturn bps\n\t\t\t.map((bp) => {\n\t\t\t\tif (\"name\" in bp) {\n\t\t\t\t\tconst fbp: IFunctionBreakpoint = bp;\n\t\t\t\t\treturn {\n\t\t\t\t\t\ttype: \"function\",\n\t\t\t\t\t\tid: fbp.getId(),\n\t\t\t\t\t\tenabled: fbp.enabled,\n\t\t\t\t\t\tcondition: fbp.condition,\n\t\t\t\t\t\thitCondition: fbp.hitCondition,\n\t\t\t\t\t\tlogMessage: fbp.logMessage,\n\t\t\t\t\t\tfunctionName: fbp.name,\n\t\t\t\t\t} satisfies IFunctionBreakpointDto;\n\t\t\t\t} else if (\"src\" in bp) {\n\t\t\t\t\tconst dbp: IDataBreakpoint = bp;\n\t\t\t\t\treturn {\n\t\t\t\t\t\ttype: \"data\",\n\t\t\t\t\t\tid: dbp.getId(),\n\t\t\t\t\t\tdataId:\n\t\t\t\t\t\t\tdbp.src.type === DataBreakpointSetType.Variable\n\t\t\t\t\t\t\t\t? dbp.src.dataId\n\t\t\t\t\t\t\t\t: dbp.src.address,\n\t\t\t\t\t\tenabled: dbp.enabled,\n\t\t\t\t\t\tcondition: dbp.condition,\n\t\t\t\t\t\thitCondition: dbp.hitCondition,\n\t\t\t\t\t\tlogMessage: dbp.logMessage,\n\t\t\t\t\t\taccessType: dbp.accessType,\n\t\t\t\t\t\tlabel: dbp.description,\n\t\t\t\t\t\tcanPersist: dbp.canPersist,\n\t\t\t\t\t} satisfies IDataBreakpointDto;\n\t\t\t\t} else if (\"uri\" in bp) {\n\t\t\t\t\tconst sbp: IBreakpoint = bp;\n\t\t\t\t\treturn {\n\t\t\t\t\t\ttype: \"source\",\n\t\t\t\t\t\tid: sbp.getId(),\n\t\t\t\t\t\tenabled: sbp.enabled,\n\t\t\t\t\t\tcondition: sbp.condition,\n\t\t\t\t\t\thitCondition: sbp.hitCondition,\n\t\t\t\t\t\tlogMessage: sbp.logMessage,\n\t\t\t\t\t\turi: sbp.uri,\n\t\t\t\t\t\tline: sbp.lineNumber > 0 ? sbp.lineNumber - 1 : 0,\n\t\t\t\t\t\tcharacter:\n\t\t\t\t\t\t\ttypeof sbp.column === \"number\" && sbp.column > 0\n\t\t\t\t\t\t\t\t? sbp.column - 1\n\t\t\t\t\t\t\t\t: 0,\n\t\t\t\t\t} satisfies ISourceBreakpointDto;\n\t\t\t\t} else {\n\t\t\t\t\treturn undefined;\n\t\t\t\t}\n\t\t\t})\n\t\t\t.filter(isDefined);\n\t}\n}\n\n/**\n * DebugAdapter that communicates via extension protocol with another debug adapter.\n */\nclass ExtensionHostDebugAdapter extends AbstractDebugAdapter {\n\tconstructor(\n\t\tprivate readonly _ds: MainThreadDebugService,\n\t\tprivate _handle: number,\n\t\tprivate _proxy: ExtHostDebugServiceShape,\n\t\treadonly session: IDebugSession,\n\t) {\n\t\tsuper();\n\t}\n\n\tfireError(handle: number, err: Error) {\n\t\tthis._onError.fire(err);\n\t}\n\n\tfireExit(handle: number, code: number, signal: string) {\n\t\tthis._onExit.fire(code);\n\t}\n\n\tstartSession(): Promise<void> {\n\t\treturn Promise.resolve(\n\t\t\tthis._proxy.$startDASession(\n\t\t\t\tthis._handle,\n\t\t\t\tthis._ds.getSessionDto(this.session),\n\t\t\t),\n\t\t);\n\t}\n\n\tsendMessage(message: DebugProtocol.ProtocolMessage): void {\n\t\tthis._proxy.$sendDAMessage(\n\t\t\tthis._handle,\n\t\t\tconvertToDAPaths(message, true),\n\t\t);\n\t}\n\n\tasync stopSession(): Promise<void> {\n\t\tawait this.cancelPendingRequests();\n\t\treturn Promise.resolve(this._proxy.$stopDASession(this._handle));\n\t}\n}\n"],
  "mappings": "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",
  "names": ["id"]
}
