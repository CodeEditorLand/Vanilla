{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/api/browser/mainThreadDebugService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { DisposableMap, DisposableStore, IDisposable, toDisposable } from '../../../base/common/lifecycle.js';\nimport { URI as uri, UriComponents } from '../../../base/common/uri.js';\nimport { IDebugService, IConfig, IDebugConfigurationProvider, IBreakpoint, IFunctionBreakpoint, IBreakpointData, IDebugAdapter, IDebugAdapterDescriptorFactory, IDebugSession, IDebugAdapterFactory, IDataBreakpoint, IDebugSessionOptions, IInstructionBreakpoint, DebugConfigurationProviderTriggerKind, IDebugVisualization, DataBreakpointSetType } from '../../contrib/debug/common/debug.js';\nimport {\n\tExtHostContext, ExtHostDebugServiceShape, MainThreadDebugServiceShape, DebugSessionUUID, MainContext,\n\tIBreakpointsDeltaDto, ISourceMultiBreakpointDto, ISourceBreakpointDto, IFunctionBreakpointDto, IDebugSessionDto, IDataBreakpointDto, IStartDebuggingOptions, IDebugConfiguration, IThreadFocusDto, IStackFrameFocusDto\n} from '../common/extHost.protocol.js';\nimport { extHostNamedCustomer, IExtHostContext } from '../../services/extensions/common/extHostCustomers.js';\nimport severity from '../../../base/common/severity.js';\nimport { AbstractDebugAdapter } from '../../contrib/debug/common/abstractDebugAdapter.js';\nimport { IWorkspaceFolder } from '../../../platform/workspace/common/workspace.js';\nimport { convertToVSCPaths, convertToDAPaths, isSessionAttach } from '../../contrib/debug/common/debugUtils.js';\nimport { ErrorNoTelemetry } from '../../../base/common/errors.js';\nimport { IDebugVisualizerService } from '../../contrib/debug/common/debugVisualizers.js';\nimport { ExtensionIdentifier } from '../../../platform/extensions/common/extensions.js';\nimport { Event } from '../../../base/common/event.js';\nimport { isDefined } from '../../../base/common/types.js';\n\n@extHostNamedCustomer(MainContext.MainThreadDebugService)\nexport class MainThreadDebugService implements MainThreadDebugServiceShape, IDebugAdapterFactory {\n\n\tprivate readonly _proxy: ExtHostDebugServiceShape;\n\tprivate readonly _toDispose = new DisposableStore();\n\tprivate readonly _debugAdapters: Map<number, ExtensionHostDebugAdapter>;\n\tprivate _debugAdaptersHandleCounter = 1;\n\tprivate readonly _debugConfigurationProviders: Map<number, IDebugConfigurationProvider>;\n\tprivate readonly _debugAdapterDescriptorFactories: Map<number, IDebugAdapterDescriptorFactory>;\n\tprivate readonly _extHostKnownSessions: Set<DebugSessionUUID>;\n\tprivate readonly _visualizerHandles = new Map<string, IDisposable>();\n\tprivate readonly _visualizerTreeHandles = new Map<string, IDisposable>();\n\n\tconstructor(\n\t\textHostContext: IExtHostContext,\n\t\t@IDebugService private readonly debugService: IDebugService,\n\t\t@IDebugVisualizerService private readonly visualizerService: IDebugVisualizerService,\n\t) {\n\t\tthis._proxy = extHostContext.getProxy(ExtHostContext.ExtHostDebugService);\n\n\t\tconst sessionListeners = new DisposableMap<IDebugSession, DisposableStore>();\n\t\tthis._toDispose.add(sessionListeners);\n\t\tthis._toDispose.add(debugService.onDidNewSession(session => {\n\t\t\tthis._proxy.$acceptDebugSessionStarted(this.getSessionDto(session));\n\t\t\tconst store = sessionListeners.get(session);\n\t\t\tstore?.add(session.onDidChangeName(name => {\n\t\t\t\tthis._proxy.$acceptDebugSessionNameChanged(this.getSessionDto(session), name);\n\t\t\t}));\n\t\t}));\n\t\t// Need to start listening early to new session events because a custom event can come while a session is initialising\n\t\tthis._toDispose.add(debugService.onWillNewSession(session => {\n\t\t\tlet store = sessionListeners.get(session);\n\t\t\tif (!store) {\n\t\t\t\tstore = new DisposableStore();\n\t\t\t\tsessionListeners.set(session, store);\n\t\t\t}\n\t\t\tstore.add(session.onDidCustomEvent(event => this._proxy.$acceptDebugSessionCustomEvent(this.getSessionDto(session), event)));\n\t\t}));\n\t\tthis._toDispose.add(debugService.onDidEndSession(({ session, restart }) => {\n\t\t\tthis._proxy.$acceptDebugSessionTerminated(this.getSessionDto(session));\n\t\t\tthis._extHostKnownSessions.delete(session.getId());\n\n\t\t\t// keep the session listeners around since we still will get events after they restart\n\t\t\tif (!restart) {\n\t\t\t\tsessionListeners.deleteAndDispose(session);\n\t\t\t}\n\n\t\t\t// any restarted session will create a new DA, so always throw the old one away.\n\t\t\tfor (const [handle, value] of this._debugAdapters) {\n\t\t\t\tif (value.session === session) {\n\t\t\t\t\tthis._debugAdapters.delete(handle);\n\t\t\t\t\t// break;\n\t\t\t\t}\n\t\t\t}\n\t\t}));\n\t\tthis._toDispose.add(debugService.getViewModel().onDidFocusSession(session => {\n\t\t\tthis._proxy.$acceptDebugSessionActiveChanged(this.getSessionDto(session));\n\t\t}));\n\t\tthis._toDispose.add(toDisposable(() => {\n\t\t\tfor (const [handle, da] of this._debugAdapters) {\n\t\t\t\tda.fireError(handle, new Error('Extension host shut down'));\n\t\t\t}\n\t\t}));\n\n\t\tthis._debugAdapters = new Map();\n\t\tthis._debugConfigurationProviders = new Map();\n\t\tthis._debugAdapterDescriptorFactories = new Map();\n\t\tthis._extHostKnownSessions = new Set();\n\n\t\tconst viewModel = this.debugService.getViewModel();\n\t\tthis._toDispose.add(Event.any(viewModel.onDidFocusStackFrame, viewModel.onDidFocusThread)(() => {\n\t\t\tconst stackFrame = viewModel.focusedStackFrame;\n\t\t\tconst thread = viewModel.focusedThread;\n\t\t\tif (stackFrame) {\n\t\t\t\tthis._proxy.$acceptStackFrameFocus({\n\t\t\t\t\tkind: 'stackFrame',\n\t\t\t\t\tthreadId: stackFrame.thread.threadId,\n\t\t\t\t\tframeId: stackFrame.frameId,\n\t\t\t\t\tsessionId: stackFrame.thread.session.getId(),\n\t\t\t\t} satisfies IStackFrameFocusDto);\n\t\t\t} else if (thread) {\n\t\t\t\tthis._proxy.$acceptStackFrameFocus({\n\t\t\t\t\tkind: 'thread',\n\t\t\t\t\tthreadId: thread.threadId,\n\t\t\t\t\tsessionId: thread.session.getId(),\n\t\t\t\t} satisfies IThreadFocusDto);\n\t\t\t} else {\n\t\t\t\tthis._proxy.$acceptStackFrameFocus(undefined);\n\t\t\t}\n\t\t}));\n\n\t\tthis.sendBreakpointsAndListen();\n\t}\n\n\t$registerDebugVisualizerTree(treeId: string, canEdit: boolean): void {\n\t\tthis.visualizerService.registerTree(treeId, {\n\t\t\tdisposeItem: id => this._proxy.$disposeVisualizedTree(id),\n\t\t\tgetChildren: e => this._proxy.$getVisualizerTreeItemChildren(treeId, e),\n\t\t\tgetTreeItem: e => this._proxy.$getVisualizerTreeItem(treeId, e),\n\t\t\teditItem: canEdit ? ((e, v) => this._proxy.$editVisualizerTreeItem(e, v)) : undefined\n\t\t});\n\t}\n\n\t$unregisterDebugVisualizerTree(treeId: string): void {\n\t\tthis._visualizerTreeHandles.get(treeId)?.dispose();\n\t\tthis._visualizerTreeHandles.delete(treeId);\n\t}\n\n\t$registerDebugVisualizer(extensionId: string, id: string): void {\n\t\tconst handle = this.visualizerService.register({\n\t\t\textensionId: new ExtensionIdentifier(extensionId),\n\t\t\tid,\n\t\t\tdisposeDebugVisualizers: ids => this._proxy.$disposeDebugVisualizers(ids),\n\t\t\texecuteDebugVisualizerCommand: id => this._proxy.$executeDebugVisualizerCommand(id),\n\t\t\tprovideDebugVisualizers: (context, token) => this._proxy.$provideDebugVisualizers(extensionId, id, context, token).then(r => r.map(IDebugVisualization.deserialize)),\n\t\t\tresolveDebugVisualizer: (viz, token) => this._proxy.$resolveDebugVisualizer(viz.id, token),\n\t\t});\n\t\tthis._visualizerHandles.set(`${extensionId}/${id}`, handle);\n\t}\n\n\t$unregisterDebugVisualizer(extensionId: string, id: string): void {\n\t\tconst key = `${extensionId}/${id}`;\n\t\tthis._visualizerHandles.get(key)?.dispose();\n\t\tthis._visualizerHandles.delete(key);\n\t}\n\n\tprivate sendBreakpointsAndListen(): void {\n\t\t// set up a handler to send more\n\t\tthis._toDispose.add(this.debugService.getModel().onDidChangeBreakpoints(e => {\n\t\t\t// Ignore session only breakpoint events since they should only reflect in the UI\n\t\t\tif (e && !e.sessionOnly) {\n\t\t\t\tconst delta: IBreakpointsDeltaDto = {};\n\t\t\t\tif (e.added) {\n\t\t\t\t\tdelta.added = this.convertToDto(e.added);\n\t\t\t\t}\n\t\t\t\tif (e.removed) {\n\t\t\t\t\tdelta.removed = e.removed.map(x => x.getId());\n\t\t\t\t}\n\t\t\t\tif (e.changed) {\n\t\t\t\t\tdelta.changed = this.convertToDto(e.changed);\n\t\t\t\t}\n\n\t\t\t\tif (delta.added || delta.removed || delta.changed) {\n\t\t\t\t\tthis._proxy.$acceptBreakpointsDelta(delta);\n\t\t\t\t}\n\t\t\t}\n\t\t}));\n\n\t\t// send all breakpoints\n\t\tconst bps = this.debugService.getModel().getBreakpoints();\n\t\tconst fbps = this.debugService.getModel().getFunctionBreakpoints();\n\t\tconst dbps = this.debugService.getModel().getDataBreakpoints();\n\t\tif (bps.length > 0 || fbps.length > 0) {\n\t\t\tthis._proxy.$acceptBreakpointsDelta({\n\t\t\t\tadded: this.convertToDto(bps).concat(this.convertToDto(fbps)).concat(this.convertToDto(dbps))\n\t\t\t});\n\t\t}\n\t}\n\n\tpublic dispose(): void {\n\t\tthis._toDispose.dispose();\n\t}\n\n\t// interface IDebugAdapterProvider\n\n\tcreateDebugAdapter(session: IDebugSession): IDebugAdapter {\n\t\tconst handle = this._debugAdaptersHandleCounter++;\n\t\tconst da = new ExtensionHostDebugAdapter(this, handle, this._proxy, session);\n\t\tthis._debugAdapters.set(handle, da);\n\t\treturn da;\n\t}\n\n\tsubstituteVariables(folder: IWorkspaceFolder | undefined, config: IConfig): Promise<IConfig> {\n\t\treturn Promise.resolve(this._proxy.$substituteVariables(folder ? folder.uri : undefined, config));\n\t}\n\n\trunInTerminal(args: DebugProtocol.RunInTerminalRequestArguments, sessionId: string): Promise<number | undefined> {\n\t\treturn this._proxy.$runInTerminal(args, sessionId);\n\t}\n\n\t// RPC methods (MainThreadDebugServiceShape)\n\n\tpublic $registerDebugTypes(debugTypes: string[]) {\n\t\tthis._toDispose.add(this.debugService.getAdapterManager().registerDebugAdapterFactory(debugTypes, this));\n\t}\n\n\tpublic $registerBreakpoints(DTOs: Array<ISourceMultiBreakpointDto | IFunctionBreakpointDto | IDataBreakpointDto>): Promise<void> {\n\n\t\tfor (const dto of DTOs) {\n\t\t\tif (dto.type === 'sourceMulti') {\n\t\t\t\tconst rawbps = dto.lines.map((l): IBreakpointData => ({\n\t\t\t\t\tid: l.id,\n\t\t\t\t\tenabled: l.enabled,\n\t\t\t\t\tlineNumber: l.line + 1,\n\t\t\t\t\tcolumn: l.character > 0 ? l.character + 1 : undefined, // a column value of 0 results in an omitted column attribute; see #46784\n\t\t\t\t\tcondition: l.condition,\n\t\t\t\t\thitCondition: l.hitCondition,\n\t\t\t\t\tlogMessage: l.logMessage,\n\t\t\t\t\tmode: l.mode,\n\t\t\t\t}));\n\t\t\t\tthis.debugService.addBreakpoints(uri.revive(dto.uri), rawbps);\n\t\t\t} else if (dto.type === 'function') {\n\t\t\t\tthis.debugService.addFunctionBreakpoint({\n\t\t\t\t\tname: dto.functionName,\n\t\t\t\t\tmode: dto.mode,\n\t\t\t\t\tcondition: dto.condition,\n\t\t\t\t\thitCondition: dto.hitCondition,\n\t\t\t\t\tenabled: dto.enabled,\n\t\t\t\t\tlogMessage: dto.logMessage\n\t\t\t\t}, dto.id);\n\t\t\t} else if (dto.type === 'data') {\n\t\t\t\tthis.debugService.addDataBreakpoint({\n\t\t\t\t\tdescription: dto.label,\n\t\t\t\t\tsrc: { type: DataBreakpointSetType.Variable, dataId: dto.dataId },\n\t\t\t\t\tcanPersist: dto.canPersist,\n\t\t\t\t\taccessTypes: dto.accessTypes,\n\t\t\t\t\taccessType: dto.accessType,\n\t\t\t\t\tmode: dto.mode\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t\treturn Promise.resolve();\n\t}\n\n\tpublic $unregisterBreakpoints(breakpointIds: string[], functionBreakpointIds: string[], dataBreakpointIds: string[]): Promise<void> {\n\t\tbreakpointIds.forEach(id => this.debugService.removeBreakpoints(id));\n\t\tfunctionBreakpointIds.forEach(id => this.debugService.removeFunctionBreakpoints(id));\n\t\tdataBreakpointIds.forEach(id => this.debugService.removeDataBreakpoints(id));\n\t\treturn Promise.resolve();\n\t}\n\n\tpublic $registerDebugConfigurationProvider(debugType: string, providerTriggerKind: DebugConfigurationProviderTriggerKind, hasProvide: boolean, hasResolve: boolean, hasResolve2: boolean, handle: number): Promise<void> {\n\n\t\tconst provider: IDebugConfigurationProvider = {\n\t\t\ttype: debugType,\n\t\t\ttriggerKind: providerTriggerKind\n\t\t};\n\t\tif (hasProvide) {\n\t\t\tprovider.provideDebugConfigurations = (folder, token) => {\n\t\t\t\treturn this._proxy.$provideDebugConfigurations(handle, folder, token);\n\t\t\t};\n\t\t}\n\t\tif (hasResolve) {\n\t\t\tprovider.resolveDebugConfiguration = (folder, config, token) => {\n\t\t\t\treturn this._proxy.$resolveDebugConfiguration(handle, folder, config, token);\n\t\t\t};\n\t\t}\n\t\tif (hasResolve2) {\n\t\t\tprovider.resolveDebugConfigurationWithSubstitutedVariables = (folder, config, token) => {\n\t\t\t\treturn this._proxy.$resolveDebugConfigurationWithSubstitutedVariables(handle, folder, config, token);\n\t\t\t};\n\t\t}\n\t\tthis._debugConfigurationProviders.set(handle, provider);\n\t\tthis._toDispose.add(this.debugService.getConfigurationManager().registerDebugConfigurationProvider(provider));\n\n\t\treturn Promise.resolve(undefined);\n\t}\n\n\tpublic $unregisterDebugConfigurationProvider(handle: number): void {\n\t\tconst provider = this._debugConfigurationProviders.get(handle);\n\t\tif (provider) {\n\t\t\tthis._debugConfigurationProviders.delete(handle);\n\t\t\tthis.debugService.getConfigurationManager().unregisterDebugConfigurationProvider(provider);\n\t\t}\n\t}\n\n\tpublic $registerDebugAdapterDescriptorFactory(debugType: string, handle: number): Promise<void> {\n\n\t\tconst provider: IDebugAdapterDescriptorFactory = {\n\t\t\ttype: debugType,\n\t\t\tcreateDebugAdapterDescriptor: session => {\n\t\t\t\treturn Promise.resolve(this._proxy.$provideDebugAdapter(handle, this.getSessionDto(session)));\n\t\t\t}\n\t\t};\n\t\tthis._debugAdapterDescriptorFactories.set(handle, provider);\n\t\tthis._toDispose.add(this.debugService.getAdapterManager().registerDebugAdapterDescriptorFactory(provider));\n\n\t\treturn Promise.resolve(undefined);\n\t}\n\n\tpublic $unregisterDebugAdapterDescriptorFactory(handle: number): void {\n\t\tconst provider = this._debugAdapterDescriptorFactories.get(handle);\n\t\tif (provider) {\n\t\t\tthis._debugAdapterDescriptorFactories.delete(handle);\n\t\t\tthis.debugService.getAdapterManager().unregisterDebugAdapterDescriptorFactory(provider);\n\t\t}\n\t}\n\n\tprivate getSession(sessionId: DebugSessionUUID | undefined): IDebugSession | undefined {\n\t\tif (sessionId) {\n\t\t\treturn this.debugService.getModel().getSession(sessionId, true);\n\t\t}\n\t\treturn undefined;\n\t}\n\n\tpublic async $startDebugging(folder: UriComponents | undefined, nameOrConfig: string | IDebugConfiguration, options: IStartDebuggingOptions): Promise<boolean> {\n\t\tconst folderUri = folder ? uri.revive(folder) : undefined;\n\t\tconst launch = this.debugService.getConfigurationManager().getLaunch(folderUri);\n\t\tconst parentSession = this.getSession(options.parentSessionID);\n\t\tconst saveBeforeStart = typeof options.suppressSaveBeforeStart === 'boolean' ? !options.suppressSaveBeforeStart : undefined;\n\t\tconst debugOptions: IDebugSessionOptions = {\n\t\t\tnoDebug: options.noDebug,\n\t\t\tparentSession,\n\t\t\tlifecycleManagedByParent: options.lifecycleManagedByParent,\n\t\t\trepl: options.repl,\n\t\t\tcompact: options.compact,\n\t\t\tcompoundRoot: parentSession?.compoundRoot,\n\t\t\tsaveBeforeRestart: saveBeforeStart,\n\t\t\ttestRun: options.testRun,\n\n\t\t\tsuppressDebugStatusbar: options.suppressDebugStatusbar,\n\t\t\tsuppressDebugToolbar: options.suppressDebugToolbar,\n\t\t\tsuppressDebugView: options.suppressDebugView,\n\t\t};\n\t\ttry {\n\t\t\treturn this.debugService.startDebugging(launch, nameOrConfig, debugOptions, saveBeforeStart);\n\t\t} catch (err) {\n\t\t\tthrow new ErrorNoTelemetry(err && err.message ? err.message : 'cannot start debugging');\n\t\t}\n\t}\n\n\tpublic $setDebugSessionName(sessionId: DebugSessionUUID, name: string): void {\n\t\tconst session = this.debugService.getModel().getSession(sessionId);\n\t\tsession?.setName(name);\n\t}\n\n\tpublic $customDebugAdapterRequest(sessionId: DebugSessionUUID, request: string, args: any): Promise<any> {\n\t\tconst session = this.debugService.getModel().getSession(sessionId, true);\n\t\tif (session) {\n\t\t\treturn session.customRequest(request, args).then(response => {\n\t\t\t\tif (response && response.success) {\n\t\t\t\t\treturn response.body;\n\t\t\t\t} else {\n\t\t\t\t\treturn Promise.reject(new ErrorNoTelemetry(response ? response.message : 'custom request failed'));\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t\treturn Promise.reject(new ErrorNoTelemetry('debug session not found'));\n\t}\n\n\tpublic $getDebugProtocolBreakpoint(sessionId: DebugSessionUUID, breakpoinId: string): Promise<DebugProtocol.Breakpoint | undefined> {\n\t\tconst session = this.debugService.getModel().getSession(sessionId, true);\n\t\tif (session) {\n\t\t\treturn Promise.resolve(session.getDebugProtocolBreakpoint(breakpoinId));\n\t\t}\n\t\treturn Promise.reject(new ErrorNoTelemetry('debug session not found'));\n\t}\n\n\tpublic $stopDebugging(sessionId: DebugSessionUUID | undefined): Promise<void> {\n\t\tif (sessionId) {\n\t\t\tconst session = this.debugService.getModel().getSession(sessionId, true);\n\t\t\tif (session) {\n\t\t\t\treturn this.debugService.stopSession(session, isSessionAttach(session));\n\t\t\t}\n\t\t} else {\t// stop all\n\t\t\treturn this.debugService.stopSession(undefined);\n\t\t}\n\t\treturn Promise.reject(new ErrorNoTelemetry('debug session not found'));\n\t}\n\n\tpublic $appendDebugConsole(value: string): void {\n\t\t// Use warning as severity to get the orange color for messages coming from the debug extension\n\t\tconst session = this.debugService.getViewModel().focusedSession;\n\t\tsession?.appendToRepl({ output: value, sev: severity.Warning });\n\t}\n\n\tpublic $acceptDAMessage(handle: number, message: DebugProtocol.ProtocolMessage) {\n\t\tthis.getDebugAdapter(handle).acceptMessage(convertToVSCPaths(message, false));\n\t}\n\n\tpublic $acceptDAError(handle: number, name: string, message: string, stack: string) {\n\t\t// don't use getDebugAdapter since an error can be expected on a post-close\n\t\tthis._debugAdapters.get(handle)?.fireError(handle, new Error(`${name}: ${message}\\n${stack}`));\n\t}\n\n\tpublic $acceptDAExit(handle: number, code: number, signal: string) {\n\t\tthis.getDebugAdapter(handle).fireExit(handle, code, signal);\n\t}\n\n\tprivate getDebugAdapter(handle: number): ExtensionHostDebugAdapter {\n\t\tconst adapter = this._debugAdapters.get(handle);\n\t\tif (!adapter) {\n\t\t\tthrow new Error('Invalid debug adapter');\n\t\t}\n\t\treturn adapter;\n\t}\n\n\t// dto helpers\n\n\tpublic $sessionCached(sessionID: string) {\n\t\t// remember that the EH has cached the session and we do not have to send it again\n\t\tthis._extHostKnownSessions.add(sessionID);\n\t}\n\n\n\tgetSessionDto(session: undefined): undefined;\n\tgetSessionDto(session: IDebugSession): IDebugSessionDto;\n\tgetSessionDto(session: IDebugSession | undefined): IDebugSessionDto | undefined;\n\tgetSessionDto(session: IDebugSession | undefined): IDebugSessionDto | undefined {\n\t\tif (session) {\n\t\t\tconst sessionID = <DebugSessionUUID>session.getId();\n\t\t\tif (this._extHostKnownSessions.has(sessionID)) {\n\t\t\t\treturn sessionID;\n\t\t\t} else {\n\t\t\t\t// this._sessions.add(sessionID); \t// #69534: see $sessionCached above\n\t\t\t\treturn {\n\t\t\t\t\tid: sessionID,\n\t\t\t\t\ttype: session.configuration.type,\n\t\t\t\t\tname: session.name,\n\t\t\t\t\tfolderUri: session.root ? session.root.uri : undefined,\n\t\t\t\t\tconfiguration: session.configuration,\n\t\t\t\t\tparent: session.parentSession?.getId(),\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\t\treturn undefined;\n\t}\n\n\tprivate convertToDto(bps: (ReadonlyArray<IBreakpoint | IFunctionBreakpoint | IDataBreakpoint | IInstructionBreakpoint>)): Array<ISourceBreakpointDto | IFunctionBreakpointDto | IDataBreakpointDto> {\n\t\treturn bps.map(bp => {\n\t\t\tif ('name' in bp) {\n\t\t\t\tconst fbp: IFunctionBreakpoint = bp;\n\t\t\t\treturn {\n\t\t\t\t\ttype: 'function',\n\t\t\t\t\tid: fbp.getId(),\n\t\t\t\t\tenabled: fbp.enabled,\n\t\t\t\t\tcondition: fbp.condition,\n\t\t\t\t\thitCondition: fbp.hitCondition,\n\t\t\t\t\tlogMessage: fbp.logMessage,\n\t\t\t\t\tfunctionName: fbp.name\n\t\t\t\t} satisfies IFunctionBreakpointDto;\n\t\t\t} else if ('src' in bp) {\n\t\t\t\tconst dbp: IDataBreakpoint = bp;\n\t\t\t\treturn {\n\t\t\t\t\ttype: 'data',\n\t\t\t\t\tid: dbp.getId(),\n\t\t\t\t\tdataId: dbp.src.type === DataBreakpointSetType.Variable ? dbp.src.dataId : dbp.src.address,\n\t\t\t\t\tenabled: dbp.enabled,\n\t\t\t\t\tcondition: dbp.condition,\n\t\t\t\t\thitCondition: dbp.hitCondition,\n\t\t\t\t\tlogMessage: dbp.logMessage,\n\t\t\t\t\taccessType: dbp.accessType,\n\t\t\t\t\tlabel: dbp.description,\n\t\t\t\t\tcanPersist: dbp.canPersist\n\t\t\t\t} satisfies IDataBreakpointDto;\n\t\t\t} else if ('uri' in bp) {\n\t\t\t\tconst sbp: IBreakpoint = bp;\n\t\t\t\treturn {\n\t\t\t\t\ttype: 'source',\n\t\t\t\t\tid: sbp.getId(),\n\t\t\t\t\tenabled: sbp.enabled,\n\t\t\t\t\tcondition: sbp.condition,\n\t\t\t\t\thitCondition: sbp.hitCondition,\n\t\t\t\t\tlogMessage: sbp.logMessage,\n\t\t\t\t\turi: sbp.uri,\n\t\t\t\t\tline: sbp.lineNumber > 0 ? sbp.lineNumber - 1 : 0,\n\t\t\t\t\tcharacter: (typeof sbp.column === 'number' && sbp.column > 0) ? sbp.column - 1 : 0,\n\t\t\t\t} satisfies ISourceBreakpointDto;\n\t\t\t} else {\n\t\t\t\treturn undefined;\n\t\t\t}\n\t\t}).filter(isDefined);\n\t}\n}\n\n/**\n * DebugAdapter that communicates via extension protocol with another debug adapter.\n */\nclass ExtensionHostDebugAdapter extends AbstractDebugAdapter {\n\n\tconstructor(private readonly _ds: MainThreadDebugService, private _handle: number, private _proxy: ExtHostDebugServiceShape, readonly session: IDebugSession) {\n\t\tsuper();\n\t}\n\n\tfireError(handle: number, err: Error) {\n\t\tthis._onError.fire(err);\n\t}\n\n\tfireExit(handle: number, code: number, signal: string) {\n\t\tthis._onExit.fire(code);\n\t}\n\n\tstartSession(): Promise<void> {\n\t\treturn Promise.resolve(this._proxy.$startDASession(this._handle, this._ds.getSessionDto(this.session)));\n\t}\n\n\tsendMessage(message: DebugProtocol.ProtocolMessage): void {\n\t\tthis._proxy.$sendDAMessage(this._handle, convertToDAPaths(message, true));\n\t}\n\n\tasync stopSession(): Promise<void> {\n\t\tawait this.cancelPendingRequests();\n\t\treturn Promise.resolve(this._proxy.$stopDASession(this._handle));\n\t}\n}\n"],
  "mappings": "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",
  "names": ["id"]
}
