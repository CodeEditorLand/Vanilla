{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/api/browser/mainThreadProfileContentHandlers.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CancellationToken } from '../../../base/common/cancellation.js';\nimport { Disposable, DisposableMap, IDisposable } from '../../../base/common/lifecycle.js';\nimport { revive } from '../../../base/common/marshalling.js';\nimport { URI } from '../../../base/common/uri.js';\nimport { ExtHostContext, ExtHostProfileContentHandlersShape, MainContext, MainThreadProfileContentHandlersShape } from '../common/extHost.protocol.js';\nimport { extHostNamedCustomer, IExtHostContext } from '../../services/extensions/common/extHostCustomers.js';\nimport { ISaveProfileResult, IUserDataProfileImportExportService } from '../../services/userDataProfile/common/userDataProfile.js';\n\n@extHostNamedCustomer(MainContext.MainThreadProfileContentHandlers)\nexport class MainThreadProfileContentHandlers extends Disposable implements MainThreadProfileContentHandlersShape {\n\n\tprivate readonly proxy: ExtHostProfileContentHandlersShape;\n\n\tprivate readonly registeredHandlers = this._register(new DisposableMap<string, IDisposable>());\n\n\tconstructor(\n\t\tcontext: IExtHostContext,\n\t\t@IUserDataProfileImportExportService private readonly userDataProfileImportExportService: IUserDataProfileImportExportService,\n\t) {\n\t\tsuper();\n\t\tthis.proxy = context.getProxy(ExtHostContext.ExtHostProfileContentHandlers);\n\t}\n\n\tasync $registerProfileContentHandler(id: string, name: string, description: string | undefined, extensionId: string): Promise<void> {\n\t\tthis.registeredHandlers.set(id, this.userDataProfileImportExportService.registerProfileContentHandler(id, {\n\t\t\tname,\n\t\t\tdescription,\n\t\t\textensionId,\n\t\t\tsaveProfile: async (name: string, content: string, token: CancellationToken) => {\n\t\t\t\tconst result = await this.proxy.$saveProfile(id, name, content, token);\n\t\t\t\treturn result ? revive<ISaveProfileResult>(result) : null;\n\t\t\t},\n\t\t\treadProfile: async (uri: URI, token: CancellationToken) => {\n\t\t\t\treturn this.proxy.$readProfile(id, uri, token);\n\t\t\t},\n\t\t}));\n\t}\n\n\tasync $unregisterProfileContentHandler(id: string): Promise<void> {\n\t\tthis.registeredHandlers.deleteAndDispose(id);\n\t}\n\n}\n"],
  "mappings": ";;;;;;;;;;;;AAKA,SAAS,yBAAyB;AAClC,SAAS,YAAY,eAAe,mBAAmB;AACvD,SAAS,cAAc;AACvB,SAAS,WAAW;AACpB,SAAS,gBAAgB,oCAAoC,aAAa,6CAA6C;AACvH,SAAS,sBAAsB,uBAAuB;AACtD,SAAS,oBAAoB,2CAA2C;AAGjE,IAAM,mCAAN,cAA+C,WAA4D;AAAA,EAMjH,YACC,SACsD,oCACrD;AACD,UAAM;AAFgD;AAGtD,SAAK,QAAQ,QAAQ,SAAS,eAAe,6BAA6B;AAAA,EAC3E;AAAA,EAViB;AAAA,EAEA,qBAAqB,KAAK,UAAU,IAAI,cAAmC,CAAC;AAAA,EAU7F,MAAM,+BAA+B,IAAY,MAAc,aAAiC,aAAoC;AACnI,SAAK,mBAAmB,IAAI,IAAI,KAAK,mCAAmC,8BAA8B,IAAI;AAAA,MACzG;AAAA,MACA;AAAA,MACA;AAAA,MACA,aAAa,8BAAOA,OAAc,SAAiB,UAA6B;AAC/E,cAAM,SAAS,MAAM,KAAK,MAAM,aAAa,IAAIA,OAAM,SAAS,KAAK;AACrE,eAAO,SAAS,OAA2B,MAAM,IAAI;AAAA,MACtD,GAHa;AAAA,MAIb,aAAa,8BAAO,KAAU,UAA6B;AAC1D,eAAO,KAAK,MAAM,aAAa,IAAI,KAAK,KAAK;AAAA,MAC9C,GAFa;AAAA,IAGd,CAAC,CAAC;AAAA,EACH;AAAA,EAEA,MAAM,iCAAiC,IAA2B;AACjE,SAAK,mBAAmB,iBAAiB,EAAE;AAAA,EAC5C;AAED;AAjCkH;AAArG,mCAAN;AAAA,EADN,qBAAqB,YAAY,gCAAgC;AAAA,EAS/D;AAAA,GARU;",
  "names": ["name"]
}
