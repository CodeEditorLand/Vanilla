{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/api/browser/mainThreadStorage.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { DisposableStore } from \"../../../base/common/lifecycle.js\";\nimport { isWeb } from \"../../../base/common/platform.js\";\nimport {\n\ttype IExtensionIdWithVersion,\n\tIExtensionStorageService,\n} from \"../../../platform/extensionManagement/common/extensionStorage.js\";\nimport { IInstantiationService } from \"../../../platform/instantiation/common/instantiation.js\";\nimport { ILogService } from \"../../../platform/log/common/log.js\";\nimport {\n\tIStorageService,\n\tStorageScope,\n} from \"../../../platform/storage/common/storage.js\";\nimport {\n\ttype IExtHostContext,\n\textHostNamedCustomer,\n} from \"../../services/extensions/common/extHostCustomers.js\";\nimport { migrateExtensionStorage } from \"../../services/extensions/common/extensionStorageMigration.js\";\nimport {\n\tExtHostContext,\n\ttype ExtHostStorageShape,\n\tMainContext,\n\ttype MainThreadStorageShape,\n} from \"../common/extHost.protocol.js\";\n\n@extHostNamedCustomer(MainContext.MainThreadStorage)\nexport class MainThreadStorage implements MainThreadStorageShape {\n\tprivate readonly _proxy: ExtHostStorageShape;\n\tprivate readonly _storageListener = new DisposableStore();\n\tprivate readonly _sharedStorageKeysToWatch: Map<string, boolean> = new Map<\n\t\tstring,\n\t\tboolean\n\t>();\n\n\tconstructor(\n\t\textHostContext: IExtHostContext,\n\t\t@IExtensionStorageService private readonly _extensionStorageService: IExtensionStorageService,\n\t\t@IStorageService private readonly _storageService: IStorageService,\n\t\t@IInstantiationService private readonly _instantiationService: IInstantiationService,\n\t\t@ILogService private readonly _logService: ILogService,\n\t) {\n\t\tthis._proxy = extHostContext.getProxy(ExtHostContext.ExtHostStorage);\n\n\t\tthis._storageListener.add(this._storageService.onDidChangeValue(StorageScope.PROFILE, undefined, this._storageListener)(e => {\n\t\t\tif (this._sharedStorageKeysToWatch.has(e.key)) {\n\t\t\t\tconst rawState = this._extensionStorageService.getExtensionStateRaw(e.key, true);\n\t\t\t\tif (typeof rawState === 'string') {\n\t\t\t\t\tthis._proxy.$acceptValue(true, e.key, rawState);\n\t\t\t\t}\n\t\t\t}\n\t\t}));\n\t}\n\n\tdispose(): void {\n\t\tthis._storageListener.dispose();\n\t}\n\n\tasync $initializeExtensionStorage(\n\t\tshared: boolean,\n\t\textensionId: string,\n\t): Promise<string | undefined> {\n\t\tawait this.checkAndMigrateExtensionStorage(extensionId, shared);\n\n\t\tif (shared) {\n\t\t\tthis._sharedStorageKeysToWatch.set(extensionId, true);\n\t\t}\n\t\treturn this._extensionStorageService.getExtensionStateRaw(\n\t\t\textensionId,\n\t\t\tshared,\n\t\t);\n\t}\n\n\tasync $setValue(\n\t\tshared: boolean,\n\t\tkey: string,\n\t\tvalue: object,\n\t): Promise<void> {\n\t\tthis._extensionStorageService.setExtensionState(key, value, shared);\n\t}\n\n\t$registerExtensionStorageKeysToSync(\n\t\textension: IExtensionIdWithVersion,\n\t\tkeys: string[],\n\t): void {\n\t\tthis._extensionStorageService.setKeysForSync(extension, keys);\n\t}\n\n\tprivate async checkAndMigrateExtensionStorage(\n\t\textensionId: string,\n\t\tshared: boolean,\n\t): Promise<void> {\n\t\ttry {\n\t\t\tlet sourceExtensionId =\n\t\t\t\tthis._extensionStorageService.getSourceExtensionToMigrate(\n\t\t\t\t\textensionId,\n\t\t\t\t);\n\n\t\t\t// TODO: @sandy081 - Remove it after 6 months\n\t\t\t// If current extension does not have any migration requested\n\t\t\t// Then check if the extension has to be migrated for using lower case in web\n\t\t\t// If so, migrate the extension state from lower case id to its normal id.\n\t\t\tif (\n\t\t\t\t!sourceExtensionId &&\n\t\t\t\tisWeb &&\n\t\t\t\textensionId !== extensionId.toLowerCase()\n\t\t\t) {\n\t\t\t\tsourceExtensionId = extensionId.toLowerCase();\n\t\t\t}\n\n\t\t\tif (sourceExtensionId) {\n\t\t\t\t// TODO: @sandy081 - Remove it after 6 months\n\t\t\t\t// In Web, extension state was used to be stored in lower case extension id.\n\t\t\t\t// Hence check that if the lower cased source extension was not yet migrated in web\n\t\t\t\t// If not take the lower cased source extension id for migration\n\t\t\t\tif (\n\t\t\t\t\tisWeb &&\n\t\t\t\t\tsourceExtensionId !== sourceExtensionId.toLowerCase() &&\n\t\t\t\t\tthis._extensionStorageService.getExtensionState(\n\t\t\t\t\t\tsourceExtensionId.toLowerCase(),\n\t\t\t\t\t\tshared,\n\t\t\t\t\t) &&\n\t\t\t\t\t!this._extensionStorageService.getExtensionState(\n\t\t\t\t\t\tsourceExtensionId,\n\t\t\t\t\t\tshared,\n\t\t\t\t\t)\n\t\t\t\t) {\n\t\t\t\t\tsourceExtensionId = sourceExtensionId.toLowerCase();\n\t\t\t\t}\n\t\t\t\tawait migrateExtensionStorage(\n\t\t\t\t\tsourceExtensionId,\n\t\t\t\t\textensionId,\n\t\t\t\t\tshared,\n\t\t\t\t\tthis._instantiationService,\n\t\t\t\t);\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tthis._logService.error(error);\n\t\t}\n\t}\n}\n"],
  "mappings": ";;;;;;;;;;;;AAKA,SAAS,uBAAuB;AAChC,SAAS,aAAa;AACtB;AAAA,EAEC;AAAA,OACM;AACP,SAAS,6BAA6B;AACtC,SAAS,mBAAmB;AAC5B;AAAA,EACC;AAAA,EACA;AAAA,OACM;AACP;AAAA,EAEC;AAAA,OACM;AACP,SAAS,+BAA+B;AACxC;AAAA,EACC;AAAA,EAEA;AAAA,OAEM;AAGA,IAAM,oBAAN,MAA0D;AAAA,EAQhE,YACC,gBAC2C,0BACT,iBACM,uBACV,aAC7B;AAJ0C;AACT;AACM;AACV;AAE9B,SAAK,SAAS,eAAe,SAAS,eAAe,cAAc;AAEnE,SAAK,iBAAiB,IAAI,KAAK,gBAAgB,iBAAiB,aAAa,SAAS,QAAW,KAAK,gBAAgB,EAAE,OAAK;AAC5H,UAAI,KAAK,0BAA0B,IAAI,EAAE,GAAG,GAAG;AAC9C,cAAM,WAAW,KAAK,yBAAyB,qBAAqB,EAAE,KAAK,IAAI;AAC/E,YAAI,OAAO,aAAa,UAAU;AACjC,eAAK,OAAO,aAAa,MAAM,EAAE,KAAK,QAAQ;AAAA,QAC/C;AAAA,MACD;AAAA,IACD,CAAC,CAAC;AAAA,EACH;AAAA,EAxBiB;AAAA,EACA,mBAAmB,IAAI,gBAAgB;AAAA,EACvC,4BAAkD,oBAAI,IAGrE;AAAA,EAqBF,UAAgB;AACf,SAAK,iBAAiB,QAAQ;AAAA,EAC/B;AAAA,EAEA,MAAM,4BACL,QACA,aAC8B;AAC9B,UAAM,KAAK,gCAAgC,aAAa,MAAM;AAE9D,QAAI,QAAQ;AACX,WAAK,0BAA0B,IAAI,aAAa,IAAI;AAAA,IACrD;AACA,WAAO,KAAK,yBAAyB;AAAA,MACpC;AAAA,MACA;AAAA,IACD;AAAA,EACD;AAAA,EAEA,MAAM,UACL,QACA,KACA,OACgB;AAChB,SAAK,yBAAyB,kBAAkB,KAAK,OAAO,MAAM;AAAA,EACnE;AAAA,EAEA,oCACC,WACA,MACO;AACP,SAAK,yBAAyB,eAAe,WAAW,IAAI;AAAA,EAC7D;AAAA,EAEA,MAAc,gCACb,aACA,QACgB;AAChB,QAAI;AACH,UAAI,oBACH,KAAK,yBAAyB;AAAA,QAC7B;AAAA,MACD;AAMD,UACC,CAAC,qBACD,SACA,gBAAgB,YAAY,YAAY,GACvC;AACD,4BAAoB,YAAY,YAAY;AAAA,MAC7C;AAEA,UAAI,mBAAmB;AAKtB,YACC,SACA,sBAAsB,kBAAkB,YAAY,KACpD,KAAK,yBAAyB;AAAA,UAC7B,kBAAkB,YAAY;AAAA,UAC9B;AAAA,QACD,KACA,CAAC,KAAK,yBAAyB;AAAA,UAC9B;AAAA,UACA;AAAA,QACD,GACC;AACD,8BAAoB,kBAAkB,YAAY;AAAA,QACnD;AACA,cAAM;AAAA,UACL;AAAA,UACA;AAAA,UACA;AAAA,UACA,KAAK;AAAA,QACN;AAAA,MACD;AAAA,IACD,SAAS,OAAO;AACf,WAAK,YAAY,MAAM,KAAK;AAAA,IAC7B;AAAA,EACD;AACD;AAjHiE;AAApD,oBAAN;AAAA,EADN,qBAAqB,YAAY,iBAAiB;AAAA,EAWhD;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,GAbU;",
  "names": []
}
