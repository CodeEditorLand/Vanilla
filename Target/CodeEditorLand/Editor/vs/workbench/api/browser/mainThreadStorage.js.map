{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/api/browser/mainThreadStorage.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IStorageService, StorageScope } from '../../../platform/storage/common/storage.js';\nimport { MainThreadStorageShape, MainContext, ExtHostStorageShape, ExtHostContext } from '../common/extHost.protocol.js';\nimport { extHostNamedCustomer, IExtHostContext } from '../../services/extensions/common/extHostCustomers.js';\nimport { DisposableStore } from '../../../base/common/lifecycle.js';\nimport { isWeb } from '../../../base/common/platform.js';\nimport { IExtensionIdWithVersion, IExtensionStorageService } from '../../../platform/extensionManagement/common/extensionStorage.js';\nimport { migrateExtensionStorage } from '../../services/extensions/common/extensionStorageMigration.js';\nimport { IInstantiationService } from '../../../platform/instantiation/common/instantiation.js';\nimport { ILogService } from '../../../platform/log/common/log.js';\n\n@extHostNamedCustomer(MainContext.MainThreadStorage)\nexport class MainThreadStorage implements MainThreadStorageShape {\n\n\tprivate readonly _proxy: ExtHostStorageShape;\n\tprivate readonly _storageListener = new DisposableStore();\n\tprivate readonly _sharedStorageKeysToWatch: Map<string, boolean> = new Map<string, boolean>();\n\n\tconstructor(\n\t\textHostContext: IExtHostContext,\n\t\t@IExtensionStorageService private readonly _extensionStorageService: IExtensionStorageService,\n\t\t@IStorageService private readonly _storageService: IStorageService,\n\t\t@IInstantiationService private readonly _instantiationService: IInstantiationService,\n\t\t@ILogService private readonly _logService: ILogService,\n\t) {\n\t\tthis._proxy = extHostContext.getProxy(ExtHostContext.ExtHostStorage);\n\n\t\tthis._storageListener.add(this._storageService.onDidChangeValue(StorageScope.PROFILE, undefined, this._storageListener)(e => {\n\t\t\tif (this._sharedStorageKeysToWatch.has(e.key)) {\n\t\t\t\tconst rawState = this._extensionStorageService.getExtensionStateRaw(e.key, true);\n\t\t\t\tif (typeof rawState === 'string') {\n\t\t\t\t\tthis._proxy.$acceptValue(true, e.key, rawState);\n\t\t\t\t}\n\t\t\t}\n\t\t}));\n\t}\n\n\tdispose(): void {\n\t\tthis._storageListener.dispose();\n\t}\n\n\tasync $initializeExtensionStorage(shared: boolean, extensionId: string): Promise<string | undefined> {\n\n\t\tawait this.checkAndMigrateExtensionStorage(extensionId, shared);\n\n\t\tif (shared) {\n\t\t\tthis._sharedStorageKeysToWatch.set(extensionId, true);\n\t\t}\n\t\treturn this._extensionStorageService.getExtensionStateRaw(extensionId, shared);\n\t}\n\n\tasync $setValue(shared: boolean, key: string, value: object): Promise<void> {\n\t\tthis._extensionStorageService.setExtensionState(key, value, shared);\n\t}\n\n\t$registerExtensionStorageKeysToSync(extension: IExtensionIdWithVersion, keys: string[]): void {\n\t\tthis._extensionStorageService.setKeysForSync(extension, keys);\n\t}\n\n\tprivate async checkAndMigrateExtensionStorage(extensionId: string, shared: boolean): Promise<void> {\n\t\ttry {\n\t\t\tlet sourceExtensionId = this._extensionStorageService.getSourceExtensionToMigrate(extensionId);\n\n\t\t\t// TODO: @sandy081 - Remove it after 6 months\n\t\t\t// If current extension does not have any migration requested\n\t\t\t// Then check if the extension has to be migrated for using lower case in web\n\t\t\t// If so, migrate the extension state from lower case id to its normal id.\n\t\t\tif (!sourceExtensionId && isWeb && extensionId !== extensionId.toLowerCase()) {\n\t\t\t\tsourceExtensionId = extensionId.toLowerCase();\n\t\t\t}\n\n\t\t\tif (sourceExtensionId) {\n\t\t\t\t// TODO: @sandy081 - Remove it after 6 months\n\t\t\t\t// In Web, extension state was used to be stored in lower case extension id.\n\t\t\t\t// Hence check that if the lower cased source extension was not yet migrated in web\n\t\t\t\t// If not take the lower cased source extension id for migration\n\t\t\t\tif (isWeb && sourceExtensionId !== sourceExtensionId.toLowerCase() && this._extensionStorageService.getExtensionState(sourceExtensionId.toLowerCase(), shared) && !this._extensionStorageService.getExtensionState(sourceExtensionId, shared)) {\n\t\t\t\t\tsourceExtensionId = sourceExtensionId.toLowerCase();\n\t\t\t\t}\n\t\t\t\tawait migrateExtensionStorage(sourceExtensionId, extensionId, shared, this._instantiationService);\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tthis._logService.error(error);\n\t\t}\n\t}\n}\n"],
  "mappings": ";;;;;;;;;;;;AAKA,SAAS,iBAAiB,oBAAoB;AAC9C,SAAS,wBAAwB,aAAa,qBAAqB,sBAAsB;AACzF,SAAS,sBAAsB,uBAAuB;AACtD,SAAS,uBAAuB;AAChC,SAAS,aAAa;AACtB,SAAS,yBAAyB,gCAAgC;AAClE,SAAS,+BAA+B;AACxC,SAAS,6BAA6B;AACtC,SAAS,mBAAmB;AAGrB,IAAM,oBAAN,MAA0D;AAAA,EAMhE,YACC,gBAC2C,0BACT,iBACM,uBACV,aAC7B;AAJ0C;AACT;AACM;AACV;AAE9B,SAAK,SAAS,eAAe,SAAS,eAAe,cAAc;AAEnE,SAAK,iBAAiB,IAAI,KAAK,gBAAgB,iBAAiB,aAAa,SAAS,QAAW,KAAK,gBAAgB,EAAE,OAAK;AAC5H,UAAI,KAAK,0BAA0B,IAAI,EAAE,GAAG,GAAG;AAC9C,cAAM,WAAW,KAAK,yBAAyB,qBAAqB,EAAE,KAAK,IAAI;AAC/E,YAAI,OAAO,aAAa,UAAU;AACjC,eAAK,OAAO,aAAa,MAAM,EAAE,KAAK,QAAQ;AAAA,QAC/C;AAAA,MACD;AAAA,IACD,CAAC,CAAC;AAAA,EACH;AAAA,EArBiB;AAAA,EACA,mBAAmB,IAAI,gBAAgB;AAAA,EACvC,4BAAkD,oBAAI,IAAqB;AAAA,EAqB5F,UAAgB;AACf,SAAK,iBAAiB,QAAQ;AAAA,EAC/B;AAAA,EAEA,MAAM,4BAA4B,QAAiB,aAAkD;AAEpG,UAAM,KAAK,gCAAgC,aAAa,MAAM;AAE9D,QAAI,QAAQ;AACX,WAAK,0BAA0B,IAAI,aAAa,IAAI;AAAA,IACrD;AACA,WAAO,KAAK,yBAAyB,qBAAqB,aAAa,MAAM;AAAA,EAC9E;AAAA,EAEA,MAAM,UAAU,QAAiB,KAAa,OAA8B;AAC3E,SAAK,yBAAyB,kBAAkB,KAAK,OAAO,MAAM;AAAA,EACnE;AAAA,EAEA,oCAAoC,WAAoC,MAAsB;AAC7F,SAAK,yBAAyB,eAAe,WAAW,IAAI;AAAA,EAC7D;AAAA,EAEA,MAAc,gCAAgC,aAAqB,QAAgC;AAClG,QAAI;AACH,UAAI,oBAAoB,KAAK,yBAAyB,4BAA4B,WAAW;AAM7F,UAAI,CAAC,qBAAqB,SAAS,gBAAgB,YAAY,YAAY,GAAG;AAC7E,4BAAoB,YAAY,YAAY;AAAA,MAC7C;AAEA,UAAI,mBAAmB;AAKtB,YAAI,SAAS,sBAAsB,kBAAkB,YAAY,KAAK,KAAK,yBAAyB,kBAAkB,kBAAkB,YAAY,GAAG,MAAM,KAAK,CAAC,KAAK,yBAAyB,kBAAkB,mBAAmB,MAAM,GAAG;AAC9O,8BAAoB,kBAAkB,YAAY;AAAA,QACnD;AACA,cAAM,wBAAwB,mBAAmB,aAAa,QAAQ,KAAK,qBAAqB;AAAA,MACjG;AAAA,IACD,SAAS,OAAO;AACf,WAAK,YAAY,MAAM,KAAK;AAAA,IAC7B;AAAA,EACD;AACD;AAzEiE;AAApD,oBAAN;AAAA,EADN,qBAAqB,YAAY,iBAAiB;AAAA,EAShD;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,GAXU;",
  "names": []
}
