{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/api/browser/mainThreadSpeech.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { raceCancellation } from \"../../../base/common/async.js\";\nimport { Emitter, Event } from \"../../../base/common/event.js\";\nimport {\n\tDisposableStore,\n\ttype IDisposable,\n} from \"../../../base/common/lifecycle.js\";\nimport { ILogService } from \"../../../platform/log/common/log.js\";\nimport {\n\ttype IKeywordRecognitionEvent,\n\ttype ISpeechProviderMetadata,\n\tISpeechService,\n\ttype ISpeechToTextEvent,\n\ttype ITextToSpeechEvent,\n\tTextToSpeechStatus,\n} from \"../../contrib/speech/common/speechService.js\";\nimport {\n\ttype IExtHostContext,\n\textHostNamedCustomer,\n} from \"../../services/extensions/common/extHostCustomers.js\";\nimport {\n\tExtHostContext,\n\ttype ExtHostSpeechShape,\n\tMainContext,\n\ttype MainThreadSpeechShape,\n} from \"../common/extHost.protocol.js\";\n\ntype SpeechToTextSession = {\n\treadonly onDidChange: Emitter<ISpeechToTextEvent>;\n};\n\ntype TextToSpeechSession = {\n\treadonly onDidChange: Emitter<ITextToSpeechEvent>;\n};\n\ntype KeywordRecognitionSession = {\n\treadonly onDidChange: Emitter<IKeywordRecognitionEvent>;\n};\n\n@extHostNamedCustomer(MainContext.MainThreadSpeech)\nexport class MainThreadSpeech implements MainThreadSpeechShape {\n\tprivate readonly proxy: ExtHostSpeechShape;\n\n\tprivate readonly providerRegistrations = new Map<number, IDisposable>();\n\n\tprivate readonly speechToTextSessions = new Map<\n\t\tnumber,\n\t\tSpeechToTextSession\n\t>();\n\tprivate readonly textToSpeechSessions = new Map<\n\t\tnumber,\n\t\tTextToSpeechSession\n\t>();\n\tprivate readonly keywordRecognitionSessions = new Map<\n\t\tnumber,\n\t\tKeywordRecognitionSession\n\t>();\n\n\tconstructor(\n\t\textHostContext: IExtHostContext,\n\t\t@ISpeechService private readonly speechService: ISpeechService,\n\t\t@ILogService private readonly logService: ILogService,\n\t) {\n\t\tthis.proxy = extHostContext.getProxy(ExtHostContext.ExtHostSpeech);\n\t}\n\n\t$registerProvider(\n\t\thandle: number,\n\t\tidentifier: string,\n\t\tmetadata: ISpeechProviderMetadata,\n\t): void {\n\t\tthis.logService.trace(\n\t\t\t\"[Speech] extension registered provider\",\n\t\t\tmetadata.extension.value,\n\t\t);\n\n\t\tconst registration = this.speechService.registerSpeechProvider(\n\t\t\tidentifier,\n\t\t\t{\n\t\t\t\tmetadata,\n\t\t\t\tcreateSpeechToTextSession: (token, options) => {\n\t\t\t\t\tif (token.isCancellationRequested) {\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\tonDidChange: Event.None,\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\n\t\t\t\t\tconst disposables = new DisposableStore();\n\t\t\t\t\tconst session = Math.random();\n\n\t\t\t\t\tthis.proxy.$createSpeechToTextSession(\n\t\t\t\t\t\thandle,\n\t\t\t\t\t\tsession,\n\t\t\t\t\t\toptions?.language,\n\t\t\t\t\t);\n\n\t\t\t\t\tconst onDidChange = disposables.add(\n\t\t\t\t\t\tnew Emitter<ISpeechToTextEvent>(),\n\t\t\t\t\t);\n\t\t\t\t\tthis.speechToTextSessions.set(session, { onDidChange });\n\n\t\t\t\t\tdisposables.add(\n\t\t\t\t\t\ttoken.onCancellationRequested(() => {\n\t\t\t\t\t\t\tthis.proxy.$cancelSpeechToTextSession(session);\n\t\t\t\t\t\t\tthis.speechToTextSessions.delete(session);\n\t\t\t\t\t\t\tdisposables.dispose();\n\t\t\t\t\t\t}),\n\t\t\t\t\t);\n\n\t\t\t\t\treturn {\n\t\t\t\t\t\tonDidChange: onDidChange.event,\n\t\t\t\t\t};\n\t\t\t\t},\n\t\t\t\tcreateTextToSpeechSession: (token, options) => {\n\t\t\t\t\tif (token.isCancellationRequested) {\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\tonDidChange: Event.None,\n\t\t\t\t\t\t\tsynthesize: async () => {},\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\n\t\t\t\t\tconst disposables = new DisposableStore();\n\t\t\t\t\tconst session = Math.random();\n\n\t\t\t\t\tthis.proxy.$createTextToSpeechSession(\n\t\t\t\t\t\thandle,\n\t\t\t\t\t\tsession,\n\t\t\t\t\t\toptions?.language,\n\t\t\t\t\t);\n\n\t\t\t\t\tconst onDidChange = disposables.add(\n\t\t\t\t\t\tnew Emitter<ITextToSpeechEvent>(),\n\t\t\t\t\t);\n\t\t\t\t\tthis.textToSpeechSessions.set(session, { onDidChange });\n\n\t\t\t\t\tdisposables.add(\n\t\t\t\t\t\ttoken.onCancellationRequested(() => {\n\t\t\t\t\t\t\tthis.proxy.$cancelTextToSpeechSession(session);\n\t\t\t\t\t\t\tthis.textToSpeechSessions.delete(session);\n\t\t\t\t\t\t\tdisposables.dispose();\n\t\t\t\t\t\t}),\n\t\t\t\t\t);\n\n\t\t\t\t\treturn {\n\t\t\t\t\t\tonDidChange: onDidChange.event,\n\t\t\t\t\t\tsynthesize: async (text) => {\n\t\t\t\t\t\t\tawait this.proxy.$synthesizeSpeech(session, text);\n\t\t\t\t\t\t\tawait raceCancellation(\n\t\t\t\t\t\t\t\tEvent.toPromise(\n\t\t\t\t\t\t\t\t\tEvent.filter(\n\t\t\t\t\t\t\t\t\t\tonDidChange.event,\n\t\t\t\t\t\t\t\t\t\t(e) =>\n\t\t\t\t\t\t\t\t\t\t\te.status ===\n\t\t\t\t\t\t\t\t\t\t\tTextToSpeechStatus.Stopped,\n\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\ttoken,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t},\n\t\t\t\t\t};\n\t\t\t\t},\n\t\t\t\tcreateKeywordRecognitionSession: (token) => {\n\t\t\t\t\tif (token.isCancellationRequested) {\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\tonDidChange: Event.None,\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\n\t\t\t\t\tconst disposables = new DisposableStore();\n\t\t\t\t\tconst session = Math.random();\n\n\t\t\t\t\tthis.proxy.$createKeywordRecognitionSession(\n\t\t\t\t\t\thandle,\n\t\t\t\t\t\tsession,\n\t\t\t\t\t);\n\n\t\t\t\t\tconst onDidChange = disposables.add(\n\t\t\t\t\t\tnew Emitter<IKeywordRecognitionEvent>(),\n\t\t\t\t\t);\n\t\t\t\t\tthis.keywordRecognitionSessions.set(session, {\n\t\t\t\t\t\tonDidChange,\n\t\t\t\t\t});\n\n\t\t\t\t\tdisposables.add(\n\t\t\t\t\t\ttoken.onCancellationRequested(() => {\n\t\t\t\t\t\t\tthis.proxy.$cancelKeywordRecognitionSession(\n\t\t\t\t\t\t\t\tsession,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tthis.keywordRecognitionSessions.delete(session);\n\t\t\t\t\t\t\tdisposables.dispose();\n\t\t\t\t\t\t}),\n\t\t\t\t\t);\n\n\t\t\t\t\treturn {\n\t\t\t\t\t\tonDidChange: onDidChange.event,\n\t\t\t\t\t};\n\t\t\t\t},\n\t\t\t},\n\t\t);\n\t\tthis.providerRegistrations.set(handle, {\n\t\t\tdispose: () => {\n\t\t\t\tregistration.dispose();\n\t\t\t},\n\t\t});\n\t}\n\n\t$unregisterProvider(handle: number): void {\n\t\tconst registration = this.providerRegistrations.get(handle);\n\t\tif (registration) {\n\t\t\tregistration.dispose();\n\t\t\tthis.providerRegistrations.delete(handle);\n\t\t}\n\t}\n\n\t$emitSpeechToTextEvent(session: number, event: ISpeechToTextEvent): void {\n\t\tconst providerSession = this.speechToTextSessions.get(session);\n\t\tproviderSession?.onDidChange.fire(event);\n\t}\n\n\t$emitTextToSpeechEvent(session: number, event: ITextToSpeechEvent): void {\n\t\tconst providerSession = this.textToSpeechSessions.get(session);\n\t\tproviderSession?.onDidChange.fire(event);\n\t}\n\n\t$emitKeywordRecognitionEvent(\n\t\tsession: number,\n\t\tevent: IKeywordRecognitionEvent,\n\t): void {\n\t\tconst providerSession = this.keywordRecognitionSessions.get(session);\n\t\tproviderSession?.onDidChange.fire(event);\n\t}\n\n\tdispose(): void {\n\t\tthis.providerRegistrations.forEach((disposable) =>\n\t\t\tdisposable.dispose(),\n\t\t);\n\t\tthis.providerRegistrations.clear();\n\n\t\tthis.speechToTextSessions.forEach((session) =>\n\t\t\tsession.onDidChange.dispose(),\n\t\t);\n\t\tthis.speechToTextSessions.clear();\n\n\t\tthis.textToSpeechSessions.forEach((session) =>\n\t\t\tsession.onDidChange.dispose(),\n\t\t);\n\t\tthis.textToSpeechSessions.clear();\n\n\t\tthis.keywordRecognitionSessions.forEach((session) =>\n\t\t\tsession.onDidChange.dispose(),\n\t\t);\n\t\tthis.keywordRecognitionSessions.clear();\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
