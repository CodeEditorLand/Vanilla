{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/api/browser/mainThreadSpeech.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { raceCancellation } from '../../../base/common/async.js';\nimport { Emitter, Event } from '../../../base/common/event.js';\nimport { DisposableStore, IDisposable } from '../../../base/common/lifecycle.js';\nimport { ILogService } from '../../../platform/log/common/log.js';\nimport { ExtHostContext, ExtHostSpeechShape, MainContext, MainThreadSpeechShape } from '../common/extHost.protocol.js';\nimport { IKeywordRecognitionEvent, ISpeechProviderMetadata, ISpeechService, ISpeechToTextEvent, ITextToSpeechEvent, TextToSpeechStatus } from '../../contrib/speech/common/speechService.js';\nimport { IExtHostContext, extHostNamedCustomer } from '../../services/extensions/common/extHostCustomers.js';\n\ntype SpeechToTextSession = {\n\treadonly onDidChange: Emitter<ISpeechToTextEvent>;\n};\n\ntype TextToSpeechSession = {\n\treadonly onDidChange: Emitter<ITextToSpeechEvent>;\n};\n\ntype KeywordRecognitionSession = {\n\treadonly onDidChange: Emitter<IKeywordRecognitionEvent>;\n};\n\n@extHostNamedCustomer(MainContext.MainThreadSpeech)\nexport class MainThreadSpeech implements MainThreadSpeechShape {\n\n\tprivate readonly proxy: ExtHostSpeechShape;\n\n\tprivate readonly providerRegistrations = new Map<number, IDisposable>();\n\n\tprivate readonly speechToTextSessions = new Map<number, SpeechToTextSession>();\n\tprivate readonly textToSpeechSessions = new Map<number, TextToSpeechSession>();\n\tprivate readonly keywordRecognitionSessions = new Map<number, KeywordRecognitionSession>();\n\n\tconstructor(\n\t\textHostContext: IExtHostContext,\n\t\t@ISpeechService private readonly speechService: ISpeechService,\n\t\t@ILogService private readonly logService: ILogService\n\t) {\n\t\tthis.proxy = extHostContext.getProxy(ExtHostContext.ExtHostSpeech);\n\t}\n\n\t$registerProvider(handle: number, identifier: string, metadata: ISpeechProviderMetadata): void {\n\t\tthis.logService.trace('[Speech] extension registered provider', metadata.extension.value);\n\n\t\tconst registration = this.speechService.registerSpeechProvider(identifier, {\n\t\t\tmetadata,\n\t\t\tcreateSpeechToTextSession: (token, options) => {\n\t\t\t\tif (token.isCancellationRequested) {\n\t\t\t\t\treturn {\n\t\t\t\t\t\tonDidChange: Event.None\n\t\t\t\t\t};\n\t\t\t\t}\n\n\t\t\t\tconst disposables = new DisposableStore();\n\t\t\t\tconst session = Math.random();\n\n\t\t\t\tthis.proxy.$createSpeechToTextSession(handle, session, options?.language);\n\n\t\t\t\tconst onDidChange = disposables.add(new Emitter<ISpeechToTextEvent>());\n\t\t\t\tthis.speechToTextSessions.set(session, { onDidChange });\n\n\t\t\t\tdisposables.add(token.onCancellationRequested(() => {\n\t\t\t\t\tthis.proxy.$cancelSpeechToTextSession(session);\n\t\t\t\t\tthis.speechToTextSessions.delete(session);\n\t\t\t\t\tdisposables.dispose();\n\t\t\t\t}));\n\n\t\t\t\treturn {\n\t\t\t\t\tonDidChange: onDidChange.event\n\t\t\t\t};\n\t\t\t},\n\t\t\tcreateTextToSpeechSession: (token, options) => {\n\t\t\t\tif (token.isCancellationRequested) {\n\t\t\t\t\treturn {\n\t\t\t\t\t\tonDidChange: Event.None,\n\t\t\t\t\t\tsynthesize: async () => { }\n\t\t\t\t\t};\n\t\t\t\t}\n\n\t\t\t\tconst disposables = new DisposableStore();\n\t\t\t\tconst session = Math.random();\n\n\t\t\t\tthis.proxy.$createTextToSpeechSession(handle, session, options?.language);\n\n\t\t\t\tconst onDidChange = disposables.add(new Emitter<ITextToSpeechEvent>());\n\t\t\t\tthis.textToSpeechSessions.set(session, { onDidChange });\n\n\t\t\t\tdisposables.add(token.onCancellationRequested(() => {\n\t\t\t\t\tthis.proxy.$cancelTextToSpeechSession(session);\n\t\t\t\t\tthis.textToSpeechSessions.delete(session);\n\t\t\t\t\tdisposables.dispose();\n\t\t\t\t}));\n\n\t\t\t\treturn {\n\t\t\t\t\tonDidChange: onDidChange.event,\n\t\t\t\t\tsynthesize: async text => {\n\t\t\t\t\t\tawait this.proxy.$synthesizeSpeech(session, text);\n\t\t\t\t\t\tawait raceCancellation(Event.toPromise(Event.filter(onDidChange.event, e => e.status === TextToSpeechStatus.Stopped)), token);\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t},\n\t\t\tcreateKeywordRecognitionSession: token => {\n\t\t\t\tif (token.isCancellationRequested) {\n\t\t\t\t\treturn {\n\t\t\t\t\t\tonDidChange: Event.None\n\t\t\t\t\t};\n\t\t\t\t}\n\n\t\t\t\tconst disposables = new DisposableStore();\n\t\t\t\tconst session = Math.random();\n\n\t\t\t\tthis.proxy.$createKeywordRecognitionSession(handle, session);\n\n\t\t\t\tconst onDidChange = disposables.add(new Emitter<IKeywordRecognitionEvent>());\n\t\t\t\tthis.keywordRecognitionSessions.set(session, { onDidChange });\n\n\t\t\t\tdisposables.add(token.onCancellationRequested(() => {\n\t\t\t\t\tthis.proxy.$cancelKeywordRecognitionSession(session);\n\t\t\t\t\tthis.keywordRecognitionSessions.delete(session);\n\t\t\t\t\tdisposables.dispose();\n\t\t\t\t}));\n\n\t\t\t\treturn {\n\t\t\t\t\tonDidChange: onDidChange.event\n\t\t\t\t};\n\t\t\t}\n\t\t});\n\t\tthis.providerRegistrations.set(handle, {\n\t\t\tdispose: () => {\n\t\t\t\tregistration.dispose();\n\t\t\t}\n\t\t});\n\t}\n\n\t$unregisterProvider(handle: number): void {\n\t\tconst registration = this.providerRegistrations.get(handle);\n\t\tif (registration) {\n\t\t\tregistration.dispose();\n\t\t\tthis.providerRegistrations.delete(handle);\n\t\t}\n\t}\n\n\t$emitSpeechToTextEvent(session: number, event: ISpeechToTextEvent): void {\n\t\tconst providerSession = this.speechToTextSessions.get(session);\n\t\tproviderSession?.onDidChange.fire(event);\n\t}\n\n\t$emitTextToSpeechEvent(session: number, event: ITextToSpeechEvent): void {\n\t\tconst providerSession = this.textToSpeechSessions.get(session);\n\t\tproviderSession?.onDidChange.fire(event);\n\t}\n\n\t$emitKeywordRecognitionEvent(session: number, event: IKeywordRecognitionEvent): void {\n\t\tconst providerSession = this.keywordRecognitionSessions.get(session);\n\t\tproviderSession?.onDidChange.fire(event);\n\t}\n\n\tdispose(): void {\n\t\tthis.providerRegistrations.forEach(disposable => disposable.dispose());\n\t\tthis.providerRegistrations.clear();\n\n\t\tthis.speechToTextSessions.forEach(session => session.onDidChange.dispose());\n\t\tthis.speechToTextSessions.clear();\n\n\t\tthis.textToSpeechSessions.forEach(session => session.onDidChange.dispose());\n\t\tthis.textToSpeechSessions.clear();\n\n\t\tthis.keywordRecognitionSessions.forEach(session => session.onDidChange.dispose());\n\t\tthis.keywordRecognitionSessions.clear();\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
