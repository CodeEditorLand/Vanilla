{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/api/browser/mainThreadWebviews.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { VSBuffer } from '../../../base/common/buffer.js';\nimport { Disposable, DisposableStore } from '../../../base/common/lifecycle.js';\nimport { Schemas } from '../../../base/common/network.js';\nimport { isWeb } from '../../../base/common/platform.js';\nimport { escape } from '../../../base/common/strings.js';\nimport { URI } from '../../../base/common/uri.js';\nimport { localize } from '../../../nls.js';\nimport { ExtensionIdentifier } from '../../../platform/extensions/common/extensions.js';\nimport { IOpenerService } from '../../../platform/opener/common/opener.js';\nimport { IProductService } from '../../../platform/product/common/productService.js';\nimport * as extHostProtocol from '../common/extHost.protocol.js';\nimport { deserializeWebviewMessage, serializeWebviewMessage } from '../common/extHostWebviewMessaging.js';\nimport { IOverlayWebview, IWebview, WebviewContentOptions, WebviewExtensionDescription } from '../../contrib/webview/browser/webview.js';\nimport { IExtHostContext } from '../../services/extensions/common/extHostCustomers.js';\nimport { SerializableObjectWithBuffers } from '../../services/extensions/common/proxyIdentifier.js';\n\nexport class MainThreadWebviews extends Disposable implements extHostProtocol.MainThreadWebviewsShape {\n\n\tprivate static readonly standardSupportedLinkSchemes = new Set([\n\t\tSchemas.http,\n\t\tSchemas.https,\n\t\tSchemas.mailto,\n\t\tSchemas.vscode,\n\t\t'vscode-insider',\n\t]);\n\n\tprivate readonly _proxy: extHostProtocol.ExtHostWebviewsShape;\n\n\tprivate readonly _webviews = new Map<string, IWebview>();\n\n\tconstructor(\n\t\tcontext: IExtHostContext,\n\t\t@IOpenerService private readonly _openerService: IOpenerService,\n\t\t@IProductService private readonly _productService: IProductService,\n\t) {\n\t\tsuper();\n\n\t\tthis._proxy = context.getProxy(extHostProtocol.ExtHostContext.ExtHostWebviews);\n\t}\n\n\tpublic addWebview(handle: extHostProtocol.WebviewHandle, webview: IOverlayWebview, options: { serializeBuffersForPostMessage: boolean }): void {\n\t\tif (this._webviews.has(handle)) {\n\t\t\tthrow new Error('Webview already registered');\n\t\t}\n\n\t\tthis._webviews.set(handle, webview);\n\t\tthis.hookupWebviewEventDelegate(handle, webview, options);\n\t}\n\n\tpublic $setHtml(handle: extHostProtocol.WebviewHandle, value: string): void {\n\t\tthis.tryGetWebview(handle)?.setHtml(value);\n\t}\n\n\tpublic $setOptions(handle: extHostProtocol.WebviewHandle, options: extHostProtocol.IWebviewContentOptions): void {\n\t\tconst webview = this.tryGetWebview(handle);\n\t\tif (webview) {\n\t\t\twebview.contentOptions = reviveWebviewContentOptions(options);\n\t\t}\n\t}\n\n\tpublic async $postMessage(handle: extHostProtocol.WebviewHandle, jsonMessage: string, ...buffers: VSBuffer[]): Promise<boolean> {\n\t\tconst webview = this.tryGetWebview(handle);\n\t\tif (!webview) {\n\t\t\treturn false;\n\t\t}\n\t\tconst { message, arrayBuffers } = deserializeWebviewMessage(jsonMessage, buffers);\n\t\treturn webview.postMessage(message, arrayBuffers);\n\t}\n\n\tprivate hookupWebviewEventDelegate(handle: extHostProtocol.WebviewHandle, webview: IOverlayWebview, options: { serializeBuffersForPostMessage: boolean }) {\n\t\tconst disposables = new DisposableStore();\n\n\t\tdisposables.add(webview.onDidClickLink((uri) => this.onDidClickLink(handle, uri)));\n\n\t\tdisposables.add(webview.onMessage((message) => {\n\t\t\tconst serialized = serializeWebviewMessage(message.message, options);\n\t\t\tthis._proxy.$onMessage(handle, serialized.message, new SerializableObjectWithBuffers(serialized.buffers));\n\t\t}));\n\n\t\tdisposables.add(webview.onMissingCsp((extension: ExtensionIdentifier) => this._proxy.$onMissingCsp(handle, extension.value)));\n\n\t\tdisposables.add(webview.onDidDispose(() => {\n\t\t\tdisposables.dispose();\n\t\t\tthis._webviews.delete(handle);\n\t\t}));\n\t}\n\n\tprivate onDidClickLink(handle: extHostProtocol.WebviewHandle, link: string): void {\n\t\tconst webview = this.getWebview(handle);\n\t\tif (this.isSupportedLink(webview, URI.parse(link))) {\n\t\t\tthis._openerService.open(link, { fromUserGesture: true, allowContributedOpeners: true, allowCommands: Array.isArray(webview.contentOptions.enableCommandUris) || webview.contentOptions.enableCommandUris === true, fromWorkspace: true });\n\t\t}\n\t}\n\n\tprivate isSupportedLink(webview: IWebview, link: URI): boolean {\n\t\tif (MainThreadWebviews.standardSupportedLinkSchemes.has(link.scheme)) {\n\t\t\treturn true;\n\t\t}\n\n\t\tif (!isWeb && this._productService.urlProtocol === link.scheme) {\n\t\t\treturn true;\n\t\t}\n\n\t\tif (link.scheme === Schemas.command) {\n\t\t\tif (Array.isArray(webview.contentOptions.enableCommandUris)) {\n\t\t\t\treturn webview.contentOptions.enableCommandUris.includes(link.path);\n\t\t\t}\n\n\t\t\treturn webview.contentOptions.enableCommandUris === true;\n\t\t}\n\n\t\treturn false;\n\t}\n\n\tprivate tryGetWebview(handle: extHostProtocol.WebviewHandle): IWebview | undefined {\n\t\treturn this._webviews.get(handle);\n\t}\n\n\tprivate getWebview(handle: extHostProtocol.WebviewHandle): IWebview {\n\t\tconst webview = this.tryGetWebview(handle);\n\t\tif (!webview) {\n\t\t\tthrow new Error(`Unknown webview handle:${handle}`);\n\t\t}\n\t\treturn webview;\n\t}\n\n\tpublic getWebviewResolvedFailedContent(viewType: string) {\n\t\treturn `<!DOCTYPE html>\n\t\t<html>\n\t\t\t<head>\n\t\t\t\t<meta http-equiv=\"Content-type\" content=\"text/html;charset=UTF-8\">\n\t\t\t\t<meta http-equiv=\"Content-Security-Policy\" content=\"default-src 'none';\">\n\t\t\t</head>\n\t\t\t<body>${localize('errorMessage', \"An error occurred while loading view: {0}\", escape(viewType))}</body>\n\t\t</html>`;\n\t}\n}\n\nexport function reviveWebviewExtension(extensionData: extHostProtocol.WebviewExtensionDescription): WebviewExtensionDescription {\n\treturn {\n\t\tid: extensionData.id,\n\t\tlocation: URI.revive(extensionData.location),\n\t};\n}\n\nexport function reviveWebviewContentOptions(webviewOptions: extHostProtocol.IWebviewContentOptions): WebviewContentOptions {\n\treturn {\n\t\tallowScripts: webviewOptions.enableScripts,\n\t\tallowForms: webviewOptions.enableForms,\n\t\tenableCommandUris: webviewOptions.enableCommandUris,\n\t\tlocalResourceRoots: Array.isArray(webviewOptions.localResourceRoots) ? webviewOptions.localResourceRoots.map(r => URI.revive(r)) : undefined,\n\t\tportMapping: webviewOptions.portMapping,\n\t};\n}\n"],
  "mappings": "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",
  "names": []
}
