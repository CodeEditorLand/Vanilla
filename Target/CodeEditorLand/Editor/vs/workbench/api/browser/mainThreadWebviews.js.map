{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/api/browser/mainThreadWebviews.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport type { VSBuffer } from \"../../../base/common/buffer.js\";\nimport { Disposable, DisposableStore } from \"../../../base/common/lifecycle.js\";\nimport { Schemas } from \"../../../base/common/network.js\";\nimport { isWeb } from \"../../../base/common/platform.js\";\nimport { escape } from \"../../../base/common/strings.js\";\nimport { URI } from \"../../../base/common/uri.js\";\nimport { localize } from \"../../../nls.js\";\nimport type { ExtensionIdentifier } from \"../../../platform/extensions/common/extensions.js\";\nimport { IOpenerService } from \"../../../platform/opener/common/opener.js\";\nimport { IProductService } from \"../../../platform/product/common/productService.js\";\nimport type {\n\tIOverlayWebview,\n\tIWebview,\n\tWebviewContentOptions,\n\tWebviewExtensionDescription,\n} from \"../../contrib/webview/browser/webview.js\";\nimport type { IExtHostContext } from \"../../services/extensions/common/extHostCustomers.js\";\nimport { SerializableObjectWithBuffers } from \"../../services/extensions/common/proxyIdentifier.js\";\nimport * as extHostProtocol from \"../common/extHost.protocol.js\";\nimport {\n\tdeserializeWebviewMessage,\n\tserializeWebviewMessage,\n} from \"../common/extHostWebviewMessaging.js\";\n\nexport class MainThreadWebviews\n\textends Disposable\n\timplements extHostProtocol.MainThreadWebviewsShape\n{\n\tprivate static readonly standardSupportedLinkSchemes = new Set([\n\t\tSchemas.http,\n\t\tSchemas.https,\n\t\tSchemas.mailto,\n\t\tSchemas.vscode,\n\t\t\"vscode-insider\",\n\t]);\n\n\tprivate readonly _proxy: extHostProtocol.ExtHostWebviewsShape;\n\n\tprivate readonly _webviews = new Map<string, IWebview>();\n\n\tconstructor(\n\t\tcontext: IExtHostContext,\n\t\t@IOpenerService private readonly _openerService: IOpenerService,\n\t\t@IProductService private readonly _productService: IProductService,\n\t) {\n\t\tsuper();\n\n\t\tthis._proxy = context.getProxy(\n\t\t\textHostProtocol.ExtHostContext.ExtHostWebviews,\n\t\t);\n\t}\n\n\tpublic addWebview(\n\t\thandle: extHostProtocol.WebviewHandle,\n\t\twebview: IOverlayWebview,\n\t\toptions: { serializeBuffersForPostMessage: boolean },\n\t): void {\n\t\tif (this._webviews.has(handle)) {\n\t\t\tthrow new Error(\"Webview already registered\");\n\t\t}\n\n\t\tthis._webviews.set(handle, webview);\n\t\tthis.hookupWebviewEventDelegate(handle, webview, options);\n\t}\n\n\tpublic $setHtml(\n\t\thandle: extHostProtocol.WebviewHandle,\n\t\tvalue: string,\n\t): void {\n\t\tthis.tryGetWebview(handle)?.setHtml(value);\n\t}\n\n\tpublic $setOptions(\n\t\thandle: extHostProtocol.WebviewHandle,\n\t\toptions: extHostProtocol.IWebviewContentOptions,\n\t): void {\n\t\tconst webview = this.tryGetWebview(handle);\n\t\tif (webview) {\n\t\t\twebview.contentOptions = reviveWebviewContentOptions(options);\n\t\t}\n\t}\n\n\tpublic async $postMessage(\n\t\thandle: extHostProtocol.WebviewHandle,\n\t\tjsonMessage: string,\n\t\t...buffers: VSBuffer[]\n\t): Promise<boolean> {\n\t\tconst webview = this.tryGetWebview(handle);\n\t\tif (!webview) {\n\t\t\treturn false;\n\t\t}\n\t\tconst { message, arrayBuffers } = deserializeWebviewMessage(\n\t\t\tjsonMessage,\n\t\t\tbuffers,\n\t\t);\n\t\treturn webview.postMessage(message, arrayBuffers);\n\t}\n\n\tprivate hookupWebviewEventDelegate(\n\t\thandle: extHostProtocol.WebviewHandle,\n\t\twebview: IOverlayWebview,\n\t\toptions: { serializeBuffersForPostMessage: boolean },\n\t) {\n\t\tconst disposables = new DisposableStore();\n\n\t\tdisposables.add(\n\t\t\twebview.onDidClickLink((uri) => this.onDidClickLink(handle, uri)),\n\t\t);\n\n\t\tdisposables.add(\n\t\t\twebview.onMessage((message) => {\n\t\t\t\tconst serialized = serializeWebviewMessage(\n\t\t\t\t\tmessage.message,\n\t\t\t\t\toptions,\n\t\t\t\t);\n\t\t\t\tthis._proxy.$onMessage(\n\t\t\t\t\thandle,\n\t\t\t\t\tserialized.message,\n\t\t\t\t\tnew SerializableObjectWithBuffers(serialized.buffers),\n\t\t\t\t);\n\t\t\t}),\n\t\t);\n\n\t\tdisposables.add(\n\t\t\twebview.onMissingCsp((extension: ExtensionIdentifier) =>\n\t\t\t\tthis._proxy.$onMissingCsp(handle, extension.value),\n\t\t\t),\n\t\t);\n\n\t\tdisposables.add(\n\t\t\twebview.onDidDispose(() => {\n\t\t\t\tdisposables.dispose();\n\t\t\t\tthis._webviews.delete(handle);\n\t\t\t}),\n\t\t);\n\t}\n\n\tprivate onDidClickLink(\n\t\thandle: extHostProtocol.WebviewHandle,\n\t\tlink: string,\n\t): void {\n\t\tconst webview = this.getWebview(handle);\n\t\tif (this.isSupportedLink(webview, URI.parse(link))) {\n\t\t\tthis._openerService.open(link, {\n\t\t\t\tfromUserGesture: true,\n\t\t\t\tallowContributedOpeners: true,\n\t\t\t\tallowCommands:\n\t\t\t\t\tArray.isArray(webview.contentOptions.enableCommandUris) ||\n\t\t\t\t\twebview.contentOptions.enableCommandUris === true,\n\t\t\t\tfromWorkspace: true,\n\t\t\t});\n\t\t}\n\t}\n\n\tprivate isSupportedLink(webview: IWebview, link: URI): boolean {\n\t\tif (MainThreadWebviews.standardSupportedLinkSchemes.has(link.scheme)) {\n\t\t\treturn true;\n\t\t}\n\n\t\tif (!isWeb && this._productService.urlProtocol === link.scheme) {\n\t\t\treturn true;\n\t\t}\n\n\t\tif (link.scheme === Schemas.command) {\n\t\t\tif (Array.isArray(webview.contentOptions.enableCommandUris)) {\n\t\t\t\treturn webview.contentOptions.enableCommandUris.includes(\n\t\t\t\t\tlink.path,\n\t\t\t\t);\n\t\t\t}\n\n\t\t\treturn webview.contentOptions.enableCommandUris === true;\n\t\t}\n\n\t\treturn false;\n\t}\n\n\tprivate tryGetWebview(\n\t\thandle: extHostProtocol.WebviewHandle,\n\t): IWebview | undefined {\n\t\treturn this._webviews.get(handle);\n\t}\n\n\tprivate getWebview(handle: extHostProtocol.WebviewHandle): IWebview {\n\t\tconst webview = this.tryGetWebview(handle);\n\t\tif (!webview) {\n\t\t\tthrow new Error(`Unknown webview handle:${handle}`);\n\t\t}\n\t\treturn webview;\n\t}\n\n\tpublic getWebviewResolvedFailedContent(viewType: string) {\n\t\treturn `<!DOCTYPE html>\n\t\t<html>\n\t\t\t<head>\n\t\t\t\t<meta http-equiv=\"Content-type\" content=\"text/html;charset=UTF-8\">\n\t\t\t\t<meta http-equiv=\"Content-Security-Policy\" content=\"default-src 'none';\">\n\t\t\t</head>\n\t\t\t<body>${localize(\"errorMessage\", \"An error occurred while loading view: {0}\", escape(viewType))}</body>\n\t\t</html>`;\n\t}\n}\n\nexport function reviveWebviewExtension(\n\textensionData: extHostProtocol.WebviewExtensionDescription,\n): WebviewExtensionDescription {\n\treturn {\n\t\tid: extensionData.id,\n\t\tlocation: URI.revive(extensionData.location),\n\t};\n}\n\nexport function reviveWebviewContentOptions(\n\twebviewOptions: extHostProtocol.IWebviewContentOptions,\n): WebviewContentOptions {\n\treturn {\n\t\tallowScripts: webviewOptions.enableScripts,\n\t\tallowForms: webviewOptions.enableForms,\n\t\tenableCommandUris: webviewOptions.enableCommandUris,\n\t\tlocalResourceRoots: Array.isArray(webviewOptions.localResourceRoots)\n\t\t\t? webviewOptions.localResourceRoots.map((r) => URI.revive(r))\n\t\t\t: undefined,\n\t\tportMapping: webviewOptions.portMapping,\n\t};\n}\n"],
  "mappings": "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",
  "names": []
}
