var d=Object.defineProperty;var p=Object.getOwnPropertyDescriptor;var m=(s,e,r,t)=>{for(var i=t>1?void 0:t?p(e,r):e,o=s.length-1,a;o>=0;o--)(a=s[o])&&(i=(t?a(e,r,i):a(i))||i);return t&&i&&d(e,r,i),i},c=(s,e)=>(r,t)=>e(r,t,s);import{IMarkerService as f}from"../../../platform/markers/common/markers.js";import{URI as h}from"../../../base/common/uri.js";import{MainContext as l,ExtHostContext as k}from"../common/extHost.protocol.js";import{extHostNamedCustomer as _}from"../../services/extensions/common/extHostCustomers.js";import{IUriIdentityService as g}from"../../../platform/uriIdentity/common/uriIdentity.js";let n=class{constructor(e,r,t){this._markerService=r;this._uriIdentService=t;this._proxy=e.getProxy(k.ExtHostDiagnostics),this._markerListener=this._markerService.onMarkerChanged(this._forwardMarkers,this)}_activeOwners=new Set;_proxy;_markerListener;dispose(){this._markerListener.dispose(),this._activeOwners.forEach(e=>this._markerService.changeAll(e,[])),this._activeOwners.clear()}_forwardMarkers(e){const r=[];for(const t of e){const i=this._markerService.read({resource:t});if(i.length===0)r.push([t,[]]);else{const o=i.filter(a=>!this._activeOwners.has(a.owner));o.length>0&&r.push([t,o])}}r.length>0&&this._proxy.$acceptMarkersChange(r)}$changeMany(e,r){for(const t of r){const[i,o]=t;if(o)for(const a of o){if(a.relatedInformation)for(const v of a.relatedInformation)v.resource=h.revive(v.resource);a.code&&typeof a.code!="string"&&(a.code.target=h.revive(a.code.target))}this._markerService.changeOne(e,this._uriIdentService.asCanonicalUri(h.revive(i)),o)}this._activeOwners.add(e)}$clear(e){this._markerService.changeAll(e,[]),this._activeOwners.delete(e)}};n=m([_(l.MainThreadDiagnostics),c(1,f),c(2,g)],n);export{n as MainThreadDiagnostics};
