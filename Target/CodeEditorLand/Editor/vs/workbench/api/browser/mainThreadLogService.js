var p=Object.defineProperty;var a=Object.getOwnPropertyDescriptor;var l=(i,e,o,t)=>{for(var r=t>1?void 0:t?a(e,o):e,g=i.length-1,v;g>=0;g--)(v=i[g])&&(r=(t?v(e,o,r):v(r))||r);return t&&r&&p(e,o,r),r},L=(i,e)=>(o,t)=>e(o,t,i);import{DisposableStore as d}from"../../../../vs/base/common/lifecycle.js";import{URI as s}from"../../../../vs/base/common/uri.js";import{CommandsRegistry as c}from"../../../../vs/platform/commands/common/commands.js";import{IEnvironmentService as f}from"../../../../vs/platform/environment/common/environment.js";import"../../../../vs/platform/instantiation/common/instantiation.js";import{ILoggerService as m,ILogService as h,isLogLevel as S,log as C,LogLevelToString as x,parseLogLevel as u}from"../../../../vs/platform/log/common/log.js";import{ExtHostContext as I,MainContext as y}from"../../../../vs/workbench/api/common/extHost.protocol.js";import{extHostNamedCustomer as U}from"../../../../vs/workbench/services/extensions/common/extHostCustomers.js";let n=class{constructor(e,o){this.loggerService=o;const t=e.getProxy(I.ExtHostLogLevelServiceShape);this.disposables.add(o.onDidChangeLogLevel(r=>{S(r)?t.$setLogLevel(r):t.$setLogLevel(r[1],r[0])}))}disposables=new d;$log(e,o){const t=this.loggerService.getLogger(s.revive(e));if(!t)throw new Error("Create the logger before logging");for(const[r,g]of o)C(t,r,g)}async $createLogger(e,o){this.loggerService.createLogger(s.revive(e),o)}async $registerLogger(e){this.loggerService.registerLogger({...e,resource:s.revive(e.resource)})}async $deregisterLogger(e){this.loggerService.deregisterLogger(s.revive(e))}async $setVisibility(e,o){this.loggerService.setVisibility(s.revive(e),o)}$flush(e){const o=this.loggerService.getLogger(s.revive(e));if(!o)throw new Error("Create the logger before flushing");o.flush()}dispose(){this.disposables.dispose()}};n=l([U(y.MainThreadLogger),L(1,m)],n),c.registerCommand("_extensionTests.setLogLevel",function(i,e){const o=i.get(m),t=i.get(f);if(t.isExtensionDevelopment&&t.extensionTestsLocationURI){const r=u(e);r!==void 0&&o.setLogLevel(r)}}),c.registerCommand("_extensionTests.getLogLevel",function(i){const e=i.get(h);return x(e.getLevel())});export{n as MainThreadLoggerService};
