{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/api/browser/mainThreadTerminalShellIntegration.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Event } from \"../../../base/common/event.js\";\nimport {\n\tDisposable,\n\ttype IDisposable,\n\ttoDisposable,\n} from \"../../../base/common/lifecycle.js\";\nimport { URI } from \"../../../base/common/uri.js\";\nimport {\n\ttype ITerminalCommand,\n\tTerminalCapability,\n} from \"../../../platform/terminal/common/capabilities/capabilities.js\";\nimport { ITerminalService } from \"../../contrib/terminal/browser/terminal.js\";\nimport { IWorkbenchEnvironmentService } from \"../../services/environment/common/environmentService.js\";\nimport {\n\ttype IExtHostContext,\n\textHostNamedCustomer,\n} from \"../../services/extensions/common/extHostCustomers.js\";\nimport {\n\tExtHostContext,\n\ttype ExtHostTerminalShellIntegrationShape,\n\tMainContext,\n\ttype MainThreadTerminalShellIntegrationShape,\n} from \"../common/extHost.protocol.js\";\nimport { TerminalShellExecutionCommandLineConfidence } from \"../common/extHostTypes.js\";\n\n@extHostNamedCustomer(MainContext.MainThreadTerminalShellIntegration)\nexport class MainThreadTerminalShellIntegration\n\textends Disposable\n\timplements MainThreadTerminalShellIntegrationShape\n{\n\tprivate readonly _proxy: ExtHostTerminalShellIntegrationShape;\n\n\tconstructor(\n\t\textHostContext: IExtHostContext,\n\t\t@ITerminalService private readonly _terminalService: ITerminalService,\n\t\t@IWorkbenchEnvironmentService\n\t\tworkbenchEnvironmentService: IWorkbenchEnvironmentService,\n\t) {\n\t\tsuper();\n\n\t\tthis._proxy = extHostContext.getProxy(\n\t\t\tExtHostContext.ExtHostTerminalShellIntegration,\n\t\t);\n\n\t\tconst instanceDataListeners: Map<number, IDisposable> = new Map();\n\t\tthis._register(\n\t\t\ttoDisposable(() => {\n\t\t\t\tfor (const listener of instanceDataListeners.values()) {\n\t\t\t\t\tlistener.dispose();\n\t\t\t\t}\n\t\t\t}),\n\t\t);\n\n\t\t// onDidChangeTerminalShellIntegration\n\t\tconst onDidAddCommandDetection = this._store.add(\n\t\t\tthis._terminalService.createOnInstanceEvent((instance) => {\n\t\t\t\treturn Event.map(\n\t\t\t\t\tEvent.filter(\n\t\t\t\t\t\tinstance.capabilities.onDidAddCapabilityType,\n\t\t\t\t\t\t(e) => {\n\t\t\t\t\t\t\treturn e === TerminalCapability.CommandDetection;\n\t\t\t\t\t\t},\n\t\t\t\t\t),\n\t\t\t\t\t() => instance,\n\t\t\t\t);\n\t\t\t}),\n\t\t).event;\n\t\tthis._store.add(\n\t\t\tonDidAddCommandDetection((e) =>\n\t\t\t\tthis._proxy.$shellIntegrationChange(e.instanceId),\n\t\t\t),\n\t\t);\n\n\t\t// onDidStartTerminalShellExecution\n\t\tconst commandDetectionStartEvent = this._store.add(\n\t\t\tthis._terminalService.createOnInstanceCapabilityEvent(\n\t\t\t\tTerminalCapability.CommandDetection,\n\t\t\t\t(e) => e.onCommandExecuted,\n\t\t\t),\n\t\t);\n\t\tlet currentCommand: ITerminalCommand | undefined;\n\t\tthis._store.add(\n\t\t\tcommandDetectionStartEvent.event((e) => {\n\t\t\t\t// Prevent duplicate events from being sent in case command detection double fires the\n\t\t\t\t// event\n\t\t\t\tif (e.data === currentCommand) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\t// String paths are not exposed in the extension API\n\t\t\t\tcurrentCommand = e.data;\n\t\t\t\tconst instanceId = e.instance.instanceId;\n\t\t\t\tthis._proxy.$shellExecutionStart(\n\t\t\t\t\tinstanceId,\n\t\t\t\t\te.data.command,\n\t\t\t\t\tconvertToExtHostCommandLineConfidence(e.data),\n\t\t\t\t\te.data.isTrusted,\n\t\t\t\t\tthis._convertCwdToUri(e.data.cwd),\n\t\t\t\t);\n\n\t\t\t\t// TerminalShellExecution.createDataStream\n\t\t\t\t// Debounce events to reduce the message count - when this listener is disposed the events will be flushed\n\t\t\t\tinstanceDataListeners.get(instanceId)?.dispose();\n\t\t\t\tinstanceDataListeners.set(\n\t\t\t\t\tinstanceId,\n\t\t\t\t\tEvent.accumulate(\n\t\t\t\t\t\te.instance.onData,\n\t\t\t\t\t\t50,\n\t\t\t\t\t\tthis._store,\n\t\t\t\t\t)((events) =>\n\t\t\t\t\t\tthis._proxy.$shellExecutionData(\n\t\t\t\t\t\t\tinstanceId,\n\t\t\t\t\t\t\tevents.join(\"\"),\n\t\t\t\t\t\t),\n\t\t\t\t\t),\n\t\t\t\t);\n\t\t\t}),\n\t\t);\n\n\t\t// onDidEndTerminalShellExecution\n\t\tconst commandDetectionEndEvent = this._store.add(\n\t\t\tthis._terminalService.createOnInstanceCapabilityEvent(\n\t\t\t\tTerminalCapability.CommandDetection,\n\t\t\t\t(e) => e.onCommandFinished,\n\t\t\t),\n\t\t);\n\t\tthis._store.add(\n\t\t\tcommandDetectionEndEvent.event((e) => {\n\t\t\t\tcurrentCommand = undefined;\n\t\t\t\tconst instanceId = e.instance.instanceId;\n\t\t\t\tinstanceDataListeners.get(instanceId)?.dispose();\n\t\t\t\t// Send end in a microtask to ensure the data events are sent first\n\t\t\t\tsetTimeout(() => {\n\t\t\t\t\tthis._proxy.$shellExecutionEnd(\n\t\t\t\t\t\tinstanceId,\n\t\t\t\t\t\te.data.command,\n\t\t\t\t\t\tconvertToExtHostCommandLineConfidence(e.data),\n\t\t\t\t\t\te.data.isTrusted,\n\t\t\t\t\t\te.data.exitCode,\n\t\t\t\t\t);\n\t\t\t\t});\n\t\t\t}),\n\t\t);\n\n\t\t// onDidChangeTerminalShellIntegration via cwd\n\t\tconst cwdChangeEvent = this._store.add(\n\t\t\tthis._terminalService.createOnInstanceCapabilityEvent(\n\t\t\t\tTerminalCapability.CwdDetection,\n\t\t\t\t(e) => e.onDidChangeCwd,\n\t\t\t),\n\t\t);\n\t\tthis._store.add(\n\t\t\tcwdChangeEvent.event((e) => {\n\t\t\t\tthis._proxy.$cwdChange(\n\t\t\t\t\te.instance.instanceId,\n\t\t\t\t\tthis._convertCwdToUri(e.data),\n\t\t\t\t);\n\t\t\t}),\n\t\t);\n\n\t\t// Clean up after dispose\n\t\tthis._store.add(\n\t\t\tthis._terminalService.onDidDisposeInstance((e) =>\n\t\t\t\tthis._proxy.$closeTerminal(e.instanceId),\n\t\t\t),\n\t\t);\n\t}\n\n\t$executeCommand(terminalId: number, commandLine: string): void {\n\t\tthis._terminalService\n\t\t\t.getInstanceFromId(terminalId)\n\t\t\t?.runCommand(commandLine, true);\n\t}\n\n\tprivate _convertCwdToUri(cwd: string | undefined): URI | undefined {\n\t\treturn cwd ? URI.file(cwd) : undefined;\n\t}\n}\n\nfunction convertToExtHostCommandLineConfidence(\n\tcommand: ITerminalCommand,\n): TerminalShellExecutionCommandLineConfidence {\n\tswitch (command.commandLineConfidence) {\n\t\tcase \"high\":\n\t\t\treturn TerminalShellExecutionCommandLineConfidence.High;\n\t\tcase \"medium\":\n\t\t\treturn TerminalShellExecutionCommandLineConfidence.Medium;\n\t\tcase \"low\":\n\t\tdefault:\n\t\t\treturn TerminalShellExecutionCommandLineConfidence.Low;\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
