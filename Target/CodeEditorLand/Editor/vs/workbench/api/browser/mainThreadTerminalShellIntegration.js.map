{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/api/browser/mainThreadTerminalShellIntegration.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Event } from '../../../base/common/event.js';\nimport { Disposable, toDisposable, type IDisposable } from '../../../base/common/lifecycle.js';\nimport { URI } from '../../../base/common/uri.js';\nimport { TerminalCapability, type ITerminalCommand } from '../../../platform/terminal/common/capabilities/capabilities.js';\nimport { ExtHostContext, MainContext, type ExtHostTerminalShellIntegrationShape, type MainThreadTerminalShellIntegrationShape } from '../common/extHost.protocol.js';\nimport { ITerminalService } from '../../contrib/terminal/browser/terminal.js';\nimport { IWorkbenchEnvironmentService } from '../../services/environment/common/environmentService.js';\nimport { extHostNamedCustomer, type IExtHostContext } from '../../services/extensions/common/extHostCustomers.js';\nimport { TerminalShellExecutionCommandLineConfidence } from '../common/extHostTypes.js';\n\n@extHostNamedCustomer(MainContext.MainThreadTerminalShellIntegration)\nexport class MainThreadTerminalShellIntegration extends Disposable implements MainThreadTerminalShellIntegrationShape {\n\tprivate readonly _proxy: ExtHostTerminalShellIntegrationShape;\n\n\tconstructor(\n\t\textHostContext: IExtHostContext,\n\t\t@ITerminalService private readonly _terminalService: ITerminalService,\n\t\t@IWorkbenchEnvironmentService workbenchEnvironmentService: IWorkbenchEnvironmentService\n\t) {\n\t\tsuper();\n\n\t\tthis._proxy = extHostContext.getProxy(ExtHostContext.ExtHostTerminalShellIntegration);\n\n\t\tconst instanceDataListeners: Map<number, IDisposable> = new Map();\n\t\tthis._register(toDisposable(() => {\n\t\t\tfor (const listener of instanceDataListeners.values()) {\n\t\t\t\tlistener.dispose();\n\t\t\t}\n\t\t}));\n\n\t\t// onDidChangeTerminalShellIntegration\n\t\tconst onDidAddCommandDetection = this._store.add(this._terminalService.createOnInstanceEvent(instance => {\n\t\t\treturn Event.map(\n\t\t\t\tEvent.filter(instance.capabilities.onDidAddCapabilityType, e => {\n\t\t\t\t\treturn e === TerminalCapability.CommandDetection;\n\t\t\t\t}), () => instance\n\t\t\t);\n\t\t})).event;\n\t\tthis._store.add(onDidAddCommandDetection(e => this._proxy.$shellIntegrationChange(e.instanceId)));\n\n\t\t// onDidStartTerminalShellExecution\n\t\tconst commandDetectionStartEvent = this._store.add(this._terminalService.createOnInstanceCapabilityEvent(TerminalCapability.CommandDetection, e => e.onCommandExecuted));\n\t\tlet currentCommand: ITerminalCommand | undefined;\n\t\tthis._store.add(commandDetectionStartEvent.event(e => {\n\t\t\t// Prevent duplicate events from being sent in case command detection double fires the\n\t\t\t// event\n\t\t\tif (e.data === currentCommand) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t// String paths are not exposed in the extension API\n\t\t\tcurrentCommand = e.data;\n\t\t\tconst instanceId = e.instance.instanceId;\n\t\t\tthis._proxy.$shellExecutionStart(instanceId, e.data.command, convertToExtHostCommandLineConfidence(e.data), e.data.isTrusted, this._convertCwdToUri(e.data.cwd));\n\n\t\t\t// TerminalShellExecution.createDataStream\n\t\t\t// Debounce events to reduce the message count - when this listener is disposed the events will be flushed\n\t\t\tinstanceDataListeners.get(instanceId)?.dispose();\n\t\t\tinstanceDataListeners.set(instanceId, Event.accumulate(e.instance.onData, 50, this._store)(events => this._proxy.$shellExecutionData(instanceId, events.join(''))));\n\t\t}));\n\n\t\t// onDidEndTerminalShellExecution\n\t\tconst commandDetectionEndEvent = this._store.add(this._terminalService.createOnInstanceCapabilityEvent(TerminalCapability.CommandDetection, e => e.onCommandFinished));\n\t\tthis._store.add(commandDetectionEndEvent.event(e => {\n\t\t\tcurrentCommand = undefined;\n\t\t\tconst instanceId = e.instance.instanceId;\n\t\t\tinstanceDataListeners.get(instanceId)?.dispose();\n\t\t\t// Send end in a microtask to ensure the data events are sent first\n\t\t\tsetTimeout(() => {\n\t\t\t\tthis._proxy.$shellExecutionEnd(instanceId, e.data.command, convertToExtHostCommandLineConfidence(e.data), e.data.isTrusted, e.data.exitCode);\n\t\t\t});\n\t\t}));\n\n\t\t// onDidChangeTerminalShellIntegration via cwd\n\t\tconst cwdChangeEvent = this._store.add(this._terminalService.createOnInstanceCapabilityEvent(TerminalCapability.CwdDetection, e => e.onDidChangeCwd));\n\t\tthis._store.add(cwdChangeEvent.event(e => {\n\t\t\tthis._proxy.$cwdChange(e.instance.instanceId, this._convertCwdToUri(e.data));\n\t\t}));\n\n\t\t// Clean up after dispose\n\t\tthis._store.add(this._terminalService.onDidDisposeInstance(e => this._proxy.$closeTerminal(e.instanceId)));\n\t}\n\n\t$executeCommand(terminalId: number, commandLine: string): void {\n\t\tthis._terminalService.getInstanceFromId(terminalId)?.runCommand(commandLine, true);\n\t}\n\n\tprivate _convertCwdToUri(cwd: string | undefined): URI | undefined {\n\t\treturn cwd ? URI.file(cwd) : undefined;\n\t}\n}\n\nfunction convertToExtHostCommandLineConfidence(command: ITerminalCommand): TerminalShellExecutionCommandLineConfidence {\n\tswitch (command.commandLineConfidence) {\n\t\tcase 'high':\n\t\t\treturn TerminalShellExecutionCommandLineConfidence.High;\n\t\tcase 'medium':\n\t\t\treturn TerminalShellExecutionCommandLineConfidence.Medium;\n\t\tcase 'low':\n\t\tdefault:\n\t\t\treturn TerminalShellExecutionCommandLineConfidence.Low;\n\t}\n}\n"],
  "mappings": ";;;;;;;;;;;;AAKA,SAAS,aAAa;AACtB,SAAS,YAAY,oBAAsC;AAC3D,SAAS,WAAW;AACpB,SAAS,0BAAiD;AAC1D,SAAS,gBAAgB,mBAA4G;AACrI,SAAS,wBAAwB;AACjC,SAAS,oCAAoC;AAC7C,SAAS,4BAAkD;AAC3D,SAAS,mDAAmD;AAGrD,IAAM,qCAAN,cAAiD,WAA8D;AAAA,EAGrH,YACC,gBACmC,kBACL,6BAC7B;AACD,UAAM;AAH6B;AAKnC,SAAK,SAAS,eAAe,SAAS,eAAe,+BAA+B;AAEpF,UAAM,wBAAkD,oBAAI,IAAI;AAChE,SAAK,UAAU,aAAa,MAAM;AACjC,iBAAW,YAAY,sBAAsB,OAAO,GAAG;AACtD,iBAAS,QAAQ;AAAA,MAClB;AAAA,IACD,CAAC,CAAC;AAGF,UAAM,2BAA2B,KAAK,OAAO,IAAI,KAAK,iBAAiB,sBAAsB,cAAY;AACxG,aAAO,MAAM;AAAA,QACZ,MAAM,OAAO,SAAS,aAAa,wBAAwB,OAAK;AAC/D,iBAAO,MAAM,mBAAmB;AAAA,QACjC,CAAC;AAAA,QAAG,MAAM;AAAA,MACX;AAAA,IACD,CAAC,CAAC,EAAE;AACJ,SAAK,OAAO,IAAI,yBAAyB,OAAK,KAAK,OAAO,wBAAwB,EAAE,UAAU,CAAC,CAAC;AAGhG,UAAM,6BAA6B,KAAK,OAAO,IAAI,KAAK,iBAAiB,gCAAgC,mBAAmB,kBAAkB,OAAK,EAAE,iBAAiB,CAAC;AACvK,QAAI;AACJ,SAAK,OAAO,IAAI,2BAA2B,MAAM,OAAK;AAGrD,UAAI,EAAE,SAAS,gBAAgB;AAC9B;AAAA,MACD;AAEA,uBAAiB,EAAE;AACnB,YAAM,aAAa,EAAE,SAAS;AAC9B,WAAK,OAAO,qBAAqB,YAAY,EAAE,KAAK,SAAS,sCAAsC,EAAE,IAAI,GAAG,EAAE,KAAK,WAAW,KAAK,iBAAiB,EAAE,KAAK,GAAG,CAAC;AAI/J,4BAAsB,IAAI,UAAU,GAAG,QAAQ;AAC/C,4BAAsB,IAAI,YAAY,MAAM,WAAW,EAAE,SAAS,QAAQ,IAAI,KAAK,MAAM,EAAE,YAAU,KAAK,OAAO,oBAAoB,YAAY,OAAO,KAAK,EAAE,CAAC,CAAC,CAAC;AAAA,IACnK,CAAC,CAAC;AAGF,UAAM,2BAA2B,KAAK,OAAO,IAAI,KAAK,iBAAiB,gCAAgC,mBAAmB,kBAAkB,OAAK,EAAE,iBAAiB,CAAC;AACrK,SAAK,OAAO,IAAI,yBAAyB,MAAM,OAAK;AACnD,uBAAiB;AACjB,YAAM,aAAa,EAAE,SAAS;AAC9B,4BAAsB,IAAI,UAAU,GAAG,QAAQ;AAE/C,iBAAW,MAAM;AAChB,aAAK,OAAO,mBAAmB,YAAY,EAAE,KAAK,SAAS,sCAAsC,EAAE,IAAI,GAAG,EAAE,KAAK,WAAW,EAAE,KAAK,QAAQ;AAAA,MAC5I,CAAC;AAAA,IACF,CAAC,CAAC;AAGF,UAAM,iBAAiB,KAAK,OAAO,IAAI,KAAK,iBAAiB,gCAAgC,mBAAmB,cAAc,OAAK,EAAE,cAAc,CAAC;AACpJ,SAAK,OAAO,IAAI,eAAe,MAAM,OAAK;AACzC,WAAK,OAAO,WAAW,EAAE,SAAS,YAAY,KAAK,iBAAiB,EAAE,IAAI,CAAC;AAAA,IAC5E,CAAC,CAAC;AAGF,SAAK,OAAO,IAAI,KAAK,iBAAiB,qBAAqB,OAAK,KAAK,OAAO,eAAe,EAAE,UAAU,CAAC,CAAC;AAAA,EAC1G;AAAA,EApEiB;AAAA,EAsEjB,gBAAgB,YAAoB,aAA2B;AAC9D,SAAK,iBAAiB,kBAAkB,UAAU,GAAG,WAAW,aAAa,IAAI;AAAA,EAClF;AAAA,EAEQ,iBAAiB,KAA0C;AAClE,WAAO,MAAM,IAAI,KAAK,GAAG,IAAI;AAAA,EAC9B;AACD;AA9EsH;AAAzG,qCAAN;AAAA,EADN,qBAAqB,YAAY,kCAAkC;AAAA,EAMjE;AAAA,EACA;AAAA,GANU;AAgFb,SAAS,sCAAsC,SAAwE;AACtH,UAAQ,QAAQ,uBAAuB;AAAA,IACtC,KAAK;AACJ,aAAO,4CAA4C;AAAA,IACpD,KAAK;AACJ,aAAO,4CAA4C;AAAA,IACpD,KAAK;AAAA,IACL;AACC,aAAO,4CAA4C;AAAA,EACrD;AACD;AAVS;",
  "names": []
}
