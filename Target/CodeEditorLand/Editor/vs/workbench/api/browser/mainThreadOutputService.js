var v=Object.defineProperty;var m=Object.getOwnPropertyDescriptor;var c=(p,e,t,s)=>{for(var i=s>1?void 0:s?m(e,t):e,n=p.length-1,o;n>=0;n--)(o=p[n])&&(i=(s?o(e,t,i):o(i))||i);return s&&i&&v(e,t,i),i},a=(p,e)=>(t,s)=>e(t,s,p);import{Registry as C}from"../../../platform/registry/common/platform.js";import{Extensions as d,IOutputService as g,OUTPUT_VIEW_ID as u,OutputChannelUpdateMode as _}from"../../services/output/common/output.js";import{MainContext as S,ExtHostContext as f}from"../common/extHost.protocol.js";import{extHostNamedCustomer as x}from"../../services/extensions/common/extHostCustomers.js";import{URI as y}from"../../../base/common/uri.js";import{Disposable as b,toDisposable as w}from"../../../base/common/lifecycle.js";import{Event as l}from"../../../base/common/event.js";import{IViewsService as I}from"../../services/views/common/viewsService.js";import{isNumber as O}from"../../../base/common/types.js";let r=class extends b{static _extensionIdPool=new Map;_proxy;_outputService;_viewsService;constructor(e,t,s){super(),this._outputService=t,this._viewsService=s,this._proxy=e.getProxy(f.ExtHostOutputService);const i=()=>{const n=this._viewsService.isViewVisible(u)?this._outputService.getActiveChannel():void 0;this._proxy.$setVisibleChannel(n?n.id:null)};this._register(l.any(this._outputService.onActiveOutputChannel,l.filter(this._viewsService.onDidChangeViewVisibility,({id:n})=>n===u))(()=>i())),i()}async $register(e,t,s,i){const n=(r._extensionIdPool.get(i)||0)+1;r._extensionIdPool.set(i,n);const o=`extension-output-${i}-#${n}-${e}`,h=y.revive(t);return C.as(d.OutputChannels).registerChannel({id:o,label:e,file:h,log:!1,languageId:s,extensionId:i}),this._register(w(()=>this.$dispose(o))),o}async $update(e,t,s){const i=this._getChannel(e);i&&(t===_.Append?i.update(t):O(s)&&i.update(t,s))}async $reveal(e,t){const s=this._getChannel(e);s&&this._outputService.showChannel(s.id,t)}async $close(e){if(this._viewsService.isViewVisible(u)){const t=this._outputService.getActiveChannel();t&&e===t.id&&this._viewsService.closeView(u)}}async $dispose(e){this._getChannel(e)?.dispose()}_getChannel(e){return this._outputService.getChannel(e)}};r=c([x(S.MainThreadOutputService),a(1,g),a(2,I)],r);export{r as MainThreadOutputService};
