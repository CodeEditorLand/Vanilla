var l=Object.defineProperty;var C=Object.getOwnPropertyDescriptor;var g=(o,e,t)=>e in o?l(o,e,{enumerable:!0,configurable:!0,writable:!0,value:t}):o[e]=t;var c=(o,e,t,s)=>{for(var i=s>1?void 0:s?C(e,t):e,n=o.length-1,p;n>=0;n--)(p=o[n])&&(i=(s?p(e,t,i):p(i))||i);return s&&i&&l(e,t,i),i},a=(o,e)=>(t,s)=>e(t,s,o);var h=(o,e,t)=>g(o,typeof e!="symbol"?e+"":e,t);import{Registry as d}from"../../../platform/registry/common/platform.js";import{Extensions as _,IOutputService as S,OUTPUT_VIEW_ID as u,OutputChannelUpdateMode as f}from"../../services/output/common/output.js";import{MainContext as x,ExtHostContext as y}from"../common/extHost.protocol.js";import{extHostNamedCustomer as b}from"../../services/extensions/common/extHostCustomers.js";import{URI as w}from"../../../base/common/uri.js";import{Disposable as I,toDisposable as V}from"../../../base/common/lifecycle.js";import{Event as v}from"../../../base/common/event.js";import{IViewsService as O}from"../../services/views/common/viewsService.js";import{isNumber as P}from"../../../base/common/types.js";let r=class extends I{_proxy;_outputService;_viewsService;constructor(e,t,s){super(),this._outputService=t,this._viewsService=s,this._proxy=e.getProxy(y.ExtHostOutputService);const i=()=>{const n=this._viewsService.isViewVisible(u)?this._outputService.getActiveChannel():void 0;this._proxy.$setVisibleChannel(n?n.id:null)};this._register(v.any(this._outputService.onActiveOutputChannel,v.filter(this._viewsService.onDidChangeViewVisibility,({id:n})=>n===u))(()=>i())),i()}async $register(e,t,s,i){const n=(r._extensionIdPool.get(i)||0)+1;r._extensionIdPool.set(i,n);const p=`extension-output-${i}-#${n}-${e}`,m=w.revive(t);return d.as(_.OutputChannels).registerChannel({id:p,label:e,file:m,log:!1,languageId:s,extensionId:i}),this._register(V(()=>this.$dispose(p))),p}async $update(e,t,s){const i=this._getChannel(e);i&&(t===f.Append?i.update(t):P(s)&&i.update(t,s))}async $reveal(e,t){const s=this._getChannel(e);s&&this._outputService.showChannel(s.id,t)}async $close(e){if(this._viewsService.isViewVisible(u)){const t=this._outputService.getActiveChannel();t&&e===t.id&&this._viewsService.closeView(u)}}async $dispose(e){this._getChannel(e)?.dispose()}_getChannel(e){return this._outputService.getChannel(e)}};h(r,"_extensionIdPool",new Map),r=c([b(x.MainThreadOutputService),a(1,S),a(2,O)],r);export{r as MainThreadOutputService};
