var d=Object.defineProperty;var b=Object.getOwnPropertyDescriptor;var v=(r,n,e,t)=>{for(var o=t>1?void 0:t?b(n,e):n,i=r.length-1,s;i>=0;i--)(s=r[i])&&(o=(t?s(n,e,o):s(o))||o);return t&&o&&d(n,e,o),o},c=(r,n)=>(e,t)=>n(e,t,r);import{Disposable as u,DisposableStore as w}from"../../../base/common/lifecycle.js";import{Schemas as p}from"../../../base/common/network.js";import{isWeb as f}from"../../../base/common/platform.js";import{escape as x}from"../../../base/common/strings.js";import{URI as m}from"../../../base/common/uri.js";import{localize as W}from"../../../nls.js";import{IOpenerService as h}from"../../../platform/opener/common/opener.js";import{IProductService as y}from"../../../platform/product/common/productService.js";import{SerializableObjectWithBuffers as g}from"../../services/extensions/common/proxyIdentifier.js";import*as H from"../common/extHost.protocol.js";import{deserializeWebviewMessage as C,serializeWebviewMessage as S}from"../common/extHostWebviewMessaging.js";let a=class extends u{constructor(e,t,o){super();this._openerService=t;this._productService=o;this._proxy=e.getProxy(H.ExtHostContext.ExtHostWebviews)}static standardSupportedLinkSchemes=new Set([p.http,p.https,p.mailto,p.vscode,"vscode-insider"]);_proxy;_webviews=new Map;addWebview(e,t,o){if(this._webviews.has(e))throw new Error("Webview already registered");this._webviews.set(e,t),this.hookupWebviewEventDelegate(e,t,o)}$setHtml(e,t){this.tryGetWebview(e)?.setHtml(t)}$setOptions(e,t){const o=this.tryGetWebview(e);o&&(o.contentOptions=P(t))}async $postMessage(e,t,...o){const i=this.tryGetWebview(e);if(!i)return!1;const{message:s,arrayBuffers:l}=C(t,o);return i.postMessage(s,l)}hookupWebviewEventDelegate(e,t,o){const i=new w;i.add(t.onDidClickLink(s=>this.onDidClickLink(e,s))),i.add(t.onMessage(s=>{const l=S(s.message,o);this._proxy.$onMessage(e,l.message,new g(l.buffers))})),i.add(t.onMissingCsp(s=>this._proxy.$onMissingCsp(e,s.value))),i.add(t.onDidDispose(()=>{i.dispose(),this._webviews.delete(e)}))}onDidClickLink(e,t){const o=this.getWebview(e);this.isSupportedLink(o,m.parse(t))&&this._openerService.open(t,{fromUserGesture:!0,allowContributedOpeners:!0,allowCommands:Array.isArray(o.contentOptions.enableCommandUris)||o.contentOptions.enableCommandUris===!0,fromWorkspace:!0})}isSupportedLink(e,t){return a.standardSupportedLinkSchemes.has(t.scheme)||!f&&this._productService.urlProtocol===t.scheme?!0:t.scheme===p.command?Array.isArray(e.contentOptions.enableCommandUris)?e.contentOptions.enableCommandUris.includes(t.path):e.contentOptions.enableCommandUris===!0:!1}tryGetWebview(e){return this._webviews.get(e)}getWebview(e){const t=this.tryGetWebview(e);if(!t)throw new Error(`Unknown webview handle:${e}`);return t}getWebviewResolvedFailedContent(e){return`<!DOCTYPE html>
		<html>
			<head>
				<meta http-equiv="Content-type" content="text/html;charset=UTF-8">
				<meta http-equiv="Content-Security-Policy" content="default-src 'none';">
			</head>
			<body>${W("errorMessage","An error occurred while loading view: {0}",x(e))}</body>
		</html>`}};a=v([c(1,h),c(2,y)],a);function L(r){return{id:r.id,location:m.revive(r.location)}}function P(r){return{allowScripts:r.enableScripts,allowForms:r.enableForms,enableCommandUris:r.enableCommandUris,localResourceRoots:Array.isArray(r.localResourceRoots)?r.localResourceRoots.map(n=>m.revive(n)):void 0,portMapping:r.portMapping}}export{a as MainThreadWebviews,P as reviveWebviewContentOptions,L as reviveWebviewExtension};
