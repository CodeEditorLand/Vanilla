{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/api/browser/mainThreadTreeViews.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Disposable, DisposableMap, DisposableStore } from '../../../base/common/lifecycle.js';\nimport { ExtHostContext, MainThreadTreeViewsShape, ExtHostTreeViewsShape, MainContext, CheckboxUpdate } from '../common/extHost.protocol.js';\nimport { ITreeViewDataProvider, ITreeItem, ITreeView, IViewsRegistry, ITreeViewDescriptor, IRevealOptions, Extensions, ResolvableTreeItem, ITreeViewDragAndDropController, IViewBadge, NoTreeViewError } from '../../common/views.js';\nimport { extHostNamedCustomer, IExtHostContext } from '../../services/extensions/common/extHostCustomers.js';\nimport { distinct } from '../../../base/common/arrays.js';\nimport { INotificationService } from '../../../platform/notification/common/notification.js';\nimport { isUndefinedOrNull, isNumber } from '../../../base/common/types.js';\nimport { Registry } from '../../../platform/registry/common/platform.js';\nimport { IExtensionService } from '../../services/extensions/common/extensions.js';\nimport { ILogService } from '../../../platform/log/common/log.js';\nimport { CancellationToken } from '../../../base/common/cancellation.js';\nimport { createStringDataTransferItem, VSDataTransfer } from '../../../base/common/dataTransfer.js';\nimport { VSBuffer } from '../../../base/common/buffer.js';\nimport { DataTransferFileCache } from '../common/shared/dataTransferCache.js';\nimport * as typeConvert from '../common/extHostTypeConverters.js';\nimport { IMarkdownString } from '../../../base/common/htmlContent.js';\nimport { IViewsService } from '../../services/views/common/viewsService.js';\n\n@extHostNamedCustomer(MainContext.MainThreadTreeViews)\nexport class MainThreadTreeViews extends Disposable implements MainThreadTreeViewsShape {\n\n\tprivate readonly _proxy: ExtHostTreeViewsShape;\n\tprivate readonly _dataProviders: DisposableMap<string, { dataProvider: TreeViewDataProvider; dispose: () => void }> = this._register(new DisposableMap<string, { dataProvider: TreeViewDataProvider; dispose: () => void }>());\n\tprivate readonly _dndControllers = new Map<string, TreeViewDragAndDropController>();\n\n\tconstructor(\n\t\textHostContext: IExtHostContext,\n\t\t@IViewsService private readonly viewsService: IViewsService,\n\t\t@INotificationService private readonly notificationService: INotificationService,\n\t\t@IExtensionService private readonly extensionService: IExtensionService,\n\t\t@ILogService private readonly logService: ILogService\n\t) {\n\t\tsuper();\n\t\tthis._proxy = extHostContext.getProxy(ExtHostContext.ExtHostTreeViews);\n\t}\n\n\tasync $registerTreeViewDataProvider(treeViewId: string, options: { showCollapseAll: boolean; canSelectMany: boolean; dropMimeTypes: string[]; dragMimeTypes: string[]; hasHandleDrag: boolean; hasHandleDrop: boolean; manuallyManageCheckboxes: boolean }): Promise<void> {\n\t\tthis.logService.trace('MainThreadTreeViews#$registerTreeViewDataProvider', treeViewId, options);\n\n\t\tthis.extensionService.whenInstalledExtensionsRegistered().then(() => {\n\t\t\tconst dataProvider = new TreeViewDataProvider(treeViewId, this._proxy, this.notificationService);\n\t\t\tconst disposables = new DisposableStore();\n\t\t\tthis._dataProviders.set(treeViewId, { dataProvider, dispose: () => disposables.dispose() });\n\t\t\tconst dndController = (options.hasHandleDrag || options.hasHandleDrop)\n\t\t\t\t? new TreeViewDragAndDropController(treeViewId, options.dropMimeTypes, options.dragMimeTypes, options.hasHandleDrag, this._proxy) : undefined;\n\t\t\tconst viewer = this.getTreeView(treeViewId);\n\t\t\tif (viewer) {\n\t\t\t\t// Order is important here. The internal tree isn't created until the dataProvider is set.\n\t\t\t\t// Set all other properties first!\n\t\t\t\tviewer.showCollapseAllAction = options.showCollapseAll;\n\t\t\t\tviewer.canSelectMany = options.canSelectMany;\n\t\t\t\tviewer.manuallyManageCheckboxes = options.manuallyManageCheckboxes;\n\t\t\t\tviewer.dragAndDropController = dndController;\n\t\t\t\tif (dndController) {\n\t\t\t\t\tthis._dndControllers.set(treeViewId, dndController);\n\t\t\t\t}\n\t\t\t\tviewer.dataProvider = dataProvider;\n\t\t\t\tthis.registerListeners(treeViewId, viewer, disposables);\n\t\t\t\tthis._proxy.$setVisible(treeViewId, viewer.visible);\n\t\t\t} else {\n\t\t\t\tthis.notificationService.error('No view is registered with id: ' + treeViewId);\n\t\t\t}\n\t\t});\n\t}\n\n\t$reveal(treeViewId: string, itemInfo: { item: ITreeItem; parentChain: ITreeItem[] } | undefined, options: IRevealOptions): Promise<void> {\n\t\tthis.logService.trace('MainThreadTreeViews#$reveal', treeViewId, itemInfo?.item, itemInfo?.parentChain, options);\n\n\t\treturn this.viewsService.openView(treeViewId, options.focus)\n\t\t\t.then(() => {\n\t\t\t\tconst viewer = this.getTreeView(treeViewId);\n\t\t\t\tif (viewer && itemInfo) {\n\t\t\t\t\treturn this.reveal(viewer, this._dataProviders.get(treeViewId)!.dataProvider, itemInfo.item, itemInfo.parentChain, options);\n\t\t\t\t}\n\t\t\t\treturn undefined;\n\t\t\t});\n\t}\n\n\t$refresh(treeViewId: string, itemsToRefreshByHandle: { [treeItemHandle: string]: ITreeItem }): Promise<void> {\n\t\tthis.logService.trace('MainThreadTreeViews#$refresh', treeViewId, itemsToRefreshByHandle);\n\n\t\tconst viewer = this.getTreeView(treeViewId);\n\t\tconst dataProvider = this._dataProviders.get(treeViewId);\n\t\tif (viewer && dataProvider) {\n\t\t\tconst itemsToRefresh = dataProvider.dataProvider.getItemsToRefresh(itemsToRefreshByHandle);\n\t\t\treturn viewer.refresh(itemsToRefresh.length ? itemsToRefresh : undefined);\n\t\t}\n\t\treturn Promise.resolve();\n\t}\n\n\t$setMessage(treeViewId: string, message: string | IMarkdownString): void {\n\t\tthis.logService.trace('MainThreadTreeViews#$setMessage', treeViewId, message.toString());\n\n\t\tconst viewer = this.getTreeView(treeViewId);\n\t\tif (viewer) {\n\t\t\tviewer.message = message;\n\t\t}\n\t}\n\n\t$setTitle(treeViewId: string, title: string, description: string | undefined): void {\n\t\tthis.logService.trace('MainThreadTreeViews#$setTitle', treeViewId, title, description);\n\n\t\tconst viewer = this.getTreeView(treeViewId);\n\t\tif (viewer) {\n\t\t\tviewer.title = title;\n\t\t\tviewer.description = description;\n\t\t}\n\t}\n\n\t$setBadge(treeViewId: string, badge: IViewBadge | undefined): void {\n\t\tthis.logService.trace('MainThreadTreeViews#$setBadge', treeViewId, badge?.value, badge?.tooltip);\n\n\t\tconst viewer = this.getTreeView(treeViewId);\n\t\tif (viewer) {\n\t\t\tviewer.badge = badge;\n\t\t}\n\t}\n\n\t$resolveDropFileData(destinationViewId: string, requestId: number, dataItemId: string): Promise<VSBuffer> {\n\t\tconst controller = this._dndControllers.get(destinationViewId);\n\t\tif (!controller) {\n\t\t\tthrow new Error('Unknown tree');\n\t\t}\n\t\treturn controller.resolveDropFileData(requestId, dataItemId);\n\t}\n\n\tpublic async $disposeTree(treeViewId: string): Promise<void> {\n\t\tconst viewer = this.getTreeView(treeViewId);\n\t\tif (viewer) {\n\t\t\tviewer.dataProvider = undefined;\n\t\t}\n\n\t\tthis._dataProviders.deleteAndDispose(treeViewId);\n\t}\n\n\tprivate async reveal(treeView: ITreeView, dataProvider: TreeViewDataProvider, itemIn: ITreeItem, parentChain: ITreeItem[], options: IRevealOptions): Promise<void> {\n\t\toptions = options ? options : { select: false, focus: false };\n\t\tconst select = isUndefinedOrNull(options.select) ? false : options.select;\n\t\tconst focus = isUndefinedOrNull(options.focus) ? false : options.focus;\n\t\tlet expand = Math.min(isNumber(options.expand) ? options.expand : options.expand === true ? 1 : 0, 3);\n\n\t\tif (dataProvider.isEmpty()) {\n\t\t\t// Refresh if empty\n\t\t\tawait treeView.refresh();\n\t\t}\n\t\tfor (const parent of parentChain) {\n\t\t\tconst parentItem = dataProvider.getItem(parent.handle);\n\t\t\tif (parentItem) {\n\t\t\t\tawait treeView.expand(parentItem);\n\t\t\t}\n\t\t}\n\t\tconst item = dataProvider.getItem(itemIn.handle);\n\t\tif (item) {\n\t\t\tawait treeView.reveal(item);\n\t\t\tif (select) {\n\t\t\t\ttreeView.setSelection([item]);\n\t\t\t}\n\t\t\tif (focus === false) {\n\t\t\t\ttreeView.setFocus();\n\t\t\t} else if (focus) {\n\t\t\t\ttreeView.setFocus(item);\n\t\t\t}\n\t\t\tlet itemsToExpand = [item];\n\t\t\tfor (; itemsToExpand.length > 0 && expand > 0; expand--) {\n\t\t\t\tawait treeView.expand(itemsToExpand);\n\t\t\t\titemsToExpand = itemsToExpand.reduce((result, itemValue) => {\n\t\t\t\t\tconst item = dataProvider.getItem(itemValue.handle);\n\t\t\t\t\tif (item && item.children && item.children.length) {\n\t\t\t\t\t\tresult.push(...item.children);\n\t\t\t\t\t}\n\t\t\t\t\treturn result;\n\t\t\t\t}, [] as ITreeItem[]);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate registerListeners(treeViewId: string, treeView: ITreeView, disposables: DisposableStore): void {\n\t\tdisposables.add(treeView.onDidExpandItem(item => this._proxy.$setExpanded(treeViewId, item.handle, true)));\n\t\tdisposables.add(treeView.onDidCollapseItem(item => this._proxy.$setExpanded(treeViewId, item.handle, false)));\n\t\tdisposables.add(treeView.onDidChangeSelectionAndFocus(items => this._proxy.$setSelectionAndFocus(treeViewId, items.selection.map(({ handle }) => handle), items.focus.handle)));\n\t\tdisposables.add(treeView.onDidChangeVisibility(isVisible => this._proxy.$setVisible(treeViewId, isVisible)));\n\t\tdisposables.add(treeView.onDidChangeCheckboxState(items => {\n\t\t\tthis._proxy.$changeCheckboxState(treeViewId, <CheckboxUpdate[]>items.map(item => {\n\t\t\t\treturn { treeItemHandle: item.handle, newState: item.checkbox?.isChecked ?? false };\n\t\t\t}));\n\t\t}));\n\t}\n\n\tprivate getTreeView(treeViewId: string): ITreeView | null {\n\t\tconst viewDescriptor: ITreeViewDescriptor = <ITreeViewDescriptor>Registry.as<IViewsRegistry>(Extensions.ViewsRegistry).getView(treeViewId);\n\t\treturn viewDescriptor ? viewDescriptor.treeView : null;\n\t}\n\n\toverride dispose(): void {\n\t\tfor (const dataprovider of this._dataProviders) {\n\t\t\tconst treeView = this.getTreeView(dataprovider[0]);\n\t\t\tif (treeView) {\n\t\t\t\ttreeView.dataProvider = undefined;\n\t\t\t}\n\t\t}\n\t\tthis._dataProviders.dispose();\n\n\t\tthis._dndControllers.clear();\n\n\t\tsuper.dispose();\n\t}\n}\n\ntype TreeItemHandle = string;\n\nclass TreeViewDragAndDropController implements ITreeViewDragAndDropController {\n\n\tprivate readonly dataTransfersCache = new DataTransferFileCache();\n\n\tconstructor(private readonly treeViewId: string,\n\t\treadonly dropMimeTypes: string[],\n\t\treadonly dragMimeTypes: string[],\n\t\treadonly hasWillDrop: boolean,\n\t\tprivate readonly _proxy: ExtHostTreeViewsShape) { }\n\n\tasync handleDrop(dataTransfer: VSDataTransfer, targetTreeItem: ITreeItem | undefined, token: CancellationToken,\n\t\toperationUuid?: string, sourceTreeId?: string, sourceTreeItemHandles?: string[]): Promise<void> {\n\t\tconst request = this.dataTransfersCache.add(dataTransfer);\n\t\ttry {\n\t\t\tconst dataTransferDto = await typeConvert.DataTransfer.from(dataTransfer);\n\t\t\tif (token.isCancellationRequested) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\treturn await this._proxy.$handleDrop(this.treeViewId, request.id, dataTransferDto, targetTreeItem?.handle, token, operationUuid, sourceTreeId, sourceTreeItemHandles);\n\t\t} finally {\n\t\t\trequest.dispose();\n\t\t}\n\t}\n\n\tasync handleDrag(sourceTreeItemHandles: string[], operationUuid: string, token: CancellationToken): Promise<VSDataTransfer | undefined> {\n\t\tif (!this.hasWillDrop) {\n\t\t\treturn;\n\t\t}\n\t\tconst additionalDataTransferDTO = await this._proxy.$handleDrag(this.treeViewId, sourceTreeItemHandles, operationUuid, token);\n\t\tif (!additionalDataTransferDTO) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst additionalDataTransfer = new VSDataTransfer();\n\t\tadditionalDataTransferDTO.items.forEach(([type, item]) => {\n\t\t\tadditionalDataTransfer.replace(type, createStringDataTransferItem(item.asString));\n\t\t});\n\t\treturn additionalDataTransfer;\n\t}\n\n\tpublic resolveDropFileData(requestId: number, dataItemId: string): Promise<VSBuffer> {\n\t\treturn this.dataTransfersCache.resolveFileData(requestId, dataItemId);\n\t}\n}\n\nclass TreeViewDataProvider implements ITreeViewDataProvider {\n\n\tprivate readonly itemsMap: Map<TreeItemHandle, ITreeItem> = new Map<TreeItemHandle, ITreeItem>();\n\tprivate hasResolve: Promise<boolean>;\n\n\tconstructor(private readonly treeViewId: string,\n\t\tprivate readonly _proxy: ExtHostTreeViewsShape,\n\t\tprivate readonly notificationService: INotificationService\n\t) {\n\t\tthis.hasResolve = this._proxy.$hasResolve(this.treeViewId);\n\t}\n\n\tgetChildren(treeItem?: ITreeItem): Promise<ITreeItem[] | undefined> {\n\t\tif (!treeItem) {\n\t\t\tthis.itemsMap.clear();\n\t\t}\n\t\treturn this._proxy.$getChildren(this.treeViewId, treeItem ? treeItem.handle : undefined)\n\t\t\t.then(\n\t\t\t\tchildren => this.postGetChildren(children),\n\t\t\t\terr => {\n\t\t\t\t\t// It can happen that a tree view is disposed right as `getChildren` is called. This results in an error because the data provider gets removed.\n\t\t\t\t\t// The tree will shortly get cleaned up in this case. We just need to handle the error here.\n\t\t\t\t\tif (!NoTreeViewError.is(err)) {\n\t\t\t\t\t\tthis.notificationService.error(err);\n\t\t\t\t\t}\n\t\t\t\t\treturn [];\n\t\t\t\t});\n\t}\n\n\tgetItemsToRefresh(itemsToRefreshByHandle: { [treeItemHandle: string]: ITreeItem }): ITreeItem[] {\n\t\tconst itemsToRefresh: ITreeItem[] = [];\n\t\tif (itemsToRefreshByHandle) {\n\t\t\tfor (const treeItemHandle of Object.keys(itemsToRefreshByHandle)) {\n\t\t\t\tconst currentTreeItem = this.getItem(treeItemHandle);\n\t\t\t\tif (currentTreeItem) { // Refresh only if the item exists\n\t\t\t\t\tconst treeItem = itemsToRefreshByHandle[treeItemHandle];\n\t\t\t\t\t// Update the current item with refreshed item\n\t\t\t\t\tthis.updateTreeItem(currentTreeItem, treeItem);\n\t\t\t\t\tif (treeItemHandle === treeItem.handle) {\n\t\t\t\t\t\titemsToRefresh.push(currentTreeItem);\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// Update maps when handle is changed and refresh parent\n\t\t\t\t\t\tthis.itemsMap.delete(treeItemHandle);\n\t\t\t\t\t\tthis.itemsMap.set(currentTreeItem.handle, currentTreeItem);\n\t\t\t\t\t\tconst parent = treeItem.parentHandle ? this.itemsMap.get(treeItem.parentHandle) : null;\n\t\t\t\t\t\tif (parent) {\n\t\t\t\t\t\t\titemsToRefresh.push(parent);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn itemsToRefresh;\n\t}\n\n\tgetItem(treeItemHandle: string): ITreeItem | undefined {\n\t\treturn this.itemsMap.get(treeItemHandle);\n\t}\n\n\tisEmpty(): boolean {\n\t\treturn this.itemsMap.size === 0;\n\t}\n\n\tprivate async postGetChildren(elements: ITreeItem[] | undefined): Promise<ResolvableTreeItem[] | undefined> {\n\t\tif (elements === undefined) {\n\t\t\treturn undefined;\n\t\t}\n\t\tconst result: ResolvableTreeItem[] = [];\n\t\tconst hasResolve = await this.hasResolve;\n\t\tif (elements) {\n\t\t\tfor (const element of elements) {\n\t\t\t\tconst resolvable = new ResolvableTreeItem(element, hasResolve ? (token) => {\n\t\t\t\t\treturn this._proxy.$resolve(this.treeViewId, element.handle, token);\n\t\t\t\t} : undefined);\n\t\t\t\tthis.itemsMap.set(element.handle, resolvable);\n\t\t\t\tresult.push(resolvable);\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n\n\tprivate updateTreeItem(current: ITreeItem, treeItem: ITreeItem): void {\n\t\ttreeItem.children = treeItem.children ? treeItem.children : undefined;\n\t\tif (current) {\n\t\t\tconst properties = distinct([...Object.keys(current instanceof ResolvableTreeItem ? current.asTreeItem() : current),\n\t\t\t...Object.keys(treeItem)]);\n\t\t\tfor (const property of properties) {\n\t\t\t\t(<any>current)[property] = (<any>treeItem)[property];\n\t\t\t}\n\t\t\tif (current instanceof ResolvableTreeItem) {\n\t\t\t\tcurrent.resetResolve();\n\t\t\t}\n\t\t}\n\t}\n}\n"],
  "mappings": "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",
  "names": ["item"]
}
