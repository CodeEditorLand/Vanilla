{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/api/browser/mainThreadTreeViews.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { distinct } from \"../../../base/common/arrays.js\";\nimport type { VSBuffer } from \"../../../base/common/buffer.js\";\nimport type { CancellationToken } from \"../../../base/common/cancellation.js\";\nimport {\n\tVSDataTransfer,\n\tcreateStringDataTransferItem,\n} from \"../../../base/common/dataTransfer.js\";\nimport type { IMarkdownString } from \"../../../base/common/htmlContent.js\";\nimport {\n\tDisposable,\n\tDisposableMap,\n\tDisposableStore,\n} from \"../../../base/common/lifecycle.js\";\nimport { isNumber, isUndefinedOrNull } from \"../../../base/common/types.js\";\nimport { ILogService } from \"../../../platform/log/common/log.js\";\nimport { INotificationService } from \"../../../platform/notification/common/notification.js\";\nimport { Registry } from \"../../../platform/registry/common/platform.js\";\nimport {\n\tExtensions,\n\ttype IRevealOptions,\n\ttype ITreeItem,\n\ttype ITreeView,\n\ttype ITreeViewDataProvider,\n\ttype ITreeViewDescriptor,\n\ttype ITreeViewDragAndDropController,\n\ttype IViewBadge,\n\ttype IViewsRegistry,\n\tNoTreeViewError,\n\tResolvableTreeItem,\n} from \"../../common/views.js\";\nimport {\n\ttype IExtHostContext,\n\textHostNamedCustomer,\n} from \"../../services/extensions/common/extHostCustomers.js\";\nimport { IExtensionService } from \"../../services/extensions/common/extensions.js\";\nimport { IViewsService } from \"../../services/views/common/viewsService.js\";\nimport {\n\ttype CheckboxUpdate,\n\tExtHostContext,\n\ttype ExtHostTreeViewsShape,\n\tMainContext,\n\ttype MainThreadTreeViewsShape,\n} from \"../common/extHost.protocol.js\";\nimport * as typeConvert from \"../common/extHostTypeConverters.js\";\nimport { DataTransferFileCache } from \"../common/shared/dataTransferCache.js\";\n\n@extHostNamedCustomer(MainContext.MainThreadTreeViews)\nexport class MainThreadTreeViews\n\textends Disposable\n\timplements MainThreadTreeViewsShape\n{\n\tprivate readonly _proxy: ExtHostTreeViewsShape;\n\tprivate readonly _dataProviders: DisposableMap<\n\t\tstring,\n\t\t{ dataProvider: TreeViewDataProvider; dispose: () => void }\n\t> = this._register(\n\t\tnew DisposableMap<\n\t\t\tstring,\n\t\t\t{ dataProvider: TreeViewDataProvider; dispose: () => void }\n\t\t>(),\n\t);\n\tprivate readonly _dndControllers = new Map<\n\t\tstring,\n\t\tTreeViewDragAndDropController\n\t>();\n\n\tconstructor(\n\t\textHostContext: IExtHostContext,\n\t\t@IViewsService private readonly viewsService: IViewsService,\n\t\t@INotificationService\n\t\tprivate readonly notificationService: INotificationService,\n\t\t@IExtensionService private readonly extensionService: IExtensionService,\n\t\t@ILogService private readonly logService: ILogService,\n\t) {\n\t\tsuper();\n\t\tthis._proxy = extHostContext.getProxy(ExtHostContext.ExtHostTreeViews);\n\t}\n\n\tasync $registerTreeViewDataProvider(\n\t\ttreeViewId: string,\n\t\toptions: {\n\t\t\tshowCollapseAll: boolean;\n\t\t\tcanSelectMany: boolean;\n\t\t\tdropMimeTypes: string[];\n\t\t\tdragMimeTypes: string[];\n\t\t\thasHandleDrag: boolean;\n\t\t\thasHandleDrop: boolean;\n\t\t\tmanuallyManageCheckboxes: boolean;\n\t\t},\n\t): Promise<void> {\n\t\tthis.logService.trace(\n\t\t\t\"MainThreadTreeViews#$registerTreeViewDataProvider\",\n\t\t\ttreeViewId,\n\t\t\toptions,\n\t\t);\n\n\t\tthis.extensionService.whenInstalledExtensionsRegistered().then(() => {\n\t\t\tconst dataProvider = new TreeViewDataProvider(\n\t\t\t\ttreeViewId,\n\t\t\t\tthis._proxy,\n\t\t\t\tthis.notificationService,\n\t\t\t);\n\t\t\tconst disposables = new DisposableStore();\n\t\t\tthis._dataProviders.set(treeViewId, {\n\t\t\t\tdataProvider,\n\t\t\t\tdispose: () => disposables.dispose(),\n\t\t\t});\n\t\t\tconst dndController =\n\t\t\t\toptions.hasHandleDrag || options.hasHandleDrop\n\t\t\t\t\t? new TreeViewDragAndDropController(\n\t\t\t\t\t\t\ttreeViewId,\n\t\t\t\t\t\t\toptions.dropMimeTypes,\n\t\t\t\t\t\t\toptions.dragMimeTypes,\n\t\t\t\t\t\t\toptions.hasHandleDrag,\n\t\t\t\t\t\t\tthis._proxy,\n\t\t\t\t\t\t)\n\t\t\t\t\t: undefined;\n\t\t\tconst viewer = this.getTreeView(treeViewId);\n\t\t\tif (viewer) {\n\t\t\t\t// Order is important here. The internal tree isn't created until the dataProvider is set.\n\t\t\t\t// Set all other properties first!\n\t\t\t\tviewer.showCollapseAllAction = options.showCollapseAll;\n\t\t\t\tviewer.canSelectMany = options.canSelectMany;\n\t\t\t\tviewer.manuallyManageCheckboxes =\n\t\t\t\t\toptions.manuallyManageCheckboxes;\n\t\t\t\tviewer.dragAndDropController = dndController;\n\t\t\t\tif (dndController) {\n\t\t\t\t\tthis._dndControllers.set(treeViewId, dndController);\n\t\t\t\t}\n\t\t\t\tviewer.dataProvider = dataProvider;\n\t\t\t\tthis.registerListeners(treeViewId, viewer, disposables);\n\t\t\t\tthis._proxy.$setVisible(treeViewId, viewer.visible);\n\t\t\t} else {\n\t\t\t\tthis.notificationService.error(\n\t\t\t\t\t\"No view is registered with id: \" + treeViewId,\n\t\t\t\t);\n\t\t\t}\n\t\t});\n\t}\n\n\t$reveal(\n\t\ttreeViewId: string,\n\t\titemInfo: { item: ITreeItem; parentChain: ITreeItem[] } | undefined,\n\t\toptions: IRevealOptions,\n\t): Promise<void> {\n\t\tthis.logService.trace(\n\t\t\t\"MainThreadTreeViews#$reveal\",\n\t\t\ttreeViewId,\n\t\t\titemInfo?.item,\n\t\t\titemInfo?.parentChain,\n\t\t\toptions,\n\t\t);\n\n\t\treturn this.viewsService\n\t\t\t.openView(treeViewId, options.focus)\n\t\t\t.then(() => {\n\t\t\t\tconst viewer = this.getTreeView(treeViewId);\n\t\t\t\tif (viewer && itemInfo) {\n\t\t\t\t\treturn this.reveal(\n\t\t\t\t\t\tviewer,\n\t\t\t\t\t\tthis._dataProviders.get(treeViewId)!.dataProvider,\n\t\t\t\t\t\titemInfo.item,\n\t\t\t\t\t\titemInfo.parentChain,\n\t\t\t\t\t\toptions,\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t\treturn undefined;\n\t\t\t});\n\t}\n\n\t$refresh(\n\t\ttreeViewId: string,\n\t\titemsToRefreshByHandle: { [treeItemHandle: string]: ITreeItem },\n\t): Promise<void> {\n\t\tthis.logService.trace(\n\t\t\t\"MainThreadTreeViews#$refresh\",\n\t\t\ttreeViewId,\n\t\t\titemsToRefreshByHandle,\n\t\t);\n\n\t\tconst viewer = this.getTreeView(treeViewId);\n\t\tconst dataProvider = this._dataProviders.get(treeViewId);\n\t\tif (viewer && dataProvider) {\n\t\t\tconst itemsToRefresh = dataProvider.dataProvider.getItemsToRefresh(\n\t\t\t\titemsToRefreshByHandle,\n\t\t\t);\n\t\t\treturn viewer.refresh(\n\t\t\t\titemsToRefresh.length ? itemsToRefresh : undefined,\n\t\t\t);\n\t\t}\n\t\treturn Promise.resolve();\n\t}\n\n\t$setMessage(treeViewId: string, message: string | IMarkdownString): void {\n\t\tthis.logService.trace(\n\t\t\t\"MainThreadTreeViews#$setMessage\",\n\t\t\ttreeViewId,\n\t\t\tmessage.toString(),\n\t\t);\n\n\t\tconst viewer = this.getTreeView(treeViewId);\n\t\tif (viewer) {\n\t\t\tviewer.message = message;\n\t\t}\n\t}\n\n\t$setTitle(\n\t\ttreeViewId: string,\n\t\ttitle: string,\n\t\tdescription: string | undefined,\n\t): void {\n\t\tthis.logService.trace(\n\t\t\t\"MainThreadTreeViews#$setTitle\",\n\t\t\ttreeViewId,\n\t\t\ttitle,\n\t\t\tdescription,\n\t\t);\n\n\t\tconst viewer = this.getTreeView(treeViewId);\n\t\tif (viewer) {\n\t\t\tviewer.title = title;\n\t\t\tviewer.description = description;\n\t\t}\n\t}\n\n\t$setBadge(treeViewId: string, badge: IViewBadge | undefined): void {\n\t\tthis.logService.trace(\n\t\t\t\"MainThreadTreeViews#$setBadge\",\n\t\t\ttreeViewId,\n\t\t\tbadge?.value,\n\t\t\tbadge?.tooltip,\n\t\t);\n\n\t\tconst viewer = this.getTreeView(treeViewId);\n\t\tif (viewer) {\n\t\t\tviewer.badge = badge;\n\t\t}\n\t}\n\n\t$resolveDropFileData(\n\t\tdestinationViewId: string,\n\t\trequestId: number,\n\t\tdataItemId: string,\n\t): Promise<VSBuffer> {\n\t\tconst controller = this._dndControllers.get(destinationViewId);\n\t\tif (!controller) {\n\t\t\tthrow new Error(\"Unknown tree\");\n\t\t}\n\t\treturn controller.resolveDropFileData(requestId, dataItemId);\n\t}\n\n\tpublic async $disposeTree(treeViewId: string): Promise<void> {\n\t\tconst viewer = this.getTreeView(treeViewId);\n\t\tif (viewer) {\n\t\t\tviewer.dataProvider = undefined;\n\t\t}\n\n\t\tthis._dataProviders.deleteAndDispose(treeViewId);\n\t}\n\n\tprivate async reveal(\n\t\ttreeView: ITreeView,\n\t\tdataProvider: TreeViewDataProvider,\n\t\titemIn: ITreeItem,\n\t\tparentChain: ITreeItem[],\n\t\toptions: IRevealOptions,\n\t): Promise<void> {\n\t\toptions = options ? options : { select: false, focus: false };\n\t\tconst select = isUndefinedOrNull(options.select)\n\t\t\t? false\n\t\t\t: options.select;\n\t\tconst focus = isUndefinedOrNull(options.focus) ? false : options.focus;\n\t\tlet expand = Math.min(\n\t\t\tisNumber(options.expand)\n\t\t\t\t? options.expand\n\t\t\t\t: options.expand === true\n\t\t\t\t\t? 1\n\t\t\t\t\t: 0,\n\t\t\t3,\n\t\t);\n\n\t\tif (dataProvider.isEmpty()) {\n\t\t\t// Refresh if empty\n\t\t\tawait treeView.refresh();\n\t\t}\n\t\tfor (const parent of parentChain) {\n\t\t\tconst parentItem = dataProvider.getItem(parent.handle);\n\t\t\tif (parentItem) {\n\t\t\t\tawait treeView.expand(parentItem);\n\t\t\t}\n\t\t}\n\t\tconst item = dataProvider.getItem(itemIn.handle);\n\t\tif (item) {\n\t\t\tawait treeView.reveal(item);\n\t\t\tif (select) {\n\t\t\t\ttreeView.setSelection([item]);\n\t\t\t}\n\t\t\tif (focus === false) {\n\t\t\t\ttreeView.setFocus();\n\t\t\t} else if (focus) {\n\t\t\t\ttreeView.setFocus(item);\n\t\t\t}\n\t\t\tlet itemsToExpand = [item];\n\t\t\tfor (; itemsToExpand.length > 0 && expand > 0; expand--) {\n\t\t\t\tawait treeView.expand(itemsToExpand);\n\t\t\t\titemsToExpand = itemsToExpand.reduce((result, itemValue) => {\n\t\t\t\t\tconst item = dataProvider.getItem(itemValue.handle);\n\t\t\t\t\tif (item && item.children && item.children.length) {\n\t\t\t\t\t\tresult.push(...item.children);\n\t\t\t\t\t}\n\t\t\t\t\treturn result;\n\t\t\t\t}, [] as ITreeItem[]);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate registerListeners(\n\t\ttreeViewId: string,\n\t\ttreeView: ITreeView,\n\t\tdisposables: DisposableStore,\n\t): void {\n\t\tdisposables.add(\n\t\t\ttreeView.onDidExpandItem((item) =>\n\t\t\t\tthis._proxy.$setExpanded(treeViewId, item.handle, true),\n\t\t\t),\n\t\t);\n\t\tdisposables.add(\n\t\t\ttreeView.onDidCollapseItem((item) =>\n\t\t\t\tthis._proxy.$setExpanded(treeViewId, item.handle, false),\n\t\t\t),\n\t\t);\n\t\tdisposables.add(\n\t\t\ttreeView.onDidChangeSelectionAndFocus((items) =>\n\t\t\t\tthis._proxy.$setSelectionAndFocus(\n\t\t\t\t\ttreeViewId,\n\t\t\t\t\titems.selection.map(({ handle }) => handle),\n\t\t\t\t\titems.focus.handle,\n\t\t\t\t),\n\t\t\t),\n\t\t);\n\t\tdisposables.add(\n\t\t\ttreeView.onDidChangeVisibility((isVisible) =>\n\t\t\t\tthis._proxy.$setVisible(treeViewId, isVisible),\n\t\t\t),\n\t\t);\n\t\tdisposables.add(\n\t\t\ttreeView.onDidChangeCheckboxState((items) => {\n\t\t\t\tthis._proxy.$changeCheckboxState(\n\t\t\t\t\ttreeViewId,\n\t\t\t\t\t<CheckboxUpdate[]>items.map((item) => {\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\ttreeItemHandle: item.handle,\n\t\t\t\t\t\t\tnewState: item.checkbox?.isChecked ?? false,\n\t\t\t\t\t\t};\n\t\t\t\t\t}),\n\t\t\t\t);\n\t\t\t}),\n\t\t);\n\t}\n\n\tprivate getTreeView(treeViewId: string): ITreeView | null {\n\t\tconst viewDescriptor: ITreeViewDescriptor = <ITreeViewDescriptor>(\n\t\t\tRegistry.as<IViewsRegistry>(Extensions.ViewsRegistry).getView(\n\t\t\t\ttreeViewId,\n\t\t\t)\n\t\t);\n\t\treturn viewDescriptor ? viewDescriptor.treeView : null;\n\t}\n\n\toverride dispose(): void {\n\t\tfor (const dataprovider of this._dataProviders) {\n\t\t\tconst treeView = this.getTreeView(dataprovider[0]);\n\t\t\tif (treeView) {\n\t\t\t\ttreeView.dataProvider = undefined;\n\t\t\t}\n\t\t}\n\t\tthis._dataProviders.dispose();\n\n\t\tthis._dndControllers.clear();\n\n\t\tsuper.dispose();\n\t}\n}\n\ntype TreeItemHandle = string;\n\nclass TreeViewDragAndDropController implements ITreeViewDragAndDropController {\n\tprivate readonly dataTransfersCache = new DataTransferFileCache();\n\n\tconstructor(\n\t\tprivate readonly treeViewId: string,\n\t\treadonly dropMimeTypes: string[],\n\t\treadonly dragMimeTypes: string[],\n\t\treadonly hasWillDrop: boolean,\n\t\tprivate readonly _proxy: ExtHostTreeViewsShape,\n\t) {}\n\n\tasync handleDrop(\n\t\tdataTransfer: VSDataTransfer,\n\t\ttargetTreeItem: ITreeItem | undefined,\n\t\ttoken: CancellationToken,\n\t\toperationUuid?: string,\n\t\tsourceTreeId?: string,\n\t\tsourceTreeItemHandles?: string[],\n\t): Promise<void> {\n\t\tconst request = this.dataTransfersCache.add(dataTransfer);\n\t\ttry {\n\t\t\tconst dataTransferDto =\n\t\t\t\tawait typeConvert.DataTransfer.from(dataTransfer);\n\t\t\tif (token.isCancellationRequested) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\treturn await this._proxy.$handleDrop(\n\t\t\t\tthis.treeViewId,\n\t\t\t\trequest.id,\n\t\t\t\tdataTransferDto,\n\t\t\t\ttargetTreeItem?.handle,\n\t\t\t\ttoken,\n\t\t\t\toperationUuid,\n\t\t\t\tsourceTreeId,\n\t\t\t\tsourceTreeItemHandles,\n\t\t\t);\n\t\t} finally {\n\t\t\trequest.dispose();\n\t\t}\n\t}\n\n\tasync handleDrag(\n\t\tsourceTreeItemHandles: string[],\n\t\toperationUuid: string,\n\t\ttoken: CancellationToken,\n\t): Promise<VSDataTransfer | undefined> {\n\t\tif (!this.hasWillDrop) {\n\t\t\treturn;\n\t\t}\n\t\tconst additionalDataTransferDTO = await this._proxy.$handleDrag(\n\t\t\tthis.treeViewId,\n\t\t\tsourceTreeItemHandles,\n\t\t\toperationUuid,\n\t\t\ttoken,\n\t\t);\n\t\tif (!additionalDataTransferDTO) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst additionalDataTransfer = new VSDataTransfer();\n\t\tadditionalDataTransferDTO.items.forEach(([type, item]) => {\n\t\t\tadditionalDataTransfer.replace(\n\t\t\t\ttype,\n\t\t\t\tcreateStringDataTransferItem(item.asString),\n\t\t\t);\n\t\t});\n\t\treturn additionalDataTransfer;\n\t}\n\n\tpublic resolveDropFileData(\n\t\trequestId: number,\n\t\tdataItemId: string,\n\t): Promise<VSBuffer> {\n\t\treturn this.dataTransfersCache.resolveFileData(requestId, dataItemId);\n\t}\n}\n\nclass TreeViewDataProvider implements ITreeViewDataProvider {\n\tprivate readonly itemsMap: Map<TreeItemHandle, ITreeItem> = new Map<\n\t\tTreeItemHandle,\n\t\tITreeItem\n\t>();\n\tprivate hasResolve: Promise<boolean>;\n\n\tconstructor(\n\t\tprivate readonly treeViewId: string,\n\t\tprivate readonly _proxy: ExtHostTreeViewsShape,\n\t\tprivate readonly notificationService: INotificationService,\n\t) {\n\t\tthis.hasResolve = this._proxy.$hasResolve(this.treeViewId);\n\t}\n\n\tgetChildren(treeItem?: ITreeItem): Promise<ITreeItem[] | undefined> {\n\t\tif (!treeItem) {\n\t\t\tthis.itemsMap.clear();\n\t\t}\n\t\treturn this._proxy\n\t\t\t.$getChildren(\n\t\t\t\tthis.treeViewId,\n\t\t\t\ttreeItem ? treeItem.handle : undefined,\n\t\t\t)\n\t\t\t.then(\n\t\t\t\t(children) => this.postGetChildren(children),\n\t\t\t\t(err) => {\n\t\t\t\t\t// It can happen that a tree view is disposed right as `getChildren` is called. This results in an error because the data provider gets removed.\n\t\t\t\t\t// The tree will shortly get cleaned up in this case. We just need to handle the error here.\n\t\t\t\t\tif (!NoTreeViewError.is(err)) {\n\t\t\t\t\t\tthis.notificationService.error(err);\n\t\t\t\t\t}\n\t\t\t\t\treturn [];\n\t\t\t\t},\n\t\t\t);\n\t}\n\n\tgetItemsToRefresh(itemsToRefreshByHandle: {\n\t\t[treeItemHandle: string]: ITreeItem;\n\t}): ITreeItem[] {\n\t\tconst itemsToRefresh: ITreeItem[] = [];\n\t\tif (itemsToRefreshByHandle) {\n\t\t\tfor (const treeItemHandle of Object.keys(itemsToRefreshByHandle)) {\n\t\t\t\tconst currentTreeItem = this.getItem(treeItemHandle);\n\t\t\t\tif (currentTreeItem) {\n\t\t\t\t\t// Refresh only if the item exists\n\t\t\t\t\tconst treeItem = itemsToRefreshByHandle[treeItemHandle];\n\t\t\t\t\t// Update the current item with refreshed item\n\t\t\t\t\tthis.updateTreeItem(currentTreeItem, treeItem);\n\t\t\t\t\tif (treeItemHandle === treeItem.handle) {\n\t\t\t\t\t\titemsToRefresh.push(currentTreeItem);\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// Update maps when handle is changed and refresh parent\n\t\t\t\t\t\tthis.itemsMap.delete(treeItemHandle);\n\t\t\t\t\t\tthis.itemsMap.set(\n\t\t\t\t\t\t\tcurrentTreeItem.handle,\n\t\t\t\t\t\t\tcurrentTreeItem,\n\t\t\t\t\t\t);\n\t\t\t\t\t\tconst parent = treeItem.parentHandle\n\t\t\t\t\t\t\t? this.itemsMap.get(treeItem.parentHandle)\n\t\t\t\t\t\t\t: null;\n\t\t\t\t\t\tif (parent) {\n\t\t\t\t\t\t\titemsToRefresh.push(parent);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn itemsToRefresh;\n\t}\n\n\tgetItem(treeItemHandle: string): ITreeItem | undefined {\n\t\treturn this.itemsMap.get(treeItemHandle);\n\t}\n\n\tisEmpty(): boolean {\n\t\treturn this.itemsMap.size === 0;\n\t}\n\n\tprivate async postGetChildren(\n\t\telements: ITreeItem[] | undefined,\n\t): Promise<ResolvableTreeItem[] | undefined> {\n\t\tif (elements === undefined) {\n\t\t\treturn undefined;\n\t\t}\n\t\tconst result: ResolvableTreeItem[] = [];\n\t\tconst hasResolve = await this.hasResolve;\n\t\tif (elements) {\n\t\t\tfor (const element of elements) {\n\t\t\t\tconst resolvable = new ResolvableTreeItem(\n\t\t\t\t\telement,\n\t\t\t\t\thasResolve\n\t\t\t\t\t\t? (token) => {\n\t\t\t\t\t\t\t\treturn this._proxy.$resolve(\n\t\t\t\t\t\t\t\t\tthis.treeViewId,\n\t\t\t\t\t\t\t\t\telement.handle,\n\t\t\t\t\t\t\t\t\ttoken,\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t: undefined,\n\t\t\t\t);\n\t\t\t\tthis.itemsMap.set(element.handle, resolvable);\n\t\t\t\tresult.push(resolvable);\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n\n\tprivate updateTreeItem(current: ITreeItem, treeItem: ITreeItem): void {\n\t\ttreeItem.children = treeItem.children ? treeItem.children : undefined;\n\t\tif (current) {\n\t\t\tconst properties = distinct([\n\t\t\t\t...Object.keys(\n\t\t\t\t\tcurrent instanceof ResolvableTreeItem\n\t\t\t\t\t\t? current.asTreeItem()\n\t\t\t\t\t\t: current,\n\t\t\t\t),\n\t\t\t\t...Object.keys(treeItem),\n\t\t\t]);\n\t\t\tfor (const property of properties) {\n\t\t\t\t(<any>current)[property] = (<any>treeItem)[property];\n\t\t\t}\n\t\t\tif (current instanceof ResolvableTreeItem) {\n\t\t\t\tcurrent.resetResolve();\n\t\t\t}\n\t\t}\n\t}\n}\n"],
  "mappings": "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",
  "names": ["item"]
}
