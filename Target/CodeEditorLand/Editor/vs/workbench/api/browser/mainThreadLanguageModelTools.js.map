{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/api/browser/mainThreadLanguageModelTools.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CancellationToken } from '../../../base/common/cancellation.js';\nimport { Disposable, DisposableMap } from '../../../base/common/lifecycle.js';\nimport { ExtHostContext, ExtHostLanguageModelToolsShape, MainContext, MainThreadLanguageModelToolsShape } from '../common/extHost.protocol.js';\nimport { CountTokensCallback, ILanguageModelToolsService, IToolData, IToolInvocation, IToolResult } from '../../contrib/chat/common/languageModelToolsService.js';\nimport { IExtHostContext, extHostNamedCustomer } from '../../services/extensions/common/extHostCustomers.js';\n\n@extHostNamedCustomer(MainContext.MainThreadLanguageModelTools)\nexport class MainThreadLanguageModelTools extends Disposable implements MainThreadLanguageModelToolsShape {\n\n\tprivate readonly _proxy: ExtHostLanguageModelToolsShape;\n\tprivate readonly _tools = this._register(new DisposableMap<string>());\n\tprivate readonly _countTokenCallbacks = new Map</* call ID */string, CountTokensCallback>();\n\n\tconstructor(\n\t\textHostContext: IExtHostContext,\n\t\t@ILanguageModelToolsService private readonly _languageModelToolsService: ILanguageModelToolsService,\n\t) {\n\t\tsuper();\n\t\tthis._proxy = extHostContext.getProxy(ExtHostContext.ExtHostLanguageModelTools);\n\n\t\tthis._register(this._languageModelToolsService.onDidChangeTools(e => this._proxy.$onDidChangeTools([...this._languageModelToolsService.getTools()])));\n\t}\n\n\tasync $getTools(): Promise<IToolData[]> {\n\t\treturn Array.from(this._languageModelToolsService.getTools());\n\t}\n\n\t$invokeTool(dto: IToolInvocation, token: CancellationToken): Promise<IToolResult> {\n\t\treturn this._languageModelToolsService.invokeTool(\n\t\t\tdto,\n\t\t\t(input, token) => this._proxy.$countTokensForInvocation(dto.callId, input, token),\n\t\t\ttoken,\n\t\t);\n\t}\n\n\t$countTokensForInvocation(callId: string, input: string, token: CancellationToken): Promise<number> {\n\t\tconst fn = this._countTokenCallbacks.get(callId);\n\t\tif (!fn) {\n\t\t\tthrow new Error(`Tool invocation call ${callId} not found`);\n\t\t}\n\n\t\treturn fn(input, token);\n\t}\n\n\t$registerTool(name: string): void {\n\t\tconst disposable = this._languageModelToolsService.registerToolImplementation(\n\t\t\tname,\n\t\t\t{\n\t\t\t\tinvoke: async (dto, countTokens, token) => {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tthis._countTokenCallbacks.set(dto.callId, countTokens);\n\t\t\t\t\t\treturn await this._proxy.$invokeTool(dto, token);\n\t\t\t\t\t} finally {\n\t\t\t\t\t\tthis._countTokenCallbacks.delete(dto.callId);\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t});\n\t\tthis._tools.set(name, disposable);\n\t}\n\n\t$unregisterTool(name: string): void {\n\t\tthis._tools.deleteAndDispose(name);\n\t}\n}\n"],
  "mappings": ";;;;;;;;;;;;AAKA,SAAS,yBAAyB;AAClC,SAAS,YAAY,qBAAqB;AAC1C,SAAS,gBAAgB,gCAAgC,aAAa,yCAAyC;AAC/G,SAAS,qBAAqB,4BAA4B,WAAW,iBAAiB,mBAAmB;AACzG,SAAS,iBAAiB,4BAA4B;AAG/C,IAAM,+BAAN,cAA2C,WAAwD;AAAA,EAMzG,YACC,gBAC6C,4BAC5C;AACD,UAAM;AAFuC;AAG7C,SAAK,SAAS,eAAe,SAAS,eAAe,yBAAyB;AAE9E,SAAK,UAAU,KAAK,2BAA2B,iBAAiB,OAAK,KAAK,OAAO,kBAAkB,CAAC,GAAG,KAAK,2BAA2B,SAAS,CAAC,CAAC,CAAC,CAAC;AAAA,EACrJ;AAAA,EAZiB;AAAA,EACA,SAAS,KAAK,UAAU,IAAI,cAAsB,CAAC;AAAA,EACnD,uBAAuB,oBAAI,IAA8C;AAAA,EAY1F,MAAM,YAAkC;AACvC,WAAO,MAAM,KAAK,KAAK,2BAA2B,SAAS,CAAC;AAAA,EAC7D;AAAA,EAEA,YAAY,KAAsB,OAAgD;AACjF,WAAO,KAAK,2BAA2B;AAAA,MACtC;AAAA,MACA,CAAC,OAAOA,WAAU,KAAK,OAAO,0BAA0B,IAAI,QAAQ,OAAOA,MAAK;AAAA,MAChF;AAAA,IACD;AAAA,EACD;AAAA,EAEA,0BAA0B,QAAgB,OAAe,OAA2C;AACnG,UAAM,KAAK,KAAK,qBAAqB,IAAI,MAAM;AAC/C,QAAI,CAAC,IAAI;AACR,YAAM,IAAI,MAAM,wBAAwB,MAAM,YAAY;AAAA,IAC3D;AAEA,WAAO,GAAG,OAAO,KAAK;AAAA,EACvB;AAAA,EAEA,cAAc,MAAoB;AACjC,UAAM,aAAa,KAAK,2BAA2B;AAAA,MAClD;AAAA,MACA;AAAA,QACC,QAAQ,8BAAO,KAAK,aAAa,UAAU;AAC1C,cAAI;AACH,iBAAK,qBAAqB,IAAI,IAAI,QAAQ,WAAW;AACrD,mBAAO,MAAM,KAAK,OAAO,YAAY,KAAK,KAAK;AAAA,UAChD,UAAE;AACD,iBAAK,qBAAqB,OAAO,IAAI,MAAM;AAAA,UAC5C;AAAA,QACD,GAPQ;AAAA,MAQT;AAAA,IAAC;AACF,SAAK,OAAO,IAAI,MAAM,UAAU;AAAA,EACjC;AAAA,EAEA,gBAAgB,MAAoB;AACnC,SAAK,OAAO,iBAAiB,IAAI;AAAA,EAClC;AACD;AAxD0G;AAA7F,+BAAN;AAAA,EADN,qBAAqB,YAAY,4BAA4B;AAAA,EAS3D;AAAA,GARU;",
  "names": ["token"]
}
