{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/api/browser/mainThreadLanguageModelTools.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport type { CancellationToken } from \"../../../base/common/cancellation.js\";\nimport { MarkdownString } from \"../../../base/common/htmlContent.js\";\nimport { Disposable, DisposableMap } from \"../../../base/common/lifecycle.js\";\nimport type { ChatModel } from \"../../contrib/chat/common/chatModel.js\";\nimport {\n\tIChatService,\n\ttype IChatTask,\n} from \"../../contrib/chat/common/chatService.js\";\nimport {\n\ttype CountTokensCallback,\n\tILanguageModelToolsService,\n\ttype IToolData,\n\ttype IToolInvocation,\n\ttype IToolResult,\n} from \"../../contrib/chat/common/languageModelToolsService.js\";\nimport {\n\ttype IExtHostContext,\n\textHostNamedCustomer,\n} from \"../../services/extensions/common/extHostCustomers.js\";\nimport {\n\tExtHostContext,\n\ttype ExtHostLanguageModelToolsShape,\n\tMainContext,\n\ttype MainThreadLanguageModelToolsShape,\n} from \"../common/extHost.protocol.js\";\nimport { MainThreadChatTask } from \"./mainThreadChatAgents2.js\";\n\n@extHostNamedCustomer(MainContext.MainThreadLanguageModelTools)\nexport class MainThreadLanguageModelTools\n\textends Disposable\n\timplements MainThreadLanguageModelToolsShape\n{\n\tprivate readonly _proxy: ExtHostLanguageModelToolsShape;\n\tprivate readonly _tools = this._register(new DisposableMap<string>());\n\tprivate readonly _countTokenCallbacks = new Map<\n\t\t/* call ID */ string,\n\t\tCountTokensCallback\n\t>();\n\n\tconstructor(\n\t\textHostContext: IExtHostContext,\n\t\t@ILanguageModelToolsService\n\t\tprivate readonly _languageModelToolsService: ILanguageModelToolsService,\n\t\t@IChatService private readonly _chatService: IChatService,\n\t) {\n\t\tsuper();\n\t\tthis._proxy = extHostContext.getProxy(\n\t\t\tExtHostContext.ExtHostLanguageModelTools,\n\t\t);\n\n\t\tthis._register(\n\t\t\tthis._languageModelToolsService.onDidChangeTools((e) =>\n\t\t\t\tthis._proxy.$onDidChangeTools([\n\t\t\t\t\t...this._languageModelToolsService.getTools(),\n\t\t\t\t]),\n\t\t\t),\n\t\t);\n\t}\n\n\tasync $getTools(): Promise<IToolData[]> {\n\t\treturn Array.from(this._languageModelToolsService.getTools());\n\t}\n\n\tasync $invokeTool(\n\t\tdto: IToolInvocation,\n\t\ttoken: CancellationToken,\n\t): Promise<IToolResult> {\n\t\t// Shortcut to write to the model directly here, but could call all the way back to use the real stream.\n\t\t// TODO move this to the tools service?\n\t\tlet task: IChatTask | undefined;\n\t\tif (dto.context) {\n\t\t\tconst model = this._chatService.getSession(\n\t\t\t\tdto.context?.sessionId,\n\t\t\t) as ChatModel;\n\t\t\tconst request = model.getRequests().at(-1)!;\n\t\t\tconst tool = this._languageModelToolsService.getTool(dto.toolId);\n\t\t\ttask = new MainThreadChatTask(\n\t\t\t\tnew MarkdownString(`Using ${tool?.displayName ?? dto.toolId}`),\n\t\t\t);\n\t\t\tmodel.acceptResponseProgress(request, task);\n\t\t}\n\n\t\ttry {\n\t\t\treturn await this._languageModelToolsService.invokeTool(\n\t\t\t\tdto,\n\t\t\t\t(input, token) =>\n\t\t\t\t\tthis._proxy.$countTokensForInvocation(\n\t\t\t\t\t\tdto.callId,\n\t\t\t\t\t\tinput,\n\t\t\t\t\t\ttoken,\n\t\t\t\t\t),\n\t\t\t\ttoken,\n\t\t\t);\n\t\t} finally {\n\t\t\ttask?.complete();\n\t\t}\n\t}\n\n\t$countTokensForInvocation(\n\t\tcallId: string,\n\t\tinput: string,\n\t\ttoken: CancellationToken,\n\t): Promise<number> {\n\t\tconst fn = this._countTokenCallbacks.get(callId);\n\t\tif (!fn) {\n\t\t\tthrow new Error(`Tool invocation call ${callId} not found`);\n\t\t}\n\n\t\treturn fn(input, token);\n\t}\n\n\t$registerTool(name: string): void {\n\t\tconst disposable =\n\t\t\tthis._languageModelToolsService.registerToolImplementation(name, {\n\t\t\t\tinvoke: async (dto, countTokens, token) => {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tthis._countTokenCallbacks.set(dto.callId, countTokens);\n\t\t\t\t\t\treturn await this._proxy.$invokeTool(dto, token);\n\t\t\t\t\t} finally {\n\t\t\t\t\t\tthis._countTokenCallbacks.delete(dto.callId);\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t});\n\t\tthis._tools.set(name, disposable);\n\t}\n\n\t$unregisterTool(name: string): void {\n\t\tthis._tools.deleteAndDispose(name);\n\t}\n}\n"],
  "mappings": ";;;;;;;;;;;;AAMA,SAAS,sBAAsB;AAC/B,SAAS,YAAY,qBAAqB;AAE1C;AAAA,EACC;AAAA,OAEM;AACP;AAAA,EAEC;AAAA,OAIM;AACP;AAAA,EAEC;AAAA,OACM;AACP;AAAA,EACC;AAAA,EAEA;AAAA,OAEM;AACP,SAAS,0BAA0B;AAG5B,IAAM,+BAAN,cACE,WAET;AAAA,EAQC,YACC,gBAEiB,4BACc,cAC9B;AACD,UAAM;AAHW;AACc;AAG/B,SAAK,SAAS,eAAe;AAAA,MAC5B,eAAe;AAAA,IAChB;AAEA,SAAK;AAAA,MACJ,KAAK,2BAA2B;AAAA,QAAiB,CAAC,MACjD,KAAK,OAAO,kBAAkB;AAAA,UAC7B,GAAG,KAAK,2BAA2B,SAAS;AAAA,QAC7C,CAAC;AAAA,MACF;AAAA,IACD;AAAA,EACD;AAAA,EAzBiB;AAAA,EACA,SAAS,KAAK,UAAU,IAAI,cAAsB,CAAC;AAAA,EACnD,uBAAuB,oBAAI,IAG1C;AAAA,EAsBF,MAAM,YAAkC;AACvC,WAAO,MAAM,KAAK,KAAK,2BAA2B,SAAS,CAAC;AAAA,EAC7D;AAAA,EAEA,MAAM,YACL,KACA,OACuB;AAGvB,QAAI;AACJ,QAAI,IAAI,SAAS;AAChB,YAAM,QAAQ,KAAK,aAAa;AAAA,QAC/B,IAAI,SAAS;AAAA,MACd;AACA,YAAM,UAAU,MAAM,YAAY,EAAE,GAAG,EAAE;AACzC,YAAM,OAAO,KAAK,2BAA2B,QAAQ,IAAI,MAAM;AAC/D,aAAO,IAAI;AAAA,QACV,IAAI,eAAe,SAAS,MAAM,eAAe,IAAI,MAAM,EAAE;AAAA,MAC9D;AACA,YAAM,uBAAuB,SAAS,IAAI;AAAA,IAC3C;AAEA,QAAI;AACH,aAAO,MAAM,KAAK,2BAA2B;AAAA,QAC5C;AAAA,QACA,CAAC,OAAOA,WACP,KAAK,OAAO;AAAA,UACX,IAAI;AAAA,UACJ;AAAA,UACAA;AAAA,QACD;AAAA,QACD;AAAA,MACD;AAAA,IACD,UAAE;AACD,YAAM,SAAS;AAAA,IAChB;AAAA,EACD;AAAA,EAEA,0BACC,QACA,OACA,OACkB;AAClB,UAAM,KAAK,KAAK,qBAAqB,IAAI,MAAM;AAC/C,QAAI,CAAC,IAAI;AACR,YAAM,IAAI,MAAM,wBAAwB,MAAM,YAAY;AAAA,IAC3D;AAEA,WAAO,GAAG,OAAO,KAAK;AAAA,EACvB;AAAA,EAEA,cAAc,MAAoB;AACjC,UAAM,aACL,KAAK,2BAA2B,2BAA2B,MAAM;AAAA,MAChE,QAAQ,8BAAO,KAAK,aAAa,UAAU;AAC1C,YAAI;AACH,eAAK,qBAAqB,IAAI,IAAI,QAAQ,WAAW;AACrD,iBAAO,MAAM,KAAK,OAAO,YAAY,KAAK,KAAK;AAAA,QAChD,UAAE;AACD,eAAK,qBAAqB,OAAO,IAAI,MAAM;AAAA,QAC5C;AAAA,MACD,GAPQ;AAAA,IAQT,CAAC;AACF,SAAK,OAAO,IAAI,MAAM,UAAU;AAAA,EACjC;AAAA,EAEA,gBAAgB,MAAoB;AACnC,SAAK,OAAO,iBAAiB,IAAI;AAAA,EAClC;AACD;AAlGA;AAHa,+BAAN;AAAA,EADN,qBAAqB,YAAY,4BAA4B;AAAA,EAc3D;AAAA,EAEA;AAAA,GAfU;",
  "names": ["token"]
}
