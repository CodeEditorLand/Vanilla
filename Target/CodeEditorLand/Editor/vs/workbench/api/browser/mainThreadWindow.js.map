{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/api/browser/mainThreadWindow.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Event } from '../../../base/common/event.js';\nimport { DisposableStore } from '../../../base/common/lifecycle.js';\nimport { URI, UriComponents } from '../../../base/common/uri.js';\nimport { IOpenerService } from '../../../platform/opener/common/opener.js';\nimport { extHostNamedCustomer, IExtHostContext } from '../../services/extensions/common/extHostCustomers.js';\nimport { ExtHostContext, ExtHostWindowShape, IOpenUriOptions, MainContext, MainThreadWindowShape } from '../common/extHost.protocol.js';\nimport { IHostService } from '../../services/host/browser/host.js';\nimport { IUserActivityService } from '../../services/userActivity/common/userActivityService.js';\n\n@extHostNamedCustomer(MainContext.MainThreadWindow)\nexport class MainThreadWindow implements MainThreadWindowShape {\n\n\tprivate readonly proxy: ExtHostWindowShape;\n\tprivate readonly disposables = new DisposableStore();\n\n\tconstructor(\n\t\textHostContext: IExtHostContext,\n\t\t@IHostService private readonly hostService: IHostService,\n\t\t@IOpenerService private readonly openerService: IOpenerService,\n\t\t@IUserActivityService private readonly userActivityService: IUserActivityService,\n\t) {\n\t\tthis.proxy = extHostContext.getProxy(ExtHostContext.ExtHostWindow);\n\n\t\tEvent.latch(hostService.onDidChangeFocus)\n\t\t\t(this.proxy.$onDidChangeWindowFocus, this.proxy, this.disposables);\n\t\tuserActivityService.onDidChangeIsActive(this.proxy.$onDidChangeWindowActive, this.proxy, this.disposables);\n\t}\n\n\tdispose(): void {\n\t\tthis.disposables.dispose();\n\t}\n\n\t$getInitialState() {\n\t\treturn Promise.resolve({\n\t\t\tisFocused: this.hostService.hasFocus,\n\t\t\tisActive: this.userActivityService.isActive,\n\t\t});\n\t}\n\n\tasync $openUri(uriComponents: UriComponents, uriString: string | undefined, options: IOpenUriOptions): Promise<boolean> {\n\t\tconst uri = URI.from(uriComponents);\n\t\tlet target: URI | string;\n\t\tif (uriString && URI.parse(uriString).toString() === uri.toString()) {\n\t\t\t// called with string and no transformation happened -> keep string\n\t\t\ttarget = uriString;\n\t\t} else {\n\t\t\t// called with URI or transformed -> use uri\n\t\t\ttarget = uri;\n\t\t}\n\t\treturn this.openerService.open(target, {\n\t\t\topenExternal: true,\n\t\t\tallowTunneling: options.allowTunneling,\n\t\t\tallowContributedOpeners: options.allowContributedOpeners,\n\t\t});\n\t}\n\n\tasync $asExternalUri(uriComponents: UriComponents, options: IOpenUriOptions): Promise<UriComponents> {\n\t\tconst result = await this.openerService.resolveExternalUri(URI.revive(uriComponents), options);\n\t\treturn result.resolved;\n\t}\n}\n"],
  "mappings": ";;;;;;;;;;;;AAKA,SAAS,aAAa;AACtB,SAAS,uBAAuB;AAChC,SAAS,KAAK,qBAAqB;AACnC,SAAS,sBAAsB;AAC/B,SAAS,sBAAsB,uBAAuB;AACtD,SAAS,gBAAgB,oBAAoB,iBAAiB,aAAa,6BAA6B;AACxG,SAAS,oBAAoB;AAC7B,SAAS,4BAA4B;AAG9B,IAAM,mBAAN,MAAwD;AAAA,EAK9D,YACC,gBAC+B,aACE,eACM,qBACtC;AAH8B;AACE;AACM;AAEvC,SAAK,QAAQ,eAAe,SAAS,eAAe,aAAa;AAEjE,UAAM,MAAM,YAAY,gBAAgB,EACtC,KAAK,MAAM,yBAAyB,KAAK,OAAO,KAAK,WAAW;AAClE,wBAAoB,oBAAoB,KAAK,MAAM,0BAA0B,KAAK,OAAO,KAAK,WAAW;AAAA,EAC1G;AAAA,EAdiB;AAAA,EACA,cAAc,IAAI,gBAAgB;AAAA,EAenD,UAAgB;AACf,SAAK,YAAY,QAAQ;AAAA,EAC1B;AAAA,EAEA,mBAAmB;AAClB,WAAO,QAAQ,QAAQ;AAAA,MACtB,WAAW,KAAK,YAAY;AAAA,MAC5B,UAAU,KAAK,oBAAoB;AAAA,IACpC,CAAC;AAAA,EACF;AAAA,EAEA,MAAM,SAAS,eAA8B,WAA+B,SAA4C;AACvH,UAAM,MAAM,IAAI,KAAK,aAAa;AAClC,QAAI;AACJ,QAAI,aAAa,IAAI,MAAM,SAAS,EAAE,SAAS,MAAM,IAAI,SAAS,GAAG;AAEpE,eAAS;AAAA,IACV,OAAO;AAEN,eAAS;AAAA,IACV;AACA,WAAO,KAAK,cAAc,KAAK,QAAQ;AAAA,MACtC,cAAc;AAAA,MACd,gBAAgB,QAAQ;AAAA,MACxB,yBAAyB,QAAQ;AAAA,IAClC,CAAC;AAAA,EACF;AAAA,EAEA,MAAM,eAAe,eAA8B,SAAkD;AACpG,UAAM,SAAS,MAAM,KAAK,cAAc,mBAAmB,IAAI,OAAO,aAAa,GAAG,OAAO;AAC7F,WAAO,OAAO;AAAA,EACf;AACD;AAlD+D;AAAlD,mBAAN;AAAA,EADN,qBAAqB,YAAY,gBAAgB;AAAA,EAQ/C;AAAA,EACA;AAAA,EACA;AAAA,GATU;",
  "names": []
}
