{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/api/browser/mainThreadTunnelService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as nls from '../../../nls.js';\nimport { MainThreadTunnelServiceShape, MainContext, ExtHostContext, ExtHostTunnelServiceShape, CandidatePortSource, PortAttributesSelector, TunnelDto } from '../common/extHost.protocol.js';\nimport { TunnelDtoConverter } from '../common/extHostTunnelService.js';\nimport { extHostNamedCustomer, IExtHostContext } from '../../services/extensions/common/extHostCustomers.js';\nimport { IRemoteExplorerService, PORT_AUTO_FORWARD_SETTING, PORT_AUTO_SOURCE_SETTING, PORT_AUTO_SOURCE_SETTING_HYBRID, PORT_AUTO_SOURCE_SETTING_OUTPUT } from '../../services/remote/common/remoteExplorerService.js';\nimport { ITunnelProvider, ITunnelService, TunnelCreationOptions, TunnelProviderFeatures, TunnelOptions, RemoteTunnel, ProvidedPortAttributes, PortAttributesProvider, TunnelProtocol } from '../../../platform/tunnel/common/tunnel.js';\nimport { Disposable } from '../../../base/common/lifecycle.js';\nimport type { TunnelDescription } from '../../../platform/remote/common/remoteAuthorityResolver.js';\nimport { INotificationService, Severity } from '../../../platform/notification/common/notification.js';\nimport { IConfigurationService } from '../../../platform/configuration/common/configuration.js';\nimport { ILogService } from '../../../platform/log/common/log.js';\nimport { IRemoteAgentService } from '../../services/remote/common/remoteAgentService.js';\nimport { CancellationToken } from '../../../base/common/cancellation.js';\nimport { Registry } from '../../../platform/registry/common/platform.js';\nimport { IConfigurationRegistry, Extensions as ConfigurationExtensions } from '../../../platform/configuration/common/configurationRegistry.js';\nimport { IContextKeyService } from '../../../platform/contextkey/common/contextkey.js';\nimport { CandidatePort, TunnelCloseReason, TunnelSource, forwardedPortsViewEnabled, makeAddress } from '../../services/remote/common/tunnelModel.js';\n\n@extHostNamedCustomer(MainContext.MainThreadTunnelService)\nexport class MainThreadTunnelService extends Disposable implements MainThreadTunnelServiceShape, PortAttributesProvider {\n\tprivate readonly _proxy: ExtHostTunnelServiceShape;\n\tprivate elevateionRetry: boolean = false;\n\tprivate portsAttributesProviders: Map<number, PortAttributesSelector> = new Map();\n\n\tconstructor(\n\t\textHostContext: IExtHostContext,\n\t\t@IRemoteExplorerService private readonly remoteExplorerService: IRemoteExplorerService,\n\t\t@ITunnelService private readonly tunnelService: ITunnelService,\n\t\t@INotificationService private readonly notificationService: INotificationService,\n\t\t@IConfigurationService private readonly configurationService: IConfigurationService,\n\t\t@ILogService private readonly logService: ILogService,\n\t\t@IRemoteAgentService private readonly remoteAgentService: IRemoteAgentService,\n\t\t@IContextKeyService private readonly contextKeyService: IContextKeyService\n\t) {\n\t\tsuper();\n\t\tthis._proxy = extHostContext.getProxy(ExtHostContext.ExtHostTunnelService);\n\t\tthis._register(tunnelService.onTunnelOpened(() => this._proxy.$onDidTunnelsChange()));\n\t\tthis._register(tunnelService.onTunnelClosed(() => this._proxy.$onDidTunnelsChange()));\n\t}\n\n\tprivate processFindingEnabled(): boolean {\n\t\treturn (!!this.configurationService.getValue(PORT_AUTO_FORWARD_SETTING) || this.tunnelService.hasTunnelProvider)\n\t\t\t&& (this.configurationService.getValue(PORT_AUTO_SOURCE_SETTING) !== PORT_AUTO_SOURCE_SETTING_OUTPUT);\n\t}\n\n\tasync $setRemoteTunnelService(processId: number): Promise<void> {\n\t\tthis.remoteExplorerService.namedProcesses.set(processId, 'Code Extension Host');\n\t\tif (this.remoteExplorerService.portsFeaturesEnabled) {\n\t\t\tthis._proxy.$registerCandidateFinder(this.processFindingEnabled());\n\t\t} else {\n\t\t\tthis._register(this.remoteExplorerService.onEnabledPortsFeatures(() => this._proxy.$registerCandidateFinder(this.processFindingEnabled())));\n\t\t}\n\t\tthis._register(this.configurationService.onDidChangeConfiguration(async (e) => {\n\t\t\tif (this.remoteExplorerService.portsFeaturesEnabled && (e.affectsConfiguration(PORT_AUTO_FORWARD_SETTING) || e.affectsConfiguration(PORT_AUTO_SOURCE_SETTING))) {\n\t\t\t\treturn this._proxy.$registerCandidateFinder(this.processFindingEnabled());\n\t\t\t}\n\t\t}));\n\t\tthis._register(this.tunnelService.onAddedTunnelProvider(async () => {\n\t\t\tif (this.remoteExplorerService.portsFeaturesEnabled) {\n\t\t\t\treturn this._proxy.$registerCandidateFinder(this.processFindingEnabled());\n\t\t\t}\n\t\t}));\n\t}\n\n\tprivate _alreadyRegistered: boolean = false;\n\tasync $registerPortsAttributesProvider(selector: PortAttributesSelector, providerHandle: number): Promise<void> {\n\t\tthis.portsAttributesProviders.set(providerHandle, selector);\n\t\tif (!this._alreadyRegistered) {\n\t\t\tthis.remoteExplorerService.tunnelModel.addAttributesProvider(this);\n\t\t\tthis._alreadyRegistered = true;\n\t\t}\n\t}\n\n\tasync $unregisterPortsAttributesProvider(providerHandle: number): Promise<void> {\n\t\tthis.portsAttributesProviders.delete(providerHandle);\n\t}\n\n\tasync providePortAttributes(ports: number[], pid: number | undefined, commandLine: string | undefined, token: CancellationToken): Promise<ProvidedPortAttributes[]> {\n\t\tif (this.portsAttributesProviders.size === 0) {\n\t\t\treturn [];\n\t\t}\n\n\t\t// Check all the selectors to make sure it's worth going to the extension host.\n\t\tconst appropriateHandles = Array.from(this.portsAttributesProviders.entries()).filter(entry => {\n\t\t\tconst selector = entry[1];\n\t\t\tconst portRange = (typeof selector.portRange === 'number') ? [selector.portRange, selector.portRange + 1] : selector.portRange;\n\t\t\tconst portInRange = portRange ? ports.some(port => portRange[0] <= port && port < portRange[1]) : true;\n\t\t\tconst commandMatches = !selector.commandPattern || (commandLine && (commandLine.match(selector.commandPattern)));\n\t\t\treturn portInRange && commandMatches;\n\t\t}).map(entry => entry[0]);\n\n\t\tif (appropriateHandles.length === 0) {\n\t\t\treturn [];\n\t\t}\n\t\treturn this._proxy.$providePortAttributes(appropriateHandles, ports, pid, commandLine, token);\n\t}\n\n\tasync $openTunnel(tunnelOptions: TunnelOptions, source: string): Promise<TunnelDto | undefined> {\n\t\tconst tunnel = await this.remoteExplorerService.forward({\n\t\t\tremote: tunnelOptions.remoteAddress,\n\t\t\tlocal: tunnelOptions.localAddressPort,\n\t\t\tname: tunnelOptions.label,\n\t\t\tsource: {\n\t\t\t\tsource: TunnelSource.Extension,\n\t\t\t\tdescription: source\n\t\t\t},\n\t\t\televateIfNeeded: false\n\t\t});\n\t\tif (!tunnel || (typeof tunnel === 'string')) {\n\t\t\treturn undefined;\n\t\t}\n\t\tif (!this.elevateionRetry\n\t\t\t&& (tunnelOptions.localAddressPort !== undefined)\n\t\t\t&& (tunnel.tunnelLocalPort !== undefined)\n\t\t\t&& this.tunnelService.isPortPrivileged(tunnelOptions.localAddressPort)\n\t\t\t&& (tunnel.tunnelLocalPort !== tunnelOptions.localAddressPort)\n\t\t\t&& this.tunnelService.canElevate) {\n\n\t\t\tthis.elevationPrompt(tunnelOptions, tunnel, source);\n\t\t}\n\t\treturn TunnelDtoConverter.fromServiceTunnel(tunnel);\n\t}\n\n\tprivate async elevationPrompt(tunnelOptions: TunnelOptions, tunnel: RemoteTunnel, source: string) {\n\t\treturn this.notificationService.prompt(Severity.Info,\n\t\t\tnls.localize('remote.tunnel.openTunnel', \"The extension {0} has forwarded port {1}. You'll need to run as superuser to use port {2} locally.\", source, tunnelOptions.remoteAddress.port, tunnelOptions.localAddressPort),\n\t\t\t[{\n\t\t\t\tlabel: nls.localize('remote.tunnelsView.elevationButton', \"Use Port {0} as Sudo...\", tunnel.tunnelRemotePort),\n\t\t\t\trun: async () => {\n\t\t\t\t\tthis.elevateionRetry = true;\n\t\t\t\t\tawait this.remoteExplorerService.close({ host: tunnel.tunnelRemoteHost, port: tunnel.tunnelRemotePort }, TunnelCloseReason.Other);\n\t\t\t\t\tawait this.remoteExplorerService.forward({\n\t\t\t\t\t\tremote: tunnelOptions.remoteAddress,\n\t\t\t\t\t\tlocal: tunnelOptions.localAddressPort,\n\t\t\t\t\t\tname: tunnelOptions.label,\n\t\t\t\t\t\tsource: {\n\t\t\t\t\t\t\tsource: TunnelSource.Extension,\n\t\t\t\t\t\t\tdescription: source\n\t\t\t\t\t\t},\n\t\t\t\t\t\televateIfNeeded: true\n\t\t\t\t\t});\n\t\t\t\t\tthis.elevateionRetry = false;\n\t\t\t\t}\n\t\t\t}]);\n\t}\n\n\tasync $closeTunnel(remote: { host: string; port: number }): Promise<void> {\n\t\treturn this.remoteExplorerService.close(remote, TunnelCloseReason.Other);\n\t}\n\n\tasync $getTunnels(): Promise<TunnelDescription[]> {\n\t\treturn (await this.tunnelService.tunnels).map(tunnel => {\n\t\t\treturn {\n\t\t\t\tremoteAddress: { port: tunnel.tunnelRemotePort, host: tunnel.tunnelRemoteHost },\n\t\t\t\tlocalAddress: tunnel.localAddress,\n\t\t\t\tprivacy: tunnel.privacy,\n\t\t\t\tprotocol: tunnel.protocol\n\t\t\t};\n\t\t});\n\t}\n\n\tasync $onFoundNewCandidates(candidates: CandidatePort[]): Promise<void> {\n\t\tthis.remoteExplorerService.onFoundNewCandidates(candidates);\n\t}\n\n\tasync $setTunnelProvider(features?: TunnelProviderFeatures): Promise<void> {\n\t\tconst tunnelProvider: ITunnelProvider = {\n\t\t\tforwardPort: (tunnelOptions: TunnelOptions, tunnelCreationOptions: TunnelCreationOptions) => {\n\t\t\t\tconst forward = this._proxy.$forwardPort(tunnelOptions, tunnelCreationOptions);\n\t\t\t\treturn forward.then(tunnelOrError => {\n\t\t\t\t\tif (!tunnelOrError) {\n\t\t\t\t\t\treturn undefined;\n\t\t\t\t\t} else if (typeof tunnelOrError === 'string') {\n\t\t\t\t\t\treturn tunnelOrError;\n\t\t\t\t\t}\n\t\t\t\t\tconst tunnel = tunnelOrError;\n\t\t\t\t\tthis.logService.trace(`ForwardedPorts: (MainThreadTunnelService) New tunnel established by tunnel provider: ${tunnel?.remoteAddress.host}:${tunnel?.remoteAddress.port}`);\n\n\t\t\t\t\treturn {\n\t\t\t\t\t\ttunnelRemotePort: tunnel.remoteAddress.port,\n\t\t\t\t\t\ttunnelRemoteHost: tunnel.remoteAddress.host,\n\t\t\t\t\t\tlocalAddress: typeof tunnel.localAddress === 'string' ? tunnel.localAddress : makeAddress(tunnel.localAddress.host, tunnel.localAddress.port),\n\t\t\t\t\t\ttunnelLocalPort: typeof tunnel.localAddress !== 'string' ? tunnel.localAddress.port : undefined,\n\t\t\t\t\t\tpublic: tunnel.public,\n\t\t\t\t\t\tprivacy: tunnel.privacy,\n\t\t\t\t\t\tprotocol: tunnel.protocol ?? TunnelProtocol.Http,\n\t\t\t\t\t\tdispose: async (silent?: boolean) => {\n\t\t\t\t\t\t\tthis.logService.trace(`ForwardedPorts: (MainThreadTunnelService) Closing tunnel from tunnel provider: ${tunnel?.remoteAddress.host}:${tunnel?.remoteAddress.port}`);\n\t\t\t\t\t\t\treturn this._proxy.$closeTunnel({ host: tunnel.remoteAddress.host, port: tunnel.remoteAddress.port }, silent);\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t});\n\t\t\t}\n\t\t};\n\t\tif (features) {\n\t\t\tthis.tunnelService.setTunnelFeatures(features);\n\t\t}\n\t\tthis.tunnelService.setTunnelProvider(tunnelProvider);\n\t\t// At this point we clearly want the ports view/features since we have a tunnel factory\n\t\tthis.contextKeyService.createKey(forwardedPortsViewEnabled.key, true);\n\t}\n\n\tasync $setCandidateFilter(): Promise<void> {\n\t\tthis.remoteExplorerService.setCandidateFilter((candidates: CandidatePort[]): Promise<CandidatePort[]> => {\n\t\t\treturn this._proxy.$applyCandidateFilter(candidates);\n\t\t});\n\t}\n\n\tasync $setCandidatePortSource(source: CandidatePortSource): Promise<void> {\n\t\t// Must wait for the remote environment before trying to set settings there.\n\t\tthis.remoteAgentService.getEnvironment().then(() => {\n\t\t\tswitch (source) {\n\t\t\t\tcase CandidatePortSource.None: {\n\t\t\t\t\tRegistry.as<IConfigurationRegistry>(ConfigurationExtensions.Configuration)\n\t\t\t\t\t\t.registerDefaultConfigurations([{ overrides: { 'remote.autoForwardPorts': false } }]);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcase CandidatePortSource.Output: {\n\t\t\t\t\tRegistry.as<IConfigurationRegistry>(ConfigurationExtensions.Configuration)\n\t\t\t\t\t\t.registerDefaultConfigurations([{ overrides: { 'remote.autoForwardPortsSource': PORT_AUTO_SOURCE_SETTING_OUTPUT } }]);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcase CandidatePortSource.Hybrid: {\n\t\t\t\t\tRegistry.as<IConfigurationRegistry>(ConfigurationExtensions.Configuration)\n\t\t\t\t\t\t.registerDefaultConfigurations([{ overrides: { 'remote.autoForwardPortsSource': PORT_AUTO_SOURCE_SETTING_HYBRID } }]);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tdefault: // Do nothing, the defaults for these settings should be used.\n\t\t\t}\n\t\t}).catch(() => {\n\t\t\t// The remote failed to get setup. Errors from that area will already be surfaced to the user.\n\t\t});\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
