{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/api/browser/mainThreadTunnelService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport type { CancellationToken } from \"../../../base/common/cancellation.js\";\nimport { Disposable } from \"../../../base/common/lifecycle.js\";\nimport * as nls from \"../../../nls.js\";\nimport { IConfigurationService } from \"../../../platform/configuration/common/configuration.js\";\nimport {\n\tExtensions as ConfigurationExtensions,\n\ttype IConfigurationRegistry,\n} from \"../../../platform/configuration/common/configurationRegistry.js\";\nimport { IContextKeyService } from \"../../../platform/contextkey/common/contextkey.js\";\nimport { ILogService } from \"../../../platform/log/common/log.js\";\nimport {\n\tINotificationService,\n\tSeverity,\n} from \"../../../platform/notification/common/notification.js\";\nimport { Registry } from \"../../../platform/registry/common/platform.js\";\nimport type { TunnelDescription } from \"../../../platform/remote/common/remoteAuthorityResolver.js\";\nimport {\n\ttype ITunnelProvider,\n\tITunnelService,\n\ttype PortAttributesProvider,\n\ttype ProvidedPortAttributes,\n\ttype RemoteTunnel,\n\ttype TunnelCreationOptions,\n\ttype TunnelOptions,\n\tTunnelProtocol,\n\ttype TunnelProviderFeatures,\n} from \"../../../platform/tunnel/common/tunnel.js\";\nimport {\n\ttype IExtHostContext,\n\textHostNamedCustomer,\n} from \"../../services/extensions/common/extHostCustomers.js\";\nimport { IRemoteAgentService } from \"../../services/remote/common/remoteAgentService.js\";\nimport {\n\tIRemoteExplorerService,\n\tPORT_AUTO_FORWARD_SETTING,\n\tPORT_AUTO_SOURCE_SETTING,\n\tPORT_AUTO_SOURCE_SETTING_HYBRID,\n\tPORT_AUTO_SOURCE_SETTING_OUTPUT,\n} from \"../../services/remote/common/remoteExplorerService.js\";\nimport {\n\ttype CandidatePort,\n\tTunnelCloseReason,\n\tTunnelSource,\n\tforwardedPortsViewEnabled,\n\tmakeAddress,\n} from \"../../services/remote/common/tunnelModel.js\";\nimport {\n\tCandidatePortSource,\n\tExtHostContext,\n\ttype ExtHostTunnelServiceShape,\n\tMainContext,\n\ttype MainThreadTunnelServiceShape,\n\ttype PortAttributesSelector,\n\ttype TunnelDto,\n} from \"../common/extHost.protocol.js\";\nimport { TunnelDtoConverter } from \"../common/extHostTunnelService.js\";\n\n@extHostNamedCustomer(MainContext.MainThreadTunnelService)\nexport class MainThreadTunnelService\n\textends Disposable\n\timplements MainThreadTunnelServiceShape, PortAttributesProvider\n{\n\tprivate readonly _proxy: ExtHostTunnelServiceShape;\n\tprivate elevateionRetry = false;\n\tprivate portsAttributesProviders: Map<number, PortAttributesSelector> =\n\t\tnew Map();\n\n\tconstructor(\n\t\textHostContext: IExtHostContext,\n\t\t@IRemoteExplorerService\n\t\tprivate readonly remoteExplorerService: IRemoteExplorerService,\n\t\t@ITunnelService private readonly tunnelService: ITunnelService,\n\t\t@INotificationService\n\t\tprivate readonly notificationService: INotificationService,\n\t\t@IConfigurationService\n\t\tprivate readonly configurationService: IConfigurationService,\n\t\t@ILogService private readonly logService: ILogService,\n\t\t@IRemoteAgentService\n\t\tprivate readonly remoteAgentService: IRemoteAgentService,\n\t\t@IContextKeyService\n\t\tprivate readonly contextKeyService: IContextKeyService,\n\t) {\n\t\tsuper();\n\t\tthis._proxy = extHostContext.getProxy(\n\t\t\tExtHostContext.ExtHostTunnelService,\n\t\t);\n\t\tthis._register(\n\t\t\ttunnelService.onTunnelOpened(() =>\n\t\t\t\tthis._proxy.$onDidTunnelsChange(),\n\t\t\t),\n\t\t);\n\t\tthis._register(\n\t\t\ttunnelService.onTunnelClosed(() =>\n\t\t\t\tthis._proxy.$onDidTunnelsChange(),\n\t\t\t),\n\t\t);\n\t}\n\n\tprivate processFindingEnabled(): boolean {\n\t\treturn (\n\t\t\t(!!this.configurationService.getValue(PORT_AUTO_FORWARD_SETTING) ||\n\t\t\t\tthis.tunnelService.hasTunnelProvider) &&\n\t\t\tthis.configurationService.getValue(PORT_AUTO_SOURCE_SETTING) !==\n\t\t\t\tPORT_AUTO_SOURCE_SETTING_OUTPUT\n\t\t);\n\t}\n\n\tasync $setRemoteTunnelService(processId: number): Promise<void> {\n\t\tthis.remoteExplorerService.namedProcesses.set(\n\t\t\tprocessId,\n\t\t\t\"Code Extension Host\",\n\t\t);\n\t\tif (this.remoteExplorerService.portsFeaturesEnabled) {\n\t\t\tthis._proxy.$registerCandidateFinder(this.processFindingEnabled());\n\t\t} else {\n\t\t\tthis._register(\n\t\t\t\tthis.remoteExplorerService.onEnabledPortsFeatures(() =>\n\t\t\t\t\tthis._proxy.$registerCandidateFinder(\n\t\t\t\t\t\tthis.processFindingEnabled(),\n\t\t\t\t\t),\n\t\t\t\t),\n\t\t\t);\n\t\t}\n\t\tthis._register(\n\t\t\tthis.configurationService.onDidChangeConfiguration(async (e) => {\n\t\t\t\tif (\n\t\t\t\t\tthis.remoteExplorerService.portsFeaturesEnabled &&\n\t\t\t\t\t(e.affectsConfiguration(PORT_AUTO_FORWARD_SETTING) ||\n\t\t\t\t\t\te.affectsConfiguration(PORT_AUTO_SOURCE_SETTING))\n\t\t\t\t) {\n\t\t\t\t\treturn this._proxy.$registerCandidateFinder(\n\t\t\t\t\t\tthis.processFindingEnabled(),\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}),\n\t\t);\n\t\tthis._register(\n\t\t\tthis.tunnelService.onAddedTunnelProvider(async () => {\n\t\t\t\tif (this.remoteExplorerService.portsFeaturesEnabled) {\n\t\t\t\t\treturn this._proxy.$registerCandidateFinder(\n\t\t\t\t\t\tthis.processFindingEnabled(),\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}),\n\t\t);\n\t}\n\n\tprivate _alreadyRegistered = false;\n\tasync $registerPortsAttributesProvider(\n\t\tselector: PortAttributesSelector,\n\t\tproviderHandle: number,\n\t): Promise<void> {\n\t\tthis.portsAttributesProviders.set(providerHandle, selector);\n\t\tif (!this._alreadyRegistered) {\n\t\t\tthis.remoteExplorerService.tunnelModel.addAttributesProvider(this);\n\t\t\tthis._alreadyRegistered = true;\n\t\t}\n\t}\n\n\tasync $unregisterPortsAttributesProvider(\n\t\tproviderHandle: number,\n\t): Promise<void> {\n\t\tthis.portsAttributesProviders.delete(providerHandle);\n\t}\n\n\tasync providePortAttributes(\n\t\tports: number[],\n\t\tpid: number | undefined,\n\t\tcommandLine: string | undefined,\n\t\ttoken: CancellationToken,\n\t): Promise<ProvidedPortAttributes[]> {\n\t\tif (this.portsAttributesProviders.size === 0) {\n\t\t\treturn [];\n\t\t}\n\n\t\t// Check all the selectors to make sure it's worth going to the extension host.\n\t\tconst appropriateHandles = Array.from(\n\t\t\tthis.portsAttributesProviders.entries(),\n\t\t)\n\t\t\t.filter((entry) => {\n\t\t\t\tconst selector = entry[1];\n\t\t\t\tconst portRange =\n\t\t\t\t\ttypeof selector.portRange === \"number\"\n\t\t\t\t\t\t? [selector.portRange, selector.portRange + 1]\n\t\t\t\t\t\t: selector.portRange;\n\t\t\t\tconst portInRange = portRange\n\t\t\t\t\t? ports.some(\n\t\t\t\t\t\t\t(port) =>\n\t\t\t\t\t\t\t\tportRange[0] <= port && port < portRange[1],\n\t\t\t\t\t\t)\n\t\t\t\t\t: true;\n\t\t\t\tconst commandMatches =\n\t\t\t\t\t!selector.commandPattern ||\n\t\t\t\t\t(commandLine && commandLine.match(selector.commandPattern));\n\t\t\t\treturn portInRange && commandMatches;\n\t\t\t})\n\t\t\t.map((entry) => entry[0]);\n\n\t\tif (appropriateHandles.length === 0) {\n\t\t\treturn [];\n\t\t}\n\t\treturn this._proxy.$providePortAttributes(\n\t\t\tappropriateHandles,\n\t\t\tports,\n\t\t\tpid,\n\t\t\tcommandLine,\n\t\t\ttoken,\n\t\t);\n\t}\n\n\tasync $openTunnel(\n\t\ttunnelOptions: TunnelOptions,\n\t\tsource: string,\n\t): Promise<TunnelDto | undefined> {\n\t\tconst tunnel = await this.remoteExplorerService.forward({\n\t\t\tremote: tunnelOptions.remoteAddress,\n\t\t\tlocal: tunnelOptions.localAddressPort,\n\t\t\tname: tunnelOptions.label,\n\t\t\tsource: {\n\t\t\t\tsource: TunnelSource.Extension,\n\t\t\t\tdescription: source,\n\t\t\t},\n\t\t\televateIfNeeded: false,\n\t\t});\n\t\tif (!tunnel || typeof tunnel === \"string\") {\n\t\t\treturn undefined;\n\t\t}\n\t\tif (\n\t\t\t!this.elevateionRetry &&\n\t\t\ttunnelOptions.localAddressPort !== undefined &&\n\t\t\ttunnel.tunnelLocalPort !== undefined &&\n\t\t\tthis.tunnelService.isPortPrivileged(\n\t\t\t\ttunnelOptions.localAddressPort,\n\t\t\t) &&\n\t\t\ttunnel.tunnelLocalPort !== tunnelOptions.localAddressPort &&\n\t\t\tthis.tunnelService.canElevate\n\t\t) {\n\t\t\tthis.elevationPrompt(tunnelOptions, tunnel, source);\n\t\t}\n\t\treturn TunnelDtoConverter.fromServiceTunnel(tunnel);\n\t}\n\n\tprivate async elevationPrompt(\n\t\ttunnelOptions: TunnelOptions,\n\t\ttunnel: RemoteTunnel,\n\t\tsource: string,\n\t) {\n\t\treturn this.notificationService.prompt(\n\t\t\tSeverity.Info,\n\t\t\tnls.localize(\n\t\t\t\t\"remote.tunnel.openTunnel\",\n\t\t\t\t\"The extension {0} has forwarded port {1}. You'll need to run as superuser to use port {2} locally.\",\n\t\t\t\tsource,\n\t\t\t\ttunnelOptions.remoteAddress.port,\n\t\t\t\ttunnelOptions.localAddressPort,\n\t\t\t),\n\t\t\t[\n\t\t\t\t{\n\t\t\t\t\tlabel: nls.localize(\n\t\t\t\t\t\t\"remote.tunnelsView.elevationButton\",\n\t\t\t\t\t\t\"Use Port {0} as Sudo...\",\n\t\t\t\t\t\ttunnel.tunnelRemotePort,\n\t\t\t\t\t),\n\t\t\t\t\trun: async () => {\n\t\t\t\t\t\tthis.elevateionRetry = true;\n\t\t\t\t\t\tawait this.remoteExplorerService.close(\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\thost: tunnel.tunnelRemoteHost,\n\t\t\t\t\t\t\t\tport: tunnel.tunnelRemotePort,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tTunnelCloseReason.Other,\n\t\t\t\t\t\t);\n\t\t\t\t\t\tawait this.remoteExplorerService.forward({\n\t\t\t\t\t\t\tremote: tunnelOptions.remoteAddress,\n\t\t\t\t\t\t\tlocal: tunnelOptions.localAddressPort,\n\t\t\t\t\t\t\tname: tunnelOptions.label,\n\t\t\t\t\t\t\tsource: {\n\t\t\t\t\t\t\t\tsource: TunnelSource.Extension,\n\t\t\t\t\t\t\t\tdescription: source,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\televateIfNeeded: true,\n\t\t\t\t\t\t});\n\t\t\t\t\t\tthis.elevateionRetry = false;\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t],\n\t\t);\n\t}\n\n\tasync $closeTunnel(remote: { host: string; port: number }): Promise<void> {\n\t\treturn this.remoteExplorerService.close(\n\t\t\tremote,\n\t\t\tTunnelCloseReason.Other,\n\t\t);\n\t}\n\n\tasync $getTunnels(): Promise<TunnelDescription[]> {\n\t\treturn (await this.tunnelService.tunnels).map((tunnel) => {\n\t\t\treturn {\n\t\t\t\tremoteAddress: {\n\t\t\t\t\tport: tunnel.tunnelRemotePort,\n\t\t\t\t\thost: tunnel.tunnelRemoteHost,\n\t\t\t\t},\n\t\t\t\tlocalAddress: tunnel.localAddress,\n\t\t\t\tprivacy: tunnel.privacy,\n\t\t\t\tprotocol: tunnel.protocol,\n\t\t\t};\n\t\t});\n\t}\n\n\tasync $onFoundNewCandidates(candidates: CandidatePort[]): Promise<void> {\n\t\tthis.remoteExplorerService.onFoundNewCandidates(candidates);\n\t}\n\n\tasync $setTunnelProvider(features?: TunnelProviderFeatures): Promise<void> {\n\t\tconst tunnelProvider: ITunnelProvider = {\n\t\t\tforwardPort: (\n\t\t\t\ttunnelOptions: TunnelOptions,\n\t\t\t\ttunnelCreationOptions: TunnelCreationOptions,\n\t\t\t) => {\n\t\t\t\tconst forward = this._proxy.$forwardPort(\n\t\t\t\t\ttunnelOptions,\n\t\t\t\t\ttunnelCreationOptions,\n\t\t\t\t);\n\t\t\t\treturn forward.then((tunnelOrError) => {\n\t\t\t\t\tif (!tunnelOrError) {\n\t\t\t\t\t\treturn undefined;\n\t\t\t\t\t} else if (typeof tunnelOrError === \"string\") {\n\t\t\t\t\t\treturn tunnelOrError;\n\t\t\t\t\t}\n\t\t\t\t\tconst tunnel = tunnelOrError;\n\t\t\t\t\tthis.logService.trace(\n\t\t\t\t\t\t`ForwardedPorts: (MainThreadTunnelService) New tunnel established by tunnel provider: ${tunnel?.remoteAddress.host}:${tunnel?.remoteAddress.port}`,\n\t\t\t\t\t);\n\n\t\t\t\t\treturn {\n\t\t\t\t\t\ttunnelRemotePort: tunnel.remoteAddress.port,\n\t\t\t\t\t\ttunnelRemoteHost: tunnel.remoteAddress.host,\n\t\t\t\t\t\tlocalAddress:\n\t\t\t\t\t\t\ttypeof tunnel.localAddress === \"string\"\n\t\t\t\t\t\t\t\t? tunnel.localAddress\n\t\t\t\t\t\t\t\t: makeAddress(\n\t\t\t\t\t\t\t\t\t\ttunnel.localAddress.host,\n\t\t\t\t\t\t\t\t\t\ttunnel.localAddress.port,\n\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\ttunnelLocalPort:\n\t\t\t\t\t\t\ttypeof tunnel.localAddress !== \"string\"\n\t\t\t\t\t\t\t\t? tunnel.localAddress.port\n\t\t\t\t\t\t\t\t: undefined,\n\t\t\t\t\t\tpublic: tunnel.public,\n\t\t\t\t\t\tprivacy: tunnel.privacy,\n\t\t\t\t\t\tprotocol: tunnel.protocol ?? TunnelProtocol.Http,\n\t\t\t\t\t\tdispose: async (silent?: boolean) => {\n\t\t\t\t\t\t\tthis.logService.trace(\n\t\t\t\t\t\t\t\t`ForwardedPorts: (MainThreadTunnelService) Closing tunnel from tunnel provider: ${tunnel?.remoteAddress.host}:${tunnel?.remoteAddress.port}`,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\treturn this._proxy.$closeTunnel(\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\thost: tunnel.remoteAddress.host,\n\t\t\t\t\t\t\t\t\tport: tunnel.remoteAddress.port,\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tsilent,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t},\n\t\t\t\t\t};\n\t\t\t\t});\n\t\t\t},\n\t\t};\n\t\tif (features) {\n\t\t\tthis.tunnelService.setTunnelFeatures(features);\n\t\t}\n\t\tthis.tunnelService.setTunnelProvider(tunnelProvider);\n\t\t// At this point we clearly want the ports view/features since we have a tunnel factory\n\t\tthis.contextKeyService.createKey(forwardedPortsViewEnabled.key, true);\n\t}\n\n\tasync $setCandidateFilter(): Promise<void> {\n\t\tthis.remoteExplorerService.setCandidateFilter(\n\t\t\t(candidates: CandidatePort[]): Promise<CandidatePort[]> => {\n\t\t\t\treturn this._proxy.$applyCandidateFilter(candidates);\n\t\t\t},\n\t\t);\n\t}\n\n\tasync $setCandidatePortSource(source: CandidatePortSource): Promise<void> {\n\t\t// Must wait for the remote environment before trying to set settings there.\n\t\tthis.remoteAgentService\n\t\t\t.getEnvironment()\n\t\t\t.then(() => {\n\t\t\t\tswitch (source) {\n\t\t\t\t\tcase CandidatePortSource.None: {\n\t\t\t\t\t\tRegistry.as<IConfigurationRegistry>(\n\t\t\t\t\t\t\tConfigurationExtensions.Configuration,\n\t\t\t\t\t\t).registerDefaultConfigurations([\n\t\t\t\t\t\t\t{ overrides: { \"remote.autoForwardPorts\": false } },\n\t\t\t\t\t\t]);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tcase CandidatePortSource.Output: {\n\t\t\t\t\t\tRegistry.as<IConfigurationRegistry>(\n\t\t\t\t\t\t\tConfigurationExtensions.Configuration,\n\t\t\t\t\t\t).registerDefaultConfigurations([\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\toverrides: {\n\t\t\t\t\t\t\t\t\t\"remote.autoForwardPortsSource\":\n\t\t\t\t\t\t\t\t\t\tPORT_AUTO_SOURCE_SETTING_OUTPUT,\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t]);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tcase CandidatePortSource.Hybrid: {\n\t\t\t\t\t\tRegistry.as<IConfigurationRegistry>(\n\t\t\t\t\t\t\tConfigurationExtensions.Configuration,\n\t\t\t\t\t\t).registerDefaultConfigurations([\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\toverrides: {\n\t\t\t\t\t\t\t\t\t\"remote.autoForwardPortsSource\":\n\t\t\t\t\t\t\t\t\t\tPORT_AUTO_SOURCE_SETTING_HYBRID,\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t]);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tdefault: // Do nothing, the defaults for these settings should be used.\n\t\t\t\t}\n\t\t\t})\n\t\t\t.catch(() => {\n\t\t\t\t// The remote failed to get setup. Errors from that area will already be surfaced to the user.\n\t\t\t});\n\t}\n}\n"],
  "mappings": ";;;;;;;;;;;;AAMA,SAAS,kBAAkB;AAC3B,YAAY,SAAS;AACrB,SAAS,6BAA6B;AACtC;AAAA,EACC,cAAc;AAAA,OAER;AACP,SAAS,0BAA0B;AACnC,SAAS,mBAAmB;AAC5B;AAAA,EACC;AAAA,EACA;AAAA,OACM;AACP,SAAS,gBAAgB;AAEzB;AAAA,EAEC;AAAA,EAMA;AAAA,OAEM;AACP;AAAA,EAEC;AAAA,OACM;AACP,SAAS,2BAA2B;AACpC;AAAA,EACC;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,OACM;AACP;AAAA,EAEC;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,OACM;AACP;AAAA,EACC;AAAA,EACA;AAAA,EAEA;AAAA,OAIM;AACP,SAAS,0BAA0B;AAG5B,IAAM,0BAAN,cACE,WAET;AAAA,EAMC,YACC,gBAEiB,uBACgB,eAEhB,qBAEA,sBACa,YAEb,oBAEA,mBAChB;AACD,UAAM;AAZW;AACgB;AAEhB;AAEA;AACa;AAEb;AAEA;AAGjB,SAAK,SAAS,eAAe;AAAA,MAC5B,eAAe;AAAA,IAChB;AACA,SAAK;AAAA,MACJ,cAAc;AAAA,QAAe,MAC5B,KAAK,OAAO,oBAAoB;AAAA,MACjC;AAAA,IACD;AACA,SAAK;AAAA,MACJ,cAAc;AAAA,QAAe,MAC5B,KAAK,OAAO,oBAAoB;AAAA,MACjC;AAAA,IACD;AAAA,EACD;AAAA,EAlCiB;AAAA,EACT,kBAAkB;AAAA,EAClB,2BACP,oBAAI,IAAI;AAAA,EAiCD,wBAAiC;AACxC,YACE,CAAC,CAAC,KAAK,qBAAqB,SAAS,yBAAyB,KAC9D,KAAK,cAAc,sBACpB,KAAK,qBAAqB,SAAS,wBAAwB,MAC1D;AAAA,EAEH;AAAA,EAEA,MAAM,wBAAwB,WAAkC;AAC/D,SAAK,sBAAsB,eAAe;AAAA,MACzC;AAAA,MACA;AAAA,IACD;AACA,QAAI,KAAK,sBAAsB,sBAAsB;AACpD,WAAK,OAAO,yBAAyB,KAAK,sBAAsB,CAAC;AAAA,IAClE,OAAO;AACN,WAAK;AAAA,QACJ,KAAK,sBAAsB;AAAA,UAAuB,MACjD,KAAK,OAAO;AAAA,YACX,KAAK,sBAAsB;AAAA,UAC5B;AAAA,QACD;AAAA,MACD;AAAA,IACD;AACA,SAAK;AAAA,MACJ,KAAK,qBAAqB,yBAAyB,OAAO,MAAM;AAC/D,YACC,KAAK,sBAAsB,yBAC1B,EAAE,qBAAqB,yBAAyB,KAChD,EAAE,qBAAqB,wBAAwB,IAC/C;AACD,iBAAO,KAAK,OAAO;AAAA,YAClB,KAAK,sBAAsB;AAAA,UAC5B;AAAA,QACD;AAAA,MACD,CAAC;AAAA,IACF;AACA,SAAK;AAAA,MACJ,KAAK,cAAc,sBAAsB,YAAY;AACpD,YAAI,KAAK,sBAAsB,sBAAsB;AACpD,iBAAO,KAAK,OAAO;AAAA,YAClB,KAAK,sBAAsB;AAAA,UAC5B;AAAA,QACD;AAAA,MACD,CAAC;AAAA,IACF;AAAA,EACD;AAAA,EAEQ,qBAAqB;AAAA,EAC7B,MAAM,iCACL,UACA,gBACgB;AAChB,SAAK,yBAAyB,IAAI,gBAAgB,QAAQ;AAC1D,QAAI,CAAC,KAAK,oBAAoB;AAC7B,WAAK,sBAAsB,YAAY,sBAAsB,IAAI;AACjE,WAAK,qBAAqB;AAAA,IAC3B;AAAA,EACD;AAAA,EAEA,MAAM,mCACL,gBACgB;AAChB,SAAK,yBAAyB,OAAO,cAAc;AAAA,EACpD;AAAA,EAEA,MAAM,sBACL,OACA,KACA,aACA,OACoC;AACpC,QAAI,KAAK,yBAAyB,SAAS,GAAG;AAC7C,aAAO,CAAC;AAAA,IACT;AAGA,UAAM,qBAAqB,MAAM;AAAA,MAChC,KAAK,yBAAyB,QAAQ;AAAA,IACvC,EACE,OAAO,CAAC,UAAU;AAClB,YAAM,WAAW,MAAM,CAAC;AACxB,YAAM,YACL,OAAO,SAAS,cAAc,WAC3B,CAAC,SAAS,WAAW,SAAS,YAAY,CAAC,IAC3C,SAAS;AACb,YAAM,cAAc,YACjB,MAAM;AAAA,QACN,CAAC,SACA,UAAU,CAAC,KAAK,QAAQ,OAAO,UAAU,CAAC;AAAA,MAC5C,IACC;AACH,YAAM,iBACL,CAAC,SAAS,kBACT,eAAe,YAAY,MAAM,SAAS,cAAc;AAC1D,aAAO,eAAe;AAAA,IACvB,CAAC,EACA,IAAI,CAAC,UAAU,MAAM,CAAC,CAAC;AAEzB,QAAI,mBAAmB,WAAW,GAAG;AACpC,aAAO,CAAC;AAAA,IACT;AACA,WAAO,KAAK,OAAO;AAAA,MAClB;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACD;AAAA,EACD;AAAA,EAEA,MAAM,YACL,eACA,QACiC;AACjC,UAAM,SAAS,MAAM,KAAK,sBAAsB,QAAQ;AAAA,MACvD,QAAQ,cAAc;AAAA,MACtB,OAAO,cAAc;AAAA,MACrB,MAAM,cAAc;AAAA,MACpB,QAAQ;AAAA,QACP,QAAQ,aAAa;AAAA,QACrB,aAAa;AAAA,MACd;AAAA,MACA,iBAAiB;AAAA,IAClB,CAAC;AACD,QAAI,CAAC,UAAU,OAAO,WAAW,UAAU;AAC1C,aAAO;AAAA,IACR;AACA,QACC,CAAC,KAAK,mBACN,cAAc,qBAAqB,UACnC,OAAO,oBAAoB,UAC3B,KAAK,cAAc;AAAA,MAClB,cAAc;AAAA,IACf,KACA,OAAO,oBAAoB,cAAc,oBACzC,KAAK,cAAc,YAClB;AACD,WAAK,gBAAgB,eAAe,QAAQ,MAAM;AAAA,IACnD;AACA,WAAO,mBAAmB,kBAAkB,MAAM;AAAA,EACnD;AAAA,EAEA,MAAc,gBACb,eACA,QACA,QACC;AACD,WAAO,KAAK,oBAAoB;AAAA,MAC/B,SAAS;AAAA,MACT,IAAI;AAAA,QACH;AAAA,QACA;AAAA,QACA;AAAA,QACA,cAAc,cAAc;AAAA,QAC5B,cAAc;AAAA,MACf;AAAA,MACA;AAAA,QACC;AAAA,UACC,OAAO,IAAI;AAAA,YACV;AAAA,YACA;AAAA,YACA,OAAO;AAAA,UACR;AAAA,UACA,KAAK,mCAAY;AAChB,iBAAK,kBAAkB;AACvB,kBAAM,KAAK,sBAAsB;AAAA,cAChC;AAAA,gBACC,MAAM,OAAO;AAAA,gBACb,MAAM,OAAO;AAAA,cACd;AAAA,cACA,kBAAkB;AAAA,YACnB;AACA,kBAAM,KAAK,sBAAsB,QAAQ;AAAA,cACxC,QAAQ,cAAc;AAAA,cACtB,OAAO,cAAc;AAAA,cACrB,MAAM,cAAc;AAAA,cACpB,QAAQ;AAAA,gBACP,QAAQ,aAAa;AAAA,gBACrB,aAAa;AAAA,cACd;AAAA,cACA,iBAAiB;AAAA,YAClB,CAAC;AACD,iBAAK,kBAAkB;AAAA,UACxB,GApBK;AAAA,QAqBN;AAAA,MACD;AAAA,IACD;AAAA,EACD;AAAA,EAEA,MAAM,aAAa,QAAuD;AACzE,WAAO,KAAK,sBAAsB;AAAA,MACjC;AAAA,MACA,kBAAkB;AAAA,IACnB;AAAA,EACD;AAAA,EAEA,MAAM,cAA4C;AACjD,YAAQ,MAAM,KAAK,cAAc,SAAS,IAAI,CAAC,WAAW;AACzD,aAAO;AAAA,QACN,eAAe;AAAA,UACd,MAAM,OAAO;AAAA,UACb,MAAM,OAAO;AAAA,QACd;AAAA,QACA,cAAc,OAAO;AAAA,QACrB,SAAS,OAAO;AAAA,QAChB,UAAU,OAAO;AAAA,MAClB;AAAA,IACD,CAAC;AAAA,EACF;AAAA,EAEA,MAAM,sBAAsB,YAA4C;AACvE,SAAK,sBAAsB,qBAAqB,UAAU;AAAA,EAC3D;AAAA,EAEA,MAAM,mBAAmB,UAAkD;AAC1E,UAAM,iBAAkC;AAAA,MACvC,aAAa,wBACZ,eACA,0BACI;AACJ,cAAM,UAAU,KAAK,OAAO;AAAA,UAC3B;AAAA,UACA;AAAA,QACD;AACA,eAAO,QAAQ,KAAK,CAAC,kBAAkB;AACtC,cAAI,CAAC,eAAe;AACnB,mBAAO;AAAA,UACR,WAAW,OAAO,kBAAkB,UAAU;AAC7C,mBAAO;AAAA,UACR;AACA,gBAAM,SAAS;AACf,eAAK,WAAW;AAAA,YACf,wFAAwF,QAAQ,cAAc,IAAI,IAAI,QAAQ,cAAc,IAAI;AAAA,UACjJ;AAEA,iBAAO;AAAA,YACN,kBAAkB,OAAO,cAAc;AAAA,YACvC,kBAAkB,OAAO,cAAc;AAAA,YACvC,cACC,OAAO,OAAO,iBAAiB,WAC5B,OAAO,eACP;AAAA,cACA,OAAO,aAAa;AAAA,cACpB,OAAO,aAAa;AAAA,YACrB;AAAA,YACH,iBACC,OAAO,OAAO,iBAAiB,WAC5B,OAAO,aAAa,OACpB;AAAA,YACJ,QAAQ,OAAO;AAAA,YACf,SAAS,OAAO;AAAA,YAChB,UAAU,OAAO,YAAY,eAAe;AAAA,YAC5C,SAAS,8BAAO,WAAqB;AACpC,mBAAK,WAAW;AAAA,gBACf,kFAAkF,QAAQ,cAAc,IAAI,IAAI,QAAQ,cAAc,IAAI;AAAA,cAC3I;AACA,qBAAO,KAAK,OAAO;AAAA,gBAClB;AAAA,kBACC,MAAM,OAAO,cAAc;AAAA,kBAC3B,MAAM,OAAO,cAAc;AAAA,gBAC5B;AAAA,gBACA;AAAA,cACD;AAAA,YACD,GAXS;AAAA,UAYV;AAAA,QACD,CAAC;AAAA,MACF,GAlDa;AAAA,IAmDd;AACA,QAAI,UAAU;AACb,WAAK,cAAc,kBAAkB,QAAQ;AAAA,IAC9C;AACA,SAAK,cAAc,kBAAkB,cAAc;AAEnD,SAAK,kBAAkB,UAAU,0BAA0B,KAAK,IAAI;AAAA,EACrE;AAAA,EAEA,MAAM,sBAAqC;AAC1C,SAAK,sBAAsB;AAAA,MAC1B,CAAC,eAA0D;AAC1D,eAAO,KAAK,OAAO,sBAAsB,UAAU;AAAA,MACpD;AAAA,IACD;AAAA,EACD;AAAA,EAEA,MAAM,wBAAwB,QAA4C;AAEzE,SAAK,mBACH,eAAe,EACf,KAAK,MAAM;AACX,cAAQ,QAAQ;AAAA,QACf,KAAK,oBAAoB,MAAM;AAC9B,mBAAS;AAAA,YACR,wBAAwB;AAAA,UACzB,EAAE,8BAA8B;AAAA,YAC/B,EAAE,WAAW,EAAE,2BAA2B,MAAM,EAAE;AAAA,UACnD,CAAC;AACD;AAAA,QACD;AAAA,QACA,KAAK,oBAAoB,QAAQ;AAChC,mBAAS;AAAA,YACR,wBAAwB;AAAA,UACzB,EAAE,8BAA8B;AAAA,YAC/B;AAAA,cACC,WAAW;AAAA,gBACV,iCACC;AAAA,cACF;AAAA,YACD;AAAA,UACD,CAAC;AACD;AAAA,QACD;AAAA,QACA,KAAK,oBAAoB,QAAQ;AAChC,mBAAS;AAAA,YACR,wBAAwB;AAAA,UACzB,EAAE,8BAA8B;AAAA,YAC/B;AAAA,cACC,WAAW;AAAA,gBACV,iCACC;AAAA,cACF;AAAA,YACD;AAAA,UACD,CAAC;AACD;AAAA,QACD;AAAA,QACA;AAAA,MACD;AAAA,IACD,CAAC,EACA,MAAM,MAAM;AAAA,IAEb,CAAC;AAAA,EACH;AACD;AAlXA;AAHa,0BAAN;AAAA,EADN,qBAAqB,YAAY,uBAAuB;AAAA,EAYtD;AAAA,EAEA;AAAA,EACA;AAAA,EAEA;AAAA,EAEA;AAAA,EACA;AAAA,EAEA;AAAA,GArBU;",
  "names": []
}
