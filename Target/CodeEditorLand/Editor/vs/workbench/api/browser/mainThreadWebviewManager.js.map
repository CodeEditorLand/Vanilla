{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/api/browser/mainThreadWebviewManager.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Disposable } from \"../../../base/common/lifecycle.js\";\nimport { IInstantiationService } from \"../../../platform/instantiation/common/instantiation.js\";\nimport {\n\ttype IExtHostContext,\n\textHostCustomer,\n} from \"../../services/extensions/common/extHostCustomers.js\";\nimport * as extHostProtocol from \"../common/extHost.protocol.js\";\nimport { MainThreadCustomEditors } from \"./mainThreadCustomEditors.js\";\nimport { MainThreadWebviewPanels } from \"./mainThreadWebviewPanels.js\";\nimport { MainThreadWebviewsViews } from \"./mainThreadWebviewViews.js\";\nimport { MainThreadWebviews } from \"./mainThreadWebviews.js\";\n\n@extHostCustomer\nexport class MainThreadWebviewManager extends Disposable {\n\tconstructor(\n\t\tcontext: IExtHostContext,\n\t\t@IInstantiationService instantiationService: IInstantiationService,\n\t) {\n\t\tsuper();\n\n\t\tconst webviews = this._register(\n\t\t\tinstantiationService.createInstance(MainThreadWebviews, context),\n\t\t);\n\t\tcontext.set(extHostProtocol.MainContext.MainThreadWebviews, webviews);\n\n\t\tconst webviewPanels = this._register(\n\t\t\tinstantiationService.createInstance(\n\t\t\t\tMainThreadWebviewPanels,\n\t\t\t\tcontext,\n\t\t\t\twebviews,\n\t\t\t),\n\t\t);\n\t\tcontext.set(\n\t\t\textHostProtocol.MainContext.MainThreadWebviewPanels,\n\t\t\twebviewPanels,\n\t\t);\n\n\t\tconst customEditors = this._register(\n\t\t\tinstantiationService.createInstance(\n\t\t\t\tMainThreadCustomEditors,\n\t\t\t\tcontext,\n\t\t\t\twebviews,\n\t\t\t\twebviewPanels,\n\t\t\t),\n\t\t);\n\t\tcontext.set(\n\t\t\textHostProtocol.MainContext.MainThreadCustomEditors,\n\t\t\tcustomEditors,\n\t\t);\n\n\t\tconst webviewViews = this._register(\n\t\t\tinstantiationService.createInstance(\n\t\t\t\tMainThreadWebviewsViews,\n\t\t\t\tcontext,\n\t\t\t\twebviews,\n\t\t\t),\n\t\t);\n\t\tcontext.set(\n\t\t\textHostProtocol.MainContext.MainThreadWebviewViews,\n\t\t\twebviewViews,\n\t\t);\n\t}\n}\n"],
  "mappings": ";;;;;;;;;;;;AAKA,SAAS,kBAAkB;AAC3B,SAAS,6BAA6B;AACtC;AAAA,EAEC;AAAA,OACM;AACP,YAAY,qBAAqB;AACjC,SAAS,+BAA+B;AACxC,SAAS,+BAA+B;AACxC,SAAS,+BAA+B;AACxC,SAAS,0BAA0B;AAG5B,IAAM,2BAAN,cAAuC,WAAW;AAAA,EACxD,YACC,SACuB,sBACtB;AACD,UAAM;AAEN,UAAM,WAAW,KAAK;AAAA,MACrB,qBAAqB,eAAe,oBAAoB,OAAO;AAAA,IAChE;AACA,YAAQ,IAAI,gBAAgB,YAAY,oBAAoB,QAAQ;AAEpE,UAAM,gBAAgB,KAAK;AAAA,MAC1B,qBAAqB;AAAA,QACpB;AAAA,QACA;AAAA,QACA;AAAA,MACD;AAAA,IACD;AACA,YAAQ;AAAA,MACP,gBAAgB,YAAY;AAAA,MAC5B;AAAA,IACD;AAEA,UAAM,gBAAgB,KAAK;AAAA,MAC1B,qBAAqB;AAAA,QACpB;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,MACD;AAAA,IACD;AACA,YAAQ;AAAA,MACP,gBAAgB,YAAY;AAAA,MAC5B;AAAA,IACD;AAEA,UAAM,eAAe,KAAK;AAAA,MACzB,qBAAqB;AAAA,QACpB;AAAA,QACA;AAAA,QACA;AAAA,MACD;AAAA,IACD;AACA,YAAQ;AAAA,MACP,gBAAgB,YAAY;AAAA,MAC5B;AAAA,IACD;AAAA,EACD;AACD;AAjDyD;AAA5C,2BAAN;AAAA,EADN;AAAA,EAIE;AAAA,GAHU;",
  "names": []
}
