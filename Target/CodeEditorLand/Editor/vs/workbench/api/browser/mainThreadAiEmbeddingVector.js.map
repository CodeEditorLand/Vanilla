{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/api/browser/mainThreadAiEmbeddingVector.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport type { CancellationToken } from \"../../../base/common/cancellation.js\";\nimport { Disposable, DisposableMap } from \"../../../base/common/lifecycle.js\";\nimport {\n\ttype IAiEmbeddingVectorProvider,\n\tIAiEmbeddingVectorService,\n} from \"../../services/aiEmbeddingVector/common/aiEmbeddingVectorService.js\";\nimport {\n\ttype IExtHostContext,\n\textHostNamedCustomer,\n} from \"../../services/extensions/common/extHostCustomers.js\";\nimport {\n\ttype ExtHostAiEmbeddingVectorShape,\n\tExtHostContext,\n\tMainContext,\n\ttype MainThreadAiEmbeddingVectorShape,\n} from \"../common/extHost.protocol.js\";\n\n@extHostNamedCustomer(MainContext.MainThreadAiEmbeddingVector)\nexport class MainThreadAiEmbeddingVector\n\textends Disposable\n\timplements MainThreadAiEmbeddingVectorShape\n{\n\tprivate readonly _proxy: ExtHostAiEmbeddingVectorShape;\n\tprivate readonly _registrations = this._register(\n\t\tnew DisposableMap<number>(),\n\t);\n\n\tconstructor(\n\t\tcontext: IExtHostContext,\n\t\t@IAiEmbeddingVectorService\n\t\tprivate readonly _AiEmbeddingVectorService: IAiEmbeddingVectorService,\n\t) {\n\t\tsuper();\n\t\tthis._proxy = context.getProxy(ExtHostContext.ExtHostAiEmbeddingVector);\n\t}\n\n\t$registerAiEmbeddingVectorProvider(model: string, handle: number): void {\n\t\tconst provider: IAiEmbeddingVectorProvider = {\n\t\t\tprovideAiEmbeddingVector: (\n\t\t\t\tstrings: string[],\n\t\t\t\ttoken: CancellationToken,\n\t\t\t) => {\n\t\t\t\treturn this._proxy.$provideAiEmbeddingVector(\n\t\t\t\t\thandle,\n\t\t\t\t\tstrings,\n\t\t\t\t\ttoken,\n\t\t\t\t);\n\t\t\t},\n\t\t};\n\t\tthis._registrations.set(\n\t\t\thandle,\n\t\t\tthis._AiEmbeddingVectorService.registerAiEmbeddingVectorProvider(\n\t\t\t\tmodel,\n\t\t\t\tprovider,\n\t\t\t),\n\t\t);\n\t}\n\n\t$unregisterAiEmbeddingVectorProvider(handle: number): void {\n\t\tthis._registrations.deleteAndDispose(handle);\n\t}\n}\n"],
  "mappings": ";;;;;;;;;;;;AAMA,SAAS,YAAY,qBAAqB;AAC1C;AAAA,EAEC;AAAA,OACM;AACP;AAAA,EAEC;AAAA,OACM;AACP;AAAA,EAEC;AAAA,EACA;AAAA,OAEM;AAGA,IAAM,8BAAN,cACE,WAET;AAAA,EAMC,YACC,SAEiB,2BAChB;AACD,UAAM;AAFW;AAGjB,SAAK,SAAS,QAAQ,SAAS,eAAe,wBAAwB;AAAA,EACvE;AAAA,EAZiB;AAAA,EACA,iBAAiB,KAAK;AAAA,IACtC,IAAI,cAAsB;AAAA,EAC3B;AAAA,EAWA,mCAAmC,OAAe,QAAsB;AACvE,UAAM,WAAuC;AAAA,MAC5C,0BAA0B,wBACzB,SACA,UACI;AACJ,eAAO,KAAK,OAAO;AAAA,UAClB;AAAA,UACA;AAAA,UACA;AAAA,QACD;AAAA,MACD,GAT0B;AAAA,IAU3B;AACA,SAAK,eAAe;AAAA,MACnB;AAAA,MACA,KAAK,0BAA0B;AAAA,QAC9B;AAAA,QACA;AAAA,MACD;AAAA,IACD;AAAA,EACD;AAAA,EAEA,qCAAqC,QAAsB;AAC1D,SAAK,eAAe,iBAAiB,MAAM;AAAA,EAC5C;AACD;AAxCA;AAHa,8BAAN;AAAA,EADN,qBAAqB,YAAY,2BAA2B;AAAA,EAY1D;AAAA,GAXU;",
  "names": []
}
