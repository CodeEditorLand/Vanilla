{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/api/browser/mainThreadAiEmbeddingVector.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CancellationToken } from '../../../base/common/cancellation.js';\nimport { Disposable, DisposableMap } from '../../../base/common/lifecycle.js';\nimport { ExtHostAiEmbeddingVectorShape, ExtHostContext, MainContext, MainThreadAiEmbeddingVectorShape } from '../common/extHost.protocol.js';\nimport { IAiEmbeddingVectorProvider, IAiEmbeddingVectorService } from '../../services/aiEmbeddingVector/common/aiEmbeddingVectorService.js';\nimport { IExtHostContext, extHostNamedCustomer } from '../../services/extensions/common/extHostCustomers.js';\n\n@extHostNamedCustomer(MainContext.MainThreadAiEmbeddingVector)\nexport class MainThreadAiEmbeddingVector extends Disposable implements MainThreadAiEmbeddingVectorShape {\n\tprivate readonly _proxy: ExtHostAiEmbeddingVectorShape;\n\tprivate readonly _registrations = this._register(new DisposableMap<number>());\n\n\tconstructor(\n\t\tcontext: IExtHostContext,\n\t\t@IAiEmbeddingVectorService private readonly _AiEmbeddingVectorService: IAiEmbeddingVectorService,\n\t) {\n\t\tsuper();\n\t\tthis._proxy = context.getProxy(ExtHostContext.ExtHostAiEmbeddingVector);\n\t}\n\n\t$registerAiEmbeddingVectorProvider(model: string, handle: number): void {\n\t\tconst provider: IAiEmbeddingVectorProvider = {\n\t\t\tprovideAiEmbeddingVector: (strings: string[], token: CancellationToken) => {\n\t\t\t\treturn this._proxy.$provideAiEmbeddingVector(\n\t\t\t\t\thandle,\n\t\t\t\t\tstrings,\n\t\t\t\t\ttoken\n\t\t\t\t);\n\t\t\t},\n\t\t};\n\t\tthis._registrations.set(handle, this._AiEmbeddingVectorService.registerAiEmbeddingVectorProvider(model, provider));\n\t}\n\n\t$unregisterAiEmbeddingVectorProvider(handle: number): void {\n\t\tthis._registrations.deleteAndDispose(handle);\n\t}\n}\n"],
  "mappings": ";;;;;;;;;;;;AAKA,SAAS,yBAAyB;AAClC,SAAS,YAAY,qBAAqB;AAC1C,SAAS,+BAA+B,gBAAgB,aAAa,wCAAwC;AAC7G,SAAS,4BAA4B,iCAAiC;AACtE,SAAS,iBAAiB,4BAA4B;AAG/C,IAAM,8BAAN,cAA0C,WAAuD;AAAA,EAIvG,YACC,SAC4C,2BAC3C;AACD,UAAM;AAFsC;AAG5C,SAAK,SAAS,QAAQ,SAAS,eAAe,wBAAwB;AAAA,EACvE;AAAA,EATiB;AAAA,EACA,iBAAiB,KAAK,UAAU,IAAI,cAAsB,CAAC;AAAA,EAU5E,mCAAmC,OAAe,QAAsB;AACvE,UAAM,WAAuC;AAAA,MAC5C,0BAA0B,wBAAC,SAAmB,UAA6B;AAC1E,eAAO,KAAK,OAAO;AAAA,UAClB;AAAA,UACA;AAAA,UACA;AAAA,QACD;AAAA,MACD,GAN0B;AAAA,IAO3B;AACA,SAAK,eAAe,IAAI,QAAQ,KAAK,0BAA0B,kCAAkC,OAAO,QAAQ,CAAC;AAAA,EAClH;AAAA,EAEA,qCAAqC,QAAsB;AAC1D,SAAK,eAAe,iBAAiB,MAAM;AAAA,EAC5C;AACD;AA5BwG;AAA3F,8BAAN;AAAA,EADN,qBAAqB,YAAY,2BAA2B;AAAA,EAO1D;AAAA,GANU;",
  "names": []
}
