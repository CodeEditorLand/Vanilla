{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/api/browser/mainThreadEditorTabs.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Event } from \"../../../base/common/event.js\";\nimport {\n\tDisposableMap,\n\tDisposableStore,\n} from \"../../../base/common/lifecycle.js\";\nimport { isEqual } from \"../../../base/common/resources.js\";\nimport { URI } from \"../../../base/common/uri.js\";\nimport { IConfigurationService } from \"../../../platform/configuration/common/configuration.js\";\nimport { ILogService } from \"../../../platform/log/common/log.js\";\nimport {\n\tEditorResourceAccessor,\n\tGroupModelChangeKind,\n\tSideBySideEditor,\n} from \"../../common/editor.js\";\nimport { DiffEditorInput } from \"../../common/editor/diffEditorInput.js\";\nimport { isGroupEditorMoveEvent } from \"../../common/editor/editorGroupModel.js\";\nimport type { EditorInput } from \"../../common/editor/editorInput.js\";\nimport { SideBySideEditorInput } from \"../../common/editor/sideBySideEditorInput.js\";\nimport { AbstractTextResourceEditorInput } from \"../../common/editor/textResourceEditorInput.js\";\nimport { ChatEditorInput } from \"../../contrib/chat/browser/chatEditorInput.js\";\nimport { CustomEditorInput } from \"../../contrib/customEditor/browser/customEditorInput.js\";\nimport { InteractiveEditorInput } from \"../../contrib/interactive/browser/interactiveEditorInput.js\";\nimport { MergeEditorInput } from \"../../contrib/mergeEditor/browser/mergeEditorInput.js\";\nimport { MultiDiffEditorInput } from \"../../contrib/multiDiffEditor/browser/multiDiffEditorInput.js\";\nimport { NotebookEditorInput } from \"../../contrib/notebook/common/notebookEditorInput.js\";\nimport { TerminalEditorInput } from \"../../contrib/terminal/browser/terminalEditorInput.js\";\nimport { WebviewInput } from \"../../contrib/webviewPanel/browser/webviewEditorInput.js\";\nimport {\n\ttype EditorGroupColumn,\n\tcolumnToEditorGroup,\n\teditorGroupToColumn,\n} from \"../../services/editor/common/editorGroupColumn.js\";\nimport {\n\tGroupDirection,\n\ttype IEditorGroup,\n\tIEditorGroupsService,\n\tpreferredSideBySideGroupDirection,\n} from \"../../services/editor/common/editorGroupsService.js\";\nimport {\n\tIEditorService,\n\ttype IEditorsChangeEvent,\n\tSIDE_GROUP,\n} from \"../../services/editor/common/editorService.js\";\nimport {\n\ttype IExtHostContext,\n\textHostNamedCustomer,\n} from \"../../services/extensions/common/extHostCustomers.js\";\nimport {\n\ttype AnyInputDto,\n\tExtHostContext,\n\ttype IEditorTabDto,\n\ttype IEditorTabGroupDto,\n\ttype IExtHostEditorTabsShape,\n\tMainContext,\n\ttype MainThreadEditorTabsShape,\n\tTabInputKind,\n\tTabModelOperationKind,\n\ttype TextDiffInputDto,\n} from \"../common/extHost.protocol.js\";\n\ninterface TabInfo {\n\ttab: IEditorTabDto;\n\tgroup: IEditorGroup;\n\teditorInput: EditorInput;\n}\n@extHostNamedCustomer(MainContext.MainThreadEditorTabs)\nexport class MainThreadEditorTabs implements MainThreadEditorTabsShape {\n\tprivate readonly _dispoables = new DisposableStore();\n\tprivate readonly _proxy: IExtHostEditorTabsShape;\n\t// List of all groups and their corresponding tabs, this is **the** model\n\tprivate _tabGroupModel: IEditorTabGroupDto[] = [];\n\t// Lookup table for finding group by id\n\tprivate readonly _groupLookup: Map<number, IEditorTabGroupDto> = new Map();\n\t// Lookup table for finding tab by id\n\tprivate readonly _tabInfoLookup: Map<string, TabInfo> = new Map();\n\t// Tracks the currently open MultiDiffEditorInputs to listen to resource changes\n\tprivate readonly _multiDiffEditorInputListeners: DisposableMap<MultiDiffEditorInput> =\n\t\tnew DisposableMap();\n\n\tconstructor(\n\t\textHostContext: IExtHostContext,\n\t\t@IEditorGroupsService\n\t\tprivate readonly _editorGroupsService: IEditorGroupsService,\n\t\t@IConfigurationService\n\t\tprivate readonly _configurationService: IConfigurationService,\n\t\t@ILogService private readonly _logService: ILogService,\n\t\t@IEditorService editorService: IEditorService,\n\t) {\n\t\tthis._proxy = extHostContext.getProxy(ExtHostContext.ExtHostEditorTabs);\n\n\t\t// Main listener which responds to events from the editor service\n\t\tthis._dispoables.add(\n\t\t\teditorService.onDidEditorsChange((event) => {\n\t\t\t\ttry {\n\t\t\t\t\tthis._updateTabsModel(event);\n\t\t\t\t} catch {\n\t\t\t\t\tthis._logService.error(\n\t\t\t\t\t\t\"Failed to update model, rebuilding\",\n\t\t\t\t\t);\n\t\t\t\t\tthis._createTabsModel();\n\t\t\t\t}\n\t\t\t}),\n\t\t);\n\n\t\tthis._dispoables.add(this._multiDiffEditorInputListeners);\n\n\t\t// Structural group changes (add, remove, move, etc) are difficult to patch.\n\t\t// Since they happen infrequently we just rebuild the entire model\n\t\tthis._dispoables.add(\n\t\t\tthis._editorGroupsService.onDidAddGroup(() =>\n\t\t\t\tthis._createTabsModel(),\n\t\t\t),\n\t\t);\n\t\tthis._dispoables.add(\n\t\t\tthis._editorGroupsService.onDidRemoveGroup(() =>\n\t\t\t\tthis._createTabsModel(),\n\t\t\t),\n\t\t);\n\n\t\t// Once everything is read go ahead and initialize the model\n\t\tthis._editorGroupsService.whenReady.then(() => this._createTabsModel());\n\t}\n\n\tdispose(): void {\n\t\tthis._groupLookup.clear();\n\t\tthis._tabInfoLookup.clear();\n\t\tthis._dispoables.dispose();\n\t}\n\n\t/**\n\t * Creates a tab object with the correct properties\n\t * @param editor The editor input represented by the tab\n\t * @param group The group the tab is in\n\t * @returns A tab object\n\t */\n\tprivate _buildTabObject(\n\t\tgroup: IEditorGroup,\n\t\teditor: EditorInput,\n\t\teditorIndex: number,\n\t): IEditorTabDto {\n\t\tconst editorId = editor.editorId;\n\t\tconst tab: IEditorTabDto = {\n\t\t\tid: this._generateTabId(editor, group.id),\n\t\t\tlabel: editor.getName(),\n\t\t\teditorId,\n\t\t\tinput: this._editorInputToDto(editor),\n\t\t\tisPinned: group.isSticky(editorIndex),\n\t\t\tisPreview: !group.isPinned(editorIndex),\n\t\t\tisActive: group.isActive(editor),\n\t\t\tisDirty: editor.isDirty(),\n\t\t};\n\t\treturn tab;\n\t}\n\n\tprivate _editorInputToDto(editor: EditorInput): AnyInputDto {\n\t\tif (editor instanceof MergeEditorInput) {\n\t\t\treturn {\n\t\t\t\tkind: TabInputKind.TextMergeInput,\n\t\t\t\tbase: editor.base,\n\t\t\t\tinput1: editor.input1.uri,\n\t\t\t\tinput2: editor.input2.uri,\n\t\t\t\tresult: editor.resource,\n\t\t\t};\n\t\t}\n\n\t\tif (editor instanceof AbstractTextResourceEditorInput) {\n\t\t\treturn {\n\t\t\t\tkind: TabInputKind.TextInput,\n\t\t\t\turi: editor.resource,\n\t\t\t};\n\t\t}\n\n\t\tif (\n\t\t\teditor instanceof SideBySideEditorInput &&\n\t\t\t!(editor instanceof DiffEditorInput)\n\t\t) {\n\t\t\tconst primaryResource = editor.primary.resource;\n\t\t\tconst secondaryResource = editor.secondary.resource;\n\t\t\t// If side by side editor with same resource on both sides treat it as a singular tab kind\n\t\t\tif (\n\t\t\t\teditor.primary instanceof AbstractTextResourceEditorInput &&\n\t\t\t\teditor.secondary instanceof AbstractTextResourceEditorInput &&\n\t\t\t\tisEqual(primaryResource, secondaryResource) &&\n\t\t\t\tprimaryResource &&\n\t\t\t\tsecondaryResource\n\t\t\t) {\n\t\t\t\treturn {\n\t\t\t\t\tkind: TabInputKind.TextInput,\n\t\t\t\t\turi: primaryResource,\n\t\t\t\t};\n\t\t\t}\n\t\t\treturn { kind: TabInputKind.UnknownInput };\n\t\t}\n\n\t\tif (editor instanceof NotebookEditorInput) {\n\t\t\treturn {\n\t\t\t\tkind: TabInputKind.NotebookInput,\n\t\t\t\tnotebookType: editor.viewType,\n\t\t\t\turi: editor.resource,\n\t\t\t};\n\t\t}\n\n\t\tif (editor instanceof CustomEditorInput) {\n\t\t\treturn {\n\t\t\t\tkind: TabInputKind.CustomEditorInput,\n\t\t\t\tviewType: editor.viewType,\n\t\t\t\turi: editor.resource,\n\t\t\t};\n\t\t}\n\n\t\tif (editor instanceof WebviewInput) {\n\t\t\treturn {\n\t\t\t\tkind: TabInputKind.WebviewEditorInput,\n\t\t\t\tviewType: editor.viewType,\n\t\t\t};\n\t\t}\n\n\t\tif (editor instanceof TerminalEditorInput) {\n\t\t\treturn {\n\t\t\t\tkind: TabInputKind.TerminalEditorInput,\n\t\t\t};\n\t\t}\n\n\t\tif (editor instanceof DiffEditorInput) {\n\t\t\tif (\n\t\t\t\teditor.modified instanceof AbstractTextResourceEditorInput &&\n\t\t\t\teditor.original instanceof AbstractTextResourceEditorInput\n\t\t\t) {\n\t\t\t\treturn {\n\t\t\t\t\tkind: TabInputKind.TextDiffInput,\n\t\t\t\t\tmodified: editor.modified.resource,\n\t\t\t\t\toriginal: editor.original.resource,\n\t\t\t\t};\n\t\t\t}\n\t\t\tif (\n\t\t\t\teditor.modified instanceof NotebookEditorInput &&\n\t\t\t\teditor.original instanceof NotebookEditorInput\n\t\t\t) {\n\t\t\t\treturn {\n\t\t\t\t\tkind: TabInputKind.NotebookDiffInput,\n\t\t\t\t\tnotebookType: editor.original.viewType,\n\t\t\t\t\tmodified: editor.modified.resource,\n\t\t\t\t\toriginal: editor.original.resource,\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\n\t\tif (editor instanceof InteractiveEditorInput) {\n\t\t\treturn {\n\t\t\t\tkind: TabInputKind.InteractiveEditorInput,\n\t\t\t\turi: editor.resource,\n\t\t\t\tinputBoxUri: editor.inputResource,\n\t\t\t};\n\t\t}\n\n\t\tif (editor instanceof ChatEditorInput) {\n\t\t\treturn {\n\t\t\t\tkind: TabInputKind.ChatEditorInput,\n\t\t\t};\n\t\t}\n\n\t\tif (editor instanceof MultiDiffEditorInput) {\n\t\t\tconst diffEditors: TextDiffInputDto[] = [];\n\t\t\tfor (const resource of editor?.resources.get() ?? []) {\n\t\t\t\tif (resource.originalUri && resource.modifiedUri) {\n\t\t\t\t\tdiffEditors.push({\n\t\t\t\t\t\tkind: TabInputKind.TextDiffInput,\n\t\t\t\t\t\toriginal: resource.originalUri,\n\t\t\t\t\t\tmodified: resource.modifiedUri,\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\tkind: TabInputKind.MultiDiffEditorInput,\n\t\t\t\tdiffEditors,\n\t\t\t};\n\t\t}\n\n\t\treturn { kind: TabInputKind.UnknownInput };\n\t}\n\n\t/**\n\t * Generates a unique id for a tab\n\t * @param editor The editor input\n\t * @param groupId The group id\n\t * @returns A unique identifier for a specific tab\n\t */\n\tprivate _generateTabId(editor: EditorInput, groupId: number) {\n\t\tlet resourceString: string | undefined;\n\t\t// Properly get the resource and account for side by side editors\n\t\tconst resource = EditorResourceAccessor.getCanonicalUri(editor, {\n\t\t\tsupportSideBySide: SideBySideEditor.BOTH,\n\t\t});\n\t\tif (resource instanceof URI) {\n\t\t\tresourceString = resource.toString();\n\t\t} else {\n\t\t\tresourceString = `${resource?.primary?.toString()}-${resource?.secondary?.toString()}`;\n\t\t}\n\t\treturn `${groupId}~${editor.editorId}-${editor.typeId}-${resourceString} `;\n\t}\n\n\t/**\n\t * Called whenever a group activates, updates the model by marking the group as active an notifies the extension host\n\t */\n\tprivate _onDidGroupActivate() {\n\t\tconst activeGroupId = this._editorGroupsService.activeGroup.id;\n\t\tconst activeGroup = this._groupLookup.get(activeGroupId);\n\t\tif (activeGroup) {\n\t\t\t// Ok not to loop as exthost accepts last active group\n\t\t\tactiveGroup.isActive = true;\n\t\t\tthis._proxy.$acceptTabGroupUpdate(activeGroup);\n\t\t}\n\t}\n\n\t/**\n\t * Called when the tab label changes\n\t * @param groupId The id of the group the tab exists in\n\t * @param editorInput The editor input represented by the tab\n\t */\n\tprivate _onDidTabLabelChange(\n\t\tgroupId: number,\n\t\teditorInput: EditorInput,\n\t\teditorIndex: number,\n\t) {\n\t\tconst tabId = this._generateTabId(editorInput, groupId);\n\t\tconst tabInfo = this._tabInfoLookup.get(tabId);\n\t\t// If tab is found patch, else rebuild\n\t\tif (tabInfo) {\n\t\t\ttabInfo.tab.label = editorInput.getName();\n\t\t\tthis._proxy.$acceptTabOperation({\n\t\t\t\tgroupId,\n\t\t\t\tindex: editorIndex,\n\t\t\t\ttabDto: tabInfo.tab,\n\t\t\t\tkind: TabModelOperationKind.TAB_UPDATE,\n\t\t\t});\n\t\t} else {\n\t\t\tthis._logService.error(\n\t\t\t\t\"Invalid model for label change, rebuilding\",\n\t\t\t);\n\t\t\tthis._createTabsModel();\n\t\t}\n\t}\n\n\t/**\n\t * Called when a new tab is opened\n\t * @param groupId The id of the group the tab is being created in\n\t * @param editorInput The editor input being opened\n\t * @param editorIndex The index of the editor within that group\n\t */\n\tprivate _onDidTabOpen(\n\t\tgroupId: number,\n\t\teditorInput: EditorInput,\n\t\teditorIndex: number,\n\t) {\n\t\tconst group = this._editorGroupsService.getGroup(groupId);\n\t\t// Even if the editor service knows about the group the group might not exist yet in our model\n\t\tconst groupInModel = this._groupLookup.get(groupId) !== undefined;\n\t\t// Means a new group was likely created so we rebuild the model\n\t\tif (!group || !groupInModel) {\n\t\t\tthis._createTabsModel();\n\t\t\treturn;\n\t\t}\n\t\tconst tabs = this._groupLookup.get(groupId)?.tabs;\n\t\tif (!tabs) {\n\t\t\treturn;\n\t\t}\n\t\t// Splice tab into group at index editorIndex\n\t\tconst tabObject = this._buildTabObject(group, editorInput, editorIndex);\n\t\ttabs.splice(editorIndex, 0, tabObject);\n\t\t// Update lookup\n\t\tconst tabId = this._generateTabId(editorInput, groupId);\n\t\tthis._tabInfoLookup.set(tabId, { group, editorInput, tab: tabObject });\n\n\t\tif (editorInput instanceof MultiDiffEditorInput) {\n\t\t\tthis._multiDiffEditorInputListeners.set(\n\t\t\t\teditorInput,\n\t\t\t\tEvent.fromObservableLight(editorInput.resources)(() => {\n\t\t\t\t\tconst tabInfo = this._tabInfoLookup.get(tabId);\n\t\t\t\t\tif (!tabInfo) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\ttabInfo.tab = this._buildTabObject(\n\t\t\t\t\t\tgroup,\n\t\t\t\t\t\teditorInput,\n\t\t\t\t\t\teditorIndex,\n\t\t\t\t\t);\n\t\t\t\t\tthis._proxy.$acceptTabOperation({\n\t\t\t\t\t\tgroupId,\n\t\t\t\t\t\tindex: editorIndex,\n\t\t\t\t\t\ttabDto: tabInfo.tab,\n\t\t\t\t\t\tkind: TabModelOperationKind.TAB_UPDATE,\n\t\t\t\t\t});\n\t\t\t\t}),\n\t\t\t);\n\t\t}\n\n\t\tthis._proxy.$acceptTabOperation({\n\t\t\tgroupId,\n\t\t\tindex: editorIndex,\n\t\t\ttabDto: tabObject,\n\t\t\tkind: TabModelOperationKind.TAB_OPEN,\n\t\t});\n\t}\n\n\t/**\n\t * Called when a tab is closed\n\t * @param groupId The id of the group the tab is being removed from\n\t * @param editorIndex The index of the editor within that group\n\t */\n\tprivate _onDidTabClose(groupId: number, editorIndex: number) {\n\t\tconst group = this._editorGroupsService.getGroup(groupId);\n\t\tconst tabs = this._groupLookup.get(groupId)?.tabs;\n\t\t// Something is wrong with the model state so we rebuild\n\t\tif (!group || !tabs) {\n\t\t\tthis._createTabsModel();\n\t\t\treturn;\n\t\t}\n\t\t// Splice tab into group at index editorIndex\n\t\tconst removedTab = tabs.splice(editorIndex, 1);\n\n\t\t// Index must no longer be valid so we return prematurely\n\t\tif (removedTab.length === 0) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Update lookup\n\t\tthis._tabInfoLookup.delete(removedTab[0]?.id ?? \"\");\n\n\t\tif (removedTab[0]?.input instanceof MultiDiffEditorInput) {\n\t\t\tthis._multiDiffEditorInputListeners.deleteAndDispose(\n\t\t\t\tremovedTab[0]?.input,\n\t\t\t);\n\t\t}\n\n\t\tthis._proxy.$acceptTabOperation({\n\t\t\tgroupId,\n\t\t\tindex: editorIndex,\n\t\t\ttabDto: removedTab[0],\n\t\t\tkind: TabModelOperationKind.TAB_CLOSE,\n\t\t});\n\t}\n\n\t/**\n\t * Called when the active tab changes\n\t * @param groupId The id of the group the tab is contained in\n\t * @param editorIndex The index of the tab\n\t */\n\tprivate _onDidTabActiveChange(groupId: number, editorIndex: number) {\n\t\t// TODO @lramos15 use the tab lookup here if possible. Do we have an editor input?!\n\t\tconst tabs = this._groupLookup.get(groupId)?.tabs;\n\t\tif (!tabs) {\n\t\t\treturn;\n\t\t}\n\t\tconst activeTab = tabs[editorIndex];\n\t\t// No need to loop over as the exthost uses the most recently marked active tab\n\t\tactiveTab.isActive = true;\n\t\t// Send DTO update to the exthost\n\t\tthis._proxy.$acceptTabOperation({\n\t\t\tgroupId,\n\t\t\tindex: editorIndex,\n\t\t\ttabDto: activeTab,\n\t\t\tkind: TabModelOperationKind.TAB_UPDATE,\n\t\t});\n\t}\n\n\t/**\n\t * Called when the dirty indicator on the tab changes\n\t * @param groupId The id of the group the tab is in\n\t * @param editorIndex The index of the tab\n\t * @param editor The editor input represented by the tab\n\t */\n\tprivate _onDidTabDirty(\n\t\tgroupId: number,\n\t\teditorIndex: number,\n\t\teditor: EditorInput,\n\t) {\n\t\tconst tabId = this._generateTabId(editor, groupId);\n\t\tconst tabInfo = this._tabInfoLookup.get(tabId);\n\t\t// Something wrong with the model state so we rebuild\n\t\tif (!tabInfo) {\n\t\t\tthis._logService.error(\n\t\t\t\t\"Invalid model for dirty change, rebuilding\",\n\t\t\t);\n\t\t\tthis._createTabsModel();\n\t\t\treturn;\n\t\t}\n\t\ttabInfo.tab.isDirty = editor.isDirty();\n\t\tthis._proxy.$acceptTabOperation({\n\t\t\tgroupId,\n\t\t\tindex: editorIndex,\n\t\t\ttabDto: tabInfo.tab,\n\t\t\tkind: TabModelOperationKind.TAB_UPDATE,\n\t\t});\n\t}\n\n\t/**\n\t * Called when the tab is pinned/unpinned\n\t * @param groupId The id of the group the tab is in\n\t * @param editorIndex The index of the tab\n\t * @param editor The editor input represented by the tab\n\t */\n\tprivate _onDidTabPinChange(\n\t\tgroupId: number,\n\t\teditorIndex: number,\n\t\teditor: EditorInput,\n\t) {\n\t\tconst tabId = this._generateTabId(editor, groupId);\n\t\tconst tabInfo = this._tabInfoLookup.get(tabId);\n\t\tconst group = tabInfo?.group;\n\t\tconst tab = tabInfo?.tab;\n\t\t// Something wrong with the model state so we rebuild\n\t\tif (!group || !tab) {\n\t\t\tthis._logService.error(\n\t\t\t\t\"Invalid model for sticky change, rebuilding\",\n\t\t\t);\n\t\t\tthis._createTabsModel();\n\t\t\treturn;\n\t\t}\n\t\t// Whether or not the tab has the pin icon (internally it's called sticky)\n\t\ttab.isPinned = group.isSticky(editorIndex);\n\t\tthis._proxy.$acceptTabOperation({\n\t\t\tgroupId,\n\t\t\tindex: editorIndex,\n\t\t\ttabDto: tab,\n\t\t\tkind: TabModelOperationKind.TAB_UPDATE,\n\t\t});\n\t}\n\n\t/**\n\t * Called when the tab is preview / unpreviewed\n\t * @param groupId The id of the group the tab is in\n\t * @param editorIndex The index of the tab\n\t * @param editor The editor input represented by the tab\n\t */\n\tprivate _onDidTabPreviewChange(\n\t\tgroupId: number,\n\t\teditorIndex: number,\n\t\teditor: EditorInput,\n\t) {\n\t\tconst tabId = this._generateTabId(editor, groupId);\n\t\tconst tabInfo = this._tabInfoLookup.get(tabId);\n\t\tconst group = tabInfo?.group;\n\t\tconst tab = tabInfo?.tab;\n\t\t// Something wrong with the model state so we rebuild\n\t\tif (!group || !tab) {\n\t\t\tthis._logService.error(\n\t\t\t\t\"Invalid model for sticky change, rebuilding\",\n\t\t\t);\n\t\t\tthis._createTabsModel();\n\t\t\treturn;\n\t\t}\n\t\t// Whether or not the tab has the pin icon (internally it's called pinned)\n\t\ttab.isPreview = !group.isPinned(editorIndex);\n\t\tthis._proxy.$acceptTabOperation({\n\t\t\tkind: TabModelOperationKind.TAB_UPDATE,\n\t\t\tgroupId,\n\t\t\ttabDto: tab,\n\t\t\tindex: editorIndex,\n\t\t});\n\t}\n\n\tprivate _onDidTabMove(\n\t\tgroupId: number,\n\t\teditorIndex: number,\n\t\toldEditorIndex: number,\n\t\teditor: EditorInput,\n\t) {\n\t\tconst tabs = this._groupLookup.get(groupId)?.tabs;\n\t\t// Something wrong with the model state so we rebuild\n\t\tif (!tabs) {\n\t\t\tthis._logService.error(\"Invalid model for move change, rebuilding\");\n\t\t\tthis._createTabsModel();\n\t\t\treturn;\n\t\t}\n\n\t\t// Move tab from old index to new index\n\t\tconst removedTab = tabs.splice(oldEditorIndex, 1);\n\t\tif (removedTab.length === 0) {\n\t\t\treturn;\n\t\t}\n\t\ttabs.splice(editorIndex, 0, removedTab[0]);\n\n\t\t// Notify exthost of move\n\t\tthis._proxy.$acceptTabOperation({\n\t\t\tkind: TabModelOperationKind.TAB_MOVE,\n\t\t\tgroupId,\n\t\t\ttabDto: removedTab[0],\n\t\t\tindex: editorIndex,\n\t\t\toldIndex: oldEditorIndex,\n\t\t});\n\t}\n\n\t/**\n\t * Builds the model from scratch based on the current state of the editor service.\n\t */\n\tprivate _createTabsModel(): void {\n\t\tif (this._editorGroupsService.groups.length === 0) {\n\t\t\treturn; // skip this invalid state, it may happen when the entire editor area is transitioning to other state (\"editor working sets\")\n\t\t}\n\n\t\tthis._tabGroupModel = [];\n\t\tthis._groupLookup.clear();\n\t\tthis._tabInfoLookup.clear();\n\t\tlet tabs: IEditorTabDto[] = [];\n\t\tfor (const group of this._editorGroupsService.groups) {\n\t\t\tconst currentTabGroupModel: IEditorTabGroupDto = {\n\t\t\t\tgroupId: group.id,\n\t\t\t\tisActive: group.id === this._editorGroupsService.activeGroup.id,\n\t\t\t\tviewColumn: editorGroupToColumn(\n\t\t\t\t\tthis._editorGroupsService,\n\t\t\t\t\tgroup,\n\t\t\t\t),\n\t\t\t\ttabs: [],\n\t\t\t};\n\t\t\tgroup.editors.forEach((editor, editorIndex) => {\n\t\t\t\tconst tab = this._buildTabObject(group, editor, editorIndex);\n\t\t\t\ttabs.push(tab);\n\t\t\t\t// Add information about the tab to the lookup\n\t\t\t\tthis._tabInfoLookup.set(this._generateTabId(editor, group.id), {\n\t\t\t\t\tgroup,\n\t\t\t\t\ttab,\n\t\t\t\t\teditorInput: editor,\n\t\t\t\t});\n\t\t\t});\n\t\t\tcurrentTabGroupModel.tabs = tabs;\n\t\t\tthis._tabGroupModel.push(currentTabGroupModel);\n\t\t\tthis._groupLookup.set(group.id, currentTabGroupModel);\n\t\t\ttabs = [];\n\t\t}\n\t\t// notify the ext host of the new model\n\t\tthis._proxy.$acceptEditorTabModel(this._tabGroupModel);\n\t}\n\n\t// TODOD @lramos15 Remove this after done finishing the tab model code\n\t// private _eventToString(event: IEditorsChangeEvent | IEditorsMoveEvent): string {\n\t// \tlet eventString = '';\n\t// \tswitch (event.kind) {\n\t// \t\tcase GroupModelChangeKind.GROUP_INDEX: eventString += 'GROUP_INDEX'; break;\n\t// \t\tcase GroupModelChangeKind.EDITOR_ACTIVE: eventString += 'EDITOR_ACTIVE'; break;\n\t// \t\tcase GroupModelChangeKind.EDITOR_PIN: eventString += 'EDITOR_PIN'; break;\n\t// \t\tcase GroupModelChangeKind.EDITOR_OPEN: eventString += 'EDITOR_OPEN'; break;\n\t// \t\tcase GroupModelChangeKind.EDITOR_CLOSE: eventString += 'EDITOR_CLOSE'; break;\n\t// \t\tcase GroupModelChangeKind.EDITOR_MOVE: eventString += 'EDITOR_MOVE'; break;\n\t// \t\tcase GroupModelChangeKind.EDITOR_LABEL: eventString += 'EDITOR_LABEL'; break;\n\t// \t\tcase GroupModelChangeKind.GROUP_ACTIVE: eventString += 'GROUP_ACTIVE'; break;\n\t// \t\tcase GroupModelChangeKind.GROUP_LOCKED: eventString += 'GROUP_LOCKED'; break;\n\t// \t\tcase GroupModelChangeKind.EDITOR_DIRTY: eventString += 'EDITOR_DIRTY'; break;\n\t// \t\tcase GroupModelChangeKind.EDITOR_STICKY: eventString += 'EDITOR_STICKY'; break;\n\t// \t\tdefault: eventString += `UNKNOWN: ${event.kind}`; break;\n\t// \t}\n\t// \treturn eventString;\n\t// }\n\n\t/**\n\t * The main handler for the tab events\n\t * @param events The list of events to process\n\t */\n\tprivate _updateTabsModel(changeEvent: IEditorsChangeEvent): void {\n\t\tconst event = changeEvent.event;\n\t\tconst groupId = changeEvent.groupId;\n\t\tswitch (event.kind) {\n\t\t\tcase GroupModelChangeKind.GROUP_ACTIVE:\n\t\t\t\tif (groupId === this._editorGroupsService.activeGroup.id) {\n\t\t\t\t\tthis._onDidGroupActivate();\n\t\t\t\t\tbreak;\n\t\t\t\t} else {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\tcase GroupModelChangeKind.EDITOR_LABEL:\n\t\t\t\tif (\n\t\t\t\t\tevent.editor !== undefined &&\n\t\t\t\t\tevent.editorIndex !== undefined\n\t\t\t\t) {\n\t\t\t\t\tthis._onDidTabLabelChange(\n\t\t\t\t\t\tgroupId,\n\t\t\t\t\t\tevent.editor,\n\t\t\t\t\t\tevent.editorIndex,\n\t\t\t\t\t);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\tcase GroupModelChangeKind.EDITOR_OPEN:\n\t\t\t\tif (\n\t\t\t\t\tevent.editor !== undefined &&\n\t\t\t\t\tevent.editorIndex !== undefined\n\t\t\t\t) {\n\t\t\t\t\tthis._onDidTabOpen(\n\t\t\t\t\t\tgroupId,\n\t\t\t\t\t\tevent.editor,\n\t\t\t\t\t\tevent.editorIndex,\n\t\t\t\t\t);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\tcase GroupModelChangeKind.EDITOR_CLOSE:\n\t\t\t\tif (event.editorIndex !== undefined) {\n\t\t\t\t\tthis._onDidTabClose(groupId, event.editorIndex);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\tcase GroupModelChangeKind.EDITOR_ACTIVE:\n\t\t\t\tif (event.editorIndex !== undefined) {\n\t\t\t\t\tthis._onDidTabActiveChange(groupId, event.editorIndex);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\tcase GroupModelChangeKind.EDITOR_DIRTY:\n\t\t\t\tif (\n\t\t\t\t\tevent.editorIndex !== undefined &&\n\t\t\t\t\tevent.editor !== undefined\n\t\t\t\t) {\n\t\t\t\t\tthis._onDidTabDirty(\n\t\t\t\t\t\tgroupId,\n\t\t\t\t\t\tevent.editorIndex,\n\t\t\t\t\t\tevent.editor,\n\t\t\t\t\t);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\tcase GroupModelChangeKind.EDITOR_STICKY:\n\t\t\t\tif (\n\t\t\t\t\tevent.editorIndex !== undefined &&\n\t\t\t\t\tevent.editor !== undefined\n\t\t\t\t) {\n\t\t\t\t\tthis._onDidTabPinChange(\n\t\t\t\t\t\tgroupId,\n\t\t\t\t\t\tevent.editorIndex,\n\t\t\t\t\t\tevent.editor,\n\t\t\t\t\t);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\tcase GroupModelChangeKind.EDITOR_PIN:\n\t\t\t\tif (\n\t\t\t\t\tevent.editorIndex !== undefined &&\n\t\t\t\t\tevent.editor !== undefined\n\t\t\t\t) {\n\t\t\t\t\tthis._onDidTabPreviewChange(\n\t\t\t\t\t\tgroupId,\n\t\t\t\t\t\tevent.editorIndex,\n\t\t\t\t\t\tevent.editor,\n\t\t\t\t\t);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\tcase GroupModelChangeKind.EDITOR_TRANSIENT:\n\t\t\t\t// Currently not exposed in the API\n\t\t\t\tbreak;\n\t\t\tcase GroupModelChangeKind.EDITOR_MOVE:\n\t\t\t\tif (\n\t\t\t\t\tisGroupEditorMoveEvent(event) &&\n\t\t\t\t\tevent.editor &&\n\t\t\t\t\tevent.editorIndex !== undefined &&\n\t\t\t\t\tevent.oldEditorIndex !== undefined\n\t\t\t\t) {\n\t\t\t\t\tthis._onDidTabMove(\n\t\t\t\t\t\tgroupId,\n\t\t\t\t\t\tevent.editorIndex,\n\t\t\t\t\t\tevent.oldEditorIndex,\n\t\t\t\t\t\tevent.editor,\n\t\t\t\t\t);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\tdefault:\n\t\t\t\t// If it's not an optimized case we rebuild the tabs model from scratch\n\t\t\t\tthis._createTabsModel();\n\t\t}\n\t}\n\t//#region Messages received from Ext Host\n\t$moveTab(\n\t\ttabId: string,\n\t\tindex: number,\n\t\tviewColumn: EditorGroupColumn,\n\t\tpreserveFocus?: boolean,\n\t): void {\n\t\tconst groupId = columnToEditorGroup(\n\t\t\tthis._editorGroupsService,\n\t\t\tthis._configurationService,\n\t\t\tviewColumn,\n\t\t);\n\t\tconst tabInfo = this._tabInfoLookup.get(tabId);\n\t\tconst tab = tabInfo?.tab;\n\t\tif (!tab) {\n\t\t\tthrow new Error(\n\t\t\t\t`Attempted to close tab with id ${tabId} which does not exist`,\n\t\t\t);\n\t\t}\n\t\tlet targetGroup: IEditorGroup | undefined;\n\t\tconst sourceGroup = this._editorGroupsService.getGroup(\n\t\t\ttabInfo.group.id,\n\t\t);\n\t\tif (!sourceGroup) {\n\t\t\treturn;\n\t\t}\n\t\t// If group index is out of bounds then we make a new one that's to the right of the last group\n\t\tif (this._groupLookup.get(groupId) === undefined) {\n\t\t\tlet direction = GroupDirection.RIGHT;\n\t\t\t// Make sure we respect the user's preferred side direction\n\t\t\tif (viewColumn === SIDE_GROUP) {\n\t\t\t\tdirection = preferredSideBySideGroupDirection(\n\t\t\t\t\tthis._configurationService,\n\t\t\t\t);\n\t\t\t}\n\t\t\ttargetGroup = this._editorGroupsService.addGroup(\n\t\t\t\tthis._editorGroupsService.groups[\n\t\t\t\t\tthis._editorGroupsService.groups.length - 1\n\t\t\t\t],\n\t\t\t\tdirection,\n\t\t\t);\n\t\t} else {\n\t\t\ttargetGroup = this._editorGroupsService.getGroup(groupId);\n\t\t}\n\t\tif (!targetGroup) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Similar logic to if index is out of bounds we place it at the end\n\t\tif (index < 0 || index > targetGroup.editors.length) {\n\t\t\tindex = targetGroup.editors.length;\n\t\t}\n\t\t// Find the correct EditorInput using the tab info\n\t\tconst editorInput = tabInfo?.editorInput;\n\t\tif (!editorInput) {\n\t\t\treturn;\n\t\t}\n\t\t// Move the editor to the target group\n\t\tsourceGroup.moveEditor(editorInput, targetGroup, {\n\t\t\tindex,\n\t\t\tpreserveFocus,\n\t\t});\n\t\treturn;\n\t}\n\n\tasync $closeTab(\n\t\ttabIds: string[],\n\t\tpreserveFocus?: boolean,\n\t): Promise<boolean> {\n\t\tconst groups: Map<IEditorGroup, EditorInput[]> = new Map();\n\t\tfor (const tabId of tabIds) {\n\t\t\tconst tabInfo = this._tabInfoLookup.get(tabId);\n\t\t\tconst tab = tabInfo?.tab;\n\t\t\tconst group = tabInfo?.group;\n\t\t\tconst editorTab = tabInfo?.editorInput;\n\t\t\t// If not found skip\n\t\t\tif (!group || !tab || !tabInfo || !editorTab) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tconst groupEditors = groups.get(group);\n\t\t\tif (groupEditors) {\n\t\t\t\tgroupEditors.push(editorTab);\n\t\t\t} else {\n\t\t\t\tgroups.set(group, [editorTab]);\n\t\t\t}\n\t\t}\n\t\t// Loop over keys of the groups map and call closeEditors\n\t\tconst results: boolean[] = [];\n\t\tfor (const [group, editors] of groups) {\n\t\t\tresults.push(await group.closeEditors(editors, { preserveFocus }));\n\t\t}\n\t\t// TODO @jrieken This isn't quite right how can we say true for some but not others?\n\t\treturn results.every((result) => result);\n\t}\n\n\tasync $closeGroup(\n\t\tgroupIds: number[],\n\t\tpreserveFocus?: boolean,\n\t): Promise<boolean> {\n\t\tconst groupCloseResults: boolean[] = [];\n\t\tfor (const groupId of groupIds) {\n\t\t\tconst group = this._editorGroupsService.getGroup(groupId);\n\t\t\tif (group) {\n\t\t\t\tgroupCloseResults.push(await group.closeAllEditors());\n\t\t\t\t// Make sure group is empty but still there before removing it\n\t\t\t\tif (\n\t\t\t\t\tgroup.count === 0 &&\n\t\t\t\t\tthis._editorGroupsService.getGroup(group.id)\n\t\t\t\t) {\n\t\t\t\t\tthis._editorGroupsService.removeGroup(group);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn groupCloseResults.every((result) => result);\n\t}\n\t//#endregion\n}\n"],
  "mappings": "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",
  "names": []
}
