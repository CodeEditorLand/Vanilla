{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/api/browser/mainThreadFileSystem.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Emitter, Event } from '../../../base/common/event.js';\nimport { IDisposable, toDisposable, DisposableStore, DisposableMap } from '../../../base/common/lifecycle.js';\nimport { URI, UriComponents } from '../../../base/common/uri.js';\nimport { IFileWriteOptions, FileSystemProviderCapabilities, IFileChange, IFileService, IStat, IWatchOptions, FileType, IFileOverwriteOptions, IFileDeleteOptions, IFileOpenOptions, FileOperationError, FileOperationResult, FileSystemProviderErrorCode, IFileSystemProviderWithOpenReadWriteCloseCapability, IFileSystemProviderWithFileReadWriteCapability, IFileSystemProviderWithFileFolderCopyCapability, FilePermission, toFileSystemProviderErrorCode, IFileStatWithPartialMetadata, IFileStat } from '../../../platform/files/common/files.js';\nimport { extHostNamedCustomer, IExtHostContext } from '../../services/extensions/common/extHostCustomers.js';\nimport { ExtHostContext, ExtHostFileSystemShape, IFileChangeDto, MainContext, MainThreadFileSystemShape } from '../common/extHost.protocol.js';\nimport { VSBuffer } from '../../../base/common/buffer.js';\nimport { IMarkdownString } from '../../../base/common/htmlContent.js';\n\n@extHostNamedCustomer(MainContext.MainThreadFileSystem)\nexport class MainThreadFileSystem implements MainThreadFileSystemShape {\n\n\tprivate readonly _proxy: ExtHostFileSystemShape;\n\tprivate readonly _fileProvider = new DisposableMap<number, RemoteFileSystemProvider>();\n\tprivate readonly _disposables = new DisposableStore();\n\n\tconstructor(\n\t\textHostContext: IExtHostContext,\n\t\t@IFileService private readonly _fileService: IFileService\n\t) {\n\t\tthis._proxy = extHostContext.getProxy(ExtHostContext.ExtHostFileSystem);\n\n\t\tconst infoProxy = extHostContext.getProxy(ExtHostContext.ExtHostFileSystemInfo);\n\n\t\tfor (const entry of _fileService.listCapabilities()) {\n\t\t\tinfoProxy.$acceptProviderInfos(URI.from({ scheme: entry.scheme, path: '/dummy' }), entry.capabilities);\n\t\t}\n\t\tthis._disposables.add(_fileService.onDidChangeFileSystemProviderRegistrations(e => infoProxy.$acceptProviderInfos(URI.from({ scheme: e.scheme, path: '/dummy' }), e.provider?.capabilities ?? null)));\n\t\tthis._disposables.add(_fileService.onDidChangeFileSystemProviderCapabilities(e => infoProxy.$acceptProviderInfos(URI.from({ scheme: e.scheme, path: '/dummy' }), e.provider.capabilities)));\n\t}\n\n\tdispose(): void {\n\t\tthis._disposables.dispose();\n\t\tthis._fileProvider.dispose();\n\t}\n\n\tasync $registerFileSystemProvider(handle: number, scheme: string, capabilities: FileSystemProviderCapabilities, readonlyMessage?: IMarkdownString): Promise<void> {\n\t\tthis._fileProvider.set(handle, new RemoteFileSystemProvider(this._fileService, scheme, capabilities, readonlyMessage, handle, this._proxy));\n\t}\n\n\t$unregisterProvider(handle: number): void {\n\t\tthis._fileProvider.deleteAndDispose(handle);\n\t}\n\n\t$onFileSystemChange(handle: number, changes: IFileChangeDto[]): void {\n\t\tconst fileProvider = this._fileProvider.get(handle);\n\t\tif (!fileProvider) {\n\t\t\tthrow new Error('Unknown file provider');\n\t\t}\n\t\tfileProvider.$onFileSystemChange(changes);\n\t}\n\n\n\t// --- consumer fs, vscode.workspace.fs\n\n\t$stat(uri: UriComponents): Promise<IStat> {\n\t\treturn this._fileService.stat(URI.revive(uri)).then(stat => {\n\t\t\treturn {\n\t\t\t\tctime: stat.ctime,\n\t\t\t\tmtime: stat.mtime,\n\t\t\t\tsize: stat.size,\n\t\t\t\tpermissions: stat.readonly ? FilePermission.Readonly : undefined,\n\t\t\t\ttype: MainThreadFileSystem._asFileType(stat)\n\t\t\t};\n\t\t}).catch(MainThreadFileSystem._handleError);\n\t}\n\n\t$readdir(uri: UriComponents): Promise<[string, FileType][]> {\n\t\treturn this._fileService.resolve(URI.revive(uri), { resolveMetadata: false }).then(stat => {\n\t\t\tif (!stat.isDirectory) {\n\t\t\t\tconst err = new Error(stat.name);\n\t\t\t\terr.name = FileSystemProviderErrorCode.FileNotADirectory;\n\t\t\t\tthrow err;\n\t\t\t}\n\t\t\treturn !stat.children ? [] : stat.children.map(child => [child.name, MainThreadFileSystem._asFileType(child)] as [string, FileType]);\n\t\t}).catch(MainThreadFileSystem._handleError);\n\t}\n\n\tprivate static _asFileType(stat: IFileStat | IFileStatWithPartialMetadata): FileType {\n\t\tlet res = 0;\n\t\tif (stat.isFile) {\n\t\t\tres += FileType.File;\n\n\t\t} else if (stat.isDirectory) {\n\t\t\tres += FileType.Directory;\n\t\t}\n\t\tif (stat.isSymbolicLink) {\n\t\t\tres += FileType.SymbolicLink;\n\t\t}\n\t\treturn res;\n\t}\n\n\t$readFile(uri: UriComponents): Promise<VSBuffer> {\n\t\treturn this._fileService.readFile(URI.revive(uri)).then(file => file.value).catch(MainThreadFileSystem._handleError);\n\t}\n\n\t$writeFile(uri: UriComponents, content: VSBuffer): Promise<void> {\n\t\treturn this._fileService.writeFile(URI.revive(uri), content)\n\t\t\t.then(() => undefined).catch(MainThreadFileSystem._handleError);\n\t}\n\n\t$rename(source: UriComponents, target: UriComponents, opts: IFileOverwriteOptions): Promise<void> {\n\t\treturn this._fileService.move(URI.revive(source), URI.revive(target), opts.overwrite)\n\t\t\t.then(() => undefined).catch(MainThreadFileSystem._handleError);\n\t}\n\n\t$copy(source: UriComponents, target: UriComponents, opts: IFileOverwriteOptions): Promise<void> {\n\t\treturn this._fileService.copy(URI.revive(source), URI.revive(target), opts.overwrite)\n\t\t\t.then(() => undefined).catch(MainThreadFileSystem._handleError);\n\t}\n\n\t$mkdir(uri: UriComponents): Promise<void> {\n\t\treturn this._fileService.createFolder(URI.revive(uri))\n\t\t\t.then(() => undefined).catch(MainThreadFileSystem._handleError);\n\t}\n\n\t$delete(uri: UriComponents, opts: IFileDeleteOptions): Promise<void> {\n\t\treturn this._fileService.del(URI.revive(uri), opts).catch(MainThreadFileSystem._handleError);\n\t}\n\n\tprivate static _handleError(err: any): never {\n\t\tif (err instanceof FileOperationError) {\n\t\t\tswitch (err.fileOperationResult) {\n\t\t\t\tcase FileOperationResult.FILE_NOT_FOUND:\n\t\t\t\t\terr.name = FileSystemProviderErrorCode.FileNotFound;\n\t\t\t\t\tbreak;\n\t\t\t\tcase FileOperationResult.FILE_IS_DIRECTORY:\n\t\t\t\t\terr.name = FileSystemProviderErrorCode.FileIsADirectory;\n\t\t\t\t\tbreak;\n\t\t\t\tcase FileOperationResult.FILE_PERMISSION_DENIED:\n\t\t\t\t\terr.name = FileSystemProviderErrorCode.NoPermissions;\n\t\t\t\t\tbreak;\n\t\t\t\tcase FileOperationResult.FILE_MOVE_CONFLICT:\n\t\t\t\t\terr.name = FileSystemProviderErrorCode.FileExists;\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t} else if (err instanceof Error) {\n\t\t\tconst code = toFileSystemProviderErrorCode(err);\n\t\t\tif (code !== FileSystemProviderErrorCode.Unknown) {\n\t\t\t\terr.name = code;\n\t\t\t}\n\t\t}\n\n\t\tthrow err;\n\t}\n\n\t$ensureActivation(scheme: string): Promise<void> {\n\t\treturn this._fileService.activateProvider(scheme);\n\t}\n\n\n}\n\nclass RemoteFileSystemProvider implements IFileSystemProviderWithFileReadWriteCapability, IFileSystemProviderWithOpenReadWriteCloseCapability, IFileSystemProviderWithFileFolderCopyCapability {\n\n\tprivate readonly _onDidChange = new Emitter<readonly IFileChange[]>();\n\tprivate readonly _registration: IDisposable;\n\n\treadonly onDidChangeFile: Event<readonly IFileChange[]> = this._onDidChange.event;\n\n\treadonly capabilities: FileSystemProviderCapabilities;\n\treadonly onDidChangeCapabilities: Event<void> = Event.None;\n\n\tconstructor(\n\t\tfileService: IFileService,\n\t\tscheme: string,\n\t\tcapabilities: FileSystemProviderCapabilities,\n\t\tpublic readonly readOnlyMessage: IMarkdownString | undefined,\n\t\tprivate readonly _handle: number,\n\t\tprivate readonly _proxy: ExtHostFileSystemShape\n\t) {\n\t\tthis.capabilities = capabilities;\n\t\tthis._registration = fileService.registerProvider(scheme, this);\n\t}\n\n\tdispose(): void {\n\t\tthis._registration.dispose();\n\t\tthis._onDidChange.dispose();\n\t}\n\n\twatch(resource: URI, opts: IWatchOptions) {\n\t\tconst session = Math.random();\n\t\tthis._proxy.$watch(this._handle, session, resource, opts);\n\t\treturn toDisposable(() => {\n\t\t\tthis._proxy.$unwatch(this._handle, session);\n\t\t});\n\t}\n\n\t$onFileSystemChange(changes: IFileChangeDto[]): void {\n\t\tthis._onDidChange.fire(changes.map(RemoteFileSystemProvider._createFileChange));\n\t}\n\n\tprivate static _createFileChange(dto: IFileChangeDto): IFileChange {\n\t\treturn { resource: URI.revive(dto.resource), type: dto.type };\n\t}\n\n\t// --- forwarding calls\n\n\tstat(resource: URI): Promise<IStat> {\n\t\treturn this._proxy.$stat(this._handle, resource).then(undefined, err => {\n\t\t\tthrow err;\n\t\t});\n\t}\n\n\treadFile(resource: URI): Promise<Uint8Array> {\n\t\treturn this._proxy.$readFile(this._handle, resource).then(buffer => buffer.buffer);\n\t}\n\n\twriteFile(resource: URI, content: Uint8Array, opts: IFileWriteOptions): Promise<void> {\n\t\treturn this._proxy.$writeFile(this._handle, resource, VSBuffer.wrap(content), opts);\n\t}\n\n\tdelete(resource: URI, opts: IFileDeleteOptions): Promise<void> {\n\t\treturn this._proxy.$delete(this._handle, resource, opts);\n\t}\n\n\tmkdir(resource: URI): Promise<void> {\n\t\treturn this._proxy.$mkdir(this._handle, resource);\n\t}\n\n\treaddir(resource: URI): Promise<[string, FileType][]> {\n\t\treturn this._proxy.$readdir(this._handle, resource);\n\t}\n\n\trename(resource: URI, target: URI, opts: IFileOverwriteOptions): Promise<void> {\n\t\treturn this._proxy.$rename(this._handle, resource, target, opts);\n\t}\n\n\tcopy(resource: URI, target: URI, opts: IFileOverwriteOptions): Promise<void> {\n\t\treturn this._proxy.$copy(this._handle, resource, target, opts);\n\t}\n\n\topen(resource: URI, opts: IFileOpenOptions): Promise<number> {\n\t\treturn this._proxy.$open(this._handle, resource, opts);\n\t}\n\n\tclose(fd: number): Promise<void> {\n\t\treturn this._proxy.$close(this._handle, fd);\n\t}\n\n\tread(fd: number, pos: number, data: Uint8Array, offset: number, length: number): Promise<number> {\n\t\treturn this._proxy.$read(this._handle, fd, pos, length).then(readData => {\n\t\t\tdata.set(readData.buffer, offset);\n\t\t\treturn readData.byteLength;\n\t\t});\n\t}\n\n\twrite(fd: number, pos: number, data: Uint8Array, offset: number, length: number): Promise<number> {\n\t\treturn this._proxy.$write(this._handle, fd, pos, VSBuffer.wrap(data).slice(offset, offset + length));\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
