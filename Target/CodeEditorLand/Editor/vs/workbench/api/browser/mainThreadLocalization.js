var u=Object.defineProperty;var l=Object.getOwnPropertyDescriptor;var m=(n,i,e,t)=>{for(var r=t>1?void 0:t?l(i,e):i,a=n.length-1,s;a>=0;a--)(s=n[a])&&(r=(t?s(i,e,r):s(r))||r);return t&&r&&u(i,e,r),r},c=(n,i)=>(e,t)=>i(e,t,n);import{Disposable as p}from"../../../../vs/base/common/lifecycle.js";import{URI as g}from"../../../../vs/base/common/uri.js";import{IFileService as v}from"../../../../vs/platform/files/common/files.js";import{ILanguagePackService as f}from"../../../../vs/platform/languagePacks/common/languagePacks.js";import{MainContext as d}from"../../../../vs/workbench/api/common/extHost.protocol.js";import{extHostNamedCustomer as x}from"../../../../vs/workbench/services/extensions/common/extHostCustomers.js";let o=class extends p{constructor(e,t,r){super();this.fileService=t;this.languagePackService=r}async $fetchBuiltInBundleUri(e,t){try{return await this.languagePackService.getBuiltInExtensionTranslationsUri(e,t)}catch{return}}async $fetchBundleContents(e){return(await this.fileService.readFile(g.revive(e))).value.toString()}};o=m([x(d.MainThreadLocalization),c(1,v),c(2,f)],o);export{o as MainThreadLocalization};
