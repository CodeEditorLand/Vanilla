{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/api/browser/mainThreadLanguages.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { URI, UriComponents } from '../../../base/common/uri.js';\nimport { ILanguageService } from '../../../editor/common/languages/language.js';\nimport { IModelService } from '../../../editor/common/services/model.js';\nimport { MainThreadLanguagesShape, MainContext, ExtHostContext, ExtHostLanguagesShape } from '../common/extHost.protocol.js';\nimport { extHostNamedCustomer, IExtHostContext } from '../../services/extensions/common/extHostCustomers.js';\nimport { IPosition } from '../../../editor/common/core/position.js';\nimport { IRange, Range } from '../../../editor/common/core/range.js';\nimport { StandardTokenType } from '../../../editor/common/encodedTokenAttributes.js';\nimport { ITextModelService } from '../../../editor/common/services/resolverService.js';\nimport { ILanguageStatus, ILanguageStatusService } from '../../services/languageStatus/common/languageStatusService.js';\nimport { DisposableMap, DisposableStore } from '../../../base/common/lifecycle.js';\n\n@extHostNamedCustomer(MainContext.MainThreadLanguages)\nexport class MainThreadLanguages implements MainThreadLanguagesShape {\n\n\tprivate readonly _disposables = new DisposableStore();\n\tprivate readonly _proxy: ExtHostLanguagesShape;\n\n\tprivate readonly _status = new DisposableMap<number>();\n\n\tconstructor(\n\t\t_extHostContext: IExtHostContext,\n\t\t@ILanguageService private readonly _languageService: ILanguageService,\n\t\t@IModelService private readonly _modelService: IModelService,\n\t\t@ITextModelService private _resolverService: ITextModelService,\n\t\t@ILanguageStatusService private readonly _languageStatusService: ILanguageStatusService,\n\t) {\n\t\tthis._proxy = _extHostContext.getProxy(ExtHostContext.ExtHostLanguages);\n\n\t\tthis._proxy.$acceptLanguageIds(_languageService.getRegisteredLanguageIds());\n\t\tthis._disposables.add(_languageService.onDidChange(_ => {\n\t\t\tthis._proxy.$acceptLanguageIds(_languageService.getRegisteredLanguageIds());\n\t\t}));\n\t}\n\n\tdispose(): void {\n\t\tthis._disposables.dispose();\n\t\tthis._status.dispose();\n\t}\n\n\tasync $changeLanguage(resource: UriComponents, languageId: string): Promise<void> {\n\n\t\tif (!this._languageService.isRegisteredLanguageId(languageId)) {\n\t\t\treturn Promise.reject(new Error(`Unknown language id: ${languageId}`));\n\t\t}\n\n\t\tconst uri = URI.revive(resource);\n\t\tconst ref = await this._resolverService.createModelReference(uri);\n\t\ttry {\n\t\t\tref.object.textEditorModel.setLanguage(this._languageService.createById(languageId));\n\t\t} finally {\n\t\t\tref.dispose();\n\t\t}\n\t}\n\n\tasync $tokensAtPosition(resource: UriComponents, position: IPosition): Promise<undefined | { type: StandardTokenType; range: IRange }> {\n\t\tconst uri = URI.revive(resource);\n\t\tconst model = this._modelService.getModel(uri);\n\t\tif (!model) {\n\t\t\treturn undefined;\n\t\t}\n\t\tmodel.tokenization.tokenizeIfCheap(position.lineNumber);\n\t\tconst tokens = model.tokenization.getLineTokens(position.lineNumber);\n\t\tconst idx = tokens.findTokenIndexAtOffset(position.column - 1);\n\t\treturn {\n\t\t\ttype: tokens.getStandardTokenType(idx),\n\t\t\trange: new Range(position.lineNumber, 1 + tokens.getStartOffset(idx), position.lineNumber, 1 + tokens.getEndOffset(idx))\n\t\t};\n\t}\n\n\t// --- language status\n\n\t$setLanguageStatus(handle: number, status: ILanguageStatus): void {\n\t\tthis._status.get(handle)?.dispose();\n\t\tthis._status.set(handle, this._languageStatusService.addStatus(status));\n\t}\n\n\t$removeLanguageStatus(handle: number): void {\n\t\tthis._status.get(handle)?.dispose();\n\t}\n}\n"],
  "mappings": ";;;;;;;;;;;;AAKA,SAAS,KAAK,qBAAqB;AACnC,SAAS,wBAAwB;AACjC,SAAS,qBAAqB;AAC9B,SAAS,0BAA0B,aAAa,gBAAgB,6BAA6B;AAC7F,SAAS,sBAAsB,uBAAuB;AACtD,SAAS,iBAAiB;AAC1B,SAAS,QAAQ,aAAa;AAC9B,SAAS,yBAAyB;AAClC,SAAS,yBAAyB;AAClC,SAAS,iBAAiB,8BAA8B;AACxD,SAAS,eAAe,uBAAuB;AAGxC,IAAM,sBAAN,MAA8D;AAAA,EAOpE,YACC,iBACmC,kBACH,eACL,kBACc,wBACxC;AAJkC;AACH;AACL;AACc;AAEzC,SAAK,SAAS,gBAAgB,SAAS,eAAe,gBAAgB;AAEtE,SAAK,OAAO,mBAAmB,iBAAiB,yBAAyB,CAAC;AAC1E,SAAK,aAAa,IAAI,iBAAiB,YAAY,OAAK;AACvD,WAAK,OAAO,mBAAmB,iBAAiB,yBAAyB,CAAC;AAAA,IAC3E,CAAC,CAAC;AAAA,EACH;AAAA,EAlBiB,eAAe,IAAI,gBAAgB;AAAA,EACnC;AAAA,EAEA,UAAU,IAAI,cAAsB;AAAA,EAiBrD,UAAgB;AACf,SAAK,aAAa,QAAQ;AAC1B,SAAK,QAAQ,QAAQ;AAAA,EACtB;AAAA,EAEA,MAAM,gBAAgB,UAAyB,YAAmC;AAEjF,QAAI,CAAC,KAAK,iBAAiB,uBAAuB,UAAU,GAAG;AAC9D,aAAO,QAAQ,OAAO,IAAI,MAAM,wBAAwB,UAAU,EAAE,CAAC;AAAA,IACtE;AAEA,UAAM,MAAM,IAAI,OAAO,QAAQ;AAC/B,UAAM,MAAM,MAAM,KAAK,iBAAiB,qBAAqB,GAAG;AAChE,QAAI;AACH,UAAI,OAAO,gBAAgB,YAAY,KAAK,iBAAiB,WAAW,UAAU,CAAC;AAAA,IACpF,UAAE;AACD,UAAI,QAAQ;AAAA,IACb;AAAA,EACD;AAAA,EAEA,MAAM,kBAAkB,UAAyB,UAAsF;AACtI,UAAM,MAAM,IAAI,OAAO,QAAQ;AAC/B,UAAM,QAAQ,KAAK,cAAc,SAAS,GAAG;AAC7C,QAAI,CAAC,OAAO;AACX,aAAO;AAAA,IACR;AACA,UAAM,aAAa,gBAAgB,SAAS,UAAU;AACtD,UAAM,SAAS,MAAM,aAAa,cAAc,SAAS,UAAU;AACnE,UAAM,MAAM,OAAO,uBAAuB,SAAS,SAAS,CAAC;AAC7D,WAAO;AAAA,MACN,MAAM,OAAO,qBAAqB,GAAG;AAAA,MACrC,OAAO,IAAI,MAAM,SAAS,YAAY,IAAI,OAAO,eAAe,GAAG,GAAG,SAAS,YAAY,IAAI,OAAO,aAAa,GAAG,CAAC;AAAA,IACxH;AAAA,EACD;AAAA;AAAA,EAIA,mBAAmB,QAAgB,QAA+B;AACjE,SAAK,QAAQ,IAAI,MAAM,GAAG,QAAQ;AAClC,SAAK,QAAQ,IAAI,QAAQ,KAAK,uBAAuB,UAAU,MAAM,CAAC;AAAA,EACvE;AAAA,EAEA,sBAAsB,QAAsB;AAC3C,SAAK,QAAQ,IAAI,MAAM,GAAG,QAAQ;AAAA,EACnC;AACD;AAnEqE;AAAxD,sBAAN;AAAA,EADN,qBAAqB,YAAY,mBAAmB;AAAA,EAUlD;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,GAZU;",
  "names": []
}
