{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/api/browser/mainThreadChatVariables.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { DisposableMap } from '../../../base/common/lifecycle.js';\nimport { revive } from '../../../base/common/marshalling.js';\nimport { ExtHostChatVariablesShape, ExtHostContext, IChatVariableResolverProgressDto, MainContext, MainThreadChatVariablesShape } from '../common/extHost.protocol.js';\nimport { IChatRequestVariableValue, IChatVariableData, IChatVariableResolverProgress, IChatVariablesService } from '../../contrib/chat/common/chatVariables.js';\nimport { IExtHostContext, extHostNamedCustomer } from '../../services/extensions/common/extHostCustomers.js';\n\n@extHostNamedCustomer(MainContext.MainThreadChatVariables)\nexport class MainThreadChatVariables implements MainThreadChatVariablesShape {\n\n\tprivate readonly _proxy: ExtHostChatVariablesShape;\n\tprivate readonly _variables = new DisposableMap<number>();\n\tprivate readonly _pendingProgress = new Map<string, (part: IChatVariableResolverProgress) => void>();\n\n\tconstructor(\n\t\textHostContext: IExtHostContext,\n\t\t@IChatVariablesService private readonly _chatVariablesService: IChatVariablesService,\n\t) {\n\t\tthis._proxy = extHostContext.getProxy(ExtHostContext.ExtHostChatVariables);\n\t}\n\n\tdispose(): void {\n\t\tthis._variables.clearAndDisposeAll();\n\t}\n\n\t$registerVariable(handle: number, data: IChatVariableData): void {\n\t\tconst registration = this._chatVariablesService.registerVariable(data, async (messageText, _arg, model, progress, token) => {\n\t\t\tconst varRequestId = `${model.sessionId}-${handle}`;\n\t\t\tthis._pendingProgress.set(varRequestId, progress);\n\t\t\tconst result = revive<IChatRequestVariableValue>(await this._proxy.$resolveVariable(handle, varRequestId, messageText, token));\n\n\t\t\tthis._pendingProgress.delete(varRequestId);\n\t\t\treturn result as any; // 'revive' type signature doesn't like this type for some reason\n\t\t});\n\t\tthis._variables.set(handle, registration);\n\t}\n\n\tasync $handleProgressChunk(requestId: string, progress: IChatVariableResolverProgressDto): Promise<number | void> {\n\t\tconst revivedProgress = revive(progress);\n\t\tthis._pendingProgress.get(requestId)?.(revivedProgress as IChatVariableResolverProgress);\n\t}\n\n\t$unregisterVariable(handle: number): void {\n\t\tthis._variables.deleteAndDispose(handle);\n\t}\n}\n"],
  "mappings": ";;;;;;;;;;;;AAKA,SAAS,qBAAqB;AAC9B,SAAS,cAAc;AACvB,SAAS,2BAA2B,gBAAgB,kCAAkC,aAAa,oCAAoC;AACvI,SAAS,2BAA2B,mBAAmB,+BAA+B,6BAA6B;AACnH,SAAS,iBAAiB,4BAA4B;AAG/C,IAAM,0BAAN,MAAsE;AAAA,EAM5E,YACC,gBACwC,uBACvC;AADuC;AAExC,SAAK,SAAS,eAAe,SAAS,eAAe,oBAAoB;AAAA,EAC1E;AAAA,EATiB;AAAA,EACA,aAAa,IAAI,cAAsB;AAAA,EACvC,mBAAmB,oBAAI,IAA2D;AAAA,EASnG,UAAgB;AACf,SAAK,WAAW,mBAAmB;AAAA,EACpC;AAAA,EAEA,kBAAkB,QAAgB,MAA+B;AAChE,UAAM,eAAe,KAAK,sBAAsB,iBAAiB,MAAM,OAAO,aAAa,MAAM,OAAO,UAAU,UAAU;AAC3H,YAAM,eAAe,GAAG,MAAM,SAAS,IAAI,MAAM;AACjD,WAAK,iBAAiB,IAAI,cAAc,QAAQ;AAChD,YAAM,SAAS,OAAkC,MAAM,KAAK,OAAO,iBAAiB,QAAQ,cAAc,aAAa,KAAK,CAAC;AAE7H,WAAK,iBAAiB,OAAO,YAAY;AACzC,aAAO;AAAA,IACR,CAAC;AACD,SAAK,WAAW,IAAI,QAAQ,YAAY;AAAA,EACzC;AAAA,EAEA,MAAM,qBAAqB,WAAmB,UAAoE;AACjH,UAAM,kBAAkB,OAAO,QAAQ;AACvC,SAAK,iBAAiB,IAAI,SAAS,IAAI,eAAgD;AAAA,EACxF;AAAA,EAEA,oBAAoB,QAAsB;AACzC,SAAK,WAAW,iBAAiB,MAAM;AAAA,EACxC;AACD;AArC6E;AAAhE,0BAAN;AAAA,EADN,qBAAqB,YAAY,uBAAuB;AAAA,EAStD;AAAA,GARU;",
  "names": []
}
