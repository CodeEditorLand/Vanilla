var S=Object.defineProperty;var l=Object.getOwnPropertyDescriptor;var h=(s,e,o,t)=>{for(var r=t>1?void 0:t?l(e,o):e,a=s.length-1,i;a>=0;a--)(i=s[a])&&(r=(t?i(e,o,r):i(r))||r);return t&&r&&S(e,o,r),r},d=(s,e)=>(o,t)=>e(o,t,s);import{CancellationToken as b}from"../../../base/common/cancellation.js";import{dispose as c}from"../../../base/common/lifecycle.js";import{URI as x}from"../../../base/common/uri.js";import{IShareService as I}from"../../contrib/share/common/share.js";import{extHostNamedCustomer as u}from"../../services/extensions/common/extHostCustomers.js";import{ExtHostContext as D,MainContext as f}from"../common/extHost.protocol.js";let p=class{constructor(e,o){this.shareService=o;this.proxy=e.getProxy(D.ExtHostShare)}proxy;providers=new Map;providerDisposables=new Map;$registerShareProvider(e,o,t,r,a){const i={id:t,label:r,selector:o,priority:a,provideShare:async m=>{const v=await this.proxy.$provideShare(e,m,b.None);return typeof v=="string"?v:x.revive(v)}};this.providers.set(e,i);const n=this.shareService.registerShareProvider(i);this.providerDisposables.set(e,n)}$unregisterShareProvider(e){this.providers.has(e)&&this.providers.delete(e),this.providerDisposables.has(e)&&this.providerDisposables.delete(e)}dispose(){this.providers.clear(),c(this.providerDisposables.values()),this.providerDisposables.clear()}};p=h([u(f.MainThreadShare),d(1,I)],p);export{p as MainThreadShare};
