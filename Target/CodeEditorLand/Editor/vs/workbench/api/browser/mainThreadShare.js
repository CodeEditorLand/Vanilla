var S=Object.defineProperty;var l=Object.getOwnPropertyDescriptor;var h=(s,e,t,o)=>{for(var r=o>1?void 0:o?l(e,t):e,p=s.length-1,i;p>=0;p--)(i=s[p])&&(r=(o?i(e,t,r):i(r))||r);return o&&r&&S(e,t,r),r},d=(s,e)=>(t,o)=>e(t,o,s);import{CancellationToken as b}from"../../../base/common/cancellation.js";import{dispose as c}from"../../../base/common/lifecycle.js";import{URI as x}from"../../../base/common/uri.js";import{IShareService as I}from"../../contrib/share/common/share.js";import{extHostNamedCustomer as y}from"../../services/extensions/common/extHostCustomers.js";import{ExtHostContext as u,MainContext as D}from"../common/extHost.protocol.js";let a=class{constructor(e,t){this.shareService=t;this.proxy=e.getProxy(u.ExtHostShare)}proxy;providers=new Map;providerDisposables=new Map;$registerShareProvider(e,t,o,r,p){const i={id:o,label:r,selector:t,priority:p,provideShare:async m=>{const v=await this.proxy.$provideShare(e,m,b.None);return typeof v=="string"?v:x.revive(v)}};this.providers.set(e,i);const n=this.shareService.registerShareProvider(i);this.providerDisposables.set(e,n)}$unregisterShareProvider(e){this.providers.has(e)&&this.providers.delete(e),this.providerDisposables.has(e)&&this.providerDisposables.delete(e)}dispose(){this.providers.clear(),c(this.providerDisposables.values()),this.providerDisposables.clear()}};a=h([y(D.MainThreadShare),d(1,I)],a);export{a as MainThreadShare};
