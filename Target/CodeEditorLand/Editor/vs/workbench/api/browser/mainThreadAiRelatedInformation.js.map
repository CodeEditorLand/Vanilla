{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/api/browser/mainThreadAiRelatedInformation.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CancellationToken } from '../../../base/common/cancellation.js';\nimport { Disposable, DisposableMap } from '../../../base/common/lifecycle.js';\nimport { ExtHostAiRelatedInformationShape, ExtHostContext, MainContext, MainThreadAiRelatedInformationShape } from '../common/extHost.protocol.js';\nimport { RelatedInformationType } from '../common/extHostTypes.js';\nimport { IAiRelatedInformationProvider, IAiRelatedInformationService, RelatedInformationResult } from '../../services/aiRelatedInformation/common/aiRelatedInformation.js';\nimport { IExtHostContext, extHostNamedCustomer } from '../../services/extensions/common/extHostCustomers.js';\n\n@extHostNamedCustomer(MainContext.MainThreadAiRelatedInformation)\nexport class MainThreadAiRelatedInformation extends Disposable implements MainThreadAiRelatedInformationShape {\n\tprivate readonly _proxy: ExtHostAiRelatedInformationShape;\n\tprivate readonly _registrations = this._register(new DisposableMap<number>());\n\n\tconstructor(\n\t\tcontext: IExtHostContext,\n\t\t@IAiRelatedInformationService private readonly _aiRelatedInformationService: IAiRelatedInformationService,\n\t) {\n\t\tsuper();\n\t\tthis._proxy = context.getProxy(ExtHostContext.ExtHostAiRelatedInformation);\n\t}\n\n\t$getAiRelatedInformation(query: string, types: RelatedInformationType[]): Promise<RelatedInformationResult[]> {\n\t\t// TODO: use a real cancellation token\n\t\treturn this._aiRelatedInformationService.getRelatedInformation(query, types, CancellationToken.None);\n\t}\n\n\t$registerAiRelatedInformationProvider(handle: number, type: RelatedInformationType): void {\n\t\tconst provider: IAiRelatedInformationProvider = {\n\t\t\tprovideAiRelatedInformation: (query, token) => {\n\t\t\t\treturn this._proxy.$provideAiRelatedInformation(handle, query, token);\n\t\t\t},\n\t\t};\n\t\tthis._registrations.set(handle, this._aiRelatedInformationService.registerAiRelatedInformationProvider(type, provider));\n\t}\n\n\t$unregisterAiRelatedInformationProvider(handle: number): void {\n\t\tthis._registrations.deleteAndDispose(handle);\n\t}\n}\n"],
  "mappings": ";;;;;;;;;;;;AAKA,SAAS,yBAAyB;AAClC,SAAS,YAAY,qBAAqB;AAC1C,SAAS,kCAAkC,gBAAgB,aAAa,2CAA2C;AACnH,SAAS,8BAA8B;AACvC,SAAS,+BAA+B,8BAA8B,gCAAgC;AACtG,SAAS,iBAAiB,4BAA4B;AAG/C,IAAM,iCAAN,cAA6C,WAA0D;AAAA,EAI7G,YACC,SAC+C,8BAC9C;AACD,UAAM;AAFyC;AAG/C,SAAK,SAAS,QAAQ,SAAS,eAAe,2BAA2B;AAAA,EAC1E;AAAA,EATiB;AAAA,EACA,iBAAiB,KAAK,UAAU,IAAI,cAAsB,CAAC;AAAA,EAU5E,yBAAyB,OAAe,OAAsE;AAE7G,WAAO,KAAK,6BAA6B,sBAAsB,OAAO,OAAO,kBAAkB,IAAI;AAAA,EACpG;AAAA,EAEA,sCAAsC,QAAgB,MAAoC;AACzF,UAAM,WAA0C;AAAA,MAC/C,6BAA6B,wBAAC,OAAO,UAAU;AAC9C,eAAO,KAAK,OAAO,6BAA6B,QAAQ,OAAO,KAAK;AAAA,MACrE,GAF6B;AAAA,IAG9B;AACA,SAAK,eAAe,IAAI,QAAQ,KAAK,6BAA6B,qCAAqC,MAAM,QAAQ,CAAC;AAAA,EACvH;AAAA,EAEA,wCAAwC,QAAsB;AAC7D,SAAK,eAAe,iBAAiB,MAAM;AAAA,EAC5C;AACD;AA7B8G;AAAjG,iCAAN;AAAA,EADN,qBAAqB,YAAY,8BAA8B;AAAA,EAO7D;AAAA,GANU;",
  "names": []
}
