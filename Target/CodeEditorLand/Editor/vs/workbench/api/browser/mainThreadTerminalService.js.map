{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/api/browser/mainThreadTerminalService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { DisposableStore, Disposable, IDisposable, MutableDisposable, combinedDisposable } from '../../../base/common/lifecycle.js';\nimport { ExtHostContext, ExtHostTerminalServiceShape, MainThreadTerminalServiceShape, MainContext, TerminalLaunchConfig, ITerminalDimensionsDto, ExtHostTerminalIdentifier, TerminalQuickFix, ITerminalCommandDto } from '../common/extHost.protocol.js';\nimport { extHostNamedCustomer, IExtHostContext } from '../../services/extensions/common/extHostCustomers.js';\nimport { URI } from '../../../base/common/uri.js';\nimport { IInstantiationService } from '../../../platform/instantiation/common/instantiation.js';\nimport { ILogService } from '../../../platform/log/common/log.js';\nimport { IProcessProperty, IProcessReadyWindowsPty, IShellLaunchConfig, IShellLaunchConfigDto, ITerminalOutputMatch, ITerminalOutputMatcher, ProcessPropertyType, TerminalExitReason, TerminalLocation } from '../../../platform/terminal/common/terminal.js';\nimport { TerminalDataBufferer } from '../../../platform/terminal/common/terminalDataBuffering.js';\nimport { ITerminalEditorService, ITerminalExternalLinkProvider, ITerminalGroupService, ITerminalInstance, ITerminalLink, ITerminalService } from '../../contrib/terminal/browser/terminal.js';\nimport { TerminalProcessExtHostProxy } from '../../contrib/terminal/browser/terminalProcessExtHostProxy.js';\nimport { IEnvironmentVariableService } from '../../contrib/terminal/common/environmentVariable.js';\nimport { deserializeEnvironmentDescriptionMap, deserializeEnvironmentVariableCollection, serializeEnvironmentVariableCollection } from '../../../platform/terminal/common/environmentVariableShared.js';\nimport { IStartExtensionTerminalRequest, ITerminalProcessExtHostProxy, ITerminalProfileResolverService, ITerminalProfileService } from '../../contrib/terminal/common/terminal.js';\nimport { IRemoteAgentService } from '../../services/remote/common/remoteAgentService.js';\nimport { OperatingSystem, OS } from '../../../base/common/platform.js';\nimport { TerminalEditorLocationOptions } from 'vscode';\nimport { Promises } from '../../../base/common/async.js';\nimport { ISerializableEnvironmentDescriptionMap, ISerializableEnvironmentVariableCollection } from '../../../platform/terminal/common/environmentVariable.js';\nimport { ITerminalLinkProviderService } from '../../contrib/terminalContrib/links/browser/links.js';\nimport { ITerminalQuickFixService, ITerminalQuickFix, TerminalQuickFixType } from '../../contrib/terminalContrib/quickFix/browser/quickFix.js';\nimport { TerminalCapability } from '../../../platform/terminal/common/capabilities/capabilities.js';\n\n@extHostNamedCustomer(MainContext.MainThreadTerminalService)\nexport class MainThreadTerminalService implements MainThreadTerminalServiceShape {\n\n\tprivate readonly _store = new DisposableStore();\n\tprivate readonly _proxy: ExtHostTerminalServiceShape;\n\n\t/**\n\t * Stores a map from a temporary terminal id (a UUID generated on the extension host side)\n\t * to a numeric terminal id (an id generated on the renderer side)\n\t * This comes in play only when dealing with terminals created on the extension host side\n\t */\n\tprivate readonly _extHostTerminals = new Map<string, Promise<ITerminalInstance>>();\n\tprivate readonly _terminalProcessProxies = new Map<number, ITerminalProcessExtHostProxy>();\n\tprivate readonly _profileProviders = new Map<string, IDisposable>();\n\tprivate readonly _quickFixProviders = new Map<string, IDisposable>();\n\tprivate readonly _dataEventTracker = new MutableDisposable<TerminalDataEventTracker>();\n\tprivate readonly _sendCommandEventListener = new MutableDisposable();\n\n\t/**\n\t * A single shared terminal link provider for the exthost. When an ext registers a link\n\t * provider, this is registered with the terminal on the renderer side and all links are\n\t * provided through this, even from multiple ext link providers. Xterm should remove lower\n\t * priority intersecting links itself.\n\t */\n\tprivate readonly _linkProvider = this._store.add(new MutableDisposable());\n\n\tprivate _os: OperatingSystem = OS;\n\n\tconstructor(\n\t\tprivate readonly _extHostContext: IExtHostContext,\n\t\t@ITerminalService private readonly _terminalService: ITerminalService,\n\t\t@ITerminalLinkProviderService private readonly _terminalLinkProviderService: ITerminalLinkProviderService,\n\t\t@ITerminalQuickFixService private readonly _terminalQuickFixService: ITerminalQuickFixService,\n\t\t@IInstantiationService private readonly _instantiationService: IInstantiationService,\n\t\t@IEnvironmentVariableService private readonly _environmentVariableService: IEnvironmentVariableService,\n\t\t@ILogService private readonly _logService: ILogService,\n\t\t@ITerminalProfileResolverService private readonly _terminalProfileResolverService: ITerminalProfileResolverService,\n\t\t@IRemoteAgentService remoteAgentService: IRemoteAgentService,\n\t\t@ITerminalGroupService private readonly _terminalGroupService: ITerminalGroupService,\n\t\t@ITerminalEditorService private readonly _terminalEditorService: ITerminalEditorService,\n\t\t@ITerminalProfileService private readonly _terminalProfileService: ITerminalProfileService\n\t) {\n\t\tthis._proxy = _extHostContext.getProxy(ExtHostContext.ExtHostTerminalService);\n\n\t\t// ITerminalService listeners\n\t\tthis._store.add(_terminalService.onDidCreateInstance((instance) => {\n\t\t\tthis._onTerminalOpened(instance);\n\t\t\tthis._onInstanceDimensionsChanged(instance);\n\t\t}));\n\n\t\tthis._store.add(_terminalService.onDidDisposeInstance(instance => this._onTerminalDisposed(instance)));\n\t\tthis._store.add(_terminalService.onAnyInstanceProcessIdReady(instance => this._onTerminalProcessIdReady(instance)));\n\t\tthis._store.add(_terminalService.onDidChangeInstanceDimensions(instance => this._onInstanceDimensionsChanged(instance)));\n\t\tthis._store.add(_terminalService.onAnyInstanceMaximumDimensionsChange(instance => this._onInstanceMaximumDimensionsChanged(instance)));\n\t\tthis._store.add(_terminalService.onDidRequestStartExtensionTerminal(e => this._onRequestStartExtensionTerminal(e)));\n\t\tthis._store.add(_terminalService.onDidChangeActiveInstance(instance => this._onActiveTerminalChanged(instance ? instance.instanceId : null)));\n\t\tthis._store.add(_terminalService.onAnyInstanceTitleChange(instance => instance && this._onTitleChanged(instance.instanceId, instance.title)));\n\t\tthis._store.add(_terminalService.onAnyInstanceDataInput(instance => this._proxy.$acceptTerminalInteraction(instance.instanceId)));\n\t\tthis._store.add(_terminalService.onAnyInstanceSelectionChange(instance => this._proxy.$acceptTerminalSelection(instance.instanceId, instance.selection)));\n\n\t\t// Set initial ext host state\n\t\tfor (const instance of this._terminalService.instances) {\n\t\t\tthis._onTerminalOpened(instance);\n\t\t\tinstance.processReady.then(() => this._onTerminalProcessIdReady(instance));\n\t\t}\n\t\tconst activeInstance = this._terminalService.activeInstance;\n\t\tif (activeInstance) {\n\t\t\tthis._proxy.$acceptActiveTerminalChanged(activeInstance.instanceId);\n\t\t}\n\t\tif (this._environmentVariableService.collections.size > 0) {\n\t\t\tconst collectionAsArray = [...this._environmentVariableService.collections.entries()];\n\t\t\tconst serializedCollections: [string, ISerializableEnvironmentVariableCollection][] = collectionAsArray.map(e => {\n\t\t\t\treturn [e[0], serializeEnvironmentVariableCollection(e[1].map)];\n\t\t\t});\n\t\t\tthis._proxy.$initEnvironmentVariableCollections(serializedCollections);\n\t\t}\n\n\t\tremoteAgentService.getEnvironment().then(async env => {\n\t\t\tthis._os = env?.os || OS;\n\t\t\tthis._updateDefaultProfile();\n\t\t});\n\t\tthis._store.add(this._terminalProfileService.onDidChangeAvailableProfiles(() => this._updateDefaultProfile()));\n\t}\n\n\tpublic dispose(): void {\n\t\tthis._store.dispose();\n\t\tfor (const provider of this._profileProviders.values()) {\n\t\t\tprovider.dispose();\n\t\t}\n\t\tfor (const provider of this._quickFixProviders.values()) {\n\t\t\tprovider.dispose();\n\t\t}\n\t}\n\n\tprivate async _updateDefaultProfile() {\n\t\tconst remoteAuthority = this._extHostContext.remoteAuthority ?? undefined;\n\t\tconst defaultProfile = this._terminalProfileResolverService.getDefaultProfile({ remoteAuthority, os: this._os });\n\t\tconst defaultAutomationProfile = this._terminalProfileResolverService.getDefaultProfile({ remoteAuthority, os: this._os, allowAutomationShell: true });\n\t\tthis._proxy.$acceptDefaultProfile(...await Promise.all([defaultProfile, defaultAutomationProfile]));\n\t}\n\n\tprivate async _getTerminalInstance(id: ExtHostTerminalIdentifier): Promise<ITerminalInstance | undefined> {\n\t\tif (typeof id === 'string') {\n\t\t\treturn this._extHostTerminals.get(id);\n\t\t}\n\t\treturn this._terminalService.getInstanceFromId(id);\n\t}\n\n\tpublic async $createTerminal(extHostTerminalId: string, launchConfig: TerminalLaunchConfig): Promise<void> {\n\t\tconst shellLaunchConfig: IShellLaunchConfig = {\n\t\t\tname: launchConfig.name,\n\t\t\texecutable: launchConfig.shellPath,\n\t\t\targs: launchConfig.shellArgs,\n\t\t\tcwd: typeof launchConfig.cwd === 'string' ? launchConfig.cwd : URI.revive(launchConfig.cwd),\n\t\t\ticon: launchConfig.icon,\n\t\t\tcolor: launchConfig.color,\n\t\t\tinitialText: launchConfig.initialText,\n\t\t\twaitOnExit: launchConfig.waitOnExit,\n\t\t\tignoreConfigurationCwd: true,\n\t\t\tenv: launchConfig.env,\n\t\t\tstrictEnv: launchConfig.strictEnv,\n\t\t\thideFromUser: launchConfig.hideFromUser,\n\t\t\tcustomPtyImplementation: launchConfig.isExtensionCustomPtyTerminal\n\t\t\t\t? (id, cols, rows) => new TerminalProcessExtHostProxy(id, cols, rows, this._terminalService)\n\t\t\t\t: undefined,\n\t\t\textHostTerminalId,\n\t\t\tforceShellIntegration: launchConfig.forceShellIntegration,\n\t\t\tisFeatureTerminal: launchConfig.isFeatureTerminal,\n\t\t\tisExtensionOwnedTerminal: launchConfig.isExtensionOwnedTerminal,\n\t\t\tuseShellEnvironment: launchConfig.useShellEnvironment,\n\t\t\tisTransient: launchConfig.isTransient\n\t\t};\n\t\tconst terminal = Promises.withAsyncBody<ITerminalInstance>(async r => {\n\t\t\tconst terminal = await this._terminalService.createTerminal({\n\t\t\t\tconfig: shellLaunchConfig,\n\t\t\t\tlocation: await this._deserializeParentTerminal(launchConfig.location)\n\t\t\t});\n\t\t\tr(terminal);\n\t\t});\n\t\tthis._extHostTerminals.set(extHostTerminalId, terminal);\n\t\tconst terminalInstance = await terminal;\n\t\tthis._store.add(terminalInstance.onDisposed(() => {\n\t\t\tthis._extHostTerminals.delete(extHostTerminalId);\n\t\t}));\n\t}\n\n\tprivate async _deserializeParentTerminal(location?: TerminalLocation | TerminalEditorLocationOptions | { parentTerminal: ExtHostTerminalIdentifier } | { splitActiveTerminal: boolean; location?: TerminalLocation }): Promise<TerminalLocation | TerminalEditorLocationOptions | { parentTerminal: ITerminalInstance } | { splitActiveTerminal: boolean } | undefined> {\n\t\tif (typeof location === 'object' && 'parentTerminal' in location) {\n\t\t\tconst parentTerminal = await this._extHostTerminals.get(location.parentTerminal.toString());\n\t\t\treturn parentTerminal ? { parentTerminal } : undefined;\n\t\t}\n\t\treturn location;\n\t}\n\n\tpublic async $show(id: ExtHostTerminalIdentifier, preserveFocus: boolean): Promise<void> {\n\t\tconst terminalInstance = await this._getTerminalInstance(id);\n\t\tif (terminalInstance) {\n\t\t\tthis._terminalService.setActiveInstance(terminalInstance);\n\t\t\tif (terminalInstance.target === TerminalLocation.Editor) {\n\t\t\t\tawait this._terminalEditorService.revealActiveEditor(preserveFocus);\n\t\t\t} else {\n\t\t\t\tawait this._terminalGroupService.showPanel(!preserveFocus);\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic async $hide(id: ExtHostTerminalIdentifier): Promise<void> {\n\t\tconst instanceToHide = await this._getTerminalInstance(id);\n\t\tconst activeInstance = this._terminalService.activeInstance;\n\t\tif (activeInstance && activeInstance.instanceId === instanceToHide?.instanceId && activeInstance.target !== TerminalLocation.Editor) {\n\t\t\tthis._terminalGroupService.hidePanel();\n\t\t}\n\t}\n\n\tpublic async $dispose(id: ExtHostTerminalIdentifier): Promise<void> {\n\t\t(await this._getTerminalInstance(id))?.dispose(TerminalExitReason.Extension);\n\t}\n\n\tpublic async $sendText(id: ExtHostTerminalIdentifier, text: string, shouldExecute: boolean): Promise<void> {\n\t\tconst instance = await this._getTerminalInstance(id);\n\t\tawait instance?.sendText(text, shouldExecute);\n\t}\n\n\tpublic $sendProcessExit(terminalId: number, exitCode: number | undefined): void {\n\t\tthis._terminalProcessProxies.get(terminalId)?.emitExit(exitCode);\n\t}\n\n\tpublic $startSendingDataEvents(): void {\n\t\tif (!this._dataEventTracker.value) {\n\t\t\tthis._dataEventTracker.value = this._instantiationService.createInstance(TerminalDataEventTracker, (id, data) => {\n\t\t\t\tthis._onTerminalData(id, data);\n\t\t\t});\n\t\t\t// Send initial events if they exist\n\t\t\tfor (const instance of this._terminalService.instances) {\n\t\t\t\tfor (const data of instance.initialDataEvents || []) {\n\t\t\t\t\tthis._onTerminalData(instance.instanceId, data);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic $stopSendingDataEvents(): void {\n\t\tthis._dataEventTracker.clear();\n\t}\n\n\tpublic $startSendingCommandEvents(): void {\n\t\tif (this._sendCommandEventListener.value) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst multiplexer = this._terminalService.createOnInstanceCapabilityEvent(TerminalCapability.CommandDetection, capability => capability.onCommandFinished);\n\t\tconst sub = multiplexer.event(e => {\n\t\t\tthis._onDidExecuteCommand(e.instance.instanceId, {\n\t\t\t\tcommandLine: e.data.command,\n\t\t\t\t// TODO: Convert to URI if possible\n\t\t\t\tcwd: e.data.cwd,\n\t\t\t\texitCode: e.data.exitCode,\n\t\t\t\toutput: e.data.getOutput()\n\t\t\t});\n\t\t});\n\t\tthis._sendCommandEventListener.value = combinedDisposable(multiplexer, sub);\n\t}\n\n\tpublic $stopSendingCommandEvents(): void {\n\t\tthis._sendCommandEventListener.clear();\n\t}\n\n\tpublic $startLinkProvider(): void {\n\t\tthis._linkProvider.value = this._terminalLinkProviderService.registerLinkProvider(new ExtensionTerminalLinkProvider(this._proxy));\n\t}\n\n\tpublic $stopLinkProvider(): void {\n\t\tthis._linkProvider.clear();\n\t}\n\n\tpublic $registerProcessSupport(isSupported: boolean): void {\n\t\tthis._terminalService.registerProcessSupport(isSupported);\n\t}\n\n\tpublic $registerProfileProvider(id: string, extensionIdentifier: string): void {\n\t\t// Proxy profile provider requests through the extension host\n\t\tthis._profileProviders.set(id, this._terminalProfileService.registerTerminalProfileProvider(extensionIdentifier, id, {\n\t\t\tcreateContributedTerminalProfile: async (options) => {\n\t\t\t\treturn this._proxy.$createContributedProfileTerminal(id, options);\n\t\t\t}\n\t\t}));\n\t}\n\n\tpublic $unregisterProfileProvider(id: string): void {\n\t\tthis._profileProviders.get(id)?.dispose();\n\t\tthis._profileProviders.delete(id);\n\t}\n\n\tpublic async $registerQuickFixProvider(id: string, extensionId: string): Promise<void> {\n\t\tthis._quickFixProviders.set(id, this._terminalQuickFixService.registerQuickFixProvider(id, {\n\t\t\tprovideTerminalQuickFixes: async (terminalCommand, lines, options, token) => {\n\t\t\t\tif (token.isCancellationRequested) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tif (options.outputMatcher?.length && options.outputMatcher.length > 40) {\n\t\t\t\t\toptions.outputMatcher.length = 40;\n\t\t\t\t\tthis._logService.warn('Cannot exceed output matcher length of 40');\n\t\t\t\t}\n\t\t\t\tconst commandLineMatch = terminalCommand.command.match(options.commandLineMatcher);\n\t\t\t\tif (!commandLineMatch || !lines) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tconst outputMatcher = options.outputMatcher;\n\t\t\t\tlet outputMatch;\n\t\t\t\tif (outputMatcher) {\n\t\t\t\t\toutputMatch = getOutputMatchForLines(lines, outputMatcher);\n\t\t\t\t}\n\t\t\t\tif (!outputMatch) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tconst matchResult = { commandLineMatch, outputMatch, commandLine: terminalCommand.command };\n\n\t\t\t\tif (matchResult) {\n\t\t\t\t\tconst result = await this._proxy.$provideTerminalQuickFixes(id, matchResult, token);\n\t\t\t\t\tif (result && Array.isArray(result)) {\n\t\t\t\t\t\treturn result.map(r => parseQuickFix(id, extensionId, r));\n\t\t\t\t\t} else if (result) {\n\t\t\t\t\t\treturn parseQuickFix(id, extensionId, result);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn;\n\t\t\t}\n\t\t}));\n\t}\n\n\tpublic $unregisterQuickFixProvider(id: string): void {\n\t\tthis._quickFixProviders.get(id)?.dispose();\n\t\tthis._quickFixProviders.delete(id);\n\t}\n\n\tprivate _onActiveTerminalChanged(terminalId: number | null): void {\n\t\tthis._proxy.$acceptActiveTerminalChanged(terminalId);\n\t}\n\n\tprivate _onTerminalData(terminalId: number, data: string): void {\n\t\tthis._proxy.$acceptTerminalProcessData(terminalId, data);\n\t}\n\n\tprivate _onDidExecuteCommand(terminalId: number, command: ITerminalCommandDto): void {\n\t\tthis._proxy.$acceptDidExecuteCommand(terminalId, command);\n\t}\n\n\tprivate _onTitleChanged(terminalId: number, name: string): void {\n\t\tthis._proxy.$acceptTerminalTitleChange(terminalId, name);\n\t}\n\n\tprivate _onTerminalDisposed(terminalInstance: ITerminalInstance): void {\n\t\tthis._proxy.$acceptTerminalClosed(terminalInstance.instanceId, terminalInstance.exitCode, terminalInstance.exitReason ?? TerminalExitReason.Unknown);\n\t}\n\n\tprivate _onTerminalOpened(terminalInstance: ITerminalInstance): void {\n\t\tconst extHostTerminalId = terminalInstance.shellLaunchConfig.extHostTerminalId;\n\t\tconst shellLaunchConfigDto: IShellLaunchConfigDto = {\n\t\t\tname: terminalInstance.shellLaunchConfig.name,\n\t\t\texecutable: terminalInstance.shellLaunchConfig.executable,\n\t\t\targs: terminalInstance.shellLaunchConfig.args,\n\t\t\tcwd: terminalInstance.shellLaunchConfig.cwd,\n\t\t\tenv: terminalInstance.shellLaunchConfig.env,\n\t\t\thideFromUser: terminalInstance.shellLaunchConfig.hideFromUser\n\t\t};\n\t\tthis._proxy.$acceptTerminalOpened(terminalInstance.instanceId, extHostTerminalId, terminalInstance.title, shellLaunchConfigDto);\n\t}\n\n\tprivate _onTerminalProcessIdReady(terminalInstance: ITerminalInstance): void {\n\t\tif (terminalInstance.processId === undefined) {\n\t\t\treturn;\n\t\t}\n\t\tthis._proxy.$acceptTerminalProcessId(terminalInstance.instanceId, terminalInstance.processId);\n\t}\n\n\tprivate _onInstanceDimensionsChanged(instance: ITerminalInstance): void {\n\t\tthis._proxy.$acceptTerminalDimensions(instance.instanceId, instance.cols, instance.rows);\n\t}\n\n\tprivate _onInstanceMaximumDimensionsChanged(instance: ITerminalInstance): void {\n\t\tthis._proxy.$acceptTerminalMaximumDimensions(instance.instanceId, instance.maxCols, instance.maxRows);\n\t}\n\n\tprivate _onRequestStartExtensionTerminal(request: IStartExtensionTerminalRequest): void {\n\t\tconst proxy = request.proxy;\n\t\tthis._terminalProcessProxies.set(proxy.instanceId, proxy);\n\n\t\t// Note that onResize is not being listened to here as it needs to fire when max dimensions\n\t\t// change, excluding the dimension override\n\t\tconst initialDimensions: ITerminalDimensionsDto | undefined = request.cols && request.rows ? {\n\t\t\tcolumns: request.cols,\n\t\t\trows: request.rows\n\t\t} : undefined;\n\n\t\tthis._proxy.$startExtensionTerminal(\n\t\t\tproxy.instanceId,\n\t\t\tinitialDimensions\n\t\t).then(request.callback);\n\n\t\tproxy.onInput(data => this._proxy.$acceptProcessInput(proxy.instanceId, data));\n\t\tproxy.onShutdown(immediate => this._proxy.$acceptProcessShutdown(proxy.instanceId, immediate));\n\t\tproxy.onRequestCwd(() => this._proxy.$acceptProcessRequestCwd(proxy.instanceId));\n\t\tproxy.onRequestInitialCwd(() => this._proxy.$acceptProcessRequestInitialCwd(proxy.instanceId));\n\t}\n\n\tpublic $sendProcessData(terminalId: number, data: string): void {\n\t\tthis._terminalProcessProxies.get(terminalId)?.emitData(data);\n\t}\n\n\tpublic $sendProcessReady(terminalId: number, pid: number, cwd: string, windowsPty: IProcessReadyWindowsPty | undefined): void {\n\t\tthis._terminalProcessProxies.get(terminalId)?.emitReady(pid, cwd, windowsPty);\n\t}\n\n\tpublic $sendProcessProperty(terminalId: number, property: IProcessProperty<any>): void {\n\t\tif (property.type === ProcessPropertyType.Title) {\n\t\t\tconst instance = this._terminalService.getInstanceFromId(terminalId);\n\t\t\tinstance?.rename(property.value);\n\t\t}\n\t\tthis._terminalProcessProxies.get(terminalId)?.emitProcessProperty(property);\n\t}\n\n\t$setEnvironmentVariableCollection(extensionIdentifier: string, persistent: boolean, collection: ISerializableEnvironmentVariableCollection | undefined, descriptionMap: ISerializableEnvironmentDescriptionMap): void {\n\t\tif (collection) {\n\t\t\tconst translatedCollection = {\n\t\t\t\tpersistent,\n\t\t\t\tmap: deserializeEnvironmentVariableCollection(collection),\n\t\t\t\tdescriptionMap: deserializeEnvironmentDescriptionMap(descriptionMap)\n\t\t\t};\n\t\t\tthis._environmentVariableService.set(extensionIdentifier, translatedCollection);\n\t\t} else {\n\t\t\tthis._environmentVariableService.delete(extensionIdentifier);\n\t\t}\n\t}\n}\n\n/**\n * Encapsulates temporary tracking of data events from terminal instances, once disposed all\n * listeners are removed.\n */\nclass TerminalDataEventTracker extends Disposable {\n\tprivate readonly _bufferer: TerminalDataBufferer;\n\n\tconstructor(\n\t\tprivate readonly _callback: (id: number, data: string) => void,\n\t\t@ITerminalService private readonly _terminalService: ITerminalService\n\t) {\n\t\tsuper();\n\n\t\tthis._register(this._bufferer = new TerminalDataBufferer(this._callback));\n\n\t\tfor (const instance of this._terminalService.instances) {\n\t\t\tthis._registerInstance(instance);\n\t\t}\n\t\tthis._register(this._terminalService.onDidCreateInstance(instance => this._registerInstance(instance)));\n\t\tthis._register(this._terminalService.onDidDisposeInstance(instance => this._bufferer.stopBuffering(instance.instanceId)));\n\t}\n\n\tprivate _registerInstance(instance: ITerminalInstance): void {\n\t\t// Buffer data events to reduce the amount of messages going to the extension host\n\t\tthis._register(this._bufferer.startBuffering(instance.instanceId, instance.onData));\n\t}\n}\n\nclass ExtensionTerminalLinkProvider implements ITerminalExternalLinkProvider {\n\tconstructor(\n\t\tprivate readonly _proxy: ExtHostTerminalServiceShape\n\t) {\n\t}\n\n\tasync provideLinks(instance: ITerminalInstance, line: string): Promise<ITerminalLink[] | undefined> {\n\t\tconst proxy = this._proxy;\n\t\tconst extHostLinks = await proxy.$provideLinks(instance.instanceId, line);\n\t\treturn extHostLinks.map(dto => ({\n\t\t\tid: dto.id,\n\t\t\tstartIndex: dto.startIndex,\n\t\t\tlength: dto.length,\n\t\t\tlabel: dto.label,\n\t\t\tactivate: () => proxy.$activateLink(instance.instanceId, dto.id)\n\t\t}));\n\t}\n}\n\nexport function getOutputMatchForLines(lines: string[], outputMatcher: ITerminalOutputMatcher): ITerminalOutputMatch | undefined {\n\tconst match: RegExpMatchArray | null | undefined = lines.join('\\n').match(outputMatcher.lineMatcher);\n\treturn match ? { regexMatch: match, outputLines: lines } : undefined;\n}\n\nfunction parseQuickFix(id: string, source: string, fix: TerminalQuickFix): ITerminalQuickFix {\n\tlet type = TerminalQuickFixType.TerminalCommand;\n\tif ('uri' in fix) {\n\t\tfix.uri = URI.revive(fix.uri);\n\t\ttype = TerminalQuickFixType.Opener;\n\t} else if ('id' in fix) {\n\t\ttype = TerminalQuickFixType.VscodeCommand;\n\t}\n\treturn { id, type, source, ...fix };\n}\n"],
  "mappings": "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",
  "names": ["terminal"]
}
