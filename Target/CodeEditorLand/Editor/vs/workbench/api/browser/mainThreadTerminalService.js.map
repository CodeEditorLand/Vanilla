{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/api/browser/mainThreadTerminalService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport type { TerminalEditorLocationOptions } from \"vscode\";\nimport { Promises } from \"../../../base/common/async.js\";\nimport {\n\tDisposable,\n\tDisposableStore,\n\ttype IDisposable,\n\tMutableDisposable,\n\tcombinedDisposable,\n} from \"../../../base/common/lifecycle.js\";\nimport { OS, type OperatingSystem } from \"../../../base/common/platform.js\";\nimport { URI } from \"../../../base/common/uri.js\";\nimport { IInstantiationService } from \"../../../platform/instantiation/common/instantiation.js\";\nimport { ILogService } from \"../../../platform/log/common/log.js\";\nimport { TerminalCapability } from \"../../../platform/terminal/common/capabilities/capabilities.js\";\nimport type {\n\tISerializableEnvironmentDescriptionMap,\n\tISerializableEnvironmentVariableCollection,\n} from \"../../../platform/terminal/common/environmentVariable.js\";\nimport {\n\tdeserializeEnvironmentDescriptionMap,\n\tdeserializeEnvironmentVariableCollection,\n\tserializeEnvironmentVariableCollection,\n} from \"../../../platform/terminal/common/environmentVariableShared.js\";\nimport {\n\ttype IProcessProperty,\n\ttype IProcessReadyWindowsPty,\n\ttype IShellLaunchConfig,\n\ttype IShellLaunchConfigDto,\n\ttype ITerminalOutputMatch,\n\ttype ITerminalOutputMatcher,\n\tProcessPropertyType,\n\tTerminalExitReason,\n\tTerminalLocation,\n} from \"../../../platform/terminal/common/terminal.js\";\nimport { TerminalDataBufferer } from \"../../../platform/terminal/common/terminalDataBuffering.js\";\nimport {\n\tITerminalEditorService,\n\ttype ITerminalExternalLinkProvider,\n\tITerminalGroupService,\n\ttype ITerminalInstance,\n\ttype ITerminalLink,\n\tITerminalService,\n} from \"../../contrib/terminal/browser/terminal.js\";\nimport { TerminalProcessExtHostProxy } from \"../../contrib/terminal/browser/terminalProcessExtHostProxy.js\";\nimport { IEnvironmentVariableService } from \"../../contrib/terminal/common/environmentVariable.js\";\nimport {\n\ttype IStartExtensionTerminalRequest,\n\ttype ITerminalProcessExtHostProxy,\n\tITerminalProfileResolverService,\n\tITerminalProfileService,\n} from \"../../contrib/terminal/common/terminal.js\";\nimport { ITerminalLinkProviderService } from \"../../contrib/terminalContrib/links/browser/links.js\";\nimport {\n\ttype ITerminalQuickFix,\n\tITerminalQuickFixService,\n\tTerminalQuickFixType,\n} from \"../../contrib/terminalContrib/quickFix/browser/quickFix.js\";\nimport {\n\ttype IExtHostContext,\n\textHostNamedCustomer,\n} from \"../../services/extensions/common/extHostCustomers.js\";\nimport { IRemoteAgentService } from \"../../services/remote/common/remoteAgentService.js\";\nimport {\n\tExtHostContext,\n\ttype ExtHostTerminalIdentifier,\n\ttype ExtHostTerminalServiceShape,\n\ttype ITerminalCommandDto,\n\ttype ITerminalDimensionsDto,\n\tMainContext,\n\ttype MainThreadTerminalServiceShape,\n\ttype TerminalLaunchConfig,\n\ttype TerminalQuickFix,\n} from \"../common/extHost.protocol.js\";\n\n@extHostNamedCustomer(MainContext.MainThreadTerminalService)\nexport class MainThreadTerminalService\n\timplements MainThreadTerminalServiceShape\n{\n\tprivate readonly _store = new DisposableStore();\n\tprivate readonly _proxy: ExtHostTerminalServiceShape;\n\n\t/**\n\t * Stores a map from a temporary terminal id (a UUID generated on the extension host side)\n\t * to a numeric terminal id (an id generated on the renderer side)\n\t * This comes in play only when dealing with terminals created on the extension host side\n\t */\n\tprivate readonly _extHostTerminals = new Map<\n\t\tstring,\n\t\tPromise<ITerminalInstance>\n\t>();\n\tprivate readonly _terminalProcessProxies = new Map<\n\t\tnumber,\n\t\tITerminalProcessExtHostProxy\n\t>();\n\tprivate readonly _profileProviders = new Map<string, IDisposable>();\n\tprivate readonly _quickFixProviders = new Map<string, IDisposable>();\n\tprivate readonly _dataEventTracker =\n\t\tnew MutableDisposable<TerminalDataEventTracker>();\n\tprivate readonly _sendCommandEventListener = new MutableDisposable();\n\n\t/**\n\t * A single shared terminal link provider for the exthost. When an ext registers a link\n\t * provider, this is registered with the terminal on the renderer side and all links are\n\t * provided through this, even from multiple ext link providers. Xterm should remove lower\n\t * priority intersecting links itself.\n\t */\n\tprivate readonly _linkProvider = this._store.add(new MutableDisposable());\n\n\tprivate _os: OperatingSystem = OS;\n\n\tconstructor(\n\t\tprivate readonly _extHostContext: IExtHostContext,\n\t\t@ITerminalService private readonly _terminalService: ITerminalService,\n\t\t@ITerminalLinkProviderService\n\t\tprivate readonly _terminalLinkProviderService: ITerminalLinkProviderService,\n\t\t@ITerminalQuickFixService\n\t\tprivate readonly _terminalQuickFixService: ITerminalQuickFixService,\n\t\t@IInstantiationService\n\t\tprivate readonly _instantiationService: IInstantiationService,\n\t\t@IEnvironmentVariableService\n\t\tprivate readonly _environmentVariableService: IEnvironmentVariableService,\n\t\t@ILogService private readonly _logService: ILogService,\n\t\t@ITerminalProfileResolverService\n\t\tprivate readonly _terminalProfileResolverService: ITerminalProfileResolverService,\n\t\t@IRemoteAgentService remoteAgentService: IRemoteAgentService,\n\t\t@ITerminalGroupService\n\t\tprivate readonly _terminalGroupService: ITerminalGroupService,\n\t\t@ITerminalEditorService\n\t\tprivate readonly _terminalEditorService: ITerminalEditorService,\n\t\t@ITerminalProfileService\n\t\tprivate readonly _terminalProfileService: ITerminalProfileService,\n\t) {\n\t\tthis._proxy = _extHostContext.getProxy(\n\t\t\tExtHostContext.ExtHostTerminalService,\n\t\t);\n\n\t\t// ITerminalService listeners\n\t\tthis._store.add(\n\t\t\t_terminalService.onDidCreateInstance((instance) => {\n\t\t\t\tthis._onTerminalOpened(instance);\n\t\t\t\tthis._onInstanceDimensionsChanged(instance);\n\t\t\t}),\n\t\t);\n\n\t\tthis._store.add(\n\t\t\t_terminalService.onDidDisposeInstance((instance) =>\n\t\t\t\tthis._onTerminalDisposed(instance),\n\t\t\t),\n\t\t);\n\t\tthis._store.add(\n\t\t\t_terminalService.onAnyInstanceProcessIdReady((instance) =>\n\t\t\t\tthis._onTerminalProcessIdReady(instance),\n\t\t\t),\n\t\t);\n\t\tthis._store.add(\n\t\t\t_terminalService.onDidChangeInstanceDimensions((instance) =>\n\t\t\t\tthis._onInstanceDimensionsChanged(instance),\n\t\t\t),\n\t\t);\n\t\tthis._store.add(\n\t\t\t_terminalService.onAnyInstanceMaximumDimensionsChange((instance) =>\n\t\t\t\tthis._onInstanceMaximumDimensionsChanged(instance),\n\t\t\t),\n\t\t);\n\t\tthis._store.add(\n\t\t\t_terminalService.onDidRequestStartExtensionTerminal((e) =>\n\t\t\t\tthis._onRequestStartExtensionTerminal(e),\n\t\t\t),\n\t\t);\n\t\tthis._store.add(\n\t\t\t_terminalService.onDidChangeActiveInstance((instance) =>\n\t\t\t\tthis._onActiveTerminalChanged(\n\t\t\t\t\tinstance ? instance.instanceId : null,\n\t\t\t\t),\n\t\t\t),\n\t\t);\n\t\tthis._store.add(\n\t\t\t_terminalService.onAnyInstanceTitleChange(\n\t\t\t\t(instance) =>\n\t\t\t\t\tinstance &&\n\t\t\t\t\tthis._onTitleChanged(instance.instanceId, instance.title),\n\t\t\t),\n\t\t);\n\t\tthis._store.add(\n\t\t\t_terminalService.onAnyInstanceDataInput((instance) =>\n\t\t\t\tthis._proxy.$acceptTerminalInteraction(instance.instanceId),\n\t\t\t),\n\t\t);\n\t\tthis._store.add(\n\t\t\t_terminalService.onAnyInstanceSelectionChange((instance) =>\n\t\t\t\tthis._proxy.$acceptTerminalSelection(\n\t\t\t\t\tinstance.instanceId,\n\t\t\t\t\tinstance.selection,\n\t\t\t\t),\n\t\t\t),\n\t\t);\n\n\t\t// Set initial ext host state\n\t\tfor (const instance of this._terminalService.instances) {\n\t\t\tthis._onTerminalOpened(instance);\n\t\t\tinstance.processReady.then(() =>\n\t\t\t\tthis._onTerminalProcessIdReady(instance),\n\t\t\t);\n\t\t}\n\t\tconst activeInstance = this._terminalService.activeInstance;\n\t\tif (activeInstance) {\n\t\t\tthis._proxy.$acceptActiveTerminalChanged(activeInstance.instanceId);\n\t\t}\n\t\tif (this._environmentVariableService.collections.size > 0) {\n\t\t\tconst collectionAsArray = [\n\t\t\t\t...this._environmentVariableService.collections.entries(),\n\t\t\t];\n\t\t\tconst serializedCollections: [\n\t\t\t\tstring,\n\t\t\t\tISerializableEnvironmentVariableCollection,\n\t\t\t][] = collectionAsArray.map((e) => {\n\t\t\t\treturn [e[0], serializeEnvironmentVariableCollection(e[1].map)];\n\t\t\t});\n\t\t\tthis._proxy.$initEnvironmentVariableCollections(\n\t\t\t\tserializedCollections,\n\t\t\t);\n\t\t}\n\n\t\tremoteAgentService.getEnvironment().then(async (env) => {\n\t\t\tthis._os = env?.os || OS;\n\t\t\tthis._updateDefaultProfile();\n\t\t});\n\t\tthis._store.add(\n\t\t\tthis._terminalProfileService.onDidChangeAvailableProfiles(() =>\n\t\t\t\tthis._updateDefaultProfile(),\n\t\t\t),\n\t\t);\n\t}\n\n\tpublic dispose(): void {\n\t\tthis._store.dispose();\n\t\tfor (const provider of this._profileProviders.values()) {\n\t\t\tprovider.dispose();\n\t\t}\n\t\tfor (const provider of this._quickFixProviders.values()) {\n\t\t\tprovider.dispose();\n\t\t}\n\t}\n\n\tprivate async _updateDefaultProfile() {\n\t\tconst remoteAuthority =\n\t\t\tthis._extHostContext.remoteAuthority ?? undefined;\n\t\tconst defaultProfile =\n\t\t\tthis._terminalProfileResolverService.getDefaultProfile({\n\t\t\t\tremoteAuthority,\n\t\t\t\tos: this._os,\n\t\t\t});\n\t\tconst defaultAutomationProfile =\n\t\t\tthis._terminalProfileResolverService.getDefaultProfile({\n\t\t\t\tremoteAuthority,\n\t\t\t\tos: this._os,\n\t\t\t\tallowAutomationShell: true,\n\t\t\t});\n\t\tthis._proxy.$acceptDefaultProfile(\n\t\t\t...(await Promise.all([defaultProfile, defaultAutomationProfile])),\n\t\t);\n\t}\n\n\tprivate async _getTerminalInstance(\n\t\tid: ExtHostTerminalIdentifier,\n\t): Promise<ITerminalInstance | undefined> {\n\t\tif (typeof id === \"string\") {\n\t\t\treturn this._extHostTerminals.get(id);\n\t\t}\n\t\treturn this._terminalService.getInstanceFromId(id);\n\t}\n\n\tpublic async $createTerminal(\n\t\textHostTerminalId: string,\n\t\tlaunchConfig: TerminalLaunchConfig,\n\t): Promise<void> {\n\t\tconst shellLaunchConfig: IShellLaunchConfig = {\n\t\t\tname: launchConfig.name,\n\t\t\texecutable: launchConfig.shellPath,\n\t\t\targs: launchConfig.shellArgs,\n\t\t\tcwd:\n\t\t\t\ttypeof launchConfig.cwd === \"string\"\n\t\t\t\t\t? launchConfig.cwd\n\t\t\t\t\t: URI.revive(launchConfig.cwd),\n\t\t\ticon: launchConfig.icon,\n\t\t\tcolor: launchConfig.color,\n\t\t\tinitialText: launchConfig.initialText,\n\t\t\twaitOnExit: launchConfig.waitOnExit,\n\t\t\tignoreConfigurationCwd: true,\n\t\t\tenv: launchConfig.env,\n\t\t\tstrictEnv: launchConfig.strictEnv,\n\t\t\thideFromUser: launchConfig.hideFromUser,\n\t\t\tcustomPtyImplementation: launchConfig.isExtensionCustomPtyTerminal\n\t\t\t\t? (id, cols, rows) =>\n\t\t\t\t\t\tnew TerminalProcessExtHostProxy(\n\t\t\t\t\t\t\tid,\n\t\t\t\t\t\t\tcols,\n\t\t\t\t\t\t\trows,\n\t\t\t\t\t\t\tthis._terminalService,\n\t\t\t\t\t\t)\n\t\t\t\t: undefined,\n\t\t\textHostTerminalId,\n\t\t\tforceShellIntegration: launchConfig.forceShellIntegration,\n\t\t\tisFeatureTerminal: launchConfig.isFeatureTerminal,\n\t\t\tisExtensionOwnedTerminal: launchConfig.isExtensionOwnedTerminal,\n\t\t\tuseShellEnvironment: launchConfig.useShellEnvironment,\n\t\t\tisTransient: launchConfig.isTransient,\n\t\t};\n\t\tconst terminal = Promises.withAsyncBody<ITerminalInstance>(\n\t\t\tasync (r) => {\n\t\t\t\tconst terminal = await this._terminalService.createTerminal({\n\t\t\t\t\tconfig: shellLaunchConfig,\n\t\t\t\t\tlocation: await this._deserializeParentTerminal(\n\t\t\t\t\t\tlaunchConfig.location,\n\t\t\t\t\t),\n\t\t\t\t});\n\t\t\t\tr(terminal);\n\t\t\t},\n\t\t);\n\t\tthis._extHostTerminals.set(extHostTerminalId, terminal);\n\t\tconst terminalInstance = await terminal;\n\t\tthis._store.add(\n\t\t\tterminalInstance.onDisposed(() => {\n\t\t\t\tthis._extHostTerminals.delete(extHostTerminalId);\n\t\t\t}),\n\t\t);\n\t}\n\n\tprivate async _deserializeParentTerminal(\n\t\tlocation?:\n\t\t\t| TerminalLocation\n\t\t\t| TerminalEditorLocationOptions\n\t\t\t| { parentTerminal: ExtHostTerminalIdentifier }\n\t\t\t| { splitActiveTerminal: boolean; location?: TerminalLocation },\n\t): Promise<\n\t\t| TerminalLocation\n\t\t| TerminalEditorLocationOptions\n\t\t| { parentTerminal: ITerminalInstance }\n\t\t| { splitActiveTerminal: boolean }\n\t\t| undefined\n\t> {\n\t\tif (typeof location === \"object\" && \"parentTerminal\" in location) {\n\t\t\tconst parentTerminal = await this._extHostTerminals.get(\n\t\t\t\tlocation.parentTerminal.toString(),\n\t\t\t);\n\t\t\treturn parentTerminal ? { parentTerminal } : undefined;\n\t\t}\n\t\treturn location;\n\t}\n\n\tpublic async $show(\n\t\tid: ExtHostTerminalIdentifier,\n\t\tpreserveFocus: boolean,\n\t): Promise<void> {\n\t\tconst terminalInstance = await this._getTerminalInstance(id);\n\t\tif (terminalInstance) {\n\t\t\tthis._terminalService.setActiveInstance(terminalInstance);\n\t\t\tif (terminalInstance.target === TerminalLocation.Editor) {\n\t\t\t\tawait this._terminalEditorService.revealActiveEditor(\n\t\t\t\t\tpreserveFocus,\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\tawait this._terminalGroupService.showPanel(!preserveFocus);\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic async $hide(id: ExtHostTerminalIdentifier): Promise<void> {\n\t\tconst instanceToHide = await this._getTerminalInstance(id);\n\t\tconst activeInstance = this._terminalService.activeInstance;\n\t\tif (\n\t\t\tactiveInstance &&\n\t\t\tactiveInstance.instanceId === instanceToHide?.instanceId &&\n\t\t\tactiveInstance.target !== TerminalLocation.Editor\n\t\t) {\n\t\t\tthis._terminalGroupService.hidePanel();\n\t\t}\n\t}\n\n\tpublic async $dispose(id: ExtHostTerminalIdentifier): Promise<void> {\n\t\t(await this._getTerminalInstance(id))?.dispose(\n\t\t\tTerminalExitReason.Extension,\n\t\t);\n\t}\n\n\tpublic async $sendText(\n\t\tid: ExtHostTerminalIdentifier,\n\t\ttext: string,\n\t\tshouldExecute: boolean,\n\t): Promise<void> {\n\t\tconst instance = await this._getTerminalInstance(id);\n\t\tawait instance?.sendText(text, shouldExecute);\n\t}\n\n\tpublic $sendProcessExit(\n\t\tterminalId: number,\n\t\texitCode: number | undefined,\n\t): void {\n\t\tthis._terminalProcessProxies.get(terminalId)?.emitExit(exitCode);\n\t}\n\n\tpublic $startSendingDataEvents(): void {\n\t\tif (!this._dataEventTracker.value) {\n\t\t\tthis._dataEventTracker.value =\n\t\t\t\tthis._instantiationService.createInstance(\n\t\t\t\t\tTerminalDataEventTracker,\n\t\t\t\t\t(id, data) => {\n\t\t\t\t\t\tthis._onTerminalData(id, data);\n\t\t\t\t\t},\n\t\t\t\t);\n\t\t\t// Send initial events if they exist\n\t\t\tfor (const instance of this._terminalService.instances) {\n\t\t\t\tfor (const data of instance.initialDataEvents || []) {\n\t\t\t\t\tthis._onTerminalData(instance.instanceId, data);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic $stopSendingDataEvents(): void {\n\t\tthis._dataEventTracker.clear();\n\t}\n\n\tpublic $startSendingCommandEvents(): void {\n\t\tif (this._sendCommandEventListener.value) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst multiplexer =\n\t\t\tthis._terminalService.createOnInstanceCapabilityEvent(\n\t\t\t\tTerminalCapability.CommandDetection,\n\t\t\t\t(capability) => capability.onCommandFinished,\n\t\t\t);\n\t\tconst sub = multiplexer.event((e) => {\n\t\t\tthis._onDidExecuteCommand(e.instance.instanceId, {\n\t\t\t\tcommandLine: e.data.command,\n\t\t\t\t// TODO: Convert to URI if possible\n\t\t\t\tcwd: e.data.cwd,\n\t\t\t\texitCode: e.data.exitCode,\n\t\t\t\toutput: e.data.getOutput(),\n\t\t\t});\n\t\t});\n\t\tthis._sendCommandEventListener.value = combinedDisposable(\n\t\t\tmultiplexer,\n\t\t\tsub,\n\t\t);\n\t}\n\n\tpublic $stopSendingCommandEvents(): void {\n\t\tthis._sendCommandEventListener.clear();\n\t}\n\n\tpublic $startLinkProvider(): void {\n\t\tthis._linkProvider.value =\n\t\t\tthis._terminalLinkProviderService.registerLinkProvider(\n\t\t\t\tnew ExtensionTerminalLinkProvider(this._proxy),\n\t\t\t);\n\t}\n\n\tpublic $stopLinkProvider(): void {\n\t\tthis._linkProvider.clear();\n\t}\n\n\tpublic $registerProcessSupport(isSupported: boolean): void {\n\t\tthis._terminalService.registerProcessSupport(isSupported);\n\t}\n\n\tpublic $registerProfileProvider(\n\t\tid: string,\n\t\textensionIdentifier: string,\n\t): void {\n\t\t// Proxy profile provider requests through the extension host\n\t\tthis._profileProviders.set(\n\t\t\tid,\n\t\t\tthis._terminalProfileService.registerTerminalProfileProvider(\n\t\t\t\textensionIdentifier,\n\t\t\t\tid,\n\t\t\t\t{\n\t\t\t\t\tcreateContributedTerminalProfile: async (options) => {\n\t\t\t\t\t\treturn this._proxy.$createContributedProfileTerminal(\n\t\t\t\t\t\t\tid,\n\t\t\t\t\t\t\toptions,\n\t\t\t\t\t\t);\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t),\n\t\t);\n\t}\n\n\tpublic $unregisterProfileProvider(id: string): void {\n\t\tthis._profileProviders.get(id)?.dispose();\n\t\tthis._profileProviders.delete(id);\n\t}\n\n\tpublic async $registerQuickFixProvider(\n\t\tid: string,\n\t\textensionId: string,\n\t): Promise<void> {\n\t\tthis._quickFixProviders.set(\n\t\t\tid,\n\t\t\tthis._terminalQuickFixService.registerQuickFixProvider(id, {\n\t\t\t\tprovideTerminalQuickFixes: async (\n\t\t\t\t\tterminalCommand,\n\t\t\t\t\tlines,\n\t\t\t\t\toptions,\n\t\t\t\t\ttoken,\n\t\t\t\t) => {\n\t\t\t\t\tif (token.isCancellationRequested) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\tif (\n\t\t\t\t\t\toptions.outputMatcher?.length &&\n\t\t\t\t\t\toptions.outputMatcher.length > 40\n\t\t\t\t\t) {\n\t\t\t\t\t\toptions.outputMatcher.length = 40;\n\t\t\t\t\t\tthis._logService.warn(\n\t\t\t\t\t\t\t\"Cannot exceed output matcher length of 40\",\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t\tconst commandLineMatch = terminalCommand.command.match(\n\t\t\t\t\t\toptions.commandLineMatcher,\n\t\t\t\t\t);\n\t\t\t\t\tif (!commandLineMatch || !lines) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\tconst outputMatcher = options.outputMatcher;\n\t\t\t\t\tlet outputMatch;\n\t\t\t\t\tif (outputMatcher) {\n\t\t\t\t\t\toutputMatch = getOutputMatchForLines(\n\t\t\t\t\t\t\tlines,\n\t\t\t\t\t\t\toutputMatcher,\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t\tif (!outputMatch) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\tconst matchResult = {\n\t\t\t\t\t\tcommandLineMatch,\n\t\t\t\t\t\toutputMatch,\n\t\t\t\t\t\tcommandLine: terminalCommand.command,\n\t\t\t\t\t};\n\n\t\t\t\t\tif (matchResult) {\n\t\t\t\t\t\tconst result =\n\t\t\t\t\t\t\tawait this._proxy.$provideTerminalQuickFixes(\n\t\t\t\t\t\t\t\tid,\n\t\t\t\t\t\t\t\tmatchResult,\n\t\t\t\t\t\t\t\ttoken,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\tif (result && Array.isArray(result)) {\n\t\t\t\t\t\t\treturn result.map((r) =>\n\t\t\t\t\t\t\t\tparseQuickFix(id, extensionId, r),\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t} else if (result) {\n\t\t\t\t\t\t\treturn parseQuickFix(id, extensionId, result);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\treturn;\n\t\t\t\t},\n\t\t\t}),\n\t\t);\n\t}\n\n\tpublic $unregisterQuickFixProvider(id: string): void {\n\t\tthis._quickFixProviders.get(id)?.dispose();\n\t\tthis._quickFixProviders.delete(id);\n\t}\n\n\tprivate _onActiveTerminalChanged(terminalId: number | null): void {\n\t\tthis._proxy.$acceptActiveTerminalChanged(terminalId);\n\t}\n\n\tprivate _onTerminalData(terminalId: number, data: string): void {\n\t\tthis._proxy.$acceptTerminalProcessData(terminalId, data);\n\t}\n\n\tprivate _onDidExecuteCommand(\n\t\tterminalId: number,\n\t\tcommand: ITerminalCommandDto,\n\t): void {\n\t\tthis._proxy.$acceptDidExecuteCommand(terminalId, command);\n\t}\n\n\tprivate _onTitleChanged(terminalId: number, name: string): void {\n\t\tthis._proxy.$acceptTerminalTitleChange(terminalId, name);\n\t}\n\n\tprivate _onTerminalDisposed(terminalInstance: ITerminalInstance): void {\n\t\tthis._proxy.$acceptTerminalClosed(\n\t\t\tterminalInstance.instanceId,\n\t\t\tterminalInstance.exitCode,\n\t\t\tterminalInstance.exitReason ?? TerminalExitReason.Unknown,\n\t\t);\n\t}\n\n\tprivate _onTerminalOpened(terminalInstance: ITerminalInstance): void {\n\t\tconst extHostTerminalId =\n\t\t\tterminalInstance.shellLaunchConfig.extHostTerminalId;\n\t\tconst shellLaunchConfigDto: IShellLaunchConfigDto = {\n\t\t\tname: terminalInstance.shellLaunchConfig.name,\n\t\t\texecutable: terminalInstance.shellLaunchConfig.executable,\n\t\t\targs: terminalInstance.shellLaunchConfig.args,\n\t\t\tcwd: terminalInstance.shellLaunchConfig.cwd,\n\t\t\tenv: terminalInstance.shellLaunchConfig.env,\n\t\t\thideFromUser: terminalInstance.shellLaunchConfig.hideFromUser,\n\t\t};\n\t\tthis._proxy.$acceptTerminalOpened(\n\t\t\tterminalInstance.instanceId,\n\t\t\textHostTerminalId,\n\t\t\tterminalInstance.title,\n\t\t\tshellLaunchConfigDto,\n\t\t);\n\t}\n\n\tprivate _onTerminalProcessIdReady(\n\t\tterminalInstance: ITerminalInstance,\n\t): void {\n\t\tif (terminalInstance.processId === undefined) {\n\t\t\treturn;\n\t\t}\n\t\tthis._proxy.$acceptTerminalProcessId(\n\t\t\tterminalInstance.instanceId,\n\t\t\tterminalInstance.processId,\n\t\t);\n\t}\n\n\tprivate _onInstanceDimensionsChanged(instance: ITerminalInstance): void {\n\t\tthis._proxy.$acceptTerminalDimensions(\n\t\t\tinstance.instanceId,\n\t\t\tinstance.cols,\n\t\t\tinstance.rows,\n\t\t);\n\t}\n\n\tprivate _onInstanceMaximumDimensionsChanged(\n\t\tinstance: ITerminalInstance,\n\t): void {\n\t\tthis._proxy.$acceptTerminalMaximumDimensions(\n\t\t\tinstance.instanceId,\n\t\t\tinstance.maxCols,\n\t\t\tinstance.maxRows,\n\t\t);\n\t}\n\n\tprivate _onRequestStartExtensionTerminal(\n\t\trequest: IStartExtensionTerminalRequest,\n\t): void {\n\t\tconst proxy = request.proxy;\n\t\tthis._terminalProcessProxies.set(proxy.instanceId, proxy);\n\n\t\t// Note that onResize is not being listened to here as it needs to fire when max dimensions\n\t\t// change, excluding the dimension override\n\t\tconst initialDimensions: ITerminalDimensionsDto | undefined =\n\t\t\trequest.cols && request.rows\n\t\t\t\t? {\n\t\t\t\t\t\tcolumns: request.cols,\n\t\t\t\t\t\trows: request.rows,\n\t\t\t\t\t}\n\t\t\t\t: undefined;\n\n\t\tthis._proxy\n\t\t\t.$startExtensionTerminal(proxy.instanceId, initialDimensions)\n\t\t\t.then(request.callback);\n\n\t\tproxy.onInput((data) =>\n\t\t\tthis._proxy.$acceptProcessInput(proxy.instanceId, data),\n\t\t);\n\t\tproxy.onShutdown((immediate) =>\n\t\t\tthis._proxy.$acceptProcessShutdown(proxy.instanceId, immediate),\n\t\t);\n\t\tproxy.onRequestCwd(() =>\n\t\t\tthis._proxy.$acceptProcessRequestCwd(proxy.instanceId),\n\t\t);\n\t\tproxy.onRequestInitialCwd(() =>\n\t\t\tthis._proxy.$acceptProcessRequestInitialCwd(proxy.instanceId),\n\t\t);\n\t}\n\n\tpublic $sendProcessData(terminalId: number, data: string): void {\n\t\tthis._terminalProcessProxies.get(terminalId)?.emitData(data);\n\t}\n\n\tpublic $sendProcessReady(\n\t\tterminalId: number,\n\t\tpid: number,\n\t\tcwd: string,\n\t\twindowsPty: IProcessReadyWindowsPty | undefined,\n\t): void {\n\t\tthis._terminalProcessProxies\n\t\t\t.get(terminalId)\n\t\t\t?.emitReady(pid, cwd, windowsPty);\n\t}\n\n\tpublic $sendProcessProperty(\n\t\tterminalId: number,\n\t\tproperty: IProcessProperty<any>,\n\t): void {\n\t\tif (property.type === ProcessPropertyType.Title) {\n\t\t\tconst instance =\n\t\t\t\tthis._terminalService.getInstanceFromId(terminalId);\n\t\t\tinstance?.rename(property.value);\n\t\t}\n\t\tthis._terminalProcessProxies\n\t\t\t.get(terminalId)\n\t\t\t?.emitProcessProperty(property);\n\t}\n\n\t$setEnvironmentVariableCollection(\n\t\textensionIdentifier: string,\n\t\tpersistent: boolean,\n\t\tcollection: ISerializableEnvironmentVariableCollection | undefined,\n\t\tdescriptionMap: ISerializableEnvironmentDescriptionMap,\n\t): void {\n\t\tif (collection) {\n\t\t\tconst translatedCollection = {\n\t\t\t\tpersistent,\n\t\t\t\tmap: deserializeEnvironmentVariableCollection(collection),\n\t\t\t\tdescriptionMap:\n\t\t\t\t\tdeserializeEnvironmentDescriptionMap(descriptionMap),\n\t\t\t};\n\t\t\tthis._environmentVariableService.set(\n\t\t\t\textensionIdentifier,\n\t\t\t\ttranslatedCollection,\n\t\t\t);\n\t\t} else {\n\t\t\tthis._environmentVariableService.delete(extensionIdentifier);\n\t\t}\n\t}\n}\n\n/**\n * Encapsulates temporary tracking of data events from terminal instances, once disposed all\n * listeners are removed.\n */\nclass TerminalDataEventTracker extends Disposable {\n\tprivate readonly _bufferer: TerminalDataBufferer;\n\n\tconstructor(\n\t\tprivate readonly _callback: (id: number, data: string) => void,\n\t\t@ITerminalService private readonly _terminalService: ITerminalService,\n\t) {\n\t\tsuper();\n\n\t\tthis._register(\n\t\t\t(this._bufferer = new TerminalDataBufferer(this._callback)),\n\t\t);\n\n\t\tfor (const instance of this._terminalService.instances) {\n\t\t\tthis._registerInstance(instance);\n\t\t}\n\t\tthis._register(\n\t\t\tthis._terminalService.onDidCreateInstance((instance) =>\n\t\t\t\tthis._registerInstance(instance),\n\t\t\t),\n\t\t);\n\t\tthis._register(\n\t\t\tthis._terminalService.onDidDisposeInstance((instance) =>\n\t\t\t\tthis._bufferer.stopBuffering(instance.instanceId),\n\t\t\t),\n\t\t);\n\t}\n\n\tprivate _registerInstance(instance: ITerminalInstance): void {\n\t\t// Buffer data events to reduce the amount of messages going to the extension host\n\t\tthis._register(\n\t\t\tthis._bufferer.startBuffering(instance.instanceId, instance.onData),\n\t\t);\n\t}\n}\n\nclass ExtensionTerminalLinkProvider implements ITerminalExternalLinkProvider {\n\tconstructor(private readonly _proxy: ExtHostTerminalServiceShape) {}\n\n\tasync provideLinks(\n\t\tinstance: ITerminalInstance,\n\t\tline: string,\n\t): Promise<ITerminalLink[] | undefined> {\n\t\tconst proxy = this._proxy;\n\t\tconst extHostLinks = await proxy.$provideLinks(\n\t\t\tinstance.instanceId,\n\t\t\tline,\n\t\t);\n\t\treturn extHostLinks.map((dto) => ({\n\t\t\tid: dto.id,\n\t\t\tstartIndex: dto.startIndex,\n\t\t\tlength: dto.length,\n\t\t\tlabel: dto.label,\n\t\t\tactivate: () => proxy.$activateLink(instance.instanceId, dto.id),\n\t\t}));\n\t}\n}\n\nexport function getOutputMatchForLines(\n\tlines: string[],\n\toutputMatcher: ITerminalOutputMatcher,\n): ITerminalOutputMatch | undefined {\n\tconst match: RegExpMatchArray | null | undefined = lines\n\t\t.join(\"\\n\")\n\t\t.match(outputMatcher.lineMatcher);\n\treturn match ? { regexMatch: match, outputLines: lines } : undefined;\n}\n\nfunction parseQuickFix(\n\tid: string,\n\tsource: string,\n\tfix: TerminalQuickFix,\n): ITerminalQuickFix {\n\tlet type = TerminalQuickFixType.TerminalCommand;\n\tif (\"uri\" in fix) {\n\t\tfix.uri = URI.revive(fix.uri);\n\t\ttype = TerminalQuickFixType.Opener;\n\t} else if (\"id\" in fix) {\n\t\ttype = TerminalQuickFixType.VscodeCommand;\n\t}\n\treturn { id, type, source, ...fix };\n}\n"],
  "mappings": "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",
  "names": ["terminal"]
}
