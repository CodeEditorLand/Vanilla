{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/api/browser/mainThreadUriOpeners.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Action } from \"../../../base/common/actions.js\";\nimport { isCancellationError } from \"../../../base/common/errors.js\";\nimport { Disposable } from \"../../../base/common/lifecycle.js\";\nimport { Schemas } from \"../../../base/common/network.js\";\nimport type { URI } from \"../../../base/common/uri.js\";\nimport { localize } from \"../../../nls.js\";\nimport type { ExtensionIdentifier } from \"../../../platform/extensions/common/extensions.js\";\nimport {\n\tINotificationService,\n\tSeverity,\n} from \"../../../platform/notification/common/notification.js\";\nimport { IOpenerService } from \"../../../platform/opener/common/opener.js\";\nimport { IStorageService } from \"../../../platform/storage/common/storage.js\";\nimport { defaultExternalUriOpenerId } from \"../../contrib/externalUriOpener/common/configuration.js\";\nimport { ContributedExternalUriOpenersStore } from \"../../contrib/externalUriOpener/common/contributedOpeners.js\";\nimport {\n\ttype IExternalOpenerProvider,\n\ttype IExternalUriOpener,\n\tIExternalUriOpenerService,\n} from \"../../contrib/externalUriOpener/common/externalUriOpenerService.js\";\nimport {\n\ttype IExtHostContext,\n\textHostNamedCustomer,\n} from \"../../services/extensions/common/extHostCustomers.js\";\nimport { IExtensionService } from \"../../services/extensions/common/extensions.js\";\nimport {\n\tExtHostContext,\n\ttype ExtHostUriOpenersShape,\n\tMainContext,\n\ttype MainThreadUriOpenersShape,\n} from \"../common/extHost.protocol.js\";\n\ninterface RegisteredOpenerMetadata {\n\treadonly schemes: ReadonlySet<string>;\n\treadonly extensionId: ExtensionIdentifier;\n\treadonly label: string;\n}\n\n@extHostNamedCustomer(MainContext.MainThreadUriOpeners)\nexport class MainThreadUriOpeners\n\textends Disposable\n\timplements MainThreadUriOpenersShape, IExternalOpenerProvider\n{\n\tprivate readonly proxy: ExtHostUriOpenersShape;\n\tprivate readonly _registeredOpeners = new Map<\n\t\tstring,\n\t\tRegisteredOpenerMetadata\n\t>();\n\tprivate readonly _contributedExternalUriOpenersStore: ContributedExternalUriOpenersStore;\n\n\tconstructor(\n\t\tcontext: IExtHostContext,\n\t\t@IStorageService storageService: IStorageService,\n\t\t@IExternalUriOpenerService externalUriOpenerService: IExternalUriOpenerService,\n\t\t@IExtensionService private readonly extensionService: IExtensionService,\n\t\t@IOpenerService private readonly openerService: IOpenerService,\n\t\t@INotificationService private readonly notificationService: INotificationService,\n\t) {\n\t\tsuper();\n\t\tthis.proxy = context.getProxy(ExtHostContext.ExtHostUriOpeners);\n\n\t\tthis._register(externalUriOpenerService.registerExternalOpenerProvider(this));\n\n\t\tthis._contributedExternalUriOpenersStore = this._register(new ContributedExternalUriOpenersStore(storageService, extensionService));\n\t}\n\n\tpublic async *getOpeners(\n\t\ttargetUri: URI,\n\t): AsyncIterable<IExternalUriOpener> {\n\t\t// Currently we only allow openers for http and https urls\n\t\tif (\n\t\t\ttargetUri.scheme !== Schemas.http &&\n\t\t\ttargetUri.scheme !== Schemas.https\n\t\t) {\n\t\t\treturn;\n\t\t}\n\n\t\tawait this.extensionService.activateByEvent(\n\t\t\t`onOpenExternalUri:${targetUri.scheme}`,\n\t\t);\n\n\t\tfor (const [id, openerMetadata] of this._registeredOpeners) {\n\t\t\tif (openerMetadata.schemes.has(targetUri.scheme)) {\n\t\t\t\tyield this.createOpener(id, openerMetadata);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate createOpener(\n\t\tid: string,\n\t\tmetadata: RegisteredOpenerMetadata,\n\t): IExternalUriOpener {\n\t\treturn {\n\t\t\tid: id,\n\t\t\tlabel: metadata.label,\n\t\t\tcanOpen: (uri, token) => {\n\t\t\t\treturn this.proxy.$canOpenUri(id, uri, token);\n\t\t\t},\n\t\t\topenExternalUri: async (uri, ctx, token) => {\n\t\t\t\ttry {\n\t\t\t\t\tawait this.proxy.$openUri(\n\t\t\t\t\t\tid,\n\t\t\t\t\t\t{ resolvedUri: uri, sourceUri: ctx.sourceUri },\n\t\t\t\t\t\ttoken,\n\t\t\t\t\t);\n\t\t\t\t} catch (e) {\n\t\t\t\t\tif (!isCancellationError(e)) {\n\t\t\t\t\t\tconst openDefaultAction = new Action(\n\t\t\t\t\t\t\t\"default\",\n\t\t\t\t\t\t\tlocalize(\n\t\t\t\t\t\t\t\t\"openerFailedUseDefault\",\n\t\t\t\t\t\t\t\t\"Open using default opener\",\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\tundefined,\n\t\t\t\t\t\t\tundefined,\n\t\t\t\t\t\t\tasync () => {\n\t\t\t\t\t\t\t\tawait this.openerService.open(uri, {\n\t\t\t\t\t\t\t\t\tallowTunneling: false,\n\t\t\t\t\t\t\t\t\tallowContributedOpeners:\n\t\t\t\t\t\t\t\t\t\tdefaultExternalUriOpenerId,\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t);\n\t\t\t\t\t\topenDefaultAction.tooltip = uri.toString();\n\n\t\t\t\t\t\tthis.notificationService.notify({\n\t\t\t\t\t\t\tseverity: Severity.Error,\n\t\t\t\t\t\t\tmessage: localize(\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tkey: \"openerFailedMessage\",\n\t\t\t\t\t\t\t\t\tcomment: [\n\t\t\t\t\t\t\t\t\t\t\"{0} is the id of the opener. {1} is the url being opened.\",\n\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\"Could not open uri with '{0}': {1}\",\n\t\t\t\t\t\t\t\tid,\n\t\t\t\t\t\t\t\te.toString(),\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\tactions: {\n\t\t\t\t\t\t\t\tprimary: [openDefaultAction],\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn true;\n\t\t\t},\n\t\t};\n\t}\n\n\tasync $registerUriOpener(\n\t\tid: string,\n\t\tschemes: readonly string[],\n\t\textensionId: ExtensionIdentifier,\n\t\tlabel: string,\n\t): Promise<void> {\n\t\tif (this._registeredOpeners.has(id)) {\n\t\t\tthrow new Error(`Opener with id '${id}' already registered`);\n\t\t}\n\n\t\tthis._registeredOpeners.set(id, {\n\t\t\tschemes: new Set(schemes),\n\t\t\tlabel,\n\t\t\textensionId,\n\t\t});\n\n\t\tthis._contributedExternalUriOpenersStore.didRegisterOpener(\n\t\t\tid,\n\t\t\textensionId.value,\n\t\t);\n\t}\n\n\tasync $unregisterUriOpener(id: string): Promise<void> {\n\t\tthis._registeredOpeners.delete(id);\n\t\tthis._contributedExternalUriOpenersStore.delete(id);\n\t}\n\n\toverride dispose(): void {\n\t\tsuper.dispose();\n\t\tthis._registeredOpeners.clear();\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
