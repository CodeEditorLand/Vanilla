{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/api/browser/mainThreadUriOpeners.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Action } from '../../../base/common/actions.js';\nimport { isCancellationError } from '../../../base/common/errors.js';\nimport { Disposable } from '../../../base/common/lifecycle.js';\nimport { Schemas } from '../../../base/common/network.js';\nimport { URI } from '../../../base/common/uri.js';\nimport { localize } from '../../../nls.js';\nimport { ExtensionIdentifier } from '../../../platform/extensions/common/extensions.js';\nimport { INotificationService, Severity } from '../../../platform/notification/common/notification.js';\nimport { IOpenerService } from '../../../platform/opener/common/opener.js';\nimport { IStorageService } from '../../../platform/storage/common/storage.js';\nimport { ExtHostContext, ExtHostUriOpenersShape, MainContext, MainThreadUriOpenersShape } from '../common/extHost.protocol.js';\nimport { defaultExternalUriOpenerId } from '../../contrib/externalUriOpener/common/configuration.js';\nimport { ContributedExternalUriOpenersStore } from '../../contrib/externalUriOpener/common/contributedOpeners.js';\nimport { IExternalOpenerProvider, IExternalUriOpener, IExternalUriOpenerService } from '../../contrib/externalUriOpener/common/externalUriOpenerService.js';\nimport { IExtensionService } from '../../services/extensions/common/extensions.js';\nimport { extHostNamedCustomer, IExtHostContext } from '../../services/extensions/common/extHostCustomers.js';\n\ninterface RegisteredOpenerMetadata {\n\treadonly schemes: ReadonlySet<string>;\n\treadonly extensionId: ExtensionIdentifier;\n\treadonly label: string;\n}\n\n@extHostNamedCustomer(MainContext.MainThreadUriOpeners)\nexport class MainThreadUriOpeners extends Disposable implements MainThreadUriOpenersShape, IExternalOpenerProvider {\n\n\tprivate readonly proxy: ExtHostUriOpenersShape;\n\tprivate readonly _registeredOpeners = new Map<string, RegisteredOpenerMetadata>();\n\tprivate readonly _contributedExternalUriOpenersStore: ContributedExternalUriOpenersStore;\n\n\tconstructor(\n\t\tcontext: IExtHostContext,\n\t\t@IStorageService storageService: IStorageService,\n\t\t@IExternalUriOpenerService externalUriOpenerService: IExternalUriOpenerService,\n\t\t@IExtensionService private readonly extensionService: IExtensionService,\n\t\t@IOpenerService private readonly openerService: IOpenerService,\n\t\t@INotificationService private readonly notificationService: INotificationService,\n\t) {\n\t\tsuper();\n\t\tthis.proxy = context.getProxy(ExtHostContext.ExtHostUriOpeners);\n\n\t\tthis._register(externalUriOpenerService.registerExternalOpenerProvider(this));\n\n\t\tthis._contributedExternalUriOpenersStore = this._register(new ContributedExternalUriOpenersStore(storageService, extensionService));\n\t}\n\n\tpublic async *getOpeners(targetUri: URI): AsyncIterable<IExternalUriOpener> {\n\n\t\t// Currently we only allow openers for http and https urls\n\t\tif (targetUri.scheme !== Schemas.http && targetUri.scheme !== Schemas.https) {\n\t\t\treturn;\n\t\t}\n\n\t\tawait this.extensionService.activateByEvent(`onOpenExternalUri:${targetUri.scheme}`);\n\n\t\tfor (const [id, openerMetadata] of this._registeredOpeners) {\n\t\t\tif (openerMetadata.schemes.has(targetUri.scheme)) {\n\t\t\t\tyield this.createOpener(id, openerMetadata);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate createOpener(id: string, metadata: RegisteredOpenerMetadata): IExternalUriOpener {\n\t\treturn {\n\t\t\tid: id,\n\t\t\tlabel: metadata.label,\n\t\t\tcanOpen: (uri, token) => {\n\t\t\t\treturn this.proxy.$canOpenUri(id, uri, token);\n\t\t\t},\n\t\t\topenExternalUri: async (uri, ctx, token) => {\n\t\t\t\ttry {\n\t\t\t\t\tawait this.proxy.$openUri(id, { resolvedUri: uri, sourceUri: ctx.sourceUri }, token);\n\t\t\t\t} catch (e) {\n\t\t\t\t\tif (!isCancellationError(e)) {\n\t\t\t\t\t\tconst openDefaultAction = new Action('default', localize('openerFailedUseDefault', \"Open using default opener\"), undefined, undefined, async () => {\n\t\t\t\t\t\t\tawait this.openerService.open(uri, {\n\t\t\t\t\t\t\t\tallowTunneling: false,\n\t\t\t\t\t\t\t\tallowContributedOpeners: defaultExternalUriOpenerId,\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t});\n\t\t\t\t\t\topenDefaultAction.tooltip = uri.toString();\n\n\t\t\t\t\t\tthis.notificationService.notify({\n\t\t\t\t\t\t\tseverity: Severity.Error,\n\t\t\t\t\t\t\tmessage: localize({\n\t\t\t\t\t\t\t\tkey: 'openerFailedMessage',\n\t\t\t\t\t\t\t\tcomment: ['{0} is the id of the opener. {1} is the url being opened.'],\n\t\t\t\t\t\t\t}, 'Could not open uri with \\'{0}\\': {1}', id, e.toString()),\n\t\t\t\t\t\t\tactions: {\n\t\t\t\t\t\t\t\tprimary: [\n\t\t\t\t\t\t\t\t\topenDefaultAction\n\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn true;\n\t\t\t},\n\t\t};\n\t}\n\n\tasync $registerUriOpener(\n\t\tid: string,\n\t\tschemes: readonly string[],\n\t\textensionId: ExtensionIdentifier,\n\t\tlabel: string,\n\t): Promise<void> {\n\t\tif (this._registeredOpeners.has(id)) {\n\t\t\tthrow new Error(`Opener with id '${id}' already registered`);\n\t\t}\n\n\t\tthis._registeredOpeners.set(id, {\n\t\t\tschemes: new Set(schemes),\n\t\t\tlabel,\n\t\t\textensionId,\n\t\t});\n\n\t\tthis._contributedExternalUriOpenersStore.didRegisterOpener(id, extensionId.value);\n\t}\n\n\tasync $unregisterUriOpener(id: string): Promise<void> {\n\t\tthis._registeredOpeners.delete(id);\n\t\tthis._contributedExternalUriOpenersStore.delete(id);\n\t}\n\n\toverride dispose(): void {\n\t\tsuper.dispose();\n\t\tthis._registeredOpeners.clear();\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
