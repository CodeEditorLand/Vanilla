{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/api/browser/mainThreadNotebookDocuments.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { DisposableStore, dispose } from \"../../../base/common/lifecycle.js\";\nimport { ResourceMap } from \"../../../base/common/map.js\";\nimport { URI, type UriComponents } from \"../../../base/common/uri.js\";\nimport { IUriIdentityService } from \"../../../platform/uriIdentity/common/uriIdentity.js\";\nimport type { NotebookTextModel } from \"../../contrib/notebook/common/model/notebookTextModel.js\";\nimport { NotebookCellsChangeType } from \"../../contrib/notebook/common/notebookCommon.js\";\nimport { INotebookEditorModelResolverService } from \"../../contrib/notebook/common/notebookEditorModelResolverService.js\";\nimport type { IExtHostContext } from \"../../services/extensions/common/extHostCustomers.js\";\nimport { SerializableObjectWithBuffers } from \"../../services/extensions/common/proxyIdentifier.js\";\nimport {\n\tExtHostContext,\n\ttype ExtHostNotebookDocumentsShape,\n\ttype MainThreadNotebookDocumentsShape,\n\ttype NotebookCellDto,\n\ttype NotebookCellsChangedEventDto,\n\ttype NotebookDataDto,\n} from \"../common/extHost.protocol.js\";\nimport { BoundModelReferenceCollection } from \"./mainThreadDocuments.js\";\nimport { NotebookDto } from \"./mainThreadNotebookDto.js\";\n\nexport class MainThreadNotebookDocuments\n\timplements MainThreadNotebookDocumentsShape\n{\n\tprivate readonly _disposables = new DisposableStore();\n\n\tprivate readonly _proxy: ExtHostNotebookDocumentsShape;\n\tprivate readonly _documentEventListenersMapping =\n\t\tnew ResourceMap<DisposableStore>();\n\tprivate readonly _modelReferenceCollection: BoundModelReferenceCollection;\n\n\tconstructor(\n\t\textHostContext: IExtHostContext,\n\t\t@INotebookEditorModelResolverService private readonly _notebookEditorModelResolverService: INotebookEditorModelResolverService,\n\t\t@IUriIdentityService private readonly _uriIdentityService: IUriIdentityService\n\t) {\n\t\tthis._proxy = extHostContext.getProxy(ExtHostContext.ExtHostNotebookDocuments);\n\t\tthis._modelReferenceCollection = new BoundModelReferenceCollection(this._uriIdentityService.extUri);\n\n\t\t// forward dirty and save events\n\t\tthis._disposables.add(this._notebookEditorModelResolverService.onDidChangeDirty(model => this._proxy.$acceptDirtyStateChanged(model.resource, model.isDirty())));\n\t\tthis._disposables.add(this._notebookEditorModelResolverService.onDidSaveNotebook(e => this._proxy.$acceptModelSaved(e)));\n\n\t\t// when a conflict is going to happen RELEASE references that are held by extensions\n\t\tthis._disposables.add(_notebookEditorModelResolverService.onWillFailWithConflict(e => {\n\t\t\tthis._modelReferenceCollection.remove(e.resource);\n\t\t}));\n\t}\n\n\tdispose(): void {\n\t\tthis._disposables.dispose();\n\t\tthis._modelReferenceCollection.dispose();\n\t\tdispose(this._documentEventListenersMapping.values());\n\t}\n\n\thandleNotebooksAdded(notebooks: readonly NotebookTextModel[]): void {\n\t\tfor (const textModel of notebooks) {\n\t\t\tconst disposableStore = new DisposableStore();\n\t\t\tdisposableStore.add(\n\t\t\t\ttextModel.onDidChangeContent((event) => {\n\t\t\t\t\tconst eventDto: NotebookCellsChangedEventDto = {\n\t\t\t\t\t\tversionId: event.versionId,\n\t\t\t\t\t\trawEvents: [],\n\t\t\t\t\t};\n\n\t\t\t\t\tfor (const e of event.rawEvents) {\n\t\t\t\t\t\tswitch (e.kind) {\n\t\t\t\t\t\t\tcase NotebookCellsChangeType.ModelChange:\n\t\t\t\t\t\t\t\teventDto.rawEvents.push({\n\t\t\t\t\t\t\t\t\tkind: e.kind,\n\t\t\t\t\t\t\t\t\tchanges: e.changes.map(\n\t\t\t\t\t\t\t\t\t\t(diff) =>\n\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\tdiff[0],\n\t\t\t\t\t\t\t\t\t\t\t\tdiff[1],\n\t\t\t\t\t\t\t\t\t\t\t\tdiff[2].map((cell) =>\n\t\t\t\t\t\t\t\t\t\t\t\t\tNotebookDto.toNotebookCellDto(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tcell,\n\t\t\t\t\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t\t\t\t] as [\n\t\t\t\t\t\t\t\t\t\t\t\tnumber,\n\t\t\t\t\t\t\t\t\t\t\t\tnumber,\n\t\t\t\t\t\t\t\t\t\t\t\tNotebookCellDto[],\n\t\t\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase NotebookCellsChangeType.Move:\n\t\t\t\t\t\t\t\teventDto.rawEvents.push({\n\t\t\t\t\t\t\t\t\tkind: e.kind,\n\t\t\t\t\t\t\t\t\tindex: e.index,\n\t\t\t\t\t\t\t\t\tlength: e.length,\n\t\t\t\t\t\t\t\t\tnewIdx: e.newIdx,\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase NotebookCellsChangeType.Output:\n\t\t\t\t\t\t\t\teventDto.rawEvents.push({\n\t\t\t\t\t\t\t\t\tkind: e.kind,\n\t\t\t\t\t\t\t\t\tindex: e.index,\n\t\t\t\t\t\t\t\t\toutputs: e.outputs.map(\n\t\t\t\t\t\t\t\t\t\tNotebookDto.toNotebookOutputDto,\n\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase NotebookCellsChangeType.OutputItem:\n\t\t\t\t\t\t\t\teventDto.rawEvents.push({\n\t\t\t\t\t\t\t\t\tkind: e.kind,\n\t\t\t\t\t\t\t\t\tindex: e.index,\n\t\t\t\t\t\t\t\t\toutputId: e.outputId,\n\t\t\t\t\t\t\t\t\toutputItems: e.outputItems.map(\n\t\t\t\t\t\t\t\t\t\tNotebookDto.toNotebookOutputItemDto,\n\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t\tappend: e.append,\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase NotebookCellsChangeType.ChangeCellLanguage:\n\t\t\t\t\t\t\tcase NotebookCellsChangeType.ChangeCellContent:\n\t\t\t\t\t\t\tcase NotebookCellsChangeType.ChangeCellMetadata:\n\t\t\t\t\t\t\tcase NotebookCellsChangeType.ChangeCellInternalMetadata:\n\t\t\t\t\t\t\t\teventDto.rawEvents.push(e);\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tconst hasDocumentMetadataChangeEvent = event.rawEvents.find(\n\t\t\t\t\t\t(e) =>\n\t\t\t\t\t\t\te.kind ===\n\t\t\t\t\t\t\tNotebookCellsChangeType.ChangeDocumentMetadata,\n\t\t\t\t\t);\n\n\t\t\t\t\t// using the model resolver service to know if the model is dirty or not.\n\t\t\t\t\t// assuming this is the first listener it can mean that at first the model\n\t\t\t\t\t// is marked as dirty and that another event is fired\n\t\t\t\t\tthis._proxy.$acceptModelChanged(\n\t\t\t\t\t\ttextModel.uri,\n\t\t\t\t\t\tnew SerializableObjectWithBuffers(eventDto),\n\t\t\t\t\t\tthis._notebookEditorModelResolverService.isDirty(\n\t\t\t\t\t\t\ttextModel.uri,\n\t\t\t\t\t\t),\n\t\t\t\t\t\thasDocumentMetadataChangeEvent\n\t\t\t\t\t\t\t? textModel.metadata\n\t\t\t\t\t\t\t: undefined,\n\t\t\t\t\t);\n\t\t\t\t}),\n\t\t\t);\n\n\t\t\tthis._documentEventListenersMapping.set(\n\t\t\t\ttextModel.uri,\n\t\t\t\tdisposableStore,\n\t\t\t);\n\t\t}\n\t}\n\n\thandleNotebooksRemoved(uris: URI[]): void {\n\t\tfor (const uri of uris) {\n\t\t\tthis._documentEventListenersMapping.get(uri)?.dispose();\n\t\t\tthis._documentEventListenersMapping.delete(uri);\n\t\t}\n\t}\n\n\tasync $tryCreateNotebook(options: {\n\t\tviewType: string;\n\t\tcontent?: NotebookDataDto;\n\t}): Promise<UriComponents> {\n\t\tif (options.content) {\n\t\t\tconst ref = await this._notebookEditorModelResolverService.resolve(\n\t\t\t\t{ untitledResource: undefined },\n\t\t\t\toptions.viewType,\n\t\t\t);\n\n\t\t\t// untitled notebooks are disposed when they get saved. we should not hold a reference\n\t\t\t// to such a disposed notebook and therefore dispose the reference as well\n\t\t\tref.object.notebook.onWillDispose(() => {\n\t\t\t\tref.dispose();\n\t\t\t});\n\n\t\t\t// untitled notebooks with content are dirty by default\n\t\t\tthis._proxy.$acceptDirtyStateChanged(ref.object.resource, true);\n\n\t\t\t// apply content changes... slightly HACKY -> this triggers a change event\n\t\t\tif (options.content) {\n\t\t\t\tconst data = NotebookDto.fromNotebookDataDto(options.content);\n\t\t\t\tref.object.notebook.reset(\n\t\t\t\t\tdata.cells,\n\t\t\t\t\tdata.metadata,\n\t\t\t\t\tref.object.notebook.transientOptions,\n\t\t\t\t);\n\t\t\t}\n\t\t\treturn ref.object.notebook.uri;\n\t\t} else {\n\t\t\t// If we aren't adding content, we don't need to resolve the full editor model yet.\n\t\t\t// This will allow us to adjust settings when the editor is opened, e.g. scratchpad\n\t\t\tconst notebook =\n\t\t\t\tawait this._notebookEditorModelResolverService.createUntitledNotebookTextModel(\n\t\t\t\t\toptions.viewType,\n\t\t\t\t);\n\t\t\treturn notebook.uri;\n\t\t}\n\t}\n\n\tasync $tryOpenNotebook(uriComponents: UriComponents): Promise<URI> {\n\t\tconst uri = URI.revive(uriComponents);\n\t\tconst ref = await this._notebookEditorModelResolverService.resolve(\n\t\t\turi,\n\t\t\tundefined,\n\t\t);\n\n\t\tif (uriComponents.scheme === \"untitled\") {\n\t\t\t// untitled notebooks are disposed when they get saved. we should not hold a reference\n\t\t\t// to such a disposed notebook and therefore dispose the reference as well\n\t\t\tref.object.notebook.onWillDispose(() => {\n\t\t\t\tref.dispose();\n\t\t\t});\n\t\t}\n\n\t\tthis._modelReferenceCollection.add(uri, ref);\n\t\treturn uri;\n\t}\n\n\tasync $trySaveNotebook(uriComponents: UriComponents) {\n\t\tconst uri = URI.revive(uriComponents);\n\n\t\tconst ref = await this._notebookEditorModelResolverService.resolve(uri);\n\t\tconst saveResult = await ref.object.save();\n\t\tref.dispose();\n\t\treturn saveResult;\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
