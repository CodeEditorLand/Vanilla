var c=Object.defineProperty;var a=Object.getOwnPropertyDescriptor;var m=(o,i,e,t)=>{for(var r=t>1?void 0:t?a(i,e):i,n=o.length-1,d;n>=0;n--)(d=o[n])&&(r=(t?d(i,e,r):d(r))||r);return t&&r&&c(i,e,r),r},p=(o,i)=>(e,t)=>i(e,t,o);import{Disposable as g,DisposableMap as b}from"../../../base/common/lifecycle.js";import{IAiEmbeddingVectorService as E}from"../../services/aiEmbeddingVector/common/aiEmbeddingVectorService.js";import{extHostNamedCustomer as v}from"../../services/extensions/common/extHostCustomers.js";import{ExtHostContext as x,MainContext as A}from"../common/extHost.protocol.js";let s=class extends g{constructor(e,t){super();this._AiEmbeddingVectorService=t;this._proxy=e.getProxy(x.ExtHostAiEmbeddingVector)}_proxy;_registrations=this._register(new b);$registerAiEmbeddingVectorProvider(e,t){const r={provideAiEmbeddingVector:(n,d)=>this._proxy.$provideAiEmbeddingVector(t,n,d)};this._registrations.set(t,this._AiEmbeddingVectorService.registerAiEmbeddingVectorProvider(e,r))}$unregisterAiEmbeddingVectorProvider(e){this._registrations.deleteAndDispose(e)}};s=m([v(A.MainThreadAiEmbeddingVector),p(1,E)],s);export{s as MainThreadAiEmbeddingVector};
