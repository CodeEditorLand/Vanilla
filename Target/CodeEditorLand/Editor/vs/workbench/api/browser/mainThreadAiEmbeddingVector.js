var c=Object.defineProperty;var g=Object.getOwnPropertyDescriptor;var m=(o,t,e,r)=>{for(var i=r>1?void 0:r?g(t,e):t,d=o.length-1,n;d>=0;d--)(n=o[d])&&(i=(r?n(t,e,i):n(i))||i);return r&&i&&c(t,e,i),i},p=(o,t)=>(e,r)=>t(e,r,o);import"../../../base/common/cancellation.js";import{Disposable as a,DisposableMap as E}from"../../../base/common/lifecycle.js";import{IAiEmbeddingVectorService as b}from"../../services/aiEmbeddingVector/common/aiEmbeddingVectorService.js";import{extHostNamedCustomer as v}from"../../services/extensions/common/extHostCustomers.js";import{ExtHostContext as x,MainContext as A}from"../common/extHost.protocol.js";let s=class extends a{constructor(e,r){super();this._AiEmbeddingVectorService=r;this._proxy=e.getProxy(x.ExtHostAiEmbeddingVector)}_proxy;_registrations=this._register(new E);$registerAiEmbeddingVectorProvider(e,r){const i={provideAiEmbeddingVector:(d,n)=>this._proxy.$provideAiEmbeddingVector(r,d,n)};this._registrations.set(r,this._AiEmbeddingVectorService.registerAiEmbeddingVectorProvider(e,i))}$unregisterAiEmbeddingVectorProvider(e){this._registrations.deleteAndDispose(e)}};s=m([v(A.MainThreadAiEmbeddingVector),p(1,b)],s);export{s as MainThreadAiEmbeddingVector};
