import{createApiFactoryAndRegisterActors as g}from"../common/extHost.api.impl.js";import"../common/extHostExtensionActivator.js";import{AbstractExtHostExtensionService as h}from"../common/extHostExtensionService.js";import{URI as w}from"../../../base/common/uri.js";import{RequireInterceptor as _}from"../common/extHostRequireInterceptor.js";import"../../../platform/extensions/common/extensions.js";import{ExtensionRuntime as E}from"../common/extHostTypes.js";import{timeout as v}from"../../../base/common/async.js";import{ExtHostConsoleForwarder as y}from"./extHostConsoleForwarder.js";class $ extends _{_installInterceptor(){}getModule(e,r){for(const n of this._alternatives){const t=n(e);if(t){e=t;break}}if(this._factories.has(e))return this._factories.get(e).load(e,r,()=>{throw new Error("CANNOT LOAD MODULE from here.")})}}class C extends h{extensionRuntime=E.Webworker;_fakeModules;async _beforeAlmostReadyToRunExtensions(){this._instaService.createInstance(y);const e=this._instaService.invokeFunction(g);this._fakeModules=this._instaService.createInstance($,e,{mine:this._myRegistry,all:this._globalRegistry}),await this._fakeModules.install(),performance.mark("code/extHost/didInitAPI"),await this._waitForDebuggerAttachment()}_getEntryPoint(e){return e.browser}async _loadCommonJSModule(e,r,n){r=r.with({path:I(r.path,".js")});const t=e?.identifier.value;t&&performance.mark(`code/extHost/willFetchExtensionCode/${t}`);const m=w.revive(await this._mainThreadExtensionsProxy.$asBrowserUri(r)),a=await fetch(m.toString(!0));if(t&&performance.mark(`code/extHost/didFetchExtensionCode/${t}`),a.status!==200)throw new Error(a.statusText);const u=await a.text(),f=`${r.toString(!0)}#vscode-extension`,p=`${u}
//# sourceURL=${f}`;let d;try{d=new Function("module","exports","require",p)}catch(s){throw s}e&&await this._extHostLocalizationService.initializeLocalizedMessages(e);const i={},c={exports:i},x=s=>{const l=this._fakeModules.getModule(s,r);if(l===void 0)throw new Error(`Cannot load module '${s}'`);return l};try{return n.codeLoadingStart(),t&&performance.mark(`code/extHost/willLoadExtensionCode/${t}`),d(c,i,x),c.exports!==i?c.exports:i}finally{t&&performance.mark(`code/extHost/didLoadExtensionCode/${t}`),n.codeLoadingStop()}}async $setRemoteEnvironment(e){}async _waitForDebuggerAttachment(e=5e3){if(!this._initData.environment.isExtensionDevelopmentDebug)return;const r=Date.now()+e;for(;Date.now()<r&&!("__jsDebugIsReady"in globalThis);)await v(10)}}function I(o,e){return o.endsWith(e)?o:o+e}export{C as ExtHostExtensionService};
