{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/api/worker/extHostExtensionService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { createApiFactoryAndRegisterActors } from '../common/extHost.api.impl.js';\nimport { ExtensionActivationTimesBuilder } from '../common/extHostExtensionActivator.js';\nimport { AbstractExtHostExtensionService } from '../common/extHostExtensionService.js';\nimport { URI } from '../../../base/common/uri.js';\nimport { RequireInterceptor } from '../common/extHostRequireInterceptor.js';\nimport { IExtensionDescription } from '../../../platform/extensions/common/extensions.js';\nimport { ExtensionRuntime } from '../common/extHostTypes.js';\nimport { timeout } from '../../../base/common/async.js';\nimport { ExtHostConsoleForwarder } from './extHostConsoleForwarder.js';\n\nclass WorkerRequireInterceptor extends RequireInterceptor {\n\n\tprotected _installInterceptor() { }\n\n\tgetModule(request: string, parent: URI): undefined | any {\n\t\tfor (const alternativeModuleName of this._alternatives) {\n\t\t\tconst alternative = alternativeModuleName(request);\n\t\t\tif (alternative) {\n\t\t\t\trequest = alternative;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tif (this._factories.has(request)) {\n\t\t\treturn this._factories.get(request)!.load(request, parent, () => { throw new Error('CANNOT LOAD MODULE from here.'); });\n\t\t}\n\t\treturn undefined;\n\t}\n}\n\nexport class ExtHostExtensionService extends AbstractExtHostExtensionService {\n\treadonly extensionRuntime = ExtensionRuntime.Webworker;\n\n\tprivate _fakeModules?: WorkerRequireInterceptor;\n\n\tprotected async _beforeAlmostReadyToRunExtensions(): Promise<void> {\n\t\t// make sure console.log calls make it to the render\n\t\tthis._instaService.createInstance(ExtHostConsoleForwarder);\n\n\t\t// initialize API and register actors\n\t\tconst apiFactory = this._instaService.invokeFunction(createApiFactoryAndRegisterActors);\n\t\tthis._fakeModules = this._instaService.createInstance(WorkerRequireInterceptor, apiFactory, { mine: this._myRegistry, all: this._globalRegistry });\n\t\tawait this._fakeModules.install();\n\t\tperformance.mark('code/extHost/didInitAPI');\n\n\t\tawait this._waitForDebuggerAttachment();\n\t}\n\n\tprotected _getEntryPoint(extensionDescription: IExtensionDescription): string | undefined {\n\t\treturn extensionDescription.browser;\n\t}\n\n\tprotected async _loadCommonJSModule<T extends object | undefined>(extension: IExtensionDescription | null, module: URI, activationTimesBuilder: ExtensionActivationTimesBuilder): Promise<T> {\n\t\tmodule = module.with({ path: ensureSuffix(module.path, '.js') });\n\t\tconst extensionId = extension?.identifier.value;\n\t\tif (extensionId) {\n\t\t\tperformance.mark(`code/extHost/willFetchExtensionCode/${extensionId}`);\n\t\t}\n\n\t\t// First resolve the extension entry point URI to something we can load using `fetch`\n\t\t// This needs to be done on the main thread due to a potential `resourceUriProvider` (workbench api)\n\t\t// which is only available in the main thread\n\t\tconst browserUri = URI.revive(await this._mainThreadExtensionsProxy.$asBrowserUri(module));\n\t\tconst response = await fetch(browserUri.toString(true));\n\t\tif (extensionId) {\n\t\t\tperformance.mark(`code/extHost/didFetchExtensionCode/${extensionId}`);\n\t\t}\n\n\t\tif (response.status !== 200) {\n\t\t\tthrow new Error(response.statusText);\n\t\t}\n\n\t\t// fetch JS sources as text and create a new function around it\n\t\tconst source = await response.text();\n\t\t// Here we append #vscode-extension to serve as a marker, such that source maps\n\t\t// can be adjusted for the extra wrapping function.\n\t\tconst sourceURL = `${module.toString(true)}#vscode-extension`;\n\t\tconst fullSource = `${source}\\n//# sourceURL=${sourceURL}`;\n\t\tlet initFn: Function;\n\t\ttry {\n\t\t\tinitFn = new Function('module', 'exports', 'require', fullSource); // CodeQL [SM01632] js/eval-call there is no alternative until we move to ESM\n\t\t} catch (err) {\n\t\t\tif (extensionId) {\n\t\t\t\tconsole.error(`Loading code for extension ${extensionId} failed: ${err.message}`);\n\t\t\t} else {\n\t\t\t\tconsole.error(`Loading code failed: ${err.message}`);\n\t\t\t}\n\t\t\tconsole.error(`${module.toString(true)}${typeof err.line === 'number' ? ` line ${err.line}` : ''}${typeof err.column === 'number' ? ` column ${err.column}` : ''}`);\n\t\t\tconsole.error(err);\n\t\t\tthrow err;\n\t\t}\n\n\t\tif (extension) {\n\t\t\tawait this._extHostLocalizationService.initializeLocalizedMessages(extension);\n\t\t}\n\n\t\t// define commonjs globals: `module`, `exports`, and `require`\n\t\tconst _exports = {};\n\t\tconst _module = { exports: _exports };\n\t\tconst _require = (request: string) => {\n\t\t\tconst result = this._fakeModules!.getModule(request, module);\n\t\t\tif (result === undefined) {\n\t\t\t\tthrow new Error(`Cannot load module '${request}'`);\n\t\t\t}\n\t\t\treturn result;\n\t\t};\n\n\t\ttry {\n\t\t\tactivationTimesBuilder.codeLoadingStart();\n\t\t\tif (extensionId) {\n\t\t\t\tperformance.mark(`code/extHost/willLoadExtensionCode/${extensionId}`);\n\t\t\t}\n\t\t\tinitFn(_module, _exports, _require);\n\t\t\treturn <T>(_module.exports !== _exports ? _module.exports : _exports);\n\t\t} finally {\n\t\t\tif (extensionId) {\n\t\t\t\tperformance.mark(`code/extHost/didLoadExtensionCode/${extensionId}`);\n\t\t\t}\n\t\t\tactivationTimesBuilder.codeLoadingStop();\n\t\t}\n\t}\n\n\tasync $setRemoteEnvironment(_env: { [key: string]: string | null }): Promise<void> {\n\t\treturn;\n\t}\n\n\tprivate async _waitForDebuggerAttachment(waitTimeout = 5000) {\n\t\t// debugger attaches async, waiting for it fixes #106698 and #99222\n\t\tif (!this._initData.environment.isExtensionDevelopmentDebug) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst deadline = Date.now() + waitTimeout;\n\t\twhile (Date.now() < deadline && !('__jsDebugIsReady' in globalThis)) {\n\t\t\tawait timeout(10);\n\t\t}\n\t}\n}\n\nfunction ensureSuffix(path: string, suffix: string): string {\n\treturn path.endsWith(suffix) ? path : path + suffix;\n}\n"],
  "mappings": "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",
  "names": []
}
