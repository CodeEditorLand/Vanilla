{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/api/worker/extensionHostWorker.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IMessagePassingProtocol } from '../../../base/parts/ipc/common/ipc.js';\nimport { VSBuffer } from '../../../base/common/buffer.js';\nimport { Emitter } from '../../../base/common/event.js';\nimport { isMessageOfType, MessageType, createMessageOfType, IExtensionHostInitData } from '../../services/extensions/common/extensionHostProtocol.js';\nimport { ExtensionHostMain } from '../common/extensionHostMain.js';\nimport { IHostUtils } from '../common/extHostExtensionService.js';\nimport { NestedWorker } from '../../services/extensions/worker/polyfillNestedWorker.js';\nimport * as path from '../../../base/common/path.js';\nimport * as performance from '../../../base/common/performance.js';\n\nimport '../common/extHost.common.services.js';\nimport './extHost.worker.services.js';\nimport { FileAccess } from '../../../base/common/network.js';\nimport { URI } from '../../../base/common/uri.js';\n\n//#region --- Define, capture, and override some globals\n\ndeclare function postMessage(data: any, transferables?: Transferable[]): void;\ndeclare const name: string; // https://developer.mozilla.org/en-US/docs/Web/API/DedicatedWorkerGlobalScope/name\ndeclare type _Fetch = typeof fetch;\n\ndeclare namespace self {\n\tlet close: any;\n\tlet postMessage: any;\n\tlet addEventListener: any;\n\tlet removeEventListener: any;\n\tlet dispatchEvent: any;\n\tlet indexedDB: { open: any;[k: string]: any };\n\tlet caches: { open: any;[k: string]: any };\n\tlet importScripts: any;\n\tlet fetch: _Fetch;\n\tlet XMLHttpRequest: any;\n}\n\nconst nativeClose = self.close.bind(self);\nself.close = () => console.trace(`'close' has been blocked`);\n\nconst nativePostMessage = postMessage.bind(self);\nself.postMessage = () => console.trace(`'postMessage' has been blocked`);\n\nfunction shouldTransformUri(uri: string): boolean {\n\t// In principle, we could convert any URI, but we have concerns\n\t// that parsing https URIs might end up decoding escape characters\n\t// and result in an unintended transformation\n\treturn /^(file|vscode-remote):/i.test(uri);\n}\n\nconst nativeFetch = fetch.bind(self);\nfunction patchFetching(asBrowserUri: (uri: URI) => Promise<URI>) {\n\tself.fetch = async function (input, init) {\n\t\tif (input instanceof Request) {\n\t\t\t// Request object - massage not supported\n\t\t\treturn nativeFetch(input, init);\n\t\t}\n\t\tif (shouldTransformUri(String(input))) {\n\t\t\tinput = (await asBrowserUri(URI.parse(String(input)))).toString(true);\n\t\t}\n\t\treturn nativeFetch(input, init);\n\t};\n\n\tself.XMLHttpRequest = class extends XMLHttpRequest {\n\t\toverride open(method: string, url: string | URL, async?: boolean, username?: string | null, password?: string | null): void {\n\t\t\t(async () => {\n\t\t\t\tif (shouldTransformUri(url.toString())) {\n\t\t\t\t\turl = (await asBrowserUri(URI.parse(url.toString()))).toString(true);\n\t\t\t\t}\n\t\t\t\tsuper.open(method, url, async ?? true, username, password);\n\t\t\t})();\n\t\t}\n\t};\n}\n\nself.importScripts = () => { throw new Error(`'importScripts' has been blocked`); };\n\n// const nativeAddEventListener = addEventListener.bind(self);\nself.addEventListener = () => console.trace(`'addEventListener' has been blocked`);\n\n(<any>self)['AMDLoader'] = undefined;\n(<any>self)['NLSLoaderPlugin'] = undefined;\n(<any>self)['define'] = undefined;\n(<any>self)['require'] = undefined;\n(<any>self)['webkitRequestFileSystem'] = undefined;\n(<any>self)['webkitRequestFileSystemSync'] = undefined;\n(<any>self)['webkitResolveLocalFileSystemSyncURL'] = undefined;\n(<any>self)['webkitResolveLocalFileSystemURL'] = undefined;\n\nif ((<any>self).Worker) {\n\n\t// make sure new Worker(...) always uses blob: (to maintain current origin)\n\tconst _Worker = (<any>self).Worker;\n\tWorker = <any>function (stringUrl: string | URL, options?: WorkerOptions) {\n\t\tif (/^file:/i.test(stringUrl.toString())) {\n\t\t\tstringUrl = FileAccess.uriToBrowserUri(URI.parse(stringUrl.toString())).toString(true);\n\t\t} else if (/^vscode-remote:/i.test(stringUrl.toString())) {\n\t\t\t// Supporting transformation of vscode-remote URIs requires an async call to the main thread,\n\t\t\t// but we cannot do this call from within the embedded Worker, and the only way out would be\n\t\t\t// to use templating instead of a function in the web api (`resourceUriProvider`)\n\t\t\tthrow new Error(`Creating workers from remote extensions is currently not supported.`);\n\t\t}\n\n\t\t// IMPORTANT: bootstrapFn is stringified and injected as worker blob-url. Because of that it CANNOT\n\t\t// have dependencies on other functions or variables. Only constant values are supported. Due to\n\t\t// that logic of FileAccess.asBrowserUri had to be copied, see `asWorkerBrowserUrl` (below).\n\t\tconst bootstrapFnSource = (function bootstrapFn(workerUrl: string) {\n\t\t\tfunction asWorkerBrowserUrl(url: string | URL | TrustedScriptURL): any {\n\t\t\t\tif (typeof url === 'string' || url instanceof URL) {\n\t\t\t\t\treturn String(url).replace(/^file:\\/\\//i, 'vscode-file://vscode-app');\n\t\t\t\t}\n\t\t\t\treturn url;\n\t\t\t}\n\n\t\t\tconst nativeFetch = fetch.bind(self);\n\t\t\tself.fetch = function (input, init) {\n\t\t\t\tif (input instanceof Request) {\n\t\t\t\t\t// Request object - massage not supported\n\t\t\t\t\treturn nativeFetch(input, init);\n\t\t\t\t}\n\t\t\t\treturn nativeFetch(asWorkerBrowserUrl(input), init);\n\t\t\t};\n\t\t\tself.XMLHttpRequest = class extends XMLHttpRequest {\n\t\t\t\toverride open(method: string, url: string | URL, async?: boolean, username?: string | null, password?: string | null): void {\n\t\t\t\t\treturn super.open(method, asWorkerBrowserUrl(url), async ?? true, username, password);\n\t\t\t\t}\n\t\t\t};\n\t\t\tconst nativeImportScripts = importScripts.bind(self);\n\t\t\tself.importScripts = (...urls: string[]) => {\n\t\t\t\tnativeImportScripts(...urls.map(asWorkerBrowserUrl));\n\t\t\t};\n\n\t\t\tnativeImportScripts(workerUrl);\n\t\t}).toString();\n\n\t\tconst js = `(${bootstrapFnSource}('${stringUrl}'))`;\n\t\toptions = options || {};\n\t\toptions.name = `${name} -> ${options.name || path.basename(stringUrl.toString())}`;\n\t\tconst blob = new Blob([js], { type: 'application/javascript' });\n\t\tconst blobUrl = URL.createObjectURL(blob);\n\t\treturn new _Worker(blobUrl, options);\n\t};\n\n} else {\n\t(<any>self).Worker = class extends NestedWorker {\n\t\tconstructor(stringOrUrl: string | URL, options?: WorkerOptions) {\n\t\t\tsuper(nativePostMessage, stringOrUrl, { name: path.basename(stringOrUrl.toString()), ...options });\n\t\t}\n\t};\n}\n\n//#endregion ---\n\nconst hostUtil = new class implements IHostUtils {\n\tdeclare readonly _serviceBrand: undefined;\n\tpublic readonly pid = undefined;\n\texit(_code?: number | undefined): void {\n\t\tnativeClose();\n\t}\n};\n\n\nclass ExtensionWorker {\n\n\t// protocol\n\treadonly protocol: IMessagePassingProtocol;\n\n\tconstructor() {\n\n\t\tconst channel = new MessageChannel();\n\t\tconst emitter = new Emitter<VSBuffer>();\n\t\tlet terminating = false;\n\n\t\t// send over port2, keep port1\n\t\tnativePostMessage(channel.port2, [channel.port2]);\n\n\t\tchannel.port1.onmessage = event => {\n\t\t\tconst { data } = event;\n\t\t\tif (!(data instanceof ArrayBuffer)) {\n\t\t\t\tconsole.warn('UNKNOWN data received', data);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst msg = VSBuffer.wrap(new Uint8Array(data, 0, data.byteLength));\n\t\t\tif (isMessageOfType(msg, MessageType.Terminate)) {\n\t\t\t\t// handle terminate-message right here\n\t\t\t\tterminating = true;\n\t\t\t\tonTerminate('received terminate message from renderer');\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// emit non-terminate messages to the outside\n\t\t\temitter.fire(msg);\n\t\t};\n\n\t\tthis.protocol = {\n\t\t\tonMessage: emitter.event,\n\t\t\tsend: vsbuf => {\n\t\t\t\tif (!terminating) {\n\t\t\t\t\tconst data = vsbuf.buffer.buffer.slice(vsbuf.buffer.byteOffset, vsbuf.buffer.byteOffset + vsbuf.buffer.byteLength);\n\t\t\t\t\tchannel.port1.postMessage(data, [data]);\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t}\n}\n\ninterface IRendererConnection {\n\tprotocol: IMessagePassingProtocol;\n\tinitData: IExtensionHostInitData;\n}\nfunction connectToRenderer(protocol: IMessagePassingProtocol): Promise<IRendererConnection> {\n\treturn new Promise<IRendererConnection>(resolve => {\n\t\tconst once = protocol.onMessage(raw => {\n\t\t\tonce.dispose();\n\t\t\tconst initData = <IExtensionHostInitData>JSON.parse(raw.toString());\n\t\t\tprotocol.send(createMessageOfType(MessageType.Initialized));\n\t\t\tresolve({ protocol, initData });\n\t\t});\n\t\tprotocol.send(createMessageOfType(MessageType.Ready));\n\t});\n}\n\nlet onTerminate = (reason: string) => nativeClose();\n\ninterface IInitMessage {\n\treadonly type: 'vscode.init';\n\treadonly data: ReadonlyMap<string, MessagePort>;\n}\n\nfunction isInitMessage(a: any): a is IInitMessage {\n\treturn !!a && typeof a === 'object' && a.type === 'vscode.init' && a.data instanceof Map;\n}\n\n/**\n * Defines the worker entry point. Must be exported and named `create`.\n * @skipMangle\n */\nexport function create(): { onmessage: (message: any) => void } {\n\tperformance.mark(`code/extHost/willConnectToRenderer`);\n\tconst res = new ExtensionWorker();\n\n\treturn {\n\t\tonmessage(message: any) {\n\t\t\tif (!isInitMessage(message)) {\n\t\t\t\treturn; // silently ignore foreign messages\n\t\t\t}\n\n\t\t\tconnectToRenderer(res.protocol).then(data => {\n\t\t\t\tperformance.mark(`code/extHost/didWaitForInitData`);\n\t\t\t\tconst extHostMain = new ExtensionHostMain(\n\t\t\t\t\tdata.protocol,\n\t\t\t\t\tdata.initData,\n\t\t\t\t\thostUtil,\n\t\t\t\t\tnull,\n\t\t\t\t\tmessage.data\n\t\t\t\t);\n\n\t\t\t\tpatchFetching(uri => extHostMain.asBrowserUri(uri));\n\n\t\t\t\tonTerminate = (reason: string) => extHostMain.terminate(reason);\n\t\t\t});\n\t\t}\n\t};\n}\n"],
  "mappings": "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",
  "names": ["nativeFetch"]
}
