{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/commands/common/commandService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { timeout } from \"../../../../base/common/async.js\";\nimport { Emitter, Event } from \"../../../../base/common/event.js\";\nimport { Disposable } from \"../../../../base/common/lifecycle.js\";\nimport {\n\tCommandsRegistry,\n\ttype ICommandEvent,\n\tICommandService,\n} from \"../../../../platform/commands/common/commands.js\";\nimport {\n\tInstantiationType,\n\tregisterSingleton,\n} from \"../../../../platform/instantiation/common/extensions.js\";\nimport { IInstantiationService } from \"../../../../platform/instantiation/common/instantiation.js\";\nimport { ILogService } from \"../../../../platform/log/common/log.js\";\nimport { IExtensionService } from \"../../extensions/common/extensions.js\";\n\nexport class CommandService extends Disposable implements ICommandService {\n\tdeclare readonly _serviceBrand: undefined;\n\n\tprivate _extensionHostIsReady = false;\n\tprivate _starActivation: Promise<void> | null;\n\n\tprivate readonly _onWillExecuteCommand: Emitter<ICommandEvent> =\n\t\tthis._register(new Emitter<ICommandEvent>());\n\tpublic readonly onWillExecuteCommand: Event<ICommandEvent> =\n\t\tthis._onWillExecuteCommand.event;\n\n\tprivate readonly _onDidExecuteCommand: Emitter<ICommandEvent> =\n\t\tnew Emitter<ICommandEvent>();\n\tpublic readonly onDidExecuteCommand: Event<ICommandEvent> =\n\t\tthis._onDidExecuteCommand.event;\n\n\tconstructor(\n\t\t@IInstantiationService\n\t\tprivate readonly _instantiationService: IInstantiationService,\n\t\t@IExtensionService\n\t\tprivate readonly _extensionService: IExtensionService,\n\t\t@ILogService private readonly _logService: ILogService,\n\t) {\n\t\tsuper();\n\t\tthis._extensionService\n\t\t\t.whenInstalledExtensionsRegistered()\n\t\t\t.then((value) => (this._extensionHostIsReady = value));\n\t\tthis._starActivation = null;\n\t}\n\n\tprivate _activateStar(): Promise<void> {\n\t\tif (!this._starActivation) {\n\t\t\t// wait for * activation, limited to at most 30s\n\t\t\tthis._starActivation = Promise.race<any>([\n\t\t\t\tthis._extensionService.activateByEvent(`*`),\n\t\t\t\ttimeout(30000),\n\t\t\t]);\n\t\t}\n\t\treturn this._starActivation;\n\t}\n\n\tasync executeCommand<T>(id: string, ...args: any[]): Promise<T> {\n\t\tthis._logService.trace(\"CommandService#executeCommand\", id);\n\n\t\tconst activationEvent = `onCommand:${id}`;\n\t\tconst commandIsRegistered = !!CommandsRegistry.getCommand(id);\n\n\t\tif (commandIsRegistered) {\n\t\t\t// if the activation event has already resolved (i.e. subsequent call),\n\t\t\t// we will execute the registered command immediately\n\t\t\tif (this._extensionService.activationEventIsDone(activationEvent)) {\n\t\t\t\treturn this._tryExecuteCommand(id, args);\n\t\t\t}\n\n\t\t\t// if the extension host didn't start yet, we will execute the registered\n\t\t\t// command immediately and send an activation event, but not wait for it\n\t\t\tif (!this._extensionHostIsReady) {\n\t\t\t\tthis._extensionService.activateByEvent(activationEvent); // intentionally not awaited\n\t\t\t\treturn this._tryExecuteCommand(id, args);\n\t\t\t}\n\n\t\t\t// we will wait for a simple activation event (e.g. in case an extension wants to overwrite it)\n\t\t\tawait this._extensionService.activateByEvent(activationEvent);\n\t\t\treturn this._tryExecuteCommand(id, args);\n\t\t}\n\n\t\t// finally, if the command is not registered we will send a simple activation event\n\t\t// as well as a * activation event raced against registration and against 30s\n\t\tawait Promise.all([\n\t\t\tthis._extensionService.activateByEvent(activationEvent),\n\t\t\tPromise.race<any>([\n\t\t\t\t// race * activation against command registration\n\t\t\t\tthis._activateStar(),\n\t\t\t\tEvent.toPromise(\n\t\t\t\t\tEvent.filter(\n\t\t\t\t\t\tCommandsRegistry.onDidRegisterCommand,\n\t\t\t\t\t\t(e) => e === id,\n\t\t\t\t\t),\n\t\t\t\t),\n\t\t\t]),\n\t\t]);\n\t\treturn this._tryExecuteCommand(id, args);\n\t}\n\n\tprivate _tryExecuteCommand(id: string, args: any[]): Promise<any> {\n\t\tconst command = CommandsRegistry.getCommand(id);\n\t\tif (!command) {\n\t\t\treturn Promise.reject(new Error(`command '${id}' not found`));\n\t\t}\n\t\ttry {\n\t\t\tthis._onWillExecuteCommand.fire({ commandId: id, args });\n\t\t\tconst result = this._instantiationService.invokeFunction(\n\t\t\t\tcommand.handler,\n\t\t\t\t...args,\n\t\t\t);\n\t\t\tthis._onDidExecuteCommand.fire({ commandId: id, args });\n\t\t\treturn Promise.resolve(result);\n\t\t} catch (err) {\n\t\t\treturn Promise.reject(err);\n\t\t}\n\t}\n}\n\nregisterSingleton(ICommandService, CommandService, InstantiationType.Delayed);\n"],
  "mappings": ";;;;;;;;;;;;AAKA,SAAS,eAAe;AACxB,SAAS,SAAS,aAAa;AAC/B,SAAS,kBAAkB;AAC3B;AAAA,EACC;AAAA,EAEA;AAAA,OACM;AACP;AAAA,EACC;AAAA,EACA;AAAA,OACM;AACP,SAAS,6BAA6B;AACtC,SAAS,mBAAmB;AAC5B,SAAS,yBAAyB;AAE3B,IAAM,iBAAN,cAA6B,WAAsC;AAAA,EAgBzE,YAEkB,uBAEA,mBACa,aAC7B;AACD,UAAM;AALW;AAEA;AACa;AAG9B,SAAK,kBACH,kCAAkC,EAClC,KAAK,CAAC,UAAW,KAAK,wBAAwB,KAAM;AACtD,SAAK,kBAAkB;AAAA,EACxB;AAAA,EAjDD,OAqB0E;AAAA;AAAA;AAAA,EAGjE,wBAAwB;AAAA,EACxB;AAAA,EAES,wBAChB,KAAK,UAAU,IAAI,QAAuB,CAAC;AAAA,EAC5B,uBACf,KAAK,sBAAsB;AAAA,EAEX,uBAChB,IAAI,QAAuB;AAAA,EACZ,sBACf,KAAK,qBAAqB;AAAA,EAgBnB,gBAA+B;AACtC,QAAI,CAAC,KAAK,iBAAiB;AAE1B,WAAK,kBAAkB,QAAQ,KAAU;AAAA,QACxC,KAAK,kBAAkB,gBAAgB,GAAG;AAAA,QAC1C,QAAQ,GAAK;AAAA,MACd,CAAC;AAAA,IACF;AACA,WAAO,KAAK;AAAA,EACb;AAAA,EAEA,MAAM,eAAkB,OAAe,MAAyB;AAC/D,SAAK,YAAY,MAAM,iCAAiC,EAAE;AAE1D,UAAM,kBAAkB,aAAa,EAAE;AACvC,UAAM,sBAAsB,CAAC,CAAC,iBAAiB,WAAW,EAAE;AAE5D,QAAI,qBAAqB;AAGxB,UAAI,KAAK,kBAAkB,sBAAsB,eAAe,GAAG;AAClE,eAAO,KAAK,mBAAmB,IAAI,IAAI;AAAA,MACxC;AAIA,UAAI,CAAC,KAAK,uBAAuB;AAChC,aAAK,kBAAkB,gBAAgB,eAAe;AACtD,eAAO,KAAK,mBAAmB,IAAI,IAAI;AAAA,MACxC;AAGA,YAAM,KAAK,kBAAkB,gBAAgB,eAAe;AAC5D,aAAO,KAAK,mBAAmB,IAAI,IAAI;AAAA,IACxC;AAIA,UAAM,QAAQ,IAAI;AAAA,MACjB,KAAK,kBAAkB,gBAAgB,eAAe;AAAA,MACtD,QAAQ,KAAU;AAAA;AAAA,QAEjB,KAAK,cAAc;AAAA,QACnB,MAAM;AAAA,UACL,MAAM;AAAA,YACL,iBAAiB;AAAA,YACjB,CAAC,MAAM,MAAM;AAAA,UACd;AAAA,QACD;AAAA,MACD,CAAC;AAAA,IACF,CAAC;AACD,WAAO,KAAK,mBAAmB,IAAI,IAAI;AAAA,EACxC;AAAA,EAEQ,mBAAmB,IAAY,MAA2B;AACjE,UAAM,UAAU,iBAAiB,WAAW,EAAE;AAC9C,QAAI,CAAC,SAAS;AACb,aAAO,QAAQ,OAAO,IAAI,MAAM,YAAY,EAAE,aAAa,CAAC;AAAA,IAC7D;AACA,QAAI;AACH,WAAK,sBAAsB,KAAK,EAAE,WAAW,IAAI,KAAK,CAAC;AACvD,YAAM,SAAS,KAAK,sBAAsB;AAAA,QACzC,QAAQ;AAAA,QACR,GAAG;AAAA,MACJ;AACA,WAAK,qBAAqB,KAAK,EAAE,WAAW,IAAI,KAAK,CAAC;AACtD,aAAO,QAAQ,QAAQ,MAAM;AAAA,IAC9B,SAAS,KAAK;AACb,aAAO,QAAQ,OAAO,GAAG;AAAA,IAC1B;AAAA,EACD;AACD;AArGa,iBAAN;AAAA,EAiBJ;AAAA,EAEA;AAAA,EAEA;AAAA,GArBU;AAuGb,kBAAkB,iBAAiB,gBAAgB,kBAAkB,OAAO;",
  "names": []
}
