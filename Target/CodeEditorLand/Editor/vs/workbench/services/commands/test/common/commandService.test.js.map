{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/commands/test/common/commandService.test.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport assert from 'assert';\nimport { IDisposable, DisposableStore } from '../../../../../base/common/lifecycle.js';\nimport { CommandsRegistry } from '../../../../../platform/commands/common/commands.js';\nimport { CommandService } from '../../common/commandService.js';\nimport { NullExtensionService } from '../../../extensions/common/extensions.js';\nimport { InstantiationService } from '../../../../../platform/instantiation/common/instantiationService.js';\nimport { NullLogService } from '../../../../../platform/log/common/log.js';\n\nsuite('CommandService', function () {\n\n\tlet commandRegistration: IDisposable;\n\n\tsetup(function () {\n\t\tcommandRegistration = CommandsRegistry.registerCommand('foo', function () { });\n\t});\n\n\tteardown(function () {\n\t\tcommandRegistration.dispose();\n\t});\n\n\ttest('activateOnCommand', () => {\n\n\t\tlet lastEvent: string;\n\n\t\tconst service = new CommandService(new InstantiationService(), new class extends NullExtensionService {\n\t\t\toverride activateByEvent(activationEvent: string): Promise<void> {\n\t\t\t\tlastEvent = activationEvent;\n\t\t\t\treturn super.activateByEvent(activationEvent);\n\t\t\t}\n\t\t}, new NullLogService());\n\n\t\treturn service.executeCommand('foo').then(() => {\n\t\t\tassert.ok(lastEvent, 'onCommand:foo');\n\t\t\treturn service.executeCommand('unknownCommandId');\n\t\t}).then(() => {\n\t\t\tassert.ok(false);\n\t\t}, () => {\n\t\t\tassert.ok(lastEvent, 'onCommand:unknownCommandId');\n\t\t});\n\t});\n\n\ttest('fwd activation error', async function () {\n\n\t\tconst extensionService = new class extends NullExtensionService {\n\t\t\toverride activateByEvent(activationEvent: string): Promise<void> {\n\t\t\t\treturn Promise.reject(new Error('bad_activate'));\n\t\t\t}\n\t\t};\n\n\t\tconst service = new CommandService(new InstantiationService(), extensionService, new NullLogService());\n\n\t\tawait extensionService.whenInstalledExtensionsRegistered();\n\n\t\treturn service.executeCommand('foo').then(() => assert.ok(false), err => {\n\t\t\tassert.strictEqual(err.message, 'bad_activate');\n\t\t});\n\t});\n\n\ttest('!onReady, but executeCommand', function () {\n\n\t\tlet callCounter = 0;\n\t\tconst reg = CommandsRegistry.registerCommand('bar', () => callCounter += 1);\n\n\t\tconst service = new CommandService(new InstantiationService(), new class extends NullExtensionService {\n\t\t\toverride whenInstalledExtensionsRegistered() {\n\t\t\t\treturn new Promise<boolean>(_resolve => { /*ignore*/ });\n\t\t\t}\n\t\t}, new NullLogService());\n\n\t\tservice.executeCommand('bar');\n\t\tassert.strictEqual(callCounter, 1);\n\t\treg.dispose();\n\t});\n\n\ttest('issue #34913: !onReady, unknown command', function () {\n\n\t\tlet callCounter = 0;\n\t\tlet resolveFunc: Function;\n\t\tconst whenInstalledExtensionsRegistered = new Promise<boolean>(_resolve => { resolveFunc = _resolve; });\n\n\t\tconst service = new CommandService(new InstantiationService(), new class extends NullExtensionService {\n\t\t\toverride whenInstalledExtensionsRegistered() {\n\t\t\t\treturn whenInstalledExtensionsRegistered;\n\t\t\t}\n\t\t}, new NullLogService());\n\n\t\tconst r = service.executeCommand('bar');\n\t\tassert.strictEqual(callCounter, 0);\n\n\t\tconst reg = CommandsRegistry.registerCommand('bar', () => callCounter += 1);\n\t\tresolveFunc!(true);\n\n\t\treturn r.then(() => {\n\t\t\treg.dispose();\n\t\t\tassert.strictEqual(callCounter, 1);\n\t\t});\n\t});\n\n\ttest('Stop waiting for * extensions to activate when trigger is satisfied #62457', function () {\n\n\t\tlet callCounter = 0;\n\t\tconst disposable = new DisposableStore();\n\t\tconst events: string[] = [];\n\t\tconst service = new CommandService(new InstantiationService(), new class extends NullExtensionService {\n\n\t\t\toverride activateByEvent(event: string): Promise<void> {\n\t\t\t\tevents.push(event);\n\t\t\t\tif (event === '*') {\n\t\t\t\t\treturn new Promise(() => { }); //forever promise...\n\t\t\t\t}\n\t\t\t\tif (event.indexOf('onCommand:') === 0) {\n\t\t\t\t\treturn new Promise(resolve => {\n\t\t\t\t\t\tsetTimeout(() => {\n\t\t\t\t\t\t\tconst reg = CommandsRegistry.registerCommand(event.substr('onCommand:'.length), () => {\n\t\t\t\t\t\t\t\tcallCounter += 1;\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\tdisposable.add(reg);\n\t\t\t\t\t\t\tresolve();\n\t\t\t\t\t\t}, 0);\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\treturn Promise.resolve();\n\t\t\t}\n\n\t\t}, new NullLogService());\n\n\t\treturn service.executeCommand('farboo').then(() => {\n\t\t\tassert.strictEqual(callCounter, 1);\n\t\t\tassert.deepStrictEqual(events.sort(), ['*', 'onCommand:farboo'].sort());\n\t\t}).finally(() => {\n\t\t\tdisposable.dispose();\n\t\t});\n\t});\n\n\ttest('issue #71471: wait for onCommand activation even if a command is registered', () => {\n\t\tconst expectedOrder: string[] = ['registering command', 'resolving activation event', 'executing command'];\n\t\tconst actualOrder: string[] = [];\n\t\tconst disposables = new DisposableStore();\n\t\tconst service = new CommandService(new InstantiationService(), new class extends NullExtensionService {\n\n\t\t\toverride activateByEvent(event: string): Promise<void> {\n\t\t\t\tif (event === '*') {\n\t\t\t\t\treturn new Promise(() => { }); //forever promise...\n\t\t\t\t}\n\t\t\t\tif (event.indexOf('onCommand:') === 0) {\n\t\t\t\t\treturn new Promise(resolve => {\n\t\t\t\t\t\tsetTimeout(() => {\n\t\t\t\t\t\t\t// Register the command after some time\n\t\t\t\t\t\t\tactualOrder.push('registering command');\n\t\t\t\t\t\t\tconst reg = CommandsRegistry.registerCommand(event.substr('onCommand:'.length), () => {\n\t\t\t\t\t\t\t\tactualOrder.push('executing command');\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\tdisposables.add(reg);\n\n\t\t\t\t\t\t\tsetTimeout(() => {\n\t\t\t\t\t\t\t\t// Resolve the activation event after some more time\n\t\t\t\t\t\t\t\tactualOrder.push('resolving activation event');\n\t\t\t\t\t\t\t\tresolve();\n\t\t\t\t\t\t\t}, 10);\n\t\t\t\t\t\t}, 10);\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\treturn Promise.resolve();\n\t\t\t}\n\n\t\t}, new NullLogService());\n\n\t\treturn service.executeCommand('farboo2').then(() => {\n\t\t\tassert.deepStrictEqual(actualOrder, expectedOrder);\n\t\t}).finally(() => {\n\t\t\tdisposables.dispose();\n\t\t});\n\t});\n\n\ttest('issue #142155: execute commands synchronously if possible', async () => {\n\t\tconst actualOrder: string[] = [];\n\n\t\tconst disposables = new DisposableStore();\n\t\tdisposables.add(CommandsRegistry.registerCommand(`bizBaz`, () => {\n\t\t\tactualOrder.push('executing command');\n\t\t}));\n\t\tconst extensionService = new class extends NullExtensionService {\n\t\t\toverride activationEventIsDone(_activationEvent: string): boolean {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t};\n\t\tconst service = new CommandService(new InstantiationService(), extensionService, new NullLogService());\n\n\t\tawait extensionService.whenInstalledExtensionsRegistered();\n\n\t\ttry {\n\t\t\tactualOrder.push(`before call`);\n\t\t\tconst promise = service.executeCommand('bizBaz');\n\t\t\tactualOrder.push(`after call`);\n\t\t\tawait promise;\n\t\t\tactualOrder.push(`resolved`);\n\t\t\tassert.deepStrictEqual(actualOrder, [\n\t\t\t\t'before call',\n\t\t\t\t'executing command',\n\t\t\t\t'after call',\n\t\t\t\t'resolved'\n\t\t\t]);\n\t\t} finally {\n\t\t\tdisposables.dispose();\n\t\t}\n\t});\n});\n"],
  "mappings": "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",
  "names": []
}
