{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/request/electron-sandbox/requestService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IConfigurationService } from '../../../../platform/configuration/common/configuration.js';\nimport { InstantiationType, registerSingleton } from '../../../../platform/instantiation/common/extensions.js';\nimport { AbstractRequestService, AuthInfo, Credentials, IRequestService } from '../../../../platform/request/common/request.js';\nimport { INativeHostService } from '../../../../platform/native/common/native.js';\nimport { IRequestContext, IRequestOptions } from '../../../../base/parts/request/common/request.js';\nimport { CancellationToken } from '../../../../base/common/cancellation.js';\nimport { request } from '../../../../base/parts/request/browser/request.js';\nimport { ILogService } from '../../../../platform/log/common/log.js';\n\nexport class NativeRequestService extends AbstractRequestService implements IRequestService {\n\n\tdeclare readonly _serviceBrand: undefined;\n\n\tconstructor(\n\t\t@INativeHostService private readonly nativeHostService: INativeHostService,\n\t\t@IConfigurationService private readonly configurationService: IConfigurationService,\n\t\t@ILogService logService: ILogService,\n\t) {\n\t\tsuper(logService);\n\t}\n\n\tasync request(options: IRequestOptions, token: CancellationToken): Promise<IRequestContext> {\n\t\tif (!options.proxyAuthorization) {\n\t\t\toptions.proxyAuthorization = this.configurationService.getValue<string>('http.proxyAuthorization');\n\t\t}\n\t\treturn this.logAndRequest(options, () => request(options, token));\n\t}\n\n\tasync resolveProxy(url: string): Promise<string | undefined> {\n\t\treturn this.nativeHostService.resolveProxy(url);\n\t}\n\n\tasync lookupAuthorization(authInfo: AuthInfo): Promise<Credentials | undefined> {\n\t\treturn this.nativeHostService.lookupAuthorization(authInfo);\n\t}\n\n\tasync lookupKerberosAuthorization(url: string): Promise<string | undefined> {\n\t\treturn this.nativeHostService.lookupKerberosAuthorization(url);\n\t}\n\n\tasync loadCertificates(): Promise<string[]> {\n\t\treturn this.nativeHostService.loadCertificates();\n\t}\n}\n\nregisterSingleton(IRequestService, NativeRequestService, InstantiationType.Delayed);\n"],
  "mappings": ";;;;;;;;;;;;AAKA,SAAS,6BAA6B;AACtC,SAAS,mBAAmB,yBAAyB;AACrD,SAAS,wBAAwB,UAAU,aAAa,uBAAuB;AAC/E,SAAS,0BAA0B;AACnC,SAAS,iBAAiB,uBAAuB;AACjD,SAAS,yBAAyB;AAClC,SAAS,eAAe;AACxB,SAAS,mBAAmB;AAErB,IAAM,uBAAN,cAAmC,uBAAkD;AAAA,EAI3F,YACsC,mBACG,sBAC3B,YACZ;AACD,UAAM,UAAU;AAJqB;AACG;AAAA,EAIzC;AAAA,EAxBD,OAc4F;AAAA;AAAA;AAAA,EAY3F,MAAM,QAAQ,SAA0B,OAAoD;AAC3F,QAAI,CAAC,QAAQ,oBAAoB;AAChC,cAAQ,qBAAqB,KAAK,qBAAqB,SAAiB,yBAAyB;AAAA,IAClG;AACA,WAAO,KAAK,cAAc,SAAS,MAAM,QAAQ,SAAS,KAAK,CAAC;AAAA,EACjE;AAAA,EAEA,MAAM,aAAa,KAA0C;AAC5D,WAAO,KAAK,kBAAkB,aAAa,GAAG;AAAA,EAC/C;AAAA,EAEA,MAAM,oBAAoB,UAAsD;AAC/E,WAAO,KAAK,kBAAkB,oBAAoB,QAAQ;AAAA,EAC3D;AAAA,EAEA,MAAM,4BAA4B,KAA0C;AAC3E,WAAO,KAAK,kBAAkB,4BAA4B,GAAG;AAAA,EAC9D;AAAA,EAEA,MAAM,mBAAsC;AAC3C,WAAO,KAAK,kBAAkB,iBAAiB;AAAA,EAChD;AACD;AAlCa,uBAAN;AAAA,EAKJ;AAAA,EACA;AAAA,EACA;AAAA,GAPU;AAoCb,kBAAkB,iBAAiB,sBAAsB,kBAAkB,OAAO;",
  "names": []
}
