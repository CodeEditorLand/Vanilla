{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/request/electron-sandbox/requestService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport type { CancellationToken } from \"../../../../base/common/cancellation.js\";\nimport { request } from \"../../../../base/parts/request/browser/request.js\";\nimport type {\n\tIRequestContext,\n\tIRequestOptions,\n} from \"../../../../base/parts/request/common/request.js\";\nimport { IConfigurationService } from \"../../../../platform/configuration/common/configuration.js\";\nimport {\n\tInstantiationType,\n\tregisterSingleton,\n} from \"../../../../platform/instantiation/common/extensions.js\";\nimport { ILogService } from \"../../../../platform/log/common/log.js\";\nimport { INativeHostService } from \"../../../../platform/native/common/native.js\";\nimport {\n\tAbstractRequestService,\n\ttype AuthInfo,\n\ttype Credentials,\n\tIRequestService,\n} from \"../../../../platform/request/common/request.js\";\n\nexport class NativeRequestService\n\textends AbstractRequestService\n\timplements IRequestService\n{\n\tdeclare readonly _serviceBrand: undefined;\n\n\tconstructor(\n\t\t@INativeHostService\n\t\tprivate readonly nativeHostService: INativeHostService,\n\t\t@IConfigurationService\n\t\tprivate readonly configurationService: IConfigurationService,\n\t\t@ILogService logService: ILogService,\n\t) {\n\t\tsuper(logService);\n\t}\n\n\tasync request(\n\t\toptions: IRequestOptions,\n\t\ttoken: CancellationToken,\n\t): Promise<IRequestContext> {\n\t\tif (!options.proxyAuthorization) {\n\t\t\toptions.proxyAuthorization =\n\t\t\t\tthis.configurationService.getValue<string>(\n\t\t\t\t\t\"http.proxyAuthorization\",\n\t\t\t\t);\n\t\t}\n\t\treturn this.logAndRequest(options, () => request(options, token));\n\t}\n\n\tasync resolveProxy(url: string): Promise<string | undefined> {\n\t\treturn this.nativeHostService.resolveProxy(url);\n\t}\n\n\tasync lookupAuthorization(\n\t\tauthInfo: AuthInfo,\n\t): Promise<Credentials | undefined> {\n\t\treturn this.nativeHostService.lookupAuthorization(authInfo);\n\t}\n\n\tasync lookupKerberosAuthorization(\n\t\turl: string,\n\t): Promise<string | undefined> {\n\t\treturn this.nativeHostService.lookupKerberosAuthorization(url);\n\t}\n\n\tasync loadCertificates(): Promise<string[]> {\n\t\treturn this.nativeHostService.loadCertificates();\n\t}\n}\n\nregisterSingleton(\n\tIRequestService,\n\tNativeRequestService,\n\tInstantiationType.Delayed,\n);\n"],
  "mappings": ";;;;;;;;;;;;AAMA,SAAS,eAAe;AAKxB,SAAS,6BAA6B;AACtC;AAAA,EACC;AAAA,EACA;AAAA,OACM;AACP,SAAS,mBAAmB;AAC5B,SAAS,0BAA0B;AACnC;AAAA,EACC;AAAA,EAGA;AAAA,OACM;AAEA,IAAM,uBAAN,cACE,uBAET;AAAA,EAGC,YAEkB,mBAEA,sBACJ,YACZ;AACD,UAAM,UAAU;AALC;AAEA;AAAA,EAIlB;AAAA,EAvCD,OA4BA;AAAA;AAAA;AAAA,EAaC,MAAM,QACL,SACA,OAC2B;AAC3B,QAAI,CAAC,QAAQ,oBAAoB;AAChC,cAAQ,qBACP,KAAK,qBAAqB;AAAA,QACzB;AAAA,MACD;AAAA,IACF;AACA,WAAO,KAAK,cAAc,SAAS,MAAM,QAAQ,SAAS,KAAK,CAAC;AAAA,EACjE;AAAA,EAEA,MAAM,aAAa,KAA0C;AAC5D,WAAO,KAAK,kBAAkB,aAAa,GAAG;AAAA,EAC/C;AAAA,EAEA,MAAM,oBACL,UACmC;AACnC,WAAO,KAAK,kBAAkB,oBAAoB,QAAQ;AAAA,EAC3D;AAAA,EAEA,MAAM,4BACL,KAC8B;AAC9B,WAAO,KAAK,kBAAkB,4BAA4B,GAAG;AAAA,EAC9D;AAAA,EAEA,MAAM,mBAAsC;AAC3C,WAAO,KAAK,kBAAkB,iBAAiB;AAAA,EAChD;AACD;AAhDa,uBAAN;AAAA,EAOJ;AAAA,EAEA;AAAA,EAEA;AAAA,GAXU;AAkDb;AAAA,EACC;AAAA,EACA;AAAA,EACA,kBAAkB;AACnB;",
  "names": []
}
