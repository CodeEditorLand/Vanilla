{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/request/browser/requestService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IRequestOptions, IRequestContext } from '../../../../base/parts/request/common/request.js';\nimport { CancellationToken } from '../../../../base/common/cancellation.js';\nimport { IConfigurationService } from '../../../../platform/configuration/common/configuration.js';\nimport { RequestChannelClient } from '../../../../platform/request/common/requestIpc.js';\nimport { IRemoteAgentService, IRemoteAgentConnection } from '../../remote/common/remoteAgentService.js';\nimport { ServicesAccessor } from '../../../../editor/browser/editorExtensions.js';\nimport { CommandsRegistry } from '../../../../platform/commands/common/commands.js';\nimport { AbstractRequestService, AuthInfo, Credentials, IRequestService } from '../../../../platform/request/common/request.js';\nimport { request } from '../../../../base/parts/request/browser/request.js';\nimport { ILogService } from '../../../../platform/log/common/log.js';\n\nexport class BrowserRequestService extends AbstractRequestService implements IRequestService {\n\n\tdeclare readonly _serviceBrand: undefined;\n\n\tconstructor(\n\t\t@IRemoteAgentService private readonly remoteAgentService: IRemoteAgentService,\n\t\t@IConfigurationService private readonly configurationService: IConfigurationService,\n\t\t@ILogService logService: ILogService,\n\t) {\n\t\tsuper(logService);\n\t}\n\n\tasync request(options: IRequestOptions, token: CancellationToken): Promise<IRequestContext> {\n\t\ttry {\n\t\t\tif (!options.proxyAuthorization) {\n\t\t\t\toptions.proxyAuthorization = this.configurationService.getValue<string>('http.proxyAuthorization');\n\t\t\t}\n\t\t\tconst context = await this.logAndRequest(options, () => request(options, token));\n\n\t\t\tconst connection = this.remoteAgentService.getConnection();\n\t\t\tif (connection && context.res.statusCode === 405) {\n\t\t\t\treturn this._makeRemoteRequest(connection, options, token);\n\t\t\t}\n\t\t\treturn context;\n\t\t} catch (error) {\n\t\t\tconst connection = this.remoteAgentService.getConnection();\n\t\t\tif (connection) {\n\t\t\t\treturn this._makeRemoteRequest(connection, options, token);\n\t\t\t}\n\t\t\tthrow error;\n\t\t}\n\t}\n\n\tasync resolveProxy(url: string): Promise<string | undefined> {\n\t\treturn undefined; // not implemented in the web\n\t}\n\n\tasync lookupAuthorization(authInfo: AuthInfo): Promise<Credentials | undefined> {\n\t\treturn undefined; // not implemented in the web\n\t}\n\n\tasync lookupKerberosAuthorization(url: string): Promise<string | undefined> {\n\t\treturn undefined; // not implemented in the web\n\t}\n\n\tasync loadCertificates(): Promise<string[]> {\n\t\treturn []; // not implemented in the web\n\t}\n\n\tprivate _makeRemoteRequest(connection: IRemoteAgentConnection, options: IRequestOptions, token: CancellationToken): Promise<IRequestContext> {\n\t\treturn connection.withChannel('request', channel => new RequestChannelClient(channel).request(options, token));\n\t}\n}\n\n// --- Internal commands to help authentication for extensions\n\nCommandsRegistry.registerCommand('_workbench.fetchJSON', async function (accessor: ServicesAccessor, url: string, method: string) {\n\tconst result = await fetch(url, { method, headers: { Accept: 'application/json' } });\n\n\tif (result.ok) {\n\t\treturn result.json();\n\t} else {\n\t\tthrow new Error(result.statusText);\n\t}\n});\n"],
  "mappings": ";;;;;;;;;;;;AAKA,SAAS,iBAAiB,uBAAuB;AACjD,SAAS,yBAAyB;AAClC,SAAS,6BAA6B;AACtC,SAAS,4BAA4B;AACrC,SAAS,qBAAqB,8BAA8B;AAC5D,SAAS,wBAAwB;AACjC,SAAS,wBAAwB;AACjC,SAAS,wBAAwB,UAAU,aAAa,uBAAuB;AAC/E,SAAS,eAAe;AACxB,SAAS,mBAAmB;AAErB,IAAM,wBAAN,cAAoC,uBAAkD;AAAA,EAI5F,YACuC,oBACE,sBAC3B,YACZ;AACD,UAAM,UAAU;AAJsB;AACE;AAAA,EAIzC;AAAA,EA1BD,OAgB6F;AAAA;AAAA;AAAA,EAY5F,MAAM,QAAQ,SAA0B,OAAoD;AAC3F,QAAI;AACH,UAAI,CAAC,QAAQ,oBAAoB;AAChC,gBAAQ,qBAAqB,KAAK,qBAAqB,SAAiB,yBAAyB;AAAA,MAClG;AACA,YAAM,UAAU,MAAM,KAAK,cAAc,SAAS,MAAM,QAAQ,SAAS,KAAK,CAAC;AAE/E,YAAM,aAAa,KAAK,mBAAmB,cAAc;AACzD,UAAI,cAAc,QAAQ,IAAI,eAAe,KAAK;AACjD,eAAO,KAAK,mBAAmB,YAAY,SAAS,KAAK;AAAA,MAC1D;AACA,aAAO;AAAA,IACR,SAAS,OAAO;AACf,YAAM,aAAa,KAAK,mBAAmB,cAAc;AACzD,UAAI,YAAY;AACf,eAAO,KAAK,mBAAmB,YAAY,SAAS,KAAK;AAAA,MAC1D;AACA,YAAM;AAAA,IACP;AAAA,EACD;AAAA,EAEA,MAAM,aAAa,KAA0C;AAC5D,WAAO;AAAA,EACR;AAAA,EAEA,MAAM,oBAAoB,UAAsD;AAC/E,WAAO;AAAA,EACR;AAAA,EAEA,MAAM,4BAA4B,KAA0C;AAC3E,WAAO;AAAA,EACR;AAAA,EAEA,MAAM,mBAAsC;AAC3C,WAAO,CAAC;AAAA,EACT;AAAA,EAEQ,mBAAmB,YAAoC,SAA0B,OAAoD;AAC5I,WAAO,WAAW,YAAY,WAAW,aAAW,IAAI,qBAAqB,OAAO,EAAE,QAAQ,SAAS,KAAK,CAAC;AAAA,EAC9G;AACD;AApDa,wBAAN;AAAA,EAKJ;AAAA,EACA;AAAA,EACA;AAAA,GAPU;AAwDb,iBAAiB,gBAAgB,wBAAwB,eAAgB,UAA4B,KAAa,QAAgB;AACjI,QAAM,SAAS,MAAM,MAAM,KAAK,EAAE,QAAQ,SAAS,EAAE,QAAQ,mBAAmB,EAAE,CAAC;AAEnF,MAAI,OAAO,IAAI;AACd,WAAO,OAAO,KAAK;AAAA,EACpB,OAAO;AACN,UAAM,IAAI,MAAM,OAAO,UAAU;AAAA,EAClC;AACD,CAAC;",
  "names": []
}
