var L=Object.defineProperty;var R=Object.getOwnPropertyDescriptor;var I=(t,i,a,r)=>{for(var s=r>1?void 0:r?R(i,a):i,p=t.length-1,f;p>=0;p--)(f=t[p])&&(s=(r?f(i,a,s):f(s))||s);return r&&s&&L(i,a,s),s},c=(t,i)=>(a,r)=>i(a,r,t);import{index as P}from"../../../../base/common/arrays.js";import{MarkdownString as w}from"../../../../base/common/htmlContent.js";import{Disposable as C}from"../../../../base/common/lifecycle.js";import{joinPath as x}from"../../../../base/common/resources.js";import{isString as E}from"../../../../base/common/types.js";import{ILanguageService as D}from"../../../../editor/common/languages/language.js";import{LanguageService as F}from"../../../../editor/common/services/languageService.js";import{clearConfiguredLanguageAssociations as _,registerConfiguredLanguageAssociation as j}from"../../../../editor/common/services/languagesAssociations.js";import{localize as n}from"../../../../nls.js";import{IConfigurationService as M}from"../../../../platform/configuration/common/configuration.js";import{IEnvironmentService as A}from"../../../../platform/environment/common/environment.js";import{FILES_ASSOCIATIONS_CONFIG as T}from"../../../../platform/files/common/files.js";import{SyncDescriptor as $}from"../../../../platform/instantiation/common/descriptors.js";import{InstantiationType as G,registerSingleton as k}from"../../../../platform/instantiation/common/extensions.js";import{ILogService as O}from"../../../../platform/log/common/log.js";import{Registry as U}from"../../../../platform/registry/common/platform.js";import{Extensions as N}from"../../extensionManagement/common/extensionFeatures.js";import{IExtensionService as B}from"../../extensions/common/extensions.js";import{ExtensionsRegistry as V}from"../../extensions/common/extensionsRegistry.js";const h=V.registerExtensionPoint({extensionPoint:"languages",jsonSchema:{description:n("vscode.extension.contributes.languages","Contributes language declarations."),type:"array",items:{type:"object",defaultSnippets:[{body:{id:"${1:languageId}",aliases:["${2:label}"],extensions:["${3:extension}"],configuration:"./language-configuration.json"}}],properties:{id:{description:n("vscode.extension.contributes.languages.id","ID of the language."),type:"string"},aliases:{description:n("vscode.extension.contributes.languages.aliases","Name aliases for the language."),type:"array",items:{type:"string"}},extensions:{description:n("vscode.extension.contributes.languages.extensions","File extensions associated to the language."),default:[".foo"],type:"array",items:{type:"string"}},filenames:{description:n("vscode.extension.contributes.languages.filenames","File names associated to the language."),type:"array",items:{type:"string"}},filenamePatterns:{description:n("vscode.extension.contributes.languages.filenamePatterns","File name glob patterns associated to the language."),type:"array",items:{type:"string"}},mimetypes:{description:n("vscode.extension.contributes.languages.mimetypes","Mime types associated to the language."),type:"array",items:{type:"string"}},firstLine:{description:n("vscode.extension.contributes.languages.firstLine","A regular expression matching the first line of a file of the language."),type:"string"},configuration:{description:n("vscode.extension.contributes.languages.configuration","A relative path to a file containing configuration options for the language."),type:"string",default:"./language-configuration.json"},icon:{type:"object",description:n("vscode.extension.contributes.languages.icon","A icon to use as file icon, if no icon theme provides one for the language."),properties:{light:{description:n("vscode.extension.contributes.languages.icon.light","Icon path when a light theme is used"),type:"string"},dark:{description:n("vscode.extension.contributes.languages.icon.dark","Icon path when a dark theme is used"),type:"string"}}}}}},activationEventsGenerator:(t,i)=>{for(const a of t)a.id&&a.configuration&&i.push(`onLanguage:${a.id}`)}});class q extends C{type="table";shouldRender(i){return!!i.contributes?.languages}render(i){const a=i.contributes,r=a?.languages||[],s=[];for(const e of r)v(e)&&s.push({id:e.id,name:(e.aliases||[])[0]||e.id,extensions:e.extensions||[],hasGrammar:!1,hasSnippets:!1});const p=P(s,e=>e.id);if((a?.grammars||[]).forEach(e=>{if(!E(e.language))return;let o=p[e.language];o?o.hasGrammar=!0:(o={id:e.language,name:e.language,extensions:[],hasGrammar:!0,hasSnippets:!1},p[o.id]=o,s.push(o))}),(a?.snippets||[]).forEach(e=>{if(!E(e.language))return;let o=p[e.language];o?o.hasSnippets=!0:(o={id:e.language,name:e.language,extensions:[],hasGrammar:!1,hasSnippets:!0},p[o.id]=o,s.push(o))}),!s.length)return{data:{headers:[],rows:[]},dispose:()=>{}};const u=[n("language id","ID"),n("language name","Name"),n("file extensions","File Extensions"),n("grammar","Grammar"),n("snippets","Snippets")],y=s.sort((e,o)=>e.id.localeCompare(o.id)).map(e=>[e.id,e.name,new w().appendMarkdown(`${e.extensions.map(o=>`\`${o}\``).join("&nbsp;")}`),e.hasGrammar?"\u2714\uFE0E":"\u2014",e.hasSnippets?"\u2714\uFE0E":"\u2014"]);return{data:{headers:u,rows:y},dispose:()=>{}}}}U.as(N.ExtensionFeaturesRegistry).registerExtensionFeature({id:"languages",label:n("languages","Programming Languages"),access:{canToggle:!1},renderer:new $(q)});let l=class extends F{constructor(a,r,s,p){super(s.verbose||s.isExtensionDevelopment||!s.isBuilt);this.logService=p;this._configurationService=r,this._extensionService=a,h.setHandler(f=>{const d=[];for(let u=0,y=f.length;u<y;u++){const e=f[u];if(!Array.isArray(e.value)){e.collector.error(n("invalid","Invalid `contributes.{0}`. Expected an array.",h.name));continue}for(let o=0,S=e.value.length;o<S;o++){const g=e.value[o];if(v(g,e.collector)){let b;g.configuration&&(b=x(e.description.extensionLocation,g.configuration)),d.push({id:g.id,extensions:g.extensions,filenames:g.filenames,filenamePatterns:g.filenamePatterns,firstLine:g.firstLine,aliases:g.aliases,mimetypes:g.mimetypes,configuration:b,icon:g.icon&&{light:x(e.description.extensionLocation,g.icon.light),dark:x(e.description.extensionLocation,g.icon.dark)}})}}}this._registry.setDynamicLanguages(d)}),this.updateMime(),this._register(this._configurationService.onDidChangeConfiguration(f=>{f.affectsConfiguration(T)&&this.updateMime()})),this._extensionService.whenInstalledExtensionsRegistered().then(()=>{this.updateMime()}),this._register(this.onDidRequestRichLanguageFeatures(f=>{this._extensionService.activateByEvent(`onLanguage:${f}`),this._extensionService.activateByEvent("onLanguage")}))}_configurationService;_extensionService;updateMime(){const a=this._configurationService.getValue();_(),a.files?.associations&&Object.keys(a.files.associations).forEach(r=>{const s=a.files.associations[r];if(typeof s!="string"){this.logService.warn(`Ignoring configured 'files.associations' for '${r}' because its type is not a string but '${typeof s}'`);return}const p=this.getMimeType(s)||`text/x-${s}`;j({id:s,mime:p,filepattern:r})}),this._onDidChange.fire()}};l=I([c(0,B),c(1,M),c(2,A),c(3,O)],l);function m(t){return typeof t>"u"?!0:Array.isArray(t)?t.every(i=>typeof i=="string"):!1}function v(t,i){return t?typeof t.id!="string"?(i?.error(n("require.id","property `{0}` is mandatory and must be of type `string`","id")),!1):m(t.extensions)?m(t.filenames)?typeof t.firstLine<"u"&&typeof t.firstLine!="string"?(i?.error(n("opt.firstLine","property `{0}` can be omitted and must be of type `string`","firstLine")),!1):typeof t.configuration<"u"&&typeof t.configuration!="string"?(i?.error(n("opt.configuration","property `{0}` can be omitted and must be of type `string`","configuration")),!1):m(t.aliases)?m(t.mimetypes)?typeof t.icon<"u"&&(typeof t.icon!="object"||typeof t.icon.light!="string"||typeof t.icon.dark!="string")?(i?.error(n("opt.icon","property `{0}` can be omitted and must be of type `object` with properties `{1}` and `{2}` of type `string`","icon","light","dark")),!1):!0:(i?.error(n("opt.mimetypes","property `{0}` can be omitted and must be of type `string[]`","mimetypes")),!1):(i?.error(n("opt.aliases","property `{0}` can be omitted and must be of type `string[]`","aliases")),!1):(i?.error(n("opt.filenames","property `{0}` can be omitted and must be of type `string[]`","filenames")),!1):(i?.error(n("opt.extensions","property `{0}` can be omitted and must be of type `string[]`","extensions")),!1):(i?.error(n("invalid.empty","Empty value for `contributes.{0}`",h.name)),!1)}k(D,l,G.Eager);export{l as WorkbenchLanguageService,h as languagesExtPoint};
