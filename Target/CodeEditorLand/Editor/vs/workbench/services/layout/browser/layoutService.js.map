{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/layout/browser/layoutService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { refineServiceDecorator } from '../../../../platform/instantiation/common/instantiation.js';\nimport { Event } from '../../../../base/common/event.js';\nimport { ILayoutService } from '../../../../platform/layout/browser/layoutService.js';\nimport { Part } from '../../../browser/part.js';\nimport { IDimension } from '../../../../base/browser/dom.js';\nimport { Direction } from '../../../../base/browser/ui/grid/grid.js';\nimport { isMacintosh, isNative, isWeb } from '../../../../base/common/platform.js';\nimport { isAuxiliaryWindow } from '../../../../base/browser/window.js';\nimport { CustomTitleBarVisibility, TitleBarSetting, getMenuBarVisibility, hasCustomTitlebar, hasNativeTitlebar } from '../../../../platform/window/common/window.js';\nimport { isFullscreen, isWCOEnabled } from '../../../../base/browser/browser.js';\nimport { IConfigurationService } from '../../../../platform/configuration/common/configuration.js';\nimport { IDisposable } from '../../../../base/common/lifecycle.js';\n\nexport const IWorkbenchLayoutService = refineServiceDecorator<ILayoutService, IWorkbenchLayoutService>(ILayoutService);\n\nexport const enum Parts {\n\tTITLEBAR_PART = 'workbench.parts.titlebar',\n\tBANNER_PART = 'workbench.parts.banner',\n\tACTIVITYBAR_PART = 'workbench.parts.activitybar',\n\tSIDEBAR_PART = 'workbench.parts.sidebar',\n\tPANEL_PART = 'workbench.parts.panel',\n\tAUXILIARYBAR_PART = 'workbench.parts.auxiliarybar',\n\tEDITOR_PART = 'workbench.parts.editor',\n\tSTATUSBAR_PART = 'workbench.parts.statusbar'\n}\n\nexport const enum ZenModeSettings {\n\tSHOW_TABS = 'zenMode.showTabs',\n\tHIDE_LINENUMBERS = 'zenMode.hideLineNumbers',\n\tHIDE_STATUSBAR = 'zenMode.hideStatusBar',\n\tHIDE_ACTIVITYBAR = 'zenMode.hideActivityBar',\n\tCENTER_LAYOUT = 'zenMode.centerLayout',\n\tFULLSCREEN = 'zenMode.fullScreen',\n\tRESTORE = 'zenMode.restore',\n\tSILENT_NOTIFICATIONS = 'zenMode.silentNotifications',\n}\n\nexport const enum LayoutSettings {\n\tACTIVITY_BAR_LOCATION = 'workbench.activityBar.location',\n\tEDITOR_TABS_MODE = 'workbench.editor.showTabs',\n\tEDITOR_ACTIONS_LOCATION = 'workbench.editor.editorActionsLocation',\n\tCOMMAND_CENTER = 'window.commandCenter',\n\tLAYOUT_ACTIONS = 'workbench.layoutControl.enabled',\n}\n\nexport const enum ActivityBarPosition {\n\tDEFAULT = 'default',\n\tTOP = 'top',\n\tBOTTOM = 'bottom',\n\tHIDDEN = 'hidden'\n}\n\nexport const enum EditorTabsMode {\n\tMULTIPLE = 'multiple',\n\tSINGLE = 'single',\n\tNONE = 'none'\n}\n\nexport const enum EditorActionsLocation {\n\tDEFAULT = 'default',\n\tTITLEBAR = 'titleBar',\n\tHIDDEN = 'hidden'\n}\n\nexport const enum Position {\n\tLEFT,\n\tRIGHT,\n\tBOTTOM,\n\tTOP\n}\n\nexport function isHorizontal(position: Position): boolean {\n\treturn position === Position.BOTTOM || position === Position.TOP;\n}\n\nexport const enum PanelOpensMaximizedOptions {\n\tALWAYS,\n\tNEVER,\n\tREMEMBER_LAST\n}\n\nexport type PanelAlignment = 'left' | 'center' | 'right' | 'justify';\n\nexport function positionToString(position: Position): string {\n\tswitch (position) {\n\t\tcase Position.LEFT: return 'left';\n\t\tcase Position.RIGHT: return 'right';\n\t\tcase Position.BOTTOM: return 'bottom';\n\t\tcase Position.TOP: return 'top';\n\t\tdefault: return 'bottom';\n\t}\n}\n\nconst positionsByString: { [key: string]: Position } = {\n\t[positionToString(Position.LEFT)]: Position.LEFT,\n\t[positionToString(Position.RIGHT)]: Position.RIGHT,\n\t[positionToString(Position.BOTTOM)]: Position.BOTTOM,\n\t[positionToString(Position.TOP)]: Position.TOP\n};\n\nexport function positionFromString(str: string): Position {\n\treturn positionsByString[str];\n}\n\nfunction panelOpensMaximizedSettingToString(setting: PanelOpensMaximizedOptions): string {\n\tswitch (setting) {\n\t\tcase PanelOpensMaximizedOptions.ALWAYS: return 'always';\n\t\tcase PanelOpensMaximizedOptions.NEVER: return 'never';\n\t\tcase PanelOpensMaximizedOptions.REMEMBER_LAST: return 'preserve';\n\t\tdefault: return 'preserve';\n\t}\n}\n\nconst panelOpensMaximizedByString: { [key: string]: PanelOpensMaximizedOptions } = {\n\t[panelOpensMaximizedSettingToString(PanelOpensMaximizedOptions.ALWAYS)]: PanelOpensMaximizedOptions.ALWAYS,\n\t[panelOpensMaximizedSettingToString(PanelOpensMaximizedOptions.NEVER)]: PanelOpensMaximizedOptions.NEVER,\n\t[panelOpensMaximizedSettingToString(PanelOpensMaximizedOptions.REMEMBER_LAST)]: PanelOpensMaximizedOptions.REMEMBER_LAST\n};\n\nexport function panelOpensMaximizedFromString(str: string): PanelOpensMaximizedOptions {\n\treturn panelOpensMaximizedByString[str];\n}\n\nexport type MULTI_WINDOW_PARTS = Parts.EDITOR_PART | Parts.STATUSBAR_PART | Parts.TITLEBAR_PART;\nexport type SINGLE_WINDOW_PARTS = Exclude<Parts, MULTI_WINDOW_PARTS>;\n\nexport interface IWorkbenchLayoutService extends ILayoutService {\n\n\treadonly _serviceBrand: undefined;\n\n\t/**\n\t * Emits when the zen mode is enabled or disabled.\n\t */\n\treadonly onDidChangeZenMode: Event<boolean>;\n\n\t/**\n\t * Emits when the target window is maximized or unmaximized.\n\t */\n\treadonly onDidChangeWindowMaximized: Event<{ readonly windowId: number; readonly maximized: boolean }>;\n\n\t/**\n\t * Emits when main editor centered layout is enabled or disabled.\n\t */\n\treadonly onDidChangeMainEditorCenteredLayout: Event<boolean>;\n\n\t/*\n\t * Emit when panel position changes.\n\t */\n\treadonly onDidChangePanelPosition: Event<string>;\n\n\t/**\n\t * Emit when panel alignment changes.\n\t */\n\treadonly onDidChangePanelAlignment: Event<PanelAlignment>;\n\n\t/**\n\t * Emit when part visibility changes\n\t */\n\treadonly onDidChangePartVisibility: Event<void>;\n\n\t/**\n\t * Emit when notifications (toasts or center) visibility changes.\n\t */\n\treadonly onDidChangeNotificationsVisibility: Event<boolean>;\n\n\t/**\n\t * True if a default layout with default editors was applied at startup\n\t */\n\treadonly openedDefaultEditors: boolean;\n\n\t/**\n\t * Run a layout of the workbench.\n\t */\n\tlayout(): void;\n\n\t/**\n\t * Asks the part service if all parts have been fully restored. For editor part\n\t * this means that the contents of visible editors have loaded.\n\t */\n\tisRestored(): boolean;\n\n\t/**\n\t * A promise for to await the `isRestored()` condition to be `true`.\n\t */\n\treadonly whenRestored: Promise<void>;\n\n\t/**\n\t * Returns whether the given part has the keyboard focus or not.\n\t */\n\thasFocus(part: Parts): boolean;\n\n\t/**\n\t * Focuses the part in the target window. If the part is not visible this is a noop.\n\t */\n\tfocusPart(part: SINGLE_WINDOW_PARTS): void;\n\tfocusPart(part: MULTI_WINDOW_PARTS, targetWindow: Window): void;\n\tfocusPart(part: Parts, targetWindow: Window): void;\n\n\t/**\n\t * Returns the target window container or parts HTML element within, if there is one.\n\t */\n\tgetContainer(targetWindow: Window): HTMLElement;\n\tgetContainer(targetWindow: Window, part: Parts): HTMLElement | undefined;\n\n\t/**\n\t * Returns if the part is visible in the target window.\n\t */\n\tisVisible(part: SINGLE_WINDOW_PARTS): boolean;\n\tisVisible(part: MULTI_WINDOW_PARTS, targetWindow: Window): boolean;\n\tisVisible(part: Parts, targetWindow: Window): boolean;\n\n\t/**\n\t * Set part hidden or not in the target window.\n\t */\n\tsetPartHidden(hidden: boolean, part: Exclude<SINGLE_WINDOW_PARTS, Parts.STATUSBAR_PART | Parts.TITLEBAR_PART>): void;\n\tsetPartHidden(hidden: boolean, part: Exclude<MULTI_WINDOW_PARTS, Parts.STATUSBAR_PART | Parts.TITLEBAR_PART>, targetWindow: Window): void;\n\tsetPartHidden(hidden: boolean, part: Exclude<Parts, Parts.STATUSBAR_PART | Parts.TITLEBAR_PART>, targetWindow: Window): void;\n\n\t/**\n\t * Maximizes the panel height if the panel is not already maximized.\n\t * Shrinks the panel to the default starting size if the panel is maximized.\n\t */\n\ttoggleMaximizedPanel(): void;\n\n\t/**\n\t * Returns true if the main window has a border.\n\t */\n\thasMainWindowBorder(): boolean;\n\n\t/**\n\t * Returns the main window border radius if any.\n\t */\n\tgetMainWindowBorderRadius(): string | undefined;\n\n\t/**\n\t * Returns true if the panel is maximized.\n\t */\n\tisPanelMaximized(): boolean;\n\n\t/**\n\t * Gets the current side bar position. Note that the sidebar can be hidden too.\n\t */\n\tgetSideBarPosition(): Position;\n\n\t/**\n\t * Toggles the menu bar visibility.\n\t */\n\ttoggleMenuBar(): void;\n\n\t/*\n\t * Gets the current panel position. Note that the panel can be hidden too.\n\t */\n\tgetPanelPosition(): Position;\n\n\t/**\n\t * Sets the panel position.\n\t */\n\tsetPanelPosition(position: Position): void;\n\n\t/**\n\t * Gets the panel alignement.\n\t */\n\tgetPanelAlignment(): PanelAlignment;\n\n\t/**\n\t * Sets the panel alignment.\n\t */\n\tsetPanelAlignment(alignment: PanelAlignment): void;\n\n\t/**\n\t * Gets the maximum possible size for editor in the given container.\n\t */\n\tgetMaximumEditorDimensions(container: HTMLElement): IDimension;\n\n\t/**\n\t * Toggles the workbench in and out of zen mode - parts get hidden and window goes fullscreen.\n\t */\n\ttoggleZenMode(): void;\n\n\t/**\n\t * Returns whether the centered editor layout is active on the main editor part.\n\t */\n\tisMainEditorLayoutCentered(): boolean;\n\n\t/**\n\t * Sets the main editor part in and out of centered layout.\n\t */\n\tcenterMainEditorLayout(active: boolean): void;\n\n\t/**\n\t * Resize the provided part in the main window.\n\t */\n\tresizePart(part: Parts, sizeChangeWidth: number, sizeChangeHeight: number): void;\n\n\t/**\n\t * Register a part to participate in the layout.\n\t */\n\tregisterPart(part: Part): IDisposable;\n\n\t/**\n\t * Returns whether the target window is maximized.\n\t */\n\tisWindowMaximized(targetWindow: Window): boolean;\n\n\t/**\n\t * Updates the maximized state of the target window.\n\t */\n\tupdateWindowMaximizedState(targetWindow: Window, maximized: boolean): void;\n\n\t/**\n\t * Returns the next visible view part in a given direction in the main window.\n\t */\n\tgetVisibleNeighborPart(part: Parts, direction: Direction): Parts | undefined;\n}\n\nexport function shouldShowCustomTitleBar(configurationService: IConfigurationService, window: Window, menuBarToggled?: boolean, zenModeActive?: boolean): boolean {\n\n\tif (!hasCustomTitlebar(configurationService)) {\n\t\treturn false;\n\t}\n\n\tif (zenModeActive) {\n\t\treturn !configurationService.getValue<boolean>(ZenModeSettings.FULLSCREEN);\n\t}\n\n\tconst inFullscreen = isFullscreen(window);\n\tconst nativeTitleBarEnabled = hasNativeTitlebar(configurationService);\n\n\tif (!isWeb) {\n\t\tconst showCustomTitleBar = configurationService.getValue<CustomTitleBarVisibility>(TitleBarSetting.CUSTOM_TITLE_BAR_VISIBILITY);\n\t\tif (showCustomTitleBar === CustomTitleBarVisibility.NEVER && nativeTitleBarEnabled || showCustomTitleBar === CustomTitleBarVisibility.WINDOWED && inFullscreen) {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\tif (!isTitleBarEmpty(configurationService)) {\n\t\treturn true;\n\t}\n\n\t// Hide custom title bar when native title bar enabled and custom title bar is empty\n\tif (nativeTitleBarEnabled) {\n\t\treturn false;\n\t}\n\n\t// macOS desktop does not need a title bar when full screen\n\tif (isMacintosh && isNative) {\n\t\treturn !inFullscreen;\n\t}\n\n\t// non-fullscreen native must show the title bar\n\tif (isNative && !inFullscreen) {\n\t\treturn true;\n\t}\n\n\t// if WCO is visible, we have to show the title bar\n\tif (isWCOEnabled() && !inFullscreen) {\n\t\treturn true;\n\t}\n\n\t// remaining behavior is based on menubar visibility\n\tconst menuBarVisibility = !isAuxiliaryWindow(window) ? getMenuBarVisibility(configurationService) : 'hidden';\n\tswitch (menuBarVisibility) {\n\t\tcase 'classic':\n\t\t\treturn !inFullscreen || !!menuBarToggled;\n\t\tcase 'compact':\n\t\tcase 'hidden':\n\t\t\treturn false;\n\t\tcase 'toggle':\n\t\t\treturn !!menuBarToggled;\n\t\tcase 'visible':\n\t\t\treturn true;\n\t\tdefault:\n\t\t\treturn isWeb ? false : !inFullscreen || !!menuBarToggled;\n\t}\n}\n\nfunction isTitleBarEmpty(configurationService: IConfigurationService): boolean {\n\t// with the command center enabled, we should always show\n\tif (configurationService.getValue<boolean>(LayoutSettings.COMMAND_CENTER)) {\n\t\treturn false;\n\t}\n\n\t// with the activity bar on top, we should always show\n\tconst activityBarPosition = configurationService.getValue<ActivityBarPosition>(LayoutSettings.ACTIVITY_BAR_LOCATION);\n\tif (activityBarPosition === ActivityBarPosition.TOP || activityBarPosition === ActivityBarPosition.BOTTOM) {\n\t\treturn false;\n\t}\n\n\t// with the editor actions on top, we should always show\n\tconst editorActionsLocation = configurationService.getValue<EditorActionsLocation>(LayoutSettings.EDITOR_ACTIONS_LOCATION);\n\tconst editorTabsMode = configurationService.getValue<EditorTabsMode>(LayoutSettings.EDITOR_TABS_MODE);\n\tif (editorActionsLocation === EditorActionsLocation.TITLEBAR || editorActionsLocation === EditorActionsLocation.DEFAULT && editorTabsMode === EditorTabsMode.NONE) {\n\t\treturn false;\n\t}\n\n\t// with the layout actions on top, we should always show\n\tif (configurationService.getValue<boolean>(LayoutSettings.LAYOUT_ACTIONS)) {\n\t\treturn false;\n\t}\n\n\treturn true;\n}\n"],
  "mappings": "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",
  "names": ["Parts", "ZenModeSettings", "LayoutSettings", "ActivityBarPosition", "EditorTabsMode", "EditorActionsLocation", "Position", "PanelOpensMaximizedOptions"]
}
