{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/configurationResolver/test/electron-sandbox/configurationResolverService.test.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport assert from 'assert';\nimport { stub } from 'sinon';\nimport { Emitter, Event } from '../../../../../base/common/event.js';\nimport { Disposable, IDisposable } from '../../../../../base/common/lifecycle.js';\nimport { Schemas } from '../../../../../base/common/network.js';\nimport { IPath, normalize } from '../../../../../base/common/path.js';\nimport * as platform from '../../../../../base/common/platform.js';\nimport { isObject } from '../../../../../base/common/types.js';\nimport { URI } from '../../../../../base/common/uri.js';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from '../../../../../base/test/common/utils.js';\nimport { Selection } from '../../../../../editor/common/core/selection.js';\nimport { EditorType } from '../../../../../editor/common/editorCommon.js';\nimport { ICommandService } from '../../../../../platform/commands/common/commands.js';\nimport { IConfigurationService } from '../../../../../platform/configuration/common/configuration.js';\nimport { TestConfigurationService } from '../../../../../platform/configuration/test/common/testConfigurationService.js';\nimport { IExtensionDescription } from '../../../../../platform/extensions/common/extensions.js';\nimport { IFormatterChangeEvent, ILabelService, ResourceLabelFormatter, Verbosity } from '../../../../../platform/label/common/label.js';\nimport { IWorkspace, IWorkspaceFolder, IWorkspaceIdentifier, Workspace } from '../../../../../platform/workspace/common/workspace.js';\nimport { testWorkspace } from '../../../../../platform/workspace/test/common/testWorkspace.js';\nimport { BaseConfigurationResolverService } from '../../browser/baseConfigurationResolverService.js';\nimport { IConfigurationResolverService } from '../../common/configurationResolver.js';\nimport { IExtensionService } from '../../../extensions/common/extensions.js';\nimport { IPathService } from '../../../path/common/pathService.js';\nimport { TestEditorService, TestQuickInputService } from '../../../../test/browser/workbenchTestServices.js';\nimport { TestContextService, TestExtensionService, TestStorageService } from '../../../../test/common/workbenchTestServices.js';\n\nconst mockLineNumber = 10;\nclass TestEditorServiceWithActiveEditor extends TestEditorService {\n\toverride get activeTextEditorControl(): any {\n\t\treturn {\n\t\t\tgetEditorType() {\n\t\t\t\treturn EditorType.ICodeEditor;\n\t\t\t},\n\t\t\tgetSelection() {\n\t\t\t\treturn new Selection(mockLineNumber, 1, mockLineNumber, 10);\n\t\t\t}\n\t\t};\n\t}\n\toverride get activeEditor(): any {\n\t\treturn {\n\t\t\tget resource(): any {\n\t\t\t\treturn URI.parse('file:///VSCode/workspaceLocation/file');\n\t\t\t}\n\t\t};\n\t}\n}\n\nclass TestConfigurationResolverService extends BaseConfigurationResolverService {\n\n}\n\nconst nullContext = {\n\tgetAppRoot: () => undefined,\n\tgetExecPath: () => undefined\n};\n\nsuite('Configuration Resolver Service', () => {\n\tlet configurationResolverService: IConfigurationResolverService | null;\n\tconst envVariables: { [key: string]: string } = { key1: 'Value for key1', key2: 'Value for key2' };\n\t// let environmentService: MockWorkbenchEnvironmentService;\n\tlet mockCommandService: MockCommandService;\n\tlet editorService: TestEditorServiceWithActiveEditor;\n\tlet containingWorkspace: Workspace;\n\tlet workspace: IWorkspaceFolder;\n\tlet quickInputService: TestQuickInputService;\n\tlet labelService: MockLabelService;\n\tlet pathService: MockPathService;\n\tlet extensionService: IExtensionService;\n\n\tconst disposables = ensureNoDisposablesAreLeakedInTestSuite();\n\n\tsetup(() => {\n\t\tmockCommandService = new MockCommandService();\n\t\teditorService = disposables.add(new TestEditorServiceWithActiveEditor());\n\t\tquickInputService = new TestQuickInputService();\n\t\t// environmentService = new MockWorkbenchEnvironmentService(envVariables);\n\t\tlabelService = new MockLabelService();\n\t\tpathService = new MockPathService();\n\t\textensionService = new TestExtensionService();\n\t\tcontainingWorkspace = testWorkspace(URI.parse('file:///VSCode/workspaceLocation'));\n\t\tworkspace = containingWorkspace.folders[0];\n\t\tconfigurationResolverService = new TestConfigurationResolverService(nullContext, Promise.resolve(envVariables), editorService, new MockInputsConfigurationService(), mockCommandService, new TestContextService(containingWorkspace), quickInputService, labelService, pathService, extensionService, disposables.add(new TestStorageService()));\n\t});\n\n\tteardown(() => {\n\t\tconfigurationResolverService = null;\n\t});\n\n\ttest('substitute one', async () => {\n\t\tif (platform.isWindows) {\n\t\t\tassert.strictEqual(await configurationResolverService!.resolveAsync(workspace, 'abc ${workspaceFolder} xyz'), 'abc \\\\VSCode\\\\workspaceLocation xyz');\n\t\t} else {\n\t\t\tassert.strictEqual(await configurationResolverService!.resolveAsync(workspace, 'abc ${workspaceFolder} xyz'), 'abc /VSCode/workspaceLocation xyz');\n\t\t}\n\t});\n\n\ttest('workspace folder with argument', async () => {\n\t\tif (platform.isWindows) {\n\t\t\tassert.strictEqual(await configurationResolverService!.resolveAsync(workspace, 'abc ${workspaceFolder:workspaceLocation} xyz'), 'abc \\\\VSCode\\\\workspaceLocation xyz');\n\t\t} else {\n\t\t\tassert.strictEqual(await configurationResolverService!.resolveAsync(workspace, 'abc ${workspaceFolder:workspaceLocation} xyz'), 'abc /VSCode/workspaceLocation xyz');\n\t\t}\n\t});\n\n\ttest('workspace folder with invalid argument', () => {\n\t\tassert.rejects(async () => await configurationResolverService!.resolveAsync(workspace, 'abc ${workspaceFolder:invalidLocation} xyz'));\n\t});\n\n\ttest('workspace folder with undefined workspace folder', () => {\n\t\tassert.rejects(async () => await configurationResolverService!.resolveAsync(undefined, 'abc ${workspaceFolder} xyz'));\n\t});\n\n\ttest('workspace folder with argument and undefined workspace folder', async () => {\n\t\tif (platform.isWindows) {\n\t\t\tassert.strictEqual(await configurationResolverService!.resolveAsync(undefined, 'abc ${workspaceFolder:workspaceLocation} xyz'), 'abc \\\\VSCode\\\\workspaceLocation xyz');\n\t\t} else {\n\t\t\tassert.strictEqual(await configurationResolverService!.resolveAsync(undefined, 'abc ${workspaceFolder:workspaceLocation} xyz'), 'abc /VSCode/workspaceLocation xyz');\n\t\t}\n\t});\n\n\ttest('workspace folder with invalid argument and undefined workspace folder', () => {\n\t\tassert.rejects(async () => await configurationResolverService!.resolveAsync(undefined, 'abc ${workspaceFolder:invalidLocation} xyz'));\n\t});\n\n\ttest('workspace root folder name', async () => {\n\t\tassert.strictEqual(await configurationResolverService!.resolveAsync(workspace, 'abc ${workspaceRootFolderName} xyz'), 'abc workspaceLocation xyz');\n\t});\n\n\ttest('current selected line number', async () => {\n\t\tassert.strictEqual(await configurationResolverService!.resolveAsync(workspace, 'abc ${lineNumber} xyz'), `abc ${mockLineNumber} xyz`);\n\t});\n\n\ttest('relative file', async () => {\n\t\tassert.strictEqual(await configurationResolverService!.resolveAsync(workspace, 'abc ${relativeFile} xyz'), 'abc file xyz');\n\t});\n\n\ttest('relative file with argument', async () => {\n\t\tassert.strictEqual(await configurationResolverService!.resolveAsync(workspace, 'abc ${relativeFile:workspaceLocation} xyz'), 'abc file xyz');\n\t});\n\n\ttest('relative file with invalid argument', () => {\n\t\tassert.rejects(async () => await configurationResolverService!.resolveAsync(workspace, 'abc ${relativeFile:invalidLocation} xyz'));\n\t});\n\n\ttest('relative file with undefined workspace folder', async () => {\n\t\tif (platform.isWindows) {\n\t\t\tassert.strictEqual(await configurationResolverService!.resolveAsync(undefined, 'abc ${relativeFile} xyz'), 'abc \\\\VSCode\\\\workspaceLocation\\\\file xyz');\n\t\t} else {\n\t\t\tassert.strictEqual(await configurationResolverService!.resolveAsync(undefined, 'abc ${relativeFile} xyz'), 'abc /VSCode/workspaceLocation/file xyz');\n\t\t}\n\t});\n\n\ttest('relative file with argument and undefined workspace folder', async () => {\n\t\tassert.strictEqual(await configurationResolverService!.resolveAsync(undefined, 'abc ${relativeFile:workspaceLocation} xyz'), 'abc file xyz');\n\t});\n\n\ttest('relative file with invalid argument and undefined workspace folder', () => {\n\t\tassert.rejects(async () => await configurationResolverService!.resolveAsync(undefined, 'abc ${relativeFile:invalidLocation} xyz'));\n\t});\n\n\ttest('substitute many', async () => {\n\t\tif (platform.isWindows) {\n\t\t\tassert.strictEqual(await configurationResolverService!.resolveAsync(workspace, '${workspaceFolder} - ${workspaceFolder}'), '\\\\VSCode\\\\workspaceLocation - \\\\VSCode\\\\workspaceLocation');\n\t\t} else {\n\t\t\tassert.strictEqual(await configurationResolverService!.resolveAsync(workspace, '${workspaceFolder} - ${workspaceFolder}'), '/VSCode/workspaceLocation - /VSCode/workspaceLocation');\n\t\t}\n\t});\n\n\ttest('substitute one env variable', async () => {\n\t\tif (platform.isWindows) {\n\t\t\tassert.strictEqual(await configurationResolverService!.resolveAsync(workspace, 'abc ${workspaceFolder} ${env:key1} xyz'), 'abc \\\\VSCode\\\\workspaceLocation Value for key1 xyz');\n\t\t} else {\n\t\t\tassert.strictEqual(await configurationResolverService!.resolveAsync(workspace, 'abc ${workspaceFolder} ${env:key1} xyz'), 'abc /VSCode/workspaceLocation Value for key1 xyz');\n\t\t}\n\t});\n\n\ttest('substitute many env variable', async () => {\n\t\tif (platform.isWindows) {\n\t\t\tassert.strictEqual(await configurationResolverService!.resolveAsync(workspace, '${workspaceFolder} - ${workspaceFolder} ${env:key1} - ${env:key2}'), '\\\\VSCode\\\\workspaceLocation - \\\\VSCode\\\\workspaceLocation Value for key1 - Value for key2');\n\t\t} else {\n\t\t\tassert.strictEqual(await configurationResolverService!.resolveAsync(workspace, '${workspaceFolder} - ${workspaceFolder} ${env:key1} - ${env:key2}'), '/VSCode/workspaceLocation - /VSCode/workspaceLocation Value for key1 - Value for key2');\n\t\t}\n\t});\n\n\ttest('disallows nested keys (#77289)', async () => {\n\t\tassert.strictEqual(await configurationResolverService!.resolveAsync(workspace, '${env:key1} ${env:key1${env:key2}}'), 'Value for key1 ${env:key1${env:key2}}');\n\t});\n\n\ttest('supports extensionDir', async () => {\n\t\tconst getExtension = stub(extensionService, 'getExtension');\n\t\tgetExtension.withArgs('publisher.extId').returns(Promise.resolve({ extensionLocation: URI.file('/some/path') } as IExtensionDescription));\n\n\t\tassert.strictEqual(await configurationResolverService!.resolveAsync(workspace, '${extensionInstallFolder:publisher.extId}'), URI.file('/some/path').fsPath);\n\t});\n\n\t// test('substitute keys and values in object', () => {\n\t// \tconst myObject = {\n\t// \t\t'${workspaceRootFolderName}': '${lineNumber}',\n\t// \t\t'hey ${env:key1} ': '${workspaceRootFolderName}'\n\t// \t};\n\t// \tassert.deepStrictEqual(configurationResolverService!.resolveAsync(workspace, myObject), {\n\t// \t\t'workspaceLocation': `${editorService.mockLineNumber}`,\n\t// \t\t'hey Value for key1 ': 'workspaceLocation'\n\t// \t});\n\t// });\n\n\n\ttest('substitute one env variable using platform case sensitivity', async () => {\n\t\tif (platform.isWindows) {\n\t\t\tassert.strictEqual(await configurationResolverService!.resolveAsync(workspace, '${env:key1} - ${env:Key1}'), 'Value for key1 - Value for key1');\n\t\t} else {\n\t\t\tassert.strictEqual(await configurationResolverService!.resolveAsync(workspace, '${env:key1} - ${env:Key1}'), 'Value for key1 - ');\n\t\t}\n\t});\n\n\ttest('substitute one configuration variable', async () => {\n\t\tconst configurationService: IConfigurationService = new TestConfigurationService({\n\t\t\teditor: {\n\t\t\t\tfontFamily: 'foo'\n\t\t\t},\n\t\t\tterminal: {\n\t\t\t\tintegrated: {\n\t\t\t\t\tfontFamily: 'bar'\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tconst service = new TestConfigurationResolverService(nullContext, Promise.resolve(envVariables), disposables.add(new TestEditorServiceWithActiveEditor()), configurationService, mockCommandService, new TestContextService(), quickInputService, labelService, pathService, extensionService, disposables.add(new TestStorageService()));\n\t\tassert.strictEqual(await service.resolveAsync(workspace, 'abc ${config:editor.fontFamily} xyz'), 'abc foo xyz');\n\t});\n\n\ttest('substitute configuration variable with undefined workspace folder', async () => {\n\t\tconst configurationService: IConfigurationService = new TestConfigurationService({\n\t\t\teditor: {\n\t\t\t\tfontFamily: 'foo'\n\t\t\t}\n\t\t});\n\n\t\tconst service = new TestConfigurationResolverService(nullContext, Promise.resolve(envVariables), disposables.add(new TestEditorServiceWithActiveEditor()), configurationService, mockCommandService, new TestContextService(), quickInputService, labelService, pathService, extensionService, disposables.add(new TestStorageService()));\n\t\tassert.strictEqual(await service.resolveAsync(undefined, 'abc ${config:editor.fontFamily} xyz'), 'abc foo xyz');\n\t});\n\n\ttest('substitute many configuration variables', async () => {\n\t\tconst configurationService = new TestConfigurationService({\n\t\t\teditor: {\n\t\t\t\tfontFamily: 'foo'\n\t\t\t},\n\t\t\tterminal: {\n\t\t\t\tintegrated: {\n\t\t\t\t\tfontFamily: 'bar'\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tconst service = new TestConfigurationResolverService(nullContext, Promise.resolve(envVariables), disposables.add(new TestEditorServiceWithActiveEditor()), configurationService, mockCommandService, new TestContextService(), quickInputService, labelService, pathService, extensionService, disposables.add(new TestStorageService()));\n\t\tassert.strictEqual(await service.resolveAsync(workspace, 'abc ${config:editor.fontFamily} ${config:terminal.integrated.fontFamily} xyz'), 'abc foo bar xyz');\n\t});\n\n\ttest('substitute one env variable and a configuration variable', async () => {\n\t\tconst configurationService = new TestConfigurationService({\n\t\t\teditor: {\n\t\t\t\tfontFamily: 'foo'\n\t\t\t},\n\t\t\tterminal: {\n\t\t\t\tintegrated: {\n\t\t\t\t\tfontFamily: 'bar'\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tconst service = new TestConfigurationResolverService(nullContext, Promise.resolve(envVariables), disposables.add(new TestEditorServiceWithActiveEditor()), configurationService, mockCommandService, new TestContextService(), quickInputService, labelService, pathService, extensionService, disposables.add(new TestStorageService()));\n\t\tif (platform.isWindows) {\n\t\t\tassert.strictEqual(await service.resolveAsync(workspace, 'abc ${config:editor.fontFamily} ${workspaceFolder} ${env:key1} xyz'), 'abc foo \\\\VSCode\\\\workspaceLocation Value for key1 xyz');\n\t\t} else {\n\t\t\tassert.strictEqual(await service.resolveAsync(workspace, 'abc ${config:editor.fontFamily} ${workspaceFolder} ${env:key1} xyz'), 'abc foo /VSCode/workspaceLocation Value for key1 xyz');\n\t\t}\n\t});\n\n\ttest('substitute many env variable and a configuration variable', async () => {\n\t\tconst configurationService = new TestConfigurationService({\n\t\t\teditor: {\n\t\t\t\tfontFamily: 'foo'\n\t\t\t},\n\t\t\tterminal: {\n\t\t\t\tintegrated: {\n\t\t\t\t\tfontFamily: 'bar'\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tconst service = new TestConfigurationResolverService(nullContext, Promise.resolve(envVariables), disposables.add(new TestEditorServiceWithActiveEditor()), configurationService, mockCommandService, new TestContextService(), quickInputService, labelService, pathService, extensionService, disposables.add(new TestStorageService()));\n\t\tif (platform.isWindows) {\n\t\t\tassert.strictEqual(await service.resolveAsync(workspace, '${config:editor.fontFamily} ${config:terminal.integrated.fontFamily} ${workspaceFolder} - ${workspaceFolder} ${env:key1} - ${env:key2}'), 'foo bar \\\\VSCode\\\\workspaceLocation - \\\\VSCode\\\\workspaceLocation Value for key1 - Value for key2');\n\t\t} else {\n\t\t\tassert.strictEqual(await service.resolveAsync(workspace, '${config:editor.fontFamily} ${config:terminal.integrated.fontFamily} ${workspaceFolder} - ${workspaceFolder} ${env:key1} - ${env:key2}'), 'foo bar /VSCode/workspaceLocation - /VSCode/workspaceLocation Value for key1 - Value for key2');\n\t\t}\n\t});\n\n\ttest('mixed types of configuration variables', async () => {\n\t\tconst configurationService = new TestConfigurationService({\n\t\t\teditor: {\n\t\t\t\tfontFamily: 'foo',\n\t\t\t\tlineNumbers: 123,\n\t\t\t\tinsertSpaces: false\n\t\t\t},\n\t\t\tterminal: {\n\t\t\t\tintegrated: {\n\t\t\t\t\tfontFamily: 'bar'\n\t\t\t\t}\n\t\t\t},\n\t\t\tjson: {\n\t\t\t\tschemas: [\n\t\t\t\t\t{\n\t\t\t\t\t\tfileMatch: [\n\t\t\t\t\t\t\t'/myfile',\n\t\t\t\t\t\t\t'/myOtherfile'\n\t\t\t\t\t\t],\n\t\t\t\t\t\turl: 'schemaURL'\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t}\n\t\t});\n\n\t\tconst service = new TestConfigurationResolverService(nullContext, Promise.resolve(envVariables), disposables.add(new TestEditorServiceWithActiveEditor()), configurationService, mockCommandService, new TestContextService(), quickInputService, labelService, pathService, extensionService, disposables.add(new TestStorageService()));\n\t\tassert.strictEqual(await service.resolveAsync(workspace, 'abc ${config:editor.fontFamily} ${config:editor.lineNumbers} ${config:editor.insertSpaces} xyz'), 'abc foo 123 false xyz');\n\t});\n\n\ttest('uses original variable as fallback', async () => {\n\t\tconst configurationService = new TestConfigurationService({\n\t\t\teditor: {}\n\t\t});\n\n\t\tconst service = new TestConfigurationResolverService(nullContext, Promise.resolve(envVariables), disposables.add(new TestEditorServiceWithActiveEditor()), configurationService, mockCommandService, new TestContextService(), quickInputService, labelService, pathService, extensionService, disposables.add(new TestStorageService()));\n\t\tassert.strictEqual(await service.resolveAsync(workspace, 'abc ${unknownVariable} xyz'), 'abc ${unknownVariable} xyz');\n\t\tassert.strictEqual(await service.resolveAsync(workspace, 'abc ${env:unknownVariable} xyz'), 'abc  xyz');\n\t});\n\n\ttest('configuration variables with invalid accessor', () => {\n\t\tconst configurationService = new TestConfigurationService({\n\t\t\teditor: {\n\t\t\t\tfontFamily: 'foo'\n\t\t\t}\n\t\t});\n\n\t\tconst service = new TestConfigurationResolverService(nullContext, Promise.resolve(envVariables), disposables.add(new TestEditorServiceWithActiveEditor()), configurationService, mockCommandService, new TestContextService(), quickInputService, labelService, pathService, extensionService, disposables.add(new TestStorageService()));\n\n\t\tassert.rejects(async () => await service.resolveAsync(workspace, 'abc ${env} xyz'));\n\t\tassert.rejects(async () => await service.resolveAsync(workspace, 'abc ${env:} xyz'));\n\t\tassert.rejects(async () => await service.resolveAsync(workspace, 'abc ${config} xyz'));\n\t\tassert.rejects(async () => await service.resolveAsync(workspace, 'abc ${config:} xyz'));\n\t\tassert.rejects(async () => await service.resolveAsync(workspace, 'abc ${config:editor} xyz'));\n\t\tassert.rejects(async () => await service.resolveAsync(workspace, 'abc ${config:editor..fontFamily} xyz'));\n\t\tassert.rejects(async () => await service.resolveAsync(workspace, 'abc ${config:editor.none.none2} xyz'));\n\t});\n\n\ttest('a single command variable', () => {\n\n\t\tconst configuration = {\n\t\t\t'name': 'Attach to Process',\n\t\t\t'type': 'node',\n\t\t\t'request': 'attach',\n\t\t\t'processId': '${command:command1}',\n\t\t\t'port': 5858,\n\t\t\t'sourceMaps': false,\n\t\t\t'outDir': null\n\t\t};\n\n\t\treturn configurationResolverService!.resolveWithInteractionReplace(undefined, configuration).then(result => {\n\t\t\tassert.deepStrictEqual({ ...result }, {\n\t\t\t\t'name': 'Attach to Process',\n\t\t\t\t'type': 'node',\n\t\t\t\t'request': 'attach',\n\t\t\t\t'processId': 'command1-result',\n\t\t\t\t'port': 5858,\n\t\t\t\t'sourceMaps': false,\n\t\t\t\t'outDir': null\n\t\t\t});\n\n\t\t\tassert.strictEqual(1, mockCommandService.callCount);\n\t\t});\n\t});\n\n\ttest('an old style command variable', () => {\n\t\tconst configuration = {\n\t\t\t'name': 'Attach to Process',\n\t\t\t'type': 'node',\n\t\t\t'request': 'attach',\n\t\t\t'processId': '${command:commandVariable1}',\n\t\t\t'port': 5858,\n\t\t\t'sourceMaps': false,\n\t\t\t'outDir': null\n\t\t};\n\t\tconst commandVariables = Object.create(null);\n\t\tcommandVariables['commandVariable1'] = 'command1';\n\n\t\treturn configurationResolverService!.resolveWithInteractionReplace(undefined, configuration, undefined, commandVariables).then(result => {\n\t\t\tassert.deepStrictEqual({ ...result }, {\n\t\t\t\t'name': 'Attach to Process',\n\t\t\t\t'type': 'node',\n\t\t\t\t'request': 'attach',\n\t\t\t\t'processId': 'command1-result',\n\t\t\t\t'port': 5858,\n\t\t\t\t'sourceMaps': false,\n\t\t\t\t'outDir': null\n\t\t\t});\n\n\t\t\tassert.strictEqual(1, mockCommandService.callCount);\n\t\t});\n\t});\n\n\ttest('multiple new and old-style command variables', () => {\n\n\t\tconst configuration = {\n\t\t\t'name': 'Attach to Process',\n\t\t\t'type': 'node',\n\t\t\t'request': 'attach',\n\t\t\t'processId': '${command:commandVariable1}',\n\t\t\t'pid': '${command:command2}',\n\t\t\t'sourceMaps': false,\n\t\t\t'outDir': 'src/${command:command2}',\n\t\t\t'env': {\n\t\t\t\t'processId': '__${command:command2}__',\n\t\t\t}\n\t\t};\n\t\tconst commandVariables = Object.create(null);\n\t\tcommandVariables['commandVariable1'] = 'command1';\n\n\t\treturn configurationResolverService!.resolveWithInteractionReplace(undefined, configuration, undefined, commandVariables).then(result => {\n\t\t\tconst expected = {\n\t\t\t\t'name': 'Attach to Process',\n\t\t\t\t'type': 'node',\n\t\t\t\t'request': 'attach',\n\t\t\t\t'processId': 'command1-result',\n\t\t\t\t'pid': 'command2-result',\n\t\t\t\t'sourceMaps': false,\n\t\t\t\t'outDir': 'src/command2-result',\n\t\t\t\t'env': {\n\t\t\t\t\t'processId': '__command2-result__',\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tassert.deepStrictEqual(Object.keys(result), Object.keys(expected));\n\t\t\tObject.keys(result).forEach(property => {\n\t\t\t\tconst expectedProperty = (<any>expected)[property];\n\t\t\t\tif (isObject(result[property])) {\n\t\t\t\t\tassert.deepStrictEqual({ ...result[property] }, expectedProperty);\n\t\t\t\t} else {\n\t\t\t\t\tassert.deepStrictEqual(result[property], expectedProperty);\n\t\t\t\t}\n\t\t\t});\n\t\t\tassert.strictEqual(2, mockCommandService.callCount);\n\t\t});\n\t});\n\n\ttest('a command variable that relies on resolved env vars', () => {\n\n\t\tconst configuration = {\n\t\t\t'name': 'Attach to Process',\n\t\t\t'type': 'node',\n\t\t\t'request': 'attach',\n\t\t\t'processId': '${command:commandVariable1}',\n\t\t\t'value': '${env:key1}'\n\t\t};\n\t\tconst commandVariables = Object.create(null);\n\t\tcommandVariables['commandVariable1'] = 'command1';\n\n\t\treturn configurationResolverService!.resolveWithInteractionReplace(undefined, configuration, undefined, commandVariables).then(result => {\n\n\t\t\tassert.deepStrictEqual({ ...result }, {\n\t\t\t\t'name': 'Attach to Process',\n\t\t\t\t'type': 'node',\n\t\t\t\t'request': 'attach',\n\t\t\t\t'processId': 'Value for key1',\n\t\t\t\t'value': 'Value for key1'\n\t\t\t});\n\n\t\t\tassert.strictEqual(1, mockCommandService.callCount);\n\t\t});\n\t});\n\n\ttest('a single prompt input variable', () => {\n\n\t\tconst configuration = {\n\t\t\t'name': 'Attach to Process',\n\t\t\t'type': 'node',\n\t\t\t'request': 'attach',\n\t\t\t'processId': '${input:input1}',\n\t\t\t'port': 5858,\n\t\t\t'sourceMaps': false,\n\t\t\t'outDir': null\n\t\t};\n\n\t\treturn configurationResolverService!.resolveWithInteractionReplace(workspace, configuration, 'tasks').then(result => {\n\n\t\t\tassert.deepStrictEqual({ ...result }, {\n\t\t\t\t'name': 'Attach to Process',\n\t\t\t\t'type': 'node',\n\t\t\t\t'request': 'attach',\n\t\t\t\t'processId': 'resolvedEnterinput1',\n\t\t\t\t'port': 5858,\n\t\t\t\t'sourceMaps': false,\n\t\t\t\t'outDir': null\n\t\t\t});\n\n\t\t\tassert.strictEqual(0, mockCommandService.callCount);\n\t\t});\n\t});\n\n\ttest('a single pick input variable', () => {\n\n\t\tconst configuration = {\n\t\t\t'name': 'Attach to Process',\n\t\t\t'type': 'node',\n\t\t\t'request': 'attach',\n\t\t\t'processId': '${input:input2}',\n\t\t\t'port': 5858,\n\t\t\t'sourceMaps': false,\n\t\t\t'outDir': null\n\t\t};\n\n\t\treturn configurationResolverService!.resolveWithInteractionReplace(workspace, configuration, 'tasks').then(result => {\n\n\t\t\tassert.deepStrictEqual({ ...result }, {\n\t\t\t\t'name': 'Attach to Process',\n\t\t\t\t'type': 'node',\n\t\t\t\t'request': 'attach',\n\t\t\t\t'processId': 'selectedPick',\n\t\t\t\t'port': 5858,\n\t\t\t\t'sourceMaps': false,\n\t\t\t\t'outDir': null\n\t\t\t});\n\n\t\t\tassert.strictEqual(0, mockCommandService.callCount);\n\t\t});\n\t});\n\n\ttest('a single command input variable', () => {\n\n\t\tconst configuration = {\n\t\t\t'name': 'Attach to Process',\n\t\t\t'type': 'node',\n\t\t\t'request': 'attach',\n\t\t\t'processId': '${input:input4}',\n\t\t\t'port': 5858,\n\t\t\t'sourceMaps': false,\n\t\t\t'outDir': null\n\t\t};\n\n\t\treturn configurationResolverService!.resolveWithInteractionReplace(workspace, configuration, 'tasks').then(result => {\n\n\t\t\tassert.deepStrictEqual({ ...result }, {\n\t\t\t\t'name': 'Attach to Process',\n\t\t\t\t'type': 'node',\n\t\t\t\t'request': 'attach',\n\t\t\t\t'processId': 'arg for command',\n\t\t\t\t'port': 5858,\n\t\t\t\t'sourceMaps': false,\n\t\t\t\t'outDir': null\n\t\t\t});\n\n\t\t\tassert.strictEqual(1, mockCommandService.callCount);\n\t\t});\n\t});\n\n\ttest('several input variables and command', () => {\n\n\t\tconst configuration = {\n\t\t\t'name': '${input:input3}',\n\t\t\t'type': '${command:command1}',\n\t\t\t'request': '${input:input1}',\n\t\t\t'processId': '${input:input2}',\n\t\t\t'command': '${input:input4}',\n\t\t\t'port': 5858,\n\t\t\t'sourceMaps': false,\n\t\t\t'outDir': null\n\t\t};\n\n\t\treturn configurationResolverService!.resolveWithInteractionReplace(workspace, configuration, 'tasks').then(result => {\n\n\t\t\tassert.deepStrictEqual({ ...result }, {\n\t\t\t\t'name': 'resolvedEnterinput3',\n\t\t\t\t'type': 'command1-result',\n\t\t\t\t'request': 'resolvedEnterinput1',\n\t\t\t\t'processId': 'selectedPick',\n\t\t\t\t'command': 'arg for command',\n\t\t\t\t'port': 5858,\n\t\t\t\t'sourceMaps': false,\n\t\t\t\t'outDir': null\n\t\t\t});\n\n\t\t\tassert.strictEqual(2, mockCommandService.callCount);\n\t\t});\n\t});\n\n\ttest('input variable with undefined workspace folder', () => {\n\n\t\tconst configuration = {\n\t\t\t'name': 'Attach to Process',\n\t\t\t'type': 'node',\n\t\t\t'request': 'attach',\n\t\t\t'processId': '${input:input1}',\n\t\t\t'port': 5858,\n\t\t\t'sourceMaps': false,\n\t\t\t'outDir': null\n\t\t};\n\n\t\treturn configurationResolverService!.resolveWithInteractionReplace(undefined, configuration, 'tasks').then(result => {\n\n\t\t\tassert.deepStrictEqual({ ...result }, {\n\t\t\t\t'name': 'Attach to Process',\n\t\t\t\t'type': 'node',\n\t\t\t\t'request': 'attach',\n\t\t\t\t'processId': 'resolvedEnterinput1',\n\t\t\t\t'port': 5858,\n\t\t\t\t'sourceMaps': false,\n\t\t\t\t'outDir': null\n\t\t\t});\n\n\t\t\tassert.strictEqual(0, mockCommandService.callCount);\n\t\t});\n\t});\n\n\ttest('contributed variable', () => {\n\t\tconst buildTask = 'npm: compile';\n\t\tconst variable = 'defaultBuildTask';\n\t\tconst configuration = {\n\t\t\t'name': '${' + variable + '}',\n\t\t};\n\t\tconfigurationResolverService!.contributeVariable(variable, async () => { return buildTask; });\n\t\treturn configurationResolverService!.resolveWithInteractionReplace(workspace, configuration).then(result => {\n\t\t\tassert.deepStrictEqual({ ...result }, {\n\t\t\t\t'name': `${buildTask}`\n\t\t\t});\n\t\t});\n\t});\n\n\ttest('resolveWithEnvironment', async () => {\n\t\tconst env = {\n\t\t\t'VAR_1': 'VAL_1',\n\t\t\t'VAR_2': 'VAL_2'\n\t\t};\n\t\tconst configuration = 'echo ${env:VAR_1}${env:VAR_2}';\n\t\tconst resolvedResult = await configurationResolverService!.resolveWithEnvironment({ ...env }, undefined, configuration);\n\t\tassert.deepStrictEqual(resolvedResult, 'echo VAL_1VAL_2');\n\t});\n});\n\n\nclass MockCommandService implements ICommandService {\n\n\tpublic _serviceBrand: undefined;\n\tpublic callCount = 0;\n\n\tonWillExecuteCommand = () => Disposable.None;\n\tonDidExecuteCommand = () => Disposable.None;\n\tpublic executeCommand(commandId: string, ...args: any[]): Promise<any> {\n\t\tthis.callCount++;\n\n\t\tlet result = `${commandId}-result`;\n\t\tif (args.length >= 1) {\n\t\t\tif (args[0] && args[0].value) {\n\t\t\t\tresult = args[0].value;\n\t\t\t}\n\t\t}\n\n\t\treturn Promise.resolve(result);\n\t}\n}\n\nclass MockLabelService implements ILabelService {\n\t_serviceBrand: undefined;\n\tgetUriLabel(resource: URI, options?: { relative?: boolean | undefined; noPrefix?: boolean | undefined }): string {\n\t\treturn normalize(resource.fsPath);\n\t}\n\tgetUriBasenameLabel(resource: URI): string {\n\t\tthrow new Error('Method not implemented.');\n\t}\n\tgetWorkspaceLabel(workspace: URI | IWorkspaceIdentifier | IWorkspace, options?: { verbose: Verbosity }): string {\n\t\tthrow new Error('Method not implemented.');\n\t}\n\tgetHostLabel(scheme: string, authority?: string): string {\n\t\tthrow new Error('Method not implemented.');\n\t}\n\tpublic getHostTooltip(): string | undefined {\n\t\tthrow new Error('Method not implemented.');\n\t}\n\tgetSeparator(scheme: string, authority?: string): '/' | '\\\\' {\n\t\tthrow new Error('Method not implemented.');\n\t}\n\tregisterFormatter(formatter: ResourceLabelFormatter): IDisposable {\n\t\tthrow new Error('Method not implemented.');\n\t}\n\tregisterCachedFormatter(formatter: ResourceLabelFormatter): IDisposable {\n\t\tthrow new Error('Method not implemented.');\n\t}\n\tonDidChangeFormatters: Event<IFormatterChangeEvent> = new Emitter<IFormatterChangeEvent>().event;\n}\n\nclass MockPathService implements IPathService {\n\t_serviceBrand: undefined;\n\tget path(): Promise<IPath> {\n\t\tthrow new Error('Property not implemented');\n\t}\n\tdefaultUriScheme: string = Schemas.file;\n\tfileURI(path: string): Promise<URI> {\n\t\tthrow new Error('Method not implemented.');\n\t}\n\tuserHome(options?: { preferLocal: boolean }): Promise<URI>;\n\tuserHome(options: { preferLocal: true }): URI;\n\tuserHome(options?: { preferLocal: boolean }): Promise<URI> | URI {\n\t\tconst uri = URI.file('c:\\\\users\\\\username');\n\t\treturn options?.preferLocal ? uri : Promise.resolve(uri);\n\t}\n\thasValidBasename(resource: URI, basename?: string): Promise<boolean>;\n\thasValidBasename(resource: URI, os: platform.OperatingSystem, basename?: string): boolean;\n\thasValidBasename(resource: URI, arg2?: string | platform.OperatingSystem, name?: string): boolean | Promise<boolean> {\n\t\tthrow new Error('Method not implemented.');\n\t}\n\tresolvedUserHome: URI | undefined;\n}\n\nclass MockInputsConfigurationService extends TestConfigurationService {\n\tpublic override getValue(arg1?: any, arg2?: any): any {\n\t\tlet configuration;\n\t\tif (arg1 === 'tasks') {\n\t\t\tconfiguration = {\n\t\t\t\tinputs: [\n\t\t\t\t\t{\n\t\t\t\t\t\tid: 'input1',\n\t\t\t\t\t\ttype: 'promptString',\n\t\t\t\t\t\tdescription: 'Enterinput1',\n\t\t\t\t\t\tdefault: 'default input1'\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tid: 'input2',\n\t\t\t\t\t\ttype: 'pickString',\n\t\t\t\t\t\tdescription: 'Enterinput1',\n\t\t\t\t\t\tdefault: 'option2',\n\t\t\t\t\t\toptions: ['option1', 'option2', 'option3']\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tid: 'input3',\n\t\t\t\t\t\ttype: 'promptString',\n\t\t\t\t\t\tdescription: 'Enterinput3',\n\t\t\t\t\t\tdefault: 'default input3',\n\t\t\t\t\t\tpassword: true\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tid: 'input4',\n\t\t\t\t\t\ttype: 'command',\n\t\t\t\t\t\tcommand: 'command1',\n\t\t\t\t\t\targs: {\n\t\t\t\t\t\t\tvalue: 'arg for command'\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t};\n\t\t}\n\t\treturn configuration;\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
