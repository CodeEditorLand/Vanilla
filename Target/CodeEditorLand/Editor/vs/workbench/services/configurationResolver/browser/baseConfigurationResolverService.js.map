{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/configurationResolver/browser/baseConfigurationResolverService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { Queue } from '../../../../base/common/async.js';\nimport { IStringDictionary } from '../../../../base/common/collections.js';\nimport { LRUCache } from '../../../../base/common/map.js';\nimport { Schemas } from '../../../../base/common/network.js';\nimport { IProcessEnvironment } from '../../../../base/common/platform.js';\nimport * as Types from '../../../../base/common/types.js';\nimport { URI as uri } from '../../../../base/common/uri.js';\nimport { ICodeEditor, isCodeEditor, isDiffEditor } from '../../../../editor/browser/editorBrowser.js';\nimport * as nls from '../../../../nls.js';\nimport { ICommandService } from '../../../../platform/commands/common/commands.js';\nimport { ConfigurationTarget, IConfigurationOverrides, IConfigurationService } from '../../../../platform/configuration/common/configuration.js';\nimport { ILabelService } from '../../../../platform/label/common/label.js';\nimport { IInputOptions, IPickOptions, IQuickInputService, IQuickPickItem } from '../../../../platform/quickinput/common/quickInput.js';\nimport { IStorageService, StorageScope, StorageTarget } from '../../../../platform/storage/common/storage.js';\nimport { IWorkspaceContextService, IWorkspaceFolder, WorkbenchState } from '../../../../platform/workspace/common/workspace.js';\nimport { EditorResourceAccessor, SideBySideEditor } from '../../../common/editor.js';\nimport { ConfiguredInput } from '../common/configurationResolver.js';\nimport { AbstractVariableResolverService } from '../common/variableResolver.js';\nimport { IEditorService } from '../../editor/common/editorService.js';\nimport { IExtensionService } from '../../extensions/common/extensions.js';\nimport { IPathService } from '../../path/common/pathService.js';\n\nconst LAST_INPUT_STORAGE_KEY = 'configResolveInputLru';\nconst LAST_INPUT_CACHE_SIZE = 5;\n\nexport abstract class BaseConfigurationResolverService extends AbstractVariableResolverService {\n\n\tstatic readonly INPUT_OR_COMMAND_VARIABLES_PATTERN = /\\${((input|command):(.*?))}/g;\n\n\tprivate userInputAccessQueue = new Queue<string | IQuickPickItem | undefined>();\n\n\tconstructor(\n\t\tcontext: {\n\t\t\tgetAppRoot: () => string | undefined;\n\t\t\tgetExecPath: () => string | undefined;\n\t\t},\n\t\tenvVariablesPromise: Promise<IProcessEnvironment>,\n\t\teditorService: IEditorService,\n\t\tprivate readonly configurationService: IConfigurationService,\n\t\tprivate readonly commandService: ICommandService,\n\t\tprivate readonly workspaceContextService: IWorkspaceContextService,\n\t\tprivate readonly quickInputService: IQuickInputService,\n\t\tprivate readonly labelService: ILabelService,\n\t\tprivate readonly pathService: IPathService,\n\t\textensionService: IExtensionService,\n\t\tprivate readonly storageService: IStorageService,\n\t) {\n\t\tsuper({\n\t\t\tgetFolderUri: (folderName: string): uri | undefined => {\n\t\t\t\tconst folder = workspaceContextService.getWorkspace().folders.filter(f => f.name === folderName).pop();\n\t\t\t\treturn folder ? folder.uri : undefined;\n\t\t\t},\n\t\t\tgetWorkspaceFolderCount: (): number => {\n\t\t\t\treturn workspaceContextService.getWorkspace().folders.length;\n\t\t\t},\n\t\t\tgetConfigurationValue: (folderUri: uri | undefined, suffix: string): string | undefined => {\n\t\t\t\treturn configurationService.getValue<string>(suffix, folderUri ? { resource: folderUri } : {});\n\t\t\t},\n\t\t\tgetAppRoot: (): string | undefined => {\n\t\t\t\treturn context.getAppRoot();\n\t\t\t},\n\t\t\tgetExecPath: (): string | undefined => {\n\t\t\t\treturn context.getExecPath();\n\t\t\t},\n\t\t\tgetFilePath: (): string | undefined => {\n\t\t\t\tconst fileResource = EditorResourceAccessor.getOriginalUri(editorService.activeEditor, {\n\t\t\t\t\tsupportSideBySide: SideBySideEditor.PRIMARY,\n\t\t\t\t\tfilterByScheme: [Schemas.file, Schemas.vscodeUserData, this.pathService.defaultUriScheme]\n\t\t\t\t});\n\t\t\t\tif (!fileResource) {\n\t\t\t\t\treturn undefined;\n\t\t\t\t}\n\t\t\t\treturn this.labelService.getUriLabel(fileResource, { noPrefix: true });\n\t\t\t},\n\t\t\tgetWorkspaceFolderPathForFile: (): string | undefined => {\n\t\t\t\tconst fileResource = EditorResourceAccessor.getOriginalUri(editorService.activeEditor, {\n\t\t\t\t\tsupportSideBySide: SideBySideEditor.PRIMARY,\n\t\t\t\t\tfilterByScheme: [Schemas.file, Schemas.vscodeUserData, this.pathService.defaultUriScheme]\n\t\t\t\t});\n\t\t\t\tif (!fileResource) {\n\t\t\t\t\treturn undefined;\n\t\t\t\t}\n\t\t\t\tconst wsFolder = workspaceContextService.getWorkspaceFolder(fileResource);\n\t\t\t\tif (!wsFolder) {\n\t\t\t\t\treturn undefined;\n\t\t\t\t}\n\t\t\t\treturn this.labelService.getUriLabel(wsFolder.uri, { noPrefix: true });\n\t\t\t},\n\t\t\tgetSelectedText: (): string | undefined => {\n\t\t\t\tconst activeTextEditorControl = editorService.activeTextEditorControl;\n\n\t\t\t\tlet activeControl: ICodeEditor | null = null;\n\n\t\t\t\tif (isCodeEditor(activeTextEditorControl)) {\n\t\t\t\t\tactiveControl = activeTextEditorControl;\n\t\t\t\t} else if (isDiffEditor(activeTextEditorControl)) {\n\t\t\t\t\tconst original = activeTextEditorControl.getOriginalEditor();\n\t\t\t\t\tconst modified = activeTextEditorControl.getModifiedEditor();\n\t\t\t\t\tactiveControl = original.hasWidgetFocus() ? original : modified;\n\t\t\t\t}\n\n\t\t\t\tconst activeModel = activeControl?.getModel();\n\t\t\t\tconst activeSelection = activeControl?.getSelection();\n\t\t\t\tif (activeModel && activeSelection) {\n\t\t\t\t\treturn activeModel.getValueInRange(activeSelection);\n\t\t\t\t}\n\t\t\t\treturn undefined;\n\t\t\t},\n\t\t\tgetLineNumber: (): string | undefined => {\n\t\t\t\tconst activeTextEditorControl = editorService.activeTextEditorControl;\n\t\t\t\tif (isCodeEditor(activeTextEditorControl)) {\n\t\t\t\t\tconst selection = activeTextEditorControl.getSelection();\n\t\t\t\t\tif (selection) {\n\t\t\t\t\t\tconst lineNumber = selection.positionLineNumber;\n\t\t\t\t\t\treturn String(lineNumber);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn undefined;\n\t\t\t},\n\t\t\tgetExtension: id => {\n\t\t\t\treturn extensionService.getExtension(id);\n\t\t\t},\n\t\t}, labelService, pathService.userHome().then(home => home.path), envVariablesPromise);\n\t}\n\n\tpublic override async resolveWithInteractionReplace(folder: IWorkspaceFolder | undefined, config: any, section?: string, variables?: IStringDictionary<string>, target?: ConfigurationTarget): Promise<any> {\n\t\t// resolve any non-interactive variables and any contributed variables\n\t\tconfig = await this.resolveAnyAsync(folder, config);\n\n\t\t// resolve input variables in the order in which they are encountered\n\t\treturn this.resolveWithInteraction(folder, config, section, variables, target).then(mapping => {\n\t\t\t// finally substitute evaluated command variables (if there are any)\n\t\t\tif (!mapping) {\n\t\t\t\treturn null;\n\t\t\t} else if (mapping.size > 0) {\n\t\t\t\treturn this.resolveAnyAsync(folder, config, Object.fromEntries(mapping));\n\t\t\t} else {\n\t\t\t\treturn config;\n\t\t\t}\n\t\t});\n\t}\n\n\tpublic override async resolveWithInteraction(folder: IWorkspaceFolder | undefined, config: any, section?: string, variables?: IStringDictionary<string>, target?: ConfigurationTarget): Promise<Map<string, string> | undefined> {\n\t\t// resolve any non-interactive variables and any contributed variables\n\t\tconst resolved = await this.resolveAnyMap(folder, config);\n\t\tconfig = resolved.newConfig;\n\t\tconst allVariableMapping: Map<string, string> = resolved.resolvedVariables;\n\n\t\t// resolve input and command variables in the order in which they are encountered\n\t\treturn this.resolveWithInputAndCommands(folder, config, variables, section, target).then(inputOrCommandMapping => {\n\t\t\tif (this.updateMapping(inputOrCommandMapping, allVariableMapping)) {\n\t\t\t\treturn allVariableMapping;\n\t\t\t}\n\t\t\treturn undefined;\n\t\t});\n\t}\n\n\t/**\n\t * Add all items from newMapping to fullMapping. Returns false if newMapping is undefined.\n\t */\n\tprivate updateMapping(newMapping: IStringDictionary<string> | undefined, fullMapping: Map<string, string>): boolean {\n\t\tif (!newMapping) {\n\t\t\treturn false;\n\t\t}\n\t\tfor (const [key, value] of Object.entries(newMapping)) {\n\t\t\tfullMapping.set(key, value);\n\t\t}\n\t\treturn true;\n\t}\n\n\t/**\n\t * Finds and executes all input and command variables in the given configuration and returns their values as a dictionary.\n\t * Please note: this method does not substitute the input or command variables (so the configuration is not modified).\n\t * The returned dictionary can be passed to \"resolvePlatform\" for the actual substitution.\n\t * See #6569.\n\t *\n\t * @param variableToCommandMap Aliases for commands\n\t */\n\tprivate async resolveWithInputAndCommands(folder: IWorkspaceFolder | undefined, configuration: any, variableToCommandMap?: IStringDictionary<string>, section?: string, target?: ConfigurationTarget): Promise<IStringDictionary<string> | undefined> {\n\n\t\tif (!configuration) {\n\t\t\treturn Promise.resolve(undefined);\n\t\t}\n\n\t\t// get all \"inputs\"\n\t\tlet inputs: ConfiguredInput[] = [];\n\t\tif (this.workspaceContextService.getWorkbenchState() !== WorkbenchState.EMPTY && section) {\n\t\t\tconst overrides: IConfigurationOverrides = folder ? { resource: folder.uri } : {};\n\t\t\tconst result = this.configurationService.inspect(section, overrides);\n\t\t\tif (result && (result.userValue || result.workspaceValue || result.workspaceFolderValue)) {\n\t\t\t\tswitch (target) {\n\t\t\t\t\tcase ConfigurationTarget.USER: inputs = (<any>result.userValue)?.inputs; break;\n\t\t\t\t\tcase ConfigurationTarget.WORKSPACE: inputs = (<any>result.workspaceValue)?.inputs; break;\n\t\t\t\t\tdefault: inputs = (<any>result.workspaceFolderValue)?.inputs;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tconst valueResult = this.configurationService.getValue<any>(section, overrides);\n\t\t\t\tif (valueResult) {\n\t\t\t\t\tinputs = valueResult.inputs;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// extract and dedupe all \"input\" and \"command\" variables and preserve their order in an array\n\t\tconst variables: string[] = [];\n\t\tthis.findVariables(configuration, variables);\n\n\t\tconst variableValues: IStringDictionary<string> = Object.create(null);\n\n\t\tfor (const variable of variables) {\n\n\t\t\tconst [type, name] = variable.split(':', 2);\n\n\t\t\tlet result: string | undefined;\n\n\t\t\tswitch (type) {\n\n\t\t\t\tcase 'input':\n\t\t\t\t\tresult = await this.showUserInput(section, name, inputs);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'command': {\n\t\t\t\t\t// use the name as a command ID #12735\n\t\t\t\t\tconst commandId = (variableToCommandMap ? variableToCommandMap[name] : undefined) || name;\n\t\t\t\t\tresult = await this.commandService.executeCommand(commandId, configuration);\n\t\t\t\t\tif (typeof result !== 'string' && !Types.isUndefinedOrNull(result)) {\n\t\t\t\t\t\tthrow new Error(nls.localize('commandVariable.noStringType', \"Cannot substitute command variable '{0}' because command did not return a result of type string.\", commandId));\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tdefault:\n\t\t\t\t\t// Try to resolve it as a contributed variable\n\t\t\t\t\tif (this._contributedVariables.has(variable)) {\n\t\t\t\t\t\tresult = await this._contributedVariables.get(variable)!();\n\t\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (typeof result === 'string') {\n\t\t\t\tvariableValues[variable] = result;\n\t\t\t} else {\n\t\t\t\treturn undefined;\n\t\t\t}\n\t\t}\n\n\t\treturn variableValues;\n\t}\n\n\t/**\n\t * Recursively finds all command or input variables in object and pushes them into variables.\n\t * @param object object is searched for variables.\n\t * @param variables All found variables are returned in variables.\n\t */\n\tprivate findVariables(object: any, variables: string[]) {\n\t\tif (typeof object === 'string') {\n\t\t\tlet matches;\n\t\t\twhile ((matches = BaseConfigurationResolverService.INPUT_OR_COMMAND_VARIABLES_PATTERN.exec(object)) !== null) {\n\t\t\t\tif (matches.length === 4) {\n\t\t\t\t\tconst command = matches[1];\n\t\t\t\t\tif (variables.indexOf(command) < 0) {\n\t\t\t\t\t\tvariables.push(command);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tfor (const contributed of this._contributedVariables.keys()) {\n\t\t\t\tif ((variables.indexOf(contributed) < 0) && (object.indexOf('${' + contributed + '}') >= 0)) {\n\t\t\t\t\tvariables.push(contributed);\n\t\t\t\t}\n\t\t\t}\n\t\t} else if (Array.isArray(object)) {\n\t\t\tfor (const value of object) {\n\t\t\t\tthis.findVariables(value, variables);\n\n\t\t\t}\n\t\t} else if (object) {\n\t\t\tfor (const value of Object.values(object)) {\n\t\t\t\tthis.findVariables(value, variables);\n\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Takes the provided input info and shows the quick pick so the user can provide the value for the input\n\t * @param variable Name of the input variable.\n\t * @param inputInfos Information about each possible input variable.\n\t */\n\tprivate showUserInput(section: string | undefined, variable: string, inputInfos: ConfiguredInput[]): Promise<string | undefined> {\n\n\t\tif (!inputInfos) {\n\t\t\treturn Promise.reject(new Error(nls.localize('inputVariable.noInputSection', \"Variable '{0}' must be defined in an '{1}' section of the debug or task configuration.\", variable, 'inputs')));\n\t\t}\n\n\t\t// find info for the given input variable\n\t\tconst info = inputInfos.filter(item => item.id === variable).pop();\n\t\tif (info) {\n\n\t\t\tconst missingAttribute = (attrName: string) => {\n\t\t\t\tthrow new Error(nls.localize('inputVariable.missingAttribute', \"Input variable '{0}' is of type '{1}' and must include '{2}'.\", variable, info.type, attrName));\n\t\t\t};\n\n\t\t\tconst defaultValueMap = this.readInputLru();\n\t\t\tconst defaultValueKey = `${section}.${variable}`;\n\t\t\tconst previousPickedValue = defaultValueMap.get(defaultValueKey);\n\n\t\t\tswitch (info.type) {\n\n\t\t\t\tcase 'promptString': {\n\t\t\t\t\tif (!Types.isString(info.description)) {\n\t\t\t\t\t\tmissingAttribute('description');\n\t\t\t\t\t}\n\t\t\t\t\tconst inputOptions: IInputOptions = { prompt: info.description, ignoreFocusLost: true, value: previousPickedValue };\n\t\t\t\t\tif (info.default) {\n\t\t\t\t\t\tinputOptions.value = info.default;\n\t\t\t\t\t}\n\t\t\t\t\tif (info.password) {\n\t\t\t\t\t\tinputOptions.password = info.password;\n\t\t\t\t\t}\n\t\t\t\t\treturn this.userInputAccessQueue.queue(() => this.quickInputService.input(inputOptions)).then(resolvedInput => {\n\t\t\t\t\t\tif (typeof resolvedInput === 'string') {\n\t\t\t\t\t\t\tthis.storeInputLru(defaultValueMap.set(defaultValueKey, resolvedInput));\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn resolvedInput as string;\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\tcase 'pickString': {\n\t\t\t\t\tif (!Types.isString(info.description)) {\n\t\t\t\t\t\tmissingAttribute('description');\n\t\t\t\t\t}\n\t\t\t\t\tif (Array.isArray(info.options)) {\n\t\t\t\t\t\tfor (const pickOption of info.options) {\n\t\t\t\t\t\t\tif (!Types.isString(pickOption) && !Types.isString(pickOption.value)) {\n\t\t\t\t\t\t\t\tmissingAttribute('value');\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tmissingAttribute('options');\n\t\t\t\t\t}\n\t\t\t\t\tinterface PickStringItem extends IQuickPickItem {\n\t\t\t\t\t\tvalue: string;\n\t\t\t\t\t}\n\t\t\t\t\tconst picks = new Array<PickStringItem>();\n\t\t\t\t\tfor (const pickOption of info.options) {\n\t\t\t\t\t\tconst value = Types.isString(pickOption) ? pickOption : pickOption.value;\n\t\t\t\t\t\tconst label = Types.isString(pickOption) ? undefined : pickOption.label;\n\n\t\t\t\t\t\t// If there is no label defined, use value as label\n\t\t\t\t\t\tconst item: PickStringItem = {\n\t\t\t\t\t\t\tlabel: label ? `${label}: ${value}` : value,\n\t\t\t\t\t\t\tvalue: value\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\tif (value === info.default) {\n\t\t\t\t\t\t\titem.description = nls.localize('inputVariable.defaultInputValue', \"(Default)\");\n\t\t\t\t\t\t\tpicks.unshift(item);\n\t\t\t\t\t\t} else if (!info.default && value === previousPickedValue) {\n\t\t\t\t\t\t\tpicks.unshift(item);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tpicks.push(item);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tconst pickOptions: IPickOptions<PickStringItem> = { placeHolder: info.description, matchOnDetail: true, ignoreFocusLost: true };\n\t\t\t\t\treturn this.userInputAccessQueue.queue(() => this.quickInputService.pick(picks, pickOptions, undefined)).then(resolvedInput => {\n\t\t\t\t\t\tif (resolvedInput) {\n\t\t\t\t\t\t\tconst value = (resolvedInput as PickStringItem).value;\n\t\t\t\t\t\t\tthis.storeInputLru(defaultValueMap.set(defaultValueKey, value));\n\t\t\t\t\t\t\treturn value;\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn undefined;\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\tcase 'command': {\n\t\t\t\t\tif (!Types.isString(info.command)) {\n\t\t\t\t\t\tmissingAttribute('command');\n\t\t\t\t\t}\n\t\t\t\t\treturn this.userInputAccessQueue.queue(() => this.commandService.executeCommand<string>(info.command, info.args)).then(result => {\n\t\t\t\t\t\tif (typeof result === 'string' || Types.isUndefinedOrNull(result)) {\n\t\t\t\t\t\t\treturn result;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthrow new Error(nls.localize('inputVariable.command.noStringType', \"Cannot substitute input variable '{0}' because command '{1}' did not return a result of type string.\", variable, info.command));\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\tdefault:\n\t\t\t\t\tthrow new Error(nls.localize('inputVariable.unknownType', \"Input variable '{0}' can only be of type 'promptString', 'pickString', or 'command'.\", variable));\n\t\t\t}\n\t\t}\n\t\treturn Promise.reject(new Error(nls.localize('inputVariable.undefinedVariable', \"Undefined input variable '{0}' encountered. Remove or define '{0}' to continue.\", variable)));\n\t}\n\n\tprivate storeInputLru(lru: LRUCache<string, string>): void {\n\t\tthis.storageService.store(LAST_INPUT_STORAGE_KEY, JSON.stringify(lru.toJSON()), StorageScope.WORKSPACE, StorageTarget.MACHINE);\n\t}\n\n\tprivate readInputLru(): LRUCache<string, string> {\n\t\tconst contents = this.storageService.get(LAST_INPUT_STORAGE_KEY, StorageScope.WORKSPACE);\n\t\tconst lru = new LRUCache<string, string>(LAST_INPUT_CACHE_SIZE);\n\t\ttry {\n\t\t\tif (contents) {\n\t\t\t\tlru.fromJSON(JSON.parse(contents));\n\t\t\t}\n\t\t} catch {\n\t\t\t// ignored\n\t\t}\n\n\t\treturn lru;\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
