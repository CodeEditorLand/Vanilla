{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/configurationResolver/browser/baseConfigurationResolverService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { Queue } from \"../../../../base/common/async.js\";\nimport type { IStringDictionary } from \"../../../../base/common/collections.js\";\nimport { LRUCache } from \"../../../../base/common/map.js\";\nimport { Schemas } from \"../../../../base/common/network.js\";\nimport type { IProcessEnvironment } from \"../../../../base/common/platform.js\";\nimport * as Types from \"../../../../base/common/types.js\";\nimport type { URI as uri } from \"../../../../base/common/uri.js\";\nimport {\n\ttype ICodeEditor,\n\tisCodeEditor,\n\tisDiffEditor,\n} from \"../../../../editor/browser/editorBrowser.js\";\nimport * as nls from \"../../../../nls.js\";\nimport type { ICommandService } from \"../../../../platform/commands/common/commands.js\";\nimport {\n\tConfigurationTarget,\n\ttype IConfigurationOverrides,\n\ttype IConfigurationService,\n} from \"../../../../platform/configuration/common/configuration.js\";\nimport type { ILabelService } from \"../../../../platform/label/common/label.js\";\nimport type {\n\tIInputOptions,\n\tIPickOptions,\n\tIQuickInputService,\n\tIQuickPickItem,\n} from \"../../../../platform/quickinput/common/quickInput.js\";\nimport {\n\ttype IStorageService,\n\tStorageScope,\n\tStorageTarget,\n} from \"../../../../platform/storage/common/storage.js\";\nimport {\n\ttype IWorkspaceContextService,\n\ttype IWorkspaceFolder,\n\tWorkbenchState,\n} from \"../../../../platform/workspace/common/workspace.js\";\nimport {\n\tEditorResourceAccessor,\n\tSideBySideEditor,\n} from \"../../../common/editor.js\";\nimport type { IEditorService } from \"../../editor/common/editorService.js\";\nimport type { IExtensionService } from \"../../extensions/common/extensions.js\";\nimport type { IPathService } from \"../../path/common/pathService.js\";\nimport type { ConfiguredInput } from \"../common/configurationResolver.js\";\nimport { AbstractVariableResolverService } from \"../common/variableResolver.js\";\n\nconst LAST_INPUT_STORAGE_KEY = \"configResolveInputLru\";\nconst LAST_INPUT_CACHE_SIZE = 5;\n\nexport abstract class BaseConfigurationResolverService extends AbstractVariableResolverService {\n\tstatic readonly INPUT_OR_COMMAND_VARIABLES_PATTERN =\n\t\t/\\${((input|command):(.*?))}/g;\n\n\tprivate userInputAccessQueue = new Queue<\n\t\tstring | IQuickPickItem | undefined\n\t>();\n\n\tconstructor(\n\t\tcontext: {\n\t\t\tgetAppRoot: () => string | undefined;\n\t\t\tgetExecPath: () => string | undefined;\n\t\t},\n\t\tenvVariablesPromise: Promise<IProcessEnvironment>,\n\t\teditorService: IEditorService,\n\t\tprivate readonly configurationService: IConfigurationService,\n\t\tprivate readonly commandService: ICommandService,\n\t\tprivate readonly workspaceContextService: IWorkspaceContextService,\n\t\tprivate readonly quickInputService: IQuickInputService,\n\t\tprivate readonly labelService: ILabelService,\n\t\tprivate readonly pathService: IPathService,\n\t\textensionService: IExtensionService,\n\t\tprivate readonly storageService: IStorageService,\n\t) {\n\t\tsuper(\n\t\t\t{\n\t\t\t\tgetFolderUri: (folderName: string): uri | undefined => {\n\t\t\t\t\tconst folder = workspaceContextService\n\t\t\t\t\t\t.getWorkspace()\n\t\t\t\t\t\t.folders.filter((f) => f.name === folderName)\n\t\t\t\t\t\t.pop();\n\t\t\t\t\treturn folder ? folder.uri : undefined;\n\t\t\t\t},\n\t\t\t\tgetWorkspaceFolderCount: (): number => {\n\t\t\t\t\treturn workspaceContextService.getWorkspace().folders\n\t\t\t\t\t\t.length;\n\t\t\t\t},\n\t\t\t\tgetConfigurationValue: (\n\t\t\t\t\tfolderUri: uri | undefined,\n\t\t\t\t\tsuffix: string,\n\t\t\t\t): string | undefined => {\n\t\t\t\t\treturn configurationService.getValue<string>(\n\t\t\t\t\t\tsuffix,\n\t\t\t\t\t\tfolderUri ? { resource: folderUri } : {},\n\t\t\t\t\t);\n\t\t\t\t},\n\t\t\t\tgetAppRoot: (): string | undefined => {\n\t\t\t\t\treturn context.getAppRoot();\n\t\t\t\t},\n\t\t\t\tgetExecPath: (): string | undefined => {\n\t\t\t\t\treturn context.getExecPath();\n\t\t\t\t},\n\t\t\t\tgetFilePath: (): string | undefined => {\n\t\t\t\t\tconst fileResource = EditorResourceAccessor.getOriginalUri(\n\t\t\t\t\t\teditorService.activeEditor,\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tsupportSideBySide: SideBySideEditor.PRIMARY,\n\t\t\t\t\t\t\tfilterByScheme: [\n\t\t\t\t\t\t\t\tSchemas.file,\n\t\t\t\t\t\t\t\tSchemas.vscodeUserData,\n\t\t\t\t\t\t\t\tthis.pathService.defaultUriScheme,\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t},\n\t\t\t\t\t);\n\t\t\t\t\tif (!fileResource) {\n\t\t\t\t\t\treturn undefined;\n\t\t\t\t\t}\n\t\t\t\t\treturn this.labelService.getUriLabel(fileResource, {\n\t\t\t\t\t\tnoPrefix: true,\n\t\t\t\t\t});\n\t\t\t\t},\n\t\t\t\tgetWorkspaceFolderPathForFile: (): string | undefined => {\n\t\t\t\t\tconst fileResource = EditorResourceAccessor.getOriginalUri(\n\t\t\t\t\t\teditorService.activeEditor,\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tsupportSideBySide: SideBySideEditor.PRIMARY,\n\t\t\t\t\t\t\tfilterByScheme: [\n\t\t\t\t\t\t\t\tSchemas.file,\n\t\t\t\t\t\t\t\tSchemas.vscodeUserData,\n\t\t\t\t\t\t\t\tthis.pathService.defaultUriScheme,\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t},\n\t\t\t\t\t);\n\t\t\t\t\tif (!fileResource) {\n\t\t\t\t\t\treturn undefined;\n\t\t\t\t\t}\n\t\t\t\t\tconst wsFolder =\n\t\t\t\t\t\tworkspaceContextService.getWorkspaceFolder(\n\t\t\t\t\t\t\tfileResource,\n\t\t\t\t\t\t);\n\t\t\t\t\tif (!wsFolder) {\n\t\t\t\t\t\treturn undefined;\n\t\t\t\t\t}\n\t\t\t\t\treturn this.labelService.getUriLabel(wsFolder.uri, {\n\t\t\t\t\t\tnoPrefix: true,\n\t\t\t\t\t});\n\t\t\t\t},\n\t\t\t\tgetSelectedText: (): string | undefined => {\n\t\t\t\t\tconst activeTextEditorControl =\n\t\t\t\t\t\teditorService.activeTextEditorControl;\n\n\t\t\t\t\tlet activeControl: ICodeEditor | null = null;\n\n\t\t\t\t\tif (isCodeEditor(activeTextEditorControl)) {\n\t\t\t\t\t\tactiveControl = activeTextEditorControl;\n\t\t\t\t\t} else if (isDiffEditor(activeTextEditorControl)) {\n\t\t\t\t\t\tconst original =\n\t\t\t\t\t\t\tactiveTextEditorControl.getOriginalEditor();\n\t\t\t\t\t\tconst modified =\n\t\t\t\t\t\t\tactiveTextEditorControl.getModifiedEditor();\n\t\t\t\t\t\tactiveControl = original.hasWidgetFocus()\n\t\t\t\t\t\t\t? original\n\t\t\t\t\t\t\t: modified;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst activeModel = activeControl?.getModel();\n\t\t\t\t\tconst activeSelection = activeControl?.getSelection();\n\t\t\t\t\tif (activeModel && activeSelection) {\n\t\t\t\t\t\treturn activeModel.getValueInRange(activeSelection);\n\t\t\t\t\t}\n\t\t\t\t\treturn undefined;\n\t\t\t\t},\n\t\t\t\tgetLineNumber: (): string | undefined => {\n\t\t\t\t\tconst activeTextEditorControl =\n\t\t\t\t\t\teditorService.activeTextEditorControl;\n\t\t\t\t\tif (isCodeEditor(activeTextEditorControl)) {\n\t\t\t\t\t\tconst selection =\n\t\t\t\t\t\t\tactiveTextEditorControl.getSelection();\n\t\t\t\t\t\tif (selection) {\n\t\t\t\t\t\t\tconst lineNumber = selection.positionLineNumber;\n\t\t\t\t\t\t\treturn String(lineNumber);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\treturn undefined;\n\t\t\t\t},\n\t\t\t\tgetExtension: (id) => {\n\t\t\t\t\treturn extensionService.getExtension(id);\n\t\t\t\t},\n\t\t\t},\n\t\t\tlabelService,\n\t\t\tpathService.userHome().then((home) => home.path),\n\t\t\tenvVariablesPromise,\n\t\t);\n\t}\n\n\tpublic override async resolveWithInteractionReplace(\n\t\tfolder: IWorkspaceFolder | undefined,\n\t\tconfig: any,\n\t\tsection?: string,\n\t\tvariables?: IStringDictionary<string>,\n\t\ttarget?: ConfigurationTarget,\n\t): Promise<any> {\n\t\t// resolve any non-interactive variables and any contributed variables\n\t\tconfig = await this.resolveAnyAsync(folder, config);\n\n\t\t// resolve input variables in the order in which they are encountered\n\t\treturn this.resolveWithInteraction(\n\t\t\tfolder,\n\t\t\tconfig,\n\t\t\tsection,\n\t\t\tvariables,\n\t\t\ttarget,\n\t\t).then((mapping) => {\n\t\t\t// finally substitute evaluated command variables (if there are any)\n\t\t\tif (!mapping) {\n\t\t\t\treturn null;\n\t\t\t} else if (mapping.size > 0) {\n\t\t\t\treturn this.resolveAnyAsync(\n\t\t\t\t\tfolder,\n\t\t\t\t\tconfig,\n\t\t\t\t\tObject.fromEntries(mapping),\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\treturn config;\n\t\t\t}\n\t\t});\n\t}\n\n\tpublic override async resolveWithInteraction(\n\t\tfolder: IWorkspaceFolder | undefined,\n\t\tconfig: any,\n\t\tsection?: string,\n\t\tvariables?: IStringDictionary<string>,\n\t\ttarget?: ConfigurationTarget,\n\t): Promise<Map<string, string> | undefined> {\n\t\t// resolve any non-interactive variables and any contributed variables\n\t\tconst resolved = await this.resolveAnyMap(folder, config);\n\t\tconfig = resolved.newConfig;\n\t\tconst allVariableMapping: Map<string, string> =\n\t\t\tresolved.resolvedVariables;\n\n\t\t// resolve input and command variables in the order in which they are encountered\n\t\treturn this.resolveWithInputAndCommands(\n\t\t\tfolder,\n\t\t\tconfig,\n\t\t\tvariables,\n\t\t\tsection,\n\t\t\ttarget,\n\t\t).then((inputOrCommandMapping) => {\n\t\t\tif (this.updateMapping(inputOrCommandMapping, allVariableMapping)) {\n\t\t\t\treturn allVariableMapping;\n\t\t\t}\n\t\t\treturn undefined;\n\t\t});\n\t}\n\n\t/**\n\t * Add all items from newMapping to fullMapping. Returns false if newMapping is undefined.\n\t */\n\tprivate updateMapping(\n\t\tnewMapping: IStringDictionary<string> | undefined,\n\t\tfullMapping: Map<string, string>,\n\t): boolean {\n\t\tif (!newMapping) {\n\t\t\treturn false;\n\t\t}\n\t\tfor (const [key, value] of Object.entries(newMapping)) {\n\t\t\tfullMapping.set(key, value);\n\t\t}\n\t\treturn true;\n\t}\n\n\t/**\n\t * Finds and executes all input and command variables in the given configuration and returns their values as a dictionary.\n\t * Please note: this method does not substitute the input or command variables (so the configuration is not modified).\n\t * The returned dictionary can be passed to \"resolvePlatform\" for the actual substitution.\n\t * See #6569.\n\t *\n\t * @param variableToCommandMap Aliases for commands\n\t */\n\tprivate async resolveWithInputAndCommands(\n\t\tfolder: IWorkspaceFolder | undefined,\n\t\tconfiguration: any,\n\t\tvariableToCommandMap?: IStringDictionary<string>,\n\t\tsection?: string,\n\t\ttarget?: ConfigurationTarget,\n\t): Promise<IStringDictionary<string> | undefined> {\n\t\tif (!configuration) {\n\t\t\treturn Promise.resolve(undefined);\n\t\t}\n\n\t\t// get all \"inputs\"\n\t\tlet inputs: ConfiguredInput[] = [];\n\t\tif (\n\t\t\tthis.workspaceContextService.getWorkbenchState() !==\n\t\t\t\tWorkbenchState.EMPTY &&\n\t\t\tsection\n\t\t) {\n\t\t\tconst overrides: IConfigurationOverrides = folder\n\t\t\t\t? { resource: folder.uri }\n\t\t\t\t: {};\n\t\t\tconst result = this.configurationService.inspect(\n\t\t\t\tsection,\n\t\t\t\toverrides,\n\t\t\t);\n\t\t\tif (\n\t\t\t\tresult &&\n\t\t\t\t(result.userValue ||\n\t\t\t\t\tresult.workspaceValue ||\n\t\t\t\t\tresult.workspaceFolderValue)\n\t\t\t) {\n\t\t\t\tswitch (target) {\n\t\t\t\t\tcase ConfigurationTarget.USER:\n\t\t\t\t\t\tinputs = (<any>result.userValue)?.inputs;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase ConfigurationTarget.WORKSPACE:\n\t\t\t\t\t\tinputs = (<any>result.workspaceValue)?.inputs;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tinputs = (<any>result.workspaceFolderValue)?.inputs;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tconst valueResult = this.configurationService.getValue<any>(\n\t\t\t\t\tsection,\n\t\t\t\t\toverrides,\n\t\t\t\t);\n\t\t\t\tif (valueResult) {\n\t\t\t\t\tinputs = valueResult.inputs;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// extract and dedupe all \"input\" and \"command\" variables and preserve their order in an array\n\t\tconst variables: string[] = [];\n\t\tthis.findVariables(configuration, variables);\n\n\t\tconst variableValues: IStringDictionary<string> = Object.create(null);\n\n\t\tfor (const variable of variables) {\n\t\t\tconst [type, name] = variable.split(\":\", 2);\n\n\t\t\tlet result: string | undefined;\n\n\t\t\tswitch (type) {\n\t\t\t\tcase \"input\":\n\t\t\t\t\tresult = await this.showUserInput(section, name, inputs);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase \"command\": {\n\t\t\t\t\t// use the name as a command ID #12735\n\t\t\t\t\tconst commandId =\n\t\t\t\t\t\t(variableToCommandMap\n\t\t\t\t\t\t\t? variableToCommandMap[name]\n\t\t\t\t\t\t\t: undefined) || name;\n\t\t\t\t\tresult = await this.commandService.executeCommand(\n\t\t\t\t\t\tcommandId,\n\t\t\t\t\t\tconfiguration,\n\t\t\t\t\t);\n\t\t\t\t\tif (\n\t\t\t\t\t\ttypeof result !== \"string\" &&\n\t\t\t\t\t\t!Types.isUndefinedOrNull(result)\n\t\t\t\t\t) {\n\t\t\t\t\t\tthrow new Error(\n\t\t\t\t\t\t\tnls.localize(\n\t\t\t\t\t\t\t\t\"commandVariable.noStringType\",\n\t\t\t\t\t\t\t\t\"Cannot substitute command variable '{0}' because command did not return a result of type string.\",\n\t\t\t\t\t\t\t\tcommandId,\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tdefault:\n\t\t\t\t\t// Try to resolve it as a contributed variable\n\t\t\t\t\tif (this._contributedVariables.has(variable)) {\n\t\t\t\t\t\tresult =\n\t\t\t\t\t\t\tawait this._contributedVariables.get(variable)!();\n\t\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (typeof result === \"string\") {\n\t\t\t\tvariableValues[variable] = result;\n\t\t\t} else {\n\t\t\t\treturn undefined;\n\t\t\t}\n\t\t}\n\n\t\treturn variableValues;\n\t}\n\n\t/**\n\t * Recursively finds all command or input variables in object and pushes them into variables.\n\t * @param object object is searched for variables.\n\t * @param variables All found variables are returned in variables.\n\t */\n\tprivate findVariables(object: any, variables: string[]) {\n\t\tif (typeof object === \"string\") {\n\t\t\tlet matches;\n\t\t\twhile (\n\t\t\t\t(matches =\n\t\t\t\t\tBaseConfigurationResolverService.INPUT_OR_COMMAND_VARIABLES_PATTERN.exec(\n\t\t\t\t\t\tobject,\n\t\t\t\t\t)) !== null\n\t\t\t) {\n\t\t\t\tif (matches.length === 4) {\n\t\t\t\t\tconst command = matches[1];\n\t\t\t\t\tif (variables.indexOf(command) < 0) {\n\t\t\t\t\t\tvariables.push(command);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tfor (const contributed of this._contributedVariables.keys()) {\n\t\t\t\tif (\n\t\t\t\t\tvariables.indexOf(contributed) < 0 &&\n\t\t\t\t\tobject.indexOf(\"${\" + contributed + \"}\") >= 0\n\t\t\t\t) {\n\t\t\t\t\tvariables.push(contributed);\n\t\t\t\t}\n\t\t\t}\n\t\t} else if (Array.isArray(object)) {\n\t\t\tfor (const value of object) {\n\t\t\t\tthis.findVariables(value, variables);\n\t\t\t}\n\t\t} else if (object) {\n\t\t\tfor (const value of Object.values(object)) {\n\t\t\t\tthis.findVariables(value, variables);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Takes the provided input info and shows the quick pick so the user can provide the value for the input\n\t * @param variable Name of the input variable.\n\t * @param inputInfos Information about each possible input variable.\n\t */\n\tprivate showUserInput(\n\t\tsection: string | undefined,\n\t\tvariable: string,\n\t\tinputInfos: ConfiguredInput[],\n\t): Promise<string | undefined> {\n\t\tif (!inputInfos) {\n\t\t\treturn Promise.reject(\n\t\t\t\tnew Error(\n\t\t\t\t\tnls.localize(\n\t\t\t\t\t\t\"inputVariable.noInputSection\",\n\t\t\t\t\t\t\"Variable '{0}' must be defined in an '{1}' section of the debug or task configuration.\",\n\t\t\t\t\t\tvariable,\n\t\t\t\t\t\t\"inputs\",\n\t\t\t\t\t),\n\t\t\t\t),\n\t\t\t);\n\t\t}\n\n\t\t// find info for the given input variable\n\t\tconst info = inputInfos.filter((item) => item.id === variable).pop();\n\t\tif (info) {\n\t\t\tconst missingAttribute = (attrName: string) => {\n\t\t\t\tthrow new Error(\n\t\t\t\t\tnls.localize(\n\t\t\t\t\t\t\"inputVariable.missingAttribute\",\n\t\t\t\t\t\t\"Input variable '{0}' is of type '{1}' and must include '{2}'.\",\n\t\t\t\t\t\tvariable,\n\t\t\t\t\t\tinfo.type,\n\t\t\t\t\t\tattrName,\n\t\t\t\t\t),\n\t\t\t\t);\n\t\t\t};\n\n\t\t\tconst defaultValueMap = this.readInputLru();\n\t\t\tconst defaultValueKey = `${section}.${variable}`;\n\t\t\tconst previousPickedValue = defaultValueMap.get(defaultValueKey);\n\n\t\t\tswitch (info.type) {\n\t\t\t\tcase \"promptString\": {\n\t\t\t\t\tif (!Types.isString(info.description)) {\n\t\t\t\t\t\tmissingAttribute(\"description\");\n\t\t\t\t\t}\n\t\t\t\t\tconst inputOptions: IInputOptions = {\n\t\t\t\t\t\tprompt: info.description,\n\t\t\t\t\t\tignoreFocusLost: true,\n\t\t\t\t\t\tvalue: previousPickedValue,\n\t\t\t\t\t};\n\t\t\t\t\tif (info.default) {\n\t\t\t\t\t\tinputOptions.value = info.default;\n\t\t\t\t\t}\n\t\t\t\t\tif (info.password) {\n\t\t\t\t\t\tinputOptions.password = info.password;\n\t\t\t\t\t}\n\t\t\t\t\treturn this.userInputAccessQueue\n\t\t\t\t\t\t.queue(() => this.quickInputService.input(inputOptions))\n\t\t\t\t\t\t.then((resolvedInput) => {\n\t\t\t\t\t\t\tif (typeof resolvedInput === \"string\") {\n\t\t\t\t\t\t\t\tthis.storeInputLru(\n\t\t\t\t\t\t\t\t\tdefaultValueMap.set(\n\t\t\t\t\t\t\t\t\t\tdefaultValueKey,\n\t\t\t\t\t\t\t\t\t\tresolvedInput,\n\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\treturn resolvedInput as string;\n\t\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\tcase \"pickString\": {\n\t\t\t\t\tif (!Types.isString(info.description)) {\n\t\t\t\t\t\tmissingAttribute(\"description\");\n\t\t\t\t\t}\n\t\t\t\t\tif (Array.isArray(info.options)) {\n\t\t\t\t\t\tfor (const pickOption of info.options) {\n\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\t!Types.isString(pickOption) &&\n\t\t\t\t\t\t\t\t!Types.isString(pickOption.value)\n\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\tmissingAttribute(\"value\");\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tmissingAttribute(\"options\");\n\t\t\t\t\t}\n\t\t\t\t\tinterface PickStringItem extends IQuickPickItem {\n\t\t\t\t\t\tvalue: string;\n\t\t\t\t\t}\n\t\t\t\t\tconst picks = new Array<PickStringItem>();\n\t\t\t\t\tfor (const pickOption of info.options) {\n\t\t\t\t\t\tconst value = Types.isString(pickOption)\n\t\t\t\t\t\t\t? pickOption\n\t\t\t\t\t\t\t: pickOption.value;\n\t\t\t\t\t\tconst label = Types.isString(pickOption)\n\t\t\t\t\t\t\t? undefined\n\t\t\t\t\t\t\t: pickOption.label;\n\n\t\t\t\t\t\t// If there is no label defined, use value as label\n\t\t\t\t\t\tconst item: PickStringItem = {\n\t\t\t\t\t\t\tlabel: label ? `${label}: ${value}` : value,\n\t\t\t\t\t\t\tvalue: value,\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\tif (value === info.default) {\n\t\t\t\t\t\t\titem.description = nls.localize(\n\t\t\t\t\t\t\t\t\"inputVariable.defaultInputValue\",\n\t\t\t\t\t\t\t\t\"(Default)\",\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tpicks.unshift(item);\n\t\t\t\t\t\t} else if (\n\t\t\t\t\t\t\t!info.default &&\n\t\t\t\t\t\t\tvalue === previousPickedValue\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\tpicks.unshift(item);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tpicks.push(item);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tconst pickOptions: IPickOptions<PickStringItem> = {\n\t\t\t\t\t\tplaceHolder: info.description,\n\t\t\t\t\t\tmatchOnDetail: true,\n\t\t\t\t\t\tignoreFocusLost: true,\n\t\t\t\t\t};\n\t\t\t\t\treturn this.userInputAccessQueue\n\t\t\t\t\t\t.queue(() =>\n\t\t\t\t\t\t\tthis.quickInputService.pick(\n\t\t\t\t\t\t\t\tpicks,\n\t\t\t\t\t\t\t\tpickOptions,\n\t\t\t\t\t\t\t\tundefined,\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t)\n\t\t\t\t\t\t.then((resolvedInput) => {\n\t\t\t\t\t\t\tif (resolvedInput) {\n\t\t\t\t\t\t\t\tconst value = (resolvedInput as PickStringItem)\n\t\t\t\t\t\t\t\t\t.value;\n\t\t\t\t\t\t\t\tthis.storeInputLru(\n\t\t\t\t\t\t\t\t\tdefaultValueMap.set(defaultValueKey, value),\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\treturn value;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\treturn undefined;\n\t\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\tcase \"command\": {\n\t\t\t\t\tif (!Types.isString(info.command)) {\n\t\t\t\t\t\tmissingAttribute(\"command\");\n\t\t\t\t\t}\n\t\t\t\t\treturn this.userInputAccessQueue\n\t\t\t\t\t\t.queue(() =>\n\t\t\t\t\t\t\tthis.commandService.executeCommand<string>(\n\t\t\t\t\t\t\t\tinfo.command,\n\t\t\t\t\t\t\t\tinfo.args,\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t)\n\t\t\t\t\t\t.then((result) => {\n\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\ttypeof result === \"string\" ||\n\t\t\t\t\t\t\t\tTypes.isUndefinedOrNull(result)\n\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\treturn result;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tthrow new Error(\n\t\t\t\t\t\t\t\tnls.localize(\n\t\t\t\t\t\t\t\t\t\"inputVariable.command.noStringType\",\n\t\t\t\t\t\t\t\t\t\"Cannot substitute input variable '{0}' because command '{1}' did not return a result of type string.\",\n\t\t\t\t\t\t\t\t\tvariable,\n\t\t\t\t\t\t\t\t\tinfo.command,\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\tdefault:\n\t\t\t\t\tthrow new Error(\n\t\t\t\t\t\tnls.localize(\n\t\t\t\t\t\t\t\"inputVariable.unknownType\",\n\t\t\t\t\t\t\t\"Input variable '{0}' can only be of type 'promptString', 'pickString', or 'command'.\",\n\t\t\t\t\t\t\tvariable,\n\t\t\t\t\t\t),\n\t\t\t\t\t);\n\t\t\t}\n\t\t}\n\t\treturn Promise.reject(\n\t\t\tnew Error(\n\t\t\t\tnls.localize(\n\t\t\t\t\t\"inputVariable.undefinedVariable\",\n\t\t\t\t\t\"Undefined input variable '{0}' encountered. Remove or define '{0}' to continue.\",\n\t\t\t\t\tvariable,\n\t\t\t\t),\n\t\t\t),\n\t\t);\n\t}\n\n\tprivate storeInputLru(lru: LRUCache<string, string>): void {\n\t\tthis.storageService.store(\n\t\t\tLAST_INPUT_STORAGE_KEY,\n\t\t\tJSON.stringify(lru.toJSON()),\n\t\t\tStorageScope.WORKSPACE,\n\t\t\tStorageTarget.MACHINE,\n\t\t);\n\t}\n\n\tprivate readInputLru(): LRUCache<string, string> {\n\t\tconst contents = this.storageService.get(\n\t\t\tLAST_INPUT_STORAGE_KEY,\n\t\t\tStorageScope.WORKSPACE,\n\t\t);\n\t\tconst lru = new LRUCache<string, string>(LAST_INPUT_CACHE_SIZE);\n\t\ttry {\n\t\t\tif (contents) {\n\t\t\t\tlru.fromJSON(JSON.parse(contents));\n\t\t\t}\n\t\t} catch {\n\t\t\t// ignored\n\t\t}\n\n\t\treturn lru;\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
