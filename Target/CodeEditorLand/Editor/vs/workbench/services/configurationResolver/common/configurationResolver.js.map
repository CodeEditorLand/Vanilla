{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/configurationResolver/common/configurationResolver.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport type { IStringDictionary } from \"../../../../base/common/collections.js\";\nimport { ErrorNoTelemetry } from \"../../../../base/common/errors.js\";\nimport type { IProcessEnvironment } from \"../../../../base/common/platform.js\";\nimport type { ConfigurationTarget } from \"../../../../platform/configuration/common/configuration.js\";\nimport { createDecorator } from \"../../../../platform/instantiation/common/instantiation.js\";\nimport type { IWorkspaceFolder } from \"../../../../platform/workspace/common/workspace.js\";\n\nexport const IConfigurationResolverService =\n\tcreateDecorator<IConfigurationResolverService>(\n\t\t\"configurationResolverService\",\n\t);\n\nexport interface IConfigurationResolverService {\n\treadonly _serviceBrand: undefined;\n\n\tresolveWithEnvironment(\n\t\tenvironment: IProcessEnvironment,\n\t\tfolder: IWorkspaceFolder | undefined,\n\t\tvalue: string,\n\t): Promise<string>;\n\n\tresolveAsync(\n\t\tfolder: IWorkspaceFolder | undefined,\n\t\tvalue: string,\n\t): Promise<string>;\n\tresolveAsync(\n\t\tfolder: IWorkspaceFolder | undefined,\n\t\tvalue: string[],\n\t): Promise<string[]>;\n\tresolveAsync(\n\t\tfolder: IWorkspaceFolder | undefined,\n\t\tvalue: IStringDictionary<string>,\n\t): Promise<IStringDictionary<string>>;\n\n\t/**\n\t * Recursively resolves all variables in the given config and returns a copy of it with substituted values.\n\t * Command variables are only substituted if a \"commandValueMapping\" dictionary is given and if it contains an entry for the command.\n\t */\n\tresolveAnyAsync(\n\t\tfolder: IWorkspaceFolder | undefined,\n\t\tconfig: any,\n\t\tcommandValueMapping?: IStringDictionary<string>,\n\t): Promise<any>;\n\n\t/**\n\t * Recursively resolves all variables in the given config.\n\t * Returns a copy of it with substituted values and a map of variables and their resolution.\n\t * Keys in the map will be of the format input:variableName or command:variableName.\n\t */\n\tresolveAnyMap(\n\t\tfolder: IWorkspaceFolder | undefined,\n\t\tconfig: any,\n\t\tcommandValueMapping?: IStringDictionary<string>,\n\t): Promise<{ newConfig: any; resolvedVariables: Map<string, string> }>;\n\n\t/**\n\t * Recursively resolves all variables (including commands and user input) in the given config and returns a copy of it with substituted values.\n\t * If a \"variables\" dictionary (with names -> command ids) is given, command variables are first mapped through it before being resolved.\n\t *\n\t * @param section For example, 'tasks' or 'debug'. Used for resolving inputs.\n\t * @param variables Aliases for commands.\n\t */\n\tresolveWithInteractionReplace(\n\t\tfolder: IWorkspaceFolder | undefined,\n\t\tconfig: any,\n\t\tsection?: string,\n\t\tvariables?: IStringDictionary<string>,\n\t\ttarget?: ConfigurationTarget,\n\t): Promise<any>;\n\n\t/**\n\t * Similar to resolveWithInteractionReplace, except without the replace. Returns a map of variables and their resolution.\n\t * Keys in the map will be of the format input:variableName or command:variableName.\n\t */\n\tresolveWithInteraction(\n\t\tfolder: IWorkspaceFolder | undefined,\n\t\tconfig: any,\n\t\tsection?: string,\n\t\tvariables?: IStringDictionary<string>,\n\t\ttarget?: ConfigurationTarget,\n\t): Promise<Map<string, string> | undefined>;\n\n\t/**\n\t * Contributes a variable that can be resolved later. Consumers that use resolveAny, resolveWithInteraction,\n\t * and resolveWithInteractionReplace will have contributed variables resolved.\n\t */\n\tcontributeVariable(\n\t\tvariable: string,\n\t\tresolution: () => Promise<string | undefined>,\n\t): void;\n}\n\ninterface PromptStringInputInfo {\n\tid: string;\n\ttype: \"promptString\";\n\tdescription: string;\n\tdefault?: string;\n\tpassword?: boolean;\n}\n\ninterface PickStringInputInfo {\n\tid: string;\n\ttype: \"pickString\";\n\tdescription: string;\n\toptions: (string | { value: string; label?: string })[];\n\tdefault?: string;\n}\n\ninterface CommandInputInfo {\n\tid: string;\n\ttype: \"command\";\n\tcommand: string;\n\targs?: any;\n}\n\nexport type ConfiguredInput =\n\t| PromptStringInputInfo\n\t| PickStringInputInfo\n\t| CommandInputInfo;\n\nexport enum VariableKind {\n\tUnknown = \"unknown\",\n\n\tEnv = \"env\",\n\tConfig = \"config\",\n\tCommand = \"command\",\n\tInput = \"input\",\n\tExtensionInstallFolder = \"extensionInstallFolder\",\n\n\tWorkspaceFolder = \"workspaceFolder\",\n\tCwd = \"cwd\",\n\tWorkspaceFolderBasename = \"workspaceFolderBasename\",\n\tUserHome = \"userHome\",\n\tLineNumber = \"lineNumber\",\n\tSelectedText = \"selectedText\",\n\tFile = \"file\",\n\tFileWorkspaceFolder = \"fileWorkspaceFolder\",\n\tFileWorkspaceFolderBasename = \"fileWorkspaceFolderBasename\",\n\tRelativeFile = \"relativeFile\",\n\tRelativeFileDirname = \"relativeFileDirname\",\n\tFileDirname = \"fileDirname\",\n\tFileExtname = \"fileExtname\",\n\tFileBasename = \"fileBasename\",\n\tFileBasenameNoExtension = \"fileBasenameNoExtension\",\n\tFileDirnameBasename = \"fileDirnameBasename\",\n\tExecPath = \"execPath\",\n\tExecInstallFolder = \"execInstallFolder\",\n\tPathSeparator = \"pathSeparator\",\n\tPathSeparatorAlias = \"/\",\n}\n\nexport class VariableError extends ErrorNoTelemetry {\n\tconstructor(\n\t\tpublic readonly variable: VariableKind,\n\t\tmessage?: string,\n\t) {\n\t\tsuper(message);\n\t}\n}\n"],
  "mappings": ";;AAMA,SAAS,wBAAwB;AAGjC,SAAS,uBAAuB;AAGzB,MAAM,gCACZ;AAAA,EACC;AACD;AA8GM,IAAK,eAAL,kBAAKA,kBAAL;AACN,EAAAA,cAAA,aAAU;AAEV,EAAAA,cAAA,SAAM;AACN,EAAAA,cAAA,YAAS;AACT,EAAAA,cAAA,aAAU;AACV,EAAAA,cAAA,WAAQ;AACR,EAAAA,cAAA,4BAAyB;AAEzB,EAAAA,cAAA,qBAAkB;AAClB,EAAAA,cAAA,SAAM;AACN,EAAAA,cAAA,6BAA0B;AAC1B,EAAAA,cAAA,cAAW;AACX,EAAAA,cAAA,gBAAa;AACb,EAAAA,cAAA,kBAAe;AACf,EAAAA,cAAA,UAAO;AACP,EAAAA,cAAA,yBAAsB;AACtB,EAAAA,cAAA,iCAA8B;AAC9B,EAAAA,cAAA,kBAAe;AACf,EAAAA,cAAA,yBAAsB;AACtB,EAAAA,cAAA,iBAAc;AACd,EAAAA,cAAA,iBAAc;AACd,EAAAA,cAAA,kBAAe;AACf,EAAAA,cAAA,6BAA0B;AAC1B,EAAAA,cAAA,yBAAsB;AACtB,EAAAA,cAAA,cAAW;AACX,EAAAA,cAAA,uBAAoB;AACpB,EAAAA,cAAA,mBAAgB;AAChB,EAAAA,cAAA,wBAAqB;AA5BV,SAAAA;AAAA,GAAA;AA+BL,MAAM,sBAAsB,iBAAiB;AAAA,EACnD,YACiB,UAChB,SACC;AACD,UAAM,OAAO;AAHG;AAAA,EAIjB;AAAA,EAlKD,OA4JoD;AAAA;AAAA;AAOpD;",
  "names": ["VariableKind"]
}
