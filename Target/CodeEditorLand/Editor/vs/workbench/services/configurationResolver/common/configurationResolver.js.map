{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/configurationResolver/common/configurationResolver.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IStringDictionary } from '../../../../base/common/collections.js';\nimport { createDecorator } from '../../../../platform/instantiation/common/instantiation.js';\nimport { IWorkspaceFolder } from '../../../../platform/workspace/common/workspace.js';\nimport { ConfigurationTarget } from '../../../../platform/configuration/common/configuration.js';\nimport { IProcessEnvironment } from '../../../../base/common/platform.js';\nimport { ErrorNoTelemetry } from '../../../../base/common/errors.js';\n\nexport const IConfigurationResolverService = createDecorator<IConfigurationResolverService>('configurationResolverService');\n\nexport interface IConfigurationResolverService {\n\treadonly _serviceBrand: undefined;\n\n\tresolveWithEnvironment(environment: IProcessEnvironment, folder: IWorkspaceFolder | undefined, value: string): Promise<string>;\n\n\tresolveAsync(folder: IWorkspaceFolder | undefined, value: string): Promise<string>;\n\tresolveAsync(folder: IWorkspaceFolder | undefined, value: string[]): Promise<string[]>;\n\tresolveAsync(folder: IWorkspaceFolder | undefined, value: IStringDictionary<string>): Promise<IStringDictionary<string>>;\n\n\t/**\n\t * Recursively resolves all variables in the given config and returns a copy of it with substituted values.\n\t * Command variables are only substituted if a \"commandValueMapping\" dictionary is given and if it contains an entry for the command.\n\t */\n\tresolveAnyAsync(folder: IWorkspaceFolder | undefined, config: any, commandValueMapping?: IStringDictionary<string>): Promise<any>;\n\n\t/**\n\t * Recursively resolves all variables in the given config.\n\t * Returns a copy of it with substituted values and a map of variables and their resolution.\n\t * Keys in the map will be of the format input:variableName or command:variableName.\n\t */\n\tresolveAnyMap(folder: IWorkspaceFolder | undefined, config: any, commandValueMapping?: IStringDictionary<string>): Promise<{ newConfig: any; resolvedVariables: Map<string, string> }>;\n\n\t/**\n\t * Recursively resolves all variables (including commands and user input) in the given config and returns a copy of it with substituted values.\n\t * If a \"variables\" dictionary (with names -> command ids) is given, command variables are first mapped through it before being resolved.\n\t *\n\t * @param section For example, 'tasks' or 'debug'. Used for resolving inputs.\n\t * @param variables Aliases for commands.\n\t */\n\tresolveWithInteractionReplace(folder: IWorkspaceFolder | undefined, config: any, section?: string, variables?: IStringDictionary<string>, target?: ConfigurationTarget): Promise<any>;\n\n\t/**\n\t * Similar to resolveWithInteractionReplace, except without the replace. Returns a map of variables and their resolution.\n\t * Keys in the map will be of the format input:variableName or command:variableName.\n\t */\n\tresolveWithInteraction(folder: IWorkspaceFolder | undefined, config: any, section?: string, variables?: IStringDictionary<string>, target?: ConfigurationTarget): Promise<Map<string, string> | undefined>;\n\n\t/**\n\t * Contributes a variable that can be resolved later. Consumers that use resolveAny, resolveWithInteraction,\n\t * and resolveWithInteractionReplace will have contributed variables resolved.\n\t */\n\tcontributeVariable(variable: string, resolution: () => Promise<string | undefined>): void;\n}\n\ninterface PromptStringInputInfo {\n\tid: string;\n\ttype: 'promptString';\n\tdescription: string;\n\tdefault?: string;\n\tpassword?: boolean;\n}\n\ninterface PickStringInputInfo {\n\tid: string;\n\ttype: 'pickString';\n\tdescription: string;\n\toptions: (string | { value: string; label?: string })[];\n\tdefault?: string;\n}\n\ninterface CommandInputInfo {\n\tid: string;\n\ttype: 'command';\n\tcommand: string;\n\targs?: any;\n}\n\nexport type ConfiguredInput = PromptStringInputInfo | PickStringInputInfo | CommandInputInfo;\n\nexport enum VariableKind {\n\tUnknown = 'unknown',\n\n\tEnv = 'env',\n\tConfig = 'config',\n\tCommand = 'command',\n\tInput = 'input',\n\tExtensionInstallFolder = 'extensionInstallFolder',\n\n\tWorkspaceFolder = 'workspaceFolder',\n\tCwd = 'cwd',\n\tWorkspaceFolderBasename = 'workspaceFolderBasename',\n\tUserHome = 'userHome',\n\tLineNumber = 'lineNumber',\n\tSelectedText = 'selectedText',\n\tFile = 'file',\n\tFileWorkspaceFolder = 'fileWorkspaceFolder',\n\tFileWorkspaceFolderBasename = 'fileWorkspaceFolderBasename',\n\tRelativeFile = 'relativeFile',\n\tRelativeFileDirname = 'relativeFileDirname',\n\tFileDirname = 'fileDirname',\n\tFileExtname = 'fileExtname',\n\tFileBasename = 'fileBasename',\n\tFileBasenameNoExtension = 'fileBasenameNoExtension',\n\tFileDirnameBasename = 'fileDirnameBasename',\n\tExecPath = 'execPath',\n\tExecInstallFolder = 'execInstallFolder',\n\tPathSeparator = 'pathSeparator',\n\tPathSeparatorAlias = '/'\n}\n\nexport class VariableError extends ErrorNoTelemetry {\n\tconstructor(public readonly variable: VariableKind, message?: string) {\n\t\tsuper(message);\n\t}\n}\n"],
  "mappings": ";;AAKA,SAAS,yBAAyB;AAClC,SAAS,uBAAuB;AAChC,SAAS,wBAAwB;AACjC,SAAS,2BAA2B;AACpC,SAAS,2BAA2B;AACpC,SAAS,wBAAwB;AAE1B,MAAM,gCAAgC,gBAA+C,8BAA8B;AAuEnH,IAAK,eAAL,kBAAKA,kBAAL;AACN,EAAAA,cAAA,aAAU;AAEV,EAAAA,cAAA,SAAM;AACN,EAAAA,cAAA,YAAS;AACT,EAAAA,cAAA,aAAU;AACV,EAAAA,cAAA,WAAQ;AACR,EAAAA,cAAA,4BAAyB;AAEzB,EAAAA,cAAA,qBAAkB;AAClB,EAAAA,cAAA,SAAM;AACN,EAAAA,cAAA,6BAA0B;AAC1B,EAAAA,cAAA,cAAW;AACX,EAAAA,cAAA,gBAAa;AACb,EAAAA,cAAA,kBAAe;AACf,EAAAA,cAAA,UAAO;AACP,EAAAA,cAAA,yBAAsB;AACtB,EAAAA,cAAA,iCAA8B;AAC9B,EAAAA,cAAA,kBAAe;AACf,EAAAA,cAAA,yBAAsB;AACtB,EAAAA,cAAA,iBAAc;AACd,EAAAA,cAAA,iBAAc;AACd,EAAAA,cAAA,kBAAe;AACf,EAAAA,cAAA,6BAA0B;AAC1B,EAAAA,cAAA,yBAAsB;AACtB,EAAAA,cAAA,cAAW;AACX,EAAAA,cAAA,uBAAoB;AACpB,EAAAA,cAAA,mBAAgB;AAChB,EAAAA,cAAA,wBAAqB;AA5BV,SAAAA;AAAA,GAAA;AA+BL,MAAM,sBAAsB,iBAAiB;AAAA,EACnD,YAA4B,UAAwB,SAAkB;AACrE,UAAM,OAAO;AADc;AAAA,EAE5B;AAAA,EArHD,OAkHoD;AAAA;AAAA;AAIpD;",
  "names": ["VariableKind"]
}
