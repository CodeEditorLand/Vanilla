{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/configurationResolver/common/variableResolver.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport type { IStringDictionary } from \"../../../../base/common/collections.js\";\nimport { normalizeDriveLetter } from \"../../../../base/common/labels.js\";\nimport * as objects from \"../../../../base/common/objects.js\";\nimport * as paths from \"../../../../base/common/path.js\";\nimport {\n\ttype IProcessEnvironment,\n\tisLinux,\n\tisMacintosh,\n\tisWindows,\n} from \"../../../../base/common/platform.js\";\nimport * as process from \"../../../../base/common/process.js\";\nimport { replaceAsync } from \"../../../../base/common/strings.js\";\nimport * as types from \"../../../../base/common/types.js\";\nimport type { URI as uri } from \"../../../../base/common/uri.js\";\nimport { localize } from \"../../../../nls.js\";\nimport type { ILabelService } from \"../../../../platform/label/common/label.js\";\nimport type { IWorkspaceFolder } from \"../../../../platform/workspace/common/workspace.js\";\nimport {\n\ttype IConfigurationResolverService,\n\tVariableError,\n\tVariableKind,\n} from \"./configurationResolver.js\";\n\ninterface IVariableResolveContext {\n\tgetFolderUri(folderName: string): uri | undefined;\n\tgetWorkspaceFolderCount(): number;\n\tgetConfigurationValue(\n\t\tfolderUri: uri | undefined,\n\t\tsection: string,\n\t): string | undefined;\n\tgetAppRoot(): string | undefined;\n\tgetExecPath(): string | undefined;\n\tgetFilePath(): string | undefined;\n\tgetWorkspaceFolderPathForFile?(): string | undefined;\n\tgetSelectedText(): string | undefined;\n\tgetLineNumber(): string | undefined;\n\tgetExtension(\n\t\tid: string,\n\t): Promise<{ readonly extensionLocation: uri } | undefined>;\n}\n\ntype Environment = {\n\tenv: IProcessEnvironment | undefined;\n\tuserHome: string | undefined;\n};\n\nexport class AbstractVariableResolverService\n\timplements IConfigurationResolverService\n{\n\tstatic readonly VARIABLE_LHS = \"${\";\n\tstatic readonly VARIABLE_REGEXP = /\\$\\{(.*?)\\}/g;\n\n\tdeclare readonly _serviceBrand: undefined;\n\n\tprivate _context: IVariableResolveContext;\n\tprivate _labelService?: ILabelService;\n\tprivate _envVariablesPromise?: Promise<IProcessEnvironment>;\n\tprivate _userHomePromise?: Promise<string>;\n\tprotected _contributedVariables: Map<\n\t\tstring,\n\t\t() => Promise<string | undefined>\n\t> = new Map();\n\n\tconstructor(\n\t\t_context: IVariableResolveContext,\n\t\t_labelService?: ILabelService,\n\t\t_userHomePromise?: Promise<string>,\n\t\t_envVariablesPromise?: Promise<IProcessEnvironment>,\n\t) {\n\t\tthis._context = _context;\n\t\tthis._labelService = _labelService;\n\t\tthis._userHomePromise = _userHomePromise;\n\t\tif (_envVariablesPromise) {\n\t\t\tthis._envVariablesPromise = _envVariablesPromise.then(\n\t\t\t\t(envVariables) => {\n\t\t\t\t\treturn this.prepareEnv(envVariables);\n\t\t\t\t},\n\t\t\t);\n\t\t}\n\t}\n\n\tprivate prepareEnv(envVariables: IProcessEnvironment): IProcessEnvironment {\n\t\t// windows env variables are case insensitive\n\t\tif (isWindows) {\n\t\t\tconst ev: IProcessEnvironment = Object.create(null);\n\t\t\tObject.keys(envVariables).forEach((key) => {\n\t\t\t\tev[key.toLowerCase()] = envVariables[key];\n\t\t\t});\n\t\t\treturn ev;\n\t\t}\n\t\treturn envVariables;\n\t}\n\n\tpublic resolveWithEnvironment(\n\t\tenvironment: IProcessEnvironment,\n\t\troot: IWorkspaceFolder | undefined,\n\t\tvalue: string,\n\t): Promise<string> {\n\t\treturn this.recursiveResolve(\n\t\t\t{ env: this.prepareEnv(environment), userHome: undefined },\n\t\t\troot ? root.uri : undefined,\n\t\t\tvalue,\n\t\t);\n\t}\n\n\tpublic async resolveAsync(\n\t\troot: IWorkspaceFolder | undefined,\n\t\tvalue: string,\n\t): Promise<string>;\n\tpublic async resolveAsync(\n\t\troot: IWorkspaceFolder | undefined,\n\t\tvalue: string[],\n\t): Promise<string[]>;\n\tpublic async resolveAsync(\n\t\troot: IWorkspaceFolder | undefined,\n\t\tvalue: IStringDictionary<string>,\n\t): Promise<IStringDictionary<string>>;\n\tpublic async resolveAsync(\n\t\troot: IWorkspaceFolder | undefined,\n\t\tvalue: any,\n\t): Promise<any> {\n\t\tconst environment: Environment = {\n\t\t\tenv: await this._envVariablesPromise,\n\t\t\tuserHome: await this._userHomePromise,\n\t\t};\n\t\treturn this.recursiveResolve(\n\t\t\tenvironment,\n\t\t\troot ? root.uri : undefined,\n\t\t\tvalue,\n\t\t);\n\t}\n\n\tprivate async resolveAnyBase(\n\t\tworkspaceFolder: IWorkspaceFolder | undefined,\n\t\tconfig: any,\n\t\tcommandValueMapping?: IStringDictionary<string>,\n\t\tresolvedVariables?: Map<string, string>,\n\t): Promise<any> {\n\t\tconst result = objects.deepClone(config);\n\n\t\t// hoist platform specific attributes to top level\n\t\tif (isWindows && result.windows) {\n\t\t\tObject.keys(result.windows).forEach(\n\t\t\t\t(key) => (result[key] = result.windows[key]),\n\t\t\t);\n\t\t} else if (isMacintosh && result.osx) {\n\t\t\tObject.keys(result.osx).forEach(\n\t\t\t\t(key) => (result[key] = result.osx[key]),\n\t\t\t);\n\t\t} else if (isLinux && result.linux) {\n\t\t\tObject.keys(result.linux).forEach(\n\t\t\t\t(key) => (result[key] = result.linux[key]),\n\t\t\t);\n\t\t}\n\n\t\t// delete all platform specific sections\n\t\tdelete result.windows;\n\t\tdelete result.osx;\n\t\tdelete result.linux;\n\n\t\t// substitute all variables recursively in string values\n\t\tconst environmentPromises: Environment = {\n\t\t\tenv: await this._envVariablesPromise,\n\t\t\tuserHome: await this._userHomePromise,\n\t\t};\n\t\treturn this.recursiveResolve(\n\t\t\tenvironmentPromises,\n\t\t\tworkspaceFolder ? workspaceFolder.uri : undefined,\n\t\t\tresult,\n\t\t\tcommandValueMapping,\n\t\t\tresolvedVariables,\n\t\t);\n\t}\n\n\tpublic async resolveAnyAsync(\n\t\tworkspaceFolder: IWorkspaceFolder | undefined,\n\t\tconfig: any,\n\t\tcommandValueMapping?: IStringDictionary<string>,\n\t): Promise<any> {\n\t\treturn this.resolveAnyBase(\n\t\t\tworkspaceFolder,\n\t\t\tconfig,\n\t\t\tcommandValueMapping,\n\t\t);\n\t}\n\n\tpublic async resolveAnyMap(\n\t\tworkspaceFolder: IWorkspaceFolder | undefined,\n\t\tconfig: any,\n\t\tcommandValueMapping?: IStringDictionary<string>,\n\t): Promise<{ newConfig: any; resolvedVariables: Map<string, string> }> {\n\t\tconst resolvedVariables = new Map<string, string>();\n\t\tconst newConfig = await this.resolveAnyBase(\n\t\t\tworkspaceFolder,\n\t\t\tconfig,\n\t\t\tcommandValueMapping,\n\t\t\tresolvedVariables,\n\t\t);\n\t\treturn { newConfig, resolvedVariables };\n\t}\n\n\tpublic resolveWithInteractionReplace(\n\t\tfolder: IWorkspaceFolder | undefined,\n\t\tconfig: any,\n\t\tsection?: string,\n\t\tvariables?: IStringDictionary<string>,\n\t): Promise<any> {\n\t\tthrow new Error(\"resolveWithInteractionReplace not implemented.\");\n\t}\n\n\tpublic resolveWithInteraction(\n\t\tfolder: IWorkspaceFolder | undefined,\n\t\tconfig: any,\n\t\tsection?: string,\n\t\tvariables?: IStringDictionary<string>,\n\t): Promise<Map<string, string> | undefined> {\n\t\tthrow new Error(\"resolveWithInteraction not implemented.\");\n\t}\n\n\tpublic contributeVariable(\n\t\tvariable: string,\n\t\tresolution: () => Promise<string | undefined>,\n\t): void {\n\t\tif (this._contributedVariables.has(variable)) {\n\t\t\tthrow new Error(\"Variable \" + variable + \" is contributed twice.\");\n\t\t} else {\n\t\t\tthis._contributedVariables.set(variable, resolution);\n\t\t}\n\t}\n\n\tprivate async recursiveResolve(\n\t\tenvironment: Environment,\n\t\tfolderUri: uri | undefined,\n\t\tvalue: any,\n\t\tcommandValueMapping?: IStringDictionary<string>,\n\t\tresolvedVariables?: Map<string, string>,\n\t): Promise<any> {\n\t\tif (types.isString(value)) {\n\t\t\treturn this.resolveString(\n\t\t\t\tenvironment,\n\t\t\t\tfolderUri,\n\t\t\t\tvalue,\n\t\t\t\tcommandValueMapping,\n\t\t\t\tresolvedVariables,\n\t\t\t);\n\t\t} else if (Array.isArray(value)) {\n\t\t\treturn Promise.all(\n\t\t\t\tvalue.map((s) =>\n\t\t\t\t\tthis.recursiveResolve(\n\t\t\t\t\t\tenvironment,\n\t\t\t\t\t\tfolderUri,\n\t\t\t\t\t\ts,\n\t\t\t\t\t\tcommandValueMapping,\n\t\t\t\t\t\tresolvedVariables,\n\t\t\t\t\t),\n\t\t\t\t),\n\t\t\t);\n\t\t} else if (types.isObject(value)) {\n\t\t\tconst result: IStringDictionary<\n\t\t\t\tstring | IStringDictionary<string> | string[]\n\t\t\t> = Object.create(null);\n\t\t\tconst replaced = await Promise.all(\n\t\t\t\tObject.keys(value).map(async (key) => {\n\t\t\t\t\tconst replaced = await this.resolveString(\n\t\t\t\t\t\tenvironment,\n\t\t\t\t\t\tfolderUri,\n\t\t\t\t\t\tkey,\n\t\t\t\t\t\tcommandValueMapping,\n\t\t\t\t\t\tresolvedVariables,\n\t\t\t\t\t);\n\t\t\t\t\treturn [\n\t\t\t\t\t\treplaced,\n\t\t\t\t\t\tawait this.recursiveResolve(\n\t\t\t\t\t\t\tenvironment,\n\t\t\t\t\t\t\tfolderUri,\n\t\t\t\t\t\t\tvalue[key],\n\t\t\t\t\t\t\tcommandValueMapping,\n\t\t\t\t\t\t\tresolvedVariables,\n\t\t\t\t\t\t),\n\t\t\t\t\t] as const;\n\t\t\t\t}),\n\t\t\t);\n\t\t\t// two step process to preserve object key order\n\t\t\tfor (const [key, value] of replaced) {\n\t\t\t\tresult[key] = value;\n\t\t\t}\n\t\t\treturn result;\n\t\t}\n\t\treturn value;\n\t}\n\n\tprivate resolveString(\n\t\tenvironment: Environment,\n\t\tfolderUri: uri | undefined,\n\t\tvalue: string,\n\t\tcommandValueMapping: IStringDictionary<string> | undefined,\n\t\tresolvedVariables?: Map<string, string>,\n\t): Promise<string> {\n\t\t// loop through all variables occurrences in 'value'\n\t\treturn replaceAsync(\n\t\t\tvalue,\n\t\t\tAbstractVariableResolverService.VARIABLE_REGEXP,\n\t\t\tasync (match: string, variable: string) => {\n\t\t\t\t// disallow attempted nesting, see #77289. This doesn't exclude variables that resolve to other variables.\n\t\t\t\tif (\n\t\t\t\t\tvariable.includes(\n\t\t\t\t\t\tAbstractVariableResolverService.VARIABLE_LHS,\n\t\t\t\t\t)\n\t\t\t\t) {\n\t\t\t\t\treturn match;\n\t\t\t\t}\n\n\t\t\t\tlet resolvedValue = await this.evaluateSingleVariable(\n\t\t\t\t\tenvironment,\n\t\t\t\t\tmatch,\n\t\t\t\t\tvariable,\n\t\t\t\t\tfolderUri,\n\t\t\t\t\tcommandValueMapping,\n\t\t\t\t);\n\n\t\t\t\tresolvedVariables?.set(variable, resolvedValue);\n\n\t\t\t\tif (\n\t\t\t\t\tresolvedValue !== match &&\n\t\t\t\t\ttypes.isString(resolvedValue) &&\n\t\t\t\t\tresolvedValue.match(\n\t\t\t\t\t\tAbstractVariableResolverService.VARIABLE_REGEXP,\n\t\t\t\t\t)\n\t\t\t\t) {\n\t\t\t\t\tresolvedValue = await this.resolveString(\n\t\t\t\t\t\tenvironment,\n\t\t\t\t\t\tfolderUri,\n\t\t\t\t\t\tresolvedValue,\n\t\t\t\t\t\tcommandValueMapping,\n\t\t\t\t\t\tresolvedVariables,\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\treturn resolvedValue;\n\t\t\t},\n\t\t);\n\t}\n\n\tprivate fsPath(displayUri: uri): string {\n\t\treturn this._labelService\n\t\t\t? this._labelService.getUriLabel(displayUri, { noPrefix: true })\n\t\t\t: displayUri.fsPath;\n\t}\n\n\tprivate async evaluateSingleVariable(\n\t\tenvironment: Environment,\n\t\tmatch: string,\n\t\tvariable: string,\n\t\tfolderUri: uri | undefined,\n\t\tcommandValueMapping: IStringDictionary<string> | undefined,\n\t): Promise<string> {\n\t\t// try to separate variable arguments from variable name\n\t\tlet argument: string | undefined;\n\t\tconst parts = variable.split(\":\");\n\t\tif (parts.length > 1) {\n\t\t\tvariable = parts[0];\n\t\t\targument = parts[1];\n\t\t}\n\n\t\t// common error handling for all variables that require an open editor\n\t\tconst getFilePath = (variableKind: VariableKind): string => {\n\t\t\tconst filePath = this._context.getFilePath();\n\t\t\tif (filePath) {\n\t\t\t\treturn normalizeDriveLetter(filePath);\n\t\t\t}\n\t\t\tthrow new VariableError(\n\t\t\t\tvariableKind,\n\t\t\t\tlocalize(\n\t\t\t\t\t\"canNotResolveFile\",\n\t\t\t\t\t\"Variable {0} can not be resolved. Please open an editor.\",\n\t\t\t\t\tmatch,\n\t\t\t\t),\n\t\t\t);\n\t\t};\n\n\t\t// common error handling for all variables that require an open editor\n\t\tconst getFolderPathForFile = (variableKind: VariableKind): string => {\n\t\t\tconst filePath = getFilePath(variableKind); // throws error if no editor open\n\t\t\tif (this._context.getWorkspaceFolderPathForFile) {\n\t\t\t\tconst folderPath =\n\t\t\t\t\tthis._context.getWorkspaceFolderPathForFile();\n\t\t\t\tif (folderPath) {\n\t\t\t\t\treturn normalizeDriveLetter(folderPath);\n\t\t\t\t}\n\t\t\t}\n\t\t\tthrow new VariableError(\n\t\t\t\tvariableKind,\n\t\t\t\tlocalize(\n\t\t\t\t\t\"canNotResolveFolderForFile\",\n\t\t\t\t\t\"Variable {0}: can not find workspace folder of '{1}'.\",\n\t\t\t\t\tmatch,\n\t\t\t\t\tpaths.basename(filePath),\n\t\t\t\t),\n\t\t\t);\n\t\t};\n\n\t\t// common error handling for all variables that require an open folder and accept a folder name argument\n\t\tconst getFolderUri = (variableKind: VariableKind): uri => {\n\t\t\tif (argument) {\n\t\t\t\tconst folder = this._context.getFolderUri(argument);\n\t\t\t\tif (folder) {\n\t\t\t\t\treturn folder;\n\t\t\t\t}\n\t\t\t\tthrow new VariableError(\n\t\t\t\t\tvariableKind,\n\t\t\t\t\tlocalize(\n\t\t\t\t\t\t\"canNotFindFolder\",\n\t\t\t\t\t\t\"Variable {0} can not be resolved. No such folder '{1}'.\",\n\t\t\t\t\t\tmatch,\n\t\t\t\t\t\targument,\n\t\t\t\t\t),\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tif (folderUri) {\n\t\t\t\treturn folderUri;\n\t\t\t}\n\n\t\t\tif (this._context.getWorkspaceFolderCount() > 1) {\n\t\t\t\tthrow new VariableError(\n\t\t\t\t\tvariableKind,\n\t\t\t\t\tlocalize(\n\t\t\t\t\t\t\"canNotResolveWorkspaceFolderMultiRoot\",\n\t\t\t\t\t\t\"Variable {0} can not be resolved in a multi folder workspace. Scope this variable using ':' and a workspace folder name.\",\n\t\t\t\t\t\tmatch,\n\t\t\t\t\t),\n\t\t\t\t);\n\t\t\t}\n\t\t\tthrow new VariableError(\n\t\t\t\tvariableKind,\n\t\t\t\tlocalize(\n\t\t\t\t\t\"canNotResolveWorkspaceFolder\",\n\t\t\t\t\t\"Variable {0} can not be resolved. Please open a folder.\",\n\t\t\t\t\tmatch,\n\t\t\t\t),\n\t\t\t);\n\t\t};\n\n\t\tswitch (variable) {\n\t\t\tcase \"env\":\n\t\t\t\tif (argument) {\n\t\t\t\t\tif (environment.env) {\n\t\t\t\t\t\t// Depending on the source of the environment, on Windows, the values may all be lowercase.\n\t\t\t\t\t\tconst env =\n\t\t\t\t\t\t\tenvironment.env[\n\t\t\t\t\t\t\t\tisWindows ? argument.toLowerCase() : argument\n\t\t\t\t\t\t\t];\n\t\t\t\t\t\tif (types.isString(env)) {\n\t\t\t\t\t\t\treturn env;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t// For `env` we should do the same as a normal shell does - evaluates undefined envs to an empty string #46436\n\t\t\t\t\treturn \"\";\n\t\t\t\t}\n\t\t\t\tthrow new VariableError(\n\t\t\t\t\tVariableKind.Env,\n\t\t\t\t\tlocalize(\n\t\t\t\t\t\t\"missingEnvVarName\",\n\t\t\t\t\t\t\"Variable {0} can not be resolved because no environment variable name is given.\",\n\t\t\t\t\t\tmatch,\n\t\t\t\t\t),\n\t\t\t\t);\n\n\t\t\tcase \"config\":\n\t\t\t\tif (argument) {\n\t\t\t\t\tconst config = this._context.getConfigurationValue(\n\t\t\t\t\t\tfolderUri,\n\t\t\t\t\t\targument,\n\t\t\t\t\t);\n\t\t\t\t\tif (types.isUndefinedOrNull(config)) {\n\t\t\t\t\t\tthrow new VariableError(\n\t\t\t\t\t\t\tVariableKind.Config,\n\t\t\t\t\t\t\tlocalize(\n\t\t\t\t\t\t\t\t\"configNotFound\",\n\t\t\t\t\t\t\t\t\"Variable {0} can not be resolved because setting '{1}' not found.\",\n\t\t\t\t\t\t\t\tmatch,\n\t\t\t\t\t\t\t\targument,\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t\tif (types.isObject(config)) {\n\t\t\t\t\t\tthrow new VariableError(\n\t\t\t\t\t\t\tVariableKind.Config,\n\t\t\t\t\t\t\tlocalize(\n\t\t\t\t\t\t\t\t\"configNoString\",\n\t\t\t\t\t\t\t\t\"Variable {0} can not be resolved because '{1}' is a structured value.\",\n\t\t\t\t\t\t\t\tmatch,\n\t\t\t\t\t\t\t\targument,\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t\treturn config;\n\t\t\t\t}\n\t\t\t\tthrow new VariableError(\n\t\t\t\t\tVariableKind.Config,\n\t\t\t\t\tlocalize(\n\t\t\t\t\t\t\"missingConfigName\",\n\t\t\t\t\t\t\"Variable {0} can not be resolved because no settings name is given.\",\n\t\t\t\t\t\tmatch,\n\t\t\t\t\t),\n\t\t\t\t);\n\n\t\t\tcase \"command\":\n\t\t\t\treturn this.resolveFromMap(\n\t\t\t\t\tVariableKind.Command,\n\t\t\t\t\tmatch,\n\t\t\t\t\targument,\n\t\t\t\t\tcommandValueMapping,\n\t\t\t\t\t\"command\",\n\t\t\t\t);\n\n\t\t\tcase \"input\":\n\t\t\t\treturn this.resolveFromMap(\n\t\t\t\t\tVariableKind.Input,\n\t\t\t\t\tmatch,\n\t\t\t\t\targument,\n\t\t\t\t\tcommandValueMapping,\n\t\t\t\t\t\"input\",\n\t\t\t\t);\n\n\t\t\tcase \"extensionInstallFolder\":\n\t\t\t\tif (argument) {\n\t\t\t\t\tconst ext = await this._context.getExtension(argument);\n\t\t\t\t\tif (!ext) {\n\t\t\t\t\t\tthrow new VariableError(\n\t\t\t\t\t\t\tVariableKind.ExtensionInstallFolder,\n\t\t\t\t\t\t\tlocalize(\n\t\t\t\t\t\t\t\t\"extensionNotInstalled\",\n\t\t\t\t\t\t\t\t\"Variable {0} can not be resolved because the extension {1} is not installed.\",\n\t\t\t\t\t\t\t\tmatch,\n\t\t\t\t\t\t\t\targument,\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t\treturn this.fsPath(ext.extensionLocation);\n\t\t\t\t}\n\t\t\t\tthrow new VariableError(\n\t\t\t\t\tVariableKind.ExtensionInstallFolder,\n\t\t\t\t\tlocalize(\n\t\t\t\t\t\t\"missingExtensionName\",\n\t\t\t\t\t\t\"Variable {0} can not be resolved because no extension name is given.\",\n\t\t\t\t\t\tmatch,\n\t\t\t\t\t),\n\t\t\t\t);\n\n\t\t\tdefault: {\n\t\t\t\tswitch (variable) {\n\t\t\t\t\tcase \"workspaceRoot\":\n\t\t\t\t\tcase \"workspaceFolder\":\n\t\t\t\t\t\treturn normalizeDriveLetter(\n\t\t\t\t\t\t\tthis.fsPath(\n\t\t\t\t\t\t\t\tgetFolderUri(VariableKind.WorkspaceFolder),\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t);\n\n\t\t\t\t\tcase \"cwd\":\n\t\t\t\t\t\treturn folderUri || argument\n\t\t\t\t\t\t\t? normalizeDriveLetter(\n\t\t\t\t\t\t\t\t\tthis.fsPath(getFolderUri(VariableKind.Cwd)),\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t: process.cwd();\n\n\t\t\t\t\tcase \"workspaceRootFolderName\":\n\t\t\t\t\tcase \"workspaceFolderBasename\":\n\t\t\t\t\t\treturn normalizeDriveLetter(\n\t\t\t\t\t\t\tpaths.basename(\n\t\t\t\t\t\t\t\tthis.fsPath(\n\t\t\t\t\t\t\t\t\tgetFolderUri(\n\t\t\t\t\t\t\t\t\t\tVariableKind.WorkspaceFolderBasename,\n\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t);\n\n\t\t\t\t\tcase \"userHome\": {\n\t\t\t\t\t\tif (environment.userHome) {\n\t\t\t\t\t\t\treturn environment.userHome;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthrow new VariableError(\n\t\t\t\t\t\t\tVariableKind.UserHome,\n\t\t\t\t\t\t\tlocalize(\n\t\t\t\t\t\t\t\t\"canNotResolveUserHome\",\n\t\t\t\t\t\t\t\t\"Variable {0} can not be resolved. UserHome path is not defined\",\n\t\t\t\t\t\t\t\tmatch,\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\n\t\t\t\t\tcase \"lineNumber\": {\n\t\t\t\t\t\tconst lineNumber = this._context.getLineNumber();\n\t\t\t\t\t\tif (lineNumber) {\n\t\t\t\t\t\t\treturn lineNumber;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthrow new VariableError(\n\t\t\t\t\t\t\tVariableKind.LineNumber,\n\t\t\t\t\t\t\tlocalize(\n\t\t\t\t\t\t\t\t\"canNotResolveLineNumber\",\n\t\t\t\t\t\t\t\t\"Variable {0} can not be resolved. Make sure to have a line selected in the active editor.\",\n\t\t\t\t\t\t\t\tmatch,\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t\tcase \"selectedText\": {\n\t\t\t\t\t\tconst selectedText = this._context.getSelectedText();\n\t\t\t\t\t\tif (selectedText) {\n\t\t\t\t\t\t\treturn selectedText;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthrow new VariableError(\n\t\t\t\t\t\t\tVariableKind.SelectedText,\n\t\t\t\t\t\t\tlocalize(\n\t\t\t\t\t\t\t\t\"canNotResolveSelectedText\",\n\t\t\t\t\t\t\t\t\"Variable {0} can not be resolved. Make sure to have some text selected in the active editor.\",\n\t\t\t\t\t\t\t\tmatch,\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t\tcase \"file\":\n\t\t\t\t\t\treturn getFilePath(VariableKind.File);\n\n\t\t\t\t\tcase \"fileWorkspaceFolder\":\n\t\t\t\t\t\treturn getFolderPathForFile(\n\t\t\t\t\t\t\tVariableKind.FileWorkspaceFolder,\n\t\t\t\t\t\t);\n\n\t\t\t\t\tcase \"fileWorkspaceFolderBasename\":\n\t\t\t\t\t\treturn paths.basename(\n\t\t\t\t\t\t\tgetFolderPathForFile(\n\t\t\t\t\t\t\t\tVariableKind.FileWorkspaceFolderBasename,\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t);\n\n\t\t\t\t\tcase \"relativeFile\":\n\t\t\t\t\t\tif (folderUri || argument) {\n\t\t\t\t\t\t\treturn paths.relative(\n\t\t\t\t\t\t\t\tthis.fsPath(\n\t\t\t\t\t\t\t\t\tgetFolderUri(VariableKind.RelativeFile),\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\tgetFilePath(VariableKind.RelativeFile),\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn getFilePath(VariableKind.RelativeFile);\n\n\t\t\t\t\tcase \"relativeFileDirname\": {\n\t\t\t\t\t\tconst dirname = paths.dirname(\n\t\t\t\t\t\t\tgetFilePath(VariableKind.RelativeFileDirname),\n\t\t\t\t\t\t);\n\t\t\t\t\t\tif (folderUri || argument) {\n\t\t\t\t\t\t\tconst relative = paths.relative(\n\t\t\t\t\t\t\t\tthis.fsPath(\n\t\t\t\t\t\t\t\t\tgetFolderUri(\n\t\t\t\t\t\t\t\t\t\tVariableKind.RelativeFileDirname,\n\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\tdirname,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\treturn relative.length === 0 ? \".\" : relative;\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn dirname;\n\t\t\t\t\t}\n\t\t\t\t\tcase \"fileDirname\":\n\t\t\t\t\t\treturn paths.dirname(\n\t\t\t\t\t\t\tgetFilePath(VariableKind.FileDirname),\n\t\t\t\t\t\t);\n\n\t\t\t\t\tcase \"fileExtname\":\n\t\t\t\t\t\treturn paths.extname(\n\t\t\t\t\t\t\tgetFilePath(VariableKind.FileExtname),\n\t\t\t\t\t\t);\n\n\t\t\t\t\tcase \"fileBasename\":\n\t\t\t\t\t\treturn paths.basename(\n\t\t\t\t\t\t\tgetFilePath(VariableKind.FileBasename),\n\t\t\t\t\t\t);\n\n\t\t\t\t\tcase \"fileBasenameNoExtension\": {\n\t\t\t\t\t\tconst basename = paths.basename(\n\t\t\t\t\t\t\tgetFilePath(VariableKind.FileBasenameNoExtension),\n\t\t\t\t\t\t);\n\t\t\t\t\t\treturn basename.slice(\n\t\t\t\t\t\t\t0,\n\t\t\t\t\t\t\tbasename.length - paths.extname(basename).length,\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t\tcase \"fileDirnameBasename\":\n\t\t\t\t\t\treturn paths.basename(\n\t\t\t\t\t\t\tpaths.dirname(\n\t\t\t\t\t\t\t\tgetFilePath(VariableKind.FileDirnameBasename),\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t);\n\n\t\t\t\t\tcase \"execPath\": {\n\t\t\t\t\t\tconst ep = this._context.getExecPath();\n\t\t\t\t\t\tif (ep) {\n\t\t\t\t\t\t\treturn ep;\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn match;\n\t\t\t\t\t}\n\t\t\t\t\tcase \"execInstallFolder\": {\n\t\t\t\t\t\tconst ar = this._context.getAppRoot();\n\t\t\t\t\t\tif (ar) {\n\t\t\t\t\t\t\treturn ar;\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn match;\n\t\t\t\t\t}\n\t\t\t\t\tcase \"pathSeparator\":\n\t\t\t\t\tcase \"/\":\n\t\t\t\t\t\treturn paths.sep;\n\n\t\t\t\t\tdefault:\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tconst key = argument\n\t\t\t\t\t\t\t\t? `${variable}:${argument}`\n\t\t\t\t\t\t\t\t: variable;\n\t\t\t\t\t\t\treturn this.resolveFromMap(\n\t\t\t\t\t\t\t\tVariableKind.Unknown,\n\t\t\t\t\t\t\t\tmatch,\n\t\t\t\t\t\t\t\tkey,\n\t\t\t\t\t\t\t\tcommandValueMapping,\n\t\t\t\t\t\t\t\tundefined,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t} catch (error) {\n\t\t\t\t\t\t\treturn match;\n\t\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate resolveFromMap(\n\t\tvariableKind: VariableKind,\n\t\tmatch: string,\n\t\targument: string | undefined,\n\t\tcommandValueMapping: IStringDictionary<string> | undefined,\n\t\tprefix: string | undefined,\n\t): string {\n\t\tif (argument && commandValueMapping) {\n\t\t\tconst v =\n\t\t\t\tprefix === undefined\n\t\t\t\t\t? commandValueMapping[argument]\n\t\t\t\t\t: commandValueMapping[prefix + \":\" + argument];\n\t\t\tif (typeof v === \"string\") {\n\t\t\t\treturn v;\n\t\t\t}\n\t\t\tthrow new VariableError(\n\t\t\t\tvariableKind,\n\t\t\t\tlocalize(\n\t\t\t\t\t\"noValueForCommand\",\n\t\t\t\t\t\"Variable {0} can not be resolved because the command has no value.\",\n\t\t\t\t\tmatch,\n\t\t\t\t),\n\t\t\t);\n\t\t}\n\t\treturn match;\n\t}\n}\n"],
  "mappings": "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",
  "names": ["replaced", "value"]
}
