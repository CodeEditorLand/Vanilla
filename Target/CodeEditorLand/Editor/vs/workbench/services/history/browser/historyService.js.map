{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/history/browser/historyService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport {\n\tEventHelper,\n\tEventType,\n\tWindowIdleValue,\n\taddDisposableListener,\n} from \"../../../../base/browser/dom.js\";\nimport { mainWindow } from \"../../../../base/browser/window.js\";\nimport { coalesce, remove } from \"../../../../base/common/arrays.js\";\nimport { onUnexpectedError } from \"../../../../base/common/errors.js\";\nimport { Emitter, Event } from \"../../../../base/common/event.js\";\nimport {\n\tDisposable,\n\tDisposableStore,\n\ttype IDisposable,\n\tdispose,\n} from \"../../../../base/common/lifecycle.js\";\nimport { Schemas } from \"../../../../base/common/network.js\";\nimport { URI } from \"../../../../base/common/uri.js\";\nimport { localize } from \"../../../../nls.js\";\nimport { IConfigurationService } from \"../../../../platform/configuration/common/configuration.js\";\nimport {\n\tIContextKeyService,\n\tRawContextKey,\n} from \"../../../../platform/contextkey/common/contextkey.js\";\nimport type {\n\tIEditorOptions,\n\tIResourceEditorInput,\n} from \"../../../../platform/editor/common/editor.js\";\nimport {\n\tFILES_EXCLUDE_CONFIG,\n\tFileChangeType,\n\tFileChangesEvent,\n\tFileOperation,\n\tFileOperationEvent,\n\tIFileService,\n} from \"../../../../platform/files/common/files.js\";\nimport {\n\tInstantiationType,\n\tregisterSingleton,\n} from \"../../../../platform/instantiation/common/extensions.js\";\nimport { IInstantiationService } from \"../../../../platform/instantiation/common/instantiation.js\";\nimport { ILogService, LogLevel } from \"../../../../platform/log/common/log.js\";\nimport {\n\tIStorageService,\n\tStorageScope,\n\tStorageTarget,\n} from \"../../../../platform/storage/common/storage.js\";\nimport { IUriIdentityService } from \"../../../../platform/uriIdentity/common/uriIdentity.js\";\nimport { IWorkspaceContextService } from \"../../../../platform/workspace/common/workspace.js\";\nimport { IWorkspacesService } from \"../../../../platform/workspaces/common/workspaces.js\";\nimport type { EditorServiceImpl } from \"../../../browser/parts/editor/editor.js\";\nimport {\n\tEditorCloseContext,\n\tEditorPaneSelectionChangeReason,\n\tEditorPaneSelectionCompareResult,\n\tEditorResourceAccessor,\n\tEditorsOrder,\n\ttype GroupIdentifier,\n\tGroupModelChangeKind,\n\ttype IEditorCloseEvent,\n\ttype IEditorIdentifier,\n\ttype IEditorPane,\n\ttype IEditorPaneSelection,\n\ttype IEditorPaneSelectionChangeEvent,\n\ttype IEditorPaneWithSelection,\n\ttype IEditorWillMoveEvent,\n\ttype IUntypedEditorInput,\n\tSideBySideEditor,\n\tisEditorInput,\n\tisEditorPaneWithSelection,\n\tisResourceEditorInput,\n\tisSideBySideEditorInput,\n} from \"../../../common/editor.js\";\nimport type { EditorInput } from \"../../../common/editor/editorInput.js\";\nimport { ResourceGlobMatcher } from \"../../../common/resources.js\";\nimport {\n\ttype IEditorGroup,\n\tIEditorGroupsService,\n} from \"../../editor/common/editorGroupsService.js\";\nimport { IEditorService } from \"../../editor/common/editorService.js\";\nimport { IWorkbenchLayoutService } from \"../../layout/browser/layoutService.js\";\nimport {\n\tILifecycleService,\n\tLifecyclePhase,\n} from \"../../lifecycle/common/lifecycle.js\";\nimport { IPathService } from \"../../path/common/pathService.js\";\nimport {\n\ttype ISearchConfiguration,\n\tSEARCH_EXCLUDE_CONFIG,\n\tgetExcludes,\n} from \"../../search/common/search.js\";\nimport { GoFilter, GoScope, IHistoryService } from \"../common/history.js\";\n\ninterface ISerializedEditorHistoryEntry {\n\treadonly editor: Omit<IResourceEditorInput, \"resource\"> & {\n\t\tresource: string;\n\t};\n}\n\ninterface IRecentlyClosedEditor {\n\treadonly editorId: string | undefined;\n\treadonly editor: IUntypedEditorInput;\n\n\treadonly resource: URI | undefined;\n\treadonly associatedResources: URI[];\n\n\treadonly index: number;\n\treadonly sticky: boolean;\n}\n\nexport class HistoryService extends Disposable implements IHistoryService {\n\tdeclare readonly _serviceBrand: undefined;\n\n\tprivate static readonly MOUSE_NAVIGATION_SETTING =\n\t\t\"workbench.editor.mouseBackForwardToNavigate\";\n\tprivate static readonly NAVIGATION_SCOPE_SETTING =\n\t\t\"workbench.editor.navigationScope\";\n\n\tprivate readonly activeEditorListeners = this._register(\n\t\tnew DisposableStore(),\n\t);\n\tprivate lastActiveEditor: IEditorIdentifier | undefined = undefined;\n\n\tprivate readonly editorHelper =\n\t\tthis.instantiationService.createInstance(EditorHelper);\n\n\tconstructor(\n\t\t@IEditorService private readonly editorService: EditorServiceImpl,\n\t\t@IEditorGroupsService\n\t\tprivate readonly editorGroupService: IEditorGroupsService,\n\t\t@IWorkspaceContextService\n\t\tprivate readonly contextService: IWorkspaceContextService,\n\t\t@IStorageService private readonly storageService: IStorageService,\n\t\t@IConfigurationService\n\t\tprivate readonly configurationService: IConfigurationService,\n\t\t@IFileService private readonly fileService: IFileService,\n\t\t@IWorkspacesService\n\t\tprivate readonly workspacesService: IWorkspacesService,\n\t\t@IInstantiationService\n\t\tprivate readonly instantiationService: IInstantiationService,\n\t\t@IWorkbenchLayoutService\n\t\tprivate readonly layoutService: IWorkbenchLayoutService,\n\t\t@IContextKeyService\n\t\tprivate readonly contextKeyService: IContextKeyService,\n\t\t@ILogService private readonly logService: ILogService,\n\t) {\n\t\tsuper();\n\n\t\tthis.registerListeners();\n\n\t\t// if the service is created late enough that an editor is already opened\n\t\t// make sure to trigger the onActiveEditorChanged() to track the editor\n\t\t// properly (fixes https://github.com/microsoft/vscode/issues/59908)\n\t\tif (this.editorService.activeEditorPane) {\n\t\t\tthis.onDidActiveEditorChange();\n\t\t}\n\t}\n\n\tprivate registerListeners(): void {\n\t\t// Mouse back/forward support\n\t\tthis.registerMouseNavigationListener();\n\n\t\t// Editor changes\n\t\tthis._register(\n\t\t\tthis.editorService.onDidActiveEditorChange(() =>\n\t\t\t\tthis.onDidActiveEditorChange(),\n\t\t\t),\n\t\t);\n\t\tthis._register(\n\t\t\tthis.editorService.onDidOpenEditorFail((event) =>\n\t\t\t\tthis.remove(event.editor),\n\t\t\t),\n\t\t);\n\t\tthis._register(\n\t\t\tthis.editorService.onDidCloseEditor((event) =>\n\t\t\t\tthis.onDidCloseEditor(event),\n\t\t\t),\n\t\t);\n\t\tthis._register(\n\t\t\tthis.editorService.onDidMostRecentlyActiveEditorsChange(() =>\n\t\t\t\tthis.handleEditorEventInRecentEditorsStack(),\n\t\t\t),\n\t\t);\n\n\t\t// Editor group changes\n\t\tthis._register(\n\t\t\tthis.editorGroupService.onDidRemoveGroup((e) =>\n\t\t\t\tthis.onDidRemoveGroup(e),\n\t\t\t),\n\t\t);\n\n\t\t// File changes\n\t\tthis._register(\n\t\t\tthis.fileService.onDidFilesChange((event) =>\n\t\t\t\tthis.onDidFilesChange(event),\n\t\t\t),\n\t\t);\n\t\tthis._register(\n\t\t\tthis.fileService.onDidRunOperation((event) =>\n\t\t\t\tthis.onDidFilesChange(event),\n\t\t\t),\n\t\t);\n\n\t\t// Storage\n\t\tthis._register(\n\t\t\tthis.storageService.onWillSaveState(() => this.saveState()),\n\t\t);\n\n\t\t// Configuration\n\t\tthis.registerEditorNavigationScopeChangeListener();\n\n\t\t// Context keys\n\t\tthis._register(\n\t\t\tthis.onDidChangeEditorNavigationStack(() =>\n\t\t\t\tthis.updateContextKeys(),\n\t\t\t),\n\t\t);\n\t\tthis._register(\n\t\t\tthis.editorGroupService.onDidChangeActiveGroup(() =>\n\t\t\t\tthis.updateContextKeys(),\n\t\t\t),\n\t\t);\n\t}\n\n\tprivate onDidCloseEditor(e: IEditorCloseEvent): void {\n\t\tthis.handleEditorCloseEventInHistory(e);\n\t\tthis.handleEditorCloseEventInReopen(e);\n\t}\n\n\tprivate registerMouseNavigationListener(): void {\n\t\tconst mouseBackForwardSupportListener = this._register(\n\t\t\tnew DisposableStore(),\n\t\t);\n\t\tconst handleMouseBackForwardSupport = () => {\n\t\t\tmouseBackForwardSupportListener.clear();\n\n\t\t\tif (\n\t\t\t\tthis.configurationService.getValue(\n\t\t\t\t\tHistoryService.MOUSE_NAVIGATION_SETTING,\n\t\t\t\t)\n\t\t\t) {\n\t\t\t\tthis._register(\n\t\t\t\t\tEvent.runAndSubscribe(\n\t\t\t\t\t\tthis.layoutService.onDidAddContainer,\n\t\t\t\t\t\t({ container, disposables }) => {\n\t\t\t\t\t\t\tconst eventDisposables = disposables.add(\n\t\t\t\t\t\t\t\tnew DisposableStore(),\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\teventDisposables.add(\n\t\t\t\t\t\t\t\taddDisposableListener(\n\t\t\t\t\t\t\t\t\tcontainer,\n\t\t\t\t\t\t\t\t\tEventType.MOUSE_DOWN,\n\t\t\t\t\t\t\t\t\t(e) => this.onMouseDownOrUp(e, true),\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\teventDisposables.add(\n\t\t\t\t\t\t\t\taddDisposableListener(\n\t\t\t\t\t\t\t\t\tcontainer,\n\t\t\t\t\t\t\t\t\tEventType.MOUSE_UP,\n\t\t\t\t\t\t\t\t\t(e) => this.onMouseDownOrUp(e, false),\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\tmouseBackForwardSupportListener.add(\n\t\t\t\t\t\t\t\teventDisposables,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tcontainer: this.layoutService.mainContainer,\n\t\t\t\t\t\t\tdisposables: this._store,\n\t\t\t\t\t\t},\n\t\t\t\t\t),\n\t\t\t\t);\n\t\t\t}\n\t\t};\n\n\t\tthis._register(\n\t\t\tthis.configurationService.onDidChangeConfiguration((event) => {\n\t\t\t\tif (\n\t\t\t\t\tevent.affectsConfiguration(\n\t\t\t\t\t\tHistoryService.MOUSE_NAVIGATION_SETTING,\n\t\t\t\t\t)\n\t\t\t\t) {\n\t\t\t\t\thandleMouseBackForwardSupport();\n\t\t\t\t}\n\t\t\t}),\n\t\t);\n\n\t\thandleMouseBackForwardSupport();\n\t}\n\n\tprivate onMouseDownOrUp(event: MouseEvent, isMouseDown: boolean): void {\n\t\t// Support to navigate in history when mouse buttons 4/5 are pressed\n\t\t// We want to trigger this on mouse down for a faster experience\n\t\t// but we also need to prevent mouse up from triggering the default\n\t\t// which is to navigate in the browser history.\n\n\t\tswitch (event.button) {\n\t\t\tcase 3:\n\t\t\t\tEventHelper.stop(event);\n\t\t\t\tif (isMouseDown) {\n\t\t\t\t\tthis.goBack();\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 4:\n\t\t\t\tEventHelper.stop(event);\n\t\t\t\tif (isMouseDown) {\n\t\t\t\t\tthis.goForward();\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\t\t}\n\t}\n\n\tprivate onDidRemoveGroup(group: IEditorGroup): void {\n\t\tthis.handleEditorGroupRemoveInNavigationStacks(group);\n\t}\n\n\tprivate onDidActiveEditorChange(): void {\n\t\tconst activeEditorGroup = this.editorGroupService.activeGroup;\n\t\tconst activeEditorPane = activeEditorGroup.activeEditorPane;\n\n\t\tif (\n\t\t\tthis.lastActiveEditor &&\n\t\t\tthis.editorHelper.matchesEditorIdentifier(\n\t\t\t\tthis.lastActiveEditor,\n\t\t\t\tactiveEditorPane,\n\t\t\t)\n\t\t) {\n\t\t\treturn; // return if the active editor is still the same\n\t\t}\n\n\t\t// Remember as last active editor (can be undefined if none opened)\n\t\tthis.lastActiveEditor = activeEditorPane?.input\n\t\t\t? {\n\t\t\t\t\teditor: activeEditorPane.input,\n\t\t\t\t\tgroupId: activeEditorPane.group.id,\n\t\t\t\t}\n\t\t\t: undefined;\n\n\t\t// Dispose old listeners\n\t\tthis.activeEditorListeners.clear();\n\n\t\t// Handle editor change unless the editor is transient. In that case\n\t\t// setup a listener to see if the transient editor becomes non-transient\n\t\t// (https://github.com/microsoft/vscode/issues/211769)\n\t\tif (activeEditorPane?.group.isTransient(activeEditorPane.input)) {\n\t\t\tthis.logService.trace(\n\t\t\t\t`[History]: ignoring transient editor change until becoming non-transient (editor: ${activeEditorPane.input?.resource?.toString()}})`,\n\t\t\t);\n\n\t\t\tconst transientListener = activeEditorGroup.onDidModelChange(\n\t\t\t\t(e) => {\n\t\t\t\t\tif (\n\t\t\t\t\t\te.kind === GroupModelChangeKind.EDITOR_TRANSIENT &&\n\t\t\t\t\t\te.editor === activeEditorPane.input &&\n\t\t\t\t\t\t!activeEditorPane.group.isTransient(\n\t\t\t\t\t\t\tactiveEditorPane.input,\n\t\t\t\t\t\t)\n\t\t\t\t\t) {\n\t\t\t\t\t\ttransientListener.dispose();\n\n\t\t\t\t\t\tthis.handleActiveEditorChange(\n\t\t\t\t\t\t\tactiveEditorGroup,\n\t\t\t\t\t\t\tactiveEditorPane,\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t);\n\n\t\t\tthis.activeEditorListeners.add(transientListener);\n\t\t} else {\n\t\t\tthis.handleActiveEditorChange(activeEditorGroup, activeEditorPane);\n\t\t}\n\n\t\t// Listen to selection changes unless the editor is transient\n\t\tif (isEditorPaneWithSelection(activeEditorPane)) {\n\t\t\tthis.activeEditorListeners.add(\n\t\t\t\tactiveEditorPane.onDidChangeSelection((e) => {\n\t\t\t\t\tif (\n\t\t\t\t\t\tactiveEditorPane.group.isTransient(\n\t\t\t\t\t\t\tactiveEditorPane.input,\n\t\t\t\t\t\t)\n\t\t\t\t\t) {\n\t\t\t\t\t\tthis.logService.trace(\n\t\t\t\t\t\t\t`[History]: ignoring transient editor selection change (editor: ${activeEditorPane.input?.resource?.toString()}})`,\n\t\t\t\t\t\t);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis.handleActiveEditorSelectionChangeEvent(\n\t\t\t\t\t\t\tactiveEditorGroup,\n\t\t\t\t\t\t\tactiveEditorPane,\n\t\t\t\t\t\t\te,\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t}),\n\t\t\t);\n\t\t}\n\n\t\t// Context keys\n\t\tthis.updateContextKeys();\n\t}\n\n\tprivate onDidFilesChange(\n\t\tevent: FileChangesEvent | FileOperationEvent,\n\t): void {\n\t\t// External file changes (watcher)\n\t\tif (event instanceof FileChangesEvent) {\n\t\t\tif (event.gotDeleted()) {\n\t\t\t\tthis.remove(event);\n\t\t\t}\n\t\t}\n\n\t\t// Internal file changes (e.g. explorer)\n\t\telse {\n\t\t\t// Delete\n\t\t\tif (event.isOperation(FileOperation.DELETE)) {\n\t\t\t\tthis.remove(event);\n\t\t\t}\n\n\t\t\t// Move\n\t\t\telse if (\n\t\t\t\tevent.isOperation(FileOperation.MOVE) &&\n\t\t\t\tevent.target.isFile\n\t\t\t) {\n\t\t\t\tthis.move(event);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate handleActiveEditorChange(\n\t\tgroup: IEditorGroup,\n\t\teditorPane?: IEditorPane,\n\t): void {\n\t\tthis.handleActiveEditorChangeInHistory(editorPane);\n\t\tthis.handleActiveEditorChangeInNavigationStacks(group, editorPane);\n\t}\n\n\tprivate handleActiveEditorSelectionChangeEvent(\n\t\tgroup: IEditorGroup,\n\t\teditorPane: IEditorPaneWithSelection,\n\t\tevent: IEditorPaneSelectionChangeEvent,\n\t): void {\n\t\tthis.handleActiveEditorSelectionChangeInNavigationStacks(\n\t\t\tgroup,\n\t\t\teditorPane,\n\t\t\tevent,\n\t\t);\n\t}\n\n\tprivate move(event: FileOperationEvent): void {\n\t\tthis.moveInHistory(event);\n\t\tthis.moveInEditorNavigationStacks(event);\n\t}\n\n\tprivate remove(editor: EditorInput): void;\n\tprivate remove(event: FileChangesEvent): void;\n\tprivate remove(event: FileOperationEvent): void;\n\tprivate remove(\n\t\targ1: EditorInput | FileChangesEvent | FileOperationEvent,\n\t): void {\n\t\tthis.removeFromHistory(arg1);\n\t\tthis.removeFromEditorNavigationStacks(arg1);\n\t\tthis.removeFromRecentlyClosedEditors(arg1);\n\t\tthis.removeFromRecentlyOpened(arg1);\n\t}\n\n\tprivate removeFromRecentlyOpened(\n\t\targ1: EditorInput | FileChangesEvent | FileOperationEvent,\n\t): void {\n\t\tlet resource: URI | undefined;\n\t\tif (isEditorInput(arg1)) {\n\t\t\tresource = EditorResourceAccessor.getOriginalUri(arg1);\n\t\t} else if (arg1 instanceof FileChangesEvent) {\n\t\t\t// Ignore for now (recently opened are most often out of workspace files anyway for which there are no file events)\n\t\t} else {\n\t\t\tresource = arg1.resource;\n\t\t}\n\n\t\tif (resource) {\n\t\t\tthis.workspacesService.removeRecentlyOpened([resource]);\n\t\t}\n\t}\n\n\tclear(): void {\n\t\t// History\n\t\tthis.clearRecentlyOpened();\n\n\t\t// Navigation (next, previous)\n\t\tthis.clearEditorNavigationStacks();\n\n\t\t// Recently closed editors\n\t\tthis.recentlyClosedEditors = [];\n\n\t\t// Context Keys\n\t\tthis.updateContextKeys();\n\t}\n\n\t//#region History Context Keys\n\n\tprivate readonly canNavigateBackContextKey = new RawContextKey<boolean>(\n\t\t\"canNavigateBack\",\n\t\tfalse,\n\t\tlocalize(\n\t\t\t\"canNavigateBack\",\n\t\t\t\"Whether it is possible to navigate back in editor history\",\n\t\t),\n\t).bindTo(this.contextKeyService);\n\tprivate readonly canNavigateForwardContextKey = new RawContextKey<boolean>(\n\t\t\"canNavigateForward\",\n\t\tfalse,\n\t\tlocalize(\n\t\t\t\"canNavigateForward\",\n\t\t\t\"Whether it is possible to navigate forward in editor history\",\n\t\t),\n\t).bindTo(this.contextKeyService);\n\n\tprivate readonly canNavigateBackInNavigationsContextKey =\n\t\tnew RawContextKey<boolean>(\n\t\t\t\"canNavigateBackInNavigationLocations\",\n\t\t\tfalse,\n\t\t\tlocalize(\n\t\t\t\t\"canNavigateBackInNavigationLocations\",\n\t\t\t\t\"Whether it is possible to navigate back in editor navigation locations history\",\n\t\t\t),\n\t\t).bindTo(this.contextKeyService);\n\tprivate readonly canNavigateForwardInNavigationsContextKey =\n\t\tnew RawContextKey<boolean>(\n\t\t\t\"canNavigateForwardInNavigationLocations\",\n\t\t\tfalse,\n\t\t\tlocalize(\n\t\t\t\t\"canNavigateForwardInNavigationLocations\",\n\t\t\t\t\"Whether it is possible to navigate forward in editor navigation locations history\",\n\t\t\t),\n\t\t).bindTo(this.contextKeyService);\n\tprivate readonly canNavigateToLastNavigationLocationContextKey =\n\t\tnew RawContextKey<boolean>(\n\t\t\t\"canNavigateToLastNavigationLocation\",\n\t\t\tfalse,\n\t\t\tlocalize(\n\t\t\t\t\"canNavigateToLastNavigationLocation\",\n\t\t\t\t\"Whether it is possible to navigate to the last editor navigation location\",\n\t\t\t),\n\t\t).bindTo(this.contextKeyService);\n\n\tprivate readonly canNavigateBackInEditsContextKey =\n\t\tnew RawContextKey<boolean>(\n\t\t\t\"canNavigateBackInEditLocations\",\n\t\t\tfalse,\n\t\t\tlocalize(\n\t\t\t\t\"canNavigateBackInEditLocations\",\n\t\t\t\t\"Whether it is possible to navigate back in editor edit locations history\",\n\t\t\t),\n\t\t).bindTo(this.contextKeyService);\n\tprivate readonly canNavigateForwardInEditsContextKey =\n\t\tnew RawContextKey<boolean>(\n\t\t\t\"canNavigateForwardInEditLocations\",\n\t\t\tfalse,\n\t\t\tlocalize(\n\t\t\t\t\"canNavigateForwardInEditLocations\",\n\t\t\t\t\"Whether it is possible to navigate forward in editor edit locations history\",\n\t\t\t),\n\t\t).bindTo(this.contextKeyService);\n\tprivate readonly canNavigateToLastEditLocationContextKey =\n\t\tnew RawContextKey<boolean>(\n\t\t\t\"canNavigateToLastEditLocation\",\n\t\t\tfalse,\n\t\t\tlocalize(\n\t\t\t\t\"canNavigateToLastEditLocation\",\n\t\t\t\t\"Whether it is possible to navigate to the last editor edit location\",\n\t\t\t),\n\t\t).bindTo(this.contextKeyService);\n\n\tprivate readonly canReopenClosedEditorContextKey =\n\t\tnew RawContextKey<boolean>(\n\t\t\t\"canReopenClosedEditor\",\n\t\t\tfalse,\n\t\t\tlocalize(\n\t\t\t\t\"canReopenClosedEditor\",\n\t\t\t\t\"Whether it is possible to reopen the last closed editor\",\n\t\t\t),\n\t\t).bindTo(this.contextKeyService);\n\n\tupdateContextKeys(): void {\n\t\tthis.contextKeyService.bufferChangeEvents(() => {\n\t\t\tconst activeStack = this.getStack();\n\n\t\t\tthis.canNavigateBackContextKey.set(\n\t\t\t\tactiveStack.canGoBack(GoFilter.NONE),\n\t\t\t);\n\t\t\tthis.canNavigateForwardContextKey.set(\n\t\t\t\tactiveStack.canGoForward(GoFilter.NONE),\n\t\t\t);\n\n\t\t\tthis.canNavigateBackInNavigationsContextKey.set(\n\t\t\t\tactiveStack.canGoBack(GoFilter.NAVIGATION),\n\t\t\t);\n\t\t\tthis.canNavigateForwardInNavigationsContextKey.set(\n\t\t\t\tactiveStack.canGoForward(GoFilter.NAVIGATION),\n\t\t\t);\n\t\t\tthis.canNavigateToLastNavigationLocationContextKey.set(\n\t\t\t\tactiveStack.canGoLast(GoFilter.NAVIGATION),\n\t\t\t);\n\n\t\t\tthis.canNavigateBackInEditsContextKey.set(\n\t\t\t\tactiveStack.canGoBack(GoFilter.EDITS),\n\t\t\t);\n\t\t\tthis.canNavigateForwardInEditsContextKey.set(\n\t\t\t\tactiveStack.canGoForward(GoFilter.EDITS),\n\t\t\t);\n\t\t\tthis.canNavigateToLastEditLocationContextKey.set(\n\t\t\t\tactiveStack.canGoLast(GoFilter.EDITS),\n\t\t\t);\n\n\t\t\tthis.canReopenClosedEditorContextKey.set(\n\t\t\t\tthis.recentlyClosedEditors.length > 0,\n\t\t\t);\n\t\t});\n\t}\n\n\t//#endregion\n\n\t//#region Editor History Navigation (limit: 50)\n\n\tprivate readonly _onDidChangeEditorNavigationStack = this._register(\n\t\tnew Emitter<void>(),\n\t);\n\treadonly onDidChangeEditorNavigationStack =\n\t\tthis._onDidChangeEditorNavigationStack.event;\n\n\tprivate defaultScopedEditorNavigationStack:\n\t\t| IEditorNavigationStacks\n\t\t| undefined = undefined;\n\tprivate readonly editorGroupScopedNavigationStacks = new Map<\n\t\tGroupIdentifier,\n\t\t{ stack: IEditorNavigationStacks; disposable: IDisposable }\n\t>();\n\tprivate readonly editorScopedNavigationStacks = new Map<\n\t\tGroupIdentifier,\n\t\tMap<\n\t\t\tEditorInput,\n\t\t\t{ stack: IEditorNavigationStacks; disposable: IDisposable }\n\t\t>\n\t>();\n\n\tprivate editorNavigationScope = GoScope.DEFAULT;\n\n\tprivate registerEditorNavigationScopeChangeListener(): void {\n\t\tconst handleEditorNavigationScopeChange = () => {\n\t\t\t// Ensure to start fresh when setting changes\n\t\t\tthis.disposeEditorNavigationStacks();\n\n\t\t\t// Update scope\n\t\t\tconst configuredScope = this.configurationService.getValue(\n\t\t\t\tHistoryService.NAVIGATION_SCOPE_SETTING,\n\t\t\t);\n\t\t\tif (configuredScope === \"editorGroup\") {\n\t\t\t\tthis.editorNavigationScope = GoScope.EDITOR_GROUP;\n\t\t\t} else if (configuredScope === \"editor\") {\n\t\t\t\tthis.editorNavigationScope = GoScope.EDITOR;\n\t\t\t} else {\n\t\t\t\tthis.editorNavigationScope = GoScope.DEFAULT;\n\t\t\t}\n\t\t};\n\n\t\tthis._register(\n\t\t\tthis.configurationService.onDidChangeConfiguration((event) => {\n\t\t\t\tif (\n\t\t\t\t\tevent.affectsConfiguration(\n\t\t\t\t\t\tHistoryService.NAVIGATION_SCOPE_SETTING,\n\t\t\t\t\t)\n\t\t\t\t) {\n\t\t\t\t\thandleEditorNavigationScopeChange();\n\t\t\t\t}\n\t\t\t}),\n\t\t);\n\n\t\thandleEditorNavigationScopeChange();\n\t}\n\n\tprivate getStack(\n\t\tgroup = this.editorGroupService.activeGroup,\n\t\teditor = group.activeEditor,\n\t): IEditorNavigationStacks {\n\t\tswitch (this.editorNavigationScope) {\n\t\t\t// Per Editor\n\t\t\tcase GoScope.EDITOR: {\n\t\t\t\tif (!editor) {\n\t\t\t\t\treturn new NoOpEditorNavigationStacks();\n\t\t\t\t}\n\n\t\t\t\tlet stacksForGroup = this.editorScopedNavigationStacks.get(\n\t\t\t\t\tgroup.id,\n\t\t\t\t);\n\t\t\t\tif (!stacksForGroup) {\n\t\t\t\t\tstacksForGroup = new Map<\n\t\t\t\t\t\tEditorInput,\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tstack: IEditorNavigationStacks;\n\t\t\t\t\t\t\tdisposable: IDisposable;\n\t\t\t\t\t\t}\n\t\t\t\t\t>();\n\t\t\t\t\tthis.editorScopedNavigationStacks.set(\n\t\t\t\t\t\tgroup.id,\n\t\t\t\t\t\tstacksForGroup,\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\tlet stack = stacksForGroup.get(editor)?.stack;\n\t\t\t\tif (!stack) {\n\t\t\t\t\tconst disposable = new DisposableStore();\n\n\t\t\t\t\tstack = disposable.add(\n\t\t\t\t\t\tthis.instantiationService.createInstance(\n\t\t\t\t\t\t\tEditorNavigationStacks,\n\t\t\t\t\t\t\tGoScope.EDITOR,\n\t\t\t\t\t\t),\n\t\t\t\t\t);\n\t\t\t\t\tdisposable.add(\n\t\t\t\t\t\tstack.onDidChange(() =>\n\t\t\t\t\t\t\tthis._onDidChangeEditorNavigationStack.fire(),\n\t\t\t\t\t\t),\n\t\t\t\t\t);\n\n\t\t\t\t\tstacksForGroup.set(editor, { stack, disposable });\n\t\t\t\t}\n\n\t\t\t\treturn stack;\n\t\t\t}\n\n\t\t\t// Per Editor Group\n\t\t\tcase GoScope.EDITOR_GROUP: {\n\t\t\t\tlet stack = this.editorGroupScopedNavigationStacks.get(\n\t\t\t\t\tgroup.id,\n\t\t\t\t)?.stack;\n\t\t\t\tif (!stack) {\n\t\t\t\t\tconst disposable = new DisposableStore();\n\n\t\t\t\t\tstack = disposable.add(\n\t\t\t\t\t\tthis.instantiationService.createInstance(\n\t\t\t\t\t\t\tEditorNavigationStacks,\n\t\t\t\t\t\t\tGoScope.EDITOR_GROUP,\n\t\t\t\t\t\t),\n\t\t\t\t\t);\n\t\t\t\t\tdisposable.add(\n\t\t\t\t\t\tstack.onDidChange(() =>\n\t\t\t\t\t\t\tthis._onDidChangeEditorNavigationStack.fire(),\n\t\t\t\t\t\t),\n\t\t\t\t\t);\n\n\t\t\t\t\tthis.editorGroupScopedNavigationStacks.set(group.id, {\n\t\t\t\t\t\tstack,\n\t\t\t\t\t\tdisposable,\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\treturn stack;\n\t\t\t}\n\n\t\t\t// Global\n\t\t\tcase GoScope.DEFAULT: {\n\t\t\t\tif (!this.defaultScopedEditorNavigationStack) {\n\t\t\t\t\tthis.defaultScopedEditorNavigationStack = this._register(\n\t\t\t\t\t\tthis.instantiationService.createInstance(\n\t\t\t\t\t\t\tEditorNavigationStacks,\n\t\t\t\t\t\t\tGoScope.DEFAULT,\n\t\t\t\t\t\t),\n\t\t\t\t\t);\n\n\t\t\t\t\tthis._register(\n\t\t\t\t\t\tthis.defaultScopedEditorNavigationStack.onDidChange(\n\t\t\t\t\t\t\t() => this._onDidChangeEditorNavigationStack.fire(),\n\t\t\t\t\t\t),\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\treturn this.defaultScopedEditorNavigationStack;\n\t\t\t}\n\t\t}\n\t}\n\n\tgoForward(filter?: GoFilter): Promise<void> {\n\t\treturn this.getStack().goForward(filter);\n\t}\n\n\tgoBack(filter?: GoFilter): Promise<void> {\n\t\treturn this.getStack().goBack(filter);\n\t}\n\n\tgoPrevious(filter?: GoFilter): Promise<void> {\n\t\treturn this.getStack().goPrevious(filter);\n\t}\n\n\tgoLast(filter?: GoFilter): Promise<void> {\n\t\treturn this.getStack().goLast(filter);\n\t}\n\n\tprivate handleActiveEditorChangeInNavigationStacks(\n\t\tgroup: IEditorGroup,\n\t\teditorPane?: IEditorPane,\n\t): void {\n\t\tthis.getStack(group, editorPane?.input).handleActiveEditorChange(\n\t\t\teditorPane,\n\t\t);\n\t}\n\n\tprivate handleActiveEditorSelectionChangeInNavigationStacks(\n\t\tgroup: IEditorGroup,\n\t\teditorPane: IEditorPaneWithSelection,\n\t\tevent: IEditorPaneSelectionChangeEvent,\n\t): void {\n\t\tthis.getStack(\n\t\t\tgroup,\n\t\t\teditorPane.input,\n\t\t).handleActiveEditorSelectionChange(editorPane, event);\n\t}\n\n\tprivate handleEditorCloseEventInHistory(e: IEditorCloseEvent): void {\n\t\tconst editors = this.editorScopedNavigationStacks.get(e.groupId);\n\t\tif (editors) {\n\t\t\tconst editorStack = editors.get(e.editor);\n\t\t\tif (editorStack) {\n\t\t\t\teditorStack.disposable.dispose();\n\t\t\t\teditors.delete(e.editor);\n\t\t\t}\n\n\t\t\tif (editors.size === 0) {\n\t\t\t\tthis.editorScopedNavigationStacks.delete(e.groupId);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate handleEditorGroupRemoveInNavigationStacks(\n\t\tgroup: IEditorGroup,\n\t): void {\n\t\t// Global\n\t\tthis.defaultScopedEditorNavigationStack?.remove(group.id);\n\n\t\t// Editor groups\n\t\tconst editorGroupStack = this.editorGroupScopedNavigationStacks.get(\n\t\t\tgroup.id,\n\t\t);\n\t\tif (editorGroupStack) {\n\t\t\teditorGroupStack.disposable.dispose();\n\t\t\tthis.editorGroupScopedNavigationStacks.delete(group.id);\n\t\t}\n\t}\n\n\tprivate clearEditorNavigationStacks(): void {\n\t\tthis.withEachEditorNavigationStack((stack) => stack.clear());\n\t}\n\n\tprivate removeFromEditorNavigationStacks(\n\t\targ1: EditorInput | FileChangesEvent | FileOperationEvent,\n\t): void {\n\t\tthis.withEachEditorNavigationStack((stack) => stack.remove(arg1));\n\t}\n\n\tprivate moveInEditorNavigationStacks(event: FileOperationEvent): void {\n\t\tthis.withEachEditorNavigationStack((stack) => stack.move(event));\n\t}\n\n\tprivate withEachEditorNavigationStack(\n\t\tfn: (stack: IEditorNavigationStacks) => void,\n\t): void {\n\t\t// Global\n\t\tif (this.defaultScopedEditorNavigationStack) {\n\t\t\tfn(this.defaultScopedEditorNavigationStack);\n\t\t}\n\n\t\t// Per editor group\n\t\tfor (const [, entry] of this.editorGroupScopedNavigationStacks) {\n\t\t\tfn(entry.stack);\n\t\t}\n\n\t\t// Per editor\n\t\tfor (const [, entries] of this.editorScopedNavigationStacks) {\n\t\t\tfor (const [, entry] of entries) {\n\t\t\t\tfn(entry.stack);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate disposeEditorNavigationStacks(): void {\n\t\t// Global\n\t\tthis.defaultScopedEditorNavigationStack?.dispose();\n\t\tthis.defaultScopedEditorNavigationStack = undefined;\n\n\t\t// Per Editor group\n\t\tfor (const [, stack] of this.editorGroupScopedNavigationStacks) {\n\t\t\tstack.disposable.dispose();\n\t\t}\n\t\tthis.editorGroupScopedNavigationStacks.clear();\n\n\t\t// Per Editor\n\t\tfor (const [, stacks] of this.editorScopedNavigationStacks) {\n\t\t\tfor (const [, stack] of stacks) {\n\t\t\t\tstack.disposable.dispose();\n\t\t\t}\n\t\t}\n\t\tthis.editorScopedNavigationStacks.clear();\n\t}\n\n\t//#endregion\n\n\t//#region Navigation: Next/Previous Used Editor\n\n\tprivate recentlyUsedEditorsStack: readonly IEditorIdentifier[] | undefined =\n\t\tundefined;\n\tprivate recentlyUsedEditorsStackIndex = 0;\n\n\tprivate recentlyUsedEditorsInGroupStack:\n\t\t| readonly IEditorIdentifier[]\n\t\t| undefined = undefined;\n\tprivate recentlyUsedEditorsInGroupStackIndex = 0;\n\n\tprivate navigatingInRecentlyUsedEditorsStack = false;\n\tprivate navigatingInRecentlyUsedEditorsInGroupStack = false;\n\n\topenNextRecentlyUsedEditor(groupId?: GroupIdentifier): Promise<void> {\n\t\tconst [stack, index] = this.ensureRecentlyUsedStack(\n\t\t\t(index) => index - 1,\n\t\t\tgroupId,\n\t\t);\n\n\t\treturn this.doNavigateInRecentlyUsedEditorsStack(stack[index], groupId);\n\t}\n\n\topenPreviouslyUsedEditor(groupId?: GroupIdentifier): Promise<void> {\n\t\tconst [stack, index] = this.ensureRecentlyUsedStack(\n\t\t\t(index) => index + 1,\n\t\t\tgroupId,\n\t\t);\n\n\t\treturn this.doNavigateInRecentlyUsedEditorsStack(stack[index], groupId);\n\t}\n\n\tprivate async doNavigateInRecentlyUsedEditorsStack(\n\t\teditorIdentifier: IEditorIdentifier | undefined,\n\t\tgroupId?: GroupIdentifier,\n\t): Promise<void> {\n\t\tif (editorIdentifier) {\n\t\t\tconst acrossGroups =\n\t\t\t\ttypeof groupId !== \"number\" ||\n\t\t\t\t!this.editorGroupService.getGroup(groupId);\n\n\t\t\tif (acrossGroups) {\n\t\t\t\tthis.navigatingInRecentlyUsedEditorsStack = true;\n\t\t\t} else {\n\t\t\t\tthis.navigatingInRecentlyUsedEditorsInGroupStack = true;\n\t\t\t}\n\n\t\t\tconst group =\n\t\t\t\tthis.editorGroupService.getGroup(editorIdentifier.groupId) ??\n\t\t\t\tthis.editorGroupService.activeGroup;\n\t\t\ttry {\n\t\t\t\tawait group.openEditor(editorIdentifier.editor);\n\t\t\t} finally {\n\t\t\t\tif (acrossGroups) {\n\t\t\t\t\tthis.navigatingInRecentlyUsedEditorsStack = false;\n\t\t\t\t} else {\n\t\t\t\t\tthis.navigatingInRecentlyUsedEditorsInGroupStack = false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate ensureRecentlyUsedStack(\n\t\tindexModifier: (index: number) => number,\n\t\tgroupId?: GroupIdentifier,\n\t): [readonly IEditorIdentifier[], number] {\n\t\tlet editors: readonly IEditorIdentifier[];\n\t\tlet index: number;\n\n\t\tconst group =\n\t\t\ttypeof groupId === \"number\"\n\t\t\t\t? this.editorGroupService.getGroup(groupId)\n\t\t\t\t: undefined;\n\n\t\t// Across groups\n\t\tif (group) {\n\t\t\teditors =\n\t\t\t\tthis.recentlyUsedEditorsInGroupStack ||\n\t\t\t\tgroup\n\t\t\t\t\t.getEditors(EditorsOrder.MOST_RECENTLY_ACTIVE)\n\t\t\t\t\t.map((editor) => ({ groupId: group.id, editor }));\n\t\t\tindex = this.recentlyUsedEditorsInGroupStackIndex;\n\t\t} else {\n\t\t\teditors =\n\t\t\t\tthis.recentlyUsedEditorsStack ||\n\t\t\t\tthis.editorService.getEditors(\n\t\t\t\t\tEditorsOrder.MOST_RECENTLY_ACTIVE,\n\t\t\t\t);\n\t\t\tindex = this.recentlyUsedEditorsStackIndex;\n\t\t}\n\n\t\t// Adjust index\n\t\tlet newIndex = indexModifier(index);\n\t\tif (newIndex < 0) {\n\t\t\tnewIndex = 0;\n\t\t} else if (newIndex > editors.length - 1) {\n\t\t\tnewIndex = editors.length - 1;\n\t\t}\n\n\t\t// Remember index and editors\n\t\tif (group) {\n\t\t\tthis.recentlyUsedEditorsInGroupStack = editors;\n\t\t\tthis.recentlyUsedEditorsInGroupStackIndex = newIndex;\n\t\t} else {\n\t\t\tthis.recentlyUsedEditorsStack = editors;\n\t\t\tthis.recentlyUsedEditorsStackIndex = newIndex;\n\t\t}\n\n\t\treturn [editors, newIndex];\n\t}\n\n\tprivate handleEditorEventInRecentEditorsStack(): void {\n\t\t// Drop all-editors stack unless navigating in all editors\n\t\tif (!this.navigatingInRecentlyUsedEditorsStack) {\n\t\t\tthis.recentlyUsedEditorsStack = undefined;\n\t\t\tthis.recentlyUsedEditorsStackIndex = 0;\n\t\t}\n\n\t\t// Drop in-group-editors stack unless navigating in group\n\t\tif (!this.navigatingInRecentlyUsedEditorsInGroupStack) {\n\t\t\tthis.recentlyUsedEditorsInGroupStack = undefined;\n\t\t\tthis.recentlyUsedEditorsInGroupStackIndex = 0;\n\t\t}\n\t}\n\n\t//#endregion\n\n\t//#region File: Reopen Closed Editor (limit: 20)\n\n\tprivate static readonly MAX_RECENTLY_CLOSED_EDITORS = 20;\n\n\tprivate recentlyClosedEditors: IRecentlyClosedEditor[] = [];\n\tprivate ignoreEditorCloseEvent = false;\n\n\tprivate handleEditorCloseEventInReopen(event: IEditorCloseEvent): void {\n\t\tif (this.ignoreEditorCloseEvent) {\n\t\t\treturn; // blocked\n\t\t}\n\n\t\tconst { editor, context } = event;\n\t\tif (\n\t\t\tcontext === EditorCloseContext.REPLACE ||\n\t\t\tcontext === EditorCloseContext.MOVE\n\t\t) {\n\t\t\treturn; // ignore if editor was replaced or moved\n\t\t}\n\n\t\tconst untypedEditor = editor.toUntyped();\n\t\tif (!untypedEditor) {\n\t\t\treturn; // we need a untyped editor to restore from going forward\n\t\t}\n\n\t\tconst associatedResources: URI[] = [];\n\t\tconst editorResource = EditorResourceAccessor.getOriginalUri(editor, {\n\t\t\tsupportSideBySide: SideBySideEditor.BOTH,\n\t\t});\n\t\tif (URI.isUri(editorResource)) {\n\t\t\tassociatedResources.push(editorResource);\n\t\t} else if (editorResource) {\n\t\t\tassociatedResources.push(\n\t\t\t\t...coalesce([editorResource.primary, editorResource.secondary]),\n\t\t\t);\n\t\t}\n\n\t\t// Remove from list of recently closed before...\n\t\tthis.removeFromRecentlyClosedEditors(editor);\n\n\t\t// ...adding it as last recently closed\n\t\tthis.recentlyClosedEditors.push({\n\t\t\teditorId: editor.editorId,\n\t\t\teditor: untypedEditor,\n\t\t\tresource: EditorResourceAccessor.getOriginalUri(editor),\n\t\t\tassociatedResources,\n\t\t\tindex: event.index,\n\t\t\tsticky: event.sticky,\n\t\t});\n\n\t\t// Bounding\n\t\tif (\n\t\t\tthis.recentlyClosedEditors.length >\n\t\t\tHistoryService.MAX_RECENTLY_CLOSED_EDITORS\n\t\t) {\n\t\t\tthis.recentlyClosedEditors.shift();\n\t\t}\n\n\t\t// Context\n\t\tthis.canReopenClosedEditorContextKey.set(true);\n\t}\n\n\tasync reopenLastClosedEditor(): Promise<void> {\n\t\t// Open editor if we have one\n\t\tconst lastClosedEditor = this.recentlyClosedEditors.pop();\n\t\tlet reopenClosedEditorPromise: Promise<void> | undefined;\n\t\tif (lastClosedEditor) {\n\t\t\treopenClosedEditorPromise =\n\t\t\t\tthis.doReopenLastClosedEditor(lastClosedEditor);\n\t\t}\n\n\t\t// Update context\n\t\tthis.canReopenClosedEditorContextKey.set(\n\t\t\tthis.recentlyClosedEditors.length > 0,\n\t\t);\n\n\t\treturn reopenClosedEditorPromise;\n\t}\n\n\tprivate async doReopenLastClosedEditor(\n\t\tlastClosedEditor: IRecentlyClosedEditor,\n\t): Promise<void> {\n\t\tconst options: IEditorOptions = {\n\t\t\tpinned: true,\n\t\t\tsticky: lastClosedEditor.sticky,\n\t\t\tindex: lastClosedEditor.index,\n\t\t\tignoreError: true,\n\t\t};\n\n\t\t// Special sticky handling: remove the index property from options\n\t\t// if that would result in sticky state to not preserve or apply\n\t\t// wrongly.\n\t\tif (\n\t\t\t(lastClosedEditor.sticky &&\n\t\t\t\t!this.editorGroupService.activeGroup.isSticky(\n\t\t\t\t\tlastClosedEditor.index,\n\t\t\t\t)) ||\n\t\t\t(!lastClosedEditor.sticky &&\n\t\t\t\tthis.editorGroupService.activeGroup.isSticky(\n\t\t\t\t\tlastClosedEditor.index,\n\t\t\t\t))\n\t\t) {\n\t\t\toptions.index = undefined;\n\t\t}\n\n\t\t// Re-open editor unless already opened\n\t\tlet editorPane: IEditorPane | undefined;\n\t\tif (\n\t\t\t!this.editorGroupService.activeGroup.contains(\n\t\t\t\tlastClosedEditor.editor,\n\t\t\t)\n\t\t) {\n\t\t\t// Fix for https://github.com/microsoft/vscode/issues/107850\n\t\t\t// If opening an editor fails, it is possible that we get\n\t\t\t// another editor-close event as a result. But we really do\n\t\t\t// want to ignore that in our list of recently closed editors\n\t\t\t//  to prevent endless loops.\n\n\t\t\tthis.ignoreEditorCloseEvent = true;\n\t\t\ttry {\n\t\t\t\teditorPane = await this.editorService.openEditor({\n\t\t\t\t\t...lastClosedEditor.editor,\n\t\t\t\t\toptions: {\n\t\t\t\t\t\t...lastClosedEditor.editor.options,\n\t\t\t\t\t\t...options,\n\t\t\t\t\t},\n\t\t\t\t});\n\t\t\t} finally {\n\t\t\t\tthis.ignoreEditorCloseEvent = false;\n\t\t\t}\n\t\t}\n\n\t\t// If no editor was opened, try with the next one\n\t\tif (!editorPane) {\n\t\t\t// Fix for https://github.com/microsoft/vscode/issues/67882\n\t\t\t// If opening of the editor fails, make sure to try the next one\n\t\t\t// but make sure to remove this one from the list to prevent\n\t\t\t// endless loops.\n\t\t\tremove(this.recentlyClosedEditors, lastClosedEditor);\n\n\t\t\t// Try with next one\n\t\t\tthis.reopenLastClosedEditor();\n\t\t}\n\t}\n\n\tprivate removeFromRecentlyClosedEditors(\n\t\targ1: EditorInput | FileChangesEvent | FileOperationEvent,\n\t): void {\n\t\tthis.recentlyClosedEditors = this.recentlyClosedEditors.filter(\n\t\t\t(recentlyClosedEditor) => {\n\t\t\t\tif (\n\t\t\t\t\tisEditorInput(arg1) &&\n\t\t\t\t\trecentlyClosedEditor.editorId !== arg1.editorId\n\t\t\t\t) {\n\t\t\t\t\treturn true; // keep: different editor identifiers\n\t\t\t\t}\n\n\t\t\t\tif (\n\t\t\t\t\trecentlyClosedEditor.resource &&\n\t\t\t\t\tthis.editorHelper.matchesFile(\n\t\t\t\t\t\trecentlyClosedEditor.resource,\n\t\t\t\t\t\targ1,\n\t\t\t\t\t)\n\t\t\t\t) {\n\t\t\t\t\treturn false; // remove: editor matches directly\n\t\t\t\t}\n\n\t\t\t\tif (\n\t\t\t\t\trecentlyClosedEditor.associatedResources.some(\n\t\t\t\t\t\t(associatedResource) =>\n\t\t\t\t\t\t\tthis.editorHelper.matchesFile(\n\t\t\t\t\t\t\t\tassociatedResource,\n\t\t\t\t\t\t\t\targ1,\n\t\t\t\t\t\t\t),\n\t\t\t\t\t)\n\t\t\t\t) {\n\t\t\t\t\treturn false; // remove: an associated resource matches\n\t\t\t\t}\n\n\t\t\t\treturn true; // keep\n\t\t\t},\n\t\t);\n\n\t\t// Update context\n\t\tthis.canReopenClosedEditorContextKey.set(\n\t\t\tthis.recentlyClosedEditors.length > 0,\n\t\t);\n\t}\n\n\t//#endregion\n\n\t//#region Go to: Recently Opened Editor (limit: 200, persisted)\n\n\tprivate static readonly MAX_HISTORY_ITEMS = 200;\n\tprivate static readonly HISTORY_STORAGE_KEY = \"history.entries\";\n\n\tprivate history: Array<EditorInput | IResourceEditorInput> | undefined =\n\t\tundefined;\n\n\tprivate readonly editorHistoryListeners = new Map<\n\t\tEditorInput,\n\t\tDisposableStore\n\t>();\n\n\tprivate readonly resourceExcludeMatcher = this._register(\n\t\tnew WindowIdleValue(mainWindow, () => {\n\t\t\tconst matcher = this._register(\n\t\t\t\tthis.instantiationService.createInstance(\n\t\t\t\t\tResourceGlobMatcher,\n\t\t\t\t\t(root) =>\n\t\t\t\t\t\tgetExcludes(\n\t\t\t\t\t\t\troot\n\t\t\t\t\t\t\t\t? this.configurationService.getValue<ISearchConfiguration>(\n\t\t\t\t\t\t\t\t\t\t{ resource: root },\n\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t: this.configurationService.getValue<ISearchConfiguration>(),\n\t\t\t\t\t\t) || Object.create(null),\n\t\t\t\t\t(event) =>\n\t\t\t\t\t\tevent.affectsConfiguration(FILES_EXCLUDE_CONFIG) ||\n\t\t\t\t\t\tevent.affectsConfiguration(SEARCH_EXCLUDE_CONFIG),\n\t\t\t\t),\n\t\t\t);\n\n\t\t\tthis._register(\n\t\t\t\tmatcher.onExpressionChange(() =>\n\t\t\t\t\tthis.removeExcludedFromHistory(),\n\t\t\t\t),\n\t\t\t);\n\n\t\t\treturn matcher;\n\t\t}),\n\t);\n\n\tprivate handleActiveEditorChangeInHistory(editorPane?: IEditorPane): void {\n\t\t// Ensure we have not configured to exclude input and don't track invalid inputs\n\t\tconst editor = editorPane?.input;\n\t\tif (!editor || editor.isDisposed() || !this.includeInHistory(editor)) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Remove any existing entry and add to the beginning\n\t\tthis.removeFromHistory(editor);\n\t\tthis.addToHistory(editor);\n\t}\n\n\tprivate addToHistory(\n\t\teditor: EditorInput | IResourceEditorInput,\n\t\tinsertFirst = true,\n\t): void {\n\t\tthis.ensureHistoryLoaded(this.history);\n\n\t\tconst historyInput =\n\t\t\tthis.editorHelper.preferResourceEditorInput(editor);\n\t\tif (!historyInput) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Insert based on preference\n\t\tif (insertFirst) {\n\t\t\tthis.history.unshift(historyInput);\n\t\t} else {\n\t\t\tthis.history.push(historyInput);\n\t\t}\n\n\t\t// Respect max entries setting\n\t\tif (this.history.length > HistoryService.MAX_HISTORY_ITEMS) {\n\t\t\tthis.editorHelper.clearOnEditorDispose(\n\t\t\t\tthis.history.pop()!,\n\t\t\t\tthis.editorHistoryListeners,\n\t\t\t);\n\t\t}\n\n\t\t// React to editor input disposing\n\t\tif (isEditorInput(editor)) {\n\t\t\tthis.editorHelper.onEditorDispose(\n\t\t\t\teditor,\n\t\t\t\t() => this.updateHistoryOnEditorDispose(historyInput),\n\t\t\t\tthis.editorHistoryListeners,\n\t\t\t);\n\t\t}\n\t}\n\n\tprivate updateHistoryOnEditorDispose(\n\t\teditor: EditorInput | IResourceEditorInput,\n\t): void {\n\t\tif (isEditorInput(editor)) {\n\t\t\t// Any non side-by-side editor input gets removed directly on dispose\n\t\t\tif (isSideBySideEditorInput(editor)) {\n\t\t\t\tconst resourceInputs: IResourceEditorInput[] = [];\n\t\t\t\tconst sideInputs = editor.primary.matches(editor.secondary)\n\t\t\t\t\t? [editor.primary]\n\t\t\t\t\t: [editor.primary, editor.secondary];\n\t\t\t\tfor (const sideInput of sideInputs) {\n\t\t\t\t\tconst candidateResourceInput =\n\t\t\t\t\t\tthis.editorHelper.preferResourceEditorInput(sideInput);\n\t\t\t\t\tif (\n\t\t\t\t\t\tisResourceEditorInput(candidateResourceInput) &&\n\t\t\t\t\t\tthis.includeInHistory(candidateResourceInput)\n\t\t\t\t\t) {\n\t\t\t\t\t\tresourceInputs.push(candidateResourceInput);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Insert the untyped resource inputs where our disposed\n\t\t\t\t// side-by-side editor input is in the history stack\n\t\t\t\tthis.replaceInHistory(editor, ...resourceInputs);\n\t\t\t} else {\n\t\t\t\tthis.removeFromHistory(editor);\n\t\t\t}\n\t\t} else {\n\t\t\t// Remove any editor that should not be included in history\n\t\t\tif (!this.includeInHistory(editor)) {\n\t\t\t\tthis.removeFromHistory(editor);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate includeInHistory(\n\t\teditor: EditorInput | IResourceEditorInput,\n\t): boolean {\n\t\tif (isEditorInput(editor)) {\n\t\t\treturn true; // include any non files\n\t\t}\n\n\t\treturn !this.resourceExcludeMatcher.value.matches(editor.resource);\n\t}\n\n\tprivate removeExcludedFromHistory(): void {\n\t\tthis.ensureHistoryLoaded(this.history);\n\n\t\tthis.history = this.history.filter((entry) => {\n\t\t\tconst include = this.includeInHistory(entry);\n\n\t\t\t// Cleanup any listeners associated with the input when removing from history\n\t\t\tif (!include) {\n\t\t\t\tthis.editorHelper.clearOnEditorDispose(\n\t\t\t\t\tentry,\n\t\t\t\t\tthis.editorHistoryListeners,\n\t\t\t\t);\n\t\t\t}\n\n\t\t\treturn include;\n\t\t});\n\t}\n\n\tprivate moveInHistory(event: FileOperationEvent): void {\n\t\tif (event.isOperation(FileOperation.MOVE)) {\n\t\t\tconst removed = this.removeFromHistory(event);\n\t\t\tif (removed) {\n\t\t\t\tthis.addToHistory({ resource: event.target.resource });\n\t\t\t}\n\t\t}\n\t}\n\n\tremoveFromHistory(\n\t\targ1:\n\t\t\t| EditorInput\n\t\t\t| IResourceEditorInput\n\t\t\t| FileChangesEvent\n\t\t\t| FileOperationEvent,\n\t): boolean {\n\t\tlet removed = false;\n\n\t\tthis.ensureHistoryLoaded(this.history);\n\n\t\tthis.history = this.history.filter((entry) => {\n\t\t\tconst matches = this.editorHelper.matchesEditor(arg1, entry);\n\n\t\t\t// Cleanup any listeners associated with the input when removing from history\n\t\t\tif (matches) {\n\t\t\t\tthis.editorHelper.clearOnEditorDispose(\n\t\t\t\t\targ1,\n\t\t\t\t\tthis.editorHistoryListeners,\n\t\t\t\t);\n\t\t\t\tremoved = true;\n\t\t\t}\n\n\t\t\treturn !matches;\n\t\t});\n\n\t\treturn removed;\n\t}\n\n\tprivate replaceInHistory(\n\t\teditor: EditorInput | IResourceEditorInput,\n\t\t...replacements: ReadonlyArray<EditorInput | IResourceEditorInput>\n\t): void {\n\t\tthis.ensureHistoryLoaded(this.history);\n\n\t\tlet replaced = false;\n\n\t\tconst newHistory: Array<EditorInput | IResourceEditorInput> = [];\n\t\tfor (const entry of this.history) {\n\t\t\t// Entry matches and is going to be disposed + replaced\n\t\t\tif (this.editorHelper.matchesEditor(editor, entry)) {\n\t\t\t\t// Cleanup any listeners associated with the input when replacing from history\n\t\t\t\tthis.editorHelper.clearOnEditorDispose(\n\t\t\t\t\teditor,\n\t\t\t\t\tthis.editorHistoryListeners,\n\t\t\t\t);\n\n\t\t\t\t// Insert replacements but only once\n\t\t\t\tif (!replaced) {\n\t\t\t\t\tnewHistory.push(...replacements);\n\t\t\t\t\treplaced = true;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Entry does not match, but only add it if it didn't match\n\t\t\t// our replacements already\n\t\t\telse if (\n\t\t\t\t!replacements.some((replacement) =>\n\t\t\t\t\tthis.editorHelper.matchesEditor(replacement, entry),\n\t\t\t\t)\n\t\t\t) {\n\t\t\t\tnewHistory.push(entry);\n\t\t\t}\n\t\t}\n\n\t\t// If the target editor to replace was not found, make sure to\n\t\t// insert the replacements to the end to ensure we got them\n\t\tif (!replaced) {\n\t\t\tnewHistory.push(...replacements);\n\t\t}\n\n\t\tthis.history = newHistory;\n\t}\n\n\tclearRecentlyOpened(): void {\n\t\tthis.history = [];\n\n\t\tfor (const [, disposable] of this.editorHistoryListeners) {\n\t\t\tdispose(disposable);\n\t\t}\n\t\tthis.editorHistoryListeners.clear();\n\t}\n\n\tgetHistory(): readonly (EditorInput | IResourceEditorInput)[] {\n\t\tthis.ensureHistoryLoaded(this.history);\n\n\t\treturn this.history;\n\t}\n\n\tprivate ensureHistoryLoaded(\n\t\thistory: Array<EditorInput | IResourceEditorInput> | undefined,\n\t): asserts history {\n\t\tif (!this.history) {\n\t\t\t// Until history is loaded, it is just empty\n\t\t\tthis.history = [];\n\n\t\t\t// We want to seed history from opened editors\n\t\t\t// too as well as previous stored state, so we\n\t\t\t// need to wait for the editor groups being ready\n\t\t\tif (this.editorGroupService.isReady) {\n\t\t\t\tthis.loadHistory();\n\t\t\t} else {\n\t\t\t\t(async () => {\n\t\t\t\t\tawait this.editorGroupService.whenReady;\n\n\t\t\t\t\tthis.loadHistory();\n\t\t\t\t})();\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate loadHistory(): void {\n\t\t// Init as empty before adding - since we are about to\n\t\t// populate the history from opened editors, we capture\n\t\t// the right order here.\n\t\tthis.history = [];\n\n\t\t// All stored editors from previous session\n\t\tconst storedEditorHistory = this.loadHistoryFromStorage();\n\n\t\t// All restored editors from previous session\n\t\t// in reverse editor from least to most recently\n\t\t// used.\n\t\tconst openedEditorsLru = [\n\t\t\t...this.editorService.getEditors(EditorsOrder.MOST_RECENTLY_ACTIVE),\n\t\t].reverse();\n\n\t\t// We want to merge the opened editors from the last\n\t\t// session with the stored editors from the last\n\t\t// session. Because not all editors can be serialised\n\t\t// we want to make sure to include all opened editors\n\t\t// too.\n\t\t// Opened editors should always be first in the history\n\n\t\tconst handledEditors = new Set<string /* resource + editorId */>();\n\n\t\t// Add all opened editors first\n\t\tfor (const { editor } of openedEditorsLru) {\n\t\t\tif (!this.includeInHistory(editor)) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// Add into history\n\t\t\tthis.addToHistory(editor);\n\n\t\t\t// Remember as added\n\t\t\tif (editor.resource) {\n\t\t\t\thandledEditors.add(\n\t\t\t\t\t`${editor.resource.toString()}/${editor.editorId}`,\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\t// Add remaining from storage if not there already\n\t\t// We check on resource and `editorId` (from `override`)\n\t\t// to figure out if the editor has been already added.\n\t\tfor (const editor of storedEditorHistory) {\n\t\t\tif (\n\t\t\t\t!handledEditors.has(\n\t\t\t\t\t`${editor.resource.toString()}/${editor.options?.override}`,\n\t\t\t\t) &&\n\t\t\t\tthis.includeInHistory(editor)\n\t\t\t) {\n\t\t\t\tthis.addToHistory(editor, false /* at the end */);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate loadHistoryFromStorage(): Array<IResourceEditorInput> {\n\t\tconst entries: IResourceEditorInput[] = [];\n\n\t\tconst entriesRaw = this.storageService.get(\n\t\t\tHistoryService.HISTORY_STORAGE_KEY,\n\t\t\tStorageScope.WORKSPACE,\n\t\t);\n\t\tif (entriesRaw) {\n\t\t\ttry {\n\t\t\t\tconst entriesParsed: ISerializedEditorHistoryEntry[] =\n\t\t\t\t\tJSON.parse(entriesRaw);\n\t\t\t\tfor (const entryParsed of entriesParsed) {\n\t\t\t\t\tif (!entryParsed.editor || !entryParsed.editor.resource) {\n\t\t\t\t\t\tcontinue; // unexpected data format\n\t\t\t\t\t}\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tentries.push({\n\t\t\t\t\t\t\t...entryParsed.editor,\n\t\t\t\t\t\t\tresource:\n\t\t\t\t\t\t\t\ttypeof entryParsed.editor.resource === \"string\"\n\t\t\t\t\t\t\t\t\t? URI.parse(entryParsed.editor.resource)\n\t\t\t\t\t\t\t\t\t: //  from 1.67.x: URI is stored efficiently as URI.toString()\n\t\t\t\t\t\t\t\t\t\tURI.from(entryParsed.editor.resource), // until 1.66.x: URI was stored very verbose as URI.toJSON()\n\t\t\t\t\t\t});\n\t\t\t\t\t} catch (error) {\n\t\t\t\t\t\tonUnexpectedError(error); // do not fail entire history when one entry fails\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} catch (error) {\n\t\t\t\tonUnexpectedError(error); // https://github.com/microsoft/vscode/issues/99075\n\t\t\t}\n\t\t}\n\n\t\treturn entries;\n\t}\n\n\tprivate saveState(): void {\n\t\tif (!this.history) {\n\t\t\treturn; // nothing to save because history was not used\n\t\t}\n\n\t\tconst entries: ISerializedEditorHistoryEntry[] = [];\n\t\tfor (const editor of this.history) {\n\t\t\tif (isEditorInput(editor) || !isResourceEditorInput(editor)) {\n\t\t\t\tcontinue; // only save resource editor inputs\n\t\t\t}\n\n\t\t\tentries.push({\n\t\t\t\teditor: {\n\t\t\t\t\t...editor,\n\t\t\t\t\tresource: editor.resource.toString(),\n\t\t\t\t},\n\t\t\t});\n\t\t}\n\n\t\tthis.storageService.store(\n\t\t\tHistoryService.HISTORY_STORAGE_KEY,\n\t\t\tJSON.stringify(entries),\n\t\t\tStorageScope.WORKSPACE,\n\t\t\tStorageTarget.MACHINE,\n\t\t);\n\t}\n\n\t//#endregion\n\n\t//#region Last Active Workspace/File\n\n\tgetLastActiveWorkspaceRoot(\n\t\tschemeFilter?: string,\n\t\tauthorityFilter?: string,\n\t): URI | undefined {\n\t\t// No Folder: return early\n\t\tconst folders = this.contextService.getWorkspace().folders;\n\t\tif (folders.length === 0) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\t// Single Folder: return early\n\t\tif (folders.length === 1) {\n\t\t\tconst resource = folders[0].uri;\n\t\t\tif (\n\t\t\t\t(!schemeFilter || resource.scheme === schemeFilter) &&\n\t\t\t\t(!authorityFilter || resource.authority === authorityFilter)\n\t\t\t) {\n\t\t\t\treturn resource;\n\t\t\t}\n\n\t\t\treturn undefined;\n\t\t}\n\n\t\t// Multiple folders: find the last active one\n\t\tfor (const input of this.getHistory()) {\n\t\t\tif (isEditorInput(input)) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif (schemeFilter && input.resource.scheme !== schemeFilter) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif (\n\t\t\t\tauthorityFilter &&\n\t\t\t\tinput.resource.authority !== authorityFilter\n\t\t\t) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tconst resourceWorkspace = this.contextService.getWorkspaceFolder(\n\t\t\t\tinput.resource,\n\t\t\t);\n\t\t\tif (resourceWorkspace) {\n\t\t\t\treturn resourceWorkspace.uri;\n\t\t\t}\n\t\t}\n\n\t\t// Fallback to first workspace matching scheme filter if any\n\t\tfor (const folder of folders) {\n\t\t\tconst resource = folder.uri;\n\t\t\tif (\n\t\t\t\t(!schemeFilter || resource.scheme === schemeFilter) &&\n\t\t\t\t(!authorityFilter || resource.authority === authorityFilter)\n\t\t\t) {\n\t\t\t\treturn resource;\n\t\t\t}\n\t\t}\n\n\t\treturn undefined;\n\t}\n\n\tgetLastActiveFile(\n\t\tfilterByScheme: string,\n\t\tfilterByAuthority?: string,\n\t): URI | undefined {\n\t\tfor (const input of this.getHistory()) {\n\t\t\tlet resource: URI | undefined;\n\t\t\tif (isEditorInput(input)) {\n\t\t\t\tresource = EditorResourceAccessor.getOriginalUri(input, {\n\t\t\t\t\tfilterByScheme,\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tresource = input.resource;\n\t\t\t}\n\n\t\t\tif (\n\t\t\t\tresource &&\n\t\t\t\tresource.scheme === filterByScheme &&\n\t\t\t\t(!filterByAuthority || resource.authority === filterByAuthority)\n\t\t\t) {\n\t\t\t\treturn resource;\n\t\t\t}\n\t\t}\n\n\t\treturn undefined;\n\t}\n\n\t//#endregion\n\n\toverride dispose(): void {\n\t\tsuper.dispose();\n\n\t\tfor (const [, stack] of this.editorGroupScopedNavigationStacks) {\n\t\t\tstack.disposable.dispose();\n\t\t}\n\n\t\tfor (const [, editors] of this.editorScopedNavigationStacks) {\n\t\t\tfor (const [, stack] of editors) {\n\t\t\t\tstack.disposable.dispose();\n\t\t\t}\n\t\t}\n\n\t\tfor (const [, listener] of this.editorHistoryListeners) {\n\t\t\tlistener.dispose();\n\t\t}\n\t}\n}\n\nregisterSingleton(IHistoryService, HistoryService, InstantiationType.Eager);\n\nclass EditorSelectionState {\n\tconstructor(\n\t\tprivate readonly editorIdentifier: IEditorIdentifier,\n\t\treadonly selection: IEditorPaneSelection | undefined,\n\t\tprivate readonly reason: EditorPaneSelectionChangeReason | undefined,\n\t) {}\n\n\tjustifiesNewNavigationEntry(other: EditorSelectionState): boolean {\n\t\tif (this.editorIdentifier.groupId !== other.editorIdentifier.groupId) {\n\t\t\treturn true; // different group\n\t\t}\n\n\t\tif (\n\t\t\t!this.editorIdentifier.editor.matches(other.editorIdentifier.editor)\n\t\t) {\n\t\t\treturn true; // different editor\n\t\t}\n\n\t\tif (!this.selection || !other.selection) {\n\t\t\treturn true; // unknown selections\n\t\t}\n\n\t\tconst result = this.selection.compare(other.selection);\n\n\t\tif (\n\t\t\tresult === EditorPaneSelectionCompareResult.SIMILAR &&\n\t\t\t(other.reason === EditorPaneSelectionChangeReason.NAVIGATION ||\n\t\t\t\tother.reason === EditorPaneSelectionChangeReason.JUMP)\n\t\t) {\n\t\t\t// let navigation sources win even if the selection is `SIMILAR`\n\t\t\t// (e.g. \"Go to definition\" should add a history entry)\n\t\t\treturn true;\n\t\t}\n\n\t\treturn result === EditorPaneSelectionCompareResult.DIFFERENT;\n\t}\n}\n\ninterface IEditorNavigationStacks extends IDisposable {\n\treadonly onDidChange: Event<void>;\n\n\tcanGoForward(filter?: GoFilter): boolean;\n\tgoForward(filter?: GoFilter): Promise<void>;\n\tcanGoBack(filter?: GoFilter): boolean;\n\tgoBack(filter?: GoFilter): Promise<void>;\n\tgoPrevious(filter?: GoFilter): Promise<void>;\n\tcanGoLast(filter?: GoFilter): boolean;\n\tgoLast(filter?: GoFilter): Promise<void>;\n\n\thandleActiveEditorChange(editorPane?: IEditorPane): void;\n\thandleActiveEditorSelectionChange(\n\t\teditorPane: IEditorPaneWithSelection,\n\t\tevent: IEditorPaneSelectionChangeEvent,\n\t): void;\n\n\tclear(): void;\n\tremove(\n\t\targ1:\n\t\t\t| EditorInput\n\t\t\t| FileChangesEvent\n\t\t\t| FileOperationEvent\n\t\t\t| GroupIdentifier,\n\t): void;\n\tmove(event: FileOperationEvent): void;\n}\n\nclass EditorNavigationStacks\n\textends Disposable\n\timplements IEditorNavigationStacks\n{\n\tprivate readonly selectionsStack = this._register(\n\t\tthis.instantiationService.createInstance(\n\t\t\tEditorNavigationStack,\n\t\t\tGoFilter.NONE,\n\t\t\tthis.scope,\n\t\t),\n\t);\n\tprivate readonly editsStack = this._register(\n\t\tthis.instantiationService.createInstance(\n\t\t\tEditorNavigationStack,\n\t\t\tGoFilter.EDITS,\n\t\t\tthis.scope,\n\t\t),\n\t);\n\tprivate readonly navigationsStack = this._register(\n\t\tthis.instantiationService.createInstance(\n\t\t\tEditorNavigationStack,\n\t\t\tGoFilter.NAVIGATION,\n\t\t\tthis.scope,\n\t\t),\n\t);\n\n\tprivate readonly stacks: EditorNavigationStack[] = [\n\t\tthis.selectionsStack,\n\t\tthis.editsStack,\n\t\tthis.navigationsStack,\n\t];\n\n\treadonly onDidChange = Event.any(\n\t\tthis.selectionsStack.onDidChange,\n\t\tthis.editsStack.onDidChange,\n\t\tthis.navigationsStack.onDidChange,\n\t);\n\n\tconstructor(\n\t\tprivate readonly scope: GoScope,\n\t\t@IInstantiationService\n\t\tprivate readonly instantiationService: IInstantiationService,\n\t) {\n\t\tsuper();\n\t}\n\n\tcanGoForward(filter?: GoFilter): boolean {\n\t\treturn this.getStack(filter).canGoForward();\n\t}\n\n\tgoForward(filter?: GoFilter): Promise<void> {\n\t\treturn this.getStack(filter).goForward();\n\t}\n\n\tcanGoBack(filter?: GoFilter): boolean {\n\t\treturn this.getStack(filter).canGoBack();\n\t}\n\n\tgoBack(filter?: GoFilter): Promise<void> {\n\t\treturn this.getStack(filter).goBack();\n\t}\n\n\tgoPrevious(filter?: GoFilter): Promise<void> {\n\t\treturn this.getStack(filter).goPrevious();\n\t}\n\n\tcanGoLast(filter?: GoFilter): boolean {\n\t\treturn this.getStack(filter).canGoLast();\n\t}\n\n\tgoLast(filter?: GoFilter): Promise<void> {\n\t\treturn this.getStack(filter).goLast();\n\t}\n\n\tprivate getStack(filter = GoFilter.NONE): EditorNavigationStack {\n\t\tswitch (filter) {\n\t\t\tcase GoFilter.NONE:\n\t\t\t\treturn this.selectionsStack;\n\t\t\tcase GoFilter.EDITS:\n\t\t\t\treturn this.editsStack;\n\t\t\tcase GoFilter.NAVIGATION:\n\t\t\t\treturn this.navigationsStack;\n\t\t}\n\t}\n\n\thandleActiveEditorChange(editorPane?: IEditorPane): void {\n\t\t// Always send to selections navigation stack\n\t\tthis.selectionsStack.notifyNavigation(editorPane);\n\t}\n\n\thandleActiveEditorSelectionChange(\n\t\teditorPane: IEditorPaneWithSelection,\n\t\tevent: IEditorPaneSelectionChangeEvent,\n\t): void {\n\t\tconst previous = this.selectionsStack.current;\n\n\t\t// Always send to selections navigation stack\n\t\tthis.selectionsStack.notifyNavigation(editorPane, event);\n\n\t\t// Check for edits\n\t\tif (event.reason === EditorPaneSelectionChangeReason.EDIT) {\n\t\t\tthis.editsStack.notifyNavigation(editorPane, event);\n\t\t}\n\n\t\t// Check for navigations\n\t\t//\n\t\t// Note: ignore if selections navigation stack is navigating because\n\t\t// in that case we do not want to receive repeated entries in\n\t\t// the navigation stack.\n\t\telse if (\n\t\t\t(event.reason === EditorPaneSelectionChangeReason.NAVIGATION ||\n\t\t\t\tevent.reason === EditorPaneSelectionChangeReason.JUMP) &&\n\t\t\t!this.selectionsStack.isNavigating()\n\t\t) {\n\t\t\t// A \"JUMP\" navigation selection change always has a source and\n\t\t\t// target. As such, we add the previous entry of the selections\n\t\t\t// navigation stack so that our navigation stack receives both\n\t\t\t// entries unless the user is currently navigating.\n\n\t\t\tif (\n\t\t\t\tevent.reason === EditorPaneSelectionChangeReason.JUMP &&\n\t\t\t\t!this.navigationsStack.isNavigating()\n\t\t\t) {\n\t\t\t\tif (previous) {\n\t\t\t\t\tthis.navigationsStack.addOrReplace(\n\t\t\t\t\t\tprevious.groupId,\n\t\t\t\t\t\tprevious.editor,\n\t\t\t\t\t\tprevious.selection,\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.navigationsStack.notifyNavigation(editorPane, event);\n\t\t}\n\t}\n\n\tclear(): void {\n\t\tfor (const stack of this.stacks) {\n\t\t\tstack.clear();\n\t\t}\n\t}\n\n\tremove(\n\t\targ1:\n\t\t\t| EditorInput\n\t\t\t| FileChangesEvent\n\t\t\t| FileOperationEvent\n\t\t\t| GroupIdentifier,\n\t): void {\n\t\tfor (const stack of this.stacks) {\n\t\t\tstack.remove(arg1);\n\t\t}\n\t}\n\n\tmove(event: FileOperationEvent): void {\n\t\tfor (const stack of this.stacks) {\n\t\t\tstack.move(event);\n\t\t}\n\t}\n}\n\nclass NoOpEditorNavigationStacks implements IEditorNavigationStacks {\n\tonDidChange = Event.None;\n\n\tcanGoForward(): boolean {\n\t\treturn false;\n\t}\n\tasync goForward(): Promise<void> {}\n\tcanGoBack(): boolean {\n\t\treturn false;\n\t}\n\tasync goBack(): Promise<void> {}\n\tasync goPrevious(): Promise<void> {}\n\tcanGoLast(): boolean {\n\t\treturn false;\n\t}\n\tasync goLast(): Promise<void> {}\n\n\thandleActiveEditorChange(): void {}\n\thandleActiveEditorSelectionChange(): void {}\n\n\tclear(): void {}\n\tremove(): void {}\n\tmove(): void {}\n\n\tdispose(): void {}\n}\n\ninterface IEditorNavigationStackEntry {\n\tgroupId: GroupIdentifier;\n\teditor: EditorInput | IResourceEditorInput;\n\tselection?: IEditorPaneSelection;\n}\n\nexport class EditorNavigationStack extends Disposable {\n\tprivate static readonly MAX_STACK_SIZE = 50;\n\n\tprivate readonly _onDidChange = this._register(new Emitter<void>());\n\treadonly onDidChange = this._onDidChange.event;\n\n\tprivate readonly mapEditorToDisposable = new Map<\n\t\tEditorInput,\n\t\tDisposableStore\n\t>();\n\tprivate readonly mapGroupToDisposable = new Map<\n\t\tGroupIdentifier,\n\t\tIDisposable\n\t>();\n\n\tprivate readonly editorHelper =\n\t\tthis.instantiationService.createInstance(EditorHelper);\n\n\tprivate stack: IEditorNavigationStackEntry[] = [];\n\n\tprivate index = -1;\n\tprivate previousIndex = -1;\n\n\tprivate navigating = false;\n\n\tprivate currentSelectionState: EditorSelectionState | undefined = undefined;\n\n\tget current(): IEditorNavigationStackEntry | undefined {\n\t\treturn this.stack[this.index];\n\t}\n\n\tprivate set current(entry: IEditorNavigationStackEntry | undefined) {\n\t\tif (entry) {\n\t\t\tthis.stack[this.index] = entry;\n\t\t}\n\t}\n\n\tconstructor(\n\t\tprivate readonly filter: GoFilter,\n\t\tprivate readonly scope: GoScope,\n\t\t@IInstantiationService\n\t\tprivate readonly instantiationService: IInstantiationService,\n\t\t@IEditorService private readonly editorService: IEditorService,\n\t\t@IEditorGroupsService\n\t\tprivate readonly editorGroupService: IEditorGroupsService,\n\t\t@ILogService private readonly logService: ILogService,\n\t) {\n\t\tsuper();\n\n\t\tthis.registerListeners();\n\t}\n\n\tprivate registerListeners(): void {\n\t\tthis._register(this.onDidChange(() => this.traceStack()));\n\t\tthis._register(\n\t\t\tthis.logService.onDidChangeLogLevel(() => this.traceStack()),\n\t\t);\n\t}\n\n\tprivate traceStack(): void {\n\t\tif (this.logService.getLevel() !== LogLevel.Trace) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst entryLabels: string[] = [];\n\t\tfor (const entry of this.stack) {\n\t\t\tif (typeof entry.selection?.log === \"function\") {\n\t\t\t\tentryLabels.push(\n\t\t\t\t\t`- group: ${entry.groupId}, editor: ${entry.editor.resource?.toString()}, selection: ${entry.selection.log()}`,\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\tentryLabels.push(\n\t\t\t\t\t`- group: ${entry.groupId}, editor: ${entry.editor.resource?.toString()}, selection: <none>`,\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\tif (entryLabels.length === 0) {\n\t\t\tthis.trace(\n\t\t\t\t`index: ${this.index}, navigating: ${this.isNavigating()}: <empty>`,\n\t\t\t);\n\t\t} else {\n\t\t\tthis.trace(`index: ${this.index}, navigating: ${this.isNavigating()}\n${entryLabels.join(\"\\n\")}\n\t\t\t`);\n\t\t}\n\t}\n\n\tprivate trace(\n\t\tmsg: string,\n\t\teditor: EditorInput | IResourceEditorInput | undefined | null = null,\n\t\tevent?: IEditorPaneSelectionChangeEvent,\n\t): void {\n\t\tif (this.logService.getLevel() !== LogLevel.Trace) {\n\t\t\treturn;\n\t\t}\n\n\t\tlet filterLabel: string;\n\t\tswitch (this.filter) {\n\t\t\tcase GoFilter.NONE:\n\t\t\t\tfilterLabel = \"global\";\n\t\t\t\tbreak;\n\t\t\tcase GoFilter.EDITS:\n\t\t\t\tfilterLabel = \"edits\";\n\t\t\t\tbreak;\n\t\t\tcase GoFilter.NAVIGATION:\n\t\t\t\tfilterLabel = \"navigation\";\n\t\t\t\tbreak;\n\t\t}\n\n\t\tlet scopeLabel: string;\n\t\tswitch (this.scope) {\n\t\t\tcase GoScope.DEFAULT:\n\t\t\t\tscopeLabel = \"default\";\n\t\t\t\tbreak;\n\t\t\tcase GoScope.EDITOR_GROUP:\n\t\t\t\tscopeLabel = \"editorGroup\";\n\t\t\t\tbreak;\n\t\t\tcase GoScope.EDITOR:\n\t\t\t\tscopeLabel = \"editor\";\n\t\t\t\tbreak;\n\t\t}\n\n\t\tif (editor !== null) {\n\t\t\tthis.logService.trace(\n\t\t\t\t`[History stack ${filterLabel}-${scopeLabel}]: ${msg} (editor: ${editor?.resource?.toString()}, event: ${this.traceEvent(event)})`,\n\t\t\t);\n\t\t} else {\n\t\t\tthis.logService.trace(\n\t\t\t\t`[History stack ${filterLabel}-${scopeLabel}]: ${msg}`,\n\t\t\t);\n\t\t}\n\t}\n\n\tprivate traceEvent(event?: IEditorPaneSelectionChangeEvent): string {\n\t\tif (!event) {\n\t\t\treturn \"<none>\";\n\t\t}\n\n\t\tswitch (event.reason) {\n\t\t\tcase EditorPaneSelectionChangeReason.EDIT:\n\t\t\t\treturn \"edit\";\n\t\t\tcase EditorPaneSelectionChangeReason.NAVIGATION:\n\t\t\t\treturn \"navigation\";\n\t\t\tcase EditorPaneSelectionChangeReason.JUMP:\n\t\t\t\treturn \"jump\";\n\t\t\tcase EditorPaneSelectionChangeReason.PROGRAMMATIC:\n\t\t\t\treturn \"programmatic\";\n\t\t\tcase EditorPaneSelectionChangeReason.USER:\n\t\t\t\treturn \"user\";\n\t\t}\n\t}\n\n\tprivate registerGroupListeners(groupId: GroupIdentifier): void {\n\t\tif (!this.mapGroupToDisposable.has(groupId)) {\n\t\t\tconst group = this.editorGroupService.getGroup(groupId);\n\t\t\tif (group) {\n\t\t\t\tthis.mapGroupToDisposable.set(\n\t\t\t\t\tgroupId,\n\t\t\t\t\tgroup.onWillMoveEditor((e) => this.onWillMoveEditor(e)),\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate onWillMoveEditor(e: IEditorWillMoveEvent): void {\n\t\tthis.trace(\"onWillMoveEditor()\", e.editor);\n\n\t\tif (this.scope === GoScope.EDITOR_GROUP) {\n\t\t\treturn; // ignore move events if our scope is group based\n\t\t}\n\n\t\tfor (const entry of this.stack) {\n\t\t\tif (entry.groupId !== e.groupId) {\n\t\t\t\tcontinue; // not in the group that reported the event\n\t\t\t}\n\n\t\t\tif (!this.editorHelper.matchesEditor(e.editor, entry.editor)) {\n\t\t\t\tcontinue; // not the editor this event is about\n\t\t\t}\n\n\t\t\t// Update to target group\n\t\t\tentry.groupId = e.target;\n\t\t}\n\t}\n\n\t//#region Stack Mutation\n\n\tnotifyNavigation(\n\t\teditorPane: IEditorPane | undefined,\n\t\tevent?: IEditorPaneSelectionChangeEvent,\n\t): void {\n\t\tthis.trace(\"notifyNavigation()\", editorPane?.input, event);\n\n\t\tconst isSelectionAwareEditorPane =\n\t\t\tisEditorPaneWithSelection(editorPane);\n\t\tconst hasValidEditor =\n\t\t\teditorPane?.input && !editorPane.input.isDisposed();\n\n\t\t// Treat editor changes that happen as part of stack navigation specially\n\t\t// we do not want to add a new stack entry as a matter of navigating the\n\t\t// stack but we need to keep our currentEditorSelectionState up to date\n\t\t// with the navigtion that occurs.\n\t\tif (this.navigating) {\n\t\t\tthis.trace(\n\t\t\t\t`notifyNavigation() ignoring (navigating)`,\n\t\t\t\teditorPane?.input,\n\t\t\t\tevent,\n\t\t\t);\n\n\t\t\tif (isSelectionAwareEditorPane && hasValidEditor) {\n\t\t\t\tthis.trace(\n\t\t\t\t\t\"notifyNavigation() updating current selection state\",\n\t\t\t\t\teditorPane?.input,\n\t\t\t\t\tevent,\n\t\t\t\t);\n\n\t\t\t\tthis.currentSelectionState = new EditorSelectionState(\n\t\t\t\t\t{ groupId: editorPane.group.id, editor: editorPane.input },\n\t\t\t\t\teditorPane.getSelection(),\n\t\t\t\t\tevent?.reason,\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\tthis.trace(\n\t\t\t\t\t\"notifyNavigation() dropping current selection state\",\n\t\t\t\t\teditorPane?.input,\n\t\t\t\t\tevent,\n\t\t\t\t);\n\n\t\t\t\tthis.currentSelectionState = undefined; // we navigated to a non-selection aware or disposed editor\n\t\t\t}\n\t\t}\n\n\t\t// Normal navigation not part of stack navigation\n\t\telse {\n\t\t\tthis.trace(\n\t\t\t\t`notifyNavigation() not ignoring`,\n\t\t\t\teditorPane?.input,\n\t\t\t\tevent,\n\t\t\t);\n\n\t\t\t// Navigation inside selection aware editor\n\t\t\tif (isSelectionAwareEditorPane && hasValidEditor) {\n\t\t\t\tthis.onSelectionAwareEditorNavigation(\n\t\t\t\t\teditorPane.group.id,\n\t\t\t\t\teditorPane.input,\n\t\t\t\t\teditorPane.getSelection(),\n\t\t\t\t\tevent,\n\t\t\t\t);\n\t\t\t}\n\n\t\t\t// Navigation to non-selection aware or disposed editor\n\t\t\telse {\n\t\t\t\tthis.currentSelectionState = undefined; // at this time we have no active selection aware editor\n\n\t\t\t\tif (hasValidEditor) {\n\t\t\t\t\tthis.onNonSelectionAwareEditorNavigation(\n\t\t\t\t\t\teditorPane.group.id,\n\t\t\t\t\t\teditorPane.input,\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate onSelectionAwareEditorNavigation(\n\t\tgroupId: GroupIdentifier,\n\t\teditor: EditorInput,\n\t\tselection: IEditorPaneSelection | undefined,\n\t\tevent?: IEditorPaneSelectionChangeEvent,\n\t): void {\n\t\tif (\n\t\t\tthis.current?.groupId === groupId &&\n\t\t\t!selection &&\n\t\t\tthis.editorHelper.matchesEditor(this.current.editor, editor)\n\t\t) {\n\t\t\treturn; // do not push same editor input again of same group if we have no valid selection\n\t\t}\n\n\t\tthis.trace(\"onSelectionAwareEditorNavigation()\", editor, event);\n\n\t\tconst stateCandidate = new EditorSelectionState(\n\t\t\t{ groupId, editor },\n\t\t\tselection,\n\t\t\tevent?.reason,\n\t\t);\n\n\t\t// Add to stack if we dont have a current state or this new state justifies a push\n\t\tif (\n\t\t\t!this.currentSelectionState ||\n\t\t\tthis.currentSelectionState.justifiesNewNavigationEntry(\n\t\t\t\tstateCandidate,\n\t\t\t)\n\t\t) {\n\t\t\tthis.doAdd(groupId, editor, stateCandidate.selection);\n\t\t}\n\n\t\t// Otherwise we replace the current stack entry with this one\n\t\telse {\n\t\t\tthis.doReplace(groupId, editor, stateCandidate.selection);\n\t\t}\n\n\t\t// Update our current navigation editor state\n\t\tthis.currentSelectionState = stateCandidate;\n\t}\n\n\tprivate onNonSelectionAwareEditorNavigation(\n\t\tgroupId: GroupIdentifier,\n\t\teditor: EditorInput,\n\t): void {\n\t\tif (\n\t\t\tthis.current?.groupId === groupId &&\n\t\t\tthis.editorHelper.matchesEditor(this.current.editor, editor)\n\t\t) {\n\t\t\treturn; // do not push same editor input again of same group\n\t\t}\n\n\t\tthis.trace(\"onNonSelectionAwareEditorNavigation()\", editor);\n\n\t\tthis.doAdd(groupId, editor);\n\t}\n\n\tprivate doAdd(\n\t\tgroupId: GroupIdentifier,\n\t\teditor: EditorInput | IResourceEditorInput,\n\t\tselection?: IEditorPaneSelection,\n\t): void {\n\t\tif (!this.navigating) {\n\t\t\tthis.addOrReplace(groupId, editor, selection);\n\t\t}\n\t}\n\n\tprivate doReplace(\n\t\tgroupId: GroupIdentifier,\n\t\teditor: EditorInput | IResourceEditorInput,\n\t\tselection?: IEditorPaneSelection,\n\t): void {\n\t\tif (!this.navigating) {\n\t\t\tthis.addOrReplace(\n\t\t\t\tgroupId,\n\t\t\t\teditor,\n\t\t\t\tselection,\n\t\t\t\ttrue /* force replace */,\n\t\t\t);\n\t\t}\n\t}\n\n\taddOrReplace(\n\t\tgroupId: GroupIdentifier,\n\t\teditorCandidate: EditorInput | IResourceEditorInput,\n\t\tselection?: IEditorPaneSelection,\n\t\tforceReplace?: boolean,\n\t): void {\n\t\t// Ensure we listen to changes in group\n\t\tthis.registerGroupListeners(groupId);\n\n\t\t// Check whether to replace an existing entry or not\n\t\tlet replace = false;\n\t\tif (this.current) {\n\t\t\tif (forceReplace) {\n\t\t\t\treplace = true; // replace if we are forced to\n\t\t\t} else if (\n\t\t\t\tthis.shouldReplaceStackEntry(this.current, {\n\t\t\t\t\tgroupId,\n\t\t\t\t\teditor: editorCandidate,\n\t\t\t\t\tselection,\n\t\t\t\t})\n\t\t\t) {\n\t\t\t\treplace = true; // replace if the group & input is the same and selection indicates as such\n\t\t\t}\n\t\t}\n\n\t\tconst editor =\n\t\t\tthis.editorHelper.preferResourceEditorInput(editorCandidate);\n\t\tif (!editor) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (replace) {\n\t\t\tthis.trace(\"replace()\", editor);\n\t\t} else {\n\t\t\tthis.trace(\"add()\", editor);\n\t\t}\n\n\t\tconst newStackEntry: IEditorNavigationStackEntry = {\n\t\t\tgroupId,\n\t\t\teditor,\n\t\t\tselection,\n\t\t};\n\n\t\t// Replace at current position\n\t\tconst removedEntries: IEditorNavigationStackEntry[] = [];\n\t\tif (replace) {\n\t\t\tif (this.current) {\n\t\t\t\tremovedEntries.push(this.current);\n\t\t\t}\n\t\t\tthis.current = newStackEntry;\n\t\t}\n\n\t\t// Add to stack at current position\n\t\telse {\n\t\t\t// If we are not at the end of history, we remove anything after\n\t\t\tif (this.stack.length > this.index + 1) {\n\t\t\t\tfor (let i = this.index + 1; i < this.stack.length; i++) {\n\t\t\t\t\tremovedEntries.push(this.stack[i]);\n\t\t\t\t}\n\n\t\t\t\tthis.stack = this.stack.slice(0, this.index + 1);\n\t\t\t}\n\n\t\t\t// Insert entry at index\n\t\t\tthis.stack.splice(this.index + 1, 0, newStackEntry);\n\n\t\t\t// Check for limit\n\t\t\tif (this.stack.length > EditorNavigationStack.MAX_STACK_SIZE) {\n\t\t\t\tremovedEntries.push(this.stack.shift()!); // remove first\n\t\t\t\tif (this.previousIndex >= 0) {\n\t\t\t\t\tthis.previousIndex--;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthis.setIndex(\n\t\t\t\t\tthis.index + 1,\n\t\t\t\t\ttrue /* skip event, we fire it later */,\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\t// Clear editor listeners from removed entries\n\t\tfor (const removedEntry of removedEntries) {\n\t\t\tthis.editorHelper.clearOnEditorDispose(\n\t\t\t\tremovedEntry.editor,\n\t\t\t\tthis.mapEditorToDisposable,\n\t\t\t);\n\t\t}\n\n\t\t// Remove this from the stack unless the stack input is a resource\n\t\t// that can easily be restored even when the input gets disposed\n\t\tif (isEditorInput(editor)) {\n\t\t\tthis.editorHelper.onEditorDispose(\n\t\t\t\teditor,\n\t\t\t\t() => this.remove(editor),\n\t\t\t\tthis.mapEditorToDisposable,\n\t\t\t);\n\t\t}\n\n\t\t// Event\n\t\tthis._onDidChange.fire();\n\t}\n\n\tprivate shouldReplaceStackEntry(\n\t\tentry: IEditorNavigationStackEntry,\n\t\tcandidate: IEditorNavigationStackEntry,\n\t): boolean {\n\t\tif (entry.groupId !== candidate.groupId) {\n\t\t\treturn false; // different group\n\t\t}\n\n\t\tif (!this.editorHelper.matchesEditor(entry.editor, candidate.editor)) {\n\t\t\treturn false; // different editor\n\t\t}\n\n\t\tif (!entry.selection) {\n\t\t\treturn true; // always replace when we have no specific selection yet\n\t\t}\n\n\t\tif (!candidate.selection) {\n\t\t\treturn false; // otherwise, prefer to keep existing specific selection over new unspecific one\n\t\t}\n\n\t\t// Finally, replace when selections are considered identical\n\t\treturn (\n\t\t\tentry.selection.compare(candidate.selection) ===\n\t\t\tEditorPaneSelectionCompareResult.IDENTICAL\n\t\t);\n\t}\n\n\tmove(event: FileOperationEvent): void {\n\t\tif (event.isOperation(FileOperation.MOVE)) {\n\t\t\tfor (const entry of this.stack) {\n\t\t\t\tif (this.editorHelper.matchesEditor(event, entry.editor)) {\n\t\t\t\t\tentry.editor = { resource: event.target.resource };\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tremove(\n\t\targ1:\n\t\t\t| EditorInput\n\t\t\t| FileChangesEvent\n\t\t\t| FileOperationEvent\n\t\t\t| GroupIdentifier,\n\t): void {\n\t\tconst previousStackSize = this.stack.length;\n\n\t\t// Remove all stack entries that match `arg1`\n\t\tthis.stack = this.stack.filter((entry) => {\n\t\t\tconst matches =\n\t\t\t\ttypeof arg1 === \"number\"\n\t\t\t\t\t? entry.groupId === arg1\n\t\t\t\t\t: this.editorHelper.matchesEditor(arg1, entry.editor);\n\n\t\t\t// Cleanup any listeners associated with the input when removing\n\t\t\tif (matches) {\n\t\t\t\tthis.editorHelper.clearOnEditorDispose(\n\t\t\t\t\tentry.editor,\n\t\t\t\t\tthis.mapEditorToDisposable,\n\t\t\t\t);\n\t\t\t}\n\n\t\t\treturn !matches;\n\t\t});\n\n\t\tif (previousStackSize === this.stack.length) {\n\t\t\treturn; // nothing removed\n\t\t}\n\n\t\t// Given we just removed entries, we need to make sure\n\t\t// to remove entries that are now identical and next\n\t\t// to each other to prevent no-op navigations.\n\t\tthis.flatten();\n\n\t\t// Reset indeces\n\t\tthis.index = this.stack.length - 1;\n\t\tthis.previousIndex = -1;\n\n\t\t// Clear group listener\n\t\tif (typeof arg1 === \"number\") {\n\t\t\tthis.mapGroupToDisposable.get(arg1)?.dispose();\n\t\t\tthis.mapGroupToDisposable.delete(arg1);\n\t\t}\n\n\t\t// Event\n\t\tthis._onDidChange.fire();\n\t}\n\n\tprivate flatten(): void {\n\t\tconst flattenedStack: IEditorNavigationStackEntry[] = [];\n\n\t\tlet previousEntry: IEditorNavigationStackEntry | undefined;\n\t\tfor (const entry of this.stack) {\n\t\t\tif (\n\t\t\t\tpreviousEntry &&\n\t\t\t\tthis.shouldReplaceStackEntry(entry, previousEntry)\n\t\t\t) {\n\t\t\t\tcontinue; // skip over entry when it is considered the same\n\t\t\t}\n\n\t\t\tpreviousEntry = entry;\n\t\t\tflattenedStack.push(entry);\n\t\t}\n\n\t\tthis.stack = flattenedStack;\n\t}\n\n\tclear(): void {\n\t\tthis.index = -1;\n\t\tthis.previousIndex = -1;\n\t\tthis.stack.splice(0);\n\n\t\tfor (const [, disposable] of this.mapEditorToDisposable) {\n\t\t\tdispose(disposable);\n\t\t}\n\t\tthis.mapEditorToDisposable.clear();\n\n\t\tfor (const [, disposable] of this.mapGroupToDisposable) {\n\t\t\tdispose(disposable);\n\t\t}\n\t\tthis.mapGroupToDisposable.clear();\n\t}\n\n\toverride dispose(): void {\n\t\tsuper.dispose();\n\n\t\tthis.clear();\n\t}\n\n\t//#endregion\n\n\t//#region Navigation\n\n\tcanGoForward(): boolean {\n\t\treturn this.stack.length > this.index + 1;\n\t}\n\n\tasync goForward(): Promise<void> {\n\t\tconst navigated = await this.maybeGoCurrent();\n\t\tif (navigated) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (!this.canGoForward()) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.setIndex(this.index + 1);\n\t\treturn this.navigate();\n\t}\n\n\tcanGoBack(): boolean {\n\t\treturn this.index > 0;\n\t}\n\n\tasync goBack(): Promise<void> {\n\t\tconst navigated = await this.maybeGoCurrent();\n\t\tif (navigated) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (!this.canGoBack()) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.setIndex(this.index - 1);\n\t\treturn this.navigate();\n\t}\n\n\tasync goPrevious(): Promise<void> {\n\t\tconst navigated = await this.maybeGoCurrent();\n\t\tif (navigated) {\n\t\t\treturn;\n\t\t}\n\n\t\t// If we never navigated, just go back\n\t\tif (this.previousIndex === -1) {\n\t\t\treturn this.goBack();\n\t\t}\n\n\t\t// Otherwise jump to previous stack entry\n\t\tthis.setIndex(this.previousIndex);\n\t\treturn this.navigate();\n\t}\n\n\tcanGoLast(): boolean {\n\t\treturn this.stack.length > 0;\n\t}\n\n\tasync goLast(): Promise<void> {\n\t\tif (!this.canGoLast()) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.setIndex(this.stack.length - 1);\n\t\treturn this.navigate();\n\t}\n\n\tprivate async maybeGoCurrent(): Promise<boolean> {\n\t\t// When this navigation stack works with a specific\n\t\t// filter where not every selection change is added\n\t\t// to the stack, we want to first reveal the current\n\t\t// selection before attempting to navigate in the\n\t\t// stack.\n\n\t\tif (this.filter === GoFilter.NONE) {\n\t\t\treturn false; // only applies when  we are a filterd stack\n\t\t}\n\n\t\tif (this.isCurrentSelectionActive()) {\n\t\t\treturn false; // we are at the current navigation stop\n\t\t}\n\n\t\t// Go to current selection\n\t\tawait this.navigate();\n\n\t\treturn true;\n\t}\n\n\tprivate isCurrentSelectionActive(): boolean {\n\t\tif (!this.current?.selection) {\n\t\t\treturn false; // we need a current selection\n\t\t}\n\n\t\tconst pane = this.editorService.activeEditorPane;\n\t\tif (!isEditorPaneWithSelection(pane)) {\n\t\t\treturn false; // we need an active editor pane with selection support\n\t\t}\n\n\t\tif (pane.group.id !== this.current.groupId) {\n\t\t\treturn false; // we need matching groups\n\t\t}\n\n\t\tif (\n\t\t\t!pane.input ||\n\t\t\t!this.editorHelper.matchesEditor(pane.input, this.current.editor)\n\t\t) {\n\t\t\treturn false; // we need matching editors\n\t\t}\n\n\t\tconst paneSelection = pane.getSelection();\n\t\tif (!paneSelection) {\n\t\t\treturn false; // we need a selection to compare with\n\t\t}\n\n\t\treturn (\n\t\t\tpaneSelection.compare(this.current.selection) ===\n\t\t\tEditorPaneSelectionCompareResult.IDENTICAL\n\t\t);\n\t}\n\n\tprivate setIndex(newIndex: number, skipEvent?: boolean): void {\n\t\tthis.previousIndex = this.index;\n\t\tthis.index = newIndex;\n\n\t\t// Event\n\t\tif (!skipEvent) {\n\t\t\tthis._onDidChange.fire();\n\t\t}\n\t}\n\n\tprivate async navigate(): Promise<void> {\n\t\tthis.navigating = true;\n\n\t\ttry {\n\t\t\tif (this.current) {\n\t\t\t\tawait this.doNavigate(this.current);\n\t\t\t}\n\t\t} finally {\n\t\t\tthis.navigating = false;\n\t\t}\n\t}\n\n\tprivate doNavigate(\n\t\tlocation: IEditorNavigationStackEntry,\n\t): Promise<IEditorPane | undefined> {\n\t\tlet options: IEditorOptions = Object.create(null);\n\n\t\t// Apply selection if any\n\t\tif (location.selection) {\n\t\t\toptions = location.selection.restore(options);\n\t\t}\n\n\t\tif (isEditorInput(location.editor)) {\n\t\t\treturn this.editorService.openEditor(\n\t\t\t\tlocation.editor,\n\t\t\t\toptions,\n\t\t\t\tlocation.groupId,\n\t\t\t);\n\t\t}\n\n\t\treturn this.editorService.openEditor(\n\t\t\t{\n\t\t\t\t...location.editor,\n\t\t\t\toptions: {\n\t\t\t\t\t...location.editor.options,\n\t\t\t\t\t...options,\n\t\t\t\t},\n\t\t\t},\n\t\t\tlocation.groupId,\n\t\t);\n\t}\n\n\tisNavigating(): boolean {\n\t\treturn this.navigating;\n\t}\n\n\t//#endregion\n}\n\nclass EditorHelper {\n\tconstructor(\n\t\t@IUriIdentityService\n\t\tprivate readonly uriIdentityService: IUriIdentityService,\n\t\t@ILifecycleService private readonly lifecycleService: ILifecycleService,\n\t\t@IFileService private readonly fileService: IFileService,\n\t\t@IPathService private readonly pathService: IPathService,\n\t) {}\n\n\tpreferResourceEditorInput(\n\t\teditor: EditorInput,\n\t): EditorInput | IResourceEditorInput;\n\tpreferResourceEditorInput(\n\t\teditor: IResourceEditorInput,\n\t): IResourceEditorInput | undefined;\n\tpreferResourceEditorInput(\n\t\teditor: EditorInput | IResourceEditorInput,\n\t): EditorInput | IResourceEditorInput | undefined;\n\tpreferResourceEditorInput(\n\t\teditor: EditorInput | IResourceEditorInput,\n\t): EditorInput | IResourceEditorInput | undefined {\n\t\tconst resource = EditorResourceAccessor.getOriginalUri(editor);\n\n\t\t// For now, only prefer well known schemes that we control to prevent\n\t\t// issues such as https://github.com/microsoft/vscode/issues/85204\n\t\t// from being used as resource inputs\n\t\t// resource inputs survive editor disposal and as such are a lot more\n\t\t// durable across editor changes and restarts\n\t\tconst hasValidResourceEditorInputScheme =\n\t\t\tresource?.scheme === Schemas.file ||\n\t\t\tresource?.scheme === Schemas.vscodeRemote ||\n\t\t\tresource?.scheme === Schemas.vscodeUserData ||\n\t\t\tresource?.scheme === this.pathService.defaultUriScheme;\n\n\t\t// Scheme is valid: prefer the untyped input\n\t\t// over the typed input if possible to keep\n\t\t// the entry across restarts\n\t\tif (hasValidResourceEditorInputScheme) {\n\t\t\tif (isEditorInput(editor)) {\n\t\t\t\tconst untypedInput = editor.toUntyped();\n\t\t\t\tif (isResourceEditorInput(untypedInput)) {\n\t\t\t\t\treturn untypedInput;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn editor;\n\t\t}\n\n\t\t// Scheme is invalid: allow the editor input\n\t\t// for as long as it is not disposed\n\t\telse {\n\t\t\treturn isEditorInput(editor) ? editor : undefined;\n\t\t}\n\t}\n\n\tmatchesEditor(\n\t\targ1:\n\t\t\t| EditorInput\n\t\t\t| IResourceEditorInput\n\t\t\t| FileChangesEvent\n\t\t\t| FileOperationEvent,\n\t\tinputB: EditorInput | IResourceEditorInput,\n\t): boolean {\n\t\tif (\n\t\t\targ1 instanceof FileChangesEvent ||\n\t\t\targ1 instanceof FileOperationEvent\n\t\t) {\n\t\t\tif (isEditorInput(inputB)) {\n\t\t\t\treturn false; // we only support this for `IResourceEditorInputs` that are file based\n\t\t\t}\n\n\t\t\tif (arg1 instanceof FileChangesEvent) {\n\t\t\t\treturn arg1.contains(inputB.resource, FileChangeType.DELETED);\n\t\t\t}\n\n\t\t\treturn this.matchesFile(inputB.resource, arg1);\n\t\t}\n\n\t\tif (isEditorInput(arg1)) {\n\t\t\tif (isEditorInput(inputB)) {\n\t\t\t\treturn arg1.matches(inputB);\n\t\t\t}\n\n\t\t\treturn this.matchesFile(inputB.resource, arg1);\n\t\t}\n\n\t\tif (isEditorInput(inputB)) {\n\t\t\treturn this.matchesFile(arg1.resource, inputB);\n\t\t}\n\n\t\treturn (\n\t\t\targ1 &&\n\t\t\tinputB &&\n\t\t\tthis.uriIdentityService.extUri.isEqual(\n\t\t\t\targ1.resource,\n\t\t\t\tinputB.resource,\n\t\t\t)\n\t\t);\n\t}\n\n\tmatchesFile(\n\t\tresource: URI,\n\t\targ2:\n\t\t\t| EditorInput\n\t\t\t| IResourceEditorInput\n\t\t\t| FileChangesEvent\n\t\t\t| FileOperationEvent,\n\t): boolean {\n\t\tif (arg2 instanceof FileChangesEvent) {\n\t\t\treturn arg2.contains(resource, FileChangeType.DELETED);\n\t\t}\n\n\t\tif (arg2 instanceof FileOperationEvent) {\n\t\t\treturn this.uriIdentityService.extUri.isEqualOrParent(\n\t\t\t\tresource,\n\t\t\t\targ2.resource,\n\t\t\t);\n\t\t}\n\n\t\tif (isEditorInput(arg2)) {\n\t\t\tconst inputResource = arg2.resource;\n\t\t\tif (!inputResource) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\tif (\n\t\t\t\tthis.lifecycleService.phase >= LifecyclePhase.Restored &&\n\t\t\t\t!this.fileService.hasProvider(inputResource)\n\t\t\t) {\n\t\t\t\treturn false; // make sure to only check this when workbench has restored (for https://github.com/microsoft/vscode/issues/48275)\n\t\t\t}\n\n\t\t\treturn this.uriIdentityService.extUri.isEqual(\n\t\t\t\tinputResource,\n\t\t\t\tresource,\n\t\t\t);\n\t\t}\n\n\t\treturn this.uriIdentityService.extUri.isEqual(arg2?.resource, resource);\n\t}\n\n\tmatchesEditorIdentifier(\n\t\tidentifier: IEditorIdentifier,\n\t\teditorPane?: IEditorPane,\n\t): boolean {\n\t\tif (!editorPane?.group) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (identifier.groupId !== editorPane.group.id) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn editorPane.input\n\t\t\t? identifier.editor.matches(editorPane.input)\n\t\t\t: false;\n\t}\n\n\tonEditorDispose(\n\t\teditor: EditorInput,\n\t\tlistener: Function,\n\t\tmapEditorToDispose: Map<EditorInput, DisposableStore>,\n\t): void {\n\t\tconst toDispose = Event.once(editor.onWillDispose)(() => listener());\n\n\t\tlet disposables = mapEditorToDispose.get(editor);\n\t\tif (!disposables) {\n\t\t\tdisposables = new DisposableStore();\n\t\t\tmapEditorToDispose.set(editor, disposables);\n\t\t}\n\n\t\tdisposables.add(toDispose);\n\t}\n\n\tclearOnEditorDispose(\n\t\teditor:\n\t\t\t| EditorInput\n\t\t\t| IResourceEditorInput\n\t\t\t| FileChangesEvent\n\t\t\t| FileOperationEvent,\n\t\tmapEditorToDispose: Map<EditorInput, DisposableStore>,\n\t): void {\n\t\tif (!isEditorInput(editor)) {\n\t\t\treturn; // only supported when passing in an actual editor input\n\t\t}\n\n\t\tconst disposables = mapEditorToDispose.get(editor);\n\t\tif (disposables) {\n\t\t\tdispose(disposables);\n\t\t\tmapEditorToDispose.delete(editor);\n\t\t}\n\t}\n}\n"],
  "mappings": "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",
  "names": ["index"]
}
