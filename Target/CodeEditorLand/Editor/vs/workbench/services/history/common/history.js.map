{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/history/common/history.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport type { URI } from \"../../../../base/common/uri.js\";\nimport type { IResourceEditorInput } from \"../../../../platform/editor/common/editor.js\";\nimport { createDecorator } from \"../../../../platform/instantiation/common/instantiation.js\";\nimport type { GroupIdentifier } from \"../../../common/editor.js\";\nimport type { EditorInput } from \"../../../common/editor/editorInput.js\";\n\nexport const IHistoryService =\n\tcreateDecorator<IHistoryService>(\"historyService\");\n\n/**\n * Limit editor navigation to certain kinds.\n */\nexport enum GoFilter {\n\t/**\n\t * Navigate between editor navigation history\n\t * entries from any kind of navigation source.\n\t */\n\tNONE = 0,\n\n\t/**\n\t * Only navigate between editor navigation history\n\t * entries that were resulting from edits.\n\t */\n\tEDITS = 1,\n\n\t/**\n\t * Only navigate between editor navigation history\n\t * entries that were resulting from navigations, such\n\t * as \"Go to definition\".\n\t */\n\tNAVIGATION = 2,\n}\n\n/**\n * Limit editor navigation to certain scopes.\n */\nexport enum GoScope {\n\t/**\n\t * Navigate across all editors and editor groups.\n\t */\n\tDEFAULT = 0,\n\n\t/**\n\t * Navigate only in editors of the active editor group.\n\t */\n\tEDITOR_GROUP = 1,\n\n\t/**\n\t * Navigate only in the active editor.\n\t */\n\tEDITOR = 2,\n}\n\nexport interface IHistoryService {\n\treadonly _serviceBrand: undefined;\n\n\t/**\n\t * Navigate forwards in editor navigation history.\n\t */\n\tgoForward(filter?: GoFilter): Promise<void>;\n\n\t/**\n\t * Navigate backwards in editor navigation history.\n\t */\n\tgoBack(filter?: GoFilter): Promise<void>;\n\n\t/**\n\t * Navigate between the current editor navigtion history entry\n\t * and the previous one that was navigated to. This commands is\n\t * like a toggle for `forward` and `back` to jump between 2 points\n\t * in editor navigation history.\n\t */\n\tgoPrevious(filter?: GoFilter): Promise<void>;\n\n\t/**\n\t * Navigate to the last entry in editor navigation history.\n\t */\n\tgoLast(filter?: GoFilter): Promise<void>;\n\n\t/**\n\t * Re-opens the last closed editor if any.\n\t */\n\treopenLastClosedEditor(): Promise<void>;\n\n\t/**\n\t * Get the entire history of editors that were opened.\n\t */\n\tgetHistory(): readonly (EditorInput | IResourceEditorInput)[];\n\n\t/**\n\t * Removes an entry from history.\n\t */\n\tremoveFromHistory(input: EditorInput | IResourceEditorInput): void;\n\n\t/**\n\t * Looking at the editor history, returns the workspace root of the last file that was\n\t * inside the workspace and part of the editor history.\n\t *\n\t * @param schemeFilter filter to restrict roots by scheme.\n\t */\n\tgetLastActiveWorkspaceRoot(\n\t\tschemeFilter?: string,\n\t\tauthorityFilter?: string,\n\t): URI | undefined;\n\n\t/**\n\t * Looking at the editor history, returns the resource of the last file that was opened.\n\t *\n\t * @param schemeFilter filter to restrict roots by scheme.\n\t */\n\tgetLastActiveFile(\n\t\tschemeFilter: string,\n\t\tauthorityFilter?: string,\n\t): URI | undefined;\n\n\t/**\n\t * Opens the next used editor if any.\n\t *\n\t * @param group optional indicator to scope to a specific group.\n\t */\n\topenNextRecentlyUsedEditor(group?: GroupIdentifier): Promise<void>;\n\n\t/**\n\t * Opens the previously used editor if any.\n\t *\n\t * @param group optional indicator to scope to a specific group.\n\t */\n\topenPreviouslyUsedEditor(group?: GroupIdentifier): Promise<void>;\n\n\t/**\n\t * Clears all history.\n\t */\n\tclear(): void;\n\n\t/**\n\t * Clear list of recently opened editors.\n\t */\n\tclearRecentlyOpened(): void;\n}\n"],
  "mappings": "AAOA,SAAS,uBAAuB;AAIzB,MAAM,kBACZ,gBAAiC,gBAAgB;AAK3C,IAAK,WAAL,kBAAKA,cAAL;AAKN,EAAAA,oBAAA,UAAO,KAAP;AAMA,EAAAA,oBAAA,WAAQ,KAAR;AAOA,EAAAA,oBAAA,gBAAa,KAAb;AAlBW,SAAAA;AAAA,GAAA;AAwBL,IAAK,UAAL,kBAAKC,aAAL;AAIN,EAAAA,kBAAA,aAAU,KAAV;AAKA,EAAAA,kBAAA,kBAAe,KAAf;AAKA,EAAAA,kBAAA,YAAS,KAAT;AAdW,SAAAA;AAAA,GAAA;",
  "names": ["GoFilter", "GoScope"]
}
