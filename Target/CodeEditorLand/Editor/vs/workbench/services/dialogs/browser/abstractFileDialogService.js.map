{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/dialogs/browser/abstractFileDialogService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as nls from '../../../../nls.js';\nimport { IWindowOpenable, isWorkspaceToOpen, isFileToOpen } from '../../../../platform/window/common/window.js';\nimport { IPickAndOpenOptions, ISaveDialogOptions, IOpenDialogOptions, FileFilter, IFileDialogService, IDialogService, ConfirmResult, getFileNamesMessage } from '../../../../platform/dialogs/common/dialogs.js';\nimport { isSavedWorkspace, isTemporaryWorkspace, IWorkspaceContextService, WorkbenchState, WORKSPACE_EXTENSION } from '../../../../platform/workspace/common/workspace.js';\nimport { IHistoryService } from '../../history/common/history.js';\nimport { IWorkbenchEnvironmentService } from '../../environment/common/environmentService.js';\nimport { URI } from '../../../../base/common/uri.js';\nimport * as resources from '../../../../base/common/resources.js';\nimport { isAbsolute as localPathIsAbsolute, normalize as localPathNormalize } from '../../../../base/common/path.js';\nimport { IInstantiationService, } from '../../../../platform/instantiation/common/instantiation.js';\nimport { ISimpleFileDialog, SimpleFileDialog } from './simpleFileDialog.js';\nimport { IWorkspacesService } from '../../../../platform/workspaces/common/workspaces.js';\nimport { IConfigurationService } from '../../../../platform/configuration/common/configuration.js';\nimport { IFileService } from '../../../../platform/files/common/files.js';\nimport { IOpenerService } from '../../../../platform/opener/common/opener.js';\nimport { IHostService } from '../../host/browser/host.js';\nimport Severity from '../../../../base/common/severity.js';\nimport { coalesce, distinct } from '../../../../base/common/arrays.js';\nimport { trim } from '../../../../base/common/strings.js';\nimport { ILanguageService } from '../../../../editor/common/languages/language.js';\nimport { ILabelService } from '../../../../platform/label/common/label.js';\nimport { IPathService } from '../../path/common/pathService.js';\nimport { Schemas } from '../../../../base/common/network.js';\nimport { PLAINTEXT_EXTENSION } from '../../../../editor/common/languages/modesRegistry.js';\nimport { ICommandService } from '../../../../platform/commands/common/commands.js';\nimport { ICodeEditorService } from '../../../../editor/browser/services/codeEditorService.js';\nimport { IEditorService } from '../../editor/common/editorService.js';\nimport { EditorOpenSource } from '../../../../platform/editor/common/editor.js';\nimport { ILogService } from '../../../../platform/log/common/log.js';\n\nexport abstract class AbstractFileDialogService implements IFileDialogService {\n\n\tdeclare readonly _serviceBrand: undefined;\n\n\tconstructor(\n\t\t@IHostService protected readonly hostService: IHostService,\n\t\t@IWorkspaceContextService protected readonly contextService: IWorkspaceContextService,\n\t\t@IHistoryService protected readonly historyService: IHistoryService,\n\t\t@IWorkbenchEnvironmentService protected readonly environmentService: IWorkbenchEnvironmentService,\n\t\t@IInstantiationService protected readonly instantiationService: IInstantiationService,\n\t\t@IConfigurationService protected readonly configurationService: IConfigurationService,\n\t\t@IFileService protected readonly fileService: IFileService,\n\t\t@IOpenerService protected readonly openerService: IOpenerService,\n\t\t@IDialogService protected readonly dialogService: IDialogService,\n\t\t@ILanguageService private readonly languageService: ILanguageService,\n\t\t@IWorkspacesService private readonly workspacesService: IWorkspacesService,\n\t\t@ILabelService private readonly labelService: ILabelService,\n\t\t@IPathService private readonly pathService: IPathService,\n\t\t@ICommandService protected readonly commandService: ICommandService,\n\t\t@IEditorService protected readonly editorService: IEditorService,\n\t\t@ICodeEditorService protected readonly codeEditorService: ICodeEditorService,\n\t\t@ILogService private readonly logService: ILogService\n\t) { }\n\n\tasync defaultFilePath(schemeFilter = this.getSchemeFilterForWindow(), authorityFilter = this.getAuthorityFilterForWindow()): Promise<URI> {\n\n\t\t// Check for last active file first...\n\t\tlet candidate = this.historyService.getLastActiveFile(schemeFilter, authorityFilter);\n\n\t\t// ...then for last active file root\n\t\tif (!candidate) {\n\t\t\tcandidate = this.historyService.getLastActiveWorkspaceRoot(schemeFilter, authorityFilter);\n\t\t} else {\n\t\t\tcandidate = resources.dirname(candidate);\n\t\t}\n\n\t\tif (!candidate) {\n\t\t\tcandidate = await this.preferredHome(schemeFilter);\n\t\t}\n\n\t\treturn candidate;\n\t}\n\n\tasync defaultFolderPath(schemeFilter = this.getSchemeFilterForWindow(), authorityFilter = this.getAuthorityFilterForWindow()): Promise<URI> {\n\n\t\t// Check for last active file root first...\n\t\tlet candidate = this.historyService.getLastActiveWorkspaceRoot(schemeFilter, authorityFilter);\n\n\t\t// ...then for last active file\n\t\tif (!candidate) {\n\t\t\tcandidate = this.historyService.getLastActiveFile(schemeFilter, authorityFilter);\n\t\t}\n\n\t\tif (!candidate) {\n\t\t\treturn this.preferredHome(schemeFilter);\n\t\t}\n\n\t\treturn resources.dirname(candidate);\n\t}\n\n\tasync preferredHome(schemeFilter = this.getSchemeFilterForWindow()): Promise<URI> {\n\t\tconst preferLocal = schemeFilter === Schemas.file;\n\t\tconst preferredHomeConfig = this.configurationService.inspect<string>('files.dialog.defaultPath');\n\t\tconst preferredHomeCandidate = preferLocal ? preferredHomeConfig.userLocalValue : preferredHomeConfig.userRemoteValue;\n\t\tif (preferredHomeCandidate) {\n\t\t\tconst isPreferredHomeCandidateAbsolute = preferLocal ? localPathIsAbsolute(preferredHomeCandidate) : (await this.pathService.path).isAbsolute(preferredHomeCandidate);\n\t\t\tif (isPreferredHomeCandidateAbsolute) {\n\t\t\t\tconst preferredHomeNormalized = preferLocal ? localPathNormalize(preferredHomeCandidate) : (await this.pathService.path).normalize(preferredHomeCandidate);\n\t\t\t\tconst preferredHome = resources.toLocalResource(await this.pathService.fileURI(preferredHomeNormalized), this.environmentService.remoteAuthority, this.pathService.defaultUriScheme);\n\t\t\t\tif (await this.fileService.exists(preferredHome)) {\n\t\t\t\t\treturn preferredHome;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn this.pathService.userHome({ preferLocal });\n\t}\n\n\tasync defaultWorkspacePath(schemeFilter = this.getSchemeFilterForWindow()): Promise<URI> {\n\t\tlet defaultWorkspacePath: URI | undefined;\n\n\t\t// Check for current workspace config file first...\n\t\tif (this.contextService.getWorkbenchState() === WorkbenchState.WORKSPACE) {\n\t\t\tconst configuration = this.contextService.getWorkspace().configuration;\n\t\t\tif (configuration?.scheme === schemeFilter && isSavedWorkspace(configuration, this.environmentService) && !isTemporaryWorkspace(configuration)) {\n\t\t\t\tdefaultWorkspacePath = resources.dirname(configuration);\n\t\t\t}\n\t\t}\n\n\t\t// ...then fallback to default file path\n\t\tif (!defaultWorkspacePath) {\n\t\t\tdefaultWorkspacePath = await this.defaultFilePath(schemeFilter);\n\t\t}\n\n\t\treturn defaultWorkspacePath;\n\t}\n\n\tasync showSaveConfirm(fileNamesOrResources: (string | URI)[]): Promise<ConfirmResult> {\n\t\tif (this.skipDialogs()) {\n\t\t\tthis.logService.trace('FileDialogService: refused to show save confirmation dialog in tests.');\n\n\t\t\t// no veto when we are in extension dev testing mode because we cannot assume we run interactive\n\t\t\treturn ConfirmResult.DONT_SAVE;\n\t\t}\n\n\t\treturn this.doShowSaveConfirm(fileNamesOrResources);\n\t}\n\n\tprivate skipDialogs(): boolean {\n\t\tif (this.environmentService.isExtensionDevelopment && this.environmentService.extensionTestsLocationURI) {\n\t\t\treturn true; // integration tests\n\t\t}\n\n\t\treturn !!this.environmentService.enableSmokeTestDriver; // smoke tests\n\t}\n\n\tprivate async doShowSaveConfirm(fileNamesOrResources: (string | URI)[]): Promise<ConfirmResult> {\n\t\tif (fileNamesOrResources.length === 0) {\n\t\t\treturn ConfirmResult.DONT_SAVE;\n\t\t}\n\n\t\tlet message: string;\n\t\tlet detail = nls.localize('saveChangesDetail', \"Your changes will be lost if you don't save them.\");\n\t\tif (fileNamesOrResources.length === 1) {\n\t\t\tmessage = nls.localize('saveChangesMessage', \"Do you want to save the changes you made to {0}?\", typeof fileNamesOrResources[0] === 'string' ? fileNamesOrResources[0] : resources.basename(fileNamesOrResources[0]));\n\t\t} else {\n\t\t\tmessage = nls.localize('saveChangesMessages', \"Do you want to save the changes to the following {0} files?\", fileNamesOrResources.length);\n\t\t\tdetail = getFileNamesMessage(fileNamesOrResources) + '\\n' + detail;\n\t\t}\n\n\t\tconst { result } = await this.dialogService.prompt<ConfirmResult>({\n\t\t\ttype: Severity.Warning,\n\t\t\tmessage,\n\t\t\tdetail,\n\t\t\tbuttons: [\n\t\t\t\t{\n\t\t\t\t\tlabel: fileNamesOrResources.length > 1 ?\n\t\t\t\t\t\tnls.localize({ key: 'saveAll', comment: ['&& denotes a mnemonic'] }, \"&&Save All\") :\n\t\t\t\t\t\tnls.localize({ key: 'save', comment: ['&& denotes a mnemonic'] }, \"&&Save\"),\n\t\t\t\t\trun: () => ConfirmResult.SAVE\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tlabel: nls.localize({ key: 'dontSave', comment: ['&& denotes a mnemonic'] }, \"Do&&n't Save\"),\n\t\t\t\t\trun: () => ConfirmResult.DONT_SAVE\n\t\t\t\t}\n\t\t\t],\n\t\t\tcancelButton: {\n\t\t\t\trun: () => ConfirmResult.CANCEL\n\t\t\t}\n\t\t});\n\n\t\treturn result;\n\t}\n\n\tprotected addFileSchemaIfNeeded(schema: string, _isFolder?: boolean): string[] {\n\t\treturn schema === Schemas.untitled ? [Schemas.file] : (schema !== Schemas.file ? [schema, Schemas.file] : [schema]);\n\t}\n\n\tprotected async pickFileFolderAndOpenSimplified(schema: string, options: IPickAndOpenOptions, preferNewWindow: boolean): Promise<void> {\n\t\tconst title = nls.localize('openFileOrFolder.title', 'Open File or Folder');\n\t\tconst availableFileSystems = this.addFileSchemaIfNeeded(schema);\n\n\t\tconst uri = await this.pickResource({ canSelectFiles: true, canSelectFolders: true, canSelectMany: false, defaultUri: options.defaultUri, title, availableFileSystems });\n\n\t\tif (uri) {\n\t\t\tconst stat = await this.fileService.stat(uri);\n\n\t\t\tconst toOpen: IWindowOpenable = stat.isDirectory ? { folderUri: uri } : { fileUri: uri };\n\t\t\tif (!isWorkspaceToOpen(toOpen) && isFileToOpen(toOpen)) {\n\t\t\t\tthis.addFileToRecentlyOpened(toOpen.fileUri);\n\t\t\t}\n\n\t\t\tif (stat.isDirectory || options.forceNewWindow || preferNewWindow) {\n\t\t\t\tawait this.hostService.openWindow([toOpen], { forceNewWindow: options.forceNewWindow, remoteAuthority: options.remoteAuthority });\n\t\t\t} else {\n\t\t\t\tawait this.editorService.openEditors([{ resource: uri, options: { source: EditorOpenSource.USER, pinned: true } }], undefined, { validateTrust: true });\n\t\t\t}\n\t\t}\n\t}\n\n\tprotected async pickFileAndOpenSimplified(schema: string, options: IPickAndOpenOptions, preferNewWindow: boolean): Promise<void> {\n\t\tconst title = nls.localize('openFile.title', 'Open File');\n\t\tconst availableFileSystems = this.addFileSchemaIfNeeded(schema);\n\n\t\tconst uri = await this.pickResource({ canSelectFiles: true, canSelectFolders: false, canSelectMany: false, defaultUri: options.defaultUri, title, availableFileSystems });\n\t\tif (uri) {\n\t\t\tthis.addFileToRecentlyOpened(uri);\n\n\t\t\tif (options.forceNewWindow || preferNewWindow) {\n\t\t\t\tawait this.hostService.openWindow([{ fileUri: uri }], { forceNewWindow: options.forceNewWindow, remoteAuthority: options.remoteAuthority });\n\t\t\t} else {\n\t\t\t\tawait this.editorService.openEditors([{ resource: uri, options: { source: EditorOpenSource.USER, pinned: true } }], undefined, { validateTrust: true });\n\t\t\t}\n\t\t}\n\t}\n\n\tprotected addFileToRecentlyOpened(uri: URI): void {\n\t\tthis.workspacesService.addRecentlyOpened([{ fileUri: uri, label: this.labelService.getUriLabel(uri) }]);\n\t}\n\n\tprotected async pickFolderAndOpenSimplified(schema: string, options: IPickAndOpenOptions): Promise<void> {\n\t\tconst title = nls.localize('openFolder.title', 'Open Folder');\n\t\tconst availableFileSystems = this.addFileSchemaIfNeeded(schema, true);\n\n\t\tconst uri = await this.pickResource({ canSelectFiles: false, canSelectFolders: true, canSelectMany: false, defaultUri: options.defaultUri, title, availableFileSystems });\n\t\tif (uri) {\n\t\t\treturn this.hostService.openWindow([{ folderUri: uri }], { forceNewWindow: options.forceNewWindow, remoteAuthority: options.remoteAuthority });\n\t\t}\n\t}\n\n\tprotected async pickWorkspaceAndOpenSimplified(schema: string, options: IPickAndOpenOptions): Promise<void> {\n\t\tconst title = nls.localize('openWorkspace.title', 'Open Workspace from File');\n\t\tconst filters: FileFilter[] = [{ name: nls.localize('filterName.workspace', 'Workspace'), extensions: [WORKSPACE_EXTENSION] }];\n\t\tconst availableFileSystems = this.addFileSchemaIfNeeded(schema, true);\n\n\t\tconst uri = await this.pickResource({ canSelectFiles: true, canSelectFolders: false, canSelectMany: false, defaultUri: options.defaultUri, title, filters, availableFileSystems });\n\t\tif (uri) {\n\t\t\treturn this.hostService.openWindow([{ workspaceUri: uri }], { forceNewWindow: options.forceNewWindow, remoteAuthority: options.remoteAuthority });\n\t\t}\n\t}\n\n\tprotected async pickFileToSaveSimplified(schema: string, options: ISaveDialogOptions): Promise<URI | undefined> {\n\t\tif (!options.availableFileSystems) {\n\t\t\toptions.availableFileSystems = this.addFileSchemaIfNeeded(schema);\n\t\t}\n\n\t\toptions.title = nls.localize('saveFileAs.title', 'Save As');\n\t\tconst uri = await this.saveRemoteResource(options);\n\n\t\tif (uri) {\n\t\t\tthis.addFileToRecentlyOpened(uri);\n\t\t}\n\n\t\treturn uri;\n\t}\n\n\tprotected async showSaveDialogSimplified(schema: string, options: ISaveDialogOptions): Promise<URI | undefined> {\n\t\tif (!options.availableFileSystems) {\n\t\t\toptions.availableFileSystems = this.addFileSchemaIfNeeded(schema);\n\t\t}\n\n\t\treturn this.saveRemoteResource(options);\n\t}\n\n\tprotected async showOpenDialogSimplified(schema: string, options: IOpenDialogOptions): Promise<URI[] | undefined> {\n\t\tif (!options.availableFileSystems) {\n\t\t\toptions.availableFileSystems = this.addFileSchemaIfNeeded(schema, options.canSelectFolders);\n\t\t}\n\n\t\tconst uri = await this.pickResource(options);\n\n\t\treturn uri ? [uri] : undefined;\n\t}\n\n\tprotected getSimpleFileDialog(): ISimpleFileDialog {\n\t\treturn this.instantiationService.createInstance(SimpleFileDialog);\n\t}\n\n\tprivate pickResource(options: IOpenDialogOptions): Promise<URI | undefined> {\n\t\treturn this.getSimpleFileDialog().showOpenDialog(options);\n\t}\n\n\tprivate saveRemoteResource(options: ISaveDialogOptions): Promise<URI | undefined> {\n\t\treturn this.getSimpleFileDialog().showSaveDialog(options);\n\t}\n\n\tprivate getSchemeFilterForWindow(defaultUriScheme?: string): string {\n\t\treturn defaultUriScheme ?? this.pathService.defaultUriScheme;\n\t}\n\n\tprivate getAuthorityFilterForWindow(): string | undefined {\n\t\treturn this.environmentService.remoteAuthority;\n\t}\n\n\tprotected getFileSystemSchema(options: { availableFileSystems?: readonly string[]; defaultUri?: URI }): string {\n\t\treturn options.availableFileSystems && options.availableFileSystems[0] || this.getSchemeFilterForWindow(options.defaultUri?.scheme);\n\t}\n\n\tabstract pickFileFolderAndOpen(options: IPickAndOpenOptions): Promise<void>;\n\tabstract pickFileAndOpen(options: IPickAndOpenOptions): Promise<void>;\n\tabstract pickFolderAndOpen(options: IPickAndOpenOptions): Promise<void>;\n\tabstract pickWorkspaceAndOpen(options: IPickAndOpenOptions): Promise<void>;\n\tprotected getWorkspaceAvailableFileSystems(options: IPickAndOpenOptions): string[] {\n\t\tif (options.availableFileSystems && (options.availableFileSystems.length > 0)) {\n\t\t\treturn options.availableFileSystems;\n\t\t}\n\t\tconst availableFileSystems = [Schemas.file];\n\t\tif (this.environmentService.remoteAuthority) {\n\t\t\tavailableFileSystems.unshift(Schemas.vscodeRemote);\n\t\t}\n\t\treturn availableFileSystems;\n\t}\n\tabstract showSaveDialog(options: ISaveDialogOptions): Promise<URI | undefined>;\n\tabstract showOpenDialog(options: IOpenDialogOptions): Promise<URI[] | undefined>;\n\n\tabstract pickFileToSave(defaultUri: URI, availableFileSystems?: string[]): Promise<URI | undefined>;\n\n\tprotected getPickFileToSaveDialogOptions(defaultUri: URI, availableFileSystems?: string[]): ISaveDialogOptions {\n\t\tconst options: ISaveDialogOptions = {\n\t\t\tdefaultUri,\n\t\t\ttitle: nls.localize('saveAsTitle', \"Save As\"),\n\t\t\tavailableFileSystems\n\t\t};\n\n\t\tinterface IFilter { name: string; extensions: string[] }\n\n\t\t// Build the file filter by using our known languages\n\t\tconst ext: string | undefined = defaultUri ? resources.extname(defaultUri) : undefined;\n\t\tlet matchingFilter: IFilter | undefined;\n\n\t\tconst registeredLanguageNames = this.languageService.getSortedRegisteredLanguageNames();\n\t\tconst registeredLanguageFilters: IFilter[] = coalesce(registeredLanguageNames.map(({ languageName, languageId }) => {\n\t\t\tconst extensions = this.languageService.getExtensions(languageId);\n\t\t\tif (!extensions.length) {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\tconst filter: IFilter = { name: languageName, extensions: distinct(extensions).slice(0, 10).map(e => trim(e, '.')) };\n\n\t\t\t// https://github.com/microsoft/vscode/issues/115860\n\t\t\tconst extOrPlaintext = ext || PLAINTEXT_EXTENSION;\n\t\t\tif (!matchingFilter && extensions.includes(extOrPlaintext)) {\n\t\t\t\tmatchingFilter = filter;\n\n\t\t\t\t// The selected extension must be in the set of extensions that are in the filter list that is sent to the save dialog.\n\t\t\t\t// If it isn't, add it manually. https://github.com/microsoft/vscode/issues/147657\n\t\t\t\tconst trimmedExt = trim(extOrPlaintext, '.');\n\t\t\t\tif (!filter.extensions.includes(trimmedExt)) {\n\t\t\t\t\tfilter.extensions.unshift(trimmedExt);\n\t\t\t\t}\n\n\t\t\t\treturn null; // first matching filter will be added to the top\n\t\t\t}\n\n\t\t\treturn filter;\n\t\t}));\n\n\t\t// We have no matching filter, e.g. because the language\n\t\t// is unknown. We still add the extension to the list of\n\t\t// filters though so that it can be picked\n\t\t// (https://github.com/microsoft/vscode/issues/96283)\n\t\tif (!matchingFilter && ext) {\n\t\t\tmatchingFilter = { name: trim(ext, '.').toUpperCase(), extensions: [trim(ext, '.')] };\n\t\t}\n\n\t\t// Order of filters is\n\t\t// - All Files (we MUST do this to fix macOS issue https://github.com/microsoft/vscode/issues/102713)\n\t\t// - File Extension Match (if any)\n\t\t// - All Languages\n\t\t// - No Extension\n\t\toptions.filters = coalesce([\n\t\t\t{ name: nls.localize('allFiles', \"All Files\"), extensions: ['*'] },\n\t\t\tmatchingFilter,\n\t\t\t...registeredLanguageFilters,\n\t\t\t{ name: nls.localize('noExt', \"No Extension\"), extensions: [''] }\n\t\t]);\n\n\t\treturn options;\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
