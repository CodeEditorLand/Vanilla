var R=Object.defineProperty;var C=Object.getOwnPropertyDescriptor;var I=(g,e,i,t)=>{for(var s=t>1?void 0:t?C(e,i):e,a=g.length-1,l;a>=0;a--)(l=g[a])&&(s=(t?l(e,i,s):l(s))||s);return t&&s&&R(e,i,s),s},u=(g,e)=>(i,t)=>e(i,t,g);import{getActiveDocument as x}from"../../../../../vs/base/browser/dom.js";import{createCancelablePromise as E}from"../../../../../vs/base/common/async.js";import"../../../../../vs/base/common/cancellation.js";import{Emitter as T}from"../../../../../vs/base/common/event.js";import{isValidBasename as A}from"../../../../../vs/base/common/extpath.js";import{normalizeDriveLetter as W}from"../../../../../vs/base/common/labels.js";import{dispose as O}from"../../../../../vs/base/common/lifecycle.js";import{Schemas as m}from"../../../../../vs/base/common/network.js";import*as L from"../../../../../vs/base/common/objects.js";import{isWindows as H,OperatingSystem as z}from"../../../../../vs/base/common/platform.js";import*as r from"../../../../../vs/base/common/resources.js";import{equalsIgnoreCase as f,format as M,startsWithIgnoreCase as k}from"../../../../../vs/base/common/strings.js";import{URI as b}from"../../../../../vs/base/common/uri.js";import{ILanguageService as N}from"../../../../../vs/editor/common/languages/language.js";import{getIconClasses as F}from"../../../../../vs/editor/common/services/getIconClasses.js";import{IModelService as Q}from"../../../../../vs/editor/common/services/model.js";import*as d from"../../../../../vs/nls.js";import{IAccessibilityService as q}from"../../../../../vs/platform/accessibility/common/accessibility.js";import"../../../../../vs/platform/commands/common/commands.js";import{IContextKeyService as K,RawContextKey as V}from"../../../../../vs/platform/contextkey/common/contextkey.js";import{IFileDialogService as P}from"../../../../../vs/platform/dialogs/common/dialogs.js";import{FileKind as j,IFileService as Y}from"../../../../../vs/platform/files/common/files.js";import{IKeybindingService as $}from"../../../../../vs/platform/keybinding/common/keybinding.js";import{ILabelService as X}from"../../../../../vs/platform/label/common/label.js";import{INotificationService as Z}from"../../../../../vs/platform/notification/common/notification.js";import{IQuickInputService as _,ItemActivation as G}from"../../../../../vs/platform/quickinput/common/quickInput.js";import"../../../../../vs/platform/remote/common/remoteAgentEnvironment.js";import{IWorkspaceContextService as J}from"../../../../../vs/platform/workspace/common/workspace.js";import{SaveReason as ee}from"../../../../../vs/workbench/common/editor.js";import{IEditorService as te}from"../../../../../vs/workbench/services/editor/common/editorService.js";import{IWorkbenchEnvironmentService as ie}from"../../../../../vs/workbench/services/environment/common/environmentService.js";import{IPathService as se}from"../../../../../vs/workbench/services/path/common/pathService.js";import{IRemoteAgentService as re}from"../../../../../vs/workbench/services/remote/common/remoteAgentService.js";var y;(t=>{t.ID="workbench.action.files.openLocalFile",t.LABEL=d.localize("openLocalFile","Open Local File...");function i(){return s=>s.get(P).pickFileAndOpen({forceNewWindow:!1,availableFileSystems:[m.file]})}t.handler=i})(y||={});var B;(t=>{t.ID="workbench.action.files.saveLocalFile",t.LABEL=d.localize("saveLocalFile","Save Local File...");function i(){return s=>{const a=s.get(te),l=a.activeEditorPane;return l?a.save({groupId:l.group.id,editor:l.input},{saveAs:!0,availableFileSystems:[m.file],reason:ee.EXPLICIT}):Promise.resolve(void 0)}}t.handler=i})(B||={});var U;(t=>{t.ID="workbench.action.files.openLocalFolder",t.LABEL=d.localize("openLocalFolder","Open Local Folder...");function i(){return s=>s.get(P).pickFolderAndOpen({forceNewWindow:!1,availableFileSystems:[m.file]})}t.handler=i})(U||={});var D;(t=>{t.ID="workbench.action.files.openLocalFileFolder",t.LABEL=d.localize("openLocalFileFolder","Open Local...");function i(){return s=>s.get(P).pickFileFolderAndOpen({forceNewWindow:!1,availableFileSystems:[m.file]})}t.handler=i})(D||={});var ae=(a=>(a[a.Updated=0]="Updated",a[a.UpdatedWithTrailing=1]="UpdatedWithTrailing",a[a.Updating=2]="Updating",a[a.NotUpdated=3]="NotUpdated",a[a.InvalidPath=4]="InvalidPath",a))(ae||{});const ne=new V("remoteFileDialogVisible",!1);let S=class{constructor(e,i,t,s,a,l,o,h,p,n,c,v,w,oe){this.fileService=e;this.quickInputService=i;this.labelService=t;this.workspaceContextService=s;this.notificationService=a;this.fileDialogService=l;this.modelService=o;this.languageService=h;this.environmentService=p;this.remoteAgentService=n;this.pathService=c;this.keybindingService=v;this.accessibilityService=oe;this.remoteAuthority=this.environmentService.remoteAuthority,this.contextKey=ne.bindTo(w),this.scheme=this.pathService.defaultUriScheme}options;currentFolder;filePickBox;hidden=!1;allowFileSelection=!0;allowFolderSelection=!1;remoteAuthority;requiresTrailing=!1;trailing;scheme;contextKey;userEnteredPathSegment="";autoCompletePathSegment="";activeItem;userHome;trueHome;isWindows=!1;badPath;remoteAgentEnvironment;separator="/";onBusyChangeEmitter=new T;updatingPromise;disposables=[this.onBusyChangeEmitter];set busy(e){this.filePickBox.busy!==e&&(this.filePickBox.busy=e,this.onBusyChangeEmitter.fire(e))}get busy(){return this.filePickBox.busy}async showOpenDialog(e={}){this.scheme=this.getScheme(e.availableFileSystems,e.defaultUri),this.userHome=await this.getUserHome(),this.trueHome=await this.getUserHome(!0);const i=this.getOptions(e);return i?(this.options=i,this.pickResource()):Promise.resolve(void 0)}async showSaveDialog(e){this.scheme=this.getScheme(e.availableFileSystems,e.defaultUri),this.userHome=await this.getUserHome(),this.trueHome=await this.getUserHome(!0),this.requiresTrailing=!0;const i=this.getOptions(e,!0);return i?(this.options=i,this.options.canSelectFolders=!0,this.options.canSelectFiles=!0,new Promise(t=>{this.pickResource(!0).then(s=>{t(s)})})):Promise.resolve(void 0)}getOptions(e,i=!1){let t,s;if(e.defaultUri&&(t=this.scheme===e.defaultUri.scheme?e.defaultUri:void 0,s=i?r.basename(e.defaultUri):void 0),t||(t=this.userHome,s&&(t=r.joinPath(t,s))),this.scheme!==m.file&&!this.fileService.hasProvider(t)){this.notificationService.info(d.localize("remoteFileDialog.notConnectedToRemote","File system provider for {0} is not available.",t.toString()));return}const a=L.deepClone(e);return a.defaultUri=t,a}remoteUriFrom(e,i){e.startsWith("\\\\")||(e=e.replace(/\\/g,"/"));const t=this.scheme===m.file?b.file(e):b.from({scheme:this.scheme,path:e,query:i?.query,fragment:i?.fragment}),s=t.scheme===m.file?void 0:this.remoteAuthority??i?.authority;return r.toLocalResource(t,s,s?this.pathService.defaultUriScheme:t.scheme)}getScheme(e,i){return e&&e.length>0?i&&e.indexOf(i.scheme)>=0?i.scheme:e[0]:i?i.scheme:m.file}async getRemoteAgentEnvironment(){return this.remoteAgentEnvironment===void 0&&(this.remoteAgentEnvironment=await this.remoteAgentService.getEnvironment()),this.remoteAgentEnvironment}getUserHome(e=!1){return e?this.pathService.userHome({preferLocal:this.scheme===m.file}):this.fileDialogService.preferredHome(this.scheme)}async pickResource(e=!1){this.allowFolderSelection=!!this.options.canSelectFolders,this.allowFileSelection=!!this.options.canSelectFiles,this.separator=this.labelService.getSeparator(this.scheme,this.remoteAuthority),this.hidden=!1,this.isWindows=await this.checkIsWindowsOS();let i=this.options.defaultUri?this.options.defaultUri:this.workspaceContextService.getWorkspace().folders[0].uri,t;const s=r.extname(i);if(this.options.defaultUri){try{t=await this.fileService.stat(this.options.defaultUri)}catch{}(!t||!t.isDirectory)&&(i=r.dirname(this.options.defaultUri),this.trailing=r.basename(this.options.defaultUri))}return new Promise(a=>{if(this.filePickBox=this.quickInputService.createQuickPick(),this.busy=!0,this.filePickBox.matchOnLabel=!1,this.filePickBox.sortByLabel=!1,this.filePickBox.ignoreFocusOut=!0,this.filePickBox.ok=!0,this.scheme!==m.file&&this.options&&this.options.availableFileSystems&&this.options.availableFileSystems.length>1&&this.options.availableFileSystems.indexOf(m.file)>-1){this.filePickBox.customButton=!0,this.filePickBox.customLabel=d.localize("remoteFileDialog.local","Show Local");let n;e?n=B:n=this.allowFileSelection?this.allowFolderSelection?D:y:U;const c=this.keybindingService.lookupKeybinding(n.ID);if(c){const v=c.getLabel();v&&(this.filePickBox.customHover=M("{0} ({1})",n.LABEL,v))}}let l=0,o=!1;this.currentFolder=r.dirname(i),this.userEnteredPathSegment="",this.autoCompletePathSegment="",this.filePickBox.title=this.options.title,this.filePickBox.value=this.pathFromUri(this.currentFolder,!0),this.filePickBox.valueSelection=[this.filePickBox.value.length,this.filePickBox.value.length];function h(n,c){c&&(c=r.addTrailingPathSeparator(c,n.separator),c=r.removeTrailingPathSeparator(c)),a(c),n.contextKey.set(!1),n.filePickBox.dispose(),O(n.disposables)}this.filePickBox.onDidCustom(()=>{if(!(o||this.busy))return o=!0,l++,this.options.availableFileSystems&&this.options.availableFileSystems.length>1&&(this.options.availableFileSystems=this.options.availableFileSystems.slice(1)),this.filePickBox.hide(),e?this.fileDialogService.showSaveDialog(this.options).then(n=>{h(this,n)}):this.fileDialogService.showOpenDialog(this.options).then(n=>{h(this,n?n[0]:void 0)})});function p(n){if(n.busy){n.onBusyChangeEmitter.event(c=>{c||p(n)});return}else if(o)return;o=!0,l++,n.onDidAccept().then(c=>{c?(n.filePickBox.hide(),h(n,c)):n.hidden?h(n,void 0):(l--,o=!1)})}this.filePickBox.onDidAccept(n=>{p(this)}),this.filePickBox.onDidChangeActive(n=>{if(o=!1,n.length===1&&this.isSelectionChangeFromUser()){this.filePickBox.validationMessage=void 0;const c=this.constructFullUserPath();f(this.filePickBox.value.substring(0,c.length),c)||(this.filePickBox.valueSelection=[0,this.filePickBox.value.length],this.insertText(c,c)),this.setAutoComplete(c,this.userEnteredPathSegment,n[0],!0)}}),this.filePickBox.onDidChangeValue(async n=>this.handleValueChange(n)),this.filePickBox.onDidHide(()=>{this.hidden=!0,l===0&&h(this,void 0)}),this.filePickBox.show(),this.contextKey.set(!0),this.updateItems(i,!0,this.trailing).then(()=>{this.trailing?this.filePickBox.valueSelection=[this.filePickBox.value.length-this.trailing.length,this.filePickBox.value.length-s.length]:this.filePickBox.valueSelection=[this.filePickBox.value.length,this.filePickBox.value.length],this.busy=!1})})}async handleValueChange(e){try{if(this.isValueChangeFromUser())if(!f(e,this.constructFullUserPath())&&!this.isBadSubpath(e)){this.filePickBox.validationMessage=void 0;const i=this.filePickBoxValue();let t=3;r.extUriIgnorePathCase.isEqual(this.currentFolder,i)||(t=await this.tryUpdateItems(e,i)),(t===3||t===1)&&this.setActiveItems(e)}else this.filePickBox.activeItems=[],this.userEnteredPathSegment=""}catch{}}isBadSubpath(e){return this.badPath&&e.length>this.badPath.length&&f(e.substring(0,this.badPath.length),this.badPath)}isValueChangeFromUser(){return!f(this.filePickBox.value,this.pathAppend(this.currentFolder,this.userEnteredPathSegment+this.autoCompletePathSegment))}isSelectionChangeFromUser(){return this.activeItem!==(this.filePickBox.activeItems?this.filePickBox.activeItems[0]:void 0)}constructFullUserPath(){const e=this.pathFromUri(this.currentFolder);return f(this.filePickBox.value.substr(0,this.userEnteredPathSegment.length),this.userEnteredPathSegment)?f(this.filePickBox.value.substr(0,e.length),e)?e:this.userEnteredPathSegment:this.pathAppend(this.currentFolder,this.userEnteredPathSegment)}filePickBoxValue(){const e=this.remoteUriFrom(this.filePickBox.value.trimRight(),this.currentFolder),i=this.pathFromUri(this.currentFolder);if(f(this.filePickBox.value,i))return this.currentFolder;const t=this.remoteUriFrom(i,this.currentFolder),s=r.relativePath(t,e),a=this.filePickBox.value.length>1&&i.length>1?f(this.filePickBox.value.substr(0,2),i.substr(0,2)):!1;if(s&&a){let l=r.joinPath(this.currentFolder,s);const o=r.basename(e);return(o==="."||o==="..")&&(l=this.remoteUriFrom(this.pathAppend(l,o),this.currentFolder)),r.hasTrailingPathSeparator(e)?r.addTrailingPathSeparator(l):l}else return e}async onDidAccept(){if(this.busy=!0,this.filePickBox.activeItems.length===1){const i=this.filePickBox.selectedItems[0];if(i.isFolder){if(this.trailing)await this.updateItems(i.uri,!0,this.trailing);else{const t=this.pathFromUri(i.uri);k(t,this.filePickBox.value)&&f(i.label,r.basename(i.uri))?(this.filePickBox.valueSelection=[this.pathFromUri(this.currentFolder).length,this.filePickBox.value.length],this.insertText(t,this.basenameWithTrailingSlash(i.uri))):i.label===".."&&k(this.filePickBox.value,t)?(this.filePickBox.valueSelection=[t.length,this.filePickBox.value.length],this.insertText(t,"")):await this.updateItems(i.uri,!0)}this.filePickBox.busy=!1;return}}else if(await this.tryUpdateItems(this.filePickBox.value,this.filePickBoxValue())!==3){this.filePickBox.busy=!1;return}let e;if(this.filePickBox.activeItems.length===0?e=this.filePickBoxValue():this.filePickBox.activeItems.length===1&&(e=this.filePickBox.selectedItems[0].uri),e&&(e=this.addPostfix(e)),await this.validate(e))return this.busy=!1,e;this.busy=!1}root(e){let i=e,t=r.dirname(e);for(;!r.isEqual(i,t);)i=t,t=r.dirname(t);return t}tildaReplace(e){const i=this.trueHome;return e.length>0&&e[0]==="~"?r.joinPath(i,e.substring(1)):this.remoteUriFrom(e)}tryAddTrailingSeparatorToDirectory(e,i){return i.isDirectory&&!this.endsWithSlash(e.path)?r.addTrailingPathSeparator(e):e}async tryUpdateItems(e,i){if(e.length>0&&e[0]==="~"){const t=this.tildaReplace(e);return await this.updateItems(t,!0)?1:0}else{if(e==="\\")return i=this.root(this.currentFolder),e=this.pathFromUri(i),await this.updateItems(i,!0)?1:0;{const t=r.extUriIgnorePathCase.isEqual(this.currentFolder,i),s=r.extUriIgnorePathCase.isEqual(this.currentFolder,r.dirname(i)),a=r.extUriIgnorePathCase.isEqualOrParent(this.currentFolder,r.dirname(i)),l=!a&&!s;if(!t&&(this.endsWithSlash(e)||a||l)){let o;try{o=await this.fileService.stat(i)}catch{}if(o&&o.isDirectory&&r.basename(i)!=="."&&this.endsWithSlash(e))return i=this.tryAddTrailingSeparatorToDirectory(i,o),await this.updateItems(i)?1:0;if(this.endsWithSlash(e))return this.filePickBox.validationMessage=d.localize("remoteFileDialog.badPath","The path does not exist."),this.badPath=e,4;{let h=r.dirname(i);const p=r.removeTrailingPathSeparator(r.addTrailingPathSeparator(this.currentFolder)),n=r.removeTrailingPathSeparator(r.addTrailingPathSeparator(h));if(!r.extUriIgnorePathCase.isEqual(p,n)&&(!/^[a-zA-Z]:$/.test(this.filePickBox.value)||!f(this.pathFromUri(this.currentFolder).substring(0,this.filePickBox.value.length),this.filePickBox.value))){let c;try{c=await this.fileService.stat(h)}catch{}if(c&&c.isDirectory)return this.badPath=void 0,h=this.tryAddTrailingSeparatorToDirectory(h,c),await this.updateItems(h,!1,r.basename(i))?1:0}}}}}return this.badPath=void 0,3}tryUpdateTrailing(e){const i=r.extname(e);this.trailing&&i&&(this.trailing=r.basename(e))}setActiveItems(e){e=this.pathFromUri(this.tildaReplace(e));const i=this.remoteUriFrom(e),t=r.basename(i),s=this.constructFullUserPath();if(f(s,e.substring(0,s.length))||f(e,s.substring(0,e.length))){let l=!1;for(let o=0;o<this.filePickBox.items.length;o++){const h=this.filePickBox.items[o];if(this.setAutoComplete(e,t,h)){l=!0;break}}if(!l){const o=t.length>=2?s.substring(s.length-t.length+2):"";this.userEnteredPathSegment=o===t?t:"",this.autoCompletePathSegment="",this.filePickBox.activeItems=[],this.tryUpdateTrailing(i)}}else this.userEnteredPathSegment=t,this.autoCompletePathSegment="",this.filePickBox.activeItems=[],this.tryUpdateTrailing(i)}setAutoComplete(e,i,t,s=!1){if(this.busy)return this.userEnteredPathSegment=i,this.autoCompletePathSegment="",!1;const a=t.label;return a===".."?(this.userEnteredPathSegment="",this.autoCompletePathSegment="",this.activeItem=t,s&&x().execCommand("insertText",!1,""),!1):!s&&a.length>=i.length&&f(a.substr(0,i.length),i)?(this.userEnteredPathSegment=i,this.activeItem=t,this.autoCompletePathSegment="",t.isFolder||!this.trailing?this.filePickBox.activeItems=[t]:this.filePickBox.activeItems=[],!0):s&&!f(this.basenameWithTrailingSlash(t.uri),this.userEnteredPathSegment+this.autoCompletePathSegment)?(this.userEnteredPathSegment="",this.accessibilityService.isScreenReaderOptimized()||(this.autoCompletePathSegment=this.trimTrailingSlash(a)),this.activeItem=t,this.accessibilityService.isScreenReaderOptimized()||(this.filePickBox.valueSelection=[this.pathFromUri(this.currentFolder,!0).length,this.filePickBox.value.length],this.insertText(this.pathAppend(this.currentFolder,this.autoCompletePathSegment),this.autoCompletePathSegment),this.filePickBox.valueSelection=[this.filePickBox.value.length-this.autoCompletePathSegment.length,this.filePickBox.value.length]),!0):(this.userEnteredPathSegment=i,this.autoCompletePathSegment="",!1)}insertText(e,i){this.filePickBox.inputHasFocus()?(x().execCommand("insertText",!1,i),this.filePickBox.value!==e&&(this.filePickBox.value=e,this.handleValueChange(e))):(this.filePickBox.value=e,this.handleValueChange(e))}addPostfix(e){let i=e;if(this.requiresTrailing&&this.options.filters&&this.options.filters.length>0&&!r.hasTrailingPathSeparator(e)){let t=!1;const s=r.extname(e).substr(1);for(let a=0;a<this.options.filters.length;a++){for(let l=0;l<this.options.filters[a].extensions.length;l++)if(this.options.filters[a].extensions[l]==="*"||this.options.filters[a].extensions[l]===s){t=!0;break}if(t)break}t||(i=r.joinPath(r.dirname(e),r.basename(e)+"."+this.options.filters[0].extensions[0]))}return i}trimTrailingSlash(e){return e.length>1&&this.endsWithSlash(e)?e.substr(0,e.length-1):e}yesNoPrompt(e,i){const t=this.quickInputService.createQuickPick();t.title=i,t.ignoreFocusOut=!0,t.ok=!0,t.customButton=!0,t.customLabel=d.localize("remoteFileDialog.cancel","Cancel"),t.value=this.pathFromUri(e);let s=!1;return new Promise(a=>{t.onDidAccept(()=>{s=!0,t.hide(),a(!0)}),t.onDidHide(()=>{s||a(!1),this.filePickBox.show(),this.hidden=!1,t.dispose()}),t.onDidChangeValue(()=>{t.hide()}),t.onDidCustom(()=>{t.hide()}),t.show()})}async validate(e){if(e===void 0)return this.filePickBox.validationMessage=d.localize("remoteFileDialog.invalidPath","Please enter a valid path."),Promise.resolve(!1);let i,t;try{t=await this.fileService.stat(r.dirname(e)),i=await this.fileService.stat(e)}catch{}if(this.requiresTrailing){if(i&&i.isDirectory)return this.filePickBox.validationMessage=d.localize("remoteFileDialog.validateFolder","The folder already exists. Please use a new file name."),Promise.resolve(!1);if(i){const s=d.localize("remoteFileDialog.validateExisting","{0} already exists. Are you sure you want to overwrite it?",r.basename(e));return this.yesNoPrompt(e,s)}else if(A(r.basename(e),this.isWindows))if(t)if(t.isDirectory){if(t.readonly)return this.filePickBox.validationMessage=d.localize("remoteFileDialog.validateReadonlyFolder","This folder cannot be used as a save destination. Please choose another folder"),Promise.resolve(!1)}else return this.filePickBox.validationMessage=d.localize("remoteFileDialog.validateNonexistentDir","Please enter a path that exists."),Promise.resolve(!1);else{const s=d.localize("remoteFileDialog.validateCreateDirectory","The folder {0} does not exist. Would you like to create it?",r.basename(r.dirname(e)));return this.yesNoPrompt(e,s)}else return this.filePickBox.validationMessage=d.localize("remoteFileDialog.validateBadFilename","Please enter a valid file name."),Promise.resolve(!1)}else if(i){if(e.path==="/"&&this.isWindows)return this.filePickBox.validationMessage=d.localize("remoteFileDialog.windowsDriveLetter","Please start the path with a drive letter."),Promise.resolve(!1);if(i.isDirectory&&!this.allowFolderSelection)return this.filePickBox.validationMessage=d.localize("remoteFileDialog.validateFileOnly","Please select a file."),Promise.resolve(!1);if(!i.isDirectory&&!this.allowFileSelection)return this.filePickBox.validationMessage=d.localize("remoteFileDialog.validateFolderOnly","Please select a folder."),Promise.resolve(!1)}else return this.filePickBox.validationMessage=d.localize("remoteFileDialog.validateNonexistentDir","Please enter a path that exists."),Promise.resolve(!1);return Promise.resolve(!0)}async updateItems(e,i=!1,t){this.busy=!0,this.autoCompletePathSegment="";const s=!!t;let a=!1;const l=E(async o=>{let h;try{h=await this.fileService.resolve(e),h.isDirectory||(t=r.basename(e),e=r.dirname(e),h=void 0,a=!0)}catch{}const p=t?this.pathAppend(e,t):this.pathFromUri(e,!0);return this.currentFolder=this.endsWithSlash(e.path)?e:r.addTrailingPathSeparator(e,this.separator),this.userEnteredPathSegment=t||"",this.createItems(h,this.currentFolder,o).then(n=>o.isCancellationRequested?(this.busy=!1,!1):(this.filePickBox.itemActivation=G.NONE,this.filePickBox.items=n,!f(this.filePickBox.value,p)&&i&&(this.filePickBox.valueSelection=[0,this.filePickBox.value.length],this.insertText(p,p)),i&&t&&s?this.filePickBox.valueSelection=[this.filePickBox.value.length-t.length,this.filePickBox.value.length-t.length]:t||(this.filePickBox.valueSelection=[this.filePickBox.value.length,this.filePickBox.value.length]),this.busy=!1,this.updatingPromise=void 0,a))});return this.updatingPromise!==void 0&&this.updatingPromise.cancel(),this.updatingPromise=l,l}pathFromUri(e,i=!1){let t=W(e.fsPath,this.isWindows).replace(/\n/g,"");return this.separator==="/"?t=t.replace(/\\/g,this.separator):t=t.replace(/\//g,this.separator),i&&!this.endsWithSlash(t)&&(t=t+this.separator),t}pathAppend(e,i){return i===".."||i==="."?this.pathFromUri(e,!0)+i:this.pathFromUri(r.joinPath(e,i))}async checkIsWindowsOS(){let e=H;const i=await this.getRemoteAgentEnvironment();return i&&(e=i.os===z.Windows),e}endsWithSlash(e){return/[\/\\]$/.test(e)}basenameWithTrailingSlash(e){const i=this.pathFromUri(e,!0),t=this.pathFromUri(r.dirname(e),!0);return i.substring(t.length)}async createBackItem(e){const i=this.currentFolder.with({scheme:m.file,authority:""}),t=r.dirname(i);if(!r.isEqual(i,t)){const s=r.dirname(e);if(await this.fileService.exists(s))return{label:"..",uri:r.addTrailingPathSeparator(s,this.separator),isFolder:!0}}}async createItems(e,i,t){const s=[],a=await this.createBackItem(i);try{e||(e=await this.fileService.resolve(i));const o=e.children?await Promise.all(e.children.map(h=>this.createItem(h,i,t))):[];for(const h of o)h&&s.push(h)}catch(o){console.log(o)}if(t.isCancellationRequested)return[];const l=s.sort((o,h)=>{if(o.isFolder!==h.isFolder)return o.isFolder?-1:1;const p=this.endsWithSlash(o.label)?o.label.substr(0,o.label.length-1):o.label,n=this.endsWithSlash(h.label)?h.label.substr(0,h.label.length-1):h.label;return p.localeCompare(n)});return a&&l.unshift(a),l}filterFile(e){if(this.options.filters){for(let i=0;i<this.options.filters.length;i++)for(let t=0;t<this.options.filters[i].extensions.length;t++){const s=this.options.filters[i].extensions[t];if(s==="*"||e.path.endsWith("."+s))return!0}return!1}return!0}async createItem(e,i,t){if(t.isCancellationRequested)return;let s=r.joinPath(i,e.name);if(e.isDirectory){const a=r.basename(s);return s=r.addTrailingPathSeparator(s,this.separator),{label:a,uri:s,isFolder:!0,iconClasses:F(this.modelService,this.languageService,s||void 0,j.FOLDER)}}else if(!e.isDirectory&&this.allowFileSelection&&this.filterFile(s))return{label:e.name,uri:s,isFolder:!1,iconClasses:F(this.modelService,this.languageService,s||void 0)}}};S=I([u(0,Y),u(1,_),u(2,X),u(3,J),u(4,Z),u(5,P),u(6,Q),u(7,N),u(8,ie),u(9,re),u(10,se),u(11,$),u(12,K),u(13,q)],S);export{y as OpenLocalFileCommand,D as OpenLocalFileFolderCommand,U as OpenLocalFolderCommand,ne as RemoteFileDialogContext,B as SaveLocalFileCommand,S as SimpleFileDialog};
