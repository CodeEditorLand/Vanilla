var k=Object.defineProperty;var A=Object.getOwnPropertyDescriptor;var y=(p,e,i,t)=>{for(var r=t>1?void 0:t?A(e,i):e,n=p.length-1,o;n>=0;n--)(o=p[n])&&(r=(t?o(e,i,r):o(r))||r);return t&&r&&k(e,i,r),r},a=(p,e)=>(i,t)=>e(i,t,p);import*as s from"../../../../nls.js";import{isWorkspaceToOpen as b,isFileToOpen as W}from"../../../../platform/window/common/window.js";import{IDialogService as P,ConfirmResult as f,getFileNamesMessage as R}from"../../../../platform/dialogs/common/dialogs.js";import{isSavedWorkspace as U,isTemporaryWorkspace as D,IWorkspaceContextService as E,WorkbenchState as C,WORKSPACE_EXTENSION as N}from"../../../../platform/workspace/common/workspace.js";import{IHistoryService as x}from"../../history/common/history.js";import{IWorkbenchEnvironmentService as T}from"../../environment/common/environmentService.js";import"../../../../base/common/uri.js";import*as m from"../../../../base/common/resources.js";import{isAbsolute as L,normalize as z}from"../../../../base/common/path.js";import{IInstantiationService as H}from"../../../../platform/instantiation/common/instantiation.js";import{SimpleFileDialog as M}from"./simpleFileDialog.js";import{IWorkspacesService as _}from"../../../../platform/workspaces/common/workspaces.js";import{IConfigurationService as V}from"../../../../platform/configuration/common/configuration.js";import{IFileService as X}from"../../../../platform/files/common/files.js";import{IOpenerService as B}from"../../../../platform/opener/common/opener.js";import{IHostService as K}from"../../host/browser/host.js";import Y from"../../../../base/common/severity.js";import{coalesce as w,distinct as j}from"../../../../base/common/arrays.js";import{trim as u}from"../../../../base/common/strings.js";import{ILanguageService as q}from"../../../../editor/common/languages/language.js";import{ILabelService as G}from"../../../../platform/label/common/label.js";import{IPathService as J}from"../../path/common/pathService.js";import{Schemas as d}from"../../../../base/common/network.js";import{PLAINTEXT_EXTENSION as Q}from"../../../../editor/common/languages/modesRegistry.js";import{ICommandService as Z}from"../../../../platform/commands/common/commands.js";import{ICodeEditorService as $}from"../../../../editor/browser/services/codeEditorService.js";import{IEditorService as ee}from"../../editor/common/editorService.js";import{EditorOpenSource as O}from"../../../../platform/editor/common/editor.js";import{ILogService as ie}from"../../../../platform/log/common/log.js";let g=class{constructor(e,i,t,r,n,o,l,c,F,h,S,I,v,te,re,oe,ne){this.hostService=e;this.contextService=i;this.historyService=t;this.environmentService=r;this.instantiationService=n;this.configurationService=o;this.fileService=l;this.openerService=c;this.dialogService=F;this.languageService=h;this.workspacesService=S;this.labelService=I;this.pathService=v;this.commandService=te;this.editorService=re;this.codeEditorService=oe;this.logService=ne}async defaultFilePath(e=this.getSchemeFilterForWindow(),i=this.getAuthorityFilterForWindow()){let t=this.historyService.getLastActiveFile(e,i);return t?t=m.dirname(t):t=this.historyService.getLastActiveWorkspaceRoot(e,i),t||(t=await this.preferredHome(e)),t}async defaultFolderPath(e=this.getSchemeFilterForWindow(),i=this.getAuthorityFilterForWindow()){let t=this.historyService.getLastActiveWorkspaceRoot(e,i);return t||(t=this.historyService.getLastActiveFile(e,i)),t?m.dirname(t):this.preferredHome(e)}async preferredHome(e=this.getSchemeFilterForWindow()){const i=e===d.file,t=this.configurationService.inspect("files.dialog.defaultPath"),r=i?t.userLocalValue:t.userRemoteValue;if(r&&(i?L(r):(await this.pathService.path).isAbsolute(r))){const o=i?z(r):(await this.pathService.path).normalize(r),l=m.toLocalResource(await this.pathService.fileURI(o),this.environmentService.remoteAuthority,this.pathService.defaultUriScheme);if(await this.fileService.exists(l))return l}return this.pathService.userHome({preferLocal:i})}async defaultWorkspacePath(e=this.getSchemeFilterForWindow()){let i;if(this.contextService.getWorkbenchState()===C.WORKSPACE){const t=this.contextService.getWorkspace().configuration;t?.scheme===e&&U(t,this.environmentService)&&!D(t)&&(i=m.dirname(t))}return i||(i=await this.defaultFilePath(e)),i}async showSaveConfirm(e){return this.skipDialogs()?(this.logService.trace("FileDialogService: refused to show save confirmation dialog in tests."),f.DONT_SAVE):this.doShowSaveConfirm(e)}skipDialogs(){return this.environmentService.isExtensionDevelopment&&this.environmentService.extensionTestsLocationURI?!0:!!this.environmentService.enableSmokeTestDriver}async doShowSaveConfirm(e){if(e.length===0)return f.DONT_SAVE;let i,t=s.localize("saveChangesDetail","Your changes will be lost if you don't save them.");e.length===1?i=s.localize("saveChangesMessage","Do you want to save the changes you made to {0}?",typeof e[0]=="string"?e[0]:m.basename(e[0])):(i=s.localize("saveChangesMessages","Do you want to save the changes to the following {0} files?",e.length),t=R(e)+`
`+t);const{result:r}=await this.dialogService.prompt({type:Y.Warning,message:i,detail:t,buttons:[{label:e.length>1?s.localize({key:"saveAll",comment:["&& denotes a mnemonic"]},"&&Save All"):s.localize({key:"save",comment:["&& denotes a mnemonic"]},"&&Save"),run:()=>f.SAVE},{label:s.localize({key:"dontSave",comment:["&& denotes a mnemonic"]},"Do&&n't Save"),run:()=>f.DONT_SAVE}],cancelButton:{run:()=>f.CANCEL}});return r}addFileSchemaIfNeeded(e,i){return e===d.untitled?[d.file]:e!==d.file?[e,d.file]:[e]}async pickFileFolderAndOpenSimplified(e,i,t){const r=s.localize("openFileOrFolder.title","Open File or Folder"),n=this.addFileSchemaIfNeeded(e),o=await this.pickResource({canSelectFiles:!0,canSelectFolders:!0,canSelectMany:!1,defaultUri:i.defaultUri,title:r,availableFileSystems:n});if(o){const l=await this.fileService.stat(o),c=l.isDirectory?{folderUri:o}:{fileUri:o};!b(c)&&W(c)&&this.addFileToRecentlyOpened(c.fileUri),l.isDirectory||i.forceNewWindow||t?await this.hostService.openWindow([c],{forceNewWindow:i.forceNewWindow,remoteAuthority:i.remoteAuthority}):await this.editorService.openEditors([{resource:o,options:{source:O.USER,pinned:!0}}],void 0,{validateTrust:!0})}}async pickFileAndOpenSimplified(e,i,t){const r=s.localize("openFile.title","Open File"),n=this.addFileSchemaIfNeeded(e),o=await this.pickResource({canSelectFiles:!0,canSelectFolders:!1,canSelectMany:!1,defaultUri:i.defaultUri,title:r,availableFileSystems:n});o&&(this.addFileToRecentlyOpened(o),i.forceNewWindow||t?await this.hostService.openWindow([{fileUri:o}],{forceNewWindow:i.forceNewWindow,remoteAuthority:i.remoteAuthority}):await this.editorService.openEditors([{resource:o,options:{source:O.USER,pinned:!0}}],void 0,{validateTrust:!0}))}addFileToRecentlyOpened(e){this.workspacesService.addRecentlyOpened([{fileUri:e,label:this.labelService.getUriLabel(e)}])}async pickFolderAndOpenSimplified(e,i){const t=s.localize("openFolder.title","Open Folder"),r=this.addFileSchemaIfNeeded(e,!0),n=await this.pickResource({canSelectFiles:!1,canSelectFolders:!0,canSelectMany:!1,defaultUri:i.defaultUri,title:t,availableFileSystems:r});if(n)return this.hostService.openWindow([{folderUri:n}],{forceNewWindow:i.forceNewWindow,remoteAuthority:i.remoteAuthority})}async pickWorkspaceAndOpenSimplified(e,i){const t=s.localize("openWorkspace.title","Open Workspace from File"),r=[{name:s.localize("filterName.workspace","Workspace"),extensions:[N]}],n=this.addFileSchemaIfNeeded(e,!0),o=await this.pickResource({canSelectFiles:!0,canSelectFolders:!1,canSelectMany:!1,defaultUri:i.defaultUri,title:t,filters:r,availableFileSystems:n});if(o)return this.hostService.openWindow([{workspaceUri:o}],{forceNewWindow:i.forceNewWindow,remoteAuthority:i.remoteAuthority})}async pickFileToSaveSimplified(e,i){i.availableFileSystems||(i.availableFileSystems=this.addFileSchemaIfNeeded(e)),i.title=s.localize("saveFileAs.title","Save As");const t=await this.saveRemoteResource(i);return t&&this.addFileToRecentlyOpened(t),t}async showSaveDialogSimplified(e,i){return i.availableFileSystems||(i.availableFileSystems=this.addFileSchemaIfNeeded(e)),this.saveRemoteResource(i)}async showOpenDialogSimplified(e,i){i.availableFileSystems||(i.availableFileSystems=this.addFileSchemaIfNeeded(e,i.canSelectFolders));const t=await this.pickResource(i);return t?[t]:void 0}getSimpleFileDialog(){return this.instantiationService.createInstance(M)}pickResource(e){return this.getSimpleFileDialog().showOpenDialog(e)}saveRemoteResource(e){return this.getSimpleFileDialog().showSaveDialog(e)}getSchemeFilterForWindow(e){return e??this.pathService.defaultUriScheme}getAuthorityFilterForWindow(){return this.environmentService.remoteAuthority}getFileSystemSchema(e){return e.availableFileSystems&&e.availableFileSystems[0]||this.getSchemeFilterForWindow(e.defaultUri?.scheme)}getWorkspaceAvailableFileSystems(e){if(e.availableFileSystems&&e.availableFileSystems.length>0)return e.availableFileSystems;const i=[d.file];return this.environmentService.remoteAuthority&&i.unshift(d.vscodeRemote),i}getPickFileToSaveDialogOptions(e,i){const t={defaultUri:e,title:s.localize("saveAsTitle","Save As"),availableFileSystems:i},r=e?m.extname(e):void 0;let n;const o=this.languageService.getSortedRegisteredLanguageNames(),l=w(o.map(({languageName:c,languageId:F})=>{const h=this.languageService.getExtensions(F);if(!h.length)return null;const S={name:c,extensions:j(h).slice(0,10).map(v=>u(v,"."))},I=r||Q;if(!n&&h.includes(I)){n=S;const v=u(I,".");return S.extensions.includes(v)||S.extensions.unshift(v),null}return S}));return!n&&r&&(n={name:u(r,".").toUpperCase(),extensions:[u(r,".")]}),t.filters=w([{name:s.localize("allFiles","All Files"),extensions:["*"]},n,...l,{name:s.localize("noExt","No Extension"),extensions:[""]}]),t}};g=y([a(0,K),a(1,E),a(2,x),a(3,T),a(4,H),a(5,V),a(6,X),a(7,B),a(8,P),a(9,q),a(10,_),a(11,G),a(12,J),a(13,Z),a(14,ee),a(15,$),a(16,ie)],g);export{g as AbstractFileDialogService};
