var c=Object.defineProperty;var h=Object.getOwnPropertyDescriptor;var p=(i,r,t,e)=>{for(var o=e>1?void 0:e?h(r,t):r,n=i.length-1,a;n>=0;n--)(a=i[n])&&(o=(e?a(r,t,o):a(o))||o);return e&&o&&c(r,t,o),o},l=(i,r)=>(t,e)=>r(t,e,i);import{Disposable as u}from"../../../../base/common/lifecycle.js";import m from"../../../../base/common/severity.js";import{IDialogService as d}from"../../../../platform/dialogs/common/dialogs.js";import{InstantiationType as I,registerSingleton as g}from"../../../../platform/instantiation/common/extensions.js";import{ILogService as f}from"../../../../platform/log/common/log.js";import{DialogsModel as v}from"../../../common/dialogs.js";import{IWorkbenchEnvironmentService as P}from"../../environment/common/environmentService.js";let s=class extends u{constructor(t,e){super();this.environmentService=t;this.logService=e}model=this._register(new v);onWillShowDialog=this.model.onWillShowDialog;onDidShowDialog=this.model.onDidShowDialog;skipDialogs(){return this.environmentService.isExtensionDevelopment&&this.environmentService.extensionTestsLocationURI?!0:!!this.environmentService.enableSmokeTestDriver}async confirm(t){return this.skipDialogs()?(this.logService.trace("DialogService: refused to show confirmation dialog in tests."),{confirmed:!0}):await this.model.show({confirmArgs:{confirmation:t}}).result}async prompt(t){if(this.skipDialogs())throw new Error(`DialogService: refused to show dialog in tests. Contents: ${t.message}`);const o=await this.model.show({promptArgs:{prompt:t}}).result;return{result:await o.result,checkboxChecked:o.checkboxChecked}}async input(t){if(this.skipDialogs())throw new Error("DialogService: refused to show input dialog in tests.");return await this.model.show({inputArgs:{input:t}}).result}async info(t,e){await this.prompt({type:m.Info,message:t,detail:e})}async warn(t,e){await this.prompt({type:m.Warning,message:t,detail:e})}async error(t,e){await this.prompt({type:m.Error,message:t,detail:e})}async about(){if(this.skipDialogs())throw new Error("DialogService: refused to show about dialog in tests.");await this.model.show({}).result}};s=p([l(0,P),l(1,f)],s),g(d,s,I.Delayed);export{s as DialogService};
