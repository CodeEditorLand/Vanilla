{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/dialogs/common/dialogService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport Severity from '../../../../base/common/severity.js';\nimport { Disposable } from '../../../../base/common/lifecycle.js';\nimport { IAsyncPromptResult, IAsyncPromptResultWithCancel, IConfirmation, IConfirmationResult, IDialogService, IInput, IInputResult, IPrompt, IPromptResult, IPromptResultWithCancel, IPromptWithCustomCancel, IPromptWithDefaultCancel } from '../../../../platform/dialogs/common/dialogs.js';\nimport { DialogsModel } from '../../../common/dialogs.js';\nimport { InstantiationType, registerSingleton } from '../../../../platform/instantiation/common/extensions.js';\nimport { IWorkbenchEnvironmentService } from '../../environment/common/environmentService.js';\nimport { ILogService } from '../../../../platform/log/common/log.js';\n\nexport class DialogService extends Disposable implements IDialogService {\n\n\tdeclare readonly _serviceBrand: undefined;\n\n\treadonly model = this._register(new DialogsModel());\n\n\treadonly onWillShowDialog = this.model.onWillShowDialog;\n\n\treadonly onDidShowDialog = this.model.onDidShowDialog;\n\n\tconstructor(\n\t\t@IWorkbenchEnvironmentService private readonly environmentService: IWorkbenchEnvironmentService,\n\t\t@ILogService private readonly logService: ILogService\n\t) {\n\t\tsuper();\n\t}\n\n\tprivate skipDialogs(): boolean {\n\t\tif (this.environmentService.isExtensionDevelopment && this.environmentService.extensionTestsLocationURI) {\n\t\t\treturn true; // integration tests\n\t\t}\n\n\t\treturn !!this.environmentService.enableSmokeTestDriver; // smoke tests\n\t}\n\n\tasync confirm(confirmation: IConfirmation): Promise<IConfirmationResult> {\n\t\tif (this.skipDialogs()) {\n\t\t\tthis.logService.trace('DialogService: refused to show confirmation dialog in tests.');\n\n\t\t\treturn { confirmed: true };\n\t\t}\n\n\t\tconst handle = this.model.show({ confirmArgs: { confirmation } });\n\n\t\treturn await handle.result as IConfirmationResult;\n\t}\n\n\tprompt<T>(prompt: IPromptWithCustomCancel<T>): Promise<IPromptResultWithCancel<T>>;\n\tprompt<T>(prompt: IPromptWithDefaultCancel<T>): Promise<IPromptResult<T>>;\n\tprompt<T>(prompt: IPrompt<T>): Promise<IPromptResult<T>>;\n\tasync prompt<T>(prompt: IPrompt<T> | IPromptWithCustomCancel<T> | IPromptWithDefaultCancel<T>): Promise<IPromptResult<T> | IPromptResultWithCancel<T>> {\n\t\tif (this.skipDialogs()) {\n\t\t\tthrow new Error(`DialogService: refused to show dialog in tests. Contents: ${prompt.message}`);\n\t\t}\n\n\t\tconst handle = this.model.show({ promptArgs: { prompt } });\n\n\t\tconst dialogResult = await handle.result as IAsyncPromptResult<T> | IAsyncPromptResultWithCancel<T>;\n\n\t\treturn {\n\t\t\tresult: await dialogResult.result,\n\t\t\tcheckboxChecked: dialogResult.checkboxChecked\n\t\t};\n\t}\n\n\tasync input(input: IInput): Promise<IInputResult> {\n\t\tif (this.skipDialogs()) {\n\t\t\tthrow new Error('DialogService: refused to show input dialog in tests.');\n\t\t}\n\n\t\tconst handle = this.model.show({ inputArgs: { input } });\n\n\t\treturn await handle.result as IInputResult;\n\t}\n\n\tasync info(message: string, detail?: string): Promise<void> {\n\t\tawait this.prompt({ type: Severity.Info, message, detail });\n\t}\n\n\tasync warn(message: string, detail?: string): Promise<void> {\n\t\tawait this.prompt({ type: Severity.Warning, message, detail });\n\t}\n\n\tasync error(message: string, detail?: string): Promise<void> {\n\t\tawait this.prompt({ type: Severity.Error, message, detail });\n\t}\n\n\tasync about(): Promise<void> {\n\t\tif (this.skipDialogs()) {\n\t\t\tthrow new Error('DialogService: refused to show about dialog in tests.');\n\t\t}\n\n\t\tconst handle = this.model.show({});\n\t\tawait handle.result;\n\t}\n}\n\nregisterSingleton(IDialogService, DialogService, InstantiationType.Delayed);\n"],
  "mappings": ";;;;;;;;;;;;AAKA,OAAO,cAAc;AACrB,SAAS,kBAAkB;AAC3B,SAAS,oBAAoB,8BAA8B,eAAe,qBAAqB,gBAAgB,QAAQ,cAAc,SAAS,eAAe,yBAAyB,yBAAyB,gCAAgC;AAC/O,SAAS,oBAAoB;AAC7B,SAAS,mBAAmB,yBAAyB;AACrD,SAAS,oCAAoC;AAC7C,SAAS,mBAAmB;AAErB,IAAM,gBAAN,cAA4B,WAAqC;AAAA,EAUvE,YACgD,oBACjB,YAC7B;AACD,UAAM;AAHyC;AACjB;AAAA,EAG/B;AAAA,EA5BD,OAawE;AAAA;AAAA;AAAA,EAI9D,QAAQ,KAAK,UAAU,IAAI,aAAa,CAAC;AAAA,EAEzC,mBAAmB,KAAK,MAAM;AAAA,EAE9B,kBAAkB,KAAK,MAAM;AAAA,EAS9B,cAAuB;AAC9B,QAAI,KAAK,mBAAmB,0BAA0B,KAAK,mBAAmB,2BAA2B;AACxG,aAAO;AAAA,IACR;AAEA,WAAO,CAAC,CAAC,KAAK,mBAAmB;AAAA,EAClC;AAAA,EAEA,MAAM,QAAQ,cAA2D;AACxE,QAAI,KAAK,YAAY,GAAG;AACvB,WAAK,WAAW,MAAM,8DAA8D;AAEpF,aAAO,EAAE,WAAW,KAAK;AAAA,IAC1B;AAEA,UAAM,SAAS,KAAK,MAAM,KAAK,EAAE,aAAa,EAAE,aAAa,EAAE,CAAC;AAEhE,WAAO,MAAM,OAAO;AAAA,EACrB;AAAA,EAKA,MAAM,OAAU,QAAuI;AACtJ,QAAI,KAAK,YAAY,GAAG;AACvB,YAAM,IAAI,MAAM,6DAA6D,OAAO,OAAO,EAAE;AAAA,IAC9F;AAEA,UAAM,SAAS,KAAK,MAAM,KAAK,EAAE,YAAY,EAAE,OAAO,EAAE,CAAC;AAEzD,UAAM,eAAe,MAAM,OAAO;AAElC,WAAO;AAAA,MACN,QAAQ,MAAM,aAAa;AAAA,MAC3B,iBAAiB,aAAa;AAAA,IAC/B;AAAA,EACD;AAAA,EAEA,MAAM,MAAM,OAAsC;AACjD,QAAI,KAAK,YAAY,GAAG;AACvB,YAAM,IAAI,MAAM,uDAAuD;AAAA,IACxE;AAEA,UAAM,SAAS,KAAK,MAAM,KAAK,EAAE,WAAW,EAAE,MAAM,EAAE,CAAC;AAEvD,WAAO,MAAM,OAAO;AAAA,EACrB;AAAA,EAEA,MAAM,KAAK,SAAiB,QAAgC;AAC3D,UAAM,KAAK,OAAO,EAAE,MAAM,SAAS,MAAM,SAAS,OAAO,CAAC;AAAA,EAC3D;AAAA,EAEA,MAAM,KAAK,SAAiB,QAAgC;AAC3D,UAAM,KAAK,OAAO,EAAE,MAAM,SAAS,SAAS,SAAS,OAAO,CAAC;AAAA,EAC9D;AAAA,EAEA,MAAM,MAAM,SAAiB,QAAgC;AAC5D,UAAM,KAAK,OAAO,EAAE,MAAM,SAAS,OAAO,SAAS,OAAO,CAAC;AAAA,EAC5D;AAAA,EAEA,MAAM,QAAuB;AAC5B,QAAI,KAAK,YAAY,GAAG;AACvB,YAAM,IAAI,MAAM,uDAAuD;AAAA,IACxE;AAEA,UAAM,SAAS,KAAK,MAAM,KAAK,CAAC,CAAC;AACjC,UAAM,OAAO;AAAA,EACd;AACD;AArFa,gBAAN;AAAA,EAWJ;AAAA,EACA;AAAA,GAZU;AAuFb,kBAAkB,gBAAgB,eAAe,kBAAkB,OAAO;",
  "names": []
}
