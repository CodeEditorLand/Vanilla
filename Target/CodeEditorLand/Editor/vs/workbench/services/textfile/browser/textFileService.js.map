{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/textfile/browser/textFileService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport {\n\ttype VSBuffer,\n\ttype VSBufferReadable,\n\ttype VSBufferReadableStream,\n\tbufferToStream,\n} from \"../../../../base/common/buffer.js\";\nimport {\n\tCancellationToken,\n\tCancellationTokenSource,\n} from \"../../../../base/common/cancellation.js\";\nimport { Codicon } from \"../../../../base/common/codicons.js\";\nimport { Emitter } from \"../../../../base/common/event.js\";\nimport { Disposable } from \"../../../../base/common/lifecycle.js\";\nimport { Schemas } from \"../../../../base/common/network.js\";\nimport { extname as pathExtname } from \"../../../../base/common/path.js\";\nimport {\n\tbasename,\n\tdirname,\n\textname,\n\tisEqual,\n\tjoinPath,\n\ttoLocalResource,\n} from \"../../../../base/common/resources.js\";\nimport {\n\ttype ReadableStream,\n\tconsumeStream,\n} from \"../../../../base/common/stream.js\";\nimport type { URI } from \"../../../../base/common/uri.js\";\nimport { ICodeEditorService } from \"../../../../editor/browser/services/codeEditorService.js\";\nimport { ILanguageService } from \"../../../../editor/common/languages/language.js\";\nimport { PLAINTEXT_LANGUAGE_ID } from \"../../../../editor/common/languages/modesRegistry.js\";\nimport type {\n\tITextModel,\n\tITextSnapshot,\n} from \"../../../../editor/common/model.js\";\nimport {\n\tcreateTextBufferFactoryFromSnapshot,\n\tcreateTextBufferFactoryFromStream,\n} from \"../../../../editor/common/model/textModel.js\";\nimport { IModelService } from \"../../../../editor/common/services/model.js\";\nimport type { IResolvedTextEditorModel } from \"../../../../editor/common/services/resolverService.js\";\nimport { ITextResourceConfigurationService } from \"../../../../editor/common/services/textResourceConfiguration.js\";\nimport { localize } from \"../../../../nls.js\";\nimport {\n\tIDialogService,\n\tIFileDialogService,\n} from \"../../../../platform/dialogs/common/dialogs.js\";\nimport {\n\ttype FileOperationError,\n\tFileOperationResult,\n\ttype ICreateFileOptions,\n\tIFileService,\n\ttype IFileStatWithMetadata,\n\ttype IFileStreamContent,\n} from \"../../../../platform/files/common/files.js\";\nimport { IInstantiationService } from \"../../../../platform/instantiation/common/instantiation.js\";\nimport { ILogService } from \"../../../../platform/log/common/log.js\";\nimport { listErrorForeground } from \"../../../../platform/theme/common/colorRegistry.js\";\nimport { IUriIdentityService } from \"../../../../platform/uriIdentity/common/uriIdentity.js\";\nimport {\n\tIWorkspaceContextService,\n\tWORKSPACE_EXTENSION,\n} from \"../../../../platform/workspace/common/workspace.js\";\nimport {\n\ttype IRevertOptions,\n\tSaveSourceRegistry,\n} from \"../../../common/editor.js\";\nimport { BaseTextEditorModel } from \"../../../common/editor/textEditorModel.js\";\nimport {\n\ttype IDecorationData,\n\ttype IDecorationsProvider,\n\tIDecorationsService,\n} from \"../../decorations/common/decorations.js\";\nimport { IWorkbenchEnvironmentService } from \"../../environment/common/environmentService.js\";\nimport { IElevatedFileService } from \"../../files/common/elevatedFileService.js\";\nimport { IFilesConfigurationService } from \"../../filesConfiguration/common/filesConfigurationService.js\";\nimport { ILifecycleService } from \"../../lifecycle/common/lifecycle.js\";\nimport { IPathService } from \"../../path/common/pathService.js\";\nimport { UntitledTextEditorModel } from \"../../untitled/common/untitledTextEditorModel.js\";\nimport {\n\ttype IUntitledTextEditorModelManager,\n\tIUntitledTextEditorService,\n} from \"../../untitled/common/untitledTextEditorService.js\";\nimport {\n\ttype ICreateFileOperation,\n\ttype IFileOperationUndoRedoInfo,\n\tIWorkingCopyFileService,\n} from \"../../workingCopy/common/workingCopyFileService.js\";\nimport {\n\ttype DecodeStreamError,\n\tDecodeStreamErrorKind,\n\ttype IDecodeStreamResult,\n\tUTF8,\n\tUTF8_with_bom,\n\tUTF16be,\n\tUTF16le,\n\tencodingExists,\n\ttoDecodeStream,\n\ttoEncodeReadable,\n} from \"../common/encoding.js\";\nimport { TextFileEditorModelManager } from \"../common/textFileEditorModelManager.js\";\nimport {\n\ttype IEncodingSupport,\n\ttype IReadTextFileEncodingOptions,\n\ttype IReadTextFileOptions,\n\ttype IResourceEncoding,\n\ttype IResourceEncodings,\n\ttype ITextFileContent,\n\ttype ITextFileEditorModelManager,\n\ttype ITextFileSaveAsOptions,\n\ttype ITextFileSaveOptions,\n\ttype ITextFileService,\n\ttype ITextFileStreamContent,\n\ttype IWriteTextFileOptions,\n\tTextFileEditorModelState,\n\tTextFileOperationError,\n\tTextFileOperationResult,\n\tstringToSnapshot,\n\ttoBufferOrReadable,\n} from \"../common/textfiles.js\";\n\nexport abstract class AbstractTextFileService\n\textends Disposable\n\timplements ITextFileService\n{\n\tdeclare readonly _serviceBrand: undefined;\n\n\tprivate static readonly TEXTFILE_SAVE_CREATE_SOURCE =\n\t\tSaveSourceRegistry.registerSource(\n\t\t\t\"textFileCreate.source\",\n\t\t\tlocalize(\"textFileCreate.source\", \"File Created\"),\n\t\t);\n\tprivate static readonly TEXTFILE_SAVE_REPLACE_SOURCE =\n\t\tSaveSourceRegistry.registerSource(\n\t\t\t\"textFileOverwrite.source\",\n\t\t\tlocalize(\"textFileOverwrite.source\", \"File Replaced\"),\n\t\t);\n\n\treadonly files: ITextFileEditorModelManager = this._register(\n\t\tthis.instantiationService.createInstance(TextFileEditorModelManager),\n\t);\n\n\treadonly untitled: IUntitledTextEditorModelManager =\n\t\tthis.untitledTextEditorService;\n\n\tconstructor(\n\t\t@IFileService protected readonly fileService: IFileService,\n\t\t@IUntitledTextEditorService\n\t\tprivate untitledTextEditorService: IUntitledTextEditorService,\n\t\t@ILifecycleService\n\t\tprotected readonly lifecycleService: ILifecycleService,\n\t\t@IInstantiationService\n\t\tprotected readonly instantiationService: IInstantiationService,\n\t\t@IModelService private readonly modelService: IModelService,\n\t\t@IWorkbenchEnvironmentService\n\t\tprotected readonly environmentService: IWorkbenchEnvironmentService,\n\t\t@IDialogService private readonly dialogService: IDialogService,\n\t\t@IFileDialogService\n\t\tprivate readonly fileDialogService: IFileDialogService,\n\t\t@ITextResourceConfigurationService\n\t\tprotected readonly textResourceConfigurationService: ITextResourceConfigurationService,\n\t\t@IFilesConfigurationService\n\t\tprotected readonly filesConfigurationService: IFilesConfigurationService,\n\t\t@ICodeEditorService\n\t\tprivate readonly codeEditorService: ICodeEditorService,\n\t\t@IPathService private readonly pathService: IPathService,\n\t\t@IWorkingCopyFileService\n\t\tprivate readonly workingCopyFileService: IWorkingCopyFileService,\n\t\t@IUriIdentityService\n\t\tprivate readonly uriIdentityService: IUriIdentityService,\n\t\t@ILanguageService private readonly languageService: ILanguageService,\n\t\t@ILogService protected readonly logService: ILogService,\n\t\t@IElevatedFileService\n\t\tprivate readonly elevatedFileService: IElevatedFileService,\n\t\t@IDecorationsService\n\t\tprivate readonly decorationsService: IDecorationsService,\n\t) {\n\t\tsuper();\n\n\t\tthis.provideDecorations();\n\t}\n\n\t//#region decorations\n\n\tprivate provideDecorations(): void {\n\t\t// Text file model decorations\n\t\tconst provider = this._register(\n\t\t\tnew (class extends Disposable implements IDecorationsProvider {\n\t\t\t\treadonly label = localize(\n\t\t\t\t\t\"textFileModelDecorations\",\n\t\t\t\t\t\"Text File Model Decorations\",\n\t\t\t\t);\n\n\t\t\t\tprivate readonly _onDidChange = this._register(\n\t\t\t\t\tnew Emitter<URI[]>(),\n\t\t\t\t);\n\t\t\t\treadonly onDidChange = this._onDidChange.event;\n\n\t\t\t\tconstructor(\n\t\t\t\t\tprivate readonly files: ITextFileEditorModelManager,\n\t\t\t\t) {\n\t\t\t\t\tsuper();\n\n\t\t\t\t\tthis.registerListeners();\n\t\t\t\t}\n\n\t\t\t\tprivate registerListeners(): void {\n\t\t\t\t\t// Creates\n\t\t\t\t\tthis._register(\n\t\t\t\t\t\tthis.files.onDidResolve(({ model }) => {\n\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\tmodel.isReadonly() ||\n\t\t\t\t\t\t\t\tmodel.hasState(TextFileEditorModelState.ORPHAN)\n\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\tthis._onDidChange.fire([model.resource]);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}),\n\t\t\t\t\t);\n\n\t\t\t\t\t// Removals: once a text file model is no longer\n\t\t\t\t\t// under our control, make sure to signal this as\n\t\t\t\t\t// decoration change because from this point on we\n\t\t\t\t\t// have no way of updating the decoration anymore.\n\t\t\t\t\tthis._register(\n\t\t\t\t\t\tthis.files.onDidRemove((modelUri) =>\n\t\t\t\t\t\t\tthis._onDidChange.fire([modelUri]),\n\t\t\t\t\t\t),\n\t\t\t\t\t);\n\n\t\t\t\t\t// Changes\n\t\t\t\t\tthis._register(\n\t\t\t\t\t\tthis.files.onDidChangeReadonly((model) =>\n\t\t\t\t\t\t\tthis._onDidChange.fire([model.resource]),\n\t\t\t\t\t\t),\n\t\t\t\t\t);\n\t\t\t\t\tthis._register(\n\t\t\t\t\t\tthis.files.onDidChangeOrphaned((model) =>\n\t\t\t\t\t\t\tthis._onDidChange.fire([model.resource]),\n\t\t\t\t\t\t),\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\tprovideDecorations(uri: URI): IDecorationData | undefined {\n\t\t\t\t\tconst model = this.files.get(uri);\n\t\t\t\t\tif (!model || model.isDisposed()) {\n\t\t\t\t\t\treturn undefined;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst isReadonly = model.isReadonly();\n\t\t\t\t\tconst isOrphaned = model.hasState(\n\t\t\t\t\t\tTextFileEditorModelState.ORPHAN,\n\t\t\t\t\t);\n\n\t\t\t\t\t// Readonly + Orphaned\n\t\t\t\t\tif (isReadonly && isOrphaned) {\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\tcolor: listErrorForeground,\n\t\t\t\t\t\t\tletter: Codicon.lockSmall,\n\t\t\t\t\t\t\tstrikethrough: true,\n\t\t\t\t\t\t\ttooltip: localize(\n\t\t\t\t\t\t\t\t\"readonlyAndDeleted\",\n\t\t\t\t\t\t\t\t\"Deleted, Read-only\",\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\n\t\t\t\t\t// Readonly\n\t\t\t\t\telse if (isReadonly) {\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\tletter: Codicon.lockSmall,\n\t\t\t\t\t\t\ttooltip: localize(\"readonly\", \"Read-only\"),\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\n\t\t\t\t\t// Orphaned\n\t\t\t\t\telse if (isOrphaned) {\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\tcolor: listErrorForeground,\n\t\t\t\t\t\t\tstrikethrough: true,\n\t\t\t\t\t\t\ttooltip: localize(\"deleted\", \"Deleted\"),\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\n\t\t\t\t\treturn undefined;\n\t\t\t\t}\n\t\t\t})(this.files),\n\t\t);\n\n\t\tthis._register(\n\t\t\tthis.decorationsService.registerDecorationsProvider(provider),\n\t\t);\n\t}\n\n\t//#endregin\n\n\t//#region text file read / write / create\n\n\tprivate _encoding: EncodingOracle | undefined;\n\n\tget encoding(): EncodingOracle {\n\t\tif (!this._encoding) {\n\t\t\tthis._encoding = this._register(\n\t\t\t\tthis.instantiationService.createInstance(EncodingOracle),\n\t\t\t);\n\t\t}\n\n\t\treturn this._encoding;\n\t}\n\n\tasync read(\n\t\tresource: URI,\n\t\toptions?: IReadTextFileOptions,\n\t): Promise<ITextFileContent> {\n\t\tconst [bufferStream, decoder] = await this.doRead(resource, {\n\t\t\t...options,\n\t\t\t// optimization: since we know that the caller does not\n\t\t\t// care about buffering, we indicate this to the reader.\n\t\t\t// this reduces all the overhead the buffered reading\n\t\t\t// has (open, read, close) if the provider supports\n\t\t\t// unbuffered reading.\n\t\t\tpreferUnbuffered: true,\n\t\t});\n\n\t\treturn {\n\t\t\t...bufferStream,\n\t\t\tencoding: decoder.detected.encoding || UTF8,\n\t\t\tvalue: await consumeStream(decoder.stream, (strings) =>\n\t\t\t\tstrings.join(\"\"),\n\t\t\t),\n\t\t};\n\t}\n\n\tasync readStream(\n\t\tresource: URI,\n\t\toptions?: IReadTextFileOptions,\n\t): Promise<ITextFileStreamContent> {\n\t\tconst [bufferStream, decoder] = await this.doRead(resource, options);\n\n\t\treturn {\n\t\t\t...bufferStream,\n\t\t\tencoding: decoder.detected.encoding || UTF8,\n\t\t\tvalue: await createTextBufferFactoryFromStream(decoder.stream),\n\t\t};\n\t}\n\n\tprivate async doRead(\n\t\tresource: URI,\n\t\toptions?: IReadTextFileOptions & { preferUnbuffered?: boolean },\n\t): Promise<[IFileStreamContent, IDecodeStreamResult]> {\n\t\tconst cts = new CancellationTokenSource();\n\n\t\t// read stream raw (either buffered or unbuffered)\n\t\tlet bufferStream: IFileStreamContent;\n\t\tif (options?.preferUnbuffered) {\n\t\t\tconst content = await this.fileService.readFile(\n\t\t\t\tresource,\n\t\t\t\toptions,\n\t\t\t\tcts.token,\n\t\t\t);\n\t\t\tbufferStream = {\n\t\t\t\t...content,\n\t\t\t\tvalue: bufferToStream(content.value),\n\t\t\t};\n\t\t} else {\n\t\t\tbufferStream = await this.fileService.readFileStream(\n\t\t\t\tresource,\n\t\t\t\toptions,\n\t\t\t\tcts.token,\n\t\t\t);\n\t\t}\n\n\t\t// read through encoding library\n\t\ttry {\n\t\t\tconst decoder = await this.doGetDecodedStream(\n\t\t\t\tresource,\n\t\t\t\tbufferStream.value,\n\t\t\t\toptions,\n\t\t\t);\n\n\t\t\treturn [bufferStream, decoder];\n\t\t} catch (error) {\n\t\t\t// Make sure to cancel reading on error to\n\t\t\t// stop file service activity as soon as\n\t\t\t// possible. When for example a large binary\n\t\t\t// file is read we want to cancel the read\n\t\t\t// instantly.\n\t\t\t// Refs:\n\t\t\t// - https://github.com/microsoft/vscode/issues/138805\n\t\t\t// - https://github.com/microsoft/vscode/issues/132771\n\t\t\tcts.dispose(true);\n\n\t\t\t// special treatment for streams that are binary\n\t\t\tif (\n\t\t\t\t(<DecodeStreamError>error).decodeStreamErrorKind ===\n\t\t\t\tDecodeStreamErrorKind.STREAM_IS_BINARY\n\t\t\t) {\n\t\t\t\tthrow new TextFileOperationError(\n\t\t\t\t\tlocalize(\n\t\t\t\t\t\t\"fileBinaryError\",\n\t\t\t\t\t\t\"File seems to be binary and cannot be opened as text\",\n\t\t\t\t\t),\n\t\t\t\t\tTextFileOperationResult.FILE_IS_BINARY,\n\t\t\t\t\toptions,\n\t\t\t\t);\n\t\t\t}\n\n\t\t\t// re-throw any other error as it is\n\t\t\telse {\n\t\t\t\tthrow error;\n\t\t\t}\n\t\t}\n\t}\n\n\tasync create(\n\t\toperations: {\n\t\t\tresource: URI;\n\t\t\tvalue?: string | ITextSnapshot;\n\t\t\toptions?: ICreateFileOptions;\n\t\t}[],\n\t\tundoInfo?: IFileOperationUndoRedoInfo,\n\t): Promise<readonly IFileStatWithMetadata[]> {\n\t\tconst operationsWithContents: ICreateFileOperation[] =\n\t\t\tawait Promise.all(\n\t\t\t\toperations.map(async (operation) => {\n\t\t\t\t\tconst contents = await this.getEncodedReadable(\n\t\t\t\t\t\toperation.resource,\n\t\t\t\t\t\toperation.value,\n\t\t\t\t\t);\n\t\t\t\t\treturn {\n\t\t\t\t\t\tresource: operation.resource,\n\t\t\t\t\t\tcontents,\n\t\t\t\t\t\toverwrite: operation.options?.overwrite,\n\t\t\t\t\t};\n\t\t\t\t}),\n\t\t\t);\n\n\t\treturn this.workingCopyFileService.create(\n\t\t\toperationsWithContents,\n\t\t\tCancellationToken.None,\n\t\t\tundoInfo,\n\t\t);\n\t}\n\n\tasync write(\n\t\tresource: URI,\n\t\tvalue: string | ITextSnapshot,\n\t\toptions?: IWriteTextFileOptions,\n\t): Promise<IFileStatWithMetadata> {\n\t\tconst readable = await this.getEncodedReadable(\n\t\t\tresource,\n\t\t\tvalue,\n\t\t\toptions,\n\t\t);\n\n\t\tif (\n\t\t\toptions?.writeElevated &&\n\t\t\tthis.elevatedFileService.isSupported(resource)\n\t\t) {\n\t\t\treturn this.elevatedFileService.writeFileElevated(\n\t\t\t\tresource,\n\t\t\t\treadable,\n\t\t\t\toptions,\n\t\t\t);\n\t\t}\n\n\t\treturn this.fileService.writeFile(resource, readable, options);\n\t}\n\n\tasync getEncodedReadable(\n\t\tresource: URI,\n\t\tvalue: ITextSnapshot,\n\t): Promise<VSBufferReadable>;\n\tasync getEncodedReadable(resource: URI, value: string): Promise<VSBuffer>;\n\tasync getEncodedReadable(\n\t\tresource: URI,\n\t\tvalue?: ITextSnapshot,\n\t): Promise<VSBufferReadable | undefined>;\n\tasync getEncodedReadable(\n\t\tresource: URI,\n\t\tvalue?: string,\n\t): Promise<VSBuffer | undefined>;\n\tasync getEncodedReadable(\n\t\tresource: URI,\n\t\tvalue?: string | ITextSnapshot,\n\t): Promise<VSBuffer | VSBufferReadable | undefined>;\n\tasync getEncodedReadable(\n\t\tresource: URI,\n\t\tvalue: string | ITextSnapshot,\n\t\toptions?: IWriteTextFileOptions,\n\t): Promise<VSBuffer | VSBufferReadable>;\n\tasync getEncodedReadable(\n\t\tresource: URI,\n\t\tvalue?: string | ITextSnapshot,\n\t\toptions?: IWriteTextFileOptions,\n\t): Promise<VSBuffer | VSBufferReadable | undefined> {\n\t\t// check for encoding\n\t\tconst { encoding, addBOM } = await this.encoding.getWriteEncoding(\n\t\t\tresource,\n\t\t\toptions,\n\t\t);\n\n\t\t// when encoding is standard skip encoding step\n\t\tif (encoding === UTF8 && !addBOM) {\n\t\t\treturn typeof value === \"undefined\"\n\t\t\t\t? undefined\n\t\t\t\t: toBufferOrReadable(value);\n\t\t}\n\n\t\t// otherwise create encoded readable\n\t\tvalue = value || \"\";\n\t\tconst snapshot =\n\t\t\ttypeof value === \"string\" ? stringToSnapshot(value) : value;\n\t\treturn toEncodeReadable(snapshot, encoding, { addBOM });\n\t}\n\n\tasync getDecodedStream(\n\t\tresource: URI,\n\t\tvalue: VSBufferReadableStream,\n\t\toptions?: IReadTextFileEncodingOptions,\n\t): Promise<ReadableStream<string>> {\n\t\treturn (await this.doGetDecodedStream(resource, value, options)).stream;\n\t}\n\n\tprivate doGetDecodedStream(\n\t\tresource: URI,\n\t\tstream: VSBufferReadableStream,\n\t\toptions?: IReadTextFileEncodingOptions,\n\t): Promise<IDecodeStreamResult> {\n\t\t// read through encoding library\n\t\treturn toDecodeStream(stream, {\n\t\t\tacceptTextOnly: options?.acceptTextOnly ?? false,\n\t\t\tguessEncoding:\n\t\t\t\toptions?.autoGuessEncoding ||\n\t\t\t\tthis.textResourceConfigurationService.getValue(\n\t\t\t\t\tresource,\n\t\t\t\t\t\"files.autoGuessEncoding\",\n\t\t\t\t),\n\t\t\tcandidateGuessEncodings:\n\t\t\t\toptions?.candidateGuessEncodings ||\n\t\t\t\tthis.textResourceConfigurationService.getValue(\n\t\t\t\t\tresource,\n\t\t\t\t\t\"files.candidateGuessEncodings\",\n\t\t\t\t),\n\t\t\toverwriteEncoding: async (detectedEncoding) => {\n\t\t\t\tconst { encoding } =\n\t\t\t\t\tawait this.encoding.getPreferredReadEncoding(\n\t\t\t\t\t\tresource,\n\t\t\t\t\t\toptions,\n\t\t\t\t\t\tdetectedEncoding ?? undefined,\n\t\t\t\t\t);\n\n\t\t\t\treturn encoding;\n\t\t\t},\n\t\t});\n\t}\n\n\t//#endregion\n\n\t//#region save\n\n\tasync save(\n\t\tresource: URI,\n\t\toptions?: ITextFileSaveOptions,\n\t): Promise<URI | undefined> {\n\t\t// Untitled\n\t\tif (resource.scheme === Schemas.untitled) {\n\t\t\tconst model = this.untitled.get(resource);\n\t\t\tif (model) {\n\t\t\t\tlet targetUri: URI | undefined;\n\n\t\t\t\t// Untitled with associated file path don't need to prompt\n\t\t\t\tif (model.hasAssociatedFilePath) {\n\t\t\t\t\ttargetUri = await this.suggestSavePath(resource);\n\t\t\t\t}\n\n\t\t\t\t// Otherwise ask user\n\t\t\t\telse {\n\t\t\t\t\ttargetUri = await this.fileDialogService.pickFileToSave(\n\t\t\t\t\t\tawait this.suggestSavePath(resource),\n\t\t\t\t\t\toptions?.availableFileSystems,\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\t// Save as if target provided\n\t\t\t\tif (targetUri) {\n\t\t\t\t\treturn this.saveAs(resource, targetUri, options);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// File\n\t\telse {\n\t\t\tconst model = this.files.get(resource);\n\t\t\tif (model) {\n\t\t\t\treturn (await model.save(options)) ? resource : undefined;\n\t\t\t}\n\t\t}\n\n\t\treturn undefined;\n\t}\n\n\tasync saveAs(\n\t\tsource: URI,\n\t\ttarget?: URI,\n\t\toptions?: ITextFileSaveAsOptions,\n\t): Promise<URI | undefined> {\n\t\t// Get to target resource\n\t\tif (!target) {\n\t\t\ttarget = await this.fileDialogService.pickFileToSave(\n\t\t\t\tawait this.suggestSavePath(options?.suggestedTarget ?? source),\n\t\t\t\toptions?.availableFileSystems,\n\t\t\t);\n\t\t}\n\n\t\tif (!target) {\n\t\t\treturn; // user canceled\n\t\t}\n\n\t\t// Ensure target is not marked as readonly and prompt otherwise\n\t\tif (this.filesConfigurationService.isReadonly(target)) {\n\t\t\tconst confirmed = await this.confirmMakeWriteable(target);\n\t\t\tif (confirmed) {\n\t\t\t\tthis.filesConfigurationService.updateReadonly(target, false);\n\t\t\t} else {\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\t// Just save if target is same as models own resource\n\t\tif (isEqual(source, target)) {\n\t\t\treturn this.save(source, {\n\t\t\t\t...options,\n\t\t\t\tforce: true /* force to save, even if not dirty (https://github.com/microsoft/vscode/issues/99619) */,\n\t\t\t});\n\t\t}\n\n\t\t// If the target is different but of same identity, we\n\t\t// move the source to the target, knowing that the\n\t\t// underlying file system cannot have both and then save.\n\t\t// However, this will only work if the source exists\n\t\t// and is not orphaned, so we need to check that too.\n\t\tif (\n\t\t\tthis.fileService.hasProvider(source) &&\n\t\t\tthis.uriIdentityService.extUri.isEqual(source, target) &&\n\t\t\t(await this.fileService.exists(source))\n\t\t) {\n\t\t\tawait this.workingCopyFileService.move(\n\t\t\t\t[{ file: { source, target } }],\n\t\t\t\tCancellationToken.None,\n\t\t\t);\n\n\t\t\t// At this point we don't know whether we have a\n\t\t\t// model for the source or the target URI so we\n\t\t\t// simply try to save with both resources.\n\t\t\tconst success = await this.save(source, options);\n\t\t\tif (!success) {\n\t\t\t\tawait this.save(target, options);\n\t\t\t}\n\n\t\t\treturn target;\n\t\t}\n\n\t\t// Do it\n\t\treturn this.doSaveAs(source, target, options);\n\t}\n\n\tprivate async doSaveAs(\n\t\tsource: URI,\n\t\ttarget: URI,\n\t\toptions?: ITextFileSaveOptions,\n\t): Promise<URI | undefined> {\n\t\tlet success = false;\n\n\t\t// If the source is an existing text file model, we can directly\n\t\t// use that model to copy the contents to the target destination\n\t\tconst textFileModel = this.files.get(source);\n\t\tif (textFileModel?.isResolved()) {\n\t\t\tsuccess = await this.doSaveAsTextFile(\n\t\t\t\ttextFileModel,\n\t\t\t\tsource,\n\t\t\t\ttarget,\n\t\t\t\toptions,\n\t\t\t);\n\t\t}\n\n\t\t// Otherwise if the source can be handled by the file service\n\t\t// we can simply invoke the copy() function to save as\n\t\telse if (this.fileService.hasProvider(source)) {\n\t\t\tawait this.fileService.copy(source, target, true);\n\n\t\t\tsuccess = true;\n\t\t}\n\n\t\t// Finally we simply check if we can find a editor model that\n\t\t// would give us access to the contents.\n\t\telse {\n\t\t\tconst textModel = this.modelService.getModel(source);\n\t\t\tif (textModel) {\n\t\t\t\tsuccess = await this.doSaveAsTextFile(\n\t\t\t\t\ttextModel,\n\t\t\t\t\tsource,\n\t\t\t\t\ttarget,\n\t\t\t\t\toptions,\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\tif (!success) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\t// Revert the source\n\t\ttry {\n\t\t\tawait this.revert(source);\n\t\t} catch (error) {\n\t\t\t// It is possible that reverting the source fails, for example\n\t\t\t// when a remote is disconnected and we cannot read it anymore.\n\t\t\t// However, this should not interrupt the \"Save As\" flow, so\n\t\t\t// we gracefully catch the error and just log it.\n\n\t\t\tthis.logService.error(error);\n\t\t}\n\n\t\treturn target;\n\t}\n\n\tprivate async doSaveAsTextFile(\n\t\tsourceModel: IResolvedTextEditorModel | ITextModel,\n\t\tsource: URI,\n\t\ttarget: URI,\n\t\toptions?: ITextFileSaveOptions,\n\t): Promise<boolean> {\n\t\t// Find source encoding if any\n\t\tlet sourceModelEncoding: string | undefined;\n\t\tconst sourceModelWithEncodingSupport =\n\t\t\tsourceModel as unknown as IEncodingSupport;\n\t\tif (typeof sourceModelWithEncodingSupport.getEncoding === \"function\") {\n\t\t\tsourceModelEncoding = sourceModelWithEncodingSupport.getEncoding();\n\t\t}\n\n\t\t// Prefer an existing model if it is already resolved for the given target resource\n\t\tlet targetExists = false;\n\t\tlet targetModel = this.files.get(target);\n\t\tif (targetModel?.isResolved()) {\n\t\t\ttargetExists = true;\n\t\t}\n\n\t\t// Otherwise create the target file empty if it does not exist already and resolve it from there\n\t\telse {\n\t\t\ttargetExists = await this.fileService.exists(target);\n\n\t\t\t// create target file adhoc if it does not exist yet\n\t\t\tif (!targetExists) {\n\t\t\t\tawait this.create([{ resource: target, value: \"\" }]);\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\ttargetModel = await this.files.resolve(target, {\n\t\t\t\t\tencoding: sourceModelEncoding,\n\t\t\t\t});\n\t\t\t} catch (error) {\n\t\t\t\t// if the target already exists and was not created by us, it is possible\n\t\t\t\t// that we cannot resolve the target as text model if it is binary or too\n\t\t\t\t// large. in that case we have to delete the target file first and then\n\t\t\t\t// re-run the operation.\n\t\t\t\tif (targetExists) {\n\t\t\t\t\tif (\n\t\t\t\t\t\t(<TextFileOperationError>error)\n\t\t\t\t\t\t\t.textFileOperationResult ===\n\t\t\t\t\t\t\tTextFileOperationResult.FILE_IS_BINARY ||\n\t\t\t\t\t\t(<FileOperationError>error).fileOperationResult ===\n\t\t\t\t\t\t\tFileOperationResult.FILE_TOO_LARGE\n\t\t\t\t\t) {\n\t\t\t\t\t\tawait this.fileService.del(target);\n\n\t\t\t\t\t\treturn this.doSaveAsTextFile(\n\t\t\t\t\t\t\tsourceModel,\n\t\t\t\t\t\t\tsource,\n\t\t\t\t\t\t\ttarget,\n\t\t\t\t\t\t\toptions,\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tthrow error;\n\t\t\t}\n\t\t}\n\n\t\t// Confirm to overwrite if we have an untitled file with associated file where\n\t\t// the file actually exists on disk and we are instructed to save to that file\n\t\t// path. This can happen if the file was created after the untitled file was opened.\n\t\t// See https://github.com/microsoft/vscode/issues/67946\n\t\tlet write: boolean;\n\t\tif (\n\t\t\tsourceModel instanceof UntitledTextEditorModel &&\n\t\t\tsourceModel.hasAssociatedFilePath &&\n\t\t\ttargetExists &&\n\t\t\tthis.uriIdentityService.extUri.isEqual(\n\t\t\t\ttarget,\n\t\t\t\ttoLocalResource(\n\t\t\t\t\tsourceModel.resource,\n\t\t\t\t\tthis.environmentService.remoteAuthority,\n\t\t\t\t\tthis.pathService.defaultUriScheme,\n\t\t\t\t),\n\t\t\t)\n\t\t) {\n\t\t\twrite = await this.confirmOverwrite(target);\n\t\t} else {\n\t\t\twrite = true;\n\t\t}\n\n\t\tif (!write) {\n\t\t\treturn false;\n\t\t}\n\n\t\tlet sourceTextModel: ITextModel | undefined;\n\t\tif (sourceModel instanceof BaseTextEditorModel) {\n\t\t\tif (sourceModel.isResolved()) {\n\t\t\t\tsourceTextModel = sourceModel.textEditorModel ?? undefined;\n\t\t\t}\n\t\t} else {\n\t\t\tsourceTextModel = sourceModel as ITextModel;\n\t\t}\n\n\t\tlet targetTextModel: ITextModel | undefined;\n\t\tif (targetModel.isResolved()) {\n\t\t\ttargetTextModel = targetModel.textEditorModel;\n\t\t}\n\n\t\t// take over model value, encoding and language (only if more specific) from source model\n\t\tif (sourceTextModel && targetTextModel) {\n\t\t\t// encoding\n\t\t\ttargetModel.updatePreferredEncoding(sourceModelEncoding);\n\n\t\t\t// content\n\t\t\tthis.modelService.updateModel(\n\t\t\t\ttargetTextModel,\n\t\t\t\tcreateTextBufferFactoryFromSnapshot(\n\t\t\t\t\tsourceTextModel.createSnapshot(),\n\t\t\t\t),\n\t\t\t);\n\n\t\t\t// language\n\t\t\tconst sourceLanguageId = sourceTextModel.getLanguageId();\n\t\t\tconst targetLanguageId = targetTextModel.getLanguageId();\n\t\t\tif (\n\t\t\t\tsourceLanguageId !== PLAINTEXT_LANGUAGE_ID &&\n\t\t\t\ttargetLanguageId === PLAINTEXT_LANGUAGE_ID\n\t\t\t) {\n\t\t\t\ttargetTextModel.setLanguage(sourceLanguageId); // only use if more specific than plain/text\n\t\t\t}\n\n\t\t\t// transient properties\n\t\t\tconst sourceTransientProperties =\n\t\t\t\tthis.codeEditorService.getTransientModelProperties(\n\t\t\t\t\tsourceTextModel,\n\t\t\t\t);\n\t\t\tif (sourceTransientProperties) {\n\t\t\t\tfor (const [key, value] of sourceTransientProperties) {\n\t\t\t\t\tthis.codeEditorService.setTransientModelProperty(\n\t\t\t\t\t\ttargetTextModel,\n\t\t\t\t\t\tkey,\n\t\t\t\t\t\tvalue,\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// set source options depending on target exists or not\n\t\tif (!options?.source) {\n\t\t\toptions = {\n\t\t\t\t...options,\n\t\t\t\tsource: targetExists\n\t\t\t\t\t? AbstractTextFileService.TEXTFILE_SAVE_REPLACE_SOURCE\n\t\t\t\t\t: AbstractTextFileService.TEXTFILE_SAVE_CREATE_SOURCE,\n\t\t\t};\n\t\t}\n\n\t\t// save model\n\t\treturn targetModel.save({\n\t\t\t...options,\n\t\t\tfrom: source,\n\t\t});\n\t}\n\n\tprivate async confirmOverwrite(resource: URI): Promise<boolean> {\n\t\tconst { confirmed } = await this.dialogService.confirm({\n\t\t\ttype: \"warning\",\n\t\t\tmessage: localize(\n\t\t\t\t\"confirmOverwrite\",\n\t\t\t\t\"'{0}' already exists. Do you want to replace it?\",\n\t\t\t\tbasename(resource),\n\t\t\t),\n\t\t\tdetail: localize(\n\t\t\t\t\"overwriteIrreversible\",\n\t\t\t\t\"A file or folder with the name '{0}' already exists in the folder '{1}'. Replacing it will overwrite its current contents.\",\n\t\t\t\tbasename(resource),\n\t\t\t\tbasename(dirname(resource)),\n\t\t\t),\n\t\t\tprimaryButton: localize(\n\t\t\t\t{\n\t\t\t\t\tkey: \"replaceButtonLabel\",\n\t\t\t\t\tcomment: [\"&& denotes a mnemonic\"],\n\t\t\t\t},\n\t\t\t\t\"&&Replace\",\n\t\t\t),\n\t\t});\n\n\t\treturn confirmed;\n\t}\n\n\tprivate async confirmMakeWriteable(resource: URI): Promise<boolean> {\n\t\tconst { confirmed } = await this.dialogService.confirm({\n\t\t\ttype: \"warning\",\n\t\t\tmessage: localize(\n\t\t\t\t\"confirmMakeWriteable\",\n\t\t\t\t\"'{0}' is marked as read-only. Do you want to save anyway?\",\n\t\t\t\tbasename(resource),\n\t\t\t),\n\t\t\tdetail: localize(\n\t\t\t\t\"confirmMakeWriteableDetail\",\n\t\t\t\t\"Paths can be configured as read-only via settings.\",\n\t\t\t),\n\t\t\tprimaryButton: localize(\n\t\t\t\t{\n\t\t\t\t\tkey: \"makeWriteableButtonLabel\",\n\t\t\t\t\tcomment: [\"&& denotes a mnemonic\"],\n\t\t\t\t},\n\t\t\t\t\"&&Save Anyway\",\n\t\t\t),\n\t\t});\n\n\t\treturn confirmed;\n\t}\n\n\tprivate async suggestSavePath(resource: URI): Promise<URI> {\n\t\t// Just take the resource as is if the file service can handle it\n\t\tif (this.fileService.hasProvider(resource)) {\n\t\t\treturn resource;\n\t\t}\n\n\t\tconst remoteAuthority = this.environmentService.remoteAuthority;\n\t\tconst defaultFilePath = await this.fileDialogService.defaultFilePath();\n\n\t\t// Otherwise try to suggest a path that can be saved\n\t\tlet suggestedFilename: string | undefined;\n\t\tif (resource.scheme === Schemas.untitled) {\n\t\t\tconst model = this.untitled.get(resource);\n\t\t\tif (model) {\n\t\t\t\t// Untitled with associated file path\n\t\t\t\tif (model.hasAssociatedFilePath) {\n\t\t\t\t\treturn toLocalResource(\n\t\t\t\t\t\tresource,\n\t\t\t\t\t\tremoteAuthority,\n\t\t\t\t\t\tthis.pathService.defaultUriScheme,\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\t// Untitled without associated file path: use name\n\t\t\t\t// of untitled model if it is a valid path name and\n\t\t\t\t// figure out the file extension from the mode if any.\n\n\t\t\t\tlet nameCandidate: string;\n\t\t\t\tif (\n\t\t\t\t\tawait this.pathService.hasValidBasename(\n\t\t\t\t\t\tjoinPath(defaultFilePath, model.name),\n\t\t\t\t\t\tmodel.name,\n\t\t\t\t\t)\n\t\t\t\t) {\n\t\t\t\t\tnameCandidate = model.name;\n\t\t\t\t} else {\n\t\t\t\t\tnameCandidate = basename(resource);\n\t\t\t\t}\n\n\t\t\t\tconst languageId = model.getLanguageId();\n\t\t\t\tif (languageId && languageId !== PLAINTEXT_LANGUAGE_ID) {\n\t\t\t\t\tsuggestedFilename = this.suggestFilename(\n\t\t\t\t\t\tlanguageId,\n\t\t\t\t\t\tnameCandidate,\n\t\t\t\t\t);\n\t\t\t\t} else {\n\t\t\t\t\tsuggestedFilename = nameCandidate;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Fallback to basename of resource\n\t\tif (!suggestedFilename) {\n\t\t\tsuggestedFilename = basename(resource);\n\t\t}\n\n\t\t// Try to place where last active file was if any\n\t\t// Otherwise fallback to user home\n\t\treturn joinPath(defaultFilePath, suggestedFilename);\n\t}\n\n\tsuggestFilename(languageId: string, untitledName: string) {\n\t\tconst languageName = this.languageService.getLanguageName(languageId);\n\t\tif (!languageName) {\n\t\t\treturn untitledName; // unknown language, so we cannot suggest a better name\n\t\t}\n\n\t\tconst untitledExtension = pathExtname(untitledName);\n\n\t\tconst extensions = this.languageService.getExtensions(languageId);\n\t\tif (extensions.includes(untitledExtension)) {\n\t\t\treturn untitledName; // preserve extension if it is compatible with the mode\n\t\t}\n\n\t\tconst primaryExtension = extensions.at(0);\n\t\tif (primaryExtension) {\n\t\t\tif (untitledExtension) {\n\t\t\t\treturn `${untitledName.substring(0, untitledName.indexOf(untitledExtension))}${primaryExtension}`;\n\t\t\t}\n\n\t\t\treturn `${untitledName}${primaryExtension}`;\n\t\t}\n\n\t\tconst filenames = this.languageService.getFilenames(languageId);\n\t\tif (filenames.includes(untitledName)) {\n\t\t\treturn untitledName; // preserve name if it is compatible with the mode\n\t\t}\n\n\t\treturn filenames.at(0) ?? untitledName;\n\t}\n\n\t//#endregion\n\n\t//#region revert\n\n\tasync revert(resource: URI, options?: IRevertOptions): Promise<void> {\n\t\t// Untitled\n\t\tif (resource.scheme === Schemas.untitled) {\n\t\t\tconst model = this.untitled.get(resource);\n\t\t\tif (model) {\n\t\t\t\treturn model.revert(options);\n\t\t\t}\n\t\t}\n\n\t\t// File\n\t\telse {\n\t\t\tconst model = this.files.get(resource);\n\t\t\tif (model && (model.isDirty() || options?.force)) {\n\t\t\t\treturn model.revert(options);\n\t\t\t}\n\t\t}\n\t}\n\n\t//#endregion\n\n\t//#region dirty\n\n\tisDirty(resource: URI): boolean {\n\t\tconst model =\n\t\t\tresource.scheme === Schemas.untitled\n\t\t\t\t? this.untitled.get(resource)\n\t\t\t\t: this.files.get(resource);\n\t\tif (model) {\n\t\t\treturn model.isDirty();\n\t\t}\n\n\t\treturn false;\n\t}\n\n\t//#endregion\n}\n\nexport interface IEncodingOverride {\n\tparent?: URI;\n\textension?: string;\n\tencoding: string;\n}\n\nexport class EncodingOracle extends Disposable implements IResourceEncodings {\n\tprivate _encodingOverrides: IEncodingOverride[];\n\tprotected get encodingOverrides(): IEncodingOverride[] {\n\t\treturn this._encodingOverrides;\n\t}\n\tprotected set encodingOverrides(value: IEncodingOverride[]) {\n\t\tthis._encodingOverrides = value;\n\t}\n\n\tconstructor(\n\t\t@ITextResourceConfigurationService\n\t\tprivate textResourceConfigurationService: ITextResourceConfigurationService,\n\t\t@IWorkbenchEnvironmentService\n\t\tprivate environmentService: IWorkbenchEnvironmentService,\n\t\t@IWorkspaceContextService\n\t\tprivate contextService: IWorkspaceContextService,\n\t\t@IUriIdentityService\n\t\tprivate readonly uriIdentityService: IUriIdentityService,\n\t) {\n\t\tsuper();\n\n\t\tthis._encodingOverrides = this.getDefaultEncodingOverrides();\n\n\t\tthis.registerListeners();\n\t}\n\n\tprivate registerListeners(): void {\n\t\t// Workspace Folder Change\n\t\tthis._register(\n\t\t\tthis.contextService.onDidChangeWorkspaceFolders(\n\t\t\t\t() =>\n\t\t\t\t\t(this.encodingOverrides =\n\t\t\t\t\t\tthis.getDefaultEncodingOverrides()),\n\t\t\t),\n\t\t);\n\t}\n\n\tprivate getDefaultEncodingOverrides(): IEncodingOverride[] {\n\t\tconst defaultEncodingOverrides: IEncodingOverride[] = [];\n\n\t\t// Global settings\n\t\tdefaultEncodingOverrides.push({\n\t\t\tparent: this.environmentService.userRoamingDataHome,\n\t\t\tencoding: UTF8,\n\t\t});\n\n\t\t// Workspace files (via extension and via untitled workspaces location)\n\t\tdefaultEncodingOverrides.push({\n\t\t\textension: WORKSPACE_EXTENSION,\n\t\t\tencoding: UTF8,\n\t\t});\n\t\tdefaultEncodingOverrides.push({\n\t\t\tparent: this.environmentService.untitledWorkspacesHome,\n\t\t\tencoding: UTF8,\n\t\t});\n\n\t\t// Folder Settings\n\t\tthis.contextService.getWorkspace().folders.forEach((folder) => {\n\t\t\tdefaultEncodingOverrides.push({\n\t\t\t\tparent: joinPath(folder.uri, \".vscode\"),\n\t\t\t\tencoding: UTF8,\n\t\t\t});\n\t\t});\n\n\t\treturn defaultEncodingOverrides;\n\t}\n\n\tasync getWriteEncoding(\n\t\tresource: URI,\n\t\toptions?: IWriteTextFileOptions,\n\t): Promise<{ encoding: string; addBOM: boolean }> {\n\t\tconst { encoding, hasBOM } = await this.getPreferredWriteEncoding(\n\t\t\tresource,\n\t\t\toptions ? options.encoding : undefined,\n\t\t);\n\n\t\treturn { encoding, addBOM: hasBOM };\n\t}\n\n\tasync getPreferredWriteEncoding(\n\t\tresource: URI,\n\t\tpreferredEncoding?: string,\n\t): Promise<IResourceEncoding> {\n\t\tconst resourceEncoding = await this.getEncodingForResource(\n\t\t\tresource,\n\t\t\tpreferredEncoding,\n\t\t);\n\n\t\treturn {\n\t\t\tencoding: resourceEncoding,\n\t\t\thasBOM:\n\t\t\t\tresourceEncoding === UTF16be ||\n\t\t\t\tresourceEncoding === UTF16le ||\n\t\t\t\tresourceEncoding === UTF8_with_bom, // enforce BOM for certain encodings\n\t\t};\n\t}\n\n\tasync getPreferredReadEncoding(\n\t\tresource: URI,\n\t\toptions?: IReadTextFileEncodingOptions,\n\t\tdetectedEncoding?: string,\n\t): Promise<IResourceEncoding> {\n\t\tlet preferredEncoding: string | undefined;\n\n\t\t// Encoding passed in as option\n\t\tif (options?.encoding) {\n\t\t\tif (\n\t\t\t\tdetectedEncoding === UTF8_with_bom &&\n\t\t\t\toptions.encoding === UTF8\n\t\t\t) {\n\t\t\t\tpreferredEncoding = UTF8_with_bom; // indicate the file has BOM if we are to resolve with UTF 8\n\t\t\t} else {\n\t\t\t\tpreferredEncoding = options.encoding; // give passed in encoding highest priority\n\t\t\t}\n\t\t}\n\n\t\t// Encoding detected\n\t\telse if (typeof detectedEncoding === \"string\") {\n\t\t\tpreferredEncoding = detectedEncoding;\n\t\t}\n\n\t\t// Encoding configured\n\t\telse if (\n\t\t\tthis.textResourceConfigurationService.getValue(\n\t\t\t\tresource,\n\t\t\t\t\"files.encoding\",\n\t\t\t) === UTF8_with_bom\n\t\t) {\n\t\t\tpreferredEncoding = UTF8; // if we did not detect UTF 8 BOM before, this can only be UTF 8 then\n\t\t}\n\n\t\tconst encoding = await this.getEncodingForResource(\n\t\t\tresource,\n\t\t\tpreferredEncoding,\n\t\t);\n\n\t\treturn {\n\t\t\tencoding,\n\t\t\thasBOM:\n\t\t\t\tencoding === UTF16be ||\n\t\t\t\tencoding === UTF16le ||\n\t\t\t\tencoding === UTF8_with_bom, // enforce BOM for certain encodings\n\t\t};\n\t}\n\n\tprivate async getEncodingForResource(\n\t\tresource: URI,\n\t\tpreferredEncoding?: string,\n\t): Promise<string> {\n\t\tlet fileEncoding: string;\n\n\t\tconst override = this.getEncodingOverride(resource);\n\t\tif (override) {\n\t\t\tfileEncoding = override; // encoding override always wins\n\t\t} else if (preferredEncoding) {\n\t\t\tfileEncoding = preferredEncoding; // preferred encoding comes second\n\t\t} else {\n\t\t\tfileEncoding = this.textResourceConfigurationService.getValue(\n\t\t\t\tresource,\n\t\t\t\t\"files.encoding\",\n\t\t\t); // and last we check for settings\n\t\t}\n\n\t\tif (fileEncoding !== UTF8) {\n\t\t\tif (!fileEncoding || !(await encodingExists(fileEncoding))) {\n\t\t\t\tfileEncoding = UTF8; // the default is UTF-8\n\t\t\t}\n\t\t}\n\n\t\treturn fileEncoding;\n\t}\n\n\tprivate getEncodingOverride(resource: URI): string | undefined {\n\t\tif (this.encodingOverrides?.length) {\n\t\t\tfor (const override of this.encodingOverrides) {\n\t\t\t\t// check if the resource is child of encoding override path\n\t\t\t\tif (\n\t\t\t\t\toverride.parent &&\n\t\t\t\t\tthis.uriIdentityService.extUri.isEqualOrParent(\n\t\t\t\t\t\tresource,\n\t\t\t\t\t\toverride.parent,\n\t\t\t\t\t)\n\t\t\t\t) {\n\t\t\t\t\treturn override.encoding;\n\t\t\t\t}\n\n\t\t\t\t// check if the resource extension is equal to encoding override\n\t\t\t\tif (\n\t\t\t\t\toverride.extension &&\n\t\t\t\t\textname(resource) === `.${override.extension}`\n\t\t\t\t) {\n\t\t\t\t\treturn override.encoding;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn undefined;\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
