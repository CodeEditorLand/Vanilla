{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/textfile/browser/textFileService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { localize } from '../../../../nls.js';\nimport { URI } from '../../../../base/common/uri.js';\nimport { IEncodingSupport, ITextFileService, ITextFileStreamContent, ITextFileContent, IResourceEncodings, IReadTextFileOptions, IWriteTextFileOptions, toBufferOrReadable, TextFileOperationError, TextFileOperationResult, ITextFileSaveOptions, ITextFileEditorModelManager, IResourceEncoding, stringToSnapshot, ITextFileSaveAsOptions, IReadTextFileEncodingOptions, TextFileEditorModelState } from '../common/textfiles.js';\nimport { IRevertOptions, SaveSourceRegistry } from '../../../common/editor.js';\nimport { ILifecycleService } from '../../lifecycle/common/lifecycle.js';\nimport { IFileService, FileOperationError, FileOperationResult, IFileStatWithMetadata, ICreateFileOptions, IFileStreamContent } from '../../../../platform/files/common/files.js';\nimport { Disposable } from '../../../../base/common/lifecycle.js';\nimport { extname as pathExtname } from '../../../../base/common/path.js';\nimport { IWorkbenchEnvironmentService } from '../../environment/common/environmentService.js';\nimport { IUntitledTextEditorService, IUntitledTextEditorModelManager } from '../../untitled/common/untitledTextEditorService.js';\nimport { UntitledTextEditorModel } from '../../untitled/common/untitledTextEditorModel.js';\nimport { TextFileEditorModelManager } from '../common/textFileEditorModelManager.js';\nimport { IInstantiationService } from '../../../../platform/instantiation/common/instantiation.js';\nimport { Schemas } from '../../../../base/common/network.js';\nimport { createTextBufferFactoryFromSnapshot, createTextBufferFactoryFromStream } from '../../../../editor/common/model/textModel.js';\nimport { IModelService } from '../../../../editor/common/services/model.js';\nimport { joinPath, dirname, basename, toLocalResource, extname, isEqual } from '../../../../base/common/resources.js';\nimport { IDialogService, IFileDialogService } from '../../../../platform/dialogs/common/dialogs.js';\nimport { VSBuffer, VSBufferReadable, bufferToStream, VSBufferReadableStream } from '../../../../base/common/buffer.js';\nimport { ITextSnapshot, ITextModel } from '../../../../editor/common/model.js';\nimport { ITextResourceConfigurationService } from '../../../../editor/common/services/textResourceConfiguration.js';\nimport { PLAINTEXT_LANGUAGE_ID } from '../../../../editor/common/languages/modesRegistry.js';\nimport { IFilesConfigurationService } from '../../filesConfiguration/common/filesConfigurationService.js';\nimport { IResolvedTextEditorModel } from '../../../../editor/common/services/resolverService.js';\nimport { BaseTextEditorModel } from '../../../common/editor/textEditorModel.js';\nimport { ICodeEditorService } from '../../../../editor/browser/services/codeEditorService.js';\nimport { IPathService } from '../../path/common/pathService.js';\nimport { IWorkingCopyFileService, IFileOperationUndoRedoInfo, ICreateFileOperation } from '../../workingCopy/common/workingCopyFileService.js';\nimport { IUriIdentityService } from '../../../../platform/uriIdentity/common/uriIdentity.js';\nimport { IWorkspaceContextService, WORKSPACE_EXTENSION } from '../../../../platform/workspace/common/workspace.js';\nimport { UTF8, UTF8_with_bom, UTF16be, UTF16le, encodingExists, toEncodeReadable, toDecodeStream, IDecodeStreamResult, DecodeStreamError, DecodeStreamErrorKind } from '../common/encoding.js';\nimport { consumeStream, ReadableStream } from '../../../../base/common/stream.js';\nimport { ILanguageService } from '../../../../editor/common/languages/language.js';\nimport { ILogService } from '../../../../platform/log/common/log.js';\nimport { CancellationToken, CancellationTokenSource } from '../../../../base/common/cancellation.js';\nimport { IElevatedFileService } from '../../files/common/elevatedFileService.js';\nimport { IDecorationData, IDecorationsProvider, IDecorationsService } from '../../decorations/common/decorations.js';\nimport { Emitter } from '../../../../base/common/event.js';\nimport { Codicon } from '../../../../base/common/codicons.js';\nimport { listErrorForeground } from '../../../../platform/theme/common/colorRegistry.js';\n\nexport abstract class AbstractTextFileService extends Disposable implements ITextFileService {\n\n\tdeclare readonly _serviceBrand: undefined;\n\n\tprivate static readonly TEXTFILE_SAVE_CREATE_SOURCE = SaveSourceRegistry.registerSource('textFileCreate.source', localize('textFileCreate.source', \"File Created\"));\n\tprivate static readonly TEXTFILE_SAVE_REPLACE_SOURCE = SaveSourceRegistry.registerSource('textFileOverwrite.source', localize('textFileOverwrite.source', \"File Replaced\"));\n\n\treadonly files: ITextFileEditorModelManager = this._register(this.instantiationService.createInstance(TextFileEditorModelManager));\n\n\treadonly untitled: IUntitledTextEditorModelManager = this.untitledTextEditorService;\n\n\tconstructor(\n\t\t@IFileService protected readonly fileService: IFileService,\n\t\t@IUntitledTextEditorService private untitledTextEditorService: IUntitledTextEditorService,\n\t\t@ILifecycleService protected readonly lifecycleService: ILifecycleService,\n\t\t@IInstantiationService protected readonly instantiationService: IInstantiationService,\n\t\t@IModelService private readonly modelService: IModelService,\n\t\t@IWorkbenchEnvironmentService protected readonly environmentService: IWorkbenchEnvironmentService,\n\t\t@IDialogService private readonly dialogService: IDialogService,\n\t\t@IFileDialogService private readonly fileDialogService: IFileDialogService,\n\t\t@ITextResourceConfigurationService protected readonly textResourceConfigurationService: ITextResourceConfigurationService,\n\t\t@IFilesConfigurationService protected readonly filesConfigurationService: IFilesConfigurationService,\n\t\t@ICodeEditorService private readonly codeEditorService: ICodeEditorService,\n\t\t@IPathService private readonly pathService: IPathService,\n\t\t@IWorkingCopyFileService private readonly workingCopyFileService: IWorkingCopyFileService,\n\t\t@IUriIdentityService private readonly uriIdentityService: IUriIdentityService,\n\t\t@ILanguageService private readonly languageService: ILanguageService,\n\t\t@ILogService protected readonly logService: ILogService,\n\t\t@IElevatedFileService private readonly elevatedFileService: IElevatedFileService,\n\t\t@IDecorationsService private readonly decorationsService: IDecorationsService\n\t) {\n\t\tsuper();\n\n\t\tthis.provideDecorations();\n\t}\n\n\t//#region decorations\n\n\tprivate provideDecorations(): void {\n\n\t\t// Text file model decorations\n\t\tconst provider = this._register(new class extends Disposable implements IDecorationsProvider {\n\n\t\t\treadonly label = localize('textFileModelDecorations', \"Text File Model Decorations\");\n\n\t\t\tprivate readonly _onDidChange = this._register(new Emitter<URI[]>());\n\t\t\treadonly onDidChange = this._onDidChange.event;\n\n\t\t\tconstructor(private readonly files: ITextFileEditorModelManager) {\n\t\t\t\tsuper();\n\n\t\t\t\tthis.registerListeners();\n\t\t\t}\n\n\t\t\tprivate registerListeners(): void {\n\n\t\t\t\t// Creates\n\t\t\t\tthis._register(this.files.onDidResolve(({ model }) => {\n\t\t\t\t\tif (model.isReadonly() || model.hasState(TextFileEditorModelState.ORPHAN)) {\n\t\t\t\t\t\tthis._onDidChange.fire([model.resource]);\n\t\t\t\t\t}\n\t\t\t\t}));\n\n\t\t\t\t// Removals: once a text file model is no longer\n\t\t\t\t// under our control, make sure to signal this as\n\t\t\t\t// decoration change because from this point on we\n\t\t\t\t// have no way of updating the decoration anymore.\n\t\t\t\tthis._register(this.files.onDidRemove(modelUri => this._onDidChange.fire([modelUri])));\n\n\t\t\t\t// Changes\n\t\t\t\tthis._register(this.files.onDidChangeReadonly(model => this._onDidChange.fire([model.resource])));\n\t\t\t\tthis._register(this.files.onDidChangeOrphaned(model => this._onDidChange.fire([model.resource])));\n\t\t\t}\n\n\t\t\tprovideDecorations(uri: URI): IDecorationData | undefined {\n\t\t\t\tconst model = this.files.get(uri);\n\t\t\t\tif (!model || model.isDisposed()) {\n\t\t\t\t\treturn undefined;\n\t\t\t\t}\n\n\t\t\t\tconst isReadonly = model.isReadonly();\n\t\t\t\tconst isOrphaned = model.hasState(TextFileEditorModelState.ORPHAN);\n\n\t\t\t\t// Readonly + Orphaned\n\t\t\t\tif (isReadonly && isOrphaned) {\n\t\t\t\t\treturn {\n\t\t\t\t\t\tcolor: listErrorForeground,\n\t\t\t\t\t\tletter: Codicon.lockSmall,\n\t\t\t\t\t\tstrikethrough: true,\n\t\t\t\t\t\ttooltip: localize('readonlyAndDeleted', \"Deleted, Read-only\"),\n\t\t\t\t\t};\n\t\t\t\t}\n\n\t\t\t\t// Readonly\n\t\t\t\telse if (isReadonly) {\n\t\t\t\t\treturn {\n\t\t\t\t\t\tletter: Codicon.lockSmall,\n\t\t\t\t\t\ttooltip: localize('readonly', \"Read-only\"),\n\t\t\t\t\t};\n\t\t\t\t}\n\n\t\t\t\t// Orphaned\n\t\t\t\telse if (isOrphaned) {\n\t\t\t\t\treturn {\n\t\t\t\t\t\tcolor: listErrorForeground,\n\t\t\t\t\t\tstrikethrough: true,\n\t\t\t\t\t\ttooltip: localize('deleted', \"Deleted\"),\n\t\t\t\t\t};\n\t\t\t\t}\n\n\t\t\t\treturn undefined;\n\t\t\t}\n\t\t}(this.files));\n\n\t\tthis._register(this.decorationsService.registerDecorationsProvider(provider));\n\t}\n\n\t//#endregin\n\n\t//#region text file read / write / create\n\n\tprivate _encoding: EncodingOracle | undefined;\n\n\tget encoding(): EncodingOracle {\n\t\tif (!this._encoding) {\n\t\t\tthis._encoding = this._register(this.instantiationService.createInstance(EncodingOracle));\n\t\t}\n\n\t\treturn this._encoding;\n\t}\n\n\tasync read(resource: URI, options?: IReadTextFileOptions): Promise<ITextFileContent> {\n\t\tconst [bufferStream, decoder] = await this.doRead(resource, {\n\t\t\t...options,\n\t\t\t// optimization: since we know that the caller does not\n\t\t\t// care about buffering, we indicate this to the reader.\n\t\t\t// this reduces all the overhead the buffered reading\n\t\t\t// has (open, read, close) if the provider supports\n\t\t\t// unbuffered reading.\n\t\t\tpreferUnbuffered: true\n\t\t});\n\n\t\treturn {\n\t\t\t...bufferStream,\n\t\t\tencoding: decoder.detected.encoding || UTF8,\n\t\t\tvalue: await consumeStream(decoder.stream, strings => strings.join(''))\n\t\t};\n\t}\n\n\tasync readStream(resource: URI, options?: IReadTextFileOptions): Promise<ITextFileStreamContent> {\n\t\tconst [bufferStream, decoder] = await this.doRead(resource, options);\n\n\t\treturn {\n\t\t\t...bufferStream,\n\t\t\tencoding: decoder.detected.encoding || UTF8,\n\t\t\tvalue: await createTextBufferFactoryFromStream(decoder.stream)\n\t\t};\n\t}\n\n\tprivate async doRead(resource: URI, options?: IReadTextFileOptions & { preferUnbuffered?: boolean }): Promise<[IFileStreamContent, IDecodeStreamResult]> {\n\t\tconst cts = new CancellationTokenSource();\n\n\t\t// read stream raw (either buffered or unbuffered)\n\t\tlet bufferStream: IFileStreamContent;\n\t\tif (options?.preferUnbuffered) {\n\t\t\tconst content = await this.fileService.readFile(resource, options, cts.token);\n\t\t\tbufferStream = {\n\t\t\t\t...content,\n\t\t\t\tvalue: bufferToStream(content.value)\n\t\t\t};\n\t\t} else {\n\t\t\tbufferStream = await this.fileService.readFileStream(resource, options, cts.token);\n\t\t}\n\n\t\t// read through encoding library\n\t\ttry {\n\t\t\tconst decoder = await this.doGetDecodedStream(resource, bufferStream.value, options);\n\n\t\t\treturn [bufferStream, decoder];\n\t\t} catch (error) {\n\n\t\t\t// Make sure to cancel reading on error to\n\t\t\t// stop file service activity as soon as\n\t\t\t// possible. When for example a large binary\n\t\t\t// file is read we want to cancel the read\n\t\t\t// instantly.\n\t\t\t// Refs:\n\t\t\t// - https://github.com/microsoft/vscode/issues/138805\n\t\t\t// - https://github.com/microsoft/vscode/issues/132771\n\t\t\tcts.dispose(true);\n\n\t\t\t// special treatment for streams that are binary\n\t\t\tif ((<DecodeStreamError>error).decodeStreamErrorKind === DecodeStreamErrorKind.STREAM_IS_BINARY) {\n\t\t\t\tthrow new TextFileOperationError(localize('fileBinaryError', \"File seems to be binary and cannot be opened as text\"), TextFileOperationResult.FILE_IS_BINARY, options);\n\t\t\t}\n\n\t\t\t// re-throw any other error as it is\n\t\t\telse {\n\t\t\t\tthrow error;\n\t\t\t}\n\t\t}\n\t}\n\n\tasync create(operations: { resource: URI; value?: string | ITextSnapshot; options?: ICreateFileOptions }[], undoInfo?: IFileOperationUndoRedoInfo): Promise<readonly IFileStatWithMetadata[]> {\n\t\tconst operationsWithContents: ICreateFileOperation[] = await Promise.all(operations.map(async operation => {\n\t\t\tconst contents = await this.getEncodedReadable(operation.resource, operation.value);\n\t\t\treturn {\n\t\t\t\tresource: operation.resource,\n\t\t\t\tcontents,\n\t\t\t\toverwrite: operation.options?.overwrite\n\t\t\t};\n\t\t}));\n\n\t\treturn this.workingCopyFileService.create(operationsWithContents, CancellationToken.None, undoInfo);\n\t}\n\n\tasync write(resource: URI, value: string | ITextSnapshot, options?: IWriteTextFileOptions): Promise<IFileStatWithMetadata> {\n\t\tconst readable = await this.getEncodedReadable(resource, value, options);\n\n\t\tif (options?.writeElevated && this.elevatedFileService.isSupported(resource)) {\n\t\t\treturn this.elevatedFileService.writeFileElevated(resource, readable, options);\n\t\t}\n\n\t\treturn this.fileService.writeFile(resource, readable, options);\n\t}\n\n\tasync getEncodedReadable(resource: URI, value: ITextSnapshot): Promise<VSBufferReadable>;\n\tasync getEncodedReadable(resource: URI, value: string): Promise<VSBuffer>;\n\tasync getEncodedReadable(resource: URI, value?: ITextSnapshot): Promise<VSBufferReadable | undefined>;\n\tasync getEncodedReadable(resource: URI, value?: string): Promise<VSBuffer | undefined>;\n\tasync getEncodedReadable(resource: URI, value?: string | ITextSnapshot): Promise<VSBuffer | VSBufferReadable | undefined>;\n\tasync getEncodedReadable(resource: URI, value: string | ITextSnapshot, options?: IWriteTextFileOptions): Promise<VSBuffer | VSBufferReadable>;\n\tasync getEncodedReadable(resource: URI, value?: string | ITextSnapshot, options?: IWriteTextFileOptions): Promise<VSBuffer | VSBufferReadable | undefined> {\n\n\t\t// check for encoding\n\t\tconst { encoding, addBOM } = await this.encoding.getWriteEncoding(resource, options);\n\n\t\t// when encoding is standard skip encoding step\n\t\tif (encoding === UTF8 && !addBOM) {\n\t\t\treturn typeof value === 'undefined'\n\t\t\t\t? undefined\n\t\t\t\t: toBufferOrReadable(value);\n\t\t}\n\n\t\t// otherwise create encoded readable\n\t\tvalue = value || '';\n\t\tconst snapshot = typeof value === 'string' ? stringToSnapshot(value) : value;\n\t\treturn toEncodeReadable(snapshot, encoding, { addBOM });\n\t}\n\n\tasync getDecodedStream(resource: URI, value: VSBufferReadableStream, options?: IReadTextFileEncodingOptions): Promise<ReadableStream<string>> {\n\t\treturn (await this.doGetDecodedStream(resource, value, options)).stream;\n\t}\n\n\tprivate doGetDecodedStream(resource: URI, stream: VSBufferReadableStream, options?: IReadTextFileEncodingOptions): Promise<IDecodeStreamResult> {\n\n\t\t// read through encoding library\n\t\treturn toDecodeStream(stream, {\n\t\t\tacceptTextOnly: options?.acceptTextOnly ?? false,\n\t\t\tguessEncoding:\n\t\t\t\toptions?.autoGuessEncoding ||\n\t\t\t\tthis.textResourceConfigurationService.getValue(resource, 'files.autoGuessEncoding'),\n\t\t\tcandidateGuessEncodings:\n\t\t\t\toptions?.candidateGuessEncodings ||\n\t\t\t\tthis.textResourceConfigurationService.getValue(resource, 'files.candidateGuessEncodings'),\n\t\t\toverwriteEncoding: async detectedEncoding => {\n\t\t\t\tconst { encoding } = await this.encoding.getPreferredReadEncoding(resource, options, detectedEncoding ?? undefined);\n\n\t\t\t\treturn encoding;\n\t\t\t}\n\t\t});\n\t}\n\n\t//#endregion\n\n\n\t//#region save\n\n\tasync save(resource: URI, options?: ITextFileSaveOptions): Promise<URI | undefined> {\n\n\t\t// Untitled\n\t\tif (resource.scheme === Schemas.untitled) {\n\t\t\tconst model = this.untitled.get(resource);\n\t\t\tif (model) {\n\t\t\t\tlet targetUri: URI | undefined;\n\n\t\t\t\t// Untitled with associated file path don't need to prompt\n\t\t\t\tif (model.hasAssociatedFilePath) {\n\t\t\t\t\ttargetUri = await this.suggestSavePath(resource);\n\t\t\t\t}\n\n\t\t\t\t// Otherwise ask user\n\t\t\t\telse {\n\t\t\t\t\ttargetUri = await this.fileDialogService.pickFileToSave(await this.suggestSavePath(resource), options?.availableFileSystems);\n\t\t\t\t}\n\n\t\t\t\t// Save as if target provided\n\t\t\t\tif (targetUri) {\n\t\t\t\t\treturn this.saveAs(resource, targetUri, options);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// File\n\t\telse {\n\t\t\tconst model = this.files.get(resource);\n\t\t\tif (model) {\n\t\t\t\treturn await model.save(options) ? resource : undefined;\n\t\t\t}\n\t\t}\n\n\t\treturn undefined;\n\t}\n\n\tasync saveAs(source: URI, target?: URI, options?: ITextFileSaveAsOptions): Promise<URI | undefined> {\n\n\t\t// Get to target resource\n\t\tif (!target) {\n\t\t\ttarget = await this.fileDialogService.pickFileToSave(await this.suggestSavePath(options?.suggestedTarget ?? source), options?.availableFileSystems);\n\t\t}\n\n\t\tif (!target) {\n\t\t\treturn; // user canceled\n\t\t}\n\n\t\t// Ensure target is not marked as readonly and prompt otherwise\n\t\tif (this.filesConfigurationService.isReadonly(target)) {\n\t\t\tconst confirmed = await this.confirmMakeWriteable(target);\n\t\t\tif (!confirmed) {\n\t\t\t\treturn;\n\t\t\t} else {\n\t\t\t\tthis.filesConfigurationService.updateReadonly(target, false);\n\t\t\t}\n\t\t}\n\n\t\t// Just save if target is same as models own resource\n\t\tif (isEqual(source, target)) {\n\t\t\treturn this.save(source, { ...options, force: true  /* force to save, even if not dirty (https://github.com/microsoft/vscode/issues/99619) */ });\n\t\t}\n\n\t\t// If the target is different but of same identity, we\n\t\t// move the source to the target, knowing that the\n\t\t// underlying file system cannot have both and then save.\n\t\t// However, this will only work if the source exists\n\t\t// and is not orphaned, so we need to check that too.\n\t\tif (this.fileService.hasProvider(source) && this.uriIdentityService.extUri.isEqual(source, target) && (await this.fileService.exists(source))) {\n\t\t\tawait this.workingCopyFileService.move([{ file: { source, target } }], CancellationToken.None);\n\n\t\t\t// At this point we don't know whether we have a\n\t\t\t// model for the source or the target URI so we\n\t\t\t// simply try to save with both resources.\n\t\t\tconst success = await this.save(source, options);\n\t\t\tif (!success) {\n\t\t\t\tawait this.save(target, options);\n\t\t\t}\n\n\t\t\treturn target;\n\t\t}\n\n\t\t// Do it\n\t\treturn this.doSaveAs(source, target, options);\n\t}\n\n\tprivate async doSaveAs(source: URI, target: URI, options?: ITextFileSaveOptions): Promise<URI | undefined> {\n\t\tlet success = false;\n\n\t\t// If the source is an existing text file model, we can directly\n\t\t// use that model to copy the contents to the target destination\n\t\tconst textFileModel = this.files.get(source);\n\t\tif (textFileModel?.isResolved()) {\n\t\t\tsuccess = await this.doSaveAsTextFile(textFileModel, source, target, options);\n\t\t}\n\n\t\t// Otherwise if the source can be handled by the file service\n\t\t// we can simply invoke the copy() function to save as\n\t\telse if (this.fileService.hasProvider(source)) {\n\t\t\tawait this.fileService.copy(source, target, true);\n\n\t\t\tsuccess = true;\n\t\t}\n\n\t\t// Finally we simply check if we can find a editor model that\n\t\t// would give us access to the contents.\n\t\telse {\n\t\t\tconst textModel = this.modelService.getModel(source);\n\t\t\tif (textModel) {\n\t\t\t\tsuccess = await this.doSaveAsTextFile(textModel, source, target, options);\n\t\t\t}\n\t\t}\n\n\t\tif (!success) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\t// Revert the source\n\t\ttry {\n\t\t\tawait this.revert(source);\n\t\t} catch (error) {\n\n\t\t\t// It is possible that reverting the source fails, for example\n\t\t\t// when a remote is disconnected and we cannot read it anymore.\n\t\t\t// However, this should not interrupt the \"Save As\" flow, so\n\t\t\t// we gracefully catch the error and just log it.\n\n\t\t\tthis.logService.error(error);\n\t\t}\n\n\t\treturn target;\n\t}\n\n\tprivate async doSaveAsTextFile(sourceModel: IResolvedTextEditorModel | ITextModel, source: URI, target: URI, options?: ITextFileSaveOptions): Promise<boolean> {\n\n\t\t// Find source encoding if any\n\t\tlet sourceModelEncoding: string | undefined = undefined;\n\t\tconst sourceModelWithEncodingSupport = (sourceModel as unknown as IEncodingSupport);\n\t\tif (typeof sourceModelWithEncodingSupport.getEncoding === 'function') {\n\t\t\tsourceModelEncoding = sourceModelWithEncodingSupport.getEncoding();\n\t\t}\n\n\t\t// Prefer an existing model if it is already resolved for the given target resource\n\t\tlet targetExists: boolean = false;\n\t\tlet targetModel = this.files.get(target);\n\t\tif (targetModel?.isResolved()) {\n\t\t\ttargetExists = true;\n\t\t}\n\n\t\t// Otherwise create the target file empty if it does not exist already and resolve it from there\n\t\telse {\n\t\t\ttargetExists = await this.fileService.exists(target);\n\n\t\t\t// create target file adhoc if it does not exist yet\n\t\t\tif (!targetExists) {\n\t\t\t\tawait this.create([{ resource: target, value: '' }]);\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\ttargetModel = await this.files.resolve(target, { encoding: sourceModelEncoding });\n\t\t\t} catch (error) {\n\t\t\t\t// if the target already exists and was not created by us, it is possible\n\t\t\t\t// that we cannot resolve the target as text model if it is binary or too\n\t\t\t\t// large. in that case we have to delete the target file first and then\n\t\t\t\t// re-run the operation.\n\t\t\t\tif (targetExists) {\n\t\t\t\t\tif (\n\t\t\t\t\t\t(<TextFileOperationError>error).textFileOperationResult === TextFileOperationResult.FILE_IS_BINARY ||\n\t\t\t\t\t\t(<FileOperationError>error).fileOperationResult === FileOperationResult.FILE_TOO_LARGE\n\t\t\t\t\t) {\n\t\t\t\t\t\tawait this.fileService.del(target);\n\n\t\t\t\t\t\treturn this.doSaveAsTextFile(sourceModel, source, target, options);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tthrow error;\n\t\t\t}\n\t\t}\n\n\t\t// Confirm to overwrite if we have an untitled file with associated file where\n\t\t// the file actually exists on disk and we are instructed to save to that file\n\t\t// path. This can happen if the file was created after the untitled file was opened.\n\t\t// See https://github.com/microsoft/vscode/issues/67946\n\t\tlet write: boolean;\n\t\tif (sourceModel instanceof UntitledTextEditorModel && sourceModel.hasAssociatedFilePath && targetExists && this.uriIdentityService.extUri.isEqual(target, toLocalResource(sourceModel.resource, this.environmentService.remoteAuthority, this.pathService.defaultUriScheme))) {\n\t\t\twrite = await this.confirmOverwrite(target);\n\t\t} else {\n\t\t\twrite = true;\n\t\t}\n\n\t\tif (!write) {\n\t\t\treturn false;\n\t\t}\n\n\t\tlet sourceTextModel: ITextModel | undefined = undefined;\n\t\tif (sourceModel instanceof BaseTextEditorModel) {\n\t\t\tif (sourceModel.isResolved()) {\n\t\t\t\tsourceTextModel = sourceModel.textEditorModel ?? undefined;\n\t\t\t}\n\t\t} else {\n\t\t\tsourceTextModel = sourceModel as ITextModel;\n\t\t}\n\n\t\tlet targetTextModel: ITextModel | undefined = undefined;\n\t\tif (targetModel.isResolved()) {\n\t\t\ttargetTextModel = targetModel.textEditorModel;\n\t\t}\n\n\t\t// take over model value, encoding and language (only if more specific) from source model\n\t\tif (sourceTextModel && targetTextModel) {\n\n\t\t\t// encoding\n\t\t\ttargetModel.updatePreferredEncoding(sourceModelEncoding);\n\n\t\t\t// content\n\t\t\tthis.modelService.updateModel(targetTextModel, createTextBufferFactoryFromSnapshot(sourceTextModel.createSnapshot()));\n\n\t\t\t// language\n\t\t\tconst sourceLanguageId = sourceTextModel.getLanguageId();\n\t\t\tconst targetLanguageId = targetTextModel.getLanguageId();\n\t\t\tif (sourceLanguageId !== PLAINTEXT_LANGUAGE_ID && targetLanguageId === PLAINTEXT_LANGUAGE_ID) {\n\t\t\t\ttargetTextModel.setLanguage(sourceLanguageId); // only use if more specific than plain/text\n\t\t\t}\n\n\t\t\t// transient properties\n\t\t\tconst sourceTransientProperties = this.codeEditorService.getTransientModelProperties(sourceTextModel);\n\t\t\tif (sourceTransientProperties) {\n\t\t\t\tfor (const [key, value] of sourceTransientProperties) {\n\t\t\t\t\tthis.codeEditorService.setTransientModelProperty(targetTextModel, key, value);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// set source options depending on target exists or not\n\t\tif (!options?.source) {\n\t\t\toptions = {\n\t\t\t\t...options,\n\t\t\t\tsource: targetExists ? AbstractTextFileService.TEXTFILE_SAVE_REPLACE_SOURCE : AbstractTextFileService.TEXTFILE_SAVE_CREATE_SOURCE\n\t\t\t};\n\t\t}\n\n\t\t// save model\n\t\treturn targetModel.save({\n\t\t\t...options,\n\t\t\tfrom: source\n\t\t});\n\t}\n\n\tprivate async confirmOverwrite(resource: URI): Promise<boolean> {\n\t\tconst { confirmed } = await this.dialogService.confirm({\n\t\t\ttype: 'warning',\n\t\t\tmessage: localize('confirmOverwrite', \"'{0}' already exists. Do you want to replace it?\", basename(resource)),\n\t\t\tdetail: localize('overwriteIrreversible', \"A file or folder with the name '{0}' already exists in the folder '{1}'. Replacing it will overwrite its current contents.\", basename(resource), basename(dirname(resource))),\n\t\t\tprimaryButton: localize({ key: 'replaceButtonLabel', comment: ['&& denotes a mnemonic'] }, \"&&Replace\"),\n\t\t});\n\n\t\treturn confirmed;\n\t}\n\n\tprivate async confirmMakeWriteable(resource: URI): Promise<boolean> {\n\t\tconst { confirmed } = await this.dialogService.confirm({\n\t\t\ttype: 'warning',\n\t\t\tmessage: localize('confirmMakeWriteable', \"'{0}' is marked as read-only. Do you want to save anyway?\", basename(resource)),\n\t\t\tdetail: localize('confirmMakeWriteableDetail', \"Paths can be configured as read-only via settings.\"),\n\t\t\tprimaryButton: localize({ key: 'makeWriteableButtonLabel', comment: ['&& denotes a mnemonic'] }, \"&&Save Anyway\")\n\t\t});\n\n\t\treturn confirmed;\n\t}\n\n\tprivate async suggestSavePath(resource: URI): Promise<URI> {\n\n\t\t// Just take the resource as is if the file service can handle it\n\t\tif (this.fileService.hasProvider(resource)) {\n\t\t\treturn resource;\n\t\t}\n\n\t\tconst remoteAuthority = this.environmentService.remoteAuthority;\n\t\tconst defaultFilePath = await this.fileDialogService.defaultFilePath();\n\n\t\t// Otherwise try to suggest a path that can be saved\n\t\tlet suggestedFilename: string | undefined = undefined;\n\t\tif (resource.scheme === Schemas.untitled) {\n\t\t\tconst model = this.untitled.get(resource);\n\t\t\tif (model) {\n\n\t\t\t\t// Untitled with associated file path\n\t\t\t\tif (model.hasAssociatedFilePath) {\n\t\t\t\t\treturn toLocalResource(resource, remoteAuthority, this.pathService.defaultUriScheme);\n\t\t\t\t}\n\n\t\t\t\t// Untitled without associated file path: use name\n\t\t\t\t// of untitled model if it is a valid path name and\n\t\t\t\t// figure out the file extension from the mode if any.\n\n\t\t\t\tlet nameCandidate: string;\n\t\t\t\tif (await this.pathService.hasValidBasename(joinPath(defaultFilePath, model.name), model.name)) {\n\t\t\t\t\tnameCandidate = model.name;\n\t\t\t\t} else {\n\t\t\t\t\tnameCandidate = basename(resource);\n\t\t\t\t}\n\n\t\t\t\tconst languageId = model.getLanguageId();\n\t\t\t\tif (languageId && languageId !== PLAINTEXT_LANGUAGE_ID) {\n\t\t\t\t\tsuggestedFilename = this.suggestFilename(languageId, nameCandidate);\n\t\t\t\t} else {\n\t\t\t\t\tsuggestedFilename = nameCandidate;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Fallback to basename of resource\n\t\tif (!suggestedFilename) {\n\t\t\tsuggestedFilename = basename(resource);\n\t\t}\n\n\t\t// Try to place where last active file was if any\n\t\t// Otherwise fallback to user home\n\t\treturn joinPath(defaultFilePath, suggestedFilename);\n\t}\n\n\tsuggestFilename(languageId: string, untitledName: string) {\n\t\tconst languageName = this.languageService.getLanguageName(languageId);\n\t\tif (!languageName) {\n\t\t\treturn untitledName; // unknown language, so we cannot suggest a better name\n\t\t}\n\n\t\tconst untitledExtension = pathExtname(untitledName);\n\n\t\tconst extensions = this.languageService.getExtensions(languageId);\n\t\tif (extensions.includes(untitledExtension)) {\n\t\t\treturn untitledName; // preserve extension if it is compatible with the mode\n\t\t}\n\n\t\tconst primaryExtension = extensions.at(0);\n\t\tif (primaryExtension) {\n\t\t\tif (untitledExtension) {\n\t\t\t\treturn `${untitledName.substring(0, untitledName.indexOf(untitledExtension))}${primaryExtension}`;\n\t\t\t}\n\n\t\t\treturn `${untitledName}${primaryExtension}`;\n\t\t}\n\n\t\tconst filenames = this.languageService.getFilenames(languageId);\n\t\tif (filenames.includes(untitledName)) {\n\t\t\treturn untitledName; // preserve name if it is compatible with the mode\n\t\t}\n\n\t\treturn filenames.at(0) ?? untitledName;\n\t}\n\n\t//#endregion\n\n\t//#region revert\n\n\tasync revert(resource: URI, options?: IRevertOptions): Promise<void> {\n\n\t\t// Untitled\n\t\tif (resource.scheme === Schemas.untitled) {\n\t\t\tconst model = this.untitled.get(resource);\n\t\t\tif (model) {\n\t\t\t\treturn model.revert(options);\n\t\t\t}\n\t\t}\n\n\t\t// File\n\t\telse {\n\t\t\tconst model = this.files.get(resource);\n\t\t\tif (model && (model.isDirty() || options?.force)) {\n\t\t\t\treturn model.revert(options);\n\t\t\t}\n\t\t}\n\t}\n\n\t//#endregion\n\n\t//#region dirty\n\n\tisDirty(resource: URI): boolean {\n\t\tconst model = resource.scheme === Schemas.untitled ? this.untitled.get(resource) : this.files.get(resource);\n\t\tif (model) {\n\t\t\treturn model.isDirty();\n\t\t}\n\n\t\treturn false;\n\t}\n\n\t//#endregion\n}\n\nexport interface IEncodingOverride {\n\tparent?: URI;\n\textension?: string;\n\tencoding: string;\n}\n\nexport class EncodingOracle extends Disposable implements IResourceEncodings {\n\n\tprivate _encodingOverrides: IEncodingOverride[];\n\tprotected get encodingOverrides(): IEncodingOverride[] { return this._encodingOverrides; }\n\tprotected set encodingOverrides(value: IEncodingOverride[]) { this._encodingOverrides = value; }\n\n\tconstructor(\n\t\t@ITextResourceConfigurationService private textResourceConfigurationService: ITextResourceConfigurationService,\n\t\t@IWorkbenchEnvironmentService private environmentService: IWorkbenchEnvironmentService,\n\t\t@IWorkspaceContextService private contextService: IWorkspaceContextService,\n\t\t@IUriIdentityService private readonly uriIdentityService: IUriIdentityService\n\t) {\n\t\tsuper();\n\n\t\tthis._encodingOverrides = this.getDefaultEncodingOverrides();\n\n\t\tthis.registerListeners();\n\t}\n\n\tprivate registerListeners(): void {\n\n\t\t// Workspace Folder Change\n\t\tthis._register(this.contextService.onDidChangeWorkspaceFolders(() => this.encodingOverrides = this.getDefaultEncodingOverrides()));\n\t}\n\n\tprivate getDefaultEncodingOverrides(): IEncodingOverride[] {\n\t\tconst defaultEncodingOverrides: IEncodingOverride[] = [];\n\n\t\t// Global settings\n\t\tdefaultEncodingOverrides.push({ parent: this.environmentService.userRoamingDataHome, encoding: UTF8 });\n\n\t\t// Workspace files (via extension and via untitled workspaces location)\n\t\tdefaultEncodingOverrides.push({ extension: WORKSPACE_EXTENSION, encoding: UTF8 });\n\t\tdefaultEncodingOverrides.push({ parent: this.environmentService.untitledWorkspacesHome, encoding: UTF8 });\n\n\t\t// Folder Settings\n\t\tthis.contextService.getWorkspace().folders.forEach(folder => {\n\t\t\tdefaultEncodingOverrides.push({ parent: joinPath(folder.uri, '.vscode'), encoding: UTF8 });\n\t\t});\n\n\t\treturn defaultEncodingOverrides;\n\t}\n\n\tasync getWriteEncoding(resource: URI, options?: IWriteTextFileOptions): Promise<{ encoding: string; addBOM: boolean }> {\n\t\tconst { encoding, hasBOM } = await this.getPreferredWriteEncoding(resource, options ? options.encoding : undefined);\n\n\t\treturn { encoding, addBOM: hasBOM };\n\t}\n\n\tasync getPreferredWriteEncoding(resource: URI, preferredEncoding?: string): Promise<IResourceEncoding> {\n\t\tconst resourceEncoding = await this.getEncodingForResource(resource, preferredEncoding);\n\n\t\treturn {\n\t\t\tencoding: resourceEncoding,\n\t\t\thasBOM: resourceEncoding === UTF16be || resourceEncoding === UTF16le || resourceEncoding === UTF8_with_bom // enforce BOM for certain encodings\n\t\t};\n\t}\n\n\tasync getPreferredReadEncoding(resource: URI, options?: IReadTextFileEncodingOptions, detectedEncoding?: string): Promise<IResourceEncoding> {\n\t\tlet preferredEncoding: string | undefined;\n\n\t\t// Encoding passed in as option\n\t\tif (options?.encoding) {\n\t\t\tif (detectedEncoding === UTF8_with_bom && options.encoding === UTF8) {\n\t\t\t\tpreferredEncoding = UTF8_with_bom; // indicate the file has BOM if we are to resolve with UTF 8\n\t\t\t} else {\n\t\t\t\tpreferredEncoding = options.encoding; // give passed in encoding highest priority\n\t\t\t}\n\t\t}\n\n\t\t// Encoding detected\n\t\telse if (typeof detectedEncoding === 'string') {\n\t\t\tpreferredEncoding = detectedEncoding;\n\t\t}\n\n\t\t// Encoding configured\n\t\telse if (this.textResourceConfigurationService.getValue(resource, 'files.encoding') === UTF8_with_bom) {\n\t\t\tpreferredEncoding = UTF8; // if we did not detect UTF 8 BOM before, this can only be UTF 8 then\n\t\t}\n\n\t\tconst encoding = await this.getEncodingForResource(resource, preferredEncoding);\n\n\t\treturn {\n\t\t\tencoding,\n\t\t\thasBOM: encoding === UTF16be || encoding === UTF16le || encoding === UTF8_with_bom // enforce BOM for certain encodings\n\t\t};\n\t}\n\n\tprivate async getEncodingForResource(resource: URI, preferredEncoding?: string): Promise<string> {\n\t\tlet fileEncoding: string;\n\n\t\tconst override = this.getEncodingOverride(resource);\n\t\tif (override) {\n\t\t\tfileEncoding = override; // encoding override always wins\n\t\t} else if (preferredEncoding) {\n\t\t\tfileEncoding = preferredEncoding; // preferred encoding comes second\n\t\t} else {\n\t\t\tfileEncoding = this.textResourceConfigurationService.getValue(resource, 'files.encoding'); // and last we check for settings\n\t\t}\n\n\t\tif (fileEncoding !== UTF8) {\n\t\t\tif (!fileEncoding || !(await encodingExists(fileEncoding))) {\n\t\t\t\tfileEncoding = UTF8; // the default is UTF-8\n\t\t\t}\n\t\t}\n\n\t\treturn fileEncoding;\n\t}\n\n\tprivate getEncodingOverride(resource: URI): string | undefined {\n\t\tif (this.encodingOverrides?.length) {\n\t\t\tfor (const override of this.encodingOverrides) {\n\n\t\t\t\t// check if the resource is child of encoding override path\n\t\t\t\tif (override.parent && this.uriIdentityService.extUri.isEqualOrParent(resource, override.parent)) {\n\t\t\t\t\treturn override.encoding;\n\t\t\t\t}\n\n\t\t\t\t// check if the resource extension is equal to encoding override\n\t\t\t\tif (override.extension && extname(resource) === `.${override.extension}`) {\n\t\t\t\t\treturn override.encoding;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn undefined;\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
