import { CancellationToken } from "vs/base/common/cancellation";
import { Disposable, IDisposable } from "vs/base/common/lifecycle";
import { URI } from "vs/base/common/uri";
import { IFileService } from "vs/platform/files/common/files";
import { IInstantiationService } from "vs/platform/instantiation/common/instantiation";
import { INotificationService } from "vs/platform/notification/common/notification";
import { IProgress, IProgressStep } from "vs/platform/progress/common/progress";
import { IUriIdentityService } from "vs/platform/uriIdentity/common/uriIdentity";
import { TextFileEditorModel } from "vs/workbench/services/textfile/common/textFileEditorModel";
import { ITextFileEditorModel, ITextFileEditorModelManager, ITextFileEditorModelResolveOrCreateOptions, ITextFileSaveParticipant } from "vs/workbench/services/textfile/common/textfiles";
import { IStoredFileWorkingCopySaveParticipantContext, IWorkingCopyFileService } from "vs/workbench/services/workingCopy/common/workingCopyFileService";
export declare class TextFileEditorModelManager extends Disposable implements ITextFileEditorModelManager {
    private readonly instantiationService;
    private readonly fileService;
    private readonly notificationService;
    private readonly workingCopyFileService;
    private readonly uriIdentityService;
    private readonly _onDidCreate;
    readonly onDidCreate: any;
    private readonly _onDidResolve;
    readonly onDidResolve: any;
    private readonly _onDidRemove;
    readonly onDidRemove: any;
    private readonly _onDidChangeDirty;
    readonly onDidChangeDirty: any;
    private readonly _onDidChangeReadonly;
    readonly onDidChangeReadonly: any;
    private readonly _onDidChangeOrphaned;
    readonly onDidChangeOrphaned: any;
    private readonly _onDidSaveError;
    readonly onDidSaveError: any;
    private readonly _onDidSave;
    readonly onDidSave: any;
    private readonly _onDidRevert;
    readonly onDidRevert: any;
    private readonly _onDidChangeEncoding;
    readonly onDidChangeEncoding: any;
    private readonly mapResourceToModel;
    private readonly mapResourceToModelListeners;
    private readonly mapResourceToDisposeListener;
    private readonly mapResourceToPendingModelResolvers;
    private readonly modelResolveQueue;
    saveErrorHandler: {
        onSaveError(error: Error, model: ITextFileEditorModel): void;
    };
    get models(): TextFileEditorModel[];
    constructor(instantiationService: IInstantiationService, fileService: IFileService, notificationService: INotificationService, workingCopyFileService: IWorkingCopyFileService, uriIdentityService: IUriIdentityService);
    private registerListeners;
    private onDidFilesChange;
    private onDidChangeFileSystemProviderCapabilities;
    private onDidChangeFileSystemProviderRegistrations;
    private queueModelReloads;
    private queueModelReload;
    private readonly mapCorrelationIdToModelsToRestore;
    private onWillRunWorkingCopyFileOperation;
    private onDidFailWorkingCopyFileOperation;
    private onDidRunWorkingCopyFileOperation;
    get(resource: URI): TextFileEditorModel | undefined;
    private has;
    private reload;
    resolve(resource: URI, options?: ITextFileEditorModelResolveOrCreateOptions): Promise<TextFileEditorModel>;
    private doResolve;
    private joinPendingResolves;
    private doJoinPendingResolves;
    private registerModel;
    add(resource: URI, model: TextFileEditorModel): void;
    remove(resource: URI): void;
    private readonly saveParticipants;
    addSaveParticipant(participant: ITextFileSaveParticipant): IDisposable;
    runSaveParticipants(model: ITextFileEditorModel, context: IStoredFileWorkingCopySaveParticipantContext, progress: IProgress<IProgressStep>, token: CancellationToken): Promise<void>;
    canDispose(model: TextFileEditorModel): true | Promise<true>;
    private doCanDispose;
    dispose(): void;
}
