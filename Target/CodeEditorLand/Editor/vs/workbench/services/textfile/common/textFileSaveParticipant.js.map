{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/textfile/common/textFileSaveParticipant.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { insert } from \"../../../../base/common/arrays.js\";\nimport { raceCancellation } from \"../../../../base/common/async.js\";\nimport type { CancellationToken } from \"../../../../base/common/cancellation.js\";\nimport {\n\tDisposable,\n\ttype IDisposable,\n\ttoDisposable,\n} from \"../../../../base/common/lifecycle.js\";\nimport { ILogService } from \"../../../../platform/log/common/log.js\";\nimport type {\n\tIProgress,\n\tIProgressStep,\n} from \"../../../../platform/progress/common/progress.js\";\nimport type {\n\tITextFileEditorModel,\n\tITextFileSaveParticipant,\n\tITextFileSaveParticipantContext,\n} from \"./textfiles.js\";\n\nexport class TextFileSaveParticipant extends Disposable {\n\tprivate readonly saveParticipants: ITextFileSaveParticipant[] = [];\n\n\tconstructor(\n\t\t@ILogService private readonly logService: ILogService\n\t) {\n\t\tsuper();\n\t}\n\n\taddSaveParticipant(participant: ITextFileSaveParticipant): IDisposable {\n\t\tconst remove = insert(this.saveParticipants, participant);\n\n\t\treturn toDisposable(() => remove());\n\t}\n\n\tasync participate(\n\t\tmodel: ITextFileEditorModel,\n\t\tcontext: ITextFileSaveParticipantContext,\n\t\tprogress: IProgress<IProgressStep>,\n\t\ttoken: CancellationToken,\n\t): Promise<void> {\n\t\t// undoStop before participation\n\t\tmodel.textEditorModel?.pushStackElement();\n\n\t\tfor (const saveParticipant of this.saveParticipants) {\n\t\t\tif (\n\t\t\t\ttoken.isCancellationRequested ||\n\t\t\t\t!model.textEditorModel /* disposed */\n\t\t\t) {\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tconst promise = saveParticipant.participate(\n\t\t\t\t\tmodel,\n\t\t\t\t\tcontext,\n\t\t\t\t\tprogress,\n\t\t\t\t\ttoken,\n\t\t\t\t);\n\t\t\t\tawait raceCancellation(promise, token);\n\t\t\t} catch (err) {\n\t\t\t\tthis.logService.error(err);\n\t\t\t}\n\t\t}\n\n\t\t// undoStop after participation\n\t\tmodel.textEditorModel?.pushStackElement();\n\t}\n\n\toverride dispose(): void {\n\t\tthis.saveParticipants.splice(0, this.saveParticipants.length);\n\n\t\tsuper.dispose();\n\t}\n}\n"],
  "mappings": ";;;;;;;;;;;;AAKA,SAAS,cAAc;AACvB,SAAS,wBAAwB;AAEjC;AAAA,EACC;AAAA,EAEA;AAAA,OACM;AACP,SAAS,mBAAmB;AAWrB,IAAM,0BAAN,cAAsC,WAAW;AAAA,EAGvD,YAC+B,YAC7B;AACD,UAAM;AAFwB;AAAA,EAG/B;AAAA,EA/BD,OAwBwD;AAAA;AAAA;AAAA,EACtC,mBAA+C,CAAC;AAAA,EAQjE,mBAAmB,aAAoD;AACtE,UAAM,SAAS,OAAO,KAAK,kBAAkB,WAAW;AAExD,WAAO,aAAa,MAAM,OAAO,CAAC;AAAA,EACnC;AAAA,EAEA,MAAM,YACL,OACA,SACA,UACA,OACgB;AAEhB,UAAM,iBAAiB,iBAAiB;AAExC,eAAW,mBAAmB,KAAK,kBAAkB;AACpD,UACC,MAAM,2BACN,CAAC,MAAM,iBACN;AACD;AAAA,MACD;AAEA,UAAI;AACH,cAAM,UAAU,gBAAgB;AAAA,UAC/B;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,QACD;AACA,cAAM,iBAAiB,SAAS,KAAK;AAAA,MACtC,SAAS,KAAK;AACb,aAAK,WAAW,MAAM,GAAG;AAAA,MAC1B;AAAA,IACD;AAGA,UAAM,iBAAiB,iBAAiB;AAAA,EACzC;AAAA,EAES,UAAgB;AACxB,SAAK,iBAAiB,OAAO,GAAG,KAAK,iBAAiB,MAAM;AAE5D,UAAM,QAAQ;AAAA,EACf;AACD;AAtDa,0BAAN;AAAA,EAIJ;AAAA,GAJU;",
  "names": []
}
