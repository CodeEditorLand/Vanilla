{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/textfile/common/textFileEditorModel.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { TaskSequentializer, timeout } from \"../../../../base/common/async.js\";\nimport {\n\tCancellationToken,\n\tCancellationTokenSource,\n} from \"../../../../base/common/cancellation.js\";\nimport { Emitter } from \"../../../../base/common/event.js\";\nimport type { IMarkdownString } from \"../../../../base/common/htmlContent.js\";\nimport { basename } from \"../../../../base/common/path.js\";\nimport { mark } from \"../../../../base/common/performance.js\";\nimport { extUri } from \"../../../../base/common/resources.js\";\nimport { assertIsDefined } from \"../../../../base/common/types.js\";\nimport type { URI } from \"../../../../base/common/uri.js\";\nimport { ILanguageService } from \"../../../../editor/common/languages/language.js\";\nimport { PLAINTEXT_LANGUAGE_ID } from \"../../../../editor/common/languages/modesRegistry.js\";\nimport type {\n\tITextBufferFactory,\n\tITextModel,\n} from \"../../../../editor/common/model.js\";\nimport { createTextBufferFactoryFromStream } from \"../../../../editor/common/model/textModel.js\";\nimport { IModelService } from \"../../../../editor/common/services/model.js\";\nimport { localize } from \"../../../../nls.js\";\nimport { IAccessibilityService } from \"../../../../platform/accessibility/common/accessibility.js\";\nimport {\n\tETAG_DISABLED,\n\tFileChangeType,\n\ttype FileChangesEvent,\n\ttype FileOperationError,\n\tFileOperationResult,\n\tIFileService,\n\ttype IFileStatWithMetadata,\n\tNotModifiedSinceFileOperationError,\n} from \"../../../../platform/files/common/files.js\";\nimport { ILabelService } from \"../../../../platform/label/common/label.js\";\nimport { ILogService } from \"../../../../platform/log/common/log.js\";\nimport {\n\ttype IProgress,\n\tIProgressService,\n\ttype IProgressStep,\n\tProgressLocation,\n} from \"../../../../platform/progress/common/progress.js\";\nimport {\n\ttype IRevertOptions,\n\tSaveReason,\n\tSaveSourceRegistry,\n} from \"../../../common/editor.js\";\nimport { BaseTextEditorModel } from \"../../../common/editor/textEditorModel.js\";\nimport { IExtensionService } from \"../../extensions/common/extensions.js\";\nimport { IFilesConfigurationService } from \"../../filesConfiguration/common/filesConfigurationService.js\";\nimport { ILanguageDetectionService } from \"../../languageDetection/common/languageDetectionWorkerService.js\";\nimport { IPathService } from \"../../path/common/pathService.js\";\nimport {\n\ttype IWorkingCopyBackup,\n\ttype IWorkingCopyBackupMeta,\n\tNO_TYPE_ID,\n\tWorkingCopyCapabilities,\n} from \"../../workingCopy/common/workingCopy.js\";\nimport {\n\ttype IResolvedWorkingCopyBackup,\n\tIWorkingCopyBackupService,\n} from \"../../workingCopy/common/workingCopyBackup.js\";\nimport { IWorkingCopyService } from \"../../workingCopy/common/workingCopyService.js\";\nimport { UTF8, UTF8_with_bom, UTF16be, UTF16le } from \"./encoding.js\";\nimport {\n\tEncodingMode,\n\ttype IResolvedTextFileEditorModel,\n\ttype ITextFileEditorModel,\n\ttype ITextFileEditorModelSaveEvent,\n\ttype ITextFileResolveOptions,\n\ttype ITextFileSaveAsOptions,\n\tITextFileService,\n\ttype ITextFileStreamContent,\n\tTextFileEditorModelState,\n\tTextFileResolveReason,\n} from \"./textfiles.js\";\n\ninterface IBackupMetaData extends IWorkingCopyBackupMeta {\n\tmtime: number;\n\tctime: number;\n\tsize: number;\n\tetag: string;\n\torphaned: boolean;\n}\n\n/**\n * The text file editor model listens to changes to its underlying code editor model and saves these changes through the file service back to the disk.\n */\nexport class TextFileEditorModel\n\textends BaseTextEditorModel\n\timplements ITextFileEditorModel\n{\n\tprivate static readonly TEXTFILE_SAVE_ENCODING_SOURCE =\n\t\tSaveSourceRegistry.registerSource(\n\t\t\t\"textFileEncoding.source\",\n\t\t\tlocalize(\"textFileCreate.source\", \"File Encoding Changed\"),\n\t\t);\n\n\t//#region Events\n\n\tprivate readonly _onDidChangeContent = this._register(new Emitter<void>());\n\treadonly onDidChangeContent = this._onDidChangeContent.event;\n\n\tprivate readonly _onDidResolve = this._register(\n\t\tnew Emitter<TextFileResolveReason>(),\n\t);\n\treadonly onDidResolve = this._onDidResolve.event;\n\n\tprivate readonly _onDidChangeDirty = this._register(new Emitter<void>());\n\treadonly onDidChangeDirty = this._onDidChangeDirty.event;\n\n\tprivate readonly _onDidSaveError = this._register(new Emitter<void>());\n\treadonly onDidSaveError = this._onDidSaveError.event;\n\n\tprivate readonly _onDidSave = this._register(\n\t\tnew Emitter<ITextFileEditorModelSaveEvent>(),\n\t);\n\treadonly onDidSave = this._onDidSave.event;\n\n\tprivate readonly _onDidRevert = this._register(new Emitter<void>());\n\treadonly onDidRevert = this._onDidRevert.event;\n\n\tprivate readonly _onDidChangeEncoding = this._register(new Emitter<void>());\n\treadonly onDidChangeEncoding = this._onDidChangeEncoding.event;\n\n\tprivate readonly _onDidChangeOrphaned = this._register(new Emitter<void>());\n\treadonly onDidChangeOrphaned = this._onDidChangeOrphaned.event;\n\n\tprivate readonly _onDidChangeReadonly = this._register(new Emitter<void>());\n\treadonly onDidChangeReadonly = this._onDidChangeReadonly.event;\n\n\t//#endregion\n\n\treadonly typeId = NO_TYPE_ID; // IMPORTANT: never change this to not break existing assumptions (e.g. backups)\n\n\treadonly capabilities = WorkingCopyCapabilities.None;\n\n\treadonly name = basename(this.labelService.getUriLabel(this.resource));\n\tprivate resourceHasExtension = !!extUri.extname(this.resource);\n\n\tprivate contentEncoding: string | undefined; // encoding as reported from disk\n\n\tprivate versionId = 0;\n\tprivate bufferSavedVersionId: number | undefined;\n\n\tprivate ignoreDirtyOnModelContentChange = false;\n\tprivate ignoreSaveFromSaveParticipants = false;\n\n\tprivate static readonly UNDO_REDO_SAVE_PARTICIPANTS_AUTO_SAVE_THROTTLE_THRESHOLD =\n\t\t500;\n\tprivate lastModelContentChangeFromUndoRedo: number | undefined = undefined;\n\n\tlastResolvedFileStat: IFileStatWithMetadata | undefined; // !!! DO NOT MARK PRIVATE! USED IN TESTS !!!\n\n\tprivate readonly saveSequentializer = new TaskSequentializer();\n\n\tprivate dirty = false;\n\tprivate inConflictMode = false;\n\tprivate inOrphanMode = false;\n\tprivate inErrorMode = false;\n\n\tconstructor(\n\t\treadonly resource: URI,\n\t\tprivate preferredEncoding: string | undefined,\t\t// encoding as chosen by the user\n\t\tprivate preferredLanguageId: string | undefined,\t// language id as chosen by the user\n\t\t@ILanguageService languageService: ILanguageService,\n\t\t@IModelService modelService: IModelService,\n\t\t@IFileService private readonly fileService: IFileService,\n\t\t@ITextFileService private readonly textFileService: ITextFileService,\n\t\t@IWorkingCopyBackupService private readonly workingCopyBackupService: IWorkingCopyBackupService,\n\t\t@ILogService private readonly logService: ILogService,\n\t\t@IWorkingCopyService private readonly workingCopyService: IWorkingCopyService,\n\t\t@IFilesConfigurationService private readonly filesConfigurationService: IFilesConfigurationService,\n\t\t@ILabelService private readonly labelService: ILabelService,\n\t\t@ILanguageDetectionService languageDetectionService: ILanguageDetectionService,\n\t\t@IAccessibilityService accessibilityService: IAccessibilityService,\n\t\t@IPathService private readonly pathService: IPathService,\n\t\t@IExtensionService private readonly extensionService: IExtensionService,\n\t\t@IProgressService private readonly progressService: IProgressService\n\t) {\n\t\tsuper(modelService, languageService, languageDetectionService, accessibilityService);\n\n\t\t// Make known to working copy service\n\t\tthis._register(this.workingCopyService.registerWorkingCopy(this));\n\n\t\tthis.registerListeners();\n\t}\n\n\tprivate registerListeners(): void {\n\t\tthis._register(\n\t\t\tthis.fileService.onDidFilesChange((e) => this.onDidFilesChange(e)),\n\t\t);\n\t\tthis._register(\n\t\t\tthis.filesConfigurationService.onDidChangeFilesAssociation(() =>\n\t\t\t\tthis.onDidChangeFilesAssociation(),\n\t\t\t),\n\t\t);\n\t\tthis._register(\n\t\t\tthis.filesConfigurationService.onDidChangeReadonly(() =>\n\t\t\t\tthis._onDidChangeReadonly.fire(),\n\t\t\t),\n\t\t);\n\t}\n\n\tprivate async onDidFilesChange(e: FileChangesEvent): Promise<void> {\n\t\tlet fileEventImpactsModel = false;\n\t\tlet newInOrphanModeGuess: boolean | undefined;\n\n\t\t// If we are currently orphaned, we check if the model file was added back\n\t\tif (this.inOrphanMode) {\n\t\t\tconst modelFileAdded = e.contains(\n\t\t\t\tthis.resource,\n\t\t\t\tFileChangeType.ADDED,\n\t\t\t);\n\t\t\tif (modelFileAdded) {\n\t\t\t\tnewInOrphanModeGuess = false;\n\t\t\t\tfileEventImpactsModel = true;\n\t\t\t}\n\t\t}\n\n\t\t// Otherwise we check if the model file was deleted\n\t\telse {\n\t\t\tconst modelFileDeleted = e.contains(\n\t\t\t\tthis.resource,\n\t\t\t\tFileChangeType.DELETED,\n\t\t\t);\n\t\t\tif (modelFileDeleted) {\n\t\t\t\tnewInOrphanModeGuess = true;\n\t\t\t\tfileEventImpactsModel = true;\n\t\t\t}\n\t\t}\n\n\t\tif (\n\t\t\tfileEventImpactsModel &&\n\t\t\tthis.inOrphanMode !== newInOrphanModeGuess\n\t\t) {\n\t\t\tlet newInOrphanModeValidated = false;\n\t\t\tif (newInOrphanModeGuess) {\n\t\t\t\t// We have received reports of users seeing delete events even though the file still\n\t\t\t\t// exists (network shares issue: https://github.com/microsoft/vscode/issues/13665).\n\t\t\t\t// Since we do not want to mark the model as orphaned, we have to check if the\n\t\t\t\t// file is really gone and not just a faulty file event.\n\t\t\t\tawait timeout(100, CancellationToken.None);\n\n\t\t\t\tif (this.isDisposed()) {\n\t\t\t\t\tnewInOrphanModeValidated = true;\n\t\t\t\t} else {\n\t\t\t\t\tconst exists = await this.fileService.exists(this.resource);\n\t\t\t\t\tnewInOrphanModeValidated = !exists;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (\n\t\t\t\tthis.inOrphanMode !== newInOrphanModeValidated &&\n\t\t\t\t!this.isDisposed()\n\t\t\t) {\n\t\t\t\tthis.setOrphaned(newInOrphanModeValidated);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate setOrphaned(orphaned: boolean): void {\n\t\tif (this.inOrphanMode !== orphaned) {\n\t\t\tthis.inOrphanMode = orphaned;\n\t\t\tthis._onDidChangeOrphaned.fire();\n\t\t}\n\t}\n\n\tprivate onDidChangeFilesAssociation(): void {\n\t\tif (!this.isResolved()) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst firstLineText = this.getFirstLineText(this.textEditorModel);\n\t\tconst languageSelection = this.getOrCreateLanguage(\n\t\t\tthis.resource,\n\t\t\tthis.languageService,\n\t\t\tthis.preferredLanguageId,\n\t\t\tfirstLineText,\n\t\t);\n\n\t\tthis.textEditorModel.setLanguage(languageSelection);\n\t}\n\n\toverride setLanguageId(languageId: string, source?: string): void {\n\t\tsuper.setLanguageId(languageId, source);\n\n\t\tthis.preferredLanguageId = languageId;\n\t}\n\n\t//#region Backup\n\n\tasync backup(token: CancellationToken): Promise<IWorkingCopyBackup> {\n\t\t// Fill in metadata if we are resolved\n\t\tlet meta: IBackupMetaData | undefined;\n\t\tif (this.lastResolvedFileStat) {\n\t\t\tmeta = {\n\t\t\t\tmtime: this.lastResolvedFileStat.mtime,\n\t\t\t\tctime: this.lastResolvedFileStat.ctime,\n\t\t\t\tsize: this.lastResolvedFileStat.size,\n\t\t\t\tetag: this.lastResolvedFileStat.etag,\n\t\t\t\torphaned: this.inOrphanMode,\n\t\t\t};\n\t\t}\n\n\t\t// Fill in content the same way we would do when\n\t\t// saving the file via the text file service\n\t\t// encoding support (hardcode UTF-8)\n\t\tconst content = await this.textFileService.getEncodedReadable(\n\t\t\tthis.resource,\n\t\t\tthis.createSnapshot() ?? undefined,\n\t\t\t{ encoding: UTF8 },\n\t\t);\n\n\t\treturn { meta, content };\n\t}\n\n\t//#endregion\n\n\t//#region Revert\n\n\tasync revert(options?: IRevertOptions): Promise<void> {\n\t\tif (!this.isResolved()) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Unset flags\n\t\tconst wasDirty = this.dirty;\n\t\tconst undo = this.doSetDirty(false);\n\n\t\t// Force read from disk unless reverting soft\n\t\tconst softUndo = options?.soft;\n\t\tif (!softUndo) {\n\t\t\ttry {\n\t\t\t\tawait this.forceResolveFromFile();\n\t\t\t} catch (error) {\n\t\t\t\t// FileNotFound means the file got deleted meanwhile, so ignore it\n\t\t\t\tif (\n\t\t\t\t\t(<FileOperationError>error).fileOperationResult !==\n\t\t\t\t\tFileOperationResult.FILE_NOT_FOUND\n\t\t\t\t) {\n\t\t\t\t\t// Set flags back to previous values, we are still dirty if revert failed\n\t\t\t\t\tundo();\n\n\t\t\t\t\tthrow error;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Emit file change event\n\t\tthis._onDidRevert.fire();\n\n\t\t// Emit dirty change event\n\t\tif (wasDirty) {\n\t\t\tthis._onDidChangeDirty.fire();\n\t\t}\n\t}\n\n\t//#endregion\n\n\t//#region Resolve\n\n\toverride async resolve(options?: ITextFileResolveOptions): Promise<void> {\n\t\tthis.trace(\"resolve() - enter\");\n\t\tmark(\"code/willResolveTextFileEditorModel\");\n\n\t\t// Return early if we are disposed\n\t\tif (this.isDisposed()) {\n\t\t\tthis.trace(\n\t\t\t\t\"resolve() - exit - without resolving because model is disposed\",\n\t\t\t);\n\n\t\t\treturn;\n\t\t}\n\n\t\t// Unless there are explicit contents provided, it is important that we do not\n\t\t// resolve a model that is dirty or is in the process of saving to prevent data\n\t\t// loss.\n\t\tif (\n\t\t\t!options?.contents &&\n\t\t\t(this.dirty || this.saveSequentializer.isRunning())\n\t\t) {\n\t\t\tthis.trace(\n\t\t\t\t\"resolve() - exit - without resolving because model is dirty or being saved\",\n\t\t\t);\n\n\t\t\treturn;\n\t\t}\n\n\t\t// Resolve either from backup or from file\n\t\tawait this.doResolve(options);\n\n\t\tmark(\"code/didResolveTextFileEditorModel\");\n\t}\n\n\tprivate async doResolve(options?: ITextFileResolveOptions): Promise<void> {\n\t\t// First check if we have contents to use for the model\n\t\tif (options?.contents) {\n\t\t\treturn this.resolveFromBuffer(options.contents, options);\n\t\t}\n\n\t\t// Second, check if we have a backup to resolve from (only for new models)\n\t\tconst isNewModel = !this.isResolved();\n\t\tif (isNewModel) {\n\t\t\tconst resolvedFromBackup = await this.resolveFromBackup(options);\n\t\t\tif (resolvedFromBackup) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\t// Finally, resolve from file resource\n\t\treturn this.resolveFromFile(options);\n\t}\n\n\tprivate async resolveFromBuffer(\n\t\tbuffer: ITextBufferFactory,\n\t\toptions?: ITextFileResolveOptions,\n\t): Promise<void> {\n\t\tthis.trace(\"resolveFromBuffer()\");\n\n\t\t// Try to resolve metdata from disk\n\t\tlet mtime: number;\n\t\tlet ctime: number;\n\t\tlet size: number;\n\t\tlet etag: string;\n\t\ttry {\n\t\t\tconst metadata = await this.fileService.stat(this.resource);\n\t\t\tmtime = metadata.mtime;\n\t\t\tctime = metadata.ctime;\n\t\t\tsize = metadata.size;\n\t\t\tetag = metadata.etag;\n\n\t\t\t// Clear orphaned state when resolving was successful\n\t\t\tthis.setOrphaned(false);\n\t\t} catch (error) {\n\t\t\t// Put some fallback values in error case\n\t\t\tmtime = Date.now();\n\t\t\tctime = Date.now();\n\t\t\tsize = 0;\n\t\t\tetag = ETAG_DISABLED;\n\n\t\t\t// Apply orphaned state based on error code\n\t\t\tthis.setOrphaned(\n\t\t\t\terror.fileOperationResult ===\n\t\t\t\t\tFileOperationResult.FILE_NOT_FOUND,\n\t\t\t);\n\t\t}\n\n\t\tconst preferredEncoding =\n\t\t\tawait this.textFileService.encoding.getPreferredWriteEncoding(\n\t\t\t\tthis.resource,\n\t\t\t\tthis.preferredEncoding,\n\t\t\t);\n\n\t\t// Resolve with buffer\n\t\tthis.resolveFromContent(\n\t\t\t{\n\t\t\t\tresource: this.resource,\n\t\t\t\tname: this.name,\n\t\t\t\tmtime,\n\t\t\t\tctime,\n\t\t\t\tsize,\n\t\t\t\tetag,\n\t\t\t\tvalue: buffer,\n\t\t\t\tencoding: preferredEncoding.encoding,\n\t\t\t\treadonly: false,\n\t\t\t\tlocked: false,\n\t\t\t},\n\t\t\ttrue /* dirty (resolved from buffer) */,\n\t\t\toptions,\n\t\t);\n\t}\n\n\tprivate async resolveFromBackup(\n\t\toptions?: ITextFileResolveOptions,\n\t): Promise<boolean> {\n\t\t// Resolve backup if any\n\t\tconst backup =\n\t\t\tawait this.workingCopyBackupService.resolve<IBackupMetaData>(this);\n\n\t\t// Resolve preferred encoding if we need it\n\t\tlet encoding = UTF8;\n\t\tif (backup) {\n\t\t\tencoding = (\n\t\t\t\tawait this.textFileService.encoding.getPreferredWriteEncoding(\n\t\t\t\t\tthis.resource,\n\t\t\t\t\tthis.preferredEncoding,\n\t\t\t\t)\n\t\t\t).encoding;\n\t\t}\n\n\t\t// Abort if someone else managed to resolve the model by now\n\t\tconst isNewModel = !this.isResolved();\n\t\tif (!isNewModel) {\n\t\t\tthis.trace(\n\t\t\t\t\"resolveFromBackup() - exit - without resolving because previously new model got created meanwhile\",\n\t\t\t);\n\n\t\t\treturn true; // imply that resolving has happened in another operation\n\t\t}\n\n\t\t// Try to resolve from backup if we have any\n\t\tif (backup) {\n\t\t\tawait this.doResolveFromBackup(backup, encoding, options);\n\n\t\t\treturn true;\n\t\t}\n\n\t\t// Otherwise signal back that resolving did not happen\n\t\treturn false;\n\t}\n\n\tprivate async doResolveFromBackup(\n\t\tbackup: IResolvedWorkingCopyBackup<IBackupMetaData>,\n\t\tencoding: string,\n\t\toptions?: ITextFileResolveOptions,\n\t): Promise<void> {\n\t\tthis.trace(\"doResolveFromBackup()\");\n\n\t\t// Resolve with backup\n\t\tthis.resolveFromContent(\n\t\t\t{\n\t\t\t\tresource: this.resource,\n\t\t\t\tname: this.name,\n\t\t\t\tmtime: backup.meta ? backup.meta.mtime : Date.now(),\n\t\t\t\tctime: backup.meta ? backup.meta.ctime : Date.now(),\n\t\t\t\tsize: backup.meta ? backup.meta.size : 0,\n\t\t\t\tetag: backup.meta ? backup.meta.etag : ETAG_DISABLED, // etag disabled if unknown!\n\t\t\t\tvalue: await createTextBufferFactoryFromStream(\n\t\t\t\t\tawait this.textFileService.getDecodedStream(\n\t\t\t\t\t\tthis.resource,\n\t\t\t\t\t\tbackup.value,\n\t\t\t\t\t\t{ encoding: UTF8 },\n\t\t\t\t\t),\n\t\t\t\t),\n\t\t\t\tencoding,\n\t\t\t\treadonly: false,\n\t\t\t\tlocked: false,\n\t\t\t},\n\t\t\ttrue /* dirty (resolved from backup) */,\n\t\t\toptions,\n\t\t);\n\n\t\t// Restore orphaned flag based on state\n\t\tif (backup.meta?.orphaned) {\n\t\t\tthis.setOrphaned(true);\n\t\t}\n\t}\n\n\tprivate async resolveFromFile(\n\t\toptions?: ITextFileResolveOptions,\n\t): Promise<void> {\n\t\tthis.trace(\"resolveFromFile()\");\n\n\t\tconst forceReadFromFile = options?.forceReadFromFile;\n\t\tconst allowBinary =\n\t\t\tthis.isResolved() /* always allow if we resolved previously */ ||\n\t\t\toptions?.allowBinary;\n\n\t\t// Decide on etag\n\t\tlet etag: string | undefined;\n\t\tif (forceReadFromFile) {\n\t\t\tetag = ETAG_DISABLED; // disable ETag if we enforce to read from disk\n\t\t} else if (this.lastResolvedFileStat) {\n\t\t\tetag = this.lastResolvedFileStat.etag; // otherwise respect etag to support caching\n\t\t}\n\n\t\t// Remember current version before doing any long running operation\n\t\t// to ensure we are not changing a model that was changed meanwhile\n\t\tconst currentVersionId = this.versionId;\n\n\t\t// Resolve Content\n\t\ttry {\n\t\t\tconst content = await this.textFileService.readStream(\n\t\t\t\tthis.resource,\n\t\t\t\t{\n\t\t\t\t\tacceptTextOnly: !allowBinary,\n\t\t\t\t\tetag,\n\t\t\t\t\tencoding: this.preferredEncoding,\n\t\t\t\t\tlimits: options?.limits,\n\t\t\t\t},\n\t\t\t);\n\n\t\t\t// Clear orphaned state when resolving was successful\n\t\t\tthis.setOrphaned(false);\n\n\t\t\t// Return early if the model content has changed\n\t\t\t// meanwhile to prevent loosing any changes\n\t\t\tif (currentVersionId !== this.versionId) {\n\t\t\t\tthis.trace(\n\t\t\t\t\t\"resolveFromFile() - exit - without resolving because model content changed\",\n\t\t\t\t);\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\treturn this.resolveFromContent(\n\t\t\t\tcontent,\n\t\t\t\tfalse /* not dirty (resolved from file) */,\n\t\t\t\toptions,\n\t\t\t);\n\t\t} catch (error) {\n\t\t\tconst result = error.fileOperationResult;\n\n\t\t\t// Apply orphaned state based on error code\n\t\t\tthis.setOrphaned(result === FileOperationResult.FILE_NOT_FOUND);\n\n\t\t\t// NotModified status is expected and can be handled gracefully\n\t\t\t// if we are resolved. We still want to update our last resolved\n\t\t\t// stat to e.g. detect changes to the file's readonly state\n\t\t\tif (\n\t\t\t\tthis.isResolved() &&\n\t\t\t\tresult === FileOperationResult.FILE_NOT_MODIFIED_SINCE\n\t\t\t) {\n\t\t\t\tif (error instanceof NotModifiedSinceFileOperationError) {\n\t\t\t\t\tthis.updateLastResolvedFileStat(error.stat);\n\t\t\t\t}\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Unless we are forced to read from the file, Ignore when a model has been resolved once\n\t\t\t// and the file was deleted meanwhile. Since we already have the model resolved, we can return\n\t\t\t// to this state and update the orphaned flag to indicate that this model has no version on\n\t\t\t// disk anymore.\n\t\t\tif (\n\t\t\t\tthis.isResolved() &&\n\t\t\t\tresult === FileOperationResult.FILE_NOT_FOUND &&\n\t\t\t\t!forceReadFromFile\n\t\t\t) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Otherwise bubble up the error\n\t\t\tthrow error;\n\t\t}\n\t}\n\n\tprivate resolveFromContent(\n\t\tcontent: ITextFileStreamContent,\n\t\tdirty: boolean,\n\t\toptions?: ITextFileResolveOptions,\n\t): void {\n\t\tthis.trace(\"resolveFromContent() - enter\");\n\n\t\t// Return early if we are disposed\n\t\tif (this.isDisposed()) {\n\t\t\tthis.trace(\n\t\t\t\t\"resolveFromContent() - exit - because model is disposed\",\n\t\t\t);\n\n\t\t\treturn;\n\t\t}\n\n\t\t// Update our resolved disk stat model\n\t\tthis.updateLastResolvedFileStat({\n\t\t\tresource: this.resource,\n\t\t\tname: content.name,\n\t\t\tmtime: content.mtime,\n\t\t\tctime: content.ctime,\n\t\t\tsize: content.size,\n\t\t\tetag: content.etag,\n\t\t\treadonly: content.readonly,\n\t\t\tlocked: content.locked,\n\t\t\tisFile: true,\n\t\t\tisDirectory: false,\n\t\t\tisSymbolicLink: false,\n\t\t\tchildren: undefined,\n\t\t});\n\n\t\t// Keep the original encoding to not loose it when saving\n\t\tconst oldEncoding = this.contentEncoding;\n\t\tthis.contentEncoding = content.encoding;\n\n\t\t// Handle events if encoding changed\n\t\tif (this.preferredEncoding) {\n\t\t\tthis.updatePreferredEncoding(this.contentEncoding); // make sure to reflect the real encoding of the file (never out of sync)\n\t\t} else if (oldEncoding !== this.contentEncoding) {\n\t\t\tthis._onDidChangeEncoding.fire();\n\t\t}\n\n\t\t// Update Existing Model\n\t\tif (this.textEditorModel) {\n\t\t\tthis.doUpdateTextModel(content.value);\n\t\t}\n\n\t\t// Create New Model\n\t\telse {\n\t\t\tthis.doCreateTextModel(content.resource, content.value);\n\t\t}\n\n\t\t// Update model dirty flag. This is very important to call\n\t\t// in both cases of dirty or not because it conditionally\n\t\t// updates the `bufferSavedVersionId` to determine the\n\t\t// version when to consider the model as saved again (e.g.\n\t\t// when undoing back to the saved state)\n\t\tthis.setDirty(!!dirty);\n\n\t\t// Emit as event\n\t\tthis._onDidResolve.fire(options?.reason ?? TextFileResolveReason.OTHER);\n\t}\n\n\tprivate doCreateTextModel(resource: URI, value: ITextBufferFactory): void {\n\t\tthis.trace(\"doCreateTextModel()\");\n\n\t\t// Create model\n\t\tconst textModel = this.createTextEditorModel(\n\t\t\tvalue,\n\t\t\tresource,\n\t\t\tthis.preferredLanguageId,\n\t\t);\n\n\t\t// Model Listeners\n\t\tthis.installModelListeners(textModel);\n\n\t\t// Detect language from content\n\t\tthis.autoDetectLanguage();\n\t}\n\n\tprivate doUpdateTextModel(value: ITextBufferFactory): void {\n\t\tthis.trace(\"doUpdateTextModel()\");\n\n\t\t// Update model value in a block that ignores content change events for dirty tracking\n\t\tthis.ignoreDirtyOnModelContentChange = true;\n\t\ttry {\n\t\t\tthis.updateTextEditorModel(value, this.preferredLanguageId);\n\t\t} finally {\n\t\t\tthis.ignoreDirtyOnModelContentChange = false;\n\t\t}\n\t}\n\n\tprotected override installModelListeners(model: ITextModel): void {\n\t\t// See https://github.com/microsoft/vscode/issues/30189\n\t\t// This code has been extracted to a different method because it caused a memory leak\n\t\t// where `value` was captured in the content change listener closure scope.\n\n\t\tthis._register(\n\t\t\tmodel.onDidChangeContent((e) =>\n\t\t\t\tthis.onModelContentChanged(model, e.isUndoing || e.isRedoing),\n\t\t\t),\n\t\t);\n\t\tthis._register(\n\t\t\tmodel.onDidChangeLanguage(() => this.onMaybeShouldChangeEncoding()),\n\t\t); // detect possible encoding change via language specific settings\n\n\t\tsuper.installModelListeners(model);\n\t}\n\n\tprivate onModelContentChanged(\n\t\tmodel: ITextModel,\n\t\tisUndoingOrRedoing: boolean,\n\t): void {\n\t\tthis.trace(`onModelContentChanged() - enter`);\n\n\t\t// In any case increment the version id because it tracks the textual content state of the model at all times\n\t\tthis.versionId++;\n\t\tthis.trace(`onModelContentChanged() - new versionId ${this.versionId}`);\n\n\t\t// Remember when the user changed the model through a undo/redo operation.\n\t\t// We need this information to throttle save participants to fix\n\t\t// https://github.com/microsoft/vscode/issues/102542\n\t\tif (isUndoingOrRedoing) {\n\t\t\tthis.lastModelContentChangeFromUndoRedo = Date.now();\n\t\t}\n\n\t\t// We mark check for a dirty-state change upon model content change, unless:\n\t\t// - explicitly instructed to ignore it (e.g. from model.resolve())\n\t\t// - the model is readonly (in that case we never assume the change was done by the user)\n\t\tif (!this.ignoreDirtyOnModelContentChange && !this.isReadonly()) {\n\t\t\t// The contents changed as a matter of Undo and the version reached matches the saved one\n\t\t\t// In this case we clear the dirty flag and emit a SAVED event to indicate this state.\n\t\t\tif (model.getAlternativeVersionId() === this.bufferSavedVersionId) {\n\t\t\t\tthis.trace(\n\t\t\t\t\t\"onModelContentChanged() - model content changed back to last saved version\",\n\t\t\t\t);\n\n\t\t\t\t// Clear flags\n\t\t\t\tconst wasDirty = this.dirty;\n\t\t\t\tthis.setDirty(false);\n\n\t\t\t\t// Emit revert event if we were dirty\n\t\t\t\tif (wasDirty) {\n\t\t\t\t\tthis._onDidRevert.fire();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Otherwise the content has changed and we signal this as becoming dirty\n\t\t\telse {\n\t\t\t\tthis.trace(\n\t\t\t\t\t\"onModelContentChanged() - model content changed and marked as dirty\",\n\t\t\t\t);\n\n\t\t\t\t// Mark as dirty\n\t\t\t\tthis.setDirty(true);\n\t\t\t}\n\t\t}\n\n\t\t// Emit as event\n\t\tthis._onDidChangeContent.fire();\n\n\t\t// Detect language from content\n\t\tthis.autoDetectLanguage();\n\t}\n\n\tprotected override async autoDetectLanguage(): Promise<void> {\n\t\t// Wait to be ready to detect language\n\t\tawait this.extensionService?.whenInstalledExtensionsRegistered();\n\n\t\t// Only perform language detection conditionally\n\t\tconst languageId = this.getLanguageId();\n\t\tif (\n\t\t\tthis.resource.scheme === this.pathService.defaultUriScheme && // make sure to not detect language for non-user visible documents\n\t\t\t(!languageId || languageId === PLAINTEXT_LANGUAGE_ID) && // only run on files with plaintext language set or no language set at all\n\t\t\t!this.resourceHasExtension // only run if this particular file doesn't have an extension\n\t\t) {\n\t\t\treturn super.autoDetectLanguage();\n\t\t}\n\t}\n\n\tprivate async forceResolveFromFile(): Promise<void> {\n\t\tif (this.isDisposed()) {\n\t\t\treturn; // return early when the model is invalid\n\t\t}\n\n\t\t// We go through the text file service to make\n\t\t// sure this kind of `resolve` is properly\n\t\t// running in sequence with any other running\n\t\t// `resolve` if any, including subsequent runs\n\t\t// that are triggered right after.\n\n\t\tawait this.textFileService.files.resolve(this.resource, {\n\t\t\treload: { async: false },\n\t\t\tforceReadFromFile: true,\n\t\t});\n\t}\n\n\t//#endregion\n\n\t//#region Dirty\n\n\tisDirty(): this is IResolvedTextFileEditorModel {\n\t\treturn this.dirty;\n\t}\n\n\tisModified(): boolean {\n\t\treturn this.isDirty();\n\t}\n\n\tsetDirty(dirty: boolean): void {\n\t\tif (!this.isResolved()) {\n\t\t\treturn; // only resolved models can be marked dirty\n\t\t}\n\n\t\t// Track dirty state and version id\n\t\tconst wasDirty = this.dirty;\n\t\tthis.doSetDirty(dirty);\n\n\t\t// Emit as Event if dirty changed\n\t\tif (dirty !== wasDirty) {\n\t\t\tthis._onDidChangeDirty.fire();\n\t\t}\n\t}\n\n\tprivate doSetDirty(dirty: boolean): () => void {\n\t\tconst wasDirty = this.dirty;\n\t\tconst wasInConflictMode = this.inConflictMode;\n\t\tconst wasInErrorMode = this.inErrorMode;\n\t\tconst oldBufferSavedVersionId = this.bufferSavedVersionId;\n\n\t\tif (dirty) {\n\t\t\tthis.dirty = true;\n\t\t} else {\n\t\t\tthis.dirty = false;\n\t\t\tthis.inConflictMode = false;\n\t\t\tthis.inErrorMode = false;\n\t\t\tthis.updateSavedVersionId();\n\t\t}\n\n\t\t// Return function to revert this call\n\t\treturn () => {\n\t\t\tthis.dirty = wasDirty;\n\t\t\tthis.inConflictMode = wasInConflictMode;\n\t\t\tthis.inErrorMode = wasInErrorMode;\n\t\t\tthis.bufferSavedVersionId = oldBufferSavedVersionId;\n\t\t};\n\t}\n\n\t//#endregion\n\n\t//#region Save\n\n\tasync save(\n\t\toptions: ITextFileSaveAsOptions = Object.create(null),\n\t): Promise<boolean> {\n\t\tif (!this.isResolved()) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (this.isReadonly()) {\n\t\t\tthis.trace(\"save() - ignoring request for readonly resource\");\n\n\t\t\treturn false; // if model is readonly we do not attempt to save at all\n\t\t}\n\n\t\tif (\n\t\t\t(this.hasState(TextFileEditorModelState.CONFLICT) ||\n\t\t\t\tthis.hasState(TextFileEditorModelState.ERROR)) &&\n\t\t\t(options.reason === SaveReason.AUTO ||\n\t\t\t\toptions.reason === SaveReason.FOCUS_CHANGE ||\n\t\t\t\toptions.reason === SaveReason.WINDOW_CHANGE)\n\t\t) {\n\t\t\tthis.trace(\n\t\t\t\t\"save() - ignoring auto save request for model that is in conflict or error\",\n\t\t\t);\n\n\t\t\treturn false; // if model is in save conflict or error, do not save unless save reason is explicit\n\t\t}\n\n\t\t// Actually do save and log\n\t\tthis.trace(\"save() - enter\");\n\t\tawait this.doSave(options);\n\t\tthis.trace(\"save() - exit\");\n\n\t\treturn this.hasState(TextFileEditorModelState.SAVED);\n\t}\n\n\tprivate async doSave(options: ITextFileSaveAsOptions): Promise<void> {\n\t\tif (typeof options.reason !== \"number\") {\n\t\t\toptions.reason = SaveReason.EXPLICIT;\n\t\t}\n\n\t\tconst versionId = this.versionId;\n\t\tthis.trace(`doSave(${versionId}) - enter with versionId ${versionId}`);\n\n\t\t// Return early if saved from within save participant to break recursion\n\t\t//\n\t\t// Scenario: a save participant triggers a save() on the model\n\t\tif (this.ignoreSaveFromSaveParticipants) {\n\t\t\tthis.trace(\n\t\t\t\t`doSave(${versionId}) - exit - refusing to save() recursively from save participant`,\n\t\t\t);\n\n\t\t\treturn;\n\t\t}\n\n\t\t// Lookup any running save for this versionId and return it if found\n\t\t//\n\t\t// Scenario: user invoked the save action multiple times quickly for the same contents\n\t\t//           while the save was not yet finished to disk\n\t\t//\n\t\tif (this.saveSequentializer.isRunning(versionId)) {\n\t\t\tthis.trace(\n\t\t\t\t`doSave(${versionId}) - exit - found a running save for versionId ${versionId}`,\n\t\t\t);\n\n\t\t\treturn this.saveSequentializer.running;\n\t\t}\n\n\t\t// Return early if not dirty (unless forced)\n\t\t//\n\t\t// Scenario: user invoked save action even though the model is not dirty\n\t\tif (!options.force && !this.dirty) {\n\t\t\tthis.trace(\n\t\t\t\t`doSave(${versionId}) - exit - because not dirty and/or versionId is different (this.isDirty: ${this.dirty}, this.versionId: ${this.versionId})`,\n\t\t\t);\n\n\t\t\treturn;\n\t\t}\n\n\t\t// Return if currently saving by storing this save request as the next save that should happen.\n\t\t// Never ever must 2 saves execute at the same time because this can lead to dirty writes and race conditions.\n\t\t//\n\t\t// Scenario A: auto save was triggered and is currently busy saving to disk. this takes long enough that another auto save\n\t\t//             kicks in.\n\t\t// Scenario B: save is very slow (e.g. network share) and the user manages to change the buffer and trigger another save\n\t\t//             while the first save has not returned yet.\n\t\t//\n\t\tif (this.saveSequentializer.isRunning()) {\n\t\t\tthis.trace(`doSave(${versionId}) - exit - because busy saving`);\n\n\t\t\t// Indicate to the save sequentializer that we want to\n\t\t\t// cancel the running operation so that ours can run\n\t\t\t// before the running one finishes.\n\t\t\t// Currently this will try to cancel running save\n\t\t\t// participants but never a running save.\n\t\t\tthis.saveSequentializer.cancelRunning();\n\n\t\t\t// Queue this as the upcoming save and return\n\t\t\treturn this.saveSequentializer.queue(() => this.doSave(options));\n\t\t}\n\n\t\t// Push all edit operations to the undo stack so that the user has a chance to\n\t\t// Ctrl+Z back to the saved version.\n\t\tif (this.isResolved()) {\n\t\t\tthis.textEditorModel.pushStackElement();\n\t\t}\n\n\t\tconst saveCancellation = new CancellationTokenSource();\n\n\t\treturn this.progressService\n\t\t\t.withProgress(\n\t\t\t\t{\n\t\t\t\t\ttitle: localize(\n\t\t\t\t\t\t\"saveParticipants\",\n\t\t\t\t\t\t\"Saving '{0}'\",\n\t\t\t\t\t\tthis.name,\n\t\t\t\t\t),\n\t\t\t\t\tlocation: ProgressLocation.Window,\n\t\t\t\t\tcancellable: true,\n\t\t\t\t\tdelay: this.isDirty() ? 3000 : 5000,\n\t\t\t\t},\n\t\t\t\t(progress) => {\n\t\t\t\t\treturn this.doSaveSequential(\n\t\t\t\t\t\tversionId,\n\t\t\t\t\t\toptions,\n\t\t\t\t\t\tprogress,\n\t\t\t\t\t\tsaveCancellation,\n\t\t\t\t\t);\n\t\t\t\t},\n\t\t\t\t() => {\n\t\t\t\t\tsaveCancellation.cancel();\n\t\t\t\t},\n\t\t\t)\n\t\t\t.finally(() => {\n\t\t\t\tsaveCancellation.dispose();\n\t\t\t});\n\t}\n\n\tprivate doSaveSequential(\n\t\tversionId: number,\n\t\toptions: ITextFileSaveAsOptions,\n\t\tprogress: IProgress<IProgressStep>,\n\t\tsaveCancellation: CancellationTokenSource,\n\t): Promise<void> {\n\t\treturn this.saveSequentializer.run(\n\t\t\tversionId,\n\t\t\t(async () => {\n\t\t\t\t// A save participant can still change the model now and since we are so close to saving\n\t\t\t\t// we do not want to trigger another auto save or similar, so we block this\n\t\t\t\t// In addition we update our version right after in case it changed because of a model change\n\t\t\t\t//\n\t\t\t\t// Save participants can also be skipped through API.\n\t\t\t\tif (this.isResolved() && !options.skipSaveParticipants) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\t// Measure the time it took from the last undo/redo operation to this save. If this\n\t\t\t\t\t\t// time is below `UNDO_REDO_SAVE_PARTICIPANTS_THROTTLE_THRESHOLD`, we make sure to\n\t\t\t\t\t\t// delay the save participant for the remaining time if the reason is auto save.\n\t\t\t\t\t\t//\n\t\t\t\t\t\t// This fixes the following issue:\n\t\t\t\t\t\t// - the user has configured auto save with delay of 100ms or shorter\n\t\t\t\t\t\t// - the user has a save participant enabled that modifies the file on each save\n\t\t\t\t\t\t// - the user types into the file and the file gets saved\n\t\t\t\t\t\t// - the user triggers undo operation\n\t\t\t\t\t\t// - this will undo the save participant change but trigger the save participant right after\n\t\t\t\t\t\t// - the user has no chance to undo over the save participant\n\t\t\t\t\t\t//\n\t\t\t\t\t\t// Reported as: https://github.com/microsoft/vscode/issues/102542\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\toptions.reason === SaveReason.AUTO &&\n\t\t\t\t\t\t\ttypeof this.lastModelContentChangeFromUndoRedo ===\n\t\t\t\t\t\t\t\t\"number\"\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\tconst timeFromUndoRedoToSave =\n\t\t\t\t\t\t\t\tDate.now() -\n\t\t\t\t\t\t\t\tthis.lastModelContentChangeFromUndoRedo;\n\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\ttimeFromUndoRedoToSave <\n\t\t\t\t\t\t\t\tTextFileEditorModel.UNDO_REDO_SAVE_PARTICIPANTS_AUTO_SAVE_THROTTLE_THRESHOLD\n\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\tawait timeout(\n\t\t\t\t\t\t\t\t\tTextFileEditorModel.UNDO_REDO_SAVE_PARTICIPANTS_AUTO_SAVE_THROTTLE_THRESHOLD -\n\t\t\t\t\t\t\t\t\t\ttimeFromUndoRedoToSave,\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Run save participants unless save was cancelled meanwhile\n\t\t\t\t\t\tif (!saveCancellation.token.isCancellationRequested) {\n\t\t\t\t\t\t\tthis.ignoreSaveFromSaveParticipants = true;\n\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\tawait this.textFileService.files.runSaveParticipants(\n\t\t\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\treason:\n\t\t\t\t\t\t\t\t\t\t\toptions.reason ??\n\t\t\t\t\t\t\t\t\t\t\tSaveReason.EXPLICIT,\n\t\t\t\t\t\t\t\t\t\tsavedFrom: options.from,\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\tprogress,\n\t\t\t\t\t\t\t\t\tsaveCancellation.token,\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t} finally {\n\t\t\t\t\t\t\t\tthis.ignoreSaveFromSaveParticipants = false;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t} catch (error) {\n\t\t\t\t\t\tthis.logService.error(\n\t\t\t\t\t\t\t`[text file model] runSaveParticipants(${versionId}) - resulted in an error: ${error.toString()}`,\n\t\t\t\t\t\t\tthis.resource.toString(),\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// It is possible that a subsequent save is cancelling this\n\t\t\t\t// running save. As such we return early when we detect that\n\t\t\t\t// However, we do not pass the token into the file service\n\t\t\t\t// because that is an atomic operation currently without\n\t\t\t\t// cancellation support, so we dispose the cancellation if\n\t\t\t\t// it was not cancelled yet.\n\t\t\t\tif (saveCancellation.token.isCancellationRequested) {\n\t\t\t\t\treturn;\n\t\t\t\t} else {\n\t\t\t\t\tsaveCancellation.dispose();\n\t\t\t\t}\n\n\t\t\t\t// We have to protect against being disposed at this point. It could be that the save() operation\n\t\t\t\t// was triggerd followed by a dispose() operation right after without waiting. Typically we cannot\n\t\t\t\t// be disposed if we are dirty, but if we are not dirty, save() and dispose() can still be triggered\n\t\t\t\t// one after the other without waiting for the save() to complete. If we are disposed(), we risk\n\t\t\t\t// saving contents to disk that are stale (see https://github.com/microsoft/vscode/issues/50942).\n\t\t\t\t// To fix this issue, we will not store the contents to disk when we got disposed.\n\t\t\t\tif (this.isDisposed()) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// We require a resolved model from this point on, since we are about to write data to disk.\n\t\t\t\tif (!this.isResolved()) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// update versionId with its new value (if pre-save changes happened)\n\t\t\t\tversionId = this.versionId;\n\n\t\t\t\t// Clear error flag since we are trying to save again\n\t\t\t\tthis.inErrorMode = false;\n\n\t\t\t\t// Save to Disk. We mark the save operation as currently running with\n\t\t\t\t// the latest versionId because it might have changed from a save\n\t\t\t\t// participant triggering\n\t\t\t\tprogress.report({\n\t\t\t\t\tmessage: localize(\"saveTextFile\", \"Writing into file...\"),\n\t\t\t\t});\n\t\t\t\tthis.trace(`doSave(${versionId}) - before write()`);\n\t\t\t\tconst lastResolvedFileStat = assertIsDefined(\n\t\t\t\t\tthis.lastResolvedFileStat,\n\t\t\t\t);\n\t\t\t\tconst resolvedTextFileEditorModel = this;\n\t\t\t\treturn this.saveSequentializer.run(\n\t\t\t\t\tversionId,\n\t\t\t\t\t(async () => {\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tconst stat = await this.textFileService.write(\n\t\t\t\t\t\t\t\tlastResolvedFileStat.resource,\n\t\t\t\t\t\t\t\tresolvedTextFileEditorModel.createSnapshot(),\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tmtime: lastResolvedFileStat.mtime,\n\t\t\t\t\t\t\t\t\tencoding: this.getEncoding(),\n\t\t\t\t\t\t\t\t\tetag:\n\t\t\t\t\t\t\t\t\t\toptions.ignoreModifiedSince ||\n\t\t\t\t\t\t\t\t\t\t!this.filesConfigurationService.preventSaveConflicts(\n\t\t\t\t\t\t\t\t\t\t\tlastResolvedFileStat.resource,\n\t\t\t\t\t\t\t\t\t\t\tresolvedTextFileEditorModel.getLanguageId(),\n\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t\t? ETAG_DISABLED\n\t\t\t\t\t\t\t\t\t\t\t: lastResolvedFileStat.etag,\n\t\t\t\t\t\t\t\t\tunlock: options.writeUnlock,\n\t\t\t\t\t\t\t\t\twriteElevated: options.writeElevated,\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\tthis.handleSaveSuccess(stat, versionId, options);\n\t\t\t\t\t\t} catch (error) {\n\t\t\t\t\t\t\tthis.handleSaveError(error, versionId, options);\n\t\t\t\t\t\t}\n\t\t\t\t\t})(),\n\t\t\t\t);\n\t\t\t})(),\n\t\t\t() => saveCancellation.cancel(),\n\t\t);\n\t}\n\n\tprivate handleSaveSuccess(\n\t\tstat: IFileStatWithMetadata,\n\t\tversionId: number,\n\t\toptions: ITextFileSaveAsOptions,\n\t): void {\n\t\t// Updated resolved stat with updated stat\n\t\tthis.updateLastResolvedFileStat(stat);\n\n\t\t// Update dirty state unless model has changed meanwhile\n\t\tif (versionId === this.versionId) {\n\t\t\tthis.trace(\n\t\t\t\t`handleSaveSuccess(${versionId}) - setting dirty to false because versionId did not change`,\n\t\t\t);\n\t\t\tthis.setDirty(false);\n\t\t} else {\n\t\t\tthis.trace(\n\t\t\t\t`handleSaveSuccess(${versionId}) - not setting dirty to false because versionId did change meanwhile`,\n\t\t\t);\n\t\t}\n\n\t\t// Update orphan state given save was successful\n\t\tthis.setOrphaned(false);\n\n\t\t// Emit Save Event\n\t\tthis._onDidSave.fire({\n\t\t\treason: options.reason,\n\t\t\tstat,\n\t\t\tsource: options.source,\n\t\t});\n\t}\n\n\tprivate handleSaveError(\n\t\terror: Error,\n\t\tversionId: number,\n\t\toptions: ITextFileSaveAsOptions,\n\t): void {\n\t\t(options.ignoreErrorHandler\n\t\t\t? this.logService.trace\n\t\t\t: this.logService.error\n\t\t).apply(this.logService, [\n\t\t\t`[text file model] handleSaveError(${versionId}) - exit - resulted in a save error: ${error.toString()}`,\n\t\t\tthis.resource.toString(),\n\t\t]);\n\n\t\t// Return early if the save() call was made asking to\n\t\t// handle the save error itself.\n\t\tif (options.ignoreErrorHandler) {\n\t\t\tthrow error;\n\t\t}\n\n\t\t// In any case of an error, we mark the model as dirty to prevent data loss\n\t\t// It could be possible that the write corrupted the file on disk (e.g. when\n\t\t// an error happened after truncating the file) and as such we want to preserve\n\t\t// the model contents to prevent data loss.\n\t\tthis.setDirty(true);\n\n\t\t// Flag as error state in the model\n\t\tthis.inErrorMode = true;\n\n\t\t// Look out for a save conflict\n\t\tif (\n\t\t\t(<FileOperationError>error).fileOperationResult ===\n\t\t\tFileOperationResult.FILE_MODIFIED_SINCE\n\t\t) {\n\t\t\tthis.inConflictMode = true;\n\t\t}\n\n\t\t// Show to user\n\t\tthis.textFileService.files.saveErrorHandler.onSaveError(\n\t\t\terror,\n\t\t\tthis,\n\t\t\toptions,\n\t\t);\n\n\t\t// Emit as event\n\t\tthis._onDidSaveError.fire();\n\t}\n\n\tprivate updateSavedVersionId(): void {\n\t\t// we remember the models alternate version id to remember when the version\n\t\t// of the model matches with the saved version on disk. we need to keep this\n\t\t// in order to find out if the model changed back to a saved version (e.g.\n\t\t// when undoing long enough to reach to a version that is saved and then to\n\t\t// clear the dirty flag)\n\t\tif (this.isResolved()) {\n\t\t\tthis.bufferSavedVersionId =\n\t\t\t\tthis.textEditorModel.getAlternativeVersionId();\n\t\t}\n\t}\n\n\tprivate updateLastResolvedFileStat(\n\t\tnewFileStat: IFileStatWithMetadata,\n\t): void {\n\t\tconst oldReadonly = this.isReadonly();\n\n\t\t// First resolve - just take\n\t\tif (!this.lastResolvedFileStat) {\n\t\t\tthis.lastResolvedFileStat = newFileStat;\n\t\t}\n\n\t\t// Subsequent resolve - make sure that we only assign it if the mtime is equal or has advanced.\n\t\t// This prevents race conditions from resolving and saving. If a save comes in late after a revert\n\t\t// was called, the mtime could be out of sync.\n\t\telse if (this.lastResolvedFileStat.mtime <= newFileStat.mtime) {\n\t\t\tthis.lastResolvedFileStat = newFileStat;\n\t\t}\n\n\t\t// In all other cases update only the readonly and locked flags\n\t\telse {\n\t\t\tthis.lastResolvedFileStat = {\n\t\t\t\t...this.lastResolvedFileStat,\n\t\t\t\treadonly: newFileStat.readonly,\n\t\t\t\tlocked: newFileStat.locked,\n\t\t\t};\n\t\t}\n\n\t\t// Signal that the readonly state changed\n\t\tif (this.isReadonly() !== oldReadonly) {\n\t\t\tthis._onDidChangeReadonly.fire();\n\t\t}\n\t}\n\n\t//#endregion\n\n\thasState(state: TextFileEditorModelState): boolean {\n\t\tswitch (state) {\n\t\t\tcase TextFileEditorModelState.CONFLICT:\n\t\t\t\treturn this.inConflictMode;\n\t\t\tcase TextFileEditorModelState.DIRTY:\n\t\t\t\treturn this.dirty;\n\t\t\tcase TextFileEditorModelState.ERROR:\n\t\t\t\treturn this.inErrorMode;\n\t\t\tcase TextFileEditorModelState.ORPHAN:\n\t\t\t\treturn this.inOrphanMode;\n\t\t\tcase TextFileEditorModelState.PENDING_SAVE:\n\t\t\t\treturn this.saveSequentializer.isRunning();\n\t\t\tcase TextFileEditorModelState.SAVED:\n\t\t\t\treturn !this.dirty;\n\t\t}\n\t}\n\n\tasync joinState(\n\t\tstate: TextFileEditorModelState.PENDING_SAVE,\n\t): Promise<void> {\n\t\treturn this.saveSequentializer.running;\n\t}\n\n\toverride getLanguageId(this: IResolvedTextFileEditorModel): string;\n\toverride getLanguageId(): string | undefined;\n\toverride getLanguageId(): string | undefined {\n\t\tif (this.textEditorModel) {\n\t\t\treturn this.textEditorModel.getLanguageId();\n\t\t}\n\n\t\treturn this.preferredLanguageId;\n\t}\n\n\t//#region Encoding\n\n\tprivate async onMaybeShouldChangeEncoding(): Promise<void> {\n\t\t// This is a bit of a hack but there is a narrow case where\n\t\t// per-language configured encodings are not working:\n\t\t//\n\t\t// On startup we may not yet have all languages resolved so\n\t\t// we pick a wrong encoding. We never used to re-apply the\n\t\t// encoding when the language was then resolved, because that\n\t\t// is an operation that is will have to fetch the contents\n\t\t// again from disk.\n\t\t//\n\t\t// To mitigate this issue, when we detect the model language\n\t\t// changes, we see if there is a specific encoding configured\n\t\t// for the new language and apply it, only if the model is\n\t\t// not dirty and only if the encoding was not explicitly set.\n\t\t//\n\t\t// (see https://github.com/microsoft/vscode/issues/127936)\n\n\t\tif (this.hasEncodingSetExplicitly) {\n\t\t\tthis.trace(\n\t\t\t\t\"onMaybeShouldChangeEncoding() - ignoring because encoding was set explicitly\",\n\t\t\t);\n\n\t\t\treturn; // never change the user's choice of encoding\n\t\t}\n\n\t\tif (\n\t\t\tthis.contentEncoding === UTF8_with_bom ||\n\t\t\tthis.contentEncoding === UTF16be ||\n\t\t\tthis.contentEncoding === UTF16le\n\t\t) {\n\t\t\tthis.trace(\n\t\t\t\t\"onMaybeShouldChangeEncoding() - ignoring because content encoding has a BOM\",\n\t\t\t);\n\n\t\t\treturn; // never change an encoding that we can detect 100% via BOMs\n\t\t}\n\n\t\tconst { encoding } =\n\t\t\tawait this.textFileService.encoding.getPreferredReadEncoding(\n\t\t\t\tthis.resource,\n\t\t\t);\n\t\tif (typeof encoding !== \"string\" || !this.isNewEncoding(encoding)) {\n\t\t\tthis.trace(\n\t\t\t\t`onMaybeShouldChangeEncoding() - ignoring because preferred encoding ${encoding} is not new`,\n\t\t\t);\n\n\t\t\treturn; // return early if encoding is invalid or did not change\n\t\t}\n\n\t\tif (this.isDirty()) {\n\t\t\tthis.trace(\n\t\t\t\t\"onMaybeShouldChangeEncoding() - ignoring because model is dirty\",\n\t\t\t);\n\n\t\t\treturn; // return early to prevent accident saves in this case\n\t\t}\n\n\t\tthis.logService.info(\n\t\t\t`Adjusting encoding based on configured language override to '${encoding}' for ${this.resource.toString(true)}.`,\n\t\t);\n\n\t\t// Force resolve to pick up the new encoding\n\t\treturn this.forceResolveFromFile();\n\t}\n\n\tprivate hasEncodingSetExplicitly = false;\n\n\tsetEncoding(encoding: string, mode: EncodingMode): Promise<void> {\n\t\t// Remember that an explicit encoding was set\n\t\tthis.hasEncodingSetExplicitly = true;\n\n\t\treturn this.setEncodingInternal(encoding, mode);\n\t}\n\n\tprivate async setEncodingInternal(\n\t\tencoding: string,\n\t\tmode: EncodingMode,\n\t): Promise<void> {\n\t\t// Encode: Save with encoding\n\t\tif (mode === EncodingMode.Encode) {\n\t\t\tthis.updatePreferredEncoding(encoding);\n\n\t\t\t// Save\n\t\t\tif (!this.isDirty()) {\n\t\t\t\tthis.versionId++; // needs to increment because we change the model potentially\n\t\t\t\tthis.setDirty(true);\n\t\t\t}\n\n\t\t\tif (!this.inConflictMode) {\n\t\t\t\tawait this.save({\n\t\t\t\t\tsource: TextFileEditorModel.TEXTFILE_SAVE_ENCODING_SOURCE,\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\t// Decode: Resolve with encoding\n\t\telse {\n\t\t\tif (!this.isNewEncoding(encoding)) {\n\t\t\t\treturn; // return early if the encoding is already the same\n\t\t\t}\n\n\t\t\tif (this.isDirty() && !this.inConflictMode) {\n\t\t\t\tawait this.save();\n\t\t\t}\n\n\t\t\tthis.updatePreferredEncoding(encoding);\n\n\t\t\tawait this.forceResolveFromFile();\n\t\t}\n\t}\n\n\tupdatePreferredEncoding(encoding: string | undefined): void {\n\t\tif (!this.isNewEncoding(encoding)) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.preferredEncoding = encoding;\n\n\t\t// Emit\n\t\tthis._onDidChangeEncoding.fire();\n\t}\n\n\tprivate isNewEncoding(encoding: string | undefined): boolean {\n\t\tif (this.preferredEncoding === encoding) {\n\t\t\treturn false; // return early if the encoding is already the same\n\t\t}\n\n\t\tif (!this.preferredEncoding && this.contentEncoding === encoding) {\n\t\t\treturn false; // also return if we don't have a preferred encoding but the content encoding is already the same\n\t\t}\n\n\t\treturn true;\n\t}\n\n\tgetEncoding(): string | undefined {\n\t\treturn this.preferredEncoding || this.contentEncoding;\n\t}\n\n\t//#endregion\n\n\tprivate trace(msg: string): void {\n\t\tthis.logService.trace(\n\t\t\t`[text file model] ${msg}`,\n\t\t\tthis.resource.toString(),\n\t\t);\n\t}\n\n\toverride isResolved(): this is IResolvedTextFileEditorModel {\n\t\treturn !!this.textEditorModel;\n\t}\n\n\toverride isReadonly(): boolean | IMarkdownString {\n\t\treturn this.filesConfigurationService.isReadonly(\n\t\t\tthis.resource,\n\t\t\tthis.lastResolvedFileStat,\n\t\t);\n\t}\n\n\toverride dispose(): void {\n\t\tthis.trace(\"dispose()\");\n\n\t\tthis.inConflictMode = false;\n\t\tthis.inOrphanMode = false;\n\t\tthis.inErrorMode = false;\n\n\t\tsuper.dispose();\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
