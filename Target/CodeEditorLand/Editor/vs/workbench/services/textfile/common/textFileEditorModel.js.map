{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/textfile/common/textFileEditorModel.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { localize } from '../../../../nls.js';\nimport { Emitter } from '../../../../base/common/event.js';\nimport { URI } from '../../../../base/common/uri.js';\nimport { mark } from '../../../../base/common/performance.js';\nimport { assertIsDefined } from '../../../../base/common/types.js';\nimport { EncodingMode, ITextFileService, TextFileEditorModelState, ITextFileEditorModel, ITextFileStreamContent, ITextFileResolveOptions, IResolvedTextFileEditorModel, TextFileResolveReason, ITextFileEditorModelSaveEvent, ITextFileSaveAsOptions } from './textfiles.js';\nimport { IRevertOptions, SaveReason, SaveSourceRegistry } from '../../../common/editor.js';\nimport { BaseTextEditorModel } from '../../../common/editor/textEditorModel.js';\nimport { IWorkingCopyBackupService, IResolvedWorkingCopyBackup } from '../../workingCopy/common/workingCopyBackup.js';\nimport { IFileService, FileOperationError, FileOperationResult, FileChangesEvent, FileChangeType, IFileStatWithMetadata, ETAG_DISABLED, NotModifiedSinceFileOperationError } from '../../../../platform/files/common/files.js';\nimport { ILanguageService } from '../../../../editor/common/languages/language.js';\nimport { IModelService } from '../../../../editor/common/services/model.js';\nimport { timeout, TaskSequentializer } from '../../../../base/common/async.js';\nimport { ITextBufferFactory, ITextModel } from '../../../../editor/common/model.js';\nimport { ILogService } from '../../../../platform/log/common/log.js';\nimport { basename } from '../../../../base/common/path.js';\nimport { IWorkingCopyService } from '../../workingCopy/common/workingCopyService.js';\nimport { IWorkingCopyBackup, WorkingCopyCapabilities, NO_TYPE_ID, IWorkingCopyBackupMeta } from '../../workingCopy/common/workingCopy.js';\nimport { IFilesConfigurationService } from '../../filesConfiguration/common/filesConfigurationService.js';\nimport { ILabelService } from '../../../../platform/label/common/label.js';\nimport { CancellationToken, CancellationTokenSource } from '../../../../base/common/cancellation.js';\nimport { UTF16be, UTF16le, UTF8, UTF8_with_bom } from './encoding.js';\nimport { createTextBufferFactoryFromStream } from '../../../../editor/common/model/textModel.js';\nimport { ILanguageDetectionService } from '../../languageDetection/common/languageDetectionWorkerService.js';\nimport { IPathService } from '../../path/common/pathService.js';\nimport { extUri } from '../../../../base/common/resources.js';\nimport { IAccessibilityService } from '../../../../platform/accessibility/common/accessibility.js';\nimport { PLAINTEXT_LANGUAGE_ID } from '../../../../editor/common/languages/modesRegistry.js';\nimport { IExtensionService } from '../../extensions/common/extensions.js';\nimport { IMarkdownString } from '../../../../base/common/htmlContent.js';\nimport { IProgress, IProgressService, IProgressStep, ProgressLocation } from '../../../../platform/progress/common/progress.js';\n\ninterface IBackupMetaData extends IWorkingCopyBackupMeta {\n\tmtime: number;\n\tctime: number;\n\tsize: number;\n\tetag: string;\n\torphaned: boolean;\n}\n\n/**\n * The text file editor model listens to changes to its underlying code editor model and saves these changes through the file service back to the disk.\n */\nexport class TextFileEditorModel extends BaseTextEditorModel implements ITextFileEditorModel {\n\n\tprivate static readonly TEXTFILE_SAVE_ENCODING_SOURCE = SaveSourceRegistry.registerSource('textFileEncoding.source', localize('textFileCreate.source', \"File Encoding Changed\"));\n\n\t//#region Events\n\n\tprivate readonly _onDidChangeContent = this._register(new Emitter<void>());\n\treadonly onDidChangeContent = this._onDidChangeContent.event;\n\n\tprivate readonly _onDidResolve = this._register(new Emitter<TextFileResolveReason>());\n\treadonly onDidResolve = this._onDidResolve.event;\n\n\tprivate readonly _onDidChangeDirty = this._register(new Emitter<void>());\n\treadonly onDidChangeDirty = this._onDidChangeDirty.event;\n\n\tprivate readonly _onDidSaveError = this._register(new Emitter<void>());\n\treadonly onDidSaveError = this._onDidSaveError.event;\n\n\tprivate readonly _onDidSave = this._register(new Emitter<ITextFileEditorModelSaveEvent>());\n\treadonly onDidSave = this._onDidSave.event;\n\n\tprivate readonly _onDidRevert = this._register(new Emitter<void>());\n\treadonly onDidRevert = this._onDidRevert.event;\n\n\tprivate readonly _onDidChangeEncoding = this._register(new Emitter<void>());\n\treadonly onDidChangeEncoding = this._onDidChangeEncoding.event;\n\n\tprivate readonly _onDidChangeOrphaned = this._register(new Emitter<void>());\n\treadonly onDidChangeOrphaned = this._onDidChangeOrphaned.event;\n\n\tprivate readonly _onDidChangeReadonly = this._register(new Emitter<void>());\n\treadonly onDidChangeReadonly = this._onDidChangeReadonly.event;\n\n\t//#endregion\n\n\treadonly typeId = NO_TYPE_ID; // IMPORTANT: never change this to not break existing assumptions (e.g. backups)\n\n\treadonly capabilities = WorkingCopyCapabilities.None;\n\n\treadonly name = basename(this.labelService.getUriLabel(this.resource));\n\tprivate resourceHasExtension: boolean = !!extUri.extname(this.resource);\n\n\tprivate contentEncoding: string | undefined; // encoding as reported from disk\n\n\tprivate versionId = 0;\n\tprivate bufferSavedVersionId: number | undefined;\n\n\tprivate ignoreDirtyOnModelContentChange = false;\n\tprivate ignoreSaveFromSaveParticipants = false;\n\n\tprivate static readonly UNDO_REDO_SAVE_PARTICIPANTS_AUTO_SAVE_THROTTLE_THRESHOLD = 500;\n\tprivate lastModelContentChangeFromUndoRedo: number | undefined = undefined;\n\n\tlastResolvedFileStat: IFileStatWithMetadata | undefined; // !!! DO NOT MARK PRIVATE! USED IN TESTS !!!\n\n\tprivate readonly saveSequentializer = new TaskSequentializer();\n\n\tprivate dirty = false;\n\tprivate inConflictMode = false;\n\tprivate inOrphanMode = false;\n\tprivate inErrorMode = false;\n\n\tconstructor(\n\t\treadonly resource: URI,\n\t\tprivate preferredEncoding: string | undefined,\t\t// encoding as chosen by the user\n\t\tprivate preferredLanguageId: string | undefined,\t// language id as chosen by the user\n\t\t@ILanguageService languageService: ILanguageService,\n\t\t@IModelService modelService: IModelService,\n\t\t@IFileService private readonly fileService: IFileService,\n\t\t@ITextFileService private readonly textFileService: ITextFileService,\n\t\t@IWorkingCopyBackupService private readonly workingCopyBackupService: IWorkingCopyBackupService,\n\t\t@ILogService private readonly logService: ILogService,\n\t\t@IWorkingCopyService private readonly workingCopyService: IWorkingCopyService,\n\t\t@IFilesConfigurationService private readonly filesConfigurationService: IFilesConfigurationService,\n\t\t@ILabelService private readonly labelService: ILabelService,\n\t\t@ILanguageDetectionService languageDetectionService: ILanguageDetectionService,\n\t\t@IAccessibilityService accessibilityService: IAccessibilityService,\n\t\t@IPathService private readonly pathService: IPathService,\n\t\t@IExtensionService private readonly extensionService: IExtensionService,\n\t\t@IProgressService private readonly progressService: IProgressService\n\t) {\n\t\tsuper(modelService, languageService, languageDetectionService, accessibilityService);\n\n\t\t// Make known to working copy service\n\t\tthis._register(this.workingCopyService.registerWorkingCopy(this));\n\n\t\tthis.registerListeners();\n\t}\n\n\tprivate registerListeners(): void {\n\t\tthis._register(this.fileService.onDidFilesChange(e => this.onDidFilesChange(e)));\n\t\tthis._register(this.filesConfigurationService.onDidChangeFilesAssociation(() => this.onDidChangeFilesAssociation()));\n\t\tthis._register(this.filesConfigurationService.onDidChangeReadonly(() => this._onDidChangeReadonly.fire()));\n\t}\n\n\tprivate async onDidFilesChange(e: FileChangesEvent): Promise<void> {\n\t\tlet fileEventImpactsModel = false;\n\t\tlet newInOrphanModeGuess: boolean | undefined;\n\n\t\t// If we are currently orphaned, we check if the model file was added back\n\t\tif (this.inOrphanMode) {\n\t\t\tconst modelFileAdded = e.contains(this.resource, FileChangeType.ADDED);\n\t\t\tif (modelFileAdded) {\n\t\t\t\tnewInOrphanModeGuess = false;\n\t\t\t\tfileEventImpactsModel = true;\n\t\t\t}\n\t\t}\n\n\t\t// Otherwise we check if the model file was deleted\n\t\telse {\n\t\t\tconst modelFileDeleted = e.contains(this.resource, FileChangeType.DELETED);\n\t\t\tif (modelFileDeleted) {\n\t\t\t\tnewInOrphanModeGuess = true;\n\t\t\t\tfileEventImpactsModel = true;\n\t\t\t}\n\t\t}\n\n\t\tif (fileEventImpactsModel && this.inOrphanMode !== newInOrphanModeGuess) {\n\t\t\tlet newInOrphanModeValidated: boolean = false;\n\t\t\tif (newInOrphanModeGuess) {\n\t\t\t\t// We have received reports of users seeing delete events even though the file still\n\t\t\t\t// exists (network shares issue: https://github.com/microsoft/vscode/issues/13665).\n\t\t\t\t// Since we do not want to mark the model as orphaned, we have to check if the\n\t\t\t\t// file is really gone and not just a faulty file event.\n\t\t\t\tawait timeout(100, CancellationToken.None);\n\n\t\t\t\tif (this.isDisposed()) {\n\t\t\t\t\tnewInOrphanModeValidated = true;\n\t\t\t\t} else {\n\t\t\t\t\tconst exists = await this.fileService.exists(this.resource);\n\t\t\t\t\tnewInOrphanModeValidated = !exists;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (this.inOrphanMode !== newInOrphanModeValidated && !this.isDisposed()) {\n\t\t\t\tthis.setOrphaned(newInOrphanModeValidated);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate setOrphaned(orphaned: boolean): void {\n\t\tif (this.inOrphanMode !== orphaned) {\n\t\t\tthis.inOrphanMode = orphaned;\n\t\t\tthis._onDidChangeOrphaned.fire();\n\t\t}\n\t}\n\n\tprivate onDidChangeFilesAssociation(): void {\n\t\tif (!this.isResolved()) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst firstLineText = this.getFirstLineText(this.textEditorModel);\n\t\tconst languageSelection = this.getOrCreateLanguage(this.resource, this.languageService, this.preferredLanguageId, firstLineText);\n\n\t\tthis.textEditorModel.setLanguage(languageSelection);\n\t}\n\n\toverride setLanguageId(languageId: string, source?: string): void {\n\t\tsuper.setLanguageId(languageId, source);\n\n\t\tthis.preferredLanguageId = languageId;\n\t}\n\n\t//#region Backup\n\n\tasync backup(token: CancellationToken): Promise<IWorkingCopyBackup> {\n\n\t\t// Fill in metadata if we are resolved\n\t\tlet meta: IBackupMetaData | undefined = undefined;\n\t\tif (this.lastResolvedFileStat) {\n\t\t\tmeta = {\n\t\t\t\tmtime: this.lastResolvedFileStat.mtime,\n\t\t\t\tctime: this.lastResolvedFileStat.ctime,\n\t\t\t\tsize: this.lastResolvedFileStat.size,\n\t\t\t\tetag: this.lastResolvedFileStat.etag,\n\t\t\t\torphaned: this.inOrphanMode\n\t\t\t};\n\t\t}\n\n\t\t// Fill in content the same way we would do when\n\t\t// saving the file via the text file service\n\t\t// encoding support (hardcode UTF-8)\n\t\tconst content = await this.textFileService.getEncodedReadable(this.resource, this.createSnapshot() ?? undefined, { encoding: UTF8 });\n\n\t\treturn { meta, content };\n\t}\n\n\t//#endregion\n\n\t//#region Revert\n\n\tasync revert(options?: IRevertOptions): Promise<void> {\n\t\tif (!this.isResolved()) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Unset flags\n\t\tconst wasDirty = this.dirty;\n\t\tconst undo = this.doSetDirty(false);\n\n\t\t// Force read from disk unless reverting soft\n\t\tconst softUndo = options?.soft;\n\t\tif (!softUndo) {\n\t\t\ttry {\n\t\t\t\tawait this.forceResolveFromFile();\n\t\t\t} catch (error) {\n\n\t\t\t\t// FileNotFound means the file got deleted meanwhile, so ignore it\n\t\t\t\tif ((<FileOperationError>error).fileOperationResult !== FileOperationResult.FILE_NOT_FOUND) {\n\n\t\t\t\t\t// Set flags back to previous values, we are still dirty if revert failed\n\t\t\t\t\tundo();\n\n\t\t\t\t\tthrow error;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Emit file change event\n\t\tthis._onDidRevert.fire();\n\n\t\t// Emit dirty change event\n\t\tif (wasDirty) {\n\t\t\tthis._onDidChangeDirty.fire();\n\t\t}\n\t}\n\n\t//#endregion\n\n\t//#region Resolve\n\n\toverride async resolve(options?: ITextFileResolveOptions): Promise<void> {\n\t\tthis.trace('resolve() - enter');\n\t\tmark('code/willResolveTextFileEditorModel');\n\n\t\t// Return early if we are disposed\n\t\tif (this.isDisposed()) {\n\t\t\tthis.trace('resolve() - exit - without resolving because model is disposed');\n\n\t\t\treturn;\n\t\t}\n\n\t\t// Unless there are explicit contents provided, it is important that we do not\n\t\t// resolve a model that is dirty or is in the process of saving to prevent data\n\t\t// loss.\n\t\tif (!options?.contents && (this.dirty || this.saveSequentializer.isRunning())) {\n\t\t\tthis.trace('resolve() - exit - without resolving because model is dirty or being saved');\n\n\t\t\treturn;\n\t\t}\n\n\t\t// Resolve either from backup or from file\n\t\tawait this.doResolve(options);\n\n\t\tmark('code/didResolveTextFileEditorModel');\n\t}\n\n\tprivate async doResolve(options?: ITextFileResolveOptions): Promise<void> {\n\n\t\t// First check if we have contents to use for the model\n\t\tif (options?.contents) {\n\t\t\treturn this.resolveFromBuffer(options.contents, options);\n\t\t}\n\n\t\t// Second, check if we have a backup to resolve from (only for new models)\n\t\tconst isNewModel = !this.isResolved();\n\t\tif (isNewModel) {\n\t\t\tconst resolvedFromBackup = await this.resolveFromBackup(options);\n\t\t\tif (resolvedFromBackup) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\t// Finally, resolve from file resource\n\t\treturn this.resolveFromFile(options);\n\t}\n\n\tprivate async resolveFromBuffer(buffer: ITextBufferFactory, options?: ITextFileResolveOptions): Promise<void> {\n\t\tthis.trace('resolveFromBuffer()');\n\n\t\t// Try to resolve metdata from disk\n\t\tlet mtime: number;\n\t\tlet ctime: number;\n\t\tlet size: number;\n\t\tlet etag: string;\n\t\ttry {\n\t\t\tconst metadata = await this.fileService.stat(this.resource);\n\t\t\tmtime = metadata.mtime;\n\t\t\tctime = metadata.ctime;\n\t\t\tsize = metadata.size;\n\t\t\tetag = metadata.etag;\n\n\t\t\t// Clear orphaned state when resolving was successful\n\t\t\tthis.setOrphaned(false);\n\t\t} catch (error) {\n\n\t\t\t// Put some fallback values in error case\n\t\t\tmtime = Date.now();\n\t\t\tctime = Date.now();\n\t\t\tsize = 0;\n\t\t\tetag = ETAG_DISABLED;\n\n\t\t\t// Apply orphaned state based on error code\n\t\t\tthis.setOrphaned(error.fileOperationResult === FileOperationResult.FILE_NOT_FOUND);\n\t\t}\n\n\t\tconst preferredEncoding = await this.textFileService.encoding.getPreferredWriteEncoding(this.resource, this.preferredEncoding);\n\n\t\t// Resolve with buffer\n\t\tthis.resolveFromContent({\n\t\t\tresource: this.resource,\n\t\t\tname: this.name,\n\t\t\tmtime,\n\t\t\tctime,\n\t\t\tsize,\n\t\t\tetag,\n\t\t\tvalue: buffer,\n\t\t\tencoding: preferredEncoding.encoding,\n\t\t\treadonly: false,\n\t\t\tlocked: false\n\t\t}, true /* dirty (resolved from buffer) */, options);\n\t}\n\n\tprivate async resolveFromBackup(options?: ITextFileResolveOptions): Promise<boolean> {\n\n\t\t// Resolve backup if any\n\t\tconst backup = await this.workingCopyBackupService.resolve<IBackupMetaData>(this);\n\n\t\t// Resolve preferred encoding if we need it\n\t\tlet encoding = UTF8;\n\t\tif (backup) {\n\t\t\tencoding = (await this.textFileService.encoding.getPreferredWriteEncoding(this.resource, this.preferredEncoding)).encoding;\n\t\t}\n\n\t\t// Abort if someone else managed to resolve the model by now\n\t\tconst isNewModel = !this.isResolved();\n\t\tif (!isNewModel) {\n\t\t\tthis.trace('resolveFromBackup() - exit - without resolving because previously new model got created meanwhile');\n\n\t\t\treturn true; // imply that resolving has happened in another operation\n\t\t}\n\n\t\t// Try to resolve from backup if we have any\n\t\tif (backup) {\n\t\t\tawait this.doResolveFromBackup(backup, encoding, options);\n\n\t\t\treturn true;\n\t\t}\n\n\t\t// Otherwise signal back that resolving did not happen\n\t\treturn false;\n\t}\n\n\tprivate async doResolveFromBackup(backup: IResolvedWorkingCopyBackup<IBackupMetaData>, encoding: string, options?: ITextFileResolveOptions): Promise<void> {\n\t\tthis.trace('doResolveFromBackup()');\n\n\t\t// Resolve with backup\n\t\tthis.resolveFromContent({\n\t\t\tresource: this.resource,\n\t\t\tname: this.name,\n\t\t\tmtime: backup.meta ? backup.meta.mtime : Date.now(),\n\t\t\tctime: backup.meta ? backup.meta.ctime : Date.now(),\n\t\t\tsize: backup.meta ? backup.meta.size : 0,\n\t\t\tetag: backup.meta ? backup.meta.etag : ETAG_DISABLED, // etag disabled if unknown!\n\t\t\tvalue: await createTextBufferFactoryFromStream(await this.textFileService.getDecodedStream(this.resource, backup.value, { encoding: UTF8 })),\n\t\t\tencoding,\n\t\t\treadonly: false,\n\t\t\tlocked: false\n\t\t}, true /* dirty (resolved from backup) */, options);\n\n\t\t// Restore orphaned flag based on state\n\t\tif (backup.meta?.orphaned) {\n\t\t\tthis.setOrphaned(true);\n\t\t}\n\t}\n\n\tprivate async resolveFromFile(options?: ITextFileResolveOptions): Promise<void> {\n\t\tthis.trace('resolveFromFile()');\n\n\t\tconst forceReadFromFile = options?.forceReadFromFile;\n\t\tconst allowBinary = this.isResolved() /* always allow if we resolved previously */ || options?.allowBinary;\n\n\t\t// Decide on etag\n\t\tlet etag: string | undefined;\n\t\tif (forceReadFromFile) {\n\t\t\tetag = ETAG_DISABLED; // disable ETag if we enforce to read from disk\n\t\t} else if (this.lastResolvedFileStat) {\n\t\t\tetag = this.lastResolvedFileStat.etag; // otherwise respect etag to support caching\n\t\t}\n\n\t\t// Remember current version before doing any long running operation\n\t\t// to ensure we are not changing a model that was changed meanwhile\n\t\tconst currentVersionId = this.versionId;\n\n\t\t// Resolve Content\n\t\ttry {\n\t\t\tconst content = await this.textFileService.readStream(this.resource, {\n\t\t\t\tacceptTextOnly: !allowBinary,\n\t\t\t\tetag,\n\t\t\t\tencoding: this.preferredEncoding,\n\t\t\t\tlimits: options?.limits\n\t\t\t});\n\n\t\t\t// Clear orphaned state when resolving was successful\n\t\t\tthis.setOrphaned(false);\n\n\t\t\t// Return early if the model content has changed\n\t\t\t// meanwhile to prevent loosing any changes\n\t\t\tif (currentVersionId !== this.versionId) {\n\t\t\t\tthis.trace('resolveFromFile() - exit - without resolving because model content changed');\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\treturn this.resolveFromContent(content, false /* not dirty (resolved from file) */, options);\n\t\t} catch (error) {\n\t\t\tconst result = error.fileOperationResult;\n\n\t\t\t// Apply orphaned state based on error code\n\t\t\tthis.setOrphaned(result === FileOperationResult.FILE_NOT_FOUND);\n\n\t\t\t// NotModified status is expected and can be handled gracefully\n\t\t\t// if we are resolved. We still want to update our last resolved\n\t\t\t// stat to e.g. detect changes to the file's readonly state\n\t\t\tif (this.isResolved() && result === FileOperationResult.FILE_NOT_MODIFIED_SINCE) {\n\t\t\t\tif (error instanceof NotModifiedSinceFileOperationError) {\n\t\t\t\t\tthis.updateLastResolvedFileStat(error.stat);\n\t\t\t\t}\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Unless we are forced to read from the file, Ignore when a model has been resolved once\n\t\t\t// and the file was deleted meanwhile. Since we already have the model resolved, we can return\n\t\t\t// to this state and update the orphaned flag to indicate that this model has no version on\n\t\t\t// disk anymore.\n\t\t\tif (this.isResolved() && result === FileOperationResult.FILE_NOT_FOUND && !forceReadFromFile) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Otherwise bubble up the error\n\t\t\tthrow error;\n\t\t}\n\t}\n\n\tprivate resolveFromContent(content: ITextFileStreamContent, dirty: boolean, options?: ITextFileResolveOptions): void {\n\t\tthis.trace('resolveFromContent() - enter');\n\n\t\t// Return early if we are disposed\n\t\tif (this.isDisposed()) {\n\t\t\tthis.trace('resolveFromContent() - exit - because model is disposed');\n\n\t\t\treturn;\n\t\t}\n\n\t\t// Update our resolved disk stat model\n\t\tthis.updateLastResolvedFileStat({\n\t\t\tresource: this.resource,\n\t\t\tname: content.name,\n\t\t\tmtime: content.mtime,\n\t\t\tctime: content.ctime,\n\t\t\tsize: content.size,\n\t\t\tetag: content.etag,\n\t\t\treadonly: content.readonly,\n\t\t\tlocked: content.locked,\n\t\t\tisFile: true,\n\t\t\tisDirectory: false,\n\t\t\tisSymbolicLink: false,\n\t\t\tchildren: undefined\n\t\t});\n\n\t\t// Keep the original encoding to not loose it when saving\n\t\tconst oldEncoding = this.contentEncoding;\n\t\tthis.contentEncoding = content.encoding;\n\n\t\t// Handle events if encoding changed\n\t\tif (this.preferredEncoding) {\n\t\t\tthis.updatePreferredEncoding(this.contentEncoding); // make sure to reflect the real encoding of the file (never out of sync)\n\t\t} else if (oldEncoding !== this.contentEncoding) {\n\t\t\tthis._onDidChangeEncoding.fire();\n\t\t}\n\n\t\t// Update Existing Model\n\t\tif (this.textEditorModel) {\n\t\t\tthis.doUpdateTextModel(content.value);\n\t\t}\n\n\t\t// Create New Model\n\t\telse {\n\t\t\tthis.doCreateTextModel(content.resource, content.value);\n\t\t}\n\n\t\t// Update model dirty flag. This is very important to call\n\t\t// in both cases of dirty or not because it conditionally\n\t\t// updates the `bufferSavedVersionId` to determine the\n\t\t// version when to consider the model as saved again (e.g.\n\t\t// when undoing back to the saved state)\n\t\tthis.setDirty(!!dirty);\n\n\t\t// Emit as event\n\t\tthis._onDidResolve.fire(options?.reason ?? TextFileResolveReason.OTHER);\n\t}\n\n\tprivate doCreateTextModel(resource: URI, value: ITextBufferFactory): void {\n\t\tthis.trace('doCreateTextModel()');\n\n\t\t// Create model\n\t\tconst textModel = this.createTextEditorModel(value, resource, this.preferredLanguageId);\n\n\t\t// Model Listeners\n\t\tthis.installModelListeners(textModel);\n\n\t\t// Detect language from content\n\t\tthis.autoDetectLanguage();\n\t}\n\n\tprivate doUpdateTextModel(value: ITextBufferFactory): void {\n\t\tthis.trace('doUpdateTextModel()');\n\n\t\t// Update model value in a block that ignores content change events for dirty tracking\n\t\tthis.ignoreDirtyOnModelContentChange = true;\n\t\ttry {\n\t\t\tthis.updateTextEditorModel(value, this.preferredLanguageId);\n\t\t} finally {\n\t\t\tthis.ignoreDirtyOnModelContentChange = false;\n\t\t}\n\t}\n\n\tprotected override installModelListeners(model: ITextModel): void {\n\n\t\t// See https://github.com/microsoft/vscode/issues/30189\n\t\t// This code has been extracted to a different method because it caused a memory leak\n\t\t// where `value` was captured in the content change listener closure scope.\n\n\t\tthis._register(model.onDidChangeContent(e => this.onModelContentChanged(model, e.isUndoing || e.isRedoing)));\n\t\tthis._register(model.onDidChangeLanguage(() => this.onMaybeShouldChangeEncoding())); // detect possible encoding change via language specific settings\n\n\t\tsuper.installModelListeners(model);\n\t}\n\n\tprivate onModelContentChanged(model: ITextModel, isUndoingOrRedoing: boolean): void {\n\t\tthis.trace(`onModelContentChanged() - enter`);\n\n\t\t// In any case increment the version id because it tracks the textual content state of the model at all times\n\t\tthis.versionId++;\n\t\tthis.trace(`onModelContentChanged() - new versionId ${this.versionId}`);\n\n\t\t// Remember when the user changed the model through a undo/redo operation.\n\t\t// We need this information to throttle save participants to fix\n\t\t// https://github.com/microsoft/vscode/issues/102542\n\t\tif (isUndoingOrRedoing) {\n\t\t\tthis.lastModelContentChangeFromUndoRedo = Date.now();\n\t\t}\n\n\t\t// We mark check for a dirty-state change upon model content change, unless:\n\t\t// - explicitly instructed to ignore it (e.g. from model.resolve())\n\t\t// - the model is readonly (in that case we never assume the change was done by the user)\n\t\tif (!this.ignoreDirtyOnModelContentChange && !this.isReadonly()) {\n\n\t\t\t// The contents changed as a matter of Undo and the version reached matches the saved one\n\t\t\t// In this case we clear the dirty flag and emit a SAVED event to indicate this state.\n\t\t\tif (model.getAlternativeVersionId() === this.bufferSavedVersionId) {\n\t\t\t\tthis.trace('onModelContentChanged() - model content changed back to last saved version');\n\n\t\t\t\t// Clear flags\n\t\t\t\tconst wasDirty = this.dirty;\n\t\t\t\tthis.setDirty(false);\n\n\t\t\t\t// Emit revert event if we were dirty\n\t\t\t\tif (wasDirty) {\n\t\t\t\t\tthis._onDidRevert.fire();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Otherwise the content has changed and we signal this as becoming dirty\n\t\t\telse {\n\t\t\t\tthis.trace('onModelContentChanged() - model content changed and marked as dirty');\n\n\t\t\t\t// Mark as dirty\n\t\t\t\tthis.setDirty(true);\n\t\t\t}\n\t\t}\n\n\t\t// Emit as event\n\t\tthis._onDidChangeContent.fire();\n\n\t\t// Detect language from content\n\t\tthis.autoDetectLanguage();\n\t}\n\n\tprotected override async autoDetectLanguage(): Promise<void> {\n\n\t\t// Wait to be ready to detect language\n\t\tawait this.extensionService?.whenInstalledExtensionsRegistered();\n\n\t\t// Only perform language detection conditionally\n\t\tconst languageId = this.getLanguageId();\n\t\tif (\n\t\t\tthis.resource.scheme === this.pathService.defaultUriScheme &&\t// make sure to not detect language for non-user visible documents\n\t\t\t(!languageId || languageId === PLAINTEXT_LANGUAGE_ID) &&\t\t// only run on files with plaintext language set or no language set at all\n\t\t\t!this.resourceHasExtension\t\t\t\t\t\t\t\t\t\t// only run if this particular file doesn't have an extension\n\t\t) {\n\t\t\treturn super.autoDetectLanguage();\n\t\t}\n\t}\n\n\tprivate async forceResolveFromFile(): Promise<void> {\n\t\tif (this.isDisposed()) {\n\t\t\treturn; // return early when the model is invalid\n\t\t}\n\n\t\t// We go through the text file service to make\n\t\t// sure this kind of `resolve` is properly\n\t\t// running in sequence with any other running\n\t\t// `resolve` if any, including subsequent runs\n\t\t// that are triggered right after.\n\n\t\tawait this.textFileService.files.resolve(this.resource, {\n\t\t\treload: { async: false },\n\t\t\tforceReadFromFile: true\n\t\t});\n\t}\n\n\t//#endregion\n\n\t//#region Dirty\n\n\tisDirty(): this is IResolvedTextFileEditorModel {\n\t\treturn this.dirty;\n\t}\n\n\tisModified(): boolean {\n\t\treturn this.isDirty();\n\t}\n\n\tsetDirty(dirty: boolean): void {\n\t\tif (!this.isResolved()) {\n\t\t\treturn; // only resolved models can be marked dirty\n\t\t}\n\n\t\t// Track dirty state and version id\n\t\tconst wasDirty = this.dirty;\n\t\tthis.doSetDirty(dirty);\n\n\t\t// Emit as Event if dirty changed\n\t\tif (dirty !== wasDirty) {\n\t\t\tthis._onDidChangeDirty.fire();\n\t\t}\n\t}\n\n\tprivate doSetDirty(dirty: boolean): () => void {\n\t\tconst wasDirty = this.dirty;\n\t\tconst wasInConflictMode = this.inConflictMode;\n\t\tconst wasInErrorMode = this.inErrorMode;\n\t\tconst oldBufferSavedVersionId = this.bufferSavedVersionId;\n\n\t\tif (!dirty) {\n\t\t\tthis.dirty = false;\n\t\t\tthis.inConflictMode = false;\n\t\t\tthis.inErrorMode = false;\n\t\t\tthis.updateSavedVersionId();\n\t\t} else {\n\t\t\tthis.dirty = true;\n\t\t}\n\n\t\t// Return function to revert this call\n\t\treturn () => {\n\t\t\tthis.dirty = wasDirty;\n\t\t\tthis.inConflictMode = wasInConflictMode;\n\t\t\tthis.inErrorMode = wasInErrorMode;\n\t\t\tthis.bufferSavedVersionId = oldBufferSavedVersionId;\n\t\t};\n\t}\n\n\t//#endregion\n\n\t//#region Save\n\n\tasync save(options: ITextFileSaveAsOptions = Object.create(null)): Promise<boolean> {\n\t\tif (!this.isResolved()) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (this.isReadonly()) {\n\t\t\tthis.trace('save() - ignoring request for readonly resource');\n\n\t\t\treturn false; // if model is readonly we do not attempt to save at all\n\t\t}\n\n\t\tif (\n\t\t\t(this.hasState(TextFileEditorModelState.CONFLICT) || this.hasState(TextFileEditorModelState.ERROR)) &&\n\t\t\t(options.reason === SaveReason.AUTO || options.reason === SaveReason.FOCUS_CHANGE || options.reason === SaveReason.WINDOW_CHANGE)\n\t\t) {\n\t\t\tthis.trace('save() - ignoring auto save request for model that is in conflict or error');\n\n\t\t\treturn false; // if model is in save conflict or error, do not save unless save reason is explicit\n\t\t}\n\n\t\t// Actually do save and log\n\t\tthis.trace('save() - enter');\n\t\tawait this.doSave(options);\n\t\tthis.trace('save() - exit');\n\n\t\treturn this.hasState(TextFileEditorModelState.SAVED);\n\t}\n\n\tprivate async doSave(options: ITextFileSaveAsOptions): Promise<void> {\n\t\tif (typeof options.reason !== 'number') {\n\t\t\toptions.reason = SaveReason.EXPLICIT;\n\t\t}\n\n\t\tconst versionId = this.versionId;\n\t\tthis.trace(`doSave(${versionId}) - enter with versionId ${versionId}`);\n\n\t\t// Return early if saved from within save participant to break recursion\n\t\t//\n\t\t// Scenario: a save participant triggers a save() on the model\n\t\tif (this.ignoreSaveFromSaveParticipants) {\n\t\t\tthis.trace(`doSave(${versionId}) - exit - refusing to save() recursively from save participant`);\n\n\t\t\treturn;\n\t\t}\n\n\t\t// Lookup any running save for this versionId and return it if found\n\t\t//\n\t\t// Scenario: user invoked the save action multiple times quickly for the same contents\n\t\t//           while the save was not yet finished to disk\n\t\t//\n\t\tif (this.saveSequentializer.isRunning(versionId)) {\n\t\t\tthis.trace(`doSave(${versionId}) - exit - found a running save for versionId ${versionId}`);\n\n\t\t\treturn this.saveSequentializer.running;\n\t\t}\n\n\t\t// Return early if not dirty (unless forced)\n\t\t//\n\t\t// Scenario: user invoked save action even though the model is not dirty\n\t\tif (!options.force && !this.dirty) {\n\t\t\tthis.trace(`doSave(${versionId}) - exit - because not dirty and/or versionId is different (this.isDirty: ${this.dirty}, this.versionId: ${this.versionId})`);\n\n\t\t\treturn;\n\t\t}\n\n\t\t// Return if currently saving by storing this save request as the next save that should happen.\n\t\t// Never ever must 2 saves execute at the same time because this can lead to dirty writes and race conditions.\n\t\t//\n\t\t// Scenario A: auto save was triggered and is currently busy saving to disk. this takes long enough that another auto save\n\t\t//             kicks in.\n\t\t// Scenario B: save is very slow (e.g. network share) and the user manages to change the buffer and trigger another save\n\t\t//             while the first save has not returned yet.\n\t\t//\n\t\tif (this.saveSequentializer.isRunning()) {\n\t\t\tthis.trace(`doSave(${versionId}) - exit - because busy saving`);\n\n\t\t\t// Indicate to the save sequentializer that we want to\n\t\t\t// cancel the running operation so that ours can run\n\t\t\t// before the running one finishes.\n\t\t\t// Currently this will try to cancel running save\n\t\t\t// participants but never a running save.\n\t\t\tthis.saveSequentializer.cancelRunning();\n\n\t\t\t// Queue this as the upcoming save and return\n\t\t\treturn this.saveSequentializer.queue(() => this.doSave(options));\n\t\t}\n\n\t\t// Push all edit operations to the undo stack so that the user has a chance to\n\t\t// Ctrl+Z back to the saved version.\n\t\tif (this.isResolved()) {\n\t\t\tthis.textEditorModel.pushStackElement();\n\t\t}\n\n\t\tconst saveCancellation = new CancellationTokenSource();\n\n\t\treturn this.progressService.withProgress({\n\t\t\ttitle: localize('saveParticipants', \"Saving '{0}'\", this.name),\n\t\t\tlocation: ProgressLocation.Window,\n\t\t\tcancellable: true,\n\t\t\tdelay: this.isDirty() ? 3000 : 5000\n\t\t}, progress => {\n\t\t\treturn this.doSaveSequential(versionId, options, progress, saveCancellation);\n\t\t}, () => {\n\t\t\tsaveCancellation.cancel();\n\t\t}).finally(() => {\n\t\t\tsaveCancellation.dispose();\n\t\t});\n\t}\n\n\tprivate doSaveSequential(versionId: number, options: ITextFileSaveAsOptions, progress: IProgress<IProgressStep>, saveCancellation: CancellationTokenSource): Promise<void> {\n\t\treturn this.saveSequentializer.run(versionId, (async () => {\n\n\t\t\t// A save participant can still change the model now and since we are so close to saving\n\t\t\t// we do not want to trigger another auto save or similar, so we block this\n\t\t\t// In addition we update our version right after in case it changed because of a model change\n\t\t\t//\n\t\t\t// Save participants can also be skipped through API.\n\t\t\tif (this.isResolved() && !options.skipSaveParticipants) {\n\t\t\t\ttry {\n\n\t\t\t\t\t// Measure the time it took from the last undo/redo operation to this save. If this\n\t\t\t\t\t// time is below `UNDO_REDO_SAVE_PARTICIPANTS_THROTTLE_THRESHOLD`, we make sure to\n\t\t\t\t\t// delay the save participant for the remaining time if the reason is auto save.\n\t\t\t\t\t//\n\t\t\t\t\t// This fixes the following issue:\n\t\t\t\t\t// - the user has configured auto save with delay of 100ms or shorter\n\t\t\t\t\t// - the user has a save participant enabled that modifies the file on each save\n\t\t\t\t\t// - the user types into the file and the file gets saved\n\t\t\t\t\t// - the user triggers undo operation\n\t\t\t\t\t// - this will undo the save participant change but trigger the save participant right after\n\t\t\t\t\t// - the user has no chance to undo over the save participant\n\t\t\t\t\t//\n\t\t\t\t\t// Reported as: https://github.com/microsoft/vscode/issues/102542\n\t\t\t\t\tif (options.reason === SaveReason.AUTO && typeof this.lastModelContentChangeFromUndoRedo === 'number') {\n\t\t\t\t\t\tconst timeFromUndoRedoToSave = Date.now() - this.lastModelContentChangeFromUndoRedo;\n\t\t\t\t\t\tif (timeFromUndoRedoToSave < TextFileEditorModel.UNDO_REDO_SAVE_PARTICIPANTS_AUTO_SAVE_THROTTLE_THRESHOLD) {\n\t\t\t\t\t\t\tawait timeout(TextFileEditorModel.UNDO_REDO_SAVE_PARTICIPANTS_AUTO_SAVE_THROTTLE_THRESHOLD - timeFromUndoRedoToSave);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// Run save participants unless save was cancelled meanwhile\n\t\t\t\t\tif (!saveCancellation.token.isCancellationRequested) {\n\t\t\t\t\t\tthis.ignoreSaveFromSaveParticipants = true;\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tawait this.textFileService.files.runSaveParticipants(this, { reason: options.reason ?? SaveReason.EXPLICIT, savedFrom: options.from }, progress, saveCancellation.token);\n\t\t\t\t\t\t} finally {\n\t\t\t\t\t\t\tthis.ignoreSaveFromSaveParticipants = false;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} catch (error) {\n\t\t\t\t\tthis.logService.error(`[text file model] runSaveParticipants(${versionId}) - resulted in an error: ${error.toString()}`, this.resource.toString());\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// It is possible that a subsequent save is cancelling this\n\t\t\t// running save. As such we return early when we detect that\n\t\t\t// However, we do not pass the token into the file service\n\t\t\t// because that is an atomic operation currently without\n\t\t\t// cancellation support, so we dispose the cancellation if\n\t\t\t// it was not cancelled yet.\n\t\t\tif (saveCancellation.token.isCancellationRequested) {\n\t\t\t\treturn;\n\t\t\t} else {\n\t\t\t\tsaveCancellation.dispose();\n\t\t\t}\n\n\t\t\t// We have to protect against being disposed at this point. It could be that the save() operation\n\t\t\t// was triggerd followed by a dispose() operation right after without waiting. Typically we cannot\n\t\t\t// be disposed if we are dirty, but if we are not dirty, save() and dispose() can still be triggered\n\t\t\t// one after the other without waiting for the save() to complete. If we are disposed(), we risk\n\t\t\t// saving contents to disk that are stale (see https://github.com/microsoft/vscode/issues/50942).\n\t\t\t// To fix this issue, we will not store the contents to disk when we got disposed.\n\t\t\tif (this.isDisposed()) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// We require a resolved model from this point on, since we are about to write data to disk.\n\t\t\tif (!this.isResolved()) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// update versionId with its new value (if pre-save changes happened)\n\t\t\tversionId = this.versionId;\n\n\t\t\t// Clear error flag since we are trying to save again\n\t\t\tthis.inErrorMode = false;\n\n\t\t\t// Save to Disk. We mark the save operation as currently running with\n\t\t\t// the latest versionId because it might have changed from a save\n\t\t\t// participant triggering\n\t\t\tprogress.report({ message: localize('saveTextFile', \"Writing into file...\") });\n\t\t\tthis.trace(`doSave(${versionId}) - before write()`);\n\t\t\tconst lastResolvedFileStat = assertIsDefined(this.lastResolvedFileStat);\n\t\t\tconst resolvedTextFileEditorModel = this;\n\t\t\treturn this.saveSequentializer.run(versionId, (async () => {\n\t\t\t\ttry {\n\t\t\t\t\tconst stat = await this.textFileService.write(lastResolvedFileStat.resource, resolvedTextFileEditorModel.createSnapshot(), {\n\t\t\t\t\t\tmtime: lastResolvedFileStat.mtime,\n\t\t\t\t\t\tencoding: this.getEncoding(),\n\t\t\t\t\t\tetag: (options.ignoreModifiedSince || !this.filesConfigurationService.preventSaveConflicts(lastResolvedFileStat.resource, resolvedTextFileEditorModel.getLanguageId())) ? ETAG_DISABLED : lastResolvedFileStat.etag,\n\t\t\t\t\t\tunlock: options.writeUnlock,\n\t\t\t\t\t\twriteElevated: options.writeElevated\n\t\t\t\t\t});\n\n\t\t\t\t\tthis.handleSaveSuccess(stat, versionId, options);\n\t\t\t\t} catch (error) {\n\t\t\t\t\tthis.handleSaveError(error, versionId, options);\n\t\t\t\t}\n\t\t\t})());\n\t\t})(), () => saveCancellation.cancel());\n\t}\n\n\tprivate handleSaveSuccess(stat: IFileStatWithMetadata, versionId: number, options: ITextFileSaveAsOptions): void {\n\n\t\t// Updated resolved stat with updated stat\n\t\tthis.updateLastResolvedFileStat(stat);\n\n\t\t// Update dirty state unless model has changed meanwhile\n\t\tif (versionId === this.versionId) {\n\t\t\tthis.trace(`handleSaveSuccess(${versionId}) - setting dirty to false because versionId did not change`);\n\t\t\tthis.setDirty(false);\n\t\t} else {\n\t\t\tthis.trace(`handleSaveSuccess(${versionId}) - not setting dirty to false because versionId did change meanwhile`);\n\t\t}\n\n\t\t// Update orphan state given save was successful\n\t\tthis.setOrphaned(false);\n\n\t\t// Emit Save Event\n\t\tthis._onDidSave.fire({ reason: options.reason, stat, source: options.source });\n\t}\n\n\tprivate handleSaveError(error: Error, versionId: number, options: ITextFileSaveAsOptions): void {\n\t\t(options.ignoreErrorHandler ? this.logService.trace : this.logService.error).apply(this.logService, [`[text file model] handleSaveError(${versionId}) - exit - resulted in a save error: ${error.toString()}`, this.resource.toString()]);\n\n\t\t// Return early if the save() call was made asking to\n\t\t// handle the save error itself.\n\t\tif (options.ignoreErrorHandler) {\n\t\t\tthrow error;\n\t\t}\n\n\t\t// In any case of an error, we mark the model as dirty to prevent data loss\n\t\t// It could be possible that the write corrupted the file on disk (e.g. when\n\t\t// an error happened after truncating the file) and as such we want to preserve\n\t\t// the model contents to prevent data loss.\n\t\tthis.setDirty(true);\n\n\t\t// Flag as error state in the model\n\t\tthis.inErrorMode = true;\n\n\t\t// Look out for a save conflict\n\t\tif ((<FileOperationError>error).fileOperationResult === FileOperationResult.FILE_MODIFIED_SINCE) {\n\t\t\tthis.inConflictMode = true;\n\t\t}\n\n\t\t// Show to user\n\t\tthis.textFileService.files.saveErrorHandler.onSaveError(error, this, options);\n\n\t\t// Emit as event\n\t\tthis._onDidSaveError.fire();\n\t}\n\n\tprivate updateSavedVersionId(): void {\n\t\t// we remember the models alternate version id to remember when the version\n\t\t// of the model matches with the saved version on disk. we need to keep this\n\t\t// in order to find out if the model changed back to a saved version (e.g.\n\t\t// when undoing long enough to reach to a version that is saved and then to\n\t\t// clear the dirty flag)\n\t\tif (this.isResolved()) {\n\t\t\tthis.bufferSavedVersionId = this.textEditorModel.getAlternativeVersionId();\n\t\t}\n\t}\n\n\tprivate updateLastResolvedFileStat(newFileStat: IFileStatWithMetadata): void {\n\t\tconst oldReadonly = this.isReadonly();\n\n\t\t// First resolve - just take\n\t\tif (!this.lastResolvedFileStat) {\n\t\t\tthis.lastResolvedFileStat = newFileStat;\n\t\t}\n\n\t\t// Subsequent resolve - make sure that we only assign it if the mtime is equal or has advanced.\n\t\t// This prevents race conditions from resolving and saving. If a save comes in late after a revert\n\t\t// was called, the mtime could be out of sync.\n\t\telse if (this.lastResolvedFileStat.mtime <= newFileStat.mtime) {\n\t\t\tthis.lastResolvedFileStat = newFileStat;\n\t\t}\n\n\t\t// In all other cases update only the readonly and locked flags\n\t\telse {\n\t\t\tthis.lastResolvedFileStat = { ...this.lastResolvedFileStat, readonly: newFileStat.readonly, locked: newFileStat.locked };\n\t\t}\n\n\t\t// Signal that the readonly state changed\n\t\tif (this.isReadonly() !== oldReadonly) {\n\t\t\tthis._onDidChangeReadonly.fire();\n\t\t}\n\t}\n\n\t//#endregion\n\n\thasState(state: TextFileEditorModelState): boolean {\n\t\tswitch (state) {\n\t\t\tcase TextFileEditorModelState.CONFLICT:\n\t\t\t\treturn this.inConflictMode;\n\t\t\tcase TextFileEditorModelState.DIRTY:\n\t\t\t\treturn this.dirty;\n\t\t\tcase TextFileEditorModelState.ERROR:\n\t\t\t\treturn this.inErrorMode;\n\t\t\tcase TextFileEditorModelState.ORPHAN:\n\t\t\t\treturn this.inOrphanMode;\n\t\t\tcase TextFileEditorModelState.PENDING_SAVE:\n\t\t\t\treturn this.saveSequentializer.isRunning();\n\t\t\tcase TextFileEditorModelState.SAVED:\n\t\t\t\treturn !this.dirty;\n\t\t}\n\t}\n\n\tasync joinState(state: TextFileEditorModelState.PENDING_SAVE): Promise<void> {\n\t\treturn this.saveSequentializer.running;\n\t}\n\n\toverride getLanguageId(this: IResolvedTextFileEditorModel): string;\n\toverride getLanguageId(): string | undefined;\n\toverride getLanguageId(): string | undefined {\n\t\tif (this.textEditorModel) {\n\t\t\treturn this.textEditorModel.getLanguageId();\n\t\t}\n\n\t\treturn this.preferredLanguageId;\n\t}\n\n\t//#region Encoding\n\n\tprivate async onMaybeShouldChangeEncoding(): Promise<void> {\n\n\t\t// This is a bit of a hack but there is a narrow case where\n\t\t// per-language configured encodings are not working:\n\t\t//\n\t\t// On startup we may not yet have all languages resolved so\n\t\t// we pick a wrong encoding. We never used to re-apply the\n\t\t// encoding when the language was then resolved, because that\n\t\t// is an operation that is will have to fetch the contents\n\t\t// again from disk.\n\t\t//\n\t\t// To mitigate this issue, when we detect the model language\n\t\t// changes, we see if there is a specific encoding configured\n\t\t// for the new language and apply it, only if the model is\n\t\t// not dirty and only if the encoding was not explicitly set.\n\t\t//\n\t\t// (see https://github.com/microsoft/vscode/issues/127936)\n\n\t\tif (this.hasEncodingSetExplicitly) {\n\t\t\tthis.trace('onMaybeShouldChangeEncoding() - ignoring because encoding was set explicitly');\n\n\t\t\treturn; // never change the user's choice of encoding\n\t\t}\n\n\t\tif (this.contentEncoding === UTF8_with_bom || this.contentEncoding === UTF16be || this.contentEncoding === UTF16le) {\n\t\t\tthis.trace('onMaybeShouldChangeEncoding() - ignoring because content encoding has a BOM');\n\n\t\t\treturn; // never change an encoding that we can detect 100% via BOMs\n\t\t}\n\n\t\tconst { encoding } = await this.textFileService.encoding.getPreferredReadEncoding(this.resource);\n\t\tif (typeof encoding !== 'string' || !this.isNewEncoding(encoding)) {\n\t\t\tthis.trace(`onMaybeShouldChangeEncoding() - ignoring because preferred encoding ${encoding} is not new`);\n\n\t\t\treturn; // return early if encoding is invalid or did not change\n\t\t}\n\n\t\tif (this.isDirty()) {\n\t\t\tthis.trace('onMaybeShouldChangeEncoding() - ignoring because model is dirty');\n\n\t\t\treturn; // return early to prevent accident saves in this case\n\t\t}\n\n\t\tthis.logService.info(`Adjusting encoding based on configured language override to '${encoding}' for ${this.resource.toString(true)}.`);\n\n\t\t// Force resolve to pick up the new encoding\n\t\treturn this.forceResolveFromFile();\n\t}\n\n\tprivate hasEncodingSetExplicitly: boolean = false;\n\n\tsetEncoding(encoding: string, mode: EncodingMode): Promise<void> {\n\n\t\t// Remember that an explicit encoding was set\n\t\tthis.hasEncodingSetExplicitly = true;\n\n\t\treturn this.setEncodingInternal(encoding, mode);\n\t}\n\n\tprivate async setEncodingInternal(encoding: string, mode: EncodingMode): Promise<void> {\n\n\t\t// Encode: Save with encoding\n\t\tif (mode === EncodingMode.Encode) {\n\t\t\tthis.updatePreferredEncoding(encoding);\n\n\t\t\t// Save\n\t\t\tif (!this.isDirty()) {\n\t\t\t\tthis.versionId++; // needs to increment because we change the model potentially\n\t\t\t\tthis.setDirty(true);\n\t\t\t}\n\n\t\t\tif (!this.inConflictMode) {\n\t\t\t\tawait this.save({ source: TextFileEditorModel.TEXTFILE_SAVE_ENCODING_SOURCE });\n\t\t\t}\n\t\t}\n\n\t\t// Decode: Resolve with encoding\n\t\telse {\n\t\t\tif (!this.isNewEncoding(encoding)) {\n\t\t\t\treturn; // return early if the encoding is already the same\n\t\t\t}\n\n\t\t\tif (this.isDirty() && !this.inConflictMode) {\n\t\t\t\tawait this.save();\n\t\t\t}\n\n\t\t\tthis.updatePreferredEncoding(encoding);\n\n\t\t\tawait this.forceResolveFromFile();\n\t\t}\n\t}\n\n\tupdatePreferredEncoding(encoding: string | undefined): void {\n\t\tif (!this.isNewEncoding(encoding)) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.preferredEncoding = encoding;\n\n\t\t// Emit\n\t\tthis._onDidChangeEncoding.fire();\n\t}\n\n\tprivate isNewEncoding(encoding: string | undefined): boolean {\n\t\tif (this.preferredEncoding === encoding) {\n\t\t\treturn false; // return early if the encoding is already the same\n\t\t}\n\n\t\tif (!this.preferredEncoding && this.contentEncoding === encoding) {\n\t\t\treturn false; // also return if we don't have a preferred encoding but the content encoding is already the same\n\t\t}\n\n\t\treturn true;\n\t}\n\n\tgetEncoding(): string | undefined {\n\t\treturn this.preferredEncoding || this.contentEncoding;\n\t}\n\n\t//#endregion\n\n\tprivate trace(msg: string): void {\n\t\tthis.logService.trace(`[text file model] ${msg}`, this.resource.toString());\n\t}\n\n\toverride isResolved(): this is IResolvedTextFileEditorModel {\n\t\treturn !!this.textEditorModel;\n\t}\n\n\toverride isReadonly(): boolean | IMarkdownString {\n\t\treturn this.filesConfigurationService.isReadonly(this.resource, this.lastResolvedFileStat);\n\t}\n\n\toverride dispose(): void {\n\t\tthis.trace('dispose()');\n\n\t\tthis.inConflictMode = false;\n\t\tthis.inOrphanMode = false;\n\t\tthis.inErrorMode = false;\n\n\t\tsuper.dispose();\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
