{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/textfile/common/textEditorService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Event } from \"../../../../base/common/event.js\";\nimport { Disposable } from \"../../../../base/common/lifecycle.js\";\nimport { ResourceMap } from \"../../../../base/common/map.js\";\nimport { Schemas } from \"../../../../base/common/network.js\";\nimport { basename } from \"../../../../base/common/resources.js\";\nimport { URI } from \"../../../../base/common/uri.js\";\nimport { IFileService } from \"../../../../platform/files/common/files.js\";\nimport {\n\tInstantiationType,\n\tregisterSingleton,\n} from \"../../../../platform/instantiation/common/extensions.js\";\nimport {\n\tIInstantiationService,\n\tcreateDecorator,\n} from \"../../../../platform/instantiation/common/instantiation.js\";\nimport { Registry } from \"../../../../platform/registry/common/platform.js\";\nimport { IUriIdentityService } from \"../../../../platform/uriIdentity/common/uriIdentity.js\";\nimport {\n\tDEFAULT_EDITOR_ASSOCIATION,\n\tEditorExtensions,\n\ttype IEditorFactoryRegistry,\n\ttype IFileEditorInput,\n\ttype IUntitledTextResourceEditorInput,\n\ttype IUntypedEditorInput,\n\ttype IUntypedFileEditorInput,\n\tisResourceDiffEditorInput,\n\tisResourceMergeEditorInput,\n\tisResourceSideBySideEditorInput,\n} from \"../../../common/editor.js\";\nimport { DiffEditorInput } from \"../../../common/editor/diffEditorInput.js\";\nimport type { EditorInput } from \"../../../common/editor/editorInput.js\";\nimport { SideBySideEditorInput } from \"../../../common/editor/sideBySideEditorInput.js\";\nimport { TextResourceEditorInput } from \"../../../common/editor/textResourceEditorInput.js\";\nimport {\n\tIEditorResolverService,\n\tRegisteredEditorPriority,\n} from \"../../editor/common/editorResolverService.js\";\nimport { UntitledTextEditorInput } from \"../../untitled/common/untitledTextEditorInput.js\";\nimport type { IUntitledTextEditorModel } from \"../../untitled/common/untitledTextEditorModel.js\";\nimport {\n\ttype INewUntitledTextEditorOptions,\n\tIUntitledTextEditorService,\n} from \"../../untitled/common/untitledTextEditorService.js\";\n\nexport const ITextEditorService =\n\tcreateDecorator<ITextEditorService>(\"textEditorService\");\n\nexport interface ITextEditorService {\n\treadonly _serviceBrand: undefined;\n\n\t/**\n\t * @deprecated this method should not be used, rather consider using\n\t * `IEditorResolverService` instead with `DEFAULT_EDITOR_ASSOCIATION.id`.\n\t */\n\tcreateTextEditor(input: IUntypedEditorInput): EditorInput;\n\n\t/**\n\t * @deprecated this method should not be used, rather consider using\n\t * `IEditorResolverService` instead with `DEFAULT_EDITOR_ASSOCIATION.id`.\n\t */\n\tcreateTextEditor(input: IUntypedFileEditorInput): IFileEditorInput;\n\n\t/**\n\t * A way to create text editor inputs from an untyped editor input. Depending\n\t * on the passed in input this will be:\n\t * - a `IFileEditorInput` for file resources\n\t * - a `UntitledEditorInput` for untitled resources\n\t * - a `TextResourceEditorInput` for virtual resources\n\t *\n\t * @param input the untyped editor input to create a typed input from\n\t */\n\tresolveTextEditor(input: IUntypedEditorInput): Promise<EditorInput>;\n\tresolveTextEditor(\n\t\tinput: IUntypedFileEditorInput,\n\t): Promise<IFileEditorInput>;\n}\n\nexport class TextEditorService\n\textends Disposable\n\timplements ITextEditorService\n{\n\tdeclare readonly _serviceBrand: undefined;\n\n\tprivate readonly editorInputCache = new ResourceMap<\n\t\tTextResourceEditorInput | IFileEditorInput | UntitledTextEditorInput\n\t>();\n\n\tprivate readonly fileEditorFactory = Registry.as<IEditorFactoryRegistry>(\n\t\tEditorExtensions.EditorFactory,\n\t).getFileEditorFactory();\n\n\tconstructor(\n\t\t@IUntitledTextEditorService private readonly untitledTextEditorService: IUntitledTextEditorService,\n\t\t@IInstantiationService private readonly instantiationService: IInstantiationService,\n\t\t@IUriIdentityService private readonly uriIdentityService: IUriIdentityService,\n\t\t@IFileService private readonly fileService: IFileService,\n\t\t@IEditorResolverService private readonly editorResolverService: IEditorResolverService\n\t) {\n\t\tsuper();\n\n\t\t// Register the default editor to the editor resolver\n\t\t// service so that it shows up in the editors picker\n\t\tthis.registerDefaultEditor();\n\t}\n\n\tprivate registerDefaultEditor(): void {\n\t\tthis._register(\n\t\t\tthis.editorResolverService.registerEditor(\n\t\t\t\t\"*\",\n\t\t\t\t{\n\t\t\t\t\tid: DEFAULT_EDITOR_ASSOCIATION.id,\n\t\t\t\t\tlabel: DEFAULT_EDITOR_ASSOCIATION.displayName,\n\t\t\t\t\tdetail: DEFAULT_EDITOR_ASSOCIATION.providerDisplayName,\n\t\t\t\t\tpriority: RegisteredEditorPriority.builtin,\n\t\t\t\t},\n\t\t\t\t{},\n\t\t\t\t{\n\t\t\t\t\tcreateEditorInput: (editor) => ({\n\t\t\t\t\t\teditor: this.createTextEditor(editor),\n\t\t\t\t\t}),\n\t\t\t\t\tcreateUntitledEditorInput: (untitledEditor) => ({\n\t\t\t\t\t\teditor: this.createTextEditor(untitledEditor),\n\t\t\t\t\t}),\n\t\t\t\t\tcreateDiffEditorInput: (diffEditor) => ({\n\t\t\t\t\t\teditor: this.createTextEditor(diffEditor),\n\t\t\t\t\t}),\n\t\t\t\t},\n\t\t\t),\n\t\t);\n\t}\n\n\tresolveTextEditor(input: IUntypedEditorInput): Promise<EditorInput>;\n\tresolveTextEditor(\n\t\tinput: IUntypedFileEditorInput,\n\t): Promise<IFileEditorInput>;\n\tasync resolveTextEditor(\n\t\tinput: IUntypedEditorInput | IUntypedFileEditorInput,\n\t): Promise<EditorInput | IFileEditorInput> {\n\t\treturn this.createTextEditor(input);\n\t}\n\n\tcreateTextEditor(input: IUntypedEditorInput): EditorInput;\n\tcreateTextEditor(input: IUntypedFileEditorInput): IFileEditorInput;\n\tcreateTextEditor(\n\t\tinput: IUntypedEditorInput | IUntypedFileEditorInput,\n\t): EditorInput | IFileEditorInput {\n\t\t// Merge Editor Not Supported (we fallback to showing the result only)\n\t\tif (isResourceMergeEditorInput(input)) {\n\t\t\treturn this.createTextEditor(input.result);\n\t\t}\n\n\t\t// Diff Editor Support\n\t\tif (isResourceDiffEditorInput(input)) {\n\t\t\tconst original = this.createTextEditor(input.original);\n\t\t\tconst modified = this.createTextEditor(input.modified);\n\n\t\t\treturn this.instantiationService.createInstance(\n\t\t\t\tDiffEditorInput,\n\t\t\t\tinput.label,\n\t\t\t\tinput.description,\n\t\t\t\toriginal,\n\t\t\t\tmodified,\n\t\t\t\tundefined,\n\t\t\t);\n\t\t}\n\n\t\t// Side by Side Editor Support\n\t\tif (isResourceSideBySideEditorInput(input)) {\n\t\t\tconst primary = this.createTextEditor(input.primary);\n\t\t\tconst secondary = this.createTextEditor(input.secondary);\n\n\t\t\treturn this.instantiationService.createInstance(\n\t\t\t\tSideBySideEditorInput,\n\t\t\t\tinput.label,\n\t\t\t\tinput.description,\n\t\t\t\tsecondary,\n\t\t\t\tprimary,\n\t\t\t);\n\t\t}\n\n\t\t// Untitled text file support\n\t\tconst untitledInput = input as IUntitledTextResourceEditorInput;\n\t\tif (\n\t\t\tuntitledInput.forceUntitled ||\n\t\t\t!untitledInput.resource ||\n\t\t\tuntitledInput.resource.scheme === Schemas.untitled\n\t\t) {\n\t\t\tconst untitledOptions: Partial<INewUntitledTextEditorOptions> = {\n\t\t\t\tlanguageId: untitledInput.languageId,\n\t\t\t\tinitialValue: untitledInput.contents,\n\t\t\t\tencoding: untitledInput.encoding,\n\t\t\t};\n\n\t\t\t// Untitled resource: use as hint for an existing untitled editor\n\t\t\tlet untitledModel: IUntitledTextEditorModel;\n\t\t\tif (untitledInput.resource?.scheme === Schemas.untitled) {\n\t\t\t\tuntitledModel = this.untitledTextEditorService.create({\n\t\t\t\t\tuntitledResource: untitledInput.resource,\n\t\t\t\t\t...untitledOptions,\n\t\t\t\t});\n\t\t\t}\n\n\t\t\t// Other resource: use as hint for associated filepath\n\t\t\telse {\n\t\t\t\tuntitledModel = this.untitledTextEditorService.create({\n\t\t\t\t\tassociatedResource: untitledInput.resource,\n\t\t\t\t\t...untitledOptions,\n\t\t\t\t});\n\t\t\t}\n\n\t\t\treturn this.createOrGetCached(untitledModel.resource, () =>\n\t\t\t\tthis.instantiationService.createInstance(\n\t\t\t\t\tUntitledTextEditorInput,\n\t\t\t\t\tuntitledModel,\n\t\t\t\t),\n\t\t\t);\n\t\t}\n\n\t\t// Text File/Resource Editor Support\n\t\tconst textResourceEditorInput = input as IUntypedFileEditorInput;\n\t\tif (textResourceEditorInput.resource instanceof URI) {\n\t\t\t// Derive the label from the path if not provided explicitly\n\t\t\tconst label =\n\t\t\t\ttextResourceEditorInput.label ||\n\t\t\t\tbasename(textResourceEditorInput.resource);\n\n\t\t\t// We keep track of the preferred resource this input is to be created\n\t\t\t// with but it may be different from the canonical resource (see below)\n\t\t\tconst preferredResource = textResourceEditorInput.resource;\n\n\t\t\t// From this moment on, only operate on the canonical resource\n\t\t\t// to ensure we reduce the chance of opening the same resource\n\t\t\t// with different resource forms (e.g. path casing on Windows)\n\t\t\tconst canonicalResource =\n\t\t\t\tthis.uriIdentityService.asCanonicalUri(preferredResource);\n\n\t\t\treturn this.createOrGetCached(\n\t\t\t\tcanonicalResource,\n\t\t\t\t() => {\n\t\t\t\t\t// File\n\t\t\t\t\tif (\n\t\t\t\t\t\ttextResourceEditorInput.forceFile ||\n\t\t\t\t\t\tthis.fileService.hasProvider(canonicalResource)\n\t\t\t\t\t) {\n\t\t\t\t\t\treturn this.fileEditorFactory.createFileEditor(\n\t\t\t\t\t\t\tcanonicalResource,\n\t\t\t\t\t\t\tpreferredResource,\n\t\t\t\t\t\t\ttextResourceEditorInput.label,\n\t\t\t\t\t\t\ttextResourceEditorInput.description,\n\t\t\t\t\t\t\ttextResourceEditorInput.encoding,\n\t\t\t\t\t\t\ttextResourceEditorInput.languageId,\n\t\t\t\t\t\t\ttextResourceEditorInput.contents,\n\t\t\t\t\t\t\tthis.instantiationService,\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\n\t\t\t\t\t// Resource\n\t\t\t\t\treturn this.instantiationService.createInstance(\n\t\t\t\t\t\tTextResourceEditorInput,\n\t\t\t\t\t\tcanonicalResource,\n\t\t\t\t\t\ttextResourceEditorInput.label,\n\t\t\t\t\t\ttextResourceEditorInput.description,\n\t\t\t\t\t\ttextResourceEditorInput.languageId,\n\t\t\t\t\t\ttextResourceEditorInput.contents,\n\t\t\t\t\t);\n\t\t\t\t},\n\t\t\t\t(cachedInput) => {\n\t\t\t\t\t// Untitled\n\t\t\t\t\tif (cachedInput instanceof UntitledTextEditorInput) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Files\n\t\t\t\t\telse if (cachedInput instanceof TextResourceEditorInput) {\n\t\t\t\t\t\tif (label) {\n\t\t\t\t\t\t\tcachedInput.setName(label);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (textResourceEditorInput.description) {\n\t\t\t\t\t\t\tcachedInput.setDescription(\n\t\t\t\t\t\t\t\ttextResourceEditorInput.description,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (textResourceEditorInput.languageId) {\n\t\t\t\t\t\t\tcachedInput.setPreferredLanguageId(\n\t\t\t\t\t\t\t\ttextResourceEditorInput.languageId,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\ttypeof textResourceEditorInput.contents === \"string\"\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\tcachedInput.setPreferredContents(\n\t\t\t\t\t\t\t\ttextResourceEditorInput.contents,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcachedInput.setPreferredResource(preferredResource);\n\n\t\t\t\t\t\tif (textResourceEditorInput.label) {\n\t\t\t\t\t\t\tcachedInput.setPreferredName(\n\t\t\t\t\t\t\t\ttextResourceEditorInput.label,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (textResourceEditorInput.description) {\n\t\t\t\t\t\t\tcachedInput.setPreferredDescription(\n\t\t\t\t\t\t\t\ttextResourceEditorInput.description,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (textResourceEditorInput.encoding) {\n\t\t\t\t\t\t\tcachedInput.setPreferredEncoding(\n\t\t\t\t\t\t\t\ttextResourceEditorInput.encoding,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (textResourceEditorInput.languageId) {\n\t\t\t\t\t\t\tcachedInput.setPreferredLanguageId(\n\t\t\t\t\t\t\t\ttextResourceEditorInput.languageId,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\ttypeof textResourceEditorInput.contents === \"string\"\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\tcachedInput.setPreferredContents(\n\t\t\t\t\t\t\t\ttextResourceEditorInput.contents,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t);\n\t\t}\n\n\t\tthrow new Error(\n\t\t\t`ITextEditorService: Unable to create texteditor from ${JSON.stringify(input)}`,\n\t\t);\n\t}\n\n\tprivate createOrGetCached(\n\t\tresource: URI,\n\t\tfactoryFn: () =>\n\t\t\t| TextResourceEditorInput\n\t\t\t| IFileEditorInput\n\t\t\t| UntitledTextEditorInput,\n\t\tcachedFn?: (\n\t\t\tinput:\n\t\t\t\t| TextResourceEditorInput\n\t\t\t\t| IFileEditorInput\n\t\t\t\t| UntitledTextEditorInput,\n\t\t) => void,\n\t): TextResourceEditorInput | IFileEditorInput | UntitledTextEditorInput {\n\t\t// Return early if already cached\n\t\tlet input = this.editorInputCache.get(resource);\n\t\tif (input) {\n\t\t\tcachedFn?.(input);\n\n\t\t\treturn input;\n\t\t}\n\n\t\t// Otherwise create and add to cache\n\t\tinput = factoryFn();\n\t\tthis.editorInputCache.set(resource, input);\n\t\tEvent.once(input.onWillDispose)(() =>\n\t\t\tthis.editorInputCache.delete(resource),\n\t\t);\n\n\t\treturn input;\n\t}\n}\n\nregisterSingleton(\n\tITextEditorService,\n\tTextEditorService,\n\tInstantiationType.Eager /* do not change: https://github.com/microsoft/vscode/issues/137675 */,\n);\n"],
  "mappings": "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",
  "names": []
}
