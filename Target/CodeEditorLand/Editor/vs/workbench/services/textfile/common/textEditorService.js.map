{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/textfile/common/textEditorService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Event } from '../../../../base/common/event.js';\nimport { Registry } from '../../../../platform/registry/common/platform.js';\nimport { ResourceMap } from '../../../../base/common/map.js';\nimport { createDecorator, IInstantiationService } from '../../../../platform/instantiation/common/instantiation.js';\nimport { IEditorFactoryRegistry, IFileEditorInput, IUntypedEditorInput, IUntypedFileEditorInput, EditorExtensions, isResourceDiffEditorInput, isResourceSideBySideEditorInput, IUntitledTextResourceEditorInput, DEFAULT_EDITOR_ASSOCIATION, isResourceMergeEditorInput } from '../../../common/editor.js';\nimport { EditorInput } from '../../../common/editor/editorInput.js';\nimport { INewUntitledTextEditorOptions, IUntitledTextEditorService } from '../../untitled/common/untitledTextEditorService.js';\nimport { Schemas } from '../../../../base/common/network.js';\nimport { DiffEditorInput } from '../../../common/editor/diffEditorInput.js';\nimport { SideBySideEditorInput } from '../../../common/editor/sideBySideEditorInput.js';\nimport { TextResourceEditorInput } from '../../../common/editor/textResourceEditorInput.js';\nimport { UntitledTextEditorInput } from '../../untitled/common/untitledTextEditorInput.js';\nimport { IUntitledTextEditorModel } from '../../untitled/common/untitledTextEditorModel.js';\nimport { basename } from '../../../../base/common/resources.js';\nimport { URI } from '../../../../base/common/uri.js';\nimport { IUriIdentityService } from '../../../../platform/uriIdentity/common/uriIdentity.js';\nimport { IFileService } from '../../../../platform/files/common/files.js';\nimport { IEditorResolverService, RegisteredEditorPriority } from '../../editor/common/editorResolverService.js';\nimport { Disposable } from '../../../../base/common/lifecycle.js';\nimport { InstantiationType, registerSingleton } from '../../../../platform/instantiation/common/extensions.js';\n\nexport const ITextEditorService = createDecorator<ITextEditorService>('textEditorService');\n\nexport interface ITextEditorService {\n\n\treadonly _serviceBrand: undefined;\n\n\t/**\n\t * @deprecated this method should not be used, rather consider using\n\t * `IEditorResolverService` instead with `DEFAULT_EDITOR_ASSOCIATION.id`.\n\t */\n\tcreateTextEditor(input: IUntypedEditorInput): EditorInput;\n\n\t/**\n\t * @deprecated this method should not be used, rather consider using\n\t * `IEditorResolverService` instead with `DEFAULT_EDITOR_ASSOCIATION.id`.\n\t */\n\tcreateTextEditor(input: IUntypedFileEditorInput): IFileEditorInput;\n\n\t/**\n\t * A way to create text editor inputs from an untyped editor input. Depending\n\t * on the passed in input this will be:\n\t * - a `IFileEditorInput` for file resources\n\t * - a `UntitledEditorInput` for untitled resources\n\t * - a `TextResourceEditorInput` for virtual resources\n\t *\n\t * @param input the untyped editor input to create a typed input from\n\t */\n\tresolveTextEditor(input: IUntypedEditorInput): Promise<EditorInput>;\n\tresolveTextEditor(input: IUntypedFileEditorInput): Promise<IFileEditorInput>;\n}\n\nexport class TextEditorService extends Disposable implements ITextEditorService {\n\n\tdeclare readonly _serviceBrand: undefined;\n\n\tprivate readonly editorInputCache = new ResourceMap<TextResourceEditorInput | IFileEditorInput | UntitledTextEditorInput>();\n\n\tprivate readonly fileEditorFactory = Registry.as<IEditorFactoryRegistry>(EditorExtensions.EditorFactory).getFileEditorFactory();\n\n\tconstructor(\n\t\t@IUntitledTextEditorService private readonly untitledTextEditorService: IUntitledTextEditorService,\n\t\t@IInstantiationService private readonly instantiationService: IInstantiationService,\n\t\t@IUriIdentityService private readonly uriIdentityService: IUriIdentityService,\n\t\t@IFileService private readonly fileService: IFileService,\n\t\t@IEditorResolverService private readonly editorResolverService: IEditorResolverService\n\t) {\n\t\tsuper();\n\n\t\t// Register the default editor to the editor resolver\n\t\t// service so that it shows up in the editors picker\n\t\tthis.registerDefaultEditor();\n\t}\n\n\tprivate registerDefaultEditor(): void {\n\t\tthis._register(this.editorResolverService.registerEditor(\n\t\t\t'*',\n\t\t\t{\n\t\t\t\tid: DEFAULT_EDITOR_ASSOCIATION.id,\n\t\t\t\tlabel: DEFAULT_EDITOR_ASSOCIATION.displayName,\n\t\t\t\tdetail: DEFAULT_EDITOR_ASSOCIATION.providerDisplayName,\n\t\t\t\tpriority: RegisteredEditorPriority.builtin\n\t\t\t},\n\t\t\t{},\n\t\t\t{\n\t\t\t\tcreateEditorInput: editor => ({ editor: this.createTextEditor(editor) }),\n\t\t\t\tcreateUntitledEditorInput: untitledEditor => ({ editor: this.createTextEditor(untitledEditor) }),\n\t\t\t\tcreateDiffEditorInput: diffEditor => ({ editor: this.createTextEditor(diffEditor) })\n\t\t\t}\n\t\t));\n\t}\n\n\tresolveTextEditor(input: IUntypedEditorInput): Promise<EditorInput>;\n\tresolveTextEditor(input: IUntypedFileEditorInput): Promise<IFileEditorInput>;\n\tasync resolveTextEditor(input: IUntypedEditorInput | IUntypedFileEditorInput): Promise<EditorInput | IFileEditorInput> {\n\t\treturn this.createTextEditor(input);\n\t}\n\n\tcreateTextEditor(input: IUntypedEditorInput): EditorInput;\n\tcreateTextEditor(input: IUntypedFileEditorInput): IFileEditorInput;\n\tcreateTextEditor(input: IUntypedEditorInput | IUntypedFileEditorInput): EditorInput | IFileEditorInput {\n\n\t\t// Merge Editor Not Supported (we fallback to showing the result only)\n\t\tif (isResourceMergeEditorInput(input)) {\n\t\t\treturn this.createTextEditor(input.result);\n\t\t}\n\n\t\t// Diff Editor Support\n\t\tif (isResourceDiffEditorInput(input)) {\n\t\t\tconst original = this.createTextEditor(input.original);\n\t\t\tconst modified = this.createTextEditor(input.modified);\n\n\t\t\treturn this.instantiationService.createInstance(DiffEditorInput, input.label, input.description, original, modified, undefined);\n\t\t}\n\n\t\t// Side by Side Editor Support\n\t\tif (isResourceSideBySideEditorInput(input)) {\n\t\t\tconst primary = this.createTextEditor(input.primary);\n\t\t\tconst secondary = this.createTextEditor(input.secondary);\n\n\t\t\treturn this.instantiationService.createInstance(SideBySideEditorInput, input.label, input.description, secondary, primary);\n\t\t}\n\n\t\t// Untitled text file support\n\t\tconst untitledInput = input as IUntitledTextResourceEditorInput;\n\t\tif (untitledInput.forceUntitled || !untitledInput.resource || (untitledInput.resource.scheme === Schemas.untitled)) {\n\t\t\tconst untitledOptions: Partial<INewUntitledTextEditorOptions> = {\n\t\t\t\tlanguageId: untitledInput.languageId,\n\t\t\t\tinitialValue: untitledInput.contents,\n\t\t\t\tencoding: untitledInput.encoding\n\t\t\t};\n\n\t\t\t// Untitled resource: use as hint for an existing untitled editor\n\t\t\tlet untitledModel: IUntitledTextEditorModel;\n\t\t\tif (untitledInput.resource?.scheme === Schemas.untitled) {\n\t\t\t\tuntitledModel = this.untitledTextEditorService.create({ untitledResource: untitledInput.resource, ...untitledOptions });\n\t\t\t}\n\n\t\t\t// Other resource: use as hint for associated filepath\n\t\t\telse {\n\t\t\t\tuntitledModel = this.untitledTextEditorService.create({ associatedResource: untitledInput.resource, ...untitledOptions });\n\t\t\t}\n\n\t\t\treturn this.createOrGetCached(untitledModel.resource, () => this.instantiationService.createInstance(UntitledTextEditorInput, untitledModel));\n\t\t}\n\n\t\t// Text File/Resource Editor Support\n\t\tconst textResourceEditorInput = input as IUntypedFileEditorInput;\n\t\tif (textResourceEditorInput.resource instanceof URI) {\n\n\t\t\t// Derive the label from the path if not provided explicitly\n\t\t\tconst label = textResourceEditorInput.label || basename(textResourceEditorInput.resource);\n\n\t\t\t// We keep track of the preferred resource this input is to be created\n\t\t\t// with but it may be different from the canonical resource (see below)\n\t\t\tconst preferredResource = textResourceEditorInput.resource;\n\n\t\t\t// From this moment on, only operate on the canonical resource\n\t\t\t// to ensure we reduce the chance of opening the same resource\n\t\t\t// with different resource forms (e.g. path casing on Windows)\n\t\t\tconst canonicalResource = this.uriIdentityService.asCanonicalUri(preferredResource);\n\n\t\t\treturn this.createOrGetCached(canonicalResource, () => {\n\n\t\t\t\t// File\n\t\t\t\tif (textResourceEditorInput.forceFile || this.fileService.hasProvider(canonicalResource)) {\n\t\t\t\t\treturn this.fileEditorFactory.createFileEditor(canonicalResource, preferredResource, textResourceEditorInput.label, textResourceEditorInput.description, textResourceEditorInput.encoding, textResourceEditorInput.languageId, textResourceEditorInput.contents, this.instantiationService);\n\t\t\t\t}\n\n\t\t\t\t// Resource\n\t\t\t\treturn this.instantiationService.createInstance(TextResourceEditorInput, canonicalResource, textResourceEditorInput.label, textResourceEditorInput.description, textResourceEditorInput.languageId, textResourceEditorInput.contents);\n\t\t\t}, cachedInput => {\n\n\t\t\t\t// Untitled\n\t\t\t\tif (cachedInput instanceof UntitledTextEditorInput) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// Files\n\t\t\t\telse if (!(cachedInput instanceof TextResourceEditorInput)) {\n\t\t\t\t\tcachedInput.setPreferredResource(preferredResource);\n\n\t\t\t\t\tif (textResourceEditorInput.label) {\n\t\t\t\t\t\tcachedInput.setPreferredName(textResourceEditorInput.label);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (textResourceEditorInput.description) {\n\t\t\t\t\t\tcachedInput.setPreferredDescription(textResourceEditorInput.description);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (textResourceEditorInput.encoding) {\n\t\t\t\t\t\tcachedInput.setPreferredEncoding(textResourceEditorInput.encoding);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (textResourceEditorInput.languageId) {\n\t\t\t\t\t\tcachedInput.setPreferredLanguageId(textResourceEditorInput.languageId);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (typeof textResourceEditorInput.contents === 'string') {\n\t\t\t\t\t\tcachedInput.setPreferredContents(textResourceEditorInput.contents);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Resources\n\t\t\t\telse {\n\t\t\t\t\tif (label) {\n\t\t\t\t\t\tcachedInput.setName(label);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (textResourceEditorInput.description) {\n\t\t\t\t\t\tcachedInput.setDescription(textResourceEditorInput.description);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (textResourceEditorInput.languageId) {\n\t\t\t\t\t\tcachedInput.setPreferredLanguageId(textResourceEditorInput.languageId);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (typeof textResourceEditorInput.contents === 'string') {\n\t\t\t\t\t\tcachedInput.setPreferredContents(textResourceEditorInput.contents);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\tthrow new Error(`ITextEditorService: Unable to create texteditor from ${JSON.stringify(input)}`);\n\t}\n\n\tprivate createOrGetCached(\n\t\tresource: URI,\n\t\tfactoryFn: () => TextResourceEditorInput | IFileEditorInput | UntitledTextEditorInput,\n\t\tcachedFn?: (input: TextResourceEditorInput | IFileEditorInput | UntitledTextEditorInput) => void\n\t): TextResourceEditorInput | IFileEditorInput | UntitledTextEditorInput {\n\n\t\t// Return early if already cached\n\t\tlet input = this.editorInputCache.get(resource);\n\t\tif (input) {\n\t\t\tcachedFn?.(input);\n\n\t\t\treturn input;\n\t\t}\n\n\t\t// Otherwise create and add to cache\n\t\tinput = factoryFn();\n\t\tthis.editorInputCache.set(resource, input);\n\t\tEvent.once(input.onWillDispose)(() => this.editorInputCache.delete(resource));\n\n\t\treturn input;\n\t}\n}\n\nregisterSingleton(ITextEditorService, TextEditorService, InstantiationType.Eager /* do not change: https://github.com/microsoft/vscode/issues/137675 */);\n"],
  "mappings": "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",
  "names": []
}
