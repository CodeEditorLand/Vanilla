{
  "version": 3,
  "sources": ["../../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/textfile/test/node/encoding/encoding.test.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport assert from 'assert';\nimport * as fs from 'fs';\nimport * as encoding from '../../../common/encoding.js';\nimport * as streams from '../../../../../../base/common/stream.js';\nimport { newWriteableBufferStream, VSBuffer, VSBufferReadableStream, streamToBufferReadableStream } from '../../../../../../base/common/buffer.js';\nimport { splitLines } from '../../../../../../base/common/strings.js';\nimport { FileAccess } from '../../../../../../base/common/network.js';\nimport { importAMDNodeModule } from '../../../../../../amdX.js';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from '../../../../../../base/test/common/utils.js';\n\nexport async function detectEncodingByBOM(file: string): Promise<typeof encoding.UTF16be | typeof encoding.UTF16le | typeof encoding.UTF8_with_bom | null> {\n\ttry {\n\t\tconst { buffer, bytesRead } = await readExactlyByFile(file, 3);\n\n\t\treturn encoding.detectEncodingByBOMFromBuffer(buffer, bytesRead);\n\t} catch (error) {\n\t\treturn null; // ignore errors (like file not found)\n\t}\n}\n\ninterface ReadResult {\n\tbuffer: VSBuffer | null;\n\tbytesRead: number;\n}\n\nfunction readExactlyByFile(file: string, totalBytes: number): Promise<ReadResult> {\n\treturn new Promise<ReadResult>((resolve, reject) => {\n\t\tfs.open(file, 'r', null, (err, fd) => {\n\t\t\tif (err) {\n\t\t\t\treturn reject(err);\n\t\t\t}\n\n\t\t\tfunction end(err: Error | null, resultBuffer: Buffer | null, bytesRead: number): void {\n\t\t\t\tfs.close(fd, closeError => {\n\t\t\t\t\tif (closeError) {\n\t\t\t\t\t\treturn reject(closeError);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (err && (<any>err).code === 'EISDIR') {\n\t\t\t\t\t\treturn reject(err); // we want to bubble this error up (file is actually a folder)\n\t\t\t\t\t}\n\n\t\t\t\t\treturn resolve({ buffer: resultBuffer ? VSBuffer.wrap(resultBuffer) : null, bytesRead });\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tconst buffer = Buffer.allocUnsafe(totalBytes);\n\t\t\tlet offset = 0;\n\n\t\t\tfunction readChunk(): void {\n\t\t\t\tfs.read(fd, buffer, offset, totalBytes - offset, null, (err, bytesRead) => {\n\t\t\t\t\tif (err) {\n\t\t\t\t\t\treturn end(err, null, 0);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (bytesRead === 0) {\n\t\t\t\t\t\treturn end(null, buffer, offset);\n\t\t\t\t\t}\n\n\t\t\t\t\toffset += bytesRead;\n\n\t\t\t\t\tif (offset === totalBytes) {\n\t\t\t\t\t\treturn end(null, buffer, offset);\n\t\t\t\t\t}\n\n\t\t\t\t\treturn readChunk();\n\t\t\t\t});\n\t\t\t}\n\n\t\t\treadChunk();\n\t\t});\n\t});\n}\n\nsuite('Encoding', () => {\n\n\ttest('detectBOM does not return error for non existing file', async () => {\n\t\tconst file = FileAccess.asFileUri('vs/workbench/services/textfile/test/node/encoding/fixtures/not-exist.css').fsPath;\n\n\t\tconst detectedEncoding = await detectEncodingByBOM(file);\n\t\tassert.strictEqual(detectedEncoding, null);\n\t});\n\n\ttest('detectBOM UTF-8', async () => {\n\t\tconst file = FileAccess.asFileUri('vs/workbench/services/textfile/test/node/encoding/fixtures/some_utf8.css').fsPath;\n\n\t\tconst detectedEncoding = await detectEncodingByBOM(file);\n\t\tassert.strictEqual(detectedEncoding, 'utf8bom');\n\t});\n\n\ttest('detectBOM UTF-16 LE', async () => {\n\t\tconst file = FileAccess.asFileUri('vs/workbench/services/textfile/test/node/encoding/fixtures/some_utf16le.css').fsPath;\n\n\t\tconst detectedEncoding = await detectEncodingByBOM(file);\n\t\tassert.strictEqual(detectedEncoding, 'utf16le');\n\t});\n\n\ttest('detectBOM UTF-16 BE', async () => {\n\t\tconst file = FileAccess.asFileUri('vs/workbench/services/textfile/test/node/encoding/fixtures/some_utf16be.css').fsPath;\n\n\t\tconst detectedEncoding = await detectEncodingByBOM(file);\n\t\tassert.strictEqual(detectedEncoding, 'utf16be');\n\t});\n\n\ttest('detectBOM ANSI', async function () {\n\t\tconst file = FileAccess.asFileUri('vs/workbench/services/textfile/test/node/encoding/fixtures/some_ansi.css').fsPath;\n\n\t\tconst detectedEncoding = await detectEncodingByBOM(file);\n\t\tassert.strictEqual(detectedEncoding, null);\n\t});\n\n\ttest('detectBOM ANSI (2)', async function () {\n\t\tconst file = FileAccess.asFileUri('vs/workbench/services/textfile/test/node/encoding/fixtures/empty.txt').fsPath;\n\n\t\tconst detectedEncoding = await detectEncodingByBOM(file);\n\t\tassert.strictEqual(detectedEncoding, null);\n\t});\n\n\ttest('detectEncodingFromBuffer (JSON saved as PNG)', async function () {\n\t\tconst file = FileAccess.asFileUri('vs/workbench/services/textfile/test/node/encoding/fixtures/some.json.png').fsPath;\n\n\t\tconst buffer = await readExactlyByFile(file, 512);\n\t\tconst mimes = encoding.detectEncodingFromBuffer(buffer);\n\t\tassert.strictEqual(mimes.seemsBinary, false);\n\t});\n\n\ttest('detectEncodingFromBuffer (PNG saved as TXT)', async function () {\n\t\tconst file = FileAccess.asFileUri('vs/workbench/services/textfile/test/node/encoding/fixtures/some.png.txt').fsPath;\n\t\tconst buffer = await readExactlyByFile(file, 512);\n\t\tconst mimes = encoding.detectEncodingFromBuffer(buffer);\n\t\tassert.strictEqual(mimes.seemsBinary, true);\n\t});\n\n\ttest('detectEncodingFromBuffer (XML saved as PNG)', async function () {\n\t\tconst file = FileAccess.asFileUri('vs/workbench/services/textfile/test/node/encoding/fixtures/some.xml.png').fsPath;\n\t\tconst buffer = await readExactlyByFile(file, 512);\n\t\tconst mimes = encoding.detectEncodingFromBuffer(buffer);\n\t\tassert.strictEqual(mimes.seemsBinary, false);\n\t});\n\n\ttest('detectEncodingFromBuffer (QWOFF saved as TXT)', async function () {\n\t\tconst file = FileAccess.asFileUri('vs/workbench/services/textfile/test/node/encoding/fixtures/some.qwoff.txt').fsPath;\n\t\tconst buffer = await readExactlyByFile(file, 512);\n\t\tconst mimes = encoding.detectEncodingFromBuffer(buffer);\n\t\tassert.strictEqual(mimes.seemsBinary, true);\n\t});\n\n\ttest('detectEncodingFromBuffer (CSS saved as QWOFF)', async function () {\n\t\tconst file = FileAccess.asFileUri('vs/workbench/services/textfile/test/node/encoding/fixtures/some.css.qwoff').fsPath;\n\t\tconst buffer = await readExactlyByFile(file, 512);\n\t\tconst mimes = encoding.detectEncodingFromBuffer(buffer);\n\t\tassert.strictEqual(mimes.seemsBinary, false);\n\t});\n\n\ttest('detectEncodingFromBuffer (PDF)', async function () {\n\t\tconst file = FileAccess.asFileUri('vs/workbench/services/textfile/test/node/encoding/fixtures/some.pdf').fsPath;\n\t\tconst buffer = await readExactlyByFile(file, 512);\n\t\tconst mimes = encoding.detectEncodingFromBuffer(buffer);\n\t\tassert.strictEqual(mimes.seemsBinary, true);\n\t});\n\n\ttest('detectEncodingFromBuffer (guess UTF-16 LE from content without BOM)', async function () {\n\t\tconst file = FileAccess.asFileUri('vs/workbench/services/textfile/test/node/encoding/fixtures/utf16_le_nobom.txt').fsPath;\n\t\tconst buffer = await readExactlyByFile(file, 512);\n\t\tconst mimes = encoding.detectEncodingFromBuffer(buffer);\n\t\tassert.strictEqual(mimes.encoding, encoding.UTF16le);\n\t\tassert.strictEqual(mimes.seemsBinary, false);\n\t});\n\n\ttest('detectEncodingFromBuffer (guess UTF-16 BE from content without BOM)', async function () {\n\t\tconst file = FileAccess.asFileUri('vs/workbench/services/textfile/test/node/encoding/fixtures/utf16_be_nobom.txt').fsPath;\n\t\tconst buffer = await readExactlyByFile(file, 512);\n\t\tconst mimes = encoding.detectEncodingFromBuffer(buffer);\n\t\tassert.strictEqual(mimes.encoding, encoding.UTF16be);\n\t\tassert.strictEqual(mimes.seemsBinary, false);\n\t});\n\n\ttest('autoGuessEncoding (UTF8)', async function () {\n\t\tconst file = FileAccess.asFileUri('vs/workbench/services/textfile/test/node/encoding/fixtures/some_file.css').fsPath;\n\t\tconst buffer = await readExactlyByFile(file, 512 * 8);\n\t\tconst mimes = await encoding.detectEncodingFromBuffer(buffer, true);\n\t\tassert.strictEqual(mimes.encoding, 'utf8');\n\t});\n\n\ttest('autoGuessEncoding (ASCII)', async function () {\n\t\tconst file = FileAccess.asFileUri('vs/workbench/services/textfile/test/node/encoding/fixtures/some_ansi.css').fsPath;\n\t\tconst buffer = await readExactlyByFile(file, 512 * 8);\n\t\tconst mimes = await encoding.detectEncodingFromBuffer(buffer, true);\n\t\tassert.strictEqual(mimes.encoding, null);\n\t});\n\n\ttest('autoGuessEncoding (ShiftJIS)', async function () {\n\t\tconst file = FileAccess.asFileUri('vs/workbench/services/textfile/test/node/encoding/fixtures/some.shiftjis.txt').fsPath;\n\t\tconst buffer = await readExactlyByFile(file, 512 * 8);\n\t\tconst mimes = await encoding.detectEncodingFromBuffer(buffer, true);\n\t\tassert.strictEqual(mimes.encoding, 'shiftjis');\n\t});\n\n\ttest('autoGuessEncoding (CP1252)', async function () {\n\t\tconst file = FileAccess.asFileUri('vs/workbench/services/textfile/test/node/encoding/fixtures/some.cp1252.txt').fsPath;\n\t\tconst buffer = await readExactlyByFile(file, 512 * 8);\n\t\tconst mimes = await encoding.detectEncodingFromBuffer(buffer, true);\n\t\tassert.strictEqual(mimes.encoding, 'windows1252');\n\t});\n\n\ttest('autoGuessEncoding (candidateGuessEncodings - ShiftJIS)', async function () {\n\t\t// This file is determined to be windows1252 unless candidateDetectEncoding is set.\n\t\tconst file = FileAccess.asFileUri('vs/workbench/services/textfile/test/node/encoding/fixtures/some.shiftjis.1.txt').fsPath;\n\t\tconst buffer = await readExactlyByFile(file, 512 * 8);\n\t\tconst mimes = await encoding.detectEncodingFromBuffer(buffer, true, ['utf8', 'shiftjis', 'eucjp']);\n\t\tassert.strictEqual(mimes.encoding, 'shiftjis');\n\t});\n\n\tasync function readAndDecodeFromDisk(path: string, fileEncoding: string | null) {\n\t\treturn new Promise<string>((resolve, reject) => {\n\t\t\tfs.readFile(path, (err, data) => {\n\t\t\t\tif (err) {\n\t\t\t\t\treject(err);\n\t\t\t\t} else {\n\t\t\t\t\tresolve(importAMDNodeModule<typeof import('@vscode/iconv-lite-umd')>('@vscode/iconv-lite-umd', 'lib/iconv-lite-umd.js').then(iconv => iconv.decode(data, encoding.toNodeEncoding(fileEncoding))));\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t}\n\n\tfunction newTestReadableStream(buffers: Buffer[]): VSBufferReadableStream {\n\t\tconst stream = newWriteableBufferStream();\n\t\tbuffers\n\t\t\t.map(VSBuffer.wrap)\n\t\t\t.forEach(buffer => {\n\t\t\t\tsetTimeout(() => {\n\t\t\t\t\tstream.write(buffer);\n\t\t\t\t});\n\t\t\t});\n\t\tsetTimeout(() => {\n\t\t\tstream.end();\n\t\t});\n\t\treturn stream;\n\t}\n\n\tasync function readAllAsString(stream: streams.ReadableStream<string>) {\n\t\treturn streams.consumeStream(stream, strings => strings.join(''));\n\t}\n\n\ttest('toDecodeStream - some stream', async function () {\n\t\tconst source = newTestReadableStream([\n\t\t\tBuffer.from([65, 66, 67]),\n\t\t\tBuffer.from([65, 66, 67]),\n\t\t\tBuffer.from([65, 66, 67]),\n\t\t]);\n\n\t\tconst { detected, stream } = await encoding.toDecodeStream(source, { acceptTextOnly: true, minBytesRequiredForDetection: 4, guessEncoding: false, candidateGuessEncodings: [], overwriteEncoding: async detected => detected || encoding.UTF8 });\n\n\t\tassert.ok(detected);\n\t\tassert.ok(stream);\n\n\t\tconst content = await readAllAsString(stream);\n\t\tassert.strictEqual(content, 'ABCABCABC');\n\t});\n\n\ttest('toDecodeStream - some stream, expect too much data', async function () {\n\t\tconst source = newTestReadableStream([\n\t\t\tBuffer.from([65, 66, 67]),\n\t\t\tBuffer.from([65, 66, 67]),\n\t\t\tBuffer.from([65, 66, 67]),\n\t\t]);\n\n\t\tconst { detected, stream } = await encoding.toDecodeStream(source, { acceptTextOnly: true, minBytesRequiredForDetection: 64, guessEncoding: false, candidateGuessEncodings: [], overwriteEncoding: async detected => detected || encoding.UTF8 });\n\n\t\tassert.ok(detected);\n\t\tassert.ok(stream);\n\n\t\tconst content = await readAllAsString(stream);\n\t\tassert.strictEqual(content, 'ABCABCABC');\n\t});\n\n\ttest('toDecodeStream - some stream, no data', async function () {\n\t\tconst source = newWriteableBufferStream();\n\t\tsource.end();\n\n\t\tconst { detected, stream } = await encoding.toDecodeStream(source, { acceptTextOnly: true, minBytesRequiredForDetection: 512, guessEncoding: false, candidateGuessEncodings: [], overwriteEncoding: async detected => detected || encoding.UTF8 });\n\n\t\tassert.ok(detected);\n\t\tassert.ok(stream);\n\n\t\tconst content = await readAllAsString(stream);\n\t\tassert.strictEqual(content, '');\n\t});\n\n\ttest('toDecodeStream - encoding, utf16be', async function () {\n\t\tconst path = FileAccess.asFileUri('vs/workbench/services/textfile/test/node/encoding/fixtures/some_utf16be.css').fsPath;\n\t\tconst source = streamToBufferReadableStream(fs.createReadStream(path));\n\n\t\tconst { detected, stream } = await encoding.toDecodeStream(source, { acceptTextOnly: true, minBytesRequiredForDetection: 64, guessEncoding: false, candidateGuessEncodings: [], overwriteEncoding: async detected => detected || encoding.UTF8 });\n\n\t\tassert.strictEqual(detected.encoding, 'utf16be');\n\t\tassert.strictEqual(detected.seemsBinary, false);\n\n\t\tconst expected = await readAndDecodeFromDisk(path, detected.encoding);\n\t\tconst actual = await readAllAsString(stream);\n\t\tassert.strictEqual(actual, expected);\n\t});\n\n\ttest('toDecodeStream - empty file', async function () {\n\t\tconst path = FileAccess.asFileUri('vs/workbench/services/textfile/test/node/encoding/fixtures/empty.txt').fsPath;\n\t\tconst source = streamToBufferReadableStream(fs.createReadStream(path));\n\t\tconst { detected, stream } = await encoding.toDecodeStream(source, { acceptTextOnly: true, guessEncoding: false, candidateGuessEncodings: [], overwriteEncoding: async detected => detected || encoding.UTF8 });\n\n\t\tconst expected = await readAndDecodeFromDisk(path, detected.encoding);\n\t\tconst actual = await readAllAsString(stream);\n\t\tassert.strictEqual(actual, expected);\n\t});\n\n\ttest('toDecodeStream - decodes buffer entirely', async function () {\n\t\tconst emojis = Buffer.from('\uD83D\uDDA5\uFE0F\uD83D\uDCBB\uD83D\uDCBE');\n\t\tconst incompleteEmojis = emojis.slice(0, emojis.length - 1);\n\n\t\tconst buffers: Buffer[] = [];\n\t\tfor (let i = 0; i < incompleteEmojis.length; i++) {\n\t\t\tbuffers.push(incompleteEmojis.slice(i, i + 1));\n\t\t}\n\n\t\tconst source = newTestReadableStream(buffers);\n\t\tconst { stream } = await encoding.toDecodeStream(source, { acceptTextOnly: true, minBytesRequiredForDetection: 4, guessEncoding: false, candidateGuessEncodings: [], overwriteEncoding: async detected => detected || encoding.UTF8 });\n\n\t\tconst expected = new TextDecoder().decode(incompleteEmojis);\n\t\tconst actual = await readAllAsString(stream);\n\n\t\tassert.strictEqual(actual, expected);\n\t});\n\n\ttest('toDecodeStream - some stream (GBK issue #101856)', async function () {\n\t\tconst path = FileAccess.asFileUri('vs/workbench/services/textfile/test/node/encoding/fixtures/some_gbk.txt').fsPath;\n\t\tconst source = streamToBufferReadableStream(fs.createReadStream(path));\n\n\t\tconst { detected, stream } = await encoding.toDecodeStream(source, { acceptTextOnly: true, minBytesRequiredForDetection: 4, guessEncoding: false, candidateGuessEncodings: [], overwriteEncoding: async () => 'gbk' });\n\t\tassert.ok(detected);\n\t\tassert.ok(stream);\n\n\t\tconst content = await readAllAsString(stream);\n\t\tassert.strictEqual(content.length, 65537);\n\t});\n\n\ttest('toDecodeStream - some stream (UTF-8 issue #102202)', async function () {\n\t\tconst path = FileAccess.asFileUri('vs/workbench/services/textfile/test/node/encoding/fixtures/issue_102202.txt').fsPath;\n\t\tconst source = streamToBufferReadableStream(fs.createReadStream(path));\n\n\t\tconst { detected, stream } = await encoding.toDecodeStream(source, { acceptTextOnly: true, minBytesRequiredForDetection: 4, guessEncoding: false, candidateGuessEncodings: [], overwriteEncoding: async () => 'utf-8' });\n\t\tassert.ok(detected);\n\t\tassert.ok(stream);\n\n\t\tconst content = await readAllAsString(stream);\n\t\tconst lines = splitLines(content);\n\n\t\tassert.strictEqual(lines[981].toString(), '\u554A\u554A\u554A\u554A\u554A\u554Aaaa\u554A\u554A\u554A\u554A\u554A\u554A\u554A\u554A\u554A\u554A\u554A\u554A\u554A\u554A\u554A\u554A\u554A\u554A\uFF0C\u554A\u554A\u554A\u554A\u554A\u554A\u554A\u554A\u554A\u554A\u554A\u3002');\n\t});\n\n\ttest('toDecodeStream - binary', async function () {\n\t\tconst source = () => {\n\t\t\treturn newTestReadableStream([\n\t\t\t\tBuffer.from([0, 0, 0]),\n\t\t\t\tBuffer.from('Hello World'),\n\t\t\t\tBuffer.from([0])\n\t\t\t]);\n\t\t};\n\n\t\t// acceptTextOnly: true\n\n\t\tlet error: Error | undefined = undefined;\n\t\ttry {\n\t\t\tawait encoding.toDecodeStream(source(), { acceptTextOnly: true, guessEncoding: false, candidateGuessEncodings: [], overwriteEncoding: async detected => detected || encoding.UTF8 });\n\t\t} catch (e) {\n\t\t\terror = e;\n\t\t}\n\n\t\tassert.ok(error instanceof encoding.DecodeStreamError);\n\t\tassert.strictEqual(error.decodeStreamErrorKind, encoding.DecodeStreamErrorKind.STREAM_IS_BINARY);\n\n\t\t// acceptTextOnly: false\n\n\t\tconst { detected, stream } = await encoding.toDecodeStream(source(), { acceptTextOnly: false, guessEncoding: false, candidateGuessEncodings: [], overwriteEncoding: async detected => detected || encoding.UTF8 });\n\n\t\tassert.ok(detected);\n\t\tassert.strictEqual(detected.seemsBinary, true);\n\t\tassert.ok(stream);\n\t});\n\n\ttest('toEncodeReadable - encoding, utf16be', async function () {\n\t\tconst path = FileAccess.asFileUri('vs/workbench/services/textfile/test/node/encoding/fixtures/some_utf16be.css').fsPath;\n\t\tconst source = await readAndDecodeFromDisk(path, encoding.UTF16be);\n\n\t\tconst iconv = await importAMDNodeModule<typeof import('@vscode/iconv-lite-umd')>('@vscode/iconv-lite-umd', 'lib/iconv-lite-umd.js');\n\n\t\tconst expected = VSBuffer.wrap(\n\t\t\ticonv.encode(source, encoding.toNodeEncoding(encoding.UTF16be))\n\t\t).toString();\n\n\t\tconst actual = streams.consumeReadable(\n\t\t\tawait encoding.toEncodeReadable(streams.toReadable(source), encoding.UTF16be),\n\t\t\tVSBuffer.concat\n\t\t).toString();\n\n\t\tassert.strictEqual(actual, expected);\n\t});\n\n\ttest('toEncodeReadable - empty readable to utf8', async function () {\n\t\tconst source: streams.Readable<string> = {\n\t\t\tread() {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t};\n\n\t\tconst actual = streams.consumeReadable(\n\t\t\tawait encoding.toEncodeReadable(source, encoding.UTF8),\n\t\t\tVSBuffer.concat\n\t\t).toString();\n\n\t\tassert.strictEqual(actual, '');\n\t});\n\n\t[{\n\t\tutfEncoding: encoding.UTF8,\n\t\trelatedBom: encoding.UTF8_BOM\n\t}, {\n\t\tutfEncoding: encoding.UTF8_with_bom,\n\t\trelatedBom: encoding.UTF8_BOM\n\t}, {\n\t\tutfEncoding: encoding.UTF16be,\n\t\trelatedBom: encoding.UTF16be_BOM,\n\t}, {\n\t\tutfEncoding: encoding.UTF16le,\n\t\trelatedBom: encoding.UTF16le_BOM\n\t}].forEach(({ utfEncoding, relatedBom }) => {\n\t\ttest(`toEncodeReadable - empty readable to ${utfEncoding} with BOM`, async function () {\n\t\t\tconst source: streams.Readable<string> = {\n\t\t\t\tread() {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tconst encodedReadable = encoding.toEncodeReadable(source, utfEncoding, { addBOM: true });\n\n\t\t\tconst expected = VSBuffer.wrap(Buffer.from(relatedBom)).toString();\n\t\t\tconst actual = streams.consumeReadable(await encodedReadable, VSBuffer.concat).toString();\n\n\t\t\tassert.strictEqual(actual, expected);\n\t\t});\n\t});\n\n\ttest('encodingExists', async function () {\n\t\tfor (const enc in encoding.SUPPORTED_ENCODINGS) {\n\t\t\tif (enc === encoding.UTF8_with_bom) {\n\t\t\t\tcontinue; // skip over encodings from us\n\t\t\t}\n\t\t\tconst iconv = await importAMDNodeModule<typeof import('@vscode/iconv-lite-umd')>('@vscode/iconv-lite-umd', 'lib/iconv-lite-umd.js');\n\t\t\tassert.strictEqual(iconv.encodingExists(enc), true, enc);\n\t\t}\n\t});\n\n\tensureNoDisposablesAreLeakedInTestSuite();\n});\n"],
  "mappings": "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",
  "names": ["err", "detected"]
}
