{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/textfile/test/common/textFileService.io.test.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport assert from 'assert';\nimport { ITextFileService, snapshotToString, TextFileOperationError, TextFileOperationResult, stringToSnapshot } from '../../common/textfiles.js';\nimport { URI } from '../../../../../base/common/uri.js';\nimport { join, basename } from '../../../../../base/common/path.js';\nimport { UTF16le, UTF8_with_bom, UTF16be, UTF8, UTF16le_BOM, UTF16be_BOM, UTF8_BOM } from '../../common/encoding.js';\nimport { bufferToStream, VSBuffer } from '../../../../../base/common/buffer.js';\nimport { createTextModel } from '../../../../../editor/test/common/testTextModel.js';\nimport { ITextSnapshot, DefaultEndOfLine } from '../../../../../editor/common/model.js';\nimport { isWindows } from '../../../../../base/common/platform.js';\nimport { createTextBufferFactoryFromStream } from '../../../../../editor/common/model/textModel.js';\nimport { DisposableStore } from '../../../../../base/common/lifecycle.js';\n\nexport interface Params {\n\tsetup(): Promise<{\n\t\tservice: ITextFileService;\n\t\ttestDir: string;\n\t}>;\n\tteardown(): Promise<void>;\n\n\texists(fsPath: string): Promise<boolean>;\n\tstat(fsPath: string): Promise<{ size: number }>;\n\treadFile(fsPath: string): Promise<VSBuffer | Buffer>;\n\treadFile(fsPath: string, encoding: string): Promise<string>;\n\treadFile(fsPath: string, encoding?: string): Promise<VSBuffer | Buffer | string>;\n\tdetectEncodingByBOM(fsPath: string): Promise<typeof UTF16be | typeof UTF16le | typeof UTF8_with_bom | null>;\n}\n\n/**\n * Allows us to reuse test suite across different environments.\n *\n * It introduces a bit of complexity with setup and teardown, however\n * it helps us to ensure that tests are added for all environments at once,\n * hence helps us catch bugs better.\n */\nexport default function createSuite(params: Params) {\n\tlet service: ITextFileService;\n\tlet testDir = '';\n\tconst { exists, stat, readFile, detectEncodingByBOM } = params;\n\tconst disposables = new DisposableStore();\n\n\tsetup(async () => {\n\t\tconst result = await params.setup();\n\t\tservice = result.service;\n\t\ttestDir = result.testDir;\n\t});\n\n\tteardown(async () => {\n\t\tawait params.teardown();\n\t\tdisposables.clear();\n\t});\n\n\ttest('create - no encoding - content empty', async () => {\n\t\tconst resource = URI.file(join(testDir, 'small_new.txt'));\n\n\t\tawait service.create([{ resource }]);\n\n\t\tconst res = await readFile(resource.fsPath);\n\t\tassert.strictEqual(res.byteLength, 0 /* no BOM */);\n\t});\n\n\ttest('create - no encoding - content provided (string)', async () => {\n\t\tconst resource = URI.file(join(testDir, 'small_new.txt'));\n\n\t\tawait service.create([{ resource, value: 'Hello World' }]);\n\n\t\tconst res = await readFile(resource.fsPath);\n\t\tassert.strictEqual(res.toString(), 'Hello World');\n\t\tassert.strictEqual(res.byteLength, 'Hello World'.length);\n\t});\n\n\ttest('create - no encoding - content provided (snapshot)', async () => {\n\t\tconst resource = URI.file(join(testDir, 'small_new.txt'));\n\n\t\tawait service.create([{ resource, value: stringToSnapshot('Hello World') }]);\n\n\t\tconst res = await readFile(resource.fsPath);\n\t\tassert.strictEqual(res.toString(), 'Hello World');\n\t\tassert.strictEqual(res.byteLength, 'Hello World'.length);\n\t});\n\n\ttest('create - UTF 16 LE - no content', async () => {\n\t\tconst resource = URI.file(join(testDir, 'small_new.utf16le'));\n\n\t\tawait service.create([{ resource }]);\n\n\t\tassert.strictEqual(await exists(resource.fsPath), true);\n\n\t\tconst detectedEncoding = await detectEncodingByBOM(resource.fsPath);\n\t\tassert.strictEqual(detectedEncoding, UTF16le);\n\n\t\tconst res = await readFile(resource.fsPath);\n\t\tassert.strictEqual(res.byteLength, UTF16le_BOM.length);\n\t});\n\n\ttest('create - UTF 16 LE - content provided', async () => {\n\t\tconst resource = URI.file(join(testDir, 'small_new.utf16le'));\n\n\t\tawait service.create([{ resource, value: 'Hello World' }]);\n\n\t\tassert.strictEqual(await exists(resource.fsPath), true);\n\n\t\tconst detectedEncoding = await detectEncodingByBOM(resource.fsPath);\n\t\tassert.strictEqual(detectedEncoding, UTF16le);\n\n\t\tconst res = await readFile(resource.fsPath);\n\t\tassert.strictEqual(res.byteLength, 'Hello World'.length * 2 /* UTF16 2bytes per char */ + UTF16le_BOM.length);\n\t});\n\n\ttest('create - UTF 16 BE - no content', async () => {\n\t\tconst resource = URI.file(join(testDir, 'small_new.utf16be'));\n\n\t\tawait service.create([{ resource }]);\n\n\t\tassert.strictEqual(await exists(resource.fsPath), true);\n\n\t\tconst detectedEncoding = await detectEncodingByBOM(resource.fsPath);\n\t\tassert.strictEqual(detectedEncoding, UTF16be);\n\n\t\tconst res = await readFile(resource.fsPath);\n\t\tassert.strictEqual(res.byteLength, UTF16le_BOM.length);\n\t});\n\n\ttest('create - UTF 16 BE - content provided', async () => {\n\t\tconst resource = URI.file(join(testDir, 'small_new.utf16be'));\n\n\t\tawait service.create([{ resource, value: 'Hello World' }]);\n\n\t\tassert.strictEqual(await exists(resource.fsPath), true);\n\n\t\tconst detectedEncoding = await detectEncodingByBOM(resource.fsPath);\n\t\tassert.strictEqual(detectedEncoding, UTF16be);\n\n\t\tconst res = await readFile(resource.fsPath);\n\t\tassert.strictEqual(res.byteLength, 'Hello World'.length * 2 /* UTF16 2bytes per char */ + UTF16be_BOM.length);\n\t});\n\n\ttest('create - UTF 8 BOM - no content', async () => {\n\t\tconst resource = URI.file(join(testDir, 'small_new.utf8bom'));\n\n\t\tawait service.create([{ resource }]);\n\n\t\tassert.strictEqual(await exists(resource.fsPath), true);\n\n\t\tconst detectedEncoding = await detectEncodingByBOM(resource.fsPath);\n\t\tassert.strictEqual(detectedEncoding, UTF8_with_bom);\n\n\t\tconst res = await readFile(resource.fsPath);\n\t\tassert.strictEqual(res.byteLength, UTF8_BOM.length);\n\t});\n\n\ttest('create - UTF 8 BOM - content provided', async () => {\n\t\tconst resource = URI.file(join(testDir, 'small_new.utf8bom'));\n\n\t\tawait service.create([{ resource, value: 'Hello World' }]);\n\n\t\tassert.strictEqual(await exists(resource.fsPath), true);\n\n\t\tconst detectedEncoding = await detectEncodingByBOM(resource.fsPath);\n\t\tassert.strictEqual(detectedEncoding, UTF8_with_bom);\n\n\t\tconst res = await readFile(resource.fsPath);\n\t\tassert.strictEqual(res.byteLength, 'Hello World'.length + UTF8_BOM.length);\n\t});\n\n\tfunction createTextModelSnapshot(text: string, preserveBOM?: boolean): ITextSnapshot {\n\t\tconst textModel = disposables.add(createTextModel(text));\n\t\tconst snapshot = textModel.createSnapshot(preserveBOM);\n\n\t\treturn snapshot;\n\t}\n\n\ttest('create - UTF 8 BOM - empty content - snapshot', async () => {\n\t\tconst resource = URI.file(join(testDir, 'small_new.utf8bom'));\n\n\t\tawait service.create([{ resource, value: createTextModelSnapshot('') }]);\n\n\t\tassert.strictEqual(await exists(resource.fsPath), true);\n\n\t\tconst detectedEncoding = await detectEncodingByBOM(resource.fsPath);\n\t\tassert.strictEqual(detectedEncoding, UTF8_with_bom);\n\n\t\tconst res = await readFile(resource.fsPath);\n\t\tassert.strictEqual(res.byteLength, UTF8_BOM.length);\n\t});\n\n\ttest('create - UTF 8 BOM - content provided - snapshot', async () => {\n\t\tconst resource = URI.file(join(testDir, 'small_new.utf8bom'));\n\n\t\tawait service.create([{ resource, value: createTextModelSnapshot('Hello World') }]);\n\n\t\tassert.strictEqual(await exists(resource.fsPath), true);\n\n\t\tconst detectedEncoding = await detectEncodingByBOM(resource.fsPath);\n\t\tassert.strictEqual(detectedEncoding, UTF8_with_bom);\n\n\t\tconst res = await readFile(resource.fsPath);\n\t\tassert.strictEqual(res.byteLength, 'Hello World'.length + UTF8_BOM.length);\n\t});\n\n\ttest('write - use encoding (UTF 16 BE) - small content as string', async () => {\n\t\tawait testEncoding(URI.file(join(testDir, 'small.txt')), UTF16be, 'Hello\\nWorld', 'Hello\\nWorld');\n\t});\n\n\ttest('write - use encoding (UTF 16 BE) - small content as snapshot', async () => {\n\t\tawait testEncoding(URI.file(join(testDir, 'small.txt')), UTF16be, createTextModelSnapshot('Hello\\nWorld'), 'Hello\\nWorld');\n\t});\n\n\ttest('write - use encoding (UTF 16 BE) - large content as string', async () => {\n\t\tawait testEncoding(URI.file(join(testDir, 'lorem.txt')), UTF16be, 'Hello\\nWorld', 'Hello\\nWorld');\n\t});\n\n\ttest('write - use encoding (UTF 16 BE) - large content as snapshot', async () => {\n\t\tawait testEncoding(URI.file(join(testDir, 'lorem.txt')), UTF16be, createTextModelSnapshot('Hello\\nWorld'), 'Hello\\nWorld');\n\t});\n\n\tasync function testEncoding(resource: URI, encoding: string, content: string | ITextSnapshot, expectedContent: string) {\n\t\tawait service.write(resource, content, { encoding });\n\n\t\tconst detectedEncoding = await detectEncodingByBOM(resource.fsPath);\n\t\tassert.strictEqual(detectedEncoding, encoding);\n\n\t\tconst resolved = await service.readStream(resource);\n\t\tassert.strictEqual(resolved.encoding, encoding);\n\n\t\tconst textBuffer = disposables.add(resolved.value.create(isWindows ? DefaultEndOfLine.CRLF : DefaultEndOfLine.LF).textBuffer);\n\t\tassert.strictEqual(snapshotToString(textBuffer.createSnapshot(false)), expectedContent);\n\t}\n\n\ttest('write - use encoding (cp1252)', async () => {\n\t\tconst filePath = join(testDir, 'some_cp1252.txt');\n\t\tconst contents = await readFile(filePath, 'utf8');\n\t\tconst eol = /\\r\\n/.test(contents) ? '\\r\\n' : '\\n';\n\t\tawait testEncodingKeepsData(URI.file(filePath), 'cp1252', ['ObjectCount = LoadObjects(\"\u00D6ffentlicher Ordner\");', '', 'Private = \"Pers\u00F6nliche Information\"', ''].join(eol));\n\t});\n\n\ttest('write - use encoding (shiftjis)', async () => {\n\t\tawait testEncodingKeepsData(URI.file(join(testDir, 'some_shiftjis.txt')), 'shiftjis', '\u4E2D\u6587abc');\n\t});\n\n\ttest('write - use encoding (gbk)', async () => {\n\t\tawait testEncodingKeepsData(URI.file(join(testDir, 'some_gbk.txt')), 'gbk', '\u4E2D\u56FDabc');\n\t});\n\n\ttest('write - use encoding (cyrillic)', async () => {\n\t\tawait testEncodingKeepsData(URI.file(join(testDir, 'some_cyrillic.txt')), 'cp866', '\u0410\u0411\u0412\u0413\u0414\u0415\u0416\u0417\u0418\u0419\u041A\u041B\u041C\u041D\u041E\u041F\u0420\u0421\u0422\u0423\u0424\u0425\u0426\u0427\u0428\u0429\u042A\u042B\u042C\u042D\u042E\u042F\u0430\u0431\u0432\u0433\u0434\u0435\u0436\u0437\u0438\u0439\u043A\u043B\u043C\u043D\u043E\u043F\u0440\u0441\u0442\u0443\u0444\u0445\u0446\u0447\u0448\u0449\u044A\u044B\u044C\u044D\u044E\u044F');\n\t});\n\n\ttest('write - use encoding (big5)', async () => {\n\t\tawait testEncodingKeepsData(URI.file(join(testDir, 'some_big5.txt')), 'cp950', '\u4E2D\u6587abc');\n\t});\n\n\tasync function testEncodingKeepsData(resource: URI, encoding: string, expected: string) {\n\t\tlet resolved = await service.readStream(resource, { encoding });\n\t\tconst textBuffer = disposables.add(resolved.value.create(isWindows ? DefaultEndOfLine.CRLF : DefaultEndOfLine.LF).textBuffer);\n\t\tconst content = snapshotToString(textBuffer.createSnapshot(false));\n\t\tassert.strictEqual(content, expected);\n\n\t\tawait service.write(resource, content, { encoding });\n\n\t\tresolved = await service.readStream(resource, { encoding });\n\t\tconst textBuffer2 = disposables.add(resolved.value.create(DefaultEndOfLine.CRLF).textBuffer);\n\t\tassert.strictEqual(snapshotToString(textBuffer2.createSnapshot(false)), content);\n\n\t\tawait service.write(resource, createTextModelSnapshot(content), { encoding });\n\n\t\tresolved = await service.readStream(resource, { encoding });\n\t\tconst textBuffer3 = disposables.add(resolved.value.create(DefaultEndOfLine.CRLF).textBuffer);\n\t\tassert.strictEqual(snapshotToString(textBuffer3.createSnapshot(false)), content);\n\t}\n\n\ttest('write - no encoding - content as string', async () => {\n\t\tconst resource = URI.file(join(testDir, 'small.txt'));\n\n\t\tconst content = (await readFile(resource.fsPath)).toString();\n\n\t\tawait service.write(resource, content);\n\n\t\tconst resolved = await service.readStream(resource);\n\t\tassert.strictEqual(resolved.value.getFirstLineText(999999), content);\n\t});\n\n\ttest('write - no encoding - content as snapshot', async () => {\n\t\tconst resource = URI.file(join(testDir, 'small.txt'));\n\n\t\tconst content = (await readFile(resource.fsPath)).toString();\n\n\t\tawait service.write(resource, createTextModelSnapshot(content));\n\n\t\tconst resolved = await service.readStream(resource);\n\t\tassert.strictEqual(resolved.value.getFirstLineText(999999), content);\n\t});\n\n\ttest('write - encoding preserved (UTF 16 LE) - content as string', async () => {\n\t\tconst resource = URI.file(join(testDir, 'some_utf16le.css'));\n\n\t\tconst resolved = await service.readStream(resource);\n\t\tassert.strictEqual(resolved.encoding, UTF16le);\n\n\t\tawait testEncoding(URI.file(join(testDir, 'some_utf16le.css')), UTF16le, 'Hello\\nWorld', 'Hello\\nWorld');\n\t});\n\n\ttest('write - encoding preserved (UTF 16 LE) - content as snapshot', async () => {\n\t\tconst resource = URI.file(join(testDir, 'some_utf16le.css'));\n\n\t\tconst resolved = await service.readStream(resource);\n\t\tassert.strictEqual(resolved.encoding, UTF16le);\n\n\t\tawait testEncoding(URI.file(join(testDir, 'some_utf16le.css')), UTF16le, createTextModelSnapshot('Hello\\nWorld'), 'Hello\\nWorld');\n\t});\n\n\ttest('write - UTF8 variations - content as string', async () => {\n\t\tconst resource = URI.file(join(testDir, 'index.html'));\n\n\t\tlet detectedEncoding = await detectEncodingByBOM(resource.fsPath);\n\t\tassert.strictEqual(detectedEncoding, null);\n\n\t\tconst content = (await readFile(resource.fsPath)).toString() + 'updates';\n\t\tawait service.write(resource, content, { encoding: UTF8_with_bom });\n\n\t\tdetectedEncoding = await detectEncodingByBOM(resource.fsPath);\n\t\tassert.strictEqual(detectedEncoding, UTF8_with_bom);\n\n\t\t// ensure BOM preserved if enforced\n\t\tawait service.write(resource, content, { encoding: UTF8_with_bom });\n\t\tdetectedEncoding = await detectEncodingByBOM(resource.fsPath);\n\t\tassert.strictEqual(detectedEncoding, UTF8_with_bom);\n\n\t\t// allow to remove BOM\n\t\tawait service.write(resource, content, { encoding: UTF8 });\n\t\tdetectedEncoding = await detectEncodingByBOM(resource.fsPath);\n\t\tassert.strictEqual(detectedEncoding, null);\n\n\t\t// BOM does not come back\n\t\tawait service.write(resource, content, { encoding: UTF8 });\n\t\tdetectedEncoding = await detectEncodingByBOM(resource.fsPath);\n\t\tassert.strictEqual(detectedEncoding, null);\n\t});\n\n\ttest('write - UTF8 variations - content as snapshot', async () => {\n\t\tconst resource = URI.file(join(testDir, 'index.html'));\n\n\t\tlet detectedEncoding = await detectEncodingByBOM(resource.fsPath);\n\t\tassert.strictEqual(detectedEncoding, null);\n\n\t\tconst model = disposables.add(createTextModel((await readFile(resource.fsPath)).toString() + 'updates'));\n\t\tawait service.write(resource, model.createSnapshot(), { encoding: UTF8_with_bom });\n\n\t\tdetectedEncoding = await detectEncodingByBOM(resource.fsPath);\n\t\tassert.strictEqual(detectedEncoding, UTF8_with_bom);\n\n\t\t// ensure BOM preserved if enforced\n\t\tawait service.write(resource, model.createSnapshot(), { encoding: UTF8_with_bom });\n\t\tdetectedEncoding = await detectEncodingByBOM(resource.fsPath);\n\t\tassert.strictEqual(detectedEncoding, UTF8_with_bom);\n\n\t\t// allow to remove BOM\n\t\tawait service.write(resource, model.createSnapshot(), { encoding: UTF8 });\n\t\tdetectedEncoding = await detectEncodingByBOM(resource.fsPath);\n\t\tassert.strictEqual(detectedEncoding, null);\n\n\t\t// BOM does not come back\n\t\tawait service.write(resource, model.createSnapshot(), { encoding: UTF8 });\n\t\tdetectedEncoding = await detectEncodingByBOM(resource.fsPath);\n\t\tassert.strictEqual(detectedEncoding, null);\n\t});\n\n\ttest('write - preserve UTF8 BOM - content as string', async () => {\n\t\tconst resource = URI.file(join(testDir, 'some_utf8_bom.txt'));\n\n\t\tlet detectedEncoding = await detectEncodingByBOM(resource.fsPath);\n\t\tassert.strictEqual(detectedEncoding, UTF8_with_bom);\n\n\t\tawait service.write(resource, 'Hello World', { encoding: detectedEncoding });\n\t\tdetectedEncoding = await detectEncodingByBOM(resource.fsPath);\n\t\tassert.strictEqual(detectedEncoding, UTF8_with_bom);\n\t});\n\n\ttest('write - ensure BOM in empty file - content as string', async () => {\n\t\tconst resource = URI.file(join(testDir, 'small.txt'));\n\n\t\tawait service.write(resource, '', { encoding: UTF8_with_bom });\n\n\t\tconst detectedEncoding = await detectEncodingByBOM(resource.fsPath);\n\t\tassert.strictEqual(detectedEncoding, UTF8_with_bom);\n\t});\n\n\ttest('write - ensure BOM in empty file - content as snapshot', async () => {\n\t\tconst resource = URI.file(join(testDir, 'small.txt'));\n\n\t\tawait service.write(resource, createTextModelSnapshot(''), { encoding: UTF8_with_bom });\n\n\t\tconst detectedEncoding = await detectEncodingByBOM(resource.fsPath);\n\t\tassert.strictEqual(detectedEncoding, UTF8_with_bom);\n\t});\n\n\ttest('readStream - small text', async () => {\n\t\tconst resource = URI.file(join(testDir, 'small.txt'));\n\n\t\tawait testReadStream(resource);\n\t});\n\n\ttest('readStream - large text', async () => {\n\t\tconst resource = URI.file(join(testDir, 'lorem.txt'));\n\n\t\tawait testReadStream(resource);\n\t});\n\n\tasync function testReadStream(resource: URI): Promise<void> {\n\t\tconst result = await service.readStream(resource);\n\n\t\tassert.strictEqual(result.name, basename(resource.fsPath));\n\t\tassert.strictEqual(result.size, (await stat(resource.fsPath)).size);\n\n\t\tconst content = (await readFile(resource.fsPath)).toString();\n\t\tconst textBuffer = disposables.add(result.value.create(DefaultEndOfLine.LF).textBuffer);\n\t\tassert.strictEqual(\n\t\t\tsnapshotToString(textBuffer.createSnapshot(false)),\n\t\t\tsnapshotToString(createTextModelSnapshot(content, false)));\n\t}\n\n\ttest('read - small text', async () => {\n\t\tconst resource = URI.file(join(testDir, 'small.txt'));\n\n\t\tawait testRead(resource);\n\t});\n\n\ttest('read - large text', async () => {\n\t\tconst resource = URI.file(join(testDir, 'lorem.txt'));\n\n\t\tawait testRead(resource);\n\t});\n\n\tasync function testRead(resource: URI): Promise<void> {\n\t\tconst result = await service.read(resource);\n\n\t\tassert.strictEqual(result.name, basename(resource.fsPath));\n\t\tassert.strictEqual(result.size, (await stat(resource.fsPath)).size);\n\t\tassert.strictEqual(result.value, (await readFile(resource.fsPath)).toString());\n\t}\n\n\ttest('readStream - encoding picked up (CP1252)', async () => {\n\t\tconst resource = URI.file(join(testDir, 'some_small_cp1252.txt'));\n\t\tconst encoding = 'windows1252';\n\n\t\tconst result = await service.readStream(resource, { encoding });\n\t\tassert.strictEqual(result.encoding, encoding);\n\t\tassert.strictEqual(result.value.getFirstLineText(999999), 'Private = \"Pers\u00F6nliche\u00DF Information\"');\n\t});\n\n\ttest('read - encoding picked up (CP1252)', async () => {\n\t\tconst resource = URI.file(join(testDir, 'some_small_cp1252.txt'));\n\t\tconst encoding = 'windows1252';\n\n\t\tconst result = await service.read(resource, { encoding });\n\t\tassert.strictEqual(result.encoding, encoding);\n\t\tassert.strictEqual(result.value, 'Private = \"Pers\u00F6nliche\u00DF Information\"');\n\t});\n\n\ttest('read - encoding picked up (binary)', async () => {\n\t\tconst resource = URI.file(join(testDir, 'some_small_cp1252.txt'));\n\t\tconst encoding = 'binary';\n\n\t\tconst result = await service.read(resource, { encoding });\n\t\tassert.strictEqual(result.encoding, encoding);\n\t\tassert.strictEqual(result.value, 'Private = \"Pers\u00F6nliche\u00DF Information\"');\n\t});\n\n\ttest('read - encoding picked up (base64)', async () => {\n\t\tconst resource = URI.file(join(testDir, 'some_small_cp1252.txt'));\n\t\tconst encoding = 'base64';\n\n\t\tconst result = await service.read(resource, { encoding });\n\t\tassert.strictEqual(result.encoding, encoding);\n\t\tassert.strictEqual(result.value, btoa('Private = \"Pers\u00F6nliche\u00DF Information\"'));\n\t});\n\n\ttest('readStream - user overrides BOM', async () => {\n\t\tconst resource = URI.file(join(testDir, 'some_utf16le.css'));\n\n\t\tconst result = await service.readStream(resource, { encoding: 'windows1252' });\n\t\tassert.strictEqual(result.encoding, 'windows1252');\n\t});\n\n\ttest('readStream - BOM removed', async () => {\n\t\tconst resource = URI.file(join(testDir, 'some_utf8_bom.txt'));\n\n\t\tconst result = await service.readStream(resource);\n\t\tassert.strictEqual(result.value.getFirstLineText(999999), 'This is some UTF 8 with BOM file.');\n\t});\n\n\ttest('readStream - invalid encoding', async () => {\n\t\tconst resource = URI.file(join(testDir, 'index.html'));\n\n\t\tconst result = await service.readStream(resource, { encoding: 'superduper' });\n\t\tassert.strictEqual(result.encoding, 'utf8');\n\t});\n\n\ttest('readStream - encoding override', async () => {\n\t\tconst resource = URI.file(join(testDir, 'some.utf16le'));\n\n\t\tconst result = await service.readStream(resource, { encoding: 'windows1252' });\n\t\tassert.strictEqual(result.encoding, 'utf16le');\n\t\tassert.strictEqual(result.value.getFirstLineText(999999), 'This is some UTF 16 with BOM file.');\n\t});\n\n\ttest('readStream - large Big5', async () => {\n\t\tawait testLargeEncoding('big5', '\u4E2D\u6587abc');\n\t});\n\n\ttest('readStream - large CP1252', async () => {\n\t\tawait testLargeEncoding('cp1252', '\u00F6\u00E4\u00FC\u00DF');\n\t});\n\n\ttest('readStream - large Cyrillic', async () => {\n\t\tawait testLargeEncoding('cp866', '\u0410\u0411\u0412\u0413\u0414\u0415\u0416\u0417\u0418\u0419\u041A\u041B\u041C\u041D\u041E\u041F\u0420\u0421\u0422\u0423\u0424\u0425\u0426\u0427\u0428\u0429\u042A\u042B\u042C\u042D\u042E\u042F\u0430\u0431\u0432\u0433\u0434\u0435\u0436\u0437\u0438\u0439\u043A\u043B\u043C\u043D\u043E\u043F\u0440\u0441\u0442\u0443\u0444\u0445\u0446\u0447\u0448\u0449\u044A\u044B\u044C\u044D\u044E\u044F');\n\t});\n\n\ttest('readStream - large GBK', async () => {\n\t\tawait testLargeEncoding('gbk', '\u4E2D\u56FDabc');\n\t});\n\n\ttest('readStream - large ShiftJIS', async () => {\n\t\tawait testLargeEncoding('shiftjis', '\u4E2D\u6587abc');\n\t});\n\n\ttest('readStream - large UTF8 BOM', async () => {\n\t\tawait testLargeEncoding('utf8bom', '\u00F6\u00E4\u00FC\u00DF');\n\t});\n\n\ttest('readStream - large UTF16 LE', async () => {\n\t\tawait testLargeEncoding('utf16le', '\u00F6\u00E4\u00FC\u00DF');\n\t});\n\n\ttest('readStream - large UTF16 BE', async () => {\n\t\tawait testLargeEncoding('utf16be', '\u00F6\u00E4\u00FC\u00DF');\n\t});\n\n\tasync function testLargeEncoding(encoding: string, needle: string): Promise<void> {\n\t\tconst resource = URI.file(join(testDir, `lorem_${encoding}.txt`));\n\n\t\t// Verify via `ITextFileService.readStream`\n\t\tconst result = await service.readStream(resource, { encoding });\n\t\tassert.strictEqual(result.encoding, encoding);\n\n\t\tconst textBuffer = disposables.add(result.value.create(DefaultEndOfLine.LF).textBuffer);\n\t\tlet contents = snapshotToString(textBuffer.createSnapshot(false));\n\n\t\tassert.strictEqual(contents.indexOf(needle), 0);\n\t\tassert.ok(contents.indexOf(needle, 10) > 0);\n\n\t\t// Verify via `ITextFileService.getDecodedTextFactory`\n\t\tconst rawFile = await params.readFile(resource.fsPath);\n\t\tlet rawFileVSBuffer: VSBuffer;\n\t\tif (rawFile instanceof VSBuffer) {\n\t\t\trawFileVSBuffer = rawFile;\n\t\t} else {\n\t\t\trawFileVSBuffer = VSBuffer.wrap(rawFile);\n\t\t}\n\n\t\tconst factory = await createTextBufferFactoryFromStream(await service.getDecodedStream(resource, bufferToStream(rawFileVSBuffer), { encoding }));\n\n\t\tconst textBuffer2 = disposables.add(factory.create(DefaultEndOfLine.LF).textBuffer);\n\t\tcontents = snapshotToString(textBuffer2.createSnapshot(false));\n\n\t\tassert.strictEqual(contents.indexOf(needle), 0);\n\t\tassert.ok(contents.indexOf(needle, 10) > 0);\n\t}\n\n\ttest('readStream - UTF16 LE (no BOM)', async () => {\n\t\tconst resource = URI.file(join(testDir, 'utf16_le_nobom.txt'));\n\n\t\tconst result = await service.readStream(resource);\n\t\tassert.strictEqual(result.encoding, 'utf16le');\n\t});\n\n\ttest('readStream - UTF16 BE (no BOM)', async () => {\n\t\tconst resource = URI.file(join(testDir, 'utf16_be_nobom.txt'));\n\n\t\tconst result = await service.readStream(resource);\n\t\tassert.strictEqual(result.encoding, 'utf16be');\n\t});\n\n\ttest('readStream - autoguessEncoding', async () => {\n\t\tconst resource = URI.file(join(testDir, 'some_cp1252.txt'));\n\n\t\tconst result = await service.readStream(resource, { autoGuessEncoding: true });\n\t\tassert.strictEqual(result.encoding, 'windows1252');\n\t});\n\n\ttest('readStream - autoguessEncoding (candidateGuessEncodings)', async () => {\n\t\t// This file is determined to be Windows-1252 unless candidateDetectEncoding is set.\n\t\tconst resource = URI.file(join(testDir, 'some.shiftjis.1.txt'));\n\n\t\tconst result = await service.readStream(resource, { autoGuessEncoding: true, candidateGuessEncodings: ['utf-8', 'shiftjis', 'euc-jp'] });\n\t\tassert.strictEqual(result.encoding, 'shiftjis');\n\t});\n\n\ttest('readStream - autoguessEncoding (candidateGuessEncodings is Empty)', async () => {\n\t\tconst resource = URI.file(join(testDir, 'some_cp1252.txt'));\n\n\t\tconst result = await service.readStream(resource, { autoGuessEncoding: true, candidateGuessEncodings: [] });\n\t\tassert.strictEqual(result.encoding, 'windows1252');\n\t});\n\n\ttest('readStream - FILE_IS_BINARY', async () => {\n\t\tconst resource = URI.file(join(testDir, 'binary.txt'));\n\n\t\tlet error: TextFileOperationError | undefined = undefined;\n\t\ttry {\n\t\t\tawait service.readStream(resource, { acceptTextOnly: true });\n\t\t} catch (err) {\n\t\t\terror = err;\n\t\t}\n\n\t\tassert.ok(error);\n\t\tassert.strictEqual(error.textFileOperationResult, TextFileOperationResult.FILE_IS_BINARY);\n\n\t\tconst result = await service.readStream(URI.file(join(testDir, 'small.txt')), { acceptTextOnly: true });\n\t\tassert.strictEqual(result.name, 'small.txt');\n\t});\n\n\ttest('read - FILE_IS_BINARY', async () => {\n\t\tconst resource = URI.file(join(testDir, 'binary.txt'));\n\n\t\tlet error: TextFileOperationError | undefined = undefined;\n\t\ttry {\n\t\t\tawait service.read(resource, { acceptTextOnly: true });\n\t\t} catch (err) {\n\t\t\terror = err;\n\t\t}\n\n\t\tassert.ok(error);\n\t\tassert.strictEqual(error.textFileOperationResult, TextFileOperationResult.FILE_IS_BINARY);\n\n\t\tconst result = await service.read(URI.file(join(testDir, 'small.txt')), { acceptTextOnly: true });\n\t\tassert.strictEqual(result.name, 'small.txt');\n\t});\n}\n"],
  "mappings": "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",
  "names": []
}
