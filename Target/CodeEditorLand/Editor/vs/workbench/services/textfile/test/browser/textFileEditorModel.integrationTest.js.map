{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/textfile/test/browser/textFileEditorModel.integrationTest.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport assert from 'assert';\nimport { IInstantiationService } from '../../../../../platform/instantiation/common/instantiation.js';\nimport { TextFileEditorModel } from '../../common/textFileEditorModel.js';\nimport { workbenchInstantiationService, TestServiceAccessor } from '../../../../test/browser/workbenchTestServices.js';\nimport { ensureNoDisposablesAreLeakedInTestSuite, toResource } from '../../../../../base/test/common/utils.js';\nimport { TextFileEditorModelManager } from '../../common/textFileEditorModelManager.js';\nimport { createTextBufferFactoryFromStream } from '../../../../../editor/common/model/textModel.js';\nimport { CancellationToken } from '../../../../../base/common/cancellation.js';\nimport { URI } from '../../../../../base/common/uri.js';\nimport { bufferToStream, VSBuffer } from '../../../../../base/common/buffer.js';\nimport { DisposableStore, toDisposable } from '../../../../../base/common/lifecycle.js';\n\nsuite('Files - TextFileEditorModel (integration)', () => {\n\n\tconst disposables = new DisposableStore();\n\n\tlet instantiationService: IInstantiationService;\n\tlet accessor: TestServiceAccessor;\n\tlet content: string;\n\n\tsetup(() => {\n\t\tinstantiationService = workbenchInstantiationService(undefined, disposables);\n\t\taccessor = instantiationService.createInstance(TestServiceAccessor);\n\t\tcontent = accessor.fileService.getContent();\n\t\tdisposables.add(toDisposable(() => accessor.fileService.setContent(content)));\n\t\tdisposables.add(<TextFileEditorModelManager>accessor.textFileService.files);\n\t});\n\n\tteardown(() => {\n\t\tdisposables.clear();\n\t});\n\n\ttest('backup and restore (simple)', async function () {\n\t\treturn testBackupAndRestore(toResource.call(this, '/path/index_async.txt'), toResource.call(this, '/path/index_async2.txt'), 'Some very small file text content.');\n\t});\n\n\ttest('backup and restore (large, #121347)', async function () {\n\t\tconst largeContent = '\uAD6D\uC5B4\uD55C\\n'.repeat(100000);\n\t\treturn testBackupAndRestore(toResource.call(this, '/path/index_async.txt'), toResource.call(this, '/path/index_async2.txt'), largeContent);\n\t});\n\n\tasync function testBackupAndRestore(resourceA: URI, resourceB: URI, contents: string): Promise<void> {\n\t\tconst originalModel: TextFileEditorModel = disposables.add(instantiationService.createInstance(TextFileEditorModel, resourceA, 'utf8', undefined));\n\t\tawait originalModel.resolve({\n\t\t\tcontents: await createTextBufferFactoryFromStream(await accessor.textFileService.getDecodedStream(resourceA, bufferToStream(VSBuffer.fromString(contents))))\n\t\t});\n\n\t\tassert.strictEqual(originalModel.textEditorModel?.getValue(), contents);\n\n\t\tconst backup = await originalModel.backup(CancellationToken.None);\n\t\tconst modelRestoredIdentifier = { typeId: originalModel.typeId, resource: resourceB };\n\t\tawait accessor.workingCopyBackupService.backup(modelRestoredIdentifier, backup.content);\n\n\t\tconst modelRestored: TextFileEditorModel = disposables.add(instantiationService.createInstance(TextFileEditorModel, modelRestoredIdentifier.resource, 'utf8', undefined));\n\t\tawait modelRestored.resolve();\n\n\t\tassert.strictEqual(modelRestored.textEditorModel?.getValue(), contents);\n\t\tassert.strictEqual(modelRestored.isDirty(), true);\n\t}\n\n\tensureNoDisposablesAreLeakedInTestSuite();\n});\n"],
  "mappings": ";;AAKA,OAAO,YAAY;AACnB,SAAS,6BAA6B;AACtC,SAAS,2BAA2B;AACpC,SAAS,+BAA+B,2BAA2B;AACnE,SAAS,yCAAyC,kBAAkB;AACpE,SAAS,kCAAkC;AAC3C,SAAS,yCAAyC;AAClD,SAAS,yBAAyB;AAClC,SAAS,WAAW;AACpB,SAAS,gBAAgB,gBAAgB;AACzC,SAAS,iBAAiB,oBAAoB;AAE9C,MAAM,6CAA6C,MAAM;AAExD,QAAM,cAAc,IAAI,gBAAgB;AAExC,MAAI;AACJ,MAAI;AACJ,MAAI;AAEJ,QAAM,MAAM;AACX,2BAAuB,8BAA8B,QAAW,WAAW;AAC3E,eAAW,qBAAqB,eAAe,mBAAmB;AAClE,cAAU,SAAS,YAAY,WAAW;AAC1C,gBAAY,IAAI,aAAa,MAAM,SAAS,YAAY,WAAW,OAAO,CAAC,CAAC;AAC5E,gBAAY,IAAgC,SAAS,gBAAgB,KAAK;AAAA,EAC3E,CAAC;AAED,WAAS,MAAM;AACd,gBAAY,MAAM;AAAA,EACnB,CAAC;AAED,OAAK,+BAA+B,iBAAkB;AACrD,WAAO,qBAAqB,WAAW,KAAK,MAAM,uBAAuB,GAAG,WAAW,KAAK,MAAM,wBAAwB,GAAG,oCAAoC;AAAA,EAClK,CAAC;AAED,OAAK,uCAAuC,iBAAkB;AAC7D,UAAM,eAAe,uBAAQ,OAAO,GAAM;AAC1C,WAAO,qBAAqB,WAAW,KAAK,MAAM,uBAAuB,GAAG,WAAW,KAAK,MAAM,wBAAwB,GAAG,YAAY;AAAA,EAC1I,CAAC;AAED,iBAAe,qBAAqB,WAAgB,WAAgB,UAAiC;AACpG,UAAM,gBAAqC,YAAY,IAAI,qBAAqB,eAAe,qBAAqB,WAAW,QAAQ,MAAS,CAAC;AACjJ,UAAM,cAAc,QAAQ;AAAA,MAC3B,UAAU,MAAM,kCAAkC,MAAM,SAAS,gBAAgB,iBAAiB,WAAW,eAAe,SAAS,WAAW,QAAQ,CAAC,CAAC,CAAC;AAAA,IAC5J,CAAC;AAED,WAAO,YAAY,cAAc,iBAAiB,SAAS,GAAG,QAAQ;AAEtE,UAAM,SAAS,MAAM,cAAc,OAAO,kBAAkB,IAAI;AAChE,UAAM,0BAA0B,EAAE,QAAQ,cAAc,QAAQ,UAAU,UAAU;AACpF,UAAM,SAAS,yBAAyB,OAAO,yBAAyB,OAAO,OAAO;AAEtF,UAAM,gBAAqC,YAAY,IAAI,qBAAqB,eAAe,qBAAqB,wBAAwB,UAAU,QAAQ,MAAS,CAAC;AACxK,UAAM,cAAc,QAAQ;AAE5B,WAAO,YAAY,cAAc,iBAAiB,SAAS,GAAG,QAAQ;AACtE,WAAO,YAAY,cAAc,QAAQ,GAAG,IAAI;AAAA,EACjD;AAjBe;AAmBf,0CAAwC;AACzC,CAAC;",
  "names": []
}
