{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/textfile/test/browser/textFileService.test.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport assert from 'assert';\nimport { workbenchInstantiationService, TestServiceAccessor, ITestTextFileEditorModelManager } from '../../../../test/browser/workbenchTestServices.js';\nimport { ensureNoDisposablesAreLeakedInTestSuite, toResource } from '../../../../../base/test/common/utils.js';\nimport { IInstantiationService } from '../../../../../platform/instantiation/common/instantiation.js';\nimport { TextFileEditorModel } from '../../common/textFileEditorModel.js';\nimport { FileOperation } from '../../../../../platform/files/common/files.js';\nimport { DisposableStore } from '../../../../../base/common/lifecycle.js';\n\nsuite('Files - TextFileService', () => {\n\n\tconst disposables = new DisposableStore();\n\tlet instantiationService: IInstantiationService;\n\tlet accessor: TestServiceAccessor;\n\n\tsetup(() => {\n\t\tinstantiationService = workbenchInstantiationService(undefined, disposables);\n\t\taccessor = instantiationService.createInstance(TestServiceAccessor);\n\t\tdisposables.add(<ITestTextFileEditorModelManager>accessor.textFileService.files);\n\t});\n\n\tteardown(() => {\n\t\tdisposables.clear();\n\t});\n\n\ttest('isDirty/getDirty - files and untitled', async function () {\n\t\tconst model: TextFileEditorModel = disposables.add(instantiationService.createInstance(TextFileEditorModel, toResource.call(this, '/path/file.txt'), 'utf8', undefined));\n\t\t(<ITestTextFileEditorModelManager>accessor.textFileService.files).add(model.resource, model);\n\n\t\tawait model.resolve();\n\n\t\tassert.ok(!accessor.textFileService.isDirty(model.resource));\n\t\tmodel.textEditorModel!.setValue('foo');\n\n\t\tassert.ok(accessor.textFileService.isDirty(model.resource));\n\n\t\tconst untitled = disposables.add(await accessor.textFileService.untitled.resolve());\n\n\t\tassert.ok(!accessor.textFileService.isDirty(untitled.resource));\n\t\tuntitled.textEditorModel?.setValue('changed');\n\n\t\tassert.ok(accessor.textFileService.isDirty(untitled.resource));\n\t});\n\n\ttest('save - file', async function () {\n\t\tconst model: TextFileEditorModel = disposables.add(instantiationService.createInstance(TextFileEditorModel, toResource.call(this, '/path/file.txt'), 'utf8', undefined));\n\t\t(<ITestTextFileEditorModelManager>accessor.textFileService.files).add(model.resource, model);\n\n\t\tawait model.resolve();\n\t\tmodel.textEditorModel!.setValue('foo');\n\t\tassert.ok(accessor.textFileService.isDirty(model.resource));\n\n\t\tconst res = await accessor.textFileService.save(model.resource);\n\t\tassert.strictEqual(res?.toString(), model.resource.toString());\n\t\tassert.ok(!accessor.textFileService.isDirty(model.resource));\n\t});\n\n\ttest('saveAll - file', async function () {\n\t\tconst model: TextFileEditorModel = disposables.add(instantiationService.createInstance(TextFileEditorModel, toResource.call(this, '/path/file.txt'), 'utf8', undefined));\n\t\t(<ITestTextFileEditorModelManager>accessor.textFileService.files).add(model.resource, model);\n\n\t\tawait model.resolve();\n\t\tmodel.textEditorModel!.setValue('foo');\n\t\tassert.ok(accessor.textFileService.isDirty(model.resource));\n\n\t\tconst res = await accessor.textFileService.save(model.resource);\n\t\tassert.strictEqual(res?.toString(), model.resource.toString());\n\t\tassert.ok(!accessor.textFileService.isDirty(model.resource));\n\t});\n\n\ttest('saveAs - file', async function () {\n\t\tconst model: TextFileEditorModel = disposables.add(instantiationService.createInstance(TextFileEditorModel, toResource.call(this, '/path/file.txt'), 'utf8', undefined));\n\t\t(<ITestTextFileEditorModelManager>accessor.textFileService.files).add(model.resource, model);\n\t\taccessor.fileDialogService.setPickFileToSave(model.resource);\n\n\t\tawait model.resolve();\n\t\tmodel.textEditorModel!.setValue('foo');\n\t\tassert.ok(accessor.textFileService.isDirty(model.resource));\n\n\t\tconst res = await accessor.textFileService.saveAs(model.resource);\n\t\tassert.strictEqual(res!.toString(), model.resource.toString());\n\t\tassert.ok(!accessor.textFileService.isDirty(model.resource));\n\t});\n\n\ttest('revert - file', async function () {\n\t\tconst model: TextFileEditorModel = disposables.add(instantiationService.createInstance(TextFileEditorModel, toResource.call(this, '/path/file.txt'), 'utf8', undefined));\n\t\t(<ITestTextFileEditorModelManager>accessor.textFileService.files).add(model.resource, model);\n\t\taccessor.fileDialogService.setPickFileToSave(model.resource);\n\n\t\tawait model.resolve();\n\t\tmodel.textEditorModel!.setValue('foo');\n\t\tassert.ok(accessor.textFileService.isDirty(model.resource));\n\n\t\tawait accessor.textFileService.revert(model.resource);\n\t\tassert.ok(!accessor.textFileService.isDirty(model.resource));\n\t});\n\n\ttest('create does not overwrite existing model', async function () {\n\t\tconst model: TextFileEditorModel = disposables.add(instantiationService.createInstance(TextFileEditorModel, toResource.call(this, '/path/file.txt'), 'utf8', undefined));\n\t\t(<ITestTextFileEditorModelManager>accessor.textFileService.files).add(model.resource, model);\n\n\t\tawait model.resolve();\n\t\tmodel.textEditorModel!.setValue('foo');\n\t\tassert.ok(accessor.textFileService.isDirty(model.resource));\n\n\t\tlet eventCounter = 0;\n\n\t\tdisposables.add(accessor.workingCopyFileService.addFileOperationParticipant({\n\t\t\tparticipate: async files => {\n\t\t\t\tassert.strictEqual(files[0].target.toString(), model.resource.toString());\n\t\t\t\teventCounter++;\n\t\t\t}\n\t\t}));\n\n\t\tdisposables.add(accessor.workingCopyFileService.onDidRunWorkingCopyFileOperation(e => {\n\t\t\tassert.strictEqual(e.operation, FileOperation.CREATE);\n\t\t\tassert.strictEqual(e.files[0].target.toString(), model.resource.toString());\n\t\t\teventCounter++;\n\t\t}));\n\n\t\tawait accessor.textFileService.create([{ resource: model.resource, value: 'Foo' }]);\n\t\tassert.ok(!accessor.textFileService.isDirty(model.resource));\n\n\t\tassert.strictEqual(eventCounter, 2);\n\t});\n\n\ttest('Filename Suggestion - Suggest prefix only when there are no relevant extensions', () => {\n\t\tdisposables.add(accessor.languageService.registerLanguage({\n\t\t\tid: 'plumbus0',\n\t\t\textensions: ['.one', '.two']\n\t\t}));\n\n\t\tconst suggested = accessor.textFileService.suggestFilename('shleem', 'Untitled-1');\n\t\tassert.strictEqual(suggested, 'Untitled-1');\n\t});\n\n\ttest('Filename Suggestion - Suggest prefix with first extension', () => {\n\t\tdisposables.add(accessor.languageService.registerLanguage({\n\t\t\tid: 'plumbus1',\n\t\t\textensions: ['.shleem', '.gazorpazorp'],\n\t\t\tfilenames: ['plumbus']\n\t\t}));\n\n\t\tconst suggested = accessor.textFileService.suggestFilename('plumbus1', 'Untitled-1');\n\t\tassert.strictEqual(suggested, 'Untitled-1.shleem');\n\t});\n\n\ttest('Filename Suggestion - Preserve extension if it matchers', () => {\n\t\tdisposables.add(accessor.languageService.registerLanguage({\n\t\t\tid: 'plumbus2',\n\t\t\textensions: ['.shleem', '.gazorpazorp'],\n\t\t}));\n\n\t\tconst suggested = accessor.textFileService.suggestFilename('plumbus2', 'Untitled-1.gazorpazorp');\n\t\tassert.strictEqual(suggested, 'Untitled-1.gazorpazorp');\n\t});\n\n\ttest('Filename Suggestion - Rewrite extension according to language', () => {\n\t\tdisposables.add(accessor.languageService.registerLanguage({\n\t\t\tid: 'plumbus2',\n\t\t\textensions: ['.shleem', '.gazorpazorp'],\n\t\t}));\n\n\t\tconst suggested = accessor.textFileService.suggestFilename('plumbus2', 'Untitled-1.foobar');\n\t\tassert.strictEqual(suggested, 'Untitled-1.shleem');\n\t});\n\n\ttest('Filename Suggestion - Suggest filename if there are no extensions', () => {\n\t\tdisposables.add(accessor.languageService.registerLanguage({\n\t\t\tid: 'plumbus2',\n\t\t\tfilenames: ['plumbus', 'shleem', 'gazorpazorp']\n\t\t}));\n\n\t\tconst suggested = accessor.textFileService.suggestFilename('plumbus2', 'Untitled-1');\n\t\tassert.strictEqual(suggested, 'plumbus');\n\t});\n\n\ttest('Filename Suggestion - Preserve filename if it matches', () => {\n\t\tdisposables.add(accessor.languageService.registerLanguage({\n\t\t\tid: 'plumbus2',\n\t\t\tfilenames: ['plumbus', 'shleem', 'gazorpazorp']\n\t\t}));\n\n\t\tconst suggested = accessor.textFileService.suggestFilename('plumbus2', 'gazorpazorp');\n\t\tassert.strictEqual(suggested, 'gazorpazorp');\n\t});\n\n\ttest('Filename Suggestion - Rewrites filename according to language', () => {\n\t\tdisposables.add(accessor.languageService.registerLanguage({\n\t\t\tid: 'plumbus2',\n\t\t\tfilenames: ['plumbus', 'shleem', 'gazorpazorp']\n\t\t}));\n\n\t\tconst suggested = accessor.textFileService.suggestFilename('plumbus2', 'foobar');\n\t\tassert.strictEqual(suggested, 'plumbus');\n\t});\n\n\tensureNoDisposablesAreLeakedInTestSuite();\n});\n"],
  "mappings": "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",
  "names": []
}
