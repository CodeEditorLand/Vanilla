{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/textfile/test/browser/textFileEditorModelManager.test.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport assert from 'assert';\nimport { URI } from '../../../../../base/common/uri.js';\nimport { IInstantiationService } from '../../../../../platform/instantiation/common/instantiation.js';\nimport { workbenchInstantiationService, TestServiceAccessor, ITestTextFileEditorModelManager } from '../../../../test/browser/workbenchTestServices.js';\nimport { TextFileEditorModel } from '../../common/textFileEditorModel.js';\nimport { FileChangesEvent, FileChangeType, FileOperationError, FileOperationResult } from '../../../../../platform/files/common/files.js';\nimport { ensureNoDisposablesAreLeakedInTestSuite, toResource } from '../../../../../base/test/common/utils.js';\nimport { PLAINTEXT_LANGUAGE_ID } from '../../../../../editor/common/languages/modesRegistry.js';\nimport { ITextFileEditorModel } from '../../common/textfiles.js';\nimport { createTextBufferFactory } from '../../../../../editor/common/model/textModel.js';\nimport { timeout } from '../../../../../base/common/async.js';\nimport { DisposableStore, toDisposable } from '../../../../../base/common/lifecycle.js';\n\nsuite('Files - TextFileEditorModelManager', () => {\n\n\tconst disposables = new DisposableStore();\n\tlet instantiationService: IInstantiationService;\n\tlet accessor: TestServiceAccessor;\n\n\tsetup(() => {\n\t\tinstantiationService = workbenchInstantiationService(undefined, disposables);\n\t\taccessor = instantiationService.createInstance(TestServiceAccessor);\n\t\tdisposables.add(toDisposable(() => accessor.textFileService.files as ITestTextFileEditorModelManager));\n\t});\n\n\tteardown(() => {\n\t\tdisposables.clear();\n\t});\n\n\ttest('add, remove, clear, get, getAll', function () {\n\t\tconst manager = accessor.textFileService.files as ITestTextFileEditorModelManager;\n\n\t\tconst model1: TextFileEditorModel = disposables.add(instantiationService.createInstance(TextFileEditorModel, toResource.call(this, '/path/random1.txt'), 'utf8', undefined));\n\t\tconst model2: TextFileEditorModel = disposables.add(instantiationService.createInstance(TextFileEditorModel, toResource.call(this, '/path/random2.txt'), 'utf8', undefined));\n\t\tconst model3: TextFileEditorModel = disposables.add(instantiationService.createInstance(TextFileEditorModel, toResource.call(this, '/path/random3.txt'), 'utf8', undefined));\n\n\t\tmanager.add(URI.file('/test.html'), model1);\n\t\tmanager.add(URI.file('/some/other.html'), model2);\n\t\tmanager.add(URI.file('/some/this.txt'), model3);\n\n\t\tconst fileUpper = URI.file('/TEST.html');\n\n\t\tassert(!manager.get(URI.file('foo')));\n\t\tassert.strictEqual(manager.get(URI.file('/test.html')), model1);\n\n\t\tassert.ok(!manager.get(fileUpper));\n\n\t\tlet results = manager.models;\n\t\tassert.strictEqual(3, results.length);\n\n\t\tlet result = manager.get(URI.file('/yes'));\n\t\tassert.ok(!result);\n\n\t\tresult = manager.get(URI.file('/some/other.txt'));\n\t\tassert.ok(!result);\n\n\t\tresult = manager.get(URI.file('/some/other.html'));\n\t\tassert.ok(result);\n\n\t\tresult = manager.get(fileUpper);\n\t\tassert.ok(!result);\n\n\t\tmanager.remove(URI.file(''));\n\n\t\tresults = manager.models;\n\t\tassert.strictEqual(3, results.length);\n\n\t\tmanager.remove(URI.file('/some/other.html'));\n\t\tresults = manager.models;\n\t\tassert.strictEqual(2, results.length);\n\n\t\tmanager.remove(fileUpper);\n\t\tresults = manager.models;\n\t\tassert.strictEqual(2, results.length);\n\n\t\tmanager.dispose();\n\t\tresults = manager.models;\n\t\tassert.strictEqual(0, results.length);\n\t});\n\n\ttest('resolve', async () => {\n\t\tconst manager = accessor.textFileService.files as ITestTextFileEditorModelManager;\n\t\tconst resource = URI.file('/test.html');\n\t\tconst encoding = 'utf8';\n\n\t\tconst events: ITextFileEditorModel[] = [];\n\t\tdisposables.add(manager.onDidCreate(model => {\n\t\t\tevents.push(model);\n\t\t}));\n\n\t\tconst modelPromise = manager.resolve(resource, { encoding });\n\t\tassert.ok(manager.get(resource)); // model known even before resolved()\n\n\t\tconst model1 = await modelPromise;\n\t\tassert.ok(model1);\n\t\tassert.strictEqual(model1.getEncoding(), encoding);\n\t\tassert.strictEqual(manager.get(resource), model1);\n\n\t\tconst model2 = await manager.resolve(resource, { encoding });\n\t\tassert.strictEqual(model2, model1);\n\t\tmodel1.dispose();\n\n\t\tconst model3 = await manager.resolve(resource, { encoding });\n\t\tassert.notStrictEqual(model3, model2);\n\t\tassert.strictEqual(manager.get(resource), model3);\n\t\tmodel3.dispose();\n\n\t\tassert.strictEqual(events.length, 2);\n\t\tassert.strictEqual(events[0].resource.toString(), model1.resource.toString());\n\t\tassert.strictEqual(events[1].resource.toString(), model2.resource.toString());\n\t});\n\n\ttest('resolve (async)', async () => {\n\t\tconst manager = accessor.textFileService.files as ITestTextFileEditorModelManager;\n\t\tconst resource = URI.file('/path/index.txt');\n\n\t\tdisposables.add(await manager.resolve(resource));\n\n\t\tlet didResolve = false;\n\t\tconst onDidResolve = new Promise<void>(resolve => {\n\t\t\tdisposables.add(manager.onDidResolve(({ model }) => {\n\t\t\t\tif (model.resource.toString() === resource.toString()) {\n\t\t\t\t\tdidResolve = true;\n\t\t\t\t\tresolve();\n\t\t\t\t}\n\t\t\t}));\n\t\t});\n\n\t\tmanager.resolve(resource, { reload: { async: true } });\n\n\t\tawait onDidResolve;\n\n\t\tassert.strictEqual(didResolve, true);\n\t});\n\n\ttest('resolve (sync)', async () => {\n\t\tconst manager = accessor.textFileService.files as ITestTextFileEditorModelManager;\n\t\tconst resource = URI.file('/path/index.txt');\n\n\t\tdisposables.add(await manager.resolve(resource));\n\n\t\tlet didResolve = false;\n\t\tdisposables.add(manager.onDidResolve(({ model }) => {\n\t\t\tif (model.resource.toString() === resource.toString()) {\n\t\t\t\tdidResolve = true;\n\t\t\t}\n\t\t}));\n\n\t\tawait manager.resolve(resource, { reload: { async: false } });\n\t\tassert.strictEqual(didResolve, true);\n\t});\n\n\ttest('resolve (sync) - model disposed when error and first call to resolve', async () => {\n\t\tconst manager = accessor.textFileService.files as ITestTextFileEditorModelManager;\n\t\tconst resource = URI.file('/path/index.txt');\n\n\t\taccessor.textFileService.setReadStreamErrorOnce(new FileOperationError('fail', FileOperationResult.FILE_OTHER_ERROR));\n\n\t\tlet error: Error | undefined = undefined;\n\t\ttry {\n\t\t\tdisposables.add(await manager.resolve(resource));\n\t\t} catch (e) {\n\t\t\terror = e;\n\t\t}\n\n\t\tassert.ok(error);\n\t\tassert.strictEqual(manager.models.length, 0);\n\t});\n\n\ttest('resolve (sync) - model not disposed when error and model existed before', async () => {\n\t\tconst manager = accessor.textFileService.files as ITestTextFileEditorModelManager;\n\t\tconst resource = URI.file('/path/index.txt');\n\n\t\tdisposables.add(await manager.resolve(resource));\n\n\t\taccessor.textFileService.setReadStreamErrorOnce(new FileOperationError('fail', FileOperationResult.FILE_OTHER_ERROR));\n\n\t\tlet error: Error | undefined = undefined;\n\t\ttry {\n\t\t\tdisposables.add(await manager.resolve(resource, { reload: { async: false } }));\n\t\t} catch (e) {\n\t\t\terror = e;\n\t\t}\n\n\t\tassert.ok(error);\n\t\tassert.strictEqual(manager.models.length, 1);\n\t});\n\n\ttest('resolve with initial contents', async () => {\n\t\tconst manager = accessor.textFileService.files as ITestTextFileEditorModelManager;\n\t\tconst resource = URI.file('/test.html');\n\n\t\tconst model = disposables.add(await manager.resolve(resource, { contents: createTextBufferFactory('Hello World') }));\n\t\tassert.strictEqual(model.textEditorModel?.getValue(), 'Hello World');\n\t\tassert.strictEqual(model.isDirty(), true);\n\n\t\tdisposables.add(await manager.resolve(resource, { contents: createTextBufferFactory('More Changes') }));\n\t\tassert.strictEqual(model.textEditorModel?.getValue(), 'More Changes');\n\t\tassert.strictEqual(model.isDirty(), true);\n\t});\n\n\ttest('multiple resolves execute in sequence', async () => {\n\t\tconst manager = accessor.textFileService.files as ITestTextFileEditorModelManager;\n\t\tconst resource = URI.file('/test.html');\n\n\t\tlet resolvedModel: unknown;\n\n\t\tconst contents: string[] = [];\n\t\tdisposables.add(manager.onDidResolve(e => {\n\t\t\tif (e.model.resource.toString() === resource.toString()) {\n\t\t\t\tresolvedModel = disposables.add(e.model as TextFileEditorModel);\n\t\t\t\tcontents.push(e.model.textEditorModel!.getValue());\n\t\t\t}\n\t\t}));\n\n\t\tawait Promise.all([\n\t\t\tmanager.resolve(resource),\n\t\t\tmanager.resolve(resource, { contents: createTextBufferFactory('Hello World') }),\n\t\t\tmanager.resolve(resource, { reload: { async: false } }),\n\t\t\tmanager.resolve(resource, { contents: createTextBufferFactory('More Changes') })\n\t\t]);\n\n\t\tassert.ok(resolvedModel instanceof TextFileEditorModel);\n\n\t\tassert.strictEqual(resolvedModel.textEditorModel?.getValue(), 'More Changes');\n\t\tassert.strictEqual(resolvedModel.isDirty(), true);\n\n\t\tassert.strictEqual(contents[0], 'Hello Html');\n\t\tassert.strictEqual(contents[1], 'Hello World');\n\t\tassert.strictEqual(contents[2], 'More Changes');\n\t});\n\n\ttest('removed from cache when model disposed', function () {\n\t\tconst manager = accessor.textFileService.files as ITestTextFileEditorModelManager;\n\n\t\tconst model1: TextFileEditorModel = disposables.add(instantiationService.createInstance(TextFileEditorModel, toResource.call(this, '/path/random1.txt'), 'utf8', undefined));\n\t\tconst model2: TextFileEditorModel = disposables.add(instantiationService.createInstance(TextFileEditorModel, toResource.call(this, '/path/random2.txt'), 'utf8', undefined));\n\t\tconst model3: TextFileEditorModel = disposables.add(instantiationService.createInstance(TextFileEditorModel, toResource.call(this, '/path/random3.txt'), 'utf8', undefined));\n\n\t\tmanager.add(URI.file('/test.html'), model1);\n\t\tmanager.add(URI.file('/some/other.html'), model2);\n\t\tmanager.add(URI.file('/some/this.txt'), model3);\n\n\t\tassert.strictEqual(manager.get(URI.file('/test.html')), model1);\n\n\t\tmodel1.dispose();\n\t\tassert(!manager.get(URI.file('/test.html')));\n\t});\n\n\ttest('events', async function () {\n\t\tconst manager = accessor.textFileService.files as ITestTextFileEditorModelManager;\n\n\t\tconst resource1 = toResource.call(this, '/path/index.txt');\n\t\tconst resource2 = toResource.call(this, '/path/other.txt');\n\n\t\tlet resolvedCounter = 0;\n\t\tlet removedCounter = 0;\n\t\tlet gotDirtyCounter = 0;\n\t\tlet gotNonDirtyCounter = 0;\n\t\tlet revertedCounter = 0;\n\t\tlet savedCounter = 0;\n\t\tlet encodingCounter = 0;\n\n\t\tdisposables.add(manager.onDidResolve(({ model }) => {\n\t\t\tif (model.resource.toString() === resource1.toString()) {\n\t\t\t\tresolvedCounter++;\n\t\t\t}\n\t\t}));\n\n\t\tdisposables.add(manager.onDidRemove(resource => {\n\t\t\tif (resource.toString() === resource1.toString() || resource.toString() === resource2.toString()) {\n\t\t\t\tremovedCounter++;\n\t\t\t}\n\t\t}));\n\n\t\tdisposables.add(manager.onDidChangeDirty(model => {\n\t\t\tif (model.resource.toString() === resource1.toString()) {\n\t\t\t\tif (model.isDirty()) {\n\t\t\t\t\tgotDirtyCounter++;\n\t\t\t\t} else {\n\t\t\t\t\tgotNonDirtyCounter++;\n\t\t\t\t}\n\t\t\t}\n\t\t}));\n\n\t\tdisposables.add(manager.onDidRevert(model => {\n\t\t\tif (model.resource.toString() === resource1.toString()) {\n\t\t\t\trevertedCounter++;\n\t\t\t}\n\t\t}));\n\n\t\tdisposables.add(manager.onDidSave(({ model }) => {\n\t\t\tif (model.resource.toString() === resource1.toString()) {\n\t\t\t\tsavedCounter++;\n\t\t\t}\n\t\t}));\n\n\t\tdisposables.add(manager.onDidChangeEncoding(model => {\n\t\t\tif (model.resource.toString() === resource1.toString()) {\n\t\t\t\tencodingCounter++;\n\t\t\t}\n\t\t}));\n\n\t\tconst model1 = await manager.resolve(resource1, { encoding: 'utf8' });\n\t\tassert.strictEqual(resolvedCounter, 1);\n\n\t\taccessor.fileService.fireFileChanges(new FileChangesEvent([{ resource: resource1, type: FileChangeType.DELETED }], false));\n\t\taccessor.fileService.fireFileChanges(new FileChangesEvent([{ resource: resource1, type: FileChangeType.ADDED }], false));\n\n\t\tconst model2 = await manager.resolve(resource2, { encoding: 'utf8' });\n\t\tassert.strictEqual(resolvedCounter, 2);\n\n\t\t(model1 as TextFileEditorModel).updateTextEditorModel(createTextBufferFactory('changed'));\n\t\tmodel1.updatePreferredEncoding('utf16');\n\n\t\tawait model1.revert();\n\t\t(model1 as TextFileEditorModel).updateTextEditorModel(createTextBufferFactory('changed again'));\n\n\t\tawait model1.save();\n\t\tmodel1.dispose();\n\t\tmodel2.dispose();\n\n\t\tawait model1.revert();\n\t\tassert.strictEqual(removedCounter, 2);\n\t\tassert.strictEqual(gotDirtyCounter, 2);\n\t\tassert.strictEqual(gotNonDirtyCounter, 2);\n\t\tassert.strictEqual(revertedCounter, 1);\n\t\tassert.strictEqual(savedCounter, 1);\n\t\tassert.strictEqual(encodingCounter, 2);\n\n\t\tmodel1.dispose();\n\t\tmodel2.dispose();\n\t\tassert.ok(!accessor.modelService.getModel(resource1));\n\t\tassert.ok(!accessor.modelService.getModel(resource2));\n\t});\n\n\ttest('disposing model takes it out of the manager', async function () {\n\t\tconst manager = accessor.textFileService.files as ITestTextFileEditorModelManager;\n\n\t\tconst resource = toResource.call(this, '/path/index_something.txt');\n\n\t\tconst model = await manager.resolve(resource, { encoding: 'utf8' });\n\t\tmodel.dispose();\n\t\tassert.ok(!manager.get(resource));\n\t\tassert.ok(!accessor.modelService.getModel(model.resource));\n\t});\n\n\ttest('canDispose with dirty model', async function () {\n\t\tconst manager = accessor.textFileService.files as ITestTextFileEditorModelManager;\n\n\t\tconst resource = toResource.call(this, '/path/index_something.txt');\n\n\t\tconst model = disposables.add(await manager.resolve(resource, { encoding: 'utf8' }));\n\t\t(model as TextFileEditorModel).updateTextEditorModel(createTextBufferFactory('make dirty'));\n\n\t\tconst canDisposePromise = manager.canDispose(model as TextFileEditorModel);\n\t\tassert.ok(canDisposePromise instanceof Promise);\n\n\t\tlet canDispose = false;\n\t\t(async () => {\n\t\t\tcanDispose = await canDisposePromise;\n\t\t})();\n\n\t\tassert.strictEqual(canDispose, false);\n\t\tmodel.revert({ soft: true });\n\n\t\tawait timeout(0);\n\n\t\tassert.strictEqual(canDispose, true);\n\n\t\tconst canDispose2 = manager.canDispose(model as TextFileEditorModel);\n\t\tassert.strictEqual(canDispose2, true);\n\t});\n\n\ttest('language', async function () {\n\n\t\tconst languageId = 'text-file-model-manager-test';\n\t\tdisposables.add(accessor.languageService.registerLanguage({\n\t\t\tid: languageId,\n\t\t}));\n\n\t\tconst manager = accessor.textFileService.files as ITestTextFileEditorModelManager;\n\n\t\tconst resource: URI = toResource.call(this, '/path/index_something.txt');\n\n\t\tlet model = disposables.add(await manager.resolve(resource, { languageId: languageId }));\n\t\tassert.strictEqual(model.textEditorModel!.getLanguageId(), languageId);\n\n\t\tmodel = await manager.resolve(resource, { languageId: 'text' });\n\t\tassert.strictEqual(model.textEditorModel!.getLanguageId(), PLAINTEXT_LANGUAGE_ID);\n\t});\n\n\ttest('file change events trigger reload (on a resolved model)', async () => {\n\t\tconst manager = accessor.textFileService.files as ITestTextFileEditorModelManager;\n\t\tconst resource = URI.file('/path/index.txt');\n\n\t\tdisposables.add(await manager.resolve(resource));\n\n\t\tlet didResolve = false;\n\t\tconst onDidResolve = new Promise<void>(resolve => {\n\t\t\tdisposables.add(manager.onDidResolve(({ model }) => {\n\t\t\t\tif (model.resource.toString() === resource.toString()) {\n\t\t\t\t\tdidResolve = true;\n\t\t\t\t\tresolve();\n\t\t\t\t}\n\t\t\t}));\n\t\t});\n\n\t\taccessor.fileService.fireFileChanges(new FileChangesEvent([{ resource, type: FileChangeType.UPDATED }], false));\n\n\t\tawait onDidResolve;\n\t\tassert.strictEqual(didResolve, true);\n\t});\n\n\ttest('file change events trigger reload (after a model is resolved: https://github.com/microsoft/vscode/issues/132765)', async () => {\n\t\tconst manager = accessor.textFileService.files as ITestTextFileEditorModelManager;\n\t\tconst resource = URI.file('/path/index.txt');\n\n\t\tmanager.resolve(resource);\n\n\t\tlet didResolve = false;\n\t\tlet resolvedCounter = 0;\n\t\tconst onDidResolve = new Promise<void>(resolve => {\n\t\t\tdisposables.add(manager.onDidResolve(({ model }) => {\n\t\t\t\tdisposables.add(model);\n\t\t\t\tif (model.resource.toString() === resource.toString()) {\n\t\t\t\t\tresolvedCounter++;\n\t\t\t\t\tif (resolvedCounter === 2) {\n\t\t\t\t\t\tdidResolve = true;\n\t\t\t\t\t\tresolve();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}));\n\t\t});\n\n\t\taccessor.fileService.fireFileChanges(new FileChangesEvent([{ resource, type: FileChangeType.UPDATED }], false));\n\n\t\tawait onDidResolve;\n\t\tassert.strictEqual(didResolve, true);\n\t});\n\n\tensureNoDisposablesAreLeakedInTestSuite();\n});\n"],
  "mappings": "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",
  "names": []
}
