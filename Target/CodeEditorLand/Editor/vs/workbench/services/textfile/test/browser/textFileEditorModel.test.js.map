{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/textfile/test/browser/textFileEditorModel.test.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport assert from 'assert';\nimport { IInstantiationService } from '../../../../../platform/instantiation/common/instantiation.js';\nimport { TextFileEditorModel } from '../../common/textFileEditorModel.js';\nimport { EncodingMode, TextFileEditorModelState, snapshotToString, isTextFileEditorModel, ITextFileEditorModelSaveEvent } from '../../common/textfiles.js';\nimport { createFileEditorInput, workbenchInstantiationService, TestServiceAccessor, TestReadonlyTextFileEditorModel, getLastResolvedFileStat } from '../../../../test/browser/workbenchTestServices.js';\nimport { ensureNoDisposablesAreLeakedInTestSuite, toResource } from '../../../../../base/test/common/utils.js';\nimport { TextFileEditorModelManager } from '../../common/textFileEditorModelManager.js';\nimport { FileOperationResult, FileOperationError, NotModifiedSinceFileOperationError } from '../../../../../platform/files/common/files.js';\nimport { DeferredPromise, timeout } from '../../../../../base/common/async.js';\nimport { assertIsDefined } from '../../../../../base/common/types.js';\nimport { createTextBufferFactory } from '../../../../../editor/common/model/textModel.js';\nimport { DisposableStore, toDisposable } from '../../../../../base/common/lifecycle.js';\nimport { SaveReason, SaveSourceRegistry } from '../../../../common/editor.js';\nimport { isEqual } from '../../../../../base/common/resources.js';\nimport { UTF16be } from '../../common/encoding.js';\nimport { isWeb } from '../../../../../base/common/platform.js';\nimport { URI } from '../../../../../base/common/uri.js';\n\nsuite('Files - TextFileEditorModel', () => {\n\n\tfunction getLastModifiedTime(model: TextFileEditorModel): number {\n\t\tconst stat = getLastResolvedFileStat(model);\n\n\t\treturn stat ? stat.mtime : -1;\n\t}\n\n\tconst disposables = new DisposableStore();\n\tlet instantiationService: IInstantiationService;\n\tlet accessor: TestServiceAccessor;\n\tlet content: string;\n\n\tsetup(() => {\n\t\tinstantiationService = workbenchInstantiationService(undefined, disposables);\n\t\taccessor = instantiationService.createInstance(TestServiceAccessor);\n\t\tcontent = accessor.fileService.getContent();\n\t\tdisposables.add(<TextFileEditorModelManager>accessor.textFileService.files);\n\t\tdisposables.add(toDisposable(() => accessor.fileService.setContent(content)));\n\t});\n\n\tteardown(async () => {\n\t\tfor (const textFileEditorModel of accessor.textFileService.files.models) {\n\t\t\ttextFileEditorModel.dispose();\n\t\t}\n\n\t\tdisposables.clear();\n\t});\n\n\ttest('basic events', async function () {\n\t\tconst model = disposables.add(instantiationService.createInstance(TextFileEditorModel, toResource.call(this, '/path/index_async.txt'), 'utf8', undefined));\n\t\taccessor.workingCopyService.testUnregisterWorkingCopy(model); // causes issues with subsequent resolves otherwise\n\n\t\tlet onDidResolveCounter = 0;\n\t\tdisposables.add(model.onDidResolve(() => onDidResolveCounter++));\n\n\t\tawait model.resolve();\n\n\t\tassert.strictEqual(onDidResolveCounter, 1);\n\n\t\tlet onDidChangeContentCounter = 0;\n\t\tdisposables.add(model.onDidChangeContent(() => onDidChangeContentCounter++));\n\n\t\tlet onDidChangeDirtyCounter = 0;\n\t\tdisposables.add(model.onDidChangeDirty(() => onDidChangeDirtyCounter++));\n\n\t\tmodel.updateTextEditorModel(createTextBufferFactory('bar'));\n\n\t\tassert.strictEqual(onDidChangeContentCounter, 1);\n\t\tassert.strictEqual(onDidChangeDirtyCounter, 1);\n\n\t\tmodel.updateTextEditorModel(createTextBufferFactory('foo'));\n\n\t\tassert.strictEqual(onDidChangeContentCounter, 2);\n\t\tassert.strictEqual(onDidChangeDirtyCounter, 1);\n\n\t\tawait model.revert();\n\n\t\tassert.strictEqual(onDidChangeDirtyCounter, 2);\n\t});\n\n\ttest('isTextFileEditorModel', async function () {\n\t\tconst model: TextFileEditorModel = instantiationService.createInstance(TextFileEditorModel, toResource.call(this, '/path/index_async.txt'), 'utf8', undefined);\n\n\t\tassert.strictEqual(isTextFileEditorModel(model), true);\n\n\t\tmodel.dispose();\n\t});\n\n\ttest('save', async function () {\n\t\tconst model: TextFileEditorModel = instantiationService.createInstance(TextFileEditorModel, toResource.call(this, '/path/index_async.txt'), 'utf8', undefined);\n\n\t\tawait model.resolve();\n\n\t\tassert.strictEqual(accessor.workingCopyService.dirtyCount, 0);\n\n\t\tlet savedEvent: ITextFileEditorModelSaveEvent | undefined = undefined;\n\t\tdisposables.add(model.onDidSave(e => savedEvent = e));\n\n\t\tawait model.save();\n\t\tassert.ok(!savedEvent);\n\n\t\tmodel.updateTextEditorModel(createTextBufferFactory('bar'));\n\t\tassert.ok(getLastModifiedTime(model) <= Date.now());\n\t\tassert.ok(model.hasState(TextFileEditorModelState.DIRTY));\n\t\tassert.ok(model.isModified());\n\n\t\tassert.strictEqual(accessor.workingCopyService.dirtyCount, 1);\n\t\tassert.strictEqual(accessor.workingCopyService.isDirty(model.resource, model.typeId), true);\n\n\t\tlet workingCopyEvent = false;\n\t\tdisposables.add(accessor.workingCopyService.onDidChangeDirty(e => {\n\t\t\tif (e.resource.toString() === model.resource.toString()) {\n\t\t\t\tworkingCopyEvent = true;\n\t\t\t}\n\t\t}));\n\n\t\tconst source = SaveSourceRegistry.registerSource('testSource', 'Hello Save');\n\t\tconst pendingSave = model.save({ reason: SaveReason.AUTO, source });\n\t\tassert.ok(model.hasState(TextFileEditorModelState.PENDING_SAVE));\n\n\t\tawait Promise.all([pendingSave, model.joinState(TextFileEditorModelState.PENDING_SAVE)]);\n\n\t\tassert.ok(model.hasState(TextFileEditorModelState.SAVED));\n\t\tassert.ok(!model.isDirty());\n\t\tassert.ok(!model.isModified());\n\t\tassert.ok(savedEvent);\n\t\tassert.ok((savedEvent as ITextFileEditorModelSaveEvent).stat);\n\t\tassert.strictEqual((savedEvent as ITextFileEditorModelSaveEvent).reason, SaveReason.AUTO);\n\t\tassert.strictEqual((savedEvent as ITextFileEditorModelSaveEvent).source, source);\n\t\tassert.ok(workingCopyEvent);\n\n\t\tassert.strictEqual(accessor.workingCopyService.dirtyCount, 0);\n\t\tassert.strictEqual(accessor.workingCopyService.isDirty(model.resource, model.typeId), false);\n\n\t\tsavedEvent = undefined;\n\n\t\tawait model.save({ force: true });\n\t\tassert.ok(savedEvent);\n\n\t\tmodel.dispose();\n\t\tassert.ok(!accessor.modelService.getModel(model.resource));\n\t});\n\n\ttest('save - touching also emits saved event', async function () {\n\t\tconst model: TextFileEditorModel = instantiationService.createInstance(TextFileEditorModel, toResource.call(this, '/path/index_async.txt'), 'utf8', undefined);\n\n\t\tawait model.resolve();\n\n\t\tlet savedEvent = false;\n\t\tdisposables.add(model.onDidSave(() => savedEvent = true));\n\n\t\tlet workingCopyEvent = false;\n\t\tdisposables.add(accessor.workingCopyService.onDidChangeDirty(e => {\n\t\t\tif (e.resource.toString() === model.resource.toString()) {\n\t\t\t\tworkingCopyEvent = true;\n\t\t\t}\n\t\t}));\n\n\t\tawait model.save({ force: true });\n\n\t\tassert.ok(savedEvent);\n\t\tassert.ok(!workingCopyEvent);\n\n\t\tmodel.dispose();\n\t\tassert.ok(!accessor.modelService.getModel(model.resource));\n\t});\n\n\ttest('save - touching with error turns model dirty', async function () {\n\t\tconst model: TextFileEditorModel = instantiationService.createInstance(TextFileEditorModel, toResource.call(this, '/path/index_async.txt'), 'utf8', undefined);\n\n\t\tawait model.resolve();\n\n\t\tlet saveErrorEvent = false;\n\t\tdisposables.add(model.onDidSaveError(() => saveErrorEvent = true));\n\n\t\tlet savedEvent = false;\n\t\tdisposables.add(model.onDidSave(() => savedEvent = true));\n\n\t\taccessor.fileService.writeShouldThrowError = new Error('failed to write');\n\t\ttry {\n\t\t\tawait model.save({ force: true });\n\n\t\t\tassert.ok(model.hasState(TextFileEditorModelState.ERROR));\n\t\t\tassert.ok(model.isDirty());\n\t\t\tassert.ok(model.isModified());\n\t\t\tassert.ok(saveErrorEvent);\n\n\t\t\tassert.strictEqual(accessor.workingCopyService.dirtyCount, 1);\n\t\t\tassert.strictEqual(accessor.workingCopyService.isDirty(model.resource, model.typeId), true);\n\t\t} finally {\n\t\t\taccessor.fileService.writeShouldThrowError = undefined;\n\t\t}\n\n\t\tawait model.save({ force: true });\n\n\t\tassert.ok(savedEvent);\n\t\tassert.strictEqual(model.isDirty(), false);\n\n\t\tmodel.dispose();\n\t\tassert.ok(!accessor.modelService.getModel(model.resource));\n\t});\n\n\ttest('save - returns false when save fails', async function () {\n\t\tconst model: TextFileEditorModel = instantiationService.createInstance(TextFileEditorModel, toResource.call(this, '/path/index_async.txt'), 'utf8', undefined);\n\n\t\tawait model.resolve();\n\n\t\taccessor.fileService.writeShouldThrowError = new Error('failed to write');\n\t\ttry {\n\t\t\tconst res = await model.save({ force: true });\n\t\t\tassert.strictEqual(res, false);\n\t\t} finally {\n\t\t\taccessor.fileService.writeShouldThrowError = undefined;\n\t\t}\n\n\t\tconst res = await model.save({ force: true });\n\t\tassert.strictEqual(res, true);\n\n\t\tmodel.dispose();\n\t\tassert.ok(!accessor.modelService.getModel(model.resource));\n\t});\n\n\ttest('save error (generic)', async function () {\n\t\tconst model: TextFileEditorModel = instantiationService.createInstance(TextFileEditorModel, toResource.call(this, '/path/index_async.txt'), 'utf8', undefined);\n\n\t\tawait model.resolve();\n\n\t\tmodel.updateTextEditorModel(createTextBufferFactory('bar'));\n\n\t\tlet saveErrorEvent = false;\n\t\tdisposables.add(model.onDidSaveError(() => saveErrorEvent = true));\n\n\t\taccessor.fileService.writeShouldThrowError = new Error('failed to write');\n\t\ttry {\n\t\t\tconst pendingSave = model.save();\n\t\t\tassert.ok(model.hasState(TextFileEditorModelState.PENDING_SAVE));\n\n\t\t\tawait pendingSave;\n\n\t\t\tassert.ok(model.hasState(TextFileEditorModelState.ERROR));\n\t\t\tassert.ok(model.isDirty());\n\t\t\tassert.ok(model.isModified());\n\t\t\tassert.ok(saveErrorEvent);\n\n\t\t\tassert.strictEqual(accessor.workingCopyService.dirtyCount, 1);\n\t\t\tassert.strictEqual(accessor.workingCopyService.isDirty(model.resource, model.typeId), true);\n\n\t\t\tmodel.dispose();\n\t\t} finally {\n\t\t\taccessor.fileService.writeShouldThrowError = undefined;\n\t\t}\n\t});\n\n\ttest('save error (conflict)', async function () {\n\t\tconst model: TextFileEditorModel = instantiationService.createInstance(TextFileEditorModel, toResource.call(this, '/path/index_async.txt'), 'utf8', undefined);\n\n\t\tawait model.resolve();\n\n\t\tmodel.updateTextEditorModel(createTextBufferFactory('bar'));\n\n\t\tlet saveErrorEvent = false;\n\t\tdisposables.add(model.onDidSaveError(() => saveErrorEvent = true));\n\n\t\taccessor.fileService.writeShouldThrowError = new FileOperationError('save conflict', FileOperationResult.FILE_MODIFIED_SINCE);\n\t\ttry {\n\t\t\tconst pendingSave = model.save();\n\t\t\tassert.ok(model.hasState(TextFileEditorModelState.PENDING_SAVE));\n\n\t\t\tawait pendingSave;\n\n\t\t\tassert.ok(model.hasState(TextFileEditorModelState.CONFLICT));\n\t\t\tassert.ok(model.isDirty());\n\t\t\tassert.ok(model.isModified());\n\t\t\tassert.ok(saveErrorEvent);\n\n\t\t\tassert.strictEqual(accessor.workingCopyService.dirtyCount, 1);\n\t\t\tassert.strictEqual(accessor.workingCopyService.isDirty(model.resource, model.typeId), true);\n\n\t\t\tmodel.dispose();\n\t\t} finally {\n\t\t\taccessor.fileService.writeShouldThrowError = undefined;\n\t\t}\n\t});\n\n\ttest('setEncoding - encode', async function () {\n\t\tconst model: TextFileEditorModel = disposables.add(instantiationService.createInstance(TextFileEditorModel, toResource.call(this, '/path/index_async.txt'), 'utf8', undefined));\n\n\t\tlet encodingEvent = false;\n\t\tdisposables.add(model.onDidChangeEncoding(() => encodingEvent = true));\n\n\t\tawait model.setEncoding('utf8', EncodingMode.Encode); // no-op\n\t\tassert.strictEqual(getLastModifiedTime(model), -1);\n\n\t\tassert.ok(!encodingEvent);\n\n\t\tawait model.setEncoding('utf16', EncodingMode.Encode);\n\n\t\tassert.ok(encodingEvent);\n\n\t\tassert.ok(getLastModifiedTime(model) <= Date.now()); // indicates model was saved due to encoding change\n\t});\n\n\ttest('setEncoding - decode', async function () {\n\t\tlet model: TextFileEditorModel = disposables.add(instantiationService.createInstance(TextFileEditorModel, toResource.call(this, '/path/index_async.txt'), 'utf8', undefined));\n\t\taccessor.workingCopyService.testUnregisterWorkingCopy(model); // causes issues with subsequent resolves otherwise\n\n\t\tawait model.setEncoding('utf16', EncodingMode.Decode);\n\n\t\t// we have to get the model again from working copy service\n\t\t// because `setEncoding` will resolve it again through the\n\t\t// text file service which is outside our scope\n\t\tmodel = accessor.workingCopyService.get(model) as TextFileEditorModel;\n\n\t\tassert.ok(model.isResolved()); // model got resolved due to decoding\n\t});\n\n\ttest('setEncoding - decode dirty file saves first', async function () {\n\t\tconst model: TextFileEditorModel = disposables.add(instantiationService.createInstance(TextFileEditorModel, toResource.call(this, '/path/index_async.txt'), 'utf8', undefined));\n\t\taccessor.workingCopyService.testUnregisterWorkingCopy(model); // causes issues with subsequent resolves otherwise\n\n\t\tawait model.resolve();\n\n\t\tmodel.updateTextEditorModel(createTextBufferFactory('bar'));\n\t\tassert.strictEqual(model.isDirty(), true);\n\n\t\tawait model.setEncoding('utf16', EncodingMode.Decode);\n\n\t\tassert.strictEqual(model.isDirty(), false);\n\t});\n\n\ttest('encoding updates with language based configuration', async function () {\n\t\tconst languageId = 'text-file-model-test';\n\t\tdisposables.add(accessor.languageService.registerLanguage({\n\t\t\tid: languageId,\n\t\t}));\n\n\t\taccessor.testConfigurationService.setOverrideIdentifiers('files.encoding', [languageId]);\n\n\t\tconst model: TextFileEditorModel = disposables.add(instantiationService.createInstance(TextFileEditorModel, toResource.call(this, '/path/index_async.txt'), 'utf8', undefined));\n\t\taccessor.workingCopyService.testUnregisterWorkingCopy(model); // causes issues with subsequent resolves otherwise\n\n\t\tawait model.resolve();\n\n\t\tconst deferredPromise = new DeferredPromise<TextFileEditorModel>();\n\n\t\t// We use this listener as a way to figure out that the working\n\t\t// copy was resolved again as part of the language change\n\t\tdisposables.add(accessor.workingCopyService.onDidRegister(e => {\n\t\t\tif (isEqual(e.resource, model.resource)) {\n\t\t\t\tdeferredPromise.complete(model as TextFileEditorModel);\n\t\t\t}\n\t\t}));\n\n\t\taccessor.testConfigurationService.setUserConfiguration('files.encoding', UTF16be);\n\n\t\tmodel.setLanguageId(languageId);\n\n\t\tawait deferredPromise.p; // this asserts that the model was reloaded due to the language change\n\t});\n\n\ttest('create with language', async function () {\n\t\tconst languageId = 'text-file-model-test';\n\t\tdisposables.add(accessor.languageService.registerLanguage({\n\t\t\tid: languageId,\n\t\t}));\n\n\t\tconst model: TextFileEditorModel = instantiationService.createInstance(TextFileEditorModel, toResource.call(this, '/path/index_async.txt'), 'utf8', languageId);\n\n\t\tawait model.resolve();\n\n\t\tassert.strictEqual(model.textEditorModel!.getLanguageId(), languageId);\n\n\t\tmodel.dispose();\n\t\tassert.ok(!accessor.modelService.getModel(model.resource));\n\t});\n\n\ttest('disposes when underlying model is destroyed', async function () {\n\t\tconst model: TextFileEditorModel = instantiationService.createInstance(TextFileEditorModel, toResource.call(this, '/path/index_async.txt'), 'utf8', undefined);\n\n\t\tawait model.resolve();\n\n\t\tmodel.textEditorModel!.dispose();\n\t\tassert.ok(model.isDisposed());\n\t});\n\n\ttest('Resolve does not trigger save', async function () {\n\t\tconst model = instantiationService.createInstance(TextFileEditorModel, toResource.call(this, '/path/index.txt'), 'utf8', undefined);\n\t\tassert.ok(model.hasState(TextFileEditorModelState.SAVED));\n\n\t\tdisposables.add(model.onDidSave(() => assert.fail()));\n\t\tdisposables.add(model.onDidChangeDirty(() => assert.fail()));\n\n\t\tawait model.resolve();\n\t\tassert.ok(model.isResolved());\n\t\tmodel.dispose();\n\t\tassert.ok(!accessor.modelService.getModel(model.resource));\n\t});\n\n\ttest('Resolve returns dirty model as long as model is dirty', async function () {\n\t\tconst model = disposables.add(instantiationService.createInstance(TextFileEditorModel, toResource.call(this, '/path/index_async.txt'), 'utf8', undefined));\n\n\t\tawait model.resolve();\n\t\tmodel.updateTextEditorModel(createTextBufferFactory('foo'));\n\t\tassert.ok(model.isDirty());\n\t\tassert.ok(model.hasState(TextFileEditorModelState.DIRTY));\n\n\t\tawait model.resolve();\n\t\tassert.ok(model.isDirty());\n\t});\n\n\ttest('Resolve with contents', async function () {\n\t\tconst model: TextFileEditorModel = instantiationService.createInstance(TextFileEditorModel, toResource.call(this, '/path/index_async.txt'), 'utf8', undefined);\n\n\t\tawait model.resolve({ contents: createTextBufferFactory('Hello World') });\n\n\t\tassert.strictEqual(model.textEditorModel?.getValue(), 'Hello World');\n\t\tassert.strictEqual(model.isDirty(), true);\n\n\t\tawait model.resolve({ contents: createTextBufferFactory('Hello Changes') });\n\n\t\tassert.strictEqual(model.textEditorModel?.getValue(), 'Hello Changes');\n\t\tassert.strictEqual(model.isDirty(), true);\n\n\t\t// verify that we do not mark the model as saved when undoing once because\n\t\t// we never really had a saved state\n\t\tawait model.textEditorModel.undo();\n\t\tassert.ok(model.isDirty());\n\n\t\tmodel.dispose();\n\t\tassert.ok(!accessor.modelService.getModel(model.resource));\n\t});\n\n\ttest('Revert', async function () {\n\t\tlet eventCounter = 0;\n\n\t\tlet model: TextFileEditorModel = disposables.add(instantiationService.createInstance(TextFileEditorModel, toResource.call(this, '/path/index_async.txt'), 'utf8', undefined));\n\n\t\tdisposables.add(model.onDidRevert(() => eventCounter++));\n\n\t\tlet workingCopyEvent = false;\n\t\tdisposables.add(accessor.workingCopyService.onDidChangeDirty(e => {\n\t\t\tif (e.resource.toString() === model.resource.toString()) {\n\t\t\t\tworkingCopyEvent = true;\n\t\t\t}\n\t\t}));\n\n\t\tawait model.resolve();\n\t\tmodel.updateTextEditorModel(createTextBufferFactory('foo'));\n\t\tassert.ok(model.isDirty());\n\t\tassert.ok(model.isModified());\n\n\t\tassert.strictEqual(accessor.workingCopyService.dirtyCount, 1);\n\t\tassert.strictEqual(accessor.workingCopyService.isDirty(model.resource, model.typeId), true);\n\n\t\taccessor.workingCopyService.testUnregisterWorkingCopy(model); // causes issues with subsequent resolves otherwise\n\n\t\tawait model.revert();\n\n\t\t// we have to get the model again from working copy service\n\t\t// because `setEncoding` will resolve it again through the\n\t\t// text file service which is outside our scope\n\t\tmodel = accessor.workingCopyService.get(model) as TextFileEditorModel;\n\n\t\tassert.strictEqual(model.isDirty(), false);\n\t\tassert.strictEqual(model.isModified(), false);\n\t\tassert.strictEqual(eventCounter, 1);\n\n\t\tassert.ok(workingCopyEvent);\n\t\tassert.strictEqual(accessor.workingCopyService.dirtyCount, 0);\n\t\tassert.strictEqual(accessor.workingCopyService.isDirty(model.resource, model.typeId), false);\n\t});\n\n\ttest('Revert (soft)', async function () {\n\t\tlet eventCounter = 0;\n\n\t\tconst model: TextFileEditorModel = disposables.add(instantiationService.createInstance(TextFileEditorModel, toResource.call(this, '/path/index_async.txt'), 'utf8', undefined));\n\n\t\tdisposables.add(model.onDidRevert(() => eventCounter++));\n\n\t\tlet workingCopyEvent = false;\n\t\tdisposables.add(accessor.workingCopyService.onDidChangeDirty(e => {\n\t\t\tif (e.resource.toString() === model.resource.toString()) {\n\t\t\t\tworkingCopyEvent = true;\n\t\t\t}\n\t\t}));\n\n\t\tawait model.resolve();\n\t\tmodel.updateTextEditorModel(createTextBufferFactory('foo'));\n\t\tassert.ok(model.isDirty());\n\t\tassert.ok(model.isModified());\n\n\t\tassert.strictEqual(accessor.workingCopyService.dirtyCount, 1);\n\t\tassert.strictEqual(accessor.workingCopyService.isDirty(model.resource, model.typeId), true);\n\n\t\tawait model.revert({ soft: true });\n\t\tassert.strictEqual(model.isDirty(), false);\n\t\tassert.strictEqual(model.isModified(), false);\n\t\tassert.strictEqual(model.textEditorModel.getValue(), 'foo');\n\t\tassert.strictEqual(eventCounter, 1);\n\n\t\tassert.ok(workingCopyEvent);\n\t\tassert.strictEqual(accessor.workingCopyService.dirtyCount, 0);\n\t\tassert.strictEqual(accessor.workingCopyService.isDirty(model.resource, model.typeId), false);\n\t});\n\n\ttest('Undo to saved state turns model non-dirty', async function () {\n\t\tconst model: TextFileEditorModel = disposables.add(instantiationService.createInstance(TextFileEditorModel, toResource.call(this, '/path/index_async.txt'), 'utf8', undefined));\n\t\tawait model.resolve();\n\t\tmodel.updateTextEditorModel(createTextBufferFactory('Hello Text'));\n\t\tassert.ok(model.isDirty());\n\n\t\tawait model.textEditorModel.undo();\n\t\tassert.ok(!model.isDirty());\n\t});\n\n\ttest('Resolve and undo turns model dirty', async function () {\n\t\tconst model: TextFileEditorModel = disposables.add(instantiationService.createInstance(TextFileEditorModel, toResource.call(this, '/path/index_async.txt'), 'utf8', undefined));\n\t\tawait model.resolve();\n\t\taccessor.fileService.setContent('Hello Change');\n\n\t\tawait model.resolve();\n\t\tawait model.textEditorModel!.undo();\n\t\tassert.ok(model.isDirty());\n\n\t\tassert.strictEqual(accessor.workingCopyService.dirtyCount, 1);\n\t\tassert.strictEqual(accessor.workingCopyService.isDirty(model.resource, model.typeId), true);\n\t});\n\n\ttest('Update Dirty', async function () {\n\t\tlet eventCounter = 0;\n\n\t\tconst model: TextFileEditorModel = disposables.add(instantiationService.createInstance(TextFileEditorModel, toResource.call(this, '/path/index_async.txt'), 'utf8', undefined));\n\n\t\tmodel.setDirty(true);\n\t\tassert.ok(!model.isDirty()); // needs to be resolved\n\n\t\tawait model.resolve();\n\t\tmodel.updateTextEditorModel(createTextBufferFactory('foo'));\n\t\tassert.ok(model.isDirty());\n\n\t\tawait model.revert({ soft: true });\n\t\tassert.strictEqual(model.isDirty(), false);\n\n\t\tdisposables.add(model.onDidChangeDirty(() => eventCounter++));\n\n\t\tlet workingCopyEvent = false;\n\t\tdisposables.add(accessor.workingCopyService.onDidChangeDirty(e => {\n\t\t\tif (e.resource.toString() === model.resource.toString()) {\n\t\t\t\tworkingCopyEvent = true;\n\t\t\t}\n\t\t}));\n\n\t\tmodel.setDirty(true);\n\t\tassert.ok(model.isDirty());\n\t\tassert.strictEqual(eventCounter, 1);\n\t\tassert.ok(workingCopyEvent);\n\n\t\tmodel.setDirty(false);\n\t\tassert.strictEqual(model.isDirty(), false);\n\t\tassert.strictEqual(eventCounter, 2);\n\t});\n\n\ttest('No Dirty or saving for readonly models', async function () {\n\t\tlet workingCopyEvent = false;\n\t\tdisposables.add(accessor.workingCopyService.onDidChangeDirty(e => {\n\t\t\tif (e.resource.toString() === model.resource.toString()) {\n\t\t\t\tworkingCopyEvent = true;\n\t\t\t}\n\t\t}));\n\n\t\tconst model = disposables.add(instantiationService.createInstance(TestReadonlyTextFileEditorModel, toResource.call(this, '/path/index_async.txt'), 'utf8', undefined));\n\n\t\tlet saveEvent = false;\n\t\tdisposables.add(model.onDidSave(() => {\n\t\t\tsaveEvent = true;\n\t\t}));\n\n\t\tawait model.resolve();\n\t\tmodel.updateTextEditorModel(createTextBufferFactory('foo'));\n\t\tassert.ok(!model.isDirty());\n\n\t\tawait model.save({ force: true });\n\t\tassert.strictEqual(saveEvent, false);\n\n\t\tawait model.revert({ soft: true });\n\t\tassert.ok(!model.isDirty());\n\n\t\tassert.ok(!workingCopyEvent);\n\t});\n\n\ttest('File not modified error is handled gracefully', async function () {\n\t\tconst model: TextFileEditorModel = disposables.add(instantiationService.createInstance(TextFileEditorModel, toResource.call(this, '/path/index_async.txt'), 'utf8', undefined));\n\n\t\tawait model.resolve();\n\n\t\tconst mtime = getLastModifiedTime(model);\n\t\taccessor.textFileService.setReadStreamErrorOnce(new FileOperationError('error', FileOperationResult.FILE_NOT_MODIFIED_SINCE));\n\n\t\tawait model.resolve();\n\n\t\tassert.ok(model);\n\t\tassert.strictEqual(getLastModifiedTime(model), mtime);\n\t});\n\n\ttest('stat.readonly and stat.locked can change when decreased mtime is ignored', async function () {\n\t\tconst model: TextFileEditorModel = disposables.add(instantiationService.createInstance(TextFileEditorModel, toResource.call(this, '/path/index_async.txt'), 'utf8', undefined));\n\n\t\tawait model.resolve();\n\n\t\tconst stat = assertIsDefined(getLastResolvedFileStat(model));\n\t\taccessor.textFileService.setReadStreamErrorOnce(new NotModifiedSinceFileOperationError('error', { ...stat, mtime: stat.mtime - 1, readonly: !stat.readonly, locked: !stat.locked }));\n\n\t\tawait model.resolve();\n\n\t\tassert.ok(model);\n\t\tassert.strictEqual(getLastModifiedTime(model), stat.mtime, 'mtime should not decrease');\n\t\tassert.notStrictEqual(getLastResolvedFileStat(model)?.readonly, stat.readonly, 'readonly should have changed despite simultaneous attempt to decrease mtime');\n\t\tassert.notStrictEqual(getLastResolvedFileStat(model)?.locked, stat.locked, 'locked should have changed despite simultaneous attempt to decrease mtime');\n\t});\n\n\ttest('Resolve error is handled gracefully if model already exists', async function () {\n\t\tconst model: TextFileEditorModel = disposables.add(instantiationService.createInstance(TextFileEditorModel, toResource.call(this, '/path/index_async.txt'), 'utf8', undefined));\n\n\t\tawait model.resolve();\n\t\taccessor.textFileService.setReadStreamErrorOnce(new FileOperationError('error', FileOperationResult.FILE_NOT_FOUND));\n\n\t\tawait model.resolve();\n\t\tassert.ok(model);\n\t});\n\n\ttest('save() and isDirty() - proper with check for mtimes', async function () {\n\t\tconst input1 = disposables.add(createFileEditorInput(instantiationService, toResource.call(this, '/path/index_async2.txt')));\n\t\tconst input2 = disposables.add(createFileEditorInput(instantiationService, toResource.call(this, '/path/index_async.txt')));\n\n\t\tconst model1 = disposables.add(await input1.resolve() as TextFileEditorModel);\n\t\tconst model2 = disposables.add(await input2.resolve() as TextFileEditorModel);\n\n\t\tmodel1.updateTextEditorModel(createTextBufferFactory('foo'));\n\n\t\tconst m1Mtime = assertIsDefined(getLastResolvedFileStat(model1)).mtime;\n\t\tconst m2Mtime = assertIsDefined(getLastResolvedFileStat(model2)).mtime;\n\t\tassert.ok(m1Mtime > 0);\n\t\tassert.ok(m2Mtime > 0);\n\n\t\tassert.ok(accessor.textFileService.isDirty(toResource.call(this, '/path/index_async2.txt')));\n\t\tassert.ok(!accessor.textFileService.isDirty(toResource.call(this, '/path/index_async.txt')));\n\n\t\tmodel2.updateTextEditorModel(createTextBufferFactory('foo'));\n\t\tassert.ok(accessor.textFileService.isDirty(toResource.call(this, '/path/index_async.txt')));\n\n\t\tawait timeout(10);\n\t\tawait accessor.textFileService.save(toResource.call(this, '/path/index_async.txt'));\n\t\tawait accessor.textFileService.save(toResource.call(this, '/path/index_async2.txt'));\n\t\tassert.ok(!accessor.textFileService.isDirty(toResource.call(this, '/path/index_async.txt')));\n\t\tassert.ok(!accessor.textFileService.isDirty(toResource.call(this, '/path/index_async2.txt')));\n\n\t\tif (isWeb) {\n\t\t\t// web tests does not ensure timeouts are respected at all, so we cannot\n\t\t\t// really assert the mtime to be different, only that it is equal or greater.\n\t\t\t// https://github.com/microsoft/vscode/issues/161886\n\t\t\tassert.ok(assertIsDefined(getLastResolvedFileStat(model1)).mtime >= m1Mtime);\n\t\t\tassert.ok(assertIsDefined(getLastResolvedFileStat(model2)).mtime >= m2Mtime);\n\t\t} else {\n\t\t\t// on desktop we want to assert this condition more strictly though\n\t\t\tassert.ok(assertIsDefined(getLastResolvedFileStat(model1)).mtime > m1Mtime);\n\t\t\tassert.ok(assertIsDefined(getLastResolvedFileStat(model2)).mtime > m2Mtime);\n\t\t}\n\t});\n\n\ttest('Save Participant', async function () {\n\t\tlet eventCounter = 0;\n\t\tconst model: TextFileEditorModel = disposables.add(instantiationService.createInstance(TextFileEditorModel, toResource.call(this, '/path/index_async.txt'), 'utf8', undefined));\n\n\t\tdisposables.add(model.onDidSave(() => {\n\t\t\tassert.strictEqual(snapshotToString(model.createSnapshot()!), eventCounter === 1 ? 'bar' : 'foobar');\n\t\t\tassert.ok(!model.isDirty());\n\t\t\teventCounter++;\n\t\t}));\n\n\t\tconst participant = accessor.textFileService.files.addSaveParticipant({\n\t\t\tparticipate: async model => {\n\t\t\t\tassert.ok(model.isDirty());\n\t\t\t\t(model as TextFileEditorModel).updateTextEditorModel(createTextBufferFactory('bar'));\n\t\t\t\tassert.ok(model.isDirty());\n\t\t\t\teventCounter++;\n\t\t\t}\n\t\t});\n\n\t\tawait model.resolve();\n\t\tmodel.updateTextEditorModel(createTextBufferFactory('foo'));\n\t\tassert.ok(model.isDirty());\n\n\t\tawait model.save();\n\t\tassert.strictEqual(eventCounter, 2);\n\n\t\tparticipant.dispose();\n\t\tmodel.updateTextEditorModel(createTextBufferFactory('foobar'));\n\t\tassert.ok(model.isDirty());\n\n\t\tawait model.save();\n\t\tassert.strictEqual(eventCounter, 3);\n\t});\n\n\ttest('Save Participant - skip', async function () {\n\t\tlet eventCounter = 0;\n\t\tconst model: TextFileEditorModel = disposables.add(instantiationService.createInstance(TextFileEditorModel, toResource.call(this, '/path/index_async.txt'), 'utf8', undefined));\n\n\t\tdisposables.add(accessor.textFileService.files.addSaveParticipant({\n\t\t\tparticipate: async () => {\n\t\t\t\teventCounter++;\n\t\t\t}\n\t\t}));\n\n\t\tawait model.resolve();\n\t\tmodel.updateTextEditorModel(createTextBufferFactory('foo'));\n\n\t\tawait model.save({ skipSaveParticipants: true });\n\t\tassert.strictEqual(eventCounter, 0);\n\t});\n\n\ttest('Save Participant, async participant', async function () {\n\t\tlet eventCounter = 0;\n\t\tconst model: TextFileEditorModel = disposables.add(instantiationService.createInstance(TextFileEditorModel, toResource.call(this, '/path/index_async.txt'), 'utf8', undefined));\n\n\t\tdisposables.add(model.onDidSave(() => {\n\t\t\tassert.ok(!model.isDirty());\n\t\t\teventCounter++;\n\t\t}));\n\n\t\tdisposables.add(accessor.textFileService.files.addSaveParticipant({\n\t\t\tparticipate: model => {\n\t\t\t\tassert.ok(model.isDirty());\n\t\t\t\t(model as TextFileEditorModel).updateTextEditorModel(createTextBufferFactory('bar'));\n\t\t\t\tassert.ok(model.isDirty());\n\t\t\t\teventCounter++;\n\n\t\t\t\treturn timeout(10);\n\t\t\t}\n\t\t}));\n\n\t\tawait model.resolve();\n\t\tmodel.updateTextEditorModel(createTextBufferFactory('foo'));\n\n\t\tconst now = Date.now();\n\t\tawait model.save();\n\t\tassert.strictEqual(eventCounter, 2);\n\t\tassert.ok(Date.now() - now >= 10);\n\t});\n\n\ttest('Save Participant, bad participant', async function () {\n\t\tconst model: TextFileEditorModel = disposables.add(instantiationService.createInstance(TextFileEditorModel, toResource.call(this, '/path/index_async.txt'), 'utf8', undefined));\n\n\t\tdisposables.add(accessor.textFileService.files.addSaveParticipant({\n\t\t\tparticipate: async () => {\n\t\t\t\tnew Error('boom');\n\t\t\t}\n\t\t}));\n\n\t\tawait model.resolve();\n\t\tmodel.updateTextEditorModel(createTextBufferFactory('foo'));\n\n\t\tawait model.save();\n\t});\n\n\ttest('Save Participant, participant cancelled when saved again', async function () {\n\t\tconst model: TextFileEditorModel = disposables.add(instantiationService.createInstance(TextFileEditorModel, toResource.call(this, '/path/index_async.txt'), 'utf8', undefined));\n\n\t\tconst participations: boolean[] = [];\n\n\t\tdisposables.add(accessor.textFileService.files.addSaveParticipant({\n\t\t\tparticipate: async (model, context, progress, token) => {\n\t\t\t\tawait timeout(10);\n\n\t\t\t\tif (!token.isCancellationRequested) {\n\t\t\t\t\tparticipations.push(true);\n\t\t\t\t}\n\t\t\t}\n\t\t}));\n\n\t\tawait model.resolve();\n\n\t\tmodel.updateTextEditorModel(createTextBufferFactory('foo'));\n\t\tconst p1 = model.save();\n\n\t\tmodel.updateTextEditorModel(createTextBufferFactory('foo 1'));\n\t\tconst p2 = model.save();\n\n\t\tmodel.updateTextEditorModel(createTextBufferFactory('foo 2'));\n\t\tconst p3 = model.save();\n\n\t\tmodel.updateTextEditorModel(createTextBufferFactory('foo 3'));\n\t\tconst p4 = model.save();\n\n\t\tawait Promise.all([p1, p2, p3, p4]);\n\t\tassert.strictEqual(participations.length, 1);\n\t});\n\n\ttest('Save Participant, calling save from within is unsupported but does not explode (sync save, no model change)', async function () {\n\t\tconst model: TextFileEditorModel = disposables.add(instantiationService.createInstance(TextFileEditorModel, toResource.call(this, '/path/index_async.txt'), 'utf8', undefined));\n\n\t\tawait testSaveFromSaveParticipant(model, false, false, false);\n\t});\n\n\ttest('Save Participant, calling save from within is unsupported but does not explode (async save, no model change)', async function () {\n\t\tconst model: TextFileEditorModel = disposables.add(instantiationService.createInstance(TextFileEditorModel, toResource.call(this, '/path/index_async.txt'), 'utf8', undefined));\n\n\t\tawait testSaveFromSaveParticipant(model, true, false, false);\n\t});\n\n\ttest('Save Participant, calling save from within is unsupported but does not explode (sync save, model change)', async function () {\n\t\tconst model: TextFileEditorModel = disposables.add(instantiationService.createInstance(TextFileEditorModel, toResource.call(this, '/path/index_async.txt'), 'utf8', undefined));\n\n\t\tawait testSaveFromSaveParticipant(model, false, true, false);\n\t});\n\n\ttest('Save Participant, calling save from within is unsupported but does not explode (async save, model change)', async function () {\n\t\tconst model: TextFileEditorModel = disposables.add(instantiationService.createInstance(TextFileEditorModel, toResource.call(this, '/path/index_async.txt'), 'utf8', undefined));\n\n\t\tawait testSaveFromSaveParticipant(model, true, true, false);\n\t});\n\n\ttest('Save Participant, calling save from within is unsupported but does not explode (force)', async function () {\n\t\tconst model: TextFileEditorModel = disposables.add(instantiationService.createInstance(TextFileEditorModel, toResource.call(this, '/path/index_async.txt'), 'utf8', undefined));\n\n\t\tawait testSaveFromSaveParticipant(model, false, false, true);\n\t});\n\n\tasync function testSaveFromSaveParticipant(model: TextFileEditorModel, async: boolean, modelChange: boolean, force: boolean): Promise<void> {\n\n\t\tdisposables.add(accessor.textFileService.files.addSaveParticipant({\n\t\t\tparticipate: async () => {\n\t\t\t\tif (async) {\n\t\t\t\t\tawait timeout(10);\n\t\t\t\t}\n\n\t\t\t\tif (modelChange) {\n\t\t\t\t\tmodel.updateTextEditorModel(createTextBufferFactory('bar'));\n\n\t\t\t\t\tconst newSavePromise = model.save(force ? { force } : undefined);\n\n\t\t\t\t\t// assert that this is not the same promise as the outer one\n\t\t\t\t\tassert.notStrictEqual(savePromise, newSavePromise);\n\n\t\t\t\t\tawait newSavePromise;\n\t\t\t\t} else {\n\t\t\t\t\tconst newSavePromise = model.save(force ? { force } : undefined);\n\n\t\t\t\t\t// assert that this is the same promise as the outer one\n\t\t\t\t\tassert.strictEqual(savePromise, newSavePromise);\n\n\t\t\t\t\tawait savePromise;\n\t\t\t\t}\n\t\t\t}\n\t\t}));\n\n\t\tawait model.resolve();\n\t\tmodel.updateTextEditorModel(createTextBufferFactory('foo'));\n\n\t\tconst savePromise = model.save(force ? { force } : undefined);\n\t\tawait savePromise;\n\t}\n\n\ttest('Save Participant carries context', async function () {\n\t\tconst model: TextFileEditorModel = disposables.add(instantiationService.createInstance(TextFileEditorModel, toResource.call(this, '/path/index_async.txt'), 'utf8', undefined));\n\n\t\tconst from = URI.file('testFrom');\n\t\tlet e: Error | undefined = undefined;\n\t\tdisposables.add(accessor.textFileService.files.addSaveParticipant({\n\t\t\tparticipate: async (wc, context) => {\n\t\t\t\ttry {\n\t\t\t\t\tassert.strictEqual(context.reason, SaveReason.EXPLICIT);\n\t\t\t\t\tassert.strictEqual(context.savedFrom?.toString(), from.toString());\n\t\t\t\t} catch (error) {\n\t\t\t\t\te = error;\n\t\t\t\t}\n\t\t\t}\n\t\t}));\n\n\t\tawait model.resolve();\n\t\tmodel.updateTextEditorModel(createTextBufferFactory('foo'));\n\n\t\tawait model.save({ force: true, from });\n\n\t\tif (e) {\n\t\t\tthrow e;\n\t\t}\n\t});\n\n\tensureNoDisposablesAreLeakedInTestSuite();\n});\n"],
  "mappings": "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",
  "names": ["res", "model"]
}
