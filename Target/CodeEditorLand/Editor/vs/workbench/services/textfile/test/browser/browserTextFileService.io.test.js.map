{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/textfile/test/browser/browserTextFileService.io.test.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { workbenchInstantiationService, TestInMemoryFileSystemProvider, TestBrowserTextFileServiceWithEncodingOverrides } from '../../../../test/browser/workbenchTestServices.js';\nimport { NullLogService } from '../../../../../platform/log/common/log.js';\nimport { FileService } from '../../../../../platform/files/common/fileService.js';\nimport { Schemas } from '../../../../../base/common/network.js';\nimport { ITextFileService } from '../../common/textfiles.js';\nimport { TextFileEditorModelManager } from '../../common/textFileEditorModelManager.js';\nimport { DisposableStore } from '../../../../../base/common/lifecycle.js';\nimport { ServiceCollection } from '../../../../../platform/instantiation/common/serviceCollection.js';\nimport { IFileService, IStat } from '../../../../../platform/files/common/files.js';\nimport { URI } from '../../../../../base/common/uri.js';\nimport { join } from '../../../../../base/common/path.js';\nimport { UTF16le, detectEncodingByBOMFromBuffer, UTF8_with_bom, UTF16be, toCanonicalName } from '../../common/encoding.js';\nimport { VSBuffer } from '../../../../../base/common/buffer.js';\nimport files from '../common/fixtures/files.js';\nimport createSuite from '../common/textFileService.io.test.js';\nimport { isWeb } from '../../../../../base/common/platform.js';\nimport { IWorkingCopyFileService, WorkingCopyFileService } from '../../../workingCopy/common/workingCopyFileService.js';\nimport { WorkingCopyService } from '../../../workingCopy/common/workingCopyService.js';\nimport { UriIdentityService } from '../../../../../platform/uriIdentity/common/uriIdentityService.js';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from '../../../../../base/test/common/utils.js';\n\n// optimization: we don't need to run this suite in native environment,\n// because we have nativeTextFileService.io.test.ts for it,\n// so our tests run faster\nif (isWeb) {\n\tsuite('Files - BrowserTextFileService i/o', function () {\n\t\tconst disposables = new DisposableStore();\n\n\t\tlet service: ITextFileService;\n\t\tlet fileProvider: TestInMemoryFileSystemProvider;\n\t\tconst testDir = 'test';\n\n\t\tcreateSuite({\n\t\t\tsetup: async () => {\n\t\t\t\tconst instantiationService = workbenchInstantiationService(undefined, disposables);\n\n\t\t\t\tconst logService = new NullLogService();\n\t\t\t\tconst fileService = disposables.add(new FileService(logService));\n\n\t\t\t\tfileProvider = disposables.add(new TestInMemoryFileSystemProvider());\n\t\t\t\tdisposables.add(fileService.registerProvider(Schemas.file, fileProvider));\n\n\t\t\t\tconst collection = new ServiceCollection();\n\t\t\t\tcollection.set(IFileService, fileService);\n\t\t\t\tcollection.set(IWorkingCopyFileService, disposables.add(new WorkingCopyFileService(fileService, disposables.add(new WorkingCopyService()), instantiationService, disposables.add(new UriIdentityService(fileService)))));\n\n\t\t\t\tservice = disposables.add(instantiationService.createChild(collection).createInstance(TestBrowserTextFileServiceWithEncodingOverrides));\n\t\t\t\tdisposables.add(<TextFileEditorModelManager>service.files);\n\n\t\t\t\tawait fileProvider.mkdir(URI.file(testDir));\n\t\t\t\tfor (const fileName in files) {\n\t\t\t\t\tawait fileProvider.writeFile(\n\t\t\t\t\t\tURI.file(join(testDir, fileName)),\n\t\t\t\t\t\tfiles[fileName],\n\t\t\t\t\t\t{ create: true, overwrite: false, unlock: false, atomic: false }\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\treturn { service, testDir };\n\t\t\t},\n\n\t\t\tteardown: async () => {\n\t\t\t\tdisposables.clear();\n\t\t\t},\n\n\t\t\texists,\n\t\t\tstat,\n\t\t\treadFile,\n\t\t\tdetectEncodingByBOM\n\t\t});\n\n\t\tasync function exists(fsPath: string): Promise<boolean> {\n\t\t\ttry {\n\t\t\t\tawait fileProvider.readFile(URI.file(fsPath));\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\tcatch (e) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\tasync function readFile(fsPath: string): Promise<VSBuffer>;\n\t\tasync function readFile(fsPath: string, encoding: string): Promise<string>;\n\t\tasync function readFile(fsPath: string, encoding?: string): Promise<VSBuffer | string> {\n\t\t\tconst file = await fileProvider.readFile(URI.file(fsPath));\n\n\t\t\tif (!encoding) {\n\t\t\t\treturn VSBuffer.wrap(file);\n\t\t\t}\n\n\t\t\treturn new TextDecoder(toCanonicalName(encoding)).decode(file);\n\t\t}\n\n\t\tasync function stat(fsPath: string): Promise<IStat> {\n\t\t\treturn fileProvider.stat(URI.file(fsPath));\n\t\t}\n\n\t\tasync function detectEncodingByBOM(fsPath: string): Promise<typeof UTF16be | typeof UTF16le | typeof UTF8_with_bom | null> {\n\t\t\ttry {\n\t\t\t\tconst buffer = await readFile(fsPath);\n\n\t\t\t\treturn detectEncodingByBOMFromBuffer(buffer.slice(0, 3), 3);\n\t\t\t} catch (error) {\n\t\t\t\treturn null; // ignore errors (like file not found)\n\t\t\t}\n\t\t}\n\n\t\tensureNoDisposablesAreLeakedInTestSuite();\n\t});\n}\n"],
  "mappings": "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",
  "names": []
}
