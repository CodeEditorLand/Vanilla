{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/untitled/test/browser/untitledTextEditor.test.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport assert from 'assert';\nimport { URI } from '../../../../../base/common/uri.js';\nimport { join } from '../../../../../base/common/path.js';\nimport { IInstantiationService } from '../../../../../platform/instantiation/common/instantiation.js';\nimport { IUntitledTextEditorService, UntitledTextEditorService } from '../../common/untitledTextEditorService.js';\nimport { workbenchInstantiationService, TestServiceAccessor } from '../../../../test/browser/workbenchTestServices.js';\nimport { snapshotToString } from '../../../textfile/common/textfiles.js';\nimport { PLAINTEXT_LANGUAGE_ID } from '../../../../../editor/common/languages/modesRegistry.js';\nimport { ISingleEditOperation } from '../../../../../editor/common/core/editOperation.js';\nimport { Range } from '../../../../../editor/common/core/range.js';\nimport { UntitledTextEditorInput } from '../../common/untitledTextEditorInput.js';\nimport { IUntitledTextEditorModel, UntitledTextEditorModel } from '../../common/untitledTextEditorModel.js';\nimport { CancellationToken } from '../../../../../base/common/cancellation.js';\nimport { EditorInputCapabilities } from '../../../../common/editor.js';\nimport { DisposableStore } from '../../../../../base/common/lifecycle.js';\nimport { isReadable, isReadableStream } from '../../../../../base/common/stream.js';\nimport { readableToBuffer, streamToBuffer, VSBufferReadable, VSBufferReadableStream } from '../../../../../base/common/buffer.js';\nimport { LanguageDetectionLanguageEventSource } from '../../../languageDetection/common/languageDetectionWorkerService.js';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from '../../../../../base/test/common/utils.js';\nimport { timeout } from '../../../../../base/common/async.js';\n\nsuite('Untitled text editors', () => {\n\n\tclass TestUntitledTextEditorInput extends UntitledTextEditorInput {\n\t\tgetModel() { return this.model; }\n\t}\n\n\tconst disposables = new DisposableStore();\n\tlet instantiationService: IInstantiationService;\n\tlet accessor: TestServiceAccessor;\n\n\tsetup(() => {\n\t\tinstantiationService = workbenchInstantiationService(undefined, disposables);\n\t\taccessor = instantiationService.createInstance(TestServiceAccessor);\n\t\tdisposables.add(accessor.untitledTextEditorService as UntitledTextEditorService);\n\t});\n\n\tteardown(() => {\n\t\tdisposables.clear();\n\t});\n\n\ttest('basics', async () => {\n\t\tconst service = accessor.untitledTextEditorService;\n\t\tconst workingCopyService = accessor.workingCopyService;\n\n\t\tconst events: IUntitledTextEditorModel[] = [];\n\t\tdisposables.add(service.onDidCreate(model => {\n\t\t\tevents.push(model);\n\t\t}));\n\n\t\tconst input1 = instantiationService.createInstance(TestUntitledTextEditorInput, service.create());\n\t\tawait input1.resolve();\n\t\tassert.strictEqual(service.get(input1.resource), input1.getModel());\n\t\tassert.ok(!accessor.untitledTextEditorService.isUntitledWithAssociatedResource(input1.resource));\n\n\t\tassert.strictEqual(events.length, 1);\n\t\tassert.strictEqual(events[0].resource.toString(), input1.getModel().resource.toString());\n\n\t\tassert.ok(service.get(input1.resource));\n\t\tassert.ok(!service.get(URI.file('testing')));\n\n\t\tassert.ok(input1.hasCapability(EditorInputCapabilities.Untitled));\n\t\tassert.ok(!input1.hasCapability(EditorInputCapabilities.Readonly));\n\t\tassert.ok(!input1.isReadonly());\n\t\tassert.ok(!input1.hasCapability(EditorInputCapabilities.Singleton));\n\t\tassert.ok(!input1.hasCapability(EditorInputCapabilities.RequiresTrust));\n\t\tassert.ok(!input1.hasCapability(EditorInputCapabilities.Scratchpad));\n\n\t\tconst input2 = instantiationService.createInstance(TestUntitledTextEditorInput, service.create());\n\t\tassert.strictEqual(service.get(input2.resource), input2.getModel());\n\n\t\t// toUntyped()\n\t\tconst untypedInput = input1.toUntyped({ preserveViewState: 0 });\n\t\tassert.strictEqual(untypedInput.forceUntitled, true);\n\n\t\t// get()\n\t\tassert.strictEqual(service.get(input1.resource), input1.getModel());\n\t\tassert.strictEqual(service.get(input2.resource), input2.getModel());\n\n\t\t// revert()\n\t\tawait input1.revert(0);\n\t\tassert.ok(input1.isDisposed());\n\t\tassert.ok(!service.get(input1.resource));\n\n\t\t// dirty\n\t\tconst model = await input2.resolve();\n\t\tassert.strictEqual(await service.resolve({ untitledResource: input2.resource }), model);\n\t\tassert.ok(service.get(model.resource));\n\n\t\tassert.strictEqual(events.length, 2);\n\t\tassert.strictEqual(events[1].resource.toString(), input2.resource.toString());\n\n\t\tassert.ok(!input2.isDirty());\n\n\t\tconst resourcePromise = awaitDidChangeDirty(accessor.untitledTextEditorService);\n\n\t\tmodel.textEditorModel?.setValue('foo bar');\n\n\t\tconst resource = await resourcePromise;\n\n\t\tassert.strictEqual(resource.toString(), input2.resource.toString());\n\n\t\tassert.ok(input2.isDirty());\n\n\t\tconst dirtyUntypedInput = input2.toUntyped({ preserveViewState: 0 });\n\t\tassert.strictEqual(dirtyUntypedInput.contents, 'foo bar');\n\t\tassert.strictEqual(dirtyUntypedInput.resource, undefined);\n\n\t\tconst dirtyUntypedInputWithResource = input2.toUntyped({ preserveViewState: 0, preserveResource: true });\n\t\tassert.strictEqual(dirtyUntypedInputWithResource.contents, 'foo bar');\n\t\tassert.strictEqual(dirtyUntypedInputWithResource?.resource?.toString(), input2.resource.toString());\n\n\t\tconst dirtyUntypedInputWithoutContent = input2.toUntyped();\n\t\tassert.strictEqual(dirtyUntypedInputWithoutContent.resource?.toString(), input2.resource.toString());\n\t\tassert.strictEqual(dirtyUntypedInputWithoutContent.contents, undefined);\n\n\t\tassert.ok(workingCopyService.isDirty(input2.resource));\n\t\tassert.strictEqual(workingCopyService.dirtyCount, 1);\n\n\t\tawait input1.revert(0);\n\t\tawait input2.revert(0);\n\t\tassert.ok(!service.get(input1.resource));\n\t\tassert.ok(!service.get(input2.resource));\n\t\tassert.ok(!input2.isDirty());\n\t\tassert.ok(!model.isDirty());\n\n\t\tassert.ok(!workingCopyService.isDirty(input2.resource));\n\t\tassert.strictEqual(workingCopyService.dirtyCount, 0);\n\n\t\tawait input1.revert(0);\n\t\tassert.ok(input1.isDisposed());\n\t\tassert.ok(!service.get(input1.resource));\n\n\t\tinput2.dispose();\n\t\tassert.ok(!service.get(input2.resource));\n\t});\n\n\tfunction awaitDidChangeDirty(service: IUntitledTextEditorService): Promise<URI> {\n\t\treturn new Promise(resolve => {\n\t\t\tconst listener = service.onDidChangeDirty(async model => {\n\t\t\t\tlistener.dispose();\n\n\t\t\t\tresolve(model.resource);\n\t\t\t});\n\t\t});\n\t}\n\n\ttest('associated resource is dirty', async () => {\n\t\tconst service = accessor.untitledTextEditorService;\n\t\tconst file = URI.file(join('C:\\\\', '/foo/file.txt'));\n\n\t\tlet onDidChangeDirtyModel: IUntitledTextEditorModel | undefined = undefined;\n\t\tdisposables.add(service.onDidChangeDirty(model => {\n\t\t\tonDidChangeDirtyModel = model;\n\t\t}));\n\n\t\tconst model = disposables.add(service.create({ associatedResource: file }));\n\t\tassert.ok(accessor.untitledTextEditorService.isUntitledWithAssociatedResource(model.resource));\n\t\tconst untitled = disposables.add(instantiationService.createInstance(UntitledTextEditorInput, model));\n\t\tassert.ok(untitled.isDirty());\n\t\tassert.strictEqual(model, onDidChangeDirtyModel);\n\n\t\tconst resolvedModel = await untitled.resolve();\n\n\t\tassert.ok(resolvedModel.hasAssociatedFilePath);\n\t\tassert.strictEqual(untitled.isDirty(), true);\n\t});\n\n\ttest('no longer dirty when content gets empty (not with associated resource)', async () => {\n\t\tconst service = accessor.untitledTextEditorService;\n\t\tconst workingCopyService = accessor.workingCopyService;\n\t\tconst input = disposables.add(instantiationService.createInstance(UntitledTextEditorInput, service.create()));\n\n\t\t// dirty\n\t\tconst model = disposables.add(await input.resolve());\n\t\tmodel.textEditorModel?.setValue('foo bar');\n\t\tassert.ok(model.isDirty());\n\t\tassert.ok(workingCopyService.isDirty(model.resource, model.typeId));\n\t\tmodel.textEditorModel?.setValue('');\n\t\tassert.ok(!model.isDirty());\n\t\tassert.ok(!workingCopyService.isDirty(model.resource, model.typeId));\n\t});\n\n\ttest('via create options', async () => {\n\t\tconst service = accessor.untitledTextEditorService;\n\n\t\tconst input1 = disposables.add(instantiationService.createInstance(UntitledTextEditorInput, service.create()));\n\t\tconst model1 = disposables.add(await input1.resolve());\n\n\t\tmodel1.textEditorModel!.setValue('foo bar');\n\t\tassert.ok(model1.isDirty());\n\n\t\tmodel1.textEditorModel!.setValue('');\n\t\tassert.ok(!model1.isDirty());\n\n\t\tconst input2 = disposables.add(instantiationService.createInstance(UntitledTextEditorInput, service.create({ initialValue: 'Hello World' })));\n\t\tconst model2 = disposables.add(await input2.resolve());\n\t\tassert.strictEqual(snapshotToString(model2.createSnapshot()!), 'Hello World');\n\n\t\tconst input = disposables.add(instantiationService.createInstance(UntitledTextEditorInput, disposables.add(service.create())));\n\n\t\tconst input3 = disposables.add(instantiationService.createInstance(UntitledTextEditorInput, service.create({ untitledResource: input.resource })));\n\t\tconst model3 = disposables.add(await input3.resolve());\n\n\t\tassert.strictEqual(model3.resource.toString(), input.resource.toString());\n\n\t\tconst file = URI.file(join('C:\\\\', '/foo/file44.txt'));\n\t\tconst input4 = disposables.add(instantiationService.createInstance(UntitledTextEditorInput, service.create({ associatedResource: file })));\n\t\tconst model4 = disposables.add(await input4.resolve());\n\t\tassert.ok(model4.hasAssociatedFilePath);\n\t\tassert.ok(model4.isDirty());\n\t});\n\n\ttest('associated path remains dirty when content gets empty', async () => {\n\t\tconst service = accessor.untitledTextEditorService;\n\t\tconst file = URI.file(join('C:\\\\', '/foo/file.txt'));\n\t\tconst input = disposables.add(instantiationService.createInstance(UntitledTextEditorInput, service.create({ associatedResource: file })));\n\n\t\t// dirty\n\t\tconst model = disposables.add(await input.resolve());\n\t\tmodel.textEditorModel?.setValue('foo bar');\n\t\tassert.ok(model.isDirty());\n\t\tmodel.textEditorModel?.setValue('');\n\t\tassert.ok(model.isDirty());\n\t});\n\n\ttest('initial content is dirty', async () => {\n\t\tconst service = accessor.untitledTextEditorService;\n\t\tconst workingCopyService = accessor.workingCopyService;\n\n\t\tconst untitled = disposables.add(instantiationService.createInstance(TestUntitledTextEditorInput, service.create({ initialValue: 'Hello World' })));\n\t\tassert.ok(untitled.isDirty());\n\n\t\tconst backup = (await untitled.getModel().backup(CancellationToken.None)).content;\n\t\tif (isReadableStream(backup)) {\n\t\t\tconst value = await streamToBuffer(backup as VSBufferReadableStream);\n\t\t\tassert.strictEqual(value.toString(), 'Hello World');\n\t\t} else if (isReadable(backup)) {\n\t\t\tconst value = readableToBuffer(backup as VSBufferReadable);\n\t\t\tassert.strictEqual(value.toString(), 'Hello World');\n\t\t} else {\n\t\t\tassert.fail('Missing untitled backup');\n\t\t}\n\n\t\t// dirty\n\t\tconst model = disposables.add(await untitled.resolve());\n\t\tassert.ok(model.isDirty());\n\t\tassert.strictEqual(workingCopyService.dirtyCount, 1);\n\t});\n\n\ttest('created with files.defaultLanguage setting', () => {\n\t\tconst defaultLanguage = 'javascript';\n\t\tconst config = accessor.testConfigurationService;\n\t\tconfig.setUserConfiguration('files', { 'defaultLanguage': defaultLanguage });\n\n\t\tconst service = accessor.untitledTextEditorService;\n\t\tconst input = disposables.add(service.create());\n\n\t\tassert.strictEqual(input.getLanguageId(), defaultLanguage);\n\n\t\tconfig.setUserConfiguration('files', { 'defaultLanguage': undefined });\n\t});\n\n\ttest('created with files.defaultLanguage setting (${activeEditorLanguage})', async () => {\n\t\tconst config = accessor.testConfigurationService;\n\t\tconfig.setUserConfiguration('files', { 'defaultLanguage': '${activeEditorLanguage}' });\n\n\t\taccessor.editorService.activeTextEditorLanguageId = 'typescript';\n\n\t\tconst service = accessor.untitledTextEditorService;\n\t\tconst model = disposables.add(service.create());\n\n\t\tassert.strictEqual(model.getLanguageId(), 'typescript');\n\n\t\tconfig.setUserConfiguration('files', { 'defaultLanguage': undefined });\n\t\taccessor.editorService.activeTextEditorLanguageId = undefined;\n\t});\n\n\ttest('created with language overrides files.defaultLanguage setting', () => {\n\t\tconst language = 'typescript';\n\t\tconst defaultLanguage = 'javascript';\n\t\tconst config = accessor.testConfigurationService;\n\t\tconfig.setUserConfiguration('files', { 'defaultLanguage': defaultLanguage });\n\n\t\tconst service = accessor.untitledTextEditorService;\n\t\tconst input = disposables.add(service.create({ languageId: language }));\n\n\t\tassert.strictEqual(input.getLanguageId(), language);\n\n\t\tconfig.setUserConfiguration('files', { 'defaultLanguage': undefined });\n\t});\n\n\ttest('can change language afterwards', async () => {\n\t\tconst languageId = 'untitled-input-test';\n\n\t\tdisposables.add(accessor.languageService.registerLanguage({\n\t\t\tid: languageId,\n\t\t}));\n\n\t\tconst service = accessor.untitledTextEditorService;\n\t\tconst input = disposables.add(instantiationService.createInstance(UntitledTextEditorInput, service.create({ languageId: languageId })));\n\n\t\tassert.strictEqual(input.getLanguageId(), languageId);\n\n\t\tconst model = disposables.add(await input.resolve());\n\t\tassert.strictEqual(model.getLanguageId(), languageId);\n\n\t\tinput.setLanguageId(PLAINTEXT_LANGUAGE_ID);\n\n\t\tassert.strictEqual(input.getLanguageId(), PLAINTEXT_LANGUAGE_ID);\n\t});\n\n\ttest('remembers that language was set explicitly', async () => {\n\t\tconst language = 'untitled-input-test';\n\n\t\tdisposables.add(accessor.languageService.registerLanguage({\n\t\t\tid: language,\n\t\t}));\n\n\t\tconst service = accessor.untitledTextEditorService;\n\t\tconst model = disposables.add(service.create());\n\t\tconst input = disposables.add(instantiationService.createInstance(UntitledTextEditorInput, model));\n\n\t\tassert.ok(!input.hasLanguageSetExplicitly);\n\t\tinput.setLanguageId(PLAINTEXT_LANGUAGE_ID);\n\t\tassert.ok(input.hasLanguageSetExplicitly);\n\n\t\tassert.strictEqual(input.getLanguageId(), PLAINTEXT_LANGUAGE_ID);\n\t});\n\n\t// Issue #159202\n\ttest('remembers that language was set explicitly if set by another source (i.e. ModelService)', async () => {\n\t\tconst language = 'untitled-input-test';\n\n\t\tdisposables.add(accessor.languageService.registerLanguage({\n\t\t\tid: language,\n\t\t}));\n\n\t\tconst service = accessor.untitledTextEditorService;\n\t\tconst model = disposables.add(service.create());\n\t\tconst input = disposables.add(instantiationService.createInstance(UntitledTextEditorInput, model));\n\t\tdisposables.add(await input.resolve());\n\n\t\tassert.ok(!input.hasLanguageSetExplicitly);\n\t\tmodel.textEditorModel!.setLanguage(accessor.languageService.createById(language));\n\t\tassert.ok(input.hasLanguageSetExplicitly);\n\n\t\tassert.strictEqual(model.getLanguageId(), language);\n\t});\n\n\ttest('Language is not set explicitly if set by language detection source', async () => {\n\t\tconst language = 'untitled-input-test';\n\n\t\tdisposables.add(accessor.languageService.registerLanguage({\n\t\t\tid: language,\n\t\t}));\n\n\t\tconst service = accessor.untitledTextEditorService;\n\t\tconst model = disposables.add(service.create());\n\t\tconst input = disposables.add(instantiationService.createInstance(UntitledTextEditorInput, model));\n\t\tawait input.resolve();\n\n\t\tassert.ok(!input.hasLanguageSetExplicitly);\n\t\tmodel.textEditorModel!.setLanguage(\n\t\t\taccessor.languageService.createById(language),\n\t\t\t// This is really what this is testing\n\t\t\tLanguageDetectionLanguageEventSource);\n\t\tassert.ok(!input.hasLanguageSetExplicitly);\n\n\t\tassert.strictEqual(model.getLanguageId(), language);\n\t});\n\n\ttest('service#onDidChangeEncoding', async () => {\n\t\tconst service = accessor.untitledTextEditorService;\n\t\tconst input = disposables.add(instantiationService.createInstance(UntitledTextEditorInput, service.create()));\n\n\t\tlet counter = 0;\n\n\t\tdisposables.add(service.onDidChangeEncoding(model => {\n\t\t\tcounter++;\n\t\t\tassert.strictEqual(model.resource.toString(), input.resource.toString());\n\t\t}));\n\n\t\t// encoding\n\t\tconst model = disposables.add(await input.resolve());\n\t\tawait model.setEncoding('utf16');\n\t\tassert.strictEqual(counter, 1);\n\t});\n\n\ttest('service#onDidChangeLabel', async () => {\n\t\tconst service = accessor.untitledTextEditorService;\n\t\tconst input = disposables.add(instantiationService.createInstance(UntitledTextEditorInput, service.create()));\n\n\t\tlet counter = 0;\n\n\t\tdisposables.add(service.onDidChangeLabel(model => {\n\t\t\tcounter++;\n\t\t\tassert.strictEqual(model.resource.toString(), input.resource.toString());\n\t\t}));\n\n\t\t// label\n\t\tconst model = disposables.add(await input.resolve());\n\t\tmodel.textEditorModel?.setValue('Foo Bar');\n\t\tassert.strictEqual(counter, 1);\n\t});\n\n\ttest('service#onWillDispose', async () => {\n\t\tconst service = accessor.untitledTextEditorService;\n\t\tconst input = disposables.add(instantiationService.createInstance(UntitledTextEditorInput, service.create()));\n\n\t\tlet counter = 0;\n\n\t\tdisposables.add(service.onWillDispose(model => {\n\t\t\tcounter++;\n\t\t\tassert.strictEqual(model.resource.toString(), input.resource.toString());\n\t\t}));\n\n\t\tconst model = disposables.add(await input.resolve());\n\t\tassert.strictEqual(counter, 0);\n\t\tmodel.dispose();\n\t\tassert.strictEqual(counter, 1);\n\t});\n\n\n\ttest('service#getValue', async () => {\n\t\tconst service = accessor.untitledTextEditorService;\n\t\tconst input1 = disposables.add(instantiationService.createInstance(UntitledTextEditorInput, service.create()));\n\t\tconst model1 = disposables.add(await input1.resolve());\n\n\t\tmodel1.textEditorModel!.setValue('foo bar');\n\t\tassert.strictEqual(service.getValue(model1.resource), 'foo bar');\n\t\tmodel1.dispose();\n\n\t\t// When a model doesn't exist, it should return undefined\n\t\tassert.strictEqual(service.getValue(URI.parse('https://www.microsoft.com')), undefined);\n\t});\n\n\ttest('model#onDidChangeContent', async function () {\n\t\tconst service = accessor.untitledTextEditorService;\n\t\tconst input = disposables.add(instantiationService.createInstance(UntitledTextEditorInput, service.create()));\n\n\t\tlet counter = 0;\n\n\t\tconst model = disposables.add(await input.resolve());\n\t\tdisposables.add(model.onDidChangeContent(() => counter++));\n\n\t\tmodel.textEditorModel?.setValue('foo');\n\n\t\tassert.strictEqual(counter, 1, 'Dirty model should trigger event');\n\t\tmodel.textEditorModel?.setValue('bar');\n\n\t\tassert.strictEqual(counter, 2, 'Content change when dirty should trigger event');\n\t\tmodel.textEditorModel?.setValue('');\n\n\t\tassert.strictEqual(counter, 3, 'Manual revert should trigger event');\n\t\tmodel.textEditorModel?.setValue('foo');\n\n\t\tassert.strictEqual(counter, 4, 'Dirty model should trigger event');\n\t});\n\n\ttest('model#onDidRevert and input disposed when reverted', async function () {\n\t\tconst service = accessor.untitledTextEditorService;\n\t\tconst input = disposables.add(instantiationService.createInstance(UntitledTextEditorInput, service.create()));\n\n\t\tlet counter = 0;\n\n\t\tconst model = disposables.add(await input.resolve());\n\t\tdisposables.add(model.onDidRevert(() => counter++));\n\n\t\tmodel.textEditorModel?.setValue('foo');\n\n\t\tawait model.revert();\n\n\t\tassert.ok(input.isDisposed());\n\t\tassert.ok(counter === 1);\n\t});\n\n\ttest('model#onDidChangeName and input name', async function () {\n\t\tconst service = accessor.untitledTextEditorService;\n\t\tconst input = disposables.add(instantiationService.createInstance(UntitledTextEditorInput, service.create()));\n\n\t\tlet counter = 0;\n\n\t\tlet model = disposables.add(await input.resolve());\n\t\tdisposables.add(model.onDidChangeName(() => counter++));\n\n\t\tmodel.textEditorModel?.setValue('foo');\n\t\tassert.strictEqual(input.getName(), 'foo');\n\t\tassert.strictEqual(model.name, 'foo');\n\n\t\tassert.strictEqual(counter, 1);\n\t\tmodel.textEditorModel?.setValue('bar');\n\t\tassert.strictEqual(input.getName(), 'bar');\n\t\tassert.strictEqual(model.name, 'bar');\n\n\t\tassert.strictEqual(counter, 2);\n\t\tmodel.textEditorModel?.setValue('');\n\t\tassert.strictEqual(input.getName(), 'Untitled-1');\n\t\tassert.strictEqual(model.name, 'Untitled-1');\n\n\t\tmodel.textEditorModel?.setValue('        ');\n\t\tassert.strictEqual(input.getName(), 'Untitled-1');\n\t\tassert.strictEqual(model.name, 'Untitled-1');\n\n\t\tmodel.textEditorModel?.setValue('([]}'); // require actual words\n\t\tassert.strictEqual(input.getName(), 'Untitled-1');\n\t\tassert.strictEqual(model.name, 'Untitled-1');\n\n\t\tmodel.textEditorModel?.setValue('([]}hello   '); // require actual words\n\t\tassert.strictEqual(input.getName(), '([]}hello');\n\t\tassert.strictEqual(model.name, '([]}hello');\n\n\t\tmodel.textEditorModel?.setValue('12345678901234567890123456789012345678901234567890'); // trimmed at 40chars max\n\t\tassert.strictEqual(input.getName(), '1234567890123456789012345678901234567890');\n\t\tassert.strictEqual(model.name, '1234567890123456789012345678901234567890');\n\n\t\tmodel.textEditorModel?.setValue('123456789012345678901234567890123456789\uD83C\uDF1E'); // do not break grapehems (#111235)\n\t\tassert.strictEqual(input.getName(), '123456789012345678901234567890123456789');\n\t\tassert.strictEqual(model.name, '123456789012345678901234567890123456789');\n\n\t\tmodel.textEditorModel?.setValue('hello\\u202Eworld'); // do not allow RTL in names (#190133)\n\t\tassert.strictEqual(input.getName(), 'helloworld');\n\t\tassert.strictEqual(model.name, 'helloworld');\n\n\t\tassert.strictEqual(counter, 7);\n\n\t\tmodel.textEditorModel?.setValue('Hello\\nWorld');\n\t\tassert.strictEqual(counter, 8);\n\n\t\tfunction createSingleEditOp(text: string, positionLineNumber: number, positionColumn: number, selectionLineNumber: number = positionLineNumber, selectionColumn: number = positionColumn): ISingleEditOperation {\n\t\t\tconst range = new Range(\n\t\t\t\tselectionLineNumber,\n\t\t\t\tselectionColumn,\n\t\t\t\tpositionLineNumber,\n\t\t\t\tpositionColumn\n\t\t\t);\n\n\t\t\treturn {\n\t\t\t\trange,\n\t\t\t\ttext,\n\t\t\t\tforceMoveMarkers: false\n\t\t\t};\n\t\t}\n\n\t\tmodel.textEditorModel?.applyEdits([createSingleEditOp('hello', 2, 2)]);\n\t\tassert.strictEqual(counter, 8); // change was not on first line\n\n\t\tinput.dispose();\n\t\tmodel.dispose();\n\n\t\tconst inputWithContents = disposables.add(instantiationService.createInstance(UntitledTextEditorInput, service.create({ initialValue: 'Foo' })));\n\t\tmodel = disposables.add(await inputWithContents.resolve());\n\n\t\tassert.strictEqual(inputWithContents.getName(), 'Foo');\n\t});\n\n\ttest('model#onDidChangeDirty', async function () {\n\t\tconst service = accessor.untitledTextEditorService;\n\t\tconst input = disposables.add(instantiationService.createInstance(UntitledTextEditorInput, service.create()));\n\n\t\tlet counter = 0;\n\n\t\tconst model = disposables.add(await input.resolve());\n\t\tdisposables.add(model.onDidChangeDirty(() => counter++));\n\n\t\tmodel.textEditorModel?.setValue('foo');\n\n\t\tassert.strictEqual(counter, 1, 'Dirty model should trigger event');\n\t\tmodel.textEditorModel?.setValue('bar');\n\n\t\tassert.strictEqual(counter, 1, 'Another change does not fire event');\n\t});\n\n\ttest('model#onDidChangeEncoding', async function () {\n\t\tconst service = accessor.untitledTextEditorService;\n\t\tconst input = disposables.add(instantiationService.createInstance(UntitledTextEditorInput, service.create()));\n\n\t\tlet counter = 0;\n\n\t\tconst model = disposables.add(await input.resolve());\n\t\tdisposables.add(model.onDidChangeEncoding(() => counter++));\n\n\t\tawait model.setEncoding('utf16');\n\n\t\tassert.strictEqual(counter, 1, 'Dirty model should trigger event');\n\t\tawait model.setEncoding('utf16');\n\n\t\tassert.strictEqual(counter, 1, 'Another change to same encoding does not fire event');\n\t});\n\n\ttest('canDispose with dirty model', async function () {\n\t\tconst service = accessor.untitledTextEditorService;\n\t\tconst input = disposables.add(instantiationService.createInstance(UntitledTextEditorInput, service.create()));\n\n\t\tconst model = disposables.add(await input.resolve());\n\n\t\tmodel.textEditorModel?.setValue('foo');\n\n\t\tconst canDisposePromise = service.canDispose(model as UntitledTextEditorModel);\n\t\tassert.ok(canDisposePromise instanceof Promise);\n\n\t\tlet canDispose = false;\n\t\t(async () => {\n\t\t\tcanDispose = await canDisposePromise;\n\t\t})();\n\n\t\tassert.strictEqual(canDispose, false);\n\t\tmodel.revert({ soft: true });\n\n\t\tawait timeout(0);\n\n\t\tassert.strictEqual(canDispose, true);\n\n\t\tconst canDispose2 = service.canDispose(model as UntitledTextEditorModel);\n\t\tassert.strictEqual(canDispose2, true);\n\t});\n\n\tensureNoDisposablesAreLeakedInTestSuite();\n});\n"],
  "mappings": "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",
  "names": ["model"]
}
