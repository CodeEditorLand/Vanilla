{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/untitled/test/browser/untitledTextEditor.integrationTest.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport assert from 'assert';\nimport { IInstantiationService } from '../../../../../platform/instantiation/common/instantiation.js';\nimport { workbenchInstantiationService, TestServiceAccessor } from '../../../../test/browser/workbenchTestServices.js';\nimport { UntitledTextEditorInput } from '../../common/untitledTextEditorInput.js';\nimport { CancellationToken } from '../../../../../base/common/cancellation.js';\nimport { DisposableStore } from '../../../../../base/common/lifecycle.js';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from '../../../../../base/test/common/utils.js';\n\nsuite('Untitled text editors', () => {\n\n\tconst disposables = new DisposableStore();\n\n\tlet instantiationService: IInstantiationService;\n\tlet accessor: TestServiceAccessor;\n\n\tsetup(() => {\n\t\tinstantiationService = workbenchInstantiationService(undefined, disposables);\n\t\taccessor = instantiationService.createInstance(TestServiceAccessor);\n\t\tdisposables.add(accessor.untitledTextEditorService);\n\t});\n\n\tteardown(() => {\n\t\tdisposables.clear();\n\t});\n\n\ttest('backup and restore (simple)', async function () {\n\t\treturn testBackupAndRestore('Some very small file text content.');\n\t});\n\n\ttest('backup and restore (large, #121347)', async function () {\n\t\tconst largeContent = '\uAD6D\uC5B4\uD55C\\n'.repeat(100000);\n\t\treturn testBackupAndRestore(largeContent);\n\t});\n\n\tasync function testBackupAndRestore(content: string) {\n\t\tconst service = accessor.untitledTextEditorService;\n\t\tconst originalInput = disposables.add(instantiationService.createInstance(UntitledTextEditorInput, service.create()));\n\t\tconst restoredInput = disposables.add(instantiationService.createInstance(UntitledTextEditorInput, service.create()));\n\n\t\tconst originalModel = disposables.add(await originalInput.resolve());\n\t\toriginalModel.textEditorModel?.setValue(content);\n\n\t\tconst backup = await originalModel.backup(CancellationToken.None);\n\t\tconst modelRestoredIdentifier = { typeId: originalModel.typeId, resource: restoredInput.resource };\n\t\tawait accessor.workingCopyBackupService.backup(modelRestoredIdentifier, backup.content);\n\n\t\tconst restoredModel = disposables.add(await restoredInput.resolve());\n\n\t\tassert.strictEqual(restoredModel.textEditorModel?.getValue(), content);\n\t\tassert.strictEqual(restoredModel.isDirty(), true);\n\t}\n\n\tensureNoDisposablesAreLeakedInTestSuite();\n});\n"],
  "mappings": ";;AAKA,OAAO,YAAY;AACnB,SAAS,6BAA6B;AACtC,SAAS,+BAA+B,2BAA2B;AACnE,SAAS,+BAA+B;AACxC,SAAS,yBAAyB;AAClC,SAAS,uBAAuB;AAChC,SAAS,+CAA+C;AAExD,MAAM,yBAAyB,MAAM;AAEpC,QAAM,cAAc,IAAI,gBAAgB;AAExC,MAAI;AACJ,MAAI;AAEJ,QAAM,MAAM;AACX,2BAAuB,8BAA8B,QAAW,WAAW;AAC3E,eAAW,qBAAqB,eAAe,mBAAmB;AAClE,gBAAY,IAAI,SAAS,yBAAyB;AAAA,EACnD,CAAC;AAED,WAAS,MAAM;AACd,gBAAY,MAAM;AAAA,EACnB,CAAC;AAED,OAAK,+BAA+B,iBAAkB;AACrD,WAAO,qBAAqB,oCAAoC;AAAA,EACjE,CAAC;AAED,OAAK,uCAAuC,iBAAkB;AAC7D,UAAM,eAAe,uBAAQ,OAAO,GAAM;AAC1C,WAAO,qBAAqB,YAAY;AAAA,EACzC,CAAC;AAED,iBAAe,qBAAqB,SAAiB;AACpD,UAAM,UAAU,SAAS;AACzB,UAAM,gBAAgB,YAAY,IAAI,qBAAqB,eAAe,yBAAyB,QAAQ,OAAO,CAAC,CAAC;AACpH,UAAM,gBAAgB,YAAY,IAAI,qBAAqB,eAAe,yBAAyB,QAAQ,OAAO,CAAC,CAAC;AAEpH,UAAM,gBAAgB,YAAY,IAAI,MAAM,cAAc,QAAQ,CAAC;AACnE,kBAAc,iBAAiB,SAAS,OAAO;AAE/C,UAAM,SAAS,MAAM,cAAc,OAAO,kBAAkB,IAAI;AAChE,UAAM,0BAA0B,EAAE,QAAQ,cAAc,QAAQ,UAAU,cAAc,SAAS;AACjG,UAAM,SAAS,yBAAyB,OAAO,yBAAyB,OAAO,OAAO;AAEtF,UAAM,gBAAgB,YAAY,IAAI,MAAM,cAAc,QAAQ,CAAC;AAEnE,WAAO,YAAY,cAAc,iBAAiB,SAAS,GAAG,OAAO;AACrE,WAAO,YAAY,cAAc,QAAQ,GAAG,IAAI;AAAA,EACjD;AAhBe;AAkBf,0CAAwC;AACzC,CAAC;",
  "names": []
}
