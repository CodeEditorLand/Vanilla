import d from"assert";import"../../../../../platform/instantiation/common/instantiation.js";import{workbenchInstantiationService as I,TestServiceAccessor as f}from"../../../../test/browser/workbenchTestServices.js";import{UntitledTextEditorInput as l}from"../../common/untitledTextEditorInput.js";import{CancellationToken as v}from"../../../../../base/common/cancellation.js";import{DisposableStore as S}from"../../../../../base/common/lifecycle.js";import{ensureNoDisposablesAreLeakedInTestSuite as k}from"../../../../../base/test/common/utils.js";suite("Untitled text editors",()=>{const e=new S;let t,r;setup(()=>{t=I(void 0,e),r=t.createInstance(f),e.add(r.untitledTextEditorService)}),teardown(()=>{e.clear()}),test("backup and restore (simple)",async function(){return i("Some very small file text content.")}),test("backup and restore (large, #121347)",async function(){const o=`\uAD6D\uC5B4\uD55C
`.repeat(1e5);return i(o)});async function i(o){const s=r.untitledTextEditorService,u=e.add(t.createInstance(l,s.create())),a=e.add(t.createInstance(l,s.create())),n=e.add(await u.resolve());n.textEditorModel?.setValue(o);const p=await n.backup(v.None),m={typeId:n.typeId,resource:a.resource};await r.workingCopyBackupService.backup(m,p.content);const c=e.add(await a.resolve());d.strictEqual(c.textEditorModel?.getValue(),o),d.strictEqual(c.isDirty(),!0)}k()});
