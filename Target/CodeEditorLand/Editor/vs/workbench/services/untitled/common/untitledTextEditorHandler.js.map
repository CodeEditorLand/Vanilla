{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/untitled/common/untitledTextEditorHandler.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Schemas } from '../../../../base/common/network.js';\nimport { Disposable } from '../../../../base/common/lifecycle.js';\nimport { URI, UriComponents } from '../../../../base/common/uri.js';\nimport { IEditorSerializer } from '../../../common/editor.js';\nimport { EditorInput } from '../../../common/editor/editorInput.js';\nimport { ITextEditorService } from '../../textfile/common/textEditorService.js';\nimport { isEqual, toLocalResource } from '../../../../base/common/resources.js';\nimport { PLAINTEXT_LANGUAGE_ID } from '../../../../editor/common/languages/modesRegistry.js';\nimport { IInstantiationService } from '../../../../platform/instantiation/common/instantiation.js';\nimport { IWorkbenchEnvironmentService } from '../../environment/common/environmentService.js';\nimport { IFilesConfigurationService } from '../../filesConfiguration/common/filesConfigurationService.js';\nimport { IPathService } from '../../path/common/pathService.js';\nimport { UntitledTextEditorInput } from './untitledTextEditorInput.js';\nimport { IWorkbenchContribution } from '../../../common/contributions.js';\nimport { IWorkingCopyIdentifier, NO_TYPE_ID } from '../../workingCopy/common/workingCopy.js';\nimport { IWorkingCopyEditorHandler, IWorkingCopyEditorService } from '../../workingCopy/common/workingCopyEditorService.js';\nimport { IUntitledTextEditorService } from './untitledTextEditorService.js';\n\ninterface ISerializedUntitledTextEditorInput {\n\treadonly resourceJSON: UriComponents;\n\treadonly modeId: string | undefined; // should be `languageId` but is kept for backwards compatibility\n\treadonly encoding: string | undefined;\n}\n\nexport class UntitledTextEditorInputSerializer implements IEditorSerializer {\n\n\tconstructor(\n\t\t@IFilesConfigurationService private readonly filesConfigurationService: IFilesConfigurationService,\n\t\t@IWorkbenchEnvironmentService private readonly environmentService: IWorkbenchEnvironmentService,\n\t\t@IPathService private readonly pathService: IPathService\n\t) { }\n\n\tcanSerialize(editorInput: EditorInput): boolean {\n\t\treturn this.filesConfigurationService.isHotExitEnabled && !editorInput.isDisposed();\n\t}\n\n\tserialize(editorInput: EditorInput): string | undefined {\n\t\tif (!this.canSerialize(editorInput)) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\tconst untitledTextEditorInput = editorInput as UntitledTextEditorInput;\n\n\t\tlet resource = untitledTextEditorInput.resource;\n\t\tif (untitledTextEditorInput.hasAssociatedFilePath) {\n\t\t\tresource = toLocalResource(resource, this.environmentService.remoteAuthority, this.pathService.defaultUriScheme); // untitled with associated file path use the local schema\n\t\t}\n\n\t\t// Language: only remember language if it is either specific (not text)\n\t\t// or if the language was explicitly set by the user. We want to preserve\n\t\t// this information across restarts and not set the language unless\n\t\t// this is the case.\n\t\tlet languageId: string | undefined;\n\t\tconst languageIdCandidate = untitledTextEditorInput.getLanguageId();\n\t\tif (languageIdCandidate !== PLAINTEXT_LANGUAGE_ID) {\n\t\t\tlanguageId = languageIdCandidate;\n\t\t} else if (untitledTextEditorInput.hasLanguageSetExplicitly) {\n\t\t\tlanguageId = languageIdCandidate;\n\t\t}\n\n\t\tconst serialized: ISerializedUntitledTextEditorInput = {\n\t\t\tresourceJSON: resource.toJSON(),\n\t\t\tmodeId: languageId,\n\t\t\tencoding: untitledTextEditorInput.getEncoding()\n\t\t};\n\n\t\treturn JSON.stringify(serialized);\n\t}\n\n\tdeserialize(instantiationService: IInstantiationService, serializedEditorInput: string): UntitledTextEditorInput {\n\t\treturn instantiationService.invokeFunction(accessor => {\n\t\t\tconst deserialized: ISerializedUntitledTextEditorInput = JSON.parse(serializedEditorInput);\n\t\t\tconst resource = URI.revive(deserialized.resourceJSON);\n\t\t\tconst languageId = deserialized.modeId;\n\t\t\tconst encoding = deserialized.encoding;\n\n\t\t\treturn accessor.get(ITextEditorService).createTextEditor({ resource, languageId, encoding, forceUntitled: true }) as UntitledTextEditorInput;\n\t\t});\n\t}\n}\n\nexport class UntitledTextEditorWorkingCopyEditorHandler extends Disposable implements IWorkbenchContribution, IWorkingCopyEditorHandler {\n\n\tstatic readonly ID = 'workbench.contrib.untitledTextEditorWorkingCopyEditorHandler';\n\n\tconstructor(\n\t\t@IWorkingCopyEditorService workingCopyEditorService: IWorkingCopyEditorService,\n\t\t@IWorkbenchEnvironmentService private readonly environmentService: IWorkbenchEnvironmentService,\n\t\t@IPathService private readonly pathService: IPathService,\n\t\t@ITextEditorService private readonly textEditorService: ITextEditorService,\n\t\t@IUntitledTextEditorService private readonly untitledTextEditorService: IUntitledTextEditorService\n\t) {\n\t\tsuper();\n\n\t\tthis._register(workingCopyEditorService.registerHandler(this));\n\t}\n\n\thandles(workingCopy: IWorkingCopyIdentifier): boolean {\n\t\treturn workingCopy.resource.scheme === Schemas.untitled && workingCopy.typeId === NO_TYPE_ID;\n\t}\n\n\tisOpen(workingCopy: IWorkingCopyIdentifier, editor: EditorInput): boolean {\n\t\tif (!this.handles(workingCopy)) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn editor instanceof UntitledTextEditorInput && isEqual(workingCopy.resource, editor.resource);\n\t}\n\n\tcreateEditor(workingCopy: IWorkingCopyIdentifier): EditorInput {\n\t\tlet editorInputResource: URI;\n\n\t\t// If the untitled has an associated resource,\n\t\t// ensure to restore the local resource it had\n\t\tif (this.untitledTextEditorService.isUntitledWithAssociatedResource(workingCopy.resource)) {\n\t\t\teditorInputResource = toLocalResource(workingCopy.resource, this.environmentService.remoteAuthority, this.pathService.defaultUriScheme);\n\t\t} else {\n\t\t\teditorInputResource = workingCopy.resource;\n\t\t}\n\n\t\treturn this.textEditorService.createTextEditor({ resource: editorInputResource, forceUntitled: true });\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
