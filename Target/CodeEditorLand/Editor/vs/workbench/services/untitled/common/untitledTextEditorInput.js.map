{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/untitled/common/untitledTextEditorInput.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { URI } from '../../../../base/common/uri.js';\nimport { DEFAULT_EDITOR_ASSOCIATION, findViewStateForEditor, isUntitledResourceEditorInput, IUntitledTextResourceEditorInput, IUntypedEditorInput, Verbosity } from '../../../common/editor.js';\nimport { EditorInput, IUntypedEditorOptions } from '../../../common/editor/editorInput.js';\nimport { AbstractTextResourceEditorInput } from '../../../common/editor/textResourceEditorInput.js';\nimport { IUntitledTextEditorModel } from './untitledTextEditorModel.js';\nimport { EncodingMode, IEncodingSupport, ILanguageSupport, ITextFileService } from '../../textfile/common/textfiles.js';\nimport { ILabelService } from '../../../../platform/label/common/label.js';\nimport { IEditorService } from '../../editor/common/editorService.js';\nimport { IFileService } from '../../../../platform/files/common/files.js';\nimport { isEqual, toLocalResource } from '../../../../base/common/resources.js';\nimport { IWorkbenchEnvironmentService } from '../../environment/common/environmentService.js';\nimport { IPathService } from '../../path/common/pathService.js';\nimport { ITextEditorOptions } from '../../../../platform/editor/common/editor.js';\nimport { IFilesConfigurationService } from '../../filesConfiguration/common/filesConfigurationService.js';\nimport { ITextModelService } from '../../../../editor/common/services/resolverService.js';\nimport { DisposableStore, dispose, IReference } from '../../../../base/common/lifecycle.js';\nimport { ITextResourceConfigurationService } from '../../../../editor/common/services/textResourceConfiguration.js';\nimport { ICustomEditorLabelService } from '../../editor/common/customEditorLabelService.js';\n\n/**\n * An editor input to be used for untitled text buffers.\n */\nexport class UntitledTextEditorInput extends AbstractTextResourceEditorInput implements IEncodingSupport, ILanguageSupport {\n\n\tstatic readonly ID: string = 'workbench.editors.untitledEditorInput';\n\n\toverride get typeId(): string {\n\t\treturn UntitledTextEditorInput.ID;\n\t}\n\n\toverride get editorId(): string | undefined {\n\t\treturn DEFAULT_EDITOR_ASSOCIATION.id;\n\t}\n\n\tprivate modelResolve: Promise<void> | undefined = undefined;\n\tprivate readonly modelDisposables = this._register(new DisposableStore());\n\tprivate cachedUntitledTextEditorModelReference: IReference<IUntitledTextEditorModel> | undefined = undefined;\n\n\tconstructor(\n\t\tprotected model: IUntitledTextEditorModel,\n\t\t@ITextFileService textFileService: ITextFileService,\n\t\t@ILabelService labelService: ILabelService,\n\t\t@IEditorService editorService: IEditorService,\n\t\t@IFileService fileService: IFileService,\n\t\t@IWorkbenchEnvironmentService private readonly environmentService: IWorkbenchEnvironmentService,\n\t\t@IPathService private readonly pathService: IPathService,\n\t\t@IFilesConfigurationService filesConfigurationService: IFilesConfigurationService,\n\t\t@ITextModelService private readonly textModelService: ITextModelService,\n\t\t@ITextResourceConfigurationService textResourceConfigurationService: ITextResourceConfigurationService,\n\t\t@ICustomEditorLabelService customEditorLabelService: ICustomEditorLabelService\n\t) {\n\t\tsuper(model.resource, undefined, editorService, textFileService, labelService, fileService, filesConfigurationService, textResourceConfigurationService, customEditorLabelService);\n\n\t\tthis.registerModelListeners(model);\n\n\t\tthis._register(this.textFileService.untitled.onDidCreate(model => this.onDidCreateUntitledModel(model)));\n\t}\n\n\tprivate registerModelListeners(model: IUntitledTextEditorModel): void {\n\t\tthis.modelDisposables.clear();\n\n\t\t// re-emit some events from the model\n\t\tthis.modelDisposables.add(model.onDidChangeDirty(() => this._onDidChangeDirty.fire()));\n\t\tthis.modelDisposables.add(model.onDidChangeName(() => this._onDidChangeLabel.fire()));\n\n\t\t// a reverted untitled text editor model renders this input disposed\n\t\tthis.modelDisposables.add(model.onDidRevert(() => this.dispose()));\n\t}\n\n\tprivate onDidCreateUntitledModel(model: IUntitledTextEditorModel): void {\n\t\tif (isEqual(model.resource, this.model.resource) && model !== this.model) {\n\n\t\t\t// Ensure that we keep our model up to date with\n\t\t\t// the actual model from the service so that we\n\t\t\t// never get out of sync with the truth.\n\n\t\t\tthis.model = model;\n\t\t\tthis.registerModelListeners(model);\n\t\t}\n\t}\n\n\toverride getName(): string {\n\t\treturn this.model.name;\n\t}\n\n\toverride getDescription(verbosity = Verbosity.MEDIUM): string | undefined {\n\n\t\t// Without associated path: only use if name and description differ\n\t\tif (!this.model.hasAssociatedFilePath) {\n\t\t\tconst descriptionCandidate = this.resource.path;\n\t\t\tif (descriptionCandidate !== this.getName()) {\n\t\t\t\treturn descriptionCandidate;\n\t\t\t}\n\n\t\t\treturn undefined;\n\t\t}\n\n\t\t// With associated path: delegate to parent\n\t\treturn super.getDescription(verbosity);\n\t}\n\n\toverride getTitle(verbosity: Verbosity): string {\n\n\t\t// Without associated path: check if name and description differ to decide\n\t\t// if description should appear besides the name to distinguish better\n\t\tif (!this.model.hasAssociatedFilePath) {\n\t\t\tconst name = this.getName();\n\t\t\tconst description = this.getDescription();\n\t\t\tif (description && description !== name) {\n\t\t\t\treturn `${name} \u2022 ${description}`;\n\t\t\t}\n\n\t\t\treturn name;\n\t\t}\n\n\t\t// With associated path: delegate to parent\n\t\treturn super.getTitle(verbosity);\n\t}\n\n\toverride isDirty(): boolean {\n\t\treturn this.model.isDirty();\n\t}\n\n\tgetEncoding(): string | undefined {\n\t\treturn this.model.getEncoding();\n\t}\n\n\tsetEncoding(encoding: string, mode: EncodingMode /* ignored, we only have Encode */): Promise<void> {\n\t\treturn this.model.setEncoding(encoding);\n\t}\n\n\tget hasLanguageSetExplicitly() { return this.model.hasLanguageSetExplicitly; }\n\n\tget hasAssociatedFilePath() { return this.model.hasAssociatedFilePath; }\n\n\tsetLanguageId(languageId: string, source?: string): void {\n\t\tthis.model.setLanguageId(languageId, source);\n\t}\n\n\tgetLanguageId(): string | undefined {\n\t\treturn this.model.getLanguageId();\n\t}\n\n\toverride async resolve(): Promise<IUntitledTextEditorModel> {\n\t\tif (!this.modelResolve) {\n\t\t\tthis.modelResolve = (async () => {\n\n\t\t\t\t// Acquire a model reference\n\t\t\t\tthis.cachedUntitledTextEditorModelReference = await this.textModelService.createModelReference(this.resource) as IReference<IUntitledTextEditorModel>;\n\t\t\t})();\n\t\t}\n\n\t\tawait this.modelResolve;\n\n\t\t// It is possible that this input was disposed before the model\n\t\t// finished resolving. As such, we need to make sure to dispose\n\t\t// the model reference to not leak it.\n\t\tif (this.isDisposed()) {\n\t\t\tthis.disposeModelReference();\n\t\t}\n\n\t\treturn this.model;\n\t}\n\n\toverride toUntyped(options?: IUntypedEditorOptions): IUntitledTextResourceEditorInput {\n\t\tconst untypedInput: IUntitledTextResourceEditorInput & { resource: URI | undefined; options: ITextEditorOptions } = {\n\t\t\tresource: this.model.hasAssociatedFilePath ? toLocalResource(this.model.resource, this.environmentService.remoteAuthority, this.pathService.defaultUriScheme) : this.resource,\n\t\t\tforceUntitled: true,\n\t\t\toptions: {\n\t\t\t\toverride: this.editorId\n\t\t\t}\n\t\t};\n\n\t\tif (typeof options?.preserveViewState === 'number') {\n\t\t\tuntypedInput.encoding = this.getEncoding();\n\t\t\tuntypedInput.languageId = this.getLanguageId();\n\t\t\tuntypedInput.contents = this.model.isModified() ? this.model.textEditorModel?.getValue() : undefined;\n\t\t\tuntypedInput.options.viewState = findViewStateForEditor(this, options.preserveViewState, this.editorService);\n\n\t\t\tif (typeof untypedInput.contents === 'string' && !this.model.hasAssociatedFilePath && !options.preserveResource) {\n\t\t\t\t// Given how generic untitled resources in the system are, we\n\t\t\t\t// need to be careful not to set our resource into the untyped\n\t\t\t\t// editor if we want to transport contents too, because of\n\t\t\t\t// issue https://github.com/microsoft/vscode/issues/140898\n\t\t\t\t// The workaround is to simply remove the resource association\n\t\t\t\t// if we have contents and no associated resource.\n\t\t\t\t// In that case we can ensure that a new untitled resource is\n\t\t\t\t// being created and the contents can be restored properly.\n\t\t\t\tuntypedInput.resource = undefined;\n\t\t\t}\n\t\t}\n\n\t\treturn untypedInput;\n\t}\n\n\toverride matches(otherInput: EditorInput | IUntypedEditorInput): boolean {\n\t\tif (this === otherInput) {\n\t\t\treturn true;\n\t\t}\n\n\t\tif (otherInput instanceof UntitledTextEditorInput) {\n\t\t\treturn isEqual(otherInput.resource, this.resource);\n\t\t}\n\n\t\tif (isUntitledResourceEditorInput(otherInput)) {\n\t\t\treturn super.matches(otherInput);\n\t\t}\n\n\t\treturn false;\n\t}\n\n\toverride dispose(): void {\n\n\t\t// Model\n\t\tthis.modelResolve = undefined;\n\n\t\t// Model reference\n\t\tthis.disposeModelReference();\n\n\t\tsuper.dispose();\n\t}\n\n\tprivate disposeModelReference(): void {\n\t\tdispose(this.cachedUntitledTextEditorModelReference);\n\t\tthis.cachedUntitledTextEditorModelReference = undefined;\n\t}\n}\n"],
  "mappings": ";;;;;;;;;;;;AAKA,SAAS,WAAW;AACpB,SAAS,4BAA4B,wBAAwB,+BAA+B,kCAAkC,qBAAqB,iBAAiB;AACpK,SAAS,aAAa,6BAA6B;AACnD,SAAS,uCAAuC;AAChD,SAAS,gCAAgC;AACzC,SAAS,cAAc,kBAAkB,kBAAkB,wBAAwB;AACnF,SAAS,qBAAqB;AAC9B,SAAS,sBAAsB;AAC/B,SAAS,oBAAoB;AAC7B,SAAS,SAAS,uBAAuB;AACzC,SAAS,oCAAoC;AAC7C,SAAS,oBAAoB;AAC7B,SAAS,0BAA0B;AACnC,SAAS,kCAAkC;AAC3C,SAAS,yBAAyB;AAClC,SAAS,iBAAiB,SAAS,kBAAkB;AACrD,SAAS,yCAAyC;AAClD,SAAS,iCAAiC;AAKnC,IAAM,0BAAN,cAAsC,gCAA8E;AAAA,EAgB1H,YACW,OACQ,iBACH,cACC,eACF,aACiC,oBAChB,aACH,2BACQ,kBACD,kCACR,0BAC1B;AACD,UAAM,MAAM,UAAU,QAAW,eAAe,iBAAiB,cAAc,aAAa,2BAA2B,kCAAkC,wBAAwB;AAZvK;AAKqC;AAChB;AAEK;AAMpC,SAAK,uBAAuB,KAAK;AAEjC,SAAK,UAAU,KAAK,gBAAgB,SAAS,YAAY,CAAAA,WAAS,KAAK,yBAAyBA,MAAK,CAAC,CAAC;AAAA,EACxG;AAAA,EA7DD,OA2B2H;AAAA;AAAA;AAAA,EAE1H,OAAgB,KAAa;AAAA,EAE7B,IAAa,SAAiB;AAC7B,WAAO,wBAAwB;AAAA,EAChC;AAAA,EAEA,IAAa,WAA+B;AAC3C,WAAO,2BAA2B;AAAA,EACnC;AAAA,EAEQ,eAA0C;AAAA,EACjC,mBAAmB,KAAK,UAAU,IAAI,gBAAgB,CAAC;AAAA,EAChE,yCAA2F;AAAA,EAsB3F,uBAAuB,OAAuC;AACrE,SAAK,iBAAiB,MAAM;AAG5B,SAAK,iBAAiB,IAAI,MAAM,iBAAiB,MAAM,KAAK,kBAAkB,KAAK,CAAC,CAAC;AACrF,SAAK,iBAAiB,IAAI,MAAM,gBAAgB,MAAM,KAAK,kBAAkB,KAAK,CAAC,CAAC;AAGpF,SAAK,iBAAiB,IAAI,MAAM,YAAY,MAAM,KAAK,QAAQ,CAAC,CAAC;AAAA,EAClE;AAAA,EAEQ,yBAAyB,OAAuC;AACvE,QAAI,QAAQ,MAAM,UAAU,KAAK,MAAM,QAAQ,KAAK,UAAU,KAAK,OAAO;AAMzE,WAAK,QAAQ;AACb,WAAK,uBAAuB,KAAK;AAAA,IAClC;AAAA,EACD;AAAA,EAES,UAAkB;AAC1B,WAAO,KAAK,MAAM;AAAA,EACnB;AAAA,EAES,eAAe,YAAY,UAAU,QAA4B;AAGzE,QAAI,CAAC,KAAK,MAAM,uBAAuB;AACtC,YAAM,uBAAuB,KAAK,SAAS;AAC3C,UAAI,yBAAyB,KAAK,QAAQ,GAAG;AAC5C,eAAO;AAAA,MACR;AAEA,aAAO;AAAA,IACR;AAGA,WAAO,MAAM,eAAe,SAAS;AAAA,EACtC;AAAA,EAES,SAAS,WAA8B;AAI/C,QAAI,CAAC,KAAK,MAAM,uBAAuB;AACtC,YAAM,OAAO,KAAK,QAAQ;AAC1B,YAAM,cAAc,KAAK,eAAe;AACxC,UAAI,eAAe,gBAAgB,MAAM;AACxC,eAAO,GAAG,IAAI,WAAM,WAAW;AAAA,MAChC;AAEA,aAAO;AAAA,IACR;AAGA,WAAO,MAAM,SAAS,SAAS;AAAA,EAChC;AAAA,EAES,UAAmB;AAC3B,WAAO,KAAK,MAAM,QAAQ;AAAA,EAC3B;AAAA,EAEA,cAAkC;AACjC,WAAO,KAAK,MAAM,YAAY;AAAA,EAC/B;AAAA,EAEA,YAAY,UAAkB,MAAsE;AACnG,WAAO,KAAK,MAAM,YAAY,QAAQ;AAAA,EACvC;AAAA,EAEA,IAAI,2BAA2B;AAAE,WAAO,KAAK,MAAM;AAAA,EAA0B;AAAA,EAE7E,IAAI,wBAAwB;AAAE,WAAO,KAAK,MAAM;AAAA,EAAuB;AAAA,EAEvE,cAAc,YAAoB,QAAuB;AACxD,SAAK,MAAM,cAAc,YAAY,MAAM;AAAA,EAC5C;AAAA,EAEA,gBAAoC;AACnC,WAAO,KAAK,MAAM,cAAc;AAAA,EACjC;AAAA,EAEA,MAAe,UAA6C;AAC3D,QAAI,CAAC,KAAK,cAAc;AACvB,WAAK,gBAAgB,YAAY;AAGhC,aAAK,yCAAyC,MAAM,KAAK,iBAAiB,qBAAqB,KAAK,QAAQ;AAAA,MAC7G,GAAG;AAAA,IACJ;AAEA,UAAM,KAAK;AAKX,QAAI,KAAK,WAAW,GAAG;AACtB,WAAK,sBAAsB;AAAA,IAC5B;AAEA,WAAO,KAAK;AAAA,EACb;AAAA,EAES,UAAU,SAAmE;AACrF,UAAM,eAA8G;AAAA,MACnH,UAAU,KAAK,MAAM,wBAAwB,gBAAgB,KAAK,MAAM,UAAU,KAAK,mBAAmB,iBAAiB,KAAK,YAAY,gBAAgB,IAAI,KAAK;AAAA,MACrK,eAAe;AAAA,MACf,SAAS;AAAA,QACR,UAAU,KAAK;AAAA,MAChB;AAAA,IACD;AAEA,QAAI,OAAO,SAAS,sBAAsB,UAAU;AACnD,mBAAa,WAAW,KAAK,YAAY;AACzC,mBAAa,aAAa,KAAK,cAAc;AAC7C,mBAAa,WAAW,KAAK,MAAM,WAAW,IAAI,KAAK,MAAM,iBAAiB,SAAS,IAAI;AAC3F,mBAAa,QAAQ,YAAY,uBAAuB,MAAM,QAAQ,mBAAmB,KAAK,aAAa;AAE3G,UAAI,OAAO,aAAa,aAAa,YAAY,CAAC,KAAK,MAAM,yBAAyB,CAAC,QAAQ,kBAAkB;AAShH,qBAAa,WAAW;AAAA,MACzB;AAAA,IACD;AAEA,WAAO;AAAA,EACR;AAAA,EAES,QAAQ,YAAwD;AACxE,QAAI,SAAS,YAAY;AACxB,aAAO;AAAA,IACR;AAEA,QAAI,sBAAsB,yBAAyB;AAClD,aAAO,QAAQ,WAAW,UAAU,KAAK,QAAQ;AAAA,IAClD;AAEA,QAAI,8BAA8B,UAAU,GAAG;AAC9C,aAAO,MAAM,QAAQ,UAAU;AAAA,IAChC;AAEA,WAAO;AAAA,EACR;AAAA,EAES,UAAgB;AAGxB,SAAK,eAAe;AAGpB,SAAK,sBAAsB;AAE3B,UAAM,QAAQ;AAAA,EACf;AAAA,EAEQ,wBAA8B;AACrC,YAAQ,KAAK,sCAAsC;AACnD,SAAK,yCAAyC;AAAA,EAC/C;AACD;AA5Ma,0BAAN;AAAA,EAkBJ;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,GA3BU;",
  "names": ["model"]
}
