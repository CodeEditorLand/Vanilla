{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/untitled/common/untitledTextEditorInput.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport {\n\tDisposableStore,\n\ttype IReference,\n\tdispose,\n} from \"../../../../base/common/lifecycle.js\";\nimport { isEqual, toLocalResource } from \"../../../../base/common/resources.js\";\nimport type { URI } from \"../../../../base/common/uri.js\";\nimport { ITextModelService } from \"../../../../editor/common/services/resolverService.js\";\nimport { ITextResourceConfigurationService } from \"../../../../editor/common/services/textResourceConfiguration.js\";\nimport type { ITextEditorOptions } from \"../../../../platform/editor/common/editor.js\";\nimport { IFileService } from \"../../../../platform/files/common/files.js\";\nimport { ILabelService } from \"../../../../platform/label/common/label.js\";\nimport {\n\tDEFAULT_EDITOR_ASSOCIATION,\n\ttype IUntitledTextResourceEditorInput,\n\ttype IUntypedEditorInput,\n\tVerbosity,\n\tfindViewStateForEditor,\n\tisUntitledResourceEditorInput,\n} from \"../../../common/editor.js\";\nimport type {\n\tEditorInput,\n\tIUntypedEditorOptions,\n} from \"../../../common/editor/editorInput.js\";\nimport { AbstractTextResourceEditorInput } from \"../../../common/editor/textResourceEditorInput.js\";\nimport { ICustomEditorLabelService } from \"../../editor/common/customEditorLabelService.js\";\nimport { IEditorService } from \"../../editor/common/editorService.js\";\nimport { IWorkbenchEnvironmentService } from \"../../environment/common/environmentService.js\";\nimport { IFilesConfigurationService } from \"../../filesConfiguration/common/filesConfigurationService.js\";\nimport { IPathService } from \"../../path/common/pathService.js\";\nimport {\n\ttype EncodingMode,\n\ttype IEncodingSupport,\n\ttype ILanguageSupport,\n\tITextFileService,\n} from \"../../textfile/common/textfiles.js\";\nimport type { IUntitledTextEditorModel } from \"./untitledTextEditorModel.js\";\n\n/**\n * An editor input to be used for untitled text buffers.\n */\nexport class UntitledTextEditorInput\n\textends AbstractTextResourceEditorInput\n\timplements IEncodingSupport, ILanguageSupport\n{\n\tstatic readonly ID: string = \"workbench.editors.untitledEditorInput\";\n\n\toverride get typeId(): string {\n\t\treturn UntitledTextEditorInput.ID;\n\t}\n\n\toverride get editorId(): string | undefined {\n\t\treturn DEFAULT_EDITOR_ASSOCIATION.id;\n\t}\n\n\tprivate modelResolve: Promise<void> | undefined = undefined;\n\tprivate readonly modelDisposables = this._register(new DisposableStore());\n\tprivate cachedUntitledTextEditorModelReference:\n\t\t| IReference<IUntitledTextEditorModel>\n\t\t| undefined = undefined;\n\n\tconstructor(\n\t\tprotected model: IUntitledTextEditorModel,\n\t\t@ITextFileService textFileService: ITextFileService,\n\t\t@ILabelService labelService: ILabelService,\n\t\t@IEditorService editorService: IEditorService,\n\t\t@IFileService fileService: IFileService,\n\t\t@IWorkbenchEnvironmentService\n\t\tprivate readonly environmentService: IWorkbenchEnvironmentService,\n\t\t@IPathService private readonly pathService: IPathService,\n\t\t@IFilesConfigurationService\n\t\tfilesConfigurationService: IFilesConfigurationService,\n\t\t@ITextModelService private readonly textModelService: ITextModelService,\n\t\t@ITextResourceConfigurationService\n\t\ttextResourceConfigurationService: ITextResourceConfigurationService,\n\t\t@ICustomEditorLabelService\n\t\tcustomEditorLabelService: ICustomEditorLabelService,\n\t) {\n\t\tsuper(\n\t\t\tmodel.resource,\n\t\t\tundefined,\n\t\t\teditorService,\n\t\t\ttextFileService,\n\t\t\tlabelService,\n\t\t\tfileService,\n\t\t\tfilesConfigurationService,\n\t\t\ttextResourceConfigurationService,\n\t\t\tcustomEditorLabelService,\n\t\t);\n\n\t\tthis.registerModelListeners(model);\n\n\t\tthis._register(\n\t\t\tthis.textFileService.untitled.onDidCreate((model) =>\n\t\t\t\tthis.onDidCreateUntitledModel(model),\n\t\t\t),\n\t\t);\n\t}\n\n\tprivate registerModelListeners(model: IUntitledTextEditorModel): void {\n\t\tthis.modelDisposables.clear();\n\n\t\t// re-emit some events from the model\n\t\tthis.modelDisposables.add(\n\t\t\tmodel.onDidChangeDirty(() => this._onDidChangeDirty.fire()),\n\t\t);\n\t\tthis.modelDisposables.add(\n\t\t\tmodel.onDidChangeName(() => this._onDidChangeLabel.fire()),\n\t\t);\n\n\t\t// a reverted untitled text editor model renders this input disposed\n\t\tthis.modelDisposables.add(model.onDidRevert(() => this.dispose()));\n\t}\n\n\tprivate onDidCreateUntitledModel(model: IUntitledTextEditorModel): void {\n\t\tif (\n\t\t\tisEqual(model.resource, this.model.resource) &&\n\t\t\tmodel !== this.model\n\t\t) {\n\t\t\t// Ensure that we keep our model up to date with\n\t\t\t// the actual model from the service so that we\n\t\t\t// never get out of sync with the truth.\n\n\t\t\tthis.model = model;\n\t\t\tthis.registerModelListeners(model);\n\t\t}\n\t}\n\n\toverride getName(): string {\n\t\treturn this.model.name;\n\t}\n\n\toverride getDescription(verbosity = Verbosity.MEDIUM): string | undefined {\n\t\t// Without associated path: only use if name and description differ\n\t\tif (!this.model.hasAssociatedFilePath) {\n\t\t\tconst descriptionCandidate = this.resource.path;\n\t\t\tif (descriptionCandidate !== this.getName()) {\n\t\t\t\treturn descriptionCandidate;\n\t\t\t}\n\n\t\t\treturn undefined;\n\t\t}\n\n\t\t// With associated path: delegate to parent\n\t\treturn super.getDescription(verbosity);\n\t}\n\n\toverride getTitle(verbosity: Verbosity): string {\n\t\t// Without associated path: check if name and description differ to decide\n\t\t// if description should appear besides the name to distinguish better\n\t\tif (!this.model.hasAssociatedFilePath) {\n\t\t\tconst name = this.getName();\n\t\t\tconst description = this.getDescription();\n\t\t\tif (description && description !== name) {\n\t\t\t\treturn `${name} \u2022 ${description}`;\n\t\t\t}\n\n\t\t\treturn name;\n\t\t}\n\n\t\t// With associated path: delegate to parent\n\t\treturn super.getTitle(verbosity);\n\t}\n\n\toverride isDirty(): boolean {\n\t\treturn this.model.isDirty();\n\t}\n\n\tgetEncoding(): string | undefined {\n\t\treturn this.model.getEncoding();\n\t}\n\n\tsetEncoding(\n\t\tencoding: string,\n\t\tmode: EncodingMode /* ignored, we only have Encode */,\n\t): Promise<void> {\n\t\treturn this.model.setEncoding(encoding);\n\t}\n\n\tget hasLanguageSetExplicitly() {\n\t\treturn this.model.hasLanguageSetExplicitly;\n\t}\n\n\tget hasAssociatedFilePath() {\n\t\treturn this.model.hasAssociatedFilePath;\n\t}\n\n\tsetLanguageId(languageId: string, source?: string): void {\n\t\tthis.model.setLanguageId(languageId, source);\n\t}\n\n\tgetLanguageId(): string | undefined {\n\t\treturn this.model.getLanguageId();\n\t}\n\n\toverride async resolve(): Promise<IUntitledTextEditorModel> {\n\t\tif (!this.modelResolve) {\n\t\t\tthis.modelResolve = (async () => {\n\t\t\t\t// Acquire a model reference\n\t\t\t\tthis.cachedUntitledTextEditorModelReference =\n\t\t\t\t\t(await this.textModelService.createModelReference(\n\t\t\t\t\t\tthis.resource,\n\t\t\t\t\t)) as IReference<IUntitledTextEditorModel>;\n\t\t\t})();\n\t\t}\n\n\t\tawait this.modelResolve;\n\n\t\t// It is possible that this input was disposed before the model\n\t\t// finished resolving. As such, we need to make sure to dispose\n\t\t// the model reference to not leak it.\n\t\tif (this.isDisposed()) {\n\t\t\tthis.disposeModelReference();\n\t\t}\n\n\t\treturn this.model;\n\t}\n\n\toverride toUntyped(\n\t\toptions?: IUntypedEditorOptions,\n\t): IUntitledTextResourceEditorInput {\n\t\tconst untypedInput: IUntitledTextResourceEditorInput & {\n\t\t\tresource: URI | undefined;\n\t\t\toptions: ITextEditorOptions;\n\t\t} = {\n\t\t\tresource: this.model.hasAssociatedFilePath\n\t\t\t\t? toLocalResource(\n\t\t\t\t\t\tthis.model.resource,\n\t\t\t\t\t\tthis.environmentService.remoteAuthority,\n\t\t\t\t\t\tthis.pathService.defaultUriScheme,\n\t\t\t\t\t)\n\t\t\t\t: this.resource,\n\t\t\tforceUntitled: true,\n\t\t\toptions: {\n\t\t\t\toverride: this.editorId,\n\t\t\t},\n\t\t};\n\n\t\tif (typeof options?.preserveViewState === \"number\") {\n\t\t\tuntypedInput.encoding = this.getEncoding();\n\t\t\tuntypedInput.languageId = this.getLanguageId();\n\t\t\tuntypedInput.contents = this.model.isModified()\n\t\t\t\t? this.model.textEditorModel?.getValue()\n\t\t\t\t: undefined;\n\t\t\tuntypedInput.options.viewState = findViewStateForEditor(\n\t\t\t\tthis,\n\t\t\t\toptions.preserveViewState,\n\t\t\t\tthis.editorService,\n\t\t\t);\n\n\t\t\tif (\n\t\t\t\ttypeof untypedInput.contents === \"string\" &&\n\t\t\t\t!this.model.hasAssociatedFilePath &&\n\t\t\t\t!options.preserveResource\n\t\t\t) {\n\t\t\t\t// Given how generic untitled resources in the system are, we\n\t\t\t\t// need to be careful not to set our resource into the untyped\n\t\t\t\t// editor if we want to transport contents too, because of\n\t\t\t\t// issue https://github.com/microsoft/vscode/issues/140898\n\t\t\t\t// The workaround is to simply remove the resource association\n\t\t\t\t// if we have contents and no associated resource.\n\t\t\t\t// In that case we can ensure that a new untitled resource is\n\t\t\t\t// being created and the contents can be restored properly.\n\t\t\t\tuntypedInput.resource = undefined;\n\t\t\t}\n\t\t}\n\n\t\treturn untypedInput;\n\t}\n\n\toverride matches(otherInput: EditorInput | IUntypedEditorInput): boolean {\n\t\tif (this === otherInput) {\n\t\t\treturn true;\n\t\t}\n\n\t\tif (otherInput instanceof UntitledTextEditorInput) {\n\t\t\treturn isEqual(otherInput.resource, this.resource);\n\t\t}\n\n\t\tif (isUntitledResourceEditorInput(otherInput)) {\n\t\t\treturn super.matches(otherInput);\n\t\t}\n\n\t\treturn false;\n\t}\n\n\toverride dispose(): void {\n\t\t// Model\n\t\tthis.modelResolve = undefined;\n\n\t\t// Model reference\n\t\tthis.disposeModelReference();\n\n\t\tsuper.dispose();\n\t}\n\n\tprivate disposeModelReference(): void {\n\t\tdispose(this.cachedUntitledTextEditorModelReference);\n\t\tthis.cachedUntitledTextEditorModelReference = undefined;\n\t}\n}\n"],
  "mappings": ";;;;;;;;;;;;AAKA;AAAA,EACC;AAAA,EAEA;AAAA,OACM;AACP,SAAS,SAAS,uBAAuB;AAEzC,SAAS,yBAAyB;AAClC,SAAS,yCAAyC;AAElD,SAAS,oBAAoB;AAC7B,SAAS,qBAAqB;AAC9B;AAAA,EACC;AAAA,EAGA;AAAA,EACA;AAAA,EACA;AAAA,OACM;AAKP,SAAS,uCAAuC;AAChD,SAAS,iCAAiC;AAC1C,SAAS,sBAAsB;AAC/B,SAAS,oCAAoC;AAC7C,SAAS,kCAAkC;AAC3C,SAAS,oBAAoB;AAC7B;AAAA,EAIC;AAAA,OACM;AAMA,IAAM,0BAAN,cACE,gCAET;AAAA,EAiBC,YACW,OACQ,iBACH,cACC,eACF,aAEG,oBACc,aAE/B,2BACoC,kBAEpC,kCAEA,0BACC;AACD;AAAA,MACC,MAAM;AAAA,MACN;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACD;AA1BU;AAMO;AACc;AAGK;AAkBpC,SAAK,uBAAuB,KAAK;AAEjC,SAAK;AAAA,MACJ,KAAK,gBAAgB,SAAS;AAAA,QAAY,CAACA,WAC1C,KAAK,yBAAyBA,MAAK;AAAA,MACpC;AAAA,IACD;AAAA,EACD;AAAA,EAtGD,OAiDA;AAAA;AAAA;AAAA,EACC,OAAgB,KAAa;AAAA,EAE7B,IAAa,SAAiB;AAC7B,WAAO,wBAAwB;AAAA,EAChC;AAAA,EAEA,IAAa,WAA+B;AAC3C,WAAO,2BAA2B;AAAA,EACnC;AAAA,EAEQ,eAA0C;AAAA,EACjC,mBAAmB,KAAK,UAAU,IAAI,gBAAgB,CAAC;AAAA,EAChE,yCAEO;AAAA,EAwCP,uBAAuB,OAAuC;AACrE,SAAK,iBAAiB,MAAM;AAG5B,SAAK,iBAAiB;AAAA,MACrB,MAAM,iBAAiB,MAAM,KAAK,kBAAkB,KAAK,CAAC;AAAA,IAC3D;AACA,SAAK,iBAAiB;AAAA,MACrB,MAAM,gBAAgB,MAAM,KAAK,kBAAkB,KAAK,CAAC;AAAA,IAC1D;AAGA,SAAK,iBAAiB,IAAI,MAAM,YAAY,MAAM,KAAK,QAAQ,CAAC,CAAC;AAAA,EAClE;AAAA,EAEQ,yBAAyB,OAAuC;AACvE,QACC,QAAQ,MAAM,UAAU,KAAK,MAAM,QAAQ,KAC3C,UAAU,KAAK,OACd;AAKD,WAAK,QAAQ;AACb,WAAK,uBAAuB,KAAK;AAAA,IAClC;AAAA,EACD;AAAA,EAES,UAAkB;AAC1B,WAAO,KAAK,MAAM;AAAA,EACnB;AAAA,EAES,eAAe,YAAY,UAAU,QAA4B;AAEzE,QAAI,CAAC,KAAK,MAAM,uBAAuB;AACtC,YAAM,uBAAuB,KAAK,SAAS;AAC3C,UAAI,yBAAyB,KAAK,QAAQ,GAAG;AAC5C,eAAO;AAAA,MACR;AAEA,aAAO;AAAA,IACR;AAGA,WAAO,MAAM,eAAe,SAAS;AAAA,EACtC;AAAA,EAES,SAAS,WAA8B;AAG/C,QAAI,CAAC,KAAK,MAAM,uBAAuB;AACtC,YAAM,OAAO,KAAK,QAAQ;AAC1B,YAAM,cAAc,KAAK,eAAe;AACxC,UAAI,eAAe,gBAAgB,MAAM;AACxC,eAAO,GAAG,IAAI,WAAM,WAAW;AAAA,MAChC;AAEA,aAAO;AAAA,IACR;AAGA,WAAO,MAAM,SAAS,SAAS;AAAA,EAChC;AAAA,EAES,UAAmB;AAC3B,WAAO,KAAK,MAAM,QAAQ;AAAA,EAC3B;AAAA,EAEA,cAAkC;AACjC,WAAO,KAAK,MAAM,YAAY;AAAA,EAC/B;AAAA,EAEA,YACC,UACA,MACgB;AAChB,WAAO,KAAK,MAAM,YAAY,QAAQ;AAAA,EACvC;AAAA,EAEA,IAAI,2BAA2B;AAC9B,WAAO,KAAK,MAAM;AAAA,EACnB;AAAA,EAEA,IAAI,wBAAwB;AAC3B,WAAO,KAAK,MAAM;AAAA,EACnB;AAAA,EAEA,cAAc,YAAoB,QAAuB;AACxD,SAAK,MAAM,cAAc,YAAY,MAAM;AAAA,EAC5C;AAAA,EAEA,gBAAoC;AACnC,WAAO,KAAK,MAAM,cAAc;AAAA,EACjC;AAAA,EAEA,MAAe,UAA6C;AAC3D,QAAI,CAAC,KAAK,cAAc;AACvB,WAAK,gBAAgB,YAAY;AAEhC,aAAK,yCACH,MAAM,KAAK,iBAAiB;AAAA,UAC5B,KAAK;AAAA,QACN;AAAA,MACF,GAAG;AAAA,IACJ;AAEA,UAAM,KAAK;AAKX,QAAI,KAAK,WAAW,GAAG;AACtB,WAAK,sBAAsB;AAAA,IAC5B;AAEA,WAAO,KAAK;AAAA,EACb;AAAA,EAES,UACR,SACmC;AACnC,UAAM,eAGF;AAAA,MACH,UAAU,KAAK,MAAM,wBAClB;AAAA,QACA,KAAK,MAAM;AAAA,QACX,KAAK,mBAAmB;AAAA,QACxB,KAAK,YAAY;AAAA,MAClB,IACC,KAAK;AAAA,MACR,eAAe;AAAA,MACf,SAAS;AAAA,QACR,UAAU,KAAK;AAAA,MAChB;AAAA,IACD;AAEA,QAAI,OAAO,SAAS,sBAAsB,UAAU;AACnD,mBAAa,WAAW,KAAK,YAAY;AACzC,mBAAa,aAAa,KAAK,cAAc;AAC7C,mBAAa,WAAW,KAAK,MAAM,WAAW,IAC3C,KAAK,MAAM,iBAAiB,SAAS,IACrC;AACH,mBAAa,QAAQ,YAAY;AAAA,QAChC;AAAA,QACA,QAAQ;AAAA,QACR,KAAK;AAAA,MACN;AAEA,UACC,OAAO,aAAa,aAAa,YACjC,CAAC,KAAK,MAAM,yBACZ,CAAC,QAAQ,kBACR;AASD,qBAAa,WAAW;AAAA,MACzB;AAAA,IACD;AAEA,WAAO;AAAA,EACR;AAAA,EAES,QAAQ,YAAwD;AACxE,QAAI,SAAS,YAAY;AACxB,aAAO;AAAA,IACR;AAEA,QAAI,sBAAsB,yBAAyB;AAClD,aAAO,QAAQ,WAAW,UAAU,KAAK,QAAQ;AAAA,IAClD;AAEA,QAAI,8BAA8B,UAAU,GAAG;AAC9C,aAAO,MAAM,QAAQ,UAAU;AAAA,IAChC;AAEA,WAAO;AAAA,EACR;AAAA,EAES,UAAgB;AAExB,SAAK,eAAe;AAGpB,SAAK,sBAAsB;AAE3B,UAAM,QAAQ;AAAA,EACf;AAAA,EAEQ,wBAA8B;AACrC,YAAQ,KAAK,sCAAsC;AACnD,SAAK,yCAAyC;AAAA,EAC/C;AACD;AAnQa,0BAAN;AAAA,EAsBJ;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EAEA;AAAA,EACA;AAAA,EAEA;AAAA,EACA;AAAA,EAEA;AAAA,GAlCU;",
  "names": ["model"]
}
