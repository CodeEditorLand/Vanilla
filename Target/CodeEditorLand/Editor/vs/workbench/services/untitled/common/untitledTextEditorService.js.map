{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/untitled/common/untitledTextEditorService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Emitter, Event } from \"../../../../base/common/event.js\";\nimport {\n\tDisposable,\n\tDisposableStore,\n} from \"../../../../base/common/lifecycle.js\";\nimport { ResourceMap } from \"../../../../base/common/map.js\";\nimport { Schemas } from \"../../../../base/common/network.js\";\nimport { URI } from \"../../../../base/common/uri.js\";\nimport { IConfigurationService } from \"../../../../platform/configuration/common/configuration.js\";\nimport type { IFilesConfiguration } from \"../../../../platform/files/common/files.js\";\nimport {\n\tInstantiationType,\n\tregisterSingleton,\n} from \"../../../../platform/instantiation/common/extensions.js\";\nimport {\n\tIInstantiationService,\n\tcreateDecorator,\n} from \"../../../../platform/instantiation/common/instantiation.js\";\nimport {\n\ttype IUntitledTextEditorModel,\n\tUntitledTextEditorModel,\n} from \"./untitledTextEditorModel.js\";\n\nexport const IUntitledTextEditorService =\n\tcreateDecorator<IUntitledTextEditorService>(\"untitledTextEditorService\");\n\nexport interface INewUntitledTextEditorOptions {\n\t/**\n\t * Initial value of the untitled editor. An untitled editor with initial\n\t * value is dirty right from the beginning.\n\t */\n\tinitialValue?: string;\n\n\t/**\n\t * Preferred language id to use when saving the untitled editor.\n\t */\n\tlanguageId?: string;\n\n\t/**\n\t * Preferred encoding to use when saving the untitled editor.\n\t */\n\tencoding?: string;\n}\n\nexport interface IExistingUntitledTextEditorOptions\n\textends INewUntitledTextEditorOptions {\n\t/**\n\t * A resource to identify the untitled editor to create or return\n\t * if already existing.\n\t *\n\t * Note: the resource will not be used unless the scheme is `untitled`.\n\t */\n\tuntitledResource?: URI;\n}\n\nexport interface INewUntitledTextEditorWithAssociatedResourceOptions\n\textends INewUntitledTextEditorOptions {\n\t/**\n\t * Resource components to associate with the untitled editor. When saving\n\t * the untitled editor, the associated components will be used and the user\n\t * is not being asked to provide a file path.\n\t *\n\t * Note: currently it is not possible to specify the `scheme` to use. The\n\t * untitled editor will saved to the default local or remote resource.\n\t */\n\tassociatedResource?: {\n\t\tauthority: string;\n\t\tpath: string;\n\t\tquery: string;\n\t\tfragment: string;\n\t};\n}\n\ntype IInternalUntitledTextEditorOptions = IExistingUntitledTextEditorOptions &\n\tINewUntitledTextEditorWithAssociatedResourceOptions;\n\nexport interface IUntitledTextEditorModelManager {\n\t/**\n\t * Events for when untitled text editors change (e.g. getting dirty, saved or reverted).\n\t */\n\treadonly onDidChangeDirty: Event<IUntitledTextEditorModel>;\n\n\t/**\n\t * Events for when untitled text editor encodings change.\n\t */\n\treadonly onDidChangeEncoding: Event<IUntitledTextEditorModel>;\n\n\t/**\n\t * Events for when untitled text editor labels change.\n\t */\n\treadonly onDidChangeLabel: Event<IUntitledTextEditorModel>;\n\n\t/**\n\t * Events for when untitled text editor models are created.\n\t */\n\treadonly onDidCreate: Event<IUntitledTextEditorModel>;\n\n\t/**\n\t * Events for when untitled text editors are about to be disposed.\n\t */\n\treadonly onWillDispose: Event<IUntitledTextEditorModel>;\n\n\t/**\n\t * Creates a new untitled editor model with the provided options. If the `untitledResource`\n\t * property is provided and the untitled editor exists, it will return that existing\n\t * instance instead of creating a new one.\n\t */\n\tcreate(options?: INewUntitledTextEditorOptions): IUntitledTextEditorModel;\n\tcreate(\n\t\toptions?: INewUntitledTextEditorWithAssociatedResourceOptions,\n\t): IUntitledTextEditorModel;\n\tcreate(\n\t\toptions?: IExistingUntitledTextEditorOptions,\n\t): IUntitledTextEditorModel;\n\n\t/**\n\t * Returns an existing untitled editor model if already created before.\n\t */\n\tget(resource: URI): IUntitledTextEditorModel | undefined;\n\n\t/**\n\t * Returns the value of the untitled editor, undefined if none exists\n\t * @param resource The URI of the untitled file\n\t * @returns The content, or undefined\n\t */\n\tgetValue(resource: URI): string | undefined;\n\n\t/**\n\t * Resolves an untitled editor model from the provided options. If the `untitledResource`\n\t * property is provided and the untitled editor exists, it will return that existing\n\t * instance instead of creating a new one.\n\t */\n\tresolve(\n\t\toptions?: INewUntitledTextEditorOptions,\n\t): Promise<IUntitledTextEditorModel>;\n\tresolve(\n\t\toptions?: INewUntitledTextEditorWithAssociatedResourceOptions,\n\t): Promise<IUntitledTextEditorModel>;\n\tresolve(\n\t\toptions?: IExistingUntitledTextEditorOptions,\n\t): Promise<IUntitledTextEditorModel>;\n\n\t/**\n\t * Figures out if the given resource has an associated resource or not.\n\t */\n\tisUntitledWithAssociatedResource(resource: URI): boolean;\n\n\t/**\n\t * Waits for the model to be ready to be disposed. There may be conditions\n\t * under which the model cannot be disposed, e.g. when it is dirty. Once the\n\t * promise is settled, it is safe to dispose the model.\n\t */\n\tcanDispose(model: IUntitledTextEditorModel): true | Promise<true>;\n}\n\nexport interface IUntitledTextEditorService\n\textends IUntitledTextEditorModelManager {\n\treadonly _serviceBrand: undefined;\n}\n\nexport class UntitledTextEditorService\n\textends Disposable\n\timplements IUntitledTextEditorService\n{\n\tdeclare readonly _serviceBrand: undefined;\n\n\tprivate static readonly UNTITLED_WITHOUT_ASSOCIATED_RESOURCE_REGEX =\n\t\t/Untitled-\\d+/;\n\n\tprivate readonly _onDidChangeDirty = this._register(\n\t\tnew Emitter<IUntitledTextEditorModel>(),\n\t);\n\treadonly onDidChangeDirty = this._onDidChangeDirty.event;\n\n\tprivate readonly _onDidChangeEncoding = this._register(\n\t\tnew Emitter<IUntitledTextEditorModel>(),\n\t);\n\treadonly onDidChangeEncoding = this._onDidChangeEncoding.event;\n\n\tprivate readonly _onDidCreate = this._register(\n\t\tnew Emitter<IUntitledTextEditorModel>(),\n\t);\n\treadonly onDidCreate = this._onDidCreate.event;\n\n\tprivate readonly _onWillDispose = this._register(\n\t\tnew Emitter<IUntitledTextEditorModel>(),\n\t);\n\treadonly onWillDispose = this._onWillDispose.event;\n\n\tprivate readonly _onDidChangeLabel = this._register(\n\t\tnew Emitter<IUntitledTextEditorModel>(),\n\t);\n\treadonly onDidChangeLabel = this._onDidChangeLabel.event;\n\n\tprivate readonly mapResourceToModel =\n\t\tnew ResourceMap<UntitledTextEditorModel>();\n\n\tconstructor(\n\t\t@IInstantiationService\n\t\tprivate readonly instantiationService: IInstantiationService,\n\t\t@IConfigurationService\n\t\tprivate readonly configurationService: IConfigurationService,\n\t) {\n\t\tsuper();\n\t}\n\n\tget(resource: URI): UntitledTextEditorModel | undefined {\n\t\treturn this.mapResourceToModel.get(resource);\n\t}\n\n\tgetValue(resource: URI): string | undefined {\n\t\treturn this.get(resource)?.textEditorModel?.getValue();\n\t}\n\n\tasync resolve(\n\t\toptions?: IInternalUntitledTextEditorOptions,\n\t): Promise<UntitledTextEditorModel> {\n\t\tconst model = this.doCreateOrGet(options);\n\t\tawait model.resolve();\n\n\t\treturn model;\n\t}\n\n\tcreate(\n\t\toptions?: IInternalUntitledTextEditorOptions,\n\t): UntitledTextEditorModel {\n\t\treturn this.doCreateOrGet(options);\n\t}\n\n\tprivate doCreateOrGet(\n\t\toptions: IInternalUntitledTextEditorOptions = Object.create(null),\n\t): UntitledTextEditorModel {\n\t\tconst massagedOptions = this.massageOptions(options);\n\n\t\t// Return existing instance if asked for it\n\t\tif (\n\t\t\tmassagedOptions.untitledResource &&\n\t\t\tthis.mapResourceToModel.has(massagedOptions.untitledResource)\n\t\t) {\n\t\t\treturn this.mapResourceToModel.get(\n\t\t\t\tmassagedOptions.untitledResource,\n\t\t\t)!;\n\t\t}\n\n\t\t// Create new instance otherwise\n\t\treturn this.doCreate(massagedOptions);\n\t}\n\n\tprivate massageOptions(\n\t\toptions: IInternalUntitledTextEditorOptions,\n\t): IInternalUntitledTextEditorOptions {\n\t\tconst massagedOptions: IInternalUntitledTextEditorOptions =\n\t\t\tObject.create(null);\n\n\t\t// Figure out associated and untitled resource\n\t\tif (options.associatedResource) {\n\t\t\tmassagedOptions.untitledResource = URI.from({\n\t\t\t\tscheme: Schemas.untitled,\n\t\t\t\tauthority: options.associatedResource.authority,\n\t\t\t\tfragment: options.associatedResource.fragment,\n\t\t\t\tpath: options.associatedResource.path,\n\t\t\t\tquery: options.associatedResource.query,\n\t\t\t});\n\t\t\tmassagedOptions.associatedResource = options.associatedResource;\n\t\t} else if (options.untitledResource?.scheme === Schemas.untitled) {\n\t\t\tmassagedOptions.untitledResource = options.untitledResource;\n\t\t}\n\n\t\t// Language id\n\t\tif (options.languageId) {\n\t\t\tmassagedOptions.languageId = options.languageId;\n\t\t} else if (!massagedOptions.associatedResource) {\n\t\t\tconst configuration =\n\t\t\t\tthis.configurationService.getValue<IFilesConfiguration>();\n\t\t\tif (configuration.files?.defaultLanguage) {\n\t\t\t\tmassagedOptions.languageId =\n\t\t\t\t\tconfiguration.files.defaultLanguage;\n\t\t\t}\n\t\t}\n\n\t\t// Take over encoding and initial value\n\t\tmassagedOptions.encoding = options.encoding;\n\t\tmassagedOptions.initialValue = options.initialValue;\n\n\t\treturn massagedOptions;\n\t}\n\n\tprivate doCreate(\n\t\toptions: IInternalUntitledTextEditorOptions,\n\t): UntitledTextEditorModel {\n\t\t// Create a new untitled resource if none is provided\n\t\tlet untitledResource = options.untitledResource;\n\t\tif (!untitledResource) {\n\t\t\tlet counter = 1;\n\t\t\tdo {\n\t\t\t\tuntitledResource = URI.from({\n\t\t\t\t\tscheme: Schemas.untitled,\n\t\t\t\t\tpath: `Untitled-${counter}`,\n\t\t\t\t});\n\t\t\t\tcounter++;\n\t\t\t} while (this.mapResourceToModel.has(untitledResource));\n\t\t}\n\n\t\t// Create new model with provided options\n\t\tconst model = this._register(\n\t\t\tthis.instantiationService.createInstance(\n\t\t\t\tUntitledTextEditorModel,\n\t\t\t\tuntitledResource,\n\t\t\t\t!!options.associatedResource,\n\t\t\t\toptions.initialValue,\n\t\t\t\toptions.languageId,\n\t\t\t\toptions.encoding,\n\t\t\t),\n\t\t);\n\n\t\tthis.registerModel(model);\n\n\t\treturn model;\n\t}\n\n\tprivate registerModel(model: UntitledTextEditorModel): void {\n\t\t// Install model listeners\n\t\tconst modelListeners = new DisposableStore();\n\t\tmodelListeners.add(\n\t\t\tmodel.onDidChangeDirty(() => this._onDidChangeDirty.fire(model)),\n\t\t);\n\t\tmodelListeners.add(\n\t\t\tmodel.onDidChangeName(() => this._onDidChangeLabel.fire(model)),\n\t\t);\n\t\tmodelListeners.add(\n\t\t\tmodel.onDidChangeEncoding(() =>\n\t\t\t\tthis._onDidChangeEncoding.fire(model),\n\t\t\t),\n\t\t);\n\t\tmodelListeners.add(\n\t\t\tmodel.onWillDispose(() => this._onWillDispose.fire(model)),\n\t\t);\n\n\t\t// Remove from cache on dispose\n\t\tEvent.once(model.onWillDispose)(() => {\n\t\t\t// Registry\n\t\t\tthis.mapResourceToModel.delete(model.resource);\n\n\t\t\t// Listeners\n\t\t\tmodelListeners.dispose();\n\t\t});\n\n\t\t// Add to cache\n\t\tthis.mapResourceToModel.set(model.resource, model);\n\n\t\t// Emit as event\n\t\tthis._onDidCreate.fire(model);\n\n\t\t// If the model is dirty right from the beginning,\n\t\t// make sure to emit this as an event\n\t\tif (model.isDirty()) {\n\t\t\tthis._onDidChangeDirty.fire(model);\n\t\t}\n\t}\n\n\tisUntitledWithAssociatedResource(resource: URI): boolean {\n\t\treturn (\n\t\t\tresource.scheme === Schemas.untitled &&\n\t\t\tresource.path.length > 1 &&\n\t\t\t!UntitledTextEditorService.UNTITLED_WITHOUT_ASSOCIATED_RESOURCE_REGEX.test(\n\t\t\t\tresource.path,\n\t\t\t)\n\t\t);\n\t}\n\n\tcanDispose(model: UntitledTextEditorModel): true | Promise<true> {\n\t\tif (model.isDisposed()) {\n\t\t\treturn true; // quick return if model already disposed\n\t\t}\n\n\t\t// promise based return in all other cases\n\t\treturn this.doCanDispose(model);\n\t}\n\n\tprivate async doCanDispose(model: UntitledTextEditorModel): Promise<true> {\n\t\t// dirty model: we do not allow to dispose dirty models to prevent\n\t\t// data loss cases. dirty models can only be disposed when they are\n\t\t// either saved or reverted\n\t\tif (model.isDirty()) {\n\t\t\tawait Event.toPromise(model.onDidChangeDirty);\n\n\t\t\treturn this.canDispose(model);\n\t\t}\n\n\t\treturn true;\n\t}\n}\n\nregisterSingleton(\n\tIUntitledTextEditorService,\n\tUntitledTextEditorService,\n\tInstantiationType.Delayed,\n);\n"],
  "mappings": "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",
  "names": []
}
