{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/untitled/common/untitledTextEditorModel.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport {\n\tVSBuffer,\n\ttype VSBufferReadable,\n\ttype VSBufferReadableStream,\n\tbufferToReadable,\n\tbufferToStream,\n} from \"../../../../base/common/buffer.js\";\nimport type { CancellationToken } from \"../../../../base/common/cancellation.js\";\nimport { Emitter, type Event } from \"../../../../base/common/event.js\";\nimport { getCharContainingOffset } from \"../../../../base/common/strings.js\";\nimport { assertIsDefined } from \"../../../../base/common/types.js\";\nimport type { URI } from \"../../../../base/common/uri.js\";\nimport { ensureValidWordDefinition } from \"../../../../editor/common/core/wordHelper.js\";\nimport { ILanguageService } from \"../../../../editor/common/languages/language.js\";\nimport type { ITextModel } from \"../../../../editor/common/model.js\";\nimport {\n\tcreateTextBufferFactory,\n\tcreateTextBufferFactoryFromStream,\n} from \"../../../../editor/common/model/textModel.js\";\nimport { IModelService } from \"../../../../editor/common/services/model.js\";\nimport type { ITextEditorModel } from \"../../../../editor/common/services/resolverService.js\";\nimport {\n\ttype ITextResourceConfigurationChangeEvent,\n\tITextResourceConfigurationService,\n} from \"../../../../editor/common/services/textResourceConfiguration.js\";\nimport type { IModelContentChangedEvent } from \"../../../../editor/common/textModelEvents.js\";\nimport { IAccessibilityService } from \"../../../../platform/accessibility/common/accessibility.js\";\nimport { ILabelService } from \"../../../../platform/label/common/label.js\";\nimport type { ISaveOptions } from \"../../../common/editor.js\";\nimport { BaseTextEditorModel } from \"../../../common/editor/textEditorModel.js\";\nimport { IEditorService } from \"../../editor/common/editorService.js\";\nimport { ILanguageDetectionService } from \"../../languageDetection/common/languageDetectionWorkerService.js\";\nimport { UTF8 } from \"../../textfile/common/encoding.js\";\nimport {\n\ttype IEncodingSupport,\n\ttype ILanguageSupport,\n\tITextFileService,\n} from \"../../textfile/common/textfiles.js\";\nimport {\n\ttype IWorkingCopy,\n\ttype IWorkingCopyBackup,\n\ttype IWorkingCopySaveEvent,\n\tNO_TYPE_ID,\n\tWorkingCopyCapabilities,\n} from \"../../workingCopy/common/workingCopy.js\";\nimport { IWorkingCopyBackupService } from \"../../workingCopy/common/workingCopyBackup.js\";\nimport { IWorkingCopyService } from \"../../workingCopy/common/workingCopyService.js\";\n\nexport interface IUntitledTextEditorModel\n\textends ITextEditorModel,\n\t\tILanguageSupport,\n\t\tIEncodingSupport,\n\t\tIWorkingCopy {\n\t/**\n\t * Emits an event when the encoding of this untitled model changes.\n\t */\n\treadonly onDidChangeEncoding: Event<void>;\n\n\t/**\n\t * Emits an event when the name of this untitled model changes.\n\t */\n\treadonly onDidChangeName: Event<void>;\n\n\t/**\n\t * Emits an event when this untitled model is reverted.\n\t */\n\treadonly onDidRevert: Event<void>;\n\n\t/**\n\t * Whether this untitled text model has an associated file path.\n\t */\n\treadonly hasAssociatedFilePath: boolean;\n\n\t/**\n\t * Whether this model has an explicit language or not.\n\t */\n\treadonly hasLanguageSetExplicitly: boolean;\n\n\t/**\n\t * Sets the encoding to use for this untitled model.\n\t */\n\tsetEncoding(encoding: string): Promise<void>;\n\n\t/**\n\t * Resolves the untitled model.\n\t */\n\tresolve(): Promise<void>;\n}\n\nexport class UntitledTextEditorModel\n\textends BaseTextEditorModel\n\timplements IUntitledTextEditorModel\n{\n\tprivate static readonly FIRST_LINE_NAME_MAX_LENGTH = 40;\n\tprivate static readonly FIRST_LINE_NAME_CANDIDATE_MAX_LENGTH =\n\t\tthis.FIRST_LINE_NAME_MAX_LENGTH * 10;\n\n\t// Support the special '${activeEditorLanguage}' language by\n\t// looking up the language id from the editor that is active\n\t// before the untitled editor opens. This special id is only\n\t// used for the initial language and can be changed after the\n\t// fact (either manually or through auto-detection).\n\tprivate static readonly ACTIVE_EDITOR_LANGUAGE_ID =\n\t\t\"${activeEditorLanguage}\";\n\n\t//#region Events\n\n\tprivate readonly _onDidChangeContent = this._register(new Emitter<void>());\n\treadonly onDidChangeContent = this._onDidChangeContent.event;\n\n\tprivate readonly _onDidChangeName = this._register(new Emitter<void>());\n\treadonly onDidChangeName = this._onDidChangeName.event;\n\n\tprivate readonly _onDidChangeDirty = this._register(new Emitter<void>());\n\treadonly onDidChangeDirty = this._onDidChangeDirty.event;\n\n\tprivate readonly _onDidChangeEncoding = this._register(new Emitter<void>());\n\treadonly onDidChangeEncoding = this._onDidChangeEncoding.event;\n\n\tprivate readonly _onDidSave = this._register(\n\t\tnew Emitter<IWorkingCopySaveEvent>(),\n\t);\n\treadonly onDidSave = this._onDidSave.event;\n\n\tprivate readonly _onDidRevert = this._register(new Emitter<void>());\n\treadonly onDidRevert = this._onDidRevert.event;\n\n\t//#endregion\n\n\treadonly typeId = NO_TYPE_ID; // IMPORTANT: never change this to not break existing assumptions (e.g. backups)\n\n\treadonly capabilities = WorkingCopyCapabilities.Untitled;\n\n\t//#region Name\n\n\tprivate configuredLabelFormat: \"content\" | \"name\" = \"content\";\n\n\tprivate cachedModelFirstLineWords: string | undefined = undefined;\n\tget name(): string {\n\t\t// Take name from first line if present and only if\n\t\t// we have no associated file path. In that case we\n\t\t// prefer the file name as title.\n\t\tif (\n\t\t\tthis.configuredLabelFormat === \"content\" &&\n\t\t\t!this.hasAssociatedFilePath &&\n\t\t\tthis.cachedModelFirstLineWords\n\t\t) {\n\t\t\treturn this.cachedModelFirstLineWords;\n\t\t}\n\n\t\t// Otherwise fallback to resource\n\t\treturn this.labelService.getUriBasenameLabel(this.resource);\n\t}\n\n\t//#endregion\n\n\tconstructor(\n\t\treadonly resource: URI,\n\t\treadonly hasAssociatedFilePath: boolean,\n\t\tprivate readonly initialValue: string | undefined,\n\t\tprivate preferredLanguageId: string | undefined,\n\t\tprivate preferredEncoding: string | undefined,\n\t\t@ILanguageService languageService: ILanguageService,\n\t\t@IModelService modelService: IModelService,\n\t\t@IWorkingCopyBackupService\n\t\tprivate readonly workingCopyBackupService: IWorkingCopyBackupService,\n\t\t@ITextResourceConfigurationService\n\t\tprivate readonly textResourceConfigurationService: ITextResourceConfigurationService,\n\t\t@IWorkingCopyService\n\t\tprivate readonly workingCopyService: IWorkingCopyService,\n\t\t@ITextFileService private readonly textFileService: ITextFileService,\n\t\t@ILabelService private readonly labelService: ILabelService,\n\t\t@IEditorService private readonly editorService: IEditorService,\n\t\t@ILanguageDetectionService\n\t\tlanguageDetectionService: ILanguageDetectionService,\n\t\t@IAccessibilityService accessibilityService: IAccessibilityService,\n\t) {\n\t\tsuper(\n\t\t\tmodelService,\n\t\t\tlanguageService,\n\t\t\tlanguageDetectionService,\n\t\t\taccessibilityService,\n\t\t);\n\n\t\t// Make known to working copy service\n\t\tthis._register(this.workingCopyService.registerWorkingCopy(this));\n\n\t\t// This is typically controlled by the setting `files.defaultLanguage`.\n\t\t// If that setting is set, we should not detect the language.\n\t\tif (preferredLanguageId) {\n\t\t\tthis.setLanguageId(preferredLanguageId);\n\t\t}\n\n\t\t// Fetch config\n\t\tthis.onConfigurationChange(undefined, false);\n\n\t\tthis.registerListeners();\n\t}\n\n\tprivate registerListeners(): void {\n\t\t// Config Changes\n\t\tthis._register(\n\t\t\tthis.textResourceConfigurationService.onDidChangeConfiguration(\n\t\t\t\t(e) => this.onConfigurationChange(e, true),\n\t\t\t),\n\t\t);\n\t}\n\n\tprivate onConfigurationChange(\n\t\te: ITextResourceConfigurationChangeEvent | undefined,\n\t\tfromEvent: boolean,\n\t): void {\n\t\t// Encoding\n\t\tif (!e || e.affectsConfiguration(this.resource, \"files.encoding\")) {\n\t\t\tconst configuredEncoding =\n\t\t\t\tthis.textResourceConfigurationService.getValue(\n\t\t\t\t\tthis.resource,\n\t\t\t\t\t\"files.encoding\",\n\t\t\t\t);\n\t\t\tif (\n\t\t\t\tthis.configuredEncoding !== configuredEncoding &&\n\t\t\t\ttypeof configuredEncoding === \"string\"\n\t\t\t) {\n\t\t\t\tthis.configuredEncoding = configuredEncoding;\n\n\t\t\t\tif (fromEvent && !this.preferredEncoding) {\n\t\t\t\t\tthis._onDidChangeEncoding.fire(); // do not fire event if we have a preferred encoding set\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Label Format\n\t\tif (\n\t\t\t!e ||\n\t\t\te.affectsConfiguration(\n\t\t\t\tthis.resource,\n\t\t\t\t\"workbench.editor.untitled.labelFormat\",\n\t\t\t)\n\t\t) {\n\t\t\tconst configuredLabelFormat =\n\t\t\t\tthis.textResourceConfigurationService.getValue(\n\t\t\t\t\tthis.resource,\n\t\t\t\t\t\"workbench.editor.untitled.labelFormat\",\n\t\t\t\t);\n\t\t\tif (\n\t\t\t\tthis.configuredLabelFormat !== configuredLabelFormat &&\n\t\t\t\t(configuredLabelFormat === \"content\" ||\n\t\t\t\t\tconfiguredLabelFormat === \"name\")\n\t\t\t) {\n\t\t\t\tthis.configuredLabelFormat = configuredLabelFormat;\n\n\t\t\t\tif (fromEvent) {\n\t\t\t\t\tthis._onDidChangeName.fire();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t//#region Language\n\n\toverride setLanguageId(languageId: string, source?: string): void {\n\t\tconst actualLanguage: string | undefined =\n\t\t\tlanguageId === UntitledTextEditorModel.ACTIVE_EDITOR_LANGUAGE_ID\n\t\t\t\t? this.editorService.activeTextEditorLanguageId\n\t\t\t\t: languageId;\n\t\tthis.preferredLanguageId = actualLanguage;\n\n\t\tif (actualLanguage) {\n\t\t\tsuper.setLanguageId(actualLanguage, source);\n\t\t}\n\t}\n\n\toverride getLanguageId(): string | undefined {\n\t\tif (this.textEditorModel) {\n\t\t\treturn this.textEditorModel.getLanguageId();\n\t\t}\n\n\t\treturn this.preferredLanguageId;\n\t}\n\n\t//#endregion\n\n\t//#region Encoding\n\n\tprivate configuredEncoding: string | undefined;\n\n\tgetEncoding(): string | undefined {\n\t\treturn this.preferredEncoding || this.configuredEncoding;\n\t}\n\n\tasync setEncoding(encoding: string): Promise<void> {\n\t\tconst oldEncoding = this.getEncoding();\n\t\tthis.preferredEncoding = encoding;\n\n\t\t// Emit if it changed\n\t\tif (oldEncoding !== this.preferredEncoding) {\n\t\t\tthis._onDidChangeEncoding.fire();\n\t\t}\n\t}\n\n\t//#endregion\n\n\t//#region Dirty\n\n\tprivate dirty = this.hasAssociatedFilePath || !!this.initialValue;\n\n\tisDirty(): boolean {\n\t\treturn this.dirty;\n\t}\n\n\tisModified(): boolean {\n\t\treturn this.isDirty();\n\t}\n\n\tprivate setDirty(dirty: boolean): void {\n\t\tif (this.dirty === dirty) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.dirty = dirty;\n\t\tthis._onDidChangeDirty.fire();\n\t}\n\n\t//#endregion\n\n\t//#region Save / Revert / Backup\n\n\tasync save(options?: ISaveOptions): Promise<boolean> {\n\t\tconst target = await this.textFileService.save(this.resource, options);\n\n\t\t// Emit as event\n\t\tif (target) {\n\t\t\tthis._onDidSave.fire({\n\t\t\t\treason: options?.reason,\n\t\t\t\tsource: options?.source,\n\t\t\t});\n\t\t}\n\n\t\treturn !!target;\n\t}\n\n\tasync revert(): Promise<void> {\n\t\t// Reset contents to be empty\n\t\tthis.ignoreDirtyOnModelContentChange = true;\n\t\ttry {\n\t\t\tthis.updateTextEditorModel(createTextBufferFactory(\"\"));\n\t\t} finally {\n\t\t\tthis.ignoreDirtyOnModelContentChange = false;\n\t\t}\n\n\t\t// No longer dirty\n\t\tthis.setDirty(false);\n\n\t\t// Emit as event\n\t\tthis._onDidRevert.fire();\n\t}\n\n\tasync backup(token: CancellationToken): Promise<IWorkingCopyBackup> {\n\t\tlet content: VSBufferReadable | undefined;\n\n\t\t// Make sure to check whether this model has been resolved\n\t\t// or not and fallback to the initial value - if any - to\n\t\t// prevent backing up an unresolved model and loosing the\n\t\t// initial value.\n\t\tif (this.isResolved()) {\n\t\t\t// Fill in content the same way we would do when saving the file\n\t\t\t// via the text file service encoding support (hardcode UTF-8)\n\t\t\tcontent = await this.textFileService.getEncodedReadable(\n\t\t\t\tthis.resource,\n\t\t\t\tthis.createSnapshot() ?? undefined,\n\t\t\t\t{ encoding: UTF8 },\n\t\t\t);\n\t\t} else if (typeof this.initialValue === \"string\") {\n\t\t\tcontent = bufferToReadable(VSBuffer.fromString(this.initialValue));\n\t\t}\n\n\t\treturn { content };\n\t}\n\n\t//#endregion\n\n\t//#region Resolve\n\n\tprivate ignoreDirtyOnModelContentChange = false;\n\n\toverride async resolve(): Promise<void> {\n\t\t// Create text editor model if not yet done\n\t\tlet createdUntitledModel = false;\n\t\tlet hasBackup = false;\n\t\tif (this.textEditorModel) {\n\t\t\tthis.updateTextEditorModel(undefined, this.preferredLanguageId);\n\t\t} else {\n\t\t\tlet untitledContents: VSBufferReadableStream;\n\n\t\t\t// Check for backups or use initial value or empty\n\t\t\tconst backup = await this.workingCopyBackupService.resolve(this);\n\t\t\tif (backup) {\n\t\t\t\tuntitledContents = backup.value;\n\t\t\t\thasBackup = true;\n\t\t\t} else {\n\t\t\t\tuntitledContents = bufferToStream(\n\t\t\t\t\tVSBuffer.fromString(this.initialValue || \"\"),\n\t\t\t\t);\n\t\t\t}\n\n\t\t\t// Determine untitled contents based on backup\n\t\t\t// or initial value. We must use text file service\n\t\t\t// to create the text factory to respect encodings\n\t\t\t// accordingly.\n\t\t\tconst untitledContentsFactory =\n\t\t\t\tawait createTextBufferFactoryFromStream(\n\t\t\t\t\tawait this.textFileService.getDecodedStream(\n\t\t\t\t\t\tthis.resource,\n\t\t\t\t\t\tuntitledContents,\n\t\t\t\t\t\t{ encoding: UTF8 },\n\t\t\t\t\t),\n\t\t\t\t);\n\n\t\t\tthis.createTextEditorModel(\n\t\t\t\tuntitledContentsFactory,\n\t\t\t\tthis.resource,\n\t\t\t\tthis.preferredLanguageId,\n\t\t\t);\n\t\t\tcreatedUntitledModel = true;\n\t\t}\n\n\t\t// Listen to text model events\n\t\tconst textEditorModel = assertIsDefined(this.textEditorModel);\n\t\tthis.installModelListeners(textEditorModel);\n\n\t\t// Only adjust name and dirty state etc. if we\n\t\t// actually created the untitled model\n\t\tif (createdUntitledModel) {\n\t\t\t// Name\n\t\t\tif (hasBackup || this.initialValue) {\n\t\t\t\tthis.updateNameFromFirstLine(textEditorModel);\n\t\t\t}\n\n\t\t\t// Untitled associated to file path are dirty right away as well as untitled with content\n\t\t\tthis.setDirty(\n\t\t\t\tthis.hasAssociatedFilePath ||\n\t\t\t\t\t!!hasBackup ||\n\t\t\t\t\t!!this.initialValue,\n\t\t\t);\n\n\t\t\t// If we have initial contents, make sure to emit this\n\t\t\t// as the appropiate events to the outside.\n\t\t\tif (hasBackup || this.initialValue) {\n\t\t\t\tthis._onDidChangeContent.fire();\n\t\t\t}\n\t\t}\n\n\t\treturn super.resolve();\n\t}\n\n\tprotected override installModelListeners(model: ITextModel): void {\n\t\tthis._register(\n\t\t\tmodel.onDidChangeContent((e) =>\n\t\t\t\tthis.onModelContentChanged(model, e),\n\t\t\t),\n\t\t);\n\t\tthis._register(\n\t\t\tmodel.onDidChangeLanguage(() =>\n\t\t\t\tthis.onConfigurationChange(undefined, true),\n\t\t\t),\n\t\t); // language change can have impact on config\n\n\t\tsuper.installModelListeners(model);\n\t}\n\n\tprivate onModelContentChanged(\n\t\ttextEditorModel: ITextModel,\n\t\te: IModelContentChangedEvent,\n\t): void {\n\t\tif (!this.ignoreDirtyOnModelContentChange) {\n\t\t\t// mark the untitled text editor as non-dirty once its content becomes empty and we do\n\t\t\t// not have an associated path set. we never want dirty indicator in that case.\n\t\t\tif (\n\t\t\t\t!this.hasAssociatedFilePath &&\n\t\t\t\ttextEditorModel.getLineCount() === 1 &&\n\t\t\t\ttextEditorModel.getLineLength(1) === 0\n\t\t\t) {\n\t\t\t\tthis.setDirty(false);\n\t\t\t}\n\n\t\t\t// turn dirty otherwise\n\t\t\telse {\n\t\t\t\tthis.setDirty(true);\n\t\t\t}\n\t\t}\n\n\t\t// Check for name change if first line changed in the range of 0-FIRST_LINE_NAME_CANDIDATE_MAX_LENGTH columns\n\t\tif (\n\t\t\te.changes.some(\n\t\t\t\t(change) =>\n\t\t\t\t\t(change.range.startLineNumber === 1 ||\n\t\t\t\t\t\tchange.range.endLineNumber === 1) &&\n\t\t\t\t\tchange.range.startColumn <=\n\t\t\t\t\t\tUntitledTextEditorModel.FIRST_LINE_NAME_CANDIDATE_MAX_LENGTH,\n\t\t\t)\n\t\t) {\n\t\t\tthis.updateNameFromFirstLine(textEditorModel);\n\t\t}\n\n\t\t// Emit as general content change event\n\t\tthis._onDidChangeContent.fire();\n\n\t\t// Detect language from content\n\t\tthis.autoDetectLanguage();\n\t}\n\n\tprivate updateNameFromFirstLine(textEditorModel: ITextModel): void {\n\t\tif (this.hasAssociatedFilePath) {\n\t\t\treturn; // not in case of an associated file path\n\t\t}\n\n\t\t// Determine the first words of the model following these rules:\n\t\t// - cannot be only whitespace (so we trim())\n\t\t// - cannot be only non-alphanumeric characters (so we run word definition regex over it)\n\t\t// - cannot be longer than FIRST_LINE_MAX_TITLE_LENGTH\n\t\t// - normalize multiple whitespaces to a single whitespace\n\n\t\tlet modelFirstWordsCandidate: string | undefined;\n\n\t\tlet firstLineText = textEditorModel\n\t\t\t.getValueInRange({\n\t\t\t\tstartLineNumber: 1,\n\t\t\t\tendLineNumber: 1,\n\t\t\t\tstartColumn: 1,\n\t\t\t\tendColumn:\n\t\t\t\t\tUntitledTextEditorModel.FIRST_LINE_NAME_CANDIDATE_MAX_LENGTH +\n\t\t\t\t\t1, // first cap at FIRST_LINE_NAME_CANDIDATE_MAX_LENGTH\n\t\t\t})\n\t\t\t.trim()\n\t\t\t.replace(/\\s+/g, \" \") // normalize whitespaces\n\t\t\t.replace(/\\u202E/g, \"\"); // drop Right-to-Left Override character (#190133)\n\t\tfirstLineText = firstLineText.substr(\n\t\t\t0,\n\t\t\tgetCharContainingOffset(\n\t\t\t\t// finally cap at FIRST_LINE_NAME_MAX_LENGTH (grapheme aware #111235)\n\t\t\t\tfirstLineText,\n\t\t\t\tUntitledTextEditorModel.FIRST_LINE_NAME_MAX_LENGTH,\n\t\t\t)[0],\n\t\t);\n\n\t\tif (firstLineText && ensureValidWordDefinition().exec(firstLineText)) {\n\t\t\tmodelFirstWordsCandidate = firstLineText;\n\t\t}\n\n\t\tif (modelFirstWordsCandidate !== this.cachedModelFirstLineWords) {\n\t\t\tthis.cachedModelFirstLineWords = modelFirstWordsCandidate;\n\t\t\tthis._onDidChangeName.fire();\n\t\t}\n\t}\n\n\t//#endregion\n\n\toverride isReadonly(): boolean {\n\t\treturn false;\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
