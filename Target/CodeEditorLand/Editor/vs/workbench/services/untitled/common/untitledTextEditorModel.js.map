{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/untitled/common/untitledTextEditorModel.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { ISaveOptions } from '../../../common/editor.js';\nimport { BaseTextEditorModel } from '../../../common/editor/textEditorModel.js';\nimport { URI } from '../../../../base/common/uri.js';\nimport { ILanguageService } from '../../../../editor/common/languages/language.js';\nimport { IModelService } from '../../../../editor/common/services/model.js';\nimport { Event, Emitter } from '../../../../base/common/event.js';\nimport { IWorkingCopyBackupService } from '../../workingCopy/common/workingCopyBackup.js';\nimport { ITextResourceConfigurationChangeEvent, ITextResourceConfigurationService } from '../../../../editor/common/services/textResourceConfiguration.js';\nimport { ITextModel } from '../../../../editor/common/model.js';\nimport { createTextBufferFactory, createTextBufferFactoryFromStream } from '../../../../editor/common/model/textModel.js';\nimport { ITextEditorModel } from '../../../../editor/common/services/resolverService.js';\nimport { IWorkingCopyService } from '../../workingCopy/common/workingCopyService.js';\nimport { IWorkingCopy, WorkingCopyCapabilities, IWorkingCopyBackup, NO_TYPE_ID, IWorkingCopySaveEvent } from '../../workingCopy/common/workingCopy.js';\nimport { IEncodingSupport, ILanguageSupport, ITextFileService } from '../../textfile/common/textfiles.js';\nimport { IModelContentChangedEvent } from '../../../../editor/common/textModelEvents.js';\nimport { assertIsDefined } from '../../../../base/common/types.js';\nimport { ILabelService } from '../../../../platform/label/common/label.js';\nimport { ensureValidWordDefinition } from '../../../../editor/common/core/wordHelper.js';\nimport { IEditorService } from '../../editor/common/editorService.js';\nimport { CancellationToken } from '../../../../base/common/cancellation.js';\nimport { getCharContainingOffset } from '../../../../base/common/strings.js';\nimport { UTF8 } from '../../textfile/common/encoding.js';\nimport { bufferToReadable, bufferToStream, VSBuffer, VSBufferReadable, VSBufferReadableStream } from '../../../../base/common/buffer.js';\nimport { ILanguageDetectionService } from '../../languageDetection/common/languageDetectionWorkerService.js';\nimport { IAccessibilityService } from '../../../../platform/accessibility/common/accessibility.js';\n\nexport interface IUntitledTextEditorModel extends ITextEditorModel, ILanguageSupport, IEncodingSupport, IWorkingCopy {\n\n\t/**\n\t * Emits an event when the encoding of this untitled model changes.\n\t */\n\treadonly onDidChangeEncoding: Event<void>;\n\n\t/**\n\t * Emits an event when the name of this untitled model changes.\n\t */\n\treadonly onDidChangeName: Event<void>;\n\n\t/**\n\t * Emits an event when this untitled model is reverted.\n\t */\n\treadonly onDidRevert: Event<void>;\n\n\t/**\n\t * Whether this untitled text model has an associated file path.\n\t */\n\treadonly hasAssociatedFilePath: boolean;\n\n\t/**\n\t * Whether this model has an explicit language or not.\n\t */\n\treadonly hasLanguageSetExplicitly: boolean;\n\n\t/**\n\t * Sets the encoding to use for this untitled model.\n\t */\n\tsetEncoding(encoding: string): Promise<void>;\n\n\t/**\n\t * Resolves the untitled model.\n\t */\n\tresolve(): Promise<void>;\n}\n\nexport class UntitledTextEditorModel extends BaseTextEditorModel implements IUntitledTextEditorModel {\n\n\tprivate static readonly FIRST_LINE_NAME_MAX_LENGTH = 40;\n\tprivate static readonly FIRST_LINE_NAME_CANDIDATE_MAX_LENGTH = this.FIRST_LINE_NAME_MAX_LENGTH * 10;\n\n\t// Support the special '${activeEditorLanguage}' language by\n\t// looking up the language id from the editor that is active\n\t// before the untitled editor opens. This special id is only\n\t// used for the initial language and can be changed after the\n\t// fact (either manually or through auto-detection).\n\tprivate static readonly ACTIVE_EDITOR_LANGUAGE_ID = '${activeEditorLanguage}';\n\n\t//#region Events\n\n\tprivate readonly _onDidChangeContent = this._register(new Emitter<void>());\n\treadonly onDidChangeContent = this._onDidChangeContent.event;\n\n\tprivate readonly _onDidChangeName = this._register(new Emitter<void>());\n\treadonly onDidChangeName = this._onDidChangeName.event;\n\n\tprivate readonly _onDidChangeDirty = this._register(new Emitter<void>());\n\treadonly onDidChangeDirty = this._onDidChangeDirty.event;\n\n\tprivate readonly _onDidChangeEncoding = this._register(new Emitter<void>());\n\treadonly onDidChangeEncoding = this._onDidChangeEncoding.event;\n\n\tprivate readonly _onDidSave = this._register(new Emitter<IWorkingCopySaveEvent>());\n\treadonly onDidSave = this._onDidSave.event;\n\n\tprivate readonly _onDidRevert = this._register(new Emitter<void>());\n\treadonly onDidRevert = this._onDidRevert.event;\n\n\t//#endregion\n\n\treadonly typeId = NO_TYPE_ID; // IMPORTANT: never change this to not break existing assumptions (e.g. backups)\n\n\treadonly capabilities = WorkingCopyCapabilities.Untitled;\n\n\t//#region Name\n\n\tprivate configuredLabelFormat: 'content' | 'name' = 'content';\n\n\tprivate cachedModelFirstLineWords: string | undefined = undefined;\n\tget name(): string {\n\n\t\t// Take name from first line if present and only if\n\t\t// we have no associated file path. In that case we\n\t\t// prefer the file name as title.\n\t\tif (this.configuredLabelFormat === 'content' && !this.hasAssociatedFilePath && this.cachedModelFirstLineWords) {\n\t\t\treturn this.cachedModelFirstLineWords;\n\t\t}\n\n\t\t// Otherwise fallback to resource\n\t\treturn this.labelService.getUriBasenameLabel(this.resource);\n\t}\n\n\t//#endregion\n\n\tconstructor(\n\t\treadonly resource: URI,\n\t\treadonly hasAssociatedFilePath: boolean,\n\t\tprivate readonly initialValue: string | undefined,\n\t\tprivate preferredLanguageId: string | undefined,\n\t\tprivate preferredEncoding: string | undefined,\n\t\t@ILanguageService languageService: ILanguageService,\n\t\t@IModelService modelService: IModelService,\n\t\t@IWorkingCopyBackupService private readonly workingCopyBackupService: IWorkingCopyBackupService,\n\t\t@ITextResourceConfigurationService private readonly textResourceConfigurationService: ITextResourceConfigurationService,\n\t\t@IWorkingCopyService private readonly workingCopyService: IWorkingCopyService,\n\t\t@ITextFileService private readonly textFileService: ITextFileService,\n\t\t@ILabelService private readonly labelService: ILabelService,\n\t\t@IEditorService private readonly editorService: IEditorService,\n\t\t@ILanguageDetectionService languageDetectionService: ILanguageDetectionService,\n\t\t@IAccessibilityService accessibilityService: IAccessibilityService,\n\t) {\n\t\tsuper(modelService, languageService, languageDetectionService, accessibilityService);\n\n\t\t// Make known to working copy service\n\t\tthis._register(this.workingCopyService.registerWorkingCopy(this));\n\n\t\t// This is typically controlled by the setting `files.defaultLanguage`.\n\t\t// If that setting is set, we should not detect the language.\n\t\tif (preferredLanguageId) {\n\t\t\tthis.setLanguageId(preferredLanguageId);\n\t\t}\n\n\t\t// Fetch config\n\t\tthis.onConfigurationChange(undefined, false);\n\n\t\tthis.registerListeners();\n\t}\n\n\tprivate registerListeners(): void {\n\n\t\t// Config Changes\n\t\tthis._register(this.textResourceConfigurationService.onDidChangeConfiguration(e => this.onConfigurationChange(e, true)));\n\t}\n\n\tprivate onConfigurationChange(e: ITextResourceConfigurationChangeEvent | undefined, fromEvent: boolean): void {\n\n\t\t// Encoding\n\t\tif (!e || e.affectsConfiguration(this.resource, 'files.encoding')) {\n\t\t\tconst configuredEncoding = this.textResourceConfigurationService.getValue(this.resource, 'files.encoding');\n\t\t\tif (this.configuredEncoding !== configuredEncoding && typeof configuredEncoding === 'string') {\n\t\t\t\tthis.configuredEncoding = configuredEncoding;\n\n\t\t\t\tif (fromEvent && !this.preferredEncoding) {\n\t\t\t\t\tthis._onDidChangeEncoding.fire(); // do not fire event if we have a preferred encoding set\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Label Format\n\t\tif (!e || e.affectsConfiguration(this.resource, 'workbench.editor.untitled.labelFormat')) {\n\t\t\tconst configuredLabelFormat = this.textResourceConfigurationService.getValue(this.resource, 'workbench.editor.untitled.labelFormat');\n\t\t\tif (this.configuredLabelFormat !== configuredLabelFormat && (configuredLabelFormat === 'content' || configuredLabelFormat === 'name')) {\n\t\t\t\tthis.configuredLabelFormat = configuredLabelFormat;\n\n\t\t\t\tif (fromEvent) {\n\t\t\t\t\tthis._onDidChangeName.fire();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t//#region Language\n\n\toverride setLanguageId(languageId: string, source?: string): void {\n\t\tconst actualLanguage: string | undefined = languageId === UntitledTextEditorModel.ACTIVE_EDITOR_LANGUAGE_ID\n\t\t\t? this.editorService.activeTextEditorLanguageId\n\t\t\t: languageId;\n\t\tthis.preferredLanguageId = actualLanguage;\n\n\t\tif (actualLanguage) {\n\t\t\tsuper.setLanguageId(actualLanguage, source);\n\t\t}\n\t}\n\n\toverride getLanguageId(): string | undefined {\n\t\tif (this.textEditorModel) {\n\t\t\treturn this.textEditorModel.getLanguageId();\n\t\t}\n\n\t\treturn this.preferredLanguageId;\n\t}\n\n\t//#endregion\n\n\t//#region Encoding\n\n\tprivate configuredEncoding: string | undefined;\n\n\tgetEncoding(): string | undefined {\n\t\treturn this.preferredEncoding || this.configuredEncoding;\n\t}\n\n\tasync setEncoding(encoding: string): Promise<void> {\n\t\tconst oldEncoding = this.getEncoding();\n\t\tthis.preferredEncoding = encoding;\n\n\t\t// Emit if it changed\n\t\tif (oldEncoding !== this.preferredEncoding) {\n\t\t\tthis._onDidChangeEncoding.fire();\n\t\t}\n\t}\n\n\t//#endregion\n\n\t//#region Dirty\n\n\tprivate dirty = this.hasAssociatedFilePath || !!this.initialValue;\n\n\tisDirty(): boolean {\n\t\treturn this.dirty;\n\t}\n\n\tisModified(): boolean {\n\t\treturn this.isDirty();\n\t}\n\n\tprivate setDirty(dirty: boolean): void {\n\t\tif (this.dirty === dirty) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.dirty = dirty;\n\t\tthis._onDidChangeDirty.fire();\n\t}\n\n\t//#endregion\n\n\t//#region Save / Revert / Backup\n\n\tasync save(options?: ISaveOptions): Promise<boolean> {\n\t\tconst target = await this.textFileService.save(this.resource, options);\n\n\t\t// Emit as event\n\t\tif (target) {\n\t\t\tthis._onDidSave.fire({ reason: options?.reason, source: options?.source });\n\t\t}\n\n\t\treturn !!target;\n\t}\n\n\tasync revert(): Promise<void> {\n\n\t\t// Reset contents to be empty\n\t\tthis.ignoreDirtyOnModelContentChange = true;\n\t\ttry {\n\t\t\tthis.updateTextEditorModel(createTextBufferFactory(''));\n\t\t} finally {\n\t\t\tthis.ignoreDirtyOnModelContentChange = false;\n\t\t}\n\n\t\t// No longer dirty\n\t\tthis.setDirty(false);\n\n\t\t// Emit as event\n\t\tthis._onDidRevert.fire();\n\t}\n\n\tasync backup(token: CancellationToken): Promise<IWorkingCopyBackup> {\n\t\tlet content: VSBufferReadable | undefined = undefined;\n\n\t\t// Make sure to check whether this model has been resolved\n\t\t// or not and fallback to the initial value - if any - to\n\t\t// prevent backing up an unresolved model and loosing the\n\t\t// initial value.\n\t\tif (this.isResolved()) {\n\t\t\t// Fill in content the same way we would do when saving the file\n\t\t\t// via the text file service encoding support (hardcode UTF-8)\n\t\t\tcontent = await this.textFileService.getEncodedReadable(this.resource, this.createSnapshot() ?? undefined, { encoding: UTF8 });\n\t\t} else if (typeof this.initialValue === 'string') {\n\t\t\tcontent = bufferToReadable(VSBuffer.fromString(this.initialValue));\n\t\t}\n\n\t\treturn { content };\n\t}\n\n\t//#endregion\n\n\t//#region Resolve\n\n\tprivate ignoreDirtyOnModelContentChange = false;\n\n\toverride async resolve(): Promise<void> {\n\n\t\t// Create text editor model if not yet done\n\t\tlet createdUntitledModel = false;\n\t\tlet hasBackup = false;\n\t\tif (!this.textEditorModel) {\n\t\t\tlet untitledContents: VSBufferReadableStream;\n\n\t\t\t// Check for backups or use initial value or empty\n\t\t\tconst backup = await this.workingCopyBackupService.resolve(this);\n\t\t\tif (backup) {\n\t\t\t\tuntitledContents = backup.value;\n\t\t\t\thasBackup = true;\n\t\t\t} else {\n\t\t\t\tuntitledContents = bufferToStream(VSBuffer.fromString(this.initialValue || ''));\n\t\t\t}\n\n\t\t\t// Determine untitled contents based on backup\n\t\t\t// or initial value. We must use text file service\n\t\t\t// to create the text factory to respect encodings\n\t\t\t// accordingly.\n\t\t\tconst untitledContentsFactory = await createTextBufferFactoryFromStream(await this.textFileService.getDecodedStream(this.resource, untitledContents, { encoding: UTF8 }));\n\n\t\t\tthis.createTextEditorModel(untitledContentsFactory, this.resource, this.preferredLanguageId);\n\t\t\tcreatedUntitledModel = true;\n\t\t}\n\n\t\t// Otherwise: the untitled model already exists and we must assume\n\t\t// that the value of the model was changed by the user. As such we\n\t\t// do not update the contents, only the language if configured.\n\t\telse {\n\t\t\tthis.updateTextEditorModel(undefined, this.preferredLanguageId);\n\t\t}\n\n\t\t// Listen to text model events\n\t\tconst textEditorModel = assertIsDefined(this.textEditorModel);\n\t\tthis.installModelListeners(textEditorModel);\n\n\t\t// Only adjust name and dirty state etc. if we\n\t\t// actually created the untitled model\n\t\tif (createdUntitledModel) {\n\n\t\t\t// Name\n\t\t\tif (hasBackup || this.initialValue) {\n\t\t\t\tthis.updateNameFromFirstLine(textEditorModel);\n\t\t\t}\n\n\t\t\t// Untitled associated to file path are dirty right away as well as untitled with content\n\t\t\tthis.setDirty(this.hasAssociatedFilePath || !!hasBackup || !!this.initialValue);\n\n\t\t\t// If we have initial contents, make sure to emit this\n\t\t\t// as the appropiate events to the outside.\n\t\t\tif (hasBackup || this.initialValue) {\n\t\t\t\tthis._onDidChangeContent.fire();\n\t\t\t}\n\t\t}\n\n\t\treturn super.resolve();\n\t}\n\n\tprotected override installModelListeners(model: ITextModel): void {\n\t\tthis._register(model.onDidChangeContent(e => this.onModelContentChanged(model, e)));\n\t\tthis._register(model.onDidChangeLanguage(() => this.onConfigurationChange(undefined, true))); // language change can have impact on config\n\n\t\tsuper.installModelListeners(model);\n\t}\n\n\tprivate onModelContentChanged(textEditorModel: ITextModel, e: IModelContentChangedEvent): void {\n\t\tif (!this.ignoreDirtyOnModelContentChange) {\n\n\t\t\t// mark the untitled text editor as non-dirty once its content becomes empty and we do\n\t\t\t// not have an associated path set. we never want dirty indicator in that case.\n\t\t\tif (!this.hasAssociatedFilePath && textEditorModel.getLineCount() === 1 && textEditorModel.getLineLength(1) === 0) {\n\t\t\t\tthis.setDirty(false);\n\t\t\t}\n\n\t\t\t// turn dirty otherwise\n\t\t\telse {\n\t\t\t\tthis.setDirty(true);\n\t\t\t}\n\t\t}\n\n\t\t// Check for name change if first line changed in the range of 0-FIRST_LINE_NAME_CANDIDATE_MAX_LENGTH columns\n\t\tif (e.changes.some(change => (change.range.startLineNumber === 1 || change.range.endLineNumber === 1) && change.range.startColumn <= UntitledTextEditorModel.FIRST_LINE_NAME_CANDIDATE_MAX_LENGTH)) {\n\t\t\tthis.updateNameFromFirstLine(textEditorModel);\n\t\t}\n\n\t\t// Emit as general content change event\n\t\tthis._onDidChangeContent.fire();\n\n\t\t// Detect language from content\n\t\tthis.autoDetectLanguage();\n\t}\n\n\tprivate updateNameFromFirstLine(textEditorModel: ITextModel): void {\n\t\tif (this.hasAssociatedFilePath) {\n\t\t\treturn; // not in case of an associated file path\n\t\t}\n\n\t\t// Determine the first words of the model following these rules:\n\t\t// - cannot be only whitespace (so we trim())\n\t\t// - cannot be only non-alphanumeric characters (so we run word definition regex over it)\n\t\t// - cannot be longer than FIRST_LINE_MAX_TITLE_LENGTH\n\t\t// - normalize multiple whitespaces to a single whitespace\n\n\t\tlet modelFirstWordsCandidate: string | undefined = undefined;\n\n\t\tlet firstLineText = textEditorModel\n\t\t\t.getValueInRange({\n\t\t\t\tstartLineNumber: 1,\n\t\t\t\tendLineNumber: 1,\n\t\t\t\tstartColumn: 1,\n\t\t\t\tendColumn: UntitledTextEditorModel.FIRST_LINE_NAME_CANDIDATE_MAX_LENGTH + 1\t\t// first cap at FIRST_LINE_NAME_CANDIDATE_MAX_LENGTH\n\t\t\t})\n\t\t\t.trim().replace(/\\s+/g, ' ') \t\t\t\t\t\t\t\t\t\t\t\t\t\t// normalize whitespaces\n\t\t\t.replace(/\\u202E/g, '');\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// drop Right-to-Left Override character (#190133)\n\t\tfirstLineText = firstLineText.substr(0, getCharContainingOffset(\t\t\t\t\t\t// finally cap at FIRST_LINE_NAME_MAX_LENGTH (grapheme aware #111235)\n\t\t\tfirstLineText,\n\t\t\tUntitledTextEditorModel.FIRST_LINE_NAME_MAX_LENGTH)[0]\n\t\t);\n\n\t\tif (firstLineText && ensureValidWordDefinition().exec(firstLineText)) {\n\t\t\tmodelFirstWordsCandidate = firstLineText;\n\t\t}\n\n\t\tif (modelFirstWordsCandidate !== this.cachedModelFirstLineWords) {\n\t\t\tthis.cachedModelFirstLineWords = modelFirstWordsCandidate;\n\t\t\tthis._onDidChangeName.fire();\n\t\t}\n\t}\n\n\t//#endregion\n\n\toverride isReadonly(): boolean {\n\t\treturn false;\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
