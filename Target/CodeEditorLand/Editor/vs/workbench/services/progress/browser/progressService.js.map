{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/progress/browser/progressService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport './media/progressService.css';\n\nimport { localize } from '../../../../nls.js';\nimport { IDisposable, dispose, DisposableStore, Disposable, toDisposable } from '../../../../base/common/lifecycle.js';\nimport { IProgressService, IProgressOptions, IProgressStep, ProgressLocation, IProgress, Progress, IProgressCompositeOptions, IProgressNotificationOptions, IProgressRunner, IProgressIndicator, IProgressWindowOptions, IProgressDialogOptions } from '../../../../platform/progress/common/progress.js';\nimport { StatusbarAlignment, IStatusbarService, IStatusbarEntryAccessor, IStatusbarEntry } from '../../statusbar/browser/statusbar.js';\nimport { DeferredPromise, RunOnceScheduler, timeout } from '../../../../base/common/async.js';\nimport { ProgressBadge, IActivityService } from '../../activity/common/activity.js';\nimport { INotificationService, Severity, INotificationHandle, NotificationPriority, isNotificationSource, NotificationsFilter } from '../../../../platform/notification/common/notification.js';\nimport { Action } from '../../../../base/common/actions.js';\nimport { Event, Emitter } from '../../../../base/common/event.js';\nimport { InstantiationType, registerSingleton } from '../../../../platform/instantiation/common/extensions.js';\nimport { ILayoutService } from '../../../../platform/layout/browser/layoutService.js';\nimport { Dialog } from '../../../../base/browser/ui/dialog/dialog.js';\nimport { IKeybindingService } from '../../../../platform/keybinding/common/keybinding.js';\nimport { StandardKeyboardEvent } from '../../../../base/browser/keyboardEvent.js';\nimport { EventHelper } from '../../../../base/browser/dom.js';\nimport { parseLinkedText } from '../../../../base/common/linkedText.js';\nimport { IViewDescriptorService, ViewContainerLocation } from '../../../common/views.js';\nimport { IViewsService } from '../../views/common/viewsService.js';\nimport { IPaneCompositePartService } from '../../panecomposite/browser/panecomposite.js';\nimport { stripIcons } from '../../../../base/common/iconLabels.js';\nimport { defaultButtonStyles, defaultCheckboxStyles, defaultDialogStyles, defaultInputBoxStyles } from '../../../../platform/theme/browser/defaultStyles.js';\nimport { ResultKind } from '../../../../platform/keybinding/common/keybindingResolver.js';\nimport { IUserActivityService } from '../../userActivity/common/userActivityService.js';\n\nexport class ProgressService extends Disposable implements IProgressService {\n\n\tdeclare readonly _serviceBrand: undefined;\n\n\tconstructor(\n\t\t@IActivityService private readonly activityService: IActivityService,\n\t\t@IPaneCompositePartService private readonly paneCompositeService: IPaneCompositePartService,\n\t\t@IViewDescriptorService private readonly viewDescriptorService: IViewDescriptorService,\n\t\t@IViewsService private readonly viewsService: IViewsService,\n\t\t@INotificationService private readonly notificationService: INotificationService,\n\t\t@IStatusbarService private readonly statusbarService: IStatusbarService,\n\t\t@ILayoutService private readonly layoutService: ILayoutService,\n\t\t@IKeybindingService private readonly keybindingService: IKeybindingService,\n\t\t@IUserActivityService private readonly userActivityService: IUserActivityService,\n\t) {\n\t\tsuper();\n\t}\n\n\tasync withProgress<R = unknown>(options: IProgressOptions, originalTask: (progress: IProgress<IProgressStep>) => Promise<R>, onDidCancel?: (choice?: number) => void): Promise<R> {\n\t\tconst { location } = options;\n\n\t\tconst task = async (progress: IProgress<IProgressStep>) => {\n\t\t\tconst activeLock = this.userActivityService.markActive({ whenHeldFor: 15_000 });\n\t\t\ttry {\n\t\t\t\treturn await originalTask(progress);\n\t\t\t} finally {\n\t\t\t\tactiveLock.dispose();\n\t\t\t}\n\t\t};\n\n\t\tconst handleStringLocation = (location: string) => {\n\t\t\tconst viewContainer = this.viewDescriptorService.getViewContainerById(location);\n\t\t\tif (viewContainer) {\n\t\t\t\tconst viewContainerLocation = this.viewDescriptorService.getViewContainerLocation(viewContainer);\n\t\t\t\tif (viewContainerLocation !== null) {\n\t\t\t\t\treturn this.withPaneCompositeProgress(location, viewContainerLocation, task, { ...options, location });\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (this.viewDescriptorService.getViewDescriptorById(location) !== null) {\n\t\t\t\treturn this.withViewProgress(location, task, { ...options, location });\n\t\t\t}\n\n\t\t\tthrow new Error(`Bad progress location: ${location}`);\n\t\t};\n\n\t\tif (typeof location === 'string') {\n\t\t\treturn handleStringLocation(location);\n\t\t}\n\n\t\tswitch (location) {\n\t\t\tcase ProgressLocation.Notification: {\n\t\t\t\tlet priority = (options as IProgressNotificationOptions).priority;\n\t\t\t\tif (priority !== NotificationPriority.URGENT) {\n\t\t\t\t\tif (this.notificationService.getFilter() === NotificationsFilter.ERROR) {\n\t\t\t\t\t\tpriority = NotificationPriority.SILENT;\n\t\t\t\t\t} else if (isNotificationSource(options.source) && this.notificationService.getFilter(options.source) === NotificationsFilter.ERROR) {\n\t\t\t\t\t\tpriority = NotificationPriority.SILENT;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn this.withNotificationProgress({ ...options, location, priority }, task, onDidCancel);\n\t\t\t}\n\t\t\tcase ProgressLocation.Window: {\n\t\t\t\tconst type = (options as IProgressWindowOptions).type;\n\t\t\t\tif ((options as IProgressWindowOptions).command) {\n\t\t\t\t\t// Window progress with command get's shown in the status bar\n\t\t\t\t\treturn this.withWindowProgress({ ...options, location, type }, task);\n\t\t\t\t}\n\t\t\t\t// Window progress without command can be shown as silent notification\n\t\t\t\t// which will first appear in the status bar and can then be brought to\n\t\t\t\t// the front when clicking.\n\t\t\t\treturn this.withNotificationProgress({ delay: 150 /* default for ProgressLocation.Window */, ...options, priority: NotificationPriority.SILENT, location: ProgressLocation.Notification, type }, task, onDidCancel);\n\t\t\t}\n\t\t\tcase ProgressLocation.Explorer:\n\t\t\t\treturn this.withPaneCompositeProgress('workbench.view.explorer', ViewContainerLocation.Sidebar, task, { ...options, location });\n\t\t\tcase ProgressLocation.Scm:\n\t\t\t\treturn handleStringLocation('workbench.scm');\n\t\t\tcase ProgressLocation.Extensions:\n\t\t\t\treturn this.withPaneCompositeProgress('workbench.view.extensions', ViewContainerLocation.Sidebar, task, { ...options, location });\n\t\t\tcase ProgressLocation.Dialog:\n\t\t\t\treturn this.withDialogProgress(options, task, onDidCancel);\n\t\t\tdefault:\n\t\t\t\tthrow new Error(`Bad progress location: ${location}`);\n\t\t}\n\t}\n\n\tprivate readonly windowProgressStack: [IProgressWindowOptions, Progress<IProgressStep>][] = [];\n\tprivate windowProgressStatusEntry: IStatusbarEntryAccessor | undefined = undefined;\n\n\tprivate withWindowProgress<R = unknown>(options: IProgressWindowOptions, callback: (progress: IProgress<{ message?: string }>) => Promise<R>): Promise<R> {\n\t\tconst task: [IProgressWindowOptions, Progress<IProgressStep>] = [options, new Progress<IProgressStep>(() => this.updateWindowProgress())];\n\n\t\tconst promise = callback(task[1]);\n\n\t\tlet delayHandle: any = setTimeout(() => {\n\t\t\tdelayHandle = undefined;\n\t\t\tthis.windowProgressStack.unshift(task);\n\t\t\tthis.updateWindowProgress();\n\n\t\t\t// show progress for at least 150ms\n\t\t\tPromise.all([\n\t\t\t\ttimeout(150),\n\t\t\t\tpromise\n\t\t\t]).finally(() => {\n\t\t\t\tconst idx = this.windowProgressStack.indexOf(task);\n\t\t\t\tthis.windowProgressStack.splice(idx, 1);\n\t\t\t\tthis.updateWindowProgress();\n\t\t\t});\n\t\t}, 150);\n\n\t\t// cancel delay if promise finishes below 150ms\n\t\treturn promise.finally(() => clearTimeout(delayHandle));\n\t}\n\n\tprivate updateWindowProgress(idx: number = 0) {\n\n\t\t// We still have progress to show\n\t\tif (idx < this.windowProgressStack.length) {\n\t\t\tconst [options, progress] = this.windowProgressStack[idx];\n\n\t\t\tconst progressTitle = options.title;\n\t\t\tconst progressMessage = progress.value && progress.value.message;\n\t\t\tconst progressCommand = (<IProgressWindowOptions>options).command;\n\t\t\tlet text: string;\n\t\t\tlet title: string;\n\t\t\tconst source = options.source && typeof options.source !== 'string' ? options.source.label : options.source;\n\n\t\t\tif (progressTitle && progressMessage) {\n\t\t\t\t// <title>: <message>\n\t\t\t\ttext = localize('progress.text2', \"{0}: {1}\", progressTitle, progressMessage);\n\t\t\t\ttitle = source ? localize('progress.title3', \"[{0}] {1}: {2}\", source, progressTitle, progressMessage) : text;\n\n\t\t\t} else if (progressTitle) {\n\t\t\t\t// <title>\n\t\t\t\ttext = progressTitle;\n\t\t\t\ttitle = source ? localize('progress.title2', \"[{0}]: {1}\", source, progressTitle) : text;\n\n\t\t\t} else if (progressMessage) {\n\t\t\t\t// <message>\n\t\t\t\ttext = progressMessage;\n\t\t\t\ttitle = source ? localize('progress.title2', \"[{0}]: {1}\", source, progressMessage) : text;\n\n\t\t\t} else {\n\t\t\t\t// no title, no message -> no progress. try with next on stack\n\t\t\t\tthis.updateWindowProgress(idx + 1);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst statusEntryProperties: IStatusbarEntry = {\n\t\t\t\tname: localize('status.progress', \"Progress Message\"),\n\t\t\t\ttext,\n\t\t\t\tshowProgress: options.type || true,\n\t\t\t\tariaLabel: text,\n\t\t\t\ttooltip: title,\n\t\t\t\tcommand: progressCommand\n\t\t\t};\n\n\t\t\tif (this.windowProgressStatusEntry) {\n\t\t\t\tthis.windowProgressStatusEntry.update(statusEntryProperties);\n\t\t\t} else {\n\t\t\t\tthis.windowProgressStatusEntry = this.statusbarService.addEntry(statusEntryProperties, 'status.progress', StatusbarAlignment.LEFT);\n\t\t\t}\n\t\t}\n\n\t\t// Progress is done so we remove the status entry\n\t\telse {\n\t\t\tthis.windowProgressStatusEntry?.dispose();\n\t\t\tthis.windowProgressStatusEntry = undefined;\n\t\t}\n\t}\n\n\tprivate withNotificationProgress<P extends Promise<R>, R = unknown>(options: IProgressNotificationOptions, callback: (progress: IProgress<IProgressStep>) => P, onDidCancel?: (choice?: number) => void): P {\n\n\t\tconst progressStateModel = new class extends Disposable {\n\n\t\t\tprivate readonly _onDidReport = this._register(new Emitter<IProgressStep>());\n\t\t\treadonly onDidReport = this._onDidReport.event;\n\n\t\t\tprivate readonly _onWillDispose = this._register(new Emitter<void>());\n\t\t\treadonly onWillDispose = this._onWillDispose.event;\n\n\t\t\tprivate _step: IProgressStep | undefined = undefined;\n\t\t\tget step() { return this._step; }\n\n\t\t\tprivate _done = false;\n\t\t\tget done() { return this._done; }\n\n\t\t\treadonly promise: P;\n\n\t\t\tconstructor() {\n\t\t\t\tsuper();\n\n\t\t\t\tthis.promise = callback(this);\n\n\t\t\t\tthis.promise.finally(() => {\n\t\t\t\t\tthis.dispose();\n\t\t\t\t});\n\t\t\t}\n\n\t\t\treport(step: IProgressStep): void {\n\t\t\t\tthis._step = step;\n\n\t\t\t\tthis._onDidReport.fire(step);\n\t\t\t}\n\n\t\t\tcancel(choice?: number): void {\n\t\t\t\tonDidCancel?.(choice);\n\n\t\t\t\tthis.dispose();\n\t\t\t}\n\n\t\t\toverride dispose(): void {\n\t\t\t\tthis._done = true;\n\t\t\t\tthis._onWillDispose.fire();\n\n\t\t\t\tsuper.dispose();\n\t\t\t}\n\t\t};\n\n\t\tconst createWindowProgress = () => {\n\n\t\t\t// Create a promise that we can resolve as needed\n\t\t\t// when the outside calls dispose on us\n\t\t\tconst promise = new DeferredPromise<void>();\n\n\t\t\tthis.withWindowProgress({\n\t\t\t\tlocation: ProgressLocation.Window,\n\t\t\t\ttitle: options.title ? parseLinkedText(options.title).toString() : undefined, // convert markdown links => string\n\t\t\t\tcommand: 'notifications.showList',\n\t\t\t\ttype: options.type\n\t\t\t}, progress => {\n\n\t\t\t\tfunction reportProgress(step: IProgressStep) {\n\t\t\t\t\tif (step.message) {\n\t\t\t\t\t\tprogress.report({\n\t\t\t\t\t\t\tmessage: parseLinkedText(step.message).toString()  // convert markdown links => string\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Apply any progress that was made already\n\t\t\t\tif (progressStateModel.step) {\n\t\t\t\t\treportProgress(progressStateModel.step);\n\t\t\t\t}\n\n\t\t\t\t// Continue to report progress as it happens\n\t\t\t\tconst onDidReportListener = progressStateModel.onDidReport(step => reportProgress(step));\n\t\t\t\tpromise.p.finally(() => onDidReportListener.dispose());\n\n\t\t\t\t// When the progress model gets disposed, we are done as well\n\t\t\t\tEvent.once(progressStateModel.onWillDispose)(() => promise.complete());\n\n\t\t\t\treturn promise.p;\n\t\t\t});\n\n\t\t\t// Dispose means completing our promise\n\t\t\treturn toDisposable(() => promise.complete());\n\t\t};\n\n\t\tconst createNotification = (message: string, priority?: NotificationPriority, increment?: number): INotificationHandle => {\n\t\t\tconst notificationDisposables = new DisposableStore();\n\n\t\t\tconst primaryActions = options.primaryActions ? Array.from(options.primaryActions) : [];\n\t\t\tconst secondaryActions = options.secondaryActions ? Array.from(options.secondaryActions) : [];\n\n\t\t\tif (options.buttons) {\n\t\t\t\toptions.buttons.forEach((button, index) => {\n\t\t\t\t\tconst buttonAction = new class extends Action {\n\t\t\t\t\t\tconstructor() {\n\t\t\t\t\t\t\tsuper(`progress.button.${button}`, button, undefined, true);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\toverride async run(): Promise<void> {\n\t\t\t\t\t\t\tprogressStateModel.cancel(index);\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t\tnotificationDisposables.add(buttonAction);\n\n\t\t\t\t\tprimaryActions.push(buttonAction);\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tif (options.cancellable) {\n\t\t\t\tconst cancelAction = new class extends Action {\n\t\t\t\t\tconstructor() {\n\t\t\t\t\t\tsuper('progress.cancel', localize('cancel', \"Cancel\"), undefined, true);\n\t\t\t\t\t}\n\n\t\t\t\t\toverride async run(): Promise<void> {\n\t\t\t\t\t\tprogressStateModel.cancel();\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t\tnotificationDisposables.add(cancelAction);\n\n\t\t\t\tprimaryActions.push(cancelAction);\n\t\t\t}\n\n\t\t\tconst notification = this.notificationService.notify({\n\t\t\t\tseverity: Severity.Info,\n\t\t\t\tmessage: stripIcons(message), // status entries support codicons, but notifications do not (https://github.com/microsoft/vscode/issues/145722)\n\t\t\t\tsource: options.source,\n\t\t\t\tactions: { primary: primaryActions, secondary: secondaryActions },\n\t\t\t\tprogress: typeof increment === 'number' && increment >= 0 ? { total: 100, worked: increment } : { infinite: true },\n\t\t\t\tpriority\n\t\t\t});\n\n\t\t\t// Switch to window based progress once the notification\n\t\t\t// changes visibility to hidden and is still ongoing.\n\t\t\t// Remove that window based progress once the notification\n\t\t\t// shows again.\n\t\t\tlet windowProgressDisposable: IDisposable | undefined = undefined;\n\t\t\tconst onVisibilityChange = (visible: boolean) => {\n\t\t\t\t// Clear any previous running window progress\n\t\t\t\tdispose(windowProgressDisposable);\n\n\t\t\t\t// Create new window progress if notification got hidden\n\t\t\t\tif (!visible && !progressStateModel.done) {\n\t\t\t\t\twindowProgressDisposable = createWindowProgress();\n\t\t\t\t}\n\t\t\t};\n\t\t\tnotificationDisposables.add(notification.onDidChangeVisibility(onVisibilityChange));\n\t\t\tif (priority === NotificationPriority.SILENT) {\n\t\t\t\tonVisibilityChange(false);\n\t\t\t}\n\n\t\t\t// Clear upon dispose\n\t\t\tEvent.once(notification.onDidClose)(() => notificationDisposables.dispose());\n\n\t\t\treturn notification;\n\t\t};\n\n\t\tconst updateProgress = (notification: INotificationHandle, increment?: number): void => {\n\t\t\tif (typeof increment === 'number' && increment >= 0) {\n\t\t\t\tnotification.progress.total(100); // always percentage based\n\t\t\t\tnotification.progress.worked(increment);\n\t\t\t} else {\n\t\t\t\tnotification.progress.infinite();\n\t\t\t}\n\t\t};\n\n\t\tlet notificationHandle: INotificationHandle | undefined;\n\t\tlet notificationTimeout: any | undefined;\n\t\tlet titleAndMessage: string | undefined; // hoisted to make sure a delayed notification shows the most recent message\n\n\t\tconst updateNotification = (step?: IProgressStep): void => {\n\n\t\t\t// full message (inital or update)\n\t\t\tif (step?.message && options.title) {\n\t\t\t\ttitleAndMessage = `${options.title}: ${step.message}`; // always prefix with overall title if we have it (https://github.com/microsoft/vscode/issues/50932)\n\t\t\t} else {\n\t\t\t\ttitleAndMessage = options.title || step?.message;\n\t\t\t}\n\n\t\t\tif (!notificationHandle && titleAndMessage) {\n\n\t\t\t\t// create notification now or after a delay\n\t\t\t\tif (typeof options.delay === 'number' && options.delay > 0) {\n\t\t\t\t\tif (typeof notificationTimeout !== 'number') {\n\t\t\t\t\t\tnotificationTimeout = setTimeout(() => notificationHandle = createNotification(titleAndMessage!, options.priority, step?.increment), options.delay);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tnotificationHandle = createNotification(titleAndMessage, options.priority, step?.increment);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (notificationHandle) {\n\t\t\t\tif (titleAndMessage) {\n\t\t\t\t\tnotificationHandle.updateMessage(titleAndMessage);\n\t\t\t\t}\n\n\t\t\t\tif (typeof step?.increment === 'number') {\n\t\t\t\t\tupdateProgress(notificationHandle, step.increment);\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\t// Show initially\n\t\tupdateNotification(progressStateModel.step);\n\t\tconst listener = progressStateModel.onDidReport(step => updateNotification(step));\n\t\tEvent.once(progressStateModel.onWillDispose)(() => listener.dispose());\n\n\t\t// Clean up eventually\n\t\t(async () => {\n\t\t\ttry {\n\n\t\t\t\t// with a delay we only wait for the finish of the promise\n\t\t\t\tif (typeof options.delay === 'number' && options.delay > 0) {\n\t\t\t\t\tawait progressStateModel.promise;\n\t\t\t\t}\n\n\t\t\t\t// without a delay we show the notification for at least 800ms\n\t\t\t\t// to reduce the chance of the notification flashing up and hiding\n\t\t\t\telse {\n\t\t\t\t\tawait Promise.all([timeout(800), progressStateModel.promise]);\n\t\t\t\t}\n\t\t\t} finally {\n\t\t\t\tclearTimeout(notificationTimeout);\n\t\t\t\tnotificationHandle?.close();\n\t\t\t}\n\t\t})();\n\n\t\treturn progressStateModel.promise;\n\t}\n\n\tprivate withPaneCompositeProgress<P extends Promise<R>, R = unknown>(paneCompositeId: string, viewContainerLocation: ViewContainerLocation, task: (progress: IProgress<IProgressStep>) => P, options: IProgressCompositeOptions): P {\n\n\t\t// show in viewlet\n\t\tconst progressIndicator = this.paneCompositeService.getProgressIndicator(paneCompositeId, viewContainerLocation);\n\t\tconst promise = progressIndicator ? this.withCompositeProgress(progressIndicator, task, options) : task({ report: () => { } });\n\n\t\t// show on activity bar\n\t\tif (viewContainerLocation === ViewContainerLocation.Sidebar) {\n\t\t\tthis.showOnActivityBar<P, R>(paneCompositeId, options, promise);\n\t\t}\n\n\t\treturn promise;\n\t}\n\n\tprivate withViewProgress<P extends Promise<R>, R = unknown>(viewId: string, task: (progress: IProgress<IProgressStep>) => P, options: IProgressCompositeOptions): P {\n\n\t\t// show in viewlet\n\t\tconst progressIndicator = this.viewsService.getViewProgressIndicator(viewId);\n\t\tconst promise = progressIndicator ? this.withCompositeProgress(progressIndicator, task, options) : task({ report: () => { } });\n\n\t\tconst location = this.viewDescriptorService.getViewLocationById(viewId);\n\t\tif (location !== ViewContainerLocation.Sidebar) {\n\t\t\treturn promise;\n\t\t}\n\n\t\tconst viewletId = this.viewDescriptorService.getViewContainerByViewId(viewId)?.id;\n\t\tif (viewletId === undefined) {\n\t\t\treturn promise;\n\t\t}\n\n\t\t// show on activity bar\n\t\tthis.showOnActivityBar(viewletId, options, promise);\n\n\t\treturn promise;\n\t}\n\n\tprivate showOnActivityBar<P extends Promise<R>, R = unknown>(viewletId: string, options: IProgressCompositeOptions, promise: P): void {\n\t\tlet activityProgress: IDisposable;\n\t\tlet delayHandle: any = setTimeout(() => {\n\t\t\tdelayHandle = undefined;\n\t\t\tconst handle = this.activityService.showViewContainerActivity(viewletId, { badge: new ProgressBadge(() => ''), priority: 100 });\n\t\t\tconst startTimeVisible = Date.now();\n\t\t\tconst minTimeVisible = 300;\n\t\t\tactivityProgress = {\n\t\t\t\tdispose() {\n\t\t\t\t\tconst d = Date.now() - startTimeVisible;\n\t\t\t\t\tif (d < minTimeVisible) {\n\t\t\t\t\t\t// should at least show for Nms\n\t\t\t\t\t\tsetTimeout(() => handle.dispose(), minTimeVisible - d);\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// shown long enough\n\t\t\t\t\t\thandle.dispose();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t};\n\t\t}, options.delay || 300);\n\t\tpromise.finally(() => {\n\t\t\tclearTimeout(delayHandle);\n\t\t\tdispose(activityProgress);\n\t\t});\n\t}\n\n\tprivate withCompositeProgress<P extends Promise<R>, R = unknown>(progressIndicator: IProgressIndicator, task: (progress: IProgress<IProgressStep>) => P, options: IProgressCompositeOptions): P {\n\t\tlet discreteProgressRunner: IProgressRunner | undefined = undefined;\n\n\t\tfunction updateProgress(stepOrTotal: IProgressStep | number | undefined): IProgressRunner | undefined {\n\n\t\t\t// Figure out whether discrete progress applies\n\t\t\t// by figuring out the \"total\" progress to show\n\t\t\t// and the increment if any.\n\t\t\tlet total: number | undefined = undefined;\n\t\t\tlet increment: number | undefined = undefined;\n\t\t\tif (typeof stepOrTotal !== 'undefined') {\n\t\t\t\tif (typeof stepOrTotal === 'number') {\n\t\t\t\t\ttotal = stepOrTotal;\n\t\t\t\t} else if (typeof stepOrTotal.increment === 'number') {\n\t\t\t\t\ttotal = stepOrTotal.total ?? 100; // always percentage based\n\t\t\t\t\tincrement = stepOrTotal.increment;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Discrete\n\t\t\tif (typeof total === 'number') {\n\t\t\t\tif (!discreteProgressRunner) {\n\t\t\t\t\tdiscreteProgressRunner = progressIndicator.show(total, options.delay);\n\t\t\t\t\tpromise.catch(() => undefined /* ignore */).finally(() => discreteProgressRunner?.done());\n\t\t\t\t}\n\n\t\t\t\tif (typeof increment === 'number') {\n\t\t\t\t\tdiscreteProgressRunner.worked(increment);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Infinite\n\t\t\telse {\n\t\t\t\tdiscreteProgressRunner?.done();\n\t\t\t\tprogressIndicator.showWhile(promise, options.delay);\n\t\t\t}\n\n\t\t\treturn discreteProgressRunner;\n\t\t}\n\n\t\tconst promise = task({\n\t\t\treport: progress => {\n\t\t\t\tupdateProgress(progress);\n\t\t\t}\n\t\t});\n\n\t\tupdateProgress(options.total);\n\n\t\treturn promise;\n\t}\n\n\tprivate withDialogProgress<P extends Promise<R>, R = unknown>(options: IProgressDialogOptions, task: (progress: IProgress<IProgressStep>) => P, onDidCancel?: (choice?: number) => void): P {\n\t\tconst disposables = new DisposableStore();\n\n\t\tconst allowableCommands = [\n\t\t\t'workbench.action.quit',\n\t\t\t'workbench.action.reloadWindow',\n\t\t\t'copy',\n\t\t\t'cut',\n\t\t\t'editor.action.clipboardCopyAction',\n\t\t\t'editor.action.clipboardCutAction'\n\t\t];\n\n\t\tlet dialog: Dialog;\n\n\t\tconst createDialog = (message: string) => {\n\t\t\tconst buttons = options.buttons || [];\n\t\t\tif (!options.sticky) {\n\t\t\t\tbuttons.push(options.cancellable ? localize('cancel', \"Cancel\") : localize('dismiss', \"Dismiss\"));\n\t\t\t}\n\n\t\t\tdialog = new Dialog(\n\t\t\t\tthis.layoutService.activeContainer,\n\t\t\t\tmessage,\n\t\t\t\tbuttons,\n\t\t\t\t{\n\t\t\t\t\ttype: 'pending',\n\t\t\t\t\tdetail: options.detail,\n\t\t\t\t\tcancelId: buttons.length - 1,\n\t\t\t\t\tdisableCloseAction: options.sticky,\n\t\t\t\t\tdisableDefaultAction: options.sticky,\n\t\t\t\t\tkeyEventProcessor: (event: StandardKeyboardEvent) => {\n\t\t\t\t\t\tconst resolved = this.keybindingService.softDispatch(event, this.layoutService.activeContainer);\n\t\t\t\t\t\tif (resolved.kind === ResultKind.KbFound && resolved.commandId) {\n\t\t\t\t\t\t\tif (!allowableCommands.includes(resolved.commandId)) {\n\t\t\t\t\t\t\t\tEventHelper.stop(event, true);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\tbuttonStyles: defaultButtonStyles,\n\t\t\t\t\tcheckboxStyles: defaultCheckboxStyles,\n\t\t\t\t\tinputBoxStyles: defaultInputBoxStyles,\n\t\t\t\t\tdialogStyles: defaultDialogStyles\n\t\t\t\t}\n\t\t\t);\n\n\t\t\tdisposables.add(dialog);\n\n\t\t\tdialog.show().then(dialogResult => {\n\t\t\t\tonDidCancel?.(dialogResult.button);\n\n\t\t\t\tdispose(dialog);\n\t\t\t});\n\n\t\t\treturn dialog;\n\t\t};\n\n\t\t// In order to support the `delay` option, we use a scheduler\n\t\t// that will guard each access to the dialog behind a delay\n\t\t// that is either the original delay for one invocation and\n\t\t// otherwise runs without delay.\n\t\tlet delay = options.delay ?? 0;\n\t\tlet latestMessage: string | undefined = undefined;\n\t\tconst scheduler = disposables.add(new RunOnceScheduler(() => {\n\t\t\tdelay = 0; // since we have run once, we reset the delay\n\n\t\t\tif (latestMessage && !dialog) {\n\t\t\t\tdialog = createDialog(latestMessage);\n\t\t\t} else if (latestMessage) {\n\t\t\t\tdialog.updateMessage(latestMessage);\n\t\t\t}\n\t\t}, 0));\n\n\t\tconst updateDialog = function (message?: string): void {\n\t\t\tlatestMessage = message;\n\n\t\t\t// Make sure to only run one dialog update and not multiple\n\t\t\tif (!scheduler.isScheduled()) {\n\t\t\t\tscheduler.schedule(delay);\n\t\t\t}\n\t\t};\n\n\t\tconst promise = task({\n\t\t\treport: progress => {\n\t\t\t\tupdateDialog(progress.message);\n\t\t\t}\n\t\t});\n\n\t\tpromise.finally(() => {\n\t\t\tdispose(disposables);\n\t\t});\n\n\t\tif (options.title) {\n\t\t\tupdateDialog(options.title);\n\t\t}\n\n\t\treturn promise;\n\t}\n}\n\nregisterSingleton(IProgressService, ProgressService, InstantiationType.Delayed);\n"],
  "mappings": "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",
  "names": ["location"]
}
