{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/progress/browser/progressService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport \"./media/progressService.css\";\n\nimport { EventHelper } from \"../../../../base/browser/dom.js\";\nimport type { StandardKeyboardEvent } from \"../../../../base/browser/keyboardEvent.js\";\nimport { Dialog } from \"../../../../base/browser/ui/dialog/dialog.js\";\nimport { Action } from \"../../../../base/common/actions.js\";\nimport {\n\tDeferredPromise,\n\tRunOnceScheduler,\n\ttimeout,\n} from \"../../../../base/common/async.js\";\nimport { Emitter, Event } from \"../../../../base/common/event.js\";\nimport { stripIcons } from \"../../../../base/common/iconLabels.js\";\nimport {\n\tDisposable,\n\tDisposableStore,\n\ttype IDisposable,\n\tdispose,\n\ttoDisposable,\n} from \"../../../../base/common/lifecycle.js\";\nimport { parseLinkedText } from \"../../../../base/common/linkedText.js\";\nimport { localize } from \"../../../../nls.js\";\nimport {\n\tInstantiationType,\n\tregisterSingleton,\n} from \"../../../../platform/instantiation/common/extensions.js\";\nimport { IKeybindingService } from \"../../../../platform/keybinding/common/keybinding.js\";\nimport { ResultKind } from \"../../../../platform/keybinding/common/keybindingResolver.js\";\nimport { ILayoutService } from \"../../../../platform/layout/browser/layoutService.js\";\nimport {\n\ttype INotificationHandle,\n\tINotificationService,\n\tNotificationPriority,\n\tNotificationsFilter,\n\tSeverity,\n\tisNotificationSource,\n} from \"../../../../platform/notification/common/notification.js\";\nimport {\n\ttype IProgress,\n\ttype IProgressCompositeOptions,\n\ttype IProgressDialogOptions,\n\ttype IProgressIndicator,\n\ttype IProgressNotificationOptions,\n\ttype IProgressOptions,\n\ttype IProgressRunner,\n\tIProgressService,\n\ttype IProgressStep,\n\ttype IProgressWindowOptions,\n\tProgress,\n\tProgressLocation,\n} from \"../../../../platform/progress/common/progress.js\";\nimport {\n\tdefaultButtonStyles,\n\tdefaultCheckboxStyles,\n\tdefaultDialogStyles,\n\tdefaultInputBoxStyles,\n} from \"../../../../platform/theme/browser/defaultStyles.js\";\nimport {\n\tIViewDescriptorService,\n\tViewContainerLocation,\n} from \"../../../common/views.js\";\nimport {\n\tIActivityService,\n\tProgressBadge,\n} from \"../../activity/common/activity.js\";\nimport { IPaneCompositePartService } from \"../../panecomposite/browser/panecomposite.js\";\nimport {\n\ttype IStatusbarEntry,\n\ttype IStatusbarEntryAccessor,\n\tIStatusbarService,\n\tStatusbarAlignment,\n} from \"../../statusbar/browser/statusbar.js\";\nimport { IUserActivityService } from \"../../userActivity/common/userActivityService.js\";\nimport { IViewsService } from \"../../views/common/viewsService.js\";\n\nexport class ProgressService extends Disposable implements IProgressService {\n\tdeclare readonly _serviceBrand: undefined;\n\n\tconstructor(\n\t\t@IActivityService private readonly activityService: IActivityService,\n\t\t@IPaneCompositePartService\n\t\tprivate readonly paneCompositeService: IPaneCompositePartService,\n\t\t@IViewDescriptorService\n\t\tprivate readonly viewDescriptorService: IViewDescriptorService,\n\t\t@IViewsService private readonly viewsService: IViewsService,\n\t\t@INotificationService\n\t\tprivate readonly notificationService: INotificationService,\n\t\t@IStatusbarService private readonly statusbarService: IStatusbarService,\n\t\t@ILayoutService private readonly layoutService: ILayoutService,\n\t\t@IKeybindingService\n\t\tprivate readonly keybindingService: IKeybindingService,\n\t\t@IUserActivityService\n\t\tprivate readonly userActivityService: IUserActivityService,\n\t) {\n\t\tsuper();\n\t}\n\n\tasync withProgress<R = unknown>(\n\t\toptions: IProgressOptions,\n\t\toriginalTask: (progress: IProgress<IProgressStep>) => Promise<R>,\n\t\tonDidCancel?: (choice?: number) => void,\n\t): Promise<R> {\n\t\tconst { location } = options;\n\n\t\tconst task = async (progress: IProgress<IProgressStep>) => {\n\t\t\tconst activeLock = this.userActivityService.markActive({\n\t\t\t\twhenHeldFor: 15_000,\n\t\t\t});\n\t\t\ttry {\n\t\t\t\treturn await originalTask(progress);\n\t\t\t} finally {\n\t\t\t\tactiveLock.dispose();\n\t\t\t}\n\t\t};\n\n\t\tconst handleStringLocation = (location: string) => {\n\t\t\tconst viewContainer =\n\t\t\t\tthis.viewDescriptorService.getViewContainerById(location);\n\t\t\tif (viewContainer) {\n\t\t\t\tconst viewContainerLocation =\n\t\t\t\t\tthis.viewDescriptorService.getViewContainerLocation(\n\t\t\t\t\t\tviewContainer,\n\t\t\t\t\t);\n\t\t\t\tif (viewContainerLocation !== null) {\n\t\t\t\t\treturn this.withPaneCompositeProgress(\n\t\t\t\t\t\tlocation,\n\t\t\t\t\t\tviewContainerLocation,\n\t\t\t\t\t\ttask,\n\t\t\t\t\t\t{ ...options, location },\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (\n\t\t\t\tthis.viewDescriptorService.getViewDescriptorById(location) !==\n\t\t\t\tnull\n\t\t\t) {\n\t\t\t\treturn this.withViewProgress(location, task, {\n\t\t\t\t\t...options,\n\t\t\t\t\tlocation,\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tthrow new Error(`Bad progress location: ${location}`);\n\t\t};\n\n\t\tif (typeof location === \"string\") {\n\t\t\treturn handleStringLocation(location);\n\t\t}\n\n\t\tswitch (location) {\n\t\t\tcase ProgressLocation.Notification: {\n\t\t\t\tlet priority = (options as IProgressNotificationOptions)\n\t\t\t\t\t.priority;\n\t\t\t\tif (priority !== NotificationPriority.URGENT) {\n\t\t\t\t\tif (\n\t\t\t\t\t\tthis.notificationService.getFilter() ===\n\t\t\t\t\t\tNotificationsFilter.ERROR\n\t\t\t\t\t) {\n\t\t\t\t\t\tpriority = NotificationPriority.SILENT;\n\t\t\t\t\t} else if (\n\t\t\t\t\t\tisNotificationSource(options.source) &&\n\t\t\t\t\t\tthis.notificationService.getFilter(options.source) ===\n\t\t\t\t\t\t\tNotificationsFilter.ERROR\n\t\t\t\t\t) {\n\t\t\t\t\t\tpriority = NotificationPriority.SILENT;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn this.withNotificationProgress(\n\t\t\t\t\t{ ...options, location, priority },\n\t\t\t\t\ttask,\n\t\t\t\t\tonDidCancel,\n\t\t\t\t);\n\t\t\t}\n\t\t\tcase ProgressLocation.Window: {\n\t\t\t\tconst type = (options as IProgressWindowOptions).type;\n\t\t\t\tif ((options as IProgressWindowOptions).command) {\n\t\t\t\t\t// Window progress with command get's shown in the status bar\n\t\t\t\t\treturn this.withWindowProgress(\n\t\t\t\t\t\t{ ...options, location, type },\n\t\t\t\t\t\ttask,\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t\t// Window progress without command can be shown as silent notification\n\t\t\t\t// which will first appear in the status bar and can then be brought to\n\t\t\t\t// the front when clicking.\n\t\t\t\treturn this.withNotificationProgress(\n\t\t\t\t\t{\n\t\t\t\t\t\tdelay: 150 /* default for ProgressLocation.Window */,\n\t\t\t\t\t\t...options,\n\t\t\t\t\t\tpriority: NotificationPriority.SILENT,\n\t\t\t\t\t\tlocation: ProgressLocation.Notification,\n\t\t\t\t\t\ttype,\n\t\t\t\t\t},\n\t\t\t\t\ttask,\n\t\t\t\t\tonDidCancel,\n\t\t\t\t);\n\t\t\t}\n\t\t\tcase ProgressLocation.Explorer:\n\t\t\t\treturn this.withPaneCompositeProgress(\n\t\t\t\t\t\"workbench.view.explorer\",\n\t\t\t\t\tViewContainerLocation.Sidebar,\n\t\t\t\t\ttask,\n\t\t\t\t\t{ ...options, location },\n\t\t\t\t);\n\t\t\tcase ProgressLocation.Scm:\n\t\t\t\treturn handleStringLocation(\"workbench.scm\");\n\t\t\tcase ProgressLocation.Extensions:\n\t\t\t\treturn this.withPaneCompositeProgress(\n\t\t\t\t\t\"workbench.view.extensions\",\n\t\t\t\t\tViewContainerLocation.Sidebar,\n\t\t\t\t\ttask,\n\t\t\t\t\t{ ...options, location },\n\t\t\t\t);\n\t\t\tcase ProgressLocation.Dialog:\n\t\t\t\treturn this.withDialogProgress(options, task, onDidCancel);\n\t\t\tdefault:\n\t\t\t\tthrow new Error(`Bad progress location: ${location}`);\n\t\t}\n\t}\n\n\tprivate readonly windowProgressStack: [\n\t\tIProgressWindowOptions,\n\t\tProgress<IProgressStep>,\n\t][] = [];\n\tprivate windowProgressStatusEntry: IStatusbarEntryAccessor | undefined =\n\t\tundefined;\n\n\tprivate withWindowProgress<R = unknown>(\n\t\toptions: IProgressWindowOptions,\n\t\tcallback: (progress: IProgress<{ message?: string }>) => Promise<R>,\n\t): Promise<R> {\n\t\tconst task: [IProgressWindowOptions, Progress<IProgressStep>] = [\n\t\t\toptions,\n\t\t\tnew Progress<IProgressStep>(() => this.updateWindowProgress()),\n\t\t];\n\n\t\tconst promise = callback(task[1]);\n\n\t\tlet delayHandle: any = setTimeout(() => {\n\t\t\tdelayHandle = undefined;\n\t\t\tthis.windowProgressStack.unshift(task);\n\t\t\tthis.updateWindowProgress();\n\n\t\t\t// show progress for at least 150ms\n\t\t\tPromise.all([timeout(150), promise]).finally(() => {\n\t\t\t\tconst idx = this.windowProgressStack.indexOf(task);\n\t\t\t\tthis.windowProgressStack.splice(idx, 1);\n\t\t\t\tthis.updateWindowProgress();\n\t\t\t});\n\t\t}, 150);\n\n\t\t// cancel delay if promise finishes below 150ms\n\t\treturn promise.finally(() => clearTimeout(delayHandle));\n\t}\n\n\tprivate updateWindowProgress(idx = 0) {\n\t\t// We still have progress to show\n\t\tif (idx < this.windowProgressStack.length) {\n\t\t\tconst [options, progress] = this.windowProgressStack[idx];\n\n\t\t\tconst progressTitle = options.title;\n\t\t\tconst progressMessage = progress.value && progress.value.message;\n\t\t\tconst progressCommand = (<IProgressWindowOptions>options).command;\n\t\t\tlet text: string;\n\t\t\tlet title: string;\n\t\t\tconst source =\n\t\t\t\toptions.source && typeof options.source !== \"string\"\n\t\t\t\t\t? options.source.label\n\t\t\t\t\t: options.source;\n\n\t\t\tif (progressTitle && progressMessage) {\n\t\t\t\t// <title>: <message>\n\t\t\t\ttext = localize(\n\t\t\t\t\t\"progress.text2\",\n\t\t\t\t\t\"{0}: {1}\",\n\t\t\t\t\tprogressTitle,\n\t\t\t\t\tprogressMessage,\n\t\t\t\t);\n\t\t\t\ttitle = source\n\t\t\t\t\t? localize(\n\t\t\t\t\t\t\t\"progress.title3\",\n\t\t\t\t\t\t\t\"[{0}] {1}: {2}\",\n\t\t\t\t\t\t\tsource,\n\t\t\t\t\t\t\tprogressTitle,\n\t\t\t\t\t\t\tprogressMessage,\n\t\t\t\t\t\t)\n\t\t\t\t\t: text;\n\t\t\t} else if (progressTitle) {\n\t\t\t\t// <title>\n\t\t\t\ttext = progressTitle;\n\t\t\t\ttitle = source\n\t\t\t\t\t? localize(\n\t\t\t\t\t\t\t\"progress.title2\",\n\t\t\t\t\t\t\t\"[{0}]: {1}\",\n\t\t\t\t\t\t\tsource,\n\t\t\t\t\t\t\tprogressTitle,\n\t\t\t\t\t\t)\n\t\t\t\t\t: text;\n\t\t\t} else if (progressMessage) {\n\t\t\t\t// <message>\n\t\t\t\ttext = progressMessage;\n\t\t\t\ttitle = source\n\t\t\t\t\t? localize(\n\t\t\t\t\t\t\t\"progress.title2\",\n\t\t\t\t\t\t\t\"[{0}]: {1}\",\n\t\t\t\t\t\t\tsource,\n\t\t\t\t\t\t\tprogressMessage,\n\t\t\t\t\t\t)\n\t\t\t\t\t: text;\n\t\t\t} else {\n\t\t\t\t// no title, no message -> no progress. try with next on stack\n\t\t\t\tthis.updateWindowProgress(idx + 1);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst statusEntryProperties: IStatusbarEntry = {\n\t\t\t\tname: localize(\"status.progress\", \"Progress Message\"),\n\t\t\t\ttext,\n\t\t\t\tshowProgress: options.type || true,\n\t\t\t\tariaLabel: text,\n\t\t\t\ttooltip: title,\n\t\t\t\tcommand: progressCommand,\n\t\t\t};\n\n\t\t\tif (this.windowProgressStatusEntry) {\n\t\t\t\tthis.windowProgressStatusEntry.update(statusEntryProperties);\n\t\t\t} else {\n\t\t\t\tthis.windowProgressStatusEntry = this.statusbarService.addEntry(\n\t\t\t\t\tstatusEntryProperties,\n\t\t\t\t\t\"status.progress\",\n\t\t\t\t\tStatusbarAlignment.LEFT,\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\t// Progress is done so we remove the status entry\n\t\telse {\n\t\t\tthis.windowProgressStatusEntry?.dispose();\n\t\t\tthis.windowProgressStatusEntry = undefined;\n\t\t}\n\t}\n\n\tprivate withNotificationProgress<P extends Promise<R>, R = unknown>(\n\t\toptions: IProgressNotificationOptions,\n\t\tcallback: (progress: IProgress<IProgressStep>) => P,\n\t\tonDidCancel?: (choice?: number) => void,\n\t): P {\n\t\tconst progressStateModel = new (class extends Disposable {\n\t\t\tprivate readonly _onDidReport = this._register(\n\t\t\t\tnew Emitter<IProgressStep>(),\n\t\t\t);\n\t\t\treadonly onDidReport = this._onDidReport.event;\n\n\t\t\tprivate readonly _onWillDispose = this._register(\n\t\t\t\tnew Emitter<void>(),\n\t\t\t);\n\t\t\treadonly onWillDispose = this._onWillDispose.event;\n\n\t\t\tprivate _step: IProgressStep | undefined = undefined;\n\t\t\tget step() {\n\t\t\t\treturn this._step;\n\t\t\t}\n\n\t\t\tprivate _done = false;\n\t\t\tget done() {\n\t\t\t\treturn this._done;\n\t\t\t}\n\n\t\t\treadonly promise: P;\n\n\t\t\tconstructor() {\n\t\t\t\tsuper();\n\n\t\t\t\tthis.promise = callback(this);\n\n\t\t\t\tthis.promise.finally(() => {\n\t\t\t\t\tthis.dispose();\n\t\t\t\t});\n\t\t\t}\n\n\t\t\treport(step: IProgressStep): void {\n\t\t\t\tthis._step = step;\n\n\t\t\t\tthis._onDidReport.fire(step);\n\t\t\t}\n\n\t\t\tcancel(choice?: number): void {\n\t\t\t\tonDidCancel?.(choice);\n\n\t\t\t\tthis.dispose();\n\t\t\t}\n\n\t\t\toverride dispose(): void {\n\t\t\t\tthis._done = true;\n\t\t\t\tthis._onWillDispose.fire();\n\n\t\t\t\tsuper.dispose();\n\t\t\t}\n\t\t})();\n\n\t\tconst createWindowProgress = () => {\n\t\t\t// Create a promise that we can resolve as needed\n\t\t\t// when the outside calls dispose on us\n\t\t\tconst promise = new DeferredPromise<void>();\n\n\t\t\tthis.withWindowProgress(\n\t\t\t\t{\n\t\t\t\t\tlocation: ProgressLocation.Window,\n\t\t\t\t\ttitle: options.title\n\t\t\t\t\t\t? parseLinkedText(options.title).toString()\n\t\t\t\t\t\t: undefined, // convert markdown links => string\n\t\t\t\t\tcommand: \"notifications.showList\",\n\t\t\t\t\ttype: options.type,\n\t\t\t\t},\n\t\t\t\t(progress) => {\n\t\t\t\t\tfunction reportProgress(step: IProgressStep) {\n\t\t\t\t\t\tif (step.message) {\n\t\t\t\t\t\t\tprogress.report({\n\t\t\t\t\t\t\t\tmessage: parseLinkedText(\n\t\t\t\t\t\t\t\t\tstep.message,\n\t\t\t\t\t\t\t\t).toString(), // convert markdown links => string\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// Apply any progress that was made already\n\t\t\t\t\tif (progressStateModel.step) {\n\t\t\t\t\t\treportProgress(progressStateModel.step);\n\t\t\t\t\t}\n\n\t\t\t\t\t// Continue to report progress as it happens\n\t\t\t\t\tconst onDidReportListener = progressStateModel.onDidReport(\n\t\t\t\t\t\t(step) => reportProgress(step),\n\t\t\t\t\t);\n\t\t\t\t\tpromise.p.finally(() => onDidReportListener.dispose());\n\n\t\t\t\t\t// When the progress model gets disposed, we are done as well\n\t\t\t\t\tEvent.once(progressStateModel.onWillDispose)(() =>\n\t\t\t\t\t\tpromise.complete(),\n\t\t\t\t\t);\n\n\t\t\t\t\treturn promise.p;\n\t\t\t\t},\n\t\t\t);\n\n\t\t\t// Dispose means completing our promise\n\t\t\treturn toDisposable(() => promise.complete());\n\t\t};\n\n\t\tconst createNotification = (\n\t\t\tmessage: string,\n\t\t\tpriority?: NotificationPriority,\n\t\t\tincrement?: number,\n\t\t): INotificationHandle => {\n\t\t\tconst notificationDisposables = new DisposableStore();\n\n\t\t\tconst primaryActions = options.primaryActions\n\t\t\t\t? Array.from(options.primaryActions)\n\t\t\t\t: [];\n\t\t\tconst secondaryActions = options.secondaryActions\n\t\t\t\t? Array.from(options.secondaryActions)\n\t\t\t\t: [];\n\n\t\t\tif (options.buttons) {\n\t\t\t\toptions.buttons.forEach((button, index) => {\n\t\t\t\t\tconst buttonAction = new (class extends Action {\n\t\t\t\t\t\tconstructor() {\n\t\t\t\t\t\t\tsuper(\n\t\t\t\t\t\t\t\t`progress.button.${button}`,\n\t\t\t\t\t\t\t\tbutton,\n\t\t\t\t\t\t\t\tundefined,\n\t\t\t\t\t\t\t\ttrue,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\toverride async run(): Promise<void> {\n\t\t\t\t\t\t\tprogressStateModel.cancel(index);\n\t\t\t\t\t\t}\n\t\t\t\t\t})();\n\t\t\t\t\tnotificationDisposables.add(buttonAction);\n\n\t\t\t\t\tprimaryActions.push(buttonAction);\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tif (options.cancellable) {\n\t\t\t\tconst cancelAction = new (class extends Action {\n\t\t\t\t\tconstructor() {\n\t\t\t\t\t\tsuper(\n\t\t\t\t\t\t\t\"progress.cancel\",\n\t\t\t\t\t\t\tlocalize(\"cancel\", \"Cancel\"),\n\t\t\t\t\t\t\tundefined,\n\t\t\t\t\t\t\ttrue,\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\n\t\t\t\t\toverride async run(): Promise<void> {\n\t\t\t\t\t\tprogressStateModel.cancel();\n\t\t\t\t\t}\n\t\t\t\t})();\n\t\t\t\tnotificationDisposables.add(cancelAction);\n\n\t\t\t\tprimaryActions.push(cancelAction);\n\t\t\t}\n\n\t\t\tconst notification = this.notificationService.notify({\n\t\t\t\tseverity: Severity.Info,\n\t\t\t\tmessage: stripIcons(message), // status entries support codicons, but notifications do not (https://github.com/microsoft/vscode/issues/145722)\n\t\t\t\tsource: options.source,\n\t\t\t\tactions: {\n\t\t\t\t\tprimary: primaryActions,\n\t\t\t\t\tsecondary: secondaryActions,\n\t\t\t\t},\n\t\t\t\tprogress:\n\t\t\t\t\ttypeof increment === \"number\" && increment >= 0\n\t\t\t\t\t\t? { total: 100, worked: increment }\n\t\t\t\t\t\t: { infinite: true },\n\t\t\t\tpriority,\n\t\t\t});\n\n\t\t\t// Switch to window based progress once the notification\n\t\t\t// changes visibility to hidden and is still ongoing.\n\t\t\t// Remove that window based progress once the notification\n\t\t\t// shows again.\n\t\t\tlet windowProgressDisposable: IDisposable | undefined;\n\t\t\tconst onVisibilityChange = (visible: boolean) => {\n\t\t\t\t// Clear any previous running window progress\n\t\t\t\tdispose(windowProgressDisposable);\n\n\t\t\t\t// Create new window progress if notification got hidden\n\t\t\t\tif (!visible && !progressStateModel.done) {\n\t\t\t\t\twindowProgressDisposable = createWindowProgress();\n\t\t\t\t}\n\t\t\t};\n\t\t\tnotificationDisposables.add(\n\t\t\t\tnotification.onDidChangeVisibility(onVisibilityChange),\n\t\t\t);\n\t\t\tif (priority === NotificationPriority.SILENT) {\n\t\t\t\tonVisibilityChange(false);\n\t\t\t}\n\n\t\t\t// Clear upon dispose\n\t\t\tEvent.once(notification.onDidClose)(() =>\n\t\t\t\tnotificationDisposables.dispose(),\n\t\t\t);\n\n\t\t\treturn notification;\n\t\t};\n\n\t\tconst updateProgress = (\n\t\t\tnotification: INotificationHandle,\n\t\t\tincrement?: number,\n\t\t): void => {\n\t\t\tif (typeof increment === \"number\" && increment >= 0) {\n\t\t\t\tnotification.progress.total(100); // always percentage based\n\t\t\t\tnotification.progress.worked(increment);\n\t\t\t} else {\n\t\t\t\tnotification.progress.infinite();\n\t\t\t}\n\t\t};\n\n\t\tlet notificationHandle: INotificationHandle | undefined;\n\t\tlet notificationTimeout: any | undefined;\n\t\tlet titleAndMessage: string | undefined; // hoisted to make sure a delayed notification shows the most recent message\n\n\t\tconst updateNotification = (step?: IProgressStep): void => {\n\t\t\t// full message (inital or update)\n\t\t\tif (step?.message && options.title) {\n\t\t\t\ttitleAndMessage = `${options.title}: ${step.message}`; // always prefix with overall title if we have it (https://github.com/microsoft/vscode/issues/50932)\n\t\t\t} else {\n\t\t\t\ttitleAndMessage = options.title || step?.message;\n\t\t\t}\n\n\t\t\tif (!notificationHandle && titleAndMessage) {\n\t\t\t\t// create notification now or after a delay\n\t\t\t\tif (typeof options.delay === \"number\" && options.delay > 0) {\n\t\t\t\t\tif (typeof notificationTimeout !== \"number\") {\n\t\t\t\t\t\tnotificationTimeout = setTimeout(\n\t\t\t\t\t\t\t() =>\n\t\t\t\t\t\t\t\t(notificationHandle = createNotification(\n\t\t\t\t\t\t\t\t\ttitleAndMessage!,\n\t\t\t\t\t\t\t\t\toptions.priority,\n\t\t\t\t\t\t\t\t\tstep?.increment,\n\t\t\t\t\t\t\t\t)),\n\t\t\t\t\t\t\toptions.delay,\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tnotificationHandle = createNotification(\n\t\t\t\t\t\ttitleAndMessage,\n\t\t\t\t\t\toptions.priority,\n\t\t\t\t\t\tstep?.increment,\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (notificationHandle) {\n\t\t\t\tif (titleAndMessage) {\n\t\t\t\t\tnotificationHandle.updateMessage(titleAndMessage);\n\t\t\t\t}\n\n\t\t\t\tif (typeof step?.increment === \"number\") {\n\t\t\t\t\tupdateProgress(notificationHandle, step.increment);\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\t// Show initially\n\t\tupdateNotification(progressStateModel.step);\n\t\tconst listener = progressStateModel.onDidReport((step) =>\n\t\t\tupdateNotification(step),\n\t\t);\n\t\tEvent.once(progressStateModel.onWillDispose)(() => listener.dispose());\n\n\t\t// Clean up eventually\n\t\t(async () => {\n\t\t\ttry {\n\t\t\t\t// with a delay we only wait for the finish of the promise\n\t\t\t\tif (typeof options.delay === \"number\" && options.delay > 0) {\n\t\t\t\t\tawait progressStateModel.promise;\n\t\t\t\t}\n\n\t\t\t\t// without a delay we show the notification for at least 800ms\n\t\t\t\t// to reduce the chance of the notification flashing up and hiding\n\t\t\t\telse {\n\t\t\t\t\tawait Promise.all([\n\t\t\t\t\t\ttimeout(800),\n\t\t\t\t\t\tprogressStateModel.promise,\n\t\t\t\t\t]);\n\t\t\t\t}\n\t\t\t} finally {\n\t\t\t\tclearTimeout(notificationTimeout);\n\t\t\t\tnotificationHandle?.close();\n\t\t\t}\n\t\t})();\n\n\t\treturn progressStateModel.promise;\n\t}\n\n\tprivate withPaneCompositeProgress<P extends Promise<R>, R = unknown>(\n\t\tpaneCompositeId: string,\n\t\tviewContainerLocation: ViewContainerLocation,\n\t\ttask: (progress: IProgress<IProgressStep>) => P,\n\t\toptions: IProgressCompositeOptions,\n\t): P {\n\t\t// show in viewlet\n\t\tconst progressIndicator =\n\t\t\tthis.paneCompositeService.getProgressIndicator(\n\t\t\t\tpaneCompositeId,\n\t\t\t\tviewContainerLocation,\n\t\t\t);\n\t\tconst promise = progressIndicator\n\t\t\t? this.withCompositeProgress(progressIndicator, task, options)\n\t\t\t: task({ report: () => {} });\n\n\t\t// show on activity bar\n\t\tif (viewContainerLocation === ViewContainerLocation.Sidebar) {\n\t\t\tthis.showOnActivityBar<P, R>(paneCompositeId, options, promise);\n\t\t}\n\n\t\treturn promise;\n\t}\n\n\tprivate withViewProgress<P extends Promise<R>, R = unknown>(\n\t\tviewId: string,\n\t\ttask: (progress: IProgress<IProgressStep>) => P,\n\t\toptions: IProgressCompositeOptions,\n\t): P {\n\t\t// show in viewlet\n\t\tconst progressIndicator =\n\t\t\tthis.viewsService.getViewProgressIndicator(viewId);\n\t\tconst promise = progressIndicator\n\t\t\t? this.withCompositeProgress(progressIndicator, task, options)\n\t\t\t: task({ report: () => {} });\n\n\t\tconst location = this.viewDescriptorService.getViewLocationById(viewId);\n\t\tif (location !== ViewContainerLocation.Sidebar) {\n\t\t\treturn promise;\n\t\t}\n\n\t\tconst viewletId =\n\t\t\tthis.viewDescriptorService.getViewContainerByViewId(viewId)?.id;\n\t\tif (viewletId === undefined) {\n\t\t\treturn promise;\n\t\t}\n\n\t\t// show on activity bar\n\t\tthis.showOnActivityBar(viewletId, options, promise);\n\n\t\treturn promise;\n\t}\n\n\tprivate showOnActivityBar<P extends Promise<R>, R = unknown>(\n\t\tviewletId: string,\n\t\toptions: IProgressCompositeOptions,\n\t\tpromise: P,\n\t): void {\n\t\tlet activityProgress: IDisposable;\n\t\tlet delayHandle: any = setTimeout(() => {\n\t\t\tdelayHandle = undefined;\n\t\t\tconst handle = this.activityService.showViewContainerActivity(\n\t\t\t\tviewletId,\n\t\t\t\t{ badge: new ProgressBadge(() => \"\"), priority: 100 },\n\t\t\t);\n\t\t\tconst startTimeVisible = Date.now();\n\t\t\tconst minTimeVisible = 300;\n\t\t\tactivityProgress = {\n\t\t\t\tdispose() {\n\t\t\t\t\tconst d = Date.now() - startTimeVisible;\n\t\t\t\t\tif (d < minTimeVisible) {\n\t\t\t\t\t\t// should at least show for Nms\n\t\t\t\t\t\tsetTimeout(() => handle.dispose(), minTimeVisible - d);\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// shown long enough\n\t\t\t\t\t\thandle.dispose();\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t};\n\t\t}, options.delay || 300);\n\t\tpromise.finally(() => {\n\t\t\tclearTimeout(delayHandle);\n\t\t\tdispose(activityProgress);\n\t\t});\n\t}\n\n\tprivate withCompositeProgress<P extends Promise<R>, R = unknown>(\n\t\tprogressIndicator: IProgressIndicator,\n\t\ttask: (progress: IProgress<IProgressStep>) => P,\n\t\toptions: IProgressCompositeOptions,\n\t): P {\n\t\tlet discreteProgressRunner: IProgressRunner | undefined;\n\n\t\tfunction updateProgress(\n\t\t\tstepOrTotal: IProgressStep | number | undefined,\n\t\t): IProgressRunner | undefined {\n\t\t\t// Figure out whether discrete progress applies\n\t\t\t// by figuring out the \"total\" progress to show\n\t\t\t// and the increment if any.\n\t\t\tlet total: number | undefined;\n\t\t\tlet increment: number | undefined;\n\t\t\tif (typeof stepOrTotal !== \"undefined\") {\n\t\t\t\tif (typeof stepOrTotal === \"number\") {\n\t\t\t\t\ttotal = stepOrTotal;\n\t\t\t\t} else if (typeof stepOrTotal.increment === \"number\") {\n\t\t\t\t\ttotal = stepOrTotal.total ?? 100; // always percentage based\n\t\t\t\t\tincrement = stepOrTotal.increment;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Discrete\n\t\t\tif (typeof total === \"number\") {\n\t\t\t\tif (!discreteProgressRunner) {\n\t\t\t\t\tdiscreteProgressRunner = progressIndicator.show(\n\t\t\t\t\t\ttotal,\n\t\t\t\t\t\toptions.delay,\n\t\t\t\t\t);\n\t\t\t\t\tpromise\n\t\t\t\t\t\t.catch(() => undefined /* ignore */)\n\t\t\t\t\t\t.finally(() => discreteProgressRunner?.done());\n\t\t\t\t}\n\n\t\t\t\tif (typeof increment === \"number\") {\n\t\t\t\t\tdiscreteProgressRunner.worked(increment);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Infinite\n\t\t\telse {\n\t\t\t\tdiscreteProgressRunner?.done();\n\t\t\t\tprogressIndicator.showWhile(promise, options.delay);\n\t\t\t}\n\n\t\t\treturn discreteProgressRunner;\n\t\t}\n\n\t\tconst promise = task({\n\t\t\treport: (progress) => {\n\t\t\t\tupdateProgress(progress);\n\t\t\t},\n\t\t});\n\n\t\tupdateProgress(options.total);\n\n\t\treturn promise;\n\t}\n\n\tprivate withDialogProgress<P extends Promise<R>, R = unknown>(\n\t\toptions: IProgressDialogOptions,\n\t\ttask: (progress: IProgress<IProgressStep>) => P,\n\t\tonDidCancel?: (choice?: number) => void,\n\t): P {\n\t\tconst disposables = new DisposableStore();\n\n\t\tconst allowableCommands = [\n\t\t\t\"workbench.action.quit\",\n\t\t\t\"workbench.action.reloadWindow\",\n\t\t\t\"copy\",\n\t\t\t\"cut\",\n\t\t\t\"editor.action.clipboardCopyAction\",\n\t\t\t\"editor.action.clipboardCutAction\",\n\t\t];\n\n\t\tlet dialog: Dialog;\n\n\t\tconst createDialog = (message: string) => {\n\t\t\tconst buttons = options.buttons || [];\n\t\t\tif (!options.sticky) {\n\t\t\t\tbuttons.push(\n\t\t\t\t\toptions.cancellable\n\t\t\t\t\t\t? localize(\"cancel\", \"Cancel\")\n\t\t\t\t\t\t: localize(\"dismiss\", \"Dismiss\"),\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tdialog = new Dialog(\n\t\t\t\tthis.layoutService.activeContainer,\n\t\t\t\tmessage,\n\t\t\t\tbuttons,\n\t\t\t\t{\n\t\t\t\t\ttype: \"pending\",\n\t\t\t\t\tdetail: options.detail,\n\t\t\t\t\tcancelId: buttons.length - 1,\n\t\t\t\t\tdisableCloseAction: options.sticky,\n\t\t\t\t\tdisableDefaultAction: options.sticky,\n\t\t\t\t\tkeyEventProcessor: (event: StandardKeyboardEvent) => {\n\t\t\t\t\t\tconst resolved = this.keybindingService.softDispatch(\n\t\t\t\t\t\t\tevent,\n\t\t\t\t\t\t\tthis.layoutService.activeContainer,\n\t\t\t\t\t\t);\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\tresolved.kind === ResultKind.KbFound &&\n\t\t\t\t\t\t\tresolved.commandId\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\t!allowableCommands.includes(resolved.commandId)\n\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\tEventHelper.stop(event, true);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\tbuttonStyles: defaultButtonStyles,\n\t\t\t\t\tcheckboxStyles: defaultCheckboxStyles,\n\t\t\t\t\tinputBoxStyles: defaultInputBoxStyles,\n\t\t\t\t\tdialogStyles: defaultDialogStyles,\n\t\t\t\t},\n\t\t\t);\n\n\t\t\tdisposables.add(dialog);\n\n\t\t\tdialog.show().then((dialogResult) => {\n\t\t\t\tonDidCancel?.(dialogResult.button);\n\n\t\t\t\tdispose(dialog);\n\t\t\t});\n\n\t\t\treturn dialog;\n\t\t};\n\n\t\t// In order to support the `delay` option, we use a scheduler\n\t\t// that will guard each access to the dialog behind a delay\n\t\t// that is either the original delay for one invocation and\n\t\t// otherwise runs without delay.\n\t\tlet delay = options.delay ?? 0;\n\t\tlet latestMessage: string | undefined;\n\t\tconst scheduler = disposables.add(\n\t\t\tnew RunOnceScheduler(() => {\n\t\t\t\tdelay = 0; // since we have run once, we reset the delay\n\n\t\t\t\tif (latestMessage && !dialog) {\n\t\t\t\t\tdialog = createDialog(latestMessage);\n\t\t\t\t} else if (latestMessage) {\n\t\t\t\t\tdialog.updateMessage(latestMessage);\n\t\t\t\t}\n\t\t\t}, 0),\n\t\t);\n\n\t\tconst updateDialog = (message?: string): void => {\n\t\t\tlatestMessage = message;\n\n\t\t\t// Make sure to only run one dialog update and not multiple\n\t\t\tif (!scheduler.isScheduled()) {\n\t\t\t\tscheduler.schedule(delay);\n\t\t\t}\n\t\t};\n\n\t\tconst promise = task({\n\t\t\treport: (progress) => {\n\t\t\t\tupdateDialog(progress.message);\n\t\t\t},\n\t\t});\n\n\t\tpromise.finally(() => {\n\t\t\tdispose(disposables);\n\t\t});\n\n\t\tif (options.title) {\n\t\t\tupdateDialog(options.title);\n\t\t}\n\n\t\treturn promise;\n\t}\n}\n\nregisterSingleton(IProgressService, ProgressService, InstantiationType.Delayed);\n"],
  "mappings": ";;;;;;;;;;;;AAKA,OAAO;AAEP,SAAS,mBAAmB;AAE5B,SAAS,cAAc;AACvB,SAAS,cAAc;AACvB;AAAA,EACC;AAAA,EACA;AAAA,EACA;AAAA,OACM;AACP,SAAS,SAAS,aAAa;AAC/B,SAAS,kBAAkB;AAC3B;AAAA,EACC;AAAA,EACA;AAAA,EAEA;AAAA,EACA;AAAA,OACM;AACP,SAAS,uBAAuB;AAChC,SAAS,gBAAgB;AACzB;AAAA,EACC;AAAA,EACA;AAAA,OACM;AACP,SAAS,0BAA0B;AACnC,SAAS,kBAAkB;AAC3B,SAAS,sBAAsB;AAC/B;AAAA,EAEC;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,OACM;AACP;AAAA,EAQC;AAAA,EAGA;AAAA,EACA;AAAA,OACM;AACP;AAAA,EACC;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,OACM;AACP;AAAA,EACC;AAAA,EACA;AAAA,OACM;AACP;AAAA,EACC;AAAA,EACA;AAAA,OACM;AACP,SAAS,iCAAiC;AAC1C;AAAA,EAGC;AAAA,EACA;AAAA,OACM;AACP,SAAS,4BAA4B;AACrC,SAAS,qBAAqB;AAEvB,IAAM,kBAAN,cAA8B,WAAuC;AAAA,EAG3E,YACoC,iBAElB,sBAEA,uBACe,cAEf,qBACmB,kBACH,eAEhB,mBAEA,qBAChB;AACD,UAAM;AAf6B;AAElB;AAEA;AACe;AAEf;AACmB;AACH;AAEhB;AAEA;AAAA,EAGlB;AAAA,EApGD,OAgF4E;AAAA;AAAA;AAAA,EAsB3E,MAAM,aACL,SACA,cACA,aACa;AACb,UAAM,EAAE,SAAS,IAAI;AAErB,UAAM,OAAO,8BAAO,aAAuC;AAC1D,YAAM,aAAa,KAAK,oBAAoB,WAAW;AAAA,QACtD,aAAa;AAAA,MACd,CAAC;AACD,UAAI;AACH,eAAO,MAAM,aAAa,QAAQ;AAAA,MACnC,UAAE;AACD,mBAAW,QAAQ;AAAA,MACpB;AAAA,IACD,GATa;AAWb,UAAM,uBAAuB,wBAACA,cAAqB;AAClD,YAAM,gBACL,KAAK,sBAAsB,qBAAqBA,SAAQ;AACzD,UAAI,eAAe;AAClB,cAAM,wBACL,KAAK,sBAAsB;AAAA,UAC1B;AAAA,QACD;AACD,YAAI,0BAA0B,MAAM;AACnC,iBAAO,KAAK;AAAA,YACXA;AAAA,YACA;AAAA,YACA;AAAA,YACA,EAAE,GAAG,SAAS,UAAAA,UAAS;AAAA,UACxB;AAAA,QACD;AAAA,MACD;AAEA,UACC,KAAK,sBAAsB,sBAAsBA,SAAQ,MACzD,MACC;AACD,eAAO,KAAK,iBAAiBA,WAAU,MAAM;AAAA,UAC5C,GAAG;AAAA,UACH,UAAAA;AAAA,QACD,CAAC;AAAA,MACF;AAEA,YAAM,IAAI,MAAM,0BAA0BA,SAAQ,EAAE;AAAA,IACrD,GA7B6B;AA+B7B,QAAI,OAAO,aAAa,UAAU;AACjC,aAAO,qBAAqB,QAAQ;AAAA,IACrC;AAEA,YAAQ,UAAU;AAAA,MACjB,KAAK,iBAAiB,cAAc;AACnC,YAAI,WAAY,QACd;AACF,YAAI,aAAa,qBAAqB,QAAQ;AAC7C,cACC,KAAK,oBAAoB,UAAU,MACnC,oBAAoB,OACnB;AACD,uBAAW,qBAAqB;AAAA,UACjC,WACC,qBAAqB,QAAQ,MAAM,KACnC,KAAK,oBAAoB,UAAU,QAAQ,MAAM,MAChD,oBAAoB,OACpB;AACD,uBAAW,qBAAqB;AAAA,UACjC;AAAA,QACD;AAEA,eAAO,KAAK;AAAA,UACX,EAAE,GAAG,SAAS,UAAU,SAAS;AAAA,UACjC;AAAA,UACA;AAAA,QACD;AAAA,MACD;AAAA,MACA,KAAK,iBAAiB,QAAQ;AAC7B,cAAM,OAAQ,QAAmC;AACjD,YAAK,QAAmC,SAAS;AAEhD,iBAAO,KAAK;AAAA,YACX,EAAE,GAAG,SAAS,UAAU,KAAK;AAAA,YAC7B;AAAA,UACD;AAAA,QACD;AAIA,eAAO,KAAK;AAAA,UACX;AAAA,YACC,OAAO;AAAA,YACP,GAAG;AAAA,YACH,UAAU,qBAAqB;AAAA,YAC/B,UAAU,iBAAiB;AAAA,YAC3B;AAAA,UACD;AAAA,UACA;AAAA,UACA;AAAA,QACD;AAAA,MACD;AAAA,MACA,KAAK,iBAAiB;AACrB,eAAO,KAAK;AAAA,UACX;AAAA,UACA,sBAAsB;AAAA,UACtB;AAAA,UACA,EAAE,GAAG,SAAS,SAAS;AAAA,QACxB;AAAA,MACD,KAAK,iBAAiB;AACrB,eAAO,qBAAqB,eAAe;AAAA,MAC5C,KAAK,iBAAiB;AACrB,eAAO,KAAK;AAAA,UACX;AAAA,UACA,sBAAsB;AAAA,UACtB;AAAA,UACA,EAAE,GAAG,SAAS,SAAS;AAAA,QACxB;AAAA,MACD,KAAK,iBAAiB;AACrB,eAAO,KAAK,mBAAmB,SAAS,MAAM,WAAW;AAAA,MAC1D;AACC,cAAM,IAAI,MAAM,0BAA0B,QAAQ,EAAE;AAAA,IACtD;AAAA,EACD;AAAA,EAEiB,sBAGX,CAAC;AAAA,EACC,4BACP;AAAA,EAEO,mBACP,SACA,UACa;AACb,UAAM,OAA0D;AAAA,MAC/D;AAAA,MACA,IAAI,SAAwB,MAAM,KAAK,qBAAqB,CAAC;AAAA,IAC9D;AAEA,UAAM,UAAU,SAAS,KAAK,CAAC,CAAC;AAEhC,QAAI,cAAmB,WAAW,MAAM;AACvC,oBAAc;AACd,WAAK,oBAAoB,QAAQ,IAAI;AACrC,WAAK,qBAAqB;AAG1B,cAAQ,IAAI,CAAC,QAAQ,GAAG,GAAG,OAAO,CAAC,EAAE,QAAQ,MAAM;AAClD,cAAM,MAAM,KAAK,oBAAoB,QAAQ,IAAI;AACjD,aAAK,oBAAoB,OAAO,KAAK,CAAC;AACtC,aAAK,qBAAqB;AAAA,MAC3B,CAAC;AAAA,IACF,GAAG,GAAG;AAGN,WAAO,QAAQ,QAAQ,MAAM,aAAa,WAAW,CAAC;AAAA,EACvD;AAAA,EAEQ,qBAAqB,MAAM,GAAG;AAErC,QAAI,MAAM,KAAK,oBAAoB,QAAQ;AAC1C,YAAM,CAAC,SAAS,QAAQ,IAAI,KAAK,oBAAoB,GAAG;AAExD,YAAM,gBAAgB,QAAQ;AAC9B,YAAM,kBAAkB,SAAS,SAAS,SAAS,MAAM;AACzD,YAAM,kBAA2C,QAAS;AAC1D,UAAI;AACJ,UAAI;AACJ,YAAM,SACL,QAAQ,UAAU,OAAO,QAAQ,WAAW,WACzC,QAAQ,OAAO,QACf,QAAQ;AAEZ,UAAI,iBAAiB,iBAAiB;AAErC,eAAO;AAAA,UACN;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,QACD;AACA,gBAAQ,SACL;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,QACD,IACC;AAAA,MACJ,WAAW,eAAe;AAEzB,eAAO;AACP,gBAAQ,SACL;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,QACD,IACC;AAAA,MACJ,WAAW,iBAAiB;AAE3B,eAAO;AACP,gBAAQ,SACL;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,QACD,IACC;AAAA,MACJ,OAAO;AAEN,aAAK,qBAAqB,MAAM,CAAC;AACjC;AAAA,MACD;AAEA,YAAM,wBAAyC;AAAA,QAC9C,MAAM,SAAS,mBAAmB,kBAAkB;AAAA,QACpD;AAAA,QACA,cAAc,QAAQ,QAAQ;AAAA,QAC9B,WAAW;AAAA,QACX,SAAS;AAAA,QACT,SAAS;AAAA,MACV;AAEA,UAAI,KAAK,2BAA2B;AACnC,aAAK,0BAA0B,OAAO,qBAAqB;AAAA,MAC5D,OAAO;AACN,aAAK,4BAA4B,KAAK,iBAAiB;AAAA,UACtD;AAAA,UACA;AAAA,UACA,mBAAmB;AAAA,QACpB;AAAA,MACD;AAAA,IACD,OAGK;AACJ,WAAK,2BAA2B,QAAQ;AACxC,WAAK,4BAA4B;AAAA,IAClC;AAAA,EACD;AAAA,EAEQ,yBACP,SACA,UACA,aACI;AACJ,UAAM,qBAAqB,IAAK,cAAc,WAAW;AAAA,MACvC,eAAe,KAAK;AAAA,QACpC,IAAI,QAAuB;AAAA,MAC5B;AAAA,MACS,cAAc,KAAK,aAAa;AAAA,MAExB,iBAAiB,KAAK;AAAA,QACtC,IAAI,QAAc;AAAA,MACnB;AAAA,MACS,gBAAgB,KAAK,eAAe;AAAA,MAErC,QAAmC;AAAA,MAC3C,IAAI,OAAO;AACV,eAAO,KAAK;AAAA,MACb;AAAA,MAEQ,QAAQ;AAAA,MAChB,IAAI,OAAO;AACV,eAAO,KAAK;AAAA,MACb;AAAA,MAES;AAAA,MAET,cAAc;AACb,cAAM;AAEN,aAAK,UAAU,SAAS,IAAI;AAE5B,aAAK,QAAQ,QAAQ,MAAM;AAC1B,eAAK,QAAQ;AAAA,QACd,CAAC;AAAA,MACF;AAAA,MAEA,OAAO,MAA2B;AACjC,aAAK,QAAQ;AAEb,aAAK,aAAa,KAAK,IAAI;AAAA,MAC5B;AAAA,MAEA,OAAO,QAAuB;AAC7B,sBAAc,MAAM;AAEpB,aAAK,QAAQ;AAAA,MACd;AAAA,MAES,UAAgB;AACxB,aAAK,QAAQ;AACb,aAAK,eAAe,KAAK;AAEzB,cAAM,QAAQ;AAAA,MACf;AAAA,IACD,EAAG;AAEH,UAAM,uBAAuB,6BAAM;AAGlC,YAAM,UAAU,IAAI,gBAAsB;AAE1C,WAAK;AAAA,QACJ;AAAA,UACC,UAAU,iBAAiB;AAAA,UAC3B,OAAO,QAAQ,QACZ,gBAAgB,QAAQ,KAAK,EAAE,SAAS,IACxC;AAAA;AAAA,UACH,SAAS;AAAA,UACT,MAAM,QAAQ;AAAA,QACf;AAAA,QACA,CAAC,aAAa;AACb,mBAAS,eAAe,MAAqB;AAC5C,gBAAI,KAAK,SAAS;AACjB,uBAAS,OAAO;AAAA,gBACf,SAAS;AAAA,kBACR,KAAK;AAAA,gBACN,EAAE,SAAS;AAAA;AAAA,cACZ,CAAC;AAAA,YACF;AAAA,UACD;AARS;AAWT,cAAI,mBAAmB,MAAM;AAC5B,2BAAe,mBAAmB,IAAI;AAAA,UACvC;AAGA,gBAAM,sBAAsB,mBAAmB;AAAA,YAC9C,CAAC,SAAS,eAAe,IAAI;AAAA,UAC9B;AACA,kBAAQ,EAAE,QAAQ,MAAM,oBAAoB,QAAQ,CAAC;AAGrD,gBAAM,KAAK,mBAAmB,aAAa;AAAA,YAAE,MAC5C,QAAQ,SAAS;AAAA,UAClB;AAEA,iBAAO,QAAQ;AAAA,QAChB;AAAA,MACD;AAGA,aAAO,aAAa,MAAM,QAAQ,SAAS,CAAC;AAAA,IAC7C,GA/C6B;AAiD7B,UAAM,qBAAqB,wBAC1B,SACA,UACA,cACyB;AACzB,YAAM,0BAA0B,IAAI,gBAAgB;AAEpD,YAAM,iBAAiB,QAAQ,iBAC5B,MAAM,KAAK,QAAQ,cAAc,IACjC,CAAC;AACJ,YAAM,mBAAmB,QAAQ,mBAC9B,MAAM,KAAK,QAAQ,gBAAgB,IACnC,CAAC;AAEJ,UAAI,QAAQ,SAAS;AACpB,gBAAQ,QAAQ,QAAQ,CAAC,QAAQ,UAAU;AAC1C,gBAAM,eAAe,IAAK,cAAc,OAAO;AAAA,YAC9C,cAAc;AACb;AAAA,gBACC,mBAAmB,MAAM;AAAA,gBACzB;AAAA,gBACA;AAAA,gBACA;AAAA,cACD;AAAA,YACD;AAAA,YAEA,MAAe,MAAqB;AACnC,iCAAmB,OAAO,KAAK;AAAA,YAChC;AAAA,UACD,EAAG;AACH,kCAAwB,IAAI,YAAY;AAExC,yBAAe,KAAK,YAAY;AAAA,QACjC,CAAC;AAAA,MACF;AAEA,UAAI,QAAQ,aAAa;AACxB,cAAM,eAAe,IAAK,cAAc,OAAO;AAAA,UAC9C,cAAc;AACb;AAAA,cACC;AAAA,cACA,SAAS,UAAU,QAAQ;AAAA,cAC3B;AAAA,cACA;AAAA,YACD;AAAA,UACD;AAAA,UAEA,MAAe,MAAqB;AACnC,+BAAmB,OAAO;AAAA,UAC3B;AAAA,QACD,EAAG;AACH,gCAAwB,IAAI,YAAY;AAExC,uBAAe,KAAK,YAAY;AAAA,MACjC;AAEA,YAAM,eAAe,KAAK,oBAAoB,OAAO;AAAA,QACpD,UAAU,SAAS;AAAA,QACnB,SAAS,WAAW,OAAO;AAAA;AAAA,QAC3B,QAAQ,QAAQ;AAAA,QAChB,SAAS;AAAA,UACR,SAAS;AAAA,UACT,WAAW;AAAA,QACZ;AAAA,QACA,UACC,OAAO,cAAc,YAAY,aAAa,IAC3C,EAAE,OAAO,KAAK,QAAQ,UAAU,IAChC,EAAE,UAAU,KAAK;AAAA,QACrB;AAAA,MACD,CAAC;AAMD,UAAI;AACJ,YAAM,qBAAqB,wBAAC,YAAqB;AAEhD,gBAAQ,wBAAwB;AAGhC,YAAI,CAAC,WAAW,CAAC,mBAAmB,MAAM;AACzC,qCAA2B,qBAAqB;AAAA,QACjD;AAAA,MACD,GAR2B;AAS3B,8BAAwB;AAAA,QACvB,aAAa,sBAAsB,kBAAkB;AAAA,MACtD;AACA,UAAI,aAAa,qBAAqB,QAAQ;AAC7C,2BAAmB,KAAK;AAAA,MACzB;AAGA,YAAM,KAAK,aAAa,UAAU;AAAA,QAAE,MACnC,wBAAwB,QAAQ;AAAA,MACjC;AAEA,aAAO;AAAA,IACR,GAlG2B;AAoG3B,UAAM,iBAAiB,wBACtB,cACA,cACU;AACV,UAAI,OAAO,cAAc,YAAY,aAAa,GAAG;AACpD,qBAAa,SAAS,MAAM,GAAG;AAC/B,qBAAa,SAAS,OAAO,SAAS;AAAA,MACvC,OAAO;AACN,qBAAa,SAAS,SAAS;AAAA,MAChC;AAAA,IACD,GAVuB;AAYvB,QAAI;AACJ,QAAI;AACJ,QAAI;AAEJ,UAAM,qBAAqB,wBAAC,SAA+B;AAE1D,UAAI,MAAM,WAAW,QAAQ,OAAO;AACnC,0BAAkB,GAAG,QAAQ,KAAK,KAAK,KAAK,OAAO;AAAA,MACpD,OAAO;AACN,0BAAkB,QAAQ,SAAS,MAAM;AAAA,MAC1C;AAEA,UAAI,CAAC,sBAAsB,iBAAiB;AAE3C,YAAI,OAAO,QAAQ,UAAU,YAAY,QAAQ,QAAQ,GAAG;AAC3D,cAAI,OAAO,wBAAwB,UAAU;AAC5C,kCAAsB;AAAA,cACrB,MACE,qBAAqB;AAAA,gBACrB;AAAA,gBACA,QAAQ;AAAA,gBACR,MAAM;AAAA,cACP;AAAA,cACD,QAAQ;AAAA,YACT;AAAA,UACD;AAAA,QACD,OAAO;AACN,+BAAqB;AAAA,YACpB;AAAA,YACA,QAAQ;AAAA,YACR,MAAM;AAAA,UACP;AAAA,QACD;AAAA,MACD;AAEA,UAAI,oBAAoB;AACvB,YAAI,iBAAiB;AACpB,6BAAmB,cAAc,eAAe;AAAA,QACjD;AAEA,YAAI,OAAO,MAAM,cAAc,UAAU;AACxC,yBAAe,oBAAoB,KAAK,SAAS;AAAA,QAClD;AAAA,MACD;AAAA,IACD,GAxC2B;AA2C3B,uBAAmB,mBAAmB,IAAI;AAC1C,UAAM,WAAW,mBAAmB;AAAA,MAAY,CAAC,SAChD,mBAAmB,IAAI;AAAA,IACxB;AACA,UAAM,KAAK,mBAAmB,aAAa,EAAE,MAAM,SAAS,QAAQ,CAAC;AAGrE,KAAC,YAAY;AACZ,UAAI;AAEH,YAAI,OAAO,QAAQ,UAAU,YAAY,QAAQ,QAAQ,GAAG;AAC3D,gBAAM,mBAAmB;AAAA,QAC1B,OAIK;AACJ,gBAAM,QAAQ,IAAI;AAAA,YACjB,QAAQ,GAAG;AAAA,YACX,mBAAmB;AAAA,UACpB,CAAC;AAAA,QACF;AAAA,MACD,UAAE;AACD,qBAAa,mBAAmB;AAChC,4BAAoB,MAAM;AAAA,MAC3B;AAAA,IACD,GAAG;AAEH,WAAO,mBAAmB;AAAA,EAC3B;AAAA,EAEQ,0BACP,iBACA,uBACA,MACA,SACI;AAEJ,UAAM,oBACL,KAAK,qBAAqB;AAAA,MACzB;AAAA,MACA;AAAA,IACD;AACD,UAAM,UAAU,oBACb,KAAK,sBAAsB,mBAAmB,MAAM,OAAO,IAC3D,KAAK,EAAE,QAAQ,6BAAM;AAAA,IAAC,GAAP,UAAS,CAAC;AAG5B,QAAI,0BAA0B,sBAAsB,SAAS;AAC5D,WAAK,kBAAwB,iBAAiB,SAAS,OAAO;AAAA,IAC/D;AAEA,WAAO;AAAA,EACR;AAAA,EAEQ,iBACP,QACA,MACA,SACI;AAEJ,UAAM,oBACL,KAAK,aAAa,yBAAyB,MAAM;AAClD,UAAM,UAAU,oBACb,KAAK,sBAAsB,mBAAmB,MAAM,OAAO,IAC3D,KAAK,EAAE,QAAQ,6BAAM;AAAA,IAAC,GAAP,UAAS,CAAC;AAE5B,UAAM,WAAW,KAAK,sBAAsB,oBAAoB,MAAM;AACtE,QAAI,aAAa,sBAAsB,SAAS;AAC/C,aAAO;AAAA,IACR;AAEA,UAAM,YACL,KAAK,sBAAsB,yBAAyB,MAAM,GAAG;AAC9D,QAAI,cAAc,QAAW;AAC5B,aAAO;AAAA,IACR;AAGA,SAAK,kBAAkB,WAAW,SAAS,OAAO;AAElD,WAAO;AAAA,EACR;AAAA,EAEQ,kBACP,WACA,SACA,SACO;AACP,QAAI;AACJ,QAAI,cAAmB,WAAW,MAAM;AACvC,oBAAc;AACd,YAAM,SAAS,KAAK,gBAAgB;AAAA,QACnC;AAAA,QACA,EAAE,OAAO,IAAI,cAAc,MAAM,EAAE,GAAG,UAAU,IAAI;AAAA,MACrD;AACA,YAAM,mBAAmB,KAAK,IAAI;AAClC,YAAM,iBAAiB;AACvB,yBAAmB;AAAA,QAClB,UAAU;AACT,gBAAM,IAAI,KAAK,IAAI,IAAI;AACvB,cAAI,IAAI,gBAAgB;AAEvB,uBAAW,MAAM,OAAO,QAAQ,GAAG,iBAAiB,CAAC;AAAA,UACtD,OAAO;AAEN,mBAAO,QAAQ;AAAA,UAChB;AAAA,QACD;AAAA,MACD;AAAA,IACD,GAAG,QAAQ,SAAS,GAAG;AACvB,YAAQ,QAAQ,MAAM;AACrB,mBAAa,WAAW;AACxB,cAAQ,gBAAgB;AAAA,IACzB,CAAC;AAAA,EACF;AAAA,EAEQ,sBACP,mBACA,MACA,SACI;AACJ,QAAI;AAEJ,aAAS,eACR,aAC8B;AAI9B,UAAI;AACJ,UAAI;AACJ,UAAI,OAAO,gBAAgB,aAAa;AACvC,YAAI,OAAO,gBAAgB,UAAU;AACpC,kBAAQ;AAAA,QACT,WAAW,OAAO,YAAY,cAAc,UAAU;AACrD,kBAAQ,YAAY,SAAS;AAC7B,sBAAY,YAAY;AAAA,QACzB;AAAA,MACD;AAGA,UAAI,OAAO,UAAU,UAAU;AAC9B,YAAI,CAAC,wBAAwB;AAC5B,mCAAyB,kBAAkB;AAAA,YAC1C;AAAA,YACA,QAAQ;AAAA,UACT;AACA,kBACE;AAAA,YAAM,MAAM;AAAA;AAAA,UAAsB,EAClC,QAAQ,MAAM,wBAAwB,KAAK,CAAC;AAAA,QAC/C;AAEA,YAAI,OAAO,cAAc,UAAU;AAClC,iCAAuB,OAAO,SAAS;AAAA,QACxC;AAAA,MACD,OAGK;AACJ,gCAAwB,KAAK;AAC7B,0BAAkB,UAAU,SAAS,QAAQ,KAAK;AAAA,MACnD;AAEA,aAAO;AAAA,IACR;AAzCS;AA2CT,UAAM,UAAU,KAAK;AAAA,MACpB,QAAQ,wBAAC,aAAa;AACrB,uBAAe,QAAQ;AAAA,MACxB,GAFQ;AAAA,IAGT,CAAC;AAED,mBAAe,QAAQ,KAAK;AAE5B,WAAO;AAAA,EACR;AAAA,EAEQ,mBACP,SACA,MACA,aACI;AACJ,UAAM,cAAc,IAAI,gBAAgB;AAExC,UAAM,oBAAoB;AAAA,MACzB;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACD;AAEA,QAAI;AAEJ,UAAM,eAAe,wBAAC,YAAoB;AACzC,YAAM,UAAU,QAAQ,WAAW,CAAC;AACpC,UAAI,CAAC,QAAQ,QAAQ;AACpB,gBAAQ;AAAA,UACP,QAAQ,cACL,SAAS,UAAU,QAAQ,IAC3B,SAAS,WAAW,SAAS;AAAA,QACjC;AAAA,MACD;AAEA,eAAS,IAAI;AAAA,QACZ,KAAK,cAAc;AAAA,QACnB;AAAA,QACA;AAAA,QACA;AAAA,UACC,MAAM;AAAA,UACN,QAAQ,QAAQ;AAAA,UAChB,UAAU,QAAQ,SAAS;AAAA,UAC3B,oBAAoB,QAAQ;AAAA,UAC5B,sBAAsB,QAAQ;AAAA,UAC9B,mBAAmB,wBAAC,UAAiC;AACpD,kBAAM,WAAW,KAAK,kBAAkB;AAAA,cACvC;AAAA,cACA,KAAK,cAAc;AAAA,YACpB;AACA,gBACC,SAAS,SAAS,WAAW,WAC7B,SAAS,WACR;AACD,kBACC,CAAC,kBAAkB,SAAS,SAAS,SAAS,GAC7C;AACD,4BAAY,KAAK,OAAO,IAAI;AAAA,cAC7B;AAAA,YACD;AAAA,UACD,GAfmB;AAAA,UAgBnB,cAAc;AAAA,UACd,gBAAgB;AAAA,UAChB,gBAAgB;AAAA,UAChB,cAAc;AAAA,QACf;AAAA,MACD;AAEA,kBAAY,IAAI,MAAM;AAEtB,aAAO,KAAK,EAAE,KAAK,CAAC,iBAAiB;AACpC,sBAAc,aAAa,MAAM;AAEjC,gBAAQ,MAAM;AAAA,MACf,CAAC;AAED,aAAO;AAAA,IACR,GApDqB;AA0DrB,QAAI,QAAQ,QAAQ,SAAS;AAC7B,QAAI;AACJ,UAAM,YAAY,YAAY;AAAA,MAC7B,IAAI,iBAAiB,MAAM;AAC1B,gBAAQ;AAER,YAAI,iBAAiB,CAAC,QAAQ;AAC7B,mBAAS,aAAa,aAAa;AAAA,QACpC,WAAW,eAAe;AACzB,iBAAO,cAAc,aAAa;AAAA,QACnC;AAAA,MACD,GAAG,CAAC;AAAA,IACL;AAEA,UAAM,eAAe,wBAAC,YAA2B;AAChD,sBAAgB;AAGhB,UAAI,CAAC,UAAU,YAAY,GAAG;AAC7B,kBAAU,SAAS,KAAK;AAAA,MACzB;AAAA,IACD,GAPqB;AASrB,UAAM,UAAU,KAAK;AAAA,MACpB,QAAQ,wBAAC,aAAa;AACrB,qBAAa,SAAS,OAAO;AAAA,MAC9B,GAFQ;AAAA,IAGT,CAAC;AAED,YAAQ,QAAQ,MAAM;AACrB,cAAQ,WAAW;AAAA,IACpB,CAAC;AAED,QAAI,QAAQ,OAAO;AAClB,mBAAa,QAAQ,KAAK;AAAA,IAC3B;AAEA,WAAO;AAAA,EACR;AACD;AA5zBa,kBAAN;AAAA,EAIJ;AAAA,EACA;AAAA,EAEA;AAAA,EAEA;AAAA,EACA;AAAA,EAEA;AAAA,EACA;AAAA,EACA;AAAA,EAEA;AAAA,GAhBU;AA8zBb,kBAAkB,kBAAkB,iBAAiB,kBAAkB,OAAO;",
  "names": ["location"]
}
