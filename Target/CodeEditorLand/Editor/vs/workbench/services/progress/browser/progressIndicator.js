import{Emitter as l}from"../../../../base/common/event.js";import{Disposable as p}from"../../../../base/common/lifecycle.js";import{emptyProgressRunner as u}from"../../../../platform/progress/common/progress.js";import{GroupModelChangeKind as h}from"../../../common/editor.js";class W extends p{constructor(e,r){super();this.progressBar=e;this.group=r;this.registerListeners()}registerListeners(){this._register(this.group.onDidModelChange(e=>{(e.kind===h.EDITOR_ACTIVE||e.kind===h.EDITOR_CLOSE&&this.group.isEmpty)&&this.progressBar.stop().hide()}))}show(e,r){return this.group.isEmpty?u:e===!0?this.doShow(!0,r):this.doShow(e,r)}doShow(e,r){return typeof e=="boolean"?this.progressBar.infinite().show(r):this.progressBar.total(e).show(r),{total:t=>{this.progressBar.total(t)},worked:t=>{this.progressBar.hasTotal()?this.progressBar.worked(t):this.progressBar.infinite().show()},done:()=>{this.progressBar.stop().hide()}}}async showWhile(e,r){if(this.group.isEmpty)try{await e}catch{}return this.doShowWhile(e,r)}async doShowWhile(e,r){try{this.progressBar.infinite().show(r),await e}catch{}finally{this.progressBar.stop().hide()}}}var s;(n=>{let i;(o=>(o[o.None=0]="None",o[o.Done=1]="Done",o[o.Infinite=2]="Infinite",o[o.While=3]="While",o[o.Work=4]="Work"))(i=n.Type||={}),n.None={type:0},n.Done={type:1},n.Infinite={type:2};class t{constructor(d,c,S){this.whilePromise=d;this.whileStart=c;this.whileDelay=S}type=3}n.While=t;class f{constructor(d,c){this.total=d;this.worked=c}type=4}n.Work=f})(s||={});class _ extends p{constructor(e,r){super();this.progressBar=e;this.scope=r;this.registerListeners()}progressState=s.None;registerListeners(){this._register(this.scope.onDidChangeActive(()=>{this.scope.isActive?this.onDidScopeActivate():this.onDidScopeDeactivate()}))}onDidScopeActivate(){if(this.progressState.type!==s.Done.type)if(this.progressState.type===3){let e;if(this.progressState.whileDelay>0){const r=this.progressState.whileDelay-(Date.now()-this.progressState.whileStart);r>0&&(e=r)}this.doShowWhile(e)}else this.progressState.type===2?this.progressBar.infinite().show():this.progressState.type===4&&(this.progressState.total&&this.progressBar.total(this.progressState.total).show(),this.progressState.worked&&this.progressBar.worked(this.progressState.worked).show())}onDidScopeDeactivate(){this.progressBar.stop().hide()}show(e,r){return typeof e=="boolean"?this.progressState=s.Infinite:this.progressState=new s.Work(e,void 0),this.scope.isActive&&(this.progressState.type===2?this.progressBar.infinite().show(r):this.progressState.type===4&&typeof this.progressState.total=="number"&&this.progressBar.total(this.progressState.total).show(r)),{total:t=>{this.progressState=new s.Work(t,this.progressState.type===4?this.progressState.worked:void 0),this.scope.isActive&&this.progressBar.total(t)},worked:t=>{!this.scope.isActive||this.progressBar.hasTotal()?(this.progressState=new s.Work(this.progressState.type===4?this.progressState.total:void 0,this.progressState.type===4&&typeof this.progressState.worked=="number"?this.progressState.worked+t:t),this.scope.isActive&&this.progressBar.worked(t)):(this.progressState=s.Infinite,this.progressBar.infinite().show())},done:()=>{this.progressState=s.Done,this.scope.isActive&&this.progressBar.stop().hide()}}}async showWhile(e,r){this.progressState.type===3&&(e=Promise.all([e,this.progressState.whilePromise])),this.progressState=new s.While(e,r||0,Date.now());try{this.doShowWhile(r),await e}catch{}finally{(this.progressState.type!==3||this.progressState.whilePromise===e)&&(this.progressState=s.None,this.scope.isActive&&this.progressBar.stop().hide())}}doShowWhile(e){this.scope.isActive&&this.progressBar.infinite().show(e)}}class x extends p{constructor(e,r){super();this.scopeId=e;this._isActive=r}_onDidChangeActive=this._register(new l);onDidChangeActive=this._onDidChangeActive.event;get isActive(){return this._isActive}onScopeOpened(e){e===this.scopeId&&(this._isActive||(this._isActive=!0,this._onDidChangeActive.fire()))}onScopeClosed(e){e===this.scopeId&&this._isActive&&(this._isActive=!1,this._onDidChangeActive.fire())}}export{x as AbstractProgressScope,W as EditorProgressIndicator,_ as ScopedProgressIndicator};
