{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/progress/browser/progressIndicator.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport type { ProgressBar } from \"../../../../base/browser/ui/progressbar/progressbar.js\";\nimport { Emitter, type Event } from \"../../../../base/common/event.js\";\nimport { Disposable } from \"../../../../base/common/lifecycle.js\";\nimport {\n\ttype IProgressIndicator,\n\ttype IProgressRunner,\n\temptyProgressRunner,\n} from \"../../../../platform/progress/common/progress.js\";\nimport type { IEditorGroupView } from \"../../../browser/parts/editor/editor.js\";\nimport { GroupModelChangeKind } from \"../../../common/editor.js\";\n\nexport class EditorProgressIndicator\n\textends Disposable\n\timplements IProgressIndicator\n{\n\tconstructor(\n\t\tprivate readonly progressBar: ProgressBar,\n\t\tprivate readonly group: IEditorGroupView,\n\t) {\n\t\tsuper();\n\n\t\tthis.registerListeners();\n\t}\n\n\tprivate registerListeners() {\n\t\t// Stop any running progress when the active editor changes or\n\t\t// the group becomes empty.\n\t\t// In contrast to the composite progress indicator, we do not\n\t\t// track active editor progress and replay it later (yet).\n\t\tthis._register(\n\t\t\tthis.group.onDidModelChange((e) => {\n\t\t\t\tif (\n\t\t\t\t\te.kind === GroupModelChangeKind.EDITOR_ACTIVE ||\n\t\t\t\t\t(e.kind === GroupModelChangeKind.EDITOR_CLOSE &&\n\t\t\t\t\t\tthis.group.isEmpty)\n\t\t\t\t) {\n\t\t\t\t\tthis.progressBar.stop().hide();\n\t\t\t\t}\n\t\t\t}),\n\t\t);\n\t}\n\n\tshow(infinite: true, delay?: number): IProgressRunner;\n\tshow(total: number, delay?: number): IProgressRunner;\n\tshow(infiniteOrTotal: true | number, delay?: number): IProgressRunner {\n\t\t// No editor open: ignore any progress reporting\n\t\tif (this.group.isEmpty) {\n\t\t\treturn emptyProgressRunner;\n\t\t}\n\n\t\tif (infiniteOrTotal === true) {\n\t\t\treturn this.doShow(true, delay);\n\t\t}\n\n\t\treturn this.doShow(infiniteOrTotal, delay);\n\t}\n\n\tprivate doShow(infinite: true, delay?: number): IProgressRunner;\n\tprivate doShow(total: number, delay?: number): IProgressRunner;\n\tprivate doShow(\n\t\tinfiniteOrTotal: true | number,\n\t\tdelay?: number,\n\t): IProgressRunner {\n\t\tif (typeof infiniteOrTotal === \"boolean\") {\n\t\t\tthis.progressBar.infinite().show(delay);\n\t\t} else {\n\t\t\tthis.progressBar.total(infiniteOrTotal).show(delay);\n\t\t}\n\n\t\treturn {\n\t\t\ttotal: (total: number) => {\n\t\t\t\tthis.progressBar.total(total);\n\t\t\t},\n\n\t\t\tworked: (worked: number) => {\n\t\t\t\tif (this.progressBar.hasTotal()) {\n\t\t\t\t\tthis.progressBar.worked(worked);\n\t\t\t\t} else {\n\t\t\t\t\tthis.progressBar.infinite().show();\n\t\t\t\t}\n\t\t\t},\n\n\t\t\tdone: () => {\n\t\t\t\tthis.progressBar.stop().hide();\n\t\t\t},\n\t\t};\n\t}\n\n\tasync showWhile(promise: Promise<unknown>, delay?: number): Promise<void> {\n\t\t// No editor open: ignore any progress reporting\n\t\tif (this.group.isEmpty) {\n\t\t\ttry {\n\t\t\t\tawait promise;\n\t\t\t} catch (error) {\n\t\t\t\t// ignore\n\t\t\t}\n\t\t}\n\n\t\treturn this.doShowWhile(promise, delay);\n\t}\n\n\tprivate async doShowWhile(\n\t\tpromise: Promise<unknown>,\n\t\tdelay?: number,\n\t): Promise<void> {\n\t\ttry {\n\t\t\tthis.progressBar.infinite().show(delay);\n\n\t\t\tawait promise;\n\t\t} catch (error) {\n\t\t\t// ignore\n\t\t} finally {\n\t\t\tthis.progressBar.stop().hide();\n\t\t}\n\t}\n}\n\nnamespace ProgressIndicatorState {\n\texport enum Type {\n\t\tNone = 0,\n\t\tDone = 1,\n\t\tInfinite = 2,\n\t\tWhile = 3,\n\t\tWork = 4,\n\t}\n\n\texport const None = { type: Type.None } as const;\n\texport const Done = { type: Type.Done } as const;\n\texport const Infinite = { type: Type.Infinite } as const;\n\n\texport class While {\n\t\treadonly type = Type.While;\n\n\t\tconstructor(\n\t\t\treadonly whilePromise: Promise<unknown>,\n\t\t\treadonly whileStart: number,\n\t\t\treadonly whileDelay: number,\n\t\t) {}\n\t}\n\n\texport class Work {\n\t\treadonly type = Type.Work;\n\n\t\tconstructor(\n\t\t\treadonly total: number | undefined,\n\t\t\treadonly worked: number | undefined,\n\t\t) {}\n\t}\n\n\texport type State =\n\t\t| typeof None\n\t\t| typeof Done\n\t\t| typeof Infinite\n\t\t| While\n\t\t| Work;\n}\n\nexport interface IProgressScope {\n\t/**\n\t * Fired whenever `isActive` value changed.\n\t */\n\treadonly onDidChangeActive: Event<void>;\n\n\t/**\n\t * Whether progress should be active or not.\n\t */\n\treadonly isActive: boolean;\n}\n\nexport class ScopedProgressIndicator\n\textends Disposable\n\timplements IProgressIndicator\n{\n\tprivate progressState: ProgressIndicatorState.State =\n\t\tProgressIndicatorState.None;\n\n\tconstructor(\n\t\tprivate readonly progressBar: ProgressBar,\n\t\tprivate readonly scope: IProgressScope,\n\t) {\n\t\tsuper();\n\n\t\tthis.registerListeners();\n\t}\n\n\tregisterListeners() {\n\t\tthis._register(\n\t\t\tthis.scope.onDidChangeActive(() => {\n\t\t\t\tif (this.scope.isActive) {\n\t\t\t\t\tthis.onDidScopeActivate();\n\t\t\t\t} else {\n\t\t\t\t\tthis.onDidScopeDeactivate();\n\t\t\t\t}\n\t\t\t}),\n\t\t);\n\t}\n\n\tprivate onDidScopeActivate(): void {\n\t\t// Return early if progress state indicates that progress is done\n\t\tif (this.progressState.type === ProgressIndicatorState.Done.type) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Replay Infinite Progress from Promise\n\t\tif (this.progressState.type === ProgressIndicatorState.Type.While) {\n\t\t\tlet delay: number | undefined;\n\t\t\tif (this.progressState.whileDelay > 0) {\n\t\t\t\tconst remainingDelay =\n\t\t\t\t\tthis.progressState.whileDelay -\n\t\t\t\t\t(Date.now() - this.progressState.whileStart);\n\t\t\t\tif (remainingDelay > 0) {\n\t\t\t\t\tdelay = remainingDelay;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.doShowWhile(delay);\n\t\t}\n\n\t\t// Replay Infinite Progress\n\t\telse if (\n\t\t\tthis.progressState.type === ProgressIndicatorState.Type.Infinite\n\t\t) {\n\t\t\tthis.progressBar.infinite().show();\n\t\t}\n\n\t\t// Replay Finite Progress (Total & Worked)\n\t\telse if (this.progressState.type === ProgressIndicatorState.Type.Work) {\n\t\t\tif (this.progressState.total) {\n\t\t\t\tthis.progressBar.total(this.progressState.total).show();\n\t\t\t}\n\n\t\t\tif (this.progressState.worked) {\n\t\t\t\tthis.progressBar.worked(this.progressState.worked).show();\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate onDidScopeDeactivate(): void {\n\t\tthis.progressBar.stop().hide();\n\t}\n\n\tshow(infinite: true, delay?: number): IProgressRunner;\n\tshow(total: number, delay?: number): IProgressRunner;\n\tshow(infiniteOrTotal: true | number, delay?: number): IProgressRunner {\n\t\t// Sort out Arguments\n\t\tif (typeof infiniteOrTotal === \"boolean\") {\n\t\t\tthis.progressState = ProgressIndicatorState.Infinite;\n\t\t} else {\n\t\t\tthis.progressState = new ProgressIndicatorState.Work(\n\t\t\t\tinfiniteOrTotal,\n\t\t\t\tundefined,\n\t\t\t);\n\t\t}\n\n\t\t// Active: Show Progress\n\t\tif (this.scope.isActive) {\n\t\t\t// Infinite: Start Progressbar and Show after Delay\n\t\t\tif (\n\t\t\t\tthis.progressState.type === ProgressIndicatorState.Type.Infinite\n\t\t\t) {\n\t\t\t\tthis.progressBar.infinite().show(delay);\n\t\t\t}\n\n\t\t\t// Finite: Start Progressbar and Show after Delay\n\t\t\telse if (\n\t\t\t\tthis.progressState.type === ProgressIndicatorState.Type.Work &&\n\t\t\t\ttypeof this.progressState.total === \"number\"\n\t\t\t) {\n\t\t\t\tthis.progressBar.total(this.progressState.total).show(delay);\n\t\t\t}\n\t\t}\n\n\t\treturn {\n\t\t\ttotal: (total: number) => {\n\t\t\t\tthis.progressState = new ProgressIndicatorState.Work(\n\t\t\t\t\ttotal,\n\t\t\t\t\tthis.progressState.type === ProgressIndicatorState.Type.Work\n\t\t\t\t\t\t? this.progressState.worked\n\t\t\t\t\t\t: undefined,\n\t\t\t\t);\n\n\t\t\t\tif (this.scope.isActive) {\n\t\t\t\t\tthis.progressBar.total(total);\n\t\t\t\t}\n\t\t\t},\n\n\t\t\tworked: (worked: number) => {\n\t\t\t\t// Verify first that we are either not active or the progressbar has a total set\n\t\t\t\tif (!this.scope.isActive || this.progressBar.hasTotal()) {\n\t\t\t\t\tthis.progressState = new ProgressIndicatorState.Work(\n\t\t\t\t\t\tthis.progressState.type ===\n\t\t\t\t\t\t\tProgressIndicatorState.Type.Work\n\t\t\t\t\t\t\t? this.progressState.total\n\t\t\t\t\t\t\t: undefined,\n\t\t\t\t\t\tthis.progressState.type ===\n\t\t\t\t\t\t\tProgressIndicatorState.Type.Work &&\n\t\t\t\t\t\t\ttypeof this.progressState.worked === \"number\"\n\t\t\t\t\t\t\t? this.progressState.worked + worked\n\t\t\t\t\t\t\t: worked,\n\t\t\t\t\t);\n\n\t\t\t\t\tif (this.scope.isActive) {\n\t\t\t\t\t\tthis.progressBar.worked(worked);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Otherwise the progress bar does not support worked(), we fallback to infinite() progress\n\t\t\t\telse {\n\t\t\t\t\tthis.progressState = ProgressIndicatorState.Infinite;\n\t\t\t\t\tthis.progressBar.infinite().show();\n\t\t\t\t}\n\t\t\t},\n\n\t\t\tdone: () => {\n\t\t\t\tthis.progressState = ProgressIndicatorState.Done;\n\n\t\t\t\tif (this.scope.isActive) {\n\t\t\t\t\tthis.progressBar.stop().hide();\n\t\t\t\t}\n\t\t\t},\n\t\t};\n\t}\n\n\tasync showWhile(promise: Promise<unknown>, delay?: number): Promise<void> {\n\t\t// Join with existing running promise to ensure progress is accurate\n\t\tif (this.progressState.type === ProgressIndicatorState.Type.While) {\n\t\t\tpromise = Promise.all([promise, this.progressState.whilePromise]);\n\t\t}\n\n\t\t// Keep Promise in State\n\t\tthis.progressState = new ProgressIndicatorState.While(\n\t\t\tpromise,\n\t\t\tdelay || 0,\n\t\t\tDate.now(),\n\t\t);\n\n\t\ttry {\n\t\t\tthis.doShowWhile(delay);\n\n\t\t\tawait promise;\n\t\t} catch (error) {\n\t\t\t// ignore\n\t\t} finally {\n\t\t\t// If this is not the last promise in the list of joined promises, skip this\n\t\t\tif (\n\t\t\t\tthis.progressState.type !== ProgressIndicatorState.Type.While ||\n\t\t\t\tthis.progressState.whilePromise === promise\n\t\t\t) {\n\t\t\t\t// The while promise is either null or equal the promise we last hooked on\n\t\t\t\tthis.progressState = ProgressIndicatorState.None;\n\n\t\t\t\tif (this.scope.isActive) {\n\t\t\t\t\tthis.progressBar.stop().hide();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate doShowWhile(delay?: number): void {\n\t\t// Show Progress when active\n\t\tif (this.scope.isActive) {\n\t\t\tthis.progressBar.infinite().show(delay);\n\t\t}\n\t}\n}\n\nexport abstract class AbstractProgressScope\n\textends Disposable\n\timplements IProgressScope\n{\n\tprivate readonly _onDidChangeActive = this._register(new Emitter<void>());\n\treadonly onDidChangeActive = this._onDidChangeActive.event;\n\n\tget isActive() {\n\t\treturn this._isActive;\n\t}\n\n\tconstructor(\n\t\tprivate scopeId: string,\n\t\tprivate _isActive: boolean,\n\t) {\n\t\tsuper();\n\t}\n\n\tprotected onScopeOpened(scopeId: string) {\n\t\tif (scopeId === this.scopeId) {\n\t\t\tif (!this._isActive) {\n\t\t\t\tthis._isActive = true;\n\n\t\t\t\tthis._onDidChangeActive.fire();\n\t\t\t}\n\t\t}\n\t}\n\n\tprotected onScopeClosed(scopeId: string) {\n\t\tif (scopeId === this.scopeId) {\n\t\t\tif (this._isActive) {\n\t\t\t\tthis._isActive = false;\n\n\t\t\t\tthis._onDidChangeActive.fire();\n\t\t\t}\n\t\t}\n\t}\n}\n"],
  "mappings": ";;AAMA,SAAS,eAA2B;AACpC,SAAS,kBAAkB;AAC3B;AAAA,EAGC;AAAA,OACM;AAEP,SAAS,4BAA4B;AAE9B,MAAM,gCACJ,WAET;AAAA,EACC,YACkB,aACA,OAChB;AACD,UAAM;AAHW;AACA;AAIjB,SAAK,kBAAkB;AAAA,EACxB;AAAA,EA3BD,OAmBA;AAAA;AAAA;AAAA,EAUS,oBAAoB;AAK3B,SAAK;AAAA,MACJ,KAAK,MAAM,iBAAiB,CAAC,MAAM;AAClC,YACC,EAAE,SAAS,qBAAqB,iBAC/B,EAAE,SAAS,qBAAqB,gBAChC,KAAK,MAAM,SACX;AACD,eAAK,YAAY,KAAK,EAAE,KAAK;AAAA,QAC9B;AAAA,MACD,CAAC;AAAA,IACF;AAAA,EACD;AAAA,EAIA,KAAK,iBAAgC,OAAiC;AAErE,QAAI,KAAK,MAAM,SAAS;AACvB,aAAO;AAAA,IACR;AAEA,QAAI,oBAAoB,MAAM;AAC7B,aAAO,KAAK,OAAO,MAAM,KAAK;AAAA,IAC/B;AAEA,WAAO,KAAK,OAAO,iBAAiB,KAAK;AAAA,EAC1C;AAAA,EAIQ,OACP,iBACA,OACkB;AAClB,QAAI,OAAO,oBAAoB,WAAW;AACzC,WAAK,YAAY,SAAS,EAAE,KAAK,KAAK;AAAA,IACvC,OAAO;AACN,WAAK,YAAY,MAAM,eAAe,EAAE,KAAK,KAAK;AAAA,IACnD;AAEA,WAAO;AAAA,MACN,OAAO,wBAAC,UAAkB;AACzB,aAAK,YAAY,MAAM,KAAK;AAAA,MAC7B,GAFO;AAAA,MAIP,QAAQ,wBAAC,WAAmB;AAC3B,YAAI,KAAK,YAAY,SAAS,GAAG;AAChC,eAAK,YAAY,OAAO,MAAM;AAAA,QAC/B,OAAO;AACN,eAAK,YAAY,SAAS,EAAE,KAAK;AAAA,QAClC;AAAA,MACD,GANQ;AAAA,MAQR,MAAM,6BAAM;AACX,aAAK,YAAY,KAAK,EAAE,KAAK;AAAA,MAC9B,GAFM;AAAA,IAGP;AAAA,EACD;AAAA,EAEA,MAAM,UAAU,SAA2B,OAA+B;AAEzE,QAAI,KAAK,MAAM,SAAS;AACvB,UAAI;AACH,cAAM;AAAA,MACP,SAAS,OAAO;AAAA,MAEhB;AAAA,IACD;AAEA,WAAO,KAAK,YAAY,SAAS,KAAK;AAAA,EACvC;AAAA,EAEA,MAAc,YACb,SACA,OACgB;AAChB,QAAI;AACH,WAAK,YAAY,SAAS,EAAE,KAAK,KAAK;AAEtC,YAAM;AAAA,IACP,SAAS,OAAO;AAAA,IAEhB,UAAE;AACD,WAAK,YAAY,KAAK,EAAE,KAAK;AAAA,IAC9B;AAAA,EACD;AACD;AAEA,IAAU;AAAA,CAAV,CAAUA,4BAAV;AACQ,MAAK;AAAL,IAAKC,UAAL;AACN,IAAAA,YAAA,UAAO,KAAP;AACA,IAAAA,YAAA,UAAO,KAAP;AACA,IAAAA,YAAA,cAAW,KAAX;AACA,IAAAA,YAAA,WAAQ,KAAR;AACA,IAAAA,YAAA,UAAO,KAAP;AAAA,KALW,OAAAD,wBAAA,SAAAA,wBAAA;AAQL,EAAMA,wBAAA,OAAO,EAAE,MAAM,aAAU;AAC/B,EAAMA,wBAAA,OAAO,EAAE,MAAM,aAAU;AAC/B,EAAMA,wBAAA,WAAW,EAAE,MAAM,iBAAc;AAAA,EAEvC,MAAM,MAAM;AAAA,IAGlB,YACU,cACA,YACA,YACR;AAHQ;AACA;AACA;AAAA,IACP;AAAA,IA9IL,OAuIoB;AAAA;AAAA;AAAA,IACT,OAAO;AAAA,EAOjB;AARO,EAAAA,wBAAM;AAAA,EAUN,MAAM,KAAK;AAAA,IAGjB,YACU,OACA,QACR;AAFQ;AACA;AAAA,IACP;AAAA,IAvJL,OAiJmB;AAAA;AAAA;AAAA,IACR,OAAO;AAAA,EAMjB;AAPO,EAAAA,wBAAM;AAAA,GAvBJ;AAoDH,MAAM,gCACJ,WAET;AAAA,EAIC,YACkB,aACA,OAChB;AACD,UAAM;AAHW;AACA;AAIjB,SAAK,kBAAkB;AAAA,EACxB;AAAA,EA5LD,OAiLA;AAAA;AAAA;AAAA,EACS,gBACP,uBAAuB;AAAA,EAWxB,oBAAoB;AACnB,SAAK;AAAA,MACJ,KAAK,MAAM,kBAAkB,MAAM;AAClC,YAAI,KAAK,MAAM,UAAU;AACxB,eAAK,mBAAmB;AAAA,QACzB,OAAO;AACN,eAAK,qBAAqB;AAAA,QAC3B;AAAA,MACD,CAAC;AAAA,IACF;AAAA,EACD;AAAA,EAEQ,qBAA2B;AAElC,QAAI,KAAK,cAAc,SAAS,uBAAuB,KAAK,MAAM;AACjE;AAAA,IACD;AAGA,QAAI,KAAK,cAAc,SAAS,eAAmC;AAClE,UAAI;AACJ,UAAI,KAAK,cAAc,aAAa,GAAG;AACtC,cAAM,iBACL,KAAK,cAAc,cAClB,KAAK,IAAI,IAAI,KAAK,cAAc;AAClC,YAAI,iBAAiB,GAAG;AACvB,kBAAQ;AAAA,QACT;AAAA,MACD;AAEA,WAAK,YAAY,KAAK;AAAA,IACvB,WAIC,KAAK,cAAc,SAAS,kBAC3B;AACD,WAAK,YAAY,SAAS,EAAE,KAAK;AAAA,IAClC,WAGS,KAAK,cAAc,SAAS,cAAkC;AACtE,UAAI,KAAK,cAAc,OAAO;AAC7B,aAAK,YAAY,MAAM,KAAK,cAAc,KAAK,EAAE,KAAK;AAAA,MACvD;AAEA,UAAI,KAAK,cAAc,QAAQ;AAC9B,aAAK,YAAY,OAAO,KAAK,cAAc,MAAM,EAAE,KAAK;AAAA,MACzD;AAAA,IACD;AAAA,EACD;AAAA,EAEQ,uBAA6B;AACpC,SAAK,YAAY,KAAK,EAAE,KAAK;AAAA,EAC9B;AAAA,EAIA,KAAK,iBAAgC,OAAiC;AAErE,QAAI,OAAO,oBAAoB,WAAW;AACzC,WAAK,gBAAgB,uBAAuB;AAAA,IAC7C,OAAO;AACN,WAAK,gBAAgB,IAAI,uBAAuB;AAAA,QAC/C;AAAA,QACA;AAAA,MACD;AAAA,IACD;AAGA,QAAI,KAAK,MAAM,UAAU;AAExB,UACC,KAAK,cAAc,SAAS,kBAC3B;AACD,aAAK,YAAY,SAAS,EAAE,KAAK,KAAK;AAAA,MACvC,WAIC,KAAK,cAAc,SAAS,gBAC5B,OAAO,KAAK,cAAc,UAAU,UACnC;AACD,aAAK,YAAY,MAAM,KAAK,cAAc,KAAK,EAAE,KAAK,KAAK;AAAA,MAC5D;AAAA,IACD;AAEA,WAAO;AAAA,MACN,OAAO,wBAAC,UAAkB;AACzB,aAAK,gBAAgB,IAAI,uBAAuB;AAAA,UAC/C;AAAA,UACA,KAAK,cAAc,SAAS,eACzB,KAAK,cAAc,SACnB;AAAA,QACJ;AAEA,YAAI,KAAK,MAAM,UAAU;AACxB,eAAK,YAAY,MAAM,KAAK;AAAA,QAC7B;AAAA,MACD,GAXO;AAAA,MAaP,QAAQ,wBAAC,WAAmB;AAE3B,YAAI,CAAC,KAAK,MAAM,YAAY,KAAK,YAAY,SAAS,GAAG;AACxD,eAAK,gBAAgB,IAAI,uBAAuB;AAAA,YAC/C,KAAK,cAAc,SAClB,eACE,KAAK,cAAc,QACnB;AAAA,YACH,KAAK,cAAc,SAClB,gBACA,OAAO,KAAK,cAAc,WAAW,WACnC,KAAK,cAAc,SAAS,SAC5B;AAAA,UACJ;AAEA,cAAI,KAAK,MAAM,UAAU;AACxB,iBAAK,YAAY,OAAO,MAAM;AAAA,UAC/B;AAAA,QACD,OAGK;AACJ,eAAK,gBAAgB,uBAAuB;AAC5C,eAAK,YAAY,SAAS,EAAE,KAAK;AAAA,QAClC;AAAA,MACD,GAzBQ;AAAA,MA2BR,MAAM,6BAAM;AACX,aAAK,gBAAgB,uBAAuB;AAE5C,YAAI,KAAK,MAAM,UAAU;AACxB,eAAK,YAAY,KAAK,EAAE,KAAK;AAAA,QAC9B;AAAA,MACD,GANM;AAAA,IAOP;AAAA,EACD;AAAA,EAEA,MAAM,UAAU,SAA2B,OAA+B;AAEzE,QAAI,KAAK,cAAc,SAAS,eAAmC;AAClE,gBAAU,QAAQ,IAAI,CAAC,SAAS,KAAK,cAAc,YAAY,CAAC;AAAA,IACjE;AAGA,SAAK,gBAAgB,IAAI,uBAAuB;AAAA,MAC/C;AAAA,MACA,SAAS;AAAA,MACT,KAAK,IAAI;AAAA,IACV;AAEA,QAAI;AACH,WAAK,YAAY,KAAK;AAEtB,YAAM;AAAA,IACP,SAAS,OAAO;AAAA,IAEhB,UAAE;AAED,UACC,KAAK,cAAc,SAAS,iBAC5B,KAAK,cAAc,iBAAiB,SACnC;AAED,aAAK,gBAAgB,uBAAuB;AAE5C,YAAI,KAAK,MAAM,UAAU;AACxB,eAAK,YAAY,KAAK,EAAE,KAAK;AAAA,QAC9B;AAAA,MACD;AAAA,IACD;AAAA,EACD;AAAA,EAEQ,YAAY,OAAsB;AAEzC,QAAI,KAAK,MAAM,UAAU;AACxB,WAAK,YAAY,SAAS,EAAE,KAAK,KAAK;AAAA,IACvC;AAAA,EACD;AACD;AAEO,MAAe,8BACb,WAET;AAAA,EAQC,YACS,SACA,WACP;AACD,UAAM;AAHE;AACA;AAAA,EAGT;AAAA,EAnYD,OAsXA;AAAA;AAAA;AAAA,EACkB,qBAAqB,KAAK,UAAU,IAAI,QAAc,CAAC;AAAA,EAC/D,oBAAoB,KAAK,mBAAmB;AAAA,EAErD,IAAI,WAAW;AACd,WAAO,KAAK;AAAA,EACb;AAAA,EASU,cAAc,SAAiB;AACxC,QAAI,YAAY,KAAK,SAAS;AAC7B,UAAI,CAAC,KAAK,WAAW;AACpB,aAAK,YAAY;AAEjB,aAAK,mBAAmB,KAAK;AAAA,MAC9B;AAAA,IACD;AAAA,EACD;AAAA,EAEU,cAAc,SAAiB;AACxC,QAAI,YAAY,KAAK,SAAS;AAC7B,UAAI,KAAK,WAAW;AACnB,aAAK,YAAY;AAEjB,aAAK,mBAAmB,KAAK;AAAA,MAC9B;AAAA,IACD;AAAA,EACD;AACD;",
  "names": ["ProgressIndicatorState", "Type"]
}
