{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/progress/test/browser/progressIndicator.test.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport assert from 'assert';\nimport { DisposableStore } from '../../../../../base/common/lifecycle.js';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from '../../../../../base/test/common/utils.js';\nimport { AbstractProgressScope, ScopedProgressIndicator } from '../../browser/progressIndicator.js';\n\nclass TestProgressBar {\n\tfTotal: number = 0;\n\tfWorked: number = 0;\n\tfInfinite: boolean = false;\n\tfDone: boolean = false;\n\n\tinfinite() {\n\t\tthis.fDone = null!;\n\t\tthis.fInfinite = true;\n\n\t\treturn this;\n\t}\n\n\ttotal(total: number) {\n\t\tthis.fDone = null!;\n\t\tthis.fTotal = total;\n\n\t\treturn this;\n\t}\n\n\thasTotal() {\n\t\treturn !!this.fTotal;\n\t}\n\n\tworked(worked: number) {\n\t\tthis.fDone = null!;\n\n\t\tif (this.fWorked) {\n\t\t\tthis.fWorked += worked;\n\t\t} else {\n\t\t\tthis.fWorked = worked;\n\t\t}\n\n\t\treturn this;\n\t}\n\n\tdone() {\n\t\tthis.fDone = true;\n\n\t\tthis.fInfinite = null!;\n\t\tthis.fWorked = null!;\n\t\tthis.fTotal = null!;\n\n\t\treturn this;\n\t}\n\n\tstop() {\n\t\treturn this.done();\n\t}\n\n\tshow(): void { }\n\n\thide(): void { }\n}\n\nsuite('Progress Indicator', () => {\n\n\tconst disposables = new DisposableStore();\n\n\tteardown(() => {\n\t\tdisposables.clear();\n\t});\n\n\ttest('ScopedProgressIndicator', async () => {\n\t\tconst testProgressBar = new TestProgressBar();\n\t\tconst progressScope = disposables.add(new class extends AbstractProgressScope {\n\t\t\tconstructor() { super('test.scopeId', true); }\n\t\t\ttestOnScopeOpened(scopeId: string) { super.onScopeOpened(scopeId); }\n\t\t\ttestOnScopeClosed(scopeId: string): void { super.onScopeClosed(scopeId); }\n\t\t}());\n\t\tconst testObject = disposables.add(new ScopedProgressIndicator((<any>testProgressBar), progressScope));\n\n\t\t// Active: Show (Infinite)\n\t\tlet fn = testObject.show(true);\n\t\tassert.strictEqual(true, testProgressBar.fInfinite);\n\t\tfn.done();\n\t\tassert.strictEqual(true, testProgressBar.fDone);\n\n\t\t// Active: Show (Total / Worked)\n\t\tfn = testObject.show(100);\n\t\tassert.strictEqual(false, !!testProgressBar.fInfinite);\n\t\tassert.strictEqual(100, testProgressBar.fTotal);\n\t\tfn.worked(20);\n\t\tassert.strictEqual(20, testProgressBar.fWorked);\n\t\tfn.total(80);\n\t\tassert.strictEqual(80, testProgressBar.fTotal);\n\t\tfn.done();\n\t\tassert.strictEqual(true, testProgressBar.fDone);\n\n\t\t// Inactive: Show (Infinite)\n\t\tprogressScope.testOnScopeClosed('test.scopeId');\n\t\ttestObject.show(true);\n\t\tassert.strictEqual(false, !!testProgressBar.fInfinite);\n\t\tprogressScope.testOnScopeOpened('test.scopeId');\n\t\tassert.strictEqual(true, testProgressBar.fInfinite);\n\n\t\t// Inactive: Show (Total / Worked)\n\t\tprogressScope.testOnScopeClosed('test.scopeId');\n\t\tfn = testObject.show(100);\n\t\tfn.total(80);\n\t\tfn.worked(20);\n\t\tassert.strictEqual(false, !!testProgressBar.fTotal);\n\t\tprogressScope.testOnScopeOpened('test.scopeId');\n\t\tassert.strictEqual(20, testProgressBar.fWorked);\n\t\tassert.strictEqual(80, testProgressBar.fTotal);\n\n\t\t// Acive: Show While\n\t\tlet p = Promise.resolve(null);\n\t\tawait testObject.showWhile(p);\n\t\tassert.strictEqual(true, testProgressBar.fDone);\n\t\tprogressScope.testOnScopeClosed('test.scopeId');\n\t\tp = Promise.resolve(null);\n\t\tawait testObject.showWhile(p);\n\t\tassert.strictEqual(true, testProgressBar.fDone);\n\t\tprogressScope.testOnScopeOpened('test.scopeId');\n\t\tassert.strictEqual(true, testProgressBar.fDone);\n\t});\n\n\tensureNoDisposablesAreLeakedInTestSuite();\n});\n"],
  "mappings": ";;AAKA,OAAO,YAAY;AACnB,SAAS,uBAAuB;AAChC,SAAS,+CAA+C;AACxD,SAAS,uBAAuB,+BAA+B;AAE/D,MAAM,gBAAgB;AAAA,EAVtB,OAUsB;AAAA;AAAA;AAAA,EACrB,SAAiB;AAAA,EACjB,UAAkB;AAAA,EAClB,YAAqB;AAAA,EACrB,QAAiB;AAAA,EAEjB,WAAW;AACV,SAAK,QAAQ;AACb,SAAK,YAAY;AAEjB,WAAO;AAAA,EACR;AAAA,EAEA,MAAM,OAAe;AACpB,SAAK,QAAQ;AACb,SAAK,SAAS;AAEd,WAAO;AAAA,EACR;AAAA,EAEA,WAAW;AACV,WAAO,CAAC,CAAC,KAAK;AAAA,EACf;AAAA,EAEA,OAAO,QAAgB;AACtB,SAAK,QAAQ;AAEb,QAAI,KAAK,SAAS;AACjB,WAAK,WAAW;AAAA,IACjB,OAAO;AACN,WAAK,UAAU;AAAA,IAChB;AAEA,WAAO;AAAA,EACR;AAAA,EAEA,OAAO;AACN,SAAK,QAAQ;AAEb,SAAK,YAAY;AACjB,SAAK,UAAU;AACf,SAAK,SAAS;AAEd,WAAO;AAAA,EACR;AAAA,EAEA,OAAO;AACN,WAAO,KAAK,KAAK;AAAA,EAClB;AAAA,EAEA,OAAa;AAAA,EAAE;AAAA,EAEf,OAAa;AAAA,EAAE;AAChB;AAEA,MAAM,sBAAsB,MAAM;AAEjC,QAAM,cAAc,IAAI,gBAAgB;AAExC,WAAS,MAAM;AACd,gBAAY,MAAM;AAAA,EACnB,CAAC;AAED,OAAK,2BAA2B,YAAY;AAC3C,UAAM,kBAAkB,IAAI,gBAAgB;AAC5C,UAAM,gBAAgB,YAAY,IAAI,IAAI,cAAc,sBAAsB;AAAA,MAC7E,cAAc;AAAE,cAAM,gBAAgB,IAAI;AAAA,MAAG;AAAA,MAC7C,kBAAkB,SAAiB;AAAE,cAAM,cAAc,OAAO;AAAA,MAAG;AAAA,MACnE,kBAAkB,SAAuB;AAAE,cAAM,cAAc,OAAO;AAAA,MAAG;AAAA,IAC1E,EAAE,CAAC;AACH,UAAM,aAAa,YAAY,IAAI,IAAI,wBAA8B,iBAAkB,aAAa,CAAC;AAGrG,QAAI,KAAK,WAAW,KAAK,IAAI;AAC7B,WAAO,YAAY,MAAM,gBAAgB,SAAS;AAClD,OAAG,KAAK;AACR,WAAO,YAAY,MAAM,gBAAgB,KAAK;AAG9C,SAAK,WAAW,KAAK,GAAG;AACxB,WAAO,YAAY,OAAO,CAAC,CAAC,gBAAgB,SAAS;AACrD,WAAO,YAAY,KAAK,gBAAgB,MAAM;AAC9C,OAAG,OAAO,EAAE;AACZ,WAAO,YAAY,IAAI,gBAAgB,OAAO;AAC9C,OAAG,MAAM,EAAE;AACX,WAAO,YAAY,IAAI,gBAAgB,MAAM;AAC7C,OAAG,KAAK;AACR,WAAO,YAAY,MAAM,gBAAgB,KAAK;AAG9C,kBAAc,kBAAkB,cAAc;AAC9C,eAAW,KAAK,IAAI;AACpB,WAAO,YAAY,OAAO,CAAC,CAAC,gBAAgB,SAAS;AACrD,kBAAc,kBAAkB,cAAc;AAC9C,WAAO,YAAY,MAAM,gBAAgB,SAAS;AAGlD,kBAAc,kBAAkB,cAAc;AAC9C,SAAK,WAAW,KAAK,GAAG;AACxB,OAAG,MAAM,EAAE;AACX,OAAG,OAAO,EAAE;AACZ,WAAO,YAAY,OAAO,CAAC,CAAC,gBAAgB,MAAM;AAClD,kBAAc,kBAAkB,cAAc;AAC9C,WAAO,YAAY,IAAI,gBAAgB,OAAO;AAC9C,WAAO,YAAY,IAAI,gBAAgB,MAAM;AAG7C,QAAI,IAAI,QAAQ,QAAQ,IAAI;AAC5B,UAAM,WAAW,UAAU,CAAC;AAC5B,WAAO,YAAY,MAAM,gBAAgB,KAAK;AAC9C,kBAAc,kBAAkB,cAAc;AAC9C,QAAI,QAAQ,QAAQ,IAAI;AACxB,UAAM,WAAW,UAAU,CAAC;AAC5B,WAAO,YAAY,MAAM,gBAAgB,KAAK;AAC9C,kBAAc,kBAAkB,cAAc;AAC9C,WAAO,YAAY,MAAM,gBAAgB,KAAK;AAAA,EAC/C,CAAC;AAED,0CAAwC;AACzC,CAAC;",
  "names": []
}
