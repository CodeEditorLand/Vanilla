var S=Object.defineProperty;var f=Object.getOwnPropertyDescriptor;var d=(o,e,a,r)=>{for(var t=r>1?void 0:r?f(e,a):e,n=o.length-1,v;n>=0;n--)(v=o[n])&&(t=(r?v(e,a,t):v(t))||t);return r&&t&&S(e,a,t),t},i=(o,e)=>(a,r)=>e(a,r,o);import{toAction as h}from"../../../../../vs/base/common/actions.js";import{parse as I}from"vs/base/common/jsonc";import{Language as g,LANGUAGE_DEFAULT as y}from"../../../../../vs/base/common/platform.js";import{localize as s}from"../../../../../vs/nls.js";import{IDialogService as w}from"../../../../../vs/platform/dialogs/common/dialogs.js";import{IEnvironmentService as P}from"../../../../../vs/platform/environment/common/environment.js";import{IExtensionManagementService as L}from"../../../../../vs/platform/extensionManagement/common/extensionManagement.js";import{InstantiationType as m,registerSingleton as p}from"../../../../../vs/platform/instantiation/common/extensions.js";import{ILanguagePackService as u}from"../../../../../vs/platform/languagePacks/common/languagePacks.js";import{INotificationService as E,Severity as x}from"../../../../../vs/platform/notification/common/notification.js";import{IProductService as D}from"../../../../../vs/platform/product/common/productService.js";import{IProgressService as C,ProgressLocation as V}from"../../../../../vs/platform/progress/common/progress.js";import{ViewContainerLocation as b}from"../../../../../vs/workbench/common/views.js";import{IJSONEditingService as R}from"../../../../../vs/workbench/services/configuration/common/jsonEditing.js";import{IEditorService as F}from"../../../../../vs/workbench/services/editor/common/editorService.js";import{IHostService as T}from"../../../../../vs/workbench/services/host/browser/host.js";import{IActiveLanguagePackService as k,ILocaleService as M}from"../../../../../vs/workbench/services/localization/common/locale.js";import{IPaneCompositePartService as A}from"../../../../../vs/workbench/services/panecomposite/browser/panecomposite.js";import{ITextFileService as _}from"../../../../../vs/workbench/services/textfile/common/textfiles.js";const O="workbench.view.extensions";let c=class{constructor(e,a,r,t,n,v,B,G,U,j,H,J){this.jsonEditingService=e;this.environmentService=a;this.notificationService=r;this.languagePackService=t;this.paneCompositePartService=n;this.extensionManagementService=v;this.progressService=B;this.textFileService=G;this.editorService=U;this.dialogService=j;this.hostService=H;this.productService=J}_serviceBrand;async validateLocaleFile(){try{const e=await this.textFileService.read(this.environmentService.argvResource,{encoding:"utf8"});I(e.value)}catch{return this.notificationService.notify({severity:x.Error,message:s("argvInvalid","Unable to write display language. Please open the runtime settings, correct errors/warnings in it and try again."),actions:{primary:[h({id:"openArgv",label:s("openArgv","Open Runtime Settings"),run:()=>this.editorService.openEditor({resource:this.environmentService.argvResource})})]}}),!1}return!0}async writeLocaleValue(e){return await this.validateLocaleFile()?(await this.jsonEditingService.write(this.environmentService.argvResource,[{path:["locale"],value:e}],!0),!0):!1}async setLocale(e,a=!1){const r=e.id;if(r===g.value()||!r&&g.isDefaultVariant())return;const t=await this.languagePackService.getInstalledLanguages();try{if(!t.some(n=>n.id===e.id)){if(e.galleryExtension?.publisher.toLowerCase()!=="ms-ceintl"){((await this.paneCompositePartService.openPaneComposite(O,b.Sidebar))?.getViewPaneContainer()).search(`@id:${e.extensionId}`);return}await this.progressService.withProgress({location:V.Notification,title:s("installing","Installing {0} language support...",e.label)},n=>this.extensionManagementService.installFromGallery(e.galleryExtension,{isMachineScoped:!1}))}if(!a&&!await this.showRestartDialog(e.label))return;await this.writeLocaleValue(r),await this.hostService.restart()}catch(n){this.notificationService.error(n)}}async clearLocalePreference(){try{await this.writeLocaleValue(void 0),g.isDefaultVariant()||await this.showRestartDialog("English")}catch(e){this.notificationService.error(e)}}async showRestartDialog(e){const{confirmed:a}=await this.dialogService.confirm({message:s("restartDisplayLanguageMessage1","Restart {0} to switch to {1}?",this.productService.nameLong,e),detail:s("restartDisplayLanguageDetail1","To change the display language to {0}, {1} needs to restart.",e,this.productService.nameLong),primaryButton:s({key:"restart",comment:["&& denotes a mnemonic character"]},"&&Restart")});return a}};c=d([i(0,R),i(1,P),i(2,E),i(3,u),i(4,A),i(5,L),i(6,C),i(7,_),i(8,F),i(9,w),i(10,T),i(11,D)],c);let l=class{constructor(e){this.languagePackService=e}_serviceBrand;async getExtensionIdProvidingCurrentLocale(){const e=g.value();return e===y?void 0:(await this.languagePackService.getInstalledLanguages()).find(t=>t.id===e)?.extensionId}};l=d([i(0,u)],l),p(M,c,m.Delayed),p(k,l,m.Delayed);
