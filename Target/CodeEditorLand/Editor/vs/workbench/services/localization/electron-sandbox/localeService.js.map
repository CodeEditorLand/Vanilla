{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/localization/electron-sandbox/localeService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { toAction } from \"../../../../base/common/actions.js\";\nimport { parse } from \"../../../../base/common/jsonc.js\";\nimport {\n\tLANGUAGE_DEFAULT,\n\tLanguage,\n} from \"../../../../base/common/platform.js\";\nimport { localize } from \"../../../../nls.js\";\nimport { IDialogService } from \"../../../../platform/dialogs/common/dialogs.js\";\nimport { IEnvironmentService } from \"../../../../platform/environment/common/environment.js\";\nimport { IExtensionManagementService } from \"../../../../platform/extensionManagement/common/extensionManagement.js\";\nimport {\n\tInstantiationType,\n\tregisterSingleton,\n} from \"../../../../platform/instantiation/common/extensions.js\";\nimport {\n\ttype ILanguagePackItem,\n\tILanguagePackService,\n} from \"../../../../platform/languagePacks/common/languagePacks.js\";\nimport {\n\tINotificationService,\n\tSeverity,\n} from \"../../../../platform/notification/common/notification.js\";\nimport { IProductService } from \"../../../../platform/product/common/productService.js\";\nimport {\n\tIProgressService,\n\tProgressLocation,\n} from \"../../../../platform/progress/common/progress.js\";\nimport {\n\ttype IViewPaneContainer,\n\tViewContainerLocation,\n} from \"../../../common/views.js\";\nimport { IJSONEditingService } from \"../../configuration/common/jsonEditing.js\";\nimport { IEditorService } from \"../../editor/common/editorService.js\";\nimport { IHostService } from \"../../host/browser/host.js\";\nimport { IPaneCompositePartService } from \"../../panecomposite/browser/panecomposite.js\";\nimport { ITextFileService } from \"../../textfile/common/textfiles.js\";\nimport {\n\tIActiveLanguagePackService,\n\tILocaleService,\n} from \"../common/locale.js\";\n\n// duplicate of IExtensionsViewPaneContainer in contrib\ninterface IExtensionsViewPaneContainer extends IViewPaneContainer {\n\treadonly searchValue: string | undefined;\n\tsearch(text: string): void;\n\trefresh(): Promise<void>;\n}\n\n// duplicate of VIEWLET_ID in contrib/extensions\nconst EXTENSIONS_VIEWLET_ID = \"workbench.view.extensions\";\n\nclass NativeLocaleService implements ILocaleService {\n\t_serviceBrand: undefined;\n\n\tconstructor(\n\t\t@IJSONEditingService\n\t\tprivate readonly jsonEditingService: IJSONEditingService,\n\t\t@IEnvironmentService\n\t\tprivate readonly environmentService: IEnvironmentService,\n\t\t@INotificationService\n\t\tprivate readonly notificationService: INotificationService,\n\t\t@ILanguagePackService\n\t\tprivate readonly languagePackService: ILanguagePackService,\n\t\t@IPaneCompositePartService\n\t\tprivate readonly paneCompositePartService: IPaneCompositePartService,\n\t\t@IExtensionManagementService\n\t\tprivate readonly extensionManagementService: IExtensionManagementService,\n\t\t@IProgressService private readonly progressService: IProgressService,\n\t\t@ITextFileService private readonly textFileService: ITextFileService,\n\t\t@IEditorService private readonly editorService: IEditorService,\n\t\t@IDialogService private readonly dialogService: IDialogService,\n\t\t@IHostService private readonly hostService: IHostService,\n\t\t@IProductService private readonly productService: IProductService,\n\t) {}\n\n\tprivate async validateLocaleFile(): Promise<boolean> {\n\t\ttry {\n\t\t\tconst content = await this.textFileService.read(\n\t\t\t\tthis.environmentService.argvResource,\n\t\t\t\t{ encoding: \"utf8\" },\n\t\t\t);\n\n\t\t\t// This is the same logic that we do where argv.json is parsed so mirror that:\n\t\t\t// https://github.com/microsoft/vscode/blob/32d40cf44e893e87ac33ac4f08de1e5f7fe077fc/src/main.js#L238-L246\n\t\t\tparse(content.value);\n\t\t} catch (error) {\n\t\t\tthis.notificationService.notify({\n\t\t\t\tseverity: Severity.Error,\n\t\t\t\tmessage: localize(\n\t\t\t\t\t\"argvInvalid\",\n\t\t\t\t\t\"Unable to write display language. Please open the runtime settings, correct errors/warnings in it and try again.\",\n\t\t\t\t),\n\t\t\t\tactions: {\n\t\t\t\t\tprimary: [\n\t\t\t\t\t\ttoAction({\n\t\t\t\t\t\t\tid: \"openArgv\",\n\t\t\t\t\t\t\tlabel: localize(\n\t\t\t\t\t\t\t\t\"openArgv\",\n\t\t\t\t\t\t\t\t\"Open Runtime Settings\",\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\trun: () =>\n\t\t\t\t\t\t\t\tthis.editorService.openEditor({\n\t\t\t\t\t\t\t\t\tresource:\n\t\t\t\t\t\t\t\t\t\tthis.environmentService.argvResource,\n\t\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t}),\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t});\n\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t}\n\n\tprivate async writeLocaleValue(\n\t\tlocale: string | undefined,\n\t): Promise<boolean> {\n\t\tif (!(await this.validateLocaleFile())) {\n\t\t\treturn false;\n\t\t}\n\t\tawait this.jsonEditingService.write(\n\t\t\tthis.environmentService.argvResource,\n\t\t\t[{ path: [\"locale\"], value: locale }],\n\t\t\ttrue,\n\t\t);\n\t\treturn true;\n\t}\n\n\tasync setLocale(\n\t\tlanguagePackItem: ILanguagePackItem,\n\t\tskipDialog = false,\n\t): Promise<void> {\n\t\tconst locale = languagePackItem.id;\n\t\tif (\n\t\t\tlocale === Language.value() ||\n\t\t\t(!locale && Language.isDefaultVariant())\n\t\t) {\n\t\t\treturn;\n\t\t}\n\t\tconst installedLanguages =\n\t\t\tawait this.languagePackService.getInstalledLanguages();\n\t\ttry {\n\t\t\t// Only Desktop has the concept of installing language packs so we only do this for Desktop\n\t\t\t// and only if the language pack is not installed\n\t\t\tif (\n\t\t\t\t!installedLanguages.some(\n\t\t\t\t\t(installedLanguage) =>\n\t\t\t\t\t\tinstalledLanguage.id === languagePackItem.id,\n\t\t\t\t)\n\t\t\t) {\n\t\t\t\t// Only actually install a language pack from Microsoft\n\t\t\t\tif (\n\t\t\t\t\tlanguagePackItem.galleryExtension?.publisher.toLowerCase() !==\n\t\t\t\t\t\"ms-ceintl\"\n\t\t\t\t) {\n\t\t\t\t\t// Show the view so the user can see the language pack that they should install\n\t\t\t\t\t// as of now, there are no 3rd party language packs available on the Marketplace.\n\t\t\t\t\tconst viewlet =\n\t\t\t\t\t\tawait this.paneCompositePartService.openPaneComposite(\n\t\t\t\t\t\t\tEXTENSIONS_VIEWLET_ID,\n\t\t\t\t\t\t\tViewContainerLocation.Sidebar,\n\t\t\t\t\t\t);\n\t\t\t\t\t(\n\t\t\t\t\t\tviewlet?.getViewPaneContainer() as IExtensionsViewPaneContainer\n\t\t\t\t\t).search(`@id:${languagePackItem.extensionId}`);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tawait this.progressService.withProgress(\n\t\t\t\t\t{\n\t\t\t\t\t\tlocation: ProgressLocation.Notification,\n\t\t\t\t\t\ttitle: localize(\n\t\t\t\t\t\t\t\"installing\",\n\t\t\t\t\t\t\t\"Installing {0} language support...\",\n\t\t\t\t\t\t\tlanguagePackItem.label,\n\t\t\t\t\t\t),\n\t\t\t\t\t},\n\t\t\t\t\t(progress) =>\n\t\t\t\t\t\tthis.extensionManagementService.installFromGallery(\n\t\t\t\t\t\t\tlanguagePackItem.galleryExtension!,\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t// Setting this to false is how you get the extension to be synced with Settings Sync (if enabled).\n\t\t\t\t\t\t\t\tisMachineScoped: false,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t),\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tif (\n\t\t\t\t!skipDialog &&\n\t\t\t\t!(await this.showRestartDialog(languagePackItem.label))\n\t\t\t) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tawait this.writeLocaleValue(locale);\n\t\t\tawait this.hostService.restart();\n\t\t} catch (err) {\n\t\t\tthis.notificationService.error(err);\n\t\t}\n\t}\n\n\tasync clearLocalePreference(): Promise<void> {\n\t\ttry {\n\t\t\tawait this.writeLocaleValue(undefined);\n\t\t\tif (!Language.isDefaultVariant()) {\n\t\t\t\tawait this.showRestartDialog(\"English\");\n\t\t\t}\n\t\t} catch (err) {\n\t\t\tthis.notificationService.error(err);\n\t\t}\n\t}\n\n\tprivate async showRestartDialog(languageName: string): Promise<boolean> {\n\t\tconst { confirmed } = await this.dialogService.confirm({\n\t\t\tmessage: localize(\n\t\t\t\t\"restartDisplayLanguageMessage1\",\n\t\t\t\t\"Restart {0} to switch to {1}?\",\n\t\t\t\tthis.productService.nameLong,\n\t\t\t\tlanguageName,\n\t\t\t),\n\t\t\tdetail: localize(\n\t\t\t\t\"restartDisplayLanguageDetail1\",\n\t\t\t\t\"To change the display language to {0}, {1} needs to restart.\",\n\t\t\t\tlanguageName,\n\t\t\t\tthis.productService.nameLong,\n\t\t\t),\n\t\t\tprimaryButton: localize(\n\t\t\t\t{\n\t\t\t\t\tkey: \"restart\",\n\t\t\t\t\tcomment: [\"&& denotes a mnemonic character\"],\n\t\t\t\t},\n\t\t\t\t\"&&Restart\",\n\t\t\t),\n\t\t});\n\n\t\treturn confirmed;\n\t}\n}\n\n// This is its own service because the localeService depends on IJSONEditingService which causes a circular dependency\n// Once that's ironed out, we can fold this into the localeService.\nclass NativeActiveLanguagePackService implements IActiveLanguagePackService {\n\t_serviceBrand: undefined;\n\n\tconstructor(\n\t\t@ILanguagePackService\n\t\tprivate readonly languagePackService: ILanguagePackService,\n\t) {}\n\n\tasync getExtensionIdProvidingCurrentLocale(): Promise<string | undefined> {\n\t\tconst language = Language.value();\n\t\tif (language === LANGUAGE_DEFAULT) {\n\t\t\treturn undefined;\n\t\t}\n\t\tconst languages =\n\t\t\tawait this.languagePackService.getInstalledLanguages();\n\t\tconst languagePack = languages.find((l) => l.id === language);\n\t\treturn languagePack?.extensionId;\n\t}\n}\n\nregisterSingleton(\n\tILocaleService,\n\tNativeLocaleService,\n\tInstantiationType.Delayed,\n);\nregisterSingleton(\n\tIActiveLanguagePackService,\n\tNativeActiveLanguagePackService,\n\tInstantiationType.Delayed,\n);\n"],
  "mappings": "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",
  "names": []
}
