{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/localization/electron-sandbox/localeService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Language, LANGUAGE_DEFAULT } from '../../../../base/common/platform.js';\nimport { IEnvironmentService } from '../../../../platform/environment/common/environment.js';\nimport { INotificationService, Severity } from '../../../../platform/notification/common/notification.js';\nimport { IJSONEditingService } from '../../configuration/common/jsonEditing.js';\nimport { IActiveLanguagePackService, ILocaleService } from '../common/locale.js';\nimport { ILanguagePackItem, ILanguagePackService } from '../../../../platform/languagePacks/common/languagePacks.js';\nimport { IPaneCompositePartService } from '../../panecomposite/browser/panecomposite.js';\nimport { IViewPaneContainer, ViewContainerLocation } from '../../../common/views.js';\nimport { IExtensionManagementService } from '../../../../platform/extensionManagement/common/extensionManagement.js';\nimport { IProgressService, ProgressLocation } from '../../../../platform/progress/common/progress.js';\nimport { localize } from '../../../../nls.js';\nimport { toAction } from '../../../../base/common/actions.js';\nimport { ITextFileService } from '../../textfile/common/textfiles.js';\nimport { parse } from '../../../../base/common/jsonc.js';\nimport { IEditorService } from '../../editor/common/editorService.js';\nimport { IHostService } from '../../host/browser/host.js';\nimport { IDialogService } from '../../../../platform/dialogs/common/dialogs.js';\nimport { IProductService } from '../../../../platform/product/common/productService.js';\nimport { InstantiationType, registerSingleton } from '../../../../platform/instantiation/common/extensions.js';\n\n// duplicate of IExtensionsViewPaneContainer in contrib\ninterface IExtensionsViewPaneContainer extends IViewPaneContainer {\n\treadonly searchValue: string | undefined;\n\tsearch(text: string): void;\n\trefresh(): Promise<void>;\n}\n\n// duplicate of VIEWLET_ID in contrib/extensions\nconst EXTENSIONS_VIEWLET_ID = 'workbench.view.extensions';\n\nclass NativeLocaleService implements ILocaleService {\n\t_serviceBrand: undefined;\n\n\tconstructor(\n\t\t@IJSONEditingService private readonly jsonEditingService: IJSONEditingService,\n\t\t@IEnvironmentService private readonly environmentService: IEnvironmentService,\n\t\t@INotificationService private readonly notificationService: INotificationService,\n\t\t@ILanguagePackService private readonly languagePackService: ILanguagePackService,\n\t\t@IPaneCompositePartService private readonly paneCompositePartService: IPaneCompositePartService,\n\t\t@IExtensionManagementService private readonly extensionManagementService: IExtensionManagementService,\n\t\t@IProgressService private readonly progressService: IProgressService,\n\t\t@ITextFileService private readonly textFileService: ITextFileService,\n\t\t@IEditorService private readonly editorService: IEditorService,\n\t\t@IDialogService private readonly dialogService: IDialogService,\n\t\t@IHostService private readonly hostService: IHostService,\n\t\t@IProductService private readonly productService: IProductService\n\t) { }\n\n\tprivate async validateLocaleFile(): Promise<boolean> {\n\t\ttry {\n\t\t\tconst content = await this.textFileService.read(this.environmentService.argvResource, { encoding: 'utf8' });\n\n\t\t\t// This is the same logic that we do where argv.json is parsed so mirror that:\n\t\t\t// https://github.com/microsoft/vscode/blob/32d40cf44e893e87ac33ac4f08de1e5f7fe077fc/src/main.js#L238-L246\n\t\t\tparse(content.value);\n\t\t} catch (error) {\n\t\t\tthis.notificationService.notify({\n\t\t\t\tseverity: Severity.Error,\n\t\t\t\tmessage: localize('argvInvalid', 'Unable to write display language. Please open the runtime settings, correct errors/warnings in it and try again.'),\n\t\t\t\tactions: {\n\t\t\t\t\tprimary: [\n\t\t\t\t\t\ttoAction({\n\t\t\t\t\t\t\tid: 'openArgv',\n\t\t\t\t\t\t\tlabel: localize('openArgv', \"Open Runtime Settings\"),\n\t\t\t\t\t\t\trun: () => this.editorService.openEditor({ resource: this.environmentService.argvResource })\n\t\t\t\t\t\t})\n\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t});\n\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t}\n\n\tprivate async writeLocaleValue(locale: string | undefined): Promise<boolean> {\n\t\tif (!(await this.validateLocaleFile())) {\n\t\t\treturn false;\n\t\t}\n\t\tawait this.jsonEditingService.write(this.environmentService.argvResource, [{ path: ['locale'], value: locale }], true);\n\t\treturn true;\n\t}\n\n\tasync setLocale(languagePackItem: ILanguagePackItem, skipDialog = false): Promise<void> {\n\t\tconst locale = languagePackItem.id;\n\t\tif (locale === Language.value() || (!locale && Language.isDefaultVariant())) {\n\t\t\treturn;\n\t\t}\n\t\tconst installedLanguages = await this.languagePackService.getInstalledLanguages();\n\t\ttry {\n\n\t\t\t// Only Desktop has the concept of installing language packs so we only do this for Desktop\n\t\t\t// and only if the language pack is not installed\n\t\t\tif (!installedLanguages.some(installedLanguage => installedLanguage.id === languagePackItem.id)) {\n\n\t\t\t\t// Only actually install a language pack from Microsoft\n\t\t\t\tif (languagePackItem.galleryExtension?.publisher.toLowerCase() !== 'ms-ceintl') {\n\t\t\t\t\t// Show the view so the user can see the language pack that they should install\n\t\t\t\t\t// as of now, there are no 3rd party language packs available on the Marketplace.\n\t\t\t\t\tconst viewlet = await this.paneCompositePartService.openPaneComposite(EXTENSIONS_VIEWLET_ID, ViewContainerLocation.Sidebar);\n\t\t\t\t\t(viewlet?.getViewPaneContainer() as IExtensionsViewPaneContainer).search(`@id:${languagePackItem.extensionId}`);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tawait this.progressService.withProgress(\n\t\t\t\t\t{\n\t\t\t\t\t\tlocation: ProgressLocation.Notification,\n\t\t\t\t\t\ttitle: localize('installing', \"Installing {0} language support...\", languagePackItem.label),\n\t\t\t\t\t},\n\t\t\t\t\tprogress => this.extensionManagementService.installFromGallery(languagePackItem.galleryExtension!, {\n\t\t\t\t\t\t// Setting this to false is how you get the extension to be synced with Settings Sync (if enabled).\n\t\t\t\t\t\tisMachineScoped: false,\n\t\t\t\t\t})\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tif (!skipDialog && !await this.showRestartDialog(languagePackItem.label)) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tawait this.writeLocaleValue(locale);\n\t\t\tawait this.hostService.restart();\n\t\t} catch (err) {\n\t\t\tthis.notificationService.error(err);\n\t\t}\n\t}\n\n\tasync clearLocalePreference(): Promise<void> {\n\t\ttry {\n\t\t\tawait this.writeLocaleValue(undefined);\n\t\t\tif (!Language.isDefaultVariant()) {\n\t\t\t\tawait this.showRestartDialog('English');\n\t\t\t}\n\t\t} catch (err) {\n\t\t\tthis.notificationService.error(err);\n\t\t}\n\t}\n\n\tprivate async showRestartDialog(languageName: string): Promise<boolean> {\n\t\tconst { confirmed } = await this.dialogService.confirm({\n\t\t\tmessage: localize('restartDisplayLanguageMessage1', \"Restart {0} to switch to {1}?\", this.productService.nameLong, languageName),\n\t\t\tdetail: localize(\n\t\t\t\t'restartDisplayLanguageDetail1',\n\t\t\t\t\"To change the display language to {0}, {1} needs to restart.\",\n\t\t\t\tlanguageName,\n\t\t\t\tthis.productService.nameLong\n\t\t\t),\n\t\t\tprimaryButton: localize({ key: 'restart', comment: ['&& denotes a mnemonic character'] }, \"&&Restart\"),\n\t\t});\n\n\t\treturn confirmed;\n\t}\n}\n\n// This is its own service because the localeService depends on IJSONEditingService which causes a circular dependency\n// Once that's ironed out, we can fold this into the localeService.\nclass NativeActiveLanguagePackService implements IActiveLanguagePackService {\n\t_serviceBrand: undefined;\n\n\tconstructor(\n\t\t@ILanguagePackService private readonly languagePackService: ILanguagePackService\n\t) { }\n\n\tasync getExtensionIdProvidingCurrentLocale(): Promise<string | undefined> {\n\t\tconst language = Language.value();\n\t\tif (language === LANGUAGE_DEFAULT) {\n\t\t\treturn undefined;\n\t\t}\n\t\tconst languages = await this.languagePackService.getInstalledLanguages();\n\t\tconst languagePack = languages.find(l => l.id === language);\n\t\treturn languagePack?.extensionId;\n\t}\n}\n\nregisterSingleton(ILocaleService, NativeLocaleService, InstantiationType.Delayed);\nregisterSingleton(IActiveLanguagePackService, NativeActiveLanguagePackService, InstantiationType.Delayed);\n"],
  "mappings": "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",
  "names": []
}
