{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/localization/browser/localeService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { localize } from '../../../../nls.js';\nimport { Language, LANGUAGE_DEFAULT } from '../../../../base/common/platform.js';\nimport { IDialogService } from '../../../../platform/dialogs/common/dialogs.js';\nimport { ILanguagePackItem } from '../../../../platform/languagePacks/common/languagePacks.js';\nimport { IActiveLanguagePackService, ILocaleService } from '../common/locale.js';\nimport { IHostService } from '../../host/browser/host.js';\nimport { IProductService } from '../../../../platform/product/common/productService.js';\nimport { InstantiationType, registerSingleton } from '../../../../platform/instantiation/common/extensions.js';\nimport { CancellationToken } from '../../../../base/common/cancellation.js';\nimport { IExtensionGalleryService } from '../../../../platform/extensionManagement/common/extensionManagement.js';\nimport { ILogService } from '../../../../platform/log/common/log.js';\n\nconst localeStorage = new class LocaleStorage {\n\n\tprivate static readonly LOCAL_STORAGE_LOCALE_KEY = 'vscode.nls.locale';\n\tprivate static readonly LOCAL_STORAGE_EXTENSION_ID_KEY = 'vscode.nls.languagePackExtensionId';\n\n\tsetLocale(locale: string): void {\n\t\tlocalStorage.setItem(LocaleStorage.LOCAL_STORAGE_LOCALE_KEY, locale);\n\t\tthis.doSetLocaleToCookie(locale);\n\t}\n\n\tprivate doSetLocaleToCookie(locale: string): void {\n\t\tdocument.cookie = `${LocaleStorage.LOCAL_STORAGE_LOCALE_KEY}=${locale};path=/;max-age=3153600000`;\n\t}\n\n\tclearLocale(): void {\n\t\tlocalStorage.removeItem(LocaleStorage.LOCAL_STORAGE_LOCALE_KEY);\n\t\tthis.doClearLocaleToCookie();\n\t}\n\n\tprivate doClearLocaleToCookie(): void {\n\t\tdocument.cookie = `${LocaleStorage.LOCAL_STORAGE_LOCALE_KEY}=;path=/;max-age=0`;\n\t}\n\n\tsetExtensionId(extensionId: string): void {\n\t\tlocalStorage.setItem(LocaleStorage.LOCAL_STORAGE_EXTENSION_ID_KEY, extensionId);\n\t}\n\n\tgetExtensionId(): string | null {\n\t\treturn localStorage.getItem(LocaleStorage.LOCAL_STORAGE_EXTENSION_ID_KEY);\n\t}\n\n\tclearExtensionId(): void {\n\t\tlocalStorage.removeItem(LocaleStorage.LOCAL_STORAGE_EXTENSION_ID_KEY);\n\t}\n};\n\nexport class WebLocaleService implements ILocaleService {\n\n\tdeclare readonly _serviceBrand: undefined;\n\n\tconstructor(\n\t\t@IDialogService private readonly dialogService: IDialogService,\n\t\t@IHostService private readonly hostService: IHostService,\n\t\t@IProductService private readonly productService: IProductService\n\t) { }\n\n\tasync setLocale(languagePackItem: ILanguagePackItem, _skipDialog = false): Promise<void> {\n\t\tconst locale = languagePackItem.id;\n\t\tif (locale === Language.value() || (!locale && Language.value() === navigator.language.toLowerCase())) {\n\t\t\treturn;\n\t\t}\n\t\tif (locale) {\n\t\t\tlocaleStorage.setLocale(locale);\n\t\t\tif (languagePackItem.extensionId) {\n\t\t\t\tlocaleStorage.setExtensionId(languagePackItem.extensionId);\n\t\t\t}\n\t\t} else {\n\t\t\tlocaleStorage.clearLocale();\n\t\t\tlocaleStorage.clearExtensionId();\n\t\t}\n\n\t\tconst restartDialog = await this.dialogService.confirm({\n\t\t\ttype: 'info',\n\t\t\tmessage: localize('relaunchDisplayLanguageMessage', \"To change the display language, {0} needs to reload\", this.productService.nameLong),\n\t\t\tdetail: localize('relaunchDisplayLanguageDetail', \"Press the reload button to refresh the page and set the display language to {0}.\", languagePackItem.label),\n\t\t\tprimaryButton: localize({ key: 'reload', comment: ['&& denotes a mnemonic character'] }, \"&&Reload\"),\n\t\t});\n\n\t\tif (restartDialog.confirmed) {\n\t\t\tthis.hostService.restart();\n\t\t}\n\t}\n\n\tasync clearLocalePreference(): Promise<void> {\n\t\tlocaleStorage.clearLocale();\n\t\tlocaleStorage.clearExtensionId();\n\n\t\tif (Language.value() === navigator.language.toLowerCase()) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst restartDialog = await this.dialogService.confirm({\n\t\t\ttype: 'info',\n\t\t\tmessage: localize('clearDisplayLanguageMessage', \"To change the display language, {0} needs to reload\", this.productService.nameLong),\n\t\t\tdetail: localize('clearDisplayLanguageDetail', \"Press the reload button to refresh the page and use your browser's language.\"),\n\t\t\tprimaryButton: localize({ key: 'reload', comment: ['&& denotes a mnemonic character'] }, \"&&Reload\"),\n\t\t});\n\n\t\tif (restartDialog.confirmed) {\n\t\t\tthis.hostService.restart();\n\t\t}\n\t}\n}\n\nclass WebActiveLanguagePackService implements IActiveLanguagePackService {\n\t_serviceBrand: undefined;\n\n\tconstructor(\n\t\t@IExtensionGalleryService private readonly galleryService: IExtensionGalleryService,\n\t\t@ILogService private readonly logService: ILogService\n\t) { }\n\n\tasync getExtensionIdProvidingCurrentLocale(): Promise<string | undefined> {\n\t\tconst language = Language.value();\n\t\tif (language === LANGUAGE_DEFAULT) {\n\t\t\treturn undefined;\n\t\t}\n\t\tconst extensionId = localeStorage.getExtensionId();\n\t\tif (extensionId) {\n\t\t\treturn extensionId;\n\t\t}\n\n\t\tif (!this.galleryService.isEnabled()) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\ttry {\n\t\t\tconst tagResult = await this.galleryService.query({ text: `tag:lp-${language}` }, CancellationToken.None);\n\n\t\t\t// Only install extensions that are published by Microsoft and start with vscode-language-pack for extra certainty\n\t\t\tconst extensionToInstall = tagResult.firstPage.find(e => e.publisher === 'MS-CEINTL' && e.name.startsWith('vscode-language-pack'));\n\t\t\tif (extensionToInstall) {\n\t\t\t\tlocaleStorage.setExtensionId(extensionToInstall.identifier.id);\n\t\t\t\treturn extensionToInstall.identifier.id;\n\t\t\t}\n\n\t\t\t// TODO: If a non-Microsoft language pack is installed, we should prompt the user asking if they want to install that.\n\t\t\t// Since no such language packs exist yet, we can wait until that happens to implement this.\n\t\t} catch (e) {\n\t\t\t// Best effort\n\t\t\tthis.logService.error(e);\n\t\t}\n\n\t\treturn undefined;\n\t}\n}\n\nregisterSingleton(ILocaleService, WebLocaleService, InstantiationType.Delayed);\nregisterSingleton(IActiveLanguagePackService, WebActiveLanguagePackService, InstantiationType.Delayed);\n"],
  "mappings": "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",
  "names": []
}
