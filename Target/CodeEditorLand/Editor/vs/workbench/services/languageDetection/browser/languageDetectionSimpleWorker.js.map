{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/languageDetection/browser/languageDetectionSimpleWorker.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport type { ModelOperations, ModelResult } from '@vscode/vscode-languagedetection';\nimport { importAMDNodeModule } from '../../../../amdX.js';\nimport { StopWatch } from '../../../../base/common/stopwatch.js';\nimport { IRequestHandler, IWorkerServer } from '../../../../base/common/worker/simpleWorker.js';\nimport { LanguageDetectionWorkerHost, ILanguageDetectionWorker } from './languageDetectionWorker.protocol.js';\nimport { WorkerTextModelSyncServer } from '../../../../editor/common/services/textModelSync/textModelSync.impl.js';\n\ntype RegexpModel = { detect: (inp: string, langBiases: Record<string, number>, supportedLangs?: string[]) => string | undefined };\n\n/**\n * Defines the worker entry point. Must be exported and named `create`.\n * @skipMangle\n */\nexport function create(workerServer: IWorkerServer): IRequestHandler {\n\treturn new LanguageDetectionSimpleWorker(workerServer);\n}\n\n/**\n * @internal\n */\nexport class LanguageDetectionSimpleWorker implements ILanguageDetectionWorker {\n\t_requestHandlerBrand: any;\n\n\tprivate static readonly expectedRelativeConfidence = 0.2;\n\tprivate static readonly positiveConfidenceCorrectionBucket1 = 0.05;\n\tprivate static readonly positiveConfidenceCorrectionBucket2 = 0.025;\n\tprivate static readonly negativeConfidenceCorrection = 0.5;\n\n\tprivate readonly _workerTextModelSyncServer = new WorkerTextModelSyncServer();\n\n\tprivate readonly _host: LanguageDetectionWorkerHost;\n\tprivate _regexpModel: RegexpModel | undefined;\n\tprivate _regexpLoadFailed: boolean = false;\n\n\tprivate _modelOperations: ModelOperations | undefined;\n\tprivate _loadFailed: boolean = false;\n\n\tprivate modelIdToCoreId = new Map<string, string | undefined>();\n\n\tconstructor(workerServer: IWorkerServer) {\n\t\tthis._host = LanguageDetectionWorkerHost.getChannel(workerServer);\n\t\tthis._workerTextModelSyncServer.bindToServer(workerServer);\n\t}\n\n\tpublic async $detectLanguage(uri: string, langBiases: Record<string, number> | undefined, preferHistory: boolean, supportedLangs?: string[]): Promise<string | undefined> {\n\t\tconst languages: string[] = [];\n\t\tconst confidences: number[] = [];\n\t\tconst stopWatch = new StopWatch();\n\t\tconst documentTextSample = this.getTextForDetection(uri);\n\t\tif (!documentTextSample) { return; }\n\n\t\tconst neuralResolver = async () => {\n\t\t\tfor await (const language of this.detectLanguagesImpl(documentTextSample)) {\n\t\t\t\tif (!this.modelIdToCoreId.has(language.languageId)) {\n\t\t\t\t\tthis.modelIdToCoreId.set(language.languageId, await this._host.$getLanguageId(language.languageId));\n\t\t\t\t}\n\t\t\t\tconst coreId = this.modelIdToCoreId.get(language.languageId);\n\t\t\t\tif (coreId && (!supportedLangs?.length || supportedLangs.includes(coreId))) {\n\t\t\t\t\tlanguages.push(coreId);\n\t\t\t\t\tconfidences.push(language.confidence);\n\t\t\t\t}\n\t\t\t}\n\t\t\tstopWatch.stop();\n\n\t\t\tif (languages.length) {\n\t\t\t\tthis._host.$sendTelemetryEvent(languages, confidences, stopWatch.elapsed());\n\t\t\t\treturn languages[0];\n\t\t\t}\n\t\t\treturn undefined;\n\t\t};\n\n\t\tconst historicalResolver = async () => this.runRegexpModel(documentTextSample, langBiases ?? {}, supportedLangs);\n\n\t\tif (preferHistory) {\n\t\t\tconst history = await historicalResolver();\n\t\t\tif (history) { return history; }\n\t\t\tconst neural = await neuralResolver();\n\t\t\tif (neural) { return neural; }\n\t\t} else {\n\t\t\tconst neural = await neuralResolver();\n\t\t\tif (neural) { return neural; }\n\t\t\tconst history = await historicalResolver();\n\t\t\tif (history) { return history; }\n\t\t}\n\n\t\treturn undefined;\n\t}\n\n\tprivate getTextForDetection(uri: string): string | undefined {\n\t\tconst editorModel = this._workerTextModelSyncServer.getModel(uri);\n\t\tif (!editorModel) { return; }\n\n\t\tconst end = editorModel.positionAt(10000);\n\t\tconst content = editorModel.getValueInRange({\n\t\t\tstartColumn: 1,\n\t\t\tstartLineNumber: 1,\n\t\t\tendColumn: end.column,\n\t\t\tendLineNumber: end.lineNumber\n\t\t});\n\t\treturn content;\n\t}\n\n\tprivate async getRegexpModel(): Promise<RegexpModel | undefined> {\n\t\tif (this._regexpLoadFailed) {\n\t\t\treturn;\n\t\t}\n\t\tif (this._regexpModel) {\n\t\t\treturn this._regexpModel;\n\t\t}\n\t\tconst uri: string = await this._host.$getRegexpModelUri();\n\t\ttry {\n\t\t\tthis._regexpModel = await importAMDNodeModule(uri, '') as RegexpModel;\n\t\t\treturn this._regexpModel;\n\t\t} catch (e) {\n\t\t\tthis._regexpLoadFailed = true;\n\t\t\t// console.warn('error loading language detection model', e);\n\t\t\treturn;\n\t\t}\n\t}\n\n\tprivate async runRegexpModel(content: string, langBiases: Record<string, number>, supportedLangs?: string[]): Promise<string | undefined> {\n\t\tconst regexpModel = await this.getRegexpModel();\n\t\tif (!regexpModel) { return; }\n\n\t\tif (supportedLangs?.length) {\n\t\t\t// When using supportedLangs, normally computed biases are too extreme. Just use a \"bitmask\" of sorts.\n\t\t\tfor (const lang of Object.keys(langBiases)) {\n\t\t\t\tif (supportedLangs.includes(lang)) {\n\t\t\t\t\tlangBiases[lang] = 1;\n\t\t\t\t} else {\n\t\t\t\t\tlangBiases[lang] = 0;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tconst detected = regexpModel.detect(content, langBiases, supportedLangs);\n\t\treturn detected;\n\t}\n\n\tprivate async getModelOperations(): Promise<ModelOperations> {\n\t\tif (this._modelOperations) {\n\t\t\treturn this._modelOperations;\n\t\t}\n\n\t\tconst uri: string = await this._host.$getIndexJsUri();\n\t\tconst { ModelOperations } = await importAMDNodeModule(uri, '') as typeof import('@vscode/vscode-languagedetection');\n\t\tthis._modelOperations = new ModelOperations({\n\t\t\tmodelJsonLoaderFunc: async () => {\n\t\t\t\tconst response = await fetch(await this._host.$getModelJsonUri());\n\t\t\t\ttry {\n\t\t\t\t\tconst modelJSON = await response.json();\n\t\t\t\t\treturn modelJSON;\n\t\t\t\t} catch (e) {\n\t\t\t\t\tconst message = `Failed to parse model JSON.`;\n\t\t\t\t\tthrow new Error(message);\n\t\t\t\t}\n\t\t\t},\n\t\t\tweightsLoaderFunc: async () => {\n\t\t\t\tconst response = await fetch(await this._host.$getWeightsUri());\n\t\t\t\tconst buffer = await response.arrayBuffer();\n\t\t\t\treturn buffer;\n\t\t\t}\n\t\t});\n\n\t\treturn this._modelOperations;\n\t}\n\n\t// This adjusts the language confidence scores to be more accurate based on:\n\t// * VS Code's language usage\n\t// * Languages with 'problematic' syntaxes that have caused incorrect language detection\n\tprivate adjustLanguageConfidence(modelResult: ModelResult): ModelResult {\n\t\tswitch (modelResult.languageId) {\n\t\t\t// For the following languages, we increase the confidence because\n\t\t\t// these are commonly used languages in VS Code and supported\n\t\t\t// by the model.\n\t\t\tcase 'js':\n\t\t\tcase 'html':\n\t\t\tcase 'json':\n\t\t\tcase 'ts':\n\t\t\tcase 'css':\n\t\t\tcase 'py':\n\t\t\tcase 'xml':\n\t\t\tcase 'php':\n\t\t\t\tmodelResult.confidence += LanguageDetectionSimpleWorker.positiveConfidenceCorrectionBucket1;\n\t\t\t\tbreak;\n\t\t\t// case 'yaml': // YAML has been know to cause incorrect language detection because the language is pretty simple. We don't want to increase the confidence for this.\n\t\t\tcase 'cpp':\n\t\t\tcase 'sh':\n\t\t\tcase 'java':\n\t\t\tcase 'cs':\n\t\t\tcase 'c':\n\t\t\t\tmodelResult.confidence += LanguageDetectionSimpleWorker.positiveConfidenceCorrectionBucket2;\n\t\t\t\tbreak;\n\n\t\t\t// For the following languages, we need to be extra confident that the language is correct because\n\t\t\t// we've had issues like #131912 that caused incorrect guesses. To enforce this, we subtract the\n\t\t\t// negativeConfidenceCorrection from the confidence.\n\n\t\t\t// languages that are provided by default in VS Code\n\t\t\tcase 'bat':\n\t\t\tcase 'ini':\n\t\t\tcase 'makefile':\n\t\t\tcase 'sql':\n\t\t\t// languages that aren't provided by default in VS Code\n\t\t\tcase 'csv':\n\t\t\tcase 'toml':\n\t\t\t\t// Other considerations for negativeConfidenceCorrection that\n\t\t\t\t// aren't built in but suported by the model include:\n\t\t\t\t// * Assembly, TeX - These languages didn't have clear language modes in the community\n\t\t\t\t// * Markdown, Dockerfile - These languages are simple but they embed other languages\n\t\t\t\tmodelResult.confidence -= LanguageDetectionSimpleWorker.negativeConfidenceCorrection;\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tbreak;\n\n\t\t}\n\t\treturn modelResult;\n\t}\n\n\tprivate async * detectLanguagesImpl(content: string): AsyncGenerator<ModelResult, void, unknown> {\n\t\tif (this._loadFailed) {\n\t\t\treturn;\n\t\t}\n\n\t\tlet modelOperations: ModelOperations | undefined;\n\t\ttry {\n\t\t\tmodelOperations = await this.getModelOperations();\n\t\t} catch (e) {\n\t\t\tconsole.log(e);\n\t\t\tthis._loadFailed = true;\n\t\t\treturn;\n\t\t}\n\n\t\tlet modelResults: ModelResult[] | undefined;\n\n\t\ttry {\n\t\t\tmodelResults = await modelOperations.runModel(content);\n\t\t} catch (e) {\n\t\t\tconsole.warn(e);\n\t\t}\n\n\t\tif (!modelResults\n\t\t\t|| modelResults.length === 0\n\t\t\t|| modelResults[0].confidence < LanguageDetectionSimpleWorker.expectedRelativeConfidence) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst firstModelResult = this.adjustLanguageConfidence(modelResults[0]);\n\t\tif (firstModelResult.confidence < LanguageDetectionSimpleWorker.expectedRelativeConfidence) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst possibleLanguages: ModelResult[] = [firstModelResult];\n\n\t\tfor (let current of modelResults) {\n\t\t\tif (current === firstModelResult) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tcurrent = this.adjustLanguageConfidence(current);\n\t\t\tconst currentHighest = possibleLanguages[possibleLanguages.length - 1];\n\n\t\t\tif (currentHighest.confidence - current.confidence >= LanguageDetectionSimpleWorker.expectedRelativeConfidence) {\n\t\t\t\twhile (possibleLanguages.length) {\n\t\t\t\t\tyield possibleLanguages.shift()!;\n\t\t\t\t}\n\t\t\t\tif (current.confidence > LanguageDetectionSimpleWorker.expectedRelativeConfidence) {\n\t\t\t\t\tpossibleLanguages.push(current);\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\treturn;\n\t\t\t} else {\n\t\t\t\tif (current.confidence > LanguageDetectionSimpleWorker.expectedRelativeConfidence) {\n\t\t\t\t\tpossibleLanguages.push(current);\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
