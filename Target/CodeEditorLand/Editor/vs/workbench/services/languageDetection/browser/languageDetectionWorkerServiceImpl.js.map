{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/languageDetection/browser/languageDetectionWorkerServiceImpl.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Disposable } from '../../../../base/common/lifecycle.js';\nimport { ILanguageDetectionService, ILanguageDetectionStats, LanguageDetectionStatsClassification, LanguageDetectionStatsId } from '../common/languageDetectionWorkerService.js';\nimport { AppResourcePath, FileAccess, nodeModulesAsarPath, nodeModulesPath, Schemas } from '../../../../base/common/network.js';\nimport { IWorkbenchEnvironmentService } from '../../environment/common/environmentService.js';\nimport { IConfigurationService } from '../../../../platform/configuration/common/configuration.js';\nimport { ILanguageService } from '../../../../editor/common/languages/language.js';\nimport { URI } from '../../../../base/common/uri.js';\nimport { isWeb } from '../../../../base/common/platform.js';\nimport { InstantiationType, registerSingleton } from '../../../../platform/instantiation/common/extensions.js';\nimport { IModelService } from '../../../../editor/common/services/model.js';\nimport { IWorkerClient } from '../../../../base/common/worker/simpleWorker.js';\nimport { ITelemetryService } from '../../../../platform/telemetry/common/telemetry.js';\nimport { IDiagnosticsService } from '../../../../platform/diagnostics/common/diagnostics.js';\nimport { IWorkspaceContextService } from '../../../../platform/workspace/common/workspace.js';\nimport { IEditorService } from '../../editor/common/editorService.js';\nimport { IStorageService, StorageScope, StorageTarget } from '../../../../platform/storage/common/storage.js';\nimport { LRUCache } from '../../../../base/common/map.js';\nimport { ILogService } from '../../../../platform/log/common/log.js';\nimport { canASAR } from '../../../../base/common/amd.js';\nimport { createWebWorker } from '../../../../base/browser/defaultWorkerFactory.js';\nimport { WorkerTextModelSyncClient } from '../../../../editor/common/services/textModelSync/textModelSync.impl.js';\nimport { ILanguageDetectionWorker, LanguageDetectionWorkerHost } from './languageDetectionWorker.protocol.js';\n\nconst TOP_LANG_COUNTS = 12;\n\nconst regexpModuleLocation: AppResourcePath = `${nodeModulesPath}/vscode-regexp-languagedetection`;\nconst regexpModuleLocationAsar: AppResourcePath = `${nodeModulesAsarPath}/vscode-regexp-languagedetection`;\nconst moduleLocation: AppResourcePath = `${nodeModulesPath}/@vscode/vscode-languagedetection`;\nconst moduleLocationAsar: AppResourcePath = `${nodeModulesAsarPath}/@vscode/vscode-languagedetection`;\n\nexport class LanguageDetectionService extends Disposable implements ILanguageDetectionService {\n\tstatic readonly enablementSettingKey = 'workbench.editor.languageDetection';\n\tstatic readonly historyBasedEnablementConfig = 'workbench.editor.historyBasedLanguageDetection';\n\tstatic readonly preferHistoryConfig = 'workbench.editor.preferHistoryBasedLanguageDetection';\n\tstatic readonly workspaceOpenedLanguagesStorageKey = 'workbench.editor.languageDetectionOpenedLanguages.workspace';\n\tstatic readonly globalOpenedLanguagesStorageKey = 'workbench.editor.languageDetectionOpenedLanguages.global';\n\n\t_serviceBrand: undefined;\n\n\tprivate _languageDetectionWorkerClient: LanguageDetectionWorkerClient;\n\n\tprivate hasResolvedWorkspaceLanguageIds = false;\n\tprivate workspaceLanguageIds = new Set<string>();\n\tprivate sessionOpenedLanguageIds = new Set<string>();\n\tprivate historicalGlobalOpenedLanguageIds = new LRUCache<string, true>(TOP_LANG_COUNTS);\n\tprivate historicalWorkspaceOpenedLanguageIds = new LRUCache<string, true>(TOP_LANG_COUNTS);\n\tprivate dirtyBiases: boolean = true;\n\tprivate langBiases: Record<string, number> = {};\n\n\tconstructor(\n\t\t@IWorkbenchEnvironmentService private readonly _environmentService: IWorkbenchEnvironmentService,\n\t\t@ILanguageService languageService: ILanguageService,\n\t\t@IConfigurationService private readonly _configurationService: IConfigurationService,\n\t\t@IDiagnosticsService private readonly _diagnosticsService: IDiagnosticsService,\n\t\t@IWorkspaceContextService private readonly _workspaceContextService: IWorkspaceContextService,\n\t\t@IModelService modelService: IModelService,\n\t\t@IEditorService private readonly _editorService: IEditorService,\n\t\t@ITelemetryService telemetryService: ITelemetryService,\n\t\t@IStorageService storageService: IStorageService,\n\t\t@ILogService private readonly _logService: ILogService\n\t) {\n\t\tsuper();\n\n\t\tconst useAsar = canASAR && this._environmentService.isBuilt && !isWeb;\n\t\tthis._languageDetectionWorkerClient = this._register(new LanguageDetectionWorkerClient(\n\t\t\tmodelService,\n\t\t\tlanguageService,\n\t\t\ttelemetryService,\n\t\t\t// TODO@esm: See if it's possible to bundle vscode-languagedetection\n\t\t\tuseAsar\n\t\t\t\t? FileAccess.asBrowserUri(`${moduleLocationAsar}/dist/lib/index.js`).toString(true)\n\t\t\t\t: FileAccess.asBrowserUri(`${moduleLocation}/dist/lib/index.js`).toString(true),\n\t\t\tuseAsar\n\t\t\t\t? FileAccess.asBrowserUri(`${moduleLocationAsar}/model/model.json`).toString(true)\n\t\t\t\t: FileAccess.asBrowserUri(`${moduleLocation}/model/model.json`).toString(true),\n\t\t\tuseAsar\n\t\t\t\t? FileAccess.asBrowserUri(`${moduleLocationAsar}/model/group1-shard1of1.bin`).toString(true)\n\t\t\t\t: FileAccess.asBrowserUri(`${moduleLocation}/model/group1-shard1of1.bin`).toString(true),\n\t\t\tuseAsar\n\t\t\t\t? FileAccess.asBrowserUri(`${regexpModuleLocationAsar}/dist/index.js`).toString(true)\n\t\t\t\t: FileAccess.asBrowserUri(`${regexpModuleLocation}/dist/index.js`).toString(true),\n\t\t));\n\n\t\tthis.initEditorOpenedListeners(storageService);\n\t}\n\n\tprivate async resolveWorkspaceLanguageIds() {\n\t\tif (this.hasResolvedWorkspaceLanguageIds) { return; }\n\t\tthis.hasResolvedWorkspaceLanguageIds = true;\n\t\tconst fileExtensions = await this._diagnosticsService.getWorkspaceFileExtensions(this._workspaceContextService.getWorkspace());\n\n\t\tlet count = 0;\n\t\tfor (const ext of fileExtensions.extensions) {\n\t\t\tconst langId = this._languageDetectionWorkerClient.getLanguageId(ext);\n\t\t\tif (langId && count < TOP_LANG_COUNTS) {\n\t\t\t\tthis.workspaceLanguageIds.add(langId);\n\t\t\t\tcount++;\n\t\t\t\tif (count > TOP_LANG_COUNTS) { break; }\n\t\t\t}\n\t\t}\n\t\tthis.dirtyBiases = true;\n\t}\n\n\tpublic isEnabledForLanguage(languageId: string): boolean {\n\t\treturn !!languageId && this._configurationService.getValue<boolean>(LanguageDetectionService.enablementSettingKey, { overrideIdentifier: languageId });\n\t}\n\n\n\tprivate getLanguageBiases(): Record<string, number> {\n\t\tif (!this.dirtyBiases) { return this.langBiases; }\n\n\t\tconst biases: Record<string, number> = {};\n\n\t\t// Give different weight to the biases depending on relevance of source\n\t\tthis.sessionOpenedLanguageIds.forEach(lang =>\n\t\t\tbiases[lang] = (biases[lang] ?? 0) + 7);\n\n\t\tthis.workspaceLanguageIds.forEach(lang =>\n\t\t\tbiases[lang] = (biases[lang] ?? 0) + 5);\n\n\t\t[...this.historicalWorkspaceOpenedLanguageIds.keys()].forEach(lang =>\n\t\t\tbiases[lang] = (biases[lang] ?? 0) + 3);\n\n\t\t[...this.historicalGlobalOpenedLanguageIds.keys()].forEach(lang =>\n\t\t\tbiases[lang] = (biases[lang] ?? 0) + 1);\n\n\t\tthis._logService.trace('Session Languages:', JSON.stringify([...this.sessionOpenedLanguageIds]));\n\t\tthis._logService.trace('Workspace Languages:', JSON.stringify([...this.workspaceLanguageIds]));\n\t\tthis._logService.trace('Historical Workspace Opened Languages:', JSON.stringify([...this.historicalWorkspaceOpenedLanguageIds.keys()]));\n\t\tthis._logService.trace('Historical Globally Opened Languages:', JSON.stringify([...this.historicalGlobalOpenedLanguageIds.keys()]));\n\t\tthis._logService.trace('Computed Language Detection Biases:', JSON.stringify(biases));\n\t\tthis.dirtyBiases = false;\n\t\tthis.langBiases = biases;\n\t\treturn biases;\n\t}\n\n\tasync detectLanguage(resource: URI, supportedLangs?: string[]): Promise<string | undefined> {\n\t\tconst useHistory = this._configurationService.getValue<string[]>(LanguageDetectionService.historyBasedEnablementConfig);\n\t\tconst preferHistory = this._configurationService.getValue<boolean>(LanguageDetectionService.preferHistoryConfig);\n\t\tif (useHistory) {\n\t\t\tawait this.resolveWorkspaceLanguageIds();\n\t\t}\n\t\tconst biases = useHistory ? this.getLanguageBiases() : undefined;\n\t\treturn this._languageDetectionWorkerClient.detectLanguage(resource, biases, preferHistory, supportedLangs);\n\t}\n\n\t// TODO: explore using the history service or something similar to provide this list of opened editors\n\t// so this service can support delayed instantiation. This may be tricky since it seems the IHistoryService\n\t// only gives history for a workspace... where this takes advantage of history at a global level as well.\n\tprivate initEditorOpenedListeners(storageService: IStorageService) {\n\t\ttry {\n\t\t\tconst globalLangHistoryData = JSON.parse(storageService.get(LanguageDetectionService.globalOpenedLanguagesStorageKey, StorageScope.PROFILE, '[]'));\n\t\t\tthis.historicalGlobalOpenedLanguageIds.fromJSON(globalLangHistoryData);\n\t\t} catch (e) { console.error(e); }\n\n\t\ttry {\n\t\t\tconst workspaceLangHistoryData = JSON.parse(storageService.get(LanguageDetectionService.workspaceOpenedLanguagesStorageKey, StorageScope.WORKSPACE, '[]'));\n\t\t\tthis.historicalWorkspaceOpenedLanguageIds.fromJSON(workspaceLangHistoryData);\n\t\t} catch (e) { console.error(e); }\n\n\t\tthis._register(this._editorService.onDidActiveEditorChange(() => {\n\t\t\tconst activeLanguage = this._editorService.activeTextEditorLanguageId;\n\t\t\tif (activeLanguage && this._editorService.activeEditor?.resource?.scheme !== Schemas.untitled) {\n\t\t\t\tthis.sessionOpenedLanguageIds.add(activeLanguage);\n\t\t\t\tthis.historicalGlobalOpenedLanguageIds.set(activeLanguage, true);\n\t\t\t\tthis.historicalWorkspaceOpenedLanguageIds.set(activeLanguage, true);\n\t\t\t\tstorageService.store(LanguageDetectionService.globalOpenedLanguagesStorageKey, JSON.stringify(this.historicalGlobalOpenedLanguageIds.toJSON()), StorageScope.PROFILE, StorageTarget.MACHINE);\n\t\t\t\tstorageService.store(LanguageDetectionService.workspaceOpenedLanguagesStorageKey, JSON.stringify(this.historicalWorkspaceOpenedLanguageIds.toJSON()), StorageScope.WORKSPACE, StorageTarget.MACHINE);\n\t\t\t\tthis.dirtyBiases = true;\n\t\t\t}\n\t\t}));\n\t}\n}\n\nexport class LanguageDetectionWorkerClient extends Disposable {\n\tprivate worker: {\n\t\tworkerClient: IWorkerClient<ILanguageDetectionWorker>;\n\t\tworkerTextModelSyncClient: WorkerTextModelSyncClient;\n\t} | undefined;\n\n\tconstructor(\n\t\tprivate readonly _modelService: IModelService,\n\t\tprivate readonly _languageService: ILanguageService,\n\t\tprivate readonly _telemetryService: ITelemetryService,\n\t\tprivate readonly _indexJsUri: string,\n\t\tprivate readonly _modelJsonUri: string,\n\t\tprivate readonly _weightsUri: string,\n\t\tprivate readonly _regexpModelUri: string,\n\t) {\n\t\tsuper();\n\t}\n\n\tprivate _getOrCreateLanguageDetectionWorker(): {\n\t\tworkerClient: IWorkerClient<ILanguageDetectionWorker>;\n\t\tworkerTextModelSyncClient: WorkerTextModelSyncClient;\n\t} {\n\t\tif (!this.worker) {\n\t\t\tconst workerClient = this._register(createWebWorker<ILanguageDetectionWorker>(\n\t\t\t\t'vs/workbench/services/languageDetection/browser/languageDetectionSimpleWorker',\n\t\t\t\t'LanguageDetectionWorker'\n\t\t\t));\n\t\t\tLanguageDetectionWorkerHost.setChannel(workerClient, {\n\t\t\t\t$getIndexJsUri: async () => this.getIndexJsUri(),\n\t\t\t\t$getLanguageId: async (languageIdOrExt) => this.getLanguageId(languageIdOrExt),\n\t\t\t\t$sendTelemetryEvent: async (languages, confidences, timeSpent) => this.sendTelemetryEvent(languages, confidences, timeSpent),\n\t\t\t\t$getRegexpModelUri: async () => this.getRegexpModelUri(),\n\t\t\t\t$getModelJsonUri: async () => this.getModelJsonUri(),\n\t\t\t\t$getWeightsUri: async () => this.getWeightsUri(),\n\t\t\t});\n\t\t\tconst workerTextModelSyncClient = WorkerTextModelSyncClient.create(workerClient, this._modelService);\n\t\t\tthis.worker = { workerClient, workerTextModelSyncClient };\n\t\t}\n\t\treturn this.worker;\n\t}\n\n\tprivate _guessLanguageIdByUri(uri: URI): string | undefined {\n\t\tconst guess = this._languageService.guessLanguageIdByFilepathOrFirstLine(uri);\n\t\tif (guess && guess !== 'unknown') {\n\t\t\treturn guess;\n\t\t}\n\t\treturn undefined;\n\t}\n\n\tasync getIndexJsUri() {\n\t\treturn this._indexJsUri;\n\t}\n\n\tgetLanguageId(languageIdOrExt: string | undefined) {\n\t\tif (!languageIdOrExt) {\n\t\t\treturn undefined;\n\t\t}\n\t\tif (this._languageService.isRegisteredLanguageId(languageIdOrExt)) {\n\t\t\treturn languageIdOrExt;\n\t\t}\n\t\tconst guessed = this._guessLanguageIdByUri(URI.file(`file.${languageIdOrExt}`));\n\t\tif (!guessed || guessed === 'unknown') {\n\t\t\treturn undefined;\n\t\t}\n\t\treturn guessed;\n\t}\n\n\tasync getModelJsonUri() {\n\t\treturn this._modelJsonUri;\n\t}\n\n\tasync getWeightsUri() {\n\t\treturn this._weightsUri;\n\t}\n\n\tasync getRegexpModelUri() {\n\t\treturn this._regexpModelUri;\n\t}\n\n\tasync sendTelemetryEvent(languages: string[], confidences: number[], timeSpent: number): Promise<void> {\n\t\tthis._telemetryService.publicLog2<ILanguageDetectionStats, LanguageDetectionStatsClassification>(LanguageDetectionStatsId, {\n\t\t\tlanguages: languages.join(','),\n\t\t\tconfidences: confidences.join(','),\n\t\t\ttimeSpent\n\t\t});\n\t}\n\n\tpublic async detectLanguage(resource: URI, langBiases: Record<string, number> | undefined, preferHistory: boolean, supportedLangs?: string[]): Promise<string | undefined> {\n\t\tconst startTime = Date.now();\n\t\tconst quickGuess = this._guessLanguageIdByUri(resource);\n\t\tif (quickGuess) {\n\t\t\treturn quickGuess;\n\t\t}\n\n\t\tconst { workerClient, workerTextModelSyncClient } = this._getOrCreateLanguageDetectionWorker();\n\t\tawait workerTextModelSyncClient.ensureSyncedResources([resource]);\n\t\tconst modelId = await workerClient.proxy.$detectLanguage(resource.toString(), langBiases, preferHistory, supportedLangs);\n\t\tconst languageId = this.getLanguageId(modelId);\n\n\t\tconst LanguageDetectionStatsId = 'automaticlanguagedetection.perf';\n\n\t\tinterface ILanguageDetectionPerf {\n\t\t\ttimeSpent: number;\n\t\t\tdetection: string;\n\t\t}\n\n\t\ttype LanguageDetectionPerfClassification = {\n\t\t\towner: 'TylerLeonhardt';\n\t\t\tcomment: 'Helps understand how effective language detection and how long it takes to run';\n\t\t\ttimeSpent: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'The time it took to run language detection' };\n\t\t\tdetection: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'The language that was detected' };\n\t\t};\n\n\t\tthis._telemetryService.publicLog2<ILanguageDetectionPerf, LanguageDetectionPerfClassification>(LanguageDetectionStatsId, {\n\t\t\ttimeSpent: Date.now() - startTime,\n\t\t\tdetection: languageId || 'unknown',\n\t\t});\n\n\t\treturn languageId;\n\t}\n}\n\n// For now we use Eager until we handle keeping track of history better.\nregisterSingleton(ILanguageDetectionService, LanguageDetectionService, InstantiationType.Eager);\n"],
  "mappings": "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",
  "names": ["LanguageDetectionStatsId"]
}
