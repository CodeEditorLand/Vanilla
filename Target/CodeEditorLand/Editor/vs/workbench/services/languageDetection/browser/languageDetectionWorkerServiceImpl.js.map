{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/languageDetection/browser/languageDetectionWorkerServiceImpl.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { createWebWorker } from \"../../../../base/browser/defaultWorkerFactory.js\";\nimport { canASAR } from \"../../../../base/common/amd.js\";\nimport { Disposable } from \"../../../../base/common/lifecycle.js\";\nimport { LRUCache } from \"../../../../base/common/map.js\";\nimport {\n\ttype AppResourcePath,\n\tFileAccess,\n\tSchemas,\n\tnodeModulesAsarPath,\n\tnodeModulesPath,\n} from \"../../../../base/common/network.js\";\nimport { isWeb } from \"../../../../base/common/platform.js\";\nimport { URI } from \"../../../../base/common/uri.js\";\nimport type { IWorkerClient } from \"../../../../base/common/worker/simpleWorker.js\";\nimport { ILanguageService } from \"../../../../editor/common/languages/language.js\";\nimport { IModelService } from \"../../../../editor/common/services/model.js\";\nimport { WorkerTextModelSyncClient } from \"../../../../editor/common/services/textModelSync/textModelSync.impl.js\";\nimport { IConfigurationService } from \"../../../../platform/configuration/common/configuration.js\";\nimport { IDiagnosticsService } from \"../../../../platform/diagnostics/common/diagnostics.js\";\nimport {\n\tInstantiationType,\n\tregisterSingleton,\n} from \"../../../../platform/instantiation/common/extensions.js\";\nimport { ILogService } from \"../../../../platform/log/common/log.js\";\nimport {\n\tIStorageService,\n\tStorageScope,\n\tStorageTarget,\n} from \"../../../../platform/storage/common/storage.js\";\nimport { ITelemetryService } from \"../../../../platform/telemetry/common/telemetry.js\";\nimport { IWorkspaceContextService } from \"../../../../platform/workspace/common/workspace.js\";\nimport { IEditorService } from \"../../editor/common/editorService.js\";\nimport { IWorkbenchEnvironmentService } from \"../../environment/common/environmentService.js\";\nimport {\n\tILanguageDetectionService,\n\ttype ILanguageDetectionStats,\n\ttype LanguageDetectionStatsClassification,\n\tLanguageDetectionStatsId,\n} from \"../common/languageDetectionWorkerService.js\";\nimport {\n\ttype ILanguageDetectionWorker,\n\tLanguageDetectionWorkerHost,\n} from \"./languageDetectionWorker.protocol.js\";\n\nconst TOP_LANG_COUNTS = 12;\n\nconst regexpModuleLocation: AppResourcePath = `${nodeModulesPath}/vscode-regexp-languagedetection`;\nconst regexpModuleLocationAsar: AppResourcePath = `${nodeModulesAsarPath}/vscode-regexp-languagedetection`;\nconst moduleLocation: AppResourcePath = `${nodeModulesPath}/@vscode/vscode-languagedetection`;\nconst moduleLocationAsar: AppResourcePath = `${nodeModulesAsarPath}/@vscode/vscode-languagedetection`;\n\nexport class LanguageDetectionService\n\textends Disposable\n\timplements ILanguageDetectionService\n{\n\tstatic readonly enablementSettingKey = \"workbench.editor.languageDetection\";\n\tstatic readonly historyBasedEnablementConfig =\n\t\t\"workbench.editor.historyBasedLanguageDetection\";\n\tstatic readonly preferHistoryConfig =\n\t\t\"workbench.editor.preferHistoryBasedLanguageDetection\";\n\tstatic readonly workspaceOpenedLanguagesStorageKey =\n\t\t\"workbench.editor.languageDetectionOpenedLanguages.workspace\";\n\tstatic readonly globalOpenedLanguagesStorageKey =\n\t\t\"workbench.editor.languageDetectionOpenedLanguages.global\";\n\n\t_serviceBrand: undefined;\n\n\tprivate _languageDetectionWorkerClient: LanguageDetectionWorkerClient;\n\n\tprivate hasResolvedWorkspaceLanguageIds = false;\n\tprivate workspaceLanguageIds = new Set<string>();\n\tprivate sessionOpenedLanguageIds = new Set<string>();\n\tprivate historicalGlobalOpenedLanguageIds = new LRUCache<string, true>(\n\t\tTOP_LANG_COUNTS,\n\t);\n\tprivate historicalWorkspaceOpenedLanguageIds = new LRUCache<string, true>(\n\t\tTOP_LANG_COUNTS,\n\t);\n\tprivate dirtyBiases = true;\n\tprivate langBiases: Record<string, number> = {};\n\n\tconstructor(\n\t\t@IWorkbenchEnvironmentService\n\t\tprivate readonly _environmentService: IWorkbenchEnvironmentService,\n\t\t@ILanguageService languageService: ILanguageService,\n\t\t@IConfigurationService\n\t\tprivate readonly _configurationService: IConfigurationService,\n\t\t@IDiagnosticsService\n\t\tprivate readonly _diagnosticsService: IDiagnosticsService,\n\t\t@IWorkspaceContextService\n\t\tprivate readonly _workspaceContextService: IWorkspaceContextService,\n\t\t@IModelService modelService: IModelService,\n\t\t@IEditorService private readonly _editorService: IEditorService,\n\t\t@ITelemetryService telemetryService: ITelemetryService,\n\t\t@IStorageService storageService: IStorageService,\n\t\t@ILogService private readonly _logService: ILogService,\n\t) {\n\t\tsuper();\n\n\t\tconst useAsar = canASAR && this._environmentService.isBuilt && !isWeb;\n\t\tthis._languageDetectionWorkerClient = this._register(\n\t\t\tnew LanguageDetectionWorkerClient(\n\t\t\t\tmodelService,\n\t\t\t\tlanguageService,\n\t\t\t\ttelemetryService,\n\t\t\t\t// TODO@esm: See if it's possible to bundle vscode-languagedetection\n\t\t\t\tuseAsar\n\t\t\t\t\t? FileAccess.asBrowserUri(\n\t\t\t\t\t\t\t`${moduleLocationAsar}/dist/lib/index.js`,\n\t\t\t\t\t\t).toString(true)\n\t\t\t\t\t: FileAccess.asBrowserUri(\n\t\t\t\t\t\t\t`${moduleLocation}/dist/lib/index.js`,\n\t\t\t\t\t\t).toString(true),\n\t\t\t\tuseAsar\n\t\t\t\t\t? FileAccess.asBrowserUri(\n\t\t\t\t\t\t\t`${moduleLocationAsar}/model/model.json`,\n\t\t\t\t\t\t).toString(true)\n\t\t\t\t\t: FileAccess.asBrowserUri(\n\t\t\t\t\t\t\t`${moduleLocation}/model/model.json`,\n\t\t\t\t\t\t).toString(true),\n\t\t\t\tuseAsar\n\t\t\t\t\t? FileAccess.asBrowserUri(\n\t\t\t\t\t\t\t`${moduleLocationAsar}/model/group1-shard1of1.bin`,\n\t\t\t\t\t\t).toString(true)\n\t\t\t\t\t: FileAccess.asBrowserUri(\n\t\t\t\t\t\t\t`${moduleLocation}/model/group1-shard1of1.bin`,\n\t\t\t\t\t\t).toString(true),\n\t\t\t\tuseAsar\n\t\t\t\t\t? FileAccess.asBrowserUri(\n\t\t\t\t\t\t\t`${regexpModuleLocationAsar}/dist/index.js`,\n\t\t\t\t\t\t).toString(true)\n\t\t\t\t\t: FileAccess.asBrowserUri(\n\t\t\t\t\t\t\t`${regexpModuleLocation}/dist/index.js`,\n\t\t\t\t\t\t).toString(true),\n\t\t\t),\n\t\t);\n\n\t\tthis.initEditorOpenedListeners(storageService);\n\t}\n\n\tprivate async resolveWorkspaceLanguageIds() {\n\t\tif (this.hasResolvedWorkspaceLanguageIds) {\n\t\t\treturn;\n\t\t}\n\t\tthis.hasResolvedWorkspaceLanguageIds = true;\n\t\tconst fileExtensions =\n\t\t\tawait this._diagnosticsService.getWorkspaceFileExtensions(\n\t\t\t\tthis._workspaceContextService.getWorkspace(),\n\t\t\t);\n\n\t\tlet count = 0;\n\t\tfor (const ext of fileExtensions.extensions) {\n\t\t\tconst langId =\n\t\t\t\tthis._languageDetectionWorkerClient.getLanguageId(ext);\n\t\t\tif (langId && count < TOP_LANG_COUNTS) {\n\t\t\t\tthis.workspaceLanguageIds.add(langId);\n\t\t\t\tcount++;\n\t\t\t\tif (count > TOP_LANG_COUNTS) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tthis.dirtyBiases = true;\n\t}\n\n\tpublic isEnabledForLanguage(languageId: string): boolean {\n\t\treturn (\n\t\t\t!!languageId &&\n\t\t\tthis._configurationService.getValue<boolean>(\n\t\t\t\tLanguageDetectionService.enablementSettingKey,\n\t\t\t\t{ overrideIdentifier: languageId },\n\t\t\t)\n\t\t);\n\t}\n\n\tprivate getLanguageBiases(): Record<string, number> {\n\t\tif (!this.dirtyBiases) {\n\t\t\treturn this.langBiases;\n\t\t}\n\n\t\tconst biases: Record<string, number> = {};\n\n\t\t// Give different weight to the biases depending on relevance of source\n\t\tthis.sessionOpenedLanguageIds.forEach(\n\t\t\t(lang) => (biases[lang] = (biases[lang] ?? 0) + 7),\n\t\t);\n\n\t\tthis.workspaceLanguageIds.forEach(\n\t\t\t(lang) => (biases[lang] = (biases[lang] ?? 0) + 5),\n\t\t);\n\n\t\t[...this.historicalWorkspaceOpenedLanguageIds.keys()].forEach(\n\t\t\t(lang) => (biases[lang] = (biases[lang] ?? 0) + 3),\n\t\t);\n\n\t\t[...this.historicalGlobalOpenedLanguageIds.keys()].forEach(\n\t\t\t(lang) => (biases[lang] = (biases[lang] ?? 0) + 1),\n\t\t);\n\n\t\tthis._logService.trace(\n\t\t\t\"Session Languages:\",\n\t\t\tJSON.stringify([...this.sessionOpenedLanguageIds]),\n\t\t);\n\t\tthis._logService.trace(\n\t\t\t\"Workspace Languages:\",\n\t\t\tJSON.stringify([...this.workspaceLanguageIds]),\n\t\t);\n\t\tthis._logService.trace(\n\t\t\t\"Historical Workspace Opened Languages:\",\n\t\t\tJSON.stringify([\n\t\t\t\t...this.historicalWorkspaceOpenedLanguageIds.keys(),\n\t\t\t]),\n\t\t);\n\t\tthis._logService.trace(\n\t\t\t\"Historical Globally Opened Languages:\",\n\t\t\tJSON.stringify([...this.historicalGlobalOpenedLanguageIds.keys()]),\n\t\t);\n\t\tthis._logService.trace(\n\t\t\t\"Computed Language Detection Biases:\",\n\t\t\tJSON.stringify(biases),\n\t\t);\n\t\tthis.dirtyBiases = false;\n\t\tthis.langBiases = biases;\n\t\treturn biases;\n\t}\n\n\tasync detectLanguage(\n\t\tresource: URI,\n\t\tsupportedLangs?: string[],\n\t): Promise<string | undefined> {\n\t\tconst useHistory = this._configurationService.getValue<string[]>(\n\t\t\tLanguageDetectionService.historyBasedEnablementConfig,\n\t\t);\n\t\tconst preferHistory = this._configurationService.getValue<boolean>(\n\t\t\tLanguageDetectionService.preferHistoryConfig,\n\t\t);\n\t\tif (useHistory) {\n\t\t\tawait this.resolveWorkspaceLanguageIds();\n\t\t}\n\t\tconst biases = useHistory ? this.getLanguageBiases() : undefined;\n\t\treturn this._languageDetectionWorkerClient.detectLanguage(\n\t\t\tresource,\n\t\t\tbiases,\n\t\t\tpreferHistory,\n\t\t\tsupportedLangs,\n\t\t);\n\t}\n\n\t// TODO: explore using the history service or something similar to provide this list of opened editors\n\t// so this service can support delayed instantiation. This may be tricky since it seems the IHistoryService\n\t// only gives history for a workspace... where this takes advantage of history at a global level as well.\n\tprivate initEditorOpenedListeners(storageService: IStorageService) {\n\t\ttry {\n\t\t\tconst globalLangHistoryData = JSON.parse(\n\t\t\t\tstorageService.get(\n\t\t\t\t\tLanguageDetectionService.globalOpenedLanguagesStorageKey,\n\t\t\t\t\tStorageScope.PROFILE,\n\t\t\t\t\t\"[]\",\n\t\t\t\t),\n\t\t\t);\n\t\t\tthis.historicalGlobalOpenedLanguageIds.fromJSON(\n\t\t\t\tglobalLangHistoryData,\n\t\t\t);\n\t\t} catch (e) {\n\t\t\tconsole.error(e);\n\t\t}\n\n\t\ttry {\n\t\t\tconst workspaceLangHistoryData = JSON.parse(\n\t\t\t\tstorageService.get(\n\t\t\t\t\tLanguageDetectionService.workspaceOpenedLanguagesStorageKey,\n\t\t\t\t\tStorageScope.WORKSPACE,\n\t\t\t\t\t\"[]\",\n\t\t\t\t),\n\t\t\t);\n\t\t\tthis.historicalWorkspaceOpenedLanguageIds.fromJSON(\n\t\t\t\tworkspaceLangHistoryData,\n\t\t\t);\n\t\t} catch (e) {\n\t\t\tconsole.error(e);\n\t\t}\n\n\t\tthis._register(\n\t\t\tthis._editorService.onDidActiveEditorChange(() => {\n\t\t\t\tconst activeLanguage =\n\t\t\t\t\tthis._editorService.activeTextEditorLanguageId;\n\t\t\t\tif (\n\t\t\t\t\tactiveLanguage &&\n\t\t\t\t\tthis._editorService.activeEditor?.resource?.scheme !==\n\t\t\t\t\t\tSchemas.untitled\n\t\t\t\t) {\n\t\t\t\t\tthis.sessionOpenedLanguageIds.add(activeLanguage);\n\t\t\t\t\tthis.historicalGlobalOpenedLanguageIds.set(\n\t\t\t\t\t\tactiveLanguage,\n\t\t\t\t\t\ttrue,\n\t\t\t\t\t);\n\t\t\t\t\tthis.historicalWorkspaceOpenedLanguageIds.set(\n\t\t\t\t\t\tactiveLanguage,\n\t\t\t\t\t\ttrue,\n\t\t\t\t\t);\n\t\t\t\t\tstorageService.store(\n\t\t\t\t\t\tLanguageDetectionService.globalOpenedLanguagesStorageKey,\n\t\t\t\t\t\tJSON.stringify(\n\t\t\t\t\t\t\tthis.historicalGlobalOpenedLanguageIds.toJSON(),\n\t\t\t\t\t\t),\n\t\t\t\t\t\tStorageScope.PROFILE,\n\t\t\t\t\t\tStorageTarget.MACHINE,\n\t\t\t\t\t);\n\t\t\t\t\tstorageService.store(\n\t\t\t\t\t\tLanguageDetectionService.workspaceOpenedLanguagesStorageKey,\n\t\t\t\t\t\tJSON.stringify(\n\t\t\t\t\t\t\tthis.historicalWorkspaceOpenedLanguageIds.toJSON(),\n\t\t\t\t\t\t),\n\t\t\t\t\t\tStorageScope.WORKSPACE,\n\t\t\t\t\t\tStorageTarget.MACHINE,\n\t\t\t\t\t);\n\t\t\t\t\tthis.dirtyBiases = true;\n\t\t\t\t}\n\t\t\t}),\n\t\t);\n\t}\n}\n\nexport class LanguageDetectionWorkerClient extends Disposable {\n\tprivate worker:\n\t\t| {\n\t\t\t\tworkerClient: IWorkerClient<ILanguageDetectionWorker>;\n\t\t\t\tworkerTextModelSyncClient: WorkerTextModelSyncClient;\n\t\t  }\n\t\t| undefined;\n\n\tconstructor(\n\t\tprivate readonly _modelService: IModelService,\n\t\tprivate readonly _languageService: ILanguageService,\n\t\tprivate readonly _telemetryService: ITelemetryService,\n\t\tprivate readonly _indexJsUri: string,\n\t\tprivate readonly _modelJsonUri: string,\n\t\tprivate readonly _weightsUri: string,\n\t\tprivate readonly _regexpModelUri: string,\n\t) {\n\t\tsuper();\n\t}\n\n\tprivate _getOrCreateLanguageDetectionWorker(): {\n\t\tworkerClient: IWorkerClient<ILanguageDetectionWorker>;\n\t\tworkerTextModelSyncClient: WorkerTextModelSyncClient;\n\t} {\n\t\tif (!this.worker) {\n\t\t\tconst workerClient = this._register(\n\t\t\t\tcreateWebWorker<ILanguageDetectionWorker>(\n\t\t\t\t\t\"vs/workbench/services/languageDetection/browser/languageDetectionSimpleWorker\",\n\t\t\t\t\t\"LanguageDetectionWorker\",\n\t\t\t\t),\n\t\t\t);\n\t\t\tLanguageDetectionWorkerHost.setChannel(workerClient, {\n\t\t\t\t$getIndexJsUri: async () => this.getIndexJsUri(),\n\t\t\t\t$getLanguageId: async (languageIdOrExt) =>\n\t\t\t\t\tthis.getLanguageId(languageIdOrExt),\n\t\t\t\t$sendTelemetryEvent: async (\n\t\t\t\t\tlanguages,\n\t\t\t\t\tconfidences,\n\t\t\t\t\ttimeSpent,\n\t\t\t\t) => this.sendTelemetryEvent(languages, confidences, timeSpent),\n\t\t\t\t$getRegexpModelUri: async () => this.getRegexpModelUri(),\n\t\t\t\t$getModelJsonUri: async () => this.getModelJsonUri(),\n\t\t\t\t$getWeightsUri: async () => this.getWeightsUri(),\n\t\t\t});\n\t\t\tconst workerTextModelSyncClient = WorkerTextModelSyncClient.create(\n\t\t\t\tworkerClient,\n\t\t\t\tthis._modelService,\n\t\t\t);\n\t\t\tthis.worker = { workerClient, workerTextModelSyncClient };\n\t\t}\n\t\treturn this.worker;\n\t}\n\n\tprivate _guessLanguageIdByUri(uri: URI): string | undefined {\n\t\tconst guess =\n\t\t\tthis._languageService.guessLanguageIdByFilepathOrFirstLine(uri);\n\t\tif (guess && guess !== \"unknown\") {\n\t\t\treturn guess;\n\t\t}\n\t\treturn undefined;\n\t}\n\n\tasync getIndexJsUri() {\n\t\treturn this._indexJsUri;\n\t}\n\n\tgetLanguageId(languageIdOrExt: string | undefined) {\n\t\tif (!languageIdOrExt) {\n\t\t\treturn undefined;\n\t\t}\n\t\tif (this._languageService.isRegisteredLanguageId(languageIdOrExt)) {\n\t\t\treturn languageIdOrExt;\n\t\t}\n\t\tconst guessed = this._guessLanguageIdByUri(\n\t\t\tURI.file(`file.${languageIdOrExt}`),\n\t\t);\n\t\tif (!guessed || guessed === \"unknown\") {\n\t\t\treturn undefined;\n\t\t}\n\t\treturn guessed;\n\t}\n\n\tasync getModelJsonUri() {\n\t\treturn this._modelJsonUri;\n\t}\n\n\tasync getWeightsUri() {\n\t\treturn this._weightsUri;\n\t}\n\n\tasync getRegexpModelUri() {\n\t\treturn this._regexpModelUri;\n\t}\n\n\tasync sendTelemetryEvent(\n\t\tlanguages: string[],\n\t\tconfidences: number[],\n\t\ttimeSpent: number,\n\t): Promise<void> {\n\t\tthis._telemetryService.publicLog2<\n\t\t\tILanguageDetectionStats,\n\t\t\tLanguageDetectionStatsClassification\n\t\t>(LanguageDetectionStatsId, {\n\t\t\tlanguages: languages.join(\",\"),\n\t\t\tconfidences: confidences.join(\",\"),\n\t\t\ttimeSpent,\n\t\t});\n\t}\n\n\tpublic async detectLanguage(\n\t\tresource: URI,\n\t\tlangBiases: Record<string, number> | undefined,\n\t\tpreferHistory: boolean,\n\t\tsupportedLangs?: string[],\n\t): Promise<string | undefined> {\n\t\tconst startTime = Date.now();\n\t\tconst quickGuess = this._guessLanguageIdByUri(resource);\n\t\tif (quickGuess) {\n\t\t\treturn quickGuess;\n\t\t}\n\n\t\tconst { workerClient, workerTextModelSyncClient } =\n\t\t\tthis._getOrCreateLanguageDetectionWorker();\n\t\tawait workerTextModelSyncClient.ensureSyncedResources([resource]);\n\t\tconst modelId = await workerClient.proxy.$detectLanguage(\n\t\t\tresource.toString(),\n\t\t\tlangBiases,\n\t\t\tpreferHistory,\n\t\t\tsupportedLangs,\n\t\t);\n\t\tconst languageId = this.getLanguageId(modelId);\n\n\t\tconst LanguageDetectionStatsId = \"automaticlanguagedetection.perf\";\n\n\t\tinterface ILanguageDetectionPerf {\n\t\t\ttimeSpent: number;\n\t\t\tdetection: string;\n\t\t}\n\n\t\ttype LanguageDetectionPerfClassification = {\n\t\t\towner: \"TylerLeonhardt\";\n\t\t\tcomment: \"Helps understand how effective language detection and how long it takes to run\";\n\t\t\ttimeSpent: {\n\t\t\t\tclassification: \"SystemMetaData\";\n\t\t\t\tpurpose: \"FeatureInsight\";\n\t\t\t\tcomment: \"The time it took to run language detection\";\n\t\t\t};\n\t\t\tdetection: {\n\t\t\t\tclassification: \"SystemMetaData\";\n\t\t\t\tpurpose: \"FeatureInsight\";\n\t\t\t\tcomment: \"The language that was detected\";\n\t\t\t};\n\t\t};\n\n\t\tthis._telemetryService.publicLog2<\n\t\t\tILanguageDetectionPerf,\n\t\t\tLanguageDetectionPerfClassification\n\t\t>(LanguageDetectionStatsId, {\n\t\t\ttimeSpent: Date.now() - startTime,\n\t\t\tdetection: languageId || \"unknown\",\n\t\t});\n\n\t\treturn languageId;\n\t}\n}\n\n// For now we use Eager until we handle keeping track of history better.\nregisterSingleton(\n\tILanguageDetectionService,\n\tLanguageDetectionService,\n\tInstantiationType.Eager,\n);\n"],
  "mappings": "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",
  "names": ["LanguageDetectionStatsId"]
}
