{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/languageDetection/common/languageDetectionWorkerService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport type { URI } from \"../../../../base/common/uri.js\";\nimport { createDecorator } from \"../../../../platform/instantiation/common/instantiation.js\";\n\nexport const ILanguageDetectionService =\n\tcreateDecorator<ILanguageDetectionService>(\"ILanguageDetectionService\");\n\nexport const LanguageDetectionLanguageEventSource = \"languageDetection\";\n\nexport interface ILanguageDetectionService {\n\treadonly _serviceBrand: undefined;\n\n\t/**\n\t * @param languageId The languageId to check if language detection is currently enabled.\n\t * @returns whether or not language detection is on for this language.\n\t */\n\tisEnabledForLanguage(languageId: string): boolean;\n\n\t/**\n\t * @param resource The resource to detect the language for.\n\t * @param supportedLangs Optional. When populated, the model will only return languages from the provided list\n\t * @returns the language id for the given resource or undefined if the model is not confident enough.\n\t */\n\tdetectLanguage(\n\t\tresource: URI,\n\t\tsupportedLangs?: string[],\n\t): Promise<string | undefined>;\n}\n\nexport type LanguageDetectionHintConfig = {\n\tuntitledEditors: boolean;\n\tnotebookEditors: boolean;\n};\n\n//#region Telemetry events\n\nexport const AutomaticLanguageDetectionLikelyWrongId =\n\t\"automaticlanguagedetection.likelywrong\";\n\nexport interface IAutomaticLanguageDetectionLikelyWrongData {\n\tcurrentLanguageId: string;\n\tnextLanguageId: string;\n\tlineCount: number;\n\tmodelPreference: string;\n}\n\nexport type AutomaticLanguageDetectionLikelyWrongClassification = {\n\towner: \"TylerLeonhardt,JacksonKearl\";\n\tcomment: \"Used to determine how often language detection is likely wrong.\";\n\tcurrentLanguageId: {\n\t\tclassification: \"SystemMetaData\";\n\t\tpurpose: \"FeatureInsight\";\n\t\tcomment: \"The language id we guessed.\";\n\t};\n\tnextLanguageId: {\n\t\tclassification: \"SystemMetaData\";\n\t\tpurpose: \"FeatureInsight\";\n\t\tcomment: \"The language id the user chose.\";\n\t};\n\tlineCount: {\n\t\tclassification: \"SystemMetaData\";\n\t\tpurpose: \"FeatureInsight\";\n\t\tcomment: \"The number of lines in the file.\";\n\t};\n\tmodelPreference: {\n\t\tclassification: \"SystemMetaData\";\n\t\tpurpose: \"FeatureInsight\";\n\t\tcomment: \"What the user's model preference is.\";\n\t};\n};\n\nexport const LanguageDetectionStatsId = \"automaticlanguagedetection.stats\";\n\nexport interface ILanguageDetectionStats {\n\tlanguages: string;\n\tconfidences: string;\n\ttimeSpent: number;\n}\n\nexport type LanguageDetectionStatsClassification = {\n\towner: \"TylerLeonhardt,JacksonKearl\";\n\tcomment: \"Used to determine how definitive language detection is and how long it takes.\";\n\tlanguages: {\n\t\tclassification: \"SystemMetaData\";\n\t\tpurpose: \"FeatureInsight\";\n\t\tcomment: \"The languages the model supports.\";\n\t};\n\tconfidences: {\n\t\tclassification: \"SystemMetaData\";\n\t\tpurpose: \"FeatureInsight\";\n\t\tcomment: \"The confidences of those languages.\";\n\t};\n\ttimeSpent: {\n\t\tclassification: \"SystemMetaData\";\n\t\tpurpose: \"FeatureInsight\";\n\t\tcomment: \"How long the operation took.\";\n\t};\n};\n\n//#endregion\n"],
  "mappings": "AAMA,SAAS,uBAAuB;AAEzB,MAAM,4BACZ,gBAA2C,2BAA2B;AAEhE,MAAM,uCAAuC;AA6B7C,MAAM,0CACZ;AAkCM,MAAM,2BAA2B;",
  "names": []
}
