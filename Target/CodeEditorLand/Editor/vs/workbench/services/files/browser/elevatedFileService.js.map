{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/files/browser/elevatedFileService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { VSBuffer, VSBufferReadable, VSBufferReadableStream } from '../../../../base/common/buffer.js';\nimport { URI } from '../../../../base/common/uri.js';\nimport { IFileStatWithMetadata, IWriteFileOptions } from '../../../../platform/files/common/files.js';\nimport { InstantiationType, registerSingleton } from '../../../../platform/instantiation/common/extensions.js';\nimport { IElevatedFileService } from '../common/elevatedFileService.js';\n\nexport class BrowserElevatedFileService implements IElevatedFileService {\n\n\treadonly _serviceBrand: undefined;\n\n\tisSupported(resource: URI): boolean {\n\t\t// Saving elevated is currently not supported in web for as\n\t\t// long as we have no generic support from the file service\n\t\t// (https://github.com/microsoft/vscode/issues/48659)\n\t\treturn false;\n\t}\n\n\tasync writeFileElevated(resource: URI, value: VSBuffer | VSBufferReadable | VSBufferReadableStream, options?: IWriteFileOptions): Promise<IFileStatWithMetadata> {\n\t\tthrow new Error('Unsupported');\n\t}\n}\n\nregisterSingleton(IElevatedFileService, BrowserElevatedFileService, InstantiationType.Delayed);\n"],
  "mappings": ";;AAKA,SAAS,UAAU,kBAAkB,8BAA8B;AACnE,SAAS,WAAW;AACpB,SAAS,uBAAuB,yBAAyB;AACzD,SAAS,mBAAmB,yBAAyB;AACrD,SAAS,4BAA4B;AAE9B,MAAM,2BAA2D;AAAA,EAXxE,OAWwE;AAAA;AAAA;AAAA,EAE9D;AAAA,EAET,YAAY,UAAwB;AAInC,WAAO;AAAA,EACR;AAAA,EAEA,MAAM,kBAAkB,UAAe,OAA6D,SAA6D;AAChK,UAAM,IAAI,MAAM,aAAa;AAAA,EAC9B;AACD;AAEA,kBAAkB,sBAAsB,4BAA4B,kBAAkB,OAAO;",
  "names": []
}
