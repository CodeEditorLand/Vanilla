{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/files/common/elevatedFileService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { createDecorator } from '../../../../platform/instantiation/common/instantiation.js';\nimport { URI } from '../../../../base/common/uri.js';\nimport { VSBuffer, VSBufferReadable, VSBufferReadableStream } from '../../../../base/common/buffer.js';\nimport { IFileStatWithMetadata, IWriteFileOptions } from '../../../../platform/files/common/files.js';\n\nexport const IElevatedFileService = createDecorator<IElevatedFileService>('elevatedFileService');\n\nexport interface IElevatedFileService {\n\n\treadonly _serviceBrand: undefined;\n\n\t/**\n\t * Whether saving elevated is supported for the provided resource.\n\t */\n\tisSupported(resource: URI): boolean;\n\n\t/**\n\t * Attempts to write to the target resource elevated. This may bring\n\t * up a dialog to ask for admin username / password.\n\t */\n\twriteFileElevated(resource: URI, value: VSBuffer | VSBufferReadable | VSBufferReadableStream, options?: IWriteFileOptions): Promise<IFileStatWithMetadata>;\n}\n"],
  "mappings": "AAKA,SAAS,uBAAuB;AAChC,SAAS,WAAW;AACpB,SAAS,UAAU,kBAAkB,8BAA8B;AACnE,SAAS,uBAAuB,yBAAyB;AAElD,MAAM,uBAAuB,gBAAsC,qBAAqB;",
  "names": []
}
