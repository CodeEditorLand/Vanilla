{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/files/common/elevatedFileService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport type {\n\tVSBuffer,\n\tVSBufferReadable,\n\tVSBufferReadableStream,\n} from \"../../../../base/common/buffer.js\";\nimport type { URI } from \"../../../../base/common/uri.js\";\nimport type {\n\tIFileStatWithMetadata,\n\tIWriteFileOptions,\n} from \"../../../../platform/files/common/files.js\";\nimport { createDecorator } from \"../../../../platform/instantiation/common/instantiation.js\";\n\nexport const IElevatedFileService = createDecorator<IElevatedFileService>(\n\t\"elevatedFileService\",\n);\n\nexport interface IElevatedFileService {\n\treadonly _serviceBrand: undefined;\n\n\t/**\n\t * Whether saving elevated is supported for the provided resource.\n\t */\n\tisSupported(resource: URI): boolean;\n\n\t/**\n\t * Attempts to write to the target resource elevated. This may bring\n\t * up a dialog to ask for admin username / password.\n\t */\n\twriteFileElevated(\n\t\tresource: URI,\n\t\tvalue: VSBuffer | VSBufferReadable | VSBufferReadableStream,\n\t\toptions?: IWriteFileOptions,\n\t): Promise<IFileStatWithMetadata>;\n}\n"],
  "mappings": "AAeA,SAAS,uBAAuB;AAEzB,MAAM,uBAAuB;AAAA,EACnC;AACD;",
  "names": []
}
