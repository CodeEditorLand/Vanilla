{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/files/electron-sandbox/elevatedFileService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { VSBuffer, VSBufferReadable, VSBufferReadableStream } from '../../../../base/common/buffer.js';\nimport { randomPath } from '../../../../base/common/extpath.js';\nimport { Schemas } from '../../../../base/common/network.js';\nimport { URI } from '../../../../base/common/uri.js';\nimport { IFileService, IFileStatWithMetadata, IWriteFileOptions } from '../../../../platform/files/common/files.js';\nimport { InstantiationType, registerSingleton } from '../../../../platform/instantiation/common/extensions.js';\nimport { INativeHostService } from '../../../../platform/native/common/native.js';\nimport { INativeWorkbenchEnvironmentService } from '../../environment/electron-sandbox/environmentService.js';\nimport { IElevatedFileService } from '../common/elevatedFileService.js';\n\nexport class NativeElevatedFileService implements IElevatedFileService {\n\n\treadonly _serviceBrand: undefined;\n\n\tconstructor(\n\t\t@INativeHostService private readonly nativeHostService: INativeHostService,\n\t\t@IFileService private readonly fileService: IFileService,\n\t\t@INativeWorkbenchEnvironmentService private readonly environmentService: INativeWorkbenchEnvironmentService\n\t) { }\n\n\tisSupported(resource: URI): boolean {\n\t\t// Saving elevated is currently only supported for local\n\t\t// files for as long as we have no generic support from\n\t\t// the file service\n\t\t// (https://github.com/microsoft/vscode/issues/48659)\n\t\treturn resource.scheme === Schemas.file;\n\t}\n\n\tasync writeFileElevated(resource: URI, value: VSBuffer | VSBufferReadable | VSBufferReadableStream, options?: IWriteFileOptions): Promise<IFileStatWithMetadata> {\n\t\tconst source = URI.file(randomPath(this.environmentService.userDataPath, 'code-elevated'));\n\t\ttry {\n\t\t\t// write into a tmp file first\n\t\t\tawait this.fileService.writeFile(source, value, options);\n\n\t\t\t// then sudo prompt copy\n\t\t\tawait this.nativeHostService.writeElevated(source, resource, options);\n\t\t} finally {\n\n\t\t\t// clean up\n\t\t\tawait this.fileService.del(source);\n\t\t}\n\n\t\treturn this.fileService.resolve(resource, { resolveMetadata: true });\n\t}\n}\n\nregisterSingleton(IElevatedFileService, NativeElevatedFileService, InstantiationType.Delayed);\n"],
  "mappings": ";;;;;;;;;;;;AAKA,SAAS,UAAU,kBAAkB,8BAA8B;AACnE,SAAS,kBAAkB;AAC3B,SAAS,eAAe;AACxB,SAAS,WAAW;AACpB,SAAS,cAAc,uBAAuB,yBAAyB;AACvE,SAAS,mBAAmB,yBAAyB;AACrD,SAAS,0BAA0B;AACnC,SAAS,0CAA0C;AACnD,SAAS,4BAA4B;AAE9B,IAAM,4BAAN,MAAgE;AAAA,EAItE,YACsC,mBACN,aACsB,oBACpD;AAHoC;AACN;AACsB;AAAA,EAClD;AAAA,EAvBL,OAeuE;AAAA;AAAA;AAAA,EAE7D;AAAA,EAQT,YAAY,UAAwB;AAKnC,WAAO,SAAS,WAAW,QAAQ;AAAA,EACpC;AAAA,EAEA,MAAM,kBAAkB,UAAe,OAA6D,SAA6D;AAChK,UAAM,SAAS,IAAI,KAAK,WAAW,KAAK,mBAAmB,cAAc,eAAe,CAAC;AACzF,QAAI;AAEH,YAAM,KAAK,YAAY,UAAU,QAAQ,OAAO,OAAO;AAGvD,YAAM,KAAK,kBAAkB,cAAc,QAAQ,UAAU,OAAO;AAAA,IACrE,UAAE;AAGD,YAAM,KAAK,YAAY,IAAI,MAAM;AAAA,IAClC;AAEA,WAAO,KAAK,YAAY,QAAQ,UAAU,EAAE,iBAAiB,KAAK,CAAC;AAAA,EACpE;AACD;AAlCa,4BAAN;AAAA,EAKJ;AAAA,EACA;AAAA,EACA;AAAA,GAPU;AAoCb,kBAAkB,sBAAsB,2BAA2B,kBAAkB,OAAO;",
  "names": []
}
