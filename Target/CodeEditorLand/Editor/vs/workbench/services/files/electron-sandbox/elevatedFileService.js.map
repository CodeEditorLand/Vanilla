{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/files/electron-sandbox/elevatedFileService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport type {\n\tVSBuffer,\n\tVSBufferReadable,\n\tVSBufferReadableStream,\n} from \"../../../../base/common/buffer.js\";\nimport { randomPath } from \"../../../../base/common/extpath.js\";\nimport { Schemas } from \"../../../../base/common/network.js\";\nimport { URI } from \"../../../../base/common/uri.js\";\nimport {\n\tIFileService,\n\ttype IFileStatWithMetadata,\n\ttype IWriteFileOptions,\n} from \"../../../../platform/files/common/files.js\";\nimport {\n\tInstantiationType,\n\tregisterSingleton,\n} from \"../../../../platform/instantiation/common/extensions.js\";\nimport { INativeHostService } from \"../../../../platform/native/common/native.js\";\nimport { INativeWorkbenchEnvironmentService } from \"../../environment/electron-sandbox/environmentService.js\";\nimport { IElevatedFileService } from \"../common/elevatedFileService.js\";\n\nexport class NativeElevatedFileService implements IElevatedFileService {\n\treadonly _serviceBrand: undefined;\n\n\tconstructor(\n\t\t@INativeHostService private readonly nativeHostService: INativeHostService,\n\t\t@IFileService private readonly fileService: IFileService,\n\t\t@INativeWorkbenchEnvironmentService private readonly environmentService: INativeWorkbenchEnvironmentService\n\t) { }\n\n\tisSupported(resource: URI): boolean {\n\t\t// Saving elevated is currently only supported for local\n\t\t// files for as long as we have no generic support from\n\t\t// the file service\n\t\t// (https://github.com/microsoft/vscode/issues/48659)\n\t\treturn resource.scheme === Schemas.file;\n\t}\n\n\tasync writeFileElevated(\n\t\tresource: URI,\n\t\tvalue: VSBuffer | VSBufferReadable | VSBufferReadableStream,\n\t\toptions?: IWriteFileOptions,\n\t): Promise<IFileStatWithMetadata> {\n\t\tconst source = URI.file(\n\t\t\trandomPath(this.environmentService.userDataPath, \"code-elevated\"),\n\t\t);\n\t\ttry {\n\t\t\t// write into a tmp file first\n\t\t\tawait this.fileService.writeFile(source, value, options);\n\n\t\t\t// then sudo prompt copy\n\t\t\tawait this.nativeHostService.writeElevated(\n\t\t\t\tsource,\n\t\t\t\tresource,\n\t\t\t\toptions,\n\t\t\t);\n\t\t} finally {\n\t\t\t// clean up\n\t\t\tawait this.fileService.del(source);\n\t\t}\n\n\t\treturn this.fileService.resolve(resource, { resolveMetadata: true });\n\t}\n}\n\nregisterSingleton(\n\tIElevatedFileService,\n\tNativeElevatedFileService,\n\tInstantiationType.Delayed,\n);\n"],
  "mappings": ";;;;;;;;;;;;AAUA,SAAS,kBAAkB;AAC3B,SAAS,eAAe;AACxB,SAAS,WAAW;AACpB;AAAA,EACC;AAAA,OAGM;AACP;AAAA,EACC;AAAA,EACA;AAAA,OACM;AACP,SAAS,0BAA0B;AACnC,SAAS,0CAA0C;AACnD,SAAS,4BAA4B;AAE9B,IAAM,4BAAN,MAAgE;AAAA,EAGtE,YACsC,mBACN,aACsB,oBACpD;AAHoC;AACN;AACsB;AAAA,EAClD;AAAA,EAjCL,OA0BuE;AAAA;AAAA;AAAA,EAC7D;AAAA,EAQT,YAAY,UAAwB;AAKnC,WAAO,SAAS,WAAW,QAAQ;AAAA,EACpC;AAAA,EAEA,MAAM,kBACL,UACA,OACA,SACiC;AACjC,UAAM,SAAS,IAAI;AAAA,MAClB,WAAW,KAAK,mBAAmB,cAAc,eAAe;AAAA,IACjE;AACA,QAAI;AAEH,YAAM,KAAK,YAAY,UAAU,QAAQ,OAAO,OAAO;AAGvD,YAAM,KAAK,kBAAkB;AAAA,QAC5B;AAAA,QACA;AAAA,QACA;AAAA,MACD;AAAA,IACD,UAAE;AAED,YAAM,KAAK,YAAY,IAAI,MAAM;AAAA,IAClC;AAEA,WAAO,KAAK,YAAY,QAAQ,UAAU,EAAE,iBAAiB,KAAK,CAAC;AAAA,EACpE;AACD;AA1Ca,4BAAN;AAAA,EAIJ;AAAA,EACA;AAAA,EACA;AAAA,GANU;AA4Cb;AAAA,EACC;AAAA,EACA;AAAA,EACA,kBAAkB;AACnB;",
  "names": []
}
