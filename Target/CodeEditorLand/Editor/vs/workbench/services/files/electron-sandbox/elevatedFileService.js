var s=Object.defineProperty;var v=Object.getOwnPropertyDescriptor;var f=(a,e,i,t)=>{for(var r=t>1?void 0:t?v(e,i):e,l=a.length-1,m;l>=0;l--)(m=a[l])&&(r=(t?m(e,i,r):m(r))||r);return t&&r&&s(e,i,r),r},n=(a,e)=>(i,t)=>e(i,t,a);import{randomPath as S}from"../../../../base/common/extpath.js";import{Schemas as c}from"../../../../base/common/network.js";import{URI as d}from"../../../../base/common/uri.js";import{IFileService as p}from"../../../../platform/files/common/files.js";import{InstantiationType as I,registerSingleton as u}from"../../../../platform/instantiation/common/extensions.js";import{INativeHostService as h}from"../../../../platform/native/common/native.js";import{INativeWorkbenchEnvironmentService as y}from"../../environment/electron-sandbox/environmentService.js";import{IElevatedFileService as b}from"../common/elevatedFileService.js";let o=class{constructor(e,i,t){this.nativeHostService=e;this.fileService=i;this.environmentService=t}_serviceBrand;isSupported(e){return e.scheme===c.file}async writeFileElevated(e,i,t){const r=d.file(S(this.environmentService.userDataPath,"code-elevated"));try{await this.fileService.writeFile(r,i,t),await this.nativeHostService.writeElevated(r,e,t)}finally{await this.fileService.del(r)}return this.fileService.resolve(e,{resolveMetadata:!0})}};o=f([n(0,h),n(1,p),n(2,y)],o),u(b,o,I.Delayed);export{o as NativeElevatedFileService};
