var v=Object.defineProperty;var s=Object.getOwnPropertyDescriptor;var f=(a,e,t,i)=>{for(var r=i>1?void 0:i?s(e,t):e,l=a.length-1,m;l>=0;l--)(m=a[l])&&(r=(i?m(e,t,r):m(r))||r);return i&&r&&v(e,t,r),r},n=(a,e)=>(t,i)=>e(t,i,a);import{randomPath as S}from"../../../../base/common/extpath.js";import{Schemas as c}from"../../../../base/common/network.js";import{URI as d}from"../../../../base/common/uri.js";import{IFileService as p}from"../../../../platform/files/common/files.js";import{InstantiationType as I,registerSingleton as h}from"../../../../platform/instantiation/common/extensions.js";import{INativeHostService as u}from"../../../../platform/native/common/native.js";import{INativeWorkbenchEnvironmentService as y}from"../../environment/electron-sandbox/environmentService.js";import{IElevatedFileService as b}from"../common/elevatedFileService.js";let o=class{constructor(e,t,i){this.nativeHostService=e;this.fileService=t;this.environmentService=i}_serviceBrand;isSupported(e){return e.scheme===c.file}async writeFileElevated(e,t,i){const r=d.file(S(this.environmentService.userDataPath,"code-elevated"));try{await this.fileService.writeFile(r,t,i),await this.nativeHostService.writeElevated(r,e,i)}finally{await this.fileService.del(r)}return this.fileService.resolve(e,{resolveMetadata:!0})}};o=f([n(0,u),n(1,p),n(2,y)],o),h(b,o,I.Delayed);export{o as NativeElevatedFileService};
