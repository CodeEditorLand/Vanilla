import{isLinux as s}from"../../../../base/common/platform.js";import{localize as a}from"../../../../nls.js";import{AbstractDiskFileSystemProvider as n}from"../../../../platform/files/common/diskFileSystemProvider.js";import{DiskFileSystemProviderClient as l,LOCAL_FILE_SYSTEM_CHANNEL_NAME as m}from"../../../../platform/files/common/diskFileSystemProviderClient.js";import{LogService as p}from"../../../../platform/log/common/logService.js";import{UniversalWatcherClient as c}from"./watcherClient.js";class b extends n{constructor(e,r,i,t){super(i,{watcher:{forceUniversal:!0}});this.mainProcessService=e;this.utilityProcessWorkerWorkbenchService=r;this.loggerService=t;this.registerListeners()}provider=this._register(new l(this.mainProcessService.getChannel(m),{pathCaseSensitive:s,trash:!0}));registerListeners(){this._register(this.provider.onDidChangeFile(e=>this._onDidChangeFile.fire(e))),this._register(this.provider.onDidWatchError(e=>this._onDidWatchError.fire(e)))}get onDidChangeCapabilities(){return this.provider.onDidChangeCapabilities}get capabilities(){return this.provider.capabilities}stat(e){return this.provider.stat(e)}readdir(e){return this.provider.readdir(e)}readFile(e,r){return this.provider.readFile(e,r)}readFileStream(e,r,i){return this.provider.readFileStream(e,r,i)}writeFile(e,r,i){return this.provider.writeFile(e,r,i)}open(e,r){return this.provider.open(e,r)}close(e){return this.provider.close(e)}read(e,r,i,t,o){return this.provider.read(e,r,i,t,o)}write(e,r,i,t,o){return this.provider.write(e,r,i,t,o)}mkdir(e){return this.provider.mkdir(e)}delete(e,r){return this.provider.delete(e,r)}rename(e,r,i){return this.provider.rename(e,r,i)}copy(e,r,i){return this.provider.copy(e,r,i)}cloneFile(e,r){return this.provider.cloneFile(e,r)}createUniversalWatcher(e,r,i){return new c(t=>e(t),t=>r(t),i,this.utilityProcessWorkerWorkbenchService)}createNonRecursiveWatcher(){throw new Error("Method not implemented in sandbox.")}_watcherLogService=void 0;get watcherLogService(){return this._watcherLogService||(this._watcherLogService=new p(this.loggerService.createLogger("fileWatcher",{name:a("fileWatcher","File Watcher")}))),this._watcherLogService}logWatcherMessage(e){this.watcherLogService[e.type](e.message),e.type!=="trace"&&e.type!=="debug"&&super.logWatcherMessage(e)}}export{b as DiskFileSystemProvider};
