import"../../../../../vs/base/common/lifecycle.js";import{getDelayedChannel as c,ProxyChannel as a}from"../../../../../vs/base/parts/ipc/common/ipc.js";import"../../../../../vs/platform/files/common/files.js";import{AbstractUniversalWatcherClient as s}from"../../../../../vs/platform/files/common/watcher.js";import"../../../../../vs/workbench/services/utilityProcess/electron-sandbox/utilityProcessWorkerWorkbenchService.js";class b extends s{constructor(r,i,t,o){super(r,i,t);this.utilityProcessWorkerWorkbenchService=o;this.init()}createWatcher(r){return a.toService(c((async()=>{const{client:t,onDidTerminate:o}=r.add(await this.utilityProcessWorkerWorkbenchService.createWorker({moduleId:"vs/platform/files/node/watcher/watcherMain",type:"fileWatcher"}));return o.then(({reason:e})=>{e?.code===0?this.trace(`terminated by itself with code ${e.code}, signal: ${e.signal}`):this.onError(`terminated by itself unexpectedly with code ${e?.code}, signal: ${e?.signal} (ETERM)`)}),t.getChannel("watcher")})()))}}export{b as UniversalWatcherClient};
