{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/files/electron-sandbox/diskFileSystemProvider.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport type { CancellationToken } from \"../../../../base/common/cancellation.js\";\nimport type { Event } from \"../../../../base/common/event.js\";\nimport { isLinux } from \"../../../../base/common/platform.js\";\nimport type { ReadableStreamEvents } from \"../../../../base/common/stream.js\";\nimport type { URI } from \"../../../../base/common/uri.js\";\nimport { localize } from \"../../../../nls.js\";\nimport { AbstractDiskFileSystemProvider } from \"../../../../platform/files/common/diskFileSystemProvider.js\";\nimport {\n\tDiskFileSystemProviderClient,\n\tLOCAL_FILE_SYSTEM_CHANNEL_NAME,\n} from \"../../../../platform/files/common/diskFileSystemProviderClient.js\";\nimport type {\n\tFileSystemProviderCapabilities,\n\tFileType,\n\tIFileAtomicReadOptions,\n\tIFileChange,\n\tIFileDeleteOptions,\n\tIFileOpenOptions,\n\tIFileOverwriteOptions,\n\tIFileReadStreamOptions,\n\tIFileSystemProviderWithFileAtomicReadCapability,\n\tIFileSystemProviderWithFileCloneCapability,\n\tIFileSystemProviderWithFileFolderCopyCapability,\n\tIFileSystemProviderWithFileReadStreamCapability,\n\tIFileSystemProviderWithFileReadWriteCapability,\n\tIFileSystemProviderWithOpenReadWriteCloseCapability,\n\tIFileWriteOptions,\n\tIStat,\n} from \"../../../../platform/files/common/files.js\";\nimport type {\n\tAbstractUniversalWatcherClient,\n\tILogMessage,\n} from \"../../../../platform/files/common/watcher.js\";\nimport type { IMainProcessService } from \"../../../../platform/ipc/common/mainProcessService.js\";\nimport type {\n\tILogService,\n\tILoggerService,\n} from \"../../../../platform/log/common/log.js\";\nimport { LogService } from \"../../../../platform/log/common/logService.js\";\nimport type { IUtilityProcessWorkerWorkbenchService } from \"../../utilityProcess/electron-sandbox/utilityProcessWorkerWorkbenchService.js\";\nimport { UniversalWatcherClient } from \"./watcherClient.js\";\n\n/**\n * A sandbox ready disk file system provider that delegates almost all calls\n * to the main process via `DiskFileSystemProviderServer` except for recursive\n * file watching that is done via shared process workers due to CPU intensity.\n */\nexport class DiskFileSystemProvider\n\textends AbstractDiskFileSystemProvider\n\timplements\n\t\tIFileSystemProviderWithFileReadWriteCapability,\n\t\tIFileSystemProviderWithOpenReadWriteCloseCapability,\n\t\tIFileSystemProviderWithFileReadStreamCapability,\n\t\tIFileSystemProviderWithFileFolderCopyCapability,\n\t\tIFileSystemProviderWithFileAtomicReadCapability,\n\t\tIFileSystemProviderWithFileCloneCapability\n{\n\tprivate readonly provider = this._register(\n\t\tnew DiskFileSystemProviderClient(\n\t\t\tthis.mainProcessService.getChannel(LOCAL_FILE_SYSTEM_CHANNEL_NAME),\n\t\t\t{ pathCaseSensitive: isLinux, trash: true },\n\t\t),\n\t);\n\n\tconstructor(\n\t\tprivate readonly mainProcessService: IMainProcessService,\n\t\tprivate readonly utilityProcessWorkerWorkbenchService: IUtilityProcessWorkerWorkbenchService,\n\t\tlogService: ILogService,\n\t\tprivate readonly loggerService: ILoggerService,\n\t) {\n\t\tsuper(logService, {\n\t\t\twatcher: {\n\t\t\t\tforceUniversal: true /* send all requests to universal watcher process */,\n\t\t\t},\n\t\t});\n\n\t\tthis.registerListeners();\n\t}\n\n\tprivate registerListeners(): void {\n\t\t// Forward events from the embedded provider\n\t\tthis._register(\n\t\t\tthis.provider.onDidChangeFile((changes) =>\n\t\t\t\tthis._onDidChangeFile.fire(changes),\n\t\t\t),\n\t\t);\n\t\tthis._register(\n\t\t\tthis.provider.onDidWatchError((error) =>\n\t\t\t\tthis._onDidWatchError.fire(error),\n\t\t\t),\n\t\t);\n\t}\n\n\t//#region File Capabilities\n\n\tget onDidChangeCapabilities(): Event<void> {\n\t\treturn this.provider.onDidChangeCapabilities;\n\t}\n\n\tget capabilities(): FileSystemProviderCapabilities {\n\t\treturn this.provider.capabilities;\n\t}\n\n\t//#endregion\n\n\t//#region File Metadata Resolving\n\n\tstat(resource: URI): Promise<IStat> {\n\t\treturn this.provider.stat(resource);\n\t}\n\n\treaddir(resource: URI): Promise<[string, FileType][]> {\n\t\treturn this.provider.readdir(resource);\n\t}\n\n\t//#endregion\n\n\t//#region File Reading/Writing\n\n\treadFile(\n\t\tresource: URI,\n\t\topts?: IFileAtomicReadOptions,\n\t): Promise<Uint8Array> {\n\t\treturn this.provider.readFile(resource, opts);\n\t}\n\n\treadFileStream(\n\t\tresource: URI,\n\t\topts: IFileReadStreamOptions,\n\t\ttoken: CancellationToken,\n\t): ReadableStreamEvents<Uint8Array> {\n\t\treturn this.provider.readFileStream(resource, opts, token);\n\t}\n\n\twriteFile(\n\t\tresource: URI,\n\t\tcontent: Uint8Array,\n\t\topts: IFileWriteOptions,\n\t): Promise<void> {\n\t\treturn this.provider.writeFile(resource, content, opts);\n\t}\n\n\topen(resource: URI, opts: IFileOpenOptions): Promise<number> {\n\t\treturn this.provider.open(resource, opts);\n\t}\n\n\tclose(fd: number): Promise<void> {\n\t\treturn this.provider.close(fd);\n\t}\n\n\tread(\n\t\tfd: number,\n\t\tpos: number,\n\t\tdata: Uint8Array,\n\t\toffset: number,\n\t\tlength: number,\n\t): Promise<number> {\n\t\treturn this.provider.read(fd, pos, data, offset, length);\n\t}\n\n\twrite(\n\t\tfd: number,\n\t\tpos: number,\n\t\tdata: Uint8Array,\n\t\toffset: number,\n\t\tlength: number,\n\t): Promise<number> {\n\t\treturn this.provider.write(fd, pos, data, offset, length);\n\t}\n\n\t//#endregion\n\n\t//#region Move/Copy/Delete/Create Folder\n\n\tmkdir(resource: URI): Promise<void> {\n\t\treturn this.provider.mkdir(resource);\n\t}\n\n\tdelete(resource: URI, opts: IFileDeleteOptions): Promise<void> {\n\t\treturn this.provider.delete(resource, opts);\n\t}\n\n\trename(from: URI, to: URI, opts: IFileOverwriteOptions): Promise<void> {\n\t\treturn this.provider.rename(from, to, opts);\n\t}\n\n\tcopy(from: URI, to: URI, opts: IFileOverwriteOptions): Promise<void> {\n\t\treturn this.provider.copy(from, to, opts);\n\t}\n\n\t//#endregion\n\n\t//#region Clone File\n\n\tcloneFile(from: URI, to: URI): Promise<void> {\n\t\treturn this.provider.cloneFile(from, to);\n\t}\n\n\t//#endregion\n\n\t//#region File Watching\n\n\tprotected createUniversalWatcher(\n\t\tonChange: (changes: IFileChange[]) => void,\n\t\tonLogMessage: (msg: ILogMessage) => void,\n\t\tverboseLogging: boolean,\n\t): AbstractUniversalWatcherClient {\n\t\treturn new UniversalWatcherClient(\n\t\t\t(changes) => onChange(changes),\n\t\t\t(msg) => onLogMessage(msg),\n\t\t\tverboseLogging,\n\t\t\tthis.utilityProcessWorkerWorkbenchService,\n\t\t);\n\t}\n\n\tprotected createNonRecursiveWatcher(): never {\n\t\tthrow new Error(\"Method not implemented in sandbox.\"); // we never expect this to be called given we set `forceUniversal: true`\n\t}\n\n\tprivate _watcherLogService: ILogService | undefined = undefined;\n\tprivate get watcherLogService(): ILogService {\n\t\tif (!this._watcherLogService) {\n\t\t\tthis._watcherLogService = new LogService(\n\t\t\t\tthis.loggerService.createLogger(\"fileWatcher\", {\n\t\t\t\t\tname: localize(\"fileWatcher\", \"File Watcher\"),\n\t\t\t\t}),\n\t\t\t);\n\t\t}\n\n\t\treturn this._watcherLogService;\n\t}\n\n\tprotected override logWatcherMessage(msg: ILogMessage): void {\n\t\tthis.watcherLogService[msg.type](msg.message);\n\n\t\tif (msg.type !== \"trace\" && msg.type !== \"debug\") {\n\t\t\tsuper.logWatcherMessage(msg); // allow non-verbose log messages in window log\n\t\t}\n\t}\n\n\t//#endregion\n}\n"],
  "mappings": "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",
  "names": []
}
