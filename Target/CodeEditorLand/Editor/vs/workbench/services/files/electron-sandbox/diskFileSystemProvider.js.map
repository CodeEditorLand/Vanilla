{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/files/electron-sandbox/diskFileSystemProvider.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { localize } from '../../../../nls.js';\nimport { Event } from '../../../../base/common/event.js';\nimport { isLinux } from '../../../../base/common/platform.js';\nimport { FileSystemProviderCapabilities, IFileDeleteOptions, IStat, FileType, IFileReadStreamOptions, IFileWriteOptions, IFileOpenOptions, IFileOverwriteOptions, IFileSystemProviderWithFileReadWriteCapability, IFileSystemProviderWithOpenReadWriteCloseCapability, IFileSystemProviderWithFileReadStreamCapability, IFileSystemProviderWithFileFolderCopyCapability, IFileSystemProviderWithFileAtomicReadCapability, IFileAtomicReadOptions, IFileSystemProviderWithFileCloneCapability, IFileChange } from '../../../../platform/files/common/files.js';\nimport { AbstractDiskFileSystemProvider } from '../../../../platform/files/common/diskFileSystemProvider.js';\nimport { IMainProcessService } from '../../../../platform/ipc/common/mainProcessService.js';\nimport { CancellationToken } from '../../../../base/common/cancellation.js';\nimport { ReadableStreamEvents } from '../../../../base/common/stream.js';\nimport { URI } from '../../../../base/common/uri.js';\nimport { DiskFileSystemProviderClient, LOCAL_FILE_SYSTEM_CHANNEL_NAME } from '../../../../platform/files/common/diskFileSystemProviderClient.js';\nimport { ILogMessage, AbstractUniversalWatcherClient } from '../../../../platform/files/common/watcher.js';\nimport { UniversalWatcherClient } from './watcherClient.js';\nimport { ILoggerService, ILogService } from '../../../../platform/log/common/log.js';\nimport { IUtilityProcessWorkerWorkbenchService } from '../../utilityProcess/electron-sandbox/utilityProcessWorkerWorkbenchService.js';\nimport { LogService } from '../../../../platform/log/common/logService.js';\n\n/**\n * A sandbox ready disk file system provider that delegates almost all calls\n * to the main process via `DiskFileSystemProviderServer` except for recursive\n * file watching that is done via shared process workers due to CPU intensity.\n */\nexport class DiskFileSystemProvider extends AbstractDiskFileSystemProvider implements\n\tIFileSystemProviderWithFileReadWriteCapability,\n\tIFileSystemProviderWithOpenReadWriteCloseCapability,\n\tIFileSystemProviderWithFileReadStreamCapability,\n\tIFileSystemProviderWithFileFolderCopyCapability,\n\tIFileSystemProviderWithFileAtomicReadCapability,\n\tIFileSystemProviderWithFileCloneCapability {\n\n\tprivate readonly provider = this._register(new DiskFileSystemProviderClient(this.mainProcessService.getChannel(LOCAL_FILE_SYSTEM_CHANNEL_NAME), { pathCaseSensitive: isLinux, trash: true }));\n\n\tconstructor(\n\t\tprivate readonly mainProcessService: IMainProcessService,\n\t\tprivate readonly utilityProcessWorkerWorkbenchService: IUtilityProcessWorkerWorkbenchService,\n\t\tlogService: ILogService,\n\t\tprivate readonly loggerService: ILoggerService\n\t) {\n\t\tsuper(logService, { watcher: { forceUniversal: true /* send all requests to universal watcher process */ } });\n\n\t\tthis.registerListeners();\n\t}\n\n\tprivate registerListeners(): void {\n\n\t\t// Forward events from the embedded provider\n\t\tthis._register(this.provider.onDidChangeFile(changes => this._onDidChangeFile.fire(changes)));\n\t\tthis._register(this.provider.onDidWatchError(error => this._onDidWatchError.fire(error)));\n\t}\n\n\t//#region File Capabilities\n\n\tget onDidChangeCapabilities(): Event<void> { return this.provider.onDidChangeCapabilities; }\n\n\tget capabilities(): FileSystemProviderCapabilities { return this.provider.capabilities; }\n\n\t//#endregion\n\n\t//#region File Metadata Resolving\n\n\tstat(resource: URI): Promise<IStat> {\n\t\treturn this.provider.stat(resource);\n\t}\n\n\treaddir(resource: URI): Promise<[string, FileType][]> {\n\t\treturn this.provider.readdir(resource);\n\t}\n\n\t//#endregion\n\n\t//#region File Reading/Writing\n\n\treadFile(resource: URI, opts?: IFileAtomicReadOptions): Promise<Uint8Array> {\n\t\treturn this.provider.readFile(resource, opts);\n\t}\n\n\treadFileStream(resource: URI, opts: IFileReadStreamOptions, token: CancellationToken): ReadableStreamEvents<Uint8Array> {\n\t\treturn this.provider.readFileStream(resource, opts, token);\n\t}\n\n\twriteFile(resource: URI, content: Uint8Array, opts: IFileWriteOptions): Promise<void> {\n\t\treturn this.provider.writeFile(resource, content, opts);\n\t}\n\n\topen(resource: URI, opts: IFileOpenOptions): Promise<number> {\n\t\treturn this.provider.open(resource, opts);\n\t}\n\n\tclose(fd: number): Promise<void> {\n\t\treturn this.provider.close(fd);\n\t}\n\n\tread(fd: number, pos: number, data: Uint8Array, offset: number, length: number): Promise<number> {\n\t\treturn this.provider.read(fd, pos, data, offset, length);\n\t}\n\n\twrite(fd: number, pos: number, data: Uint8Array, offset: number, length: number): Promise<number> {\n\t\treturn this.provider.write(fd, pos, data, offset, length);\n\t}\n\n\t//#endregion\n\n\t//#region Move/Copy/Delete/Create Folder\n\n\tmkdir(resource: URI): Promise<void> {\n\t\treturn this.provider.mkdir(resource);\n\t}\n\n\tdelete(resource: URI, opts: IFileDeleteOptions): Promise<void> {\n\t\treturn this.provider.delete(resource, opts);\n\t}\n\n\trename(from: URI, to: URI, opts: IFileOverwriteOptions): Promise<void> {\n\t\treturn this.provider.rename(from, to, opts);\n\t}\n\n\tcopy(from: URI, to: URI, opts: IFileOverwriteOptions): Promise<void> {\n\t\treturn this.provider.copy(from, to, opts);\n\t}\n\n\t//#endregion\n\n\t//#region Clone File\n\n\tcloneFile(from: URI, to: URI): Promise<void> {\n\t\treturn this.provider.cloneFile(from, to);\n\t}\n\n\t//#endregion\n\n\t//#region File Watching\n\n\tprotected createUniversalWatcher(\n\t\tonChange: (changes: IFileChange[]) => void,\n\t\tonLogMessage: (msg: ILogMessage) => void,\n\t\tverboseLogging: boolean\n\t): AbstractUniversalWatcherClient {\n\t\treturn new UniversalWatcherClient(changes => onChange(changes), msg => onLogMessage(msg), verboseLogging, this.utilityProcessWorkerWorkbenchService);\n\t}\n\n\tprotected createNonRecursiveWatcher(): never {\n\t\tthrow new Error('Method not implemented in sandbox.'); // we never expect this to be called given we set `forceUniversal: true`\n\t}\n\n\tprivate _watcherLogService: ILogService | undefined = undefined;\n\tprivate get watcherLogService(): ILogService {\n\t\tif (!this._watcherLogService) {\n\t\t\tthis._watcherLogService = new LogService(this.loggerService.createLogger('fileWatcher', { name: localize('fileWatcher', \"File Watcher\") }));\n\t\t}\n\n\t\treturn this._watcherLogService;\n\t}\n\n\tprotected override logWatcherMessage(msg: ILogMessage): void {\n\t\tthis.watcherLogService[msg.type](msg.message);\n\n\t\tif (msg.type !== 'trace' && msg.type !== 'debug') {\n\t\t\tsuper.logWatcherMessage(msg); // allow non-verbose log messages in window log\n\t\t}\n\t}\n\n\t//#endregion\n}\n"],
  "mappings": "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",
  "names": []
}
