import { Disposable, DisposableStore } from "vs/base/common/lifecycle";
import { URI } from "vs/base/common/uri";
import { ICodeEditor, IDiffEditor } from "vs/editor/browser/editorBrowser";
import { IConfigurationService } from "vs/platform/configuration/common/configuration";
import { IEditorOptions, IResourceEditorInput, IResourceEditorInputIdentifier, ITextResourceEditorInput } from "vs/platform/editor/common/editor";
import { IFileService } from "vs/platform/files/common/files";
import { IInstantiationService } from "vs/platform/instantiation/common/instantiation";
import { IUriIdentityService } from "vs/platform/uriIdentity/common/uriIdentity";
import { IWorkspaceContextService } from "vs/platform/workspace/common/workspace";
import { IWorkspaceTrustRequestService } from "vs/platform/workspace/common/workspaceTrust";
import { EditorServiceImpl } from "vs/workbench/browser/parts/editor/editor";
import { EditorInputWithOptions, EditorsOrder, GroupIdentifier, IEditorIdentifier, IEditorPane, IFindEditorOptions, IResourceDiffEditorInput, IRevertOptions, ITextDiffEditorPane, IUntitledTextResourceEditorInput, IUntypedEditorInput, IVisibleEditorPane } from "vs/workbench/common/editor";
import { EditorInput } from "vs/workbench/common/editor/editorInput";
import { ICloseEditorOptions, IEditorGroup, IEditorGroupsContainer, IEditorGroupsService, IEditorReplacement } from "vs/workbench/services/editor/common/editorGroupsService";
import { IEditorResolverService } from "vs/workbench/services/editor/common/editorResolverService";
import { IEditorService, IOpenEditorsOptions, IRevertAllEditorsOptions, ISaveAllEditorsOptions, ISaveEditorsOptions, ISaveEditorsResult, IUntypedEditorReplacement, PreferredGroup } from "vs/workbench/services/editor/common/editorService";
import { IHostService } from "vs/workbench/services/host/browser/host";
import { ITextEditorService } from "vs/workbench/services/textfile/common/textEditorService";
export declare class EditorService extends Disposable implements EditorServiceImpl {
    private readonly editorGroupService;
    private readonly instantiationService;
    private readonly fileService;
    private readonly configurationService;
    private readonly contextService;
    private readonly uriIdentityService;
    private readonly editorResolverService;
    private readonly workspaceTrustRequestService;
    private readonly hostService;
    private readonly textEditorService;
    readonly _serviceBrand: undefined;
    private readonly _onDidActiveEditorChange;
    readonly onDidActiveEditorChange: any;
    private readonly _onDidVisibleEditorsChange;
    readonly onDidVisibleEditorsChange: any;
    private readonly _onDidEditorsChange;
    readonly onDidEditorsChange: any;
    private readonly _onWillOpenEditor;
    readonly onWillOpenEditor: any;
    private readonly _onDidCloseEditor;
    readonly onDidCloseEditor: any;
    private readonly _onDidOpenEditorFail;
    readonly onDidOpenEditorFail: any;
    private readonly _onDidMostRecentlyActiveEditorsChange;
    readonly onDidMostRecentlyActiveEditorsChange: any;
    private readonly editorGroupsContainer;
    constructor(editorGroupsContainer: IEditorGroupsContainer | undefined, editorGroupService: IEditorGroupsService, instantiationService: IInstantiationService, fileService: IFileService, configurationService: IConfigurationService, contextService: IWorkspaceContextService, uriIdentityService: IUriIdentityService, editorResolverService: IEditorResolverService, workspaceTrustRequestService: IWorkspaceTrustRequestService, hostService: IHostService, textEditorService: ITextEditorService);
    createScoped(editorGroupsContainer: IEditorGroupsContainer | "main", disposables: DisposableStore): IEditorService;
    private registerListeners;
    private lastActiveEditor;
    private onEditorGroupsReady;
    private handleActiveEditorChange;
    private doHandleActiveEditorChangeEvent;
    private registerGroupListeners;
    private readonly activeOutOfWorkspaceWatchers;
    private handleVisibleEditorsChange;
    private onDidRunFileOperation;
    private onDidFilesChange;
    private handleMovedFile;
    private closeOnFileDelete;
    private onConfigurationUpdated;
    private handleDeletedFile;
    private getAllNonDirtyEditors;
    private readonly editorsObserver;
    get activeEditorPane(): IVisibleEditorPane | undefined;
    get activeTextEditorControl(): ICodeEditor | IDiffEditor | undefined;
    get activeTextEditorLanguageId(): string | undefined;
    get count(): number;
    get editors(): EditorInput[];
    getEditors(order: EditorsOrder, options?: {
        excludeSticky?: boolean;
    }): IEditorIdentifier[];
    get activeEditor(): EditorInput | undefined;
    get visibleEditorPanes(): IVisibleEditorPane[];
    get visibleTextEditorControls(): Array<ICodeEditor | IDiffEditor>;
    get visibleEditors(): EditorInput[];
    openEditor(editor: EditorInput, options?: IEditorOptions, group?: PreferredGroup): Promise<IEditorPane | undefined>;
    openEditor(editor: IUntypedEditorInput, group?: PreferredGroup): Promise<IEditorPane | undefined>;
    openEditor(editor: IResourceEditorInput, group?: PreferredGroup): Promise<IEditorPane | undefined>;
    openEditor(editor: ITextResourceEditorInput | IUntitledTextResourceEditorInput, group?: PreferredGroup): Promise<IEditorPane | undefined>;
    openEditor(editor: IResourceDiffEditorInput, group?: PreferredGroup): Promise<ITextDiffEditorPane | undefined>;
    openEditor(editor: EditorInput | IUntypedEditorInput, optionsOrPreferredGroup?: IEditorOptions | PreferredGroup, preferredGroup?: PreferredGroup): Promise<IEditorPane | undefined>;
    openEditors(editors: EditorInputWithOptions[], group?: PreferredGroup, options?: IOpenEditorsOptions): Promise<IEditorPane[]>;
    openEditors(editors: IUntypedEditorInput[], group?: PreferredGroup, options?: IOpenEditorsOptions): Promise<IEditorPane[]>;
    openEditors(editors: Array<EditorInputWithOptions | IUntypedEditorInput>, group?: PreferredGroup, options?: IOpenEditorsOptions): Promise<IEditorPane[]>;
    private handleWorkspaceTrust;
    private extractEditorResources;
    isOpened(editor: IResourceEditorInputIdentifier): boolean;
    isVisible(editor: EditorInput): boolean;
    closeEditor({ editor, groupId }: IEditorIdentifier, options?: ICloseEditorOptions): Promise<void>;
    closeEditors(editors: IEditorIdentifier[], options?: ICloseEditorOptions): Promise<void>;
    findEditors(resource: URI, options?: IFindEditorOptions): readonly IEditorIdentifier[];
    findEditors(editor: IResourceEditorInputIdentifier, options?: IFindEditorOptions): readonly IEditorIdentifier[];
    findEditors(resource: URI, options: IFindEditorOptions | undefined, group: IEditorGroup | GroupIdentifier): readonly EditorInput[];
    findEditors(editor: IResourceEditorInputIdentifier, options: IFindEditorOptions | undefined, group: IEditorGroup | GroupIdentifier): EditorInput | undefined;
    findEditors(arg1: URI | IResourceEditorInputIdentifier, options: IFindEditorOptions | undefined, arg2?: IEditorGroup | GroupIdentifier): readonly IEditorIdentifier[] | readonly EditorInput[] | EditorInput | undefined;
    replaceEditors(replacements: IUntypedEditorReplacement[], group: IEditorGroup | GroupIdentifier): Promise<void>;
    replaceEditors(replacements: IEditorReplacement[], group: IEditorGroup | GroupIdentifier): Promise<void>;
    save(editors: IEditorIdentifier | IEditorIdentifier[], options?: ISaveEditorsOptions): Promise<ISaveEditorsResult>;
    saveAll(options?: ISaveAllEditorsOptions): Promise<ISaveEditorsResult>;
    revert(editors: IEditorIdentifier | IEditorIdentifier[], options?: IRevertOptions): Promise<boolean>;
    revertAll(options?: IRevertAllEditorsOptions): Promise<boolean>;
    private getAllModifiedEditors;
    private getUniqueEditors;
    dispose(): void;
}
