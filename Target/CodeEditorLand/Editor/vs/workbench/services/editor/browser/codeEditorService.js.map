{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/editor/browser/codeEditorService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { ICodeEditor, isCodeEditor, isDiffEditor, isCompositeEditor, getCodeEditor } from '../../../../editor/browser/editorBrowser.js';\nimport { AbstractCodeEditorService } from '../../../../editor/browser/services/abstractCodeEditorService.js';\nimport { ScrollType } from '../../../../editor/common/editorCommon.js';\nimport { IResourceEditorInput } from '../../../../platform/editor/common/editor.js';\nimport { IThemeService } from '../../../../platform/theme/common/themeService.js';\nimport { IWorkbenchEditorConfiguration } from '../../../common/editor.js';\nimport { ACTIVE_GROUP, IEditorService, SIDE_GROUP } from '../common/editorService.js';\nimport { ICodeEditorService } from '../../../../editor/browser/services/codeEditorService.js';\nimport { InstantiationType, registerSingleton } from '../../../../platform/instantiation/common/extensions.js';\nimport { isEqual } from '../../../../base/common/resources.js';\nimport { IConfigurationService } from '../../../../platform/configuration/common/configuration.js';\nimport { applyTextEditorOptions } from '../../../common/editor/editorOptions.js';\n\nexport class CodeEditorService extends AbstractCodeEditorService {\n\n\tconstructor(\n\t\t@IEditorService private readonly editorService: IEditorService,\n\t\t@IThemeService themeService: IThemeService,\n\t\t@IConfigurationService private readonly configurationService: IConfigurationService,\n\t) {\n\t\tsuper(themeService);\n\n\t\tthis._register(this.registerCodeEditorOpenHandler(this.doOpenCodeEditor.bind(this)));\n\t\tthis._register(this.registerCodeEditorOpenHandler(this.doOpenCodeEditorFromDiff.bind(this)));\n\t}\n\n\tgetActiveCodeEditor(): ICodeEditor | null {\n\t\tconst activeTextEditorControl = this.editorService.activeTextEditorControl;\n\t\tif (isCodeEditor(activeTextEditorControl)) {\n\t\t\treturn activeTextEditorControl;\n\t\t}\n\n\t\tif (isDiffEditor(activeTextEditorControl)) {\n\t\t\treturn activeTextEditorControl.getModifiedEditor();\n\t\t}\n\n\t\tconst activeControl = this.editorService.activeEditorPane?.getControl();\n\t\tif (isCompositeEditor(activeControl) && isCodeEditor(activeControl.activeCodeEditor)) {\n\t\t\treturn activeControl.activeCodeEditor;\n\t\t}\n\n\t\treturn null;\n\t}\n\n\tprivate async doOpenCodeEditorFromDiff(input: IResourceEditorInput, source: ICodeEditor | null, sideBySide?: boolean): Promise<ICodeEditor | null> {\n\n\t\t// Special case: If the active editor is a diff editor and the request to open originates and\n\t\t// targets the modified side of it, we just apply the request there to prevent opening the modified\n\t\t// side as separate editor.\n\t\tconst activeTextEditorControl = this.editorService.activeTextEditorControl;\n\t\tif (\n\t\t\t!sideBySide &&\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// we need the current active group to be the target\n\t\t\tisDiffEditor(activeTextEditorControl) && \t\t\t\t\t\t\t\t\t// we only support this for active text diff editors\n\t\t\tinput.options &&\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// we need options to apply\n\t\t\tinput.resource &&\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// we need a request resource to compare with\n\t\t\tsource === activeTextEditorControl.getModifiedEditor() && \t\t\t\t\t// we need the source of this request to be the modified side of the diff editor\n\t\t\tactiveTextEditorControl.getModel() &&\t\t\t\t\t\t\t\t\t\t// we need a target model to compare with\n\t\t\tisEqual(input.resource, activeTextEditorControl.getModel()?.modified.uri) \t// we need the input resources to match with modified side\n\t\t) {\n\t\t\tconst targetEditor = activeTextEditorControl.getModifiedEditor();\n\n\t\t\tapplyTextEditorOptions(input.options, targetEditor, ScrollType.Smooth);\n\n\t\t\treturn targetEditor;\n\t\t}\n\n\t\treturn null;\n\t}\n\n\t// Open using our normal editor service\n\tprivate async doOpenCodeEditor(input: IResourceEditorInput, source: ICodeEditor | null, sideBySide?: boolean): Promise<ICodeEditor | null> {\n\n\t\t// Special case: we want to detect the request to open an editor that\n\t\t// is different from the current one to decide whether the current editor\n\t\t// should be pinned or not. This ensures that the source of a navigation\n\t\t// is not being replaced by the target. An example is \"Goto definition\"\n\t\t// that otherwise would replace the editor everytime the user navigates.\n\t\tconst enablePreviewFromCodeNavigation = this.configurationService.getValue<IWorkbenchEditorConfiguration>().workbench?.editor?.enablePreviewFromCodeNavigation;\n\t\tif (\n\t\t\t!enablePreviewFromCodeNavigation &&              \t// we only need to do this if the configuration requires it\n\t\t\tsource &&\t\t\t\t\t\t\t\t\t\t\t// we need to know the origin of the navigation\n\t\t\t!input.options?.pinned &&\t\t\t\t\t\t\t// we only need to look at preview editors that open\n\t\t\t!sideBySide &&\t\t\t\t\t\t\t\t\t\t// we only need to care if editor opens in same group\n\t\t\t!isEqual(source.getModel()?.uri, input.resource)\t// we only need to do this if the editor is about to change\n\t\t) {\n\t\t\tfor (const visiblePane of this.editorService.visibleEditorPanes) {\n\t\t\t\tif (getCodeEditor(visiblePane.getControl()) === source) {\n\t\t\t\t\tvisiblePane.group.pinEditor();\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Open as editor\n\t\tconst control = await this.editorService.openEditor(input, sideBySide ? SIDE_GROUP : ACTIVE_GROUP);\n\t\tif (control) {\n\t\t\tconst widget = control.getControl();\n\t\t\tif (isCodeEditor(widget)) {\n\t\t\t\treturn widget;\n\t\t\t}\n\n\t\t\tif (isCompositeEditor(widget) && isCodeEditor(widget.activeCodeEditor)) {\n\t\t\t\treturn widget.activeCodeEditor;\n\t\t\t}\n\t\t}\n\n\t\treturn null;\n\t}\n}\n\nregisterSingleton(ICodeEditorService, CodeEditorService, InstantiationType.Delayed);\n"],
  "mappings": ";;;;;;;;;;;;AAKA,SAAS,aAAa,cAAc,cAAc,mBAAmB,qBAAqB;AAC1F,SAAS,iCAAiC;AAC1C,SAAS,kBAAkB;AAC3B,SAAS,4BAA4B;AACrC,SAAS,qBAAqB;AAC9B,SAAS,qCAAqC;AAC9C,SAAS,cAAc,gBAAgB,kBAAkB;AACzD,SAAS,0BAA0B;AACnC,SAAS,mBAAmB,yBAAyB;AACrD,SAAS,eAAe;AACxB,SAAS,6BAA6B;AACtC,SAAS,8BAA8B;AAEhC,IAAM,oBAAN,cAAgC,0BAA0B;AAAA,EAEhE,YACkC,eAClB,cACyB,sBACvC;AACD,UAAM,YAAY;AAJe;AAEO;AAIxC,SAAK,UAAU,KAAK,8BAA8B,KAAK,iBAAiB,KAAK,IAAI,CAAC,CAAC;AACnF,SAAK,UAAU,KAAK,8BAA8B,KAAK,yBAAyB,KAAK,IAAI,CAAC,CAAC;AAAA,EAC5F;AAAA,EA7BD,OAkBiE;AAAA;AAAA;AAAA,EAahE,sBAA0C;AACzC,UAAM,0BAA0B,KAAK,cAAc;AACnD,QAAI,aAAa,uBAAuB,GAAG;AAC1C,aAAO;AAAA,IACR;AAEA,QAAI,aAAa,uBAAuB,GAAG;AAC1C,aAAO,wBAAwB,kBAAkB;AAAA,IAClD;AAEA,UAAM,gBAAgB,KAAK,cAAc,kBAAkB,WAAW;AACtE,QAAI,kBAAkB,aAAa,KAAK,aAAa,cAAc,gBAAgB,GAAG;AACrF,aAAO,cAAc;AAAA,IACtB;AAEA,WAAO;AAAA,EACR;AAAA,EAEA,MAAc,yBAAyB,OAA6B,QAA4B,YAAmD;AAKlJ,UAAM,0BAA0B,KAAK,cAAc;AACnD,QACC,CAAC;AAAA,IACD,aAAa,uBAAuB;AAAA,IACpC,MAAM;AAAA,IACN,MAAM;AAAA,IACN,WAAW,wBAAwB,kBAAkB;AAAA,IACrD,wBAAwB,SAAS;AAAA,IACjC,QAAQ,MAAM,UAAU,wBAAwB,SAAS,GAAG,SAAS,GAAG,GACvE;AACD,YAAM,eAAe,wBAAwB,kBAAkB;AAE/D,6BAAuB,MAAM,SAAS,cAAc,WAAW,MAAM;AAErE,aAAO;AAAA,IACR;AAEA,WAAO;AAAA,EACR;AAAA;AAAA,EAGA,MAAc,iBAAiB,OAA6B,QAA4B,YAAmD;AAO1I,UAAM,kCAAkC,KAAK,qBAAqB,SAAwC,EAAE,WAAW,QAAQ;AAC/H,QACC,CAAC;AAAA,IACD;AAAA,IACA,CAAC,MAAM,SAAS;AAAA,IAChB,CAAC;AAAA,IACD,CAAC,QAAQ,OAAO,SAAS,GAAG,KAAK,MAAM,QAAQ,GAC9C;AACD,iBAAW,eAAe,KAAK,cAAc,oBAAoB;AAChE,YAAI,cAAc,YAAY,WAAW,CAAC,MAAM,QAAQ;AACvD,sBAAY,MAAM,UAAU;AAC5B;AAAA,QACD;AAAA,MACD;AAAA,IACD;AAGA,UAAM,UAAU,MAAM,KAAK,cAAc,WAAW,OAAO,aAAa,aAAa,YAAY;AACjG,QAAI,SAAS;AACZ,YAAM,SAAS,QAAQ,WAAW;AAClC,UAAI,aAAa,MAAM,GAAG;AACzB,eAAO;AAAA,MACR;AAEA,UAAI,kBAAkB,MAAM,KAAK,aAAa,OAAO,gBAAgB,GAAG;AACvE,eAAO,OAAO;AAAA,MACf;AAAA,IACD;AAEA,WAAO;AAAA,EACR;AACD;AA/Fa,oBAAN;AAAA,EAGJ;AAAA,EACA;AAAA,EACA;AAAA,GALU;AAiGb,kBAAkB,oBAAoB,mBAAmB,kBAAkB,OAAO;",
  "names": []
}
