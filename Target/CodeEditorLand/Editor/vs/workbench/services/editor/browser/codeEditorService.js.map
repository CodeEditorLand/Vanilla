{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/editor/browser/codeEditorService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { isEqual } from \"../../../../base/common/resources.js\";\nimport {\n\ttype ICodeEditor,\n\tgetCodeEditor,\n\tisCodeEditor,\n\tisCompositeEditor,\n\tisDiffEditor,\n} from \"../../../../editor/browser/editorBrowser.js\";\nimport { AbstractCodeEditorService } from \"../../../../editor/browser/services/abstractCodeEditorService.js\";\nimport { ICodeEditorService } from \"../../../../editor/browser/services/codeEditorService.js\";\nimport { ScrollType } from \"../../../../editor/common/editorCommon.js\";\nimport { IConfigurationService } from \"../../../../platform/configuration/common/configuration.js\";\nimport type { IResourceEditorInput } from \"../../../../platform/editor/common/editor.js\";\nimport {\n\tInstantiationType,\n\tregisterSingleton,\n} from \"../../../../platform/instantiation/common/extensions.js\";\nimport { IThemeService } from \"../../../../platform/theme/common/themeService.js\";\nimport type { IWorkbenchEditorConfiguration } from \"../../../common/editor.js\";\nimport { applyTextEditorOptions } from \"../../../common/editor/editorOptions.js\";\nimport {\n\tACTIVE_GROUP,\n\tIEditorService,\n\tSIDE_GROUP,\n} from \"../common/editorService.js\";\n\nexport class CodeEditorService extends AbstractCodeEditorService {\n\tconstructor(\n\t\t@IEditorService private readonly editorService: IEditorService,\n\t\t@IThemeService themeService: IThemeService,\n\t\t@IConfigurationService\n\t\tprivate readonly configurationService: IConfigurationService,\n\t) {\n\t\tsuper(themeService);\n\n\t\tthis._register(\n\t\t\tthis.registerCodeEditorOpenHandler(\n\t\t\t\tthis.doOpenCodeEditor.bind(this),\n\t\t\t),\n\t\t);\n\t\tthis._register(\n\t\t\tthis.registerCodeEditorOpenHandler(\n\t\t\t\tthis.doOpenCodeEditorFromDiff.bind(this),\n\t\t\t),\n\t\t);\n\t}\n\n\tgetActiveCodeEditor(): ICodeEditor | null {\n\t\tconst activeTextEditorControl =\n\t\t\tthis.editorService.activeTextEditorControl;\n\t\tif (isCodeEditor(activeTextEditorControl)) {\n\t\t\treturn activeTextEditorControl;\n\t\t}\n\n\t\tif (isDiffEditor(activeTextEditorControl)) {\n\t\t\treturn activeTextEditorControl.getModifiedEditor();\n\t\t}\n\n\t\tconst activeControl = this.editorService.activeEditorPane?.getControl();\n\t\tif (\n\t\t\tisCompositeEditor(activeControl) &&\n\t\t\tisCodeEditor(activeControl.activeCodeEditor)\n\t\t) {\n\t\t\treturn activeControl.activeCodeEditor;\n\t\t}\n\n\t\treturn null;\n\t}\n\n\tprivate async doOpenCodeEditorFromDiff(\n\t\tinput: IResourceEditorInput,\n\t\tsource: ICodeEditor | null,\n\t\tsideBySide?: boolean,\n\t): Promise<ICodeEditor | null> {\n\t\t// Special case: If the active editor is a diff editor and the request to open originates and\n\t\t// targets the modified side of it, we just apply the request there to prevent opening the modified\n\t\t// side as separate editor.\n\t\tconst activeTextEditorControl =\n\t\t\tthis.editorService.activeTextEditorControl;\n\t\tif (\n\t\t\t!sideBySide && // we need the current active group to be the target\n\t\t\tisDiffEditor(activeTextEditorControl) && // we only support this for active text diff editors\n\t\t\tinput.options && // we need options to apply\n\t\t\tinput.resource && // we need a request resource to compare with\n\t\t\tsource === activeTextEditorControl.getModifiedEditor() && // we need the source of this request to be the modified side of the diff editor\n\t\t\tactiveTextEditorControl.getModel() && // we need a target model to compare with\n\t\t\tisEqual(\n\t\t\t\tinput.resource,\n\t\t\t\tactiveTextEditorControl.getModel()?.modified.uri,\n\t\t\t) // we need the input resources to match with modified side\n\t\t) {\n\t\t\tconst targetEditor = activeTextEditorControl.getModifiedEditor();\n\n\t\t\tapplyTextEditorOptions(\n\t\t\t\tinput.options,\n\t\t\t\ttargetEditor,\n\t\t\t\tScrollType.Smooth,\n\t\t\t);\n\n\t\t\treturn targetEditor;\n\t\t}\n\n\t\treturn null;\n\t}\n\n\t// Open using our normal editor service\n\tprivate async doOpenCodeEditor(\n\t\tinput: IResourceEditorInput,\n\t\tsource: ICodeEditor | null,\n\t\tsideBySide?: boolean,\n\t): Promise<ICodeEditor | null> {\n\t\t// Special case: we want to detect the request to open an editor that\n\t\t// is different from the current one to decide whether the current editor\n\t\t// should be pinned or not. This ensures that the source of a navigation\n\t\t// is not being replaced by the target. An example is \"Goto definition\"\n\t\t// that otherwise would replace the editor everytime the user navigates.\n\t\tconst enablePreviewFromCodeNavigation =\n\t\t\tthis.configurationService.getValue<IWorkbenchEditorConfiguration>()\n\t\t\t\t.workbench?.editor?.enablePreviewFromCodeNavigation;\n\t\tif (\n\t\t\t!enablePreviewFromCodeNavigation && // we only need to do this if the configuration requires it\n\t\t\tsource && // we need to know the origin of the navigation\n\t\t\t!input.options?.pinned && // we only need to look at preview editors that open\n\t\t\t!sideBySide && // we only need to care if editor opens in same group\n\t\t\t!isEqual(source.getModel()?.uri, input.resource) // we only need to do this if the editor is about to change\n\t\t) {\n\t\t\tfor (const visiblePane of this.editorService.visibleEditorPanes) {\n\t\t\t\tif (getCodeEditor(visiblePane.getControl()) === source) {\n\t\t\t\t\tvisiblePane.group.pinEditor();\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Open as editor\n\t\tconst control = await this.editorService.openEditor(\n\t\t\tinput,\n\t\t\tsideBySide ? SIDE_GROUP : ACTIVE_GROUP,\n\t\t);\n\t\tif (control) {\n\t\t\tconst widget = control.getControl();\n\t\t\tif (isCodeEditor(widget)) {\n\t\t\t\treturn widget;\n\t\t\t}\n\n\t\t\tif (\n\t\t\t\tisCompositeEditor(widget) &&\n\t\t\t\tisCodeEditor(widget.activeCodeEditor)\n\t\t\t) {\n\t\t\t\treturn widget.activeCodeEditor;\n\t\t\t}\n\t\t}\n\n\t\treturn null;\n\t}\n}\n\nregisterSingleton(\n\tICodeEditorService,\n\tCodeEditorService,\n\tInstantiationType.Delayed,\n);\n"],
  "mappings": ";;;;;;;;;;;;AAKA,SAAS,eAAe;AACxB;AAAA,EAEC;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,OACM;AACP,SAAS,iCAAiC;AAC1C,SAAS,0BAA0B;AACnC,SAAS,kBAAkB;AAC3B,SAAS,6BAA6B;AAEtC;AAAA,EACC;AAAA,EACA;AAAA,OACM;AACP,SAAS,qBAAqB;AAE9B,SAAS,8BAA8B;AACvC;AAAA,EACC;AAAA,EACA;AAAA,EACA;AAAA,OACM;AAEA,IAAM,oBAAN,cAAgC,0BAA0B;AAAA,EAChE,YACkC,eAClB,cAEE,sBAChB;AACD,UAAM,YAAY;AALe;AAGhB;AAIjB,SAAK;AAAA,MACJ,KAAK;AAAA,QACJ,KAAK,iBAAiB,KAAK,IAAI;AAAA,MAChC;AAAA,IACD;AACA,SAAK;AAAA,MACJ,KAAK;AAAA,QACJ,KAAK,yBAAyB,KAAK,IAAI;AAAA,MACxC;AAAA,IACD;AAAA,EACD;AAAA,EAlDD,OA+BiE;AAAA;AAAA;AAAA,EAqBhE,sBAA0C;AACzC,UAAM,0BACL,KAAK,cAAc;AACpB,QAAI,aAAa,uBAAuB,GAAG;AAC1C,aAAO;AAAA,IACR;AAEA,QAAI,aAAa,uBAAuB,GAAG;AAC1C,aAAO,wBAAwB,kBAAkB;AAAA,IAClD;AAEA,UAAM,gBAAgB,KAAK,cAAc,kBAAkB,WAAW;AACtE,QACC,kBAAkB,aAAa,KAC/B,aAAa,cAAc,gBAAgB,GAC1C;AACD,aAAO,cAAc;AAAA,IACtB;AAEA,WAAO;AAAA,EACR;AAAA,EAEA,MAAc,yBACb,OACA,QACA,YAC8B;AAI9B,UAAM,0BACL,KAAK,cAAc;AACpB,QACC,CAAC;AAAA,IACD,aAAa,uBAAuB;AAAA,IACpC,MAAM;AAAA,IACN,MAAM;AAAA,IACN,WAAW,wBAAwB,kBAAkB;AAAA,IACrD,wBAAwB,SAAS;AAAA,IACjC;AAAA,MACC,MAAM;AAAA,MACN,wBAAwB,SAAS,GAAG,SAAS;AAAA,IAC9C,GACC;AACD,YAAM,eAAe,wBAAwB,kBAAkB;AAE/D;AAAA,QACC,MAAM;AAAA,QACN;AAAA,QACA,WAAW;AAAA,MACZ;AAEA,aAAO;AAAA,IACR;AAEA,WAAO;AAAA,EACR;AAAA;AAAA,EAGA,MAAc,iBACb,OACA,QACA,YAC8B;AAM9B,UAAM,kCACL,KAAK,qBAAqB,SAAwC,EAChE,WAAW,QAAQ;AACtB,QACC,CAAC;AAAA,IACD;AAAA,IACA,CAAC,MAAM,SAAS;AAAA,IAChB,CAAC;AAAA,IACD,CAAC,QAAQ,OAAO,SAAS,GAAG,KAAK,MAAM,QAAQ,GAC9C;AACD,iBAAW,eAAe,KAAK,cAAc,oBAAoB;AAChE,YAAI,cAAc,YAAY,WAAW,CAAC,MAAM,QAAQ;AACvD,sBAAY,MAAM,UAAU;AAC5B;AAAA,QACD;AAAA,MACD;AAAA,IACD;AAGA,UAAM,UAAU,MAAM,KAAK,cAAc;AAAA,MACxC;AAAA,MACA,aAAa,aAAa;AAAA,IAC3B;AACA,QAAI,SAAS;AACZ,YAAM,SAAS,QAAQ,WAAW;AAClC,UAAI,aAAa,MAAM,GAAG;AACzB,eAAO;AAAA,MACR;AAEA,UACC,kBAAkB,MAAM,KACxB,aAAa,OAAO,gBAAgB,GACnC;AACD,eAAO,OAAO;AAAA,MACf;AAAA,IACD;AAEA,WAAO;AAAA,EACR;AACD;AAjIa,oBAAN;AAAA,EAEJ;AAAA,EACA;AAAA,EACA;AAAA,GAJU;AAmIb;AAAA,EACC;AAAA,EACA;AAAA,EACA,kBAAkB;AACnB;",
  "names": []
}
