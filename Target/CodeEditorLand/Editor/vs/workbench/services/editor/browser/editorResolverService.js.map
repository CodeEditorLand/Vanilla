{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/editor/browser/editorResolverService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { distinct, insert } from \"../../../../base/common/arrays.js\";\nimport { PauseableEmitter } from \"../../../../base/common/event.js\";\nimport * as glob from \"../../../../base/common/glob.js\";\nimport {\n\tDisposable,\n\tDisposableStore,\n\ttype IDisposable,\n\ttoDisposable,\n} from \"../../../../base/common/lifecycle.js\";\nimport { Schemas } from \"../../../../base/common/network.js\";\nimport {\n\tbasename,\n\textname,\n\tisEqual,\n} from \"../../../../base/common/resources.js\";\nimport { URI } from \"../../../../base/common/uri.js\";\nimport { localize } from \"../../../../nls.js\";\nimport { IConfigurationService } from \"../../../../platform/configuration/common/configuration.js\";\nimport {\n\tEditorActivation,\n\tEditorResolution,\n\ttype IEditorOptions,\n} from \"../../../../platform/editor/common/editor.js\";\nimport {\n\tInstantiationType,\n\tregisterSingleton,\n} from \"../../../../platform/instantiation/common/extensions.js\";\nimport { IInstantiationService } from \"../../../../platform/instantiation/common/instantiation.js\";\nimport { ILogService } from \"../../../../platform/log/common/log.js\";\nimport {\n\tINotificationService,\n\tSeverity,\n} from \"../../../../platform/notification/common/notification.js\";\nimport {\n\ttype IKeyMods,\n\tIQuickInputService,\n\ttype IQuickPickItem,\n\ttype IQuickPickSeparator,\n\ttype QuickPickItem,\n} from \"../../../../platform/quickinput/common/quickInput.js\";\nimport {\n\tIStorageService,\n\tStorageScope,\n\tStorageTarget,\n} from \"../../../../platform/storage/common/storage.js\";\nimport { ITelemetryService } from \"../../../../platform/telemetry/common/telemetry.js\";\nimport {\n\tDEFAULT_EDITOR_ASSOCIATION,\n\ttype EditorInputWithOptions,\n\tEditorResourceAccessor,\n\ttype IResourceSideBySideEditorInput,\n\ttype IUntypedEditorInput,\n\tSideBySideEditor,\n\tisEditorInputWithOptions,\n\tisEditorInputWithOptionsAndGroup,\n\tisResourceDiffEditorInput,\n\tisResourceMergeEditorInput,\n\tisResourceMultiDiffEditorInput,\n\tisResourceSideBySideEditorInput,\n\tisUntitledResourceEditorInput,\n} from \"../../../common/editor.js\";\nimport type { EditorInput } from \"../../../common/editor/editorInput.js\";\nimport { SideBySideEditorInput } from \"../../../common/editor/sideBySideEditorInput.js\";\nimport { IExtensionService } from \"../../extensions/common/extensions.js\";\nimport { findGroup } from \"../common/editorGroupFinder.js\";\nimport {\n\ttype IEditorGroup,\n\tIEditorGroupsService,\n} from \"../common/editorGroupsService.js\";\nimport {\n\ttype EditorAssociation,\n\ttype EditorAssociations,\n\ttype EditorInputFactoryObject,\n\tIEditorResolverService,\n\ttype RegisteredEditorInfo,\n\ttype RegisteredEditorOptions,\n\tRegisteredEditorPriority,\n\ttype ResolvedEditor,\n\tResolvedStatus,\n\teditorsAssociationsSettingId,\n\tglobMatchesResource,\n\tpriorityToRank,\n} from \"../common/editorResolverService.js\";\nimport type { PreferredGroup } from \"../common/editorService.js\";\n\ninterface RegisteredEditor {\n\tglobPattern: string | glob.IRelativePattern;\n\teditorInfo: RegisteredEditorInfo;\n\toptions?: RegisteredEditorOptions;\n\teditorFactoryObject: EditorInputFactoryObject;\n}\n\ntype RegisteredEditors = Array<RegisteredEditor>;\n\nexport class EditorResolverService\n\textends Disposable\n\timplements IEditorResolverService\n{\n\treadonly _serviceBrand: undefined;\n\n\t// Events\n\tprivate readonly _onDidChangeEditorRegistrations = this._register(\n\t\tnew PauseableEmitter<void>(),\n\t);\n\treadonly onDidChangeEditorRegistrations =\n\t\tthis._onDidChangeEditorRegistrations.event;\n\n\t// Constants\n\tprivate static readonly configureDefaultID =\n\t\t\"promptOpenWith.configureDefault\";\n\tprivate static readonly cacheStorageID = \"editorOverrideService.cache\";\n\tprivate static readonly conflictingDefaultsStorageID =\n\t\t\"editorOverrideService.conflictingDefaults\";\n\n\t// Data Stores\n\tprivate _editors: Map<\n\t\tstring | glob.IRelativePattern,\n\t\tMap<string, RegisteredEditors>\n\t> = new Map<\n\t\tstring | glob.IRelativePattern,\n\t\tMap<string, RegisteredEditors>\n\t>();\n\tprivate _flattenedEditors: Map<\n\t\tstring | glob.IRelativePattern,\n\t\tRegisteredEditors\n\t> = new Map();\n\tprivate _shouldReFlattenEditors = true;\n\tprivate cache: Set<string> | undefined;\n\n\tconstructor(\n\t\t@IEditorGroupsService\n\t\tprivate readonly editorGroupService: IEditorGroupsService,\n\t\t@IInstantiationService\n\t\tprivate readonly instantiationService: IInstantiationService,\n\t\t@IConfigurationService\n\t\tprivate readonly configurationService: IConfigurationService,\n\t\t@IQuickInputService\n\t\tprivate readonly quickInputService: IQuickInputService,\n\t\t@INotificationService\n\t\tprivate readonly notificationService: INotificationService,\n\t\t@ITelemetryService private readonly telemetryService: ITelemetryService,\n\t\t@IStorageService private readonly storageService: IStorageService,\n\t\t@IExtensionService private readonly extensionService: IExtensionService,\n\t\t@ILogService private readonly logService: ILogService,\n\t) {\n\t\tsuper();\n\t\t// Read in the cache on statup\n\t\tthis.cache = new Set<string>(\n\t\t\tJSON.parse(\n\t\t\t\tthis.storageService.get(\n\t\t\t\t\tEditorResolverService.cacheStorageID,\n\t\t\t\t\tStorageScope.PROFILE,\n\t\t\t\t\tJSON.stringify([]),\n\t\t\t\t),\n\t\t\t),\n\t\t);\n\t\tthis.storageService.remove(\n\t\t\tEditorResolverService.cacheStorageID,\n\t\t\tStorageScope.PROFILE,\n\t\t);\n\n\t\tthis._register(\n\t\t\tthis.storageService.onWillSaveState(() => {\n\t\t\t\t// We want to store the glob patterns we would activate on, this allows us to know if we need to await the ext host on startup for opening a resource\n\t\t\t\tthis.cacheEditors();\n\t\t\t}),\n\t\t);\n\n\t\t// When extensions have registered we no longer need the cache\n\t\tthis._register(\n\t\t\tthis.extensionService.onDidRegisterExtensions(() => {\n\t\t\t\tthis.cache = undefined;\n\t\t\t}),\n\t\t);\n\t}\n\n\tprivate resolveUntypedInputAndGroup(\n\t\teditor: IUntypedEditorInput,\n\t\tpreferredGroup: PreferredGroup | undefined,\n\t):\n\t\t| Promise<\n\t\t\t\t| [\n\t\t\t\t\t\tIUntypedEditorInput,\n\t\t\t\t\t\tIEditorGroup,\n\t\t\t\t\t\tEditorActivation | undefined,\n\t\t\t\t  ]\n\t\t\t\t| undefined\n\t\t  >\n\t\t| [IUntypedEditorInput, IEditorGroup, EditorActivation | undefined]\n\t\t| undefined {\n\t\tconst untypedEditor = editor;\n\n\t\t// Use the untyped editor to find a group\n\t\tconst findGroupResult = this.instantiationService.invokeFunction(\n\t\t\tfindGroup,\n\t\t\tuntypedEditor,\n\t\t\tpreferredGroup,\n\t\t);\n\t\tif (findGroupResult instanceof Promise) {\n\t\t\treturn findGroupResult.then(([group, activation]) => [\n\t\t\t\tuntypedEditor,\n\t\t\t\tgroup,\n\t\t\t\tactivation,\n\t\t\t]);\n\t\t} else {\n\t\t\tconst [group, activation] = findGroupResult;\n\t\t\treturn [untypedEditor, group, activation];\n\t\t}\n\t}\n\n\tasync resolveEditor(\n\t\teditor: IUntypedEditorInput,\n\t\tpreferredGroup: PreferredGroup | undefined,\n\t): Promise<ResolvedEditor> {\n\t\t// Update the flattened editors\n\t\tthis._flattenedEditors = this._flattenEditorsMap();\n\n\t\t// Special case: side by side editors requires us to\n\t\t// independently resolve both sides and then build\n\t\t// a side by side editor with the result\n\t\tif (isResourceSideBySideEditorInput(editor)) {\n\t\t\treturn this.doResolveSideBySideEditor(editor, preferredGroup);\n\t\t}\n\n\t\tlet resolvedUntypedAndGroup:\n\t\t\t| [IUntypedEditorInput, IEditorGroup, EditorActivation | undefined]\n\t\t\t| undefined;\n\t\tconst resolvedUntypedAndGroupResult = this.resolveUntypedInputAndGroup(\n\t\t\teditor,\n\t\t\tpreferredGroup,\n\t\t);\n\t\tif (resolvedUntypedAndGroupResult instanceof Promise) {\n\t\t\tresolvedUntypedAndGroup = await resolvedUntypedAndGroupResult;\n\t\t} else {\n\t\t\tresolvedUntypedAndGroup = resolvedUntypedAndGroupResult;\n\t\t}\n\n\t\tif (!resolvedUntypedAndGroup) {\n\t\t\treturn ResolvedStatus.NONE;\n\t\t}\n\t\t// Get the resolved untyped editor, group, and activation\n\t\tconst [untypedEditor, group, activation] = resolvedUntypedAndGroup;\n\t\tif (activation) {\n\t\t\tuntypedEditor.options = { ...untypedEditor.options, activation };\n\t\t}\n\n\t\tlet resource = EditorResourceAccessor.getCanonicalUri(untypedEditor, {\n\t\t\tsupportSideBySide: SideBySideEditor.PRIMARY,\n\t\t});\n\n\t\t// If it was resolved before we await for the extensions to activate and then proceed with resolution or else the backing extensions won't be registered\n\t\tif (this.cache && resource && this.resourceMatchesCache(resource)) {\n\t\t\tawait this.extensionService.whenInstalledExtensionsRegistered();\n\t\t}\n\n\t\t// Undefined resource -> untilted. Other malformed URI's are unresolvable\n\t\tif (resource === undefined) {\n\t\t\tresource = URI.from({ scheme: Schemas.untitled });\n\t\t} else if (resource.scheme === undefined || resource === null) {\n\t\t\treturn ResolvedStatus.NONE;\n\t\t}\n\n\t\tif (untypedEditor.options?.override === EditorResolution.PICK) {\n\t\t\tconst picked = await this.doPickEditor(untypedEditor);\n\t\t\t// If the picker was cancelled we will stop resolving the editor\n\t\t\tif (!picked) {\n\t\t\t\treturn ResolvedStatus.ABORT;\n\t\t\t}\n\t\t\t// Populate the options with the new ones\n\t\t\tuntypedEditor.options = picked;\n\t\t}\n\n\t\t// Resolved the editor ID as much as possible, now find a given editor (cast here is ok because we resolve down to a string above)\n\t\tlet { editor: selectedEditor, conflictingDefault } = this.getEditor(\n\t\t\tresource,\n\t\t\tuntypedEditor.options?.override as\n\t\t\t\t| string\n\t\t\t\t| EditorResolution.EXCLUSIVE_ONLY\n\t\t\t\t| undefined,\n\t\t);\n\t\t// If no editor was found and this was a typed editor or an editor with an explicit override we could not resolve it\n\t\tif (\n\t\t\t!selectedEditor &&\n\t\t\t(untypedEditor.options?.override ||\n\t\t\t\tisEditorInputWithOptions(editor))\n\t\t) {\n\t\t\treturn ResolvedStatus.NONE;\n\t\t} else if (!selectedEditor) {\n\t\t\t// Simple untyped editors that we could not resolve will be resolved to the default editor\n\t\t\tconst resolvedEditor = this.getEditor(\n\t\t\t\tresource,\n\t\t\t\tDEFAULT_EDITOR_ASSOCIATION.id,\n\t\t\t);\n\t\t\tselectedEditor = resolvedEditor?.editor;\n\t\t\tconflictingDefault = resolvedEditor?.conflictingDefault;\n\t\t\tif (!selectedEditor) {\n\t\t\t\treturn ResolvedStatus.NONE;\n\t\t\t}\n\t\t}\n\n\t\t// In the special case of diff editors we do some more work to determine the correct editor for both sides\n\t\tif (\n\t\t\tisResourceDiffEditorInput(untypedEditor) &&\n\t\t\tuntypedEditor.options?.override === undefined\n\t\t) {\n\t\t\tlet resource2 = EditorResourceAccessor.getCanonicalUri(\n\t\t\t\tuntypedEditor,\n\t\t\t\t{ supportSideBySide: SideBySideEditor.SECONDARY },\n\t\t\t);\n\t\t\tif (!resource2) {\n\t\t\t\tresource2 = URI.from({ scheme: Schemas.untitled });\n\t\t\t}\n\t\t\tconst { editor: selectedEditor2 } = this.getEditor(\n\t\t\t\tresource2,\n\t\t\t\tundefined,\n\t\t\t);\n\t\t\tif (\n\t\t\t\t!selectedEditor2 ||\n\t\t\t\tselectedEditor.editorInfo.id !== selectedEditor2.editorInfo.id\n\t\t\t) {\n\t\t\t\tconst {\n\t\t\t\t\teditor: selectedDiff,\n\t\t\t\t\tconflictingDefault: conflictingDefaultDiff,\n\t\t\t\t} = this.getEditor(resource, DEFAULT_EDITOR_ASSOCIATION.id);\n\t\t\t\tselectedEditor = selectedDiff;\n\t\t\t\tconflictingDefault = conflictingDefaultDiff;\n\t\t\t}\n\t\t\tif (!selectedEditor) {\n\t\t\t\treturn ResolvedStatus.NONE;\n\t\t\t}\n\t\t}\n\n\t\t// If no override we take the selected editor id so that matches works with the isActive check\n\t\tuntypedEditor.options = {\n\t\t\toverride: selectedEditor.editorInfo.id,\n\t\t\t...untypedEditor.options,\n\t\t};\n\n\t\t// Check if diff can be created based on prescene of factory function\n\t\tif (\n\t\t\tselectedEditor.editorFactoryObject.createDiffEditorInput ===\n\t\t\t\tundefined &&\n\t\t\tisResourceDiffEditorInput(untypedEditor)\n\t\t) {\n\t\t\treturn ResolvedStatus.NONE;\n\t\t}\n\n\t\tconst input = await this.doResolveEditor(\n\t\t\tuntypedEditor,\n\t\t\tgroup,\n\t\t\tselectedEditor,\n\t\t);\n\t\tif (conflictingDefault && input) {\n\t\t\t// Show the conflicting default dialog\n\t\t\tawait this.doHandleConflictingDefaults(\n\t\t\t\tresource,\n\t\t\t\tselectedEditor.editorInfo.label,\n\t\t\t\tuntypedEditor,\n\t\t\t\tinput.editor,\n\t\t\t\tgroup,\n\t\t\t);\n\t\t}\n\n\t\tif (input) {\n\t\t\tthis.sendEditorResolutionTelemetry(input.editor);\n\t\t\tif (input.editor.editorId !== selectedEditor.editorInfo.id) {\n\t\t\t\tthis.logService.warn(\n\t\t\t\t\t`Editor ID Mismatch: ${input.editor.editorId} !== ${selectedEditor.editorInfo.id}. This will cause bugs. Please ensure editorInput.editorId matches the registered id`,\n\t\t\t\t);\n\t\t\t}\n\t\t\treturn { ...input, group };\n\t\t}\n\t\treturn ResolvedStatus.ABORT;\n\t}\n\n\tprivate async doResolveSideBySideEditor(\n\t\teditor: IResourceSideBySideEditorInput,\n\t\tpreferredGroup: PreferredGroup | undefined,\n\t): Promise<ResolvedEditor> {\n\t\tconst primaryResolvedEditor = await this.resolveEditor(\n\t\t\teditor.primary,\n\t\t\tpreferredGroup,\n\t\t);\n\t\tif (!isEditorInputWithOptionsAndGroup(primaryResolvedEditor)) {\n\t\t\treturn ResolvedStatus.NONE;\n\t\t}\n\t\tconst secondaryResolvedEditor = await this.resolveEditor(\n\t\t\teditor.secondary,\n\t\t\tprimaryResolvedEditor.group ?? preferredGroup,\n\t\t);\n\t\tif (!isEditorInputWithOptionsAndGroup(secondaryResolvedEditor)) {\n\t\t\treturn ResolvedStatus.NONE;\n\t\t}\n\t\treturn {\n\t\t\tgroup: primaryResolvedEditor.group ?? secondaryResolvedEditor.group,\n\t\t\teditor: this.instantiationService.createInstance(\n\t\t\t\tSideBySideEditorInput,\n\t\t\t\teditor.label,\n\t\t\t\teditor.description,\n\t\t\t\tsecondaryResolvedEditor.editor,\n\t\t\t\tprimaryResolvedEditor.editor,\n\t\t\t),\n\t\t\toptions: editor.options,\n\t\t};\n\t}\n\n\tbufferChangeEvents(callback: Function): void {\n\t\tthis._onDidChangeEditorRegistrations.pause();\n\t\ttry {\n\t\t\tcallback();\n\t\t} finally {\n\t\t\tthis._onDidChangeEditorRegistrations.resume();\n\t\t}\n\t}\n\n\tregisterEditor(\n\t\tglobPattern: string | glob.IRelativePattern,\n\t\teditorInfo: RegisteredEditorInfo,\n\t\toptions: RegisteredEditorOptions,\n\t\teditorFactoryObject: EditorInputFactoryObject,\n\t): IDisposable {\n\t\tlet registeredEditor = this._editors.get(globPattern);\n\t\tif (registeredEditor === undefined) {\n\t\t\tregisteredEditor = new Map<string, RegisteredEditors>();\n\t\t\tthis._editors.set(globPattern, registeredEditor);\n\t\t}\n\n\t\tlet editorsWithId = registeredEditor.get(editorInfo.id);\n\t\tif (editorsWithId === undefined) {\n\t\t\teditorsWithId = [];\n\t\t}\n\t\tconst remove = insert(editorsWithId, {\n\t\t\tglobPattern,\n\t\t\teditorInfo,\n\t\t\toptions,\n\t\t\teditorFactoryObject,\n\t\t});\n\t\tregisteredEditor.set(editorInfo.id, editorsWithId);\n\t\tthis._shouldReFlattenEditors = true;\n\t\tthis._onDidChangeEditorRegistrations.fire();\n\t\treturn toDisposable(() => {\n\t\t\tremove();\n\t\t\tif (editorsWithId && editorsWithId.length === 0) {\n\t\t\t\tregisteredEditor?.delete(editorInfo.id);\n\t\t\t}\n\t\t\tthis._shouldReFlattenEditors = true;\n\t\t\tthis._onDidChangeEditorRegistrations.fire();\n\t\t});\n\t}\n\n\tgetAssociationsForResource(resource: URI): EditorAssociations {\n\t\tconst associations = this.getAllUserAssociations();\n\t\tlet matchingAssociations = associations.filter(\n\t\t\t(association) =>\n\t\t\t\tassociation.filenamePattern &&\n\t\t\t\tglobMatchesResource(association.filenamePattern, resource),\n\t\t);\n\t\t// Sort matching associations based on glob length as a longer glob will be more specific\n\t\tmatchingAssociations = matchingAssociations.sort(\n\t\t\t(a, b) =>\n\t\t\t\t(b.filenamePattern?.length ?? 0) -\n\t\t\t\t(a.filenamePattern?.length ?? 0),\n\t\t);\n\t\tconst allEditors: RegisteredEditors = this._registeredEditors;\n\t\t// Ensure that the settings are valid editors\n\t\treturn matchingAssociations.filter((association) =>\n\t\t\tallEditors.find((c) => c.editorInfo.id === association.viewType),\n\t\t);\n\t}\n\n\tgetAllUserAssociations(): EditorAssociations {\n\t\tconst inspectedEditorAssociations =\n\t\t\tthis.configurationService.inspect<{\n\t\t\t\t[fileNamePattern: string]: string;\n\t\t\t}>(editorsAssociationsSettingId) || {};\n\t\tconst defaultAssociations =\n\t\t\tinspectedEditorAssociations.defaultValue ?? {};\n\t\tconst workspaceAssociations =\n\t\t\tinspectedEditorAssociations.workspaceValue ?? {};\n\t\tconst userAssociations = inspectedEditorAssociations.userValue ?? {};\n\t\tconst rawAssociations: { [fileNamePattern: string]: string } = {\n\t\t\t...workspaceAssociations,\n\t\t};\n\t\t// We want to apply the default associations and user associations on top of the workspace associations but ignore duplicate keys.\n\t\tfor (const [key, value] of Object.entries({\n\t\t\t...defaultAssociations,\n\t\t\t...userAssociations,\n\t\t})) {\n\t\t\tif (rawAssociations[key] === undefined) {\n\t\t\t\trawAssociations[key] = value;\n\t\t\t}\n\t\t}\n\t\tconst associations = [];\n\t\tfor (const [key, value] of Object.entries(rawAssociations)) {\n\t\t\tconst association: EditorAssociation = {\n\t\t\t\tfilenamePattern: key,\n\t\t\t\tviewType: value,\n\t\t\t};\n\t\t\tassociations.push(association);\n\t\t}\n\t\treturn associations;\n\t}\n\n\t/**\n\t * Given the nested nature of the editors map, we merge factories of the same glob and id to make it flat\n\t * and easier to work with\n\t */\n\tprivate _flattenEditorsMap() {\n\t\t// If we shouldn't be re-flattening (due to lack of update) then return early\n\t\tif (!this._shouldReFlattenEditors) {\n\t\t\treturn this._flattenedEditors;\n\t\t}\n\t\tthis._shouldReFlattenEditors = false;\n\t\tconst editors = new Map<\n\t\t\tstring | glob.IRelativePattern,\n\t\t\tRegisteredEditors\n\t\t>();\n\t\tfor (const [glob, value] of this._editors) {\n\t\t\tconst registeredEditors: RegisteredEditors = [];\n\t\t\tfor (const editors of value.values()) {\n\t\t\t\tlet registeredEditor: RegisteredEditor | undefined;\n\t\t\t\t// Merge all editors with the same id and glob pattern together\n\t\t\t\tfor (const editor of editors) {\n\t\t\t\t\tif (!registeredEditor) {\n\t\t\t\t\t\tregisteredEditor = {\n\t\t\t\t\t\t\teditorInfo: editor.editorInfo,\n\t\t\t\t\t\t\tglobPattern: editor.globPattern,\n\t\t\t\t\t\t\toptions: {},\n\t\t\t\t\t\t\teditorFactoryObject: {},\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\t\t\t\t\t// Merge options and factories\n\t\t\t\t\tregisteredEditor.options = {\n\t\t\t\t\t\t...registeredEditor.options,\n\t\t\t\t\t\t...editor.options,\n\t\t\t\t\t};\n\t\t\t\t\tregisteredEditor.editorFactoryObject = {\n\t\t\t\t\t\t...registeredEditor.editorFactoryObject,\n\t\t\t\t\t\t...editor.editorFactoryObject,\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t\tif (registeredEditor) {\n\t\t\t\t\tregisteredEditors.push(registeredEditor);\n\t\t\t\t}\n\t\t\t}\n\t\t\teditors.set(glob, registeredEditors);\n\t\t}\n\t\treturn editors;\n\t}\n\n\t/**\n\t * Returns all editors as an array. Possible to contain duplicates\n\t */\n\tprivate get _registeredEditors(): RegisteredEditors {\n\t\treturn Array.from(this._flattenedEditors.values()).flat();\n\t}\n\n\tupdateUserAssociations(globPattern: string, editorID: string): void {\n\t\tconst newAssociation: EditorAssociation = {\n\t\t\tviewType: editorID,\n\t\t\tfilenamePattern: globPattern,\n\t\t};\n\t\tconst currentAssociations = this.getAllUserAssociations();\n\t\tconst newSettingObject = Object.create(null);\n\t\t// Form the new setting object including the newest associations\n\t\tfor (const association of [...currentAssociations, newAssociation]) {\n\t\t\tif (association.filenamePattern) {\n\t\t\t\tnewSettingObject[association.filenamePattern] =\n\t\t\t\t\tassociation.viewType;\n\t\t\t}\n\t\t}\n\t\tthis.configurationService.updateValue(\n\t\t\teditorsAssociationsSettingId,\n\t\t\tnewSettingObject,\n\t\t);\n\t}\n\n\tprivate findMatchingEditors(resource: URI): RegisteredEditor[] {\n\t\t// The user setting should be respected even if the editor doesn't specify that resource in package.json\n\t\tconst userSettings = this.getAssociationsForResource(resource);\n\t\tconst matchingEditors: RegisteredEditor[] = [];\n\t\t// Then all glob patterns\n\t\tfor (const [key, editors] of this._flattenedEditors) {\n\t\t\tfor (const editor of editors) {\n\t\t\t\tconst foundInSettings = userSettings.find(\n\t\t\t\t\t(setting) => setting.viewType === editor.editorInfo.id,\n\t\t\t\t);\n\t\t\t\tif (\n\t\t\t\t\t(foundInSettings &&\n\t\t\t\t\t\teditor.editorInfo.priority !==\n\t\t\t\t\t\t\tRegisteredEditorPriority.exclusive) ||\n\t\t\t\t\tglobMatchesResource(key, resource)\n\t\t\t\t) {\n\t\t\t\t\tmatchingEditors.push(editor);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t// Return the editors sorted by their priority\n\t\treturn matchingEditors.sort((a, b) => {\n\t\t\t// Very crude if priorities match longer glob wins as longer globs are normally more specific\n\t\t\tif (\n\t\t\t\tpriorityToRank(b.editorInfo.priority) ===\n\t\t\t\t\tpriorityToRank(a.editorInfo.priority) &&\n\t\t\t\ttypeof b.globPattern === \"string\" &&\n\t\t\t\ttypeof a.globPattern === \"string\"\n\t\t\t) {\n\t\t\t\treturn b.globPattern.length - a.globPattern.length;\n\t\t\t}\n\t\t\treturn (\n\t\t\t\tpriorityToRank(b.editorInfo.priority) -\n\t\t\t\tpriorityToRank(a.editorInfo.priority)\n\t\t\t);\n\t\t});\n\t}\n\n\tpublic getEditors(resource?: URI): RegisteredEditorInfo[] {\n\t\tthis._flattenedEditors = this._flattenEditorsMap();\n\n\t\t// By resource\n\t\tif (URI.isUri(resource)) {\n\t\t\tconst editors = this.findMatchingEditors(resource);\n\t\t\tif (\n\t\t\t\teditors.find(\n\t\t\t\t\t(e) =>\n\t\t\t\t\t\te.editorInfo.priority ===\n\t\t\t\t\t\tRegisteredEditorPriority.exclusive,\n\t\t\t\t)\n\t\t\t) {\n\t\t\t\treturn [];\n\t\t\t}\n\t\t\treturn editors.map((editor) => editor.editorInfo);\n\t\t}\n\n\t\t// All\n\t\treturn distinct(\n\t\t\tthis._registeredEditors.map((editor) => editor.editorInfo),\n\t\t\t(editor) => editor.id,\n\t\t);\n\t}\n\n\t/**\n\t * Given a resource and an editorId selects the best possible editor\n\t * @returns The editor and whether there was another default which conflicted with it\n\t */\n\tprivate getEditor(\n\t\tresource: URI,\n\t\teditorId: string | EditorResolution.EXCLUSIVE_ONLY | undefined,\n\t): { editor: RegisteredEditor | undefined; conflictingDefault: boolean } {\n\t\tconst findMatchingEditor = (\n\t\t\teditors: RegisteredEditors,\n\t\t\tviewType: string,\n\t\t) => {\n\t\t\treturn editors.find((editor) => {\n\t\t\t\tif (\n\t\t\t\t\teditor.options &&\n\t\t\t\t\teditor.options.canSupportResource !== undefined\n\t\t\t\t) {\n\t\t\t\t\treturn (\n\t\t\t\t\t\teditor.editorInfo.id === viewType &&\n\t\t\t\t\t\teditor.options.canSupportResource(resource)\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t\treturn editor.editorInfo.id === viewType;\n\t\t\t});\n\t\t};\n\n\t\tif (editorId && editorId !== EditorResolution.EXCLUSIVE_ONLY) {\n\t\t\t// Specific id passed in doesn't have to match the resource, it can be anything\n\t\t\tconst registeredEditors = this._registeredEditors;\n\t\t\treturn {\n\t\t\t\teditor: findMatchingEditor(registeredEditors, editorId),\n\t\t\t\tconflictingDefault: false,\n\t\t\t};\n\t\t}\n\n\t\tconst editors = this.findMatchingEditors(resource);\n\n\t\tconst associationsFromSetting =\n\t\t\tthis.getAssociationsForResource(resource);\n\t\t// We only want minPriority+ if no user defined setting is found, else we won't resolve an editor\n\t\tconst minPriority =\n\t\t\teditorId === EditorResolution.EXCLUSIVE_ONLY\n\t\t\t\t? RegisteredEditorPriority.exclusive\n\t\t\t\t: RegisteredEditorPriority.builtin;\n\t\tlet possibleEditors = editors.filter(\n\t\t\t(editor) =>\n\t\t\t\tpriorityToRank(editor.editorInfo.priority) >=\n\t\t\t\t\tpriorityToRank(minPriority) &&\n\t\t\t\teditor.editorInfo.id !== DEFAULT_EDITOR_ASSOCIATION.id,\n\t\t);\n\t\tif (possibleEditors.length === 0) {\n\t\t\treturn {\n\t\t\t\teditor:\n\t\t\t\t\tassociationsFromSetting[0] &&\n\t\t\t\t\tminPriority !== RegisteredEditorPriority.exclusive\n\t\t\t\t\t\t? findMatchingEditor(\n\t\t\t\t\t\t\t\teditors,\n\t\t\t\t\t\t\t\tassociationsFromSetting[0].viewType,\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t: undefined,\n\t\t\t\tconflictingDefault: false,\n\t\t\t};\n\t\t}\n\t\t// If the editor is exclusive we use that, else use the user setting, else use the built-in+ editor\n\t\tconst selectedViewType =\n\t\t\tpossibleEditors[0].editorInfo.priority ===\n\t\t\tRegisteredEditorPriority.exclusive\n\t\t\t\t? possibleEditors[0].editorInfo.id\n\t\t\t\t: associationsFromSetting[0]?.viewType ||\n\t\t\t\t\tpossibleEditors[0].editorInfo.id;\n\n\t\tlet conflictingDefault = false;\n\n\t\t// Filter out exclusive before we check for conflicts as exclusive editors cannot be manually chosen\n\t\tpossibleEditors = possibleEditors.filter(\n\t\t\t(editor) =>\n\t\t\t\teditor.editorInfo.priority !==\n\t\t\t\tRegisteredEditorPriority.exclusive,\n\t\t);\n\t\tif (\n\t\t\tassociationsFromSetting.length === 0 &&\n\t\t\tpossibleEditors.length > 1\n\t\t) {\n\t\t\tconflictingDefault = true;\n\t\t}\n\n\t\treturn {\n\t\t\teditor: findMatchingEditor(editors, selectedViewType),\n\t\t\tconflictingDefault,\n\t\t};\n\t}\n\n\tprivate async doResolveEditor(\n\t\teditor: IUntypedEditorInput,\n\t\tgroup: IEditorGroup,\n\t\tselectedEditor: RegisteredEditor,\n\t): Promise<EditorInputWithOptions | undefined> {\n\t\tlet options = editor.options;\n\t\tconst resource = EditorResourceAccessor.getCanonicalUri(editor, {\n\t\t\tsupportSideBySide: SideBySideEditor.PRIMARY,\n\t\t});\n\t\t// If no activation option is provided, populate it.\n\t\tif (options && typeof options.activation === \"undefined\") {\n\t\t\toptions = {\n\t\t\t\t...options,\n\t\t\t\tactivation: options.preserveFocus\n\t\t\t\t\t? EditorActivation.RESTORE\n\t\t\t\t\t: undefined,\n\t\t\t};\n\t\t}\n\n\t\t// If it's a merge editor we trigger the create merge editor input\n\t\tif (isResourceMergeEditorInput(editor)) {\n\t\t\tif (!selectedEditor.editorFactoryObject.createMergeEditorInput) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst inputWithOptions =\n\t\t\t\tawait selectedEditor.editorFactoryObject.createMergeEditorInput(\n\t\t\t\t\teditor,\n\t\t\t\t\tgroup,\n\t\t\t\t);\n\t\t\treturn {\n\t\t\t\teditor: inputWithOptions.editor,\n\t\t\t\toptions: inputWithOptions.options ?? options,\n\t\t\t};\n\t\t}\n\n\t\t// If it's a diff editor we trigger the create diff editor input\n\t\tif (isResourceDiffEditorInput(editor)) {\n\t\t\tif (!selectedEditor.editorFactoryObject.createDiffEditorInput) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst inputWithOptions =\n\t\t\t\tawait selectedEditor.editorFactoryObject.createDiffEditorInput(\n\t\t\t\t\teditor,\n\t\t\t\t\tgroup,\n\t\t\t\t);\n\t\t\treturn {\n\t\t\t\teditor: inputWithOptions.editor,\n\t\t\t\toptions: inputWithOptions.options ?? options,\n\t\t\t};\n\t\t}\n\n\t\t// If it's a diff list editor we trigger the create diff list editor input\n\t\tif (isResourceMultiDiffEditorInput(editor)) {\n\t\t\tif (\n\t\t\t\t!selectedEditor.editorFactoryObject.createMultiDiffEditorInput\n\t\t\t) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst inputWithOptions =\n\t\t\t\tawait selectedEditor.editorFactoryObject.createMultiDiffEditorInput(\n\t\t\t\t\teditor,\n\t\t\t\t\tgroup,\n\t\t\t\t);\n\t\t\treturn {\n\t\t\t\teditor: inputWithOptions.editor,\n\t\t\t\toptions: inputWithOptions.options ?? options,\n\t\t\t};\n\t\t}\n\n\t\tif (isResourceSideBySideEditorInput(editor)) {\n\t\t\tthrow new Error(\n\t\t\t\t`Untyped side by side editor input not supported here.`,\n\t\t\t);\n\t\t}\n\n\t\tif (isUntitledResourceEditorInput(editor)) {\n\t\t\tif (!selectedEditor.editorFactoryObject.createUntitledEditorInput) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst inputWithOptions =\n\t\t\t\tawait selectedEditor.editorFactoryObject.createUntitledEditorInput(\n\t\t\t\t\teditor,\n\t\t\t\t\tgroup,\n\t\t\t\t);\n\t\t\treturn {\n\t\t\t\teditor: inputWithOptions.editor,\n\t\t\t\toptions: inputWithOptions.options ?? options,\n\t\t\t};\n\t\t}\n\n\t\t// Should no longer have an undefined resource so lets throw an error if that's somehow the case\n\t\tif (resource === undefined) {\n\t\t\tthrow new Error(`Undefined resource on non untitled editor input.`);\n\t\t}\n\n\t\t// If the editor states it can only be opened once per resource we must close all existing ones except one and move the new one into the group\n\t\tconst singleEditorPerResource =\n\t\t\ttypeof selectedEditor.options?.singlePerResource === \"function\"\n\t\t\t\t? selectedEditor.options.singlePerResource()\n\t\t\t\t: selectedEditor.options?.singlePerResource;\n\t\tif (singleEditorPerResource) {\n\t\t\tconst existingEditors = this.findExistingEditorsForResource(\n\t\t\t\tresource,\n\t\t\t\tselectedEditor.editorInfo.id,\n\t\t\t);\n\t\t\tif (existingEditors.length) {\n\t\t\t\tconst editor = await this.moveExistingEditorForResource(\n\t\t\t\t\texistingEditors,\n\t\t\t\t\tgroup,\n\t\t\t\t);\n\t\t\t\tif (editor) {\n\t\t\t\t\treturn { editor, options };\n\t\t\t\t} else {\n\t\t\t\t\treturn; // failed to move\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// If no factory is above, return flow back to caller letting them know we could not resolve it\n\t\tif (!selectedEditor.editorFactoryObject.createEditorInput) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Respect options passed back\n\t\tconst inputWithOptions =\n\t\t\tawait selectedEditor.editorFactoryObject.createEditorInput(\n\t\t\t\teditor,\n\t\t\t\tgroup,\n\t\t\t);\n\t\toptions = inputWithOptions.options ?? options;\n\t\tconst input = inputWithOptions.editor;\n\n\t\treturn { editor: input, options };\n\t}\n\n\t/**\n\t * Moves the first existing editor for a resource to the target group unless already opened there.\n\t * Additionally will close any other editors that are open for that resource and viewtype besides the first one found\n\t * @param resource The resource of the editor\n\t * @param viewType the viewtype of the editor\n\t * @param targetGroup The group to move it to\n\t * @returns The moved editor input or `undefined` if the editor could not be moved\n\t */\n\tprivate async moveExistingEditorForResource(\n\t\texistingEditorsForResource: Array<{\n\t\t\teditor: EditorInput;\n\t\t\tgroup: IEditorGroup;\n\t\t}>,\n\t\ttargetGroup: IEditorGroup,\n\t): Promise<EditorInput | undefined> {\n\t\tconst editorToUse = existingEditorsForResource[0];\n\n\t\t// We should only have one editor but if there are multiple we close the others\n\t\tfor (const { editor, group } of existingEditorsForResource) {\n\t\t\tif (editor !== editorToUse.editor) {\n\t\t\t\tconst closed = await group.closeEditor(editor);\n\t\t\t\tif (!closed) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Move the editor already opened to the target group\n\t\tif (targetGroup.id !== editorToUse.group.id) {\n\t\t\tconst moved = editorToUse.group.moveEditor(\n\t\t\t\teditorToUse.editor,\n\t\t\t\ttargetGroup,\n\t\t\t);\n\t\t\tif (!moved) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\treturn editorToUse.editor;\n\t}\n\n\t/**\n\t * Given a resource and an editorId, returns all editors open for that resource and editorId.\n\t * @param resource The resource specified\n\t * @param editorId The editorID\n\t * @returns A list of editors\n\t */\n\tprivate findExistingEditorsForResource(\n\t\tresource: URI,\n\t\teditorId: string,\n\t): Array<{ editor: EditorInput; group: IEditorGroup }> {\n\t\tconst out: Array<{ editor: EditorInput; group: IEditorGroup }> = [];\n\t\tconst orderedGroups = distinct([...this.editorGroupService.groups]);\n\n\t\tfor (const group of orderedGroups) {\n\t\t\tfor (const editor of group.editors) {\n\t\t\t\tif (\n\t\t\t\t\tisEqual(editor.resource, resource) &&\n\t\t\t\t\teditor.editorId === editorId\n\t\t\t\t) {\n\t\t\t\t\tout.push({ editor, group });\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn out;\n\t}\n\n\tprivate async doHandleConflictingDefaults(\n\t\tresource: URI,\n\t\teditorName: string,\n\t\tuntypedInput: IUntypedEditorInput,\n\t\tcurrentEditor: EditorInput,\n\t\tgroup: IEditorGroup,\n\t) {\n\t\ttype StoredChoice = {\n\t\t\t[key: string]: string[];\n\t\t};\n\t\tconst editors = this.findMatchingEditors(resource);\n\t\tconst storedChoices: StoredChoice = JSON.parse(\n\t\t\tthis.storageService.get(\n\t\t\t\tEditorResolverService.conflictingDefaultsStorageID,\n\t\t\t\tStorageScope.PROFILE,\n\t\t\t\t\"{}\",\n\t\t\t),\n\t\t);\n\t\tconst globForResource = `*${extname(resource)}`;\n\t\t// Writes to the storage service that a choice has been made for the currently installed editors\n\t\tconst writeCurrentEditorsToStorage = () => {\n\t\t\tstoredChoices[globForResource] = [];\n\t\t\teditors.forEach((editor) =>\n\t\t\t\tstoredChoices[globForResource].push(editor.editorInfo.id),\n\t\t\t);\n\t\t\tthis.storageService.store(\n\t\t\t\tEditorResolverService.conflictingDefaultsStorageID,\n\t\t\t\tJSON.stringify(storedChoices),\n\t\t\t\tStorageScope.PROFILE,\n\t\t\t\tStorageTarget.MACHINE,\n\t\t\t);\n\t\t};\n\n\t\t// If the user has already made a choice for this editor we don't want to ask them again\n\t\tif (\n\t\t\tstoredChoices[globForResource] &&\n\t\t\tstoredChoices[globForResource].find(\n\t\t\t\t(editorID) => editorID === currentEditor.editorId,\n\t\t\t)\n\t\t) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst handle = this.notificationService.prompt(\n\t\t\tSeverity.Warning,\n\t\t\tlocalize(\n\t\t\t\t\"editorResolver.conflictingDefaults\",\n\t\t\t\t\"There are multiple default editors available for the resource.\",\n\t\t\t),\n\t\t\t[\n\t\t\t\t{\n\t\t\t\t\tlabel: localize(\n\t\t\t\t\t\t\"editorResolver.configureDefault\",\n\t\t\t\t\t\t\"Configure Default\",\n\t\t\t\t\t),\n\t\t\t\t\trun: async () => {\n\t\t\t\t\t\t// Show the picker and tell it to update the setting to whatever the user selected\n\t\t\t\t\t\tconst picked = await this.doPickEditor(\n\t\t\t\t\t\t\tuntypedInput,\n\t\t\t\t\t\t\ttrue,\n\t\t\t\t\t\t);\n\t\t\t\t\t\tif (!picked) {\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tuntypedInput.options = picked;\n\t\t\t\t\t\tconst replacementEditor = await this.resolveEditor(\n\t\t\t\t\t\t\tuntypedInput,\n\t\t\t\t\t\t\tgroup,\n\t\t\t\t\t\t);\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\treplacementEditor === ResolvedStatus.ABORT ||\n\t\t\t\t\t\t\treplacementEditor === ResolvedStatus.NONE\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t// Replace the current editor with the picked one\n\t\t\t\t\t\tgroup.replaceEditors([\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\teditor: currentEditor,\n\t\t\t\t\t\t\t\treplacement: replacementEditor.editor,\n\t\t\t\t\t\t\t\toptions: replacementEditor.options ?? picked,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t]);\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tlabel: localize(\n\t\t\t\t\t\t\"editorResolver.keepDefault\",\n\t\t\t\t\t\t\"Keep {0}\",\n\t\t\t\t\t\teditorName,\n\t\t\t\t\t),\n\t\t\t\t\trun: writeCurrentEditorsToStorage,\n\t\t\t\t},\n\t\t\t],\n\t\t);\n\t\t// If the user pressed X we assume they want to keep the current editor as default\n\t\tconst onCloseListener = handle.onDidClose(() => {\n\t\t\twriteCurrentEditorsToStorage();\n\t\t\tonCloseListener.dispose();\n\t\t});\n\t}\n\n\tprivate mapEditorsToQuickPickEntry(\n\t\tresource: URI,\n\t\tshowDefaultPicker?: boolean,\n\t) {\n\t\tconst currentEditor = this.editorGroupService.activeGroup\n\t\t\t.findEditors(resource)\n\t\t\t.at(0);\n\t\t// If untitled, we want all registered editors\n\t\tlet registeredEditors =\n\t\t\tresource.scheme === Schemas.untitled\n\t\t\t\t? this._registeredEditors.filter(\n\t\t\t\t\t\t(e) =>\n\t\t\t\t\t\t\te.editorInfo.priority !==\n\t\t\t\t\t\t\tRegisteredEditorPriority.exclusive,\n\t\t\t\t\t)\n\t\t\t\t: this.findMatchingEditors(resource);\n\t\t// We don't want duplicate Id entries\n\t\tregisteredEditors = distinct(registeredEditors, (c) => c.editorInfo.id);\n\t\tconst defaultSetting =\n\t\t\tthis.getAssociationsForResource(resource)[0]?.viewType;\n\t\t// Not the most efficient way to do this, but we want to ensure the text editor is at the top of the quickpick\n\t\tregisteredEditors = registeredEditors.sort((a, b) => {\n\t\t\tif (a.editorInfo.id === DEFAULT_EDITOR_ASSOCIATION.id) {\n\t\t\t\treturn -1;\n\t\t\t} else if (b.editorInfo.id === DEFAULT_EDITOR_ASSOCIATION.id) {\n\t\t\t\treturn 1;\n\t\t\t} else {\n\t\t\t\treturn (\n\t\t\t\t\tpriorityToRank(b.editorInfo.priority) -\n\t\t\t\t\tpriorityToRank(a.editorInfo.priority)\n\t\t\t\t);\n\t\t\t}\n\t\t});\n\t\tconst quickPickEntries: Array<QuickPickItem> = [];\n\t\tconst currentlyActiveLabel = localize(\n\t\t\t\"promptOpenWith.currentlyActive\",\n\t\t\t\"Active\",\n\t\t);\n\t\tconst currentDefaultLabel = localize(\n\t\t\t\"promptOpenWith.currentDefault\",\n\t\t\t\"Default\",\n\t\t);\n\t\tconst currentDefaultAndActiveLabel = localize(\n\t\t\t\"promptOpenWith.currentDefaultAndActive\",\n\t\t\t\"Active and Default\",\n\t\t);\n\t\t// Default order = setting -> highest priority -> text\n\t\tlet defaultViewType = defaultSetting;\n\t\tif (\n\t\t\t!defaultViewType &&\n\t\t\tregisteredEditors.length > 2 &&\n\t\t\tregisteredEditors[1]?.editorInfo.priority !==\n\t\t\t\tRegisteredEditorPriority.option\n\t\t) {\n\t\t\tdefaultViewType = registeredEditors[1]?.editorInfo.id;\n\t\t}\n\t\tif (!defaultViewType) {\n\t\t\tdefaultViewType = DEFAULT_EDITOR_ASSOCIATION.id;\n\t\t}\n\t\t// Map the editors to quickpick entries\n\t\tregisteredEditors.forEach((editor) => {\n\t\t\tconst currentViewType =\n\t\t\t\tcurrentEditor?.editorId ?? DEFAULT_EDITOR_ASSOCIATION.id;\n\t\t\tconst isActive = currentEditor\n\t\t\t\t? editor.editorInfo.id === currentViewType\n\t\t\t\t: false;\n\t\t\tconst isDefault = editor.editorInfo.id === defaultViewType;\n\t\t\tconst quickPickEntry: IQuickPickItem = {\n\t\t\t\tid: editor.editorInfo.id,\n\t\t\t\tlabel: editor.editorInfo.label,\n\t\t\t\tdescription:\n\t\t\t\t\tisActive && isDefault\n\t\t\t\t\t\t? currentDefaultAndActiveLabel\n\t\t\t\t\t\t: isActive\n\t\t\t\t\t\t\t? currentlyActiveLabel\n\t\t\t\t\t\t\t: isDefault\n\t\t\t\t\t\t\t\t? currentDefaultLabel\n\t\t\t\t\t\t\t\t: undefined,\n\t\t\t\tdetail: editor.editorInfo.detail ?? editor.editorInfo.priority,\n\t\t\t};\n\t\t\tquickPickEntries.push(quickPickEntry);\n\t\t});\n\t\tif (!showDefaultPicker && extname(resource) !== \"\") {\n\t\t\tconst separator: IQuickPickSeparator = { type: \"separator\" };\n\t\t\tquickPickEntries.push(separator);\n\t\t\tconst configureDefaultEntry = {\n\t\t\t\tid: EditorResolverService.configureDefaultID,\n\t\t\t\tlabel: localize(\n\t\t\t\t\t\"promptOpenWith.configureDefault\",\n\t\t\t\t\t\"Configure default editor for '{0}'...\",\n\t\t\t\t\t`*${extname(resource)}`,\n\t\t\t\t),\n\t\t\t};\n\t\t\tquickPickEntries.push(configureDefaultEntry);\n\t\t}\n\t\treturn quickPickEntries;\n\t}\n\n\tprivate async doPickEditor(\n\t\teditor: IUntypedEditorInput,\n\t\tshowDefaultPicker?: boolean,\n\t): Promise<IEditorOptions | undefined> {\n\t\ttype EditorPick = {\n\t\t\treadonly item: IQuickPickItem;\n\t\t\treadonly keyMods?: IKeyMods;\n\t\t\treadonly openInBackground: boolean;\n\t\t};\n\n\t\tlet resource = EditorResourceAccessor.getOriginalUri(editor, {\n\t\t\tsupportSideBySide: SideBySideEditor.PRIMARY,\n\t\t});\n\n\t\tif (resource === undefined) {\n\t\t\tresource = URI.from({ scheme: Schemas.untitled });\n\t\t}\n\n\t\t// Get all the editors for the resource as quickpick entries\n\t\tconst editorPicks = this.mapEditorsToQuickPickEntry(\n\t\t\tresource,\n\t\t\tshowDefaultPicker,\n\t\t);\n\n\t\t// Create the editor picker\n\t\tconst disposables = new DisposableStore();\n\t\tconst editorPicker = disposables.add(\n\t\t\tthis.quickInputService.createQuickPick<IQuickPickItem>({\n\t\t\t\tuseSeparators: true,\n\t\t\t}),\n\t\t);\n\t\tconst placeHolderMessage = showDefaultPicker\n\t\t\t? localize(\n\t\t\t\t\t\"promptOpenWith.updateDefaultPlaceHolder\",\n\t\t\t\t\t\"Select new default editor for '{0}'\",\n\t\t\t\t\t`*${extname(resource)}`,\n\t\t\t\t)\n\t\t\t: localize(\n\t\t\t\t\t\"promptOpenWith.placeHolder\",\n\t\t\t\t\t\"Select editor for '{0}'\",\n\t\t\t\t\tbasename(resource),\n\t\t\t\t);\n\t\teditorPicker.placeholder = placeHolderMessage;\n\t\teditorPicker.canAcceptInBackground = true;\n\t\teditorPicker.items = editorPicks;\n\t\tconst firstItem = editorPicker.items.find(\n\t\t\t(item) => item.type === \"item\",\n\t\t) as IQuickPickItem | undefined;\n\t\tif (firstItem) {\n\t\t\teditorPicker.selectedItems = [firstItem];\n\t\t}\n\n\t\t// Prompt the user to select an editor\n\t\tconst picked: EditorPick | undefined = await new Promise<\n\t\t\tEditorPick | undefined\n\t\t>((resolve) => {\n\t\t\tdisposables.add(\n\t\t\t\teditorPicker.onDidAccept((e) => {\n\t\t\t\t\tlet result: EditorPick | undefined;\n\n\t\t\t\t\tif (editorPicker.selectedItems.length === 1) {\n\t\t\t\t\t\tresult = {\n\t\t\t\t\t\t\titem: editorPicker.selectedItems[0],\n\t\t\t\t\t\t\tkeyMods: editorPicker.keyMods,\n\t\t\t\t\t\t\topenInBackground: e.inBackground,\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\n\t\t\t\t\t// If asked to always update the setting then update it even if the gear isn't clicked\n\t\t\t\t\tif (resource && showDefaultPicker && result?.item.id) {\n\t\t\t\t\t\tthis.updateUserAssociations(\n\t\t\t\t\t\t\t`*${extname(resource)}`,\n\t\t\t\t\t\t\tresult.item.id,\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\n\t\t\t\t\tresolve(result);\n\t\t\t\t}),\n\t\t\t);\n\n\t\t\tdisposables.add(\n\t\t\t\teditorPicker.onDidHide(() => {\n\t\t\t\t\tdisposables.dispose();\n\t\t\t\t\tresolve(undefined);\n\t\t\t\t}),\n\t\t\t);\n\n\t\t\tdisposables.add(\n\t\t\t\teditorPicker.onDidTriggerItemButton((e) => {\n\t\t\t\t\t// Trigger opening and close picker\n\t\t\t\t\tresolve({ item: e.item, openInBackground: false });\n\n\t\t\t\t\t// Persist setting\n\t\t\t\t\tif (resource && e.item && e.item.id) {\n\t\t\t\t\t\tthis.updateUserAssociations(\n\t\t\t\t\t\t\t`*${extname(resource)}`,\n\t\t\t\t\t\t\te.item.id,\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t}),\n\t\t\t);\n\n\t\t\teditorPicker.show();\n\t\t});\n\n\t\t// Close picker\n\t\teditorPicker.dispose();\n\n\t\t// If the user picked an editor, look at how the picker was\n\t\t// used (e.g. modifier keys, open in background) and create the\n\t\t// options and group to use accordingly\n\t\tif (picked) {\n\t\t\t// If the user selected to configure default we trigger this picker again and tell it to show the default picker\n\t\t\tif (picked.item.id === EditorResolverService.configureDefaultID) {\n\t\t\t\treturn this.doPickEditor(editor, true);\n\t\t\t}\n\n\t\t\t// Figure out options\n\t\t\tconst targetOptions: IEditorOptions = {\n\t\t\t\t...editor.options,\n\t\t\t\toverride: picked.item.id,\n\t\t\t\tpreserveFocus:\n\t\t\t\t\tpicked.openInBackground || editor.options?.preserveFocus,\n\t\t\t};\n\n\t\t\treturn targetOptions;\n\t\t}\n\n\t\treturn undefined;\n\t}\n\n\tprivate sendEditorResolutionTelemetry(chosenInput: EditorInput): void {\n\t\ttype editorResolutionClassification = {\n\t\t\tviewType: {\n\t\t\t\tclassification: \"PublicNonPersonalData\";\n\t\t\t\tpurpose: \"FeatureInsight\";\n\t\t\t\tcomment: \"The id of the editor opened. Used to gain an understanding of what editors are most popular\";\n\t\t\t};\n\t\t\towner: \"lramos15\";\n\t\t\tcomment: \"An event that fires when an editor type is picked\";\n\t\t};\n\t\ttype editorResolutionEvent = {\n\t\t\tviewType: string;\n\t\t};\n\t\tif (chosenInput.editorId) {\n\t\t\tthis.telemetryService.publicLog2<\n\t\t\t\teditorResolutionEvent,\n\t\t\t\teditorResolutionClassification\n\t\t\t>(\"override.viewType\", { viewType: chosenInput.editorId });\n\t\t}\n\t}\n\n\tprivate cacheEditors() {\n\t\t// Create a set to store glob patterns\n\t\tconst cacheStorage: Set<string> = new Set<string>();\n\n\t\t// Store just the relative pattern pieces without any path info\n\t\tfor (const [globPattern, contribPoint] of this._flattenedEditors) {\n\t\t\tconst nonOptional = !!contribPoint.find(\n\t\t\t\t(c) =>\n\t\t\t\t\tc.editorInfo.priority !== RegisteredEditorPriority.option &&\n\t\t\t\t\tc.editorInfo.id !== DEFAULT_EDITOR_ASSOCIATION.id,\n\t\t\t);\n\t\t\t// Don't keep a cache of the optional ones as those wouldn't be opened on start anyways\n\t\t\tif (!nonOptional) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (glob.isRelativePattern(globPattern)) {\n\t\t\t\tcacheStorage.add(`${globPattern.pattern}`);\n\t\t\t} else {\n\t\t\t\tcacheStorage.add(globPattern);\n\t\t\t}\n\t\t}\n\n\t\t// Also store the users settings as those would have to activate on startup as well\n\t\tconst userAssociations = this.getAllUserAssociations();\n\t\tfor (const association of userAssociations) {\n\t\t\tif (association.filenamePattern) {\n\t\t\t\tcacheStorage.add(association.filenamePattern);\n\t\t\t}\n\t\t}\n\t\tthis.storageService.store(\n\t\t\tEditorResolverService.cacheStorageID,\n\t\t\tJSON.stringify(Array.from(cacheStorage)),\n\t\t\tStorageScope.PROFILE,\n\t\t\tStorageTarget.MACHINE,\n\t\t);\n\t}\n\n\tprivate resourceMatchesCache(resource: URI): boolean {\n\t\tif (!this.cache) {\n\t\t\treturn false;\n\t\t}\n\n\t\tfor (const cacheEntry of this.cache) {\n\t\t\tif (globMatchesResource(cacheEntry, resource)) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n}\n\nregisterSingleton(\n\tIEditorResolverService,\n\tEditorResolverService,\n\tInstantiationType.Eager,\n);\n"],
  "mappings": "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",
  "names": ["glob", "editors", "inputWithOptions", "editor"]
}
