{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/editor/common/editorResolverService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport type { Event } from \"../../../../base/common/event.js\";\nimport * as glob from \"../../../../base/common/glob.js\";\nimport type { IDisposable } from \"../../../../base/common/lifecycle.js\";\nimport { Schemas } from \"../../../../base/common/network.js\";\nimport { posix } from \"../../../../base/common/path.js\";\nimport { basename } from \"../../../../base/common/resources.js\";\nimport type { AtLeastOne } from \"../../../../base/common/types.js\";\nimport type { URI } from \"../../../../base/common/uri.js\";\nimport { localize } from \"../../../../nls.js\";\nimport {\n\tExtensions as ConfigurationExtensions,\n\ttype IConfigurationNode,\n\ttype IConfigurationRegistry,\n} from \"../../../../platform/configuration/common/configurationRegistry.js\";\nimport type {\n\tIResourceEditorInput,\n\tITextResourceEditorInput,\n} from \"../../../../platform/editor/common/editor.js\";\nimport { createDecorator } from \"../../../../platform/instantiation/common/instantiation.js\";\nimport { Registry } from \"../../../../platform/registry/common/platform.js\";\nimport { workbenchConfigurationNodeBase } from \"../../../common/configuration.js\";\nimport type {\n\tEditorInputWithOptions,\n\tEditorInputWithOptionsAndGroup,\n\tIResourceDiffEditorInput,\n\tIResourceMergeEditorInput,\n\tIResourceMultiDiffEditorInput,\n\tIUntitledTextResourceEditorInput,\n\tIUntypedEditorInput,\n} from \"../../../common/editor.js\";\nimport type { IEditorGroup } from \"./editorGroupsService.js\";\nimport type { PreferredGroup } from \"./editorService.js\";\n\nexport const IEditorResolverService = createDecorator<IEditorResolverService>(\n\t\"editorResolverService\",\n);\n\n//#region Editor Associations\n\n// Static values for registered editors\n\nexport type EditorAssociation = {\n\treadonly viewType: string;\n\treadonly filenamePattern?: string;\n};\n\nexport type EditorAssociations = readonly EditorAssociation[];\n\nexport const editorsAssociationsSettingId = \"workbench.editorAssociations\";\n\nconst configurationRegistry = Registry.as<IConfigurationRegistry>(\n\tConfigurationExtensions.Configuration,\n);\n\nconst editorAssociationsConfigurationNode: IConfigurationNode = {\n\t...workbenchConfigurationNodeBase,\n\tproperties: {\n\t\t\"workbench.editorAssociations\": {\n\t\t\ttype: \"object\",\n\t\t\tmarkdownDescription: localize(\n\t\t\t\t\"editor.editorAssociations\",\n\t\t\t\t'Configure [glob patterns](https://aka.ms/vscode-glob-patterns) to editors (for example `\"*.hex\": \"hexEditor.hexedit\"`). These have precedence over the default behavior.',\n\t\t\t),\n\t\t\tadditionalProperties: {\n\t\t\t\ttype: \"string\",\n\t\t\t},\n\t\t},\n\t},\n};\n\nexport interface IEditorType {\n\treadonly id: string;\n\treadonly displayName: string;\n\treadonly providerDisplayName: string;\n}\n\nconfigurationRegistry.registerConfiguration(\n\teditorAssociationsConfigurationNode,\n);\n//#endregion\n\n//#region EditorResolverService types\nexport enum RegisteredEditorPriority {\n\tbuiltin = \"builtin\",\n\toption = \"option\",\n\texclusive = \"exclusive\",\n\tdefault = \"default\",\n}\n\n/**\n * If we didn't resolve an editor dictates what to do with the opening state\n * ABORT = Do not continue with opening the editor\n * NONE = Continue as if the resolution has been disabled as the service could not resolve one\n */\nexport enum ResolvedStatus {\n\tABORT = 1,\n\tNONE = 2,\n}\n\nexport type ResolvedEditor = EditorInputWithOptionsAndGroup | ResolvedStatus;\n\nexport type RegisteredEditorOptions = {\n\t/**\n\t * If your editor cannot be opened in multiple groups for the same resource\n\t */\n\tsinglePerResource?: boolean | (() => boolean);\n\n\t/**\n\t * Whether or not you can support opening the given resource.\n\t * If omitted we assume you can open everything\n\t */\n\tcanSupportResource?: (resource: URI) => boolean;\n};\n\nexport type RegisteredEditorInfo = {\n\tid: string;\n\tlabel: string;\n\tdetail?: string;\n\tpriority: RegisteredEditorPriority;\n};\n\ntype EditorInputFactoryResult =\n\t| EditorInputWithOptions\n\t| Promise<EditorInputWithOptions>;\n\nexport type EditorInputFactoryFunction = (\n\teditorInput: IResourceEditorInput | ITextResourceEditorInput,\n\tgroup: IEditorGroup,\n) => EditorInputFactoryResult;\n\nexport type UntitledEditorInputFactoryFunction = (\n\tuntitledEditorInput: IUntitledTextResourceEditorInput,\n\tgroup: IEditorGroup,\n) => EditorInputFactoryResult;\n\nexport type DiffEditorInputFactoryFunction = (\n\tdiffEditorInput: IResourceDiffEditorInput,\n\tgroup: IEditorGroup,\n) => EditorInputFactoryResult;\n\nexport type MultiDiffEditorInputFactoryFunction = (\n\tmultiDiffEditorInput: IResourceMultiDiffEditorInput,\n\tgroup: IEditorGroup,\n) => EditorInputFactoryResult;\n\nexport type MergeEditorInputFactoryFunction = (\n\tmergeEditorInput: IResourceMergeEditorInput,\n\tgroup: IEditorGroup,\n) => EditorInputFactoryResult;\n\ntype EditorInputFactories = {\n\tcreateEditorInput?: EditorInputFactoryFunction;\n\tcreateUntitledEditorInput?: UntitledEditorInputFactoryFunction;\n\tcreateDiffEditorInput?: DiffEditorInputFactoryFunction;\n\tcreateMultiDiffEditorInput?: MultiDiffEditorInputFactoryFunction;\n\tcreateMergeEditorInput?: MergeEditorInputFactoryFunction;\n};\n\nexport type EditorInputFactoryObject = AtLeastOne<EditorInputFactories>;\n\nexport interface IEditorResolverService {\n\treadonly _serviceBrand: undefined;\n\t/**\n\t * Given a resource finds the editor associations that match it from the user's settings\n\t * @param resource The resource to match\n\t * @return The matching associations\n\t */\n\tgetAssociationsForResource(resource: URI): EditorAssociations;\n\n\t/**\n\t * Updates the user's association to include a specific editor ID as a default for the given glob pattern\n\t * @param globPattern The glob pattern (must be a string as settings don't support relative glob)\n\t * @param editorID The ID of the editor to make a user default\n\t */\n\tupdateUserAssociations(globPattern: string, editorID: string): void;\n\n\t/**\n\t * Emitted when an editor is registered or unregistered.\n\t */\n\treadonly onDidChangeEditorRegistrations: Event<void>;\n\n\t/**\n\t * Given a callback, run the callback pausing the registration emitter\n\t */\n\tbufferChangeEvents(callback: Function): void;\n\n\t/**\n\t * Registers a specific editor. Editors with the same glob pattern and ID will be grouped together by the resolver.\n\t * This allows for registration of the factories in different locations\n\t * @param globPattern The glob pattern for this registration\n\t * @param editorInfo Information about the registration\n\t * @param options Specific options which apply to this registration\n\t * @param editorFactoryObject The editor input factory functions\n\t */\n\tregisterEditor(\n\t\tglobPattern: string | glob.IRelativePattern,\n\t\teditorInfo: RegisteredEditorInfo,\n\t\toptions: RegisteredEditorOptions,\n\t\teditorFactoryObject: EditorInputFactoryObject,\n\t): IDisposable;\n\n\t/**\n\t * Given an editor resolves it to the suitable ResolvedEitor based on user extensions, settings, and built-in editors\n\t * @param editor The editor to resolve\n\t * @param preferredGroup The group you want to open the editor in\n\t * @returns An EditorInputWithOptionsAndGroup if there is an available editor or a status of how to proceed\n\t */\n\tresolveEditor(\n\t\teditor: IUntypedEditorInput,\n\t\tpreferredGroup: PreferredGroup | undefined,\n\t): Promise<ResolvedEditor>;\n\n\t/**\n\t * Given a resource returns all the editor ids that match that resource. If there is exclusive editor we return an empty array\n\t * @param resource The resource\n\t * @returns A list of editor ids\n\t */\n\tgetEditors(resource: URI): RegisteredEditorInfo[];\n\n\t/**\n\t * A set of all the editors that are registered to the editor resolver.\n\t */\n\tgetEditors(): RegisteredEditorInfo[];\n\n\t/**\n\t * Get a complete list of editor associations.\n\t */\n\tgetAllUserAssociations(): EditorAssociations;\n}\n\n//#endregion\n\n//#region Util functions\nexport function priorityToRank(priority: RegisteredEditorPriority): number {\n\tswitch (priority) {\n\t\tcase RegisteredEditorPriority.exclusive:\n\t\t\treturn 5;\n\t\tcase RegisteredEditorPriority.default:\n\t\t\treturn 4;\n\t\tcase RegisteredEditorPriority.builtin:\n\t\t\treturn 3;\n\t\t// Text editor is priority 2\n\t\tcase RegisteredEditorPriority.option:\n\t\tdefault:\n\t\t\treturn 1;\n\t}\n}\n\nexport function globMatchesResource(\n\tglobPattern: string | glob.IRelativePattern,\n\tresource: URI,\n): boolean {\n\tconst excludedSchemes = new Set([\n\t\tSchemas.extension,\n\t\tSchemas.webviewPanel,\n\t\tSchemas.vscodeWorkspaceTrust,\n\t\tSchemas.vscodeSettings,\n\t]);\n\t// We want to say that the above schemes match no glob patterns\n\tif (excludedSchemes.has(resource.scheme)) {\n\t\treturn false;\n\t}\n\tconst matchOnPath =\n\t\ttypeof globPattern === \"string\" && globPattern.indexOf(posix.sep) >= 0;\n\tconst target = matchOnPath\n\t\t? `${resource.scheme}:${resource.path}`\n\t\t: basename(resource);\n\treturn glob.match(\n\t\ttypeof globPattern === \"string\"\n\t\t\t? globPattern.toLowerCase()\n\t\t\t: globPattern,\n\t\ttarget.toLowerCase(),\n\t);\n}\n//#endregion\n"],
  "mappings": ";;AAMA,YAAY,UAAU;AAEtB,SAAS,eAAe;AACxB,SAAS,aAAa;AACtB,SAAS,gBAAgB;AAGzB,SAAS,gBAAgB;AACzB;AAAA,EACC,cAAc;AAAA,OAGR;AAKP,SAAS,uBAAuB;AAChC,SAAS,gBAAgB;AACzB,SAAS,sCAAsC;AAaxC,MAAM,yBAAyB;AAAA,EACrC;AACD;AAaO,MAAM,+BAA+B;AAE5C,MAAM,wBAAwB,SAAS;AAAA,EACtC,wBAAwB;AACzB;AAEA,MAAM,sCAA0D;AAAA,EAC/D,GAAG;AAAA,EACH,YAAY;AAAA,IACX,gCAAgC;AAAA,MAC/B,MAAM;AAAA,MACN,qBAAqB;AAAA,QACpB;AAAA,QACA;AAAA,MACD;AAAA,MACA,sBAAsB;AAAA,QACrB,MAAM;AAAA,MACP;AAAA,IACD;AAAA,EACD;AACD;AAQA,sBAAsB;AAAA,EACrB;AACD;AAIO,IAAK,2BAAL,kBAAKA,8BAAL;AACN,EAAAA,0BAAA,aAAU;AACV,EAAAA,0BAAA,YAAS;AACT,EAAAA,0BAAA,eAAY;AACZ,EAAAA,0BAAA,aAAU;AAJC,SAAAA;AAAA,GAAA;AAYL,IAAK,iBAAL,kBAAKC,oBAAL;AACN,EAAAA,gCAAA,WAAQ,KAAR;AACA,EAAAA,gCAAA,UAAO,KAAP;AAFW,SAAAA;AAAA,GAAA;AA2IL,SAAS,eAAe,UAA4C;AAC1E,UAAQ,UAAU;AAAA,IACjB,KAAK;AACJ,aAAO;AAAA,IACR,KAAK;AACJ,aAAO;AAAA,IACR,KAAK;AACJ,aAAO;AAAA;AAAA,IAER,KAAK;AAAA,IACL;AACC,aAAO;AAAA,EACT;AACD;AAbgB;AAeT,SAAS,oBACf,aACA,UACU;AACV,QAAM,kBAAkB,oBAAI,IAAI;AAAA,IAC/B,QAAQ;AAAA,IACR,QAAQ;AAAA,IACR,QAAQ;AAAA,IACR,QAAQ;AAAA,EACT,CAAC;AAED,MAAI,gBAAgB,IAAI,SAAS,MAAM,GAAG;AACzC,WAAO;AAAA,EACR;AACA,QAAM,cACL,OAAO,gBAAgB,YAAY,YAAY,QAAQ,MAAM,GAAG,KAAK;AACtE,QAAM,SAAS,cACZ,GAAG,SAAS,MAAM,IAAI,SAAS,IAAI,KACnC,SAAS,QAAQ;AACpB,SAAO,KAAK;AAAA,IACX,OAAO,gBAAgB,WACpB,YAAY,YAAY,IACxB;AAAA,IACH,OAAO,YAAY;AAAA,EACpB;AACD;AAzBgB;",
  "names": ["RegisteredEditorPriority", "ResolvedStatus"]
}
