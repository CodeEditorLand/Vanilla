{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/editor/common/editorGroupColumn.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport type { IConfigurationService } from \"../../../../platform/configuration/common/configuration.js\";\nimport type { GroupIdentifier } from \"../../../common/editor.js\";\nimport {\n\tGroupsOrder,\n\ttype IEditorGroup,\n\ttype IEditorGroupsService,\n\tpreferredSideBySideGroupDirection,\n} from \"./editorGroupsService.js\";\nimport {\n\tACTIVE_GROUP,\n\ttype ACTIVE_GROUP_TYPE,\n\tSIDE_GROUP,\n\ttype SIDE_GROUP_TYPE,\n} from \"./editorService.js\";\n\n/**\n * A way to address editor groups through a column based system\n * where `0` is the first column. Will fallback to `SIDE_GROUP`\n * in case the column is invalid.\n */\nexport type EditorGroupColumn = number;\n\nexport function columnToEditorGroup(\n\teditorGroupService: IEditorGroupsService,\n\tconfigurationService: IConfigurationService,\n\tcolumn = ACTIVE_GROUP,\n): GroupIdentifier | ACTIVE_GROUP_TYPE | SIDE_GROUP_TYPE {\n\tif (column === ACTIVE_GROUP || column === SIDE_GROUP) {\n\t\treturn column; // return early for when column is well known\n\t}\n\n\tlet groupInColumn = editorGroupService.getGroups(\n\t\tGroupsOrder.GRID_APPEARANCE,\n\t)[column];\n\n\t// If a column is asked for that does not exist, we create up to 9 columns in accordance\n\t// to what `ViewColumn` provides and otherwise fallback to `SIDE_GROUP`.\n\n\tif (!groupInColumn && column < 9) {\n\t\tfor (let i = 0; i <= column; i++) {\n\t\t\tconst editorGroups = editorGroupService.getGroups(\n\t\t\t\tGroupsOrder.GRID_APPEARANCE,\n\t\t\t);\n\t\t\tif (!editorGroups[i]) {\n\t\t\t\teditorGroupService.addGroup(\n\t\t\t\t\teditorGroups[i - 1],\n\t\t\t\t\tpreferredSideBySideGroupDirection(configurationService),\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\tgroupInColumn = editorGroupService.getGroups(\n\t\t\tGroupsOrder.GRID_APPEARANCE,\n\t\t)[column];\n\t}\n\n\treturn groupInColumn?.id ?? SIDE_GROUP; // finally open to the side when group not found\n}\n\nexport function editorGroupToColumn(\n\teditorGroupService: IEditorGroupsService,\n\teditorGroup: IEditorGroup | GroupIdentifier,\n): EditorGroupColumn {\n\tconst group =\n\t\ttypeof editorGroup === \"number\"\n\t\t\t? editorGroupService.getGroup(editorGroup)\n\t\t\t: editorGroup;\n\n\treturn editorGroupService\n\t\t.getGroups(GroupsOrder.GRID_APPEARANCE)\n\t\t.indexOf(group ?? editorGroupService.activeGroup);\n}\n"],
  "mappings": ";;AAOA;AAAA,EACC;AAAA,EAGA;AAAA,OACM;AACP;AAAA,EACC;AAAA,EAEA;AAAA,OAEM;AASA,SAAS,oBACf,oBACA,sBACA,SAAS,cAC+C;AACxD,MAAI,WAAW,gBAAgB,WAAW,YAAY;AACrD,WAAO;AAAA,EACR;AAEA,MAAI,gBAAgB,mBAAmB;AAAA,IACtC,YAAY;AAAA,EACb,EAAE,MAAM;AAKR,MAAI,CAAC,iBAAiB,SAAS,GAAG;AACjC,aAAS,IAAI,GAAG,KAAK,QAAQ,KAAK;AACjC,YAAM,eAAe,mBAAmB;AAAA,QACvC,YAAY;AAAA,MACb;AACA,UAAI,CAAC,aAAa,CAAC,GAAG;AACrB,2BAAmB;AAAA,UAClB,aAAa,IAAI,CAAC;AAAA,UAClB,kCAAkC,oBAAoB;AAAA,QACvD;AAAA,MACD;AAAA,IACD;AAEA,oBAAgB,mBAAmB;AAAA,MAClC,YAAY;AAAA,IACb,EAAE,MAAM;AAAA,EACT;AAEA,SAAO,eAAe,MAAM;AAC7B;AAnCgB;AAqCT,SAAS,oBACf,oBACA,aACoB;AACpB,QAAM,QACL,OAAO,gBAAgB,WACpB,mBAAmB,SAAS,WAAW,IACvC;AAEJ,SAAO,mBACL,UAAU,YAAY,eAAe,EACrC,QAAQ,SAAS,mBAAmB,WAAW;AAClD;AAZgB;",
  "names": []
}
