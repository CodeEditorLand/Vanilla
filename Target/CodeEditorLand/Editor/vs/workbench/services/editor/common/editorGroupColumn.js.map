{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/editor/common/editorGroupColumn.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IConfigurationService } from '../../../../platform/configuration/common/configuration.js';\nimport { GroupIdentifier } from '../../../common/editor.js';\nimport { IEditorGroupsService, GroupsOrder, IEditorGroup, preferredSideBySideGroupDirection } from './editorGroupsService.js';\nimport { ACTIVE_GROUP, ACTIVE_GROUP_TYPE, SIDE_GROUP, SIDE_GROUP_TYPE } from './editorService.js';\n\n/**\n * A way to address editor groups through a column based system\n * where `0` is the first column. Will fallback to `SIDE_GROUP`\n * in case the column is invalid.\n */\nexport type EditorGroupColumn = number;\n\nexport function columnToEditorGroup(editorGroupService: IEditorGroupsService, configurationService: IConfigurationService, column = ACTIVE_GROUP): GroupIdentifier | ACTIVE_GROUP_TYPE | SIDE_GROUP_TYPE {\n\tif (column === ACTIVE_GROUP || column === SIDE_GROUP) {\n\t\treturn column; // return early for when column is well known\n\t}\n\n\tlet groupInColumn = editorGroupService.getGroups(GroupsOrder.GRID_APPEARANCE)[column];\n\n\t// If a column is asked for that does not exist, we create up to 9 columns in accordance\n\t// to what `ViewColumn` provides and otherwise fallback to `SIDE_GROUP`.\n\n\tif (!groupInColumn && column < 9) {\n\t\tfor (let i = 0; i <= column; i++) {\n\t\t\tconst editorGroups = editorGroupService.getGroups(GroupsOrder.GRID_APPEARANCE);\n\t\t\tif (!editorGroups[i]) {\n\t\t\t\teditorGroupService.addGroup(editorGroups[i - 1], preferredSideBySideGroupDirection(configurationService));\n\t\t\t}\n\t\t}\n\n\t\tgroupInColumn = editorGroupService.getGroups(GroupsOrder.GRID_APPEARANCE)[column];\n\t}\n\n\treturn groupInColumn?.id ?? SIDE_GROUP; // finally open to the side when group not found\n}\n\nexport function editorGroupToColumn(editorGroupService: IEditorGroupsService, editorGroup: IEditorGroup | GroupIdentifier): EditorGroupColumn {\n\tconst group = (typeof editorGroup === 'number') ? editorGroupService.getGroup(editorGroup) : editorGroup;\n\n\treturn editorGroupService.getGroups(GroupsOrder.GRID_APPEARANCE).indexOf(group ?? editorGroupService.activeGroup);\n}\n"],
  "mappings": ";;AAKA,SAAS,6BAA6B;AACtC,SAAS,uBAAuB;AAChC,SAAS,sBAAsB,aAAa,cAAc,yCAAyC;AACnG,SAAS,cAAc,mBAAmB,YAAY,uBAAuB;AAStE,SAAS,oBAAoB,oBAA0C,sBAA6C,SAAS,cAAqE;AACxM,MAAI,WAAW,gBAAgB,WAAW,YAAY;AACrD,WAAO;AAAA,EACR;AAEA,MAAI,gBAAgB,mBAAmB,UAAU,YAAY,eAAe,EAAE,MAAM;AAKpF,MAAI,CAAC,iBAAiB,SAAS,GAAG;AACjC,aAAS,IAAI,GAAG,KAAK,QAAQ,KAAK;AACjC,YAAM,eAAe,mBAAmB,UAAU,YAAY,eAAe;AAC7E,UAAI,CAAC,aAAa,CAAC,GAAG;AACrB,2BAAmB,SAAS,aAAa,IAAI,CAAC,GAAG,kCAAkC,oBAAoB,CAAC;AAAA,MACzG;AAAA,IACD;AAEA,oBAAgB,mBAAmB,UAAU,YAAY,eAAe,EAAE,MAAM;AAAA,EACjF;AAEA,SAAO,eAAe,MAAM;AAC7B;AAtBgB;AAwBT,SAAS,oBAAoB,oBAA0C,aAAgE;AAC7I,QAAM,QAAS,OAAO,gBAAgB,WAAY,mBAAmB,SAAS,WAAW,IAAI;AAE7F,SAAO,mBAAmB,UAAU,YAAY,eAAe,EAAE,QAAQ,SAAS,mBAAmB,WAAW;AACjH;AAJgB;",
  "names": []
}
