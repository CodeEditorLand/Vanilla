{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/editor/common/customEditorLabelService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Emitter, type Event } from \"../../../../base/common/event.js\";\nimport {\n\ttype ParsedPattern,\n\tparse as parseGlob,\n} from \"../../../../base/common/glob.js\";\nimport { Disposable } from \"../../../../base/common/lifecycle.js\";\nimport { MRUCache } from \"../../../../base/common/map.js\";\nimport {\n\ttype ParsedPath,\n\tdirname,\n\tisAbsolute,\n\tparse as parsePath,\n} from \"../../../../base/common/path.js\";\nimport {\n\trelativePath as getRelativePath,\n\tdirname as resourceDirname,\n} from \"../../../../base/common/resources.js\";\nimport type { URI } from \"../../../../base/common/uri.js\";\nimport { IConfigurationService } from \"../../../../platform/configuration/common/configuration.js\";\nimport {\n\tInstantiationType,\n\tregisterSingleton,\n} from \"../../../../platform/instantiation/common/extensions.js\";\nimport { createDecorator } from \"../../../../platform/instantiation/common/instantiation.js\";\nimport { IWorkspaceContextService } from \"../../../../platform/workspace/common/workspace.js\";\n\ninterface ICustomEditorLabelObject {\n\treadonly [key: string]: string;\n}\n\ninterface ICustomEditorLabelPattern {\n\treadonly pattern: string;\n\treadonly template: string;\n\n\treadonly isAbsolutePath: boolean;\n\treadonly parsedPattern: ParsedPattern;\n}\n\nexport class CustomEditorLabelService\n\textends Disposable\n\timplements ICustomEditorLabelService\n{\n\treadonly _serviceBrand: undefined;\n\n\tstatic readonly SETTING_ID_PATTERNS =\n\t\t\"workbench.editor.customLabels.patterns\";\n\tstatic readonly SETTING_ID_ENABLED =\n\t\t\"workbench.editor.customLabels.enabled\";\n\n\tprivate readonly _onDidChange = this._register(new Emitter<void>());\n\treadonly onDidChange = this._onDidChange.event;\n\n\tprivate patterns: ICustomEditorLabelPattern[] = [];\n\tprivate enabled = true;\n\n\tprivate cache = new MRUCache<string, string | null>(1000);\n\n\tconstructor(\n\t\t@IConfigurationService private readonly configurationService: IConfigurationService,\n\t\t@IWorkspaceContextService private readonly workspaceContextService: IWorkspaceContextService,\n\t) {\n\t\tsuper();\n\n\t\tthis.storeEnablementState();\n\t\tthis.storeCustomPatterns();\n\n\t\tthis.registerListeners();\n\t}\n\n\tprivate registerListeners(): void {\n\t\tthis._register(\n\t\t\tthis.configurationService.onDidChangeConfiguration((e) => {\n\t\t\t\t// Cache the enabled state\n\t\t\t\tif (\n\t\t\t\t\te.affectsConfiguration(\n\t\t\t\t\t\tCustomEditorLabelService.SETTING_ID_ENABLED,\n\t\t\t\t\t)\n\t\t\t\t) {\n\t\t\t\t\tconst oldEnablement = this.enabled;\n\t\t\t\t\tthis.storeEnablementState();\n\t\t\t\t\tif (\n\t\t\t\t\t\toldEnablement !== this.enabled &&\n\t\t\t\t\t\tthis.patterns.length > 0\n\t\t\t\t\t) {\n\t\t\t\t\t\tthis._onDidChange.fire();\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Cache the patterns\n\t\t\t\telse if (\n\t\t\t\t\te.affectsConfiguration(\n\t\t\t\t\t\tCustomEditorLabelService.SETTING_ID_PATTERNS,\n\t\t\t\t\t)\n\t\t\t\t) {\n\t\t\t\t\tthis.cache.clear();\n\t\t\t\t\tthis.storeCustomPatterns();\n\t\t\t\t\tthis._onDidChange.fire();\n\t\t\t\t}\n\t\t\t}),\n\t\t);\n\t}\n\n\tprivate storeEnablementState(): void {\n\t\tthis.enabled = this.configurationService.getValue<boolean>(\n\t\t\tCustomEditorLabelService.SETTING_ID_ENABLED,\n\t\t);\n\t}\n\n\tprivate _templateRegexValidation: RegExp = /[a-zA-Z0-9]/;\n\tprivate storeCustomPatterns(): void {\n\t\tthis.patterns = [];\n\t\tconst customLabelPatterns =\n\t\t\tthis.configurationService.getValue<ICustomEditorLabelObject>(\n\t\t\t\tCustomEditorLabelService.SETTING_ID_PATTERNS,\n\t\t\t);\n\t\tfor (const pattern in customLabelPatterns) {\n\t\t\tconst template = customLabelPatterns[pattern];\n\n\t\t\tif (!this._templateRegexValidation.test(template)) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tconst isAbsolutePath = isAbsolute(pattern);\n\t\t\tconst parsedPattern = parseGlob(pattern);\n\n\t\t\tthis.patterns.push({\n\t\t\t\tpattern,\n\t\t\t\ttemplate,\n\t\t\t\tisAbsolutePath,\n\t\t\t\tparsedPattern,\n\t\t\t});\n\t\t}\n\n\t\tthis.patterns.sort(\n\t\t\t(a, b) =>\n\t\t\t\tthis.patternWeight(b.pattern) - this.patternWeight(a.pattern),\n\t\t);\n\t}\n\n\tprivate patternWeight(pattern: string): number {\n\t\tlet weight = 0;\n\t\tfor (const fragment of pattern.split(\"/\")) {\n\t\t\tif (fragment === \"**\") {\n\t\t\t\tweight += 1;\n\t\t\t} else if (fragment === \"*\") {\n\t\t\t\tweight += 10;\n\t\t\t} else if (fragment.includes(\"*\") || fragment.includes(\"?\")) {\n\t\t\t\tweight += 50;\n\t\t\t} else if (fragment !== \"\") {\n\t\t\t\tweight += 100;\n\t\t\t}\n\t\t}\n\n\t\treturn weight;\n\t}\n\n\tgetName(resource: URI): string | undefined {\n\t\tif (!this.enabled || this.patterns.length === 0) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\tconst key = resource.toString();\n\t\tconst cached = this.cache.get(key);\n\t\tif (cached !== undefined) {\n\t\t\treturn cached ?? undefined;\n\t\t}\n\n\t\tconst result = this.applyPatterns(resource);\n\t\tthis.cache.set(key, result ?? null);\n\n\t\treturn result;\n\t}\n\n\tprivate applyPatterns(resource: URI): string | undefined {\n\t\tconst root = this.workspaceContextService.getWorkspaceFolder(resource);\n\t\tlet relativePath: string | undefined;\n\n\t\tfor (const pattern of this.patterns) {\n\t\t\tlet relevantPath: string;\n\t\t\tif (root && !pattern.isAbsolutePath) {\n\t\t\t\tif (!relativePath) {\n\t\t\t\t\trelativePath =\n\t\t\t\t\t\tgetRelativePath(resourceDirname(root.uri), resource) ??\n\t\t\t\t\t\tresource.path;\n\t\t\t\t}\n\t\t\t\trelevantPath = relativePath;\n\t\t\t} else {\n\t\t\t\trelevantPath = resource.path;\n\t\t\t}\n\n\t\t\tif (pattern.parsedPattern(relevantPath)) {\n\t\t\t\treturn this.applyTemplate(\n\t\t\t\t\tpattern.template,\n\t\t\t\t\tresource,\n\t\t\t\t\trelevantPath,\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\treturn undefined;\n\t}\n\n\tprivate readonly _parsedTemplateExpression =\n\t\t/\\$\\{(dirname|filename|extname|extname\\((?<extnameN>[-+]?\\d+)\\)|dirname\\((?<dirnameN>[-+]?\\d+)\\))\\}/g;\n\tprivate readonly _filenameCaptureExpression = /(?<filename>^\\.*[^.]*)/;\n\tprivate applyTemplate(\n\t\ttemplate: string,\n\t\tresource: URI,\n\t\trelevantPath: string,\n\t): string {\n\t\tlet parsedPath: undefined | ParsedPath;\n\t\treturn template.replace(\n\t\t\tthis._parsedTemplateExpression,\n\t\t\t(match: string, variable: string, ...args: any[]) => {\n\t\t\t\tparsedPath = parsedPath ?? parsePath(resource.path);\n\t\t\t\t// named group matches\n\t\t\t\tconst {\n\t\t\t\t\tdirnameN = \"0\",\n\t\t\t\t\textnameN = \"0\",\n\t\t\t\t}: { dirnameN?: string; extnameN?: string } = args.pop();\n\n\t\t\t\tif (variable === \"filename\") {\n\t\t\t\t\tconst { filename } =\n\t\t\t\t\t\tthis._filenameCaptureExpression.exec(parsedPath.base)\n\t\t\t\t\t\t\t?.groups ?? {};\n\t\t\t\t\tif (filename) {\n\t\t\t\t\t\treturn filename;\n\t\t\t\t\t}\n\t\t\t\t} else if (variable === \"extname\") {\n\t\t\t\t\tconst extension = this.getExtnames(parsedPath.base);\n\t\t\t\t\tif (extension) {\n\t\t\t\t\t\treturn extension;\n\t\t\t\t\t}\n\t\t\t\t} else if (variable.startsWith(\"extname\")) {\n\t\t\t\t\tconst n = Number.parseInt(extnameN);\n\t\t\t\t\tconst nthExtname = this.getNthExtname(parsedPath.base, n);\n\t\t\t\t\tif (nthExtname) {\n\t\t\t\t\t\treturn nthExtname;\n\t\t\t\t\t}\n\t\t\t\t} else if (variable.startsWith(\"dirname\")) {\n\t\t\t\t\tconst n = Number.parseInt(dirnameN);\n\t\t\t\t\tconst nthDir = this.getNthDirname(dirname(relevantPath), n);\n\t\t\t\t\tif (nthDir) {\n\t\t\t\t\t\treturn nthDir;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn match;\n\t\t\t},\n\t\t);\n\t}\n\n\tprivate removeLeadingDot(path: string): string {\n\t\tlet withoutLeadingDot = path;\n\t\twhile (withoutLeadingDot.startsWith(\".\")) {\n\t\t\twithoutLeadingDot = withoutLeadingDot.slice(1);\n\t\t}\n\t\treturn withoutLeadingDot;\n\t}\n\n\tprivate getNthDirname(path: string, n: number): string | undefined {\n\t\t// grand-parent/parent/filename.ext1.ext2 -> [grand-parent, parent]\n\t\tpath = path.startsWith(\"/\") ? path.slice(1) : path;\n\t\tconst pathFragments = path.split(\"/\");\n\n\t\treturn this.getNthFragment(pathFragments, n);\n\t}\n\n\tprivate getExtnames(fullFileName: string): string {\n\t\treturn this.removeLeadingDot(fullFileName)\n\t\t\t.split(\".\")\n\t\t\t.slice(1)\n\t\t\t.join(\".\");\n\t}\n\n\tprivate getNthExtname(fullFileName: string, n: number): string | undefined {\n\t\t// file.ext1.ext2.ext3 -> [file, ext1, ext2, ext3]\n\t\tconst extensionNameFragments =\n\t\t\tthis.removeLeadingDot(fullFileName).split(\".\");\n\t\textensionNameFragments.shift(); // remove the first element which is the file name\n\n\t\treturn this.getNthFragment(extensionNameFragments, n);\n\t}\n\n\tprivate getNthFragment(fragments: string[], n: number): string | undefined {\n\t\tconst length = fragments.length;\n\n\t\tlet nth;\n\t\tif (n < 0) {\n\t\t\tnth = Math.abs(n) - 1;\n\t\t} else {\n\t\t\tnth = length - n - 1;\n\t\t}\n\n\t\tconst nthFragment = fragments[nth];\n\t\tif (nthFragment === undefined || nthFragment === \"\") {\n\t\t\treturn undefined;\n\t\t}\n\t\treturn nthFragment;\n\t}\n}\n\nexport const ICustomEditorLabelService =\n\tcreateDecorator<ICustomEditorLabelService>(\"ICustomEditorLabelService\");\n\nexport interface ICustomEditorLabelService {\n\treadonly _serviceBrand: undefined;\n\treadonly onDidChange: Event<void>;\n\tgetName(resource: URI): string | undefined;\n}\n\nregisterSingleton(\n\tICustomEditorLabelService,\n\tCustomEditorLabelService,\n\tInstantiationType.Delayed,\n);\n"],
  "mappings": "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",
  "names": []
}
