{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/editor/test/browser/customEditorLabelService.test.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport assert from 'assert';\nimport { DisposableStore } from '../../../../../base/common/lifecycle.js';\nimport { URI } from '../../../../../base/common/uri.js';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from '../../../../../base/test/common/utils.js';\nimport { ConfigurationTarget, IConfigurationService } from '../../../../../platform/configuration/common/configuration.js';\nimport { TestConfigurationService } from '../../../../../platform/configuration/test/common/testConfigurationService.js';\nimport { CustomEditorLabelService } from '../../common/customEditorLabelService.js';\nimport { ITestInstantiationService, TestServiceAccessor, workbenchInstantiationService } from '../../../../test/browser/workbenchTestServices.js';\n\nsuite('Custom Editor Label Service', () => {\n\n\tconst disposables = new DisposableStore();\n\n\tsetup(() => { });\n\n\tteardown(async () => {\n\t\tdisposables.clear();\n\t});\n\n\tensureNoDisposablesAreLeakedInTestSuite();\n\n\tasync function createCustomLabelService(instantiationService: ITestInstantiationService = workbenchInstantiationService(undefined, disposables)): Promise<[CustomEditorLabelService, TestConfigurationService, TestServiceAccessor]> {\n\t\tconst configService = new TestConfigurationService();\n\t\tawait configService.setUserConfiguration(CustomEditorLabelService.SETTING_ID_ENABLED, true);\n\t\tinstantiationService.stub(IConfigurationService, configService);\n\n\t\tconst customLabelService = disposables.add(instantiationService.createInstance(CustomEditorLabelService));\n\t\treturn [customLabelService, configService, instantiationService.createInstance(TestServiceAccessor)];\n\t}\n\n\tasync function updatePattern(configService: TestConfigurationService, value: any): Promise<void> {\n\t\tawait configService.setUserConfiguration(CustomEditorLabelService.SETTING_ID_PATTERNS, value);\n\t\tconfigService.onDidChangeConfigurationEmitter.fire({\n\t\t\taffectsConfiguration: (key: string) => key === CustomEditorLabelService.SETTING_ID_PATTERNS,\n\t\t\tsource: ConfigurationTarget.USER,\n\t\t\taffectedKeys: new Set(CustomEditorLabelService.SETTING_ID_PATTERNS),\n\t\t\tchange: {\n\t\t\t\tkeys: [],\n\t\t\t\toverrides: []\n\t\t\t}\n\t\t});\n\t}\n\n\ttest('Custom Labels: filename.extname', async () => {\n\t\tconst [customLabelService, configService] = await createCustomLabelService();\n\n\t\tawait updatePattern(configService, {\n\t\t\t'**': '${filename}.${extname}'\n\t\t});\n\n\t\tconst filenames = [\n\t\t\t'file.txt',\n\t\t\t'file.txt1.tx2',\n\t\t\t'.file.txt',\n\t\t];\n\n\t\tfor (const filename of filenames) {\n\t\t\tconst label = customLabelService.getName(URI.file(filename));\n\t\t\tassert.strictEqual(label, filename);\n\t\t}\n\n\t\tlet label = customLabelService.getName(URI.file('file'));\n\t\tassert.strictEqual(label, 'file.${extname}');\n\n\t\tlabel = customLabelService.getName(URI.file('.file'));\n\t\tassert.strictEqual(label, '.file.${extname}');\n\t});\n\n\ttest('Custom Labels: filename', async () => {\n\t\tconst [customLabelService, configService] = await createCustomLabelService();\n\n\t\tawait updatePattern(configService, {\n\t\t\t'**': '${filename}',\n\t\t});\n\n\t\tassert.strictEqual(customLabelService.getName(URI.file('file')), 'file');\n\t\tassert.strictEqual(customLabelService.getName(URI.file('file.txt')), 'file');\n\t\tassert.strictEqual(customLabelService.getName(URI.file('file.txt1.txt2')), 'file');\n\t\tassert.strictEqual(customLabelService.getName(URI.file('folder/file.txt1.txt2')), 'file');\n\n\t\tassert.strictEqual(customLabelService.getName(URI.file('.file')), '.file');\n\t\tassert.strictEqual(customLabelService.getName(URI.file('.file.txt')), '.file');\n\t\tassert.strictEqual(customLabelService.getName(URI.file('.file.txt1.txt2')), '.file');\n\t\tassert.strictEqual(customLabelService.getName(URI.file('folder/.file.txt1.txt2')), '.file');\n\t});\n\n\ttest('Custom Labels: extname(N)', async () => {\n\t\tconst [customLabelService, configService] = await createCustomLabelService();\n\n\t\tawait updatePattern(configService, {\n\t\t\t'**/ext/**': '${extname}',\n\t\t\t'**/ext0/**': '${extname(0)}',\n\t\t\t'**/ext1/**': '${extname(1)}',\n\t\t\t'**/ext2/**': '${extname(2)}',\n\t\t\t'**/extMinus1/**': '${extname(-1)}',\n\t\t\t'**/extMinus2/**': '${extname(-2)}',\n\t\t});\n\n\t\tinterface IExt {\n\t\t\textname?: string;\n\t\t\text0?: string;\n\t\t\text1?: string;\n\t\t\text2?: string;\n\t\t\textMinus1?: string;\n\t\t\textMinus2?: string;\n\t\t}\n\n\t\tfunction assertExtname(filename: string, ext: IExt): void {\n\t\t\tassert.strictEqual(customLabelService.getName(URI.file(`test/ext/${filename}`)), ext.extname ?? '${extname}', filename);\n\t\t\tassert.strictEqual(customLabelService.getName(URI.file(`test/ext0/${filename}`)), ext.ext0 ?? '${extname(0)}', filename);\n\t\t\tassert.strictEqual(customLabelService.getName(URI.file(`test/ext1/${filename}`)), ext.ext1 ?? '${extname(1)}', filename);\n\t\t\tassert.strictEqual(customLabelService.getName(URI.file(`test/ext2/${filename}`)), ext.ext2 ?? '${extname(2)}', filename);\n\t\t\tassert.strictEqual(customLabelService.getName(URI.file(`test/extMinus1/${filename}`)), ext.extMinus1 ?? '${extname(-1)}', filename);\n\t\t\tassert.strictEqual(customLabelService.getName(URI.file(`test/extMinus2/${filename}`)), ext.extMinus2 ?? '${extname(-2)}', filename);\n\t\t}\n\n\t\tassertExtname('file.txt', {\n\t\t\textname: 'txt',\n\t\t\text0: 'txt',\n\t\t\textMinus1: 'txt',\n\t\t});\n\n\t\tassertExtname('file.txt1.txt2', {\n\t\t\textname: 'txt1.txt2',\n\t\t\text0: 'txt2',\n\t\t\text1: 'txt1',\n\t\t\textMinus1: 'txt1',\n\t\t\textMinus2: 'txt2',\n\t\t});\n\n\t\tassertExtname('.file.txt1.txt2', {\n\t\t\textname: 'txt1.txt2',\n\t\t\text0: 'txt2',\n\t\t\text1: 'txt1',\n\t\t\textMinus1: 'txt1',\n\t\t\textMinus2: 'txt2',\n\t\t});\n\n\t\tassertExtname('.file.txt1.txt2.txt3.txt4', {\n\t\t\textname: 'txt1.txt2.txt3.txt4',\n\t\t\text0: 'txt4',\n\t\t\text1: 'txt3',\n\t\t\text2: 'txt2',\n\t\t\textMinus1: 'txt1',\n\t\t\textMinus2: 'txt2',\n\t\t});\n\n\t\tassertExtname('file', {});\n\t\tassertExtname('.file', {});\n\t});\n\n\ttest('Custom Labels: dirname(N)', async () => {\n\t\tconst [customLabelService, configService] = await createCustomLabelService();\n\n\t\tawait updatePattern(configService, {\n\t\t\t'**': '${dirname},${dirname(0)},${dirname(1)},${dirname(2)},${dirname(-1)},${dirname(-2)}',\n\t\t});\n\n\t\tinterface IDir {\n\t\t\tdirname?: string;\n\t\t\tdir0?: string;\n\t\t\tdir1?: string;\n\t\t\tdir2?: string;\n\t\t\tdirMinus1?: string;\n\t\t\tdirMinus2?: string;\n\t\t}\n\n\t\tfunction assertDirname(path: string, dir: IDir): void {\n\t\t\tassert.strictEqual(customLabelService.getName(URI.file(path))?.split(',')[0], dir.dirname ?? '${dirname}', path);\n\t\t\tassert.strictEqual(customLabelService.getName(URI.file(path))?.split(',')[1], dir.dir0 ?? '${dirname(0)}', path);\n\t\t\tassert.strictEqual(customLabelService.getName(URI.file(path))?.split(',')[2], dir.dir1 ?? '${dirname(1)}', path);\n\t\t\tassert.strictEqual(customLabelService.getName(URI.file(path))?.split(',')[3], dir.dir2 ?? '${dirname(2)}', path);\n\t\t\tassert.strictEqual(customLabelService.getName(URI.file(path))?.split(',')[4], dir.dirMinus1 ?? '${dirname(-1)}', path);\n\t\t\tassert.strictEqual(customLabelService.getName(URI.file(path))?.split(',')[5], dir.dirMinus2 ?? '${dirname(-2)}', path);\n\t\t}\n\n\t\tassertDirname('folder/file.txt', {\n\t\t\tdirname: 'folder',\n\t\t\tdir0: 'folder',\n\t\t\tdirMinus1: 'folder',\n\t\t});\n\n\t\tassertDirname('root/folder/file.txt', {\n\t\t\tdirname: 'folder',\n\t\t\tdir0: 'folder',\n\t\t\tdir1: 'root',\n\t\t\tdirMinus1: 'root',\n\t\t\tdirMinus2: 'folder',\n\t\t});\n\n\t\tassertDirname('root/.folder/file.txt', {\n\t\t\tdirname: '.folder',\n\t\t\tdir0: '.folder',\n\t\t\tdir1: 'root',\n\t\t\tdirMinus1: 'root',\n\t\t\tdirMinus2: '.folder',\n\t\t});\n\n\t\tassertDirname('root/parent/folder/file.txt', {\n\t\t\tdirname: 'folder',\n\t\t\tdir0: 'folder',\n\t\t\tdir1: 'parent',\n\t\t\tdir2: 'root',\n\t\t\tdirMinus1: 'root',\n\t\t\tdirMinus2: 'parent',\n\t\t});\n\n\t\tassertDirname('file.txt', {});\n\t});\n\n\ttest('Custom Labels: no pattern match', async () => {\n\t\tconst [customLabelService, configService] = await createCustomLabelService();\n\n\t\tawait updatePattern(configService, {\n\t\t\t'**/folder/**': 'folder',\n\t\t\t'file': 'file',\n\t\t});\n\n\t\tassert.strictEqual(customLabelService.getName(URI.file('file')), undefined);\n\t\tassert.strictEqual(customLabelService.getName(URI.file('file.txt')), undefined);\n\t\tassert.strictEqual(customLabelService.getName(URI.file('file.txt1.txt2')), undefined);\n\t\tassert.strictEqual(customLabelService.getName(URI.file('folder1/file.txt1.txt2')), undefined);\n\n\t\tassert.strictEqual(customLabelService.getName(URI.file('.file')), undefined);\n\t\tassert.strictEqual(customLabelService.getName(URI.file('.file.txt')), undefined);\n\t\tassert.strictEqual(customLabelService.getName(URI.file('.file.txt1.txt2')), undefined);\n\t\tassert.strictEqual(customLabelService.getName(URI.file('folder1/file.txt1.txt2')), undefined);\n\t});\n});\n"],
  "mappings": "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",
  "names": ["label"]
}
