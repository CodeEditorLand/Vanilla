{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/secrets/electron-sandbox/secretStorageService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { createSingleCallFunction } from \"../../../../base/common/functional.js\";\nimport { isLinux } from \"../../../../base/common/platform.js\";\nimport Severity from \"../../../../base/common/severity.js\";\nimport { localize } from \"../../../../nls.js\";\nimport { IDialogService } from \"../../../../platform/dialogs/common/dialogs.js\";\nimport {\n\tIEncryptionService,\n\tKnownStorageProvider,\n\tPasswordStoreCLIOption,\n\tisGnome,\n\tisKwallet,\n} from \"../../../../platform/encryption/common/encryptionService.js\";\nimport { INativeEnvironmentService } from \"../../../../platform/environment/common/environment.js\";\nimport {\n\tInstantiationType,\n\tregisterSingleton,\n} from \"../../../../platform/instantiation/common/extensions.js\";\nimport { ILogService } from \"../../../../platform/log/common/log.js\";\nimport {\n\tINotificationService,\n\ttype IPromptChoice,\n} from \"../../../../platform/notification/common/notification.js\";\nimport { IOpenerService } from \"../../../../platform/opener/common/opener.js\";\nimport {\n\tBaseSecretStorageService,\n\tISecretStorageService,\n} from \"../../../../platform/secrets/common/secrets.js\";\nimport { IStorageService } from \"../../../../platform/storage/common/storage.js\";\nimport { IJSONEditingService } from \"../../configuration/common/jsonEditing.js\";\n\nexport class NativeSecretStorageService extends BaseSecretStorageService {\n\tconstructor(\n\t\t@INotificationService private readonly _notificationService: INotificationService,\n\t\t@IDialogService private readonly _dialogService: IDialogService,\n\t\t@IOpenerService private readonly _openerService: IOpenerService,\n\t\t@IJSONEditingService private readonly _jsonEditingService: IJSONEditingService,\n\t\t@INativeEnvironmentService private readonly _environmentService: INativeEnvironmentService,\n\t\t@IStorageService storageService: IStorageService,\n\t\t@IEncryptionService encryptionService: IEncryptionService,\n\t\t@ILogService logService: ILogService\n\t) {\n\t\tsuper(\n\t\t\t!!_environmentService.useInMemorySecretStorage,\n\t\t\tstorageService,\n\t\t\tencryptionService,\n\t\t\tlogService\n\t\t);\n\t}\n\n\toverride set(key: string, value: string): Promise<void> {\n\t\tthis._sequencer.queue(key, async () => {\n\t\t\tawait this.resolvedStorageService;\n\n\t\t\tif (\n\t\t\t\tthis.type !== \"persisted\" &&\n\t\t\t\t!this._environmentService.useInMemorySecretStorage\n\t\t\t) {\n\t\t\t\tthis._logService.trace(\n\t\t\t\t\t\"[NativeSecretStorageService] Notifying user that secrets are not being stored on disk.\",\n\t\t\t\t);\n\t\t\t\tawait this.notifyOfNoEncryptionOnce();\n\t\t\t}\n\t\t});\n\n\t\treturn super.set(key, value);\n\t}\n\n\tprivate notifyOfNoEncryptionOnce = createSingleCallFunction(() =>\n\t\tthis.notifyOfNoEncryption(),\n\t);\n\tprivate async notifyOfNoEncryption(): Promise<void> {\n\t\tconst buttons: IPromptChoice[] = [];\n\t\tconst troubleshootingButton: IPromptChoice = {\n\t\t\tlabel: localize(\n\t\t\t\t\"troubleshootingButton\",\n\t\t\t\t\"Open troubleshooting guide\",\n\t\t\t),\n\t\t\trun: () =>\n\t\t\t\tthis._openerService.open(\n\t\t\t\t\t\"https://go.microsoft.com/fwlink/?linkid=2239490\",\n\t\t\t\t),\n\t\t\t// doesn't close dialogs\n\t\t\tkeepOpen: true,\n\t\t};\n\t\tbuttons.push(troubleshootingButton);\n\n\t\tlet errorMessage = localize(\n\t\t\t\"encryptionNotAvailableJustTroubleshootingGuide\",\n\t\t\t\"An OS keyring couldn't be identified for storing the encryption related data in your current desktop environment.\",\n\t\t);\n\n\t\tif (!isLinux) {\n\t\t\tthis._notificationService.prompt(\n\t\t\t\tSeverity.Error,\n\t\t\t\terrorMessage,\n\t\t\t\tbuttons,\n\t\t\t);\n\t\t\treturn;\n\t\t}\n\n\t\tconst provider = await this._encryptionService.getKeyStorageProvider();\n\t\tif (provider === KnownStorageProvider.basicText) {\n\t\t\tconst detail = localize(\n\t\t\t\t\"usePlainTextExtraSentence\",\n\t\t\t\t\"Open the troubleshooting guide to address this or you can use weaker encryption that doesn't use the OS keyring.\",\n\t\t\t);\n\t\t\tconst usePlainTextButton: IPromptChoice = {\n\t\t\t\tlabel: localize(\"usePlainText\", \"Use weaker encryption\"),\n\t\t\t\trun: async () => {\n\t\t\t\t\tawait this._encryptionService.setUsePlainTextEncryption();\n\t\t\t\t\tawait this._jsonEditingService.write(\n\t\t\t\t\t\tthis._environmentService.argvResource,\n\t\t\t\t\t\t[\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tpath: [\"password-store\"],\n\t\t\t\t\t\t\t\tvalue: PasswordStoreCLIOption.basic,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t],\n\t\t\t\t\t\ttrue,\n\t\t\t\t\t);\n\t\t\t\t\tthis.reinitialize();\n\t\t\t\t},\n\t\t\t};\n\t\t\tbuttons.unshift(usePlainTextButton);\n\n\t\t\tawait this._dialogService.prompt({\n\t\t\t\ttype: \"error\",\n\t\t\t\tbuttons,\n\t\t\t\tmessage: errorMessage,\n\t\t\t\tdetail,\n\t\t\t});\n\t\t\treturn;\n\t\t}\n\n\t\tif (isGnome(provider)) {\n\t\t\terrorMessage = localize(\n\t\t\t\t\"isGnome\",\n\t\t\t\t\"You're running in a GNOME environment but the OS keyring is not available for encryption. Ensure you have gnome-keyring or another libsecret compatible implementation installed and running.\",\n\t\t\t);\n\t\t} else if (isKwallet(provider)) {\n\t\t\terrorMessage = localize(\n\t\t\t\t\"isKwallet\",\n\t\t\t\t\"You're running in a KDE environment but the OS keyring is not available for encryption. Ensure you have kwallet running.\",\n\t\t\t);\n\t\t}\n\n\t\tthis._notificationService.prompt(Severity.Error, errorMessage, buttons);\n\t}\n}\n\nregisterSingleton(\n\tISecretStorageService,\n\tNativeSecretStorageService,\n\tInstantiationType.Delayed,\n);\n"],
  "mappings": "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",
  "names": []
}
