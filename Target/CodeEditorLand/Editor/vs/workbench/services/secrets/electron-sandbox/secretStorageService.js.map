{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/secrets/electron-sandbox/secretStorageService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { createSingleCallFunction } from '../../../../base/common/functional.js';\nimport { isLinux } from '../../../../base/common/platform.js';\nimport Severity from '../../../../base/common/severity.js';\nimport { localize } from '../../../../nls.js';\nimport { IDialogService } from '../../../../platform/dialogs/common/dialogs.js';\nimport { IEncryptionService, KnownStorageProvider, PasswordStoreCLIOption, isGnome, isKwallet } from '../../../../platform/encryption/common/encryptionService.js';\nimport { INativeEnvironmentService } from '../../../../platform/environment/common/environment.js';\nimport { InstantiationType, registerSingleton } from '../../../../platform/instantiation/common/extensions.js';\nimport { ILogService } from '../../../../platform/log/common/log.js';\nimport { INotificationService, IPromptChoice } from '../../../../platform/notification/common/notification.js';\nimport { IOpenerService } from '../../../../platform/opener/common/opener.js';\nimport { BaseSecretStorageService, ISecretStorageService } from '../../../../platform/secrets/common/secrets.js';\nimport { IStorageService } from '../../../../platform/storage/common/storage.js';\nimport { IJSONEditingService } from '../../configuration/common/jsonEditing.js';\n\nexport class NativeSecretStorageService extends BaseSecretStorageService {\n\n\tconstructor(\n\t\t@INotificationService private readonly _notificationService: INotificationService,\n\t\t@IDialogService private readonly _dialogService: IDialogService,\n\t\t@IOpenerService private readonly _openerService: IOpenerService,\n\t\t@IJSONEditingService private readonly _jsonEditingService: IJSONEditingService,\n\t\t@INativeEnvironmentService private readonly _environmentService: INativeEnvironmentService,\n\t\t@IStorageService storageService: IStorageService,\n\t\t@IEncryptionService encryptionService: IEncryptionService,\n\t\t@ILogService logService: ILogService\n\t) {\n\t\tsuper(\n\t\t\t!!_environmentService.useInMemorySecretStorage,\n\t\t\tstorageService,\n\t\t\tencryptionService,\n\t\t\tlogService\n\t\t);\n\t}\n\n\toverride set(key: string, value: string): Promise<void> {\n\t\tthis._sequencer.queue(key, async () => {\n\t\t\tawait this.resolvedStorageService;\n\n\t\t\tif (this.type !== 'persisted' && !this._environmentService.useInMemorySecretStorage) {\n\t\t\t\tthis._logService.trace('[NativeSecretStorageService] Notifying user that secrets are not being stored on disk.');\n\t\t\t\tawait this.notifyOfNoEncryptionOnce();\n\t\t\t}\n\n\t\t});\n\n\t\treturn super.set(key, value);\n\t}\n\n\tprivate notifyOfNoEncryptionOnce = createSingleCallFunction(() => this.notifyOfNoEncryption());\n\tprivate async notifyOfNoEncryption(): Promise<void> {\n\t\tconst buttons: IPromptChoice[] = [];\n\t\tconst troubleshootingButton: IPromptChoice = {\n\t\t\tlabel: localize('troubleshootingButton', \"Open troubleshooting guide\"),\n\t\t\trun: () => this._openerService.open('https://go.microsoft.com/fwlink/?linkid=2239490'),\n\t\t\t// doesn't close dialogs\n\t\t\tkeepOpen: true\n\t\t};\n\t\tbuttons.push(troubleshootingButton);\n\n\t\tlet errorMessage = localize('encryptionNotAvailableJustTroubleshootingGuide', \"An OS keyring couldn't be identified for storing the encryption related data in your current desktop environment.\");\n\n\t\tif (!isLinux) {\n\t\t\tthis._notificationService.prompt(Severity.Error, errorMessage, buttons);\n\t\t\treturn;\n\t\t}\n\n\t\tconst provider = await this._encryptionService.getKeyStorageProvider();\n\t\tif (provider === KnownStorageProvider.basicText) {\n\t\t\tconst detail = localize('usePlainTextExtraSentence', \"Open the troubleshooting guide to address this or you can use weaker encryption that doesn't use the OS keyring.\");\n\t\t\tconst usePlainTextButton: IPromptChoice = {\n\t\t\t\tlabel: localize('usePlainText', \"Use weaker encryption\"),\n\t\t\t\trun: async () => {\n\t\t\t\t\tawait this._encryptionService.setUsePlainTextEncryption();\n\t\t\t\t\tawait this._jsonEditingService.write(this._environmentService.argvResource, [{ path: ['password-store'], value: PasswordStoreCLIOption.basic }], true);\n\t\t\t\t\tthis.reinitialize();\n\t\t\t\t}\n\t\t\t};\n\t\t\tbuttons.unshift(usePlainTextButton);\n\n\t\t\tawait this._dialogService.prompt({\n\t\t\t\ttype: 'error',\n\t\t\t\tbuttons,\n\t\t\t\tmessage: errorMessage,\n\t\t\t\tdetail\n\t\t\t});\n\t\t\treturn;\n\t\t}\n\n\t\tif (isGnome(provider)) {\n\t\t\terrorMessage = localize('isGnome', \"You're running in a GNOME environment but the OS keyring is not available for encryption. Ensure you have gnome-keyring or another libsecret compatible implementation installed and running.\");\n\t\t} else if (isKwallet(provider)) {\n\t\t\terrorMessage = localize('isKwallet', \"You're running in a KDE environment but the OS keyring is not available for encryption. Ensure you have kwallet running.\");\n\t\t}\n\n\t\tthis._notificationService.prompt(Severity.Error, errorMessage, buttons);\n\t}\n}\n\nregisterSingleton(ISecretStorageService, NativeSecretStorageService, InstantiationType.Delayed);\n"],
  "mappings": ";;;;;;;;;;;;AAKA,SAAS,gCAAgC;AACzC,SAAS,eAAe;AACxB,OAAO,cAAc;AACrB,SAAS,gBAAgB;AACzB,SAAS,sBAAsB;AAC/B,SAAS,oBAAoB,sBAAsB,wBAAwB,SAAS,iBAAiB;AACrG,SAAS,iCAAiC;AAC1C,SAAS,mBAAmB,yBAAyB;AACrD,SAAS,mBAAmB;AAC5B,SAAS,sBAAsB,qBAAqB;AACpD,SAAS,sBAAsB;AAC/B,SAAS,0BAA0B,6BAA6B;AAChE,SAAS,uBAAuB;AAChC,SAAS,2BAA2B;AAE7B,IAAM,6BAAN,cAAyC,yBAAyB;AAAA,EAExE,YACwC,sBACN,gBACA,gBACK,qBACM,qBAC3B,gBACG,mBACP,YACZ;AACD;AAAA,MACC,CAAC,CAAC,oBAAoB;AAAA,MACtB;AAAA,MACA;AAAA,MACA;AAAA,IACD;AAduC;AACN;AACA;AACK;AACM;AAAA,EAW7C;AAAA,EAtCD,OAoByE;AAAA;AAAA;AAAA,EAoB/D,IAAI,KAAa,OAA8B;AACvD,SAAK,WAAW,MAAM,KAAK,YAAY;AACtC,YAAM,KAAK;AAEX,UAAI,KAAK,SAAS,eAAe,CAAC,KAAK,oBAAoB,0BAA0B;AACpF,aAAK,YAAY,MAAM,wFAAwF;AAC/G,cAAM,KAAK,yBAAyB;AAAA,MACrC;AAAA,IAED,CAAC;AAED,WAAO,MAAM,IAAI,KAAK,KAAK;AAAA,EAC5B;AAAA,EAEQ,2BAA2B,yBAAyB,MAAM,KAAK,qBAAqB,CAAC;AAAA,EAC7F,MAAc,uBAAsC;AACnD,UAAM,UAA2B,CAAC;AAClC,UAAM,wBAAuC;AAAA,MAC5C,OAAO,SAAS,yBAAyB,4BAA4B;AAAA,MACrE,KAAK,6BAAM,KAAK,eAAe,KAAK,iDAAiD,GAAhF;AAAA;AAAA,MAEL,UAAU;AAAA,IACX;AACA,YAAQ,KAAK,qBAAqB;AAElC,QAAI,eAAe,SAAS,kDAAkD,mHAAmH;AAEjM,QAAI,CAAC,SAAS;AACb,WAAK,qBAAqB,OAAO,SAAS,OAAO,cAAc,OAAO;AACtE;AAAA,IACD;AAEA,UAAM,WAAW,MAAM,KAAK,mBAAmB,sBAAsB;AACrE,QAAI,aAAa,qBAAqB,WAAW;AAChD,YAAM,SAAS,SAAS,6BAA6B,kHAAkH;AACvK,YAAM,qBAAoC;AAAA,QACzC,OAAO,SAAS,gBAAgB,uBAAuB;AAAA,QACvD,KAAK,mCAAY;AAChB,gBAAM,KAAK,mBAAmB,0BAA0B;AACxD,gBAAM,KAAK,oBAAoB,MAAM,KAAK,oBAAoB,cAAc,CAAC,EAAE,MAAM,CAAC,gBAAgB,GAAG,OAAO,uBAAuB,MAAM,CAAC,GAAG,IAAI;AACrJ,eAAK,aAAa;AAAA,QACnB,GAJK;AAAA,MAKN;AACA,cAAQ,QAAQ,kBAAkB;AAElC,YAAM,KAAK,eAAe,OAAO;AAAA,QAChC,MAAM;AAAA,QACN;AAAA,QACA,SAAS;AAAA,QACT;AAAA,MACD,CAAC;AACD;AAAA,IACD;AAEA,QAAI,QAAQ,QAAQ,GAAG;AACtB,qBAAe,SAAS,WAAW,+LAA+L;AAAA,IACnO,WAAW,UAAU,QAAQ,GAAG;AAC/B,qBAAe,SAAS,aAAa,0HAA0H;AAAA,IAChK;AAEA,SAAK,qBAAqB,OAAO,SAAS,OAAO,cAAc,OAAO;AAAA,EACvE;AACD;AAlFa,6BAAN;AAAA,EAGJ;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,GAVU;AAoFb,kBAAkB,uBAAuB,4BAA4B,kBAAkB,OAAO;",
  "names": []
}
