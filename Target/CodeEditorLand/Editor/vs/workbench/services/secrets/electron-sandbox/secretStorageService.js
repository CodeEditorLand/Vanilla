var g=Object.defineProperty;var y=Object.getOwnPropertyDescriptor;var l=(c,n,e,r)=>{for(var i=r>1?void 0:r?y(n,e):n,o=c.length-1,s;o>=0;o--)(s=c[o])&&(i=(r?s(n,e,i):s(i))||i);return r&&i&&g(n,e,i),i},t=(c,n)=>(e,r)=>n(e,r,c);import{createSingleCallFunction as d}from"../../../../../vs/base/common/functional.js";import{isLinux as f}from"../../../../../vs/base/common/platform.js";import u from"../../../../../vs/base/common/severity.js";import{localize as a}from"../../../../../vs/nls.js";import{IDialogService as h}from"../../../../../vs/platform/dialogs/common/dialogs.js";import{IEncryptionService as I,isGnome as E,isKwallet as b,KnownStorageProvider as O,PasswordStoreCLIOption as w}from"../../../../../vs/platform/encryption/common/encryptionService.js";import{INativeEnvironmentService as _}from"../../../../../vs/platform/environment/common/environment.js";import{InstantiationType as P,registerSingleton as k}from"../../../../../vs/platform/instantiation/common/extensions.js";import{ILogService as N}from"../../../../../vs/platform/log/common/log.js";import{INotificationService as x}from"../../../../../vs/platform/notification/common/notification.js";import{IOpenerService as T}from"../../../../../vs/platform/opener/common/opener.js";import{BaseSecretStorageService as C,ISecretStorageService as K}from"../../../../../vs/platform/secrets/common/secrets.js";import{IStorageService as B}from"../../../../../vs/platform/storage/common/storage.js";import{IJSONEditingService as D}from"../../../../../vs/workbench/services/configuration/common/jsonEditing.js";let p=class extends C{constructor(e,r,i,o,s,v,m,S){super(!!s.useInMemorySecretStorage,v,m,S);this._notificationService=e;this._dialogService=r;this._openerService=i;this._jsonEditingService=o;this._environmentService=s}set(e,r){return this._sequencer.queue(e,async()=>{await this.resolvedStorageService,this.type!=="persisted"&&!this._environmentService.useInMemorySecretStorage&&(this._logService.trace("[NativeSecretStorageService] Notifying user that secrets are not being stored on disk."),await this.notifyOfNoEncryptionOnce())}),super.set(e,r)}notifyOfNoEncryptionOnce=d(()=>this.notifyOfNoEncryption());async notifyOfNoEncryption(){const e=[],r={label:a("troubleshootingButton","Open troubleshooting guide"),run:()=>this._openerService.open("https://go.microsoft.com/fwlink/?linkid=2239490"),keepOpen:!0};e.push(r);let i=a("encryptionNotAvailableJustTroubleshootingGuide","An OS keyring couldn't be identified for storing the encryption related data in your current desktop environment.");if(!f){this._notificationService.prompt(u.Error,i,e);return}const o=await this._encryptionService.getKeyStorageProvider();if(o===O.basicText){const s=a("usePlainTextExtraSentence","Open the troubleshooting guide to address this or you can use weaker encryption that doesn't use the OS keyring."),v={label:a("usePlainText","Use weaker encryption"),run:async()=>{await this._encryptionService.setUsePlainTextEncryption(),await this._jsonEditingService.write(this._environmentService.argvResource,[{path:["password-store"],value:w.basic}],!0),this.reinitialize()}};e.unshift(v),await this._dialogService.prompt({type:"error",buttons:e,message:i,detail:s});return}E(o)?i=a("isGnome","You're running in a GNOME environment but the OS keyring is not available for encryption. Ensure you have gnome-keyring or another libsecret compatible implementation installed and running."):b(o)&&(i=a("isKwallet","You're running in a KDE environment but the OS keyring is not available for encryption. Ensure you have kwallet running.")),this._notificationService.prompt(u.Error,i,e)}};p=l([t(0,x),t(1,h),t(2,T),t(3,D),t(4,_),t(5,B),t(6,I),t(7,N)],p),k(K,p,P.Delayed);export{p as NativeSecretStorageService};
