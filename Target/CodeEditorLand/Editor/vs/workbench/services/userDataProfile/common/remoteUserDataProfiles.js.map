{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/userDataProfile/common/remoteUserDataProfiles.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Disposable } from '../../../../base/common/lifecycle.js';\nimport { InstantiationType, registerSingleton } from '../../../../platform/instantiation/common/extensions.js';\nimport { createDecorator } from '../../../../platform/instantiation/common/instantiation.js';\nimport { DidChangeProfilesEvent, IUserDataProfile, IUserDataProfilesService } from '../../../../platform/userDataProfile/common/userDataProfile.js';\nimport { IRemoteAgentService } from '../../remote/common/remoteAgentService.js';\nimport { IStorageService, StorageScope, StorageTarget } from '../../../../platform/storage/common/storage.js';\nimport { IStringDictionary } from '../../../../base/common/collections.js';\nimport { ILogService } from '../../../../platform/log/common/log.js';\nimport { IUserDataProfileService } from './userDataProfile.js';\nimport { distinct } from '../../../../base/common/arrays.js';\nimport { IWorkbenchEnvironmentService } from '../../environment/common/environmentService.js';\nimport { UserDataProfilesService } from '../../../../platform/userDataProfile/common/userDataProfileIpc.js';\n\nconst associatedRemoteProfilesKey = 'associatedRemoteProfiles';\n\nexport const IRemoteUserDataProfilesService = createDecorator<IRemoteUserDataProfilesService>('IRemoteUserDataProfilesService');\nexport interface IRemoteUserDataProfilesService {\n\treadonly _serviceBrand: undefined;\n\tgetRemoteProfiles(): Promise<readonly IUserDataProfile[]>;\n\tgetRemoteProfile(localProfile: IUserDataProfile): Promise<IUserDataProfile>;\n}\n\nclass RemoteUserDataProfilesService extends Disposable implements IRemoteUserDataProfilesService {\n\n\treadonly _serviceBrand: undefined;\n\n\tprivate readonly initPromise: Promise<void>;\n\n\tprivate remoteUserDataProfilesService: IUserDataProfilesService | undefined;\n\n\tconstructor(\n\t\t@IWorkbenchEnvironmentService private readonly environmentService: IWorkbenchEnvironmentService,\n\t\t@IRemoteAgentService private readonly remoteAgentService: IRemoteAgentService,\n\t\t@IUserDataProfilesService private readonly userDataProfilesService: IUserDataProfilesService,\n\t\t@IUserDataProfileService private readonly userDataProfileService: IUserDataProfileService,\n\t\t@IStorageService private readonly storageService: IStorageService,\n\t\t@ILogService private readonly logService: ILogService,\n\t) {\n\t\tsuper();\n\t\tthis.initPromise = this.init();\n\t}\n\n\tprivate async init(): Promise<void> {\n\t\tconst connection = this.remoteAgentService.getConnection();\n\t\tif (!connection) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst environment = await this.remoteAgentService.getEnvironment();\n\t\tif (!environment) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.remoteUserDataProfilesService = new UserDataProfilesService(environment.profiles.all, environment.profiles.home, connection.getChannel('userDataProfiles'));\n\t\tthis._register(this.userDataProfilesService.onDidChangeProfiles(e => this.onDidChangeLocalProfiles(e)));\n\n\t\t// Associate current local profile with remote profile\n\t\tconst remoteProfile = await this.getAssociatedRemoteProfile(this.userDataProfileService.currentProfile, this.remoteUserDataProfilesService);\n\t\tif (!remoteProfile.isDefault) {\n\t\t\tthis.setAssociatedRemoteProfiles([...this.getAssociatedRemoteProfiles(), remoteProfile.id]);\n\t\t}\n\n\t\tthis.cleanUp();\n\t}\n\n\tprivate async onDidChangeLocalProfiles(e: DidChangeProfilesEvent): Promise<void> {\n\t\tfor (const profile of e.removed) {\n\t\t\tconst remoteProfile = this.remoteUserDataProfilesService?.profiles.find(p => p.id === profile.id);\n\t\t\tif (remoteProfile) {\n\t\t\t\tawait this.remoteUserDataProfilesService?.removeProfile(remoteProfile);\n\t\t\t}\n\t\t}\n\t}\n\n\tasync getRemoteProfiles(): Promise<readonly IUserDataProfile[]> {\n\t\tawait this.initPromise;\n\n\t\tif (!this.remoteUserDataProfilesService) {\n\t\t\tthrow new Error('Remote profiles service not available in the current window');\n\t\t}\n\n\t\treturn this.remoteUserDataProfilesService.profiles;\n\t}\n\n\tasync getRemoteProfile(localProfile: IUserDataProfile): Promise<IUserDataProfile> {\n\t\tawait this.initPromise;\n\n\t\tif (!this.remoteUserDataProfilesService) {\n\t\t\tthrow new Error('Remote profiles service not available in the current window');\n\t\t}\n\n\t\treturn this.getAssociatedRemoteProfile(localProfile, this.remoteUserDataProfilesService);\n\t}\n\n\tprivate async getAssociatedRemoteProfile(localProfile: IUserDataProfile, remoteUserDataProfilesService: IUserDataProfilesService): Promise<IUserDataProfile> {\n\t\t// If the local profile is the default profile, return the remote default profile\n\t\tif (localProfile.isDefault) {\n\t\t\treturn remoteUserDataProfilesService.defaultProfile;\n\t\t}\n\n\t\tlet profile = remoteUserDataProfilesService.profiles.find(p => p.id === localProfile.id);\n\t\tif (!profile) {\n\t\t\tprofile = await remoteUserDataProfilesService.createProfile(localProfile.id, localProfile.name, {\n\t\t\t\tshortName: localProfile.shortName,\n\t\t\t\ttransient: localProfile.isTransient,\n\t\t\t\tuseDefaultFlags: localProfile.useDefaultFlags,\n\t\t\t});\n\t\t\tthis.setAssociatedRemoteProfiles([...this.getAssociatedRemoteProfiles(), this.userDataProfileService.currentProfile.id]);\n\t\t}\n\t\treturn profile;\n\t}\n\n\tprivate getAssociatedRemoteProfiles(): string[] {\n\t\tif (this.environmentService.remoteAuthority) {\n\t\t\tconst remotes = this.parseAssociatedRemoteProfiles();\n\t\t\treturn remotes[this.environmentService.remoteAuthority] ?? [];\n\t\t}\n\t\treturn [];\n\t}\n\n\tprivate setAssociatedRemoteProfiles(profiles: string[]): void {\n\t\tif (this.environmentService.remoteAuthority) {\n\t\t\tconst remotes = this.parseAssociatedRemoteProfiles();\n\t\t\tprofiles = distinct(profiles);\n\t\t\tif (profiles.length) {\n\t\t\t\tremotes[this.environmentService.remoteAuthority] = profiles;\n\t\t\t} else {\n\t\t\t\tdelete remotes[this.environmentService.remoteAuthority];\n\t\t\t}\n\t\t\tif (Object.keys(remotes).length) {\n\t\t\t\tthis.storageService.store(associatedRemoteProfilesKey, JSON.stringify(remotes), StorageScope.APPLICATION, StorageTarget.MACHINE);\n\t\t\t} else {\n\t\t\t\tthis.storageService.remove(associatedRemoteProfilesKey, StorageScope.APPLICATION);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate parseAssociatedRemoteProfiles(): IStringDictionary<string[]> {\n\t\tif (this.environmentService.remoteAuthority) {\n\t\t\tconst value = this.storageService.get(associatedRemoteProfilesKey, StorageScope.APPLICATION);\n\t\t\ttry {\n\t\t\t\treturn value ? JSON.parse(value) : {};\n\t\t\t} catch (error) {\n\t\t\t\tthis.logService.error(error);\n\t\t\t}\n\t\t}\n\t\treturn {};\n\t}\n\n\tprivate async cleanUp(): Promise<void> {\n\t\tconst associatedRemoteProfiles: string[] = [];\n\t\tfor (const profileId of this.getAssociatedRemoteProfiles()) {\n\t\t\tconst remoteProfile = this.remoteUserDataProfilesService?.profiles.find(p => p.id === profileId);\n\t\t\tif (!remoteProfile) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tconst localProfile = this.userDataProfilesService.profiles.find(p => p.id === profileId);\n\t\t\tif (localProfile) {\n\t\t\t\tif (localProfile.name !== remoteProfile.name || localProfile.shortName !== remoteProfile.shortName) {\n\t\t\t\t\tawait this.remoteUserDataProfilesService?.updateProfile(remoteProfile, { name: localProfile.name, shortName: localProfile.shortName });\n\t\t\t\t}\n\t\t\t\tassociatedRemoteProfiles.push(profileId);\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (remoteProfile) {\n\t\t\t\t// Cleanup remote profiles those are not available locally\n\t\t\t\tawait this.remoteUserDataProfilesService?.removeProfile(remoteProfile);\n\t\t\t}\n\t\t}\n\t\tthis.setAssociatedRemoteProfiles(associatedRemoteProfiles);\n\t}\n\n}\n\nregisterSingleton(IRemoteUserDataProfilesService, RemoteUserDataProfilesService, InstantiationType.Delayed);\n"],
  "mappings": "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",
  "names": []
}
