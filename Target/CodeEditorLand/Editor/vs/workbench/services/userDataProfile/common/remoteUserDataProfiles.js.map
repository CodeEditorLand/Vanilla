{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/userDataProfile/common/remoteUserDataProfiles.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { distinct } from \"../../../../base/common/arrays.js\";\nimport type { IStringDictionary } from \"../../../../base/common/collections.js\";\nimport { Disposable } from \"../../../../base/common/lifecycle.js\";\nimport {\n\tInstantiationType,\n\tregisterSingleton,\n} from \"../../../../platform/instantiation/common/extensions.js\";\nimport { createDecorator } from \"../../../../platform/instantiation/common/instantiation.js\";\nimport { ILogService } from \"../../../../platform/log/common/log.js\";\nimport {\n\tIStorageService,\n\tStorageScope,\n\tStorageTarget,\n} from \"../../../../platform/storage/common/storage.js\";\nimport {\n\ttype DidChangeProfilesEvent,\n\ttype IUserDataProfile,\n\tIUserDataProfilesService,\n} from \"../../../../platform/userDataProfile/common/userDataProfile.js\";\nimport { UserDataProfilesService } from \"../../../../platform/userDataProfile/common/userDataProfileIpc.js\";\nimport { IWorkbenchEnvironmentService } from \"../../environment/common/environmentService.js\";\nimport { IRemoteAgentService } from \"../../remote/common/remoteAgentService.js\";\nimport { IUserDataProfileService } from \"./userDataProfile.js\";\n\nconst associatedRemoteProfilesKey = \"associatedRemoteProfiles\";\n\nexport const IRemoteUserDataProfilesService =\n\tcreateDecorator<IRemoteUserDataProfilesService>(\n\t\t\"IRemoteUserDataProfilesService\",\n\t);\nexport interface IRemoteUserDataProfilesService {\n\treadonly _serviceBrand: undefined;\n\tgetRemoteProfiles(): Promise<readonly IUserDataProfile[]>;\n\tgetRemoteProfile(localProfile: IUserDataProfile): Promise<IUserDataProfile>;\n}\n\nclass RemoteUserDataProfilesService\n\textends Disposable\n\timplements IRemoteUserDataProfilesService\n{\n\treadonly _serviceBrand: undefined;\n\n\tprivate readonly initPromise: Promise<void>;\n\n\tprivate remoteUserDataProfilesService: IUserDataProfilesService | undefined;\n\n\tconstructor(\n\t\t@IWorkbenchEnvironmentService private readonly environmentService: IWorkbenchEnvironmentService,\n\t\t@IRemoteAgentService private readonly remoteAgentService: IRemoteAgentService,\n\t\t@IUserDataProfilesService private readonly userDataProfilesService: IUserDataProfilesService,\n\t\t@IUserDataProfileService private readonly userDataProfileService: IUserDataProfileService,\n\t\t@IStorageService private readonly storageService: IStorageService,\n\t\t@ILogService private readonly logService: ILogService,\n\t) {\n\t\tsuper();\n\t\tthis.initPromise = this.init();\n\t}\n\n\tprivate async init(): Promise<void> {\n\t\tconst connection = this.remoteAgentService.getConnection();\n\t\tif (!connection) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst environment = await this.remoteAgentService.getEnvironment();\n\t\tif (!environment) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.remoteUserDataProfilesService = new UserDataProfilesService(\n\t\t\tenvironment.profiles.all,\n\t\t\tenvironment.profiles.home,\n\t\t\tconnection.getChannel(\"userDataProfiles\"),\n\t\t);\n\t\tthis._register(\n\t\t\tthis.userDataProfilesService.onDidChangeProfiles((e) =>\n\t\t\t\tthis.onDidChangeLocalProfiles(e),\n\t\t\t),\n\t\t);\n\n\t\t// Associate current local profile with remote profile\n\t\tconst remoteProfile = await this.getAssociatedRemoteProfile(\n\t\t\tthis.userDataProfileService.currentProfile,\n\t\t\tthis.remoteUserDataProfilesService,\n\t\t);\n\t\tif (!remoteProfile.isDefault) {\n\t\t\tthis.setAssociatedRemoteProfiles([\n\t\t\t\t...this.getAssociatedRemoteProfiles(),\n\t\t\t\tremoteProfile.id,\n\t\t\t]);\n\t\t}\n\n\t\tthis.cleanUp();\n\t}\n\n\tprivate async onDidChangeLocalProfiles(\n\t\te: DidChangeProfilesEvent,\n\t): Promise<void> {\n\t\tfor (const profile of e.removed) {\n\t\t\tconst remoteProfile =\n\t\t\t\tthis.remoteUserDataProfilesService?.profiles.find(\n\t\t\t\t\t(p) => p.id === profile.id,\n\t\t\t\t);\n\t\t\tif (remoteProfile) {\n\t\t\t\tawait this.remoteUserDataProfilesService?.removeProfile(\n\t\t\t\t\tremoteProfile,\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t}\n\n\tasync getRemoteProfiles(): Promise<readonly IUserDataProfile[]> {\n\t\tawait this.initPromise;\n\n\t\tif (!this.remoteUserDataProfilesService) {\n\t\t\tthrow new Error(\n\t\t\t\t\"Remote profiles service not available in the current window\",\n\t\t\t);\n\t\t}\n\n\t\treturn this.remoteUserDataProfilesService.profiles;\n\t}\n\n\tasync getRemoteProfile(\n\t\tlocalProfile: IUserDataProfile,\n\t): Promise<IUserDataProfile> {\n\t\tawait this.initPromise;\n\n\t\tif (!this.remoteUserDataProfilesService) {\n\t\t\tthrow new Error(\n\t\t\t\t\"Remote profiles service not available in the current window\",\n\t\t\t);\n\t\t}\n\n\t\treturn this.getAssociatedRemoteProfile(\n\t\t\tlocalProfile,\n\t\t\tthis.remoteUserDataProfilesService,\n\t\t);\n\t}\n\n\tprivate async getAssociatedRemoteProfile(\n\t\tlocalProfile: IUserDataProfile,\n\t\tremoteUserDataProfilesService: IUserDataProfilesService,\n\t): Promise<IUserDataProfile> {\n\t\t// If the local profile is the default profile, return the remote default profile\n\t\tif (localProfile.isDefault) {\n\t\t\treturn remoteUserDataProfilesService.defaultProfile;\n\t\t}\n\n\t\tlet profile = remoteUserDataProfilesService.profiles.find(\n\t\t\t(p) => p.id === localProfile.id,\n\t\t);\n\t\tif (!profile) {\n\t\t\tprofile = await remoteUserDataProfilesService.createProfile(\n\t\t\t\tlocalProfile.id,\n\t\t\t\tlocalProfile.name,\n\t\t\t\t{\n\t\t\t\t\tshortName: localProfile.shortName,\n\t\t\t\t\ttransient: localProfile.isTransient,\n\t\t\t\t\tuseDefaultFlags: localProfile.useDefaultFlags,\n\t\t\t\t},\n\t\t\t);\n\t\t\tthis.setAssociatedRemoteProfiles([\n\t\t\t\t...this.getAssociatedRemoteProfiles(),\n\t\t\t\tthis.userDataProfileService.currentProfile.id,\n\t\t\t]);\n\t\t}\n\t\treturn profile;\n\t}\n\n\tprivate getAssociatedRemoteProfiles(): string[] {\n\t\tif (this.environmentService.remoteAuthority) {\n\t\t\tconst remotes = this.parseAssociatedRemoteProfiles();\n\t\t\treturn remotes[this.environmentService.remoteAuthority] ?? [];\n\t\t}\n\t\treturn [];\n\t}\n\n\tprivate setAssociatedRemoteProfiles(profiles: string[]): void {\n\t\tif (this.environmentService.remoteAuthority) {\n\t\t\tconst remotes = this.parseAssociatedRemoteProfiles();\n\t\t\tprofiles = distinct(profiles);\n\t\t\tif (profiles.length) {\n\t\t\t\tremotes[this.environmentService.remoteAuthority] = profiles;\n\t\t\t} else {\n\t\t\t\tdelete remotes[this.environmentService.remoteAuthority];\n\t\t\t}\n\t\t\tif (Object.keys(remotes).length) {\n\t\t\t\tthis.storageService.store(\n\t\t\t\t\tassociatedRemoteProfilesKey,\n\t\t\t\t\tJSON.stringify(remotes),\n\t\t\t\t\tStorageScope.APPLICATION,\n\t\t\t\t\tStorageTarget.MACHINE,\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\tthis.storageService.remove(\n\t\t\t\t\tassociatedRemoteProfilesKey,\n\t\t\t\t\tStorageScope.APPLICATION,\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate parseAssociatedRemoteProfiles(): IStringDictionary<string[]> {\n\t\tif (this.environmentService.remoteAuthority) {\n\t\t\tconst value = this.storageService.get(\n\t\t\t\tassociatedRemoteProfilesKey,\n\t\t\t\tStorageScope.APPLICATION,\n\t\t\t);\n\t\t\ttry {\n\t\t\t\treturn value ? JSON.parse(value) : {};\n\t\t\t} catch (error) {\n\t\t\t\tthis.logService.error(error);\n\t\t\t}\n\t\t}\n\t\treturn {};\n\t}\n\n\tprivate async cleanUp(): Promise<void> {\n\t\tconst associatedRemoteProfiles: string[] = [];\n\t\tfor (const profileId of this.getAssociatedRemoteProfiles()) {\n\t\t\tconst remoteProfile =\n\t\t\t\tthis.remoteUserDataProfilesService?.profiles.find(\n\t\t\t\t\t(p) => p.id === profileId,\n\t\t\t\t);\n\t\t\tif (!remoteProfile) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tconst localProfile = this.userDataProfilesService.profiles.find(\n\t\t\t\t(p) => p.id === profileId,\n\t\t\t);\n\t\t\tif (localProfile) {\n\t\t\t\tif (\n\t\t\t\t\tlocalProfile.name !== remoteProfile.name ||\n\t\t\t\t\tlocalProfile.shortName !== remoteProfile.shortName\n\t\t\t\t) {\n\t\t\t\t\tawait this.remoteUserDataProfilesService?.updateProfile(\n\t\t\t\t\t\tremoteProfile,\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tname: localProfile.name,\n\t\t\t\t\t\t\tshortName: localProfile.shortName,\n\t\t\t\t\t\t},\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t\tassociatedRemoteProfiles.push(profileId);\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (remoteProfile) {\n\t\t\t\t// Cleanup remote profiles those are not available locally\n\t\t\t\tawait this.remoteUserDataProfilesService?.removeProfile(\n\t\t\t\t\tremoteProfile,\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t\tthis.setAssociatedRemoteProfiles(associatedRemoteProfiles);\n\t}\n}\n\nregisterSingleton(\n\tIRemoteUserDataProfilesService,\n\tRemoteUserDataProfilesService,\n\tInstantiationType.Delayed,\n);\n"],
  "mappings": "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",
  "names": []
}
