var K=Object.defineProperty;var C=Object.getOwnPropertyDescriptor;var l=(e,n,i,o)=>{for(var r=o>1?void 0:o?C(n,i):n,p=e.length-1,y;p>=0;p--)(y=e[p])&&(r=(o?y(n,i,r):y(r))||r);return o&&r&&K(n,i,r),r},m=(e,n)=>(i,o)=>n(i,o,e);import*as f from"../../../../base/browser/dom.js";import{IconSelectBox as b}from"../../../../base/browser/ui/icons/iconSelectBox.js";import{KeyCode as c}from"../../../../base/common/keyCodes.js";import{ContextKeyExpr as x,IContextKeyService as w,RawContextKey as g}from"../../../../platform/contextkey/common/contextkey.js";import{KeybindingWeight as d,KeybindingsRegistry as u}from"../../../../platform/keybinding/common/keybindingsRegistry.js";const s=new g("iconSelectBoxFocus",!0),h=new g("iconSelectBoxInputFocus",!0),a=new g("iconSelectBoxInputEmpty",!0);let t=class extends b{static focusedWidget;static getFocusedWidget(){return t.focusedWidget}contextKeyService;inputFocusContextKey;inputEmptyContextKey;constructor(n,i){if(super(n),this.contextKeyService=this._register(i.createScoped(this.domNode)),s.bindTo(this.contextKeyService),this.inputFocusContextKey=h.bindTo(this.contextKeyService),this.inputEmptyContextKey=a.bindTo(this.contextKeyService),this.inputBox){const o=this._register(f.trackFocus(this.inputBox.inputElement));this._register(o.onDidFocus(()=>this.inputFocusContextKey.set(!0))),this._register(o.onDidBlur(()=>this.inputFocusContextKey.set(!1))),this._register(this.inputBox.onDidChange(()=>this.inputEmptyContextKey.set(this.inputBox?.value.length===0)))}}focus(){super.focus(),t.focusedWidget=this}};t=l([m(1,w)],t),u.registerCommandAndKeybindingRule({id:"iconSelectBox.focusUp",weight:d.WorkbenchContrib,when:s,primary:c.UpArrow,handler:()=>{const e=t.getFocusedWidget();e&&e.focusPreviousRow()}}),u.registerCommandAndKeybindingRule({id:"iconSelectBox.focusDown",weight:d.WorkbenchContrib,when:s,primary:c.DownArrow,handler:()=>{const e=t.getFocusedWidget();e&&e.focusNextRow()}}),u.registerCommandAndKeybindingRule({id:"iconSelectBox.focusNext",weight:d.WorkbenchContrib,when:x.and(s,x.or(a,h.toNegated())),primary:c.RightArrow,handler:()=>{const e=t.getFocusedWidget();e&&e.focusNext()}}),u.registerCommandAndKeybindingRule({id:"iconSelectBox.focusPrevious",weight:d.WorkbenchContrib,when:x.and(s,x.or(a,h.toNegated())),primary:c.LeftArrow,handler:()=>{const e=t.getFocusedWidget();e&&e.focusPrevious()}}),u.registerCommandAndKeybindingRule({id:"iconSelectBox.selectFocused",weight:d.WorkbenchContrib,when:s,primary:c.Enter,handler:()=>{const e=t.getFocusedWidget();e&&e.setSelection(e.getFocus()[0])}});export{t as WorkbenchIconSelectBox,s as WorkbenchIconSelectBoxFocusContextKey,a as WorkbenchIconSelectBoxInputEmptyContextKey,h as WorkbenchIconSelectBoxInputFocusContextKey};
