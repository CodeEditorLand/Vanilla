var m=Object.defineProperty;var v=Object.getOwnPropertyDescriptor;var P=(l,c,e,r)=>{for(var i=r>1?void 0:r?v(c,e):c,t=l.length-1,s;t>=0;t--)(s=l[t])&&(i=(r?s(c,e,i):s(i))||i);return r&&i&&m(c,e,i),i},o=(l,c)=>(e,r)=>c(e,r,l);import{CancellationToken as h}from"../../../../base/common/cancellation.js";import{CancellationError as S}from"../../../../base/common/errors.js";import{Disposable as g}from"../../../../base/common/lifecycle.js";import{equals as D}from"../../../../base/common/objects.js";import"../../../../base/common/uri.js";import{localize as n}from"../../../../nls.js";import{IConfigurationService as I}from"../../../../platform/configuration/common/configuration.js";import{IDialogService as w}from"../../../../platform/dialogs/common/dialogs.js";import{InstantiationType as E,registerSingleton as C}from"../../../../platform/instantiation/common/extensions.js";import{ILogService as y}from"../../../../platform/log/common/log.js";import{IProductService as x}from"../../../../platform/product/common/productService.js";import{IRequestService as U,asJson as k}from"../../../../platform/request/common/request.js";import{ITelemetryService as T}from"../../../../platform/telemetry/common/telemetry.js";import{IUriIdentityService as W}from"../../../../platform/uriIdentity/common/uriIdentity.js";import{IUserDataProfilesService as A}from"../../../../platform/userDataProfile/common/userDataProfile.js";import{isEmptyWorkspaceIdentifier as M,IWorkspaceContextService as b,toWorkspaceIdentifier as d}from"../../../../platform/workspace/common/workspace.js";import{CONFIG_NEW_WINDOW_PROFILE as F}from"../../../common/configuration.js";import{IWorkbenchEnvironmentService as q}from"../../environment/common/environmentService.js";import{IExtensionService as L}from"../../extensions/common/extensions.js";import{IHostService as R}from"../../host/browser/host.js";import{IUserDataProfileManagementService as O,IUserDataProfileService as N}from"../common/userDataProfile.js";let f=class extends g{constructor(e,r,i,t,s,_,H,B,V,$,G,z,J){super();this.userDataProfilesService=e;this.userDataProfileService=r;this.hostService=i;this.dialogService=t;this.workspaceContextService=s;this.extensionService=_;this.environmentService=H;this.telemetryService=B;this.productService=V;this.requestService=$;this.configurationService=G;this.uriIdentityService=z;this.logService=J;this._register(r.onDidChangeCurrentProfile(u=>this.onDidChangeCurrentProfile(u))),this._register(e.onDidChangeProfiles(u=>{if(u.removed.some(a=>a.id===this.userDataProfileService.currentProfile.id)){const a=this.getProfileToUseForCurrentWorkspace();this.switchProfile(a),this.changeCurrentProfile(a,n("reload message when removed","The current profile has been removed. Please reload to switch back to default profile"));return}const p=u.updated.find(a=>this.userDataProfileService.currentProfile.id===a.id);if(p){const a=this.getProfileToUseForCurrentWorkspace();a?.id!==p.id?(this.switchProfile(a),this.changeCurrentProfile(a,n("reload message when switched","The current workspace has been removed from the current profile. Please reload to switch back to the updated profile"))):this.changeCurrentProfile(p,n("reload message when updated","The current profile has been updated. Please reload to switch back to the updated profile"))}}))}_serviceBrand;async onDidChangeCurrentProfile(e){e.previous.isTransient&&await this.userDataProfilesService.cleanUpTransientProfiles()}getWorkspaceUri(){const e=this.workspaceContextService.getWorkspace();return e.configuration??e.folders[0]?.uri}getProfileToUseForCurrentWorkspace(){const e=this.getWorkspaceUri();if(e){const r=this.userDataProfilesService.profiles.find(i=>i.workspaces?.some(t=>this.uriIdentityService.extUri.isEqual(t,e)));if(r)return r}else{const r=this.userDataProfilesService.profiles.find(i=>i.id===this.userDataProfileService.currentProfile.id);if(r)return r}return this.getDefaultProfileToUse()}getDefaultProfileToUse(){const e=this.configurationService.getValue(F);if(e){const r=this.userDataProfilesService.profiles.find(i=>i.name===e);if(r)return r}return this.userDataProfilesService.defaultProfile}async createProfile(e,r){return this.userDataProfilesService.createNamedProfile(e,r)}async createAndEnterProfile(e,r){const i=await this.userDataProfilesService.createNamedProfile(e,r,d(this.workspaceContextService.getWorkspace()));return await this.changeCurrentProfile(i),this.telemetryService.publicLog2("profileManagementActionExecuted",{id:"createAndEnterProfile"}),i}async createAndEnterTransientProfile(){const e=await this.userDataProfilesService.createTransientProfile(d(this.workspaceContextService.getWorkspace()));return await this.changeCurrentProfile(e),this.telemetryService.publicLog2("profileManagementActionExecuted",{id:"createAndEnterTransientProfile"}),e}async updateProfile(e,r){if(!this.userDataProfilesService.profiles.some(t=>t.id===e.id))throw new Error(`Profile ${e.name} does not exist`);if(e.isDefault)throw new Error(n("cannotRenameDefaultProfile","Cannot rename the default profile"));const i=await this.userDataProfilesService.updateProfile(e,r);return this.telemetryService.publicLog2("profileManagementActionExecuted",{id:"updateProfile"}),i}async removeProfile(e){if(!this.userDataProfilesService.profiles.some(r=>r.id===e.id))throw new Error(`Profile ${e.name} does not exist`);if(e.isDefault)throw new Error(n("cannotDeleteDefaultProfile","Cannot delete the default profile"));await this.userDataProfilesService.removeProfile(e),this.telemetryService.publicLog2("profileManagementActionExecuted",{id:"removeProfile"})}async switchProfile(e){if(!this.userDataProfilesService.profiles.some(t=>t.id===e.id))throw new Error(`Profile ${e.name} does not exist`);if(this.userDataProfileService.currentProfile.id===e.id)return;const r=this.getWorkspaceUri();if(r&&e.workspaces?.some(t=>this.uriIdentityService.extUri.isEqual(t,r)))return;const i=d(this.workspaceContextService.getWorkspace());await this.userDataProfilesService.setProfileForWorkspace(i,e),this.telemetryService.publicLog2("profileManagementActionExecuted",{id:"switchProfile"}),M(i)&&await this.changeCurrentProfile(e)}async getBuiltinProfileTemplates(){if(this.productService.profileTemplatesUrl)try{const e=await this.requestService.request({type:"GET",url:this.productService.profileTemplatesUrl},h.None);if(e.res.statusCode===200)return await k(e)||[];this.logService.error("Could not get profile templates.",e.res.statusCode)}catch(e){this.logService.error(e)}return[]}async changeCurrentProfile(e,r){const i=!!this.environmentService.remoteAuthority,t=this.userDataProfileService.currentProfile.id!==e.id||!D(this.userDataProfileService.currentProfile.useDefaultFlags,e.useDefaultFlags);if(t&&!i&&!await this.extensionService.stopExtensionHosts(n("switch profile","Switching to a profile.")))throw this.userDataProfilesService.profiles.some(s=>s.id===this.userDataProfileService.currentProfile.id)&&await this.userDataProfilesService.setProfileForWorkspace(d(this.workspaceContextService.getWorkspace()),this.userDataProfileService.currentProfile),new S;if(await this.userDataProfileService.updateCurrentProfile(e),t)if(i){const{confirmed:s}=await this.dialogService.confirm({message:r??n("reload message","Switching a profile requires reloading VS Code."),primaryButton:n("reload button","&&Reload")});s&&await this.hostService.reload()}else await this.extensionService.startExtensionHosts()}};f=P([o(0,A),o(1,N),o(2,R),o(3,w),o(4,b),o(5,L),o(6,q),o(7,T),o(8,x),o(9,U),o(10,I),o(11,W),o(12,y)],f),C(O,f,E.Eager);export{f as UserDataProfileManagementService};
