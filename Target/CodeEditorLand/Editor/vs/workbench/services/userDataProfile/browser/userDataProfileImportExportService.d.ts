import "vs/css!./media/userDataProfileView";
import { CancellationToken } from "vs/base/common/cancellation";
import { Disposable, IDisposable } from "vs/base/common/lifecycle";
import { URI } from "vs/base/common/uri";
import { IClipboardService } from "vs/platform/clipboard/common/clipboardService";
import { IContextKeyService } from "vs/platform/contextkey/common/contextkey";
import { IDialogService } from "vs/platform/dialogs/common/dialogs";
import { IInstantiationService } from "vs/platform/instantiation/common/instantiation";
import { IOpenerService } from "vs/platform/opener/common/opener";
import { IProductService } from "vs/platform/product/common/productService";
import { IProgressService } from "vs/platform/progress/common/progress";
import { IQuickInputService } from "vs/platform/quickinput/common/quickInput";
import { IRequestService } from "vs/platform/request/common/request";
import { IUriIdentityService } from "vs/platform/uriIdentity/common/uriIdentity";
import { IUserDataProfile, IUserDataProfilesService } from "vs/platform/userDataProfile/common/userDataProfile";
import { IExtensionService } from "vs/workbench/services/extensions/common/extensions";
import { IProfileImportOptions, IUserDataProfileContentHandler, IUserDataProfileCreateOptions, IUserDataProfileImportExportService, IUserDataProfileManagementService, IUserDataProfileService } from "vs/workbench/services/userDataProfile/common/userDataProfile";
interface IUserDataProfileTemplate {
    readonly name: string;
    readonly icon?: string;
    readonly settings?: string;
    readonly keybindings?: string;
    readonly tasks?: string;
    readonly snippets?: string;
    readonly globalState?: string;
    readonly extensions?: string;
}
export declare class UserDataProfileImportExportService extends Disposable implements IUserDataProfileImportExportService {
    private readonly instantiationService;
    private readonly userDataProfileService;
    private readonly userDataProfileManagementService;
    private readonly userDataProfilesService;
    private readonly extensionService;
    private readonly quickInputService;
    private readonly progressService;
    private readonly dialogService;
    private readonly clipboardService;
    private readonly openerService;
    private readonly requestService;
    private readonly productService;
    private readonly uriIdentityService;
    readonly _serviceBrand: undefined;
    private profileContentHandlers;
    private readonly fileUserDataProfileContentHandler;
    constructor(instantiationService: IInstantiationService, userDataProfileService: IUserDataProfileService, contextKeyService: IContextKeyService, userDataProfileManagementService: IUserDataProfileManagementService, userDataProfilesService: IUserDataProfilesService, extensionService: IExtensionService, quickInputService: IQuickInputService, progressService: IProgressService, dialogService: IDialogService, clipboardService: IClipboardService, openerService: IOpenerService, requestService: IRequestService, productService: IProductService, uriIdentityService: IUriIdentityService);
    registerProfileContentHandler(id: string, profileContentHandler: IUserDataProfileContentHandler): IDisposable;
    unregisterProfileContentHandler(id: string): void;
    createFromProfile(from: IUserDataProfile, options: IUserDataProfileCreateOptions, token: CancellationToken): Promise<IUserDataProfile | undefined>;
    createProfileFromTemplate(profileTemplate: IUserDataProfileTemplate, options: IUserDataProfileCreateOptions, token: CancellationToken): Promise<IUserDataProfile | undefined>;
    private applyProfileTemplate;
    exportProfile(profile: IUserDataProfile): Promise<void>;
    createTroubleshootProfile(): Promise<void>;
    private doExportProfile;
    resolveProfileTemplate(uri: URI, options?: IProfileImportOptions): Promise<IUserDataProfileTemplate | null>;
    private doCreateProfile;
    private resolveProfileContent;
    private pickProfileContentHandler;
    private getProfileToImport;
    private getProfileNameIndex;
}
export {};
