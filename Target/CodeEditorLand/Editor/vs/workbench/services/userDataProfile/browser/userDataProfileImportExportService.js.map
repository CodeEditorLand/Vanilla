{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/userDataProfile/browser/userDataProfileImportExportService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport './media/userDataProfileView.css';\nimport { localize } from '../../../../nls.js';\nimport { InstantiationType, registerSingleton } from '../../../../platform/instantiation/common/extensions.js';\nimport { IInstantiationService } from '../../../../platform/instantiation/common/instantiation.js';\nimport { Emitter } from '../../../../base/common/event.js';\nimport { IUserDataProfileImportExportService, PROFILE_FILTER, PROFILE_EXTENSION, IUserDataProfileContentHandler, IUserDataProfileService, IProfileResourceTreeItem, PROFILES_CATEGORY, IUserDataProfileManagementService, ISaveProfileResult, IProfileImportOptions, PROFILE_URL_AUTHORITY, toUserDataProfileUri, IUserDataProfileCreateOptions, isProfileURL, PROFILE_URL_AUTHORITY_PREFIX } from '../common/userDataProfile.js';\nimport { Disposable, DisposableStore, IDisposable, toDisposable } from '../../../../base/common/lifecycle.js';\nimport { IDialogService, IFileDialogService, IPromptButton } from '../../../../platform/dialogs/common/dialogs.js';\nimport { IUriIdentityService } from '../../../../platform/uriIdentity/common/uriIdentity.js';\nimport { ITextFileService } from '../../textfile/common/textfiles.js';\nimport { IFileService } from '../../../../platform/files/common/files.js';\nimport { URI } from '../../../../base/common/uri.js';\nimport { ITreeItem, ITreeViewDataProvider } from '../../../common/views.js';\nimport { IUserDataProfile, IUserDataProfileOptions, IUserDataProfilesService, ProfileResourceType, ProfileResourceTypeFlags } from '../../../../platform/userDataProfile/common/userDataProfile.js';\nimport { SettingsResource, SettingsResourceTreeItem } from './settingsResource.js';\nimport { KeybindingsResource, KeybindingsResourceTreeItem } from './keybindingsResource.js';\nimport { SnippetsResource, SnippetsResourceTreeItem } from './snippetsResource.js';\nimport { TasksResource, TasksResourceTreeItem } from './tasksResource.js';\nimport { ExtensionsResource, ExtensionsResourceExportTreeItem, ExtensionsResourceTreeItem } from './extensionsResource.js';\nimport { GlobalStateResource, GlobalStateResourceExportTreeItem, GlobalStateResourceTreeItem } from './globalStateResource.js';\nimport { InMemoryFileSystemProvider } from '../../../../platform/files/common/inMemoryFilesystemProvider.js';\nimport { IOpenerService } from '../../../../platform/opener/common/opener.js';\nimport { IProgressService, ProgressLocation } from '../../../../platform/progress/common/progress.js';\nimport { IExtensionService } from '../../extensions/common/extensions.js';\nimport { IQuickInputService, QuickPickItem } from '../../../../platform/quickinput/common/quickInput.js';\nimport { VSBuffer } from '../../../../base/common/buffer.js';\nimport { joinPath } from '../../../../base/common/resources.js';\nimport { escapeRegExpCharacters } from '../../../../base/common/strings.js';\nimport { Schemas } from '../../../../base/common/network.js';\nimport { CancellationToken } from '../../../../base/common/cancellation.js';\nimport Severity from '../../../../base/common/severity.js';\nimport { IClipboardService } from '../../../../platform/clipboard/common/clipboardService.js';\nimport { asText, IRequestService } from '../../../../platform/request/common/request.js';\nimport { IProductService } from '../../../../platform/product/common/productService.js';\nimport { Mutable, isUndefined } from '../../../../base/common/types.js';\nimport { CancelablePromise, createCancelablePromise } from '../../../../base/common/async.js';\n\ninterface IUserDataProfileTemplate {\n\treadonly name: string;\n\treadonly icon?: string;\n\treadonly settings?: string;\n\treadonly keybindings?: string;\n\treadonly tasks?: string;\n\treadonly snippets?: string;\n\treadonly globalState?: string;\n\treadonly extensions?: string;\n}\n\nfunction isUserDataProfileTemplate(thing: unknown): thing is IUserDataProfileTemplate {\n\tconst candidate = thing as IUserDataProfileTemplate | undefined;\n\n\treturn !!(candidate && typeof candidate === 'object'\n\t\t&& (candidate.name && typeof candidate.name === 'string')\n\t\t&& (isUndefined(candidate.icon) || typeof candidate.icon === 'string')\n\t\t&& (isUndefined(candidate.settings) || typeof candidate.settings === 'string')\n\t\t&& (isUndefined(candidate.globalState) || typeof candidate.globalState === 'string')\n\t\t&& (isUndefined(candidate.extensions) || typeof candidate.extensions === 'string'));\n}\n\nexport class UserDataProfileImportExportService extends Disposable implements IUserDataProfileImportExportService {\n\n\treadonly _serviceBrand: undefined;\n\n\tprivate profileContentHandlers = new Map<string, IUserDataProfileContentHandler>();\n\n\tprivate readonly fileUserDataProfileContentHandler: FileUserDataProfileContentHandler;\n\n\tconstructor(\n\t\t@IInstantiationService private readonly instantiationService: IInstantiationService,\n\t\t@IUserDataProfileService private readonly userDataProfileService: IUserDataProfileService,\n\t\t@IUserDataProfileManagementService private readonly userDataProfileManagementService: IUserDataProfileManagementService,\n\t\t@IUserDataProfilesService private readonly userDataProfilesService: IUserDataProfilesService,\n\t\t@IExtensionService private readonly extensionService: IExtensionService,\n\t\t@IQuickInputService private readonly quickInputService: IQuickInputService,\n\t\t@IProgressService private readonly progressService: IProgressService,\n\t\t@IDialogService private readonly dialogService: IDialogService,\n\t\t@IClipboardService private readonly clipboardService: IClipboardService,\n\t\t@IOpenerService private readonly openerService: IOpenerService,\n\t\t@IRequestService private readonly requestService: IRequestService,\n\t\t@IProductService private readonly productService: IProductService,\n\t\t@IUriIdentityService private readonly uriIdentityService: IUriIdentityService,\n\t) {\n\t\tsuper();\n\t\tthis.registerProfileContentHandler(Schemas.file, this.fileUserDataProfileContentHandler = instantiationService.createInstance(FileUserDataProfileContentHandler));\n\t}\n\n\tregisterProfileContentHandler(id: string, profileContentHandler: IUserDataProfileContentHandler): IDisposable {\n\t\tif (this.profileContentHandlers.has(id)) {\n\t\t\tthrow new Error(`Profile content handler with id '${id}' already registered.`);\n\t\t}\n\t\tthis.profileContentHandlers.set(id, profileContentHandler);\n\t\treturn toDisposable(() => this.unregisterProfileContentHandler(id));\n\t}\n\n\tunregisterProfileContentHandler(id: string): void {\n\t\tthis.profileContentHandlers.delete(id);\n\t}\n\n\tasync createFromProfile(from: IUserDataProfile, options: IUserDataProfileCreateOptions, token: CancellationToken): Promise<IUserDataProfile | undefined> {\n\t\tconst disposables = new DisposableStore();\n\t\tlet creationPromise: CancelablePromise<void>;\n\t\tdisposables.add(token.onCancellationRequested(() => creationPromise.cancel()));\n\t\tlet profile: IUserDataProfile | undefined;\n\t\treturn this.progressService.withProgress({\n\t\t\tlocation: ProgressLocation.Notification,\n\t\t\tdelay: 500,\n\t\t\tsticky: true,\n\t\t\tcancellable: true,\n\t\t}, async progress => {\n\t\t\tconst reportProgress = (message: string) => progress.report({ message: localize('create from profile', \"Create Profile: {0}\", message) });\n\t\t\tcreationPromise = createCancelablePromise(async token => {\n\t\t\t\tconst userDataProfilesExportState = disposables.add(this.instantiationService.createInstance(UserDataProfileExportState, from, { ...options?.resourceTypeFlags, extensions: false }));\n\t\t\t\tconst profileTemplate = await userDataProfilesExportState.getProfileTemplate(options.name ?? from.name, options?.icon);\n\t\t\t\tprofile = await this.getProfileToImport({ ...profileTemplate, name: options.name ?? profileTemplate.name }, !!options.transient, options);\n\t\t\t\tif (!profile) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tif (token.isCancellationRequested) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tawait this.applyProfileTemplate(profileTemplate, profile, options, reportProgress, token);\n\t\t\t});\n\t\t\ttry {\n\t\t\t\tawait creationPromise;\n\t\t\t\tif (profile && (options?.resourceTypeFlags?.extensions ?? true)) {\n\t\t\t\t\treportProgress(localize('installing extensions', \"Installing Extensions...\"));\n\t\t\t\t\tawait this.instantiationService.createInstance(ExtensionsResource).copy(from, profile, false);\n\t\t\t\t}\n\t\t\t} catch (error) {\n\t\t\t\tif (profile) {\n\t\t\t\t\tawait this.userDataProfilesService.removeProfile(profile);\n\t\t\t\t\tprofile = undefined;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn profile;\n\n\t\t}, () => creationPromise.cancel()).finally(() => disposables.dispose());\n\t}\n\n\tasync createProfileFromTemplate(profileTemplate: IUserDataProfileTemplate, options: IUserDataProfileCreateOptions, token: CancellationToken): Promise<IUserDataProfile | undefined> {\n\t\tconst disposables = new DisposableStore();\n\t\tlet creationPromise: CancelablePromise<void>;\n\t\tdisposables.add(token.onCancellationRequested(() => creationPromise.cancel()));\n\t\tlet profile: IUserDataProfile | undefined;\n\t\treturn this.progressService.withProgress({\n\t\t\tlocation: ProgressLocation.Notification,\n\t\t\tdelay: 500,\n\t\t\tsticky: true,\n\t\t\tcancellable: true,\n\t\t}, async progress => {\n\t\t\tconst reportProgress = (message: string) => progress.report({ message: localize('create from profile', \"Create Profile: {0}\", message) });\n\t\t\tcreationPromise = createCancelablePromise(async token => {\n\t\t\t\tprofile = await this.getProfileToImport({ ...profileTemplate, name: options.name ?? profileTemplate.name }, !!options.transient, options);\n\t\t\t\tif (!profile) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tif (token.isCancellationRequested) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tawait this.applyProfileTemplate(profileTemplate, profile, options, reportProgress, token);\n\t\t\t});\n\t\t\ttry {\n\t\t\t\tawait creationPromise;\n\t\t\t} catch (error) {\n\t\t\t\tif (profile) {\n\t\t\t\t\tawait this.userDataProfilesService.removeProfile(profile);\n\t\t\t\t\tprofile = undefined;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn profile;\n\t\t}, () => creationPromise.cancel()).finally(() => disposables.dispose());\n\t}\n\n\tprivate async applyProfileTemplate(profileTemplate: IUserDataProfileTemplate, profile: IUserDataProfile, options: IUserDataProfileCreateOptions, reportProgress: (message: string) => void, token: CancellationToken): Promise<void> {\n\t\tif (profileTemplate.settings && (options.resourceTypeFlags?.settings ?? true) && !profile.useDefaultFlags?.settings) {\n\t\t\treportProgress(localize('creating settings', \"Creating Settings...\"));\n\t\t\tawait this.instantiationService.createInstance(SettingsResource).apply(profileTemplate.settings, profile);\n\t\t}\n\t\tif (token.isCancellationRequested) {\n\t\t\treturn;\n\t\t}\n\t\tif (profileTemplate.keybindings && (options.resourceTypeFlags?.keybindings ?? true) && !profile.useDefaultFlags?.keybindings) {\n\t\t\treportProgress(localize('create keybindings', \"Creating Keyboard Shortcuts...\"));\n\t\t\tawait this.instantiationService.createInstance(KeybindingsResource).apply(profileTemplate.keybindings, profile);\n\t\t}\n\t\tif (token.isCancellationRequested) {\n\t\t\treturn;\n\t\t}\n\t\tif (profileTemplate.tasks && (options.resourceTypeFlags?.tasks ?? true) && !profile.useDefaultFlags?.tasks) {\n\t\t\treportProgress(localize('create tasks', \"Creating Tasks...\"));\n\t\t\tawait this.instantiationService.createInstance(TasksResource).apply(profileTemplate.tasks, profile);\n\t\t}\n\t\tif (token.isCancellationRequested) {\n\t\t\treturn;\n\t\t}\n\t\tif (profileTemplate.snippets && (options.resourceTypeFlags?.snippets ?? true) && !profile.useDefaultFlags?.snippets) {\n\t\t\treportProgress(localize('create snippets', \"Creating Snippets...\"));\n\t\t\tawait this.instantiationService.createInstance(SnippetsResource).apply(profileTemplate.snippets, profile);\n\t\t}\n\t\tif (token.isCancellationRequested) {\n\t\t\treturn;\n\t\t}\n\t\tif (profileTemplate.globalState && !profile.useDefaultFlags?.globalState) {\n\t\t\treportProgress(localize('applying global state', \"Applying UI State...\"));\n\t\t\tawait this.instantiationService.createInstance(GlobalStateResource).apply(profileTemplate.globalState, profile);\n\t\t}\n\t\tif (token.isCancellationRequested) {\n\t\t\treturn;\n\t\t}\n\t\tif (profileTemplate.extensions && (options.resourceTypeFlags?.extensions ?? true) && !profile.useDefaultFlags?.extensions) {\n\t\t\treportProgress(localize('installing extensions', \"Installing Extensions...\"));\n\t\t\tawait this.instantiationService.createInstance(ExtensionsResource).apply(profileTemplate.extensions, profile, reportProgress, token);\n\t\t}\n\t}\n\n\tasync exportProfile(profile: IUserDataProfile, exportFlags?: ProfileResourceTypeFlags): Promise<void> {\n\t\tconst disposables = new DisposableStore();\n\t\ttry {\n\t\t\tconst userDataProfilesExportState = disposables.add(this.instantiationService.createInstance(UserDataProfileExportState, profile, exportFlags));\n\t\t\tawait this.doExportProfile(userDataProfilesExportState, ProgressLocation.Notification);\n\t\t} finally {\n\t\t\tdisposables.dispose();\n\t\t}\n\t}\n\n\tasync createTroubleshootProfile(): Promise<void> {\n\t\tconst userDataProfilesExportState = this.instantiationService.createInstance(UserDataProfileExportState, this.userDataProfileService.currentProfile, undefined);\n\t\ttry {\n\t\t\tconst profileTemplate = await userDataProfilesExportState.getProfileTemplate(localize('troubleshoot issue', \"Troubleshoot Issue\"), undefined);\n\t\t\tawait this.progressService.withProgress({\n\t\t\t\tlocation: ProgressLocation.Notification,\n\t\t\t\tdelay: 1000,\n\t\t\t\tsticky: true,\n\t\t\t}, async progress => {\n\t\t\t\tconst reportProgress = (message: string) => progress.report({ message: localize('troubleshoot profile progress', \"Setting up Troubleshoot Profile: {0}\", message) });\n\t\t\t\tconst profile = await this.doCreateProfile(profileTemplate, true, false, { useDefaultFlags: this.userDataProfileService.currentProfile.useDefaultFlags }, reportProgress);\n\t\t\t\tif (profile) {\n\t\t\t\t\treportProgress(localize('progress extensions', \"Applying Extensions...\"));\n\t\t\t\t\tawait this.instantiationService.createInstance(ExtensionsResource).copy(this.userDataProfileService.currentProfile, profile, true);\n\n\t\t\t\t\treportProgress(localize('switching profile', \"Switching Profile...\"));\n\t\t\t\t\tawait this.userDataProfileManagementService.switchProfile(profile);\n\t\t\t\t}\n\t\t\t});\n\t\t} finally {\n\t\t\tuserDataProfilesExportState.dispose();\n\t\t}\n\t}\n\n\tprivate async doExportProfile(userDataProfilesExportState: UserDataProfileExportState, location: ProgressLocation | string): Promise<void> {\n\t\tconst profile = await userDataProfilesExportState.getProfileToExport();\n\t\tif (!profile) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst disposables = new DisposableStore();\n\n\t\ttry {\n\t\t\tawait this.progressService.withProgress({\n\t\t\t\tlocation,\n\t\t\t\ttitle: localize('profiles.exporting', \"{0}: Exporting...\", PROFILES_CATEGORY.value),\n\t\t\t}, async progress => {\n\t\t\t\tconst id = await this.pickProfileContentHandler(profile.name);\n\t\t\t\tif (!id) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tconst profileContentHandler = this.profileContentHandlers.get(id);\n\t\t\t\tif (!profileContentHandler) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tconst saveResult = await profileContentHandler.saveProfile(profile.name.replace('/', '-'), JSON.stringify(profile), CancellationToken.None);\n\t\t\t\tif (!saveResult) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tconst message = localize('export success', \"Profile '{0}' was exported successfully.\", profile.name);\n\t\t\t\tif (profileContentHandler.extensionId) {\n\t\t\t\t\tconst buttons: IPromptButton<void>[] = [];\n\t\t\t\t\tconst link = this.productService.webUrl ? `${this.productService.webUrl}/${PROFILE_URL_AUTHORITY}/${id}/${saveResult.id}` : toUserDataProfileUri(`/${id}/${saveResult.id}`, this.productService).toString();\n\t\t\t\t\tbuttons.push({\n\t\t\t\t\t\tlabel: localize({ key: 'copy', comment: ['&& denotes a mnemonic'] }, \"&&Copy Link\"),\n\t\t\t\t\t\trun: () => this.clipboardService.writeText(link)\n\t\t\t\t\t});\n\t\t\t\t\tif (this.productService.webUrl) {\n\t\t\t\t\t\tbuttons.push({\n\t\t\t\t\t\t\tlabel: localize({ key: 'open', comment: ['&& denotes a mnemonic'] }, \"&&Open Link\"),\n\t\t\t\t\t\t\trun: async () => {\n\t\t\t\t\t\t\t\tawait this.openerService.open(link);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t} else {\n\t\t\t\t\t\tbuttons.push({\n\t\t\t\t\t\t\tlabel: localize({ key: 'open in', comment: ['&& denotes a mnemonic'] }, \"&&Open in {0}\", profileContentHandler.name),\n\t\t\t\t\t\t\trun: async () => {\n\t\t\t\t\t\t\t\tawait this.openerService.open(saveResult.link.toString());\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t\tawait this.dialogService.prompt({\n\t\t\t\t\t\ttype: Severity.Info,\n\t\t\t\t\t\tmessage,\n\t\t\t\t\t\tbuttons,\n\t\t\t\t\t\tcancelButton: localize('close', \"Close\")\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\tawait this.dialogService.info(message);\n\t\t\t\t}\n\t\t\t});\n\t\t} finally {\n\t\t\tdisposables.dispose();\n\t\t}\n\t}\n\n\tasync resolveProfileTemplate(uri: URI, options?: IProfileImportOptions): Promise<IUserDataProfileTemplate | null> {\n\t\tconst profileContent = await this.resolveProfileContent(uri);\n\t\tif (profileContent === null) {\n\t\t\treturn null;\n\t\t}\n\n\t\tlet profileTemplate: Mutable<IUserDataProfileTemplate>;\n\n\t\ttry {\n\t\t\tprofileTemplate = JSON.parse(profileContent);\n\t\t} catch (error) {\n\t\t\tthrow new Error(localize('invalid profile content', \"This profile is not valid.\"));\n\t\t}\n\n\t\tif (!isUserDataProfileTemplate(profileTemplate)) {\n\t\t\tthrow new Error(localize('invalid profile content', \"This profile is not valid.\"));\n\t\t}\n\n\t\tif (options?.name) {\n\t\t\tprofileTemplate.name = options.name;\n\t\t}\n\n\t\tif (options?.icon) {\n\t\t\tprofileTemplate.icon = options.icon;\n\t\t}\n\n\t\tif (options?.resourceTypeFlags?.settings === false) {\n\t\t\tprofileTemplate.settings = undefined;\n\t\t}\n\n\t\tif (options?.resourceTypeFlags?.keybindings === false) {\n\t\t\tprofileTemplate.keybindings = undefined;\n\t\t}\n\n\t\tif (options?.resourceTypeFlags?.snippets === false) {\n\t\t\tprofileTemplate.snippets = undefined;\n\t\t}\n\n\t\tif (options?.resourceTypeFlags?.tasks === false) {\n\t\t\tprofileTemplate.tasks = undefined;\n\t\t}\n\n\t\tif (options?.resourceTypeFlags?.globalState === false) {\n\t\t\tprofileTemplate.globalState = undefined;\n\t\t}\n\n\t\tif (options?.resourceTypeFlags?.extensions === false) {\n\t\t\tprofileTemplate.extensions = undefined;\n\t\t}\n\n\t\treturn profileTemplate;\n\t}\n\n\tprivate async doCreateProfile(profileTemplate: IUserDataProfileTemplate, temporaryProfile: boolean, extensions: boolean, options: IUserDataProfileOptions | undefined, progress: (message: string) => void): Promise<IUserDataProfile | undefined> {\n\t\tconst profile = await this.getProfileToImport(profileTemplate, temporaryProfile, options);\n\t\tif (!profile) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\tif (profileTemplate.settings && !profile.useDefaultFlags?.settings) {\n\t\t\tprogress(localize('progress settings', \"Applying Settings...\"));\n\t\t\tawait this.instantiationService.createInstance(SettingsResource).apply(profileTemplate.settings, profile);\n\t\t}\n\t\tif (profileTemplate.keybindings && !profile.useDefaultFlags?.keybindings) {\n\t\t\tprogress(localize('progress keybindings', \"Applying Keyboard Shortcuts...\"));\n\t\t\tawait this.instantiationService.createInstance(KeybindingsResource).apply(profileTemplate.keybindings, profile);\n\t\t}\n\t\tif (profileTemplate.tasks && !profile.useDefaultFlags?.tasks) {\n\t\t\tprogress(localize('progress tasks', \"Applying Tasks...\"));\n\t\t\tawait this.instantiationService.createInstance(TasksResource).apply(profileTemplate.tasks, profile);\n\t\t}\n\t\tif (profileTemplate.snippets && !profile.useDefaultFlags?.snippets) {\n\t\t\tprogress(localize('progress snippets', \"Applying Snippets...\"));\n\t\t\tawait this.instantiationService.createInstance(SnippetsResource).apply(profileTemplate.snippets, profile);\n\t\t}\n\t\tif (profileTemplate.globalState && !profile.useDefaultFlags?.globalState) {\n\t\t\tprogress(localize('progress global state', \"Applying State...\"));\n\t\t\tawait this.instantiationService.createInstance(GlobalStateResource).apply(profileTemplate.globalState, profile);\n\t\t}\n\t\tif (profileTemplate.extensions && extensions && !profile.useDefaultFlags?.extensions) {\n\t\t\tprogress(localize('progress extensions', \"Applying Extensions...\"));\n\t\t\tawait this.instantiationService.createInstance(ExtensionsResource).apply(profileTemplate.extensions, profile);\n\t\t}\n\n\t\treturn profile;\n\t}\n\n\tprivate async resolveProfileContent(resource: URI): Promise<string | null> {\n\t\tif (await this.fileUserDataProfileContentHandler.canHandle(resource)) {\n\t\t\treturn this.fileUserDataProfileContentHandler.readProfile(resource, CancellationToken.None);\n\t\t}\n\n\t\tif (isProfileURL(resource)) {\n\t\t\tlet handlerId: string, idOrUri: string | URI;\n\t\t\tif (resource.authority === PROFILE_URL_AUTHORITY) {\n\t\t\t\tidOrUri = this.uriIdentityService.extUri.basename(resource);\n\t\t\t\thandlerId = this.uriIdentityService.extUri.basename(this.uriIdentityService.extUri.dirname(resource));\n\t\t\t} else {\n\t\t\t\thandlerId = resource.authority.substring(PROFILE_URL_AUTHORITY_PREFIX.length);\n\t\t\t\tidOrUri = URI.parse(resource.path.substring(1));\n\t\t\t}\n\t\t\tawait this.extensionService.activateByEvent(`onProfile:${handlerId}`);\n\t\t\tconst profileContentHandler = this.profileContentHandlers.get(handlerId);\n\t\t\tif (profileContentHandler) {\n\t\t\t\treturn profileContentHandler.readProfile(idOrUri, CancellationToken.None);\n\t\t\t}\n\t\t}\n\n\t\tawait this.extensionService.activateByEvent('onProfile');\n\t\tfor (const profileContentHandler of this.profileContentHandlers.values()) {\n\t\t\tconst content = await profileContentHandler.readProfile(resource, CancellationToken.None);\n\t\t\tif (content !== null) {\n\t\t\t\treturn content;\n\t\t\t}\n\t\t}\n\n\t\tconst context = await this.requestService.request({ type: 'GET', url: resource.toString(true) }, CancellationToken.None);\n\t\tif (context.res.statusCode === 200) {\n\t\t\treturn await asText(context);\n\t\t} else {\n\t\t\tconst message = await asText(context);\n\t\t\tthrow new Error(`Failed to get profile from URL: ${resource.toString()}. Status code: ${context.res.statusCode}. Message: ${message}`);\n\t\t}\n\t}\n\n\tprivate async pickProfileContentHandler(name: string): Promise<string | undefined> {\n\t\tawait this.extensionService.activateByEvent('onProfile');\n\t\tif (this.profileContentHandlers.size === 1) {\n\t\t\treturn this.profileContentHandlers.keys().next().value;\n\t\t}\n\t\tconst options: QuickPickItem[] = [];\n\t\tfor (const [id, profileContentHandler] of this.profileContentHandlers) {\n\t\t\toptions.push({ id, label: profileContentHandler.name, description: profileContentHandler.description });\n\t\t}\n\t\tconst result = await this.quickInputService.pick(options.reverse(),\n\t\t\t{\n\t\t\t\ttitle: localize('select profile content handler', \"Export '{0}' profile as...\", name),\n\t\t\t\thideInput: true\n\t\t\t});\n\t\treturn result?.id;\n\t}\n\n\tprivate async getProfileToImport(profileTemplate: IUserDataProfileTemplate, temp: boolean, options: IUserDataProfileOptions | undefined): Promise<IUserDataProfile | undefined> {\n\t\tconst profileName = profileTemplate.name;\n\t\tconst profile = this.userDataProfilesService.profiles.find(p => p.name === profileName);\n\t\tif (profile) {\n\t\t\tif (temp) {\n\t\t\t\treturn this.userDataProfilesService.createNamedProfile(`${profileName} ${this.getProfileNameIndex(profileName)}`, { ...options, transient: temp });\n\t\t\t}\n\t\t\tconst { confirmed } = await this.dialogService.confirm({\n\t\t\t\ttype: Severity.Info,\n\t\t\t\tmessage: localize('profile already exists', \"Profile with name '{0}' already exists. Do you want to replace its contents?\", profileName),\n\t\t\t\tprimaryButton: localize({ key: 'overwrite', comment: ['&& denotes a mnemonic'] }, \"&&Replace\")\n\t\t\t});\n\t\t\tif (!confirmed) {\n\t\t\t\treturn undefined;\n\t\t\t}\n\t\t\treturn profile.isDefault ? profile : this.userDataProfilesService.updateProfile(profile, options);\n\t\t} else {\n\t\t\treturn this.userDataProfilesService.createNamedProfile(profileName, { ...options, transient: temp });\n\t\t}\n\t}\n\n\tprivate getProfileNameIndex(name: string): number {\n\t\tconst nameRegEx = new RegExp(`${escapeRegExpCharacters(name)}\\\\s(\\\\d+)`);\n\t\tlet nameIndex = 0;\n\t\tfor (const profile of this.userDataProfilesService.profiles) {\n\t\t\tconst matches = nameRegEx.exec(profile.name);\n\t\t\tconst index = matches ? parseInt(matches[1]) : 0;\n\t\t\tnameIndex = index > nameIndex ? index : nameIndex;\n\t\t}\n\t\treturn nameIndex + 1;\n\t}\n\n}\n\nclass FileUserDataProfileContentHandler implements IUserDataProfileContentHandler {\n\n\treadonly name = localize('local', \"Local\");\n\treadonly description = localize('file', \"file\");\n\n\tconstructor(\n\t\t@IFileDialogService private readonly fileDialogService: IFileDialogService,\n\t\t@IUriIdentityService private readonly uriIdentityService: IUriIdentityService,\n\t\t@IFileService private readonly fileService: IFileService,\n\t\t@IProductService private readonly productService: IProductService,\n\t\t@ITextFileService private readonly textFileService: ITextFileService,\n\t) { }\n\n\tasync saveProfile(name: string, content: string, token: CancellationToken): Promise<ISaveProfileResult | null> {\n\t\tconst link = await this.fileDialogService.showSaveDialog({\n\t\t\ttitle: localize('export profile dialog', \"Save Profile\"),\n\t\t\tfilters: PROFILE_FILTER,\n\t\t\tdefaultUri: this.uriIdentityService.extUri.joinPath(await this.fileDialogService.defaultFilePath(), `${name}.${PROFILE_EXTENSION}`),\n\t\t});\n\t\tif (!link) {\n\t\t\treturn null;\n\t\t}\n\t\tawait this.textFileService.create([{ resource: link, value: content, options: { overwrite: true } }]);\n\t\treturn { link, id: link.toString() };\n\t}\n\n\tasync canHandle(uri: URI): Promise<boolean> {\n\t\treturn uri.scheme !== Schemas.http && uri.scheme !== Schemas.https && uri.scheme !== this.productService.urlProtocol && await this.fileService.canHandleResource(uri);\n\t}\n\n\tasync readProfile(uri: URI, token: CancellationToken): Promise<string | null> {\n\t\tif (await this.canHandle(uri)) {\n\t\t\treturn (await this.fileService.readFile(uri, undefined, token)).value.toString();\n\t\t}\n\t\treturn null;\n\t}\n\n\tasync selectProfile(): Promise<URI | null> {\n\t\tconst profileLocation = await this.fileDialogService.showOpenDialog({\n\t\t\tcanSelectFolders: false,\n\t\t\tcanSelectFiles: true,\n\t\t\tcanSelectMany: false,\n\t\t\tfilters: PROFILE_FILTER,\n\t\t\ttitle: localize('select profile', \"Select Profile\"),\n\t\t});\n\t\treturn profileLocation ? profileLocation[0] : null;\n\t}\n\n}\n\nconst USER_DATA_PROFILE_EXPORT_SCHEME = 'userdataprofileexport';\nconst USER_DATA_PROFILE_EXPORT_PREVIEW_SCHEME = 'userdataprofileexportpreview';\n\nabstract class UserDataProfileImportExportState extends Disposable implements ITreeViewDataProvider {\n\n\tprivate readonly _onDidChangeRoots = this._register(new Emitter<void>());\n\treadonly onDidChangeRoots = this._onDidChangeRoots.event;\n\n\tconstructor(\n\t\t@IQuickInputService protected readonly quickInputService: IQuickInputService,\n\t) {\n\t\tsuper();\n\t}\n\n\tasync getChildren(element?: ITreeItem): Promise<ITreeItem[] | undefined> {\n\t\tif (element) {\n\t\t\tconst children = await (<IProfileResourceTreeItem>element).getChildren();\n\t\t\tif (children) {\n\t\t\t\tfor (const child of children) {\n\t\t\t\t\tif (child.parent.checkbox && child.checkbox) {\n\t\t\t\t\t\tchild.checkbox.isChecked = child.parent.checkbox.isChecked && child.checkbox.isChecked;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn children;\n\t\t} else {\n\t\t\tthis.rootsPromise = undefined;\n\t\t\tthis._onDidChangeRoots.fire();\n\t\t\treturn this.getRoots();\n\t\t}\n\t}\n\n\tprivate roots: IProfileResourceTreeItem[] = [];\n\tprivate rootsPromise: Promise<IProfileResourceTreeItem[]> | undefined;\n\tgetRoots(): Promise<IProfileResourceTreeItem[]> {\n\t\tif (!this.rootsPromise) {\n\t\t\tthis.rootsPromise = (async () => {\n\t\t\t\tthis.roots = await this.fetchRoots();\n\t\t\t\tfor (const root of this.roots) {\n\t\t\t\t\troot.checkbox = {\n\t\t\t\t\t\tisChecked: !root.isFromDefaultProfile(),\n\t\t\t\t\t\ttooltip: localize('select', \"Select {0}\", root.label.label),\n\t\t\t\t\t\taccessibilityInformation: {\n\t\t\t\t\t\t\tlabel: localize('select', \"Select {0}\", root.label.label),\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t\tif (root.isFromDefaultProfile()) {\n\t\t\t\t\t\troot.description = localize('from default', \"From Default Profile\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn this.roots;\n\t\t\t})();\n\t\t}\n\t\treturn this.rootsPromise;\n\t}\n\n\tisEnabled(resourceType?: ProfileResourceType): boolean {\n\t\tif (resourceType !== undefined) {\n\t\t\treturn this.roots.some(root => root.type === resourceType && this.isSelected(root));\n\t\t}\n\t\treturn this.roots.some(root => this.isSelected(root));\n\t}\n\n\tasync getProfileTemplate(name: string, icon: string | undefined): Promise<IUserDataProfileTemplate> {\n\t\tconst roots = await this.getRoots();\n\t\tlet settings: string | undefined;\n\t\tlet keybindings: string | undefined;\n\t\tlet tasks: string | undefined;\n\t\tlet snippets: string | undefined;\n\t\tlet extensions: string | undefined;\n\t\tlet globalState: string | undefined;\n\t\tfor (const root of roots) {\n\t\t\tif (!this.isSelected(root)) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (root instanceof SettingsResourceTreeItem) {\n\t\t\t\tsettings = await root.getContent();\n\t\t\t} else if (root instanceof KeybindingsResourceTreeItem) {\n\t\t\t\tkeybindings = await root.getContent();\n\t\t\t} else if (root instanceof TasksResourceTreeItem) {\n\t\t\t\ttasks = await root.getContent();\n\t\t\t} else if (root instanceof SnippetsResourceTreeItem) {\n\t\t\t\tsnippets = await root.getContent();\n\t\t\t} else if (root instanceof ExtensionsResourceTreeItem) {\n\t\t\t\textensions = await root.getContent();\n\t\t\t} else if (root instanceof GlobalStateResourceTreeItem) {\n\t\t\t\tglobalState = await root.getContent();\n\t\t\t}\n\t\t}\n\n\t\treturn {\n\t\t\tname,\n\t\t\ticon,\n\t\t\tsettings,\n\t\t\tkeybindings,\n\t\t\ttasks,\n\t\t\tsnippets,\n\t\t\textensions,\n\t\t\tglobalState\n\t\t};\n\t}\n\n\tprivate isSelected(treeItem: IProfileResourceTreeItem): boolean {\n\t\tif (treeItem.checkbox) {\n\t\t\treturn treeItem.checkbox.isChecked || !!treeItem.children?.some(child => child.checkbox?.isChecked);\n\t\t}\n\t\treturn true;\n\t}\n\n\tprotected abstract fetchRoots(): Promise<IProfileResourceTreeItem[]>;\n}\n\nclass UserDataProfileExportState extends UserDataProfileImportExportState {\n\n\tprivate readonly disposables = this._register(new DisposableStore());\n\n\tconstructor(\n\t\treadonly profile: IUserDataProfile,\n\t\tprivate readonly exportFlags: ProfileResourceTypeFlags | undefined,\n\t\t@IQuickInputService quickInputService: IQuickInputService,\n\t\t@IFileService private readonly fileService: IFileService,\n\t\t@IInstantiationService private readonly instantiationService: IInstantiationService\n\t) {\n\t\tsuper(quickInputService);\n\t}\n\n\tprotected async fetchRoots(): Promise<IProfileResourceTreeItem[]> {\n\t\tthis.disposables.clear();\n\t\tthis.disposables.add(this.fileService.registerProvider(USER_DATA_PROFILE_EXPORT_SCHEME, this._register(new InMemoryFileSystemProvider())));\n\t\tconst previewFileSystemProvider = this._register(new InMemoryFileSystemProvider());\n\t\tthis.disposables.add(this.fileService.registerProvider(USER_DATA_PROFILE_EXPORT_PREVIEW_SCHEME, previewFileSystemProvider));\n\t\tconst roots: IProfileResourceTreeItem[] = [];\n\t\tconst exportPreviewProfle = this.createExportPreviewProfile(this.profile);\n\n\t\tif (this.exportFlags?.settings ?? true) {\n\t\t\tconst settingsResource = this.instantiationService.createInstance(SettingsResource);\n\t\t\tconst settingsContent = await settingsResource.getContent(this.profile);\n\t\t\tawait settingsResource.apply(settingsContent, exportPreviewProfle);\n\t\t\tconst settingsResourceTreeItem = this.instantiationService.createInstance(SettingsResourceTreeItem, exportPreviewProfle);\n\t\t\tif (await settingsResourceTreeItem.hasContent()) {\n\t\t\t\troots.push(settingsResourceTreeItem);\n\t\t\t}\n\t\t}\n\n\t\tif (this.exportFlags?.keybindings ?? true) {\n\t\t\tconst keybindingsResource = this.instantiationService.createInstance(KeybindingsResource);\n\t\t\tconst keybindingsContent = await keybindingsResource.getContent(this.profile);\n\t\t\tawait keybindingsResource.apply(keybindingsContent, exportPreviewProfle);\n\t\t\tconst keybindingsResourceTreeItem = this.instantiationService.createInstance(KeybindingsResourceTreeItem, exportPreviewProfle);\n\t\t\tif (await keybindingsResourceTreeItem.hasContent()) {\n\t\t\t\troots.push(keybindingsResourceTreeItem);\n\t\t\t}\n\t\t}\n\n\t\tif (this.exportFlags?.snippets ?? true) {\n\t\t\tconst snippetsResource = this.instantiationService.createInstance(SnippetsResource);\n\t\t\tconst snippetsContent = await snippetsResource.getContent(this.profile);\n\t\t\tawait snippetsResource.apply(snippetsContent, exportPreviewProfle);\n\t\t\tconst snippetsResourceTreeItem = this.instantiationService.createInstance(SnippetsResourceTreeItem, exportPreviewProfle);\n\t\t\tif (await snippetsResourceTreeItem.hasContent()) {\n\t\t\t\troots.push(snippetsResourceTreeItem);\n\t\t\t}\n\t\t}\n\n\t\tif (this.exportFlags?.tasks ?? true) {\n\t\t\tconst tasksResource = this.instantiationService.createInstance(TasksResource);\n\t\t\tconst tasksContent = await tasksResource.getContent(this.profile);\n\t\t\tawait tasksResource.apply(tasksContent, exportPreviewProfle);\n\t\t\tconst tasksResourceTreeItem = this.instantiationService.createInstance(TasksResourceTreeItem, exportPreviewProfle);\n\t\t\tif (await tasksResourceTreeItem.hasContent()) {\n\t\t\t\troots.push(tasksResourceTreeItem);\n\t\t\t}\n\t\t}\n\n\t\tif (this.exportFlags?.globalState ?? true) {\n\t\t\tconst globalStateResource = joinPath(exportPreviewProfle.globalStorageHome, 'globalState.json').with({ scheme: USER_DATA_PROFILE_EXPORT_PREVIEW_SCHEME });\n\t\t\tconst globalStateResourceTreeItem = this.instantiationService.createInstance(GlobalStateResourceExportTreeItem, exportPreviewProfle, globalStateResource);\n\t\t\tconst content = await globalStateResourceTreeItem.getContent();\n\t\t\tif (content) {\n\t\t\t\tawait this.fileService.writeFile(globalStateResource, VSBuffer.fromString(JSON.stringify(JSON.parse(content), null, '\\t')));\n\t\t\t\troots.push(globalStateResourceTreeItem);\n\t\t\t}\n\t\t}\n\n\t\tif (this.exportFlags?.extensions ?? true) {\n\t\t\tconst extensionsResourceTreeItem = this.instantiationService.createInstance(ExtensionsResourceExportTreeItem, exportPreviewProfle);\n\t\t\tif (await extensionsResourceTreeItem.hasContent()) {\n\t\t\t\troots.push(extensionsResourceTreeItem);\n\t\t\t}\n\t\t}\n\n\t\tpreviewFileSystemProvider.setReadOnly(true);\n\n\t\treturn roots;\n\t}\n\n\tprivate createExportPreviewProfile(profile: IUserDataProfile): IUserDataProfile {\n\t\treturn {\n\t\t\tid: profile.id,\n\t\t\tname: profile.name,\n\t\t\tlocation: profile.location,\n\t\t\tisDefault: profile.isDefault,\n\t\t\tshortName: profile.shortName,\n\t\t\ticon: profile.icon,\n\t\t\tglobalStorageHome: profile.globalStorageHome,\n\t\t\tsettingsResource: profile.settingsResource.with({ scheme: USER_DATA_PROFILE_EXPORT_SCHEME }),\n\t\t\tkeybindingsResource: profile.keybindingsResource.with({ scheme: USER_DATA_PROFILE_EXPORT_SCHEME }),\n\t\t\ttasksResource: profile.tasksResource.with({ scheme: USER_DATA_PROFILE_EXPORT_SCHEME }),\n\t\t\tsnippetsHome: profile.snippetsHome.with({ scheme: USER_DATA_PROFILE_EXPORT_SCHEME }),\n\t\t\textensionsResource: profile.extensionsResource,\n\t\t\tcacheHome: profile.cacheHome,\n\t\t\tuseDefaultFlags: profile.useDefaultFlags,\n\t\t\tisTransient: profile.isTransient\n\t\t};\n\t}\n\n\tasync getProfileToExport(): Promise<IUserDataProfileTemplate | null> {\n\t\tlet name: string | undefined = this.profile.name;\n\t\tif (this.profile.isDefault) {\n\t\t\tname = await this.quickInputService.input({\n\t\t\t\tplaceHolder: localize('export profile name', \"Name the profile\"),\n\t\t\t\ttitle: localize('export profile title', \"Export Profile\"),\n\t\t\t\tasync validateInput(input) {\n\t\t\t\t\tif (!input.trim()) {\n\t\t\t\t\t\treturn localize('profile name required', \"Profile name must be provided.\");\n\t\t\t\t\t}\n\t\t\t\t\treturn undefined;\n\t\t\t\t},\n\t\t\t});\n\t\t\tif (!name) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t}\n\n\t\treturn super.getProfileTemplate(name, this.profile.icon);\n\t}\n\n}\n\nregisterSingleton(IUserDataProfileImportExportService, UserDataProfileImportExportService, InstantiationType.Delayed);\n"],
  "mappings": "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",
  "names": ["token"]
}
