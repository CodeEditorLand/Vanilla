{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/userDataProfile/browser/globalStateResource.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IStringDictionary } from '../../../../base/common/collections.js';\nimport { URI } from '../../../../base/common/uri.js';\nimport { localize } from '../../../../nls.js';\nimport { IInstantiationService } from '../../../../platform/instantiation/common/instantiation.js';\nimport { ILogService } from '../../../../platform/log/common/log.js';\nimport { IStorageEntry, IStorageService, StorageScope, StorageTarget } from '../../../../platform/storage/common/storage.js';\nimport { IUriIdentityService } from '../../../../platform/uriIdentity/common/uriIdentity.js';\nimport { IUserDataProfile, ProfileResourceType } from '../../../../platform/userDataProfile/common/userDataProfile.js';\nimport { IUserDataProfileStorageService } from '../../../../platform/userDataProfile/common/userDataProfileStorageService.js';\nimport { API_OPEN_EDITOR_COMMAND_ID } from '../../../browser/parts/editor/editorCommands.js';\nimport { ITreeItemCheckboxState, TreeItemCollapsibleState } from '../../../common/views.js';\nimport { IProfileResource, IProfileResourceChildTreeItem, IProfileResourceInitializer, IProfileResourceTreeItem } from '../common/userDataProfile.js';\n\ninterface IGlobalState {\n\tstorage: IStringDictionary<string>;\n}\n\nexport class GlobalStateResourceInitializer implements IProfileResourceInitializer {\n\n\tconstructor(@IStorageService private readonly storageService: IStorageService) {\n\t}\n\n\tasync initialize(content: string): Promise<void> {\n\t\tconst globalState: IGlobalState = JSON.parse(content);\n\t\tconst storageKeys = Object.keys(globalState.storage);\n\t\tif (storageKeys.length) {\n\t\t\tconst storageEntries: Array<IStorageEntry> = [];\n\t\t\tfor (const key of storageKeys) {\n\t\t\t\tstorageEntries.push({ key, value: globalState.storage[key], scope: StorageScope.PROFILE, target: StorageTarget.USER });\n\t\t\t}\n\t\t\tthis.storageService.storeAll(storageEntries, true);\n\t\t}\n\t}\n}\n\nexport class GlobalStateResource implements IProfileResource {\n\n\tconstructor(\n\t\t@IStorageService private readonly storageService: IStorageService,\n\t\t@IUserDataProfileStorageService private readonly userDataProfileStorageService: IUserDataProfileStorageService,\n\t\t@ILogService private readonly logService: ILogService,\n\t) {\n\t}\n\n\tasync getContent(profile: IUserDataProfile): Promise<string> {\n\t\tconst globalState = await this.getGlobalState(profile);\n\t\treturn JSON.stringify(globalState);\n\t}\n\n\tasync apply(content: string, profile: IUserDataProfile): Promise<void> {\n\t\tconst globalState: IGlobalState = JSON.parse(content);\n\t\tawait this.writeGlobalState(globalState, profile);\n\t}\n\n\tasync getGlobalState(profile: IUserDataProfile): Promise<IGlobalState> {\n\t\tconst storage: IStringDictionary<string> = {};\n\t\tconst storageData = await this.userDataProfileStorageService.readStorageData(profile);\n\t\tfor (const [key, value] of storageData) {\n\t\t\tif (value.value !== undefined && value.target === StorageTarget.USER) {\n\t\t\t\tstorage[key] = value.value;\n\t\t\t}\n\t\t}\n\t\treturn { storage };\n\t}\n\n\tprivate async writeGlobalState(globalState: IGlobalState, profile: IUserDataProfile): Promise<void> {\n\t\tconst storageKeys = Object.keys(globalState.storage);\n\t\tif (storageKeys.length) {\n\t\t\tconst updatedStorage = new Map<string, string | undefined>();\n\t\t\tconst nonProfileKeys = [\n\t\t\t\t// Do not include application scope user target keys because they also include default profile user target keys\n\t\t\t\t...this.storageService.keys(StorageScope.APPLICATION, StorageTarget.MACHINE),\n\t\t\t\t...this.storageService.keys(StorageScope.WORKSPACE, StorageTarget.USER),\n\t\t\t\t...this.storageService.keys(StorageScope.WORKSPACE, StorageTarget.MACHINE),\n\t\t\t];\n\t\t\tfor (const key of storageKeys) {\n\t\t\t\tif (nonProfileKeys.includes(key)) {\n\t\t\t\t\tthis.logService.info(`Importing Profile (${profile.name}): Ignoring global state key '${key}' because it is not a profile key.`);\n\t\t\t\t} else {\n\t\t\t\t\tupdatedStorage.set(key, globalState.storage[key]);\n\t\t\t\t}\n\t\t\t}\n\t\t\tawait this.userDataProfileStorageService.updateStorageData(profile, updatedStorage, StorageTarget.USER);\n\t\t}\n\t}\n}\n\nexport abstract class GlobalStateResourceTreeItem implements IProfileResourceTreeItem {\n\n\treadonly type = ProfileResourceType.GlobalState;\n\treadonly handle = ProfileResourceType.GlobalState;\n\treadonly label = { label: localize('globalState', \"UI State\") };\n\treadonly collapsibleState = TreeItemCollapsibleState.Collapsed;\n\tcheckbox: ITreeItemCheckboxState | undefined;\n\n\tconstructor(\n\t\tprivate readonly resource: URI,\n\t\tprivate readonly uriIdentityService: IUriIdentityService\n\t) { }\n\n\tasync getChildren(): Promise<IProfileResourceChildTreeItem[]> {\n\t\treturn [{\n\t\t\thandle: this.resource.toString(),\n\t\t\tresourceUri: this.resource,\n\t\t\tcollapsibleState: TreeItemCollapsibleState.None,\n\t\t\taccessibilityInformation: {\n\t\t\t\tlabel: this.uriIdentityService.extUri.basename(this.resource)\n\t\t\t},\n\t\t\tparent: this,\n\t\t\tcommand: {\n\t\t\t\tid: API_OPEN_EDITOR_COMMAND_ID,\n\t\t\t\ttitle: '',\n\t\t\t\targuments: [this.resource, undefined, undefined]\n\t\t\t}\n\t\t}];\n\t}\n\n\tabstract getContent(): Promise<string>;\n\tabstract isFromDefaultProfile(): boolean;\n}\n\nexport class GlobalStateResourceExportTreeItem extends GlobalStateResourceTreeItem {\n\n\tconstructor(\n\t\tprivate readonly profile: IUserDataProfile,\n\t\tresource: URI,\n\t\t@IUriIdentityService uriIdentityService: IUriIdentityService,\n\t\t@IInstantiationService private readonly instantiationService: IInstantiationService\n\t) {\n\t\tsuper(resource, uriIdentityService);\n\t}\n\n\tasync hasContent(): Promise<boolean> {\n\t\tconst globalState = await this.instantiationService.createInstance(GlobalStateResource).getGlobalState(this.profile);\n\t\treturn Object.keys(globalState.storage).length > 0;\n\t}\n\n\tasync getContent(): Promise<string> {\n\t\treturn this.instantiationService.createInstance(GlobalStateResource).getContent(this.profile);\n\t}\n\n\tisFromDefaultProfile(): boolean {\n\t\treturn !this.profile.isDefault && !!this.profile.useDefaultFlags?.globalState;\n\t}\n\n}\n\nexport class GlobalStateResourceImportTreeItem extends GlobalStateResourceTreeItem {\n\n\tconstructor(\n\t\tprivate readonly content: string,\n\t\tresource: URI,\n\t\t@IUriIdentityService uriIdentityService: IUriIdentityService,\n\t) {\n\t\tsuper(resource, uriIdentityService);\n\t}\n\n\tasync getContent(): Promise<string> {\n\t\treturn this.content;\n\t}\n\n\tisFromDefaultProfile(): boolean {\n\t\treturn false;\n\t}\n\n}\n"],
  "mappings": "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",
  "names": []
}
