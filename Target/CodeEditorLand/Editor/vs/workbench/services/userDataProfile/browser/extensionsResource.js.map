{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/userDataProfile/browser/extensionsResource.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CancellationToken } from '../../../../base/common/cancellation.js';\nimport { Codicon } from '../../../../base/common/codicons.js';\nimport { DisposableStore } from '../../../../base/common/lifecycle.js';\nimport { localize } from '../../../../nls.js';\nimport { GlobalExtensionEnablementService } from '../../../../platform/extensionManagement/common/extensionEnablementService.js';\nimport { EXTENSION_INSTALL_SKIP_WALKTHROUGH_CONTEXT, IExtensionGalleryService, IExtensionIdentifier, IExtensionManagementService, IGlobalExtensionEnablementService, ILocalExtension, InstallExtensionInfo } from '../../../../platform/extensionManagement/common/extensionManagement.js';\nimport { areSameExtensions } from '../../../../platform/extensionManagement/common/extensionManagementUtil.js';\nimport { ExtensionType } from '../../../../platform/extensions/common/extensions.js';\nimport { IInstantiationService } from '../../../../platform/instantiation/common/instantiation.js';\nimport { ServiceCollection } from '../../../../platform/instantiation/common/serviceCollection.js';\nimport { ILogService } from '../../../../platform/log/common/log.js';\nimport { IStorageService } from '../../../../platform/storage/common/storage.js';\nimport { IUserDataProfile, ProfileResourceType } from '../../../../platform/userDataProfile/common/userDataProfile.js';\nimport { IUserDataProfileStorageService } from '../../../../platform/userDataProfile/common/userDataProfileStorageService.js';\nimport { ITreeItemCheckboxState, TreeItemCollapsibleState } from '../../../common/views.js';\nimport { IProfileResource, IProfileResourceChildTreeItem, IProfileResourceInitializer, IProfileResourceTreeItem, IUserDataProfileService } from '../common/userDataProfile.js';\n\ninterface IProfileExtension {\n\tidentifier: IExtensionIdentifier;\n\tdisplayName?: string;\n\tpreRelease?: boolean;\n\tdisabled?: boolean;\n\tversion?: string;\n}\n\nexport class ExtensionsResourceInitializer implements IProfileResourceInitializer {\n\n\tconstructor(\n\t\t@IUserDataProfileService private readonly userDataProfileService: IUserDataProfileService,\n\t\t@IExtensionManagementService private readonly extensionManagementService: IExtensionManagementService,\n\t\t@IExtensionGalleryService private readonly extensionGalleryService: IExtensionGalleryService,\n\t\t@IGlobalExtensionEnablementService private readonly extensionEnablementService: IGlobalExtensionEnablementService,\n\t\t@ILogService private readonly logService: ILogService,\n\t) {\n\t}\n\n\tasync initialize(content: string): Promise<void> {\n\t\tconst profileExtensions: IProfileExtension[] = JSON.parse(content);\n\t\tconst installedExtensions = await this.extensionManagementService.getInstalled(undefined, this.userDataProfileService.currentProfile.extensionsResource);\n\t\tconst extensionsToEnableOrDisable: { extension: IExtensionIdentifier; enable: boolean }[] = [];\n\t\tconst extensionsToInstall: IProfileExtension[] = [];\n\t\tfor (const e of profileExtensions) {\n\t\t\tconst isDisabled = this.extensionEnablementService.getDisabledExtensions().some(disabledExtension => areSameExtensions(disabledExtension, e.identifier));\n\t\t\tconst installedExtension = installedExtensions.find(installed => areSameExtensions(installed.identifier, e.identifier));\n\t\t\tif (!installedExtension || (!installedExtension.isBuiltin && installedExtension.preRelease !== e.preRelease)) {\n\t\t\t\textensionsToInstall.push(e);\n\t\t\t}\n\t\t\tif (isDisabled !== !!e.disabled) {\n\t\t\t\textensionsToEnableOrDisable.push({ extension: e.identifier, enable: !e.disabled });\n\t\t\t}\n\t\t}\n\t\tconst extensionsToUninstall: ILocalExtension[] = installedExtensions.filter(extension => !extension.isBuiltin && !profileExtensions.some(({ identifier }) => areSameExtensions(identifier, extension.identifier)));\n\t\tfor (const { extension, enable } of extensionsToEnableOrDisable) {\n\t\t\tif (enable) {\n\t\t\t\tthis.logService.trace(`Initializing Profile: Enabling extension...`, extension.id);\n\t\t\t\tawait this.extensionEnablementService.enableExtension(extension);\n\t\t\t\tthis.logService.info(`Initializing Profile: Enabled extension...`, extension.id);\n\t\t\t} else {\n\t\t\t\tthis.logService.trace(`Initializing Profile: Disabling extension...`, extension.id);\n\t\t\t\tawait this.extensionEnablementService.disableExtension(extension);\n\t\t\t\tthis.logService.info(`Initializing Profile: Disabled extension...`, extension.id);\n\t\t\t}\n\t\t}\n\t\tif (extensionsToInstall.length) {\n\t\t\tconst galleryExtensions = await this.extensionGalleryService.getExtensions(extensionsToInstall.map(e => ({ ...e.identifier, version: e.version, hasPreRelease: e.version ? undefined : e.preRelease })), CancellationToken.None);\n\t\t\tawait Promise.all(extensionsToInstall.map(async e => {\n\t\t\t\tconst extension = galleryExtensions.find(galleryExtension => areSameExtensions(galleryExtension.identifier, e.identifier));\n\t\t\t\tif (!extension) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tif (await this.extensionManagementService.canInstall(extension)) {\n\t\t\t\t\tthis.logService.trace(`Initializing Profile: Installing extension...`, extension.identifier.id, extension.version);\n\t\t\t\t\tawait this.extensionManagementService.installFromGallery(extension, {\n\t\t\t\t\t\tisMachineScoped: false,/* set isMachineScoped value to prevent install and sync dialog in web */\n\t\t\t\t\t\tdonotIncludePackAndDependencies: true,\n\t\t\t\t\t\tinstallGivenVersion: !!e.version,\n\t\t\t\t\t\tinstallPreReleaseVersion: e.preRelease,\n\t\t\t\t\t\tprofileLocation: this.userDataProfileService.currentProfile.extensionsResource,\n\t\t\t\t\t\tcontext: { [EXTENSION_INSTALL_SKIP_WALKTHROUGH_CONTEXT]: true }\n\t\t\t\t\t});\n\t\t\t\t\tthis.logService.info(`Initializing Profile: Installed extension...`, extension.identifier.id, extension.version);\n\t\t\t\t} else {\n\t\t\t\t\tthis.logService.info(`Initializing Profile: Skipped installing extension because it cannot be installed.`, extension.identifier.id);\n\t\t\t\t}\n\t\t\t}));\n\t\t}\n\t\tif (extensionsToUninstall.length) {\n\t\t\tawait Promise.all(extensionsToUninstall.map(e => this.extensionManagementService.uninstall(e)));\n\t\t}\n\t}\n}\n\nexport class ExtensionsResource implements IProfileResource {\n\n\tconstructor(\n\t\t@IExtensionManagementService private readonly extensionManagementService: IExtensionManagementService,\n\t\t@IExtensionGalleryService private readonly extensionGalleryService: IExtensionGalleryService,\n\t\t@IUserDataProfileStorageService private readonly userDataProfileStorageService: IUserDataProfileStorageService,\n\t\t@IInstantiationService private readonly instantiationService: IInstantiationService,\n\t\t@ILogService private readonly logService: ILogService,\n\t) {\n\t}\n\n\tasync getContent(profile: IUserDataProfile, exclude?: string[]): Promise<string> {\n\t\tconst extensions = await this.getLocalExtensions(profile);\n\t\treturn this.toContent(extensions, exclude);\n\t}\n\n\ttoContent(extensions: IProfileExtension[], exclude?: string[]): string {\n\t\treturn JSON.stringify(exclude?.length ? extensions.filter(e => !exclude.includes(e.identifier.id.toLowerCase())) : extensions);\n\t}\n\n\tasync apply(content: string, profile: IUserDataProfile, progress?: (message: string) => void, token?: CancellationToken): Promise<void> {\n\t\treturn this.withProfileScopedServices(profile, async (extensionEnablementService) => {\n\t\t\tconst profileExtensions: IProfileExtension[] = await this.getProfileExtensions(content);\n\t\t\tconst installedExtensions = await this.extensionManagementService.getInstalled(undefined, profile.extensionsResource);\n\t\t\tconst extensionsToEnableOrDisable: { extension: IExtensionIdentifier; enable: boolean }[] = [];\n\t\t\tconst extensionsToInstall: IProfileExtension[] = [];\n\t\t\tfor (const e of profileExtensions) {\n\t\t\t\tconst isDisabled = extensionEnablementService.getDisabledExtensions().some(disabledExtension => areSameExtensions(disabledExtension, e.identifier));\n\t\t\t\tconst installedExtension = installedExtensions.find(installed => areSameExtensions(installed.identifier, e.identifier));\n\t\t\t\tif (!installedExtension || (!installedExtension.isBuiltin && installedExtension.preRelease !== e.preRelease)) {\n\t\t\t\t\textensionsToInstall.push(e);\n\t\t\t\t}\n\t\t\t\tif (isDisabled !== !!e.disabled) {\n\t\t\t\t\textensionsToEnableOrDisable.push({ extension: e.identifier, enable: !e.disabled });\n\t\t\t\t}\n\t\t\t}\n\t\t\tconst extensionsToUninstall: ILocalExtension[] = installedExtensions.filter(extension => !extension.isBuiltin && !profileExtensions.some(({ identifier }) => areSameExtensions(identifier, extension.identifier)) && !extension.isApplicationScoped);\n\t\t\tfor (const { extension, enable } of extensionsToEnableOrDisable) {\n\t\t\t\tif (enable) {\n\t\t\t\t\tthis.logService.trace(`Importing Profile (${profile.name}): Enabling extension...`, extension.id);\n\t\t\t\t\tawait extensionEnablementService.enableExtension(extension);\n\t\t\t\t\tthis.logService.info(`Importing Profile (${profile.name}): Enabled extension...`, extension.id);\n\t\t\t\t} else {\n\t\t\t\t\tthis.logService.trace(`Importing Profile (${profile.name}): Disabling extension...`, extension.id);\n\t\t\t\t\tawait extensionEnablementService.disableExtension(extension);\n\t\t\t\t\tthis.logService.info(`Importing Profile (${profile.name}): Disabled extension...`, extension.id);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (extensionsToInstall.length) {\n\t\t\t\tthis.logService.info(`Importing Profile (${profile.name}): Started installing extensions.`);\n\t\t\t\tconst galleryExtensions = await this.extensionGalleryService.getExtensions(extensionsToInstall.map(e => ({ ...e.identifier, version: e.version, hasPreRelease: e.version ? undefined : e.preRelease })), CancellationToken.None);\n\t\t\t\tconst installExtensionInfos: InstallExtensionInfo[] = [];\n\t\t\t\tawait Promise.all(extensionsToInstall.map(async e => {\n\t\t\t\t\tconst extension = galleryExtensions.find(galleryExtension => areSameExtensions(galleryExtension.identifier, e.identifier));\n\t\t\t\t\tif (!extension) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\tif (await this.extensionManagementService.canInstall(extension)) {\n\t\t\t\t\t\tinstallExtensionInfos.push({\n\t\t\t\t\t\t\textension,\n\t\t\t\t\t\t\toptions: {\n\t\t\t\t\t\t\t\tisMachineScoped: false,/* set isMachineScoped value to prevent install and sync dialog in web */\n\t\t\t\t\t\t\t\tdonotIncludePackAndDependencies: true,\n\t\t\t\t\t\t\t\tinstallGivenVersion: !!e.version,\n\t\t\t\t\t\t\t\tinstallPreReleaseVersion: e.preRelease,\n\t\t\t\t\t\t\t\tprofileLocation: profile.extensionsResource,\n\t\t\t\t\t\t\t\tcontext: { [EXTENSION_INSTALL_SKIP_WALKTHROUGH_CONTEXT]: true }\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis.logService.info(`Importing Profile (${profile.name}): Skipped installing extension because it cannot be installed.`, extension.identifier.id);\n\t\t\t\t\t}\n\t\t\t\t}));\n\t\t\t\tif (installExtensionInfos.length) {\n\t\t\t\t\tif (token) {\n\t\t\t\t\t\tfor (const installExtensionInfo of installExtensionInfos) {\n\t\t\t\t\t\t\tif (token.isCancellationRequested) {\n\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tprogress?.(localize('installingExtension', \"Installing extension {0}...\", installExtensionInfo.extension.displayName ?? installExtensionInfo.extension.identifier.id));\n\t\t\t\t\t\t\tawait this.extensionManagementService.installFromGallery(installExtensionInfo.extension, installExtensionInfo.options);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tawait this.extensionManagementService.installGalleryExtensions(installExtensionInfos);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tthis.logService.info(`Importing Profile (${profile.name}): Finished installing extensions.`);\n\t\t\t}\n\t\t\tif (extensionsToUninstall.length) {\n\t\t\t\tawait Promise.all(extensionsToUninstall.map(e => this.extensionManagementService.uninstall(e)));\n\t\t\t}\n\t\t});\n\t}\n\n\tasync copy(from: IUserDataProfile, to: IUserDataProfile, disableExtensions: boolean): Promise<void> {\n\t\tawait this.extensionManagementService.copyExtensions(from.extensionsResource, to.extensionsResource);\n\t\tconst extensionsToDisable = await this.withProfileScopedServices(from, async (extensionEnablementService) =>\n\t\t\textensionEnablementService.getDisabledExtensions());\n\t\tif (disableExtensions) {\n\t\t\tconst extensions = await this.extensionManagementService.getInstalled(ExtensionType.User, to.extensionsResource);\n\t\t\tfor (const extension of extensions) {\n\t\t\t\textensionsToDisable.push(extension.identifier);\n\t\t\t}\n\t\t}\n\t\tawait this.withProfileScopedServices(to, async (extensionEnablementService) =>\n\t\t\tPromise.all(extensionsToDisable.map(extension => extensionEnablementService.disableExtension(extension))));\n\t}\n\n\tasync getLocalExtensions(profile: IUserDataProfile): Promise<IProfileExtension[]> {\n\t\treturn this.withProfileScopedServices(profile, async (extensionEnablementService) => {\n\t\t\tconst result = new Map<string, IProfileExtension & { displayName?: string }>();\n\t\t\tconst installedExtensions = await this.extensionManagementService.getInstalled(undefined, profile.extensionsResource);\n\t\t\tconst disabledExtensions = extensionEnablementService.getDisabledExtensions();\n\t\t\tfor (const extension of installedExtensions) {\n\t\t\t\tconst { identifier, preRelease } = extension;\n\t\t\t\tconst disabled = disabledExtensions.some(disabledExtension => areSameExtensions(disabledExtension, identifier));\n\t\t\t\tif (extension.isBuiltin && !disabled) {\n\t\t\t\t\t// skip enabled builtin extensions\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tif (!extension.isBuiltin) {\n\t\t\t\t\tif (!extension.identifier.uuid) {\n\t\t\t\t\t\t// skip user extensions without uuid\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tconst existing = result.get(identifier.id.toLowerCase());\n\t\t\t\tif (existing?.disabled) {\n\t\t\t\t\t// Remove the duplicate disabled extension\n\t\t\t\t\tresult.delete(identifier.id.toLowerCase());\n\t\t\t\t}\n\t\t\t\tconst profileExtension: IProfileExtension = { identifier, displayName: extension.manifest.displayName };\n\t\t\t\tif (disabled) {\n\t\t\t\t\tprofileExtension.disabled = true;\n\t\t\t\t}\n\t\t\t\tif (!extension.isBuiltin && extension.pinned) {\n\t\t\t\t\tprofileExtension.version = extension.manifest.version;\n\t\t\t\t}\n\t\t\t\tif (!profileExtension.version && preRelease) {\n\t\t\t\t\tprofileExtension.preRelease = true;\n\t\t\t\t}\n\t\t\t\tresult.set(profileExtension.identifier.id.toLowerCase(), profileExtension);\n\t\t\t}\n\t\t\treturn [...result.values()];\n\t\t});\n\t}\n\n\tasync getProfileExtensions(content: string): Promise<IProfileExtension[]> {\n\t\treturn JSON.parse(content);\n\t}\n\n\tprivate async withProfileScopedServices<T>(profile: IUserDataProfile, fn: (extensionEnablementService: IGlobalExtensionEnablementService) => Promise<T>): Promise<T> {\n\t\treturn this.userDataProfileStorageService.withProfileScopedStorageService(profile,\n\t\t\tasync storageService => {\n\t\t\t\tconst disposables = new DisposableStore();\n\t\t\t\tconst instantiationService = disposables.add(this.instantiationService.createChild(new ServiceCollection([IStorageService, storageService])));\n\t\t\t\tconst extensionEnablementService = disposables.add(instantiationService.createInstance(GlobalExtensionEnablementService));\n\t\t\t\ttry {\n\t\t\t\t\treturn await fn(extensionEnablementService);\n\t\t\t\t} finally {\n\t\t\t\t\tdisposables.dispose();\n\t\t\t\t}\n\t\t\t});\n\t}\n}\n\nexport abstract class ExtensionsResourceTreeItem implements IProfileResourceTreeItem {\n\n\treadonly type = ProfileResourceType.Extensions;\n\treadonly handle = ProfileResourceType.Extensions;\n\treadonly label = { label: localize('extensions', \"Extensions\") };\n\treadonly collapsibleState = TreeItemCollapsibleState.Expanded;\n\tcontextValue = ProfileResourceType.Extensions;\n\tcheckbox: ITreeItemCheckboxState | undefined;\n\n\tprotected readonly excludedExtensions = new Set<string>();\n\n\tasync getChildren(): Promise<IProfileResourceChildTreeItem[]> {\n\t\tconst extensions = (await this.getExtensions()).sort((a, b) => (a.displayName ?? a.identifier.id).localeCompare(b.displayName ?? b.identifier.id));\n\t\tconst that = this;\n\t\treturn extensions.map<IProfileResourceChildTreeItem>(e => ({\n\t\t\thandle: e.identifier.id.toLowerCase(),\n\t\t\tparent: this,\n\t\t\tlabel: { label: e.displayName || e.identifier.id },\n\t\t\tdescription: e.disabled ? localize('disabled', \"Disabled\") : undefined,\n\t\t\tcollapsibleState: TreeItemCollapsibleState.None,\n\t\t\tcheckbox: that.checkbox ? {\n\t\t\t\tget isChecked() { return !that.excludedExtensions.has(e.identifier.id.toLowerCase()); },\n\t\t\t\tset isChecked(value: boolean) {\n\t\t\t\t\tif (value) {\n\t\t\t\t\t\tthat.excludedExtensions.delete(e.identifier.id.toLowerCase());\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthat.excludedExtensions.add(e.identifier.id.toLowerCase());\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\ttooltip: localize('exclude', \"Select {0} Extension\", e.displayName || e.identifier.id),\n\t\t\t\taccessibilityInformation: {\n\t\t\t\t\tlabel: localize('exclude', \"Select {0} Extension\", e.displayName || e.identifier.id),\n\t\t\t\t}\n\t\t\t} : undefined,\n\t\t\tthemeIcon: Codicon.extensions,\n\t\t\tcommand: {\n\t\t\t\tid: 'extension.open',\n\t\t\t\ttitle: '',\n\t\t\t\targuments: [e.identifier.id, undefined, true]\n\t\t\t}\n\t\t}));\n\t}\n\n\tasync hasContent(): Promise<boolean> {\n\t\tconst extensions = await this.getExtensions();\n\t\treturn extensions.length > 0;\n\t}\n\n\tabstract isFromDefaultProfile(): boolean;\n\tabstract getContent(): Promise<string>;\n\tprotected abstract getExtensions(): Promise<IProfileExtension[]>;\n\n}\n\nexport class ExtensionsResourceExportTreeItem extends ExtensionsResourceTreeItem {\n\n\tconstructor(\n\t\tprivate readonly profile: IUserDataProfile,\n\t\t@IInstantiationService private readonly instantiationService: IInstantiationService,\n\t) {\n\t\tsuper();\n\t}\n\n\tisFromDefaultProfile(): boolean {\n\t\treturn !this.profile.isDefault && !!this.profile.useDefaultFlags?.extensions;\n\t}\n\n\tprotected getExtensions(): Promise<IProfileExtension[]> {\n\t\treturn this.instantiationService.createInstance(ExtensionsResource).getLocalExtensions(this.profile);\n\t}\n\n\tasync getContent(): Promise<string> {\n\t\treturn this.instantiationService.createInstance(ExtensionsResource).getContent(this.profile, [...this.excludedExtensions.values()]);\n\t}\n\n}\n\nexport class ExtensionsResourceImportTreeItem extends ExtensionsResourceTreeItem {\n\n\tconstructor(\n\t\tprivate readonly content: string,\n\t\t@IInstantiationService private readonly instantiationService: IInstantiationService,\n\t) {\n\t\tsuper();\n\t}\n\n\tisFromDefaultProfile(): boolean {\n\t\treturn false;\n\t}\n\n\tprotected getExtensions(): Promise<IProfileExtension[]> {\n\t\treturn this.instantiationService.createInstance(ExtensionsResource).getProfileExtensions(this.content);\n\t}\n\n\tasync getContent(): Promise<string> {\n\t\tconst extensionsResource = this.instantiationService.createInstance(ExtensionsResource);\n\t\tconst extensions = await extensionsResource.getProfileExtensions(this.content);\n\t\treturn extensionsResource.toContent(extensions, [...this.excludedExtensions.values()]);\n\t}\n\n}\n"],
  "mappings": "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",
  "names": []
}
