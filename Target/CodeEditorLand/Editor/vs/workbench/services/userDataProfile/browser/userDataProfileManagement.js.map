{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/userDataProfile/browser/userDataProfileManagement.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CancellationToken } from \"../../../../base/common/cancellation.js\";\nimport { CancellationError } from \"../../../../base/common/errors.js\";\nimport { Disposable } from \"../../../../base/common/lifecycle.js\";\nimport { equals } from \"../../../../base/common/objects.js\";\nimport { localize } from \"../../../../nls.js\";\nimport { IDialogService } from \"../../../../platform/dialogs/common/dialogs.js\";\nimport {\n\tInstantiationType,\n\tregisterSingleton,\n} from \"../../../../platform/instantiation/common/extensions.js\";\nimport { ILogService } from \"../../../../platform/log/common/log.js\";\nimport { IProductService } from \"../../../../platform/product/common/productService.js\";\nimport {\n\tIRequestService,\n\tasJson,\n} from \"../../../../platform/request/common/request.js\";\nimport { ITelemetryService } from \"../../../../platform/telemetry/common/telemetry.js\";\nimport {\n\ttype DidChangeProfilesEvent,\n\ttype IUserDataProfile,\n\ttype IUserDataProfileOptions,\n\ttype IUserDataProfileUpdateOptions,\n\tIUserDataProfilesService,\n} from \"../../../../platform/userDataProfile/common/userDataProfile.js\";\nimport {\n\tIWorkspaceContextService,\n\ttoWorkspaceIdentifier,\n} from \"../../../../platform/workspace/common/workspace.js\";\nimport { IWorkbenchEnvironmentService } from \"../../environment/common/environmentService.js\";\nimport { IExtensionService } from \"../../extensions/common/extensions.js\";\nimport { IHostService } from \"../../host/browser/host.js\";\nimport {\n\ttype DidChangeUserDataProfileEvent,\n\ttype IProfileTemplateInfo,\n\tIUserDataProfileManagementService,\n\tIUserDataProfileService,\n} from \"../common/userDataProfile.js\";\n\nexport type ProfileManagementActionExecutedClassification = {\n\towner: \"sandy081\";\n\tcomment: \"Logged when profile management action is excuted\";\n\tid: {\n\t\tclassification: \"SystemMetaData\";\n\t\tpurpose: \"FeatureInsight\";\n\t\tcomment: \"The identifier of the action that was run.\";\n\t};\n};\n\nexport type ProfileManagementActionExecutedEvent = {\n\tid: string;\n};\n\nexport class UserDataProfileManagementService\n\textends Disposable\n\timplements IUserDataProfileManagementService\n{\n\treadonly _serviceBrand: undefined;\n\n\tconstructor(\n\t\t@IUserDataProfilesService\n\t\tprivate readonly userDataProfilesService: IUserDataProfilesService,\n\t\t@IUserDataProfileService\n\t\tprivate readonly userDataProfileService: IUserDataProfileService,\n\t\t@IHostService private readonly hostService: IHostService,\n\t\t@IDialogService private readonly dialogService: IDialogService,\n\t\t@IWorkspaceContextService\n\t\tprivate readonly workspaceContextService: IWorkspaceContextService,\n\t\t@IExtensionService private readonly extensionService: IExtensionService,\n\t\t@IWorkbenchEnvironmentService\n\t\tprivate readonly environmentService: IWorkbenchEnvironmentService,\n\t\t@ITelemetryService private readonly telemetryService: ITelemetryService,\n\t\t@IProductService private readonly productService: IProductService,\n\t\t@IRequestService private readonly requestService: IRequestService,\n\t\t@ILogService private readonly logService: ILogService,\n\t) {\n\t\tsuper();\n\t\tthis._register(\n\t\t\tuserDataProfilesService.onDidChangeProfiles((e) =>\n\t\t\t\tthis.onDidChangeProfiles(e),\n\t\t\t),\n\t\t);\n\t\tthis._register(\n\t\t\tuserDataProfilesService.onDidResetWorkspaces(() =>\n\t\t\t\tthis.onDidResetWorkspaces(),\n\t\t\t),\n\t\t);\n\t\tthis._register(\n\t\t\tuserDataProfileService.onDidChangeCurrentProfile((e) =>\n\t\t\t\tthis.onDidChangeCurrentProfile(e),\n\t\t\t),\n\t\t);\n\t\tthis._register(\n\t\t\tuserDataProfilesService.onDidChangeProfiles((e) => {\n\t\t\t\tconst updatedCurrentProfile = e.updated.find(\n\t\t\t\t\t(p) =>\n\t\t\t\t\t\tthis.userDataProfileService.currentProfile.id === p.id,\n\t\t\t\t);\n\t\t\t\tif (updatedCurrentProfile) {\n\t\t\t\t\tthis.changeCurrentProfile(\n\t\t\t\t\t\tupdatedCurrentProfile,\n\t\t\t\t\t\tlocalize(\n\t\t\t\t\t\t\t\"reload message when updated\",\n\t\t\t\t\t\t\t\"The current profile has been updated. Please reload to switch back to the updated profile\",\n\t\t\t\t\t\t),\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}),\n\t\t);\n\t}\n\n\tprivate onDidChangeProfiles(e: DidChangeProfilesEvent): void {\n\t\tif (\n\t\t\te.removed.some(\n\t\t\t\t(profile) =>\n\t\t\t\t\tprofile.id ===\n\t\t\t\t\tthis.userDataProfileService.currentProfile.id,\n\t\t\t)\n\t\t) {\n\t\t\tthis.changeCurrentProfile(\n\t\t\t\tthis.userDataProfilesService.defaultProfile,\n\t\t\t\tlocalize(\n\t\t\t\t\t\"reload message when removed\",\n\t\t\t\t\t\"The current profile has been removed. Please reload to switch back to default profile\",\n\t\t\t\t),\n\t\t\t);\n\t\t\treturn;\n\t\t}\n\t}\n\n\tprivate onDidResetWorkspaces(): void {\n\t\tif (!this.userDataProfileService.currentProfile.isDefault) {\n\t\t\tthis.changeCurrentProfile(\n\t\t\t\tthis.userDataProfilesService.defaultProfile,\n\t\t\t\tlocalize(\n\t\t\t\t\t\"reload message when removed\",\n\t\t\t\t\t\"The current profile has been removed. Please reload to switch back to default profile\",\n\t\t\t\t),\n\t\t\t);\n\t\t\treturn;\n\t\t}\n\t}\n\n\tprivate async onDidChangeCurrentProfile(\n\t\te: DidChangeUserDataProfileEvent,\n\t): Promise<void> {\n\t\tif (e.previous.isTransient) {\n\t\t\tawait this.userDataProfilesService.cleanUpTransientProfiles();\n\t\t}\n\t}\n\n\tasync createProfile(\n\t\tname: string,\n\t\toptions?: IUserDataProfileOptions,\n\t): Promise<IUserDataProfile> {\n\t\treturn this.userDataProfilesService.createNamedProfile(name, options);\n\t}\n\n\tasync createAndEnterProfile(\n\t\tname: string,\n\t\toptions?: IUserDataProfileOptions,\n\t): Promise<IUserDataProfile> {\n\t\tconst profile = await this.userDataProfilesService.createNamedProfile(\n\t\t\tname,\n\t\t\toptions,\n\t\t\ttoWorkspaceIdentifier(this.workspaceContextService.getWorkspace()),\n\t\t);\n\t\tawait this.changeCurrentProfile(profile);\n\t\tthis.telemetryService.publicLog2<\n\t\t\tProfileManagementActionExecutedEvent,\n\t\t\tProfileManagementActionExecutedClassification\n\t\t>(\"profileManagementActionExecuted\", { id: \"createAndEnterProfile\" });\n\t\treturn profile;\n\t}\n\n\tasync createAndEnterTransientProfile(): Promise<IUserDataProfile> {\n\t\tconst profile =\n\t\t\tawait this.userDataProfilesService.createTransientProfile(\n\t\t\t\ttoWorkspaceIdentifier(\n\t\t\t\t\tthis.workspaceContextService.getWorkspace(),\n\t\t\t\t),\n\t\t\t);\n\t\tawait this.changeCurrentProfile(profile);\n\t\tthis.telemetryService.publicLog2<\n\t\t\tProfileManagementActionExecutedEvent,\n\t\t\tProfileManagementActionExecutedClassification\n\t\t>(\"profileManagementActionExecuted\", {\n\t\t\tid: \"createAndEnterTransientProfile\",\n\t\t});\n\t\treturn profile;\n\t}\n\n\tasync updateProfile(\n\t\tprofile: IUserDataProfile,\n\t\tupdateOptions: IUserDataProfileUpdateOptions,\n\t): Promise<IUserDataProfile> {\n\t\tif (\n\t\t\t!this.userDataProfilesService.profiles.some(\n\t\t\t\t(p) => p.id === profile.id,\n\t\t\t)\n\t\t) {\n\t\t\tthrow new Error(`Profile ${profile.name} does not exist`);\n\t\t}\n\t\tif (profile.isDefault) {\n\t\t\tthrow new Error(\n\t\t\t\tlocalize(\n\t\t\t\t\t\"cannotRenameDefaultProfile\",\n\t\t\t\t\t\"Cannot rename the default profile\",\n\t\t\t\t),\n\t\t\t);\n\t\t}\n\t\tconst updatedProfile = await this.userDataProfilesService.updateProfile(\n\t\t\tprofile,\n\t\t\tupdateOptions,\n\t\t);\n\t\tthis.telemetryService.publicLog2<\n\t\t\tProfileManagementActionExecutedEvent,\n\t\t\tProfileManagementActionExecutedClassification\n\t\t>(\"profileManagementActionExecuted\", { id: \"updateProfile\" });\n\t\treturn updatedProfile;\n\t}\n\n\tasync removeProfile(profile: IUserDataProfile): Promise<void> {\n\t\tif (\n\t\t\t!this.userDataProfilesService.profiles.some(\n\t\t\t\t(p) => p.id === profile.id,\n\t\t\t)\n\t\t) {\n\t\t\tthrow new Error(`Profile ${profile.name} does not exist`);\n\t\t}\n\t\tif (profile.isDefault) {\n\t\t\tthrow new Error(\n\t\t\t\tlocalize(\n\t\t\t\t\t\"cannotDeleteDefaultProfile\",\n\t\t\t\t\t\"Cannot delete the default profile\",\n\t\t\t\t),\n\t\t\t);\n\t\t}\n\t\tawait this.userDataProfilesService.removeProfile(profile);\n\t\tthis.telemetryService.publicLog2<\n\t\t\tProfileManagementActionExecutedEvent,\n\t\t\tProfileManagementActionExecutedClassification\n\t\t>(\"profileManagementActionExecuted\", { id: \"removeProfile\" });\n\t}\n\n\tasync switchProfile(profile: IUserDataProfile): Promise<void> {\n\t\tconst workspaceIdentifier = toWorkspaceIdentifier(\n\t\t\tthis.workspaceContextService.getWorkspace(),\n\t\t);\n\t\tif (\n\t\t\t!this.userDataProfilesService.profiles.some(\n\t\t\t\t(p) => p.id === profile.id,\n\t\t\t)\n\t\t) {\n\t\t\tthrow new Error(`Profile ${profile.name} does not exist`);\n\t\t}\n\t\tif (this.userDataProfileService.currentProfile.id === profile.id) {\n\t\t\treturn;\n\t\t}\n\t\tawait this.userDataProfilesService.setProfileForWorkspace(\n\t\t\tworkspaceIdentifier,\n\t\t\tprofile,\n\t\t);\n\t\tawait this.changeCurrentProfile(profile);\n\t\tthis.telemetryService.publicLog2<\n\t\t\tProfileManagementActionExecutedEvent,\n\t\t\tProfileManagementActionExecutedClassification\n\t\t>(\"profileManagementActionExecuted\", { id: \"switchProfile\" });\n\t}\n\n\tasync getBuiltinProfileTemplates(): Promise<IProfileTemplateInfo[]> {\n\t\tif (this.productService.profileTemplatesUrl) {\n\t\t\ttry {\n\t\t\t\tconst context = await this.requestService.request(\n\t\t\t\t\t{\n\t\t\t\t\t\ttype: \"GET\",\n\t\t\t\t\t\turl: this.productService.profileTemplatesUrl,\n\t\t\t\t\t},\n\t\t\t\t\tCancellationToken.None,\n\t\t\t\t);\n\t\t\t\tif (context.res.statusCode === 200) {\n\t\t\t\t\treturn (\n\t\t\t\t\t\t(await asJson<IProfileTemplateInfo[]>(context)) || []\n\t\t\t\t\t);\n\t\t\t\t} else {\n\t\t\t\t\tthis.logService.error(\n\t\t\t\t\t\t\"Could not get profile templates.\",\n\t\t\t\t\t\tcontext.res.statusCode,\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t} catch (error) {\n\t\t\t\tthis.logService.error(error);\n\t\t\t}\n\t\t}\n\t\treturn [];\n\t}\n\n\tprivate async changeCurrentProfile(\n\t\tprofile: IUserDataProfile,\n\t\treloadMessage?: string,\n\t): Promise<void> {\n\t\tconst isRemoteWindow = !!this.environmentService.remoteAuthority;\n\n\t\tconst shouldRestartExtensionHosts =\n\t\t\tthis.userDataProfileService.currentProfile.id !== profile.id ||\n\t\t\t!equals(\n\t\t\t\tthis.userDataProfileService.currentProfile.useDefaultFlags,\n\t\t\t\tprofile.useDefaultFlags,\n\t\t\t);\n\n\t\tif (shouldRestartExtensionHosts) {\n\t\t\tif (!isRemoteWindow) {\n\t\t\t\tif (\n\t\t\t\t\t!(await this.extensionService.stopExtensionHosts(\n\t\t\t\t\t\tlocalize(\"switch profile\", \"Switching to a profile.\"),\n\t\t\t\t\t))\n\t\t\t\t) {\n\t\t\t\t\t// If extension host did not stop, do not switch profile\n\t\t\t\t\tif (\n\t\t\t\t\t\tthis.userDataProfilesService.profiles.some(\n\t\t\t\t\t\t\t(p) =>\n\t\t\t\t\t\t\t\tp.id ===\n\t\t\t\t\t\t\t\tthis.userDataProfileService.currentProfile.id,\n\t\t\t\t\t\t)\n\t\t\t\t\t) {\n\t\t\t\t\t\tawait this.userDataProfilesService.setProfileForWorkspace(\n\t\t\t\t\t\t\ttoWorkspaceIdentifier(\n\t\t\t\t\t\t\t\tthis.workspaceContextService.getWorkspace(),\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\tthis.userDataProfileService.currentProfile,\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t\tthrow new CancellationError();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// In a remote window update current profile before reloading so that data is preserved from current profile if asked to preserve\n\t\tawait this.userDataProfileService.updateCurrentProfile(profile);\n\n\t\tif (shouldRestartExtensionHosts) {\n\t\t\tif (isRemoteWindow) {\n\t\t\t\tconst { confirmed } = await this.dialogService.confirm({\n\t\t\t\t\tmessage:\n\t\t\t\t\t\treloadMessage ??\n\t\t\t\t\t\tlocalize(\n\t\t\t\t\t\t\t\"reload message\",\n\t\t\t\t\t\t\t\"Switching a profile requires reloading VS Code.\",\n\t\t\t\t\t\t),\n\t\t\t\t\tprimaryButton: localize(\"reload button\", \"&&Reload\"),\n\t\t\t\t});\n\t\t\t\tif (confirmed) {\n\t\t\t\t\tawait this.hostService.reload();\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tawait this.extensionService.startExtensionHosts();\n\t\t\t}\n\t\t}\n\t}\n}\n\nregisterSingleton(\n\tIUserDataProfileManagementService,\n\tUserDataProfileManagementService,\n\tInstantiationType.Eager /* Eager because it updates the current window profile by listening to profiles changes */,\n);\n"],
  "mappings": "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",
  "names": []
}
