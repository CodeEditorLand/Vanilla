{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/outline/browser/outline.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport type { IListVirtualDelegate } from \"../../../../base/browser/ui/list/list.js\";\nimport type {\n\tIDataSource,\n\tITreeRenderer,\n} from \"../../../../base/browser/ui/tree/tree.js\";\nimport type { CancellationToken } from \"../../../../base/common/cancellation.js\";\nimport type { Event } from \"../../../../base/common/event.js\";\nimport type { FuzzyScore } from \"../../../../base/common/filters.js\";\nimport type { IDisposable } from \"../../../../base/common/lifecycle.js\";\nimport type { URI } from \"../../../../base/common/uri.js\";\nimport type { IEditorOptions } from \"../../../../platform/editor/common/editor.js\";\nimport { createDecorator } from \"../../../../platform/instantiation/common/instantiation.js\";\nimport type { IWorkbenchDataTreeOptions } from \"../../../../platform/list/browser/listService.js\";\nimport type { IEditorPane } from \"../../../common/editor.js\";\n\nexport const IOutlineService =\n\tcreateDecorator<IOutlineService>(\"IOutlineService\");\n\nexport enum OutlineTarget {\n\tOutlinePane = 1,\n\tBreadcrumbs = 2,\n\tQuickPick = 4,\n}\n\nexport interface IOutlineService {\n\t_serviceBrand: undefined;\n\tonDidChange: Event<void>;\n\tcanCreateOutline(editor: IEditorPane): boolean;\n\tcreateOutline(\n\t\teditor: IEditorPane,\n\t\ttarget: OutlineTarget,\n\t\ttoken: CancellationToken,\n\t): Promise<IOutline<any> | undefined>;\n\tregisterOutlineCreator(creator: IOutlineCreator<any, any>): IDisposable;\n}\n\nexport interface IOutlineCreator<P extends IEditorPane, E> {\n\tmatches(candidate: IEditorPane): candidate is P;\n\tcreateOutline(\n\t\teditor: P,\n\t\ttarget: OutlineTarget,\n\t\ttoken: CancellationToken,\n\t): Promise<IOutline<E> | undefined>;\n}\n\nexport interface IBreadcrumbsDataSource<E> {\n\tgetBreadcrumbElements(): readonly E[];\n}\n\nexport interface IOutlineComparator<E> {\n\tcompareByPosition(a: E, b: E): number;\n\tcompareByType(a: E, b: E): number;\n\tcompareByName(a: E, b: E): number;\n}\n\nexport interface IQuickPickOutlineElement<E> {\n\treadonly element: E;\n\treadonly label: string;\n\treadonly iconClasses?: string[];\n\treadonly ariaLabel?: string;\n\treadonly description?: string;\n}\n\nexport interface IQuickPickDataSource<E> {\n\tgetQuickPickElements(): IQuickPickOutlineElement<E>[];\n}\n\nexport interface IOutlineListConfig<E> {\n\treadonly breadcrumbsDataSource: IBreadcrumbsDataSource<E>;\n\treadonly treeDataSource: IDataSource<IOutline<E>, E>;\n\treadonly delegate: IListVirtualDelegate<E>;\n\treadonly renderers: ITreeRenderer<E, FuzzyScore, any>[];\n\treadonly comparator: IOutlineComparator<E>;\n\treadonly options: IWorkbenchDataTreeOptions<E, FuzzyScore>;\n\treadonly quickPickDataSource: IQuickPickDataSource<E>;\n}\n\nexport interface OutlineChangeEvent {\n\taffectOnlyActiveElement?: true;\n}\n\nexport interface IOutline<E> {\n\treadonly uri: URI | undefined;\n\n\treadonly config: IOutlineListConfig<E>;\n\treadonly outlineKind: string;\n\n\treadonly isEmpty: boolean;\n\treadonly activeElement: E | undefined;\n\treadonly onDidChange: Event<OutlineChangeEvent>;\n\n\treveal(\n\t\tentry: E,\n\t\toptions: IEditorOptions,\n\t\tsideBySide: boolean,\n\t\tselect: boolean,\n\t): Promise<void> | void;\n\tpreview(entry: E): IDisposable;\n\tcaptureViewState(): IDisposable;\n\tdispose(): void;\n}\n\nexport enum OutlineConfigKeys {\n\ticons = \"outline.icons\",\n\tcollapseItems = \"outline.collapseItems\",\n\tproblemsEnabled = \"outline.problems.enabled\",\n\tproblemsColors = \"outline.problems.colors\",\n\tproblemsBadges = \"outline.problems.badges\",\n}\n\nexport enum OutlineConfigCollapseItemsValues {\n\tCollapsed = \"alwaysCollapse\",\n\tExpanded = \"alwaysExpand\",\n}\n"],
  "mappings": "AAgBA,SAAS,uBAAuB;AAIzB,MAAM,kBACZ,gBAAiC,iBAAiB;AAE5C,IAAK,gBAAL,kBAAKA,mBAAL;AACN,EAAAA,8BAAA,iBAAc,KAAd;AACA,EAAAA,8BAAA,iBAAc,KAAd;AACA,EAAAA,8BAAA,eAAY,KAAZ;AAHW,SAAAA;AAAA,GAAA;AAoFL,IAAK,oBAAL,kBAAKC,uBAAL;AACN,EAAAA,mBAAA,WAAQ;AACR,EAAAA,mBAAA,mBAAgB;AAChB,EAAAA,mBAAA,qBAAkB;AAClB,EAAAA,mBAAA,oBAAiB;AACjB,EAAAA,mBAAA,oBAAiB;AALN,SAAAA;AAAA,GAAA;AAQL,IAAK,mCAAL,kBAAKC,sCAAL;AACN,EAAAA,kCAAA,eAAY;AACZ,EAAAA,kCAAA,cAAW;AAFA,SAAAA;AAAA,GAAA;",
  "names": ["OutlineTarget", "OutlineConfigKeys", "OutlineConfigCollapseItemsValues"]
}
