{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/extensionRecommendations/common/workspaceExtensionsConfig.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { distinct } from '../../../../base/common/arrays.js';\nimport { Emitter, Event } from '../../../../base/common/event.js';\nimport { JSONPath, parse } from '../../../../base/common/json.js';\nimport { Disposable } from '../../../../base/common/lifecycle.js';\nimport { getIconClasses } from '../../../../editor/common/services/getIconClasses.js';\nimport { FileKind, IFileService } from '../../../../platform/files/common/files.js';\nimport { InstantiationType, registerSingleton } from '../../../../platform/instantiation/common/extensions.js';\nimport { createDecorator } from '../../../../platform/instantiation/common/instantiation.js';\nimport { isWorkspace, IWorkspace, IWorkspaceContextService, IWorkspaceFolder } from '../../../../platform/workspace/common/workspace.js';\nimport { IQuickInputService, IQuickPickItem, IQuickPickSeparator } from '../../../../platform/quickinput/common/quickInput.js';\nimport { IModelService } from '../../../../editor/common/services/model.js';\nimport { ILanguageService } from '../../../../editor/common/languages/language.js';\nimport { localize } from '../../../../nls.js';\nimport { URI } from '../../../../base/common/uri.js';\nimport { IJSONEditingService, IJSONValue } from '../../configuration/common/jsonEditing.js';\nimport { ResourceMap } from '../../../../base/common/map.js';\n\nexport const EXTENSIONS_CONFIG = '.vscode/extensions.json';\n\nexport interface IExtensionsConfigContent {\n\trecommendations?: string[];\n\tunwantedRecommendations?: string[];\n}\n\nexport const IWorkspaceExtensionsConfigService = createDecorator<IWorkspaceExtensionsConfigService>('IWorkspaceExtensionsConfigService');\n\nexport interface IWorkspaceExtensionsConfigService {\n\treadonly _serviceBrand: undefined;\n\n\tonDidChangeExtensionsConfigs: Event<void>;\n\tgetExtensionsConfigs(): Promise<IExtensionsConfigContent[]>;\n\tgetRecommendations(): Promise<string[]>;\n\tgetUnwantedRecommendations(): Promise<string[]>;\n\n\ttoggleRecommendation(extensionId: string): Promise<void>;\n\ttoggleUnwantedRecommendation(extensionId: string): Promise<void>;\n}\n\nexport class WorkspaceExtensionsConfigService extends Disposable implements IWorkspaceExtensionsConfigService {\n\n\tdeclare readonly _serviceBrand: undefined;\n\n\tprivate readonly _onDidChangeExtensionsConfigs = this._register(new Emitter<void>());\n\treadonly onDidChangeExtensionsConfigs = this._onDidChangeExtensionsConfigs.event;\n\n\tconstructor(\n\t\t@IWorkspaceContextService private readonly workspaceContextService: IWorkspaceContextService,\n\t\t@IFileService private readonly fileService: IFileService,\n\t\t@IQuickInputService private readonly quickInputService: IQuickInputService,\n\t\t@IModelService private readonly modelService: IModelService,\n\t\t@ILanguageService private readonly languageService: ILanguageService,\n\t\t@IJSONEditingService private readonly jsonEditingService: IJSONEditingService,\n\t) {\n\t\tsuper();\n\t\tthis._register(workspaceContextService.onDidChangeWorkspaceFolders(e => this._onDidChangeExtensionsConfigs.fire()));\n\t\tthis._register(fileService.onDidFilesChange(e => {\n\t\t\tconst workspace = workspaceContextService.getWorkspace();\n\t\t\tif ((workspace.configuration && e.affects(workspace.configuration))\n\t\t\t\t|| workspace.folders.some(folder => e.affects(folder.toResource(EXTENSIONS_CONFIG)))\n\t\t\t) {\n\t\t\t\tthis._onDidChangeExtensionsConfigs.fire();\n\t\t\t}\n\t\t}));\n\t}\n\n\tasync getExtensionsConfigs(): Promise<IExtensionsConfigContent[]> {\n\t\tconst workspace = this.workspaceContextService.getWorkspace();\n\t\tconst result: IExtensionsConfigContent[] = [];\n\t\tconst workspaceExtensionsConfigContent = workspace.configuration ? await this.resolveWorkspaceExtensionConfig(workspace.configuration) : undefined;\n\t\tif (workspaceExtensionsConfigContent) {\n\t\t\tresult.push(workspaceExtensionsConfigContent);\n\t\t}\n\t\tresult.push(...await Promise.all(workspace.folders.map(workspaceFolder => this.resolveWorkspaceFolderExtensionConfig(workspaceFolder))));\n\t\treturn result;\n\t}\n\n\tasync getRecommendations(): Promise<string[]> {\n\t\tconst configs = await this.getExtensionsConfigs();\n\t\treturn distinct(configs.flatMap(c => c.recommendations ? c.recommendations.map(c => c.toLowerCase()) : []));\n\t}\n\n\tasync getUnwantedRecommendations(): Promise<string[]> {\n\t\tconst configs = await this.getExtensionsConfigs();\n\t\treturn distinct(configs.flatMap(c => c.unwantedRecommendations ? c.unwantedRecommendations.map(c => c.toLowerCase()) : []));\n\t}\n\n\tasync toggleRecommendation(extensionId: string): Promise<void> {\n\t\textensionId = extensionId.toLowerCase();\n\t\tconst workspace = this.workspaceContextService.getWorkspace();\n\t\tconst workspaceExtensionsConfigContent = workspace.configuration ? await this.resolveWorkspaceExtensionConfig(workspace.configuration) : undefined;\n\t\tconst workspaceFolderExtensionsConfigContents = new ResourceMap<IExtensionsConfigContent>();\n\t\tawait Promise.all(workspace.folders.map(async workspaceFolder => {\n\t\t\tconst extensionsConfigContent = await this.resolveWorkspaceFolderExtensionConfig(workspaceFolder);\n\t\t\tworkspaceFolderExtensionsConfigContents.set(workspaceFolder.uri, extensionsConfigContent);\n\t\t}));\n\n\t\tconst isWorkspaceRecommended = workspaceExtensionsConfigContent && workspaceExtensionsConfigContent.recommendations?.some(r => r.toLowerCase() === extensionId);\n\t\tconst recommendedWorksapceFolders = workspace.folders.filter(workspaceFolder => workspaceFolderExtensionsConfigContents.get(workspaceFolder.uri)?.recommendations?.some(r => r.toLowerCase() === extensionId));\n\t\tconst isRecommended = isWorkspaceRecommended || recommendedWorksapceFolders.length > 0;\n\n\t\tconst workspaceOrFolders = isRecommended\n\t\t\t? await this.pickWorkspaceOrFolders(recommendedWorksapceFolders, isWorkspaceRecommended ? workspace : undefined, localize('select for remove', \"Remove extension recommendation from\"))\n\t\t\t: await this.pickWorkspaceOrFolders(workspace.folders, workspace.configuration ? workspace : undefined, localize('select for add', \"Add extension recommendation to\"));\n\n\t\tfor (const workspaceOrWorkspaceFolder of workspaceOrFolders) {\n\t\t\tif (isWorkspace(workspaceOrWorkspaceFolder)) {\n\t\t\t\tawait this.addOrRemoveWorkspaceRecommendation(extensionId, workspaceOrWorkspaceFolder, workspaceExtensionsConfigContent, !isRecommended);\n\t\t\t} else {\n\t\t\t\tawait this.addOrRemoveWorkspaceFolderRecommendation(extensionId, workspaceOrWorkspaceFolder, workspaceFolderExtensionsConfigContents.get(workspaceOrWorkspaceFolder.uri)!, !isRecommended);\n\t\t\t}\n\t\t}\n\t}\n\n\tasync toggleUnwantedRecommendation(extensionId: string): Promise<void> {\n\t\tconst workspace = this.workspaceContextService.getWorkspace();\n\t\tconst workspaceExtensionsConfigContent = workspace.configuration ? await this.resolveWorkspaceExtensionConfig(workspace.configuration) : undefined;\n\t\tconst workspaceFolderExtensionsConfigContents = new ResourceMap<IExtensionsConfigContent>();\n\t\tawait Promise.all(workspace.folders.map(async workspaceFolder => {\n\t\t\tconst extensionsConfigContent = await this.resolveWorkspaceFolderExtensionConfig(workspaceFolder);\n\t\t\tworkspaceFolderExtensionsConfigContents.set(workspaceFolder.uri, extensionsConfigContent);\n\t\t}));\n\n\t\tconst isWorkspaceUnwanted = workspaceExtensionsConfigContent && workspaceExtensionsConfigContent.unwantedRecommendations?.some(r => r === extensionId);\n\t\tconst unWantedWorksapceFolders = workspace.folders.filter(workspaceFolder => workspaceFolderExtensionsConfigContents.get(workspaceFolder.uri)?.unwantedRecommendations?.some(r => r === extensionId));\n\t\tconst isUnwanted = isWorkspaceUnwanted || unWantedWorksapceFolders.length > 0;\n\n\t\tconst workspaceOrFolders = isUnwanted\n\t\t\t? await this.pickWorkspaceOrFolders(unWantedWorksapceFolders, isWorkspaceUnwanted ? workspace : undefined, localize('select for remove', \"Remove extension recommendation from\"))\n\t\t\t: await this.pickWorkspaceOrFolders(workspace.folders, workspace.configuration ? workspace : undefined, localize('select for add', \"Add extension recommendation to\"));\n\n\t\tfor (const workspaceOrWorkspaceFolder of workspaceOrFolders) {\n\t\t\tif (isWorkspace(workspaceOrWorkspaceFolder)) {\n\t\t\t\tawait this.addOrRemoveWorkspaceUnwantedRecommendation(extensionId, workspaceOrWorkspaceFolder, workspaceExtensionsConfigContent, !isUnwanted);\n\t\t\t} else {\n\t\t\t\tawait this.addOrRemoveWorkspaceFolderUnwantedRecommendation(extensionId, workspaceOrWorkspaceFolder, workspaceFolderExtensionsConfigContents.get(workspaceOrWorkspaceFolder.uri)!, !isUnwanted);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate async addOrRemoveWorkspaceFolderRecommendation(extensionId: string, workspaceFolder: IWorkspaceFolder, extensionsConfigContent: IExtensionsConfigContent, add: boolean): Promise<void> {\n\t\tconst values: IJSONValue[] = [];\n\t\tif (add) {\n\t\t\tif (Array.isArray(extensionsConfigContent.recommendations)) {\n\t\t\t\tvalues.push({ path: ['recommendations', -1], value: extensionId });\n\t\t\t} else {\n\t\t\t\tvalues.push({ path: ['recommendations'], value: [extensionId] });\n\t\t\t}\n\t\t\tconst unwantedRecommendationEdit = this.getEditToRemoveValueFromArray(['unwantedRecommendations'], extensionsConfigContent.unwantedRecommendations, extensionId);\n\t\t\tif (unwantedRecommendationEdit) {\n\t\t\t\tvalues.push(unwantedRecommendationEdit);\n\t\t\t}\n\t\t} else if (extensionsConfigContent.recommendations) {\n\t\t\tconst recommendationEdit = this.getEditToRemoveValueFromArray(['recommendations'], extensionsConfigContent.recommendations, extensionId);\n\t\t\tif (recommendationEdit) {\n\t\t\t\tvalues.push(recommendationEdit);\n\t\t\t}\n\t\t}\n\n\t\tif (values.length) {\n\t\t\treturn this.jsonEditingService.write(workspaceFolder.toResource(EXTENSIONS_CONFIG), values, true);\n\t\t}\n\t}\n\n\tprivate async addOrRemoveWorkspaceRecommendation(extensionId: string, workspace: IWorkspace, extensionsConfigContent: IExtensionsConfigContent | undefined, add: boolean): Promise<void> {\n\t\tconst values: IJSONValue[] = [];\n\t\tif (extensionsConfigContent) {\n\t\t\tif (add) {\n\t\t\t\tconst path: JSONPath = ['extensions', 'recommendations'];\n\t\t\t\tif (Array.isArray(extensionsConfigContent.recommendations)) {\n\t\t\t\t\tvalues.push({ path: [...path, -1], value: extensionId });\n\t\t\t\t} else {\n\t\t\t\t\tvalues.push({ path, value: [extensionId] });\n\t\t\t\t}\n\t\t\t\tconst unwantedRecommendationEdit = this.getEditToRemoveValueFromArray(['extensions', 'unwantedRecommendations'], extensionsConfigContent.unwantedRecommendations, extensionId);\n\t\t\t\tif (unwantedRecommendationEdit) {\n\t\t\t\t\tvalues.push(unwantedRecommendationEdit);\n\t\t\t\t}\n\t\t\t} else if (extensionsConfigContent.recommendations) {\n\t\t\t\tconst recommendationEdit = this.getEditToRemoveValueFromArray(['extensions', 'recommendations'], extensionsConfigContent.recommendations, extensionId);\n\t\t\t\tif (recommendationEdit) {\n\t\t\t\t\tvalues.push(recommendationEdit);\n\t\t\t\t}\n\t\t\t}\n\t\t} else if (add) {\n\t\t\tvalues.push({ path: ['extensions'], value: { recommendations: [extensionId] } });\n\t\t}\n\n\t\tif (values.length) {\n\t\t\treturn this.jsonEditingService.write(workspace.configuration!, values, true);\n\t\t}\n\t}\n\n\tprivate async addOrRemoveWorkspaceFolderUnwantedRecommendation(extensionId: string, workspaceFolder: IWorkspaceFolder, extensionsConfigContent: IExtensionsConfigContent, add: boolean): Promise<void> {\n\t\tconst values: IJSONValue[] = [];\n\t\tif (add) {\n\t\t\tconst path: JSONPath = ['unwantedRecommendations'];\n\t\t\tif (Array.isArray(extensionsConfigContent.unwantedRecommendations)) {\n\t\t\t\tvalues.push({ path: [...path, -1], value: extensionId });\n\t\t\t} else {\n\t\t\t\tvalues.push({ path, value: [extensionId] });\n\t\t\t}\n\t\t\tconst recommendationEdit = this.getEditToRemoveValueFromArray(['recommendations'], extensionsConfigContent.recommendations, extensionId);\n\t\t\tif (recommendationEdit) {\n\t\t\t\tvalues.push(recommendationEdit);\n\t\t\t}\n\t\t} else if (extensionsConfigContent.unwantedRecommendations) {\n\t\t\tconst unwantedRecommendationEdit = this.getEditToRemoveValueFromArray(['unwantedRecommendations'], extensionsConfigContent.unwantedRecommendations, extensionId);\n\t\t\tif (unwantedRecommendationEdit) {\n\t\t\t\tvalues.push(unwantedRecommendationEdit);\n\t\t\t}\n\t\t}\n\t\tif (values.length) {\n\t\t\treturn this.jsonEditingService.write(workspaceFolder.toResource(EXTENSIONS_CONFIG), values, true);\n\t\t}\n\t}\n\n\tprivate async addOrRemoveWorkspaceUnwantedRecommendation(extensionId: string, workspace: IWorkspace, extensionsConfigContent: IExtensionsConfigContent | undefined, add: boolean): Promise<void> {\n\t\tconst values: IJSONValue[] = [];\n\t\tif (extensionsConfigContent) {\n\t\t\tif (add) {\n\t\t\t\tconst path: JSONPath = ['extensions', 'unwantedRecommendations'];\n\t\t\t\tif (Array.isArray(extensionsConfigContent.recommendations)) {\n\t\t\t\t\tvalues.push({ path: [...path, -1], value: extensionId });\n\t\t\t\t} else {\n\t\t\t\t\tvalues.push({ path, value: [extensionId] });\n\t\t\t\t}\n\t\t\t\tconst recommendationEdit = this.getEditToRemoveValueFromArray(['extensions', 'recommendations'], extensionsConfigContent.recommendations, extensionId);\n\t\t\t\tif (recommendationEdit) {\n\t\t\t\t\tvalues.push(recommendationEdit);\n\t\t\t\t}\n\t\t\t} else if (extensionsConfigContent.unwantedRecommendations) {\n\t\t\t\tconst unwantedRecommendationEdit = this.getEditToRemoveValueFromArray(['extensions', 'unwantedRecommendations'], extensionsConfigContent.unwantedRecommendations, extensionId);\n\t\t\t\tif (unwantedRecommendationEdit) {\n\t\t\t\t\tvalues.push(unwantedRecommendationEdit);\n\t\t\t\t}\n\t\t\t}\n\t\t} else if (add) {\n\t\t\tvalues.push({ path: ['extensions'], value: { unwantedRecommendations: [extensionId] } });\n\t\t}\n\n\t\tif (values.length) {\n\t\t\treturn this.jsonEditingService.write(workspace.configuration!, values, true);\n\t\t}\n\t}\n\n\tprivate async pickWorkspaceOrFolders(workspaceFolders: IWorkspaceFolder[], workspace: IWorkspace | undefined, placeHolder: string): Promise<(IWorkspace | IWorkspaceFolder)[]> {\n\t\tconst workspaceOrFolders = workspace ? [...workspaceFolders, workspace] : [...workspaceFolders];\n\t\tif (workspaceOrFolders.length === 1) {\n\t\t\treturn workspaceOrFolders;\n\t\t}\n\n\t\tconst folderPicks: (IQuickPickItem & { workspaceOrFolder: IWorkspace | IWorkspaceFolder } | IQuickPickSeparator)[] = workspaceFolders.map(workspaceFolder => {\n\t\t\treturn {\n\t\t\t\tlabel: workspaceFolder.name,\n\t\t\t\tdescription: localize('workspace folder', \"Workspace Folder\"),\n\t\t\t\tworkspaceOrFolder: workspaceFolder,\n\t\t\t\ticonClasses: getIconClasses(this.modelService, this.languageService, workspaceFolder.uri, FileKind.ROOT_FOLDER)\n\t\t\t};\n\t\t});\n\n\t\tif (workspace) {\n\t\t\tfolderPicks.push({ type: 'separator' });\n\t\t\tfolderPicks.push({\n\t\t\t\tlabel: localize('workspace', \"Workspace\"),\n\t\t\t\tworkspaceOrFolder: workspace,\n\t\t\t});\n\t\t}\n\n\t\tconst result = await this.quickInputService.pick(folderPicks, { placeHolder, canPickMany: true }) || [];\n\t\treturn result.map(r => r.workspaceOrFolder);\n\t}\n\n\tprivate async resolveWorkspaceExtensionConfig(workspaceConfigurationResource: URI): Promise<IExtensionsConfigContent | undefined> {\n\t\ttry {\n\t\t\tconst content = await this.fileService.readFile(workspaceConfigurationResource);\n\t\t\tconst extensionsConfigContent = <IExtensionsConfigContent | undefined>parse(content.value.toString())['extensions'];\n\t\t\treturn extensionsConfigContent ? this.parseExtensionConfig(extensionsConfigContent) : undefined;\n\t\t} catch (e) { /* Ignore */ }\n\t\treturn undefined;\n\t}\n\n\tprivate async resolveWorkspaceFolderExtensionConfig(workspaceFolder: IWorkspaceFolder): Promise<IExtensionsConfigContent> {\n\t\ttry {\n\t\t\tconst content = await this.fileService.readFile(workspaceFolder.toResource(EXTENSIONS_CONFIG));\n\t\t\tconst extensionsConfigContent = <IExtensionsConfigContent>parse(content.value.toString());\n\t\t\treturn this.parseExtensionConfig(extensionsConfigContent);\n\t\t} catch (e) { /* ignore */ }\n\t\treturn {};\n\t}\n\n\tprivate parseExtensionConfig(extensionsConfigContent: IExtensionsConfigContent): IExtensionsConfigContent {\n\t\treturn {\n\t\t\trecommendations: distinct((extensionsConfigContent.recommendations || []).map(e => e.toLowerCase())),\n\t\t\tunwantedRecommendations: distinct((extensionsConfigContent.unwantedRecommendations || []).map(e => e.toLowerCase()))\n\t\t};\n\t}\n\n\tprivate getEditToRemoveValueFromArray(path: JSONPath, array: string[] | undefined, value: string): IJSONValue | undefined {\n\t\tconst index = array?.indexOf(value);\n\t\tif (index !== undefined && index !== -1) {\n\t\t\treturn { path: [...path, index], value: undefined };\n\t\t}\n\t\treturn undefined;\n\t}\n\n}\n\nregisterSingleton(IWorkspaceExtensionsConfigService, WorkspaceExtensionsConfigService, InstantiationType.Delayed);\n"],
  "mappings": "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",
  "names": ["c"]
}
