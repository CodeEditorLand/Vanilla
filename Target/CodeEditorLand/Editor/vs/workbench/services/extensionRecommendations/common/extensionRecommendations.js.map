{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/extensionRecommendations/common/extensionRecommendations.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { createDecorator } from '../../../../platform/instantiation/common/instantiation.js';\nimport { IStringDictionary } from '../../../../base/common/collections.js';\nimport { Event } from '../../../../base/common/event.js';\nimport { URI } from '../../../../base/common/uri.js';\n\nexport const enum ExtensionRecommendationReason {\n\tWorkspace,\n\tFile,\n\tExecutable,\n\tWorkspaceConfig,\n\tDynamicWorkspace,\n\tExperimental,\n\tApplication,\n}\n\nexport interface IExtensionRecommendationReason {\n\treasonId: ExtensionRecommendationReason;\n\treasonText: string;\n}\n\nexport const IExtensionRecommendationsService = createDecorator<IExtensionRecommendationsService>('extensionRecommendationsService');\n\nexport interface IExtensionRecommendationsService {\n\treadonly _serviceBrand: undefined;\n\n\treadonly onDidChangeRecommendations: Event<void>;\n\tgetAllRecommendationsWithReason(): IStringDictionary<IExtensionRecommendationReason>;\n\n\tgetImportantRecommendations(): Promise<string[]>;\n\tgetOtherRecommendations(): Promise<string[]>;\n\tgetFileBasedRecommendations(): string[];\n\tgetExeBasedRecommendations(exe?: string): Promise<{ important: string[]; others: string[] }>;\n\tgetConfigBasedRecommendations(): Promise<{ important: string[]; others: string[] }>;\n\tgetWorkspaceRecommendations(): Promise<Array<string | URI>>;\n\tgetKeymapRecommendations(): string[];\n\tgetLanguageRecommendations(): string[];\n\tgetRemoteRecommendations(): string[];\n}\n\nexport type IgnoredRecommendationChangeNotification = {\n\textensionId: string;\n\tisRecommended: boolean;\n};\n\nexport const IExtensionIgnoredRecommendationsService = createDecorator<IExtensionIgnoredRecommendationsService>('IExtensionIgnoredRecommendationsService');\n\nexport interface IExtensionIgnoredRecommendationsService {\n\treadonly _serviceBrand: undefined;\n\n\tonDidChangeIgnoredRecommendations: Event<void>;\n\treadonly ignoredRecommendations: string[];\n\n\tonDidChangeGlobalIgnoredRecommendation: Event<IgnoredRecommendationChangeNotification>;\n\treadonly globalIgnoredRecommendations: string[];\n\ttoggleGlobalIgnoredRecommendation(extensionId: string, ignore: boolean): void;\n}\n\n\n"],
  "mappings": "AAKA,SAAS,uBAAuB;AAChC,SAAS,yBAAyB;AAClC,SAAS,aAAa;AACtB,SAAS,WAAW;AAEb,IAAW,gCAAX,kBAAWA,mCAAX;AACN,EAAAA,8DAAA;AACA,EAAAA,8DAAA;AACA,EAAAA,8DAAA;AACA,EAAAA,8DAAA;AACA,EAAAA,8DAAA;AACA,EAAAA,8DAAA;AACA,EAAAA,8DAAA;AAPiB,SAAAA;AAAA,GAAA;AAeX,MAAM,mCAAmC,gBAAkD,iCAAiC;AAwB5H,MAAM,0CAA0C,gBAAyD,yCAAyC;",
  "names": ["ExtensionRecommendationReason"]
}
