{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/extensionRecommendations/common/extensionRecommendations.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport type { IStringDictionary } from \"../../../../base/common/collections.js\";\nimport type { Event } from \"../../../../base/common/event.js\";\nimport type { URI } from \"../../../../base/common/uri.js\";\nimport { createDecorator } from \"../../../../platform/instantiation/common/instantiation.js\";\n\nexport enum ExtensionRecommendationReason {\n\tWorkspace = 0,\n\tFile = 1,\n\tExecutable = 2,\n\tWorkspaceConfig = 3,\n\tDynamicWorkspace = 4,\n\tExperimental = 5,\n\tApplication = 6,\n}\n\nexport interface IExtensionRecommendationReason {\n\treasonId: ExtensionRecommendationReason;\n\treasonText: string;\n}\n\nexport const IExtensionRecommendationsService =\n\tcreateDecorator<IExtensionRecommendationsService>(\n\t\t\"extensionRecommendationsService\",\n\t);\n\nexport interface IExtensionRecommendationsService {\n\treadonly _serviceBrand: undefined;\n\n\treadonly onDidChangeRecommendations: Event<void>;\n\tgetAllRecommendationsWithReason(): IStringDictionary<IExtensionRecommendationReason>;\n\n\tgetImportantRecommendations(): Promise<string[]>;\n\tgetOtherRecommendations(): Promise<string[]>;\n\tgetFileBasedRecommendations(): string[];\n\tgetExeBasedRecommendations(\n\t\texe?: string,\n\t): Promise<{ important: string[]; others: string[] }>;\n\tgetConfigBasedRecommendations(): Promise<{\n\t\timportant: string[];\n\t\tothers: string[];\n\t}>;\n\tgetWorkspaceRecommendations(): Promise<Array<string | URI>>;\n\tgetKeymapRecommendations(): string[];\n\tgetLanguageRecommendations(): string[];\n\tgetRemoteRecommendations(): string[];\n}\n\nexport type IgnoredRecommendationChangeNotification = {\n\textensionId: string;\n\tisRecommended: boolean;\n};\n\nexport const IExtensionIgnoredRecommendationsService =\n\tcreateDecorator<IExtensionIgnoredRecommendationsService>(\n\t\t\"IExtensionIgnoredRecommendationsService\",\n\t);\n\nexport interface IExtensionIgnoredRecommendationsService {\n\treadonly _serviceBrand: undefined;\n\n\tonDidChangeIgnoredRecommendations: Event<void>;\n\treadonly ignoredRecommendations: string[];\n\n\tonDidChangeGlobalIgnoredRecommendation: Event<IgnoredRecommendationChangeNotification>;\n\treadonly globalIgnoredRecommendations: string[];\n\ttoggleGlobalIgnoredRecommendation(\n\t\textensionId: string,\n\t\tignore: boolean,\n\t): void;\n}\n"],
  "mappings": "AAQA,SAAS,uBAAuB;AAEzB,IAAK,gCAAL,kBAAKA,mCAAL;AACN,EAAAA,8DAAA,eAAY,KAAZ;AACA,EAAAA,8DAAA,UAAO,KAAP;AACA,EAAAA,8DAAA,gBAAa,KAAb;AACA,EAAAA,8DAAA,qBAAkB,KAAlB;AACA,EAAAA,8DAAA,sBAAmB,KAAnB;AACA,EAAAA,8DAAA,kBAAe,KAAf;AACA,EAAAA,8DAAA,iBAAc,KAAd;AAPW,SAAAA;AAAA,GAAA;AAeL,MAAM,mCACZ;AAAA,EACC;AACD;AA6BM,MAAM,0CACZ;AAAA,EACC;AACD;",
  "names": ["ExtensionRecommendationReason"]
}
