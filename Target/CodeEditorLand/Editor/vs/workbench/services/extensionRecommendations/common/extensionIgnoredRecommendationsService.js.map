{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/extensionRecommendations/common/extensionIgnoredRecommendationsService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { distinct } from '../../../../base/common/arrays.js';\nimport { Emitter } from '../../../../base/common/event.js';\nimport { Disposable, DisposableStore } from '../../../../base/common/lifecycle.js';\nimport { InstantiationType, registerSingleton } from '../../../../platform/instantiation/common/extensions.js';\nimport { IStorageService, StorageScope, StorageTarget } from '../../../../platform/storage/common/storage.js';\nimport { IExtensionIgnoredRecommendationsService, IgnoredRecommendationChangeNotification } from './extensionRecommendations.js';\nimport { IWorkspaceExtensionsConfigService } from './workspaceExtensionsConfig.js';\n\nconst ignoredRecommendationsStorageKey = 'extensionsAssistant/ignored_recommendations';\n\nexport class ExtensionIgnoredRecommendationsService extends Disposable implements IExtensionIgnoredRecommendationsService {\n\n\tdeclare readonly _serviceBrand: undefined;\n\n\tprivate _onDidChangeIgnoredRecommendations = this._register(new Emitter<void>());\n\treadonly onDidChangeIgnoredRecommendations = this._onDidChangeIgnoredRecommendations.event;\n\n\t// Global Ignored Recommendations\n\tprivate _globalIgnoredRecommendations: string[] = [];\n\tget globalIgnoredRecommendations(): string[] { return [...this._globalIgnoredRecommendations]; }\n\tprivate _onDidChangeGlobalIgnoredRecommendation = this._register(new Emitter<IgnoredRecommendationChangeNotification>());\n\treadonly onDidChangeGlobalIgnoredRecommendation = this._onDidChangeGlobalIgnoredRecommendation.event;\n\n\t// Ignored Workspace Recommendations\n\tprivate ignoredWorkspaceRecommendations: string[] = [];\n\n\tget ignoredRecommendations(): string[] { return distinct([...this.globalIgnoredRecommendations, ...this.ignoredWorkspaceRecommendations]); }\n\n\tconstructor(\n\t\t@IWorkspaceExtensionsConfigService private readonly workspaceExtensionsConfigService: IWorkspaceExtensionsConfigService,\n\t\t@IStorageService private readonly storageService: IStorageService,\n\t) {\n\t\tsuper();\n\t\tthis._globalIgnoredRecommendations = this.getCachedIgnoredRecommendations();\n\t\tthis._register(this.storageService.onDidChangeValue(StorageScope.PROFILE, ignoredRecommendationsStorageKey, this._register(new DisposableStore()))(e => this.onDidStorageChange()));\n\n\t\tthis.initIgnoredWorkspaceRecommendations();\n\t}\n\n\tprivate async initIgnoredWorkspaceRecommendations(): Promise<void> {\n\t\tthis.ignoredWorkspaceRecommendations = await this.workspaceExtensionsConfigService.getUnwantedRecommendations();\n\t\tthis._onDidChangeIgnoredRecommendations.fire();\n\t\tthis._register(this.workspaceExtensionsConfigService.onDidChangeExtensionsConfigs(async () => {\n\t\t\tthis.ignoredWorkspaceRecommendations = await this.workspaceExtensionsConfigService.getUnwantedRecommendations();\n\t\t\tthis._onDidChangeIgnoredRecommendations.fire();\n\t\t}));\n\t}\n\n\ttoggleGlobalIgnoredRecommendation(extensionId: string, shouldIgnore: boolean): void {\n\t\textensionId = extensionId.toLowerCase();\n\t\tconst ignored = this._globalIgnoredRecommendations.indexOf(extensionId) !== -1;\n\t\tif (ignored === shouldIgnore) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis._globalIgnoredRecommendations = shouldIgnore ? [...this._globalIgnoredRecommendations, extensionId] : this._globalIgnoredRecommendations.filter(id => id !== extensionId);\n\t\tthis.storeCachedIgnoredRecommendations(this._globalIgnoredRecommendations);\n\t\tthis._onDidChangeGlobalIgnoredRecommendation.fire({ extensionId, isRecommended: !shouldIgnore });\n\t\tthis._onDidChangeIgnoredRecommendations.fire();\n\t}\n\n\tprivate getCachedIgnoredRecommendations(): string[] {\n\t\tconst ignoredRecommendations: string[] = JSON.parse(this.ignoredRecommendationsValue);\n\t\treturn ignoredRecommendations.map(e => e.toLowerCase());\n\t}\n\n\tprivate onDidStorageChange(): void {\n\t\tif (this.ignoredRecommendationsValue !== this.getStoredIgnoredRecommendationsValue() /* This checks if current window changed the value or not */) {\n\t\t\tthis._ignoredRecommendationsValue = undefined;\n\t\t\tthis._globalIgnoredRecommendations = this.getCachedIgnoredRecommendations();\n\t\t\tthis._onDidChangeIgnoredRecommendations.fire();\n\t\t}\n\t}\n\n\tprivate storeCachedIgnoredRecommendations(ignoredRecommendations: string[]): void {\n\t\tthis.ignoredRecommendationsValue = JSON.stringify(ignoredRecommendations);\n\t}\n\n\tprivate _ignoredRecommendationsValue: string | undefined;\n\tprivate get ignoredRecommendationsValue(): string {\n\t\tif (!this._ignoredRecommendationsValue) {\n\t\t\tthis._ignoredRecommendationsValue = this.getStoredIgnoredRecommendationsValue();\n\t\t}\n\n\t\treturn this._ignoredRecommendationsValue;\n\t}\n\n\tprivate set ignoredRecommendationsValue(ignoredRecommendationsValue: string) {\n\t\tif (this.ignoredRecommendationsValue !== ignoredRecommendationsValue) {\n\t\t\tthis._ignoredRecommendationsValue = ignoredRecommendationsValue;\n\t\t\tthis.setStoredIgnoredRecommendationsValue(ignoredRecommendationsValue);\n\t\t}\n\t}\n\n\tprivate getStoredIgnoredRecommendationsValue(): string {\n\t\treturn this.storageService.get(ignoredRecommendationsStorageKey, StorageScope.PROFILE, '[]');\n\t}\n\n\tprivate setStoredIgnoredRecommendationsValue(value: string): void {\n\t\tthis.storageService.store(ignoredRecommendationsStorageKey, value, StorageScope.PROFILE, StorageTarget.USER);\n\t}\n\n}\n\nregisterSingleton(IExtensionIgnoredRecommendationsService, ExtensionIgnoredRecommendationsService, InstantiationType.Delayed);\n"],
  "mappings": "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",
  "names": []
}
