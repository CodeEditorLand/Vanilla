{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/accessibility/electron-sandbox/accessibilityService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { isLinux, isWindows } from \"../../../../base/common/platform.js\";\nimport { AccessibilityService } from \"../../../../platform/accessibility/browser/accessibilityService.js\";\nimport {\n\tAccessibilitySupport,\n\tIAccessibilityService,\n} from \"../../../../platform/accessibility/common/accessibility.js\";\nimport { IConfigurationService } from \"../../../../platform/configuration/common/configuration.js\";\nimport { IContextKeyService } from \"../../../../platform/contextkey/common/contextkey.js\";\nimport {\n\tInstantiationType,\n\tregisterSingleton,\n} from \"../../../../platform/instantiation/common/extensions.js\";\nimport { ILayoutService } from \"../../../../platform/layout/browser/layoutService.js\";\nimport { INativeHostService } from \"../../../../platform/native/common/native.js\";\nimport { ITelemetryService } from \"../../../../platform/telemetry/common/telemetry.js\";\nimport {\n\ttype IWorkbenchContribution,\n\tWorkbenchPhase,\n\tregisterWorkbenchContribution2,\n} from \"../../../common/contributions.js\";\nimport { IJSONEditingService } from \"../../configuration/common/jsonEditing.js\";\nimport { INativeWorkbenchEnvironmentService } from \"../../environment/electron-sandbox/environmentService.js\";\n\ninterface AccessibilityMetrics {\n\tenabled: boolean;\n}\ntype AccessibilityMetricsClassification = {\n\towner: \"isidorn\";\n\tcomment: \"Helps gain an understanding of when accessibility features are being used\";\n\tenabled: {\n\t\tclassification: \"SystemMetaData\";\n\t\tpurpose: \"FeatureInsight\";\n\t\tcomment: \"Whether or not accessibility features are enabled\";\n\t};\n};\n\nexport class NativeAccessibilityService\n\textends AccessibilityService\n\timplements IAccessibilityService\n{\n\tprivate didSendTelemetry = false;\n\tprivate shouldAlwaysUnderlineAccessKeys: boolean | undefined = undefined;\n\n\tconstructor(\n\t\t@INativeWorkbenchEnvironmentService\n\t\tenvironmentService: INativeWorkbenchEnvironmentService,\n\t\t@IContextKeyService contextKeyService: IContextKeyService,\n\t\t@IConfigurationService configurationService: IConfigurationService,\n\t\t@ILayoutService _layoutService: ILayoutService,\n\t\t@ITelemetryService\n\t\tprivate readonly _telemetryService: ITelemetryService,\n\t\t@INativeHostService\n\t\tprivate readonly nativeHostService: INativeHostService,\n\t) {\n\t\tsuper(contextKeyService, _layoutService, configurationService);\n\t\tthis.setAccessibilitySupport(\n\t\t\tenvironmentService.window.accessibilitySupport\n\t\t\t\t? AccessibilitySupport.Enabled\n\t\t\t\t: AccessibilitySupport.Disabled,\n\t\t);\n\t}\n\n\toverride async alwaysUnderlineAccessKeys(): Promise<boolean> {\n\t\tif (!isWindows) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (typeof this.shouldAlwaysUnderlineAccessKeys !== \"boolean\") {\n\t\t\tconst windowsKeyboardAccessibility =\n\t\t\t\tawait this.nativeHostService.windowsGetStringRegKey(\n\t\t\t\t\t\"HKEY_CURRENT_USER\",\n\t\t\t\t\t\"Control Panel\\\\Accessibility\\\\Keyboard Preference\",\n\t\t\t\t\t\"On\",\n\t\t\t\t);\n\t\t\tthis.shouldAlwaysUnderlineAccessKeys =\n\t\t\t\twindowsKeyboardAccessibility === \"1\";\n\t\t}\n\n\t\treturn this.shouldAlwaysUnderlineAccessKeys;\n\t}\n\n\toverride setAccessibilitySupport(\n\t\taccessibilitySupport: AccessibilitySupport,\n\t): void {\n\t\tsuper.setAccessibilitySupport(accessibilitySupport);\n\n\t\tif (\n\t\t\t!this.didSendTelemetry &&\n\t\t\taccessibilitySupport === AccessibilitySupport.Enabled\n\t\t) {\n\t\t\tthis._telemetryService.publicLog2<\n\t\t\t\tAccessibilityMetrics,\n\t\t\t\tAccessibilityMetricsClassification\n\t\t\t>(\"accessibility\", { enabled: true });\n\t\t\tthis.didSendTelemetry = true;\n\t\t}\n\t}\n}\n\nregisterSingleton(\n\tIAccessibilityService,\n\tNativeAccessibilityService,\n\tInstantiationType.Delayed,\n);\n\n// On linux we do not automatically detect that a screen reader is detected, thus we have to implicitly notify the renderer to enable accessibility when user configures it in settings\nclass LinuxAccessibilityContribution implements IWorkbenchContribution {\n\tstatic readonly ID = \"workbench.contrib.linuxAccessibility\";\n\n\tconstructor(\n\t\t@IJSONEditingService jsonEditingService: IJSONEditingService,\n\t\t@IAccessibilityService accessibilityService: IAccessibilityService,\n\t\t@INativeWorkbenchEnvironmentService environmentService: INativeWorkbenchEnvironmentService,\n\t) {\n\t\tconst forceRendererAccessibility = () => {\n\t\t\tif (accessibilityService.isScreenReaderOptimized()) {\n\t\t\t\tjsonEditingService.write(\n\t\t\t\t\tenvironmentService.argvResource,\n\t\t\t\t\t[{ path: [\"force-renderer-accessibility\"], value: true }],\n\t\t\t\t\ttrue,\n\t\t\t\t);\n\t\t\t}\n\t\t};\n\t\tforceRendererAccessibility();\n\t\taccessibilityService.onDidChangeScreenReaderOptimized(\n\t\t\tforceRendererAccessibility,\n\t\t);\n\t}\n}\n\nif (isLinux) {\n\tregisterWorkbenchContribution2(\n\t\tLinuxAccessibilityContribution.ID,\n\t\tLinuxAccessibilityContribution,\n\t\tWorkbenchPhase.BlockRestore,\n\t);\n}\n"],
  "mappings": ";;;;;;;;;;;;AAKA,SAAS,SAAS,iBAAiB;AACnC,SAAS,4BAA4B;AACrC;AAAA,EACC;AAAA,EACA;AAAA,OACM;AACP,SAAS,6BAA6B;AACtC,SAAS,0BAA0B;AACnC;AAAA,EACC;AAAA,EACA;AAAA,OACM;AACP,SAAS,sBAAsB;AAC/B,SAAS,0BAA0B;AACnC,SAAS,yBAAyB;AAClC;AAAA,EAEC;AAAA,EACA;AAAA,OACM;AACP,SAAS,2BAA2B;AACpC,SAAS,0CAA0C;AAe5C,IAAM,6BAAN,cACE,qBAET;AAAA,EAIC,YAEC,oBACoB,mBACG,sBACP,gBAEC,mBAEA,mBAChB;AACD,UAAM,mBAAmB,gBAAgB,oBAAoB;AAJ5C;AAEA;AAGjB,SAAK;AAAA,MACJ,mBAAmB,OAAO,uBACvB,qBAAqB,UACrB,qBAAqB;AAAA,IACzB;AAAA,EACD;AAAA,EAjED,OA4CA;AAAA;AAAA;AAAA,EACS,mBAAmB;AAAA,EACnB,kCAAuD;AAAA,EAqB/D,MAAe,4BAA8C;AAC5D,QAAI,CAAC,WAAW;AACf,aAAO;AAAA,IACR;AAEA,QAAI,OAAO,KAAK,oCAAoC,WAAW;AAC9D,YAAM,+BACL,MAAM,KAAK,kBAAkB;AAAA,QAC5B;AAAA,QACA;AAAA,QACA;AAAA,MACD;AACD,WAAK,kCACJ,iCAAiC;AAAA,IACnC;AAEA,WAAO,KAAK;AAAA,EACb;AAAA,EAES,wBACR,sBACO;AACP,UAAM,wBAAwB,oBAAoB;AAElD,QACC,CAAC,KAAK,oBACN,yBAAyB,qBAAqB,SAC7C;AACD,WAAK,kBAAkB,WAGrB,iBAAiB,EAAE,SAAS,KAAK,CAAC;AACpC,WAAK,mBAAmB;AAAA,IACzB;AAAA,EACD;AACD;AA7Da,6BAAN;AAAA,EAQJ;AAAA,EAEA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EAEA;AAAA,GAfU;AA+Db;AAAA,EACC;AAAA,EACA;AAAA,EACA,kBAAkB;AACnB;AAGA,IAAM,iCAAN,MAAuE;AAAA,EA/GvE,OA+GuE;AAAA;AAAA;AAAA,EACtE,OAAgB,KAAK;AAAA,EAErB,YACsB,oBACE,sBACa,oBACnC;AACD,UAAM,6BAA6B,6BAAM;AACxC,UAAI,qBAAqB,wBAAwB,GAAG;AACnD,2BAAmB;AAAA,UAClB,mBAAmB;AAAA,UACnB,CAAC,EAAE,MAAM,CAAC,8BAA8B,GAAG,OAAO,KAAK,CAAC;AAAA,UACxD;AAAA,QACD;AAAA,MACD;AAAA,IACD,GARmC;AASnC,+BAA2B;AAC3B,yBAAqB;AAAA,MACpB;AAAA,IACD;AAAA,EACD;AACD;AAtBM,iCAAN;AAAA,EAIG;AAAA,EACA;AAAA,EACA;AAAA,GANG;AAwBN,IAAI,SAAS;AACZ;AAAA,IACC,+BAA+B;AAAA,IAC/B;AAAA,IACA,eAAe;AAAA,EAChB;AACD;",
  "names": []
}
