{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/accessibility/electron-sandbox/accessibilityService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IAccessibilityService, AccessibilitySupport } from '../../../../platform/accessibility/common/accessibility.js';\nimport { isWindows, isLinux } from '../../../../base/common/platform.js';\nimport { INativeWorkbenchEnvironmentService } from '../../environment/electron-sandbox/environmentService.js';\nimport { IContextKeyService } from '../../../../platform/contextkey/common/contextkey.js';\nimport { IConfigurationService } from '../../../../platform/configuration/common/configuration.js';\nimport { AccessibilityService } from '../../../../platform/accessibility/browser/accessibilityService.js';\nimport { InstantiationType, registerSingleton } from '../../../../platform/instantiation/common/extensions.js';\nimport { ITelemetryService } from '../../../../platform/telemetry/common/telemetry.js';\nimport { IJSONEditingService } from '../../configuration/common/jsonEditing.js';\nimport { IWorkbenchContribution, WorkbenchPhase, registerWorkbenchContribution2 } from '../../../common/contributions.js';\nimport { INativeHostService } from '../../../../platform/native/common/native.js';\nimport { ILayoutService } from '../../../../platform/layout/browser/layoutService.js';\n\ninterface AccessibilityMetrics {\n\tenabled: boolean;\n}\ntype AccessibilityMetricsClassification = {\n\towner: 'isidorn';\n\tcomment: 'Helps gain an understanding of when accessibility features are being used';\n\tenabled: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'Whether or not accessibility features are enabled' };\n};\n\nexport class NativeAccessibilityService extends AccessibilityService implements IAccessibilityService {\n\n\tprivate didSendTelemetry = false;\n\tprivate shouldAlwaysUnderlineAccessKeys: boolean | undefined = undefined;\n\n\tconstructor(\n\t\t@INativeWorkbenchEnvironmentService environmentService: INativeWorkbenchEnvironmentService,\n\t\t@IContextKeyService contextKeyService: IContextKeyService,\n\t\t@IConfigurationService configurationService: IConfigurationService,\n\t\t@ILayoutService _layoutService: ILayoutService,\n\t\t@ITelemetryService private readonly _telemetryService: ITelemetryService,\n\t\t@INativeHostService private readonly nativeHostService: INativeHostService\n\t) {\n\t\tsuper(contextKeyService, _layoutService, configurationService);\n\t\tthis.setAccessibilitySupport(environmentService.window.accessibilitySupport ? AccessibilitySupport.Enabled : AccessibilitySupport.Disabled);\n\t}\n\n\toverride async alwaysUnderlineAccessKeys(): Promise<boolean> {\n\t\tif (!isWindows) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (typeof this.shouldAlwaysUnderlineAccessKeys !== 'boolean') {\n\t\t\tconst windowsKeyboardAccessibility = await this.nativeHostService.windowsGetStringRegKey('HKEY_CURRENT_USER', 'Control Panel\\\\Accessibility\\\\Keyboard Preference', 'On');\n\t\t\tthis.shouldAlwaysUnderlineAccessKeys = (windowsKeyboardAccessibility === '1');\n\t\t}\n\n\t\treturn this.shouldAlwaysUnderlineAccessKeys;\n\t}\n\n\toverride setAccessibilitySupport(accessibilitySupport: AccessibilitySupport): void {\n\t\tsuper.setAccessibilitySupport(accessibilitySupport);\n\n\t\tif (!this.didSendTelemetry && accessibilitySupport === AccessibilitySupport.Enabled) {\n\t\t\tthis._telemetryService.publicLog2<AccessibilityMetrics, AccessibilityMetricsClassification>('accessibility', { enabled: true });\n\t\t\tthis.didSendTelemetry = true;\n\t\t}\n\t}\n}\n\nregisterSingleton(IAccessibilityService, NativeAccessibilityService, InstantiationType.Delayed);\n\n// On linux we do not automatically detect that a screen reader is detected, thus we have to implicitly notify the renderer to enable accessibility when user configures it in settings\nclass LinuxAccessibilityContribution implements IWorkbenchContribution {\n\n\tstatic readonly ID = 'workbench.contrib.linuxAccessibility';\n\n\tconstructor(\n\t\t@IJSONEditingService jsonEditingService: IJSONEditingService,\n\t\t@IAccessibilityService accessibilityService: IAccessibilityService,\n\t\t@INativeWorkbenchEnvironmentService environmentService: INativeWorkbenchEnvironmentService\n\t) {\n\t\tconst forceRendererAccessibility = () => {\n\t\t\tif (accessibilityService.isScreenReaderOptimized()) {\n\t\t\t\tjsonEditingService.write(environmentService.argvResource, [{ path: ['force-renderer-accessibility'], value: true }], true);\n\t\t\t}\n\t\t};\n\t\tforceRendererAccessibility();\n\t\taccessibilityService.onDidChangeScreenReaderOptimized(forceRendererAccessibility);\n\t}\n}\n\nif (isLinux) {\n\tregisterWorkbenchContribution2(LinuxAccessibilityContribution.ID, LinuxAccessibilityContribution, WorkbenchPhase.BlockRestore);\n}\n"],
  "mappings": ";;;;;;;;;;;;AAKA,SAAS,uBAAuB,4BAA4B;AAC5D,SAAS,WAAW,eAAe;AACnC,SAAS,0CAA0C;AACnD,SAAS,0BAA0B;AACnC,SAAS,6BAA6B;AACtC,SAAS,4BAA4B;AACrC,SAAS,mBAAmB,yBAAyB;AACrD,SAAS,yBAAyB;AAClC,SAAS,2BAA2B;AACpC,SAAS,wBAAwB,gBAAgB,sCAAsC;AACvF,SAAS,0BAA0B;AACnC,SAAS,sBAAsB;AAWxB,IAAM,6BAAN,cAAyC,qBAAsD;AAAA,EAKrG,YACqC,oBAChB,mBACG,sBACP,gBACoB,mBACC,mBACpC;AACD,UAAM,mBAAmB,gBAAgB,oBAAoB;AAHzB;AACC;AAGrC,SAAK,wBAAwB,mBAAmB,OAAO,uBAAuB,qBAAqB,UAAU,qBAAqB,QAAQ;AAAA,EAC3I;AAAA,EA1CD,OA2BsG;AAAA;AAAA;AAAA,EAE7F,mBAAmB;AAAA,EACnB,kCAAuD;AAAA,EAc/D,MAAe,4BAA8C;AAC5D,QAAI,CAAC,WAAW;AACf,aAAO;AAAA,IACR;AAEA,QAAI,OAAO,KAAK,oCAAoC,WAAW;AAC9D,YAAM,+BAA+B,MAAM,KAAK,kBAAkB,uBAAuB,qBAAqB,qDAAqD,IAAI;AACvK,WAAK,kCAAmC,iCAAiC;AAAA,IAC1E;AAEA,WAAO,KAAK;AAAA,EACb;AAAA,EAES,wBAAwB,sBAAkD;AAClF,UAAM,wBAAwB,oBAAoB;AAElD,QAAI,CAAC,KAAK,oBAAoB,yBAAyB,qBAAqB,SAAS;AACpF,WAAK,kBAAkB,WAAqE,iBAAiB,EAAE,SAAS,KAAK,CAAC;AAC9H,WAAK,mBAAmB;AAAA,IACzB;AAAA,EACD;AACD;AAtCa,6BAAN;AAAA,EAMJ;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,GAXU;AAwCb,kBAAkB,uBAAuB,4BAA4B,kBAAkB,OAAO;AAG9F,IAAM,iCAAN,MAAuE;AAAA,EAtEvE,OAsEuE;AAAA;AAAA;AAAA,EAEtE,OAAgB,KAAK;AAAA,EAErB,YACsB,oBACE,sBACa,oBACnC;AACD,UAAM,6BAA6B,6BAAM;AACxC,UAAI,qBAAqB,wBAAwB,GAAG;AACnD,2BAAmB,MAAM,mBAAmB,cAAc,CAAC,EAAE,MAAM,CAAC,8BAA8B,GAAG,OAAO,KAAK,CAAC,GAAG,IAAI;AAAA,MAC1H;AAAA,IACD,GAJmC;AAKnC,+BAA2B;AAC3B,yBAAqB,iCAAiC,0BAA0B;AAAA,EACjF;AACD;AAjBM,iCAAN;AAAA,EAKG;AAAA,EACA;AAAA,EACA;AAAA,GAPG;AAmBN,IAAI,SAAS;AACZ,iCAA+B,+BAA+B,IAAI,gCAAgC,eAAe,YAAY;AAC9H;",
  "names": []
}
