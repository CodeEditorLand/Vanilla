var b=Object.defineProperty;var v=Object.getOwnPropertyDescriptor;var d=(o,s,e,r)=>{for(var i=r>1?void 0:r?v(s,e):s,c=o.length-1,l;c>=0;c--)(l=o[c])&&(i=(r?l(s,e,i):l(i))||i);return r&&i&&b(s,e,i),i},t=(o,s)=>(e,r)=>s(e,r,o);import{IAccessibilityService as m,AccessibilitySupport as y}from"../../../../platform/accessibility/common/accessibility.js";import{isWindows as S,isLinux as f}from"../../../../base/common/platform.js";import{INativeWorkbenchEnvironmentService as p}from"../../environment/electron-sandbox/environmentService.js";import{IContextKeyService as u}from"../../../../platform/contextkey/common/contextkey.js";import{IConfigurationService as h}from"../../../../platform/configuration/common/configuration.js";import{AccessibilityService as I}from"../../../../platform/accessibility/browser/accessibilityService.js";import{InstantiationType as A,registerSingleton as w}from"../../../../platform/instantiation/common/extensions.js";import{ITelemetryService as g}from"../../../../platform/telemetry/common/telemetry.js";import{IJSONEditingService as K}from"../../configuration/common/jsonEditing.js";import{WorkbenchPhase as E,registerWorkbenchContribution2 as k}from"../../../common/contributions.js";import{INativeHostService as C}from"../../../../platform/native/common/native.js";import{ILayoutService as R}from"../../../../platform/layout/browser/layoutService.js";let a=class extends I{constructor(e,r,i,c,l,W){super(r,c,i);this._telemetryService=l;this.nativeHostService=W;this.setAccessibilitySupport(e.window.accessibilitySupport?y.Enabled:y.Disabled)}didSendTelemetry=!1;shouldAlwaysUnderlineAccessKeys=void 0;async alwaysUnderlineAccessKeys(){if(!S)return!1;if(typeof this.shouldAlwaysUnderlineAccessKeys!="boolean"){const e=await this.nativeHostService.windowsGetStringRegKey("HKEY_CURRENT_USER","Control Panel\\Accessibility\\Keyboard Preference","On");this.shouldAlwaysUnderlineAccessKeys=e==="1"}return this.shouldAlwaysUnderlineAccessKeys}setAccessibilitySupport(e){super.setAccessibilitySupport(e),!this.didSendTelemetry&&e===y.Enabled&&(this._telemetryService.publicLog2("accessibility",{enabled:!0}),this.didSendTelemetry=!0)}};a=d([t(0,p),t(1,u),t(2,h),t(3,R),t(4,g),t(5,C)],a),w(m,a,A.Delayed);let n=class{static ID="workbench.contrib.linuxAccessibility";constructor(s,e,r){const i=()=>{e.isScreenReaderOptimized()&&s.write(r.argvResource,[{path:["force-renderer-accessibility"],value:!0}],!0)};i(),e.onDidChangeScreenReaderOptimized(i)}};n=d([t(0,K),t(1,m),t(2,p)],n),f&&k(n.ID,n,E.BlockRestore);export{a as NativeAccessibilityService};
