{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/activity/common/activity.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Codicon } from \"../../../../base/common/codicons.js\";\nimport { Color } from \"../../../../base/common/color.js\";\nimport type { Event } from \"../../../../base/common/event.js\";\nimport type { IDisposable } from \"../../../../base/common/lifecycle.js\";\nimport type { ThemeIcon } from \"../../../../base/common/themables.js\";\nimport { localize } from \"../../../../nls.js\";\nimport { createDecorator } from \"../../../../platform/instantiation/common/instantiation.js\";\nimport { registerColor } from \"../../../../platform/theme/common/colorUtils.js\";\nimport type { IColorTheme } from \"../../../../platform/theme/common/themeService.js\";\nimport type { ViewContainer } from \"../../../common/views.js\";\n\nexport interface IActivity {\n\treadonly badge: IBadge;\n\treadonly priority?: number;\n}\n\nexport const IActivityService =\n\tcreateDecorator<IActivityService>(\"activityService\");\n\nexport interface IActivityService {\n\treadonly _serviceBrand: undefined;\n\n\t/**\n\t * Emitted when activity changes for a view container or when the activity of the global actions change.\n\t */\n\treadonly onDidChangeActivity: Event<string | ViewContainer>;\n\n\t/**\n\t * Show activity for the given view container\n\t */\n\tshowViewContainerActivity(\n\t\tviewContainerId: string,\n\t\tbadge: IActivity,\n\t): IDisposable;\n\n\t/**\n\t * Returns the activity for the given view container\n\t */\n\tgetViewContainerActivities(viewContainerId: string): IActivity[];\n\n\t/**\n\t * Show activity for the given view\n\t */\n\tshowViewActivity(viewId: string, badge: IActivity): IDisposable;\n\n\t/**\n\t * Show accounts activity\n\t */\n\tshowAccountsActivity(activity: IActivity): IDisposable;\n\n\t/**\n\t * Show global activity\n\t */\n\tshowGlobalActivity(activity: IActivity): IDisposable;\n\n\t/**\n\t * Return the activity for the given action\n\t */\n\tgetActivity(id: string): IActivity[];\n}\n\nexport interface IBadge {\n\tgetDescription(): string;\n\tgetColors(theme: IColorTheme): IBadgeStyles | undefined;\n}\n\nexport interface IBadgeStyles {\n\treadonly badgeBackground: Color | undefined;\n\treadonly badgeForeground: Color | undefined;\n\treadonly badgeBorder: Color | undefined;\n}\n\nclass BaseBadge implements IBadge {\n\tconstructor(\n\t\tprotected readonly descriptorFn: (arg: any) => string,\n\t\tprivate readonly stylesFn:\n\t\t\t| ((theme: IColorTheme) => IBadgeStyles | undefined)\n\t\t\t| undefined,\n\t) {}\n\n\tgetDescription(): string {\n\t\treturn this.descriptorFn(null);\n\t}\n\n\tgetColors(theme: IColorTheme): IBadgeStyles | undefined {\n\t\treturn this.stylesFn?.(theme);\n\t}\n}\n\nexport class NumberBadge extends BaseBadge {\n\tconstructor(\n\t\treadonly number: number,\n\t\tdescriptorFn: (num: number) => string,\n\t) {\n\t\tsuper(descriptorFn, undefined);\n\n\t\tthis.number = number;\n\t}\n\n\toverride getDescription(): string {\n\t\treturn this.descriptorFn(this.number);\n\t}\n}\n\nexport class IconBadge extends BaseBadge {\n\tconstructor(\n\t\treadonly icon: ThemeIcon,\n\t\tdescriptorFn: () => string,\n\t\tstylesFn?: (theme: IColorTheme) => IBadgeStyles | undefined,\n\t) {\n\t\tsuper(descriptorFn, stylesFn);\n\t}\n}\n\nexport class ProgressBadge extends BaseBadge {\n\tconstructor(descriptorFn: () => string) {\n\t\tsuper(descriptorFn, undefined);\n\t}\n}\n\nexport class WarningBadge extends IconBadge {\n\tconstructor(descriptorFn: () => string) {\n\t\tsuper(Codicon.warning, descriptorFn, (theme: IColorTheme) => ({\n\t\t\tbadgeBackground: theme.getColor(activityWarningBadgeBackground),\n\t\t\tbadgeForeground: theme.getColor(activityWarningBadgeForeground),\n\t\t\tbadgeBorder: undefined,\n\t\t}));\n\t}\n}\n\nexport class ErrorBadge extends IconBadge {\n\tconstructor(descriptorFn: () => string) {\n\t\tsuper(Codicon.error, descriptorFn, (theme: IColorTheme) => ({\n\t\t\tbadgeBackground: theme.getColor(activityErrorBadgeBackground),\n\t\t\tbadgeForeground: theme.getColor(activityErrorBadgeForeground),\n\t\t\tbadgeBorder: undefined,\n\t\t}));\n\t}\n}\n\nconst activityWarningBadgeForeground = registerColor(\n\t\"activityWarningBadge.foreground\",\n\t{\n\t\tdark: Color.black.lighten(0.2),\n\t\tlight: Color.white,\n\t\thcDark: null,\n\t\thcLight: Color.black.lighten(0.2),\n\t},\n\tlocalize(\n\t\t\"activityWarningBadge.foreground\",\n\t\t\"Foreground color of the warning activity badge\",\n\t),\n);\n\nconst activityWarningBadgeBackground = registerColor(\n\t\"activityWarningBadge.background\",\n\t{ dark: \"#CCA700\", light: \"#BF8803\", hcDark: null, hcLight: \"#CCA700\" },\n\tlocalize(\n\t\t\"activityWarningBadge.background\",\n\t\t\"Background color of the warning activity badge\",\n\t),\n);\n\nconst activityErrorBadgeForeground = registerColor(\n\t\"activityErrorBadge.foreground\",\n\t{\n\t\tdark: Color.black.lighten(0.2),\n\t\tlight: Color.white,\n\t\thcDark: null,\n\t\thcLight: Color.black.lighten(0.2),\n\t},\n\tlocalize(\n\t\t\"activityErrorBadge.foreground\",\n\t\t\"Foreground color of the error activity badge\",\n\t),\n);\n\nconst activityErrorBadgeBackground = registerColor(\n\t\"activityErrorBadge.background\",\n\t{ dark: \"#F14C4C\", light: \"#E51400\", hcDark: null, hcLight: \"#F14C4C\" },\n\tlocalize(\n\t\t\"activityErrorBadge.background\",\n\t\t\"Background color of the error activity badge\",\n\t),\n);\n"],
  "mappings": ";;AAKA,SAAS,eAAe;AACxB,SAAS,aAAa;AAItB,SAAS,gBAAgB;AACzB,SAAS,uBAAuB;AAChC,SAAS,qBAAqB;AASvB,MAAM,mBACZ,gBAAkC,iBAAiB;AAuDpD,MAAM,UAA4B;AAAA,EACjC,YACoB,cACF,UAGhB;AAJkB;AACF;AAAA,EAGf;AAAA,EAnFJ,OA6EkC;AAAA;AAAA;AAAA,EAQjC,iBAAyB;AACxB,WAAO,KAAK,aAAa,IAAI;AAAA,EAC9B;AAAA,EAEA,UAAU,OAA8C;AACvD,WAAO,KAAK,WAAW,KAAK;AAAA,EAC7B;AACD;AAEO,MAAM,oBAAoB,UAAU;AAAA,EAC1C,YACU,QACT,cACC;AACD,UAAM,cAAc,MAAS;AAHpB;AAKT,SAAK,SAAS;AAAA,EACf;AAAA,EAtGD,OA8F2C;AAAA;AAAA;AAAA,EAUjC,iBAAyB;AACjC,WAAO,KAAK,aAAa,KAAK,MAAM;AAAA,EACrC;AACD;AAEO,MAAM,kBAAkB,UAAU;AAAA,EACxC,YACU,MACT,cACA,UACC;AACD,UAAM,cAAc,QAAQ;AAJnB;AAAA,EAKV;AAAA,EApHD,OA6GyC;AAAA;AAAA;AAQzC;AAEO,MAAM,sBAAsB,UAAU;AAAA,EAvH7C,OAuH6C;AAAA;AAAA;AAAA,EAC5C,YAAY,cAA4B;AACvC,UAAM,cAAc,MAAS;AAAA,EAC9B;AACD;AAEO,MAAM,qBAAqB,UAAU;AAAA,EA7H5C,OA6H4C;AAAA;AAAA;AAAA,EAC3C,YAAY,cAA4B;AACvC,UAAM,QAAQ,SAAS,cAAc,CAAC,WAAwB;AAAA,MAC7D,iBAAiB,MAAM,SAAS,8BAA8B;AAAA,MAC9D,iBAAiB,MAAM,SAAS,8BAA8B;AAAA,MAC9D,aAAa;AAAA,IACd,EAAE;AAAA,EACH;AACD;AAEO,MAAM,mBAAmB,UAAU;AAAA,EAvI1C,OAuI0C;AAAA;AAAA;AAAA,EACzC,YAAY,cAA4B;AACvC,UAAM,QAAQ,OAAO,cAAc,CAAC,WAAwB;AAAA,MAC3D,iBAAiB,MAAM,SAAS,4BAA4B;AAAA,MAC5D,iBAAiB,MAAM,SAAS,4BAA4B;AAAA,MAC5D,aAAa;AAAA,IACd,EAAE;AAAA,EACH;AACD;AAEA,MAAM,iCAAiC;AAAA,EACtC;AAAA,EACA;AAAA,IACC,MAAM,MAAM,MAAM,QAAQ,GAAG;AAAA,IAC7B,OAAO,MAAM;AAAA,IACb,QAAQ;AAAA,IACR,SAAS,MAAM,MAAM,QAAQ,GAAG;AAAA,EACjC;AAAA,EACA;AAAA,IACC;AAAA,IACA;AAAA,EACD;AACD;AAEA,MAAM,iCAAiC;AAAA,EACtC;AAAA,EACA,EAAE,MAAM,WAAW,OAAO,WAAW,QAAQ,MAAM,SAAS,UAAU;AAAA,EACtE;AAAA,IACC;AAAA,IACA;AAAA,EACD;AACD;AAEA,MAAM,+BAA+B;AAAA,EACpC;AAAA,EACA;AAAA,IACC,MAAM,MAAM,MAAM,QAAQ,GAAG;AAAA,IAC7B,OAAO,MAAM;AAAA,IACb,QAAQ;AAAA,IACR,SAAS,MAAM,MAAM,QAAQ,GAAG;AAAA,EACjC;AAAA,EACA;AAAA,IACC;AAAA,IACA;AAAA,EACD;AACD;AAEA,MAAM,+BAA+B;AAAA,EACpC;AAAA,EACA,EAAE,MAAM,WAAW,OAAO,WAAW,QAAQ,MAAM,SAAS,UAAU;AAAA,EACtE;AAAA,IACC;AAAA,IACA;AAAA,EACD;AACD;",
  "names": []
}
