{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/activity/common/activity.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IDisposable } from '../../../../base/common/lifecycle.js';\nimport { createDecorator } from '../../../../platform/instantiation/common/instantiation.js';\nimport { ThemeIcon } from '../../../../base/common/themables.js';\nimport { Event } from '../../../../base/common/event.js';\nimport { ViewContainer } from '../../../common/views.js';\nimport { IColorTheme } from '../../../../platform/theme/common/themeService.js';\nimport { Color } from '../../../../base/common/color.js';\nimport { registerColor } from '../../../../platform/theme/common/colorUtils.js';\nimport { localize } from '../../../../nls.js';\nimport { Codicon } from '../../../../base/common/codicons.js';\n\nexport interface IActivity {\n\treadonly badge: IBadge;\n\treadonly priority?: number;\n}\n\nexport const IActivityService = createDecorator<IActivityService>('activityService');\n\nexport interface IActivityService {\n\n\treadonly _serviceBrand: undefined;\n\n\t/**\n\t * Emitted when activity changes for a view container or when the activity of the global actions change.\n\t */\n\treadonly onDidChangeActivity: Event<string | ViewContainer>;\n\n\t/**\n\t * Show activity for the given view container\n\t */\n\tshowViewContainerActivity(viewContainerId: string, badge: IActivity): IDisposable;\n\n\t/**\n\t * Returns the activity for the given view container\n\t */\n\tgetViewContainerActivities(viewContainerId: string): IActivity[];\n\n\t/**\n\t * Show activity for the given view\n\t */\n\tshowViewActivity(viewId: string, badge: IActivity): IDisposable;\n\n\t/**\n\t * Show accounts activity\n\t */\n\tshowAccountsActivity(activity: IActivity): IDisposable;\n\n\t/**\n\t * Show global activity\n\t */\n\tshowGlobalActivity(activity: IActivity): IDisposable;\n\n\t/**\n\t * Return the activity for the given action\n\t */\n\tgetActivity(id: string): IActivity[];\n}\n\nexport interface IBadge {\n\tgetDescription(): string;\n\tgetColors(theme: IColorTheme): IBadgeStyles | undefined;\n}\n\nexport interface IBadgeStyles {\n\treadonly badgeBackground: Color | undefined;\n\treadonly badgeForeground: Color | undefined;\n\treadonly badgeBorder: Color | undefined;\n}\n\nclass BaseBadge implements IBadge {\n\n\tconstructor(\n\t\tprotected readonly descriptorFn: (arg: any) => string,\n\t\tprivate readonly stylesFn: ((theme: IColorTheme) => IBadgeStyles | undefined) | undefined,\n\t) {\n\t}\n\n\tgetDescription(): string {\n\t\treturn this.descriptorFn(null);\n\t}\n\n\tgetColors(theme: IColorTheme): IBadgeStyles | undefined {\n\t\treturn this.stylesFn?.(theme);\n\t}\n}\n\nexport class NumberBadge extends BaseBadge {\n\n\tconstructor(readonly number: number, descriptorFn: (num: number) => string) {\n\t\tsuper(descriptorFn, undefined);\n\n\t\tthis.number = number;\n\t}\n\n\toverride getDescription(): string {\n\t\treturn this.descriptorFn(this.number);\n\t}\n}\n\nexport class IconBadge extends BaseBadge {\n\tconstructor(\n\t\treadonly icon: ThemeIcon,\n\t\tdescriptorFn: () => string,\n\t\tstylesFn?: (theme: IColorTheme) => IBadgeStyles | undefined,\n\t) {\n\t\tsuper(descriptorFn, stylesFn);\n\t}\n}\n\nexport class ProgressBadge extends BaseBadge {\n\tconstructor(descriptorFn: () => string) {\n\t\tsuper(descriptorFn, undefined);\n\t}\n}\n\nexport class WarningBadge extends IconBadge {\n\tconstructor(descriptorFn: () => string) {\n\t\tsuper(Codicon.warning, descriptorFn, (theme: IColorTheme) => ({\n\t\t\tbadgeBackground: theme.getColor(activityWarningBadgeBackground),\n\t\t\tbadgeForeground: theme.getColor(activityWarningBadgeForeground),\n\t\t\tbadgeBorder: undefined,\n\t\t}));\n\t}\n}\n\nexport class ErrorBadge extends IconBadge {\n\tconstructor(descriptorFn: () => string) {\n\t\tsuper(Codicon.error, descriptorFn, (theme: IColorTheme) => ({\n\t\t\tbadgeBackground: theme.getColor(activityErrorBadgeBackground),\n\t\t\tbadgeForeground: theme.getColor(activityErrorBadgeForeground),\n\t\t\tbadgeBorder: undefined,\n\t\t}));\n\t}\n}\n\nconst activityWarningBadgeForeground = registerColor('activityWarningBadge.foreground',\n\t{ dark: Color.black.lighten(0.2), light: Color.white, hcDark: null, hcLight: null },\n\tlocalize('activityWarningBadge.foreground', 'Foreground color of the warning activity badge'));\n\nconst activityWarningBadgeBackground = registerColor('activityWarningBadge.background',\n\t{ dark: '#CCA700', light: '#BF8803', hcDark: null, hcLight: null },\n\tlocalize('activityWarningBadge.background', 'Background color of the warning activity badge'));\n\nconst activityErrorBadgeForeground = registerColor('activityErrorBadge.foreground',\n\t{ dark: Color.black.lighten(0.2), light: Color.white, hcDark: null, hcLight: null },\n\tlocalize('activityErrorBadge.foreground', 'Foreground color of the error activity badge'));\n\nconst activityErrorBadgeBackground = registerColor('activityErrorBadge.background',\n\t{ dark: '#F14C4C', light: '#E51400', hcDark: null, hcLight: null },\n\tlocalize('activityErrorBadge.background', 'Background color of the error activity badge'));\n"],
  "mappings": ";;AAKA,SAAS,mBAAmB;AAC5B,SAAS,uBAAuB;AAChC,SAAS,iBAAiB;AAC1B,SAAS,aAAa;AACtB,SAAS,qBAAqB;AAC9B,SAAS,mBAAmB;AAC5B,SAAS,aAAa;AACtB,SAAS,qBAAqB;AAC9B,SAAS,gBAAgB;AACzB,SAAS,eAAe;AAOjB,MAAM,mBAAmB,gBAAkC,iBAAiB;AAqDnF,MAAM,UAA4B;AAAA,EAEjC,YACoB,cACF,UAChB;AAFkB;AACF;AAAA,EAElB;AAAA,EAhFD,OA0EkC;AAAA;AAAA;AAAA,EAQjC,iBAAyB;AACxB,WAAO,KAAK,aAAa,IAAI;AAAA,EAC9B;AAAA,EAEA,UAAU,OAA8C;AACvD,WAAO,KAAK,WAAW,KAAK;AAAA,EAC7B;AACD;AAEO,MAAM,oBAAoB,UAAU;AAAA,EAE1C,YAAqB,QAAgB,cAAuC;AAC3E,UAAM,cAAc,MAAS;AADT;AAGpB,SAAK,SAAS;AAAA,EACf;AAAA,EAjGD,OA2F2C;AAAA;AAAA;AAAA,EAQjC,iBAAyB;AACjC,WAAO,KAAK,aAAa,KAAK,MAAM;AAAA,EACrC;AACD;AAEO,MAAM,kBAAkB,UAAU;AAAA,EACxC,YACU,MACT,cACA,UACC;AACD,UAAM,cAAc,QAAQ;AAJnB;AAAA,EAKV;AAAA,EA/GD,OAwGyC;AAAA;AAAA;AAQzC;AAEO,MAAM,sBAAsB,UAAU;AAAA,EAlH7C,OAkH6C;AAAA;AAAA;AAAA,EAC5C,YAAY,cAA4B;AACvC,UAAM,cAAc,MAAS;AAAA,EAC9B;AACD;AAEO,MAAM,qBAAqB,UAAU;AAAA,EAxH5C,OAwH4C;AAAA;AAAA;AAAA,EAC3C,YAAY,cAA4B;AACvC,UAAM,QAAQ,SAAS,cAAc,CAAC,WAAwB;AAAA,MAC7D,iBAAiB,MAAM,SAAS,8BAA8B;AAAA,MAC9D,iBAAiB,MAAM,SAAS,8BAA8B;AAAA,MAC9D,aAAa;AAAA,IACd,EAAE;AAAA,EACH;AACD;AAEO,MAAM,mBAAmB,UAAU;AAAA,EAlI1C,OAkI0C;AAAA;AAAA;AAAA,EACzC,YAAY,cAA4B;AACvC,UAAM,QAAQ,OAAO,cAAc,CAAC,WAAwB;AAAA,MAC3D,iBAAiB,MAAM,SAAS,4BAA4B;AAAA,MAC5D,iBAAiB,MAAM,SAAS,4BAA4B;AAAA,MAC5D,aAAa;AAAA,IACd,EAAE;AAAA,EACH;AACD;AAEA,MAAM,iCAAiC;AAAA,EAAc;AAAA,EACpD,EAAE,MAAM,MAAM,MAAM,QAAQ,GAAG,GAAG,OAAO,MAAM,OAAO,QAAQ,MAAM,SAAS,KAAK;AAAA,EAClF,SAAS,mCAAmC,gDAAgD;AAAC;AAE9F,MAAM,iCAAiC;AAAA,EAAc;AAAA,EACpD,EAAE,MAAM,WAAW,OAAO,WAAW,QAAQ,MAAM,SAAS,KAAK;AAAA,EACjE,SAAS,mCAAmC,gDAAgD;AAAC;AAE9F,MAAM,+BAA+B;AAAA,EAAc;AAAA,EAClD,EAAE,MAAM,MAAM,MAAM,QAAQ,GAAG,GAAG,OAAO,MAAM,OAAO,QAAQ,MAAM,SAAS,KAAK;AAAA,EAClF,SAAS,iCAAiC,8CAA8C;AAAC;AAE1F,MAAM,+BAA+B;AAAA,EAAc;AAAA,EAClD,EAAE,MAAM,WAAW,OAAO,WAAW,QAAQ,MAAM,SAAS,KAAK;AAAA,EACjE,SAAS,iCAAiC,8CAA8C;AAAC;",
  "names": []
}
