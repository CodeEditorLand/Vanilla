{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/activity/browser/activityService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Emitter, Event } from \"../../../../base/common/event.js\";\nimport {\n\tDisposable,\n\ttype IDisposable,\n\ttoDisposable,\n} from \"../../../../base/common/lifecycle.js\";\nimport { isUndefined } from \"../../../../base/common/types.js\";\nimport {\n\tInstantiationType,\n\tregisterSingleton,\n} from \"../../../../platform/instantiation/common/extensions.js\";\nimport { IInstantiationService } from \"../../../../platform/instantiation/common/instantiation.js\";\nimport {\n\tACCOUNTS_ACTIVITY_ID,\n\tGLOBAL_ACTIVITY_ID,\n} from \"../../../common/activity.js\";\nimport {\n\tIViewDescriptorService,\n\ttype ViewContainer,\n} from \"../../../common/views.js\";\nimport { type IActivity, IActivityService } from \"../common/activity.js\";\n\nclass ViewContainerActivityByView extends Disposable {\n\tprivate activity: IActivity | undefined = undefined;\n\tprivate activityDisposable: IDisposable = Disposable.None;\n\n\tconstructor(\n\t\tprivate readonly viewId: string,\n\t\t@IViewDescriptorService\n\t\tprivate readonly viewDescriptorService: IViewDescriptorService,\n\t\t@IActivityService private readonly activityService: IActivityService,\n\t) {\n\t\tsuper();\n\t\tthis._register(\n\t\t\tEvent.filter(this.viewDescriptorService.onDidChangeContainer, (e) =>\n\t\t\t\te.views.some((view) => view.id === viewId),\n\t\t\t)(() => this.update()),\n\t\t);\n\t\tthis._register(\n\t\t\tEvent.filter(this.viewDescriptorService.onDidChangeLocation, (e) =>\n\t\t\t\te.views.some((view) => view.id === viewId),\n\t\t\t)(() => this.update()),\n\t\t);\n\t}\n\n\tsetActivity(activity: IActivity): void {\n\t\tthis.activity = activity;\n\t\tthis.update();\n\t}\n\n\tclearActivity(): void {\n\t\tthis.activity = undefined;\n\t\tthis.update();\n\t}\n\n\tprivate update(): void {\n\t\tthis.activityDisposable.dispose();\n\t\tconst container = this.viewDescriptorService.getViewContainerByViewId(\n\t\t\tthis.viewId,\n\t\t);\n\t\tif (container && this.activity) {\n\t\t\tthis.activityDisposable =\n\t\t\t\tthis.activityService.showViewContainerActivity(\n\t\t\t\t\tcontainer.id,\n\t\t\t\t\tthis.activity,\n\t\t\t\t);\n\t\t}\n\t}\n\n\toverride dispose() {\n\t\tthis.activityDisposable.dispose();\n\t\tsuper.dispose();\n\t}\n}\n\ninterface IViewActivity {\n\tid: number;\n\treadonly activity: ViewContainerActivityByView;\n}\n\nexport class ActivityService extends Disposable implements IActivityService {\n\tpublic _serviceBrand: undefined;\n\n\tprivate readonly viewActivities = new Map<string, IViewActivity>();\n\n\tprivate readonly _onDidChangeActivity = this._register(\n\t\tnew Emitter<string | ViewContainer>(),\n\t);\n\treadonly onDidChangeActivity = this._onDidChangeActivity.event;\n\n\tprivate readonly viewContainerActivities = new Map<string, IActivity[]>();\n\tprivate readonly globalActivities = new Map<string, IActivity[]>();\n\n\tconstructor(\n\t\t@IViewDescriptorService\n\t\tprivate readonly viewDescriptorService: IViewDescriptorService,\n\t\t@IInstantiationService\n\t\tprivate readonly instantiationService: IInstantiationService,\n\t) {\n\t\tsuper();\n\t}\n\n\tshowViewContainerActivity(\n\t\tviewContainerId: string,\n\t\tactivity: IActivity,\n\t): IDisposable {\n\t\tconst viewContainer =\n\t\t\tthis.viewDescriptorService.getViewContainerById(viewContainerId);\n\t\tif (viewContainer) {\n\t\t\tlet activities = this.viewContainerActivities.get(viewContainerId);\n\t\t\tif (!activities) {\n\t\t\t\tactivities = [];\n\t\t\t\tthis.viewContainerActivities.set(viewContainerId, activities);\n\t\t\t}\n\t\t\tfor (let i = 0; i <= activities.length; i++) {\n\t\t\t\tif (i === activities.length || isUndefined(activity.priority)) {\n\t\t\t\t\tactivities.push(activity);\n\t\t\t\t\tbreak;\n\t\t\t\t} else if (\n\t\t\t\t\tisUndefined(activities[i].priority) ||\n\t\t\t\t\tactivities[i].priority! <= activity.priority\n\t\t\t\t) {\n\t\t\t\t\tactivities.splice(i, 0, activity);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis._onDidChangeActivity.fire(viewContainer);\n\t\t\treturn toDisposable(() => {\n\t\t\t\tactivities.splice(activities.indexOf(activity), 1);\n\t\t\t\tif (activities.length === 0) {\n\t\t\t\t\tthis.viewContainerActivities.delete(viewContainerId);\n\t\t\t\t}\n\t\t\t\tthis._onDidChangeActivity.fire(viewContainer);\n\t\t\t});\n\t\t}\n\t\treturn Disposable.None;\n\t}\n\n\tgetViewContainerActivities(viewContainerId: string): IActivity[] {\n\t\tconst viewContainer =\n\t\t\tthis.viewDescriptorService.getViewContainerById(viewContainerId);\n\t\tif (viewContainer) {\n\t\t\treturn this.viewContainerActivities.get(viewContainerId) ?? [];\n\t\t}\n\t\treturn [];\n\t}\n\n\tshowViewActivity(viewId: string, activity: IActivity): IDisposable {\n\t\tlet maybeItem = this.viewActivities.get(viewId);\n\n\t\tif (maybeItem) {\n\t\t\tmaybeItem.id++;\n\t\t} else {\n\t\t\tmaybeItem = {\n\t\t\t\tid: 1,\n\t\t\t\tactivity: this.instantiationService.createInstance(\n\t\t\t\t\tViewContainerActivityByView,\n\t\t\t\t\tviewId,\n\t\t\t\t),\n\t\t\t};\n\n\t\t\tthis.viewActivities.set(viewId, maybeItem);\n\t\t}\n\n\t\tconst id = maybeItem.id;\n\t\tmaybeItem.activity.setActivity(activity);\n\n\t\tconst item = maybeItem;\n\t\treturn toDisposable(() => {\n\t\t\tif (item.id === id) {\n\t\t\t\titem.activity.dispose();\n\t\t\t\tthis.viewActivities.delete(viewId);\n\t\t\t}\n\t\t});\n\t}\n\n\tshowAccountsActivity(activity: IActivity): IDisposable {\n\t\treturn this.showActivity(ACCOUNTS_ACTIVITY_ID, activity);\n\t}\n\n\tshowGlobalActivity(activity: IActivity): IDisposable {\n\t\treturn this.showActivity(GLOBAL_ACTIVITY_ID, activity);\n\t}\n\n\tgetActivity(id: string): IActivity[] {\n\t\treturn this.globalActivities.get(id) ?? [];\n\t}\n\n\tprivate showActivity(id: string, activity: IActivity): IDisposable {\n\t\tlet activities = this.globalActivities.get(id);\n\t\tif (!activities) {\n\t\t\tactivities = [];\n\t\t\tthis.globalActivities.set(id, activities);\n\t\t}\n\t\tactivities.push(activity);\n\t\tthis._onDidChangeActivity.fire(id);\n\t\treturn toDisposable(() => {\n\t\t\tactivities.splice(activities.indexOf(activity), 1);\n\t\t\tif (activities.length === 0) {\n\t\t\t\tthis.globalActivities.delete(id);\n\t\t\t}\n\t\t\tthis._onDidChangeActivity.fire(id);\n\t\t});\n\t}\n}\n\nregisterSingleton(IActivityService, ActivityService, InstantiationType.Delayed);\n"],
  "mappings": "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",
  "names": []
}
