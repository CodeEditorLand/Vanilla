{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/auxiliaryWindow/electron-sandbox/auxiliaryWindowService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { localize } from '../../../../nls.js';\nimport { InstantiationType, registerSingleton } from '../../../../platform/instantiation/common/extensions.js';\nimport { IWorkbenchLayoutService } from '../../layout/browser/layoutService.js';\nimport { AuxiliaryWindow, AuxiliaryWindowMode, BrowserAuxiliaryWindowService, IAuxiliaryWindowOpenOptions, IAuxiliaryWindowService } from '../browser/auxiliaryWindowService.js';\nimport { ISandboxGlobals } from '../../../../base/parts/sandbox/electron-sandbox/globals.js';\nimport { IConfigurationService } from '../../../../platform/configuration/common/configuration.js';\nimport { DisposableStore } from '../../../../base/common/lifecycle.js';\nimport { INativeHostService } from '../../../../platform/native/common/native.js';\nimport { IDialogService } from '../../../../platform/dialogs/common/dialogs.js';\nimport { CodeWindow } from '../../../../base/browser/window.js';\nimport { mark } from '../../../../base/common/performance.js';\nimport { IInstantiationService } from '../../../../platform/instantiation/common/instantiation.js';\nimport { ShutdownReason } from '../../lifecycle/common/lifecycle.js';\nimport { ITelemetryService } from '../../../../platform/telemetry/common/telemetry.js';\nimport { Barrier } from '../../../../base/common/async.js';\nimport { IHostService } from '../../host/browser/host.js';\nimport { applyZoom } from '../../../../platform/window/electron-sandbox/window.js';\nimport { getZoomLevel, isFullscreen, setFullscreen } from '../../../../base/browser/browser.js';\nimport { getActiveWindow } from '../../../../base/browser/dom.js';\nimport { IWorkbenchEnvironmentService } from '../../environment/common/environmentService.js';\nimport { isMacintosh } from '../../../../base/common/platform.js';\n\ntype NativeCodeWindow = CodeWindow & {\n\treadonly vscode: ISandboxGlobals;\n};\n\nexport class NativeAuxiliaryWindow extends AuxiliaryWindow {\n\n\tprivate skipUnloadConfirmation = false;\n\n\tprivate maximized = false;\n\n\tconstructor(\n\t\twindow: CodeWindow,\n\t\tcontainer: HTMLElement,\n\t\tstylesHaveLoaded: Barrier,\n\t\t@IConfigurationService configurationService: IConfigurationService,\n\t\t@INativeHostService private readonly nativeHostService: INativeHostService,\n\t\t@IInstantiationService private readonly instantiationService: IInstantiationService,\n\t\t@IHostService hostService: IHostService,\n\t\t@IWorkbenchEnvironmentService environmentService: IWorkbenchEnvironmentService,\n\t\t@IDialogService private readonly dialogService: IDialogService\n\t) {\n\t\tsuper(window, container, stylesHaveLoaded, configurationService, hostService, environmentService);\n\n\t\tif (!isMacintosh) {\n\t\t\t// For now, limit this to platforms that have clear maximised\n\t\t\t// transitions (Windows, Linux) via window buttons.\n\t\t\tthis.handleMaximizedState();\n\t\t}\n\n\t\tthis.handleFullScreenState();\n\t}\n\n\tprivate handleMaximizedState(): void {\n\t\t(async () => {\n\t\t\tthis.maximized = await this.nativeHostService.isMaximized({ targetWindowId: this.window.vscodeWindowId });\n\t\t})();\n\n\t\tthis._register(this.nativeHostService.onDidMaximizeWindow(windowId => {\n\t\t\tif (windowId === this.window.vscodeWindowId) {\n\t\t\t\tthis.maximized = true;\n\t\t\t}\n\t\t}));\n\n\t\tthis._register(this.nativeHostService.onDidUnmaximizeWindow(windowId => {\n\t\t\tif (windowId === this.window.vscodeWindowId) {\n\t\t\t\tthis.maximized = false;\n\t\t\t}\n\t\t}));\n\t}\n\n\tprivate async handleFullScreenState(): Promise<void> {\n\t\tconst fullscreen = await this.nativeHostService.isFullScreen({ targetWindowId: this.window.vscodeWindowId });\n\t\tif (fullscreen) {\n\t\t\tsetFullscreen(true, this.window);\n\t\t}\n\t}\n\n\tprotected override async handleVetoBeforeClose(e: BeforeUnloadEvent, veto: string): Promise<void> {\n\t\tthis.preventUnload(e);\n\n\t\tawait this.dialogService.error(veto, localize('backupErrorDetails', \"Try saving or reverting the editors with unsaved changes first and then try again.\"));\n\t}\n\n\tprotected override async confirmBeforeClose(e: BeforeUnloadEvent): Promise<void> {\n\t\tif (this.skipUnloadConfirmation) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.preventUnload(e);\n\n\t\tconst confirmed = await this.instantiationService.invokeFunction(accessor => NativeAuxiliaryWindow.confirmOnShutdown(accessor, ShutdownReason.CLOSE));\n\t\tif (confirmed) {\n\t\t\tthis.skipUnloadConfirmation = true;\n\t\t\tthis.nativeHostService.closeWindow({ targetWindowId: this.window.vscodeWindowId });\n\t\t}\n\t}\n\n\tprotected override preventUnload(e: BeforeUnloadEvent): void {\n\t\te.preventDefault();\n\t\te.returnValue = true;\n\t}\n\n\toverride createState(): IAuxiliaryWindowOpenOptions {\n\t\tconst state = super.createState();\n\t\tconst fullscreen = isFullscreen(this.window);\n\t\treturn {\n\t\t\t...state,\n\t\t\tbounds: state.bounds,\n\t\t\tmode: this.maximized ? AuxiliaryWindowMode.Maximized : fullscreen ? AuxiliaryWindowMode.Fullscreen : AuxiliaryWindowMode.Normal\n\t\t};\n\t}\n}\n\nexport class NativeAuxiliaryWindowService extends BrowserAuxiliaryWindowService {\n\n\tconstructor(\n\t\t@IWorkbenchLayoutService layoutService: IWorkbenchLayoutService,\n\t\t@IConfigurationService configurationService: IConfigurationService,\n\t\t@INativeHostService private readonly nativeHostService: INativeHostService,\n\t\t@IDialogService dialogService: IDialogService,\n\t\t@IInstantiationService private readonly instantiationService: IInstantiationService,\n\t\t@ITelemetryService telemetryService: ITelemetryService,\n\t\t@IHostService hostService: IHostService,\n\t\t@IWorkbenchEnvironmentService environmentService: IWorkbenchEnvironmentService\n\t) {\n\t\tsuper(layoutService, dialogService, configurationService, telemetryService, hostService, environmentService);\n\t}\n\n\tprotected override async resolveWindowId(auxiliaryWindow: NativeCodeWindow): Promise<number> {\n\t\tmark('code/auxiliaryWindow/willResolveWindowId');\n\t\tconst windowId = await auxiliaryWindow.vscode.ipcRenderer.invoke('vscode:registerAuxiliaryWindow', this.nativeHostService.windowId);\n\t\tmark('code/auxiliaryWindow/didResolveWindowId');\n\n\t\treturn windowId;\n\t}\n\n\tprotected override createContainer(auxiliaryWindow: NativeCodeWindow, disposables: DisposableStore, options?: IAuxiliaryWindowOpenOptions) {\n\n\t\t// Zoom level (either explicitly provided or inherited from main window)\n\t\tlet windowZoomLevel: number;\n\t\tif (typeof options?.zoomLevel === 'number') {\n\t\t\twindowZoomLevel = options.zoomLevel;\n\t\t} else {\n\t\t\twindowZoomLevel = getZoomLevel(getActiveWindow());\n\t\t}\n\n\t\tapplyZoom(windowZoomLevel, auxiliaryWindow);\n\n\t\treturn super.createContainer(auxiliaryWindow, disposables);\n\t}\n\n\tprotected override createAuxiliaryWindow(targetWindow: CodeWindow, container: HTMLElement, stylesHaveLoaded: Barrier,): AuxiliaryWindow {\n\t\treturn new NativeAuxiliaryWindow(targetWindow, container, stylesHaveLoaded, this.configurationService, this.nativeHostService, this.instantiationService, this.hostService, this.environmentService, this.dialogService);\n\t}\n}\n\nregisterSingleton(IAuxiliaryWindowService, NativeAuxiliaryWindowService, InstantiationType.Delayed);\n"],
  "mappings": "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",
  "names": []
}
