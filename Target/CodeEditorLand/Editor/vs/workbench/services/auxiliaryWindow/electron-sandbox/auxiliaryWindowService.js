var g=Object.defineProperty;var x=Object.getOwnPropertyDescriptor;var l=(s,n,e,i)=>{for(var o=i>1?void 0:i?x(n,e):n,t=s.length-1,d;t>=0;t--)(d=s[t])&&(o=(i?d(n,e,o):d(o))||o);return i&&o&&g(n,e,o),o},r=(s,n)=>(e,i)=>n(e,i,s);import{localize as C}from"../../../../nls.js";import{InstantiationType as b,registerSingleton as H}from"../../../../platform/instantiation/common/extensions.js";import{IWorkbenchLayoutService as z}from"../../layout/browser/layoutService.js";import{AuxiliaryWindow as k,AuxiliaryWindowMode as p,BrowserAuxiliaryWindowService as D,IAuxiliaryWindowService as E}from"../browser/auxiliaryWindowService.js";import{IConfigurationService as S}from"../../../../platform/configuration/common/configuration.js";import{INativeHostService as f}from"../../../../platform/native/common/native.js";import{IDialogService as h}from"../../../../platform/dialogs/common/dialogs.js";import{mark as u}from"../../../../base/common/performance.js";import{IInstantiationService as I}from"../../../../platform/instantiation/common/instantiation.js";import{ShutdownReason as U}from"../../lifecycle/common/lifecycle.js";import{ITelemetryService as B}from"../../../../platform/telemetry/common/telemetry.js";import{IHostService as W}from"../../host/browser/host.js";import{applyZoom as L}from"../../../../platform/window/electron-sandbox/window.js";import{getZoomLevel as M,isFullscreen as O,setFullscreen as F}from"../../../../base/browser/browser.js";import{getActiveWindow as T}from"../../../../base/browser/dom.js";import{IWorkbenchEnvironmentService as y}from"../../environment/common/environmentService.js";import{isMacintosh as A}from"../../../../base/common/platform.js";let a=class extends k{constructor(e,i,o,t,d,w,v,m,P){super(e,i,o,t,v,m);this.nativeHostService=d;this.instantiationService=w;this.dialogService=P;A||this.handleMaximizedState(),this.handleFullScreenState()}skipUnloadConfirmation=!1;maximized=!1;handleMaximizedState(){(async()=>this.maximized=await this.nativeHostService.isMaximized({targetWindowId:this.window.vscodeWindowId}))(),this._register(this.nativeHostService.onDidMaximizeWindow(e=>{e===this.window.vscodeWindowId&&(this.maximized=!0)})),this._register(this.nativeHostService.onDidUnmaximizeWindow(e=>{e===this.window.vscodeWindowId&&(this.maximized=!1)}))}async handleFullScreenState(){await this.nativeHostService.isFullScreen({targetWindowId:this.window.vscodeWindowId})&&F(!0,this.window)}async handleVetoBeforeClose(e,i){this.preventUnload(e),await this.dialogService.error(i,C("backupErrorDetails","Try saving or reverting the editors with unsaved changes first and then try again."))}async confirmBeforeClose(e){if(this.skipUnloadConfirmation)return;this.preventUnload(e),await this.instantiationService.invokeFunction(o=>a.confirmOnShutdown(o,U.CLOSE))&&(this.skipUnloadConfirmation=!0,this.nativeHostService.closeWindow({targetWindowId:this.window.vscodeWindowId}))}preventUnload(e){e.preventDefault(),e.returnValue=!0}createState(){const e=super.createState(),i=O(this.window);return{...e,bounds:e.bounds,mode:this.maximized?p.Maximized:i?p.Fullscreen:p.Normal}}};a=l([r(3,S),r(4,f),r(5,I),r(6,W),r(7,y),r(8,h)],a);let c=class extends D{constructor(e,i,o,t,d,w,v,m){super(e,t,i,w,v,m);this.nativeHostService=o;this.instantiationService=d}async resolveWindowId(e){u("code/auxiliaryWindow/willResolveWindowId");const i=await e.vscode.ipcRenderer.invoke("vscode:registerAuxiliaryWindow",this.nativeHostService.windowId);return u("code/auxiliaryWindow/didResolveWindowId"),i}createContainer(e,i,o){let t;return typeof o?.zoomLevel=="number"?t=o.zoomLevel:t=M(T()),L(t,e),super.createContainer(e,i)}createAuxiliaryWindow(e,i,o){return new a(e,i,o,this.configurationService,this.nativeHostService,this.instantiationService,this.hostService,this.environmentService,this.dialogService)}};c=l([r(0,z),r(1,S),r(2,f),r(3,h),r(4,I),r(5,B),r(6,W),r(7,y)],c),H(E,c,b.Delayed);export{a as NativeAuxiliaryWindow,c as NativeAuxiliaryWindowService};
