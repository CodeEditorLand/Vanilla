{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/textmodelResolver/common/textModelResolverService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { URI } from '../../../../base/common/uri.js';\nimport { IInstantiationService } from '../../../../platform/instantiation/common/instantiation.js';\nimport { ITextModel } from '../../../../editor/common/model.js';\nimport { IDisposable, toDisposable, IReference, ReferenceCollection, Disposable, AsyncReferenceCollection } from '../../../../base/common/lifecycle.js';\nimport { IModelService } from '../../../../editor/common/services/model.js';\nimport { TextResourceEditorModel } from '../../../common/editor/textResourceEditorModel.js';\nimport { ITextFileService, TextFileResolveReason } from '../../textfile/common/textfiles.js';\nimport { Schemas } from '../../../../base/common/network.js';\nimport { ITextModelService, ITextModelContentProvider, ITextEditorModel, IResolvedTextEditorModel, isResolvedTextEditorModel } from '../../../../editor/common/services/resolverService.js';\nimport { TextFileEditorModel } from '../../textfile/common/textFileEditorModel.js';\nimport { IFileService } from '../../../../platform/files/common/files.js';\nimport { InstantiationType, registerSingleton } from '../../../../platform/instantiation/common/extensions.js';\nimport { IUndoRedoService } from '../../../../platform/undoRedo/common/undoRedo.js';\nimport { ModelUndoRedoParticipant } from '../../../../editor/common/services/modelUndoRedoParticipant.js';\nimport { IUriIdentityService } from '../../../../platform/uriIdentity/common/uriIdentity.js';\nimport { UntitledTextEditorModel } from '../../untitled/common/untitledTextEditorModel.js';\n\nclass ResourceModelCollection extends ReferenceCollection<Promise<IResolvedTextEditorModel>> {\n\n\tprivate readonly providers = new Map<string, ITextModelContentProvider[]>();\n\tprivate readonly modelsToDispose = new Set<string>();\n\n\tconstructor(\n\t\t@IInstantiationService private readonly instantiationService: IInstantiationService,\n\t\t@ITextFileService private readonly textFileService: ITextFileService,\n\t\t@IFileService private readonly fileService: IFileService,\n\t\t@IModelService private readonly modelService: IModelService\n\t) {\n\t\tsuper();\n\t}\n\n\tprotected createReferencedObject(key: string): Promise<IResolvedTextEditorModel> {\n\t\treturn this.doCreateReferencedObject(key);\n\t}\n\n\tprivate async doCreateReferencedObject(key: string, skipActivateProvider?: boolean): Promise<IResolvedTextEditorModel> {\n\n\t\t// Untrack as being disposed\n\t\tthis.modelsToDispose.delete(key);\n\n\t\t// inMemory Schema: go through model service cache\n\t\tconst resource = URI.parse(key);\n\t\tif (resource.scheme === Schemas.inMemory) {\n\t\t\tconst cachedModel = this.modelService.getModel(resource);\n\t\t\tif (!cachedModel) {\n\t\t\t\tthrow new Error(`Unable to resolve inMemory resource ${key}`);\n\t\t\t}\n\n\t\t\tconst model = this.instantiationService.createInstance(TextResourceEditorModel, resource);\n\t\t\tif (this.ensureResolvedModel(model, key)) {\n\t\t\t\treturn model;\n\t\t\t}\n\t\t}\n\n\t\t// Untitled Schema: go through untitled text service\n\t\tif (resource.scheme === Schemas.untitled) {\n\t\t\tconst model = await this.textFileService.untitled.resolve({ untitledResource: resource });\n\t\t\tif (this.ensureResolvedModel(model, key)) {\n\t\t\t\treturn model;\n\t\t\t}\n\t\t}\n\n\t\t// File or remote file: go through text file service\n\t\tif (this.fileService.hasProvider(resource)) {\n\t\t\tconst model = await this.textFileService.files.resolve(resource, { reason: TextFileResolveReason.REFERENCE });\n\t\t\tif (this.ensureResolvedModel(model, key)) {\n\t\t\t\treturn model;\n\t\t\t}\n\t\t}\n\n\t\t// Virtual documents\n\t\tif (this.providers.has(resource.scheme)) {\n\t\t\tawait this.resolveTextModelContent(key);\n\n\t\t\tconst model = this.instantiationService.createInstance(TextResourceEditorModel, resource);\n\t\t\tif (this.ensureResolvedModel(model, key)) {\n\t\t\t\treturn model;\n\t\t\t}\n\t\t}\n\n\t\t// Either unknown schema, or not yet registered, try to activate\n\t\tif (!skipActivateProvider) {\n\t\t\tawait this.fileService.activateProvider(resource.scheme);\n\n\t\t\treturn this.doCreateReferencedObject(key, true);\n\t\t}\n\n\t\tthrow new Error(`Unable to resolve resource ${key}`);\n\t}\n\n\tprivate ensureResolvedModel(model: ITextEditorModel, key: string): model is IResolvedTextEditorModel {\n\t\tif (isResolvedTextEditorModel(model)) {\n\t\t\treturn true;\n\t\t}\n\n\t\tthrow new Error(`Unable to resolve resource ${key}`);\n\t}\n\n\tprotected destroyReferencedObject(key: string, modelPromise: Promise<ITextEditorModel>): void {\n\n\t\t// inMemory is bound to a different lifecycle\n\t\tconst resource = URI.parse(key);\n\t\tif (resource.scheme === Schemas.inMemory) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Track as being disposed before waiting for model to load\n\t\t// to handle the case that the reference is acquired again\n\t\tthis.modelsToDispose.add(key);\n\n\t\t(async () => {\n\t\t\ttry {\n\t\t\t\tconst model = await modelPromise;\n\n\t\t\t\tif (!this.modelsToDispose.has(key)) {\n\t\t\t\t\t// return if model has been acquired again meanwhile\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (model instanceof TextFileEditorModel) {\n\t\t\t\t\t// text file models have conditions that prevent them\n\t\t\t\t\t// from dispose, so we have to wait until we can dispose\n\t\t\t\t\tawait this.textFileService.files.canDispose(model);\n\t\t\t\t} else if (model instanceof UntitledTextEditorModel) {\n\t\t\t\t\t// untitled file models have conditions that prevent them\n\t\t\t\t\t// from dispose, so we have to wait until we can dispose\n\t\t\t\t\tawait this.textFileService.untitled.canDispose(model);\n\t\t\t\t}\n\n\t\t\t\tif (!this.modelsToDispose.has(key)) {\n\t\t\t\t\t// return if model has been acquired again meanwhile\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// Finally we can dispose the model\n\t\t\t\tmodel.dispose();\n\t\t\t} catch (error) {\n\t\t\t\t// ignore\n\t\t\t} finally {\n\t\t\t\tthis.modelsToDispose.delete(key); // Untrack as being disposed\n\t\t\t}\n\t\t})();\n\t}\n\n\tregisterTextModelContentProvider(scheme: string, provider: ITextModelContentProvider): IDisposable {\n\t\tlet providers = this.providers.get(scheme);\n\t\tif (!providers) {\n\t\t\tproviders = [];\n\t\t\tthis.providers.set(scheme, providers);\n\t\t}\n\n\t\tproviders.unshift(provider);\n\n\t\treturn toDisposable(() => {\n\t\t\tconst providersForScheme = this.providers.get(scheme);\n\t\t\tif (!providersForScheme) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst index = providersForScheme.indexOf(provider);\n\t\t\tif (index === -1) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tprovidersForScheme.splice(index, 1);\n\n\t\t\tif (providersForScheme.length === 0) {\n\t\t\t\tthis.providers.delete(scheme);\n\t\t\t}\n\t\t});\n\t}\n\n\thasTextModelContentProvider(scheme: string): boolean {\n\t\treturn this.providers.get(scheme) !== undefined;\n\t}\n\n\tprivate async resolveTextModelContent(key: string): Promise<ITextModel> {\n\t\tconst resource = URI.parse(key);\n\t\tconst providersForScheme = this.providers.get(resource.scheme) || [];\n\n\t\tfor (const provider of providersForScheme) {\n\t\t\tconst value = await provider.provideTextContent(resource);\n\t\t\tif (value) {\n\t\t\t\treturn value;\n\t\t\t}\n\t\t}\n\n\t\tthrow new Error(`Unable to resolve text model content for resource ${key}`);\n\t}\n}\n\nexport class TextModelResolverService extends Disposable implements ITextModelService {\n\n\tdeclare readonly _serviceBrand: undefined;\n\n\tprivate _resourceModelCollection: ResourceModelCollection & ReferenceCollection<Promise<IResolvedTextEditorModel>> /* TS Fail */ | undefined = undefined;\n\tprivate get resourceModelCollection() {\n\t\tif (!this._resourceModelCollection) {\n\t\t\tthis._resourceModelCollection = this.instantiationService.createInstance(ResourceModelCollection);\n\t\t}\n\n\t\treturn this._resourceModelCollection;\n\t}\n\n\tprivate _asyncModelCollection: AsyncReferenceCollection<IResolvedTextEditorModel> | undefined = undefined;\n\tprivate get asyncModelCollection() {\n\t\tif (!this._asyncModelCollection) {\n\t\t\tthis._asyncModelCollection = new AsyncReferenceCollection(this.resourceModelCollection);\n\t\t}\n\n\t\treturn this._asyncModelCollection;\n\t}\n\n\tconstructor(\n\t\t@IInstantiationService private readonly instantiationService: IInstantiationService,\n\t\t@IFileService private readonly fileService: IFileService,\n\t\t@IUndoRedoService private readonly undoRedoService: IUndoRedoService,\n\t\t@IModelService private readonly modelService: IModelService,\n\t\t@IUriIdentityService private readonly uriIdentityService: IUriIdentityService,\n\t) {\n\t\tsuper();\n\n\t\tthis._register(new ModelUndoRedoParticipant(this.modelService, this, this.undoRedoService));\n\t}\n\n\tasync createModelReference(resource: URI): Promise<IReference<IResolvedTextEditorModel>> {\n\n\t\t// From this moment on, only operate on the canonical resource\n\t\t// to ensure we reduce the chance of resolving the same resource\n\t\t// with different resource forms (e.g. path casing on Windows)\n\t\tresource = this.uriIdentityService.asCanonicalUri(resource);\n\n\t\treturn await this.asyncModelCollection.acquire(resource.toString());\n\t}\n\n\tregisterTextModelContentProvider(scheme: string, provider: ITextModelContentProvider): IDisposable {\n\t\treturn this.resourceModelCollection.registerTextModelContentProvider(scheme, provider);\n\t}\n\n\tcanHandleResource(resource: URI): boolean {\n\t\tif (this.fileService.hasProvider(resource) || resource.scheme === Schemas.untitled || resource.scheme === Schemas.inMemory) {\n\t\t\treturn true; // we handle file://, untitled:// and inMemory:// automatically\n\t\t}\n\n\t\treturn this.resourceModelCollection.hasTextModelContentProvider(resource.scheme);\n\t}\n}\n\nregisterSingleton(ITextModelService, TextModelResolverService, InstantiationType.Delayed);\n"],
  "mappings": ";;;;;;;;;;;;AAKA,SAAS,WAAW;AACpB,SAAS,6BAA6B;AACtC,SAAS,kBAAkB;AAC3B,SAAS,aAAa,cAAc,YAAY,qBAAqB,YAAY,gCAAgC;AACjH,SAAS,qBAAqB;AAC9B,SAAS,+BAA+B;AACxC,SAAS,kBAAkB,6BAA6B;AACxD,SAAS,eAAe;AACxB,SAAS,mBAAmB,2BAA2B,kBAAkB,0BAA0B,iCAAiC;AACpI,SAAS,2BAA2B;AACpC,SAAS,oBAAoB;AAC7B,SAAS,mBAAmB,yBAAyB;AACrD,SAAS,wBAAwB;AACjC,SAAS,gCAAgC;AACzC,SAAS,2BAA2B;AACpC,SAAS,+BAA+B;AAExC,IAAM,0BAAN,cAAsC,oBAAuD;AAAA,EAK5F,YACyC,sBACL,iBACJ,aACC,cAC/B;AACD,UAAM;AALkC;AACL;AACJ;AACC;AAAA,EAGjC;AAAA,EAlCD,OAsB6F;AAAA;AAAA;AAAA,EAE3E,YAAY,oBAAI,IAAyC;AAAA,EACzD,kBAAkB,oBAAI,IAAY;AAAA,EAWzC,uBAAuB,KAAgD;AAChF,WAAO,KAAK,yBAAyB,GAAG;AAAA,EACzC;AAAA,EAEA,MAAc,yBAAyB,KAAa,sBAAmE;AAGtH,SAAK,gBAAgB,OAAO,GAAG;AAG/B,UAAM,WAAW,IAAI,MAAM,GAAG;AAC9B,QAAI,SAAS,WAAW,QAAQ,UAAU;AACzC,YAAM,cAAc,KAAK,aAAa,SAAS,QAAQ;AACvD,UAAI,CAAC,aAAa;AACjB,cAAM,IAAI,MAAM,uCAAuC,GAAG,EAAE;AAAA,MAC7D;AAEA,YAAM,QAAQ,KAAK,qBAAqB,eAAe,yBAAyB,QAAQ;AACxF,UAAI,KAAK,oBAAoB,OAAO,GAAG,GAAG;AACzC,eAAO;AAAA,MACR;AAAA,IACD;AAGA,QAAI,SAAS,WAAW,QAAQ,UAAU;AACzC,YAAM,QAAQ,MAAM,KAAK,gBAAgB,SAAS,QAAQ,EAAE,kBAAkB,SAAS,CAAC;AACxF,UAAI,KAAK,oBAAoB,OAAO,GAAG,GAAG;AACzC,eAAO;AAAA,MACR;AAAA,IACD;AAGA,QAAI,KAAK,YAAY,YAAY,QAAQ,GAAG;AAC3C,YAAM,QAAQ,MAAM,KAAK,gBAAgB,MAAM,QAAQ,UAAU,EAAE,QAAQ,sBAAsB,UAAU,CAAC;AAC5G,UAAI,KAAK,oBAAoB,OAAO,GAAG,GAAG;AACzC,eAAO;AAAA,MACR;AAAA,IACD;AAGA,QAAI,KAAK,UAAU,IAAI,SAAS,MAAM,GAAG;AACxC,YAAM,KAAK,wBAAwB,GAAG;AAEtC,YAAM,QAAQ,KAAK,qBAAqB,eAAe,yBAAyB,QAAQ;AACxF,UAAI,KAAK,oBAAoB,OAAO,GAAG,GAAG;AACzC,eAAO;AAAA,MACR;AAAA,IACD;AAGA,QAAI,CAAC,sBAAsB;AAC1B,YAAM,KAAK,YAAY,iBAAiB,SAAS,MAAM;AAEvD,aAAO,KAAK,yBAAyB,KAAK,IAAI;AAAA,IAC/C;AAEA,UAAM,IAAI,MAAM,8BAA8B,GAAG,EAAE;AAAA,EACpD;AAAA,EAEQ,oBAAoB,OAAyB,KAAgD;AACpG,QAAI,0BAA0B,KAAK,GAAG;AACrC,aAAO;AAAA,IACR;AAEA,UAAM,IAAI,MAAM,8BAA8B,GAAG,EAAE;AAAA,EACpD;AAAA,EAEU,wBAAwB,KAAa,cAA+C;AAG7F,UAAM,WAAW,IAAI,MAAM,GAAG;AAC9B,QAAI,SAAS,WAAW,QAAQ,UAAU;AACzC;AAAA,IACD;AAIA,SAAK,gBAAgB,IAAI,GAAG;AAE5B,KAAC,YAAY;AACZ,UAAI;AACH,cAAM,QAAQ,MAAM;AAEpB,YAAI,CAAC,KAAK,gBAAgB,IAAI,GAAG,GAAG;AAEnC;AAAA,QACD;AAEA,YAAI,iBAAiB,qBAAqB;AAGzC,gBAAM,KAAK,gBAAgB,MAAM,WAAW,KAAK;AAAA,QAClD,WAAW,iBAAiB,yBAAyB;AAGpD,gBAAM,KAAK,gBAAgB,SAAS,WAAW,KAAK;AAAA,QACrD;AAEA,YAAI,CAAC,KAAK,gBAAgB,IAAI,GAAG,GAAG;AAEnC;AAAA,QACD;AAGA,cAAM,QAAQ;AAAA,MACf,SAAS,OAAO;AAAA,MAEhB,UAAE;AACD,aAAK,gBAAgB,OAAO,GAAG;AAAA,MAChC;AAAA,IACD,GAAG;AAAA,EACJ;AAAA,EAEA,iCAAiC,QAAgB,UAAkD;AAClG,QAAI,YAAY,KAAK,UAAU,IAAI,MAAM;AACzC,QAAI,CAAC,WAAW;AACf,kBAAY,CAAC;AACb,WAAK,UAAU,IAAI,QAAQ,SAAS;AAAA,IACrC;AAEA,cAAU,QAAQ,QAAQ;AAE1B,WAAO,aAAa,MAAM;AACzB,YAAM,qBAAqB,KAAK,UAAU,IAAI,MAAM;AACpD,UAAI,CAAC,oBAAoB;AACxB;AAAA,MACD;AAEA,YAAM,QAAQ,mBAAmB,QAAQ,QAAQ;AACjD,UAAI,UAAU,IAAI;AACjB;AAAA,MACD;AAEA,yBAAmB,OAAO,OAAO,CAAC;AAElC,UAAI,mBAAmB,WAAW,GAAG;AACpC,aAAK,UAAU,OAAO,MAAM;AAAA,MAC7B;AAAA,IACD,CAAC;AAAA,EACF;AAAA,EAEA,4BAA4B,QAAyB;AACpD,WAAO,KAAK,UAAU,IAAI,MAAM,MAAM;AAAA,EACvC;AAAA,EAEA,MAAc,wBAAwB,KAAkC;AACvE,UAAM,WAAW,IAAI,MAAM,GAAG;AAC9B,UAAM,qBAAqB,KAAK,UAAU,IAAI,SAAS,MAAM,KAAK,CAAC;AAEnE,eAAW,YAAY,oBAAoB;AAC1C,YAAM,QAAQ,MAAM,SAAS,mBAAmB,QAAQ;AACxD,UAAI,OAAO;AACV,eAAO;AAAA,MACR;AAAA,IACD;AAEA,UAAM,IAAI,MAAM,qDAAqD,GAAG,EAAE;AAAA,EAC3E;AACD;AA5KM,0BAAN;AAAA,EAMG;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,GATG;AA8KC,IAAM,2BAAN,cAAuC,WAAwC;AAAA,EAsBrF,YACyC,sBACT,aACI,iBACH,cACM,oBACrC;AACD,UAAM;AANkC;AACT;AACI;AACH;AACM;AAItC,SAAK,UAAU,IAAI,yBAAyB,KAAK,cAAc,MAAM,KAAK,eAAe,CAAC;AAAA,EAC3F;AAAA,EApOD,OAoMsF;AAAA;AAAA;AAAA,EAI7E,2BAAuI;AAAA,EAC/I,IAAY,0BAA0B;AACrC,QAAI,CAAC,KAAK,0BAA0B;AACnC,WAAK,2BAA2B,KAAK,qBAAqB,eAAe,uBAAuB;AAAA,IACjG;AAEA,WAAO,KAAK;AAAA,EACb;AAAA,EAEQ,wBAAwF;AAAA,EAChG,IAAY,uBAAuB;AAClC,QAAI,CAAC,KAAK,uBAAuB;AAChC,WAAK,wBAAwB,IAAI,yBAAyB,KAAK,uBAAuB;AAAA,IACvF;AAEA,WAAO,KAAK;AAAA,EACb;AAAA,EAcA,MAAM,qBAAqB,UAA8D;AAKxF,eAAW,KAAK,mBAAmB,eAAe,QAAQ;AAE1D,WAAO,MAAM,KAAK,qBAAqB,QAAQ,SAAS,SAAS,CAAC;AAAA,EACnE;AAAA,EAEA,iCAAiC,QAAgB,UAAkD;AAClG,WAAO,KAAK,wBAAwB,iCAAiC,QAAQ,QAAQ;AAAA,EACtF;AAAA,EAEA,kBAAkB,UAAwB;AACzC,QAAI,KAAK,YAAY,YAAY,QAAQ,KAAK,SAAS,WAAW,QAAQ,YAAY,SAAS,WAAW,QAAQ,UAAU;AAC3H,aAAO;AAAA,IACR;AAEA,WAAO,KAAK,wBAAwB,4BAA4B,SAAS,MAAM;AAAA,EAChF;AACD;AAvDa,2BAAN;AAAA,EAuBJ;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,GA3BU;AAyDb,kBAAkB,mBAAmB,0BAA0B,kBAAkB,OAAO;",
  "names": []
}
