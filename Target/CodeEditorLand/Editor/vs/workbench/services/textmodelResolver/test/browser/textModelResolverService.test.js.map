{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/textmodelResolver/test/browser/textModelResolverService.test.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport assert from 'assert';\nimport { ITextModel } from '../../../../../editor/common/model.js';\nimport { URI } from '../../../../../base/common/uri.js';\nimport { TextResourceEditorInput } from '../../../../common/editor/textResourceEditorInput.js';\nimport { TextResourceEditorModel } from '../../../../common/editor/textResourceEditorModel.js';\nimport { IInstantiationService } from '../../../../../platform/instantiation/common/instantiation.js';\nimport { workbenchInstantiationService, TestServiceAccessor, ITestTextFileEditorModelManager } from '../../../../test/browser/workbenchTestServices.js';\nimport { ensureNoDisposablesAreLeakedInTestSuite, toResource } from '../../../../../base/test/common/utils.js';\nimport { TextFileEditorModel } from '../../../textfile/common/textFileEditorModel.js';\nimport { snapshotToString } from '../../../textfile/common/textfiles.js';\nimport { TextFileEditorModelManager } from '../../../textfile/common/textFileEditorModelManager.js';\nimport { Event } from '../../../../../base/common/event.js';\nimport { timeout } from '../../../../../base/common/async.js';\nimport { UntitledTextEditorInput } from '../../../untitled/common/untitledTextEditorInput.js';\nimport { createTextBufferFactory } from '../../../../../editor/common/model/textModel.js';\nimport { DisposableStore } from '../../../../../base/common/lifecycle.js';\n\nsuite('Workbench - TextModelResolverService', () => {\n\n\tconst disposables = new DisposableStore();\n\tlet instantiationService: IInstantiationService;\n\tlet accessor: TestServiceAccessor;\n\n\tsetup(() => {\n\t\tinstantiationService = workbenchInstantiationService(undefined, disposables);\n\t\taccessor = instantiationService.createInstance(TestServiceAccessor);\n\t\tdisposables.add(<TextFileEditorModelManager>accessor.textFileService.files);\n\t});\n\n\tteardown(() => {\n\t\tdisposables.clear();\n\t});\n\n\ttest('resolve resource', async () => {\n\t\tdisposables.add(accessor.textModelResolverService.registerTextModelContentProvider('test', {\n\t\t\tprovideTextContent: async function (resource: URI): Promise<ITextModel | null> {\n\t\t\t\tif (resource.scheme === 'test') {\n\t\t\t\t\tconst modelContent = 'Hello Test';\n\t\t\t\t\tconst languageSelection = accessor.languageService.createById('json');\n\n\t\t\t\t\treturn accessor.modelService.createModel(modelContent, languageSelection, resource);\n\t\t\t\t}\n\n\t\t\t\treturn null;\n\t\t\t}\n\t\t}));\n\n\t\tconst resource = URI.from({ scheme: 'test', authority: null!, path: 'thePath' });\n\t\tconst input = instantiationService.createInstance(TextResourceEditorInput, resource, 'The Name', 'The Description', undefined, undefined);\n\n\t\tconst model = disposables.add(await input.resolve());\n\t\tassert.ok(model);\n\t\tassert.strictEqual(snapshotToString(((model as TextResourceEditorModel).createSnapshot()!)), 'Hello Test');\n\t\tlet disposed = false;\n\t\tconst disposedPromise = new Promise<void>(resolve => {\n\t\t\tEvent.once(model.onWillDispose)(() => {\n\t\t\t\tdisposed = true;\n\t\t\t\tresolve();\n\t\t\t});\n\t\t});\n\t\tinput.dispose();\n\n\t\tawait disposedPromise;\n\t\tassert.strictEqual(disposed, true);\n\t});\n\n\ttest('resolve file', async function () {\n\t\tconst textModel = disposables.add(instantiationService.createInstance(TextFileEditorModel, toResource.call(this, '/path/file_resolver.txt'), 'utf8', undefined));\n\t\t(<ITestTextFileEditorModelManager>accessor.textFileService.files).add(textModel.resource, textModel);\n\n\t\tawait textModel.resolve();\n\n\t\tconst ref = await accessor.textModelResolverService.createModelReference(textModel.resource);\n\n\t\tconst model = ref.object;\n\t\tconst editorModel = model.textEditorModel;\n\n\t\tassert.ok(editorModel);\n\t\tassert.strictEqual(editorModel.getValue(), 'Hello Html');\n\n\t\tlet disposed = false;\n\t\tEvent.once(model.onWillDispose)(() => {\n\t\t\tdisposed = true;\n\t\t});\n\n\t\tref.dispose();\n\t\tawait timeout(0);  // due to the reference resolving the model first which is async\n\t\tassert.strictEqual(disposed, true);\n\t});\n\n\ttest('resolved dirty file eventually disposes', async function () {\n\t\tconst textModel = disposables.add(instantiationService.createInstance(TextFileEditorModel, toResource.call(this, '/path/file_resolver.txt'), 'utf8', undefined));\n\t\t(<ITestTextFileEditorModelManager>accessor.textFileService.files).add(textModel.resource, textModel);\n\n\t\tawait textModel.resolve();\n\n\t\ttextModel.updateTextEditorModel(createTextBufferFactory('make dirty'));\n\n\t\tconst ref = await accessor.textModelResolverService.createModelReference(textModel.resource);\n\n\t\tlet disposed = false;\n\t\tEvent.once(textModel.onWillDispose)(() => {\n\t\t\tdisposed = true;\n\t\t});\n\n\t\tref.dispose();\n\t\tawait timeout(0);\n\t\tassert.strictEqual(disposed, false); // not disposed because model still dirty\n\n\t\ttextModel.revert();\n\n\t\tawait timeout(0);\n\t\tassert.strictEqual(disposed, true); // now disposed because model got reverted\n\t});\n\n\ttest('resolved dirty file does not dispose when new reference created', async function () {\n\t\tconst textModel = disposables.add(instantiationService.createInstance(TextFileEditorModel, toResource.call(this, '/path/file_resolver.txt'), 'utf8', undefined));\n\t\t(<ITestTextFileEditorModelManager>accessor.textFileService.files).add(textModel.resource, textModel);\n\n\t\tawait textModel.resolve();\n\n\t\ttextModel.updateTextEditorModel(createTextBufferFactory('make dirty'));\n\n\t\tconst ref1 = await accessor.textModelResolverService.createModelReference(textModel.resource);\n\n\t\tlet disposed = false;\n\t\tEvent.once(textModel.onWillDispose)(() => {\n\t\t\tdisposed = true;\n\t\t});\n\n\t\tref1.dispose();\n\t\tawait timeout(0);\n\t\tassert.strictEqual(disposed, false); // not disposed because model still dirty\n\n\t\tconst ref2 = await accessor.textModelResolverService.createModelReference(textModel.resource);\n\n\t\ttextModel.revert();\n\n\t\tawait timeout(0);\n\t\tassert.strictEqual(disposed, false); // not disposed because we got another ref meanwhile\n\n\t\tref2.dispose();\n\n\t\tawait timeout(0);\n\t\tassert.strictEqual(disposed, true); // now disposed because last ref got disposed\n\t});\n\n\ttest('resolve untitled', async () => {\n\t\tconst service = accessor.untitledTextEditorService;\n\t\tconst untitledModel = disposables.add(service.create());\n\t\tconst input = disposables.add(instantiationService.createInstance(UntitledTextEditorInput, untitledModel));\n\n\t\tawait input.resolve();\n\t\tconst ref = await accessor.textModelResolverService.createModelReference(input.resource);\n\t\tconst model = ref.object;\n\t\tassert.strictEqual(untitledModel, model);\n\t\tconst editorModel = model.textEditorModel;\n\t\tassert.ok(editorModel);\n\t\tref.dispose();\n\t\tinput.dispose();\n\t\tmodel.dispose();\n\t});\n\n\ttest('even loading documents should be refcounted', async () => {\n\t\tlet resolveModel!: Function;\n\t\tconst waitForIt = new Promise(resolve => resolveModel = resolve);\n\n\t\tdisposables.add(accessor.textModelResolverService.registerTextModelContentProvider('test', {\n\t\t\tprovideTextContent: async (resource: URI): Promise<ITextModel> => {\n\t\t\t\tawait waitForIt;\n\n\t\t\t\tconst modelContent = 'Hello Test';\n\t\t\t\tconst languageSelection = accessor.languageService.createById('json');\n\t\t\t\treturn disposables.add(accessor.modelService.createModel(modelContent, languageSelection, resource));\n\t\t\t}\n\t\t}));\n\n\t\tconst uri = URI.from({ scheme: 'test', authority: null!, path: 'thePath' });\n\n\t\tconst modelRefPromise1 = accessor.textModelResolverService.createModelReference(uri);\n\t\tconst modelRefPromise2 = accessor.textModelResolverService.createModelReference(uri);\n\n\t\tresolveModel();\n\n\t\tconst modelRef1 = await modelRefPromise1;\n\t\tconst model1 = modelRef1.object;\n\t\tconst modelRef2 = await modelRefPromise2;\n\t\tconst model2 = modelRef2.object;\n\t\tconst textModel = model1.textEditorModel;\n\n\t\tassert.strictEqual(model1, model2, 'they are the same model');\n\t\tassert(!textModel.isDisposed(), 'the text model should not be disposed');\n\n\t\tmodelRef1.dispose();\n\t\tassert(!textModel.isDisposed(), 'the text model should still not be disposed');\n\n\t\tconst p1 = new Promise<void>(resolve => disposables.add(textModel.onWillDispose(resolve)));\n\t\tmodelRef2.dispose();\n\n\t\tawait p1;\n\t\tassert(textModel.isDisposed(), 'the text model should finally be disposed');\n\t});\n\n\tensureNoDisposablesAreLeakedInTestSuite();\n});\n"],
  "mappings": "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",
  "names": ["resource"]
}
