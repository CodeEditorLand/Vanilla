{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/textMate/browser/arrayOperation.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { compareBy, numberComparator } from \"../../../../base/common/arrays.js\";\n\nexport class ArrayEdit {\n\tpublic readonly edits: readonly SingleArrayEdit[];\n\n\tconstructor(\n\t\t/**\n\t\t * Disjoint edits that are applied in parallel\n\t\t */\n\t\tedits: readonly SingleArrayEdit[],\n\t) {\n\t\tthis.edits = edits\n\t\t\t.slice()\n\t\t\t.sort(compareBy((c) => c.offset, numberComparator));\n\t}\n\n\tapplyToArray(array: any[]): void {\n\t\tfor (let i = this.edits.length - 1; i >= 0; i--) {\n\t\t\tconst c = this.edits[i];\n\t\t\tarray.splice(c.offset, c.length, ...new Array(c.newLength));\n\t\t}\n\t}\n}\n\nexport class SingleArrayEdit {\n\tconstructor(\n\t\tpublic readonly offset: number,\n\t\tpublic readonly length: number,\n\t\tpublic readonly newLength: number,\n\t) {}\n\n\ttoString() {\n\t\treturn `[${this.offset}, +${this.length}) -> +${this.newLength}}`;\n\t}\n}\n\nexport interface IIndexTransformer {\n\ttransform(index: number): number | undefined;\n}\n\n/**\n * Can only be called with increasing values of `index`.\n */\nexport class MonotonousIndexTransformer implements IIndexTransformer {\n\tpublic static fromMany(transformations: ArrayEdit[]): IIndexTransformer {\n\t\t// TODO improve performance by combining transformations first\n\t\tconst transformers = transformations.map(\n\t\t\t(t) => new MonotonousIndexTransformer(t),\n\t\t);\n\t\treturn new CombinedIndexTransformer(transformers);\n\t}\n\n\tprivate idx = 0;\n\tprivate offset = 0;\n\n\tconstructor(private readonly transformation: ArrayEdit) {}\n\n\t/**\n\t * Precondition: index >= previous-value-of(index).\n\t */\n\ttransform(index: number): number | undefined {\n\t\tlet nextChange = this.transformation.edits[this.idx] as\n\t\t\t| SingleArrayEdit\n\t\t\t| undefined;\n\t\twhile (nextChange && nextChange.offset + nextChange.length <= index) {\n\t\t\tthis.offset += nextChange.newLength - nextChange.length;\n\t\t\tthis.idx++;\n\t\t\tnextChange = this.transformation.edits[this.idx];\n\t\t}\n\t\t// assert nextChange === undefined || index < nextChange.offset + nextChange.length\n\n\t\tif (nextChange && nextChange.offset <= index) {\n\t\t\t// Offset is touched by the change\n\t\t\treturn undefined;\n\t\t}\n\n\t\treturn index + this.offset;\n\t}\n}\n\nexport class CombinedIndexTransformer implements IIndexTransformer {\n\tconstructor(private readonly transformers: IIndexTransformer[]) {}\n\n\ttransform(index: number): number | undefined {\n\t\tfor (const transformer of this.transformers) {\n\t\t\tconst result = transformer.transform(index);\n\t\t\tif (result === undefined) {\n\t\t\t\treturn undefined;\n\t\t\t}\n\t\t\tindex = result;\n\t\t}\n\t\treturn index;\n\t}\n}\n"],
  "mappings": ";;AAKA,SAAS,WAAW,wBAAwB;AAErC,MAAM,UAAU;AAAA,EAPvB,OAOuB;AAAA;AAAA;AAAA,EACN;AAAA,EAEhB,YAIC,OACC;AACD,SAAK,QAAQ,MACX,MAAM,EACN,KAAK,UAAU,CAAC,MAAM,EAAE,QAAQ,gBAAgB,CAAC;AAAA,EACpD;AAAA,EAEA,aAAa,OAAoB;AAChC,aAAS,IAAI,KAAK,MAAM,SAAS,GAAG,KAAK,GAAG,KAAK;AAChD,YAAM,IAAI,KAAK,MAAM,CAAC;AACtB,YAAM,OAAO,EAAE,QAAQ,EAAE,QAAQ,GAAG,IAAI,MAAM,EAAE,SAAS,CAAC;AAAA,IAC3D;AAAA,EACD;AACD;AAEO,MAAM,gBAAgB;AAAA,EAC5B,YACiB,QACA,QACA,WACf;AAHe;AACA;AACA;AAAA,EACd;AAAA,EAlCJ,OA6B6B;AAAA;AAAA;AAAA,EAO5B,WAAW;AACV,WAAO,IAAI,KAAK,MAAM,MAAM,KAAK,MAAM,SAAS,KAAK,SAAS;AAAA,EAC/D;AACD;AASO,MAAM,2BAAwD;AAAA,EAYpE,YAA6B,gBAA2B;AAA3B;AAAA,EAA4B;AAAA,EA5D1D,OAgDqE;AAAA;AAAA;AAAA,EACpE,OAAc,SAAS,iBAAiD;AAEvE,UAAM,eAAe,gBAAgB;AAAA,MACpC,CAAC,MAAM,IAAI,2BAA2B,CAAC;AAAA,IACxC;AACA,WAAO,IAAI,yBAAyB,YAAY;AAAA,EACjD;AAAA,EAEQ,MAAM;AAAA,EACN,SAAS;AAAA;AAAA;AAAA;AAAA,EAOjB,UAAU,OAAmC;AAC5C,QAAI,aAAa,KAAK,eAAe,MAAM,KAAK,GAAG;AAGnD,WAAO,cAAc,WAAW,SAAS,WAAW,UAAU,OAAO;AACpE,WAAK,UAAU,WAAW,YAAY,WAAW;AACjD,WAAK;AACL,mBAAa,KAAK,eAAe,MAAM,KAAK,GAAG;AAAA,IAChD;AAGA,QAAI,cAAc,WAAW,UAAU,OAAO;AAE7C,aAAO;AAAA,IACR;AAEA,WAAO,QAAQ,KAAK;AAAA,EACrB;AACD;AAEO,MAAM,yBAAsD;AAAA,EAClE,YAA6B,cAAmC;AAAnC;AAAA,EAAoC;AAAA,EAtFlE,OAqFmE;AAAA;AAAA;AAAA,EAGlE,UAAU,OAAmC;AAC5C,eAAW,eAAe,KAAK,cAAc;AAC5C,YAAM,SAAS,YAAY,UAAU,KAAK;AAC1C,UAAI,WAAW,QAAW;AACzB,eAAO;AAAA,MACR;AACA,cAAQ;AAAA,IACT;AACA,WAAO;AAAA,EACR;AACD;",
  "names": []
}
