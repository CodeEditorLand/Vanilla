{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/textMate/browser/tokenizationSupport/tokenizationSupportWithLineLimit.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport {\n\tDisposable,\n\ttype IDisposable,\n} from \"../../../../../base/common/lifecycle.js\";\nimport {\n\ttype IObservable,\n\tkeepObserved,\n} from \"../../../../../base/common/observable.js\";\nimport type { LanguageId } from \"../../../../../editor/common/encodedTokenAttributes.js\";\nimport type {\n\tEncodedTokenizationResult,\n\tIBackgroundTokenizationStore,\n\tIBackgroundTokenizer,\n\tIState,\n\tITokenizationSupport,\n\tTokenizationResult,\n} from \"../../../../../editor/common/languages.js\";\nimport { nullTokenizeEncoded } from \"../../../../../editor/common/languages/nullTokenize.js\";\nimport type { ITextModel } from \"../../../../../editor/common/model.js\";\n\nexport class TokenizationSupportWithLineLimit\n\textends Disposable\n\timplements ITokenizationSupport\n{\n\tget backgroundTokenizerShouldOnlyVerifyTokens(): boolean | undefined {\n\t\treturn this._actual.backgroundTokenizerShouldOnlyVerifyTokens;\n\t}\n\n\tconstructor(\n\t\tprivate readonly _encodedLanguageId: LanguageId,\n\t\tprivate readonly _actual: ITokenizationSupport,\n\t\tdisposable: IDisposable,\n\t\tprivate readonly _maxTokenizationLineLength: IObservable<number>,\n\t) {\n\t\tsuper();\n\n\t\tthis._register(keepObserved(this._maxTokenizationLineLength));\n\t\tthis._register(disposable);\n\t}\n\n\tgetInitialState(): IState {\n\t\treturn this._actual.getInitialState();\n\t}\n\n\ttokenize(line: string, hasEOL: boolean, state: IState): TokenizationResult {\n\t\tthrow new Error(\"Not supported!\");\n\t}\n\n\ttokenizeEncoded(\n\t\tline: string,\n\t\thasEOL: boolean,\n\t\tstate: IState,\n\t): EncodedTokenizationResult {\n\t\t// Do not attempt to tokenize if a line is too long\n\t\tif (line.length >= this._maxTokenizationLineLength.get()) {\n\t\t\treturn nullTokenizeEncoded(this._encodedLanguageId, state);\n\t\t}\n\n\t\treturn this._actual.tokenizeEncoded(line, hasEOL, state);\n\t}\n\n\tcreateBackgroundTokenizer(\n\t\ttextModel: ITextModel,\n\t\tstore: IBackgroundTokenizationStore,\n\t): IBackgroundTokenizer | undefined {\n\t\tif (this._actual.createBackgroundTokenizer) {\n\t\t\treturn this._actual.createBackgroundTokenizer(textModel, store);\n\t\t} else {\n\t\t\treturn undefined;\n\t\t}\n\t}\n}\n"],
  "mappings": ";;AAKA;AAAA,EACC;AAAA,OAEM;AACP;AAAA,EAEC;AAAA,OACM;AAUP,SAAS,2BAA2B;AAG7B,MAAM,yCACJ,WAET;AAAA,EAKC,YACkB,oBACA,SACjB,YACiB,4BAChB;AACD,UAAM;AALW;AACA;AAEA;AAIjB,SAAK,UAAU,aAAa,KAAK,0BAA0B,CAAC;AAC5D,SAAK,UAAU,UAAU;AAAA,EAC1B;AAAA,EA3CD,OA4BA;AAAA;AAAA;AAAA,EACC,IAAI,4CAAiE;AACpE,WAAO,KAAK,QAAQ;AAAA,EACrB;AAAA,EAcA,kBAA0B;AACzB,WAAO,KAAK,QAAQ,gBAAgB;AAAA,EACrC;AAAA,EAEA,SAAS,MAAc,QAAiB,OAAmC;AAC1E,UAAM,IAAI,MAAM,gBAAgB;AAAA,EACjC;AAAA,EAEA,gBACC,MACA,QACA,OAC4B;AAE5B,QAAI,KAAK,UAAU,KAAK,2BAA2B,IAAI,GAAG;AACzD,aAAO,oBAAoB,KAAK,oBAAoB,KAAK;AAAA,IAC1D;AAEA,WAAO,KAAK,QAAQ,gBAAgB,MAAM,QAAQ,KAAK;AAAA,EACxD;AAAA,EAEA,0BACC,WACA,OACmC;AACnC,QAAI,KAAK,QAAQ,2BAA2B;AAC3C,aAAO,KAAK,QAAQ,0BAA0B,WAAW,KAAK;AAAA,IAC/D,OAAO;AACN,aAAO;AAAA,IACR;AAAA,EACD;AACD;",
  "names": []
}
