{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/textMate/browser/backgroundTokenization/threadedBackgroundTokenizerFactory.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport type { IRawTheme } from \"vscode-textmate\";\nimport { createWebWorker } from \"../../../../../base/browser/defaultWorkerFactory.js\";\nimport { canASAR } from \"../../../../../base/common/amd.js\";\nimport {\n\tDisposableStore,\n\ttype IDisposable,\n\ttoDisposable,\n} from \"../../../../../base/common/lifecycle.js\";\nimport {\n\ttype AppResourcePath,\n\tFileAccess,\n\tnodeModulesAsarPath,\n\tnodeModulesPath,\n} from \"../../../../../base/common/network.js\";\nimport type { IObservable } from \"../../../../../base/common/observable.js\";\nimport { isWeb } from \"../../../../../base/common/platform.js\";\nimport { URI, type UriComponents } from \"../../../../../base/common/uri.js\";\nimport type {\n\tIWorkerClient,\n\tProxied,\n} from \"../../../../../base/common/worker/simpleWorker.js\";\nimport type {\n\tIBackgroundTokenizationStore,\n\tIBackgroundTokenizer,\n} from \"../../../../../editor/common/languages.js\";\nimport { ILanguageService } from \"../../../../../editor/common/languages/language.js\";\nimport type { ITextModel } from \"../../../../../editor/common/model.js\";\nimport { IConfigurationService } from \"../../../../../platform/configuration/common/configuration.js\";\nimport { IEnvironmentService } from \"../../../../../platform/environment/common/environment.js\";\nimport { IExtensionResourceLoaderService } from \"../../../../../platform/extensionResourceLoader/common/extensionResourceLoader.js\";\nimport { INotificationService } from \"../../../../../platform/notification/common/notification.js\";\nimport { ITelemetryService } from \"../../../../../platform/telemetry/common/telemetry.js\";\nimport type { IValidGrammarDefinition } from \"../../common/TMScopeRegistry.js\";\nimport { TextMateWorkerTokenizerController } from \"./textMateWorkerTokenizerController.js\";\nimport type {\n\tICreateData,\n\tStateDeltas,\n\tTextMateTokenizationWorker,\n} from \"./worker/textMateTokenizationWorker.worker.js\";\nimport { TextMateWorkerHost } from \"./worker/textMateWorkerHost.js\";\n\nexport class ThreadedBackgroundTokenizerFactory implements IDisposable {\n\tprivate static _reportedMismatchingTokens = false;\n\n\tprivate _workerProxyPromise: Promise<Proxied<TextMateTokenizationWorker> | null> | null =\n\t\tnull;\n\tprivate _worker: IWorkerClient<TextMateTokenizationWorker> | null = null;\n\tprivate _workerProxy: Proxied<TextMateTokenizationWorker> | null = null;\n\tprivate readonly _workerTokenizerControllers = new Map<\n\t\t/* backgroundTokenizerId */ number,\n\t\tTextMateWorkerTokenizerController\n\t>();\n\n\tprivate _currentTheme: IRawTheme | null = null;\n\tprivate _currentTokenColorMap: string[] | null = null;\n\tprivate _grammarDefinitions: IValidGrammarDefinition[] = [];\n\n\tconstructor(\n\t\tprivate readonly _reportTokenizationTime: (\n\t\t\ttimeMs: number,\n\t\t\tlanguageId: string,\n\t\t\tsourceExtensionId: string | undefined,\n\t\t\tlineLength: number,\n\t\t\tisRandomSample: boolean,\n\t\t) => void,\n\t\tprivate readonly _shouldTokenizeAsync: () => boolean,\n\t\t@IExtensionResourceLoaderService\n\t\tprivate readonly _extensionResourceLoaderService: IExtensionResourceLoaderService,\n\t\t@IConfigurationService\n\t\tprivate readonly _configurationService: IConfigurationService,\n\t\t@ILanguageService private readonly _languageService: ILanguageService,\n\t\t@IEnvironmentService\n\t\tprivate readonly _environmentService: IEnvironmentService,\n\t\t@INotificationService\n\t\tprivate readonly _notificationService: INotificationService,\n\t\t@ITelemetryService\n\t\tprivate readonly _telemetryService: ITelemetryService,\n\t) {}\n\n\tpublic dispose(): void {\n\t\tthis._disposeWorker();\n\t}\n\n\t// Will be recreated after worker is disposed (because tokenizer is re-registered when languages change)\n\tpublic createBackgroundTokenizer(\n\t\ttextModel: ITextModel,\n\t\ttokenStore: IBackgroundTokenizationStore,\n\t\tmaxTokenizationLineLength: IObservable<number>,\n\t): IBackgroundTokenizer | undefined {\n\t\t// fallback to default sync background tokenizer\n\t\tif (!this._shouldTokenizeAsync() || textModel.isTooLargeForSyncing()) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\tconst store = new DisposableStore();\n\t\tconst controllerContainer = this._getWorkerProxy().then(\n\t\t\t(workerProxy) => {\n\t\t\t\tif (store.isDisposed || !workerProxy) {\n\t\t\t\t\treturn undefined;\n\t\t\t\t}\n\n\t\t\t\tconst controllerContainer = {\n\t\t\t\t\tcontroller: undefined as\n\t\t\t\t\t\t| undefined\n\t\t\t\t\t\t| TextMateWorkerTokenizerController,\n\t\t\t\t\tworker: this._worker,\n\t\t\t\t};\n\t\t\t\tstore.add(\n\t\t\t\t\tkeepAliveWhenAttached(textModel, () => {\n\t\t\t\t\t\tconst controller =\n\t\t\t\t\t\t\tnew TextMateWorkerTokenizerController(\n\t\t\t\t\t\t\t\ttextModel,\n\t\t\t\t\t\t\t\tworkerProxy,\n\t\t\t\t\t\t\t\tthis._languageService.languageIdCodec,\n\t\t\t\t\t\t\t\ttokenStore,\n\t\t\t\t\t\t\t\tthis._configurationService,\n\t\t\t\t\t\t\t\tmaxTokenizationLineLength,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\tcontrollerContainer.controller = controller;\n\t\t\t\t\t\tthis._workerTokenizerControllers.set(\n\t\t\t\t\t\t\tcontroller.controllerId,\n\t\t\t\t\t\t\tcontroller,\n\t\t\t\t\t\t);\n\t\t\t\t\t\treturn toDisposable(() => {\n\t\t\t\t\t\t\tcontrollerContainer.controller = undefined;\n\t\t\t\t\t\t\tthis._workerTokenizerControllers.delete(\n\t\t\t\t\t\t\t\tcontroller.controllerId,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tcontroller.dispose();\n\t\t\t\t\t\t});\n\t\t\t\t\t}),\n\t\t\t\t);\n\t\t\t\treturn controllerContainer;\n\t\t\t},\n\t\t);\n\n\t\treturn {\n\t\t\tdispose() {\n\t\t\t\tstore.dispose();\n\t\t\t},\n\t\t\trequestTokens: async (startLineNumber, endLineNumberExclusive) => {\n\t\t\t\tconst container = await controllerContainer;\n\n\t\t\t\t// If there is no controller, the model has been detached in the meantime.\n\t\t\t\t// Only request the proxy object if the worker is the same!\n\t\t\t\tif (\n\t\t\t\t\tcontainer?.controller &&\n\t\t\t\t\tcontainer.worker === this._worker\n\t\t\t\t) {\n\t\t\t\t\tcontainer.controller.requestTokens(\n\t\t\t\t\t\tstartLineNumber,\n\t\t\t\t\t\tendLineNumberExclusive,\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t},\n\t\t\treportMismatchingTokens: (lineNumber) => {\n\t\t\t\tif (\n\t\t\t\t\tThreadedBackgroundTokenizerFactory._reportedMismatchingTokens\n\t\t\t\t) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tThreadedBackgroundTokenizerFactory._reportedMismatchingTokens = true;\n\n\t\t\t\tthis._notificationService.error({\n\t\t\t\t\tmessage:\n\t\t\t\t\t\t\"Async Tokenization Token Mismatch in line \" +\n\t\t\t\t\t\tlineNumber,\n\t\t\t\t\tname: \"Async Tokenization Token Mismatch\",\n\t\t\t\t});\n\n\t\t\t\tthis._telemetryService.publicLog2<\n\t\t\t\t\t{},\n\t\t\t\t\t{\n\t\t\t\t\t\towner: \"hediet\";\n\t\t\t\t\t\tcomment: \"Used to see if async tokenization is bug-free\";\n\t\t\t\t\t}\n\t\t\t\t>(\"asyncTokenizationMismatchingTokens\", {});\n\t\t\t},\n\t\t};\n\t}\n\n\tpublic setGrammarDefinitions(\n\t\tgrammarDefinitions: IValidGrammarDefinition[],\n\t): void {\n\t\tthis._grammarDefinitions = grammarDefinitions;\n\t\tthis._disposeWorker();\n\t}\n\n\tpublic acceptTheme(theme: IRawTheme, colorMap: string[]): void {\n\t\tthis._currentTheme = theme;\n\t\tthis._currentTokenColorMap = colorMap;\n\t\tif (\n\t\t\tthis._currentTheme &&\n\t\t\tthis._currentTokenColorMap &&\n\t\t\tthis._workerProxy\n\t\t) {\n\t\t\tthis._workerProxy.$acceptTheme(\n\t\t\t\tthis._currentTheme,\n\t\t\t\tthis._currentTokenColorMap,\n\t\t\t);\n\t\t}\n\t}\n\n\tprivate _getWorkerProxy(): Promise<Proxied<TextMateTokenizationWorker> | null> {\n\t\tif (!this._workerProxyPromise) {\n\t\t\tthis._workerProxyPromise = this._createWorkerProxy();\n\t\t}\n\t\treturn this._workerProxyPromise;\n\t}\n\n\tprivate async _createWorkerProxy(): Promise<Proxied<TextMateTokenizationWorker> | null> {\n\t\tconst onigurumaModuleLocation: AppResourcePath = `${nodeModulesPath}/vscode-oniguruma`;\n\t\tconst onigurumaModuleLocationAsar: AppResourcePath = `${nodeModulesAsarPath}/vscode-oniguruma`;\n\n\t\tconst useAsar = canASAR && this._environmentService.isBuilt && !isWeb;\n\t\tconst onigurumaLocation: AppResourcePath = useAsar\n\t\t\t? onigurumaModuleLocationAsar\n\t\t\t: onigurumaModuleLocation;\n\t\tconst onigurumaWASM: AppResourcePath = `${onigurumaLocation}/release/onig.wasm`;\n\n\t\tconst createData: ICreateData = {\n\t\t\tgrammarDefinitions: this._grammarDefinitions,\n\t\t\tonigurumaWASMUri:\n\t\t\t\tFileAccess.asBrowserUri(onigurumaWASM).toString(true),\n\t\t};\n\t\tconst worker = (this._worker =\n\t\t\tcreateWebWorker<TextMateTokenizationWorker>(\n\t\t\t\t\"vs/workbench/services/textMate/browser/backgroundTokenization/worker/textMateTokenizationWorker.worker\",\n\t\t\t\t\"TextMateWorker\",\n\t\t\t));\n\t\tTextMateWorkerHost.setChannel(worker, {\n\t\t\t$readFile: async (_resource: UriComponents): Promise<string> => {\n\t\t\t\tconst resource = URI.revive(_resource);\n\t\t\t\treturn this._extensionResourceLoaderService.readExtensionResource(\n\t\t\t\t\tresource,\n\t\t\t\t);\n\t\t\t},\n\t\t\t$setTokensAndStates: async (\n\t\t\t\tcontrollerId: number,\n\t\t\t\tversionId: number,\n\t\t\t\ttokens: Uint8Array,\n\t\t\t\tlineEndStateDeltas: StateDeltas[],\n\t\t\t): Promise<void> => {\n\t\t\t\tconst controller =\n\t\t\t\t\tthis._workerTokenizerControllers.get(controllerId);\n\t\t\t\t// When a model detaches, it is removed synchronously from the map.\n\t\t\t\t// However, the worker might still be sending tokens for that model,\n\t\t\t\t// so we ignore the event when there is no controller.\n\t\t\t\tif (controller) {\n\t\t\t\t\tcontroller.setTokensAndStates(\n\t\t\t\t\t\tcontrollerId,\n\t\t\t\t\t\tversionId,\n\t\t\t\t\t\ttokens,\n\t\t\t\t\t\tlineEndStateDeltas,\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t},\n\t\t\t$reportTokenizationTime: (\n\t\t\t\ttimeMs: number,\n\t\t\t\tlanguageId: string,\n\t\t\t\tsourceExtensionId: string | undefined,\n\t\t\t\tlineLength: number,\n\t\t\t\tisRandomSample: boolean,\n\t\t\t): void => {\n\t\t\t\tthis._reportTokenizationTime(\n\t\t\t\t\ttimeMs,\n\t\t\t\t\tlanguageId,\n\t\t\t\t\tsourceExtensionId,\n\t\t\t\t\tlineLength,\n\t\t\t\t\tisRandomSample,\n\t\t\t\t);\n\t\t\t},\n\t\t});\n\t\tawait worker.proxy.$init(createData);\n\n\t\tif (this._worker !== worker) {\n\t\t\t// disposed in the meantime\n\t\t\treturn null;\n\t\t}\n\t\tthis._workerProxy = worker.proxy;\n\t\tif (this._currentTheme && this._currentTokenColorMap) {\n\t\t\tthis._workerProxy.$acceptTheme(\n\t\t\t\tthis._currentTheme,\n\t\t\t\tthis._currentTokenColorMap,\n\t\t\t);\n\t\t}\n\t\treturn worker.proxy;\n\t}\n\n\tprivate _disposeWorker(): void {\n\t\tfor (const controller of this._workerTokenizerControllers.values()) {\n\t\t\tcontroller.dispose();\n\t\t}\n\t\tthis._workerTokenizerControllers.clear();\n\n\t\tif (this._worker) {\n\t\t\tthis._worker.dispose();\n\t\t\tthis._worker = null;\n\t\t}\n\t\tthis._workerProxy = null;\n\t\tthis._workerProxyPromise = null;\n\t}\n}\n\nfunction keepAliveWhenAttached(\n\ttextModel: ITextModel,\n\tfactory: () => IDisposable,\n): IDisposable {\n\tconst disposableStore = new DisposableStore();\n\tconst subStore = disposableStore.add(new DisposableStore());\n\n\tfunction checkAttached() {\n\t\tif (textModel.isAttachedToEditor()) {\n\t\t\tsubStore.add(factory());\n\t\t} else {\n\t\t\tsubStore.clear();\n\t\t}\n\t}\n\n\tcheckAttached();\n\tdisposableStore.add(\n\t\ttextModel.onDidChangeAttached(() => {\n\t\t\tcheckAttached();\n\t\t}),\n\t);\n\treturn disposableStore;\n}\n"],
  "mappings": "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",
  "names": ["controllerContainer"]
}
