{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/textMate/browser/backgroundTokenization/threadedBackgroundTokenizerFactory.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { canASAR } from '../../../../../base/common/amd.js';\nimport { DisposableStore, IDisposable, toDisposable } from '../../../../../base/common/lifecycle.js';\nimport { AppResourcePath, FileAccess, nodeModulesAsarPath, nodeModulesPath } from '../../../../../base/common/network.js';\nimport { IObservable } from '../../../../../base/common/observable.js';\nimport { isWeb } from '../../../../../base/common/platform.js';\nimport { URI, UriComponents } from '../../../../../base/common/uri.js';\nimport { IBackgroundTokenizationStore, IBackgroundTokenizer } from '../../../../../editor/common/languages.js';\nimport { ILanguageService } from '../../../../../editor/common/languages/language.js';\nimport { ITextModel } from '../../../../../editor/common/model.js';\nimport { IConfigurationService } from '../../../../../platform/configuration/common/configuration.js';\nimport { IEnvironmentService } from '../../../../../platform/environment/common/environment.js';\nimport { IExtensionResourceLoaderService } from '../../../../../platform/extensionResourceLoader/common/extensionResourceLoader.js';\nimport { INotificationService } from '../../../../../platform/notification/common/notification.js';\nimport { ITelemetryService } from '../../../../../platform/telemetry/common/telemetry.js';\nimport { ICreateData, StateDeltas, TextMateTokenizationWorker } from './worker/textMateTokenizationWorker.worker.js';\nimport { TextMateWorkerHost } from './worker/textMateWorkerHost.js';\nimport { TextMateWorkerTokenizerController } from './textMateWorkerTokenizerController.js';\nimport { IValidGrammarDefinition } from '../../common/TMScopeRegistry.js';\nimport type { IRawTheme } from 'vscode-textmate';\nimport { createWebWorker } from '../../../../../base/browser/defaultWorkerFactory.js';\nimport { IWorkerClient, Proxied } from '../../../../../base/common/worker/simpleWorker.js';\n\nexport class ThreadedBackgroundTokenizerFactory implements IDisposable {\n\tprivate static _reportedMismatchingTokens = false;\n\n\tprivate _workerProxyPromise: Promise<Proxied<TextMateTokenizationWorker> | null> | null = null;\n\tprivate _worker: IWorkerClient<TextMateTokenizationWorker> | null = null;\n\tprivate _workerProxy: Proxied<TextMateTokenizationWorker> | null = null;\n\tprivate readonly _workerTokenizerControllers = new Map</* backgroundTokenizerId */number, TextMateWorkerTokenizerController>();\n\n\tprivate _currentTheme: IRawTheme | null = null;\n\tprivate _currentTokenColorMap: string[] | null = null;\n\tprivate _grammarDefinitions: IValidGrammarDefinition[] = [];\n\n\tconstructor(\n\t\tprivate readonly _reportTokenizationTime: (timeMs: number, languageId: string, sourceExtensionId: string | undefined, lineLength: number, isRandomSample: boolean) => void,\n\t\tprivate readonly _shouldTokenizeAsync: () => boolean,\n\t\t@IExtensionResourceLoaderService private readonly _extensionResourceLoaderService: IExtensionResourceLoaderService,\n\t\t@IConfigurationService private readonly _configurationService: IConfigurationService,\n\t\t@ILanguageService private readonly _languageService: ILanguageService,\n\t\t@IEnvironmentService private readonly _environmentService: IEnvironmentService,\n\t\t@INotificationService private readonly _notificationService: INotificationService,\n\t\t@ITelemetryService private readonly _telemetryService: ITelemetryService,\n\t) {\n\t}\n\n\tpublic dispose(): void {\n\t\tthis._disposeWorker();\n\t}\n\n\t// Will be recreated after worker is disposed (because tokenizer is re-registered when languages change)\n\tpublic createBackgroundTokenizer(textModel: ITextModel, tokenStore: IBackgroundTokenizationStore, maxTokenizationLineLength: IObservable<number>): IBackgroundTokenizer | undefined {\n\t\t// fallback to default sync background tokenizer\n\t\tif (!this._shouldTokenizeAsync() || textModel.isTooLargeForSyncing()) { return undefined; }\n\n\t\tconst store = new DisposableStore();\n\t\tconst controllerContainer = this._getWorkerProxy().then((workerProxy) => {\n\t\t\tif (store.isDisposed || !workerProxy) { return undefined; }\n\n\t\t\tconst controllerContainer = { controller: undefined as undefined | TextMateWorkerTokenizerController, worker: this._worker };\n\t\t\tstore.add(keepAliveWhenAttached(textModel, () => {\n\t\t\t\tconst controller = new TextMateWorkerTokenizerController(textModel, workerProxy, this._languageService.languageIdCodec, tokenStore, this._configurationService, maxTokenizationLineLength);\n\t\t\t\tcontrollerContainer.controller = controller;\n\t\t\t\tthis._workerTokenizerControllers.set(controller.controllerId, controller);\n\t\t\t\treturn toDisposable(() => {\n\t\t\t\t\tcontrollerContainer.controller = undefined;\n\t\t\t\t\tthis._workerTokenizerControllers.delete(controller.controllerId);\n\t\t\t\t\tcontroller.dispose();\n\t\t\t\t});\n\t\t\t}));\n\t\t\treturn controllerContainer;\n\t\t});\n\n\t\treturn {\n\t\t\tdispose() {\n\t\t\t\tstore.dispose();\n\t\t\t},\n\t\t\trequestTokens: async (startLineNumber, endLineNumberExclusive) => {\n\t\t\t\tconst container = await controllerContainer;\n\n\t\t\t\t// If there is no controller, the model has been detached in the meantime.\n\t\t\t\t// Only request the proxy object if the worker is the same!\n\t\t\t\tif (container?.controller && container.worker === this._worker) {\n\t\t\t\t\tcontainer.controller.requestTokens(startLineNumber, endLineNumberExclusive);\n\t\t\t\t}\n\t\t\t},\n\t\t\treportMismatchingTokens: (lineNumber) => {\n\t\t\t\tif (ThreadedBackgroundTokenizerFactory._reportedMismatchingTokens) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tThreadedBackgroundTokenizerFactory._reportedMismatchingTokens = true;\n\n\t\t\t\tthis._notificationService.error({\n\t\t\t\t\tmessage: 'Async Tokenization Token Mismatch in line ' + lineNumber,\n\t\t\t\t\tname: 'Async Tokenization Token Mismatch',\n\t\t\t\t});\n\n\t\t\t\tthis._telemetryService.publicLog2<{}, { owner: 'hediet'; comment: 'Used to see if async tokenization is bug-free' }>('asyncTokenizationMismatchingTokens', {});\n\t\t\t},\n\t\t};\n\t}\n\n\tpublic setGrammarDefinitions(grammarDefinitions: IValidGrammarDefinition[]): void {\n\t\tthis._grammarDefinitions = grammarDefinitions;\n\t\tthis._disposeWorker();\n\t}\n\n\tpublic acceptTheme(theme: IRawTheme, colorMap: string[]): void {\n\t\tthis._currentTheme = theme;\n\t\tthis._currentTokenColorMap = colorMap;\n\t\tif (this._currentTheme && this._currentTokenColorMap && this._workerProxy) {\n\t\t\tthis._workerProxy.$acceptTheme(this._currentTheme, this._currentTokenColorMap);\n\t\t}\n\t}\n\n\tprivate _getWorkerProxy(): Promise<Proxied<TextMateTokenizationWorker> | null> {\n\t\tif (!this._workerProxyPromise) {\n\t\t\tthis._workerProxyPromise = this._createWorkerProxy();\n\t\t}\n\t\treturn this._workerProxyPromise;\n\t}\n\n\tprivate async _createWorkerProxy(): Promise<Proxied<TextMateTokenizationWorker> | null> {\n\t\tconst onigurumaModuleLocation: AppResourcePath = `${nodeModulesPath}/vscode-oniguruma`;\n\t\tconst onigurumaModuleLocationAsar: AppResourcePath = `${nodeModulesAsarPath}/vscode-oniguruma`;\n\n\t\tconst useAsar = canASAR && this._environmentService.isBuilt && !isWeb;\n\t\tconst onigurumaLocation: AppResourcePath = useAsar ? onigurumaModuleLocationAsar : onigurumaModuleLocation;\n\t\tconst onigurumaWASM: AppResourcePath = `${onigurumaLocation}/release/onig.wasm`;\n\n\t\tconst createData: ICreateData = {\n\t\t\tgrammarDefinitions: this._grammarDefinitions,\n\t\t\tonigurumaWASMUri: FileAccess.asBrowserUri(onigurumaWASM).toString(true),\n\t\t};\n\t\tconst worker = this._worker = createWebWorker<TextMateTokenizationWorker>(\n\t\t\t'vs/workbench/services/textMate/browser/backgroundTokenization/worker/textMateTokenizationWorker.worker',\n\t\t\t'TextMateWorker'\n\t\t);\n\t\tTextMateWorkerHost.setChannel(worker, {\n\t\t\t$readFile: async (_resource: UriComponents): Promise<string> => {\n\t\t\t\tconst resource = URI.revive(_resource);\n\t\t\t\treturn this._extensionResourceLoaderService.readExtensionResource(resource);\n\t\t\t},\n\t\t\t$setTokensAndStates: async (controllerId: number, versionId: number, tokens: Uint8Array, lineEndStateDeltas: StateDeltas[]): Promise<void> => {\n\t\t\t\tconst controller = this._workerTokenizerControllers.get(controllerId);\n\t\t\t\t// When a model detaches, it is removed synchronously from the map.\n\t\t\t\t// However, the worker might still be sending tokens for that model,\n\t\t\t\t// so we ignore the event when there is no controller.\n\t\t\t\tif (controller) {\n\t\t\t\t\tcontroller.setTokensAndStates(controllerId, versionId, tokens, lineEndStateDeltas);\n\t\t\t\t}\n\t\t\t},\n\t\t\t$reportTokenizationTime: (timeMs: number, languageId: string, sourceExtensionId: string | undefined, lineLength: number, isRandomSample: boolean): void => {\n\t\t\t\tthis._reportTokenizationTime(timeMs, languageId, sourceExtensionId, lineLength, isRandomSample);\n\t\t\t}\n\t\t});\n\t\tawait worker.proxy.$init(createData);\n\n\t\tif (this._worker !== worker) {\n\t\t\t// disposed in the meantime\n\t\t\treturn null;\n\t\t}\n\t\tthis._workerProxy = worker.proxy;\n\t\tif (this._currentTheme && this._currentTokenColorMap) {\n\t\t\tthis._workerProxy.$acceptTheme(this._currentTheme, this._currentTokenColorMap);\n\t\t}\n\t\treturn worker.proxy;\n\t}\n\n\tprivate _disposeWorker(): void {\n\t\tfor (const controller of this._workerTokenizerControllers.values()) {\n\t\t\tcontroller.dispose();\n\t\t}\n\t\tthis._workerTokenizerControllers.clear();\n\n\t\tif (this._worker) {\n\t\t\tthis._worker.dispose();\n\t\t\tthis._worker = null;\n\t\t}\n\t\tthis._workerProxy = null;\n\t\tthis._workerProxyPromise = null;\n\t}\n}\n\nfunction keepAliveWhenAttached(textModel: ITextModel, factory: () => IDisposable): IDisposable {\n\tconst disposableStore = new DisposableStore();\n\tconst subStore = disposableStore.add(new DisposableStore());\n\n\tfunction checkAttached() {\n\t\tif (textModel.isAttachedToEditor()) {\n\t\t\tsubStore.add(factory());\n\t\t} else {\n\t\t\tsubStore.clear();\n\t\t}\n\t}\n\n\tcheckAttached();\n\tdisposableStore.add(textModel.onDidChangeAttached(() => {\n\t\tcheckAttached();\n\t}));\n\treturn disposableStore;\n}\n"],
  "mappings": "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",
  "names": ["controllerContainer"]
}
