{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/textMate/browser/textMateTokenizationFeatureImpl.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport type { IGrammar, IOnigLib, IRawTheme } from \"vscode-textmate\";\nimport {\n\timportAMDNodeModule,\n\tresolveAmdNodeModulePath,\n} from \"../../../../amdX.js\";\nimport * as dom from \"../../../../base/browser/dom.js\";\nimport { canASAR, isESM } from \"../../../../base/common/amd.js\";\nimport { equals as equalArray } from \"../../../../base/common/arrays.js\";\nimport { Color } from \"../../../../base/common/color.js\";\nimport { onUnexpectedError } from \"../../../../base/common/errors.js\";\nimport {\n\tDisposable,\n\tDisposableStore,\n\ttype IDisposable,\n} from \"../../../../base/common/lifecycle.js\";\nimport {\n\tFileAccess,\n\tnodeModulesAsarUnpackedPath,\n\tnodeModulesPath,\n} from \"../../../../base/common/network.js\";\nimport {\n\ttype IObservable,\n\tobservableFromEvent,\n} from \"../../../../base/common/observable.js\";\nimport { isWeb } from \"../../../../base/common/platform.js\";\nimport * as resources from \"../../../../base/common/resources.js\";\nimport * as types from \"../../../../base/common/types.js\";\nimport type { URI } from \"../../../../base/common/uri.js\";\nimport { StandardTokenType } from \"../../../../editor/common/encodedTokenAttributes.js\";\nimport {\n\ttype ITokenizationSupport,\n\tLazyTokenizationSupport,\n\tTokenizationRegistry,\n} from \"../../../../editor/common/languages.js\";\nimport { ILanguageService } from \"../../../../editor/common/languages/language.js\";\nimport { generateTokensCSSForColorMap } from \"../../../../editor/common/languages/supports/tokenization.js\";\nimport * as nls from \"../../../../nls.js\";\nimport { IConfigurationService } from \"../../../../platform/configuration/common/configuration.js\";\nimport { IExtensionResourceLoaderService } from \"../../../../platform/extensionResourceLoader/common/extensionResourceLoader.js\";\nimport { IInstantiationService } from \"../../../../platform/instantiation/common/instantiation.js\";\nimport { ILogService } from \"../../../../platform/log/common/log.js\";\nimport { INotificationService } from \"../../../../platform/notification/common/notification.js\";\nimport {\n\tIProgressService,\n\tProgressLocation,\n} from \"../../../../platform/progress/common/progress.js\";\nimport { ITelemetryService } from \"../../../../platform/telemetry/common/telemetry.js\";\nimport { IWorkbenchEnvironmentService } from \"../../environment/common/environmentService.js\";\nimport type {\n\tExtensionMessageCollector,\n\tIExtensionPointUser,\n} from \"../../extensions/common/extensionsRegistry.js\";\nimport {\n\ttype ITextMateThemingRule,\n\ttype IWorkbenchColorTheme,\n\tIWorkbenchThemeService,\n} from \"../../themes/common/workbenchThemeService.js\";\nimport {\n\tTMGrammarFactory,\n\tmissingTMGrammarErrorMessage,\n} from \"../common/TMGrammarFactory.js\";\nimport {\n\ttype ITMSyntaxExtensionPoint,\n\tgrammarsExtPoint,\n} from \"../common/TMGrammars.js\";\nimport type {\n\tIValidEmbeddedLanguagesMap,\n\tIValidGrammarDefinition,\n\tIValidTokenTypeMap,\n} from \"../common/TMScopeRegistry.js\";\nimport { ThreadedBackgroundTokenizerFactory } from \"./backgroundTokenization/threadedBackgroundTokenizerFactory.js\";\nimport type { ITextMateTokenizationService } from \"./textMateTokenizationFeature.js\";\nimport { TextMateTokenizationSupport } from \"./tokenizationSupport/textMateTokenizationSupport.js\";\nimport { TokenizationSupportWithLineLimit } from \"./tokenizationSupport/tokenizationSupportWithLineLimit.js\";\n\nexport class TextMateTokenizationFeature\n\textends Disposable\n\timplements ITextMateTokenizationService\n{\n\tprivate static reportTokenizationTimeCounter = { sync: 0, async: 0 };\n\tpublic _serviceBrand: undefined;\n\n\tprivate readonly _styleElement: HTMLStyleElement;\n\tprivate readonly _createdModes: string[] = [];\n\tprivate readonly _encounteredLanguages: boolean[] = [];\n\n\tprivate _debugMode = false;\n\tprivate _debugModePrintFunc: (str: string) => void = () => {};\n\n\tprivate _grammarDefinitions: IValidGrammarDefinition[] | null = null;\n\tprivate _grammarFactory: TMGrammarFactory | null = null;\n\tprivate readonly _tokenizersRegistrations = new DisposableStore();\n\tprivate _currentTheme: IRawTheme | null = null;\n\tprivate _currentTokenColorMap: string[] | null = null;\n\tprivate readonly _threadedBackgroundTokenizerFactory =\n\t\tthis._instantiationService.createInstance(\n\t\t\tThreadedBackgroundTokenizerFactory,\n\t\t\t(\n\t\t\t\ttimeMs,\n\t\t\t\tlanguageId,\n\t\t\t\tsourceExtensionId,\n\t\t\t\tlineLength,\n\t\t\t\tisRandomSample,\n\t\t\t) =>\n\t\t\t\tthis._reportTokenizationTime(\n\t\t\t\t\ttimeMs,\n\t\t\t\t\tlanguageId,\n\t\t\t\t\tsourceExtensionId,\n\t\t\t\t\tlineLength,\n\t\t\t\t\ttrue,\n\t\t\t\t\tisRandomSample,\n\t\t\t\t),\n\t\t\t() => this.getAsyncTokenizationEnabled(),\n\t\t);\n\n\tconstructor(\n\t\t@ILanguageService private readonly _languageService: ILanguageService,\n\t\t@IWorkbenchThemeService private readonly _themeService: IWorkbenchThemeService,\n\t\t@IExtensionResourceLoaderService private readonly _extensionResourceLoaderService: IExtensionResourceLoaderService,\n\t\t@INotificationService private readonly _notificationService: INotificationService,\n\t\t@ILogService private readonly _logService: ILogService,\n\t\t@IConfigurationService private readonly _configurationService: IConfigurationService,\n\t\t@IProgressService private readonly _progressService: IProgressService,\n\t\t@IWorkbenchEnvironmentService private readonly _environmentService: IWorkbenchEnvironmentService,\n\t\t@IInstantiationService private readonly _instantiationService: IInstantiationService,\n\t\t@ITelemetryService private readonly _telemetryService: ITelemetryService,\n\t) {\n\t\tsuper();\n\n\t\tthis._styleElement = dom.createStyleSheet();\n\t\tthis._styleElement.className = 'vscode-tokens-styles';\n\n\t\tgrammarsExtPoint.setHandler((extensions) => this._handleGrammarsExtPoint(extensions));\n\n\t\tthis._updateTheme(this._themeService.getColorTheme(), true);\n\t\tthis._register(this._themeService.onDidColorThemeChange(() => {\n\t\t\tthis._updateTheme(this._themeService.getColorTheme(), false);\n\t\t}));\n\n\t\tthis._register(this._languageService.onDidRequestRichLanguageFeatures((languageId) => {\n\t\t\tthis._createdModes.push(languageId);\n\t\t}));\n\t}\n\n\tprivate getAsyncTokenizationEnabled(): boolean {\n\t\treturn !!this._configurationService.getValue<boolean>(\n\t\t\t\"editor.experimental.asyncTokenization\",\n\t\t);\n\t}\n\n\tprivate getAsyncTokenizationVerification(): boolean {\n\t\treturn !!this._configurationService.getValue<boolean>(\n\t\t\t\"editor.experimental.asyncTokenizationVerification\",\n\t\t);\n\t}\n\n\tprivate _handleGrammarsExtPoint(\n\t\textensions: readonly IExtensionPointUser<ITMSyntaxExtensionPoint[]>[],\n\t): void {\n\t\tthis._grammarDefinitions = null;\n\t\tif (this._grammarFactory) {\n\t\t\tthis._grammarFactory.dispose();\n\t\t\tthis._grammarFactory = null;\n\t\t}\n\t\tthis._tokenizersRegistrations.clear();\n\n\t\tthis._grammarDefinitions = [];\n\t\tfor (const extension of extensions) {\n\t\t\tconst grammars = extension.value;\n\t\t\tfor (const grammar of grammars) {\n\t\t\t\tconst validatedGrammar = this._validateGrammarDefinition(\n\t\t\t\t\textension,\n\t\t\t\t\tgrammar,\n\t\t\t\t);\n\t\t\t\tif (validatedGrammar) {\n\t\t\t\t\tthis._grammarDefinitions.push(validatedGrammar);\n\t\t\t\t\tif (validatedGrammar.language) {\n\t\t\t\t\t\tconst lazyTokenizationSupport =\n\t\t\t\t\t\t\tnew LazyTokenizationSupport(() =>\n\t\t\t\t\t\t\t\tthis._createTokenizationSupport(\n\t\t\t\t\t\t\t\t\tvalidatedGrammar.language!,\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\tthis._tokenizersRegistrations.add(\n\t\t\t\t\t\t\tlazyTokenizationSupport,\n\t\t\t\t\t\t);\n\t\t\t\t\t\tthis._tokenizersRegistrations.add(\n\t\t\t\t\t\t\tTokenizationRegistry.registerFactory(\n\t\t\t\t\t\t\t\tvalidatedGrammar.language,\n\t\t\t\t\t\t\t\tlazyTokenizationSupport,\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tthis._threadedBackgroundTokenizerFactory.setGrammarDefinitions(\n\t\t\tthis._grammarDefinitions,\n\t\t);\n\n\t\tfor (const createdMode of this._createdModes) {\n\t\t\tTokenizationRegistry.getOrCreate(createdMode);\n\t\t}\n\t}\n\n\tprivate _validateGrammarDefinition(\n\t\textension: IExtensionPointUser<ITMSyntaxExtensionPoint[]>,\n\t\tgrammar: ITMSyntaxExtensionPoint,\n\t): IValidGrammarDefinition | null {\n\t\tif (\n\t\t\t!validateGrammarExtensionPoint(\n\t\t\t\textension.description.extensionLocation,\n\t\t\t\tgrammar,\n\t\t\t\textension.collector,\n\t\t\t\tthis._languageService,\n\t\t\t)\n\t\t) {\n\t\t\treturn null;\n\t\t}\n\n\t\tconst grammarLocation = resources.joinPath(\n\t\t\textension.description.extensionLocation,\n\t\t\tgrammar.path,\n\t\t);\n\n\t\tconst embeddedLanguages: IValidEmbeddedLanguagesMap =\n\t\t\tObject.create(null);\n\t\tif (grammar.embeddedLanguages) {\n\t\t\tconst scopes = Object.keys(grammar.embeddedLanguages);\n\t\t\tfor (let i = 0, len = scopes.length; i < len; i++) {\n\t\t\t\tconst scope = scopes[i];\n\t\t\t\tconst language = grammar.embeddedLanguages[scope];\n\t\t\t\tif (typeof language !== \"string\") {\n\t\t\t\t\t// never hurts to be too careful\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tif (this._languageService.isRegisteredLanguageId(language)) {\n\t\t\t\t\tembeddedLanguages[scope] =\n\t\t\t\t\t\tthis._languageService.languageIdCodec.encodeLanguageId(\n\t\t\t\t\t\t\tlanguage,\n\t\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tconst tokenTypes: IValidTokenTypeMap = Object.create(null);\n\t\tif (grammar.tokenTypes) {\n\t\t\tconst scopes = Object.keys(grammar.tokenTypes);\n\t\t\tfor (const scope of scopes) {\n\t\t\t\tconst tokenType = grammar.tokenTypes[scope];\n\t\t\t\tswitch (tokenType) {\n\t\t\t\t\tcase \"string\":\n\t\t\t\t\t\ttokenTypes[scope] = StandardTokenType.String;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"other\":\n\t\t\t\t\t\ttokenTypes[scope] = StandardTokenType.Other;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"comment\":\n\t\t\t\t\t\ttokenTypes[scope] = StandardTokenType.Comment;\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tconst validLanguageId =\n\t\t\tgrammar.language &&\n\t\t\tthis._languageService.isRegisteredLanguageId(grammar.language)\n\t\t\t\t? grammar.language\n\t\t\t\t: undefined;\n\n\t\tfunction asStringArray(\n\t\t\tarray: unknown,\n\t\t\tdefaultValue: string[],\n\t\t): string[] {\n\t\t\tif (!Array.isArray(array)) {\n\t\t\t\treturn defaultValue;\n\t\t\t}\n\t\t\tif (!array.every((e) => typeof e === \"string\")) {\n\t\t\t\treturn defaultValue;\n\t\t\t}\n\t\t\treturn array;\n\t\t}\n\n\t\treturn {\n\t\t\tlocation: grammarLocation,\n\t\t\tlanguage: validLanguageId,\n\t\t\tscopeName: grammar.scopeName,\n\t\t\tembeddedLanguages: embeddedLanguages,\n\t\t\ttokenTypes: tokenTypes,\n\t\t\tinjectTo: grammar.injectTo,\n\t\t\tbalancedBracketSelectors: asStringArray(\n\t\t\t\tgrammar.balancedBracketScopes,\n\t\t\t\t[\"*\"],\n\t\t\t),\n\t\t\tunbalancedBracketSelectors: asStringArray(\n\t\t\t\tgrammar.unbalancedBracketScopes,\n\t\t\t\t[],\n\t\t\t),\n\t\t\tsourceExtensionId: extension.description.id,\n\t\t};\n\t}\n\n\tpublic startDebugMode(\n\t\tprintFn: (str: string) => void,\n\t\tonStop: () => void,\n\t): void {\n\t\tif (this._debugMode) {\n\t\t\tthis._notificationService.error(\n\t\t\t\tnls.localize(\"alreadyDebugging\", \"Already Logging.\"),\n\t\t\t);\n\t\t\treturn;\n\t\t}\n\n\t\tthis._debugModePrintFunc = printFn;\n\t\tthis._debugMode = true;\n\n\t\tif (this._debugMode) {\n\t\t\tthis._progressService.withProgress(\n\t\t\t\t{\n\t\t\t\t\tlocation: ProgressLocation.Notification,\n\t\t\t\t\tbuttons: [nls.localize(\"stop\", \"Stop\")],\n\t\t\t\t},\n\t\t\t\t(progress) => {\n\t\t\t\t\tprogress.report({\n\t\t\t\t\t\tmessage: nls.localize(\n\t\t\t\t\t\t\t\"progress1\",\n\t\t\t\t\t\t\t\"Preparing to log TM Grammar parsing. Press Stop when finished.\",\n\t\t\t\t\t\t),\n\t\t\t\t\t});\n\n\t\t\t\t\treturn this._getVSCodeOniguruma().then(\n\t\t\t\t\t\t(vscodeOniguruma) => {\n\t\t\t\t\t\t\tvscodeOniguruma.setDefaultDebugCall(true);\n\t\t\t\t\t\t\tprogress.report({\n\t\t\t\t\t\t\t\tmessage: nls.localize(\n\t\t\t\t\t\t\t\t\t\"progress2\",\n\t\t\t\t\t\t\t\t\t\"Now logging TM Grammar parsing. Press Stop when finished.\",\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\treturn new Promise<void>((resolve, reject) => {});\n\t\t\t\t\t\t},\n\t\t\t\t\t);\n\t\t\t\t},\n\t\t\t\t(choice) => {\n\t\t\t\t\tthis._getVSCodeOniguruma().then((vscodeOniguruma) => {\n\t\t\t\t\t\tthis._debugModePrintFunc = () => {};\n\t\t\t\t\t\tthis._debugMode = false;\n\t\t\t\t\t\tvscodeOniguruma.setDefaultDebugCall(false);\n\t\t\t\t\t\tonStop();\n\t\t\t\t\t});\n\t\t\t\t},\n\t\t\t);\n\t\t}\n\t}\n\n\tprivate _canCreateGrammarFactory(): boolean {\n\t\t// Check if extension point is ready\n\t\treturn !!this._grammarDefinitions;\n\t}\n\tprivate async _getOrCreateGrammarFactory(): Promise<TMGrammarFactory> {\n\t\tif (this._grammarFactory) {\n\t\t\treturn this._grammarFactory;\n\t\t}\n\n\t\tconst [vscodeTextmate, vscodeOniguruma] = await Promise.all([\n\t\t\timportAMDNodeModule<typeof import(\"vscode-textmate\")>(\n\t\t\t\t\"vscode-textmate\",\n\t\t\t\t\"release/main.js\",\n\t\t\t),\n\t\t\tthis._getVSCodeOniguruma(),\n\t\t]);\n\t\tconst onigLib: Promise<IOnigLib> = Promise.resolve({\n\t\t\tcreateOnigScanner: (sources: string[]) =>\n\t\t\t\tvscodeOniguruma.createOnigScanner(sources),\n\t\t\tcreateOnigString: (str: string) =>\n\t\t\t\tvscodeOniguruma.createOnigString(str),\n\t\t});\n\n\t\t// Avoid duplicate instantiations\n\t\tif (this._grammarFactory) {\n\t\t\treturn this._grammarFactory;\n\t\t}\n\n\t\tthis._grammarFactory = new TMGrammarFactory(\n\t\t\t{\n\t\t\t\tlogTrace: (msg: string) => this._logService.trace(msg),\n\t\t\t\tlogError: (msg: string, err: any) =>\n\t\t\t\t\tthis._logService.error(msg, err),\n\t\t\t\treadFile: (resource: URI) =>\n\t\t\t\t\tthis._extensionResourceLoaderService.readExtensionResource(\n\t\t\t\t\t\tresource,\n\t\t\t\t\t),\n\t\t\t},\n\t\t\tthis._grammarDefinitions || [],\n\t\t\tvscodeTextmate,\n\t\t\tonigLib,\n\t\t);\n\n\t\tthis._updateTheme(this._themeService.getColorTheme(), true);\n\n\t\treturn this._grammarFactory;\n\t}\n\n\tprivate async _createTokenizationSupport(\n\t\tlanguageId: string,\n\t): Promise<(ITokenizationSupport & IDisposable) | null> {\n\t\tif (!this._languageService.isRegisteredLanguageId(languageId)) {\n\t\t\treturn null;\n\t\t}\n\t\tif (!this._canCreateGrammarFactory()) {\n\t\t\treturn null;\n\t\t}\n\n\t\ttry {\n\t\t\tconst grammarFactory = await this._getOrCreateGrammarFactory();\n\t\t\tif (!grammarFactory.has(languageId)) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\tconst encodedLanguageId =\n\t\t\t\tthis._languageService.languageIdCodec.encodeLanguageId(\n\t\t\t\t\tlanguageId,\n\t\t\t\t);\n\t\t\tconst r = await grammarFactory.createGrammar(\n\t\t\t\tlanguageId,\n\t\t\t\tencodedLanguageId,\n\t\t\t);\n\t\t\tif (!r.grammar) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\tconst maxTokenizationLineLength = observableConfigValue<number>(\n\t\t\t\t\"editor.maxTokenizationLineLength\",\n\t\t\t\tlanguageId,\n\t\t\t\t-1,\n\t\t\t\tthis._configurationService,\n\t\t\t);\n\t\t\tconst tokenization = new TextMateTokenizationSupport(\n\t\t\t\tr.grammar,\n\t\t\t\tr.initialState,\n\t\t\t\tr.containsEmbeddedLanguages,\n\t\t\t\t(textModel, tokenStore) =>\n\t\t\t\t\tthis._threadedBackgroundTokenizerFactory.createBackgroundTokenizer(\n\t\t\t\t\t\ttextModel,\n\t\t\t\t\t\ttokenStore,\n\t\t\t\t\t\tmaxTokenizationLineLength,\n\t\t\t\t\t),\n\t\t\t\t() => this.getAsyncTokenizationVerification(),\n\t\t\t\t(timeMs, lineLength, isRandomSample) => {\n\t\t\t\t\tthis._reportTokenizationTime(\n\t\t\t\t\t\ttimeMs,\n\t\t\t\t\t\tlanguageId,\n\t\t\t\t\t\tr.sourceExtensionId,\n\t\t\t\t\t\tlineLength,\n\t\t\t\t\t\tfalse,\n\t\t\t\t\t\tisRandomSample,\n\t\t\t\t\t);\n\t\t\t\t},\n\t\t\t\ttrue,\n\t\t\t);\n\t\t\tconst disposable = tokenization.onDidEncounterLanguage(\n\t\t\t\t(encodedLanguageId) => {\n\t\t\t\t\tif (!this._encounteredLanguages[encodedLanguageId]) {\n\t\t\t\t\t\tconst languageId =\n\t\t\t\t\t\t\tthis._languageService.languageIdCodec.decodeLanguageId(\n\t\t\t\t\t\t\t\tencodedLanguageId,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\tthis._encounteredLanguages[encodedLanguageId] = true;\n\t\t\t\t\t\tthis._languageService.requestBasicLanguageFeatures(\n\t\t\t\t\t\t\tlanguageId,\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t);\n\t\t\treturn new TokenizationSupportWithLineLimit(\n\t\t\t\tencodedLanguageId,\n\t\t\t\ttokenization,\n\t\t\t\tdisposable,\n\t\t\t\tmaxTokenizationLineLength,\n\t\t\t);\n\t\t} catch (err) {\n\t\t\tif (err.message && err.message === missingTMGrammarErrorMessage) {\n\t\t\t\t// Don't log this error message\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\tonUnexpectedError(err);\n\t\t\treturn null;\n\t\t}\n\t}\n\n\tprivate _updateTheme(\n\t\tcolorTheme: IWorkbenchColorTheme,\n\t\tforceUpdate: boolean,\n\t): void {\n\t\tif (\n\t\t\t!forceUpdate &&\n\t\t\tthis._currentTheme &&\n\t\t\tthis._currentTokenColorMap &&\n\t\t\tequalsTokenRules(\n\t\t\t\tthis._currentTheme.settings,\n\t\t\t\tcolorTheme.tokenColors,\n\t\t\t) &&\n\t\t\tequalArray(this._currentTokenColorMap, colorTheme.tokenColorMap)\n\t\t) {\n\t\t\treturn;\n\t\t}\n\t\tthis._currentTheme = {\n\t\t\tname: colorTheme.label,\n\t\t\tsettings: colorTheme.tokenColors,\n\t\t};\n\t\tthis._currentTokenColorMap = colorTheme.tokenColorMap;\n\n\t\tthis._grammarFactory?.setTheme(\n\t\t\tthis._currentTheme,\n\t\t\tthis._currentTokenColorMap,\n\t\t);\n\t\tconst colorMap = toColorMap(this._currentTokenColorMap);\n\t\tconst cssRules = generateTokensCSSForColorMap(colorMap);\n\t\tthis._styleElement.textContent = cssRules;\n\t\tTokenizationRegistry.setColorMap(colorMap);\n\n\t\tif (this._currentTheme && this._currentTokenColorMap) {\n\t\t\tthis._threadedBackgroundTokenizerFactory.acceptTheme(\n\t\t\t\tthis._currentTheme,\n\t\t\t\tthis._currentTokenColorMap,\n\t\t\t);\n\t\t}\n\t}\n\n\tpublic async createTokenizer(languageId: string): Promise<IGrammar | null> {\n\t\tif (!this._languageService.isRegisteredLanguageId(languageId)) {\n\t\t\treturn null;\n\t\t}\n\t\tconst grammarFactory = await this._getOrCreateGrammarFactory();\n\t\tif (!grammarFactory.has(languageId)) {\n\t\t\treturn null;\n\t\t}\n\t\tconst encodedLanguageId =\n\t\t\tthis._languageService.languageIdCodec.encodeLanguageId(languageId);\n\t\tconst { grammar } = await grammarFactory.createGrammar(\n\t\t\tlanguageId,\n\t\t\tencodedLanguageId,\n\t\t);\n\t\treturn grammar;\n\t}\n\n\tprivate _vscodeOniguruma: Promise<\n\t\ttypeof import(\"vscode-oniguruma\")\n\t> | null = null;\n\tprivate _getVSCodeOniguruma(): Promise<typeof import(\"vscode-oniguruma\")> {\n\t\tif (!this._vscodeOniguruma) {\n\t\t\tthis._vscodeOniguruma = (async () => {\n\t\t\t\tconst [vscodeOniguruma, wasm] = await Promise.all([\n\t\t\t\t\timportAMDNodeModule<typeof import(\"vscode-oniguruma\")>(\n\t\t\t\t\t\t\"vscode-oniguruma\",\n\t\t\t\t\t\t\"release/main.js\",\n\t\t\t\t\t),\n\t\t\t\t\tthis._loadVSCodeOnigurumaWASM(),\n\t\t\t\t]);\n\t\t\t\tawait vscodeOniguruma.loadWASM({\n\t\t\t\t\tdata: wasm,\n\t\t\t\t\tprint: (str: string) => {\n\t\t\t\t\t\tthis._debugModePrintFunc(str);\n\t\t\t\t\t},\n\t\t\t\t});\n\t\t\t\treturn vscodeOniguruma;\n\t\t\t})();\n\t\t}\n\t\treturn this._vscodeOniguruma;\n\t}\n\n\tprivate async _loadVSCodeOnigurumaWASM(): Promise<Response | ArrayBuffer> {\n\t\tif (isWeb) {\n\t\t\tconst response = await fetch(\n\t\t\t\tisESM\n\t\t\t\t\t? resolveAmdNodeModulePath(\n\t\t\t\t\t\t\t\"vscode-oniguruma\",\n\t\t\t\t\t\t\t\"release/onig.wasm\",\n\t\t\t\t\t\t)\n\t\t\t\t\t: FileAccess.asBrowserUri(\n\t\t\t\t\t\t\t\"vscode-oniguruma/../onig.wasm\",\n\t\t\t\t\t\t).toString(true),\n\t\t\t);\n\t\t\t// Using the response directly only works if the server sets the MIME type 'application/wasm'.\n\t\t\t// Otherwise, a TypeError is thrown when using the streaming compiler.\n\t\t\t// We therefore use the non-streaming compiler :(.\n\t\t\treturn await response.arrayBuffer();\n\t\t} else {\n\t\t\tconst response = await fetch(\n\t\t\t\tcanASAR && this._environmentService.isBuilt\n\t\t\t\t\t? FileAccess.asBrowserUri(\n\t\t\t\t\t\t\t`${nodeModulesAsarUnpackedPath}/vscode-oniguruma/release/onig.wasm`,\n\t\t\t\t\t\t).toString(true)\n\t\t\t\t\t: FileAccess.asBrowserUri(\n\t\t\t\t\t\t\t`${nodeModulesPath}/vscode-oniguruma/release/onig.wasm`,\n\t\t\t\t\t\t).toString(true),\n\t\t\t);\n\t\t\treturn response;\n\t\t}\n\t}\n\n\tprivate _reportTokenizationTime(\n\t\ttimeMs: number,\n\t\tlanguageId: string,\n\t\tsourceExtensionId: string | undefined,\n\t\tlineLength: number,\n\t\tfromWorker: boolean,\n\t\tisRandomSample: boolean,\n\t): void {\n\t\tconst key = fromWorker ? \"async\" : \"sync\";\n\n\t\t// 50 events per hour (one event has a low probability)\n\t\tif (\n\t\t\tTextMateTokenizationFeature.reportTokenizationTimeCounter[key] > 50\n\t\t) {\n\t\t\t// Don't flood telemetry with too many events\n\t\t\treturn;\n\t\t}\n\t\tif (\n\t\t\tTextMateTokenizationFeature.reportTokenizationTimeCounter[key] === 0\n\t\t) {\n\t\t\tsetTimeout(\n\t\t\t\t() => {\n\t\t\t\t\tTextMateTokenizationFeature.reportTokenizationTimeCounter[\n\t\t\t\t\t\tkey\n\t\t\t\t\t] = 0;\n\t\t\t\t},\n\t\t\t\t1000 * 60 * 60,\n\t\t\t);\n\t\t}\n\t\tTextMateTokenizationFeature.reportTokenizationTimeCounter[key]++;\n\n\t\tthis._telemetryService.publicLog2<\n\t\t\t{\n\t\t\t\ttimeMs: number;\n\t\t\t\tlanguageId: string;\n\t\t\t\tlineLength: number;\n\t\t\t\tfromWorker: boolean;\n\t\t\t\tsourceExtensionId: string | undefined;\n\t\t\t\tisRandomSample: boolean;\n\t\t\t\ttokenizationSetting: number;\n\t\t\t},\n\t\t\t{\n\t\t\t\towner: \"hediet\";\n\n\t\t\t\ttimeMs: {\n\t\t\t\t\tclassification: \"SystemMetaData\";\n\t\t\t\t\tpurpose: \"FeatureInsight\";\n\t\t\t\t\tcomment: \"To understand how long it took to tokenize a random line\";\n\t\t\t\t};\n\t\t\t\tlanguageId: {\n\t\t\t\t\tclassification: \"SystemMetaData\";\n\t\t\t\t\tpurpose: \"FeatureInsight\";\n\t\t\t\t\tcomment: \"To relate the performance to the language\";\n\t\t\t\t};\n\t\t\t\tlineLength: {\n\t\t\t\t\tclassification: \"SystemMetaData\";\n\t\t\t\t\tpurpose: \"FeatureInsight\";\n\t\t\t\t\tcomment: \"To relate the performance to the line length\";\n\t\t\t\t};\n\t\t\t\tfromWorker: {\n\t\t\t\t\tclassification: \"SystemMetaData\";\n\t\t\t\t\tpurpose: \"FeatureInsight\";\n\t\t\t\t\tcomment: \"To figure out if this line was tokenized sync or async\";\n\t\t\t\t};\n\t\t\t\tsourceExtensionId: {\n\t\t\t\t\tclassification: \"SystemMetaData\";\n\t\t\t\t\tpurpose: \"FeatureInsight\";\n\t\t\t\t\tcomment: \"To figure out which extension contributed the grammar\";\n\t\t\t\t};\n\t\t\t\tisRandomSample: {\n\t\t\t\t\tclassification: \"SystemMetaData\";\n\t\t\t\t\tpurpose: \"FeatureInsight\";\n\t\t\t\t\tcomment: \"To figure out if this is a random sample or measured because of some other condition.\";\n\t\t\t\t};\n\t\t\t\ttokenizationSetting: {\n\t\t\t\t\tclassification: \"SystemMetaData\";\n\t\t\t\t\tpurpose: \"FeatureInsight\";\n\t\t\t\t\tcomment: \"To understand if the user has async tokenization enabled. 0=sync, 1=async, 2=verification\";\n\t\t\t\t};\n\n\t\t\t\tcomment: \"This event gives insight about the performance certain grammars.\";\n\t\t\t}\n\t\t>(\"editor.tokenizedLine\", {\n\t\t\ttimeMs,\n\t\t\tlanguageId,\n\t\t\tlineLength,\n\t\t\tfromWorker,\n\t\t\tsourceExtensionId,\n\t\t\tisRandomSample,\n\t\t\ttokenizationSetting: this.getAsyncTokenizationEnabled()\n\t\t\t\t? this.getAsyncTokenizationVerification()\n\t\t\t\t\t? 2\n\t\t\t\t\t: 1\n\t\t\t\t: 0,\n\t\t});\n\t}\n}\n\nfunction toColorMap(colorMap: string[]): Color[] {\n\tconst result: Color[] = [null!];\n\tfor (let i = 1, len = colorMap.length; i < len; i++) {\n\t\tresult[i] = Color.fromHex(colorMap[i]);\n\t}\n\treturn result;\n}\n\nfunction equalsTokenRules(\n\ta: ITextMateThemingRule[] | null,\n\tb: ITextMateThemingRule[] | null,\n): boolean {\n\tif (!b || !a || b.length !== a.length) {\n\t\treturn false;\n\t}\n\tfor (let i = b.length - 1; i >= 0; i--) {\n\t\tconst r1 = b[i];\n\t\tconst r2 = a[i];\n\t\tif (r1.scope !== r2.scope) {\n\t\t\treturn false;\n\t\t}\n\t\tconst s1 = r1.settings;\n\t\tconst s2 = r2.settings;\n\t\tif (s1 && s2) {\n\t\t\tif (\n\t\t\t\ts1.fontStyle !== s2.fontStyle ||\n\t\t\t\ts1.foreground !== s2.foreground ||\n\t\t\t\ts1.background !== s2.background\n\t\t\t) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t} else if (!s1 || !s2) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\nfunction validateGrammarExtensionPoint(\n\textensionLocation: URI,\n\tsyntax: ITMSyntaxExtensionPoint,\n\tcollector: ExtensionMessageCollector,\n\t_languageService: ILanguageService,\n): boolean {\n\tif (\n\t\tsyntax.language &&\n\t\t(typeof syntax.language !== \"string\" ||\n\t\t\t!_languageService.isRegisteredLanguageId(syntax.language))\n\t) {\n\t\tcollector.error(\n\t\t\tnls.localize(\n\t\t\t\t\"invalid.language\",\n\t\t\t\t\"Unknown language in `contributes.{0}.language`. Provided value: {1}\",\n\t\t\t\tgrammarsExtPoint.name,\n\t\t\t\tString(syntax.language),\n\t\t\t),\n\t\t);\n\t\treturn false;\n\t}\n\tif (!syntax.scopeName || typeof syntax.scopeName !== \"string\") {\n\t\tcollector.error(\n\t\t\tnls.localize(\n\t\t\t\t\"invalid.scopeName\",\n\t\t\t\t\"Expected string in `contributes.{0}.scopeName`. Provided value: {1}\",\n\t\t\t\tgrammarsExtPoint.name,\n\t\t\t\tString(syntax.scopeName),\n\t\t\t),\n\t\t);\n\t\treturn false;\n\t}\n\tif (!syntax.path || typeof syntax.path !== \"string\") {\n\t\tcollector.error(\n\t\t\tnls.localize(\n\t\t\t\t\"invalid.path.0\",\n\t\t\t\t\"Expected string in `contributes.{0}.path`. Provided value: {1}\",\n\t\t\t\tgrammarsExtPoint.name,\n\t\t\t\tString(syntax.path),\n\t\t\t),\n\t\t);\n\t\treturn false;\n\t}\n\tif (\n\t\tsyntax.injectTo &&\n\t\t(!Array.isArray(syntax.injectTo) ||\n\t\t\tsyntax.injectTo.some((scope) => typeof scope !== \"string\"))\n\t) {\n\t\tcollector.error(\n\t\t\tnls.localize(\n\t\t\t\t\"invalid.injectTo\",\n\t\t\t\t\"Invalid value in `contributes.{0}.injectTo`. Must be an array of language scope names. Provided value: {1}\",\n\t\t\t\tgrammarsExtPoint.name,\n\t\t\t\tJSON.stringify(syntax.injectTo),\n\t\t\t),\n\t\t);\n\t\treturn false;\n\t}\n\tif (syntax.embeddedLanguages && !types.isObject(syntax.embeddedLanguages)) {\n\t\tcollector.error(\n\t\t\tnls.localize(\n\t\t\t\t\"invalid.embeddedLanguages\",\n\t\t\t\t\"Invalid value in `contributes.{0}.embeddedLanguages`. Must be an object map from scope name to language. Provided value: {1}\",\n\t\t\t\tgrammarsExtPoint.name,\n\t\t\t\tJSON.stringify(syntax.embeddedLanguages),\n\t\t\t),\n\t\t);\n\t\treturn false;\n\t}\n\n\tif (syntax.tokenTypes && !types.isObject(syntax.tokenTypes)) {\n\t\tcollector.error(\n\t\t\tnls.localize(\n\t\t\t\t\"invalid.tokenTypes\",\n\t\t\t\t\"Invalid value in `contributes.{0}.tokenTypes`. Must be an object map from scope name to token type. Provided value: {1}\",\n\t\t\t\tgrammarsExtPoint.name,\n\t\t\t\tJSON.stringify(syntax.tokenTypes),\n\t\t\t),\n\t\t);\n\t\treturn false;\n\t}\n\n\tconst grammarLocation = resources.joinPath(extensionLocation, syntax.path);\n\tif (!resources.isEqualOrParent(grammarLocation, extensionLocation)) {\n\t\tcollector.warn(\n\t\t\tnls.localize(\n\t\t\t\t\"invalid.path.1\",\n\t\t\t\t\"Expected `contributes.{0}.path` ({1}) to be included inside extension's folder ({2}). This might make the extension non-portable.\",\n\t\t\t\tgrammarsExtPoint.name,\n\t\t\t\tgrammarLocation.path,\n\t\t\t\textensionLocation.path,\n\t\t\t),\n\t\t);\n\t}\n\treturn true;\n}\n\nfunction observableConfigValue<T>(\n\tkey: string,\n\tlanguageId: string,\n\tdefaultValue: T,\n\tconfigurationService: IConfigurationService,\n): IObservable<T> {\n\treturn observableFromEvent(\n\t\t(handleChange) =>\n\t\t\tconfigurationService.onDidChangeConfiguration((e) => {\n\t\t\t\tif (\n\t\t\t\t\te.affectsConfiguration(key, {\n\t\t\t\t\t\toverrideIdentifier: languageId,\n\t\t\t\t\t})\n\t\t\t\t) {\n\t\t\t\t\thandleChange(e);\n\t\t\t\t}\n\t\t\t}),\n\t\t() =>\n\t\t\tconfigurationService.getValue<T>(key, {\n\t\t\t\toverrideIdentifier: languageId,\n\t\t\t}) ?? defaultValue,\n\t);\n}\n"],
  "mappings": "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",
  "names": ["encodedLanguageId", "languageId"]
}
