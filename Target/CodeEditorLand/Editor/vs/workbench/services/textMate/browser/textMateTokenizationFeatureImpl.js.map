{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/textMate/browser/textMateTokenizationFeatureImpl.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { importAMDNodeModule, resolveAmdNodeModulePath } from '../../../../amdX.js';\nimport { canASAR, isESM } from '../../../../base/common/amd.js';\nimport * as dom from '../../../../base/browser/dom.js';\nimport { equals as equalArray } from '../../../../base/common/arrays.js';\nimport { Color } from '../../../../base/common/color.js';\nimport { onUnexpectedError } from '../../../../base/common/errors.js';\nimport { Disposable, DisposableStore, IDisposable } from '../../../../base/common/lifecycle.js';\nimport { FileAccess, nodeModulesAsarUnpackedPath, nodeModulesPath } from '../../../../base/common/network.js';\nimport { IObservable, observableFromEvent } from '../../../../base/common/observable.js';\nimport { isWeb } from '../../../../base/common/platform.js';\nimport * as resources from '../../../../base/common/resources.js';\nimport * as types from '../../../../base/common/types.js';\nimport { URI } from '../../../../base/common/uri.js';\nimport { StandardTokenType } from '../../../../editor/common/encodedTokenAttributes.js';\nimport { ITokenizationSupport, LazyTokenizationSupport, TokenizationRegistry } from '../../../../editor/common/languages.js';\nimport { ILanguageService } from '../../../../editor/common/languages/language.js';\nimport { generateTokensCSSForColorMap } from '../../../../editor/common/languages/supports/tokenization.js';\nimport * as nls from '../../../../nls.js';\nimport { IConfigurationService } from '../../../../platform/configuration/common/configuration.js';\nimport { IExtensionResourceLoaderService } from '../../../../platform/extensionResourceLoader/common/extensionResourceLoader.js';\nimport { IInstantiationService } from '../../../../platform/instantiation/common/instantiation.js';\nimport { ILogService } from '../../../../platform/log/common/log.js';\nimport { INotificationService } from '../../../../platform/notification/common/notification.js';\nimport { IProgressService, ProgressLocation } from '../../../../platform/progress/common/progress.js';\nimport { ITelemetryService } from '../../../../platform/telemetry/common/telemetry.js';\nimport { IWorkbenchEnvironmentService } from '../../environment/common/environmentService.js';\nimport { ExtensionMessageCollector, IExtensionPointUser } from '../../extensions/common/extensionsRegistry.js';\nimport { ITextMateTokenizationService } from './textMateTokenizationFeature.js';\nimport { TextMateTokenizationSupport } from './tokenizationSupport/textMateTokenizationSupport.js';\nimport { TokenizationSupportWithLineLimit } from './tokenizationSupport/tokenizationSupportWithLineLimit.js';\nimport { ThreadedBackgroundTokenizerFactory } from './backgroundTokenization/threadedBackgroundTokenizerFactory.js';\nimport { TMGrammarFactory, missingTMGrammarErrorMessage } from '../common/TMGrammarFactory.js';\nimport { ITMSyntaxExtensionPoint, grammarsExtPoint } from '../common/TMGrammars.js';\nimport { IValidEmbeddedLanguagesMap, IValidGrammarDefinition, IValidTokenTypeMap } from '../common/TMScopeRegistry.js';\nimport { ITextMateThemingRule, IWorkbenchColorTheme, IWorkbenchThemeService } from '../../themes/common/workbenchThemeService.js';\nimport type { IGrammar, IOnigLib, IRawTheme } from 'vscode-textmate';\n\nexport class TextMateTokenizationFeature extends Disposable implements ITextMateTokenizationService {\n\tprivate static reportTokenizationTimeCounter = { sync: 0, async: 0 };\n\tpublic _serviceBrand: undefined;\n\n\tprivate readonly _styleElement: HTMLStyleElement;\n\tprivate readonly _createdModes: string[] = [];\n\tprivate readonly _encounteredLanguages: boolean[] = [];\n\n\tprivate _debugMode: boolean = false;\n\tprivate _debugModePrintFunc: (str: string) => void = () => { };\n\n\tprivate _grammarDefinitions: IValidGrammarDefinition[] | null = null;\n\tprivate _grammarFactory: TMGrammarFactory | null = null;\n\tprivate readonly _tokenizersRegistrations = new DisposableStore();\n\tprivate _currentTheme: IRawTheme | null = null;\n\tprivate _currentTokenColorMap: string[] | null = null;\n\tprivate readonly _threadedBackgroundTokenizerFactory = this._instantiationService.createInstance(\n\t\tThreadedBackgroundTokenizerFactory,\n\t\t(timeMs, languageId, sourceExtensionId, lineLength, isRandomSample) => this._reportTokenizationTime(timeMs, languageId, sourceExtensionId, lineLength, true, isRandomSample),\n\t\t() => this.getAsyncTokenizationEnabled(),\n\t);\n\n\tconstructor(\n\t\t@ILanguageService private readonly _languageService: ILanguageService,\n\t\t@IWorkbenchThemeService private readonly _themeService: IWorkbenchThemeService,\n\t\t@IExtensionResourceLoaderService private readonly _extensionResourceLoaderService: IExtensionResourceLoaderService,\n\t\t@INotificationService private readonly _notificationService: INotificationService,\n\t\t@ILogService private readonly _logService: ILogService,\n\t\t@IConfigurationService private readonly _configurationService: IConfigurationService,\n\t\t@IProgressService private readonly _progressService: IProgressService,\n\t\t@IWorkbenchEnvironmentService private readonly _environmentService: IWorkbenchEnvironmentService,\n\t\t@IInstantiationService private readonly _instantiationService: IInstantiationService,\n\t\t@ITelemetryService private readonly _telemetryService: ITelemetryService,\n\t) {\n\t\tsuper();\n\n\t\tthis._styleElement = dom.createStyleSheet();\n\t\tthis._styleElement.className = 'vscode-tokens-styles';\n\n\t\tgrammarsExtPoint.setHandler((extensions) => this._handleGrammarsExtPoint(extensions));\n\n\t\tthis._updateTheme(this._themeService.getColorTheme(), true);\n\t\tthis._register(this._themeService.onDidColorThemeChange(() => {\n\t\t\tthis._updateTheme(this._themeService.getColorTheme(), false);\n\t\t}));\n\n\t\tthis._register(this._languageService.onDidRequestRichLanguageFeatures((languageId) => {\n\t\t\tthis._createdModes.push(languageId);\n\t\t}));\n\t}\n\n\tprivate getAsyncTokenizationEnabled(): boolean {\n\t\treturn !!this._configurationService.getValue<boolean>('editor.experimental.asyncTokenization');\n\t}\n\n\tprivate getAsyncTokenizationVerification(): boolean {\n\t\treturn !!this._configurationService.getValue<boolean>('editor.experimental.asyncTokenizationVerification');\n\t}\n\n\tprivate _handleGrammarsExtPoint(extensions: readonly IExtensionPointUser<ITMSyntaxExtensionPoint[]>[]): void {\n\t\tthis._grammarDefinitions = null;\n\t\tif (this._grammarFactory) {\n\t\t\tthis._grammarFactory.dispose();\n\t\t\tthis._grammarFactory = null;\n\t\t}\n\t\tthis._tokenizersRegistrations.clear();\n\n\t\tthis._grammarDefinitions = [];\n\t\tfor (const extension of extensions) {\n\t\t\tconst grammars = extension.value;\n\t\t\tfor (const grammar of grammars) {\n\t\t\t\tconst validatedGrammar = this._validateGrammarDefinition(extension, grammar);\n\t\t\t\tif (validatedGrammar) {\n\t\t\t\t\tthis._grammarDefinitions.push(validatedGrammar);\n\t\t\t\t\tif (validatedGrammar.language) {\n\t\t\t\t\t\tconst lazyTokenizationSupport = new LazyTokenizationSupport(() => this._createTokenizationSupport(validatedGrammar.language!));\n\t\t\t\t\t\tthis._tokenizersRegistrations.add(lazyTokenizationSupport);\n\t\t\t\t\t\tthis._tokenizersRegistrations.add(TokenizationRegistry.registerFactory(validatedGrammar.language, lazyTokenizationSupport));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tthis._threadedBackgroundTokenizerFactory.setGrammarDefinitions(this._grammarDefinitions);\n\n\t\tfor (const createdMode of this._createdModes) {\n\t\t\tTokenizationRegistry.getOrCreate(createdMode);\n\t\t}\n\t}\n\n\tprivate _validateGrammarDefinition(extension: IExtensionPointUser<ITMSyntaxExtensionPoint[]>, grammar: ITMSyntaxExtensionPoint): IValidGrammarDefinition | null {\n\t\tif (!validateGrammarExtensionPoint(extension.description.extensionLocation, grammar, extension.collector, this._languageService)) {\n\t\t\treturn null;\n\t\t}\n\n\t\tconst grammarLocation = resources.joinPath(extension.description.extensionLocation, grammar.path);\n\n\t\tconst embeddedLanguages: IValidEmbeddedLanguagesMap = Object.create(null);\n\t\tif (grammar.embeddedLanguages) {\n\t\t\tconst scopes = Object.keys(grammar.embeddedLanguages);\n\t\t\tfor (let i = 0, len = scopes.length; i < len; i++) {\n\t\t\t\tconst scope = scopes[i];\n\t\t\t\tconst language = grammar.embeddedLanguages[scope];\n\t\t\t\tif (typeof language !== 'string') {\n\t\t\t\t\t// never hurts to be too careful\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tif (this._languageService.isRegisteredLanguageId(language)) {\n\t\t\t\t\tembeddedLanguages[scope] = this._languageService.languageIdCodec.encodeLanguageId(language);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tconst tokenTypes: IValidTokenTypeMap = Object.create(null);\n\t\tif (grammar.tokenTypes) {\n\t\t\tconst scopes = Object.keys(grammar.tokenTypes);\n\t\t\tfor (const scope of scopes) {\n\t\t\t\tconst tokenType = grammar.tokenTypes[scope];\n\t\t\t\tswitch (tokenType) {\n\t\t\t\t\tcase 'string':\n\t\t\t\t\t\ttokenTypes[scope] = StandardTokenType.String;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'other':\n\t\t\t\t\t\ttokenTypes[scope] = StandardTokenType.Other;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'comment':\n\t\t\t\t\t\ttokenTypes[scope] = StandardTokenType.Comment;\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tconst validLanguageId = grammar.language && this._languageService.isRegisteredLanguageId(grammar.language) ? grammar.language : undefined;\n\n\t\tfunction asStringArray(array: unknown, defaultValue: string[]): string[] {\n\t\t\tif (!Array.isArray(array)) {\n\t\t\t\treturn defaultValue;\n\t\t\t}\n\t\t\tif (!array.every(e => typeof e === 'string')) {\n\t\t\t\treturn defaultValue;\n\t\t\t}\n\t\t\treturn array;\n\t\t}\n\n\t\treturn {\n\t\t\tlocation: grammarLocation,\n\t\t\tlanguage: validLanguageId,\n\t\t\tscopeName: grammar.scopeName,\n\t\t\tembeddedLanguages: embeddedLanguages,\n\t\t\ttokenTypes: tokenTypes,\n\t\t\tinjectTo: grammar.injectTo,\n\t\t\tbalancedBracketSelectors: asStringArray(grammar.balancedBracketScopes, ['*']),\n\t\t\tunbalancedBracketSelectors: asStringArray(grammar.unbalancedBracketScopes, []),\n\t\t\tsourceExtensionId: extension.description.id,\n\t\t};\n\t}\n\n\tpublic startDebugMode(printFn: (str: string) => void, onStop: () => void): void {\n\t\tif (this._debugMode) {\n\t\t\tthis._notificationService.error(nls.localize('alreadyDebugging', \"Already Logging.\"));\n\t\t\treturn;\n\t\t}\n\n\t\tthis._debugModePrintFunc = printFn;\n\t\tthis._debugMode = true;\n\n\t\tif (this._debugMode) {\n\t\t\tthis._progressService.withProgress(\n\t\t\t\t{\n\t\t\t\t\tlocation: ProgressLocation.Notification,\n\t\t\t\t\tbuttons: [nls.localize('stop', \"Stop\")]\n\t\t\t\t},\n\t\t\t\t(progress) => {\n\t\t\t\t\tprogress.report({\n\t\t\t\t\t\tmessage: nls.localize('progress1', \"Preparing to log TM Grammar parsing. Press Stop when finished.\")\n\t\t\t\t\t});\n\n\t\t\t\t\treturn this._getVSCodeOniguruma().then((vscodeOniguruma) => {\n\t\t\t\t\t\tvscodeOniguruma.setDefaultDebugCall(true);\n\t\t\t\t\t\tprogress.report({\n\t\t\t\t\t\t\tmessage: nls.localize('progress2', \"Now logging TM Grammar parsing. Press Stop when finished.\")\n\t\t\t\t\t\t});\n\t\t\t\t\t\treturn new Promise<void>((resolve, reject) => { });\n\t\t\t\t\t});\n\t\t\t\t},\n\t\t\t\t(choice) => {\n\t\t\t\t\tthis._getVSCodeOniguruma().then((vscodeOniguruma) => {\n\t\t\t\t\t\tthis._debugModePrintFunc = () => { };\n\t\t\t\t\t\tthis._debugMode = false;\n\t\t\t\t\t\tvscodeOniguruma.setDefaultDebugCall(false);\n\t\t\t\t\t\tonStop();\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t);\n\t\t}\n\t}\n\n\tprivate _canCreateGrammarFactory(): boolean {\n\t\t// Check if extension point is ready\n\t\treturn !!this._grammarDefinitions;\n\t}\n\tprivate async _getOrCreateGrammarFactory(): Promise<TMGrammarFactory> {\n\t\tif (this._grammarFactory) {\n\t\t\treturn this._grammarFactory;\n\t\t}\n\n\t\tconst [vscodeTextmate, vscodeOniguruma] = await Promise.all([importAMDNodeModule<typeof import('vscode-textmate')>('vscode-textmate', 'release/main.js'), this._getVSCodeOniguruma()]);\n\t\tconst onigLib: Promise<IOnigLib> = Promise.resolve({\n\t\t\tcreateOnigScanner: (sources: string[]) => vscodeOniguruma.createOnigScanner(sources),\n\t\t\tcreateOnigString: (str: string) => vscodeOniguruma.createOnigString(str)\n\t\t});\n\n\t\t// Avoid duplicate instantiations\n\t\tif (this._grammarFactory) {\n\t\t\treturn this._grammarFactory;\n\t\t}\n\n\t\tthis._grammarFactory = new TMGrammarFactory({\n\t\t\tlogTrace: (msg: string) => this._logService.trace(msg),\n\t\t\tlogError: (msg: string, err: any) => this._logService.error(msg, err),\n\t\t\treadFile: (resource: URI) => this._extensionResourceLoaderService.readExtensionResource(resource)\n\t\t}, this._grammarDefinitions || [], vscodeTextmate, onigLib);\n\n\t\tthis._updateTheme(this._themeService.getColorTheme(), true);\n\n\t\treturn this._grammarFactory;\n\t}\n\n\tprivate async _createTokenizationSupport(languageId: string): Promise<ITokenizationSupport & IDisposable | null> {\n\t\tif (!this._languageService.isRegisteredLanguageId(languageId)) {\n\t\t\treturn null;\n\t\t}\n\t\tif (!this._canCreateGrammarFactory()) {\n\t\t\treturn null;\n\t\t}\n\n\t\ttry {\n\t\t\tconst grammarFactory = await this._getOrCreateGrammarFactory();\n\t\t\tif (!grammarFactory.has(languageId)) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\tconst encodedLanguageId = this._languageService.languageIdCodec.encodeLanguageId(languageId);\n\t\t\tconst r = await grammarFactory.createGrammar(languageId, encodedLanguageId);\n\t\t\tif (!r.grammar) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\tconst maxTokenizationLineLength = observableConfigValue<number>(\n\t\t\t\t'editor.maxTokenizationLineLength',\n\t\t\t\tlanguageId,\n\t\t\t\t-1,\n\t\t\t\tthis._configurationService\n\t\t\t);\n\t\t\tconst tokenization = new TextMateTokenizationSupport(\n\t\t\t\tr.grammar,\n\t\t\t\tr.initialState,\n\t\t\t\tr.containsEmbeddedLanguages,\n\t\t\t\t(textModel, tokenStore) => this._threadedBackgroundTokenizerFactory.createBackgroundTokenizer(textModel, tokenStore, maxTokenizationLineLength),\n\t\t\t\t() => this.getAsyncTokenizationVerification(),\n\t\t\t\t(timeMs, lineLength, isRandomSample) => {\n\t\t\t\t\tthis._reportTokenizationTime(timeMs, languageId, r.sourceExtensionId, lineLength, false, isRandomSample);\n\t\t\t\t},\n\t\t\t\ttrue,\n\t\t\t);\n\t\t\tconst disposable = tokenization.onDidEncounterLanguage((encodedLanguageId) => {\n\t\t\t\tif (!this._encounteredLanguages[encodedLanguageId]) {\n\t\t\t\t\tconst languageId = this._languageService.languageIdCodec.decodeLanguageId(encodedLanguageId);\n\t\t\t\t\tthis._encounteredLanguages[encodedLanguageId] = true;\n\t\t\t\t\tthis._languageService.requestBasicLanguageFeatures(languageId);\n\t\t\t\t}\n\t\t\t});\n\t\t\treturn new TokenizationSupportWithLineLimit(encodedLanguageId, tokenization, disposable, maxTokenizationLineLength);\n\t\t} catch (err) {\n\t\t\tif (err.message && err.message === missingTMGrammarErrorMessage) {\n\t\t\t\t// Don't log this error message\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\tonUnexpectedError(err);\n\t\t\treturn null;\n\t\t}\n\t}\n\n\tprivate _updateTheme(colorTheme: IWorkbenchColorTheme, forceUpdate: boolean): void {\n\t\tif (!forceUpdate && this._currentTheme && this._currentTokenColorMap && equalsTokenRules(this._currentTheme.settings, colorTheme.tokenColors)\n\t\t\t&& equalArray(this._currentTokenColorMap, colorTheme.tokenColorMap)) {\n\t\t\treturn;\n\t\t}\n\t\tthis._currentTheme = { name: colorTheme.label, settings: colorTheme.tokenColors };\n\t\tthis._currentTokenColorMap = colorTheme.tokenColorMap;\n\n\t\tthis._grammarFactory?.setTheme(this._currentTheme, this._currentTokenColorMap);\n\t\tconst colorMap = toColorMap(this._currentTokenColorMap);\n\t\tconst cssRules = generateTokensCSSForColorMap(colorMap);\n\t\tthis._styleElement.textContent = cssRules;\n\t\tTokenizationRegistry.setColorMap(colorMap);\n\n\t\tif (this._currentTheme && this._currentTokenColorMap) {\n\t\t\tthis._threadedBackgroundTokenizerFactory.acceptTheme(this._currentTheme, this._currentTokenColorMap);\n\t\t}\n\t}\n\n\tpublic async createTokenizer(languageId: string): Promise<IGrammar | null> {\n\t\tif (!this._languageService.isRegisteredLanguageId(languageId)) {\n\t\t\treturn null;\n\t\t}\n\t\tconst grammarFactory = await this._getOrCreateGrammarFactory();\n\t\tif (!grammarFactory.has(languageId)) {\n\t\t\treturn null;\n\t\t}\n\t\tconst encodedLanguageId = this._languageService.languageIdCodec.encodeLanguageId(languageId);\n\t\tconst { grammar } = await grammarFactory.createGrammar(languageId, encodedLanguageId);\n\t\treturn grammar;\n\t}\n\n\tprivate _vscodeOniguruma: Promise<typeof import('vscode-oniguruma')> | null = null;\n\tprivate _getVSCodeOniguruma(): Promise<typeof import('vscode-oniguruma')> {\n\t\tif (!this._vscodeOniguruma) {\n\t\t\tthis._vscodeOniguruma = (async () => {\n\t\t\t\tconst [vscodeOniguruma, wasm] = await Promise.all([importAMDNodeModule<typeof import('vscode-oniguruma')>('vscode-oniguruma', 'release/main.js'), this._loadVSCodeOnigurumaWASM()]);\n\t\t\t\tawait vscodeOniguruma.loadWASM({\n\t\t\t\t\tdata: wasm,\n\t\t\t\t\tprint: (str: string) => {\n\t\t\t\t\t\tthis._debugModePrintFunc(str);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\treturn vscodeOniguruma;\n\t\t\t})();\n\t\t}\n\t\treturn this._vscodeOniguruma;\n\t}\n\n\tprivate async _loadVSCodeOnigurumaWASM(): Promise<Response | ArrayBuffer> {\n\t\tif (isWeb) {\n\t\t\tconst response = await fetch(isESM\n\t\t\t\t? resolveAmdNodeModulePath('vscode-oniguruma', 'release/onig.wasm')\n\t\t\t\t: FileAccess.asBrowserUri('vscode-oniguruma/../onig.wasm').toString(true));\n\t\t\t// Using the response directly only works if the server sets the MIME type 'application/wasm'.\n\t\t\t// Otherwise, a TypeError is thrown when using the streaming compiler.\n\t\t\t// We therefore use the non-streaming compiler :(.\n\t\t\treturn await response.arrayBuffer();\n\t\t} else {\n\t\t\tconst response = await fetch(canASAR && this._environmentService.isBuilt\n\t\t\t\t? FileAccess.asBrowserUri(`${nodeModulesAsarUnpackedPath}/vscode-oniguruma/release/onig.wasm`).toString(true)\n\t\t\t\t: FileAccess.asBrowserUri(`${nodeModulesPath}/vscode-oniguruma/release/onig.wasm`).toString(true));\n\t\t\treturn response;\n\t\t}\n\t}\n\n\tprivate _reportTokenizationTime(timeMs: number, languageId: string, sourceExtensionId: string | undefined, lineLength: number, fromWorker: boolean, isRandomSample: boolean): void {\n\t\tconst key = fromWorker ? 'async' : 'sync';\n\n\t\t// 50 events per hour (one event has a low probability)\n\t\tif (TextMateTokenizationFeature.reportTokenizationTimeCounter[key] > 50) {\n\t\t\t// Don't flood telemetry with too many events\n\t\t\treturn;\n\t\t}\n\t\tif (TextMateTokenizationFeature.reportTokenizationTimeCounter[key] === 0) {\n\t\t\tsetTimeout(() => {\n\t\t\t\tTextMateTokenizationFeature.reportTokenizationTimeCounter[key] = 0;\n\t\t\t}, 1000 * 60 * 60);\n\t\t}\n\t\tTextMateTokenizationFeature.reportTokenizationTimeCounter[key]++;\n\n\t\tthis._telemetryService.publicLog2<{\n\t\t\ttimeMs: number;\n\t\t\tlanguageId: string;\n\t\t\tlineLength: number;\n\t\t\tfromWorker: boolean;\n\t\t\tsourceExtensionId: string | undefined;\n\t\t\tisRandomSample: boolean;\n\t\t\ttokenizationSetting: number;\n\t\t}, {\n\t\t\towner: 'hediet';\n\n\t\t\ttimeMs: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'To understand how long it took to tokenize a random line' };\n\t\t\tlanguageId: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'To relate the performance to the language' };\n\t\t\tlineLength: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'To relate the performance to the line length' };\n\t\t\tfromWorker: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'To figure out if this line was tokenized sync or async' };\n\t\t\tsourceExtensionId: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'To figure out which extension contributed the grammar' };\n\t\t\tisRandomSample: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'To figure out if this is a random sample or measured because of some other condition.' };\n\t\t\ttokenizationSetting: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'To understand if the user has async tokenization enabled. 0=sync, 1=async, 2=verification' };\n\n\t\t\tcomment: 'This event gives insight about the performance certain grammars.';\n\t\t}>('editor.tokenizedLine', {\n\t\t\ttimeMs,\n\t\t\tlanguageId,\n\t\t\tlineLength,\n\t\t\tfromWorker,\n\t\t\tsourceExtensionId,\n\t\t\tisRandomSample,\n\t\t\ttokenizationSetting: this.getAsyncTokenizationEnabled() ? (this.getAsyncTokenizationVerification() ? 2 : 1) : 0,\n\t\t});\n\t}\n}\n\nfunction toColorMap(colorMap: string[]): Color[] {\n\tconst result: Color[] = [null!];\n\tfor (let i = 1, len = colorMap.length; i < len; i++) {\n\t\tresult[i] = Color.fromHex(colorMap[i]);\n\t}\n\treturn result;\n}\n\nfunction equalsTokenRules(a: ITextMateThemingRule[] | null, b: ITextMateThemingRule[] | null): boolean {\n\tif (!b || !a || b.length !== a.length) {\n\t\treturn false;\n\t}\n\tfor (let i = b.length - 1; i >= 0; i--) {\n\t\tconst r1 = b[i];\n\t\tconst r2 = a[i];\n\t\tif (r1.scope !== r2.scope) {\n\t\t\treturn false;\n\t\t}\n\t\tconst s1 = r1.settings;\n\t\tconst s2 = r2.settings;\n\t\tif (s1 && s2) {\n\t\t\tif (s1.fontStyle !== s2.fontStyle || s1.foreground !== s2.foreground || s1.background !== s2.background) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t} else if (!s1 || !s2) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\nfunction validateGrammarExtensionPoint(extensionLocation: URI, syntax: ITMSyntaxExtensionPoint, collector: ExtensionMessageCollector, _languageService: ILanguageService): boolean {\n\tif (syntax.language && ((typeof syntax.language !== 'string') || !_languageService.isRegisteredLanguageId(syntax.language))) {\n\t\tcollector.error(nls.localize('invalid.language', \"Unknown language in `contributes.{0}.language`. Provided value: {1}\", grammarsExtPoint.name, String(syntax.language)));\n\t\treturn false;\n\t}\n\tif (!syntax.scopeName || (typeof syntax.scopeName !== 'string')) {\n\t\tcollector.error(nls.localize('invalid.scopeName', \"Expected string in `contributes.{0}.scopeName`. Provided value: {1}\", grammarsExtPoint.name, String(syntax.scopeName)));\n\t\treturn false;\n\t}\n\tif (!syntax.path || (typeof syntax.path !== 'string')) {\n\t\tcollector.error(nls.localize('invalid.path.0', \"Expected string in `contributes.{0}.path`. Provided value: {1}\", grammarsExtPoint.name, String(syntax.path)));\n\t\treturn false;\n\t}\n\tif (syntax.injectTo && (!Array.isArray(syntax.injectTo) || syntax.injectTo.some(scope => typeof scope !== 'string'))) {\n\t\tcollector.error(nls.localize('invalid.injectTo', \"Invalid value in `contributes.{0}.injectTo`. Must be an array of language scope names. Provided value: {1}\", grammarsExtPoint.name, JSON.stringify(syntax.injectTo)));\n\t\treturn false;\n\t}\n\tif (syntax.embeddedLanguages && !types.isObject(syntax.embeddedLanguages)) {\n\t\tcollector.error(nls.localize('invalid.embeddedLanguages', \"Invalid value in `contributes.{0}.embeddedLanguages`. Must be an object map from scope name to language. Provided value: {1}\", grammarsExtPoint.name, JSON.stringify(syntax.embeddedLanguages)));\n\t\treturn false;\n\t}\n\n\tif (syntax.tokenTypes && !types.isObject(syntax.tokenTypes)) {\n\t\tcollector.error(nls.localize('invalid.tokenTypes', \"Invalid value in `contributes.{0}.tokenTypes`. Must be an object map from scope name to token type. Provided value: {1}\", grammarsExtPoint.name, JSON.stringify(syntax.tokenTypes)));\n\t\treturn false;\n\t}\n\n\tconst grammarLocation = resources.joinPath(extensionLocation, syntax.path);\n\tif (!resources.isEqualOrParent(grammarLocation, extensionLocation)) {\n\t\tcollector.warn(nls.localize('invalid.path.1', \"Expected `contributes.{0}.path` ({1}) to be included inside extension's folder ({2}). This might make the extension non-portable.\", grammarsExtPoint.name, grammarLocation.path, extensionLocation.path));\n\t}\n\treturn true;\n}\n\nfunction observableConfigValue<T>(key: string, languageId: string, defaultValue: T, configurationService: IConfigurationService): IObservable<T> {\n\treturn observableFromEvent(\n\t\t(handleChange) => configurationService.onDidChangeConfiguration(e => {\n\t\t\tif (e.affectsConfiguration(key, { overrideIdentifier: languageId })) {\n\t\t\t\thandleChange(e);\n\t\t\t}\n\t\t}),\n\t\t() => configurationService.getValue<T>(key, { overrideIdentifier: languageId }) ?? defaultValue,\n\t);\n}\n"],
  "mappings": "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",
  "names": ["encodedLanguageId", "languageId"]
}
