{
  "version": 3,
  "sources": ["../../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/textMate/browser/backgroundTokenization/worker/textMateWorkerHost.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { UriComponents } from '../../../../../../base/common/uri.js';\nimport { IWorkerServer, IWorkerClient } from '../../../../../../base/common/worker/simpleWorker.js';\nimport { StateDeltas } from './textMateTokenizationWorker.worker.js';\n\nexport abstract class TextMateWorkerHost {\n\tpublic static CHANNEL_NAME = 'textMateWorkerHost';\n\tpublic static getChannel(workerServer: IWorkerServer): TextMateWorkerHost {\n\t\treturn workerServer.getChannel<TextMateWorkerHost>(TextMateWorkerHost.CHANNEL_NAME);\n\t}\n\tpublic static setChannel(workerClient: IWorkerClient<any>, obj: TextMateWorkerHost): void {\n\t\tworkerClient.setChannel<TextMateWorkerHost>(TextMateWorkerHost.CHANNEL_NAME, obj);\n\t}\n\n\tabstract $readFile(_resource: UriComponents): Promise<string>;\n\tabstract $setTokensAndStates(controllerId: number, versionId: number, tokens: Uint8Array, lineEndStateDeltas: StateDeltas[]): Promise<void>;\n\tabstract $reportTokenizationTime(timeMs: number, languageId: string, sourceExtensionId: string | undefined, lineLength: number, isRandomSample: boolean): void;\n}\n"],
  "mappings": ";;AAKA,SAAS,qBAAqB;AAC9B,SAAS,eAAe,qBAAqB;AAC7C,SAAS,mBAAmB;AAErB,MAAe,mBAAmB;AAAA,EATzC,OASyC;AAAA;AAAA;AAAA,EACxC,OAAc,eAAe;AAAA,EAC7B,OAAc,WAAW,cAAiD;AACzE,WAAO,aAAa,WAA+B,mBAAmB,YAAY;AAAA,EACnF;AAAA,EACA,OAAc,WAAW,cAAkC,KAA+B;AACzF,iBAAa,WAA+B,mBAAmB,cAAc,GAAG;AAAA,EACjF;AAKD;",
  "names": []
}
