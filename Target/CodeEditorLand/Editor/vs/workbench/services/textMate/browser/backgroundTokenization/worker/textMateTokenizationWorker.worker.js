import{importAMDNodeModule as c}from"../../../../../../amdX.js";import{URI as l}from"../../../../../../base/common/uri.js";import{TMGrammarFactory as g}from"../../../common/TMGrammarFactory.js";import{TextMateWorkerHost as d}from"./textMateWorkerHost.js";import{TextMateWorkerTokenizer as u}from"./textMateWorkerTokenizer.js";function h(s){return new p(s)}class p{_requestHandlerBrand;_host;_models=new Map;_grammarCache=[];_grammarFactory=Promise.resolve(null);constructor(e){this._host=d.getChannel(e)}async $init(e){const t=e.grammarDefinitions.map(r=>({location:l.revive(r.location),language:r.language,scopeName:r.scopeName,embeddedLanguages:r.embeddedLanguages,tokenTypes:r.tokenTypes,injectTo:r.injectTo,balancedBracketSelectors:r.balancedBracketSelectors,unbalancedBracketSelectors:r.unbalancedBracketSelectors,sourceExtensionId:r.sourceExtensionId}));this._grammarFactory=this._loadTMGrammarFactory(t,e.onigurumaWASMUri)}async _loadTMGrammarFactory(e,t){const r=await c("vscode-textmate","release/main.js"),a=await c("vscode-oniguruma","release/main.js"),i=await(await fetch(t)).arrayBuffer();await a.loadWASM(i);const m=Promise.resolve({createOnigScanner:n=>a.createOnigScanner(n),createOnigString:n=>a.createOnigString(n)});return new g({logTrace:n=>{},logError:(n,T)=>{},readFile:n=>this._host.$readFile(n)},e,r,m)}$acceptNewModel(e){const t=l.revive(e.uri),r=this;this._models.set(e.controllerId,new u(t,e.lines,e.EOL,e.versionId,{async getOrCreateGrammar(a,o){const i=await r._grammarFactory;return i?(r._grammarCache[o]||(r._grammarCache[o]=i.createGrammar(a,o)),r._grammarCache[o]):Promise.resolve(null)},setTokensAndStates(a,o,i){r._host.$setTokensAndStates(e.controllerId,a,o,i)},reportTokenizationTime(a,o,i,m,n){r._host.$reportTokenizationTime(a,o,i,m,n)}},e.languageId,e.encodedLanguageId,e.maxTokenizationLineLength))}$acceptModelChanged(e,t){this._models.get(e).onEvents(t)}$retokenize(e,t,r){this._models.get(e).retokenize(t,r)}$acceptModelLanguageChanged(e,t,r){this._models.get(e).onLanguageId(t,r)}$acceptRemovedModel(e){const t=this._models.get(e);t&&(t.dispose(),this._models.delete(e))}async $acceptTheme(e,t){(await this._grammarFactory)?.setTheme(e,t)}$acceptMaxTokenizationLineLength(e,t){this._models.get(e).acceptMaxTokenizationLineLength(t)}}export{p as TextMateTokenizationWorker,h as create};
