{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/textMate/browser/tokenizationSupport/textMateTokenizationSupport.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Emitter, Event } from '../../../../../base/common/event.js';\nimport { Disposable } from '../../../../../base/common/lifecycle.js';\nimport { StopWatch } from '../../../../../base/common/stopwatch.js';\nimport { LanguageId, TokenMetadata } from '../../../../../editor/common/encodedTokenAttributes.js';\nimport { EncodedTokenizationResult, IBackgroundTokenizationStore, IBackgroundTokenizer, IState, ITokenizationSupport, TokenizationResult } from '../../../../../editor/common/languages.js';\nimport { ITextModel } from '../../../../../editor/common/model.js';\nimport type { IGrammar, StateStack } from 'vscode-textmate';\n\nexport class TextMateTokenizationSupport extends Disposable implements ITokenizationSupport {\n\tprivate readonly _seenLanguages: boolean[] = [];\n\tprivate readonly _onDidEncounterLanguage: Emitter<LanguageId> = this._register(new Emitter<LanguageId>());\n\tpublic readonly onDidEncounterLanguage: Event<LanguageId> = this._onDidEncounterLanguage.event;\n\n\tconstructor(\n\t\tprivate readonly _grammar: IGrammar,\n\t\tprivate readonly _initialState: StateStack,\n\t\tprivate readonly _containsEmbeddedLanguages: boolean,\n\t\tprivate readonly _createBackgroundTokenizer: ((textModel: ITextModel, tokenStore: IBackgroundTokenizationStore) => IBackgroundTokenizer | undefined) | undefined,\n\t\tprivate readonly _backgroundTokenizerShouldOnlyVerifyTokens: () => boolean,\n\t\tprivate readonly _reportTokenizationTime: (timeMs: number, lineLength: number, isRandomSample: boolean) => void,\n\t\tprivate readonly _reportSlowTokenization: boolean,\n\t) {\n\t\tsuper();\n\t}\n\n\tpublic get backgroundTokenizerShouldOnlyVerifyTokens(): boolean | undefined {\n\t\treturn this._backgroundTokenizerShouldOnlyVerifyTokens();\n\t}\n\n\tpublic getInitialState(): IState {\n\t\treturn this._initialState;\n\t}\n\n\tpublic tokenize(line: string, hasEOL: boolean, state: IState): TokenizationResult {\n\t\tthrow new Error('Not supported!');\n\t}\n\n\tpublic createBackgroundTokenizer(textModel: ITextModel, store: IBackgroundTokenizationStore): IBackgroundTokenizer | undefined {\n\t\tif (this._createBackgroundTokenizer) {\n\t\t\treturn this._createBackgroundTokenizer(textModel, store);\n\t\t}\n\t\treturn undefined;\n\t}\n\n\tpublic tokenizeEncoded(line: string, hasEOL: boolean, state: StateStack): EncodedTokenizationResult {\n\t\tconst isRandomSample = Math.random() * 10_000 < 1;\n\t\tconst shouldMeasure = this._reportSlowTokenization || isRandomSample;\n\t\tconst sw = shouldMeasure ? new StopWatch(true) : undefined;\n\t\tconst textMateResult = this._grammar.tokenizeLine2(line, state, 500);\n\t\tif (shouldMeasure) {\n\t\t\tconst timeMS = sw!.elapsed();\n\t\t\tif (isRandomSample || timeMS > 32) {\n\t\t\t\tthis._reportTokenizationTime(timeMS, line.length, isRandomSample);\n\t\t\t}\n\t\t}\n\n\t\tif (textMateResult.stoppedEarly) {\n\t\t\tconsole.warn(`Time limit reached when tokenizing line: ${line.substring(0, 100)}`);\n\t\t\t// return the state at the beginning of the line\n\t\t\treturn new EncodedTokenizationResult(textMateResult.tokens, state);\n\t\t}\n\n\t\tif (this._containsEmbeddedLanguages) {\n\t\t\tconst seenLanguages = this._seenLanguages;\n\t\t\tconst tokens = textMateResult.tokens;\n\n\t\t\t// Must check if any of the embedded languages was hit\n\t\t\tfor (let i = 0, len = (tokens.length >>> 1); i < len; i++) {\n\t\t\t\tconst metadata = tokens[(i << 1) + 1];\n\t\t\t\tconst languageId = TokenMetadata.getLanguageId(metadata);\n\n\t\t\t\tif (!seenLanguages[languageId]) {\n\t\t\t\t\tseenLanguages[languageId] = true;\n\t\t\t\t\tthis._onDidEncounterLanguage.fire(languageId);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tlet endState: StateStack;\n\t\t// try to save an object if possible\n\t\tif (state.equals(textMateResult.ruleStack)) {\n\t\t\tendState = state;\n\t\t} else {\n\t\t\tendState = textMateResult.ruleStack;\n\t\t}\n\n\t\treturn new EncodedTokenizationResult(textMateResult.tokens, endState);\n\t}\n}\n"],
  "mappings": ";;AAKA,SAAS,SAAS,aAAa;AAC/B,SAAS,kBAAkB;AAC3B,SAAS,iBAAiB;AAC1B,SAAS,YAAY,qBAAqB;AAC1C,SAAS,2BAA2B,8BAA8B,sBAAsB,QAAQ,sBAAsB,0BAA0B;AAChJ,SAAS,kBAAkB;AAGpB,MAAM,oCAAoC,WAA2C;AAAA,EAK3F,YACkB,UACA,eACA,4BACA,4BACA,4CACA,yBACA,yBAChB;AACD,UAAM;AARW;AACA;AACA;AACA;AACA;AACA;AACA;AAAA,EAGlB;AAAA,EA5BD,OAa4F;AAAA;AAAA;AAAA,EAC1E,iBAA4B,CAAC;AAAA,EAC7B,0BAA+C,KAAK,UAAU,IAAI,QAAoB,CAAC;AAAA,EACxF,yBAA4C,KAAK,wBAAwB;AAAA,EAczF,IAAW,4CAAiE;AAC3E,WAAO,KAAK,2CAA2C;AAAA,EACxD;AAAA,EAEO,kBAA0B;AAChC,WAAO,KAAK;AAAA,EACb;AAAA,EAEO,SAAS,MAAc,QAAiB,OAAmC;AACjF,UAAM,IAAI,MAAM,gBAAgB;AAAA,EACjC;AAAA,EAEO,0BAA0B,WAAuB,OAAuE;AAC9H,QAAI,KAAK,4BAA4B;AACpC,aAAO,KAAK,2BAA2B,WAAW,KAAK;AAAA,IACxD;AACA,WAAO;AAAA,EACR;AAAA,EAEO,gBAAgB,MAAc,QAAiB,OAA8C;AACnG,UAAM,iBAAiB,KAAK,OAAO,IAAI,MAAS;AAChD,UAAM,gBAAgB,KAAK,2BAA2B;AACtD,UAAM,KAAK,gBAAgB,IAAI,UAAU,IAAI,IAAI;AACjD,UAAM,iBAAiB,KAAK,SAAS,cAAc,MAAM,OAAO,GAAG;AACnE,QAAI,eAAe;AAClB,YAAM,SAAS,GAAI,QAAQ;AAC3B,UAAI,kBAAkB,SAAS,IAAI;AAClC,aAAK,wBAAwB,QAAQ,KAAK,QAAQ,cAAc;AAAA,MACjE;AAAA,IACD;AAEA,QAAI,eAAe,cAAc;AAChC,cAAQ,KAAK,4CAA4C,KAAK,UAAU,GAAG,GAAG,CAAC,EAAE;AAEjF,aAAO,IAAI,0BAA0B,eAAe,QAAQ,KAAK;AAAA,IAClE;AAEA,QAAI,KAAK,4BAA4B;AACpC,YAAM,gBAAgB,KAAK;AAC3B,YAAM,SAAS,eAAe;AAG9B,eAAS,IAAI,GAAG,MAAO,OAAO,WAAW,GAAI,IAAI,KAAK,KAAK;AAC1D,cAAM,WAAW,QAAQ,KAAK,KAAK,CAAC;AACpC,cAAM,aAAa,cAAc,cAAc,QAAQ;AAEvD,YAAI,CAAC,cAAc,UAAU,GAAG;AAC/B,wBAAc,UAAU,IAAI;AAC5B,eAAK,wBAAwB,KAAK,UAAU;AAAA,QAC7C;AAAA,MACD;AAAA,IACD;AAEA,QAAI;AAEJ,QAAI,MAAM,OAAO,eAAe,SAAS,GAAG;AAC3C,iBAAW;AAAA,IACZ,OAAO;AACN,iBAAW,eAAe;AAAA,IAC3B;AAEA,WAAO,IAAI,0BAA0B,eAAe,QAAQ,QAAQ;AAAA,EACrE;AACD;",
  "names": []
}
