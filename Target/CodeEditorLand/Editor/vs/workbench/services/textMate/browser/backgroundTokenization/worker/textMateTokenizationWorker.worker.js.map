{
  "version": 3,
  "sources": ["../../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/textMate/browser/backgroundTokenization/worker/textMateTokenizationWorker.worker.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { URI, UriComponents } from '../../../../../../base/common/uri.js';\nimport { LanguageId } from '../../../../../../editor/common/encodedTokenAttributes.js';\nimport { IModelChangedEvent } from '../../../../../../editor/common/model/mirrorTextModel.js';\nimport { ICreateGrammarResult, TMGrammarFactory } from '../../../common/TMGrammarFactory.js';\nimport { IValidEmbeddedLanguagesMap, IValidGrammarDefinition, IValidTokenTypeMap } from '../../../common/TMScopeRegistry.js';\nimport type { IOnigLib, IRawTheme, StackDiff } from 'vscode-textmate';\nimport { TextMateWorkerTokenizer } from './textMateWorkerTokenizer.js';\nimport { importAMDNodeModule } from '../../../../../../amdX.js';\nimport { IRequestHandler, IWorkerServer } from '../../../../../../base/common/worker/simpleWorker.js';\nimport { TextMateWorkerHost } from './textMateWorkerHost.js';\n\n/**\n * Defines the worker entry point. Must be exported and named `create`.\n * @skipMangle\n */\nexport function create(workerServer: IWorkerServer): TextMateTokenizationWorker {\n\treturn new TextMateTokenizationWorker(workerServer);\n}\n\nexport interface ICreateData {\n\tgrammarDefinitions: IValidGrammarDefinitionDTO[];\n\tonigurumaWASMUri: string;\n}\n\nexport interface IValidGrammarDefinitionDTO {\n\tlocation: UriComponents;\n\tlanguage?: string;\n\tscopeName: string;\n\tembeddedLanguages: IValidEmbeddedLanguagesMap;\n\ttokenTypes: IValidTokenTypeMap;\n\tinjectTo?: string[];\n\tbalancedBracketSelectors: string[];\n\tunbalancedBracketSelectors: string[];\n\tsourceExtensionId?: string;\n}\n\nexport interface StateDeltas {\n\tstartLineNumber: number;\n\t// null means the state for that line did not change\n\tstateDeltas: (StackDiff | null)[];\n}\n\nexport class TextMateTokenizationWorker implements IRequestHandler {\n\t_requestHandlerBrand: any;\n\n\tprivate readonly _host: TextMateWorkerHost;\n\tprivate readonly _models = new Map</* controllerId */ number, TextMateWorkerTokenizer>();\n\tprivate readonly _grammarCache: Promise<ICreateGrammarResult>[] = [];\n\tprivate _grammarFactory: Promise<TMGrammarFactory | null> = Promise.resolve(null);\n\n\tconstructor(workerServer: IWorkerServer) {\n\t\tthis._host = TextMateWorkerHost.getChannel(workerServer);\n\t}\n\n\tpublic async $init(_createData: ICreateData): Promise<void> {\n\t\tconst grammarDefinitions = _createData.grammarDefinitions.map<IValidGrammarDefinition>((def) => {\n\t\t\treturn {\n\t\t\t\tlocation: URI.revive(def.location),\n\t\t\t\tlanguage: def.language,\n\t\t\t\tscopeName: def.scopeName,\n\t\t\t\tembeddedLanguages: def.embeddedLanguages,\n\t\t\t\ttokenTypes: def.tokenTypes,\n\t\t\t\tinjectTo: def.injectTo,\n\t\t\t\tbalancedBracketSelectors: def.balancedBracketSelectors,\n\t\t\t\tunbalancedBracketSelectors: def.unbalancedBracketSelectors,\n\t\t\t\tsourceExtensionId: def.sourceExtensionId,\n\t\t\t};\n\t\t});\n\t\tthis._grammarFactory = this._loadTMGrammarFactory(grammarDefinitions, _createData.onigurumaWASMUri);\n\t}\n\n\tprivate async _loadTMGrammarFactory(grammarDefinitions: IValidGrammarDefinition[], onigurumaWASMUri: string): Promise<TMGrammarFactory> {\n\t\tconst vscodeTextmate = await importAMDNodeModule<typeof import('vscode-textmate')>('vscode-textmate', 'release/main.js');\n\t\tconst vscodeOniguruma = await importAMDNodeModule<typeof import('vscode-oniguruma')>('vscode-oniguruma', 'release/main.js');\n\t\tconst response = await fetch(onigurumaWASMUri);\n\n\t\t// Using the response directly only works if the server sets the MIME type 'application/wasm'.\n\t\t// Otherwise, a TypeError is thrown when using the streaming compiler.\n\t\t// We therefore use the non-streaming compiler :(.\n\t\tconst bytes = await response.arrayBuffer();\n\t\tawait vscodeOniguruma.loadWASM(bytes);\n\n\t\tconst onigLib: Promise<IOnigLib> = Promise.resolve({\n\t\t\tcreateOnigScanner: (sources) => vscodeOniguruma.createOnigScanner(sources),\n\t\t\tcreateOnigString: (str) => vscodeOniguruma.createOnigString(str)\n\t\t});\n\n\t\treturn new TMGrammarFactory({\n\t\t\tlogTrace: (msg: string) => {/* console.log(msg) */ },\n\t\t\tlogError: (msg: string, err: any) => console.error(msg, err),\n\t\t\treadFile: (resource: URI) => this._host.$readFile(resource)\n\t\t}, grammarDefinitions, vscodeTextmate, onigLib);\n\t}\n\n\t// These methods are called by the renderer\n\n\tpublic $acceptNewModel(data: IRawModelData): void {\n\t\tconst uri = URI.revive(data.uri);\n\t\tconst that = this;\n\t\tthis._models.set(data.controllerId, new TextMateWorkerTokenizer(uri, data.lines, data.EOL, data.versionId, {\n\t\t\tasync getOrCreateGrammar(languageId: string, encodedLanguageId: LanguageId): Promise<ICreateGrammarResult | null> {\n\t\t\t\tconst grammarFactory = await that._grammarFactory;\n\t\t\t\tif (!grammarFactory) {\n\t\t\t\t\treturn Promise.resolve(null);\n\t\t\t\t}\n\t\t\t\tif (!that._grammarCache[encodedLanguageId]) {\n\t\t\t\t\tthat._grammarCache[encodedLanguageId] = grammarFactory.createGrammar(languageId, encodedLanguageId);\n\t\t\t\t}\n\t\t\t\treturn that._grammarCache[encodedLanguageId];\n\t\t\t},\n\t\t\tsetTokensAndStates(versionId: number, tokens: Uint8Array, stateDeltas: StateDeltas[]): void {\n\t\t\t\tthat._host.$setTokensAndStates(data.controllerId, versionId, tokens, stateDeltas);\n\t\t\t},\n\t\t\treportTokenizationTime(timeMs: number, languageId: string, sourceExtensionId: string | undefined, lineLength: number, isRandomSample: boolean): void {\n\t\t\t\tthat._host.$reportTokenizationTime(timeMs, languageId, sourceExtensionId, lineLength, isRandomSample);\n\t\t\t},\n\t\t}, data.languageId, data.encodedLanguageId, data.maxTokenizationLineLength));\n\t}\n\n\tpublic $acceptModelChanged(controllerId: number, e: IModelChangedEvent): void {\n\t\tthis._models.get(controllerId)!.onEvents(e);\n\t}\n\n\tpublic $retokenize(controllerId: number, startLineNumber: number, endLineNumberExclusive: number): void {\n\t\tthis._models.get(controllerId)!.retokenize(startLineNumber, endLineNumberExclusive);\n\t}\n\n\tpublic $acceptModelLanguageChanged(controllerId: number, newLanguageId: string, newEncodedLanguageId: LanguageId): void {\n\t\tthis._models.get(controllerId)!.onLanguageId(newLanguageId, newEncodedLanguageId);\n\t}\n\n\tpublic $acceptRemovedModel(controllerId: number): void {\n\t\tconst model = this._models.get(controllerId);\n\t\tif (model) {\n\t\t\tmodel.dispose();\n\t\t\tthis._models.delete(controllerId);\n\t\t}\n\t}\n\n\tpublic async $acceptTheme(theme: IRawTheme, colorMap: string[]): Promise<void> {\n\t\tconst grammarFactory = await this._grammarFactory;\n\t\tgrammarFactory?.setTheme(theme, colorMap);\n\t}\n\n\tpublic $acceptMaxTokenizationLineLength(controllerId: number, value: number): void {\n\t\tthis._models.get(controllerId)!.acceptMaxTokenizationLineLength(value);\n\t}\n}\n\nexport interface IRawModelData {\n\turi: UriComponents;\n\tversionId: number;\n\tlines: string[];\n\tEOL: string;\n\tlanguageId: string;\n\tencodedLanguageId: LanguageId;\n\tmaxTokenizationLineLength: number;\n\tcontrollerId: number;\n}\n"],
  "mappings": "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",
  "names": []
}
