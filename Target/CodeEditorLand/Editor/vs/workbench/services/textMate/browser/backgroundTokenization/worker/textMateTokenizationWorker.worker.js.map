{
  "version": 3,
  "sources": ["../../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/textMate/browser/backgroundTokenization/worker/textMateTokenizationWorker.worker.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport type { IOnigLib, IRawTheme, StackDiff } from \"vscode-textmate\";\nimport { importAMDNodeModule } from \"../../../../../../amdX.js\";\nimport { URI, type UriComponents } from \"../../../../../../base/common/uri.js\";\nimport type {\n\tIRequestHandler,\n\tIWorkerServer,\n} from \"../../../../../../base/common/worker/simpleWorker.js\";\nimport type { LanguageId } from \"../../../../../../editor/common/encodedTokenAttributes.js\";\nimport type { IModelChangedEvent } from \"../../../../../../editor/common/model/mirrorTextModel.js\";\nimport {\n\ttype ICreateGrammarResult,\n\tTMGrammarFactory,\n} from \"../../../common/TMGrammarFactory.js\";\nimport type {\n\tIValidEmbeddedLanguagesMap,\n\tIValidGrammarDefinition,\n\tIValidTokenTypeMap,\n} from \"../../../common/TMScopeRegistry.js\";\nimport { TextMateWorkerHost } from \"./textMateWorkerHost.js\";\nimport { TextMateWorkerTokenizer } from \"./textMateWorkerTokenizer.js\";\n\n/**\n * Defines the worker entry point. Must be exported and named `create`.\n * @skipMangle\n */\nexport function create(\n\tworkerServer: IWorkerServer,\n): TextMateTokenizationWorker {\n\treturn new TextMateTokenizationWorker(workerServer);\n}\n\nexport interface ICreateData {\n\tgrammarDefinitions: IValidGrammarDefinitionDTO[];\n\tonigurumaWASMUri: string;\n}\n\nexport interface IValidGrammarDefinitionDTO {\n\tlocation: UriComponents;\n\tlanguage?: string;\n\tscopeName: string;\n\tembeddedLanguages: IValidEmbeddedLanguagesMap;\n\ttokenTypes: IValidTokenTypeMap;\n\tinjectTo?: string[];\n\tbalancedBracketSelectors: string[];\n\tunbalancedBracketSelectors: string[];\n\tsourceExtensionId?: string;\n}\n\nexport interface StateDeltas {\n\tstartLineNumber: number;\n\t// null means the state for that line did not change\n\tstateDeltas: (StackDiff | null)[];\n}\n\nexport class TextMateTokenizationWorker implements IRequestHandler {\n\t_requestHandlerBrand: any;\n\n\tprivate readonly _host: TextMateWorkerHost;\n\tprivate readonly _models = new Map<\n\t\t/* controllerId */ number,\n\t\tTextMateWorkerTokenizer\n\t>();\n\tprivate readonly _grammarCache: Promise<ICreateGrammarResult>[] = [];\n\tprivate _grammarFactory: Promise<TMGrammarFactory | null> =\n\t\tPromise.resolve(null);\n\n\tconstructor(workerServer: IWorkerServer) {\n\t\tthis._host = TextMateWorkerHost.getChannel(workerServer);\n\t}\n\n\tpublic async $init(_createData: ICreateData): Promise<void> {\n\t\tconst grammarDefinitions =\n\t\t\t_createData.grammarDefinitions.map<IValidGrammarDefinition>(\n\t\t\t\t(def) => {\n\t\t\t\t\treturn {\n\t\t\t\t\t\tlocation: URI.revive(def.location),\n\t\t\t\t\t\tlanguage: def.language,\n\t\t\t\t\t\tscopeName: def.scopeName,\n\t\t\t\t\t\tembeddedLanguages: def.embeddedLanguages,\n\t\t\t\t\t\ttokenTypes: def.tokenTypes,\n\t\t\t\t\t\tinjectTo: def.injectTo,\n\t\t\t\t\t\tbalancedBracketSelectors: def.balancedBracketSelectors,\n\t\t\t\t\t\tunbalancedBracketSelectors:\n\t\t\t\t\t\t\tdef.unbalancedBracketSelectors,\n\t\t\t\t\t\tsourceExtensionId: def.sourceExtensionId,\n\t\t\t\t\t};\n\t\t\t\t},\n\t\t\t);\n\t\tthis._grammarFactory = this._loadTMGrammarFactory(\n\t\t\tgrammarDefinitions,\n\t\t\t_createData.onigurumaWASMUri,\n\t\t);\n\t}\n\n\tprivate async _loadTMGrammarFactory(\n\t\tgrammarDefinitions: IValidGrammarDefinition[],\n\t\tonigurumaWASMUri: string,\n\t): Promise<TMGrammarFactory> {\n\t\tconst vscodeTextmate = await importAMDNodeModule<\n\t\t\ttypeof import(\"vscode-textmate\")\n\t\t>(\"vscode-textmate\", \"release/main.js\");\n\t\tconst vscodeOniguruma = await importAMDNodeModule<\n\t\t\ttypeof import(\"vscode-oniguruma\")\n\t\t>(\"vscode-oniguruma\", \"release/main.js\");\n\t\tconst response = await fetch(onigurumaWASMUri);\n\n\t\t// Using the response directly only works if the server sets the MIME type 'application/wasm'.\n\t\t// Otherwise, a TypeError is thrown when using the streaming compiler.\n\t\t// We therefore use the non-streaming compiler :(.\n\t\tconst bytes = await response.arrayBuffer();\n\t\tawait vscodeOniguruma.loadWASM(bytes);\n\n\t\tconst onigLib: Promise<IOnigLib> = Promise.resolve({\n\t\t\tcreateOnigScanner: (sources) =>\n\t\t\t\tvscodeOniguruma.createOnigScanner(sources),\n\t\t\tcreateOnigString: (str) => vscodeOniguruma.createOnigString(str),\n\t\t});\n\n\t\treturn new TMGrammarFactory(\n\t\t\t{\n\t\t\t\tlogTrace: (msg: string) => {\n\t\t\t\t\t/* console.log(msg) */\n\t\t\t\t},\n\t\t\t\tlogError: (msg: string, err: any) => console.error(msg, err),\n\t\t\t\treadFile: (resource: URI) => this._host.$readFile(resource),\n\t\t\t},\n\t\t\tgrammarDefinitions,\n\t\t\tvscodeTextmate,\n\t\t\tonigLib,\n\t\t);\n\t}\n\n\t// These methods are called by the renderer\n\n\tpublic $acceptNewModel(data: IRawModelData): void {\n\t\tconst uri = URI.revive(data.uri);\n\t\tconst that = this;\n\t\tthis._models.set(\n\t\t\tdata.controllerId,\n\t\t\tnew TextMateWorkerTokenizer(\n\t\t\t\turi,\n\t\t\t\tdata.lines,\n\t\t\t\tdata.EOL,\n\t\t\t\tdata.versionId,\n\t\t\t\t{\n\t\t\t\t\tasync getOrCreateGrammar(\n\t\t\t\t\t\tlanguageId: string,\n\t\t\t\t\t\tencodedLanguageId: LanguageId,\n\t\t\t\t\t): Promise<ICreateGrammarResult | null> {\n\t\t\t\t\t\tconst grammarFactory = await that._grammarFactory;\n\t\t\t\t\t\tif (!grammarFactory) {\n\t\t\t\t\t\t\treturn Promise.resolve(null);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (!that._grammarCache[encodedLanguageId]) {\n\t\t\t\t\t\t\tthat._grammarCache[encodedLanguageId] =\n\t\t\t\t\t\t\t\tgrammarFactory.createGrammar(\n\t\t\t\t\t\t\t\t\tlanguageId,\n\t\t\t\t\t\t\t\t\tencodedLanguageId,\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn that._grammarCache[encodedLanguageId];\n\t\t\t\t\t},\n\t\t\t\t\tsetTokensAndStates(\n\t\t\t\t\t\tversionId: number,\n\t\t\t\t\t\ttokens: Uint8Array,\n\t\t\t\t\t\tstateDeltas: StateDeltas[],\n\t\t\t\t\t): void {\n\t\t\t\t\t\tthat._host.$setTokensAndStates(\n\t\t\t\t\t\t\tdata.controllerId,\n\t\t\t\t\t\t\tversionId,\n\t\t\t\t\t\t\ttokens,\n\t\t\t\t\t\t\tstateDeltas,\n\t\t\t\t\t\t);\n\t\t\t\t\t},\n\t\t\t\t\treportTokenizationTime(\n\t\t\t\t\t\ttimeMs: number,\n\t\t\t\t\t\tlanguageId: string,\n\t\t\t\t\t\tsourceExtensionId: string | undefined,\n\t\t\t\t\t\tlineLength: number,\n\t\t\t\t\t\tisRandomSample: boolean,\n\t\t\t\t\t): void {\n\t\t\t\t\t\tthat._host.$reportTokenizationTime(\n\t\t\t\t\t\t\ttimeMs,\n\t\t\t\t\t\t\tlanguageId,\n\t\t\t\t\t\t\tsourceExtensionId,\n\t\t\t\t\t\t\tlineLength,\n\t\t\t\t\t\t\tisRandomSample,\n\t\t\t\t\t\t);\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tdata.languageId,\n\t\t\t\tdata.encodedLanguageId,\n\t\t\t\tdata.maxTokenizationLineLength,\n\t\t\t),\n\t\t);\n\t}\n\n\tpublic $acceptModelChanged(\n\t\tcontrollerId: number,\n\t\te: IModelChangedEvent,\n\t): void {\n\t\tthis._models.get(controllerId)!.onEvents(e);\n\t}\n\n\tpublic $retokenize(\n\t\tcontrollerId: number,\n\t\tstartLineNumber: number,\n\t\tendLineNumberExclusive: number,\n\t): void {\n\t\tthis._models\n\t\t\t.get(controllerId)!\n\t\t\t.retokenize(startLineNumber, endLineNumberExclusive);\n\t}\n\n\tpublic $acceptModelLanguageChanged(\n\t\tcontrollerId: number,\n\t\tnewLanguageId: string,\n\t\tnewEncodedLanguageId: LanguageId,\n\t): void {\n\t\tthis._models\n\t\t\t.get(controllerId)!\n\t\t\t.onLanguageId(newLanguageId, newEncodedLanguageId);\n\t}\n\n\tpublic $acceptRemovedModel(controllerId: number): void {\n\t\tconst model = this._models.get(controllerId);\n\t\tif (model) {\n\t\t\tmodel.dispose();\n\t\t\tthis._models.delete(controllerId);\n\t\t}\n\t}\n\n\tpublic async $acceptTheme(\n\t\ttheme: IRawTheme,\n\t\tcolorMap: string[],\n\t): Promise<void> {\n\t\tconst grammarFactory = await this._grammarFactory;\n\t\tgrammarFactory?.setTheme(theme, colorMap);\n\t}\n\n\tpublic $acceptMaxTokenizationLineLength(\n\t\tcontrollerId: number,\n\t\tvalue: number,\n\t): void {\n\t\tthis._models.get(controllerId)!.acceptMaxTokenizationLineLength(value);\n\t}\n}\n\nexport interface IRawModelData {\n\turi: UriComponents;\n\tversionId: number;\n\tlines: string[];\n\tEOL: string;\n\tlanguageId: string;\n\tencodedLanguageId: LanguageId;\n\tmaxTokenizationLineLength: number;\n\tcontrollerId: number;\n}\n"],
  "mappings": "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",
  "names": []
}
