{
  "version": 3,
  "sources": ["../../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/textMate/browser/backgroundTokenization/worker/textMateWorkerTokenizer.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport type {\n\tStackDiff,\n\tStateStack,\n\tdiffStateStacksRefEq,\n} from \"vscode-textmate\";\nimport { importAMDNodeModule } from \"../../../../../../amdX.js\";\nimport { RunOnceScheduler } from \"../../../../../../base/common/async.js\";\nimport { Disposable } from \"../../../../../../base/common/lifecycle.js\";\nimport { observableValue } from \"../../../../../../base/common/observable.js\";\nimport { setTimeout0 } from \"../../../../../../base/common/platform.js\";\nimport type { URI } from \"../../../../../../base/common/uri.js\";\nimport { LineRange } from \"../../../../../../editor/common/core/lineRange.js\";\nimport type { LanguageId } from \"../../../../../../editor/common/encodedTokenAttributes.js\";\nimport {\n\ttype IModelChangedEvent,\n\tMirrorTextModel,\n} from \"../../../../../../editor/common/model/mirrorTextModel.js\";\nimport { TokenizerWithStateStore } from \"../../../../../../editor/common/model/textModelTokens.js\";\nimport { ContiguousMultilineTokensBuilder } from \"../../../../../../editor/common/tokens/contiguousMultilineTokensBuilder.js\";\nimport { LineTokens } from \"../../../../../../editor/common/tokens/lineTokens.js\";\nimport type { ICreateGrammarResult } from \"../../../common/TMGrammarFactory.js\";\nimport { TextMateTokenizationSupport } from \"../../tokenizationSupport/textMateTokenizationSupport.js\";\nimport { TokenizationSupportWithLineLimit } from \"../../tokenizationSupport/tokenizationSupportWithLineLimit.js\";\nimport type { StateDeltas } from \"./textMateTokenizationWorker.worker.js\";\n\nexport interface TextMateModelTokenizerHost {\n\tgetOrCreateGrammar(\n\t\tlanguageId: string,\n\t\tencodedLanguageId: LanguageId,\n\t): Promise<ICreateGrammarResult | null>;\n\tsetTokensAndStates(\n\t\tversionId: number,\n\t\ttokens: Uint8Array,\n\t\tstateDeltas: StateDeltas[],\n\t): void;\n\treportTokenizationTime(\n\t\ttimeMs: number,\n\t\tlanguageId: string,\n\t\tsourceExtensionId: string | undefined,\n\t\tlineLength: number,\n\t\tisRandomSample: boolean,\n\t): void;\n}\n\nexport class TextMateWorkerTokenizer extends MirrorTextModel {\n\tprivate _tokenizerWithStateStore: TokenizerWithStateStore<StateStack> | null =\n\t\tnull;\n\tprivate _isDisposed = false;\n\tprivate readonly _maxTokenizationLineLength = observableValue(this, -1);\n\tprivate _diffStateStacksRefEqFn?: typeof diffStateStacksRefEq;\n\tprivate readonly _tokenizeDebouncer = new RunOnceScheduler(\n\t\t() => this._tokenize(),\n\t\t10,\n\t);\n\n\tconstructor(\n\t\turi: URI,\n\t\tlines: string[],\n\t\teol: string,\n\t\tversionId: number,\n\t\tprivate readonly _host: TextMateModelTokenizerHost,\n\t\tprivate _languageId: string,\n\t\tprivate _encodedLanguageId: LanguageId,\n\t\tmaxTokenizationLineLength: number,\n\t) {\n\t\tsuper(uri, lines, eol, versionId);\n\t\tthis._maxTokenizationLineLength.set(\n\t\t\tmaxTokenizationLineLength,\n\t\t\tundefined,\n\t\t);\n\t\tthis._resetTokenization();\n\t}\n\n\tpublic override dispose(): void {\n\t\tthis._isDisposed = true;\n\t\tsuper.dispose();\n\t}\n\n\tpublic onLanguageId(\n\t\tlanguageId: string,\n\t\tencodedLanguageId: LanguageId,\n\t): void {\n\t\tthis._languageId = languageId;\n\t\tthis._encodedLanguageId = encodedLanguageId;\n\t\tthis._resetTokenization();\n\t}\n\n\toverride onEvents(e: IModelChangedEvent): void {\n\t\tsuper.onEvents(e);\n\n\t\tthis._tokenizerWithStateStore?.store.acceptChanges(e.changes);\n\t\tthis._tokenizeDebouncer.schedule();\n\t}\n\n\tpublic acceptMaxTokenizationLineLength(\n\t\tmaxTokenizationLineLength: number,\n\t): void {\n\t\tthis._maxTokenizationLineLength.set(\n\t\t\tmaxTokenizationLineLength,\n\t\t\tundefined,\n\t\t);\n\t}\n\n\tpublic retokenize(startLineNumber: number, endLineNumberExclusive: number) {\n\t\tif (this._tokenizerWithStateStore) {\n\t\t\tthis._tokenizerWithStateStore.store.invalidateEndStateRange(\n\t\t\t\tnew LineRange(startLineNumber, endLineNumberExclusive),\n\t\t\t);\n\t\t\tthis._tokenizeDebouncer.schedule();\n\t\t}\n\t}\n\n\tprivate async _resetTokenization() {\n\t\tthis._tokenizerWithStateStore = null;\n\n\t\tconst languageId = this._languageId;\n\t\tconst encodedLanguageId = this._encodedLanguageId;\n\n\t\tconst r = await this._host.getOrCreateGrammar(\n\t\t\tlanguageId,\n\t\t\tencodedLanguageId,\n\t\t);\n\n\t\tif (\n\t\t\tthis._isDisposed ||\n\t\t\tlanguageId !== this._languageId ||\n\t\t\tencodedLanguageId !== this._encodedLanguageId ||\n\t\t\t!r\n\t\t) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (r.grammar) {\n\t\t\tconst tokenizationSupport = new TokenizationSupportWithLineLimit(\n\t\t\t\tthis._encodedLanguageId,\n\t\t\t\tnew TextMateTokenizationSupport(\n\t\t\t\t\tr.grammar,\n\t\t\t\t\tr.initialState,\n\t\t\t\t\tfalse,\n\t\t\t\t\tundefined,\n\t\t\t\t\t() => false,\n\t\t\t\t\t(timeMs, lineLength, isRandomSample) => {\n\t\t\t\t\t\tthis._host.reportTokenizationTime(\n\t\t\t\t\t\t\ttimeMs,\n\t\t\t\t\t\t\tlanguageId,\n\t\t\t\t\t\t\tr.sourceExtensionId,\n\t\t\t\t\t\t\tlineLength,\n\t\t\t\t\t\t\tisRandomSample,\n\t\t\t\t\t\t);\n\t\t\t\t\t},\n\t\t\t\t\tfalse,\n\t\t\t\t),\n\t\t\t\tDisposable.None,\n\t\t\t\tthis._maxTokenizationLineLength,\n\t\t\t);\n\t\t\tthis._tokenizerWithStateStore = new TokenizerWithStateStore(\n\t\t\t\tthis._lines.length,\n\t\t\t\ttokenizationSupport,\n\t\t\t);\n\t\t} else {\n\t\t\tthis._tokenizerWithStateStore = null;\n\t\t}\n\t\tthis._tokenize();\n\t}\n\n\tprivate async _tokenize(): Promise<void> {\n\t\tif (this._isDisposed || !this._tokenizerWithStateStore) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (!this._diffStateStacksRefEqFn) {\n\t\t\tconst { diffStateStacksRefEq } = await importAMDNodeModule<\n\t\t\t\ttypeof import(\"vscode-textmate\")\n\t\t\t>(\"vscode-textmate\", \"release/main.js\");\n\t\t\tthis._diffStateStacksRefEqFn = diffStateStacksRefEq;\n\t\t}\n\n\t\tconst startTime = new Date().getTime();\n\n\t\twhile (true) {\n\t\t\tlet tokenizedLines = 0;\n\t\t\tconst tokenBuilder = new ContiguousMultilineTokensBuilder();\n\t\t\tconst stateDeltaBuilder = new StateDeltaBuilder();\n\n\t\t\twhile (true) {\n\t\t\t\tconst lineToTokenize =\n\t\t\t\t\tthis._tokenizerWithStateStore.getFirstInvalidLine();\n\t\t\t\tif (lineToTokenize === null || tokenizedLines > 200) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\ttokenizedLines++;\n\n\t\t\t\tconst text = this._lines[lineToTokenize.lineNumber - 1];\n\t\t\t\tconst r =\n\t\t\t\t\tthis._tokenizerWithStateStore.tokenizationSupport.tokenizeEncoded(\n\t\t\t\t\t\ttext,\n\t\t\t\t\t\ttrue,\n\t\t\t\t\t\tlineToTokenize.startState,\n\t\t\t\t\t);\n\t\t\t\tif (\n\t\t\t\t\tthis._tokenizerWithStateStore.store.setEndState(\n\t\t\t\t\t\tlineToTokenize.lineNumber,\n\t\t\t\t\t\tr.endState as StateStack,\n\t\t\t\t\t)\n\t\t\t\t) {\n\t\t\t\t\tconst delta = this._diffStateStacksRefEqFn(\n\t\t\t\t\t\tlineToTokenize.startState,\n\t\t\t\t\t\tr.endState as StateStack,\n\t\t\t\t\t);\n\t\t\t\t\tstateDeltaBuilder.setState(\n\t\t\t\t\t\tlineToTokenize.lineNumber,\n\t\t\t\t\t\tdelta,\n\t\t\t\t\t);\n\t\t\t\t} else {\n\t\t\t\t\tstateDeltaBuilder.setState(lineToTokenize.lineNumber, null);\n\t\t\t\t}\n\n\t\t\t\tLineTokens.convertToEndOffset(r.tokens, text.length);\n\t\t\t\ttokenBuilder.add(lineToTokenize.lineNumber, r.tokens);\n\n\t\t\t\tconst deltaMs = new Date().getTime() - startTime;\n\t\t\t\tif (deltaMs > 20) {\n\t\t\t\t\t// yield to check for changes\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (tokenizedLines === 0) {\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tconst stateDeltas = stateDeltaBuilder.getStateDeltas();\n\t\t\tthis._host.setTokensAndStates(\n\t\t\t\tthis._versionId,\n\t\t\t\ttokenBuilder.serialize(),\n\t\t\t\tstateDeltas,\n\t\t\t);\n\n\t\t\tconst deltaMs = new Date().getTime() - startTime;\n\t\t\tif (deltaMs > 20) {\n\t\t\t\t// yield to check for changes\n\t\t\t\tsetTimeout0(() => this._tokenize());\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t}\n}\n\nclass StateDeltaBuilder {\n\tprivate _lastStartLineNumber = -1;\n\tprivate _stateDeltas: StateDeltas[] = [];\n\n\tpublic setState(lineNumber: number, stackDiff: StackDiff | null): void {\n\t\tif (lineNumber === this._lastStartLineNumber + 1) {\n\t\t\tthis._stateDeltas[this._stateDeltas.length - 1].stateDeltas.push(\n\t\t\t\tstackDiff,\n\t\t\t);\n\t\t} else {\n\t\t\tthis._stateDeltas.push({\n\t\t\t\tstartLineNumber: lineNumber,\n\t\t\t\tstateDeltas: [stackDiff],\n\t\t\t});\n\t\t}\n\t\tthis._lastStartLineNumber = lineNumber;\n\t}\n\n\tpublic getStateDeltas(): StateDeltas[] {\n\t\treturn this._stateDeltas;\n\t}\n}\n"],
  "mappings": "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",
  "names": ["deltaMs"]
}
