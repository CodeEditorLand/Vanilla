{
  "version": 3,
  "sources": ["../../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/textMate/browser/backgroundTokenization/worker/textMateWorkerTokenizer.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { importAMDNodeModule } from '../../../../../../amdX.js';\nimport { RunOnceScheduler } from '../../../../../../base/common/async.js';\nimport { observableValue } from '../../../../../../base/common/observable.js';\nimport { setTimeout0 } from '../../../../../../base/common/platform.js';\nimport { URI } from '../../../../../../base/common/uri.js';\nimport { LineRange } from '../../../../../../editor/common/core/lineRange.js';\nimport { LanguageId } from '../../../../../../editor/common/encodedTokenAttributes.js';\nimport { IModelChangedEvent, MirrorTextModel } from '../../../../../../editor/common/model/mirrorTextModel.js';\nimport { TokenizerWithStateStore } from '../../../../../../editor/common/model/textModelTokens.js';\nimport { ContiguousMultilineTokensBuilder } from '../../../../../../editor/common/tokens/contiguousMultilineTokensBuilder.js';\nimport { LineTokens } from '../../../../../../editor/common/tokens/lineTokens.js';\nimport { TextMateTokenizationSupport } from '../../tokenizationSupport/textMateTokenizationSupport.js';\nimport { TokenizationSupportWithLineLimit } from '../../tokenizationSupport/tokenizationSupportWithLineLimit.js';\nimport type { StackDiff, StateStack, diffStateStacksRefEq } from 'vscode-textmate';\nimport { ICreateGrammarResult } from '../../../common/TMGrammarFactory.js';\nimport { StateDeltas } from './textMateTokenizationWorker.worker.js';\nimport { Disposable } from '../../../../../../base/common/lifecycle.js';\n\nexport interface TextMateModelTokenizerHost {\n\tgetOrCreateGrammar(languageId: string, encodedLanguageId: LanguageId): Promise<ICreateGrammarResult | null>;\n\tsetTokensAndStates(versionId: number, tokens: Uint8Array, stateDeltas: StateDeltas[]): void;\n\treportTokenizationTime(timeMs: number, languageId: string, sourceExtensionId: string | undefined, lineLength: number, isRandomSample: boolean): void;\n}\n\nexport class TextMateWorkerTokenizer extends MirrorTextModel {\n\tprivate _tokenizerWithStateStore: TokenizerWithStateStore<StateStack> | null = null;\n\tprivate _isDisposed: boolean = false;\n\tprivate readonly _maxTokenizationLineLength = observableValue(this, -1);\n\tprivate _diffStateStacksRefEqFn?: typeof diffStateStacksRefEq;\n\tprivate readonly _tokenizeDebouncer = new RunOnceScheduler(() => this._tokenize(), 10);\n\n\tconstructor(\n\t\turi: URI,\n\t\tlines: string[],\n\t\teol: string,\n\t\tversionId: number,\n\t\tprivate readonly _host: TextMateModelTokenizerHost,\n\t\tprivate _languageId: string,\n\t\tprivate _encodedLanguageId: LanguageId,\n\t\tmaxTokenizationLineLength: number,\n\t) {\n\t\tsuper(uri, lines, eol, versionId);\n\t\tthis._maxTokenizationLineLength.set(maxTokenizationLineLength, undefined);\n\t\tthis._resetTokenization();\n\t}\n\n\tpublic override dispose(): void {\n\t\tthis._isDisposed = true;\n\t\tsuper.dispose();\n\t}\n\n\tpublic onLanguageId(languageId: string, encodedLanguageId: LanguageId): void {\n\t\tthis._languageId = languageId;\n\t\tthis._encodedLanguageId = encodedLanguageId;\n\t\tthis._resetTokenization();\n\t}\n\n\toverride onEvents(e: IModelChangedEvent): void {\n\t\tsuper.onEvents(e);\n\n\t\tthis._tokenizerWithStateStore?.store.acceptChanges(e.changes);\n\t\tthis._tokenizeDebouncer.schedule();\n\t}\n\n\tpublic acceptMaxTokenizationLineLength(maxTokenizationLineLength: number): void {\n\t\tthis._maxTokenizationLineLength.set(maxTokenizationLineLength, undefined);\n\t}\n\n\tpublic retokenize(startLineNumber: number, endLineNumberExclusive: number) {\n\t\tif (this._tokenizerWithStateStore) {\n\t\t\tthis._tokenizerWithStateStore.store.invalidateEndStateRange(new LineRange(startLineNumber, endLineNumberExclusive));\n\t\t\tthis._tokenizeDebouncer.schedule();\n\t\t}\n\t}\n\n\tprivate async _resetTokenization() {\n\t\tthis._tokenizerWithStateStore = null;\n\n\t\tconst languageId = this._languageId;\n\t\tconst encodedLanguageId = this._encodedLanguageId;\n\n\t\tconst r = await this._host.getOrCreateGrammar(languageId, encodedLanguageId);\n\n\t\tif (this._isDisposed || languageId !== this._languageId || encodedLanguageId !== this._encodedLanguageId || !r) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (r.grammar) {\n\t\t\tconst tokenizationSupport = new TokenizationSupportWithLineLimit(\n\t\t\t\tthis._encodedLanguageId,\n\t\t\t\tnew TextMateTokenizationSupport(r.grammar, r.initialState, false, undefined, () => false,\n\t\t\t\t\t(timeMs, lineLength, isRandomSample) => {\n\t\t\t\t\t\tthis._host.reportTokenizationTime(timeMs, languageId, r.sourceExtensionId, lineLength, isRandomSample);\n\t\t\t\t\t},\n\t\t\t\t\tfalse\n\t\t\t\t),\n\t\t\t\tDisposable.None,\n\t\t\t\tthis._maxTokenizationLineLength\n\t\t\t);\n\t\t\tthis._tokenizerWithStateStore = new TokenizerWithStateStore(this._lines.length, tokenizationSupport);\n\t\t} else {\n\t\t\tthis._tokenizerWithStateStore = null;\n\t\t}\n\t\tthis._tokenize();\n\t}\n\n\tprivate async _tokenize(): Promise<void> {\n\t\tif (this._isDisposed || !this._tokenizerWithStateStore) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (!this._diffStateStacksRefEqFn) {\n\t\t\tconst { diffStateStacksRefEq } = await importAMDNodeModule<typeof import('vscode-textmate')>('vscode-textmate', 'release/main.js');\n\t\t\tthis._diffStateStacksRefEqFn = diffStateStacksRefEq;\n\t\t}\n\n\t\tconst startTime = new Date().getTime();\n\n\t\twhile (true) {\n\t\t\tlet tokenizedLines = 0;\n\t\t\tconst tokenBuilder = new ContiguousMultilineTokensBuilder();\n\t\t\tconst stateDeltaBuilder = new StateDeltaBuilder();\n\n\t\t\twhile (true) {\n\t\t\t\tconst lineToTokenize = this._tokenizerWithStateStore.getFirstInvalidLine();\n\t\t\t\tif (lineToTokenize === null || tokenizedLines > 200) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\ttokenizedLines++;\n\n\t\t\t\tconst text = this._lines[lineToTokenize.lineNumber - 1];\n\t\t\t\tconst r = this._tokenizerWithStateStore.tokenizationSupport.tokenizeEncoded(text, true, lineToTokenize.startState);\n\t\t\t\tif (this._tokenizerWithStateStore.store.setEndState(lineToTokenize.lineNumber, r.endState as StateStack)) {\n\t\t\t\t\tconst delta = this._diffStateStacksRefEqFn(lineToTokenize.startState, r.endState as StateStack);\n\t\t\t\t\tstateDeltaBuilder.setState(lineToTokenize.lineNumber, delta);\n\t\t\t\t} else {\n\t\t\t\t\tstateDeltaBuilder.setState(lineToTokenize.lineNumber, null);\n\t\t\t\t}\n\n\t\t\t\tLineTokens.convertToEndOffset(r.tokens, text.length);\n\t\t\t\ttokenBuilder.add(lineToTokenize.lineNumber, r.tokens);\n\n\t\t\t\tconst deltaMs = new Date().getTime() - startTime;\n\t\t\t\tif (deltaMs > 20) {\n\t\t\t\t\t// yield to check for changes\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (tokenizedLines === 0) {\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tconst stateDeltas = stateDeltaBuilder.getStateDeltas();\n\t\t\tthis._host.setTokensAndStates(\n\t\t\t\tthis._versionId,\n\t\t\t\ttokenBuilder.serialize(),\n\t\t\t\tstateDeltas\n\t\t\t);\n\n\t\t\tconst deltaMs = new Date().getTime() - startTime;\n\t\t\tif (deltaMs > 20) {\n\t\t\t\t// yield to check for changes\n\t\t\t\tsetTimeout0(() => this._tokenize());\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t}\n}\n\nclass StateDeltaBuilder {\n\tprivate _lastStartLineNumber: number = -1;\n\tprivate _stateDeltas: StateDeltas[] = [];\n\n\tpublic setState(lineNumber: number, stackDiff: StackDiff | null): void {\n\t\tif (lineNumber === this._lastStartLineNumber + 1) {\n\t\t\tthis._stateDeltas[this._stateDeltas.length - 1].stateDeltas.push(stackDiff);\n\t\t} else {\n\t\t\tthis._stateDeltas.push({ startLineNumber: lineNumber, stateDeltas: [stackDiff] });\n\t\t}\n\t\tthis._lastStartLineNumber = lineNumber;\n\t}\n\n\tpublic getStateDeltas(): StateDeltas[] {\n\t\treturn this._stateDeltas;\n\t}\n}\n"],
  "mappings": "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",
  "names": ["deltaMs"]
}
