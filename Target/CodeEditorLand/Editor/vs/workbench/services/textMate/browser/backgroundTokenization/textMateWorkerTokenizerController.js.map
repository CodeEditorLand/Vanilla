{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/textMate/browser/backgroundTokenization/textMateWorkerTokenizerController.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport type { StateStack, applyStateStackDiff } from \"vscode-textmate\";\nimport { importAMDNodeModule } from \"../../../../../amdX.js\";\nimport { Disposable } from \"../../../../../base/common/lifecycle.js\";\nimport {\n\ttype IObservable,\n\tautorun,\n\tkeepObserved,\n} from \"../../../../../base/common/observable.js\";\nimport type { Proxied } from \"../../../../../base/common/worker/simpleWorker.js\";\nimport { countEOL } from \"../../../../../editor/common/core/eolCounter.js\";\nimport { LineRange } from \"../../../../../editor/common/core/lineRange.js\";\nimport { Range } from \"../../../../../editor/common/core/range.js\";\nimport type {\n\tIBackgroundTokenizationStore,\n\tILanguageIdCodec,\n} from \"../../../../../editor/common/languages.js\";\nimport type { ITextModel } from \"../../../../../editor/common/model.js\";\nimport { TokenizationStateStore } from \"../../../../../editor/common/model/textModelTokens.js\";\nimport type {\n\tIModelContentChange,\n\tIModelContentChangedEvent,\n} from \"../../../../../editor/common/textModelEvents.js\";\nimport { ContiguousMultilineTokensBuilder } from \"../../../../../editor/common/tokens/contiguousMultilineTokensBuilder.js\";\nimport type { IConfigurationService } from \"../../../../../platform/configuration/common/configuration.js\";\nimport { observableConfigValue } from \"../../../../../platform/observable/common/platformObservableUtils.js\";\nimport {\n\tArrayEdit,\n\tMonotonousIndexTransformer,\n\tSingleArrayEdit,\n} from \"../arrayOperation.js\";\nimport type {\n\tStateDeltas,\n\tTextMateTokenizationWorker,\n} from \"./worker/textMateTokenizationWorker.worker.js\";\n\nexport class TextMateWorkerTokenizerController extends Disposable {\n\tprivate static _id = 0;\n\n\tpublic readonly controllerId = TextMateWorkerTokenizerController._id++;\n\tprivate readonly _pendingChanges: IModelContentChangedEvent[] = [];\n\n\t/**\n\t * These states will eventually equal the worker states.\n\t * _states[i] stores the state at the end of line number i+1.\n\t */\n\tprivate readonly _states = new TokenizationStateStore<StateStack>();\n\n\tprivate readonly _loggingEnabled = observableConfigValue(\n\t\t\"editor.experimental.asyncTokenizationLogging\",\n\t\tfalse,\n\t\tthis._configurationService,\n\t);\n\n\tprivate _applyStateStackDiffFn?: typeof applyStateStackDiff;\n\tprivate _initialState?: StateStack;\n\n\tconstructor(\n\t\tprivate readonly _model: ITextModel,\n\t\tprivate readonly _worker: Proxied<TextMateTokenizationWorker>,\n\t\tprivate readonly _languageIdCodec: ILanguageIdCodec,\n\t\tprivate readonly _backgroundTokenizationStore: IBackgroundTokenizationStore,\n\t\tprivate readonly _configurationService: IConfigurationService,\n\t\tprivate readonly _maxTokenizationLineLength: IObservable<number>,\n\t) {\n\t\tsuper();\n\n\t\tthis._register(keepObserved(this._loggingEnabled));\n\n\t\tthis._register(\n\t\t\tthis._model.onDidChangeContent((e) => {\n\t\t\t\tif (this._shouldLog) {\n\t\t\t\t\tconsole.log(\"model change\", {\n\t\t\t\t\t\tfileName: this._model.uri.fsPath.split(\"\\\\\").pop(),\n\t\t\t\t\t\tchanges: changesToString(e.changes),\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\tthis._worker.$acceptModelChanged(this.controllerId, e);\n\t\t\t\tthis._pendingChanges.push(e);\n\t\t\t}),\n\t\t);\n\n\t\tthis._register(\n\t\t\tthis._model.onDidChangeLanguage((e) => {\n\t\t\t\tconst languageId = this._model.getLanguageId();\n\t\t\t\tconst encodedLanguageId =\n\t\t\t\t\tthis._languageIdCodec.encodeLanguageId(languageId);\n\t\t\t\tthis._worker.$acceptModelLanguageChanged(\n\t\t\t\t\tthis.controllerId,\n\t\t\t\t\tlanguageId,\n\t\t\t\t\tencodedLanguageId,\n\t\t\t\t);\n\t\t\t}),\n\t\t);\n\n\t\tconst languageId = this._model.getLanguageId();\n\t\tconst encodedLanguageId =\n\t\t\tthis._languageIdCodec.encodeLanguageId(languageId);\n\t\tthis._worker.$acceptNewModel({\n\t\t\turi: this._model.uri,\n\t\t\tversionId: this._model.getVersionId(),\n\t\t\tlines: this._model.getLinesContent(),\n\t\t\tEOL: this._model.getEOL(),\n\t\t\tlanguageId,\n\t\t\tencodedLanguageId,\n\t\t\tmaxTokenizationLineLength: this._maxTokenizationLineLength.get(),\n\t\t\tcontrollerId: this.controllerId,\n\t\t});\n\n\t\tthis._register(\n\t\t\tautorun((reader) => {\n\t\t\t\t/** @description update maxTokenizationLineLength */\n\t\t\t\tconst maxTokenizationLineLength =\n\t\t\t\t\tthis._maxTokenizationLineLength.read(reader);\n\t\t\t\tthis._worker.$acceptMaxTokenizationLineLength(\n\t\t\t\t\tthis.controllerId,\n\t\t\t\t\tmaxTokenizationLineLength,\n\t\t\t\t);\n\t\t\t}),\n\t\t);\n\t}\n\n\tpublic override dispose(): void {\n\t\tsuper.dispose();\n\t\tthis._worker.$acceptRemovedModel(this.controllerId);\n\t}\n\n\tpublic requestTokens(\n\t\tstartLineNumber: number,\n\t\tendLineNumberExclusive: number,\n\t): void {\n\t\tthis._worker.$retokenize(\n\t\t\tthis.controllerId,\n\t\t\tstartLineNumber,\n\t\t\tendLineNumberExclusive,\n\t\t);\n\t}\n\n\t/**\n\t * This method is called from the worker through the worker host.\n\t */\n\tpublic async setTokensAndStates(\n\t\tcontrollerId: number,\n\t\tversionId: number,\n\t\trawTokens: ArrayBuffer,\n\t\tstateDeltas: StateDeltas[],\n\t): Promise<void> {\n\t\tif (this.controllerId !== controllerId) {\n\t\t\t// This event is for an outdated controller (the worker didn't receive the delete/create messages yet), ignore the event.\n\t\t\treturn;\n\t\t}\n\n\t\t// _states state, change{k}, ..., change{versionId}, state delta base & rawTokens, change{j}, ..., change{m}, current renderer state\n\t\t//                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                ^^^^^^^^^^^^^^^^^^^^^^^^^\n\t\t//                | past changes                                                   | future states\n\n\t\tlet tokens = ContiguousMultilineTokensBuilder.deserialize(\n\t\t\tnew Uint8Array(rawTokens),\n\t\t);\n\n\t\tif (this._shouldLog) {\n\t\t\tconsole.log(\"received background tokenization result\", {\n\t\t\t\tfileName: this._model.uri.fsPath.split(\"\\\\\").pop(),\n\t\t\t\tupdatedTokenLines: tokens\n\t\t\t\t\t.map((t) => t.getLineRange())\n\t\t\t\t\t.join(\" & \"),\n\t\t\t\tupdatedStateLines: stateDeltas\n\t\t\t\t\t.map((s) =>\n\t\t\t\t\t\tnew LineRange(\n\t\t\t\t\t\t\ts.startLineNumber,\n\t\t\t\t\t\t\ts.startLineNumber + s.stateDeltas.length,\n\t\t\t\t\t\t).toString(),\n\t\t\t\t\t)\n\t\t\t\t\t.join(\" & \"),\n\t\t\t});\n\t\t}\n\n\t\tif (this._shouldLog) {\n\t\t\tconst changes = this._pendingChanges\n\t\t\t\t.filter((c) => c.versionId <= versionId)\n\t\t\t\t.map((c) => c.changes)\n\t\t\t\t.map((c) => changesToString(c))\n\t\t\t\t.join(\" then \");\n\t\t\tconsole.log(\"Applying changes to local states\", changes);\n\t\t}\n\n\t\t// Apply past changes to _states\n\t\twhile (\n\t\t\tthis._pendingChanges.length > 0 &&\n\t\t\tthis._pendingChanges[0].versionId <= versionId\n\t\t) {\n\t\t\tconst change = this._pendingChanges.shift()!;\n\t\t\tthis._states.acceptChanges(change.changes);\n\t\t}\n\n\t\tif (this._pendingChanges.length > 0) {\n\t\t\tif (this._shouldLog) {\n\t\t\t\tconst changes = this._pendingChanges\n\t\t\t\t\t.map((c) => c.changes)\n\t\t\t\t\t.map((c) => changesToString(c))\n\t\t\t\t\t.join(\" then \");\n\t\t\t\tconsole.log(\"Considering non-processed changes\", changes);\n\t\t\t}\n\n\t\t\tconst curToFutureTransformerTokens =\n\t\t\t\tMonotonousIndexTransformer.fromMany(\n\t\t\t\t\tthis._pendingChanges.map((c) =>\n\t\t\t\t\t\tfullLineArrayEditFromModelContentChange(c.changes),\n\t\t\t\t\t),\n\t\t\t\t);\n\n\t\t\t// Filter tokens in lines that got changed in the future to prevent flickering\n\t\t\t// These tokens are recomputed anyway.\n\t\t\tconst b = new ContiguousMultilineTokensBuilder();\n\t\t\tfor (const t of tokens) {\n\t\t\t\tfor (let i = t.startLineNumber; i <= t.endLineNumber; i++) {\n\t\t\t\t\tconst result = curToFutureTransformerTokens.transform(\n\t\t\t\t\t\ti - 1,\n\t\t\t\t\t);\n\t\t\t\t\t// If result is undefined, the current line got touched by an edit.\n\t\t\t\t\t// The webworker will send us new tokens for all the new/touched lines after it received the edits.\n\t\t\t\t\tif (result !== undefined) {\n\t\t\t\t\t\tb.add(i, t.getLineTokens(i) as Uint32Array);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\ttokens = b.finalize();\n\n\t\t\t// Apply future changes to tokens\n\t\t\tfor (const change of this._pendingChanges) {\n\t\t\t\tfor (const innerChanges of change.changes) {\n\t\t\t\t\tfor (let j = 0; j < tokens.length; j++) {\n\t\t\t\t\t\ttokens[j].applyEdit(\n\t\t\t\t\t\t\tinnerChanges.range,\n\t\t\t\t\t\t\tinnerChanges.text,\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tconst curToFutureTransformerStates =\n\t\t\tMonotonousIndexTransformer.fromMany(\n\t\t\t\tthis._pendingChanges.map((c) =>\n\t\t\t\t\tfullLineArrayEditFromModelContentChange(c.changes),\n\t\t\t\t),\n\t\t\t);\n\n\t\tif (!this._applyStateStackDiffFn || !this._initialState) {\n\t\t\tconst { applyStateStackDiff, INITIAL } = await importAMDNodeModule<\n\t\t\t\ttypeof import(\"vscode-textmate\")\n\t\t\t>(\"vscode-textmate\", \"release/main.js\");\n\t\t\tthis._applyStateStackDiffFn = applyStateStackDiff;\n\t\t\tthis._initialState = INITIAL;\n\t\t}\n\n\t\t// Apply state deltas to _states and _backgroundTokenizationStore\n\t\tfor (const d of stateDeltas) {\n\t\t\tlet prevState =\n\t\t\t\td.startLineNumber <= 1\n\t\t\t\t\t? this._initialState\n\t\t\t\t\t: this._states.getEndState(d.startLineNumber - 1);\n\t\t\tfor (let i = 0; i < d.stateDeltas.length; i++) {\n\t\t\t\tconst delta = d.stateDeltas[i];\n\t\t\t\tlet state: StateStack;\n\t\t\t\tif (delta) {\n\t\t\t\t\tstate = this._applyStateStackDiffFn(prevState, delta)!;\n\t\t\t\t\tthis._states.setEndState(d.startLineNumber + i, state);\n\t\t\t\t} else {\n\t\t\t\t\tstate = this._states.getEndState(d.startLineNumber + i)!;\n\t\t\t\t}\n\n\t\t\t\tconst offset = curToFutureTransformerStates.transform(\n\t\t\t\t\td.startLineNumber + i - 1,\n\t\t\t\t);\n\t\t\t\tif (offset !== undefined) {\n\t\t\t\t\t// Only set the state if there is no future change in this line,\n\t\t\t\t\t// as this might make consumers believe that the state/tokens are accurate\n\t\t\t\t\tthis._backgroundTokenizationStore.setEndState(\n\t\t\t\t\t\toffset + 1,\n\t\t\t\t\t\tstate,\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\tif (d.startLineNumber + i >= this._model.getLineCount() - 1) {\n\t\t\t\t\tthis._backgroundTokenizationStore.backgroundTokenizationFinished();\n\t\t\t\t}\n\n\t\t\t\tprevState = state;\n\t\t\t}\n\t\t}\n\t\t// First set states, then tokens, so that events fired from set tokens don't read invalid states\n\t\tthis._backgroundTokenizationStore.setTokens(tokens);\n\t}\n\n\tprivate get _shouldLog() {\n\t\treturn this._loggingEnabled.get();\n\t}\n}\n\nfunction fullLineArrayEditFromModelContentChange(\n\tc: IModelContentChange[],\n): ArrayEdit {\n\treturn new ArrayEdit(\n\t\tc.map(\n\t\t\t(c) =>\n\t\t\t\tnew SingleArrayEdit(\n\t\t\t\t\tc.range.startLineNumber - 1,\n\t\t\t\t\t// Expand the edit range to include the entire line\n\t\t\t\t\tc.range.endLineNumber - c.range.startLineNumber + 1,\n\t\t\t\t\tcountEOL(c.text)[0] + 1,\n\t\t\t\t),\n\t\t),\n\t);\n}\n\nfunction changesToString(changes: IModelContentChange[]): string {\n\treturn changes\n\t\t.map((c) => Range.lift(c.range).toString() + \" => \" + c.text)\n\t\t.join(\" & \");\n}\n"],
  "mappings": ";;AAMA,SAAS,2BAA2B;AACpC,SAAS,kBAAkB;AAC3B;AAAA,EAEC;AAAA,EACA;AAAA,OACM;AAEP,SAAS,gBAAgB;AACzB,SAAS,iBAAiB;AAC1B,SAAS,aAAa;AAMtB,SAAS,8BAA8B;AAKvC,SAAS,wCAAwC;AAEjD,SAAS,6BAA6B;AACtC;AAAA,EACC;AAAA,EACA;AAAA,EACA;AAAA,OACM;AAMA,MAAM,0CAA0C,WAAW;AAAA,EAqBjE,YACkB,QACA,SACA,kBACA,8BACA,uBACA,4BAChB;AACD,UAAM;AAPW;AACA;AACA;AACA;AACA;AACA;AAIjB,SAAK,UAAU,aAAa,KAAK,eAAe,CAAC;AAEjD,SAAK;AAAA,MACJ,KAAK,OAAO,mBAAmB,CAAC,MAAM;AACrC,YAAI,KAAK,YAAY;AACpB,kBAAQ,IAAI,gBAAgB;AAAA,YAC3B,UAAU,KAAK,OAAO,IAAI,OAAO,MAAM,IAAI,EAAE,IAAI;AAAA,YACjD,SAAS,gBAAgB,EAAE,OAAO;AAAA,UACnC,CAAC;AAAA,QACF;AACA,aAAK,QAAQ,oBAAoB,KAAK,cAAc,CAAC;AACrD,aAAK,gBAAgB,KAAK,CAAC;AAAA,MAC5B,CAAC;AAAA,IACF;AAEA,SAAK;AAAA,MACJ,KAAK,OAAO,oBAAoB,CAAC,MAAM;AACtC,cAAMA,cAAa,KAAK,OAAO,cAAc;AAC7C,cAAMC,qBACL,KAAK,iBAAiB,iBAAiBD,WAAU;AAClD,aAAK,QAAQ;AAAA,UACZ,KAAK;AAAA,UACLA;AAAA,UACAC;AAAA,QACD;AAAA,MACD,CAAC;AAAA,IACF;AAEA,UAAM,aAAa,KAAK,OAAO,cAAc;AAC7C,UAAM,oBACL,KAAK,iBAAiB,iBAAiB,UAAU;AAClD,SAAK,QAAQ,gBAAgB;AAAA,MAC5B,KAAK,KAAK,OAAO;AAAA,MACjB,WAAW,KAAK,OAAO,aAAa;AAAA,MACpC,OAAO,KAAK,OAAO,gBAAgB;AAAA,MACnC,KAAK,KAAK,OAAO,OAAO;AAAA,MACxB;AAAA,MACA;AAAA,MACA,2BAA2B,KAAK,2BAA2B,IAAI;AAAA,MAC/D,cAAc,KAAK;AAAA,IACpB,CAAC;AAED,SAAK;AAAA,MACJ,QAAQ,CAAC,WAAW;AAEnB,cAAM,4BACL,KAAK,2BAA2B,KAAK,MAAM;AAC5C,aAAK,QAAQ;AAAA,UACZ,KAAK;AAAA,UACL;AAAA,QACD;AAAA,MACD,CAAC;AAAA,IACF;AAAA,EACD;AAAA,EA5HD,OAwCkE;AAAA;AAAA;AAAA,EACjE,OAAe,MAAM;AAAA,EAEL,eAAe,kCAAkC;AAAA,EAChD,kBAA+C,CAAC;AAAA;AAAA;AAAA;AAAA;AAAA,EAMhD,UAAU,IAAI,uBAAmC;AAAA,EAEjD,kBAAkB;AAAA,IAClC;AAAA,IACA;AAAA,IACA,KAAK;AAAA,EACN;AAAA,EAEQ;AAAA,EACA;AAAA,EAmEQ,UAAgB;AAC/B,UAAM,QAAQ;AACd,SAAK,QAAQ,oBAAoB,KAAK,YAAY;AAAA,EACnD;AAAA,EAEO,cACN,iBACA,wBACO;AACP,SAAK,QAAQ;AAAA,MACZ,KAAK;AAAA,MACL;AAAA,MACA;AAAA,IACD;AAAA,EACD;AAAA;AAAA;AAAA;AAAA,EAKA,MAAa,mBACZ,cACA,WACA,WACA,aACgB;AAChB,QAAI,KAAK,iBAAiB,cAAc;AAEvC;AAAA,IACD;AAMA,QAAI,SAAS,iCAAiC;AAAA,MAC7C,IAAI,WAAW,SAAS;AAAA,IACzB;AAEA,QAAI,KAAK,YAAY;AACpB,cAAQ,IAAI,2CAA2C;AAAA,QACtD,UAAU,KAAK,OAAO,IAAI,OAAO,MAAM,IAAI,EAAE,IAAI;AAAA,QACjD,mBAAmB,OACjB,IAAI,CAAC,MAAM,EAAE,aAAa,CAAC,EAC3B,KAAK,KAAK;AAAA,QACZ,mBAAmB,YACjB;AAAA,UAAI,CAAC,MACL,IAAI;AAAA,YACH,EAAE;AAAA,YACF,EAAE,kBAAkB,EAAE,YAAY;AAAA,UACnC,EAAE,SAAS;AAAA,QACZ,EACC,KAAK,KAAK;AAAA,MACb,CAAC;AAAA,IACF;AAEA,QAAI,KAAK,YAAY;AACpB,YAAM,UAAU,KAAK,gBACnB,OAAO,CAAC,MAAM,EAAE,aAAa,SAAS,EACtC,IAAI,CAAC,MAAM,EAAE,OAAO,EACpB,IAAI,CAAC,MAAM,gBAAgB,CAAC,CAAC,EAC7B,KAAK,QAAQ;AACf,cAAQ,IAAI,oCAAoC,OAAO;AAAA,IACxD;AAGA,WACC,KAAK,gBAAgB,SAAS,KAC9B,KAAK,gBAAgB,CAAC,EAAE,aAAa,WACpC;AACD,YAAM,SAAS,KAAK,gBAAgB,MAAM;AAC1C,WAAK,QAAQ,cAAc,OAAO,OAAO;AAAA,IAC1C;AAEA,QAAI,KAAK,gBAAgB,SAAS,GAAG;AACpC,UAAI,KAAK,YAAY;AACpB,cAAM,UAAU,KAAK,gBACnB,IAAI,CAAC,MAAM,EAAE,OAAO,EACpB,IAAI,CAAC,MAAM,gBAAgB,CAAC,CAAC,EAC7B,KAAK,QAAQ;AACf,gBAAQ,IAAI,qCAAqC,OAAO;AAAA,MACzD;AAEA,YAAM,+BACL,2BAA2B;AAAA,QAC1B,KAAK,gBAAgB;AAAA,UAAI,CAAC,MACzB,wCAAwC,EAAE,OAAO;AAAA,QAClD;AAAA,MACD;AAID,YAAM,IAAI,IAAI,iCAAiC;AAC/C,iBAAW,KAAK,QAAQ;AACvB,iBAAS,IAAI,EAAE,iBAAiB,KAAK,EAAE,eAAe,KAAK;AAC1D,gBAAM,SAAS,6BAA6B;AAAA,YAC3C,IAAI;AAAA,UACL;AAGA,cAAI,WAAW,QAAW;AACzB,cAAE,IAAI,GAAG,EAAE,cAAc,CAAC,CAAgB;AAAA,UAC3C;AAAA,QACD;AAAA,MACD;AACA,eAAS,EAAE,SAAS;AAGpB,iBAAW,UAAU,KAAK,iBAAiB;AAC1C,mBAAW,gBAAgB,OAAO,SAAS;AAC1C,mBAAS,IAAI,GAAG,IAAI,OAAO,QAAQ,KAAK;AACvC,mBAAO,CAAC,EAAE;AAAA,cACT,aAAa;AAAA,cACb,aAAa;AAAA,YACd;AAAA,UACD;AAAA,QACD;AAAA,MACD;AAAA,IACD;AAEA,UAAM,+BACL,2BAA2B;AAAA,MAC1B,KAAK,gBAAgB;AAAA,QAAI,CAAC,MACzB,wCAAwC,EAAE,OAAO;AAAA,MAClD;AAAA,IACD;AAED,QAAI,CAAC,KAAK,0BAA0B,CAAC,KAAK,eAAe;AACxD,YAAM,EAAE,qBAAqB,QAAQ,IAAI,MAAM,oBAE7C,mBAAmB,iBAAiB;AACtC,WAAK,yBAAyB;AAC9B,WAAK,gBAAgB;AAAA,IACtB;AAGA,eAAW,KAAK,aAAa;AAC5B,UAAI,YACH,EAAE,mBAAmB,IAClB,KAAK,gBACL,KAAK,QAAQ,YAAY,EAAE,kBAAkB,CAAC;AAClD,eAAS,IAAI,GAAG,IAAI,EAAE,YAAY,QAAQ,KAAK;AAC9C,cAAM,QAAQ,EAAE,YAAY,CAAC;AAC7B,YAAI;AACJ,YAAI,OAAO;AACV,kBAAQ,KAAK,uBAAuB,WAAW,KAAK;AACpD,eAAK,QAAQ,YAAY,EAAE,kBAAkB,GAAG,KAAK;AAAA,QACtD,OAAO;AACN,kBAAQ,KAAK,QAAQ,YAAY,EAAE,kBAAkB,CAAC;AAAA,QACvD;AAEA,cAAM,SAAS,6BAA6B;AAAA,UAC3C,EAAE,kBAAkB,IAAI;AAAA,QACzB;AACA,YAAI,WAAW,QAAW;AAGzB,eAAK,6BAA6B;AAAA,YACjC,SAAS;AAAA,YACT;AAAA,UACD;AAAA,QACD;AAEA,YAAI,EAAE,kBAAkB,KAAK,KAAK,OAAO,aAAa,IAAI,GAAG;AAC5D,eAAK,6BAA6B,+BAA+B;AAAA,QAClE;AAEA,oBAAY;AAAA,MACb;AAAA,IACD;AAEA,SAAK,6BAA6B,UAAU,MAAM;AAAA,EACnD;AAAA,EAEA,IAAY,aAAa;AACxB,WAAO,KAAK,gBAAgB,IAAI;AAAA,EACjC;AACD;AAEA,SAAS,wCACR,GACY;AACZ,SAAO,IAAI;AAAA,IACV,EAAE;AAAA,MACD,CAACC,OACA,IAAI;AAAA,QACHA,GAAE,MAAM,kBAAkB;AAAA;AAAA,QAE1BA,GAAE,MAAM,gBAAgBA,GAAE,MAAM,kBAAkB;AAAA,QAClD,SAASA,GAAE,IAAI,EAAE,CAAC,IAAI;AAAA,MACvB;AAAA,IACF;AAAA,EACD;AACD;AAdS;AAgBT,SAAS,gBAAgB,SAAwC;AAChE,SAAO,QACL,IAAI,CAAC,MAAM,MAAM,KAAK,EAAE,KAAK,EAAE,SAAS,IAAI,SAAS,EAAE,IAAI,EAC3D,KAAK,KAAK;AACb;AAJS;",
  "names": ["languageId", "encodedLanguageId", "c"]
}
