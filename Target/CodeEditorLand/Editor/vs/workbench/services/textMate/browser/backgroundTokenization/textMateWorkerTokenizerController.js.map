{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/textMate/browser/backgroundTokenization/textMateWorkerTokenizerController.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { importAMDNodeModule } from '../../../../../amdX.js';\nimport { Disposable } from '../../../../../base/common/lifecycle.js';\nimport { IObservable, autorun, keepObserved } from '../../../../../base/common/observable.js';\nimport { Proxied } from '../../../../../base/common/worker/simpleWorker.js';\nimport { countEOL } from '../../../../../editor/common/core/eolCounter.js';\nimport { LineRange } from '../../../../../editor/common/core/lineRange.js';\nimport { Range } from '../../../../../editor/common/core/range.js';\nimport { IBackgroundTokenizationStore, ILanguageIdCodec } from '../../../../../editor/common/languages.js';\nimport { ITextModel } from '../../../../../editor/common/model.js';\nimport { TokenizationStateStore } from '../../../../../editor/common/model/textModelTokens.js';\nimport { IModelContentChange, IModelContentChangedEvent } from '../../../../../editor/common/textModelEvents.js';\nimport { ContiguousMultilineTokensBuilder } from '../../../../../editor/common/tokens/contiguousMultilineTokensBuilder.js';\nimport { IConfigurationService } from '../../../../../platform/configuration/common/configuration.js';\nimport { observableConfigValue } from '../../../../../platform/observable/common/platformObservableUtils.js';\nimport { ArrayEdit, MonotonousIndexTransformer, SingleArrayEdit } from '../arrayOperation.js';\nimport type { StateDeltas, TextMateTokenizationWorker } from './worker/textMateTokenizationWorker.worker.js';\nimport type { applyStateStackDiff, StateStack } from 'vscode-textmate';\n\nexport class TextMateWorkerTokenizerController extends Disposable {\n\tprivate static _id = 0;\n\n\tpublic readonly controllerId = TextMateWorkerTokenizerController._id++;\n\tprivate readonly _pendingChanges: IModelContentChangedEvent[] = [];\n\n\t/**\n\t * These states will eventually equal the worker states.\n\t * _states[i] stores the state at the end of line number i+1.\n\t */\n\tprivate readonly _states = new TokenizationStateStore<StateStack>();\n\n\tprivate readonly _loggingEnabled = observableConfigValue('editor.experimental.asyncTokenizationLogging', false, this._configurationService);\n\n\tprivate _applyStateStackDiffFn?: typeof applyStateStackDiff;\n\tprivate _initialState?: StateStack;\n\n\tconstructor(\n\t\tprivate readonly _model: ITextModel,\n\t\tprivate readonly _worker: Proxied<TextMateTokenizationWorker>,\n\t\tprivate readonly _languageIdCodec: ILanguageIdCodec,\n\t\tprivate readonly _backgroundTokenizationStore: IBackgroundTokenizationStore,\n\t\tprivate readonly _configurationService: IConfigurationService,\n\t\tprivate readonly _maxTokenizationLineLength: IObservable<number>,\n\t) {\n\t\tsuper();\n\n\t\tthis._register(keepObserved(this._loggingEnabled));\n\n\t\tthis._register(this._model.onDidChangeContent((e) => {\n\t\t\tif (this._shouldLog) {\n\t\t\t\tconsole.log('model change', {\n\t\t\t\t\tfileName: this._model.uri.fsPath.split('\\\\').pop(),\n\t\t\t\t\tchanges: changesToString(e.changes),\n\t\t\t\t});\n\t\t\t}\n\t\t\tthis._worker.$acceptModelChanged(this.controllerId, e);\n\t\t\tthis._pendingChanges.push(e);\n\t\t}));\n\n\t\tthis._register(this._model.onDidChangeLanguage((e) => {\n\t\t\tconst languageId = this._model.getLanguageId();\n\t\t\tconst encodedLanguageId =\n\t\t\t\tthis._languageIdCodec.encodeLanguageId(languageId);\n\t\t\tthis._worker.$acceptModelLanguageChanged(\n\t\t\t\tthis.controllerId,\n\t\t\t\tlanguageId,\n\t\t\t\tencodedLanguageId\n\t\t\t);\n\t\t}));\n\n\t\tconst languageId = this._model.getLanguageId();\n\t\tconst encodedLanguageId = this._languageIdCodec.encodeLanguageId(languageId);\n\t\tthis._worker.$acceptNewModel({\n\t\t\turi: this._model.uri,\n\t\t\tversionId: this._model.getVersionId(),\n\t\t\tlines: this._model.getLinesContent(),\n\t\t\tEOL: this._model.getEOL(),\n\t\t\tlanguageId,\n\t\t\tencodedLanguageId,\n\t\t\tmaxTokenizationLineLength: this._maxTokenizationLineLength.get(),\n\t\t\tcontrollerId: this.controllerId,\n\t\t});\n\n\t\tthis._register(autorun(reader => {\n\t\t\t/** @description update maxTokenizationLineLength */\n\t\t\tconst maxTokenizationLineLength = this._maxTokenizationLineLength.read(reader);\n\t\t\tthis._worker.$acceptMaxTokenizationLineLength(this.controllerId, maxTokenizationLineLength);\n\t\t}));\n\t}\n\n\tpublic override dispose(): void {\n\t\tsuper.dispose();\n\t\tthis._worker.$acceptRemovedModel(this.controllerId);\n\t}\n\n\tpublic requestTokens(startLineNumber: number, endLineNumberExclusive: number): void {\n\t\tthis._worker.$retokenize(this.controllerId, startLineNumber, endLineNumberExclusive);\n\t}\n\n\t/**\n\t * This method is called from the worker through the worker host.\n\t */\n\tpublic async setTokensAndStates(controllerId: number, versionId: number, rawTokens: ArrayBuffer, stateDeltas: StateDeltas[]): Promise<void> {\n\t\tif (this.controllerId !== controllerId) {\n\t\t\t// This event is for an outdated controller (the worker didn't receive the delete/create messages yet), ignore the event.\n\t\t\treturn;\n\t\t}\n\n\t\t// _states state, change{k}, ..., change{versionId}, state delta base & rawTokens, change{j}, ..., change{m}, current renderer state\n\t\t//                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                ^^^^^^^^^^^^^^^^^^^^^^^^^\n\t\t//                | past changes                                                   | future states\n\n\t\tlet tokens = ContiguousMultilineTokensBuilder.deserialize(\n\t\t\tnew Uint8Array(rawTokens)\n\t\t);\n\n\t\tif (this._shouldLog) {\n\t\t\tconsole.log('received background tokenization result', {\n\t\t\t\tfileName: this._model.uri.fsPath.split('\\\\').pop(),\n\t\t\t\tupdatedTokenLines: tokens.map((t) => t.getLineRange()).join(' & '),\n\t\t\t\tupdatedStateLines: stateDeltas.map((s) => new LineRange(s.startLineNumber, s.startLineNumber + s.stateDeltas.length).toString()).join(' & '),\n\t\t\t});\n\t\t}\n\n\t\tif (this._shouldLog) {\n\t\t\tconst changes = this._pendingChanges.filter(c => c.versionId <= versionId).map(c => c.changes).map(c => changesToString(c)).join(' then ');\n\t\t\tconsole.log('Applying changes to local states', changes);\n\t\t}\n\n\t\t// Apply past changes to _states\n\t\twhile (\n\t\t\tthis._pendingChanges.length > 0 &&\n\t\t\tthis._pendingChanges[0].versionId <= versionId\n\t\t) {\n\t\t\tconst change = this._pendingChanges.shift()!;\n\t\t\tthis._states.acceptChanges(change.changes);\n\t\t}\n\n\t\tif (this._pendingChanges.length > 0) {\n\t\t\tif (this._shouldLog) {\n\t\t\t\tconst changes = this._pendingChanges.map(c => c.changes).map(c => changesToString(c)).join(' then ');\n\t\t\t\tconsole.log('Considering non-processed changes', changes);\n\t\t\t}\n\n\t\t\tconst curToFutureTransformerTokens = MonotonousIndexTransformer.fromMany(\n\t\t\t\tthis._pendingChanges.map((c) => fullLineArrayEditFromModelContentChange(c.changes))\n\t\t\t);\n\n\t\t\t// Filter tokens in lines that got changed in the future to prevent flickering\n\t\t\t// These tokens are recomputed anyway.\n\t\t\tconst b = new ContiguousMultilineTokensBuilder();\n\t\t\tfor (const t of tokens) {\n\t\t\t\tfor (let i = t.startLineNumber; i <= t.endLineNumber; i++) {\n\t\t\t\t\tconst result = curToFutureTransformerTokens.transform(i - 1);\n\t\t\t\t\t// If result is undefined, the current line got touched by an edit.\n\t\t\t\t\t// The webworker will send us new tokens for all the new/touched lines after it received the edits.\n\t\t\t\t\tif (result !== undefined) {\n\t\t\t\t\t\tb.add(i, t.getLineTokens(i) as Uint32Array);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\ttokens = b.finalize();\n\n\t\t\t// Apply future changes to tokens\n\t\t\tfor (const change of this._pendingChanges) {\n\t\t\t\tfor (const innerChanges of change.changes) {\n\t\t\t\t\tfor (let j = 0; j < tokens.length; j++) {\n\t\t\t\t\t\ttokens[j].applyEdit(innerChanges.range, innerChanges.text);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tconst curToFutureTransformerStates = MonotonousIndexTransformer.fromMany(\n\t\t\tthis._pendingChanges.map((c) => fullLineArrayEditFromModelContentChange(c.changes))\n\t\t);\n\n\t\tif (!this._applyStateStackDiffFn || !this._initialState) {\n\t\t\tconst { applyStateStackDiff, INITIAL } = await importAMDNodeModule<typeof import('vscode-textmate')>('vscode-textmate', 'release/main.js');\n\t\t\tthis._applyStateStackDiffFn = applyStateStackDiff;\n\t\t\tthis._initialState = INITIAL;\n\t\t}\n\n\n\t\t// Apply state deltas to _states and _backgroundTokenizationStore\n\t\tfor (const d of stateDeltas) {\n\t\t\tlet prevState = d.startLineNumber <= 1 ? this._initialState : this._states.getEndState(d.startLineNumber - 1);\n\t\t\tfor (let i = 0; i < d.stateDeltas.length; i++) {\n\t\t\t\tconst delta = d.stateDeltas[i];\n\t\t\t\tlet state: StateStack;\n\t\t\t\tif (delta) {\n\t\t\t\t\tstate = this._applyStateStackDiffFn(prevState, delta)!;\n\t\t\t\t\tthis._states.setEndState(d.startLineNumber + i, state);\n\t\t\t\t} else {\n\t\t\t\t\tstate = this._states.getEndState(d.startLineNumber + i)!;\n\t\t\t\t}\n\n\t\t\t\tconst offset = curToFutureTransformerStates.transform(d.startLineNumber + i - 1);\n\t\t\t\tif (offset !== undefined) {\n\t\t\t\t\t// Only set the state if there is no future change in this line,\n\t\t\t\t\t// as this might make consumers believe that the state/tokens are accurate\n\t\t\t\t\tthis._backgroundTokenizationStore.setEndState(offset + 1, state);\n\t\t\t\t}\n\n\t\t\t\tif (d.startLineNumber + i >= this._model.getLineCount() - 1) {\n\t\t\t\t\tthis._backgroundTokenizationStore.backgroundTokenizationFinished();\n\t\t\t\t}\n\n\t\t\t\tprevState = state;\n\t\t\t}\n\t\t}\n\t\t// First set states, then tokens, so that events fired from set tokens don't read invalid states\n\t\tthis._backgroundTokenizationStore.setTokens(tokens);\n\t}\n\n\tprivate get _shouldLog() { return this._loggingEnabled.get(); }\n\n}\n\nfunction fullLineArrayEditFromModelContentChange(c: IModelContentChange[]): ArrayEdit {\n\treturn new ArrayEdit(\n\t\tc.map(\n\t\t\t(c) =>\n\t\t\t\tnew SingleArrayEdit(\n\t\t\t\t\tc.range.startLineNumber - 1,\n\t\t\t\t\t// Expand the edit range to include the entire line\n\t\t\t\t\tc.range.endLineNumber - c.range.startLineNumber + 1,\n\t\t\t\t\tcountEOL(c.text)[0] + 1\n\t\t\t\t)\n\t\t)\n\t);\n}\n\nfunction changesToString(changes: IModelContentChange[]): string {\n\treturn changes.map(c => Range.lift(c.range).toString() + ' => ' + c.text).join(' & ');\n}\n\n"],
  "mappings": "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",
  "names": ["languageId", "encodedLanguageId", "c"]
}
