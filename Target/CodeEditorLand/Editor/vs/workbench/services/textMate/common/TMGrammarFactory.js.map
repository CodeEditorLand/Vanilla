{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/textMate/common/TMGrammarFactory.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Disposable } from '../../../../base/common/lifecycle.js';\nimport { URI } from '../../../../base/common/uri.js';\nimport { IValidEmbeddedLanguagesMap, IValidGrammarDefinition, TMScopeRegistry } from './TMScopeRegistry.js';\nimport type { IGrammar, IOnigLib, IRawTheme, Registry, StateStack } from 'vscode-textmate';\n\ninterface ITMGrammarFactoryHost {\n\tlogTrace(msg: string): void;\n\tlogError(msg: string, err: any): void;\n\treadFile(resource: URI): Promise<string>;\n}\n\nexport interface ICreateGrammarResult {\n\tlanguageId: string;\n\tgrammar: IGrammar | null;\n\tinitialState: StateStack;\n\tcontainsEmbeddedLanguages: boolean;\n\tsourceExtensionId?: string;\n}\n\nexport const missingTMGrammarErrorMessage = 'No TM Grammar registered for this language.';\n\nexport class TMGrammarFactory extends Disposable {\n\n\tprivate readonly _host: ITMGrammarFactoryHost;\n\tprivate readonly _initialState: StateStack;\n\tprivate readonly _scopeRegistry: TMScopeRegistry;\n\tprivate readonly _injections: { [scopeName: string]: string[] };\n\tprivate readonly _injectedEmbeddedLanguages: { [scopeName: string]: IValidEmbeddedLanguagesMap[] };\n\tprivate readonly _languageToScope: Map<string, string>;\n\tprivate readonly _grammarRegistry: Registry;\n\n\tconstructor(host: ITMGrammarFactoryHost, grammarDefinitions: IValidGrammarDefinition[], vscodeTextmate: typeof import('vscode-textmate'), onigLib: Promise<IOnigLib>) {\n\t\tsuper();\n\t\tthis._host = host;\n\t\tthis._initialState = vscodeTextmate.INITIAL;\n\t\tthis._scopeRegistry = new TMScopeRegistry();\n\t\tthis._injections = {};\n\t\tthis._injectedEmbeddedLanguages = {};\n\t\tthis._languageToScope = new Map<string, string>();\n\t\tthis._grammarRegistry = this._register(new vscodeTextmate.Registry({\n\t\t\tonigLib: onigLib,\n\t\t\tloadGrammar: async (scopeName: string) => {\n\t\t\t\tconst grammarDefinition = this._scopeRegistry.getGrammarDefinition(scopeName);\n\t\t\t\tif (!grammarDefinition) {\n\t\t\t\t\tthis._host.logTrace(`No grammar found for scope ${scopeName}`);\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t\tconst location = grammarDefinition.location;\n\t\t\t\ttry {\n\t\t\t\t\tconst content = await this._host.readFile(location);\n\t\t\t\t\treturn vscodeTextmate.parseRawGrammar(content, location.path);\n\t\t\t\t} catch (e) {\n\t\t\t\t\tthis._host.logError(`Unable to load and parse grammar for scope ${scopeName} from ${location}`, e);\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t},\n\t\t\tgetInjections: (scopeName: string) => {\n\t\t\t\tconst scopeParts = scopeName.split('.');\n\t\t\t\tlet injections: string[] = [];\n\t\t\t\tfor (let i = 1; i <= scopeParts.length; i++) {\n\t\t\t\t\tconst subScopeName = scopeParts.slice(0, i).join('.');\n\t\t\t\t\tinjections = [...injections, ...(this._injections[subScopeName] || [])];\n\t\t\t\t}\n\t\t\t\treturn injections;\n\t\t\t}\n\t\t}));\n\n\t\tfor (const validGrammar of grammarDefinitions) {\n\t\t\tthis._scopeRegistry.register(validGrammar);\n\n\t\t\tif (validGrammar.injectTo) {\n\t\t\t\tfor (const injectScope of validGrammar.injectTo) {\n\t\t\t\t\tlet injections = this._injections[injectScope];\n\t\t\t\t\tif (!injections) {\n\t\t\t\t\t\tthis._injections[injectScope] = injections = [];\n\t\t\t\t\t}\n\t\t\t\t\tinjections.push(validGrammar.scopeName);\n\t\t\t\t}\n\n\t\t\t\tif (validGrammar.embeddedLanguages) {\n\t\t\t\t\tfor (const injectScope of validGrammar.injectTo) {\n\t\t\t\t\t\tlet injectedEmbeddedLanguages = this._injectedEmbeddedLanguages[injectScope];\n\t\t\t\t\t\tif (!injectedEmbeddedLanguages) {\n\t\t\t\t\t\t\tthis._injectedEmbeddedLanguages[injectScope] = injectedEmbeddedLanguages = [];\n\t\t\t\t\t\t}\n\t\t\t\t\t\tinjectedEmbeddedLanguages.push(validGrammar.embeddedLanguages);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (validGrammar.language) {\n\t\t\t\tthis._languageToScope.set(validGrammar.language, validGrammar.scopeName);\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic has(languageId: string): boolean {\n\t\treturn this._languageToScope.has(languageId);\n\t}\n\n\tpublic setTheme(theme: IRawTheme, colorMap: string[]): void {\n\t\tthis._grammarRegistry.setTheme(theme, colorMap);\n\t}\n\n\tpublic getColorMap(): string[] {\n\t\treturn this._grammarRegistry.getColorMap();\n\t}\n\n\tpublic async createGrammar(languageId: string, encodedLanguageId: number): Promise<ICreateGrammarResult> {\n\t\tconst scopeName = this._languageToScope.get(languageId);\n\t\tif (typeof scopeName !== 'string') {\n\t\t\t// No TM grammar defined\n\t\t\tthrow new Error(missingTMGrammarErrorMessage);\n\t\t}\n\n\t\tconst grammarDefinition = this._scopeRegistry.getGrammarDefinition(scopeName);\n\t\tif (!grammarDefinition) {\n\t\t\t// No TM grammar defined\n\t\t\tthrow new Error(missingTMGrammarErrorMessage);\n\t\t}\n\n\t\tconst embeddedLanguages = grammarDefinition.embeddedLanguages;\n\t\tif (this._injectedEmbeddedLanguages[scopeName]) {\n\t\t\tconst injectedEmbeddedLanguages = this._injectedEmbeddedLanguages[scopeName];\n\t\t\tfor (const injected of injectedEmbeddedLanguages) {\n\t\t\t\tfor (const scope of Object.keys(injected)) {\n\t\t\t\t\tembeddedLanguages[scope] = injected[scope];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tconst containsEmbeddedLanguages = (Object.keys(embeddedLanguages).length > 0);\n\n\t\tlet grammar: IGrammar | null;\n\n\t\ttry {\n\t\t\tgrammar = await this._grammarRegistry.loadGrammarWithConfiguration(\n\t\t\t\tscopeName,\n\t\t\t\tencodedLanguageId,\n\t\t\t\t{\n\t\t\t\t\tembeddedLanguages,\n\t\t\t\t\ttokenTypes: <any>grammarDefinition.tokenTypes,\n\t\t\t\t\tbalancedBracketSelectors: grammarDefinition.balancedBracketSelectors,\n\t\t\t\t\tunbalancedBracketSelectors: grammarDefinition.unbalancedBracketSelectors,\n\t\t\t\t}\n\t\t\t);\n\t\t} catch (err) {\n\t\t\tif (err.message && err.message.startsWith('No grammar provided for')) {\n\t\t\t\t// No TM grammar defined\n\t\t\t\tthrow new Error(missingTMGrammarErrorMessage);\n\t\t\t}\n\t\t\tthrow err;\n\t\t}\n\n\t\treturn {\n\t\t\tlanguageId: languageId,\n\t\t\tgrammar: grammar,\n\t\t\tinitialState: this._initialState,\n\t\t\tcontainsEmbeddedLanguages: containsEmbeddedLanguages,\n\t\t\tsourceExtensionId: grammarDefinition.sourceExtensionId,\n\t\t};\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
