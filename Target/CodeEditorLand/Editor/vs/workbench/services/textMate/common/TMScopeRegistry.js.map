{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/textMate/common/TMScopeRegistry.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as resources from \"../../../../base/common/resources.js\";\nimport type { URI } from \"../../../../base/common/uri.js\";\nimport type {\n\tLanguageId,\n\tStandardTokenType,\n} from \"../../../../editor/common/encodedTokenAttributes.js\";\n\nexport interface IValidGrammarDefinition {\n\tlocation: URI;\n\tlanguage?: string;\n\tscopeName: string;\n\tembeddedLanguages: IValidEmbeddedLanguagesMap;\n\ttokenTypes: IValidTokenTypeMap;\n\tinjectTo?: string[];\n\tbalancedBracketSelectors: string[];\n\tunbalancedBracketSelectors: string[];\n\tsourceExtensionId?: string;\n}\n\nexport interface IValidTokenTypeMap {\n\t[selector: string]: StandardTokenType;\n}\n\nexport interface IValidEmbeddedLanguagesMap {\n\t[scopeName: string]: LanguageId;\n}\n\nexport class TMScopeRegistry {\n\tprivate _scopeNameToLanguageRegistration: {\n\t\t[scopeName: string]: IValidGrammarDefinition;\n\t};\n\n\tconstructor() {\n\t\tthis._scopeNameToLanguageRegistration = Object.create(null);\n\t}\n\n\tpublic reset(): void {\n\t\tthis._scopeNameToLanguageRegistration = Object.create(null);\n\t}\n\n\tpublic register(def: IValidGrammarDefinition): void {\n\t\tif (this._scopeNameToLanguageRegistration[def.scopeName]) {\n\t\t\tconst existingRegistration =\n\t\t\t\tthis._scopeNameToLanguageRegistration[def.scopeName];\n\t\t\tif (\n\t\t\t\t!resources.isEqual(existingRegistration.location, def.location)\n\t\t\t) {\n\t\t\t\tconsole.warn(\n\t\t\t\t\t`Overwriting grammar scope name to file mapping for scope ${def.scopeName}.\\n` +\n\t\t\t\t\t\t`Old grammar file: ${existingRegistration.location.toString()}.\\n` +\n\t\t\t\t\t\t`New grammar file: ${def.location.toString()}`,\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t\tthis._scopeNameToLanguageRegistration[def.scopeName] = def;\n\t}\n\n\tpublic getGrammarDefinition(\n\t\tscopeName: string,\n\t): IValidGrammarDefinition | null {\n\t\treturn this._scopeNameToLanguageRegistration[scopeName] || null;\n\t}\n}\n"],
  "mappings": ";;AAKA,YAAY,eAAe;AA2BpB,MAAM,gBAAgB;AAAA,EAhC7B,OAgC6B;AAAA;AAAA;AAAA,EACpB;AAAA,EAIR,cAAc;AACb,SAAK,mCAAmC,uBAAO,OAAO,IAAI;AAAA,EAC3D;AAAA,EAEO,QAAc;AACpB,SAAK,mCAAmC,uBAAO,OAAO,IAAI;AAAA,EAC3D;AAAA,EAEO,SAAS,KAAoC;AACnD,QAAI,KAAK,iCAAiC,IAAI,SAAS,GAAG;AACzD,YAAM,uBACL,KAAK,iCAAiC,IAAI,SAAS;AACpD,UACC,CAAC,UAAU,QAAQ,qBAAqB,UAAU,IAAI,QAAQ,GAC7D;AACD,gBAAQ;AAAA,UACP,4DAA4D,IAAI,SAAS;AAAA,oBACnD,qBAAqB,SAAS,SAAS,CAAC;AAAA,oBACxC,IAAI,SAAS,SAAS,CAAC;AAAA,QAC9C;AAAA,MACD;AAAA,IACD;AACA,SAAK,iCAAiC,IAAI,SAAS,IAAI;AAAA,EACxD;AAAA,EAEO,qBACN,WACiC;AACjC,WAAO,KAAK,iCAAiC,SAAS,KAAK;AAAA,EAC5D;AACD;",
  "names": []
}
