{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/textMate/common/TMGrammars.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as nls from '../../../../nls.js';\nimport { ExtensionsRegistry, IExtensionPoint } from '../../extensions/common/extensionsRegistry.js';\nimport { languagesExtPoint } from '../../language/common/languageService.js';\n\nexport interface IEmbeddedLanguagesMap {\n\t[scopeName: string]: string;\n}\n\nexport interface TokenTypesContribution {\n\t[scopeName: string]: string;\n}\n\nexport interface ITMSyntaxExtensionPoint {\n\tlanguage?: string; // undefined if the grammar is only included by other grammars\n\tscopeName: string;\n\tpath: string;\n\tembeddedLanguages: IEmbeddedLanguagesMap;\n\ttokenTypes: TokenTypesContribution;\n\tinjectTo: string[];\n\tbalancedBracketScopes: string[];\n\tunbalancedBracketScopes: string[];\n}\n\nexport const grammarsExtPoint: IExtensionPoint<ITMSyntaxExtensionPoint[]> = ExtensionsRegistry.registerExtensionPoint<ITMSyntaxExtensionPoint[]>({\n\textensionPoint: 'grammars',\n\tdeps: [languagesExtPoint],\n\tjsonSchema: {\n\t\tdescription: nls.localize('vscode.extension.contributes.grammars', 'Contributes textmate tokenizers.'),\n\t\ttype: 'array',\n\t\tdefaultSnippets: [{ body: [{ language: '${1:id}', scopeName: 'source.${2:id}', path: './syntaxes/${3:id}.tmLanguage.' }] }],\n\t\titems: {\n\t\t\ttype: 'object',\n\t\t\tdefaultSnippets: [{ body: { language: '${1:id}', scopeName: 'source.${2:id}', path: './syntaxes/${3:id}.tmLanguage.' } }],\n\t\t\tproperties: {\n\t\t\t\tlanguage: {\n\t\t\t\t\tdescription: nls.localize('vscode.extension.contributes.grammars.language', 'Language identifier for which this syntax is contributed to.'),\n\t\t\t\t\ttype: 'string'\n\t\t\t\t},\n\t\t\t\tscopeName: {\n\t\t\t\t\tdescription: nls.localize('vscode.extension.contributes.grammars.scopeName', 'Textmate scope name used by the tmLanguage file.'),\n\t\t\t\t\ttype: 'string'\n\t\t\t\t},\n\t\t\t\tpath: {\n\t\t\t\t\tdescription: nls.localize('vscode.extension.contributes.grammars.path', 'Path of the tmLanguage file. The path is relative to the extension folder and typically starts with \\'./syntaxes/\\'.'),\n\t\t\t\t\ttype: 'string'\n\t\t\t\t},\n\t\t\t\tembeddedLanguages: {\n\t\t\t\t\tdescription: nls.localize('vscode.extension.contributes.grammars.embeddedLanguages', 'A map of scope name to language id if this grammar contains embedded languages.'),\n\t\t\t\t\ttype: 'object'\n\t\t\t\t},\n\t\t\t\ttokenTypes: {\n\t\t\t\t\tdescription: nls.localize('vscode.extension.contributes.grammars.tokenTypes', 'A map of scope name to token types.'),\n\t\t\t\t\ttype: 'object',\n\t\t\t\t\tadditionalProperties: {\n\t\t\t\t\t\tenum: ['string', 'comment', 'other']\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tinjectTo: {\n\t\t\t\t\tdescription: nls.localize('vscode.extension.contributes.grammars.injectTo', 'List of language scope names to which this grammar is injected to.'),\n\t\t\t\t\ttype: 'array',\n\t\t\t\t\titems: {\n\t\t\t\t\t\ttype: 'string'\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tbalancedBracketScopes: {\n\t\t\t\t\tdescription: nls.localize('vscode.extension.contributes.grammars.balancedBracketScopes', 'Defines which scope names contain balanced brackets.'),\n\t\t\t\t\ttype: 'array',\n\t\t\t\t\titems: {\n\t\t\t\t\t\ttype: 'string'\n\t\t\t\t\t},\n\t\t\t\t\tdefault: ['*'],\n\t\t\t\t},\n\t\t\t\tunbalancedBracketScopes: {\n\t\t\t\t\tdescription: nls.localize('vscode.extension.contributes.grammars.unbalancedBracketScopes', 'Defines which scope names do not contain balanced brackets.'),\n\t\t\t\t\ttype: 'array',\n\t\t\t\t\titems: {\n\t\t\t\t\t\ttype: 'string'\n\t\t\t\t\t},\n\t\t\t\t\tdefault: [],\n\t\t\t\t},\n\t\t\t},\n\t\t\trequired: ['scopeName', 'path']\n\t\t}\n\t}\n});\n"],
  "mappings": "AAKA,YAAY,SAAS;AACrB,SAAS,oBAAoB,uBAAuB;AACpD,SAAS,yBAAyB;AAqB3B,MAAM,mBAA+D,mBAAmB,uBAAkD;AAAA,EAChJ,gBAAgB;AAAA,EAChB,MAAM,CAAC,iBAAiB;AAAA,EACxB,YAAY;AAAA,IACX,aAAa,IAAI,SAAS,yCAAyC,kCAAkC;AAAA,IACrG,MAAM;AAAA,IACN,iBAAiB,CAAC,EAAE,MAAM,CAAC,EAAE,UAAU,WAAW,WAAW,kBAAkB,MAAM,iCAAiC,CAAC,EAAE,CAAC;AAAA,IAC1H,OAAO;AAAA,MACN,MAAM;AAAA,MACN,iBAAiB,CAAC,EAAE,MAAM,EAAE,UAAU,WAAW,WAAW,kBAAkB,MAAM,iCAAiC,EAAE,CAAC;AAAA,MACxH,YAAY;AAAA,QACX,UAAU;AAAA,UACT,aAAa,IAAI,SAAS,kDAAkD,8DAA8D;AAAA,UAC1I,MAAM;AAAA,QACP;AAAA,QACA,WAAW;AAAA,UACV,aAAa,IAAI,SAAS,mDAAmD,kDAAkD;AAAA,UAC/H,MAAM;AAAA,QACP;AAAA,QACA,MAAM;AAAA,UACL,aAAa,IAAI,SAAS,8CAA8C,oHAAsH;AAAA,UAC9L,MAAM;AAAA,QACP;AAAA,QACA,mBAAmB;AAAA,UAClB,aAAa,IAAI,SAAS,2DAA2D,iFAAiF;AAAA,UACtK,MAAM;AAAA,QACP;AAAA,QACA,YAAY;AAAA,UACX,aAAa,IAAI,SAAS,oDAAoD,qCAAqC;AAAA,UACnH,MAAM;AAAA,UACN,sBAAsB;AAAA,YACrB,MAAM,CAAC,UAAU,WAAW,OAAO;AAAA,UACpC;AAAA,QACD;AAAA,QACA,UAAU;AAAA,UACT,aAAa,IAAI,SAAS,kDAAkD,oEAAoE;AAAA,UAChJ,MAAM;AAAA,UACN,OAAO;AAAA,YACN,MAAM;AAAA,UACP;AAAA,QACD;AAAA,QACA,uBAAuB;AAAA,UACtB,aAAa,IAAI,SAAS,+DAA+D,sDAAsD;AAAA,UAC/I,MAAM;AAAA,UACN,OAAO;AAAA,YACN,MAAM;AAAA,UACP;AAAA,UACA,SAAS,CAAC,GAAG;AAAA,QACd;AAAA,QACA,yBAAyB;AAAA,UACxB,aAAa,IAAI,SAAS,iEAAiE,6DAA6D;AAAA,UACxJ,MAAM;AAAA,UACN,OAAO;AAAA,YACN,MAAM;AAAA,UACP;AAAA,UACA,SAAS,CAAC;AAAA,QACX;AAAA,MACD;AAAA,MACA,UAAU,CAAC,aAAa,MAAM;AAAA,IAC/B;AAAA,EACD;AACD,CAAC;",
  "names": []
}
