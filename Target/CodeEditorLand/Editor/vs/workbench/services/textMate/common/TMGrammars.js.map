{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/textMate/common/TMGrammars.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as nls from \"../../../../nls.js\";\nimport {\n\tExtensionsRegistry,\n\ttype IExtensionPoint,\n} from \"../../extensions/common/extensionsRegistry.js\";\nimport { languagesExtPoint } from \"../../language/common/languageService.js\";\n\nexport interface IEmbeddedLanguagesMap {\n\t[scopeName: string]: string;\n}\n\nexport interface TokenTypesContribution {\n\t[scopeName: string]: string;\n}\n\nexport interface ITMSyntaxExtensionPoint {\n\tlanguage?: string; // undefined if the grammar is only included by other grammars\n\tscopeName: string;\n\tpath: string;\n\tembeddedLanguages: IEmbeddedLanguagesMap;\n\ttokenTypes: TokenTypesContribution;\n\tinjectTo: string[];\n\tbalancedBracketScopes: string[];\n\tunbalancedBracketScopes: string[];\n}\n\nexport const grammarsExtPoint: IExtensionPoint<ITMSyntaxExtensionPoint[]> =\n\tExtensionsRegistry.registerExtensionPoint<ITMSyntaxExtensionPoint[]>({\n\t\textensionPoint: \"grammars\",\n\t\tdeps: [languagesExtPoint],\n\t\tjsonSchema: {\n\t\t\tdescription: nls.localize(\n\t\t\t\t\"vscode.extension.contributes.grammars\",\n\t\t\t\t\"Contributes textmate tokenizers.\",\n\t\t\t),\n\t\t\ttype: \"array\",\n\t\t\tdefaultSnippets: [\n\t\t\t\t{\n\t\t\t\t\tbody: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlanguage: \"${1:id}\",\n\t\t\t\t\t\t\tscopeName: \"source.${2:id}\",\n\t\t\t\t\t\t\tpath: \"./syntaxes/${3:id}.tmLanguage.\",\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t],\n\t\t\titems: {\n\t\t\t\ttype: \"object\",\n\t\t\t\tdefaultSnippets: [\n\t\t\t\t\t{\n\t\t\t\t\t\tbody: {\n\t\t\t\t\t\t\tlanguage: \"${1:id}\",\n\t\t\t\t\t\t\tscopeName: \"source.${2:id}\",\n\t\t\t\t\t\t\tpath: \"./syntaxes/${3:id}.tmLanguage.\",\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\tproperties: {\n\t\t\t\t\tlanguage: {\n\t\t\t\t\t\tdescription: nls.localize(\n\t\t\t\t\t\t\t\"vscode.extension.contributes.grammars.language\",\n\t\t\t\t\t\t\t\"Language identifier for which this syntax is contributed to.\",\n\t\t\t\t\t\t),\n\t\t\t\t\t\ttype: \"string\",\n\t\t\t\t\t},\n\t\t\t\t\tscopeName: {\n\t\t\t\t\t\tdescription: nls.localize(\n\t\t\t\t\t\t\t\"vscode.extension.contributes.grammars.scopeName\",\n\t\t\t\t\t\t\t\"Textmate scope name used by the tmLanguage file.\",\n\t\t\t\t\t\t),\n\t\t\t\t\t\ttype: \"string\",\n\t\t\t\t\t},\n\t\t\t\t\tpath: {\n\t\t\t\t\t\tdescription: nls.localize(\n\t\t\t\t\t\t\t\"vscode.extension.contributes.grammars.path\",\n\t\t\t\t\t\t\t\"Path of the tmLanguage file. The path is relative to the extension folder and typically starts with './syntaxes/'.\",\n\t\t\t\t\t\t),\n\t\t\t\t\t\ttype: \"string\",\n\t\t\t\t\t},\n\t\t\t\t\tembeddedLanguages: {\n\t\t\t\t\t\tdescription: nls.localize(\n\t\t\t\t\t\t\t\"vscode.extension.contributes.grammars.embeddedLanguages\",\n\t\t\t\t\t\t\t\"A map of scope name to language id if this grammar contains embedded languages.\",\n\t\t\t\t\t\t),\n\t\t\t\t\t\ttype: \"object\",\n\t\t\t\t\t},\n\t\t\t\t\ttokenTypes: {\n\t\t\t\t\t\tdescription: nls.localize(\n\t\t\t\t\t\t\t\"vscode.extension.contributes.grammars.tokenTypes\",\n\t\t\t\t\t\t\t\"A map of scope name to token types.\",\n\t\t\t\t\t\t),\n\t\t\t\t\t\ttype: \"object\",\n\t\t\t\t\t\tadditionalProperties: {\n\t\t\t\t\t\t\tenum: [\"string\", \"comment\", \"other\"],\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\tinjectTo: {\n\t\t\t\t\t\tdescription: nls.localize(\n\t\t\t\t\t\t\t\"vscode.extension.contributes.grammars.injectTo\",\n\t\t\t\t\t\t\t\"List of language scope names to which this grammar is injected to.\",\n\t\t\t\t\t\t),\n\t\t\t\t\t\ttype: \"array\",\n\t\t\t\t\t\titems: {\n\t\t\t\t\t\t\ttype: \"string\",\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\tbalancedBracketScopes: {\n\t\t\t\t\t\tdescription: nls.localize(\n\t\t\t\t\t\t\t\"vscode.extension.contributes.grammars.balancedBracketScopes\",\n\t\t\t\t\t\t\t\"Defines which scope names contain balanced brackets.\",\n\t\t\t\t\t\t),\n\t\t\t\t\t\ttype: \"array\",\n\t\t\t\t\t\titems: {\n\t\t\t\t\t\t\ttype: \"string\",\n\t\t\t\t\t\t},\n\t\t\t\t\t\tdefault: [\"*\"],\n\t\t\t\t\t},\n\t\t\t\t\tunbalancedBracketScopes: {\n\t\t\t\t\t\tdescription: nls.localize(\n\t\t\t\t\t\t\t\"vscode.extension.contributes.grammars.unbalancedBracketScopes\",\n\t\t\t\t\t\t\t\"Defines which scope names do not contain balanced brackets.\",\n\t\t\t\t\t\t),\n\t\t\t\t\t\ttype: \"array\",\n\t\t\t\t\t\titems: {\n\t\t\t\t\t\t\ttype: \"string\",\n\t\t\t\t\t\t},\n\t\t\t\t\t\tdefault: [],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\trequired: [\"scopeName\", \"path\"],\n\t\t\t},\n\t\t},\n\t});\n"],
  "mappings": "AAKA,YAAY,SAAS;AACrB;AAAA,EACC;AAAA,OAEM;AACP,SAAS,yBAAyB;AAqB3B,MAAM,mBACZ,mBAAmB,uBAAkD;AAAA,EACpE,gBAAgB;AAAA,EAChB,MAAM,CAAC,iBAAiB;AAAA,EACxB,YAAY;AAAA,IACX,aAAa,IAAI;AAAA,MAChB;AAAA,MACA;AAAA,IACD;AAAA,IACA,MAAM;AAAA,IACN,iBAAiB;AAAA,MAChB;AAAA,QACC,MAAM;AAAA,UACL;AAAA,YACC,UAAU;AAAA,YACV,WAAW;AAAA,YACX,MAAM;AAAA,UACP;AAAA,QACD;AAAA,MACD;AAAA,IACD;AAAA,IACA,OAAO;AAAA,MACN,MAAM;AAAA,MACN,iBAAiB;AAAA,QAChB;AAAA,UACC,MAAM;AAAA,YACL,UAAU;AAAA,YACV,WAAW;AAAA,YACX,MAAM;AAAA,UACP;AAAA,QACD;AAAA,MACD;AAAA,MACA,YAAY;AAAA,QACX,UAAU;AAAA,UACT,aAAa,IAAI;AAAA,YAChB;AAAA,YACA;AAAA,UACD;AAAA,UACA,MAAM;AAAA,QACP;AAAA,QACA,WAAW;AAAA,UACV,aAAa,IAAI;AAAA,YAChB;AAAA,YACA;AAAA,UACD;AAAA,UACA,MAAM;AAAA,QACP;AAAA,QACA,MAAM;AAAA,UACL,aAAa,IAAI;AAAA,YAChB;AAAA,YACA;AAAA,UACD;AAAA,UACA,MAAM;AAAA,QACP;AAAA,QACA,mBAAmB;AAAA,UAClB,aAAa,IAAI;AAAA,YAChB;AAAA,YACA;AAAA,UACD;AAAA,UACA,MAAM;AAAA,QACP;AAAA,QACA,YAAY;AAAA,UACX,aAAa,IAAI;AAAA,YAChB;AAAA,YACA;AAAA,UACD;AAAA,UACA,MAAM;AAAA,UACN,sBAAsB;AAAA,YACrB,MAAM,CAAC,UAAU,WAAW,OAAO;AAAA,UACpC;AAAA,QACD;AAAA,QACA,UAAU;AAAA,UACT,aAAa,IAAI;AAAA,YAChB;AAAA,YACA;AAAA,UACD;AAAA,UACA,MAAM;AAAA,UACN,OAAO;AAAA,YACN,MAAM;AAAA,UACP;AAAA,QACD;AAAA,QACA,uBAAuB;AAAA,UACtB,aAAa,IAAI;AAAA,YAChB;AAAA,YACA;AAAA,UACD;AAAA,UACA,MAAM;AAAA,UACN,OAAO;AAAA,YACN,MAAM;AAAA,UACP;AAAA,UACA,SAAS,CAAC,GAAG;AAAA,QACd;AAAA,QACA,yBAAyB;AAAA,UACxB,aAAa,IAAI;AAAA,YAChB;AAAA,YACA;AAAA,UACD;AAAA,UACA,MAAM;AAAA,UACN,OAAO;AAAA,YACN,MAAM;AAAA,UACP;AAAA,UACA,SAAS,CAAC;AAAA,QACX;AAAA,MACD;AAAA,MACA,UAAU,CAAC,aAAa,MAAM;AAAA,IAC/B;AAAA,EACD;AACD,CAAC;",
  "names": []
}
