{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/textMate/test/browser/arrayOperation.test.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport assert from 'assert';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from '../../../../../base/test/common/utils.js';\nimport { ArrayEdit, MonotonousIndexTransformer, SingleArrayEdit } from '../../browser/arrayOperation.js';\n\nsuite('array operation', () => {\n\tfunction seq(start: number, end: number) {\n\t\tconst result: number[] = [];\n\t\tfor (let i = start; i < end; i++) {\n\t\t\tresult.push(i);\n\t\t}\n\t\treturn result;\n\t}\n\n\ttest('simple', () => {\n\t\tconst edit = new ArrayEdit([\n\t\t\tnew SingleArrayEdit(4, 3, 2),\n\t\t\tnew SingleArrayEdit(8, 0, 2),\n\t\t\tnew SingleArrayEdit(9, 2, 0),\n\t\t]);\n\n\t\tconst arr = seq(0, 15).map(x => `item${x}`);\n\t\tconst newArr = arr.slice();\n\n\t\tedit.applyToArray(newArr);\n\t\tassert.deepStrictEqual(newArr, [\n\t\t\t'item0',\n\t\t\t'item1',\n\t\t\t'item2',\n\t\t\t'item3',\n\t\t\tundefined,\n\t\t\tundefined,\n\t\t\t'item7',\n\t\t\tundefined,\n\t\t\tundefined,\n\t\t\t'item8',\n\t\t\t'item11',\n\t\t\t'item12',\n\t\t\t'item13',\n\t\t\t'item14',\n\t\t]);\n\n\t\tconst transformer = new MonotonousIndexTransformer(edit);\n\t\tassert.deepStrictEqual(\n\t\t\tseq(0, 15).map((x) => {\n\t\t\t\tconst t = transformer.transform(x);\n\t\t\t\tlet r = `arr[${x}]: ${arr[x]} -> `;\n\t\t\t\tif (t !== undefined) {\n\t\t\t\t\tr += `newArr[${t}]: ${newArr[t]}`;\n\t\t\t\t} else {\n\t\t\t\t\tr += 'undefined';\n\t\t\t\t}\n\t\t\t\treturn r;\n\t\t\t}),\n\t\t\t[\n\t\t\t\t'arr[0]: item0 -> newArr[0]: item0',\n\t\t\t\t'arr[1]: item1 -> newArr[1]: item1',\n\t\t\t\t'arr[2]: item2 -> newArr[2]: item2',\n\t\t\t\t'arr[3]: item3 -> newArr[3]: item3',\n\t\t\t\t'arr[4]: item4 -> undefined',\n\t\t\t\t'arr[5]: item5 -> undefined',\n\t\t\t\t'arr[6]: item6 -> undefined',\n\t\t\t\t'arr[7]: item7 -> newArr[6]: item7',\n\t\t\t\t'arr[8]: item8 -> newArr[9]: item8',\n\t\t\t\t'arr[9]: item9 -> undefined',\n\t\t\t\t'arr[10]: item10 -> undefined',\n\t\t\t\t'arr[11]: item11 -> newArr[10]: item11',\n\t\t\t\t'arr[12]: item12 -> newArr[11]: item12',\n\t\t\t\t'arr[13]: item13 -> newArr[12]: item13',\n\t\t\t\t'arr[14]: item14 -> newArr[13]: item14',\n\t\t\t]\n\t\t);\n\t});\n\n\tensureNoDisposablesAreLeakedInTestSuite();\n});\n"],
  "mappings": ";;AAKA,OAAO,YAAY;AACnB,SAAS,+CAA+C;AACxD,SAAS,WAAW,4BAA4B,uBAAuB;AAEvE,MAAM,mBAAmB,MAAM;AAC9B,WAAS,IAAI,OAAe,KAAa;AACxC,UAAM,SAAmB,CAAC;AAC1B,aAAS,IAAI,OAAO,IAAI,KAAK,KAAK;AACjC,aAAO,KAAK,CAAC;AAAA,IACd;AACA,WAAO;AAAA,EACR;AANS;AAQT,OAAK,UAAU,MAAM;AACpB,UAAM,OAAO,IAAI,UAAU;AAAA,MAC1B,IAAI,gBAAgB,GAAG,GAAG,CAAC;AAAA,MAC3B,IAAI,gBAAgB,GAAG,GAAG,CAAC;AAAA,MAC3B,IAAI,gBAAgB,GAAG,GAAG,CAAC;AAAA,IAC5B,CAAC;AAED,UAAM,MAAM,IAAI,GAAG,EAAE,EAAE,IAAI,OAAK,OAAO,CAAC,EAAE;AAC1C,UAAM,SAAS,IAAI,MAAM;AAEzB,SAAK,aAAa,MAAM;AACxB,WAAO,gBAAgB,QAAQ;AAAA,MAC9B;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACD,CAAC;AAED,UAAM,cAAc,IAAI,2BAA2B,IAAI;AACvD,WAAO;AAAA,MACN,IAAI,GAAG,EAAE,EAAE,IAAI,CAAC,MAAM;AACrB,cAAM,IAAI,YAAY,UAAU,CAAC;AACjC,YAAI,IAAI,OAAO,CAAC,MAAM,IAAI,CAAC,CAAC;AAC5B,YAAI,MAAM,QAAW;AACpB,eAAK,UAAU,CAAC,MAAM,OAAO,CAAC,CAAC;AAAA,QAChC,OAAO;AACN,eAAK;AAAA,QACN;AACA,eAAO;AAAA,MACR,CAAC;AAAA,MACD;AAAA,QACC;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,MACD;AAAA,IACD;AAAA,EACD,CAAC;AAED,0CAAwC;AACzC,CAAC;",
  "names": []
}
