{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/path/common/pathService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { isValidBasename } from \"../../../../base/common/extpath.js\";\nimport { Schemas } from \"../../../../base/common/network.js\";\nimport { type IPath, posix, win32 } from \"../../../../base/common/path.js\";\nimport { OS, OperatingSystem } from \"../../../../base/common/platform.js\";\nimport { basename } from \"../../../../base/common/resources.js\";\nimport { URI } from \"../../../../base/common/uri.js\";\nimport { createDecorator } from \"../../../../platform/instantiation/common/instantiation.js\";\nimport { getVirtualWorkspaceScheme } from \"../../../../platform/workspace/common/virtualWorkspace.js\";\nimport { IWorkspaceContextService } from \"../../../../platform/workspace/common/workspace.js\";\nimport { IWorkbenchEnvironmentService } from \"../../environment/common/environmentService.js\";\nimport { IRemoteAgentService } from \"../../remote/common/remoteAgentService.js\";\n\nexport const IPathService = createDecorator<IPathService>(\"pathService\");\n\n/**\n * Provides access to path related properties that will match the\n * environment. If the environment is connected to a remote, the\n * path properties will match that of the remotes operating system.\n */\nexport interface IPathService {\n\treadonly _serviceBrand: undefined;\n\n\t/**\n\t * The correct path library to use for the target environment. If\n\t * the environment is connected to a remote, this will be the\n\t * path library of the remote file system. Otherwise it will be\n\t * the local file system's path library depending on the OS.\n\t */\n\treadonly path: Promise<IPath>;\n\n\t/**\n\t * Determines the best default URI scheme for the current workspace.\n\t * It uses information about whether we're running remote, in browser,\n\t * or native combined with information about the current workspace to\n\t * find the best default scheme.\n\t */\n\treadonly defaultUriScheme: string;\n\n\t/**\n\t * Converts the given path to a file URI to use for the target\n\t * environment. If the environment is connected to a remote, it\n\t * will use the path separators according to the remote file\n\t * system. Otherwise it will use the local file system's path\n\t * separators.\n\t */\n\tfileURI(path: string): Promise<URI>;\n\n\t/**\n\t * Resolves the user-home directory for the target environment.\n\t * If the envrionment is connected to a remote, this will be the\n\t * remote's user home directory, otherwise the local one unless\n\t * `preferLocal` is set to `true`.\n\t */\n\tuserHome(options: { preferLocal: true }): URI;\n\tuserHome(options?: { preferLocal: boolean }): Promise<URI>;\n\n\t/**\n\t * Figures out if the provided resource has a valid file name\n\t * for the operating system the file is saved to.\n\t *\n\t * Note: this currently only supports `file` and `vscode-file`\n\t * protocols where we know the limits of the file systems behind\n\t * these OS. Other remotes are not supported and this method\n\t * will always return `true` for them.\n\t */\n\thasValidBasename(resource: URI, basename?: string): Promise<boolean>;\n\thasValidBasename(\n\t\tresource: URI,\n\t\tos: OperatingSystem,\n\t\tbasename?: string,\n\t): boolean;\n\n\t/**\n\t * @deprecated use `userHome` instead.\n\t */\n\treadonly resolvedUserHome: URI | undefined;\n}\n\nexport abstract class AbstractPathService implements IPathService {\n\tdeclare readonly _serviceBrand: undefined;\n\n\tprivate resolveOS: Promise<OperatingSystem>;\n\n\tprivate resolveUserHome: Promise<URI>;\n\tprivate maybeUnresolvedUserHome: URI | undefined;\n\n\tconstructor(\n\t\tprivate localUserHome: URI,\n\t\t@IRemoteAgentService\n\t\tprivate readonly remoteAgentService: IRemoteAgentService,\n\t\t@IWorkbenchEnvironmentService\n\t\tprivate readonly environmentService: IWorkbenchEnvironmentService,\n\t\t@IWorkspaceContextService\n\t\tprivate contextService: IWorkspaceContextService,\n\t) {\n\t\t// OS\n\t\tthis.resolveOS = (async () => {\n\t\t\tconst env = await this.remoteAgentService.getEnvironment();\n\n\t\t\treturn env?.os || OS;\n\t\t})();\n\n\t\t// User Home\n\t\tthis.resolveUserHome = (async () => {\n\t\t\tconst env = await this.remoteAgentService.getEnvironment();\n\t\t\tconst userHome = (this.maybeUnresolvedUserHome =\n\t\t\t\tenv?.userHome ?? localUserHome);\n\n\t\t\treturn userHome;\n\t\t})();\n\t}\n\n\thasValidBasename(resource: URI, basename?: string): Promise<boolean>;\n\thasValidBasename(\n\t\tresource: URI,\n\t\tos: OperatingSystem,\n\t\tbasename?: string,\n\t): boolean;\n\thasValidBasename(\n\t\tresource: URI,\n\t\targ2?: string | OperatingSystem,\n\t\tbasename?: string,\n\t): boolean | Promise<boolean> {\n\t\t// async version\n\t\tif (typeof arg2 === \"string\" || typeof arg2 === \"undefined\") {\n\t\t\treturn this.resolveOS.then((os) =>\n\t\t\t\tthis.doHasValidBasename(resource, os, arg2),\n\t\t\t);\n\t\t}\n\n\t\t// sync version\n\t\treturn this.doHasValidBasename(resource, arg2, basename);\n\t}\n\n\tprivate doHasValidBasename(\n\t\tresource: URI,\n\t\tos: OperatingSystem,\n\t\tname?: string,\n\t): boolean {\n\t\t// Our `isValidBasename` method only works with our\n\t\t// standard schemes for files on disk, either locally\n\t\t// or remote.\n\t\tif (\n\t\t\tresource.scheme === Schemas.file ||\n\t\t\tresource.scheme === Schemas.vscodeRemote\n\t\t) {\n\t\t\treturn isValidBasename(\n\t\t\t\tname ?? basename(resource),\n\t\t\t\tos === OperatingSystem.Windows,\n\t\t\t);\n\t\t}\n\n\t\treturn true;\n\t}\n\n\tget defaultUriScheme(): string {\n\t\treturn AbstractPathService.findDefaultUriScheme(\n\t\t\tthis.environmentService,\n\t\t\tthis.contextService,\n\t\t);\n\t}\n\n\tstatic findDefaultUriScheme(\n\t\tenvironmentService: IWorkbenchEnvironmentService,\n\t\tcontextService: IWorkspaceContextService,\n\t): string {\n\t\tif (environmentService.remoteAuthority) {\n\t\t\treturn Schemas.vscodeRemote;\n\t\t}\n\n\t\tconst virtualWorkspace = getVirtualWorkspaceScheme(\n\t\t\tcontextService.getWorkspace(),\n\t\t);\n\t\tif (virtualWorkspace) {\n\t\t\treturn virtualWorkspace;\n\t\t}\n\n\t\tconst firstFolder = contextService.getWorkspace().folders[0];\n\t\tif (firstFolder) {\n\t\t\treturn firstFolder.uri.scheme;\n\t\t}\n\n\t\tconst configuration = contextService.getWorkspace().configuration;\n\t\tif (configuration) {\n\t\t\treturn configuration.scheme;\n\t\t}\n\n\t\treturn Schemas.file;\n\t}\n\n\tuserHome(options?: { preferLocal: boolean }): Promise<URI>;\n\tuserHome(options: { preferLocal: true }): URI;\n\tuserHome(options?: { preferLocal: boolean }): Promise<URI> | URI {\n\t\treturn options?.preferLocal ? this.localUserHome : this.resolveUserHome;\n\t}\n\n\tget resolvedUserHome(): URI | undefined {\n\t\treturn this.maybeUnresolvedUserHome;\n\t}\n\n\tget path(): Promise<IPath> {\n\t\treturn this.resolveOS.then((os) => {\n\t\t\treturn os === OperatingSystem.Windows ? win32 : posix;\n\t\t});\n\t}\n\n\tasync fileURI(_path: string): Promise<URI> {\n\t\tlet authority = \"\";\n\n\t\t// normalize to fwd-slashes on windows,\n\t\t// on other systems bwd-slashes are valid\n\t\t// filename character, eg /f\\oo/ba\\r.txt\n\t\tconst os = await this.resolveOS;\n\t\tif (os === OperatingSystem.Windows) {\n\t\t\t_path = _path.replace(/\\\\/g, \"/\");\n\t\t}\n\n\t\t// check for authority as used in UNC shares\n\t\t// or use the path as given\n\t\tif (_path[0] === \"/\" && _path[1] === \"/\") {\n\t\t\tconst idx = _path.indexOf(\"/\", 2);\n\t\t\tif (idx === -1) {\n\t\t\t\tauthority = _path.substring(2);\n\t\t\t\t_path = \"/\";\n\t\t\t} else {\n\t\t\t\tauthority = _path.substring(2, idx);\n\t\t\t\t_path = _path.substring(idx) || \"/\";\n\t\t\t}\n\t\t}\n\n\t\treturn URI.from({\n\t\t\tscheme: Schemas.file,\n\t\t\tauthority,\n\t\t\tpath: _path,\n\t\t\tquery: \"\",\n\t\t\tfragment: \"\",\n\t\t});\n\t}\n}\n"],
  "mappings": "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",
  "names": ["basename"]
}
