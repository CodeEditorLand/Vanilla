{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/path/browser/pathService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { dirname } from \"../../../../base/common/resources.js\";\nimport { URI } from \"../../../../base/common/uri.js\";\nimport {\n\tInstantiationType,\n\tregisterSingleton,\n} from \"../../../../platform/instantiation/common/extensions.js\";\nimport { IWorkspaceContextService } from \"../../../../platform/workspace/common/workspace.js\";\nimport { IWorkbenchEnvironmentService } from \"../../environment/common/environmentService.js\";\nimport { IRemoteAgentService } from \"../../remote/common/remoteAgentService.js\";\nimport { AbstractPathService, IPathService } from \"../common/pathService.js\";\n\nexport class BrowserPathService extends AbstractPathService {\n\tconstructor(\n\t\t@IRemoteAgentService remoteAgentService: IRemoteAgentService,\n\t\t@IWorkbenchEnvironmentService environmentService: IWorkbenchEnvironmentService,\n\t\t@IWorkspaceContextService contextService: IWorkspaceContextService,\n\t) {\n\t\tsuper(\n\t\t\tguessLocalUserHome(environmentService, contextService),\n\t\t\tremoteAgentService,\n\t\t\tenvironmentService,\n\t\t\tcontextService,\n\t\t);\n\t}\n}\n\nfunction guessLocalUserHome(\n\tenvironmentService: IWorkbenchEnvironmentService,\n\tcontextService: IWorkspaceContextService,\n): URI {\n\t// In web we do not really have the concept of a \"local\" user home\n\t// but we still require it in many places as a fallback. As such,\n\t// we have to come up with a synthetic location derived from the\n\t// environment.\n\n\tconst workspace = contextService.getWorkspace();\n\n\tconst firstFolder = workspace.folders.at(0);\n\tif (firstFolder) {\n\t\treturn firstFolder.uri;\n\t}\n\n\tif (workspace.configuration) {\n\t\treturn dirname(workspace.configuration);\n\t}\n\n\t// This is not ideal because with a user home location of `/`, all paths\n\t// will potentially appear with `~/...`, but at this point we really do\n\t// not have any other good alternative.\n\n\treturn URI.from({\n\t\tscheme: AbstractPathService.findDefaultUriScheme(\n\t\t\tenvironmentService,\n\t\t\tcontextService,\n\t\t),\n\t\tauthority: environmentService.remoteAuthority,\n\t\tpath: \"/\",\n\t});\n}\n\nregisterSingleton(IPathService, BrowserPathService, InstantiationType.Delayed);\n"],
  "mappings": ";;;;;;;;;;;;AAKA,SAAS,eAAe;AACxB,SAAS,WAAW;AACpB;AAAA,EACC;AAAA,EACA;AAAA,OACM;AACP,SAAS,gCAAgC;AACzC,SAAS,oCAAoC;AAC7C,SAAS,2BAA2B;AACpC,SAAS,qBAAqB,oBAAoB;AAE3C,IAAM,qBAAN,cAAiC,oBAAoB;AAAA,EAhB5D,OAgB4D;AAAA;AAAA;AAAA,EAC3D,YACsB,oBACS,oBACJ,gBACzB;AACD;AAAA,MACC,mBAAmB,oBAAoB,cAAc;AAAA,MACrD;AAAA,MACA;AAAA,MACA;AAAA,IACD;AAAA,EACD;AACD;AAba,qBAAN;AAAA,EAEJ;AAAA,EACA;AAAA,EACA;AAAA,GAJU;AAeb,SAAS,mBACR,oBACA,gBACM;AAMN,QAAM,YAAY,eAAe,aAAa;AAE9C,QAAM,cAAc,UAAU,QAAQ,GAAG,CAAC;AAC1C,MAAI,aAAa;AAChB,WAAO,YAAY;AAAA,EACpB;AAEA,MAAI,UAAU,eAAe;AAC5B,WAAO,QAAQ,UAAU,aAAa;AAAA,EACvC;AAMA,SAAO,IAAI,KAAK;AAAA,IACf,QAAQ,oBAAoB;AAAA,MAC3B;AAAA,MACA;AAAA,IACD;AAAA,IACA,WAAW,mBAAmB;AAAA,IAC9B,MAAM;AAAA,EACP,CAAC;AACF;AAhCS;AAkCT,kBAAkB,cAAc,oBAAoB,kBAAkB,OAAO;",
  "names": []
}
