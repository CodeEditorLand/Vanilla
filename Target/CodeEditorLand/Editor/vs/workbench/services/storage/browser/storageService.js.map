{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/storage/browser/storageService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { BroadcastDataChannel } from \"../../../../base/browser/broadcast.js\";\nimport { isSafari } from \"../../../../base/browser/browser.js\";\nimport { getActiveWindow } from \"../../../../base/browser/dom.js\";\nimport { IndexedDB } from \"../../../../base/browser/indexedDB.js\";\nimport { DeferredPromise, Promises } from \"../../../../base/common/async.js\";\nimport { toErrorMessage } from \"../../../../base/common/errorMessage.js\";\nimport { Emitter } from \"../../../../base/common/event.js\";\nimport {\n\tDisposable,\n\tDisposableStore,\n\ttype IDisposable,\n} from \"../../../../base/common/lifecycle.js\";\nimport { assertIsDefined } from \"../../../../base/common/types.js\";\nimport {\n\ttype IStorage,\n\ttype IStorageDatabase,\n\ttype IStorageItemsChangeEvent,\n\ttype IUpdateRequest,\n\tInMemoryStorageDatabase,\n\tStorage,\n\tisStorageItemsChangeEvent,\n} from \"../../../../base/parts/storage/common/storage.js\";\nimport { ILogService } from \"../../../../platform/log/common/log.js\";\nimport {\n\tAbstractStorageService,\n\tIS_NEW_KEY,\n\tStorageScope,\n\tStorageTarget,\n\tisProfileUsingDefaultStorage,\n} from \"../../../../platform/storage/common/storage.js\";\nimport {\n\ttype IUserDataProfile,\n\tisUserDataProfile,\n} from \"../../../../platform/userDataProfile/common/userDataProfile.js\";\nimport type { IAnyWorkspaceIdentifier } from \"../../../../platform/workspace/common/workspace.js\";\nimport type { IUserDataProfileService } from \"../../userDataProfile/common/userDataProfile.js\";\n\nexport class BrowserStorageService extends AbstractStorageService {\n\tprivate static BROWSER_DEFAULT_FLUSH_INTERVAL = 5 * 1000; // every 5s because async operations are not permitted on shutdown\n\n\tprivate applicationStorage: IStorage | undefined;\n\tprivate applicationStorageDatabase: IIndexedDBStorageDatabase | undefined;\n\tprivate readonly applicationStoragePromise = new DeferredPromise<{\n\t\tindexedDb: IIndexedDBStorageDatabase;\n\t\tstorage: IStorage;\n\t}>();\n\n\tprivate profileStorage: IStorage | undefined;\n\tprivate profileStorageDatabase: IIndexedDBStorageDatabase | undefined;\n\tprivate profileStorageProfile = this.userDataProfileService.currentProfile;\n\tprivate readonly profileStorageDisposables = this._register(\n\t\tnew DisposableStore(),\n\t);\n\n\tprivate workspaceStorage: IStorage | undefined;\n\tprivate workspaceStorageDatabase: IIndexedDBStorageDatabase | undefined;\n\n\tget hasPendingUpdate(): boolean {\n\t\treturn Boolean(\n\t\t\tthis.applicationStorageDatabase?.hasPendingUpdate ||\n\t\t\t\tthis.profileStorageDatabase?.hasPendingUpdate ||\n\t\t\t\tthis.workspaceStorageDatabase?.hasPendingUpdate,\n\t\t);\n\t}\n\n\tconstructor(\n\t\tprivate readonly workspace: IAnyWorkspaceIdentifier,\n\t\tprivate readonly userDataProfileService: IUserDataProfileService,\n\t\t@ILogService private readonly logService: ILogService,\n\t) {\n\t\tsuper({ flushInterval: BrowserStorageService.BROWSER_DEFAULT_FLUSH_INTERVAL });\n\n\t\tthis.registerListeners();\n\t}\n\n\tprivate registerListeners(): void {\n\t\tthis._register(\n\t\t\tthis.userDataProfileService.onDidChangeCurrentProfile((e) =>\n\t\t\t\te.join(this.switchToProfile(e.profile)),\n\t\t\t),\n\t\t);\n\t}\n\n\tprotected async doInitialize(): Promise<void> {\n\t\t// Init storages\n\t\tawait Promises.settled([\n\t\t\tthis.createApplicationStorage(),\n\t\t\tthis.createProfileStorage(this.profileStorageProfile),\n\t\t\tthis.createWorkspaceStorage(),\n\t\t]);\n\t}\n\n\tprivate async createApplicationStorage(): Promise<void> {\n\t\tconst applicationStorageIndexedDB =\n\t\t\tawait IndexedDBStorageDatabase.createApplicationStorage(\n\t\t\t\tthis.logService,\n\t\t\t);\n\n\t\tthis.applicationStorageDatabase = this._register(\n\t\t\tapplicationStorageIndexedDB,\n\t\t);\n\t\tthis.applicationStorage = this._register(\n\t\t\tnew Storage(this.applicationStorageDatabase),\n\t\t);\n\n\t\tthis._register(\n\t\t\tthis.applicationStorage.onDidChangeStorage((e) =>\n\t\t\t\tthis.emitDidChangeValue(StorageScope.APPLICATION, e),\n\t\t\t),\n\t\t);\n\n\t\tawait this.applicationStorage.init();\n\n\t\tthis.updateIsNew(this.applicationStorage);\n\n\t\tthis.applicationStoragePromise.complete({\n\t\t\tindexedDb: applicationStorageIndexedDB,\n\t\t\tstorage: this.applicationStorage,\n\t\t});\n\t}\n\n\tprivate async createProfileStorage(\n\t\tprofile: IUserDataProfile,\n\t): Promise<void> {\n\t\t// First clear any previously associated disposables\n\t\tthis.profileStorageDisposables.clear();\n\n\t\t// Remember profile associated to profile storage\n\t\tthis.profileStorageProfile = profile;\n\n\t\tif (isProfileUsingDefaultStorage(this.profileStorageProfile)) {\n\t\t\t// If we are using default profile storage, the profile storage is\n\t\t\t// actually the same as application storage. As such we\n\t\t\t// avoid creating the storage library a second time on\n\t\t\t// the same DB.\n\n\t\t\tconst {\n\t\t\t\tindexedDb: applicationStorageIndexedDB,\n\t\t\t\tstorage: applicationStorage,\n\t\t\t} = await this.applicationStoragePromise.p;\n\n\t\t\tthis.profileStorageDatabase = applicationStorageIndexedDB;\n\t\t\tthis.profileStorage = applicationStorage;\n\n\t\t\tthis.profileStorageDisposables.add(\n\t\t\t\tthis.profileStorage.onDidChangeStorage((e) =>\n\t\t\t\t\tthis.emitDidChangeValue(StorageScope.PROFILE, e),\n\t\t\t\t),\n\t\t\t);\n\t\t} else {\n\t\t\tconst profileStorageIndexedDB =\n\t\t\t\tawait IndexedDBStorageDatabase.createProfileStorage(\n\t\t\t\t\tthis.profileStorageProfile,\n\t\t\t\t\tthis.logService,\n\t\t\t\t);\n\n\t\t\tthis.profileStorageDatabase = this.profileStorageDisposables.add(\n\t\t\t\tprofileStorageIndexedDB,\n\t\t\t);\n\t\t\tthis.profileStorage = this.profileStorageDisposables.add(\n\t\t\t\tnew Storage(this.profileStorageDatabase),\n\t\t\t);\n\n\t\t\tthis.profileStorageDisposables.add(\n\t\t\t\tthis.profileStorage.onDidChangeStorage((e) =>\n\t\t\t\t\tthis.emitDidChangeValue(StorageScope.PROFILE, e),\n\t\t\t\t),\n\t\t\t);\n\n\t\t\tawait this.profileStorage.init();\n\n\t\t\tthis.updateIsNew(this.profileStorage);\n\t\t}\n\t}\n\n\tprivate async createWorkspaceStorage(): Promise<void> {\n\t\tconst workspaceStorageIndexedDB =\n\t\t\tawait IndexedDBStorageDatabase.createWorkspaceStorage(\n\t\t\t\tthis.workspace.id,\n\t\t\t\tthis.logService,\n\t\t\t);\n\n\t\tthis.workspaceStorageDatabase = this._register(\n\t\t\tworkspaceStorageIndexedDB,\n\t\t);\n\t\tthis.workspaceStorage = this._register(\n\t\t\tnew Storage(this.workspaceStorageDatabase),\n\t\t);\n\n\t\tthis._register(\n\t\t\tthis.workspaceStorage.onDidChangeStorage((e) =>\n\t\t\t\tthis.emitDidChangeValue(StorageScope.WORKSPACE, e),\n\t\t\t),\n\t\t);\n\n\t\tawait this.workspaceStorage.init();\n\n\t\tthis.updateIsNew(this.workspaceStorage);\n\t}\n\n\tprivate updateIsNew(storage: IStorage): void {\n\t\tconst firstOpen = storage.getBoolean(IS_NEW_KEY);\n\t\tif (firstOpen === undefined) {\n\t\t\tstorage.set(IS_NEW_KEY, true);\n\t\t} else if (firstOpen) {\n\t\t\tstorage.set(IS_NEW_KEY, false);\n\t\t}\n\t}\n\n\tprotected getStorage(scope: StorageScope): IStorage | undefined {\n\t\tswitch (scope) {\n\t\t\tcase StorageScope.APPLICATION:\n\t\t\t\treturn this.applicationStorage;\n\t\t\tcase StorageScope.PROFILE:\n\t\t\t\treturn this.profileStorage;\n\t\t\tdefault:\n\t\t\t\treturn this.workspaceStorage;\n\t\t}\n\t}\n\n\tprotected getLogDetails(scope: StorageScope): string | undefined {\n\t\tswitch (scope) {\n\t\t\tcase StorageScope.APPLICATION:\n\t\t\t\treturn this.applicationStorageDatabase?.name;\n\t\t\tcase StorageScope.PROFILE:\n\t\t\t\treturn this.profileStorageDatabase?.name;\n\t\t\tdefault:\n\t\t\t\treturn this.workspaceStorageDatabase?.name;\n\t\t}\n\t}\n\n\tprotected async switchToProfile(\n\t\ttoProfile: IUserDataProfile,\n\t): Promise<void> {\n\t\tif (!this.canSwitchProfile(this.profileStorageProfile, toProfile)) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst oldProfileStorage = assertIsDefined(this.profileStorage);\n\t\tconst oldItems = oldProfileStorage.items;\n\n\t\t// Close old profile storage but only if this is\n\t\t// different from application storage!\n\t\tif (oldProfileStorage !== this.applicationStorage) {\n\t\t\tawait oldProfileStorage.close();\n\t\t}\n\n\t\t// Create new profile storage & init\n\t\tawait this.createProfileStorage(toProfile);\n\n\t\t// Handle data switch and eventing\n\t\tthis.switchData(\n\t\t\toldItems,\n\t\t\tassertIsDefined(this.profileStorage),\n\t\t\tStorageScope.PROFILE,\n\t\t);\n\t}\n\n\tprotected async switchToWorkspace(\n\t\ttoWorkspace: IAnyWorkspaceIdentifier,\n\t\tpreserveData: boolean,\n\t): Promise<void> {\n\t\tthrow new Error(\"Migrating storage is currently unsupported in Web\");\n\t}\n\n\tprotected override shouldFlushWhenIdle(): boolean {\n\t\t// this flush() will potentially cause new state to be stored\n\t\t// since new state will only be created while the document\n\t\t// has focus, one optimization is to not run this when the\n\t\t// document has no focus, assuming that state has not changed\n\t\t//\n\t\t// another optimization is to not collect more state if we\n\t\t// have a pending update already running which indicates\n\t\t// that the connection is either slow or disconnected and\n\t\t// thus unhealthy.\n\t\treturn getActiveWindow().document.hasFocus() && !this.hasPendingUpdate;\n\t}\n\n\tclose(): void {\n\t\t// Safari: there is an issue where the page can hang on load when\n\t\t// a previous session has kept IndexedDB transactions running.\n\t\t// The only fix seems to be to cancel any pending transactions\n\t\t// (https://github.com/microsoft/vscode/issues/136295)\n\t\t//\n\t\t// On all other browsers, we keep the databases opened because\n\t\t// we expect data to be written when the unload happens.\n\t\tif (isSafari) {\n\t\t\tthis.applicationStorage?.close();\n\t\t\tthis.profileStorageDatabase?.close();\n\t\t\tthis.workspaceStorageDatabase?.close();\n\t\t}\n\n\t\t// Always dispose to ensure that no timeouts or callbacks\n\t\t// get triggered in this phase.\n\t\tthis.dispose();\n\t}\n\n\tasync clear(): Promise<void> {\n\t\t// Clear key/values\n\t\tfor (const scope of [\n\t\t\tStorageScope.APPLICATION,\n\t\t\tStorageScope.PROFILE,\n\t\t\tStorageScope.WORKSPACE,\n\t\t]) {\n\t\t\tfor (const target of [StorageTarget.USER, StorageTarget.MACHINE]) {\n\t\t\t\tfor (const key of this.keys(scope, target)) {\n\t\t\t\t\tthis.remove(key, scope);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tawait this.getStorage(scope)?.whenFlushed();\n\t\t}\n\n\t\t// Clear databases\n\t\tawait Promises.settled([\n\t\t\tthis.applicationStorageDatabase?.clear() ?? Promise.resolve(),\n\t\t\tthis.profileStorageDatabase?.clear() ?? Promise.resolve(),\n\t\t\tthis.workspaceStorageDatabase?.clear() ?? Promise.resolve(),\n\t\t]);\n\t}\n\n\thasScope(scope: IAnyWorkspaceIdentifier | IUserDataProfile): boolean {\n\t\tif (isUserDataProfile(scope)) {\n\t\t\treturn this.profileStorageProfile.id === scope.id;\n\t\t}\n\n\t\treturn this.workspace.id === scope.id;\n\t}\n}\n\ninterface IIndexedDBStorageDatabase extends IStorageDatabase, IDisposable {\n\t/**\n\t * Name of the database.\n\t */\n\treadonly name: string;\n\n\t/**\n\t * Whether an update in the DB is currently pending\n\t * (either update or delete operation).\n\t */\n\treadonly hasPendingUpdate: boolean;\n\n\t/**\n\t * For testing only.\n\t */\n\tclear(): Promise<void>;\n}\n\nclass InMemoryIndexedDBStorageDatabase\n\textends InMemoryStorageDatabase\n\timplements IIndexedDBStorageDatabase\n{\n\treadonly hasPendingUpdate = false;\n\treadonly name = \"in-memory-indexedb-storage\";\n\n\tasync clear(): Promise<void> {\n\t\t(await this.getItems()).clear();\n\t}\n\n\tdispose(): void {\n\t\t// No-op\n\t}\n}\n\ninterface IndexedDBStorageDatabaseOptions {\n\tid: string;\n\tbroadcastChanges?: boolean;\n}\n\nexport class IndexedDBStorageDatabase\n\textends Disposable\n\timplements IIndexedDBStorageDatabase\n{\n\tstatic async createApplicationStorage(\n\t\tlogService: ILogService,\n\t): Promise<IIndexedDBStorageDatabase> {\n\t\treturn IndexedDBStorageDatabase.create(\n\t\t\t{ id: \"global\", broadcastChanges: true },\n\t\t\tlogService,\n\t\t);\n\t}\n\n\tstatic async createProfileStorage(\n\t\tprofile: IUserDataProfile,\n\t\tlogService: ILogService,\n\t): Promise<IIndexedDBStorageDatabase> {\n\t\treturn IndexedDBStorageDatabase.create(\n\t\t\t{ id: `global-${profile.id}`, broadcastChanges: true },\n\t\t\tlogService,\n\t\t);\n\t}\n\n\tstatic async createWorkspaceStorage(\n\t\tworkspaceId: string,\n\t\tlogService: ILogService,\n\t): Promise<IIndexedDBStorageDatabase> {\n\t\treturn IndexedDBStorageDatabase.create({ id: workspaceId }, logService);\n\t}\n\n\tstatic async create(\n\t\toptions: IndexedDBStorageDatabaseOptions,\n\t\tlogService: ILogService,\n\t): Promise<IIndexedDBStorageDatabase> {\n\t\ttry {\n\t\t\tconst database = new IndexedDBStorageDatabase(options, logService);\n\t\t\tawait database.whenConnected;\n\n\t\t\treturn database;\n\t\t} catch (error) {\n\t\t\tlogService.error(\n\t\t\t\t`[IndexedDB Storage ${options.id}] create(): ${toErrorMessage(error, true)}`,\n\t\t\t);\n\n\t\t\treturn new InMemoryIndexedDBStorageDatabase();\n\t\t}\n\t}\n\n\tprivate static readonly STORAGE_DATABASE_PREFIX = \"vscode-web-state-db-\";\n\tprivate static readonly STORAGE_OBJECT_STORE = \"ItemTable\";\n\n\tprivate readonly _onDidChangeItemsExternal = this._register(\n\t\tnew Emitter<IStorageItemsChangeEvent>(),\n\t);\n\treadonly onDidChangeItemsExternal = this._onDidChangeItemsExternal.event;\n\n\tprivate broadcastChannel:\n\t\t| BroadcastDataChannel<IStorageItemsChangeEvent>\n\t\t| undefined;\n\n\tprivate pendingUpdate: Promise<boolean> | undefined = undefined;\n\tget hasPendingUpdate(): boolean {\n\t\treturn !!this.pendingUpdate;\n\t}\n\n\treadonly name: string;\n\tprivate readonly whenConnected: Promise<IndexedDB>;\n\n\tprivate constructor(\n\t\toptions: IndexedDBStorageDatabaseOptions,\n\t\tprivate readonly logService: ILogService,\n\t) {\n\t\tsuper();\n\n\t\tthis.name = `${IndexedDBStorageDatabase.STORAGE_DATABASE_PREFIX}${options.id}`;\n\t\tthis.broadcastChannel = options.broadcastChanges\n\t\t\t? this._register(\n\t\t\t\t\tnew BroadcastDataChannel<IStorageItemsChangeEvent>(\n\t\t\t\t\t\tthis.name,\n\t\t\t\t\t),\n\t\t\t\t)\n\t\t\t: undefined;\n\n\t\tthis.whenConnected = this.connect();\n\n\t\tthis.registerListeners();\n\t}\n\n\tprivate registerListeners(): void {\n\t\t// Check for storage change events from other\n\t\t// windows/tabs via `BroadcastChannel` mechanisms.\n\t\tif (this.broadcastChannel) {\n\t\t\tthis._register(\n\t\t\t\tthis.broadcastChannel.onDidReceiveData((data) => {\n\t\t\t\t\tif (isStorageItemsChangeEvent(data)) {\n\t\t\t\t\t\tthis._onDidChangeItemsExternal.fire(data);\n\t\t\t\t\t}\n\t\t\t\t}),\n\t\t\t);\n\t\t}\n\t}\n\n\tprivate async connect(): Promise<IndexedDB> {\n\t\ttry {\n\t\t\treturn await IndexedDB.create(this.name, undefined, [\n\t\t\t\tIndexedDBStorageDatabase.STORAGE_OBJECT_STORE,\n\t\t\t]);\n\t\t} catch (error) {\n\t\t\tthis.logService.error(\n\t\t\t\t`[IndexedDB Storage ${this.name}] connect() error: ${toErrorMessage(error)}`,\n\t\t\t);\n\n\t\t\tthrow error;\n\t\t}\n\t}\n\n\tasync getItems(): Promise<Map<string, string>> {\n\t\tconst db = await this.whenConnected;\n\n\t\tfunction isValid(value: unknown): value is string {\n\t\t\treturn typeof value === \"string\";\n\t\t}\n\n\t\treturn db.getKeyValues<string>(\n\t\t\tIndexedDBStorageDatabase.STORAGE_OBJECT_STORE,\n\t\t\tisValid,\n\t\t);\n\t}\n\n\tasync updateItems(request: IUpdateRequest): Promise<void> {\n\t\t// Run the update\n\t\tlet didUpdate = false;\n\t\tthis.pendingUpdate = this.doUpdateItems(request);\n\t\ttry {\n\t\t\tdidUpdate = await this.pendingUpdate;\n\t\t} finally {\n\t\t\tthis.pendingUpdate = undefined;\n\t\t}\n\n\t\t// Broadcast changes to other windows/tabs if enabled\n\t\t// and only if we actually did update storage items.\n\t\tif (this.broadcastChannel && didUpdate) {\n\t\t\tconst event: IStorageItemsChangeEvent = {\n\t\t\t\tchanged: request.insert,\n\t\t\t\tdeleted: request.delete,\n\t\t\t};\n\n\t\t\tthis.broadcastChannel.postData(event);\n\t\t}\n\t}\n\n\tprivate async doUpdateItems(request: IUpdateRequest): Promise<boolean> {\n\t\t// Return early if the request is empty\n\t\tconst toInsert = request.insert;\n\t\tconst toDelete = request.delete;\n\t\tif (\n\t\t\t(!toInsert && !toDelete) ||\n\t\t\t(toInsert?.size === 0 && toDelete?.size === 0)\n\t\t) {\n\t\t\treturn false;\n\t\t}\n\n\t\tconst db = await this.whenConnected;\n\n\t\t// Update `ItemTable` with inserts and/or deletes\n\t\tawait db.runInTransaction(\n\t\t\tIndexedDBStorageDatabase.STORAGE_OBJECT_STORE,\n\t\t\t\"readwrite\",\n\t\t\t(objectStore) => {\n\t\t\t\tconst requests: IDBRequest[] = [];\n\n\t\t\t\t// Inserts\n\t\t\t\tif (toInsert) {\n\t\t\t\t\tfor (const [key, value] of toInsert) {\n\t\t\t\t\t\trequests.push(objectStore.put(value, key));\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Deletes\n\t\t\t\tif (toDelete) {\n\t\t\t\t\tfor (const key of toDelete) {\n\t\t\t\t\t\trequests.push(objectStore.delete(key));\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn requests;\n\t\t\t},\n\t\t);\n\n\t\treturn true;\n\t}\n\n\tasync optimize(): Promise<void> {\n\t\t// not suported in IndexedDB\n\t}\n\n\tasync close(): Promise<void> {\n\t\tconst db = await this.whenConnected;\n\n\t\t// Wait for pending updates to having finished\n\t\tawait this.pendingUpdate;\n\n\t\t// Finally, close IndexedDB\n\t\treturn db.close();\n\t}\n\n\tasync clear(): Promise<void> {\n\t\tconst db = await this.whenConnected;\n\n\t\tawait db.runInTransaction(\n\t\t\tIndexedDBStorageDatabase.STORAGE_OBJECT_STORE,\n\t\t\t\"readwrite\",\n\t\t\t(objectStore) => objectStore.clear(),\n\t\t);\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
