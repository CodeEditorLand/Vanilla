var v=Object.defineProperty;var b=Object.getOwnPropertyDescriptor;var S=(p,o,e,t)=>{for(var a=t>1?void 0:t?b(o,e):o,s=p.length-1,n;s>=0;s--)(n=p[s])&&(a=(t?n(o,e,a):n(a))||a);return t&&a&&v(o,e,a),a},f=(p,o)=>(e,t)=>o(e,t,p);import{BroadcastDataChannel as w}from"../../../../base/browser/broadcast.js";import{isSafari as y}from"../../../../base/browser/browser.js";import{getActiveWindow as E}from"../../../../base/browser/dom.js";import{IndexedDB as C}from"../../../../base/browser/indexedDB.js";import{DeferredPromise as A,Promises as I}from"../../../../base/common/async.js";import{toErrorMessage as m}from"../../../../base/common/errorMessage.js";import{Emitter as O}from"../../../../base/common/event.js";import{Disposable as R,DisposableStore as T}from"../../../../base/common/lifecycle.js";import{assertIsDefined as D}from"../../../../base/common/types.js";import{InMemoryStorageDatabase as U,isStorageItemsChangeEvent as k,Storage as l}from"../../../../base/parts/storage/common/storage.js";import{ILogService as x}from"../../../../platform/log/common/log.js";import{AbstractStorageService as L,isProfileUsingDefaultStorage as B,IS_NEW_KEY as h,StorageScope as i,StorageTarget as u}from"../../../../platform/storage/common/storage.js";import{isUserDataProfile as _}from"../../../../platform/userDataProfile/common/userDataProfile.js";let d=class extends L{constructor(e,t,a){super({flushInterval:d.BROWSER_DEFAULT_FLUSH_INTERVAL});this.workspace=e;this.userDataProfileService=t;this.logService=a;this.registerListeners()}static BROWSER_DEFAULT_FLUSH_INTERVAL=5*1e3;applicationStorage;applicationStorageDatabase;applicationStoragePromise=new A;profileStorage;profileStorageDatabase;profileStorageProfile=this.userDataProfileService.currentProfile;profileStorageDisposables=this._register(new T);workspaceStorage;workspaceStorageDatabase;get hasPendingUpdate(){return!!(this.applicationStorageDatabase?.hasPendingUpdate||this.profileStorageDatabase?.hasPendingUpdate||this.workspaceStorageDatabase?.hasPendingUpdate)}registerListeners(){this._register(this.userDataProfileService.onDidChangeCurrentProfile(e=>e.join(this.switchToProfile(e.profile))))}async doInitialize(){await I.settled([this.createApplicationStorage(),this.createProfileStorage(this.profileStorageProfile),this.createWorkspaceStorage()])}async createApplicationStorage(){const e=await r.createApplicationStorage(this.logService);this.applicationStorageDatabase=this._register(e),this.applicationStorage=this._register(new l(this.applicationStorageDatabase)),this._register(this.applicationStorage.onDidChangeStorage(t=>this.emitDidChangeValue(i.APPLICATION,t))),await this.applicationStorage.init(),this.updateIsNew(this.applicationStorage),this.applicationStoragePromise.complete({indexedDb:e,storage:this.applicationStorage})}async createProfileStorage(e){if(this.profileStorageDisposables.clear(),this.profileStorageProfile=e,B(this.profileStorageProfile)){const{indexedDb:t,storage:a}=await this.applicationStoragePromise.p;this.profileStorageDatabase=t,this.profileStorage=a,this.profileStorageDisposables.add(this.profileStorage.onDidChangeStorage(s=>this.emitDidChangeValue(i.PROFILE,s)))}else{const t=await r.createProfileStorage(this.profileStorageProfile,this.logService);this.profileStorageDatabase=this.profileStorageDisposables.add(t),this.profileStorage=this.profileStorageDisposables.add(new l(this.profileStorageDatabase)),this.profileStorageDisposables.add(this.profileStorage.onDidChangeStorage(a=>this.emitDidChangeValue(i.PROFILE,a))),await this.profileStorage.init(),this.updateIsNew(this.profileStorage)}}async createWorkspaceStorage(){const e=await r.createWorkspaceStorage(this.workspace.id,this.logService);this.workspaceStorageDatabase=this._register(e),this.workspaceStorage=this._register(new l(this.workspaceStorageDatabase)),this._register(this.workspaceStorage.onDidChangeStorage(t=>this.emitDidChangeValue(i.WORKSPACE,t))),await this.workspaceStorage.init(),this.updateIsNew(this.workspaceStorage)}updateIsNew(e){const t=e.getBoolean(h);t===void 0?e.set(h,!0):t&&e.set(h,!1)}getStorage(e){switch(e){case i.APPLICATION:return this.applicationStorage;case i.PROFILE:return this.profileStorage;default:return this.workspaceStorage}}getLogDetails(e){switch(e){case i.APPLICATION:return this.applicationStorageDatabase?.name;case i.PROFILE:return this.profileStorageDatabase?.name;default:return this.workspaceStorageDatabase?.name}}async switchToProfile(e){if(!this.canSwitchProfile(this.profileStorageProfile,e))return;const t=D(this.profileStorage),a=t.items;t!==this.applicationStorage&&await t.close(),await this.createProfileStorage(e),this.switchData(a,D(this.profileStorage),i.PROFILE)}async switchToWorkspace(e,t){throw new Error("Migrating storage is currently unsupported in Web")}shouldFlushWhenIdle(){return E().document.hasFocus()&&!this.hasPendingUpdate}close(){y&&(this.applicationStorage?.close(),this.profileStorageDatabase?.close(),this.workspaceStorageDatabase?.close()),this.dispose()}async clear(){for(const e of[i.APPLICATION,i.PROFILE,i.WORKSPACE]){for(const t of[u.USER,u.MACHINE])for(const a of this.keys(e,t))this.remove(a,e);await this.getStorage(e)?.whenFlushed()}await I.settled([this.applicationStorageDatabase?.clear()??Promise.resolve(),this.profileStorageDatabase?.clear()??Promise.resolve(),this.workspaceStorageDatabase?.clear()??Promise.resolve()])}hasScope(e){return _(e)?this.profileStorageProfile.id===e.id:this.workspace.id===e.id}};d=S([f(2,x)],d);class W extends U{hasPendingUpdate=!1;name="in-memory-indexedb-storage";async clear(){(await this.getItems()).clear()}dispose(){}}class r extends R{constructor(e,t){super();this.logService=t;this.name=`${r.STORAGE_DATABASE_PREFIX}${e.id}`,this.broadcastChannel=e.broadcastChanges?this._register(new w(this.name)):void 0,this.whenConnected=this.connect(),this.registerListeners()}static async createApplicationStorage(e){return r.create({id:"global",broadcastChanges:!0},e)}static async createProfileStorage(e,t){return r.create({id:`global-${e.id}`,broadcastChanges:!0},t)}static async createWorkspaceStorage(e,t){return r.create({id:e},t)}static async create(e,t){try{const a=new r(e,t);return await a.whenConnected,a}catch(a){return t.error(`[IndexedDB Storage ${e.id}] create(): ${m(a,!0)}`),new W}}static STORAGE_DATABASE_PREFIX="vscode-web-state-db-";static STORAGE_OBJECT_STORE="ItemTable";_onDidChangeItemsExternal=this._register(new O);onDidChangeItemsExternal=this._onDidChangeItemsExternal.event;broadcastChannel;pendingUpdate=void 0;get hasPendingUpdate(){return!!this.pendingUpdate}name;whenConnected;registerListeners(){this.broadcastChannel&&this._register(this.broadcastChannel.onDidReceiveData(e=>{k(e)&&this._onDidChangeItemsExternal.fire(e)}))}async connect(){try{return await C.create(this.name,void 0,[r.STORAGE_OBJECT_STORE])}catch(e){throw this.logService.error(`[IndexedDB Storage ${this.name}] connect() error: ${m(e)}`),e}}async getItems(){const e=await this.whenConnected;function t(a){return typeof a=="string"}return e.getKeyValues(r.STORAGE_OBJECT_STORE,t)}async updateItems(e){let t=!1;this.pendingUpdate=this.doUpdateItems(e);try{t=await this.pendingUpdate}finally{this.pendingUpdate=void 0}if(this.broadcastChannel&&t){const a={changed:e.insert,deleted:e.delete};this.broadcastChannel.postData(a)}}async doUpdateItems(e){const t=e.insert,a=e.delete;return!t&&!a||t?.size===0&&a?.size===0?!1:(await(await this.whenConnected).runInTransaction(r.STORAGE_OBJECT_STORE,"readwrite",n=>{const c=[];if(t)for(const[g,P]of t)c.push(n.put(P,g));if(a)for(const g of a)c.push(n.delete(g));return c}),!0)}async optimize(){}async close(){const e=await this.whenConnected;return await this.pendingUpdate,e.close()}async clear(){await(await this.whenConnected).runInTransaction(r.STORAGE_OBJECT_STORE,"readwrite",t=>t.clear())}}export{d as BrowserStorageService,r as IndexedDBStorageDatabase};
