{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/timer/browser/timerService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { createBlobWorker } from \"../../../../base/browser/defaultWorkerFactory.js\";\nimport { Barrier, timeout } from \"../../../../base/common/async.js\";\nimport * as perf from \"../../../../base/common/performance.js\";\nimport { isWeb } from \"../../../../base/common/platform.js\";\nimport { IAccessibilityService } from \"../../../../platform/accessibility/common/accessibility.js\";\nimport { createDecorator } from \"../../../../platform/instantiation/common/instantiation.js\";\nimport { Registry } from \"../../../../platform/registry/common/platform.js\";\nimport { ITelemetryService } from \"../../../../platform/telemetry/common/telemetry.js\";\nimport { TelemetryTrustedValue } from \"../../../../platform/telemetry/common/telemetryUtils.js\";\nimport {\n\ttype ITerminalBackendRegistry,\n\tTerminalExtensions,\n} from \"../../../../platform/terminal/common/terminal.js\";\nimport { IUpdateService } from \"../../../../platform/update/common/update.js\";\nimport {\n\tIWorkspaceContextService,\n\tWorkbenchState,\n} from \"../../../../platform/workspace/common/workspace.js\";\nimport { ViewContainerLocation } from \"../../../common/views.js\";\nimport { IEditorService } from \"../../editor/common/editorService.js\";\nimport { IExtensionService } from \"../../extensions/common/extensions.js\";\nimport { IWorkbenchLayoutService } from \"../../layout/browser/layoutService.js\";\nimport {\n\tILifecycleService,\n\tLifecyclePhase,\n} from \"../../lifecycle/common/lifecycle.js\";\nimport { IPaneCompositePartService } from \"../../panecomposite/browser/panecomposite.js\";\n\n/* __GDPR__FRAGMENT__\n\t\"IMemoryInfo\" : {\n\t\t\"workingSetSize\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"PerformanceAndHealth\", \"isMeasurement\": true },\n\t\t\"privateBytes\": { \"classification\": \"SystemMetaData\", \"purpose\": \"PerformanceAndHealth\", \"isMeasurement\": true },\n\t\t\"sharedBytes\": { \"classification\": \"SystemMetaData\", \"purpose\": \"PerformanceAndHealth\", \"isMeasurement\": true }\n\t}\n*/\nexport interface IMemoryInfo {\n\treadonly workingSetSize: number;\n\treadonly privateBytes: number;\n\treadonly sharedBytes: number;\n}\n\n/* __GDPR__FRAGMENT__\n\t\"IStartupMetrics\" : {\n\t\t\"version\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"PerformanceAndHealth\" },\n\t\t\"ellapsed\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"PerformanceAndHealth\", \"isMeasurement\": true },\n\t\t\"isLatestVersion\": { \"classification\": \"SystemMetaData\", \"purpose\": \"PerformanceAndHealth\" },\n\t\t\"didUseCachedData\": { \"classification\": \"SystemMetaData\", \"purpose\": \"PerformanceAndHealth\" },\n\t\t\"windowKind\": { \"classification\": \"SystemMetaData\", \"purpose\": \"PerformanceAndHealth\" },\n\t\t\"windowCount\": { \"classification\": \"SystemMetaData\", \"purpose\": \"PerformanceAndHealth\" },\n\t\t\"viewletId\": { \"classification\": \"SystemMetaData\", \"purpose\": \"PerformanceAndHealth\" },\n\t\t\"panelId\": { \"classification\": \"SystemMetaData\", \"purpose\": \"PerformanceAndHealth\" },\n\t\t\"editorIds\": { \"classification\": \"SystemMetaData\", \"purpose\": \"PerformanceAndHealth\" },\n\t\t\"timers.ellapsedAppReady\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"PerformanceAndHealth\", \"isMeasurement\": true },\n\t\t\"timers.ellapsedNlsGeneration\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"PerformanceAndHealth\", \"isMeasurement\": true },\n\t\t\"timers.ellapsedLoadMainBundle\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"PerformanceAndHealth\", \"isMeasurement\": true },\n\t\t\"timers.ellapsedCrashReporter\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"PerformanceAndHealth\", \"isMeasurement\": true },\n\t\t\"timers.ellapsedMainServer\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"PerformanceAndHealth\", \"isMeasurement\": true },\n\t\t\"timers.ellapsedWindowCreate\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"PerformanceAndHealth\", \"isMeasurement\": true },\n\t\t\"timers.ellapsedWindowLoad\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"PerformanceAndHealth\", \"isMeasurement\": true },\n\t\t\"timers.ellapsedWindowLoadToRequire\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"PerformanceAndHealth\", \"isMeasurement\": true },\n\t\t\"timers.ellapsedWaitForWindowConfig\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"PerformanceAndHealth\", \"isMeasurement\": true },\n\t\t\"timers.ellapsedStorageInit\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"PerformanceAndHealth\", \"isMeasurement\": true },\n\t\t\"timers.ellapsedWorkspaceServiceInit\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"PerformanceAndHealth\", \"isMeasurement\": true },\n\t\t\"timers.ellapsedSharedProcesConnected\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"PerformanceAndHealth\", \"isMeasurement\": true },\n\t\t\"timers.ellapsedRequiredUserDataInit\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"PerformanceAndHealth\", \"isMeasurement\": true },\n\t\t\"timers.ellapsedOtherUserDataInit\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"PerformanceAndHealth\", \"isMeasurement\": true },\n\t\t\"timers.ellapsedRequire\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"PerformanceAndHealth\", \"isMeasurement\": true },\n\t\t\"timers.ellapsedExtensions\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"PerformanceAndHealth\", \"isMeasurement\": true },\n\t\t\"timers.ellapsedExtensionsReady\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"PerformanceAndHealth\", \"isMeasurement\": true },\n\t\t\"timers.ellapsedViewletRestore\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"PerformanceAndHealth\", \"isMeasurement\": true },\n\t\t\"timers.ellapsedPanelRestore\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"PerformanceAndHealth\", \"isMeasurement\": true },\n\t\t\"timers.ellapsedEditorRestore\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"PerformanceAndHealth\", \"isMeasurement\": true },\n\t\t\"timers.ellapsedWorkbenchContributions\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"PerformanceAndHealth\", \"isMeasurement\": true },\n\t\t\"timers.ellapsedWorkbench\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"PerformanceAndHealth\", \"isMeasurement\": true },\n\t\t\"platform\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"PerformanceAndHealth\" },\n\t\t\"release\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"PerformanceAndHealth\" },\n\t\t\"arch\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"PerformanceAndHealth\" },\n\t\t\"totalmem\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"PerformanceAndHealth\", \"isMeasurement\": true },\n\t\t\"freemem\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"PerformanceAndHealth\", \"isMeasurement\": true },\n\t\t\"meminfo\" : { \"${inline}\": [ \"${IMemoryInfo}\" ] },\n\t\t\"cpus.count\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"PerformanceAndHealth\", \"isMeasurement\": true },\n\t\t\"cpus.speed\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"PerformanceAndHealth\", \"isMeasurement\": true },\n\t\t\"cpus.model\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"PerformanceAndHealth\" },\n\t\t\"initialStartup\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"PerformanceAndHealth\", \"isMeasurement\": true },\n\t\t\"hasAccessibilitySupport\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"PerformanceAndHealth\", \"isMeasurement\": true },\n\t\t\"isVMLikelyhood\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"PerformanceAndHealth\", \"isMeasurement\": true },\n\t\t\"emptyWorkbench\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"PerformanceAndHealth\", \"isMeasurement\": true },\n\t\t\"loadavg\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"PerformanceAndHealth\" },\n\t\t\"isARM64Emulated\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"PerformanceAndHealth\", \"isMeasurement\": true }\n\t}\n*/\nexport interface IStartupMetrics {\n\t/**\n\t * The version of these metrics.\n\t */\n\treadonly version: 2;\n\n\t/**\n\t * If this started the main process and renderer or just a renderer (new or reloaded).\n\t */\n\treadonly initialStartup: boolean;\n\n\t/**\n\t * No folder, no file, no workspace has been opened\n\t */\n\treadonly emptyWorkbench: boolean;\n\n\t/**\n\t * This is the latest (stable/insider) version. Iff not we should ignore this\n\t * measurement.\n\t */\n\treadonly isLatestVersion: boolean;\n\n\t/**\n\t * Whether we asked for and V8 accepted cached data.\n\t */\n\treadonly didUseCachedData: boolean;\n\n\t/**\n\t * How/why the window was created. See https://github.com/microsoft/vscode/blob/d1f57d871722f4d6ba63e4ef6f06287121ceb045/src/vs/platform/lifecycle/common/lifecycle.ts#L50\n\t */\n\treadonly windowKind: number;\n\n\t/**\n\t * The total number of windows that have been restored/created\n\t */\n\treadonly windowCount: number;\n\n\t/**\n\t * The active viewlet id or `undedined`\n\t */\n\treadonly viewletId?: string;\n\n\t/**\n\t * The active panel id or `undefined`\n\t */\n\treadonly panelId?: string;\n\n\t/**\n\t * The editor input types or `[]`\n\t */\n\treadonly editorIds: string[];\n\n\t/**\n\t * The time it took to create the workbench.\n\t *\n\t * * Happens in the main-process *and* the renderer-process\n\t * * Measured with the *start* and `didStartWorkbench`-performance mark. The *start* is either the start of the\n\t * main process or the start of the renderer.\n\t * * This should be looked at carefully because times vary depending on\n\t *  * This being the first window, the only window, or a reloaded window\n\t *  * Cached data being present and used or not\n\t *  * The numbers and types of editors being restored\n\t *  * The numbers of windows being restored (when starting 'fresh')\n\t *  * The viewlet being restored (esp. when it's a contributed viewlet)\n\t */\n\treadonly ellapsed: number;\n\n\t/**\n\t * Individual timers...\n\t */\n\treadonly timers: {\n\t\t/**\n\t\t * The time it took to receieve the [`ready`](https://electronjs.org/docs/api/app#event-ready)-event. Measured from the first line\n\t\t * of JavaScript code till receiving that event.\n\t\t *\n\t\t * * Happens in the main-process\n\t\t * * Measured with the `main:started` and `main:appReady` performance marks.\n\t\t * * This can be compared between insider and stable builds.\n\t\t * * This should be looked at per OS version and per electron version.\n\t\t * * This is often affected by AV software (and can change with AV software updates outside of our release-cycle).\n\t\t * * It is not our code running here and we can only observe what's happening.\n\t\t */\n\t\treadonly ellapsedAppReady?: number;\n\n\t\t/**\n\t\t * The time it took to generate NLS data.\n\t\t *\n\t\t * * Happens in the main-process\n\t\t * * Measured with the `nlsGeneration:start` and `nlsGeneration:end` performance marks.\n\t\t * * This only happens when a non-english locale is being used.\n\t\t * * It is our code running here and we should monitor this carefully for regressions.\n\t\t */\n\t\treadonly ellapsedNlsGeneration?: number;\n\n\t\t/**\n\t\t * The time it took to load the main bundle.\n\t\t *\n\t\t * * Happens in the main-process\n\t\t * * Measured with the `willLoadMainBundle` and `didLoadMainBundle` performance marks.\n\t\t */\n\t\treadonly ellapsedLoadMainBundle?: number;\n\n\t\t/**\n\t\t * The time it took to start the crash reporter.\n\t\t *\n\t\t * * Happens in the main-process\n\t\t * * Measured with the `willStartCrashReporter` and `didStartCrashReporter` performance marks.\n\t\t */\n\t\treadonly ellapsedCrashReporter?: number;\n\n\t\t/**\n\t\t * The time it took to create the main instance server.\n\t\t *\n\t\t * * Happens in the main-process\n\t\t * * Measured with the `willStartMainServer` and `didStartMainServer` performance marks.\n\t\t */\n\t\treadonly ellapsedMainServer?: number;\n\n\t\t/**\n\t\t * The time it took to create the window.\n\t\t *\n\t\t * * Happens in the main-process\n\t\t * * Measured with the `willCreateCodeWindow` and `didCreateCodeWindow` performance marks.\n\t\t */\n\t\treadonly ellapsedWindowCreate?: number;\n\n\t\t/**\n\t\t * The time it took to create the electron browser window.\n\t\t *\n\t\t * * Happens in the main-process\n\t\t * * Measured with the `willCreateCodeBrowserWindow` and `didCreateCodeBrowserWindow` performance marks.\n\t\t */\n\t\treadonly ellapsedBrowserWindowCreate?: number;\n\n\t\t/**\n\t\t * The time it took to restore and validate window state.\n\t\t *\n\t\t * * Happens in the main-process\n\t\t * * Measured with the `willRestoreCodeWindowState` and `didRestoreCodeWindowState` performance marks.\n\t\t */\n\t\treadonly ellapsedWindowRestoreState?: number;\n\n\t\t/**\n\t\t * The time it took to maximize/show the window.\n\t\t *\n\t\t * * Happens in the main-process\n\t\t * * Measured with the `willMaximizeCodeWindow` and `didMaximizeCodeWindow` performance marks.\n\t\t */\n\t\treadonly ellapsedWindowMaximize?: number;\n\n\t\t/**\n\t\t * The time it took to tell electron to open/restore a renderer (browser window).\n\t\t *\n\t\t * * Happens in the main-process\n\t\t * * Measured with the `main:appReady` and `code/willOpenNewWindow` performance marks.\n\t\t * * This can be compared between insider and stable builds.\n\t\t * * It is our code running here and we should monitor this carefully for regressions.\n\t\t */\n\t\treadonly ellapsedWindowLoad?: number;\n\n\t\t/**\n\t\t * The time it took to create a new renderer (browser window) and to initialize that to the point\n\t\t * of load the main-bundle (`workbench.desktop.main.js`).\n\t\t *\n\t\t * * Happens in the main-process *and* the renderer-process\n\t\t * * Measured with the `code/willOpenNewWindow` and `willLoadWorkbenchMain` performance marks.\n\t\t * * This can be compared between insider and stable builds.\n\t\t * * It is mostly not our code running here and we can only observe what's happening.\n\t\t *\n\t\t */\n\t\treadonly ellapsedWindowLoadToRequire: number;\n\n\t\t/**\n\t\t * The time it took to wait for resolving the window configuration. This time the workbench\n\t\t * will not continue to load and be blocked entirely.\n\t\t *\n\t\t * * Happens in the renderer-process\n\t\t * * Measured with the `willWaitForWindowConfig` and `didWaitForWindowConfig` performance marks.\n\t\t */\n\t\treadonly ellapsedWaitForWindowConfig: number;\n\n\t\t/**\n\t\t * The time it took to init the storage database connection from the workbench.\n\t\t *\n\t\t * * Happens in the renderer-process\n\t\t * * Measured with the `code/willInitStorage` and `code/didInitStorage` performance marks.\n\t\t */\n\t\treadonly ellapsedStorageInit: number;\n\n\t\t/**\n\t\t * The time it took to initialize the workspace and configuration service.\n\t\t *\n\t\t * * Happens in the renderer-process\n\t\t * * Measured with the `willInitWorkspaceService` and `didInitWorkspaceService` performance marks.\n\t\t */\n\t\treadonly ellapsedWorkspaceServiceInit: number;\n\n\t\t/**\n\t\t * The time it took to connect to the shared process.\n\t\t *\n\t\t * * Happens in the renderer-process\n\t\t * * Measured with the `willConnectSharedProcess` and `didConnectSharedProcess` performance marks.\n\t\t */\n\t\treadonly ellapsedSharedProcesConnected: number;\n\n\t\t/**\n\t\t * The time it took to initialize required user data (settings & global state) using settings sync service.\n\t\t *\n\t\t * * Happens in the renderer-process (only in Web)\n\t\t * * Measured with the `willInitRequiredUserData` and `didInitRequiredUserData` performance marks.\n\t\t */\n\t\treadonly ellapsedRequiredUserDataInit: number;\n\n\t\t/**\n\t\t * The time it took to initialize other user data (keybindings, snippets & extensions) using settings sync service.\n\t\t *\n\t\t * * Happens in the renderer-process (only in Web)\n\t\t * * Measured with the `willInitOtherUserData` and `didInitOtherUserData` performance marks.\n\t\t */\n\t\treadonly ellapsedOtherUserDataInit: number;\n\n\t\t/**\n\t\t * The time it took to load the main-bundle of the workbench, e.g. `workbench.desktop.main.js`.\n\t\t *\n\t\t * * Happens in the renderer-process\n\t\t * * Measured with the `willLoadWorkbenchMain` and `didLoadWorkbenchMain` performance marks.\n\t\t * * This varies *a lot* when V8 cached data could be used or not\n\t\t * * This should be looked at with and without V8 cached data usage and per electron/v8 version\n\t\t * * This is affected by the size of our code bundle (which  grows about 3-5% per release)\n\t\t */\n\t\treadonly ellapsedRequire: number;\n\n\t\t/**\n\t\t * The time it took to read extensions' package.json-files *and* interpret them (invoking\n\t\t * the contribution points).\n\t\t *\n\t\t * * Happens in the renderer-process\n\t\t * * Measured with the `willLoadExtensions` and `didLoadExtensions` performance marks.\n\t\t * * Reading of package.json-files is avoided by caching them all in a single file (after the read,\n\t\t * until another extension is installed)\n\t\t * * Happens in parallel to other things, depends on async timing\n\t\t */\n\t\treadonly ellapsedExtensions: number;\n\n\t\t// the time from start till `didLoadExtensions`\n\t\t// remove?\n\t\treadonly ellapsedExtensionsReady: number;\n\n\t\t/**\n\t\t * The time it took to restore the viewlet.\n\t\t *\n\t\t * * Happens in the renderer-process\n\t\t * * Measured with the `willRestoreViewlet` and `didRestoreViewlet` performance marks.\n\t\t * * This should be looked at per viewlet-type/id.\n\t\t * * Happens in parallel to other things, depends on async timing\n\t\t */\n\t\treadonly ellapsedViewletRestore: number;\n\n\t\t/**\n\t\t * The time it took to restore the panel.\n\t\t *\n\t\t * * Happens in the renderer-process\n\t\t * * Measured with the `willRestorePanel` and `didRestorePanel` performance marks.\n\t\t * * This should be looked at per panel-type/id.\n\t\t * * Happens in parallel to other things, depends on async timing\n\t\t */\n\t\treadonly ellapsedPanelRestore: number;\n\n\t\t/**\n\t\t * The time it took to restore and fully resolve visible editors - that is text editor\n\t\t * and complex editor likes the settings UI or webviews (markdown preview).\n\t\t *\n\t\t * * Happens in the renderer-process\n\t\t * * Measured with the `willRestoreEditors` and `didRestoreEditors` performance marks.\n\t\t * * This should be looked at per editor and per editor type.\n\t\t * * Happens in parallel to other things, depends on async timing\n\t\t */\n\t\treadonly ellapsedEditorRestore: number;\n\n\t\t/**\n\t\t * The time it took to create all workbench contributions on the starting and ready\n\t\t * lifecycle phase, thus blocking `ellapsedWorkbench`.\n\t\t *\n\t\t * * Happens in the renderer-process\n\t\t * * Measured with the `willCreateWorkbenchContributions/1` and `didCreateWorkbenchContributions/2` performance marks.\n\t\t *\n\t\t */\n\t\treadonly ellapsedWorkbenchContributions: number;\n\n\t\t/**\n\t\t * The time it took to create the workbench.\n\t\t *\n\t\t * * Happens in the renderer-process\n\t\t * * Measured with the `willStartWorkbench` and `didStartWorkbench` performance marks.\n\t\t */\n\t\treadonly ellapsedWorkbench: number;\n\n\t\t/**\n\t\t * This time it took inside the renderer to start the workbench.\n\t\t *\n\t\t * * Happens in the renderer-process\n\t\t * * Measured with the `renderer/started` and `didStartWorkbench` performance marks\n\t\t */\n\t\treadonly ellapsedRenderer: number;\n\t};\n\n\treadonly hasAccessibilitySupport: boolean;\n\treadonly isVMLikelyhood?: number;\n\treadonly platform?: string;\n\treadonly release?: string;\n\treadonly arch?: string;\n\treadonly totalmem?: number;\n\treadonly freemem?: number;\n\treadonly meminfo?: IMemoryInfo;\n\treadonly cpus?: { count: number; speed: number; model: string };\n\treadonly loadavg?: number[];\n\treadonly isARM64Emulated?: boolean;\n}\n\nexport interface ITimerService {\n\treadonly _serviceBrand: undefined;\n\n\t/**\n\t * A promise that resolved when startup timings and perf marks\n\t * are available. This depends on lifecycle phases and extension\n\t * hosts being started.\n\t */\n\twhenReady(): Promise<boolean>;\n\n\t/**\n\t * A baseline performance indicator for this machine. The value will only available\n\t * late after startup because computing it takes away CPU resources\n\t *\n\t * NOTE that this returns -1 if the machine is hopelessly slow...\n\t */\n\tperfBaseline: Promise<number>;\n\n\t/**\n\t * Startup metrics. Can ONLY be accessed after `whenReady` has resolved.\n\t */\n\treadonly startupMetrics: IStartupMetrics;\n\n\t/**\n\t * Deliver performance marks from a source, like the main process or extension hosts.\n\t * The source argument acts as an identifier and therefore it must be unique.\n\t */\n\tsetPerformanceMarks(source: string, marks: perf.PerformanceMark[]): void;\n\n\t/**\n\t * Get all currently known performance marks by source. There is no sorting of the\n\t * returned tuples but the marks of a tuple are guaranteed to be sorted by start times.\n\t */\n\tgetPerformanceMarks(): [\n\t\tsource: string,\n\t\tmarks: readonly perf.PerformanceMark[],\n\t][];\n\n\t/**\n\t * Return the duration between two marks.\n\t * @param from from mark name\n\t * @param to to mark name\n\t */\n\tgetDuration(from: string, to: string): number;\n\n\t/**\n\t * Return the timestamp of a mark.\n\t * @param mark mark name\n\t */\n\tgetStartTime(mark: string): number;\n}\n\nexport const ITimerService = createDecorator<ITimerService>(\"timerService\");\n\nclass PerfMarks {\n\tprivate readonly _entries: [string, perf.PerformanceMark[]][] = [];\n\n\tsetMarks(source: string, entries: perf.PerformanceMark[]): void {\n\t\tthis._entries.push([source, entries]);\n\t}\n\n\tgetDuration(from: string, to: string): number {\n\t\tconst fromEntry = this._findEntry(from);\n\t\tif (!fromEntry) {\n\t\t\treturn 0;\n\t\t}\n\t\tconst toEntry = this._findEntry(to);\n\t\tif (!toEntry) {\n\t\t\treturn 0;\n\t\t}\n\t\treturn toEntry.startTime - fromEntry.startTime;\n\t}\n\n\tgetStartTime(mark: string): number {\n\t\tconst entry = this._findEntry(mark);\n\t\treturn entry ? entry.startTime : -1;\n\t}\n\n\tprivate _findEntry(name: string): perf.PerformanceMark | void {\n\t\tfor (const [, marks] of this._entries) {\n\t\t\tfor (let i = marks.length - 1; i >= 0; i--) {\n\t\t\t\tif (marks[i].name === name) {\n\t\t\t\t\treturn marks[i];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tgetEntries() {\n\t\treturn this._entries.slice(0);\n\t}\n}\n\nexport type Writeable<T> = { -readonly [P in keyof T]: Writeable<T[P]> };\n\nexport abstract class AbstractTimerService implements ITimerService {\n\tdeclare readonly _serviceBrand: undefined;\n\n\tprivate readonly _barrier = new Barrier();\n\tprivate readonly _marks = new PerfMarks();\n\tprivate readonly _rndValueShouldSendTelemetry = Math.random() < 0.05; // 5% of users\n\n\tprivate _startupMetrics?: IStartupMetrics;\n\n\treadonly perfBaseline: Promise<number>;\n\n\tconstructor(\n\t\t@ILifecycleService\n\t\tprivate readonly _lifecycleService: ILifecycleService,\n\t\t@IWorkspaceContextService\n\t\tprivate readonly _contextService: IWorkspaceContextService,\n\t\t@IExtensionService\n\t\tprivate readonly _extensionService: IExtensionService,\n\t\t@IUpdateService private readonly _updateService: IUpdateService,\n\t\t@IPaneCompositePartService\n\t\tprivate readonly _paneCompositeService: IPaneCompositePartService,\n\t\t@IEditorService private readonly _editorService: IEditorService,\n\t\t@IAccessibilityService\n\t\tprivate readonly _accessibilityService: IAccessibilityService,\n\t\t@ITelemetryService\n\t\tprivate readonly _telemetryService: ITelemetryService,\n\t\t@IWorkbenchLayoutService layoutService: IWorkbenchLayoutService,\n\t) {\n\t\tPromise.all([\n\t\t\tthis._extensionService.whenInstalledExtensionsRegistered(), // extensions registered\n\t\t\t_lifecycleService.when(LifecyclePhase.Restored), // workbench created and parts restored\n\t\t\tlayoutService.whenRestored, // layout restored (including visible editors resolved)\n\t\t\tPromise.all(\n\t\t\t\tArray.from(\n\t\t\t\t\tRegistry.as<ITerminalBackendRegistry>(\n\t\t\t\t\t\tTerminalExtensions.Backend,\n\t\t\t\t\t).backends.values(),\n\t\t\t\t).map((e) => e.whenReady),\n\t\t\t),\n\t\t])\n\t\t\t.then(() => {\n\t\t\t\t// set perf mark from renderer\n\t\t\t\tthis.setPerformanceMarks(\"renderer\", perf.getMarks());\n\t\t\t\treturn this._computeStartupMetrics();\n\t\t\t})\n\t\t\t.then((metrics) => {\n\t\t\t\tthis._startupMetrics = metrics;\n\t\t\t\tthis._reportStartupTimes(metrics);\n\t\t\t\tthis._barrier.open();\n\t\t\t});\n\n\t\tthis.perfBaseline = this._barrier\n\t\t\t.wait()\n\t\t\t.then(() => this._lifecycleService.when(LifecyclePhase.Eventually))\n\t\t\t.then(() => timeout(this._startupMetrics!.timers.ellapsedRequire))\n\t\t\t.then(() => {\n\t\t\t\t// we use fibonacci numbers to have a performance baseline that indicates\n\t\t\t\t// how slow/fast THIS machine actually is.\n\n\t\t\t\tconst jsSrc = function (this: WindowOrWorkerGlobalScope) {\n\t\t\t\t\t// the following operation took ~16ms (one frame at 64FPS) to complete on my machine. We derive performance observations\n\t\t\t\t\t// from that. We also bail if that took too long (>1s)\n\t\t\t\t\tlet tooSlow = false;\n\t\t\t\t\tfunction fib(n: number): number {\n\t\t\t\t\t\tif (tooSlow) {\n\t\t\t\t\t\t\treturn 0;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (performance.now() - t1 >= 1000) {\n\t\t\t\t\t\t\ttooSlow = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (n <= 2) {\n\t\t\t\t\t\t\treturn n;\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn fib(n - 1) + fib(n - 2);\n\t\t\t\t\t}\n\n\t\t\t\t\tconst t1 = performance.now();\n\t\t\t\t\tfib(24);\n\t\t\t\t\tconst value = Math.round(performance.now() - t1);\n\t\t\t\t\tself.postMessage({ value: tooSlow ? -1 : value });\n\t\t\t\t}.toString();\n\n\t\t\t\tconst blob = new Blob([`(${jsSrc})();`], {\n\t\t\t\t\ttype: \"application/javascript\",\n\t\t\t\t});\n\t\t\t\tconst blobUrl = URL.createObjectURL(blob);\n\n\t\t\t\tconst worker = createBlobWorker(blobUrl, {\n\t\t\t\t\tname: \"perfBaseline\",\n\t\t\t\t});\n\t\t\t\treturn new Promise<number>((resolve) => {\n\t\t\t\t\tworker.onmessage = (e) => resolve(e.data.value);\n\t\t\t\t}).finally(() => {\n\t\t\t\t\tworker.terminate();\n\t\t\t\t\tURL.revokeObjectURL(blobUrl);\n\t\t\t\t});\n\t\t\t});\n\t}\n\n\twhenReady(): Promise<boolean> {\n\t\treturn this._barrier.wait();\n\t}\n\n\tget startupMetrics(): IStartupMetrics {\n\t\tif (!this._startupMetrics) {\n\t\t\tthrow new Error(\n\t\t\t\t\"illegal state, MUST NOT access startupMetrics before whenReady has resolved\",\n\t\t\t);\n\t\t}\n\t\treturn this._startupMetrics;\n\t}\n\n\tsetPerformanceMarks(source: string, marks: perf.PerformanceMark[]): void {\n\t\t// Perf marks are a shared resource because anyone can generate them\n\t\t// and because of that we only accept marks that start with 'code/'\n\t\tconst codeMarks = marks.filter((mark) => mark.name.startsWith(\"code/\"));\n\t\tthis._marks.setMarks(source, codeMarks);\n\t\tthis._reportPerformanceMarks(source, codeMarks);\n\t}\n\n\tgetPerformanceMarks(): [\n\t\tsource: string,\n\t\tmarks: readonly perf.PerformanceMark[],\n\t][] {\n\t\treturn this._marks.getEntries();\n\t}\n\n\tgetDuration(from: string, to: string): number {\n\t\treturn this._marks.getDuration(from, to);\n\t}\n\n\tgetStartTime(mark: string): number {\n\t\treturn this._marks.getStartTime(mark);\n\t}\n\n\tprivate _reportStartupTimes(metrics: IStartupMetrics): void {\n\t\t// report IStartupMetrics as telemetry\n\t\t/* __GDPR__\n\t\t\t\"startupTimeVaried\" : {\n\t\t\t\t\"owner\": \"jrieken\",\n\t\t\t\t\"${include}\": [\n\t\t\t\t\t\"${IStartupMetrics}\"\n\t\t\t\t]\n\t\t\t}\n\t\t*/\n\t\tthis._telemetryService.publicLog(\"startupTimeVaried\", metrics);\n\t}\n\n\tprotected _shouldReportPerfMarks(): boolean {\n\t\treturn this._rndValueShouldSendTelemetry;\n\t}\n\n\tprivate _reportPerformanceMarks(\n\t\tsource: string,\n\t\tmarks: perf.PerformanceMark[],\n\t) {\n\t\tif (!this._shouldReportPerfMarks()) {\n\t\t\t// the `startup.timer.mark` event is send very often. In order to save resources\n\t\t\t// we let some of our instances/sessions send this event\n\t\t\treturn;\n\t\t}\n\n\t\t// report raw timers as telemetry. each mark is send a separate telemetry\n\t\t// event and it is \"normalized\" to a relative timestamp where the first mark\n\t\t// defines the start\n\n\t\ttype Mark = {\n\t\t\tsource: string;\n\t\t\tname: TelemetryTrustedValue<string>;\n\t\t\tstartTime: number;\n\t\t};\n\t\ttype MarkClassification = {\n\t\t\towner: \"jrieken\";\n\t\t\tcomment: \"Information about a performance marker\";\n\t\t\tsource: {\n\t\t\t\tclassification: \"SystemMetaData\";\n\t\t\t\tpurpose: \"PerformanceAndHealth\";\n\t\t\t\tcomment: \"Where this marker was generated, e.g main, renderer, extension host\";\n\t\t\t};\n\t\t\tname: {\n\t\t\t\tclassification: \"SystemMetaData\";\n\t\t\t\tpurpose: \"PerformanceAndHealth\";\n\t\t\t\tcomment: \"The name of this marker (as defined in source code)\";\n\t\t\t};\n\t\t\tstartTime: {\n\t\t\t\tclassification: \"SystemMetaData\";\n\t\t\t\tpurpose: \"PerformanceAndHealth\";\n\t\t\t\tcomment: \"The absolute timestamp (unix time)\";\n\t\t\t};\n\t\t};\n\n\t\tfor (const mark of marks) {\n\t\t\tthis._telemetryService.publicLog2<Mark, MarkClassification>(\n\t\t\t\t\"startup.timer.mark\",\n\t\t\t\t{\n\t\t\t\t\tsource,\n\t\t\t\t\tname: new TelemetryTrustedValue(mark.name),\n\t\t\t\t\tstartTime: mark.startTime,\n\t\t\t\t},\n\t\t\t);\n\t\t}\n\t}\n\n\tprivate async _computeStartupMetrics(): Promise<IStartupMetrics> {\n\t\tconst initialStartup = this._isInitialStartup();\n\t\tlet startMark: string;\n\t\tif (isWeb) {\n\t\t\tstartMark = \"code/timeOrigin\";\n\t\t} else {\n\t\t\tstartMark = initialStartup\n\t\t\t\t? \"code/didStartMain\"\n\t\t\t\t: \"code/willOpenNewWindow\";\n\t\t}\n\n\t\tconst activeViewlet = this._paneCompositeService.getActivePaneComposite(\n\t\t\tViewContainerLocation.Sidebar,\n\t\t);\n\t\tconst activePanel = this._paneCompositeService.getActivePaneComposite(\n\t\t\tViewContainerLocation.Panel,\n\t\t);\n\t\tconst info: Writeable<IStartupMetrics> = {\n\t\t\tversion: 2,\n\t\t\tellapsed: this._marks.getDuration(\n\t\t\t\tstartMark,\n\t\t\t\t\"code/didStartWorkbench\",\n\t\t\t),\n\n\t\t\t// reflections\n\t\t\tisLatestVersion: Boolean(\n\t\t\t\tawait this._updateService.isLatestVersion(),\n\t\t\t),\n\t\t\tdidUseCachedData: this._didUseCachedData(),\n\t\t\twindowKind: this._lifecycleService.startupKind,\n\t\t\twindowCount: await this._getWindowCount(),\n\t\t\tviewletId: activeViewlet?.getId(),\n\t\t\teditorIds: this._editorService.visibleEditors.map(\n\t\t\t\t(input) => input.typeId,\n\t\t\t),\n\t\t\tpanelId: activePanel ? activePanel.getId() : undefined,\n\n\t\t\t// timers\n\t\t\ttimers: {\n\t\t\t\tellapsedAppReady: initialStartup\n\t\t\t\t\t? this._marks.getDuration(\n\t\t\t\t\t\t\t\"code/didStartMain\",\n\t\t\t\t\t\t\t\"code/mainAppReady\",\n\t\t\t\t\t\t)\n\t\t\t\t\t: undefined,\n\t\t\t\tellapsedNlsGeneration: initialStartup\n\t\t\t\t\t? this._marks.getDuration(\n\t\t\t\t\t\t\t\"code/willGenerateNls\",\n\t\t\t\t\t\t\t\"code/didGenerateNls\",\n\t\t\t\t\t\t)\n\t\t\t\t\t: undefined,\n\t\t\t\tellapsedLoadMainBundle: initialStartup\n\t\t\t\t\t? this._marks.getDuration(\n\t\t\t\t\t\t\t\"code/willLoadMainBundle\",\n\t\t\t\t\t\t\t\"code/didLoadMainBundle\",\n\t\t\t\t\t\t)\n\t\t\t\t\t: undefined,\n\t\t\t\tellapsedCrashReporter: initialStartup\n\t\t\t\t\t? this._marks.getDuration(\n\t\t\t\t\t\t\t\"code/willStartCrashReporter\",\n\t\t\t\t\t\t\t\"code/didStartCrashReporter\",\n\t\t\t\t\t\t)\n\t\t\t\t\t: undefined,\n\t\t\t\tellapsedMainServer: initialStartup\n\t\t\t\t\t? this._marks.getDuration(\n\t\t\t\t\t\t\t\"code/willStartMainServer\",\n\t\t\t\t\t\t\t\"code/didStartMainServer\",\n\t\t\t\t\t\t)\n\t\t\t\t\t: undefined,\n\t\t\t\tellapsedWindowCreate: initialStartup\n\t\t\t\t\t? this._marks.getDuration(\n\t\t\t\t\t\t\t\"code/willCreateCodeWindow\",\n\t\t\t\t\t\t\t\"code/didCreateCodeWindow\",\n\t\t\t\t\t\t)\n\t\t\t\t\t: undefined,\n\t\t\t\tellapsedWindowRestoreState: initialStartup\n\t\t\t\t\t? this._marks.getDuration(\n\t\t\t\t\t\t\t\"code/willRestoreCodeWindowState\",\n\t\t\t\t\t\t\t\"code/didRestoreCodeWindowState\",\n\t\t\t\t\t\t)\n\t\t\t\t\t: undefined,\n\t\t\t\tellapsedBrowserWindowCreate: initialStartup\n\t\t\t\t\t? this._marks.getDuration(\n\t\t\t\t\t\t\t\"code/willCreateCodeBrowserWindow\",\n\t\t\t\t\t\t\t\"code/didCreateCodeBrowserWindow\",\n\t\t\t\t\t\t)\n\t\t\t\t\t: undefined,\n\t\t\t\tellapsedWindowMaximize: initialStartup\n\t\t\t\t\t? this._marks.getDuration(\n\t\t\t\t\t\t\t\"code/willMaximizeCodeWindow\",\n\t\t\t\t\t\t\t\"code/didMaximizeCodeWindow\",\n\t\t\t\t\t\t)\n\t\t\t\t\t: undefined,\n\t\t\t\tellapsedWindowLoad: initialStartup\n\t\t\t\t\t? this._marks.getDuration(\n\t\t\t\t\t\t\t\"code/mainAppReady\",\n\t\t\t\t\t\t\t\"code/willOpenNewWindow\",\n\t\t\t\t\t\t)\n\t\t\t\t\t: undefined,\n\t\t\t\tellapsedWindowLoadToRequire: this._marks.getDuration(\n\t\t\t\t\t\"code/willOpenNewWindow\",\n\t\t\t\t\t\"code/willLoadWorkbenchMain\",\n\t\t\t\t),\n\t\t\t\tellapsedRequire: this._marks.getDuration(\n\t\t\t\t\t\"code/willLoadWorkbenchMain\",\n\t\t\t\t\t\"code/didLoadWorkbenchMain\",\n\t\t\t\t),\n\t\t\t\tellapsedWaitForWindowConfig: this._marks.getDuration(\n\t\t\t\t\t\"code/willWaitForWindowConfig\",\n\t\t\t\t\t\"code/didWaitForWindowConfig\",\n\t\t\t\t),\n\t\t\t\tellapsedStorageInit: this._marks.getDuration(\n\t\t\t\t\t\"code/willInitStorage\",\n\t\t\t\t\t\"code/didInitStorage\",\n\t\t\t\t),\n\t\t\t\tellapsedSharedProcesConnected: this._marks.getDuration(\n\t\t\t\t\t\"code/willConnectSharedProcess\",\n\t\t\t\t\t\"code/didConnectSharedProcess\",\n\t\t\t\t),\n\t\t\t\tellapsedWorkspaceServiceInit: this._marks.getDuration(\n\t\t\t\t\t\"code/willInitWorkspaceService\",\n\t\t\t\t\t\"code/didInitWorkspaceService\",\n\t\t\t\t),\n\t\t\t\tellapsedRequiredUserDataInit: this._marks.getDuration(\n\t\t\t\t\t\"code/willInitRequiredUserData\",\n\t\t\t\t\t\"code/didInitRequiredUserData\",\n\t\t\t\t),\n\t\t\t\tellapsedOtherUserDataInit: this._marks.getDuration(\n\t\t\t\t\t\"code/willInitOtherUserData\",\n\t\t\t\t\t\"code/didInitOtherUserData\",\n\t\t\t\t),\n\t\t\t\tellapsedExtensions: this._marks.getDuration(\n\t\t\t\t\t\"code/willLoadExtensions\",\n\t\t\t\t\t\"code/didLoadExtensions\",\n\t\t\t\t),\n\t\t\t\tellapsedEditorRestore: this._marks.getDuration(\n\t\t\t\t\t\"code/willRestoreEditors\",\n\t\t\t\t\t\"code/didRestoreEditors\",\n\t\t\t\t),\n\t\t\t\tellapsedViewletRestore: this._marks.getDuration(\n\t\t\t\t\t\"code/willRestoreViewlet\",\n\t\t\t\t\t\"code/didRestoreViewlet\",\n\t\t\t\t),\n\t\t\t\tellapsedPanelRestore: this._marks.getDuration(\n\t\t\t\t\t\"code/willRestorePanel\",\n\t\t\t\t\t\"code/didRestorePanel\",\n\t\t\t\t),\n\t\t\t\tellapsedWorkbenchContributions: this._marks.getDuration(\n\t\t\t\t\t\"code/willCreateWorkbenchContributions/1\",\n\t\t\t\t\t\"code/didCreateWorkbenchContributions/2\",\n\t\t\t\t),\n\t\t\t\tellapsedWorkbench: this._marks.getDuration(\n\t\t\t\t\t\"code/willStartWorkbench\",\n\t\t\t\t\t\"code/didStartWorkbench\",\n\t\t\t\t),\n\t\t\t\tellapsedExtensionsReady: this._marks.getDuration(\n\t\t\t\t\tstartMark,\n\t\t\t\t\t\"code/didLoadExtensions\",\n\t\t\t\t),\n\t\t\t\tellapsedRenderer: this._marks.getDuration(\n\t\t\t\t\t\"code/didStartRenderer\",\n\t\t\t\t\t\"code/didStartWorkbench\",\n\t\t\t\t),\n\t\t\t},\n\n\t\t\t// system info\n\t\t\tplatform: undefined,\n\t\t\trelease: undefined,\n\t\t\tarch: undefined,\n\t\t\ttotalmem: undefined,\n\t\t\tfreemem: undefined,\n\t\t\tmeminfo: undefined,\n\t\t\tcpus: undefined,\n\t\t\tloadavg: undefined,\n\t\t\tisVMLikelyhood: undefined,\n\t\t\tinitialStartup,\n\t\t\thasAccessibilitySupport:\n\t\t\t\tthis._accessibilityService.isScreenReaderOptimized(),\n\t\t\temptyWorkbench:\n\t\t\t\tthis._contextService.getWorkbenchState() ===\n\t\t\t\tWorkbenchState.EMPTY,\n\t\t};\n\n\t\tawait this._extendStartupInfo(info);\n\t\treturn info;\n\t}\n\n\tprotected abstract _isInitialStartup(): boolean;\n\n\tprotected abstract _didUseCachedData(): boolean;\n\n\tprotected abstract _getWindowCount(): Promise<number>;\n\n\tprotected abstract _extendStartupInfo(\n\t\tinfo: Writeable<IStartupMetrics>,\n\t): Promise<void>;\n}\n\nexport class TimerService extends AbstractTimerService {\n\tprotected _isInitialStartup(): boolean {\n\t\treturn false;\n\t}\n\tprotected _didUseCachedData(): boolean {\n\t\treturn false;\n\t}\n\tprotected async _getWindowCount(): Promise<number> {\n\t\treturn 1;\n\t}\n\tprotected async _extendStartupInfo(\n\t\tinfo: Writeable<IStartupMetrics>,\n\t): Promise<void> {\n\t\tinfo.isVMLikelyhood = 0;\n\t\tinfo.isARM64Emulated = false;\n\t\tinfo.platform = navigator.userAgent;\n\t\tinfo.release = navigator.appVersion;\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
