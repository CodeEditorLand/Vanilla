{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/timer/electron-sandbox/timerService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { INativeHostService } from '../../../../platform/native/common/native.js';\nimport { INativeWorkbenchEnvironmentService } from '../../environment/electron-sandbox/environmentService.js';\nimport { IWorkspaceContextService } from '../../../../platform/workspace/common/workspace.js';\nimport { IExtensionService } from '../../extensions/common/extensions.js';\nimport { IUpdateService } from '../../../../platform/update/common/update.js';\nimport { ILifecycleService } from '../../lifecycle/common/lifecycle.js';\nimport { IEditorService } from '../../editor/common/editorService.js';\nimport { IAccessibilityService } from '../../../../platform/accessibility/common/accessibility.js';\nimport { IStartupMetrics, AbstractTimerService, Writeable, ITimerService } from '../browser/timerService.js';\nimport { ITelemetryService } from '../../../../platform/telemetry/common/telemetry.js';\nimport { process } from '../../../../base/parts/sandbox/electron-sandbox/globals.js';\nimport { InstantiationType, registerSingleton } from '../../../../platform/instantiation/common/extensions.js';\nimport { IWorkbenchLayoutService } from '../../layout/browser/layoutService.js';\nimport { IProductService } from '../../../../platform/product/common/productService.js';\nimport { IStorageService, StorageScope, StorageTarget } from '../../../../platform/storage/common/storage.js';\nimport { IPaneCompositePartService } from '../../panecomposite/browser/panecomposite.js';\n\nexport class TimerService extends AbstractTimerService {\n\n\tconstructor(\n\t\t@INativeHostService private readonly _nativeHostService: INativeHostService,\n\t\t@INativeWorkbenchEnvironmentService private readonly _environmentService: INativeWorkbenchEnvironmentService,\n\t\t@ILifecycleService lifecycleService: ILifecycleService,\n\t\t@IWorkspaceContextService contextService: IWorkspaceContextService,\n\t\t@IExtensionService extensionService: IExtensionService,\n\t\t@IUpdateService updateService: IUpdateService,\n\t\t@IPaneCompositePartService paneCompositeService: IPaneCompositePartService,\n\t\t@IEditorService editorService: IEditorService,\n\t\t@IAccessibilityService accessibilityService: IAccessibilityService,\n\t\t@ITelemetryService telemetryService: ITelemetryService,\n\t\t@IWorkbenchLayoutService layoutService: IWorkbenchLayoutService,\n\t\t@IProductService private readonly _productService: IProductService,\n\t\t@IStorageService private readonly _storageService: IStorageService\n\t) {\n\t\tsuper(lifecycleService, contextService, extensionService, updateService, paneCompositeService, editorService, accessibilityService, telemetryService, layoutService);\n\t\tthis.setPerformanceMarks('main', _environmentService.window.perfMarks);\n\t}\n\n\tprotected _isInitialStartup(): boolean {\n\t\treturn Boolean(this._environmentService.window.isInitialStartup);\n\t}\n\tprotected _didUseCachedData(): boolean {\n\t\treturn didUseCachedData(this._productService, this._storageService, this._environmentService);\n\t}\n\tprotected _getWindowCount(): Promise<number> {\n\t\treturn this._nativeHostService.getWindowCount();\n\t}\n\n\tprotected async _extendStartupInfo(info: Writeable<IStartupMetrics>): Promise<void> {\n\t\ttry {\n\t\t\tconst [osProperties, osStatistics, virtualMachineHint, isARM64Emulated] = await Promise.all([\n\t\t\t\tthis._nativeHostService.getOSProperties(),\n\t\t\t\tthis._nativeHostService.getOSStatistics(),\n\t\t\t\tthis._nativeHostService.getOSVirtualMachineHint(),\n\t\t\t\tthis._nativeHostService.isRunningUnderARM64Translation()\n\t\t\t]);\n\n\t\t\tinfo.totalmem = osStatistics.totalmem;\n\t\t\tinfo.freemem = osStatistics.freemem;\n\t\t\tinfo.platform = osProperties.platform;\n\t\t\tinfo.release = osProperties.release;\n\t\t\tinfo.arch = osProperties.arch;\n\t\t\tinfo.loadavg = osStatistics.loadavg;\n\t\t\tinfo.isARM64Emulated = isARM64Emulated;\n\n\t\t\tconst processMemoryInfo = await process.getProcessMemoryInfo();\n\t\t\tinfo.meminfo = {\n\t\t\t\tworkingSetSize: processMemoryInfo.residentSet,\n\t\t\t\tprivateBytes: processMemoryInfo.private,\n\t\t\t\tsharedBytes: processMemoryInfo.shared\n\t\t\t};\n\n\t\t\tinfo.isVMLikelyhood = Math.round((virtualMachineHint * 100));\n\n\t\t\tconst rawCpus = osProperties.cpus;\n\t\t\tif (rawCpus && rawCpus.length > 0) {\n\t\t\t\tinfo.cpus = { count: rawCpus.length, speed: rawCpus[0].speed, model: rawCpus[0].model };\n\t\t\t}\n\t\t} catch (error) {\n\t\t\t// ignore, be on the safe side with these hardware method calls\n\t\t}\n\t}\n\n\tprotected override _shouldReportPerfMarks(): boolean {\n\t\t// always send when running with the prof-append-timers flag\n\t\treturn super._shouldReportPerfMarks() || Boolean(this._environmentService.args['prof-append-timers']);\n\t}\n}\n\nregisterSingleton(ITimerService, TimerService, InstantiationType.Delayed);\n\n//#region cached data logic\n\nconst lastRunningCommitStorageKey = 'perf/lastRunningCommit';\nlet _didUseCachedData: boolean | undefined = undefined;\n\nexport function didUseCachedData(productService: IProductService, storageService: IStorageService, environmentService: INativeWorkbenchEnvironmentService): boolean {\n\t// browser code loading: only a guess based on\n\t// this being the first start with the commit\n\t// or subsequent\n\tif (typeof _didUseCachedData !== 'boolean') {\n\t\tif (!environmentService.window.isCodeCaching || !productService.commit) {\n\t\t\t_didUseCachedData = false; // we only produce cached data whith commit and code cache path\n\t\t} else if (storageService.get(lastRunningCommitStorageKey, StorageScope.APPLICATION) === productService.commit) {\n\t\t\t_didUseCachedData = true; // subsequent start on same commit, assume cached data is there\n\t\t} else {\n\t\t\tstorageService.store(lastRunningCommitStorageKey, productService.commit, StorageScope.APPLICATION, StorageTarget.MACHINE);\n\t\t\t_didUseCachedData = false; // first time start on commit, assume cached data is not yet there\n\t\t}\n\t}\n\treturn _didUseCachedData;\n}\n\n//#endregion\n"],
  "mappings": "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",
  "names": []
}
