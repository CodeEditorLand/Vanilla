var M=Object.defineProperty;var k=Object.getOwnPropertyDescriptor;var m=(s,n,t,e)=>{for(var a=e>1?void 0:e?k(n,t):n,r=s.length-1,o;r>=0;r--)(o=s[r])&&(a=(e?o(n,t,a):o(a))||a);return e&&a&&M(n,t,a),a},u=(s,n)=>(t,e)=>n(t,e,s);import"../../../../base/browser/keyboardEvent.js";import{isESM as S}from"../../../../base/common/amd.js";import{RunOnceScheduler as w}from"../../../../base/common/async.js";import{Emitter as h,Event as C}from"../../../../base/common/event.js";import{getNodeType as A,parse as D}from"../../../../base/common/json.js";import{Disposable as b}from"../../../../base/common/lifecycle.js";import{FileAccess as x}from"../../../../base/common/network.js";import*as E from"../../../../base/common/objects.js";import{isMacintosh as U,isWindows as z,OperatingSystem as R,OS as c}from"../../../../base/common/platform.js";import"../../../../base/common/uri.js";import*as g from"../../../../nls.js";import{ICommandService as F}from"../../../../platform/commands/common/commands.js";import{IConfigurationService as B}from"../../../../platform/configuration/common/configuration.js";import{Extensions as N}from"../../../../platform/configuration/common/configurationRegistry.js";import{IEnvironmentService as P}from"../../../../platform/environment/common/environment.js";import{IFileService as O}from"../../../../platform/files/common/files.js";import{InstantiationType as W,registerSingleton as G}from"../../../../platform/instantiation/common/extensions.js";import"../../../../platform/keybinding/common/keybinding.js";import{DispatchConfig as j,readKeyboardConfig as T}from"../../../../platform/keyboardLayout/common/keyboardConfig.js";import{getKeyboardLayoutId as _,IKeyboardLayoutService as q}from"../../../../platform/keyboardLayout/common/keyboardLayout.js";import{CachedKeyboardMapper as V}from"../../../../platform/keyboardLayout/common/keyboardMapper.js";import{INotificationService as $}from"../../../../platform/notification/common/notification.js";import{Registry as H}from"../../../../platform/registry/common/platform.js";import{IStorageService as J}from"../../../../platform/storage/common/storage.js";import{FallbackKeyboardMapper as I}from"../common/fallbackKeyboardMapper.js";import{KeymapInfo as v}from"../common/keymapInfo.js";import{MacLinuxKeyboardMapper as Q}from"../common/macLinuxKeyboardMapper.js";import{WindowsKeyboardMapper as X}from"../common/windowsKeyboardMapper.js";import"./navigatorKeyboard.js";class Y extends b{constructor(t){super();this._configurationService=t;this._keyboardMapper=null,this._initialized=!1,this._keymapInfos=[],this._mru=[],this._activeKeymapInfo=null,navigator.keyboard&&navigator.keyboard.addEventListener&&navigator.keyboard.addEventListener("layoutchange",()=>{this._getBrowserKeyMapping().then(e=>{this.isKeyMappingActive(e)||this.setLayoutFromBrowserAPI()})}),this._register(this._configurationService.onDidChangeConfiguration(e=>{e.affectsConfiguration("keyboard")&&(this._keyboardMapper=null,this._onDidChangeKeyboardMapper.fire())}))}_initialized;_keyboardMapper;_onDidChangeKeyboardMapper=new h;onDidChangeKeyboardMapper=this._onDidChangeKeyboardMapper.event;_keymapInfos;_mru;_activeKeymapInfo;keyboardLayoutMapAllowed=navigator.keyboard!==void 0;get activeKeymap(){return this._activeKeymapInfo}get keymapInfos(){return this._keymapInfos}get activeKeyboardLayout(){return this._initialized?this._activeKeymapInfo?.layout??null:null}get activeKeyMapping(){return this._initialized?this._activeKeymapInfo?.mapping??null:null}get keyboardLayouts(){return this._keymapInfos.map(t=>t.layout)}registerKeyboardLayout(t){this._keymapInfos.push(t),this._mru=this._keymapInfos}removeKeyboardLayout(t){let e=this._mru.indexOf(t);this._mru.splice(e,1),e=this._keymapInfos.indexOf(t),this._keymapInfos.splice(e,1)}getMatchedKeymapInfo(t){if(!t)return null;const e=this.getUSStandardLayout();if(e){let a=e.getScore(t);if(a===0)return{result:e,score:0};let r=e;for(let o=0;o<this._mru.length;o++){const i=this._mru[o].getScore(t);if(i>a){if(i===0)return{result:this._mru[o],score:0};a=i,r=this._mru[o]}}return{result:r,score:a}}for(let a=0;a<this._mru.length;a++)if(this._mru[a].fuzzyEqual(t))return{result:this._mru[a],score:0};return null}getUSStandardLayout(){const t=this._mru.filter(e=>e.layout.isUSStandard);return t.length?t[0]:null}isKeyMappingActive(t){return this._activeKeymapInfo&&t&&this._activeKeymapInfo.fuzzyEqual(t)}setUSKeyboardLayout(){this._activeKeymapInfo=this.getUSStandardLayout()}setActiveKeyMapping(t){let e=!1;const a=this.getMatchedKeymapInfo(t);if(a&&(this._activeKeymapInfo?t&&a.result.getScore(t)>this._activeKeymapInfo.getScore(t)&&(this._activeKeymapInfo=a.result,e=!0):(this._activeKeymapInfo=a.result,e=!0)),this._activeKeymapInfo||(this._activeKeymapInfo=this.getUSStandardLayout(),e=!0),!this._activeKeymapInfo||!e)return;const r=this._mru.indexOf(this._activeKeymapInfo);this._mru.splice(r,1),this._mru.unshift(this._activeKeymapInfo),this._setKeyboardData(this._activeKeymapInfo)}setActiveKeymapInfo(t){this._activeKeymapInfo=t;const e=this._mru.indexOf(this._activeKeymapInfo);e!==0&&(this._mru.splice(e,1),this._mru.unshift(this._activeKeymapInfo),this._setKeyboardData(this._activeKeymapInfo))}setLayoutFromBrowserAPI(){this._updateKeyboardLayoutAsync(this._initialized)}_updateKeyboardLayoutAsync(t,e){t&&this._getBrowserKeyMapping(e).then(a=>{this.isKeyMappingActive(a)||this.setActiveKeyMapping(a)})}getKeyboardMapper(){const t=T(this._configurationService);return t.dispatch===j.KeyCode||!this._initialized||!this._activeKeymapInfo?new I(t.mapAltGrToCtrlAlt,c):(this._keyboardMapper||(this._keyboardMapper=new V(L._createKeyboardMapper(this._activeKeymapInfo,t.mapAltGrToCtrlAlt))),this._keyboardMapper)}validateCurrentKeyboardMapping(t){!this._initialized||this._validateCurrentKeyboardMapping(t)||this._updateKeyboardLayoutAsync(!0,t)}setKeyboardLayout(t){const e=this.keymapInfos.filter(a=>_(a.layout)===t);e.length>0&&this.setActiveKeymapInfo(e[0])}_setKeyboardData(t){this._initialized=!0,this._keyboardMapper=null,this._onDidChangeKeyboardMapper.fire()}static _createKeyboardMapper(t,e){const a=t.mapping,r=!!t.layout.isUSStandard;return c===R.Windows?new X(r,a,e):Object.keys(a).length===0?new I(e,c):new Q(r,a,e,c)}_validateCurrentKeyboardMapping(t){if(!this._initialized)return!0;const e=t,a=this._activeKeymapInfo;if(!a||e.browserEvent.key==="Dead"||e.browserEvent.isComposing)return!0;const r=a.mapping[e.code];if(!r)return!1;if(r.value==="")return(t.ctrlKey||t.metaKey)&&setTimeout(()=>{this._getBrowserKeyMapping().then(y=>{this.isKeyMappingActive(y)||this.setLayoutFromBrowserAPI()})},350),!0;const o=e.altKey&&e.shiftKey?r.withShiftAltGr:e.altKey?r.withAltGr:e.shiftKey?r.withShift:r.value,i=e.altKey&&e.shiftKey&&r.withShiftAltGrIsDeadKey||e.altKey&&r.withAltGrIsDeadKey||e.shiftKey&&r.withShiftIsDeadKey||r.valueIsDeadKey;return!(i&&e.browserEvent.key!=="Dead"||!i&&e.browserEvent.key!==o)}async _getBrowserKeyMapping(t){if(this.keyboardLayoutMapAllowed)try{return await navigator.keyboard.getLayoutMap().then(e=>{const a={};for(const r of e)a[r[0]]={value:r[1],withShift:"",withAltGr:"",withShiftAltGr:""};return a})}catch{this.keyboardLayoutMapAllowed=!1}if(t&&!t.shiftKey&&!t.altKey&&!t.metaKey&&!t.metaKey){const e={},a=t;return e[a.browserEvent.code]={value:a.browserEvent.key,withShift:"",withAltGr:"",withShiftAltGr:""},this.getMatchedKeymapInfo(e)?e:null}return null}}class L extends Y{constructor(n,t,e,a){super(n);const r=z?"win":U?"darwin":"linux";(S?import(x.asBrowserUri(`vs/workbench/services/keybinding/browser/keyboardLayouts/layout.contribution.${r}.js`).path):import(`vs/workbench/services/keybinding/browser/keyboardLayouts/layout.contribution.${r}`)).then(o=>{const i=o.KeyboardLayoutContribution.INSTANCE.layoutInfos;this._keymapInfos.push(...i.map(y=>new v(y.layout,y.secondaryLayouts,y.mapping,y.isUserKeyboardLayout))),this._mru=this._keymapInfos,this._initialized=!0,this.setLayoutFromBrowserAPI()})}}class Z extends b{constructor(t,e){super();this.keyboardLayoutResource=t;this.fileService=e;this._keyboardLayout=null,this.reloadConfigurationScheduler=this._register(new w(()=>this.reload().then(a=>{a&&this._onDidChange.fire()}),50)),this._register(C.filter(this.fileService.onDidFilesChange,a=>a.contains(this.keyboardLayoutResource))(()=>this.reloadConfigurationScheduler.schedule()))}reloadConfigurationScheduler;_onDidChange=this._register(new h);onDidChange=this._onDidChange.event;_keyboardLayout;get keyboardLayout(){return this._keyboardLayout}async initialize(){await this.reload()}async reload(){const t=this._keyboardLayout;try{const e=await this.fileService.readFile(this.keyboardLayoutResource),a=D(e.value.toString());if(A(a)==="object"){const r=a.layout,o=a.rawMapping;this._keyboardLayout=v.createKeyboardLayoutFromDebugInfo(r,o,!0)}else this._keyboardLayout=null}catch{this._keyboardLayout=null}return t?!E.equals(t,this._keyboardLayout):!0}}let p=class extends b{constructor(t,e,a,r,o,i){super();this.configurationService=i;const f=i.getValue("keyboard").layout;this._keyboardLayoutMode=f??"autodetect",this._factory=new L(i,a,r,o),this._register(this._factory.onDidChangeKeyboardMapper(()=>{this._onDidChangeKeyboardLayout.fire()})),f&&f!=="autodetect"&&this._factory.setKeyboardLayout(f),this._register(i.onDidChangeConfiguration(d=>{if(d.affectsConfiguration("keyboard.layout")){const l=i.getValue("keyboard").layout;this._keyboardLayoutMode=l,l==="autodetect"?this._factory.setLayoutFromBrowserAPI():this._factory.setKeyboardLayout(l)}})),this._userKeyboardLayout=new Z(t.keyboardLayoutResource,e),this._userKeyboardLayout.initialize().then(()=>{this._userKeyboardLayout.keyboardLayout&&(this._factory.registerKeyboardLayout(this._userKeyboardLayout.keyboardLayout),this.setUserKeyboardLayoutIfMatched())}),this._register(this._userKeyboardLayout.onDidChange(()=>{const d=this._factory.keymapInfos.filter(K=>K.isUserKeyboardLayout);d.length?this._userKeyboardLayout.keyboardLayout?d[0].update(this._userKeyboardLayout.keyboardLayout):this._factory.removeKeyboardLayout(d[0]):this._userKeyboardLayout.keyboardLayout&&this._factory.registerKeyboardLayout(this._userKeyboardLayout.keyboardLayout),this.setUserKeyboardLayoutIfMatched()}))}_serviceBrand;_onDidChangeKeyboardLayout=new h;onDidChangeKeyboardLayout=this._onDidChangeKeyboardLayout.event;_userKeyboardLayout;_factory;_keyboardLayoutMode;setUserKeyboardLayoutIfMatched(){const e=this.configurationService.getValue("keyboard").layout;e&&this._userKeyboardLayout.keyboardLayout&&_(this._userKeyboardLayout.keyboardLayout.layout)===e&&this._factory.activeKeymap&&(this._userKeyboardLayout.keyboardLayout.equal(this._factory.activeKeymap)||this._factory.setActiveKeymapInfo(this._userKeyboardLayout.keyboardLayout))}getKeyboardMapper(){return this._factory.getKeyboardMapper()}getCurrentKeyboardLayout(){return this._factory.activeKeyboardLayout}getAllKeyboardLayouts(){return this._factory.keyboardLayouts}getRawKeyboardMapping(){return this._factory.activeKeyMapping}validateCurrentKeyboardMapping(t){this._keyboardLayoutMode==="autodetect"&&this._factory.validateCurrentKeyboardMapping(t)}};p=m([u(0,P),u(1,O),u(2,$),u(3,J),u(4,F),u(5,B)],p),G(q,p,W.Delayed);const ee=H.as(N.Configuration),te={id:"keyboard",order:15,type:"object",title:g.localize("keyboardConfigurationTitle","Keyboard"),properties:{"keyboard.layout":{type:"string",default:"autodetect",description:g.localize("keyboard.layout.config","Control the keyboard layout used in web.")}}};ee.registerConfiguration(te);export{p as BrowserKeyboardLayoutService,L as BrowserKeyboardMapperFactory,Y as BrowserKeyboardMapperFactoryBase};
