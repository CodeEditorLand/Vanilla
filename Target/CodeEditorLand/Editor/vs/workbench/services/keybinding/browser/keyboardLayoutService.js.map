{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/keybinding/browser/keyboardLayoutService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport type { StandardKeyboardEvent } from \"../../../../base/browser/keyboardEvent.js\";\nimport { isESM } from \"../../../../base/common/amd.js\";\nimport { RunOnceScheduler } from \"../../../../base/common/async.js\";\nimport { Emitter, Event } from \"../../../../base/common/event.js\";\nimport { getNodeType, parse } from \"../../../../base/common/json.js\";\nimport { Disposable } from \"../../../../base/common/lifecycle.js\";\nimport {\n\ttype AppResourcePath,\n\tFileAccess,\n} from \"../../../../base/common/network.js\";\nimport * as objects from \"../../../../base/common/objects.js\";\nimport {\n\tOS,\n\tOperatingSystem,\n\tisMacintosh,\n\tisWindows,\n} from \"../../../../base/common/platform.js\";\nimport type { URI } from \"../../../../base/common/uri.js\";\nimport * as nls from \"../../../../nls.js\";\nimport { ICommandService } from \"../../../../platform/commands/common/commands.js\";\nimport { IConfigurationService } from \"../../../../platform/configuration/common/configuration.js\";\nimport {\n\tExtensions as ConfigExtensions,\n\ttype IConfigurationNode,\n\ttype IConfigurationRegistry,\n} from \"../../../../platform/configuration/common/configurationRegistry.js\";\nimport { IEnvironmentService } from \"../../../../platform/environment/common/environment.js\";\nimport { IFileService } from \"../../../../platform/files/common/files.js\";\nimport {\n\tInstantiationType,\n\tregisterSingleton,\n} from \"../../../../platform/instantiation/common/extensions.js\";\nimport type { IKeyboardEvent } from \"../../../../platform/keybinding/common/keybinding.js\";\nimport {\n\tDispatchConfig,\n\treadKeyboardConfig,\n} from \"../../../../platform/keyboardLayout/common/keyboardConfig.js\";\nimport {\n\ttype IKeyboardLayoutInfo,\n\tIKeyboardLayoutService,\n\ttype IKeyboardMapping,\n\ttype IMacLinuxKeyboardMapping,\n\ttype IWindowsKeyboardMapping,\n\tgetKeyboardLayoutId,\n} from \"../../../../platform/keyboardLayout/common/keyboardLayout.js\";\nimport {\n\tCachedKeyboardMapper,\n\ttype IKeyboardMapper,\n} from \"../../../../platform/keyboardLayout/common/keyboardMapper.js\";\nimport { INotificationService } from \"../../../../platform/notification/common/notification.js\";\nimport { Registry } from \"../../../../platform/registry/common/platform.js\";\nimport { IStorageService } from \"../../../../platform/storage/common/storage.js\";\nimport { FallbackKeyboardMapper } from \"../common/fallbackKeyboardMapper.js\";\nimport {\n\ttype IKeymapInfo,\n\ttype IRawMixedKeyboardMapping,\n\tKeymapInfo,\n} from \"../common/keymapInfo.js\";\nimport { MacLinuxKeyboardMapper } from \"../common/macLinuxKeyboardMapper.js\";\nimport { WindowsKeyboardMapper } from \"../common/windowsKeyboardMapper.js\";\nimport type { INavigatorWithKeyboard } from \"./navigatorKeyboard.js\";\n\nexport class BrowserKeyboardMapperFactoryBase extends Disposable {\n\t// keyboard mapper\n\tprotected _initialized: boolean;\n\tprotected _keyboardMapper: IKeyboardMapper | null;\n\tprivate readonly _onDidChangeKeyboardMapper = new Emitter<void>();\n\tpublic readonly onDidChangeKeyboardMapper: Event<void> =\n\t\tthis._onDidChangeKeyboardMapper.event;\n\n\t// keymap infos\n\tprotected _keymapInfos: KeymapInfo[];\n\tprotected _mru: KeymapInfo[];\n\tprivate _activeKeymapInfo: KeymapInfo | null;\n\tprivate keyboardLayoutMapAllowed: boolean =\n\t\t(navigator as any).keyboard !== undefined;\n\n\tget activeKeymap(): KeymapInfo | null {\n\t\treturn this._activeKeymapInfo;\n\t}\n\n\tget keymapInfos(): KeymapInfo[] {\n\t\treturn this._keymapInfos;\n\t}\n\n\tget activeKeyboardLayout(): IKeyboardLayoutInfo | null {\n\t\tif (!this._initialized) {\n\t\t\treturn null;\n\t\t}\n\n\t\treturn this._activeKeymapInfo?.layout ?? null;\n\t}\n\n\tget activeKeyMapping(): IKeyboardMapping | null {\n\t\tif (!this._initialized) {\n\t\t\treturn null;\n\t\t}\n\n\t\treturn this._activeKeymapInfo?.mapping ?? null;\n\t}\n\n\tget keyboardLayouts(): IKeyboardLayoutInfo[] {\n\t\treturn this._keymapInfos.map((keymapInfo) => keymapInfo.layout);\n\t}\n\n\tprotected constructor(\n\t\tprivate readonly _configurationService: IConfigurationService,\n\t\t// private _notificationService: INotificationService,\n\t\t// private _storageService: IStorageService,\n\t\t// private _commandService: ICommandService\n\t) {\n\t\tsuper();\n\t\tthis._keyboardMapper = null;\n\t\tthis._initialized = false;\n\t\tthis._keymapInfos = [];\n\t\tthis._mru = [];\n\t\tthis._activeKeymapInfo = null;\n\n\t\tif (\n\t\t\t(<INavigatorWithKeyboard>navigator).keyboard &&\n\t\t\t(<INavigatorWithKeyboard>navigator).keyboard.addEventListener\n\t\t) {\n\t\t\t(<INavigatorWithKeyboard>navigator).keyboard.addEventListener!(\n\t\t\t\t\"layoutchange\",\n\t\t\t\t() => {\n\t\t\t\t\t// Update user keyboard map settings\n\t\t\t\t\tthis._getBrowserKeyMapping().then(\n\t\t\t\t\t\t(mapping: IKeyboardMapping | null) => {\n\t\t\t\t\t\t\tif (this.isKeyMappingActive(mapping)) {\n\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tthis.setLayoutFromBrowserAPI();\n\t\t\t\t\t\t},\n\t\t\t\t\t);\n\t\t\t\t},\n\t\t\t);\n\t\t}\n\n\t\tthis._register(\n\t\t\tthis._configurationService.onDidChangeConfiguration((e) => {\n\t\t\t\tif (e.affectsConfiguration(\"keyboard\")) {\n\t\t\t\t\tthis._keyboardMapper = null;\n\t\t\t\t\tthis._onDidChangeKeyboardMapper.fire();\n\t\t\t\t}\n\t\t\t}),\n\t\t);\n\t}\n\n\tregisterKeyboardLayout(layout: KeymapInfo) {\n\t\tthis._keymapInfos.push(layout);\n\t\tthis._mru = this._keymapInfos;\n\t}\n\n\tremoveKeyboardLayout(layout: KeymapInfo): void {\n\t\tlet index = this._mru.indexOf(layout);\n\t\tthis._mru.splice(index, 1);\n\t\tindex = this._keymapInfos.indexOf(layout);\n\t\tthis._keymapInfos.splice(index, 1);\n\t}\n\n\tgetMatchedKeymapInfo(\n\t\tkeyMapping: IKeyboardMapping | null,\n\t): { result: KeymapInfo; score: number } | null {\n\t\tif (!keyMapping) {\n\t\t\treturn null;\n\t\t}\n\n\t\tconst usStandard = this.getUSStandardLayout();\n\n\t\tif (usStandard) {\n\t\t\tlet maxScore = usStandard.getScore(keyMapping);\n\t\t\tif (maxScore === 0) {\n\t\t\t\treturn {\n\t\t\t\t\tresult: usStandard,\n\t\t\t\t\tscore: 0,\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tlet result = usStandard;\n\t\t\tfor (let i = 0; i < this._mru.length; i++) {\n\t\t\t\tconst score = this._mru[i].getScore(keyMapping);\n\t\t\t\tif (score > maxScore) {\n\t\t\t\t\tif (score === 0) {\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\tresult: this._mru[i],\n\t\t\t\t\t\t\tscore: 0,\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\n\t\t\t\t\tmaxScore = score;\n\t\t\t\t\tresult = this._mru[i];\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\tresult,\n\t\t\t\tscore: maxScore,\n\t\t\t};\n\t\t}\n\n\t\tfor (let i = 0; i < this._mru.length; i++) {\n\t\t\tif (this._mru[i].fuzzyEqual(keyMapping)) {\n\t\t\t\treturn {\n\t\t\t\t\tresult: this._mru[i],\n\t\t\t\t\tscore: 0,\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\n\t\treturn null;\n\t}\n\n\tgetUSStandardLayout() {\n\t\tconst usStandardLayouts = this._mru.filter(\n\t\t\t(layout) => layout.layout.isUSStandard,\n\t\t);\n\n\t\tif (usStandardLayouts.length) {\n\t\t\treturn usStandardLayouts[0];\n\t\t}\n\n\t\treturn null;\n\t}\n\n\tisKeyMappingActive(keymap: IKeyboardMapping | null) {\n\t\treturn (\n\t\t\tthis._activeKeymapInfo &&\n\t\t\tkeymap &&\n\t\t\tthis._activeKeymapInfo.fuzzyEqual(keymap)\n\t\t);\n\t}\n\n\tsetUSKeyboardLayout() {\n\t\tthis._activeKeymapInfo = this.getUSStandardLayout();\n\t}\n\n\tsetActiveKeyMapping(keymap: IKeyboardMapping | null) {\n\t\tlet keymapUpdated = false;\n\t\tconst matchedKeyboardLayout = this.getMatchedKeymapInfo(keymap);\n\t\tif (matchedKeyboardLayout) {\n\t\t\t// let score = matchedKeyboardLayout.score;\n\n\t\t\t// Due to https://bugs.chromium.org/p/chromium/issues/detail?id=977609, any key after a dead key will generate a wrong mapping,\n\t\t\t// we shoud avoid yielding the false error.\n\t\t\t// if (keymap && score < 0) {\n\t\t\t// const donotAskUpdateKey = 'missing.keyboardlayout.donotask';\n\t\t\t// if (this._storageService.getBoolean(donotAskUpdateKey, StorageScope.APPLICATION)) {\n\t\t\t// \treturn;\n\t\t\t// }\n\n\t\t\t// the keyboard layout doesn't actually match the key event or the keymap from chromium\n\t\t\t// this._notificationService.prompt(\n\t\t\t// \tSeverity.Info,\n\t\t\t// \tnls.localize('missing.keyboardlayout', 'Fail to find matching keyboard layout'),\n\t\t\t// \t[{\n\t\t\t// \t\tlabel: nls.localize('keyboardLayoutMissing.configure', \"Configure\"),\n\t\t\t// \t\trun: () => this._commandService.executeCommand('workbench.action.openKeyboardLayoutPicker')\n\t\t\t// \t}, {\n\t\t\t// \t\tlabel: nls.localize('neverAgain', \"Don't Show Again\"),\n\t\t\t// \t\tisSecondary: true,\n\t\t\t// \t\trun: () => this._storageService.store(donotAskUpdateKey, true, StorageScope.APPLICATION)\n\t\t\t// \t}]\n\t\t\t// );\n\n\t\t\t// console.warn('Active keymap/keyevent does not match current keyboard layout', JSON.stringify(keymap), this._activeKeymapInfo ? JSON.stringify(this._activeKeymapInfo.layout) : '');\n\n\t\t\t// return;\n\t\t\t// }\n\n\t\t\tif (!this._activeKeymapInfo) {\n\t\t\t\tthis._activeKeymapInfo = matchedKeyboardLayout.result;\n\t\t\t\tkeymapUpdated = true;\n\t\t\t} else if (keymap) {\n\t\t\t\tif (\n\t\t\t\t\tmatchedKeyboardLayout.result.getScore(keymap) >\n\t\t\t\t\tthis._activeKeymapInfo.getScore(keymap)\n\t\t\t\t) {\n\t\t\t\t\tthis._activeKeymapInfo = matchedKeyboardLayout.result;\n\t\t\t\t\tkeymapUpdated = true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (!this._activeKeymapInfo) {\n\t\t\tthis._activeKeymapInfo = this.getUSStandardLayout();\n\t\t\tkeymapUpdated = true;\n\t\t}\n\n\t\tif (!this._activeKeymapInfo || !keymapUpdated) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst index = this._mru.indexOf(this._activeKeymapInfo);\n\n\t\tthis._mru.splice(index, 1);\n\t\tthis._mru.unshift(this._activeKeymapInfo);\n\n\t\tthis._setKeyboardData(this._activeKeymapInfo);\n\t}\n\n\tsetActiveKeymapInfo(keymapInfo: KeymapInfo) {\n\t\tthis._activeKeymapInfo = keymapInfo;\n\n\t\tconst index = this._mru.indexOf(this._activeKeymapInfo);\n\n\t\tif (index === 0) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis._mru.splice(index, 1);\n\t\tthis._mru.unshift(this._activeKeymapInfo);\n\n\t\tthis._setKeyboardData(this._activeKeymapInfo);\n\t}\n\n\tpublic setLayoutFromBrowserAPI(): void {\n\t\tthis._updateKeyboardLayoutAsync(this._initialized);\n\t}\n\n\tprivate _updateKeyboardLayoutAsync(\n\t\tinitialized: boolean,\n\t\tkeyboardEvent?: IKeyboardEvent,\n\t) {\n\t\tif (!initialized) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis._getBrowserKeyMapping(keyboardEvent).then((keyMap) => {\n\t\t\t// might be false positive\n\t\t\tif (this.isKeyMappingActive(keyMap)) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tthis.setActiveKeyMapping(keyMap);\n\t\t});\n\t}\n\n\tpublic getKeyboardMapper(): IKeyboardMapper {\n\t\tconst config = readKeyboardConfig(this._configurationService);\n\t\tif (\n\t\t\tconfig.dispatch === DispatchConfig.KeyCode ||\n\t\t\t!this._initialized ||\n\t\t\t!this._activeKeymapInfo\n\t\t) {\n\t\t\t// Forcefully set to use keyCode\n\t\t\treturn new FallbackKeyboardMapper(config.mapAltGrToCtrlAlt, OS);\n\t\t}\n\t\tif (!this._keyboardMapper) {\n\t\t\tthis._keyboardMapper = new CachedKeyboardMapper(\n\t\t\t\tBrowserKeyboardMapperFactory._createKeyboardMapper(\n\t\t\t\t\tthis._activeKeymapInfo,\n\t\t\t\t\tconfig.mapAltGrToCtrlAlt,\n\t\t\t\t),\n\t\t\t);\n\t\t}\n\t\treturn this._keyboardMapper;\n\t}\n\n\tpublic validateCurrentKeyboardMapping(keyboardEvent: IKeyboardEvent): void {\n\t\tif (!this._initialized) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst isCurrentKeyboard =\n\t\t\tthis._validateCurrentKeyboardMapping(keyboardEvent);\n\n\t\tif (isCurrentKeyboard) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis._updateKeyboardLayoutAsync(true, keyboardEvent);\n\t}\n\n\tpublic setKeyboardLayout(layoutName: string) {\n\t\tconst matchedLayouts: KeymapInfo[] = this.keymapInfos.filter(\n\t\t\t(keymapInfo) =>\n\t\t\t\tgetKeyboardLayoutId(keymapInfo.layout) === layoutName,\n\t\t);\n\n\t\tif (matchedLayouts.length > 0) {\n\t\t\tthis.setActiveKeymapInfo(matchedLayouts[0]);\n\t\t}\n\t}\n\n\tprivate _setKeyboardData(keymapInfo: KeymapInfo): void {\n\t\tthis._initialized = true;\n\n\t\tthis._keyboardMapper = null;\n\t\tthis._onDidChangeKeyboardMapper.fire();\n\t}\n\n\tprivate static _createKeyboardMapper(\n\t\tkeymapInfo: KeymapInfo,\n\t\tmapAltGrToCtrlAlt: boolean,\n\t): IKeyboardMapper {\n\t\tconst rawMapping = keymapInfo.mapping;\n\t\tconst isUSStandard = !!keymapInfo.layout.isUSStandard;\n\t\tif (OS === OperatingSystem.Windows) {\n\t\t\treturn new WindowsKeyboardMapper(\n\t\t\t\tisUSStandard,\n\t\t\t\t<IWindowsKeyboardMapping>rawMapping,\n\t\t\t\tmapAltGrToCtrlAlt,\n\t\t\t);\n\t\t}\n\t\tif (Object.keys(rawMapping).length === 0) {\n\t\t\t// Looks like reading the mappings failed (most likely Mac + Japanese/Chinese keyboard layouts)\n\t\t\treturn new FallbackKeyboardMapper(mapAltGrToCtrlAlt, OS);\n\t\t}\n\n\t\treturn new MacLinuxKeyboardMapper(\n\t\t\tisUSStandard,\n\t\t\t<IMacLinuxKeyboardMapping>rawMapping,\n\t\t\tmapAltGrToCtrlAlt,\n\t\t\tOS,\n\t\t);\n\t}\n\n\t//#region Browser API\n\tprivate _validateCurrentKeyboardMapping(\n\t\tkeyboardEvent: IKeyboardEvent,\n\t): boolean {\n\t\tif (!this._initialized) {\n\t\t\treturn true;\n\t\t}\n\n\t\tconst standardKeyboardEvent = keyboardEvent as StandardKeyboardEvent;\n\t\tconst currentKeymap = this._activeKeymapInfo;\n\t\tif (!currentKeymap) {\n\t\t\treturn true;\n\t\t}\n\n\t\tif (\n\t\t\tstandardKeyboardEvent.browserEvent.key === \"Dead\" ||\n\t\t\tstandardKeyboardEvent.browserEvent.isComposing\n\t\t) {\n\t\t\treturn true;\n\t\t}\n\n\t\tconst mapping = currentKeymap.mapping[standardKeyboardEvent.code];\n\n\t\tif (!mapping) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (mapping.value === \"\") {\n\t\t\t// The value is empty when the key is not a printable character, we skip validation.\n\t\t\tif (keyboardEvent.ctrlKey || keyboardEvent.metaKey) {\n\t\t\t\tsetTimeout(() => {\n\t\t\t\t\tthis._getBrowserKeyMapping().then(\n\t\t\t\t\t\t(keymap: IRawMixedKeyboardMapping | null) => {\n\t\t\t\t\t\t\tif (this.isKeyMappingActive(keymap)) {\n\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tthis.setLayoutFromBrowserAPI();\n\t\t\t\t\t\t},\n\t\t\t\t\t);\n\t\t\t\t}, 350);\n\t\t\t}\n\t\t\treturn true;\n\t\t}\n\n\t\tconst expectedValue =\n\t\t\tstandardKeyboardEvent.altKey && standardKeyboardEvent.shiftKey\n\t\t\t\t? mapping.withShiftAltGr\n\t\t\t\t: standardKeyboardEvent.altKey\n\t\t\t\t\t? mapping.withAltGr\n\t\t\t\t\t: standardKeyboardEvent.shiftKey\n\t\t\t\t\t\t? mapping.withShift\n\t\t\t\t\t\t: mapping.value;\n\n\t\tconst isDead =\n\t\t\t(standardKeyboardEvent.altKey &&\n\t\t\t\tstandardKeyboardEvent.shiftKey &&\n\t\t\t\tmapping.withShiftAltGrIsDeadKey) ||\n\t\t\t(standardKeyboardEvent.altKey && mapping.withAltGrIsDeadKey) ||\n\t\t\t(standardKeyboardEvent.shiftKey && mapping.withShiftIsDeadKey) ||\n\t\t\tmapping.valueIsDeadKey;\n\n\t\tif (isDead && standardKeyboardEvent.browserEvent.key !== \"Dead\") {\n\t\t\treturn false;\n\t\t}\n\n\t\t// TODO, this assumption is wrong as `browserEvent.key` doesn't necessarily equal expectedValue from real keymap\n\t\tif (\n\t\t\t!isDead &&\n\t\t\tstandardKeyboardEvent.browserEvent.key !== expectedValue\n\t\t) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn true;\n\t}\n\n\tprivate async _getBrowserKeyMapping(\n\t\tkeyboardEvent?: IKeyboardEvent,\n\t): Promise<IRawMixedKeyboardMapping | null> {\n\t\tif (this.keyboardLayoutMapAllowed) {\n\t\t\ttry {\n\t\t\t\treturn await (navigator as any).keyboard\n\t\t\t\t\t.getLayoutMap()\n\t\t\t\t\t.then((e: any) => {\n\t\t\t\t\t\tconst ret: IKeyboardMapping = {};\n\t\t\t\t\t\tfor (const key of e) {\n\t\t\t\t\t\t\tret[key[0]] = {\n\t\t\t\t\t\t\t\tvalue: key[1],\n\t\t\t\t\t\t\t\twithShift: \"\",\n\t\t\t\t\t\t\t\twithAltGr: \"\",\n\t\t\t\t\t\t\t\twithShiftAltGr: \"\",\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn ret;\n\n\t\t\t\t\t\t// const matchedKeyboardLayout = this.getMatchedKeymapInfo(ret);\n\n\t\t\t\t\t\t// if (matchedKeyboardLayout) {\n\t\t\t\t\t\t// \treturn matchedKeyboardLayout.result.mapping;\n\t\t\t\t\t\t// }\n\n\t\t\t\t\t\t// return null;\n\t\t\t\t\t});\n\t\t\t} catch {\n\t\t\t\t// getLayoutMap can throw if invoked from a nested browsing context\n\t\t\t\tthis.keyboardLayoutMapAllowed = false;\n\t\t\t}\n\t\t}\n\t\tif (\n\t\t\tkeyboardEvent &&\n\t\t\t!keyboardEvent.shiftKey &&\n\t\t\t!keyboardEvent.altKey &&\n\t\t\t!keyboardEvent.metaKey &&\n\t\t\t!keyboardEvent.metaKey\n\t\t) {\n\t\t\tconst ret: IKeyboardMapping = {};\n\t\t\tconst standardKeyboardEvent =\n\t\t\t\tkeyboardEvent as StandardKeyboardEvent;\n\t\t\tret[standardKeyboardEvent.browserEvent.code] = {\n\t\t\t\tvalue: standardKeyboardEvent.browserEvent.key,\n\t\t\t\twithShift: \"\",\n\t\t\t\twithAltGr: \"\",\n\t\t\t\twithShiftAltGr: \"\",\n\t\t\t};\n\n\t\t\tconst matchedKeyboardLayout = this.getMatchedKeymapInfo(ret);\n\n\t\t\tif (matchedKeyboardLayout) {\n\t\t\t\treturn ret;\n\t\t\t}\n\n\t\t\treturn null;\n\t\t}\n\n\t\treturn null;\n\t}\n\n\t//#endregion\n}\n\nexport class BrowserKeyboardMapperFactory extends BrowserKeyboardMapperFactoryBase {\n\tconstructor(\n\t\tconfigurationService: IConfigurationService,\n\t\tnotificationService: INotificationService,\n\t\tstorageService: IStorageService,\n\t\tcommandService: ICommandService,\n\t) {\n\t\t// super(notificationService, storageService, commandService);\n\t\tsuper(configurationService);\n\n\t\tconst platform = isWindows ? \"win\" : isMacintosh ? \"darwin\" : \"linux\";\n\n\t\timport(\n\t\t\tisESM\n\t\t\t\t? FileAccess.asBrowserUri(\n\t\t\t\t\t\t`vs/workbench/services/keybinding/browser/keyboardLayouts/layout.contribution.${platform}.js` satisfies AppResourcePath,\n\t\t\t\t\t).path\n\t\t\t\t: `vs/workbench/services/keybinding/browser/keyboardLayouts/layout.contribution.${platform}`\n\t\t).then((m) => {\n\t\t\tconst keymapInfos: IKeymapInfo[] =\n\t\t\t\tm.KeyboardLayoutContribution.INSTANCE.layoutInfos;\n\t\t\tthis._keymapInfos.push(\n\t\t\t\t...keymapInfos.map(\n\t\t\t\t\t(info) =>\n\t\t\t\t\t\tnew KeymapInfo(\n\t\t\t\t\t\t\tinfo.layout,\n\t\t\t\t\t\t\tinfo.secondaryLayouts,\n\t\t\t\t\t\t\tinfo.mapping,\n\t\t\t\t\t\t\tinfo.isUserKeyboardLayout,\n\t\t\t\t\t\t),\n\t\t\t\t),\n\t\t\t);\n\t\t\tthis._mru = this._keymapInfos;\n\t\t\tthis._initialized = true;\n\t\t\tthis.setLayoutFromBrowserAPI();\n\t\t});\n\t}\n}\n\nclass UserKeyboardLayout extends Disposable {\n\tprivate readonly reloadConfigurationScheduler: RunOnceScheduler;\n\tprotected readonly _onDidChange: Emitter<void> = this._register(\n\t\tnew Emitter<void>(),\n\t);\n\treadonly onDidChange: Event<void> = this._onDidChange.event;\n\n\tprivate _keyboardLayout: KeymapInfo | null;\n\tget keyboardLayout(): KeymapInfo | null {\n\t\treturn this._keyboardLayout;\n\t}\n\n\tconstructor(\n\t\tprivate readonly keyboardLayoutResource: URI,\n\t\tprivate readonly fileService: IFileService,\n\t) {\n\t\tsuper();\n\n\t\tthis._keyboardLayout = null;\n\n\t\tthis.reloadConfigurationScheduler = this._register(\n\t\t\tnew RunOnceScheduler(\n\t\t\t\t() =>\n\t\t\t\t\tthis.reload().then((changed) => {\n\t\t\t\t\t\tif (changed) {\n\t\t\t\t\t\t\tthis._onDidChange.fire();\n\t\t\t\t\t\t}\n\t\t\t\t\t}),\n\t\t\t\t50,\n\t\t\t),\n\t\t);\n\n\t\tthis._register(\n\t\t\tEvent.filter(this.fileService.onDidFilesChange, (e) =>\n\t\t\t\te.contains(this.keyboardLayoutResource),\n\t\t\t)(() => this.reloadConfigurationScheduler.schedule()),\n\t\t);\n\t}\n\n\tasync initialize(): Promise<void> {\n\t\tawait this.reload();\n\t}\n\n\tprivate async reload(): Promise<boolean> {\n\t\tconst existing = this._keyboardLayout;\n\t\ttry {\n\t\t\tconst content = await this.fileService.readFile(\n\t\t\t\tthis.keyboardLayoutResource,\n\t\t\t);\n\t\t\tconst value = parse(content.value.toString());\n\t\t\tif (getNodeType(value) === \"object\") {\n\t\t\t\tconst layoutInfo = value.layout;\n\t\t\t\tconst mappings = value.rawMapping;\n\t\t\t\tthis._keyboardLayout =\n\t\t\t\t\tKeymapInfo.createKeyboardLayoutFromDebugInfo(\n\t\t\t\t\t\tlayoutInfo,\n\t\t\t\t\t\tmappings,\n\t\t\t\t\t\ttrue,\n\t\t\t\t\t);\n\t\t\t} else {\n\t\t\t\tthis._keyboardLayout = null;\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tthis._keyboardLayout = null;\n\t\t}\n\n\t\treturn existing\n\t\t\t? !objects.equals(existing, this._keyboardLayout)\n\t\t\t: true;\n\t}\n}\n\nexport class BrowserKeyboardLayoutService\n\textends Disposable\n\timplements IKeyboardLayoutService\n{\n\tpublic _serviceBrand: undefined;\n\n\tprivate readonly _onDidChangeKeyboardLayout = new Emitter<void>();\n\tpublic readonly onDidChangeKeyboardLayout: Event<void> =\n\t\tthis._onDidChangeKeyboardLayout.event;\n\n\tprivate _userKeyboardLayout: UserKeyboardLayout;\n\n\tprivate readonly _factory: BrowserKeyboardMapperFactory;\n\tprivate _keyboardLayoutMode: string;\n\n\tconstructor(\n\t\t@IEnvironmentService environmentService: IEnvironmentService,\n\t\t@IFileService fileService: IFileService,\n\t\t@INotificationService notificationService: INotificationService,\n\t\t@IStorageService storageService: IStorageService,\n\t\t@ICommandService commandService: ICommandService,\n\t\t@IConfigurationService\n\t\tprivate configurationService: IConfigurationService,\n\t) {\n\t\tsuper();\n\t\tconst keyboardConfig = configurationService.getValue<{\n\t\t\tlayout: string;\n\t\t}>(\"keyboard\");\n\t\tconst layout = keyboardConfig.layout;\n\t\tthis._keyboardLayoutMode = layout ?? \"autodetect\";\n\t\tthis._factory = new BrowserKeyboardMapperFactory(\n\t\t\tconfigurationService,\n\t\t\tnotificationService,\n\t\t\tstorageService,\n\t\t\tcommandService,\n\t\t);\n\n\t\tthis._register(\n\t\t\tthis._factory.onDidChangeKeyboardMapper(() => {\n\t\t\t\tthis._onDidChangeKeyboardLayout.fire();\n\t\t\t}),\n\t\t);\n\n\t\tif (layout && layout !== \"autodetect\") {\n\t\t\t// set keyboard layout\n\t\t\tthis._factory.setKeyboardLayout(layout);\n\t\t}\n\n\t\tthis._register(\n\t\t\tconfigurationService.onDidChangeConfiguration((e) => {\n\t\t\t\tif (e.affectsConfiguration(\"keyboard.layout\")) {\n\t\t\t\t\tconst keyboardConfig = configurationService.getValue<{\n\t\t\t\t\t\tlayout: string;\n\t\t\t\t\t}>(\"keyboard\");\n\t\t\t\t\tconst layout = keyboardConfig.layout;\n\t\t\t\t\tthis._keyboardLayoutMode = layout;\n\n\t\t\t\t\tif (layout === \"autodetect\") {\n\t\t\t\t\t\tthis._factory.setLayoutFromBrowserAPI();\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis._factory.setKeyboardLayout(layout);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}),\n\t\t);\n\n\t\tthis._userKeyboardLayout = new UserKeyboardLayout(\n\t\t\tenvironmentService.keyboardLayoutResource,\n\t\t\tfileService,\n\t\t);\n\t\tthis._userKeyboardLayout.initialize().then(() => {\n\t\t\tif (this._userKeyboardLayout.keyboardLayout) {\n\t\t\t\tthis._factory.registerKeyboardLayout(\n\t\t\t\t\tthis._userKeyboardLayout.keyboardLayout,\n\t\t\t\t);\n\n\t\t\t\tthis.setUserKeyboardLayoutIfMatched();\n\t\t\t}\n\t\t});\n\n\t\tthis._register(\n\t\t\tthis._userKeyboardLayout.onDidChange(() => {\n\t\t\t\tconst userKeyboardLayouts = this._factory.keymapInfos.filter(\n\t\t\t\t\t(layout) => layout.isUserKeyboardLayout,\n\t\t\t\t);\n\n\t\t\tif (userKeyboardLayouts.length) {\n\t\t\t\tif (this._userKeyboardLayout.keyboardLayout) {\n\t\t\t\t\tuserKeyboardLayouts[0].update(this._userKeyboardLayout.keyboardLayout);\n\t\t\t\t} else {\n\t\t\t\t\tthis._factory.removeKeyboardLayout(userKeyboardLayouts[0]);\n\t\t\t\t}\n\t\t\t} else if (this._userKeyboardLayout.keyboardLayout) {\n\t\t\t\t\tthis._factory.registerKeyboardLayout(this._userKeyboardLayout.keyboardLayout);\n\t\t\t\t}\n\n\t\t\t\tthis.setUserKeyboardLayoutIfMatched();\n\t\t\t}),\n\t\t);\n\t}\n\n\tsetUserKeyboardLayoutIfMatched() {\n\t\tconst keyboardConfig = this.configurationService.getValue<{\n\t\t\tlayout: string;\n\t\t}>(\"keyboard\");\n\t\tconst layout = keyboardConfig.layout;\n\n\t\tif (layout && this._userKeyboardLayout.keyboardLayout) {\n\t\t\tif (\n\t\t\t\tgetKeyboardLayoutId(\n\t\t\t\t\tthis._userKeyboardLayout.keyboardLayout.layout,\n\t\t\t\t) === layout &&\n\t\t\t\tthis._factory.activeKeymap\n\t\t\t) {\n\t\t\t\tif (\n\t\t\t\t\t!this._userKeyboardLayout.keyboardLayout.equal(\n\t\t\t\t\t\tthis._factory.activeKeymap,\n\t\t\t\t\t)\n\t\t\t\t) {\n\t\t\t\t\tthis._factory.setActiveKeymapInfo(\n\t\t\t\t\t\tthis._userKeyboardLayout.keyboardLayout,\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tgetKeyboardMapper(): IKeyboardMapper {\n\t\treturn this._factory.getKeyboardMapper();\n\t}\n\n\tpublic getCurrentKeyboardLayout(): IKeyboardLayoutInfo | null {\n\t\treturn this._factory.activeKeyboardLayout;\n\t}\n\n\tpublic getAllKeyboardLayouts(): IKeyboardLayoutInfo[] {\n\t\treturn this._factory.keyboardLayouts;\n\t}\n\n\tpublic getRawKeyboardMapping(): IKeyboardMapping | null {\n\t\treturn this._factory.activeKeyMapping;\n\t}\n\n\tpublic validateCurrentKeyboardMapping(keyboardEvent: IKeyboardEvent): void {\n\t\tif (this._keyboardLayoutMode !== \"autodetect\") {\n\t\t\treturn;\n\t\t}\n\n\t\tthis._factory.validateCurrentKeyboardMapping(keyboardEvent);\n\t}\n}\n\nregisterSingleton(\n\tIKeyboardLayoutService,\n\tBrowserKeyboardLayoutService,\n\tInstantiationType.Delayed,\n);\n\n// Configuration\nconst configurationRegistry = Registry.as<IConfigurationRegistry>(\n\tConfigExtensions.Configuration,\n);\nconst keyboardConfiguration: IConfigurationNode = {\n\tid: \"keyboard\",\n\torder: 15,\n\ttype: \"object\",\n\ttitle: nls.localize(\"keyboardConfigurationTitle\", \"Keyboard\"),\n\tproperties: {\n\t\t\"keyboard.layout\": {\n\t\t\ttype: \"string\",\n\t\t\tdefault: \"autodetect\",\n\t\t\tdescription: nls.localize(\n\t\t\t\t\"keyboard.layout.config\",\n\t\t\t\t\"Control the keyboard layout used in web.\",\n\t\t\t),\n\t\t},\n\t},\n};\n\nconfigurationRegistry.registerConfiguration(keyboardConfiguration);\n"],
  "mappings": "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",
  "names": ["keyboardConfig", "layout"]
}
