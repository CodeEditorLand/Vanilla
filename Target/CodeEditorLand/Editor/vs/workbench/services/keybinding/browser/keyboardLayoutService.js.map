{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/keybinding/browser/keyboardLayoutService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as nls from '../../../../nls.js';\nimport { Emitter, Event } from '../../../../base/common/event.js';\nimport { isESM } from '../../../../base/common/amd.js';\nimport { AppResourcePath, FileAccess } from '../../../../base/common/network.js';\nimport { Disposable } from '../../../../base/common/lifecycle.js';\nimport { KeymapInfo, IRawMixedKeyboardMapping, IKeymapInfo } from '../common/keymapInfo.js';\nimport { InstantiationType, registerSingleton } from '../../../../platform/instantiation/common/extensions.js';\nimport { DispatchConfig, readKeyboardConfig } from '../../../../platform/keyboardLayout/common/keyboardConfig.js';\nimport { IKeyboardMapper, CachedKeyboardMapper } from '../../../../platform/keyboardLayout/common/keyboardMapper.js';\nimport { OS, OperatingSystem, isMacintosh, isWindows } from '../../../../base/common/platform.js';\nimport { WindowsKeyboardMapper } from '../common/windowsKeyboardMapper.js';\nimport { FallbackKeyboardMapper } from '../common/fallbackKeyboardMapper.js';\nimport { IKeyboardEvent } from '../../../../platform/keybinding/common/keybinding.js';\nimport { MacLinuxKeyboardMapper } from '../common/macLinuxKeyboardMapper.js';\nimport { StandardKeyboardEvent } from '../../../../base/browser/keyboardEvent.js';\nimport { URI } from '../../../../base/common/uri.js';\nimport { IFileService } from '../../../../platform/files/common/files.js';\nimport { RunOnceScheduler } from '../../../../base/common/async.js';\nimport { parse, getNodeType } from '../../../../base/common/json.js';\nimport * as objects from '../../../../base/common/objects.js';\nimport { IEnvironmentService } from '../../../../platform/environment/common/environment.js';\nimport { Registry } from '../../../../platform/registry/common/platform.js';\nimport { Extensions as ConfigExtensions, IConfigurationRegistry, IConfigurationNode } from '../../../../platform/configuration/common/configurationRegistry.js';\nimport { IConfigurationService } from '../../../../platform/configuration/common/configuration.js';\nimport { INavigatorWithKeyboard } from './navigatorKeyboard.js';\nimport { INotificationService } from '../../../../platform/notification/common/notification.js';\nimport { ICommandService } from '../../../../platform/commands/common/commands.js';\nimport { IStorageService } from '../../../../platform/storage/common/storage.js';\nimport { getKeyboardLayoutId, IKeyboardLayoutInfo, IKeyboardLayoutService, IKeyboardMapping, IMacLinuxKeyboardMapping, IWindowsKeyboardMapping } from '../../../../platform/keyboardLayout/common/keyboardLayout.js';\n\nexport class BrowserKeyboardMapperFactoryBase extends Disposable {\n\t// keyboard mapper\n\tprotected _initialized: boolean;\n\tprotected _keyboardMapper: IKeyboardMapper | null;\n\tprivate readonly _onDidChangeKeyboardMapper = new Emitter<void>();\n\tpublic readonly onDidChangeKeyboardMapper: Event<void> = this._onDidChangeKeyboardMapper.event;\n\n\t// keymap infos\n\tprotected _keymapInfos: KeymapInfo[];\n\tprotected _mru: KeymapInfo[];\n\tprivate _activeKeymapInfo: KeymapInfo | null;\n\tprivate keyboardLayoutMapAllowed: boolean = (navigator as any).keyboard !== undefined;\n\n\tget activeKeymap(): KeymapInfo | null {\n\t\treturn this._activeKeymapInfo;\n\t}\n\n\tget keymapInfos(): KeymapInfo[] {\n\t\treturn this._keymapInfos;\n\t}\n\n\tget activeKeyboardLayout(): IKeyboardLayoutInfo | null {\n\t\tif (!this._initialized) {\n\t\t\treturn null;\n\t\t}\n\n\t\treturn this._activeKeymapInfo?.layout ?? null;\n\t}\n\n\tget activeKeyMapping(): IKeyboardMapping | null {\n\t\tif (!this._initialized) {\n\t\t\treturn null;\n\t\t}\n\n\t\treturn this._activeKeymapInfo?.mapping ?? null;\n\t}\n\n\tget keyboardLayouts(): IKeyboardLayoutInfo[] {\n\t\treturn this._keymapInfos.map(keymapInfo => keymapInfo.layout);\n\t}\n\n\tprotected constructor(\n\t\tprivate readonly _configurationService: IConfigurationService,\n\t\t// private _notificationService: INotificationService,\n\t\t// private _storageService: IStorageService,\n\t\t// private _commandService: ICommandService\n\t) {\n\t\tsuper();\n\t\tthis._keyboardMapper = null;\n\t\tthis._initialized = false;\n\t\tthis._keymapInfos = [];\n\t\tthis._mru = [];\n\t\tthis._activeKeymapInfo = null;\n\n\t\tif ((<INavigatorWithKeyboard>navigator).keyboard && (<INavigatorWithKeyboard>navigator).keyboard.addEventListener) {\n\t\t\t(<INavigatorWithKeyboard>navigator).keyboard.addEventListener!('layoutchange', () => {\n\t\t\t\t// Update user keyboard map settings\n\t\t\t\tthis._getBrowserKeyMapping().then((mapping: IKeyboardMapping | null) => {\n\t\t\t\t\tif (this.isKeyMappingActive(mapping)) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tthis.setLayoutFromBrowserAPI();\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\n\t\tthis._register(this._configurationService.onDidChangeConfiguration((e) => {\n\t\t\tif (e.affectsConfiguration('keyboard')) {\n\t\t\t\tthis._keyboardMapper = null;\n\t\t\t\tthis._onDidChangeKeyboardMapper.fire();\n\t\t\t}\n\t\t}));\n\t}\n\n\tregisterKeyboardLayout(layout: KeymapInfo) {\n\t\tthis._keymapInfos.push(layout);\n\t\tthis._mru = this._keymapInfos;\n\t}\n\n\tremoveKeyboardLayout(layout: KeymapInfo): void {\n\t\tlet index = this._mru.indexOf(layout);\n\t\tthis._mru.splice(index, 1);\n\t\tindex = this._keymapInfos.indexOf(layout);\n\t\tthis._keymapInfos.splice(index, 1);\n\t}\n\n\tgetMatchedKeymapInfo(keyMapping: IKeyboardMapping | null): { result: KeymapInfo; score: number } | null {\n\t\tif (!keyMapping) {\n\t\t\treturn null;\n\t\t}\n\n\t\tconst usStandard = this.getUSStandardLayout();\n\n\t\tif (usStandard) {\n\t\t\tlet maxScore = usStandard.getScore(keyMapping);\n\t\t\tif (maxScore === 0) {\n\t\t\t\treturn {\n\t\t\t\t\tresult: usStandard,\n\t\t\t\t\tscore: 0\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tlet result = usStandard;\n\t\t\tfor (let i = 0; i < this._mru.length; i++) {\n\t\t\t\tconst score = this._mru[i].getScore(keyMapping);\n\t\t\t\tif (score > maxScore) {\n\t\t\t\t\tif (score === 0) {\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\tresult: this._mru[i],\n\t\t\t\t\t\t\tscore: 0\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\n\t\t\t\t\tmaxScore = score;\n\t\t\t\t\tresult = this._mru[i];\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\tresult,\n\t\t\t\tscore: maxScore\n\t\t\t};\n\t\t}\n\n\t\tfor (let i = 0; i < this._mru.length; i++) {\n\t\t\tif (this._mru[i].fuzzyEqual(keyMapping)) {\n\t\t\t\treturn {\n\t\t\t\t\tresult: this._mru[i],\n\t\t\t\t\tscore: 0\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\n\t\treturn null;\n\t}\n\n\tgetUSStandardLayout() {\n\t\tconst usStandardLayouts = this._mru.filter(layout => layout.layout.isUSStandard);\n\n\t\tif (usStandardLayouts.length) {\n\t\t\treturn usStandardLayouts[0];\n\t\t}\n\n\t\treturn null;\n\t}\n\n\tisKeyMappingActive(keymap: IKeyboardMapping | null) {\n\t\treturn this._activeKeymapInfo && keymap && this._activeKeymapInfo.fuzzyEqual(keymap);\n\t}\n\n\tsetUSKeyboardLayout() {\n\t\tthis._activeKeymapInfo = this.getUSStandardLayout();\n\t}\n\n\tsetActiveKeyMapping(keymap: IKeyboardMapping | null) {\n\t\tlet keymapUpdated = false;\n\t\tconst matchedKeyboardLayout = this.getMatchedKeymapInfo(keymap);\n\t\tif (matchedKeyboardLayout) {\n\t\t\t// let score = matchedKeyboardLayout.score;\n\n\t\t\t// Due to https://bugs.chromium.org/p/chromium/issues/detail?id=977609, any key after a dead key will generate a wrong mapping,\n\t\t\t// we shoud avoid yielding the false error.\n\t\t\t// if (keymap && score < 0) {\n\t\t\t// const donotAskUpdateKey = 'missing.keyboardlayout.donotask';\n\t\t\t// if (this._storageService.getBoolean(donotAskUpdateKey, StorageScope.APPLICATION)) {\n\t\t\t// \treturn;\n\t\t\t// }\n\n\t\t\t// the keyboard layout doesn't actually match the key event or the keymap from chromium\n\t\t\t// this._notificationService.prompt(\n\t\t\t// \tSeverity.Info,\n\t\t\t// \tnls.localize('missing.keyboardlayout', 'Fail to find matching keyboard layout'),\n\t\t\t// \t[{\n\t\t\t// \t\tlabel: nls.localize('keyboardLayoutMissing.configure', \"Configure\"),\n\t\t\t// \t\trun: () => this._commandService.executeCommand('workbench.action.openKeyboardLayoutPicker')\n\t\t\t// \t}, {\n\t\t\t// \t\tlabel: nls.localize('neverAgain', \"Don't Show Again\"),\n\t\t\t// \t\tisSecondary: true,\n\t\t\t// \t\trun: () => this._storageService.store(donotAskUpdateKey, true, StorageScope.APPLICATION)\n\t\t\t// \t}]\n\t\t\t// );\n\n\t\t\t// console.warn('Active keymap/keyevent does not match current keyboard layout', JSON.stringify(keymap), this._activeKeymapInfo ? JSON.stringify(this._activeKeymapInfo.layout) : '');\n\n\t\t\t// return;\n\t\t\t// }\n\n\t\t\tif (!this._activeKeymapInfo) {\n\t\t\t\tthis._activeKeymapInfo = matchedKeyboardLayout.result;\n\t\t\t\tkeymapUpdated = true;\n\t\t\t} else if (keymap) {\n\t\t\t\tif (matchedKeyboardLayout.result.getScore(keymap) > this._activeKeymapInfo.getScore(keymap)) {\n\t\t\t\t\tthis._activeKeymapInfo = matchedKeyboardLayout.result;\n\t\t\t\t\tkeymapUpdated = true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (!this._activeKeymapInfo) {\n\t\t\tthis._activeKeymapInfo = this.getUSStandardLayout();\n\t\t\tkeymapUpdated = true;\n\t\t}\n\n\t\tif (!this._activeKeymapInfo || !keymapUpdated) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst index = this._mru.indexOf(this._activeKeymapInfo);\n\n\t\tthis._mru.splice(index, 1);\n\t\tthis._mru.unshift(this._activeKeymapInfo);\n\n\t\tthis._setKeyboardData(this._activeKeymapInfo);\n\t}\n\n\tsetActiveKeymapInfo(keymapInfo: KeymapInfo) {\n\t\tthis._activeKeymapInfo = keymapInfo;\n\n\t\tconst index = this._mru.indexOf(this._activeKeymapInfo);\n\n\t\tif (index === 0) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis._mru.splice(index, 1);\n\t\tthis._mru.unshift(this._activeKeymapInfo);\n\n\t\tthis._setKeyboardData(this._activeKeymapInfo);\n\t}\n\n\tpublic setLayoutFromBrowserAPI(): void {\n\t\tthis._updateKeyboardLayoutAsync(this._initialized);\n\t}\n\n\tprivate _updateKeyboardLayoutAsync(initialized: boolean, keyboardEvent?: IKeyboardEvent) {\n\t\tif (!initialized) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis._getBrowserKeyMapping(keyboardEvent).then(keyMap => {\n\t\t\t// might be false positive\n\t\t\tif (this.isKeyMappingActive(keyMap)) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tthis.setActiveKeyMapping(keyMap);\n\t\t});\n\t}\n\n\tpublic getKeyboardMapper(): IKeyboardMapper {\n\t\tconst config = readKeyboardConfig(this._configurationService);\n\t\tif (config.dispatch === DispatchConfig.KeyCode || !this._initialized || !this._activeKeymapInfo) {\n\t\t\t// Forcefully set to use keyCode\n\t\t\treturn new FallbackKeyboardMapper(config.mapAltGrToCtrlAlt, OS);\n\t\t}\n\t\tif (!this._keyboardMapper) {\n\t\t\tthis._keyboardMapper = new CachedKeyboardMapper(BrowserKeyboardMapperFactory._createKeyboardMapper(this._activeKeymapInfo, config.mapAltGrToCtrlAlt));\n\t\t}\n\t\treturn this._keyboardMapper;\n\t}\n\n\tpublic validateCurrentKeyboardMapping(keyboardEvent: IKeyboardEvent): void {\n\t\tif (!this._initialized) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst isCurrentKeyboard = this._validateCurrentKeyboardMapping(keyboardEvent);\n\n\t\tif (isCurrentKeyboard) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis._updateKeyboardLayoutAsync(true, keyboardEvent);\n\t}\n\n\tpublic setKeyboardLayout(layoutName: string) {\n\t\tconst matchedLayouts: KeymapInfo[] = this.keymapInfos.filter(keymapInfo => getKeyboardLayoutId(keymapInfo.layout) === layoutName);\n\n\t\tif (matchedLayouts.length > 0) {\n\t\t\tthis.setActiveKeymapInfo(matchedLayouts[0]);\n\t\t}\n\t}\n\n\tprivate _setKeyboardData(keymapInfo: KeymapInfo): void {\n\t\tthis._initialized = true;\n\n\t\tthis._keyboardMapper = null;\n\t\tthis._onDidChangeKeyboardMapper.fire();\n\t}\n\n\tprivate static _createKeyboardMapper(keymapInfo: KeymapInfo, mapAltGrToCtrlAlt: boolean): IKeyboardMapper {\n\t\tconst rawMapping = keymapInfo.mapping;\n\t\tconst isUSStandard = !!keymapInfo.layout.isUSStandard;\n\t\tif (OS === OperatingSystem.Windows) {\n\t\t\treturn new WindowsKeyboardMapper(isUSStandard, <IWindowsKeyboardMapping>rawMapping, mapAltGrToCtrlAlt);\n\t\t}\n\t\tif (Object.keys(rawMapping).length === 0) {\n\t\t\t// Looks like reading the mappings failed (most likely Mac + Japanese/Chinese keyboard layouts)\n\t\t\treturn new FallbackKeyboardMapper(mapAltGrToCtrlAlt, OS);\n\t\t}\n\n\t\treturn new MacLinuxKeyboardMapper(isUSStandard, <IMacLinuxKeyboardMapping>rawMapping, mapAltGrToCtrlAlt, OS);\n\t}\n\n\t//#region Browser API\n\tprivate _validateCurrentKeyboardMapping(keyboardEvent: IKeyboardEvent): boolean {\n\t\tif (!this._initialized) {\n\t\t\treturn true;\n\t\t}\n\n\t\tconst standardKeyboardEvent = keyboardEvent as StandardKeyboardEvent;\n\t\tconst currentKeymap = this._activeKeymapInfo;\n\t\tif (!currentKeymap) {\n\t\t\treturn true;\n\t\t}\n\n\t\tif (standardKeyboardEvent.browserEvent.key === 'Dead' || standardKeyboardEvent.browserEvent.isComposing) {\n\t\t\treturn true;\n\t\t}\n\n\t\tconst mapping = currentKeymap.mapping[standardKeyboardEvent.code];\n\n\t\tif (!mapping) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (mapping.value === '') {\n\t\t\t// The value is empty when the key is not a printable character, we skip validation.\n\t\t\tif (keyboardEvent.ctrlKey || keyboardEvent.metaKey) {\n\t\t\t\tsetTimeout(() => {\n\t\t\t\t\tthis._getBrowserKeyMapping().then((keymap: IRawMixedKeyboardMapping | null) => {\n\t\t\t\t\t\tif (this.isKeyMappingActive(keymap)) {\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tthis.setLayoutFromBrowserAPI();\n\t\t\t\t\t});\n\t\t\t\t}, 350);\n\t\t\t}\n\t\t\treturn true;\n\t\t}\n\n\t\tconst expectedValue = standardKeyboardEvent.altKey && standardKeyboardEvent.shiftKey ? mapping.withShiftAltGr :\n\t\t\tstandardKeyboardEvent.altKey ? mapping.withAltGr :\n\t\t\t\tstandardKeyboardEvent.shiftKey ? mapping.withShift : mapping.value;\n\n\t\tconst isDead = (standardKeyboardEvent.altKey && standardKeyboardEvent.shiftKey && mapping.withShiftAltGrIsDeadKey) ||\n\t\t\t(standardKeyboardEvent.altKey && mapping.withAltGrIsDeadKey) ||\n\t\t\t(standardKeyboardEvent.shiftKey && mapping.withShiftIsDeadKey) ||\n\t\t\tmapping.valueIsDeadKey;\n\n\t\tif (isDead && standardKeyboardEvent.browserEvent.key !== 'Dead') {\n\t\t\treturn false;\n\t\t}\n\n\t\t// TODO, this assumption is wrong as `browserEvent.key` doesn't necessarily equal expectedValue from real keymap\n\t\tif (!isDead && standardKeyboardEvent.browserEvent.key !== expectedValue) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn true;\n\t}\n\n\tprivate async _getBrowserKeyMapping(keyboardEvent?: IKeyboardEvent): Promise<IRawMixedKeyboardMapping | null> {\n\t\tif (this.keyboardLayoutMapAllowed) {\n\t\t\ttry {\n\t\t\t\treturn await (navigator as any).keyboard.getLayoutMap().then((e: any) => {\n\t\t\t\t\tconst ret: IKeyboardMapping = {};\n\t\t\t\t\tfor (const key of e) {\n\t\t\t\t\t\tret[key[0]] = {\n\t\t\t\t\t\t\t'value': key[1],\n\t\t\t\t\t\t\t'withShift': '',\n\t\t\t\t\t\t\t'withAltGr': '',\n\t\t\t\t\t\t\t'withShiftAltGr': ''\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\n\t\t\t\t\treturn ret;\n\n\t\t\t\t\t// const matchedKeyboardLayout = this.getMatchedKeymapInfo(ret);\n\n\t\t\t\t\t// if (matchedKeyboardLayout) {\n\t\t\t\t\t// \treturn matchedKeyboardLayout.result.mapping;\n\t\t\t\t\t// }\n\n\t\t\t\t\t// return null;\n\t\t\t\t});\n\t\t\t} catch {\n\t\t\t\t// getLayoutMap can throw if invoked from a nested browsing context\n\t\t\t\tthis.keyboardLayoutMapAllowed = false;\n\t\t\t}\n\t\t}\n\t\tif (keyboardEvent && !keyboardEvent.shiftKey && !keyboardEvent.altKey && !keyboardEvent.metaKey && !keyboardEvent.metaKey) {\n\t\t\tconst ret: IKeyboardMapping = {};\n\t\t\tconst standardKeyboardEvent = keyboardEvent as StandardKeyboardEvent;\n\t\t\tret[standardKeyboardEvent.browserEvent.code] = {\n\t\t\t\t'value': standardKeyboardEvent.browserEvent.key,\n\t\t\t\t'withShift': '',\n\t\t\t\t'withAltGr': '',\n\t\t\t\t'withShiftAltGr': ''\n\t\t\t};\n\n\t\t\tconst matchedKeyboardLayout = this.getMatchedKeymapInfo(ret);\n\n\t\t\tif (matchedKeyboardLayout) {\n\t\t\t\treturn ret;\n\t\t\t}\n\n\t\t\treturn null;\n\t\t}\n\n\t\treturn null;\n\t}\n\n\t//#endregion\n}\n\nexport class BrowserKeyboardMapperFactory extends BrowserKeyboardMapperFactoryBase {\n\tconstructor(configurationService: IConfigurationService, notificationService: INotificationService, storageService: IStorageService, commandService: ICommandService) {\n\t\t// super(notificationService, storageService, commandService);\n\t\tsuper(configurationService);\n\n\t\tconst platform = isWindows ? 'win' : isMacintosh ? 'darwin' : 'linux';\n\n\t\timport(isESM ?\n\t\t\tFileAccess.asBrowserUri(`vs/workbench/services/keybinding/browser/keyboardLayouts/layout.contribution.${platform}.js` satisfies AppResourcePath).path :\n\t\t\t`vs/workbench/services/keybinding/browser/keyboardLayouts/layout.contribution.${platform}`\n\t\t).then((m) => {\n\t\t\tconst keymapInfos: IKeymapInfo[] = m.KeyboardLayoutContribution.INSTANCE.layoutInfos;\n\t\t\tthis._keymapInfos.push(...keymapInfos.map(info => (new KeymapInfo(info.layout, info.secondaryLayouts, info.mapping, info.isUserKeyboardLayout))));\n\t\t\tthis._mru = this._keymapInfos;\n\t\t\tthis._initialized = true;\n\t\t\tthis.setLayoutFromBrowserAPI();\n\t\t});\n\t}\n}\n\nclass UserKeyboardLayout extends Disposable {\n\n\tprivate readonly reloadConfigurationScheduler: RunOnceScheduler;\n\tprotected readonly _onDidChange: Emitter<void> = this._register(new Emitter<void>());\n\treadonly onDidChange: Event<void> = this._onDidChange.event;\n\n\tprivate _keyboardLayout: KeymapInfo | null;\n\tget keyboardLayout(): KeymapInfo | null { return this._keyboardLayout; }\n\n\tconstructor(\n\t\tprivate readonly keyboardLayoutResource: URI,\n\t\tprivate readonly fileService: IFileService\n\t) {\n\t\tsuper();\n\n\t\tthis._keyboardLayout = null;\n\n\t\tthis.reloadConfigurationScheduler = this._register(new RunOnceScheduler(() => this.reload().then(changed => {\n\t\t\tif (changed) {\n\t\t\t\tthis._onDidChange.fire();\n\t\t\t}\n\t\t}), 50));\n\n\t\tthis._register(Event.filter(this.fileService.onDidFilesChange, e => e.contains(this.keyboardLayoutResource))(() => this.reloadConfigurationScheduler.schedule()));\n\t}\n\n\tasync initialize(): Promise<void> {\n\t\tawait this.reload();\n\t}\n\n\tprivate async reload(): Promise<boolean> {\n\t\tconst existing = this._keyboardLayout;\n\t\ttry {\n\t\t\tconst content = await this.fileService.readFile(this.keyboardLayoutResource);\n\t\t\tconst value = parse(content.value.toString());\n\t\t\tif (getNodeType(value) === 'object') {\n\t\t\t\tconst layoutInfo = value.layout;\n\t\t\t\tconst mappings = value.rawMapping;\n\t\t\t\tthis._keyboardLayout = KeymapInfo.createKeyboardLayoutFromDebugInfo(layoutInfo, mappings, true);\n\t\t\t} else {\n\t\t\t\tthis._keyboardLayout = null;\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tthis._keyboardLayout = null;\n\t\t}\n\n\t\treturn existing ? !objects.equals(existing, this._keyboardLayout) : true;\n\t}\n\n}\n\nexport class BrowserKeyboardLayoutService extends Disposable implements IKeyboardLayoutService {\n\tpublic _serviceBrand: undefined;\n\n\tprivate readonly _onDidChangeKeyboardLayout = new Emitter<void>();\n\tpublic readonly onDidChangeKeyboardLayout: Event<void> = this._onDidChangeKeyboardLayout.event;\n\n\tprivate _userKeyboardLayout: UserKeyboardLayout;\n\n\tprivate readonly _factory: BrowserKeyboardMapperFactory;\n\tprivate _keyboardLayoutMode: string;\n\n\tconstructor(\n\t\t@IEnvironmentService environmentService: IEnvironmentService,\n\t\t@IFileService fileService: IFileService,\n\t\t@INotificationService notificationService: INotificationService,\n\t\t@IStorageService storageService: IStorageService,\n\t\t@ICommandService commandService: ICommandService,\n\t\t@IConfigurationService private configurationService: IConfigurationService,\n\t) {\n\t\tsuper();\n\t\tconst keyboardConfig = configurationService.getValue<{ layout: string }>('keyboard');\n\t\tconst layout = keyboardConfig.layout;\n\t\tthis._keyboardLayoutMode = layout ?? 'autodetect';\n\t\tthis._factory = new BrowserKeyboardMapperFactory(configurationService, notificationService, storageService, commandService);\n\n\t\tthis._register(this._factory.onDidChangeKeyboardMapper(() => {\n\t\t\tthis._onDidChangeKeyboardLayout.fire();\n\t\t}));\n\n\t\tif (layout && layout !== 'autodetect') {\n\t\t\t// set keyboard layout\n\t\t\tthis._factory.setKeyboardLayout(layout);\n\t\t}\n\n\t\tthis._register(configurationService.onDidChangeConfiguration(e => {\n\t\t\tif (e.affectsConfiguration('keyboard.layout')) {\n\t\t\t\tconst keyboardConfig = configurationService.getValue<{ layout: string }>('keyboard');\n\t\t\t\tconst layout = keyboardConfig.layout;\n\t\t\t\tthis._keyboardLayoutMode = layout;\n\n\t\t\t\tif (layout === 'autodetect') {\n\t\t\t\t\tthis._factory.setLayoutFromBrowserAPI();\n\t\t\t\t} else {\n\t\t\t\t\tthis._factory.setKeyboardLayout(layout);\n\t\t\t\t}\n\t\t\t}\n\t\t}));\n\n\t\tthis._userKeyboardLayout = new UserKeyboardLayout(environmentService.keyboardLayoutResource, fileService);\n\t\tthis._userKeyboardLayout.initialize().then(() => {\n\t\t\tif (this._userKeyboardLayout.keyboardLayout) {\n\t\t\t\tthis._factory.registerKeyboardLayout(this._userKeyboardLayout.keyboardLayout);\n\n\t\t\t\tthis.setUserKeyboardLayoutIfMatched();\n\t\t\t}\n\t\t});\n\n\t\tthis._register(this._userKeyboardLayout.onDidChange(() => {\n\t\t\tconst userKeyboardLayouts = this._factory.keymapInfos.filter(layout => layout.isUserKeyboardLayout);\n\n\t\t\tif (userKeyboardLayouts.length) {\n\t\t\t\tif (this._userKeyboardLayout.keyboardLayout) {\n\t\t\t\t\tuserKeyboardLayouts[0].update(this._userKeyboardLayout.keyboardLayout);\n\t\t\t\t} else {\n\t\t\t\t\tthis._factory.removeKeyboardLayout(userKeyboardLayouts[0]);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif (this._userKeyboardLayout.keyboardLayout) {\n\t\t\t\t\tthis._factory.registerKeyboardLayout(this._userKeyboardLayout.keyboardLayout);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.setUserKeyboardLayoutIfMatched();\n\t\t}));\n\t}\n\n\tsetUserKeyboardLayoutIfMatched() {\n\t\tconst keyboardConfig = this.configurationService.getValue<{ layout: string }>('keyboard');\n\t\tconst layout = keyboardConfig.layout;\n\n\t\tif (layout && this._userKeyboardLayout.keyboardLayout) {\n\t\t\tif (getKeyboardLayoutId(this._userKeyboardLayout.keyboardLayout.layout) === layout && this._factory.activeKeymap) {\n\n\t\t\t\tif (!this._userKeyboardLayout.keyboardLayout.equal(this._factory.activeKeymap)) {\n\t\t\t\t\tthis._factory.setActiveKeymapInfo(this._userKeyboardLayout.keyboardLayout);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tgetKeyboardMapper(): IKeyboardMapper {\n\t\treturn this._factory.getKeyboardMapper();\n\t}\n\n\tpublic getCurrentKeyboardLayout(): IKeyboardLayoutInfo | null {\n\t\treturn this._factory.activeKeyboardLayout;\n\t}\n\n\tpublic getAllKeyboardLayouts(): IKeyboardLayoutInfo[] {\n\t\treturn this._factory.keyboardLayouts;\n\t}\n\n\tpublic getRawKeyboardMapping(): IKeyboardMapping | null {\n\t\treturn this._factory.activeKeyMapping;\n\t}\n\n\tpublic validateCurrentKeyboardMapping(keyboardEvent: IKeyboardEvent): void {\n\t\tif (this._keyboardLayoutMode !== 'autodetect') {\n\t\t\treturn;\n\t\t}\n\n\t\tthis._factory.validateCurrentKeyboardMapping(keyboardEvent);\n\t}\n}\n\nregisterSingleton(IKeyboardLayoutService, BrowserKeyboardLayoutService, InstantiationType.Delayed);\n\n// Configuration\nconst configurationRegistry = Registry.as<IConfigurationRegistry>(ConfigExtensions.Configuration);\nconst keyboardConfiguration: IConfigurationNode = {\n\t'id': 'keyboard',\n\t'order': 15,\n\t'type': 'object',\n\t'title': nls.localize('keyboardConfigurationTitle', \"Keyboard\"),\n\t'properties': {\n\t\t'keyboard.layout': {\n\t\t\t'type': 'string',\n\t\t\t'default': 'autodetect',\n\t\t\t'description': nls.localize('keyboard.layout.config', \"Control the keyboard layout used in web.\")\n\t\t}\n\t}\n};\n\nconfigurationRegistry.registerConfiguration(keyboardConfiguration);\n"],
  "mappings": "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",
  "names": ["keyboardConfig", "layout"]
}
