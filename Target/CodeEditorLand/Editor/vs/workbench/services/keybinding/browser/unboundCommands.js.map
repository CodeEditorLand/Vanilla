{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/keybinding/browser/unboundCommands.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CommandsRegistry, ICommandMetadata } from '../../../../platform/commands/common/commands.js';\nimport { isNonEmptyArray } from '../../../../base/common/arrays.js';\nimport { EditorExtensionsRegistry } from '../../../../editor/browser/editorExtensions.js';\nimport { MenuRegistry, MenuId, isIMenuItem } from '../../../../platform/actions/common/actions.js';\n\nexport function getAllUnboundCommands(boundCommands: Map<string, boolean>): string[] {\n\tconst unboundCommands: string[] = [];\n\tconst seenMap: Map<string, boolean> = new Map<string, boolean>();\n\tconst addCommand = (id: string, includeCommandWithArgs: boolean) => {\n\t\tif (seenMap.has(id)) {\n\t\t\treturn;\n\t\t}\n\t\tseenMap.set(id, true);\n\t\tif (id[0] === '_' || id.indexOf('vscode.') === 0) { // private command\n\t\t\treturn;\n\t\t}\n\t\tif (boundCommands.get(id) === true) {\n\t\t\treturn;\n\t\t}\n\t\tif (!includeCommandWithArgs) {\n\t\t\tconst command = CommandsRegistry.getCommand(id);\n\t\t\tif (command && typeof command.metadata === 'object'\n\t\t\t\t&& isNonEmptyArray((<ICommandMetadata>command.metadata).args)) { // command with args\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\tunboundCommands.push(id);\n\t};\n\n\t// Add all commands from Command Palette\n\tfor (const menuItem of MenuRegistry.getMenuItems(MenuId.CommandPalette)) {\n\t\tif (isIMenuItem(menuItem)) {\n\t\t\taddCommand(menuItem.command.id, true);\n\t\t}\n\t}\n\n\t// Add all editor actions\n\tfor (const editorAction of EditorExtensionsRegistry.getEditorActions()) {\n\t\taddCommand(editorAction.id, true);\n\t}\n\n\tfor (const id of CommandsRegistry.getCommands().keys()) {\n\t\taddCommand(id, false);\n\t}\n\n\treturn unboundCommands;\n}\n"],
  "mappings": ";;AAKA,SAAS,kBAAkB,wBAAwB;AACnD,SAAS,uBAAuB;AAChC,SAAS,gCAAgC;AACzC,SAAS,cAAc,QAAQ,mBAAmB;AAE3C,SAAS,sBAAsB,eAA+C;AACpF,QAAM,kBAA4B,CAAC;AACnC,QAAM,UAAgC,oBAAI,IAAqB;AAC/D,QAAM,aAAa,wBAAC,IAAY,2BAAoC;AACnE,QAAI,QAAQ,IAAI,EAAE,GAAG;AACpB;AAAA,IACD;AACA,YAAQ,IAAI,IAAI,IAAI;AACpB,QAAI,GAAG,CAAC,MAAM,OAAO,GAAG,QAAQ,SAAS,MAAM,GAAG;AACjD;AAAA,IACD;AACA,QAAI,cAAc,IAAI,EAAE,MAAM,MAAM;AACnC;AAAA,IACD;AACA,QAAI,CAAC,wBAAwB;AAC5B,YAAM,UAAU,iBAAiB,WAAW,EAAE;AAC9C,UAAI,WAAW,OAAO,QAAQ,aAAa,YACvC,gBAAmC,QAAQ,SAAU,IAAI,GAAG;AAC/D;AAAA,MACD;AAAA,IACD;AACA,oBAAgB,KAAK,EAAE;AAAA,EACxB,GAnBmB;AAsBnB,aAAW,YAAY,aAAa,aAAa,OAAO,cAAc,GAAG;AACxE,QAAI,YAAY,QAAQ,GAAG;AAC1B,iBAAW,SAAS,QAAQ,IAAI,IAAI;AAAA,IACrC;AAAA,EACD;AAGA,aAAW,gBAAgB,yBAAyB,iBAAiB,GAAG;AACvE,eAAW,aAAa,IAAI,IAAI;AAAA,EACjC;AAEA,aAAW,MAAM,iBAAiB,YAAY,EAAE,KAAK,GAAG;AACvD,eAAW,IAAI,KAAK;AAAA,EACrB;AAEA,SAAO;AACR;AAzCgB;",
  "names": []
}
