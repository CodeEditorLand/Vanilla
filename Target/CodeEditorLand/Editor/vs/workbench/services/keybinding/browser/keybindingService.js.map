{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/keybinding/browser/keybindingService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as nls from \"../../../../nls.js\";\n\n// base\nimport * as browser from \"../../../../base/browser/browser.js\";\nimport {\n\tBrowserFeatures,\n\tKeyboardSupport,\n} from \"../../../../base/browser/canIUse.js\";\nimport * as dom from \"../../../../base/browser/dom.js\";\nimport {\n\tStandardKeyboardEvent,\n\tprintKeyboardEvent,\n\tprintStandardKeyboardEvent,\n} from \"../../../../base/browser/keyboardEvent.js\";\nimport { mainWindow } from \"../../../../base/browser/window.js\";\nimport {\n\tDeferredPromise,\n\tRunOnceScheduler,\n} from \"../../../../base/common/async.js\";\nimport { Emitter, Event } from \"../../../../base/common/event.js\";\nimport { parse } from \"../../../../base/common/json.js\";\nimport type { IJSONSchema } from \"../../../../base/common/jsonSchema.js\";\nimport {\n\tIMMUTABLE_CODE_TO_KEY_CODE,\n\tKeyCode,\n\tKeyCodeUtils,\n\tKeyMod,\n\tScanCode,\n\tScanCodeUtils,\n} from \"../../../../base/common/keyCodes.js\";\nimport { UserSettingsLabelProvider } from \"../../../../base/common/keybindingLabels.js\";\nimport { KeybindingParser } from \"../../../../base/common/keybindingParser.js\";\nimport {\n\tKeyCodeChord,\n\ttype Keybinding,\n\ttype ResolvedKeybinding,\n\tScanCodeChord,\n} from \"../../../../base/common/keybindings.js\";\nimport {\n\tDisposable,\n\tDisposableStore,\n\ttype IDisposable,\n} from \"../../../../base/common/lifecycle.js\";\nimport * as objects from \"../../../../base/common/objects.js\";\nimport {\n\tOS,\n\tOperatingSystem,\n\tisMacintosh,\n} from \"../../../../base/common/platform.js\";\nimport { dirname } from \"../../../../base/common/resources.js\";\n\nimport {\n\ttype ILocalizedString,\n\tisLocalizedString,\n} from \"../../../../platform/action/common/action.js\";\n// platform\nimport { MenuRegistry } from \"../../../../platform/actions/common/actions.js\";\nimport {\n\tCommandsRegistry,\n\tICommandService,\n} from \"../../../../platform/commands/common/commands.js\";\nimport {\n\tContextKeyExpr,\n\ttype ContextKeyExpression,\n\ttype IContextKey,\n\tIContextKeyService,\n} from \"../../../../platform/contextkey/common/contextkey.js\";\nimport type { ExtensionIdentifier } from \"../../../../platform/extensions/common/extensions.js\";\nimport {\n\tFileOperation,\n\tIFileService,\n} from \"../../../../platform/files/common/files.js\";\nimport {\n\tInstantiationType,\n\tregisterSingleton,\n} from \"../../../../platform/instantiation/common/extensions.js\";\nimport {\n\tExtensions,\n\ttype IJSONContributionRegistry,\n} from \"../../../../platform/jsonschemas/common/jsonContributionRegistry.js\";\nimport { AbstractKeybindingService } from \"../../../../platform/keybinding/common/abstractKeybindingService.js\";\nimport {\n\tIKeybindingService,\n\ttype IKeyboardEvent,\n\ttype KeybindingsSchemaContribution,\n} from \"../../../../platform/keybinding/common/keybinding.js\";\nimport { KeybindingResolver } from \"../../../../platform/keybinding/common/keybindingResolver.js\";\nimport {\n\ttype IExtensionKeybindingRule,\n\ttype IKeybindingItem,\n\tKeybindingWeight,\n\tKeybindingsRegistry,\n} from \"../../../../platform/keybinding/common/keybindingsRegistry.js\";\nimport { ResolvedKeybindingItem } from \"../../../../platform/keybinding/common/resolvedKeybindingItem.js\";\nimport { IKeyboardLayoutService } from \"../../../../platform/keyboardLayout/common/keyboardLayout.js\";\nimport type { IKeyboardMapper } from \"../../../../platform/keyboardLayout/common/keyboardMapper.js\";\nimport { ILogService } from \"../../../../platform/log/common/log.js\";\nimport { INotificationService } from \"../../../../platform/notification/common/notification.js\";\nimport { Registry } from \"../../../../platform/registry/common/platform.js\";\nimport { ITelemetryService } from \"../../../../platform/telemetry/common/telemetry.js\";\nimport { IUriIdentityService } from \"../../../../platform/uriIdentity/common/uriIdentity.js\";\n\n// workbench\nimport { commandsExtensionPoint } from \"../../actions/common/menusExtensionPoint.js\";\nimport { IExtensionService } from \"../../extensions/common/extensions.js\";\nimport {\n\ttype ExtensionMessageCollector,\n\tExtensionsRegistry,\n} from \"../../extensions/common/extensionsRegistry.js\";\nimport { IHostService } from \"../../host/browser/host.js\";\nimport { IUserDataProfileService } from \"../../userDataProfile/common/userDataProfile.js\";\nimport {\n\ttype IUserKeybindingItem,\n\tKeybindingIO,\n\tOutputBuilder,\n} from \"../common/keybindingIO.js\";\nimport type { IKeyboard, INavigatorWithKeyboard } from \"./navigatorKeyboard.js\";\nimport { getAllUnboundCommands } from \"./unboundCommands.js\";\n\ninterface ContributedKeyBinding {\n\tcommand: string;\n\targs?: any;\n\tkey: string;\n\twhen?: string;\n\tmac?: string;\n\tlinux?: string;\n\twin?: string;\n}\n\nfunction isValidContributedKeyBinding(\n\tkeyBinding: ContributedKeyBinding,\n\trejects: string[],\n): boolean {\n\tif (!keyBinding) {\n\t\trejects.push(nls.localize(\"nonempty\", \"expected non-empty value.\"));\n\t\treturn false;\n\t}\n\tif (typeof keyBinding.command !== \"string\") {\n\t\trejects.push(\n\t\t\tnls.localize(\n\t\t\t\t\"requirestring\",\n\t\t\t\t\"property `{0}` is mandatory and must be of type `string`\",\n\t\t\t\t\"command\",\n\t\t\t),\n\t\t);\n\t\treturn false;\n\t}\n\tif (keyBinding.key && typeof keyBinding.key !== \"string\") {\n\t\trejects.push(\n\t\t\tnls.localize(\n\t\t\t\t\"optstring\",\n\t\t\t\t\"property `{0}` can be omitted or must be of type `string`\",\n\t\t\t\t\"key\",\n\t\t\t),\n\t\t);\n\t\treturn false;\n\t}\n\tif (keyBinding.when && typeof keyBinding.when !== \"string\") {\n\t\trejects.push(\n\t\t\tnls.localize(\n\t\t\t\t\"optstring\",\n\t\t\t\t\"property `{0}` can be omitted or must be of type `string`\",\n\t\t\t\t\"when\",\n\t\t\t),\n\t\t);\n\t\treturn false;\n\t}\n\tif (keyBinding.mac && typeof keyBinding.mac !== \"string\") {\n\t\trejects.push(\n\t\t\tnls.localize(\n\t\t\t\t\"optstring\",\n\t\t\t\t\"property `{0}` can be omitted or must be of type `string`\",\n\t\t\t\t\"mac\",\n\t\t\t),\n\t\t);\n\t\treturn false;\n\t}\n\tif (keyBinding.linux && typeof keyBinding.linux !== \"string\") {\n\t\trejects.push(\n\t\t\tnls.localize(\n\t\t\t\t\"optstring\",\n\t\t\t\t\"property `{0}` can be omitted or must be of type `string`\",\n\t\t\t\t\"linux\",\n\t\t\t),\n\t\t);\n\t\treturn false;\n\t}\n\tif (keyBinding.win && typeof keyBinding.win !== \"string\") {\n\t\trejects.push(\n\t\t\tnls.localize(\n\t\t\t\t\"optstring\",\n\t\t\t\t\"property `{0}` can be omitted or must be of type `string`\",\n\t\t\t\t\"win\",\n\t\t\t),\n\t\t);\n\t\treturn false;\n\t}\n\treturn true;\n}\n\nconst keybindingType: IJSONSchema = {\n\ttype: \"object\",\n\tdefault: { command: \"\", key: \"\" },\n\tproperties: {\n\t\tcommand: {\n\t\t\tdescription: nls.localize(\n\t\t\t\t\"vscode.extension.contributes.keybindings.command\",\n\t\t\t\t\"Identifier of the command to run when keybinding is triggered.\",\n\t\t\t),\n\t\t\ttype: \"string\",\n\t\t},\n\t\targs: {\n\t\t\tdescription: nls.localize(\n\t\t\t\t\"vscode.extension.contributes.keybindings.args\",\n\t\t\t\t\"Arguments to pass to the command to execute.\",\n\t\t\t),\n\t\t},\n\t\tkey: {\n\t\t\tdescription: nls.localize(\n\t\t\t\t\"vscode.extension.contributes.keybindings.key\",\n\t\t\t\t\"Key or key sequence (separate keys with plus-sign and sequences with space, e.g. Ctrl+O and Ctrl+L L for a chord).\",\n\t\t\t),\n\t\t\ttype: \"string\",\n\t\t},\n\t\tmac: {\n\t\t\tdescription: nls.localize(\n\t\t\t\t\"vscode.extension.contributes.keybindings.mac\",\n\t\t\t\t\"Mac specific key or key sequence.\",\n\t\t\t),\n\t\t\ttype: \"string\",\n\t\t},\n\t\tlinux: {\n\t\t\tdescription: nls.localize(\n\t\t\t\t\"vscode.extension.contributes.keybindings.linux\",\n\t\t\t\t\"Linux specific key or key sequence.\",\n\t\t\t),\n\t\t\ttype: \"string\",\n\t\t},\n\t\twin: {\n\t\t\tdescription: nls.localize(\n\t\t\t\t\"vscode.extension.contributes.keybindings.win\",\n\t\t\t\t\"Windows specific key or key sequence.\",\n\t\t\t),\n\t\t\ttype: \"string\",\n\t\t},\n\t\twhen: {\n\t\t\tdescription: nls.localize(\n\t\t\t\t\"vscode.extension.contributes.keybindings.when\",\n\t\t\t\t\"Condition when the key is active.\",\n\t\t\t),\n\t\t\ttype: \"string\",\n\t\t},\n\t},\n};\n\nconst keybindingsExtPoint = ExtensionsRegistry.registerExtensionPoint<\n\tContributedKeyBinding | ContributedKeyBinding[]\n>({\n\textensionPoint: \"keybindings\",\n\tdeps: [commandsExtensionPoint],\n\tjsonSchema: {\n\t\tdescription: nls.localize(\n\t\t\t\"vscode.extension.contributes.keybindings\",\n\t\t\t\"Contributes keybindings.\",\n\t\t),\n\t\toneOf: [\n\t\t\tkeybindingType,\n\t\t\t{\n\t\t\t\ttype: \"array\",\n\t\t\t\titems: keybindingType,\n\t\t\t},\n\t\t],\n\t},\n});\n\nconst NUMPAD_PRINTABLE_SCANCODES = [\n\tScanCode.NumpadDivide,\n\tScanCode.NumpadMultiply,\n\tScanCode.NumpadSubtract,\n\tScanCode.NumpadAdd,\n\tScanCode.Numpad1,\n\tScanCode.Numpad2,\n\tScanCode.Numpad3,\n\tScanCode.Numpad4,\n\tScanCode.Numpad5,\n\tScanCode.Numpad6,\n\tScanCode.Numpad7,\n\tScanCode.Numpad8,\n\tScanCode.Numpad9,\n\tScanCode.Numpad0,\n\tScanCode.NumpadDecimal,\n];\n\nconst otherMacNumpadMapping = new Map<ScanCode, KeyCode>();\notherMacNumpadMapping.set(ScanCode.Numpad1, KeyCode.Digit1);\notherMacNumpadMapping.set(ScanCode.Numpad2, KeyCode.Digit2);\notherMacNumpadMapping.set(ScanCode.Numpad3, KeyCode.Digit3);\notherMacNumpadMapping.set(ScanCode.Numpad4, KeyCode.Digit4);\notherMacNumpadMapping.set(ScanCode.Numpad5, KeyCode.Digit5);\notherMacNumpadMapping.set(ScanCode.Numpad6, KeyCode.Digit6);\notherMacNumpadMapping.set(ScanCode.Numpad7, KeyCode.Digit7);\notherMacNumpadMapping.set(ScanCode.Numpad8, KeyCode.Digit8);\notherMacNumpadMapping.set(ScanCode.Numpad9, KeyCode.Digit9);\notherMacNumpadMapping.set(ScanCode.Numpad0, KeyCode.Digit0);\n\nexport class WorkbenchKeybindingService extends AbstractKeybindingService {\n\tprivate _keyboardMapper: IKeyboardMapper;\n\tprivate _cachedResolver: KeybindingResolver | null;\n\tprivate userKeybindings: UserKeybindings;\n\tprivate isComposingGlobalContextKey: IContextKey<boolean>;\n\tprivate _keybindingHoldMode: DeferredPromise<void> | null;\n\tprivate readonly _contributions: KeybindingsSchemaContribution[] = [];\n\tprivate readonly kbsJsonSchema: KeybindingsJsonSchema;\n\n\tconstructor(\n\t\t@IContextKeyService contextKeyService: IContextKeyService,\n\t\t@ICommandService commandService: ICommandService,\n\t\t@ITelemetryService telemetryService: ITelemetryService,\n\t\t@INotificationService notificationService: INotificationService,\n\t\t@IUserDataProfileService userDataProfileService: IUserDataProfileService,\n\t\t@IHostService private readonly hostService: IHostService,\n\t\t@IExtensionService extensionService: IExtensionService,\n\t\t@IFileService fileService: IFileService,\n\t\t@IUriIdentityService uriIdentityService: IUriIdentityService,\n\t\t@ILogService logService: ILogService,\n\t\t@IKeyboardLayoutService private readonly keyboardLayoutService: IKeyboardLayoutService\n\t) {\n\t\tsuper(contextKeyService, commandService, telemetryService, notificationService, logService);\n\n\t\tthis.isComposingGlobalContextKey = contextKeyService.createKey('isComposing', false);\n\n\t\tthis.kbsJsonSchema = new KeybindingsJsonSchema();\n\t\tthis.updateKeybindingsJsonSchema();\n\n\t\tthis._keyboardMapper = this.keyboardLayoutService.getKeyboardMapper();\n\t\tthis._register(this.keyboardLayoutService.onDidChangeKeyboardLayout(() => {\n\t\t\tthis._keyboardMapper = this.keyboardLayoutService.getKeyboardMapper();\n\t\t\tthis.updateResolver();\n\t\t}));\n\n\t\tthis._keybindingHoldMode = null;\n\t\tthis._cachedResolver = null;\n\n\t\tthis.userKeybindings = this._register(new UserKeybindings(userDataProfileService, uriIdentityService, fileService, logService));\n\t\tthis.userKeybindings.initialize().then(() => {\n\t\t\tif (this.userKeybindings.keybindings.length) {\n\t\t\t\tthis.updateResolver();\n\t\t\t}\n\t\t});\n\t\tthis._register(this.userKeybindings.onDidChange(() => {\n\t\t\tlogService.debug('User keybindings changed');\n\t\t\tthis.updateResolver();\n\t\t}));\n\n\t\tkeybindingsExtPoint.setHandler((extensions) => {\n\n\t\t\tconst keybindings: IExtensionKeybindingRule[] = [];\n\t\t\tfor (const extension of extensions) {\n\t\t\t\tthis._handleKeybindingsExtensionPointUser(extension.description.identifier, extension.description.isBuiltin, extension.value, extension.collector, keybindings);\n\t\t\t}\n\n\t\t\tKeybindingsRegistry.setExtensionKeybindings(keybindings);\n\t\t\tthis.updateResolver();\n\t\t});\n\n\t\tthis.updateKeybindingsJsonSchema();\n\t\tthis._register(extensionService.onDidRegisterExtensions(() => this.updateKeybindingsJsonSchema()));\n\n\t\tthis._register(Event.runAndSubscribe(dom.onDidRegisterWindow, ({ window, disposables }) => disposables.add(this._registerKeyListeners(window)), { window: mainWindow, disposables: this._store }));\n\n\t\tthis._register(browser.onDidChangeFullscreen(windowId => {\n\t\t\tif (windowId !== mainWindow.vscodeWindowId) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst keyboard: IKeyboard | null = (<INavigatorWithKeyboard>navigator).keyboard;\n\n\t\t\tif (BrowserFeatures.keyboard === KeyboardSupport.None) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (browser.isFullscreen(mainWindow)) {\n\t\t\t\tkeyboard?.lock(['Escape']);\n\t\t\t} else {\n\t\t\t\tkeyboard?.unlock();\n\t\t\t}\n\n\t\t\t// update resolver which will bring back all unbound keyboard shortcuts\n\t\t\tthis._cachedResolver = null;\n\t\t\tthis._onDidUpdateKeybindings.fire();\n\t\t}));\n\t}\n\n\tprivate _registerKeyListeners(window: Window): IDisposable {\n\t\tconst disposables = new DisposableStore();\n\n\t\t// for standard keybindings\n\t\tdisposables.add(\n\t\t\tdom.addDisposableListener(\n\t\t\t\twindow,\n\t\t\t\tdom.EventType.KEY_DOWN,\n\t\t\t\t(e: KeyboardEvent) => {\n\t\t\t\t\tif (this._keybindingHoldMode) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\tthis.isComposingGlobalContextKey.set(e.isComposing);\n\t\t\t\t\tconst keyEvent = new StandardKeyboardEvent(e);\n\t\t\t\t\tthis._log(\n\t\t\t\t\t\t`/ Received  keydown event - ${printKeyboardEvent(e)}`,\n\t\t\t\t\t);\n\t\t\t\t\tthis._log(\n\t\t\t\t\t\t`| Converted keydown event - ${printStandardKeyboardEvent(keyEvent)}`,\n\t\t\t\t\t);\n\t\t\t\t\tconst shouldPreventDefault = this._dispatch(\n\t\t\t\t\t\tkeyEvent,\n\t\t\t\t\t\tkeyEvent.target,\n\t\t\t\t\t);\n\t\t\t\t\tif (shouldPreventDefault) {\n\t\t\t\t\t\tkeyEvent.preventDefault();\n\t\t\t\t\t}\n\t\t\t\t\tthis.isComposingGlobalContextKey.set(false);\n\t\t\t\t},\n\t\t\t),\n\t\t);\n\n\t\t// for single modifier chord keybindings (e.g. shift shift)\n\t\tdisposables.add(\n\t\t\tdom.addDisposableListener(\n\t\t\t\twindow,\n\t\t\t\tdom.EventType.KEY_UP,\n\t\t\t\t(e: KeyboardEvent) => {\n\t\t\t\t\tthis._resetKeybindingHoldMode();\n\t\t\t\t\tthis.isComposingGlobalContextKey.set(e.isComposing);\n\t\t\t\t\tconst keyEvent = new StandardKeyboardEvent(e);\n\t\t\t\t\tconst shouldPreventDefault = this._singleModifierDispatch(\n\t\t\t\t\t\tkeyEvent,\n\t\t\t\t\t\tkeyEvent.target,\n\t\t\t\t\t);\n\t\t\t\t\tif (shouldPreventDefault) {\n\t\t\t\t\t\tkeyEvent.preventDefault();\n\t\t\t\t\t}\n\t\t\t\t\tthis.isComposingGlobalContextKey.set(false);\n\t\t\t\t},\n\t\t\t),\n\t\t);\n\n\t\treturn disposables;\n\t}\n\n\tpublic registerSchemaContribution(\n\t\tcontribution: KeybindingsSchemaContribution,\n\t): void {\n\t\tthis._contributions.push(contribution);\n\t\tif (contribution.onDidChange) {\n\t\t\tthis._register(\n\t\t\t\tcontribution.onDidChange(() =>\n\t\t\t\t\tthis.updateKeybindingsJsonSchema(),\n\t\t\t\t),\n\t\t\t);\n\t\t}\n\t\tthis.updateKeybindingsJsonSchema();\n\t}\n\n\tprivate updateKeybindingsJsonSchema() {\n\t\tthis.kbsJsonSchema.updateSchema(\n\t\t\tthis._contributions.flatMap((x) => x.getSchemaAdditions()),\n\t\t);\n\t}\n\n\tprivate _printKeybinding(keybinding: Keybinding): string {\n\t\treturn (\n\t\t\tUserSettingsLabelProvider.toLabel(\n\t\t\t\tOS,\n\t\t\t\tkeybinding.chords,\n\t\t\t\t(chord) => {\n\t\t\t\t\tif (chord instanceof KeyCodeChord) {\n\t\t\t\t\t\treturn KeyCodeUtils.toString(chord.keyCode);\n\t\t\t\t\t}\n\t\t\t\t\treturn ScanCodeUtils.toString(chord.scanCode);\n\t\t\t\t},\n\t\t\t) || \"[null]\"\n\t\t);\n\t}\n\n\tprivate _printResolvedKeybinding(\n\t\tresolvedKeybinding: ResolvedKeybinding,\n\t): string {\n\t\treturn resolvedKeybinding\n\t\t\t.getDispatchChords()\n\t\t\t.map((x) => x || \"[null]\")\n\t\t\t.join(\" \");\n\t}\n\n\tprivate _printResolvedKeybindings(\n\t\toutput: string[],\n\t\tinput: string,\n\t\tresolvedKeybindings: ResolvedKeybinding[],\n\t): void {\n\t\tconst padLength = 35;\n\t\tconst firstRow = `${input.padStart(padLength, \" \")} => `;\n\t\tif (resolvedKeybindings.length === 0) {\n\t\t\t// no binding found\n\t\t\toutput.push(\n\t\t\t\t`${firstRow}${\"[NO BINDING]\".padStart(padLength, \" \")}`,\n\t\t\t);\n\t\t\treturn;\n\t\t}\n\n\t\tconst firstRowIndentation = firstRow.length;\n\t\tconst isFirst = true;\n\t\tfor (const resolvedKeybinding of resolvedKeybindings) {\n\t\t\tif (isFirst) {\n\t\t\t\toutput.push(\n\t\t\t\t\t`${firstRow}${this._printResolvedKeybinding(resolvedKeybinding).padStart(padLength, \" \")}`,\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\toutput.push(\n\t\t\t\t\t`${\" \".repeat(firstRowIndentation)}${this._printResolvedKeybinding(resolvedKeybinding).padStart(padLength, \" \")}`,\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate _dumpResolveKeybindingDebugInfo(): string {\n\t\tconst seenBindings = new Set<string>();\n\t\tconst result: string[] = [];\n\n\t\tresult.push(`Default Resolved Keybindings (unique only):`);\n\t\tfor (const item of KeybindingsRegistry.getDefaultKeybindings()) {\n\t\t\tif (!item.keybinding) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tconst input = this._printKeybinding(item.keybinding);\n\t\t\tif (seenBindings.has(input)) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tseenBindings.add(input);\n\t\t\tconst resolvedKeybindings = this._keyboardMapper.resolveKeybinding(\n\t\t\t\titem.keybinding,\n\t\t\t);\n\t\t\tthis._printResolvedKeybindings(result, input, resolvedKeybindings);\n\t\t}\n\n\t\tresult.push(`User Resolved Keybindings (unique only):`);\n\t\tfor (const item of this.userKeybindings.keybindings) {\n\t\t\tif (!item.keybinding) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tconst input =\n\t\t\t\titem._sourceKey ??\n\t\t\t\t\"Impossible: missing source key, but has keybinding\";\n\t\t\tif (seenBindings.has(input)) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tseenBindings.add(input);\n\t\t\tconst resolvedKeybindings = this._keyboardMapper.resolveKeybinding(\n\t\t\t\titem.keybinding,\n\t\t\t);\n\t\t\tthis._printResolvedKeybindings(result, input, resolvedKeybindings);\n\t\t}\n\n\t\treturn result.join(\"\\n\");\n\t}\n\n\tpublic _dumpDebugInfo(): string {\n\t\tconst layoutInfo = JSON.stringify(\n\t\t\tthis.keyboardLayoutService.getCurrentKeyboardLayout(),\n\t\t\tnull,\n\t\t\t\"\\t\",\n\t\t);\n\t\tconst mapperInfo = this._keyboardMapper.dumpDebugInfo();\n\t\tconst resolvedKeybindings = this._dumpResolveKeybindingDebugInfo();\n\t\tconst rawMapping = JSON.stringify(\n\t\t\tthis.keyboardLayoutService.getRawKeyboardMapping(),\n\t\t\tnull,\n\t\t\t\"\\t\",\n\t\t);\n\t\treturn `Layout info:\\n${layoutInfo}\\n\\n${resolvedKeybindings}\\n\\n${mapperInfo}\\n\\nRaw mapping:\\n${rawMapping}`;\n\t}\n\n\tpublic _dumpDebugInfoJSON(): string {\n\t\tconst info = {\n\t\t\tlayout: this.keyboardLayoutService.getCurrentKeyboardLayout(),\n\t\t\trawMapping: this.keyboardLayoutService.getRawKeyboardMapping(),\n\t\t};\n\t\treturn JSON.stringify(info, null, \"\\t\");\n\t}\n\n\tpublic override enableKeybindingHoldMode(\n\t\tcommandId: string,\n\t): Promise<void> | undefined {\n\t\tif (this._currentlyDispatchingCommandId !== commandId) {\n\t\t\treturn undefined;\n\t\t}\n\t\tthis._keybindingHoldMode = new DeferredPromise<void>();\n\t\tconst focusTracker = dom.trackFocus(dom.getWindow(undefined));\n\t\tconst listener = focusTracker.onDidBlur(() =>\n\t\t\tthis._resetKeybindingHoldMode(),\n\t\t);\n\t\tthis._keybindingHoldMode.p.finally(() => {\n\t\t\tlistener.dispose();\n\t\t\tfocusTracker.dispose();\n\t\t});\n\t\tthis._log(`+ Enabled hold-mode for ${commandId}.`);\n\t\treturn this._keybindingHoldMode.p;\n\t}\n\n\tprivate _resetKeybindingHoldMode(): void {\n\t\tif (this._keybindingHoldMode) {\n\t\t\tthis._keybindingHoldMode?.complete();\n\t\t\tthis._keybindingHoldMode = null;\n\t\t}\n\t}\n\n\tpublic override customKeybindingsCount(): number {\n\t\treturn this.userKeybindings.keybindings.length;\n\t}\n\n\tprivate updateResolver(): void {\n\t\tthis._cachedResolver = null;\n\t\tthis._onDidUpdateKeybindings.fire();\n\t}\n\n\tprotected _getResolver(): KeybindingResolver {\n\t\tif (!this._cachedResolver) {\n\t\t\tconst defaults = this._resolveKeybindingItems(\n\t\t\t\tKeybindingsRegistry.getDefaultKeybindings(),\n\t\t\t\ttrue,\n\t\t\t);\n\t\t\tconst overrides = this._resolveUserKeybindingItems(\n\t\t\t\tthis.userKeybindings.keybindings,\n\t\t\t\tfalse,\n\t\t\t);\n\t\t\tthis._cachedResolver = new KeybindingResolver(\n\t\t\t\tdefaults,\n\t\t\t\toverrides,\n\t\t\t\t(str) => this._log(str),\n\t\t\t);\n\t\t}\n\t\treturn this._cachedResolver;\n\t}\n\n\tprotected _documentHasFocus(): boolean {\n\t\t// it is possible that the document has lost focus, but the\n\t\t// window is still focused, e.g. when a <webview> element\n\t\t// has focus\n\t\treturn this.hostService.hasFocus;\n\t}\n\n\tprivate _resolveKeybindingItems(\n\t\titems: IKeybindingItem[],\n\t\tisDefault: boolean,\n\t): ResolvedKeybindingItem[] {\n\t\tconst result: ResolvedKeybindingItem[] = [];\n\t\tlet resultLen = 0;\n\t\tfor (const item of items) {\n\t\t\tconst when = item.when || undefined;\n\t\t\tconst keybinding = item.keybinding;\n\t\t\tif (keybinding) {\n\t\t\t\tif (this._assertBrowserConflicts(keybinding)) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tconst resolvedKeybindings =\n\t\t\t\t\tthis._keyboardMapper.resolveKeybinding(keybinding);\n\t\t\t\tfor (let i = resolvedKeybindings.length - 1; i >= 0; i--) {\n\t\t\t\t\tconst resolvedKeybinding = resolvedKeybindings[i];\n\t\t\t\t\tresult[resultLen++] = new ResolvedKeybindingItem(\n\t\t\t\t\t\tresolvedKeybinding,\n\t\t\t\t\t\titem.command,\n\t\t\t\t\t\titem.commandArgs,\n\t\t\t\t\t\twhen,\n\t\t\t\t\t\tisDefault,\n\t\t\t\t\t\titem.extensionId,\n\t\t\t\t\t\titem.isBuiltinExtension,\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// This might be a removal keybinding item in user settings => accept it\n\t\t\t\tresult[resultLen++] = new ResolvedKeybindingItem(\n\t\t\t\t\tundefined,\n\t\t\t\t\titem.command,\n\t\t\t\t\titem.commandArgs,\n\t\t\t\t\twhen,\n\t\t\t\t\tisDefault,\n\t\t\t\t\titem.extensionId,\n\t\t\t\t\titem.isBuiltinExtension,\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\treturn result;\n\t}\n\n\tprivate _resolveUserKeybindingItems(\n\t\titems: IUserKeybindingItem[],\n\t\tisDefault: boolean,\n\t): ResolvedKeybindingItem[] {\n\t\tconst result: ResolvedKeybindingItem[] = [];\n\t\tlet resultLen = 0;\n\t\tfor (const item of items) {\n\t\t\tconst when = item.when || undefined;\n\t\t\tif (item.keybinding) {\n\t\t\t\tconst resolvedKeybindings =\n\t\t\t\t\tthis._keyboardMapper.resolveKeybinding(item.keybinding);\n\t\t\t\tfor (const resolvedKeybinding of resolvedKeybindings) {\n\t\t\t\t\tresult[resultLen++] = new ResolvedKeybindingItem(\n\t\t\t\t\t\tresolvedKeybinding,\n\t\t\t\t\t\titem.command,\n\t\t\t\t\t\titem.commandArgs,\n\t\t\t\t\t\twhen,\n\t\t\t\t\t\tisDefault,\n\t\t\t\t\t\tnull,\n\t\t\t\t\t\tfalse,\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// This might be a removal keybinding item in user settings => accept it\n\t\t\t\tresult[resultLen++] = new ResolvedKeybindingItem(\n\t\t\t\t\tundefined,\n\t\t\t\t\titem.command,\n\t\t\t\t\titem.commandArgs,\n\t\t\t\t\twhen,\n\t\t\t\t\tisDefault,\n\t\t\t\t\tnull,\n\t\t\t\t\tfalse,\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\treturn result;\n\t}\n\n\tprivate _assertBrowserConflicts(keybinding: Keybinding): boolean {\n\t\tif (BrowserFeatures.keyboard === KeyboardSupport.Always) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (\n\t\t\tBrowserFeatures.keyboard === KeyboardSupport.FullScreen &&\n\t\t\tbrowser.isFullscreen(mainWindow)\n\t\t) {\n\t\t\treturn false;\n\t\t}\n\n\t\tfor (const chord of keybinding.chords) {\n\t\t\tif (\n\t\t\t\t!chord.metaKey &&\n\t\t\t\t!chord.altKey &&\n\t\t\t\t!chord.ctrlKey &&\n\t\t\t\t!chord.shiftKey\n\t\t\t) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tconst modifiersMask = KeyMod.CtrlCmd | KeyMod.Alt | KeyMod.Shift;\n\n\t\t\tlet partModifiersMask = 0;\n\t\t\tif (chord.metaKey) {\n\t\t\t\tpartModifiersMask |= KeyMod.CtrlCmd;\n\t\t\t}\n\n\t\t\tif (chord.shiftKey) {\n\t\t\t\tpartModifiersMask |= KeyMod.Shift;\n\t\t\t}\n\n\t\t\tif (chord.altKey) {\n\t\t\t\tpartModifiersMask |= KeyMod.Alt;\n\t\t\t}\n\n\t\t\tif (chord.ctrlKey && OS === OperatingSystem.Macintosh) {\n\t\t\t\tpartModifiersMask |= KeyMod.WinCtrl;\n\t\t\t}\n\n\t\t\tif (\n\t\t\t\t(partModifiersMask & modifiersMask) ===\n\t\t\t\t(KeyMod.CtrlCmd | KeyMod.Alt)\n\t\t\t) {\n\t\t\t\tif (\n\t\t\t\t\tchord instanceof ScanCodeChord &&\n\t\t\t\t\t(chord.scanCode === ScanCode.ArrowLeft ||\n\t\t\t\t\t\tchord.scanCode === ScanCode.ArrowRight)\n\t\t\t\t) {\n\t\t\t\t\t// console.warn('Ctrl/Cmd+Arrow keybindings should not be used by default in web. Offender: ', kb.getHashCode(), ' for ', commandId);\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t\tif (\n\t\t\t\t\tchord instanceof KeyCodeChord &&\n\t\t\t\t\t(chord.keyCode === KeyCode.LeftArrow ||\n\t\t\t\t\t\tchord.keyCode === KeyCode.RightArrow)\n\t\t\t\t) {\n\t\t\t\t\t// console.warn('Ctrl/Cmd+Arrow keybindings should not be used by default in web. Offender: ', kb.getHashCode(), ' for ', commandId);\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif ((partModifiersMask & modifiersMask) === KeyMod.CtrlCmd) {\n\t\t\t\tif (\n\t\t\t\t\tchord instanceof ScanCodeChord &&\n\t\t\t\t\tchord.scanCode >= ScanCode.Digit1 &&\n\t\t\t\t\tchord.scanCode <= ScanCode.Digit0\n\t\t\t\t) {\n\t\t\t\t\t// console.warn('Ctrl/Cmd+Num keybindings should not be used by default in web. Offender: ', kb.getHashCode(), ' for ', commandId);\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t\tif (\n\t\t\t\t\tchord instanceof KeyCodeChord &&\n\t\t\t\t\tchord.keyCode >= KeyCode.Digit0 &&\n\t\t\t\t\tchord.keyCode <= KeyCode.Digit9\n\t\t\t\t) {\n\t\t\t\t\t// console.warn('Ctrl/Cmd+Num keybindings should not be used by default in web. Offender: ', kb.getHashCode(), ' for ', commandId);\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t}\n\n\tpublic resolveKeybinding(kb: Keybinding): ResolvedKeybinding[] {\n\t\treturn this._keyboardMapper.resolveKeybinding(kb);\n\t}\n\n\tpublic resolveKeyboardEvent(\n\t\tkeyboardEvent: IKeyboardEvent,\n\t): ResolvedKeybinding {\n\t\tthis.keyboardLayoutService.validateCurrentKeyboardMapping(\n\t\t\tkeyboardEvent,\n\t\t);\n\t\treturn this._keyboardMapper.resolveKeyboardEvent(keyboardEvent);\n\t}\n\n\tpublic resolveUserBinding(userBinding: string): ResolvedKeybinding[] {\n\t\tconst keybinding = KeybindingParser.parseKeybinding(userBinding);\n\t\treturn keybinding\n\t\t\t? this._keyboardMapper.resolveKeybinding(keybinding)\n\t\t\t: [];\n\t}\n\n\tprivate _handleKeybindingsExtensionPointUser(\n\t\textensionId: ExtensionIdentifier,\n\t\tisBuiltin: boolean,\n\t\tkeybindings: ContributedKeyBinding | ContributedKeyBinding[],\n\t\tcollector: ExtensionMessageCollector,\n\t\tresult: IExtensionKeybindingRule[],\n\t): void {\n\t\tif (Array.isArray(keybindings)) {\n\t\t\tfor (let i = 0, len = keybindings.length; i < len; i++) {\n\t\t\t\tthis._handleKeybinding(\n\t\t\t\t\textensionId,\n\t\t\t\t\tisBuiltin,\n\t\t\t\t\ti + 1,\n\t\t\t\t\tkeybindings[i],\n\t\t\t\t\tcollector,\n\t\t\t\t\tresult,\n\t\t\t\t);\n\t\t\t}\n\t\t} else {\n\t\t\tthis._handleKeybinding(\n\t\t\t\textensionId,\n\t\t\t\tisBuiltin,\n\t\t\t\t1,\n\t\t\t\tkeybindings,\n\t\t\t\tcollector,\n\t\t\t\tresult,\n\t\t\t);\n\t\t}\n\t}\n\n\tprivate _handleKeybinding(\n\t\textensionId: ExtensionIdentifier,\n\t\tisBuiltin: boolean,\n\t\tidx: number,\n\t\tkeybindings: ContributedKeyBinding,\n\t\tcollector: ExtensionMessageCollector,\n\t\tresult: IExtensionKeybindingRule[],\n\t): void {\n\t\tconst rejects: string[] = [];\n\n\t\tif (isValidContributedKeyBinding(keybindings, rejects)) {\n\t\t\tconst rule = this._asCommandRule(\n\t\t\t\textensionId,\n\t\t\t\tisBuiltin,\n\t\t\t\tidx++,\n\t\t\t\tkeybindings,\n\t\t\t);\n\t\t\tif (rule) {\n\t\t\t\tresult.push(rule);\n\t\t\t}\n\t\t}\n\n\t\tif (rejects.length > 0) {\n\t\t\tcollector.error(\n\t\t\t\tnls.localize(\n\t\t\t\t\t\"invalid.keybindings\",\n\t\t\t\t\t\"Invalid `contributes.{0}`: {1}\",\n\t\t\t\t\tkeybindingsExtPoint.name,\n\t\t\t\t\trejects.join(\"\\n\"),\n\t\t\t\t),\n\t\t\t);\n\t\t}\n\t}\n\n\tprivate static bindToCurrentPlatform(\n\t\tkey: string | undefined,\n\t\tmac: string | undefined,\n\t\tlinux: string | undefined,\n\t\twin: string | undefined,\n\t): string | undefined {\n\t\tif (OS === OperatingSystem.Windows && win) {\n\t\t\tif (win) {\n\t\t\t\treturn win;\n\t\t\t}\n\t\t} else if (OS === OperatingSystem.Macintosh) {\n\t\t\tif (mac) {\n\t\t\t\treturn mac;\n\t\t\t}\n\t\t} else if (linux) {\n\t\t\treturn linux;\n\t\t}\n\t\treturn key;\n\t}\n\n\tprivate _asCommandRule(\n\t\textensionId: ExtensionIdentifier,\n\t\tisBuiltin: boolean,\n\t\tidx: number,\n\t\tbinding: ContributedKeyBinding,\n\t): IExtensionKeybindingRule | undefined {\n\t\tconst { command, args, when, key, mac, linux, win } = binding;\n\t\tconst keybinding = WorkbenchKeybindingService.bindToCurrentPlatform(\n\t\t\tkey,\n\t\t\tmac,\n\t\t\tlinux,\n\t\t\twin,\n\t\t);\n\t\tif (!keybinding) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\tlet weight: number;\n\t\tif (isBuiltin) {\n\t\t\tweight = KeybindingWeight.BuiltinExtension + idx;\n\t\t} else {\n\t\t\tweight = KeybindingWeight.ExternalExtension + idx;\n\t\t}\n\n\t\tconst commandAction = MenuRegistry.getCommand(command);\n\t\tconst precondition = commandAction && commandAction.precondition;\n\t\tlet fullWhen: ContextKeyExpression | undefined;\n\t\tif (when && precondition) {\n\t\t\tfullWhen = ContextKeyExpr.and(\n\t\t\t\tprecondition,\n\t\t\t\tContextKeyExpr.deserialize(when),\n\t\t\t);\n\t\t} else if (when) {\n\t\t\tfullWhen = ContextKeyExpr.deserialize(when);\n\t\t} else if (precondition) {\n\t\t\tfullWhen = precondition;\n\t\t}\n\n\t\tconst desc: IExtensionKeybindingRule = {\n\t\t\tid: command,\n\t\t\targs,\n\t\t\twhen: fullWhen,\n\t\t\tweight: weight,\n\t\t\tkeybinding: KeybindingParser.parseKeybinding(keybinding),\n\t\t\textensionId: extensionId.value,\n\t\t\tisBuiltinExtension: isBuiltin,\n\t\t};\n\t\treturn desc;\n\t}\n\n\tpublic override getDefaultKeybindingsContent(): string {\n\t\tconst resolver = this._getResolver();\n\t\tconst defaultKeybindings = resolver.getDefaultKeybindings();\n\t\tconst boundCommands = resolver.getDefaultBoundCommands();\n\t\treturn (\n\t\t\tWorkbenchKeybindingService._getDefaultKeybindings(\n\t\t\t\tdefaultKeybindings,\n\t\t\t) +\n\t\t\t\"\\n\\n\" +\n\t\t\tWorkbenchKeybindingService._getAllCommandsAsComment(boundCommands)\n\t\t);\n\t}\n\n\tprivate static _getDefaultKeybindings(\n\t\tdefaultKeybindings: readonly ResolvedKeybindingItem[],\n\t): string {\n\t\tconst out = new OutputBuilder();\n\t\tout.writeLine(\"[\");\n\n\t\tconst lastIndex = defaultKeybindings.length - 1;\n\t\tdefaultKeybindings.forEach((k, index) => {\n\t\t\tKeybindingIO.writeKeybindingItem(out, k);\n\t\t\tif (index !== lastIndex) {\n\t\t\t\tout.writeLine(\",\");\n\t\t\t} else {\n\t\t\t\tout.writeLine();\n\t\t\t}\n\t\t});\n\t\tout.writeLine(\"]\");\n\t\treturn out.toString();\n\t}\n\n\tprivate static _getAllCommandsAsComment(\n\t\tboundCommands: Map<string, boolean>,\n\t): string {\n\t\tconst unboundCommands = getAllUnboundCommands(boundCommands);\n\t\tconst pretty = unboundCommands.sort().join(\"\\n// - \");\n\t\treturn (\n\t\t\t\"// \" +\n\t\t\tnls.localize(\n\t\t\t\t\"unboundCommands\",\n\t\t\t\t\"Here are other available commands: \",\n\t\t\t) +\n\t\t\t\"\\n// - \" +\n\t\t\tpretty\n\t\t);\n\t}\n\n\toverride mightProducePrintableCharacter(event: IKeyboardEvent): boolean {\n\t\tif (event.ctrlKey || event.metaKey || event.altKey) {\n\t\t\t// ignore ctrl/cmd/alt-combination but not shift-combinatios\n\t\t\treturn false;\n\t\t}\n\t\tconst code = ScanCodeUtils.toEnum(event.code);\n\n\t\tif (NUMPAD_PRINTABLE_SCANCODES.indexOf(code) !== -1) {\n\t\t\t// This is a numpad key that might produce a printable character based on NumLock.\n\t\t\t// Let's check if NumLock is on or off based on the event's keyCode.\n\t\t\t// e.g.\n\t\t\t// - when NumLock is off, ScanCode.Numpad4 produces KeyCode.LeftArrow\n\t\t\t// - when NumLock is on, ScanCode.Numpad4 produces KeyCode.NUMPAD_4\n\t\t\t// However, ScanCode.NumpadAdd always produces KeyCode.NUMPAD_ADD\n\t\t\tif (event.keyCode === IMMUTABLE_CODE_TO_KEY_CODE[code]) {\n\t\t\t\t// NumLock is on or this is /, *, -, + on the numpad\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\tif (\n\t\t\t\tisMacintosh &&\n\t\t\t\tevent.keyCode === otherMacNumpadMapping.get(code)\n\t\t\t) {\n\t\t\t\t// on macOS, the numpad keys can also map to keys 1 - 0.\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\treturn false;\n\t\t}\n\n\t\tconst keycode = IMMUTABLE_CODE_TO_KEY_CODE[code];\n\t\tif (keycode !== -1) {\n\t\t\t// https://github.com/microsoft/vscode/issues/74934\n\t\t\treturn false;\n\t\t}\n\t\t// consult the KeyboardMapperFactory to check the given event for\n\t\t// a printable value.\n\t\tconst mapping = this.keyboardLayoutService.getRawKeyboardMapping();\n\t\tif (!mapping) {\n\t\t\treturn false;\n\t\t}\n\t\tconst keyInfo = mapping[event.code];\n\t\tif (!keyInfo) {\n\t\t\treturn false;\n\t\t}\n\t\tif (!keyInfo.value || /\\s/.test(keyInfo.value)) {\n\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t}\n}\n\nclass UserKeybindings extends Disposable {\n\tprivate _rawKeybindings: Object[] = [];\n\tprivate _keybindings: IUserKeybindingItem[] = [];\n\tget keybindings(): IUserKeybindingItem[] {\n\t\treturn this._keybindings;\n\t}\n\n\tprivate readonly reloadConfigurationScheduler: RunOnceScheduler;\n\n\tprivate readonly watchDisposables = this._register(new DisposableStore());\n\n\tprivate readonly _onDidChange: Emitter<void> = this._register(\n\t\tnew Emitter<void>(),\n\t);\n\treadonly onDidChange: Event<void> = this._onDidChange.event;\n\n\tconstructor(\n\t\tprivate readonly userDataProfileService: IUserDataProfileService,\n\t\tprivate readonly uriIdentityService: IUriIdentityService,\n\t\tprivate readonly fileService: IFileService,\n\t\tlogService: ILogService,\n\t) {\n\t\tsuper();\n\n\t\tthis.watch();\n\n\t\tthis.reloadConfigurationScheduler = this._register(\n\t\t\tnew RunOnceScheduler(\n\t\t\t\t() =>\n\t\t\t\t\tthis.reload().then((changed) => {\n\t\t\t\t\t\tif (changed) {\n\t\t\t\t\t\t\tthis._onDidChange.fire();\n\t\t\t\t\t\t}\n\t\t\t\t\t}),\n\t\t\t\t50,\n\t\t\t),\n\t\t);\n\n\t\tthis._register(\n\t\t\tEvent.filter(this.fileService.onDidFilesChange, (e) =>\n\t\t\t\te.contains(\n\t\t\t\t\tthis.userDataProfileService.currentProfile\n\t\t\t\t\t\t.keybindingsResource,\n\t\t\t\t),\n\t\t\t)(() => {\n\t\t\t\tlogService.debug(\"Keybindings file changed\");\n\t\t\t\tthis.reloadConfigurationScheduler.schedule();\n\t\t\t}),\n\t\t);\n\n\t\tthis._register(\n\t\t\tthis.fileService.onDidRunOperation((e) => {\n\t\t\t\tif (\n\t\t\t\t\te.operation === FileOperation.WRITE &&\n\t\t\t\t\te.resource.toString() ===\n\t\t\t\t\t\tthis.userDataProfileService.currentProfile.keybindingsResource.toString()\n\t\t\t\t) {\n\t\t\t\t\tlogService.debug(\"Keybindings file written\");\n\t\t\t\t\tthis.reloadConfigurationScheduler.schedule();\n\t\t\t\t}\n\t\t\t}),\n\t\t);\n\n\t\tthis._register(\n\t\t\tuserDataProfileService.onDidChangeCurrentProfile((e) => {\n\t\t\t\tif (\n\t\t\t\t\t!this.uriIdentityService.extUri.isEqual(\n\t\t\t\t\t\te.previous.keybindingsResource,\n\t\t\t\t\t\te.profile.keybindingsResource,\n\t\t\t\t\t)\n\t\t\t\t) {\n\t\t\t\t\te.join(this.whenCurrentProfileChanged());\n\t\t\t\t}\n\t\t\t}),\n\t\t);\n\t}\n\n\tprivate async whenCurrentProfileChanged(): Promise<void> {\n\t\tthis.watch();\n\t\tthis.reloadConfigurationScheduler.schedule();\n\t}\n\n\tprivate watch(): void {\n\t\tthis.watchDisposables.clear();\n\t\tthis.watchDisposables.add(\n\t\t\tthis.fileService.watch(\n\t\t\t\tdirname(\n\t\t\t\t\tthis.userDataProfileService.currentProfile\n\t\t\t\t\t\t.keybindingsResource,\n\t\t\t\t),\n\t\t\t),\n\t\t);\n\t\t// Also listen to the resource incase the resource is a symlink - https://github.com/microsoft/vscode/issues/118134\n\t\tthis.watchDisposables.add(\n\t\t\tthis.fileService.watch(\n\t\t\t\tthis.userDataProfileService.currentProfile.keybindingsResource,\n\t\t\t),\n\t\t);\n\t}\n\n\tasync initialize(): Promise<void> {\n\t\tawait this.reload();\n\t}\n\n\tprivate async reload(): Promise<boolean> {\n\t\tconst newKeybindings = await this.readUserKeybindings();\n\t\tif (objects.equals(this._rawKeybindings, newKeybindings)) {\n\t\t\t// no change\n\t\t\treturn false;\n\t\t}\n\n\t\tthis._rawKeybindings = newKeybindings;\n\t\tthis._keybindings = this._rawKeybindings.map((k) =>\n\t\t\tKeybindingIO.readUserKeybindingItem(k),\n\t\t);\n\t\treturn true;\n\t}\n\n\tprivate async readUserKeybindings(): Promise<Object[]> {\n\t\ttry {\n\t\t\tconst content = await this.fileService.readFile(\n\t\t\t\tthis.userDataProfileService.currentProfile.keybindingsResource,\n\t\t\t);\n\t\t\tconst value = parse(content.value.toString());\n\t\t\treturn Array.isArray(value)\n\t\t\t\t? value.filter(\n\t\t\t\t\t\t(v) =>\n\t\t\t\t\t\t\tv &&\n\t\t\t\t\t\t\ttypeof v ===\n\t\t\t\t\t\t\t\t\"object\" /* just typeof === object doesn't catch `null` */,\n\t\t\t\t\t)\n\t\t\t\t: [];\n\t\t} catch (e) {\n\t\t\treturn [];\n\t\t}\n\t}\n}\n\n/**\n * Registers the `keybindings.json`'s schema with the JSON schema registry. Allows updating the schema, e.g., when new commands are registered (e.g., by extensions).\n *\n * Lifecycle owned by `WorkbenchKeybindingService`. Must be instantiated only once.\n */\nclass KeybindingsJsonSchema {\n\tprivate static readonly schemaId = \"vscode://schemas/keybindings\";\n\n\tprivate readonly commandsSchemas: IJSONSchema[] = [];\n\tprivate readonly commandsEnum: string[] = [];\n\tprivate readonly removalCommandsEnum: string[] = [];\n\tprivate readonly commandsEnumDescriptions: (string | undefined)[] = [];\n\tprivate readonly schema: IJSONSchema = {\n\t\tid: KeybindingsJsonSchema.schemaId,\n\t\ttype: \"array\",\n\t\ttitle: nls.localize(\n\t\t\t\"keybindings.json.title\",\n\t\t\t\"Keybindings configuration\",\n\t\t),\n\t\tallowTrailingCommas: true,\n\t\tallowComments: true,\n\t\tdefinitions: {\n\t\t\teditorGroupsSchema: {\n\t\t\t\ttype: \"array\",\n\t\t\t\titems: {\n\t\t\t\t\ttype: \"object\",\n\t\t\t\t\tproperties: {\n\t\t\t\t\t\tgroups: {\n\t\t\t\t\t\t\t$ref: \"#/definitions/editorGroupsSchema\",\n\t\t\t\t\t\t\tdefault: [{}, {}],\n\t\t\t\t\t\t},\n\t\t\t\t\t\tsize: {\n\t\t\t\t\t\t\ttype: \"number\",\n\t\t\t\t\t\t\tdefault: 0.5,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\tcommandNames: {\n\t\t\t\ttype: \"string\",\n\t\t\t\tenum: this.commandsEnum,\n\t\t\t\tenumDescriptions: <any>this.commandsEnumDescriptions,\n\t\t\t\tdescription: nls.localize(\n\t\t\t\t\t\"keybindings.json.command\",\n\t\t\t\t\t\"Name of the command to execute\",\n\t\t\t\t),\n\t\t\t},\n\t\t\tcommandType: {\n\t\t\t\tanyOf: [\n\t\t\t\t\t// repetition of this clause here and below is intentional: one is for nice diagnostics & one is for code completion\n\t\t\t\t\t{\n\t\t\t\t\t\t$ref: \"#/definitions/commandNames\",\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\ttype: \"string\",\n\t\t\t\t\t\tenum: this.removalCommandsEnum,\n\t\t\t\t\t\tenumDescriptions: <any>this.commandsEnumDescriptions,\n\t\t\t\t\t\tdescription: nls.localize(\n\t\t\t\t\t\t\t\"keybindings.json.removalCommand\",\n\t\t\t\t\t\t\t\"Name of the command to remove keyboard shortcut for\",\n\t\t\t\t\t\t),\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\ttype: \"string\",\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t},\n\t\t\tcommandsSchemas: {\n\t\t\t\tallOf: this.commandsSchemas,\n\t\t\t},\n\t\t},\n\t\titems: {\n\t\t\trequired: [\"key\"],\n\t\t\ttype: \"object\",\n\t\t\tdefaultSnippets: [\n\t\t\t\t{ body: { key: \"$1\", command: \"$2\", when: \"$3\" } },\n\t\t\t],\n\t\t\tproperties: {\n\t\t\t\tkey: {\n\t\t\t\t\ttype: \"string\",\n\t\t\t\t\tdescription: nls.localize(\n\t\t\t\t\t\t\"keybindings.json.key\",\n\t\t\t\t\t\t\"Key or key sequence (separated by space)\",\n\t\t\t\t\t),\n\t\t\t\t},\n\t\t\t\tcommand: {\n\t\t\t\t\tanyOf: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif: {\n\t\t\t\t\t\t\t\ttype: \"array\",\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tthen: {\n\t\t\t\t\t\t\t\tnot: {\n\t\t\t\t\t\t\t\t\ttype: \"array\",\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\terrorMessage: nls.localize(\n\t\t\t\t\t\t\t\t\t\"keybindings.commandsIsArray\",\n\t\t\t\t\t\t\t\t\t\"Incorrect type. Expected \\\"{0}\\\". The field 'command' does not support running multiple commands. Use command 'runCommands' to pass it multiple commands to run.\",\n\t\t\t\t\t\t\t\t\t\"string\",\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\telse: {\n\t\t\t\t\t\t\t\t$ref: \"#/definitions/commandType\",\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$ref: \"#/definitions/commandType\",\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t\twhen: {\n\t\t\t\t\ttype: \"string\",\n\t\t\t\t\tdescription: nls.localize(\n\t\t\t\t\t\t\"keybindings.json.when\",\n\t\t\t\t\t\t\"Condition when the key is active.\",\n\t\t\t\t\t),\n\t\t\t\t},\n\t\t\t\targs: {\n\t\t\t\t\tdescription: nls.localize(\n\t\t\t\t\t\t\"keybindings.json.args\",\n\t\t\t\t\t\t\"Arguments to pass to the command to execute.\",\n\t\t\t\t\t),\n\t\t\t\t},\n\t\t\t},\n\t\t\t$ref: \"#/definitions/commandsSchemas\",\n\t\t},\n\t};\n\n\tprivate readonly schemaRegistry = Registry.as<IJSONContributionRegistry>(\n\t\tExtensions.JSONContribution,\n\t);\n\n\tconstructor() {\n\t\tthis.schemaRegistry.registerSchema(\n\t\t\tKeybindingsJsonSchema.schemaId,\n\t\t\tthis.schema,\n\t\t);\n\t}\n\n\t// TODO@ulugbekna: can updates happen incrementally rather than rebuilding; concerns:\n\t// - is just appending additional schemas enough for the registry to pick them up?\n\t// - can `CommandsRegistry.getCommands` and `MenuRegistry.getCommands` return different values at different times? ie would just pushing new schemas from `additionalContributions` not be enough?\n\tupdateSchema(additionalContributions: readonly IJSONSchema[]) {\n\t\tthis.commandsSchemas.length = 0;\n\t\tthis.commandsEnum.length = 0;\n\t\tthis.removalCommandsEnum.length = 0;\n\t\tthis.commandsEnumDescriptions.length = 0;\n\n\t\tconst knownCommands = new Set<string>();\n\t\tconst addKnownCommand = (\n\t\t\tcommandId: string,\n\t\t\tdescription?: string | ILocalizedString | undefined,\n\t\t) => {\n\t\t\tif (!/^_/.test(commandId)) {\n\t\t\t\tif (!knownCommands.has(commandId)) {\n\t\t\t\t\tknownCommands.add(commandId);\n\n\t\t\t\t\tthis.commandsEnum.push(commandId);\n\t\t\t\t\tthis.commandsEnumDescriptions.push(\n\t\t\t\t\t\tisLocalizedString(description)\n\t\t\t\t\t\t\t? description.value\n\t\t\t\t\t\t\t: description,\n\t\t\t\t\t);\n\n\t\t\t\t\t// Also add the negative form for keybinding removal\n\t\t\t\t\tthis.removalCommandsEnum.push(`-${commandId}`);\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tconst allCommands = CommandsRegistry.getCommands();\n\t\tfor (const [commandId, command] of allCommands) {\n\t\t\tconst commandMetadata = command.metadata;\n\n\t\t\taddKnownCommand(commandId, commandMetadata?.description);\n\n\t\t\tif (\n\t\t\t\t!commandMetadata ||\n\t\t\t\t!commandMetadata.args ||\n\t\t\t\tcommandMetadata.args.length !== 1 ||\n\t\t\t\t!commandMetadata.args[0].schema\n\t\t\t) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tconst argsSchema = commandMetadata.args[0].schema;\n\t\t\tconst argsRequired =\n\t\t\t\ttypeof commandMetadata.args[0].isOptional !== \"undefined\"\n\t\t\t\t\t? !commandMetadata.args[0].isOptional\n\t\t\t\t\t: Array.isArray(argsSchema.required) &&\n\t\t\t\t\t\targsSchema.required.length > 0;\n\t\t\tconst addition = {\n\t\t\t\tif: {\n\t\t\t\t\trequired: [\"command\"],\n\t\t\t\t\tproperties: {\n\t\t\t\t\t\tcommand: { const: commandId },\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tthen: {\n\t\t\t\t\trequired: (<string[]>[]).concat(\n\t\t\t\t\t\targsRequired ? [\"args\"] : [],\n\t\t\t\t\t),\n\t\t\t\t\tproperties: {\n\t\t\t\t\t\targs: argsSchema,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t};\n\n\t\t\tthis.commandsSchemas.push(addition);\n\t\t}\n\n\t\tconst menuCommands = MenuRegistry.getCommands();\n\t\tfor (const commandId of menuCommands.keys()) {\n\t\t\taddKnownCommand(commandId);\n\t\t}\n\n\t\tthis.commandsSchemas.push(...additionalContributions);\n\t\tthis.schemaRegistry.notifySchemaChanged(KeybindingsJsonSchema.schemaId);\n\t}\n}\n\nregisterSingleton(\n\tIKeybindingService,\n\tWorkbenchKeybindingService,\n\tInstantiationType.Eager,\n);\n"],
  "mappings": "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",
  "names": []
}
