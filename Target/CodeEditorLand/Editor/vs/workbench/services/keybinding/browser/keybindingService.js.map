{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/keybinding/browser/keybindingService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as nls from '../../../../nls.js';\n\n// base\nimport * as browser from '../../../../base/browser/browser.js';\nimport { BrowserFeatures, KeyboardSupport } from '../../../../base/browser/canIUse.js';\nimport * as dom from '../../../../base/browser/dom.js';\nimport { printKeyboardEvent, printStandardKeyboardEvent, StandardKeyboardEvent } from '../../../../base/browser/keyboardEvent.js';\nimport { DeferredPromise, RunOnceScheduler } from '../../../../base/common/async.js';\nimport { Emitter, Event } from '../../../../base/common/event.js';\nimport { parse } from '../../../../base/common/json.js';\nimport { IJSONSchema } from '../../../../base/common/jsonSchema.js';\nimport { UserSettingsLabelProvider } from '../../../../base/common/keybindingLabels.js';\nimport { KeybindingParser } from '../../../../base/common/keybindingParser.js';\nimport { Keybinding, KeyCodeChord, ResolvedKeybinding, ScanCodeChord } from '../../../../base/common/keybindings.js';\nimport { IMMUTABLE_CODE_TO_KEY_CODE, KeyCode, KeyCodeUtils, KeyMod, ScanCode, ScanCodeUtils } from '../../../../base/common/keyCodes.js';\nimport { Disposable, DisposableStore, IDisposable } from '../../../../base/common/lifecycle.js';\nimport * as objects from '../../../../base/common/objects.js';\nimport { isMacintosh, OperatingSystem, OS } from '../../../../base/common/platform.js';\nimport { dirname } from '../../../../base/common/resources.js';\nimport { mainWindow } from '../../../../base/browser/window.js';\n\n// platform\nimport { MenuRegistry } from '../../../../platform/actions/common/actions.js';\nimport { CommandsRegistry, ICommandService } from '../../../../platform/commands/common/commands.js';\nimport { ContextKeyExpr, ContextKeyExpression, IContextKey, IContextKeyService } from '../../../../platform/contextkey/common/contextkey.js';\nimport { ExtensionIdentifier } from '../../../../platform/extensions/common/extensions.js';\nimport { FileOperation, IFileService } from '../../../../platform/files/common/files.js';\nimport { InstantiationType, registerSingleton } from '../../../../platform/instantiation/common/extensions.js';\nimport { Extensions, IJSONContributionRegistry } from '../../../../platform/jsonschemas/common/jsonContributionRegistry.js';\nimport { AbstractKeybindingService } from '../../../../platform/keybinding/common/abstractKeybindingService.js';\nimport { IKeybindingService, IKeyboardEvent, KeybindingsSchemaContribution } from '../../../../platform/keybinding/common/keybinding.js';\nimport { KeybindingResolver } from '../../../../platform/keybinding/common/keybindingResolver.js';\nimport { IExtensionKeybindingRule, IKeybindingItem, KeybindingsRegistry, KeybindingWeight } from '../../../../platform/keybinding/common/keybindingsRegistry.js';\nimport { ResolvedKeybindingItem } from '../../../../platform/keybinding/common/resolvedKeybindingItem.js';\nimport { IKeyboardLayoutService } from '../../../../platform/keyboardLayout/common/keyboardLayout.js';\nimport { IKeyboardMapper } from '../../../../platform/keyboardLayout/common/keyboardMapper.js';\nimport { ILogService } from '../../../../platform/log/common/log.js';\nimport { INotificationService } from '../../../../platform/notification/common/notification.js';\nimport { Registry } from '../../../../platform/registry/common/platform.js';\nimport { ITelemetryService } from '../../../../platform/telemetry/common/telemetry.js';\nimport { IUriIdentityService } from '../../../../platform/uriIdentity/common/uriIdentity.js';\nimport { ILocalizedString, isLocalizedString } from '../../../../platform/action/common/action.js';\n\n// workbench\nimport { commandsExtensionPoint } from '../../actions/common/menusExtensionPoint.js';\nimport { IExtensionService } from '../../extensions/common/extensions.js';\nimport { ExtensionMessageCollector, ExtensionsRegistry } from '../../extensions/common/extensionsRegistry.js';\nimport { IHostService } from '../../host/browser/host.js';\nimport { IKeyboard, INavigatorWithKeyboard } from './navigatorKeyboard.js';\nimport { getAllUnboundCommands } from './unboundCommands.js';\nimport { IUserKeybindingItem, KeybindingIO, OutputBuilder } from '../common/keybindingIO.js';\nimport { IUserDataProfileService } from '../../userDataProfile/common/userDataProfile.js';\n\ninterface ContributedKeyBinding {\n\tcommand: string;\n\targs?: any;\n\tkey: string;\n\twhen?: string;\n\tmac?: string;\n\tlinux?: string;\n\twin?: string;\n}\n\nfunction isValidContributedKeyBinding(keyBinding: ContributedKeyBinding, rejects: string[]): boolean {\n\tif (!keyBinding) {\n\t\trejects.push(nls.localize('nonempty', \"expected non-empty value.\"));\n\t\treturn false;\n\t}\n\tif (typeof keyBinding.command !== 'string') {\n\t\trejects.push(nls.localize('requirestring', \"property `{0}` is mandatory and must be of type `string`\", 'command'));\n\t\treturn false;\n\t}\n\tif (keyBinding.key && typeof keyBinding.key !== 'string') {\n\t\trejects.push(nls.localize('optstring', \"property `{0}` can be omitted or must be of type `string`\", 'key'));\n\t\treturn false;\n\t}\n\tif (keyBinding.when && typeof keyBinding.when !== 'string') {\n\t\trejects.push(nls.localize('optstring', \"property `{0}` can be omitted or must be of type `string`\", 'when'));\n\t\treturn false;\n\t}\n\tif (keyBinding.mac && typeof keyBinding.mac !== 'string') {\n\t\trejects.push(nls.localize('optstring', \"property `{0}` can be omitted or must be of type `string`\", 'mac'));\n\t\treturn false;\n\t}\n\tif (keyBinding.linux && typeof keyBinding.linux !== 'string') {\n\t\trejects.push(nls.localize('optstring', \"property `{0}` can be omitted or must be of type `string`\", 'linux'));\n\t\treturn false;\n\t}\n\tif (keyBinding.win && typeof keyBinding.win !== 'string') {\n\t\trejects.push(nls.localize('optstring', \"property `{0}` can be omitted or must be of type `string`\", 'win'));\n\t\treturn false;\n\t}\n\treturn true;\n}\n\nconst keybindingType: IJSONSchema = {\n\ttype: 'object',\n\tdefault: { command: '', key: '' },\n\tproperties: {\n\t\tcommand: {\n\t\t\tdescription: nls.localize('vscode.extension.contributes.keybindings.command', 'Identifier of the command to run when keybinding is triggered.'),\n\t\t\ttype: 'string'\n\t\t},\n\t\targs: {\n\t\t\tdescription: nls.localize('vscode.extension.contributes.keybindings.args', \"Arguments to pass to the command to execute.\")\n\t\t},\n\t\tkey: {\n\t\t\tdescription: nls.localize('vscode.extension.contributes.keybindings.key', 'Key or key sequence (separate keys with plus-sign and sequences with space, e.g. Ctrl+O and Ctrl+L L for a chord).'),\n\t\t\ttype: 'string'\n\t\t},\n\t\tmac: {\n\t\t\tdescription: nls.localize('vscode.extension.contributes.keybindings.mac', 'Mac specific key or key sequence.'),\n\t\t\ttype: 'string'\n\t\t},\n\t\tlinux: {\n\t\t\tdescription: nls.localize('vscode.extension.contributes.keybindings.linux', 'Linux specific key or key sequence.'),\n\t\t\ttype: 'string'\n\t\t},\n\t\twin: {\n\t\t\tdescription: nls.localize('vscode.extension.contributes.keybindings.win', 'Windows specific key or key sequence.'),\n\t\t\ttype: 'string'\n\t\t},\n\t\twhen: {\n\t\t\tdescription: nls.localize('vscode.extension.contributes.keybindings.when', 'Condition when the key is active.'),\n\t\t\ttype: 'string'\n\t\t},\n\t}\n};\n\nconst keybindingsExtPoint = ExtensionsRegistry.registerExtensionPoint<ContributedKeyBinding | ContributedKeyBinding[]>({\n\textensionPoint: 'keybindings',\n\tdeps: [commandsExtensionPoint],\n\tjsonSchema: {\n\t\tdescription: nls.localize('vscode.extension.contributes.keybindings', \"Contributes keybindings.\"),\n\t\toneOf: [\n\t\t\tkeybindingType,\n\t\t\t{\n\t\t\t\ttype: 'array',\n\t\t\t\titems: keybindingType\n\t\t\t}\n\t\t]\n\t}\n});\n\nconst NUMPAD_PRINTABLE_SCANCODES = [\n\tScanCode.NumpadDivide,\n\tScanCode.NumpadMultiply,\n\tScanCode.NumpadSubtract,\n\tScanCode.NumpadAdd,\n\tScanCode.Numpad1,\n\tScanCode.Numpad2,\n\tScanCode.Numpad3,\n\tScanCode.Numpad4,\n\tScanCode.Numpad5,\n\tScanCode.Numpad6,\n\tScanCode.Numpad7,\n\tScanCode.Numpad8,\n\tScanCode.Numpad9,\n\tScanCode.Numpad0,\n\tScanCode.NumpadDecimal\n];\n\nconst otherMacNumpadMapping = new Map<ScanCode, KeyCode>();\notherMacNumpadMapping.set(ScanCode.Numpad1, KeyCode.Digit1);\notherMacNumpadMapping.set(ScanCode.Numpad2, KeyCode.Digit2);\notherMacNumpadMapping.set(ScanCode.Numpad3, KeyCode.Digit3);\notherMacNumpadMapping.set(ScanCode.Numpad4, KeyCode.Digit4);\notherMacNumpadMapping.set(ScanCode.Numpad5, KeyCode.Digit5);\notherMacNumpadMapping.set(ScanCode.Numpad6, KeyCode.Digit6);\notherMacNumpadMapping.set(ScanCode.Numpad7, KeyCode.Digit7);\notherMacNumpadMapping.set(ScanCode.Numpad8, KeyCode.Digit8);\notherMacNumpadMapping.set(ScanCode.Numpad9, KeyCode.Digit9);\notherMacNumpadMapping.set(ScanCode.Numpad0, KeyCode.Digit0);\n\nexport class WorkbenchKeybindingService extends AbstractKeybindingService {\n\n\tprivate _keyboardMapper: IKeyboardMapper;\n\tprivate _cachedResolver: KeybindingResolver | null;\n\tprivate userKeybindings: UserKeybindings;\n\tprivate isComposingGlobalContextKey: IContextKey<boolean>;\n\tprivate _keybindingHoldMode: DeferredPromise<void> | null;\n\tprivate readonly _contributions: KeybindingsSchemaContribution[] = [];\n\tprivate readonly kbsJsonSchema: KeybindingsJsonSchema;\n\n\tconstructor(\n\t\t@IContextKeyService contextKeyService: IContextKeyService,\n\t\t@ICommandService commandService: ICommandService,\n\t\t@ITelemetryService telemetryService: ITelemetryService,\n\t\t@INotificationService notificationService: INotificationService,\n\t\t@IUserDataProfileService userDataProfileService: IUserDataProfileService,\n\t\t@IHostService private readonly hostService: IHostService,\n\t\t@IExtensionService extensionService: IExtensionService,\n\t\t@IFileService fileService: IFileService,\n\t\t@IUriIdentityService uriIdentityService: IUriIdentityService,\n\t\t@ILogService logService: ILogService,\n\t\t@IKeyboardLayoutService private readonly keyboardLayoutService: IKeyboardLayoutService\n\t) {\n\t\tsuper(contextKeyService, commandService, telemetryService, notificationService, logService);\n\n\t\tthis.isComposingGlobalContextKey = contextKeyService.createKey('isComposing', false);\n\n\t\tthis.kbsJsonSchema = new KeybindingsJsonSchema();\n\t\tthis.updateKeybindingsJsonSchema();\n\n\t\tthis._keyboardMapper = this.keyboardLayoutService.getKeyboardMapper();\n\t\tthis._register(this.keyboardLayoutService.onDidChangeKeyboardLayout(() => {\n\t\t\tthis._keyboardMapper = this.keyboardLayoutService.getKeyboardMapper();\n\t\t\tthis.updateResolver();\n\t\t}));\n\n\t\tthis._keybindingHoldMode = null;\n\t\tthis._cachedResolver = null;\n\n\t\tthis.userKeybindings = this._register(new UserKeybindings(userDataProfileService, uriIdentityService, fileService, logService));\n\t\tthis.userKeybindings.initialize().then(() => {\n\t\t\tif (this.userKeybindings.keybindings.length) {\n\t\t\t\tthis.updateResolver();\n\t\t\t}\n\t\t});\n\t\tthis._register(this.userKeybindings.onDidChange(() => {\n\t\t\tlogService.debug('User keybindings changed');\n\t\t\tthis.updateResolver();\n\t\t}));\n\n\t\tkeybindingsExtPoint.setHandler((extensions) => {\n\n\t\t\tconst keybindings: IExtensionKeybindingRule[] = [];\n\t\t\tfor (const extension of extensions) {\n\t\t\t\tthis._handleKeybindingsExtensionPointUser(extension.description.identifier, extension.description.isBuiltin, extension.value, extension.collector, keybindings);\n\t\t\t}\n\n\t\t\tKeybindingsRegistry.setExtensionKeybindings(keybindings);\n\t\t\tthis.updateResolver();\n\t\t});\n\n\t\tthis.updateKeybindingsJsonSchema();\n\t\tthis._register(extensionService.onDidRegisterExtensions(() => this.updateKeybindingsJsonSchema()));\n\n\t\tthis._register(Event.runAndSubscribe(dom.onDidRegisterWindow, ({ window, disposables }) => disposables.add(this._registerKeyListeners(window)), { window: mainWindow, disposables: this._store }));\n\n\t\tthis._register(browser.onDidChangeFullscreen(windowId => {\n\t\t\tif (windowId !== mainWindow.vscodeWindowId) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst keyboard: IKeyboard | null = (<INavigatorWithKeyboard>navigator).keyboard;\n\n\t\t\tif (BrowserFeatures.keyboard === KeyboardSupport.None) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (browser.isFullscreen(mainWindow)) {\n\t\t\t\tkeyboard?.lock(['Escape']);\n\t\t\t} else {\n\t\t\t\tkeyboard?.unlock();\n\t\t\t}\n\n\t\t\t// update resolver which will bring back all unbound keyboard shortcuts\n\t\t\tthis._cachedResolver = null;\n\t\t\tthis._onDidUpdateKeybindings.fire();\n\t\t}));\n\t}\n\n\tprivate _registerKeyListeners(window: Window): IDisposable {\n\t\tconst disposables = new DisposableStore();\n\n\t\t// for standard keybindings\n\t\tdisposables.add(dom.addDisposableListener(window, dom.EventType.KEY_DOWN, (e: KeyboardEvent) => {\n\t\t\tif (this._keybindingHoldMode) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tthis.isComposingGlobalContextKey.set(e.isComposing);\n\t\t\tconst keyEvent = new StandardKeyboardEvent(e);\n\t\t\tthis._log(`/ Received  keydown event - ${printKeyboardEvent(e)}`);\n\t\t\tthis._log(`| Converted keydown event - ${printStandardKeyboardEvent(keyEvent)}`);\n\t\t\tconst shouldPreventDefault = this._dispatch(keyEvent, keyEvent.target);\n\t\t\tif (shouldPreventDefault) {\n\t\t\t\tkeyEvent.preventDefault();\n\t\t\t}\n\t\t\tthis.isComposingGlobalContextKey.set(false);\n\t\t}));\n\n\t\t// for single modifier chord keybindings (e.g. shift shift)\n\t\tdisposables.add(dom.addDisposableListener(window, dom.EventType.KEY_UP, (e: KeyboardEvent) => {\n\t\t\tthis._resetKeybindingHoldMode();\n\t\t\tthis.isComposingGlobalContextKey.set(e.isComposing);\n\t\t\tconst keyEvent = new StandardKeyboardEvent(e);\n\t\t\tconst shouldPreventDefault = this._singleModifierDispatch(keyEvent, keyEvent.target);\n\t\t\tif (shouldPreventDefault) {\n\t\t\t\tkeyEvent.preventDefault();\n\t\t\t}\n\t\t\tthis.isComposingGlobalContextKey.set(false);\n\t\t}));\n\n\t\treturn disposables;\n\t}\n\n\tpublic registerSchemaContribution(contribution: KeybindingsSchemaContribution): void {\n\t\tthis._contributions.push(contribution);\n\t\tif (contribution.onDidChange) {\n\t\t\tthis._register(contribution.onDidChange(() => this.updateKeybindingsJsonSchema()));\n\t\t}\n\t\tthis.updateKeybindingsJsonSchema();\n\t}\n\n\tprivate updateKeybindingsJsonSchema() {\n\t\tthis.kbsJsonSchema.updateSchema(this._contributions.flatMap(x => x.getSchemaAdditions()));\n\t}\n\n\tprivate _printKeybinding(keybinding: Keybinding): string {\n\t\treturn UserSettingsLabelProvider.toLabel(OS, keybinding.chords, (chord) => {\n\t\t\tif (chord instanceof KeyCodeChord) {\n\t\t\t\treturn KeyCodeUtils.toString(chord.keyCode);\n\t\t\t}\n\t\t\treturn ScanCodeUtils.toString(chord.scanCode);\n\t\t}) || '[null]';\n\t}\n\n\tprivate _printResolvedKeybinding(resolvedKeybinding: ResolvedKeybinding): string {\n\t\treturn resolvedKeybinding.getDispatchChords().map(x => x || '[null]').join(' ');\n\t}\n\n\tprivate _printResolvedKeybindings(output: string[], input: string, resolvedKeybindings: ResolvedKeybinding[]): void {\n\t\tconst padLength = 35;\n\t\tconst firstRow = `${input.padStart(padLength, ' ')} => `;\n\t\tif (resolvedKeybindings.length === 0) {\n\t\t\t// no binding found\n\t\t\toutput.push(`${firstRow}${'[NO BINDING]'.padStart(padLength, ' ')}`);\n\t\t\treturn;\n\t\t}\n\n\t\tconst firstRowIndentation = firstRow.length;\n\t\tconst isFirst = true;\n\t\tfor (const resolvedKeybinding of resolvedKeybindings) {\n\t\t\tif (isFirst) {\n\t\t\t\toutput.push(`${firstRow}${this._printResolvedKeybinding(resolvedKeybinding).padStart(padLength, ' ')}`);\n\t\t\t} else {\n\t\t\t\toutput.push(`${' '.repeat(firstRowIndentation)}${this._printResolvedKeybinding(resolvedKeybinding).padStart(padLength, ' ')}`);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate _dumpResolveKeybindingDebugInfo(): string {\n\n\t\tconst seenBindings = new Set<string>();\n\t\tconst result: string[] = [];\n\n\t\tresult.push(`Default Resolved Keybindings (unique only):`);\n\t\tfor (const item of KeybindingsRegistry.getDefaultKeybindings()) {\n\t\t\tif (!item.keybinding) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tconst input = this._printKeybinding(item.keybinding);\n\t\t\tif (seenBindings.has(input)) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tseenBindings.add(input);\n\t\t\tconst resolvedKeybindings = this._keyboardMapper.resolveKeybinding(item.keybinding);\n\t\t\tthis._printResolvedKeybindings(result, input, resolvedKeybindings);\n\t\t}\n\n\t\tresult.push(`User Resolved Keybindings (unique only):`);\n\t\tfor (const item of this.userKeybindings.keybindings) {\n\t\t\tif (!item.keybinding) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tconst input = item._sourceKey ?? 'Impossible: missing source key, but has keybinding';\n\t\t\tif (seenBindings.has(input)) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tseenBindings.add(input);\n\t\t\tconst resolvedKeybindings = this._keyboardMapper.resolveKeybinding(item.keybinding);\n\t\t\tthis._printResolvedKeybindings(result, input, resolvedKeybindings);\n\t\t}\n\n\t\treturn result.join('\\n');\n\t}\n\n\tpublic _dumpDebugInfo(): string {\n\t\tconst layoutInfo = JSON.stringify(this.keyboardLayoutService.getCurrentKeyboardLayout(), null, '\\t');\n\t\tconst mapperInfo = this._keyboardMapper.dumpDebugInfo();\n\t\tconst resolvedKeybindings = this._dumpResolveKeybindingDebugInfo();\n\t\tconst rawMapping = JSON.stringify(this.keyboardLayoutService.getRawKeyboardMapping(), null, '\\t');\n\t\treturn `Layout info:\\n${layoutInfo}\\n\\n${resolvedKeybindings}\\n\\n${mapperInfo}\\n\\nRaw mapping:\\n${rawMapping}`;\n\t}\n\n\tpublic _dumpDebugInfoJSON(): string {\n\t\tconst info = {\n\t\t\tlayout: this.keyboardLayoutService.getCurrentKeyboardLayout(),\n\t\t\trawMapping: this.keyboardLayoutService.getRawKeyboardMapping()\n\t\t};\n\t\treturn JSON.stringify(info, null, '\\t');\n\t}\n\n\tpublic override enableKeybindingHoldMode(commandId: string): Promise<void> | undefined {\n\t\tif (this._currentlyDispatchingCommandId !== commandId) {\n\t\t\treturn undefined;\n\t\t}\n\t\tthis._keybindingHoldMode = new DeferredPromise<void>();\n\t\tconst focusTracker = dom.trackFocus(dom.getWindow(undefined));\n\t\tconst listener = focusTracker.onDidBlur(() => this._resetKeybindingHoldMode());\n\t\tthis._keybindingHoldMode.p.finally(() => {\n\t\t\tlistener.dispose();\n\t\t\tfocusTracker.dispose();\n\t\t});\n\t\tthis._log(`+ Enabled hold-mode for ${commandId}.`);\n\t\treturn this._keybindingHoldMode.p;\n\t}\n\n\tprivate _resetKeybindingHoldMode(): void {\n\t\tif (this._keybindingHoldMode) {\n\t\t\tthis._keybindingHoldMode?.complete();\n\t\t\tthis._keybindingHoldMode = null;\n\t\t}\n\t}\n\n\tpublic override customKeybindingsCount(): number {\n\t\treturn this.userKeybindings.keybindings.length;\n\t}\n\n\tprivate updateResolver(): void {\n\t\tthis._cachedResolver = null;\n\t\tthis._onDidUpdateKeybindings.fire();\n\t}\n\n\tprotected _getResolver(): KeybindingResolver {\n\t\tif (!this._cachedResolver) {\n\t\t\tconst defaults = this._resolveKeybindingItems(KeybindingsRegistry.getDefaultKeybindings(), true);\n\t\t\tconst overrides = this._resolveUserKeybindingItems(this.userKeybindings.keybindings, false);\n\t\t\tthis._cachedResolver = new KeybindingResolver(defaults, overrides, (str) => this._log(str));\n\t\t}\n\t\treturn this._cachedResolver;\n\t}\n\n\tprotected _documentHasFocus(): boolean {\n\t\t// it is possible that the document has lost focus, but the\n\t\t// window is still focused, e.g. when a <webview> element\n\t\t// has focus\n\t\treturn this.hostService.hasFocus;\n\t}\n\n\tprivate _resolveKeybindingItems(items: IKeybindingItem[], isDefault: boolean): ResolvedKeybindingItem[] {\n\t\tconst result: ResolvedKeybindingItem[] = [];\n\t\tlet resultLen = 0;\n\t\tfor (const item of items) {\n\t\t\tconst when = item.when || undefined;\n\t\t\tconst keybinding = item.keybinding;\n\t\t\tif (!keybinding) {\n\t\t\t\t// This might be a removal keybinding item in user settings => accept it\n\t\t\t\tresult[resultLen++] = new ResolvedKeybindingItem(undefined, item.command, item.commandArgs, when, isDefault, item.extensionId, item.isBuiltinExtension);\n\t\t\t} else {\n\t\t\t\tif (this._assertBrowserConflicts(keybinding)) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tconst resolvedKeybindings = this._keyboardMapper.resolveKeybinding(keybinding);\n\t\t\t\tfor (let i = resolvedKeybindings.length - 1; i >= 0; i--) {\n\t\t\t\t\tconst resolvedKeybinding = resolvedKeybindings[i];\n\t\t\t\t\tresult[resultLen++] = new ResolvedKeybindingItem(resolvedKeybinding, item.command, item.commandArgs, when, isDefault, item.extensionId, item.isBuiltinExtension);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn result;\n\t}\n\n\tprivate _resolveUserKeybindingItems(items: IUserKeybindingItem[], isDefault: boolean): ResolvedKeybindingItem[] {\n\t\tconst result: ResolvedKeybindingItem[] = [];\n\t\tlet resultLen = 0;\n\t\tfor (const item of items) {\n\t\t\tconst when = item.when || undefined;\n\t\t\tif (!item.keybinding) {\n\t\t\t\t// This might be a removal keybinding item in user settings => accept it\n\t\t\t\tresult[resultLen++] = new ResolvedKeybindingItem(undefined, item.command, item.commandArgs, when, isDefault, null, false);\n\t\t\t} else {\n\t\t\t\tconst resolvedKeybindings = this._keyboardMapper.resolveKeybinding(item.keybinding);\n\t\t\t\tfor (const resolvedKeybinding of resolvedKeybindings) {\n\t\t\t\t\tresult[resultLen++] = new ResolvedKeybindingItem(resolvedKeybinding, item.command, item.commandArgs, when, isDefault, null, false);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn result;\n\t}\n\n\tprivate _assertBrowserConflicts(keybinding: Keybinding): boolean {\n\t\tif (BrowserFeatures.keyboard === KeyboardSupport.Always) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (BrowserFeatures.keyboard === KeyboardSupport.FullScreen && browser.isFullscreen(mainWindow)) {\n\t\t\treturn false;\n\t\t}\n\n\t\tfor (const chord of keybinding.chords) {\n\t\t\tif (!chord.metaKey && !chord.altKey && !chord.ctrlKey && !chord.shiftKey) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tconst modifiersMask = KeyMod.CtrlCmd | KeyMod.Alt | KeyMod.Shift;\n\n\t\t\tlet partModifiersMask = 0;\n\t\t\tif (chord.metaKey) {\n\t\t\t\tpartModifiersMask |= KeyMod.CtrlCmd;\n\t\t\t}\n\n\t\t\tif (chord.shiftKey) {\n\t\t\t\tpartModifiersMask |= KeyMod.Shift;\n\t\t\t}\n\n\t\t\tif (chord.altKey) {\n\t\t\t\tpartModifiersMask |= KeyMod.Alt;\n\t\t\t}\n\n\t\t\tif (chord.ctrlKey && OS === OperatingSystem.Macintosh) {\n\t\t\t\tpartModifiersMask |= KeyMod.WinCtrl;\n\t\t\t}\n\n\t\t\tif ((partModifiersMask & modifiersMask) === (KeyMod.CtrlCmd | KeyMod.Alt)) {\n\t\t\t\tif (chord instanceof ScanCodeChord && (chord.scanCode === ScanCode.ArrowLeft || chord.scanCode === ScanCode.ArrowRight)) {\n\t\t\t\t\t// console.warn('Ctrl/Cmd+Arrow keybindings should not be used by default in web. Offender: ', kb.getHashCode(), ' for ', commandId);\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t\tif (chord instanceof KeyCodeChord && (chord.keyCode === KeyCode.LeftArrow || chord.keyCode === KeyCode.RightArrow)) {\n\t\t\t\t\t// console.warn('Ctrl/Cmd+Arrow keybindings should not be used by default in web. Offender: ', kb.getHashCode(), ' for ', commandId);\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif ((partModifiersMask & modifiersMask) === KeyMod.CtrlCmd) {\n\t\t\t\tif (chord instanceof ScanCodeChord && (chord.scanCode >= ScanCode.Digit1 && chord.scanCode <= ScanCode.Digit0)) {\n\t\t\t\t\t// console.warn('Ctrl/Cmd+Num keybindings should not be used by default in web. Offender: ', kb.getHashCode(), ' for ', commandId);\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t\tif (chord instanceof KeyCodeChord && (chord.keyCode >= KeyCode.Digit0 && chord.keyCode <= KeyCode.Digit9)) {\n\t\t\t\t\t// console.warn('Ctrl/Cmd+Num keybindings should not be used by default in web. Offender: ', kb.getHashCode(), ' for ', commandId);\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t}\n\n\tpublic resolveKeybinding(kb: Keybinding): ResolvedKeybinding[] {\n\t\treturn this._keyboardMapper.resolveKeybinding(kb);\n\t}\n\n\tpublic resolveKeyboardEvent(keyboardEvent: IKeyboardEvent): ResolvedKeybinding {\n\t\tthis.keyboardLayoutService.validateCurrentKeyboardMapping(keyboardEvent);\n\t\treturn this._keyboardMapper.resolveKeyboardEvent(keyboardEvent);\n\t}\n\n\tpublic resolveUserBinding(userBinding: string): ResolvedKeybinding[] {\n\t\tconst keybinding = KeybindingParser.parseKeybinding(userBinding);\n\t\treturn (keybinding ? this._keyboardMapper.resolveKeybinding(keybinding) : []);\n\t}\n\n\tprivate _handleKeybindingsExtensionPointUser(extensionId: ExtensionIdentifier, isBuiltin: boolean, keybindings: ContributedKeyBinding | ContributedKeyBinding[], collector: ExtensionMessageCollector, result: IExtensionKeybindingRule[]): void {\n\t\tif (Array.isArray(keybindings)) {\n\t\t\tfor (let i = 0, len = keybindings.length; i < len; i++) {\n\t\t\t\tthis._handleKeybinding(extensionId, isBuiltin, i + 1, keybindings[i], collector, result);\n\t\t\t}\n\t\t} else {\n\t\t\tthis._handleKeybinding(extensionId, isBuiltin, 1, keybindings, collector, result);\n\t\t}\n\t}\n\n\tprivate _handleKeybinding(extensionId: ExtensionIdentifier, isBuiltin: boolean, idx: number, keybindings: ContributedKeyBinding, collector: ExtensionMessageCollector, result: IExtensionKeybindingRule[]): void {\n\n\t\tconst rejects: string[] = [];\n\n\t\tif (isValidContributedKeyBinding(keybindings, rejects)) {\n\t\t\tconst rule = this._asCommandRule(extensionId, isBuiltin, idx++, keybindings);\n\t\t\tif (rule) {\n\t\t\t\tresult.push(rule);\n\t\t\t}\n\t\t}\n\n\t\tif (rejects.length > 0) {\n\t\t\tcollector.error(nls.localize(\n\t\t\t\t'invalid.keybindings',\n\t\t\t\t\"Invalid `contributes.{0}`: {1}\",\n\t\t\t\tkeybindingsExtPoint.name,\n\t\t\t\trejects.join('\\n')\n\t\t\t));\n\t\t}\n\t}\n\n\tprivate static bindToCurrentPlatform(key: string | undefined, mac: string | undefined, linux: string | undefined, win: string | undefined): string | undefined {\n\t\tif (OS === OperatingSystem.Windows && win) {\n\t\t\tif (win) {\n\t\t\t\treturn win;\n\t\t\t}\n\t\t} else if (OS === OperatingSystem.Macintosh) {\n\t\t\tif (mac) {\n\t\t\t\treturn mac;\n\t\t\t}\n\t\t} else {\n\t\t\tif (linux) {\n\t\t\t\treturn linux;\n\t\t\t}\n\t\t}\n\t\treturn key;\n\t}\n\n\tprivate _asCommandRule(extensionId: ExtensionIdentifier, isBuiltin: boolean, idx: number, binding: ContributedKeyBinding): IExtensionKeybindingRule | undefined {\n\n\t\tconst { command, args, when, key, mac, linux, win } = binding;\n\t\tconst keybinding = WorkbenchKeybindingService.bindToCurrentPlatform(key, mac, linux, win);\n\t\tif (!keybinding) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\tlet weight: number;\n\t\tif (isBuiltin) {\n\t\t\tweight = KeybindingWeight.BuiltinExtension + idx;\n\t\t} else {\n\t\t\tweight = KeybindingWeight.ExternalExtension + idx;\n\t\t}\n\n\t\tconst commandAction = MenuRegistry.getCommand(command);\n\t\tconst precondition = commandAction && commandAction.precondition;\n\t\tlet fullWhen: ContextKeyExpression | undefined;\n\t\tif (when && precondition) {\n\t\t\tfullWhen = ContextKeyExpr.and(precondition, ContextKeyExpr.deserialize(when));\n\t\t} else if (when) {\n\t\t\tfullWhen = ContextKeyExpr.deserialize(when);\n\t\t} else if (precondition) {\n\t\t\tfullWhen = precondition;\n\t\t}\n\n\t\tconst desc: IExtensionKeybindingRule = {\n\t\t\tid: command,\n\t\t\targs,\n\t\t\twhen: fullWhen,\n\t\t\tweight: weight,\n\t\t\tkeybinding: KeybindingParser.parseKeybinding(keybinding),\n\t\t\textensionId: extensionId.value,\n\t\t\tisBuiltinExtension: isBuiltin\n\t\t};\n\t\treturn desc;\n\t}\n\n\tpublic override getDefaultKeybindingsContent(): string {\n\t\tconst resolver = this._getResolver();\n\t\tconst defaultKeybindings = resolver.getDefaultKeybindings();\n\t\tconst boundCommands = resolver.getDefaultBoundCommands();\n\t\treturn (\n\t\t\tWorkbenchKeybindingService._getDefaultKeybindings(defaultKeybindings)\n\t\t\t+ '\\n\\n'\n\t\t\t+ WorkbenchKeybindingService._getAllCommandsAsComment(boundCommands)\n\t\t);\n\t}\n\n\tprivate static _getDefaultKeybindings(defaultKeybindings: readonly ResolvedKeybindingItem[]): string {\n\t\tconst out = new OutputBuilder();\n\t\tout.writeLine('[');\n\n\t\tconst lastIndex = defaultKeybindings.length - 1;\n\t\tdefaultKeybindings.forEach((k, index) => {\n\t\t\tKeybindingIO.writeKeybindingItem(out, k);\n\t\t\tif (index !== lastIndex) {\n\t\t\t\tout.writeLine(',');\n\t\t\t} else {\n\t\t\t\tout.writeLine();\n\t\t\t}\n\t\t});\n\t\tout.writeLine(']');\n\t\treturn out.toString();\n\t}\n\n\tprivate static _getAllCommandsAsComment(boundCommands: Map<string, boolean>): string {\n\t\tconst unboundCommands = getAllUnboundCommands(boundCommands);\n\t\tconst pretty = unboundCommands.sort().join('\\n// - ');\n\t\treturn '// ' + nls.localize('unboundCommands', \"Here are other available commands: \") + '\\n// - ' + pretty;\n\t}\n\n\toverride mightProducePrintableCharacter(event: IKeyboardEvent): boolean {\n\t\tif (event.ctrlKey || event.metaKey || event.altKey) {\n\t\t\t// ignore ctrl/cmd/alt-combination but not shift-combinatios\n\t\t\treturn false;\n\t\t}\n\t\tconst code = ScanCodeUtils.toEnum(event.code);\n\n\t\tif (NUMPAD_PRINTABLE_SCANCODES.indexOf(code) !== -1) {\n\t\t\t// This is a numpad key that might produce a printable character based on NumLock.\n\t\t\t// Let's check if NumLock is on or off based on the event's keyCode.\n\t\t\t// e.g.\n\t\t\t// - when NumLock is off, ScanCode.Numpad4 produces KeyCode.LeftArrow\n\t\t\t// - when NumLock is on, ScanCode.Numpad4 produces KeyCode.NUMPAD_4\n\t\t\t// However, ScanCode.NumpadAdd always produces KeyCode.NUMPAD_ADD\n\t\t\tif (event.keyCode === IMMUTABLE_CODE_TO_KEY_CODE[code]) {\n\t\t\t\t// NumLock is on or this is /, *, -, + on the numpad\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\tif (isMacintosh && event.keyCode === otherMacNumpadMapping.get(code)) {\n\t\t\t\t// on macOS, the numpad keys can also map to keys 1 - 0.\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\treturn false;\n\t\t}\n\n\t\tconst keycode = IMMUTABLE_CODE_TO_KEY_CODE[code];\n\t\tif (keycode !== -1) {\n\t\t\t// https://github.com/microsoft/vscode/issues/74934\n\t\t\treturn false;\n\t\t}\n\t\t// consult the KeyboardMapperFactory to check the given event for\n\t\t// a printable value.\n\t\tconst mapping = this.keyboardLayoutService.getRawKeyboardMapping();\n\t\tif (!mapping) {\n\t\t\treturn false;\n\t\t}\n\t\tconst keyInfo = mapping[event.code];\n\t\tif (!keyInfo) {\n\t\t\treturn false;\n\t\t}\n\t\tif (!keyInfo.value || /\\s/.test(keyInfo.value)) {\n\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t}\n}\n\nclass UserKeybindings extends Disposable {\n\n\tprivate _rawKeybindings: Object[] = [];\n\tprivate _keybindings: IUserKeybindingItem[] = [];\n\tget keybindings(): IUserKeybindingItem[] { return this._keybindings; }\n\n\tprivate readonly reloadConfigurationScheduler: RunOnceScheduler;\n\n\tprivate readonly watchDisposables = this._register(new DisposableStore());\n\n\tprivate readonly _onDidChange: Emitter<void> = this._register(new Emitter<void>());\n\treadonly onDidChange: Event<void> = this._onDidChange.event;\n\n\tconstructor(\n\t\tprivate readonly userDataProfileService: IUserDataProfileService,\n\t\tprivate readonly uriIdentityService: IUriIdentityService,\n\t\tprivate readonly fileService: IFileService,\n\t\tlogService: ILogService,\n\t) {\n\t\tsuper();\n\n\t\tthis.watch();\n\n\t\tthis.reloadConfigurationScheduler = this._register(new RunOnceScheduler(() => this.reload().then(changed => {\n\t\t\tif (changed) {\n\t\t\t\tthis._onDidChange.fire();\n\t\t\t}\n\t\t}), 50));\n\n\t\tthis._register(Event.filter(this.fileService.onDidFilesChange, e => e.contains(this.userDataProfileService.currentProfile.keybindingsResource))(() => {\n\t\t\tlogService.debug('Keybindings file changed');\n\t\t\tthis.reloadConfigurationScheduler.schedule();\n\t\t}));\n\n\t\tthis._register(this.fileService.onDidRunOperation((e) => {\n\t\t\tif (e.operation === FileOperation.WRITE && e.resource.toString() === this.userDataProfileService.currentProfile.keybindingsResource.toString()) {\n\t\t\t\tlogService.debug('Keybindings file written');\n\t\t\t\tthis.reloadConfigurationScheduler.schedule();\n\t\t\t}\n\t\t}));\n\n\t\tthis._register(userDataProfileService.onDidChangeCurrentProfile(e => {\n\t\t\tif (!this.uriIdentityService.extUri.isEqual(e.previous.keybindingsResource, e.profile.keybindingsResource)) {\n\t\t\t\te.join(this.whenCurrentProfileChanged());\n\t\t\t}\n\t\t}));\n\t}\n\n\tprivate async whenCurrentProfileChanged(): Promise<void> {\n\t\tthis.watch();\n\t\tthis.reloadConfigurationScheduler.schedule();\n\t}\n\n\tprivate watch(): void {\n\t\tthis.watchDisposables.clear();\n\t\tthis.watchDisposables.add(this.fileService.watch(dirname(this.userDataProfileService.currentProfile.keybindingsResource)));\n\t\t// Also listen to the resource incase the resource is a symlink - https://github.com/microsoft/vscode/issues/118134\n\t\tthis.watchDisposables.add(this.fileService.watch(this.userDataProfileService.currentProfile.keybindingsResource));\n\t}\n\n\tasync initialize(): Promise<void> {\n\t\tawait this.reload();\n\t}\n\n\tprivate async reload(): Promise<boolean> {\n\t\tconst newKeybindings = await this.readUserKeybindings();\n\t\tif (objects.equals(this._rawKeybindings, newKeybindings)) {\n\t\t\t// no change\n\t\t\treturn false;\n\t\t}\n\n\t\tthis._rawKeybindings = newKeybindings;\n\t\tthis._keybindings = this._rawKeybindings.map((k) => KeybindingIO.readUserKeybindingItem(k));\n\t\treturn true;\n\t}\n\n\tprivate async readUserKeybindings(): Promise<Object[]> {\n\t\ttry {\n\t\t\tconst content = await this.fileService.readFile(this.userDataProfileService.currentProfile.keybindingsResource);\n\t\t\tconst value = parse(content.value.toString());\n\t\t\treturn Array.isArray(value)\n\t\t\t\t? value.filter(v => v && typeof v === 'object' /* just typeof === object doesn't catch `null` */)\n\t\t\t\t: [];\n\t\t} catch (e) {\n\t\t\treturn [];\n\t\t}\n\t}\n}\n\n/**\n * Registers the `keybindings.json`'s schema with the JSON schema registry. Allows updating the schema, e.g., when new commands are registered (e.g., by extensions).\n *\n * Lifecycle owned by `WorkbenchKeybindingService`. Must be instantiated only once.\n */\nclass KeybindingsJsonSchema {\n\n\tprivate static readonly schemaId = 'vscode://schemas/keybindings';\n\n\tprivate readonly commandsSchemas: IJSONSchema[] = [];\n\tprivate readonly commandsEnum: string[] = [];\n\tprivate readonly removalCommandsEnum: string[] = [];\n\tprivate readonly commandsEnumDescriptions: (string | undefined)[] = [];\n\tprivate readonly schema: IJSONSchema = {\n\t\tid: KeybindingsJsonSchema.schemaId,\n\t\ttype: 'array',\n\t\ttitle: nls.localize('keybindings.json.title', \"Keybindings configuration\"),\n\t\tallowTrailingCommas: true,\n\t\tallowComments: true,\n\t\tdefinitions: {\n\t\t\t'editorGroupsSchema': {\n\t\t\t\t'type': 'array',\n\t\t\t\t'items': {\n\t\t\t\t\t'type': 'object',\n\t\t\t\t\t'properties': {\n\t\t\t\t\t\t'groups': {\n\t\t\t\t\t\t\t'$ref': '#/definitions/editorGroupsSchema',\n\t\t\t\t\t\t\t'default': [{}, {}]\n\t\t\t\t\t\t},\n\t\t\t\t\t\t'size': {\n\t\t\t\t\t\t\t'type': 'number',\n\t\t\t\t\t\t\t'default': 0.5\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\t\t\t'commandNames': {\n\t\t\t\t'type': 'string',\n\t\t\t\t'enum': this.commandsEnum,\n\t\t\t\t'enumDescriptions': <any>this.commandsEnumDescriptions,\n\t\t\t\t'description': nls.localize('keybindings.json.command', \"Name of the command to execute\"),\n\t\t\t},\n\t\t\t'commandType': {\n\t\t\t\t'anyOf': [ // repetition of this clause here and below is intentional: one is for nice diagnostics & one is for code completion\n\t\t\t\t\t{\n\t\t\t\t\t\t$ref: '#/definitions/commandNames'\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t'type': 'string',\n\t\t\t\t\t\t'enum': this.removalCommandsEnum,\n\t\t\t\t\t\t'enumDescriptions': <any>this.commandsEnumDescriptions,\n\t\t\t\t\t\t'description': nls.localize('keybindings.json.removalCommand', \"Name of the command to remove keyboard shortcut for\"),\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t'type': 'string'\n\t\t\t\t\t},\n\t\t\t\t]\n\t\t\t},\n\t\t\t'commandsSchemas': {\n\t\t\t\t'allOf': this.commandsSchemas\n\t\t\t}\n\t\t},\n\t\titems: {\n\t\t\t'required': ['key'],\n\t\t\t'type': 'object',\n\t\t\t'defaultSnippets': [{ 'body': { 'key': '$1', 'command': '$2', 'when': '$3' } }],\n\t\t\t'properties': {\n\t\t\t\t'key': {\n\t\t\t\t\t'type': 'string',\n\t\t\t\t\t'description': nls.localize('keybindings.json.key', \"Key or key sequence (separated by space)\"),\n\t\t\t\t},\n\t\t\t\t'command': {\n\t\t\t\t\t'anyOf': [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t'if': {\n\t\t\t\t\t\t\t\t'type': 'array'\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t'then': {\n\t\t\t\t\t\t\t\t'not': {\n\t\t\t\t\t\t\t\t\t'type': 'array'\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t'errorMessage': nls.localize('keybindings.commandsIsArray', \"Incorrect type. Expected \\\"{0}\\\". The field 'command' does not support running multiple commands. Use command 'runCommands' to pass it multiple commands to run.\", 'string')\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t'else': {\n\t\t\t\t\t\t\t\t'$ref': '#/definitions/commandType'\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t'$ref': '#/definitions/commandType'\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t},\n\t\t\t\t'when': {\n\t\t\t\t\t'type': 'string',\n\t\t\t\t\t'description': nls.localize('keybindings.json.when', \"Condition when the key is active.\")\n\t\t\t\t},\n\t\t\t\t'args': {\n\t\t\t\t\t'description': nls.localize('keybindings.json.args', \"Arguments to pass to the command to execute.\")\n\t\t\t\t}\n\t\t\t},\n\t\t\t'$ref': '#/definitions/commandsSchemas'\n\t\t}\n\t};\n\n\tprivate readonly schemaRegistry = Registry.as<IJSONContributionRegistry>(Extensions.JSONContribution);\n\n\tconstructor() {\n\t\tthis.schemaRegistry.registerSchema(KeybindingsJsonSchema.schemaId, this.schema);\n\t}\n\n\t// TODO@ulugbekna: can updates happen incrementally rather than rebuilding; concerns:\n\t// - is just appending additional schemas enough for the registry to pick them up?\n\t// - can `CommandsRegistry.getCommands` and `MenuRegistry.getCommands` return different values at different times? ie would just pushing new schemas from `additionalContributions` not be enough?\n\tupdateSchema(additionalContributions: readonly IJSONSchema[]) {\n\t\tthis.commandsSchemas.length = 0;\n\t\tthis.commandsEnum.length = 0;\n\t\tthis.removalCommandsEnum.length = 0;\n\t\tthis.commandsEnumDescriptions.length = 0;\n\n\t\tconst knownCommands = new Set<string>();\n\t\tconst addKnownCommand = (commandId: string, description?: string | ILocalizedString | undefined) => {\n\t\t\tif (!/^_/.test(commandId)) {\n\t\t\t\tif (!knownCommands.has(commandId)) {\n\t\t\t\t\tknownCommands.add(commandId);\n\n\t\t\t\t\tthis.commandsEnum.push(commandId);\n\t\t\t\t\tthis.commandsEnumDescriptions.push(isLocalizedString(description) ? description.value : description);\n\n\t\t\t\t\t// Also add the negative form for keybinding removal\n\t\t\t\t\tthis.removalCommandsEnum.push(`-${commandId}`);\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tconst allCommands = CommandsRegistry.getCommands();\n\t\tfor (const [commandId, command] of allCommands) {\n\t\t\tconst commandMetadata = command.metadata;\n\n\t\t\taddKnownCommand(commandId, commandMetadata?.description);\n\n\t\t\tif (!commandMetadata || !commandMetadata.args || commandMetadata.args.length !== 1 || !commandMetadata.args[0].schema) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tconst argsSchema = commandMetadata.args[0].schema;\n\t\t\tconst argsRequired = (\n\t\t\t\t(typeof commandMetadata.args[0].isOptional !== 'undefined')\n\t\t\t\t\t? (!commandMetadata.args[0].isOptional)\n\t\t\t\t\t: (Array.isArray(argsSchema.required) && argsSchema.required.length > 0)\n\t\t\t);\n\t\t\tconst addition = {\n\t\t\t\t'if': {\n\t\t\t\t\t'required': ['command'],\n\t\t\t\t\t'properties': {\n\t\t\t\t\t\t'command': { 'const': commandId }\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t'then': {\n\t\t\t\t\t'required': (<string[]>[]).concat(argsRequired ? ['args'] : []),\n\t\t\t\t\t'properties': {\n\t\t\t\t\t\t'args': argsSchema\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tthis.commandsSchemas.push(addition);\n\t\t}\n\n\t\tconst menuCommands = MenuRegistry.getCommands();\n\t\tfor (const commandId of menuCommands.keys()) {\n\t\t\taddKnownCommand(commandId);\n\t\t}\n\n\t\tthis.commandsSchemas.push(...additionalContributions);\n\t\tthis.schemaRegistry.notifySchemaChanged(KeybindingsJsonSchema.schemaId);\n\t}\n}\n\nregisterSingleton(IKeybindingService, WorkbenchKeybindingService, InstantiationType.Eager);\n"],
  "mappings": "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",
  "names": []
}
