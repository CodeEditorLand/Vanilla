{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/keybinding/electron-sandbox/nativeKeyboardLayoutService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Emitter, type Event } from \"../../../../base/common/event.js\";\nimport { Disposable } from \"../../../../base/common/lifecycle.js\";\nimport { OS, OperatingSystem } from \"../../../../base/common/platform.js\";\nimport { ProxyChannel } from \"../../../../base/parts/ipc/common/ipc.js\";\nimport { createDecorator } from \"../../../../platform/instantiation/common/instantiation.js\";\nimport { IMainProcessService } from \"../../../../platform/ipc/common/mainProcessService.js\";\nimport {\n\ttype IKeyboardLayoutInfo,\n\ttype IKeyboardMapping,\n\ttype IMacLinuxKeyboardMapping,\n\ttype IWindowsKeyboardMapping,\n\tmacLinuxKeyboardMappingEquals,\n\twindowsKeyboardMappingEquals,\n} from \"../../../../platform/keyboardLayout/common/keyboardLayout.js\";\nimport type { INativeKeyboardLayoutService as IBaseNativeKeyboardLayoutService } from \"../../../../platform/keyboardLayout/common/keyboardLayoutService.js\";\n\nexport const INativeKeyboardLayoutService =\n\tcreateDecorator<INativeKeyboardLayoutService>(\n\t\t\"nativeKeyboardLayoutService\",\n\t);\n\nexport interface INativeKeyboardLayoutService {\n\treadonly _serviceBrand: undefined;\n\treadonly onDidChangeKeyboardLayout: Event<void>;\n\tgetRawKeyboardMapping(): IKeyboardMapping | null;\n\tgetCurrentKeyboardLayout(): IKeyboardLayoutInfo | null;\n}\n\nexport class NativeKeyboardLayoutService\n\textends Disposable\n\timplements INativeKeyboardLayoutService\n{\n\tdeclare readonly _serviceBrand: undefined;\n\n\tprivate readonly _onDidChangeKeyboardLayout = this._register(\n\t\tnew Emitter<void>(),\n\t);\n\treadonly onDidChangeKeyboardLayout = this._onDidChangeKeyboardLayout.event;\n\n\tprivate readonly _keyboardLayoutService: IBaseNativeKeyboardLayoutService;\n\tprivate _initPromise: Promise<void> | null;\n\tprivate _keyboardMapping: IKeyboardMapping | null;\n\tprivate _keyboardLayoutInfo: IKeyboardLayoutInfo | null;\n\n\tconstructor(\n\t\t@IMainProcessService mainProcessService: IMainProcessService\n\t) {\n\t\tsuper();\n\t\tthis._keyboardLayoutService = ProxyChannel.toService<IBaseNativeKeyboardLayoutService>(mainProcessService.getChannel('keyboardLayout'));\n\t\tthis._initPromise = null;\n\t\tthis._keyboardMapping = null;\n\t\tthis._keyboardLayoutInfo = null;\n\n\t\tthis._register(this._keyboardLayoutService.onDidChangeKeyboardLayout(async ({ keyboardLayoutInfo, keyboardMapping }) => {\n\t\t\tawait this.initialize();\n\t\t\tif (keyboardMappingEquals(this._keyboardMapping, keyboardMapping)) {\n\t\t\t\t// the mappings are equal\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis._keyboardMapping = keyboardMapping;\n\t\t\tthis._keyboardLayoutInfo = keyboardLayoutInfo;\n\t\t\tthis._onDidChangeKeyboardLayout.fire();\n\t\t}));\n\t}\n\n\tpublic initialize(): Promise<void> {\n\t\tif (!this._initPromise) {\n\t\t\tthis._initPromise = this._doInitialize();\n\t\t}\n\t\treturn this._initPromise;\n\t}\n\n\tprivate async _doInitialize(): Promise<void> {\n\t\tconst keyboardLayoutData =\n\t\t\tawait this._keyboardLayoutService.getKeyboardLayoutData();\n\t\tconst { keyboardLayoutInfo, keyboardMapping } = keyboardLayoutData;\n\t\tthis._keyboardMapping = keyboardMapping;\n\t\tthis._keyboardLayoutInfo = keyboardLayoutInfo;\n\t}\n\n\tpublic getRawKeyboardMapping(): IKeyboardMapping | null {\n\t\treturn this._keyboardMapping;\n\t}\n\n\tpublic getCurrentKeyboardLayout(): IKeyboardLayoutInfo | null {\n\t\treturn this._keyboardLayoutInfo;\n\t}\n}\n\nfunction keyboardMappingEquals(\n\ta: IKeyboardMapping | null,\n\tb: IKeyboardMapping | null,\n): boolean {\n\tif (OS === OperatingSystem.Windows) {\n\t\treturn windowsKeyboardMappingEquals(\n\t\t\t<IWindowsKeyboardMapping | null>a,\n\t\t\t<IWindowsKeyboardMapping | null>b,\n\t\t);\n\t}\n\n\treturn macLinuxKeyboardMappingEquals(\n\t\t<IMacLinuxKeyboardMapping | null>a,\n\t\t<IMacLinuxKeyboardMapping | null>b,\n\t);\n}\n"],
  "mappings": ";;;;;;;;;;;;AAKA,SAAS,eAA2B;AACpC,SAAS,kBAAkB;AAC3B,SAAS,IAAI,uBAAuB;AACpC,SAAS,oBAAoB;AAC7B,SAAS,uBAAuB;AAChC,SAAS,2BAA2B;AACpC;AAAA,EAKC;AAAA,EACA;AAAA,OACM;AAGA,MAAM,+BACZ;AAAA,EACC;AACD;AASM,IAAM,8BAAN,cACE,WAET;AAAA,EApCA,OAoCA;AAAA;AAAA;AAAA,EAGkB,6BAA6B,KAAK;AAAA,IAClD,IAAI,QAAc;AAAA,EACnB;AAAA,EACS,4BAA4B,KAAK,2BAA2B;AAAA,EAEpD;AAAA,EACT;AAAA,EACA;AAAA,EACA;AAAA,EAER,YACsB,oBACpB;AACD,UAAM;AACN,SAAK,yBAAyB,aAAa,UAA4C,mBAAmB,WAAW,gBAAgB,CAAC;AACtI,SAAK,eAAe;AACpB,SAAK,mBAAmB;AACxB,SAAK,sBAAsB;AAE3B,SAAK,UAAU,KAAK,uBAAuB,0BAA0B,OAAO,EAAE,oBAAoB,gBAAgB,MAAM;AACvH,YAAM,KAAK,WAAW;AACtB,UAAI,sBAAsB,KAAK,kBAAkB,eAAe,GAAG;AAElE;AAAA,MACD;AAEA,WAAK,mBAAmB;AACxB,WAAK,sBAAsB;AAC3B,WAAK,2BAA2B,KAAK;AAAA,IACtC,CAAC,CAAC;AAAA,EACH;AAAA,EAEO,aAA4B;AAClC,QAAI,CAAC,KAAK,cAAc;AACvB,WAAK,eAAe,KAAK,cAAc;AAAA,IACxC;AACA,WAAO,KAAK;AAAA,EACb;AAAA,EAEA,MAAc,gBAA+B;AAC5C,UAAM,qBACL,MAAM,KAAK,uBAAuB,sBAAsB;AACzD,UAAM,EAAE,oBAAoB,gBAAgB,IAAI;AAChD,SAAK,mBAAmB;AACxB,SAAK,sBAAsB;AAAA,EAC5B;AAAA,EAEO,wBAAiD;AACvD,WAAO,KAAK;AAAA,EACb;AAAA,EAEO,2BAAuD;AAC7D,WAAO,KAAK;AAAA,EACb;AACD;AA5Da,8BAAN;AAAA,EAiBJ;AAAA,GAjBU;AA8Db,SAAS,sBACR,GACA,GACU;AACV,MAAI,OAAO,gBAAgB,SAAS;AACnC,WAAO;AAAA,MAC0B;AAAA,MACA;AAAA,IACjC;AAAA,EACD;AAEA,SAAO;AAAA,IAC2B;AAAA,IACA;AAAA,EAClC;AACD;AAfS;",
  "names": []
}
