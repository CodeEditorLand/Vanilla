{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/keybinding/electron-sandbox/nativeKeyboardLayout.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Emitter } from \"../../../../base/common/event.js\";\nimport { Disposable } from \"../../../../base/common/lifecycle.js\";\nimport { OS, OperatingSystem } from \"../../../../base/common/platform.js\";\nimport { IConfigurationService } from \"../../../../platform/configuration/common/configuration.js\";\nimport {\n\tInstantiationType,\n\tregisterSingleton,\n} from \"../../../../platform/instantiation/common/extensions.js\";\nimport type { IKeyboardEvent } from \"../../../../platform/keybinding/common/keybinding.js\";\nimport {\n\tDispatchConfig,\n\treadKeyboardConfig,\n} from \"../../../../platform/keyboardLayout/common/keyboardConfig.js\";\nimport {\n\ttype IKeyboardLayoutInfo,\n\tIKeyboardLayoutService,\n\ttype IKeyboardMapping,\n\ttype ILinuxKeyboardLayoutInfo,\n\ttype IMacKeyboardLayoutInfo,\n\ttype IMacLinuxKeyboardMapping,\n\ttype IWindowsKeyboardLayoutInfo,\n\ttype IWindowsKeyboardMapping,\n} from \"../../../../platform/keyboardLayout/common/keyboardLayout.js\";\nimport {\n\tCachedKeyboardMapper,\n\ttype IKeyboardMapper,\n} from \"../../../../platform/keyboardLayout/common/keyboardMapper.js\";\nimport { FallbackKeyboardMapper } from \"../common/fallbackKeyboardMapper.js\";\nimport { MacLinuxKeyboardMapper } from \"../common/macLinuxKeyboardMapper.js\";\nimport { WindowsKeyboardMapper } from \"../common/windowsKeyboardMapper.js\";\nimport { INativeKeyboardLayoutService } from \"./nativeKeyboardLayoutService.js\";\n\nexport class KeyboardLayoutService\n\textends Disposable\n\timplements IKeyboardLayoutService\n{\n\tdeclare readonly _serviceBrand: undefined;\n\n\tprivate readonly _onDidChangeKeyboardLayout = this._register(\n\t\tnew Emitter<void>(),\n\t);\n\treadonly onDidChangeKeyboardLayout = this._onDidChangeKeyboardLayout.event;\n\n\tprivate _keyboardMapper: IKeyboardMapper | null;\n\n\tconstructor(\n\t\t@INativeKeyboardLayoutService private readonly _nativeKeyboardLayoutService: INativeKeyboardLayoutService,\n\t\t@IConfigurationService private readonly _configurationService: IConfigurationService\n\t) {\n\t\tsuper();\n\t\tthis._keyboardMapper = null;\n\n\t\tthis._register(this._nativeKeyboardLayoutService.onDidChangeKeyboardLayout(async () => {\n\t\t\tthis._keyboardMapper = null;\n\t\t\tthis._onDidChangeKeyboardLayout.fire();\n\t\t}));\n\n\t\tthis._register(_configurationService.onDidChangeConfiguration(async (e) => {\n\t\t\tif (e.affectsConfiguration('keyboard')) {\n\t\t\t\tthis._keyboardMapper = null;\n\t\t\t\tthis._onDidChangeKeyboardLayout.fire();\n\t\t\t}\n\t\t}));\n\t}\n\n\tpublic getRawKeyboardMapping(): IKeyboardMapping | null {\n\t\treturn this._nativeKeyboardLayoutService.getRawKeyboardMapping();\n\t}\n\n\tpublic getCurrentKeyboardLayout(): IKeyboardLayoutInfo | null {\n\t\treturn this._nativeKeyboardLayoutService.getCurrentKeyboardLayout();\n\t}\n\n\tpublic getAllKeyboardLayouts(): IKeyboardLayoutInfo[] {\n\t\treturn [];\n\t}\n\n\tpublic getKeyboardMapper(): IKeyboardMapper {\n\t\tconst config = readKeyboardConfig(this._configurationService);\n\t\tif (config.dispatch === DispatchConfig.KeyCode) {\n\t\t\t// Forcefully set to use keyCode\n\t\t\treturn new FallbackKeyboardMapper(config.mapAltGrToCtrlAlt, OS);\n\t\t}\n\t\tif (!this._keyboardMapper) {\n\t\t\tthis._keyboardMapper = new CachedKeyboardMapper(\n\t\t\t\tcreateKeyboardMapper(\n\t\t\t\t\tthis.getCurrentKeyboardLayout(),\n\t\t\t\t\tthis.getRawKeyboardMapping(),\n\t\t\t\t\tconfig.mapAltGrToCtrlAlt,\n\t\t\t\t),\n\t\t\t);\n\t\t}\n\t\treturn this._keyboardMapper;\n\t}\n\n\tpublic validateCurrentKeyboardMapping(keyboardEvent: IKeyboardEvent): void {\n\t\treturn;\n\t}\n}\n\nfunction createKeyboardMapper(\n\tlayoutInfo: IKeyboardLayoutInfo | null,\n\trawMapping: IKeyboardMapping | null,\n\tmapAltGrToCtrlAlt: boolean,\n): IKeyboardMapper {\n\tconst _isUSStandard = isUSStandard(layoutInfo);\n\tif (OS === OperatingSystem.Windows) {\n\t\treturn new WindowsKeyboardMapper(\n\t\t\t_isUSStandard,\n\t\t\t<IWindowsKeyboardMapping>rawMapping,\n\t\t\tmapAltGrToCtrlAlt,\n\t\t);\n\t}\n\n\tif (!rawMapping || Object.keys(rawMapping).length === 0) {\n\t\t// Looks like reading the mappings failed (most likely Mac + Japanese/Chinese keyboard layouts)\n\t\treturn new FallbackKeyboardMapper(mapAltGrToCtrlAlt, OS);\n\t}\n\n\tif (OS === OperatingSystem.Macintosh) {\n\t\tconst kbInfo = <IMacKeyboardLayoutInfo>layoutInfo;\n\t\tif (kbInfo.id === \"com.apple.keylayout.DVORAK-QWERTYCMD\") {\n\t\t\t// Use keyCode based dispatching for DVORAK - QWERTY \u2318\n\t\t\treturn new FallbackKeyboardMapper(mapAltGrToCtrlAlt, OS);\n\t\t}\n\t}\n\n\treturn new MacLinuxKeyboardMapper(\n\t\t_isUSStandard,\n\t\t<IMacLinuxKeyboardMapping>rawMapping,\n\t\tmapAltGrToCtrlAlt,\n\t\tOS,\n\t);\n}\n\nfunction isUSStandard(_kbInfo: IKeyboardLayoutInfo | null): boolean {\n\tif (!_kbInfo) {\n\t\treturn false;\n\t}\n\n\tif (OS === OperatingSystem.Linux) {\n\t\tconst kbInfo = <ILinuxKeyboardLayoutInfo>_kbInfo;\n\t\tconst layouts = kbInfo.layout.split(/,/g);\n\t\treturn layouts[kbInfo.group] === \"us\";\n\t}\n\n\tif (OS === OperatingSystem.Macintosh) {\n\t\tconst kbInfo = <IMacKeyboardLayoutInfo>_kbInfo;\n\t\treturn kbInfo.id === \"com.apple.keylayout.US\";\n\t}\n\n\tif (OS === OperatingSystem.Windows) {\n\t\tconst kbInfo = <IWindowsKeyboardLayoutInfo>_kbInfo;\n\t\treturn kbInfo.name === \"00000409\";\n\t}\n\n\treturn false;\n}\n\nregisterSingleton(\n\tIKeyboardLayoutService,\n\tKeyboardLayoutService,\n\tInstantiationType.Delayed,\n);\n"],
  "mappings": "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",
  "names": []
}
