{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/keybinding/electron-sandbox/nativeKeyboardLayout.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Disposable } from '../../../../base/common/lifecycle.js';\nimport { IKeyboardLayoutInfo, IKeyboardLayoutService, IKeyboardMapping, ILinuxKeyboardLayoutInfo, IMacKeyboardLayoutInfo, IMacLinuxKeyboardMapping, IWindowsKeyboardLayoutInfo, IWindowsKeyboardMapping } from '../../../../platform/keyboardLayout/common/keyboardLayout.js';\nimport { Emitter } from '../../../../base/common/event.js';\nimport { OperatingSystem, OS } from '../../../../base/common/platform.js';\nimport { CachedKeyboardMapper, IKeyboardMapper } from '../../../../platform/keyboardLayout/common/keyboardMapper.js';\nimport { WindowsKeyboardMapper } from '../common/windowsKeyboardMapper.js';\nimport { FallbackKeyboardMapper } from '../common/fallbackKeyboardMapper.js';\nimport { MacLinuxKeyboardMapper } from '../common/macLinuxKeyboardMapper.js';\nimport { DispatchConfig, readKeyboardConfig } from '../../../../platform/keyboardLayout/common/keyboardConfig.js';\nimport { IKeyboardEvent } from '../../../../platform/keybinding/common/keybinding.js';\nimport { IConfigurationService } from '../../../../platform/configuration/common/configuration.js';\nimport { INativeKeyboardLayoutService } from './nativeKeyboardLayoutService.js';\nimport { InstantiationType, registerSingleton } from '../../../../platform/instantiation/common/extensions.js';\n\nexport class KeyboardLayoutService extends Disposable implements IKeyboardLayoutService {\n\n\tdeclare readonly _serviceBrand: undefined;\n\n\tprivate readonly _onDidChangeKeyboardLayout = this._register(new Emitter<void>());\n\treadonly onDidChangeKeyboardLayout = this._onDidChangeKeyboardLayout.event;\n\n\tprivate _keyboardMapper: IKeyboardMapper | null;\n\n\tconstructor(\n\t\t@INativeKeyboardLayoutService private readonly _nativeKeyboardLayoutService: INativeKeyboardLayoutService,\n\t\t@IConfigurationService private readonly _configurationService: IConfigurationService\n\t) {\n\t\tsuper();\n\t\tthis._keyboardMapper = null;\n\n\t\tthis._register(this._nativeKeyboardLayoutService.onDidChangeKeyboardLayout(async () => {\n\t\t\tthis._keyboardMapper = null;\n\t\t\tthis._onDidChangeKeyboardLayout.fire();\n\t\t}));\n\n\t\tthis._register(_configurationService.onDidChangeConfiguration(async (e) => {\n\t\t\tif (e.affectsConfiguration('keyboard')) {\n\t\t\t\tthis._keyboardMapper = null;\n\t\t\t\tthis._onDidChangeKeyboardLayout.fire();\n\t\t\t}\n\t\t}));\n\t}\n\n\tpublic getRawKeyboardMapping(): IKeyboardMapping | null {\n\t\treturn this._nativeKeyboardLayoutService.getRawKeyboardMapping();\n\t}\n\n\tpublic getCurrentKeyboardLayout(): IKeyboardLayoutInfo | null {\n\t\treturn this._nativeKeyboardLayoutService.getCurrentKeyboardLayout();\n\t}\n\n\tpublic getAllKeyboardLayouts(): IKeyboardLayoutInfo[] {\n\t\treturn [];\n\t}\n\n\tpublic getKeyboardMapper(): IKeyboardMapper {\n\t\tconst config = readKeyboardConfig(this._configurationService);\n\t\tif (config.dispatch === DispatchConfig.KeyCode) {\n\t\t\t// Forcefully set to use keyCode\n\t\t\treturn new FallbackKeyboardMapper(config.mapAltGrToCtrlAlt, OS);\n\t\t}\n\t\tif (!this._keyboardMapper) {\n\t\t\tthis._keyboardMapper = new CachedKeyboardMapper(createKeyboardMapper(this.getCurrentKeyboardLayout(), this.getRawKeyboardMapping(), config.mapAltGrToCtrlAlt));\n\t\t}\n\t\treturn this._keyboardMapper;\n\t}\n\n\tpublic validateCurrentKeyboardMapping(keyboardEvent: IKeyboardEvent): void {\n\t\treturn;\n\t}\n}\n\nfunction createKeyboardMapper(layoutInfo: IKeyboardLayoutInfo | null, rawMapping: IKeyboardMapping | null, mapAltGrToCtrlAlt: boolean): IKeyboardMapper {\n\tconst _isUSStandard = isUSStandard(layoutInfo);\n\tif (OS === OperatingSystem.Windows) {\n\t\treturn new WindowsKeyboardMapper(_isUSStandard, <IWindowsKeyboardMapping>rawMapping, mapAltGrToCtrlAlt);\n\t}\n\n\tif (!rawMapping || Object.keys(rawMapping).length === 0) {\n\t\t// Looks like reading the mappings failed (most likely Mac + Japanese/Chinese keyboard layouts)\n\t\treturn new FallbackKeyboardMapper(mapAltGrToCtrlAlt, OS);\n\t}\n\n\tif (OS === OperatingSystem.Macintosh) {\n\t\tconst kbInfo = <IMacKeyboardLayoutInfo>layoutInfo;\n\t\tif (kbInfo.id === 'com.apple.keylayout.DVORAK-QWERTYCMD') {\n\t\t\t// Use keyCode based dispatching for DVORAK - QWERTY \u2318\n\t\t\treturn new FallbackKeyboardMapper(mapAltGrToCtrlAlt, OS);\n\t\t}\n\t}\n\n\treturn new MacLinuxKeyboardMapper(_isUSStandard, <IMacLinuxKeyboardMapping>rawMapping, mapAltGrToCtrlAlt, OS);\n}\n\nfunction isUSStandard(_kbInfo: IKeyboardLayoutInfo | null): boolean {\n\tif (!_kbInfo) {\n\t\treturn false;\n\t}\n\n\tif (OS === OperatingSystem.Linux) {\n\t\tconst kbInfo = <ILinuxKeyboardLayoutInfo>_kbInfo;\n\t\tconst layouts = kbInfo.layout.split(/,/g);\n\t\treturn (layouts[kbInfo.group] === 'us');\n\t}\n\n\tif (OS === OperatingSystem.Macintosh) {\n\t\tconst kbInfo = <IMacKeyboardLayoutInfo>_kbInfo;\n\t\treturn (kbInfo.id === 'com.apple.keylayout.US');\n\t}\n\n\tif (OS === OperatingSystem.Windows) {\n\t\tconst kbInfo = <IWindowsKeyboardLayoutInfo>_kbInfo;\n\t\treturn (kbInfo.name === '00000409');\n\t}\n\n\treturn false;\n}\n\nregisterSingleton(IKeyboardLayoutService, KeyboardLayoutService, InstantiationType.Delayed);\n"],
  "mappings": "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",
  "names": []
}
