var f=Object.defineProperty;var K=Object.getOwnPropertyDescriptor;var s=(r,e,o,a)=>{for(var n=a>1?void 0:a?K(e,o):e,d=r.length-1,p;d>=0;d--)(p=r[d])&&(n=(a?p(e,o,n):p(n))||n);return a&&n&&f(e,o,n),n},u=(r,e)=>(o,a)=>e(o,a,r);import{Emitter as c}from"../../../../../vs/base/common/event.js";import{Disposable as l}from"../../../../../vs/base/common/lifecycle.js";import{OperatingSystem as i,OS as t}from"../../../../../vs/base/common/platform.js";import{IConfigurationService as I}from"../../../../../vs/platform/configuration/common/configuration.js";import{InstantiationType as g,registerSingleton as M}from"../../../../../vs/platform/instantiation/common/extensions.js";import"../../../../../vs/platform/keybinding/common/keybinding.js";import{DispatchConfig as L,readKeyboardConfig as m}from"../../../../../vs/platform/keyboardLayout/common/keyboardConfig.js";import{IKeyboardLayoutService as h}from"../../../../../vs/platform/keyboardLayout/common/keyboardLayout.js";import{CachedKeyboardMapper as v}from"../../../../../vs/platform/keyboardLayout/common/keyboardMapper.js";import{FallbackKeyboardMapper as b}from"../../../../../vs/workbench/services/keybinding/common/fallbackKeyboardMapper.js";import{MacLinuxKeyboardMapper as C}from"../../../../../vs/workbench/services/keybinding/common/macLinuxKeyboardMapper.js";import{WindowsKeyboardMapper as _}from"../../../../../vs/workbench/services/keybinding/common/windowsKeyboardMapper.js";import{INativeKeyboardLayoutService as k}from"../../../../../vs/workbench/services/keybinding/electron-sandbox/nativeKeyboardLayoutService.js";let y=class extends l{constructor(o,a){super();this._nativeKeyboardLayoutService=o;this._configurationService=a;this._keyboardMapper=null,this._register(this._nativeKeyboardLayoutService.onDidChangeKeyboardLayout(async()=>{this._keyboardMapper=null,this._onDidChangeKeyboardLayout.fire()})),this._register(a.onDidChangeConfiguration(async n=>{n.affectsConfiguration("keyboard")&&(this._keyboardMapper=null,this._onDidChangeKeyboardLayout.fire())}))}_onDidChangeKeyboardLayout=this._register(new c);onDidChangeKeyboardLayout=this._onDidChangeKeyboardLayout.event;_keyboardMapper;getRawKeyboardMapping(){return this._nativeKeyboardLayoutService.getRawKeyboardMapping()}getCurrentKeyboardLayout(){return this._nativeKeyboardLayoutService.getCurrentKeyboardLayout()}getAllKeyboardLayouts(){return[]}getKeyboardMapper(){const o=m(this._configurationService);return o.dispatch===L.KeyCode?new b(o.mapAltGrToCtrlAlt,t):(this._keyboardMapper||(this._keyboardMapper=new v(S(this.getCurrentKeyboardLayout(),this.getRawKeyboardMapping(),o.mapAltGrToCtrlAlt))),this._keyboardMapper)}validateCurrentKeyboardMapping(o){}};y=s([u(0,k),u(1,I)],y);function S(r,e,o){const a=w(r);return t===i.Windows?new _(a,e,o):!e||Object.keys(e).length===0?new b(o,t):t===i.Macintosh&&r.id==="com.apple.keylayout.DVORAK-QWERTYCMD"?new b(o,t):new C(a,e,o,t)}function w(r){if(!r)return!1;if(t===i.Linux){const e=r;return e.layout.split(/,/g)[e.group]==="us"}return t===i.Macintosh?r.id==="com.apple.keylayout.US":t===i.Windows?r.name==="00000409":!1}M(h,y,g.Delayed);export{y as KeyboardLayoutService};
