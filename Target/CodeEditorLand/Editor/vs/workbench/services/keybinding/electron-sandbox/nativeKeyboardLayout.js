var f=Object.defineProperty;var K=Object.getOwnPropertyDescriptor;var s=(r,e,o,a)=>{for(var t=a>1?void 0:a?K(e,o):e,d=r.length-1,p;d>=0;d--)(p=r[d])&&(t=(a?p(e,o,t):p(t))||t);return a&&t&&f(e,o,t),t},u=(r,e)=>(o,a)=>e(o,a,r);import{Emitter as c}from"../../../../base/common/event.js";import{Disposable as l}from"../../../../base/common/lifecycle.js";import{OS as n,OperatingSystem as i}from"../../../../base/common/platform.js";import{IConfigurationService as I}from"../../../../platform/configuration/common/configuration.js";import{InstantiationType as g,registerSingleton as m}from"../../../../platform/instantiation/common/extensions.js";import{DispatchConfig as M,readKeyboardConfig as L}from"../../../../platform/keyboardLayout/common/keyboardConfig.js";import{IKeyboardLayoutService as h}from"../../../../platform/keyboardLayout/common/keyboardLayout.js";import{CachedKeyboardMapper as v}from"../../../../platform/keyboardLayout/common/keyboardMapper.js";import{FallbackKeyboardMapper as b}from"../common/fallbackKeyboardMapper.js";import{MacLinuxKeyboardMapper as k}from"../common/macLinuxKeyboardMapper.js";import{WindowsKeyboardMapper as C}from"../common/windowsKeyboardMapper.js";import{INativeKeyboardLayoutService as _}from"./nativeKeyboardLayoutService.js";let y=class extends l{constructor(o,a){super();this._nativeKeyboardLayoutService=o;this._configurationService=a;this._keyboardMapper=null,this._register(this._nativeKeyboardLayoutService.onDidChangeKeyboardLayout(async()=>{this._keyboardMapper=null,this._onDidChangeKeyboardLayout.fire()})),this._register(a.onDidChangeConfiguration(async t=>{t.affectsConfiguration("keyboard")&&(this._keyboardMapper=null,this._onDidChangeKeyboardLayout.fire())}))}_onDidChangeKeyboardLayout=this._register(new c);onDidChangeKeyboardLayout=this._onDidChangeKeyboardLayout.event;_keyboardMapper;getRawKeyboardMapping(){return this._nativeKeyboardLayoutService.getRawKeyboardMapping()}getCurrentKeyboardLayout(){return this._nativeKeyboardLayoutService.getCurrentKeyboardLayout()}getAllKeyboardLayouts(){return[]}getKeyboardMapper(){const o=L(this._configurationService);return o.dispatch===M.KeyCode?new b(o.mapAltGrToCtrlAlt,n):(this._keyboardMapper||(this._keyboardMapper=new v(S(this.getCurrentKeyboardLayout(),this.getRawKeyboardMapping(),o.mapAltGrToCtrlAlt))),this._keyboardMapper)}validateCurrentKeyboardMapping(o){}};y=s([u(0,_),u(1,I)],y);function S(r,e,o){const a=w(r);return n===i.Windows?new C(a,e,o):!e||Object.keys(e).length===0?new b(o,n):n===i.Macintosh&&r.id==="com.apple.keylayout.DVORAK-QWERTYCMD"?new b(o,n):new k(a,e,o,n)}function w(r){if(!r)return!1;if(n===i.Linux){const e=r;return e.layout.split(/,/g)[e.group]==="us"}return n===i.Macintosh?r.id==="com.apple.keylayout.US":n===i.Windows?r.name==="00000409":!1}m(h,y,g.Delayed);export{y as KeyboardLayoutService};
