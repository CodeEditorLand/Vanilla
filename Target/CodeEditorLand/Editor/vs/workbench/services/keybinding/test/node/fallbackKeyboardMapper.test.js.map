{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/keybinding/test/node/fallbackKeyboardMapper.test.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { KeyChord, KeyCode, KeyMod, ScanCode } from '../../../../../base/common/keyCodes.js';\nimport { KeyCodeChord, decodeKeybinding, ScanCodeChord, Keybinding } from '../../../../../base/common/keybindings.js';\nimport { OperatingSystem } from '../../../../../base/common/platform.js';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from '../../../../../base/test/common/utils.js';\nimport { FallbackKeyboardMapper } from '../../common/fallbackKeyboardMapper.js';\nimport { IResolvedKeybinding, assertResolveKeyboardEvent, assertResolveKeybinding } from './keyboardMapperTestUtils.js';\n\nsuite('keyboardMapper - MAC fallback', () => {\n\n\tensureNoDisposablesAreLeakedInTestSuite();\n\n\tconst mapper = new FallbackKeyboardMapper(false, OperatingSystem.Macintosh);\n\n\tfunction _assertResolveKeybinding(k: number, expected: IResolvedKeybinding[]): void {\n\t\tassertResolveKeybinding(mapper, decodeKeybinding(k, OperatingSystem.Macintosh)!, expected);\n\t}\n\n\ttest('resolveKeybinding Cmd+Z', () => {\n\t\t_assertResolveKeybinding(\n\t\t\tKeyMod.CtrlCmd | KeyCode.KeyZ,\n\t\t\t[{\n\t\t\t\tlabel: '\u2318Z',\n\t\t\t\tariaLabel: 'Command+Z',\n\t\t\t\telectronAccelerator: 'Cmd+Z',\n\t\t\t\tuserSettingsLabel: 'cmd+z',\n\t\t\t\tisWYSIWYG: true,\n\t\t\t\tisMultiChord: false,\n\t\t\t\tdispatchParts: ['meta+Z'],\n\t\t\t\tsingleModifierDispatchParts: [null],\n\t\t\t}]\n\t\t);\n\t});\n\n\ttest('resolveKeybinding Cmd+K Cmd+=', () => {\n\t\t_assertResolveKeybinding(\n\t\t\tKeyChord(KeyMod.CtrlCmd | KeyCode.KeyK, KeyMod.CtrlCmd | KeyCode.Equal),\n\t\t\t[{\n\t\t\t\tlabel: '\u2318K \u2318=',\n\t\t\t\tariaLabel: 'Command+K Command+=',\n\t\t\t\telectronAccelerator: null,\n\t\t\t\tuserSettingsLabel: 'cmd+k cmd+=',\n\t\t\t\tisWYSIWYG: true,\n\t\t\t\tisMultiChord: true,\n\t\t\t\tdispatchParts: ['meta+K', 'meta+='],\n\t\t\t\tsingleModifierDispatchParts: [null, null],\n\t\t\t}]\n\t\t);\n\t});\n\n\ttest('resolveKeyboardEvent Cmd+Z', () => {\n\t\tassertResolveKeyboardEvent(\n\t\t\tmapper,\n\t\t\t{\n\t\t\t\t_standardKeyboardEventBrand: true,\n\t\t\t\tctrlKey: false,\n\t\t\t\tshiftKey: false,\n\t\t\t\taltKey: false,\n\t\t\t\tmetaKey: true,\n\t\t\t\taltGraphKey: false,\n\t\t\t\tkeyCode: KeyCode.KeyZ,\n\t\t\t\tcode: null!\n\t\t\t},\n\t\t\t{\n\t\t\t\tlabel: '\u2318Z',\n\t\t\t\tariaLabel: 'Command+Z',\n\t\t\t\telectronAccelerator: 'Cmd+Z',\n\t\t\t\tuserSettingsLabel: 'cmd+z',\n\t\t\t\tisWYSIWYG: true,\n\t\t\t\tisMultiChord: false,\n\t\t\t\tdispatchParts: ['meta+Z'],\n\t\t\t\tsingleModifierDispatchParts: [null],\n\t\t\t}\n\t\t);\n\t});\n\n\ttest('resolveUserBinding Cmd+[Comma] Cmd+/', () => {\n\t\tassertResolveKeybinding(\n\t\t\tmapper, new Keybinding([\n\t\t\t\tnew ScanCodeChord(false, false, false, true, ScanCode.Comma),\n\t\t\t\tnew KeyCodeChord(false, false, false, true, KeyCode.Slash),\n\t\t\t]),\n\t\t\t[{\n\t\t\t\tlabel: '\u2318, \u2318/',\n\t\t\t\tariaLabel: 'Command+, Command+/',\n\t\t\t\telectronAccelerator: null,\n\t\t\t\tuserSettingsLabel: 'cmd+, cmd+/',\n\t\t\t\tisWYSIWYG: true,\n\t\t\t\tisMultiChord: true,\n\t\t\t\tdispatchParts: ['meta+,', 'meta+/'],\n\t\t\t\tsingleModifierDispatchParts: [null, null],\n\t\t\t}]\n\t\t);\n\t});\n\n\ttest('resolveKeyboardEvent Single Modifier Meta+', () => {\n\t\tassertResolveKeyboardEvent(\n\t\t\tmapper,\n\t\t\t{\n\t\t\t\t_standardKeyboardEventBrand: true,\n\t\t\t\tctrlKey: false,\n\t\t\t\tshiftKey: false,\n\t\t\t\taltKey: false,\n\t\t\t\tmetaKey: true,\n\t\t\t\taltGraphKey: false,\n\t\t\t\tkeyCode: KeyCode.Meta,\n\t\t\t\tcode: null!\n\t\t\t},\n\t\t\t{\n\t\t\t\tlabel: '\u2318',\n\t\t\t\tariaLabel: 'Command',\n\t\t\t\telectronAccelerator: null,\n\t\t\t\tuserSettingsLabel: 'cmd',\n\t\t\t\tisWYSIWYG: true,\n\t\t\t\tisMultiChord: false,\n\t\t\t\tdispatchParts: [null],\n\t\t\t\tsingleModifierDispatchParts: ['meta'],\n\t\t\t}\n\t\t);\n\t});\n\n\ttest('resolveKeyboardEvent Single Modifier Shift+', () => {\n\t\tassertResolveKeyboardEvent(\n\t\t\tmapper,\n\t\t\t{\n\t\t\t\t_standardKeyboardEventBrand: true,\n\t\t\t\tctrlKey: false,\n\t\t\t\tshiftKey: true,\n\t\t\t\taltKey: false,\n\t\t\t\tmetaKey: false,\n\t\t\t\taltGraphKey: false,\n\t\t\t\tkeyCode: KeyCode.Shift,\n\t\t\t\tcode: null!\n\t\t\t},\n\t\t\t{\n\t\t\t\tlabel: '\u21E7',\n\t\t\t\tariaLabel: 'Shift',\n\t\t\t\telectronAccelerator: null,\n\t\t\t\tuserSettingsLabel: 'shift',\n\t\t\t\tisWYSIWYG: true,\n\t\t\t\tisMultiChord: false,\n\t\t\t\tdispatchParts: [null],\n\t\t\t\tsingleModifierDispatchParts: ['shift'],\n\t\t\t}\n\t\t);\n\t});\n\n\ttest('resolveKeyboardEvent Single Modifier Alt+', () => {\n\t\tassertResolveKeyboardEvent(\n\t\t\tmapper,\n\t\t\t{\n\t\t\t\t_standardKeyboardEventBrand: true,\n\t\t\t\tctrlKey: false,\n\t\t\t\tshiftKey: false,\n\t\t\t\taltKey: true,\n\t\t\t\tmetaKey: false,\n\t\t\t\taltGraphKey: false,\n\t\t\t\tkeyCode: KeyCode.Alt,\n\t\t\t\tcode: null!\n\t\t\t},\n\t\t\t{\n\t\t\t\tlabel: '\u2325',\n\t\t\t\tariaLabel: 'Option',\n\t\t\t\telectronAccelerator: null,\n\t\t\t\tuserSettingsLabel: 'alt',\n\t\t\t\tisWYSIWYG: true,\n\t\t\t\tisMultiChord: false,\n\t\t\t\tdispatchParts: [null],\n\t\t\t\tsingleModifierDispatchParts: ['alt'],\n\t\t\t}\n\t\t);\n\t});\n\n\ttest('resolveKeyboardEvent Only Modifiers Ctrl+Shift+', () => {\n\t\tassertResolveKeyboardEvent(\n\t\t\tmapper,\n\t\t\t{\n\t\t\t\t_standardKeyboardEventBrand: true,\n\t\t\t\tctrlKey: true,\n\t\t\t\tshiftKey: true,\n\t\t\t\taltKey: false,\n\t\t\t\tmetaKey: false,\n\t\t\t\taltGraphKey: false,\n\t\t\t\tkeyCode: KeyCode.Shift,\n\t\t\t\tcode: null!\n\t\t\t},\n\t\t\t{\n\t\t\t\tlabel: '\u2303\u21E7',\n\t\t\t\tariaLabel: 'Control+Shift',\n\t\t\t\telectronAccelerator: null,\n\t\t\t\tuserSettingsLabel: 'ctrl+shift',\n\t\t\t\tisWYSIWYG: true,\n\t\t\t\tisMultiChord: false,\n\t\t\t\tdispatchParts: [null],\n\t\t\t\tsingleModifierDispatchParts: [null],\n\t\t\t}\n\t\t);\n\t});\n\n\ttest('resolveKeyboardEvent mapAltGrToCtrlAlt AltGr+Z', () => {\n\t\tconst mapper = new FallbackKeyboardMapper(true, OperatingSystem.Macintosh);\n\n\t\tassertResolveKeyboardEvent(\n\t\t\tmapper,\n\t\t\t{\n\t\t\t\t_standardKeyboardEventBrand: true,\n\t\t\t\tctrlKey: false,\n\t\t\t\tshiftKey: false,\n\t\t\t\taltKey: false,\n\t\t\t\tmetaKey: false,\n\t\t\t\taltGraphKey: true,\n\t\t\t\tkeyCode: KeyCode.KeyZ,\n\t\t\t\tcode: null!\n\t\t\t},\n\t\t\t{\n\t\t\t\tlabel: '\u2303\u2325Z',\n\t\t\t\tariaLabel: 'Control+Option+Z',\n\t\t\t\telectronAccelerator: 'Ctrl+Alt+Z',\n\t\t\t\tuserSettingsLabel: 'ctrl+alt+z',\n\t\t\t\tisWYSIWYG: true,\n\t\t\t\tisMultiChord: false,\n\t\t\t\tdispatchParts: ['ctrl+alt+Z'],\n\t\t\t\tsingleModifierDispatchParts: [null],\n\t\t\t}\n\t\t);\n\t});\n});\n\nsuite('keyboardMapper - LINUX fallback', () => {\n\n\tensureNoDisposablesAreLeakedInTestSuite();\n\n\tconst mapper = new FallbackKeyboardMapper(false, OperatingSystem.Linux);\n\n\tfunction _assertResolveKeybinding(k: number, expected: IResolvedKeybinding[]): void {\n\t\tassertResolveKeybinding(mapper, decodeKeybinding(k, OperatingSystem.Linux)!, expected);\n\t}\n\n\ttest('resolveKeybinding Ctrl+Z', () => {\n\t\t_assertResolveKeybinding(\n\t\t\tKeyMod.CtrlCmd | KeyCode.KeyZ,\n\t\t\t[{\n\t\t\t\tlabel: 'Ctrl+Z',\n\t\t\t\tariaLabel: 'Control+Z',\n\t\t\t\telectronAccelerator: 'Ctrl+Z',\n\t\t\t\tuserSettingsLabel: 'ctrl+z',\n\t\t\t\tisWYSIWYG: true,\n\t\t\t\tisMultiChord: false,\n\t\t\t\tdispatchParts: ['ctrl+Z'],\n\t\t\t\tsingleModifierDispatchParts: [null],\n\t\t\t}]\n\t\t);\n\t});\n\n\ttest('resolveKeybinding Ctrl+K Ctrl+=', () => {\n\t\t_assertResolveKeybinding(\n\t\t\tKeyChord(KeyMod.CtrlCmd | KeyCode.KeyK, KeyMod.CtrlCmd | KeyCode.Equal),\n\t\t\t[{\n\t\t\t\tlabel: 'Ctrl+K Ctrl+=',\n\t\t\t\tariaLabel: 'Control+K Control+=',\n\t\t\t\telectronAccelerator: null,\n\t\t\t\tuserSettingsLabel: 'ctrl+k ctrl+=',\n\t\t\t\tisWYSIWYG: true,\n\t\t\t\tisMultiChord: true,\n\t\t\t\tdispatchParts: ['ctrl+K', 'ctrl+='],\n\t\t\t\tsingleModifierDispatchParts: [null, null],\n\t\t\t}]\n\t\t);\n\t});\n\n\ttest('resolveKeyboardEvent Ctrl+Z', () => {\n\t\tassertResolveKeyboardEvent(\n\t\t\tmapper,\n\t\t\t{\n\t\t\t\t_standardKeyboardEventBrand: true,\n\t\t\t\tctrlKey: true,\n\t\t\t\tshiftKey: false,\n\t\t\t\taltKey: false,\n\t\t\t\tmetaKey: false,\n\t\t\t\taltGraphKey: false,\n\t\t\t\tkeyCode: KeyCode.KeyZ,\n\t\t\t\tcode: null!\n\t\t\t},\n\t\t\t{\n\t\t\t\tlabel: 'Ctrl+Z',\n\t\t\t\tariaLabel: 'Control+Z',\n\t\t\t\telectronAccelerator: 'Ctrl+Z',\n\t\t\t\tuserSettingsLabel: 'ctrl+z',\n\t\t\t\tisWYSIWYG: true,\n\t\t\t\tisMultiChord: false,\n\t\t\t\tdispatchParts: ['ctrl+Z'],\n\t\t\t\tsingleModifierDispatchParts: [null],\n\t\t\t}\n\t\t);\n\t});\n\n\ttest('resolveUserBinding Ctrl+[Comma] Ctrl+/', () => {\n\t\tassertResolveKeybinding(\n\t\t\tmapper, new Keybinding([\n\t\t\t\tnew ScanCodeChord(true, false, false, false, ScanCode.Comma),\n\t\t\t\tnew KeyCodeChord(true, false, false, false, KeyCode.Slash),\n\t\t\t]),\n\t\t\t[{\n\t\t\t\tlabel: 'Ctrl+, Ctrl+/',\n\t\t\t\tariaLabel: 'Control+, Control+/',\n\t\t\t\telectronAccelerator: null,\n\t\t\t\tuserSettingsLabel: 'ctrl+, ctrl+/',\n\t\t\t\tisWYSIWYG: true,\n\t\t\t\tisMultiChord: true,\n\t\t\t\tdispatchParts: ['ctrl+,', 'ctrl+/'],\n\t\t\t\tsingleModifierDispatchParts: [null, null],\n\t\t\t}]\n\t\t);\n\t});\n\n\ttest('resolveUserBinding Ctrl+[Comma]', () => {\n\t\tassertResolveKeybinding(\n\t\t\tmapper, new Keybinding([\n\t\t\t\tnew ScanCodeChord(true, false, false, false, ScanCode.Comma),\n\t\t\t]),\n\t\t\t[{\n\t\t\t\tlabel: 'Ctrl+,',\n\t\t\t\tariaLabel: 'Control+,',\n\t\t\t\telectronAccelerator: 'Ctrl+,',\n\t\t\t\tuserSettingsLabel: 'ctrl+,',\n\t\t\t\tisWYSIWYG: true,\n\t\t\t\tisMultiChord: false,\n\t\t\t\tdispatchParts: ['ctrl+,'],\n\t\t\t\tsingleModifierDispatchParts: [null],\n\t\t\t}]\n\t\t);\n\t});\n\n\ttest('resolveKeyboardEvent Single Modifier Ctrl+', () => {\n\t\tassertResolveKeyboardEvent(\n\t\t\tmapper,\n\t\t\t{\n\t\t\t\t_standardKeyboardEventBrand: true,\n\t\t\t\tctrlKey: true,\n\t\t\t\tshiftKey: false,\n\t\t\t\taltKey: false,\n\t\t\t\tmetaKey: false,\n\t\t\t\taltGraphKey: false,\n\t\t\t\tkeyCode: KeyCode.Ctrl,\n\t\t\t\tcode: null!\n\t\t\t},\n\t\t\t{\n\t\t\t\tlabel: 'Ctrl',\n\t\t\t\tariaLabel: 'Control',\n\t\t\t\telectronAccelerator: null,\n\t\t\t\tuserSettingsLabel: 'ctrl',\n\t\t\t\tisWYSIWYG: true,\n\t\t\t\tisMultiChord: false,\n\t\t\t\tdispatchParts: [null],\n\t\t\t\tsingleModifierDispatchParts: ['ctrl'],\n\t\t\t}\n\t\t);\n\t});\n\n\ttest('resolveKeyboardEvent mapAltGrToCtrlAlt AltGr+Z', () => {\n\t\tconst mapper = new FallbackKeyboardMapper(true, OperatingSystem.Linux);\n\n\t\tassertResolveKeyboardEvent(\n\t\t\tmapper,\n\t\t\t{\n\t\t\t\t_standardKeyboardEventBrand: true,\n\t\t\t\tctrlKey: false,\n\t\t\t\tshiftKey: false,\n\t\t\t\taltKey: false,\n\t\t\t\tmetaKey: false,\n\t\t\t\taltGraphKey: true,\n\t\t\t\tkeyCode: KeyCode.KeyZ,\n\t\t\t\tcode: null!\n\t\t\t},\n\t\t\t{\n\t\t\t\tlabel: 'Ctrl+Alt+Z',\n\t\t\t\tariaLabel: 'Control+Alt+Z',\n\t\t\t\telectronAccelerator: 'Ctrl+Alt+Z',\n\t\t\t\tuserSettingsLabel: 'ctrl+alt+z',\n\t\t\t\tisWYSIWYG: true,\n\t\t\t\tisMultiChord: false,\n\t\t\t\tdispatchParts: ['ctrl+alt+Z'],\n\t\t\t\tsingleModifierDispatchParts: [null],\n\t\t\t}\n\t\t);\n\t});\n});\n"],
  "mappings": "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",
  "names": ["mapper"]
}
