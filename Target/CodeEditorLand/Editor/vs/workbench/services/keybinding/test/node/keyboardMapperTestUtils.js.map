{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/keybinding/test/node/keyboardMapperTestUtils.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as fs from 'fs';\nimport assert from 'assert';\nimport * as path from '../../../../../base/common/path.js';\nimport { SingleModifierChord, ResolvedKeybinding, Keybinding } from '../../../../../base/common/keybindings.js';\nimport { Promises } from '../../../../../base/node/pfs.js';\nimport { IKeyboardEvent } from '../../../../../platform/keybinding/common/keybinding.js';\nimport { IKeyboardMapper } from '../../../../../platform/keyboardLayout/common/keyboardMapper.js';\nimport { FileAccess } from '../../../../../base/common/network.js';\n\nexport interface IResolvedKeybinding {\n\tlabel: string | null;\n\tariaLabel: string | null;\n\telectronAccelerator: string | null;\n\tuserSettingsLabel: string | null;\n\tisWYSIWYG: boolean;\n\tisMultiChord: boolean;\n\tdispatchParts: (string | null)[];\n\tsingleModifierDispatchParts: (SingleModifierChord | null)[];\n}\n\nfunction toIResolvedKeybinding(kb: ResolvedKeybinding): IResolvedKeybinding {\n\treturn {\n\t\tlabel: kb.getLabel(),\n\t\tariaLabel: kb.getAriaLabel(),\n\t\telectronAccelerator: kb.getElectronAccelerator(),\n\t\tuserSettingsLabel: kb.getUserSettingsLabel(),\n\t\tisWYSIWYG: kb.isWYSIWYG(),\n\t\tisMultiChord: kb.hasMultipleChords(),\n\t\tdispatchParts: kb.getDispatchChords(),\n\t\tsingleModifierDispatchParts: kb.getSingleModifierDispatchChords()\n\t};\n}\n\nexport function assertResolveKeyboardEvent(mapper: IKeyboardMapper, keyboardEvent: IKeyboardEvent, expected: IResolvedKeybinding): void {\n\tconst actual = toIResolvedKeybinding(mapper.resolveKeyboardEvent(keyboardEvent));\n\tassert.deepStrictEqual(actual, expected);\n}\n\nexport function assertResolveKeybinding(mapper: IKeyboardMapper, keybinding: Keybinding, expected: IResolvedKeybinding[]): void {\n\tconst actual: IResolvedKeybinding[] = mapper.resolveKeybinding(keybinding).map(toIResolvedKeybinding);\n\tassert.deepStrictEqual(actual, expected);\n}\n\nexport function readRawMapping<T>(file: string): Promise<T> {\n\treturn fs.promises.readFile(FileAccess.asFileUri(`vs/workbench/services/keybinding/test/node/${file}.js`).fsPath).then((buff) => {\n\t\tconst contents = buff.toString();\n\t\tconst func = new Function('define', contents);// CodeQL [SM01632] This is used in tests and we read the files as JS to avoid slowing down TS compilation\n\t\tlet rawMappings: T | null = null;\n\t\tfunc(function (value: T) {\n\t\t\trawMappings = value;\n\t\t});\n\t\treturn rawMappings!;\n\t});\n}\n\nexport function assertMapping(writeFileIfDifferent: boolean, mapper: IKeyboardMapper, file: string): Promise<void> {\n\tconst filePath = path.normalize(FileAccess.asFileUri(`vs/workbench/services/keybinding/test/node/${file}`).fsPath);\n\n\treturn fs.promises.readFile(filePath).then((buff) => {\n\t\tconst expected = buff.toString().replace(/\\r\\n/g, '\\n');\n\t\tconst actual = mapper.dumpDebugInfo().replace(/\\r\\n/g, '\\n');\n\t\tif (actual !== expected && writeFileIfDifferent) {\n\t\t\tconst destPath = filePath.replace(/[\\/\\\\]out[\\/\\\\]vs[\\/\\\\]workbench/, '/src/vs/workbench');\n\t\t\tPromises.writeFile(destPath, actual);\n\t\t}\n\t\tassert.deepStrictEqual(actual, expected);\n\t});\n}\n"],
  "mappings": ";;AAKA,YAAY,QAAQ;AACpB,OAAO,YAAY;AACnB,YAAY,UAAU;AACtB,SAAS,qBAAqB,oBAAoB,kBAAkB;AACpE,SAAS,gBAAgB;AACzB,SAAS,sBAAsB;AAC/B,SAAS,uBAAuB;AAChC,SAAS,kBAAkB;AAa3B,SAAS,sBAAsB,IAA6C;AAC3E,SAAO;AAAA,IACN,OAAO,GAAG,SAAS;AAAA,IACnB,WAAW,GAAG,aAAa;AAAA,IAC3B,qBAAqB,GAAG,uBAAuB;AAAA,IAC/C,mBAAmB,GAAG,qBAAqB;AAAA,IAC3C,WAAW,GAAG,UAAU;AAAA,IACxB,cAAc,GAAG,kBAAkB;AAAA,IACnC,eAAe,GAAG,kBAAkB;AAAA,IACpC,6BAA6B,GAAG,gCAAgC;AAAA,EACjE;AACD;AAXS;AAaF,SAAS,2BAA2B,QAAyB,eAA+B,UAAqC;AACvI,QAAM,SAAS,sBAAsB,OAAO,qBAAqB,aAAa,CAAC;AAC/E,SAAO,gBAAgB,QAAQ,QAAQ;AACxC;AAHgB;AAKT,SAAS,wBAAwB,QAAyB,YAAwB,UAAuC;AAC/H,QAAM,SAAgC,OAAO,kBAAkB,UAAU,EAAE,IAAI,qBAAqB;AACpG,SAAO,gBAAgB,QAAQ,QAAQ;AACxC;AAHgB;AAKT,SAAS,eAAkB,MAA0B;AAC3D,SAAO,GAAG,SAAS,SAAS,WAAW,UAAU,8CAA8C,IAAI,KAAK,EAAE,MAAM,EAAE,KAAK,CAAC,SAAS;AAChI,UAAM,WAAW,KAAK,SAAS;AAC/B,UAAM,OAAO,IAAI,SAAS,UAAU,QAAQ;AAC5C,QAAI,cAAwB;AAC5B,SAAK,SAAU,OAAU;AACxB,oBAAc;AAAA,IACf,CAAC;AACD,WAAO;AAAA,EACR,CAAC;AACF;AAVgB;AAYT,SAAS,cAAc,sBAA+B,QAAyB,MAA6B;AAClH,QAAM,WAAW,KAAK,UAAU,WAAW,UAAU,8CAA8C,IAAI,EAAE,EAAE,MAAM;AAEjH,SAAO,GAAG,SAAS,SAAS,QAAQ,EAAE,KAAK,CAAC,SAAS;AACpD,UAAM,WAAW,KAAK,SAAS,EAAE,QAAQ,SAAS,IAAI;AACtD,UAAM,SAAS,OAAO,cAAc,EAAE,QAAQ,SAAS,IAAI;AAC3D,QAAI,WAAW,YAAY,sBAAsB;AAChD,YAAM,WAAW,SAAS,QAAQ,oCAAoC,mBAAmB;AACzF,eAAS,UAAU,UAAU,MAAM;AAAA,IACpC;AACA,WAAO,gBAAgB,QAAQ,QAAQ;AAAA,EACxC,CAAC;AACF;AAZgB;",
  "names": []
}
