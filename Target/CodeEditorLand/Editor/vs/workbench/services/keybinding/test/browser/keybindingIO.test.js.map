{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/keybinding/test/browser/keybindingIO.test.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport assert from 'assert';\nimport { KeyChord, KeyCode, KeyMod, ScanCode } from '../../../../../base/common/keyCodes.js';\nimport { KeyCodeChord, decodeKeybinding, ScanCodeChord, Keybinding } from '../../../../../base/common/keybindings.js';\nimport { KeybindingParser } from '../../../../../base/common/keybindingParser.js';\nimport { OperatingSystem } from '../../../../../base/common/platform.js';\nimport { KeybindingIO } from '../../common/keybindingIO.js';\nimport { createUSLayoutResolvedKeybinding } from '../../../../../platform/keybinding/test/common/keybindingsTestUtils.js';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from '../../../../../base/test/common/utils.js';\n\nsuite('keybindingIO', () => {\n\tensureNoDisposablesAreLeakedInTestSuite();\n\n\ttest('serialize/deserialize', () => {\n\n\t\tfunction testOneSerialization(keybinding: number, expected: string, msg: string, OS: OperatingSystem): void {\n\t\t\tconst usLayoutResolvedKeybinding = createUSLayoutResolvedKeybinding(keybinding, OS)!;\n\t\t\tconst actualSerialized = usLayoutResolvedKeybinding.getUserSettingsLabel();\n\t\t\tassert.strictEqual(actualSerialized, expected, expected + ' - ' + msg);\n\t\t}\n\t\tfunction testSerialization(keybinding: number, expectedWin: string, expectedMac: string, expectedLinux: string): void {\n\t\t\ttestOneSerialization(keybinding, expectedWin, 'win', OperatingSystem.Windows);\n\t\t\ttestOneSerialization(keybinding, expectedMac, 'mac', OperatingSystem.Macintosh);\n\t\t\ttestOneSerialization(keybinding, expectedLinux, 'linux', OperatingSystem.Linux);\n\t\t}\n\n\t\tfunction testOneDeserialization(keybinding: string, _expected: number, msg: string, OS: OperatingSystem): void {\n\t\t\tconst actualDeserialized = KeybindingParser.parseKeybinding(keybinding);\n\t\t\tconst expected = decodeKeybinding(_expected, OS);\n\t\t\tassert.deepStrictEqual(actualDeserialized, expected, keybinding + ' - ' + msg);\n\t\t}\n\t\tfunction testDeserialization(inWin: string, inMac: string, inLinux: string, expected: number): void {\n\t\t\ttestOneDeserialization(inWin, expected, 'win', OperatingSystem.Windows);\n\t\t\ttestOneDeserialization(inMac, expected, 'mac', OperatingSystem.Macintosh);\n\t\t\ttestOneDeserialization(inLinux, expected, 'linux', OperatingSystem.Linux);\n\t\t}\n\n\t\tfunction testRoundtrip(keybinding: number, expectedWin: string, expectedMac: string, expectedLinux: string): void {\n\t\t\ttestSerialization(keybinding, expectedWin, expectedMac, expectedLinux);\n\t\t\ttestDeserialization(expectedWin, expectedMac, expectedLinux, keybinding);\n\t\t}\n\n\t\ttestRoundtrip(KeyCode.Digit0, '0', '0', '0');\n\t\ttestRoundtrip(KeyCode.KeyA, 'a', 'a', 'a');\n\t\ttestRoundtrip(KeyCode.UpArrow, 'up', 'up', 'up');\n\t\ttestRoundtrip(KeyCode.RightArrow, 'right', 'right', 'right');\n\t\ttestRoundtrip(KeyCode.DownArrow, 'down', 'down', 'down');\n\t\ttestRoundtrip(KeyCode.LeftArrow, 'left', 'left', 'left');\n\n\t\t// one modifier\n\t\ttestRoundtrip(KeyMod.Alt | KeyCode.KeyA, 'alt+a', 'alt+a', 'alt+a');\n\t\ttestRoundtrip(KeyMod.CtrlCmd | KeyCode.KeyA, 'ctrl+a', 'cmd+a', 'ctrl+a');\n\t\ttestRoundtrip(KeyMod.Shift | KeyCode.KeyA, 'shift+a', 'shift+a', 'shift+a');\n\t\ttestRoundtrip(KeyMod.WinCtrl | KeyCode.KeyA, 'win+a', 'ctrl+a', 'meta+a');\n\n\t\t// two modifiers\n\t\ttestRoundtrip(KeyMod.CtrlCmd | KeyMod.Alt | KeyCode.KeyA, 'ctrl+alt+a', 'alt+cmd+a', 'ctrl+alt+a');\n\t\ttestRoundtrip(KeyMod.CtrlCmd | KeyMod.Shift | KeyCode.KeyA, 'ctrl+shift+a', 'shift+cmd+a', 'ctrl+shift+a');\n\t\ttestRoundtrip(KeyMod.CtrlCmd | KeyMod.WinCtrl | KeyCode.KeyA, 'ctrl+win+a', 'ctrl+cmd+a', 'ctrl+meta+a');\n\t\ttestRoundtrip(KeyMod.Shift | KeyMod.Alt | KeyCode.KeyA, 'shift+alt+a', 'shift+alt+a', 'shift+alt+a');\n\t\ttestRoundtrip(KeyMod.Shift | KeyMod.WinCtrl | KeyCode.KeyA, 'shift+win+a', 'ctrl+shift+a', 'shift+meta+a');\n\t\ttestRoundtrip(KeyMod.Alt | KeyMod.WinCtrl | KeyCode.KeyA, 'alt+win+a', 'ctrl+alt+a', 'alt+meta+a');\n\n\t\t// three modifiers\n\t\ttestRoundtrip(KeyMod.CtrlCmd | KeyMod.Shift | KeyMod.Alt | KeyCode.KeyA, 'ctrl+shift+alt+a', 'shift+alt+cmd+a', 'ctrl+shift+alt+a');\n\t\ttestRoundtrip(KeyMod.CtrlCmd | KeyMod.Shift | KeyMod.WinCtrl | KeyCode.KeyA, 'ctrl+shift+win+a', 'ctrl+shift+cmd+a', 'ctrl+shift+meta+a');\n\t\ttestRoundtrip(KeyMod.Shift | KeyMod.Alt | KeyMod.WinCtrl | KeyCode.KeyA, 'shift+alt+win+a', 'ctrl+shift+alt+a', 'shift+alt+meta+a');\n\n\t\t// all modifiers\n\t\ttestRoundtrip(KeyMod.CtrlCmd | KeyMod.Shift | KeyMod.Alt | KeyMod.WinCtrl | KeyCode.KeyA, 'ctrl+shift+alt+win+a', 'ctrl+shift+alt+cmd+a', 'ctrl+shift+alt+meta+a');\n\n\t\t// chords\n\t\ttestRoundtrip(KeyChord(KeyMod.CtrlCmd | KeyCode.KeyA, KeyMod.CtrlCmd | KeyCode.KeyA), 'ctrl+a ctrl+a', 'cmd+a cmd+a', 'ctrl+a ctrl+a');\n\t\ttestRoundtrip(KeyChord(KeyMod.CtrlCmd | KeyCode.UpArrow, KeyMod.CtrlCmd | KeyCode.UpArrow), 'ctrl+up ctrl+up', 'cmd+up cmd+up', 'ctrl+up ctrl+up');\n\n\t\t// OEM keys\n\t\ttestRoundtrip(KeyCode.Semicolon, ';', ';', ';');\n\t\ttestRoundtrip(KeyCode.Equal, '=', '=', '=');\n\t\ttestRoundtrip(KeyCode.Comma, ',', ',', ',');\n\t\ttestRoundtrip(KeyCode.Minus, '-', '-', '-');\n\t\ttestRoundtrip(KeyCode.Period, '.', '.', '.');\n\t\ttestRoundtrip(KeyCode.Slash, '/', '/', '/');\n\t\ttestRoundtrip(KeyCode.Backquote, '`', '`', '`');\n\t\ttestRoundtrip(KeyCode.ABNT_C1, 'abnt_c1', 'abnt_c1', 'abnt_c1');\n\t\ttestRoundtrip(KeyCode.ABNT_C2, 'abnt_c2', 'abnt_c2', 'abnt_c2');\n\t\ttestRoundtrip(KeyCode.BracketLeft, '[', '[', '[');\n\t\ttestRoundtrip(KeyCode.Backslash, '\\\\', '\\\\', '\\\\');\n\t\ttestRoundtrip(KeyCode.BracketRight, ']', ']', ']');\n\t\ttestRoundtrip(KeyCode.Quote, '\\'', '\\'', '\\'');\n\t\ttestRoundtrip(KeyCode.OEM_8, 'oem_8', 'oem_8', 'oem_8');\n\t\ttestRoundtrip(KeyCode.IntlBackslash, 'oem_102', 'oem_102', 'oem_102');\n\n\t\t// OEM aliases\n\t\ttestDeserialization('OEM_1', 'OEM_1', 'OEM_1', KeyCode.Semicolon);\n\t\ttestDeserialization('OEM_PLUS', 'OEM_PLUS', 'OEM_PLUS', KeyCode.Equal);\n\t\ttestDeserialization('OEM_COMMA', 'OEM_COMMA', 'OEM_COMMA', KeyCode.Comma);\n\t\ttestDeserialization('OEM_MINUS', 'OEM_MINUS', 'OEM_MINUS', KeyCode.Minus);\n\t\ttestDeserialization('OEM_PERIOD', 'OEM_PERIOD', 'OEM_PERIOD', KeyCode.Period);\n\t\ttestDeserialization('OEM_2', 'OEM_2', 'OEM_2', KeyCode.Slash);\n\t\ttestDeserialization('OEM_3', 'OEM_3', 'OEM_3', KeyCode.Backquote);\n\t\ttestDeserialization('ABNT_C1', 'ABNT_C1', 'ABNT_C1', KeyCode.ABNT_C1);\n\t\ttestDeserialization('ABNT_C2', 'ABNT_C2', 'ABNT_C2', KeyCode.ABNT_C2);\n\t\ttestDeserialization('OEM_4', 'OEM_4', 'OEM_4', KeyCode.BracketLeft);\n\t\ttestDeserialization('OEM_5', 'OEM_5', 'OEM_5', KeyCode.Backslash);\n\t\ttestDeserialization('OEM_6', 'OEM_6', 'OEM_6', KeyCode.BracketRight);\n\t\ttestDeserialization('OEM_7', 'OEM_7', 'OEM_7', KeyCode.Quote);\n\t\ttestDeserialization('OEM_8', 'OEM_8', 'OEM_8', KeyCode.OEM_8);\n\t\ttestDeserialization('OEM_102', 'OEM_102', 'OEM_102', KeyCode.IntlBackslash);\n\n\t\t// accepts '-' as separator\n\t\ttestDeserialization('ctrl-shift-alt-win-a', 'ctrl-shift-alt-cmd-a', 'ctrl-shift-alt-meta-a', KeyMod.CtrlCmd | KeyMod.Shift | KeyMod.Alt | KeyMod.WinCtrl | KeyCode.KeyA);\n\n\t\t// various input mistakes\n\t\ttestDeserialization(' ctrl-shift-alt-win-A ', ' shift-alt-cmd-Ctrl-A ', ' ctrl-shift-alt-META-A ', KeyMod.CtrlCmd | KeyMod.Shift | KeyMod.Alt | KeyMod.WinCtrl | KeyCode.KeyA);\n\t});\n\n\ttest('deserialize scan codes', () => {\n\t\tassert.deepStrictEqual(\n\t\t\tKeybindingParser.parseKeybinding('ctrl+shift+[comma] ctrl+/'),\n\t\t\tnew Keybinding([new ScanCodeChord(true, true, false, false, ScanCode.Comma), new KeyCodeChord(true, false, false, false, KeyCode.Slash)])\n\t\t);\n\t});\n\n\ttest('issue #10452 - invalid command', () => {\n\t\tconst strJSON = `[{ \"key\": \"ctrl+k ctrl+f\", \"command\": [\"firstcommand\", \"seccondcommand\"] }]`;\n\t\tconst userKeybinding = <Object>JSON.parse(strJSON)[0];\n\t\tconst keybindingItem = KeybindingIO.readUserKeybindingItem(userKeybinding);\n\t\tassert.strictEqual(keybindingItem.command, null);\n\t});\n\n\ttest('issue #10452 - invalid when', () => {\n\t\tconst strJSON = `[{ \"key\": \"ctrl+k ctrl+f\", \"command\": \"firstcommand\", \"when\": [] }]`;\n\t\tconst userKeybinding = <Object>JSON.parse(strJSON)[0];\n\t\tconst keybindingItem = KeybindingIO.readUserKeybindingItem(userKeybinding);\n\t\tassert.strictEqual(keybindingItem.when, undefined);\n\t});\n\n\ttest('issue #10452 - invalid key', () => {\n\t\tconst strJSON = `[{ \"key\": [], \"command\": \"firstcommand\" }]`;\n\t\tconst userKeybinding = <Object>JSON.parse(strJSON)[0];\n\t\tconst keybindingItem = KeybindingIO.readUserKeybindingItem(userKeybinding);\n\t\tassert.deepStrictEqual(keybindingItem.keybinding, null);\n\t});\n\n\ttest('issue #10452 - invalid key 2', () => {\n\t\tconst strJSON = `[{ \"key\": \"\", \"command\": \"firstcommand\" }]`;\n\t\tconst userKeybinding = <Object>JSON.parse(strJSON)[0];\n\t\tconst keybindingItem = KeybindingIO.readUserKeybindingItem(userKeybinding);\n\t\tassert.deepStrictEqual(keybindingItem.keybinding, null);\n\t});\n\n\ttest('test commands args', () => {\n\t\tconst strJSON = `[{ \"key\": \"ctrl+k ctrl+f\", \"command\": \"firstcommand\", \"when\": [], \"args\": { \"text\": \"theText\" } }]`;\n\t\tconst userKeybinding = <Object>JSON.parse(strJSON)[0];\n\t\tconst keybindingItem = KeybindingIO.readUserKeybindingItem(userKeybinding);\n\t\tassert.strictEqual(keybindingItem.commandArgs.text, 'theText');\n\t});\n});\n"],
  "mappings": "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",
  "names": []
}
