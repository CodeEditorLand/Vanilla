import*as l from"fs";import a from"assert";import*as g from"../../../../../base/common/path.js";import"../../../../../base/common/keybindings.js";import{Promises as u}from"../../../../../base/node/pfs.js";import"../../../../../platform/keybinding/common/keybinding.js";import"../../../../../platform/keyboardLayout/common/keyboardMapper.js";import{FileAccess as d}from"../../../../../base/common/network.js";function c(e){return{label:e.getLabel(),ariaLabel:e.getAriaLabel(),electronAccelerator:e.getElectronAccelerator(),userSettingsLabel:e.getUserSettingsLabel(),isWYSIWYG:e.isWYSIWYG(),isMultiChord:e.hasMultipleChords(),dispatchParts:e.getDispatchChords(),singleModifierDispatchParts:e.getSingleModifierDispatchChords()}}function R(e,r,n){const i=c(e.resolveKeyboardEvent(r));a.deepStrictEqual(i,n)}function w(e,r,n){const i=e.resolveKeybinding(r).map(c);a.deepStrictEqual(i,n)}function E(e){return l.promises.readFile(d.asFileUri(`vs/workbench/services/keybinding/test/node/${e}.js`).fsPath).then(r=>{const n=r.toString(),i=new Function("define",n);let t=null;return i(function(o){t=o}),t})}function C(e,r,n){const i=g.normalize(d.asFileUri(`vs/workbench/services/keybinding/test/node/${n}`).fsPath);return l.promises.readFile(i).then(t=>{const o=t.toString().replace(/\r\n/g,`
`),s=r.dumpDebugInfo().replace(/\r\n/g,`
`);if(s!==o&&e){const p=i.replace(/[\/\\]out[\/\\]vs[\/\\]workbench/,"/src/vs/workbench");u.writeFile(p,s)}a.deepStrictEqual(s,o)})}export{C as assertMapping,w as assertResolveKeybinding,R as assertResolveKeyboardEvent,E as readRawMapping};
