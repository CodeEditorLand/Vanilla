{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/keybinding/test/node/macLinuxKeyboardMapper.test.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport assert from 'assert';\nimport { KeyChord, KeyCode, KeyMod, ScanCode, ScanCodeUtils } from '../../../../../base/common/keyCodes.js';\nimport { KeyCodeChord, decodeKeybinding, createSimpleKeybinding, ScanCodeChord, Keybinding } from '../../../../../base/common/keybindings.js';\nimport { UserSettingsLabelProvider } from '../../../../../base/common/keybindingLabels.js';\nimport { OperatingSystem } from '../../../../../base/common/platform.js';\nimport { USLayoutResolvedKeybinding } from '../../../../../platform/keybinding/common/usLayoutResolvedKeybinding.js';\nimport { MacLinuxKeyboardMapper } from '../../common/macLinuxKeyboardMapper.js';\nimport { IResolvedKeybinding, assertMapping, assertResolveKeyboardEvent, assertResolveKeybinding, readRawMapping } from './keyboardMapperTestUtils.js';\nimport { IMacLinuxKeyboardMapping } from '../../../../../platform/keyboardLayout/common/keyboardLayout.js';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from '../../../../../base/test/common/utils.js';\n\nconst WRITE_FILE_IF_DIFFERENT = false;\n\nasync function createKeyboardMapper(isUSStandard: boolean, file: string, mapAltGrToCtrlAlt: boolean, OS: OperatingSystem): Promise<MacLinuxKeyboardMapper> {\n\tconst rawMappings = await readRawMapping<IMacLinuxKeyboardMapping>(file);\n\treturn new MacLinuxKeyboardMapper(isUSStandard, rawMappings, mapAltGrToCtrlAlt, OS);\n}\n\nsuite('keyboardMapper - MAC de_ch', () => {\n\n\tensureNoDisposablesAreLeakedInTestSuite();\n\n\tlet mapper: MacLinuxKeyboardMapper;\n\n\tsuiteSetup(async () => {\n\t\tconst _mapper = await createKeyboardMapper(false, 'mac_de_ch', false, OperatingSystem.Macintosh);\n\t\tmapper = _mapper;\n\t});\n\n\ttest('mapping', () => {\n\t\treturn assertMapping(WRITE_FILE_IF_DIFFERENT, mapper, 'mac_de_ch.txt');\n\t});\n\n\tfunction assertKeybindingTranslation(kb: number, expected: string | string[]): void {\n\t\t_assertKeybindingTranslation(mapper, OperatingSystem.Macintosh, kb, expected);\n\t}\n\n\tfunction _assertResolveKeybinding(k: number, expected: IResolvedKeybinding[]): void {\n\t\tassertResolveKeybinding(mapper, decodeKeybinding(k, OperatingSystem.Macintosh)!, expected);\n\t}\n\n\ttest('kb => hw', () => {\n\t\t// unchanged\n\t\tassertKeybindingTranslation(KeyMod.CtrlCmd | KeyCode.Digit1, 'cmd+Digit1');\n\t\tassertKeybindingTranslation(KeyMod.CtrlCmd | KeyCode.KeyB, 'cmd+KeyB');\n\t\tassertKeybindingTranslation(KeyMod.CtrlCmd | KeyMod.Shift | KeyCode.KeyB, 'shift+cmd+KeyB');\n\t\tassertKeybindingTranslation(KeyMod.CtrlCmd | KeyMod.Shift | KeyMod.Alt | KeyMod.WinCtrl | KeyCode.KeyB, 'ctrl+shift+alt+cmd+KeyB');\n\n\t\t// flips Y and Z\n\t\tassertKeybindingTranslation(KeyMod.CtrlCmd | KeyCode.KeyZ, 'cmd+KeyY');\n\t\tassertKeybindingTranslation(KeyMod.CtrlCmd | KeyCode.KeyY, 'cmd+KeyZ');\n\n\t\t// Ctrl+/\n\t\tassertKeybindingTranslation(KeyMod.CtrlCmd | KeyCode.Slash, 'shift+cmd+Digit7');\n\t});\n\n\ttest('resolveKeybinding Cmd+A', () => {\n\t\t_assertResolveKeybinding(\n\t\t\tKeyMod.CtrlCmd | KeyCode.KeyA,\n\t\t\t[{\n\t\t\t\tlabel: '\u2318A',\n\t\t\t\tariaLabel: 'Command+A',\n\t\t\t\telectronAccelerator: 'Cmd+A',\n\t\t\t\tuserSettingsLabel: 'cmd+a',\n\t\t\t\tisWYSIWYG: true,\n\t\t\t\tisMultiChord: false,\n\t\t\t\tdispatchParts: ['meta+[KeyA]'],\n\t\t\t\tsingleModifierDispatchParts: [null],\n\t\t\t}]\n\t\t);\n\t});\n\n\ttest('resolveKeybinding Cmd+B', () => {\n\t\t_assertResolveKeybinding(\n\t\t\tKeyMod.CtrlCmd | KeyCode.KeyB,\n\t\t\t[{\n\t\t\t\tlabel: '\u2318B',\n\t\t\t\tariaLabel: 'Command+B',\n\t\t\t\telectronAccelerator: 'Cmd+B',\n\t\t\t\tuserSettingsLabel: 'cmd+b',\n\t\t\t\tisWYSIWYG: true,\n\t\t\t\tisMultiChord: false,\n\t\t\t\tdispatchParts: ['meta+[KeyB]'],\n\t\t\t\tsingleModifierDispatchParts: [null],\n\t\t\t}]\n\t\t);\n\t});\n\n\ttest('resolveKeybinding Cmd+Z', () => {\n\t\t_assertResolveKeybinding(\n\t\t\tKeyMod.CtrlCmd | KeyCode.KeyZ,\n\t\t\t[{\n\t\t\t\tlabel: '\u2318Z',\n\t\t\t\tariaLabel: 'Command+Z',\n\t\t\t\telectronAccelerator: 'Cmd+Z',\n\t\t\t\tuserSettingsLabel: 'cmd+z',\n\t\t\t\tisWYSIWYG: true,\n\t\t\t\tisMultiChord: false,\n\t\t\t\tdispatchParts: ['meta+[KeyY]'],\n\t\t\t\tsingleModifierDispatchParts: [null],\n\t\t\t}]\n\t\t);\n\t});\n\n\ttest('resolveKeyboardEvent Cmd+[KeyY]', () => {\n\t\tassertResolveKeyboardEvent(\n\t\t\tmapper,\n\t\t\t{\n\t\t\t\t_standardKeyboardEventBrand: true,\n\t\t\t\tctrlKey: false,\n\t\t\t\tshiftKey: false,\n\t\t\t\taltKey: false,\n\t\t\t\tmetaKey: true,\n\t\t\t\taltGraphKey: false,\n\t\t\t\tkeyCode: -1,\n\t\t\t\tcode: 'KeyY'\n\t\t\t},\n\t\t\t{\n\t\t\t\tlabel: '\u2318Z',\n\t\t\t\tariaLabel: 'Command+Z',\n\t\t\t\telectronAccelerator: 'Cmd+Z',\n\t\t\t\tuserSettingsLabel: 'cmd+z',\n\t\t\t\tisWYSIWYG: true,\n\t\t\t\tisMultiChord: false,\n\t\t\t\tdispatchParts: ['meta+[KeyY]'],\n\t\t\t\tsingleModifierDispatchParts: [null],\n\t\t\t}\n\t\t);\n\t});\n\n\ttest('resolveKeybinding Cmd+]', () => {\n\t\t_assertResolveKeybinding(\n\t\t\tKeyMod.CtrlCmd | KeyCode.BracketRight,\n\t\t\t[{\n\t\t\t\tlabel: '\u2303\u2325\u23186',\n\t\t\t\tariaLabel: 'Control+Option+Command+6',\n\t\t\t\telectronAccelerator: 'Ctrl+Alt+Cmd+6',\n\t\t\t\tuserSettingsLabel: 'ctrl+alt+cmd+6',\n\t\t\t\tisWYSIWYG: true,\n\t\t\t\tisMultiChord: false,\n\t\t\t\tdispatchParts: ['ctrl+alt+meta+[Digit6]'],\n\t\t\t\tsingleModifierDispatchParts: [null],\n\t\t\t}]\n\t\t);\n\t});\n\n\ttest('resolveKeyboardEvent Cmd+[BracketRight]', () => {\n\t\tassertResolveKeyboardEvent(\n\t\t\tmapper,\n\t\t\t{\n\t\t\t\t_standardKeyboardEventBrand: true,\n\t\t\t\tctrlKey: false,\n\t\t\t\tshiftKey: false,\n\t\t\t\taltKey: false,\n\t\t\t\tmetaKey: true,\n\t\t\t\taltGraphKey: false,\n\t\t\t\tkeyCode: -1,\n\t\t\t\tcode: 'BracketRight'\n\t\t\t},\n\t\t\t{\n\t\t\t\tlabel: '\u2318\u00A8',\n\t\t\t\tariaLabel: 'Command+\u00A8',\n\t\t\t\telectronAccelerator: null,\n\t\t\t\tuserSettingsLabel: 'cmd+[BracketRight]',\n\t\t\t\tisWYSIWYG: false,\n\t\t\t\tisMultiChord: false,\n\t\t\t\tdispatchParts: ['meta+[BracketRight]'],\n\t\t\t\tsingleModifierDispatchParts: [null],\n\t\t\t}\n\t\t);\n\t});\n\n\ttest('resolveKeybinding Shift+]', () => {\n\t\t_assertResolveKeybinding(\n\t\t\tKeyMod.Shift | KeyCode.BracketRight,\n\t\t\t[{\n\t\t\t\tlabel: '\u2303\u23259',\n\t\t\t\tariaLabel: 'Control+Option+9',\n\t\t\t\telectronAccelerator: 'Ctrl+Alt+9',\n\t\t\t\tuserSettingsLabel: 'ctrl+alt+9',\n\t\t\t\tisWYSIWYG: true,\n\t\t\t\tisMultiChord: false,\n\t\t\t\tdispatchParts: ['ctrl+alt+[Digit9]'],\n\t\t\t\tsingleModifierDispatchParts: [null],\n\t\t\t}]\n\t\t);\n\t});\n\n\ttest('resolveKeybinding Cmd+/', () => {\n\t\t_assertResolveKeybinding(\n\t\t\tKeyMod.CtrlCmd | KeyCode.Slash,\n\t\t\t[{\n\t\t\t\tlabel: '\u21E7\u23187',\n\t\t\t\tariaLabel: 'Shift+Command+7',\n\t\t\t\telectronAccelerator: 'Shift+Cmd+7',\n\t\t\t\tuserSettingsLabel: 'shift+cmd+7',\n\t\t\t\tisWYSIWYG: true,\n\t\t\t\tisMultiChord: false,\n\t\t\t\tdispatchParts: ['shift+meta+[Digit7]'],\n\t\t\t\tsingleModifierDispatchParts: [null],\n\t\t\t}]\n\t\t);\n\t});\n\n\ttest('resolveKeybinding Cmd+Shift+/', () => {\n\t\t_assertResolveKeybinding(\n\t\t\tKeyMod.CtrlCmd | KeyMod.Shift | KeyCode.Slash,\n\t\t\t[{\n\t\t\t\tlabel: '\u21E7\u2318\\'',\n\t\t\t\tariaLabel: 'Shift+Command+\\'',\n\t\t\t\telectronAccelerator: null,\n\t\t\t\tuserSettingsLabel: 'shift+cmd+[Minus]',\n\t\t\t\tisWYSIWYG: false,\n\t\t\t\tisMultiChord: false,\n\t\t\t\tdispatchParts: ['shift+meta+[Minus]'],\n\t\t\t\tsingleModifierDispatchParts: [null],\n\t\t\t}]\n\t\t);\n\t});\n\n\ttest('resolveKeybinding Cmd+K Cmd+\\\\', () => {\n\t\t_assertResolveKeybinding(\n\t\t\tKeyChord(KeyMod.CtrlCmd | KeyCode.KeyK, KeyMod.CtrlCmd | KeyCode.Backslash),\n\t\t\t[{\n\t\t\t\tlabel: '\u2318K \u2303\u21E7\u2325\u23187',\n\t\t\t\tariaLabel: 'Command+K Control+Shift+Option+Command+7',\n\t\t\t\telectronAccelerator: null,\n\t\t\t\tuserSettingsLabel: 'cmd+k ctrl+shift+alt+cmd+7',\n\t\t\t\tisWYSIWYG: true,\n\t\t\t\tisMultiChord: true,\n\t\t\t\tdispatchParts: ['meta+[KeyK]', 'ctrl+shift+alt+meta+[Digit7]'],\n\t\t\t\tsingleModifierDispatchParts: [null, null],\n\t\t\t}]\n\t\t);\n\t});\n\n\ttest('resolveKeybinding Cmd+K Cmd+=', () => {\n\t\t_assertResolveKeybinding(\n\t\t\tKeyChord(KeyMod.CtrlCmd | KeyCode.KeyK, KeyMod.CtrlCmd | KeyCode.Equal),\n\t\t\t[{\n\t\t\t\tlabel: '\u2318K \u21E7\u23180',\n\t\t\t\tariaLabel: 'Command+K Shift+Command+0',\n\t\t\t\telectronAccelerator: null,\n\t\t\t\tuserSettingsLabel: 'cmd+k shift+cmd+0',\n\t\t\t\tisWYSIWYG: true,\n\t\t\t\tisMultiChord: true,\n\t\t\t\tdispatchParts: ['meta+[KeyK]', 'shift+meta+[Digit0]'],\n\t\t\t\tsingleModifierDispatchParts: [null, null],\n\t\t\t}]\n\t\t);\n\t});\n\n\ttest('resolveKeybinding Cmd+DownArrow', () => {\n\t\t_assertResolveKeybinding(\n\t\t\tKeyMod.CtrlCmd | KeyCode.DownArrow,\n\t\t\t[{\n\t\t\t\tlabel: '\u2318\u2193',\n\t\t\t\tariaLabel: 'Command+DownArrow',\n\t\t\t\telectronAccelerator: 'Cmd+Down',\n\t\t\t\tuserSettingsLabel: 'cmd+down',\n\t\t\t\tisWYSIWYG: true,\n\t\t\t\tisMultiChord: false,\n\t\t\t\tdispatchParts: ['meta+[ArrowDown]'],\n\t\t\t\tsingleModifierDispatchParts: [null],\n\t\t\t}]\n\t\t);\n\t});\n\n\ttest('resolveKeybinding Cmd+NUMPAD_0', () => {\n\t\t_assertResolveKeybinding(\n\t\t\tKeyMod.CtrlCmd | KeyCode.Numpad0,\n\t\t\t[{\n\t\t\t\tlabel: '\u2318NumPad0',\n\t\t\t\tariaLabel: 'Command+NumPad0',\n\t\t\t\telectronAccelerator: null,\n\t\t\t\tuserSettingsLabel: 'cmd+numpad0',\n\t\t\t\tisWYSIWYG: true,\n\t\t\t\tisMultiChord: false,\n\t\t\t\tdispatchParts: ['meta+[Numpad0]'],\n\t\t\t\tsingleModifierDispatchParts: [null],\n\t\t\t}]\n\t\t);\n\t});\n\n\ttest('resolveKeybinding Ctrl+Home', () => {\n\t\t_assertResolveKeybinding(\n\t\t\tKeyMod.CtrlCmd | KeyCode.Home,\n\t\t\t[{\n\t\t\t\tlabel: '\u2318Home',\n\t\t\t\tariaLabel: 'Command+Home',\n\t\t\t\telectronAccelerator: 'Cmd+Home',\n\t\t\t\tuserSettingsLabel: 'cmd+home',\n\t\t\t\tisWYSIWYG: true,\n\t\t\t\tisMultiChord: false,\n\t\t\t\tdispatchParts: ['meta+[Home]'],\n\t\t\t\tsingleModifierDispatchParts: [null],\n\t\t\t}]\n\t\t);\n\t});\n\n\ttest('resolveKeyboardEvent Ctrl+[Home]', () => {\n\t\tassertResolveKeyboardEvent(\n\t\t\tmapper,\n\t\t\t{\n\t\t\t\t_standardKeyboardEventBrand: true,\n\t\t\t\tctrlKey: false,\n\t\t\t\tshiftKey: false,\n\t\t\t\taltKey: false,\n\t\t\t\tmetaKey: true,\n\t\t\t\taltGraphKey: false,\n\t\t\t\tkeyCode: -1,\n\t\t\t\tcode: 'Home'\n\t\t\t},\n\t\t\t{\n\t\t\t\tlabel: '\u2318Home',\n\t\t\t\tariaLabel: 'Command+Home',\n\t\t\t\telectronAccelerator: 'Cmd+Home',\n\t\t\t\tuserSettingsLabel: 'cmd+home',\n\t\t\t\tisWYSIWYG: true,\n\t\t\t\tisMultiChord: false,\n\t\t\t\tdispatchParts: ['meta+[Home]'],\n\t\t\t\tsingleModifierDispatchParts: [null],\n\t\t\t}\n\t\t);\n\t});\n\n\ttest('resolveUserBinding Cmd+[Comma] Cmd+/', () => {\n\t\tassertResolveKeybinding(\n\t\t\tmapper,\n\t\t\tnew Keybinding([\n\t\t\t\tnew ScanCodeChord(false, false, false, true, ScanCode.Comma),\n\t\t\t\tnew KeyCodeChord(false, false, false, true, KeyCode.Slash),\n\t\t\t]),\n\t\t\t[{\n\t\t\t\tlabel: '\u2318, \u21E7\u23187',\n\t\t\t\tariaLabel: 'Command+, Shift+Command+7',\n\t\t\t\telectronAccelerator: null,\n\t\t\t\tuserSettingsLabel: 'cmd+[Comma] shift+cmd+7',\n\t\t\t\tisWYSIWYG: false,\n\t\t\t\tisMultiChord: true,\n\t\t\t\tdispatchParts: ['meta+[Comma]', 'shift+meta+[Digit7]'],\n\t\t\t\tsingleModifierDispatchParts: [null, null],\n\t\t\t}]\n\t\t);\n\t});\n\n\ttest('resolveKeyboardEvent Single Modifier MetaLeft+', () => {\n\t\tassertResolveKeyboardEvent(\n\t\t\tmapper,\n\t\t\t{\n\t\t\t\t_standardKeyboardEventBrand: true,\n\t\t\t\tctrlKey: false,\n\t\t\t\tshiftKey: false,\n\t\t\t\taltKey: false,\n\t\t\t\tmetaKey: true,\n\t\t\t\taltGraphKey: false,\n\t\t\t\tkeyCode: -1,\n\t\t\t\tcode: 'MetaLeft'\n\t\t\t},\n\t\t\t{\n\t\t\t\tlabel: '\u2318',\n\t\t\t\tariaLabel: 'Command',\n\t\t\t\telectronAccelerator: null,\n\t\t\t\tuserSettingsLabel: 'cmd',\n\t\t\t\tisWYSIWYG: true,\n\t\t\t\tisMultiChord: false,\n\t\t\t\tdispatchParts: [null],\n\t\t\t\tsingleModifierDispatchParts: ['meta'],\n\t\t\t}\n\t\t);\n\t});\n\n\ttest('resolveKeyboardEvent Single Modifier MetaRight+', () => {\n\t\tassertResolveKeyboardEvent(\n\t\t\tmapper,\n\t\t\t{\n\t\t\t\t_standardKeyboardEventBrand: true,\n\t\t\t\tctrlKey: false,\n\t\t\t\tshiftKey: false,\n\t\t\t\taltKey: false,\n\t\t\t\tmetaKey: true,\n\t\t\t\taltGraphKey: false,\n\t\t\t\tkeyCode: -1,\n\t\t\t\tcode: 'MetaRight'\n\t\t\t},\n\t\t\t{\n\t\t\t\tlabel: '\u2318',\n\t\t\t\tariaLabel: 'Command',\n\t\t\t\telectronAccelerator: null,\n\t\t\t\tuserSettingsLabel: 'cmd',\n\t\t\t\tisWYSIWYG: true,\n\t\t\t\tisMultiChord: false,\n\t\t\t\tdispatchParts: [null],\n\t\t\t\tsingleModifierDispatchParts: ['meta'],\n\t\t\t}\n\t\t);\n\t});\n});\n\nsuite('keyboardMapper - MAC en_us', () => {\n\n\tensureNoDisposablesAreLeakedInTestSuite();\n\n\tlet mapper: MacLinuxKeyboardMapper;\n\n\tsuiteSetup(async () => {\n\t\tconst _mapper = await createKeyboardMapper(true, 'mac_en_us', false, OperatingSystem.Macintosh);\n\t\tmapper = _mapper;\n\t});\n\n\ttest('mapping', () => {\n\t\treturn assertMapping(WRITE_FILE_IF_DIFFERENT, mapper, 'mac_en_us.txt');\n\t});\n\n\ttest('resolveUserBinding Cmd+[Comma] Cmd+/', () => {\n\t\tassertResolveKeybinding(\n\t\t\tmapper,\n\t\t\tnew Keybinding([\n\t\t\t\tnew ScanCodeChord(false, false, false, true, ScanCode.Comma),\n\t\t\t\tnew KeyCodeChord(false, false, false, true, KeyCode.Slash),\n\t\t\t]),\n\t\t\t[{\n\t\t\t\tlabel: '\u2318, \u2318/',\n\t\t\t\tariaLabel: 'Command+, Command+/',\n\t\t\t\telectronAccelerator: null,\n\t\t\t\tuserSettingsLabel: 'cmd+, cmd+/',\n\t\t\t\tisWYSIWYG: true,\n\t\t\t\tisMultiChord: true,\n\t\t\t\tdispatchParts: ['meta+[Comma]', 'meta+[Slash]'],\n\t\t\t\tsingleModifierDispatchParts: [null, null],\n\t\t\t}]\n\t\t);\n\t});\n\n\ttest('resolveKeyboardEvent Single Modifier MetaLeft+', () => {\n\t\tassertResolveKeyboardEvent(\n\t\t\tmapper,\n\t\t\t{\n\t\t\t\t_standardKeyboardEventBrand: true,\n\t\t\t\tctrlKey: false,\n\t\t\t\tshiftKey: false,\n\t\t\t\taltKey: false,\n\t\t\t\tmetaKey: true,\n\t\t\t\taltGraphKey: false,\n\t\t\t\tkeyCode: -1,\n\t\t\t\tcode: 'MetaLeft'\n\t\t\t},\n\t\t\t{\n\t\t\t\tlabel: '\u2318',\n\t\t\t\tariaLabel: 'Command',\n\t\t\t\telectronAccelerator: null,\n\t\t\t\tuserSettingsLabel: 'cmd',\n\t\t\t\tisWYSIWYG: true,\n\t\t\t\tisMultiChord: false,\n\t\t\t\tdispatchParts: [null],\n\t\t\t\tsingleModifierDispatchParts: ['meta'],\n\t\t\t}\n\t\t);\n\t});\n\n\ttest('resolveKeyboardEvent Single Modifier MetaRight+', () => {\n\t\tassertResolveKeyboardEvent(\n\t\t\tmapper,\n\t\t\t{\n\t\t\t\t_standardKeyboardEventBrand: true,\n\t\t\t\tctrlKey: false,\n\t\t\t\tshiftKey: false,\n\t\t\t\taltKey: false,\n\t\t\t\tmetaKey: true,\n\t\t\t\taltGraphKey: false,\n\t\t\t\tkeyCode: -1,\n\t\t\t\tcode: 'MetaRight'\n\t\t\t},\n\t\t\t{\n\t\t\t\tlabel: '\u2318',\n\t\t\t\tariaLabel: 'Command',\n\t\t\t\telectronAccelerator: null,\n\t\t\t\tuserSettingsLabel: 'cmd',\n\t\t\t\tisWYSIWYG: true,\n\t\t\t\tisMultiChord: false,\n\t\t\t\tdispatchParts: [null],\n\t\t\t\tsingleModifierDispatchParts: ['meta'],\n\t\t\t}\n\t\t);\n\t});\n\n\ttest('resolveKeyboardEvent mapAltGrToCtrlAlt AltGr+Z', async () => {\n\t\tconst mapper = await createKeyboardMapper(true, 'mac_en_us', true, OperatingSystem.Macintosh);\n\n\t\tassertResolveKeyboardEvent(\n\t\t\tmapper,\n\t\t\t{\n\t\t\t\t_standardKeyboardEventBrand: true,\n\t\t\t\tctrlKey: false,\n\t\t\t\tshiftKey: false,\n\t\t\t\taltKey: false,\n\t\t\t\tmetaKey: false,\n\t\t\t\taltGraphKey: true,\n\t\t\t\tkeyCode: -1,\n\t\t\t\tcode: 'KeyZ'\n\t\t\t},\n\t\t\t{\n\t\t\t\tlabel: '\u2303\u2325Z',\n\t\t\t\tariaLabel: 'Control+Option+Z',\n\t\t\t\telectronAccelerator: 'Ctrl+Alt+Z',\n\t\t\t\tuserSettingsLabel: 'ctrl+alt+z',\n\t\t\t\tisWYSIWYG: true,\n\t\t\t\tisMultiChord: false,\n\t\t\t\tdispatchParts: ['ctrl+alt+[KeyZ]'],\n\t\t\t\tsingleModifierDispatchParts: [null],\n\t\t\t}\n\t\t);\n\t});\n});\n\nsuite('keyboardMapper - LINUX de_ch', () => {\n\n\tensureNoDisposablesAreLeakedInTestSuite();\n\n\tlet mapper: MacLinuxKeyboardMapper;\n\n\tsuiteSetup(async () => {\n\t\tconst _mapper = await createKeyboardMapper(false, 'linux_de_ch', false, OperatingSystem.Linux);\n\t\tmapper = _mapper;\n\t});\n\n\ttest('mapping', () => {\n\t\treturn assertMapping(WRITE_FILE_IF_DIFFERENT, mapper, 'linux_de_ch.txt');\n\t});\n\n\tfunction assertKeybindingTranslation(kb: number, expected: string | string[]): void {\n\t\t_assertKeybindingTranslation(mapper, OperatingSystem.Linux, kb, expected);\n\t}\n\n\tfunction _assertResolveKeybinding(k: number, expected: IResolvedKeybinding[]): void {\n\t\tassertResolveKeybinding(mapper, decodeKeybinding(k, OperatingSystem.Linux)!, expected);\n\t}\n\n\ttest('kb => hw', () => {\n\t\t// unchanged\n\t\tassertKeybindingTranslation(KeyMod.CtrlCmd | KeyCode.Digit1, 'ctrl+Digit1');\n\t\tassertKeybindingTranslation(KeyMod.CtrlCmd | KeyCode.KeyB, 'ctrl+KeyB');\n\t\tassertKeybindingTranslation(KeyMod.CtrlCmd | KeyMod.Shift | KeyCode.KeyB, 'ctrl+shift+KeyB');\n\t\tassertKeybindingTranslation(KeyMod.CtrlCmd | KeyMod.Shift | KeyMod.Alt | KeyMod.WinCtrl | KeyCode.KeyB, 'ctrl+shift+alt+meta+KeyB');\n\n\t\t// flips Y and Z\n\t\tassertKeybindingTranslation(KeyMod.CtrlCmd | KeyCode.KeyZ, 'ctrl+KeyY');\n\t\tassertKeybindingTranslation(KeyMod.CtrlCmd | KeyCode.KeyY, 'ctrl+KeyZ');\n\n\t\t// Ctrl+/\n\t\tassertKeybindingTranslation(KeyMod.CtrlCmd | KeyCode.Slash, 'ctrl+shift+Digit7');\n\t});\n\n\ttest('resolveKeybinding Ctrl+A', () => {\n\t\t_assertResolveKeybinding(\n\t\t\tKeyMod.CtrlCmd | KeyCode.KeyA,\n\t\t\t[{\n\t\t\t\tlabel: 'Ctrl+A',\n\t\t\t\tariaLabel: 'Control+A',\n\t\t\t\telectronAccelerator: 'Ctrl+A',\n\t\t\t\tuserSettingsLabel: 'ctrl+a',\n\t\t\t\tisWYSIWYG: true,\n\t\t\t\tisMultiChord: false,\n\t\t\t\tdispatchParts: ['ctrl+[KeyA]'],\n\t\t\t\tsingleModifierDispatchParts: [null],\n\t\t\t}]\n\t\t);\n\t});\n\n\ttest('resolveKeybinding Ctrl+Z', () => {\n\t\t_assertResolveKeybinding(\n\t\t\tKeyMod.CtrlCmd | KeyCode.KeyZ,\n\t\t\t[{\n\t\t\t\tlabel: 'Ctrl+Z',\n\t\t\t\tariaLabel: 'Control+Z',\n\t\t\t\telectronAccelerator: 'Ctrl+Z',\n\t\t\t\tuserSettingsLabel: 'ctrl+z',\n\t\t\t\tisWYSIWYG: true,\n\t\t\t\tisMultiChord: false,\n\t\t\t\tdispatchParts: ['ctrl+[KeyY]'],\n\t\t\t\tsingleModifierDispatchParts: [null],\n\t\t\t}]\n\t\t);\n\t});\n\n\ttest('resolveKeyboardEvent Ctrl+[KeyY]', () => {\n\t\tassertResolveKeyboardEvent(\n\t\t\tmapper,\n\t\t\t{\n\t\t\t\t_standardKeyboardEventBrand: true,\n\t\t\t\tctrlKey: true,\n\t\t\t\tshiftKey: false,\n\t\t\t\taltKey: false,\n\t\t\t\tmetaKey: false,\n\t\t\t\taltGraphKey: false,\n\t\t\t\tkeyCode: -1,\n\t\t\t\tcode: 'KeyY'\n\t\t\t},\n\t\t\t{\n\t\t\t\tlabel: 'Ctrl+Z',\n\t\t\t\tariaLabel: 'Control+Z',\n\t\t\t\telectronAccelerator: 'Ctrl+Z',\n\t\t\t\tuserSettingsLabel: 'ctrl+z',\n\t\t\t\tisWYSIWYG: true,\n\t\t\t\tisMultiChord: false,\n\t\t\t\tdispatchParts: ['ctrl+[KeyY]'],\n\t\t\t\tsingleModifierDispatchParts: [null],\n\t\t\t}\n\t\t);\n\t});\n\n\ttest('resolveKeybinding Ctrl+]', () => {\n\t\t_assertResolveKeybinding(\n\t\t\tKeyMod.CtrlCmd | KeyCode.BracketRight,\n\t\t\t[]\n\t\t);\n\t});\n\n\ttest('resolveKeyboardEvent Ctrl+[BracketRight]', () => {\n\t\tassertResolveKeyboardEvent(\n\t\t\tmapper,\n\t\t\t{\n\t\t\t\t_standardKeyboardEventBrand: true,\n\t\t\t\tctrlKey: true,\n\t\t\t\tshiftKey: false,\n\t\t\t\taltKey: false,\n\t\t\t\tmetaKey: false,\n\t\t\t\taltGraphKey: false,\n\t\t\t\tkeyCode: -1,\n\t\t\t\tcode: 'BracketRight'\n\t\t\t},\n\t\t\t{\n\t\t\t\tlabel: 'Ctrl+\u00A8',\n\t\t\t\tariaLabel: 'Control+\u00A8',\n\t\t\t\telectronAccelerator: null,\n\t\t\t\tuserSettingsLabel: 'ctrl+[BracketRight]',\n\t\t\t\tisWYSIWYG: false,\n\t\t\t\tisMultiChord: false,\n\t\t\t\tdispatchParts: ['ctrl+[BracketRight]'],\n\t\t\t\tsingleModifierDispatchParts: [null],\n\t\t\t}\n\t\t);\n\t});\n\n\ttest('resolveKeybinding Shift+]', () => {\n\t\t_assertResolveKeybinding(\n\t\t\tKeyMod.Shift | KeyCode.BracketRight,\n\t\t\t[{\n\t\t\t\tlabel: 'Ctrl+Alt+0',\n\t\t\t\tariaLabel: 'Control+Alt+0',\n\t\t\t\telectronAccelerator: 'Ctrl+Alt+0',\n\t\t\t\tuserSettingsLabel: 'ctrl+alt+0',\n\t\t\t\tisWYSIWYG: true,\n\t\t\t\tisMultiChord: false,\n\t\t\t\tdispatchParts: ['ctrl+alt+[Digit0]'],\n\t\t\t\tsingleModifierDispatchParts: [null],\n\t\t\t}, {\n\t\t\t\tlabel: 'Ctrl+Alt+$',\n\t\t\t\tariaLabel: 'Control+Alt+$',\n\t\t\t\telectronAccelerator: null,\n\t\t\t\tuserSettingsLabel: 'ctrl+alt+[Backslash]',\n\t\t\t\tisWYSIWYG: false,\n\t\t\t\tisMultiChord: false,\n\t\t\t\tdispatchParts: ['ctrl+alt+[Backslash]'],\n\t\t\t\tsingleModifierDispatchParts: [null],\n\t\t\t}]\n\t\t);\n\t});\n\n\ttest('resolveKeybinding Ctrl+/', () => {\n\t\t_assertResolveKeybinding(\n\t\t\tKeyMod.CtrlCmd | KeyCode.Slash,\n\t\t\t[{\n\t\t\t\tlabel: 'Ctrl+Shift+7',\n\t\t\t\tariaLabel: 'Control+Shift+7',\n\t\t\t\telectronAccelerator: 'Ctrl+Shift+7',\n\t\t\t\tuserSettingsLabel: 'ctrl+shift+7',\n\t\t\t\tisWYSIWYG: true,\n\t\t\t\tisMultiChord: false,\n\t\t\t\tdispatchParts: ['ctrl+shift+[Digit7]'],\n\t\t\t\tsingleModifierDispatchParts: [null],\n\t\t\t}]\n\t\t);\n\t});\n\n\ttest('resolveKeybinding Ctrl+Shift+/', () => {\n\t\t_assertResolveKeybinding(\n\t\t\tKeyMod.CtrlCmd | KeyMod.Shift | KeyCode.Slash,\n\t\t\t[{\n\t\t\t\tlabel: 'Ctrl+Shift+\\'',\n\t\t\t\tariaLabel: 'Control+Shift+\\'',\n\t\t\t\telectronAccelerator: null,\n\t\t\t\tuserSettingsLabel: 'ctrl+shift+[Minus]',\n\t\t\t\tisWYSIWYG: false,\n\t\t\t\tisMultiChord: false,\n\t\t\t\tdispatchParts: ['ctrl+shift+[Minus]'],\n\t\t\t\tsingleModifierDispatchParts: [null],\n\t\t\t}]\n\t\t);\n\t});\n\n\ttest('resolveKeybinding Ctrl+K Ctrl+\\\\', () => {\n\t\t_assertResolveKeybinding(\n\t\t\tKeyChord(KeyMod.CtrlCmd | KeyCode.KeyK, KeyMod.CtrlCmd | KeyCode.Backslash),\n\t\t\t[]\n\t\t);\n\t});\n\n\ttest('resolveKeybinding Ctrl+K Ctrl+=', () => {\n\t\t_assertResolveKeybinding(\n\t\t\tKeyChord(KeyMod.CtrlCmd | KeyCode.KeyK, KeyMod.CtrlCmd | KeyCode.Equal),\n\t\t\t[{\n\t\t\t\tlabel: 'Ctrl+K Ctrl+Shift+0',\n\t\t\t\tariaLabel: 'Control+K Control+Shift+0',\n\t\t\t\telectronAccelerator: null,\n\t\t\t\tuserSettingsLabel: 'ctrl+k ctrl+shift+0',\n\t\t\t\tisWYSIWYG: true,\n\t\t\t\tisMultiChord: true,\n\t\t\t\tdispatchParts: ['ctrl+[KeyK]', 'ctrl+shift+[Digit0]'],\n\t\t\t\tsingleModifierDispatchParts: [null, null],\n\t\t\t}]\n\t\t);\n\t});\n\n\ttest('resolveKeybinding Ctrl+DownArrow', () => {\n\t\t_assertResolveKeybinding(\n\t\t\tKeyMod.CtrlCmd | KeyCode.DownArrow,\n\t\t\t[{\n\t\t\t\tlabel: 'Ctrl+DownArrow',\n\t\t\t\tariaLabel: 'Control+DownArrow',\n\t\t\t\telectronAccelerator: 'Ctrl+Down',\n\t\t\t\tuserSettingsLabel: 'ctrl+down',\n\t\t\t\tisWYSIWYG: true,\n\t\t\t\tisMultiChord: false,\n\t\t\t\tdispatchParts: ['ctrl+[ArrowDown]'],\n\t\t\t\tsingleModifierDispatchParts: [null],\n\t\t\t}]\n\t\t);\n\t});\n\n\ttest('resolveKeybinding Ctrl+NUMPAD_0', () => {\n\t\t_assertResolveKeybinding(\n\t\t\tKeyMod.CtrlCmd | KeyCode.Numpad0,\n\t\t\t[{\n\t\t\t\tlabel: 'Ctrl+NumPad0',\n\t\t\t\tariaLabel: 'Control+NumPad0',\n\t\t\t\telectronAccelerator: null,\n\t\t\t\tuserSettingsLabel: 'ctrl+numpad0',\n\t\t\t\tisWYSIWYG: true,\n\t\t\t\tisMultiChord: false,\n\t\t\t\tdispatchParts: ['ctrl+[Numpad0]'],\n\t\t\t\tsingleModifierDispatchParts: [null],\n\t\t\t}]\n\t\t);\n\t});\n\n\ttest('resolveKeybinding Ctrl+Home', () => {\n\t\t_assertResolveKeybinding(\n\t\t\tKeyMod.CtrlCmd | KeyCode.Home,\n\t\t\t[{\n\t\t\t\tlabel: 'Ctrl+Home',\n\t\t\t\tariaLabel: 'Control+Home',\n\t\t\t\telectronAccelerator: 'Ctrl+Home',\n\t\t\t\tuserSettingsLabel: 'ctrl+home',\n\t\t\t\tisWYSIWYG: true,\n\t\t\t\tisMultiChord: false,\n\t\t\t\tdispatchParts: ['ctrl+[Home]'],\n\t\t\t\tsingleModifierDispatchParts: [null],\n\t\t\t}]\n\t\t);\n\t});\n\n\ttest('resolveKeyboardEvent Ctrl+[Home]', () => {\n\t\tassertResolveKeyboardEvent(\n\t\t\tmapper,\n\t\t\t{\n\t\t\t\t_standardKeyboardEventBrand: true,\n\t\t\t\tctrlKey: true,\n\t\t\t\tshiftKey: false,\n\t\t\t\taltKey: false,\n\t\t\t\tmetaKey: false,\n\t\t\t\taltGraphKey: false,\n\t\t\t\tkeyCode: -1,\n\t\t\t\tcode: 'Home'\n\t\t\t},\n\t\t\t{\n\t\t\t\tlabel: 'Ctrl+Home',\n\t\t\t\tariaLabel: 'Control+Home',\n\t\t\t\telectronAccelerator: 'Ctrl+Home',\n\t\t\t\tuserSettingsLabel: 'ctrl+home',\n\t\t\t\tisWYSIWYG: true,\n\t\t\t\tisMultiChord: false,\n\t\t\t\tdispatchParts: ['ctrl+[Home]'],\n\t\t\t\tsingleModifierDispatchParts: [null],\n\t\t\t}\n\t\t);\n\t});\n\n\ttest('resolveKeyboardEvent Ctrl+[KeyX]', () => {\n\t\tassertResolveKeyboardEvent(\n\t\t\tmapper,\n\t\t\t{\n\t\t\t\t_standardKeyboardEventBrand: true,\n\t\t\t\tctrlKey: true,\n\t\t\t\tshiftKey: false,\n\t\t\t\taltKey: false,\n\t\t\t\tmetaKey: false,\n\t\t\t\taltGraphKey: false,\n\t\t\t\tkeyCode: -1,\n\t\t\t\tcode: 'KeyX'\n\t\t\t},\n\t\t\t{\n\t\t\t\tlabel: 'Ctrl+X',\n\t\t\t\tariaLabel: 'Control+X',\n\t\t\t\telectronAccelerator: 'Ctrl+X',\n\t\t\t\tuserSettingsLabel: 'ctrl+x',\n\t\t\t\tisWYSIWYG: true,\n\t\t\t\tisMultiChord: false,\n\t\t\t\tdispatchParts: ['ctrl+[KeyX]'],\n\t\t\t\tsingleModifierDispatchParts: [null],\n\t\t\t}\n\t\t);\n\t});\n\n\ttest('resolveUserBinding Ctrl+[Comma] Ctrl+/', () => {\n\t\tassertResolveKeybinding(\n\t\t\tmapper, new Keybinding([\n\t\t\t\tnew ScanCodeChord(true, false, false, false, ScanCode.Comma),\n\t\t\t\tnew KeyCodeChord(true, false, false, false, KeyCode.Slash),\n\t\t\t]),\n\t\t\t[{\n\t\t\t\tlabel: 'Ctrl+, Ctrl+Shift+7',\n\t\t\t\tariaLabel: 'Control+, Control+Shift+7',\n\t\t\t\telectronAccelerator: null,\n\t\t\t\tuserSettingsLabel: 'ctrl+[Comma] ctrl+shift+7',\n\t\t\t\tisWYSIWYG: false,\n\t\t\t\tisMultiChord: true,\n\t\t\t\tdispatchParts: ['ctrl+[Comma]', 'ctrl+shift+[Digit7]'],\n\t\t\t\tsingleModifierDispatchParts: [null, null],\n\t\t\t}]\n\t\t);\n\t});\n\n\ttest('resolveKeyboardEvent Single Modifier ControlLeft+', () => {\n\t\tassertResolveKeyboardEvent(\n\t\t\tmapper,\n\t\t\t{\n\t\t\t\t_standardKeyboardEventBrand: true,\n\t\t\t\tctrlKey: true,\n\t\t\t\tshiftKey: false,\n\t\t\t\taltKey: false,\n\t\t\t\tmetaKey: false,\n\t\t\t\taltGraphKey: false,\n\t\t\t\tkeyCode: -1,\n\t\t\t\tcode: 'ControlLeft'\n\t\t\t},\n\t\t\t{\n\t\t\t\tlabel: 'Ctrl',\n\t\t\t\tariaLabel: 'Control',\n\t\t\t\telectronAccelerator: null,\n\t\t\t\tuserSettingsLabel: 'ctrl',\n\t\t\t\tisWYSIWYG: true,\n\t\t\t\tisMultiChord: false,\n\t\t\t\tdispatchParts: [null],\n\t\t\t\tsingleModifierDispatchParts: ['ctrl'],\n\t\t\t}\n\t\t);\n\t});\n\n\ttest('resolveKeyboardEvent Single Modifier ControlRight+', () => {\n\t\tassertResolveKeyboardEvent(\n\t\t\tmapper,\n\t\t\t{\n\t\t\t\t_standardKeyboardEventBrand: true,\n\t\t\t\tctrlKey: true,\n\t\t\t\tshiftKey: false,\n\t\t\t\taltKey: false,\n\t\t\t\tmetaKey: false,\n\t\t\t\taltGraphKey: false,\n\t\t\t\tkeyCode: -1,\n\t\t\t\tcode: 'ControlRight'\n\t\t\t},\n\t\t\t{\n\t\t\t\tlabel: 'Ctrl',\n\t\t\t\tariaLabel: 'Control',\n\t\t\t\telectronAccelerator: null,\n\t\t\t\tuserSettingsLabel: 'ctrl',\n\t\t\t\tisWYSIWYG: true,\n\t\t\t\tisMultiChord: false,\n\t\t\t\tdispatchParts: [null],\n\t\t\t\tsingleModifierDispatchParts: ['ctrl'],\n\t\t\t}\n\t\t);\n\t});\n});\n\nsuite('keyboardMapper - LINUX en_us', () => {\n\n\tensureNoDisposablesAreLeakedInTestSuite();\n\n\tlet mapper: MacLinuxKeyboardMapper;\n\n\tsuiteSetup(async () => {\n\t\tconst _mapper = await createKeyboardMapper(true, 'linux_en_us', false, OperatingSystem.Linux);\n\t\tmapper = _mapper;\n\t});\n\n\ttest('mapping', () => {\n\t\treturn assertMapping(WRITE_FILE_IF_DIFFERENT, mapper, 'linux_en_us.txt');\n\t});\n\n\tfunction _assertResolveKeybinding(k: number, expected: IResolvedKeybinding[]): void {\n\t\tassertResolveKeybinding(mapper, decodeKeybinding(k, OperatingSystem.Linux)!, expected);\n\t}\n\n\ttest('resolveKeybinding Ctrl+A', () => {\n\t\t_assertResolveKeybinding(\n\t\t\tKeyMod.CtrlCmd | KeyCode.KeyA,\n\t\t\t[{\n\t\t\t\tlabel: 'Ctrl+A',\n\t\t\t\tariaLabel: 'Control+A',\n\t\t\t\telectronAccelerator: 'Ctrl+A',\n\t\t\t\tuserSettingsLabel: 'ctrl+a',\n\t\t\t\tisWYSIWYG: true,\n\t\t\t\tisMultiChord: false,\n\t\t\t\tdispatchParts: ['ctrl+[KeyA]'],\n\t\t\t\tsingleModifierDispatchParts: [null],\n\t\t\t}]\n\t\t);\n\t});\n\n\ttest('resolveKeybinding Ctrl+Z', () => {\n\t\t_assertResolveKeybinding(\n\t\t\tKeyMod.CtrlCmd | KeyCode.KeyZ,\n\t\t\t[{\n\t\t\t\tlabel: 'Ctrl+Z',\n\t\t\t\tariaLabel: 'Control+Z',\n\t\t\t\telectronAccelerator: 'Ctrl+Z',\n\t\t\t\tuserSettingsLabel: 'ctrl+z',\n\t\t\t\tisWYSIWYG: true,\n\t\t\t\tisMultiChord: false,\n\t\t\t\tdispatchParts: ['ctrl+[KeyZ]'],\n\t\t\t\tsingleModifierDispatchParts: [null],\n\t\t\t}]\n\t\t);\n\t});\n\n\ttest('resolveKeyboardEvent Ctrl+[KeyZ]', () => {\n\t\tassertResolveKeyboardEvent(\n\t\t\tmapper,\n\t\t\t{\n\t\t\t\t_standardKeyboardEventBrand: true,\n\t\t\t\tctrlKey: true,\n\t\t\t\tshiftKey: false,\n\t\t\t\taltKey: false,\n\t\t\t\tmetaKey: false,\n\t\t\t\taltGraphKey: false,\n\t\t\t\tkeyCode: -1,\n\t\t\t\tcode: 'KeyZ'\n\t\t\t},\n\t\t\t{\n\t\t\t\tlabel: 'Ctrl+Z',\n\t\t\t\tariaLabel: 'Control+Z',\n\t\t\t\telectronAccelerator: 'Ctrl+Z',\n\t\t\t\tuserSettingsLabel: 'ctrl+z',\n\t\t\t\tisWYSIWYG: true,\n\t\t\t\tisMultiChord: false,\n\t\t\t\tdispatchParts: ['ctrl+[KeyZ]'],\n\t\t\t\tsingleModifierDispatchParts: [null],\n\t\t\t}\n\t\t);\n\t});\n\n\ttest('resolveKeybinding Ctrl+]', () => {\n\t\t_assertResolveKeybinding(\n\t\t\tKeyMod.CtrlCmd | KeyCode.BracketRight,\n\t\t\t[{\n\t\t\t\tlabel: 'Ctrl+]',\n\t\t\t\tariaLabel: 'Control+]',\n\t\t\t\telectronAccelerator: 'Ctrl+]',\n\t\t\t\tuserSettingsLabel: 'ctrl+]',\n\t\t\t\tisWYSIWYG: true,\n\t\t\t\tisMultiChord: false,\n\t\t\t\tdispatchParts: ['ctrl+[BracketRight]'],\n\t\t\t\tsingleModifierDispatchParts: [null],\n\t\t\t}]\n\t\t);\n\t});\n\n\ttest('resolveKeyboardEvent Ctrl+[BracketRight]', () => {\n\t\tassertResolveKeyboardEvent(\n\t\t\tmapper,\n\t\t\t{\n\t\t\t\t_standardKeyboardEventBrand: true,\n\t\t\t\tctrlKey: true,\n\t\t\t\tshiftKey: false,\n\t\t\t\taltKey: false,\n\t\t\t\tmetaKey: false,\n\t\t\t\taltGraphKey: false,\n\t\t\t\tkeyCode: -1,\n\t\t\t\tcode: 'BracketRight'\n\t\t\t},\n\t\t\t{\n\t\t\t\tlabel: 'Ctrl+]',\n\t\t\t\tariaLabel: 'Control+]',\n\t\t\t\telectronAccelerator: 'Ctrl+]',\n\t\t\t\tuserSettingsLabel: 'ctrl+]',\n\t\t\t\tisWYSIWYG: true,\n\t\t\t\tisMultiChord: false,\n\t\t\t\tdispatchParts: ['ctrl+[BracketRight]'],\n\t\t\t\tsingleModifierDispatchParts: [null],\n\t\t\t}\n\t\t);\n\t});\n\n\ttest('resolveKeybinding Shift+]', () => {\n\t\t_assertResolveKeybinding(\n\t\t\tKeyMod.Shift | KeyCode.BracketRight,\n\t\t\t[{\n\t\t\t\tlabel: 'Shift+]',\n\t\t\t\tariaLabel: 'Shift+]',\n\t\t\t\telectronAccelerator: 'Shift+]',\n\t\t\t\tuserSettingsLabel: 'shift+]',\n\t\t\t\tisWYSIWYG: true,\n\t\t\t\tisMultiChord: false,\n\t\t\t\tdispatchParts: ['shift+[BracketRight]'],\n\t\t\t\tsingleModifierDispatchParts: [null],\n\t\t\t}]\n\t\t);\n\t});\n\n\ttest('resolveKeybinding Ctrl+/', () => {\n\t\t_assertResolveKeybinding(\n\t\t\tKeyMod.CtrlCmd | KeyCode.Slash,\n\t\t\t[{\n\t\t\t\tlabel: 'Ctrl+/',\n\t\t\t\tariaLabel: 'Control+/',\n\t\t\t\telectronAccelerator: 'Ctrl+/',\n\t\t\t\tuserSettingsLabel: 'ctrl+/',\n\t\t\t\tisWYSIWYG: true,\n\t\t\t\tisMultiChord: false,\n\t\t\t\tdispatchParts: ['ctrl+[Slash]'],\n\t\t\t\tsingleModifierDispatchParts: [null],\n\t\t\t}]\n\t\t);\n\t});\n\n\ttest('resolveKeybinding Ctrl+Shift+/', () => {\n\t\t_assertResolveKeybinding(\n\t\t\tKeyMod.CtrlCmd | KeyMod.Shift | KeyCode.Slash,\n\t\t\t[{\n\t\t\t\tlabel: 'Ctrl+Shift+/',\n\t\t\t\tariaLabel: 'Control+Shift+/',\n\t\t\t\telectronAccelerator: 'Ctrl+Shift+/',\n\t\t\t\tuserSettingsLabel: 'ctrl+shift+/',\n\t\t\t\tisWYSIWYG: true,\n\t\t\t\tisMultiChord: false,\n\t\t\t\tdispatchParts: ['ctrl+shift+[Slash]'],\n\t\t\t\tsingleModifierDispatchParts: [null],\n\t\t\t}]\n\t\t);\n\t});\n\n\ttest('resolveKeybinding Ctrl+K Ctrl+\\\\', () => {\n\t\t_assertResolveKeybinding(\n\t\t\tKeyChord(KeyMod.CtrlCmd | KeyCode.KeyK, KeyMod.CtrlCmd | KeyCode.Backslash),\n\t\t\t[{\n\t\t\t\tlabel: 'Ctrl+K Ctrl+\\\\',\n\t\t\t\tariaLabel: 'Control+K Control+\\\\',\n\t\t\t\telectronAccelerator: null,\n\t\t\t\tuserSettingsLabel: 'ctrl+k ctrl+\\\\',\n\t\t\t\tisWYSIWYG: true,\n\t\t\t\tisMultiChord: true,\n\t\t\t\tdispatchParts: ['ctrl+[KeyK]', 'ctrl+[Backslash]'],\n\t\t\t\tsingleModifierDispatchParts: [null, null],\n\t\t\t}]\n\t\t);\n\t});\n\n\ttest('resolveKeybinding Ctrl+K Ctrl+=', () => {\n\t\t_assertResolveKeybinding(\n\t\t\tKeyChord(KeyMod.CtrlCmd | KeyCode.KeyK, KeyMod.CtrlCmd | KeyCode.Equal),\n\t\t\t[{\n\t\t\t\tlabel: 'Ctrl+K Ctrl+=',\n\t\t\t\tariaLabel: 'Control+K Control+=',\n\t\t\t\telectronAccelerator: null,\n\t\t\t\tuserSettingsLabel: 'ctrl+k ctrl+=',\n\t\t\t\tisWYSIWYG: true,\n\t\t\t\tisMultiChord: true,\n\t\t\t\tdispatchParts: ['ctrl+[KeyK]', 'ctrl+[Equal]'],\n\t\t\t\tsingleModifierDispatchParts: [null, null],\n\t\t\t}]\n\t\t);\n\t});\n\n\ttest('resolveKeybinding Ctrl+DownArrow', () => {\n\t\t_assertResolveKeybinding(\n\t\t\tKeyMod.CtrlCmd | KeyCode.DownArrow,\n\t\t\t[{\n\t\t\t\tlabel: 'Ctrl+DownArrow',\n\t\t\t\tariaLabel: 'Control+DownArrow',\n\t\t\t\telectronAccelerator: 'Ctrl+Down',\n\t\t\t\tuserSettingsLabel: 'ctrl+down',\n\t\t\t\tisWYSIWYG: true,\n\t\t\t\tisMultiChord: false,\n\t\t\t\tdispatchParts: ['ctrl+[ArrowDown]'],\n\t\t\t\tsingleModifierDispatchParts: [null],\n\t\t\t}]\n\t\t);\n\t});\n\n\ttest('resolveKeybinding Ctrl+NUMPAD_0', () => {\n\t\t_assertResolveKeybinding(\n\t\t\tKeyMod.CtrlCmd | KeyCode.Numpad0,\n\t\t\t[{\n\t\t\t\tlabel: 'Ctrl+NumPad0',\n\t\t\t\tariaLabel: 'Control+NumPad0',\n\t\t\t\telectronAccelerator: null,\n\t\t\t\tuserSettingsLabel: 'ctrl+numpad0',\n\t\t\t\tisWYSIWYG: true,\n\t\t\t\tisMultiChord: false,\n\t\t\t\tdispatchParts: ['ctrl+[Numpad0]'],\n\t\t\t\tsingleModifierDispatchParts: [null],\n\t\t\t}]\n\t\t);\n\t});\n\n\ttest('resolveKeybinding Ctrl+Home', () => {\n\t\t_assertResolveKeybinding(\n\t\t\tKeyMod.CtrlCmd | KeyCode.Home,\n\t\t\t[{\n\t\t\t\tlabel: 'Ctrl+Home',\n\t\t\t\tariaLabel: 'Control+Home',\n\t\t\t\telectronAccelerator: 'Ctrl+Home',\n\t\t\t\tuserSettingsLabel: 'ctrl+home',\n\t\t\t\tisWYSIWYG: true,\n\t\t\t\tisMultiChord: false,\n\t\t\t\tdispatchParts: ['ctrl+[Home]'],\n\t\t\t\tsingleModifierDispatchParts: [null],\n\t\t\t}]\n\t\t);\n\t});\n\n\ttest('resolveKeyboardEvent Ctrl+[Home]', () => {\n\t\tassertResolveKeyboardEvent(\n\t\t\tmapper,\n\t\t\t{\n\t\t\t\t_standardKeyboardEventBrand: true,\n\t\t\t\tctrlKey: true,\n\t\t\t\tshiftKey: false,\n\t\t\t\taltKey: false,\n\t\t\t\tmetaKey: false,\n\t\t\t\taltGraphKey: false,\n\t\t\t\tkeyCode: -1,\n\t\t\t\tcode: 'Home'\n\t\t\t},\n\t\t\t{\n\t\t\t\tlabel: 'Ctrl+Home',\n\t\t\t\tariaLabel: 'Control+Home',\n\t\t\t\telectronAccelerator: 'Ctrl+Home',\n\t\t\t\tuserSettingsLabel: 'ctrl+home',\n\t\t\t\tisWYSIWYG: true,\n\t\t\t\tisMultiChord: false,\n\t\t\t\tdispatchParts: ['ctrl+[Home]'],\n\t\t\t\tsingleModifierDispatchParts: [null],\n\t\t\t}\n\t\t);\n\t});\n\n\ttest('resolveKeybinding Ctrl+Shift+,', () => {\n\t\t_assertResolveKeybinding(\n\t\t\tKeyMod.CtrlCmd | KeyMod.Shift | KeyCode.Comma,\n\t\t\t[{\n\t\t\t\tlabel: 'Ctrl+Shift+,',\n\t\t\t\tariaLabel: 'Control+Shift+,',\n\t\t\t\telectronAccelerator: 'Ctrl+Shift+,',\n\t\t\t\tuserSettingsLabel: 'ctrl+shift+,',\n\t\t\t\tisWYSIWYG: true,\n\t\t\t\tisMultiChord: false,\n\t\t\t\tdispatchParts: ['ctrl+shift+[Comma]'],\n\t\t\t\tsingleModifierDispatchParts: [null],\n\t\t\t}, {\n\t\t\t\tlabel: 'Ctrl+<',\n\t\t\t\tariaLabel: 'Control+<',\n\t\t\t\telectronAccelerator: null,\n\t\t\t\tuserSettingsLabel: 'ctrl+[IntlBackslash]',\n\t\t\t\tisWYSIWYG: false,\n\t\t\t\tisMultiChord: false,\n\t\t\t\tdispatchParts: ['ctrl+[IntlBackslash]'],\n\t\t\t\tsingleModifierDispatchParts: [null],\n\t\t\t}]\n\t\t);\n\t});\n\n\ttest('issue #23393: resolveKeybinding Ctrl+Enter', () => {\n\t\t_assertResolveKeybinding(\n\t\t\tKeyMod.CtrlCmd | KeyCode.Enter,\n\t\t\t[{\n\t\t\t\tlabel: 'Ctrl+Enter',\n\t\t\t\tariaLabel: 'Control+Enter',\n\t\t\t\telectronAccelerator: 'Ctrl+Enter',\n\t\t\t\tuserSettingsLabel: 'ctrl+enter',\n\t\t\t\tisWYSIWYG: true,\n\t\t\t\tisMultiChord: false,\n\t\t\t\tdispatchParts: ['ctrl+[Enter]'],\n\t\t\t\tsingleModifierDispatchParts: [null],\n\t\t\t}]\n\t\t);\n\t});\n\n\ttest('issue #23393: resolveKeyboardEvent Ctrl+[NumpadEnter]', () => {\n\t\tassertResolveKeyboardEvent(\n\t\t\tmapper,\n\t\t\t{\n\t\t\t\t_standardKeyboardEventBrand: true,\n\t\t\t\tctrlKey: true,\n\t\t\t\tshiftKey: false,\n\t\t\t\taltKey: false,\n\t\t\t\tmetaKey: false,\n\t\t\t\taltGraphKey: false,\n\t\t\t\tkeyCode: -1,\n\t\t\t\tcode: 'NumpadEnter'\n\t\t\t},\n\t\t\t{\n\t\t\t\tlabel: 'Ctrl+Enter',\n\t\t\t\tariaLabel: 'Control+Enter',\n\t\t\t\telectronAccelerator: 'Ctrl+Enter',\n\t\t\t\tuserSettingsLabel: 'ctrl+enter',\n\t\t\t\tisWYSIWYG: true,\n\t\t\t\tisMultiChord: false,\n\t\t\t\tdispatchParts: ['ctrl+[Enter]'],\n\t\t\t\tsingleModifierDispatchParts: [null],\n\t\t\t}\n\t\t);\n\t});\n\n\ttest('resolveUserBinding Ctrl+[Comma] Ctrl+/', () => {\n\t\tassertResolveKeybinding(\n\t\t\tmapper, new Keybinding([\n\t\t\t\tnew ScanCodeChord(true, false, false, false, ScanCode.Comma),\n\t\t\t\tnew KeyCodeChord(true, false, false, false, KeyCode.Slash),\n\t\t\t]),\n\t\t\t[{\n\t\t\t\tlabel: 'Ctrl+, Ctrl+/',\n\t\t\t\tariaLabel: 'Control+, Control+/',\n\t\t\t\telectronAccelerator: null,\n\t\t\t\tuserSettingsLabel: 'ctrl+, ctrl+/',\n\t\t\t\tisWYSIWYG: true,\n\t\t\t\tisMultiChord: true,\n\t\t\t\tdispatchParts: ['ctrl+[Comma]', 'ctrl+[Slash]'],\n\t\t\t\tsingleModifierDispatchParts: [null, null],\n\t\t\t}]\n\t\t);\n\t});\n\n\ttest('resolveUserBinding Ctrl+[Comma]', () => {\n\t\tassertResolveKeybinding(\n\t\t\tmapper, new Keybinding([\n\t\t\t\tnew ScanCodeChord(true, false, false, false, ScanCode.Comma)\n\t\t\t]),\n\t\t\t[{\n\t\t\t\tlabel: 'Ctrl+,',\n\t\t\t\tariaLabel: 'Control+,',\n\t\t\t\telectronAccelerator: 'Ctrl+,',\n\t\t\t\tuserSettingsLabel: 'ctrl+,',\n\t\t\t\tisWYSIWYG: true,\n\t\t\t\tisMultiChord: false,\n\t\t\t\tdispatchParts: ['ctrl+[Comma]'],\n\t\t\t\tsingleModifierDispatchParts: [null],\n\t\t\t}]\n\t\t);\n\t});\n\n\ttest('resolveKeyboardEvent Single Modifier ControlLeft+', () => {\n\t\tassertResolveKeyboardEvent(\n\t\t\tmapper,\n\t\t\t{\n\t\t\t\t_standardKeyboardEventBrand: true,\n\t\t\t\tctrlKey: true,\n\t\t\t\tshiftKey: false,\n\t\t\t\taltKey: false,\n\t\t\t\tmetaKey: false,\n\t\t\t\taltGraphKey: false,\n\t\t\t\tkeyCode: -1,\n\t\t\t\tcode: 'ControlLeft'\n\t\t\t},\n\t\t\t{\n\t\t\t\tlabel: 'Ctrl',\n\t\t\t\tariaLabel: 'Control',\n\t\t\t\telectronAccelerator: null,\n\t\t\t\tuserSettingsLabel: 'ctrl',\n\t\t\t\tisWYSIWYG: true,\n\t\t\t\tisMultiChord: false,\n\t\t\t\tdispatchParts: [null],\n\t\t\t\tsingleModifierDispatchParts: ['ctrl'],\n\t\t\t}\n\t\t);\n\t});\n\n\ttest('resolveKeyboardEvent Single Modifier ControlRight+', () => {\n\t\tassertResolveKeyboardEvent(\n\t\t\tmapper,\n\t\t\t{\n\t\t\t\t_standardKeyboardEventBrand: true,\n\t\t\t\tctrlKey: true,\n\t\t\t\tshiftKey: false,\n\t\t\t\taltKey: false,\n\t\t\t\tmetaKey: false,\n\t\t\t\taltGraphKey: false,\n\t\t\t\tkeyCode: -1,\n\t\t\t\tcode: 'ControlRight'\n\t\t\t},\n\t\t\t{\n\t\t\t\tlabel: 'Ctrl',\n\t\t\t\tariaLabel: 'Control',\n\t\t\t\telectronAccelerator: null,\n\t\t\t\tuserSettingsLabel: 'ctrl',\n\t\t\t\tisWYSIWYG: true,\n\t\t\t\tisMultiChord: false,\n\t\t\t\tdispatchParts: [null],\n\t\t\t\tsingleModifierDispatchParts: ['ctrl'],\n\t\t\t}\n\t\t);\n\t});\n\n\ttest('resolveKeyboardEvent Single Modifier ShiftLeft+', () => {\n\t\tassertResolveKeyboardEvent(\n\t\t\tmapper,\n\t\t\t{\n\t\t\t\t_standardKeyboardEventBrand: true,\n\t\t\t\tctrlKey: false,\n\t\t\t\tshiftKey: true,\n\t\t\t\taltKey: false,\n\t\t\t\tmetaKey: false,\n\t\t\t\taltGraphKey: false,\n\t\t\t\tkeyCode: -1,\n\t\t\t\tcode: 'ShiftLeft'\n\t\t\t},\n\t\t\t{\n\t\t\t\tlabel: 'Shift',\n\t\t\t\tariaLabel: 'Shift',\n\t\t\t\telectronAccelerator: null,\n\t\t\t\tuserSettingsLabel: 'shift',\n\t\t\t\tisWYSIWYG: true,\n\t\t\t\tisMultiChord: false,\n\t\t\t\tdispatchParts: [null],\n\t\t\t\tsingleModifierDispatchParts: ['shift'],\n\t\t\t}\n\t\t);\n\t});\n\n\ttest('resolveKeyboardEvent Single Modifier ShiftRight+', () => {\n\t\tassertResolveKeyboardEvent(\n\t\t\tmapper,\n\t\t\t{\n\t\t\t\t_standardKeyboardEventBrand: true,\n\t\t\t\tctrlKey: false,\n\t\t\t\tshiftKey: true,\n\t\t\t\taltKey: false,\n\t\t\t\tmetaKey: false,\n\t\t\t\taltGraphKey: false,\n\t\t\t\tkeyCode: -1,\n\t\t\t\tcode: 'ShiftRight'\n\t\t\t},\n\t\t\t{\n\t\t\t\tlabel: 'Shift',\n\t\t\t\tariaLabel: 'Shift',\n\t\t\t\telectronAccelerator: null,\n\t\t\t\tuserSettingsLabel: 'shift',\n\t\t\t\tisWYSIWYG: true,\n\t\t\t\tisMultiChord: false,\n\t\t\t\tdispatchParts: [null],\n\t\t\t\tsingleModifierDispatchParts: ['shift'],\n\t\t\t}\n\t\t);\n\t});\n\n\ttest('resolveKeyboardEvent Single Modifier AltLeft+', () => {\n\t\tassertResolveKeyboardEvent(\n\t\t\tmapper,\n\t\t\t{\n\t\t\t\t_standardKeyboardEventBrand: true,\n\t\t\t\tctrlKey: false,\n\t\t\t\tshiftKey: false,\n\t\t\t\taltKey: true,\n\t\t\t\tmetaKey: false,\n\t\t\t\taltGraphKey: false,\n\t\t\t\tkeyCode: -1,\n\t\t\t\tcode: 'AltLeft'\n\t\t\t},\n\t\t\t{\n\t\t\t\tlabel: 'Alt',\n\t\t\t\tariaLabel: 'Alt',\n\t\t\t\telectronAccelerator: null,\n\t\t\t\tuserSettingsLabel: 'alt',\n\t\t\t\tisWYSIWYG: true,\n\t\t\t\tisMultiChord: false,\n\t\t\t\tdispatchParts: [null],\n\t\t\t\tsingleModifierDispatchParts: ['alt'],\n\t\t\t}\n\t\t);\n\t});\n\n\ttest('resolveKeyboardEvent Single Modifier AltRight+', () => {\n\t\tassertResolveKeyboardEvent(\n\t\t\tmapper,\n\t\t\t{\n\t\t\t\t_standardKeyboardEventBrand: true,\n\t\t\t\tctrlKey: false,\n\t\t\t\tshiftKey: false,\n\t\t\t\taltKey: true,\n\t\t\t\tmetaKey: false,\n\t\t\t\taltGraphKey: false,\n\t\t\t\tkeyCode: -1,\n\t\t\t\tcode: 'AltRight'\n\t\t\t},\n\t\t\t{\n\t\t\t\tlabel: 'Alt',\n\t\t\t\tariaLabel: 'Alt',\n\t\t\t\telectronAccelerator: null,\n\t\t\t\tuserSettingsLabel: 'alt',\n\t\t\t\tisWYSIWYG: true,\n\t\t\t\tisMultiChord: false,\n\t\t\t\tdispatchParts: [null],\n\t\t\t\tsingleModifierDispatchParts: ['alt'],\n\t\t\t}\n\t\t);\n\t});\n\n\ttest('resolveKeyboardEvent Single Modifier MetaLeft+', () => {\n\t\tassertResolveKeyboardEvent(\n\t\t\tmapper,\n\t\t\t{\n\t\t\t\t_standardKeyboardEventBrand: true,\n\t\t\t\tctrlKey: false,\n\t\t\t\tshiftKey: false,\n\t\t\t\taltKey: false,\n\t\t\t\tmetaKey: true,\n\t\t\t\taltGraphKey: false,\n\t\t\t\tkeyCode: -1,\n\t\t\t\tcode: 'MetaLeft'\n\t\t\t},\n\t\t\t{\n\t\t\t\tlabel: 'Super',\n\t\t\t\tariaLabel: 'Super',\n\t\t\t\telectronAccelerator: null,\n\t\t\t\tuserSettingsLabel: 'meta',\n\t\t\t\tisWYSIWYG: true,\n\t\t\t\tisMultiChord: false,\n\t\t\t\tdispatchParts: [null],\n\t\t\t\tsingleModifierDispatchParts: ['meta'],\n\t\t\t}\n\t\t);\n\t});\n\n\ttest('resolveKeyboardEvent Single Modifier MetaRight+', () => {\n\t\tassertResolveKeyboardEvent(\n\t\t\tmapper,\n\t\t\t{\n\t\t\t\t_standardKeyboardEventBrand: true,\n\t\t\t\tctrlKey: false,\n\t\t\t\tshiftKey: false,\n\t\t\t\taltKey: false,\n\t\t\t\tmetaKey: true,\n\t\t\t\taltGraphKey: false,\n\t\t\t\tkeyCode: -1,\n\t\t\t\tcode: 'MetaRight'\n\t\t\t},\n\t\t\t{\n\t\t\t\tlabel: 'Super',\n\t\t\t\tariaLabel: 'Super',\n\t\t\t\telectronAccelerator: null,\n\t\t\t\tuserSettingsLabel: 'meta',\n\t\t\t\tisWYSIWYG: true,\n\t\t\t\tisMultiChord: false,\n\t\t\t\tdispatchParts: [null],\n\t\t\t\tsingleModifierDispatchParts: ['meta'],\n\t\t\t}\n\t\t);\n\t});\n\n\ttest('resolveKeyboardEvent Only Modifiers Ctrl+Shift+', () => {\n\t\tassertResolveKeyboardEvent(\n\t\t\tmapper,\n\t\t\t{\n\t\t\t\t_standardKeyboardEventBrand: true,\n\t\t\t\tctrlKey: true,\n\t\t\t\tshiftKey: true,\n\t\t\t\taltKey: false,\n\t\t\t\tmetaKey: false,\n\t\t\t\taltGraphKey: false,\n\t\t\t\tkeyCode: -1,\n\t\t\t\tcode: 'ShiftLeft'\n\t\t\t},\n\t\t\t{\n\t\t\t\tlabel: 'Ctrl+Shift',\n\t\t\t\tariaLabel: 'Control+Shift',\n\t\t\t\telectronAccelerator: null,\n\t\t\t\tuserSettingsLabel: 'ctrl+shift',\n\t\t\t\tisWYSIWYG: true,\n\t\t\t\tisMultiChord: false,\n\t\t\t\tdispatchParts: [null],\n\t\t\t\tsingleModifierDispatchParts: [null],\n\t\t\t}\n\t\t);\n\t});\n\n\ttest('resolveKeyboardEvent mapAltGrToCtrlAlt AltGr+Z', async () => {\n\t\tconst mapper = await createKeyboardMapper(true, 'linux_en_us', true, OperatingSystem.Linux);\n\n\t\tassertResolveKeyboardEvent(\n\t\t\tmapper,\n\t\t\t{\n\t\t\t\t_standardKeyboardEventBrand: true,\n\t\t\t\tctrlKey: false,\n\t\t\t\tshiftKey: false,\n\t\t\t\taltKey: false,\n\t\t\t\tmetaKey: false,\n\t\t\t\taltGraphKey: true,\n\t\t\t\tkeyCode: -1,\n\t\t\t\tcode: 'KeyZ'\n\t\t\t},\n\t\t\t{\n\t\t\t\tlabel: 'Ctrl+Alt+Z',\n\t\t\t\tariaLabel: 'Control+Alt+Z',\n\t\t\t\telectronAccelerator: 'Ctrl+Alt+Z',\n\t\t\t\tuserSettingsLabel: 'ctrl+alt+z',\n\t\t\t\tisWYSIWYG: true,\n\t\t\t\tisMultiChord: false,\n\t\t\t\tdispatchParts: ['ctrl+alt+[KeyZ]'],\n\t\t\t\tsingleModifierDispatchParts: [null],\n\t\t\t}\n\t\t);\n\t});\n});\n\nsuite('keyboardMapper', () => {\n\n\tensureNoDisposablesAreLeakedInTestSuite();\n\n\ttest('issue #23706: Linux UK layout: Ctrl + Apostrophe also toggles terminal', () => {\n\t\tconst mapper = new MacLinuxKeyboardMapper(false, {\n\t\t\t'Backquote': {\n\t\t\t\t'value': '`',\n\t\t\t\t'withShift': '\u00AC',\n\t\t\t\t'withAltGr': '|',\n\t\t\t\t'withShiftAltGr': '|'\n\t\t\t}\n\t\t}, false, OperatingSystem.Linux);\n\n\t\tassertResolveKeyboardEvent(\n\t\t\tmapper,\n\t\t\t{\n\t\t\t\t_standardKeyboardEventBrand: true,\n\t\t\t\tctrlKey: true,\n\t\t\t\tshiftKey: false,\n\t\t\t\taltKey: false,\n\t\t\t\tmetaKey: false,\n\t\t\t\taltGraphKey: false,\n\t\t\t\tkeyCode: -1,\n\t\t\t\tcode: 'Backquote'\n\t\t\t},\n\t\t\t{\n\t\t\t\tlabel: 'Ctrl+`',\n\t\t\t\tariaLabel: 'Control+`',\n\t\t\t\telectronAccelerator: null,\n\t\t\t\tuserSettingsLabel: 'ctrl+`',\n\t\t\t\tisWYSIWYG: true,\n\t\t\t\tisMultiChord: false,\n\t\t\t\tdispatchParts: ['ctrl+[Backquote]'],\n\t\t\t\tsingleModifierDispatchParts: [null],\n\t\t\t}\n\t\t);\n\t});\n\n\ttest('issue #24064: NumLock/NumPad keys stopped working in 1.11 on Linux', () => {\n\t\tconst mapper = new MacLinuxKeyboardMapper(false, {}, false, OperatingSystem.Linux);\n\n\t\tfunction assertNumpadKeyboardEvent(keyCode: KeyCode, code: string, label: string, electronAccelerator: string | null, userSettingsLabel: string, dispatch: string): void {\n\t\t\tassertResolveKeyboardEvent(\n\t\t\t\tmapper,\n\t\t\t\t{\n\t\t\t\t\t_standardKeyboardEventBrand: true,\n\t\t\t\t\tctrlKey: false,\n\t\t\t\t\tshiftKey: false,\n\t\t\t\t\taltKey: false,\n\t\t\t\t\tmetaKey: false,\n\t\t\t\t\taltGraphKey: false,\n\t\t\t\t\tkeyCode: keyCode,\n\t\t\t\t\tcode: code\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tlabel: label,\n\t\t\t\t\tariaLabel: label,\n\t\t\t\t\telectronAccelerator: electronAccelerator,\n\t\t\t\t\tuserSettingsLabel: userSettingsLabel,\n\t\t\t\t\tisWYSIWYG: true,\n\t\t\t\t\tisMultiChord: false,\n\t\t\t\t\tdispatchParts: [dispatch],\n\t\t\t\t\tsingleModifierDispatchParts: [null],\n\t\t\t\t}\n\t\t\t);\n\t\t}\n\n\t\tassertNumpadKeyboardEvent(KeyCode.End, 'Numpad1', 'End', 'End', 'end', '[End]');\n\t\tassertNumpadKeyboardEvent(KeyCode.DownArrow, 'Numpad2', 'DownArrow', 'Down', 'down', '[ArrowDown]');\n\t\tassertNumpadKeyboardEvent(KeyCode.PageDown, 'Numpad3', 'PageDown', 'PageDown', 'pagedown', '[PageDown]');\n\t\tassertNumpadKeyboardEvent(KeyCode.LeftArrow, 'Numpad4', 'LeftArrow', 'Left', 'left', '[ArrowLeft]');\n\t\tassertNumpadKeyboardEvent(KeyCode.Unknown, 'Numpad5', 'NumPad5', null, 'numpad5', '[Numpad5]');\n\t\tassertNumpadKeyboardEvent(KeyCode.RightArrow, 'Numpad6', 'RightArrow', 'Right', 'right', '[ArrowRight]');\n\t\tassertNumpadKeyboardEvent(KeyCode.Home, 'Numpad7', 'Home', 'Home', 'home', '[Home]');\n\t\tassertNumpadKeyboardEvent(KeyCode.UpArrow, 'Numpad8', 'UpArrow', 'Up', 'up', '[ArrowUp]');\n\t\tassertNumpadKeyboardEvent(KeyCode.PageUp, 'Numpad9', 'PageUp', 'PageUp', 'pageup', '[PageUp]');\n\t\tassertNumpadKeyboardEvent(KeyCode.Insert, 'Numpad0', 'Insert', 'Insert', 'insert', '[Insert]');\n\t\tassertNumpadKeyboardEvent(KeyCode.Delete, 'NumpadDecimal', 'Delete', 'Delete', 'delete', '[Delete]');\n\t});\n\n\ttest('issue #24107: Delete, Insert, Home, End, PgUp, PgDn, and arrow keys no longer work editor in 1.11', () => {\n\t\tconst mapper = new MacLinuxKeyboardMapper(false, {}, false, OperatingSystem.Linux);\n\n\t\tfunction assertKeyboardEvent(keyCode: KeyCode, code: string, label: string, electronAccelerator: string, userSettingsLabel: string, dispatch: string): void {\n\t\t\tassertResolveKeyboardEvent(\n\t\t\t\tmapper,\n\t\t\t\t{\n\t\t\t\t\t_standardKeyboardEventBrand: true,\n\t\t\t\t\tctrlKey: false,\n\t\t\t\t\tshiftKey: false,\n\t\t\t\t\taltKey: false,\n\t\t\t\t\tmetaKey: false,\n\t\t\t\t\taltGraphKey: false,\n\t\t\t\t\tkeyCode: keyCode,\n\t\t\t\t\tcode: code\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tlabel: label,\n\t\t\t\t\tariaLabel: label,\n\t\t\t\t\telectronAccelerator: electronAccelerator,\n\t\t\t\t\tuserSettingsLabel: userSettingsLabel,\n\t\t\t\t\tisWYSIWYG: true,\n\t\t\t\t\tisMultiChord: false,\n\t\t\t\t\tdispatchParts: [dispatch],\n\t\t\t\t\tsingleModifierDispatchParts: [null],\n\t\t\t\t}\n\t\t\t);\n\t\t}\n\n\t\t// https://github.com/microsoft/vscode/issues/24107#issuecomment-292318497\n\t\tassertKeyboardEvent(KeyCode.UpArrow, 'Lang3', 'UpArrow', 'Up', 'up', '[ArrowUp]');\n\t\tassertKeyboardEvent(KeyCode.DownArrow, 'NumpadEnter', 'DownArrow', 'Down', 'down', '[ArrowDown]');\n\t\tassertKeyboardEvent(KeyCode.LeftArrow, 'Convert', 'LeftArrow', 'Left', 'left', '[ArrowLeft]');\n\t\tassertKeyboardEvent(KeyCode.RightArrow, 'NonConvert', 'RightArrow', 'Right', 'right', '[ArrowRight]');\n\t\tassertKeyboardEvent(KeyCode.Delete, 'PrintScreen', 'Delete', 'Delete', 'delete', '[Delete]');\n\t\tassertKeyboardEvent(KeyCode.Insert, 'NumpadDivide', 'Insert', 'Insert', 'insert', '[Insert]');\n\t\tassertKeyboardEvent(KeyCode.End, 'Unknown', 'End', 'End', 'end', '[End]');\n\t\tassertKeyboardEvent(KeyCode.Home, 'IntlRo', 'Home', 'Home', 'home', '[Home]');\n\t\tassertKeyboardEvent(KeyCode.PageDown, 'ControlRight', 'PageDown', 'PageDown', 'pagedown', '[PageDown]');\n\t\tassertKeyboardEvent(KeyCode.PageUp, 'Lang4', 'PageUp', 'PageUp', 'pageup', '[PageUp]');\n\n\t\t// https://github.com/microsoft/vscode/issues/24107#issuecomment-292323924\n\t\tassertKeyboardEvent(KeyCode.PageDown, 'ControlRight', 'PageDown', 'PageDown', 'pagedown', '[PageDown]');\n\t\tassertKeyboardEvent(KeyCode.PageUp, 'Lang4', 'PageUp', 'PageUp', 'pageup', '[PageUp]');\n\t\tassertKeyboardEvent(KeyCode.End, '', 'End', 'End', 'end', '[End]');\n\t\tassertKeyboardEvent(KeyCode.Home, 'IntlRo', 'Home', 'Home', 'home', '[Home]');\n\t\tassertKeyboardEvent(KeyCode.Delete, 'PrintScreen', 'Delete', 'Delete', 'delete', '[Delete]');\n\t\tassertKeyboardEvent(KeyCode.Insert, 'NumpadDivide', 'Insert', 'Insert', 'insert', '[Insert]');\n\t\tassertKeyboardEvent(KeyCode.RightArrow, 'NonConvert', 'RightArrow', 'Right', 'right', '[ArrowRight]');\n\t\tassertKeyboardEvent(KeyCode.LeftArrow, 'Convert', 'LeftArrow', 'Left', 'left', '[ArrowLeft]');\n\t\tassertKeyboardEvent(KeyCode.DownArrow, 'NumpadEnter', 'DownArrow', 'Down', 'down', '[ArrowDown]');\n\t\tassertKeyboardEvent(KeyCode.UpArrow, 'Lang3', 'UpArrow', 'Up', 'up', '[ArrowUp]');\n\t});\n});\n\nsuite('keyboardMapper - LINUX ru', () => {\n\n\tensureNoDisposablesAreLeakedInTestSuite();\n\n\tlet mapper: MacLinuxKeyboardMapper;\n\n\tsuiteSetup(async () => {\n\t\tconst _mapper = await createKeyboardMapper(false, 'linux_ru', false, OperatingSystem.Linux);\n\t\tmapper = _mapper;\n\t});\n\n\ttest('mapping', () => {\n\t\treturn assertMapping(WRITE_FILE_IF_DIFFERENT, mapper, 'linux_ru.txt');\n\t});\n\n\tfunction _assertResolveKeybinding(k: number, expected: IResolvedKeybinding[]): void {\n\t\tassertResolveKeybinding(mapper, decodeKeybinding(k, OperatingSystem.Linux)!, expected);\n\t}\n\n\ttest('resolveKeybinding Ctrl+S', () => {\n\t\t_assertResolveKeybinding(\n\t\t\tKeyMod.CtrlCmd | KeyCode.KeyS,\n\t\t\t[{\n\t\t\t\tlabel: 'Ctrl+S',\n\t\t\t\tariaLabel: 'Control+S',\n\t\t\t\telectronAccelerator: 'Ctrl+S',\n\t\t\t\tuserSettingsLabel: 'ctrl+s',\n\t\t\t\tisWYSIWYG: true,\n\t\t\t\tisMultiChord: false,\n\t\t\t\tdispatchParts: ['ctrl+[KeyS]'],\n\t\t\t\tsingleModifierDispatchParts: [null],\n\t\t\t}]\n\t\t);\n\t});\n});\n\nsuite('keyboardMapper - LINUX en_uk', () => {\n\n\tensureNoDisposablesAreLeakedInTestSuite();\n\n\tlet mapper: MacLinuxKeyboardMapper;\n\n\tsuiteSetup(async () => {\n\t\tconst _mapper = await createKeyboardMapper(false, 'linux_en_uk', false, OperatingSystem.Linux);\n\t\tmapper = _mapper;\n\t});\n\n\ttest('mapping', () => {\n\t\treturn assertMapping(WRITE_FILE_IF_DIFFERENT, mapper, 'linux_en_uk.txt');\n\t});\n\n\ttest('issue #24522: resolveKeyboardEvent Ctrl+Alt+[Minus]', () => {\n\t\tassertResolveKeyboardEvent(\n\t\t\tmapper,\n\t\t\t{\n\t\t\t\t_standardKeyboardEventBrand: true,\n\t\t\t\tctrlKey: true,\n\t\t\t\tshiftKey: false,\n\t\t\t\taltKey: true,\n\t\t\t\tmetaKey: false,\n\t\t\t\taltGraphKey: false,\n\t\t\t\tkeyCode: -1,\n\t\t\t\tcode: 'Minus'\n\t\t\t},\n\t\t\t{\n\t\t\t\tlabel: 'Ctrl+Alt+-',\n\t\t\t\tariaLabel: 'Control+Alt+-',\n\t\t\t\telectronAccelerator: null,\n\t\t\t\tuserSettingsLabel: 'ctrl+alt+[Minus]',\n\t\t\t\tisWYSIWYG: false,\n\t\t\t\tisMultiChord: false,\n\t\t\t\tdispatchParts: ['ctrl+alt+[Minus]'],\n\t\t\t\tsingleModifierDispatchParts: [null],\n\t\t\t}\n\t\t);\n\t});\n});\n\nsuite('keyboardMapper - MAC zh_hant', () => {\n\n\tensureNoDisposablesAreLeakedInTestSuite();\n\n\tlet mapper: MacLinuxKeyboardMapper;\n\n\tsuiteSetup(async () => {\n\t\tconst _mapper = await createKeyboardMapper(false, 'mac_zh_hant', false, OperatingSystem.Macintosh);\n\t\tmapper = _mapper;\n\t});\n\n\ttest('mapping', () => {\n\t\treturn assertMapping(WRITE_FILE_IF_DIFFERENT, mapper, 'mac_zh_hant.txt');\n\t});\n\n\tfunction _assertResolveKeybinding(k: number, expected: IResolvedKeybinding[]): void {\n\t\tassertResolveKeybinding(mapper, decodeKeybinding(k, OperatingSystem.Macintosh)!, expected);\n\t}\n\n\ttest('issue #28237 resolveKeybinding Cmd+C', () => {\n\t\t_assertResolveKeybinding(\n\t\t\tKeyMod.CtrlCmd | KeyCode.KeyC,\n\t\t\t[{\n\t\t\t\tlabel: '\u2318C',\n\t\t\t\tariaLabel: 'Command+C',\n\t\t\t\telectronAccelerator: 'Cmd+C',\n\t\t\t\tuserSettingsLabel: 'cmd+c',\n\t\t\t\tisWYSIWYG: true,\n\t\t\t\tisMultiChord: false,\n\t\t\t\tdispatchParts: ['meta+[KeyC]'],\n\t\t\t\tsingleModifierDispatchParts: [null],\n\t\t\t}]\n\t\t);\n\t});\n});\n\nsuite('keyboardMapper - MAC zh_hant2', () => {\n\n\tensureNoDisposablesAreLeakedInTestSuite();\n\n\tlet mapper: MacLinuxKeyboardMapper;\n\n\tsuiteSetup(async () => {\n\t\tconst _mapper = await createKeyboardMapper(false, 'mac_zh_hant2', false, OperatingSystem.Macintosh);\n\t\tmapper = _mapper;\n\t});\n\n\ttest('mapping', () => {\n\t\treturn assertMapping(WRITE_FILE_IF_DIFFERENT, mapper, 'mac_zh_hant2.txt');\n\t});\n});\n\nfunction _assertKeybindingTranslation(mapper: MacLinuxKeyboardMapper, OS: OperatingSystem, kb: number, _expected: string | string[]): void {\n\tlet expected: string[];\n\tif (typeof _expected === 'string') {\n\t\texpected = [_expected];\n\t} else if (Array.isArray(_expected)) {\n\t\texpected = _expected;\n\t} else {\n\t\texpected = [];\n\t}\n\n\tconst runtimeKeybinding = createSimpleKeybinding(kb, OS);\n\n\tconst keybindingLabel = new USLayoutResolvedKeybinding([runtimeKeybinding], OS).getUserSettingsLabel();\n\n\tconst actualHardwareKeypresses = mapper.keyCodeChordToScanCodeChord(runtimeKeybinding);\n\tif (actualHardwareKeypresses.length === 0) {\n\t\tassert.deepStrictEqual([], expected, `simpleKeybindingToHardwareKeypress -- \"${keybindingLabel}\" -- actual: \"[]\" -- expected: \"${expected}\"`);\n\t\treturn;\n\t}\n\n\tconst actual = actualHardwareKeypresses\n\t\t.map(k => UserSettingsLabelProvider.toLabel(OS, [k], (keybinding) => ScanCodeUtils.toString(keybinding.scanCode)));\n\tassert.deepStrictEqual(actual, expected, `simpleKeybindingToHardwareKeypress -- \"${keybindingLabel}\" -- actual: \"${actual}\" -- expected: \"${expected}\"`);\n}\n"],
  "mappings": ";;AAKA,OAAO,YAAY;AACnB,SAAS,UAAU,SAAS,QAAQ,UAAU,qBAAqB;AACnE,SAAS,cAAc,kBAAkB,wBAAwB,eAAe,kBAAkB;AAClG,SAAS,iCAAiC;AAC1C,SAAS,uBAAuB;AAChC,SAAS,kCAAkC;AAC3C,SAAS,8BAA8B;AACvC,SAAS,qBAAqB,eAAe,4BAA4B,yBAAyB,sBAAsB;AACxH,SAAS,gCAAgC;AACzC,SAAS,+CAA+C;AAExD,MAAM,0BAA0B;AAEhC,eAAe,qBAAqB,cAAuB,MAAc,mBAA4B,IAAsD;AAC1J,QAAM,cAAc,MAAM,eAAyC,IAAI;AACvE,SAAO,IAAI,uBAAuB,cAAc,aAAa,mBAAmB,EAAE;AACnF;AAHe;AAKf,MAAM,8BAA8B,MAAM;AAEzC,0CAAwC;AAExC,MAAI;AAEJ,aAAW,YAAY;AACtB,UAAM,UAAU,MAAM,qBAAqB,OAAO,aAAa,OAAO,gBAAgB,SAAS;AAC/F,aAAS;AAAA,EACV,CAAC;AAED,OAAK,WAAW,MAAM;AACrB,WAAO,cAAc,yBAAyB,QAAQ,eAAe;AAAA,EACtE,CAAC;AAED,WAAS,4BAA4B,IAAY,UAAmC;AACnF,iCAA6B,QAAQ,gBAAgB,WAAW,IAAI,QAAQ;AAAA,EAC7E;AAFS;AAIT,WAAS,yBAAyB,GAAW,UAAuC;AACnF,4BAAwB,QAAQ,iBAAiB,GAAG,gBAAgB,SAAS,GAAI,QAAQ;AAAA,EAC1F;AAFS;AAIT,OAAK,YAAY,MAAM;AAEtB,gCAA4B,OAAO,UAAU,QAAQ,QAAQ,YAAY;AACzE,gCAA4B,OAAO,UAAU,QAAQ,MAAM,UAAU;AACrE,gCAA4B,OAAO,UAAU,OAAO,QAAQ,QAAQ,MAAM,gBAAgB;AAC1F,gCAA4B,OAAO,UAAU,OAAO,QAAQ,OAAO,MAAM,OAAO,UAAU,QAAQ,MAAM,yBAAyB;AAGjI,gCAA4B,OAAO,UAAU,QAAQ,MAAM,UAAU;AACrE,gCAA4B,OAAO,UAAU,QAAQ,MAAM,UAAU;AAGrE,gCAA4B,OAAO,UAAU,QAAQ,OAAO,kBAAkB;AAAA,EAC/E,CAAC;AAED,OAAK,2BAA2B,MAAM;AACrC;AAAA,MACC,OAAO,UAAU,QAAQ;AAAA,MACzB,CAAC;AAAA,QACA,OAAO;AAAA,QACP,WAAW;AAAA,QACX,qBAAqB;AAAA,QACrB,mBAAmB;AAAA,QACnB,WAAW;AAAA,QACX,cAAc;AAAA,QACd,eAAe,CAAC,aAAa;AAAA,QAC7B,6BAA6B,CAAC,IAAI;AAAA,MACnC,CAAC;AAAA,IACF;AAAA,EACD,CAAC;AAED,OAAK,2BAA2B,MAAM;AACrC;AAAA,MACC,OAAO,UAAU,QAAQ;AAAA,MACzB,CAAC;AAAA,QACA,OAAO;AAAA,QACP,WAAW;AAAA,QACX,qBAAqB;AAAA,QACrB,mBAAmB;AAAA,QACnB,WAAW;AAAA,QACX,cAAc;AAAA,QACd,eAAe,CAAC,aAAa;AAAA,QAC7B,6BAA6B,CAAC,IAAI;AAAA,MACnC,CAAC;AAAA,IACF;AAAA,EACD,CAAC;AAED,OAAK,2BAA2B,MAAM;AACrC;AAAA,MACC,OAAO,UAAU,QAAQ;AAAA,MACzB,CAAC;AAAA,QACA,OAAO;AAAA,QACP,WAAW;AAAA,QACX,qBAAqB;AAAA,QACrB,mBAAmB;AAAA,QACnB,WAAW;AAAA,QACX,cAAc;AAAA,QACd,eAAe,CAAC,aAAa;AAAA,QAC7B,6BAA6B,CAAC,IAAI;AAAA,MACnC,CAAC;AAAA,IACF;AAAA,EACD,CAAC;AAED,OAAK,mCAAmC,MAAM;AAC7C;AAAA,MACC;AAAA,MACA;AAAA,QACC,6BAA6B;AAAA,QAC7B,SAAS;AAAA,QACT,UAAU;AAAA,QACV,QAAQ;AAAA,QACR,SAAS;AAAA,QACT,aAAa;AAAA,QACb,SAAS;AAAA,QACT,MAAM;AAAA,MACP;AAAA,MACA;AAAA,QACC,OAAO;AAAA,QACP,WAAW;AAAA,QACX,qBAAqB;AAAA,QACrB,mBAAmB;AAAA,QACnB,WAAW;AAAA,QACX,cAAc;AAAA,QACd,eAAe,CAAC,aAAa;AAAA,QAC7B,6BAA6B,CAAC,IAAI;AAAA,MACnC;AAAA,IACD;AAAA,EACD,CAAC;AAED,OAAK,2BAA2B,MAAM;AACrC;AAAA,MACC,OAAO,UAAU,QAAQ;AAAA,MACzB,CAAC;AAAA,QACA,OAAO;AAAA,QACP,WAAW;AAAA,QACX,qBAAqB;AAAA,QACrB,mBAAmB;AAAA,QACnB,WAAW;AAAA,QACX,cAAc;AAAA,QACd,eAAe,CAAC,wBAAwB;AAAA,QACxC,6BAA6B,CAAC,IAAI;AAAA,MACnC,CAAC;AAAA,IACF;AAAA,EACD,CAAC;AAED,OAAK,2CAA2C,MAAM;AACrD;AAAA,MACC;AAAA,MACA;AAAA,QACC,6BAA6B;AAAA,QAC7B,SAAS;AAAA,QACT,UAAU;AAAA,QACV,QAAQ;AAAA,QACR,SAAS;AAAA,QACT,aAAa;AAAA,QACb,SAAS;AAAA,QACT,MAAM;AAAA,MACP;AAAA,MACA;AAAA,QACC,OAAO;AAAA,QACP,WAAW;AAAA,QACX,qBAAqB;AAAA,QACrB,mBAAmB;AAAA,QACnB,WAAW;AAAA,QACX,cAAc;AAAA,QACd,eAAe,CAAC,qBAAqB;AAAA,QACrC,6BAA6B,CAAC,IAAI;AAAA,MACnC;AAAA,IACD;AAAA,EACD,CAAC;AAED,OAAK,6BAA6B,MAAM;AACvC;AAAA,MACC,OAAO,QAAQ,QAAQ;AAAA,MACvB,CAAC;AAAA,QACA,OAAO;AAAA,QACP,WAAW;AAAA,QACX,qBAAqB;AAAA,QACrB,mBAAmB;AAAA,QACnB,WAAW;AAAA,QACX,cAAc;AAAA,QACd,eAAe,CAAC,mBAAmB;AAAA,QACnC,6BAA6B,CAAC,IAAI;AAAA,MACnC,CAAC;AAAA,IACF;AAAA,EACD,CAAC;AAED,OAAK,2BAA2B,MAAM;AACrC;AAAA,MACC,OAAO,UAAU,QAAQ;AAAA,MACzB,CAAC;AAAA,QACA,OAAO;AAAA,QACP,WAAW;AAAA,QACX,qBAAqB;AAAA,QACrB,mBAAmB;AAAA,QACnB,WAAW;AAAA,QACX,cAAc;AAAA,QACd,eAAe,CAAC,qBAAqB;AAAA,QACrC,6BAA6B,CAAC,IAAI;AAAA,MACnC,CAAC;AAAA,IACF;AAAA,EACD,CAAC;AAED,OAAK,iCAAiC,MAAM;AAC3C;AAAA,MACC,OAAO,UAAU,OAAO,QAAQ,QAAQ;AAAA,MACxC,CAAC;AAAA,QACA,OAAO;AAAA,QACP,WAAW;AAAA,QACX,qBAAqB;AAAA,QACrB,mBAAmB;AAAA,QACnB,WAAW;AAAA,QACX,cAAc;AAAA,QACd,eAAe,CAAC,oBAAoB;AAAA,QACpC,6BAA6B,CAAC,IAAI;AAAA,MACnC,CAAC;AAAA,IACF;AAAA,EACD,CAAC;AAED,OAAK,kCAAkC,MAAM;AAC5C;AAAA,MACC,SAAS,OAAO,UAAU,QAAQ,MAAM,OAAO,UAAU,QAAQ,SAAS;AAAA,MAC1E,CAAC;AAAA,QACA,OAAO;AAAA,QACP,WAAW;AAAA,QACX,qBAAqB;AAAA,QACrB,mBAAmB;AAAA,QACnB,WAAW;AAAA,QACX,cAAc;AAAA,QACd,eAAe,CAAC,eAAe,8BAA8B;AAAA,QAC7D,6BAA6B,CAAC,MAAM,IAAI;AAAA,MACzC,CAAC;AAAA,IACF;AAAA,EACD,CAAC;AAED,OAAK,iCAAiC,MAAM;AAC3C;AAAA,MACC,SAAS,OAAO,UAAU,QAAQ,MAAM,OAAO,UAAU,QAAQ,KAAK;AAAA,MACtE,CAAC;AAAA,QACA,OAAO;AAAA,QACP,WAAW;AAAA,QACX,qBAAqB;AAAA,QACrB,mBAAmB;AAAA,QACnB,WAAW;AAAA,QACX,cAAc;AAAA,QACd,eAAe,CAAC,eAAe,qBAAqB;AAAA,QACpD,6BAA6B,CAAC,MAAM,IAAI;AAAA,MACzC,CAAC;AAAA,IACF;AAAA,EACD,CAAC;AAED,OAAK,mCAAmC,MAAM;AAC7C;AAAA,MACC,OAAO,UAAU,QAAQ;AAAA,MACzB,CAAC;AAAA,QACA,OAAO;AAAA,QACP,WAAW;AAAA,QACX,qBAAqB;AAAA,QACrB,mBAAmB;AAAA,QACnB,WAAW;AAAA,QACX,cAAc;AAAA,QACd,eAAe,CAAC,kBAAkB;AAAA,QAClC,6BAA6B,CAAC,IAAI;AAAA,MACnC,CAAC;AAAA,IACF;AAAA,EACD,CAAC;AAED,OAAK,kCAAkC,MAAM;AAC5C;AAAA,MACC,OAAO,UAAU,QAAQ;AAAA,MACzB,CAAC;AAAA,QACA,OAAO;AAAA,QACP,WAAW;AAAA,QACX,qBAAqB;AAAA,QACrB,mBAAmB;AAAA,QACnB,WAAW;AAAA,QACX,cAAc;AAAA,QACd,eAAe,CAAC,gBAAgB;AAAA,QAChC,6BAA6B,CAAC,IAAI;AAAA,MACnC,CAAC;AAAA,IACF;AAAA,EACD,CAAC;AAED,OAAK,+BAA+B,MAAM;AACzC;AAAA,MACC,OAAO,UAAU,QAAQ;AAAA,MACzB,CAAC;AAAA,QACA,OAAO;AAAA,QACP,WAAW;AAAA,QACX,qBAAqB;AAAA,QACrB,mBAAmB;AAAA,QACnB,WAAW;AAAA,QACX,cAAc;AAAA,QACd,eAAe,CAAC,aAAa;AAAA,QAC7B,6BAA6B,CAAC,IAAI;AAAA,MACnC,CAAC;AAAA,IACF;AAAA,EACD,CAAC;AAED,OAAK,oCAAoC,MAAM;AAC9C;AAAA,MACC;AAAA,MACA;AAAA,QACC,6BAA6B;AAAA,QAC7B,SAAS;AAAA,QACT,UAAU;AAAA,QACV,QAAQ;AAAA,QACR,SAAS;AAAA,QACT,aAAa;AAAA,QACb,SAAS;AAAA,QACT,MAAM;AAAA,MACP;AAAA,MACA;AAAA,QACC,OAAO;AAAA,QACP,WAAW;AAAA,QACX,qBAAqB;AAAA,QACrB,mBAAmB;AAAA,QACnB,WAAW;AAAA,QACX,cAAc;AAAA,QACd,eAAe,CAAC,aAAa;AAAA,QAC7B,6BAA6B,CAAC,IAAI;AAAA,MACnC;AAAA,IACD;AAAA,EACD,CAAC;AAED,OAAK,wCAAwC,MAAM;AAClD;AAAA,MACC;AAAA,MACA,IAAI,WAAW;AAAA,QACd,IAAI,cAAc,OAAO,OAAO,OAAO,MAAM,SAAS,KAAK;AAAA,QAC3D,IAAI,aAAa,OAAO,OAAO,OAAO,MAAM,QAAQ,KAAK;AAAA,MAC1D,CAAC;AAAA,MACD,CAAC;AAAA,QACA,OAAO;AAAA,QACP,WAAW;AAAA,QACX,qBAAqB;AAAA,QACrB,mBAAmB;AAAA,QACnB,WAAW;AAAA,QACX,cAAc;AAAA,QACd,eAAe,CAAC,gBAAgB,qBAAqB;AAAA,QACrD,6BAA6B,CAAC,MAAM,IAAI;AAAA,MACzC,CAAC;AAAA,IACF;AAAA,EACD,CAAC;AAED,OAAK,kDAAkD,MAAM;AAC5D;AAAA,MACC;AAAA,MACA;AAAA,QACC,6BAA6B;AAAA,QAC7B,SAAS;AAAA,QACT,UAAU;AAAA,QACV,QAAQ;AAAA,QACR,SAAS;AAAA,QACT,aAAa;AAAA,QACb,SAAS;AAAA,QACT,MAAM;AAAA,MACP;AAAA,MACA;AAAA,QACC,OAAO;AAAA,QACP,WAAW;AAAA,QACX,qBAAqB;AAAA,QACrB,mBAAmB;AAAA,QACnB,WAAW;AAAA,QACX,cAAc;AAAA,QACd,eAAe,CAAC,IAAI;AAAA,QACpB,6BAA6B,CAAC,MAAM;AAAA,MACrC;AAAA,IACD;AAAA,EACD,CAAC;AAED,OAAK,mDAAmD,MAAM;AAC7D;AAAA,MACC;AAAA,MACA;AAAA,QACC,6BAA6B;AAAA,QAC7B,SAAS;AAAA,QACT,UAAU;AAAA,QACV,QAAQ;AAAA,QACR,SAAS;AAAA,QACT,aAAa;AAAA,QACb,SAAS;AAAA,QACT,MAAM;AAAA,MACP;AAAA,MACA;AAAA,QACC,OAAO;AAAA,QACP,WAAW;AAAA,QACX,qBAAqB;AAAA,QACrB,mBAAmB;AAAA,QACnB,WAAW;AAAA,QACX,cAAc;AAAA,QACd,eAAe,CAAC,IAAI;AAAA,QACpB,6BAA6B,CAAC,MAAM;AAAA,MACrC;AAAA,IACD;AAAA,EACD,CAAC;AACF,CAAC;AAED,MAAM,8BAA8B,MAAM;AAEzC,0CAAwC;AAExC,MAAI;AAEJ,aAAW,YAAY;AACtB,UAAM,UAAU,MAAM,qBAAqB,MAAM,aAAa,OAAO,gBAAgB,SAAS;AAC9F,aAAS;AAAA,EACV,CAAC;AAED,OAAK,WAAW,MAAM;AACrB,WAAO,cAAc,yBAAyB,QAAQ,eAAe;AAAA,EACtE,CAAC;AAED,OAAK,wCAAwC,MAAM;AAClD;AAAA,MACC;AAAA,MACA,IAAI,WAAW;AAAA,QACd,IAAI,cAAc,OAAO,OAAO,OAAO,MAAM,SAAS,KAAK;AAAA,QAC3D,IAAI,aAAa,OAAO,OAAO,OAAO,MAAM,QAAQ,KAAK;AAAA,MAC1D,CAAC;AAAA,MACD,CAAC;AAAA,QACA,OAAO;AAAA,QACP,WAAW;AAAA,QACX,qBAAqB;AAAA,QACrB,mBAAmB;AAAA,QACnB,WAAW;AAAA,QACX,cAAc;AAAA,QACd,eAAe,CAAC,gBAAgB,cAAc;AAAA,QAC9C,6BAA6B,CAAC,MAAM,IAAI;AAAA,MACzC,CAAC;AAAA,IACF;AAAA,EACD,CAAC;AAED,OAAK,kDAAkD,MAAM;AAC5D;AAAA,MACC;AAAA,MACA;AAAA,QACC,6BAA6B;AAAA,QAC7B,SAAS;AAAA,QACT,UAAU;AAAA,QACV,QAAQ;AAAA,QACR,SAAS;AAAA,QACT,aAAa;AAAA,QACb,SAAS;AAAA,QACT,MAAM;AAAA,MACP;AAAA,MACA;AAAA,QACC,OAAO;AAAA,QACP,WAAW;AAAA,QACX,qBAAqB;AAAA,QACrB,mBAAmB;AAAA,QACnB,WAAW;AAAA,QACX,cAAc;AAAA,QACd,eAAe,CAAC,IAAI;AAAA,QACpB,6BAA6B,CAAC,MAAM;AAAA,MACrC;AAAA,IACD;AAAA,EACD,CAAC;AAED,OAAK,mDAAmD,MAAM;AAC7D;AAAA,MACC;AAAA,MACA;AAAA,QACC,6BAA6B;AAAA,QAC7B,SAAS;AAAA,QACT,UAAU;AAAA,QACV,QAAQ;AAAA,QACR,SAAS;AAAA,QACT,aAAa;AAAA,QACb,SAAS;AAAA,QACT,MAAM;AAAA,MACP;AAAA,MACA;AAAA,QACC,OAAO;AAAA,QACP,WAAW;AAAA,QACX,qBAAqB;AAAA,QACrB,mBAAmB;AAAA,QACnB,WAAW;AAAA,QACX,cAAc;AAAA,QACd,eAAe,CAAC,IAAI;AAAA,QACpB,6BAA6B,CAAC,MAAM;AAAA,MACrC;AAAA,IACD;AAAA,EACD,CAAC;AAED,OAAK,kDAAkD,YAAY;AAClE,UAAMA,UAAS,MAAM,qBAAqB,MAAM,aAAa,MAAM,gBAAgB,SAAS;AAE5F;AAAA,MACCA;AAAA,MACA;AAAA,QACC,6BAA6B;AAAA,QAC7B,SAAS;AAAA,QACT,UAAU;AAAA,QACV,QAAQ;AAAA,QACR,SAAS;AAAA,QACT,aAAa;AAAA,QACb,SAAS;AAAA,QACT,MAAM;AAAA,MACP;AAAA,MACA;AAAA,QACC,OAAO;AAAA,QACP,WAAW;AAAA,QACX,qBAAqB;AAAA,QACrB,mBAAmB;AAAA,QACnB,WAAW;AAAA,QACX,cAAc;AAAA,QACd,eAAe,CAAC,iBAAiB;AAAA,QACjC,6BAA6B,CAAC,IAAI;AAAA,MACnC;AAAA,IACD;AAAA,EACD,CAAC;AACF,CAAC;AAED,MAAM,gCAAgC,MAAM;AAE3C,0CAAwC;AAExC,MAAI;AAEJ,aAAW,YAAY;AACtB,UAAM,UAAU,MAAM,qBAAqB,OAAO,eAAe,OAAO,gBAAgB,KAAK;AAC7F,aAAS;AAAA,EACV,CAAC;AAED,OAAK,WAAW,MAAM;AACrB,WAAO,cAAc,yBAAyB,QAAQ,iBAAiB;AAAA,EACxE,CAAC;AAED,WAAS,4BAA4B,IAAY,UAAmC;AACnF,iCAA6B,QAAQ,gBAAgB,OAAO,IAAI,QAAQ;AAAA,EACzE;AAFS;AAIT,WAAS,yBAAyB,GAAW,UAAuC;AACnF,4BAAwB,QAAQ,iBAAiB,GAAG,gBAAgB,KAAK,GAAI,QAAQ;AAAA,EACtF;AAFS;AAIT,OAAK,YAAY,MAAM;AAEtB,gCAA4B,OAAO,UAAU,QAAQ,QAAQ,aAAa;AAC1E,gCAA4B,OAAO,UAAU,QAAQ,MAAM,WAAW;AACtE,gCAA4B,OAAO,UAAU,OAAO,QAAQ,QAAQ,MAAM,iBAAiB;AAC3F,gCAA4B,OAAO,UAAU,OAAO,QAAQ,OAAO,MAAM,OAAO,UAAU,QAAQ,MAAM,0BAA0B;AAGlI,gCAA4B,OAAO,UAAU,QAAQ,MAAM,WAAW;AACtE,gCAA4B,OAAO,UAAU,QAAQ,MAAM,WAAW;AAGtE,gCAA4B,OAAO,UAAU,QAAQ,OAAO,mBAAmB;AAAA,EAChF,CAAC;AAED,OAAK,4BAA4B,MAAM;AACtC;AAAA,MACC,OAAO,UAAU,QAAQ;AAAA,MACzB,CAAC;AAAA,QACA,OAAO;AAAA,QACP,WAAW;AAAA,QACX,qBAAqB;AAAA,QACrB,mBAAmB;AAAA,QACnB,WAAW;AAAA,QACX,cAAc;AAAA,QACd,eAAe,CAAC,aAAa;AAAA,QAC7B,6BAA6B,CAAC,IAAI;AAAA,MACnC,CAAC;AAAA,IACF;AAAA,EACD,CAAC;AAED,OAAK,4BAA4B,MAAM;AACtC;AAAA,MACC,OAAO,UAAU,QAAQ;AAAA,MACzB,CAAC;AAAA,QACA,OAAO;AAAA,QACP,WAAW;AAAA,QACX,qBAAqB;AAAA,QACrB,mBAAmB;AAAA,QACnB,WAAW;AAAA,QACX,cAAc;AAAA,QACd,eAAe,CAAC,aAAa;AAAA,QAC7B,6BAA6B,CAAC,IAAI;AAAA,MACnC,CAAC;AAAA,IACF;AAAA,EACD,CAAC;AAED,OAAK,oCAAoC,MAAM;AAC9C;AAAA,MACC;AAAA,MACA;AAAA,QACC,6BAA6B;AAAA,QAC7B,SAAS;AAAA,QACT,UAAU;AAAA,QACV,QAAQ;AAAA,QACR,SAAS;AAAA,QACT,aAAa;AAAA,QACb,SAAS;AAAA,QACT,MAAM;AAAA,MACP;AAAA,MACA;AAAA,QACC,OAAO;AAAA,QACP,WAAW;AAAA,QACX,qBAAqB;AAAA,QACrB,mBAAmB;AAAA,QACnB,WAAW;AAAA,QACX,cAAc;AAAA,QACd,eAAe,CAAC,aAAa;AAAA,QAC7B,6BAA6B,CAAC,IAAI;AAAA,MACnC;AAAA,IACD;AAAA,EACD,CAAC;AAED,OAAK,4BAA4B,MAAM;AACtC;AAAA,MACC,OAAO,UAAU,QAAQ;AAAA,MACzB,CAAC;AAAA,IACF;AAAA,EACD,CAAC;AAED,OAAK,4CAA4C,MAAM;AACtD;AAAA,MACC;AAAA,MACA;AAAA,QACC,6BAA6B;AAAA,QAC7B,SAAS;AAAA,QACT,UAAU;AAAA,QACV,QAAQ;AAAA,QACR,SAAS;AAAA,QACT,aAAa;AAAA,QACb,SAAS;AAAA,QACT,MAAM;AAAA,MACP;AAAA,MACA;AAAA,QACC,OAAO;AAAA,QACP,WAAW;AAAA,QACX,qBAAqB;AAAA,QACrB,mBAAmB;AAAA,QACnB,WAAW;AAAA,QACX,cAAc;AAAA,QACd,eAAe,CAAC,qBAAqB;AAAA,QACrC,6BAA6B,CAAC,IAAI;AAAA,MACnC;AAAA,IACD;AAAA,EACD,CAAC;AAED,OAAK,6BAA6B,MAAM;AACvC;AAAA,MACC,OAAO,QAAQ,QAAQ;AAAA,MACvB,CAAC;AAAA,QACA,OAAO;AAAA,QACP,WAAW;AAAA,QACX,qBAAqB;AAAA,QACrB,mBAAmB;AAAA,QACnB,WAAW;AAAA,QACX,cAAc;AAAA,QACd,eAAe,CAAC,mBAAmB;AAAA,QACnC,6BAA6B,CAAC,IAAI;AAAA,MACnC,GAAG;AAAA,QACF,OAAO;AAAA,QACP,WAAW;AAAA,QACX,qBAAqB;AAAA,QACrB,mBAAmB;AAAA,QACnB,WAAW;AAAA,QACX,cAAc;AAAA,QACd,eAAe,CAAC,sBAAsB;AAAA,QACtC,6BAA6B,CAAC,IAAI;AAAA,MACnC,CAAC;AAAA,IACF;AAAA,EACD,CAAC;AAED,OAAK,4BAA4B,MAAM;AACtC;AAAA,MACC,OAAO,UAAU,QAAQ;AAAA,MACzB,CAAC;AAAA,QACA,OAAO;AAAA,QACP,WAAW;AAAA,QACX,qBAAqB;AAAA,QACrB,mBAAmB;AAAA,QACnB,WAAW;AAAA,QACX,cAAc;AAAA,QACd,eAAe,CAAC,qBAAqB;AAAA,QACrC,6BAA6B,CAAC,IAAI;AAAA,MACnC,CAAC;AAAA,IACF;AAAA,EACD,CAAC;AAED,OAAK,kCAAkC,MAAM;AAC5C;AAAA,MACC,OAAO,UAAU,OAAO,QAAQ,QAAQ;AAAA,MACxC,CAAC;AAAA,QACA,OAAO;AAAA,QACP,WAAW;AAAA,QACX,qBAAqB;AAAA,QACrB,mBAAmB;AAAA,QACnB,WAAW;AAAA,QACX,cAAc;AAAA,QACd,eAAe,CAAC,oBAAoB;AAAA,QACpC,6BAA6B,CAAC,IAAI;AAAA,MACnC,CAAC;AAAA,IACF;AAAA,EACD,CAAC;AAED,OAAK,oCAAoC,MAAM;AAC9C;AAAA,MACC,SAAS,OAAO,UAAU,QAAQ,MAAM,OAAO,UAAU,QAAQ,SAAS;AAAA,MAC1E,CAAC;AAAA,IACF;AAAA,EACD,CAAC;AAED,OAAK,mCAAmC,MAAM;AAC7C;AAAA,MACC,SAAS,OAAO,UAAU,QAAQ,MAAM,OAAO,UAAU,QAAQ,KAAK;AAAA,MACtE,CAAC;AAAA,QACA,OAAO;AAAA,QACP,WAAW;AAAA,QACX,qBAAqB;AAAA,QACrB,mBAAmB;AAAA,QACnB,WAAW;AAAA,QACX,cAAc;AAAA,QACd,eAAe,CAAC,eAAe,qBAAqB;AAAA,QACpD,6BAA6B,CAAC,MAAM,IAAI;AAAA,MACzC,CAAC;AAAA,IACF;AAAA,EACD,CAAC;AAED,OAAK,oCAAoC,MAAM;AAC9C;AAAA,MACC,OAAO,UAAU,QAAQ;AAAA,MACzB,CAAC;AAAA,QACA,OAAO;AAAA,QACP,WAAW;AAAA,QACX,qBAAqB;AAAA,QACrB,mBAAmB;AAAA,QACnB,WAAW;AAAA,QACX,cAAc;AAAA,QACd,eAAe,CAAC,kBAAkB;AAAA,QAClC,6BAA6B,CAAC,IAAI;AAAA,MACnC,CAAC;AAAA,IACF;AAAA,EACD,CAAC;AAED,OAAK,mCAAmC,MAAM;AAC7C;AAAA,MACC,OAAO,UAAU,QAAQ;AAAA,MACzB,CAAC;AAAA,QACA,OAAO;AAAA,QACP,WAAW;AAAA,QACX,qBAAqB;AAAA,QACrB,mBAAmB;AAAA,QACnB,WAAW;AAAA,QACX,cAAc;AAAA,QACd,eAAe,CAAC,gBAAgB;AAAA,QAChC,6BAA6B,CAAC,IAAI;AAAA,MACnC,CAAC;AAAA,IACF;AAAA,EACD,CAAC;AAED,OAAK,+BAA+B,MAAM;AACzC;AAAA,MACC,OAAO,UAAU,QAAQ;AAAA,MACzB,CAAC;AAAA,QACA,OAAO;AAAA,QACP,WAAW;AAAA,QACX,qBAAqB;AAAA,QACrB,mBAAmB;AAAA,QACnB,WAAW;AAAA,QACX,cAAc;AAAA,QACd,eAAe,CAAC,aAAa;AAAA,QAC7B,6BAA6B,CAAC,IAAI;AAAA,MACnC,CAAC;AAAA,IACF;AAAA,EACD,CAAC;AAED,OAAK,oCAAoC,MAAM;AAC9C;AAAA,MACC;AAAA,MACA;AAAA,QACC,6BAA6B;AAAA,QAC7B,SAAS;AAAA,QACT,UAAU;AAAA,QACV,QAAQ;AAAA,QACR,SAAS;AAAA,QACT,aAAa;AAAA,QACb,SAAS;AAAA,QACT,MAAM;AAAA,MACP;AAAA,MACA;AAAA,QACC,OAAO;AAAA,QACP,WAAW;AAAA,QACX,qBAAqB;AAAA,QACrB,mBAAmB;AAAA,QACnB,WAAW;AAAA,QACX,cAAc;AAAA,QACd,eAAe,CAAC,aAAa;AAAA,QAC7B,6BAA6B,CAAC,IAAI;AAAA,MACnC;AAAA,IACD;AAAA,EACD,CAAC;AAED,OAAK,oCAAoC,MAAM;AAC9C;AAAA,MACC;AAAA,MACA;AAAA,QACC,6BAA6B;AAAA,QAC7B,SAAS;AAAA,QACT,UAAU;AAAA,QACV,QAAQ;AAAA,QACR,SAAS;AAAA,QACT,aAAa;AAAA,QACb,SAAS;AAAA,QACT,MAAM;AAAA,MACP;AAAA,MACA;AAAA,QACC,OAAO;AAAA,QACP,WAAW;AAAA,QACX,qBAAqB;AAAA,QACrB,mBAAmB;AAAA,QACnB,WAAW;AAAA,QACX,cAAc;AAAA,QACd,eAAe,CAAC,aAAa;AAAA,QAC7B,6BAA6B,CAAC,IAAI;AAAA,MACnC;AAAA,IACD;AAAA,EACD,CAAC;AAED,OAAK,0CAA0C,MAAM;AACpD;AAAA,MACC;AAAA,MAAQ,IAAI,WAAW;AAAA,QACtB,IAAI,cAAc,MAAM,OAAO,OAAO,OAAO,SAAS,KAAK;AAAA,QAC3D,IAAI,aAAa,MAAM,OAAO,OAAO,OAAO,QAAQ,KAAK;AAAA,MAC1D,CAAC;AAAA,MACD,CAAC;AAAA,QACA,OAAO;AAAA,QACP,WAAW;AAAA,QACX,qBAAqB;AAAA,QACrB,mBAAmB;AAAA,QACnB,WAAW;AAAA,QACX,cAAc;AAAA,QACd,eAAe,CAAC,gBAAgB,qBAAqB;AAAA,QACrD,6BAA6B,CAAC,MAAM,IAAI;AAAA,MACzC,CAAC;AAAA,IACF;AAAA,EACD,CAAC;AAED,OAAK,qDAAqD,MAAM;AAC/D;AAAA,MACC;AAAA,MACA;AAAA,QACC,6BAA6B;AAAA,QAC7B,SAAS;AAAA,QACT,UAAU;AAAA,QACV,QAAQ;AAAA,QACR,SAAS;AAAA,QACT,aAAa;AAAA,QACb,SAAS;AAAA,QACT,MAAM;AAAA,MACP;AAAA,MACA;AAAA,QACC,OAAO;AAAA,QACP,WAAW;AAAA,QACX,qBAAqB;AAAA,QACrB,mBAAmB;AAAA,QACnB,WAAW;AAAA,QACX,cAAc;AAAA,QACd,eAAe,CAAC,IAAI;AAAA,QACpB,6BAA6B,CAAC,MAAM;AAAA,MACrC;AAAA,IACD;AAAA,EACD,CAAC;AAED,OAAK,sDAAsD,MAAM;AAChE;AAAA,MACC;AAAA,MACA;AAAA,QACC,6BAA6B;AAAA,QAC7B,SAAS;AAAA,QACT,UAAU;AAAA,QACV,QAAQ;AAAA,QACR,SAAS;AAAA,QACT,aAAa;AAAA,QACb,SAAS;AAAA,QACT,MAAM;AAAA,MACP;AAAA,MACA;AAAA,QACC,OAAO;AAAA,QACP,WAAW;AAAA,QACX,qBAAqB;AAAA,QACrB,mBAAmB;AAAA,QACnB,WAAW;AAAA,QACX,cAAc;AAAA,QACd,eAAe,CAAC,IAAI;AAAA,QACpB,6BAA6B,CAAC,MAAM;AAAA,MACrC;AAAA,IACD;AAAA,EACD,CAAC;AACF,CAAC;AAED,MAAM,gCAAgC,MAAM;AAE3C,0CAAwC;AAExC,MAAI;AAEJ,aAAW,YAAY;AACtB,UAAM,UAAU,MAAM,qBAAqB,MAAM,eAAe,OAAO,gBAAgB,KAAK;AAC5F,aAAS;AAAA,EACV,CAAC;AAED,OAAK,WAAW,MAAM;AACrB,WAAO,cAAc,yBAAyB,QAAQ,iBAAiB;AAAA,EACxE,CAAC;AAED,WAAS,yBAAyB,GAAW,UAAuC;AACnF,4BAAwB,QAAQ,iBAAiB,GAAG,gBAAgB,KAAK,GAAI,QAAQ;AAAA,EACtF;AAFS;AAIT,OAAK,4BAA4B,MAAM;AACtC;AAAA,MACC,OAAO,UAAU,QAAQ;AAAA,MACzB,CAAC;AAAA,QACA,OAAO;AAAA,QACP,WAAW;AAAA,QACX,qBAAqB;AAAA,QACrB,mBAAmB;AAAA,QACnB,WAAW;AAAA,QACX,cAAc;AAAA,QACd,eAAe,CAAC,aAAa;AAAA,QAC7B,6BAA6B,CAAC,IAAI;AAAA,MACnC,CAAC;AAAA,IACF;AAAA,EACD,CAAC;AAED,OAAK,4BAA4B,MAAM;AACtC;AAAA,MACC,OAAO,UAAU,QAAQ;AAAA,MACzB,CAAC;AAAA,QACA,OAAO;AAAA,QACP,WAAW;AAAA,QACX,qBAAqB;AAAA,QACrB,mBAAmB;AAAA,QACnB,WAAW;AAAA,QACX,cAAc;AAAA,QACd,eAAe,CAAC,aAAa;AAAA,QAC7B,6BAA6B,CAAC,IAAI;AAAA,MACnC,CAAC;AAAA,IACF;AAAA,EACD,CAAC;AAED,OAAK,oCAAoC,MAAM;AAC9C;AAAA,MACC;AAAA,MACA;AAAA,QACC,6BAA6B;AAAA,QAC7B,SAAS;AAAA,QACT,UAAU;AAAA,QACV,QAAQ;AAAA,QACR,SAAS;AAAA,QACT,aAAa;AAAA,QACb,SAAS;AAAA,QACT,MAAM;AAAA,MACP;AAAA,MACA;AAAA,QACC,OAAO;AAAA,QACP,WAAW;AAAA,QACX,qBAAqB;AAAA,QACrB,mBAAmB;AAAA,QACnB,WAAW;AAAA,QACX,cAAc;AAAA,QACd,eAAe,CAAC,aAAa;AAAA,QAC7B,6BAA6B,CAAC,IAAI;AAAA,MACnC;AAAA,IACD;AAAA,EACD,CAAC;AAED,OAAK,4BAA4B,MAAM;AACtC;AAAA,MACC,OAAO,UAAU,QAAQ;AAAA,MACzB,CAAC;AAAA,QACA,OAAO;AAAA,QACP,WAAW;AAAA,QACX,qBAAqB;AAAA,QACrB,mBAAmB;AAAA,QACnB,WAAW;AAAA,QACX,cAAc;AAAA,QACd,eAAe,CAAC,qBAAqB;AAAA,QACrC,6BAA6B,CAAC,IAAI;AAAA,MACnC,CAAC;AAAA,IACF;AAAA,EACD,CAAC;AAED,OAAK,4CAA4C,MAAM;AACtD;AAAA,MACC;AAAA,MACA;AAAA,QACC,6BAA6B;AAAA,QAC7B,SAAS;AAAA,QACT,UAAU;AAAA,QACV,QAAQ;AAAA,QACR,SAAS;AAAA,QACT,aAAa;AAAA,QACb,SAAS;AAAA,QACT,MAAM;AAAA,MACP;AAAA,MACA;AAAA,QACC,OAAO;AAAA,QACP,WAAW;AAAA,QACX,qBAAqB;AAAA,QACrB,mBAAmB;AAAA,QACnB,WAAW;AAAA,QACX,cAAc;AAAA,QACd,eAAe,CAAC,qBAAqB;AAAA,QACrC,6BAA6B,CAAC,IAAI;AAAA,MACnC;AAAA,IACD;AAAA,EACD,CAAC;AAED,OAAK,6BAA6B,MAAM;AACvC;AAAA,MACC,OAAO,QAAQ,QAAQ;AAAA,MACvB,CAAC;AAAA,QACA,OAAO;AAAA,QACP,WAAW;AAAA,QACX,qBAAqB;AAAA,QACrB,mBAAmB;AAAA,QACnB,WAAW;AAAA,QACX,cAAc;AAAA,QACd,eAAe,CAAC,sBAAsB;AAAA,QACtC,6BAA6B,CAAC,IAAI;AAAA,MACnC,CAAC;AAAA,IACF;AAAA,EACD,CAAC;AAED,OAAK,4BAA4B,MAAM;AACtC;AAAA,MACC,OAAO,UAAU,QAAQ;AAAA,MACzB,CAAC;AAAA,QACA,OAAO;AAAA,QACP,WAAW;AAAA,QACX,qBAAqB;AAAA,QACrB,mBAAmB;AAAA,QACnB,WAAW;AAAA,QACX,cAAc;AAAA,QACd,eAAe,CAAC,cAAc;AAAA,QAC9B,6BAA6B,CAAC,IAAI;AAAA,MACnC,CAAC;AAAA,IACF;AAAA,EACD,CAAC;AAED,OAAK,kCAAkC,MAAM;AAC5C;AAAA,MACC,OAAO,UAAU,OAAO,QAAQ,QAAQ;AAAA,MACxC,CAAC;AAAA,QACA,OAAO;AAAA,QACP,WAAW;AAAA,QACX,qBAAqB;AAAA,QACrB,mBAAmB;AAAA,QACnB,WAAW;AAAA,QACX,cAAc;AAAA,QACd,eAAe,CAAC,oBAAoB;AAAA,QACpC,6BAA6B,CAAC,IAAI;AAAA,MACnC,CAAC;AAAA,IACF;AAAA,EACD,CAAC;AAED,OAAK,oCAAoC,MAAM;AAC9C;AAAA,MACC,SAAS,OAAO,UAAU,QAAQ,MAAM,OAAO,UAAU,QAAQ,SAAS;AAAA,MAC1E,CAAC;AAAA,QACA,OAAO;AAAA,QACP,WAAW;AAAA,QACX,qBAAqB;AAAA,QACrB,mBAAmB;AAAA,QACnB,WAAW;AAAA,QACX,cAAc;AAAA,QACd,eAAe,CAAC,eAAe,kBAAkB;AAAA,QACjD,6BAA6B,CAAC,MAAM,IAAI;AAAA,MACzC,CAAC;AAAA,IACF;AAAA,EACD,CAAC;AAED,OAAK,mCAAmC,MAAM;AAC7C;AAAA,MACC,SAAS,OAAO,UAAU,QAAQ,MAAM,OAAO,UAAU,QAAQ,KAAK;AAAA,MACtE,CAAC;AAAA,QACA,OAAO;AAAA,QACP,WAAW;AAAA,QACX,qBAAqB;AAAA,QACrB,mBAAmB;AAAA,QACnB,WAAW;AAAA,QACX,cAAc;AAAA,QACd,eAAe,CAAC,eAAe,cAAc;AAAA,QAC7C,6BAA6B,CAAC,MAAM,IAAI;AAAA,MACzC,CAAC;AAAA,IACF;AAAA,EACD,CAAC;AAED,OAAK,oCAAoC,MAAM;AAC9C;AAAA,MACC,OAAO,UAAU,QAAQ;AAAA,MACzB,CAAC;AAAA,QACA,OAAO;AAAA,QACP,WAAW;AAAA,QACX,qBAAqB;AAAA,QACrB,mBAAmB;AAAA,QACnB,WAAW;AAAA,QACX,cAAc;AAAA,QACd,eAAe,CAAC,kBAAkB;AAAA,QAClC,6BAA6B,CAAC,IAAI;AAAA,MACnC,CAAC;AAAA,IACF;AAAA,EACD,CAAC;AAED,OAAK,mCAAmC,MAAM;AAC7C;AAAA,MACC,OAAO,UAAU,QAAQ;AAAA,MACzB,CAAC;AAAA,QACA,OAAO;AAAA,QACP,WAAW;AAAA,QACX,qBAAqB;AAAA,QACrB,mBAAmB;AAAA,QACnB,WAAW;AAAA,QACX,cAAc;AAAA,QACd,eAAe,CAAC,gBAAgB;AAAA,QAChC,6BAA6B,CAAC,IAAI;AAAA,MACnC,CAAC;AAAA,IACF;AAAA,EACD,CAAC;AAED,OAAK,+BAA+B,MAAM;AACzC;AAAA,MACC,OAAO,UAAU,QAAQ;AAAA,MACzB,CAAC;AAAA,QACA,OAAO;AAAA,QACP,WAAW;AAAA,QACX,qBAAqB;AAAA,QACrB,mBAAmB;AAAA,QACnB,WAAW;AAAA,QACX,cAAc;AAAA,QACd,eAAe,CAAC,aAAa;AAAA,QAC7B,6BAA6B,CAAC,IAAI;AAAA,MACnC,CAAC;AAAA,IACF;AAAA,EACD,CAAC;AAED,OAAK,oCAAoC,MAAM;AAC9C;AAAA,MACC;AAAA,MACA;AAAA,QACC,6BAA6B;AAAA,QAC7B,SAAS;AAAA,QACT,UAAU;AAAA,QACV,QAAQ;AAAA,QACR,SAAS;AAAA,QACT,aAAa;AAAA,QACb,SAAS;AAAA,QACT,MAAM;AAAA,MACP;AAAA,MACA;AAAA,QACC,OAAO;AAAA,QACP,WAAW;AAAA,QACX,qBAAqB;AAAA,QACrB,mBAAmB;AAAA,QACnB,WAAW;AAAA,QACX,cAAc;AAAA,QACd,eAAe,CAAC,aAAa;AAAA,QAC7B,6BAA6B,CAAC,IAAI;AAAA,MACnC;AAAA,IACD;AAAA,EACD,CAAC;AAED,OAAK,kCAAkC,MAAM;AAC5C;AAAA,MACC,OAAO,UAAU,OAAO,QAAQ,QAAQ;AAAA,MACxC,CAAC;AAAA,QACA,OAAO;AAAA,QACP,WAAW;AAAA,QACX,qBAAqB;AAAA,QACrB,mBAAmB;AAAA,QACnB,WAAW;AAAA,QACX,cAAc;AAAA,QACd,eAAe,CAAC,oBAAoB;AAAA,QACpC,6BAA6B,CAAC,IAAI;AAAA,MACnC,GAAG;AAAA,QACF,OAAO;AAAA,QACP,WAAW;AAAA,QACX,qBAAqB;AAAA,QACrB,mBAAmB;AAAA,QACnB,WAAW;AAAA,QACX,cAAc;AAAA,QACd,eAAe,CAAC,sBAAsB;AAAA,QACtC,6BAA6B,CAAC,IAAI;AAAA,MACnC,CAAC;AAAA,IACF;AAAA,EACD,CAAC;AAED,OAAK,8CAA8C,MAAM;AACxD;AAAA,MACC,OAAO,UAAU,QAAQ;AAAA,MACzB,CAAC;AAAA,QACA,OAAO;AAAA,QACP,WAAW;AAAA,QACX,qBAAqB;AAAA,QACrB,mBAAmB;AAAA,QACnB,WAAW;AAAA,QACX,cAAc;AAAA,QACd,eAAe,CAAC,cAAc;AAAA,QAC9B,6BAA6B,CAAC,IAAI;AAAA,MACnC,CAAC;AAAA,IACF;AAAA,EACD,CAAC;AAED,OAAK,yDAAyD,MAAM;AACnE;AAAA,MACC;AAAA,MACA;AAAA,QACC,6BAA6B;AAAA,QAC7B,SAAS;AAAA,QACT,UAAU;AAAA,QACV,QAAQ;AAAA,QACR,SAAS;AAAA,QACT,aAAa;AAAA,QACb,SAAS;AAAA,QACT,MAAM;AAAA,MACP;AAAA,MACA;AAAA,QACC,OAAO;AAAA,QACP,WAAW;AAAA,QACX,qBAAqB;AAAA,QACrB,mBAAmB;AAAA,QACnB,WAAW;AAAA,QACX,cAAc;AAAA,QACd,eAAe,CAAC,cAAc;AAAA,QAC9B,6BAA6B,CAAC,IAAI;AAAA,MACnC;AAAA,IACD;AAAA,EACD,CAAC;AAED,OAAK,0CAA0C,MAAM;AACpD;AAAA,MACC;AAAA,MAAQ,IAAI,WAAW;AAAA,QACtB,IAAI,cAAc,MAAM,OAAO,OAAO,OAAO,SAAS,KAAK;AAAA,QAC3D,IAAI,aAAa,MAAM,OAAO,OAAO,OAAO,QAAQ,KAAK;AAAA,MAC1D,CAAC;AAAA,MACD,CAAC;AAAA,QACA,OAAO;AAAA,QACP,WAAW;AAAA,QACX,qBAAqB;AAAA,QACrB,mBAAmB;AAAA,QACnB,WAAW;AAAA,QACX,cAAc;AAAA,QACd,eAAe,CAAC,gBAAgB,cAAc;AAAA,QAC9C,6BAA6B,CAAC,MAAM,IAAI;AAAA,MACzC,CAAC;AAAA,IACF;AAAA,EACD,CAAC;AAED,OAAK,mCAAmC,MAAM;AAC7C;AAAA,MACC;AAAA,MAAQ,IAAI,WAAW;AAAA,QACtB,IAAI,cAAc,MAAM,OAAO,OAAO,OAAO,SAAS,KAAK;AAAA,MAC5D,CAAC;AAAA,MACD,CAAC;AAAA,QACA,OAAO;AAAA,QACP,WAAW;AAAA,QACX,qBAAqB;AAAA,QACrB,mBAAmB;AAAA,QACnB,WAAW;AAAA,QACX,cAAc;AAAA,QACd,eAAe,CAAC,cAAc;AAAA,QAC9B,6BAA6B,CAAC,IAAI;AAAA,MACnC,CAAC;AAAA,IACF;AAAA,EACD,CAAC;AAED,OAAK,qDAAqD,MAAM;AAC/D;AAAA,MACC;AAAA,MACA;AAAA,QACC,6BAA6B;AAAA,QAC7B,SAAS;AAAA,QACT,UAAU;AAAA,QACV,QAAQ;AAAA,QACR,SAAS;AAAA,QACT,aAAa;AAAA,QACb,SAAS;AAAA,QACT,MAAM;AAAA,MACP;AAAA,MACA;AAAA,QACC,OAAO;AAAA,QACP,WAAW;AAAA,QACX,qBAAqB;AAAA,QACrB,mBAAmB;AAAA,QACnB,WAAW;AAAA,QACX,cAAc;AAAA,QACd,eAAe,CAAC,IAAI;AAAA,QACpB,6BAA6B,CAAC,MAAM;AAAA,MACrC;AAAA,IACD;AAAA,EACD,CAAC;AAED,OAAK,sDAAsD,MAAM;AAChE;AAAA,MACC;AAAA,MACA;AAAA,QACC,6BAA6B;AAAA,QAC7B,SAAS;AAAA,QACT,UAAU;AAAA,QACV,QAAQ;AAAA,QACR,SAAS;AAAA,QACT,aAAa;AAAA,QACb,SAAS;AAAA,QACT,MAAM;AAAA,MACP;AAAA,MACA;AAAA,QACC,OAAO;AAAA,QACP,WAAW;AAAA,QACX,qBAAqB;AAAA,QACrB,mBAAmB;AAAA,QACnB,WAAW;AAAA,QACX,cAAc;AAAA,QACd,eAAe,CAAC,IAAI;AAAA,QACpB,6BAA6B,CAAC,MAAM;AAAA,MACrC;AAAA,IACD;AAAA,EACD,CAAC;AAED,OAAK,mDAAmD,MAAM;AAC7D;AAAA,MACC;AAAA,MACA;AAAA,QACC,6BAA6B;AAAA,QAC7B,SAAS;AAAA,QACT,UAAU;AAAA,QACV,QAAQ;AAAA,QACR,SAAS;AAAA,QACT,aAAa;AAAA,QACb,SAAS;AAAA,QACT,MAAM;AAAA,MACP;AAAA,MACA;AAAA,QACC,OAAO;AAAA,QACP,WAAW;AAAA,QACX,qBAAqB;AAAA,QACrB,mBAAmB;AAAA,QACnB,WAAW;AAAA,QACX,cAAc;AAAA,QACd,eAAe,CAAC,IAAI;AAAA,QACpB,6BAA6B,CAAC,OAAO;AAAA,MACtC;AAAA,IACD;AAAA,EACD,CAAC;AAED,OAAK,oDAAoD,MAAM;AAC9D;AAAA,MACC;AAAA,MACA;AAAA,QACC,6BAA6B;AAAA,QAC7B,SAAS;AAAA,QACT,UAAU;AAAA,QACV,QAAQ;AAAA,QACR,SAAS;AAAA,QACT,aAAa;AAAA,QACb,SAAS;AAAA,QACT,MAAM;AAAA,MACP;AAAA,MACA;AAAA,QACC,OAAO;AAAA,QACP,WAAW;AAAA,QACX,qBAAqB;AAAA,QACrB,mBAAmB;AAAA,QACnB,WAAW;AAAA,QACX,cAAc;AAAA,QACd,eAAe,CAAC,IAAI;AAAA,QACpB,6BAA6B,CAAC,OAAO;AAAA,MACtC;AAAA,IACD;AAAA,EACD,CAAC;AAED,OAAK,iDAAiD,MAAM;AAC3D;AAAA,MACC;AAAA,MACA;AAAA,QACC,6BAA6B;AAAA,QAC7B,SAAS;AAAA,QACT,UAAU;AAAA,QACV,QAAQ;AAAA,QACR,SAAS;AAAA,QACT,aAAa;AAAA,QACb,SAAS;AAAA,QACT,MAAM;AAAA,MACP;AAAA,MACA;AAAA,QACC,OAAO;AAAA,QACP,WAAW;AAAA,QACX,qBAAqB;AAAA,QACrB,mBAAmB;AAAA,QACnB,WAAW;AAAA,QACX,cAAc;AAAA,QACd,eAAe,CAAC,IAAI;AAAA,QACpB,6BAA6B,CAAC,KAAK;AAAA,MACpC;AAAA,IACD;AAAA,EACD,CAAC;AAED,OAAK,kDAAkD,MAAM;AAC5D;AAAA,MACC;AAAA,MACA;AAAA,QACC,6BAA6B;AAAA,QAC7B,SAAS;AAAA,QACT,UAAU;AAAA,QACV,QAAQ;AAAA,QACR,SAAS;AAAA,QACT,aAAa;AAAA,QACb,SAAS;AAAA,QACT,MAAM;AAAA,MACP;AAAA,MACA;AAAA,QACC,OAAO;AAAA,QACP,WAAW;AAAA,QACX,qBAAqB;AAAA,QACrB,mBAAmB;AAAA,QACnB,WAAW;AAAA,QACX,cAAc;AAAA,QACd,eAAe,CAAC,IAAI;AAAA,QACpB,6BAA6B,CAAC,KAAK;AAAA,MACpC;AAAA,IACD;AAAA,EACD,CAAC;AAED,OAAK,kDAAkD,MAAM;AAC5D;AAAA,MACC;AAAA,MACA;AAAA,QACC,6BAA6B;AAAA,QAC7B,SAAS;AAAA,QACT,UAAU;AAAA,QACV,QAAQ;AAAA,QACR,SAAS;AAAA,QACT,aAAa;AAAA,QACb,SAAS;AAAA,QACT,MAAM;AAAA,MACP;AAAA,MACA;AAAA,QACC,OAAO;AAAA,QACP,WAAW;AAAA,QACX,qBAAqB;AAAA,QACrB,mBAAmB;AAAA,QACnB,WAAW;AAAA,QACX,cAAc;AAAA,QACd,eAAe,CAAC,IAAI;AAAA,QACpB,6BAA6B,CAAC,MAAM;AAAA,MACrC;AAAA,IACD;AAAA,EACD,CAAC;AAED,OAAK,mDAAmD,MAAM;AAC7D;AAAA,MACC;AAAA,MACA;AAAA,QACC,6BAA6B;AAAA,QAC7B,SAAS;AAAA,QACT,UAAU;AAAA,QACV,QAAQ;AAAA,QACR,SAAS;AAAA,QACT,aAAa;AAAA,QACb,SAAS;AAAA,QACT,MAAM;AAAA,MACP;AAAA,MACA;AAAA,QACC,OAAO;AAAA,QACP,WAAW;AAAA,QACX,qBAAqB;AAAA,QACrB,mBAAmB;AAAA,QACnB,WAAW;AAAA,QACX,cAAc;AAAA,QACd,eAAe,CAAC,IAAI;AAAA,QACpB,6BAA6B,CAAC,MAAM;AAAA,MACrC;AAAA,IACD;AAAA,EACD,CAAC;AAED,OAAK,mDAAmD,MAAM;AAC7D;AAAA,MACC;AAAA,MACA;AAAA,QACC,6BAA6B;AAAA,QAC7B,SAAS;AAAA,QACT,UAAU;AAAA,QACV,QAAQ;AAAA,QACR,SAAS;AAAA,QACT,aAAa;AAAA,QACb,SAAS;AAAA,QACT,MAAM;AAAA,MACP;AAAA,MACA;AAAA,QACC,OAAO;AAAA,QACP,WAAW;AAAA,QACX,qBAAqB;AAAA,QACrB,mBAAmB;AAAA,QACnB,WAAW;AAAA,QACX,cAAc;AAAA,QACd,eAAe,CAAC,IAAI;AAAA,QACpB,6BAA6B,CAAC,IAAI;AAAA,MACnC;AAAA,IACD;AAAA,EACD,CAAC;AAED,OAAK,kDAAkD,YAAY;AAClE,UAAMA,UAAS,MAAM,qBAAqB,MAAM,eAAe,MAAM,gBAAgB,KAAK;AAE1F;AAAA,MACCA;AAAA,MACA;AAAA,QACC,6BAA6B;AAAA,QAC7B,SAAS;AAAA,QACT,UAAU;AAAA,QACV,QAAQ;AAAA,QACR,SAAS;AAAA,QACT,aAAa;AAAA,QACb,SAAS;AAAA,QACT,MAAM;AAAA,MACP;AAAA,MACA;AAAA,QACC,OAAO;AAAA,QACP,WAAW;AAAA,QACX,qBAAqB;AAAA,QACrB,mBAAmB;AAAA,QACnB,WAAW;AAAA,QACX,cAAc;AAAA,QACd,eAAe,CAAC,iBAAiB;AAAA,QACjC,6BAA6B,CAAC,IAAI;AAAA,MACnC;AAAA,IACD;AAAA,EACD,CAAC;AACF,CAAC;AAED,MAAM,kBAAkB,MAAM;AAE7B,0CAAwC;AAExC,OAAK,0EAA0E,MAAM;AACpF,UAAM,SAAS,IAAI,uBAAuB,OAAO;AAAA,MAChD,aAAa;AAAA,QACZ,SAAS;AAAA,QACT,aAAa;AAAA,QACb,aAAa;AAAA,QACb,kBAAkB;AAAA,MACnB;AAAA,IACD,GAAG,OAAO,gBAAgB,KAAK;AAE/B;AAAA,MACC;AAAA,MACA;AAAA,QACC,6BAA6B;AAAA,QAC7B,SAAS;AAAA,QACT,UAAU;AAAA,QACV,QAAQ;AAAA,QACR,SAAS;AAAA,QACT,aAAa;AAAA,QACb,SAAS;AAAA,QACT,MAAM;AAAA,MACP;AAAA,MACA;AAAA,QACC,OAAO;AAAA,QACP,WAAW;AAAA,QACX,qBAAqB;AAAA,QACrB,mBAAmB;AAAA,QACnB,WAAW;AAAA,QACX,cAAc;AAAA,QACd,eAAe,CAAC,kBAAkB;AAAA,QAClC,6BAA6B,CAAC,IAAI;AAAA,MACnC;AAAA,IACD;AAAA,EACD,CAAC;AAED,OAAK,sEAAsE,MAAM;AAChF,UAAM,SAAS,IAAI,uBAAuB,OAAO,CAAC,GAAG,OAAO,gBAAgB,KAAK;AAEjF,aAAS,0BAA0B,SAAkB,MAAc,OAAe,qBAAoC,mBAA2B,UAAwB;AACxK;AAAA,QACC;AAAA,QACA;AAAA,UACC,6BAA6B;AAAA,UAC7B,SAAS;AAAA,UACT,UAAU;AAAA,UACV,QAAQ;AAAA,UACR,SAAS;AAAA,UACT,aAAa;AAAA,UACb;AAAA,UACA;AAAA,QACD;AAAA,QACA;AAAA,UACC;AAAA,UACA,WAAW;AAAA,UACX;AAAA,UACA;AAAA,UACA,WAAW;AAAA,UACX,cAAc;AAAA,UACd,eAAe,CAAC,QAAQ;AAAA,UACxB,6BAA6B,CAAC,IAAI;AAAA,QACnC;AAAA,MACD;AAAA,IACD;AAxBS;AA0BT,8BAA0B,QAAQ,KAAK,WAAW,OAAO,OAAO,OAAO,OAAO;AAC9E,8BAA0B,QAAQ,WAAW,WAAW,aAAa,QAAQ,QAAQ,aAAa;AAClG,8BAA0B,QAAQ,UAAU,WAAW,YAAY,YAAY,YAAY,YAAY;AACvG,8BAA0B,QAAQ,WAAW,WAAW,aAAa,QAAQ,QAAQ,aAAa;AAClG,8BAA0B,QAAQ,SAAS,WAAW,WAAW,MAAM,WAAW,WAAW;AAC7F,8BAA0B,QAAQ,YAAY,WAAW,cAAc,SAAS,SAAS,cAAc;AACvG,8BAA0B,QAAQ,MAAM,WAAW,QAAQ,QAAQ,QAAQ,QAAQ;AACnF,8BAA0B,QAAQ,SAAS,WAAW,WAAW,MAAM,MAAM,WAAW;AACxF,8BAA0B,QAAQ,QAAQ,WAAW,UAAU,UAAU,UAAU,UAAU;AAC7F,8BAA0B,QAAQ,QAAQ,WAAW,UAAU,UAAU,UAAU,UAAU;AAC7F,8BAA0B,QAAQ,QAAQ,iBAAiB,UAAU,UAAU,UAAU,UAAU;AAAA,EACpG,CAAC;AAED,OAAK,qGAAqG,MAAM;AAC/G,UAAM,SAAS,IAAI,uBAAuB,OAAO,CAAC,GAAG,OAAO,gBAAgB,KAAK;AAEjF,aAAS,oBAAoB,SAAkB,MAAc,OAAe,qBAA6B,mBAA2B,UAAwB;AAC3J;AAAA,QACC;AAAA,QACA;AAAA,UACC,6BAA6B;AAAA,UAC7B,SAAS;AAAA,UACT,UAAU;AAAA,UACV,QAAQ;AAAA,UACR,SAAS;AAAA,UACT,aAAa;AAAA,UACb;AAAA,UACA;AAAA,QACD;AAAA,QACA;AAAA,UACC;AAAA,UACA,WAAW;AAAA,UACX;AAAA,UACA;AAAA,UACA,WAAW;AAAA,UACX,cAAc;AAAA,UACd,eAAe,CAAC,QAAQ;AAAA,UACxB,6BAA6B,CAAC,IAAI;AAAA,QACnC;AAAA,MACD;AAAA,IACD;AAxBS;AA2BT,wBAAoB,QAAQ,SAAS,SAAS,WAAW,MAAM,MAAM,WAAW;AAChF,wBAAoB,QAAQ,WAAW,eAAe,aAAa,QAAQ,QAAQ,aAAa;AAChG,wBAAoB,QAAQ,WAAW,WAAW,aAAa,QAAQ,QAAQ,aAAa;AAC5F,wBAAoB,QAAQ,YAAY,cAAc,cAAc,SAAS,SAAS,cAAc;AACpG,wBAAoB,QAAQ,QAAQ,eAAe,UAAU,UAAU,UAAU,UAAU;AAC3F,wBAAoB,QAAQ,QAAQ,gBAAgB,UAAU,UAAU,UAAU,UAAU;AAC5F,wBAAoB,QAAQ,KAAK,WAAW,OAAO,OAAO,OAAO,OAAO;AACxE,wBAAoB,QAAQ,MAAM,UAAU,QAAQ,QAAQ,QAAQ,QAAQ;AAC5E,wBAAoB,QAAQ,UAAU,gBAAgB,YAAY,YAAY,YAAY,YAAY;AACtG,wBAAoB,QAAQ,QAAQ,SAAS,UAAU,UAAU,UAAU,UAAU;AAGrF,wBAAoB,QAAQ,UAAU,gBAAgB,YAAY,YAAY,YAAY,YAAY;AACtG,wBAAoB,QAAQ,QAAQ,SAAS,UAAU,UAAU,UAAU,UAAU;AACrF,wBAAoB,QAAQ,KAAK,IAAI,OAAO,OAAO,OAAO,OAAO;AACjE,wBAAoB,QAAQ,MAAM,UAAU,QAAQ,QAAQ,QAAQ,QAAQ;AAC5E,wBAAoB,QAAQ,QAAQ,eAAe,UAAU,UAAU,UAAU,UAAU;AAC3F,wBAAoB,QAAQ,QAAQ,gBAAgB,UAAU,UAAU,UAAU,UAAU;AAC5F,wBAAoB,QAAQ,YAAY,cAAc,cAAc,SAAS,SAAS,cAAc;AACpG,wBAAoB,QAAQ,WAAW,WAAW,aAAa,QAAQ,QAAQ,aAAa;AAC5F,wBAAoB,QAAQ,WAAW,eAAe,aAAa,QAAQ,QAAQ,aAAa;AAChG,wBAAoB,QAAQ,SAAS,SAAS,WAAW,MAAM,MAAM,WAAW;AAAA,EACjF,CAAC;AACF,CAAC;AAED,MAAM,6BAA6B,MAAM;AAExC,0CAAwC;AAExC,MAAI;AAEJ,aAAW,YAAY;AACtB,UAAM,UAAU,MAAM,qBAAqB,OAAO,YAAY,OAAO,gBAAgB,KAAK;AAC1F,aAAS;AAAA,EACV,CAAC;AAED,OAAK,WAAW,MAAM;AACrB,WAAO,cAAc,yBAAyB,QAAQ,cAAc;AAAA,EACrE,CAAC;AAED,WAAS,yBAAyB,GAAW,UAAuC;AACnF,4BAAwB,QAAQ,iBAAiB,GAAG,gBAAgB,KAAK,GAAI,QAAQ;AAAA,EACtF;AAFS;AAIT,OAAK,4BAA4B,MAAM;AACtC;AAAA,MACC,OAAO,UAAU,QAAQ;AAAA,MACzB,CAAC;AAAA,QACA,OAAO;AAAA,QACP,WAAW;AAAA,QACX,qBAAqB;AAAA,QACrB,mBAAmB;AAAA,QACnB,WAAW;AAAA,QACX,cAAc;AAAA,QACd,eAAe,CAAC,aAAa;AAAA,QAC7B,6BAA6B,CAAC,IAAI;AAAA,MACnC,CAAC;AAAA,IACF;AAAA,EACD,CAAC;AACF,CAAC;AAED,MAAM,gCAAgC,MAAM;AAE3C,0CAAwC;AAExC,MAAI;AAEJ,aAAW,YAAY;AACtB,UAAM,UAAU,MAAM,qBAAqB,OAAO,eAAe,OAAO,gBAAgB,KAAK;AAC7F,aAAS;AAAA,EACV,CAAC;AAED,OAAK,WAAW,MAAM;AACrB,WAAO,cAAc,yBAAyB,QAAQ,iBAAiB;AAAA,EACxE,CAAC;AAED,OAAK,uDAAuD,MAAM;AACjE;AAAA,MACC;AAAA,MACA;AAAA,QACC,6BAA6B;AAAA,QAC7B,SAAS;AAAA,QACT,UAAU;AAAA,QACV,QAAQ;AAAA,QACR,SAAS;AAAA,QACT,aAAa;AAAA,QACb,SAAS;AAAA,QACT,MAAM;AAAA,MACP;AAAA,MACA;AAAA,QACC,OAAO;AAAA,QACP,WAAW;AAAA,QACX,qBAAqB;AAAA,QACrB,mBAAmB;AAAA,QACnB,WAAW;AAAA,QACX,cAAc;AAAA,QACd,eAAe,CAAC,kBAAkB;AAAA,QAClC,6BAA6B,CAAC,IAAI;AAAA,MACnC;AAAA,IACD;AAAA,EACD,CAAC;AACF,CAAC;AAED,MAAM,gCAAgC,MAAM;AAE3C,0CAAwC;AAExC,MAAI;AAEJ,aAAW,YAAY;AACtB,UAAM,UAAU,MAAM,qBAAqB,OAAO,eAAe,OAAO,gBAAgB,SAAS;AACjG,aAAS;AAAA,EACV,CAAC;AAED,OAAK,WAAW,MAAM;AACrB,WAAO,cAAc,yBAAyB,QAAQ,iBAAiB;AAAA,EACxE,CAAC;AAED,WAAS,yBAAyB,GAAW,UAAuC;AACnF,4BAAwB,QAAQ,iBAAiB,GAAG,gBAAgB,SAAS,GAAI,QAAQ;AAAA,EAC1F;AAFS;AAIT,OAAK,wCAAwC,MAAM;AAClD;AAAA,MACC,OAAO,UAAU,QAAQ;AAAA,MACzB,CAAC;AAAA,QACA,OAAO;AAAA,QACP,WAAW;AAAA,QACX,qBAAqB;AAAA,QACrB,mBAAmB;AAAA,QACnB,WAAW;AAAA,QACX,cAAc;AAAA,QACd,eAAe,CAAC,aAAa;AAAA,QAC7B,6BAA6B,CAAC,IAAI;AAAA,MACnC,CAAC;AAAA,IACF;AAAA,EACD,CAAC;AACF,CAAC;AAED,MAAM,iCAAiC,MAAM;AAE5C,0CAAwC;AAExC,MAAI;AAEJ,aAAW,YAAY;AACtB,UAAM,UAAU,MAAM,qBAAqB,OAAO,gBAAgB,OAAO,gBAAgB,SAAS;AAClG,aAAS;AAAA,EACV,CAAC;AAED,OAAK,WAAW,MAAM;AACrB,WAAO,cAAc,yBAAyB,QAAQ,kBAAkB;AAAA,EACzE,CAAC;AACF,CAAC;AAED,SAAS,6BAA6B,QAAgC,IAAqB,IAAY,WAAoC;AAC1I,MAAI;AACJ,MAAI,OAAO,cAAc,UAAU;AAClC,eAAW,CAAC,SAAS;AAAA,EACtB,WAAW,MAAM,QAAQ,SAAS,GAAG;AACpC,eAAW;AAAA,EACZ,OAAO;AACN,eAAW,CAAC;AAAA,EACb;AAEA,QAAM,oBAAoB,uBAAuB,IAAI,EAAE;AAEvD,QAAM,kBAAkB,IAAI,2BAA2B,CAAC,iBAAiB,GAAG,EAAE,EAAE,qBAAqB;AAErG,QAAM,2BAA2B,OAAO,4BAA4B,iBAAiB;AACrF,MAAI,yBAAyB,WAAW,GAAG;AAC1C,WAAO,gBAAgB,CAAC,GAAG,UAAU,0CAA0C,eAAe,mCAAmC,QAAQ,GAAG;AAC5I;AAAA,EACD;AAEA,QAAM,SAAS,yBACb,IAAI,OAAK,0BAA0B,QAAQ,IAAI,CAAC,CAAC,GAAG,CAAC,eAAe,cAAc,SAAS,WAAW,QAAQ,CAAC,CAAC;AAClH,SAAO,gBAAgB,QAAQ,UAAU,0CAA0C,eAAe,iBAAiB,MAAM,mBAAmB,QAAQ,GAAG;AACxJ;AAvBS;",
  "names": ["mapper"]
}
