{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/keybinding/test/browser/keybindingEditing.test.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport assert from 'assert';\nimport * as json from '../../../../../base/common/json.js';\nimport { KeyCode } from '../../../../../base/common/keyCodes.js';\nimport { KeyCodeChord } from '../../../../../base/common/keybindings.js';\nimport { OS } from '../../../../../base/common/platform.js';\nimport { ContextKeyExpr } from '../../../../../platform/contextkey/common/contextkey.js';\nimport { IEnvironmentService } from '../../../../../platform/environment/common/environment.js';\nimport { IFileService } from '../../../../../platform/files/common/files.js';\nimport { TestInstantiationService } from '../../../../../platform/instantiation/test/common/instantiationServiceMock.js';\nimport { IUserFriendlyKeybinding } from '../../../../../platform/keybinding/common/keybinding.js';\nimport { ResolvedKeybindingItem } from '../../../../../platform/keybinding/common/resolvedKeybindingItem.js';\nimport { USLayoutResolvedKeybinding } from '../../../../../platform/keybinding/common/usLayoutResolvedKeybinding.js';\nimport { NullLogService } from '../../../../../platform/log/common/log.js';\nimport { KeybindingsEditingService } from '../../common/keybindingEditing.js';\nimport { ITextFileService } from '../../../textfile/common/textfiles.js';\nimport { TestEnvironmentService, workbenchInstantiationService } from '../../../../test/browser/workbenchTestServices.js';\nimport { FileService } from '../../../../../platform/files/common/fileService.js';\nimport { Schemas } from '../../../../../base/common/network.js';\nimport { URI } from '../../../../../base/common/uri.js';\nimport { FileUserDataProvider } from '../../../../../platform/userData/common/fileUserDataProvider.js';\nimport { TestConfigurationService } from '../../../../../platform/configuration/test/common/testConfigurationService.js';\nimport { joinPath } from '../../../../../base/common/resources.js';\nimport { InMemoryFileSystemProvider } from '../../../../../platform/files/common/inMemoryFilesystemProvider.js';\nimport { VSBuffer } from '../../../../../base/common/buffer.js';\nimport { UserDataProfilesService } from '../../../../../platform/userDataProfile/common/userDataProfile.js';\nimport { UserDataProfileService } from '../../../userDataProfile/common/userDataProfileService.js';\nimport { IUserDataProfileService } from '../../../userDataProfile/common/userDataProfile.js';\nimport { UriIdentityService } from '../../../../../platform/uriIdentity/common/uriIdentityService.js';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from '../../../../../base/test/common/utils.js';\n\ninterface Modifiers {\n\tmetaKey?: boolean;\n\tctrlKey?: boolean;\n\taltKey?: boolean;\n\tshiftKey?: boolean;\n}\n\nconst ROOT = URI.file('tests').with({ scheme: 'vscode-tests' });\n\nsuite('KeybindingsEditing', () => {\n\n\tconst disposables = ensureNoDisposablesAreLeakedInTestSuite();\n\tlet instantiationService: TestInstantiationService;\n\tlet fileService: IFileService;\n\tlet environmentService: IEnvironmentService;\n\tlet userDataProfileService: IUserDataProfileService;\n\tlet testObject: KeybindingsEditingService;\n\n\tsetup(async () => {\n\n\t\tenvironmentService = TestEnvironmentService;\n\n\t\tconst logService = new NullLogService();\n\t\tfileService = disposables.add(new FileService(logService));\n\t\tconst fileSystemProvider = disposables.add(new InMemoryFileSystemProvider());\n\t\tdisposables.add(fileService.registerProvider(ROOT.scheme, fileSystemProvider));\n\n\t\tconst userFolder = joinPath(ROOT, 'User');\n\t\tawait fileService.createFolder(userFolder);\n\n\t\tconst configService = new TestConfigurationService();\n\t\tconfigService.setUserConfiguration('files', { 'eol': '\\n' });\n\n\t\tconst uriIdentityService = disposables.add(new UriIdentityService(fileService));\n\t\tconst userDataProfilesService = disposables.add(new UserDataProfilesService(environmentService, fileService, uriIdentityService, logService));\n\t\tuserDataProfileService = disposables.add(new UserDataProfileService(userDataProfilesService.defaultProfile));\n\t\tdisposables.add(fileService.registerProvider(Schemas.vscodeUserData, disposables.add(new FileUserDataProvider(ROOT.scheme, fileSystemProvider, Schemas.vscodeUserData, userDataProfilesService, uriIdentityService, new NullLogService()))));\n\n\t\tinstantiationService = workbenchInstantiationService({\n\t\t\tfileService: () => fileService,\n\t\t\tconfigurationService: () => configService,\n\t\t\tenvironmentService: () => environmentService\n\t\t}, disposables);\n\n\t\ttestObject = disposables.add(instantiationService.createInstance(KeybindingsEditingService));\n\t});\n\n\ttest('errors cases - parse errors', async () => {\n\t\tawait fileService.writeFile(userDataProfileService.currentProfile.keybindingsResource, VSBuffer.fromString(',,,,,,,,,,,,,,'));\n\t\ttry {\n\t\t\tawait testObject.editKeybinding(aResolvedKeybindingItem({ firstChord: { keyCode: KeyCode.Escape } }), 'alt+c', undefined);\n\t\t\tassert.fail('Should fail with parse errors');\n\t\t} catch (error) {\n\t\t\tassert.strictEqual(error.message, 'Unable to write to the keybindings configuration file. Please open it to correct errors/warnings in the file and try again.');\n\t\t}\n\t});\n\n\ttest('errors cases - parse errors 2', async () => {\n\t\tawait fileService.writeFile(userDataProfileService.currentProfile.keybindingsResource, VSBuffer.fromString('[{\"key\": }]'));\n\t\ttry {\n\t\t\tawait testObject.editKeybinding(aResolvedKeybindingItem({ firstChord: { keyCode: KeyCode.Escape } }), 'alt+c', undefined);\n\t\t\tassert.fail('Should fail with parse errors');\n\t\t} catch (error) {\n\t\t\tassert.strictEqual(error.message, 'Unable to write to the keybindings configuration file. Please open it to correct errors/warnings in the file and try again.');\n\t\t}\n\t});\n\n\ttest('errors cases - dirty', () => {\n\t\tinstantiationService.stub(ITextFileService, 'isDirty', true);\n\t\treturn testObject.editKeybinding(aResolvedKeybindingItem({ firstChord: { keyCode: KeyCode.Escape } }), 'alt+c', undefined)\n\t\t\t.then(() => assert.fail('Should fail with dirty error'),\n\t\t\t\terror => assert.strictEqual(error.message, 'Unable to write because the keybindings configuration file has unsaved changes. Please save it first and then try again.'));\n\t});\n\n\ttest('errors cases - did not find an array', async () => {\n\t\tawait fileService.writeFile(userDataProfileService.currentProfile.keybindingsResource, VSBuffer.fromString('{\"key\": \"alt+c\", \"command\": \"hello\"}'));\n\t\ttry {\n\t\t\tawait testObject.editKeybinding(aResolvedKeybindingItem({ firstChord: { keyCode: KeyCode.Escape } }), 'alt+c', undefined);\n\t\t\tassert.fail('Should fail');\n\t\t} catch (error) {\n\t\t\tassert.strictEqual(error.message, 'Unable to write to the keybindings configuration file. It has an object which is not of type Array. Please open the file to clean up and try again.');\n\t\t}\n\t});\n\n\ttest('edit a default keybinding to an empty file', async () => {\n\t\tawait fileService.writeFile(userDataProfileService.currentProfile.keybindingsResource, VSBuffer.fromString(''));\n\t\tconst expected: IUserFriendlyKeybinding[] = [{ key: 'alt+c', command: 'a' }, { key: 'escape', command: '-a' }];\n\t\tawait testObject.editKeybinding(aResolvedKeybindingItem({ firstChord: { keyCode: KeyCode.Escape }, command: 'a' }), 'alt+c', undefined);\n\t\tassert.deepStrictEqual(await getUserKeybindings(), expected);\n\t});\n\n\ttest('edit a default keybinding to an empty array', async () => {\n\t\tawait writeToKeybindingsFile();\n\t\tconst expected: IUserFriendlyKeybinding[] = [{ key: 'alt+c', command: 'a' }, { key: 'escape', command: '-a' }];\n\t\tawait testObject.editKeybinding(aResolvedKeybindingItem({ firstChord: { keyCode: KeyCode.Escape }, command: 'a' }), 'alt+c', undefined);\n\t\treturn assert.deepStrictEqual(await getUserKeybindings(), expected);\n\t});\n\n\ttest('edit a default keybinding in an existing array', async () => {\n\t\tawait writeToKeybindingsFile({ command: 'b', key: 'shift+c' });\n\t\tconst expected: IUserFriendlyKeybinding[] = [{ key: 'shift+c', command: 'b' }, { key: 'alt+c', command: 'a' }, { key: 'escape', command: '-a' }];\n\t\tawait testObject.editKeybinding(aResolvedKeybindingItem({ firstChord: { keyCode: KeyCode.Escape }, command: 'a' }), 'alt+c', undefined);\n\t\treturn assert.deepStrictEqual(await getUserKeybindings(), expected);\n\t});\n\n\ttest('add another keybinding', async () => {\n\t\tconst expected: IUserFriendlyKeybinding[] = [{ key: 'alt+c', command: 'a' }];\n\t\tawait testObject.addKeybinding(aResolvedKeybindingItem({ firstChord: { keyCode: KeyCode.Escape }, command: 'a' }), 'alt+c', undefined);\n\t\treturn assert.deepStrictEqual(await getUserKeybindings(), expected);\n\t});\n\n\ttest('add a new default keybinding', async () => {\n\t\tconst expected: IUserFriendlyKeybinding[] = [{ key: 'alt+c', command: 'a' }];\n\t\tawait testObject.addKeybinding(aResolvedKeybindingItem({ command: 'a' }), 'alt+c', undefined);\n\t\treturn assert.deepStrictEqual(await getUserKeybindings(), expected);\n\t});\n\n\ttest('add a new default keybinding using edit', async () => {\n\t\tconst expected: IUserFriendlyKeybinding[] = [{ key: 'alt+c', command: 'a' }];\n\t\tawait testObject.editKeybinding(aResolvedKeybindingItem({ command: 'a' }), 'alt+c', undefined);\n\t\tassert.deepStrictEqual(await getUserKeybindings(), expected);\n\t});\n\n\ttest('edit an user keybinding', async () => {\n\t\tawait writeToKeybindingsFile({ key: 'escape', command: 'b' });\n\t\tconst expected: IUserFriendlyKeybinding[] = [{ key: 'alt+c', command: 'b' }];\n\t\tawait testObject.editKeybinding(aResolvedKeybindingItem({ firstChord: { keyCode: KeyCode.Escape }, command: 'b', isDefault: false }), 'alt+c', undefined);\n\t\tassert.deepStrictEqual(await getUserKeybindings(), expected);\n\t});\n\n\ttest('edit an user keybinding with more than one element', async () => {\n\t\tawait writeToKeybindingsFile({ key: 'escape', command: 'b' }, { key: 'alt+shift+g', command: 'c' });\n\t\tconst expected: IUserFriendlyKeybinding[] = [{ key: 'alt+c', command: 'b' }, { key: 'alt+shift+g', command: 'c' }];\n\t\tawait testObject.editKeybinding(aResolvedKeybindingItem({ firstChord: { keyCode: KeyCode.Escape }, command: 'b', isDefault: false }), 'alt+c', undefined);\n\t\tassert.deepStrictEqual(await getUserKeybindings(), expected);\n\t});\n\n\ttest('remove a default keybinding', async () => {\n\t\tconst expected: IUserFriendlyKeybinding[] = [{ key: 'alt+c', command: '-a' }];\n\t\tawait testObject.removeKeybinding(aResolvedKeybindingItem({ command: 'a', firstChord: { keyCode: KeyCode.KeyC, modifiers: { altKey: true } } }));\n\t\tassert.deepStrictEqual(await getUserKeybindings(), expected);\n\t});\n\n\ttest('remove a default keybinding should not ad duplicate entries', async () => {\n\t\tconst expected: IUserFriendlyKeybinding[] = [{ key: 'alt+c', command: '-a' }];\n\t\tawait testObject.removeKeybinding(aResolvedKeybindingItem({ command: 'a', firstChord: { keyCode: KeyCode.KeyC, modifiers: { altKey: true } } }));\n\t\tawait testObject.removeKeybinding(aResolvedKeybindingItem({ command: 'a', firstChord: { keyCode: KeyCode.KeyC, modifiers: { altKey: true } } }));\n\t\tawait testObject.removeKeybinding(aResolvedKeybindingItem({ command: 'a', firstChord: { keyCode: KeyCode.KeyC, modifiers: { altKey: true } } }));\n\t\tawait testObject.removeKeybinding(aResolvedKeybindingItem({ command: 'a', firstChord: { keyCode: KeyCode.KeyC, modifiers: { altKey: true } } }));\n\t\tawait testObject.removeKeybinding(aResolvedKeybindingItem({ command: 'a', firstChord: { keyCode: KeyCode.KeyC, modifiers: { altKey: true } } }));\n\t\tassert.deepStrictEqual(await getUserKeybindings(), expected);\n\t});\n\n\ttest('remove a user keybinding', async () => {\n\t\tawait writeToKeybindingsFile({ key: 'alt+c', command: 'b' });\n\t\tawait testObject.removeKeybinding(aResolvedKeybindingItem({ command: 'b', firstChord: { keyCode: KeyCode.KeyC, modifiers: { altKey: true } }, isDefault: false }));\n\t\tassert.deepStrictEqual(await getUserKeybindings(), []);\n\t});\n\n\ttest('reset an edited keybinding', async () => {\n\t\tawait writeToKeybindingsFile({ key: 'alt+c', command: 'b' });\n\t\tawait testObject.resetKeybinding(aResolvedKeybindingItem({ command: 'b', firstChord: { keyCode: KeyCode.KeyC, modifiers: { altKey: true } }, isDefault: false }));\n\t\tassert.deepStrictEqual(await getUserKeybindings(), []);\n\t});\n\n\ttest('reset a removed keybinding', async () => {\n\t\tawait writeToKeybindingsFile({ key: 'alt+c', command: '-b' });\n\t\tawait testObject.resetKeybinding(aResolvedKeybindingItem({ command: 'b', isDefault: false }));\n\t\tassert.deepStrictEqual(await getUserKeybindings(), []);\n\t});\n\n\ttest('reset multiple removed keybindings', async () => {\n\t\tawait writeToKeybindingsFile({ key: 'alt+c', command: '-b' });\n\t\tawait writeToKeybindingsFile({ key: 'alt+shift+c', command: '-b' });\n\t\tawait writeToKeybindingsFile({ key: 'escape', command: '-b' });\n\t\tawait testObject.resetKeybinding(aResolvedKeybindingItem({ command: 'b', isDefault: false }));\n\t\tassert.deepStrictEqual(await getUserKeybindings(), []);\n\t});\n\n\ttest('add a new keybinding to unassigned keybinding', async () => {\n\t\tawait writeToKeybindingsFile({ key: 'alt+c', command: '-a' });\n\t\tconst expected: IUserFriendlyKeybinding[] = [{ key: 'alt+c', command: '-a' }, { key: 'shift+alt+c', command: 'a' }];\n\t\tawait testObject.editKeybinding(aResolvedKeybindingItem({ command: 'a', isDefault: false }), 'shift+alt+c', undefined);\n\t\tassert.deepStrictEqual(await getUserKeybindings(), expected);\n\t});\n\n\ttest('add when expression', async () => {\n\t\tawait writeToKeybindingsFile({ key: 'alt+c', command: '-a' });\n\t\tconst expected: IUserFriendlyKeybinding[] = [{ key: 'alt+c', command: '-a' }, { key: 'shift+alt+c', command: 'a', when: 'editorTextFocus' }];\n\t\tawait testObject.editKeybinding(aResolvedKeybindingItem({ command: 'a', isDefault: false }), 'shift+alt+c', 'editorTextFocus');\n\t\tassert.deepStrictEqual(await getUserKeybindings(), expected);\n\t});\n\n\ttest('update command and when expression', async () => {\n\t\tawait writeToKeybindingsFile({ key: 'alt+c', command: '-a', when: 'editorTextFocus && !editorReadonly' });\n\t\tconst expected: IUserFriendlyKeybinding[] = [{ key: 'alt+c', command: '-a', when: 'editorTextFocus && !editorReadonly' }, { key: 'shift+alt+c', command: 'a', when: 'editorTextFocus' }];\n\t\tawait testObject.editKeybinding(aResolvedKeybindingItem({ command: 'a', isDefault: false }), 'shift+alt+c', 'editorTextFocus');\n\t\tassert.deepStrictEqual(await getUserKeybindings(), expected);\n\t});\n\n\ttest('update when expression', async () => {\n\t\tawait writeToKeybindingsFile({ key: 'alt+c', command: '-a', when: 'editorTextFocus && !editorReadonly' }, { key: 'shift+alt+c', command: 'a', when: 'editorTextFocus && !editorReadonly' });\n\t\tconst expected: IUserFriendlyKeybinding[] = [{ key: 'alt+c', command: '-a', when: 'editorTextFocus && !editorReadonly' }, { key: 'shift+alt+c', command: 'a', when: 'editorTextFocus' }];\n\t\tawait testObject.editKeybinding(aResolvedKeybindingItem({ command: 'a', isDefault: false, when: 'editorTextFocus && !editorReadonly' }), 'shift+alt+c', 'editorTextFocus');\n\t\tassert.deepStrictEqual(await getUserKeybindings(), expected);\n\t});\n\n\ttest('remove when expression', async () => {\n\t\tawait writeToKeybindingsFile({ key: 'alt+c', command: '-a', when: 'editorTextFocus && !editorReadonly' });\n\t\tconst expected: IUserFriendlyKeybinding[] = [{ key: 'alt+c', command: '-a', when: 'editorTextFocus && !editorReadonly' }, { key: 'shift+alt+c', command: 'a' }];\n\t\tawait testObject.editKeybinding(aResolvedKeybindingItem({ command: 'a', isDefault: false }), 'shift+alt+c', undefined);\n\t\tassert.deepStrictEqual(await getUserKeybindings(), expected);\n\t});\n\n\tasync function writeToKeybindingsFile(...keybindings: IUserFriendlyKeybinding[]): Promise<void> {\n\t\tawait fileService.writeFile(userDataProfileService.currentProfile.keybindingsResource, VSBuffer.fromString(JSON.stringify(keybindings || [])));\n\t}\n\n\tasync function getUserKeybindings(): Promise<IUserFriendlyKeybinding[]> {\n\t\treturn json.parse((await fileService.readFile(userDataProfileService.currentProfile.keybindingsResource)).value.toString());\n\t}\n\n\tfunction aResolvedKeybindingItem({ command, when, isDefault, firstChord, secondChord }: { command?: string; when?: string; isDefault?: boolean; firstChord?: { keyCode: KeyCode; modifiers?: Modifiers }; secondChord?: { keyCode: KeyCode; modifiers?: Modifiers } }): ResolvedKeybindingItem {\n\t\tconst aSimpleKeybinding = function (chord: { keyCode: KeyCode; modifiers?: Modifiers }): KeyCodeChord {\n\t\t\tconst { ctrlKey, shiftKey, altKey, metaKey } = chord.modifiers || { ctrlKey: false, shiftKey: false, altKey: false, metaKey: false };\n\t\t\treturn new KeyCodeChord(ctrlKey!, shiftKey!, altKey!, metaKey!, chord.keyCode);\n\t\t};\n\t\tconst chords: KeyCodeChord[] = [];\n\t\tif (firstChord) {\n\t\t\tchords.push(aSimpleKeybinding(firstChord));\n\t\t\tif (secondChord) {\n\t\t\t\tchords.push(aSimpleKeybinding(secondChord));\n\t\t\t}\n\t\t}\n\t\tconst keybinding = chords.length > 0 ? new USLayoutResolvedKeybinding(chords, OS) : undefined;\n\t\treturn new ResolvedKeybindingItem(keybinding, command || 'some command', null, when ? ContextKeyExpr.deserialize(when) : undefined, isDefault === undefined ? true : isDefault, null, false);\n\t}\n});\n"],
  "mappings": "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",
  "names": []
}
