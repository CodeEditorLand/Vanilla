import a from"assert";import*as x from"../../../../../base/common/json.js";import{KeyCode as r}from"../../../../../base/common/keyCodes.js";import{KeyCodeChord as U}from"../../../../../base/common/keybindings.js";import{OS as P}from"../../../../../base/common/platform.js";import{ContextKeyExpr as q}from"../../../../../platform/contextkey/common/contextkey.js";import"../../../../../platform/environment/common/environment.js";import"../../../../../platform/files/common/files.js";import"../../../../../platform/instantiation/test/common/instantiationServiceMock.js";import"../../../../../platform/keybinding/common/keybinding.js";import{ResolvedKeybindingItem as D}from"../../../../../platform/keybinding/common/resolvedKeybindingItem.js";import{USLayoutResolvedKeybinding as T}from"../../../../../platform/keybinding/common/usLayoutResolvedKeybinding.js";import{NullLogService as K}from"../../../../../platform/log/common/log.js";import{KeybindingsEditingService as R}from"../../common/keybindingEditing.js";import{ITextFileService as M}from"../../../textfile/common/textfiles.js";import{TestEnvironmentService as O,workbenchInstantiationService as j}from"../../../../test/browser/workbenchTestServices.js";import{FileService as L}from"../../../../../platform/files/common/fileService.js";import{Schemas as S}from"../../../../../base/common/network.js";import{URI as N}from"../../../../../base/common/uri.js";import{FileUserDataProvider as A}from"../../../../../platform/userData/common/fileUserDataProvider.js";import{TestConfigurationService as z}from"../../../../../platform/configuration/test/common/testConfigurationService.js";import{joinPath as B}from"../../../../../base/common/resources.js";import{InMemoryFileSystemProvider as J}from"../../../../../platform/files/common/inMemoryFilesystemProvider.js";import{VSBuffer as u}from"../../../../../base/common/buffer.js";import{UserDataProfilesService as V}from"../../../../../platform/userDataProfile/common/userDataProfile.js";import{UserDataProfileService as G}from"../../../userDataProfile/common/userDataProfileService.js";import"../../../userDataProfile/common/userDataProfile.js";import{UriIdentityService as H}from"../../../../../platform/uriIdentity/common/uriIdentityService.js";import{ensureNoDisposablesAreLeakedInTestSuite as Q}from"../../../../../base/test/common/utils.js";const h=N.file("tests").with({scheme:"vscode-tests"});suite("KeybindingsEditing",()=>{const s=Q();let w,o,p,c,i;setup(async()=>{p=O;const e=new K;o=s.add(new L(e));const y=s.add(new J);s.add(o.registerProvider(h.scheme,y));const g=B(h,"User");await o.createFolder(g);const m=new z;m.setUserConfiguration("files",{eol:`
`});const l=s.add(new H(o)),f=s.add(new V(p,o,l,e));c=s.add(new G(f.defaultProfile)),s.add(o.registerProvider(S.vscodeUserData,s.add(new A(h.scheme,y,S.vscodeUserData,f,l,new K)))),w=j({fileService:()=>o,configurationService:()=>m,environmentService:()=>p},s),i=s.add(w.createInstance(R))}),test("errors cases - parse errors",async()=>{await o.writeFile(c.currentProfile.keybindingsResource,u.fromString(",,,,,,,,,,,,,,"));try{await i.editKeybinding(t({firstChord:{keyCode:r.Escape}}),"alt+c",void 0),a.fail("Should fail with parse errors")}catch(e){a.strictEqual(e.message,"Unable to write to the keybindings configuration file. Please open it to correct errors/warnings in the file and try again.")}}),test("errors cases - parse errors 2",async()=>{await o.writeFile(c.currentProfile.keybindingsResource,u.fromString('[{"key": }]'));try{await i.editKeybinding(t({firstChord:{keyCode:r.Escape}}),"alt+c",void 0),a.fail("Should fail with parse errors")}catch(e){a.strictEqual(e.message,"Unable to write to the keybindings configuration file. Please open it to correct errors/warnings in the file and try again.")}}),test("errors cases - dirty",()=>(w.stub(M,"isDirty",!0),i.editKeybinding(t({firstChord:{keyCode:r.Escape}}),"alt+c",void 0).then(()=>a.fail("Should fail with dirty error"),e=>a.strictEqual(e.message,"Unable to write because the keybindings configuration file has unsaved changes. Please save it first and then try again.")))),test("errors cases - did not find an array",async()=>{await o.writeFile(c.currentProfile.keybindingsResource,u.fromString('{"key": "alt+c", "command": "hello"}'));try{await i.editKeybinding(t({firstChord:{keyCode:r.Escape}}),"alt+c",void 0),a.fail("Should fail")}catch(e){a.strictEqual(e.message,"Unable to write to the keybindings configuration file. It has an object which is not of type Array. Please open the file to clean up and try again.")}}),test("edit a default keybinding to an empty file",async()=>{await o.writeFile(c.currentProfile.keybindingsResource,u.fromString(""));const e=[{key:"alt+c",command:"a"},{key:"escape",command:"-a"}];await i.editKeybinding(t({firstChord:{keyCode:r.Escape},command:"a"}),"alt+c",void 0),a.deepStrictEqual(await n(),e)}),test("edit a default keybinding to an empty array",async()=>{await d();const e=[{key:"alt+c",command:"a"},{key:"escape",command:"-a"}];return await i.editKeybinding(t({firstChord:{keyCode:r.Escape},command:"a"}),"alt+c",void 0),a.deepStrictEqual(await n(),e)}),test("edit a default keybinding in an existing array",async()=>{await d({command:"b",key:"shift+c"});const e=[{key:"shift+c",command:"b"},{key:"alt+c",command:"a"},{key:"escape",command:"-a"}];return await i.editKeybinding(t({firstChord:{keyCode:r.Escape},command:"a"}),"alt+c",void 0),a.deepStrictEqual(await n(),e)}),test("add another keybinding",async()=>{const e=[{key:"alt+c",command:"a"}];return await i.addKeybinding(t({firstChord:{keyCode:r.Escape},command:"a"}),"alt+c",void 0),a.deepStrictEqual(await n(),e)}),test("add a new default keybinding",async()=>{const e=[{key:"alt+c",command:"a"}];return await i.addKeybinding(t({command:"a"}),"alt+c",void 0),a.deepStrictEqual(await n(),e)}),test("add a new default keybinding using edit",async()=>{const e=[{key:"alt+c",command:"a"}];await i.editKeybinding(t({command:"a"}),"alt+c",void 0),a.deepStrictEqual(await n(),e)}),test("edit an user keybinding",async()=>{await d({key:"escape",command:"b"});const e=[{key:"alt+c",command:"b"}];await i.editKeybinding(t({firstChord:{keyCode:r.Escape},command:"b",isDefault:!1}),"alt+c",void 0),a.deepStrictEqual(await n(),e)}),test("edit an user keybinding with more than one element",async()=>{await d({key:"escape",command:"b"},{key:"alt+shift+g",command:"c"});const e=[{key:"alt+c",command:"b"},{key:"alt+shift+g",command:"c"}];await i.editKeybinding(t({firstChord:{keyCode:r.Escape},command:"b",isDefault:!1}),"alt+c",void 0),a.deepStrictEqual(await n(),e)}),test("remove a default keybinding",async()=>{const e=[{key:"alt+c",command:"-a"}];await i.removeKeybinding(t({command:"a",firstChord:{keyCode:r.KeyC,modifiers:{altKey:!0}}})),a.deepStrictEqual(await n(),e)}),test("remove a default keybinding should not ad duplicate entries",async()=>{const e=[{key:"alt+c",command:"-a"}];await i.removeKeybinding(t({command:"a",firstChord:{keyCode:r.KeyC,modifiers:{altKey:!0}}})),await i.removeKeybinding(t({command:"a",firstChord:{keyCode:r.KeyC,modifiers:{altKey:!0}}})),await i.removeKeybinding(t({command:"a",firstChord:{keyCode:r.KeyC,modifiers:{altKey:!0}}})),await i.removeKeybinding(t({command:"a",firstChord:{keyCode:r.KeyC,modifiers:{altKey:!0}}})),await i.removeKeybinding(t({command:"a",firstChord:{keyCode:r.KeyC,modifiers:{altKey:!0}}})),a.deepStrictEqual(await n(),e)}),test("remove a user keybinding",async()=>{await d({key:"alt+c",command:"b"}),await i.removeKeybinding(t({command:"b",firstChord:{keyCode:r.KeyC,modifiers:{altKey:!0}},isDefault:!1})),a.deepStrictEqual(await n(),[])}),test("reset an edited keybinding",async()=>{await d({key:"alt+c",command:"b"}),await i.resetKeybinding(t({command:"b",firstChord:{keyCode:r.KeyC,modifiers:{altKey:!0}},isDefault:!1})),a.deepStrictEqual(await n(),[])}),test("reset a removed keybinding",async()=>{await d({key:"alt+c",command:"-b"}),await i.resetKeybinding(t({command:"b",isDefault:!1})),a.deepStrictEqual(await n(),[])}),test("reset multiple removed keybindings",async()=>{await d({key:"alt+c",command:"-b"}),await d({key:"alt+shift+c",command:"-b"}),await d({key:"escape",command:"-b"}),await i.resetKeybinding(t({command:"b",isDefault:!1})),a.deepStrictEqual(await n(),[])}),test("add a new keybinding to unassigned keybinding",async()=>{await d({key:"alt+c",command:"-a"});const e=[{key:"alt+c",command:"-a"},{key:"shift+alt+c",command:"a"}];await i.editKeybinding(t({command:"a",isDefault:!1}),"shift+alt+c",void 0),a.deepStrictEqual(await n(),e)}),test("add when expression",async()=>{await d({key:"alt+c",command:"-a"});const e=[{key:"alt+c",command:"-a"},{key:"shift+alt+c",command:"a",when:"editorTextFocus"}];await i.editKeybinding(t({command:"a",isDefault:!1}),"shift+alt+c","editorTextFocus"),a.deepStrictEqual(await n(),e)}),test("update command and when expression",async()=>{await d({key:"alt+c",command:"-a",when:"editorTextFocus && !editorReadonly"});const e=[{key:"alt+c",command:"-a",when:"editorTextFocus && !editorReadonly"},{key:"shift+alt+c",command:"a",when:"editorTextFocus"}];await i.editKeybinding(t({command:"a",isDefault:!1}),"shift+alt+c","editorTextFocus"),a.deepStrictEqual(await n(),e)}),test("update when expression",async()=>{await d({key:"alt+c",command:"-a",when:"editorTextFocus && !editorReadonly"},{key:"shift+alt+c",command:"a",when:"editorTextFocus && !editorReadonly"});const e=[{key:"alt+c",command:"-a",when:"editorTextFocus && !editorReadonly"},{key:"shift+alt+c",command:"a",when:"editorTextFocus"}];await i.editKeybinding(t({command:"a",isDefault:!1,when:"editorTextFocus && !editorReadonly"}),"shift+alt+c","editorTextFocus"),a.deepStrictEqual(await n(),e)}),test("remove when expression",async()=>{await d({key:"alt+c",command:"-a",when:"editorTextFocus && !editorReadonly"});const e=[{key:"alt+c",command:"-a",when:"editorTextFocus && !editorReadonly"},{key:"shift+alt+c",command:"a"}];await i.editKeybinding(t({command:"a",isDefault:!1}),"shift+alt+c",void 0),a.deepStrictEqual(await n(),e)});async function d(...e){await o.writeFile(c.currentProfile.keybindingsResource,u.fromString(JSON.stringify(e||[])))}async function n(){return x.parse((await o.readFile(c.currentProfile.keybindingsResource)).value.toString())}function t({command:e,when:y,isDefault:g,firstChord:m,secondChord:l}){const f=function(k){const{ctrlKey:C,shiftKey:F,altKey:E,metaKey:I}=k.modifiers||{ctrlKey:!1,shiftKey:!1,altKey:!1,metaKey:!1};return new U(C,F,E,I,k.keyCode)},b=[];m&&(b.push(f(m)),l&&b.push(f(l)));const v=b.length>0?new T(b,P):void 0;return new D(v,e||"some command",null,y?q.deserialize(y):void 0,g===void 0?!0:g,null,!1)}});
