{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/keybinding/test/node/windowsKeyboardMapper.test.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { KeyChord, KeyCode, KeyMod, ScanCode } from '../../../../../base/common/keyCodes.js';\nimport { KeyCodeChord, decodeKeybinding, ScanCodeChord, Keybinding } from '../../../../../base/common/keybindings.js';\nimport { OperatingSystem } from '../../../../../base/common/platform.js';\nimport { WindowsKeyboardMapper } from '../../common/windowsKeyboardMapper.js';\nimport { IResolvedKeybinding, assertMapping, assertResolveKeyboardEvent, assertResolveKeybinding, readRawMapping } from './keyboardMapperTestUtils.js';\nimport { IWindowsKeyboardMapping } from '../../../../../platform/keyboardLayout/common/keyboardLayout.js';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from '../../../../../base/test/common/utils.js';\n\nconst WRITE_FILE_IF_DIFFERENT = false;\n\nasync function createKeyboardMapper(isUSStandard: boolean, file: string, mapAltGrToCtrlAlt: boolean): Promise<WindowsKeyboardMapper> {\n\tconst rawMappings = await readRawMapping<IWindowsKeyboardMapping>(file);\n\treturn new WindowsKeyboardMapper(isUSStandard, rawMappings, mapAltGrToCtrlAlt);\n}\n\nfunction _assertResolveKeybinding(mapper: WindowsKeyboardMapper, k: number, expected: IResolvedKeybinding[]): void {\n\tconst keyBinding = decodeKeybinding(k, OperatingSystem.Windows);\n\tassertResolveKeybinding(mapper, keyBinding!, expected);\n}\n\nsuite('keyboardMapper - WINDOWS de_ch', () => {\n\n\tensureNoDisposablesAreLeakedInTestSuite();\n\n\tlet mapper: WindowsKeyboardMapper;\n\n\tsuiteSetup(async () => {\n\t\tmapper = await createKeyboardMapper(false, 'win_de_ch', false);\n\t});\n\n\ttest('mapping', () => {\n\t\treturn assertMapping(WRITE_FILE_IF_DIFFERENT, mapper, 'win_de_ch.txt');\n\t});\n\n\ttest('resolveKeybinding Ctrl+A', () => {\n\t\t_assertResolveKeybinding(\n\t\t\tmapper,\n\t\t\tKeyMod.CtrlCmd | KeyCode.KeyA,\n\t\t\t[{\n\t\t\t\tlabel: 'Ctrl+A',\n\t\t\t\tariaLabel: 'Control+A',\n\t\t\t\telectronAccelerator: 'Ctrl+A',\n\t\t\t\tuserSettingsLabel: 'ctrl+a',\n\t\t\t\tisWYSIWYG: true,\n\t\t\t\tisMultiChord: false,\n\t\t\t\tdispatchParts: ['ctrl+A'],\n\t\t\t\tsingleModifierDispatchParts: [null],\n\t\t\t}]\n\t\t);\n\t});\n\n\ttest('resolveKeybinding Ctrl+Z', () => {\n\t\t_assertResolveKeybinding(\n\t\t\tmapper,\n\t\t\tKeyMod.CtrlCmd | KeyCode.KeyZ,\n\t\t\t[{\n\t\t\t\tlabel: 'Ctrl+Z',\n\t\t\t\tariaLabel: 'Control+Z',\n\t\t\t\telectronAccelerator: 'Ctrl+Z',\n\t\t\t\tuserSettingsLabel: 'ctrl+z',\n\t\t\t\tisWYSIWYG: true,\n\t\t\t\tisMultiChord: false,\n\t\t\t\tdispatchParts: ['ctrl+Z'],\n\t\t\t\tsingleModifierDispatchParts: [null],\n\t\t\t}]\n\t\t);\n\t});\n\n\ttest('resolveKeyboardEvent Ctrl+Z', () => {\n\t\tassertResolveKeyboardEvent(\n\t\t\tmapper,\n\t\t\t{\n\t\t\t\t_standardKeyboardEventBrand: true,\n\t\t\t\tctrlKey: true,\n\t\t\t\tshiftKey: false,\n\t\t\t\taltKey: false,\n\t\t\t\tmetaKey: false,\n\t\t\t\taltGraphKey: false,\n\t\t\t\tkeyCode: KeyCode.KeyZ,\n\t\t\t\tcode: null!\n\t\t\t},\n\t\t\t{\n\t\t\t\tlabel: 'Ctrl+Z',\n\t\t\t\tariaLabel: 'Control+Z',\n\t\t\t\telectronAccelerator: 'Ctrl+Z',\n\t\t\t\tuserSettingsLabel: 'ctrl+z',\n\t\t\t\tisWYSIWYG: true,\n\t\t\t\tisMultiChord: false,\n\t\t\t\tdispatchParts: ['ctrl+Z'],\n\t\t\t\tsingleModifierDispatchParts: [null],\n\t\t\t}\n\t\t);\n\t});\n\n\ttest('resolveKeybinding Ctrl+]', () => {\n\t\t_assertResolveKeybinding(\n\t\t\tmapper,\n\t\t\tKeyMod.CtrlCmd | KeyCode.BracketRight,\n\t\t\t[{\n\t\t\t\tlabel: 'Ctrl+^',\n\t\t\t\tariaLabel: 'Control+^',\n\t\t\t\telectronAccelerator: 'Ctrl+]',\n\t\t\t\tuserSettingsLabel: 'ctrl+oem_6',\n\t\t\t\tisWYSIWYG: false,\n\t\t\t\tisMultiChord: false,\n\t\t\t\tdispatchParts: ['ctrl+]'],\n\t\t\t\tsingleModifierDispatchParts: [null],\n\t\t\t}]\n\t\t);\n\t});\n\n\ttest('resolveKeyboardEvent Ctrl+]', () => {\n\t\tassertResolveKeyboardEvent(\n\t\t\tmapper,\n\t\t\t{\n\t\t\t\t_standardKeyboardEventBrand: true,\n\t\t\t\tctrlKey: true,\n\t\t\t\tshiftKey: false,\n\t\t\t\taltKey: false,\n\t\t\t\tmetaKey: false,\n\t\t\t\taltGraphKey: false,\n\t\t\t\tkeyCode: KeyCode.BracketRight,\n\t\t\t\tcode: null!\n\t\t\t},\n\t\t\t{\n\t\t\t\tlabel: 'Ctrl+^',\n\t\t\t\tariaLabel: 'Control+^',\n\t\t\t\telectronAccelerator: 'Ctrl+]',\n\t\t\t\tuserSettingsLabel: 'ctrl+oem_6',\n\t\t\t\tisWYSIWYG: false,\n\t\t\t\tisMultiChord: false,\n\t\t\t\tdispatchParts: ['ctrl+]'],\n\t\t\t\tsingleModifierDispatchParts: [null],\n\t\t\t}\n\t\t);\n\t});\n\n\ttest('resolveKeybinding Shift+]', () => {\n\t\t_assertResolveKeybinding(\n\t\t\tmapper,\n\t\t\tKeyMod.Shift | KeyCode.BracketRight,\n\t\t\t[{\n\t\t\t\tlabel: 'Shift+^',\n\t\t\t\tariaLabel: 'Shift+^',\n\t\t\t\telectronAccelerator: 'Shift+]',\n\t\t\t\tuserSettingsLabel: 'shift+oem_6',\n\t\t\t\tisWYSIWYG: false,\n\t\t\t\tisMultiChord: false,\n\t\t\t\tdispatchParts: ['shift+]'],\n\t\t\t\tsingleModifierDispatchParts: [null],\n\t\t\t}]\n\t\t);\n\t});\n\n\ttest('resolveKeybinding Ctrl+/', () => {\n\t\t_assertResolveKeybinding(\n\t\t\tmapper,\n\t\t\tKeyMod.CtrlCmd | KeyCode.Slash,\n\t\t\t[{\n\t\t\t\tlabel: 'Ctrl+\u00A7',\n\t\t\t\tariaLabel: 'Control+\u00A7',\n\t\t\t\telectronAccelerator: 'Ctrl+/',\n\t\t\t\tuserSettingsLabel: 'ctrl+oem_2',\n\t\t\t\tisWYSIWYG: false,\n\t\t\t\tisMultiChord: false,\n\t\t\t\tdispatchParts: ['ctrl+/'],\n\t\t\t\tsingleModifierDispatchParts: [null],\n\t\t\t}]\n\t\t);\n\t});\n\n\ttest('resolveKeybinding Ctrl+Shift+/', () => {\n\t\t_assertResolveKeybinding(\n\t\t\tmapper,\n\t\t\tKeyMod.CtrlCmd | KeyMod.Shift | KeyCode.Slash,\n\t\t\t[{\n\t\t\t\tlabel: 'Ctrl+Shift+\u00A7',\n\t\t\t\tariaLabel: 'Control+Shift+\u00A7',\n\t\t\t\telectronAccelerator: 'Ctrl+Shift+/',\n\t\t\t\tuserSettingsLabel: 'ctrl+shift+oem_2',\n\t\t\t\tisWYSIWYG: false,\n\t\t\t\tisMultiChord: false,\n\t\t\t\tdispatchParts: ['ctrl+shift+/'],\n\t\t\t\tsingleModifierDispatchParts: [null],\n\t\t\t}]\n\t\t);\n\t});\n\n\ttest('resolveKeybinding Ctrl+K Ctrl+\\\\', () => {\n\t\t_assertResolveKeybinding(\n\t\t\tmapper,\n\t\t\tKeyChord(KeyMod.CtrlCmd | KeyCode.KeyK, KeyMod.CtrlCmd | KeyCode.Backslash),\n\t\t\t[{\n\t\t\t\tlabel: 'Ctrl+K Ctrl+\u00E4',\n\t\t\t\tariaLabel: 'Control+K Control+\u00E4',\n\t\t\t\telectronAccelerator: null,\n\t\t\t\tuserSettingsLabel: 'ctrl+k ctrl+oem_5',\n\t\t\t\tisWYSIWYG: false,\n\t\t\t\tisMultiChord: true,\n\t\t\t\tdispatchParts: ['ctrl+K', 'ctrl+\\\\'],\n\t\t\t\tsingleModifierDispatchParts: [null, null],\n\t\t\t}]\n\t\t);\n\t});\n\n\ttest('resolveKeybinding Ctrl+K Ctrl+=', () => {\n\t\t_assertResolveKeybinding(\n\t\t\tmapper,\n\t\t\tKeyChord(KeyMod.CtrlCmd | KeyCode.KeyK, KeyMod.CtrlCmd | KeyCode.Equal),\n\t\t\t[]\n\t\t);\n\t});\n\n\ttest('resolveKeybinding Ctrl+DownArrow', () => {\n\t\t_assertResolveKeybinding(\n\t\t\tmapper,\n\t\t\tKeyMod.CtrlCmd | KeyCode.DownArrow,\n\t\t\t[{\n\t\t\t\tlabel: 'Ctrl+DownArrow',\n\t\t\t\tariaLabel: 'Control+DownArrow',\n\t\t\t\telectronAccelerator: 'Ctrl+Down',\n\t\t\t\tuserSettingsLabel: 'ctrl+down',\n\t\t\t\tisWYSIWYG: true,\n\t\t\t\tisMultiChord: false,\n\t\t\t\tdispatchParts: ['ctrl+DownArrow'],\n\t\t\t\tsingleModifierDispatchParts: [null],\n\t\t\t}]\n\t\t);\n\t});\n\n\ttest('resolveKeybinding Ctrl+NUMPAD_0', () => {\n\t\t_assertResolveKeybinding(\n\t\t\tmapper,\n\t\t\tKeyMod.CtrlCmd | KeyCode.Numpad0,\n\t\t\t[{\n\t\t\t\tlabel: 'Ctrl+NumPad0',\n\t\t\t\tariaLabel: 'Control+NumPad0',\n\t\t\t\telectronAccelerator: null,\n\t\t\t\tuserSettingsLabel: 'ctrl+numpad0',\n\t\t\t\tisWYSIWYG: true,\n\t\t\t\tisMultiChord: false,\n\t\t\t\tdispatchParts: ['ctrl+NumPad0'],\n\t\t\t\tsingleModifierDispatchParts: [null],\n\t\t\t}]\n\t\t);\n\t});\n\n\ttest('resolveKeybinding Ctrl+Home', () => {\n\t\t_assertResolveKeybinding(\n\t\t\tmapper,\n\t\t\tKeyMod.CtrlCmd | KeyCode.Home,\n\t\t\t[{\n\t\t\t\tlabel: 'Ctrl+Home',\n\t\t\t\tariaLabel: 'Control+Home',\n\t\t\t\telectronAccelerator: 'Ctrl+Home',\n\t\t\t\tuserSettingsLabel: 'ctrl+home',\n\t\t\t\tisWYSIWYG: true,\n\t\t\t\tisMultiChord: false,\n\t\t\t\tdispatchParts: ['ctrl+Home'],\n\t\t\t\tsingleModifierDispatchParts: [null],\n\t\t\t}]\n\t\t);\n\t});\n\n\ttest('resolveKeyboardEvent Ctrl+Home', () => {\n\t\tassertResolveKeyboardEvent(\n\t\t\tmapper,\n\t\t\t{\n\t\t\t\t_standardKeyboardEventBrand: true,\n\t\t\t\tctrlKey: true,\n\t\t\t\tshiftKey: false,\n\t\t\t\taltKey: false,\n\t\t\t\tmetaKey: false,\n\t\t\t\taltGraphKey: false,\n\t\t\t\tkeyCode: KeyCode.Home,\n\t\t\t\tcode: null!\n\t\t\t},\n\t\t\t{\n\t\t\t\tlabel: 'Ctrl+Home',\n\t\t\t\tariaLabel: 'Control+Home',\n\t\t\t\telectronAccelerator: 'Ctrl+Home',\n\t\t\t\tuserSettingsLabel: 'ctrl+home',\n\t\t\t\tisWYSIWYG: true,\n\t\t\t\tisMultiChord: false,\n\t\t\t\tdispatchParts: ['ctrl+Home'],\n\t\t\t\tsingleModifierDispatchParts: [null],\n\t\t\t}\n\t\t);\n\t});\n\n\ttest('resolveUserBinding Ctrl+[Comma] Ctrl+/', () => {\n\t\tassertResolveKeybinding(\n\t\t\tmapper, new Keybinding([\n\t\t\t\tnew ScanCodeChord(true, false, false, false, ScanCode.Comma),\n\t\t\t\tnew KeyCodeChord(true, false, false, false, KeyCode.Slash),\n\t\t\t]),\n\t\t\t[{\n\t\t\t\tlabel: 'Ctrl+, Ctrl+\u00A7',\n\t\t\t\tariaLabel: 'Control+, Control+\u00A7',\n\t\t\t\telectronAccelerator: null,\n\t\t\t\tuserSettingsLabel: 'ctrl+oem_comma ctrl+oem_2',\n\t\t\t\tisWYSIWYG: false,\n\t\t\t\tisMultiChord: true,\n\t\t\t\tdispatchParts: ['ctrl+,', 'ctrl+/'],\n\t\t\t\tsingleModifierDispatchParts: [null, null],\n\t\t\t}]\n\t\t);\n\t});\n\n\ttest('resolveKeyboardEvent Single Modifier Ctrl+', () => {\n\t\tassertResolveKeyboardEvent(\n\t\t\tmapper,\n\t\t\t{\n\t\t\t\t_standardKeyboardEventBrand: true,\n\t\t\t\tctrlKey: true,\n\t\t\t\tshiftKey: false,\n\t\t\t\taltKey: false,\n\t\t\t\tmetaKey: false,\n\t\t\t\taltGraphKey: false,\n\t\t\t\tkeyCode: KeyCode.Ctrl,\n\t\t\t\tcode: null!\n\t\t\t},\n\t\t\t{\n\t\t\t\tlabel: 'Ctrl',\n\t\t\t\tariaLabel: 'Control',\n\t\t\t\telectronAccelerator: null,\n\t\t\t\tuserSettingsLabel: 'ctrl',\n\t\t\t\tisWYSIWYG: true,\n\t\t\t\tisMultiChord: false,\n\t\t\t\tdispatchParts: [null],\n\t\t\t\tsingleModifierDispatchParts: ['ctrl'],\n\t\t\t}\n\t\t);\n\t});\n});\n\nsuite('keyboardMapper - WINDOWS en_us', () => {\n\n\tensureNoDisposablesAreLeakedInTestSuite();\n\n\tlet mapper: WindowsKeyboardMapper;\n\n\tsuiteSetup(async () => {\n\t\tmapper = await createKeyboardMapper(true, 'win_en_us', false);\n\t});\n\n\ttest('mapping', () => {\n\t\treturn assertMapping(WRITE_FILE_IF_DIFFERENT, mapper, 'win_en_us.txt');\n\t});\n\n\ttest('resolveKeybinding Ctrl+K Ctrl+\\\\', () => {\n\t\t_assertResolveKeybinding(\n\t\t\tmapper,\n\t\t\tKeyChord(KeyMod.CtrlCmd | KeyCode.KeyK, KeyMod.CtrlCmd | KeyCode.Backslash),\n\t\t\t[{\n\t\t\t\tlabel: 'Ctrl+K Ctrl+\\\\',\n\t\t\t\tariaLabel: 'Control+K Control+\\\\',\n\t\t\t\telectronAccelerator: null,\n\t\t\t\tuserSettingsLabel: 'ctrl+k ctrl+\\\\',\n\t\t\t\tisWYSIWYG: true,\n\t\t\t\tisMultiChord: true,\n\t\t\t\tdispatchParts: ['ctrl+K', 'ctrl+\\\\'],\n\t\t\t\tsingleModifierDispatchParts: [null, null],\n\t\t\t}]\n\t\t);\n\t});\n\n\ttest('resolveUserBinding Ctrl+[Comma] Ctrl+/', () => {\n\t\tassertResolveKeybinding(\n\t\t\tmapper, new Keybinding([\n\t\t\t\tnew ScanCodeChord(true, false, false, false, ScanCode.Comma),\n\t\t\t\tnew KeyCodeChord(true, false, false, false, KeyCode.Slash),\n\t\t\t]),\n\t\t\t[{\n\t\t\t\tlabel: 'Ctrl+, Ctrl+/',\n\t\t\t\tariaLabel: 'Control+, Control+/',\n\t\t\t\telectronAccelerator: null,\n\t\t\t\tuserSettingsLabel: 'ctrl+, ctrl+/',\n\t\t\t\tisWYSIWYG: true,\n\t\t\t\tisMultiChord: true,\n\t\t\t\tdispatchParts: ['ctrl+,', 'ctrl+/'],\n\t\t\t\tsingleModifierDispatchParts: [null, null],\n\t\t\t}]\n\t\t);\n\t});\n\n\ttest('resolveUserBinding Ctrl+[Comma]', () => {\n\t\tassertResolveKeybinding(\n\t\t\tmapper, new Keybinding([\n\t\t\t\tnew ScanCodeChord(true, false, false, false, ScanCode.Comma),\n\t\t\t]),\n\t\t\t[{\n\t\t\t\tlabel: 'Ctrl+,',\n\t\t\t\tariaLabel: 'Control+,',\n\t\t\t\telectronAccelerator: 'Ctrl+,',\n\t\t\t\tuserSettingsLabel: 'ctrl+,',\n\t\t\t\tisWYSIWYG: true,\n\t\t\t\tisMultiChord: false,\n\t\t\t\tdispatchParts: ['ctrl+,'],\n\t\t\t\tsingleModifierDispatchParts: [null],\n\t\t\t}]\n\t\t);\n\t});\n\n\ttest('resolveKeyboardEvent Single Modifier Ctrl+', () => {\n\t\tassertResolveKeyboardEvent(\n\t\t\tmapper,\n\t\t\t{\n\t\t\t\t_standardKeyboardEventBrand: true,\n\t\t\t\tctrlKey: true,\n\t\t\t\tshiftKey: false,\n\t\t\t\taltKey: false,\n\t\t\t\tmetaKey: false,\n\t\t\t\taltGraphKey: false,\n\t\t\t\tkeyCode: KeyCode.Ctrl,\n\t\t\t\tcode: null!\n\t\t\t},\n\t\t\t{\n\t\t\t\tlabel: 'Ctrl',\n\t\t\t\tariaLabel: 'Control',\n\t\t\t\telectronAccelerator: null,\n\t\t\t\tuserSettingsLabel: 'ctrl',\n\t\t\t\tisWYSIWYG: true,\n\t\t\t\tisMultiChord: false,\n\t\t\t\tdispatchParts: [null],\n\t\t\t\tsingleModifierDispatchParts: ['ctrl'],\n\t\t\t}\n\t\t);\n\t});\n\n\ttest('resolveKeyboardEvent Single Modifier Shift+', () => {\n\t\tassertResolveKeyboardEvent(\n\t\t\tmapper,\n\t\t\t{\n\t\t\t\t_standardKeyboardEventBrand: true,\n\t\t\t\tctrlKey: false,\n\t\t\t\tshiftKey: true,\n\t\t\t\taltKey: false,\n\t\t\t\tmetaKey: false,\n\t\t\t\taltGraphKey: false,\n\t\t\t\tkeyCode: KeyCode.Shift,\n\t\t\t\tcode: null!\n\t\t\t},\n\t\t\t{\n\t\t\t\tlabel: 'Shift',\n\t\t\t\tariaLabel: 'Shift',\n\t\t\t\telectronAccelerator: null,\n\t\t\t\tuserSettingsLabel: 'shift',\n\t\t\t\tisWYSIWYG: true,\n\t\t\t\tisMultiChord: false,\n\t\t\t\tdispatchParts: [null],\n\t\t\t\tsingleModifierDispatchParts: ['shift'],\n\t\t\t}\n\t\t);\n\t});\n\n\ttest('resolveKeyboardEvent Single Modifier Alt+', () => {\n\t\tassertResolveKeyboardEvent(\n\t\t\tmapper,\n\t\t\t{\n\t\t\t\t_standardKeyboardEventBrand: true,\n\t\t\t\tctrlKey: false,\n\t\t\t\tshiftKey: false,\n\t\t\t\taltKey: true,\n\t\t\t\tmetaKey: false,\n\t\t\t\taltGraphKey: false,\n\t\t\t\tkeyCode: KeyCode.Alt,\n\t\t\t\tcode: null!\n\t\t\t},\n\t\t\t{\n\t\t\t\tlabel: 'Alt',\n\t\t\t\tariaLabel: 'Alt',\n\t\t\t\telectronAccelerator: null,\n\t\t\t\tuserSettingsLabel: 'alt',\n\t\t\t\tisWYSIWYG: true,\n\t\t\t\tisMultiChord: false,\n\t\t\t\tdispatchParts: [null],\n\t\t\t\tsingleModifierDispatchParts: ['alt'],\n\t\t\t}\n\t\t);\n\t});\n\n\ttest('resolveKeyboardEvent Single Modifier Meta+', () => {\n\t\tassertResolveKeyboardEvent(\n\t\t\tmapper,\n\t\t\t{\n\t\t\t\t_standardKeyboardEventBrand: true,\n\t\t\t\tctrlKey: false,\n\t\t\t\tshiftKey: false,\n\t\t\t\taltKey: false,\n\t\t\t\tmetaKey: true,\n\t\t\t\taltGraphKey: false,\n\t\t\t\tkeyCode: KeyCode.Meta,\n\t\t\t\tcode: null!\n\t\t\t},\n\t\t\t{\n\t\t\t\tlabel: 'Windows',\n\t\t\t\tariaLabel: 'Windows',\n\t\t\t\telectronAccelerator: null,\n\t\t\t\tuserSettingsLabel: 'win',\n\t\t\t\tisWYSIWYG: true,\n\t\t\t\tisMultiChord: false,\n\t\t\t\tdispatchParts: [null],\n\t\t\t\tsingleModifierDispatchParts: ['meta'],\n\t\t\t}\n\t\t);\n\t});\n\n\ttest('resolveKeyboardEvent Only Modifiers Ctrl+Shift+', () => {\n\t\tassertResolveKeyboardEvent(\n\t\t\tmapper,\n\t\t\t{\n\t\t\t\t_standardKeyboardEventBrand: true,\n\t\t\t\tctrlKey: true,\n\t\t\t\tshiftKey: true,\n\t\t\t\taltKey: false,\n\t\t\t\tmetaKey: false,\n\t\t\t\taltGraphKey: false,\n\t\t\t\tkeyCode: KeyCode.Shift,\n\t\t\t\tcode: null!\n\t\t\t},\n\t\t\t{\n\t\t\t\tlabel: 'Ctrl+Shift',\n\t\t\t\tariaLabel: 'Control+Shift',\n\t\t\t\telectronAccelerator: null,\n\t\t\t\tuserSettingsLabel: 'ctrl+shift',\n\t\t\t\tisWYSIWYG: true,\n\t\t\t\tisMultiChord: false,\n\t\t\t\tdispatchParts: [null],\n\t\t\t\tsingleModifierDispatchParts: [null],\n\t\t\t}\n\t\t);\n\t});\n\n\ttest('resolveKeyboardEvent mapAltGrToCtrlAlt AltGr+Z', async () => {\n\t\tconst mapper = await createKeyboardMapper(true, 'win_en_us', true);\n\n\t\tassertResolveKeyboardEvent(\n\t\t\tmapper,\n\t\t\t{\n\t\t\t\t_standardKeyboardEventBrand: true,\n\t\t\t\tctrlKey: false,\n\t\t\t\tshiftKey: false,\n\t\t\t\taltKey: false,\n\t\t\t\tmetaKey: false,\n\t\t\t\taltGraphKey: true,\n\t\t\t\tkeyCode: KeyCode.KeyZ,\n\t\t\t\tcode: null!\n\t\t\t},\n\t\t\t{\n\t\t\t\tlabel: 'Ctrl+Alt+Z',\n\t\t\t\tariaLabel: 'Control+Alt+Z',\n\t\t\t\telectronAccelerator: 'Ctrl+Alt+Z',\n\t\t\t\tuserSettingsLabel: 'ctrl+alt+z',\n\t\t\t\tisWYSIWYG: true,\n\t\t\t\tisMultiChord: false,\n\t\t\t\tdispatchParts: ['ctrl+alt+Z'],\n\t\t\t\tsingleModifierDispatchParts: [null],\n\t\t\t}\n\t\t);\n\t});\n});\n\nsuite('keyboardMapper - WINDOWS por_ptb', () => {\n\n\tensureNoDisposablesAreLeakedInTestSuite();\n\n\tlet mapper: WindowsKeyboardMapper;\n\n\tsuiteSetup(async () => {\n\t\tmapper = await createKeyboardMapper(false, 'win_por_ptb', false);\n\t});\n\n\ttest('mapping', () => {\n\t\treturn assertMapping(WRITE_FILE_IF_DIFFERENT, mapper, 'win_por_ptb.txt');\n\t});\n\n\ttest('resolveKeyboardEvent Ctrl+[IntlRo]', () => {\n\t\tassertResolveKeyboardEvent(\n\t\t\tmapper,\n\t\t\t{\n\t\t\t\t_standardKeyboardEventBrand: true,\n\t\t\t\tctrlKey: true,\n\t\t\t\tshiftKey: false,\n\t\t\t\taltKey: false,\n\t\t\t\tmetaKey: false,\n\t\t\t\taltGraphKey: false,\n\t\t\t\tkeyCode: KeyCode.ABNT_C1,\n\t\t\t\tcode: null!\n\t\t\t},\n\t\t\t{\n\t\t\t\tlabel: 'Ctrl+/',\n\t\t\t\tariaLabel: 'Control+/',\n\t\t\t\telectronAccelerator: 'Ctrl+ABNT_C1',\n\t\t\t\tuserSettingsLabel: 'ctrl+abnt_c1',\n\t\t\t\tisWYSIWYG: false,\n\t\t\t\tisMultiChord: false,\n\t\t\t\tdispatchParts: ['ctrl+ABNT_C1'],\n\t\t\t\tsingleModifierDispatchParts: [null],\n\t\t\t}\n\t\t);\n\t});\n\n\ttest('resolveKeyboardEvent Ctrl+[NumpadComma]', () => {\n\t\tassertResolveKeyboardEvent(\n\t\t\tmapper,\n\t\t\t{\n\t\t\t\t_standardKeyboardEventBrand: true,\n\t\t\t\tctrlKey: true,\n\t\t\t\tshiftKey: false,\n\t\t\t\taltKey: false,\n\t\t\t\tmetaKey: false,\n\t\t\t\taltGraphKey: false,\n\t\t\t\tkeyCode: KeyCode.ABNT_C2,\n\t\t\t\tcode: null!\n\t\t\t},\n\t\t\t{\n\t\t\t\tlabel: 'Ctrl+.',\n\t\t\t\tariaLabel: 'Control+.',\n\t\t\t\telectronAccelerator: 'Ctrl+ABNT_C2',\n\t\t\t\tuserSettingsLabel: 'ctrl+abnt_c2',\n\t\t\t\tisWYSIWYG: false,\n\t\t\t\tisMultiChord: false,\n\t\t\t\tdispatchParts: ['ctrl+ABNT_C2'],\n\t\t\t\tsingleModifierDispatchParts: [null],\n\t\t\t}\n\t\t);\n\t});\n});\n\nsuite('keyboardMapper - WINDOWS ru', () => {\n\n\tensureNoDisposablesAreLeakedInTestSuite();\n\n\tlet mapper: WindowsKeyboardMapper;\n\n\tsuiteSetup(async () => {\n\t\tmapper = await createKeyboardMapper(false, 'win_ru', false);\n\t});\n\n\ttest('mapping', () => {\n\t\treturn assertMapping(WRITE_FILE_IF_DIFFERENT, mapper, 'win_ru.txt');\n\t});\n\n\ttest('issue ##24361: resolveKeybinding Ctrl+K Ctrl+K', () => {\n\t\t_assertResolveKeybinding(\n\t\t\tmapper,\n\t\t\tKeyChord(KeyMod.CtrlCmd | KeyCode.KeyK, KeyMod.CtrlCmd | KeyCode.KeyK),\n\t\t\t[{\n\t\t\t\tlabel: 'Ctrl+K Ctrl+K',\n\t\t\t\tariaLabel: 'Control+K Control+K',\n\t\t\t\telectronAccelerator: null,\n\t\t\t\tuserSettingsLabel: 'ctrl+k ctrl+k',\n\t\t\t\tisWYSIWYG: true,\n\t\t\t\tisMultiChord: true,\n\t\t\t\tdispatchParts: ['ctrl+K', 'ctrl+K'],\n\t\t\t\tsingleModifierDispatchParts: [null, null],\n\t\t\t}]\n\t\t);\n\t});\n});\n\nsuite('keyboardMapper - misc', () => {\n\n\tensureNoDisposablesAreLeakedInTestSuite();\n\n\ttest('issue #23513: Toggle Sidebar Visibility and Go to Line display same key mapping in Arabic keyboard', () => {\n\t\tconst mapper = new WindowsKeyboardMapper(false, {\n\t\t\t'KeyB': {\n\t\t\t\t'vkey': 'VK_B',\n\t\t\t\t'value': '\u0644\u0627',\n\t\t\t\t'withShift': '\u0644\u0622',\n\t\t\t\t'withAltGr': '',\n\t\t\t\t'withShiftAltGr': ''\n\t\t\t},\n\t\t\t'KeyG': {\n\t\t\t\t'vkey': 'VK_G',\n\t\t\t\t'value': '\u0644',\n\t\t\t\t'withShift': '\u0644\u0623',\n\t\t\t\t'withAltGr': '',\n\t\t\t\t'withShiftAltGr': ''\n\t\t\t}\n\t\t}, false);\n\n\t\t_assertResolveKeybinding(\n\t\t\tmapper,\n\t\t\tKeyMod.CtrlCmd | KeyCode.KeyB,\n\t\t\t[{\n\t\t\t\tlabel: 'Ctrl+B',\n\t\t\t\tariaLabel: 'Control+B',\n\t\t\t\telectronAccelerator: 'Ctrl+B',\n\t\t\t\tuserSettingsLabel: 'ctrl+b',\n\t\t\t\tisWYSIWYG: true,\n\t\t\t\tisMultiChord: false,\n\t\t\t\tdispatchParts: ['ctrl+B'],\n\t\t\t\tsingleModifierDispatchParts: [null],\n\t\t\t}]\n\t\t);\n\t});\n});\n"],
  "mappings": "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",
  "names": ["mapper"]
}
