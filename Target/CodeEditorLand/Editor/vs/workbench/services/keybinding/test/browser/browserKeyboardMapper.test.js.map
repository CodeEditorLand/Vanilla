{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/keybinding/test/browser/browserKeyboardMapper.test.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport assert from 'assert';\nimport '../../browser/keyboardLayouts/en.darwin.js';\nimport '../../browser/keyboardLayouts/de.darwin.js';\nimport { KeyboardLayoutContribution } from '../../browser/keyboardLayouts/_.contribution.js';\nimport { BrowserKeyboardMapperFactoryBase } from '../../browser/keyboardLayoutService.js';\nimport { KeymapInfo, IKeymapInfo } from '../../common/keymapInfo.js';\nimport { TestInstantiationService } from '../../../../../platform/instantiation/test/common/instantiationServiceMock.js';\nimport { INotificationService } from '../../../../../platform/notification/common/notification.js';\nimport { ICommandService } from '../../../../../platform/commands/common/commands.js';\nimport { IStorageService } from '../../../../../platform/storage/common/storage.js';\nimport { TestNotificationService } from '../../../../../platform/notification/test/common/testNotificationService.js';\nimport { TestStorageService } from '../../../../test/common/workbenchTestServices.js';\nimport { IConfigurationService } from '../../../../../platform/configuration/common/configuration.js';\nimport { TestConfigurationService } from '../../../../../platform/configuration/test/common/testConfigurationService.js';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from '../../../../../base/test/common/utils.js';\n\nclass TestKeyboardMapperFactory extends BrowserKeyboardMapperFactoryBase {\n\tconstructor(configurationService: IConfigurationService, notificationService: INotificationService, storageService: IStorageService, commandService: ICommandService) {\n\t\t// super(notificationService, storageService, commandService);\n\t\tsuper(configurationService);\n\n\t\tconst keymapInfos: IKeymapInfo[] = KeyboardLayoutContribution.INSTANCE.layoutInfos;\n\t\tthis._keymapInfos.push(...keymapInfos.map(info => (new KeymapInfo(info.layout, info.secondaryLayouts, info.mapping, info.isUserKeyboardLayout))));\n\t\tthis._mru = this._keymapInfos;\n\t\tthis._initialized = true;\n\t\tthis.setLayoutFromBrowserAPI();\n\t\tconst usLayout = this.getUSStandardLayout();\n\t\tif (usLayout) {\n\t\t\tthis.setActiveKeyMapping(usLayout.mapping);\n\t\t}\n\t}\n}\n\nsuite('keyboard layout loader', () => {\n\tconst ds = ensureNoDisposablesAreLeakedInTestSuite();\n\tlet instantiationService: TestInstantiationService;\n\tlet instance: TestKeyboardMapperFactory;\n\n\tsetup(() => {\n\t\tinstantiationService = new TestInstantiationService();\n\t\tconst storageService = new TestStorageService();\n\t\tconst notitifcationService = instantiationService.stub(INotificationService, new TestNotificationService());\n\t\tconst configurationService = instantiationService.stub(IConfigurationService, new TestConfigurationService());\n\t\tconst commandService = instantiationService.stub(ICommandService, {});\n\n\t\tds.add(instantiationService);\n\t\tds.add(storageService);\n\n\t\tinstance = new TestKeyboardMapperFactory(configurationService, notitifcationService, storageService, commandService);\n\t\tds.add(instance);\n\t});\n\n\tteardown(() => {\n\t\tinstantiationService.dispose();\n\t});\n\n\ttest('load default US keyboard layout', () => {\n\t\tassert.notStrictEqual(instance.activeKeyboardLayout, null);\n\t});\n\n\ttest('isKeyMappingActive', () => {\n\t\tinstance.setUSKeyboardLayout();\n\t\tassert.strictEqual(instance.isKeyMappingActive({\n\t\t\tKeyA: {\n\t\t\t\tvalue: 'a',\n\t\t\t\tvalueIsDeadKey: false,\n\t\t\t\twithShift: 'A',\n\t\t\t\twithShiftIsDeadKey: false,\n\t\t\t\twithAltGr: '\u00E5',\n\t\t\t\twithAltGrIsDeadKey: false,\n\t\t\t\twithShiftAltGr: '\u00C5',\n\t\t\t\twithShiftAltGrIsDeadKey: false\n\t\t\t}\n\t\t}), true);\n\n\t\tassert.strictEqual(instance.isKeyMappingActive({\n\t\t\tKeyA: {\n\t\t\t\tvalue: 'a',\n\t\t\t\tvalueIsDeadKey: false,\n\t\t\t\twithShift: 'A',\n\t\t\t\twithShiftIsDeadKey: false,\n\t\t\t\twithAltGr: '\u00E5',\n\t\t\t\twithAltGrIsDeadKey: false,\n\t\t\t\twithShiftAltGr: '\u00C5',\n\t\t\t\twithShiftAltGrIsDeadKey: false\n\t\t\t},\n\t\t\tKeyZ: {\n\t\t\t\tvalue: 'z',\n\t\t\t\tvalueIsDeadKey: false,\n\t\t\t\twithShift: 'Z',\n\t\t\t\twithShiftIsDeadKey: false,\n\t\t\t\twithAltGr: '\u03A9',\n\t\t\t\twithAltGrIsDeadKey: false,\n\t\t\t\twithShiftAltGr: '\u00B8',\n\t\t\t\twithShiftAltGrIsDeadKey: false\n\t\t\t}\n\t\t}), true);\n\n\t\tassert.strictEqual(instance.isKeyMappingActive({\n\t\t\tKeyZ: {\n\t\t\t\tvalue: 'y',\n\t\t\t\tvalueIsDeadKey: false,\n\t\t\t\twithShift: 'Y',\n\t\t\t\twithShiftIsDeadKey: false,\n\t\t\t\twithAltGr: '\u00A5',\n\t\t\t\twithAltGrIsDeadKey: false,\n\t\t\t\twithShiftAltGr: '\u0178',\n\t\t\t\twithShiftAltGrIsDeadKey: false\n\t\t\t},\n\t\t}), false);\n\n\t});\n\n\ttest('Switch keymapping', () => {\n\t\tinstance.setActiveKeyMapping({\n\t\t\tKeyZ: {\n\t\t\t\tvalue: 'y',\n\t\t\t\tvalueIsDeadKey: false,\n\t\t\t\twithShift: 'Y',\n\t\t\t\twithShiftIsDeadKey: false,\n\t\t\t\twithAltGr: '\u00A5',\n\t\t\t\twithAltGrIsDeadKey: false,\n\t\t\t\twithShiftAltGr: '\u0178',\n\t\t\t\twithShiftAltGrIsDeadKey: false\n\t\t\t}\n\t\t});\n\t\tassert.strictEqual(!!instance.activeKeyboardLayout!.isUSStandard, false);\n\t\tassert.strictEqual(instance.isKeyMappingActive({\n\t\t\tKeyZ: {\n\t\t\t\tvalue: 'y',\n\t\t\t\tvalueIsDeadKey: false,\n\t\t\t\twithShift: 'Y',\n\t\t\t\twithShiftIsDeadKey: false,\n\t\t\t\twithAltGr: '\u00A5',\n\t\t\t\twithAltGrIsDeadKey: false,\n\t\t\t\twithShiftAltGr: '\u0178',\n\t\t\t\twithShiftAltGrIsDeadKey: false\n\t\t\t},\n\t\t}), true);\n\n\t\tinstance.setUSKeyboardLayout();\n\t\tassert.strictEqual(instance.activeKeyboardLayout!.isUSStandard, true);\n\t});\n\n\ttest('Switch keyboard layout info', () => {\n\t\tinstance.setKeyboardLayout('com.apple.keylayout.German');\n\t\tassert.strictEqual(!!instance.activeKeyboardLayout!.isUSStandard, false);\n\t\tassert.strictEqual(instance.isKeyMappingActive({\n\t\t\tKeyZ: {\n\t\t\t\tvalue: 'y',\n\t\t\t\tvalueIsDeadKey: false,\n\t\t\t\twithShift: 'Y',\n\t\t\t\twithShiftIsDeadKey: false,\n\t\t\t\twithAltGr: '\u00A5',\n\t\t\t\twithAltGrIsDeadKey: false,\n\t\t\t\twithShiftAltGr: '\u0178',\n\t\t\t\twithShiftAltGrIsDeadKey: false\n\t\t\t},\n\t\t}), true);\n\n\t\tinstance.setUSKeyboardLayout();\n\t\tassert.strictEqual(instance.activeKeyboardLayout!.isUSStandard, true);\n\t});\n});\n"],
  "mappings": "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",
  "names": []
}
