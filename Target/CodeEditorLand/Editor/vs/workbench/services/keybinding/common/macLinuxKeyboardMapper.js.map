{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/keybinding/common/macLinuxKeyboardMapper.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CharCode } from \"../../../../base/common/charCode.js\";\nimport {\n\tIMMUTABLE_CODE_TO_KEY_CODE,\n\tIMMUTABLE_KEY_CODE_TO_CODE,\n\tKeyCode,\n\tKeyCodeUtils,\n\tScanCode,\n\tScanCodeUtils,\n} from \"../../../../base/common/keyCodes.js\";\nimport {\n\ttype Chord,\n\tKeyCodeChord,\n\ttype Keybinding,\n\ttype ResolvedKeybinding,\n\tScanCodeChord,\n\ttype SingleModifierChord,\n} from \"../../../../base/common/keybindings.js\";\nimport { OperatingSystem } from \"../../../../base/common/platform.js\";\nimport { BaseResolvedKeybinding } from \"../../../../platform/keybinding/common/baseResolvedKeybinding.js\";\nimport type { IKeyboardEvent } from \"../../../../platform/keybinding/common/keybinding.js\";\nimport type {\n\tIMacLinuxKeyMapping,\n\tIMacLinuxKeyboardMapping,\n} from \"../../../../platform/keyboardLayout/common/keyboardLayout.js\";\nimport type { IKeyboardMapper } from \"../../../../platform/keyboardLayout/common/keyboardMapper.js\";\n\n/**\n * A map from character to key codes.\n * e.g. Contains entries such as:\n *  - '/' => { keyCode: KeyCode.US_SLASH, shiftKey: false }\n *  - '?' => { keyCode: KeyCode.US_SLASH, shiftKey: true }\n */\nconst CHAR_CODE_TO_KEY_CODE: ({\n\tkeyCode: KeyCode;\n\tshiftKey: boolean;\n} | null)[] = [];\n\nexport class NativeResolvedKeybinding extends BaseResolvedKeybinding<ScanCodeChord> {\n\tprivate readonly _mapper: MacLinuxKeyboardMapper;\n\n\tconstructor(\n\t\tmapper: MacLinuxKeyboardMapper,\n\t\tos: OperatingSystem,\n\t\tchords: ScanCodeChord[],\n\t) {\n\t\tsuper(os, chords);\n\t\tthis._mapper = mapper;\n\t}\n\n\tprotected _getLabel(chord: ScanCodeChord): string | null {\n\t\treturn this._mapper.getUILabelForScanCodeChord(chord);\n\t}\n\n\tprotected _getAriaLabel(chord: ScanCodeChord): string | null {\n\t\treturn this._mapper.getAriaLabelForScanCodeChord(chord);\n\t}\n\n\tprotected _getElectronAccelerator(chord: ScanCodeChord): string | null {\n\t\treturn this._mapper.getElectronAcceleratorLabelForScanCodeChord(chord);\n\t}\n\n\tprotected _getUserSettingsLabel(chord: ScanCodeChord): string | null {\n\t\treturn this._mapper.getUserSettingsLabelForScanCodeChord(chord);\n\t}\n\n\tprotected _isWYSIWYG(binding: ScanCodeChord | null): boolean {\n\t\tif (!binding) {\n\t\t\treturn true;\n\t\t}\n\t\tif (\n\t\t\tIMMUTABLE_CODE_TO_KEY_CODE[binding.scanCode] !==\n\t\t\tKeyCode.DependsOnKbLayout\n\t\t) {\n\t\t\treturn true;\n\t\t}\n\t\tconst a = this._mapper.getAriaLabelForScanCodeChord(binding);\n\t\tconst b = this._mapper.getUserSettingsLabelForScanCodeChord(binding);\n\n\t\tif (!a && !b) {\n\t\t\treturn true;\n\t\t}\n\t\tif (!a || !b) {\n\t\t\treturn false;\n\t\t}\n\t\treturn a.toLowerCase() === b.toLowerCase();\n\t}\n\n\tprotected _getChordDispatch(chord: ScanCodeChord): string | null {\n\t\treturn this._mapper.getDispatchStrForScanCodeChord(chord);\n\t}\n\n\tprotected _getSingleModifierChordDispatch(\n\t\tchord: ScanCodeChord,\n\t): SingleModifierChord | null {\n\t\tif (\n\t\t\t(chord.scanCode === ScanCode.ControlLeft ||\n\t\t\t\tchord.scanCode === ScanCode.ControlRight) &&\n\t\t\t!chord.shiftKey &&\n\t\t\t!chord.altKey &&\n\t\t\t!chord.metaKey\n\t\t) {\n\t\t\treturn \"ctrl\";\n\t\t}\n\t\tif (\n\t\t\t(chord.scanCode === ScanCode.AltLeft ||\n\t\t\t\tchord.scanCode === ScanCode.AltRight) &&\n\t\t\t!chord.ctrlKey &&\n\t\t\t!chord.shiftKey &&\n\t\t\t!chord.metaKey\n\t\t) {\n\t\t\treturn \"alt\";\n\t\t}\n\t\tif (\n\t\t\t(chord.scanCode === ScanCode.ShiftLeft ||\n\t\t\t\tchord.scanCode === ScanCode.ShiftRight) &&\n\t\t\t!chord.ctrlKey &&\n\t\t\t!chord.altKey &&\n\t\t\t!chord.metaKey\n\t\t) {\n\t\t\treturn \"shift\";\n\t\t}\n\t\tif (\n\t\t\t(chord.scanCode === ScanCode.MetaLeft ||\n\t\t\t\tchord.scanCode === ScanCode.MetaRight) &&\n\t\t\t!chord.ctrlKey &&\n\t\t\t!chord.shiftKey &&\n\t\t\t!chord.altKey\n\t\t) {\n\t\t\treturn \"meta\";\n\t\t}\n\t\treturn null;\n\t}\n}\n\ninterface IScanCodeMapping {\n\tscanCode: ScanCode;\n\tvalue: number;\n\twithShift: number;\n\twithAltGr: number;\n\twithShiftAltGr: number;\n}\n\nclass ScanCodeCombo {\n\tpublic readonly ctrlKey: boolean;\n\tpublic readonly shiftKey: boolean;\n\tpublic readonly altKey: boolean;\n\tpublic readonly scanCode: ScanCode;\n\n\tconstructor(\n\t\tctrlKey: boolean,\n\t\tshiftKey: boolean,\n\t\taltKey: boolean,\n\t\tscanCode: ScanCode,\n\t) {\n\t\tthis.ctrlKey = ctrlKey;\n\t\tthis.shiftKey = shiftKey;\n\t\tthis.altKey = altKey;\n\t\tthis.scanCode = scanCode;\n\t}\n\n\tpublic toString(): string {\n\t\treturn `${this.ctrlKey ? \"Ctrl+\" : \"\"}${this.shiftKey ? \"Shift+\" : \"\"}${this.altKey ? \"Alt+\" : \"\"}${ScanCodeUtils.toString(this.scanCode)}`;\n\t}\n\n\tpublic equals(other: ScanCodeCombo): boolean {\n\t\treturn (\n\t\t\tthis.ctrlKey === other.ctrlKey &&\n\t\t\tthis.shiftKey === other.shiftKey &&\n\t\t\tthis.altKey === other.altKey &&\n\t\t\tthis.scanCode === other.scanCode\n\t\t);\n\t}\n\n\tprivate getProducedCharCode(mapping: IMacLinuxKeyMapping): string {\n\t\tif (!mapping) {\n\t\t\treturn \"\";\n\t\t}\n\t\tif (this.ctrlKey && this.shiftKey && this.altKey) {\n\t\t\treturn mapping.withShiftAltGr;\n\t\t}\n\t\tif (this.ctrlKey && this.altKey) {\n\t\t\treturn mapping.withAltGr;\n\t\t}\n\t\tif (this.shiftKey) {\n\t\t\treturn mapping.withShift;\n\t\t}\n\t\treturn mapping.value;\n\t}\n\n\tpublic getProducedChar(mapping: IMacLinuxKeyMapping): string {\n\t\tconst charCode = MacLinuxKeyboardMapper.getCharCode(\n\t\t\tthis.getProducedCharCode(mapping),\n\t\t);\n\t\tif (charCode === 0) {\n\t\t\treturn \" --- \";\n\t\t}\n\t\tif (\n\t\t\tcharCode >= CharCode.U_Combining_Grave_Accent &&\n\t\t\tcharCode <= CharCode.U_Combining_Latin_Small_Letter_X\n\t\t) {\n\t\t\t// combining\n\t\t\treturn \"U+\" + charCode.toString(16);\n\t\t}\n\t\treturn \"  \" + String.fromCharCode(charCode) + \"  \";\n\t}\n}\n\nclass KeyCodeCombo {\n\tpublic readonly ctrlKey: boolean;\n\tpublic readonly shiftKey: boolean;\n\tpublic readonly altKey: boolean;\n\tpublic readonly keyCode: KeyCode;\n\n\tconstructor(\n\t\tctrlKey: boolean,\n\t\tshiftKey: boolean,\n\t\taltKey: boolean,\n\t\tkeyCode: KeyCode,\n\t) {\n\t\tthis.ctrlKey = ctrlKey;\n\t\tthis.shiftKey = shiftKey;\n\t\tthis.altKey = altKey;\n\t\tthis.keyCode = keyCode;\n\t}\n\n\tpublic toString(): string {\n\t\treturn `${this.ctrlKey ? \"Ctrl+\" : \"\"}${this.shiftKey ? \"Shift+\" : \"\"}${this.altKey ? \"Alt+\" : \"\"}${KeyCodeUtils.toString(this.keyCode)}`;\n\t}\n}\n\nclass ScanCodeKeyCodeMapper {\n\t/**\n\t * ScanCode combination => KeyCode combination.\n\t * Only covers relevant modifiers ctrl, shift, alt (since meta does not influence the mappings).\n\t */\n\tprivate readonly _scanCodeToKeyCode: number[][] = [];\n\t/**\n\t * inverse of `_scanCodeToKeyCode`.\n\t * KeyCode combination => ScanCode combination.\n\t * Only covers relevant modifiers ctrl, shift, alt (since meta does not influence the mappings).\n\t */\n\tprivate readonly _keyCodeToScanCode: number[][] = [];\n\n\tconstructor() {\n\t\tthis._scanCodeToKeyCode = [];\n\t\tthis._keyCodeToScanCode = [];\n\t}\n\n\tpublic registrationComplete(): void {\n\t\t// IntlHash and IntlBackslash are rare keys, so ensure they don't end up being the preferred...\n\t\tthis._moveToEnd(ScanCode.IntlHash);\n\t\tthis._moveToEnd(ScanCode.IntlBackslash);\n\t}\n\n\tprivate _moveToEnd(scanCode: ScanCode): void {\n\t\tfor (let mod = 0; mod < 8; mod++) {\n\t\t\tconst encodedKeyCodeCombos =\n\t\t\t\tthis._scanCodeToKeyCode[(scanCode << 3) + mod];\n\t\t\tif (!encodedKeyCodeCombos) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tfor (let i = 0, len = encodedKeyCodeCombos.length; i < len; i++) {\n\t\t\t\tconst encodedScanCodeCombos =\n\t\t\t\t\tthis._keyCodeToScanCode[encodedKeyCodeCombos[i]];\n\t\t\t\tif (encodedScanCodeCombos.length === 1) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tfor (\n\t\t\t\t\tlet j = 0, len = encodedScanCodeCombos.length;\n\t\t\t\t\tj < len;\n\t\t\t\t\tj++\n\t\t\t\t) {\n\t\t\t\t\tconst entry = encodedScanCodeCombos[j];\n\t\t\t\t\tconst entryScanCode = entry >>> 3;\n\t\t\t\t\tif (entryScanCode === scanCode) {\n\t\t\t\t\t\t// Move this entry to the end\n\t\t\t\t\t\tfor (let k = j + 1; k < len; k++) {\n\t\t\t\t\t\t\tencodedScanCodeCombos[k - 1] =\n\t\t\t\t\t\t\t\tencodedScanCodeCombos[k];\n\t\t\t\t\t\t}\n\t\t\t\t\t\tencodedScanCodeCombos[len - 1] = entry;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic registerIfUnknown(\n\t\tscanCodeCombo: ScanCodeCombo,\n\t\tkeyCodeCombo: KeyCodeCombo,\n\t): void {\n\t\tif (keyCodeCombo.keyCode === KeyCode.Unknown) {\n\t\t\treturn;\n\t\t}\n\t\tconst scanCodeComboEncoded = this._encodeScanCodeCombo(scanCodeCombo);\n\t\tconst keyCodeComboEncoded = this._encodeKeyCodeCombo(keyCodeCombo);\n\n\t\tconst keyCodeIsDigit =\n\t\t\tkeyCodeCombo.keyCode >= KeyCode.Digit0 &&\n\t\t\tkeyCodeCombo.keyCode <= KeyCode.Digit9;\n\t\tconst keyCodeIsLetter =\n\t\t\tkeyCodeCombo.keyCode >= KeyCode.KeyA &&\n\t\t\tkeyCodeCombo.keyCode <= KeyCode.KeyZ;\n\n\t\tconst existingKeyCodeCombos =\n\t\t\tthis._scanCodeToKeyCode[scanCodeComboEncoded];\n\n\t\t// Allow a scan code to map to multiple key codes if it is a digit or a letter key code\n\t\tif (keyCodeIsDigit || keyCodeIsLetter) {\n\t\t\t// Only check that we don't insert the same entry twice\n\t\t\tif (existingKeyCodeCombos) {\n\t\t\t\tfor (\n\t\t\t\t\tlet i = 0, len = existingKeyCodeCombos.length;\n\t\t\t\t\ti < len;\n\t\t\t\t\ti++\n\t\t\t\t) {\n\t\t\t\t\tif (existingKeyCodeCombos[i] === keyCodeComboEncoded) {\n\t\t\t\t\t\t// avoid duplicates\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\t// Don't allow multiples\n\t\t\tif (existingKeyCodeCombos && existingKeyCodeCombos.length !== 0) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\tthis._scanCodeToKeyCode[scanCodeComboEncoded] =\n\t\t\tthis._scanCodeToKeyCode[scanCodeComboEncoded] || [];\n\t\tthis._scanCodeToKeyCode[scanCodeComboEncoded].unshift(\n\t\t\tkeyCodeComboEncoded,\n\t\t);\n\n\t\tthis._keyCodeToScanCode[keyCodeComboEncoded] =\n\t\t\tthis._keyCodeToScanCode[keyCodeComboEncoded] || [];\n\t\tthis._keyCodeToScanCode[keyCodeComboEncoded].unshift(\n\t\t\tscanCodeComboEncoded,\n\t\t);\n\t}\n\n\tpublic lookupKeyCodeCombo(keyCodeCombo: KeyCodeCombo): ScanCodeCombo[] {\n\t\tconst keyCodeComboEncoded = this._encodeKeyCodeCombo(keyCodeCombo);\n\t\tconst scanCodeCombosEncoded =\n\t\t\tthis._keyCodeToScanCode[keyCodeComboEncoded];\n\t\tif (!scanCodeCombosEncoded || scanCodeCombosEncoded.length === 0) {\n\t\t\treturn [];\n\t\t}\n\n\t\tconst result: ScanCodeCombo[] = [];\n\t\tfor (let i = 0, len = scanCodeCombosEncoded.length; i < len; i++) {\n\t\t\tconst scanCodeComboEncoded = scanCodeCombosEncoded[i];\n\n\t\t\tconst ctrlKey = scanCodeComboEncoded & 0b001 ? true : false;\n\t\t\tconst shiftKey = scanCodeComboEncoded & 0b010 ? true : false;\n\t\t\tconst altKey = scanCodeComboEncoded & 0b100 ? true : false;\n\t\t\tconst scanCode: ScanCode = scanCodeComboEncoded >>> 3;\n\n\t\t\tresult[i] = new ScanCodeCombo(ctrlKey, shiftKey, altKey, scanCode);\n\t\t}\n\t\treturn result;\n\t}\n\n\tpublic lookupScanCodeCombo(scanCodeCombo: ScanCodeCombo): KeyCodeCombo[] {\n\t\tconst scanCodeComboEncoded = this._encodeScanCodeCombo(scanCodeCombo);\n\t\tconst keyCodeCombosEncoded =\n\t\t\tthis._scanCodeToKeyCode[scanCodeComboEncoded];\n\t\tif (!keyCodeCombosEncoded || keyCodeCombosEncoded.length === 0) {\n\t\t\treturn [];\n\t\t}\n\n\t\tconst result: KeyCodeCombo[] = [];\n\t\tfor (let i = 0, len = keyCodeCombosEncoded.length; i < len; i++) {\n\t\t\tconst keyCodeComboEncoded = keyCodeCombosEncoded[i];\n\n\t\t\tconst ctrlKey = keyCodeComboEncoded & 0b001 ? true : false;\n\t\t\tconst shiftKey = keyCodeComboEncoded & 0b010 ? true : false;\n\t\t\tconst altKey = keyCodeComboEncoded & 0b100 ? true : false;\n\t\t\tconst keyCode: KeyCode = keyCodeComboEncoded >>> 3;\n\n\t\t\tresult[i] = new KeyCodeCombo(ctrlKey, shiftKey, altKey, keyCode);\n\t\t}\n\t\treturn result;\n\t}\n\n\tpublic guessStableKeyCode(scanCode: ScanCode): KeyCode {\n\t\tif (scanCode >= ScanCode.Digit1 && scanCode <= ScanCode.Digit0) {\n\t\t\t// digits are ok\n\t\t\tswitch (scanCode) {\n\t\t\t\tcase ScanCode.Digit1:\n\t\t\t\t\treturn KeyCode.Digit1;\n\t\t\t\tcase ScanCode.Digit2:\n\t\t\t\t\treturn KeyCode.Digit2;\n\t\t\t\tcase ScanCode.Digit3:\n\t\t\t\t\treturn KeyCode.Digit3;\n\t\t\t\tcase ScanCode.Digit4:\n\t\t\t\t\treturn KeyCode.Digit4;\n\t\t\t\tcase ScanCode.Digit5:\n\t\t\t\t\treturn KeyCode.Digit5;\n\t\t\t\tcase ScanCode.Digit6:\n\t\t\t\t\treturn KeyCode.Digit6;\n\t\t\t\tcase ScanCode.Digit7:\n\t\t\t\t\treturn KeyCode.Digit7;\n\t\t\t\tcase ScanCode.Digit8:\n\t\t\t\t\treturn KeyCode.Digit8;\n\t\t\t\tcase ScanCode.Digit9:\n\t\t\t\t\treturn KeyCode.Digit9;\n\t\t\t\tcase ScanCode.Digit0:\n\t\t\t\t\treturn KeyCode.Digit0;\n\t\t\t}\n\t\t}\n\n\t\t// Lookup the scanCode with and without shift and see if the keyCode is stable\n\t\tconst keyCodeCombos1 = this.lookupScanCodeCombo(\n\t\t\tnew ScanCodeCombo(false, false, false, scanCode),\n\t\t);\n\t\tconst keyCodeCombos2 = this.lookupScanCodeCombo(\n\t\t\tnew ScanCodeCombo(false, true, false, scanCode),\n\t\t);\n\t\tif (keyCodeCombos1.length === 1 && keyCodeCombos2.length === 1) {\n\t\t\tconst shiftKey1 = keyCodeCombos1[0].shiftKey;\n\t\t\tconst keyCode1 = keyCodeCombos1[0].keyCode;\n\t\t\tconst shiftKey2 = keyCodeCombos2[0].shiftKey;\n\t\t\tconst keyCode2 = keyCodeCombos2[0].keyCode;\n\t\t\tif (keyCode1 === keyCode2 && shiftKey1 !== shiftKey2) {\n\t\t\t\t// This looks like a stable mapping\n\t\t\t\treturn keyCode1;\n\t\t\t}\n\t\t}\n\n\t\treturn KeyCode.DependsOnKbLayout;\n\t}\n\n\tprivate _encodeScanCodeCombo(scanCodeCombo: ScanCodeCombo): number {\n\t\treturn this._encode(\n\t\t\tscanCodeCombo.ctrlKey,\n\t\t\tscanCodeCombo.shiftKey,\n\t\t\tscanCodeCombo.altKey,\n\t\t\tscanCodeCombo.scanCode,\n\t\t);\n\t}\n\n\tprivate _encodeKeyCodeCombo(keyCodeCombo: KeyCodeCombo): number {\n\t\treturn this._encode(\n\t\t\tkeyCodeCombo.ctrlKey,\n\t\t\tkeyCodeCombo.shiftKey,\n\t\t\tkeyCodeCombo.altKey,\n\t\t\tkeyCodeCombo.keyCode,\n\t\t);\n\t}\n\n\tprivate _encode(\n\t\tctrlKey: boolean,\n\t\tshiftKey: boolean,\n\t\taltKey: boolean,\n\t\tprincipal: number,\n\t): number {\n\t\treturn (\n\t\t\t(((ctrlKey ? 1 : 0) << 0) |\n\t\t\t\t((shiftKey ? 1 : 0) << 1) |\n\t\t\t\t((altKey ? 1 : 0) << 2) |\n\t\t\t\t(principal << 3)) >>>\n\t\t\t0\n\t\t);\n\t}\n}\n\nexport class MacLinuxKeyboardMapper implements IKeyboardMapper {\n\t/**\n\t * used only for debug purposes.\n\t */\n\tprivate readonly _codeInfo: IMacLinuxKeyMapping[];\n\t/**\n\t * Maps ScanCode combos <-> KeyCode combos.\n\t */\n\tprivate readonly _scanCodeKeyCodeMapper: ScanCodeKeyCodeMapper;\n\t/**\n\t * UI label for a ScanCode.\n\t */\n\tprivate readonly _scanCodeToLabel: Array<string | null> = [];\n\t/**\n\t * Dispatching string for a ScanCode.\n\t */\n\tprivate readonly _scanCodeToDispatch: Array<string | null> = [];\n\n\tconstructor(\n\t\tprivate readonly _isUSStandard: boolean,\n\t\trawMappings: IMacLinuxKeyboardMapping,\n\t\tprivate readonly _mapAltGrToCtrlAlt: boolean,\n\t\tprivate readonly _OS: OperatingSystem,\n\t) {\n\t\tthis._codeInfo = [];\n\t\tthis._scanCodeKeyCodeMapper = new ScanCodeKeyCodeMapper();\n\t\tthis._scanCodeToLabel = [];\n\t\tthis._scanCodeToDispatch = [];\n\n\t\tconst _registerIfUnknown = (\n\t\t\thwCtrlKey: 0 | 1,\n\t\t\thwShiftKey: 0 | 1,\n\t\t\thwAltKey: 0 | 1,\n\t\t\tscanCode: ScanCode,\n\t\t\tkbCtrlKey: 0 | 1,\n\t\t\tkbShiftKey: 0 | 1,\n\t\t\tkbAltKey: 0 | 1,\n\t\t\tkeyCode: KeyCode,\n\t\t): void => {\n\t\t\tthis._scanCodeKeyCodeMapper.registerIfUnknown(\n\t\t\t\tnew ScanCodeCombo(\n\t\t\t\t\thwCtrlKey ? true : false,\n\t\t\t\t\thwShiftKey ? true : false,\n\t\t\t\t\thwAltKey ? true : false,\n\t\t\t\t\tscanCode,\n\t\t\t\t),\n\t\t\t\tnew KeyCodeCombo(\n\t\t\t\t\tkbCtrlKey ? true : false,\n\t\t\t\t\tkbShiftKey ? true : false,\n\t\t\t\t\tkbAltKey ? true : false,\n\t\t\t\t\tkeyCode,\n\t\t\t\t),\n\t\t\t);\n\t\t};\n\n\t\tconst _registerAllCombos = (\n\t\t\t_ctrlKey: 0 | 1,\n\t\t\t_shiftKey: 0 | 1,\n\t\t\t_altKey: 0 | 1,\n\t\t\tscanCode: ScanCode,\n\t\t\tkeyCode: KeyCode,\n\t\t): void => {\n\t\t\tfor (let ctrlKey = _ctrlKey; ctrlKey <= 1; ctrlKey++) {\n\t\t\t\tfor (let shiftKey = _shiftKey; shiftKey <= 1; shiftKey++) {\n\t\t\t\t\tfor (let altKey = _altKey; altKey <= 1; altKey++) {\n\t\t\t\t\t\t_registerIfUnknown(\n\t\t\t\t\t\t\tctrlKey,\n\t\t\t\t\t\t\tshiftKey,\n\t\t\t\t\t\t\taltKey,\n\t\t\t\t\t\t\tscanCode,\n\t\t\t\t\t\t\tctrlKey,\n\t\t\t\t\t\t\tshiftKey,\n\t\t\t\t\t\t\taltKey,\n\t\t\t\t\t\t\tkeyCode,\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\t// Initialize `_scanCodeToLabel`\n\t\tfor (\n\t\t\tlet scanCode = ScanCode.None;\n\t\t\tscanCode < ScanCode.MAX_VALUE;\n\t\t\tscanCode++\n\t\t) {\n\t\t\tthis._scanCodeToLabel[scanCode] = null;\n\t\t}\n\n\t\t// Initialize `_scanCodeToDispatch`\n\t\tfor (\n\t\t\tlet scanCode = ScanCode.None;\n\t\t\tscanCode < ScanCode.MAX_VALUE;\n\t\t\tscanCode++\n\t\t) {\n\t\t\tthis._scanCodeToDispatch[scanCode] = null;\n\t\t}\n\n\t\t// Handle immutable mappings\n\t\tfor (\n\t\t\tlet scanCode = ScanCode.None;\n\t\t\tscanCode < ScanCode.MAX_VALUE;\n\t\t\tscanCode++\n\t\t) {\n\t\t\tconst keyCode = IMMUTABLE_CODE_TO_KEY_CODE[scanCode];\n\t\t\tif (keyCode !== KeyCode.DependsOnKbLayout) {\n\t\t\t\t_registerAllCombos(0, 0, 0, scanCode, keyCode);\n\t\t\t\tthis._scanCodeToLabel[scanCode] =\n\t\t\t\t\tKeyCodeUtils.toString(keyCode);\n\n\t\t\t\tif (\n\t\t\t\t\tkeyCode === KeyCode.Unknown ||\n\t\t\t\t\tkeyCode === KeyCode.Ctrl ||\n\t\t\t\t\tkeyCode === KeyCode.Meta ||\n\t\t\t\t\tkeyCode === KeyCode.Alt ||\n\t\t\t\t\tkeyCode === KeyCode.Shift\n\t\t\t\t) {\n\t\t\t\t\tthis._scanCodeToDispatch[scanCode] = null; // cannot dispatch on this ScanCode\n\t\t\t\t} else {\n\t\t\t\t\tthis._scanCodeToDispatch[scanCode] =\n\t\t\t\t\t\t`[${ScanCodeUtils.toString(scanCode)}]`;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Try to identify keyboard layouts where characters A-Z are missing\n\t\t// and forcibly map them to their corresponding scan codes if that is the case\n\t\tconst missingLatinLettersOverride: {\n\t\t\t[scanCode: string]: IMacLinuxKeyMapping;\n\t\t} = {};\n\n\t\t{\n\t\t\tconst producesLatinLetter: boolean[] = [];\n\t\t\tfor (const strScanCode in rawMappings) {\n\t\t\t\tif (rawMappings.hasOwnProperty(strScanCode)) {\n\t\t\t\t\tconst scanCode = ScanCodeUtils.toEnum(strScanCode);\n\t\t\t\t\tif (scanCode === ScanCode.None) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\tif (\n\t\t\t\t\t\tIMMUTABLE_CODE_TO_KEY_CODE[scanCode] !==\n\t\t\t\t\t\tKeyCode.DependsOnKbLayout\n\t\t\t\t\t) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst rawMapping = rawMappings[strScanCode];\n\t\t\t\t\tconst value = MacLinuxKeyboardMapper.getCharCode(\n\t\t\t\t\t\trawMapping.value,\n\t\t\t\t\t);\n\n\t\t\t\t\tif (value >= CharCode.a && value <= CharCode.z) {\n\t\t\t\t\t\tconst upperCaseValue =\n\t\t\t\t\t\t\tCharCode.A + (value - CharCode.a);\n\t\t\t\t\t\tproducesLatinLetter[upperCaseValue] = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst _registerLetterIfMissing = (\n\t\t\t\tcharCode: CharCode,\n\t\t\t\tscanCode: ScanCode,\n\t\t\t\tvalue: string,\n\t\t\t\twithShift: string,\n\t\t\t): void => {\n\t\t\t\tif (!producesLatinLetter[charCode]) {\n\t\t\t\t\tmissingLatinLettersOverride[\n\t\t\t\t\t\tScanCodeUtils.toString(scanCode)\n\t\t\t\t\t] = {\n\t\t\t\t\t\tvalue: value,\n\t\t\t\t\t\twithShift: withShift,\n\t\t\t\t\t\twithAltGr: \"\",\n\t\t\t\t\t\twithShiftAltGr: \"\",\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t};\n\n\t\t\t// Ensure letters are mapped\n\t\t\t_registerLetterIfMissing(CharCode.A, ScanCode.KeyA, \"a\", \"A\");\n\t\t\t_registerLetterIfMissing(CharCode.B, ScanCode.KeyB, \"b\", \"B\");\n\t\t\t_registerLetterIfMissing(CharCode.C, ScanCode.KeyC, \"c\", \"C\");\n\t\t\t_registerLetterIfMissing(CharCode.D, ScanCode.KeyD, \"d\", \"D\");\n\t\t\t_registerLetterIfMissing(CharCode.E, ScanCode.KeyE, \"e\", \"E\");\n\t\t\t_registerLetterIfMissing(CharCode.F, ScanCode.KeyF, \"f\", \"F\");\n\t\t\t_registerLetterIfMissing(CharCode.G, ScanCode.KeyG, \"g\", \"G\");\n\t\t\t_registerLetterIfMissing(CharCode.H, ScanCode.KeyH, \"h\", \"H\");\n\t\t\t_registerLetterIfMissing(CharCode.I, ScanCode.KeyI, \"i\", \"I\");\n\t\t\t_registerLetterIfMissing(CharCode.J, ScanCode.KeyJ, \"j\", \"J\");\n\t\t\t_registerLetterIfMissing(CharCode.K, ScanCode.KeyK, \"k\", \"K\");\n\t\t\t_registerLetterIfMissing(CharCode.L, ScanCode.KeyL, \"l\", \"L\");\n\t\t\t_registerLetterIfMissing(CharCode.M, ScanCode.KeyM, \"m\", \"M\");\n\t\t\t_registerLetterIfMissing(CharCode.N, ScanCode.KeyN, \"n\", \"N\");\n\t\t\t_registerLetterIfMissing(CharCode.O, ScanCode.KeyO, \"o\", \"O\");\n\t\t\t_registerLetterIfMissing(CharCode.P, ScanCode.KeyP, \"p\", \"P\");\n\t\t\t_registerLetterIfMissing(CharCode.Q, ScanCode.KeyQ, \"q\", \"Q\");\n\t\t\t_registerLetterIfMissing(CharCode.R, ScanCode.KeyR, \"r\", \"R\");\n\t\t\t_registerLetterIfMissing(CharCode.S, ScanCode.KeyS, \"s\", \"S\");\n\t\t\t_registerLetterIfMissing(CharCode.T, ScanCode.KeyT, \"t\", \"T\");\n\t\t\t_registerLetterIfMissing(CharCode.U, ScanCode.KeyU, \"u\", \"U\");\n\t\t\t_registerLetterIfMissing(CharCode.V, ScanCode.KeyV, \"v\", \"V\");\n\t\t\t_registerLetterIfMissing(CharCode.W, ScanCode.KeyW, \"w\", \"W\");\n\t\t\t_registerLetterIfMissing(CharCode.X, ScanCode.KeyX, \"x\", \"X\");\n\t\t\t_registerLetterIfMissing(CharCode.Y, ScanCode.KeyY, \"y\", \"Y\");\n\t\t\t_registerLetterIfMissing(CharCode.Z, ScanCode.KeyZ, \"z\", \"Z\");\n\t\t}\n\n\t\tconst mappings: IScanCodeMapping[] = [];\n\t\tlet mappingsLen = 0;\n\t\tfor (const strScanCode in rawMappings) {\n\t\t\tif (rawMappings.hasOwnProperty(strScanCode)) {\n\t\t\t\tconst scanCode = ScanCodeUtils.toEnum(strScanCode);\n\t\t\t\tif (scanCode === ScanCode.None) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tif (\n\t\t\t\t\tIMMUTABLE_CODE_TO_KEY_CODE[scanCode] !==\n\t\t\t\t\tKeyCode.DependsOnKbLayout\n\t\t\t\t) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tthis._codeInfo[scanCode] = rawMappings[strScanCode];\n\n\t\t\t\tconst rawMapping =\n\t\t\t\t\tmissingLatinLettersOverride[strScanCode] ||\n\t\t\t\t\trawMappings[strScanCode];\n\t\t\t\tconst value = MacLinuxKeyboardMapper.getCharCode(\n\t\t\t\t\trawMapping.value,\n\t\t\t\t);\n\t\t\t\tconst withShift = MacLinuxKeyboardMapper.getCharCode(\n\t\t\t\t\trawMapping.withShift,\n\t\t\t\t);\n\t\t\t\tconst withAltGr = MacLinuxKeyboardMapper.getCharCode(\n\t\t\t\t\trawMapping.withAltGr,\n\t\t\t\t);\n\t\t\t\tconst withShiftAltGr = MacLinuxKeyboardMapper.getCharCode(\n\t\t\t\t\trawMapping.withShiftAltGr,\n\t\t\t\t);\n\n\t\t\t\tconst mapping: IScanCodeMapping = {\n\t\t\t\t\tscanCode: scanCode,\n\t\t\t\t\tvalue: value,\n\t\t\t\t\twithShift: withShift,\n\t\t\t\t\twithAltGr: withAltGr,\n\t\t\t\t\twithShiftAltGr: withShiftAltGr,\n\t\t\t\t};\n\t\t\t\tmappings[mappingsLen++] = mapping;\n\n\t\t\t\tthis._scanCodeToDispatch[scanCode] =\n\t\t\t\t\t`[${ScanCodeUtils.toString(scanCode)}]`;\n\n\t\t\t\tif (value >= CharCode.a && value <= CharCode.z) {\n\t\t\t\t\tconst upperCaseValue = CharCode.A + (value - CharCode.a);\n\t\t\t\t\tthis._scanCodeToLabel[scanCode] =\n\t\t\t\t\t\tString.fromCharCode(upperCaseValue);\n\t\t\t\t} else if (value >= CharCode.A && value <= CharCode.Z) {\n\t\t\t\t\tthis._scanCodeToLabel[scanCode] =\n\t\t\t\t\t\tString.fromCharCode(value);\n\t\t\t\t} else if (value) {\n\t\t\t\t\tthis._scanCodeToLabel[scanCode] =\n\t\t\t\t\t\tString.fromCharCode(value);\n\t\t\t\t} else {\n\t\t\t\t\tthis._scanCodeToLabel[scanCode] = null;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Handle all `withShiftAltGr` entries\n\t\tfor (let i = mappings.length - 1; i >= 0; i--) {\n\t\t\tconst mapping = mappings[i];\n\t\t\tconst scanCode = mapping.scanCode;\n\t\t\tconst withShiftAltGr = mapping.withShiftAltGr;\n\t\t\tif (\n\t\t\t\twithShiftAltGr === mapping.withAltGr ||\n\t\t\t\twithShiftAltGr === mapping.withShift ||\n\t\t\t\twithShiftAltGr === mapping.value\n\t\t\t) {\n\t\t\t\t// handled below\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tconst kb = MacLinuxKeyboardMapper._charCodeToKb(withShiftAltGr);\n\t\t\tif (!kb) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tconst kbShiftKey = kb.shiftKey;\n\t\t\tconst keyCode = kb.keyCode;\n\n\t\t\tif (kbShiftKey) {\n\t\t\t\t// Ctrl+Shift+Alt+ScanCode => Shift+KeyCode\n\t\t\t\t_registerIfUnknown(1, 1, 1, scanCode, 0, 1, 0, keyCode); //       Ctrl+Alt+ScanCode =>          Shift+KeyCode\n\t\t\t} else {\n\t\t\t\t// Ctrl+Shift+Alt+ScanCode => KeyCode\n\t\t\t\t_registerIfUnknown(1, 1, 1, scanCode, 0, 0, 0, keyCode); //       Ctrl+Alt+ScanCode =>                KeyCode\n\t\t\t}\n\t\t}\n\t\t// Handle all `withAltGr` entries\n\t\tfor (let i = mappings.length - 1; i >= 0; i--) {\n\t\t\tconst mapping = mappings[i];\n\t\t\tconst scanCode = mapping.scanCode;\n\t\t\tconst withAltGr = mapping.withAltGr;\n\t\t\tif (\n\t\t\t\twithAltGr === mapping.withShift ||\n\t\t\t\twithAltGr === mapping.value\n\t\t\t) {\n\t\t\t\t// handled below\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tconst kb = MacLinuxKeyboardMapper._charCodeToKb(withAltGr);\n\t\t\tif (!kb) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tconst kbShiftKey = kb.shiftKey;\n\t\t\tconst keyCode = kb.keyCode;\n\n\t\t\tif (kbShiftKey) {\n\t\t\t\t// Ctrl+Alt+ScanCode => Shift+KeyCode\n\t\t\t\t_registerIfUnknown(1, 0, 1, scanCode, 0, 1, 0, keyCode); //       Ctrl+Alt+ScanCode =>          Shift+KeyCode\n\t\t\t} else {\n\t\t\t\t// Ctrl+Alt+ScanCode => KeyCode\n\t\t\t\t_registerIfUnknown(1, 0, 1, scanCode, 0, 0, 0, keyCode); //       Ctrl+Alt+ScanCode =>                KeyCode\n\t\t\t}\n\t\t}\n\t\t// Handle all `withShift` entries\n\t\tfor (let i = mappings.length - 1; i >= 0; i--) {\n\t\t\tconst mapping = mappings[i];\n\t\t\tconst scanCode = mapping.scanCode;\n\t\t\tconst withShift = mapping.withShift;\n\t\t\tif (withShift === mapping.value) {\n\t\t\t\t// handled below\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tconst kb = MacLinuxKeyboardMapper._charCodeToKb(withShift);\n\t\t\tif (!kb) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tconst kbShiftKey = kb.shiftKey;\n\t\t\tconst keyCode = kb.keyCode;\n\n\t\t\tif (kbShiftKey) {\n\t\t\t\t// Shift+ScanCode => Shift+KeyCode\n\t\t\t\t_registerIfUnknown(0, 1, 0, scanCode, 0, 1, 0, keyCode); //          Shift+ScanCode =>          Shift+KeyCode\n\t\t\t\t_registerIfUnknown(0, 1, 1, scanCode, 0, 1, 1, keyCode); //      Shift+Alt+ScanCode =>      Shift+Alt+KeyCode\n\t\t\t\t_registerIfUnknown(1, 1, 0, scanCode, 1, 1, 0, keyCode); //     Ctrl+Shift+ScanCode =>     Ctrl+Shift+KeyCode\n\t\t\t\t_registerIfUnknown(1, 1, 1, scanCode, 1, 1, 1, keyCode); // Ctrl+Shift+Alt+ScanCode => Ctrl+Shift+Alt+KeyCode\n\t\t\t} else {\n\t\t\t\t// Shift+ScanCode => KeyCode\n\t\t\t\t_registerIfUnknown(0, 1, 0, scanCode, 0, 0, 0, keyCode); //          Shift+ScanCode =>                KeyCode\n\t\t\t\t_registerIfUnknown(0, 1, 0, scanCode, 0, 1, 0, keyCode); //          Shift+ScanCode =>          Shift+KeyCode\n\t\t\t\t_registerIfUnknown(0, 1, 1, scanCode, 0, 0, 1, keyCode); //      Shift+Alt+ScanCode =>            Alt+KeyCode\n\t\t\t\t_registerIfUnknown(0, 1, 1, scanCode, 0, 1, 1, keyCode); //      Shift+Alt+ScanCode =>      Shift+Alt+KeyCode\n\t\t\t\t_registerIfUnknown(1, 1, 0, scanCode, 1, 0, 0, keyCode); //     Ctrl+Shift+ScanCode =>           Ctrl+KeyCode\n\t\t\t\t_registerIfUnknown(1, 1, 0, scanCode, 1, 1, 0, keyCode); //     Ctrl+Shift+ScanCode =>     Ctrl+Shift+KeyCode\n\t\t\t\t_registerIfUnknown(1, 1, 1, scanCode, 1, 0, 1, keyCode); // Ctrl+Shift+Alt+ScanCode =>       Ctrl+Alt+KeyCode\n\t\t\t\t_registerIfUnknown(1, 1, 1, scanCode, 1, 1, 1, keyCode); // Ctrl+Shift+Alt+ScanCode => Ctrl+Shift+Alt+KeyCode\n\t\t\t}\n\t\t}\n\t\t// Handle all `value` entries\n\t\tfor (let i = mappings.length - 1; i >= 0; i--) {\n\t\t\tconst mapping = mappings[i];\n\t\t\tconst scanCode = mapping.scanCode;\n\t\t\tconst kb = MacLinuxKeyboardMapper._charCodeToKb(mapping.value);\n\t\t\tif (!kb) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tconst kbShiftKey = kb.shiftKey;\n\t\t\tconst keyCode = kb.keyCode;\n\n\t\t\tif (kbShiftKey) {\n\t\t\t\t// ScanCode => Shift+KeyCode\n\t\t\t\t_registerIfUnknown(0, 0, 0, scanCode, 0, 1, 0, keyCode); //                ScanCode =>          Shift+KeyCode\n\t\t\t\t_registerIfUnknown(0, 0, 1, scanCode, 0, 1, 1, keyCode); //            Alt+ScanCode =>      Shift+Alt+KeyCode\n\t\t\t\t_registerIfUnknown(1, 0, 0, scanCode, 1, 1, 0, keyCode); //           Ctrl+ScanCode =>     Ctrl+Shift+KeyCode\n\t\t\t\t_registerIfUnknown(1, 0, 1, scanCode, 1, 1, 1, keyCode); //       Ctrl+Alt+ScanCode => Ctrl+Shift+Alt+KeyCode\n\t\t\t} else {\n\t\t\t\t// ScanCode => KeyCode\n\t\t\t\t_registerIfUnknown(0, 0, 0, scanCode, 0, 0, 0, keyCode); //                ScanCode =>                KeyCode\n\t\t\t\t_registerIfUnknown(0, 0, 1, scanCode, 0, 0, 1, keyCode); //            Alt+ScanCode =>            Alt+KeyCode\n\t\t\t\t_registerIfUnknown(0, 1, 0, scanCode, 0, 1, 0, keyCode); //          Shift+ScanCode =>          Shift+KeyCode\n\t\t\t\t_registerIfUnknown(0, 1, 1, scanCode, 0, 1, 1, keyCode); //      Shift+Alt+ScanCode =>      Shift+Alt+KeyCode\n\t\t\t\t_registerIfUnknown(1, 0, 0, scanCode, 1, 0, 0, keyCode); //           Ctrl+ScanCode =>           Ctrl+KeyCode\n\t\t\t\t_registerIfUnknown(1, 0, 1, scanCode, 1, 0, 1, keyCode); //       Ctrl+Alt+ScanCode =>       Ctrl+Alt+KeyCode\n\t\t\t\t_registerIfUnknown(1, 1, 0, scanCode, 1, 1, 0, keyCode); //     Ctrl+Shift+ScanCode =>     Ctrl+Shift+KeyCode\n\t\t\t\t_registerIfUnknown(1, 1, 1, scanCode, 1, 1, 1, keyCode); // Ctrl+Shift+Alt+ScanCode => Ctrl+Shift+Alt+KeyCode\n\t\t\t}\n\t\t}\n\t\t// Handle all left-over available digits\n\t\t_registerAllCombos(0, 0, 0, ScanCode.Digit1, KeyCode.Digit1);\n\t\t_registerAllCombos(0, 0, 0, ScanCode.Digit2, KeyCode.Digit2);\n\t\t_registerAllCombos(0, 0, 0, ScanCode.Digit3, KeyCode.Digit3);\n\t\t_registerAllCombos(0, 0, 0, ScanCode.Digit4, KeyCode.Digit4);\n\t\t_registerAllCombos(0, 0, 0, ScanCode.Digit5, KeyCode.Digit5);\n\t\t_registerAllCombos(0, 0, 0, ScanCode.Digit6, KeyCode.Digit6);\n\t\t_registerAllCombos(0, 0, 0, ScanCode.Digit7, KeyCode.Digit7);\n\t\t_registerAllCombos(0, 0, 0, ScanCode.Digit8, KeyCode.Digit8);\n\t\t_registerAllCombos(0, 0, 0, ScanCode.Digit9, KeyCode.Digit9);\n\t\t_registerAllCombos(0, 0, 0, ScanCode.Digit0, KeyCode.Digit0);\n\n\t\tthis._scanCodeKeyCodeMapper.registrationComplete();\n\t}\n\n\tpublic dumpDebugInfo(): string {\n\t\tconst result: string[] = [];\n\n\t\tconst immutableSamples = [ScanCode.ArrowUp, ScanCode.Numpad0];\n\n\t\tlet cnt = 0;\n\t\tresult.push(`isUSStandard: ${this._isUSStandard}`);\n\t\tresult.push(\n\t\t\t`----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------`,\n\t\t);\n\t\tfor (\n\t\t\tlet scanCode = ScanCode.None;\n\t\t\tscanCode < ScanCode.MAX_VALUE;\n\t\t\tscanCode++\n\t\t) {\n\t\t\tif (\n\t\t\t\tIMMUTABLE_CODE_TO_KEY_CODE[scanCode] !==\n\t\t\t\tKeyCode.DependsOnKbLayout\n\t\t\t) {\n\t\t\t\tif (immutableSamples.indexOf(scanCode) === -1) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (cnt % 4 === 0) {\n\t\t\t\tresult.push(\n\t\t\t\t\t`|       HW Code combination      |  Key  |    KeyCode combination    | Pri |          UI label         |         User settings          |    Electron accelerator   |       Dispatching string       | WYSIWYG |`,\n\t\t\t\t);\n\t\t\t\tresult.push(\n\t\t\t\t\t`----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------`,\n\t\t\t\t);\n\t\t\t}\n\t\t\tcnt++;\n\n\t\t\tconst mapping = this._codeInfo[scanCode];\n\n\t\t\tfor (let mod = 0; mod < 8; mod++) {\n\t\t\t\tconst hwCtrlKey = mod & 0b001 ? true : false;\n\t\t\t\tconst hwShiftKey = mod & 0b010 ? true : false;\n\t\t\t\tconst hwAltKey = mod & 0b100 ? true : false;\n\t\t\t\tconst scanCodeCombo = new ScanCodeCombo(\n\t\t\t\t\thwCtrlKey,\n\t\t\t\t\thwShiftKey,\n\t\t\t\t\thwAltKey,\n\t\t\t\t\tscanCode,\n\t\t\t\t);\n\t\t\t\tconst resolvedKb = this.resolveKeyboardEvent({\n\t\t\t\t\t_standardKeyboardEventBrand: true,\n\t\t\t\t\tctrlKey: scanCodeCombo.ctrlKey,\n\t\t\t\t\tshiftKey: scanCodeCombo.shiftKey,\n\t\t\t\t\taltKey: scanCodeCombo.altKey,\n\t\t\t\t\tmetaKey: false,\n\t\t\t\t\taltGraphKey: false,\n\t\t\t\t\tkeyCode: KeyCode.DependsOnKbLayout,\n\t\t\t\t\tcode: ScanCodeUtils.toString(scanCode),\n\t\t\t\t});\n\n\t\t\t\tconst outScanCodeCombo = scanCodeCombo.toString();\n\t\t\t\tconst outKey = scanCodeCombo.getProducedChar(mapping);\n\t\t\t\tconst ariaLabel = resolvedKb.getAriaLabel();\n\t\t\t\tconst outUILabel = ariaLabel\n\t\t\t\t\t? ariaLabel.replace(/Control\\+/, \"Ctrl+\")\n\t\t\t\t\t: null;\n\t\t\t\tconst outUserSettings = resolvedKb.getUserSettingsLabel();\n\t\t\t\tconst outElectronAccelerator =\n\t\t\t\t\tresolvedKb.getElectronAccelerator();\n\t\t\t\tconst outDispatchStr = resolvedKb.getDispatchChords()[0];\n\n\t\t\t\tconst isWYSIWYG = resolvedKb ? resolvedKb.isWYSIWYG() : false;\n\t\t\t\tconst outWYSIWYG = isWYSIWYG ? \"       \" : \"   NO  \";\n\n\t\t\t\tconst kbCombos =\n\t\t\t\t\tthis._scanCodeKeyCodeMapper.lookupScanCodeCombo(\n\t\t\t\t\t\tscanCodeCombo,\n\t\t\t\t\t);\n\t\t\t\tif (kbCombos.length === 0) {\n\t\t\t\t\tresult.push(\n\t\t\t\t\t\t`| ${this._leftPad(outScanCodeCombo, 30)} | ${outKey} | ${this._leftPad(\"\", 25)} | ${this._leftPad(\"\", 3)} | ${this._leftPad(outUILabel, 25)} | ${this._leftPad(outUserSettings, 30)} | ${this._leftPad(outElectronAccelerator, 25)} | ${this._leftPad(outDispatchStr, 30)} | ${outWYSIWYG} |`,\n\t\t\t\t\t);\n\t\t\t\t} else {\n\t\t\t\t\tfor (let i = 0, len = kbCombos.length; i < len; i++) {\n\t\t\t\t\t\tconst kbCombo = kbCombos[i];\n\t\t\t\t\t\t// find out the priority of this scan code for this key code\n\t\t\t\t\t\tlet colPriority: string;\n\n\t\t\t\t\t\tconst scanCodeCombos =\n\t\t\t\t\t\t\tthis._scanCodeKeyCodeMapper.lookupKeyCodeCombo(\n\t\t\t\t\t\t\t\tkbCombo,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\tif (scanCodeCombos.length === 1) {\n\t\t\t\t\t\t\t// no need for priority, this key code combo maps to precisely this scan code combo\n\t\t\t\t\t\t\tcolPriority = \"\";\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tlet priority = -1;\n\t\t\t\t\t\t\tfor (let j = 0; j < scanCodeCombos.length; j++) {\n\t\t\t\t\t\t\t\tif (scanCodeCombos[j].equals(scanCodeCombo)) {\n\t\t\t\t\t\t\t\t\tpriority = j + 1;\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tcolPriority = String(priority);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst outKeybinding = kbCombo.toString();\n\t\t\t\t\t\tif (i === 0) {\n\t\t\t\t\t\t\tresult.push(\n\t\t\t\t\t\t\t\t`| ${this._leftPad(outScanCodeCombo, 30)} | ${outKey} | ${this._leftPad(outKeybinding, 25)} | ${this._leftPad(colPriority, 3)} | ${this._leftPad(outUILabel, 25)} | ${this._leftPad(outUserSettings, 30)} | ${this._leftPad(outElectronAccelerator, 25)} | ${this._leftPad(outDispatchStr, 30)} | ${outWYSIWYG} |`,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// secondary keybindings\n\t\t\t\t\t\t\tresult.push(\n\t\t\t\t\t\t\t\t`| ${this._leftPad(\"\", 30)} |       | ${this._leftPad(outKeybinding, 25)} | ${this._leftPad(colPriority, 3)} | ${this._leftPad(\"\", 25)} | ${this._leftPad(\"\", 30)} | ${this._leftPad(\"\", 25)} | ${this._leftPad(\"\", 30)} |         |`,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tresult.push(\n\t\t\t\t`----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------`,\n\t\t\t);\n\t\t}\n\n\t\treturn result.join(\"\\n\");\n\t}\n\n\tprivate _leftPad(str: string | null, cnt: number): string {\n\t\tif (str === null) {\n\t\t\tstr = \"null\";\n\t\t}\n\t\twhile (str.length < cnt) {\n\t\t\tstr = \" \" + str;\n\t\t}\n\t\treturn str;\n\t}\n\n\tpublic keyCodeChordToScanCodeChord(chord: KeyCodeChord): ScanCodeChord[] {\n\t\t// Avoid double Enter bindings (both ScanCode.NumpadEnter and ScanCode.Enter point to KeyCode.Enter)\n\t\tif (chord.keyCode === KeyCode.Enter) {\n\t\t\treturn [\n\t\t\t\tnew ScanCodeChord(\n\t\t\t\t\tchord.ctrlKey,\n\t\t\t\t\tchord.shiftKey,\n\t\t\t\t\tchord.altKey,\n\t\t\t\t\tchord.metaKey,\n\t\t\t\t\tScanCode.Enter,\n\t\t\t\t),\n\t\t\t];\n\t\t}\n\n\t\tconst scanCodeCombos = this._scanCodeKeyCodeMapper.lookupKeyCodeCombo(\n\t\t\tnew KeyCodeCombo(\n\t\t\t\tchord.ctrlKey,\n\t\t\t\tchord.shiftKey,\n\t\t\t\tchord.altKey,\n\t\t\t\tchord.keyCode,\n\t\t\t),\n\t\t);\n\n\t\tconst result: ScanCodeChord[] = [];\n\t\tfor (let i = 0, len = scanCodeCombos.length; i < len; i++) {\n\t\t\tconst scanCodeCombo = scanCodeCombos[i];\n\t\t\tresult[i] = new ScanCodeChord(\n\t\t\t\tscanCodeCombo.ctrlKey,\n\t\t\t\tscanCodeCombo.shiftKey,\n\t\t\t\tscanCodeCombo.altKey,\n\t\t\t\tchord.metaKey,\n\t\t\t\tscanCodeCombo.scanCode,\n\t\t\t);\n\t\t}\n\t\treturn result;\n\t}\n\n\tpublic getUILabelForScanCodeChord(\n\t\tchord: ScanCodeChord | null,\n\t): string | null {\n\t\tif (!chord) {\n\t\t\treturn null;\n\t\t}\n\t\tif (chord.isDuplicateModifierCase()) {\n\t\t\treturn \"\";\n\t\t}\n\t\tif (this._OS === OperatingSystem.Macintosh) {\n\t\t\tswitch (chord.scanCode) {\n\t\t\t\tcase ScanCode.ArrowLeft:\n\t\t\t\t\treturn \"\u2190\";\n\t\t\t\tcase ScanCode.ArrowUp:\n\t\t\t\t\treturn \"\u2191\";\n\t\t\t\tcase ScanCode.ArrowRight:\n\t\t\t\t\treturn \"\u2192\";\n\t\t\t\tcase ScanCode.ArrowDown:\n\t\t\t\t\treturn \"\u2193\";\n\t\t\t}\n\t\t}\n\t\treturn this._scanCodeToLabel[chord.scanCode];\n\t}\n\n\tpublic getAriaLabelForScanCodeChord(\n\t\tchord: ScanCodeChord | null,\n\t): string | null {\n\t\tif (!chord) {\n\t\t\treturn null;\n\t\t}\n\t\tif (chord.isDuplicateModifierCase()) {\n\t\t\treturn \"\";\n\t\t}\n\t\treturn this._scanCodeToLabel[chord.scanCode];\n\t}\n\n\tpublic getDispatchStrForScanCodeChord(chord: ScanCodeChord): string | null {\n\t\tconst codeDispatch = this._scanCodeToDispatch[chord.scanCode];\n\t\tif (!codeDispatch) {\n\t\t\treturn null;\n\t\t}\n\t\tlet result = \"\";\n\n\t\tif (chord.ctrlKey) {\n\t\t\tresult += \"ctrl+\";\n\t\t}\n\t\tif (chord.shiftKey) {\n\t\t\tresult += \"shift+\";\n\t\t}\n\t\tif (chord.altKey) {\n\t\t\tresult += \"alt+\";\n\t\t}\n\t\tif (chord.metaKey) {\n\t\t\tresult += \"meta+\";\n\t\t}\n\t\tresult += codeDispatch;\n\n\t\treturn result;\n\t}\n\n\tpublic getUserSettingsLabelForScanCodeChord(\n\t\tchord: ScanCodeChord | null,\n\t): string | null {\n\t\tif (!chord) {\n\t\t\treturn null;\n\t\t}\n\t\tif (chord.isDuplicateModifierCase()) {\n\t\t\treturn \"\";\n\t\t}\n\n\t\tconst immutableKeyCode = IMMUTABLE_CODE_TO_KEY_CODE[chord.scanCode];\n\t\tif (immutableKeyCode !== KeyCode.DependsOnKbLayout) {\n\t\t\treturn KeyCodeUtils.toUserSettingsUS(\n\t\t\t\timmutableKeyCode,\n\t\t\t).toLowerCase();\n\t\t}\n\n\t\t// Check if this scanCode always maps to the same keyCode and back\n\t\tconst constantKeyCode: KeyCode =\n\t\t\tthis._scanCodeKeyCodeMapper.guessStableKeyCode(chord.scanCode);\n\t\tif (constantKeyCode !== KeyCode.DependsOnKbLayout) {\n\t\t\t// Verify that this is a good key code that can be mapped back to the same scan code\n\t\t\tconst reverseChords = this.keyCodeChordToScanCodeChord(\n\t\t\t\tnew KeyCodeChord(\n\t\t\t\t\tchord.ctrlKey,\n\t\t\t\t\tchord.shiftKey,\n\t\t\t\t\tchord.altKey,\n\t\t\t\t\tchord.metaKey,\n\t\t\t\t\tconstantKeyCode,\n\t\t\t\t),\n\t\t\t);\n\t\t\tfor (let i = 0, len = reverseChords.length; i < len; i++) {\n\t\t\t\tconst reverseChord = reverseChords[i];\n\t\t\t\tif (reverseChord.scanCode === chord.scanCode) {\n\t\t\t\t\treturn KeyCodeUtils.toUserSettingsUS(\n\t\t\t\t\t\tconstantKeyCode,\n\t\t\t\t\t).toLowerCase();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn this._scanCodeToDispatch[chord.scanCode];\n\t}\n\n\tpublic getElectronAcceleratorLabelForScanCodeChord(\n\t\tchord: ScanCodeChord | null,\n\t): string | null {\n\t\tif (!chord) {\n\t\t\treturn null;\n\t\t}\n\n\t\tconst immutableKeyCode = IMMUTABLE_CODE_TO_KEY_CODE[chord.scanCode];\n\t\tif (immutableKeyCode !== KeyCode.DependsOnKbLayout) {\n\t\t\treturn KeyCodeUtils.toElectronAccelerator(immutableKeyCode);\n\t\t}\n\n\t\t// Check if this scanCode always maps to the same keyCode and back\n\t\tconst constantKeyCode: KeyCode =\n\t\t\tthis._scanCodeKeyCodeMapper.guessStableKeyCode(chord.scanCode);\n\n\t\tif (this._OS === OperatingSystem.Linux && !this._isUSStandard) {\n\t\t\t// [Electron Accelerators] On Linux, Electron does not handle correctly OEM keys.\n\t\t\t// when using a different keyboard layout than US Standard.\n\t\t\t// See https://github.com/microsoft/vscode/issues/23706\n\t\t\t// See https://github.com/microsoft/vscode/pull/134890#issuecomment-941671791\n\t\t\tconst isOEMKey =\n\t\t\t\tconstantKeyCode === KeyCode.Semicolon ||\n\t\t\t\tconstantKeyCode === KeyCode.Equal ||\n\t\t\t\tconstantKeyCode === KeyCode.Comma ||\n\t\t\t\tconstantKeyCode === KeyCode.Minus ||\n\t\t\t\tconstantKeyCode === KeyCode.Period ||\n\t\t\t\tconstantKeyCode === KeyCode.Slash ||\n\t\t\t\tconstantKeyCode === KeyCode.Backquote ||\n\t\t\t\tconstantKeyCode === KeyCode.BracketLeft ||\n\t\t\t\tconstantKeyCode === KeyCode.Backslash ||\n\t\t\t\tconstantKeyCode === KeyCode.BracketRight;\n\n\t\t\tif (isOEMKey) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t}\n\n\t\tif (constantKeyCode !== KeyCode.DependsOnKbLayout) {\n\t\t\treturn KeyCodeUtils.toElectronAccelerator(constantKeyCode);\n\t\t}\n\n\t\treturn null;\n\t}\n\n\tprivate _toResolvedKeybinding(\n\t\tchordParts: ScanCodeChord[][],\n\t): NativeResolvedKeybinding[] {\n\t\tif (chordParts.length === 0) {\n\t\t\treturn [];\n\t\t}\n\t\tconst result: NativeResolvedKeybinding[] = [];\n\t\tthis._generateResolvedKeybindings(chordParts, 0, [], result);\n\t\treturn result;\n\t}\n\n\tprivate _generateResolvedKeybindings(\n\t\tchordParts: ScanCodeChord[][],\n\t\tcurrentIndex: number,\n\t\tpreviousParts: ScanCodeChord[],\n\t\tresult: NativeResolvedKeybinding[],\n\t) {\n\t\tconst chordPart = chordParts[currentIndex];\n\t\tconst isFinalIndex = currentIndex === chordParts.length - 1;\n\t\tfor (let i = 0, len = chordPart.length; i < len; i++) {\n\t\t\tconst chords = [...previousParts, chordPart[i]];\n\t\t\tif (isFinalIndex) {\n\t\t\t\tresult.push(\n\t\t\t\t\tnew NativeResolvedKeybinding(this, this._OS, chords),\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\tthis._generateResolvedKeybindings(\n\t\t\t\t\tchordParts,\n\t\t\t\t\tcurrentIndex + 1,\n\t\t\t\t\tchords,\n\t\t\t\t\tresult,\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic resolveKeyboardEvent(\n\t\tkeyboardEvent: IKeyboardEvent,\n\t): NativeResolvedKeybinding {\n\t\tlet code = ScanCodeUtils.toEnum(keyboardEvent.code);\n\n\t\t// Treat NumpadEnter as Enter\n\t\tif (code === ScanCode.NumpadEnter) {\n\t\t\tcode = ScanCode.Enter;\n\t\t}\n\n\t\tconst keyCode = keyboardEvent.keyCode;\n\n\t\tif (\n\t\t\tkeyCode === KeyCode.LeftArrow ||\n\t\t\tkeyCode === KeyCode.UpArrow ||\n\t\t\tkeyCode === KeyCode.RightArrow ||\n\t\t\tkeyCode === KeyCode.DownArrow ||\n\t\t\tkeyCode === KeyCode.Delete ||\n\t\t\tkeyCode === KeyCode.Insert ||\n\t\t\tkeyCode === KeyCode.Home ||\n\t\t\tkeyCode === KeyCode.End ||\n\t\t\tkeyCode === KeyCode.PageDown ||\n\t\t\tkeyCode === KeyCode.PageUp ||\n\t\t\tkeyCode === KeyCode.Backspace\n\t\t) {\n\t\t\t// \"Dispatch\" on keyCode for these key codes to workaround issues with remote desktoping software\n\t\t\t// where the scan codes appear to be incorrect (see https://github.com/microsoft/vscode/issues/24107)\n\t\t\tconst immutableScanCode = IMMUTABLE_KEY_CODE_TO_CODE[keyCode];\n\t\t\tif (immutableScanCode !== ScanCode.DependsOnKbLayout) {\n\t\t\t\tcode = immutableScanCode;\n\t\t\t}\n\t\t} else if (\n\t\t\tcode === ScanCode.Numpad1 ||\n\t\t\tcode === ScanCode.Numpad2 ||\n\t\t\tcode === ScanCode.Numpad3 ||\n\t\t\tcode === ScanCode.Numpad4 ||\n\t\t\tcode === ScanCode.Numpad5 ||\n\t\t\tcode === ScanCode.Numpad6 ||\n\t\t\tcode === ScanCode.Numpad7 ||\n\t\t\tcode === ScanCode.Numpad8 ||\n\t\t\tcode === ScanCode.Numpad9 ||\n\t\t\tcode === ScanCode.Numpad0 ||\n\t\t\tcode === ScanCode.NumpadDecimal\n\t\t) {\n\t\t\t// \"Dispatch\" on keyCode for all numpad keys in order for NumLock to work correctly\n\t\t\tif (keyCode >= 0) {\n\t\t\t\tconst immutableScanCode = IMMUTABLE_KEY_CODE_TO_CODE[keyCode];\n\t\t\t\tif (immutableScanCode !== ScanCode.DependsOnKbLayout) {\n\t\t\t\t\tcode = immutableScanCode;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tconst ctrlKey =\n\t\t\tkeyboardEvent.ctrlKey ||\n\t\t\t(this._mapAltGrToCtrlAlt && keyboardEvent.altGraphKey);\n\t\tconst altKey =\n\t\t\tkeyboardEvent.altKey ||\n\t\t\t(this._mapAltGrToCtrlAlt && keyboardEvent.altGraphKey);\n\t\tconst chord = new ScanCodeChord(\n\t\t\tctrlKey,\n\t\t\tkeyboardEvent.shiftKey,\n\t\t\taltKey,\n\t\t\tkeyboardEvent.metaKey,\n\t\t\tcode,\n\t\t);\n\t\treturn new NativeResolvedKeybinding(this, this._OS, [chord]);\n\t}\n\n\tprivate _resolveChord(chord: Chord | null): ScanCodeChord[] {\n\t\tif (!chord) {\n\t\t\treturn [];\n\t\t}\n\t\tif (chord instanceof ScanCodeChord) {\n\t\t\treturn [chord];\n\t\t}\n\t\treturn this.keyCodeChordToScanCodeChord(chord);\n\t}\n\n\tpublic resolveKeybinding(keybinding: Keybinding): ResolvedKeybinding[] {\n\t\tconst chords: ScanCodeChord[][] = keybinding.chords.map((chord) =>\n\t\t\tthis._resolveChord(chord),\n\t\t);\n\t\treturn this._toResolvedKeybinding(chords);\n\t}\n\n\tprivate static _redirectCharCode(charCode: number): number {\n\t\tswitch (charCode) {\n\t\t\t// allow-any-unicode-next-line\n\t\t\t// CJK: \u3002 \u300C \u300D \u3010 \u3011 \uFF1B \uFF0C\n\t\t\t// map: . [ ] [ ] ; ,\n\t\t\tcase CharCode.U_IDEOGRAPHIC_FULL_STOP:\n\t\t\t\treturn CharCode.Period;\n\t\t\tcase CharCode.U_LEFT_CORNER_BRACKET:\n\t\t\t\treturn CharCode.OpenSquareBracket;\n\t\t\tcase CharCode.U_RIGHT_CORNER_BRACKET:\n\t\t\t\treturn CharCode.CloseSquareBracket;\n\t\t\tcase CharCode.U_LEFT_BLACK_LENTICULAR_BRACKET:\n\t\t\t\treturn CharCode.OpenSquareBracket;\n\t\t\tcase CharCode.U_RIGHT_BLACK_LENTICULAR_BRACKET:\n\t\t\t\treturn CharCode.CloseSquareBracket;\n\t\t\tcase CharCode.U_FULLWIDTH_SEMICOLON:\n\t\t\t\treturn CharCode.Semicolon;\n\t\t\tcase CharCode.U_FULLWIDTH_COMMA:\n\t\t\t\treturn CharCode.Comma;\n\t\t}\n\t\treturn charCode;\n\t}\n\n\tprivate static _charCodeToKb(\n\t\tcharCode: number,\n\t): { keyCode: KeyCode; shiftKey: boolean } | null {\n\t\tcharCode = this._redirectCharCode(charCode);\n\t\tif (charCode < CHAR_CODE_TO_KEY_CODE.length) {\n\t\t\treturn CHAR_CODE_TO_KEY_CODE[charCode];\n\t\t}\n\t\treturn null;\n\t}\n\n\t/**\n\t * Attempt to map a combining character to a regular one that renders the same way.\n\t *\n\t * https://www.compart.com/en/unicode/bidiclass/NSM\n\t */\n\tpublic static getCharCode(char: string): number {\n\t\tif (char.length === 0) {\n\t\t\treturn 0;\n\t\t}\n\t\tconst charCode = char.charCodeAt(0);\n\t\tswitch (charCode) {\n\t\t\tcase CharCode.U_Combining_Grave_Accent:\n\t\t\t\treturn CharCode.U_GRAVE_ACCENT;\n\t\t\tcase CharCode.U_Combining_Acute_Accent:\n\t\t\t\treturn CharCode.U_ACUTE_ACCENT;\n\t\t\tcase CharCode.U_Combining_Circumflex_Accent:\n\t\t\t\treturn CharCode.U_CIRCUMFLEX;\n\t\t\tcase CharCode.U_Combining_Tilde:\n\t\t\t\treturn CharCode.U_SMALL_TILDE;\n\t\t\tcase CharCode.U_Combining_Macron:\n\t\t\t\treturn CharCode.U_MACRON;\n\t\t\tcase CharCode.U_Combining_Overline:\n\t\t\t\treturn CharCode.U_OVERLINE;\n\t\t\tcase CharCode.U_Combining_Breve:\n\t\t\t\treturn CharCode.U_BREVE;\n\t\t\tcase CharCode.U_Combining_Dot_Above:\n\t\t\t\treturn CharCode.U_DOT_ABOVE;\n\t\t\tcase CharCode.U_Combining_Diaeresis:\n\t\t\t\treturn CharCode.U_DIAERESIS;\n\t\t\tcase CharCode.U_Combining_Ring_Above:\n\t\t\t\treturn CharCode.U_RING_ABOVE;\n\t\t\tcase CharCode.U_Combining_Double_Acute_Accent:\n\t\t\t\treturn CharCode.U_DOUBLE_ACUTE_ACCENT;\n\t\t}\n\t\treturn charCode;\n\t}\n}\n\n(() => {\n\tfunction define(\n\t\tcharCode: number,\n\t\tkeyCode: KeyCode,\n\t\tshiftKey: boolean,\n\t): void {\n\t\tfor (let i = CHAR_CODE_TO_KEY_CODE.length; i < charCode; i++) {\n\t\t\tCHAR_CODE_TO_KEY_CODE[i] = null;\n\t\t}\n\t\tCHAR_CODE_TO_KEY_CODE[charCode] = {\n\t\t\tkeyCode: keyCode,\n\t\t\tshiftKey: shiftKey,\n\t\t};\n\t}\n\n\tfor (let chCode = CharCode.A; chCode <= CharCode.Z; chCode++) {\n\t\tdefine(chCode, KeyCode.KeyA + (chCode - CharCode.A), true);\n\t}\n\n\tfor (let chCode = CharCode.a; chCode <= CharCode.z; chCode++) {\n\t\tdefine(chCode, KeyCode.KeyA + (chCode - CharCode.a), false);\n\t}\n\n\tdefine(CharCode.Semicolon, KeyCode.Semicolon, false);\n\tdefine(CharCode.Colon, KeyCode.Semicolon, true);\n\n\tdefine(CharCode.Equals, KeyCode.Equal, false);\n\tdefine(CharCode.Plus, KeyCode.Equal, true);\n\n\tdefine(CharCode.Comma, KeyCode.Comma, false);\n\tdefine(CharCode.LessThan, KeyCode.Comma, true);\n\n\tdefine(CharCode.Dash, KeyCode.Minus, false);\n\tdefine(CharCode.Underline, KeyCode.Minus, true);\n\n\tdefine(CharCode.Period, KeyCode.Period, false);\n\tdefine(CharCode.GreaterThan, KeyCode.Period, true);\n\n\tdefine(CharCode.Slash, KeyCode.Slash, false);\n\tdefine(CharCode.QuestionMark, KeyCode.Slash, true);\n\n\tdefine(CharCode.BackTick, KeyCode.Backquote, false);\n\tdefine(CharCode.Tilde, KeyCode.Backquote, true);\n\n\tdefine(CharCode.OpenSquareBracket, KeyCode.BracketLeft, false);\n\tdefine(CharCode.OpenCurlyBrace, KeyCode.BracketLeft, true);\n\n\tdefine(CharCode.Backslash, KeyCode.Backslash, false);\n\tdefine(CharCode.Pipe, KeyCode.Backslash, true);\n\n\tdefine(CharCode.CloseSquareBracket, KeyCode.BracketRight, false);\n\tdefine(CharCode.CloseCurlyBrace, KeyCode.BracketRight, true);\n\n\tdefine(CharCode.SingleQuote, KeyCode.Quote, false);\n\tdefine(CharCode.DoubleQuote, KeyCode.Quote, true);\n})();\n"],
  "mappings": "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",
  "names": ["len"]
}
