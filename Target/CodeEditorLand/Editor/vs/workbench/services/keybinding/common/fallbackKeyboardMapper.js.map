{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/keybinding/common/fallbackKeyboardMapper.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport {\n\tKeyCodeChord,\n\tKeybinding,\n\ttype ResolvedKeybinding,\n} from \"../../../../base/common/keybindings.js\";\nimport type { OperatingSystem } from \"../../../../base/common/platform.js\";\nimport type { IKeyboardEvent } from \"../../../../platform/keybinding/common/keybinding.js\";\nimport { USLayoutResolvedKeybinding } from \"../../../../platform/keybinding/common/usLayoutResolvedKeybinding.js\";\nimport type { IKeyboardMapper } from \"../../../../platform/keyboardLayout/common/keyboardMapper.js\";\n\n/**\n * A keyboard mapper to be used when reading the keymap from the OS fails.\n */\nexport class FallbackKeyboardMapper implements IKeyboardMapper {\n\tconstructor(\n\t\tprivate readonly _mapAltGrToCtrlAlt: boolean,\n\t\tprivate readonly _OS: OperatingSystem,\n\t) {}\n\n\tpublic dumpDebugInfo(): string {\n\t\treturn \"FallbackKeyboardMapper dispatching on keyCode\";\n\t}\n\n\tpublic resolveKeyboardEvent(\n\t\tkeyboardEvent: IKeyboardEvent,\n\t): ResolvedKeybinding {\n\t\tconst ctrlKey =\n\t\t\tkeyboardEvent.ctrlKey ||\n\t\t\t(this._mapAltGrToCtrlAlt && keyboardEvent.altGraphKey);\n\t\tconst altKey =\n\t\t\tkeyboardEvent.altKey ||\n\t\t\t(this._mapAltGrToCtrlAlt && keyboardEvent.altGraphKey);\n\t\tconst chord = new KeyCodeChord(\n\t\t\tctrlKey,\n\t\t\tkeyboardEvent.shiftKey,\n\t\t\taltKey,\n\t\t\tkeyboardEvent.metaKey,\n\t\t\tkeyboardEvent.keyCode,\n\t\t);\n\t\tconst result = this.resolveKeybinding(new Keybinding([chord]));\n\t\treturn result[0];\n\t}\n\n\tpublic resolveKeybinding(keybinding: Keybinding): ResolvedKeybinding[] {\n\t\treturn USLayoutResolvedKeybinding.resolveKeybinding(\n\t\t\tkeybinding,\n\t\t\tthis._OS,\n\t\t);\n\t}\n}\n"],
  "mappings": ";;AAKA;AAAA,EACC;AAAA,EACA;AAAA,OAEM;AAGP,SAAS,kCAAkC;AAMpC,MAAM,uBAAkD;AAAA,EAC9D,YACkB,oBACA,KAChB;AAFgB;AACA;AAAA,EACf;AAAA,EAtBJ,OAkB+D;AAAA;AAAA;AAAA,EAMvD,gBAAwB;AAC9B,WAAO;AAAA,EACR;AAAA,EAEO,qBACN,eACqB;AACrB,UAAM,UACL,cAAc,WACb,KAAK,sBAAsB,cAAc;AAC3C,UAAM,SACL,cAAc,UACb,KAAK,sBAAsB,cAAc;AAC3C,UAAM,QAAQ,IAAI;AAAA,MACjB;AAAA,MACA,cAAc;AAAA,MACd;AAAA,MACA,cAAc;AAAA,MACd,cAAc;AAAA,IACf;AACA,UAAM,SAAS,KAAK,kBAAkB,IAAI,WAAW,CAAC,KAAK,CAAC,CAAC;AAC7D,WAAO,OAAO,CAAC;AAAA,EAChB;AAAA,EAEO,kBAAkB,YAA8C;AACtE,WAAO,2BAA2B;AAAA,MACjC;AAAA,MACA,KAAK;AAAA,IACN;AAAA,EACD;AACD;",
  "names": []
}
