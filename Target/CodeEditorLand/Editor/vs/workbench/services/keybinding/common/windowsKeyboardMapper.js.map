{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/keybinding/common/windowsKeyboardMapper.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CharCode } from \"../../../../base/common/charCode.js\";\nimport {\n\tIMMUTABLE_CODE_TO_KEY_CODE,\n\tKeyCode,\n\tKeyCodeUtils,\n\tNATIVE_WINDOWS_KEY_CODE_TO_KEY_CODE,\n\tScanCode,\n\tScanCodeUtils,\n} from \"../../../../base/common/keyCodes.js\";\nimport { UILabelProvider } from \"../../../../base/common/keybindingLabels.js\";\nimport {\n\ttype Chord,\n\tKeyCodeChord,\n\ttype Keybinding,\n\ttype ResolvedKeybinding,\n\tScanCodeChord,\n\ttype SingleModifierChord,\n} from \"../../../../base/common/keybindings.js\";\nimport { OperatingSystem } from \"../../../../base/common/platform.js\";\nimport { BaseResolvedKeybinding } from \"../../../../platform/keybinding/common/baseResolvedKeybinding.js\";\nimport type { IKeyboardEvent } from \"../../../../platform/keybinding/common/keybinding.js\";\nimport { toEmptyArrayIfContainsNull } from \"../../../../platform/keybinding/common/resolvedKeybindingItem.js\";\nimport type { IWindowsKeyboardMapping } from \"../../../../platform/keyboardLayout/common/keyboardLayout.js\";\nimport type { IKeyboardMapper } from \"../../../../platform/keyboardLayout/common/keyboardMapper.js\";\n\nconst LOG = false;\nfunction log(str: string): void {\n\tif (LOG) {\n\t\tconsole.info(str);\n\t}\n}\n\nexport interface IScanCodeMapping {\n\tscanCode: ScanCode;\n\tkeyCode: KeyCode;\n\tvalue: string;\n\twithShift: string;\n\twithAltGr: string;\n\twithShiftAltGr: string;\n}\n\nexport class WindowsNativeResolvedKeybinding extends BaseResolvedKeybinding<KeyCodeChord> {\n\tprivate readonly _mapper: WindowsKeyboardMapper;\n\n\tconstructor(mapper: WindowsKeyboardMapper, chords: KeyCodeChord[]) {\n\t\tsuper(OperatingSystem.Windows, chords);\n\t\tthis._mapper = mapper;\n\t}\n\n\tprotected _getLabel(chord: KeyCodeChord): string | null {\n\t\tif (chord.isDuplicateModifierCase()) {\n\t\t\treturn \"\";\n\t\t}\n\t\treturn this._mapper.getUILabelForKeyCode(chord.keyCode);\n\t}\n\n\tprivate _getUSLabelForKeybinding(chord: KeyCodeChord): string | null {\n\t\tif (chord.isDuplicateModifierCase()) {\n\t\t\treturn \"\";\n\t\t}\n\t\treturn KeyCodeUtils.toString(chord.keyCode);\n\t}\n\n\tpublic getUSLabel(): string | null {\n\t\treturn UILabelProvider.toLabel(this._os, this._chords, (keybinding) =>\n\t\t\tthis._getUSLabelForKeybinding(keybinding),\n\t\t);\n\t}\n\n\tprotected _getAriaLabel(chord: KeyCodeChord): string | null {\n\t\tif (chord.isDuplicateModifierCase()) {\n\t\t\treturn \"\";\n\t\t}\n\t\treturn this._mapper.getAriaLabelForKeyCode(chord.keyCode);\n\t}\n\n\tprotected _getElectronAccelerator(chord: KeyCodeChord): string | null {\n\t\treturn this._mapper.getElectronAcceleratorForKeyBinding(chord);\n\t}\n\n\tprotected _getUserSettingsLabel(chord: KeyCodeChord): string | null {\n\t\tif (chord.isDuplicateModifierCase()) {\n\t\t\treturn \"\";\n\t\t}\n\t\tconst result = this._mapper.getUserSettingsLabelForKeyCode(\n\t\t\tchord.keyCode,\n\t\t);\n\t\treturn result ? result.toLowerCase() : result;\n\t}\n\n\tprotected _isWYSIWYG(chord: KeyCodeChord): boolean {\n\t\treturn this.__isWYSIWYG(chord.keyCode);\n\t}\n\n\tprivate __isWYSIWYG(keyCode: KeyCode): boolean {\n\t\tif (\n\t\t\tkeyCode === KeyCode.LeftArrow ||\n\t\t\tkeyCode === KeyCode.UpArrow ||\n\t\t\tkeyCode === KeyCode.RightArrow ||\n\t\t\tkeyCode === KeyCode.DownArrow\n\t\t) {\n\t\t\treturn true;\n\t\t}\n\t\tconst ariaLabel = this._mapper.getAriaLabelForKeyCode(keyCode);\n\t\tconst userSettingsLabel =\n\t\t\tthis._mapper.getUserSettingsLabelForKeyCode(keyCode);\n\t\treturn ariaLabel === userSettingsLabel;\n\t}\n\n\tprotected _getChordDispatch(chord: KeyCodeChord): string | null {\n\t\tif (chord.isModifierKey()) {\n\t\t\treturn null;\n\t\t}\n\t\tlet result = \"\";\n\n\t\tif (chord.ctrlKey) {\n\t\t\tresult += \"ctrl+\";\n\t\t}\n\t\tif (chord.shiftKey) {\n\t\t\tresult += \"shift+\";\n\t\t}\n\t\tif (chord.altKey) {\n\t\t\tresult += \"alt+\";\n\t\t}\n\t\tif (chord.metaKey) {\n\t\t\tresult += \"meta+\";\n\t\t}\n\t\tresult += KeyCodeUtils.toString(chord.keyCode);\n\n\t\treturn result;\n\t}\n\n\tprotected _getSingleModifierChordDispatch(\n\t\tchord: KeyCodeChord,\n\t): SingleModifierChord | null {\n\t\tif (\n\t\t\tchord.keyCode === KeyCode.Ctrl &&\n\t\t\t!chord.shiftKey &&\n\t\t\t!chord.altKey &&\n\t\t\t!chord.metaKey\n\t\t) {\n\t\t\treturn \"ctrl\";\n\t\t}\n\t\tif (\n\t\t\tchord.keyCode === KeyCode.Shift &&\n\t\t\t!chord.ctrlKey &&\n\t\t\t!chord.altKey &&\n\t\t\t!chord.metaKey\n\t\t) {\n\t\t\treturn \"shift\";\n\t\t}\n\t\tif (\n\t\t\tchord.keyCode === KeyCode.Alt &&\n\t\t\t!chord.ctrlKey &&\n\t\t\t!chord.shiftKey &&\n\t\t\t!chord.metaKey\n\t\t) {\n\t\t\treturn \"alt\";\n\t\t}\n\t\tif (\n\t\t\tchord.keyCode === KeyCode.Meta &&\n\t\t\t!chord.ctrlKey &&\n\t\t\t!chord.shiftKey &&\n\t\t\t!chord.altKey\n\t\t) {\n\t\t\treturn \"meta\";\n\t\t}\n\t\treturn null;\n\t}\n\n\tprivate static getProducedCharCode(\n\t\tchord: ScanCodeChord,\n\t\tmapping: IScanCodeMapping,\n\t): string | null {\n\t\tif (!mapping) {\n\t\t\treturn null;\n\t\t}\n\t\tif (chord.ctrlKey && chord.shiftKey && chord.altKey) {\n\t\t\treturn mapping.withShiftAltGr;\n\t\t}\n\t\tif (chord.ctrlKey && chord.altKey) {\n\t\t\treturn mapping.withAltGr;\n\t\t}\n\t\tif (chord.shiftKey) {\n\t\t\treturn mapping.withShift;\n\t\t}\n\t\treturn mapping.value;\n\t}\n\n\tpublic static getProducedChar(\n\t\tchord: ScanCodeChord,\n\t\tmapping: IScanCodeMapping,\n\t): string {\n\t\tconst char = this.getProducedCharCode(chord, mapping);\n\t\tif (char === null || char.length === 0) {\n\t\t\treturn \" --- \";\n\t\t}\n\t\treturn \"  \" + char + \"  \";\n\t}\n}\n\nexport class WindowsKeyboardMapper implements IKeyboardMapper {\n\tprivate readonly _codeInfo: IScanCodeMapping[];\n\tprivate readonly _scanCodeToKeyCode: KeyCode[];\n\tprivate readonly _keyCodeToLabel: Array<string | null> = [];\n\tprivate readonly _keyCodeExists: boolean[];\n\n\tconstructor(\n\t\tprivate readonly _isUSStandard: boolean,\n\t\trawMappings: IWindowsKeyboardMapping,\n\t\tprivate readonly _mapAltGrToCtrlAlt: boolean,\n\t) {\n\t\tthis._scanCodeToKeyCode = [];\n\t\tthis._keyCodeToLabel = [];\n\t\tthis._keyCodeExists = [];\n\t\tthis._keyCodeToLabel[KeyCode.Unknown] = KeyCodeUtils.toString(\n\t\t\tKeyCode.Unknown,\n\t\t);\n\n\t\tfor (\n\t\t\tlet scanCode = ScanCode.None;\n\t\t\tscanCode < ScanCode.MAX_VALUE;\n\t\t\tscanCode++\n\t\t) {\n\t\t\tconst immutableKeyCode = IMMUTABLE_CODE_TO_KEY_CODE[scanCode];\n\t\t\tif (immutableKeyCode !== KeyCode.DependsOnKbLayout) {\n\t\t\t\tthis._scanCodeToKeyCode[scanCode] = immutableKeyCode;\n\t\t\t\tthis._keyCodeToLabel[immutableKeyCode] =\n\t\t\t\t\tKeyCodeUtils.toString(immutableKeyCode);\n\t\t\t\tthis._keyCodeExists[immutableKeyCode] = true;\n\t\t\t}\n\t\t}\n\n\t\tconst producesLetter: boolean[] = [];\n\t\tlet producesLetters = false;\n\n\t\tthis._codeInfo = [];\n\t\tfor (const strCode in rawMappings) {\n\t\t\tif (rawMappings.hasOwnProperty(strCode)) {\n\t\t\t\tconst scanCode = ScanCodeUtils.toEnum(strCode);\n\t\t\t\tif (scanCode === ScanCode.None) {\n\t\t\t\t\tlog(`Unknown scanCode ${strCode} in mapping.`);\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tconst rawMapping = rawMappings[strCode];\n\n\t\t\t\tconst immutableKeyCode = IMMUTABLE_CODE_TO_KEY_CODE[scanCode];\n\t\t\t\tif (immutableKeyCode !== KeyCode.DependsOnKbLayout) {\n\t\t\t\t\tconst keyCode =\n\t\t\t\t\t\tNATIVE_WINDOWS_KEY_CODE_TO_KEY_CODE[rawMapping.vkey] ||\n\t\t\t\t\t\tKeyCode.Unknown;\n\t\t\t\t\tif (\n\t\t\t\t\t\tkeyCode === KeyCode.Unknown ||\n\t\t\t\t\t\timmutableKeyCode === keyCode\n\t\t\t\t\t) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\tif (scanCode !== ScanCode.NumpadComma) {\n\t\t\t\t\t\t// Looks like ScanCode.NumpadComma doesn't always map to KeyCode.NUMPAD_SEPARATOR\n\t\t\t\t\t\t// e.g. on POR - PTB\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tconst value = rawMapping.value;\n\t\t\t\tconst withShift = rawMapping.withShift;\n\t\t\t\tconst withAltGr = rawMapping.withAltGr;\n\t\t\t\tconst withShiftAltGr = rawMapping.withShiftAltGr;\n\t\t\t\tconst keyCode =\n\t\t\t\t\tNATIVE_WINDOWS_KEY_CODE_TO_KEY_CODE[rawMapping.vkey] ||\n\t\t\t\t\tKeyCode.Unknown;\n\n\t\t\t\tconst mapping: IScanCodeMapping = {\n\t\t\t\t\tscanCode: scanCode,\n\t\t\t\t\tkeyCode: keyCode,\n\t\t\t\t\tvalue: value,\n\t\t\t\t\twithShift: withShift,\n\t\t\t\t\twithAltGr: withAltGr,\n\t\t\t\t\twithShiftAltGr: withShiftAltGr,\n\t\t\t\t};\n\t\t\t\tthis._codeInfo[scanCode] = mapping;\n\t\t\t\tthis._scanCodeToKeyCode[scanCode] = keyCode;\n\n\t\t\t\tif (keyCode === KeyCode.Unknown) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tthis._keyCodeExists[keyCode] = true;\n\n\t\t\t\tif (value.length === 0) {\n\t\t\t\t\t// This key does not produce strings\n\t\t\t\t\tthis._keyCodeToLabel[keyCode] = null;\n\t\t\t\t} else if (value.length > 1) {\n\t\t\t\t\t// This key produces a letter representable with multiple UTF-16 code units.\n\t\t\t\t\tthis._keyCodeToLabel[keyCode] = value;\n\t\t\t\t} else {\n\t\t\t\t\tconst charCode = value.charCodeAt(0);\n\n\t\t\t\t\tif (charCode >= CharCode.a && charCode <= CharCode.z) {\n\t\t\t\t\t\tconst upperCaseValue =\n\t\t\t\t\t\t\tCharCode.A + (charCode - CharCode.a);\n\t\t\t\t\t\tproducesLetter[upperCaseValue] = true;\n\t\t\t\t\t\tproducesLetters = true;\n\t\t\t\t\t\tthis._keyCodeToLabel[keyCode] = String.fromCharCode(\n\t\t\t\t\t\t\tCharCode.A + (charCode - CharCode.a),\n\t\t\t\t\t\t);\n\t\t\t\t\t} else if (\n\t\t\t\t\t\tcharCode >= CharCode.A &&\n\t\t\t\t\t\tcharCode <= CharCode.Z\n\t\t\t\t\t) {\n\t\t\t\t\t\tproducesLetter[charCode] = true;\n\t\t\t\t\t\tproducesLetters = true;\n\t\t\t\t\t\tthis._keyCodeToLabel[keyCode] = value;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis._keyCodeToLabel[keyCode] = value;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Handle keyboard layouts where latin characters are not produced e.g. Cyrillic\n\t\tconst _registerLetterIfMissing = (\n\t\t\tcharCode: CharCode,\n\t\t\tkeyCode: KeyCode,\n\t\t): void => {\n\t\t\tif (!producesLetter[charCode]) {\n\t\t\t\tthis._keyCodeToLabel[keyCode] = String.fromCharCode(charCode);\n\t\t\t}\n\t\t};\n\t\t_registerLetterIfMissing(CharCode.A, KeyCode.KeyA);\n\t\t_registerLetterIfMissing(CharCode.B, KeyCode.KeyB);\n\t\t_registerLetterIfMissing(CharCode.C, KeyCode.KeyC);\n\t\t_registerLetterIfMissing(CharCode.D, KeyCode.KeyD);\n\t\t_registerLetterIfMissing(CharCode.E, KeyCode.KeyE);\n\t\t_registerLetterIfMissing(CharCode.F, KeyCode.KeyF);\n\t\t_registerLetterIfMissing(CharCode.G, KeyCode.KeyG);\n\t\t_registerLetterIfMissing(CharCode.H, KeyCode.KeyH);\n\t\t_registerLetterIfMissing(CharCode.I, KeyCode.KeyI);\n\t\t_registerLetterIfMissing(CharCode.J, KeyCode.KeyJ);\n\t\t_registerLetterIfMissing(CharCode.K, KeyCode.KeyK);\n\t\t_registerLetterIfMissing(CharCode.L, KeyCode.KeyL);\n\t\t_registerLetterIfMissing(CharCode.M, KeyCode.KeyM);\n\t\t_registerLetterIfMissing(CharCode.N, KeyCode.KeyN);\n\t\t_registerLetterIfMissing(CharCode.O, KeyCode.KeyO);\n\t\t_registerLetterIfMissing(CharCode.P, KeyCode.KeyP);\n\t\t_registerLetterIfMissing(CharCode.Q, KeyCode.KeyQ);\n\t\t_registerLetterIfMissing(CharCode.R, KeyCode.KeyR);\n\t\t_registerLetterIfMissing(CharCode.S, KeyCode.KeyS);\n\t\t_registerLetterIfMissing(CharCode.T, KeyCode.KeyT);\n\t\t_registerLetterIfMissing(CharCode.U, KeyCode.KeyU);\n\t\t_registerLetterIfMissing(CharCode.V, KeyCode.KeyV);\n\t\t_registerLetterIfMissing(CharCode.W, KeyCode.KeyW);\n\t\t_registerLetterIfMissing(CharCode.X, KeyCode.KeyX);\n\t\t_registerLetterIfMissing(CharCode.Y, KeyCode.KeyY);\n\t\t_registerLetterIfMissing(CharCode.Z, KeyCode.KeyZ);\n\n\t\tif (!producesLetters) {\n\t\t\t// Since this keyboard layout produces no latin letters at all, most of the UI will use the\n\t\t\t// US kb layout equivalent for UI labels, so also try to render other keys with the US labels\n\t\t\t// for consistency...\n\t\t\tconst _registerLabel = (\n\t\t\t\tkeyCode: KeyCode,\n\t\t\t\tcharCode: CharCode,\n\t\t\t): void => {\n\t\t\t\t// const existingLabel = this._keyCodeToLabel[keyCode];\n\t\t\t\t// const existingCharCode = (existingLabel ? existingLabel.charCodeAt(0) : CharCode.Null);\n\t\t\t\t// if (existingCharCode < 32 || existingCharCode > 126) {\n\t\t\t\tthis._keyCodeToLabel[keyCode] = String.fromCharCode(charCode);\n\t\t\t\t// }\n\t\t\t};\n\t\t\t_registerLabel(KeyCode.Semicolon, CharCode.Semicolon);\n\t\t\t_registerLabel(KeyCode.Equal, CharCode.Equals);\n\t\t\t_registerLabel(KeyCode.Comma, CharCode.Comma);\n\t\t\t_registerLabel(KeyCode.Minus, CharCode.Dash);\n\t\t\t_registerLabel(KeyCode.Period, CharCode.Period);\n\t\t\t_registerLabel(KeyCode.Slash, CharCode.Slash);\n\t\t\t_registerLabel(KeyCode.Backquote, CharCode.BackTick);\n\t\t\t_registerLabel(KeyCode.BracketLeft, CharCode.OpenSquareBracket);\n\t\t\t_registerLabel(KeyCode.Backslash, CharCode.Backslash);\n\t\t\t_registerLabel(KeyCode.BracketRight, CharCode.CloseSquareBracket);\n\t\t\t_registerLabel(KeyCode.Quote, CharCode.SingleQuote);\n\t\t}\n\t}\n\n\tpublic dumpDebugInfo(): string {\n\t\tconst result: string[] = [];\n\n\t\tconst immutableSamples = [ScanCode.ArrowUp, ScanCode.Numpad0];\n\n\t\tlet cnt = 0;\n\t\tresult.push(\n\t\t\t`-----------------------------------------------------------------------------------------------------------------------------------------`,\n\t\t);\n\t\tfor (\n\t\t\tlet scanCode = ScanCode.None;\n\t\t\tscanCode < ScanCode.MAX_VALUE;\n\t\t\tscanCode++\n\t\t) {\n\t\t\tif (\n\t\t\t\tIMMUTABLE_CODE_TO_KEY_CODE[scanCode] !==\n\t\t\t\tKeyCode.DependsOnKbLayout\n\t\t\t) {\n\t\t\t\tif (immutableSamples.indexOf(scanCode) === -1) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (cnt % 6 === 0) {\n\t\t\t\tresult.push(\n\t\t\t\t\t`|       HW Code combination      |  Key  |    KeyCode combination    |          UI label         |        User settings       | WYSIWYG |`,\n\t\t\t\t);\n\t\t\t\tresult.push(\n\t\t\t\t\t`-----------------------------------------------------------------------------------------------------------------------------------------`,\n\t\t\t\t);\n\t\t\t}\n\t\t\tcnt++;\n\n\t\t\tconst mapping = this._codeInfo[scanCode];\n\t\t\tconst strCode = ScanCodeUtils.toString(scanCode);\n\n\t\t\tconst mods = [0b000, 0b010, 0b101, 0b111];\n\t\t\tfor (const mod of mods) {\n\t\t\t\tconst ctrlKey = mod & 0b001 ? true : false;\n\t\t\t\tconst shiftKey = mod & 0b010 ? true : false;\n\t\t\t\tconst altKey = mod & 0b100 ? true : false;\n\t\t\t\tconst scanCodeChord = new ScanCodeChord(\n\t\t\t\t\tctrlKey,\n\t\t\t\t\tshiftKey,\n\t\t\t\t\taltKey,\n\t\t\t\t\tfalse,\n\t\t\t\t\tscanCode,\n\t\t\t\t);\n\t\t\t\tconst keyCodeChord = this._resolveChord(scanCodeChord);\n\t\t\t\tconst strKeyCode = keyCodeChord\n\t\t\t\t\t? KeyCodeUtils.toString(keyCodeChord.keyCode)\n\t\t\t\t\t: null;\n\t\t\t\tconst resolvedKb = keyCodeChord\n\t\t\t\t\t? new WindowsNativeResolvedKeybinding(this, [keyCodeChord])\n\t\t\t\t\t: null;\n\n\t\t\t\tconst outScanCode = `${ctrlKey ? \"Ctrl+\" : \"\"}${shiftKey ? \"Shift+\" : \"\"}${altKey ? \"Alt+\" : \"\"}${strCode}`;\n\t\t\t\tconst ariaLabel = resolvedKb ? resolvedKb.getAriaLabel() : null;\n\t\t\t\tconst outUILabel = ariaLabel\n\t\t\t\t\t? ariaLabel.replace(/Control\\+/, \"Ctrl+\")\n\t\t\t\t\t: null;\n\t\t\t\tconst outUserSettings = resolvedKb\n\t\t\t\t\t? resolvedKb.getUserSettingsLabel()\n\t\t\t\t\t: null;\n\t\t\t\tconst outKey = WindowsNativeResolvedKeybinding.getProducedChar(\n\t\t\t\t\tscanCodeChord,\n\t\t\t\t\tmapping,\n\t\t\t\t);\n\t\t\t\tconst outKb = strKeyCode\n\t\t\t\t\t? `${ctrlKey ? \"Ctrl+\" : \"\"}${shiftKey ? \"Shift+\" : \"\"}${altKey ? \"Alt+\" : \"\"}${strKeyCode}`\n\t\t\t\t\t: null;\n\t\t\t\tconst isWYSIWYG = resolvedKb ? resolvedKb.isWYSIWYG() : false;\n\t\t\t\tconst outWYSIWYG = isWYSIWYG ? \"       \" : \"   NO  \";\n\t\t\t\tresult.push(\n\t\t\t\t\t`| ${this._leftPad(outScanCode, 30)} | ${outKey} | ${this._leftPad(outKb, 25)} | ${this._leftPad(outUILabel, 25)} |  ${this._leftPad(outUserSettings, 25)} | ${outWYSIWYG} |`,\n\t\t\t\t);\n\t\t\t}\n\t\t\tresult.push(\n\t\t\t\t`-----------------------------------------------------------------------------------------------------------------------------------------`,\n\t\t\t);\n\t\t}\n\n\t\treturn result.join(\"\\n\");\n\t}\n\n\tprivate _leftPad(str: string | null, cnt: number): string {\n\t\tif (str === null) {\n\t\t\tstr = \"null\";\n\t\t}\n\t\twhile (str.length < cnt) {\n\t\t\tstr = \" \" + str;\n\t\t}\n\t\treturn str;\n\t}\n\n\tpublic getUILabelForKeyCode(keyCode: KeyCode): string {\n\t\treturn this._getLabelForKeyCode(keyCode);\n\t}\n\n\tpublic getAriaLabelForKeyCode(keyCode: KeyCode): string {\n\t\treturn this._getLabelForKeyCode(keyCode);\n\t}\n\n\tpublic getUserSettingsLabelForKeyCode(keyCode: KeyCode): string {\n\t\tif (this._isUSStandard) {\n\t\t\treturn KeyCodeUtils.toUserSettingsUS(keyCode);\n\t\t}\n\t\treturn KeyCodeUtils.toUserSettingsGeneral(keyCode);\n\t}\n\n\tpublic getElectronAcceleratorForKeyBinding(\n\t\tchord: KeyCodeChord,\n\t): string | null {\n\t\treturn KeyCodeUtils.toElectronAccelerator(chord.keyCode);\n\t}\n\n\tprivate _getLabelForKeyCode(keyCode: KeyCode): string {\n\t\treturn (\n\t\t\tthis._keyCodeToLabel[keyCode] ||\n\t\t\tKeyCodeUtils.toString(KeyCode.Unknown)\n\t\t);\n\t}\n\n\tpublic resolveKeyboardEvent(\n\t\tkeyboardEvent: IKeyboardEvent,\n\t): WindowsNativeResolvedKeybinding {\n\t\tconst ctrlKey =\n\t\t\tkeyboardEvent.ctrlKey ||\n\t\t\t(this._mapAltGrToCtrlAlt && keyboardEvent.altGraphKey);\n\t\tconst altKey =\n\t\t\tkeyboardEvent.altKey ||\n\t\t\t(this._mapAltGrToCtrlAlt && keyboardEvent.altGraphKey);\n\t\tconst chord = new KeyCodeChord(\n\t\t\tctrlKey,\n\t\t\tkeyboardEvent.shiftKey,\n\t\t\taltKey,\n\t\t\tkeyboardEvent.metaKey,\n\t\t\tkeyboardEvent.keyCode,\n\t\t);\n\t\treturn new WindowsNativeResolvedKeybinding(this, [chord]);\n\t}\n\n\tprivate _resolveChord(chord: Chord | null): KeyCodeChord | null {\n\t\tif (!chord) {\n\t\t\treturn null;\n\t\t}\n\t\tif (chord instanceof KeyCodeChord) {\n\t\t\tif (!this._keyCodeExists[chord.keyCode]) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\treturn chord;\n\t\t}\n\t\tconst keyCode =\n\t\t\tthis._scanCodeToKeyCode[chord.scanCode] || KeyCode.Unknown;\n\t\tif (keyCode === KeyCode.Unknown || !this._keyCodeExists[keyCode]) {\n\t\t\treturn null;\n\t\t}\n\t\treturn new KeyCodeChord(\n\t\t\tchord.ctrlKey,\n\t\t\tchord.shiftKey,\n\t\t\tchord.altKey,\n\t\t\tchord.metaKey,\n\t\t\tkeyCode,\n\t\t);\n\t}\n\n\tpublic resolveKeybinding(keybinding: Keybinding): ResolvedKeybinding[] {\n\t\tconst chords: KeyCodeChord[] = toEmptyArrayIfContainsNull(\n\t\t\tkeybinding.chords.map((chord) => this._resolveChord(chord)),\n\t\t);\n\t\tif (chords.length > 0) {\n\t\t\treturn [new WindowsNativeResolvedKeybinding(this, chords)];\n\t\t}\n\t\treturn [];\n\t}\n}\n"],
  "mappings": "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",
  "names": ["keyCode"]
}
