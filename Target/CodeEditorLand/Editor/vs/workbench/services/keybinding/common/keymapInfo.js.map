{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/keybinding/common/keymapInfo.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { isLinux, isWindows } from \"../../../../base/common/platform.js\";\nimport {\n\ttype IKeyboardLayoutInfo,\n\tgetKeyboardLayoutId,\n} from \"../../../../platform/keyboardLayout/common/keyboardLayout.js\";\n\nfunction deserializeMapping(serializedMapping: ISerializedMapping) {\n\tconst mapping = serializedMapping;\n\n\tconst ret: { [key: string]: any } = {};\n\tfor (const key in mapping) {\n\t\tconst result: (string | number)[] = mapping[key];\n\t\tif (result.length) {\n\t\t\tconst value = result[0];\n\t\t\tconst withShift = result[1];\n\t\t\tconst withAltGr = result[2];\n\t\t\tconst withShiftAltGr = result[3];\n\t\t\tconst mask = Number(result[4]);\n\t\t\tconst vkey = result.length === 6 ? result[5] : undefined;\n\t\t\tret[key] = {\n\t\t\t\tvalue: value,\n\t\t\t\tvkey: vkey,\n\t\t\t\twithShift: withShift,\n\t\t\t\twithAltGr: withAltGr,\n\t\t\t\twithShiftAltGr: withShiftAltGr,\n\t\t\t\tvalueIsDeadKey: (mask & 1) > 0,\n\t\t\t\twithShiftIsDeadKey: (mask & 2) > 0,\n\t\t\t\twithAltGrIsDeadKey: (mask & 4) > 0,\n\t\t\t\twithShiftAltGrIsDeadKey: (mask & 8) > 0,\n\t\t\t};\n\t\t} else {\n\t\t\tret[key] = {\n\t\t\t\tvalue: \"\",\n\t\t\t\tvalueIsDeadKey: false,\n\t\t\t\twithShift: \"\",\n\t\t\t\twithShiftIsDeadKey: false,\n\t\t\t\twithAltGr: \"\",\n\t\t\t\twithAltGrIsDeadKey: false,\n\t\t\t\twithShiftAltGr: \"\",\n\t\t\t\twithShiftAltGrIsDeadKey: false,\n\t\t\t};\n\t\t}\n\t}\n\n\treturn ret;\n}\n\nexport interface IRawMixedKeyboardMapping {\n\t[key: string]: {\n\t\tvalue: string;\n\t\twithShift: string;\n\t\twithAltGr: string;\n\t\twithShiftAltGr: string;\n\t\tvalueIsDeadKey?: boolean;\n\t\twithShiftIsDeadKey?: boolean;\n\t\twithAltGrIsDeadKey?: boolean;\n\t\twithShiftAltGrIsDeadKey?: boolean;\n\t};\n}\n\ninterface ISerializedMapping {\n\t[key: string]: (string | number)[];\n}\n\nexport interface IKeymapInfo {\n\tlayout: IKeyboardLayoutInfo;\n\tsecondaryLayouts: IKeyboardLayoutInfo[];\n\tmapping: ISerializedMapping;\n\tisUserKeyboardLayout?: boolean;\n}\n\nexport class KeymapInfo {\n\tmapping: IRawMixedKeyboardMapping;\n\tisUserKeyboardLayout: boolean;\n\n\tconstructor(\n\t\tpublic layout: IKeyboardLayoutInfo,\n\t\tpublic secondaryLayouts: IKeyboardLayoutInfo[],\n\t\tkeyboardMapping: ISerializedMapping,\n\t\tisUserKeyboardLayout?: boolean,\n\t) {\n\t\tthis.mapping = deserializeMapping(keyboardMapping);\n\t\tthis.isUserKeyboardLayout = !!isUserKeyboardLayout;\n\t\tthis.layout.isUserKeyboardLayout = !!isUserKeyboardLayout;\n\t}\n\n\tstatic createKeyboardLayoutFromDebugInfo(\n\t\tlayout: IKeyboardLayoutInfo,\n\t\tvalue: IRawMixedKeyboardMapping,\n\t\tisUserKeyboardLayout?: boolean,\n\t): KeymapInfo {\n\t\tconst keyboardLayoutInfo = new KeymapInfo(layout, [], {}, true);\n\t\tkeyboardLayoutInfo.mapping = value;\n\t\treturn keyboardLayoutInfo;\n\t}\n\n\tupdate(other: KeymapInfo) {\n\t\tthis.layout = other.layout;\n\t\tthis.secondaryLayouts = other.secondaryLayouts;\n\t\tthis.mapping = other.mapping;\n\t\tthis.isUserKeyboardLayout = other.isUserKeyboardLayout;\n\t\tthis.layout.isUserKeyboardLayout = other.isUserKeyboardLayout;\n\t}\n\n\tgetScore(other: IRawMixedKeyboardMapping): number {\n\t\tlet score = 0;\n\t\tfor (const key in other) {\n\t\t\tif (isWindows && (key === \"Backslash\" || key === \"KeyQ\")) {\n\t\t\t\t// keymap from Chromium is probably wrong.\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif (isLinux && (key === \"Backspace\" || key === \"Escape\")) {\n\t\t\t\t// native keymap doesn't align with keyboard event\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tconst currentMapping = this.mapping[key];\n\n\t\t\tif (currentMapping === undefined) {\n\t\t\t\tscore -= 1;\n\t\t\t}\n\n\t\t\tconst otherMapping = other[key];\n\n\t\t\tif (\n\t\t\t\tcurrentMapping &&\n\t\t\t\totherMapping &&\n\t\t\t\tcurrentMapping.value !== otherMapping.value\n\t\t\t) {\n\t\t\t\tscore -= 1;\n\t\t\t}\n\t\t}\n\n\t\treturn score;\n\t}\n\n\tequal(other: KeymapInfo): boolean {\n\t\tif (this.isUserKeyboardLayout !== other.isUserKeyboardLayout) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (\n\t\t\tgetKeyboardLayoutId(this.layout) !==\n\t\t\tgetKeyboardLayoutId(other.layout)\n\t\t) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn this.fuzzyEqual(other.mapping);\n\t}\n\n\tfuzzyEqual(other: IRawMixedKeyboardMapping): boolean {\n\t\tfor (const key in other) {\n\t\t\tif (isWindows && (key === \"Backslash\" || key === \"KeyQ\")) {\n\t\t\t\t// keymap from Chromium is probably wrong.\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (this.mapping[key] === undefined) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\tconst currentMapping = this.mapping[key];\n\t\t\tconst otherMapping = other[key];\n\n\t\t\tif (currentMapping.value !== otherMapping.value) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\treturn true;\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
