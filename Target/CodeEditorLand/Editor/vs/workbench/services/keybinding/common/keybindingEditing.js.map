{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/keybinding/common/keybindingEditing.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Queue } from \"../../../../base/common/async.js\";\nimport * as json from \"../../../../base/common/json.js\";\nimport { setProperty } from \"../../../../base/common/jsonEdit.js\";\nimport type { Edit } from \"../../../../base/common/jsonFormatter.js\";\nimport {\n\tDisposable,\n\ttype IReference,\n} from \"../../../../base/common/lifecycle.js\";\nimport * as objects from \"../../../../base/common/objects.js\";\nimport { EditOperation } from \"../../../../editor/common/core/editOperation.js\";\nimport { Range } from \"../../../../editor/common/core/range.js\";\nimport { Selection } from \"../../../../editor/common/core/selection.js\";\nimport type { ITextModel } from \"../../../../editor/common/model.js\";\nimport {\n\ttype IResolvedTextEditorModel,\n\tITextModelService,\n} from \"../../../../editor/common/services/resolverService.js\";\nimport { localize } from \"../../../../nls.js\";\nimport { ContextKeyExpr } from \"../../../../platform/contextkey/common/contextkey.js\";\nimport { IFileService } from \"../../../../platform/files/common/files.js\";\nimport {\n\tInstantiationType,\n\tregisterSingleton,\n} from \"../../../../platform/instantiation/common/extensions.js\";\nimport { createDecorator } from \"../../../../platform/instantiation/common/instantiation.js\";\nimport type { IUserFriendlyKeybinding } from \"../../../../platform/keybinding/common/keybinding.js\";\nimport type { ResolvedKeybindingItem } from \"../../../../platform/keybinding/common/resolvedKeybindingItem.js\";\nimport { ITextFileService } from \"../../textfile/common/textfiles.js\";\nimport { IUserDataProfileService } from \"../../userDataProfile/common/userDataProfile.js\";\n\nexport const IKeybindingEditingService =\n\tcreateDecorator<IKeybindingEditingService>(\"keybindingEditingService\");\n\nexport interface IKeybindingEditingService {\n\treadonly _serviceBrand: undefined;\n\n\taddKeybinding(\n\t\tkeybindingItem: ResolvedKeybindingItem,\n\t\tkey: string,\n\t\twhen: string | undefined,\n\t): Promise<void>;\n\n\teditKeybinding(\n\t\tkeybindingItem: ResolvedKeybindingItem,\n\t\tkey: string,\n\t\twhen: string | undefined,\n\t): Promise<void>;\n\n\tremoveKeybinding(keybindingItem: ResolvedKeybindingItem): Promise<void>;\n\n\tresetKeybinding(keybindingItem: ResolvedKeybindingItem): Promise<void>;\n}\n\nexport class KeybindingsEditingService\n\textends Disposable\n\timplements IKeybindingEditingService\n{\n\tpublic _serviceBrand: undefined;\n\tprivate queue: Queue<void>;\n\n\tconstructor(\n\t\t@ITextModelService private readonly textModelResolverService: ITextModelService,\n\t\t@ITextFileService private readonly textFileService: ITextFileService,\n\t\t@IFileService private readonly fileService: IFileService,\n\t\t@IUserDataProfileService private readonly userDataProfileService: IUserDataProfileService,\n\t) {\n\t\tsuper();\n\t\tthis.queue = new Queue<void>();\n\t}\n\n\taddKeybinding(\n\t\tkeybindingItem: ResolvedKeybindingItem,\n\t\tkey: string,\n\t\twhen: string | undefined,\n\t): Promise<void> {\n\t\treturn this.queue.queue(() =>\n\t\t\tthis.doEditKeybinding(keybindingItem, key, when, true),\n\t\t); // queue up writes to prevent race conditions\n\t}\n\n\teditKeybinding(\n\t\tkeybindingItem: ResolvedKeybindingItem,\n\t\tkey: string,\n\t\twhen: string | undefined,\n\t): Promise<void> {\n\t\treturn this.queue.queue(() =>\n\t\t\tthis.doEditKeybinding(keybindingItem, key, when, false),\n\t\t); // queue up writes to prevent race conditions\n\t}\n\n\tresetKeybinding(keybindingItem: ResolvedKeybindingItem): Promise<void> {\n\t\treturn this.queue.queue(() => this.doResetKeybinding(keybindingItem)); // queue up writes to prevent race conditions\n\t}\n\n\tremoveKeybinding(keybindingItem: ResolvedKeybindingItem): Promise<void> {\n\t\treturn this.queue.queue(() => this.doRemoveKeybinding(keybindingItem)); // queue up writes to prevent race conditions\n\t}\n\n\tprivate async doEditKeybinding(\n\t\tkeybindingItem: ResolvedKeybindingItem,\n\t\tkey: string,\n\t\twhen: string | undefined,\n\t\tadd: boolean,\n\t): Promise<void> {\n\t\tconst reference = await this.resolveAndValidate();\n\t\tconst model = reference.object.textEditorModel;\n\t\tif (add) {\n\t\t\tthis.updateKeybinding(keybindingItem, key, when, model, -1);\n\t\t} else {\n\t\t\tconst userKeybindingEntries = <IUserFriendlyKeybinding[]>(\n\t\t\t\tjson.parse(model.getValue())\n\t\t\t);\n\t\t\tconst userKeybindingEntryIndex = this.findUserKeybindingEntryIndex(\n\t\t\t\tkeybindingItem,\n\t\t\t\tuserKeybindingEntries,\n\t\t\t);\n\t\t\tthis.updateKeybinding(\n\t\t\t\tkeybindingItem,\n\t\t\t\tkey,\n\t\t\t\twhen,\n\t\t\t\tmodel,\n\t\t\t\tuserKeybindingEntryIndex,\n\t\t\t);\n\t\t\tif (keybindingItem.isDefault && keybindingItem.resolvedKeybinding) {\n\t\t\t\tthis.removeDefaultKeybinding(keybindingItem, model);\n\t\t\t}\n\t\t}\n\t\ttry {\n\t\t\tawait this.save();\n\t\t} finally {\n\t\t\treference.dispose();\n\t\t}\n\t}\n\n\tprivate async doRemoveKeybinding(\n\t\tkeybindingItem: ResolvedKeybindingItem,\n\t): Promise<void> {\n\t\tconst reference = await this.resolveAndValidate();\n\t\tconst model = reference.object.textEditorModel;\n\t\tif (keybindingItem.isDefault) {\n\t\t\tthis.removeDefaultKeybinding(keybindingItem, model);\n\t\t} else {\n\t\t\tthis.removeUserKeybinding(keybindingItem, model);\n\t\t}\n\t\ttry {\n\t\t\treturn await this.save();\n\t\t} finally {\n\t\t\treference.dispose();\n\t\t}\n\t}\n\n\tprivate async doResetKeybinding(\n\t\tkeybindingItem: ResolvedKeybindingItem,\n\t): Promise<void> {\n\t\tconst reference = await this.resolveAndValidate();\n\t\tconst model = reference.object.textEditorModel;\n\t\tif (!keybindingItem.isDefault) {\n\t\t\tthis.removeUserKeybinding(keybindingItem, model);\n\t\t\tthis.removeUnassignedDefaultKeybinding(keybindingItem, model);\n\t\t}\n\t\ttry {\n\t\t\treturn await this.save();\n\t\t} finally {\n\t\t\treference.dispose();\n\t\t}\n\t}\n\n\tprivate save(): Promise<any> {\n\t\treturn this.textFileService.save(\n\t\t\tthis.userDataProfileService.currentProfile.keybindingsResource,\n\t\t);\n\t}\n\n\tprivate updateKeybinding(\n\t\tkeybindingItem: ResolvedKeybindingItem,\n\t\tnewKey: string,\n\t\twhen: string | undefined,\n\t\tmodel: ITextModel,\n\t\tuserKeybindingEntryIndex: number,\n\t): void {\n\t\tconst { tabSize, insertSpaces } = model.getOptions();\n\t\tconst eol = model.getEOL();\n\t\tif (userKeybindingEntryIndex !== -1) {\n\t\t\t// Update the keybinding with new key\n\t\t\tthis.applyEditsToBuffer(\n\t\t\t\tsetProperty(\n\t\t\t\t\tmodel.getValue(),\n\t\t\t\t\t[userKeybindingEntryIndex, \"key\"],\n\t\t\t\t\tnewKey,\n\t\t\t\t\t{ tabSize, insertSpaces, eol },\n\t\t\t\t)[0],\n\t\t\t\tmodel,\n\t\t\t);\n\t\t\tconst edits = setProperty(\n\t\t\t\tmodel.getValue(),\n\t\t\t\t[userKeybindingEntryIndex, \"when\"],\n\t\t\t\twhen,\n\t\t\t\t{ tabSize, insertSpaces, eol },\n\t\t\t);\n\t\t\tif (edits.length > 0) {\n\t\t\t\tthis.applyEditsToBuffer(edits[0], model);\n\t\t\t}\n\t\t} else {\n\t\t\t// Add the new keybinding with new key\n\t\t\tthis.applyEditsToBuffer(\n\t\t\t\tsetProperty(\n\t\t\t\t\tmodel.getValue(),\n\t\t\t\t\t[-1],\n\t\t\t\t\tthis.asObject(newKey, keybindingItem.command, when, false),\n\t\t\t\t\t{ tabSize, insertSpaces, eol },\n\t\t\t\t)[0],\n\t\t\t\tmodel,\n\t\t\t);\n\t\t}\n\t}\n\n\tprivate removeUserKeybinding(\n\t\tkeybindingItem: ResolvedKeybindingItem,\n\t\tmodel: ITextModel,\n\t): void {\n\t\tconst { tabSize, insertSpaces } = model.getOptions();\n\t\tconst eol = model.getEOL();\n\t\tconst userKeybindingEntries = <IUserFriendlyKeybinding[]>(\n\t\t\tjson.parse(model.getValue())\n\t\t);\n\t\tconst userKeybindingEntryIndex = this.findUserKeybindingEntryIndex(\n\t\t\tkeybindingItem,\n\t\t\tuserKeybindingEntries,\n\t\t);\n\t\tif (userKeybindingEntryIndex !== -1) {\n\t\t\tthis.applyEditsToBuffer(\n\t\t\t\tsetProperty(\n\t\t\t\t\tmodel.getValue(),\n\t\t\t\t\t[userKeybindingEntryIndex],\n\t\t\t\t\tundefined,\n\t\t\t\t\t{ tabSize, insertSpaces, eol },\n\t\t\t\t)[0],\n\t\t\t\tmodel,\n\t\t\t);\n\t\t}\n\t}\n\n\tprivate removeDefaultKeybinding(\n\t\tkeybindingItem: ResolvedKeybindingItem,\n\t\tmodel: ITextModel,\n\t): void {\n\t\tconst { tabSize, insertSpaces } = model.getOptions();\n\t\tconst eol = model.getEOL();\n\t\tconst key = keybindingItem.resolvedKeybinding\n\t\t\t? keybindingItem.resolvedKeybinding.getUserSettingsLabel()\n\t\t\t: null;\n\t\tif (key) {\n\t\t\tconst entry: IUserFriendlyKeybinding = this.asObject(\n\t\t\t\tkey,\n\t\t\t\tkeybindingItem.command,\n\t\t\t\tkeybindingItem.when\n\t\t\t\t\t? keybindingItem.when.serialize()\n\t\t\t\t\t: undefined,\n\t\t\t\ttrue,\n\t\t\t);\n\t\t\tconst userKeybindingEntries = <IUserFriendlyKeybinding[]>(\n\t\t\t\tjson.parse(model.getValue())\n\t\t\t);\n\t\t\tif (userKeybindingEntries.every((e) => !this.areSame(e, entry))) {\n\t\t\t\tthis.applyEditsToBuffer(\n\t\t\t\t\tsetProperty(model.getValue(), [-1], entry, {\n\t\t\t\t\t\ttabSize,\n\t\t\t\t\t\tinsertSpaces,\n\t\t\t\t\t\teol,\n\t\t\t\t\t})[0],\n\t\t\t\t\tmodel,\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate removeUnassignedDefaultKeybinding(\n\t\tkeybindingItem: ResolvedKeybindingItem,\n\t\tmodel: ITextModel,\n\t): void {\n\t\tconst { tabSize, insertSpaces } = model.getOptions();\n\t\tconst eol = model.getEOL();\n\t\tconst userKeybindingEntries = <IUserFriendlyKeybinding[]>(\n\t\t\tjson.parse(model.getValue())\n\t\t);\n\t\tconst indices = this.findUnassignedDefaultKeybindingEntryIndex(\n\t\t\tkeybindingItem,\n\t\t\tuserKeybindingEntries,\n\t\t).reverse();\n\t\tfor (const index of indices) {\n\t\t\tthis.applyEditsToBuffer(\n\t\t\t\tsetProperty(model.getValue(), [index], undefined, {\n\t\t\t\t\ttabSize,\n\t\t\t\t\tinsertSpaces,\n\t\t\t\t\teol,\n\t\t\t\t})[0],\n\t\t\t\tmodel,\n\t\t\t);\n\t\t}\n\t}\n\n\tprivate findUserKeybindingEntryIndex(\n\t\tkeybindingItem: ResolvedKeybindingItem,\n\t\tuserKeybindingEntries: IUserFriendlyKeybinding[],\n\t): number {\n\t\tfor (let index = 0; index < userKeybindingEntries.length; index++) {\n\t\t\tconst keybinding = userKeybindingEntries[index];\n\t\t\tif (keybinding.command === keybindingItem.command) {\n\t\t\t\tif (!keybinding.when && !keybindingItem.when) {\n\t\t\t\t\treturn index;\n\t\t\t\t}\n\t\t\t\tif (keybinding.when && keybindingItem.when) {\n\t\t\t\t\tconst contextKeyExpr = ContextKeyExpr.deserialize(\n\t\t\t\t\t\tkeybinding.when,\n\t\t\t\t\t);\n\t\t\t\t\tif (\n\t\t\t\t\t\tcontextKeyExpr &&\n\t\t\t\t\t\tcontextKeyExpr.serialize() ===\n\t\t\t\t\t\t\tkeybindingItem.when.serialize()\n\t\t\t\t\t) {\n\t\t\t\t\t\treturn index;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn -1;\n\t}\n\n\tprivate findUnassignedDefaultKeybindingEntryIndex(\n\t\tkeybindingItem: ResolvedKeybindingItem,\n\t\tuserKeybindingEntries: IUserFriendlyKeybinding[],\n\t): number[] {\n\t\tconst indices: number[] = [];\n\t\tfor (let index = 0; index < userKeybindingEntries.length; index++) {\n\t\t\tif (\n\t\t\t\tuserKeybindingEntries[index].command ===\n\t\t\t\t`-${keybindingItem.command}`\n\t\t\t) {\n\t\t\t\tindices.push(index);\n\t\t\t}\n\t\t}\n\t\treturn indices;\n\t}\n\n\tprivate asObject(\n\t\tkey: string,\n\t\tcommand: string | null,\n\t\twhen: string | undefined,\n\t\tnegate: boolean,\n\t): any {\n\t\tconst object: any = { key };\n\t\tif (command) {\n\t\t\tobject[\"command\"] = negate ? `-${command}` : command;\n\t\t}\n\t\tif (when) {\n\t\t\tobject[\"when\"] = when;\n\t\t}\n\t\treturn object;\n\t}\n\n\tprivate areSame(\n\t\ta: IUserFriendlyKeybinding,\n\t\tb: IUserFriendlyKeybinding,\n\t): boolean {\n\t\tif (a.command !== b.command) {\n\t\t\treturn false;\n\t\t}\n\t\tif (a.key !== b.key) {\n\t\t\treturn false;\n\t\t}\n\t\tconst whenA = ContextKeyExpr.deserialize(a.when);\n\t\tconst whenB = ContextKeyExpr.deserialize(b.when);\n\t\tif ((whenA && !whenB) || (!whenA && whenB)) {\n\t\t\treturn false;\n\t\t}\n\t\tif (whenA && whenB && !whenA.equals(whenB)) {\n\t\t\treturn false;\n\t\t}\n\t\tif (!objects.equals(a.args, b.args)) {\n\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t}\n\n\tprivate applyEditsToBuffer(edit: Edit, model: ITextModel): void {\n\t\tconst startPosition = model.getPositionAt(edit.offset);\n\t\tconst endPosition = model.getPositionAt(edit.offset + edit.length);\n\t\tconst range = new Range(\n\t\t\tstartPosition.lineNumber,\n\t\t\tstartPosition.column,\n\t\t\tendPosition.lineNumber,\n\t\t\tendPosition.column,\n\t\t);\n\t\tconst currentText = model.getValueInRange(range);\n\t\tconst editOperation = currentText\n\t\t\t? EditOperation.replace(range, edit.content)\n\t\t\t: EditOperation.insert(startPosition, edit.content);\n\t\tmodel.pushEditOperations(\n\t\t\t[\n\t\t\t\tnew Selection(\n\t\t\t\t\tstartPosition.lineNumber,\n\t\t\t\t\tstartPosition.column,\n\t\t\t\t\tstartPosition.lineNumber,\n\t\t\t\t\tstartPosition.column,\n\t\t\t\t),\n\t\t\t],\n\t\t\t[editOperation],\n\t\t\t() => [],\n\t\t);\n\t}\n\n\tprivate async resolveModelReference(): Promise<\n\t\tIReference<IResolvedTextEditorModel>\n\t> {\n\t\tconst exists = await this.fileService.exists(\n\t\t\tthis.userDataProfileService.currentProfile.keybindingsResource,\n\t\t);\n\t\tif (!exists) {\n\t\t\tawait this.textFileService.write(\n\t\t\t\tthis.userDataProfileService.currentProfile.keybindingsResource,\n\t\t\t\tthis.getEmptyContent(),\n\t\t\t\t{ encoding: \"utf8\" },\n\t\t\t);\n\t\t}\n\t\treturn this.textModelResolverService.createModelReference(\n\t\t\tthis.userDataProfileService.currentProfile.keybindingsResource,\n\t\t);\n\t}\n\n\tprivate async resolveAndValidate(): Promise<\n\t\tIReference<IResolvedTextEditorModel>\n\t> {\n\t\t// Target cannot be dirty if not writing into buffer\n\t\tif (\n\t\t\tthis.textFileService.isDirty(\n\t\t\t\tthis.userDataProfileService.currentProfile.keybindingsResource,\n\t\t\t)\n\t\t) {\n\t\t\tthrow new Error(\n\t\t\t\tlocalize(\n\t\t\t\t\t\"errorKeybindingsFileDirty\",\n\t\t\t\t\t\"Unable to write because the keybindings configuration file has unsaved changes. Please save it first and then try again.\",\n\t\t\t\t),\n\t\t\t);\n\t\t}\n\n\t\tconst reference = await this.resolveModelReference();\n\t\tconst model = reference.object.textEditorModel;\n\t\tconst EOL = model.getEOL();\n\t\tif (model.getValue()) {\n\t\t\tconst parsed = this.parse(model);\n\t\t\tif (parsed.parseErrors.length) {\n\t\t\t\treference.dispose();\n\t\t\t\tthrow new Error(\n\t\t\t\t\tlocalize(\n\t\t\t\t\t\t\"parseErrors\",\n\t\t\t\t\t\t\"Unable to write to the keybindings configuration file. Please open it to correct errors/warnings in the file and try again.\",\n\t\t\t\t\t),\n\t\t\t\t);\n\t\t\t}\n\t\t\tif (parsed.result) {\n\t\t\t\tif (!Array.isArray(parsed.result)) {\n\t\t\t\t\treference.dispose();\n\t\t\t\t\tthrow new Error(\n\t\t\t\t\t\tlocalize(\n\t\t\t\t\t\t\t\"errorInvalidConfiguration\",\n\t\t\t\t\t\t\t\"Unable to write to the keybindings configuration file. It has an object which is not of type Array. Please open the file to clean up and try again.\",\n\t\t\t\t\t\t),\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tconst content = EOL + \"[]\";\n\t\t\t\tthis.applyEditsToBuffer(\n\t\t\t\t\t{\n\t\t\t\t\t\tcontent,\n\t\t\t\t\t\tlength: content.length,\n\t\t\t\t\t\toffset: model.getValue().length,\n\t\t\t\t\t},\n\t\t\t\t\tmodel,\n\t\t\t\t);\n\t\t\t}\n\t\t} else {\n\t\t\tconst content = this.getEmptyContent();\n\t\t\tthis.applyEditsToBuffer(\n\t\t\t\t{ content, length: content.length, offset: 0 },\n\t\t\t\tmodel,\n\t\t\t);\n\t\t}\n\t\treturn reference;\n\t}\n\n\tprivate parse(model: ITextModel): {\n\t\tresult: IUserFriendlyKeybinding[];\n\t\tparseErrors: json.ParseError[];\n\t} {\n\t\tconst parseErrors: json.ParseError[] = [];\n\t\tconst result = json.parse(model.getValue(), parseErrors, {\n\t\t\tallowTrailingComma: true,\n\t\t\tallowEmptyContent: true,\n\t\t});\n\t\treturn { result, parseErrors };\n\t}\n\n\tprivate getEmptyContent(): string {\n\t\treturn (\n\t\t\t\"// \" +\n\t\t\tlocalize(\n\t\t\t\t\"emptyKeybindingsHeader\",\n\t\t\t\t\"Place your key bindings in this file to override the defaults\",\n\t\t\t) +\n\t\t\t\"\\n[\\n]\"\n\t\t);\n\t}\n}\n\nregisterSingleton(\n\tIKeybindingEditingService,\n\tKeybindingsEditingService,\n\tInstantiationType.Delayed,\n);\n"],
  "mappings": "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",
  "names": []
}
