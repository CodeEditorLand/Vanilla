var l=Object.defineProperty;var g=Object.getOwnPropertyDescriptor;var c=(o,t,e,r)=>{for(var n=r>1?void 0:r?g(t,e):t,i=o.length-1,a;i>=0;i--)(a=o[i])&&(n=(r?a(t,e,n):a(n))||n);return r&&n&&l(t,e,n),n},s=(o,t)=>(e,r)=>t(e,r,o);import{localize as p}from"../../../../nls.js";import{createDecorator as u}from"../../../../platform/instantiation/common/instantiation.js";import{Memento as f}from"../../../common/memento.js";import{ITelemetryService as d}from"../../../../platform/telemetry/common/telemetry.js";import{IStorageService as v,StorageScope as S,StorageTarget as y}from"../../../../platform/storage/common/storage.js";import"../../../../base/common/actions.js";import{InstantiationType as T,registerSingleton as h}from"../../../../platform/instantiation/common/extensions.js";import{IConfigurationService as I}from"../../../../platform/configuration/common/configuration.js";import{IProductService as C}from"../../../../platform/product/common/productService.js";import"../../../../platform/assignment/common/assignment.js";import{Registry as x}from"../../../../platform/registry/common/platform.js";import{BaseAssignmentService as b}from"../../../../platform/assignment/common/assignmentService.js";import{workbenchConfigurationNodeBase as A}from"../../../common/configuration.js";import{Extensions as E,ConfigurationScope as P}from"../../../../platform/configuration/common/configurationRegistry.js";import{IEnvironmentService as w}from"../../../../platform/environment/common/environment.js";const M=u("WorkbenchAssignmentService");class O{constructor(t){this.memento=t;this.mementoObj=t.getMemento(S.APPLICATION,y.MACHINE)}mementoObj;async getValue(t,e){return await this.mementoObj[t]||e}setValue(t,e){this.mementoObj[t]=e,this.memento.saveMemento()}}class N{constructor(t,e){this.telemetryService=t;this.productService=e}_lastAssignmentContext;get assignmentContext(){return this._lastAssignmentContext?.split(";")}setSharedProperty(t,e){t===this.productService.tasConfig?.assignmentContextTelemetryPropertyName&&(this._lastAssignmentContext=e),this.telemetryService.setExperimentProperty(t,e)}postEvent(t,e){const r={};for(const[n,i]of e.entries())r[n]=i;this.telemetryService.publicLog(t,r)}}let m=class extends b{constructor(e,r,n,i,a){super(e.machineId,n,i,a,new N(e,i),new O(new f("experiment.service.memento",r)));this.telemetryService=e}get experimentsEnabled(){return this.configurationService.getValue("workbench.enableExperiments")===!0}async getTreatment(e){const r=await super.getTreatment(e);return this.telemetryService.publicLog2("tasClientReadTreatmentComplete",{treatmentName:e,treatmentValue:JSON.stringify(r)}),r}async getCurrentExperiments(){if(this.tasClient&&this.experimentsEnabled)return await this.tasClient,this.telemetry?.assignmentContext}};m=c([s(0,d),s(1,v),s(2,I),s(3,C),s(4,w)],m),h(M,m,T.Delayed);const V=x.as(E.Configuration);V.registerConfiguration({...A,properties:{"workbench.enableExperiments":{type:"boolean",description:p("workbench.enableExperiments","Fetches experiments to run from a Microsoft online service."),default:!0,scope:P.APPLICATION,restricted:!0,tags:["usesOnlineServices"]}}});export{M as IWorkbenchAssignmentService,m as WorkbenchAssignmentService};
