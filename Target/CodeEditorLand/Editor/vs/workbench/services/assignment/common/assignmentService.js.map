{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/assignment/common/assignmentService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { localize } from '../../../../nls.js';\nimport { createDecorator } from '../../../../platform/instantiation/common/instantiation.js';\nimport type { IKeyValueStorage, IExperimentationTelemetry } from 'tas-client-umd';\nimport { MementoObject, Memento } from '../../../common/memento.js';\nimport { ITelemetryService } from '../../../../platform/telemetry/common/telemetry.js';\nimport { IStorageService, StorageScope, StorageTarget } from '../../../../platform/storage/common/storage.js';\nimport { ITelemetryData } from '../../../../base/common/actions.js';\nimport { InstantiationType, registerSingleton } from '../../../../platform/instantiation/common/extensions.js';\nimport { IConfigurationService } from '../../../../platform/configuration/common/configuration.js';\nimport { IProductService } from '../../../../platform/product/common/productService.js';\nimport { IAssignmentService } from '../../../../platform/assignment/common/assignment.js';\nimport { Registry } from '../../../../platform/registry/common/platform.js';\nimport { BaseAssignmentService } from '../../../../platform/assignment/common/assignmentService.js';\nimport { workbenchConfigurationNodeBase } from '../../../common/configuration.js';\nimport { IConfigurationRegistry, Extensions as ConfigurationExtensions, ConfigurationScope } from '../../../../platform/configuration/common/configurationRegistry.js';\nimport { IEnvironmentService } from '../../../../platform/environment/common/environment.js';\n\nexport const IWorkbenchAssignmentService = createDecorator<IWorkbenchAssignmentService>('WorkbenchAssignmentService');\n\nexport interface IWorkbenchAssignmentService extends IAssignmentService {\n\tgetCurrentExperiments(): Promise<string[] | undefined>;\n}\n\nclass MementoKeyValueStorage implements IKeyValueStorage {\n\tprivate mementoObj: MementoObject;\n\tconstructor(private memento: Memento) {\n\t\tthis.mementoObj = memento.getMemento(StorageScope.APPLICATION, StorageTarget.MACHINE);\n\t}\n\n\tasync getValue<T>(key: string, defaultValue?: T | undefined): Promise<T | undefined> {\n\t\tconst value = await this.mementoObj[key];\n\t\treturn value || defaultValue;\n\t}\n\n\tsetValue<T>(key: string, value: T): void {\n\t\tthis.mementoObj[key] = value;\n\t\tthis.memento.saveMemento();\n\t}\n}\n\nclass WorkbenchAssignmentServiceTelemetry implements IExperimentationTelemetry {\n\tprivate _lastAssignmentContext: string | undefined;\n\tconstructor(\n\t\tprivate telemetryService: ITelemetryService,\n\t\tprivate productService: IProductService\n\t) { }\n\n\tget assignmentContext(): string[] | undefined {\n\t\treturn this._lastAssignmentContext?.split(';');\n\t}\n\n\t// __GDPR__COMMON__ \"abexp.assignmentcontext\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\" }\n\tsetSharedProperty(name: string, value: string): void {\n\t\tif (name === this.productService.tasConfig?.assignmentContextTelemetryPropertyName) {\n\t\t\tthis._lastAssignmentContext = value;\n\t\t}\n\n\t\tthis.telemetryService.setExperimentProperty(name, value);\n\t}\n\n\tpostEvent(eventName: string, props: Map<string, string>): void {\n\t\tconst data: ITelemetryData = {};\n\t\tfor (const [key, value] of props.entries()) {\n\t\t\tdata[key] = value;\n\t\t}\n\n\t\t/* __GDPR__\n\t\t\t\"query-expfeature\" : {\n\t\t\t\t\"owner\": \"sbatten\",\n\t\t\t\t\"comment\": \"Logs queries to the experiment service by feature for metric calculations\",\n\t\t\t\t\"ABExp.queriedFeature\": { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\", \"comment\": \"The experimental feature being queried\" }\n\t\t\t}\n\t\t*/\n\t\tthis.telemetryService.publicLog(eventName, data);\n\t}\n}\n\nexport class WorkbenchAssignmentService extends BaseAssignmentService {\n\tconstructor(\n\t\t@ITelemetryService private telemetryService: ITelemetryService,\n\t\t@IStorageService storageService: IStorageService,\n\t\t@IConfigurationService configurationService: IConfigurationService,\n\t\t@IProductService productService: IProductService,\n\t\t@IEnvironmentService environmentService: IEnvironmentService\n\t) {\n\n\t\tsuper(\n\t\t\ttelemetryService.machineId,\n\t\t\tconfigurationService,\n\t\t\tproductService,\n\t\t\tenvironmentService,\n\t\t\tnew WorkbenchAssignmentServiceTelemetry(telemetryService, productService),\n\t\t\tnew MementoKeyValueStorage(new Memento('experiment.service.memento', storageService))\n\t\t);\n\t}\n\n\tprotected override get experimentsEnabled(): boolean {\n\t\treturn this.configurationService.getValue('workbench.enableExperiments') === true;\n\t}\n\n\toverride async getTreatment<T extends string | number | boolean>(name: string): Promise<T | undefined> {\n\t\tconst result = await super.getTreatment<T>(name);\n\t\ttype TASClientReadTreatmentData = {\n\t\t\ttreatmentName: string;\n\t\t\ttreatmentValue: string;\n\t\t};\n\n\t\ttype TASClientReadTreatmentClassification = {\n\t\t\towner: 'sbatten';\n\t\t\tcomment: 'Logged when a treatment value is read from the experiment service';\n\t\t\ttreatmentValue: { classification: 'SystemMetaData'; purpose: 'PerformanceAndHealth'; comment: 'The value of the read treatment' };\n\t\t\ttreatmentName: { classification: 'SystemMetaData'; purpose: 'PerformanceAndHealth'; comment: 'The name of the treatment that was read' };\n\t\t};\n\n\t\tthis.telemetryService.publicLog2<TASClientReadTreatmentData, TASClientReadTreatmentClassification>('tasClientReadTreatmentComplete',\n\t\t\t{ treatmentName: name, treatmentValue: JSON.stringify(result) });\n\n\t\treturn result;\n\t}\n\n\tasync getCurrentExperiments(): Promise<string[] | undefined> {\n\t\tif (!this.tasClient) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\tif (!this.experimentsEnabled) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\tawait this.tasClient;\n\n\t\treturn (this.telemetry as WorkbenchAssignmentServiceTelemetry)?.assignmentContext;\n\t}\n}\n\nregisterSingleton(IWorkbenchAssignmentService, WorkbenchAssignmentService, InstantiationType.Delayed);\nconst registry = Registry.as<IConfigurationRegistry>(ConfigurationExtensions.Configuration);\nregistry.registerConfiguration({\n\t...workbenchConfigurationNodeBase,\n\t'properties': {\n\t\t'workbench.enableExperiments': {\n\t\t\t'type': 'boolean',\n\t\t\t'description': localize('workbench.enableExperiments', \"Fetches experiments to run from a Microsoft online service.\"),\n\t\t\t'default': true,\n\t\t\t'scope': ConfigurationScope.APPLICATION,\n\t\t\t'restricted': true,\n\t\t\t'tags': ['usesOnlineServices']\n\t\t}\n\t}\n});\n"],
  "mappings": ";;;;;;;;;;;;AAKA,SAAS,gBAAgB;AACzB,SAAS,uBAAuB;AAEhC,SAAS,eAAe,eAAe;AACvC,SAAS,yBAAyB;AAClC,SAAS,iBAAiB,cAAc,qBAAqB;AAC7D,SAAS,sBAAsB;AAC/B,SAAS,mBAAmB,yBAAyB;AACrD,SAAS,6BAA6B;AACtC,SAAS,uBAAuB;AAChC,SAAS,0BAA0B;AACnC,SAAS,gBAAgB;AACzB,SAAS,6BAA6B;AACtC,SAAS,sCAAsC;AAC/C,SAAS,wBAAwB,cAAc,yBAAyB,0BAA0B;AAClG,SAAS,2BAA2B;AAE7B,MAAM,8BAA8B,gBAA6C,4BAA4B;AAMpH,MAAM,uBAAmD;AAAA,EAExD,YAAoB,SAAkB;AAAlB;AACnB,SAAK,aAAa,QAAQ,WAAW,aAAa,aAAa,cAAc,OAAO;AAAA,EACrF;AAAA,EAhCD,OA4ByD;AAAA;AAAA;AAAA,EAChD;AAAA,EAKR,MAAM,SAAY,KAAa,cAAsD;AACpF,UAAM,QAAQ,MAAM,KAAK,WAAW,GAAG;AACvC,WAAO,SAAS;AAAA,EACjB;AAAA,EAEA,SAAY,KAAa,OAAgB;AACxC,SAAK,WAAW,GAAG,IAAI;AACvB,SAAK,QAAQ,YAAY;AAAA,EAC1B;AACD;AAEA,MAAM,oCAAyE;AAAA,EAE9E,YACS,kBACA,gBACP;AAFO;AACA;AAAA,EACL;AAAA,EAlDL,OA6C+E;AAAA;AAAA;AAAA,EACtE;AAAA,EAMR,IAAI,oBAA0C;AAC7C,WAAO,KAAK,wBAAwB,MAAM,GAAG;AAAA,EAC9C;AAAA;AAAA,EAGA,kBAAkB,MAAc,OAAqB;AACpD,QAAI,SAAS,KAAK,eAAe,WAAW,wCAAwC;AACnF,WAAK,yBAAyB;AAAA,IAC/B;AAEA,SAAK,iBAAiB,sBAAsB,MAAM,KAAK;AAAA,EACxD;AAAA,EAEA,UAAU,WAAmB,OAAkC;AAC9D,UAAM,OAAuB,CAAC;AAC9B,eAAW,CAAC,KAAK,KAAK,KAAK,MAAM,QAAQ,GAAG;AAC3C,WAAK,GAAG,IAAI;AAAA,IACb;AASA,SAAK,iBAAiB,UAAU,WAAW,IAAI;AAAA,EAChD;AACD;AAEO,IAAM,6BAAN,cAAyC,sBAAsB;AAAA,EACrE,YAC4B,kBACV,gBACM,sBACN,gBACI,oBACpB;AAED;AAAA,MACC,iBAAiB;AAAA,MACjB;AAAA,MACA;AAAA,MACA;AAAA,MACA,IAAI,oCAAoC,kBAAkB,cAAc;AAAA,MACxE,IAAI,uBAAuB,IAAI,QAAQ,8BAA8B,cAAc,CAAC;AAAA,IACrF;AAd2B;AAAA,EAe5B;AAAA,EAnGD,OAkFsE;AAAA;AAAA;AAAA,EAmBrE,IAAuB,qBAA8B;AACpD,WAAO,KAAK,qBAAqB,SAAS,6BAA6B,MAAM;AAAA,EAC9E;AAAA,EAEA,MAAe,aAAkD,MAAsC;AACtG,UAAM,SAAS,MAAM,MAAM,aAAgB,IAAI;AAa/C,SAAK,iBAAiB;AAAA,MAA6E;AAAA,MAClG,EAAE,eAAe,MAAM,gBAAgB,KAAK,UAAU,MAAM,EAAE;AAAA,IAAC;AAEhE,WAAO;AAAA,EACR;AAAA,EAEA,MAAM,wBAAuD;AAC5D,QAAI,CAAC,KAAK,WAAW;AACpB,aAAO;AAAA,IACR;AAEA,QAAI,CAAC,KAAK,oBAAoB;AAC7B,aAAO;AAAA,IACR;AAEA,UAAM,KAAK;AAEX,WAAQ,KAAK,WAAmD;AAAA,EACjE;AACD;AAxDa,6BAAN;AAAA,EAEJ;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,GANU;AA0Db,kBAAkB,6BAA6B,4BAA4B,kBAAkB,OAAO;AACpG,MAAM,WAAW,SAAS,GAA2B,wBAAwB,aAAa;AAC1F,SAAS,sBAAsB;AAAA,EAC9B,GAAG;AAAA,EACH,cAAc;AAAA,IACb,+BAA+B;AAAA,MAC9B,QAAQ;AAAA,MACR,eAAe,SAAS,+BAA+B,6DAA6D;AAAA,MACpH,WAAW;AAAA,MACX,SAAS,mBAAmB;AAAA,MAC5B,cAAc;AAAA,MACd,QAAQ,CAAC,oBAAoB;AAAA,IAC9B;AAAA,EACD;AACD,CAAC;",
  "names": []
}
