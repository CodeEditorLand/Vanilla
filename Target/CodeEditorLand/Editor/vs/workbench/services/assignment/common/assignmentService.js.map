{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/assignment/common/assignmentService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport type {\n\tIExperimentationTelemetry,\n\tIKeyValueStorage,\n} from \"tas-client-umd\";\nimport type { ITelemetryData } from \"../../../../base/common/actions.js\";\nimport { localize } from \"../../../../nls.js\";\nimport type { IAssignmentService } from \"../../../../platform/assignment/common/assignment.js\";\nimport { BaseAssignmentService } from \"../../../../platform/assignment/common/assignmentService.js\";\nimport { IConfigurationService } from \"../../../../platform/configuration/common/configuration.js\";\nimport {\n\tExtensions as ConfigurationExtensions,\n\tConfigurationScope,\n\ttype IConfigurationRegistry,\n} from \"../../../../platform/configuration/common/configurationRegistry.js\";\nimport { IEnvironmentService } from \"../../../../platform/environment/common/environment.js\";\nimport {\n\tInstantiationType,\n\tregisterSingleton,\n} from \"../../../../platform/instantiation/common/extensions.js\";\nimport { createDecorator } from \"../../../../platform/instantiation/common/instantiation.js\";\nimport { IProductService } from \"../../../../platform/product/common/productService.js\";\nimport { Registry } from \"../../../../platform/registry/common/platform.js\";\nimport {\n\tIStorageService,\n\tStorageScope,\n\tStorageTarget,\n} from \"../../../../platform/storage/common/storage.js\";\nimport { ITelemetryService } from \"../../../../platform/telemetry/common/telemetry.js\";\nimport { workbenchConfigurationNodeBase } from \"../../../common/configuration.js\";\nimport { Memento, type MementoObject } from \"../../../common/memento.js\";\n\nexport const IWorkbenchAssignmentService =\n\tcreateDecorator<IWorkbenchAssignmentService>(\"WorkbenchAssignmentService\");\n\nexport interface IWorkbenchAssignmentService extends IAssignmentService {\n\tgetCurrentExperiments(): Promise<string[] | undefined>;\n}\n\nclass MementoKeyValueStorage implements IKeyValueStorage {\n\tprivate mementoObj: MementoObject;\n\tconstructor(private memento: Memento) {\n\t\tthis.mementoObj = memento.getMemento(\n\t\t\tStorageScope.APPLICATION,\n\t\t\tStorageTarget.MACHINE,\n\t\t);\n\t}\n\n\tasync getValue<T>(\n\t\tkey: string,\n\t\tdefaultValue?: T | undefined,\n\t): Promise<T | undefined> {\n\t\tconst value = await this.mementoObj[key];\n\t\treturn value || defaultValue;\n\t}\n\n\tsetValue<T>(key: string, value: T): void {\n\t\tthis.mementoObj[key] = value;\n\t\tthis.memento.saveMemento();\n\t}\n}\n\nclass WorkbenchAssignmentServiceTelemetry implements IExperimentationTelemetry {\n\tprivate _lastAssignmentContext: string | undefined;\n\tconstructor(\n\t\tprivate telemetryService: ITelemetryService,\n\t\tprivate productService: IProductService,\n\t) {}\n\n\tget assignmentContext(): string[] | undefined {\n\t\treturn this._lastAssignmentContext?.split(\";\");\n\t}\n\n\t// __GDPR__COMMON__ \"abexp.assignmentcontext\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\" }\n\tsetSharedProperty(name: string, value: string): void {\n\t\tif (\n\t\t\tname ===\n\t\t\tthis.productService.tasConfig\n\t\t\t\t?.assignmentContextTelemetryPropertyName\n\t\t) {\n\t\t\tthis._lastAssignmentContext = value;\n\t\t}\n\n\t\tthis.telemetryService.setExperimentProperty(name, value);\n\t}\n\n\tpostEvent(eventName: string, props: Map<string, string>): void {\n\t\tconst data: ITelemetryData = {};\n\t\tfor (const [key, value] of props.entries()) {\n\t\t\tdata[key] = value;\n\t\t}\n\n\t\t/* __GDPR__\n\t\t\t\"query-expfeature\" : {\n\t\t\t\t\"owner\": \"sbatten\",\n\t\t\t\t\"comment\": \"Logs queries to the experiment service by feature for metric calculations\",\n\t\t\t\t\"ABExp.queriedFeature\": { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\", \"comment\": \"The experimental feature being queried\" }\n\t\t\t}\n\t\t*/\n\t\tthis.telemetryService.publicLog(eventName, data);\n\t}\n}\n\nexport class WorkbenchAssignmentService extends BaseAssignmentService {\n\tconstructor(\n\t\t@ITelemetryService private telemetryService: ITelemetryService,\n\t\t@IStorageService storageService: IStorageService,\n\t\t@IConfigurationService configurationService: IConfigurationService,\n\t\t@IProductService productService: IProductService,\n\t\t@IEnvironmentService environmentService: IEnvironmentService,\n\t) {\n\t\tsuper(\n\t\t\ttelemetryService.machineId,\n\t\t\tconfigurationService,\n\t\t\tproductService,\n\t\t\tenvironmentService,\n\t\t\tnew WorkbenchAssignmentServiceTelemetry(\n\t\t\t\ttelemetryService,\n\t\t\t\tproductService,\n\t\t\t),\n\t\t\tnew MementoKeyValueStorage(\n\t\t\t\tnew Memento(\"experiment.service.memento\", storageService),\n\t\t\t),\n\t\t);\n\t}\n\n\tprotected override get experimentsEnabled(): boolean {\n\t\treturn (\n\t\t\tthis.configurationService.getValue(\n\t\t\t\t\"workbench.enableExperiments\",\n\t\t\t) === true\n\t\t);\n\t}\n\n\toverride async getTreatment<T extends string | number | boolean>(\n\t\tname: string,\n\t): Promise<T | undefined> {\n\t\tconst result = await super.getTreatment<T>(name);\n\t\ttype TASClientReadTreatmentData = {\n\t\t\ttreatmentName: string;\n\t\t\ttreatmentValue: string;\n\t\t};\n\n\t\ttype TASClientReadTreatmentClassification = {\n\t\t\towner: \"sbatten\";\n\t\t\tcomment: \"Logged when a treatment value is read from the experiment service\";\n\t\t\ttreatmentValue: {\n\t\t\t\tclassification: \"SystemMetaData\";\n\t\t\t\tpurpose: \"PerformanceAndHealth\";\n\t\t\t\tcomment: \"The value of the read treatment\";\n\t\t\t};\n\t\t\ttreatmentName: {\n\t\t\t\tclassification: \"SystemMetaData\";\n\t\t\t\tpurpose: \"PerformanceAndHealth\";\n\t\t\t\tcomment: \"The name of the treatment that was read\";\n\t\t\t};\n\t\t};\n\n\t\tthis.telemetryService.publicLog2<\n\t\t\tTASClientReadTreatmentData,\n\t\t\tTASClientReadTreatmentClassification\n\t\t>(\"tasClientReadTreatmentComplete\", {\n\t\t\ttreatmentName: name,\n\t\t\ttreatmentValue: JSON.stringify(result),\n\t\t});\n\n\t\treturn result;\n\t}\n\n\tasync getCurrentExperiments(): Promise<string[] | undefined> {\n\t\tif (!this.tasClient) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\tif (!this.experimentsEnabled) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\tawait this.tasClient;\n\n\t\treturn (this.telemetry as WorkbenchAssignmentServiceTelemetry)\n\t\t\t?.assignmentContext;\n\t}\n}\n\nregisterSingleton(\n\tIWorkbenchAssignmentService,\n\tWorkbenchAssignmentService,\n\tInstantiationType.Delayed,\n);\nconst registry = Registry.as<IConfigurationRegistry>(\n\tConfigurationExtensions.Configuration,\n);\nregistry.registerConfiguration({\n\t...workbenchConfigurationNodeBase,\n\tproperties: {\n\t\t\"workbench.enableExperiments\": {\n\t\t\ttype: \"boolean\",\n\t\t\tdescription: localize(\n\t\t\t\t\"workbench.enableExperiments\",\n\t\t\t\t\"Fetches experiments to run from a Microsoft online service.\",\n\t\t\t),\n\t\t\tdefault: true,\n\t\t\tscope: ConfigurationScope.APPLICATION,\n\t\t\trestricted: true,\n\t\t\ttags: [\"usesOnlineServices\"],\n\t\t},\n\t},\n});\n"],
  "mappings": "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",
  "names": []
}
