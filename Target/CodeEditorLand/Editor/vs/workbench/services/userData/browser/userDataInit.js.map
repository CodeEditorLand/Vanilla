{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/userData/browser/userDataInit.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { createDecorator, IInstantiationService } from '../../../../platform/instantiation/common/instantiation.js';\nimport { IWorkbenchContribution, IWorkbenchContributionsRegistry, Extensions } from '../../../common/contributions.js';\nimport { Registry } from '../../../../platform/registry/common/platform.js';\nimport { LifecyclePhase } from '../../lifecycle/common/lifecycle.js';\nimport { isWeb } from '../../../../base/common/platform.js';\nimport { IExtensionService } from '../../extensions/common/extensions.js';\nimport { mark } from '../../../../base/common/performance.js';\n\nexport interface IUserDataInitializer {\n\trequiresInitialization(): Promise<boolean>;\n\twhenInitializationFinished(): Promise<void>;\n\tinitializeRequiredResources(): Promise<void>;\n\tinitializeInstalledExtensions(instantiationService: IInstantiationService): Promise<void>;\n\tinitializeOtherResources(instantiationService: IInstantiationService): Promise<void>;\n}\n\nexport const IUserDataInitializationService = createDecorator<IUserDataInitializationService>('IUserDataInitializationService');\nexport interface IUserDataInitializationService extends IUserDataInitializer {\n\t_serviceBrand: any;\n}\n\nexport class UserDataInitializationService implements IUserDataInitializationService {\n\n\t_serviceBrand: any;\n\n\tconstructor(private readonly initializers: IUserDataInitializer[] = []) {\n\t}\n\n\tasync whenInitializationFinished(): Promise<void> {\n\t\tif (await this.requiresInitialization()) {\n\t\t\tawait Promise.all(this.initializers.map(initializer => initializer.whenInitializationFinished()));\n\t\t}\n\t}\n\n\tasync requiresInitialization(): Promise<boolean> {\n\t\treturn (await Promise.all(this.initializers.map(initializer => initializer.requiresInitialization()))).some(result => result);\n\t}\n\n\tasync initializeRequiredResources(): Promise<void> {\n\t\tif (await this.requiresInitialization()) {\n\t\t\tawait Promise.all(this.initializers.map(initializer => initializer.initializeRequiredResources()));\n\t\t}\n\t}\n\n\tasync initializeOtherResources(instantiationService: IInstantiationService): Promise<void> {\n\t\tif (await this.requiresInitialization()) {\n\t\t\tawait Promise.all(this.initializers.map(initializer => initializer.initializeOtherResources(instantiationService)));\n\t\t}\n\t}\n\n\tasync initializeInstalledExtensions(instantiationService: IInstantiationService): Promise<void> {\n\t\tif (await this.requiresInitialization()) {\n\t\t\tawait Promise.all(this.initializers.map(initializer => initializer.initializeInstalledExtensions(instantiationService)));\n\t\t}\n\t}\n\n}\n\nclass InitializeOtherResourcesContribution implements IWorkbenchContribution {\n\tconstructor(\n\t\t@IUserDataInitializationService userDataInitializeService: IUserDataInitializationService,\n\t\t@IInstantiationService instantiationService: IInstantiationService,\n\t\t@IExtensionService extensionService: IExtensionService\n\t) {\n\t\textensionService.whenInstalledExtensionsRegistered().then(() => this.initializeOtherResource(userDataInitializeService, instantiationService));\n\t}\n\n\tprivate async initializeOtherResource(userDataInitializeService: IUserDataInitializationService, instantiationService: IInstantiationService): Promise<void> {\n\t\tif (await userDataInitializeService.requiresInitialization()) {\n\t\t\tmark('code/willInitOtherUserData');\n\t\t\tawait userDataInitializeService.initializeOtherResources(instantiationService);\n\t\t\tmark('code/didInitOtherUserData');\n\t\t}\n\t}\n}\n\nif (isWeb) {\n\tconst workbenchRegistry = Registry.as<IWorkbenchContributionsRegistry>(Extensions.Workbench);\n\tworkbenchRegistry.registerWorkbenchContribution(InitializeOtherResourcesContribution, LifecyclePhase.Restored);\n}\n"],
  "mappings": ";;;;;;;;;;;;AAKA,SAAS,iBAAiB,6BAA6B;AACvD,SAAS,wBAAwB,iCAAiC,kBAAkB;AACpF,SAAS,gBAAgB;AACzB,SAAS,sBAAsB;AAC/B,SAAS,aAAa;AACtB,SAAS,yBAAyB;AAClC,SAAS,YAAY;AAUd,MAAM,iCAAiC,gBAAgD,gCAAgC;AAKvH,MAAM,8BAAwE;AAAA,EAIpF,YAA6B,eAAuC,CAAC,GAAG;AAA3C;AAAA,EAC7B;AAAA,EA/BD,OA0BqF;AAAA;AAAA;AAAA,EAEpF;AAAA,EAKA,MAAM,6BAA4C;AACjD,QAAI,MAAM,KAAK,uBAAuB,GAAG;AACxC,YAAM,QAAQ,IAAI,KAAK,aAAa,IAAI,iBAAe,YAAY,2BAA2B,CAAC,CAAC;AAAA,IACjG;AAAA,EACD;AAAA,EAEA,MAAM,yBAA2C;AAChD,YAAQ,MAAM,QAAQ,IAAI,KAAK,aAAa,IAAI,iBAAe,YAAY,uBAAuB,CAAC,CAAC,GAAG,KAAK,YAAU,MAAM;AAAA,EAC7H;AAAA,EAEA,MAAM,8BAA6C;AAClD,QAAI,MAAM,KAAK,uBAAuB,GAAG;AACxC,YAAM,QAAQ,IAAI,KAAK,aAAa,IAAI,iBAAe,YAAY,4BAA4B,CAAC,CAAC;AAAA,IAClG;AAAA,EACD;AAAA,EAEA,MAAM,yBAAyB,sBAA4D;AAC1F,QAAI,MAAM,KAAK,uBAAuB,GAAG;AACxC,YAAM,QAAQ,IAAI,KAAK,aAAa,IAAI,iBAAe,YAAY,yBAAyB,oBAAoB,CAAC,CAAC;AAAA,IACnH;AAAA,EACD;AAAA,EAEA,MAAM,8BAA8B,sBAA4D;AAC/F,QAAI,MAAM,KAAK,uBAAuB,GAAG;AACxC,YAAM,QAAQ,IAAI,KAAK,aAAa,IAAI,iBAAe,YAAY,8BAA8B,oBAAoB,CAAC,CAAC;AAAA,IACxH;AAAA,EACD;AAED;AAEA,IAAM,uCAAN,MAA6E;AAAA,EA/D7E,OA+D6E;AAAA;AAAA;AAAA,EAC5E,YACiC,2BACT,sBACJ,kBAClB;AACD,qBAAiB,kCAAkC,EAAE,KAAK,MAAM,KAAK,wBAAwB,2BAA2B,oBAAoB,CAAC;AAAA,EAC9I;AAAA,EAEA,MAAc,wBAAwB,2BAA2D,sBAA4D;AAC5J,QAAI,MAAM,0BAA0B,uBAAuB,GAAG;AAC7D,WAAK,4BAA4B;AACjC,YAAM,0BAA0B,yBAAyB,oBAAoB;AAC7E,WAAK,2BAA2B;AAAA,IACjC;AAAA,EACD;AACD;AAhBM,uCAAN;AAAA,EAEG;AAAA,EACA;AAAA,EACA;AAAA,GAJG;AAkBN,IAAI,OAAO;AACV,QAAM,oBAAoB,SAAS,GAAoC,WAAW,SAAS;AAC3F,oBAAkB,8BAA8B,sCAAsC,eAAe,QAAQ;AAC9G;",
  "names": []
}
