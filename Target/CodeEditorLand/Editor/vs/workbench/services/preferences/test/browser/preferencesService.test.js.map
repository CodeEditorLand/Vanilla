{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/preferences/test/browser/preferencesService.test.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport assert from 'assert';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from '../../../../../base/test/common/utils.js';\nimport { TestCommandService } from '../../../../../editor/test/browser/editorTestServices.js';\nimport { ICommandService } from '../../../../../platform/commands/common/commands.js';\nimport { SyncDescriptor } from '../../../../../platform/instantiation/common/descriptors.js';\nimport { ServiceCollection } from '../../../../../platform/instantiation/common/serviceCollection.js';\nimport { IURLService } from '../../../../../platform/url/common/url.js';\nimport { DEFAULT_EDITOR_ASSOCIATION } from '../../../../common/editor.js';\nimport { IJSONEditingService } from '../../../configuration/common/jsonEditing.js';\nimport { TestJSONEditingService } from '../../../configuration/test/common/testServices.js';\nimport { PreferencesService } from '../../browser/preferencesService.js';\nimport { IPreferencesService, ISettingsEditorOptions } from '../../common/preferences.js';\nimport { IRemoteAgentService } from '../../../remote/common/remoteAgentService.js';\nimport { TestRemoteAgentService, ITestInstantiationService, TestEditorService, workbenchInstantiationService } from '../../../../test/browser/workbenchTestServices.js';\n\nsuite('PreferencesService', () => {\n\tlet testInstantiationService: ITestInstantiationService;\n\tlet testObject: PreferencesService;\n\tlet editorService: TestEditorService2;\n\tconst disposables = ensureNoDisposablesAreLeakedInTestSuite();\n\n\tsetup(() => {\n\t\teditorService = disposables.add(new TestEditorService2());\n\t\ttestInstantiationService = workbenchInstantiationService({\n\t\t\teditorService: () => editorService\n\t\t}, disposables);\n\n\t\ttestInstantiationService.stub(IJSONEditingService, TestJSONEditingService);\n\t\ttestInstantiationService.stub(IRemoteAgentService, TestRemoteAgentService);\n\t\ttestInstantiationService.stub(ICommandService, TestCommandService);\n\t\ttestInstantiationService.stub(IURLService, { registerHandler: () => { } });\n\n\t\t// PreferencesService creates a PreferencesEditorInput which depends on IPreferencesService, add the real one, not a stub\n\t\tconst collection = new ServiceCollection();\n\t\tcollection.set(IPreferencesService, new SyncDescriptor(PreferencesService));\n\t\tconst instantiationService = disposables.add(testInstantiationService.createChild(collection));\n\t\ttestObject = disposables.add(instantiationService.createInstance(PreferencesService));\n\t});\n\ttest('options are preserved when calling openEditor', async () => {\n\t\ttestObject.openSettings({ jsonEditor: false, query: 'test query' });\n\t\tconst options = editorService.lastOpenEditorOptions as ISettingsEditorOptions;\n\t\tassert.strictEqual(options.focusSearch, true);\n\t\tassert.strictEqual(options.override, DEFAULT_EDITOR_ASSOCIATION.id);\n\t\tassert.strictEqual(options.query, 'test query');\n\t});\n});\n\nclass TestEditorService2 extends TestEditorService {\n\tlastOpenEditorOptions: any;\n\n\toverride async openEditor(editorInput: any, options?: any): Promise<any | undefined> {\n\t\tthis.lastOpenEditorOptions = options;\n\t\treturn super.openEditor(editorInput, options);\n\t}\n}\n"],
  "mappings": ";;AAKA,OAAO,YAAY;AACnB,SAAS,+CAA+C;AACxD,SAAS,0BAA0B;AACnC,SAAS,uBAAuB;AAChC,SAAS,sBAAsB;AAC/B,SAAS,yBAAyB;AAClC,SAAS,mBAAmB;AAC5B,SAAS,kCAAkC;AAC3C,SAAS,2BAA2B;AACpC,SAAS,8BAA8B;AACvC,SAAS,0BAA0B;AACnC,SAAS,qBAAqB,8BAA8B;AAC5D,SAAS,2BAA2B;AACpC,SAAS,wBAAwB,2BAA2B,mBAAmB,qCAAqC;AAEpH,MAAM,sBAAsB,MAAM;AACjC,MAAI;AACJ,MAAI;AACJ,MAAI;AACJ,QAAM,cAAc,wCAAwC;AAE5D,QAAM,MAAM;AACX,oBAAgB,YAAY,IAAI,IAAI,mBAAmB,CAAC;AACxD,+BAA2B,8BAA8B;AAAA,MACxD,eAAe,6BAAM,eAAN;AAAA,IAChB,GAAG,WAAW;AAEd,6BAAyB,KAAK,qBAAqB,sBAAsB;AACzE,6BAAyB,KAAK,qBAAqB,sBAAsB;AACzE,6BAAyB,KAAK,iBAAiB,kBAAkB;AACjE,6BAAyB,KAAK,aAAa,EAAE,iBAAiB,6BAAM;AAAA,IAAE,GAAR,mBAAU,CAAC;AAGzE,UAAM,aAAa,IAAI,kBAAkB;AACzC,eAAW,IAAI,qBAAqB,IAAI,eAAe,kBAAkB,CAAC;AAC1E,UAAM,uBAAuB,YAAY,IAAI,yBAAyB,YAAY,UAAU,CAAC;AAC7F,iBAAa,YAAY,IAAI,qBAAqB,eAAe,kBAAkB,CAAC;AAAA,EACrF,CAAC;AACD,OAAK,iDAAiD,YAAY;AACjE,eAAW,aAAa,EAAE,YAAY,OAAO,OAAO,aAAa,CAAC;AAClE,UAAM,UAAU,cAAc;AAC9B,WAAO,YAAY,QAAQ,aAAa,IAAI;AAC5C,WAAO,YAAY,QAAQ,UAAU,2BAA2B,EAAE;AAClE,WAAO,YAAY,QAAQ,OAAO,YAAY;AAAA,EAC/C,CAAC;AACF,CAAC;AAED,MAAM,2BAA2B,kBAAkB;AAAA,EApDnD,OAoDmD;AAAA;AAAA;AAAA,EAClD;AAAA,EAEA,MAAe,WAAW,aAAkB,SAAyC;AACpF,SAAK,wBAAwB;AAC7B,WAAO,MAAM,WAAW,aAAa,OAAO;AAAA,EAC7C;AACD;",
  "names": []
}
