{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/preferences/test/browser/keybindingsEditorModel.test.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport assert from 'assert';\nimport * as uuid from '../../../../../base/common/uuid.js';\nimport { OS, OperatingSystem } from '../../../../../base/common/platform.js';\nimport { KeyCode } from '../../../../../base/common/keyCodes.js';\nimport { KeyCodeChord } from '../../../../../base/common/keybindings.js';\nimport { CommandsRegistry } from '../../../../../platform/commands/common/commands.js';\nimport { IKeybindingService } from '../../../../../platform/keybinding/common/keybinding.js';\nimport { IExtensionService } from '../../../extensions/common/extensions.js';\nimport { ContextKeyExpr } from '../../../../../platform/contextkey/common/contextkey.js';\nimport { KeybindingsEditorModel } from '../../browser/keybindingsEditorModel.js';\nimport { ResolvedKeybindingItem } from '../../../../../platform/keybinding/common/resolvedKeybindingItem.js';\nimport { USLayoutResolvedKeybinding } from '../../../../../platform/keybinding/common/usLayoutResolvedKeybinding.js';\n\nimport { TestInstantiationService } from '../../../../../platform/instantiation/test/common/instantiationServiceMock.js';\nimport { IKeybindingItemEntry } from '../../common/preferences.js';\nimport { Action2, MenuRegistry, registerAction2 } from '../../../../../platform/actions/common/actions.js';\nimport { ExtensionIdentifier, IExtensionDescription } from '../../../../../platform/extensions/common/extensions.js';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from '../../../../../base/test/common/utils.js';\n\ninterface Modifiers {\n\tmetaKey?: boolean;\n\tctrlKey?: boolean;\n\taltKey?: boolean;\n\tshiftKey?: boolean;\n}\n\nsuite('KeybindingsEditorModel', () => {\n\n\tconst disposables = ensureNoDisposablesAreLeakedInTestSuite();\n\tlet instantiationService: TestInstantiationService;\n\tlet testObject: KeybindingsEditorModel;\n\tlet extensions: Partial<IExtensionDescription>[] = [];\n\n\tsetup(() => {\n\t\textensions = [];\n\t\tinstantiationService = disposables.add(new TestInstantiationService());\n\n\t\tinstantiationService.stub(IKeybindingService, {});\n\t\tinstantiationService.stub(IExtensionService, {\n\t\t\twhenInstalledExtensionsRegistered: () => Promise.resolve(true),\n\t\t\tget extensions() { return extensions as IExtensionDescription[]; }\n\t\t});\n\t\ttestObject = disposables.add(instantiationService.createInstance(KeybindingsEditorModel, OS));\n\n\t\tdisposables.add(CommandsRegistry.registerCommand('command_without_keybinding', () => { }));\n\t});\n\n\ttest('fetch returns default keybindings', async () => {\n\t\tconst expected = prepareKeybindingService(\n\t\t\taResolvedKeybindingItem({ command: 'a' + uuid.generateUuid(), firstChord: { keyCode: KeyCode.Escape } }),\n\t\t\taResolvedKeybindingItem({ command: 'b' + uuid.generateUuid(), firstChord: { keyCode: KeyCode.Escape }, secondChord: { keyCode: KeyCode.Escape } })\n\t\t);\n\n\t\tawait testObject.resolve(new Map<string, string>());\n\t\tconst actuals = asResolvedKeybindingItems(testObject.fetch(''));\n\t\tassertKeybindingItems(actuals, expected);\n\t});\n\n\ttest('fetch returns distinct keybindings', async () => {\n\t\tconst command = 'a' + uuid.generateUuid();\n\t\tconst expected = prepareKeybindingService(\n\t\t\taResolvedKeybindingItem({ command, firstChord: { keyCode: KeyCode.Escape } }),\n\t\t\taResolvedKeybindingItem({ command, firstChord: { keyCode: KeyCode.Escape } }),\n\t\t);\n\n\t\tawait testObject.resolve(new Map<string, string>());\n\t\tconst actuals = asResolvedKeybindingItems(testObject.fetch(''));\n\t\tassertKeybindingItems(actuals, [expected[0]]);\n\t});\n\n\ttest('fetch returns default keybindings at the top', async () => {\n\t\tconst expected = prepareKeybindingService(\n\t\t\taResolvedKeybindingItem({ command: 'a' + uuid.generateUuid(), firstChord: { keyCode: KeyCode.Escape } }),\n\t\t\taResolvedKeybindingItem({ command: 'b' + uuid.generateUuid(), firstChord: { keyCode: KeyCode.Escape }, secondChord: { keyCode: KeyCode.Escape } })\n\t\t);\n\n\t\tawait testObject.resolve(new Map<string, string>());\n\t\tconst actuals = asResolvedKeybindingItems(testObject.fetch('').slice(0, 2), true);\n\t\tassertKeybindingItems(actuals, expected);\n\t});\n\n\ttest('fetch returns default keybindings sorted by command id', async () => {\n\t\tconst keybindings = prepareKeybindingService(\n\t\t\taResolvedKeybindingItem({ command: 'b' + uuid.generateUuid(), firstChord: { keyCode: KeyCode.Escape } }),\n\t\t\taResolvedKeybindingItem({ command: 'c' + uuid.generateUuid(), firstChord: { keyCode: KeyCode.Escape }, secondChord: { keyCode: KeyCode.Escape } }),\n\t\t\taResolvedKeybindingItem({ command: 'a' + uuid.generateUuid(), firstChord: { keyCode: KeyCode.Backspace } })\n\t\t);\n\t\tconst expected = [keybindings[2], keybindings[0], keybindings[1]];\n\n\t\tawait testObject.resolve(new Map<string, string>());\n\t\tconst actuals = asResolvedKeybindingItems(testObject.fetch(''));\n\t\tassertKeybindingItems(actuals, expected);\n\t});\n\n\ttest('fetch returns user keybinding first if default and user has same id', async () => {\n\t\tconst sameId = 'b' + uuid.generateUuid();\n\t\tconst keybindings = prepareKeybindingService(\n\t\t\taResolvedKeybindingItem({ command: sameId, firstChord: { keyCode: KeyCode.Escape } }),\n\t\t\taResolvedKeybindingItem({ command: sameId, firstChord: { keyCode: KeyCode.Escape }, secondChord: { keyCode: KeyCode.Escape }, isDefault: false })\n\t\t);\n\t\tconst expected = [keybindings[1], keybindings[0]];\n\n\t\tawait testObject.resolve(new Map<string, string>());\n\t\tconst actuals = asResolvedKeybindingItems(testObject.fetch(''));\n\t\tassertKeybindingItems(actuals, expected);\n\t});\n\n\ttest('fetch returns keybinding with titles first', async () => {\n\t\tconst keybindings = prepareKeybindingService(\n\t\t\taResolvedKeybindingItem({ command: 'a' + uuid.generateUuid(), firstChord: { keyCode: KeyCode.Escape } }),\n\t\t\taResolvedKeybindingItem({ command: 'b' + uuid.generateUuid(), firstChord: { keyCode: KeyCode.Escape }, secondChord: { keyCode: KeyCode.Escape } }),\n\t\t\taResolvedKeybindingItem({ command: 'c' + uuid.generateUuid(), firstChord: { keyCode: KeyCode.Escape }, secondChord: { keyCode: KeyCode.Escape } }),\n\t\t\taResolvedKeybindingItem({ command: 'd' + uuid.generateUuid(), firstChord: { keyCode: KeyCode.Escape }, secondChord: { keyCode: KeyCode.Escape } })\n\t\t);\n\n\t\tregisterCommandWithTitle(keybindings[1].command!, 'B Title');\n\t\tregisterCommandWithTitle(keybindings[3].command!, 'A Title');\n\n\t\tconst expected = [keybindings[3], keybindings[1], keybindings[0], keybindings[2]];\n\t\tinstantiationService.stub(IKeybindingService, 'getKeybindings', () => keybindings);\n\t\tinstantiationService.stub(IKeybindingService, 'getDefaultKeybindings', () => keybindings);\n\n\t\tawait testObject.resolve(new Map<string, string>());\n\t\tconst actuals = asResolvedKeybindingItems(testObject.fetch(''));\n\t\tassertKeybindingItems(actuals, expected);\n\t});\n\n\ttest('fetch returns keybinding with user first if title and id matches', async () => {\n\t\tconst sameId = 'b' + uuid.generateUuid();\n\t\tconst keybindings = prepareKeybindingService(\n\t\t\taResolvedKeybindingItem({ command: 'a' + uuid.generateUuid(), firstChord: { keyCode: KeyCode.Escape } }),\n\t\t\taResolvedKeybindingItem({ command: sameId, firstChord: { keyCode: KeyCode.Escape }, secondChord: { keyCode: KeyCode.Escape } }),\n\t\t\taResolvedKeybindingItem({ command: 'c' + uuid.generateUuid(), firstChord: { keyCode: KeyCode.Escape }, secondChord: { keyCode: KeyCode.Escape } }),\n\t\t\taResolvedKeybindingItem({ command: sameId, firstChord: { keyCode: KeyCode.Escape }, isDefault: false })\n\t\t);\n\n\t\tregisterCommandWithTitle(keybindings[1].command!, 'Same Title');\n\t\tconst expected = [keybindings[3], keybindings[1], keybindings[0], keybindings[2]];\n\n\t\tawait testObject.resolve(new Map<string, string>());\n\t\tconst actuals = asResolvedKeybindingItems(testObject.fetch(''));\n\t\tassertKeybindingItems(actuals, expected);\n\t});\n\n\ttest('fetch returns default keybindings sorted by precedence', async () => {\n\t\tconst expected = prepareKeybindingService(\n\t\t\taResolvedKeybindingItem({ command: 'b' + uuid.generateUuid(), firstChord: { keyCode: KeyCode.Escape } }),\n\t\t\taResolvedKeybindingItem({ command: 'c' + uuid.generateUuid(), firstChord: { keyCode: KeyCode.Escape }, secondChord: { keyCode: KeyCode.Escape } }),\n\t\t\taResolvedKeybindingItem({ command: 'a' + uuid.generateUuid(), firstChord: { keyCode: KeyCode.Backspace } })\n\t\t);\n\n\t\tawait testObject.resolve(new Map<string, string>());\n\t\tconst actuals = asResolvedKeybindingItems(testObject.fetch('', true));\n\t\tassertKeybindingItems(actuals, expected);\n\t});\n\n\ttest('convert keybinding without title to entry', async () => {\n\t\tconst expected = aResolvedKeybindingItem({ command: 'a' + uuid.generateUuid(), firstChord: { keyCode: KeyCode.Escape }, when: 'context1 && context2' });\n\t\tprepareKeybindingService(expected);\n\n\t\tawait testObject.resolve(new Map<string, string>());\n\t\tconst actual = testObject.fetch('')[0];\n\t\tassert.strictEqual(actual.keybindingItem.command, expected.command);\n\t\tassert.strictEqual(actual.keybindingItem.commandLabel, '');\n\t\tassert.strictEqual(actual.keybindingItem.commandDefaultLabel, null);\n\t\tassert.strictEqual(actual.keybindingItem.keybinding.getAriaLabel(), expected.resolvedKeybinding!.getAriaLabel());\n\t\tassert.strictEqual(actual.keybindingItem.when, expected.when!.serialize());\n\t});\n\n\ttest('convert keybinding with title to entry', async () => {\n\t\tconst expected = aResolvedKeybindingItem({ command: 'a' + uuid.generateUuid(), firstChord: { keyCode: KeyCode.Escape }, when: 'context1 && context2' });\n\t\tprepareKeybindingService(expected);\n\t\tregisterCommandWithTitle(expected.command!, 'Some Title');\n\n\t\tawait testObject.resolve(new Map<string, string>());\n\t\tconst actual = testObject.fetch('')[0];\n\t\tassert.strictEqual(actual.keybindingItem.command, expected.command);\n\t\tassert.strictEqual(actual.keybindingItem.commandLabel, 'Some Title');\n\t\tassert.strictEqual(actual.keybindingItem.commandDefaultLabel, null);\n\t\tassert.strictEqual(actual.keybindingItem.keybinding.getAriaLabel(), expected.resolvedKeybinding!.getAriaLabel());\n\t\tassert.strictEqual(actual.keybindingItem.when, expected.when!.serialize());\n\t});\n\n\ttest('convert without title and binding to entry', async () => {\n\t\tdisposables.add(CommandsRegistry.registerCommand('command_without_keybinding', () => { }));\n\t\tprepareKeybindingService();\n\n\t\tawait testObject.resolve(new Map<string, string>());\n\t\tconst actual = testObject.fetch('').filter(element => element.keybindingItem.command === 'command_without_keybinding')[0];\n\t\tassert.strictEqual(actual.keybindingItem.command, 'command_without_keybinding');\n\t\tassert.strictEqual(actual.keybindingItem.commandLabel, '');\n\t\tassert.strictEqual(actual.keybindingItem.commandDefaultLabel, null);\n\t\tassert.strictEqual(actual.keybindingItem.keybinding, undefined);\n\t\tassert.strictEqual(actual.keybindingItem.when, '');\n\t});\n\n\ttest('convert with title and without binding to entry', async () => {\n\t\tconst id = 'a' + uuid.generateUuid();\n\t\tregisterCommandWithTitle(id, 'some title');\n\t\tprepareKeybindingService();\n\n\t\tawait testObject.resolve(new Map<string, string>());\n\t\tconst actual = testObject.fetch('').filter(element => element.keybindingItem.command === id)[0];\n\t\tassert.strictEqual(actual.keybindingItem.command, id);\n\t\tassert.strictEqual(actual.keybindingItem.commandLabel, 'some title');\n\t\tassert.strictEqual(actual.keybindingItem.commandDefaultLabel, null);\n\t\tassert.strictEqual(actual.keybindingItem.keybinding, undefined);\n\t\tassert.strictEqual(actual.keybindingItem.when, '');\n\t});\n\n\ttest('filter by command id', async () => {\n\t\tconst id = 'workbench.action.increaseViewSize';\n\t\tregisterCommandWithTitle(id, 'some title');\n\t\tprepareKeybindingService();\n\n\t\tawait testObject.resolve(new Map<string, string>());\n\t\tconst actual = testObject.fetch('workbench action view size').filter(element => element.keybindingItem.command === id)[0];\n\t\tassert.ok(actual);\n\t});\n\n\ttest('filter by command title', async () => {\n\t\tconst id = 'a' + uuid.generateUuid();\n\t\tregisterCommandWithTitle(id, 'Increase view size');\n\t\tprepareKeybindingService();\n\n\t\tawait testObject.resolve(new Map<string, string>());\n\t\tconst actual = testObject.fetch('increase size').filter(element => element.keybindingItem.command === id)[0];\n\t\tassert.ok(actual);\n\t});\n\n\ttest('filter by system source', async () => {\n\t\tconst command = 'a' + uuid.generateUuid();\n\t\tconst expected = aResolvedKeybindingItem({ command, firstChord: { keyCode: KeyCode.Escape }, when: 'context1 && context2' });\n\t\tprepareKeybindingService(expected);\n\n\t\tawait testObject.resolve(new Map<string, string>());\n\t\tconst actual = testObject.fetch('system').filter(element => element.keybindingItem.command === command)[0];\n\t\tassert.ok(actual);\n\t});\n\n\ttest('filter by user source', async () => {\n\t\tconst command = 'a' + uuid.generateUuid();\n\t\tconst expected = aResolvedKeybindingItem({ command, firstChord: { keyCode: KeyCode.Escape }, when: 'context1 && context2', isDefault: false });\n\t\tprepareKeybindingService(expected);\n\n\t\tawait testObject.resolve(new Map<string, string>());\n\t\tconst actual = testObject.fetch('user').filter(element => element.keybindingItem.command === command)[0];\n\t\tassert.ok(actual);\n\t});\n\n\ttest('filter by default source with \"@source: \" prefix', async () => {\n\t\tconst command = 'a' + uuid.generateUuid();\n\t\tconst expected = aResolvedKeybindingItem({ command, firstChord: { keyCode: KeyCode.Escape }, when: 'context1 && context2', isDefault: true });\n\t\tprepareKeybindingService(expected);\n\n\t\tawait testObject.resolve(new Map<string, string>());\n\t\tconst actual = testObject.fetch('@source: default').filter(element => element.keybindingItem.command === command)[0];\n\t\tassert.ok(actual);\n\t});\n\n\ttest('filter by user source with \"@source: \" prefix', async () => {\n\t\tconst command = 'a' + uuid.generateUuid();\n\t\tconst expected = aResolvedKeybindingItem({ command, firstChord: { keyCode: KeyCode.Escape }, when: 'context1 && context2', isDefault: false });\n\t\tprepareKeybindingService(expected);\n\n\t\tawait testObject.resolve(new Map<string, string>());\n\t\tconst actual = testObject.fetch('@source: user').filter(element => element.keybindingItem.command === command)[0];\n\t\tassert.ok(actual);\n\t});\n\n\ttest('filter by command prefix with different commands', async () => {\n\t\tconst command = 'a' + uuid.generateUuid();\n\t\tconst expected = aResolvedKeybindingItem({ command, firstChord: { keyCode: KeyCode.Escape }, when: 'context1 && context2', isDefault: true });\n\t\tprepareKeybindingService(expected, aResolvedKeybindingItem({ command: uuid.generateUuid(), firstChord: { keyCode: KeyCode.Escape, modifiers: { altKey: true } }, when: 'whenContext1 && whenContext2', isDefault: true }));\n\n\t\tawait testObject.resolve(new Map<string, string>());\n\t\tconst actual = testObject.fetch(`@command:${command}`);\n\t\tassert.strictEqual(actual.length, 1);\n\t\tassert.deepStrictEqual(actual[0].keybindingItem.command, command);\n\t});\n\n\ttest('filter by command prefix with same commands', async () => {\n\t\tconst command = 'a' + uuid.generateUuid();\n\t\tconst expected = aResolvedKeybindingItem({ command, firstChord: { keyCode: KeyCode.Escape }, when: 'context1 && context2', isDefault: true });\n\t\tprepareKeybindingService(expected, aResolvedKeybindingItem({ command, firstChord: { keyCode: KeyCode.Escape, modifiers: { altKey: true } }, when: 'whenContext1 && whenContext2', isDefault: true }));\n\n\t\tawait testObject.resolve(new Map<string, string>());\n\t\tconst actual = testObject.fetch(`@command:${command}`);\n\t\tassert.strictEqual(actual.length, 2);\n\t\tassert.deepStrictEqual(actual[0].keybindingItem.command, command);\n\t\tassert.deepStrictEqual(actual[1].keybindingItem.command, command);\n\t});\n\n\ttest('filter by when context', async () => {\n\t\tconst command = 'a' + uuid.generateUuid();\n\t\tconst expected = aResolvedKeybindingItem({ command, firstChord: { keyCode: KeyCode.Escape }, when: 'whenContext1 && whenContext2', isDefault: false });\n\t\tprepareKeybindingService(expected);\n\n\t\tawait testObject.resolve(new Map<string, string>());\n\t\tconst actual = testObject.fetch('when context').filter(element => element.keybindingItem.command === command)[0];\n\t\tassert.ok(actual);\n\t});\n\n\ttest('filter by cmd key', async () => {\n\t\ttestObject = disposables.add(instantiationService.createInstance(KeybindingsEditorModel, OperatingSystem.Macintosh));\n\n\t\tconst command = 'a' + uuid.generateUuid();\n\t\tconst expected = aResolvedKeybindingItem({ command, firstChord: { keyCode: KeyCode.Escape, modifiers: { metaKey: true } }, when: 'whenContext1 && whenContext2', isDefault: false });\n\t\tprepareKeybindingService(expected);\n\n\t\tawait testObject.resolve(new Map<string, string>());\n\t\tconst actual = testObject.fetch('cmd').filter(element => element.keybindingItem.command === command);\n\t\tassert.strictEqual(1, actual.length);\n\t\tassert.deepStrictEqual(actual[0].keybindingMatches!.firstPart, { metaKey: true });\n\t\tassert.deepStrictEqual(actual[0].keybindingMatches!.chordPart, {});\n\t});\n\n\ttest('filter by meta key', async () => {\n\t\ttestObject = disposables.add(instantiationService.createInstance(KeybindingsEditorModel, OperatingSystem.Macintosh));\n\n\t\tconst command = 'a' + uuid.generateUuid();\n\t\tconst expected = aResolvedKeybindingItem({ command, firstChord: { keyCode: KeyCode.Escape, modifiers: { metaKey: true } }, when: 'whenContext1 && whenContext2', isDefault: false });\n\t\tprepareKeybindingService(expected, aResolvedKeybindingItem({ command, firstChord: { keyCode: KeyCode.Escape, modifiers: { shiftKey: true } }, when: 'whenContext1 && whenContext2', isDefault: false }));\n\n\t\tawait testObject.resolve(new Map<string, string>());\n\t\tconst actual = testObject.fetch('meta').filter(element => element.keybindingItem.command === command);\n\t\tassert.strictEqual(1, actual.length);\n\t\tassert.deepStrictEqual(actual[0].keybindingMatches!.firstPart, { metaKey: true });\n\t\tassert.deepStrictEqual(actual[0].keybindingMatches!.chordPart, {});\n\t});\n\n\ttest('filter by command key', async () => {\n\t\ttestObject = disposables.add(instantiationService.createInstance(KeybindingsEditorModel, OperatingSystem.Macintosh));\n\n\t\tconst command = 'a' + uuid.generateUuid();\n\t\tconst expected = aResolvedKeybindingItem({ command, firstChord: { keyCode: KeyCode.Escape, modifiers: { metaKey: true } }, when: 'whenContext1 && whenContext2', isDefault: false });\n\t\tprepareKeybindingService(expected, aResolvedKeybindingItem({ command, firstChord: { keyCode: KeyCode.Escape, modifiers: { altKey: true } }, when: 'whenContext1 && whenContext2', isDefault: false }));\n\n\t\tawait testObject.resolve(new Map<string, string>());\n\t\tconst actual = testObject.fetch('command').filter(element => element.keybindingItem.command === command);\n\t\tassert.strictEqual(1, actual.length);\n\t\tassert.deepStrictEqual(actual[0].keybindingMatches!.firstPart, { metaKey: true });\n\t\tassert.deepStrictEqual(actual[0].keybindingMatches!.chordPart, {});\n\t});\n\n\ttest('filter by windows key', async () => {\n\t\ttestObject = disposables.add(instantiationService.createInstance(KeybindingsEditorModel, OperatingSystem.Windows));\n\n\t\tconst command = 'a' + uuid.generateUuid();\n\t\tconst expected = aResolvedKeybindingItem({ command, firstChord: { keyCode: KeyCode.Escape, modifiers: { metaKey: true } }, when: 'whenContext1 && whenContext2', isDefault: false });\n\t\tprepareKeybindingService(expected, aResolvedKeybindingItem({ command, firstChord: { keyCode: KeyCode.Escape, modifiers: { ctrlKey: true } }, when: 'whenContext1 && whenContext2', isDefault: false }));\n\n\t\tawait testObject.resolve(new Map<string, string>());\n\t\tconst actual = testObject.fetch('windows').filter(element => element.keybindingItem.command === command);\n\t\tassert.strictEqual(1, actual.length);\n\t\tassert.deepStrictEqual(actual[0].keybindingMatches!.firstPart, { metaKey: true });\n\t\tassert.deepStrictEqual(actual[0].keybindingMatches!.chordPart, {});\n\t});\n\n\ttest('filter by alt key', async () => {\n\t\tconst command = 'a' + uuid.generateUuid();\n\t\tconst expected = aResolvedKeybindingItem({ command, firstChord: { keyCode: KeyCode.Escape, modifiers: { altKey: true } }, when: 'whenContext1 && whenContext2', isDefault: false });\n\t\tprepareKeybindingService(expected, aResolvedKeybindingItem({ command, firstChord: { keyCode: KeyCode.Escape, modifiers: { metaKey: true } }, when: 'whenContext1 && whenContext2', isDefault: false }));\n\n\t\tawait testObject.resolve(new Map<string, string>());\n\t\tconst actual = testObject.fetch('alt').filter(element => element.keybindingItem.command === command);\n\t\tassert.strictEqual(1, actual.length);\n\t\tassert.deepStrictEqual(actual[0].keybindingMatches!.firstPart, { altKey: true });\n\t\tassert.deepStrictEqual(actual[0].keybindingMatches!.chordPart, {});\n\t});\n\n\ttest('filter by option key', async () => {\n\t\tconst command = 'a' + uuid.generateUuid();\n\t\tconst expected = aResolvedKeybindingItem({ command, firstChord: { keyCode: KeyCode.Escape, modifiers: { altKey: true } }, when: 'whenContext1 && whenContext2', isDefault: false });\n\t\tprepareKeybindingService(expected, aResolvedKeybindingItem({ command, firstChord: { keyCode: KeyCode.Escape, modifiers: { metaKey: true } }, when: 'whenContext1 && whenContext2', isDefault: false }));\n\n\t\tawait testObject.resolve(new Map<string, string>());\n\t\tconst actual = testObject.fetch('option').filter(element => element.keybindingItem.command === command);\n\t\tassert.strictEqual(1, actual.length);\n\t\tassert.deepStrictEqual(actual[0].keybindingMatches!.firstPart, { altKey: true });\n\t\tassert.deepStrictEqual(actual[0].keybindingMatches!.chordPart, {});\n\t});\n\n\ttest('filter by ctrl key', async () => {\n\t\tconst command = 'a' + uuid.generateUuid();\n\t\tconst expected = aResolvedKeybindingItem({ command, firstChord: { keyCode: KeyCode.Escape, modifiers: { ctrlKey: true } }, when: 'whenContext1 && whenContext2', isDefault: false });\n\t\tprepareKeybindingService(expected, aResolvedKeybindingItem({ command, firstChord: { keyCode: KeyCode.Escape, modifiers: { shiftKey: true } }, when: 'whenContext1 && whenContext2', isDefault: false }));\n\n\t\tawait testObject.resolve(new Map<string, string>());\n\t\tconst actual = testObject.fetch('ctrl').filter(element => element.keybindingItem.command === command);\n\t\tassert.strictEqual(1, actual.length);\n\t\tassert.deepStrictEqual(actual[0].keybindingMatches!.firstPart, { ctrlKey: true });\n\t\tassert.deepStrictEqual(actual[0].keybindingMatches!.chordPart, {});\n\t});\n\n\ttest('filter by control key', async () => {\n\t\tconst command = 'a' + uuid.generateUuid();\n\t\tconst expected = aResolvedKeybindingItem({ command, firstChord: { keyCode: KeyCode.Escape, modifiers: { ctrlKey: true } }, when: 'whenContext1 && whenContext2', isDefault: false });\n\t\tprepareKeybindingService(expected, aResolvedKeybindingItem({ command, firstChord: { keyCode: KeyCode.Escape, modifiers: { metaKey: true } }, when: 'whenContext1 && whenContext2', isDefault: false }));\n\n\t\tawait testObject.resolve(new Map<string, string>());\n\t\tconst actual = testObject.fetch('control').filter(element => element.keybindingItem.command === command);\n\t\tassert.strictEqual(1, actual.length);\n\t\tassert.deepStrictEqual(actual[0].keybindingMatches!.firstPart, { ctrlKey: true });\n\t\tassert.deepStrictEqual(actual[0].keybindingMatches!.chordPart, {});\n\t});\n\n\ttest('filter by shift key', async () => {\n\t\tconst command = 'a' + uuid.generateUuid();\n\t\tconst expected = aResolvedKeybindingItem({ command, firstChord: { keyCode: KeyCode.Escape, modifiers: { shiftKey: true } }, when: 'whenContext1 && whenContext2', isDefault: false });\n\t\tprepareKeybindingService(expected, aResolvedKeybindingItem({ command, firstChord: { keyCode: KeyCode.Escape, modifiers: { metaKey: true } }, when: 'whenContext1 && whenContext2', isDefault: false }));\n\n\t\tawait testObject.resolve(new Map<string, string>());\n\t\tconst actual = testObject.fetch('shift').filter(element => element.keybindingItem.command === command);\n\t\tassert.strictEqual(1, actual.length);\n\t\tassert.deepStrictEqual(actual[0].keybindingMatches!.firstPart, { shiftKey: true });\n\t\tassert.deepStrictEqual(actual[0].keybindingMatches!.chordPart, {});\n\t});\n\n\ttest('filter by arrow', async () => {\n\t\tconst command = 'a' + uuid.generateUuid();\n\t\tconst expected = aResolvedKeybindingItem({ command, firstChord: { keyCode: KeyCode.RightArrow, modifiers: { shiftKey: true } }, when: 'whenContext1 && whenContext2', isDefault: false });\n\t\tprepareKeybindingService(expected, aResolvedKeybindingItem({ command, firstChord: { keyCode: KeyCode.Escape, modifiers: { metaKey: true } }, when: 'whenContext1 && whenContext2', isDefault: false }));\n\n\t\tawait testObject.resolve(new Map<string, string>());\n\t\tconst actual = testObject.fetch('arrow').filter(element => element.keybindingItem.command === command);\n\t\tassert.strictEqual(1, actual.length);\n\t\tassert.deepStrictEqual(actual[0].keybindingMatches!.firstPart, { keyCode: true });\n\t\tassert.deepStrictEqual(actual[0].keybindingMatches!.chordPart, {});\n\t});\n\n\ttest('filter by modifier and key', async () => {\n\t\tconst command = 'a' + uuid.generateUuid();\n\t\tconst expected = aResolvedKeybindingItem({ command, firstChord: { keyCode: KeyCode.RightArrow, modifiers: { altKey: true } }, when: 'whenContext1 && whenContext2', isDefault: false });\n\t\tprepareKeybindingService(expected, aResolvedKeybindingItem({ command, firstChord: { keyCode: KeyCode.RightArrow, modifiers: { metaKey: true } }, when: 'whenContext1 && whenContext2', isDefault: false }));\n\n\t\tawait testObject.resolve(new Map<string, string>());\n\t\tconst actual = testObject.fetch('alt right').filter(element => element.keybindingItem.command === command);\n\t\tassert.strictEqual(1, actual.length);\n\t\tassert.deepStrictEqual(actual[0].keybindingMatches!.firstPart, { altKey: true, keyCode: true });\n\t\tassert.deepStrictEqual(actual[0].keybindingMatches!.chordPart, {});\n\t});\n\n\ttest('filter by key and modifier', async () => {\n\t\tconst command = 'a' + uuid.generateUuid();\n\t\tconst expected = aResolvedKeybindingItem({ command, firstChord: { keyCode: KeyCode.RightArrow, modifiers: { altKey: true } }, when: 'whenContext1 && whenContext2', isDefault: false });\n\t\tprepareKeybindingService(expected, aResolvedKeybindingItem({ command, firstChord: { keyCode: KeyCode.RightArrow, modifiers: { metaKey: true } }, when: 'whenContext1 && whenContext2', isDefault: false }));\n\n\t\tawait testObject.resolve(new Map<string, string>());\n\t\tconst actual = testObject.fetch('right alt').filter(element => element.keybindingItem.command === command);\n\t\tassert.strictEqual(0, actual.length);\n\t});\n\n\ttest('filter by modifiers and key', async () => {\n\t\ttestObject = disposables.add(instantiationService.createInstance(KeybindingsEditorModel, OperatingSystem.Macintosh));\n\t\tconst command = 'a' + uuid.generateUuid();\n\t\tconst expected = aResolvedKeybindingItem({ command, firstChord: { keyCode: KeyCode.Escape, modifiers: { altKey: true, metaKey: true } }, when: 'whenContext1 && whenContext2', isDefault: false });\n\t\tprepareKeybindingService(expected, aResolvedKeybindingItem({ command, firstChord: { keyCode: KeyCode.Escape, modifiers: { metaKey: true } }, when: 'whenContext1 && whenContext2', isDefault: false }));\n\n\t\tawait testObject.resolve(new Map<string, string>());\n\t\tconst actual = testObject.fetch('alt cmd esc').filter(element => element.keybindingItem.command === command);\n\t\tassert.strictEqual(1, actual.length);\n\t\tassert.deepStrictEqual(actual[0].keybindingMatches!.firstPart, { altKey: true, metaKey: true, keyCode: true });\n\t\tassert.deepStrictEqual(actual[0].keybindingMatches!.chordPart, {});\n\t});\n\n\ttest('filter by modifiers in random order and key', async () => {\n\t\ttestObject = disposables.add(instantiationService.createInstance(KeybindingsEditorModel, OperatingSystem.Macintosh));\n\t\tconst command = 'a' + uuid.generateUuid();\n\t\tconst expected = aResolvedKeybindingItem({ command, firstChord: { keyCode: KeyCode.Escape, modifiers: { shiftKey: true, metaKey: true } }, when: 'whenContext1 && whenContext2', isDefault: false });\n\t\tprepareKeybindingService(expected, aResolvedKeybindingItem({ command, firstChord: { keyCode: KeyCode.Escape, modifiers: { metaKey: true } }, when: 'whenContext1 && whenContext2', isDefault: false }));\n\n\t\tawait testObject.resolve(new Map<string, string>());\n\t\tconst actual = testObject.fetch('cmd shift esc').filter(element => element.keybindingItem.command === command);\n\t\tassert.strictEqual(1, actual.length);\n\t\tassert.deepStrictEqual(actual[0].keybindingMatches!.firstPart, { metaKey: true, shiftKey: true, keyCode: true });\n\t\tassert.deepStrictEqual(actual[0].keybindingMatches!.chordPart, {});\n\t});\n\n\ttest('filter by first part', async () => {\n\t\ttestObject = disposables.add(instantiationService.createInstance(KeybindingsEditorModel, OperatingSystem.Macintosh));\n\t\tconst command = 'a' + uuid.generateUuid();\n\t\tconst expected = aResolvedKeybindingItem({ command, firstChord: { keyCode: KeyCode.Escape, modifiers: { shiftKey: true, metaKey: true } }, secondChord: { keyCode: KeyCode.Delete }, when: 'whenContext1 && whenContext2', isDefault: false });\n\t\tprepareKeybindingService(expected, aResolvedKeybindingItem({ command, firstChord: { keyCode: KeyCode.Escape, modifiers: { metaKey: true } }, when: 'whenContext1 && whenContext2', isDefault: false }));\n\n\t\tawait testObject.resolve(new Map<string, string>());\n\t\tconst actual = testObject.fetch('cmd shift esc').filter(element => element.keybindingItem.command === command);\n\t\tassert.strictEqual(1, actual.length);\n\t\tassert.deepStrictEqual(actual[0].keybindingMatches!.firstPart, { metaKey: true, shiftKey: true, keyCode: true });\n\t\tassert.deepStrictEqual(actual[0].keybindingMatches!.chordPart, {});\n\t});\n\n\ttest('filter matches in chord part', async () => {\n\t\ttestObject = disposables.add(instantiationService.createInstance(KeybindingsEditorModel, OperatingSystem.Macintosh));\n\t\tconst command = 'a' + uuid.generateUuid();\n\t\tconst expected = aResolvedKeybindingItem({ command, firstChord: { keyCode: KeyCode.Escape, modifiers: { shiftKey: true, metaKey: true } }, secondChord: { keyCode: KeyCode.Delete }, when: 'whenContext1 && whenContext2', isDefault: false });\n\t\tprepareKeybindingService(expected, aResolvedKeybindingItem({ command, firstChord: { keyCode: KeyCode.Escape, modifiers: { metaKey: true } }, when: 'whenContext1 && whenContext2', isDefault: false }));\n\n\t\tawait testObject.resolve(new Map<string, string>());\n\t\tconst actual = testObject.fetch('cmd del').filter(element => element.keybindingItem.command === command);\n\t\tassert.strictEqual(1, actual.length);\n\t\tassert.deepStrictEqual(actual[0].keybindingMatches!.firstPart, { metaKey: true });\n\t\tassert.deepStrictEqual(actual[0].keybindingMatches!.chordPart, { keyCode: true });\n\t});\n\n\ttest('filter matches first part and in chord part', async () => {\n\t\ttestObject = disposables.add(instantiationService.createInstance(KeybindingsEditorModel, OperatingSystem.Macintosh));\n\t\tconst command = 'a' + uuid.generateUuid();\n\t\tconst expected = aResolvedKeybindingItem({ command, firstChord: { keyCode: KeyCode.Escape, modifiers: { shiftKey: true, metaKey: true } }, secondChord: { keyCode: KeyCode.Delete }, when: 'whenContext1 && whenContext2', isDefault: false });\n\t\tprepareKeybindingService(expected, aResolvedKeybindingItem({ command, firstChord: { keyCode: KeyCode.Escape, modifiers: { shiftKey: true, metaKey: true } }, secondChord: { keyCode: KeyCode.UpArrow }, when: 'whenContext1 && whenContext2', isDefault: false }));\n\n\t\tawait testObject.resolve(new Map<string, string>());\n\t\tconst actual = testObject.fetch('cmd shift esc del').filter(element => element.keybindingItem.command === command);\n\t\tassert.strictEqual(1, actual.length);\n\t\tassert.deepStrictEqual(actual[0].keybindingMatches!.firstPart, { shiftKey: true, metaKey: true, keyCode: true });\n\t\tassert.deepStrictEqual(actual[0].keybindingMatches!.chordPart, { keyCode: true });\n\t});\n\n\ttest('filter exact matches', async () => {\n\t\tconst command = 'a' + uuid.generateUuid();\n\t\tconst expected = aResolvedKeybindingItem({ command, firstChord: { keyCode: KeyCode.KeyC, modifiers: { ctrlKey: true } }, when: 'whenContext1 && whenContext2', isDefault: false });\n\t\tprepareKeybindingService(expected, aResolvedKeybindingItem({ command, firstChord: { keyCode: KeyCode.Escape, modifiers: { shiftKey: true, metaKey: true } }, secondChord: { keyCode: KeyCode.KeyC, modifiers: { ctrlKey: true } }, when: 'whenContext1 && whenContext2', isDefault: false }));\n\n\t\tawait testObject.resolve(new Map<string, string>());\n\t\tconst actual = testObject.fetch('\"ctrl c\"').filter(element => element.keybindingItem.command === command);\n\t\tassert.strictEqual(1, actual.length);\n\t\tassert.deepStrictEqual(actual[0].keybindingMatches!.firstPart, { ctrlKey: true, keyCode: true });\n\t\tassert.deepStrictEqual(actual[0].keybindingMatches!.chordPart, {});\n\t});\n\n\ttest('filter exact matches with first and chord part', async () => {\n\t\tconst command = 'a' + uuid.generateUuid();\n\t\tconst expected = aResolvedKeybindingItem({ command, firstChord: { keyCode: KeyCode.Escape, modifiers: { shiftKey: true, metaKey: true } }, secondChord: { keyCode: KeyCode.KeyC, modifiers: { ctrlKey: true } }, when: 'whenContext1 && whenContext2', isDefault: false });\n\t\tprepareKeybindingService(expected, aResolvedKeybindingItem({ command, firstChord: { keyCode: KeyCode.KeyC, modifiers: { ctrlKey: true } }, when: 'whenContext1 && whenContext2', isDefault: false }));\n\n\t\tawait testObject.resolve(new Map<string, string>());\n\t\tconst actual = testObject.fetch('\"shift meta escape ctrl c\"').filter(element => element.keybindingItem.command === command);\n\t\tassert.strictEqual(1, actual.length);\n\t\tassert.deepStrictEqual(actual[0].keybindingMatches!.firstPart, { shiftKey: true, metaKey: true, keyCode: true });\n\t\tassert.deepStrictEqual(actual[0].keybindingMatches!.chordPart, { ctrlKey: true, keyCode: true });\n\t});\n\n\ttest('filter exact matches with first and chord part no results', async () => {\n\t\ttestObject = disposables.add(instantiationService.createInstance(KeybindingsEditorModel, OperatingSystem.Macintosh));\n\t\tconst command = 'a' + uuid.generateUuid();\n\t\tconst expected = aResolvedKeybindingItem({ command, firstChord: { keyCode: KeyCode.Escape, modifiers: { shiftKey: true, metaKey: true } }, secondChord: { keyCode: KeyCode.Delete, modifiers: { metaKey: true } }, when: 'whenContext1 && whenContext2', isDefault: false });\n\t\tprepareKeybindingService(expected, aResolvedKeybindingItem({ command, firstChord: { keyCode: KeyCode.Escape, modifiers: { shiftKey: true, metaKey: true } }, secondChord: { keyCode: KeyCode.UpArrow }, when: 'whenContext1 && whenContext2', isDefault: false }));\n\n\t\tawait testObject.resolve(new Map<string, string>());\n\t\tconst actual = testObject.fetch('\"cmd shift esc del\"').filter(element => element.keybindingItem.command === command);\n\t\tassert.strictEqual(0, actual.length);\n\t});\n\n\ttest('filter matches with + separator', async () => {\n\t\tconst command = 'a' + uuid.generateUuid();\n\t\tconst expected = aResolvedKeybindingItem({ command, firstChord: { keyCode: KeyCode.KeyC, modifiers: { ctrlKey: true } }, when: 'whenContext1 && whenContext2', isDefault: false });\n\t\tprepareKeybindingService(expected, aResolvedKeybindingItem({ command, firstChord: { keyCode: KeyCode.Escape, modifiers: { shiftKey: true, metaKey: true } }, secondChord: { keyCode: KeyCode.KeyC, modifiers: { ctrlKey: true } }, when: 'whenContext1 && whenContext2', isDefault: false }));\n\n\t\tawait testObject.resolve(new Map<string, string>());\n\t\tconst actual = testObject.fetch('\"control+c\"').filter(element => element.keybindingItem.command === command);\n\t\tassert.strictEqual(1, actual.length);\n\t\tassert.deepStrictEqual(actual[0].keybindingMatches!.firstPart, { ctrlKey: true, keyCode: true });\n\t\tassert.deepStrictEqual(actual[0].keybindingMatches!.chordPart, {});\n\t});\n\n\ttest('filter by keybinding prefix', async () => {\n\t\tconst command = 'a' + uuid.generateUuid();\n\t\tconst expected = aResolvedKeybindingItem({ command, firstChord: { keyCode: KeyCode.KeyC, modifiers: { ctrlKey: true } }, when: 'whenContext1 && whenContext2', isDefault: false });\n\t\tprepareKeybindingService(expected, aResolvedKeybindingItem({ command, firstChord: { keyCode: KeyCode.Escape, modifiers: { shiftKey: true, metaKey: true } }, secondChord: { keyCode: KeyCode.KeyC, modifiers: { ctrlKey: true } }, when: 'whenContext1 && whenContext2', isDefault: false }));\n\n\t\tawait testObject.resolve(new Map<string, string>());\n\t\tconst actual = testObject.fetch('@keybinding:control+c').filter(element => element.keybindingItem.command === command);\n\t\tassert.strictEqual(1, actual.length);\n\t\tassert.deepStrictEqual(actual[0].keybindingMatches!.firstPart, { ctrlKey: true, keyCode: true });\n\t\tassert.deepStrictEqual(actual[0].keybindingMatches!.chordPart, {});\n\t});\n\n\ttest('filter matches with + separator in first and chord parts', async () => {\n\t\tconst command = 'a' + uuid.generateUuid();\n\t\tconst expected = aResolvedKeybindingItem({ command, firstChord: { keyCode: KeyCode.Escape, modifiers: { shiftKey: true, metaKey: true } }, secondChord: { keyCode: KeyCode.KeyC, modifiers: { ctrlKey: true } }, when: 'whenContext1 && whenContext2', isDefault: false });\n\t\tprepareKeybindingService(expected, aResolvedKeybindingItem({ command, firstChord: { keyCode: KeyCode.KeyC, modifiers: { ctrlKey: true } }, when: 'whenContext1 && whenContext2', isDefault: false }));\n\n\t\tawait testObject.resolve(new Map<string, string>());\n\t\tconst actual = testObject.fetch('\"shift+meta+escape ctrl+c\"').filter(element => element.keybindingItem.command === command);\n\t\tassert.strictEqual(1, actual.length);\n\t\tassert.deepStrictEqual(actual[0].keybindingMatches!.firstPart, { shiftKey: true, metaKey: true, keyCode: true });\n\t\tassert.deepStrictEqual(actual[0].keybindingMatches!.chordPart, { keyCode: true, ctrlKey: true });\n\t});\n\n\ttest('filter by keybinding prefix with chord', async () => {\n\t\tconst command = 'a' + uuid.generateUuid();\n\t\tconst expected = aResolvedKeybindingItem({ command, firstChord: { keyCode: KeyCode.Escape, modifiers: { shiftKey: true, metaKey: true } }, secondChord: { keyCode: KeyCode.KeyC, modifiers: { ctrlKey: true } }, when: 'whenContext1 && whenContext2', isDefault: false });\n\t\tprepareKeybindingService(expected, aResolvedKeybindingItem({ command, firstChord: { keyCode: KeyCode.KeyC, modifiers: { ctrlKey: true } }, when: 'whenContext1 && whenContext2', isDefault: false }));\n\n\t\tawait testObject.resolve(new Map<string, string>());\n\t\tconst actual = testObject.fetch('@keybinding:\"shift+meta+escape ctrl+c\"').filter(element => element.keybindingItem.command === command);\n\t\tassert.strictEqual(1, actual.length);\n\t\tassert.deepStrictEqual(actual[0].keybindingMatches!.firstPart, { shiftKey: true, metaKey: true, keyCode: true });\n\t\tassert.deepStrictEqual(actual[0].keybindingMatches!.chordPart, { keyCode: true, ctrlKey: true });\n\t});\n\n\ttest('filter exact matches with space #32993', async () => {\n\t\tconst command = 'a' + uuid.generateUuid();\n\t\tconst expected = aResolvedKeybindingItem({ command, firstChord: { keyCode: KeyCode.Space, modifiers: { ctrlKey: true } }, when: 'whenContext1 && whenContext2', isDefault: false });\n\t\tprepareKeybindingService(expected, aResolvedKeybindingItem({ command, firstChord: { keyCode: KeyCode.Backspace, modifiers: { ctrlKey: true } }, when: 'whenContext1 && whenContext2', isDefault: false }));\n\n\t\tawait testObject.resolve(new Map<string, string>());\n\t\tconst actual = testObject.fetch('\"ctrl+space\"').filter(element => element.keybindingItem.command === command);\n\t\tassert.strictEqual(1, actual.length);\n\t});\n\n\ttest('filter exact matches with user settings label', async () => {\n\t\ttestObject = disposables.add(instantiationService.createInstance(KeybindingsEditorModel, OperatingSystem.Macintosh));\n\t\tconst command = 'a' + uuid.generateUuid();\n\t\tconst expected = aResolvedKeybindingItem({ command, firstChord: { keyCode: KeyCode.DownArrow } });\n\t\tprepareKeybindingService(expected, aResolvedKeybindingItem({ command: 'down', firstChord: { keyCode: KeyCode.Escape } }));\n\n\t\tawait testObject.resolve(new Map<string, string>());\n\t\tconst actual = testObject.fetch('\"down\"').filter(element => element.keybindingItem.command === command);\n\t\tassert.strictEqual(1, actual.length);\n\t\tassert.deepStrictEqual(actual[0].keybindingMatches!.firstPart, { keyCode: true });\n\t});\n\n\ttest('filter exact matches also return chords', async () => {\n\t\tconst command = 'a' + uuid.generateUuid();\n\t\tconst expected = aResolvedKeybindingItem({ command, firstChord: { keyCode: KeyCode.KeyK, modifiers: { ctrlKey: true } }, secondChord: { keyCode: KeyCode.KeyC, modifiers: { ctrlKey: true } }, when: 'whenContext1 && whenContext2', isDefault: false });\n\t\tprepareKeybindingService(expected, aResolvedKeybindingItem({ command, firstChord: { keyCode: KeyCode.Escape, modifiers: { shiftKey: true, metaKey: true } }, secondChord: { keyCode: KeyCode.KeyC, modifiers: { ctrlKey: true } }, when: 'whenContext1 && whenContext2', isDefault: false }));\n\n\t\tawait testObject.resolve(new Map<string, string>());\n\t\tconst actual = testObject.fetch('\"control+k\"').filter(element => element.keybindingItem.command === command);\n\t\tassert.strictEqual(1, actual.length);\n\t\tassert.deepStrictEqual(actual[0].keybindingMatches!.firstPart, { ctrlKey: true, keyCode: true });\n\t\tassert.deepStrictEqual(actual[0].keybindingMatches!.chordPart, {});\n\t});\n\n\ttest('filter modifiers are not matched when not completely matched (prefix)', async () => {\n\t\ttestObject = disposables.add(instantiationService.createInstance(KeybindingsEditorModel, OperatingSystem.Macintosh));\n\t\tconst term = `alt.${uuid.generateUuid()}`;\n\t\tconst command = `command.${term}`;\n\t\tconst expected = aResolvedKeybindingItem({ command, firstChord: { keyCode: KeyCode.Escape }, isDefault: false });\n\t\tprepareKeybindingService(expected, aResolvedKeybindingItem({ command: 'some_command', firstChord: { keyCode: KeyCode.Escape, modifiers: { altKey: true } }, isDefault: false }));\n\n\t\tawait testObject.resolve(new Map<string, string>());\n\t\tconst actual = testObject.fetch(term);\n\t\tassert.strictEqual(1, actual.length);\n\t\tassert.strictEqual(command, actual[0].keybindingItem.command);\n\t\tassert.strictEqual(1, actual[0].commandIdMatches?.length);\n\t});\n\n\ttest('filter modifiers are not matched when not completely matched (includes)', async () => {\n\t\ttestObject = disposables.add(instantiationService.createInstance(KeybindingsEditorModel, OperatingSystem.Macintosh));\n\t\tconst term = `abcaltdef.${uuid.generateUuid()}`;\n\t\tconst command = `command.${term}`;\n\t\tconst expected = aResolvedKeybindingItem({ command, firstChord: { keyCode: KeyCode.Escape }, isDefault: false });\n\t\tprepareKeybindingService(expected, aResolvedKeybindingItem({ command: 'some_command', firstChord: { keyCode: KeyCode.Escape, modifiers: { altKey: true } }, isDefault: false }));\n\n\t\tawait testObject.resolve(new Map<string, string>());\n\t\tconst actual = testObject.fetch(term);\n\t\tassert.strictEqual(1, actual.length);\n\t\tassert.strictEqual(command, actual[0].keybindingItem.command);\n\t\tassert.strictEqual(1, actual[0].commandIdMatches?.length);\n\t});\n\n\ttest('filter modifiers are matched with complete term', async () => {\n\t\ttestObject = disposables.add(instantiationService.createInstance(KeybindingsEditorModel, OperatingSystem.Macintosh));\n\t\tconst command = `command.${uuid.generateUuid()}`;\n\t\tconst expected = aResolvedKeybindingItem({ command, firstChord: { keyCode: KeyCode.Escape, modifiers: { altKey: true } }, isDefault: false });\n\t\tprepareKeybindingService(expected, aResolvedKeybindingItem({ command: 'some_command', firstChord: { keyCode: KeyCode.Escape }, isDefault: false }));\n\n\t\tawait testObject.resolve(new Map<string, string>());\n\t\tconst actual = testObject.fetch('alt').filter(element => element.keybindingItem.command === command);\n\t\tassert.strictEqual(1, actual.length);\n\t\tassert.deepStrictEqual(actual[0].keybindingMatches!.firstPart, { altKey: true });\n\t});\n\n\ttest('filter by extension', async () => {\n\t\ttestObject = disposables.add(instantiationService.createInstance(KeybindingsEditorModel, OperatingSystem.Macintosh));\n\t\tconst command1 = `command.${uuid.generateUuid()}`;\n\t\tconst command2 = `command.${uuid.generateUuid()}`;\n\t\textensions.push({ identifier: new ExtensionIdentifier('foo'), displayName: 'foo bar' }, { identifier: new ExtensionIdentifier('bar'), displayName: 'bar foo' });\n\t\tdisposables.add(MenuRegistry.addCommand({ id: command2, title: 'title', category: 'category', source: { id: extensions[1].identifier!.value, title: extensions[1].displayName! } }));\n\t\tconst expected = aResolvedKeybindingItem({ command: command1, firstChord: { keyCode: KeyCode.Escape, modifiers: { altKey: true } }, isDefault: true, extensionId: extensions[0].identifier!.value });\n\t\tprepareKeybindingService(expected, aResolvedKeybindingItem({ command: command2, isDefault: true }));\n\n\t\tawait testObject.resolve(new Map<string, string>());\n\t\tlet actual = testObject.fetch('@ext:foo');\n\t\tassert.strictEqual(1, actual.length);\n\t\tassert.deepStrictEqual(actual[0].keybindingItem.command, command1);\n\n\t\tactual = testObject.fetch('@ext:\"bar foo\"');\n\t\tassert.strictEqual(1, actual.length);\n\t\tassert.deepStrictEqual(actual[0].keybindingItem.command, command2);\n\t});\n\n\tfunction prepareKeybindingService(...keybindingItems: ResolvedKeybindingItem[]): ResolvedKeybindingItem[] {\n\t\tinstantiationService.stub(IKeybindingService, 'getKeybindings', () => keybindingItems);\n\t\tinstantiationService.stub(IKeybindingService, 'getDefaultKeybindings', () => keybindingItems);\n\t\treturn keybindingItems;\n\t}\n\n\tfunction registerCommandWithTitle(command: string, title: string): void {\n\t\tdisposables.add(registerAction2(class extends Action2 {\n\t\t\tconstructor() {\n\t\t\t\tsuper({\n\t\t\t\t\tid: command,\n\t\t\t\t\ttitle: { value: title, original: title },\n\t\t\t\t\tf1: true\n\t\t\t\t});\n\t\t\t}\n\t\t\tasync run(): Promise<void> { }\n\t\t}));\n\t}\n\n\tfunction assertKeybindingItems(actual: ResolvedKeybindingItem[], expected: ResolvedKeybindingItem[]) {\n\t\tassert.strictEqual(actual.length, expected.length);\n\t\tfor (let i = 0; i < actual.length; i++) {\n\t\t\tassertKeybindingItem(actual[i], expected[i]);\n\t\t}\n\t}\n\n\tfunction assertKeybindingItem(actual: ResolvedKeybindingItem, expected: ResolvedKeybindingItem): void {\n\t\tassert.strictEqual(actual.command, expected.command);\n\t\tif (actual.when) {\n\t\t\tassert.ok(!!expected.when);\n\t\t\tassert.strictEqual(actual.when.serialize(), expected.when.serialize());\n\t\t} else {\n\t\t\tassert.ok(!expected.when);\n\t\t}\n\t\tassert.strictEqual(actual.isDefault, expected.isDefault);\n\n\t\tif (actual.resolvedKeybinding) {\n\t\t\tassert.ok(!!expected.resolvedKeybinding);\n\t\t\tassert.strictEqual(actual.resolvedKeybinding.getLabel(), expected.resolvedKeybinding.getLabel());\n\t\t} else {\n\t\t\tassert.ok(!expected.resolvedKeybinding);\n\t\t}\n\t}\n\n\tfunction aResolvedKeybindingItem({ command, when, isDefault, firstChord, secondChord, extensionId }: { command?: string; when?: string; isDefault?: boolean; firstChord?: { keyCode: KeyCode; modifiers?: Modifiers }; secondChord?: { keyCode: KeyCode; modifiers?: Modifiers }; extensionId?: string }): ResolvedKeybindingItem {\n\t\tconst aSimpleKeybinding = function (chord: { keyCode: KeyCode; modifiers?: Modifiers }): KeyCodeChord {\n\t\t\tconst { ctrlKey, shiftKey, altKey, metaKey } = chord.modifiers || { ctrlKey: false, shiftKey: false, altKey: false, metaKey: false };\n\t\t\treturn new KeyCodeChord(ctrlKey!, shiftKey!, altKey!, metaKey!, chord.keyCode);\n\t\t};\n\t\tconst chords: KeyCodeChord[] = [];\n\t\tif (firstChord) {\n\t\t\tchords.push(aSimpleKeybinding(firstChord));\n\t\t\tif (secondChord) {\n\t\t\t\tchords.push(aSimpleKeybinding(secondChord));\n\t\t\t}\n\t\t}\n\t\tconst keybinding = chords.length > 0 ? new USLayoutResolvedKeybinding(chords, OS) : undefined;\n\t\treturn new ResolvedKeybindingItem(keybinding, command || 'some command', null, when ? ContextKeyExpr.deserialize(when) : undefined, isDefault === undefined ? true : isDefault, extensionId ?? null, false);\n\t}\n\n\tfunction asResolvedKeybindingItems(keybindingEntries: IKeybindingItemEntry[], keepUnassigned: boolean = false): ResolvedKeybindingItem[] {\n\t\tif (!keepUnassigned) {\n\t\t\tkeybindingEntries = keybindingEntries.filter(keybindingEntry => !!keybindingEntry.keybindingItem.keybinding);\n\t\t}\n\t\treturn keybindingEntries.map(entry => entry.keybindingItem.keybindingItem);\n\t}\n\n\n});\n"],
  "mappings": "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",
  "names": []
}
