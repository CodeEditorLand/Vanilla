import s from"assert";import{ensureNoDisposablesAreLeakedInTestSuite as a}from"../../../../../base/test/common/utils.js";import{TestCommandService as d}from"../../../../../editor/test/browser/editorTestServices.js";import{ICommandService as m}from"../../../../../platform/commands/common/commands.js";import{SyncDescriptor as p}from"../../../../../platform/instantiation/common/descriptors.js";import{ServiceCollection as S}from"../../../../../platform/instantiation/common/serviceCollection.js";import{IURLService as v}from"../../../../../platform/url/common/url.js";import{DEFAULT_EDITOR_ASSOCIATION as f}from"../../../../common/editor.js";import{IJSONEditingService as l}from"../../../configuration/common/jsonEditing.js";import{TestJSONEditingService as u}from"../../../configuration/test/common/testServices.js";import{PreferencesService as n}from"../../browser/preferencesService.js";import{IPreferencesService as E}from"../../common/preferences.js";import{IRemoteAgentService as I}from"../../../remote/common/remoteAgentService.js";import{TestRemoteAgentService as O,TestEditorService as T,workbenchInstantiationService as y}from"../../../../test/browser/workbenchTestServices.js";suite("PreferencesService",()=>{let e,i,t;const o=a();setup(()=>{t=o.add(new g),e=y({editorService:()=>t},o),e.stub(l,u),e.stub(I,O),e.stub(m,d),e.stub(v,{registerHandler:()=>{}});const r=new S;r.set(E,new p(n));const c=o.add(e.createChild(r));i=o.add(c.createInstance(n))}),test("options are preserved when calling openEditor",async()=>{i.openSettings({jsonEditor:!1,query:"test query"});const r=t.lastOpenEditorOptions;s.strictEqual(r.focusSearch,!0),s.strictEqual(r.override,f.id),s.strictEqual(r.query,"test query")})});class g extends T{lastOpenEditorOptions;async openEditor(i,t){return this.lastOpenEditorOptions=t,super.openEditor(i,t)}}
