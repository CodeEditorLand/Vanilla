var p=Object.defineProperty;var a=Object.getOwnPropertyDescriptor;var m=(i,e,s,t)=>{for(var o=t>1?void 0:t?a(e,s):e,n=i.length-1,d;n>=0;n--)(d=i[n])&&(o=(t?d(e,s,o):d(o))||o);return t&&o&&p(e,s,o),o},c=(i,e)=>(s,t)=>e(s,t,i);import{Codicon as g}from"../../../../base/common/codicons.js";import{Schemas as f}from"../../../../base/common/network.js";import{URI as I}from"../../../../base/common/uri.js";import*as l from"../../../../nls.js";import{registerIcon as h}from"../../../../platform/theme/common/iconRegistry.js";import{EditorInput as v}from"../../../common/editor/editorInput.js";import{IPreferencesService as u}from"./preferences.js";const y=h("settings-editor-label-icon",g.settings,l.localize("settingsEditorLabelIcon","Icon of the settings editor label."));let r=class extends v{static ID="workbench.input.settings2";_settingsModel;resource=I.from({scheme:f.vscodeSettings,path:"settingseditor"});constructor(e){super(),this._settingsModel=e.createSettings2EditorModel()}matches(e){return super.matches(e)||e instanceof r}get typeId(){return r.ID}getName(){return l.localize("settingsEditor2InputName","Settings")}getIcon(){return y}async resolve(){return this._settingsModel}dispose(){this._settingsModel.dispose(),super.dispose()}};r=m([c(0,u)],r);export{r as SettingsEditor2Input};
