{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/preferences/common/preferencesEditorInput.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Codicon } from '../../../../base/common/codicons.js';\nimport { Schemas } from '../../../../base/common/network.js';\nimport { ThemeIcon } from '../../../../base/common/themables.js';\nimport { URI } from '../../../../base/common/uri.js';\nimport * as nls from '../../../../nls.js';\nimport { registerIcon } from '../../../../platform/theme/common/iconRegistry.js';\nimport { IUntypedEditorInput } from '../../../common/editor.js';\nimport { EditorInput } from '../../../common/editor/editorInput.js';\nimport { IPreferencesService } from './preferences.js';\nimport { Settings2EditorModel } from './preferencesModels.js';\n\nconst SettingsEditorIcon = registerIcon('settings-editor-label-icon', Codicon.settings, nls.localize('settingsEditorLabelIcon', 'Icon of the settings editor label.'));\n\nexport class SettingsEditor2Input extends EditorInput {\n\n\tstatic readonly ID: string = 'workbench.input.settings2';\n\tprivate readonly _settingsModel: Settings2EditorModel;\n\n\treadonly resource: URI = URI.from({\n\t\tscheme: Schemas.vscodeSettings,\n\t\tpath: `settingseditor`\n\t});\n\n\tconstructor(\n\t\t@IPreferencesService _preferencesService: IPreferencesService,\n\t) {\n\t\tsuper();\n\n\t\tthis._settingsModel = _preferencesService.createSettings2EditorModel();\n\t}\n\n\toverride matches(otherInput: EditorInput | IUntypedEditorInput): boolean {\n\t\treturn super.matches(otherInput) || otherInput instanceof SettingsEditor2Input;\n\t}\n\n\toverride get typeId(): string {\n\t\treturn SettingsEditor2Input.ID;\n\t}\n\n\toverride getName(): string {\n\t\treturn nls.localize('settingsEditor2InputName', \"Settings\");\n\t}\n\n\toverride getIcon(): ThemeIcon {\n\t\treturn SettingsEditorIcon;\n\t}\n\n\toverride async resolve(): Promise<Settings2EditorModel> {\n\t\treturn this._settingsModel;\n\t}\n\n\toverride dispose(): void {\n\t\tthis._settingsModel.dispose();\n\n\t\tsuper.dispose();\n\t}\n}\n"],
  "mappings": ";;;;;;;;;;;;AAKA,SAAS,eAAe;AACxB,SAAS,eAAe;AACxB,SAAS,iBAAiB;AAC1B,SAAS,WAAW;AACpB,YAAY,SAAS;AACrB,SAAS,oBAAoB;AAC7B,SAAS,2BAA2B;AACpC,SAAS,mBAAmB;AAC5B,SAAS,2BAA2B;AACpC,SAAS,4BAA4B;AAErC,MAAM,qBAAqB,aAAa,8BAA8B,QAAQ,UAAU,IAAI,SAAS,2BAA2B,oCAAoC,CAAC;AAE9J,IAAM,uBAAN,cAAmC,YAAY;AAAA,EAlBtD,OAkBsD;AAAA;AAAA;AAAA,EAErD,OAAgB,KAAa;AAAA,EACZ;AAAA,EAER,WAAgB,IAAI,KAAK;AAAA,IACjC,QAAQ,QAAQ;AAAA,IAChB,MAAM;AAAA,EACP,CAAC;AAAA,EAED,YACsB,qBACpB;AACD,UAAM;AAEN,SAAK,iBAAiB,oBAAoB,2BAA2B;AAAA,EACtE;AAAA,EAES,QAAQ,YAAwD;AACxE,WAAO,MAAM,QAAQ,UAAU,KAAK,sBAAsB;AAAA,EAC3D;AAAA,EAEA,IAAa,SAAiB;AAC7B,WAAO,qBAAqB;AAAA,EAC7B;AAAA,EAES,UAAkB;AAC1B,WAAO,IAAI,SAAS,4BAA4B,UAAU;AAAA,EAC3D;AAAA,EAES,UAAqB;AAC7B,WAAO;AAAA,EACR;AAAA,EAEA,MAAe,UAAyC;AACvD,WAAO,KAAK;AAAA,EACb;AAAA,EAES,UAAgB;AACxB,SAAK,eAAe,QAAQ;AAE5B,UAAM,QAAQ;AAAA,EACf;AACD;AA3Ca,uBAAN;AAAA,EAWJ;AAAA,GAXU;",
  "names": []
}
