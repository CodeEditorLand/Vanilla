{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/preferences/common/preferencesModels.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { coalesce, tail } from \"../../../../base/common/arrays.js\";\nimport type { IStringDictionary } from \"../../../../base/common/collections.js\";\nimport { Emitter, type Event } from \"../../../../base/common/event.js\";\nimport { type JSONVisitor, visit } from \"../../../../base/common/json.js\";\nimport {\n\tDisposable,\n\ttype IReference,\n} from \"../../../../base/common/lifecycle.js\";\nimport type { URI } from \"../../../../base/common/uri.js\";\nimport type { ISingleEditOperation } from \"../../../../editor/common/core/editOperation.js\";\nimport { type IRange, Range } from \"../../../../editor/common/core/range.js\";\nimport { Selection } from \"../../../../editor/common/core/selection.js\";\nimport type { ITextModel } from \"../../../../editor/common/model.js\";\nimport type { ITextEditorModel } from \"../../../../editor/common/services/resolverService.js\";\nimport * as nls from \"../../../../nls.js\";\nimport {\n\tConfigurationTarget,\n\tIConfigurationService,\n} from \"../../../../platform/configuration/common/configuration.js\";\nimport {\n\ttype ConfigurationDefaultValueSource,\n\tConfigurationScope,\n\tExtensions,\n\ttype IConfigurationNode,\n\ttype IConfigurationPropertySchema,\n\ttype IConfigurationRegistry,\n\ttype IRegisteredConfigurationPropertySchema,\n\tOVERRIDE_PROPERTY_REGEX,\n} from \"../../../../platform/configuration/common/configurationRegistry.js\";\nimport { IKeybindingService } from \"../../../../platform/keybinding/common/keybinding.js\";\nimport { Registry } from \"../../../../platform/registry/common/platform.js\";\nimport { EditorModel } from \"../../../common/editor/editorModel.js\";\nimport {\n\tFOLDER_SCOPES,\n\tWORKSPACE_SCOPES,\n} from \"../../configuration/common/configuration.js\";\nimport {\n\ttype IFilterMetadata,\n\ttype IFilterResult,\n\ttype IGroupFilter,\n\ttype IKeybindingsEditorModel,\n\ttype ISearchResultGroup,\n\ttype ISetting,\n\ttype ISettingMatch,\n\ttype ISettingMatcher,\n\ttype ISettingsEditorModel,\n\ttype ISettingsGroup,\n\tSettingMatchType,\n} from \"./preferences.js\";\nimport { createValidator } from \"./preferencesValidation.js\";\n\nexport const nullRange: IRange = {\n\tstartLineNumber: -1,\n\tstartColumn: -1,\n\tendLineNumber: -1,\n\tendColumn: -1,\n};\nfunction isNullRange(range: IRange): boolean {\n\treturn (\n\t\trange.startLineNumber === -1 &&\n\t\trange.startColumn === -1 &&\n\t\trange.endLineNumber === -1 &&\n\t\trange.endColumn === -1\n\t);\n}\n\nabstract class AbstractSettingsModel extends EditorModel {\n\tprotected _currentResultGroups = new Map<string, ISearchResultGroup>();\n\n\tupdateResultGroup(\n\t\tid: string,\n\t\tresultGroup: ISearchResultGroup | undefined,\n\t): IFilterResult | undefined {\n\t\tif (resultGroup) {\n\t\t\tthis._currentResultGroups.set(id, resultGroup);\n\t\t} else {\n\t\t\tthis._currentResultGroups.delete(id);\n\t\t}\n\n\t\tthis.removeDuplicateResults();\n\t\treturn this.update();\n\t}\n\n\t/**\n\t * Remove duplicates between result groups, preferring results in earlier groups\n\t */\n\tprivate removeDuplicateResults(): void {\n\t\tconst settingKeys = new Set<string>();\n\t\t[...this._currentResultGroups.keys()]\n\t\t\t.sort(\n\t\t\t\t(a, b) =>\n\t\t\t\t\tthis._currentResultGroups.get(a)!.order -\n\t\t\t\t\tthis._currentResultGroups.get(b)!.order,\n\t\t\t)\n\t\t\t.forEach((groupId) => {\n\t\t\t\tconst group = this._currentResultGroups.get(groupId)!;\n\t\t\t\tgroup.result.filterMatches = group.result.filterMatches.filter(\n\t\t\t\t\t(s) => !settingKeys.has(s.setting.key),\n\t\t\t\t);\n\t\t\t\tgroup.result.filterMatches.forEach((s) =>\n\t\t\t\t\tsettingKeys.add(s.setting.key),\n\t\t\t\t);\n\t\t\t});\n\t}\n\n\tfilterSettings(\n\t\tfilter: string,\n\t\tgroupFilter: IGroupFilter,\n\t\tsettingMatcher: ISettingMatcher,\n\t): ISettingMatch[] {\n\t\tconst allGroups = this.filterGroups;\n\n\t\tconst filterMatches: ISettingMatch[] = [];\n\t\tfor (const group of allGroups) {\n\t\t\tconst groupMatched = groupFilter(group);\n\t\t\tfor (const section of group.sections) {\n\t\t\t\tfor (const setting of section.settings) {\n\t\t\t\t\tconst settingMatchResult = settingMatcher(setting, group);\n\n\t\t\t\t\tif (groupMatched || settingMatchResult) {\n\t\t\t\t\t\tfilterMatches.push({\n\t\t\t\t\t\t\tsetting,\n\t\t\t\t\t\t\tmatches:\n\t\t\t\t\t\t\t\tsettingMatchResult &&\n\t\t\t\t\t\t\t\tsettingMatchResult.matches,\n\t\t\t\t\t\t\tmatchType:\n\t\t\t\t\t\t\t\tsettingMatchResult?.matchType ??\n\t\t\t\t\t\t\t\tSettingMatchType.None,\n\t\t\t\t\t\t\tscore: settingMatchResult?.score ?? 0,\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn filterMatches;\n\t}\n\n\tgetPreference(key: string): ISetting | undefined {\n\t\tfor (const group of this.settingsGroups) {\n\t\t\tfor (const section of group.sections) {\n\t\t\t\tfor (const setting of section.settings) {\n\t\t\t\t\tif (key === setting.key) {\n\t\t\t\t\t\treturn setting;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn undefined;\n\t}\n\n\tprotected collectMetadata(\n\t\tgroups: ISearchResultGroup[],\n\t): IStringDictionary<IFilterMetadata> {\n\t\tconst metadata = Object.create(null);\n\t\tlet hasMetadata = false;\n\t\tgroups.forEach((g) => {\n\t\t\tif (g.result.metadata) {\n\t\t\t\tmetadata[g.id] = g.result.metadata;\n\t\t\t\thasMetadata = true;\n\t\t\t}\n\t\t});\n\n\t\treturn hasMetadata ? metadata : null;\n\t}\n\n\tprotected get filterGroups(): ISettingsGroup[] {\n\t\treturn this.settingsGroups;\n\t}\n\n\tabstract settingsGroups: ISettingsGroup[];\n\n\tabstract findValueMatches(filter: string, setting: ISetting): IRange[];\n\n\tprotected abstract update(): IFilterResult | undefined;\n}\n\nexport class SettingsEditorModel\n\textends AbstractSettingsModel\n\timplements ISettingsEditorModel\n{\n\tprivate _settingsGroups: ISettingsGroup[] | undefined;\n\tprotected settingsModel: ITextModel;\n\n\tprivate readonly _onDidChangeGroups: Emitter<void> = this._register(\n\t\tnew Emitter<void>(),\n\t);\n\treadonly onDidChangeGroups: Event<void> = this._onDidChangeGroups.event;\n\n\tconstructor(\n\t\treference: IReference<ITextEditorModel>,\n\t\tprivate _configurationTarget: ConfigurationTarget,\n\t) {\n\t\tsuper();\n\t\tthis.settingsModel = reference.object.textEditorModel!;\n\t\tthis._register(this.onWillDispose(() => reference.dispose()));\n\t\tthis._register(\n\t\t\tthis.settingsModel.onDidChangeContent(() => {\n\t\t\t\tthis._settingsGroups = undefined;\n\t\t\t\tthis._onDidChangeGroups.fire();\n\t\t\t}),\n\t\t);\n\t}\n\n\tget uri(): URI {\n\t\treturn this.settingsModel.uri;\n\t}\n\n\tget configurationTarget(): ConfigurationTarget {\n\t\treturn this._configurationTarget;\n\t}\n\n\tget settingsGroups(): ISettingsGroup[] {\n\t\tif (!this._settingsGroups) {\n\t\t\tthis.parse();\n\t\t}\n\t\treturn this._settingsGroups!;\n\t}\n\n\tget content(): string {\n\t\treturn this.settingsModel.getValue();\n\t}\n\n\tfindValueMatches(filter: string, setting: ISetting): IRange[] {\n\t\treturn this.settingsModel\n\t\t\t.findMatches(filter, setting.valueRange, false, false, null, false)\n\t\t\t.map((match) => match.range);\n\t}\n\n\tprotected isSettingsProperty(\n\t\tproperty: string,\n\t\tpreviousParents: string[],\n\t): boolean {\n\t\treturn previousParents.length === 0; // Settings is root\n\t}\n\n\tprotected parse(): void {\n\t\tthis._settingsGroups = parse(\n\t\t\tthis.settingsModel,\n\t\t\t(property: string, previousParents: string[]): boolean =>\n\t\t\t\tthis.isSettingsProperty(property, previousParents),\n\t\t);\n\t}\n\n\tprotected update(): IFilterResult | undefined {\n\t\tconst resultGroups = [...this._currentResultGroups.values()];\n\t\tif (!resultGroups.length) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\t// Transform resultGroups into IFilterResult - ISetting ranges are already correct here\n\t\tconst filteredSettings: ISetting[] = [];\n\t\tconst matches: IRange[] = [];\n\t\tresultGroups.forEach((group) => {\n\t\t\tgroup.result.filterMatches.forEach((filterMatch) => {\n\t\t\t\tfilteredSettings.push(filterMatch.setting);\n\t\t\t\tif (filterMatch.matches) {\n\t\t\t\t\tmatches.push(...filterMatch.matches);\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\n\t\tlet filteredGroup: ISettingsGroup | undefined;\n\t\tconst modelGroup = this.settingsGroups[0]; // Editable model has one or zero groups\n\t\tif (modelGroup) {\n\t\t\tfilteredGroup = {\n\t\t\t\tid: modelGroup.id,\n\t\t\t\trange: modelGroup.range,\n\t\t\t\tsections: [\n\t\t\t\t\t{\n\t\t\t\t\t\tsettings: filteredSettings,\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\ttitle: modelGroup.title,\n\t\t\t\ttitleRange: modelGroup.titleRange,\n\t\t\t\torder: modelGroup.order,\n\t\t\t\textensionInfo: modelGroup.extensionInfo,\n\t\t\t};\n\t\t}\n\n\t\tconst metadata = this.collectMetadata(resultGroups);\n\t\treturn {\n\t\t\tallGroups: this.settingsGroups,\n\t\t\tfilteredGroups: filteredGroup ? [filteredGroup] : [],\n\t\t\tmatches,\n\t\t\tmetadata,\n\t\t};\n\t}\n}\n\nexport class Settings2EditorModel\n\textends AbstractSettingsModel\n\timplements ISettingsEditorModel\n{\n\tprivate readonly _onDidChangeGroups: Emitter<void> = this._register(\n\t\tnew Emitter<void>(),\n\t);\n\treadonly onDidChangeGroups: Event<void> = this._onDidChangeGroups.event;\n\n\tprivate additionalGroups: ISettingsGroup[] = [];\n\tprivate dirty = false;\n\n\tconstructor(\n\t\tprivate _defaultSettings: DefaultSettings,\n\t\t@IConfigurationService configurationService: IConfigurationService,\n\t) {\n\t\tsuper();\n\n\t\tthis._register(\n\t\t\tconfigurationService.onDidChangeConfiguration((e) => {\n\t\t\t\tif (e.source === ConfigurationTarget.DEFAULT) {\n\t\t\t\t\tthis.dirty = true;\n\t\t\t\t\tthis._onDidChangeGroups.fire();\n\t\t\t\t}\n\t\t\t}),\n\t\t);\n\t\tthis._register(\n\t\t\tRegistry.as<IConfigurationRegistry>(\n\t\t\t\tExtensions.Configuration,\n\t\t\t).onDidSchemaChange((e) => {\n\t\t\t\tthis.dirty = true;\n\t\t\t\tthis._onDidChangeGroups.fire();\n\t\t\t}),\n\t\t);\n\t}\n\n\t/** Doesn't include the \"Commonly Used\" group */\n\tprotected override get filterGroups(): ISettingsGroup[] {\n\t\treturn this.settingsGroups.slice(1);\n\t}\n\n\tget settingsGroups(): ISettingsGroup[] {\n\t\tconst groups = this._defaultSettings.getSettingsGroups(this.dirty);\n\t\tthis.dirty = false;\n\t\treturn [...groups, ...this.additionalGroups];\n\t}\n\n\t/** For programmatically added groups outside of registered configurations */\n\tsetAdditionalGroups(groups: ISettingsGroup[]) {\n\t\tthis.additionalGroups = groups;\n\t}\n\n\tfindValueMatches(filter: string, setting: ISetting): IRange[] {\n\t\t// TODO @roblou\n\t\treturn [];\n\t}\n\n\tprotected update(): IFilterResult {\n\t\tthrow new Error(\"Not supported\");\n\t}\n}\n\nfunction parse(\n\tmodel: ITextModel,\n\tisSettingsProperty: (\n\t\tcurrentProperty: string,\n\t\tpreviousParents: string[],\n\t) => boolean,\n): ISettingsGroup[] {\n\tconst settings: ISetting[] = [];\n\tlet overrideSetting: ISetting | null = null;\n\n\tlet currentProperty: string | null = null;\n\tlet currentParent: any = [];\n\tconst previousParents: any[] = [];\n\tlet settingsPropertyIndex = -1;\n\tconst range = {\n\t\tstartLineNumber: 0,\n\t\tstartColumn: 0,\n\t\tendLineNumber: 0,\n\t\tendColumn: 0,\n\t};\n\n\tfunction onValue(value: any, offset: number, length: number) {\n\t\tif (Array.isArray(currentParent)) {\n\t\t\t(<any[]>currentParent).push(value);\n\t\t} else if (currentProperty) {\n\t\t\tcurrentParent[currentProperty] = value;\n\t\t}\n\t\tif (\n\t\t\tpreviousParents.length === settingsPropertyIndex + 1 ||\n\t\t\t(previousParents.length === settingsPropertyIndex + 2 &&\n\t\t\t\toverrideSetting !== null)\n\t\t) {\n\t\t\t// settings value started\n\t\t\tconst setting =\n\t\t\t\tpreviousParents.length === settingsPropertyIndex + 1\n\t\t\t\t\t? settings[settings.length - 1]\n\t\t\t\t\t: overrideSetting!.overrides![\n\t\t\t\t\t\t\toverrideSetting!.overrides!.length - 1\n\t\t\t\t\t\t];\n\t\t\tif (setting) {\n\t\t\t\tconst valueStartPosition = model.getPositionAt(offset);\n\t\t\t\tconst valueEndPosition = model.getPositionAt(offset + length);\n\t\t\t\tsetting.value = value;\n\t\t\t\tsetting.valueRange = {\n\t\t\t\t\tstartLineNumber: valueStartPosition.lineNumber,\n\t\t\t\t\tstartColumn: valueStartPosition.column,\n\t\t\t\t\tendLineNumber: valueEndPosition.lineNumber,\n\t\t\t\t\tendColumn: valueEndPosition.column,\n\t\t\t\t};\n\t\t\t\tsetting.range = Object.assign(setting.range, {\n\t\t\t\t\tendLineNumber: valueEndPosition.lineNumber,\n\t\t\t\t\tendColumn: valueEndPosition.column,\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t}\n\tconst visitor: JSONVisitor = {\n\t\tonObjectBegin: (offset: number, length: number) => {\n\t\t\tif (isSettingsProperty(currentProperty!, previousParents)) {\n\t\t\t\t// Settings started\n\t\t\t\tsettingsPropertyIndex = previousParents.length;\n\t\t\t\tconst position = model.getPositionAt(offset);\n\t\t\t\trange.startLineNumber = position.lineNumber;\n\t\t\t\trange.startColumn = position.column;\n\t\t\t}\n\t\t\tconst object = {};\n\t\t\tonValue(object, offset, length);\n\t\t\tcurrentParent = object;\n\t\t\tcurrentProperty = null;\n\t\t\tpreviousParents.push(currentParent);\n\t\t},\n\t\tonObjectProperty: (name: string, offset: number, length: number) => {\n\t\t\tcurrentProperty = name;\n\t\t\tif (\n\t\t\t\tpreviousParents.length === settingsPropertyIndex + 1 ||\n\t\t\t\t(previousParents.length === settingsPropertyIndex + 2 &&\n\t\t\t\t\toverrideSetting !== null)\n\t\t\t) {\n\t\t\t\t// setting started\n\t\t\t\tconst settingStartPosition = model.getPositionAt(offset);\n\t\t\t\tconst setting: ISetting = {\n\t\t\t\t\tdescription: [],\n\t\t\t\t\tdescriptionIsMarkdown: false,\n\t\t\t\t\tkey: name,\n\t\t\t\t\tkeyRange: {\n\t\t\t\t\t\tstartLineNumber: settingStartPosition.lineNumber,\n\t\t\t\t\t\tstartColumn: settingStartPosition.column + 1,\n\t\t\t\t\t\tendLineNumber: settingStartPosition.lineNumber,\n\t\t\t\t\t\tendColumn: settingStartPosition.column + length,\n\t\t\t\t\t},\n\t\t\t\t\trange: {\n\t\t\t\t\t\tstartLineNumber: settingStartPosition.lineNumber,\n\t\t\t\t\t\tstartColumn: settingStartPosition.column,\n\t\t\t\t\t\tendLineNumber: 0,\n\t\t\t\t\t\tendColumn: 0,\n\t\t\t\t\t},\n\t\t\t\t\tvalue: null,\n\t\t\t\t\tvalueRange: nullRange,\n\t\t\t\t\tdescriptionRanges: [],\n\t\t\t\t\toverrides: [],\n\t\t\t\t\toverrideOf: overrideSetting ?? undefined,\n\t\t\t\t};\n\t\t\t\tif (previousParents.length === settingsPropertyIndex + 1) {\n\t\t\t\t\tsettings.push(setting);\n\t\t\t\t\tif (OVERRIDE_PROPERTY_REGEX.test(name)) {\n\t\t\t\t\t\toverrideSetting = setting;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\toverrideSetting!.overrides!.push(setting);\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\tonObjectEnd: (offset: number, length: number) => {\n\t\t\tcurrentParent = previousParents.pop();\n\t\t\tif (\n\t\t\t\tsettingsPropertyIndex !== -1 &&\n\t\t\t\t(previousParents.length === settingsPropertyIndex + 1 ||\n\t\t\t\t\t(previousParents.length === settingsPropertyIndex + 2 &&\n\t\t\t\t\t\toverrideSetting !== null))\n\t\t\t) {\n\t\t\t\t// setting ended\n\t\t\t\tconst setting =\n\t\t\t\t\tpreviousParents.length === settingsPropertyIndex + 1\n\t\t\t\t\t\t? settings[settings.length - 1]\n\t\t\t\t\t\t: overrideSetting!.overrides![\n\t\t\t\t\t\t\t\toverrideSetting!.overrides!.length - 1\n\t\t\t\t\t\t\t];\n\t\t\t\tif (setting) {\n\t\t\t\t\tconst valueEndPosition = model.getPositionAt(\n\t\t\t\t\t\toffset + length,\n\t\t\t\t\t);\n\t\t\t\t\tsetting.valueRange = Object.assign(setting.valueRange, {\n\t\t\t\t\t\tendLineNumber: valueEndPosition.lineNumber,\n\t\t\t\t\t\tendColumn: valueEndPosition.column,\n\t\t\t\t\t});\n\t\t\t\t\tsetting.range = Object.assign(setting.range, {\n\t\t\t\t\t\tendLineNumber: valueEndPosition.lineNumber,\n\t\t\t\t\t\tendColumn: valueEndPosition.column,\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\tif (previousParents.length === settingsPropertyIndex + 1) {\n\t\t\t\t\toverrideSetting = null;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (previousParents.length === settingsPropertyIndex) {\n\t\t\t\t// settings ended\n\t\t\t\tconst position = model.getPositionAt(offset);\n\t\t\t\trange.endLineNumber = position.lineNumber;\n\t\t\t\trange.endColumn = position.column;\n\t\t\t\tsettingsPropertyIndex = -1;\n\t\t\t}\n\t\t},\n\t\tonArrayBegin: (offset: number, length: number) => {\n\t\t\tconst array: any[] = [];\n\t\t\tonValue(array, offset, length);\n\t\t\tpreviousParents.push(currentParent);\n\t\t\tcurrentParent = array;\n\t\t\tcurrentProperty = null;\n\t\t},\n\t\tonArrayEnd: (offset: number, length: number) => {\n\t\t\tcurrentParent = previousParents.pop();\n\t\t\tif (\n\t\t\t\tpreviousParents.length === settingsPropertyIndex + 1 ||\n\t\t\t\t(previousParents.length === settingsPropertyIndex + 2 &&\n\t\t\t\t\toverrideSetting !== null)\n\t\t\t) {\n\t\t\t\t// setting value ended\n\t\t\t\tconst setting =\n\t\t\t\t\tpreviousParents.length === settingsPropertyIndex + 1\n\t\t\t\t\t\t? settings[settings.length - 1]\n\t\t\t\t\t\t: overrideSetting!.overrides![\n\t\t\t\t\t\t\t\toverrideSetting!.overrides!.length - 1\n\t\t\t\t\t\t\t];\n\t\t\t\tif (setting) {\n\t\t\t\t\tconst valueEndPosition = model.getPositionAt(\n\t\t\t\t\t\toffset + length,\n\t\t\t\t\t);\n\t\t\t\t\tsetting.valueRange = Object.assign(setting.valueRange, {\n\t\t\t\t\t\tendLineNumber: valueEndPosition.lineNumber,\n\t\t\t\t\t\tendColumn: valueEndPosition.column,\n\t\t\t\t\t});\n\t\t\t\t\tsetting.range = Object.assign(setting.range, {\n\t\t\t\t\t\tendLineNumber: valueEndPosition.lineNumber,\n\t\t\t\t\t\tendColumn: valueEndPosition.column,\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\tonLiteralValue: onValue,\n\t\tonError: (error) => {\n\t\t\tconst setting = settings[settings.length - 1];\n\t\t\tif (\n\t\t\t\tsetting &&\n\t\t\t\t(isNullRange(setting.range) ||\n\t\t\t\t\tisNullRange(setting.keyRange) ||\n\t\t\t\t\tisNullRange(setting.valueRange))\n\t\t\t) {\n\t\t\t\tsettings.pop();\n\t\t\t}\n\t\t},\n\t};\n\tif (!model.isDisposed()) {\n\t\tvisit(model.getValue(), visitor);\n\t}\n\treturn settings.length > 0\n\t\t? [\n\t\t\t\t<ISettingsGroup>{\n\t\t\t\t\tsections: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tsettings,\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t\ttitle: \"\",\n\t\t\t\t\ttitleRange: nullRange,\n\t\t\t\t\trange,\n\t\t\t\t},\n\t\t\t]\n\t\t: [];\n}\n\nexport class WorkspaceConfigurationEditorModel extends SettingsEditorModel {\n\tprivate _configurationGroups: ISettingsGroup[] = [];\n\n\tget configurationGroups(): ISettingsGroup[] {\n\t\treturn this._configurationGroups;\n\t}\n\n\tprotected override parse(): void {\n\t\tsuper.parse();\n\t\tthis._configurationGroups = parse(\n\t\t\tthis.settingsModel,\n\t\t\t(property: string, previousParents: string[]): boolean =>\n\t\t\t\tpreviousParents.length === 0,\n\t\t);\n\t}\n\n\tprotected override isSettingsProperty(\n\t\tproperty: string,\n\t\tpreviousParents: string[],\n\t): boolean {\n\t\treturn property === \"settings\" && previousParents.length === 1;\n\t}\n}\n\nexport class DefaultSettings extends Disposable {\n\tprivate _allSettingsGroups: ISettingsGroup[] | undefined;\n\tprivate _content: string | undefined;\n\tprivate _contentWithoutMostCommonlyUsed: string | undefined;\n\tprivate _settingsByName = new Map<string, ISetting>();\n\n\tprivate readonly _onDidChange: Emitter<void> = this._register(\n\t\tnew Emitter<void>(),\n\t);\n\treadonly onDidChange: Event<void> = this._onDidChange.event;\n\n\tconstructor(\n\t\tprivate _mostCommonlyUsedSettingsKeys: string[],\n\t\treadonly target: ConfigurationTarget,\n\t\treadonly configurationService: IConfigurationService,\n\t) {\n\t\tsuper();\n\t\tthis._register(\n\t\t\tconfigurationService.onDidChangeConfiguration((e) => {\n\t\t\t\tif (e.source === ConfigurationTarget.DEFAULT) {\n\t\t\t\t\tthis.reset();\n\t\t\t\t\tthis._onDidChange.fire();\n\t\t\t\t}\n\t\t\t}),\n\t\t);\n\t}\n\n\tgetContent(forceUpdate = false): string {\n\t\tif (!this._content || forceUpdate) {\n\t\t\tthis.initialize();\n\t\t}\n\n\t\treturn this._content!;\n\t}\n\n\tgetContentWithoutMostCommonlyUsed(forceUpdate = false): string {\n\t\tif (!this._contentWithoutMostCommonlyUsed || forceUpdate) {\n\t\t\tthis.initialize();\n\t\t}\n\n\t\treturn this._contentWithoutMostCommonlyUsed!;\n\t}\n\n\tgetSettingsGroups(forceUpdate = false): ISettingsGroup[] {\n\t\tif (!this._allSettingsGroups || forceUpdate) {\n\t\t\tthis.initialize();\n\t\t}\n\n\t\treturn this._allSettingsGroups!;\n\t}\n\n\tprivate initialize(): void {\n\t\tthis._allSettingsGroups = this.parse();\n\t\tthis._content = this.toContent(this._allSettingsGroups, 0);\n\t\tthis._contentWithoutMostCommonlyUsed = this.toContent(\n\t\t\tthis._allSettingsGroups,\n\t\t\t1,\n\t\t);\n\t}\n\n\tprivate reset(): void {\n\t\tthis._content = undefined;\n\t\tthis._contentWithoutMostCommonlyUsed = undefined;\n\t\tthis._allSettingsGroups = undefined;\n\t}\n\n\tprivate parse(): ISettingsGroup[] {\n\t\tconst settingsGroups = this.getRegisteredGroups();\n\t\tthis.initAllSettingsMap(settingsGroups);\n\t\tconst mostCommonlyUsed = this.getMostCommonlyUsedSettings();\n\t\treturn [mostCommonlyUsed, ...settingsGroups];\n\t}\n\n\tgetRegisteredGroups(): ISettingsGroup[] {\n\t\tconst configurations = Registry.as<IConfigurationRegistry>(\n\t\t\tExtensions.Configuration,\n\t\t)\n\t\t\t.getConfigurations()\n\t\t\t.slice();\n\t\tconst groups = this.removeEmptySettingsGroups(\n\t\t\tconfigurations\n\t\t\t\t.sort(this.compareConfigurationNodes)\n\t\t\t\t.reduce<ISettingsGroup[]>(\n\t\t\t\t\t(result, config, index, array) =>\n\t\t\t\t\t\tthis.parseConfig(config, result, array),\n\t\t\t\t\t[],\n\t\t\t\t),\n\t\t);\n\n\t\treturn this.sortGroups(groups);\n\t}\n\n\tprivate sortGroups(groups: ISettingsGroup[]): ISettingsGroup[] {\n\t\tgroups.forEach((group) => {\n\t\t\tgroup.sections.forEach((section) => {\n\t\t\t\tsection.settings.sort((a, b) => a.key.localeCompare(b.key));\n\t\t\t});\n\t\t});\n\n\t\treturn groups;\n\t}\n\n\tprivate initAllSettingsMap(allSettingsGroups: ISettingsGroup[]): void {\n\t\tthis._settingsByName = new Map<string, ISetting>();\n\t\tfor (const group of allSettingsGroups) {\n\t\t\tfor (const section of group.sections) {\n\t\t\t\tfor (const setting of section.settings) {\n\t\t\t\t\tthis._settingsByName.set(setting.key, setting);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate getMostCommonlyUsedSettings(): ISettingsGroup {\n\t\tconst settings = coalesce(\n\t\t\tthis._mostCommonlyUsedSettingsKeys.map((key) => {\n\t\t\t\tconst setting = this._settingsByName.get(key);\n\t\t\t\tif (setting) {\n\t\t\t\t\treturn {\n\t\t\t\t\t\tdescription: setting.description,\n\t\t\t\t\t\tkey: setting.key,\n\t\t\t\t\t\tvalue: setting.value,\n\t\t\t\t\t\tkeyRange: nullRange,\n\t\t\t\t\t\trange: nullRange,\n\t\t\t\t\t\tvalueRange: nullRange,\n\t\t\t\t\t\toverrides: [],\n\t\t\t\t\t\tscope: ConfigurationScope.RESOURCE,\n\t\t\t\t\t\ttype: setting.type,\n\t\t\t\t\t\tenum: setting.enum,\n\t\t\t\t\t\tenumDescriptions: setting.enumDescriptions,\n\t\t\t\t\t\tdescriptionRanges: [],\n\t\t\t\t\t} satisfies ISetting;\n\t\t\t\t}\n\t\t\t\treturn null;\n\t\t\t}),\n\t\t);\n\n\t\treturn {\n\t\t\tid: \"mostCommonlyUsed\",\n\t\t\trange: nullRange,\n\t\t\ttitle: nls.localize(\"commonlyUsed\", \"Commonly Used\"),\n\t\t\ttitleRange: nullRange,\n\t\t\tsections: [\n\t\t\t\t{\n\t\t\t\t\tsettings,\n\t\t\t\t},\n\t\t\t],\n\t\t} satisfies ISettingsGroup;\n\t}\n\n\tprivate parseConfig(\n\t\tconfig: IConfigurationNode,\n\t\tresult: ISettingsGroup[],\n\t\tconfigurations: IConfigurationNode[],\n\t\tsettingsGroup?: ISettingsGroup,\n\t\tseenSettings?: { [key: string]: boolean },\n\t): ISettingsGroup[] {\n\t\tseenSettings = seenSettings ? seenSettings : {};\n\t\tlet title = config.title;\n\t\tif (!title) {\n\t\t\tconst configWithTitleAndSameId = configurations.find(\n\t\t\t\t(c) => c.id === config.id && c.title,\n\t\t\t);\n\t\t\tif (configWithTitleAndSameId) {\n\t\t\t\ttitle = configWithTitleAndSameId.title;\n\t\t\t}\n\t\t}\n\t\tif (title) {\n\t\t\tif (settingsGroup) {\n\t\t\t\tsettingsGroup.sections[\n\t\t\t\t\tsettingsGroup.sections.length - 1\n\t\t\t\t].title = title;\n\t\t\t} else {\n\t\t\t\tsettingsGroup = result.find(\n\t\t\t\t\t(g) =>\n\t\t\t\t\t\tg.title === title &&\n\t\t\t\t\t\tg.extensionInfo?.id === config.extensionInfo?.id,\n\t\t\t\t);\n\t\t\t\tif (!settingsGroup) {\n\t\t\t\t\tsettingsGroup = {\n\t\t\t\t\t\tsections: [{ settings: [] }],\n\t\t\t\t\t\tid: config.id || \"\",\n\t\t\t\t\t\ttitle: title || \"\",\n\t\t\t\t\t\ttitleRange: nullRange,\n\t\t\t\t\t\torder: config.order,\n\t\t\t\t\t\trange: nullRange,\n\t\t\t\t\t\textensionInfo: config.extensionInfo,\n\t\t\t\t\t};\n\t\t\t\t\tresult.push(settingsGroup);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (config.properties) {\n\t\t\tif (!settingsGroup) {\n\t\t\t\tsettingsGroup = {\n\t\t\t\t\tsections: [{ settings: [] }],\n\t\t\t\t\tid: config.id || \"\",\n\t\t\t\t\ttitle: config.id || \"\",\n\t\t\t\t\ttitleRange: nullRange,\n\t\t\t\t\torder: config.order,\n\t\t\t\t\trange: nullRange,\n\t\t\t\t\textensionInfo: config.extensionInfo,\n\t\t\t\t};\n\t\t\t\tresult.push(settingsGroup);\n\t\t\t}\n\t\t\tconst configurationSettings: ISetting[] = [];\n\t\t\tfor (const setting of [\n\t\t\t\t...settingsGroup.sections[settingsGroup.sections.length - 1]\n\t\t\t\t\t.settings,\n\t\t\t\t...this.parseSettings(config),\n\t\t\t]) {\n\t\t\t\tif (!seenSettings[setting.key]) {\n\t\t\t\t\tconfigurationSettings.push(setting);\n\t\t\t\t\tseenSettings[setting.key] = true;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (configurationSettings.length) {\n\t\t\t\tsettingsGroup.sections[\n\t\t\t\t\tsettingsGroup.sections.length - 1\n\t\t\t\t].settings = configurationSettings;\n\t\t\t}\n\t\t}\n\t\tconfig.allOf?.forEach((c) =>\n\t\t\tthis.parseConfig(\n\t\t\t\tc,\n\t\t\t\tresult,\n\t\t\t\tconfigurations,\n\t\t\t\tsettingsGroup,\n\t\t\t\tseenSettings,\n\t\t\t),\n\t\t);\n\t\treturn result;\n\t}\n\n\tprivate removeEmptySettingsGroups(\n\t\tsettingsGroups: ISettingsGroup[],\n\t): ISettingsGroup[] {\n\t\tconst result: ISettingsGroup[] = [];\n\t\tfor (const settingsGroup of settingsGroups) {\n\t\t\tsettingsGroup.sections = settingsGroup.sections.filter(\n\t\t\t\t(section) => section.settings.length > 0,\n\t\t\t);\n\t\t\tif (settingsGroup.sections.length) {\n\t\t\t\tresult.push(settingsGroup);\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n\n\tprivate parseSettings(config: IConfigurationNode): ISetting[] {\n\t\tconst result: ISetting[] = [];\n\n\t\tconst settingsObject = config.properties;\n\t\tconst extensionInfo = config.extensionInfo;\n\n\t\t// Try using the title if the category id wasn't given\n\t\t// (in which case the category id is the same as the extension id)\n\t\tconst categoryLabel =\n\t\t\tconfig.extensionInfo?.id === config.id ? config.title : config.id;\n\n\t\tfor (const key in settingsObject) {\n\t\t\tconst prop: IConfigurationPropertySchema = settingsObject[key];\n\t\t\tif (this.matchesScope(prop)) {\n\t\t\t\tconst value = prop.default;\n\t\t\t\tlet description =\n\t\t\t\t\tprop.markdownDescription || prop.description || \"\";\n\t\t\t\tif (typeof description !== \"string\") {\n\t\t\t\t\tdescription = \"\";\n\t\t\t\t}\n\t\t\t\tconst descriptionLines = description.split(\"\\n\");\n\t\t\t\tconst overrides = OVERRIDE_PROPERTY_REGEX.test(key)\n\t\t\t\t\t? this.parseOverrideSettings(prop.default)\n\t\t\t\t\t: [];\n\t\t\t\tlet listItemType: string | undefined;\n\t\t\t\tif (\n\t\t\t\t\tprop.type === \"array\" &&\n\t\t\t\t\tprop.items &&\n\t\t\t\t\t!Array.isArray(prop.items) &&\n\t\t\t\t\tprop.items.type\n\t\t\t\t) {\n\t\t\t\t\tif (prop.items.enum) {\n\t\t\t\t\t\tlistItemType = \"enum\";\n\t\t\t\t\t} else if (!Array.isArray(prop.items.type)) {\n\t\t\t\t\t\tlistItemType = prop.items.type;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tconst objectProperties =\n\t\t\t\t\tprop.type === \"object\" ? prop.properties : undefined;\n\t\t\t\tconst objectPatternProperties =\n\t\t\t\t\tprop.type === \"object\" ? prop.patternProperties : undefined;\n\t\t\t\tconst objectAdditionalProperties =\n\t\t\t\t\tprop.type === \"object\"\n\t\t\t\t\t\t? prop.additionalProperties\n\t\t\t\t\t\t: undefined;\n\n\t\t\t\tlet enumToUse = prop.enum;\n\t\t\t\tlet enumDescriptions =\n\t\t\t\t\tprop.markdownEnumDescriptions ?? prop.enumDescriptions;\n\t\t\t\tlet enumDescriptionsAreMarkdown =\n\t\t\t\t\t!!prop.markdownEnumDescriptions;\n\t\t\t\tif (listItemType === \"enum\" && !Array.isArray(prop.items)) {\n\t\t\t\t\tenumToUse = prop.items!.enum;\n\t\t\t\t\tenumDescriptions =\n\t\t\t\t\t\tprop.items!.markdownEnumDescriptions ??\n\t\t\t\t\t\tprop.items!.enumDescriptions;\n\t\t\t\t\tenumDescriptionsAreMarkdown =\n\t\t\t\t\t\t!!prop.items!.markdownEnumDescriptions;\n\t\t\t\t}\n\n\t\t\t\tlet allKeysAreBoolean = false;\n\t\t\t\tif (\n\t\t\t\t\tprop.type === \"object\" &&\n\t\t\t\t\t!prop.additionalProperties &&\n\t\t\t\t\tprop.properties &&\n\t\t\t\t\tObject.keys(prop.properties).length\n\t\t\t\t) {\n\t\t\t\t\tallKeysAreBoolean = Object.keys(prop.properties).every(\n\t\t\t\t\t\t(key) => {\n\t\t\t\t\t\t\treturn prop.properties![key].type === \"boolean\";\n\t\t\t\t\t\t},\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\tlet isLanguageTagSetting = false;\n\t\t\t\tif (OVERRIDE_PROPERTY_REGEX.test(key)) {\n\t\t\t\t\tisLanguageTagSetting = true;\n\t\t\t\t}\n\n\t\t\t\tlet defaultValueSource:\n\t\t\t\t\t| ConfigurationDefaultValueSource\n\t\t\t\t\t| undefined;\n\t\t\t\tif (!isLanguageTagSetting) {\n\t\t\t\t\tconst registeredConfigurationProp =\n\t\t\t\t\t\tprop as IRegisteredConfigurationPropertySchema;\n\t\t\t\t\tif (\n\t\t\t\t\t\tregisteredConfigurationProp &&\n\t\t\t\t\t\tregisteredConfigurationProp.defaultValueSource\n\t\t\t\t\t) {\n\t\t\t\t\t\tdefaultValueSource =\n\t\t\t\t\t\t\tregisteredConfigurationProp.defaultValueSource;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (\n\t\t\t\t\t!enumToUse &&\n\t\t\t\t\t(prop.enumItemLabels ||\n\t\t\t\t\t\tenumDescriptions ||\n\t\t\t\t\t\tenumDescriptionsAreMarkdown)\n\t\t\t\t) {\n\t\t\t\t\tconsole.error(\n\t\t\t\t\t\t`The setting ${key} has enum-related fields, but doesn't have an enum field. This setting may render improperly in the Settings editor.`,\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\tresult.push({\n\t\t\t\t\tkey,\n\t\t\t\t\tvalue,\n\t\t\t\t\tdescription: descriptionLines,\n\t\t\t\t\tdescriptionIsMarkdown: !!prop.markdownDescription,\n\t\t\t\t\trange: nullRange,\n\t\t\t\t\tkeyRange: nullRange,\n\t\t\t\t\tvalueRange: nullRange,\n\t\t\t\t\tdescriptionRanges: [],\n\t\t\t\t\toverrides,\n\t\t\t\t\tscope: prop.scope,\n\t\t\t\t\ttype: prop.type,\n\t\t\t\t\tarrayItemType: listItemType,\n\t\t\t\t\tobjectProperties,\n\t\t\t\t\tobjectPatternProperties,\n\t\t\t\t\tobjectAdditionalProperties,\n\t\t\t\t\tenum: enumToUse,\n\t\t\t\t\tenumDescriptions: enumDescriptions,\n\t\t\t\t\tenumDescriptionsAreMarkdown: enumDescriptionsAreMarkdown,\n\t\t\t\t\tenumItemLabels: prop.enumItemLabels,\n\t\t\t\t\tuniqueItems: prop.uniqueItems,\n\t\t\t\t\ttags: prop.tags,\n\t\t\t\t\tdisallowSyncIgnore: prop.disallowSyncIgnore,\n\t\t\t\t\trestricted: prop.restricted,\n\t\t\t\t\textensionInfo: extensionInfo,\n\t\t\t\t\tdeprecationMessage:\n\t\t\t\t\t\tprop.markdownDeprecationMessage ||\n\t\t\t\t\t\tprop.deprecationMessage,\n\t\t\t\t\tdeprecationMessageIsMarkdown:\n\t\t\t\t\t\t!!prop.markdownDeprecationMessage,\n\t\t\t\t\tvalidator: createValidator(prop),\n\t\t\t\t\tallKeysAreBoolean,\n\t\t\t\t\teditPresentation: prop.editPresentation,\n\t\t\t\t\torder: prop.order,\n\t\t\t\t\tnonLanguageSpecificDefaultValueSource: defaultValueSource,\n\t\t\t\t\tisLanguageTagSetting,\n\t\t\t\t\tcategoryLabel,\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n\n\tprivate parseOverrideSettings(overrideSettings: any): ISetting[] {\n\t\treturn Object.keys(overrideSettings).map((key) => ({\n\t\t\tkey,\n\t\t\tvalue: overrideSettings[key],\n\t\t\tdescription: [],\n\t\t\tdescriptionIsMarkdown: false,\n\t\t\trange: nullRange,\n\t\t\tkeyRange: nullRange,\n\t\t\tvalueRange: nullRange,\n\t\t\tdescriptionRanges: [],\n\t\t\toverrides: [],\n\t\t}));\n\t}\n\n\tprivate matchesScope(property: IConfigurationNode): boolean {\n\t\tif (!property.scope) {\n\t\t\treturn true;\n\t\t}\n\t\tif (this.target === ConfigurationTarget.WORKSPACE_FOLDER) {\n\t\t\treturn FOLDER_SCOPES.indexOf(property.scope) !== -1;\n\t\t}\n\t\tif (this.target === ConfigurationTarget.WORKSPACE) {\n\t\t\treturn WORKSPACE_SCOPES.indexOf(property.scope) !== -1;\n\t\t}\n\t\treturn true;\n\t}\n\n\tprivate compareConfigurationNodes(\n\t\tc1: IConfigurationNode,\n\t\tc2: IConfigurationNode,\n\t): number {\n\t\tif (typeof c1.order !== \"number\") {\n\t\t\treturn 1;\n\t\t}\n\t\tif (typeof c2.order !== \"number\") {\n\t\t\treturn -1;\n\t\t}\n\t\tif (c1.order === c2.order) {\n\t\t\tconst title1 = c1.title || \"\";\n\t\t\tconst title2 = c2.title || \"\";\n\t\t\treturn title1.localeCompare(title2);\n\t\t}\n\t\treturn c1.order - c2.order;\n\t}\n\n\tprivate toContent(\n\t\tsettingsGroups: ISettingsGroup[],\n\t\tstartIndex: number,\n\t): string {\n\t\tconst builder = new SettingsContentBuilder();\n\t\tfor (let i = startIndex; i < settingsGroups.length; i++) {\n\t\t\tbuilder.pushGroup(\n\t\t\t\tsettingsGroups[i],\n\t\t\t\ti === startIndex,\n\t\t\t\ti === settingsGroups.length - 1,\n\t\t\t);\n\t\t}\n\t\treturn builder.getContent();\n\t}\n}\n\nexport class DefaultSettingsEditorModel\n\textends AbstractSettingsModel\n\timplements ISettingsEditorModel\n{\n\tprivate _model: ITextModel;\n\n\tprivate readonly _onDidChangeGroups: Emitter<void> = this._register(\n\t\tnew Emitter<void>(),\n\t);\n\treadonly onDidChangeGroups: Event<void> = this._onDidChangeGroups.event;\n\n\tconstructor(\n\t\tprivate _uri: URI,\n\t\treference: IReference<ITextEditorModel>,\n\t\tprivate readonly defaultSettings: DefaultSettings,\n\t) {\n\t\tsuper();\n\n\t\tthis._register(\n\t\t\tdefaultSettings.onDidChange(() => this._onDidChangeGroups.fire()),\n\t\t);\n\t\tthis._model = reference.object.textEditorModel!;\n\t\tthis._register(this.onWillDispose(() => reference.dispose()));\n\t}\n\n\tget uri(): URI {\n\t\treturn this._uri;\n\t}\n\n\tget target(): ConfigurationTarget {\n\t\treturn this.defaultSettings.target;\n\t}\n\n\tget settingsGroups(): ISettingsGroup[] {\n\t\treturn this.defaultSettings.getSettingsGroups();\n\t}\n\n\tprotected override get filterGroups(): ISettingsGroup[] {\n\t\t// Don't look at \"commonly used\" for filter\n\t\treturn this.settingsGroups.slice(1);\n\t}\n\n\tprotected update(): IFilterResult | undefined {\n\t\tif (this._model.isDisposed()) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\t// Grab current result groups, only render non-empty groups\n\t\tconst resultGroups = [...this._currentResultGroups.values()].sort(\n\t\t\t(a, b) => a.order - b.order,\n\t\t);\n\t\tconst nonEmptyResultGroups = resultGroups.filter(\n\t\t\t(group) => group.result.filterMatches.length,\n\t\t);\n\n\t\tconst startLine = tail(this.settingsGroups)!.range.endLineNumber + 2;\n\t\tconst { settingsGroups: filteredGroups, matches } =\n\t\t\tthis.writeResultGroups(nonEmptyResultGroups, startLine);\n\n\t\tconst metadata = this.collectMetadata(resultGroups);\n\t\treturn resultGroups.length\n\t\t\t? <IFilterResult>{\n\t\t\t\t\tallGroups: this.settingsGroups,\n\t\t\t\t\tfilteredGroups,\n\t\t\t\t\tmatches,\n\t\t\t\t\tmetadata,\n\t\t\t\t}\n\t\t\t: undefined;\n\t}\n\n\t/**\n\t * Translate the ISearchResultGroups to text, and write it to the editor model\n\t */\n\tprivate writeResultGroups(\n\t\tgroups: ISearchResultGroup[],\n\t\tstartLine: number,\n\t): { matches: IRange[]; settingsGroups: ISettingsGroup[] } {\n\t\tconst contentBuilderOffset = startLine - 1;\n\t\tconst builder = new SettingsContentBuilder(contentBuilderOffset);\n\n\t\tconst settingsGroups: ISettingsGroup[] = [];\n\t\tconst matches: IRange[] = [];\n\t\tif (groups.length) {\n\t\t\tbuilder.pushLine(\",\");\n\t\t\tgroups.forEach((resultGroup) => {\n\t\t\t\tconst settingsGroup = this.getGroup(resultGroup);\n\t\t\t\tsettingsGroups.push(settingsGroup);\n\t\t\t\tmatches.push(\n\t\t\t\t\t...this.writeSettingsGroupToBuilder(\n\t\t\t\t\t\tbuilder,\n\t\t\t\t\t\tsettingsGroup,\n\t\t\t\t\t\tresultGroup.result.filterMatches,\n\t\t\t\t\t),\n\t\t\t\t);\n\t\t\t});\n\t\t}\n\n\t\t// note: 1-indexed line numbers here\n\t\tconst groupContent = builder.getContent() + \"\\n\";\n\t\tconst groupEndLine = this._model.getLineCount();\n\t\tconst cursorPosition = new Selection(startLine, 1, startLine, 1);\n\t\tconst edit: ISingleEditOperation = {\n\t\t\ttext: groupContent,\n\t\t\tforceMoveMarkers: true,\n\t\t\trange: new Range(startLine, 1, groupEndLine, 1),\n\t\t};\n\n\t\tthis._model.pushEditOperations([cursorPosition], [edit], () => [\n\t\t\tcursorPosition,\n\t\t]);\n\n\t\t// Force tokenization now - otherwise it may be slightly delayed, causing a flash of white text\n\t\tconst tokenizeTo = Math.min(startLine + 60, this._model.getLineCount());\n\t\tthis._model.tokenization.forceTokenization(tokenizeTo);\n\n\t\treturn { matches, settingsGroups };\n\t}\n\n\tprivate writeSettingsGroupToBuilder(\n\t\tbuilder: SettingsContentBuilder,\n\t\tsettingsGroup: ISettingsGroup,\n\t\tfilterMatches: ISettingMatch[],\n\t): IRange[] {\n\t\tfilterMatches = filterMatches.map((filteredMatch) => {\n\t\t\t// Fix match ranges to offset from setting start line\n\t\t\treturn <ISettingMatch>{\n\t\t\t\tsetting: filteredMatch.setting,\n\t\t\t\tscore: filteredMatch.score,\n\t\t\t\tmatches:\n\t\t\t\t\tfilteredMatch.matches &&\n\t\t\t\t\tfilteredMatch.matches.map((match) => {\n\t\t\t\t\t\treturn new Range(\n\t\t\t\t\t\t\tmatch.startLineNumber -\n\t\t\t\t\t\t\t\tfilteredMatch.setting.range.startLineNumber,\n\t\t\t\t\t\t\tmatch.startColumn,\n\t\t\t\t\t\t\tmatch.endLineNumber -\n\t\t\t\t\t\t\t\tfilteredMatch.setting.range.startLineNumber,\n\t\t\t\t\t\t\tmatch.endColumn,\n\t\t\t\t\t\t);\n\t\t\t\t\t}),\n\t\t\t};\n\t\t});\n\n\t\tbuilder.pushGroup(settingsGroup);\n\n\t\t// builder has rewritten settings ranges, fix match ranges\n\t\tconst fixedMatches = filterMatches\n\t\t\t.map((m) => m.matches || [])\n\t\t\t.flatMap((settingMatches, i) => {\n\t\t\t\tconst setting = settingsGroup.sections[0].settings[i];\n\t\t\t\treturn settingMatches.map((range) => {\n\t\t\t\t\treturn new Range(\n\t\t\t\t\t\trange.startLineNumber + setting.range.startLineNumber,\n\t\t\t\t\t\trange.startColumn,\n\t\t\t\t\t\trange.endLineNumber + setting.range.startLineNumber,\n\t\t\t\t\t\trange.endColumn,\n\t\t\t\t\t);\n\t\t\t\t});\n\t\t\t});\n\n\t\treturn fixedMatches;\n\t}\n\n\tprivate copySetting(setting: ISetting): ISetting {\n\t\treturn {\n\t\t\tdescription: setting.description,\n\t\t\tscope: setting.scope,\n\t\t\ttype: setting.type,\n\t\t\tenum: setting.enum,\n\t\t\tenumDescriptions: setting.enumDescriptions,\n\t\t\tkey: setting.key,\n\t\t\tvalue: setting.value,\n\t\t\trange: setting.range,\n\t\t\toverrides: [],\n\t\t\toverrideOf: setting.overrideOf,\n\t\t\ttags: setting.tags,\n\t\t\tdeprecationMessage: setting.deprecationMessage,\n\t\t\tkeyRange: nullRange,\n\t\t\tvalueRange: nullRange,\n\t\t\tdescriptionIsMarkdown: undefined,\n\t\t\tdescriptionRanges: [],\n\t\t};\n\t}\n\n\tfindValueMatches(filter: string, setting: ISetting): IRange[] {\n\t\treturn [];\n\t}\n\n\toverride getPreference(key: string): ISetting | undefined {\n\t\tfor (const group of this.settingsGroups) {\n\t\t\tfor (const section of group.sections) {\n\t\t\t\tfor (const setting of section.settings) {\n\t\t\t\t\tif (setting.key === key) {\n\t\t\t\t\t\treturn setting;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn undefined;\n\t}\n\n\tprivate getGroup(resultGroup: ISearchResultGroup): ISettingsGroup {\n\t\treturn <ISettingsGroup>{\n\t\t\tid: resultGroup.id,\n\t\t\trange: nullRange,\n\t\t\ttitle: resultGroup.label,\n\t\t\ttitleRange: nullRange,\n\t\t\tsections: [\n\t\t\t\t{\n\t\t\t\t\tsettings: resultGroup.result.filterMatches.map((m) =>\n\t\t\t\t\t\tthis.copySetting(m.setting),\n\t\t\t\t\t),\n\t\t\t\t},\n\t\t\t],\n\t\t};\n\t}\n}\n\nclass SettingsContentBuilder {\n\tprivate _contentByLines: string[];\n\n\tprivate get lineCountWithOffset(): number {\n\t\treturn this._contentByLines.length + this._rangeOffset;\n\t}\n\n\tprivate get lastLine(): string {\n\t\treturn this._contentByLines[this._contentByLines.length - 1] || \"\";\n\t}\n\n\tconstructor(private _rangeOffset = 0) {\n\t\tthis._contentByLines = [];\n\t}\n\n\tpushLine(...lineText: string[]): void {\n\t\tthis._contentByLines.push(...lineText);\n\t}\n\n\tpushGroup(\n\t\tsettingsGroups: ISettingsGroup,\n\t\tisFirst?: boolean,\n\t\tisLast?: boolean,\n\t): void {\n\t\tthis._contentByLines.push(isFirst ? \"[{\" : \"{\");\n\t\tconst lastSetting = this._pushGroup(settingsGroups, \"  \");\n\n\t\tif (lastSetting) {\n\t\t\t// Strip the comma from the last setting\n\t\t\tconst lineIdx = lastSetting.range.endLineNumber - this._rangeOffset;\n\t\t\tconst content = this._contentByLines[lineIdx - 2];\n\t\t\tthis._contentByLines[lineIdx - 2] = content.substring(\n\t\t\t\t0,\n\t\t\t\tcontent.length - 1,\n\t\t\t);\n\t\t}\n\n\t\tthis._contentByLines.push(isLast ? \"}]\" : \"},\");\n\t}\n\n\tprotected _pushGroup(\n\t\tgroup: ISettingsGroup,\n\t\tindent: string,\n\t): ISetting | null {\n\t\tlet lastSetting: ISetting | null = null;\n\t\tconst groupStart = this.lineCountWithOffset + 1;\n\t\tfor (const section of group.sections) {\n\t\t\tif (section.title) {\n\t\t\t\tconst sectionTitleStart = this.lineCountWithOffset + 1;\n\t\t\t\tthis.addDescription(\n\t\t\t\t\t[section.title],\n\t\t\t\t\tindent,\n\t\t\t\t\tthis._contentByLines,\n\t\t\t\t);\n\t\t\t\tsection.titleRange = {\n\t\t\t\t\tstartLineNumber: sectionTitleStart,\n\t\t\t\t\tstartColumn: 1,\n\t\t\t\t\tendLineNumber: this.lineCountWithOffset,\n\t\t\t\t\tendColumn: this.lastLine.length,\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tif (section.settings.length) {\n\t\t\t\tfor (const setting of section.settings) {\n\t\t\t\t\tthis.pushSetting(setting, indent);\n\t\t\t\t\tlastSetting = setting;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tgroup.range = {\n\t\t\tstartLineNumber: groupStart,\n\t\t\tstartColumn: 1,\n\t\t\tendLineNumber: this.lineCountWithOffset,\n\t\t\tendColumn: this.lastLine.length,\n\t\t};\n\t\treturn lastSetting;\n\t}\n\n\tgetContent(): string {\n\t\treturn this._contentByLines.join(\"\\n\");\n\t}\n\n\tprivate pushSetting(setting: ISetting, indent: string): void {\n\t\tconst settingStart = this.lineCountWithOffset + 1;\n\n\t\tthis.pushSettingDescription(setting, indent);\n\n\t\tlet preValueContent = indent;\n\t\tconst keyString = JSON.stringify(setting.key);\n\t\tpreValueContent += keyString;\n\t\tsetting.keyRange = {\n\t\t\tstartLineNumber: this.lineCountWithOffset + 1,\n\t\t\tstartColumn: preValueContent.indexOf(setting.key) + 1,\n\t\t\tendLineNumber: this.lineCountWithOffset + 1,\n\t\t\tendColumn: setting.key.length,\n\t\t};\n\n\t\tpreValueContent += \": \";\n\t\tconst valueStart = this.lineCountWithOffset + 1;\n\t\tthis.pushValue(setting, preValueContent, indent);\n\n\t\tsetting.valueRange = {\n\t\t\tstartLineNumber: valueStart,\n\t\t\tstartColumn: preValueContent.length + 1,\n\t\t\tendLineNumber: this.lineCountWithOffset,\n\t\t\tendColumn: this.lastLine.length + 1,\n\t\t};\n\t\tthis._contentByLines[this._contentByLines.length - 1] += \",\";\n\t\tthis._contentByLines.push(\"\");\n\t\tsetting.range = {\n\t\t\tstartLineNumber: settingStart,\n\t\t\tstartColumn: 1,\n\t\t\tendLineNumber: this.lineCountWithOffset,\n\t\t\tendColumn: this.lastLine.length,\n\t\t};\n\t}\n\n\tprivate pushSettingDescription(setting: ISetting, indent: string): void {\n\t\tconst fixSettingLink = (line: string) =>\n\t\t\tline.replace(\n\t\t\t\t/`#(.*)#`/g,\n\t\t\t\t(match, settingName) => `\\`${settingName}\\``,\n\t\t\t);\n\n\t\tsetting.descriptionRanges = [];\n\t\tconst descriptionPreValue = indent + \"// \";\n\t\tconst deprecationMessageLines =\n\t\t\tsetting.deprecationMessage?.split(/\\n/g) ?? [];\n\t\tfor (let line of [...deprecationMessageLines, ...setting.description]) {\n\t\t\tline = fixSettingLink(line);\n\n\t\t\tthis._contentByLines.push(descriptionPreValue + line);\n\t\t\tsetting.descriptionRanges.push({\n\t\t\t\tstartLineNumber: this.lineCountWithOffset,\n\t\t\t\tstartColumn: this.lastLine.indexOf(line) + 1,\n\t\t\t\tendLineNumber: this.lineCountWithOffset,\n\t\t\t\tendColumn: this.lastLine.length,\n\t\t\t});\n\t\t}\n\n\t\tif (setting.enum && setting.enumDescriptions?.some((desc) => !!desc)) {\n\t\t\tsetting.enumDescriptions.forEach((desc, i) => {\n\t\t\t\tconst displayEnum = escapeInvisibleChars(\n\t\t\t\t\tString(setting.enum![i]),\n\t\t\t\t);\n\t\t\t\tconst line = desc\n\t\t\t\t\t? `${displayEnum}: ${fixSettingLink(desc)}`\n\t\t\t\t\t: displayEnum;\n\n\t\t\t\tconst lines = line.split(/\\n/g);\n\t\t\t\tlines[0] = \" - \" + lines[0];\n\t\t\t\tthis._contentByLines.push(\n\t\t\t\t\t...lines.map((l) => `${indent}// ${l}`),\n\t\t\t\t);\n\n\t\t\t\tsetting.descriptionRanges.push({\n\t\t\t\t\tstartLineNumber: this.lineCountWithOffset,\n\t\t\t\t\tstartColumn: this.lastLine.indexOf(line) + 1,\n\t\t\t\t\tendLineNumber: this.lineCountWithOffset,\n\t\t\t\t\tendColumn: this.lastLine.length,\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\t}\n\n\tprivate pushValue(\n\t\tsetting: ISetting,\n\t\tpreValueConent: string,\n\t\tindent: string,\n\t): void {\n\t\tconst valueString = JSON.stringify(setting.value, null, indent);\n\t\tif (valueString && typeof setting.value === \"object\") {\n\t\t\tif (setting.overrides && setting.overrides.length) {\n\t\t\t\tthis._contentByLines.push(preValueConent + \" {\");\n\t\t\t\tfor (const subSetting of setting.overrides) {\n\t\t\t\t\tthis.pushSetting(subSetting, indent + indent);\n\t\t\t\t\tthis._contentByLines.pop();\n\t\t\t\t}\n\t\t\t\tconst lastSetting =\n\t\t\t\t\tsetting.overrides[setting.overrides.length - 1];\n\t\t\t\tconst content =\n\t\t\t\t\tthis._contentByLines[lastSetting.range.endLineNumber - 2];\n\t\t\t\tthis._contentByLines[lastSetting.range.endLineNumber - 2] =\n\t\t\t\t\tcontent.substring(0, content.length - 1);\n\t\t\t\tthis._contentByLines.push(indent + \"}\");\n\t\t\t} else {\n\t\t\t\tconst mulitLineValue = valueString.split(\"\\n\");\n\t\t\t\tthis._contentByLines.push(preValueConent + mulitLineValue[0]);\n\t\t\t\tfor (let i = 1; i < mulitLineValue.length; i++) {\n\t\t\t\t\tthis._contentByLines.push(indent + mulitLineValue[i]);\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tthis._contentByLines.push(preValueConent + valueString);\n\t\t}\n\t}\n\n\tprivate addDescription(\n\t\tdescription: string[],\n\t\tindent: string,\n\t\tresult: string[],\n\t) {\n\t\tfor (const line of description) {\n\t\t\tresult.push(indent + \"// \" + line);\n\t\t}\n\t}\n}\n\nclass RawSettingsContentBuilder extends SettingsContentBuilder {\n\tconstructor(private indent = \"\\t\") {\n\t\tsuper(0);\n\t}\n\n\toverride pushGroup(settingsGroups: ISettingsGroup): void {\n\t\tthis._pushGroup(settingsGroups, this.indent);\n\t}\n}\n\nexport class DefaultRawSettingsEditorModel extends Disposable {\n\tprivate _content: string | null = null;\n\n\tprivate readonly _onDidContentChanged = this._register(new Emitter<void>());\n\treadonly onDidContentChanged = this._onDidContentChanged.event;\n\n\tconstructor(private defaultSettings: DefaultSettings) {\n\t\tsuper();\n\t\tthis._register(\n\t\t\tdefaultSettings.onDidChange(() => {\n\t\t\t\tthis._content = null;\n\t\t\t\tthis._onDidContentChanged.fire();\n\t\t\t}),\n\t\t);\n\t}\n\n\tget content(): string {\n\t\tif (this._content === null) {\n\t\t\tconst builder = new RawSettingsContentBuilder();\n\t\t\tbuilder.pushLine(\"{\");\n\t\t\tfor (const settingsGroup of this.defaultSettings.getRegisteredGroups()) {\n\t\t\t\tbuilder.pushGroup(settingsGroup);\n\t\t\t}\n\t\t\tbuilder.pushLine(\"}\");\n\t\t\tthis._content = builder.getContent();\n\t\t}\n\t\treturn this._content;\n\t}\n}\n\nfunction escapeInvisibleChars(enumValue: string): string {\n\treturn enumValue && enumValue.replace(/\\n/g, \"\\\\n\").replace(/\\r/g, \"\\\\r\");\n}\n\nexport function defaultKeybindingsContents(\n\tkeybindingService: IKeybindingService,\n): string {\n\tconst defaultsHeader =\n\t\t\"// \" +\n\t\tnls.localize(\n\t\t\t\"defaultKeybindingsHeader\",\n\t\t\t\"Override key bindings by placing them into your key bindings file.\",\n\t\t);\n\treturn (\n\t\tdefaultsHeader + \"\\n\" + keybindingService.getDefaultKeybindingsContent()\n\t);\n}\n\nexport class DefaultKeybindingsEditorModel\n\timplements IKeybindingsEditorModel<any>\n{\n\tprivate _content: string | undefined;\n\n\tconstructor(private _uri: URI,\n\t\t@IKeybindingService private readonly keybindingService: IKeybindingService) {\n\t}\n\n\tget uri(): URI {\n\t\treturn this._uri;\n\t}\n\n\tget content(): string {\n\t\tif (!this._content) {\n\t\t\tthis._content = defaultKeybindingsContents(this.keybindingService);\n\t\t}\n\t\treturn this._content;\n\t}\n\n\tgetPreference(): any {\n\t\treturn null;\n\t}\n\n\tdispose(): void {\n\t\t// Not disposable\n\t}\n}\n"],
  "mappings": "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",
  "names": ["key"]
}
