{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/preferences/common/preferences.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport type { IStringDictionary } from \"../../../../base/common/collections.js\";\nimport type { Event } from \"../../../../base/common/event.js\";\nimport type { IMatch } from \"../../../../base/common/filters.js\";\nimport type {\n\tIJSONSchema,\n\tIJSONSchemaMap,\n} from \"../../../../base/common/jsonSchema.js\";\nimport type { ResolvedKeybinding } from \"../../../../base/common/keybindings.js\";\nimport type { URI } from \"../../../../base/common/uri.js\";\nimport type { IRange } from \"../../../../editor/common/core/range.js\";\nimport type { IEditorContribution } from \"../../../../editor/common/editorCommon.js\";\nimport type { ConfigurationTarget } from \"../../../../platform/configuration/common/configuration.js\";\nimport type {\n\tConfigurationDefaultValueSource,\n\tConfigurationScope,\n\tEditPresentationTypes,\n\tIExtensionInfo,\n} from \"../../../../platform/configuration/common/configurationRegistry.js\";\nimport type { IEditorOptions } from \"../../../../platform/editor/common/editor.js\";\nimport type { IExtensionDescription } from \"../../../../platform/extensions/common/extensions.js\";\nimport { createDecorator } from \"../../../../platform/instantiation/common/instantiation.js\";\nimport type { ResolvedKeybindingItem } from \"../../../../platform/keybinding/common/resolvedKeybindingItem.js\";\nimport {\n\tDEFAULT_EDITOR_ASSOCIATION,\n\ttype IEditorPane,\n} from \"../../../common/editor.js\";\nimport type { EditorInput } from \"../../../common/editor/editorInput.js\";\nimport type { Settings2EditorModel } from \"./preferencesModels.js\";\n\nexport enum SettingValueType {\n\tNull = \"null\",\n\tEnum = \"enum\",\n\tString = \"string\",\n\tMultilineString = \"multiline-string\",\n\tInteger = \"integer\",\n\tNumber = \"number\",\n\tBoolean = \"boolean\",\n\tArray = \"array\",\n\tExclude = \"exclude\",\n\tInclude = \"include\",\n\tComplex = \"complex\",\n\tNullableInteger = \"nullable-integer\",\n\tNullableNumber = \"nullable-number\",\n\tObject = \"object\",\n\tBooleanObject = \"boolean-object\",\n\tLanguageTag = \"language-tag\",\n\tExtensionToggle = \"extension-toggle\",\n}\n\nexport interface ISettingsGroup {\n\tid: string;\n\trange: IRange;\n\ttitle: string;\n\ttitleRange: IRange;\n\tsections: ISettingsSection[];\n\torder?: number;\n\textensionInfo?: IExtensionInfo;\n}\n\nexport interface ISettingsSection {\n\ttitleRange?: IRange;\n\ttitle?: string;\n\tsettings: ISetting[];\n}\n\nexport interface ISetting {\n\trange: IRange;\n\tkey: string;\n\tkeyRange: IRange;\n\tvalue: any;\n\tvalueRange: IRange;\n\tdescription: string[];\n\tdescriptionIsMarkdown?: boolean;\n\tdescriptionRanges: IRange[];\n\toverrides?: ISetting[];\n\toverrideOf?: ISetting;\n\tdeprecationMessage?: string;\n\tdeprecationMessageIsMarkdown?: boolean;\n\n\tscope?: ConfigurationScope;\n\ttype?: string | string[];\n\torder?: number;\n\tarrayItemType?: string;\n\tobjectProperties?: IJSONSchemaMap;\n\tobjectPatternProperties?: IJSONSchemaMap;\n\tobjectAdditionalProperties?: boolean | IJSONSchema;\n\tenum?: string[];\n\tenumDescriptions?: string[];\n\tenumDescriptionsAreMarkdown?: boolean;\n\tuniqueItems?: boolean;\n\ttags?: string[];\n\tdisallowSyncIgnore?: boolean;\n\trestricted?: boolean;\n\textensionInfo?: IExtensionInfo;\n\tvalidator?: (value: any) => string | null;\n\tenumItemLabels?: string[];\n\teditPresentation?: EditPresentationTypes;\n\tnonLanguageSpecificDefaultValueSource?: ConfigurationDefaultValueSource;\n\tisLanguageTagSetting?: boolean;\n\tcategoryLabel?: string;\n\n\t// Internal properties\n\tallKeysAreBoolean?: boolean;\n\tdisplayExtensionId?: string;\n\ttitle?: string;\n\textensionGroupTitle?: string;\n\tinternalOrder?: number;\n}\n\nexport interface IExtensionSetting extends ISetting {\n\textensionName?: string;\n\textensionPublisher?: string;\n}\n\nexport interface ISearchResult {\n\tfilterMatches: ISettingMatch[];\n\texactMatch?: boolean;\n\tmetadata?: IFilterMetadata;\n}\n\nexport interface ISearchResultGroup {\n\tid: string;\n\tlabel: string;\n\tresult: ISearchResult;\n\torder: number;\n}\n\nexport interface IFilterResult {\n\tquery?: string;\n\tfilteredGroups: ISettingsGroup[];\n\tallGroups: ISettingsGroup[];\n\tmatches: IRange[];\n\tmetadata?: IStringDictionary<IFilterMetadata>;\n\texactMatch?: boolean;\n}\n\n/**\n * The ways a setting could match a query,\n * sorted in increasing order of relevance.\n */\nexport enum SettingMatchType {\n\tNone = 0,\n\tLanguageTagSettingMatch = 1 << 0,\n\tRemoteMatch = 1 << 1,\n\tDescriptionOrValueMatch = 1 << 2,\n\tKeyMatch = 1 << 3,\n}\n\nexport interface ISettingMatch {\n\tsetting: ISetting;\n\tmatches: IRange[] | null;\n\tmatchType: SettingMatchType;\n\tscore: number;\n}\n\nexport interface IScoredResults {\n\t[key: string]: IRemoteSetting;\n}\n\nexport interface IRemoteSetting {\n\tscore: number;\n\tkey: string;\n\tid: string;\n\tdefaultValue: string;\n\tdescription: string;\n\tpackageId: string;\n\textensionName?: string;\n\textensionPublisher?: string;\n}\n\nexport interface IFilterMetadata {\n\trequestUrl: string;\n\trequestBody: string;\n\ttimestamp: number;\n\tduration: number;\n\tscoredResults: IScoredResults;\n\n\t/** The number of requests made, since requests are split by number of filters */\n\trequestCount?: number;\n\n\t/** The name of the server that actually served the request */\n\tcontext: string;\n}\n\nexport interface IPreferencesEditorModel<T> {\n\turi?: URI;\n\tgetPreference(key: string): T | undefined;\n\tdispose(): void;\n}\n\nexport type IGroupFilter = (group: ISettingsGroup) => boolean | null;\nexport type ISettingMatcher = (\n\tsetting: ISetting,\n\tgroup: ISettingsGroup,\n) => { matches: IRange[]; matchType: SettingMatchType; score: number } | null;\n\nexport interface ISettingsEditorModel\n\textends IPreferencesEditorModel<ISetting> {\n\treadonly onDidChangeGroups: Event<void>;\n\tsettingsGroups: ISettingsGroup[];\n\tfilterSettings(\n\t\tfilter: string,\n\t\tgroupFilter: IGroupFilter,\n\t\tsettingMatcher: ISettingMatcher,\n\t): ISettingMatch[];\n\tfindValueMatches(filter: string, setting: ISetting): IRange[];\n\tupdateResultGroup(\n\t\tid: string,\n\t\tresultGroup: ISearchResultGroup | undefined,\n\t): IFilterResult | undefined;\n}\n\nexport interface ISettingsEditorOptions extends IEditorOptions {\n\ttarget?: ConfigurationTarget;\n\tfolderUri?: URI;\n\tquery?: string;\n\t/**\n\t * Only works when opening the json settings file. Use `query` for settings editor.\n\t */\n\trevealSetting?: {\n\t\tkey: string;\n\t\tedit?: boolean;\n\t};\n\tfocusSearch?: boolean;\n}\n\nexport interface IOpenSettingsOptions extends ISettingsEditorOptions {\n\tjsonEditor?: boolean;\n\topenToSide?: boolean;\n}\n\nexport function validateSettingsEditorOptions(\n\toptions: ISettingsEditorOptions,\n): ISettingsEditorOptions {\n\treturn {\n\t\t// Inherit provided options\n\t\t...options,\n\n\t\t// Enforce some options for settings specifically\n\t\toverride: DEFAULT_EDITOR_ASSOCIATION.id,\n\t\tpinned: true,\n\t};\n}\n\nexport interface IKeybindingsEditorModel<T>\n\textends IPreferencesEditorModel<T> {}\n\nexport interface IKeybindingsEditorOptions extends IEditorOptions {\n\tquery?: string;\n}\n\nexport const IPreferencesService =\n\tcreateDecorator<IPreferencesService>(\"preferencesService\");\n\nexport interface IPreferencesService {\n\treadonly _serviceBrand: undefined;\n\n\treadonly onDidDefaultSettingsContentChanged: Event<URI>;\n\n\tuserSettingsResource: URI;\n\tworkspaceSettingsResource: URI | null;\n\tgetFolderSettingsResource(resource: URI): URI | null;\n\n\tcreatePreferencesEditorModel(\n\t\turi: URI,\n\t): Promise<IPreferencesEditorModel<ISetting> | null>;\n\tgetDefaultSettingsContent(uri: URI): string | undefined;\n\thasDefaultSettingsContent(uri: URI): boolean;\n\tcreateSettings2EditorModel(): Settings2EditorModel; // TODO\n\n\topenRawDefaultSettings(): Promise<IEditorPane | undefined>;\n\topenSettings(\n\t\toptions?: IOpenSettingsOptions,\n\t): Promise<IEditorPane | undefined>;\n\topenApplicationSettings(\n\t\toptions?: IOpenSettingsOptions,\n\t): Promise<IEditorPane | undefined>;\n\topenUserSettings(\n\t\toptions?: IOpenSettingsOptions,\n\t): Promise<IEditorPane | undefined>;\n\topenRemoteSettings(\n\t\toptions?: IOpenSettingsOptions,\n\t): Promise<IEditorPane | undefined>;\n\topenWorkspaceSettings(\n\t\toptions?: IOpenSettingsOptions,\n\t): Promise<IEditorPane | undefined>;\n\topenFolderSettings(\n\t\toptions: IOpenSettingsOptions & {\n\t\t\tfolderUri: IOpenSettingsOptions[\"folderUri\"];\n\t\t},\n\t): Promise<IEditorPane | undefined>;\n\topenGlobalKeybindingSettings(\n\t\ttextual: boolean,\n\t\toptions?: IKeybindingsEditorOptions,\n\t): Promise<void>;\n\topenDefaultKeybindingsFile(): Promise<IEditorPane | undefined>;\n\topenLanguageSpecificSettings(\n\t\tlanguageId: string,\n\t\toptions?: IOpenSettingsOptions,\n\t): Promise<IEditorPane | undefined>;\n\tgetEditableSettingsURI(\n\t\tconfigurationTarget: ConfigurationTarget,\n\t\tresource?: URI,\n\t): Promise<URI | null>;\n\tgetSetting(settingId: string): ISetting | undefined;\n\n\tcreateSplitJsonEditorInput(\n\t\tconfigurationTarget: ConfigurationTarget,\n\t\tresource: URI,\n\t): EditorInput;\n}\n\nexport interface KeybindingMatch {\n\tctrlKey?: boolean;\n\tshiftKey?: boolean;\n\taltKey?: boolean;\n\tmetaKey?: boolean;\n\tkeyCode?: boolean;\n}\n\nexport interface KeybindingMatches {\n\tfirstPart: KeybindingMatch;\n\tchordPart: KeybindingMatch;\n}\n\nexport interface IKeybindingItemEntry {\n\tid: string;\n\ttemplateId: string;\n\tkeybindingItem: IKeybindingItem;\n\tcommandIdMatches?: IMatch[];\n\tcommandLabelMatches?: IMatch[];\n\tcommandDefaultLabelMatches?: IMatch[];\n\tsourceMatches?: IMatch[];\n\textensionIdMatches?: IMatch[];\n\textensionLabelMatches?: IMatch[];\n\twhenMatches?: IMatch[];\n\tkeybindingMatches?: KeybindingMatches;\n}\n\nexport interface IKeybindingItem {\n\tkeybinding: ResolvedKeybinding;\n\tkeybindingItem: ResolvedKeybindingItem;\n\tcommandLabel: string;\n\tcommandDefaultLabel: string;\n\tcommand: string;\n\tsource: string | IExtensionDescription;\n\twhen: string;\n}\n\nexport interface IKeybindingsEditorPane extends IEditorPane {\n\treadonly activeKeybindingEntry: IKeybindingItemEntry | null;\n\treadonly onDefineWhenExpression: Event<IKeybindingItemEntry>;\n\treadonly onLayout: Event<void>;\n\n\tsearch(filter: string): void;\n\tfocusSearch(): void;\n\tclearSearchResults(): void;\n\tfocusKeybindings(): void;\n\trecordSearchKeys(): void;\n\ttoggleSortByPrecedence(): void;\n\tselectKeybinding(keybindingEntry: IKeybindingItemEntry): void;\n\tdefineKeybinding(\n\t\tkeybindingEntry: IKeybindingItemEntry,\n\t\tadd: boolean,\n\t): Promise<void>;\n\tdefineWhenExpression(keybindingEntry: IKeybindingItemEntry): void;\n\tupdateKeybinding(\n\t\tkeybindingEntry: IKeybindingItemEntry,\n\t\tkey: string,\n\t\twhen: string | undefined,\n\t): Promise<any>;\n\tremoveKeybinding(keybindingEntry: IKeybindingItemEntry): Promise<any>;\n\tresetKeybinding(keybindingEntry: IKeybindingItemEntry): Promise<any>;\n\tcopyKeybinding(keybindingEntry: IKeybindingItemEntry): Promise<void>;\n\tcopyKeybindingCommand(keybindingEntry: IKeybindingItemEntry): Promise<void>;\n\tshowSimilarKeybindings(keybindingEntry: IKeybindingItemEntry): void;\n}\n\nexport const DEFINE_KEYBINDING_EDITOR_CONTRIB_ID =\n\t\"editor.contrib.defineKeybinding\";\nexport interface IDefineKeybindingEditorContribution\n\textends IEditorContribution {\n\tshowDefineKeybindingWidget(): void;\n}\n\nexport const FOLDER_SETTINGS_PATH = \".vscode/settings.json\";\nexport const DEFAULT_SETTINGS_EDITOR_SETTING =\n\t\"workbench.settings.openDefaultSettings\";\nexport const USE_SPLIT_JSON_SETTING = \"workbench.settings.useSplitJSON\";\n\nexport const SETTINGS_AUTHORITY = \"settings\";\n"],
  "mappings": ";;AAyBA,SAAS,uBAAuB;AAEhC;AAAA,EACC;AAAA,OAEM;AAIA,IAAK,mBAAL,kBAAKA,sBAAL;AACN,EAAAA,kBAAA,UAAO;AACP,EAAAA,kBAAA,UAAO;AACP,EAAAA,kBAAA,YAAS;AACT,EAAAA,kBAAA,qBAAkB;AAClB,EAAAA,kBAAA,aAAU;AACV,EAAAA,kBAAA,YAAS;AACT,EAAAA,kBAAA,aAAU;AACV,EAAAA,kBAAA,WAAQ;AACR,EAAAA,kBAAA,aAAU;AACV,EAAAA,kBAAA,aAAU;AACV,EAAAA,kBAAA,aAAU;AACV,EAAAA,kBAAA,qBAAkB;AAClB,EAAAA,kBAAA,oBAAiB;AACjB,EAAAA,kBAAA,YAAS;AACT,EAAAA,kBAAA,mBAAgB;AAChB,EAAAA,kBAAA,iBAAc;AACd,EAAAA,kBAAA,qBAAkB;AAjBP,SAAAA;AAAA,GAAA;AA+GL,IAAK,mBAAL,kBAAKC,sBAAL;AACN,EAAAA,oCAAA,UAAO,KAAP;AACA,EAAAA,oCAAA,6BAA0B,KAA1B;AACA,EAAAA,oCAAA,iBAAc,KAAd;AACA,EAAAA,oCAAA,6BAA0B,KAA1B;AACA,EAAAA,oCAAA,cAAW,KAAX;AALW,SAAAA;AAAA,GAAA;AA2FL,SAAS,8BACf,SACyB;AACzB,SAAO;AAAA;AAAA,IAEN,GAAG;AAAA;AAAA,IAGH,UAAU,2BAA2B;AAAA,IACrC,QAAQ;AAAA,EACT;AACD;AAXgB;AAoBT,MAAM,sBACZ,gBAAqC,oBAAoB;AA8HnD,MAAM,sCACZ;AAMM,MAAM,uBAAuB;AAC7B,MAAM,kCACZ;AACM,MAAM,yBAAyB;AAE/B,MAAM,qBAAqB;",
  "names": ["SettingValueType", "SettingMatchType"]
}
