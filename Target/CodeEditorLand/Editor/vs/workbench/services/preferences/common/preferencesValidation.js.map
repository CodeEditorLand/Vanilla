{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/preferences/common/preferencesValidation.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as nls from '../../../../nls.js';\nimport { JSONSchemaType } from '../../../../base/common/jsonSchema.js';\nimport { Color } from '../../../../base/common/color.js';\nimport { isObject, isUndefinedOrNull, isString, isStringArray } from '../../../../base/common/types.js';\nimport { IConfigurationPropertySchema } from '../../../../platform/configuration/common/configurationRegistry.js';\n\ntype Validator<T> = { enabled: boolean; isValid: (value: T) => boolean; message: string };\n\nfunction canBeType(propTypes: (string | undefined)[], ...types: JSONSchemaType[]): boolean {\n\treturn types.some(t => propTypes.includes(t));\n}\n\nfunction isNullOrEmpty(value: unknown): boolean {\n\treturn value === '' || isUndefinedOrNull(value);\n}\n\nexport function createValidator(prop: IConfigurationPropertySchema): (value: any) => (string | null) {\n\tconst type: (string | undefined)[] = Array.isArray(prop.type) ? prop.type : [prop.type];\n\tconst isNullable = canBeType(type, 'null');\n\tconst isNumeric = (canBeType(type, 'number') || canBeType(type, 'integer')) && (type.length === 1 || type.length === 2 && isNullable);\n\n\tconst numericValidations = getNumericValidators(prop);\n\tconst stringValidations = getStringValidators(prop);\n\tconst arrayValidator = getArrayValidator(prop);\n\tconst objectValidator = getObjectValidator(prop);\n\n\treturn value => {\n\t\tif (isNullable && isNullOrEmpty(value)) { return ''; }\n\n\t\tconst errors: string[] = [];\n\t\tif (arrayValidator) {\n\t\t\tconst err = arrayValidator(value);\n\t\t\tif (err) {\n\t\t\t\terrors.push(err);\n\t\t\t}\n\t\t}\n\n\t\tif (objectValidator) {\n\t\t\tconst err = objectValidator(value);\n\t\t\tif (err) {\n\t\t\t\terrors.push(err);\n\t\t\t}\n\t\t}\n\n\t\tif (prop.type === 'boolean' && value !== true && value !== false) {\n\t\t\terrors.push(nls.localize('validations.booleanIncorrectType', 'Incorrect type. Expected \"boolean\".'));\n\t\t}\n\n\t\tif (isNumeric) {\n\t\t\tif (isNullOrEmpty(value) || typeof value === 'boolean' || Array.isArray(value) || isNaN(+value)) {\n\t\t\t\terrors.push(nls.localize('validations.expectedNumeric', \"Value must be a number.\"));\n\t\t\t} else {\n\t\t\t\terrors.push(...numericValidations.filter(validator => !validator.isValid(+value)).map(validator => validator.message));\n\t\t\t}\n\t\t}\n\n\t\tif (prop.type === 'string') {\n\t\t\tif (prop.enum && !isStringArray(prop.enum)) {\n\t\t\t\terrors.push(nls.localize('validations.stringIncorrectEnumOptions', 'The enum options should be strings, but there is a non-string option. Please file an issue with the extension author.'));\n\t\t\t} else if (!isString(value)) {\n\t\t\t\terrors.push(nls.localize('validations.stringIncorrectType', 'Incorrect type. Expected \"string\".'));\n\t\t\t} else {\n\t\t\t\terrors.push(...stringValidations.filter(validator => !validator.isValid(value)).map(validator => validator.message));\n\t\t\t}\n\t\t}\n\n\t\tif (errors.length) {\n\t\t\treturn prop.errorMessage ? [prop.errorMessage, ...errors].join(' ') : errors.join(' ');\n\t\t}\n\n\t\treturn '';\n\t};\n}\n\n/**\n * Returns an error string if the value is invalid and can't be displayed in the settings UI for the given type.\n */\nexport function getInvalidTypeError(value: any, type: undefined | string | string[]): string | undefined {\n\tif (typeof type === 'undefined') {\n\t\treturn;\n\t}\n\n\tconst typeArr = Array.isArray(type) ? type : [type];\n\tif (!typeArr.some(_type => valueValidatesAsType(value, _type))) {\n\t\treturn nls.localize('invalidTypeError', \"Setting has an invalid type, expected {0}. Fix in JSON.\", JSON.stringify(type));\n\t}\n\n\treturn;\n}\n\nfunction valueValidatesAsType(value: any, type: string): boolean {\n\tconst valueType = typeof value;\n\tif (type === 'boolean') {\n\t\treturn valueType === 'boolean';\n\t} else if (type === 'object') {\n\t\treturn value && !Array.isArray(value) && valueType === 'object';\n\t} else if (type === 'null') {\n\t\treturn value === null;\n\t} else if (type === 'array') {\n\t\treturn Array.isArray(value);\n\t} else if (type === 'string') {\n\t\treturn valueType === 'string';\n\t} else if (type === 'number' || type === 'integer') {\n\t\treturn valueType === 'number';\n\t}\n\n\treturn true;\n}\n\nfunction toRegExp(pattern: string): RegExp {\n\ttry {\n\t\t// The u flag allows support for better Unicode matching,\n\t\t// but deprecates some patterns such as [\\s-9]\n\t\t// Ref https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Character_class#description\n\t\treturn new RegExp(pattern, 'u');\n\t} catch (e) {\n\t\ttry {\n\t\t\treturn new RegExp(pattern);\n\t\t} catch (e) {\n\t\t\t// If the pattern can't be parsed even without the 'u' flag,\n\t\t\t// just log the error to avoid rendering the entire Settings editor blank.\n\t\t\t// Ref https://github.com/microsoft/vscode/issues/195054\n\t\t\tconsole.error(nls.localize('regexParsingError', \"Error parsing the following regex both with and without the u flag:\"), pattern);\n\t\t\treturn /.*/;\n\t\t}\n\t}\n}\n\nfunction getStringValidators(prop: IConfigurationPropertySchema) {\n\tconst uriRegex = /^(([^:/?#]+?):)?(\\/\\/([^/?#]*))?([^?#]*)(\\?([^#]*))?(#(.*))?/;\n\tlet patternRegex: RegExp | undefined;\n\tif (typeof prop.pattern === 'string') {\n\t\tpatternRegex = toRegExp(prop.pattern);\n\t}\n\n\treturn [\n\t\t{\n\t\t\tenabled: prop.maxLength !== undefined,\n\t\t\tisValid: ((value: { length: number }) => value.length <= prop.maxLength!),\n\t\t\tmessage: nls.localize('validations.maxLength', \"Value must be {0} or fewer characters long.\", prop.maxLength)\n\t\t},\n\t\t{\n\t\t\tenabled: prop.minLength !== undefined,\n\t\t\tisValid: ((value: { length: number }) => value.length >= prop.minLength!),\n\t\t\tmessage: nls.localize('validations.minLength', \"Value must be {0} or more characters long.\", prop.minLength)\n\t\t},\n\t\t{\n\t\t\tenabled: patternRegex !== undefined,\n\t\t\tisValid: ((value: string) => patternRegex!.test(value)),\n\t\t\tmessage: prop.patternErrorMessage || nls.localize('validations.regex', \"Value must match regex `{0}`.\", prop.pattern)\n\t\t},\n\t\t{\n\t\t\tenabled: prop.format === 'color-hex',\n\t\t\tisValid: ((value: string) => Color.Format.CSS.parseHex(value)),\n\t\t\tmessage: nls.localize('validations.colorFormat', \"Invalid color format. Use #RGB, #RGBA, #RRGGBB or #RRGGBBAA.\")\n\t\t},\n\t\t{\n\t\t\tenabled: prop.format === 'uri' || prop.format === 'uri-reference',\n\t\t\tisValid: ((value: string) => !!value.length),\n\t\t\tmessage: nls.localize('validations.uriEmpty', \"URI expected.\")\n\t\t},\n\t\t{\n\t\t\tenabled: prop.format === 'uri' || prop.format === 'uri-reference',\n\t\t\tisValid: ((value: string) => uriRegex.test(value)),\n\t\t\tmessage: nls.localize('validations.uriMissing', \"URI is expected.\")\n\t\t},\n\t\t{\n\t\t\tenabled: prop.format === 'uri',\n\t\t\tisValid: ((value: string) => {\n\t\t\t\tconst matches = value.match(uriRegex);\n\t\t\t\treturn !!(matches && matches[2]);\n\t\t\t}),\n\t\t\tmessage: nls.localize('validations.uriSchemeMissing', \"URI with a scheme is expected.\")\n\t\t},\n\t\t{\n\t\t\tenabled: prop.enum !== undefined,\n\t\t\tisValid: ((value: string) => {\n\t\t\t\treturn prop.enum!.includes(value);\n\t\t\t}),\n\t\t\tmessage: nls.localize('validations.invalidStringEnumValue', \"Value is not accepted. Valid values: {0}.\",\n\t\t\t\tprop.enum ? prop.enum.map(key => `\"${key}\"`).join(', ') : '[]')\n\t\t}\n\t].filter(validation => validation.enabled);\n}\n\nfunction getNumericValidators(prop: IConfigurationPropertySchema): Validator<number>[] {\n\tconst type: (string | undefined)[] = Array.isArray(prop.type) ? prop.type : [prop.type];\n\n\tconst isNullable = canBeType(type, 'null');\n\tconst isIntegral = (canBeType(type, 'integer')) && (type.length === 1 || type.length === 2 && isNullable);\n\tconst isNumeric = canBeType(type, 'number', 'integer') && (type.length === 1 || type.length === 2 && isNullable);\n\tif (!isNumeric) {\n\t\treturn [];\n\t}\n\n\tlet exclusiveMax: number | undefined;\n\tlet exclusiveMin: number | undefined;\n\n\tif (typeof prop.exclusiveMaximum === 'boolean') {\n\t\texclusiveMax = prop.exclusiveMaximum ? prop.maximum : undefined;\n\t} else {\n\t\texclusiveMax = prop.exclusiveMaximum;\n\t}\n\n\tif (typeof prop.exclusiveMinimum === 'boolean') {\n\t\texclusiveMin = prop.exclusiveMinimum ? prop.minimum : undefined;\n\t} else {\n\t\texclusiveMin = prop.exclusiveMinimum;\n\t}\n\n\treturn [\n\t\t{\n\t\t\tenabled: exclusiveMax !== undefined && (prop.maximum === undefined || exclusiveMax <= prop.maximum),\n\t\t\tisValid: ((value: number) => value < exclusiveMax!),\n\t\t\tmessage: nls.localize('validations.exclusiveMax', \"Value must be strictly less than {0}.\", exclusiveMax)\n\t\t},\n\t\t{\n\t\t\tenabled: exclusiveMin !== undefined && (prop.minimum === undefined || exclusiveMin >= prop.minimum),\n\t\t\tisValid: ((value: number) => value > exclusiveMin!),\n\t\t\tmessage: nls.localize('validations.exclusiveMin', \"Value must be strictly greater than {0}.\", exclusiveMin)\n\t\t},\n\t\t{\n\t\t\tenabled: prop.maximum !== undefined && (exclusiveMax === undefined || exclusiveMax > prop.maximum),\n\t\t\tisValid: ((value: number) => value <= prop.maximum!),\n\t\t\tmessage: nls.localize('validations.max', \"Value must be less than or equal to {0}.\", prop.maximum)\n\t\t},\n\t\t{\n\t\t\tenabled: prop.minimum !== undefined && (exclusiveMin === undefined || exclusiveMin < prop.minimum),\n\t\t\tisValid: ((value: number) => value >= prop.minimum!),\n\t\t\tmessage: nls.localize('validations.min', \"Value must be greater than or equal to {0}.\", prop.minimum)\n\t\t},\n\t\t{\n\t\t\tenabled: prop.multipleOf !== undefined,\n\t\t\tisValid: ((value: number) => value % prop.multipleOf! === 0),\n\t\t\tmessage: nls.localize('validations.multipleOf', \"Value must be a multiple of {0}.\", prop.multipleOf)\n\t\t},\n\t\t{\n\t\t\tenabled: isIntegral,\n\t\t\tisValid: ((value: number) => value % 1 === 0),\n\t\t\tmessage: nls.localize('validations.expectedInteger', \"Value must be an integer.\")\n\t\t},\n\t].filter(validation => validation.enabled);\n}\n\nfunction getArrayValidator(prop: IConfigurationPropertySchema): ((value: any) => (string | null)) | null {\n\tif (prop.type === 'array' && prop.items && !Array.isArray(prop.items)) {\n\t\tconst propItems = prop.items;\n\t\tif (propItems && !Array.isArray(propItems.type)) {\n\t\t\tconst withQuotes = (s: string) => `'` + s + `'`;\n\t\t\treturn value => {\n\t\t\t\tif (!value) {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\n\t\t\t\tlet message = '';\n\n\t\t\t\tif (!Array.isArray(value)) {\n\t\t\t\t\tmessage += nls.localize('validations.arrayIncorrectType', 'Incorrect type. Expected an array.');\n\t\t\t\t\tmessage += '\\n';\n\t\t\t\t\treturn message;\n\t\t\t\t}\n\n\t\t\t\tconst arrayValue = value as unknown[];\n\t\t\t\tif (prop.uniqueItems) {\n\t\t\t\t\tif (new Set(arrayValue).size < arrayValue.length) {\n\t\t\t\t\t\tmessage += nls.localize('validations.stringArrayUniqueItems', 'Array has duplicate items');\n\t\t\t\t\t\tmessage += '\\n';\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (prop.minItems && arrayValue.length < prop.minItems) {\n\t\t\t\t\tmessage += nls.localize('validations.stringArrayMinItem', 'Array must have at least {0} items', prop.minItems);\n\t\t\t\t\tmessage += '\\n';\n\t\t\t\t}\n\n\t\t\t\tif (prop.maxItems && arrayValue.length > prop.maxItems) {\n\t\t\t\t\tmessage += nls.localize('validations.stringArrayMaxItem', 'Array must have at most {0} items', prop.maxItems);\n\t\t\t\t\tmessage += '\\n';\n\t\t\t\t}\n\n\t\t\t\tif (propItems.type === 'string') {\n\t\t\t\t\tif (!isStringArray(arrayValue)) {\n\t\t\t\t\t\tmessage += nls.localize('validations.stringArrayIncorrectType', 'Incorrect type. Expected a string array.');\n\t\t\t\t\t\tmessage += '\\n';\n\t\t\t\t\t\treturn message;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (typeof propItems.pattern === 'string') {\n\t\t\t\t\t\tconst patternRegex = toRegExp(propItems.pattern);\n\t\t\t\t\t\tarrayValue.forEach(v => {\n\t\t\t\t\t\t\tif (!patternRegex.test(v)) {\n\t\t\t\t\t\t\t\tmessage +=\n\t\t\t\t\t\t\t\t\tpropItems.patternErrorMessage ||\n\t\t\t\t\t\t\t\t\tnls.localize(\n\t\t\t\t\t\t\t\t\t\t'validations.stringArrayItemPattern',\n\t\t\t\t\t\t\t\t\t\t'Value {0} must match regex {1}.',\n\t\t\t\t\t\t\t\t\t\twithQuotes(v),\n\t\t\t\t\t\t\t\t\t\twithQuotes(propItems.pattern!)\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\n\t\t\t\t\tconst propItemsEnum = propItems.enum;\n\t\t\t\t\tif (propItemsEnum) {\n\t\t\t\t\t\tarrayValue.forEach(v => {\n\t\t\t\t\t\t\tif (propItemsEnum.indexOf(v) === -1) {\n\t\t\t\t\t\t\t\tmessage += nls.localize(\n\t\t\t\t\t\t\t\t\t'validations.stringArrayItemEnum',\n\t\t\t\t\t\t\t\t\t'Value {0} is not one of {1}',\n\t\t\t\t\t\t\t\t\twithQuotes(v),\n\t\t\t\t\t\t\t\t\t'[' + propItemsEnum.map(withQuotes).join(', ') + ']'\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\tmessage += '\\n';\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t} else if (propItems.type === 'integer' || propItems.type === 'number') {\n\t\t\t\t\tarrayValue.forEach(v => {\n\t\t\t\t\t\tconst errorMessage = getErrorsForSchema(propItems, v);\n\t\t\t\t\t\tif (errorMessage) {\n\t\t\t\t\t\t\tmessage += `${v}: ${errorMessage}\\n`;\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\treturn message;\n\t\t\t};\n\t\t}\n\t}\n\n\treturn null;\n}\n\nfunction getObjectValidator(prop: IConfigurationPropertySchema): ((value: any) => (string | null)) | null {\n\tif (prop.type === 'object') {\n\t\tconst { properties, patternProperties, additionalProperties } = prop;\n\t\treturn value => {\n\t\t\tif (!value) {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\tconst errors: string[] = [];\n\n\t\t\tif (!isObject(value)) {\n\t\t\t\terrors.push(nls.localize('validations.objectIncorrectType', 'Incorrect type. Expected an object.'));\n\t\t\t} else {\n\t\t\t\tObject.keys(value).forEach((key: string) => {\n\t\t\t\t\tconst data = value[key];\n\t\t\t\t\tif (properties && key in properties) {\n\t\t\t\t\t\tconst errorMessage = getErrorsForSchema(properties[key], data);\n\t\t\t\t\t\tif (errorMessage) {\n\t\t\t\t\t\t\terrors.push(`${key}: ${errorMessage}\\n`);\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (patternProperties) {\n\t\t\t\t\t\tfor (const pattern in patternProperties) {\n\t\t\t\t\t\t\tif (RegExp(pattern).test(key)) {\n\t\t\t\t\t\t\t\tconst errorMessage = getErrorsForSchema(patternProperties[pattern], data);\n\t\t\t\t\t\t\t\tif (errorMessage) {\n\t\t\t\t\t\t\t\t\terrors.push(`${key}: ${errorMessage}\\n`);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif (additionalProperties === false) {\n\t\t\t\t\t\terrors.push(nls.localize('validations.objectPattern', 'Property {0} is not allowed.\\n', key));\n\t\t\t\t\t} else if (typeof additionalProperties === 'object') {\n\t\t\t\t\t\tconst errorMessage = getErrorsForSchema(additionalProperties, data);\n\t\t\t\t\t\tif (errorMessage) {\n\t\t\t\t\t\t\terrors.push(`${key}: ${errorMessage}\\n`);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tif (errors.length) {\n\t\t\t\treturn prop.errorMessage ? [prop.errorMessage, ...errors].join(' ') : errors.join(' ');\n\t\t\t}\n\n\t\t\treturn '';\n\t\t};\n\t}\n\n\treturn null;\n}\n\nfunction getErrorsForSchema(propertySchema: IConfigurationPropertySchema, data: any): string | null {\n\tconst validator = createValidator(propertySchema);\n\tconst errorMessage = validator(data);\n\treturn errorMessage;\n}\n"],
  "mappings": "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",
  "names": ["e"]
}
