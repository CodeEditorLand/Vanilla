{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/preferences/browser/preferencesService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { getErrorMessage } from '../../../../base/common/errors.js';\nimport { Emitter, Event } from '../../../../base/common/event.js';\nimport { parse } from '../../../../base/common/json.js';\nimport { Disposable, IDisposable, MutableDisposable } from '../../../../base/common/lifecycle.js';\nimport * as network from '../../../../base/common/network.js';\nimport { URI } from '../../../../base/common/uri.js';\nimport { CoreEditingCommands } from '../../../../editor/browser/coreCommands.js';\nimport { getCodeEditor, ICodeEditor } from '../../../../editor/browser/editorBrowser.js';\nimport { IPosition } from '../../../../editor/common/core/position.js';\nimport { IModelService } from '../../../../editor/common/services/model.js';\nimport { ITextModelService } from '../../../../editor/common/services/resolverService.js';\nimport * as nls from '../../../../nls.js';\nimport { ConfigurationTarget, IConfigurationService } from '../../../../platform/configuration/common/configuration.js';\nimport { Extensions, getDefaultValue, IConfigurationRegistry, OVERRIDE_PROPERTY_REGEX } from '../../../../platform/configuration/common/configurationRegistry.js';\nimport { FileOperationError, FileOperationResult } from '../../../../platform/files/common/files.js';\nimport { InstantiationType, registerSingleton } from '../../../../platform/instantiation/common/extensions.js';\nimport { IInstantiationService } from '../../../../platform/instantiation/common/instantiation.js';\nimport { IKeybindingService } from '../../../../platform/keybinding/common/keybinding.js';\nimport { ILabelService } from '../../../../platform/label/common/label.js';\nimport { INotificationService } from '../../../../platform/notification/common/notification.js';\nimport { Registry } from '../../../../platform/registry/common/platform.js';\nimport { IWorkspaceContextService, WorkbenchState } from '../../../../platform/workspace/common/workspace.js';\nimport { DEFAULT_EDITOR_ASSOCIATION, IEditorPane } from '../../../common/editor.js';\nimport { EditorInput } from '../../../common/editor/editorInput.js';\nimport { SideBySideEditorInput } from '../../../common/editor/sideBySideEditorInput.js';\nimport { IJSONEditingService } from '../../configuration/common/jsonEditing.js';\nimport { GroupDirection, IEditorGroupsService } from '../../editor/common/editorGroupsService.js';\nimport { IEditorService, SIDE_GROUP, SIDE_GROUP_TYPE } from '../../editor/common/editorService.js';\nimport { KeybindingsEditorInput } from './keybindingsEditorInput.js';\nimport { DEFAULT_SETTINGS_EDITOR_SETTING, FOLDER_SETTINGS_PATH, IKeybindingsEditorOptions, IKeybindingsEditorPane, IOpenSettingsOptions, IPreferencesEditorModel, IPreferencesService, ISetting, ISettingsEditorOptions, ISettingsGroup, SETTINGS_AUTHORITY, USE_SPLIT_JSON_SETTING, validateSettingsEditorOptions } from '../common/preferences.js';\nimport { SettingsEditor2Input } from '../common/preferencesEditorInput.js';\nimport { defaultKeybindingsContents, DefaultKeybindingsEditorModel, DefaultRawSettingsEditorModel, DefaultSettings, DefaultSettingsEditorModel, Settings2EditorModel, SettingsEditorModel, WorkspaceConfigurationEditorModel } from '../common/preferencesModels.js';\nimport { IRemoteAgentService } from '../../remote/common/remoteAgentService.js';\nimport { ITextEditorService } from '../../textfile/common/textEditorService.js';\nimport { ITextFileService } from '../../textfile/common/textfiles.js';\nimport { isObject } from '../../../../base/common/types.js';\nimport { SuggestController } from '../../../../editor/contrib/suggest/browser/suggestController.js';\nimport { IUserDataProfileService } from '../../userDataProfile/common/userDataProfile.js';\nimport { IUserDataProfilesService } from '../../../../platform/userDataProfile/common/userDataProfile.js';\nimport { ResourceSet } from '../../../../base/common/map.js';\nimport { isEqual } from '../../../../base/common/resources.js';\nimport { IURLService } from '../../../../platform/url/common/url.js';\nimport { compareIgnoreCase } from '../../../../base/common/strings.js';\nimport { IExtensionService } from '../../extensions/common/extensions.js';\nimport { IProgressService, ProgressLocation } from '../../../../platform/progress/common/progress.js';\n\nconst emptyEditableSettingsContent = '{\\n}';\n\nexport class PreferencesService extends Disposable implements IPreferencesService {\n\n\tdeclare readonly _serviceBrand: undefined;\n\n\tprivate readonly _onDispose = this._register(new Emitter<void>());\n\n\tprivate readonly _onDidDefaultSettingsContentChanged = this._register(new Emitter<URI>());\n\treadonly onDidDefaultSettingsContentChanged = this._onDidDefaultSettingsContentChanged.event;\n\n\tprivate _defaultUserSettingsContentModel: DefaultSettings | undefined;\n\tprivate _defaultWorkspaceSettingsContentModel: DefaultSettings | undefined;\n\tprivate _defaultFolderSettingsContentModel: DefaultSettings | undefined;\n\n\tprivate _defaultRawSettingsEditorModel: DefaultRawSettingsEditorModel | undefined;\n\n\tprivate readonly _requestedDefaultSettings = new ResourceSet();\n\n\tprivate _settingsGroups: ISettingsGroup[] | undefined = undefined;\n\n\tconstructor(\n\t\t@IEditorService private readonly editorService: IEditorService,\n\t\t@IEditorGroupsService private readonly editorGroupService: IEditorGroupsService,\n\t\t@ITextFileService private readonly textFileService: ITextFileService,\n\t\t@IConfigurationService private readonly configurationService: IConfigurationService,\n\t\t@INotificationService private readonly notificationService: INotificationService,\n\t\t@IWorkspaceContextService private readonly contextService: IWorkspaceContextService,\n\t\t@IInstantiationService private readonly instantiationService: IInstantiationService,\n\t\t@IUserDataProfileService private readonly userDataProfileService: IUserDataProfileService,\n\t\t@IUserDataProfilesService private readonly userDataProfilesService: IUserDataProfilesService,\n\t\t@ITextModelService private readonly textModelResolverService: ITextModelService,\n\t\t@IKeybindingService keybindingService: IKeybindingService,\n\t\t@IModelService modelService: IModelService,\n\t\t@IJSONEditingService private readonly jsonEditingService: IJSONEditingService,\n\t\t@ILabelService private readonly labelService: ILabelService,\n\t\t@IRemoteAgentService private readonly remoteAgentService: IRemoteAgentService,\n\t\t@ITextEditorService private readonly textEditorService: ITextEditorService,\n\t\t@IURLService urlService: IURLService,\n\t\t@IExtensionService private readonly extensionService: IExtensionService,\n\t\t@IProgressService private readonly progressService: IProgressService\n\t) {\n\t\tsuper();\n\t\t// The default keybindings.json updates based on keyboard layouts, so here we make sure\n\t\t// if a model has been given out we update it accordingly.\n\t\tthis._register(keybindingService.onDidUpdateKeybindings(() => {\n\t\t\tconst model = modelService.getModel(this.defaultKeybindingsResource);\n\t\t\tif (!model) {\n\t\t\t\t// model has not been given out => nothing to do\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tmodelService.updateModel(model, defaultKeybindingsContents(keybindingService));\n\t\t}));\n\n\t\tthis._register(urlService.registerHandler(this));\n\t}\n\n\treadonly defaultKeybindingsResource = URI.from({ scheme: network.Schemas.vscode, authority: 'defaultsettings', path: '/keybindings.json' });\n\tprivate readonly defaultSettingsRawResource = URI.from({ scheme: network.Schemas.vscode, authority: 'defaultsettings', path: '/defaultSettings.json' });\n\n\tget userSettingsResource(): URI {\n\t\treturn this.userDataProfileService.currentProfile.settingsResource;\n\t}\n\n\tget workspaceSettingsResource(): URI | null {\n\t\tif (this.contextService.getWorkbenchState() === WorkbenchState.EMPTY) {\n\t\t\treturn null;\n\t\t}\n\t\tconst workspace = this.contextService.getWorkspace();\n\t\treturn workspace.configuration || workspace.folders[0].toResource(FOLDER_SETTINGS_PATH);\n\t}\n\n\tcreateSettingsEditor2Input(): SettingsEditor2Input {\n\t\treturn new SettingsEditor2Input(this);\n\t}\n\n\tgetFolderSettingsResource(resource: URI): URI | null {\n\t\tconst folder = this.contextService.getWorkspaceFolder(resource);\n\t\treturn folder ? folder.toResource(FOLDER_SETTINGS_PATH) : null;\n\t}\n\n\thasDefaultSettingsContent(uri: URI): boolean {\n\t\treturn this.isDefaultSettingsResource(uri) || isEqual(uri, this.defaultSettingsRawResource) || isEqual(uri, this.defaultKeybindingsResource);\n\t}\n\n\tgetDefaultSettingsContent(uri: URI): string | undefined {\n\t\tif (this.isDefaultSettingsResource(uri)) {\n\t\t\t// We opened a split json editor in this case,\n\t\t\t// and this half shows the default settings.\n\n\t\t\tconst target = this.getConfigurationTargetFromDefaultSettingsResource(uri);\n\t\t\tconst defaultSettings = this.getDefaultSettings(target);\n\n\t\t\tif (!this._requestedDefaultSettings.has(uri)) {\n\t\t\t\tthis._register(defaultSettings.onDidChange(() => this._onDidDefaultSettingsContentChanged.fire(uri)));\n\t\t\t\tthis._requestedDefaultSettings.add(uri);\n\t\t\t}\n\t\t\treturn defaultSettings.getContentWithoutMostCommonlyUsed(true);\n\t\t}\n\n\t\tif (isEqual(uri, this.defaultSettingsRawResource)) {\n\t\t\tif (!this._defaultRawSettingsEditorModel) {\n\t\t\t\tthis._defaultRawSettingsEditorModel = this._register(this.instantiationService.createInstance(DefaultRawSettingsEditorModel, this.getDefaultSettings(ConfigurationTarget.USER_LOCAL)));\n\t\t\t\tthis._register(this._defaultRawSettingsEditorModel.onDidContentChanged(() => this._onDidDefaultSettingsContentChanged.fire(uri)));\n\t\t\t}\n\t\t\treturn this._defaultRawSettingsEditorModel.content;\n\t\t}\n\n\t\tif (isEqual(uri, this.defaultKeybindingsResource)) {\n\t\t\tconst defaultKeybindingsEditorModel = this.instantiationService.createInstance(DefaultKeybindingsEditorModel, uri);\n\t\t\treturn defaultKeybindingsEditorModel.content;\n\t\t}\n\n\t\treturn undefined;\n\t}\n\n\tpublic async createPreferencesEditorModel(uri: URI): Promise<IPreferencesEditorModel<ISetting> | null> {\n\t\tif (this.isDefaultSettingsResource(uri)) {\n\t\t\treturn this.createDefaultSettingsEditorModel(uri);\n\t\t}\n\n\t\tif (this.userSettingsResource.toString() === uri.toString() || this.userDataProfilesService.defaultProfile.settingsResource.toString() === uri.toString()) {\n\t\t\treturn this.createEditableSettingsEditorModel(ConfigurationTarget.USER_LOCAL, uri);\n\t\t}\n\n\t\tconst workspaceSettingsUri = await this.getEditableSettingsURI(ConfigurationTarget.WORKSPACE);\n\t\tif (workspaceSettingsUri && workspaceSettingsUri.toString() === uri.toString()) {\n\t\t\treturn this.createEditableSettingsEditorModel(ConfigurationTarget.WORKSPACE, workspaceSettingsUri);\n\t\t}\n\n\t\tif (this.contextService.getWorkbenchState() === WorkbenchState.WORKSPACE) {\n\t\t\tconst settingsUri = await this.getEditableSettingsURI(ConfigurationTarget.WORKSPACE_FOLDER, uri);\n\t\t\tif (settingsUri && settingsUri.toString() === uri.toString()) {\n\t\t\t\treturn this.createEditableSettingsEditorModel(ConfigurationTarget.WORKSPACE_FOLDER, uri);\n\t\t\t}\n\t\t}\n\n\t\tconst remoteEnvironment = await this.remoteAgentService.getEnvironment();\n\t\tconst remoteSettingsUri = remoteEnvironment ? remoteEnvironment.settingsPath : null;\n\t\tif (remoteSettingsUri && remoteSettingsUri.toString() === uri.toString()) {\n\t\t\treturn this.createEditableSettingsEditorModel(ConfigurationTarget.USER_REMOTE, uri);\n\t\t}\n\n\t\treturn null;\n\t}\n\n\topenRawDefaultSettings(): Promise<IEditorPane | undefined> {\n\t\treturn this.editorService.openEditor({ resource: this.defaultSettingsRawResource });\n\t}\n\n\topenRawUserSettings(): Promise<IEditorPane | undefined> {\n\t\treturn this.editorService.openEditor({ resource: this.userSettingsResource });\n\t}\n\n\tprivate shouldOpenJsonByDefault(): boolean {\n\t\treturn this.configurationService.getValue('workbench.settings.editor') === 'json';\n\t}\n\n\topenSettings(options: IOpenSettingsOptions = {}): Promise<IEditorPane | undefined> {\n\t\toptions = {\n\t\t\t...options,\n\t\t\ttarget: ConfigurationTarget.USER_LOCAL,\n\t\t};\n\t\tif (options.query) {\n\t\t\toptions.jsonEditor = false;\n\t\t}\n\n\t\treturn this.open(this.userSettingsResource, options);\n\t}\n\n\topenLanguageSpecificSettings(languageId: string, options: IOpenSettingsOptions = {}): Promise<IEditorPane | undefined> {\n\t\tif (this.shouldOpenJsonByDefault()) {\n\t\t\toptions.query = undefined;\n\t\t\toptions.revealSetting = { key: `[${languageId}]`, edit: true };\n\t\t} else {\n\t\t\toptions.query = `@lang:${languageId}${options.query ? ` ${options.query}` : ''}`;\n\t\t}\n\t\toptions.target = options.target ?? ConfigurationTarget.USER_LOCAL;\n\n\t\treturn this.open(this.userSettingsResource, options);\n\t}\n\n\tprivate open(settingsResource: URI, options: IOpenSettingsOptions): Promise<IEditorPane | undefined> {\n\t\toptions = {\n\t\t\t...options,\n\t\t\tjsonEditor: options.jsonEditor ?? this.shouldOpenJsonByDefault()\n\t\t};\n\n\t\treturn options.jsonEditor ?\n\t\t\tthis.openSettingsJson(settingsResource, options) :\n\t\t\tthis.openSettings2(options);\n\t}\n\n\tprivate async openSettings2(options: IOpenSettingsOptions): Promise<IEditorPane> {\n\t\tconst input = this.createSettingsEditor2Input();\n\t\toptions = {\n\t\t\t...options,\n\t\t\tfocusSearch: true\n\t\t};\n\t\tawait this.editorService.openEditor(input, validateSettingsEditorOptions(options), options.openToSide ? SIDE_GROUP : undefined);\n\t\treturn this.editorGroupService.activeGroup.activeEditorPane!;\n\t}\n\n\topenApplicationSettings(options: IOpenSettingsOptions = {}): Promise<IEditorPane | undefined> {\n\t\toptions = {\n\t\t\t...options,\n\t\t\ttarget: ConfigurationTarget.USER_LOCAL,\n\t\t};\n\t\treturn this.open(this.userDataProfilesService.defaultProfile.settingsResource, options);\n\t}\n\n\topenUserSettings(options: IOpenSettingsOptions = {}): Promise<IEditorPane | undefined> {\n\t\toptions = {\n\t\t\t...options,\n\t\t\ttarget: ConfigurationTarget.USER_LOCAL,\n\t\t};\n\t\treturn this.open(this.userSettingsResource, options);\n\t}\n\n\tasync openRemoteSettings(options: IOpenSettingsOptions = {}): Promise<IEditorPane | undefined> {\n\t\tconst environment = await this.remoteAgentService.getEnvironment();\n\t\tif (environment) {\n\t\t\toptions = {\n\t\t\t\t...options,\n\t\t\t\ttarget: ConfigurationTarget.USER_REMOTE,\n\t\t\t};\n\n\t\t\tthis.open(environment.settingsPath, options);\n\t\t}\n\t\treturn undefined;\n\t}\n\n\topenWorkspaceSettings(options: IOpenSettingsOptions = {}): Promise<IEditorPane | undefined> {\n\t\tif (!this.workspaceSettingsResource) {\n\t\t\tthis.notificationService.info(nls.localize('openFolderFirst', \"Open a folder or workspace first to create workspace or folder settings.\"));\n\t\t\treturn Promise.reject(null);\n\t\t}\n\n\t\toptions = {\n\t\t\t...options,\n\t\t\ttarget: ConfigurationTarget.WORKSPACE\n\t\t};\n\t\treturn this.open(this.workspaceSettingsResource, options);\n\t}\n\n\tasync openFolderSettings(options: IOpenSettingsOptions = {}): Promise<IEditorPane | undefined> {\n\t\toptions = {\n\t\t\t...options,\n\t\t\ttarget: ConfigurationTarget.WORKSPACE_FOLDER\n\t\t};\n\n\t\tif (!options.folderUri) {\n\t\t\tthrow new Error(`Missing folder URI`);\n\t\t}\n\n\t\tconst folderSettingsUri = await this.getEditableSettingsURI(ConfigurationTarget.WORKSPACE_FOLDER, options.folderUri);\n\t\tif (!folderSettingsUri) {\n\t\t\tthrow new Error(`Invalid folder URI - ${options.folderUri.toString()}`);\n\t\t}\n\n\t\treturn this.open(folderSettingsUri, options);\n\t}\n\n\tasync openGlobalKeybindingSettings(textual: boolean, options?: IKeybindingsEditorOptions): Promise<void> {\n\t\toptions = { pinned: true, revealIfOpened: true, ...options };\n\t\tif (textual) {\n\t\t\tconst emptyContents = '// ' + nls.localize('emptyKeybindingsHeader', \"Place your key bindings in this file to override the defaults\") + '\\n[\\n]';\n\t\t\tconst editableKeybindings = this.userDataProfileService.currentProfile.keybindingsResource;\n\t\t\tconst openDefaultKeybindings = !!this.configurationService.getValue('workbench.settings.openDefaultKeybindings');\n\n\t\t\t// Create as needed and open in editor\n\t\t\tawait this.createIfNotExists(editableKeybindings, emptyContents);\n\t\t\tif (openDefaultKeybindings) {\n\t\t\t\tconst activeEditorGroup = this.editorGroupService.activeGroup;\n\t\t\t\tconst sideEditorGroup = this.editorGroupService.addGroup(activeEditorGroup.id, GroupDirection.RIGHT);\n\t\t\t\tawait Promise.all([\n\t\t\t\t\tthis.editorService.openEditor({ resource: this.defaultKeybindingsResource, options: { pinned: true, preserveFocus: true, revealIfOpened: true, override: DEFAULT_EDITOR_ASSOCIATION.id }, label: nls.localize('defaultKeybindings', \"Default Keybindings\"), description: '' }),\n\t\t\t\t\tthis.editorService.openEditor({ resource: editableKeybindings, options }, sideEditorGroup.id)\n\t\t\t\t]);\n\t\t\t} else {\n\t\t\t\tawait this.editorService.openEditor({ resource: editableKeybindings, options });\n\t\t\t}\n\n\t\t} else {\n\t\t\tconst editor = (await this.editorService.openEditor(this.instantiationService.createInstance(KeybindingsEditorInput), { ...options })) as IKeybindingsEditorPane;\n\t\t\tif (options.query) {\n\t\t\t\teditor.search(options.query);\n\t\t\t}\n\t\t}\n\n\t}\n\n\topenDefaultKeybindingsFile(): Promise<IEditorPane | undefined> {\n\t\treturn this.editorService.openEditor({ resource: this.defaultKeybindingsResource, label: nls.localize('defaultKeybindings', \"Default Keybindings\") });\n\t}\n\n\tprivate async openSettingsJson(resource: URI, options: IOpenSettingsOptions): Promise<IEditorPane | undefined> {\n\t\tconst group = options?.openToSide ? SIDE_GROUP : undefined;\n\t\tconst editor = await this.doOpenSettingsJson(resource, options, group);\n\t\tif (editor && options?.revealSetting) {\n\t\t\tawait this.revealSetting(options.revealSetting.key, !!options.revealSetting.edit, editor, resource);\n\t\t}\n\t\treturn editor;\n\t}\n\n\tprivate async doOpenSettingsJson(resource: URI, options: ISettingsEditorOptions, group?: SIDE_GROUP_TYPE): Promise<IEditorPane | undefined> {\n\t\tconst openSplitJSON = !!this.configurationService.getValue(USE_SPLIT_JSON_SETTING);\n\t\tconst openDefaultSettings = !!this.configurationService.getValue(DEFAULT_SETTINGS_EDITOR_SETTING);\n\t\tif (openSplitJSON || openDefaultSettings) {\n\t\t\treturn this.doOpenSplitJSON(resource, options, group);\n\t\t}\n\n\t\tconst configurationTarget = options?.target ?? ConfigurationTarget.USER;\n\t\tconst editableSettingsEditorInput = await this.getOrCreateEditableSettingsEditorInput(configurationTarget, resource);\n\t\toptions = { ...options, pinned: true };\n\t\treturn await this.editorService.openEditor(editableSettingsEditorInput, validateSettingsEditorOptions(options), group);\n\t}\n\n\tprivate async doOpenSplitJSON(resource: URI, options: ISettingsEditorOptions = {}, group?: SIDE_GROUP_TYPE): Promise<IEditorPane | undefined> {\n\t\tconst configurationTarget = options.target ?? ConfigurationTarget.USER;\n\t\tawait this.createSettingsIfNotExists(configurationTarget, resource);\n\t\tconst preferencesEditorInput = this.createSplitJsonEditorInput(configurationTarget, resource);\n\t\toptions = { ...options, pinned: true };\n\t\treturn this.editorService.openEditor(preferencesEditorInput, validateSettingsEditorOptions(options), group);\n\t}\n\n\tpublic createSplitJsonEditorInput(configurationTarget: ConfigurationTarget, resource: URI): EditorInput {\n\t\tconst editableSettingsEditorInput = this.textEditorService.createTextEditor({ resource });\n\t\tconst defaultPreferencesEditorInput = this.textEditorService.createTextEditor({ resource: this.getDefaultSettingsResource(configurationTarget) });\n\t\treturn this.instantiationService.createInstance(SideBySideEditorInput, editableSettingsEditorInput.getName(), undefined, defaultPreferencesEditorInput, editableSettingsEditorInput);\n\t}\n\n\tpublic createSettings2EditorModel(): Settings2EditorModel {\n\t\treturn this.instantiationService.createInstance(Settings2EditorModel, this.getDefaultSettings(ConfigurationTarget.USER_LOCAL));\n\t}\n\n\tprivate getConfigurationTargetFromDefaultSettingsResource(uri: URI) {\n\t\treturn this.isDefaultWorkspaceSettingsResource(uri) ?\n\t\t\tConfigurationTarget.WORKSPACE :\n\t\t\tthis.isDefaultFolderSettingsResource(uri) ?\n\t\t\t\tConfigurationTarget.WORKSPACE_FOLDER :\n\t\t\t\tConfigurationTarget.USER_LOCAL;\n\t}\n\n\tprivate isDefaultSettingsResource(uri: URI): boolean {\n\t\treturn this.isDefaultUserSettingsResource(uri) || this.isDefaultWorkspaceSettingsResource(uri) || this.isDefaultFolderSettingsResource(uri);\n\t}\n\n\tprivate isDefaultUserSettingsResource(uri: URI): boolean {\n\t\treturn uri.authority === 'defaultsettings' && uri.scheme === network.Schemas.vscode && !!uri.path.match(/\\/(\\d+\\/)?settings\\.json$/);\n\t}\n\n\tprivate isDefaultWorkspaceSettingsResource(uri: URI): boolean {\n\t\treturn uri.authority === 'defaultsettings' && uri.scheme === network.Schemas.vscode && !!uri.path.match(/\\/(\\d+\\/)?workspaceSettings\\.json$/);\n\t}\n\n\tprivate isDefaultFolderSettingsResource(uri: URI): boolean {\n\t\treturn uri.authority === 'defaultsettings' && uri.scheme === network.Schemas.vscode && !!uri.path.match(/\\/(\\d+\\/)?resourceSettings\\.json$/);\n\t}\n\n\tprivate getDefaultSettingsResource(configurationTarget: ConfigurationTarget): URI {\n\t\tswitch (configurationTarget) {\n\t\t\tcase ConfigurationTarget.WORKSPACE:\n\t\t\t\treturn URI.from({ scheme: network.Schemas.vscode, authority: 'defaultsettings', path: `/workspaceSettings.json` });\n\t\t\tcase ConfigurationTarget.WORKSPACE_FOLDER:\n\t\t\t\treturn URI.from({ scheme: network.Schemas.vscode, authority: 'defaultsettings', path: `/resourceSettings.json` });\n\t\t}\n\t\treturn URI.from({ scheme: network.Schemas.vscode, authority: 'defaultsettings', path: `/settings.json` });\n\t}\n\n\tprivate async getOrCreateEditableSettingsEditorInput(target: ConfigurationTarget, resource: URI): Promise<EditorInput> {\n\t\tawait this.createSettingsIfNotExists(target, resource);\n\t\treturn this.textEditorService.createTextEditor({ resource });\n\t}\n\n\tprivate async createEditableSettingsEditorModel(configurationTarget: ConfigurationTarget, settingsUri: URI): Promise<SettingsEditorModel> {\n\t\tconst workspace = this.contextService.getWorkspace();\n\t\tif (workspace.configuration && workspace.configuration.toString() === settingsUri.toString()) {\n\t\t\tconst reference = await this.textModelResolverService.createModelReference(settingsUri);\n\t\t\treturn this.instantiationService.createInstance(WorkspaceConfigurationEditorModel, reference, configurationTarget);\n\t\t}\n\n\t\tconst reference = await this.textModelResolverService.createModelReference(settingsUri);\n\t\treturn this.instantiationService.createInstance(SettingsEditorModel, reference, configurationTarget);\n\t}\n\n\tprivate async createDefaultSettingsEditorModel(defaultSettingsUri: URI): Promise<DefaultSettingsEditorModel> {\n\t\tconst reference = await this.textModelResolverService.createModelReference(defaultSettingsUri);\n\t\tconst target = this.getConfigurationTargetFromDefaultSettingsResource(defaultSettingsUri);\n\t\treturn this.instantiationService.createInstance(DefaultSettingsEditorModel, defaultSettingsUri, reference, this.getDefaultSettings(target));\n\t}\n\n\tprivate getDefaultSettings(target: ConfigurationTarget): DefaultSettings {\n\t\tif (target === ConfigurationTarget.WORKSPACE) {\n\t\t\tthis._defaultWorkspaceSettingsContentModel ??= this._register(new DefaultSettings(this.getMostCommonlyUsedSettings(), target, this.configurationService));\n\t\t\treturn this._defaultWorkspaceSettingsContentModel;\n\t\t}\n\t\tif (target === ConfigurationTarget.WORKSPACE_FOLDER) {\n\t\t\tthis._defaultFolderSettingsContentModel ??= this._register(new DefaultSettings(this.getMostCommonlyUsedSettings(), target, this.configurationService));\n\t\t\treturn this._defaultFolderSettingsContentModel;\n\t\t}\n\t\tthis._defaultUserSettingsContentModel ??= this._register(new DefaultSettings(this.getMostCommonlyUsedSettings(), target, this.configurationService));\n\t\treturn this._defaultUserSettingsContentModel;\n\t}\n\n\tpublic async getEditableSettingsURI(configurationTarget: ConfigurationTarget, resource?: URI): Promise<URI | null> {\n\t\tswitch (configurationTarget) {\n\t\t\tcase ConfigurationTarget.APPLICATION:\n\t\t\t\treturn this.userDataProfilesService.defaultProfile.settingsResource;\n\t\t\tcase ConfigurationTarget.USER:\n\t\t\tcase ConfigurationTarget.USER_LOCAL:\n\t\t\t\treturn this.userSettingsResource;\n\t\t\tcase ConfigurationTarget.USER_REMOTE: {\n\t\t\t\tconst remoteEnvironment = await this.remoteAgentService.getEnvironment();\n\t\t\t\treturn remoteEnvironment ? remoteEnvironment.settingsPath : null;\n\t\t\t}\n\t\t\tcase ConfigurationTarget.WORKSPACE:\n\t\t\t\treturn this.workspaceSettingsResource;\n\t\t\tcase ConfigurationTarget.WORKSPACE_FOLDER:\n\t\t\t\tif (resource) {\n\t\t\t\t\treturn this.getFolderSettingsResource(resource);\n\t\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n\n\tprivate async createSettingsIfNotExists(target: ConfigurationTarget, resource: URI): Promise<void> {\n\t\tif (this.contextService.getWorkbenchState() === WorkbenchState.WORKSPACE && target === ConfigurationTarget.WORKSPACE) {\n\t\t\tconst workspaceConfig = this.contextService.getWorkspace().configuration;\n\t\t\tif (!workspaceConfig) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst content = await this.textFileService.read(workspaceConfig);\n\t\t\tif (Object.keys(parse(content.value)).indexOf('settings') === -1) {\n\t\t\t\tawait this.jsonEditingService.write(resource, [{ path: ['settings'], value: {} }], true);\n\t\t\t}\n\t\t\treturn undefined;\n\t\t}\n\n\t\tawait this.createIfNotExists(resource, emptyEditableSettingsContent);\n\t}\n\n\tprivate async createIfNotExists(resource: URI, contents: string): Promise<void> {\n\t\ttry {\n\t\t\tawait this.textFileService.read(resource, { acceptTextOnly: true });\n\t\t} catch (error) {\n\t\t\tif ((<FileOperationError>error).fileOperationResult === FileOperationResult.FILE_NOT_FOUND) {\n\t\t\t\ttry {\n\t\t\t\t\tawait this.textFileService.write(resource, contents);\n\t\t\t\t\treturn;\n\t\t\t\t} catch (error2) {\n\t\t\t\t\tthrow new Error(nls.localize('fail.createSettings', \"Unable to create '{0}' ({1}).\", this.labelService.getUriLabel(resource, { relative: true }), getErrorMessage(error2)));\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthrow error;\n\t\t\t}\n\n\t\t}\n\t}\n\n\tprivate getMostCommonlyUsedSettings(): string[] {\n\t\treturn [\n\t\t\t'files.autoSave',\n\t\t\t'editor.fontSize',\n\t\t\t'editor.fontFamily',\n\t\t\t'editor.tabSize',\n\t\t\t'editor.renderWhitespace',\n\t\t\t'editor.cursorStyle',\n\t\t\t'editor.multiCursorModifier',\n\t\t\t'editor.insertSpaces',\n\t\t\t'editor.wordWrap',\n\t\t\t'files.exclude',\n\t\t\t'files.associations',\n\t\t\t'workbench.editor.enablePreview'\n\t\t];\n\t}\n\n\tprivate async revealSetting(settingKey: string, edit: boolean, editor: IEditorPane, settingsResource: URI): Promise<void> {\n\t\tconst codeEditor = editor ? getCodeEditor(editor.getControl()) : null;\n\t\tif (!codeEditor) {\n\t\t\treturn;\n\t\t}\n\t\tconst settingsModel = await this.createPreferencesEditorModel(settingsResource);\n\t\tif (!settingsModel) {\n\t\t\treturn;\n\t\t}\n\t\tconst position = await this.getPositionToReveal(settingKey, edit, settingsModel, codeEditor);\n\t\tif (position) {\n\t\t\tcodeEditor.setPosition(position);\n\t\t\tcodeEditor.revealPositionNearTop(position);\n\t\t\tcodeEditor.focus();\n\t\t\tif (edit) {\n\t\t\t\tSuggestController.get(codeEditor)?.triggerSuggest();\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate async getPositionToReveal(settingKey: string, edit: boolean, settingsModel: IPreferencesEditorModel<ISetting>, codeEditor: ICodeEditor): Promise<IPosition | null> {\n\t\tconst model = codeEditor.getModel();\n\t\tif (!model) {\n\t\t\treturn null;\n\t\t}\n\t\tconst schema = Registry.as<IConfigurationRegistry>(Extensions.Configuration).getConfigurationProperties()[settingKey];\n\t\tconst isOverrideProperty = OVERRIDE_PROPERTY_REGEX.test(settingKey);\n\t\tif (!schema && !isOverrideProperty) {\n\t\t\treturn null;\n\t\t}\n\n\t\tlet position = null;\n\t\tconst type = schema?.type ?? 'object' /* Type not defined or is an Override Identifier */;\n\t\tlet setting = settingsModel.getPreference(settingKey);\n\t\tif (!setting && edit) {\n\t\t\tlet defaultValue = (type === 'object' || type === 'array') ? this.configurationService.inspect(settingKey).defaultValue : getDefaultValue(type);\n\t\t\tdefaultValue = defaultValue === undefined && isOverrideProperty ? {} : defaultValue;\n\t\t\tif (defaultValue !== undefined) {\n\t\t\t\tconst key = settingsModel instanceof WorkspaceConfigurationEditorModel ? ['settings', settingKey] : [settingKey];\n\t\t\t\tawait this.jsonEditingService.write(settingsModel.uri!, [{ path: key, value: defaultValue }], false);\n\t\t\t\tsetting = settingsModel.getPreference(settingKey);\n\t\t\t}\n\t\t}\n\n\t\tif (setting) {\n\t\t\tif (edit) {\n\t\t\t\tif (isObject(setting.value) || Array.isArray(setting.value)) {\n\t\t\t\t\tposition = { lineNumber: setting.valueRange.startLineNumber, column: setting.valueRange.startColumn + 1 };\n\t\t\t\t\tcodeEditor.setPosition(position);\n\t\t\t\t\tawait CoreEditingCommands.LineBreakInsert.runEditorCommand(null, codeEditor, null);\n\t\t\t\t\tposition = { lineNumber: position.lineNumber + 1, column: model.getLineMaxColumn(position.lineNumber + 1) };\n\t\t\t\t\tconst firstNonWhiteSpaceColumn = model.getLineFirstNonWhitespaceColumn(position.lineNumber);\n\t\t\t\t\tif (firstNonWhiteSpaceColumn) {\n\t\t\t\t\t\t// Line has some text. Insert another new line.\n\t\t\t\t\t\tcodeEditor.setPosition({ lineNumber: position.lineNumber, column: firstNonWhiteSpaceColumn });\n\t\t\t\t\t\tawait CoreEditingCommands.LineBreakInsert.runEditorCommand(null, codeEditor, null);\n\t\t\t\t\t\tposition = { lineNumber: position.lineNumber, column: model.getLineMaxColumn(position.lineNumber) };\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tposition = { lineNumber: setting.valueRange.startLineNumber, column: setting.valueRange.endColumn };\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tposition = { lineNumber: setting.keyRange.startLineNumber, column: setting.keyRange.startColumn };\n\t\t\t}\n\t\t}\n\n\t\treturn position;\n\t}\n\n\tgetSetting(settingId: string): ISetting | undefined {\n\t\tif (!this._settingsGroups) {\n\t\t\tconst defaultSettings = this.getDefaultSettings(ConfigurationTarget.USER);\n\t\t\tconst defaultsChangedDisposable: MutableDisposable<IDisposable> = this._register(new MutableDisposable());\n\t\t\tdefaultsChangedDisposable.value = defaultSettings.onDidChange(() => {\n\t\t\t\tthis._settingsGroups = undefined;\n\t\t\t\tdefaultsChangedDisposable.clear();\n\t\t\t});\n\t\t\tthis._settingsGroups = defaultSettings.getSettingsGroups();\n\t\t}\n\n\t\tfor (const group of this._settingsGroups) {\n\t\t\tfor (const section of group.sections) {\n\t\t\t\tfor (const setting of section.settings) {\n\t\t\t\t\tif (compareIgnoreCase(setting.key, settingId) === 0) {\n\t\t\t\t\t\treturn setting;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn undefined;\n\t}\n\n\t/**\n\t * Should be of the format:\n\t * \tcode://settings/settingName\n\t * Examples:\n\t * \tcode://settings/files.autoSave\n\t *\n\t */\n\tasync handleURL(uri: URI): Promise<boolean> {\n\t\tif (compareIgnoreCase(uri.authority, SETTINGS_AUTHORITY) !== 0) {\n\t\t\treturn false;\n\t\t}\n\n\t\tconst settingInfo = uri.path.split('/').filter(part => !!part);\n\t\tconst settingId = ((settingInfo.length > 0) ? settingInfo[0] : undefined);\n\t\tif (!settingId) {\n\t\t\tthis.openSettings();\n\t\t\treturn true;\n\t\t}\n\n\t\tlet setting = this.getSetting(settingId);\n\n\t\tif (!setting && this.extensionService.extensions.length === 0) {\n\t\t\t// wait for extension points to be processed\n\t\t\tawait this.progressService.withProgress({ location: ProgressLocation.Window }, () => Event.toPromise(this.extensionService.onDidRegisterExtensions));\n\t\t\tsetting = this.getSetting(settingId);\n\t\t}\n\n\t\tconst openSettingsOptions: IOpenSettingsOptions = {};\n\t\tif (setting) {\n\t\t\topenSettingsOptions.query = settingId;\n\t\t}\n\n\t\tthis.openSettings(openSettingsOptions);\n\t\treturn true;\n\t}\n\n\tpublic override dispose(): void {\n\t\tthis._onDispose.fire();\n\t\tsuper.dispose();\n\t}\n}\n\nregisterSingleton(IPreferencesService, PreferencesService, InstantiationType.Delayed);\n"],
  "mappings": "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",
  "names": ["reference"]
}
