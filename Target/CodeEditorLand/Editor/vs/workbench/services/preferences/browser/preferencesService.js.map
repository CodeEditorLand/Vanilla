{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/preferences/browser/preferencesService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { getErrorMessage } from \"../../../../base/common/errors.js\";\nimport { Emitter, Event } from \"../../../../base/common/event.js\";\nimport { parse } from \"../../../../base/common/json.js\";\nimport {\n\tDisposable,\n\ttype IDisposable,\n\tMutableDisposable,\n} from \"../../../../base/common/lifecycle.js\";\nimport { ResourceSet } from \"../../../../base/common/map.js\";\nimport * as network from \"../../../../base/common/network.js\";\nimport { isEqual } from \"../../../../base/common/resources.js\";\nimport { compareIgnoreCase } from \"../../../../base/common/strings.js\";\nimport { isObject } from \"../../../../base/common/types.js\";\nimport { URI } from \"../../../../base/common/uri.js\";\nimport { CoreEditingCommands } from \"../../../../editor/browser/coreCommands.js\";\nimport {\n\ttype ICodeEditor,\n\tgetCodeEditor,\n} from \"../../../../editor/browser/editorBrowser.js\";\nimport type { IPosition } from \"../../../../editor/common/core/position.js\";\nimport { IModelService } from \"../../../../editor/common/services/model.js\";\nimport { ITextModelService } from \"../../../../editor/common/services/resolverService.js\";\nimport { SuggestController } from \"../../../../editor/contrib/suggest/browser/suggestController.js\";\nimport * as nls from \"../../../../nls.js\";\nimport {\n\tConfigurationTarget,\n\tIConfigurationService,\n} from \"../../../../platform/configuration/common/configuration.js\";\nimport {\n\tExtensions,\n\ttype IConfigurationRegistry,\n\tOVERRIDE_PROPERTY_REGEX,\n\tgetDefaultValue,\n} from \"../../../../platform/configuration/common/configurationRegistry.js\";\nimport {\n\ttype FileOperationError,\n\tFileOperationResult,\n} from \"../../../../platform/files/common/files.js\";\nimport {\n\tInstantiationType,\n\tregisterSingleton,\n} from \"../../../../platform/instantiation/common/extensions.js\";\nimport { IInstantiationService } from \"../../../../platform/instantiation/common/instantiation.js\";\nimport { IKeybindingService } from \"../../../../platform/keybinding/common/keybinding.js\";\nimport { ILabelService } from \"../../../../platform/label/common/label.js\";\nimport { INotificationService } from \"../../../../platform/notification/common/notification.js\";\nimport {\n\tIProgressService,\n\tProgressLocation,\n} from \"../../../../platform/progress/common/progress.js\";\nimport { Registry } from \"../../../../platform/registry/common/platform.js\";\nimport { IURLService } from \"../../../../platform/url/common/url.js\";\nimport { IUserDataProfilesService } from \"../../../../platform/userDataProfile/common/userDataProfile.js\";\nimport {\n\tIWorkspaceContextService,\n\tWorkbenchState,\n} from \"../../../../platform/workspace/common/workspace.js\";\nimport {\n\tDEFAULT_EDITOR_ASSOCIATION,\n\ttype IEditorPane,\n} from \"../../../common/editor.js\";\nimport type { EditorInput } from \"../../../common/editor/editorInput.js\";\nimport { SideBySideEditorInput } from \"../../../common/editor/sideBySideEditorInput.js\";\nimport { IJSONEditingService } from \"../../configuration/common/jsonEditing.js\";\nimport {\n\tGroupDirection,\n\tIEditorGroupsService,\n} from \"../../editor/common/editorGroupsService.js\";\nimport {\n\tIEditorService,\n\tSIDE_GROUP,\n\ttype SIDE_GROUP_TYPE,\n} from \"../../editor/common/editorService.js\";\nimport { IExtensionService } from \"../../extensions/common/extensions.js\";\nimport { IRemoteAgentService } from \"../../remote/common/remoteAgentService.js\";\nimport { ITextEditorService } from \"../../textfile/common/textEditorService.js\";\nimport { ITextFileService } from \"../../textfile/common/textfiles.js\";\nimport { IUserDataProfileService } from \"../../userDataProfile/common/userDataProfile.js\";\nimport {\n\tDEFAULT_SETTINGS_EDITOR_SETTING,\n\tFOLDER_SETTINGS_PATH,\n\ttype IKeybindingsEditorOptions,\n\ttype IKeybindingsEditorPane,\n\ttype IOpenSettingsOptions,\n\ttype IPreferencesEditorModel,\n\tIPreferencesService,\n\ttype ISetting,\n\ttype ISettingsEditorOptions,\n\ttype ISettingsGroup,\n\tSETTINGS_AUTHORITY,\n\tUSE_SPLIT_JSON_SETTING,\n\tvalidateSettingsEditorOptions,\n} from \"../common/preferences.js\";\nimport { SettingsEditor2Input } from \"../common/preferencesEditorInput.js\";\nimport {\n\tDefaultKeybindingsEditorModel,\n\tDefaultRawSettingsEditorModel,\n\tDefaultSettings,\n\tDefaultSettingsEditorModel,\n\tSettings2EditorModel,\n\tSettingsEditorModel,\n\tWorkspaceConfigurationEditorModel,\n\tdefaultKeybindingsContents,\n} from \"../common/preferencesModels.js\";\nimport { KeybindingsEditorInput } from \"./keybindingsEditorInput.js\";\n\nconst emptyEditableSettingsContent = \"{\\n}\";\n\nexport class PreferencesService\n\textends Disposable\n\timplements IPreferencesService\n{\n\tdeclare readonly _serviceBrand: undefined;\n\n\tprivate readonly _onDispose = this._register(new Emitter<void>());\n\n\tprivate readonly _onDidDefaultSettingsContentChanged = this._register(\n\t\tnew Emitter<URI>(),\n\t);\n\treadonly onDidDefaultSettingsContentChanged =\n\t\tthis._onDidDefaultSettingsContentChanged.event;\n\n\tprivate _defaultUserSettingsContentModel: DefaultSettings | undefined;\n\tprivate _defaultWorkspaceSettingsContentModel: DefaultSettings | undefined;\n\tprivate _defaultFolderSettingsContentModel: DefaultSettings | undefined;\n\n\tprivate _defaultRawSettingsEditorModel:\n\t\t| DefaultRawSettingsEditorModel\n\t\t| undefined;\n\n\tprivate readonly _requestedDefaultSettings = new ResourceSet();\n\n\tprivate _settingsGroups: ISettingsGroup[] | undefined = undefined;\n\n\tconstructor(\n\t\t@IEditorService private readonly editorService: IEditorService,\n\t\t@IEditorGroupsService\n\t\tprivate readonly editorGroupService: IEditorGroupsService,\n\t\t@ITextFileService private readonly textFileService: ITextFileService,\n\t\t@IConfigurationService\n\t\tprivate readonly configurationService: IConfigurationService,\n\t\t@INotificationService\n\t\tprivate readonly notificationService: INotificationService,\n\t\t@IWorkspaceContextService\n\t\tprivate readonly contextService: IWorkspaceContextService,\n\t\t@IInstantiationService\n\t\tprivate readonly instantiationService: IInstantiationService,\n\t\t@IUserDataProfileService\n\t\tprivate readonly userDataProfileService: IUserDataProfileService,\n\t\t@IUserDataProfilesService\n\t\tprivate readonly userDataProfilesService: IUserDataProfilesService,\n\t\t@ITextModelService\n\t\tprivate readonly textModelResolverService: ITextModelService,\n\t\t@IKeybindingService keybindingService: IKeybindingService,\n\t\t@IModelService modelService: IModelService,\n\t\t@IJSONEditingService\n\t\tprivate readonly jsonEditingService: IJSONEditingService,\n\t\t@ILabelService private readonly labelService: ILabelService,\n\t\t@IRemoteAgentService\n\t\tprivate readonly remoteAgentService: IRemoteAgentService,\n\t\t@ITextEditorService\n\t\tprivate readonly textEditorService: ITextEditorService,\n\t\t@IURLService urlService: IURLService,\n\t\t@IExtensionService private readonly extensionService: IExtensionService,\n\t\t@IProgressService private readonly progressService: IProgressService,\n\t) {\n\t\tsuper();\n\t\t// The default keybindings.json updates based on keyboard layouts, so here we make sure\n\t\t// if a model has been given out we update it accordingly.\n\t\tthis._register(\n\t\t\tkeybindingService.onDidUpdateKeybindings(() => {\n\t\t\t\tconst model = modelService.getModel(\n\t\t\t\t\tthis.defaultKeybindingsResource,\n\t\t\t\t);\n\t\t\t\tif (!model) {\n\t\t\t\t\t// model has not been given out => nothing to do\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tmodelService.updateModel(\n\t\t\t\t\tmodel,\n\t\t\t\t\tdefaultKeybindingsContents(keybindingService),\n\t\t\t\t);\n\t\t\t}),\n\t\t);\n\n\t\tthis._register(urlService.registerHandler(this));\n\t}\n\n\treadonly defaultKeybindingsResource = URI.from({\n\t\tscheme: network.Schemas.vscode,\n\t\tauthority: \"defaultsettings\",\n\t\tpath: \"/keybindings.json\",\n\t});\n\tprivate readonly defaultSettingsRawResource = URI.from({\n\t\tscheme: network.Schemas.vscode,\n\t\tauthority: \"defaultsettings\",\n\t\tpath: \"/defaultSettings.json\",\n\t});\n\n\tget userSettingsResource(): URI {\n\t\treturn this.userDataProfileService.currentProfile.settingsResource;\n\t}\n\n\tget workspaceSettingsResource(): URI | null {\n\t\tif (this.contextService.getWorkbenchState() === WorkbenchState.EMPTY) {\n\t\t\treturn null;\n\t\t}\n\t\tconst workspace = this.contextService.getWorkspace();\n\t\treturn (\n\t\t\tworkspace.configuration ||\n\t\t\tworkspace.folders[0].toResource(FOLDER_SETTINGS_PATH)\n\t\t);\n\t}\n\n\tcreateSettingsEditor2Input(): SettingsEditor2Input {\n\t\treturn new SettingsEditor2Input(this);\n\t}\n\n\tgetFolderSettingsResource(resource: URI): URI | null {\n\t\tconst folder = this.contextService.getWorkspaceFolder(resource);\n\t\treturn folder ? folder.toResource(FOLDER_SETTINGS_PATH) : null;\n\t}\n\n\thasDefaultSettingsContent(uri: URI): boolean {\n\t\treturn (\n\t\t\tthis.isDefaultSettingsResource(uri) ||\n\t\t\tisEqual(uri, this.defaultSettingsRawResource) ||\n\t\t\tisEqual(uri, this.defaultKeybindingsResource)\n\t\t);\n\t}\n\n\tgetDefaultSettingsContent(uri: URI): string | undefined {\n\t\tif (this.isDefaultSettingsResource(uri)) {\n\t\t\t// We opened a split json editor in this case,\n\t\t\t// and this half shows the default settings.\n\n\t\t\tconst target =\n\t\t\t\tthis.getConfigurationTargetFromDefaultSettingsResource(uri);\n\t\t\tconst defaultSettings = this.getDefaultSettings(target);\n\n\t\t\tif (!this._requestedDefaultSettings.has(uri)) {\n\t\t\t\tthis._register(\n\t\t\t\t\tdefaultSettings.onDidChange(() =>\n\t\t\t\t\t\tthis._onDidDefaultSettingsContentChanged.fire(uri),\n\t\t\t\t\t),\n\t\t\t\t);\n\t\t\t\tthis._requestedDefaultSettings.add(uri);\n\t\t\t}\n\t\t\treturn defaultSettings.getContentWithoutMostCommonlyUsed(true);\n\t\t}\n\n\t\tif (isEqual(uri, this.defaultSettingsRawResource)) {\n\t\t\tif (!this._defaultRawSettingsEditorModel) {\n\t\t\t\tthis._defaultRawSettingsEditorModel = this._register(\n\t\t\t\t\tthis.instantiationService.createInstance(\n\t\t\t\t\t\tDefaultRawSettingsEditorModel,\n\t\t\t\t\t\tthis.getDefaultSettings(ConfigurationTarget.USER_LOCAL),\n\t\t\t\t\t),\n\t\t\t\t);\n\t\t\t\tthis._register(\n\t\t\t\t\tthis._defaultRawSettingsEditorModel.onDidContentChanged(\n\t\t\t\t\t\t() =>\n\t\t\t\t\t\t\tthis._onDidDefaultSettingsContentChanged.fire(uri),\n\t\t\t\t\t),\n\t\t\t\t);\n\t\t\t}\n\t\t\treturn this._defaultRawSettingsEditorModel.content;\n\t\t}\n\n\t\tif (isEqual(uri, this.defaultKeybindingsResource)) {\n\t\t\tconst defaultKeybindingsEditorModel =\n\t\t\t\tthis.instantiationService.createInstance(\n\t\t\t\t\tDefaultKeybindingsEditorModel,\n\t\t\t\t\turi,\n\t\t\t\t);\n\t\t\treturn defaultKeybindingsEditorModel.content;\n\t\t}\n\n\t\treturn undefined;\n\t}\n\n\tpublic async createPreferencesEditorModel(\n\t\turi: URI,\n\t): Promise<IPreferencesEditorModel<ISetting> | null> {\n\t\tif (this.isDefaultSettingsResource(uri)) {\n\t\t\treturn this.createDefaultSettingsEditorModel(uri);\n\t\t}\n\n\t\tif (\n\t\t\tthis.userSettingsResource.toString() === uri.toString() ||\n\t\t\tthis.userDataProfilesService.defaultProfile.settingsResource.toString() ===\n\t\t\t\turi.toString()\n\t\t) {\n\t\t\treturn this.createEditableSettingsEditorModel(\n\t\t\t\tConfigurationTarget.USER_LOCAL,\n\t\t\t\turi,\n\t\t\t);\n\t\t}\n\n\t\tconst workspaceSettingsUri = await this.getEditableSettingsURI(\n\t\t\tConfigurationTarget.WORKSPACE,\n\t\t);\n\t\tif (\n\t\t\tworkspaceSettingsUri &&\n\t\t\tworkspaceSettingsUri.toString() === uri.toString()\n\t\t) {\n\t\t\treturn this.createEditableSettingsEditorModel(\n\t\t\t\tConfigurationTarget.WORKSPACE,\n\t\t\t\tworkspaceSettingsUri,\n\t\t\t);\n\t\t}\n\n\t\tif (\n\t\t\tthis.contextService.getWorkbenchState() === WorkbenchState.WORKSPACE\n\t\t) {\n\t\t\tconst settingsUri = await this.getEditableSettingsURI(\n\t\t\t\tConfigurationTarget.WORKSPACE_FOLDER,\n\t\t\t\turi,\n\t\t\t);\n\t\t\tif (settingsUri && settingsUri.toString() === uri.toString()) {\n\t\t\t\treturn this.createEditableSettingsEditorModel(\n\t\t\t\t\tConfigurationTarget.WORKSPACE_FOLDER,\n\t\t\t\t\turi,\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\tconst remoteEnvironment =\n\t\t\tawait this.remoteAgentService.getEnvironment();\n\t\tconst remoteSettingsUri = remoteEnvironment\n\t\t\t? remoteEnvironment.settingsPath\n\t\t\t: null;\n\t\tif (\n\t\t\tremoteSettingsUri &&\n\t\t\tremoteSettingsUri.toString() === uri.toString()\n\t\t) {\n\t\t\treturn this.createEditableSettingsEditorModel(\n\t\t\t\tConfigurationTarget.USER_REMOTE,\n\t\t\t\turi,\n\t\t\t);\n\t\t}\n\n\t\treturn null;\n\t}\n\n\topenRawDefaultSettings(): Promise<IEditorPane | undefined> {\n\t\treturn this.editorService.openEditor({\n\t\t\tresource: this.defaultSettingsRawResource,\n\t\t});\n\t}\n\n\topenRawUserSettings(): Promise<IEditorPane | undefined> {\n\t\treturn this.editorService.openEditor({\n\t\t\tresource: this.userSettingsResource,\n\t\t});\n\t}\n\n\tprivate shouldOpenJsonByDefault(): boolean {\n\t\treturn (\n\t\t\tthis.configurationService.getValue(\"workbench.settings.editor\") ===\n\t\t\t\"json\"\n\t\t);\n\t}\n\n\topenSettings(\n\t\toptions: IOpenSettingsOptions = {},\n\t): Promise<IEditorPane | undefined> {\n\t\toptions = {\n\t\t\t...options,\n\t\t\ttarget: ConfigurationTarget.USER_LOCAL,\n\t\t};\n\t\tif (options.query) {\n\t\t\toptions.jsonEditor = false;\n\t\t}\n\n\t\treturn this.open(this.userSettingsResource, options);\n\t}\n\n\topenLanguageSpecificSettings(\n\t\tlanguageId: string,\n\t\toptions: IOpenSettingsOptions = {},\n\t): Promise<IEditorPane | undefined> {\n\t\tif (this.shouldOpenJsonByDefault()) {\n\t\t\toptions.query = undefined;\n\t\t\toptions.revealSetting = { key: `[${languageId}]`, edit: true };\n\t\t} else {\n\t\t\toptions.query = `@lang:${languageId}${options.query ? ` ${options.query}` : \"\"}`;\n\t\t}\n\t\toptions.target = options.target ?? ConfigurationTarget.USER_LOCAL;\n\n\t\treturn this.open(this.userSettingsResource, options);\n\t}\n\n\tprivate open(\n\t\tsettingsResource: URI,\n\t\toptions: IOpenSettingsOptions,\n\t): Promise<IEditorPane | undefined> {\n\t\toptions = {\n\t\t\t...options,\n\t\t\tjsonEditor: options.jsonEditor ?? this.shouldOpenJsonByDefault(),\n\t\t};\n\n\t\treturn options.jsonEditor\n\t\t\t? this.openSettingsJson(settingsResource, options)\n\t\t\t: this.openSettings2(options);\n\t}\n\n\tprivate async openSettings2(\n\t\toptions: IOpenSettingsOptions,\n\t): Promise<IEditorPane> {\n\t\tconst input = this.createSettingsEditor2Input();\n\t\toptions = {\n\t\t\t...options,\n\t\t\tfocusSearch: true,\n\t\t};\n\t\tawait this.editorService.openEditor(\n\t\t\tinput,\n\t\t\tvalidateSettingsEditorOptions(options),\n\t\t\toptions.openToSide ? SIDE_GROUP : undefined,\n\t\t);\n\t\treturn this.editorGroupService.activeGroup.activeEditorPane!;\n\t}\n\n\topenApplicationSettings(\n\t\toptions: IOpenSettingsOptions = {},\n\t): Promise<IEditorPane | undefined> {\n\t\toptions = {\n\t\t\t...options,\n\t\t\ttarget: ConfigurationTarget.USER_LOCAL,\n\t\t};\n\t\treturn this.open(\n\t\t\tthis.userDataProfilesService.defaultProfile.settingsResource,\n\t\t\toptions,\n\t\t);\n\t}\n\n\topenUserSettings(\n\t\toptions: IOpenSettingsOptions = {},\n\t): Promise<IEditorPane | undefined> {\n\t\toptions = {\n\t\t\t...options,\n\t\t\ttarget: ConfigurationTarget.USER_LOCAL,\n\t\t};\n\t\treturn this.open(this.userSettingsResource, options);\n\t}\n\n\tasync openRemoteSettings(\n\t\toptions: IOpenSettingsOptions = {},\n\t): Promise<IEditorPane | undefined> {\n\t\tconst environment = await this.remoteAgentService.getEnvironment();\n\t\tif (environment) {\n\t\t\toptions = {\n\t\t\t\t...options,\n\t\t\t\ttarget: ConfigurationTarget.USER_REMOTE,\n\t\t\t};\n\n\t\t\tthis.open(environment.settingsPath, options);\n\t\t}\n\t\treturn undefined;\n\t}\n\n\topenWorkspaceSettings(\n\t\toptions: IOpenSettingsOptions = {},\n\t): Promise<IEditorPane | undefined> {\n\t\tif (!this.workspaceSettingsResource) {\n\t\t\tthis.notificationService.info(\n\t\t\t\tnls.localize(\n\t\t\t\t\t\"openFolderFirst\",\n\t\t\t\t\t\"Open a folder or workspace first to create workspace or folder settings.\",\n\t\t\t\t),\n\t\t\t);\n\t\t\treturn Promise.reject(null);\n\t\t}\n\n\t\toptions = {\n\t\t\t...options,\n\t\t\ttarget: ConfigurationTarget.WORKSPACE,\n\t\t};\n\t\treturn this.open(this.workspaceSettingsResource, options);\n\t}\n\n\tasync openFolderSettings(\n\t\toptions: IOpenSettingsOptions = {},\n\t): Promise<IEditorPane | undefined> {\n\t\toptions = {\n\t\t\t...options,\n\t\t\ttarget: ConfigurationTarget.WORKSPACE_FOLDER,\n\t\t};\n\n\t\tif (!options.folderUri) {\n\t\t\tthrow new Error(`Missing folder URI`);\n\t\t}\n\n\t\tconst folderSettingsUri = await this.getEditableSettingsURI(\n\t\t\tConfigurationTarget.WORKSPACE_FOLDER,\n\t\t\toptions.folderUri,\n\t\t);\n\t\tif (!folderSettingsUri) {\n\t\t\tthrow new Error(\n\t\t\t\t`Invalid folder URI - ${options.folderUri.toString()}`,\n\t\t\t);\n\t\t}\n\n\t\treturn this.open(folderSettingsUri, options);\n\t}\n\n\tasync openGlobalKeybindingSettings(\n\t\ttextual: boolean,\n\t\toptions?: IKeybindingsEditorOptions,\n\t): Promise<void> {\n\t\toptions = { pinned: true, revealIfOpened: true, ...options };\n\t\tif (textual) {\n\t\t\tconst emptyContents =\n\t\t\t\t\"// \" +\n\t\t\t\tnls.localize(\n\t\t\t\t\t\"emptyKeybindingsHeader\",\n\t\t\t\t\t\"Place your key bindings in this file to override the defaults\",\n\t\t\t\t) +\n\t\t\t\t\"\\n[\\n]\";\n\t\t\tconst editableKeybindings =\n\t\t\t\tthis.userDataProfileService.currentProfile.keybindingsResource;\n\t\t\tconst openDefaultKeybindings = !!this.configurationService.getValue(\n\t\t\t\t\"workbench.settings.openDefaultKeybindings\",\n\t\t\t);\n\n\t\t\t// Create as needed and open in editor\n\t\t\tawait this.createIfNotExists(editableKeybindings, emptyContents);\n\t\t\tif (openDefaultKeybindings) {\n\t\t\t\tconst activeEditorGroup = this.editorGroupService.activeGroup;\n\t\t\t\tconst sideEditorGroup = this.editorGroupService.addGroup(\n\t\t\t\t\tactiveEditorGroup.id,\n\t\t\t\t\tGroupDirection.RIGHT,\n\t\t\t\t);\n\t\t\t\tawait Promise.all([\n\t\t\t\t\tthis.editorService.openEditor({\n\t\t\t\t\t\tresource: this.defaultKeybindingsResource,\n\t\t\t\t\t\toptions: {\n\t\t\t\t\t\t\tpinned: true,\n\t\t\t\t\t\t\tpreserveFocus: true,\n\t\t\t\t\t\t\trevealIfOpened: true,\n\t\t\t\t\t\t\toverride: DEFAULT_EDITOR_ASSOCIATION.id,\n\t\t\t\t\t\t},\n\t\t\t\t\t\tlabel: nls.localize(\n\t\t\t\t\t\t\t\"defaultKeybindings\",\n\t\t\t\t\t\t\t\"Default Keybindings\",\n\t\t\t\t\t\t),\n\t\t\t\t\t\tdescription: \"\",\n\t\t\t\t\t}),\n\t\t\t\t\tthis.editorService.openEditor(\n\t\t\t\t\t\t{ resource: editableKeybindings, options },\n\t\t\t\t\t\tsideEditorGroup.id,\n\t\t\t\t\t),\n\t\t\t\t]);\n\t\t\t} else {\n\t\t\t\tawait this.editorService.openEditor({\n\t\t\t\t\tresource: editableKeybindings,\n\t\t\t\t\toptions,\n\t\t\t\t});\n\t\t\t}\n\t\t} else {\n\t\t\tconst editor = (await this.editorService.openEditor(\n\t\t\t\tthis.instantiationService.createInstance(\n\t\t\t\t\tKeybindingsEditorInput,\n\t\t\t\t),\n\t\t\t\t{ ...options },\n\t\t\t)) as IKeybindingsEditorPane;\n\t\t\tif (options.query) {\n\t\t\t\teditor.search(options.query);\n\t\t\t}\n\t\t}\n\t}\n\n\topenDefaultKeybindingsFile(): Promise<IEditorPane | undefined> {\n\t\treturn this.editorService.openEditor({\n\t\t\tresource: this.defaultKeybindingsResource,\n\t\t\tlabel: nls.localize(\"defaultKeybindings\", \"Default Keybindings\"),\n\t\t});\n\t}\n\n\tprivate async openSettingsJson(\n\t\tresource: URI,\n\t\toptions: IOpenSettingsOptions,\n\t): Promise<IEditorPane | undefined> {\n\t\tconst group = options?.openToSide ? SIDE_GROUP : undefined;\n\t\tconst editor = await this.doOpenSettingsJson(resource, options, group);\n\t\tif (editor && options?.revealSetting) {\n\t\t\tawait this.revealSetting(\n\t\t\t\toptions.revealSetting.key,\n\t\t\t\t!!options.revealSetting.edit,\n\t\t\t\teditor,\n\t\t\t\tresource,\n\t\t\t);\n\t\t}\n\t\treturn editor;\n\t}\n\n\tprivate async doOpenSettingsJson(\n\t\tresource: URI,\n\t\toptions: ISettingsEditorOptions,\n\t\tgroup?: SIDE_GROUP_TYPE,\n\t): Promise<IEditorPane | undefined> {\n\t\tconst openSplitJSON = !!this.configurationService.getValue(\n\t\t\tUSE_SPLIT_JSON_SETTING,\n\t\t);\n\t\tconst openDefaultSettings = !!this.configurationService.getValue(\n\t\t\tDEFAULT_SETTINGS_EDITOR_SETTING,\n\t\t);\n\t\tif (openSplitJSON || openDefaultSettings) {\n\t\t\treturn this.doOpenSplitJSON(resource, options, group);\n\t\t}\n\n\t\tconst configurationTarget = options?.target ?? ConfigurationTarget.USER;\n\t\tconst editableSettingsEditorInput =\n\t\t\tawait this.getOrCreateEditableSettingsEditorInput(\n\t\t\t\tconfigurationTarget,\n\t\t\t\tresource,\n\t\t\t);\n\t\toptions = { ...options, pinned: true };\n\t\treturn await this.editorService.openEditor(\n\t\t\teditableSettingsEditorInput,\n\t\t\tvalidateSettingsEditorOptions(options),\n\t\t\tgroup,\n\t\t);\n\t}\n\n\tprivate async doOpenSplitJSON(\n\t\tresource: URI,\n\t\toptions: ISettingsEditorOptions = {},\n\t\tgroup?: SIDE_GROUP_TYPE,\n\t): Promise<IEditorPane | undefined> {\n\t\tconst configurationTarget = options.target ?? ConfigurationTarget.USER;\n\t\tawait this.createSettingsIfNotExists(configurationTarget, resource);\n\t\tconst preferencesEditorInput = this.createSplitJsonEditorInput(\n\t\t\tconfigurationTarget,\n\t\t\tresource,\n\t\t);\n\t\toptions = { ...options, pinned: true };\n\t\treturn this.editorService.openEditor(\n\t\t\tpreferencesEditorInput,\n\t\t\tvalidateSettingsEditorOptions(options),\n\t\t\tgroup,\n\t\t);\n\t}\n\n\tpublic createSplitJsonEditorInput(\n\t\tconfigurationTarget: ConfigurationTarget,\n\t\tresource: URI,\n\t): EditorInput {\n\t\tconst editableSettingsEditorInput =\n\t\t\tthis.textEditorService.createTextEditor({ resource });\n\t\tconst defaultPreferencesEditorInput =\n\t\t\tthis.textEditorService.createTextEditor({\n\t\t\t\tresource: this.getDefaultSettingsResource(configurationTarget),\n\t\t\t});\n\t\treturn this.instantiationService.createInstance(\n\t\t\tSideBySideEditorInput,\n\t\t\teditableSettingsEditorInput.getName(),\n\t\t\tundefined,\n\t\t\tdefaultPreferencesEditorInput,\n\t\t\teditableSettingsEditorInput,\n\t\t);\n\t}\n\n\tpublic createSettings2EditorModel(): Settings2EditorModel {\n\t\treturn this.instantiationService.createInstance(\n\t\t\tSettings2EditorModel,\n\t\t\tthis.getDefaultSettings(ConfigurationTarget.USER_LOCAL),\n\t\t);\n\t}\n\n\tprivate getConfigurationTargetFromDefaultSettingsResource(uri: URI) {\n\t\treturn this.isDefaultWorkspaceSettingsResource(uri)\n\t\t\t? ConfigurationTarget.WORKSPACE\n\t\t\t: this.isDefaultFolderSettingsResource(uri)\n\t\t\t\t? ConfigurationTarget.WORKSPACE_FOLDER\n\t\t\t\t: ConfigurationTarget.USER_LOCAL;\n\t}\n\n\tprivate isDefaultSettingsResource(uri: URI): boolean {\n\t\treturn (\n\t\t\tthis.isDefaultUserSettingsResource(uri) ||\n\t\t\tthis.isDefaultWorkspaceSettingsResource(uri) ||\n\t\t\tthis.isDefaultFolderSettingsResource(uri)\n\t\t);\n\t}\n\n\tprivate isDefaultUserSettingsResource(uri: URI): boolean {\n\t\treturn (\n\t\t\turi.authority === \"defaultsettings\" &&\n\t\t\turi.scheme === network.Schemas.vscode &&\n\t\t\t!!uri.path.match(/\\/(\\d+\\/)?settings\\.json$/)\n\t\t);\n\t}\n\n\tprivate isDefaultWorkspaceSettingsResource(uri: URI): boolean {\n\t\treturn (\n\t\t\turi.authority === \"defaultsettings\" &&\n\t\t\turi.scheme === network.Schemas.vscode &&\n\t\t\t!!uri.path.match(/\\/(\\d+\\/)?workspaceSettings\\.json$/)\n\t\t);\n\t}\n\n\tprivate isDefaultFolderSettingsResource(uri: URI): boolean {\n\t\treturn (\n\t\t\turi.authority === \"defaultsettings\" &&\n\t\t\turi.scheme === network.Schemas.vscode &&\n\t\t\t!!uri.path.match(/\\/(\\d+\\/)?resourceSettings\\.json$/)\n\t\t);\n\t}\n\n\tprivate getDefaultSettingsResource(\n\t\tconfigurationTarget: ConfigurationTarget,\n\t): URI {\n\t\tswitch (configurationTarget) {\n\t\t\tcase ConfigurationTarget.WORKSPACE:\n\t\t\t\treturn URI.from({\n\t\t\t\t\tscheme: network.Schemas.vscode,\n\t\t\t\t\tauthority: \"defaultsettings\",\n\t\t\t\t\tpath: `/workspaceSettings.json`,\n\t\t\t\t});\n\t\t\tcase ConfigurationTarget.WORKSPACE_FOLDER:\n\t\t\t\treturn URI.from({\n\t\t\t\t\tscheme: network.Schemas.vscode,\n\t\t\t\t\tauthority: \"defaultsettings\",\n\t\t\t\t\tpath: `/resourceSettings.json`,\n\t\t\t\t});\n\t\t}\n\t\treturn URI.from({\n\t\t\tscheme: network.Schemas.vscode,\n\t\t\tauthority: \"defaultsettings\",\n\t\t\tpath: `/settings.json`,\n\t\t});\n\t}\n\n\tprivate async getOrCreateEditableSettingsEditorInput(\n\t\ttarget: ConfigurationTarget,\n\t\tresource: URI,\n\t): Promise<EditorInput> {\n\t\tawait this.createSettingsIfNotExists(target, resource);\n\t\treturn this.textEditorService.createTextEditor({ resource });\n\t}\n\n\tprivate async createEditableSettingsEditorModel(\n\t\tconfigurationTarget: ConfigurationTarget,\n\t\tsettingsUri: URI,\n\t): Promise<SettingsEditorModel> {\n\t\tconst workspace = this.contextService.getWorkspace();\n\t\tif (\n\t\t\tworkspace.configuration &&\n\t\t\tworkspace.configuration.toString() === settingsUri.toString()\n\t\t) {\n\t\t\tconst reference =\n\t\t\t\tawait this.textModelResolverService.createModelReference(\n\t\t\t\t\tsettingsUri,\n\t\t\t\t);\n\t\t\treturn this.instantiationService.createInstance(\n\t\t\t\tWorkspaceConfigurationEditorModel,\n\t\t\t\treference,\n\t\t\t\tconfigurationTarget,\n\t\t\t);\n\t\t}\n\n\t\tconst reference =\n\t\t\tawait this.textModelResolverService.createModelReference(\n\t\t\t\tsettingsUri,\n\t\t\t);\n\t\treturn this.instantiationService.createInstance(\n\t\t\tSettingsEditorModel,\n\t\t\treference,\n\t\t\tconfigurationTarget,\n\t\t);\n\t}\n\n\tprivate async createDefaultSettingsEditorModel(\n\t\tdefaultSettingsUri: URI,\n\t): Promise<DefaultSettingsEditorModel> {\n\t\tconst reference =\n\t\t\tawait this.textModelResolverService.createModelReference(\n\t\t\t\tdefaultSettingsUri,\n\t\t\t);\n\t\tconst target =\n\t\t\tthis.getConfigurationTargetFromDefaultSettingsResource(\n\t\t\t\tdefaultSettingsUri,\n\t\t\t);\n\t\treturn this.instantiationService.createInstance(\n\t\t\tDefaultSettingsEditorModel,\n\t\t\tdefaultSettingsUri,\n\t\t\treference,\n\t\t\tthis.getDefaultSettings(target),\n\t\t);\n\t}\n\n\tprivate getDefaultSettings(target: ConfigurationTarget): DefaultSettings {\n\t\tif (target === ConfigurationTarget.WORKSPACE) {\n\t\t\tthis._defaultWorkspaceSettingsContentModel ??= this._register(\n\t\t\t\tnew DefaultSettings(\n\t\t\t\t\tthis.getMostCommonlyUsedSettings(),\n\t\t\t\t\ttarget,\n\t\t\t\t\tthis.configurationService,\n\t\t\t\t),\n\t\t\t);\n\t\t\treturn this._defaultWorkspaceSettingsContentModel;\n\t\t}\n\t\tif (target === ConfigurationTarget.WORKSPACE_FOLDER) {\n\t\t\tthis._defaultFolderSettingsContentModel ??= this._register(\n\t\t\t\tnew DefaultSettings(\n\t\t\t\t\tthis.getMostCommonlyUsedSettings(),\n\t\t\t\t\ttarget,\n\t\t\t\t\tthis.configurationService,\n\t\t\t\t),\n\t\t\t);\n\t\t\treturn this._defaultFolderSettingsContentModel;\n\t\t}\n\t\tthis._defaultUserSettingsContentModel ??= this._register(\n\t\t\tnew DefaultSettings(\n\t\t\t\tthis.getMostCommonlyUsedSettings(),\n\t\t\t\ttarget,\n\t\t\t\tthis.configurationService,\n\t\t\t),\n\t\t);\n\t\treturn this._defaultUserSettingsContentModel;\n\t}\n\n\tpublic async getEditableSettingsURI(\n\t\tconfigurationTarget: ConfigurationTarget,\n\t\tresource?: URI,\n\t): Promise<URI | null> {\n\t\tswitch (configurationTarget) {\n\t\t\tcase ConfigurationTarget.APPLICATION:\n\t\t\t\treturn this.userDataProfilesService.defaultProfile\n\t\t\t\t\t.settingsResource;\n\t\t\tcase ConfigurationTarget.USER:\n\t\t\tcase ConfigurationTarget.USER_LOCAL:\n\t\t\t\treturn this.userSettingsResource;\n\t\t\tcase ConfigurationTarget.USER_REMOTE: {\n\t\t\t\tconst remoteEnvironment =\n\t\t\t\t\tawait this.remoteAgentService.getEnvironment();\n\t\t\t\treturn remoteEnvironment\n\t\t\t\t\t? remoteEnvironment.settingsPath\n\t\t\t\t\t: null;\n\t\t\t}\n\t\t\tcase ConfigurationTarget.WORKSPACE:\n\t\t\t\treturn this.workspaceSettingsResource;\n\t\t\tcase ConfigurationTarget.WORKSPACE_FOLDER:\n\t\t\t\tif (resource) {\n\t\t\t\t\treturn this.getFolderSettingsResource(resource);\n\t\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n\n\tprivate async createSettingsIfNotExists(\n\t\ttarget: ConfigurationTarget,\n\t\tresource: URI,\n\t): Promise<void> {\n\t\tif (\n\t\t\tthis.contextService.getWorkbenchState() ===\n\t\t\t\tWorkbenchState.WORKSPACE &&\n\t\t\ttarget === ConfigurationTarget.WORKSPACE\n\t\t) {\n\t\t\tconst workspaceConfig =\n\t\t\t\tthis.contextService.getWorkspace().configuration;\n\t\t\tif (!workspaceConfig) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst content = await this.textFileService.read(workspaceConfig);\n\t\t\tif (Object.keys(parse(content.value)).indexOf(\"settings\") === -1) {\n\t\t\t\tawait this.jsonEditingService.write(\n\t\t\t\t\tresource,\n\t\t\t\t\t[{ path: [\"settings\"], value: {} }],\n\t\t\t\t\ttrue,\n\t\t\t\t);\n\t\t\t}\n\t\t\treturn undefined;\n\t\t}\n\n\t\tawait this.createIfNotExists(resource, emptyEditableSettingsContent);\n\t}\n\n\tprivate async createIfNotExists(\n\t\tresource: URI,\n\t\tcontents: string,\n\t): Promise<void> {\n\t\ttry {\n\t\t\tawait this.textFileService.read(resource, { acceptTextOnly: true });\n\t\t} catch (error) {\n\t\t\tif (\n\t\t\t\t(<FileOperationError>error).fileOperationResult ===\n\t\t\t\tFileOperationResult.FILE_NOT_FOUND\n\t\t\t) {\n\t\t\t\ttry {\n\t\t\t\t\tawait this.textFileService.write(resource, contents);\n\t\t\t\t\treturn;\n\t\t\t\t} catch (error2) {\n\t\t\t\t\tthrow new Error(\n\t\t\t\t\t\tnls.localize(\n\t\t\t\t\t\t\t\"fail.createSettings\",\n\t\t\t\t\t\t\t\"Unable to create '{0}' ({1}).\",\n\t\t\t\t\t\t\tthis.labelService.getUriLabel(resource, {\n\t\t\t\t\t\t\t\trelative: true,\n\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t\tgetErrorMessage(error2),\n\t\t\t\t\t\t),\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthrow error;\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate getMostCommonlyUsedSettings(): string[] {\n\t\treturn [\n\t\t\t\"files.autoSave\",\n\t\t\t\"editor.fontSize\",\n\t\t\t\"editor.fontFamily\",\n\t\t\t\"editor.tabSize\",\n\t\t\t\"editor.renderWhitespace\",\n\t\t\t\"editor.cursorStyle\",\n\t\t\t\"editor.multiCursorModifier\",\n\t\t\t\"editor.insertSpaces\",\n\t\t\t\"editor.wordWrap\",\n\t\t\t\"files.exclude\",\n\t\t\t\"files.associations\",\n\t\t\t\"workbench.editor.enablePreview\",\n\t\t];\n\t}\n\n\tprivate async revealSetting(\n\t\tsettingKey: string,\n\t\tedit: boolean,\n\t\teditor: IEditorPane,\n\t\tsettingsResource: URI,\n\t): Promise<void> {\n\t\tconst codeEditor = editor ? getCodeEditor(editor.getControl()) : null;\n\t\tif (!codeEditor) {\n\t\t\treturn;\n\t\t}\n\t\tconst settingsModel =\n\t\t\tawait this.createPreferencesEditorModel(settingsResource);\n\t\tif (!settingsModel) {\n\t\t\treturn;\n\t\t}\n\t\tconst position = await this.getPositionToReveal(\n\t\t\tsettingKey,\n\t\t\tedit,\n\t\t\tsettingsModel,\n\t\t\tcodeEditor,\n\t\t);\n\t\tif (position) {\n\t\t\tcodeEditor.setPosition(position);\n\t\t\tcodeEditor.revealPositionNearTop(position);\n\t\t\tcodeEditor.focus();\n\t\t\tif (edit) {\n\t\t\t\tSuggestController.get(codeEditor)?.triggerSuggest();\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate async getPositionToReveal(\n\t\tsettingKey: string,\n\t\tedit: boolean,\n\t\tsettingsModel: IPreferencesEditorModel<ISetting>,\n\t\tcodeEditor: ICodeEditor,\n\t): Promise<IPosition | null> {\n\t\tconst model = codeEditor.getModel();\n\t\tif (!model) {\n\t\t\treturn null;\n\t\t}\n\t\tconst schema = Registry.as<IConfigurationRegistry>(\n\t\t\tExtensions.Configuration,\n\t\t).getConfigurationProperties()[settingKey];\n\t\tconst isOverrideProperty = OVERRIDE_PROPERTY_REGEX.test(settingKey);\n\t\tif (!schema && !isOverrideProperty) {\n\t\t\treturn null;\n\t\t}\n\n\t\tlet position = null;\n\t\tconst type =\n\t\t\tschema?.type ??\n\t\t\t\"object\" /* Type not defined or is an Override Identifier */;\n\t\tlet setting = settingsModel.getPreference(settingKey);\n\t\tif (!setting && edit) {\n\t\t\tlet defaultValue =\n\t\t\t\ttype === \"object\" || type === \"array\"\n\t\t\t\t\t? this.configurationService.inspect(settingKey).defaultValue\n\t\t\t\t\t: getDefaultValue(type);\n\t\t\tdefaultValue =\n\t\t\t\tdefaultValue === undefined && isOverrideProperty\n\t\t\t\t\t? {}\n\t\t\t\t\t: defaultValue;\n\t\t\tif (defaultValue !== undefined) {\n\t\t\t\tconst key =\n\t\t\t\t\tsettingsModel instanceof WorkspaceConfigurationEditorModel\n\t\t\t\t\t\t? [\"settings\", settingKey]\n\t\t\t\t\t\t: [settingKey];\n\t\t\t\tawait this.jsonEditingService.write(\n\t\t\t\t\tsettingsModel.uri!,\n\t\t\t\t\t[{ path: key, value: defaultValue }],\n\t\t\t\t\tfalse,\n\t\t\t\t);\n\t\t\t\tsetting = settingsModel.getPreference(settingKey);\n\t\t\t}\n\t\t}\n\n\t\tif (setting) {\n\t\t\tif (edit) {\n\t\t\t\tif (isObject(setting.value) || Array.isArray(setting.value)) {\n\t\t\t\t\tposition = {\n\t\t\t\t\t\tlineNumber: setting.valueRange.startLineNumber,\n\t\t\t\t\t\tcolumn: setting.valueRange.startColumn + 1,\n\t\t\t\t\t};\n\t\t\t\t\tcodeEditor.setPosition(position);\n\t\t\t\t\tawait CoreEditingCommands.LineBreakInsert.runEditorCommand(\n\t\t\t\t\t\tnull,\n\t\t\t\t\t\tcodeEditor,\n\t\t\t\t\t\tnull,\n\t\t\t\t\t);\n\t\t\t\t\tposition = {\n\t\t\t\t\t\tlineNumber: position.lineNumber + 1,\n\t\t\t\t\t\tcolumn: model.getLineMaxColumn(position.lineNumber + 1),\n\t\t\t\t\t};\n\t\t\t\t\tconst firstNonWhiteSpaceColumn =\n\t\t\t\t\t\tmodel.getLineFirstNonWhitespaceColumn(\n\t\t\t\t\t\t\tposition.lineNumber,\n\t\t\t\t\t\t);\n\t\t\t\t\tif (firstNonWhiteSpaceColumn) {\n\t\t\t\t\t\t// Line has some text. Insert another new line.\n\t\t\t\t\t\tcodeEditor.setPosition({\n\t\t\t\t\t\t\tlineNumber: position.lineNumber,\n\t\t\t\t\t\t\tcolumn: firstNonWhiteSpaceColumn,\n\t\t\t\t\t\t});\n\t\t\t\t\t\tawait CoreEditingCommands.LineBreakInsert.runEditorCommand(\n\t\t\t\t\t\t\tnull,\n\t\t\t\t\t\t\tcodeEditor,\n\t\t\t\t\t\t\tnull,\n\t\t\t\t\t\t);\n\t\t\t\t\t\tposition = {\n\t\t\t\t\t\t\tlineNumber: position.lineNumber,\n\t\t\t\t\t\t\tcolumn: model.getLineMaxColumn(position.lineNumber),\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tposition = {\n\t\t\t\t\t\tlineNumber: setting.valueRange.startLineNumber,\n\t\t\t\t\t\tcolumn: setting.valueRange.endColumn,\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tposition = {\n\t\t\t\t\tlineNumber: setting.keyRange.startLineNumber,\n\t\t\t\t\tcolumn: setting.keyRange.startColumn,\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\n\t\treturn position;\n\t}\n\n\tgetSetting(settingId: string): ISetting | undefined {\n\t\tif (!this._settingsGroups) {\n\t\t\tconst defaultSettings = this.getDefaultSettings(\n\t\t\t\tConfigurationTarget.USER,\n\t\t\t);\n\t\t\tconst defaultsChangedDisposable: MutableDisposable<IDisposable> =\n\t\t\t\tthis._register(new MutableDisposable());\n\t\t\tdefaultsChangedDisposable.value = defaultSettings.onDidChange(\n\t\t\t\t() => {\n\t\t\t\t\tthis._settingsGroups = undefined;\n\t\t\t\t\tdefaultsChangedDisposable.clear();\n\t\t\t\t},\n\t\t\t);\n\t\t\tthis._settingsGroups = defaultSettings.getSettingsGroups();\n\t\t}\n\n\t\tfor (const group of this._settingsGroups) {\n\t\t\tfor (const section of group.sections) {\n\t\t\t\tfor (const setting of section.settings) {\n\t\t\t\t\tif (compareIgnoreCase(setting.key, settingId) === 0) {\n\t\t\t\t\t\treturn setting;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn undefined;\n\t}\n\n\t/**\n\t * Should be of the format:\n\t * \tcode://settings/settingName\n\t * Examples:\n\t * \tcode://settings/files.autoSave\n\t *\n\t */\n\tasync handleURL(uri: URI): Promise<boolean> {\n\t\tif (compareIgnoreCase(uri.authority, SETTINGS_AUTHORITY) !== 0) {\n\t\t\treturn false;\n\t\t}\n\n\t\tconst settingInfo = uri.path.split(\"/\").filter((part) => !!part);\n\t\tconst settingId = settingInfo.length > 0 ? settingInfo[0] : undefined;\n\t\tif (!settingId) {\n\t\t\tthis.openSettings();\n\t\t\treturn true;\n\t\t}\n\n\t\tlet setting = this.getSetting(settingId);\n\n\t\tif (!setting && this.extensionService.extensions.length === 0) {\n\t\t\t// wait for extension points to be processed\n\t\t\tawait this.progressService.withProgress(\n\t\t\t\t{ location: ProgressLocation.Window },\n\t\t\t\t() =>\n\t\t\t\t\tEvent.toPromise(\n\t\t\t\t\t\tthis.extensionService.onDidRegisterExtensions,\n\t\t\t\t\t),\n\t\t\t);\n\t\t\tsetting = this.getSetting(settingId);\n\t\t}\n\n\t\tconst openSettingsOptions: IOpenSettingsOptions = {};\n\t\tif (setting) {\n\t\t\topenSettingsOptions.query = settingId;\n\t\t}\n\n\t\tthis.openSettings(openSettingsOptions);\n\t\treturn true;\n\t}\n\n\tpublic override dispose(): void {\n\t\tthis._onDispose.fire();\n\t\tsuper.dispose();\n\t}\n}\n\nregisterSingleton(\n\tIPreferencesService,\n\tPreferencesService,\n\tInstantiationType.Delayed,\n);\n"],
  "mappings": "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",
  "names": ["reference"]
}
