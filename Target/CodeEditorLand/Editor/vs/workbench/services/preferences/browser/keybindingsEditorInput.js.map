{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/preferences/browser/keybindingsEditorInput.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Codicon } from \"../../../../base/common/codicons.js\";\nimport { OS } from \"../../../../base/common/platform.js\";\nimport type { ThemeIcon } from \"../../../../base/common/themables.js\";\nimport * as nls from \"../../../../nls.js\";\nimport { IInstantiationService } from \"../../../../platform/instantiation/common/instantiation.js\";\nimport { registerIcon } from \"../../../../platform/theme/common/iconRegistry.js\";\nimport type { IUntypedEditorInput } from \"../../../common/editor.js\";\nimport { EditorInput } from \"../../../common/editor/editorInput.js\";\nimport { KeybindingsEditorModel } from \"./keybindingsEditorModel.js\";\n\nexport interface IKeybindingsEditorSearchOptions {\n\tsearchValue: string;\n\trecordKeybindings: boolean;\n\tsortByPrecedence: boolean;\n}\n\nconst KeybindingsEditorIcon = registerIcon(\n\t\"keybindings-editor-label-icon\",\n\tCodicon.keyboard,\n\tnls.localize(\n\t\t\"keybindingsEditorLabelIcon\",\n\t\t\"Icon of the keybindings editor label.\",\n\t),\n);\n\nexport class KeybindingsEditorInput extends EditorInput {\n\tstatic readonly ID: string = \"workbench.input.keybindings\";\n\treadonly keybindingsModel: KeybindingsEditorModel;\n\n\tsearchOptions: IKeybindingsEditorSearchOptions | null = null;\n\n\treadonly resource = undefined;\n\n\tconstructor(\n\t\t@IInstantiationService instantiationService: IInstantiationService,\n\t) {\n\t\tsuper();\n\n\t\tthis.keybindingsModel = instantiationService.createInstance(\n\t\t\tKeybindingsEditorModel,\n\t\t\tOS,\n\t\t);\n\t}\n\n\toverride get typeId(): string {\n\t\treturn KeybindingsEditorInput.ID;\n\t}\n\n\toverride getName(): string {\n\t\treturn nls.localize(\"keybindingsInputName\", \"Keyboard Shortcuts\");\n\t}\n\n\toverride getIcon(): ThemeIcon {\n\t\treturn KeybindingsEditorIcon;\n\t}\n\n\toverride async resolve(): Promise<KeybindingsEditorModel> {\n\t\treturn this.keybindingsModel;\n\t}\n\n\toverride matches(otherInput: EditorInput | IUntypedEditorInput): boolean {\n\t\treturn otherInput instanceof KeybindingsEditorInput;\n\t}\n\n\toverride dispose(): void {\n\t\tthis.keybindingsModel.dispose();\n\n\t\tsuper.dispose();\n\t}\n}\n"],
  "mappings": ";;;;;;;;;;;;AAKA,SAAS,eAAe;AACxB,SAAS,UAAU;AAEnB,YAAY,SAAS;AACrB,SAAS,6BAA6B;AACtC,SAAS,oBAAoB;AAE7B,SAAS,mBAAmB;AAC5B,SAAS,8BAA8B;AAQvC,MAAM,wBAAwB;AAAA,EAC7B;AAAA,EACA,QAAQ;AAAA,EACR,IAAI;AAAA,IACH;AAAA,IACA;AAAA,EACD;AACD;AAEO,IAAM,yBAAN,cAAqC,YAAY;AAAA,EA9BxD,OA8BwD;AAAA;AAAA;AAAA,EACvD,OAAgB,KAAa;AAAA,EACpB;AAAA,EAET,gBAAwD;AAAA,EAE/C,WAAW;AAAA,EAEpB,YACwB,sBACtB;AACD,UAAM;AAEN,SAAK,mBAAmB,qBAAqB;AAAA,MAC5C;AAAA,MACA;AAAA,IACD;AAAA,EACD;AAAA,EAEA,IAAa,SAAiB;AAC7B,WAAO,uBAAuB;AAAA,EAC/B;AAAA,EAES,UAAkB;AAC1B,WAAO,IAAI,SAAS,wBAAwB,oBAAoB;AAAA,EACjE;AAAA,EAES,UAAqB;AAC7B,WAAO;AAAA,EACR;AAAA,EAEA,MAAe,UAA2C;AACzD,WAAO,KAAK;AAAA,EACb;AAAA,EAES,QAAQ,YAAwD;AACxE,WAAO,sBAAsB;AAAA,EAC9B;AAAA,EAES,UAAgB;AACxB,SAAK,iBAAiB,QAAQ;AAE9B,UAAM,QAAQ;AAAA,EACf;AACD;AA5Ca,yBAAN;AAAA,EASJ;AAAA,GATU;",
  "names": []
}
