{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/preferences/browser/keybindingsEditorInput.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Codicon } from '../../../../base/common/codicons.js';\nimport { OS } from '../../../../base/common/platform.js';\nimport { ThemeIcon } from '../../../../base/common/themables.js';\nimport * as nls from '../../../../nls.js';\nimport { IInstantiationService } from '../../../../platform/instantiation/common/instantiation.js';\nimport { registerIcon } from '../../../../platform/theme/common/iconRegistry.js';\nimport { IUntypedEditorInput } from '../../../common/editor.js';\nimport { EditorInput } from '../../../common/editor/editorInput.js';\nimport { KeybindingsEditorModel } from './keybindingsEditorModel.js';\n\nexport interface IKeybindingsEditorSearchOptions {\n\tsearchValue: string;\n\trecordKeybindings: boolean;\n\tsortByPrecedence: boolean;\n}\n\nconst KeybindingsEditorIcon = registerIcon('keybindings-editor-label-icon', Codicon.keyboard, nls.localize('keybindingsEditorLabelIcon', 'Icon of the keybindings editor label.'));\n\nexport class KeybindingsEditorInput extends EditorInput {\n\n\tstatic readonly ID: string = 'workbench.input.keybindings';\n\treadonly keybindingsModel: KeybindingsEditorModel;\n\n\tsearchOptions: IKeybindingsEditorSearchOptions | null = null;\n\n\treadonly resource = undefined;\n\n\tconstructor(@IInstantiationService instantiationService: IInstantiationService) {\n\t\tsuper();\n\n\t\tthis.keybindingsModel = instantiationService.createInstance(KeybindingsEditorModel, OS);\n\t}\n\n\toverride get typeId(): string {\n\t\treturn KeybindingsEditorInput.ID;\n\t}\n\n\toverride getName(): string {\n\t\treturn nls.localize('keybindingsInputName', \"Keyboard Shortcuts\");\n\t}\n\n\toverride getIcon(): ThemeIcon {\n\t\treturn KeybindingsEditorIcon;\n\t}\n\n\toverride async resolve(): Promise<KeybindingsEditorModel> {\n\t\treturn this.keybindingsModel;\n\t}\n\n\toverride matches(otherInput: EditorInput | IUntypedEditorInput): boolean {\n\t\treturn otherInput instanceof KeybindingsEditorInput;\n\t}\n\n\toverride dispose(): void {\n\t\tthis.keybindingsModel.dispose();\n\n\t\tsuper.dispose();\n\t}\n}\n"],
  "mappings": ";;;;;;;;;;;;AAKA,SAAS,eAAe;AACxB,SAAS,UAAU;AACnB,SAAS,iBAAiB;AAC1B,YAAY,SAAS;AACrB,SAAS,6BAA6B;AACtC,SAAS,oBAAoB;AAC7B,SAAS,2BAA2B;AACpC,SAAS,mBAAmB;AAC5B,SAAS,8BAA8B;AAQvC,MAAM,wBAAwB,aAAa,iCAAiC,QAAQ,UAAU,IAAI,SAAS,8BAA8B,uCAAuC,CAAC;AAE1K,IAAM,yBAAN,cAAqC,YAAY;AAAA,EAvBxD,OAuBwD;AAAA;AAAA;AAAA,EAEvD,OAAgB,KAAa;AAAA,EACpB;AAAA,EAET,gBAAwD;AAAA,EAE/C,WAAW;AAAA,EAEpB,YAAmC,sBAA6C;AAC/E,UAAM;AAEN,SAAK,mBAAmB,qBAAqB,eAAe,wBAAwB,EAAE;AAAA,EACvF;AAAA,EAEA,IAAa,SAAiB;AAC7B,WAAO,uBAAuB;AAAA,EAC/B;AAAA,EAES,UAAkB;AAC1B,WAAO,IAAI,SAAS,wBAAwB,oBAAoB;AAAA,EACjE;AAAA,EAES,UAAqB;AAC7B,WAAO;AAAA,EACR;AAAA,EAEA,MAAe,UAA2C;AACzD,WAAO,KAAK;AAAA,EACb;AAAA,EAES,QAAQ,YAAwD;AACxE,WAAO,sBAAsB;AAAA,EAC9B;AAAA,EAES,UAAgB;AACxB,SAAK,iBAAiB,QAAQ;AAE9B,UAAM,QAAQ;AAAA,EACf;AACD;AAxCa,yBAAN;AAAA,EASO;AAAA,GATD;",
  "names": []
}
