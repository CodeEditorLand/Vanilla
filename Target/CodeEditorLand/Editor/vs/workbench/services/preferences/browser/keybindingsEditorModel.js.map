{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/preferences/browser/keybindingsEditorModel.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { coalesce, distinct } from \"../../../../base/common/arrays.js\";\nimport {\n\ttype IFilter,\n\ttype IMatch,\n\tmatchesCamelCase,\n\tmatchesContiguousSubString,\n\tmatchesPrefix,\n\tmatchesWords,\n\tor,\n} from \"../../../../base/common/filters.js\";\nimport {\n\tAriaLabelProvider,\n\ttype ModifierLabels as ModLabels,\n\tUILabelProvider,\n\tUserSettingsLabelProvider,\n} from \"../../../../base/common/keybindingLabels.js\";\nimport type {\n\tResolvedChord,\n\tResolvedKeybinding,\n} from \"../../../../base/common/keybindings.js\";\nimport {\n\tLanguage,\n\ttype OperatingSystem,\n} from \"../../../../base/common/platform.js\";\nimport * as strings from \"../../../../base/common/strings.js\";\nimport { isEmptyObject, isString } from \"../../../../base/common/types.js\";\nimport { localize } from \"../../../../nls.js\";\nimport type {\n\tICommandAction,\n\tILocalizedString,\n} from \"../../../../platform/action/common/action.js\";\nimport { MenuRegistry } from \"../../../../platform/actions/common/actions.js\";\nimport { ContextKeyExpr } from \"../../../../platform/contextkey/common/contextkey.js\";\nimport {\n\tExtensionIdentifier,\n\tExtensionIdentifierMap,\n\ttype IExtensionDescription,\n} from \"../../../../platform/extensions/common/extensions.js\";\nimport { IKeybindingService } from \"../../../../platform/keybinding/common/keybinding.js\";\nimport { ResolvedKeybindingItem } from \"../../../../platform/keybinding/common/resolvedKeybindingItem.js\";\nimport { EditorModel } from \"../../../common/editor/editorModel.js\";\nimport { IExtensionService } from \"../../extensions/common/extensions.js\";\nimport { getAllUnboundCommands } from \"../../keybinding/browser/unboundCommands.js\";\nimport type {\n\tIKeybindingItem,\n\tIKeybindingItemEntry,\n\tKeybindingMatch,\n\tKeybindingMatches,\n} from \"../common/preferences.js\";\n\nexport const KEYBINDING_ENTRY_TEMPLATE_ID = \"keybinding.entry.template\";\n\nconst SOURCE_SYSTEM = localize(\"default\", \"System\");\nconst SOURCE_EXTENSION = localize(\"extension\", \"Extension\");\nconst SOURCE_USER = localize(\"user\", \"User\");\n\ninterface ModifierLabels {\n\tui: ModLabels;\n\taria: ModLabels;\n\tuser: ModLabels;\n}\n\nexport function createKeybindingCommandQuery(\n\tcommandId: string,\n\twhen?: string,\n): string {\n\tconst whenPart = when ? ` +when:${when}` : \"\";\n\treturn `@command:${commandId}${whenPart}`;\n}\n\nconst wordFilter = or(matchesPrefix, matchesWords, matchesContiguousSubString);\nconst COMMAND_REGEX = /@command:\\s*([^+]+)/i;\nconst WHEN_REGEX = /\\+when:\\s*(.+)/i;\nconst SOURCE_REGEX = /@source:\\s*(user|default|system|extension)/i;\nconst EXTENSION_REGEX = /@ext:\\s*((\".+\")|([^\\s]+))/i;\nconst KEYBINDING_REGEX = /@keybinding:\\s*((\".+\")|(\\S+))/i;\n\nexport class KeybindingsEditorModel extends EditorModel {\n\tprivate _keybindingItems: IKeybindingItem[];\n\tprivate _keybindingItemsSortedByPrecedence: IKeybindingItem[];\n\tprivate modifierLabels: ModifierLabels;\n\n\tconstructor(\n\t\tos: OperatingSystem,\n\t\t@IKeybindingService\n\t\tprivate readonly keybindingsService: IKeybindingService,\n\t\t@IExtensionService private readonly extensionService: IExtensionService,\n\t) {\n\t\tsuper();\n\t\tthis._keybindingItems = [];\n\t\tthis._keybindingItemsSortedByPrecedence = [];\n\t\tthis.modifierLabels = {\n\t\t\tui: UILabelProvider.modifierLabels[os],\n\t\t\taria: AriaLabelProvider.modifierLabels[os],\n\t\t\tuser: UserSettingsLabelProvider.modifierLabels[os],\n\t\t};\n\t}\n\n\tfetch(\n\t\tsearchValue: string,\n\t\tsortByPrecedence = false,\n\t): IKeybindingItemEntry[] {\n\t\tlet keybindingItems = sortByPrecedence\n\t\t\t? this._keybindingItemsSortedByPrecedence\n\t\t\t: this._keybindingItems;\n\n\t\t// @command:COMMAND_ID\n\t\tconst commandIdMatches = COMMAND_REGEX.exec(searchValue);\n\t\tif (commandIdMatches && commandIdMatches[1]) {\n\t\t\tconst command = commandIdMatches[1].trim();\n\t\t\tlet filteredKeybindingItems = keybindingItems.filter(\n\t\t\t\t(k) => k.command === command,\n\t\t\t);\n\n\t\t\t// +when:WHEN_EXPRESSION\n\t\t\tif (filteredKeybindingItems.length) {\n\t\t\t\tconst whenMatches = WHEN_REGEX.exec(searchValue);\n\t\t\t\tif (whenMatches && whenMatches[1]) {\n\t\t\t\t\tconst whenValue = whenMatches[1].trim();\n\t\t\t\t\tfilteredKeybindingItems = this.filterByWhen(\n\t\t\t\t\t\tfilteredKeybindingItems,\n\t\t\t\t\t\tcommand,\n\t\t\t\t\t\twhenValue,\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn filteredKeybindingItems.map(\n\t\t\t\t(keybindingItem) =>\n\t\t\t\t\t<IKeybindingItemEntry>{\n\t\t\t\t\t\tid: KeybindingsEditorModel.getId(keybindingItem),\n\t\t\t\t\t\tkeybindingItem,\n\t\t\t\t\t\ttemplateId: KEYBINDING_ENTRY_TEMPLATE_ID,\n\t\t\t\t\t},\n\t\t\t);\n\t\t}\n\n\t\t// @source:SOURCE\n\t\tif (SOURCE_REGEX.test(searchValue)) {\n\t\t\tkeybindingItems = this.filterBySource(keybindingItems, searchValue);\n\t\t\tsearchValue = searchValue.replace(SOURCE_REGEX, \"\");\n\t\t} else {\n\t\t\t// @ext:EXTENSION_ID\n\t\t\tconst extensionMatches = EXTENSION_REGEX.exec(searchValue);\n\t\t\tif (\n\t\t\t\textensionMatches &&\n\t\t\t\t(extensionMatches[2] || extensionMatches[3])\n\t\t\t) {\n\t\t\t\tconst extensionId = extensionMatches[2]\n\t\t\t\t\t? extensionMatches[2].substring(\n\t\t\t\t\t\t\t1,\n\t\t\t\t\t\t\textensionMatches[2].length - 1,\n\t\t\t\t\t\t)\n\t\t\t\t\t: extensionMatches[3];\n\t\t\t\tkeybindingItems = this.filterByExtension(\n\t\t\t\t\tkeybindingItems,\n\t\t\t\t\textensionId,\n\t\t\t\t);\n\t\t\t\tsearchValue = searchValue.replace(EXTENSION_REGEX, \"\");\n\t\t\t} else {\n\t\t\t\t// @keybinding:KEYBINDING\n\t\t\t\tconst keybindingMatches = KEYBINDING_REGEX.exec(searchValue);\n\t\t\t\tif (\n\t\t\t\t\tkeybindingMatches &&\n\t\t\t\t\t(keybindingMatches[2] || keybindingMatches[3])\n\t\t\t\t) {\n\t\t\t\t\tsearchValue =\n\t\t\t\t\t\tkeybindingMatches[2] || `\"${keybindingMatches[3]}\"`;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tsearchValue = searchValue.trim();\n\t\tif (!searchValue) {\n\t\t\treturn keybindingItems.map(\n\t\t\t\t(keybindingItem) =>\n\t\t\t\t\t<IKeybindingItemEntry>{\n\t\t\t\t\t\tid: KeybindingsEditorModel.getId(keybindingItem),\n\t\t\t\t\t\tkeybindingItem,\n\t\t\t\t\t\ttemplateId: KEYBINDING_ENTRY_TEMPLATE_ID,\n\t\t\t\t\t},\n\t\t\t);\n\t\t}\n\n\t\treturn this.filterByText(keybindingItems, searchValue);\n\t}\n\n\tprivate filterBySource(\n\t\tkeybindingItems: IKeybindingItem[],\n\t\tsearchValue: string,\n\t): IKeybindingItem[] {\n\t\tif (\n\t\t\t/@source:\\s*default/i.test(searchValue) ||\n\t\t\t/@source:\\s*system/i.test(searchValue)\n\t\t) {\n\t\t\treturn keybindingItems.filter((k) => k.source === SOURCE_SYSTEM);\n\t\t}\n\t\tif (/@source:\\s*user/i.test(searchValue)) {\n\t\t\treturn keybindingItems.filter((k) => k.source === SOURCE_USER);\n\t\t}\n\t\tif (/@source:\\s*extension/i.test(searchValue)) {\n\t\t\treturn keybindingItems.filter(\n\t\t\t\t(k) => !isString(k.source) || k.source === SOURCE_EXTENSION,\n\t\t\t);\n\t\t}\n\t\treturn keybindingItems;\n\t}\n\n\tprivate filterByExtension(\n\t\tkeybindingItems: IKeybindingItem[],\n\t\textension: string,\n\t): IKeybindingItem[] {\n\t\textension = extension.toLowerCase().trim();\n\t\treturn keybindingItems.filter(\n\t\t\t(k) =>\n\t\t\t\t!isString(k.source) &&\n\t\t\t\t(ExtensionIdentifier.equals(k.source.identifier, extension) ||\n\t\t\t\t\tk.source.displayName?.toLowerCase() ===\n\t\t\t\t\t\textension.toLowerCase()),\n\t\t);\n\t}\n\n\tprivate filterByText(\n\t\tkeybindingItems: IKeybindingItem[],\n\t\tsearchValue: string,\n\t): IKeybindingItemEntry[] {\n\t\tconst quoteAtFirstChar = searchValue.charAt(0) === '\"';\n\t\tconst quoteAtLastChar =\n\t\t\tsearchValue.charAt(searchValue.length - 1) === '\"';\n\t\tconst completeMatch = quoteAtFirstChar && quoteAtLastChar;\n\t\tif (quoteAtFirstChar) {\n\t\t\tsearchValue = searchValue.substring(1);\n\t\t}\n\t\tif (quoteAtLastChar) {\n\t\t\tsearchValue = searchValue.substring(0, searchValue.length - 1);\n\t\t}\n\t\tsearchValue = searchValue.trim();\n\n\t\tconst result: IKeybindingItemEntry[] = [];\n\t\tconst words = searchValue.split(\" \");\n\t\tconst keybindingWords = this.splitKeybindingWords(words);\n\t\tfor (const keybindingItem of keybindingItems) {\n\t\t\tconst keybindingMatches = new KeybindingItemMatches(\n\t\t\t\tthis.modifierLabels,\n\t\t\t\tkeybindingItem,\n\t\t\t\tsearchValue,\n\t\t\t\twords,\n\t\t\t\tkeybindingWords,\n\t\t\t\tcompleteMatch,\n\t\t\t);\n\t\t\tif (\n\t\t\t\tkeybindingMatches.commandIdMatches ||\n\t\t\t\tkeybindingMatches.commandLabelMatches ||\n\t\t\t\tkeybindingMatches.commandDefaultLabelMatches ||\n\t\t\t\tkeybindingMatches.sourceMatches ||\n\t\t\t\tkeybindingMatches.whenMatches ||\n\t\t\t\tkeybindingMatches.keybindingMatches ||\n\t\t\t\tkeybindingMatches.extensionIdMatches ||\n\t\t\t\tkeybindingMatches.extensionLabelMatches\n\t\t\t) {\n\t\t\t\tresult.push({\n\t\t\t\t\tid: KeybindingsEditorModel.getId(keybindingItem),\n\t\t\t\t\ttemplateId: KEYBINDING_ENTRY_TEMPLATE_ID,\n\t\t\t\t\tcommandLabelMatches:\n\t\t\t\t\t\tkeybindingMatches.commandLabelMatches || undefined,\n\t\t\t\t\tcommandDefaultLabelMatches:\n\t\t\t\t\t\tkeybindingMatches.commandDefaultLabelMatches ||\n\t\t\t\t\t\tundefined,\n\t\t\t\t\tkeybindingItem,\n\t\t\t\t\tkeybindingMatches:\n\t\t\t\t\t\tkeybindingMatches.keybindingMatches || undefined,\n\t\t\t\t\tcommandIdMatches:\n\t\t\t\t\t\tkeybindingMatches.commandIdMatches || undefined,\n\t\t\t\t\tsourceMatches: keybindingMatches.sourceMatches || undefined,\n\t\t\t\t\twhenMatches: keybindingMatches.whenMatches || undefined,\n\t\t\t\t\textensionIdMatches:\n\t\t\t\t\t\tkeybindingMatches.extensionIdMatches || undefined,\n\t\t\t\t\textensionLabelMatches:\n\t\t\t\t\t\tkeybindingMatches.extensionLabelMatches || undefined,\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n\n\tprivate filterByWhen(\n\t\tkeybindingItems: IKeybindingItem[],\n\t\tcommand: string,\n\t\twhen: string,\n\t): IKeybindingItem[] {\n\t\tif (keybindingItems.length === 0) {\n\t\t\treturn [];\n\t\t}\n\n\t\t// Check if a keybinding with the same command id and when clause exists\n\t\tconst keybindingItemsWithWhen = keybindingItems.filter(\n\t\t\t(k) => k.when === when,\n\t\t);\n\t\tif (keybindingItemsWithWhen.length) {\n\t\t\treturn keybindingItemsWithWhen;\n\t\t}\n\n\t\t// Create a new entry with the when clause which does not live in the model\n\t\t// We can reuse some of the properties from the same command with different when clause\n\t\tconst commandLabel = keybindingItems[0].commandLabel;\n\n\t\tconst keybindingItem = new ResolvedKeybindingItem(\n\t\t\tundefined,\n\t\t\tcommand,\n\t\t\tnull,\n\t\t\tContextKeyExpr.deserialize(when),\n\t\t\tfalse,\n\t\t\tnull,\n\t\t\tfalse,\n\t\t);\n\t\tconst actionLabels = new Map([[command, commandLabel]]);\n\t\treturn [\n\t\t\tKeybindingsEditorModel.toKeybindingEntry(\n\t\t\t\tcommand,\n\t\t\t\tkeybindingItem,\n\t\t\t\tactionLabels,\n\t\t\t\tthis.getExtensionsMapping(),\n\t\t\t),\n\t\t];\n\t}\n\n\tprivate splitKeybindingWords(wordsSeparatedBySpaces: string[]): string[] {\n\t\tconst result: string[] = [];\n\t\tfor (const word of wordsSeparatedBySpaces) {\n\t\t\tresult.push(...coalesce(word.split(\"+\")));\n\t\t}\n\t\treturn result;\n\t}\n\n\toverride async resolve(\n\t\tactionLabels = new Map<string, string>(),\n\t): Promise<void> {\n\t\tconst extensions = this.getExtensionsMapping();\n\n\t\tthis._keybindingItemsSortedByPrecedence = [];\n\t\tconst boundCommands: Map<string, boolean> = new Map<string, boolean>();\n\t\tfor (const keybinding of this.keybindingsService.getKeybindings()) {\n\t\t\tif (keybinding.command) {\n\t\t\t\t// Skip keybindings without commands\n\t\t\t\tthis._keybindingItemsSortedByPrecedence.push(\n\t\t\t\t\tKeybindingsEditorModel.toKeybindingEntry(\n\t\t\t\t\t\tkeybinding.command,\n\t\t\t\t\t\tkeybinding,\n\t\t\t\t\t\tactionLabels,\n\t\t\t\t\t\textensions,\n\t\t\t\t\t),\n\t\t\t\t);\n\t\t\t\tboundCommands.set(keybinding.command, true);\n\t\t\t}\n\t\t}\n\n\t\tconst commandsWithDefaultKeybindings = this.keybindingsService\n\t\t\t.getDefaultKeybindings()\n\t\t\t.map((keybinding) => keybinding.command);\n\t\tfor (const command of getAllUnboundCommands(boundCommands)) {\n\t\t\tconst keybindingItem = new ResolvedKeybindingItem(\n\t\t\t\tundefined,\n\t\t\t\tcommand,\n\t\t\t\tnull,\n\t\t\t\tundefined,\n\t\t\t\tcommandsWithDefaultKeybindings.indexOf(command) === -1,\n\t\t\t\tnull,\n\t\t\t\tfalse,\n\t\t\t);\n\t\t\tthis._keybindingItemsSortedByPrecedence.push(\n\t\t\t\tKeybindingsEditorModel.toKeybindingEntry(\n\t\t\t\t\tcommand,\n\t\t\t\t\tkeybindingItem,\n\t\t\t\t\tactionLabels,\n\t\t\t\t\textensions,\n\t\t\t\t),\n\t\t\t);\n\t\t}\n\t\tthis._keybindingItemsSortedByPrecedence = distinct(\n\t\t\tthis._keybindingItemsSortedByPrecedence,\n\t\t\t(keybindingItem) => KeybindingsEditorModel.getId(keybindingItem),\n\t\t);\n\t\tthis._keybindingItems = this._keybindingItemsSortedByPrecedence\n\t\t\t.slice(0)\n\t\t\t.sort((a, b) => KeybindingsEditorModel.compareKeybindingData(a, b));\n\n\t\treturn super.resolve();\n\t}\n\n\tprivate static getId(keybindingItem: IKeybindingItem): string {\n\t\treturn (\n\t\t\tkeybindingItem.command +\n\t\t\t(keybindingItem?.keybinding?.getAriaLabel() ?? \"\") +\n\t\t\tkeybindingItem.when +\n\t\t\t(isString(keybindingItem.source)\n\t\t\t\t? keybindingItem.source\n\t\t\t\t: keybindingItem.source.identifier.value)\n\t\t);\n\t}\n\n\tprivate getExtensionsMapping(): ExtensionIdentifierMap<IExtensionDescription> {\n\t\tconst extensions = new ExtensionIdentifierMap<IExtensionDescription>();\n\t\tfor (const extension of this.extensionService.extensions) {\n\t\t\textensions.set(extension.identifier, extension);\n\t\t}\n\t\treturn extensions;\n\t}\n\n\tprivate static compareKeybindingData(\n\t\ta: IKeybindingItem,\n\t\tb: IKeybindingItem,\n\t): number {\n\t\tif (a.keybinding && !b.keybinding) {\n\t\t\treturn -1;\n\t\t}\n\t\tif (b.keybinding && !a.keybinding) {\n\t\t\treturn 1;\n\t\t}\n\t\tif (a.commandLabel && !b.commandLabel) {\n\t\t\treturn -1;\n\t\t}\n\t\tif (b.commandLabel && !a.commandLabel) {\n\t\t\treturn 1;\n\t\t}\n\t\tif (a.commandLabel && b.commandLabel) {\n\t\t\tif (a.commandLabel !== b.commandLabel) {\n\t\t\t\treturn a.commandLabel.localeCompare(b.commandLabel);\n\t\t\t}\n\t\t}\n\t\tif (a.command === b.command) {\n\t\t\treturn a.keybindingItem.isDefault ? 1 : -1;\n\t\t}\n\t\treturn a.command.localeCompare(b.command);\n\t}\n\n\tprivate static toKeybindingEntry(\n\t\tcommand: string,\n\t\tkeybindingItem: ResolvedKeybindingItem,\n\t\tactions: Map<string, string>,\n\t\textensions: ExtensionIdentifierMap<IExtensionDescription>,\n\t): IKeybindingItem {\n\t\tconst menuCommand = MenuRegistry.getCommand(command);\n\t\tconst editorActionLabel = actions.get(command);\n\t\tlet source: string | IExtensionDescription = SOURCE_USER;\n\t\tif (keybindingItem.isDefault) {\n\t\t\tconst extensionId =\n\t\t\t\tkeybindingItem.extensionId ??\n\t\t\t\t(keybindingItem.resolvedKeybinding\n\t\t\t\t\t? undefined\n\t\t\t\t\t: menuCommand?.source?.id);\n\t\t\tsource = extensionId\n\t\t\t\t? (extensions.get(extensionId) ?? SOURCE_EXTENSION)\n\t\t\t\t: SOURCE_SYSTEM;\n\t\t}\n\t\treturn <IKeybindingItem>{\n\t\t\tkeybinding: keybindingItem.resolvedKeybinding,\n\t\t\tkeybindingItem,\n\t\t\tcommand,\n\t\t\tcommandLabel: KeybindingsEditorModel.getCommandLabel(\n\t\t\t\tmenuCommand,\n\t\t\t\teditorActionLabel,\n\t\t\t),\n\t\t\tcommandDefaultLabel:\n\t\t\t\tKeybindingsEditorModel.getCommandDefaultLabel(menuCommand),\n\t\t\twhen: keybindingItem.when ? keybindingItem.when.serialize() : \"\",\n\t\t\tsource,\n\t\t};\n\t}\n\n\tprivate static getCommandDefaultLabel(\n\t\tmenuCommand: ICommandAction | undefined,\n\t): string | null {\n\t\tif (!Language.isDefaultVariant()) {\n\t\t\tif (\n\t\t\t\tmenuCommand &&\n\t\t\t\tmenuCommand.title &&\n\t\t\t\t(<ILocalizedString>menuCommand.title).original\n\t\t\t) {\n\t\t\t\tconst category: string | undefined = menuCommand.category\n\t\t\t\t\t? (<ILocalizedString>menuCommand.category).original\n\t\t\t\t\t: undefined;\n\t\t\t\tconst title = (<ILocalizedString>menuCommand.title).original;\n\t\t\t\treturn category\n\t\t\t\t\t? localize(\"cat.title\", \"{0}: {1}\", category, title)\n\t\t\t\t\t: title;\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n\n\tprivate static getCommandLabel(\n\t\tmenuCommand: ICommandAction | undefined,\n\t\teditorActionLabel: string | undefined,\n\t): string {\n\t\tif (menuCommand) {\n\t\t\tconst category: string | undefined = menuCommand.category\n\t\t\t\t? typeof menuCommand.category === \"string\"\n\t\t\t\t\t? menuCommand.category\n\t\t\t\t\t: menuCommand.category.value\n\t\t\t\t: undefined;\n\t\t\tconst title =\n\t\t\t\ttypeof menuCommand.title === \"string\"\n\t\t\t\t\t? menuCommand.title\n\t\t\t\t\t: menuCommand.title.value;\n\t\t\treturn category\n\t\t\t\t? localize(\"cat.title\", \"{0}: {1}\", category, title)\n\t\t\t\t: title;\n\t\t}\n\n\t\tif (editorActionLabel) {\n\t\t\treturn editorActionLabel;\n\t\t}\n\n\t\treturn \"\";\n\t}\n}\n\nclass KeybindingItemMatches {\n\treadonly commandIdMatches: IMatch[] | null = null;\n\treadonly commandLabelMatches: IMatch[] | null = null;\n\treadonly commandDefaultLabelMatches: IMatch[] | null = null;\n\treadonly sourceMatches: IMatch[] | null = null;\n\treadonly whenMatches: IMatch[] | null = null;\n\treadonly keybindingMatches: KeybindingMatches | null = null;\n\treadonly extensionIdMatches: IMatch[] | null = null;\n\treadonly extensionLabelMatches: IMatch[] | null = null;\n\n\tconstructor(\n\t\tprivate modifierLabels: ModifierLabels,\n\t\tkeybindingItem: IKeybindingItem,\n\t\tsearchValue: string,\n\t\twords: string[],\n\t\tkeybindingWords: string[],\n\t\tcompleteMatch: boolean,\n\t) {\n\t\tif (!completeMatch) {\n\t\t\tthis.commandIdMatches = this.matches(\n\t\t\t\tsearchValue,\n\t\t\t\tkeybindingItem.command,\n\t\t\t\tor(matchesWords, matchesCamelCase),\n\t\t\t\twords,\n\t\t\t);\n\t\t\tthis.commandLabelMatches = keybindingItem.commandLabel\n\t\t\t\t? this.matches(\n\t\t\t\t\t\tsearchValue,\n\t\t\t\t\t\tkeybindingItem.commandLabel,\n\t\t\t\t\t\t(word, wordToMatchAgainst) =>\n\t\t\t\t\t\t\tmatchesWords(\n\t\t\t\t\t\t\t\tword,\n\t\t\t\t\t\t\t\tkeybindingItem.commandLabel,\n\t\t\t\t\t\t\t\ttrue,\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\twords,\n\t\t\t\t\t)\n\t\t\t\t: null;\n\t\t\tthis.commandDefaultLabelMatches = keybindingItem.commandDefaultLabel\n\t\t\t\t? this.matches(\n\t\t\t\t\t\tsearchValue,\n\t\t\t\t\t\tkeybindingItem.commandDefaultLabel,\n\t\t\t\t\t\t(word, wordToMatchAgainst) =>\n\t\t\t\t\t\t\tmatchesWords(\n\t\t\t\t\t\t\t\tword,\n\t\t\t\t\t\t\t\tkeybindingItem.commandDefaultLabel,\n\t\t\t\t\t\t\t\ttrue,\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\twords,\n\t\t\t\t\t)\n\t\t\t\t: null;\n\t\t\tthis.whenMatches = keybindingItem.when\n\t\t\t\t? this.matches(\n\t\t\t\t\t\tnull,\n\t\t\t\t\t\tkeybindingItem.when,\n\t\t\t\t\t\tor(matchesWords, matchesCamelCase),\n\t\t\t\t\t\twords,\n\t\t\t\t\t)\n\t\t\t\t: null;\n\t\t\tif (isString(keybindingItem.source)) {\n\t\t\t\tthis.sourceMatches = this.matches(\n\t\t\t\t\tsearchValue,\n\t\t\t\t\tkeybindingItem.source,\n\t\t\t\t\t(word, wordToMatchAgainst) =>\n\t\t\t\t\t\tmatchesWords(\n\t\t\t\t\t\t\tword,\n\t\t\t\t\t\t\tkeybindingItem.source as string,\n\t\t\t\t\t\t\ttrue,\n\t\t\t\t\t\t),\n\t\t\t\t\twords,\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\tthis.extensionLabelMatches = keybindingItem.source.displayName\n\t\t\t\t\t? this.matches(\n\t\t\t\t\t\t\tsearchValue,\n\t\t\t\t\t\t\tkeybindingItem.source.displayName,\n\t\t\t\t\t\t\t(word, wordToMatchAgainst) =>\n\t\t\t\t\t\t\t\tmatchesWords(\n\t\t\t\t\t\t\t\t\tword,\n\t\t\t\t\t\t\t\t\tkeybindingItem.commandLabel,\n\t\t\t\t\t\t\t\t\ttrue,\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\twords,\n\t\t\t\t\t\t)\n\t\t\t\t\t: null;\n\t\t\t}\n\t\t}\n\t\tthis.keybindingMatches = keybindingItem.keybinding\n\t\t\t? this.matchesKeybinding(\n\t\t\t\t\tkeybindingItem.keybinding,\n\t\t\t\t\tsearchValue,\n\t\t\t\t\tkeybindingWords,\n\t\t\t\t\tcompleteMatch,\n\t\t\t\t)\n\t\t\t: null;\n\t}\n\n\tprivate matches(\n\t\tsearchValue: string | null,\n\t\twordToMatchAgainst: string,\n\t\twordMatchesFilter: IFilter,\n\t\twords: string[],\n\t): IMatch[] | null {\n\t\tlet matches = searchValue\n\t\t\t? wordFilter(searchValue, wordToMatchAgainst)\n\t\t\t: null;\n\t\tif (!matches) {\n\t\t\tmatches = this.matchesWords(\n\t\t\t\twords,\n\t\t\t\twordToMatchAgainst,\n\t\t\t\twordMatchesFilter,\n\t\t\t);\n\t\t}\n\t\tif (matches) {\n\t\t\tmatches = this.filterAndSort(matches);\n\t\t}\n\t\treturn matches;\n\t}\n\n\tprivate matchesWords(\n\t\twords: string[],\n\t\twordToMatchAgainst: string,\n\t\twordMatchesFilter: IFilter,\n\t): IMatch[] | null {\n\t\tlet matches: IMatch[] | null = [];\n\t\tfor (const word of words) {\n\t\t\tconst wordMatches = wordMatchesFilter(word, wordToMatchAgainst);\n\t\t\tif (wordMatches) {\n\t\t\t\tmatches = [...(matches || []), ...wordMatches];\n\t\t\t} else {\n\t\t\t\tmatches = null;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\treturn matches;\n\t}\n\n\tprivate filterAndSort(matches: IMatch[]): IMatch[] {\n\t\treturn distinct(matches, (a) => a.start + \".\" + a.end)\n\t\t\t.filter(\n\t\t\t\t(match) =>\n\t\t\t\t\t!matches.some(\n\t\t\t\t\t\t(m) =>\n\t\t\t\t\t\t\t!(m.start === match.start && m.end === match.end) &&\n\t\t\t\t\t\t\tm.start <= match.start &&\n\t\t\t\t\t\t\tm.end >= match.end,\n\t\t\t\t\t),\n\t\t\t)\n\t\t\t.sort((a, b) => a.start - b.start);\n\t}\n\n\tprivate matchesKeybinding(\n\t\tkeybinding: ResolvedKeybinding,\n\t\tsearchValue: string,\n\t\twords: string[],\n\t\tcompleteMatch: boolean,\n\t): KeybindingMatches | null {\n\t\tconst [firstPart, chordPart] = keybinding.getChords();\n\n\t\tconst userSettingsLabel = keybinding.getUserSettingsLabel();\n\t\tconst ariaLabel = keybinding.getAriaLabel();\n\t\tconst label = keybinding.getLabel();\n\t\tif (\n\t\t\t(userSettingsLabel &&\n\t\t\t\tstrings.compareIgnoreCase(searchValue, userSettingsLabel) ===\n\t\t\t\t\t0) ||\n\t\t\t(ariaLabel &&\n\t\t\t\tstrings.compareIgnoreCase(searchValue, ariaLabel) === 0) ||\n\t\t\t(label && strings.compareIgnoreCase(searchValue, label) === 0)\n\t\t) {\n\t\t\treturn {\n\t\t\t\tfirstPart: this.createCompleteMatch(firstPart),\n\t\t\t\tchordPart: this.createCompleteMatch(chordPart),\n\t\t\t};\n\t\t}\n\n\t\tconst firstPartMatch: KeybindingMatch = {};\n\t\tlet chordPartMatch: KeybindingMatch = {};\n\n\t\tconst matchedWords: number[] = [];\n\t\tconst firstPartMatchedWords: number[] = [];\n\t\tlet chordPartMatchedWords: number[] = [];\n\t\tlet matchFirstPart = true;\n\t\tfor (let index = 0; index < words.length; index++) {\n\t\t\tconst word = words[index];\n\t\t\tlet firstPartMatched = false;\n\t\t\tlet chordPartMatched = false;\n\n\t\t\tmatchFirstPart = matchFirstPart && !firstPartMatch.keyCode;\n\t\t\tlet matchChordPart = !chordPartMatch.keyCode;\n\n\t\t\tif (matchFirstPart) {\n\t\t\t\tfirstPartMatched = this.matchPart(\n\t\t\t\t\tfirstPart,\n\t\t\t\t\tfirstPartMatch,\n\t\t\t\t\tword,\n\t\t\t\t\tcompleteMatch,\n\t\t\t\t);\n\t\t\t\tif (firstPartMatch.keyCode) {\n\t\t\t\t\tfor (const cordPartMatchedWordIndex of chordPartMatchedWords) {\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\tfirstPartMatchedWords.indexOf(\n\t\t\t\t\t\t\t\tcordPartMatchedWordIndex,\n\t\t\t\t\t\t\t) === -1\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\tmatchedWords.splice(\n\t\t\t\t\t\t\t\tmatchedWords.indexOf(cordPartMatchedWordIndex),\n\t\t\t\t\t\t\t\t1,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tchordPartMatch = {};\n\t\t\t\t\tchordPartMatchedWords = [];\n\t\t\t\t\tmatchChordPart = false;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (matchChordPart) {\n\t\t\t\tchordPartMatched = this.matchPart(\n\t\t\t\t\tchordPart,\n\t\t\t\t\tchordPartMatch,\n\t\t\t\t\tword,\n\t\t\t\t\tcompleteMatch,\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tif (firstPartMatched) {\n\t\t\t\tfirstPartMatchedWords.push(index);\n\t\t\t}\n\t\t\tif (chordPartMatched) {\n\t\t\t\tchordPartMatchedWords.push(index);\n\t\t\t}\n\t\t\tif (firstPartMatched || chordPartMatched) {\n\t\t\t\tmatchedWords.push(index);\n\t\t\t}\n\n\t\t\tmatchFirstPart = matchFirstPart && this.isModifier(word);\n\t\t}\n\t\tif (matchedWords.length !== words.length) {\n\t\t\treturn null;\n\t\t}\n\t\tif (completeMatch) {\n\t\t\tif (!this.isCompleteMatch(firstPart, firstPartMatch)) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\tif (\n\t\t\t\t!isEmptyObject(chordPartMatch) &&\n\t\t\t\t!this.isCompleteMatch(chordPart, chordPartMatch)\n\t\t\t) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t}\n\t\treturn this.hasAnyMatch(firstPartMatch) ||\n\t\t\tthis.hasAnyMatch(chordPartMatch)\n\t\t\t? { firstPart: firstPartMatch, chordPart: chordPartMatch }\n\t\t\t: null;\n\t}\n\n\tprivate matchPart(\n\t\tchord: ResolvedChord | null,\n\t\tmatch: KeybindingMatch,\n\t\tword: string,\n\t\tcompleteMatch: boolean,\n\t): boolean {\n\t\tlet matched = false;\n\t\tif (this.matchesMetaModifier(chord, word)) {\n\t\t\tmatched = true;\n\t\t\tmatch.metaKey = true;\n\t\t}\n\t\tif (this.matchesCtrlModifier(chord, word)) {\n\t\t\tmatched = true;\n\t\t\tmatch.ctrlKey = true;\n\t\t}\n\t\tif (this.matchesShiftModifier(chord, word)) {\n\t\t\tmatched = true;\n\t\t\tmatch.shiftKey = true;\n\t\t}\n\t\tif (this.matchesAltModifier(chord, word)) {\n\t\t\tmatched = true;\n\t\t\tmatch.altKey = true;\n\t\t}\n\t\tif (this.matchesKeyCode(chord, word, completeMatch)) {\n\t\t\tmatch.keyCode = true;\n\t\t\tmatched = true;\n\t\t}\n\t\treturn matched;\n\t}\n\n\tprivate matchesKeyCode(\n\t\tchord: ResolvedChord | null,\n\t\tword: string,\n\t\tcompleteMatch: boolean,\n\t): boolean {\n\t\tif (!chord) {\n\t\t\treturn false;\n\t\t}\n\t\tconst ariaLabel: string = chord.keyAriaLabel || \"\";\n\t\tif (completeMatch || ariaLabel.length === 1 || word.length === 1) {\n\t\t\tif (strings.compareIgnoreCase(ariaLabel, word) === 0) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t} else if (matchesContiguousSubString(word, ariaLabel)) {\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\n\tprivate matchesMetaModifier(\n\t\tchord: ResolvedChord | null,\n\t\tword: string,\n\t): boolean {\n\t\tif (!chord) {\n\t\t\treturn false;\n\t\t}\n\t\tif (!chord.metaKey) {\n\t\t\treturn false;\n\t\t}\n\t\treturn this.wordMatchesMetaModifier(word);\n\t}\n\n\tprivate matchesCtrlModifier(\n\t\tchord: ResolvedChord | null,\n\t\tword: string,\n\t): boolean {\n\t\tif (!chord) {\n\t\t\treturn false;\n\t\t}\n\t\tif (!chord.ctrlKey) {\n\t\t\treturn false;\n\t\t}\n\t\treturn this.wordMatchesCtrlModifier(word);\n\t}\n\n\tprivate matchesShiftModifier(\n\t\tchord: ResolvedChord | null,\n\t\tword: string,\n\t): boolean {\n\t\tif (!chord) {\n\t\t\treturn false;\n\t\t}\n\t\tif (!chord.shiftKey) {\n\t\t\treturn false;\n\t\t}\n\t\treturn this.wordMatchesShiftModifier(word);\n\t}\n\n\tprivate matchesAltModifier(\n\t\tchord: ResolvedChord | null,\n\t\tword: string,\n\t): boolean {\n\t\tif (!chord) {\n\t\t\treturn false;\n\t\t}\n\t\tif (!chord.altKey) {\n\t\t\treturn false;\n\t\t}\n\t\treturn this.wordMatchesAltModifier(word);\n\t}\n\n\tprivate hasAnyMatch(keybindingMatch: KeybindingMatch): boolean {\n\t\treturn (\n\t\t\t!!keybindingMatch.altKey ||\n\t\t\t!!keybindingMatch.ctrlKey ||\n\t\t\t!!keybindingMatch.metaKey ||\n\t\t\t!!keybindingMatch.shiftKey ||\n\t\t\t!!keybindingMatch.keyCode\n\t\t);\n\t}\n\n\tprivate isCompleteMatch(\n\t\tchord: ResolvedChord | null,\n\t\tmatch: KeybindingMatch,\n\t): boolean {\n\t\tif (!chord) {\n\t\t\treturn true;\n\t\t}\n\t\tif (!match.keyCode) {\n\t\t\treturn false;\n\t\t}\n\t\tif (chord.metaKey && !match.metaKey) {\n\t\t\treturn false;\n\t\t}\n\t\tif (chord.altKey && !match.altKey) {\n\t\t\treturn false;\n\t\t}\n\t\tif (chord.ctrlKey && !match.ctrlKey) {\n\t\t\treturn false;\n\t\t}\n\t\tif (chord.shiftKey && !match.shiftKey) {\n\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t}\n\n\tprivate createCompleteMatch(chord: ResolvedChord | null): KeybindingMatch {\n\t\tconst match: KeybindingMatch = {};\n\t\tif (chord) {\n\t\t\tmatch.keyCode = true;\n\t\t\tif (chord.metaKey) {\n\t\t\t\tmatch.metaKey = true;\n\t\t\t}\n\t\t\tif (chord.altKey) {\n\t\t\t\tmatch.altKey = true;\n\t\t\t}\n\t\t\tif (chord.ctrlKey) {\n\t\t\t\tmatch.ctrlKey = true;\n\t\t\t}\n\t\t\tif (chord.shiftKey) {\n\t\t\t\tmatch.shiftKey = true;\n\t\t\t}\n\t\t}\n\t\treturn match;\n\t}\n\n\tprivate isModifier(word: string): boolean {\n\t\tif (this.wordMatchesAltModifier(word)) {\n\t\t\treturn true;\n\t\t}\n\t\tif (this.wordMatchesCtrlModifier(word)) {\n\t\t\treturn true;\n\t\t}\n\t\tif (this.wordMatchesMetaModifier(word)) {\n\t\t\treturn true;\n\t\t}\n\t\tif (this.wordMatchesShiftModifier(word)) {\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\n\tprivate wordMatchesAltModifier(word: string): boolean {\n\t\tif (strings.equalsIgnoreCase(this.modifierLabels.ui.altKey, word)) {\n\t\t\treturn true;\n\t\t}\n\t\tif (strings.equalsIgnoreCase(this.modifierLabels.aria.altKey, word)) {\n\t\t\treturn true;\n\t\t}\n\t\tif (strings.equalsIgnoreCase(this.modifierLabels.user.altKey, word)) {\n\t\t\treturn true;\n\t\t}\n\t\tif (strings.equalsIgnoreCase(localize(\"option\", \"option\"), word)) {\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\n\tprivate wordMatchesCtrlModifier(word: string): boolean {\n\t\tif (strings.equalsIgnoreCase(this.modifierLabels.ui.ctrlKey, word)) {\n\t\t\treturn true;\n\t\t}\n\t\tif (strings.equalsIgnoreCase(this.modifierLabels.aria.ctrlKey, word)) {\n\t\t\treturn true;\n\t\t}\n\t\tif (strings.equalsIgnoreCase(this.modifierLabels.user.ctrlKey, word)) {\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\n\tprivate wordMatchesMetaModifier(word: string): boolean {\n\t\tif (strings.equalsIgnoreCase(this.modifierLabels.ui.metaKey, word)) {\n\t\t\treturn true;\n\t\t}\n\t\tif (strings.equalsIgnoreCase(this.modifierLabels.aria.metaKey, word)) {\n\t\t\treturn true;\n\t\t}\n\t\tif (strings.equalsIgnoreCase(this.modifierLabels.user.metaKey, word)) {\n\t\t\treturn true;\n\t\t}\n\t\tif (strings.equalsIgnoreCase(localize(\"meta\", \"meta\"), word)) {\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\n\tprivate wordMatchesShiftModifier(word: string): boolean {\n\t\tif (strings.equalsIgnoreCase(this.modifierLabels.ui.shiftKey, word)) {\n\t\t\treturn true;\n\t\t}\n\t\tif (strings.equalsIgnoreCase(this.modifierLabels.aria.shiftKey, word)) {\n\t\t\treturn true;\n\t\t}\n\t\tif (strings.equalsIgnoreCase(this.modifierLabels.user.shiftKey, word)) {\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
