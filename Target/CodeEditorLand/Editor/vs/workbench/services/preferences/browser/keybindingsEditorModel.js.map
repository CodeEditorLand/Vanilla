{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/preferences/browser/keybindingsEditorModel.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { localize } from '../../../../nls.js';\nimport { distinct, coalesce } from '../../../../base/common/arrays.js';\nimport * as strings from '../../../../base/common/strings.js';\nimport { OperatingSystem, Language } from '../../../../base/common/platform.js';\nimport { IMatch, IFilter, or, matchesContiguousSubString, matchesPrefix, matchesCamelCase, matchesWords } from '../../../../base/common/filters.js';\nimport { ResolvedKeybinding, ResolvedChord } from '../../../../base/common/keybindings.js';\nimport { AriaLabelProvider, UserSettingsLabelProvider, UILabelProvider, ModifierLabels as ModLabels } from '../../../../base/common/keybindingLabels.js';\nimport { MenuRegistry } from '../../../../platform/actions/common/actions.js';\nimport { EditorModel } from '../../../common/editor/editorModel.js';\nimport { IKeybindingService } from '../../../../platform/keybinding/common/keybinding.js';\nimport { ResolvedKeybindingItem } from '../../../../platform/keybinding/common/resolvedKeybindingItem.js';\nimport { getAllUnboundCommands } from '../../keybinding/browser/unboundCommands.js';\nimport { IKeybindingItemEntry, KeybindingMatches, KeybindingMatch, IKeybindingItem } from '../common/preferences.js';\nimport { ICommandAction, ILocalizedString } from '../../../../platform/action/common/action.js';\nimport { isEmptyObject, isString } from '../../../../base/common/types.js';\nimport { IExtensionService } from '../../extensions/common/extensions.js';\nimport { ExtensionIdentifier, ExtensionIdentifierMap, IExtensionDescription } from '../../../../platform/extensions/common/extensions.js';\nimport { ContextKeyExpr } from '../../../../platform/contextkey/common/contextkey.js';\n\nexport const KEYBINDING_ENTRY_TEMPLATE_ID = 'keybinding.entry.template';\n\nconst SOURCE_SYSTEM = localize('default', \"System\");\nconst SOURCE_EXTENSION = localize('extension', \"Extension\");\nconst SOURCE_USER = localize('user', \"User\");\n\ninterface ModifierLabels {\n\tui: ModLabels;\n\taria: ModLabels;\n\tuser: ModLabels;\n}\n\nexport function createKeybindingCommandQuery(commandId: string, when?: string): string {\n\tconst whenPart = when ? ` +when:${when}` : '';\n\treturn `@command:${commandId}${whenPart}`;\n}\n\nconst wordFilter = or(matchesPrefix, matchesWords, matchesContiguousSubString);\nconst COMMAND_REGEX = /@command:\\s*([^\\+]+)/i;\nconst WHEN_REGEX = /\\+when:\\s*(.+)/i;\nconst SOURCE_REGEX = /@source:\\s*(user|default|system|extension)/i;\nconst EXTENSION_REGEX = /@ext:\\s*((\".+\")|([^\\s]+))/i;\nconst KEYBINDING_REGEX = /@keybinding:\\s*((\\\".+\\\")|(\\S+))/i;\n\nexport class KeybindingsEditorModel extends EditorModel {\n\n\tprivate _keybindingItems: IKeybindingItem[];\n\tprivate _keybindingItemsSortedByPrecedence: IKeybindingItem[];\n\tprivate modifierLabels: ModifierLabels;\n\n\tconstructor(\n\t\tos: OperatingSystem,\n\t\t@IKeybindingService private readonly keybindingsService: IKeybindingService,\n\t\t@IExtensionService private readonly extensionService: IExtensionService,\n\t) {\n\t\tsuper();\n\t\tthis._keybindingItems = [];\n\t\tthis._keybindingItemsSortedByPrecedence = [];\n\t\tthis.modifierLabels = {\n\t\t\tui: UILabelProvider.modifierLabels[os],\n\t\t\taria: AriaLabelProvider.modifierLabels[os],\n\t\t\tuser: UserSettingsLabelProvider.modifierLabels[os]\n\t\t};\n\t}\n\n\tfetch(searchValue: string, sortByPrecedence: boolean = false): IKeybindingItemEntry[] {\n\t\tlet keybindingItems = sortByPrecedence ? this._keybindingItemsSortedByPrecedence : this._keybindingItems;\n\n\t\t// @command:COMMAND_ID\n\t\tconst commandIdMatches = COMMAND_REGEX.exec(searchValue);\n\t\tif (commandIdMatches && commandIdMatches[1]) {\n\t\t\tconst command = commandIdMatches[1].trim();\n\t\t\tlet filteredKeybindingItems = keybindingItems.filter(k => k.command === command);\n\n\t\t\t// +when:WHEN_EXPRESSION\n\t\t\tif (filteredKeybindingItems.length) {\n\t\t\t\tconst whenMatches = WHEN_REGEX.exec(searchValue);\n\t\t\t\tif (whenMatches && whenMatches[1]) {\n\t\t\t\t\tconst whenValue = whenMatches[1].trim();\n\t\t\t\t\tfilteredKeybindingItems = this.filterByWhen(filteredKeybindingItems, command, whenValue);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn filteredKeybindingItems.map(keybindingItem => (<IKeybindingItemEntry>{ id: KeybindingsEditorModel.getId(keybindingItem), keybindingItem, templateId: KEYBINDING_ENTRY_TEMPLATE_ID }));\n\t\t}\n\n\t\t// @source:SOURCE\n\t\tif (SOURCE_REGEX.test(searchValue)) {\n\t\t\tkeybindingItems = this.filterBySource(keybindingItems, searchValue);\n\t\t\tsearchValue = searchValue.replace(SOURCE_REGEX, '');\n\t\t} else {\n\t\t\t// @ext:EXTENSION_ID\n\t\t\tconst extensionMatches = EXTENSION_REGEX.exec(searchValue);\n\t\t\tif (extensionMatches && (extensionMatches[2] || extensionMatches[3])) {\n\t\t\t\tconst extensionId = extensionMatches[2] ? extensionMatches[2].substring(1, extensionMatches[2].length - 1) : extensionMatches[3];\n\t\t\t\tkeybindingItems = this.filterByExtension(keybindingItems, extensionId);\n\t\t\t\tsearchValue = searchValue.replace(EXTENSION_REGEX, '');\n\t\t\t} else {\n\t\t\t\t// @keybinding:KEYBINDING\n\t\t\t\tconst keybindingMatches = KEYBINDING_REGEX.exec(searchValue);\n\t\t\t\tif (keybindingMatches && (keybindingMatches[2] || keybindingMatches[3])) {\n\t\t\t\t\tsearchValue = keybindingMatches[2] || `\"${keybindingMatches[3]}\"`;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tsearchValue = searchValue.trim();\n\t\tif (!searchValue) {\n\t\t\treturn keybindingItems.map(keybindingItem => (<IKeybindingItemEntry>{ id: KeybindingsEditorModel.getId(keybindingItem), keybindingItem, templateId: KEYBINDING_ENTRY_TEMPLATE_ID }));\n\t\t}\n\n\t\treturn this.filterByText(keybindingItems, searchValue);\n\t}\n\n\tprivate filterBySource(keybindingItems: IKeybindingItem[], searchValue: string): IKeybindingItem[] {\n\t\tif (/@source:\\s*default/i.test(searchValue) || /@source:\\s*system/i.test(searchValue)) {\n\t\t\treturn keybindingItems.filter(k => k.source === SOURCE_SYSTEM);\n\t\t}\n\t\tif (/@source:\\s*user/i.test(searchValue)) {\n\t\t\treturn keybindingItems.filter(k => k.source === SOURCE_USER);\n\t\t}\n\t\tif (/@source:\\s*extension/i.test(searchValue)) {\n\t\t\treturn keybindingItems.filter(k => !isString(k.source) || k.source === SOURCE_EXTENSION);\n\t\t}\n\t\treturn keybindingItems;\n\t}\n\n\tprivate filterByExtension(keybindingItems: IKeybindingItem[], extension: string): IKeybindingItem[] {\n\t\textension = extension.toLowerCase().trim();\n\t\treturn keybindingItems.filter(k => !isString(k.source) && (ExtensionIdentifier.equals(k.source.identifier, extension) || k.source.displayName?.toLowerCase() === extension.toLowerCase()));\n\t}\n\n\tprivate filterByText(keybindingItems: IKeybindingItem[], searchValue: string): IKeybindingItemEntry[] {\n\t\tconst quoteAtFirstChar = searchValue.charAt(0) === '\"';\n\t\tconst quoteAtLastChar = searchValue.charAt(searchValue.length - 1) === '\"';\n\t\tconst completeMatch = quoteAtFirstChar && quoteAtLastChar;\n\t\tif (quoteAtFirstChar) {\n\t\t\tsearchValue = searchValue.substring(1);\n\t\t}\n\t\tif (quoteAtLastChar) {\n\t\t\tsearchValue = searchValue.substring(0, searchValue.length - 1);\n\t\t}\n\t\tsearchValue = searchValue.trim();\n\n\t\tconst result: IKeybindingItemEntry[] = [];\n\t\tconst words = searchValue.split(' ');\n\t\tconst keybindingWords = this.splitKeybindingWords(words);\n\t\tfor (const keybindingItem of keybindingItems) {\n\t\t\tconst keybindingMatches = new KeybindingItemMatches(this.modifierLabels, keybindingItem, searchValue, words, keybindingWords, completeMatch);\n\t\t\tif (keybindingMatches.commandIdMatches\n\t\t\t\t|| keybindingMatches.commandLabelMatches\n\t\t\t\t|| keybindingMatches.commandDefaultLabelMatches\n\t\t\t\t|| keybindingMatches.sourceMatches\n\t\t\t\t|| keybindingMatches.whenMatches\n\t\t\t\t|| keybindingMatches.keybindingMatches\n\t\t\t\t|| keybindingMatches.extensionIdMatches\n\t\t\t\t|| keybindingMatches.extensionLabelMatches\n\t\t\t) {\n\t\t\t\tresult.push({\n\t\t\t\t\tid: KeybindingsEditorModel.getId(keybindingItem),\n\t\t\t\t\ttemplateId: KEYBINDING_ENTRY_TEMPLATE_ID,\n\t\t\t\t\tcommandLabelMatches: keybindingMatches.commandLabelMatches || undefined,\n\t\t\t\t\tcommandDefaultLabelMatches: keybindingMatches.commandDefaultLabelMatches || undefined,\n\t\t\t\t\tkeybindingItem,\n\t\t\t\t\tkeybindingMatches: keybindingMatches.keybindingMatches || undefined,\n\t\t\t\t\tcommandIdMatches: keybindingMatches.commandIdMatches || undefined,\n\t\t\t\t\tsourceMatches: keybindingMatches.sourceMatches || undefined,\n\t\t\t\t\twhenMatches: keybindingMatches.whenMatches || undefined,\n\t\t\t\t\textensionIdMatches: keybindingMatches.extensionIdMatches || undefined,\n\t\t\t\t\textensionLabelMatches: keybindingMatches.extensionLabelMatches || undefined\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n\n\tprivate filterByWhen(keybindingItems: IKeybindingItem[], command: string, when: string): IKeybindingItem[] {\n\t\tif (keybindingItems.length === 0) {\n\t\t\treturn [];\n\t\t}\n\n\t\t// Check if a keybinding with the same command id and when clause exists\n\t\tconst keybindingItemsWithWhen = keybindingItems.filter(k => k.when === when);\n\t\tif (keybindingItemsWithWhen.length) {\n\t\t\treturn keybindingItemsWithWhen;\n\t\t}\n\n\t\t// Create a new entry with the when clause which does not live in the model\n\t\t// We can reuse some of the properties from the same command with different when clause\n\t\tconst commandLabel = keybindingItems[0].commandLabel;\n\n\t\tconst keybindingItem = new ResolvedKeybindingItem(undefined, command, null, ContextKeyExpr.deserialize(when), false, null, false);\n\t\tconst actionLabels = new Map([[command, commandLabel]]);\n\t\treturn [KeybindingsEditorModel.toKeybindingEntry(command, keybindingItem, actionLabels, this.getExtensionsMapping())];\n\t}\n\n\tprivate splitKeybindingWords(wordsSeparatedBySpaces: string[]): string[] {\n\t\tconst result: string[] = [];\n\t\tfor (const word of wordsSeparatedBySpaces) {\n\t\t\tresult.push(...coalesce(word.split('+')));\n\t\t}\n\t\treturn result;\n\t}\n\n\toverride async resolve(actionLabels = new Map<string, string>()): Promise<void> {\n\t\tconst extensions = this.getExtensionsMapping();\n\n\t\tthis._keybindingItemsSortedByPrecedence = [];\n\t\tconst boundCommands: Map<string, boolean> = new Map<string, boolean>();\n\t\tfor (const keybinding of this.keybindingsService.getKeybindings()) {\n\t\t\tif (keybinding.command) { // Skip keybindings without commands\n\t\t\t\tthis._keybindingItemsSortedByPrecedence.push(KeybindingsEditorModel.toKeybindingEntry(keybinding.command, keybinding, actionLabels, extensions));\n\t\t\t\tboundCommands.set(keybinding.command, true);\n\t\t\t}\n\t\t}\n\n\t\tconst commandsWithDefaultKeybindings = this.keybindingsService.getDefaultKeybindings().map(keybinding => keybinding.command);\n\t\tfor (const command of getAllUnboundCommands(boundCommands)) {\n\t\t\tconst keybindingItem = new ResolvedKeybindingItem(undefined, command, null, undefined, commandsWithDefaultKeybindings.indexOf(command) === -1, null, false);\n\t\t\tthis._keybindingItemsSortedByPrecedence.push(KeybindingsEditorModel.toKeybindingEntry(command, keybindingItem, actionLabels, extensions));\n\t\t}\n\t\tthis._keybindingItemsSortedByPrecedence = distinct(this._keybindingItemsSortedByPrecedence, keybindingItem => KeybindingsEditorModel.getId(keybindingItem));\n\t\tthis._keybindingItems = this._keybindingItemsSortedByPrecedence.slice(0).sort((a, b) => KeybindingsEditorModel.compareKeybindingData(a, b));\n\n\t\treturn super.resolve();\n\t}\n\n\tprivate static getId(keybindingItem: IKeybindingItem): string {\n\t\treturn keybindingItem.command + (keybindingItem?.keybinding?.getAriaLabel() ?? '') + keybindingItem.when + (isString(keybindingItem.source) ? keybindingItem.source : keybindingItem.source.identifier.value);\n\t}\n\n\tprivate getExtensionsMapping(): ExtensionIdentifierMap<IExtensionDescription> {\n\t\tconst extensions = new ExtensionIdentifierMap<IExtensionDescription>();\n\t\tfor (const extension of this.extensionService.extensions) {\n\t\t\textensions.set(extension.identifier, extension);\n\t\t}\n\t\treturn extensions;\n\t}\n\n\tprivate static compareKeybindingData(a: IKeybindingItem, b: IKeybindingItem): number {\n\t\tif (a.keybinding && !b.keybinding) {\n\t\t\treturn -1;\n\t\t}\n\t\tif (b.keybinding && !a.keybinding) {\n\t\t\treturn 1;\n\t\t}\n\t\tif (a.commandLabel && !b.commandLabel) {\n\t\t\treturn -1;\n\t\t}\n\t\tif (b.commandLabel && !a.commandLabel) {\n\t\t\treturn 1;\n\t\t}\n\t\tif (a.commandLabel && b.commandLabel) {\n\t\t\tif (a.commandLabel !== b.commandLabel) {\n\t\t\t\treturn a.commandLabel.localeCompare(b.commandLabel);\n\t\t\t}\n\t\t}\n\t\tif (a.command === b.command) {\n\t\t\treturn a.keybindingItem.isDefault ? 1 : -1;\n\t\t}\n\t\treturn a.command.localeCompare(b.command);\n\t}\n\n\tprivate static toKeybindingEntry(command: string, keybindingItem: ResolvedKeybindingItem, actions: Map<string, string>, extensions: ExtensionIdentifierMap<IExtensionDescription>): IKeybindingItem {\n\t\tconst menuCommand = MenuRegistry.getCommand(command);\n\t\tconst editorActionLabel = actions.get(command);\n\t\tlet source: string | IExtensionDescription = SOURCE_USER;\n\t\tif (keybindingItem.isDefault) {\n\t\t\tconst extensionId = keybindingItem.extensionId ?? (keybindingItem.resolvedKeybinding ? undefined : menuCommand?.source?.id);\n\t\t\tsource = extensionId ? extensions.get(extensionId) ?? SOURCE_EXTENSION : SOURCE_SYSTEM;\n\t\t}\n\t\treturn <IKeybindingItem>{\n\t\t\tkeybinding: keybindingItem.resolvedKeybinding,\n\t\t\tkeybindingItem,\n\t\t\tcommand,\n\t\t\tcommandLabel: KeybindingsEditorModel.getCommandLabel(menuCommand, editorActionLabel),\n\t\t\tcommandDefaultLabel: KeybindingsEditorModel.getCommandDefaultLabel(menuCommand),\n\t\t\twhen: keybindingItem.when ? keybindingItem.when.serialize() : '',\n\t\t\tsource\n\n\t\t};\n\t}\n\n\tprivate static getCommandDefaultLabel(menuCommand: ICommandAction | undefined): string | null {\n\t\tif (!Language.isDefaultVariant()) {\n\t\t\tif (menuCommand && menuCommand.title && (<ILocalizedString>menuCommand.title).original) {\n\t\t\t\tconst category: string | undefined = menuCommand.category ? (<ILocalizedString>menuCommand.category).original : undefined;\n\t\t\t\tconst title = (<ILocalizedString>menuCommand.title).original;\n\t\t\t\treturn category ? localize('cat.title', \"{0}: {1}\", category, title) : title;\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n\n\tprivate static getCommandLabel(menuCommand: ICommandAction | undefined, editorActionLabel: string | undefined): string {\n\t\tif (menuCommand) {\n\t\t\tconst category: string | undefined = menuCommand.category ? typeof menuCommand.category === 'string' ? menuCommand.category : menuCommand.category.value : undefined;\n\t\t\tconst title = typeof menuCommand.title === 'string' ? menuCommand.title : menuCommand.title.value;\n\t\t\treturn category ? localize('cat.title', \"{0}: {1}\", category, title) : title;\n\t\t}\n\n\t\tif (editorActionLabel) {\n\t\t\treturn editorActionLabel;\n\t\t}\n\n\t\treturn '';\n\t}\n}\n\nclass KeybindingItemMatches {\n\n\treadonly commandIdMatches: IMatch[] | null = null;\n\treadonly commandLabelMatches: IMatch[] | null = null;\n\treadonly commandDefaultLabelMatches: IMatch[] | null = null;\n\treadonly sourceMatches: IMatch[] | null = null;\n\treadonly whenMatches: IMatch[] | null = null;\n\treadonly keybindingMatches: KeybindingMatches | null = null;\n\treadonly extensionIdMatches: IMatch[] | null = null;\n\treadonly extensionLabelMatches: IMatch[] | null = null;\n\n\tconstructor(private modifierLabels: ModifierLabels, keybindingItem: IKeybindingItem, searchValue: string, words: string[], keybindingWords: string[], completeMatch: boolean) {\n\t\tif (!completeMatch) {\n\t\t\tthis.commandIdMatches = this.matches(searchValue, keybindingItem.command, or(matchesWords, matchesCamelCase), words);\n\t\t\tthis.commandLabelMatches = keybindingItem.commandLabel ? this.matches(searchValue, keybindingItem.commandLabel, (word, wordToMatchAgainst) => matchesWords(word, keybindingItem.commandLabel, true), words) : null;\n\t\t\tthis.commandDefaultLabelMatches = keybindingItem.commandDefaultLabel ? this.matches(searchValue, keybindingItem.commandDefaultLabel, (word, wordToMatchAgainst) => matchesWords(word, keybindingItem.commandDefaultLabel, true), words) : null;\n\t\t\tthis.whenMatches = keybindingItem.when ? this.matches(null, keybindingItem.when, or(matchesWords, matchesCamelCase), words) : null;\n\t\t\tif (isString(keybindingItem.source)) {\n\t\t\t\tthis.sourceMatches = this.matches(searchValue, keybindingItem.source, (word, wordToMatchAgainst) => matchesWords(word, keybindingItem.source as string, true), words);\n\t\t\t} else {\n\t\t\t\tthis.extensionLabelMatches = keybindingItem.source.displayName ? this.matches(searchValue, keybindingItem.source.displayName, (word, wordToMatchAgainst) => matchesWords(word, keybindingItem.commandLabel, true), words) : null;\n\t\t\t}\n\t\t}\n\t\tthis.keybindingMatches = keybindingItem.keybinding ? this.matchesKeybinding(keybindingItem.keybinding, searchValue, keybindingWords, completeMatch) : null;\n\t}\n\n\tprivate matches(searchValue: string | null, wordToMatchAgainst: string, wordMatchesFilter: IFilter, words: string[]): IMatch[] | null {\n\t\tlet matches = searchValue ? wordFilter(searchValue, wordToMatchAgainst) : null;\n\t\tif (!matches) {\n\t\t\tmatches = this.matchesWords(words, wordToMatchAgainst, wordMatchesFilter);\n\t\t}\n\t\tif (matches) {\n\t\t\tmatches = this.filterAndSort(matches);\n\t\t}\n\t\treturn matches;\n\t}\n\n\tprivate matchesWords(words: string[], wordToMatchAgainst: string, wordMatchesFilter: IFilter): IMatch[] | null {\n\t\tlet matches: IMatch[] | null = [];\n\t\tfor (const word of words) {\n\t\t\tconst wordMatches = wordMatchesFilter(word, wordToMatchAgainst);\n\t\t\tif (wordMatches) {\n\t\t\t\tmatches = [...(matches || []), ...wordMatches];\n\t\t\t} else {\n\t\t\t\tmatches = null;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\treturn matches;\n\t}\n\n\tprivate filterAndSort(matches: IMatch[]): IMatch[] {\n\t\treturn distinct(matches, (a => a.start + '.' + a.end)).filter(match => !matches.some(m => !(m.start === match.start && m.end === match.end) && (m.start <= match.start && m.end >= match.end))).sort((a, b) => a.start - b.start);\n\t}\n\n\tprivate matchesKeybinding(keybinding: ResolvedKeybinding, searchValue: string, words: string[], completeMatch: boolean): KeybindingMatches | null {\n\t\tconst [firstPart, chordPart] = keybinding.getChords();\n\n\t\tconst userSettingsLabel = keybinding.getUserSettingsLabel();\n\t\tconst ariaLabel = keybinding.getAriaLabel();\n\t\tconst label = keybinding.getLabel();\n\t\tif ((userSettingsLabel && strings.compareIgnoreCase(searchValue, userSettingsLabel) === 0)\n\t\t\t|| (ariaLabel && strings.compareIgnoreCase(searchValue, ariaLabel) === 0)\n\t\t\t|| (label && strings.compareIgnoreCase(searchValue, label) === 0)) {\n\t\t\treturn {\n\t\t\t\tfirstPart: this.createCompleteMatch(firstPart),\n\t\t\t\tchordPart: this.createCompleteMatch(chordPart)\n\t\t\t};\n\t\t}\n\n\t\tconst firstPartMatch: KeybindingMatch = {};\n\t\tlet chordPartMatch: KeybindingMatch = {};\n\n\t\tconst matchedWords: number[] = [];\n\t\tconst firstPartMatchedWords: number[] = [];\n\t\tlet chordPartMatchedWords: number[] = [];\n\t\tlet matchFirstPart = true;\n\t\tfor (let index = 0; index < words.length; index++) {\n\t\t\tconst word = words[index];\n\t\t\tlet firstPartMatched = false;\n\t\t\tlet chordPartMatched = false;\n\n\t\t\tmatchFirstPart = matchFirstPart && !firstPartMatch.keyCode;\n\t\t\tlet matchChordPart = !chordPartMatch.keyCode;\n\n\t\t\tif (matchFirstPart) {\n\t\t\t\tfirstPartMatched = this.matchPart(firstPart, firstPartMatch, word, completeMatch);\n\t\t\t\tif (firstPartMatch.keyCode) {\n\t\t\t\t\tfor (const cordPartMatchedWordIndex of chordPartMatchedWords) {\n\t\t\t\t\t\tif (firstPartMatchedWords.indexOf(cordPartMatchedWordIndex) === -1) {\n\t\t\t\t\t\t\tmatchedWords.splice(matchedWords.indexOf(cordPartMatchedWordIndex), 1);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tchordPartMatch = {};\n\t\t\t\t\tchordPartMatchedWords = [];\n\t\t\t\t\tmatchChordPart = false;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (matchChordPart) {\n\t\t\t\tchordPartMatched = this.matchPart(chordPart, chordPartMatch, word, completeMatch);\n\t\t\t}\n\n\t\t\tif (firstPartMatched) {\n\t\t\t\tfirstPartMatchedWords.push(index);\n\t\t\t}\n\t\t\tif (chordPartMatched) {\n\t\t\t\tchordPartMatchedWords.push(index);\n\t\t\t}\n\t\t\tif (firstPartMatched || chordPartMatched) {\n\t\t\t\tmatchedWords.push(index);\n\t\t\t}\n\n\t\t\tmatchFirstPart = matchFirstPart && this.isModifier(word);\n\t\t}\n\t\tif (matchedWords.length !== words.length) {\n\t\t\treturn null;\n\t\t}\n\t\tif (completeMatch) {\n\t\t\tif (!this.isCompleteMatch(firstPart, firstPartMatch)) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\tif (!isEmptyObject(chordPartMatch) && !this.isCompleteMatch(chordPart, chordPartMatch)) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t}\n\t\treturn this.hasAnyMatch(firstPartMatch) || this.hasAnyMatch(chordPartMatch) ? { firstPart: firstPartMatch, chordPart: chordPartMatch } : null;\n\t}\n\n\tprivate matchPart(chord: ResolvedChord | null, match: KeybindingMatch, word: string, completeMatch: boolean): boolean {\n\t\tlet matched = false;\n\t\tif (this.matchesMetaModifier(chord, word)) {\n\t\t\tmatched = true;\n\t\t\tmatch.metaKey = true;\n\t\t}\n\t\tif (this.matchesCtrlModifier(chord, word)) {\n\t\t\tmatched = true;\n\t\t\tmatch.ctrlKey = true;\n\t\t}\n\t\tif (this.matchesShiftModifier(chord, word)) {\n\t\t\tmatched = true;\n\t\t\tmatch.shiftKey = true;\n\t\t}\n\t\tif (this.matchesAltModifier(chord, word)) {\n\t\t\tmatched = true;\n\t\t\tmatch.altKey = true;\n\t\t}\n\t\tif (this.matchesKeyCode(chord, word, completeMatch)) {\n\t\t\tmatch.keyCode = true;\n\t\t\tmatched = true;\n\t\t}\n\t\treturn matched;\n\t}\n\n\tprivate matchesKeyCode(chord: ResolvedChord | null, word: string, completeMatch: boolean): boolean {\n\t\tif (!chord) {\n\t\t\treturn false;\n\t\t}\n\t\tconst ariaLabel: string = chord.keyAriaLabel || '';\n\t\tif (completeMatch || ariaLabel.length === 1 || word.length === 1) {\n\t\t\tif (strings.compareIgnoreCase(ariaLabel, word) === 0) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t} else {\n\t\t\tif (matchesContiguousSubString(word, ariaLabel)) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\n\tprivate matchesMetaModifier(chord: ResolvedChord | null, word: string): boolean {\n\t\tif (!chord) {\n\t\t\treturn false;\n\t\t}\n\t\tif (!chord.metaKey) {\n\t\t\treturn false;\n\t\t}\n\t\treturn this.wordMatchesMetaModifier(word);\n\t}\n\n\tprivate matchesCtrlModifier(chord: ResolvedChord | null, word: string): boolean {\n\t\tif (!chord) {\n\t\t\treturn false;\n\t\t}\n\t\tif (!chord.ctrlKey) {\n\t\t\treturn false;\n\t\t}\n\t\treturn this.wordMatchesCtrlModifier(word);\n\t}\n\n\tprivate matchesShiftModifier(chord: ResolvedChord | null, word: string): boolean {\n\t\tif (!chord) {\n\t\t\treturn false;\n\t\t}\n\t\tif (!chord.shiftKey) {\n\t\t\treturn false;\n\t\t}\n\t\treturn this.wordMatchesShiftModifier(word);\n\t}\n\n\tprivate matchesAltModifier(chord: ResolvedChord | null, word: string): boolean {\n\t\tif (!chord) {\n\t\t\treturn false;\n\t\t}\n\t\tif (!chord.altKey) {\n\t\t\treturn false;\n\t\t}\n\t\treturn this.wordMatchesAltModifier(word);\n\t}\n\n\tprivate hasAnyMatch(keybindingMatch: KeybindingMatch): boolean {\n\t\treturn !!keybindingMatch.altKey ||\n\t\t\t!!keybindingMatch.ctrlKey ||\n\t\t\t!!keybindingMatch.metaKey ||\n\t\t\t!!keybindingMatch.shiftKey ||\n\t\t\t!!keybindingMatch.keyCode;\n\t}\n\n\tprivate isCompleteMatch(chord: ResolvedChord | null, match: KeybindingMatch): boolean {\n\t\tif (!chord) {\n\t\t\treturn true;\n\t\t}\n\t\tif (!match.keyCode) {\n\t\t\treturn false;\n\t\t}\n\t\tif (chord.metaKey && !match.metaKey) {\n\t\t\treturn false;\n\t\t}\n\t\tif (chord.altKey && !match.altKey) {\n\t\t\treturn false;\n\t\t}\n\t\tif (chord.ctrlKey && !match.ctrlKey) {\n\t\t\treturn false;\n\t\t}\n\t\tif (chord.shiftKey && !match.shiftKey) {\n\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t}\n\n\tprivate createCompleteMatch(chord: ResolvedChord | null): KeybindingMatch {\n\t\tconst match: KeybindingMatch = {};\n\t\tif (chord) {\n\t\t\tmatch.keyCode = true;\n\t\t\tif (chord.metaKey) {\n\t\t\t\tmatch.metaKey = true;\n\t\t\t}\n\t\t\tif (chord.altKey) {\n\t\t\t\tmatch.altKey = true;\n\t\t\t}\n\t\t\tif (chord.ctrlKey) {\n\t\t\t\tmatch.ctrlKey = true;\n\t\t\t}\n\t\t\tif (chord.shiftKey) {\n\t\t\t\tmatch.shiftKey = true;\n\t\t\t}\n\t\t}\n\t\treturn match;\n\t}\n\n\tprivate isModifier(word: string): boolean {\n\t\tif (this.wordMatchesAltModifier(word)) {\n\t\t\treturn true;\n\t\t}\n\t\tif (this.wordMatchesCtrlModifier(word)) {\n\t\t\treturn true;\n\t\t}\n\t\tif (this.wordMatchesMetaModifier(word)) {\n\t\t\treturn true;\n\t\t}\n\t\tif (this.wordMatchesShiftModifier(word)) {\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\n\tprivate wordMatchesAltModifier(word: string): boolean {\n\t\tif (strings.equalsIgnoreCase(this.modifierLabels.ui.altKey, word)) {\n\t\t\treturn true;\n\t\t}\n\t\tif (strings.equalsIgnoreCase(this.modifierLabels.aria.altKey, word)) {\n\t\t\treturn true;\n\t\t}\n\t\tif (strings.equalsIgnoreCase(this.modifierLabels.user.altKey, word)) {\n\t\t\treturn true;\n\t\t}\n\t\tif (strings.equalsIgnoreCase(localize('option', \"option\"), word)) {\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\n\tprivate wordMatchesCtrlModifier(word: string): boolean {\n\t\tif (strings.equalsIgnoreCase(this.modifierLabels.ui.ctrlKey, word)) {\n\t\t\treturn true;\n\t\t}\n\t\tif (strings.equalsIgnoreCase(this.modifierLabels.aria.ctrlKey, word)) {\n\t\t\treturn true;\n\t\t}\n\t\tif (strings.equalsIgnoreCase(this.modifierLabels.user.ctrlKey, word)) {\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\n\tprivate wordMatchesMetaModifier(word: string): boolean {\n\t\tif (strings.equalsIgnoreCase(this.modifierLabels.ui.metaKey, word)) {\n\t\t\treturn true;\n\t\t}\n\t\tif (strings.equalsIgnoreCase(this.modifierLabels.aria.metaKey, word)) {\n\t\t\treturn true;\n\t\t}\n\t\tif (strings.equalsIgnoreCase(this.modifierLabels.user.metaKey, word)) {\n\t\t\treturn true;\n\t\t}\n\t\tif (strings.equalsIgnoreCase(localize('meta', \"meta\"), word)) {\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\n\tprivate wordMatchesShiftModifier(word: string): boolean {\n\t\tif (strings.equalsIgnoreCase(this.modifierLabels.ui.shiftKey, word)) {\n\t\t\treturn true;\n\t\t}\n\t\tif (strings.equalsIgnoreCase(this.modifierLabels.aria.shiftKey, word)) {\n\t\t\treturn true;\n\t\t}\n\t\tif (strings.equalsIgnoreCase(this.modifierLabels.user.shiftKey, word)) {\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
