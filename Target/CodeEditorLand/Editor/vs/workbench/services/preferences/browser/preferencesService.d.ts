import { Disposable } from "vs/base/common/lifecycle";
import { URI } from "vs/base/common/uri";
import { IModelService } from "vs/editor/common/services/model";
import { ITextModelService } from "vs/editor/common/services/resolverService";
import { ConfigurationTarget, IConfigurationService } from "vs/platform/configuration/common/configuration";
import { IInstantiationService } from "vs/platform/instantiation/common/instantiation";
import { IKeybindingService } from "vs/platform/keybinding/common/keybinding";
import { ILabelService } from "vs/platform/label/common/label";
import { INotificationService } from "vs/platform/notification/common/notification";
import { IProgressService } from "vs/platform/progress/common/progress";
import { IURLService } from "vs/platform/url/common/url";
import { IUserDataProfilesService } from "vs/platform/userDataProfile/common/userDataProfile";
import { IWorkspaceContextService } from "vs/platform/workspace/common/workspace";
import { IEditorPane } from "vs/workbench/common/editor";
import { EditorInput } from "vs/workbench/common/editor/editorInput";
import { IJSONEditingService } from "vs/workbench/services/configuration/common/jsonEditing";
import { IEditorGroupsService } from "vs/workbench/services/editor/common/editorGroupsService";
import { IEditorService } from "vs/workbench/services/editor/common/editorService";
import { IExtensionService } from "vs/workbench/services/extensions/common/extensions";
import { IKeybindingsEditorOptions, IOpenSettingsOptions, IPreferencesEditorModel, IPreferencesService, ISetting } from "vs/workbench/services/preferences/common/preferences";
import { SettingsEditor2Input } from "vs/workbench/services/preferences/common/preferencesEditorInput";
import { Settings2EditorModel } from "vs/workbench/services/preferences/common/preferencesModels";
import { IRemoteAgentService } from "vs/workbench/services/remote/common/remoteAgentService";
import { ITextEditorService } from "vs/workbench/services/textfile/common/textEditorService";
import { ITextFileService } from "vs/workbench/services/textfile/common/textfiles";
import { IUserDataProfileService } from "vs/workbench/services/userDataProfile/common/userDataProfile";
export declare class PreferencesService extends Disposable implements IPreferencesService {
    private readonly editorService;
    private readonly editorGroupService;
    private readonly textFileService;
    private readonly configurationService;
    private readonly notificationService;
    private readonly contextService;
    private readonly instantiationService;
    private readonly userDataProfileService;
    private readonly userDataProfilesService;
    private readonly textModelResolverService;
    private readonly jsonEditingService;
    private readonly labelService;
    private readonly remoteAgentService;
    private readonly textEditorService;
    private readonly extensionService;
    private readonly progressService;
    readonly _serviceBrand: undefined;
    private readonly _onDispose;
    private readonly _onDidDefaultSettingsContentChanged;
    readonly onDidDefaultSettingsContentChanged: any;
    private _defaultUserSettingsContentModel;
    private _defaultWorkspaceSettingsContentModel;
    private _defaultFolderSettingsContentModel;
    private _defaultRawSettingsEditorModel;
    private readonly _requestedDefaultSettings;
    private _settingsGroups;
    constructor(editorService: IEditorService, editorGroupService: IEditorGroupsService, textFileService: ITextFileService, configurationService: IConfigurationService, notificationService: INotificationService, contextService: IWorkspaceContextService, instantiationService: IInstantiationService, userDataProfileService: IUserDataProfileService, userDataProfilesService: IUserDataProfilesService, textModelResolverService: ITextModelService, keybindingService: IKeybindingService, modelService: IModelService, jsonEditingService: IJSONEditingService, labelService: ILabelService, remoteAgentService: IRemoteAgentService, textEditorService: ITextEditorService, urlService: IURLService, extensionService: IExtensionService, progressService: IProgressService);
    readonly defaultKeybindingsResource: any;
    private readonly defaultSettingsRawResource;
    get userSettingsResource(): URI;
    get workspaceSettingsResource(): URI | null;
    createSettingsEditor2Input(): SettingsEditor2Input;
    getFolderSettingsResource(resource: URI): URI | null;
    hasDefaultSettingsContent(uri: URI): boolean;
    getDefaultSettingsContent(uri: URI): string | undefined;
    createPreferencesEditorModel(uri: URI): Promise<IPreferencesEditorModel<ISetting> | null>;
    openRawDefaultSettings(): Promise<IEditorPane | undefined>;
    openRawUserSettings(): Promise<IEditorPane | undefined>;
    private shouldOpenJsonByDefault;
    openSettings(options?: IOpenSettingsOptions): Promise<IEditorPane | undefined>;
    openLanguageSpecificSettings(languageId: string, options?: IOpenSettingsOptions): Promise<IEditorPane | undefined>;
    private open;
    private openSettings2;
    openApplicationSettings(options?: IOpenSettingsOptions): Promise<IEditorPane | undefined>;
    openUserSettings(options?: IOpenSettingsOptions): Promise<IEditorPane | undefined>;
    openRemoteSettings(options?: IOpenSettingsOptions): Promise<IEditorPane | undefined>;
    openWorkspaceSettings(options?: IOpenSettingsOptions): Promise<IEditorPane | undefined>;
    openFolderSettings(options?: IOpenSettingsOptions): Promise<IEditorPane | undefined>;
    openGlobalKeybindingSettings(textual: boolean, options?: IKeybindingsEditorOptions): Promise<void>;
    openDefaultKeybindingsFile(): Promise<IEditorPane | undefined>;
    private openSettingsJson;
    private doOpenSettingsJson;
    private doOpenSplitJSON;
    createSplitJsonEditorInput(configurationTarget: ConfigurationTarget, resource: URI): EditorInput;
    createSettings2EditorModel(): Settings2EditorModel;
    private getConfigurationTargetFromDefaultSettingsResource;
    private isDefaultSettingsResource;
    private isDefaultUserSettingsResource;
    private isDefaultWorkspaceSettingsResource;
    private isDefaultFolderSettingsResource;
    private getDefaultSettingsResource;
    private getOrCreateEditableSettingsEditorInput;
    private createEditableSettingsEditorModel;
    private createDefaultSettingsEditorModel;
    private getDefaultSettings;
    getEditableSettingsURI(configurationTarget: ConfigurationTarget, resource?: URI): Promise<URI | null>;
    private createSettingsIfNotExists;
    private createIfNotExists;
    private getMostCommonlyUsedSettings;
    private revealSetting;
    private getPositionToReveal;
    getSetting(settingId: string): ISetting | undefined;
    /**
     * Should be of the format:
     * 	code://settings/settingName
     * Examples:
     * 	code://settings/files.autoSave
     *
     */
    handleURL(uri: URI): Promise<boolean>;
    dispose(): void;
}
