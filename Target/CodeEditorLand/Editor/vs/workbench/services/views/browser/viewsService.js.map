{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/views/browser/viewsService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Disposable, IDisposable, toDisposable, DisposableStore, DisposableMap } from '../../../../base/common/lifecycle.js';\nimport { IViewDescriptorService, ViewContainer, IViewDescriptor, IView, ViewContainerLocation, IViewPaneContainer } from '../../../common/views.js';\nimport { FocusedViewContext, getVisbileViewContextKey } from '../../../common/contextkeys.js';\nimport { Registry } from '../../../../platform/registry/common/platform.js';\nimport { IStorageService } from '../../../../platform/storage/common/storage.js';\nimport { ContextKeyExpr, IContextKey, IContextKeyService, RawContextKey } from '../../../../platform/contextkey/common/contextkey.js';\nimport { Event, Emitter } from '../../../../base/common/event.js';\nimport { isString } from '../../../../base/common/types.js';\nimport { MenuId, registerAction2, Action2, MenuRegistry } from '../../../../platform/actions/common/actions.js';\nimport { localize, localize2 } from '../../../../nls.js';\nimport { KeybindingWeight } from '../../../../platform/keybinding/common/keybindingsRegistry.js';\nimport { InstantiationType, registerSingleton } from '../../../../platform/instantiation/common/extensions.js';\nimport { IPaneComposite } from '../../../common/panecomposite.js';\nimport { ServicesAccessor, IInstantiationService } from '../../../../platform/instantiation/common/instantiation.js';\nimport { ViewPaneContainer } from '../../../browser/parts/views/viewPaneContainer.js';\nimport { ITelemetryService } from '../../../../platform/telemetry/common/telemetry.js';\nimport { IThemeService } from '../../../../platform/theme/common/themeService.js';\nimport { IContextMenuService } from '../../../../platform/contextview/browser/contextView.js';\nimport { IExtensionService } from '../../extensions/common/extensions.js';\nimport { IWorkspaceContextService } from '../../../../platform/workspace/common/workspace.js';\nimport { PaneCompositeDescriptor, PaneCompositeRegistry, Extensions as PaneCompositeExtensions, PaneComposite } from '../../../browser/panecomposite.js';\nimport { IWorkbenchLayoutService, Parts } from '../../layout/browser/layoutService.js';\nimport { URI } from '../../../../base/common/uri.js';\nimport { IProgressIndicator } from '../../../../platform/progress/common/progress.js';\nimport { Categories } from '../../../../platform/action/common/actionCommonCategories.js';\nimport { IEditorGroupsService } from '../../editor/common/editorGroupsService.js';\nimport { FilterViewPaneContainer } from '../../../browser/parts/views/viewsViewlet.js';\nimport { IPaneCompositePartService } from '../../panecomposite/browser/panecomposite.js';\nimport { ICommandActionTitle, ILocalizedString } from '../../../../platform/action/common/action.js';\nimport { IEditorService } from '../../editor/common/editorService.js';\nimport { IViewsService } from '../common/viewsService.js';\n\nexport class ViewsService extends Disposable implements IViewsService {\n\n\tdeclare readonly _serviceBrand: undefined;\n\n\tprivate readonly viewDisposable: Map<IViewDescriptor, IDisposable>;\n\tprivate readonly viewPaneContainers: Map<string, ViewPaneContainer>;\n\n\tprivate readonly _onDidChangeViewVisibility: Emitter<{ id: string; visible: boolean }> = this._register(new Emitter<{ id: string; visible: boolean }>());\n\treadonly onDidChangeViewVisibility: Event<{ id: string; visible: boolean }> = this._onDidChangeViewVisibility.event;\n\n\tprivate readonly _onDidChangeViewContainerVisibility = this._register(new Emitter<{ id: string; visible: boolean; location: ViewContainerLocation }>());\n\treadonly onDidChangeViewContainerVisibility = this._onDidChangeViewContainerVisibility.event;\n\n\tprivate readonly _onDidChangeFocusedView = this._register(new Emitter<void>());\n\treadonly onDidChangeFocusedView = this._onDidChangeFocusedView.event;\n\n\tprivate readonly viewContainerDisposables = this._register(new DisposableMap());\n\tprivate readonly enabledViewContainersContextKeys: Map<string, IContextKey<boolean>>;\n\tprivate readonly visibleViewContextKeys: Map<string, IContextKey<boolean>>;\n\tprivate readonly focusedViewContextKey: IContextKey<string>;\n\n\tconstructor(\n\t\t@IViewDescriptorService private readonly viewDescriptorService: IViewDescriptorService,\n\t\t@IPaneCompositePartService private readonly paneCompositeService: IPaneCompositePartService,\n\t\t@IContextKeyService private readonly contextKeyService: IContextKeyService,\n\t\t@IWorkbenchLayoutService private readonly layoutService: IWorkbenchLayoutService,\n\t\t@IEditorService private readonly editorService: IEditorService\n\t) {\n\t\tsuper();\n\n\t\tthis.viewDisposable = new Map<IViewDescriptor, IDisposable>();\n\t\tthis.enabledViewContainersContextKeys = new Map<string, IContextKey<boolean>>();\n\t\tthis.visibleViewContextKeys = new Map<string, IContextKey<boolean>>();\n\t\tthis.viewPaneContainers = new Map<string, ViewPaneContainer>();\n\n\t\tthis._register(toDisposable(() => {\n\t\t\tthis.viewDisposable.forEach(disposable => disposable.dispose());\n\t\t\tthis.viewDisposable.clear();\n\t\t}));\n\n\t\tthis.viewDescriptorService.viewContainers.forEach(viewContainer => this.onDidRegisterViewContainer(viewContainer, this.viewDescriptorService.getViewContainerLocation(viewContainer)!));\n\t\tthis._register(this.viewDescriptorService.onDidChangeViewContainers(({ added, removed }) => this.onDidChangeContainers(added, removed)));\n\t\tthis._register(this.viewDescriptorService.onDidChangeContainerLocation(({ viewContainer, from, to }) => this.onDidChangeContainerLocation(viewContainer, from, to)));\n\n\t\t// View Container Visibility\n\t\tthis._register(this.paneCompositeService.onDidPaneCompositeOpen(e => this._onDidChangeViewContainerVisibility.fire({ id: e.composite.getId(), visible: true, location: e.viewContainerLocation })));\n\t\tthis._register(this.paneCompositeService.onDidPaneCompositeClose(e => this._onDidChangeViewContainerVisibility.fire({ id: e.composite.getId(), visible: false, location: e.viewContainerLocation })));\n\n\t\tthis.focusedViewContextKey = FocusedViewContext.bindTo(contextKeyService);\n\t}\n\n\tprivate onViewsAdded(added: IView[]): void {\n\t\tfor (const view of added) {\n\t\t\tthis.onViewsVisibilityChanged(view, view.isBodyVisible());\n\t\t}\n\t}\n\n\tprivate onViewsVisibilityChanged(view: IView, visible: boolean): void {\n\t\tthis.getOrCreateActiveViewContextKey(view).set(visible);\n\t\tthis._onDidChangeViewVisibility.fire({ id: view.id, visible: visible });\n\t}\n\n\tprivate onViewsRemoved(removed: IView[]): void {\n\t\tfor (const view of removed) {\n\t\t\tthis.onViewsVisibilityChanged(view, false);\n\t\t}\n\t}\n\n\tprivate getOrCreateActiveViewContextKey(view: IView): IContextKey<boolean> {\n\t\tconst visibleContextKeyId = getVisbileViewContextKey(view.id);\n\t\tlet contextKey = this.visibleViewContextKeys.get(visibleContextKeyId);\n\t\tif (!contextKey) {\n\t\t\tcontextKey = new RawContextKey(visibleContextKeyId, false).bindTo(this.contextKeyService);\n\t\t\tthis.visibleViewContextKeys.set(visibleContextKeyId, contextKey);\n\t\t}\n\t\treturn contextKey;\n\t}\n\n\tprivate onDidChangeContainers(added: ReadonlyArray<{ container: ViewContainer; location: ViewContainerLocation }>, removed: ReadonlyArray<{ container: ViewContainer; location: ViewContainerLocation }>): void {\n\t\tfor (const { container, location } of removed) {\n\t\t\tthis.onDidDeregisterViewContainer(container, location);\n\t\t}\n\t\tfor (const { container, location } of added) {\n\t\t\tthis.onDidRegisterViewContainer(container, location);\n\t\t}\n\t}\n\n\tprivate onDidRegisterViewContainer(viewContainer: ViewContainer, viewContainerLocation: ViewContainerLocation): void {\n\t\tthis.registerPaneComposite(viewContainer, viewContainerLocation);\n\t\tconst disposables = new DisposableStore();\n\n\t\tconst viewContainerModel = this.viewDescriptorService.getViewContainerModel(viewContainer);\n\t\tthis.onViewDescriptorsAdded(viewContainerModel.allViewDescriptors, viewContainer);\n\t\tdisposables.add(viewContainerModel.onDidChangeAllViewDescriptors(({ added, removed }) => {\n\t\t\tthis.onViewDescriptorsAdded(added, viewContainer);\n\t\t\tthis.onViewDescriptorsRemoved(removed);\n\t\t}));\n\t\tthis.updateViewContainerEnablementContextKey(viewContainer);\n\t\tdisposables.add(viewContainerModel.onDidChangeActiveViewDescriptors(() => this.updateViewContainerEnablementContextKey(viewContainer)));\n\t\tdisposables.add(this.registerOpenViewContainerAction(viewContainer));\n\n\t\tthis.viewContainerDisposables.set(viewContainer.id, disposables);\n\t}\n\n\tprivate onDidDeregisterViewContainer(viewContainer: ViewContainer, viewContainerLocation: ViewContainerLocation): void {\n\t\tthis.deregisterPaneComposite(viewContainer, viewContainerLocation);\n\t\tthis.viewContainerDisposables.deleteAndDispose(viewContainer.id);\n\t}\n\n\tprivate onDidChangeContainerLocation(viewContainer: ViewContainer, from: ViewContainerLocation, to: ViewContainerLocation): void {\n\t\tthis.deregisterPaneComposite(viewContainer, from);\n\t\tthis.registerPaneComposite(viewContainer, to);\n\n\t\t// Open view container if part is visible and there is only one view container in location\n\t\tif (\n\t\t\tthis.layoutService.isVisible(getPartByLocation(to)) &&\n\t\t\tthis.viewDescriptorService.getViewContainersByLocation(to).filter(vc => this.isViewContainerActive(vc.id)).length === 1\n\t\t) {\n\t\t\tthis.openViewContainer(viewContainer.id);\n\t\t}\n\t}\n\n\tprivate onViewDescriptorsAdded(views: ReadonlyArray<IViewDescriptor>, container: ViewContainer): void {\n\t\tconst location = this.viewDescriptorService.getViewContainerLocation(container);\n\t\tif (location === null) {\n\t\t\treturn;\n\t\t}\n\n\t\tfor (const viewDescriptor of views) {\n\t\t\tconst disposables = new DisposableStore();\n\t\t\tdisposables.add(this.registerOpenViewAction(viewDescriptor));\n\t\t\tdisposables.add(this.registerFocusViewAction(viewDescriptor, container.title));\n\t\t\tdisposables.add(this.registerResetViewLocationAction(viewDescriptor));\n\t\t\tthis.viewDisposable.set(viewDescriptor, disposables);\n\t\t}\n\t}\n\n\tprivate onViewDescriptorsRemoved(views: ReadonlyArray<IViewDescriptor>): void {\n\t\tfor (const view of views) {\n\t\t\tconst disposable = this.viewDisposable.get(view);\n\t\t\tif (disposable) {\n\t\t\t\tdisposable.dispose();\n\t\t\t\tthis.viewDisposable.delete(view);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate updateViewContainerEnablementContextKey(viewContainer: ViewContainer): void {\n\t\tlet contextKey = this.enabledViewContainersContextKeys.get(viewContainer.id);\n\t\tif (!contextKey) {\n\t\t\tcontextKey = this.contextKeyService.createKey(getEnabledViewContainerContextKey(viewContainer.id), false);\n\t\t\tthis.enabledViewContainersContextKeys.set(viewContainer.id, contextKey);\n\t\t}\n\t\tcontextKey.set(!(viewContainer.hideIfEmpty && this.viewDescriptorService.getViewContainerModel(viewContainer).activeViewDescriptors.length === 0));\n\t}\n\n\tprivate async openComposite(compositeId: string, location: ViewContainerLocation, focus?: boolean): Promise<IPaneComposite | undefined> {\n\t\treturn this.paneCompositeService.openPaneComposite(compositeId, location, focus);\n\t}\n\n\tprivate getComposite(compositeId: string, location: ViewContainerLocation): { id: string; name: string } | undefined {\n\t\treturn this.paneCompositeService.getPaneComposite(compositeId, location);\n\t}\n\n\t// One view container can be visible at a time in a location\n\tisViewContainerVisible(id: string): boolean {\n\t\tconst viewContainer = this.viewDescriptorService.getViewContainerById(id);\n\t\tif (!viewContainer) {\n\t\t\treturn false;\n\t\t}\n\n\t\tconst viewContainerLocation = this.viewDescriptorService.getViewContainerLocation(viewContainer);\n\t\tif (viewContainerLocation === null) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn this.paneCompositeService.getActivePaneComposite(viewContainerLocation)?.getId() === id;\n\t}\n\n\t// Multiple view containers can be active/inactive at a time in a location\n\tisViewContainerActive(id: string): boolean {\n\t\tconst viewContainer = this.viewDescriptorService.getViewContainerById(id);\n\t\tif (!viewContainer) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (!viewContainer.hideIfEmpty) {\n\t\t\treturn true;\n\t\t}\n\n\t\treturn this.viewDescriptorService.getViewContainerModel(viewContainer).activeViewDescriptors.length > 0;\n\t}\n\n\tgetVisibleViewContainer(location: ViewContainerLocation): ViewContainer | null {\n\t\tconst viewContainerId = this.paneCompositeService.getActivePaneComposite(location)?.getId();\n\t\treturn viewContainerId ? this.viewDescriptorService.getViewContainerById(viewContainerId) : null;\n\t}\n\n\tgetActiveViewPaneContainerWithId(viewContainerId: string): IViewPaneContainer | null {\n\t\tconst viewContainer = this.viewDescriptorService.getViewContainerById(viewContainerId);\n\t\treturn viewContainer ? this.getActiveViewPaneContainer(viewContainer) : null;\n\t}\n\n\tasync openViewContainer(id: string, focus?: boolean): Promise<IPaneComposite | null> {\n\t\tconst viewContainer = this.viewDescriptorService.getViewContainerById(id);\n\t\tif (viewContainer) {\n\t\t\tconst viewContainerLocation = this.viewDescriptorService.getViewContainerLocation(viewContainer);\n\t\t\tif (viewContainerLocation !== null) {\n\t\t\t\tconst paneComposite = await this.paneCompositeService.openPaneComposite(id, viewContainerLocation, focus);\n\t\t\t\treturn paneComposite || null;\n\t\t\t}\n\t\t}\n\n\t\treturn null;\n\t}\n\n\tasync closeViewContainer(id: string): Promise<void> {\n\t\tconst viewContainer = this.viewDescriptorService.getViewContainerById(id);\n\t\tif (viewContainer) {\n\t\t\tconst viewContainerLocation = this.viewDescriptorService.getViewContainerLocation(viewContainer);\n\t\t\tconst isActive = viewContainerLocation !== null && this.paneCompositeService.getActivePaneComposite(viewContainerLocation);\n\t\t\tif (viewContainerLocation !== null) {\n\t\t\t\treturn isActive ? this.layoutService.setPartHidden(true, getPartByLocation(viewContainerLocation)) : undefined;\n\t\t\t}\n\t\t}\n\t}\n\n\tisViewVisible(id: string): boolean {\n\t\tconst activeView = this.getActiveViewWithId(id);\n\t\treturn activeView?.isBodyVisible() || false;\n\t}\n\n\tgetActiveViewWithId<T extends IView>(id: string): T | null {\n\t\tconst viewContainer = this.viewDescriptorService.getViewContainerByViewId(id);\n\t\tif (viewContainer) {\n\t\t\tconst activeViewPaneContainer = this.getActiveViewPaneContainer(viewContainer);\n\t\t\tif (activeViewPaneContainer) {\n\t\t\t\treturn activeViewPaneContainer.getView(id) as T;\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n\n\tgetViewWithId<T extends IView>(id: string): T | null {\n\t\tconst viewContainer = this.viewDescriptorService.getViewContainerByViewId(id);\n\t\tif (viewContainer) {\n\t\t\tconst viewPaneContainer: IViewPaneContainer | undefined = this.viewPaneContainers.get(viewContainer.id);\n\t\t\tif (viewPaneContainer) {\n\t\t\t\treturn viewPaneContainer.getView(id) as T;\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n\n\tgetFocusedViewName(): string {\n\t\tconst viewId: string = this.contextKeyService.getContextKeyValue(FocusedViewContext.key) ?? '';\n\t\tconst textEditorFocused = this.editorService.activeTextEditorControl?.hasTextFocus() ? localize('editor', \"Text Editor\") : undefined;\n\t\treturn this.viewDescriptorService.getViewDescriptorById(viewId.toString())?.name?.value ?? textEditorFocused ?? '';\n\t}\n\n\tasync openView<T extends IView>(id: string, focus?: boolean): Promise<T | null> {\n\t\tconst viewContainer = this.viewDescriptorService.getViewContainerByViewId(id);\n\t\tif (!viewContainer) {\n\t\t\treturn null;\n\t\t}\n\n\t\tif (!this.viewDescriptorService.getViewContainerModel(viewContainer).activeViewDescriptors.some(viewDescriptor => viewDescriptor.id === id)) {\n\t\t\treturn null;\n\t\t}\n\n\t\tconst location = this.viewDescriptorService.getViewContainerLocation(viewContainer);\n\t\tconst compositeDescriptor = this.getComposite(viewContainer.id, location!);\n\t\tif (compositeDescriptor) {\n\t\t\tconst paneComposite = await this.openComposite(compositeDescriptor.id, location!) as IPaneComposite | undefined;\n\t\t\tif (paneComposite && paneComposite.openView) {\n\t\t\t\treturn paneComposite.openView<T>(id, focus) || null;\n\t\t\t} else if (focus) {\n\t\t\t\tpaneComposite?.focus();\n\t\t\t}\n\t\t}\n\n\t\treturn null;\n\t}\n\n\tcloseView(id: string): void {\n\t\tconst viewContainer = this.viewDescriptorService.getViewContainerByViewId(id);\n\t\tif (viewContainer) {\n\t\t\tconst activeViewPaneContainer = this.getActiveViewPaneContainer(viewContainer);\n\t\t\tif (activeViewPaneContainer) {\n\t\t\t\tconst view = activeViewPaneContainer.getView(id);\n\t\t\t\tif (view) {\n\t\t\t\t\tif (activeViewPaneContainer.views.length === 1) {\n\t\t\t\t\t\tconst location = this.viewDescriptorService.getViewContainerLocation(viewContainer);\n\t\t\t\t\t\tif (location === ViewContainerLocation.Sidebar) {\n\t\t\t\t\t\t\tthis.layoutService.setPartHidden(true, Parts.SIDEBAR_PART);\n\t\t\t\t\t\t} else if (location === ViewContainerLocation.Panel || location === ViewContainerLocation.AuxiliaryBar) {\n\t\t\t\t\t\t\tthis.paneCompositeService.hideActivePaneComposite(location);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// The blur event doesn't fire on WebKit when the focused element is hidden,\n\t\t\t\t\t\t// so the context key needs to be forced here too otherwise a view may still\n\t\t\t\t\t\t// think it's showing, breaking toggle commands.\n\t\t\t\t\t\tif (this.focusedViewContextKey.get() === id) {\n\t\t\t\t\t\t\tthis.focusedViewContextKey.reset();\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tview.setExpanded(false);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate getActiveViewPaneContainer(viewContainer: ViewContainer): IViewPaneContainer | null {\n\t\tconst location = this.viewDescriptorService.getViewContainerLocation(viewContainer);\n\t\tif (location === null) {\n\t\t\treturn null;\n\t\t}\n\n\t\tconst activePaneComposite = this.paneCompositeService.getActivePaneComposite(location);\n\t\tif (activePaneComposite?.getId() === viewContainer.id) {\n\t\t\treturn activePaneComposite.getViewPaneContainer() || null;\n\t\t}\n\n\t\treturn null;\n\t}\n\n\tgetViewProgressIndicator(viewId: string): IProgressIndicator | undefined {\n\t\tconst viewContainer = this.viewDescriptorService.getViewContainerByViewId(viewId);\n\t\tif (!viewContainer) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\tconst viewPaneContainer = this.viewPaneContainers.get(viewContainer.id);\n\t\tif (!viewPaneContainer) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\tconst view = viewPaneContainer.getView(viewId);\n\t\tif (!view) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\tif (viewPaneContainer.isViewMergedWithContainer()) {\n\t\t\treturn this.getViewContainerProgressIndicator(viewContainer);\n\t\t}\n\n\t\treturn view.getProgressIndicator();\n\t}\n\n\tprivate getViewContainerProgressIndicator(viewContainer: ViewContainer): IProgressIndicator | undefined {\n\t\tconst viewContainerLocation = this.viewDescriptorService.getViewContainerLocation(viewContainer);\n\t\tif (viewContainerLocation === null) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\treturn this.paneCompositeService.getProgressIndicator(viewContainer.id, viewContainerLocation);\n\t}\n\n\tprivate registerOpenViewContainerAction(viewContainer: ViewContainer): IDisposable {\n\t\tconst disposables = new DisposableStore();\n\t\tif (viewContainer.openCommandActionDescriptor) {\n\t\t\tconst { id, mnemonicTitle, keybindings, order } = viewContainer.openCommandActionDescriptor ?? { id: viewContainer.id };\n\t\t\tconst title = viewContainer.openCommandActionDescriptor.title ?? viewContainer.title;\n\t\t\tconst that = this;\n\t\t\tdisposables.add(registerAction2(class OpenViewContainerAction extends Action2 {\n\t\t\t\tconstructor() {\n\t\t\t\t\tsuper({\n\t\t\t\t\t\tid,\n\t\t\t\t\t\tget title(): ICommandActionTitle {\n\t\t\t\t\t\t\tconst viewContainerLocation = that.viewDescriptorService.getViewContainerLocation(viewContainer);\n\t\t\t\t\t\t\tconst localizedTitle = typeof title === 'string' ? title : title.value;\n\t\t\t\t\t\t\tconst originalTitle = typeof title === 'string' ? title : title.original;\n\t\t\t\t\t\t\tif (viewContainerLocation === ViewContainerLocation.Sidebar) {\n\t\t\t\t\t\t\t\treturn { value: localize('show view', \"Show {0}\", localizedTitle), original: `Show ${originalTitle}` };\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\treturn { value: localize('toggle view', \"Toggle {0}\", localizedTitle), original: `Toggle ${originalTitle}` };\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t},\n\t\t\t\t\t\tcategory: Categories.View,\n\t\t\t\t\t\tprecondition: ContextKeyExpr.has(getEnabledViewContainerContextKey(viewContainer.id)),\n\t\t\t\t\t\tkeybinding: keybindings ? { ...keybindings, weight: KeybindingWeight.WorkbenchContrib } : undefined,\n\t\t\t\t\t\tf1: true\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\tpublic async run(serviceAccessor: ServicesAccessor): Promise<any> {\n\t\t\t\t\tconst editorGroupService = serviceAccessor.get(IEditorGroupsService);\n\t\t\t\t\tconst viewDescriptorService = serviceAccessor.get(IViewDescriptorService);\n\t\t\t\t\tconst layoutService = serviceAccessor.get(IWorkbenchLayoutService);\n\t\t\t\t\tconst viewsService = serviceAccessor.get(IViewsService);\n\t\t\t\t\tconst viewContainerLocation = viewDescriptorService.getViewContainerLocation(viewContainer);\n\t\t\t\t\tswitch (viewContainerLocation) {\n\t\t\t\t\t\tcase ViewContainerLocation.AuxiliaryBar:\n\t\t\t\t\t\tcase ViewContainerLocation.Sidebar: {\n\t\t\t\t\t\t\tconst part = viewContainerLocation === ViewContainerLocation.Sidebar ? Parts.SIDEBAR_PART : Parts.AUXILIARYBAR_PART;\n\t\t\t\t\t\t\tif (!viewsService.isViewContainerVisible(viewContainer.id) || !layoutService.hasFocus(part)) {\n\t\t\t\t\t\t\t\tawait viewsService.openViewContainer(viewContainer.id, true);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\teditorGroupService.activeGroup.focus();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcase ViewContainerLocation.Panel:\n\t\t\t\t\t\t\tif (!viewsService.isViewContainerVisible(viewContainer.id) || !layoutService.hasFocus(Parts.PANEL_PART)) {\n\t\t\t\t\t\t\t\tawait viewsService.openViewContainer(viewContainer.id, true);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tviewsService.closeViewContainer(viewContainer.id);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}));\n\n\t\t\tif (mnemonicTitle) {\n\t\t\t\tconst defaultLocation = this.viewDescriptorService.getDefaultViewContainerLocation(viewContainer);\n\t\t\t\tdisposables.add(MenuRegistry.appendMenuItem(MenuId.MenubarViewMenu, {\n\t\t\t\t\tcommand: {\n\t\t\t\t\t\tid,\n\t\t\t\t\t\ttitle: mnemonicTitle,\n\t\t\t\t\t},\n\t\t\t\t\tgroup: defaultLocation === ViewContainerLocation.Sidebar ? '3_views' : '4_panels',\n\t\t\t\t\twhen: ContextKeyExpr.has(getEnabledViewContainerContextKey(viewContainer.id)),\n\t\t\t\t\torder: order ?? Number.MAX_VALUE\n\t\t\t\t}));\n\t\t\t}\n\t\t}\n\n\t\treturn disposables;\n\t}\n\n\tprivate registerOpenViewAction(viewDescriptor: IViewDescriptor): IDisposable {\n\t\tconst disposables = new DisposableStore();\n\t\tif (viewDescriptor.openCommandActionDescriptor) {\n\t\t\tconst title = viewDescriptor.openCommandActionDescriptor.title ?? viewDescriptor.name;\n\t\t\tconst commandId = viewDescriptor.openCommandActionDescriptor.id;\n\t\t\tconst that = this;\n\t\t\tdisposables.add(registerAction2(class OpenViewAction extends Action2 {\n\t\t\t\tconstructor() {\n\t\t\t\t\tsuper({\n\t\t\t\t\t\tid: commandId,\n\t\t\t\t\t\tget title(): ICommandActionTitle {\n\t\t\t\t\t\t\tconst viewContainerLocation = that.viewDescriptorService.getViewLocationById(viewDescriptor.id);\n\t\t\t\t\t\t\tconst localizedTitle = typeof title === 'string' ? title : title.value;\n\t\t\t\t\t\t\tconst originalTitle = typeof title === 'string' ? title : title.original;\n\t\t\t\t\t\t\tif (viewContainerLocation === ViewContainerLocation.Sidebar) {\n\t\t\t\t\t\t\t\treturn { value: localize('show view', \"Show {0}\", localizedTitle), original: `Show ${originalTitle}` };\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\treturn { value: localize('toggle view', \"Toggle {0}\", localizedTitle), original: `Toggle ${originalTitle}` };\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t},\n\t\t\t\t\t\tcategory: Categories.View,\n\t\t\t\t\t\tprecondition: ContextKeyExpr.has(`${viewDescriptor.id}.active`),\n\t\t\t\t\t\tkeybinding: viewDescriptor.openCommandActionDescriptor!.keybindings ? { ...viewDescriptor.openCommandActionDescriptor!.keybindings, weight: KeybindingWeight.WorkbenchContrib } : undefined,\n\t\t\t\t\t\tf1: true\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\tpublic async run(serviceAccessor: ServicesAccessor): Promise<any> {\n\t\t\t\t\tconst editorGroupService = serviceAccessor.get(IEditorGroupsService);\n\t\t\t\t\tconst viewDescriptorService = serviceAccessor.get(IViewDescriptorService);\n\t\t\t\t\tconst layoutService = serviceAccessor.get(IWorkbenchLayoutService);\n\t\t\t\t\tconst viewsService = serviceAccessor.get(IViewsService);\n\t\t\t\t\tconst contextKeyService = serviceAccessor.get(IContextKeyService);\n\n\t\t\t\t\tconst focusedViewId = FocusedViewContext.getValue(contextKeyService);\n\t\t\t\t\tif (focusedViewId === viewDescriptor.id) {\n\n\t\t\t\t\t\tconst viewLocation = viewDescriptorService.getViewLocationById(viewDescriptor.id);\n\t\t\t\t\t\tif (viewDescriptorService.getViewLocationById(viewDescriptor.id) === ViewContainerLocation.Sidebar) {\n\t\t\t\t\t\t\t// focus the editor if the view is focused and in the side bar\n\t\t\t\t\t\t\teditorGroupService.activeGroup.focus();\n\t\t\t\t\t\t} else if (viewLocation !== null) {\n\t\t\t\t\t\t\t// otherwise hide the part where the view lives if focused\n\t\t\t\t\t\t\tlayoutService.setPartHidden(true, getPartByLocation(viewLocation));\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tviewsService.openView(viewDescriptor.id, true);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}));\n\n\t\t\tif (viewDescriptor.openCommandActionDescriptor.mnemonicTitle) {\n\t\t\t\tconst defaultViewContainer = this.viewDescriptorService.getDefaultContainerById(viewDescriptor.id);\n\t\t\t\tif (defaultViewContainer) {\n\t\t\t\t\tconst defaultLocation = this.viewDescriptorService.getDefaultViewContainerLocation(defaultViewContainer);\n\t\t\t\t\tdisposables.add(MenuRegistry.appendMenuItem(MenuId.MenubarViewMenu, {\n\t\t\t\t\t\tcommand: {\n\t\t\t\t\t\t\tid: commandId,\n\t\t\t\t\t\t\ttitle: viewDescriptor.openCommandActionDescriptor.mnemonicTitle,\n\t\t\t\t\t\t},\n\t\t\t\t\t\tgroup: defaultLocation === ViewContainerLocation.Sidebar ? '3_views' : '4_panels',\n\t\t\t\t\t\twhen: ContextKeyExpr.has(`${viewDescriptor.id}.active`),\n\t\t\t\t\t\torder: viewDescriptor.openCommandActionDescriptor.order ?? Number.MAX_VALUE\n\t\t\t\t\t}));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn disposables;\n\t}\n\n\tprivate registerFocusViewAction(viewDescriptor: IViewDescriptor, category?: string | ILocalizedString): IDisposable {\n\t\treturn registerAction2(class FocusViewAction extends Action2 {\n\t\t\tconstructor() {\n\t\t\t\tconst title = localize2({ key: 'focus view', comment: ['{0} indicates the name of the view to be focused.'] }, \"Focus on {0} View\", viewDescriptor.name.value);\n\t\t\t\tsuper({\n\t\t\t\t\tid: viewDescriptor.focusCommand ? viewDescriptor.focusCommand.id : `${viewDescriptor.id}.focus`,\n\t\t\t\t\ttitle,\n\t\t\t\t\tcategory,\n\t\t\t\t\tmenu: [{\n\t\t\t\t\t\tid: MenuId.CommandPalette,\n\t\t\t\t\t\twhen: viewDescriptor.when,\n\t\t\t\t\t}],\n\t\t\t\t\tkeybinding: {\n\t\t\t\t\t\twhen: ContextKeyExpr.has(`${viewDescriptor.id}.active`),\n\t\t\t\t\t\tweight: KeybindingWeight.WorkbenchContrib,\n\t\t\t\t\t\tprimary: viewDescriptor.focusCommand?.keybindings?.primary,\n\t\t\t\t\t\tsecondary: viewDescriptor.focusCommand?.keybindings?.secondary,\n\t\t\t\t\t\tlinux: viewDescriptor.focusCommand?.keybindings?.linux,\n\t\t\t\t\t\tmac: viewDescriptor.focusCommand?.keybindings?.mac,\n\t\t\t\t\t\twin: viewDescriptor.focusCommand?.keybindings?.win\n\t\t\t\t\t},\n\t\t\t\t\tmetadata: {\n\t\t\t\t\t\tdescription: title.value,\n\t\t\t\t\t\targs: [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tname: 'focusOptions',\n\t\t\t\t\t\t\t\tdescription: 'Focus Options',\n\t\t\t\t\t\t\t\tschema: {\n\t\t\t\t\t\t\t\t\ttype: 'object',\n\t\t\t\t\t\t\t\t\tproperties: {\n\t\t\t\t\t\t\t\t\t\t'preserveFocus': {\n\t\t\t\t\t\t\t\t\t\t\ttype: 'boolean',\n\t\t\t\t\t\t\t\t\t\t\tdefault: false\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t]\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t\trun(accessor: ServicesAccessor, options?: { preserveFocus?: boolean }): void {\n\t\t\t\taccessor.get(IViewsService).openView(viewDescriptor.id, !options?.preserveFocus);\n\t\t\t}\n\t\t});\n\t}\n\n\tprivate registerResetViewLocationAction(viewDescriptor: IViewDescriptor): IDisposable {\n\t\treturn registerAction2(class ResetViewLocationAction extends Action2 {\n\t\t\tconstructor() {\n\t\t\t\tsuper({\n\t\t\t\t\tid: `${viewDescriptor.id}.resetViewLocation`,\n\t\t\t\t\ttitle: localize2('resetViewLocation', \"Reset Location\"),\n\t\t\t\t\tmenu: [{\n\t\t\t\t\t\tid: MenuId.ViewTitleContext,\n\t\t\t\t\t\twhen: ContextKeyExpr.or(\n\t\t\t\t\t\t\tContextKeyExpr.and(\n\t\t\t\t\t\t\t\tContextKeyExpr.equals('view', viewDescriptor.id),\n\t\t\t\t\t\t\t\tContextKeyExpr.equals(`${viewDescriptor.id}.defaultViewLocation`, false)\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t),\n\t\t\t\t\t\tgroup: '1_hide',\n\t\t\t\t\t\torder: 2\n\t\t\t\t\t}],\n\t\t\t\t});\n\t\t\t}\n\t\t\trun(accessor: ServicesAccessor): void {\n\t\t\t\tconst viewDescriptorService = accessor.get(IViewDescriptorService);\n\t\t\t\tconst defaultContainer = viewDescriptorService.getDefaultContainerById(viewDescriptor.id)!;\n\t\t\t\tconst containerModel = viewDescriptorService.getViewContainerModel(defaultContainer)!;\n\n\t\t\t\t// The default container is hidden so we should try to reset its location first\n\t\t\t\tif (defaultContainer.hideIfEmpty && containerModel.visibleViewDescriptors.length === 0) {\n\t\t\t\t\tconst defaultLocation = viewDescriptorService.getDefaultViewContainerLocation(defaultContainer)!;\n\t\t\t\t\tviewDescriptorService.moveViewContainerToLocation(defaultContainer, defaultLocation, undefined, this.desc.id);\n\t\t\t\t}\n\n\t\t\t\tviewDescriptorService.moveViewsToContainer([viewDescriptor], viewDescriptorService.getDefaultContainerById(viewDescriptor.id)!, undefined, this.desc.id);\n\t\t\t\taccessor.get(IViewsService).openView(viewDescriptor.id, true);\n\t\t\t}\n\t\t});\n\t}\n\n\tprivate registerPaneComposite(viewContainer: ViewContainer, viewContainerLocation: ViewContainerLocation): void {\n\t\tconst that = this;\n\t\tclass PaneContainer extends PaneComposite {\n\t\t\tconstructor(\n\t\t\t\t@ITelemetryService telemetryService: ITelemetryService,\n\t\t\t\t@IWorkspaceContextService contextService: IWorkspaceContextService,\n\t\t\t\t@IStorageService storageService: IStorageService,\n\t\t\t\t@IInstantiationService instantiationService: IInstantiationService,\n\t\t\t\t@IThemeService themeService: IThemeService,\n\t\t\t\t@IContextMenuService contextMenuService: IContextMenuService,\n\t\t\t\t@IExtensionService extensionService: IExtensionService,\n\t\t\t) {\n\t\t\t\tsuper(viewContainer.id, telemetryService, storageService, instantiationService, themeService, contextMenuService, extensionService, contextService);\n\t\t\t}\n\n\t\t\tprotected createViewPaneContainer(element: HTMLElement): ViewPaneContainer {\n\t\t\t\tconst viewPaneContainerDisposables = this._register(new DisposableStore());\n\n\t\t\t\t// Use composite's instantiation service to get the editor progress service for any editors instantiated within the composite\n\t\t\t\tconst viewPaneContainer = that.createViewPaneContainer(element, viewContainer, viewContainerLocation, viewPaneContainerDisposables, this.instantiationService);\n\n\t\t\t\t// Only updateTitleArea for non-filter views: microsoft/vscode-remote-release#3676\n\t\t\t\tif (!(viewPaneContainer instanceof FilterViewPaneContainer)) {\n\t\t\t\t\tviewPaneContainerDisposables.add(Event.any(viewPaneContainer.onDidAddViews, viewPaneContainer.onDidRemoveViews, viewPaneContainer.onTitleAreaUpdate)(() => {\n\t\t\t\t\t\t// Update title area since there is no better way to update secondary actions\n\t\t\t\t\t\tthis.updateTitleArea();\n\t\t\t\t\t}));\n\t\t\t\t}\n\n\t\t\t\treturn viewPaneContainer;\n\t\t\t}\n\t\t}\n\n\t\tRegistry.as<PaneCompositeRegistry>(getPaneCompositeExtension(viewContainerLocation)).registerPaneComposite(PaneCompositeDescriptor.create(\n\t\t\tPaneContainer,\n\t\t\tviewContainer.id,\n\t\t\ttypeof viewContainer.title === 'string' ? viewContainer.title : viewContainer.title.value,\n\t\t\tisString(viewContainer.icon) ? viewContainer.icon : undefined,\n\t\t\tviewContainer.order,\n\t\t\tviewContainer.requestedIndex,\n\t\t\tviewContainer.icon instanceof URI ? viewContainer.icon : undefined\n\t\t));\n\t}\n\n\tprivate deregisterPaneComposite(viewContainer: ViewContainer, viewContainerLocation: ViewContainerLocation): void {\n\t\tRegistry.as<PaneCompositeRegistry>(getPaneCompositeExtension(viewContainerLocation)).deregisterPaneComposite(viewContainer.id);\n\t}\n\n\tprivate createViewPaneContainer(element: HTMLElement, viewContainer: ViewContainer, viewContainerLocation: ViewContainerLocation, disposables: DisposableStore, instantiationService: IInstantiationService): ViewPaneContainer {\n\t\tconst viewPaneContainer: ViewPaneContainer = (instantiationService as any).createInstance(viewContainer.ctorDescriptor.ctor, ...(viewContainer.ctorDescriptor.staticArguments || []));\n\n\t\tthis.viewPaneContainers.set(viewPaneContainer.getId(), viewPaneContainer);\n\t\tdisposables.add(toDisposable(() => this.viewPaneContainers.delete(viewPaneContainer.getId())));\n\t\tdisposables.add(viewPaneContainer.onDidAddViews(views => this.onViewsAdded(views)));\n\t\tdisposables.add(viewPaneContainer.onDidChangeViewVisibility(view => this.onViewsVisibilityChanged(view, view.isBodyVisible())));\n\t\tdisposables.add(viewPaneContainer.onDidRemoveViews(views => this.onViewsRemoved(views)));\n\t\tdisposables.add(viewPaneContainer.onDidFocusView(view => {\n\t\t\tif (this.focusedViewContextKey.get() !== view.id) {\n\t\t\t\tthis.focusedViewContextKey.set(view.id);\n\t\t\t\tthis._onDidChangeFocusedView.fire();\n\t\t\t}\n\t\t}));\n\t\tdisposables.add(viewPaneContainer.onDidBlurView(view => {\n\t\t\tif (this.focusedViewContextKey.get() === view.id) {\n\t\t\t\tthis.focusedViewContextKey.reset();\n\t\t\t\tthis._onDidChangeFocusedView.fire();\n\t\t\t}\n\t\t}));\n\n\t\treturn viewPaneContainer;\n\t}\n}\n\nfunction getEnabledViewContainerContextKey(viewContainerId: string): string { return `viewContainer.${viewContainerId}.enabled`; }\n\nfunction getPaneCompositeExtension(viewContainerLocation: ViewContainerLocation): string {\n\tswitch (viewContainerLocation) {\n\t\tcase ViewContainerLocation.AuxiliaryBar:\n\t\t\treturn PaneCompositeExtensions.Auxiliary;\n\t\tcase ViewContainerLocation.Panel:\n\t\t\treturn PaneCompositeExtensions.Panels;\n\t\tcase ViewContainerLocation.Sidebar:\n\t\tdefault:\n\t\t\treturn PaneCompositeExtensions.Viewlets;\n\t}\n}\n\nexport function getPartByLocation(viewContainerLocation: ViewContainerLocation): Parts.AUXILIARYBAR_PART | Parts.SIDEBAR_PART | Parts.PANEL_PART {\n\tswitch (viewContainerLocation) {\n\t\tcase ViewContainerLocation.AuxiliaryBar:\n\t\t\treturn Parts.AUXILIARYBAR_PART;\n\t\tcase ViewContainerLocation.Panel:\n\t\t\treturn Parts.PANEL_PART;\n\t\tcase ViewContainerLocation.Sidebar:\n\t\tdefault:\n\t\t\treturn Parts.SIDEBAR_PART;\n\t}\n}\n\nregisterSingleton(IViewsService, ViewsService, InstantiationType.Eager /* Eager because it registers viewlets and panels in the constructor which are required during workbench layout */);\n"],
  "mappings": "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",
  "names": []
}
