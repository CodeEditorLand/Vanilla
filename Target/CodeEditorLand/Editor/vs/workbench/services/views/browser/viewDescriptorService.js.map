{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/views/browser/viewDescriptorService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { ViewContainerLocation, IViewDescriptorService, ViewContainer, IViewsRegistry, IViewContainersRegistry, IViewDescriptor, Extensions as ViewExtensions, ViewVisibilityState, defaultViewIcon, ViewContainerLocationToString, VIEWS_LOG_ID, VIEWS_LOG_NAME } from '../../../common/views.js';\nimport { IContextKey, RawContextKey, IContextKeyService, ContextKeyExpr } from '../../../../platform/contextkey/common/contextkey.js';\nimport { IStorageService, StorageScope, StorageTarget } from '../../../../platform/storage/common/storage.js';\nimport { IExtensionService } from '../../extensions/common/extensions.js';\nimport { Registry } from '../../../../platform/registry/common/platform.js';\nimport { toDisposable, DisposableStore, Disposable, IDisposable, DisposableMap } from '../../../../base/common/lifecycle.js';\nimport { ViewPaneContainer, ViewPaneContainerAction, ViewsSubMenu } from '../../../browser/parts/views/viewPaneContainer.js';\nimport { SyncDescriptor } from '../../../../platform/instantiation/common/descriptors.js';\nimport { InstantiationType, registerSingleton } from '../../../../platform/instantiation/common/extensions.js';\nimport { Event, Emitter } from '../../../../base/common/event.js';\nimport { ITelemetryService } from '../../../../platform/telemetry/common/telemetry.js';\nimport { generateUuid } from '../../../../base/common/uuid.js';\nimport { IInstantiationService, ServicesAccessor } from '../../../../platform/instantiation/common/instantiation.js';\nimport { getViewsStateStorageId, ViewContainerModel } from '../common/viewContainerModel.js';\nimport { registerAction2, Action2, MenuId } from '../../../../platform/actions/common/actions.js';\nimport { localize, localize2 } from '../../../../nls.js';\nimport { IStringDictionary } from '../../../../base/common/collections.js';\nimport { ILogger, ILoggerService } from '../../../../platform/log/common/log.js';\nimport { Lazy } from '../../../../base/common/lazy.js';\n\ninterface IViewsCustomizations {\n\tviewContainerLocations: IStringDictionary<ViewContainerLocation>;\n\tviewLocations: IStringDictionary<string>;\n\tviewContainerBadgeEnablementStates: IStringDictionary<boolean>;\n}\n\nfunction getViewContainerStorageId(viewContainerId: string): string { return `${viewContainerId}.state`; }\n\nexport class ViewDescriptorService extends Disposable implements IViewDescriptorService {\n\n\tdeclare readonly _serviceBrand: undefined;\n\n\tprivate static readonly VIEWS_CUSTOMIZATIONS = 'views.customizations';\n\tprivate static readonly COMMON_CONTAINER_ID_PREFIX = 'workbench.views.service';\n\n\tprivate readonly _onDidChangeContainer: Emitter<{ views: IViewDescriptor[]; from: ViewContainer; to: ViewContainer }> = this._register(new Emitter<{ views: IViewDescriptor[]; from: ViewContainer; to: ViewContainer }>());\n\treadonly onDidChangeContainer: Event<{ views: IViewDescriptor[]; from: ViewContainer; to: ViewContainer }> = this._onDidChangeContainer.event;\n\n\tprivate readonly _onDidChangeLocation: Emitter<{ views: IViewDescriptor[]; from: ViewContainerLocation; to: ViewContainerLocation }> = this._register(new Emitter<{ views: IViewDescriptor[]; from: ViewContainerLocation; to: ViewContainerLocation }>());\n\treadonly onDidChangeLocation: Event<{ views: IViewDescriptor[]; from: ViewContainerLocation; to: ViewContainerLocation }> = this._onDidChangeLocation.event;\n\n\tprivate readonly _onDidChangeContainerLocation: Emitter<{ viewContainer: ViewContainer; from: ViewContainerLocation; to: ViewContainerLocation }> = this._register(new Emitter<{ viewContainer: ViewContainer; from: ViewContainerLocation; to: ViewContainerLocation }>());\n\treadonly onDidChangeContainerLocation: Event<{ viewContainer: ViewContainer; from: ViewContainerLocation; to: ViewContainerLocation }> = this._onDidChangeContainerLocation.event;\n\n\tprivate readonly viewContainerModels = this._register(new DisposableMap<ViewContainer, { viewContainerModel: ViewContainerModel; disposables: DisposableStore } & IDisposable>());\n\tprivate readonly viewsVisibilityActionDisposables = this._register(new DisposableMap<ViewContainer, IDisposable>());\n\tprivate canRegisterViewsVisibilityActions: boolean = false;\n\tprivate readonly activeViewContextKeys: Map<string, IContextKey<boolean>>;\n\tprivate readonly movableViewContextKeys: Map<string, IContextKey<boolean>>;\n\tprivate readonly defaultViewLocationContextKeys: Map<string, IContextKey<boolean>>;\n\tprivate readonly defaultViewContainerLocationContextKeys: Map<string, IContextKey<boolean>>;\n\n\tprivate readonly viewsRegistry: IViewsRegistry;\n\tprivate readonly viewContainersRegistry: IViewContainersRegistry;\n\n\tprivate viewContainersCustomLocations: Map<string, ViewContainerLocation>;\n\tprivate viewDescriptorsCustomLocations: Map<string, string>;\n\tprivate viewContainerBadgeEnablementStates: Map<string, boolean>;\n\n\tprivate readonly _onDidChangeViewContainers = this._register(new Emitter<{ added: ReadonlyArray<{ container: ViewContainer; location: ViewContainerLocation }>; removed: ReadonlyArray<{ container: ViewContainer; location: ViewContainerLocation }> }>());\n\treadonly onDidChangeViewContainers = this._onDidChangeViewContainers.event;\n\tget viewContainers(): ReadonlyArray<ViewContainer> { return this.viewContainersRegistry.all; }\n\n\tprivate readonly logger: Lazy<ILogger>;\n\n\tconstructor(\n\t\t@IInstantiationService private readonly instantiationService: IInstantiationService,\n\t\t@IContextKeyService private readonly contextKeyService: IContextKeyService,\n\t\t@IStorageService private readonly storageService: IStorageService,\n\t\t@IExtensionService private readonly extensionService: IExtensionService,\n\t\t@ITelemetryService private readonly telemetryService: ITelemetryService,\n\t\t@ILoggerService loggerService: ILoggerService,\n\t) {\n\t\tsuper();\n\n\t\tthis.logger = new Lazy(() => loggerService.createLogger(VIEWS_LOG_ID, { name: VIEWS_LOG_NAME, hidden: true }));\n\n\t\tthis.activeViewContextKeys = new Map<string, IContextKey<boolean>>();\n\t\tthis.movableViewContextKeys = new Map<string, IContextKey<boolean>>();\n\t\tthis.defaultViewLocationContextKeys = new Map<string, IContextKey<boolean>>();\n\t\tthis.defaultViewContainerLocationContextKeys = new Map<string, IContextKey<boolean>>();\n\n\t\tthis.viewContainersRegistry = Registry.as<IViewContainersRegistry>(ViewExtensions.ViewContainersRegistry);\n\t\tthis.viewsRegistry = Registry.as<IViewsRegistry>(ViewExtensions.ViewsRegistry);\n\n\t\tthis.migrateToViewsCustomizationsStorage();\n\t\tthis.viewContainersCustomLocations = new Map<string, ViewContainerLocation>(Object.entries(this.viewCustomizations.viewContainerLocations));\n\t\tthis.viewDescriptorsCustomLocations = new Map<string, string>(Object.entries(this.viewCustomizations.viewLocations));\n\t\tthis.viewContainerBadgeEnablementStates = new Map<string, boolean>(Object.entries(this.viewCustomizations.viewContainerBadgeEnablementStates));\n\n\t\t// Register all containers that were registered before this ctor\n\t\tthis.viewContainers.forEach(viewContainer => this.onDidRegisterViewContainer(viewContainer));\n\n\t\tthis._register(this.viewsRegistry.onViewsRegistered(views => this.onDidRegisterViews(views)));\n\t\tthis._register(this.viewsRegistry.onViewsDeregistered(({ views, viewContainer }) => this.onDidDeregisterViews(views, viewContainer)));\n\n\t\tthis._register(this.viewsRegistry.onDidChangeContainer(({ views, from, to }) => this.onDidChangeDefaultContainer(views, from, to)));\n\n\t\tthis._register(this.viewContainersRegistry.onDidRegister(({ viewContainer }) => {\n\t\t\tthis.onDidRegisterViewContainer(viewContainer);\n\t\t\tthis._onDidChangeViewContainers.fire({ added: [{ container: viewContainer, location: this.getViewContainerLocation(viewContainer) }], removed: [] });\n\t\t}));\n\n\t\tthis._register(this.viewContainersRegistry.onDidDeregister(({ viewContainer, viewContainerLocation }) => {\n\t\t\tthis.onDidDeregisterViewContainer(viewContainer);\n\t\t\tthis._onDidChangeViewContainers.fire({ removed: [{ container: viewContainer, location: viewContainerLocation }], added: [] });\n\t\t}));\n\n\t\tthis._register(this.storageService.onDidChangeValue(StorageScope.PROFILE, ViewDescriptorService.VIEWS_CUSTOMIZATIONS, this._register(new DisposableStore()))(() => this.onDidStorageChange()));\n\n\t\tthis.extensionService.whenInstalledExtensionsRegistered().then(() => this.whenExtensionsRegistered());\n\n\t}\n\n\tprivate migrateToViewsCustomizationsStorage(): void {\n\t\tif (this.storageService.get(ViewDescriptorService.VIEWS_CUSTOMIZATIONS, StorageScope.PROFILE)) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst viewContainerLocationsValue = this.storageService.get('views.cachedViewContainerLocations', StorageScope.PROFILE);\n\t\tconst viewDescriptorLocationsValue = this.storageService.get('views.cachedViewPositions', StorageScope.PROFILE);\n\t\tif (!viewContainerLocationsValue && !viewDescriptorLocationsValue) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst viewContainerLocations: [string, ViewContainerLocation][] = viewContainerLocationsValue ? JSON.parse(viewContainerLocationsValue) : [];\n\t\tconst viewDescriptorLocations: [string, { containerId: string }][] = viewDescriptorLocationsValue ? JSON.parse(viewDescriptorLocationsValue) : [];\n\t\tconst viewsCustomizations: IViewsCustomizations = {\n\t\t\tviewContainerLocations: viewContainerLocations.reduce<IStringDictionary<ViewContainerLocation>>((result, [id, location]) => { result[id] = location; return result; }, {}),\n\t\t\tviewLocations: viewDescriptorLocations.reduce<IStringDictionary<string>>((result, [id, { containerId }]) => { result[id] = containerId; return result; }, {}),\n\t\t\tviewContainerBadgeEnablementStates: {}\n\t\t};\n\t\tthis.storageService.store(ViewDescriptorService.VIEWS_CUSTOMIZATIONS, JSON.stringify(viewsCustomizations), StorageScope.PROFILE, StorageTarget.USER);\n\t\tthis.storageService.remove('views.cachedViewContainerLocations', StorageScope.PROFILE);\n\t\tthis.storageService.remove('views.cachedViewPositions', StorageScope.PROFILE);\n\t}\n\n\tprivate registerGroupedViews(groupedViews: Map<string, IViewDescriptor[]>): void {\n\t\tfor (const [containerId, views] of groupedViews.entries()) {\n\t\t\tconst viewContainer = this.viewContainersRegistry.get(containerId);\n\n\t\t\t// The container has not been registered yet\n\t\t\tif (!viewContainer || !this.viewContainerModels.has(viewContainer)) {\n\t\t\t\t// Register if the container is a genarated container\n\t\t\t\tif (this.isGeneratedContainerId(containerId)) {\n\t\t\t\t\tconst viewContainerLocation = this.viewContainersCustomLocations.get(containerId);\n\t\t\t\t\tif (viewContainerLocation !== undefined) {\n\t\t\t\t\t\tthis.registerGeneratedViewContainer(viewContainerLocation, containerId);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t// Registration of the container handles registration of its views\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// Filter out views that have already been added to the view container model\n\t\t\t// This is needed when statically-registered views are moved to\n\t\t\t// other statically registered containers as they will both try to add on startup\n\t\t\tconst viewsToAdd = views.filter(view => this.getViewContainerModel(viewContainer).allViewDescriptors.filter(vd => vd.id === view.id).length === 0);\n\t\t\tthis.addViews(viewContainer, viewsToAdd);\n\t\t}\n\t}\n\n\tprivate deregisterGroupedViews(groupedViews: Map<string, IViewDescriptor[]>): void {\n\t\tfor (const [viewContainerId, views] of groupedViews.entries()) {\n\t\t\tconst viewContainer = this.viewContainersRegistry.get(viewContainerId);\n\n\t\t\t// The container has not been registered yet\n\t\t\tif (!viewContainer || !this.viewContainerModels.has(viewContainer)) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tthis.removeViews(viewContainer, views);\n\t\t}\n\t}\n\n\tprivate moveOrphanViewsToDefaultLocation(): void {\n\t\tfor (const [viewId, containerId] of this.viewDescriptorsCustomLocations.entries()) {\n\t\t\t// check if the view container exists\n\t\t\tif (this.viewContainersRegistry.get(containerId)) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// check if view has been registered to default location\n\t\t\tconst viewContainer = this.viewsRegistry.getViewContainer(viewId);\n\t\t\tconst viewDescriptor = this.getViewDescriptorById(viewId);\n\t\t\tif (viewContainer && viewDescriptor) {\n\t\t\t\tthis.addViews(viewContainer, [viewDescriptor]);\n\t\t\t}\n\t\t}\n\t}\n\n\twhenExtensionsRegistered(): void {\n\n\t\t// Handle those views whose custom parent view container does not exist anymore\n\t\t// May be the extension contributing this view container is no longer installed\n\t\t// Or the parent view container is generated and no longer available.\n\t\tthis.moveOrphanViewsToDefaultLocation();\n\n\t\t// Clean up empty generated view containers\n\t\tfor (const viewContainerId of [...this.viewContainersCustomLocations.keys()]) {\n\t\t\tthis.cleanUpGeneratedViewContainer(viewContainerId);\n\t\t}\n\n\t\t// Save updated view customizations after cleanup\n\t\tthis.saveViewCustomizations();\n\n\t\t// Register visibility actions for all views\n\t\tfor (const [key, value] of this.viewContainerModels) {\n\t\t\tthis.registerViewsVisibilityActions(key, value);\n\t\t}\n\t\tthis.canRegisterViewsVisibilityActions = true;\n\t}\n\n\tprivate onDidRegisterViews(views: { views: IViewDescriptor[]; viewContainer: ViewContainer }[]): void {\n\t\tthis.contextKeyService.bufferChangeEvents(() => {\n\t\t\tviews.forEach(({ views, viewContainer }) => {\n\t\t\t\t// When views are registered, we need to regroup them based on the customizations\n\t\t\t\tconst regroupedViews = this.regroupViews(viewContainer.id, views);\n\n\t\t\t\t// Once they are grouped, try registering them which occurs\n\t\t\t\t// if the container has already been registered within this service\n\t\t\t\t// or we can generate the container from the source view id\n\t\t\t\tthis.registerGroupedViews(regroupedViews);\n\n\t\t\t\tviews.forEach(viewDescriptor => this.getOrCreateMovableViewContextKey(viewDescriptor).set(!!viewDescriptor.canMoveView));\n\t\t\t});\n\t\t});\n\t}\n\n\tprivate isGeneratedContainerId(id: string): boolean {\n\t\treturn id.startsWith(ViewDescriptorService.COMMON_CONTAINER_ID_PREFIX);\n\t}\n\n\tprivate onDidDeregisterViews(views: IViewDescriptor[], viewContainer: ViewContainer): void {\n\t\t// When views are registered, we need to regroup them based on the customizations\n\t\tconst regroupedViews = this.regroupViews(viewContainer.id, views);\n\t\tthis.deregisterGroupedViews(regroupedViews);\n\t\tthis.contextKeyService.bufferChangeEvents(() => {\n\t\t\tviews.forEach(viewDescriptor => this.getOrCreateMovableViewContextKey(viewDescriptor).set(false));\n\t\t});\n\t}\n\n\tprivate regroupViews(containerId: string, views: IViewDescriptor[]): Map<string, IViewDescriptor[]> {\n\t\tconst viewsByContainer = new Map<string, IViewDescriptor[]>();\n\n\t\tfor (const viewDescriptor of views) {\n\t\t\tconst correctContainerId = this.viewDescriptorsCustomLocations.get(viewDescriptor.id) ?? containerId;\n\t\t\tlet containerViews = viewsByContainer.get(correctContainerId);\n\t\t\tif (!containerViews) {\n\t\t\t\tviewsByContainer.set(correctContainerId, containerViews = []);\n\t\t\t}\n\t\t\tcontainerViews.push(viewDescriptor);\n\t\t}\n\n\t\treturn viewsByContainer;\n\t}\n\n\tgetViewDescriptorById(viewId: string): IViewDescriptor | null {\n\t\treturn this.viewsRegistry.getView(viewId);\n\t}\n\n\tgetViewLocationById(viewId: string): ViewContainerLocation | null {\n\t\tconst container = this.getViewContainerByViewId(viewId);\n\t\tif (container === null) {\n\t\t\treturn null;\n\t\t}\n\n\t\treturn this.getViewContainerLocation(container);\n\t}\n\n\tgetViewContainerByViewId(viewId: string): ViewContainer | null {\n\t\tconst containerId = this.viewDescriptorsCustomLocations.get(viewId);\n\n\t\treturn containerId ?\n\t\t\tthis.viewContainersRegistry.get(containerId) ?? null :\n\t\t\tthis.getDefaultContainerById(viewId);\n\t}\n\n\tgetViewContainerLocation(viewContainer: ViewContainer): ViewContainerLocation {\n\t\treturn this.viewContainersCustomLocations.get(viewContainer.id) ?? this.getDefaultViewContainerLocation(viewContainer);\n\t}\n\n\tgetDefaultViewContainerLocation(viewContainer: ViewContainer): ViewContainerLocation {\n\t\treturn this.viewContainersRegistry.getViewContainerLocation(viewContainer);\n\t}\n\n\tgetDefaultContainerById(viewId: string): ViewContainer | null {\n\t\treturn this.viewsRegistry.getViewContainer(viewId) ?? null;\n\t}\n\n\tgetViewContainerModel(container: ViewContainer): ViewContainerModel {\n\t\treturn this.getOrRegisterViewContainerModel(container);\n\t}\n\n\tgetViewContainerById(id: string): ViewContainer | null {\n\t\treturn this.viewContainersRegistry.get(id) || null;\n\t}\n\n\tgetViewContainersByLocation(location: ViewContainerLocation): ViewContainer[] {\n\t\treturn this.viewContainers.filter(v => this.getViewContainerLocation(v) === location);\n\t}\n\n\tgetDefaultViewContainer(location: ViewContainerLocation): ViewContainer | undefined {\n\t\treturn this.viewContainersRegistry.getDefaultViewContainer(location);\n\t}\n\n\tmoveViewContainerToLocation(viewContainer: ViewContainer, location: ViewContainerLocation, requestedIndex?: number, reason?: string): void {\n\t\tthis.logger.value.info(`moveViewContainerToLocation: viewContainer:${viewContainer.id} location:${location} reason:${reason}`);\n\t\tthis.moveViewContainerToLocationWithoutSaving(viewContainer, location, requestedIndex);\n\t\tthis.saveViewCustomizations();\n\t}\n\n\tgetViewContainerBadgeEnablementState(id: string): boolean {\n\t\treturn this.viewContainerBadgeEnablementStates.get(id) ?? true;\n\t}\n\n\tsetViewContainerBadgeEnablementState(id: string, badgesEnabled: boolean): void {\n\t\tthis.viewContainerBadgeEnablementStates.set(id, badgesEnabled);\n\t\tthis.saveViewCustomizations();\n\t}\n\n\tmoveViewToLocation(view: IViewDescriptor, location: ViewContainerLocation, reason?: string): void {\n\t\tthis.logger.value.info(`moveViewToLocation: view:${view.id} location:${location} reason:${reason}`);\n\t\tconst container = this.registerGeneratedViewContainer(location);\n\t\tthis.moveViewsToContainer([view], container);\n\t}\n\n\tmoveViewsToContainer(views: IViewDescriptor[], viewContainer: ViewContainer, visibilityState?: ViewVisibilityState, reason?: string): void {\n\t\tif (!views.length) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.logger.value.info(`moveViewsToContainer: views:${views.map(view => view.id).join(',')} viewContainer:${viewContainer.id} reason:${reason}`);\n\n\t\tconst from = this.getViewContainerByViewId(views[0].id);\n\t\tconst to = viewContainer;\n\n\t\tif (from && to && from !== to) {\n\t\t\t// Move views\n\t\t\tthis.moveViewsWithoutSaving(views, from, to, visibilityState);\n\t\t\tthis.cleanUpGeneratedViewContainer(from.id);\n\n\t\t\t// Save new locations\n\t\t\tthis.saveViewCustomizations();\n\n\t\t\t// Log to telemetry\n\t\t\tthis.reportMovedViews(views, from, to);\n\t\t}\n\t}\n\n\treset(): void {\n\t\tfor (const viewContainer of this.viewContainers) {\n\t\t\tconst viewContainerModel = this.getViewContainerModel(viewContainer);\n\n\t\t\tfor (const viewDescriptor of viewContainerModel.allViewDescriptors) {\n\t\t\t\tconst defaultContainer = this.getDefaultContainerById(viewDescriptor.id);\n\t\t\t\tconst currentContainer = this.getViewContainerByViewId(viewDescriptor.id);\n\t\t\t\tif (currentContainer && defaultContainer && currentContainer !== defaultContainer) {\n\t\t\t\t\tthis.moveViewsWithoutSaving([viewDescriptor], currentContainer, defaultContainer);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst defaultContainerLocation = this.getDefaultViewContainerLocation(viewContainer);\n\t\t\tconst currentContainerLocation = this.getViewContainerLocation(viewContainer);\n\t\t\tif (defaultContainerLocation !== null && currentContainerLocation !== defaultContainerLocation) {\n\t\t\t\tthis.moveViewContainerToLocationWithoutSaving(viewContainer, defaultContainerLocation);\n\t\t\t}\n\n\t\t\tthis.cleanUpGeneratedViewContainer(viewContainer.id);\n\t\t}\n\n\t\tthis.viewContainersCustomLocations.clear();\n\t\tthis.viewDescriptorsCustomLocations.clear();\n\t\tthis.saveViewCustomizations();\n\t}\n\n\tisViewContainerRemovedPermanently(viewContainerId: string): boolean {\n\t\treturn this.isGeneratedContainerId(viewContainerId) && !this.viewContainersCustomLocations.has(viewContainerId);\n\t}\n\n\tprivate onDidChangeDefaultContainer(views: IViewDescriptor[], from: ViewContainer, to: ViewContainer): void {\n\t\tconst viewsToMove = views.filter(view =>\n\t\t\t!this.viewDescriptorsCustomLocations.has(view.id) // Move views which are not already moved\n\t\t\t|| (!this.viewContainers.includes(from) && this.viewDescriptorsCustomLocations.get(view.id) === from.id) // Move views which are moved from a removed container\n\t\t);\n\t\tif (viewsToMove.length) {\n\t\t\tthis.moveViewsWithoutSaving(viewsToMove, from, to);\n\t\t}\n\t}\n\n\tprivate reportMovedViews(views: IViewDescriptor[], from: ViewContainer, to: ViewContainer): void {\n\t\tconst containerToString = (container: ViewContainer): string => {\n\t\t\tif (container.id.startsWith(ViewDescriptorService.COMMON_CONTAINER_ID_PREFIX)) {\n\t\t\t\treturn 'custom';\n\t\t\t}\n\n\t\t\tif (!container.extensionId) {\n\t\t\t\treturn container.id;\n\t\t\t}\n\n\t\t\treturn 'extension';\n\t\t};\n\n\t\tconst oldLocation = this.getViewContainerLocation(from);\n\t\tconst newLocation = this.getViewContainerLocation(to);\n\t\tconst viewCount = views.length;\n\t\tconst fromContainer = containerToString(from);\n\t\tconst toContainer = containerToString(to);\n\t\tconst fromLocation = oldLocation === ViewContainerLocation.Panel ? 'panel' : 'sidebar';\n\t\tconst toLocation = newLocation === ViewContainerLocation.Panel ? 'panel' : 'sidebar';\n\n\t\tinterface ViewDescriptorServiceMoveViewsEvent {\n\t\t\tviewCount: number;\n\t\t\tfromContainer: string;\n\t\t\ttoContainer: string;\n\t\t\tfromLocation: string;\n\t\t\ttoLocation: string;\n\t\t}\n\n\t\ttype ViewDescriptorServiceMoveViewsClassification = {\n\t\t\towner: 'sbatten';\n\t\t\tcomment: 'Logged when views are moved from one view container to another';\n\t\t\tviewCount: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'The number of views moved' };\n\t\t\tfromContainer: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'The starting view container of the moved views' };\n\t\t\ttoContainer: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'The destination view container of the moved views' };\n\t\t\tfromLocation: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'The location of the starting view container. e.g. Primary Side Bar' };\n\t\t\ttoLocation: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'The location of the destination view container. e.g. Panel' };\n\t\t};\n\n\t\tthis.telemetryService.publicLog2<ViewDescriptorServiceMoveViewsEvent, ViewDescriptorServiceMoveViewsClassification>('viewDescriptorService.moveViews', { viewCount, fromContainer, toContainer, fromLocation, toLocation });\n\t}\n\n\tprivate moveViewsWithoutSaving(views: IViewDescriptor[], from: ViewContainer, to: ViewContainer, visibilityState: ViewVisibilityState = ViewVisibilityState.Expand): void {\n\t\tthis.removeViews(from, views);\n\t\tthis.addViews(to, views, visibilityState);\n\n\t\tconst oldLocation = this.getViewContainerLocation(from);\n\t\tconst newLocation = this.getViewContainerLocation(to);\n\n\t\tif (oldLocation !== newLocation) {\n\t\t\tthis._onDidChangeLocation.fire({ views, from: oldLocation, to: newLocation });\n\t\t}\n\n\t\tthis._onDidChangeContainer.fire({ views, from, to });\n\t}\n\n\tprivate moveViewContainerToLocationWithoutSaving(viewContainer: ViewContainer, location: ViewContainerLocation, requestedIndex?: number): void {\n\t\tconst from = this.getViewContainerLocation(viewContainer);\n\t\tconst to = location;\n\t\tif (from !== to) {\n\t\t\tconst isGeneratedViewContainer = this.isGeneratedContainerId(viewContainer.id);\n\t\t\tconst isDefaultViewContainerLocation = to === this.getDefaultViewContainerLocation(viewContainer);\n\t\t\tif (isGeneratedViewContainer || !isDefaultViewContainerLocation) {\n\t\t\t\tthis.viewContainersCustomLocations.set(viewContainer.id, to);\n\t\t\t} else {\n\t\t\t\tthis.viewContainersCustomLocations.delete(viewContainer.id);\n\t\t\t}\n\t\t\tthis.getOrCreateDefaultViewContainerLocationContextKey(viewContainer).set(isGeneratedViewContainer || isDefaultViewContainerLocation);\n\n\t\t\tviewContainer.requestedIndex = requestedIndex;\n\t\t\tthis._onDidChangeContainerLocation.fire({ viewContainer, from, to });\n\n\t\t\tconst views = this.getViewsByContainer(viewContainer);\n\t\t\tthis._onDidChangeLocation.fire({ views, from, to });\n\t\t}\n\t}\n\n\tprivate cleanUpGeneratedViewContainer(viewContainerId: string): void {\n\t\t// Skip if container is not generated\n\t\tif (!this.isGeneratedContainerId(viewContainerId)) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Skip if container has views registered\n\t\tconst viewContainer = this.getViewContainerById(viewContainerId);\n\t\tif (viewContainer && this.getViewContainerModel(viewContainer)?.allViewDescriptors.length) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Skip if container has moved views\n\t\tif ([...this.viewDescriptorsCustomLocations.values()].includes(viewContainerId)) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Deregister the container\n\t\tif (viewContainer) {\n\t\t\tthis.viewContainersRegistry.deregisterViewContainer(viewContainer);\n\t\t}\n\n\t\tthis.viewContainersCustomLocations.delete(viewContainerId);\n\t\tthis.viewContainerBadgeEnablementStates.delete(viewContainerId);\n\n\t\t// Clean up caches of container\n\t\tthis.storageService.remove(getViewsStateStorageId(viewContainer?.storageId || getViewContainerStorageId(viewContainerId)), StorageScope.PROFILE);\n\t}\n\n\tprivate registerGeneratedViewContainer(location: ViewContainerLocation, existingId?: string): ViewContainer {\n\t\tconst id = existingId || this.generateContainerId(location);\n\n\t\tconst container = this.viewContainersRegistry.registerViewContainer({\n\t\t\tid,\n\t\t\tctorDescriptor: new SyncDescriptor(ViewPaneContainer, [id, { mergeViewWithContainerWhenSingleView: true }]),\n\t\t\ttitle: { value: id, original: id }, // we don't want to see this so using id\n\t\t\ticon: location === ViewContainerLocation.Sidebar ? defaultViewIcon : undefined,\n\t\t\tstorageId: getViewContainerStorageId(id),\n\t\t\thideIfEmpty: true\n\t\t}, location, { doNotRegisterOpenCommand: true });\n\n\t\tif (this.viewContainersCustomLocations.get(container.id) !== location) {\n\t\t\tthis.viewContainersCustomLocations.set(container.id, location);\n\t\t}\n\n\t\tthis.getOrCreateDefaultViewContainerLocationContextKey(container).set(true);\n\n\t\treturn container;\n\t}\n\n\tprivate onDidStorageChange(): void {\n\t\tif (JSON.stringify(this.viewCustomizations) !== this.getStoredViewCustomizationsValue() /* This checks if current window changed the value or not */) {\n\t\t\tthis.onDidViewCustomizationsStorageChange();\n\t\t}\n\t}\n\n\tprivate onDidViewCustomizationsStorageChange(): void {\n\t\tthis._viewCustomizations = undefined;\n\n\t\tconst newViewContainerCustomizations = new Map<string, ViewContainerLocation>(Object.entries(this.viewCustomizations.viewContainerLocations));\n\t\tconst newViewDescriptorCustomizations = new Map<string, string>(Object.entries(this.viewCustomizations.viewLocations));\n\t\tconst viewContainersToMove: [ViewContainer, ViewContainerLocation][] = [];\n\t\tconst viewsToMove: { views: IViewDescriptor[]; from: ViewContainer; to: ViewContainer }[] = [];\n\n\t\tfor (const [containerId, location] of newViewContainerCustomizations.entries()) {\n\t\t\tconst container = this.getViewContainerById(containerId);\n\t\t\tif (container) {\n\t\t\t\tif (location !== this.getViewContainerLocation(container)) {\n\t\t\t\t\tviewContainersToMove.push([container, location]);\n\t\t\t\t}\n\t\t\t}\n\t\t\t// If the container is generated and not registered, we register it now\n\t\t\telse if (this.isGeneratedContainerId(containerId)) {\n\t\t\t\tthis.registerGeneratedViewContainer(location, containerId);\n\t\t\t}\n\t\t}\n\n\t\tfor (const viewContainer of this.viewContainers) {\n\t\t\tif (!newViewContainerCustomizations.has(viewContainer.id)) {\n\t\t\t\tconst currentLocation = this.getViewContainerLocation(viewContainer);\n\t\t\t\tconst defaultLocation = this.getDefaultViewContainerLocation(viewContainer);\n\t\t\t\tif (currentLocation !== defaultLocation) {\n\t\t\t\t\tviewContainersToMove.push([viewContainer, defaultLocation]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tfor (const [viewId, viewContainerId] of newViewDescriptorCustomizations.entries()) {\n\t\t\tconst viewDescriptor = this.getViewDescriptorById(viewId);\n\t\t\tif (viewDescriptor) {\n\t\t\t\tconst prevViewContainer = this.getViewContainerByViewId(viewId);\n\t\t\t\tconst newViewContainer = this.viewContainersRegistry.get(viewContainerId);\n\t\t\t\tif (prevViewContainer && newViewContainer && newViewContainer !== prevViewContainer) {\n\t\t\t\t\tviewsToMove.push({ views: [viewDescriptor], from: prevViewContainer, to: newViewContainer });\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// If a value is not present in the cache, it must be reset to default\n\t\tfor (const viewContainer of this.viewContainers) {\n\t\t\tconst viewContainerModel = this.getViewContainerModel(viewContainer);\n\t\t\tfor (const viewDescriptor of viewContainerModel.allViewDescriptors) {\n\t\t\t\tif (!newViewDescriptorCustomizations.has(viewDescriptor.id)) {\n\t\t\t\t\tconst currentContainer = this.getViewContainerByViewId(viewDescriptor.id);\n\t\t\t\t\tconst defaultContainer = this.getDefaultContainerById(viewDescriptor.id);\n\t\t\t\t\tif (currentContainer && defaultContainer && currentContainer !== defaultContainer) {\n\t\t\t\t\t\tviewsToMove.push({ views: [viewDescriptor], from: currentContainer, to: defaultContainer });\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Execute View Container Movements\n\t\tfor (const [container, location] of viewContainersToMove) {\n\t\t\tthis.moveViewContainerToLocationWithoutSaving(container, location);\n\t\t}\n\t\t// Execute View Movements\n\t\tfor (const { views, from, to } of viewsToMove) {\n\t\t\tthis.moveViewsWithoutSaving(views, from, to, ViewVisibilityState.Default);\n\t\t}\n\n\t\tthis.viewContainersCustomLocations = newViewContainerCustomizations;\n\t\tthis.viewDescriptorsCustomLocations = newViewDescriptorCustomizations;\n\t}\n\n\t// Generated Container Id Format\n\t// {Common Prefix}.{Location}.{Uniqueness Id}\n\t// Old Format (deprecated)\n\t// {Common Prefix}.{Uniqueness Id}.{Source View Id}\n\tprivate generateContainerId(location: ViewContainerLocation): string {\n\t\treturn `${ViewDescriptorService.COMMON_CONTAINER_ID_PREFIX}.${ViewContainerLocationToString(location)}.${generateUuid()}`;\n\t}\n\n\tprivate saveViewCustomizations(): void {\n\t\tconst viewCustomizations: IViewsCustomizations = { viewContainerLocations: {}, viewLocations: {}, viewContainerBadgeEnablementStates: {} };\n\n\t\tfor (const [containerId, location] of this.viewContainersCustomLocations) {\n\t\t\tconst container = this.getViewContainerById(containerId);\n\t\t\t// Skip if the view container is not a generated container and in default location\n\t\t\tif (container && !this.isGeneratedContainerId(containerId) && location === this.getDefaultViewContainerLocation(container)) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tviewCustomizations.viewContainerLocations[containerId] = location;\n\t\t}\n\n\t\tfor (const [viewId, viewContainerId] of this.viewDescriptorsCustomLocations) {\n\t\t\tconst viewContainer = this.getViewContainerById(viewContainerId);\n\t\t\tif (viewContainer) {\n\t\t\t\tconst defaultContainer = this.getDefaultContainerById(viewId);\n\t\t\t\t// Skip if the view is at default location\n\t\t\t\t// https://github.com/microsoft/vscode/issues/90414\n\t\t\t\tif (defaultContainer?.id === viewContainer.id) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t}\n\t\t\tviewCustomizations.viewLocations[viewId] = viewContainerId;\n\t\t}\n\n\t\t// Loop through viewContainerBadgeEnablementStates and save only the ones that are disabled\n\t\tfor (const [viewContainerId, badgeEnablementState] of this.viewContainerBadgeEnablementStates) {\n\t\t\tif (badgeEnablementState === false) {\n\t\t\t\tviewCustomizations.viewContainerBadgeEnablementStates[viewContainerId] = badgeEnablementState;\n\t\t\t}\n\t\t}\n\t\tthis.viewCustomizations = viewCustomizations;\n\t}\n\n\tprivate _viewCustomizations: IViewsCustomizations | undefined;\n\tprivate get viewCustomizations(): IViewsCustomizations {\n\t\tif (!this._viewCustomizations) {\n\t\t\tthis._viewCustomizations = JSON.parse(this.getStoredViewCustomizationsValue()) as IViewsCustomizations;\n\t\t\tthis._viewCustomizations.viewContainerLocations = this._viewCustomizations.viewContainerLocations ?? {};\n\t\t\tthis._viewCustomizations.viewLocations = this._viewCustomizations.viewLocations ?? {};\n\t\t\tthis._viewCustomizations.viewContainerBadgeEnablementStates = this._viewCustomizations.viewContainerBadgeEnablementStates ?? {};\n\t\t}\n\t\treturn this._viewCustomizations;\n\t}\n\n\tprivate set viewCustomizations(viewCustomizations: IViewsCustomizations) {\n\t\tconst value = JSON.stringify(viewCustomizations);\n\t\tif (JSON.stringify(this.viewCustomizations) !== value) {\n\t\t\tthis._viewCustomizations = viewCustomizations;\n\t\t\tthis.setStoredViewCustomizationsValue(value);\n\t\t}\n\t}\n\n\tprivate getStoredViewCustomizationsValue(): string {\n\t\treturn this.storageService.get(ViewDescriptorService.VIEWS_CUSTOMIZATIONS, StorageScope.PROFILE, '{}');\n\t}\n\n\tprivate setStoredViewCustomizationsValue(value: string): void {\n\t\tthis.storageService.store(ViewDescriptorService.VIEWS_CUSTOMIZATIONS, value, StorageScope.PROFILE, StorageTarget.USER);\n\t}\n\n\tprivate getViewsByContainer(viewContainer: ViewContainer): IViewDescriptor[] {\n\t\tconst result = this.viewsRegistry.getViews(viewContainer).filter(viewDescriptor => {\n\t\t\tconst viewDescriptorViewContainerId = this.viewDescriptorsCustomLocations.get(viewDescriptor.id) ?? viewContainer.id;\n\t\t\treturn viewDescriptorViewContainerId === viewContainer.id;\n\t\t});\n\n\t\tfor (const [viewId, viewContainerId] of this.viewDescriptorsCustomLocations.entries()) {\n\t\t\tif (viewContainerId !== viewContainer.id) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif (this.viewsRegistry.getViewContainer(viewId) === viewContainer) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tconst viewDescriptor = this.getViewDescriptorById(viewId);\n\t\t\tif (viewDescriptor) {\n\t\t\t\tresult.push(viewDescriptor);\n\t\t\t}\n\t\t}\n\n\t\treturn result;\n\t}\n\n\tprivate onDidRegisterViewContainer(viewContainer: ViewContainer): void {\n\t\tconst defaultLocation = this.isGeneratedContainerId(viewContainer.id) ? true : this.getViewContainerLocation(viewContainer) === this.getDefaultViewContainerLocation(viewContainer);\n\t\tthis.getOrCreateDefaultViewContainerLocationContextKey(viewContainer).set(defaultLocation);\n\t\tthis.getOrRegisterViewContainerModel(viewContainer);\n\t}\n\n\tprivate getOrRegisterViewContainerModel(viewContainer: ViewContainer): ViewContainerModel {\n\t\tlet viewContainerModel = this.viewContainerModels.get(viewContainer)?.viewContainerModel;\n\n\t\tif (!viewContainerModel) {\n\t\t\tconst disposables = new DisposableStore();\n\t\t\tviewContainerModel = disposables.add(this.instantiationService.createInstance(ViewContainerModel, viewContainer));\n\n\t\t\tthis.onDidChangeActiveViews({ added: viewContainerModel.activeViewDescriptors, removed: [] });\n\t\t\tviewContainerModel.onDidChangeActiveViewDescriptors(changed => this.onDidChangeActiveViews(changed), this, disposables);\n\n\t\t\tthis.onDidChangeVisibleViews({ added: [...viewContainerModel.visibleViewDescriptors], removed: [] });\n\t\t\tviewContainerModel.onDidAddVisibleViewDescriptors(added => this.onDidChangeVisibleViews({ added: added.map(({ viewDescriptor }) => viewDescriptor), removed: [] }), this, disposables);\n\t\t\tviewContainerModel.onDidRemoveVisibleViewDescriptors(removed => this.onDidChangeVisibleViews({ added: [], removed: removed.map(({ viewDescriptor }) => viewDescriptor) }), this, disposables);\n\n\t\t\tdisposables.add(toDisposable(() => this.viewsVisibilityActionDisposables.deleteAndDispose(viewContainer)));\n\n\t\t\tdisposables.add(this.registerResetViewContainerAction(viewContainer));\n\n\t\t\tconst value = { viewContainerModel: viewContainerModel, disposables, dispose: () => disposables.dispose() };\n\t\t\tthis.viewContainerModels.set(viewContainer, value);\n\n\t\t\t// Register all views that were statically registered to this container\n\t\t\t// Potentially, this is registering something that was handled by another container\n\t\t\t// addViews() handles this by filtering views that are already registered\n\t\t\tthis.onDidRegisterViews([{ views: this.viewsRegistry.getViews(viewContainer), viewContainer }]);\n\n\t\t\t// Add views that were registered prior to this view container\n\t\t\tconst viewsToRegister = this.getViewsByContainer(viewContainer).filter(view => this.getDefaultContainerById(view.id) !== viewContainer);\n\t\t\tif (viewsToRegister.length) {\n\t\t\t\tthis.addViews(viewContainer, viewsToRegister);\n\t\t\t\tthis.contextKeyService.bufferChangeEvents(() => {\n\t\t\t\t\tviewsToRegister.forEach(viewDescriptor => this.getOrCreateMovableViewContextKey(viewDescriptor).set(!!viewDescriptor.canMoveView));\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tif (this.canRegisterViewsVisibilityActions) {\n\t\t\t\tthis.registerViewsVisibilityActions(viewContainer, value);\n\t\t\t}\n\t\t}\n\n\t\treturn viewContainerModel;\n\t}\n\n\tprivate onDidDeregisterViewContainer(viewContainer: ViewContainer): void {\n\t\tthis.viewContainerModels.deleteAndDispose(viewContainer);\n\t\tthis.viewsVisibilityActionDisposables.deleteAndDispose(viewContainer);\n\t}\n\n\tprivate onDidChangeActiveViews({ added, removed }: { added: ReadonlyArray<IViewDescriptor>; removed: ReadonlyArray<IViewDescriptor> }): void {\n\t\tthis.contextKeyService.bufferChangeEvents(() => {\n\t\t\tadded.forEach(viewDescriptor => this.getOrCreateActiveViewContextKey(viewDescriptor).set(true));\n\t\t\tremoved.forEach(viewDescriptor => this.getOrCreateActiveViewContextKey(viewDescriptor).set(false));\n\t\t});\n\t}\n\n\tprivate onDidChangeVisibleViews({ added, removed }: { added: IViewDescriptor[]; removed: IViewDescriptor[] }): void {\n\t\tthis.contextKeyService.bufferChangeEvents(() => {\n\t\t\tadded.forEach(viewDescriptor => this.getOrCreateVisibleViewContextKey(viewDescriptor).set(true));\n\t\t\tremoved.forEach(viewDescriptor => this.getOrCreateVisibleViewContextKey(viewDescriptor).set(false));\n\t\t});\n\t}\n\n\tprivate registerViewsVisibilityActions(viewContainer: ViewContainer, { viewContainerModel, disposables }: { viewContainerModel: ViewContainerModel; disposables: DisposableStore }): void {\n\t\tthis.viewsVisibilityActionDisposables.deleteAndDispose(viewContainer);\n\t\tthis.viewsVisibilityActionDisposables.set(viewContainer, this.registerViewsVisibilityActionsForContainer(viewContainerModel));\n\t\tdisposables.add(Event.any(\n\t\t\tviewContainerModel.onDidChangeActiveViewDescriptors,\n\t\t\tviewContainerModel.onDidAddVisibleViewDescriptors,\n\t\t\tviewContainerModel.onDidRemoveVisibleViewDescriptors,\n\t\t\tviewContainerModel.onDidMoveVisibleViewDescriptors\n\t\t)(e => {\n\t\t\tthis.viewsVisibilityActionDisposables.deleteAndDispose(viewContainer);\n\t\t\tthis.viewsVisibilityActionDisposables.set(viewContainer, this.registerViewsVisibilityActionsForContainer(viewContainerModel));\n\t\t}));\n\t}\n\n\tprivate registerViewsVisibilityActionsForContainer(viewContainerModel: ViewContainerModel): IDisposable {\n\t\tconst disposables = new DisposableStore();\n\t\tviewContainerModel.activeViewDescriptors.forEach((viewDescriptor, index) => {\n\t\t\tif (!viewDescriptor.remoteAuthority) {\n\t\t\t\tdisposables.add(registerAction2(class extends ViewPaneContainerAction<ViewPaneContainer> {\n\t\t\t\t\tconstructor() {\n\t\t\t\t\t\tsuper({\n\t\t\t\t\t\t\tid: `${viewDescriptor.id}.toggleVisibility`,\n\t\t\t\t\t\t\tviewPaneContainerId: viewContainerModel.viewContainer.id,\n\t\t\t\t\t\t\tprecondition: viewDescriptor.canToggleVisibility && (!viewContainerModel.isVisible(viewDescriptor.id) || viewContainerModel.visibleViewDescriptors.length > 1) ? ContextKeyExpr.true() : ContextKeyExpr.false(),\n\t\t\t\t\t\t\ttoggled: ContextKeyExpr.has(`${viewDescriptor.id}.visible`),\n\t\t\t\t\t\t\ttitle: viewDescriptor.name,\n\t\t\t\t\t\t\tmenu: [{\n\t\t\t\t\t\t\t\tid: ViewsSubMenu,\n\t\t\t\t\t\t\t\twhen: ContextKeyExpr.equals('viewContainer', viewContainerModel.viewContainer.id),\n\t\t\t\t\t\t\t\torder: index,\n\t\t\t\t\t\t\t}, {\n\t\t\t\t\t\t\t\tid: MenuId.ViewContainerTitleContext,\n\t\t\t\t\t\t\t\twhen: ContextKeyExpr.and(\n\t\t\t\t\t\t\t\t\tContextKeyExpr.equals('viewContainer', viewContainerModel.viewContainer.id),\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\torder: index,\n\t\t\t\t\t\t\t\tgroup: '1_toggleVisibility'\n\t\t\t\t\t\t\t}, {\n\t\t\t\t\t\t\t\tid: MenuId.ViewTitleContext,\n\t\t\t\t\t\t\t\twhen: ContextKeyExpr.and(\n\t\t\t\t\t\t\t\t\tContextKeyExpr.or(...viewContainerModel.visibleViewDescriptors.map(v => ContextKeyExpr.equals('view', v.id)))\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\torder: index,\n\t\t\t\t\t\t\t\tgroup: '2_toggleVisibility'\n\t\t\t\t\t\t\t}]\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t\tasync runInViewPaneContainer(serviceAccessor: ServicesAccessor, viewPaneContainer: ViewPaneContainer): Promise<void> {\n\t\t\t\t\t\tviewPaneContainer.toggleViewVisibility(viewDescriptor.id);\n\t\t\t\t\t}\n\t\t\t\t}));\n\t\t\t\tdisposables.add(registerAction2(class extends ViewPaneContainerAction<ViewPaneContainer> {\n\t\t\t\t\tconstructor() {\n\t\t\t\t\t\tsuper({\n\t\t\t\t\t\t\tid: `${viewDescriptor.id}.removeView`,\n\t\t\t\t\t\t\tviewPaneContainerId: viewContainerModel.viewContainer.id,\n\t\t\t\t\t\t\ttitle: localize('hideView', \"Hide '{0}'\", viewDescriptor.name.value),\n\t\t\t\t\t\t\tprecondition: viewDescriptor.canToggleVisibility && (!viewContainerModel.isVisible(viewDescriptor.id) || viewContainerModel.visibleViewDescriptors.length > 1) ? ContextKeyExpr.true() : ContextKeyExpr.false(),\n\t\t\t\t\t\t\tmenu: [{\n\t\t\t\t\t\t\t\tid: MenuId.ViewTitleContext,\n\t\t\t\t\t\t\t\twhen: ContextKeyExpr.and(\n\t\t\t\t\t\t\t\t\tContextKeyExpr.equals('view', viewDescriptor.id),\n\t\t\t\t\t\t\t\t\tContextKeyExpr.has(`${viewDescriptor.id}.visible`),\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\tgroup: '1_hide',\n\t\t\t\t\t\t\t\torder: 1\n\t\t\t\t\t\t\t}]\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t\tasync runInViewPaneContainer(serviceAccessor: ServicesAccessor, viewPaneContainer: ViewPaneContainer): Promise<void> {\n\t\t\t\t\t\tviewPaneContainer.toggleViewVisibility(viewDescriptor.id);\n\t\t\t\t\t}\n\t\t\t\t}));\n\t\t\t}\n\t\t});\n\t\treturn disposables;\n\t}\n\n\tprivate registerResetViewContainerAction(viewContainer: ViewContainer): IDisposable {\n\t\tconst that = this;\n\t\treturn registerAction2(class ResetViewLocationAction extends Action2 {\n\t\t\tconstructor() {\n\t\t\t\tsuper({\n\t\t\t\t\tid: `${viewContainer.id}.resetViewContainerLocation`,\n\t\t\t\t\ttitle: localize2('resetViewLocation', \"Reset Location\"),\n\t\t\t\t\tmenu: [{\n\t\t\t\t\t\tid: MenuId.ViewContainerTitleContext,\n\t\t\t\t\t\twhen: ContextKeyExpr.or(\n\t\t\t\t\t\t\tContextKeyExpr.and(\n\t\t\t\t\t\t\t\tContextKeyExpr.equals('viewContainer', viewContainer.id),\n\t\t\t\t\t\t\t\tContextKeyExpr.equals(`${viewContainer.id}.defaultViewContainerLocation`, false)\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t)\n\t\t\t\t\t}],\n\t\t\t\t});\n\t\t\t}\n\t\t\trun(): void {\n\t\t\t\tthat.moveViewContainerToLocation(viewContainer, that.getDefaultViewContainerLocation(viewContainer), undefined, this.desc.id);\n\t\t\t}\n\t\t});\n\t}\n\n\tprivate addViews(container: ViewContainer, views: IViewDescriptor[], visibilityState: ViewVisibilityState = ViewVisibilityState.Default): void {\n\t\tthis.contextKeyService.bufferChangeEvents(() => {\n\t\t\tviews.forEach(view => {\n\t\t\t\tconst isDefaultContainer = this.getDefaultContainerById(view.id) === container;\n\t\t\t\tthis.getOrCreateDefaultViewLocationContextKey(view).set(isDefaultContainer);\n\t\t\t\tif (isDefaultContainer) {\n\t\t\t\t\tthis.viewDescriptorsCustomLocations.delete(view.id);\n\t\t\t\t} else {\n\t\t\t\t\tthis.viewDescriptorsCustomLocations.set(view.id, container.id);\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\n\t\tthis.getViewContainerModel(container).add(views.map(view => {\n\t\t\treturn {\n\t\t\t\tviewDescriptor: view,\n\t\t\t\tcollapsed: visibilityState === ViewVisibilityState.Default ? undefined : false,\n\t\t\t\tvisible: visibilityState === ViewVisibilityState.Default ? undefined : true\n\t\t\t};\n\t\t}));\n\t}\n\n\tprivate removeViews(container: ViewContainer, views: IViewDescriptor[]): void {\n\t\t// Set view default location keys to false\n\t\tthis.contextKeyService.bufferChangeEvents(() => {\n\t\t\tviews.forEach(view => {\n\t\t\t\tif (this.viewDescriptorsCustomLocations.get(view.id) === container.id) {\n\t\t\t\t\tthis.viewDescriptorsCustomLocations.delete(view.id);\n\t\t\t\t}\n\t\t\t\tthis.getOrCreateDefaultViewLocationContextKey(view).set(false);\n\t\t\t});\n\t\t});\n\n\t\t// Remove the views\n\t\tthis.getViewContainerModel(container).remove(views);\n\t}\n\n\tprivate getOrCreateActiveViewContextKey(viewDescriptor: IViewDescriptor): IContextKey<boolean> {\n\t\tconst activeContextKeyId = `${viewDescriptor.id}.active`;\n\t\tlet contextKey = this.activeViewContextKeys.get(activeContextKeyId);\n\t\tif (!contextKey) {\n\t\t\tcontextKey = new RawContextKey(activeContextKeyId, false).bindTo(this.contextKeyService);\n\t\t\tthis.activeViewContextKeys.set(activeContextKeyId, contextKey);\n\t\t}\n\t\treturn contextKey;\n\t}\n\n\tprivate getOrCreateVisibleViewContextKey(viewDescriptor: IViewDescriptor): IContextKey<boolean> {\n\t\tconst activeContextKeyId = `${viewDescriptor.id}.visible`;\n\t\tlet contextKey = this.activeViewContextKeys.get(activeContextKeyId);\n\t\tif (!contextKey) {\n\t\t\tcontextKey = new RawContextKey(activeContextKeyId, false).bindTo(this.contextKeyService);\n\t\t\tthis.activeViewContextKeys.set(activeContextKeyId, contextKey);\n\t\t}\n\t\treturn contextKey;\n\t}\n\n\tprivate getOrCreateMovableViewContextKey(viewDescriptor: IViewDescriptor): IContextKey<boolean> {\n\t\tconst movableViewContextKeyId = `${viewDescriptor.id}.canMove`;\n\t\tlet contextKey = this.movableViewContextKeys.get(movableViewContextKeyId);\n\t\tif (!contextKey) {\n\t\t\tcontextKey = new RawContextKey(movableViewContextKeyId, false).bindTo(this.contextKeyService);\n\t\t\tthis.movableViewContextKeys.set(movableViewContextKeyId, contextKey);\n\t\t}\n\t\treturn contextKey;\n\t}\n\n\tprivate getOrCreateDefaultViewLocationContextKey(viewDescriptor: IViewDescriptor): IContextKey<boolean> {\n\t\tconst defaultViewLocationContextKeyId = `${viewDescriptor.id}.defaultViewLocation`;\n\t\tlet contextKey = this.defaultViewLocationContextKeys.get(defaultViewLocationContextKeyId);\n\t\tif (!contextKey) {\n\t\t\tcontextKey = new RawContextKey(defaultViewLocationContextKeyId, false).bindTo(this.contextKeyService);\n\t\t\tthis.defaultViewLocationContextKeys.set(defaultViewLocationContextKeyId, contextKey);\n\t\t}\n\t\treturn contextKey;\n\t}\n\n\tprivate getOrCreateDefaultViewContainerLocationContextKey(viewContainer: ViewContainer): IContextKey<boolean> {\n\t\tconst defaultViewContainerLocationContextKeyId = `${viewContainer.id}.defaultViewContainerLocation`;\n\t\tlet contextKey = this.defaultViewContainerLocationContextKeys.get(defaultViewContainerLocationContextKeyId);\n\t\tif (!contextKey) {\n\t\t\tcontextKey = new RawContextKey(defaultViewContainerLocationContextKeyId, false).bindTo(this.contextKeyService);\n\t\t\tthis.defaultViewContainerLocationContextKeys.set(defaultViewContainerLocationContextKeyId, contextKey);\n\t\t}\n\t\treturn contextKey;\n\t}\n}\n\nregisterSingleton(IViewDescriptorService, ViewDescriptorService, InstantiationType.Delayed);\n"],
  "mappings": "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",
  "names": ["views"]
}
