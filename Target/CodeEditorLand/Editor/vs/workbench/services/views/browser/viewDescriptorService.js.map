{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/views/browser/viewDescriptorService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport type { IStringDictionary } from \"../../../../base/common/collections.js\";\nimport { Emitter, Event } from \"../../../../base/common/event.js\";\nimport { Lazy } from \"../../../../base/common/lazy.js\";\nimport {\n\tDisposable,\n\tDisposableMap,\n\tDisposableStore,\n\ttype IDisposable,\n\ttoDisposable,\n} from \"../../../../base/common/lifecycle.js\";\nimport { generateUuid } from \"../../../../base/common/uuid.js\";\nimport { localize, localize2 } from \"../../../../nls.js\";\nimport {\n\tAction2,\n\tMenuId,\n\tregisterAction2,\n} from \"../../../../platform/actions/common/actions.js\";\nimport {\n\tContextKeyExpr,\n\ttype IContextKey,\n\tIContextKeyService,\n\tRawContextKey,\n} from \"../../../../platform/contextkey/common/contextkey.js\";\nimport { SyncDescriptor } from \"../../../../platform/instantiation/common/descriptors.js\";\nimport {\n\tInstantiationType,\n\tregisterSingleton,\n} from \"../../../../platform/instantiation/common/extensions.js\";\nimport {\n\tIInstantiationService,\n\ttype ServicesAccessor,\n} from \"../../../../platform/instantiation/common/instantiation.js\";\nimport {\n\ttype ILogger,\n\tILoggerService,\n} from \"../../../../platform/log/common/log.js\";\nimport { Registry } from \"../../../../platform/registry/common/platform.js\";\nimport {\n\tIStorageService,\n\tStorageScope,\n\tStorageTarget,\n} from \"../../../../platform/storage/common/storage.js\";\nimport { ITelemetryService } from \"../../../../platform/telemetry/common/telemetry.js\";\nimport {\n\tViewPaneContainer,\n\tViewPaneContainerAction,\n\tViewsSubMenu,\n} from \"../../../browser/parts/views/viewPaneContainer.js\";\nimport {\n\ttype IViewContainersRegistry,\n\ttype IViewDescriptor,\n\tIViewDescriptorService,\n\ttype IViewsRegistry,\n\tVIEWS_LOG_ID,\n\tVIEWS_LOG_NAME,\n\ttype ViewContainer,\n\tViewContainerLocation,\n\tViewContainerLocationToString,\n\tExtensions as ViewExtensions,\n\tViewVisibilityState,\n\tdefaultViewIcon,\n} from \"../../../common/views.js\";\nimport { IExtensionService } from \"../../extensions/common/extensions.js\";\nimport {\n\tViewContainerModel,\n\tgetViewsStateStorageId,\n} from \"../common/viewContainerModel.js\";\n\ninterface IViewsCustomizations {\n\tviewContainerLocations: IStringDictionary<ViewContainerLocation>;\n\tviewLocations: IStringDictionary<string>;\n\tviewContainerBadgeEnablementStates: IStringDictionary<boolean>;\n}\n\nfunction getViewContainerStorageId(viewContainerId: string): string {\n\treturn `${viewContainerId}.state`;\n}\n\nexport class ViewDescriptorService\n\textends Disposable\n\timplements IViewDescriptorService\n{\n\tdeclare readonly _serviceBrand: undefined;\n\n\tprivate static readonly VIEWS_CUSTOMIZATIONS = \"views.customizations\";\n\tprivate static readonly COMMON_CONTAINER_ID_PREFIX =\n\t\t\"workbench.views.service\";\n\n\tprivate readonly _onDidChangeContainer: Emitter<{\n\t\tviews: IViewDescriptor[];\n\t\tfrom: ViewContainer;\n\t\tto: ViewContainer;\n\t}> = this._register(\n\t\tnew Emitter<{\n\t\t\tviews: IViewDescriptor[];\n\t\t\tfrom: ViewContainer;\n\t\t\tto: ViewContainer;\n\t\t}>(),\n\t);\n\treadonly onDidChangeContainer: Event<{\n\t\tviews: IViewDescriptor[];\n\t\tfrom: ViewContainer;\n\t\tto: ViewContainer;\n\t}> = this._onDidChangeContainer.event;\n\n\tprivate readonly _onDidChangeLocation: Emitter<{\n\t\tviews: IViewDescriptor[];\n\t\tfrom: ViewContainerLocation;\n\t\tto: ViewContainerLocation;\n\t}> = this._register(\n\t\tnew Emitter<{\n\t\t\tviews: IViewDescriptor[];\n\t\t\tfrom: ViewContainerLocation;\n\t\t\tto: ViewContainerLocation;\n\t\t}>(),\n\t);\n\treadonly onDidChangeLocation: Event<{\n\t\tviews: IViewDescriptor[];\n\t\tfrom: ViewContainerLocation;\n\t\tto: ViewContainerLocation;\n\t}> = this._onDidChangeLocation.event;\n\n\tprivate readonly _onDidChangeContainerLocation: Emitter<{\n\t\tviewContainer: ViewContainer;\n\t\tfrom: ViewContainerLocation;\n\t\tto: ViewContainerLocation;\n\t}> = this._register(\n\t\tnew Emitter<{\n\t\t\tviewContainer: ViewContainer;\n\t\t\tfrom: ViewContainerLocation;\n\t\t\tto: ViewContainerLocation;\n\t\t}>(),\n\t);\n\treadonly onDidChangeContainerLocation: Event<{\n\t\tviewContainer: ViewContainer;\n\t\tfrom: ViewContainerLocation;\n\t\tto: ViewContainerLocation;\n\t}> = this._onDidChangeContainerLocation.event;\n\n\tprivate readonly viewContainerModels = this._register(\n\t\tnew DisposableMap<\n\t\t\tViewContainer,\n\t\t\t{\n\t\t\t\tviewContainerModel: ViewContainerModel;\n\t\t\t\tdisposables: DisposableStore;\n\t\t\t} & IDisposable\n\t\t>(),\n\t);\n\tprivate readonly viewsVisibilityActionDisposables = this._register(\n\t\tnew DisposableMap<ViewContainer, IDisposable>(),\n\t);\n\tprivate canRegisterViewsVisibilityActions = false;\n\tprivate readonly activeViewContextKeys: Map<string, IContextKey<boolean>>;\n\tprivate readonly movableViewContextKeys: Map<string, IContextKey<boolean>>;\n\tprivate readonly defaultViewLocationContextKeys: Map<\n\t\tstring,\n\t\tIContextKey<boolean>\n\t>;\n\tprivate readonly defaultViewContainerLocationContextKeys: Map<\n\t\tstring,\n\t\tIContextKey<boolean>\n\t>;\n\n\tprivate readonly viewsRegistry: IViewsRegistry;\n\tprivate readonly viewContainersRegistry: IViewContainersRegistry;\n\n\tprivate viewContainersCustomLocations: Map<string, ViewContainerLocation>;\n\tprivate viewDescriptorsCustomLocations: Map<string, string>;\n\tprivate viewContainerBadgeEnablementStates: Map<string, boolean>;\n\n\tprivate readonly _onDidChangeViewContainers = this._register(\n\t\tnew Emitter<{\n\t\t\tadded: ReadonlyArray<{\n\t\t\t\tcontainer: ViewContainer;\n\t\t\t\tlocation: ViewContainerLocation;\n\t\t\t}>;\n\t\t\tremoved: ReadonlyArray<{\n\t\t\t\tcontainer: ViewContainer;\n\t\t\t\tlocation: ViewContainerLocation;\n\t\t\t}>;\n\t\t}>(),\n\t);\n\treadonly onDidChangeViewContainers = this._onDidChangeViewContainers.event;\n\tget viewContainers(): ReadonlyArray<ViewContainer> {\n\t\treturn this.viewContainersRegistry.all;\n\t}\n\n\tprivate readonly logger: Lazy<ILogger>;\n\n\tconstructor(\n\t\t@IInstantiationService\n\t\tprivate readonly instantiationService: IInstantiationService,\n\t\t@IContextKeyService\n\t\tprivate readonly contextKeyService: IContextKeyService,\n\t\t@IStorageService private readonly storageService: IStorageService,\n\t\t@IExtensionService private readonly extensionService: IExtensionService,\n\t\t@ITelemetryService private readonly telemetryService: ITelemetryService,\n\t\t@ILoggerService loggerService: ILoggerService,\n\t) {\n\t\tsuper();\n\n\t\tthis.logger = new Lazy(() =>\n\t\t\tloggerService.createLogger(VIEWS_LOG_ID, {\n\t\t\t\tname: VIEWS_LOG_NAME,\n\t\t\t\thidden: true,\n\t\t\t}),\n\t\t);\n\n\t\tthis.activeViewContextKeys = new Map<string, IContextKey<boolean>>();\n\t\tthis.movableViewContextKeys = new Map<string, IContextKey<boolean>>();\n\t\tthis.defaultViewLocationContextKeys = new Map<\n\t\t\tstring,\n\t\t\tIContextKey<boolean>\n\t\t>();\n\t\tthis.defaultViewContainerLocationContextKeys = new Map<\n\t\t\tstring,\n\t\t\tIContextKey<boolean>\n\t\t>();\n\n\t\tthis.viewContainersRegistry = Registry.as<IViewContainersRegistry>(\n\t\t\tViewExtensions.ViewContainersRegistry,\n\t\t);\n\t\tthis.viewsRegistry = Registry.as<IViewsRegistry>(\n\t\t\tViewExtensions.ViewsRegistry,\n\t\t);\n\n\t\tthis.migrateToViewsCustomizationsStorage();\n\t\tthis.viewContainersCustomLocations = new Map<\n\t\t\tstring,\n\t\t\tViewContainerLocation\n\t\t>(Object.entries(this.viewCustomizations.viewContainerLocations));\n\t\tthis.viewDescriptorsCustomLocations = new Map<string, string>(\n\t\t\tObject.entries(this.viewCustomizations.viewLocations),\n\t\t);\n\t\tthis.viewContainerBadgeEnablementStates = new Map<string, boolean>(\n\t\t\tObject.entries(\n\t\t\t\tthis.viewCustomizations.viewContainerBadgeEnablementStates,\n\t\t\t),\n\t\t);\n\n\t\t// Register all containers that were registered before this ctor\n\t\tthis.viewContainers.forEach((viewContainer) =>\n\t\t\tthis.onDidRegisterViewContainer(viewContainer),\n\t\t);\n\n\t\tthis._register(\n\t\t\tthis.viewsRegistry.onViewsRegistered((views) =>\n\t\t\t\tthis.onDidRegisterViews(views),\n\t\t\t),\n\t\t);\n\t\tthis._register(\n\t\t\tthis.viewsRegistry.onViewsDeregistered(({ views, viewContainer }) =>\n\t\t\t\tthis.onDidDeregisterViews(views, viewContainer),\n\t\t\t),\n\t\t);\n\n\t\tthis._register(\n\t\t\tthis.viewsRegistry.onDidChangeContainer(({ views, from, to }) =>\n\t\t\t\tthis.onDidChangeDefaultContainer(views, from, to),\n\t\t\t),\n\t\t);\n\n\t\tthis._register(\n\t\t\tthis.viewContainersRegistry.onDidRegister(({ viewContainer }) => {\n\t\t\t\tthis.onDidRegisterViewContainer(viewContainer);\n\t\t\t\tthis._onDidChangeViewContainers.fire({\n\t\t\t\t\tadded: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tcontainer: viewContainer,\n\t\t\t\t\t\t\tlocation:\n\t\t\t\t\t\t\t\tthis.getViewContainerLocation(viewContainer),\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t\tremoved: [],\n\t\t\t\t});\n\t\t\t}),\n\t\t);\n\n\t\tthis._register(\n\t\t\tthis.viewContainersRegistry.onDidDeregister(\n\t\t\t\t({ viewContainer, viewContainerLocation }) => {\n\t\t\t\t\tthis.onDidDeregisterViewContainer(viewContainer);\n\t\t\t\t\tthis._onDidChangeViewContainers.fire({\n\t\t\t\t\t\tremoved: [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tcontainer: viewContainer,\n\t\t\t\t\t\t\t\tlocation: viewContainerLocation,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t],\n\t\t\t\t\t\tadded: [],\n\t\t\t\t\t});\n\t\t\t\t},\n\t\t\t),\n\t\t);\n\n\t\tthis._register(\n\t\t\tthis.storageService.onDidChangeValue(\n\t\t\t\tStorageScope.PROFILE,\n\t\t\t\tViewDescriptorService.VIEWS_CUSTOMIZATIONS,\n\t\t\t\tthis._register(new DisposableStore()),\n\t\t\t)(() => this.onDidStorageChange()),\n\t\t);\n\n\t\tthis.extensionService\n\t\t\t.whenInstalledExtensionsRegistered()\n\t\t\t.then(() => this.whenExtensionsRegistered());\n\t}\n\n\tprivate migrateToViewsCustomizationsStorage(): void {\n\t\tif (\n\t\t\tthis.storageService.get(\n\t\t\t\tViewDescriptorService.VIEWS_CUSTOMIZATIONS,\n\t\t\t\tStorageScope.PROFILE,\n\t\t\t)\n\t\t) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst viewContainerLocationsValue = this.storageService.get(\n\t\t\t\"views.cachedViewContainerLocations\",\n\t\t\tStorageScope.PROFILE,\n\t\t);\n\t\tconst viewDescriptorLocationsValue = this.storageService.get(\n\t\t\t\"views.cachedViewPositions\",\n\t\t\tStorageScope.PROFILE,\n\t\t);\n\t\tif (!viewContainerLocationsValue && !viewDescriptorLocationsValue) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst viewContainerLocations: [string, ViewContainerLocation][] =\n\t\t\tviewContainerLocationsValue\n\t\t\t\t? JSON.parse(viewContainerLocationsValue)\n\t\t\t\t: [];\n\t\tconst viewDescriptorLocations: [string, { containerId: string }][] =\n\t\t\tviewDescriptorLocationsValue\n\t\t\t\t? JSON.parse(viewDescriptorLocationsValue)\n\t\t\t\t: [];\n\t\tconst viewsCustomizations: IViewsCustomizations = {\n\t\t\tviewContainerLocations: viewContainerLocations.reduce<\n\t\t\t\tIStringDictionary<ViewContainerLocation>\n\t\t\t>((result, [id, location]) => {\n\t\t\t\tresult[id] = location;\n\t\t\t\treturn result;\n\t\t\t}, {}),\n\t\t\tviewLocations: viewDescriptorLocations.reduce<\n\t\t\t\tIStringDictionary<string>\n\t\t\t>((result, [id, { containerId }]) => {\n\t\t\t\tresult[id] = containerId;\n\t\t\t\treturn result;\n\t\t\t}, {}),\n\t\t\tviewContainerBadgeEnablementStates: {},\n\t\t};\n\t\tthis.storageService.store(\n\t\t\tViewDescriptorService.VIEWS_CUSTOMIZATIONS,\n\t\t\tJSON.stringify(viewsCustomizations),\n\t\t\tStorageScope.PROFILE,\n\t\t\tStorageTarget.USER,\n\t\t);\n\t\tthis.storageService.remove(\n\t\t\t\"views.cachedViewContainerLocations\",\n\t\t\tStorageScope.PROFILE,\n\t\t);\n\t\tthis.storageService.remove(\n\t\t\t\"views.cachedViewPositions\",\n\t\t\tStorageScope.PROFILE,\n\t\t);\n\t}\n\n\tprivate registerGroupedViews(\n\t\tgroupedViews: Map<string, IViewDescriptor[]>,\n\t): void {\n\t\tfor (const [containerId, views] of groupedViews.entries()) {\n\t\t\tconst viewContainer = this.viewContainersRegistry.get(containerId);\n\n\t\t\t// The container has not been registered yet\n\t\t\tif (\n\t\t\t\t!viewContainer ||\n\t\t\t\t!this.viewContainerModels.has(viewContainer)\n\t\t\t) {\n\t\t\t\t// Register if the container is a genarated container\n\t\t\t\tif (this.isGeneratedContainerId(containerId)) {\n\t\t\t\t\tconst viewContainerLocation =\n\t\t\t\t\t\tthis.viewContainersCustomLocations.get(containerId);\n\t\t\t\t\tif (viewContainerLocation !== undefined) {\n\t\t\t\t\t\tthis.registerGeneratedViewContainer(\n\t\t\t\t\t\t\tviewContainerLocation,\n\t\t\t\t\t\t\tcontainerId,\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t// Registration of the container handles registration of its views\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// Filter out views that have already been added to the view container model\n\t\t\t// This is needed when statically-registered views are moved to\n\t\t\t// other statically registered containers as they will both try to add on startup\n\t\t\tconst viewsToAdd = views.filter(\n\t\t\t\t(view) =>\n\t\t\t\t\tthis.getViewContainerModel(\n\t\t\t\t\t\tviewContainer,\n\t\t\t\t\t).allViewDescriptors.filter((vd) => vd.id === view.id)\n\t\t\t\t\t\t.length === 0,\n\t\t\t);\n\t\t\tthis.addViews(viewContainer, viewsToAdd);\n\t\t}\n\t}\n\n\tprivate deregisterGroupedViews(\n\t\tgroupedViews: Map<string, IViewDescriptor[]>,\n\t): void {\n\t\tfor (const [viewContainerId, views] of groupedViews.entries()) {\n\t\t\tconst viewContainer =\n\t\t\t\tthis.viewContainersRegistry.get(viewContainerId);\n\n\t\t\t// The container has not been registered yet\n\t\t\tif (\n\t\t\t\t!viewContainer ||\n\t\t\t\t!this.viewContainerModels.has(viewContainer)\n\t\t\t) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tthis.removeViews(viewContainer, views);\n\t\t}\n\t}\n\n\tprivate moveOrphanViewsToDefaultLocation(): void {\n\t\tfor (const [\n\t\t\tviewId,\n\t\t\tcontainerId,\n\t\t] of this.viewDescriptorsCustomLocations.entries()) {\n\t\t\t// check if the view container exists\n\t\t\tif (this.viewContainersRegistry.get(containerId)) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// check if view has been registered to default location\n\t\t\tconst viewContainer = this.viewsRegistry.getViewContainer(viewId);\n\t\t\tconst viewDescriptor = this.getViewDescriptorById(viewId);\n\t\t\tif (viewContainer && viewDescriptor) {\n\t\t\t\tthis.addViews(viewContainer, [viewDescriptor]);\n\t\t\t}\n\t\t}\n\t}\n\n\twhenExtensionsRegistered(): void {\n\t\t// Handle those views whose custom parent view container does not exist anymore\n\t\t// May be the extension contributing this view container is no longer installed\n\t\t// Or the parent view container is generated and no longer available.\n\t\tthis.moveOrphanViewsToDefaultLocation();\n\n\t\t// Clean up empty generated view containers\n\t\tfor (const viewContainerId of [\n\t\t\t...this.viewContainersCustomLocations.keys(),\n\t\t]) {\n\t\t\tthis.cleanUpGeneratedViewContainer(viewContainerId);\n\t\t}\n\n\t\t// Save updated view customizations after cleanup\n\t\tthis.saveViewCustomizations();\n\n\t\t// Register visibility actions for all views\n\t\tfor (const [key, value] of this.viewContainerModels) {\n\t\t\tthis.registerViewsVisibilityActions(key, value);\n\t\t}\n\t\tthis.canRegisterViewsVisibilityActions = true;\n\t}\n\n\tprivate onDidRegisterViews(\n\t\tviews: { views: IViewDescriptor[]; viewContainer: ViewContainer }[],\n\t): void {\n\t\tthis.contextKeyService.bufferChangeEvents(() => {\n\t\t\tviews.forEach(({ views, viewContainer }) => {\n\t\t\t\t// When views are registered, we need to regroup them based on the customizations\n\t\t\t\tconst regroupedViews = this.regroupViews(\n\t\t\t\t\tviewContainer.id,\n\t\t\t\t\tviews,\n\t\t\t\t);\n\n\t\t\t\t// Once they are grouped, try registering them which occurs\n\t\t\t\t// if the container has already been registered within this service\n\t\t\t\t// or we can generate the container from the source view id\n\t\t\t\tthis.registerGroupedViews(regroupedViews);\n\n\t\t\t\tviews.forEach((viewDescriptor) =>\n\t\t\t\t\tthis.getOrCreateMovableViewContextKey(viewDescriptor).set(\n\t\t\t\t\t\t!!viewDescriptor.canMoveView,\n\t\t\t\t\t),\n\t\t\t\t);\n\t\t\t});\n\t\t});\n\t}\n\n\tprivate isGeneratedContainerId(id: string): boolean {\n\t\treturn id.startsWith(ViewDescriptorService.COMMON_CONTAINER_ID_PREFIX);\n\t}\n\n\tprivate onDidDeregisterViews(\n\t\tviews: IViewDescriptor[],\n\t\tviewContainer: ViewContainer,\n\t): void {\n\t\t// When views are registered, we need to regroup them based on the customizations\n\t\tconst regroupedViews = this.regroupViews(viewContainer.id, views);\n\t\tthis.deregisterGroupedViews(regroupedViews);\n\t\tthis.contextKeyService.bufferChangeEvents(() => {\n\t\t\tviews.forEach((viewDescriptor) =>\n\t\t\t\tthis.getOrCreateMovableViewContextKey(viewDescriptor).set(\n\t\t\t\t\tfalse,\n\t\t\t\t),\n\t\t\t);\n\t\t});\n\t}\n\n\tprivate regroupViews(\n\t\tcontainerId: string,\n\t\tviews: IViewDescriptor[],\n\t): Map<string, IViewDescriptor[]> {\n\t\tconst viewsByContainer = new Map<string, IViewDescriptor[]>();\n\n\t\tfor (const viewDescriptor of views) {\n\t\t\tconst correctContainerId =\n\t\t\t\tthis.viewDescriptorsCustomLocations.get(viewDescriptor.id) ??\n\t\t\t\tcontainerId;\n\t\t\tlet containerViews = viewsByContainer.get(correctContainerId);\n\t\t\tif (!containerViews) {\n\t\t\t\tviewsByContainer.set(correctContainerId, (containerViews = []));\n\t\t\t}\n\t\t\tcontainerViews.push(viewDescriptor);\n\t\t}\n\n\t\treturn viewsByContainer;\n\t}\n\n\tgetViewDescriptorById(viewId: string): IViewDescriptor | null {\n\t\treturn this.viewsRegistry.getView(viewId);\n\t}\n\n\tgetViewLocationById(viewId: string): ViewContainerLocation | null {\n\t\tconst container = this.getViewContainerByViewId(viewId);\n\t\tif (container === null) {\n\t\t\treturn null;\n\t\t}\n\n\t\treturn this.getViewContainerLocation(container);\n\t}\n\n\tgetViewContainerByViewId(viewId: string): ViewContainer | null {\n\t\tconst containerId = this.viewDescriptorsCustomLocations.get(viewId);\n\n\t\treturn containerId\n\t\t\t? (this.viewContainersRegistry.get(containerId) ?? null)\n\t\t\t: this.getDefaultContainerById(viewId);\n\t}\n\n\tgetViewContainerLocation(\n\t\tviewContainer: ViewContainer,\n\t): ViewContainerLocation {\n\t\treturn (\n\t\t\tthis.viewContainersCustomLocations.get(viewContainer.id) ??\n\t\t\tthis.getDefaultViewContainerLocation(viewContainer)\n\t\t);\n\t}\n\n\tgetDefaultViewContainerLocation(\n\t\tviewContainer: ViewContainer,\n\t): ViewContainerLocation {\n\t\treturn this.viewContainersRegistry.getViewContainerLocation(\n\t\t\tviewContainer,\n\t\t);\n\t}\n\n\tgetDefaultContainerById(viewId: string): ViewContainer | null {\n\t\treturn this.viewsRegistry.getViewContainer(viewId) ?? null;\n\t}\n\n\tgetViewContainerModel(container: ViewContainer): ViewContainerModel {\n\t\treturn this.getOrRegisterViewContainerModel(container);\n\t}\n\n\tgetViewContainerById(id: string): ViewContainer | null {\n\t\treturn this.viewContainersRegistry.get(id) || null;\n\t}\n\n\tgetViewContainersByLocation(\n\t\tlocation: ViewContainerLocation,\n\t): ViewContainer[] {\n\t\treturn this.viewContainers.filter(\n\t\t\t(v) => this.getViewContainerLocation(v) === location,\n\t\t);\n\t}\n\n\tgetDefaultViewContainer(\n\t\tlocation: ViewContainerLocation,\n\t): ViewContainer | undefined {\n\t\treturn this.viewContainersRegistry.getDefaultViewContainer(location);\n\t}\n\n\tmoveViewContainerToLocation(\n\t\tviewContainer: ViewContainer,\n\t\tlocation: ViewContainerLocation,\n\t\trequestedIndex?: number,\n\t\treason?: string,\n\t): void {\n\t\tthis.logger.value.info(\n\t\t\t`moveViewContainerToLocation: viewContainer:${viewContainer.id} location:${location} reason:${reason}`,\n\t\t);\n\t\tthis.moveViewContainerToLocationWithoutSaving(\n\t\t\tviewContainer,\n\t\t\tlocation,\n\t\t\trequestedIndex,\n\t\t);\n\t\tthis.saveViewCustomizations();\n\t}\n\n\tgetViewContainerBadgeEnablementState(id: string): boolean {\n\t\treturn this.viewContainerBadgeEnablementStates.get(id) ?? true;\n\t}\n\n\tsetViewContainerBadgeEnablementState(\n\t\tid: string,\n\t\tbadgesEnabled: boolean,\n\t): void {\n\t\tthis.viewContainerBadgeEnablementStates.set(id, badgesEnabled);\n\t\tthis.saveViewCustomizations();\n\t}\n\n\tmoveViewToLocation(\n\t\tview: IViewDescriptor,\n\t\tlocation: ViewContainerLocation,\n\t\treason?: string,\n\t): void {\n\t\tthis.logger.value.info(\n\t\t\t`moveViewToLocation: view:${view.id} location:${location} reason:${reason}`,\n\t\t);\n\t\tconst container = this.registerGeneratedViewContainer(location);\n\t\tthis.moveViewsToContainer([view], container);\n\t}\n\n\tmoveViewsToContainer(\n\t\tviews: IViewDescriptor[],\n\t\tviewContainer: ViewContainer,\n\t\tvisibilityState?: ViewVisibilityState,\n\t\treason?: string,\n\t): void {\n\t\tif (!views.length) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.logger.value.info(\n\t\t\t`moveViewsToContainer: views:${views.map((view) => view.id).join(\",\")} viewContainer:${viewContainer.id} reason:${reason}`,\n\t\t);\n\n\t\tconst from = this.getViewContainerByViewId(views[0].id);\n\t\tconst to = viewContainer;\n\n\t\tif (from && to && from !== to) {\n\t\t\t// Move views\n\t\t\tthis.moveViewsWithoutSaving(views, from, to, visibilityState);\n\t\t\tthis.cleanUpGeneratedViewContainer(from.id);\n\n\t\t\t// Save new locations\n\t\t\tthis.saveViewCustomizations();\n\n\t\t\t// Log to telemetry\n\t\t\tthis.reportMovedViews(views, from, to);\n\t\t}\n\t}\n\n\treset(): void {\n\t\tfor (const viewContainer of this.viewContainers) {\n\t\t\tconst viewContainerModel =\n\t\t\t\tthis.getViewContainerModel(viewContainer);\n\n\t\t\tfor (const viewDescriptor of viewContainerModel.allViewDescriptors) {\n\t\t\t\tconst defaultContainer = this.getDefaultContainerById(\n\t\t\t\t\tviewDescriptor.id,\n\t\t\t\t);\n\t\t\t\tconst currentContainer = this.getViewContainerByViewId(\n\t\t\t\t\tviewDescriptor.id,\n\t\t\t\t);\n\t\t\t\tif (\n\t\t\t\t\tcurrentContainer &&\n\t\t\t\t\tdefaultContainer &&\n\t\t\t\t\tcurrentContainer !== defaultContainer\n\t\t\t\t) {\n\t\t\t\t\tthis.moveViewsWithoutSaving(\n\t\t\t\t\t\t[viewDescriptor],\n\t\t\t\t\t\tcurrentContainer,\n\t\t\t\t\t\tdefaultContainer,\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst defaultContainerLocation =\n\t\t\t\tthis.getDefaultViewContainerLocation(viewContainer);\n\t\t\tconst currentContainerLocation =\n\t\t\t\tthis.getViewContainerLocation(viewContainer);\n\t\t\tif (\n\t\t\t\tdefaultContainerLocation !== null &&\n\t\t\t\tcurrentContainerLocation !== defaultContainerLocation\n\t\t\t) {\n\t\t\t\tthis.moveViewContainerToLocationWithoutSaving(\n\t\t\t\t\tviewContainer,\n\t\t\t\t\tdefaultContainerLocation,\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tthis.cleanUpGeneratedViewContainer(viewContainer.id);\n\t\t}\n\n\t\tthis.viewContainersCustomLocations.clear();\n\t\tthis.viewDescriptorsCustomLocations.clear();\n\t\tthis.saveViewCustomizations();\n\t}\n\n\tisViewContainerRemovedPermanently(viewContainerId: string): boolean {\n\t\treturn (\n\t\t\tthis.isGeneratedContainerId(viewContainerId) &&\n\t\t\t!this.viewContainersCustomLocations.has(viewContainerId)\n\t\t);\n\t}\n\n\tprivate onDidChangeDefaultContainer(\n\t\tviews: IViewDescriptor[],\n\t\tfrom: ViewContainer,\n\t\tto: ViewContainer,\n\t): void {\n\t\tconst viewsToMove = views.filter(\n\t\t\t(view) =>\n\t\t\t\t!this.viewDescriptorsCustomLocations.has(view.id) || // Move views which are not already moved\n\t\t\t\t(!this.viewContainers.includes(from) &&\n\t\t\t\t\tthis.viewDescriptorsCustomLocations.get(view.id) ===\n\t\t\t\t\t\tfrom.id), // Move views which are moved from a removed container\n\t\t);\n\t\tif (viewsToMove.length) {\n\t\t\tthis.moveViewsWithoutSaving(viewsToMove, from, to);\n\t\t}\n\t}\n\n\tprivate reportMovedViews(\n\t\tviews: IViewDescriptor[],\n\t\tfrom: ViewContainer,\n\t\tto: ViewContainer,\n\t): void {\n\t\tconst containerToString = (container: ViewContainer): string => {\n\t\t\tif (\n\t\t\t\tcontainer.id.startsWith(\n\t\t\t\t\tViewDescriptorService.COMMON_CONTAINER_ID_PREFIX,\n\t\t\t\t)\n\t\t\t) {\n\t\t\t\treturn \"custom\";\n\t\t\t}\n\n\t\t\tif (!container.extensionId) {\n\t\t\t\treturn container.id;\n\t\t\t}\n\n\t\t\treturn \"extension\";\n\t\t};\n\n\t\tconst oldLocation = this.getViewContainerLocation(from);\n\t\tconst newLocation = this.getViewContainerLocation(to);\n\t\tconst viewCount = views.length;\n\t\tconst fromContainer = containerToString(from);\n\t\tconst toContainer = containerToString(to);\n\t\tconst fromLocation =\n\t\t\toldLocation === ViewContainerLocation.Panel ? \"panel\" : \"sidebar\";\n\t\tconst toLocation =\n\t\t\tnewLocation === ViewContainerLocation.Panel ? \"panel\" : \"sidebar\";\n\n\t\tinterface ViewDescriptorServiceMoveViewsEvent {\n\t\t\tviewCount: number;\n\t\t\tfromContainer: string;\n\t\t\ttoContainer: string;\n\t\t\tfromLocation: string;\n\t\t\ttoLocation: string;\n\t\t}\n\n\t\ttype ViewDescriptorServiceMoveViewsClassification = {\n\t\t\towner: \"sbatten\";\n\t\t\tcomment: \"Logged when views are moved from one view container to another\";\n\t\t\tviewCount: {\n\t\t\t\tclassification: \"SystemMetaData\";\n\t\t\t\tpurpose: \"FeatureInsight\";\n\t\t\t\tcomment: \"The number of views moved\";\n\t\t\t};\n\t\t\tfromContainer: {\n\t\t\t\tclassification: \"SystemMetaData\";\n\t\t\t\tpurpose: \"FeatureInsight\";\n\t\t\t\tcomment: \"The starting view container of the moved views\";\n\t\t\t};\n\t\t\ttoContainer: {\n\t\t\t\tclassification: \"SystemMetaData\";\n\t\t\t\tpurpose: \"FeatureInsight\";\n\t\t\t\tcomment: \"The destination view container of the moved views\";\n\t\t\t};\n\t\t\tfromLocation: {\n\t\t\t\tclassification: \"SystemMetaData\";\n\t\t\t\tpurpose: \"FeatureInsight\";\n\t\t\t\tcomment: \"The location of the starting view container. e.g. Primary Side Bar\";\n\t\t\t};\n\t\t\ttoLocation: {\n\t\t\t\tclassification: \"SystemMetaData\";\n\t\t\t\tpurpose: \"FeatureInsight\";\n\t\t\t\tcomment: \"The location of the destination view container. e.g. Panel\";\n\t\t\t};\n\t\t};\n\n\t\tthis.telemetryService.publicLog2<\n\t\t\tViewDescriptorServiceMoveViewsEvent,\n\t\t\tViewDescriptorServiceMoveViewsClassification\n\t\t>(\"viewDescriptorService.moveViews\", {\n\t\t\tviewCount,\n\t\t\tfromContainer,\n\t\t\ttoContainer,\n\t\t\tfromLocation,\n\t\t\ttoLocation,\n\t\t});\n\t}\n\n\tprivate moveViewsWithoutSaving(\n\t\tviews: IViewDescriptor[],\n\t\tfrom: ViewContainer,\n\t\tto: ViewContainer,\n\t\tvisibilityState: ViewVisibilityState = ViewVisibilityState.Expand,\n\t): void {\n\t\tthis.removeViews(from, views);\n\t\tthis.addViews(to, views, visibilityState);\n\n\t\tconst oldLocation = this.getViewContainerLocation(from);\n\t\tconst newLocation = this.getViewContainerLocation(to);\n\n\t\tif (oldLocation !== newLocation) {\n\t\t\tthis._onDidChangeLocation.fire({\n\t\t\t\tviews,\n\t\t\t\tfrom: oldLocation,\n\t\t\t\tto: newLocation,\n\t\t\t});\n\t\t}\n\n\t\tthis._onDidChangeContainer.fire({ views, from, to });\n\t}\n\n\tprivate moveViewContainerToLocationWithoutSaving(\n\t\tviewContainer: ViewContainer,\n\t\tlocation: ViewContainerLocation,\n\t\trequestedIndex?: number,\n\t): void {\n\t\tconst from = this.getViewContainerLocation(viewContainer);\n\t\tconst to = location;\n\t\tif (from !== to) {\n\t\t\tconst isGeneratedViewContainer = this.isGeneratedContainerId(\n\t\t\t\tviewContainer.id,\n\t\t\t);\n\t\t\tconst isDefaultViewContainerLocation =\n\t\t\t\tto === this.getDefaultViewContainerLocation(viewContainer);\n\t\t\tif (isGeneratedViewContainer || !isDefaultViewContainerLocation) {\n\t\t\t\tthis.viewContainersCustomLocations.set(viewContainer.id, to);\n\t\t\t} else {\n\t\t\t\tthis.viewContainersCustomLocations.delete(viewContainer.id);\n\t\t\t}\n\t\t\tthis.getOrCreateDefaultViewContainerLocationContextKey(\n\t\t\t\tviewContainer,\n\t\t\t).set(isGeneratedViewContainer || isDefaultViewContainerLocation);\n\n\t\t\tviewContainer.requestedIndex = requestedIndex;\n\t\t\tthis._onDidChangeContainerLocation.fire({\n\t\t\t\tviewContainer,\n\t\t\t\tfrom,\n\t\t\t\tto,\n\t\t\t});\n\n\t\t\tconst views = this.getViewsByContainer(viewContainer);\n\t\t\tthis._onDidChangeLocation.fire({ views, from, to });\n\t\t}\n\t}\n\n\tprivate cleanUpGeneratedViewContainer(viewContainerId: string): void {\n\t\t// Skip if container is not generated\n\t\tif (!this.isGeneratedContainerId(viewContainerId)) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Skip if container has views registered\n\t\tconst viewContainer = this.getViewContainerById(viewContainerId);\n\t\tif (\n\t\t\tviewContainer &&\n\t\t\tthis.getViewContainerModel(viewContainer)?.allViewDescriptors.length\n\t\t) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Skip if container has moved views\n\t\tif (\n\t\t\t[...this.viewDescriptorsCustomLocations.values()].includes(\n\t\t\t\tviewContainerId,\n\t\t\t)\n\t\t) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Deregister the container\n\t\tif (viewContainer) {\n\t\t\tthis.viewContainersRegistry.deregisterViewContainer(viewContainer);\n\t\t}\n\n\t\tthis.viewContainersCustomLocations.delete(viewContainerId);\n\t\tthis.viewContainerBadgeEnablementStates.delete(viewContainerId);\n\n\t\t// Clean up caches of container\n\t\tthis.storageService.remove(\n\t\t\tgetViewsStateStorageId(\n\t\t\t\tviewContainer?.storageId ||\n\t\t\t\t\tgetViewContainerStorageId(viewContainerId),\n\t\t\t),\n\t\t\tStorageScope.PROFILE,\n\t\t);\n\t}\n\n\tprivate registerGeneratedViewContainer(\n\t\tlocation: ViewContainerLocation,\n\t\texistingId?: string,\n\t): ViewContainer {\n\t\tconst id = existingId || this.generateContainerId(location);\n\n\t\tconst container = this.viewContainersRegistry.registerViewContainer(\n\t\t\t{\n\t\t\t\tid,\n\t\t\t\tctorDescriptor: new SyncDescriptor(ViewPaneContainer, [\n\t\t\t\t\tid,\n\t\t\t\t\t{ mergeViewWithContainerWhenSingleView: true },\n\t\t\t\t]),\n\t\t\t\ttitle: { value: id, original: id }, // we don't want to see this so using id\n\t\t\t\ticon:\n\t\t\t\t\tlocation === ViewContainerLocation.Sidebar\n\t\t\t\t\t\t? defaultViewIcon\n\t\t\t\t\t\t: undefined,\n\t\t\t\tstorageId: getViewContainerStorageId(id),\n\t\t\t\thideIfEmpty: true,\n\t\t\t},\n\t\t\tlocation,\n\t\t\t{ doNotRegisterOpenCommand: true },\n\t\t);\n\n\t\tif (this.viewContainersCustomLocations.get(container.id) !== location) {\n\t\t\tthis.viewContainersCustomLocations.set(container.id, location);\n\t\t}\n\n\t\tthis.getOrCreateDefaultViewContainerLocationContextKey(container).set(\n\t\t\ttrue,\n\t\t);\n\n\t\treturn container;\n\t}\n\n\tprivate onDidStorageChange(): void {\n\t\tif (\n\t\t\tJSON.stringify(this.viewCustomizations) !==\n\t\t\tthis.getStoredViewCustomizationsValue() /* This checks if current window changed the value or not */\n\t\t) {\n\t\t\tthis.onDidViewCustomizationsStorageChange();\n\t\t}\n\t}\n\n\tprivate onDidViewCustomizationsStorageChange(): void {\n\t\tthis._viewCustomizations = undefined;\n\n\t\tconst newViewContainerCustomizations = new Map<\n\t\t\tstring,\n\t\t\tViewContainerLocation\n\t\t>(Object.entries(this.viewCustomizations.viewContainerLocations));\n\t\tconst newViewDescriptorCustomizations = new Map<string, string>(\n\t\t\tObject.entries(this.viewCustomizations.viewLocations),\n\t\t);\n\t\tconst viewContainersToMove: [ViewContainer, ViewContainerLocation][] =\n\t\t\t[];\n\t\tconst viewsToMove: {\n\t\t\tviews: IViewDescriptor[];\n\t\t\tfrom: ViewContainer;\n\t\t\tto: ViewContainer;\n\t\t}[] = [];\n\n\t\tfor (const [\n\t\t\tcontainerId,\n\t\t\tlocation,\n\t\t] of newViewContainerCustomizations.entries()) {\n\t\t\tconst container = this.getViewContainerById(containerId);\n\t\t\tif (container) {\n\t\t\t\tif (location !== this.getViewContainerLocation(container)) {\n\t\t\t\t\tviewContainersToMove.push([container, location]);\n\t\t\t\t}\n\t\t\t}\n\t\t\t// If the container is generated and not registered, we register it now\n\t\t\telse if (this.isGeneratedContainerId(containerId)) {\n\t\t\t\tthis.registerGeneratedViewContainer(location, containerId);\n\t\t\t}\n\t\t}\n\n\t\tfor (const viewContainer of this.viewContainers) {\n\t\t\tif (!newViewContainerCustomizations.has(viewContainer.id)) {\n\t\t\t\tconst currentLocation =\n\t\t\t\t\tthis.getViewContainerLocation(viewContainer);\n\t\t\t\tconst defaultLocation =\n\t\t\t\t\tthis.getDefaultViewContainerLocation(viewContainer);\n\t\t\t\tif (currentLocation !== defaultLocation) {\n\t\t\t\t\tviewContainersToMove.push([viewContainer, defaultLocation]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tfor (const [\n\t\t\tviewId,\n\t\t\tviewContainerId,\n\t\t] of newViewDescriptorCustomizations.entries()) {\n\t\t\tconst viewDescriptor = this.getViewDescriptorById(viewId);\n\t\t\tif (viewDescriptor) {\n\t\t\t\tconst prevViewContainer = this.getViewContainerByViewId(viewId);\n\t\t\t\tconst newViewContainer =\n\t\t\t\t\tthis.viewContainersRegistry.get(viewContainerId);\n\t\t\t\tif (\n\t\t\t\t\tprevViewContainer &&\n\t\t\t\t\tnewViewContainer &&\n\t\t\t\t\tnewViewContainer !== prevViewContainer\n\t\t\t\t) {\n\t\t\t\t\tviewsToMove.push({\n\t\t\t\t\t\tviews: [viewDescriptor],\n\t\t\t\t\t\tfrom: prevViewContainer,\n\t\t\t\t\t\tto: newViewContainer,\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// If a value is not present in the cache, it must be reset to default\n\t\tfor (const viewContainer of this.viewContainers) {\n\t\t\tconst viewContainerModel =\n\t\t\t\tthis.getViewContainerModel(viewContainer);\n\t\t\tfor (const viewDescriptor of viewContainerModel.allViewDescriptors) {\n\t\t\t\tif (!newViewDescriptorCustomizations.has(viewDescriptor.id)) {\n\t\t\t\t\tconst currentContainer = this.getViewContainerByViewId(\n\t\t\t\t\t\tviewDescriptor.id,\n\t\t\t\t\t);\n\t\t\t\t\tconst defaultContainer = this.getDefaultContainerById(\n\t\t\t\t\t\tviewDescriptor.id,\n\t\t\t\t\t);\n\t\t\t\t\tif (\n\t\t\t\t\t\tcurrentContainer &&\n\t\t\t\t\t\tdefaultContainer &&\n\t\t\t\t\t\tcurrentContainer !== defaultContainer\n\t\t\t\t\t) {\n\t\t\t\t\t\tviewsToMove.push({\n\t\t\t\t\t\t\tviews: [viewDescriptor],\n\t\t\t\t\t\t\tfrom: currentContainer,\n\t\t\t\t\t\t\tto: defaultContainer,\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Execute View Container Movements\n\t\tfor (const [container, location] of viewContainersToMove) {\n\t\t\tthis.moveViewContainerToLocationWithoutSaving(container, location);\n\t\t}\n\t\t// Execute View Movements\n\t\tfor (const { views, from, to } of viewsToMove) {\n\t\t\tthis.moveViewsWithoutSaving(\n\t\t\t\tviews,\n\t\t\t\tfrom,\n\t\t\t\tto,\n\t\t\t\tViewVisibilityState.Default,\n\t\t\t);\n\t\t}\n\n\t\tthis.viewContainersCustomLocations = newViewContainerCustomizations;\n\t\tthis.viewDescriptorsCustomLocations = newViewDescriptorCustomizations;\n\t}\n\n\t// Generated Container Id Format\n\t// {Common Prefix}.{Location}.{Uniqueness Id}\n\t// Old Format (deprecated)\n\t// {Common Prefix}.{Uniqueness Id}.{Source View Id}\n\tprivate generateContainerId(location: ViewContainerLocation): string {\n\t\treturn `${ViewDescriptorService.COMMON_CONTAINER_ID_PREFIX}.${ViewContainerLocationToString(location)}.${generateUuid()}`;\n\t}\n\n\tprivate saveViewCustomizations(): void {\n\t\tconst viewCustomizations: IViewsCustomizations = {\n\t\t\tviewContainerLocations: {},\n\t\t\tviewLocations: {},\n\t\t\tviewContainerBadgeEnablementStates: {},\n\t\t};\n\n\t\tfor (const [containerId, location] of this\n\t\t\t.viewContainersCustomLocations) {\n\t\t\tconst container = this.getViewContainerById(containerId);\n\t\t\t// Skip if the view container is not a generated container and in default location\n\t\t\tif (\n\t\t\t\tcontainer &&\n\t\t\t\t!this.isGeneratedContainerId(containerId) &&\n\t\t\t\tlocation === this.getDefaultViewContainerLocation(container)\n\t\t\t) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tviewCustomizations.viewContainerLocations[containerId] = location;\n\t\t}\n\n\t\tfor (const [viewId, viewContainerId] of this\n\t\t\t.viewDescriptorsCustomLocations) {\n\t\t\tconst viewContainer = this.getViewContainerById(viewContainerId);\n\t\t\tif (viewContainer) {\n\t\t\t\tconst defaultContainer = this.getDefaultContainerById(viewId);\n\t\t\t\t// Skip if the view is at default location\n\t\t\t\t// https://github.com/microsoft/vscode/issues/90414\n\t\t\t\tif (defaultContainer?.id === viewContainer.id) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t}\n\t\t\tviewCustomizations.viewLocations[viewId] = viewContainerId;\n\t\t}\n\n\t\t// Loop through viewContainerBadgeEnablementStates and save only the ones that are disabled\n\t\tfor (const [viewContainerId, badgeEnablementState] of this\n\t\t\t.viewContainerBadgeEnablementStates) {\n\t\t\tif (badgeEnablementState === false) {\n\t\t\t\tviewCustomizations.viewContainerBadgeEnablementStates[\n\t\t\t\t\tviewContainerId\n\t\t\t\t] = badgeEnablementState;\n\t\t\t}\n\t\t}\n\t\tthis.viewCustomizations = viewCustomizations;\n\t}\n\n\tprivate _viewCustomizations: IViewsCustomizations | undefined;\n\tprivate get viewCustomizations(): IViewsCustomizations {\n\t\tif (!this._viewCustomizations) {\n\t\t\tthis._viewCustomizations = JSON.parse(\n\t\t\t\tthis.getStoredViewCustomizationsValue(),\n\t\t\t) as IViewsCustomizations;\n\t\t\tthis._viewCustomizations.viewContainerLocations =\n\t\t\t\tthis._viewCustomizations.viewContainerLocations ?? {};\n\t\t\tthis._viewCustomizations.viewLocations =\n\t\t\t\tthis._viewCustomizations.viewLocations ?? {};\n\t\t\tthis._viewCustomizations.viewContainerBadgeEnablementStates =\n\t\t\t\tthis._viewCustomizations.viewContainerBadgeEnablementStates ??\n\t\t\t\t{};\n\t\t}\n\t\treturn this._viewCustomizations;\n\t}\n\n\tprivate set viewCustomizations(viewCustomizations: IViewsCustomizations) {\n\t\tconst value = JSON.stringify(viewCustomizations);\n\t\tif (JSON.stringify(this.viewCustomizations) !== value) {\n\t\t\tthis._viewCustomizations = viewCustomizations;\n\t\t\tthis.setStoredViewCustomizationsValue(value);\n\t\t}\n\t}\n\n\tprivate getStoredViewCustomizationsValue(): string {\n\t\treturn this.storageService.get(\n\t\t\tViewDescriptorService.VIEWS_CUSTOMIZATIONS,\n\t\t\tStorageScope.PROFILE,\n\t\t\t\"{}\",\n\t\t);\n\t}\n\n\tprivate setStoredViewCustomizationsValue(value: string): void {\n\t\tthis.storageService.store(\n\t\t\tViewDescriptorService.VIEWS_CUSTOMIZATIONS,\n\t\t\tvalue,\n\t\t\tStorageScope.PROFILE,\n\t\t\tStorageTarget.USER,\n\t\t);\n\t}\n\n\tprivate getViewsByContainer(\n\t\tviewContainer: ViewContainer,\n\t): IViewDescriptor[] {\n\t\tconst result = this.viewsRegistry\n\t\t\t.getViews(viewContainer)\n\t\t\t.filter((viewDescriptor) => {\n\t\t\t\tconst viewDescriptorViewContainerId =\n\t\t\t\t\tthis.viewDescriptorsCustomLocations.get(\n\t\t\t\t\t\tviewDescriptor.id,\n\t\t\t\t\t) ?? viewContainer.id;\n\t\t\t\treturn viewDescriptorViewContainerId === viewContainer.id;\n\t\t\t});\n\n\t\tfor (const [\n\t\t\tviewId,\n\t\t\tviewContainerId,\n\t\t] of this.viewDescriptorsCustomLocations.entries()) {\n\t\t\tif (viewContainerId !== viewContainer.id) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif (this.viewsRegistry.getViewContainer(viewId) === viewContainer) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tconst viewDescriptor = this.getViewDescriptorById(viewId);\n\t\t\tif (viewDescriptor) {\n\t\t\t\tresult.push(viewDescriptor);\n\t\t\t}\n\t\t}\n\n\t\treturn result;\n\t}\n\n\tprivate onDidRegisterViewContainer(viewContainer: ViewContainer): void {\n\t\tconst defaultLocation = this.isGeneratedContainerId(viewContainer.id)\n\t\t\t? true\n\t\t\t: this.getViewContainerLocation(viewContainer) ===\n\t\t\t\tthis.getDefaultViewContainerLocation(viewContainer);\n\t\tthis.getOrCreateDefaultViewContainerLocationContextKey(\n\t\t\tviewContainer,\n\t\t).set(defaultLocation);\n\t\tthis.getOrRegisterViewContainerModel(viewContainer);\n\t}\n\n\tprivate getOrRegisterViewContainerModel(\n\t\tviewContainer: ViewContainer,\n\t): ViewContainerModel {\n\t\tlet viewContainerModel =\n\t\t\tthis.viewContainerModels.get(viewContainer)?.viewContainerModel;\n\n\t\tif (!viewContainerModel) {\n\t\t\tconst disposables = new DisposableStore();\n\t\t\tviewContainerModel = disposables.add(\n\t\t\t\tthis.instantiationService.createInstance(\n\t\t\t\t\tViewContainerModel,\n\t\t\t\t\tviewContainer,\n\t\t\t\t),\n\t\t\t);\n\n\t\t\tthis.onDidChangeActiveViews({\n\t\t\t\tadded: viewContainerModel.activeViewDescriptors,\n\t\t\t\tremoved: [],\n\t\t\t});\n\t\t\tviewContainerModel.onDidChangeActiveViewDescriptors(\n\t\t\t\t(changed) => this.onDidChangeActiveViews(changed),\n\t\t\t\tthis,\n\t\t\t\tdisposables,\n\t\t\t);\n\n\t\t\tthis.onDidChangeVisibleViews({\n\t\t\t\tadded: [...viewContainerModel.visibleViewDescriptors],\n\t\t\t\tremoved: [],\n\t\t\t});\n\t\t\tviewContainerModel.onDidAddVisibleViewDescriptors(\n\t\t\t\t(added) =>\n\t\t\t\t\tthis.onDidChangeVisibleViews({\n\t\t\t\t\t\tadded: added.map(\n\t\t\t\t\t\t\t({ viewDescriptor }) => viewDescriptor,\n\t\t\t\t\t\t),\n\t\t\t\t\t\tremoved: [],\n\t\t\t\t\t}),\n\t\t\t\tthis,\n\t\t\t\tdisposables,\n\t\t\t);\n\t\t\tviewContainerModel.onDidRemoveVisibleViewDescriptors(\n\t\t\t\t(removed) =>\n\t\t\t\t\tthis.onDidChangeVisibleViews({\n\t\t\t\t\t\tadded: [],\n\t\t\t\t\t\tremoved: removed.map(\n\t\t\t\t\t\t\t({ viewDescriptor }) => viewDescriptor,\n\t\t\t\t\t\t),\n\t\t\t\t\t}),\n\t\t\t\tthis,\n\t\t\t\tdisposables,\n\t\t\t);\n\n\t\t\tdisposables.add(\n\t\t\t\ttoDisposable(() =>\n\t\t\t\t\tthis.viewsVisibilityActionDisposables.deleteAndDispose(\n\t\t\t\t\t\tviewContainer,\n\t\t\t\t\t),\n\t\t\t\t),\n\t\t\t);\n\n\t\t\tdisposables.add(\n\t\t\t\tthis.registerResetViewContainerAction(viewContainer),\n\t\t\t);\n\n\t\t\tconst value = {\n\t\t\t\tviewContainerModel: viewContainerModel,\n\t\t\t\tdisposables,\n\t\t\t\tdispose: () => disposables.dispose(),\n\t\t\t};\n\t\t\tthis.viewContainerModels.set(viewContainer, value);\n\n\t\t\t// Register all views that were statically registered to this container\n\t\t\t// Potentially, this is registering something that was handled by another container\n\t\t\t// addViews() handles this by filtering views that are already registered\n\t\t\tthis.onDidRegisterViews([\n\t\t\t\t{\n\t\t\t\t\tviews: this.viewsRegistry.getViews(viewContainer),\n\t\t\t\t\tviewContainer,\n\t\t\t\t},\n\t\t\t]);\n\n\t\t\t// Add views that were registered prior to this view container\n\t\t\tconst viewsToRegister = this.getViewsByContainer(\n\t\t\t\tviewContainer,\n\t\t\t).filter(\n\t\t\t\t(view) =>\n\t\t\t\t\tthis.getDefaultContainerById(view.id) !== viewContainer,\n\t\t\t);\n\t\t\tif (viewsToRegister.length) {\n\t\t\t\tthis.addViews(viewContainer, viewsToRegister);\n\t\t\t\tthis.contextKeyService.bufferChangeEvents(() => {\n\t\t\t\t\tviewsToRegister.forEach((viewDescriptor) =>\n\t\t\t\t\t\tthis.getOrCreateMovableViewContextKey(\n\t\t\t\t\t\t\tviewDescriptor,\n\t\t\t\t\t\t).set(!!viewDescriptor.canMoveView),\n\t\t\t\t\t);\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tif (this.canRegisterViewsVisibilityActions) {\n\t\t\t\tthis.registerViewsVisibilityActions(viewContainer, value);\n\t\t\t}\n\t\t}\n\n\t\treturn viewContainerModel;\n\t}\n\n\tprivate onDidDeregisterViewContainer(viewContainer: ViewContainer): void {\n\t\tthis.viewContainerModels.deleteAndDispose(viewContainer);\n\t\tthis.viewsVisibilityActionDisposables.deleteAndDispose(viewContainer);\n\t}\n\n\tprivate onDidChangeActiveViews({\n\t\tadded,\n\t\tremoved,\n\t}: {\n\t\tadded: ReadonlyArray<IViewDescriptor>;\n\t\tremoved: ReadonlyArray<IViewDescriptor>;\n\t}): void {\n\t\tthis.contextKeyService.bufferChangeEvents(() => {\n\t\t\tadded.forEach((viewDescriptor) =>\n\t\t\t\tthis.getOrCreateActiveViewContextKey(viewDescriptor).set(true),\n\t\t\t);\n\t\t\tremoved.forEach((viewDescriptor) =>\n\t\t\t\tthis.getOrCreateActiveViewContextKey(viewDescriptor).set(false),\n\t\t\t);\n\t\t});\n\t}\n\n\tprivate onDidChangeVisibleViews({\n\t\tadded,\n\t\tremoved,\n\t}: { added: IViewDescriptor[]; removed: IViewDescriptor[] }): void {\n\t\tthis.contextKeyService.bufferChangeEvents(() => {\n\t\t\tadded.forEach((viewDescriptor) =>\n\t\t\t\tthis.getOrCreateVisibleViewContextKey(viewDescriptor).set(true),\n\t\t\t);\n\t\t\tremoved.forEach((viewDescriptor) =>\n\t\t\t\tthis.getOrCreateVisibleViewContextKey(viewDescriptor).set(\n\t\t\t\t\tfalse,\n\t\t\t\t),\n\t\t\t);\n\t\t});\n\t}\n\n\tprivate registerViewsVisibilityActions(\n\t\tviewContainer: ViewContainer,\n\t\t{\n\t\t\tviewContainerModel,\n\t\t\tdisposables,\n\t\t}: {\n\t\t\tviewContainerModel: ViewContainerModel;\n\t\t\tdisposables: DisposableStore;\n\t\t},\n\t): void {\n\t\tthis.viewsVisibilityActionDisposables.deleteAndDispose(viewContainer);\n\t\tthis.viewsVisibilityActionDisposables.set(\n\t\t\tviewContainer,\n\t\t\tthis.registerViewsVisibilityActionsForContainer(viewContainerModel),\n\t\t);\n\t\tdisposables.add(\n\t\t\tEvent.any(\n\t\t\t\tviewContainerModel.onDidChangeActiveViewDescriptors,\n\t\t\t\tviewContainerModel.onDidAddVisibleViewDescriptors,\n\t\t\t\tviewContainerModel.onDidRemoveVisibleViewDescriptors,\n\t\t\t\tviewContainerModel.onDidMoveVisibleViewDescriptors,\n\t\t\t)((e) => {\n\t\t\t\tthis.viewsVisibilityActionDisposables.deleteAndDispose(\n\t\t\t\t\tviewContainer,\n\t\t\t\t);\n\t\t\t\tthis.viewsVisibilityActionDisposables.set(\n\t\t\t\t\tviewContainer,\n\t\t\t\t\tthis.registerViewsVisibilityActionsForContainer(\n\t\t\t\t\t\tviewContainerModel,\n\t\t\t\t\t),\n\t\t\t\t);\n\t\t\t}),\n\t\t);\n\t}\n\n\tprivate registerViewsVisibilityActionsForContainer(\n\t\tviewContainerModel: ViewContainerModel,\n\t): IDisposable {\n\t\tconst disposables = new DisposableStore();\n\t\tviewContainerModel.activeViewDescriptors.forEach(\n\t\t\t(viewDescriptor, index) => {\n\t\t\t\tif (!viewDescriptor.remoteAuthority) {\n\t\t\t\t\tdisposables.add(\n\t\t\t\t\t\tregisterAction2(\n\t\t\t\t\t\t\tclass extends ViewPaneContainerAction<ViewPaneContainer> {\n\t\t\t\t\t\t\t\tconstructor() {\n\t\t\t\t\t\t\t\t\tsuper({\n\t\t\t\t\t\t\t\t\t\tid: `${viewDescriptor.id}.toggleVisibility`,\n\t\t\t\t\t\t\t\t\t\tviewPaneContainerId:\n\t\t\t\t\t\t\t\t\t\t\tviewContainerModel.viewContainer.id,\n\t\t\t\t\t\t\t\t\t\tprecondition:\n\t\t\t\t\t\t\t\t\t\t\tviewDescriptor.canToggleVisibility &&\n\t\t\t\t\t\t\t\t\t\t\t(!viewContainerModel.isVisible(\n\t\t\t\t\t\t\t\t\t\t\t\tviewDescriptor.id,\n\t\t\t\t\t\t\t\t\t\t\t) ||\n\t\t\t\t\t\t\t\t\t\t\t\tviewContainerModel\n\t\t\t\t\t\t\t\t\t\t\t\t\t.visibleViewDescriptors\n\t\t\t\t\t\t\t\t\t\t\t\t\t.length > 1)\n\t\t\t\t\t\t\t\t\t\t\t\t? ContextKeyExpr.true()\n\t\t\t\t\t\t\t\t\t\t\t\t: ContextKeyExpr.false(),\n\t\t\t\t\t\t\t\t\t\ttoggled: ContextKeyExpr.has(\n\t\t\t\t\t\t\t\t\t\t\t`${viewDescriptor.id}.visible`,\n\t\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t\t\ttitle: viewDescriptor.name,\n\t\t\t\t\t\t\t\t\t\tmenu: [\n\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\tid: ViewsSubMenu,\n\t\t\t\t\t\t\t\t\t\t\t\twhen: ContextKeyExpr.equals(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\"viewContainer\",\n\t\t\t\t\t\t\t\t\t\t\t\t\tviewContainerModel\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.viewContainer.id,\n\t\t\t\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t\t\t\t\torder: index,\n\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\tid: MenuId.ViewContainerTitleContext,\n\t\t\t\t\t\t\t\t\t\t\t\twhen: ContextKeyExpr.and(\n\t\t\t\t\t\t\t\t\t\t\t\t\tContextKeyExpr.equals(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"viewContainer\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tviewContainerModel\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.viewContainer.id,\n\t\t\t\t\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t\t\t\t\torder: index,\n\t\t\t\t\t\t\t\t\t\t\t\tgroup: \"1_toggleVisibility\",\n\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\tid: MenuId.ViewTitleContext,\n\t\t\t\t\t\t\t\t\t\t\t\twhen: ContextKeyExpr.and(\n\t\t\t\t\t\t\t\t\t\t\t\t\tContextKeyExpr.or(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t...viewContainerModel.visibleViewDescriptors.map(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(v) =>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tContextKeyExpr.equals(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"view\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tv.id,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t\t\t\t\torder: index,\n\t\t\t\t\t\t\t\t\t\t\t\tgroup: \"2_toggleVisibility\",\n\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tasync runInViewPaneContainer(\n\t\t\t\t\t\t\t\t\tserviceAccessor: ServicesAccessor,\n\t\t\t\t\t\t\t\t\tviewPaneContainer: ViewPaneContainer,\n\t\t\t\t\t\t\t\t): Promise<void> {\n\t\t\t\t\t\t\t\t\tviewPaneContainer.toggleViewVisibility(\n\t\t\t\t\t\t\t\t\t\tviewDescriptor.id,\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t),\n\t\t\t\t\t);\n\t\t\t\t\tdisposables.add(\n\t\t\t\t\t\tregisterAction2(\n\t\t\t\t\t\t\tclass extends ViewPaneContainerAction<ViewPaneContainer> {\n\t\t\t\t\t\t\t\tconstructor() {\n\t\t\t\t\t\t\t\t\tsuper({\n\t\t\t\t\t\t\t\t\t\tid: `${viewDescriptor.id}.removeView`,\n\t\t\t\t\t\t\t\t\t\tviewPaneContainerId:\n\t\t\t\t\t\t\t\t\t\t\tviewContainerModel.viewContainer.id,\n\t\t\t\t\t\t\t\t\t\ttitle: localize(\n\t\t\t\t\t\t\t\t\t\t\t\"hideView\",\n\t\t\t\t\t\t\t\t\t\t\t\"Hide '{0}'\",\n\t\t\t\t\t\t\t\t\t\t\tviewDescriptor.name.value,\n\t\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t\t\tprecondition:\n\t\t\t\t\t\t\t\t\t\t\tviewDescriptor.canToggleVisibility &&\n\t\t\t\t\t\t\t\t\t\t\t(!viewContainerModel.isVisible(\n\t\t\t\t\t\t\t\t\t\t\t\tviewDescriptor.id,\n\t\t\t\t\t\t\t\t\t\t\t) ||\n\t\t\t\t\t\t\t\t\t\t\t\tviewContainerModel\n\t\t\t\t\t\t\t\t\t\t\t\t\t.visibleViewDescriptors\n\t\t\t\t\t\t\t\t\t\t\t\t\t.length > 1)\n\t\t\t\t\t\t\t\t\t\t\t\t? ContextKeyExpr.true()\n\t\t\t\t\t\t\t\t\t\t\t\t: ContextKeyExpr.false(),\n\t\t\t\t\t\t\t\t\t\tmenu: [\n\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\tid: MenuId.ViewTitleContext,\n\t\t\t\t\t\t\t\t\t\t\t\twhen: ContextKeyExpr.and(\n\t\t\t\t\t\t\t\t\t\t\t\t\tContextKeyExpr.equals(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"view\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tviewDescriptor.id,\n\t\t\t\t\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t\t\t\t\t\tContextKeyExpr.has(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t`${viewDescriptor.id}.visible`,\n\t\t\t\t\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t\t\t\t\tgroup: \"1_hide\",\n\t\t\t\t\t\t\t\t\t\t\t\torder: 1,\n\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tasync runInViewPaneContainer(\n\t\t\t\t\t\t\t\t\tserviceAccessor: ServicesAccessor,\n\t\t\t\t\t\t\t\t\tviewPaneContainer: ViewPaneContainer,\n\t\t\t\t\t\t\t\t): Promise<void> {\n\t\t\t\t\t\t\t\t\tviewPaneContainer.toggleViewVisibility(\n\t\t\t\t\t\t\t\t\t\tviewDescriptor.id,\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t),\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t},\n\t\t);\n\t\treturn disposables;\n\t}\n\n\tprivate registerResetViewContainerAction(\n\t\tviewContainer: ViewContainer,\n\t): IDisposable {\n\t\tconst that = this;\n\t\treturn registerAction2(\n\t\t\tclass ResetViewLocationAction extends Action2 {\n\t\t\t\tconstructor() {\n\t\t\t\t\tsuper({\n\t\t\t\t\t\tid: `${viewContainer.id}.resetViewContainerLocation`,\n\t\t\t\t\t\ttitle: localize2(\"resetViewLocation\", \"Reset Location\"),\n\t\t\t\t\t\tmenu: [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tid: MenuId.ViewContainerTitleContext,\n\t\t\t\t\t\t\t\twhen: ContextKeyExpr.or(\n\t\t\t\t\t\t\t\t\tContextKeyExpr.and(\n\t\t\t\t\t\t\t\t\t\tContextKeyExpr.equals(\n\t\t\t\t\t\t\t\t\t\t\t\"viewContainer\",\n\t\t\t\t\t\t\t\t\t\t\tviewContainer.id,\n\t\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t\t\tContextKeyExpr.equals(\n\t\t\t\t\t\t\t\t\t\t\t`${viewContainer.id}.defaultViewContainerLocation`,\n\t\t\t\t\t\t\t\t\t\t\tfalse,\n\t\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t],\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\trun(): void {\n\t\t\t\t\tthat.moveViewContainerToLocation(\n\t\t\t\t\t\tviewContainer,\n\t\t\t\t\t\tthat.getDefaultViewContainerLocation(viewContainer),\n\t\t\t\t\t\tundefined,\n\t\t\t\t\t\tthis.desc.id,\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t},\n\t\t);\n\t}\n\n\tprivate addViews(\n\t\tcontainer: ViewContainer,\n\t\tviews: IViewDescriptor[],\n\t\tvisibilityState: ViewVisibilityState = ViewVisibilityState.Default,\n\t): void {\n\t\tthis.contextKeyService.bufferChangeEvents(() => {\n\t\t\tviews.forEach((view) => {\n\t\t\t\tconst isDefaultContainer =\n\t\t\t\t\tthis.getDefaultContainerById(view.id) === container;\n\t\t\t\tthis.getOrCreateDefaultViewLocationContextKey(view).set(\n\t\t\t\t\tisDefaultContainer,\n\t\t\t\t);\n\t\t\t\tif (isDefaultContainer) {\n\t\t\t\t\tthis.viewDescriptorsCustomLocations.delete(view.id);\n\t\t\t\t} else {\n\t\t\t\t\tthis.viewDescriptorsCustomLocations.set(\n\t\t\t\t\t\tview.id,\n\t\t\t\t\t\tcontainer.id,\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\n\t\tthis.getViewContainerModel(container).add(\n\t\t\tviews.map((view) => {\n\t\t\t\treturn {\n\t\t\t\t\tviewDescriptor: view,\n\t\t\t\t\tcollapsed:\n\t\t\t\t\t\tvisibilityState === ViewVisibilityState.Default\n\t\t\t\t\t\t\t? undefined\n\t\t\t\t\t\t\t: false,\n\t\t\t\t\tvisible:\n\t\t\t\t\t\tvisibilityState === ViewVisibilityState.Default\n\t\t\t\t\t\t\t? undefined\n\t\t\t\t\t\t\t: true,\n\t\t\t\t};\n\t\t\t}),\n\t\t);\n\t}\n\n\tprivate removeViews(\n\t\tcontainer: ViewContainer,\n\t\tviews: IViewDescriptor[],\n\t): void {\n\t\t// Set view default location keys to false\n\t\tthis.contextKeyService.bufferChangeEvents(() => {\n\t\t\tviews.forEach((view) => {\n\t\t\t\tif (\n\t\t\t\t\tthis.viewDescriptorsCustomLocations.get(view.id) ===\n\t\t\t\t\tcontainer.id\n\t\t\t\t) {\n\t\t\t\t\tthis.viewDescriptorsCustomLocations.delete(view.id);\n\t\t\t\t}\n\t\t\t\tthis.getOrCreateDefaultViewLocationContextKey(view).set(false);\n\t\t\t});\n\t\t});\n\n\t\t// Remove the views\n\t\tthis.getViewContainerModel(container).remove(views);\n\t}\n\n\tprivate getOrCreateActiveViewContextKey(\n\t\tviewDescriptor: IViewDescriptor,\n\t): IContextKey<boolean> {\n\t\tconst activeContextKeyId = `${viewDescriptor.id}.active`;\n\t\tlet contextKey = this.activeViewContextKeys.get(activeContextKeyId);\n\t\tif (!contextKey) {\n\t\t\tcontextKey = new RawContextKey(activeContextKeyId, false).bindTo(\n\t\t\t\tthis.contextKeyService,\n\t\t\t);\n\t\t\tthis.activeViewContextKeys.set(activeContextKeyId, contextKey);\n\t\t}\n\t\treturn contextKey;\n\t}\n\n\tprivate getOrCreateVisibleViewContextKey(\n\t\tviewDescriptor: IViewDescriptor,\n\t): IContextKey<boolean> {\n\t\tconst activeContextKeyId = `${viewDescriptor.id}.visible`;\n\t\tlet contextKey = this.activeViewContextKeys.get(activeContextKeyId);\n\t\tif (!contextKey) {\n\t\t\tcontextKey = new RawContextKey(activeContextKeyId, false).bindTo(\n\t\t\t\tthis.contextKeyService,\n\t\t\t);\n\t\t\tthis.activeViewContextKeys.set(activeContextKeyId, contextKey);\n\t\t}\n\t\treturn contextKey;\n\t}\n\n\tprivate getOrCreateMovableViewContextKey(\n\t\tviewDescriptor: IViewDescriptor,\n\t): IContextKey<boolean> {\n\t\tconst movableViewContextKeyId = `${viewDescriptor.id}.canMove`;\n\t\tlet contextKey = this.movableViewContextKeys.get(\n\t\t\tmovableViewContextKeyId,\n\t\t);\n\t\tif (!contextKey) {\n\t\t\tcontextKey = new RawContextKey(\n\t\t\t\tmovableViewContextKeyId,\n\t\t\t\tfalse,\n\t\t\t).bindTo(this.contextKeyService);\n\t\t\tthis.movableViewContextKeys.set(\n\t\t\t\tmovableViewContextKeyId,\n\t\t\t\tcontextKey,\n\t\t\t);\n\t\t}\n\t\treturn contextKey;\n\t}\n\n\tprivate getOrCreateDefaultViewLocationContextKey(\n\t\tviewDescriptor: IViewDescriptor,\n\t): IContextKey<boolean> {\n\t\tconst defaultViewLocationContextKeyId = `${viewDescriptor.id}.defaultViewLocation`;\n\t\tlet contextKey = this.defaultViewLocationContextKeys.get(\n\t\t\tdefaultViewLocationContextKeyId,\n\t\t);\n\t\tif (!contextKey) {\n\t\t\tcontextKey = new RawContextKey(\n\t\t\t\tdefaultViewLocationContextKeyId,\n\t\t\t\tfalse,\n\t\t\t).bindTo(this.contextKeyService);\n\t\t\tthis.defaultViewLocationContextKeys.set(\n\t\t\t\tdefaultViewLocationContextKeyId,\n\t\t\t\tcontextKey,\n\t\t\t);\n\t\t}\n\t\treturn contextKey;\n\t}\n\n\tprivate getOrCreateDefaultViewContainerLocationContextKey(\n\t\tviewContainer: ViewContainer,\n\t): IContextKey<boolean> {\n\t\tconst defaultViewContainerLocationContextKeyId = `${viewContainer.id}.defaultViewContainerLocation`;\n\t\tlet contextKey = this.defaultViewContainerLocationContextKeys.get(\n\t\t\tdefaultViewContainerLocationContextKeyId,\n\t\t);\n\t\tif (!contextKey) {\n\t\t\tcontextKey = new RawContextKey(\n\t\t\t\tdefaultViewContainerLocationContextKeyId,\n\t\t\t\tfalse,\n\t\t\t).bindTo(this.contextKeyService);\n\t\t\tthis.defaultViewContainerLocationContextKeys.set(\n\t\t\t\tdefaultViewContainerLocationContextKeyId,\n\t\t\t\tcontextKey,\n\t\t\t);\n\t\t}\n\t\treturn contextKey;\n\t}\n}\n\nregisterSingleton(\n\tIViewDescriptorService,\n\tViewDescriptorService,\n\tInstantiationType.Delayed,\n);\n"],
  "mappings": "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",
  "names": ["views"]
}
