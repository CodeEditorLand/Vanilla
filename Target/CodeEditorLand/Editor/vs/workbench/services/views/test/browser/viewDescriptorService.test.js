import*as s from"../../../../../nls.js";import o from"assert";import{Extensions as q,ViewContainerLocation as t,ViewContainerLocationToString as M}from"../../../../common/views.js";import{Registry as f}from"../../../../../platform/registry/common/platform.js";import{workbenchInstantiationService as L}from"../../../../test/browser/workbenchTestServices.js";import"../../../../../platform/instantiation/test/common/instantiationServiceMock.js";import{SyncDescriptor as y}from"../../../../../platform/instantiation/common/descriptors.js";import{ViewDescriptorService as $}from"../../browser/viewDescriptorService.js";import{assertIsDefined as z}from"../../../../../base/common/types.js";import{ContextKeyService as P}from"../../../../../platform/contextkey/browser/contextKeyService.js";import{IContextKeyService as O}from"../../../../../platform/contextkey/common/contextkey.js";import{IStorageService as b,StorageScope as S,StorageTarget as E}from"../../../../../platform/storage/common/storage.js";import{generateUuid as g}from"../../../../../base/common/uuid.js";import{compare as B}from"../../../../../base/common/strings.js";import{ensureNoDisposablesAreLeakedInTestSuite as R}from"../../../../../base/test/common/utils.js";const d=f.as(q.ViewsRegistry),h=f.as(q.ViewContainersRegistry),D="testViewContainer",w=h.registerViewContainer({id:`${D}-${g()}`,title:s.localize2("test","test"),ctorDescriptor:new y({})},t.Sidebar),V=h.registerViewContainer({id:`${D}-${g()}`,title:s.localize2("test","test"),ctorDescriptor:new y({})},t.Panel);suite("ViewDescriptorService",()=>{const I=R();let C;setup(()=>{I.add(C=L(void 0,I)),C.stub(O,I.add(C.createInstance(P)))}),teardown(()=>{for(const i of h.all)i.id.startsWith(D)&&d.deregisterViews(d.getViews(i),i)});function m(){return I.add(C.createInstance($))}test("Empty Containers",function(){const i=m(),e=i.getViewContainerModel(w),r=i.getViewContainerModel(V);o.strictEqual(e.allViewDescriptors.length,0,"The sidebar container should have no views yet."),o.strictEqual(r.allViewDescriptors.length,0,"The panel container should have no views yet.")}),test("Register/Deregister",()=>{const i=m(),e=[{id:"view1",ctorDescriptor:null,name:s.localize2("Test View 1","Test View 1"),canMoveView:!0},{id:"view2",ctorDescriptor:null,name:s.localize2("Test View 2","Test View 2"),canMoveView:!0},{id:"view3",ctorDescriptor:null,name:s.localize2("Test View 3","Test View 3"),canMoveView:!0}];d.registerViews(e.slice(0,2),w),d.registerViews(e.slice(2),V);let r=i.getViewContainerModel(w),c=i.getViewContainerModel(V);o.strictEqual(r.activeViewDescriptors.length,2,"Sidebar should have 2 views"),o.strictEqual(c.activeViewDescriptors.length,1,"Panel should have 1 view"),d.deregisterViews(e.slice(0,2),w),d.deregisterViews(e.slice(2),V),r=i.getViewContainerModel(w),c=i.getViewContainerModel(V),o.strictEqual(r.activeViewDescriptors.length,0,"Sidebar should have no views"),o.strictEqual(c.activeViewDescriptors.length,0,"Panel should have no views")}),test("move views to existing containers",async function(){const i=m(),e=[{id:"view1",ctorDescriptor:null,name:s.localize2("Test View 1","Test View 1"),canMoveView:!0},{id:"view2",ctorDescriptor:null,name:s.localize2("Test View 2","Test View 2"),canMoveView:!0},{id:"view3",ctorDescriptor:null,name:s.localize2("Test View 3","Test View 3"),canMoveView:!0}];d.registerViews(e.slice(0,2),w),d.registerViews(e.slice(2),V),i.moveViewsToContainer(e.slice(2),w),i.moveViewsToContainer(e.slice(0,2),V);const r=i.getViewContainerModel(w),c=i.getViewContainerModel(V);o.strictEqual(r.activeViewDescriptors.length,1,"Sidebar should have 2 views"),o.strictEqual(c.activeViewDescriptors.length,2,"Panel should have 1 view"),o.notStrictEqual(r.activeViewDescriptors.indexOf(e[2]),-1,`Sidebar should have ${e[2].name.value}`),o.notStrictEqual(c.activeViewDescriptors.indexOf(e[0]),-1,`Panel should have ${e[0].name.value}`),o.notStrictEqual(c.activeViewDescriptors.indexOf(e[1]),-1,`Panel should have ${e[1].name.value}`)}),test("move views to generated containers",async function(){const i=m(),e=[{id:"view1",ctorDescriptor:null,name:s.localize2("Test View 1","Test View 1"),canMoveView:!0},{id:"view2",ctorDescriptor:null,name:s.localize2("Test View 2","Test View 2"),canMoveView:!0},{id:"view3",ctorDescriptor:null,name:s.localize2("Test View 3","Test View 3"),canMoveView:!0}];d.registerViews(e.slice(0,2),w),d.registerViews(e.slice(2),V),i.moveViewToLocation(e[0],t.Panel),i.moveViewToLocation(e[2],t.Sidebar);let r=i.getViewContainerModel(w),c=i.getViewContainerModel(V);o.strictEqual(r.activeViewDescriptors.length,1,"Sidebar container should have 1 view"),o.strictEqual(c.activeViewDescriptors.length,0,"Panel container should have no views");const a=z(i.getViewContainerByViewId(e[0].id)),n=z(i.getViewContainerByViewId(e[2].id));o.strictEqual(i.getViewContainerLocation(a),t.Panel,"Generated Panel should be in located in the panel"),o.strictEqual(i.getViewContainerLocation(n),t.Sidebar,"Generated Sidebar should be in located in the sidebar"),o.strictEqual(i.getViewContainerLocation(a),i.getViewLocationById(e[0].id),"Panel view location and container location should match"),o.strictEqual(i.getViewContainerLocation(n),i.getViewLocationById(e[2].id),"Sidebar view location and container location should match"),o.strictEqual(i.getDefaultContainerById(e[2].id),V,`${e[2].name.value} has wrong default container`),o.strictEqual(i.getDefaultContainerById(e[0].id),w,`${e[0].name.value} has wrong default container`),i.moveViewToLocation(e[0],t.Sidebar),i.moveViewToLocation(e[2],t.Panel),r=i.getViewContainerModel(w),c=i.getViewContainerModel(V),o.strictEqual(r.activeViewDescriptors.length,1,"Sidebar should have 2 views"),o.strictEqual(c.activeViewDescriptors.length,0,"Panel should have 1 view"),o.strictEqual(i.getViewLocationById(e[0].id),t.Sidebar,"View should be located in the sidebar"),o.strictEqual(i.getViewLocationById(e[2].id),t.Panel,"View should be located in the panel")}),test("move view events",async function(){const i=m(),e=[{id:"view1",ctorDescriptor:null,name:s.localize2("Test View 1","Test View 1"),canMoveView:!0},{id:"view2",ctorDescriptor:null,name:s.localize2("Test View 2","Test View 2"),canMoveView:!0},{id:"view3",ctorDescriptor:null,name:s.localize2("Test View 3","Test View 3"),canMoveView:!0}];let r="",c="";const a=(p,v,u)=>`Moved ${p.id} from ${v.id} to ${u.id}
`,n=(p,v,u)=>`Moved ${p.id} from ${v===t.Sidebar?"Sidebar":"Panel"} to ${u===t.Sidebar?"Sidebar":"Panel"}
`;I.add(i.onDidChangeContainer(({views:p,from:v,to:u})=>{p.forEach(l=>{c+=a(l,v,u)})})),I.add(i.onDidChangeLocation(({views:p,from:v,to:u})=>{p.forEach(l=>{c+=n(l,v,u)})})),d.registerViews(e.slice(0,2),w),d.registerViews(e.slice(2),V),r+=n(e[0],t.Sidebar,t.Panel),i.moveViewToLocation(e[0],t.Panel),r+=a(e[0],w,i.getViewContainerByViewId(e[0].id)),r+=n(e[2],t.Panel,t.Sidebar),i.moveViewToLocation(e[2],t.Sidebar),r+=a(e[2],V,i.getViewContainerByViewId(e[2].id)),r+=n(e[0],t.Panel,t.Sidebar),r+=a(e[0],i.getViewContainerByViewId(e[0].id),w),i.moveViewsToContainer([e[0]],w),r+=n(e[2],t.Sidebar,t.Panel),r+=a(e[2],i.getViewContainerByViewId(e[2].id),V),i.moveViewsToContainer([e[2]],V),r+=n(e[0],t.Sidebar,t.Panel),r+=a(e[0],w,V),i.moveViewsToContainer([e[0]],V),r+=n(e[2],t.Panel,t.Sidebar),r+=a(e[2],V,w),i.moveViewsToContainer([e[2]],w),r+=n(e[1],t.Sidebar,t.Panel),r+=n(e[2],t.Sidebar,t.Panel),r+=a(e[1],w,V),r+=a(e[2],w,V),i.moveViewsToContainer([e[1],e[2]],V),o.strictEqual(c,r,"Event sequence not matching expected sequence")}),test("reset",async function(){const i=m(),e=[{id:"view1",ctorDescriptor:null,name:s.localize2("Test View 1","Test View 1"),canMoveView:!0,order:1},{id:"view2",ctorDescriptor:null,name:s.localize2("Test View 2","Test View 2"),canMoveView:!0,order:2},{id:"view3",ctorDescriptor:null,name:s.localize2("Test View 3","Test View 3"),canMoveView:!0,order:3}];d.registerViews(e.slice(0,2),w),d.registerViews(e.slice(2),V),i.moveViewToLocation(e[0],t.Panel),i.moveViewsToContainer([e[1]],V),i.moveViewToLocation(e[2],t.Sidebar);const r=z(i.getViewContainerByViewId(e[0].id)),c=z(i.getViewContainerByViewId(e[2].id));i.reset();const a=i.getViewContainerModel(w);o.deepStrictEqual(a.allViewDescriptors.map(v=>v.id),["view1","view2"]);const n=i.getViewContainerModel(V);o.deepStrictEqual(n.allViewDescriptors.map(v=>v.id),["view3"]);const p=JSON.parse(C.get(b).get("views.customizations",S.PROFILE));o.deepStrictEqual(p,{viewContainerLocations:{},viewLocations:{},viewContainerBadgeEnablementStates:{}}),o.deepStrictEqual(i.getViewContainerById(r.id),null),o.deepStrictEqual(i.getViewContainerById(c.id),null)}),test("initialize with custom locations",async function(){const i=C.get(b),e=h.registerViewContainer({id:`${D}-${g()}`,title:s.localize2("test","test"),ctorDescriptor:new y({})},t.Sidebar),r=`workbench.views.service.${M(t.Sidebar)}.${g()}`,c={viewContainerLocations:{[r]:t.Sidebar,[e.id]:t.AuxiliaryBar},viewLocations:{view1:r}};i.store("views.customizations",JSON.stringify(c),S.PROFILE,E.USER);const a=[{id:"view1",ctorDescriptor:null,name:s.localize2("Test View 1","Test View 1"),canMoveView:!0},{id:"view2",ctorDescriptor:null,name:s.localize2("Test View 2","Test View 2"),canMoveView:!0},{id:"view3",ctorDescriptor:null,name:s.localize2("Test View 3","Test View 3"),canMoveView:!0},{id:"view4",ctorDescriptor:null,name:s.localize2("Test View 4","Test View 4"),canMoveView:!0}];d.registerViews(a.slice(0,3),w),d.registerViews(a.slice(3),e);const n=m(),p=n.getViewContainerModel(w);o.deepStrictEqual(p.allViewDescriptors.map(l=>l.id),["view2","view3"]);const v=n.getViewContainerModel(n.getViewContainerById(r));o.deepStrictEqual(v.allViewDescriptors.map(l=>l.id),["view1"]);const u=n.getViewContainerModel(e);o.deepStrictEqual(n.getViewContainerLocation(e),t.AuxiliaryBar),o.deepStrictEqual(u.allViewDescriptors.map(l=>l.id),["view4"])}),test("storage change",async function(){const i=m(),e=h.registerViewContainer({id:`${D}-${g()}`,title:s.localize2("test","test"),ctorDescriptor:new y({})},t.Sidebar),r=`workbench.views.service.${M(t.Sidebar)}.${g()}`,c=[{id:"view1",ctorDescriptor:null,name:s.localize2("Test View 1","Test View 1"),canMoveView:!0},{id:"view2",ctorDescriptor:null,name:s.localize2("Test View 2","Test View 2"),canMoveView:!0},{id:"view3",ctorDescriptor:null,name:s.localize2("Test View 3","Test View 3"),canMoveView:!0},{id:"view4",ctorDescriptor:null,name:s.localize2("Test View 4","Test View 4"),canMoveView:!0}];d.registerViews(c.slice(0,3),w),d.registerViews(c.slice(3),e);const a={viewContainerLocations:{[r]:t.Sidebar,[e.id]:t.AuxiliaryBar},viewLocations:{view1:r}};C.get(b).store("views.customizations",JSON.stringify(a),S.PROFILE,E.USER);const n=i.getViewContainerModel(w);o.deepStrictEqual(n.allViewDescriptors.map(u=>u.id),["view2","view3"]);const p=i.getViewContainerModel(i.getViewContainerById(r));o.deepStrictEqual(p.allViewDescriptors.map(u=>u.id),["view1"]);const v=i.getViewContainerModel(e);o.deepStrictEqual(i.getViewContainerLocation(e),t.AuxiliaryBar),o.deepStrictEqual(v.allViewDescriptors.map(u=>u.id),["view4"])}),test("orphan views",async function(){const i=C.get(b),e={viewContainerLocations:{},viewLocations:{view1:`${D}-${g()}`}};i.store("views.customizations",JSON.stringify(e),S.PROFILE,E.USER);const r=[{id:"view1",ctorDescriptor:null,name:s.localize2("Test View 1","Test View 1"),canMoveView:!0,order:1},{id:"view2",ctorDescriptor:null,name:s.localize2("Test View 2","Test View 2"),canMoveView:!0,order:2},{id:"view3",ctorDescriptor:null,name:s.localize2("Test View 3","Test View 3"),canMoveView:!0,order:3}];d.registerViews(r,w);const c=m(),a=c.getViewContainerModel(w);o.deepStrictEqual(a.allViewDescriptors.map(n=>n.id),["view2","view3"]),c.whenExtensionsRegistered(),o.deepStrictEqual(a.allViewDescriptors.map(n=>n.id),["view1","view2","view3"])}),test("orphan view containers",async function(){const i=C.get(b),e=`workbench.views.service.${M(t.Sidebar)}.${g()}`,r={viewContainerLocations:{[e]:t.Sidebar},viewLocations:{}};i.store("views.customizations",JSON.stringify(r),S.PROFILE,E.USER);const c=[{id:"view1",ctorDescriptor:null,name:s.localize2("Test View 1","Test View 1"),canMoveView:!0,order:1}];d.registerViews(c,w);const a=m();a.whenExtensionsRegistered(),o.deepStrictEqual(a.getViewContainerById(e),null),o.deepStrictEqual(a.isViewContainerRemovedPermanently(e),!0);const n=JSON.parse(i.get("views.customizations",S.PROFILE));o.deepStrictEqual(n,{viewContainerLocations:{},viewLocations:{},viewContainerBadgeEnablementStates:{}})}),test("custom locations take precedence when default view container of views change",async function(){const i=C.get(b),e=h.registerViewContainer({id:`${D}-${g()}`,title:s.localize2("test","test"),ctorDescriptor:new y({})},t.Sidebar),r=`workbench.views.service.${M(t.Sidebar)}.${g()}`,c={viewContainerLocations:{[r]:t.Sidebar,[e.id]:t.AuxiliaryBar},viewLocations:{view1:r}};i.store("views.customizations",JSON.stringify(c),S.PROFILE,E.USER);const a=[{id:"view1",ctorDescriptor:null,name:s.localize2("Test View 1","Test View 1"),canMoveView:!0},{id:"view2",ctorDescriptor:null,name:s.localize2("Test View 2","Test View 2"),canMoveView:!0},{id:"view3",ctorDescriptor:null,name:s.localize2("Test View 3","Test View 3"),canMoveView:!0},{id:"view4",ctorDescriptor:null,name:s.localize2("Test View 4","Test View 4"),canMoveView:!0}];d.registerViews(a.slice(0,3),w),d.registerViews(a.slice(3),e);const n=m();d.moveViews([a[0],a[1]],V);const p=n.getViewContainerModel(w);o.deepStrictEqual(p.allViewDescriptors.map(T=>T.id),["view3"]);const v=n.getViewContainerModel(V);o.deepStrictEqual(v.allViewDescriptors.map(T=>T.id),["view2"]);const u=n.getViewContainerModel(n.getViewContainerById(r));o.deepStrictEqual(u.allViewDescriptors.map(T=>T.id),["view1"]);const l=n.getViewContainerModel(e);o.deepStrictEqual(n.getViewContainerLocation(e),t.AuxiliaryBar),o.deepStrictEqual(l.allViewDescriptors.map(T=>T.id),["view4"])}),test("view containers with not existing views are not removed from customizations",async function(){const i=C.get(b),e=h.registerViewContainer({id:`${D}-${g()}`,title:s.localize2("test","test"),ctorDescriptor:new y({})},t.Sidebar),r=`workbench.views.service.${M(t.Sidebar)}.${g()}`,c={viewContainerLocations:{[r]:t.Sidebar,[e.id]:t.AuxiliaryBar},viewLocations:{view5:r}};i.store("views.customizations",JSON.stringify(c),S.PROFILE,E.USER);const a=[{id:"view1",ctorDescriptor:null,name:s.localize2("Test View 1","Test View 1"),canMoveView:!0}];d.registerViews(a,e);const n=m();n.whenExtensionsRegistered();const p=n.getViewContainerModel(e);o.deepStrictEqual(n.getViewContainerLocation(e),t.AuxiliaryBar),o.deepStrictEqual(p.allViewDescriptors.map(u=>u.id),["view1"]);const v=JSON.parse(i.get("views.customizations",S.PROFILE));o.deepStrictEqual(v,c)}),test("storage change also updates locations even if views do not exists and views are registered later",async function(){const i=C.get(b),e=m(),r=`workbench.views.service.${M(t.AuxiliaryBar)}.${g()}`,c={viewContainerLocations:{[r]:t.AuxiliaryBar},viewLocations:{view1:r}};i.store("views.customizations",JSON.stringify(c),S.PROFILE,E.USER);const a=h.registerViewContainer({id:`${D}-${g()}`,title:s.localize2("test","test"),ctorDescriptor:new y({})},t.Sidebar),n=[{id:"view1",ctorDescriptor:null,name:s.localize2("Test View 1","Test View 1"),canMoveView:!0},{id:"view2",ctorDescriptor:null,name:s.localize2("Test View 2","Test View 2"),canMoveView:!0}];d.registerViews(n,a),e.whenExtensionsRegistered();const p=e.getViewContainerModel(a);o.deepStrictEqual(p.allViewDescriptors.map(l=>l.id),["view2"]);const v=e.getViewContainerById(r);o.deepStrictEqual(e.getViewContainerLocation(v),t.AuxiliaryBar);const u=e.getViewContainerModel(v);o.deepStrictEqual(u.allViewDescriptors.map(l=>l.id),["view1"])}),test("storage change move views and retain visibility state",async function(){const i=C.get(b),e=m(),r=h.registerViewContainer({id:`${D}-${g()}`,title:s.localize2("test","test"),ctorDescriptor:new y({})},t.Sidebar),c=[{id:"view1",ctorDescriptor:null,name:s.localize2("Test View 1","Test View 1"),canMoveView:!0,canToggleVisibility:!0},{id:"view2",ctorDescriptor:null,name:s.localize2("Test View 2","Test View 2"),canMoveView:!0}];d.registerViews(c,r),e.whenExtensionsRegistered();const a=e.getViewContainerModel(r);a.setVisible("view1",!1);const n=`workbench.views.service.${M(t.AuxiliaryBar)}.${g()}`,p={viewContainerLocations:{[n]:t.AuxiliaryBar},viewLocations:{view1:n}};i.store("views.customizations",JSON.stringify(p),S.PROFILE,E.USER);const v=e.getViewContainerById(n),u=e.getViewContainerModel(v);o.deepStrictEqual(a.allViewDescriptors.map(l=>l.id),["view2"]),o.deepStrictEqual(e.getViewContainerLocation(v),t.AuxiliaryBar),o.deepStrictEqual(u.allViewDescriptors.map(l=>l.id),["view1"]),i.store("views.customizations",JSON.stringify({}),S.PROFILE,E.USER),o.deepStrictEqual(a.allViewDescriptors.map(l=>l.id).sort((l,T)=>B(l,T)),["view1","view2"]),o.deepStrictEqual(a.visibleViewDescriptors.map(l=>l.id),["view2"]),o.deepStrictEqual(u.allViewDescriptors.map(l=>l.id),[])})});
