{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/views/test/browser/viewContainerModel.test.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as nls from '../../../../../nls.js';\nimport assert from 'assert';\nimport * as sinon from 'sinon';\nimport { IViewsRegistry, IViewDescriptor, IViewContainersRegistry, Extensions as ViewContainerExtensions, ViewContainerLocation, IViewContainerModel, IViewDescriptorService, ViewContainer } from '../../../../common/views.js';\nimport { IDisposable, dispose } from '../../../../../base/common/lifecycle.js';\nimport { move } from '../../../../../base/common/arrays.js';\nimport { workbenchInstantiationService } from '../../../../test/browser/workbenchTestServices.js';\nimport { ContextKeyExpr, IContextKeyService } from '../../../../../platform/contextkey/common/contextkey.js';\nimport { TestInstantiationService } from '../../../../../platform/instantiation/test/common/instantiationServiceMock.js';\nimport { ContextKeyService } from '../../../../../platform/contextkey/browser/contextKeyService.js';\nimport { ViewDescriptorService } from '../../browser/viewDescriptorService.js';\nimport { Registry } from '../../../../../platform/registry/common/platform.js';\nimport { SyncDescriptor } from '../../../../../platform/instantiation/common/descriptors.js';\nimport { IStorageService, StorageScope, StorageTarget } from '../../../../../platform/storage/common/storage.js';\nimport { Event } from '../../../../../base/common/event.js';\nimport { getViewsStateStorageId } from '../../common/viewContainerModel.js';\nimport { runWithFakedTimers } from '../../../../../base/test/common/timeTravelScheduler.js';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from '../../../../../base/test/common/utils.js';\n\nconst ViewContainerRegistry = Registry.as<IViewContainersRegistry>(ViewContainerExtensions.ViewContainersRegistry);\nconst ViewsRegistry = Registry.as<IViewsRegistry>(ViewContainerExtensions.ViewsRegistry);\n\nclass ViewDescriptorSequence {\n\n\treadonly elements: IViewDescriptor[];\n\tprivate disposables: IDisposable[] = [];\n\n\tconstructor(model: IViewContainerModel) {\n\t\tthis.elements = [...model.visibleViewDescriptors];\n\t\tmodel.onDidAddVisibleViewDescriptors(added => added.forEach(({ viewDescriptor, index }) => this.elements.splice(index, 0, viewDescriptor)), null, this.disposables);\n\t\tmodel.onDidRemoveVisibleViewDescriptors(removed => removed.sort((a, b) => b.index - a.index).forEach(({ index }) => this.elements.splice(index, 1)), null, this.disposables);\n\t\tmodel.onDidMoveVisibleViewDescriptors(({ from, to }) => move(this.elements, from.index, to.index), null, this.disposables);\n\t}\n\n\tdispose() {\n\t\tthis.disposables = dispose(this.disposables);\n\t}\n}\n\nsuite('ViewContainerModel', () => {\n\n\tlet container: ViewContainer;\n\tconst disposableStore = ensureNoDisposablesAreLeakedInTestSuite();\n\tlet contextKeyService: IContextKeyService;\n\tlet viewDescriptorService: IViewDescriptorService;\n\tlet storageService: IStorageService;\n\n\tsetup(() => {\n\t\tconst instantiationService: TestInstantiationService = workbenchInstantiationService(undefined, disposableStore);\n\t\tcontextKeyService = disposableStore.add(instantiationService.createInstance(ContextKeyService));\n\t\tinstantiationService.stub(IContextKeyService, contextKeyService);\n\t\tstorageService = instantiationService.get(IStorageService);\n\t\tviewDescriptorService = disposableStore.add(instantiationService.createInstance(ViewDescriptorService));\n\t});\n\n\tteardown(() => {\n\t\tViewsRegistry.deregisterViews(ViewsRegistry.getViews(container), container);\n\t\tViewContainerRegistry.deregisterViewContainer(container);\n\t});\n\n\ttest('empty model', function () {\n\t\tcontainer = ViewContainerRegistry.registerViewContainer({ id: 'test', title: nls.localize2('test', 'test'), ctorDescriptor: new SyncDescriptor(<any>{}) }, ViewContainerLocation.Sidebar);\n\t\tconst testObject = viewDescriptorService.getViewContainerModel(container);\n\t\tassert.strictEqual(testObject.visibleViewDescriptors.length, 0);\n\t});\n\n\ttest('register/unregister', () => {\n\t\tcontainer = ViewContainerRegistry.registerViewContainer({ id: 'test', title: nls.localize2('test', 'test'), ctorDescriptor: new SyncDescriptor(<any>{}) }, ViewContainerLocation.Sidebar);\n\t\tconst testObject = viewDescriptorService.getViewContainerModel(container);\n\t\tconst target = disposableStore.add(new ViewDescriptorSequence(testObject));\n\n\t\tassert.strictEqual(testObject.visibleViewDescriptors.length, 0);\n\t\tassert.strictEqual(target.elements.length, 0);\n\n\t\tconst viewDescriptor: IViewDescriptor = {\n\t\t\tid: 'view1',\n\t\t\tctorDescriptor: null!,\n\t\t\tname: nls.localize2('Test View 1', 'Test View 1')\n\t\t};\n\n\t\tViewsRegistry.registerViews([viewDescriptor], container);\n\n\t\tassert.strictEqual(testObject.visibleViewDescriptors.length, 1);\n\t\tassert.strictEqual(target.elements.length, 1);\n\t\tassert.deepStrictEqual(testObject.visibleViewDescriptors[0], viewDescriptor);\n\t\tassert.deepStrictEqual(target.elements[0], viewDescriptor);\n\n\t\tViewsRegistry.deregisterViews([viewDescriptor], container);\n\n\t\tassert.strictEqual(testObject.visibleViewDescriptors.length, 0);\n\t\tassert.strictEqual(target.elements.length, 0);\n\t});\n\n\ttest('when contexts', () => runWithFakedTimers<void>({ useFakeTimers: true }, async () => {\n\t\tcontainer = ViewContainerRegistry.registerViewContainer({ id: 'test', title: nls.localize2('test', 'test'), ctorDescriptor: new SyncDescriptor(<any>{}) }, ViewContainerLocation.Sidebar);\n\t\tconst testObject = viewDescriptorService.getViewContainerModel(container);\n\t\tconst target = disposableStore.add(new ViewDescriptorSequence(testObject));\n\t\tassert.strictEqual(testObject.visibleViewDescriptors.length, 0);\n\t\tassert.strictEqual(target.elements.length, 0);\n\n\t\tconst viewDescriptor: IViewDescriptor = {\n\t\t\tid: 'view1',\n\t\t\tctorDescriptor: null!,\n\t\t\tname: nls.localize2('Test View 1', 'Test View 1'),\n\t\t\twhen: ContextKeyExpr.equals('showview1', true)\n\t\t};\n\n\t\tViewsRegistry.registerViews([viewDescriptor], container);\n\t\tassert.strictEqual(testObject.visibleViewDescriptors.length, 0, 'view should not appear since context isnt in');\n\t\tassert.strictEqual(target.elements.length, 0);\n\n\t\tconst key = contextKeyService.createKey<boolean>('showview1', false);\n\t\tassert.strictEqual(testObject.visibleViewDescriptors.length, 0, 'view should still not appear since showview1 isnt true');\n\t\tassert.strictEqual(target.elements.length, 0);\n\n\t\tkey.set(true);\n\t\tawait new Promise(c => setTimeout(c, 30));\n\t\tassert.strictEqual(testObject.visibleViewDescriptors.length, 1, 'view should appear');\n\t\tassert.strictEqual(target.elements.length, 1);\n\t\tassert.deepStrictEqual(testObject.visibleViewDescriptors[0], viewDescriptor);\n\t\tassert.strictEqual(target.elements[0], viewDescriptor);\n\n\t\tkey.set(false);\n\t\tawait new Promise(c => setTimeout(c, 30));\n\t\tassert.strictEqual(testObject.visibleViewDescriptors.length, 0, 'view should disappear');\n\t\tassert.strictEqual(target.elements.length, 0);\n\n\t\tViewsRegistry.deregisterViews([viewDescriptor], container);\n\t\tassert.strictEqual(testObject.visibleViewDescriptors.length, 0, 'view should not be there anymore');\n\t\tassert.strictEqual(target.elements.length, 0);\n\n\t\tkey.set(true);\n\t\tawait new Promise(c => setTimeout(c, 30));\n\t\tassert.strictEqual(testObject.visibleViewDescriptors.length, 0, 'view should not be there anymore');\n\t\tassert.strictEqual(target.elements.length, 0);\n\t}));\n\n\ttest('when contexts - multiple', () => runWithFakedTimers<void>({ useFakeTimers: true }, async () => {\n\t\tcontainer = ViewContainerRegistry.registerViewContainer({ id: 'test', title: nls.localize2('test', 'test'), ctorDescriptor: new SyncDescriptor(<any>{}) }, ViewContainerLocation.Sidebar);\n\t\tconst testObject = viewDescriptorService.getViewContainerModel(container);\n\t\tconst target = disposableStore.add(new ViewDescriptorSequence(testObject));\n\t\tconst view1: IViewDescriptor = { id: 'view1', ctorDescriptor: null!, name: nls.localize2('Test View 1', 'Test View 1') };\n\t\tconst view2: IViewDescriptor = { id: 'view2', ctorDescriptor: null!, name: nls.localize2('Test View 2', 'Test View 2'), when: ContextKeyExpr.equals('showview2', true) };\n\n\t\tViewsRegistry.registerViews([view1, view2], container);\n\t\tassert.deepStrictEqual(testObject.visibleViewDescriptors, [view1], 'only view1 should be visible');\n\t\tassert.deepStrictEqual(target.elements, [view1], 'only view1 should be visible');\n\n\t\tconst key = contextKeyService.createKey<boolean>('showview2', false);\n\t\tassert.deepStrictEqual(testObject.visibleViewDescriptors, [view1], 'still only view1 should be visible');\n\t\tassert.deepStrictEqual(target.elements, [view1], 'still only view1 should be visible');\n\n\t\tkey.set(true);\n\t\tawait new Promise(c => setTimeout(c, 30));\n\t\tassert.deepStrictEqual(testObject.visibleViewDescriptors, [view1, view2], 'both views should be visible');\n\t\tassert.deepStrictEqual(target.elements, [view1, view2], 'both views should be visible');\n\n\t\tViewsRegistry.deregisterViews([view1, view2], container);\n\t}));\n\n\ttest('when contexts - multiple 2', () => runWithFakedTimers<void>({ useFakeTimers: true }, async () => {\n\t\tcontainer = ViewContainerRegistry.registerViewContainer({ id: 'test', title: nls.localize2('test', 'test'), ctorDescriptor: new SyncDescriptor(<any>{}) }, ViewContainerLocation.Sidebar);\n\t\tconst testObject = viewDescriptorService.getViewContainerModel(container);\n\t\tconst target = disposableStore.add(new ViewDescriptorSequence(testObject));\n\t\tconst view1: IViewDescriptor = { id: 'view1', ctorDescriptor: null!, name: nls.localize2('Test View 1', 'Test View 1'), when: ContextKeyExpr.equals('showview1', true) };\n\t\tconst view2: IViewDescriptor = { id: 'view2', ctorDescriptor: null!, name: nls.localize2('Test View 2', 'Test View 2') };\n\n\t\tViewsRegistry.registerViews([view1, view2], container);\n\t\tassert.deepStrictEqual(testObject.visibleViewDescriptors, [view2], 'only view2 should be visible');\n\t\tassert.deepStrictEqual(target.elements, [view2], 'only view2 should be visible');\n\n\t\tconst key = contextKeyService.createKey<boolean>('showview1', false);\n\t\tassert.deepStrictEqual(testObject.visibleViewDescriptors, [view2], 'still only view2 should be visible');\n\t\tassert.deepStrictEqual(target.elements, [view2], 'still only view2 should be visible');\n\n\t\tkey.set(true);\n\t\tawait new Promise(c => setTimeout(c, 30));\n\t\tassert.deepStrictEqual(testObject.visibleViewDescriptors, [view1, view2], 'both views should be visible');\n\t\tassert.deepStrictEqual(target.elements, [view1, view2], 'both views should be visible');\n\n\t\tViewsRegistry.deregisterViews([view1, view2], container);\n\t}));\n\n\ttest('setVisible', () => {\n\t\tcontainer = ViewContainerRegistry.registerViewContainer({ id: 'test', title: nls.localize2('test', 'test'), ctorDescriptor: new SyncDescriptor(<any>{}) }, ViewContainerLocation.Sidebar);\n\t\tconst testObject = viewDescriptorService.getViewContainerModel(container);\n\t\tconst target = disposableStore.add(new ViewDescriptorSequence(testObject));\n\t\tconst view1: IViewDescriptor = { id: 'view1', ctorDescriptor: null!, name: nls.localize2('Test View 1', 'Test View 1'), canToggleVisibility: true };\n\t\tconst view2: IViewDescriptor = { id: 'view2', ctorDescriptor: null!, name: nls.localize2('Test View 2', 'Test View 2'), canToggleVisibility: true };\n\t\tconst view3: IViewDescriptor = { id: 'view3', ctorDescriptor: null!, name: nls.localize2('Test View 3', 'Test View 3'), canToggleVisibility: true };\n\n\t\tViewsRegistry.registerViews([view1, view2, view3], container);\n\t\tassert.deepStrictEqual(testObject.visibleViewDescriptors, [view1, view2, view3]);\n\t\tassert.deepStrictEqual(target.elements, [view1, view2, view3]);\n\n\t\ttestObject.setVisible('view2', true);\n\t\tassert.deepStrictEqual(testObject.visibleViewDescriptors, [view1, view2, view3], 'nothing should happen');\n\t\tassert.deepStrictEqual(target.elements, [view1, view2, view3]);\n\n\t\ttestObject.setVisible('view2', false);\n\t\tassert.deepStrictEqual(testObject.visibleViewDescriptors, [view1, view3], 'view2 should hide');\n\t\tassert.deepStrictEqual(target.elements, [view1, view3]);\n\n\t\ttestObject.setVisible('view1', false);\n\t\tassert.deepStrictEqual(testObject.visibleViewDescriptors, [view3], 'view1 should hide');\n\t\tassert.deepStrictEqual(target.elements, [view3]);\n\n\t\ttestObject.setVisible('view3', false);\n\t\tassert.deepStrictEqual(testObject.visibleViewDescriptors, [], 'view3 shoud hide');\n\t\tassert.deepStrictEqual(target.elements, []);\n\n\t\ttestObject.setVisible('view1', true);\n\t\tassert.deepStrictEqual(testObject.visibleViewDescriptors, [view1], 'view1 should show');\n\t\tassert.deepStrictEqual(target.elements, [view1]);\n\n\t\ttestObject.setVisible('view3', true);\n\t\tassert.deepStrictEqual(testObject.visibleViewDescriptors, [view1, view3], 'view3 should show');\n\t\tassert.deepStrictEqual(target.elements, [view1, view3]);\n\n\t\ttestObject.setVisible('view2', true);\n\t\tassert.deepStrictEqual(testObject.visibleViewDescriptors, [view1, view2, view3], 'view2 should show');\n\t\tassert.deepStrictEqual(target.elements, [view1, view2, view3]);\n\n\t\tViewsRegistry.deregisterViews([view1, view2, view3], container);\n\t\tassert.deepStrictEqual(testObject.visibleViewDescriptors, []);\n\t\tassert.deepStrictEqual(target.elements, []);\n\t});\n\n\ttest('move', () => {\n\t\tcontainer = ViewContainerRegistry.registerViewContainer({ id: 'test', title: nls.localize2('test', 'test'), ctorDescriptor: new SyncDescriptor(<any>{}) }, ViewContainerLocation.Sidebar);\n\t\tconst testObject = viewDescriptorService.getViewContainerModel(container);\n\t\tconst target = disposableStore.add(new ViewDescriptorSequence(testObject));\n\t\tconst view1: IViewDescriptor = { id: 'view1', ctorDescriptor: null!, name: nls.localize2('Test View 1', 'Test View 1') };\n\t\tconst view2: IViewDescriptor = { id: 'view2', ctorDescriptor: null!, name: nls.localize2('Test View 2', 'Test View 2') };\n\t\tconst view3: IViewDescriptor = { id: 'view3', ctorDescriptor: null!, name: nls.localize2('Test View 3', 'Test View 3') };\n\n\t\tViewsRegistry.registerViews([view1, view2, view3], container);\n\t\tassert.deepStrictEqual(testObject.visibleViewDescriptors, [view1, view2, view3], 'model views should be OK');\n\t\tassert.deepStrictEqual(target.elements, [view1, view2, view3], 'sql views should be OK');\n\n\t\ttestObject.move('view3', 'view1');\n\t\tassert.deepStrictEqual(testObject.visibleViewDescriptors, [view3, view1, view2], 'view3 should go to the front');\n\t\tassert.deepStrictEqual(target.elements, [view3, view1, view2]);\n\n\t\ttestObject.move('view1', 'view2');\n\t\tassert.deepStrictEqual(testObject.visibleViewDescriptors, [view3, view2, view1], 'view1 should go to the end');\n\t\tassert.deepStrictEqual(target.elements, [view3, view2, view1]);\n\n\t\ttestObject.move('view1', 'view3');\n\t\tassert.deepStrictEqual(testObject.visibleViewDescriptors, [view1, view3, view2], 'view1 should go to the front');\n\t\tassert.deepStrictEqual(target.elements, [view1, view3, view2]);\n\n\t\ttestObject.move('view2', 'view3');\n\t\tassert.deepStrictEqual(testObject.visibleViewDescriptors, [view1, view2, view3], 'view2 should go to the middle');\n\t\tassert.deepStrictEqual(target.elements, [view1, view2, view3]);\n\t});\n\n\ttest('view states', () => runWithFakedTimers<void>({ useFakeTimers: true }, async () => {\n\t\tstorageService.store(`${container.id}.state.hidden`, JSON.stringify([{ id: 'view1', isHidden: true }]), StorageScope.PROFILE, StorageTarget.MACHINE);\n\t\tcontainer = ViewContainerRegistry.registerViewContainer({ id: 'test', title: nls.localize2('test', 'test'), ctorDescriptor: new SyncDescriptor(<any>{}) }, ViewContainerLocation.Sidebar);\n\t\tconst testObject = viewDescriptorService.getViewContainerModel(container);\n\t\tconst target = disposableStore.add(new ViewDescriptorSequence(testObject));\n\n\t\tassert.strictEqual(testObject.visibleViewDescriptors.length, 0);\n\t\tassert.strictEqual(target.elements.length, 0);\n\n\t\tconst viewDescriptor: IViewDescriptor = {\n\t\t\tid: 'view1',\n\t\t\tctorDescriptor: null!,\n\t\t\tname: nls.localize2('Test View 1', 'Test View 1')\n\t\t};\n\n\t\tViewsRegistry.registerViews([viewDescriptor], container);\n\t\tassert.strictEqual(testObject.visibleViewDescriptors.length, 0, 'view should not appear since it was set not visible in view state');\n\t\tassert.strictEqual(target.elements.length, 0);\n\t}));\n\n\ttest('view states and when contexts', () => runWithFakedTimers<void>({ useFakeTimers: true }, async () => {\n\t\tstorageService.store(`${container.id}.state.hidden`, JSON.stringify([{ id: 'view1', isHidden: true }]), StorageScope.PROFILE, StorageTarget.MACHINE);\n\t\tcontainer = ViewContainerRegistry.registerViewContainer({ id: 'test', title: nls.localize2('test', 'test'), ctorDescriptor: new SyncDescriptor(<any>{}) }, ViewContainerLocation.Sidebar);\n\t\tconst testObject = viewDescriptorService.getViewContainerModel(container);\n\t\tconst target = disposableStore.add(new ViewDescriptorSequence(testObject));\n\n\t\tassert.strictEqual(testObject.visibleViewDescriptors.length, 0);\n\t\tassert.strictEqual(target.elements.length, 0);\n\n\t\tconst viewDescriptor: IViewDescriptor = {\n\t\t\tid: 'view1',\n\t\t\tctorDescriptor: null!,\n\t\t\tname: nls.localize2('Test View 1', 'Test View 1'),\n\t\t\twhen: ContextKeyExpr.equals('showview1', true)\n\t\t};\n\n\t\tViewsRegistry.registerViews([viewDescriptor], container);\n\t\tassert.strictEqual(testObject.visibleViewDescriptors.length, 0, 'view should not appear since context isnt in');\n\t\tassert.strictEqual(target.elements.length, 0);\n\n\t\tconst key = contextKeyService.createKey<boolean>('showview1', false);\n\t\tassert.strictEqual(testObject.visibleViewDescriptors.length, 0, 'view should still not appear since showview1 isnt true');\n\t\tassert.strictEqual(target.elements.length, 0);\n\n\t\tkey.set(true);\n\t\tawait new Promise(c => setTimeout(c, 30));\n\t\tassert.strictEqual(testObject.visibleViewDescriptors.length, 0, 'view should still not appear since it was set not visible in view state');\n\t\tassert.strictEqual(target.elements.length, 0);\n\t}));\n\n\ttest('view states and when contexts multiple views', () => runWithFakedTimers<void>({ useFakeTimers: true }, async () => {\n\t\tstorageService.store(`${container.id}.state.hidden`, JSON.stringify([{ id: 'view1', isHidden: true }]), StorageScope.PROFILE, StorageTarget.MACHINE);\n\t\tcontainer = ViewContainerRegistry.registerViewContainer({ id: 'test', title: nls.localize2('test', 'test'), ctorDescriptor: new SyncDescriptor(<any>{}) }, ViewContainerLocation.Sidebar);\n\t\tconst testObject = viewDescriptorService.getViewContainerModel(container);\n\t\tconst target = disposableStore.add(new ViewDescriptorSequence(testObject));\n\n\t\tassert.strictEqual(testObject.visibleViewDescriptors.length, 0);\n\t\tassert.strictEqual(target.elements.length, 0);\n\n\t\tconst view1: IViewDescriptor = {\n\t\t\tid: 'view1',\n\t\t\tctorDescriptor: null!,\n\t\t\tname: nls.localize2('Test View 1', 'Test View 1'),\n\t\t\twhen: ContextKeyExpr.equals('showview', true)\n\t\t};\n\t\tconst view2: IViewDescriptor = {\n\t\t\tid: 'view2',\n\t\t\tctorDescriptor: null!,\n\t\t\tname: nls.localize2('Test View 2', 'Test View 2'),\n\t\t};\n\t\tconst view3: IViewDescriptor = {\n\t\t\tid: 'view3',\n\t\t\tctorDescriptor: null!,\n\t\t\tname: nls.localize2('Test View 3', 'Test View 3'),\n\t\t\twhen: ContextKeyExpr.equals('showview', true)\n\t\t};\n\n\t\tViewsRegistry.registerViews([view1, view2, view3], container);\n\t\tassert.deepStrictEqual(testObject.visibleViewDescriptors, [view2], 'Only view2 should be visible');\n\t\tassert.deepStrictEqual(target.elements, [view2]);\n\n\t\tconst key = contextKeyService.createKey<boolean>('showview', false);\n\t\tassert.deepStrictEqual(testObject.visibleViewDescriptors, [view2], 'Only view2 should be visible');\n\t\tassert.deepStrictEqual(target.elements, [view2]);\n\n\t\tkey.set(true);\n\t\tawait new Promise(c => setTimeout(c, 30));\n\t\tassert.deepStrictEqual(testObject.visibleViewDescriptors, [view2, view3], 'view3 should be visible');\n\t\tassert.deepStrictEqual(target.elements, [view2, view3]);\n\n\t\tkey.set(false);\n\t\tawait new Promise(c => setTimeout(c, 30));\n\t\tassert.deepStrictEqual(testObject.visibleViewDescriptors, [view2], 'Only view2 should be visible');\n\t\tassert.deepStrictEqual(target.elements, [view2]);\n\t}));\n\n\ttest('remove event is not triggered if view was hidden and removed', () => runWithFakedTimers<void>({ useFakeTimers: true }, async () => {\n\t\tcontainer = ViewContainerRegistry.registerViewContainer({ id: 'test', title: nls.localize2('test', 'test'), ctorDescriptor: new SyncDescriptor(<any>{}) }, ViewContainerLocation.Sidebar);\n\t\tconst testObject = viewDescriptorService.getViewContainerModel(container);\n\t\tconst target = disposableStore.add(new ViewDescriptorSequence(testObject));\n\t\tconst viewDescriptor: IViewDescriptor = {\n\t\t\tid: 'view1',\n\t\t\tctorDescriptor: null!,\n\t\t\tname: nls.localize2('Test View 1', 'Test View 1'),\n\t\t\twhen: ContextKeyExpr.equals('showview1', true),\n\t\t\tcanToggleVisibility: true\n\t\t};\n\n\t\tViewsRegistry.registerViews([viewDescriptor], container);\n\n\t\tconst key = contextKeyService.createKey<boolean>('showview1', true);\n\t\tawait new Promise(c => setTimeout(c, 30));\n\t\tassert.strictEqual(testObject.visibleViewDescriptors.length, 1, 'view should appear after context is set');\n\t\tassert.strictEqual(target.elements.length, 1);\n\n\t\ttestObject.setVisible('view1', false);\n\t\tassert.strictEqual(testObject.visibleViewDescriptors.length, 0, 'view should disappear after setting visibility to false');\n\t\tassert.strictEqual(target.elements.length, 0);\n\n\t\tconst targetEvent = sinon.spy();\n\t\tdisposableStore.add(testObject.onDidRemoveVisibleViewDescriptors(targetEvent));\n\t\tkey.set(false);\n\t\tawait new Promise(c => setTimeout(c, 30));\n\t\tassert.ok(!targetEvent.called, 'remove event should not be called since it is already hidden');\n\t}));\n\n\ttest('add event is not triggered if view was set visible (when visible) and not active', () => runWithFakedTimers<void>({ useFakeTimers: true }, async () => {\n\t\tcontainer = ViewContainerRegistry.registerViewContainer({ id: 'test', title: nls.localize2('test', 'test'), ctorDescriptor: new SyncDescriptor(<any>{}) }, ViewContainerLocation.Sidebar);\n\t\tconst testObject = viewDescriptorService.getViewContainerModel(container);\n\t\tconst target = disposableStore.add(new ViewDescriptorSequence(testObject));\n\t\tconst viewDescriptor: IViewDescriptor = {\n\t\t\tid: 'view1',\n\t\t\tctorDescriptor: null!,\n\t\t\tname: nls.localize2('Test View 1', 'Test View 1'),\n\t\t\twhen: ContextKeyExpr.equals('showview1', true),\n\t\t\tcanToggleVisibility: true\n\t\t};\n\n\t\tconst key = contextKeyService.createKey<boolean>('showview1', true);\n\t\tkey.set(false);\n\t\tViewsRegistry.registerViews([viewDescriptor], container);\n\n\t\tassert.strictEqual(testObject.visibleViewDescriptors.length, 0);\n\t\tassert.strictEqual(target.elements.length, 0);\n\n\t\tconst targetEvent = sinon.spy();\n\t\tdisposableStore.add(testObject.onDidAddVisibleViewDescriptors(targetEvent));\n\t\ttestObject.setVisible('view1', true);\n\t\tassert.ok(!targetEvent.called, 'add event should not be called since it is already visible');\n\t\tassert.strictEqual(testObject.visibleViewDescriptors.length, 0);\n\t\tassert.strictEqual(target.elements.length, 0);\n\t}));\n\n\ttest('remove event is not triggered if view was hidden and not active', () => runWithFakedTimers<void>({ useFakeTimers: true }, async () => {\n\t\tcontainer = ViewContainerRegistry.registerViewContainer({ id: 'test', title: nls.localize2('test', 'test'), ctorDescriptor: new SyncDescriptor(<any>{}) }, ViewContainerLocation.Sidebar);\n\t\tconst testObject = viewDescriptorService.getViewContainerModel(container);\n\t\tconst target = disposableStore.add(new ViewDescriptorSequence(testObject));\n\t\tconst viewDescriptor: IViewDescriptor = {\n\t\t\tid: 'view1',\n\t\t\tctorDescriptor: null!,\n\t\t\tname: nls.localize2('Test View 1', 'Test View 1'),\n\t\t\twhen: ContextKeyExpr.equals('showview1', true),\n\t\t\tcanToggleVisibility: true\n\t\t};\n\n\t\tconst key = contextKeyService.createKey<boolean>('showview1', true);\n\t\tkey.set(false);\n\t\tViewsRegistry.registerViews([viewDescriptor], container);\n\n\t\tassert.strictEqual(testObject.visibleViewDescriptors.length, 0);\n\t\tassert.strictEqual(target.elements.length, 0);\n\n\t\tconst targetEvent = sinon.spy();\n\t\tdisposableStore.add(testObject.onDidAddVisibleViewDescriptors(targetEvent));\n\t\ttestObject.setVisible('view1', false);\n\t\tassert.ok(!targetEvent.called, 'add event should not be called since it is disabled');\n\t\tassert.strictEqual(testObject.visibleViewDescriptors.length, 0);\n\t\tassert.strictEqual(target.elements.length, 0);\n\t}));\n\n\ttest('add event is not triggered if view was set visible (when not visible) and not active', () => runWithFakedTimers<void>({ useFakeTimers: true }, async () => {\n\t\tcontainer = ViewContainerRegistry.registerViewContainer({ id: 'test', title: nls.localize2('test', 'test'), ctorDescriptor: new SyncDescriptor(<any>{}) }, ViewContainerLocation.Sidebar);\n\t\tconst testObject = viewDescriptorService.getViewContainerModel(container);\n\t\tconst target = disposableStore.add(new ViewDescriptorSequence(testObject));\n\t\tconst viewDescriptor: IViewDescriptor = {\n\t\t\tid: 'view1',\n\t\t\tctorDescriptor: null!,\n\t\t\tname: nls.localize2('Test View 1', 'Test View 1'),\n\t\t\twhen: ContextKeyExpr.equals('showview1', true),\n\t\t\tcanToggleVisibility: true\n\t\t};\n\n\t\tconst key = contextKeyService.createKey<boolean>('showview1', true);\n\t\tkey.set(false);\n\t\tViewsRegistry.registerViews([viewDescriptor], container);\n\n\t\tassert.strictEqual(testObject.visibleViewDescriptors.length, 0);\n\t\tassert.strictEqual(target.elements.length, 0);\n\n\t\ttestObject.setVisible('view1', false);\n\t\tassert.strictEqual(testObject.visibleViewDescriptors.length, 0);\n\t\tassert.strictEqual(target.elements.length, 0);\n\n\t\tconst targetEvent = sinon.spy();\n\t\tdisposableStore.add(testObject.onDidAddVisibleViewDescriptors(targetEvent));\n\t\ttestObject.setVisible('view1', true);\n\t\tassert.ok(!targetEvent.called, 'add event should not be called since it is disabled');\n\t\tassert.strictEqual(testObject.visibleViewDescriptors.length, 0);\n\t\tassert.strictEqual(target.elements.length, 0);\n\t}));\n\n\ttest('added view descriptors are in ascending order in the event', () => runWithFakedTimers<void>({ useFakeTimers: true }, async () => {\n\t\tcontainer = ViewContainerRegistry.registerViewContainer({ id: 'test', title: nls.localize2('test', 'test'), ctorDescriptor: new SyncDescriptor(<any>{}) }, ViewContainerLocation.Sidebar);\n\t\tconst testObject = viewDescriptorService.getViewContainerModel(container);\n\t\tconst target = disposableStore.add(new ViewDescriptorSequence(testObject));\n\n\t\tViewsRegistry.registerViews([{\n\t\t\tid: 'view5',\n\t\t\tctorDescriptor: null!,\n\t\t\tname: nls.localize2('Test View 5', 'Test View 5'),\n\t\t\tcanToggleVisibility: true,\n\t\t\torder: 5\n\t\t}, {\n\t\t\tid: 'view2',\n\t\t\tctorDescriptor: null!,\n\t\t\tname: nls.localize2('Test View 2', 'Test View 2'),\n\t\t\tcanToggleVisibility: true,\n\t\t\torder: 2\n\t\t}], container);\n\n\t\tassert.strictEqual(target.elements.length, 2);\n\t\tassert.strictEqual(target.elements[0].id, 'view2');\n\t\tassert.strictEqual(target.elements[1].id, 'view5');\n\n\t\tViewsRegistry.registerViews([{\n\t\t\tid: 'view4',\n\t\t\tctorDescriptor: null!,\n\t\t\tname: nls.localize2('Test View 4', 'Test View 4'),\n\t\t\tcanToggleVisibility: true,\n\t\t\torder: 4\n\t\t}, {\n\t\t\tid: 'view3',\n\t\t\tctorDescriptor: null!,\n\t\t\tname: nls.localize2('Test View 3', 'Test View 3'),\n\t\t\tcanToggleVisibility: true,\n\t\t\torder: 3\n\t\t}, {\n\t\t\tid: 'view1',\n\t\t\tctorDescriptor: null!,\n\t\t\tname: nls.localize2('Test View 1', 'Test View 1'),\n\t\t\tcanToggleVisibility: true,\n\t\t\torder: 1\n\t\t}], container);\n\n\t\tassert.strictEqual(target.elements.length, 5);\n\t\tassert.strictEqual(target.elements[0].id, 'view1');\n\t\tassert.strictEqual(target.elements[1].id, 'view2');\n\t\tassert.strictEqual(target.elements[2].id, 'view3');\n\t\tassert.strictEqual(target.elements[3].id, 'view4');\n\t\tassert.strictEqual(target.elements[4].id, 'view5');\n\t}));\n\n\ttest('add event is triggered only once when view is set visible while it is set active', () => runWithFakedTimers<void>({ useFakeTimers: true }, async () => {\n\t\tcontainer = ViewContainerRegistry.registerViewContainer({ id: 'test', title: nls.localize2('test', 'test'), ctorDescriptor: new SyncDescriptor(<any>{}) }, ViewContainerLocation.Sidebar);\n\t\tconst testObject = viewDescriptorService.getViewContainerModel(container);\n\t\tconst target = disposableStore.add(new ViewDescriptorSequence(testObject));\n\t\tconst viewDescriptor: IViewDescriptor = {\n\t\t\tid: 'view1',\n\t\t\tctorDescriptor: null!,\n\t\t\tname: nls.localize2('Test View 1', 'Test View 1'),\n\t\t\twhen: ContextKeyExpr.equals('showview1', true),\n\t\t\tcanToggleVisibility: true\n\t\t};\n\n\t\tconst key = contextKeyService.createKey<boolean>('showview1', true);\n\t\tkey.set(false);\n\t\tViewsRegistry.registerViews([viewDescriptor], container);\n\t\ttestObject.setVisible('view1', false);\n\n\t\tassert.strictEqual(testObject.visibleViewDescriptors.length, 0);\n\t\tassert.strictEqual(target.elements.length, 0);\n\n\t\tconst targetEvent = sinon.spy();\n\t\tdisposableStore.add(testObject.onDidAddVisibleViewDescriptors(targetEvent));\n\t\tdisposableStore.add(Event.once(testObject.onDidChangeActiveViewDescriptors)(() => testObject.setVisible('view1', true)));\n\t\tkey.set(true);\n\t\tawait new Promise(c => setTimeout(c, 30));\n\t\tassert.strictEqual(targetEvent.callCount, 1);\n\t\tassert.strictEqual(testObject.visibleViewDescriptors.length, 1);\n\t\tassert.strictEqual(target.elements.length, 1);\n\t\tassert.strictEqual(target.elements[0].id, 'view1');\n\t}));\n\n\ttest('add event is not triggered only when view is set hidden while it is set active', () => runWithFakedTimers<void>({ useFakeTimers: true }, async () => {\n\t\tcontainer = ViewContainerRegistry.registerViewContainer({ id: 'test', title: nls.localize2('test', 'test'), ctorDescriptor: new SyncDescriptor(<any>{}) }, ViewContainerLocation.Sidebar);\n\t\tconst testObject = viewDescriptorService.getViewContainerModel(container);\n\t\tconst target = disposableStore.add(new ViewDescriptorSequence(testObject));\n\t\tconst viewDescriptor: IViewDescriptor = {\n\t\t\tid: 'view1',\n\t\t\tctorDescriptor: null!,\n\t\t\tname: nls.localize2('Test View 1', 'Test View 1'),\n\t\t\twhen: ContextKeyExpr.equals('showview1', true),\n\t\t\tcanToggleVisibility: true\n\t\t};\n\n\t\tconst key = contextKeyService.createKey<boolean>('showview1', true);\n\t\tkey.set(false);\n\t\tViewsRegistry.registerViews([viewDescriptor], container);\n\n\t\tassert.strictEqual(testObject.visibleViewDescriptors.length, 0);\n\t\tassert.strictEqual(target.elements.length, 0);\n\n\t\tconst targetEvent = sinon.spy();\n\t\tdisposableStore.add(testObject.onDidAddVisibleViewDescriptors(targetEvent));\n\t\tdisposableStore.add(Event.once(testObject.onDidChangeActiveViewDescriptors)(() => testObject.setVisible('view1', false)));\n\t\tkey.set(true);\n\t\tawait new Promise(c => setTimeout(c, 30));\n\t\tassert.strictEqual(targetEvent.callCount, 0);\n\t\tassert.strictEqual(testObject.visibleViewDescriptors.length, 0);\n\t\tassert.strictEqual(target.elements.length, 0);\n\t}));\n\n\ttest('#142087: view descriptor visibility is not reset', () => runWithFakedTimers<void>({ useFakeTimers: true }, async () => {\n\t\tcontainer = ViewContainerRegistry.registerViewContainer({ id: 'test', title: nls.localize2('test', 'test'), ctorDescriptor: new SyncDescriptor(<any>{}) }, ViewContainerLocation.Sidebar);\n\t\tconst testObject = viewDescriptorService.getViewContainerModel(container);\n\t\tconst viewDescriptor: IViewDescriptor = {\n\t\t\tid: 'view1',\n\t\t\tctorDescriptor: null!,\n\t\t\tname: nls.localize2('Test View 1', 'Test View 1'),\n\t\t\tcanToggleVisibility: true\n\t\t};\n\n\t\tstorageService.store(getViewsStateStorageId('test.state'), JSON.stringify([{\n\t\t\tid: viewDescriptor.id,\n\t\t\tisHidden: true,\n\t\t\torder: undefined\n\t\t}]), StorageScope.PROFILE, StorageTarget.USER);\n\n\t\tViewsRegistry.registerViews([viewDescriptor], container);\n\n\t\tassert.strictEqual(testObject.isVisible(viewDescriptor.id), false);\n\t\tassert.strictEqual(testObject.activeViewDescriptors[0].id, viewDescriptor.id);\n\t\tassert.strictEqual(testObject.visibleViewDescriptors.length, 0);\n\t}));\n\n\ttest('remove event is triggered properly if multiple views are hidden at the same time', () => runWithFakedTimers<void>({ useFakeTimers: true }, async () => {\n\t\tcontainer = ViewContainerRegistry.registerViewContainer({ id: 'test', title: nls.localize2('test', 'test'), ctorDescriptor: new SyncDescriptor(<any>{}) }, ViewContainerLocation.Sidebar);\n\t\tconst testObject = viewDescriptorService.getViewContainerModel(container);\n\t\tconst target = disposableStore.add(new ViewDescriptorSequence(testObject));\n\t\tconst viewDescriptor1: IViewDescriptor = {\n\t\t\tid: 'view1',\n\t\t\tctorDescriptor: null!,\n\t\t\tname: nls.localize2('Test View 1', 'Test View 1'),\n\t\t\tcanToggleVisibility: true\n\t\t};\n\t\tconst viewDescriptor2: IViewDescriptor = {\n\t\t\tid: 'view2',\n\t\t\tctorDescriptor: null!,\n\t\t\tname: nls.localize2('Test View 2', 'Test View 2'),\n\t\t\tcanToggleVisibility: true\n\t\t};\n\t\tconst viewDescriptor3: IViewDescriptor = {\n\t\t\tid: 'view3',\n\t\t\tctorDescriptor: null!,\n\t\t\tname: nls.localize2('Test View 3', 'Test View 3'),\n\t\t\tcanToggleVisibility: true\n\t\t};\n\n\t\tViewsRegistry.registerViews([viewDescriptor1, viewDescriptor2, viewDescriptor3], container);\n\n\t\tconst remomveEvent = sinon.spy();\n\t\tdisposableStore.add(testObject.onDidRemoveVisibleViewDescriptors(remomveEvent));\n\n\t\tconst addEvent = sinon.spy();\n\t\tdisposableStore.add(testObject.onDidAddVisibleViewDescriptors(addEvent));\n\n\t\tstorageService.store(getViewsStateStorageId('test.state'), JSON.stringify([{\n\t\t\tid: viewDescriptor1.id,\n\t\t\tisHidden: false,\n\t\t\torder: undefined\n\t\t}, {\n\t\t\tid: viewDescriptor2.id,\n\t\t\tisHidden: true,\n\t\t\torder: undefined\n\t\t}, {\n\t\t\tid: viewDescriptor3.id,\n\t\t\tisHidden: true,\n\t\t\torder: undefined\n\t\t}]), StorageScope.PROFILE, StorageTarget.USER);\n\n\t\tassert.ok(!addEvent.called, 'add event should not be called');\n\t\tassert.ok(remomveEvent.calledOnce, 'remove event should be called');\n\t\tassert.deepStrictEqual(remomveEvent.args[0][0], [{\n\t\t\tviewDescriptor: viewDescriptor3,\n\t\t\tindex: 2\n\t\t}, {\n\t\t\tviewDescriptor: viewDescriptor2,\n\t\t\tindex: 1\n\t\t}]);\n\t\tassert.strictEqual(target.elements.length, 1);\n\t\tassert.strictEqual(target.elements[0].id, viewDescriptor1.id);\n\t}));\n\n\ttest('add event is triggered properly if multiple views are hidden at the same time', () => runWithFakedTimers<void>({ useFakeTimers: true }, async () => {\n\t\tcontainer = ViewContainerRegistry.registerViewContainer({ id: 'test', title: nls.localize2('test', 'test'), ctorDescriptor: new SyncDescriptor(<any>{}) }, ViewContainerLocation.Sidebar);\n\t\tconst testObject = viewDescriptorService.getViewContainerModel(container);\n\t\tconst target = disposableStore.add(new ViewDescriptorSequence(testObject));\n\t\tconst viewDescriptor1: IViewDescriptor = {\n\t\t\tid: 'view1',\n\t\t\tctorDescriptor: null!,\n\t\t\tname: nls.localize2('Test View 1', 'Test View 1'),\n\t\t\tcanToggleVisibility: true\n\t\t};\n\t\tconst viewDescriptor2: IViewDescriptor = {\n\t\t\tid: 'view2',\n\t\t\tctorDescriptor: null!,\n\t\t\tname: nls.localize2('Test View 2', 'Test View 2'),\n\t\t\tcanToggleVisibility: true\n\t\t};\n\t\tconst viewDescriptor3: IViewDescriptor = {\n\t\t\tid: 'view3',\n\t\t\tctorDescriptor: null!,\n\t\t\tname: nls.localize2('Test View 3', 'Test View 3'),\n\t\t\tcanToggleVisibility: true\n\t\t};\n\n\t\tViewsRegistry.registerViews([viewDescriptor1, viewDescriptor2, viewDescriptor3], container);\n\t\ttestObject.setVisible(viewDescriptor1.id, false);\n\t\ttestObject.setVisible(viewDescriptor3.id, false);\n\n\t\tconst removeEvent = sinon.spy();\n\t\tdisposableStore.add(testObject.onDidRemoveVisibleViewDescriptors(removeEvent));\n\n\t\tconst addEvent = sinon.spy();\n\t\tdisposableStore.add(testObject.onDidAddVisibleViewDescriptors(addEvent));\n\n\t\tstorageService.store(getViewsStateStorageId('test.state'), JSON.stringify([{\n\t\t\tid: viewDescriptor1.id,\n\t\t\tisHidden: false,\n\t\t\torder: undefined\n\t\t}, {\n\t\t\tid: viewDescriptor2.id,\n\t\t\tisHidden: false,\n\t\t\torder: undefined\n\t\t}, {\n\t\t\tid: viewDescriptor3.id,\n\t\t\tisHidden: false,\n\t\t\torder: undefined\n\t\t}]), StorageScope.PROFILE, StorageTarget.USER);\n\n\t\tassert.ok(!removeEvent.called, 'remove event should not be called');\n\n\t\tassert.ok(addEvent.calledOnce, 'add event should be called once');\n\t\tassert.deepStrictEqual(addEvent.args[0][0], [{\n\t\t\tviewDescriptor: viewDescriptor1,\n\t\t\tindex: 0,\n\t\t\tcollapsed: false,\n\t\t\tsize: undefined\n\t\t}, {\n\t\t\tviewDescriptor: viewDescriptor3,\n\t\t\tindex: 2,\n\t\t\tcollapsed: false,\n\t\t\tsize: undefined\n\t\t}]);\n\n\t\tassert.strictEqual(target.elements.length, 3);\n\t\tassert.strictEqual(target.elements[0].id, viewDescriptor1.id);\n\t\tassert.strictEqual(target.elements[1].id, viewDescriptor2.id);\n\t\tassert.strictEqual(target.elements[2].id, viewDescriptor3.id);\n\t}));\n\n\ttest('add and remove events are triggered properly if multiple views are hidden and added at the same time', () => runWithFakedTimers<void>({ useFakeTimers: true }, async () => {\n\t\tcontainer = ViewContainerRegistry.registerViewContainer({ id: 'test', title: nls.localize2('test', 'test'), ctorDescriptor: new SyncDescriptor(<any>{}) }, ViewContainerLocation.Sidebar);\n\t\tconst testObject = viewDescriptorService.getViewContainerModel(container);\n\t\tconst target = disposableStore.add(new ViewDescriptorSequence(testObject));\n\t\tconst viewDescriptor1: IViewDescriptor = {\n\t\t\tid: 'view1',\n\t\t\tctorDescriptor: null!,\n\t\t\tname: nls.localize2('Test View 1', 'Test View 1'),\n\t\t\tcanToggleVisibility: true\n\t\t};\n\t\tconst viewDescriptor2: IViewDescriptor = {\n\t\t\tid: 'view2',\n\t\t\tctorDescriptor: null!,\n\t\t\tname: nls.localize2('Test View 2', 'Test View 2'),\n\t\t\tcanToggleVisibility: true\n\t\t};\n\t\tconst viewDescriptor3: IViewDescriptor = {\n\t\t\tid: 'view3',\n\t\t\tctorDescriptor: null!,\n\t\t\tname: nls.localize2('Test View 3', 'Test View 3'),\n\t\t\tcanToggleVisibility: true\n\t\t};\n\t\tconst viewDescriptor4: IViewDescriptor = {\n\t\t\tid: 'view4',\n\t\t\tctorDescriptor: null!,\n\t\t\tname: nls.localize2('Test View 4', 'Test View 4'),\n\t\t\tcanToggleVisibility: true\n\t\t};\n\n\t\tViewsRegistry.registerViews([viewDescriptor1, viewDescriptor2, viewDescriptor3, viewDescriptor4], container);\n\t\ttestObject.setVisible(viewDescriptor1.id, false);\n\n\t\tconst removeEvent = sinon.spy();\n\t\tdisposableStore.add(testObject.onDidRemoveVisibleViewDescriptors(removeEvent));\n\n\t\tconst addEvent = sinon.spy();\n\t\tdisposableStore.add(testObject.onDidAddVisibleViewDescriptors(addEvent));\n\n\t\tstorageService.store(getViewsStateStorageId('test.state'), JSON.stringify([{\n\t\t\tid: viewDescriptor1.id,\n\t\t\tisHidden: false,\n\t\t\torder: undefined\n\t\t}, {\n\t\t\tid: viewDescriptor2.id,\n\t\t\tisHidden: true,\n\t\t\torder: undefined\n\t\t}, {\n\t\t\tid: viewDescriptor3.id,\n\t\t\tisHidden: false,\n\t\t\torder: undefined\n\t\t}, {\n\t\t\tid: viewDescriptor4.id,\n\t\t\tisHidden: true,\n\t\t\torder: undefined\n\t\t}]), StorageScope.PROFILE, StorageTarget.USER);\n\n\t\tassert.ok(removeEvent.calledOnce, 'remove event should be called once');\n\t\tassert.deepStrictEqual(removeEvent.args[0][0], [{\n\t\t\tviewDescriptor: viewDescriptor4,\n\t\t\tindex: 2\n\t\t}, {\n\t\t\tviewDescriptor: viewDescriptor2,\n\t\t\tindex: 0\n\t\t}]);\n\n\t\tassert.ok(addEvent.calledOnce, 'add event should be called once');\n\t\tassert.deepStrictEqual(addEvent.args[0][0], [{\n\t\t\tviewDescriptor: viewDescriptor1,\n\t\t\tindex: 0,\n\t\t\tcollapsed: false,\n\t\t\tsize: undefined\n\t\t}]);\n\t\tassert.strictEqual(target.elements.length, 2);\n\t\tassert.strictEqual(target.elements[0].id, viewDescriptor1.id);\n\t\tassert.strictEqual(target.elements[1].id, viewDescriptor3.id);\n\t}));\n\n\ttest('newly added view descriptor is hidden if it was toggled hidden in storage before adding', () => runWithFakedTimers<void>({ useFakeTimers: true }, async () => {\n\t\tcontainer = ViewContainerRegistry.registerViewContainer({ id: 'test', title: nls.localize2('test', 'test'), ctorDescriptor: new SyncDescriptor(<any>{}) }, ViewContainerLocation.Sidebar);\n\t\tconst viewDescriptor: IViewDescriptor = {\n\t\t\tid: 'view1',\n\t\t\tctorDescriptor: null!,\n\t\t\tname: nls.localize2('Test View 1', 'Test View 1'),\n\t\t\tcanToggleVisibility: true\n\t\t};\n\t\tstorageService.store(getViewsStateStorageId('test.state'), JSON.stringify([{\n\t\t\tid: viewDescriptor.id,\n\t\t\tisHidden: false,\n\t\t\torder: undefined\n\t\t}]), StorageScope.PROFILE, StorageTarget.USER);\n\n\t\tconst testObject = viewDescriptorService.getViewContainerModel(container);\n\n\t\tstorageService.store(getViewsStateStorageId('test.state'), JSON.stringify([{\n\t\t\tid: viewDescriptor.id,\n\t\t\tisHidden: true,\n\t\t\torder: undefined\n\t\t}]), StorageScope.PROFILE, StorageTarget.USER);\n\n\t\tViewsRegistry.registerViews([viewDescriptor], container);\n\n\t\tassert.strictEqual(testObject.isVisible(viewDescriptor.id), false);\n\t\tassert.strictEqual(testObject.activeViewDescriptors[0].id, viewDescriptor.id);\n\t\tassert.strictEqual(testObject.visibleViewDescriptors.length, 0);\n\t}));\n\n});\n"],
  "mappings": "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",
  "names": []
}
