{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/views/test/browser/viewDescriptorService.test.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as nls from '../../../../../nls.js';\nimport assert from 'assert';\nimport { IViewsRegistry, IViewDescriptor, IViewContainersRegistry, Extensions as ViewContainerExtensions, ViewContainerLocation, ViewContainer, ViewContainerLocationToString } from '../../../../common/views.js';\nimport { Registry } from '../../../../../platform/registry/common/platform.js';\nimport { workbenchInstantiationService } from '../../../../test/browser/workbenchTestServices.js';\nimport { TestInstantiationService } from '../../../../../platform/instantiation/test/common/instantiationServiceMock.js';\nimport { SyncDescriptor } from '../../../../../platform/instantiation/common/descriptors.js';\nimport { ViewDescriptorService } from '../../browser/viewDescriptorService.js';\nimport { assertIsDefined } from '../../../../../base/common/types.js';\nimport { ContextKeyService } from '../../../../../platform/contextkey/browser/contextKeyService.js';\nimport { IContextKeyService } from '../../../../../platform/contextkey/common/contextkey.js';\nimport { IStorageService, StorageScope, StorageTarget } from '../../../../../platform/storage/common/storage.js';\nimport { generateUuid } from '../../../../../base/common/uuid.js';\nimport { compare } from '../../../../../base/common/strings.js';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from '../../../../../base/test/common/utils.js';\n\nconst ViewsRegistry = Registry.as<IViewsRegistry>(ViewContainerExtensions.ViewsRegistry);\nconst ViewContainersRegistry = Registry.as<IViewContainersRegistry>(ViewContainerExtensions.ViewContainersRegistry);\nconst viewContainerIdPrefix = 'testViewContainer';\nconst sidebarContainer = ViewContainersRegistry.registerViewContainer({ id: `${viewContainerIdPrefix}-${generateUuid()}`, title: nls.localize2('test', 'test'), ctorDescriptor: new SyncDescriptor(<any>{}) }, ViewContainerLocation.Sidebar);\nconst panelContainer = ViewContainersRegistry.registerViewContainer({ id: `${viewContainerIdPrefix}-${generateUuid()}`, title: nls.localize2('test', 'test'), ctorDescriptor: new SyncDescriptor(<any>{}) }, ViewContainerLocation.Panel);\n\nsuite('ViewDescriptorService', () => {\n\n\tconst disposables = ensureNoDisposablesAreLeakedInTestSuite();\n\tlet instantiationService: TestInstantiationService;\n\n\tsetup(() => {\n\t\tdisposables.add(instantiationService = workbenchInstantiationService(undefined, disposables));\n\t\tinstantiationService.stub(IContextKeyService, disposables.add(instantiationService.createInstance(ContextKeyService)));\n\t});\n\n\tteardown(() => {\n\t\tfor (const viewContainer of ViewContainersRegistry.all) {\n\t\t\tif (viewContainer.id.startsWith(viewContainerIdPrefix)) {\n\t\t\t\tViewsRegistry.deregisterViews(ViewsRegistry.getViews(viewContainer), viewContainer);\n\t\t\t}\n\t\t}\n\t});\n\n\tfunction aViewDescriptorService(): ViewDescriptorService {\n\t\treturn disposables.add(instantiationService.createInstance(ViewDescriptorService));\n\t}\n\n\ttest('Empty Containers', function () {\n\t\tconst testObject = aViewDescriptorService();\n\t\tconst sidebarViews = testObject.getViewContainerModel(sidebarContainer);\n\t\tconst panelViews = testObject.getViewContainerModel(panelContainer);\n\t\tassert.strictEqual(sidebarViews.allViewDescriptors.length, 0, 'The sidebar container should have no views yet.');\n\t\tassert.strictEqual(panelViews.allViewDescriptors.length, 0, 'The panel container should have no views yet.');\n\t});\n\n\ttest('Register/Deregister', () => {\n\t\tconst testObject = aViewDescriptorService();\n\t\tconst viewDescriptors: IViewDescriptor[] = [\n\t\t\t{\n\t\t\t\tid: 'view1',\n\t\t\t\tctorDescriptor: null!,\n\t\t\t\tname: nls.localize2('Test View 1', 'Test View 1'),\n\t\t\t\tcanMoveView: true\n\t\t\t},\n\t\t\t{\n\t\t\t\tid: 'view2',\n\t\t\t\tctorDescriptor: null!,\n\t\t\t\tname: nls.localize2('Test View 2', 'Test View 2'),\n\t\t\t\tcanMoveView: true\n\t\t\t},\n\t\t\t{\n\t\t\t\tid: 'view3',\n\t\t\t\tctorDescriptor: null!,\n\t\t\t\tname: nls.localize2('Test View 3', 'Test View 3'),\n\t\t\t\tcanMoveView: true\n\t\t\t}\n\t\t];\n\n\t\tViewsRegistry.registerViews(viewDescriptors.slice(0, 2), sidebarContainer);\n\t\tViewsRegistry.registerViews(viewDescriptors.slice(2), panelContainer);\n\n\t\tlet sidebarViews = testObject.getViewContainerModel(sidebarContainer);\n\t\tlet panelViews = testObject.getViewContainerModel(panelContainer);\n\n\t\tassert.strictEqual(sidebarViews.activeViewDescriptors.length, 2, 'Sidebar should have 2 views');\n\t\tassert.strictEqual(panelViews.activeViewDescriptors.length, 1, 'Panel should have 1 view');\n\n\t\tViewsRegistry.deregisterViews(viewDescriptors.slice(0, 2), sidebarContainer);\n\t\tViewsRegistry.deregisterViews(viewDescriptors.slice(2), panelContainer);\n\n\t\tsidebarViews = testObject.getViewContainerModel(sidebarContainer);\n\t\tpanelViews = testObject.getViewContainerModel(panelContainer);\n\n\t\tassert.strictEqual(sidebarViews.activeViewDescriptors.length, 0, 'Sidebar should have no views');\n\t\tassert.strictEqual(panelViews.activeViewDescriptors.length, 0, 'Panel should have no views');\n\t});\n\n\ttest('move views to existing containers', async function () {\n\t\tconst testObject = aViewDescriptorService();\n\t\tconst viewDescriptors: IViewDescriptor[] = [\n\t\t\t{\n\t\t\t\tid: 'view1',\n\t\t\t\tctorDescriptor: null!,\n\t\t\t\tname: nls.localize2('Test View 1', 'Test View 1'),\n\t\t\t\tcanMoveView: true\n\t\t\t},\n\t\t\t{\n\t\t\t\tid: 'view2',\n\t\t\t\tctorDescriptor: null!,\n\t\t\t\tname: nls.localize2('Test View 2', 'Test View 2'),\n\t\t\t\tcanMoveView: true\n\t\t\t},\n\t\t\t{\n\t\t\t\tid: 'view3',\n\t\t\t\tctorDescriptor: null!,\n\t\t\t\tname: nls.localize2('Test View 3', 'Test View 3'),\n\t\t\t\tcanMoveView: true\n\t\t\t}\n\t\t];\n\n\t\tViewsRegistry.registerViews(viewDescriptors.slice(0, 2), sidebarContainer);\n\t\tViewsRegistry.registerViews(viewDescriptors.slice(2), panelContainer);\n\n\t\ttestObject.moveViewsToContainer(viewDescriptors.slice(2), sidebarContainer);\n\t\ttestObject.moveViewsToContainer(viewDescriptors.slice(0, 2), panelContainer);\n\n\t\tconst sidebarViews = testObject.getViewContainerModel(sidebarContainer);\n\t\tconst panelViews = testObject.getViewContainerModel(panelContainer);\n\n\t\tassert.strictEqual(sidebarViews.activeViewDescriptors.length, 1, 'Sidebar should have 2 views');\n\t\tassert.strictEqual(panelViews.activeViewDescriptors.length, 2, 'Panel should have 1 view');\n\n\t\tassert.notStrictEqual(sidebarViews.activeViewDescriptors.indexOf(viewDescriptors[2]), -1, `Sidebar should have ${viewDescriptors[2].name.value}`);\n\t\tassert.notStrictEqual(panelViews.activeViewDescriptors.indexOf(viewDescriptors[0]), -1, `Panel should have ${viewDescriptors[0].name.value}`);\n\t\tassert.notStrictEqual(panelViews.activeViewDescriptors.indexOf(viewDescriptors[1]), -1, `Panel should have ${viewDescriptors[1].name.value}`);\n\t});\n\n\ttest('move views to generated containers', async function () {\n\t\tconst testObject = aViewDescriptorService();\n\t\tconst viewDescriptors: IViewDescriptor[] = [\n\t\t\t{\n\t\t\t\tid: 'view1',\n\t\t\t\tctorDescriptor: null!,\n\t\t\t\tname: nls.localize2('Test View 1', 'Test View 1'),\n\t\t\t\tcanMoveView: true\n\t\t\t},\n\t\t\t{\n\t\t\t\tid: 'view2',\n\t\t\t\tctorDescriptor: null!,\n\t\t\t\tname: nls.localize2('Test View 2', 'Test View 2'),\n\t\t\t\tcanMoveView: true\n\t\t\t},\n\t\t\t{\n\t\t\t\tid: 'view3',\n\t\t\t\tctorDescriptor: null!,\n\t\t\t\tname: nls.localize2('Test View 3', 'Test View 3'),\n\t\t\t\tcanMoveView: true\n\t\t\t}\n\t\t];\n\n\t\tViewsRegistry.registerViews(viewDescriptors.slice(0, 2), sidebarContainer);\n\t\tViewsRegistry.registerViews(viewDescriptors.slice(2), panelContainer);\n\n\t\ttestObject.moveViewToLocation(viewDescriptors[0], ViewContainerLocation.Panel);\n\t\ttestObject.moveViewToLocation(viewDescriptors[2], ViewContainerLocation.Sidebar);\n\n\t\tlet sidebarViews = testObject.getViewContainerModel(sidebarContainer);\n\t\tlet panelViews = testObject.getViewContainerModel(panelContainer);\n\n\t\tassert.strictEqual(sidebarViews.activeViewDescriptors.length, 1, 'Sidebar container should have 1 view');\n\t\tassert.strictEqual(panelViews.activeViewDescriptors.length, 0, 'Panel container should have no views');\n\n\t\tconst generatedPanel = assertIsDefined(testObject.getViewContainerByViewId(viewDescriptors[0].id));\n\t\tconst generatedSidebar = assertIsDefined(testObject.getViewContainerByViewId(viewDescriptors[2].id));\n\n\t\tassert.strictEqual(testObject.getViewContainerLocation(generatedPanel), ViewContainerLocation.Panel, 'Generated Panel should be in located in the panel');\n\t\tassert.strictEqual(testObject.getViewContainerLocation(generatedSidebar), ViewContainerLocation.Sidebar, 'Generated Sidebar should be in located in the sidebar');\n\n\t\tassert.strictEqual(testObject.getViewContainerLocation(generatedPanel), testObject.getViewLocationById(viewDescriptors[0].id), 'Panel view location and container location should match');\n\t\tassert.strictEqual(testObject.getViewContainerLocation(generatedSidebar), testObject.getViewLocationById(viewDescriptors[2].id), 'Sidebar view location and container location should match');\n\n\t\tassert.strictEqual(testObject.getDefaultContainerById(viewDescriptors[2].id), panelContainer, `${viewDescriptors[2].name.value} has wrong default container`);\n\t\tassert.strictEqual(testObject.getDefaultContainerById(viewDescriptors[0].id), sidebarContainer, `${viewDescriptors[0].name.value} has wrong default container`);\n\n\t\ttestObject.moveViewToLocation(viewDescriptors[0], ViewContainerLocation.Sidebar);\n\t\ttestObject.moveViewToLocation(viewDescriptors[2], ViewContainerLocation.Panel);\n\n\t\tsidebarViews = testObject.getViewContainerModel(sidebarContainer);\n\t\tpanelViews = testObject.getViewContainerModel(panelContainer);\n\n\t\tassert.strictEqual(sidebarViews.activeViewDescriptors.length, 1, 'Sidebar should have 2 views');\n\t\tassert.strictEqual(panelViews.activeViewDescriptors.length, 0, 'Panel should have 1 view');\n\n\t\tassert.strictEqual(testObject.getViewLocationById(viewDescriptors[0].id), ViewContainerLocation.Sidebar, 'View should be located in the sidebar');\n\t\tassert.strictEqual(testObject.getViewLocationById(viewDescriptors[2].id), ViewContainerLocation.Panel, 'View should be located in the panel');\n\t});\n\n\ttest('move view events', async function () {\n\t\tconst testObject = aViewDescriptorService();\n\t\tconst viewDescriptors: IViewDescriptor[] = [\n\t\t\t{\n\t\t\t\tid: 'view1',\n\t\t\t\tctorDescriptor: null!,\n\t\t\t\tname: nls.localize2('Test View 1', 'Test View 1'),\n\t\t\t\tcanMoveView: true\n\t\t\t},\n\t\t\t{\n\t\t\t\tid: 'view2',\n\t\t\t\tctorDescriptor: null!,\n\t\t\t\tname: nls.localize2('Test View 2', 'Test View 2'),\n\t\t\t\tcanMoveView: true\n\t\t\t},\n\t\t\t{\n\t\t\t\tid: 'view3',\n\t\t\t\tctorDescriptor: null!,\n\t\t\t\tname: nls.localize2('Test View 3', 'Test View 3'),\n\t\t\t\tcanMoveView: true\n\t\t\t}\n\t\t];\n\n\t\tlet expectedSequence = '';\n\t\tlet actualSequence = '';\n\n\t\tconst containerMoveString = (view: IViewDescriptor, from: ViewContainer, to: ViewContainer) => {\n\t\t\treturn `Moved ${view.id} from ${from.id} to ${to.id}\\n`;\n\t\t};\n\n\t\tconst locationMoveString = (view: IViewDescriptor, from: ViewContainerLocation, to: ViewContainerLocation) => {\n\t\t\treturn `Moved ${view.id} from ${from === ViewContainerLocation.Sidebar ? 'Sidebar' : 'Panel'} to ${to === ViewContainerLocation.Sidebar ? 'Sidebar' : 'Panel'}\\n`;\n\t\t};\n\t\tdisposables.add(testObject.onDidChangeContainer(({ views, from, to }) => {\n\t\t\tviews.forEach(view => {\n\t\t\t\tactualSequence += containerMoveString(view, from, to);\n\t\t\t});\n\t\t}));\n\n\t\tdisposables.add(testObject.onDidChangeLocation(({ views, from, to }) => {\n\t\t\tviews.forEach(view => {\n\t\t\t\tactualSequence += locationMoveString(view, from, to);\n\t\t\t});\n\t\t}));\n\n\t\tViewsRegistry.registerViews(viewDescriptors.slice(0, 2), sidebarContainer);\n\t\tViewsRegistry.registerViews(viewDescriptors.slice(2), panelContainer);\n\n\t\texpectedSequence += locationMoveString(viewDescriptors[0], ViewContainerLocation.Sidebar, ViewContainerLocation.Panel);\n\t\ttestObject.moveViewToLocation(viewDescriptors[0], ViewContainerLocation.Panel);\n\t\texpectedSequence += containerMoveString(viewDescriptors[0], sidebarContainer, testObject.getViewContainerByViewId(viewDescriptors[0].id)!);\n\n\t\texpectedSequence += locationMoveString(viewDescriptors[2], ViewContainerLocation.Panel, ViewContainerLocation.Sidebar);\n\t\ttestObject.moveViewToLocation(viewDescriptors[2], ViewContainerLocation.Sidebar);\n\t\texpectedSequence += containerMoveString(viewDescriptors[2], panelContainer, testObject.getViewContainerByViewId(viewDescriptors[2].id)!);\n\n\t\texpectedSequence += locationMoveString(viewDescriptors[0], ViewContainerLocation.Panel, ViewContainerLocation.Sidebar);\n\t\texpectedSequence += containerMoveString(viewDescriptors[0], testObject.getViewContainerByViewId(viewDescriptors[0].id)!, sidebarContainer);\n\t\ttestObject.moveViewsToContainer([viewDescriptors[0]], sidebarContainer);\n\n\t\texpectedSequence += locationMoveString(viewDescriptors[2], ViewContainerLocation.Sidebar, ViewContainerLocation.Panel);\n\t\texpectedSequence += containerMoveString(viewDescriptors[2], testObject.getViewContainerByViewId(viewDescriptors[2].id)!, panelContainer);\n\t\ttestObject.moveViewsToContainer([viewDescriptors[2]], panelContainer);\n\n\t\texpectedSequence += locationMoveString(viewDescriptors[0], ViewContainerLocation.Sidebar, ViewContainerLocation.Panel);\n\t\texpectedSequence += containerMoveString(viewDescriptors[0], sidebarContainer, panelContainer);\n\t\ttestObject.moveViewsToContainer([viewDescriptors[0]], panelContainer);\n\n\t\texpectedSequence += locationMoveString(viewDescriptors[2], ViewContainerLocation.Panel, ViewContainerLocation.Sidebar);\n\t\texpectedSequence += containerMoveString(viewDescriptors[2], panelContainer, sidebarContainer);\n\t\ttestObject.moveViewsToContainer([viewDescriptors[2]], sidebarContainer);\n\n\t\texpectedSequence += locationMoveString(viewDescriptors[1], ViewContainerLocation.Sidebar, ViewContainerLocation.Panel);\n\t\texpectedSequence += locationMoveString(viewDescriptors[2], ViewContainerLocation.Sidebar, ViewContainerLocation.Panel);\n\t\texpectedSequence += containerMoveString(viewDescriptors[1], sidebarContainer, panelContainer);\n\t\texpectedSequence += containerMoveString(viewDescriptors[2], sidebarContainer, panelContainer);\n\t\ttestObject.moveViewsToContainer([viewDescriptors[1], viewDescriptors[2]], panelContainer);\n\n\t\tassert.strictEqual(actualSequence, expectedSequence, 'Event sequence not matching expected sequence');\n\t});\n\n\ttest('reset', async function () {\n\t\tconst testObject = aViewDescriptorService();\n\t\tconst viewDescriptors: IViewDescriptor[] = [\n\t\t\t{\n\t\t\t\tid: 'view1',\n\t\t\t\tctorDescriptor: null!,\n\t\t\t\tname: nls.localize2('Test View 1', 'Test View 1'),\n\t\t\t\tcanMoveView: true,\n\t\t\t\torder: 1\n\t\t\t},\n\t\t\t{\n\t\t\t\tid: 'view2',\n\t\t\t\tctorDescriptor: null!,\n\t\t\t\tname: nls.localize2('Test View 2', 'Test View 2'),\n\t\t\t\tcanMoveView: true,\n\t\t\t\torder: 2\n\t\t\t},\n\t\t\t{\n\t\t\t\tid: 'view3',\n\t\t\t\tctorDescriptor: null!,\n\t\t\t\tname: nls.localize2('Test View 3', 'Test View 3'),\n\t\t\t\tcanMoveView: true,\n\t\t\t\torder: 3\n\t\t\t}\n\t\t];\n\n\t\tViewsRegistry.registerViews(viewDescriptors.slice(0, 2), sidebarContainer);\n\t\tViewsRegistry.registerViews(viewDescriptors.slice(2), panelContainer);\n\n\t\ttestObject.moveViewToLocation(viewDescriptors[0], ViewContainerLocation.Panel);\n\t\ttestObject.moveViewsToContainer([viewDescriptors[1]], panelContainer);\n\t\ttestObject.moveViewToLocation(viewDescriptors[2], ViewContainerLocation.Sidebar);\n\n\t\tconst generatedPanel = assertIsDefined(testObject.getViewContainerByViewId(viewDescriptors[0].id));\n\t\tconst generatedSidebar = assertIsDefined(testObject.getViewContainerByViewId(viewDescriptors[2].id));\n\n\t\ttestObject.reset();\n\n\t\tconst sidebarViews = testObject.getViewContainerModel(sidebarContainer);\n\t\tassert.deepStrictEqual(sidebarViews.allViewDescriptors.map(v => v.id), ['view1', 'view2']);\n\t\tconst panelViews = testObject.getViewContainerModel(panelContainer);\n\t\tassert.deepStrictEqual(panelViews.allViewDescriptors.map(v => v.id), ['view3']);\n\n\t\tconst actual = JSON.parse(instantiationService.get(IStorageService).get('views.customizations', StorageScope.PROFILE)!);\n\t\tassert.deepStrictEqual(actual, { viewContainerLocations: {}, viewLocations: {}, viewContainerBadgeEnablementStates: {} });\n\n\t\tassert.deepStrictEqual(testObject.getViewContainerById(generatedPanel.id), null);\n\t\tassert.deepStrictEqual(testObject.getViewContainerById(generatedSidebar.id), null);\n\t});\n\n\ttest('initialize with custom locations', async function () {\n\t\tconst storageService = instantiationService.get(IStorageService);\n\t\tconst viewContainer1 = ViewContainersRegistry.registerViewContainer({ id: `${viewContainerIdPrefix}-${generateUuid()}`, title: nls.localize2('test', 'test'), ctorDescriptor: new SyncDescriptor(<any>{}) }, ViewContainerLocation.Sidebar);\n\t\tconst generateViewContainer1 = `workbench.views.service.${ViewContainerLocationToString(ViewContainerLocation.Sidebar)}.${generateUuid()}`;\n\t\tconst viewsCustomizations = {\n\t\t\tviewContainerLocations: {\n\t\t\t\t[generateViewContainer1]: ViewContainerLocation.Sidebar,\n\t\t\t\t[viewContainer1.id]: ViewContainerLocation.AuxiliaryBar\n\t\t\t},\n\t\t\tviewLocations: {\n\t\t\t\t'view1': generateViewContainer1\n\t\t\t}\n\t\t};\n\t\tstorageService.store('views.customizations', JSON.stringify(viewsCustomizations), StorageScope.PROFILE, StorageTarget.USER);\n\n\t\tconst viewDescriptors: IViewDescriptor[] = [\n\t\t\t{\n\t\t\t\tid: 'view1',\n\t\t\t\tctorDescriptor: null!,\n\t\t\t\tname: nls.localize2('Test View 1', 'Test View 1'),\n\t\t\t\tcanMoveView: true\n\t\t\t},\n\t\t\t{\n\t\t\t\tid: 'view2',\n\t\t\t\tctorDescriptor: null!,\n\t\t\t\tname: nls.localize2('Test View 2', 'Test View 2'),\n\t\t\t\tcanMoveView: true\n\t\t\t},\n\t\t\t{\n\t\t\t\tid: 'view3',\n\t\t\t\tctorDescriptor: null!,\n\t\t\t\tname: nls.localize2('Test View 3', 'Test View 3'),\n\t\t\t\tcanMoveView: true\n\t\t\t},\n\t\t\t{\n\t\t\t\tid: 'view4',\n\t\t\t\tctorDescriptor: null!,\n\t\t\t\tname: nls.localize2('Test View 4', 'Test View 4'),\n\t\t\t\tcanMoveView: true\n\t\t\t}\n\t\t];\n\n\t\tViewsRegistry.registerViews(viewDescriptors.slice(0, 3), sidebarContainer);\n\t\tViewsRegistry.registerViews(viewDescriptors.slice(3), viewContainer1);\n\n\t\tconst testObject = aViewDescriptorService();\n\n\t\tconst sidebarViews = testObject.getViewContainerModel(sidebarContainer);\n\t\tassert.deepStrictEqual(sidebarViews.allViewDescriptors.map(v => v.id), ['view2', 'view3']);\n\n\t\tconst generatedViewContainerViews = testObject.getViewContainerModel(testObject.getViewContainerById(generateViewContainer1)!);\n\t\tassert.deepStrictEqual(generatedViewContainerViews.allViewDescriptors.map(v => v.id), ['view1']);\n\n\t\tconst viewContainer1Views = testObject.getViewContainerModel(viewContainer1);\n\t\tassert.deepStrictEqual(testObject.getViewContainerLocation(viewContainer1), ViewContainerLocation.AuxiliaryBar);\n\t\tassert.deepStrictEqual(viewContainer1Views.allViewDescriptors.map(v => v.id), ['view4']);\n\t});\n\n\ttest('storage change', async function () {\n\t\tconst testObject = aViewDescriptorService();\n\n\t\tconst viewContainer1 = ViewContainersRegistry.registerViewContainer({ id: `${viewContainerIdPrefix}-${generateUuid()}`, title: nls.localize2('test', 'test'), ctorDescriptor: new SyncDescriptor(<any>{}) }, ViewContainerLocation.Sidebar);\n\t\tconst generateViewContainer1 = `workbench.views.service.${ViewContainerLocationToString(ViewContainerLocation.Sidebar)}.${generateUuid()}`;\n\n\t\tconst viewDescriptors: IViewDescriptor[] = [\n\t\t\t{\n\t\t\t\tid: 'view1',\n\t\t\t\tctorDescriptor: null!,\n\t\t\t\tname: nls.localize2('Test View 1', 'Test View 1'),\n\t\t\t\tcanMoveView: true\n\t\t\t},\n\t\t\t{\n\t\t\t\tid: 'view2',\n\t\t\t\tctorDescriptor: null!,\n\t\t\t\tname: nls.localize2('Test View 2', 'Test View 2'),\n\t\t\t\tcanMoveView: true\n\t\t\t},\n\t\t\t{\n\t\t\t\tid: 'view3',\n\t\t\t\tctorDescriptor: null!,\n\t\t\t\tname: nls.localize2('Test View 3', 'Test View 3'),\n\t\t\t\tcanMoveView: true\n\t\t\t},\n\t\t\t{\n\t\t\t\tid: 'view4',\n\t\t\t\tctorDescriptor: null!,\n\t\t\t\tname: nls.localize2('Test View 4', 'Test View 4'),\n\t\t\t\tcanMoveView: true\n\t\t\t}\n\t\t];\n\n\t\tViewsRegistry.registerViews(viewDescriptors.slice(0, 3), sidebarContainer);\n\t\tViewsRegistry.registerViews(viewDescriptors.slice(3), viewContainer1);\n\n\t\tconst viewsCustomizations = {\n\t\t\tviewContainerLocations: {\n\t\t\t\t[generateViewContainer1]: ViewContainerLocation.Sidebar,\n\t\t\t\t[viewContainer1.id]: ViewContainerLocation.AuxiliaryBar\n\t\t\t},\n\t\t\tviewLocations: {\n\t\t\t\t'view1': generateViewContainer1\n\t\t\t}\n\t\t};\n\t\tinstantiationService.get(IStorageService).store('views.customizations', JSON.stringify(viewsCustomizations), StorageScope.PROFILE, StorageTarget.USER);\n\n\t\tconst sidebarViews = testObject.getViewContainerModel(sidebarContainer);\n\t\tassert.deepStrictEqual(sidebarViews.allViewDescriptors.map(v => v.id), ['view2', 'view3']);\n\n\t\tconst generatedViewContainerViews = testObject.getViewContainerModel(testObject.getViewContainerById(generateViewContainer1)!);\n\t\tassert.deepStrictEqual(generatedViewContainerViews.allViewDescriptors.map(v => v.id), ['view1']);\n\n\t\tconst viewContainer1Views = testObject.getViewContainerModel(viewContainer1);\n\t\tassert.deepStrictEqual(testObject.getViewContainerLocation(viewContainer1), ViewContainerLocation.AuxiliaryBar);\n\t\tassert.deepStrictEqual(viewContainer1Views.allViewDescriptors.map(v => v.id), ['view4']);\n\t});\n\n\ttest('orphan views', async function () {\n\t\tconst storageService = instantiationService.get(IStorageService);\n\t\tconst viewsCustomizations = {\n\t\t\tviewContainerLocations: {},\n\t\t\tviewLocations: {\n\t\t\t\t'view1': `${viewContainerIdPrefix}-${generateUuid()}`\n\t\t\t}\n\t\t};\n\t\tstorageService.store('views.customizations', JSON.stringify(viewsCustomizations), StorageScope.PROFILE, StorageTarget.USER);\n\n\t\tconst viewDescriptors: IViewDescriptor[] = [\n\t\t\t{\n\t\t\t\tid: 'view1',\n\t\t\t\tctorDescriptor: null!,\n\t\t\t\tname: nls.localize2('Test View 1', 'Test View 1'),\n\t\t\t\tcanMoveView: true,\n\t\t\t\torder: 1\n\t\t\t},\n\t\t\t{\n\t\t\t\tid: 'view2',\n\t\t\t\tctorDescriptor: null!,\n\t\t\t\tname: nls.localize2('Test View 2', 'Test View 2'),\n\t\t\t\tcanMoveView: true,\n\t\t\t\torder: 2\n\t\t\t},\n\t\t\t{\n\t\t\t\tid: 'view3',\n\t\t\t\tctorDescriptor: null!,\n\t\t\t\tname: nls.localize2('Test View 3', 'Test View 3'),\n\t\t\t\tcanMoveView: true,\n\t\t\t\torder: 3\n\t\t\t}\n\t\t];\n\n\t\tViewsRegistry.registerViews(viewDescriptors, sidebarContainer);\n\n\t\tconst testObject = aViewDescriptorService();\n\n\t\tconst sidebarViews = testObject.getViewContainerModel(sidebarContainer);\n\t\tassert.deepStrictEqual(sidebarViews.allViewDescriptors.map(v => v.id), ['view2', 'view3']);\n\n\t\ttestObject.whenExtensionsRegistered();\n\t\tassert.deepStrictEqual(sidebarViews.allViewDescriptors.map(v => v.id), ['view1', 'view2', 'view3']);\n\t});\n\n\ttest('orphan view containers', async function () {\n\t\tconst storageService = instantiationService.get(IStorageService);\n\t\tconst generatedViewContainerId = `workbench.views.service.${ViewContainerLocationToString(ViewContainerLocation.Sidebar)}.${generateUuid()}`;\n\t\tconst viewsCustomizations = {\n\t\t\tviewContainerLocations: {\n\t\t\t\t[generatedViewContainerId]: ViewContainerLocation.Sidebar\n\t\t\t},\n\t\t\tviewLocations: {}\n\t\t};\n\t\tstorageService.store('views.customizations', JSON.stringify(viewsCustomizations), StorageScope.PROFILE, StorageTarget.USER);\n\n\t\tconst viewDescriptors: IViewDescriptor[] = [\n\t\t\t{\n\t\t\t\tid: 'view1',\n\t\t\t\tctorDescriptor: null!,\n\t\t\t\tname: nls.localize2('Test View 1', 'Test View 1'),\n\t\t\t\tcanMoveView: true,\n\t\t\t\torder: 1\n\t\t\t}\n\t\t];\n\n\t\tViewsRegistry.registerViews(viewDescriptors, sidebarContainer);\n\n\t\tconst testObject = aViewDescriptorService();\n\t\ttestObject.whenExtensionsRegistered();\n\n\t\tassert.deepStrictEqual(testObject.getViewContainerById(generatedViewContainerId), null);\n\t\tassert.deepStrictEqual(testObject.isViewContainerRemovedPermanently(generatedViewContainerId), true);\n\n\t\tconst actual = JSON.parse(storageService.get('views.customizations', StorageScope.PROFILE)!);\n\t\tassert.deepStrictEqual(actual, { viewContainerLocations: {}, viewLocations: {}, viewContainerBadgeEnablementStates: {} });\n\t});\n\n\ttest('custom locations take precedence when default view container of views change', async function () {\n\t\tconst storageService = instantiationService.get(IStorageService);\n\t\tconst viewContainer1 = ViewContainersRegistry.registerViewContainer({ id: `${viewContainerIdPrefix}-${generateUuid()}`, title: nls.localize2('test', 'test'), ctorDescriptor: new SyncDescriptor(<any>{}) }, ViewContainerLocation.Sidebar);\n\t\tconst generateViewContainer1 = `workbench.views.service.${ViewContainerLocationToString(ViewContainerLocation.Sidebar)}.${generateUuid()}`;\n\t\tconst viewsCustomizations = {\n\t\t\tviewContainerLocations: {\n\t\t\t\t[generateViewContainer1]: ViewContainerLocation.Sidebar,\n\t\t\t\t[viewContainer1.id]: ViewContainerLocation.AuxiliaryBar\n\t\t\t},\n\t\t\tviewLocations: {\n\t\t\t\t'view1': generateViewContainer1\n\t\t\t}\n\t\t};\n\t\tstorageService.store('views.customizations', JSON.stringify(viewsCustomizations), StorageScope.PROFILE, StorageTarget.USER);\n\n\t\tconst viewDescriptors: IViewDescriptor[] = [\n\t\t\t{\n\t\t\t\tid: 'view1',\n\t\t\t\tctorDescriptor: null!,\n\t\t\t\tname: nls.localize2('Test View 1', 'Test View 1'),\n\t\t\t\tcanMoveView: true\n\t\t\t},\n\t\t\t{\n\t\t\t\tid: 'view2',\n\t\t\t\tctorDescriptor: null!,\n\t\t\t\tname: nls.localize2('Test View 2', 'Test View 2'),\n\t\t\t\tcanMoveView: true\n\t\t\t},\n\t\t\t{\n\t\t\t\tid: 'view3',\n\t\t\t\tctorDescriptor: null!,\n\t\t\t\tname: nls.localize2('Test View 3', 'Test View 3'),\n\t\t\t\tcanMoveView: true\n\t\t\t},\n\t\t\t{\n\t\t\t\tid: 'view4',\n\t\t\t\tctorDescriptor: null!,\n\t\t\t\tname: nls.localize2('Test View 4', 'Test View 4'),\n\t\t\t\tcanMoveView: true\n\t\t\t}\n\t\t];\n\n\t\tViewsRegistry.registerViews(viewDescriptors.slice(0, 3), sidebarContainer);\n\t\tViewsRegistry.registerViews(viewDescriptors.slice(3), viewContainer1);\n\n\t\tconst testObject = aViewDescriptorService();\n\t\tViewsRegistry.moveViews([viewDescriptors[0], viewDescriptors[1]], panelContainer);\n\n\t\tconst sidebarViews = testObject.getViewContainerModel(sidebarContainer);\n\t\tassert.deepStrictEqual(sidebarViews.allViewDescriptors.map(v => v.id), ['view3']);\n\n\t\tconst panelViews = testObject.getViewContainerModel(panelContainer);\n\t\tassert.deepStrictEqual(panelViews.allViewDescriptors.map(v => v.id), ['view2']);\n\n\t\tconst generatedViewContainerViews = testObject.getViewContainerModel(testObject.getViewContainerById(generateViewContainer1)!);\n\t\tassert.deepStrictEqual(generatedViewContainerViews.allViewDescriptors.map(v => v.id), ['view1']);\n\n\t\tconst viewContainer1Views = testObject.getViewContainerModel(viewContainer1);\n\t\tassert.deepStrictEqual(testObject.getViewContainerLocation(viewContainer1), ViewContainerLocation.AuxiliaryBar);\n\t\tassert.deepStrictEqual(viewContainer1Views.allViewDescriptors.map(v => v.id), ['view4']);\n\t});\n\n\ttest('view containers with not existing views are not removed from customizations', async function () {\n\t\tconst storageService = instantiationService.get(IStorageService);\n\t\tconst viewContainer1 = ViewContainersRegistry.registerViewContainer({ id: `${viewContainerIdPrefix}-${generateUuid()}`, title: nls.localize2('test', 'test'), ctorDescriptor: new SyncDescriptor(<any>{}) }, ViewContainerLocation.Sidebar);\n\t\tconst generateViewContainer1 = `workbench.views.service.${ViewContainerLocationToString(ViewContainerLocation.Sidebar)}.${generateUuid()}`;\n\t\tconst viewsCustomizations = {\n\t\t\tviewContainerLocations: {\n\t\t\t\t[generateViewContainer1]: ViewContainerLocation.Sidebar,\n\t\t\t\t[viewContainer1.id]: ViewContainerLocation.AuxiliaryBar\n\t\t\t},\n\t\t\tviewLocations: {\n\t\t\t\t'view5': generateViewContainer1\n\t\t\t}\n\t\t};\n\t\tstorageService.store('views.customizations', JSON.stringify(viewsCustomizations), StorageScope.PROFILE, StorageTarget.USER);\n\n\t\tconst viewDescriptors: IViewDescriptor[] = [\n\t\t\t{\n\t\t\t\tid: 'view1',\n\t\t\t\tctorDescriptor: null!,\n\t\t\t\tname: nls.localize2('Test View 1', 'Test View 1'),\n\t\t\t\tcanMoveView: true\n\t\t\t}\n\t\t];\n\n\t\tViewsRegistry.registerViews(viewDescriptors, viewContainer1);\n\n\t\tconst testObject = aViewDescriptorService();\n\t\ttestObject.whenExtensionsRegistered();\n\n\t\tconst viewContainer1Views = testObject.getViewContainerModel(viewContainer1);\n\t\tassert.deepStrictEqual(testObject.getViewContainerLocation(viewContainer1), ViewContainerLocation.AuxiliaryBar);\n\t\tassert.deepStrictEqual(viewContainer1Views.allViewDescriptors.map(v => v.id), ['view1']);\n\n\t\tconst actual = JSON.parse(storageService.get('views.customizations', StorageScope.PROFILE)!);\n\t\tassert.deepStrictEqual(actual, viewsCustomizations);\n\t});\n\n\ttest('storage change also updates locations even if views do not exists and views are registered later', async function () {\n\t\tconst storageService = instantiationService.get(IStorageService);\n\t\tconst testObject = aViewDescriptorService();\n\n\t\tconst generateViewContainerId = `workbench.views.service.${ViewContainerLocationToString(ViewContainerLocation.AuxiliaryBar)}.${generateUuid()}`;\n\t\tconst viewsCustomizations = {\n\t\t\tviewContainerLocations: {\n\t\t\t\t[generateViewContainerId]: ViewContainerLocation.AuxiliaryBar,\n\t\t\t},\n\t\t\tviewLocations: {\n\t\t\t\t'view1': generateViewContainerId\n\t\t\t}\n\t\t};\n\t\tstorageService.store('views.customizations', JSON.stringify(viewsCustomizations), StorageScope.PROFILE, StorageTarget.USER);\n\n\t\tconst viewContainer = ViewContainersRegistry.registerViewContainer({ id: `${viewContainerIdPrefix}-${generateUuid()}`, title: nls.localize2('test', 'test'), ctorDescriptor: new SyncDescriptor(<any>{}) }, ViewContainerLocation.Sidebar);\n\t\tconst viewDescriptors: IViewDescriptor[] = [\n\t\t\t{\n\t\t\t\tid: 'view1',\n\t\t\t\tctorDescriptor: null!,\n\t\t\t\tname: nls.localize2('Test View 1', 'Test View 1'),\n\t\t\t\tcanMoveView: true\n\t\t\t},\n\t\t\t{\n\t\t\t\tid: 'view2',\n\t\t\t\tctorDescriptor: null!,\n\t\t\t\tname: nls.localize2('Test View 2', 'Test View 2'),\n\t\t\t\tcanMoveView: true\n\t\t\t}\n\t\t];\n\t\tViewsRegistry.registerViews(viewDescriptors, viewContainer);\n\n\t\ttestObject.whenExtensionsRegistered();\n\n\t\tconst viewContainer1Views = testObject.getViewContainerModel(viewContainer);\n\t\tassert.deepStrictEqual(viewContainer1Views.allViewDescriptors.map(v => v.id), ['view2']);\n\n\t\tconst generateViewContainer = testObject.getViewContainerById(generateViewContainerId)!;\n\t\tassert.deepStrictEqual(testObject.getViewContainerLocation(generateViewContainer), ViewContainerLocation.AuxiliaryBar);\n\t\tconst generatedViewContainerModel = testObject.getViewContainerModel(generateViewContainer);\n\t\tassert.deepStrictEqual(generatedViewContainerModel.allViewDescriptors.map(v => v.id), ['view1']);\n\t});\n\n\ttest('storage change move views and retain visibility state', async function () {\n\t\tconst storageService = instantiationService.get(IStorageService);\n\t\tconst testObject = aViewDescriptorService();\n\n\t\tconst viewContainer = ViewContainersRegistry.registerViewContainer({ id: `${viewContainerIdPrefix}-${generateUuid()}`, title: nls.localize2('test', 'test'), ctorDescriptor: new SyncDescriptor(<any>{}) }, ViewContainerLocation.Sidebar);\n\t\tconst viewDescriptors: IViewDescriptor[] = [\n\t\t\t{\n\t\t\t\tid: 'view1',\n\t\t\t\tctorDescriptor: null!,\n\t\t\t\tname: nls.localize2('Test View 1', 'Test View 1'),\n\t\t\t\tcanMoveView: true,\n\t\t\t\tcanToggleVisibility: true\n\t\t\t},\n\t\t\t{\n\t\t\t\tid: 'view2',\n\t\t\t\tctorDescriptor: null!,\n\t\t\t\tname: nls.localize2('Test View 2', 'Test View 2'),\n\t\t\t\tcanMoveView: true\n\t\t\t}\n\t\t];\n\t\tViewsRegistry.registerViews(viewDescriptors, viewContainer);\n\n\t\ttestObject.whenExtensionsRegistered();\n\n\t\tconst viewContainer1Views = testObject.getViewContainerModel(viewContainer);\n\t\tviewContainer1Views.setVisible('view1', false);\n\n\t\tconst generateViewContainerId = `workbench.views.service.${ViewContainerLocationToString(ViewContainerLocation.AuxiliaryBar)}.${generateUuid()}`;\n\t\tconst viewsCustomizations = {\n\t\t\tviewContainerLocations: {\n\t\t\t\t[generateViewContainerId]: ViewContainerLocation.AuxiliaryBar,\n\t\t\t},\n\t\t\tviewLocations: {\n\t\t\t\t'view1': generateViewContainerId\n\t\t\t}\n\t\t};\n\t\tstorageService.store('views.customizations', JSON.stringify(viewsCustomizations), StorageScope.PROFILE, StorageTarget.USER);\n\n\t\tconst generateViewContainer = testObject.getViewContainerById(generateViewContainerId)!;\n\t\tconst generatedViewContainerModel = testObject.getViewContainerModel(generateViewContainer);\n\n\t\tassert.deepStrictEqual(viewContainer1Views.allViewDescriptors.map(v => v.id), ['view2']);\n\t\tassert.deepStrictEqual(testObject.getViewContainerLocation(generateViewContainer), ViewContainerLocation.AuxiliaryBar);\n\t\tassert.deepStrictEqual(generatedViewContainerModel.allViewDescriptors.map(v => v.id), ['view1']);\n\n\t\tstorageService.store('views.customizations', JSON.stringify({}), StorageScope.PROFILE, StorageTarget.USER);\n\n\t\tassert.deepStrictEqual(viewContainer1Views.allViewDescriptors.map(v => v.id).sort((a, b) => compare(a, b)), ['view1', 'view2']);\n\t\tassert.deepStrictEqual(viewContainer1Views.visibleViewDescriptors.map(v => v.id), ['view2']);\n\t\tassert.deepStrictEqual(generatedViewContainerModel.allViewDescriptors.map(v => v.id), []);\n\t});\n\n});\n"],
  "mappings": "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",
  "names": []
}
