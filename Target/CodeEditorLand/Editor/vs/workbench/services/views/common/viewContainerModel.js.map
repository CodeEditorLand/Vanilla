{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/views/common/viewContainerModel.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { coalesce, move } from \"../../../../base/common/arrays.js\";\nimport type { IStringDictionary } from \"../../../../base/common/collections.js\";\nimport { Emitter, Event } from \"../../../../base/common/event.js\";\nimport { Lazy } from \"../../../../base/common/lazy.js\";\nimport {\n\tDisposable,\n\tDisposableStore,\n} from \"../../../../base/common/lifecycle.js\";\nimport { CounterSet } from \"../../../../base/common/map.js\";\nimport { isEqual } from \"../../../../base/common/resources.js\";\nimport { ThemeIcon } from \"../../../../base/common/themables.js\";\nimport {\n\tisUndefined,\n\tisUndefinedOrNull,\n} from \"../../../../base/common/types.js\";\nimport { URI } from \"../../../../base/common/uri.js\";\nimport { localize2 } from \"../../../../nls.js\";\nimport { Categories } from \"../../../../platform/action/common/actionCommonCategories.js\";\nimport {\n\tAction2,\n\tregisterAction2,\n} from \"../../../../platform/actions/common/actions.js\";\nimport { IContextKeyService } from \"../../../../platform/contextkey/common/contextkey.js\";\nimport {\n\tIInstantiationService,\n\ttype ServicesAccessor,\n} from \"../../../../platform/instantiation/common/instantiation.js\";\nimport {\n\ttype ILogger,\n\tILoggerService,\n} from \"../../../../platform/log/common/log.js\";\nimport { Registry } from \"../../../../platform/registry/common/platform.js\";\nimport {\n\tIStorageService,\n\tStorageScope,\n\tStorageTarget,\n} from \"../../../../platform/storage/common/storage.js\";\nimport {\n\ttype IAddedViewDescriptorRef,\n\ttype IAddedViewDescriptorState,\n\ttype IViewContainerModel,\n\ttype IViewDescriptor,\n\ttype IViewDescriptorRef,\n\ttype IViewsRegistry,\n\tVIEWS_LOG_ID,\n\tVIEWS_LOG_NAME,\n\ttype ViewContainer,\n\tExtensions as ViewExtensions,\n\tdefaultViewIcon,\n} from \"../../../common/views.js\";\nimport { IOutputService } from \"../../output/common/output.js\";\n\nregisterAction2(\n\tclass extends Action2 {\n\t\tconstructor() {\n\t\t\tsuper({\n\t\t\t\tid: \"_workbench.output.showViewsLog\",\n\t\t\t\ttitle: localize2(\"showViewsLog\", \"Show Views Log\"),\n\t\t\t\tcategory: Categories.Developer,\n\t\t\t\tf1: true,\n\t\t\t});\n\t\t}\n\t\tasync run(servicesAccessor: ServicesAccessor): Promise<void> {\n\t\t\tconst loggerService = servicesAccessor.get(ILoggerService);\n\t\t\tconst outputService = servicesAccessor.get(IOutputService);\n\t\t\tloggerService.setVisibility(VIEWS_LOG_ID, true);\n\t\t\toutputService.showChannel(VIEWS_LOG_ID);\n\t\t}\n\t},\n);\n\nexport function getViewsStateStorageId(viewContainerStorageId: string): string {\n\treturn `${viewContainerStorageId}.hidden`;\n}\n\ninterface IStoredWorkspaceViewState {\n\tcollapsed: boolean;\n\tisHidden: boolean;\n\tsize?: number;\n\torder?: number;\n}\n\ninterface IStoredGlobalViewState {\n\tid: string;\n\tisHidden: boolean;\n\torder?: number;\n}\n\ninterface IViewDescriptorState {\n\tvisibleGlobal: boolean | undefined;\n\tvisibleWorkspace: boolean | undefined;\n\tcollapsed: boolean | undefined;\n\tactive: boolean;\n\torder?: number;\n\tsize?: number;\n}\n\nclass ViewDescriptorsState extends Disposable {\n\tprivate readonly workspaceViewsStateStorageId: string;\n\tprivate readonly globalViewsStateStorageId: string;\n\tprivate readonly state: Map<string, IViewDescriptorState>;\n\n\tprivate _onDidChangeStoredState = this._register(\n\t\tnew Emitter<{ id: string; visible: boolean }[]>(),\n\t);\n\treadonly onDidChangeStoredState = this._onDidChangeStoredState.event;\n\n\tprivate readonly logger: Lazy<ILogger>;\n\n\tconstructor(\n\t\tviewContainerStorageId: string,\n\t\tprivate readonly viewContainerName: string,\n\t\t@IStorageService private readonly storageService: IStorageService,\n\t\t@ILoggerService loggerService: ILoggerService,\n\t) {\n\t\tsuper();\n\n\t\tthis.logger = new Lazy(() => loggerService.createLogger(VIEWS_LOG_ID, { name: VIEWS_LOG_NAME, hidden: true }));\n\n\t\tthis.globalViewsStateStorageId = getViewsStateStorageId(viewContainerStorageId);\n\t\tthis.workspaceViewsStateStorageId = viewContainerStorageId;\n\t\tthis._register(this.storageService.onDidChangeValue(StorageScope.PROFILE, this.globalViewsStateStorageId, this._register(new DisposableStore()))(() => this.onDidStorageChange()));\n\n\t\tthis.state = this.initialize();\n\n\t}\n\n\tset(id: string, state: IViewDescriptorState): void {\n\t\tthis.state.set(id, state);\n\t}\n\n\tget(id: string): IViewDescriptorState | undefined {\n\t\treturn this.state.get(id);\n\t}\n\n\tupdateState(viewDescriptors: ReadonlyArray<IViewDescriptor>): void {\n\t\tthis.updateWorkspaceState(viewDescriptors);\n\t\tthis.updateGlobalState(viewDescriptors);\n\t}\n\n\tprivate updateWorkspaceState(\n\t\tviewDescriptors: ReadonlyArray<IViewDescriptor>,\n\t): void {\n\t\tconst storedViewsStates = this.getStoredWorkspaceState();\n\t\tfor (const viewDescriptor of viewDescriptors) {\n\t\t\tconst viewState = this.get(viewDescriptor.id);\n\t\t\tif (viewState) {\n\t\t\t\tstoredViewsStates[viewDescriptor.id] = {\n\t\t\t\t\tcollapsed: !!viewState.collapsed,\n\t\t\t\t\tisHidden: !viewState.visibleWorkspace,\n\t\t\t\t\tsize: viewState.size,\n\t\t\t\t\torder:\n\t\t\t\t\t\tviewDescriptor.workspace && viewState\n\t\t\t\t\t\t\t? viewState.order\n\t\t\t\t\t\t\t: undefined,\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\n\t\tif (Object.keys(storedViewsStates).length > 0) {\n\t\t\tthis.storageService.store(\n\t\t\t\tthis.workspaceViewsStateStorageId,\n\t\t\t\tJSON.stringify(storedViewsStates),\n\t\t\t\tStorageScope.WORKSPACE,\n\t\t\t\tStorageTarget.MACHINE,\n\t\t\t);\n\t\t} else {\n\t\t\tthis.storageService.remove(\n\t\t\t\tthis.workspaceViewsStateStorageId,\n\t\t\t\tStorageScope.WORKSPACE,\n\t\t\t);\n\t\t}\n\t}\n\n\tprivate updateGlobalState(\n\t\tviewDescriptors: ReadonlyArray<IViewDescriptor>,\n\t): void {\n\t\tconst storedGlobalState = this.getStoredGlobalState();\n\t\tfor (const viewDescriptor of viewDescriptors) {\n\t\t\tconst state = this.get(viewDescriptor.id);\n\t\t\tstoredGlobalState.set(viewDescriptor.id, {\n\t\t\t\tid: viewDescriptor.id,\n\t\t\t\tisHidden:\n\t\t\t\t\tstate && viewDescriptor.canToggleVisibility\n\t\t\t\t\t\t? !state.visibleGlobal\n\t\t\t\t\t\t: false,\n\t\t\t\torder:\n\t\t\t\t\t!viewDescriptor.workspace && state\n\t\t\t\t\t\t? state.order\n\t\t\t\t\t\t: undefined,\n\t\t\t});\n\t\t}\n\t\tthis.setStoredGlobalState(storedGlobalState);\n\t}\n\n\tprivate onDidStorageChange(): void {\n\t\tif (\n\t\t\tthis.globalViewsStatesValue !==\n\t\t\tthis.getStoredGlobalViewsStatesValue() /* This checks if current window changed the value or not */\n\t\t) {\n\t\t\tthis._globalViewsStatesValue = undefined;\n\t\t\tconst storedViewsVisibilityStates = this.getStoredGlobalState();\n\t\t\tconst storedWorkspaceViewsStates = this.getStoredWorkspaceState();\n\t\t\tconst changedStates: { id: string; visible: boolean }[] = [];\n\t\t\tfor (const [id, storedState] of storedViewsVisibilityStates) {\n\t\t\t\tconst state = this.get(id);\n\t\t\t\tif (state) {\n\t\t\t\t\tif (state.visibleGlobal !== !storedState.isHidden) {\n\t\t\t\t\t\tif (!storedState.isHidden) {\n\t\t\t\t\t\t\tthis.logger.value.info(\n\t\t\t\t\t\t\t\t`View visibility state changed: ${id} is now visible`,\n\t\t\t\t\t\t\t\tthis.viewContainerName,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tchangedStates.push({\n\t\t\t\t\t\t\tid,\n\t\t\t\t\t\t\tvisible: !storedState.isHidden,\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tconst workspaceViewState:\n\t\t\t\t\t\t| IStoredWorkspaceViewState\n\t\t\t\t\t\t| undefined = storedWorkspaceViewsStates[id];\n\t\t\t\t\tthis.set(id, {\n\t\t\t\t\t\tactive: false,\n\t\t\t\t\t\tvisibleGlobal: !storedState.isHidden,\n\t\t\t\t\t\tvisibleWorkspace: isUndefined(\n\t\t\t\t\t\t\tworkspaceViewState?.isHidden,\n\t\t\t\t\t\t)\n\t\t\t\t\t\t\t? undefined\n\t\t\t\t\t\t\t: !workspaceViewState?.isHidden,\n\t\t\t\t\t\tcollapsed: workspaceViewState?.collapsed,\n\t\t\t\t\t\torder: workspaceViewState?.order,\n\t\t\t\t\t\tsize: workspaceViewState?.size,\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (changedStates.length) {\n\t\t\t\tthis._onDidChangeStoredState.fire(changedStates);\n\t\t\t\t// Update the in memory state after firing the event\n\t\t\t\t// so that the views can update their state accordingly\n\t\t\t\tfor (const changedState of changedStates) {\n\t\t\t\t\tconst state = this.get(changedState.id);\n\t\t\t\t\tif (state) {\n\t\t\t\t\t\tstate.visibleGlobal = changedState.visible;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate initialize(): Map<string, IViewDescriptorState> {\n\t\tconst viewStates = new Map<string, IViewDescriptorState>();\n\t\tconst workspaceViewsStates = this.getStoredWorkspaceState();\n\t\tfor (const id of Object.keys(workspaceViewsStates)) {\n\t\t\tconst workspaceViewState = workspaceViewsStates[id];\n\t\t\tviewStates.set(id, {\n\t\t\t\tactive: false,\n\t\t\t\tvisibleGlobal: undefined,\n\t\t\t\tvisibleWorkspace: isUndefined(workspaceViewState.isHidden)\n\t\t\t\t\t? undefined\n\t\t\t\t\t: !workspaceViewState.isHidden,\n\t\t\t\tcollapsed: workspaceViewState.collapsed,\n\t\t\t\torder: workspaceViewState.order,\n\t\t\t\tsize: workspaceViewState.size,\n\t\t\t});\n\t\t}\n\n\t\t// Migrate to `viewletStateStorageId`\n\t\tconst value = this.storageService.get(\n\t\t\tthis.globalViewsStateStorageId,\n\t\t\tStorageScope.WORKSPACE,\n\t\t\t\"[]\",\n\t\t);\n\t\tconst { state: workspaceVisibilityStates } =\n\t\t\tthis.parseStoredGlobalState(value);\n\t\tif (workspaceVisibilityStates.size > 0) {\n\t\t\tfor (const { id, isHidden } of workspaceVisibilityStates.values()) {\n\t\t\t\tconst viewState = viewStates.get(id);\n\t\t\t\t// Not migrated to `viewletStateStorageId`\n\t\t\t\tif (viewState) {\n\t\t\t\t\tif (isUndefined(viewState.visibleWorkspace)) {\n\t\t\t\t\t\tviewState.visibleWorkspace = !isHidden;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tviewStates.set(id, {\n\t\t\t\t\t\tactive: false,\n\t\t\t\t\t\tcollapsed: undefined,\n\t\t\t\t\t\tvisibleGlobal: undefined,\n\t\t\t\t\t\tvisibleWorkspace: !isHidden,\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis.storageService.remove(\n\t\t\t\tthis.globalViewsStateStorageId,\n\t\t\t\tStorageScope.WORKSPACE,\n\t\t\t);\n\t\t}\n\n\t\tconst { state, hasDuplicates } = this.parseStoredGlobalState(\n\t\t\tthis.globalViewsStatesValue,\n\t\t);\n\t\tif (hasDuplicates) {\n\t\t\tthis.setStoredGlobalState(state);\n\t\t}\n\t\tfor (const { id, isHidden, order } of state.values()) {\n\t\t\tconst viewState = viewStates.get(id);\n\t\t\tif (viewState) {\n\t\t\t\tviewState.visibleGlobal = !isHidden;\n\t\t\t\tif (!isUndefined(order)) {\n\t\t\t\t\tviewState.order = order;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tviewStates.set(id, {\n\t\t\t\t\tactive: false,\n\t\t\t\t\tvisibleGlobal: !isHidden,\n\t\t\t\t\torder,\n\t\t\t\t\tcollapsed: undefined,\n\t\t\t\t\tvisibleWorkspace: undefined,\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t\treturn viewStates;\n\t}\n\n\tprivate getStoredWorkspaceState(): IStringDictionary<IStoredWorkspaceViewState> {\n\t\treturn JSON.parse(\n\t\t\tthis.storageService.get(\n\t\t\t\tthis.workspaceViewsStateStorageId,\n\t\t\t\tStorageScope.WORKSPACE,\n\t\t\t\t\"{}\",\n\t\t\t),\n\t\t);\n\t}\n\n\tprivate getStoredGlobalState(): Map<string, IStoredGlobalViewState> {\n\t\treturn this.parseStoredGlobalState(this.globalViewsStatesValue).state;\n\t}\n\n\tprivate setStoredGlobalState(\n\t\tstoredGlobalState: Map<string, IStoredGlobalViewState>,\n\t): void {\n\t\tthis.globalViewsStatesValue = JSON.stringify([\n\t\t\t...storedGlobalState.values(),\n\t\t]);\n\t}\n\n\tprivate parseStoredGlobalState(value: string): {\n\t\tstate: Map<string, IStoredGlobalViewState>;\n\t\thasDuplicates: boolean;\n\t} {\n\t\tconst storedValue: Array<string | IStoredGlobalViewState> =\n\t\t\tJSON.parse(value);\n\t\tlet hasDuplicates = false;\n\t\tconst state = storedValue.reduce((result, storedState) => {\n\t\t\tif (typeof storedState === \"string\" /* migration */) {\n\t\t\t\thasDuplicates = hasDuplicates || result.has(storedState);\n\t\t\t\tresult.set(storedState, { id: storedState, isHidden: true });\n\t\t\t} else {\n\t\t\t\thasDuplicates = hasDuplicates || result.has(storedState.id);\n\t\t\t\tresult.set(storedState.id, storedState);\n\t\t\t}\n\t\t\treturn result;\n\t\t}, new Map<string, IStoredGlobalViewState>());\n\t\treturn { state, hasDuplicates };\n\t}\n\n\tprivate _globalViewsStatesValue: string | undefined;\n\tprivate get globalViewsStatesValue(): string {\n\t\tif (!this._globalViewsStatesValue) {\n\t\t\tthis._globalViewsStatesValue =\n\t\t\t\tthis.getStoredGlobalViewsStatesValue();\n\t\t}\n\n\t\treturn this._globalViewsStatesValue;\n\t}\n\n\tprivate set globalViewsStatesValue(globalViewsStatesValue: string) {\n\t\tif (this.globalViewsStatesValue !== globalViewsStatesValue) {\n\t\t\tthis._globalViewsStatesValue = globalViewsStatesValue;\n\t\t\tthis.setStoredGlobalViewsStatesValue(globalViewsStatesValue);\n\t\t}\n\t}\n\n\tprivate getStoredGlobalViewsStatesValue(): string {\n\t\treturn this.storageService.get(\n\t\t\tthis.globalViewsStateStorageId,\n\t\t\tStorageScope.PROFILE,\n\t\t\t\"[]\",\n\t\t);\n\t}\n\n\tprivate setStoredGlobalViewsStatesValue(value: string): void {\n\t\tthis.storageService.store(\n\t\t\tthis.globalViewsStateStorageId,\n\t\t\tvalue,\n\t\t\tStorageScope.PROFILE,\n\t\t\tStorageTarget.USER,\n\t\t);\n\t}\n}\n\ninterface IViewDescriptorItem {\n\tviewDescriptor: IViewDescriptor;\n\tstate: IViewDescriptorState;\n}\n\nexport class ViewContainerModel\n\textends Disposable\n\timplements IViewContainerModel\n{\n\tprivate readonly contextKeys = new CounterSet<string>();\n\tprivate viewDescriptorItems: IViewDescriptorItem[] = [];\n\tprivate viewDescriptorsState: ViewDescriptorsState;\n\n\t// Container Info\n\tprivate _title!: string;\n\tget title(): string {\n\t\treturn this._title;\n\t}\n\n\tprivate _icon: URI | ThemeIcon | undefined;\n\tget icon(): URI | ThemeIcon | undefined {\n\t\treturn this._icon;\n\t}\n\n\tprivate _keybindingId: string | undefined;\n\tget keybindingId(): string | undefined {\n\t\treturn this._keybindingId;\n\t}\n\n\tprivate _onDidChangeContainerInfo = this._register(\n\t\tnew Emitter<{\n\t\t\ttitle?: boolean;\n\t\t\ticon?: boolean;\n\t\t\tkeybindingId?: boolean;\n\t\t}>(),\n\t);\n\treadonly onDidChangeContainerInfo = this._onDidChangeContainerInfo.event;\n\n\t// All View Descriptors\n\tget allViewDescriptors(): ReadonlyArray<IViewDescriptor> {\n\t\treturn this.viewDescriptorItems.map((item) => item.viewDescriptor);\n\t}\n\tprivate _onDidChangeAllViewDescriptors = this._register(\n\t\tnew Emitter<{\n\t\t\tadded: ReadonlyArray<IViewDescriptor>;\n\t\t\tremoved: ReadonlyArray<IViewDescriptor>;\n\t\t}>(),\n\t);\n\treadonly onDidChangeAllViewDescriptors =\n\t\tthis._onDidChangeAllViewDescriptors.event;\n\n\t// Active View Descriptors\n\tget activeViewDescriptors(): ReadonlyArray<IViewDescriptor> {\n\t\treturn this.viewDescriptorItems\n\t\t\t.filter((item) => item.state.active)\n\t\t\t.map((item) => item.viewDescriptor);\n\t}\n\tprivate _onDidChangeActiveViewDescriptors = this._register(\n\t\tnew Emitter<{\n\t\t\tadded: ReadonlyArray<IViewDescriptor>;\n\t\t\tremoved: ReadonlyArray<IViewDescriptor>;\n\t\t}>(),\n\t);\n\treadonly onDidChangeActiveViewDescriptors =\n\t\tthis._onDidChangeActiveViewDescriptors.event;\n\n\t// Visible View Descriptors\n\tget visibleViewDescriptors(): ReadonlyArray<IViewDescriptor> {\n\t\treturn this.viewDescriptorItems\n\t\t\t.filter((item) => this.isViewDescriptorVisible(item))\n\t\t\t.map((item) => item.viewDescriptor);\n\t}\n\n\tprivate _onDidAddVisibleViewDescriptors = this._register(\n\t\tnew Emitter<IAddedViewDescriptorRef[]>(),\n\t);\n\treadonly onDidAddVisibleViewDescriptors: Event<IAddedViewDescriptorRef[]> =\n\t\tthis._onDidAddVisibleViewDescriptors.event;\n\n\tprivate _onDidRemoveVisibleViewDescriptors = this._register(\n\t\tnew Emitter<IViewDescriptorRef[]>(),\n\t);\n\treadonly onDidRemoveVisibleViewDescriptors: Event<IViewDescriptorRef[]> =\n\t\tthis._onDidRemoveVisibleViewDescriptors.event;\n\n\tprivate _onDidMoveVisibleViewDescriptors = this._register(\n\t\tnew Emitter<{ from: IViewDescriptorRef; to: IViewDescriptorRef }>(),\n\t);\n\treadonly onDidMoveVisibleViewDescriptors: Event<{\n\t\tfrom: IViewDescriptorRef;\n\t\tto: IViewDescriptorRef;\n\t}> = this._onDidMoveVisibleViewDescriptors.event;\n\n\tprivate readonly logger: Lazy<ILogger>;\n\n\tconstructor(\n\t\treadonly viewContainer: ViewContainer,\n\t\t@IInstantiationService instantiationService: IInstantiationService,\n\t\t@IContextKeyService private readonly contextKeyService: IContextKeyService,\n\t\t@ILoggerService loggerService: ILoggerService,\n\t) {\n\t\tsuper();\n\n\t\tthis.logger = new Lazy(() => loggerService.createLogger(VIEWS_LOG_ID, { name: VIEWS_LOG_NAME, hidden: true }));\n\n\t\tthis._register(Event.filter(contextKeyService.onDidChangeContext, e => e.affectsSome(this.contextKeys))(() => this.onDidChangeContext()));\n\t\tthis.viewDescriptorsState = this._register(instantiationService.createInstance(ViewDescriptorsState, viewContainer.storageId || `${viewContainer.id}.state`, typeof viewContainer.title === 'string' ? viewContainer.title : viewContainer.title.original));\n\t\tthis._register(this.viewDescriptorsState.onDidChangeStoredState(items => this.updateVisibility(items)));\n\n\t\tthis.updateContainerInfo();\n\t}\n\n\tprivate updateContainerInfo(): void {\n\t\t/* Use default container info if one of the visible view descriptors belongs to the current container by default */\n\t\tconst useDefaultContainerInfo =\n\t\t\tthis.viewContainer.alwaysUseContainerInfo ||\n\t\t\tthis.visibleViewDescriptors.length === 0 ||\n\t\t\tthis.visibleViewDescriptors.some(\n\t\t\t\t(v) =>\n\t\t\t\t\tRegistry.as<IViewsRegistry>(\n\t\t\t\t\t\tViewExtensions.ViewsRegistry,\n\t\t\t\t\t).getViewContainer(v.id) === this.viewContainer,\n\t\t\t);\n\t\tconst title = useDefaultContainerInfo\n\t\t\t? typeof this.viewContainer.title === \"string\"\n\t\t\t\t? this.viewContainer.title\n\t\t\t\t: this.viewContainer.title.value\n\t\t\t: this.visibleViewDescriptors[0]?.containerTitle ||\n\t\t\t\tthis.visibleViewDescriptors[0]?.name?.value ||\n\t\t\t\t\"\";\n\t\tlet titleChanged = false;\n\t\tif (this._title !== title) {\n\t\t\tthis._title = title;\n\t\t\ttitleChanged = true;\n\t\t}\n\n\t\tconst icon = useDefaultContainerInfo\n\t\t\t? this.viewContainer.icon\n\t\t\t: this.visibleViewDescriptors[0]?.containerIcon || defaultViewIcon;\n\t\tlet iconChanged = false;\n\t\tif (!this.isEqualIcon(icon)) {\n\t\t\tthis._icon = icon;\n\t\t\ticonChanged = true;\n\t\t}\n\n\t\tconst keybindingId =\n\t\t\tthis.viewContainer.openCommandActionDescriptor?.id ??\n\t\t\tthis.activeViewDescriptors.find(\n\t\t\t\t(v) => v.openCommandActionDescriptor,\n\t\t\t)?.openCommandActionDescriptor?.id;\n\t\tlet keybindingIdChanged = false;\n\t\tif (this._keybindingId !== keybindingId) {\n\t\t\tthis._keybindingId = keybindingId;\n\t\t\tkeybindingIdChanged = true;\n\t\t}\n\n\t\tif (titleChanged || iconChanged || keybindingIdChanged) {\n\t\t\tthis._onDidChangeContainerInfo.fire({\n\t\t\t\ttitle: titleChanged,\n\t\t\t\ticon: iconChanged,\n\t\t\t\tkeybindingId: keybindingIdChanged,\n\t\t\t});\n\t\t}\n\t}\n\n\tprivate isEqualIcon(icon: URI | ThemeIcon | undefined): boolean {\n\t\tif (URI.isUri(icon)) {\n\t\t\treturn URI.isUri(this._icon) && isEqual(icon, this._icon);\n\t\t} else if (ThemeIcon.isThemeIcon(icon)) {\n\t\t\treturn (\n\t\t\t\tThemeIcon.isThemeIcon(this._icon) &&\n\t\t\t\tThemeIcon.isEqual(icon, this._icon)\n\t\t\t);\n\t\t}\n\t\treturn icon === this._icon;\n\t}\n\n\tisVisible(id: string): boolean {\n\t\tconst viewDescriptorItem = this.viewDescriptorItems.find(\n\t\t\t(v) => v.viewDescriptor.id === id,\n\t\t);\n\t\tif (!viewDescriptorItem) {\n\t\t\tthrow new Error(`Unknown view ${id}`);\n\t\t}\n\t\treturn this.isViewDescriptorVisible(viewDescriptorItem);\n\t}\n\n\tsetVisible(id: string, visible: boolean): void {\n\t\tthis.updateVisibility([{ id, visible }]);\n\t}\n\n\tprivate updateVisibility(\n\t\tviewDescriptors: { id: string; visible: boolean }[],\n\t): void {\n\t\t// First: Update and remove the view descriptors which are asked to be hidden\n\t\tconst viewDescriptorItemsToHide = coalesce(\n\t\t\tviewDescriptors\n\t\t\t\t.filter(({ visible }) => !visible)\n\t\t\t\t.map(({ id }) => this.findAndIgnoreIfNotFound(id)),\n\t\t);\n\t\tconst removed: IViewDescriptorRef[] = [];\n\t\tfor (const {\n\t\t\tviewDescriptorItem,\n\t\t\tvisibleIndex,\n\t\t} of viewDescriptorItemsToHide) {\n\t\t\tif (\n\t\t\t\tthis.updateViewDescriptorItemVisibility(\n\t\t\t\t\tviewDescriptorItem,\n\t\t\t\t\tfalse,\n\t\t\t\t)\n\t\t\t) {\n\t\t\t\tremoved.push({\n\t\t\t\t\tviewDescriptor: viewDescriptorItem.viewDescriptor,\n\t\t\t\t\tindex: visibleIndex,\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t\tif (removed.length) {\n\t\t\tthis.broadCastRemovedVisibleViewDescriptors(removed);\n\t\t}\n\n\t\t// Second: Update and add the view descriptors which are asked to be shown\n\t\tconst added: IAddedViewDescriptorRef[] = [];\n\t\tfor (const { id, visible } of viewDescriptors) {\n\t\t\tif (!visible) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tconst foundViewDescriptor = this.findAndIgnoreIfNotFound(id);\n\t\t\tif (!foundViewDescriptor) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tconst { viewDescriptorItem, visibleIndex } = foundViewDescriptor;\n\t\t\tif (\n\t\t\t\tthis.updateViewDescriptorItemVisibility(\n\t\t\t\t\tviewDescriptorItem,\n\t\t\t\t\ttrue,\n\t\t\t\t)\n\t\t\t) {\n\t\t\t\tadded.push({\n\t\t\t\t\tindex: visibleIndex,\n\t\t\t\t\tviewDescriptor: viewDescriptorItem.viewDescriptor,\n\t\t\t\t\tsize: viewDescriptorItem.state.size,\n\t\t\t\t\tcollapsed: !!viewDescriptorItem.state.collapsed,\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t\tif (added.length) {\n\t\t\tthis.broadCastAddedVisibleViewDescriptors(added);\n\t\t}\n\t}\n\n\tprivate updateViewDescriptorItemVisibility(\n\t\tviewDescriptorItem: IViewDescriptorItem,\n\t\tvisible: boolean,\n\t): boolean {\n\t\tif (!viewDescriptorItem.viewDescriptor.canToggleVisibility) {\n\t\t\treturn false;\n\t\t}\n\t\tif (\n\t\t\tthis.isViewDescriptorVisibleWhenActive(viewDescriptorItem) ===\n\t\t\tvisible\n\t\t) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// update visibility\n\t\tif (viewDescriptorItem.viewDescriptor.workspace) {\n\t\t\tviewDescriptorItem.state.visibleWorkspace = visible;\n\t\t} else {\n\t\t\tviewDescriptorItem.state.visibleGlobal = visible;\n\t\t\tif (visible) {\n\t\t\t\tthis.logger.value.info(\n\t\t\t\t\t`Showing view ${viewDescriptorItem.viewDescriptor.id} in the container ${this.viewContainer.id}`,\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\t// return `true` only if visibility is changed\n\t\treturn this.isViewDescriptorVisible(viewDescriptorItem) === visible;\n\t}\n\n\tisCollapsed(id: string): boolean {\n\t\treturn !!this.find(id).viewDescriptorItem.state.collapsed;\n\t}\n\n\tsetCollapsed(id: string, collapsed: boolean): void {\n\t\tconst { viewDescriptorItem } = this.find(id);\n\t\tif (viewDescriptorItem.state.collapsed !== collapsed) {\n\t\t\tviewDescriptorItem.state.collapsed = collapsed;\n\t\t}\n\t\tthis.viewDescriptorsState.updateState(this.allViewDescriptors);\n\t}\n\n\tgetSize(id: string): number | undefined {\n\t\treturn this.find(id).viewDescriptorItem.state.size;\n\t}\n\n\tsetSizes(newSizes: readonly { id: string; size: number }[]): void {\n\t\tfor (const { id, size } of newSizes) {\n\t\t\tconst { viewDescriptorItem } = this.find(id);\n\t\t\tif (viewDescriptorItem.state.size !== size) {\n\t\t\t\tviewDescriptorItem.state.size = size;\n\t\t\t}\n\t\t}\n\t\tthis.viewDescriptorsState.updateState(this.allViewDescriptors);\n\t}\n\n\tmove(from: string, to: string): void {\n\t\tconst fromIndex = this.viewDescriptorItems.findIndex(\n\t\t\t(v) => v.viewDescriptor.id === from,\n\t\t);\n\t\tconst toIndex = this.viewDescriptorItems.findIndex(\n\t\t\t(v) => v.viewDescriptor.id === to,\n\t\t);\n\n\t\tconst fromViewDescriptor = this.viewDescriptorItems[fromIndex];\n\t\tconst toViewDescriptor = this.viewDescriptorItems[toIndex];\n\n\t\tmove(this.viewDescriptorItems, fromIndex, toIndex);\n\n\t\tfor (let index = 0; index < this.viewDescriptorItems.length; index++) {\n\t\t\tthis.viewDescriptorItems[index].state.order = index;\n\t\t}\n\n\t\tthis.broadCastMovedViewDescriptors(\n\t\t\t{\n\t\t\t\tindex: fromIndex,\n\t\t\t\tviewDescriptor: fromViewDescriptor.viewDescriptor,\n\t\t\t},\n\t\t\t{ index: toIndex, viewDescriptor: toViewDescriptor.viewDescriptor },\n\t\t);\n\t}\n\n\tadd(addedViewDescriptorStates: IAddedViewDescriptorState[]): void {\n\t\tconst addedItems: IViewDescriptorItem[] = [];\n\t\tfor (const addedViewDescriptorState of addedViewDescriptorStates) {\n\t\t\tconst viewDescriptor = addedViewDescriptorState.viewDescriptor;\n\n\t\t\tif (viewDescriptor.when) {\n\t\t\t\tfor (const key of viewDescriptor.when.keys()) {\n\t\t\t\t\tthis.contextKeys.add(key);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tlet state = this.viewDescriptorsState.get(viewDescriptor.id);\n\t\t\tif (state) {\n\t\t\t\t// set defaults if not set\n\t\t\t\tif (viewDescriptor.workspace) {\n\t\t\t\t\tstate.visibleWorkspace = isUndefinedOrNull(\n\t\t\t\t\t\taddedViewDescriptorState.visible,\n\t\t\t\t\t)\n\t\t\t\t\t\t? isUndefinedOrNull(state.visibleWorkspace)\n\t\t\t\t\t\t\t? !viewDescriptor.hideByDefault\n\t\t\t\t\t\t\t: state.visibleWorkspace\n\t\t\t\t\t\t: addedViewDescriptorState.visible;\n\t\t\t\t} else {\n\t\t\t\t\tconst isVisible = state.visibleGlobal;\n\t\t\t\t\tstate.visibleGlobal = isUndefinedOrNull(\n\t\t\t\t\t\taddedViewDescriptorState.visible,\n\t\t\t\t\t)\n\t\t\t\t\t\t? isUndefinedOrNull(state.visibleGlobal)\n\t\t\t\t\t\t\t? !viewDescriptor.hideByDefault\n\t\t\t\t\t\t\t: state.visibleGlobal\n\t\t\t\t\t\t: addedViewDescriptorState.visible;\n\t\t\t\t\tif (state.visibleGlobal && !isVisible) {\n\t\t\t\t\t\tthis.logger.value.info(\n\t\t\t\t\t\t\t`Added view ${viewDescriptor.id} in the container ${this.viewContainer.id} and showing it.`,\n\t\t\t\t\t\t\t`${isVisible}`,\n\t\t\t\t\t\t\t`${viewDescriptor.hideByDefault}`,\n\t\t\t\t\t\t\t`${addedViewDescriptorState.visible}`,\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tstate.collapsed = isUndefinedOrNull(\n\t\t\t\t\taddedViewDescriptorState.collapsed,\n\t\t\t\t)\n\t\t\t\t\t? isUndefinedOrNull(state.collapsed)\n\t\t\t\t\t\t? !!viewDescriptor.collapsed\n\t\t\t\t\t\t: state.collapsed\n\t\t\t\t\t: addedViewDescriptorState.collapsed;\n\t\t\t} else {\n\t\t\t\tstate = {\n\t\t\t\t\tactive: false,\n\t\t\t\t\tvisibleGlobal: isUndefinedOrNull(\n\t\t\t\t\t\taddedViewDescriptorState.visible,\n\t\t\t\t\t)\n\t\t\t\t\t\t? !viewDescriptor.hideByDefault\n\t\t\t\t\t\t: addedViewDescriptorState.visible,\n\t\t\t\t\tvisibleWorkspace: isUndefinedOrNull(\n\t\t\t\t\t\taddedViewDescriptorState.visible,\n\t\t\t\t\t)\n\t\t\t\t\t\t? !viewDescriptor.hideByDefault\n\t\t\t\t\t\t: addedViewDescriptorState.visible,\n\t\t\t\t\tcollapsed: isUndefinedOrNull(\n\t\t\t\t\t\taddedViewDescriptorState.collapsed,\n\t\t\t\t\t)\n\t\t\t\t\t\t? !!viewDescriptor.collapsed\n\t\t\t\t\t\t: addedViewDescriptorState.collapsed,\n\t\t\t\t};\n\t\t\t}\n\t\t\tthis.viewDescriptorsState.set(viewDescriptor.id, state);\n\t\t\tstate.active = this.contextKeyService.contextMatchesRules(\n\t\t\t\tviewDescriptor.when,\n\t\t\t);\n\t\t\taddedItems.push({ viewDescriptor, state });\n\t\t}\n\t\tthis.viewDescriptorItems.push(...addedItems);\n\t\tthis.viewDescriptorItems.sort(this.compareViewDescriptors.bind(this));\n\t\tthis._onDidChangeAllViewDescriptors.fire({\n\t\t\tadded: addedItems.map(({ viewDescriptor }) => viewDescriptor),\n\t\t\tremoved: [],\n\t\t});\n\n\t\tconst addedActiveItems: {\n\t\t\tviewDescriptorItem: IViewDescriptorItem;\n\t\t\tvisible: boolean;\n\t\t}[] = [];\n\t\tfor (const viewDescriptorItem of addedItems) {\n\t\t\tif (viewDescriptorItem.state.active) {\n\t\t\t\taddedActiveItems.push({\n\t\t\t\t\tviewDescriptorItem,\n\t\t\t\t\tvisible: this.isViewDescriptorVisible(viewDescriptorItem),\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t\tif (addedActiveItems.length) {\n\t\t\tthis._onDidChangeActiveViewDescriptors.fire({\n\t\t\t\tadded: addedActiveItems.map(\n\t\t\t\t\t({ viewDescriptorItem }) =>\n\t\t\t\t\t\tviewDescriptorItem.viewDescriptor,\n\t\t\t\t),\n\t\t\t\tremoved: [],\n\t\t\t});\n\t\t}\n\n\t\tconst addedVisibleDescriptors: IAddedViewDescriptorRef[] = [];\n\t\tfor (const { viewDescriptorItem, visible } of addedActiveItems) {\n\t\t\tif (visible && this.isViewDescriptorVisible(viewDescriptorItem)) {\n\t\t\t\tconst { visibleIndex } = this.find(\n\t\t\t\t\tviewDescriptorItem.viewDescriptor.id,\n\t\t\t\t);\n\t\t\t\taddedVisibleDescriptors.push({\n\t\t\t\t\tindex: visibleIndex,\n\t\t\t\t\tviewDescriptor: viewDescriptorItem.viewDescriptor,\n\t\t\t\t\tsize: viewDescriptorItem.state.size,\n\t\t\t\t\tcollapsed: !!viewDescriptorItem.state.collapsed,\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t\tthis.broadCastAddedVisibleViewDescriptors(addedVisibleDescriptors);\n\t}\n\n\tremove(viewDescriptors: IViewDescriptor[]): void {\n\t\tconst removed: IViewDescriptor[] = [];\n\t\tconst removedItems: IViewDescriptorItem[] = [];\n\t\tconst removedActiveDescriptors: IViewDescriptor[] = [];\n\t\tconst removedVisibleDescriptors: IViewDescriptorRef[] = [];\n\n\t\tfor (const viewDescriptor of viewDescriptors) {\n\t\t\tif (viewDescriptor.when) {\n\t\t\t\tfor (const key of viewDescriptor.when.keys()) {\n\t\t\t\t\tthis.contextKeys.delete(key);\n\t\t\t\t}\n\t\t\t}\n\t\t\tconst index = this.viewDescriptorItems.findIndex(\n\t\t\t\t(i) => i.viewDescriptor.id === viewDescriptor.id,\n\t\t\t);\n\t\t\tif (index !== -1) {\n\t\t\t\tremoved.push(viewDescriptor);\n\t\t\t\tconst viewDescriptorItem = this.viewDescriptorItems[index];\n\t\t\t\tif (viewDescriptorItem.state.active) {\n\t\t\t\t\tremovedActiveDescriptors.push(\n\t\t\t\t\t\tviewDescriptorItem.viewDescriptor,\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t\tif (this.isViewDescriptorVisible(viewDescriptorItem)) {\n\t\t\t\t\tconst { visibleIndex } = this.find(\n\t\t\t\t\t\tviewDescriptorItem.viewDescriptor.id,\n\t\t\t\t\t);\n\t\t\t\t\tremovedVisibleDescriptors.push({\n\t\t\t\t\t\tindex: visibleIndex,\n\t\t\t\t\t\tviewDescriptor: viewDescriptorItem.viewDescriptor,\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\tremovedItems.push(viewDescriptorItem);\n\t\t\t}\n\t\t}\n\n\t\t// update state\n\t\tremovedItems.forEach((item) =>\n\t\t\tthis.viewDescriptorItems.splice(\n\t\t\t\tthis.viewDescriptorItems.indexOf(item),\n\t\t\t\t1,\n\t\t\t),\n\t\t);\n\n\t\tthis.broadCastRemovedVisibleViewDescriptors(removedVisibleDescriptors);\n\t\tif (removedActiveDescriptors.length) {\n\t\t\tthis._onDidChangeActiveViewDescriptors.fire({\n\t\t\t\tadded: [],\n\t\t\t\tremoved: removedActiveDescriptors,\n\t\t\t});\n\t\t}\n\t\tif (removed.length) {\n\t\t\tthis._onDidChangeAllViewDescriptors.fire({ added: [], removed });\n\t\t}\n\t}\n\n\tprivate onDidChangeContext(): void {\n\t\tconst addedActiveItems: {\n\t\t\titem: IViewDescriptorItem;\n\t\t\tvisibleWhenActive: boolean;\n\t\t}[] = [];\n\t\tconst removedActiveItems: IViewDescriptorItem[] = [];\n\n\t\tfor (const item of this.viewDescriptorItems) {\n\t\t\tconst wasActive = item.state.active;\n\t\t\tconst isActive = this.contextKeyService.contextMatchesRules(\n\t\t\t\titem.viewDescriptor.when,\n\t\t\t);\n\t\t\tif (wasActive !== isActive) {\n\t\t\t\tif (isActive) {\n\t\t\t\t\taddedActiveItems.push({\n\t\t\t\t\t\titem,\n\t\t\t\t\t\tvisibleWhenActive:\n\t\t\t\t\t\t\tthis.isViewDescriptorVisibleWhenActive(item),\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\tremovedActiveItems.push(item);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tconst removedVisibleDescriptors: IViewDescriptorRef[] = [];\n\t\tfor (const item of removedActiveItems) {\n\t\t\tif (this.isViewDescriptorVisible(item)) {\n\t\t\t\tconst { visibleIndex } = this.find(item.viewDescriptor.id);\n\t\t\t\tremovedVisibleDescriptors.push({\n\t\t\t\t\tindex: visibleIndex,\n\t\t\t\t\tviewDescriptor: item.viewDescriptor,\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\t// Update the State\n\t\tremovedActiveItems.forEach((item) => (item.state.active = false));\n\t\taddedActiveItems.forEach(({ item }) => (item.state.active = true));\n\n\t\tthis.broadCastRemovedVisibleViewDescriptors(removedVisibleDescriptors);\n\n\t\tif (addedActiveItems.length || removedActiveItems.length) {\n\t\t\tthis._onDidChangeActiveViewDescriptors.fire({\n\t\t\t\tadded: addedActiveItems.map(({ item }) => item.viewDescriptor),\n\t\t\t\tremoved: removedActiveItems.map((item) => item.viewDescriptor),\n\t\t\t});\n\t\t}\n\n\t\tconst addedVisibleDescriptors: IAddedViewDescriptorRef[] = [];\n\t\tfor (const { item, visibleWhenActive } of addedActiveItems) {\n\t\t\tif (visibleWhenActive && this.isViewDescriptorVisible(item)) {\n\t\t\t\tconst { visibleIndex } = this.find(item.viewDescriptor.id);\n\t\t\t\taddedVisibleDescriptors.push({\n\t\t\t\t\tindex: visibleIndex,\n\t\t\t\t\tviewDescriptor: item.viewDescriptor,\n\t\t\t\t\tsize: item.state.size,\n\t\t\t\t\tcollapsed: !!item.state.collapsed,\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t\tthis.broadCastAddedVisibleViewDescriptors(addedVisibleDescriptors);\n\t}\n\n\tprivate broadCastAddedVisibleViewDescriptors(\n\t\tadded: IAddedViewDescriptorRef[],\n\t): void {\n\t\tif (added.length) {\n\t\t\tthis._onDidAddVisibleViewDescriptors.fire(\n\t\t\t\tadded.sort((a, b) => a.index - b.index),\n\t\t\t);\n\t\t\tthis.updateState(\n\t\t\t\t`Added views:${added.map((v) => v.viewDescriptor.id).join(\",\")} in ${this.viewContainer.id}`,\n\t\t\t);\n\t\t}\n\t}\n\n\tprivate broadCastRemovedVisibleViewDescriptors(\n\t\tremoved: IViewDescriptorRef[],\n\t): void {\n\t\tif (removed.length) {\n\t\t\tthis._onDidRemoveVisibleViewDescriptors.fire(\n\t\t\t\tremoved.sort((a, b) => b.index - a.index),\n\t\t\t);\n\t\t\tthis.updateState(\n\t\t\t\t`Removed views:${removed.map((v) => v.viewDescriptor.id).join(\",\")} from ${this.viewContainer.id}`,\n\t\t\t);\n\t\t}\n\t}\n\n\tprivate broadCastMovedViewDescriptors(\n\t\tfrom: IViewDescriptorRef,\n\t\tto: IViewDescriptorRef,\n\t): void {\n\t\tthis._onDidMoveVisibleViewDescriptors.fire({ from, to });\n\t\tthis.updateState(\n\t\t\t`Moved view ${from.viewDescriptor.id} to ${to.viewDescriptor.id} in ${this.viewContainer.id}`,\n\t\t);\n\t}\n\n\tprivate updateState(reason: string): void {\n\t\tthis.logger.value.info(reason);\n\t\tthis.viewDescriptorsState.updateState(this.allViewDescriptors);\n\t\tthis.updateContainerInfo();\n\t}\n\n\tprivate isViewDescriptorVisible(\n\t\tviewDescriptorItem: IViewDescriptorItem,\n\t): boolean {\n\t\tif (!viewDescriptorItem.state.active) {\n\t\t\treturn false;\n\t\t}\n\t\treturn this.isViewDescriptorVisibleWhenActive(viewDescriptorItem);\n\t}\n\n\tprivate isViewDescriptorVisibleWhenActive(\n\t\tviewDescriptorItem: IViewDescriptorItem,\n\t): boolean {\n\t\tif (viewDescriptorItem.viewDescriptor.workspace) {\n\t\t\treturn !!viewDescriptorItem.state.visibleWorkspace;\n\t\t}\n\t\treturn !!viewDescriptorItem.state.visibleGlobal;\n\t}\n\n\tprivate find(id: string): {\n\t\tindex: number;\n\t\tvisibleIndex: number;\n\t\tviewDescriptorItem: IViewDescriptorItem;\n\t} {\n\t\tconst result = this.findAndIgnoreIfNotFound(id);\n\t\tif (result) {\n\t\t\treturn result;\n\t\t}\n\t\tthrow new Error(`view descriptor ${id} not found`);\n\t}\n\n\tprivate findAndIgnoreIfNotFound(\n\t\tid: string,\n\t):\n\t\t| {\n\t\t\t\tindex: number;\n\t\t\t\tvisibleIndex: number;\n\t\t\t\tviewDescriptorItem: IViewDescriptorItem;\n\t\t  }\n\t\t| undefined {\n\t\tfor (\n\t\t\tlet i = 0, visibleIndex = 0;\n\t\t\ti < this.viewDescriptorItems.length;\n\t\t\ti++\n\t\t) {\n\t\t\tconst viewDescriptorItem = this.viewDescriptorItems[i];\n\t\t\tif (viewDescriptorItem.viewDescriptor.id === id) {\n\t\t\t\treturn {\n\t\t\t\t\tindex: i,\n\t\t\t\t\tvisibleIndex,\n\t\t\t\t\tviewDescriptorItem: viewDescriptorItem,\n\t\t\t\t};\n\t\t\t}\n\t\t\tif (this.isViewDescriptorVisible(viewDescriptorItem)) {\n\t\t\t\tvisibleIndex++;\n\t\t\t}\n\t\t}\n\t\treturn undefined;\n\t}\n\n\tprivate compareViewDescriptors(\n\t\ta: IViewDescriptorItem,\n\t\tb: IViewDescriptorItem,\n\t): number {\n\t\tif (a.viewDescriptor.id === b.viewDescriptor.id) {\n\t\t\treturn 0;\n\t\t}\n\n\t\treturn (\n\t\t\tthis.getViewOrder(a) - this.getViewOrder(b) ||\n\t\t\tthis.getGroupOrderResult(a.viewDescriptor, b.viewDescriptor)\n\t\t);\n\t}\n\n\tprivate getViewOrder(viewDescriptorItem: IViewDescriptorItem): number {\n\t\tconst viewOrder =\n\t\t\ttypeof viewDescriptorItem.state.order === \"number\"\n\t\t\t\t? viewDescriptorItem.state.order\n\t\t\t\t: viewDescriptorItem.viewDescriptor.order;\n\t\treturn typeof viewOrder === \"number\" ? viewOrder : Number.MAX_VALUE;\n\t}\n\n\tprivate getGroupOrderResult(a: IViewDescriptor, b: IViewDescriptor) {\n\t\tif (!a.group || !b.group) {\n\t\t\treturn 0;\n\t\t}\n\n\t\tif (a.group === b.group) {\n\t\t\treturn 0;\n\t\t}\n\n\t\treturn a.group < b.group ? -1 : 1;\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
