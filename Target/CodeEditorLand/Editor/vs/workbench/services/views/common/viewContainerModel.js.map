{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/views/common/viewContainerModel.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { ViewContainer, IViewsRegistry, IViewDescriptor, Extensions as ViewExtensions, IViewContainerModel, IAddedViewDescriptorRef, IViewDescriptorRef, IAddedViewDescriptorState, defaultViewIcon, VIEWS_LOG_ID, VIEWS_LOG_NAME } from '../../../common/views.js';\nimport { IContextKeyService } from '../../../../platform/contextkey/common/contextkey.js';\nimport { IStorageService, StorageScope, StorageTarget } from '../../../../platform/storage/common/storage.js';\nimport { Registry } from '../../../../platform/registry/common/platform.js';\nimport { Disposable, DisposableStore } from '../../../../base/common/lifecycle.js';\nimport { Event, Emitter } from '../../../../base/common/event.js';\nimport { IInstantiationService, ServicesAccessor } from '../../../../platform/instantiation/common/instantiation.js';\nimport { URI } from '../../../../base/common/uri.js';\nimport { coalesce, move } from '../../../../base/common/arrays.js';\nimport { isUndefined, isUndefinedOrNull } from '../../../../base/common/types.js';\nimport { isEqual } from '../../../../base/common/resources.js';\nimport { ThemeIcon } from '../../../../base/common/themables.js';\nimport { IStringDictionary } from '../../../../base/common/collections.js';\nimport { ILogger, ILoggerService } from '../../../../platform/log/common/log.js';\nimport { Action2, registerAction2 } from '../../../../platform/actions/common/actions.js';\nimport { Categories } from '../../../../platform/action/common/actionCommonCategories.js';\nimport { IOutputService } from '../../output/common/output.js';\nimport { CounterSet } from '../../../../base/common/map.js';\nimport { localize2 } from '../../../../nls.js';\nimport { Lazy } from '../../../../base/common/lazy.js';\n\nregisterAction2(class extends Action2 {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: '_workbench.output.showViewsLog',\n\t\t\ttitle: localize2('showViewsLog', \"Show Views Log\"),\n\t\t\tcategory: Categories.Developer,\n\t\t\tf1: true\n\t\t});\n\t}\n\tasync run(servicesAccessor: ServicesAccessor): Promise<void> {\n\t\tconst loggerService = servicesAccessor.get(ILoggerService);\n\t\tconst outputService = servicesAccessor.get(IOutputService);\n\t\tloggerService.setVisibility(VIEWS_LOG_ID, true);\n\t\toutputService.showChannel(VIEWS_LOG_ID);\n\t}\n});\n\nexport function getViewsStateStorageId(viewContainerStorageId: string): string { return `${viewContainerStorageId}.hidden`; }\n\ninterface IStoredWorkspaceViewState {\n\tcollapsed: boolean;\n\tisHidden: boolean;\n\tsize?: number;\n\torder?: number;\n}\n\ninterface IStoredGlobalViewState {\n\tid: string;\n\tisHidden: boolean;\n\torder?: number;\n}\n\ninterface IViewDescriptorState {\n\tvisibleGlobal: boolean | undefined;\n\tvisibleWorkspace: boolean | undefined;\n\tcollapsed: boolean | undefined;\n\tactive: boolean;\n\torder?: number;\n\tsize?: number;\n}\n\nclass ViewDescriptorsState extends Disposable {\n\n\tprivate readonly workspaceViewsStateStorageId: string;\n\tprivate readonly globalViewsStateStorageId: string;\n\tprivate readonly state: Map<string, IViewDescriptorState>;\n\n\tprivate _onDidChangeStoredState = this._register(new Emitter<{ id: string; visible: boolean }[]>());\n\treadonly onDidChangeStoredState = this._onDidChangeStoredState.event;\n\n\tprivate readonly logger: Lazy<ILogger>;\n\n\tconstructor(\n\t\tviewContainerStorageId: string,\n\t\tprivate readonly viewContainerName: string,\n\t\t@IStorageService private readonly storageService: IStorageService,\n\t\t@ILoggerService loggerService: ILoggerService,\n\t) {\n\t\tsuper();\n\n\t\tthis.logger = new Lazy(() => loggerService.createLogger(VIEWS_LOG_ID, { name: VIEWS_LOG_NAME, hidden: true }));\n\n\t\tthis.globalViewsStateStorageId = getViewsStateStorageId(viewContainerStorageId);\n\t\tthis.workspaceViewsStateStorageId = viewContainerStorageId;\n\t\tthis._register(this.storageService.onDidChangeValue(StorageScope.PROFILE, this.globalViewsStateStorageId, this._register(new DisposableStore()))(() => this.onDidStorageChange()));\n\n\t\tthis.state = this.initialize();\n\n\t}\n\n\tset(id: string, state: IViewDescriptorState): void {\n\t\tthis.state.set(id, state);\n\t}\n\n\tget(id: string): IViewDescriptorState | undefined {\n\t\treturn this.state.get(id);\n\t}\n\n\tupdateState(viewDescriptors: ReadonlyArray<IViewDescriptor>): void {\n\t\tthis.updateWorkspaceState(viewDescriptors);\n\t\tthis.updateGlobalState(viewDescriptors);\n\t}\n\n\tprivate updateWorkspaceState(viewDescriptors: ReadonlyArray<IViewDescriptor>): void {\n\t\tconst storedViewsStates = this.getStoredWorkspaceState();\n\t\tfor (const viewDescriptor of viewDescriptors) {\n\t\t\tconst viewState = this.get(viewDescriptor.id);\n\t\t\tif (viewState) {\n\t\t\t\tstoredViewsStates[viewDescriptor.id] = {\n\t\t\t\t\tcollapsed: !!viewState.collapsed,\n\t\t\t\t\tisHidden: !viewState.visibleWorkspace,\n\t\t\t\t\tsize: viewState.size,\n\t\t\t\t\torder: viewDescriptor.workspace && viewState ? viewState.order : undefined\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\n\t\tif (Object.keys(storedViewsStates).length > 0) {\n\t\t\tthis.storageService.store(this.workspaceViewsStateStorageId, JSON.stringify(storedViewsStates), StorageScope.WORKSPACE, StorageTarget.MACHINE);\n\t\t} else {\n\t\t\tthis.storageService.remove(this.workspaceViewsStateStorageId, StorageScope.WORKSPACE);\n\t\t}\n\t}\n\n\tprivate updateGlobalState(viewDescriptors: ReadonlyArray<IViewDescriptor>): void {\n\t\tconst storedGlobalState = this.getStoredGlobalState();\n\t\tfor (const viewDescriptor of viewDescriptors) {\n\t\t\tconst state = this.get(viewDescriptor.id);\n\t\t\tstoredGlobalState.set(viewDescriptor.id, {\n\t\t\t\tid: viewDescriptor.id,\n\t\t\t\tisHidden: state && viewDescriptor.canToggleVisibility ? !state.visibleGlobal : false,\n\t\t\t\torder: !viewDescriptor.workspace && state ? state.order : undefined\n\t\t\t});\n\t\t}\n\t\tthis.setStoredGlobalState(storedGlobalState);\n\t}\n\n\tprivate onDidStorageChange(): void {\n\t\tif (this.globalViewsStatesValue !== this.getStoredGlobalViewsStatesValue() /* This checks if current window changed the value or not */) {\n\t\t\tthis._globalViewsStatesValue = undefined;\n\t\t\tconst storedViewsVisibilityStates = this.getStoredGlobalState();\n\t\t\tconst storedWorkspaceViewsStates = this.getStoredWorkspaceState();\n\t\t\tconst changedStates: { id: string; visible: boolean }[] = [];\n\t\t\tfor (const [id, storedState] of storedViewsVisibilityStates) {\n\t\t\t\tconst state = this.get(id);\n\t\t\t\tif (state) {\n\t\t\t\t\tif (state.visibleGlobal !== !storedState.isHidden) {\n\t\t\t\t\t\tif (!storedState.isHidden) {\n\t\t\t\t\t\t\tthis.logger.value.info(`View visibility state changed: ${id} is now visible`, this.viewContainerName);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tchangedStates.push({ id, visible: !storedState.isHidden });\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tconst workspaceViewState: IStoredWorkspaceViewState | undefined = storedWorkspaceViewsStates[id];\n\t\t\t\t\tthis.set(id, {\n\t\t\t\t\t\tactive: false,\n\t\t\t\t\t\tvisibleGlobal: !storedState.isHidden,\n\t\t\t\t\t\tvisibleWorkspace: isUndefined(workspaceViewState?.isHidden) ? undefined : !workspaceViewState?.isHidden,\n\t\t\t\t\t\tcollapsed: workspaceViewState?.collapsed,\n\t\t\t\t\t\torder: workspaceViewState?.order,\n\t\t\t\t\t\tsize: workspaceViewState?.size,\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (changedStates.length) {\n\t\t\t\tthis._onDidChangeStoredState.fire(changedStates);\n\t\t\t\t// Update the in memory state after firing the event\n\t\t\t\t// so that the views can update their state accordingly\n\t\t\t\tfor (const changedState of changedStates) {\n\t\t\t\t\tconst state = this.get(changedState.id);\n\t\t\t\t\tif (state) {\n\t\t\t\t\t\tstate.visibleGlobal = changedState.visible;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate initialize(): Map<string, IViewDescriptorState> {\n\t\tconst viewStates = new Map<string, IViewDescriptorState>();\n\t\tconst workspaceViewsStates = this.getStoredWorkspaceState();\n\t\tfor (const id of Object.keys(workspaceViewsStates)) {\n\t\t\tconst workspaceViewState = workspaceViewsStates[id];\n\t\t\tviewStates.set(id, {\n\t\t\t\tactive: false,\n\t\t\t\tvisibleGlobal: undefined,\n\t\t\t\tvisibleWorkspace: isUndefined(workspaceViewState.isHidden) ? undefined : !workspaceViewState.isHidden,\n\t\t\t\tcollapsed: workspaceViewState.collapsed,\n\t\t\t\torder: workspaceViewState.order,\n\t\t\t\tsize: workspaceViewState.size,\n\t\t\t});\n\t\t}\n\n\t\t// Migrate to `viewletStateStorageId`\n\t\tconst value = this.storageService.get(this.globalViewsStateStorageId, StorageScope.WORKSPACE, '[]');\n\t\tconst { state: workspaceVisibilityStates } = this.parseStoredGlobalState(value);\n\t\tif (workspaceVisibilityStates.size > 0) {\n\t\t\tfor (const { id, isHidden } of workspaceVisibilityStates.values()) {\n\t\t\t\tconst viewState = viewStates.get(id);\n\t\t\t\t// Not migrated to `viewletStateStorageId`\n\t\t\t\tif (viewState) {\n\t\t\t\t\tif (isUndefined(viewState.visibleWorkspace)) {\n\t\t\t\t\t\tviewState.visibleWorkspace = !isHidden;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tviewStates.set(id, {\n\t\t\t\t\t\tactive: false,\n\t\t\t\t\t\tcollapsed: undefined,\n\t\t\t\t\t\tvisibleGlobal: undefined,\n\t\t\t\t\t\tvisibleWorkspace: !isHidden,\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis.storageService.remove(this.globalViewsStateStorageId, StorageScope.WORKSPACE);\n\t\t}\n\n\t\tconst { state, hasDuplicates } = this.parseStoredGlobalState(this.globalViewsStatesValue);\n\t\tif (hasDuplicates) {\n\t\t\tthis.setStoredGlobalState(state);\n\t\t}\n\t\tfor (const { id, isHidden, order } of state.values()) {\n\t\t\tconst viewState = viewStates.get(id);\n\t\t\tif (viewState) {\n\t\t\t\tviewState.visibleGlobal = !isHidden;\n\t\t\t\tif (!isUndefined(order)) {\n\t\t\t\t\tviewState.order = order;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tviewStates.set(id, {\n\t\t\t\t\tactive: false,\n\t\t\t\t\tvisibleGlobal: !isHidden,\n\t\t\t\t\torder,\n\t\t\t\t\tcollapsed: undefined,\n\t\t\t\t\tvisibleWorkspace: undefined,\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t\treturn viewStates;\n\t}\n\n\tprivate getStoredWorkspaceState(): IStringDictionary<IStoredWorkspaceViewState> {\n\t\treturn JSON.parse(this.storageService.get(this.workspaceViewsStateStorageId, StorageScope.WORKSPACE, '{}'));\n\t}\n\n\tprivate getStoredGlobalState(): Map<string, IStoredGlobalViewState> {\n\t\treturn this.parseStoredGlobalState(this.globalViewsStatesValue).state;\n\t}\n\n\tprivate setStoredGlobalState(storedGlobalState: Map<string, IStoredGlobalViewState>): void {\n\t\tthis.globalViewsStatesValue = JSON.stringify([...storedGlobalState.values()]);\n\t}\n\n\tprivate parseStoredGlobalState(value: string): { state: Map<string, IStoredGlobalViewState>; hasDuplicates: boolean } {\n\t\tconst storedValue: Array<string | IStoredGlobalViewState> = JSON.parse(value);\n\t\tlet hasDuplicates = false;\n\t\tconst state = storedValue.reduce((result, storedState) => {\n\t\t\tif (typeof storedState === 'string' /* migration */) {\n\t\t\t\thasDuplicates = hasDuplicates || result.has(storedState);\n\t\t\t\tresult.set(storedState, { id: storedState, isHidden: true });\n\t\t\t} else {\n\t\t\t\thasDuplicates = hasDuplicates || result.has(storedState.id);\n\t\t\t\tresult.set(storedState.id, storedState);\n\t\t\t}\n\t\t\treturn result;\n\t\t}, new Map<string, IStoredGlobalViewState>());\n\t\treturn { state, hasDuplicates };\n\t}\n\n\tprivate _globalViewsStatesValue: string | undefined;\n\tprivate get globalViewsStatesValue(): string {\n\t\tif (!this._globalViewsStatesValue) {\n\t\t\tthis._globalViewsStatesValue = this.getStoredGlobalViewsStatesValue();\n\t\t}\n\n\t\treturn this._globalViewsStatesValue;\n\t}\n\n\tprivate set globalViewsStatesValue(globalViewsStatesValue: string) {\n\t\tif (this.globalViewsStatesValue !== globalViewsStatesValue) {\n\t\t\tthis._globalViewsStatesValue = globalViewsStatesValue;\n\t\t\tthis.setStoredGlobalViewsStatesValue(globalViewsStatesValue);\n\t\t}\n\t}\n\n\tprivate getStoredGlobalViewsStatesValue(): string {\n\t\treturn this.storageService.get(this.globalViewsStateStorageId, StorageScope.PROFILE, '[]');\n\t}\n\n\tprivate setStoredGlobalViewsStatesValue(value: string): void {\n\t\tthis.storageService.store(this.globalViewsStateStorageId, value, StorageScope.PROFILE, StorageTarget.USER);\n\t}\n\n}\n\ninterface IViewDescriptorItem {\n\tviewDescriptor: IViewDescriptor;\n\tstate: IViewDescriptorState;\n}\n\nexport class ViewContainerModel extends Disposable implements IViewContainerModel {\n\n\tprivate readonly contextKeys = new CounterSet<string>();\n\tprivate viewDescriptorItems: IViewDescriptorItem[] = [];\n\tprivate viewDescriptorsState: ViewDescriptorsState;\n\n\t// Container Info\n\tprivate _title!: string;\n\tget title(): string { return this._title; }\n\n\tprivate _icon: URI | ThemeIcon | undefined;\n\tget icon(): URI | ThemeIcon | undefined { return this._icon; }\n\n\tprivate _keybindingId: string | undefined;\n\tget keybindingId(): string | undefined { return this._keybindingId; }\n\n\tprivate _onDidChangeContainerInfo = this._register(new Emitter<{ title?: boolean; icon?: boolean; keybindingId?: boolean }>());\n\treadonly onDidChangeContainerInfo = this._onDidChangeContainerInfo.event;\n\n\t// All View Descriptors\n\tget allViewDescriptors(): ReadonlyArray<IViewDescriptor> { return this.viewDescriptorItems.map(item => item.viewDescriptor); }\n\tprivate _onDidChangeAllViewDescriptors = this._register(new Emitter<{ added: ReadonlyArray<IViewDescriptor>; removed: ReadonlyArray<IViewDescriptor> }>());\n\treadonly onDidChangeAllViewDescriptors = this._onDidChangeAllViewDescriptors.event;\n\n\t// Active View Descriptors\n\tget activeViewDescriptors(): ReadonlyArray<IViewDescriptor> { return this.viewDescriptorItems.filter(item => item.state.active).map(item => item.viewDescriptor); }\n\tprivate _onDidChangeActiveViewDescriptors = this._register(new Emitter<{ added: ReadonlyArray<IViewDescriptor>; removed: ReadonlyArray<IViewDescriptor> }>());\n\treadonly onDidChangeActiveViewDescriptors = this._onDidChangeActiveViewDescriptors.event;\n\n\t// Visible View Descriptors\n\tget visibleViewDescriptors(): ReadonlyArray<IViewDescriptor> { return this.viewDescriptorItems.filter(item => this.isViewDescriptorVisible(item)).map(item => item.viewDescriptor); }\n\n\tprivate _onDidAddVisibleViewDescriptors = this._register(new Emitter<IAddedViewDescriptorRef[]>());\n\treadonly onDidAddVisibleViewDescriptors: Event<IAddedViewDescriptorRef[]> = this._onDidAddVisibleViewDescriptors.event;\n\n\tprivate _onDidRemoveVisibleViewDescriptors = this._register(new Emitter<IViewDescriptorRef[]>());\n\treadonly onDidRemoveVisibleViewDescriptors: Event<IViewDescriptorRef[]> = this._onDidRemoveVisibleViewDescriptors.event;\n\n\tprivate _onDidMoveVisibleViewDescriptors = this._register(new Emitter<{ from: IViewDescriptorRef; to: IViewDescriptorRef }>());\n\treadonly onDidMoveVisibleViewDescriptors: Event<{ from: IViewDescriptorRef; to: IViewDescriptorRef }> = this._onDidMoveVisibleViewDescriptors.event;\n\n\tprivate readonly logger: Lazy<ILogger>;\n\n\tconstructor(\n\t\treadonly viewContainer: ViewContainer,\n\t\t@IInstantiationService instantiationService: IInstantiationService,\n\t\t@IContextKeyService private readonly contextKeyService: IContextKeyService,\n\t\t@ILoggerService loggerService: ILoggerService,\n\t) {\n\t\tsuper();\n\n\t\tthis.logger = new Lazy(() => loggerService.createLogger(VIEWS_LOG_ID, { name: VIEWS_LOG_NAME, hidden: true }));\n\n\t\tthis._register(Event.filter(contextKeyService.onDidChangeContext, e => e.affectsSome(this.contextKeys))(() => this.onDidChangeContext()));\n\t\tthis.viewDescriptorsState = this._register(instantiationService.createInstance(ViewDescriptorsState, viewContainer.storageId || `${viewContainer.id}.state`, typeof viewContainer.title === 'string' ? viewContainer.title : viewContainer.title.original));\n\t\tthis._register(this.viewDescriptorsState.onDidChangeStoredState(items => this.updateVisibility(items)));\n\n\t\tthis.updateContainerInfo();\n\t}\n\n\tprivate updateContainerInfo(): void {\n\t\t/* Use default container info if one of the visible view descriptors belongs to the current container by default */\n\t\tconst useDefaultContainerInfo = this.viewContainer.alwaysUseContainerInfo || this.visibleViewDescriptors.length === 0 || this.visibleViewDescriptors.some(v => Registry.as<IViewsRegistry>(ViewExtensions.ViewsRegistry).getViewContainer(v.id) === this.viewContainer);\n\t\tconst title = useDefaultContainerInfo ? (typeof this.viewContainer.title === 'string' ? this.viewContainer.title : this.viewContainer.title.value) : this.visibleViewDescriptors[0]?.containerTitle || this.visibleViewDescriptors[0]?.name?.value || '';\n\t\tlet titleChanged: boolean = false;\n\t\tif (this._title !== title) {\n\t\t\tthis._title = title;\n\t\t\ttitleChanged = true;\n\t\t}\n\n\t\tconst icon = useDefaultContainerInfo ? this.viewContainer.icon : this.visibleViewDescriptors[0]?.containerIcon || defaultViewIcon;\n\t\tlet iconChanged: boolean = false;\n\t\tif (!this.isEqualIcon(icon)) {\n\t\t\tthis._icon = icon;\n\t\t\ticonChanged = true;\n\t\t}\n\n\t\tconst keybindingId = this.viewContainer.openCommandActionDescriptor?.id ?? this.activeViewDescriptors.find(v => v.openCommandActionDescriptor)?.openCommandActionDescriptor?.id;\n\t\tlet keybindingIdChanged: boolean = false;\n\t\tif (this._keybindingId !== keybindingId) {\n\t\t\tthis._keybindingId = keybindingId;\n\t\t\tkeybindingIdChanged = true;\n\t\t}\n\n\t\tif (titleChanged || iconChanged || keybindingIdChanged) {\n\t\t\tthis._onDidChangeContainerInfo.fire({ title: titleChanged, icon: iconChanged, keybindingId: keybindingIdChanged });\n\t\t}\n\t}\n\n\tprivate isEqualIcon(icon: URI | ThemeIcon | undefined): boolean {\n\t\tif (URI.isUri(icon)) {\n\t\t\treturn URI.isUri(this._icon) && isEqual(icon, this._icon);\n\t\t} else if (ThemeIcon.isThemeIcon(icon)) {\n\t\t\treturn ThemeIcon.isThemeIcon(this._icon) && ThemeIcon.isEqual(icon, this._icon);\n\t\t}\n\t\treturn icon === this._icon;\n\t}\n\n\tisVisible(id: string): boolean {\n\t\tconst viewDescriptorItem = this.viewDescriptorItems.find(v => v.viewDescriptor.id === id);\n\t\tif (!viewDescriptorItem) {\n\t\t\tthrow new Error(`Unknown view ${id}`);\n\t\t}\n\t\treturn this.isViewDescriptorVisible(viewDescriptorItem);\n\t}\n\n\tsetVisible(id: string, visible: boolean): void {\n\t\tthis.updateVisibility([{ id, visible }]);\n\t}\n\n\tprivate updateVisibility(viewDescriptors: { id: string; visible: boolean }[]): void {\n\t\t// First: Update and remove the view descriptors which are asked to be hidden\n\t\tconst viewDescriptorItemsToHide = coalesce(viewDescriptors.filter(({ visible }) => !visible)\n\t\t\t.map(({ id }) => this.findAndIgnoreIfNotFound(id)));\n\t\tconst removed: IViewDescriptorRef[] = [];\n\t\tfor (const { viewDescriptorItem, visibleIndex } of viewDescriptorItemsToHide) {\n\t\t\tif (this.updateViewDescriptorItemVisibility(viewDescriptorItem, false)) {\n\t\t\t\tremoved.push({ viewDescriptor: viewDescriptorItem.viewDescriptor, index: visibleIndex });\n\t\t\t}\n\t\t}\n\t\tif (removed.length) {\n\t\t\tthis.broadCastRemovedVisibleViewDescriptors(removed);\n\t\t}\n\n\t\t// Second: Update and add the view descriptors which are asked to be shown\n\t\tconst added: IAddedViewDescriptorRef[] = [];\n\t\tfor (const { id, visible } of viewDescriptors) {\n\t\t\tif (!visible) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tconst foundViewDescriptor = this.findAndIgnoreIfNotFound(id);\n\t\t\tif (!foundViewDescriptor) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tconst { viewDescriptorItem, visibleIndex } = foundViewDescriptor;\n\t\t\tif (this.updateViewDescriptorItemVisibility(viewDescriptorItem, true)) {\n\t\t\t\tadded.push({ index: visibleIndex, viewDescriptor: viewDescriptorItem.viewDescriptor, size: viewDescriptorItem.state.size, collapsed: !!viewDescriptorItem.state.collapsed });\n\t\t\t}\n\t\t}\n\t\tif (added.length) {\n\t\t\tthis.broadCastAddedVisibleViewDescriptors(added);\n\t\t}\n\t}\n\n\tprivate updateViewDescriptorItemVisibility(viewDescriptorItem: IViewDescriptorItem, visible: boolean): boolean {\n\t\tif (!viewDescriptorItem.viewDescriptor.canToggleVisibility) {\n\t\t\treturn false;\n\t\t}\n\t\tif (this.isViewDescriptorVisibleWhenActive(viewDescriptorItem) === visible) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// update visibility\n\t\tif (viewDescriptorItem.viewDescriptor.workspace) {\n\t\t\tviewDescriptorItem.state.visibleWorkspace = visible;\n\t\t} else {\n\t\t\tviewDescriptorItem.state.visibleGlobal = visible;\n\t\t\tif (visible) {\n\t\t\t\tthis.logger.value.info(`Showing view ${viewDescriptorItem.viewDescriptor.id} in the container ${this.viewContainer.id}`);\n\t\t\t}\n\t\t}\n\n\t\t// return `true` only if visibility is changed\n\t\treturn this.isViewDescriptorVisible(viewDescriptorItem) === visible;\n\t}\n\n\tisCollapsed(id: string): boolean {\n\t\treturn !!this.find(id).viewDescriptorItem.state.collapsed;\n\t}\n\n\tsetCollapsed(id: string, collapsed: boolean): void {\n\t\tconst { viewDescriptorItem } = this.find(id);\n\t\tif (viewDescriptorItem.state.collapsed !== collapsed) {\n\t\t\tviewDescriptorItem.state.collapsed = collapsed;\n\t\t}\n\t\tthis.viewDescriptorsState.updateState(this.allViewDescriptors);\n\t}\n\n\tgetSize(id: string): number | undefined {\n\t\treturn this.find(id).viewDescriptorItem.state.size;\n\t}\n\n\tsetSizes(newSizes: readonly { id: string; size: number }[]): void {\n\t\tfor (const { id, size } of newSizes) {\n\t\t\tconst { viewDescriptorItem } = this.find(id);\n\t\t\tif (viewDescriptorItem.state.size !== size) {\n\t\t\t\tviewDescriptorItem.state.size = size;\n\t\t\t}\n\t\t}\n\t\tthis.viewDescriptorsState.updateState(this.allViewDescriptors);\n\t}\n\n\tmove(from: string, to: string): void {\n\t\tconst fromIndex = this.viewDescriptorItems.findIndex(v => v.viewDescriptor.id === from);\n\t\tconst toIndex = this.viewDescriptorItems.findIndex(v => v.viewDescriptor.id === to);\n\n\t\tconst fromViewDescriptor = this.viewDescriptorItems[fromIndex];\n\t\tconst toViewDescriptor = this.viewDescriptorItems[toIndex];\n\n\t\tmove(this.viewDescriptorItems, fromIndex, toIndex);\n\n\t\tfor (let index = 0; index < this.viewDescriptorItems.length; index++) {\n\t\t\tthis.viewDescriptorItems[index].state.order = index;\n\t\t}\n\n\t\tthis.broadCastMovedViewDescriptors({ index: fromIndex, viewDescriptor: fromViewDescriptor.viewDescriptor }, { index: toIndex, viewDescriptor: toViewDescriptor.viewDescriptor });\n\t}\n\n\tadd(addedViewDescriptorStates: IAddedViewDescriptorState[]): void {\n\t\tconst addedItems: IViewDescriptorItem[] = [];\n\t\tfor (const addedViewDescriptorState of addedViewDescriptorStates) {\n\t\t\tconst viewDescriptor = addedViewDescriptorState.viewDescriptor;\n\n\t\t\tif (viewDescriptor.when) {\n\t\t\t\tfor (const key of viewDescriptor.when.keys()) {\n\t\t\t\t\tthis.contextKeys.add(key);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tlet state = this.viewDescriptorsState.get(viewDescriptor.id);\n\t\t\tif (state) {\n\t\t\t\t// set defaults if not set\n\t\t\t\tif (viewDescriptor.workspace) {\n\t\t\t\t\tstate.visibleWorkspace = isUndefinedOrNull(addedViewDescriptorState.visible) ? (isUndefinedOrNull(state.visibleWorkspace) ? !viewDescriptor.hideByDefault : state.visibleWorkspace) : addedViewDescriptorState.visible;\n\t\t\t\t} else {\n\t\t\t\t\tconst isVisible = state.visibleGlobal;\n\t\t\t\t\tstate.visibleGlobal = isUndefinedOrNull(addedViewDescriptorState.visible) ? (isUndefinedOrNull(state.visibleGlobal) ? !viewDescriptor.hideByDefault : state.visibleGlobal) : addedViewDescriptorState.visible;\n\t\t\t\t\tif (state.visibleGlobal && !isVisible) {\n\t\t\t\t\t\tthis.logger.value.info(`Added view ${viewDescriptor.id} in the container ${this.viewContainer.id} and showing it.`, `${isVisible}`, `${viewDescriptor.hideByDefault}`, `${addedViewDescriptorState.visible}`);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tstate.collapsed = isUndefinedOrNull(addedViewDescriptorState.collapsed) ? (isUndefinedOrNull(state.collapsed) ? !!viewDescriptor.collapsed : state.collapsed) : addedViewDescriptorState.collapsed;\n\t\t\t} else {\n\t\t\t\tstate = {\n\t\t\t\t\tactive: false,\n\t\t\t\t\tvisibleGlobal: isUndefinedOrNull(addedViewDescriptorState.visible) ? !viewDescriptor.hideByDefault : addedViewDescriptorState.visible,\n\t\t\t\t\tvisibleWorkspace: isUndefinedOrNull(addedViewDescriptorState.visible) ? !viewDescriptor.hideByDefault : addedViewDescriptorState.visible,\n\t\t\t\t\tcollapsed: isUndefinedOrNull(addedViewDescriptorState.collapsed) ? !!viewDescriptor.collapsed : addedViewDescriptorState.collapsed,\n\t\t\t\t};\n\t\t\t}\n\t\t\tthis.viewDescriptorsState.set(viewDescriptor.id, state);\n\t\t\tstate.active = this.contextKeyService.contextMatchesRules(viewDescriptor.when);\n\t\t\taddedItems.push({ viewDescriptor, state });\n\t\t}\n\t\tthis.viewDescriptorItems.push(...addedItems);\n\t\tthis.viewDescriptorItems.sort(this.compareViewDescriptors.bind(this));\n\t\tthis._onDidChangeAllViewDescriptors.fire({ added: addedItems.map(({ viewDescriptor }) => viewDescriptor), removed: [] });\n\n\t\tconst addedActiveItems: { viewDescriptorItem: IViewDescriptorItem; visible: boolean }[] = [];\n\t\tfor (const viewDescriptorItem of addedItems) {\n\t\t\tif (viewDescriptorItem.state.active) {\n\t\t\t\taddedActiveItems.push({ viewDescriptorItem, visible: this.isViewDescriptorVisible(viewDescriptorItem) });\n\t\t\t}\n\t\t}\n\t\tif (addedActiveItems.length) {\n\t\t\tthis._onDidChangeActiveViewDescriptors.fire(({ added: addedActiveItems.map(({ viewDescriptorItem }) => viewDescriptorItem.viewDescriptor), removed: [] }));\n\t\t}\n\n\t\tconst addedVisibleDescriptors: IAddedViewDescriptorRef[] = [];\n\t\tfor (const { viewDescriptorItem, visible } of addedActiveItems) {\n\t\t\tif (visible && this.isViewDescriptorVisible(viewDescriptorItem)) {\n\t\t\t\tconst { visibleIndex } = this.find(viewDescriptorItem.viewDescriptor.id);\n\t\t\t\taddedVisibleDescriptors.push({ index: visibleIndex, viewDescriptor: viewDescriptorItem.viewDescriptor, size: viewDescriptorItem.state.size, collapsed: !!viewDescriptorItem.state.collapsed });\n\t\t\t}\n\t\t}\n\t\tthis.broadCastAddedVisibleViewDescriptors(addedVisibleDescriptors);\n\t}\n\n\tremove(viewDescriptors: IViewDescriptor[]): void {\n\t\tconst removed: IViewDescriptor[] = [];\n\t\tconst removedItems: IViewDescriptorItem[] = [];\n\t\tconst removedActiveDescriptors: IViewDescriptor[] = [];\n\t\tconst removedVisibleDescriptors: IViewDescriptorRef[] = [];\n\n\t\tfor (const viewDescriptor of viewDescriptors) {\n\t\t\tif (viewDescriptor.when) {\n\t\t\t\tfor (const key of viewDescriptor.when.keys()) {\n\t\t\t\t\tthis.contextKeys.delete(key);\n\t\t\t\t}\n\t\t\t}\n\t\t\tconst index = this.viewDescriptorItems.findIndex(i => i.viewDescriptor.id === viewDescriptor.id);\n\t\t\tif (index !== -1) {\n\t\t\t\tremoved.push(viewDescriptor);\n\t\t\t\tconst viewDescriptorItem = this.viewDescriptorItems[index];\n\t\t\t\tif (viewDescriptorItem.state.active) {\n\t\t\t\t\tremovedActiveDescriptors.push(viewDescriptorItem.viewDescriptor);\n\t\t\t\t}\n\t\t\t\tif (this.isViewDescriptorVisible(viewDescriptorItem)) {\n\t\t\t\t\tconst { visibleIndex } = this.find(viewDescriptorItem.viewDescriptor.id);\n\t\t\t\t\tremovedVisibleDescriptors.push({ index: visibleIndex, viewDescriptor: viewDescriptorItem.viewDescriptor });\n\t\t\t\t}\n\t\t\t\tremovedItems.push(viewDescriptorItem);\n\t\t\t}\n\t\t}\n\n\t\t// update state\n\t\tremovedItems.forEach(item => this.viewDescriptorItems.splice(this.viewDescriptorItems.indexOf(item), 1));\n\n\t\tthis.broadCastRemovedVisibleViewDescriptors(removedVisibleDescriptors);\n\t\tif (removedActiveDescriptors.length) {\n\t\t\tthis._onDidChangeActiveViewDescriptors.fire(({ added: [], removed: removedActiveDescriptors }));\n\t\t}\n\t\tif (removed.length) {\n\t\t\tthis._onDidChangeAllViewDescriptors.fire({ added: [], removed });\n\t\t}\n\t}\n\n\tprivate onDidChangeContext(): void {\n\t\tconst addedActiveItems: { item: IViewDescriptorItem; visibleWhenActive: boolean }[] = [];\n\t\tconst removedActiveItems: IViewDescriptorItem[] = [];\n\n\t\tfor (const item of this.viewDescriptorItems) {\n\t\t\tconst wasActive = item.state.active;\n\t\t\tconst isActive = this.contextKeyService.contextMatchesRules(item.viewDescriptor.when);\n\t\t\tif (wasActive !== isActive) {\n\t\t\t\tif (isActive) {\n\t\t\t\t\taddedActiveItems.push({ item, visibleWhenActive: this.isViewDescriptorVisibleWhenActive(item) });\n\t\t\t\t} else {\n\t\t\t\t\tremovedActiveItems.push(item);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tconst removedVisibleDescriptors: IViewDescriptorRef[] = [];\n\t\tfor (const item of removedActiveItems) {\n\t\t\tif (this.isViewDescriptorVisible(item)) {\n\t\t\t\tconst { visibleIndex } = this.find(item.viewDescriptor.id);\n\t\t\t\tremovedVisibleDescriptors.push({ index: visibleIndex, viewDescriptor: item.viewDescriptor });\n\t\t\t}\n\t\t}\n\n\t\t// Update the State\n\t\tremovedActiveItems.forEach(item => item.state.active = false);\n\t\taddedActiveItems.forEach(({ item }) => item.state.active = true);\n\n\t\tthis.broadCastRemovedVisibleViewDescriptors(removedVisibleDescriptors);\n\n\t\tif (addedActiveItems.length || removedActiveItems.length) {\n\t\t\tthis._onDidChangeActiveViewDescriptors.fire(({ added: addedActiveItems.map(({ item }) => item.viewDescriptor), removed: removedActiveItems.map(item => item.viewDescriptor) }));\n\t\t}\n\n\t\tconst addedVisibleDescriptors: IAddedViewDescriptorRef[] = [];\n\t\tfor (const { item, visibleWhenActive } of addedActiveItems) {\n\t\t\tif (visibleWhenActive && this.isViewDescriptorVisible(item)) {\n\t\t\t\tconst { visibleIndex } = this.find(item.viewDescriptor.id);\n\t\t\t\taddedVisibleDescriptors.push({ index: visibleIndex, viewDescriptor: item.viewDescriptor, size: item.state.size, collapsed: !!item.state.collapsed });\n\t\t\t}\n\t\t}\n\t\tthis.broadCastAddedVisibleViewDescriptors(addedVisibleDescriptors);\n\t}\n\n\tprivate broadCastAddedVisibleViewDescriptors(added: IAddedViewDescriptorRef[]): void {\n\t\tif (added.length) {\n\t\t\tthis._onDidAddVisibleViewDescriptors.fire(added.sort((a, b) => a.index - b.index));\n\t\t\tthis.updateState(`Added views:${added.map(v => v.viewDescriptor.id).join(',')} in ${this.viewContainer.id}`);\n\t\t}\n\t}\n\n\tprivate broadCastRemovedVisibleViewDescriptors(removed: IViewDescriptorRef[]): void {\n\t\tif (removed.length) {\n\t\t\tthis._onDidRemoveVisibleViewDescriptors.fire(removed.sort((a, b) => b.index - a.index));\n\t\t\tthis.updateState(`Removed views:${removed.map(v => v.viewDescriptor.id).join(',')} from ${this.viewContainer.id}`);\n\t\t}\n\t}\n\n\tprivate broadCastMovedViewDescriptors(from: IViewDescriptorRef, to: IViewDescriptorRef): void {\n\t\tthis._onDidMoveVisibleViewDescriptors.fire({ from, to });\n\t\tthis.updateState(`Moved view ${from.viewDescriptor.id} to ${to.viewDescriptor.id} in ${this.viewContainer.id}`);\n\t}\n\n\tprivate updateState(reason: string): void {\n\t\tthis.logger.value.info(reason);\n\t\tthis.viewDescriptorsState.updateState(this.allViewDescriptors);\n\t\tthis.updateContainerInfo();\n\t}\n\n\tprivate isViewDescriptorVisible(viewDescriptorItem: IViewDescriptorItem): boolean {\n\t\tif (!viewDescriptorItem.state.active) {\n\t\t\treturn false;\n\t\t}\n\t\treturn this.isViewDescriptorVisibleWhenActive(viewDescriptorItem);\n\t}\n\n\tprivate isViewDescriptorVisibleWhenActive(viewDescriptorItem: IViewDescriptorItem): boolean {\n\t\tif (viewDescriptorItem.viewDescriptor.workspace) {\n\t\t\treturn !!viewDescriptorItem.state.visibleWorkspace;\n\t\t}\n\t\treturn !!viewDescriptorItem.state.visibleGlobal;\n\t}\n\n\tprivate find(id: string): { index: number; visibleIndex: number; viewDescriptorItem: IViewDescriptorItem } {\n\t\tconst result = this.findAndIgnoreIfNotFound(id);\n\t\tif (result) {\n\t\t\treturn result;\n\t\t}\n\t\tthrow new Error(`view descriptor ${id} not found`);\n\t}\n\n\tprivate findAndIgnoreIfNotFound(id: string): { index: number; visibleIndex: number; viewDescriptorItem: IViewDescriptorItem } | undefined {\n\t\tfor (let i = 0, visibleIndex = 0; i < this.viewDescriptorItems.length; i++) {\n\t\t\tconst viewDescriptorItem = this.viewDescriptorItems[i];\n\t\t\tif (viewDescriptorItem.viewDescriptor.id === id) {\n\t\t\t\treturn { index: i, visibleIndex, viewDescriptorItem: viewDescriptorItem };\n\t\t\t}\n\t\t\tif (this.isViewDescriptorVisible(viewDescriptorItem)) {\n\t\t\t\tvisibleIndex++;\n\t\t\t}\n\t\t}\n\t\treturn undefined;\n\t}\n\n\tprivate compareViewDescriptors(a: IViewDescriptorItem, b: IViewDescriptorItem): number {\n\t\tif (a.viewDescriptor.id === b.viewDescriptor.id) {\n\t\t\treturn 0;\n\t\t}\n\n\t\treturn (this.getViewOrder(a) - this.getViewOrder(b)) || this.getGroupOrderResult(a.viewDescriptor, b.viewDescriptor);\n\t}\n\n\tprivate getViewOrder(viewDescriptorItem: IViewDescriptorItem): number {\n\t\tconst viewOrder = typeof viewDescriptorItem.state.order === 'number' ? viewDescriptorItem.state.order : viewDescriptorItem.viewDescriptor.order;\n\t\treturn typeof viewOrder === 'number' ? viewOrder : Number.MAX_VALUE;\n\t}\n\n\tprivate getGroupOrderResult(a: IViewDescriptor, b: IViewDescriptor) {\n\t\tif (!a.group || !b.group) {\n\t\t\treturn 0;\n\t\t}\n\n\t\tif (a.group === b.group) {\n\t\t\treturn 0;\n\t\t}\n\n\t\treturn a.group < b.group ? -1 : 1;\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
