{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/views/common/viewsService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport type { Event } from \"../../../../base/common/event.js\";\nimport { createDecorator } from \"../../../../platform/instantiation/common/instantiation.js\";\nimport type { IProgressIndicator } from \"../../../../platform/progress/common/progress.js\";\nimport type { IPaneComposite } from \"../../../common/panecomposite.js\";\nimport type {\n\tIView,\n\tIViewPaneContainer,\n\tViewContainer,\n\tViewContainerLocation,\n} from \"../../../common/views.js\";\n\nexport const IViewsService = createDecorator<IViewsService>(\"viewsService\");\nexport interface IViewsService {\n\treadonly _serviceBrand: undefined;\n\n\t// View Container APIs\n\treadonly onDidChangeViewContainerVisibility: Event<{\n\t\tid: string;\n\t\tvisible: boolean;\n\t\tlocation: ViewContainerLocation;\n\t}>;\n\tisViewContainerVisible(id: string): boolean;\n\tisViewContainerActive(id: string): boolean;\n\topenViewContainer(\n\t\tid: string,\n\t\tfocus?: boolean,\n\t): Promise<IPaneComposite | null>;\n\tcloseViewContainer(id: string): void;\n\tgetVisibleViewContainer(\n\t\tlocation: ViewContainerLocation,\n\t): ViewContainer | null;\n\tgetActiveViewPaneContainerWithId(\n\t\tviewContainerId: string,\n\t): IViewPaneContainer | null;\n\tgetFocusedViewName(): string;\n\n\t// View APIs\n\treadonly onDidChangeViewVisibility: Event<{ id: string; visible: boolean }>;\n\treadonly onDidChangeFocusedView: Event<void>;\n\tisViewVisible(id: string): boolean;\n\topenView<T extends IView>(id: string, focus?: boolean): Promise<T | null>;\n\tcloseView(id: string): void;\n\tgetActiveViewWithId<T extends IView>(id: string): T | null;\n\tgetViewWithId<T extends IView>(id: string): T | null;\n\tgetViewProgressIndicator(id: string): IProgressIndicator | undefined;\n}\n"],
  "mappings": "AAMA,SAAS,uBAAuB;AAUzB,MAAM,gBAAgB,gBAA+B,cAAc;",
  "names": []
}
