{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/views/common/viewsService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Event } from '../../../../base/common/event.js';\nimport { createDecorator } from '../../../../platform/instantiation/common/instantiation.js';\nimport { IProgressIndicator } from '../../../../platform/progress/common/progress.js';\nimport { IPaneComposite } from '../../../common/panecomposite.js';\nimport { IView, IViewPaneContainer, ViewContainer, ViewContainerLocation } from '../../../common/views.js';\n\nexport const IViewsService = createDecorator<IViewsService>('viewsService');\nexport interface IViewsService {\n\n\treadonly _serviceBrand: undefined;\n\n\t// View Container APIs\n\treadonly onDidChangeViewContainerVisibility: Event<{ id: string; visible: boolean; location: ViewContainerLocation }>;\n\tisViewContainerVisible(id: string): boolean;\n\tisViewContainerActive(id: string): boolean;\n\topenViewContainer(id: string, focus?: boolean): Promise<IPaneComposite | null>;\n\tcloseViewContainer(id: string): void;\n\tgetVisibleViewContainer(location: ViewContainerLocation): ViewContainer | null;\n\tgetActiveViewPaneContainerWithId(viewContainerId: string): IViewPaneContainer | null;\n\tgetFocusedViewName(): string;\n\n\t// View APIs\n\treadonly onDidChangeViewVisibility: Event<{ id: string; visible: boolean }>;\n\treadonly onDidChangeFocusedView: Event<void>;\n\tisViewVisible(id: string): boolean;\n\topenView<T extends IView>(id: string, focus?: boolean): Promise<T | null>;\n\tcloseView(id: string): void;\n\tgetActiveViewWithId<T extends IView>(id: string): T | null;\n\tgetViewWithId<T extends IView>(id: string): T | null;\n\tgetViewProgressIndicator(id: string): IProgressIndicator | undefined;\n}\n"],
  "mappings": "AAKA,SAAS,aAAa;AACtB,SAAS,uBAAuB;AAChC,SAAS,0BAA0B;AACnC,SAAS,sBAAsB;AAC/B,SAAS,OAAO,oBAAoB,eAAe,6BAA6B;AAEzE,MAAM,gBAAgB,gBAA+B,cAAc;",
  "names": []
}
