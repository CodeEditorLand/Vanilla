var p=Object.defineProperty;var I=Object.getOwnPropertyDescriptor;var y=(f,d,t,e)=>{for(var o=e>1?void 0:e?I(d,t):d,i=f.length-1,r;i>=0;i--)(r=f[i])&&(o=(e?r(d,t,o):r(o))||o);return e&&o&&p(d,t,o),o},s=(f,d)=>(t,e)=>d(t,e,f);import{localize as l}from"../../../../nls.js";import{createDecorator as D}from"../../../../platform/instantiation/common/instantiation.js";import{InstantiationType as R,registerSingleton as O}from"../../../../platform/instantiation/common/extensions.js";import{Emitter as S}from"../../../../base/common/event.js";import{Disposable as E,toDisposable as _}from"../../../../base/common/lifecycle.js";import{RawContextKey as F,IContextKeyService as b}from"../../../../platform/contextkey/common/contextkey.js";import{IConfigurationService as N}from"../../../../platform/configuration/common/configuration.js";import{AutoSaveConfiguration as a,HotExitConfiguration as c,FILES_READONLY_INCLUDE_CONFIG as x,FILES_READONLY_EXCLUDE_CONFIG as U,IFileService as L,hasReadonlyCapability as T}from"../../../../platform/files/common/files.js";import{equals as M}from"../../../../base/common/objects.js";import"../../../../base/common/uri.js";import{isWeb as W}from"../../../../base/common/platform.js";import{IWorkspaceContextService as k}from"../../../../platform/workspace/common/workspace.js";import{ResourceGlobMatcher as w}from"../../../common/resources.js";import{GlobalIdleValue as C}from"../../../../base/common/async.js";import{IUriIdentityService as G}from"../../../../platform/uriIdentity/common/uriIdentity.js";import{IEnvironmentService as H}from"../../../../platform/environment/common/environment.js";import{LRUCache as Y,ResourceMap as m}from"../../../../base/common/map.js";import"../../../../base/common/htmlContent.js";import{EditorInput as P}from"../../../common/editor/editorInput.js";import{EditorResourceAccessor as V,SaveReason as h,SideBySideEditor as B}from"../../../common/editor.js";import{IMarkerService as K,MarkerSeverity as X}from"../../../../platform/markers/common/markers.js";import{ITextResourceConfigurationService as q}from"../../../../editor/common/services/textResourceConfiguration.js";import"../../../../base/common/collections.js";const z=new F("autoSaveAfterShortDelayContext",!1,!0);var $=(i=>(i[i.OFF=0]="OFF",i[i.AFTER_SHORT_DELAY=1]="AFTER_SHORT_DELAY",i[i.AFTER_LONG_DELAY=2]="AFTER_LONG_DELAY",i[i.ON_FOCUS_CHANGE=3]="ON_FOCUS_CHANGE",i[i.ON_WINDOW_CHANGE=4]="ON_WINDOW_CHANGE",i))($||{}),j=(o=>(o[o.SETTINGS=1]="SETTINGS",o[o.OUT_OF_WORKSPACE=2]="OUT_OF_WORKSPACE",o[o.ERRORS=3]="ERRORS",o[o.DISABLED=4]="DISABLED",o))(j||{});const J=D("filesConfigurationService");let n=class extends E{constructor(t,e,o,i,r,g,A,u){super();this.contextKeyService=t;this.configurationService=e;this.contextService=o;this.environmentService=i;this.uriIdentityService=r;this.fileService=g;this.markerService=A;this.textResourceConfigurationService=u;const v=e.getValue();this.currentGlobalAutoSaveConfiguration=this.computeAutoSaveConfiguration(void 0,v.files),this.currentFilesAssociationConfiguration=v?.files?.associations,this.currentHotExitConfiguration=v?.files?.hotExit||c.ON_EXIT,this.onFilesConfigurationChange(v,!1),this.registerListeners()}static DEFAULT_AUTO_SAVE_MODE=W?a.AFTER_DELAY:a.OFF;static DEFAULT_AUTO_SAVE_DELAY=1e3;static READONLY_MESSAGES={providerReadonly:{value:l("providerReadonly","Editor is read-only because the file system of the file is read-only."),isTrusted:!0},sessionReadonly:{value:l({key:"sessionReadonly",comment:['Please do not translate the word "command", it is part of our internal syntax which must not change','{Locked="](command:{0})"}']},"Editor is read-only because the file was set read-only in this session. [Click here](command:{0}) to set writeable.","workbench.action.files.setActiveEditorWriteableInSession"),isTrusted:!0},configuredReadonly:{value:l({key:"configuredReadonly",comment:['Please do not translate the word "command", it is part of our internal syntax which must not change','{Locked="](command:{0})"}']},"Editor is read-only because the file was set read-only via settings. [Click here](command:{0}) to configure or [toggle for this session](command:{1}).",`workbench.action.openSettings?${encodeURIComponent('["files.readonly"]')}`,"workbench.action.files.toggleActiveEditorReadonlyInSession"),isTrusted:!0},fileLocked:{value:l({key:"fileLocked",comment:['Please do not translate the word "command", it is part of our internal syntax which must not change','{Locked="](command:{0})"}']},"Editor is read-only because of file permissions. [Click here](command:{0}) to set writeable anyway.","workbench.action.files.setActiveEditorWriteableInSession"),isTrusted:!0},fileReadonly:{value:l("fileReadonly","Editor is read-only because the file is read-only."),isTrusted:!0}};_onDidChangeAutoSaveConfiguration=this._register(new S);onDidChangeAutoSaveConfiguration=this._onDidChangeAutoSaveConfiguration.event;_onDidChangeAutoSaveDisabled=this._register(new S);onDidChangeAutoSaveDisabled=this._onDidChangeAutoSaveDisabled.event;_onDidChangeFilesAssociation=this._register(new S);onDidChangeFilesAssociation=this._onDidChangeFilesAssociation.event;_onDidChangeReadonly=this._register(new S);onDidChangeReadonly=this._onDidChangeReadonly.event;currentGlobalAutoSaveConfiguration;currentFilesAssociationConfiguration;currentHotExitConfiguration;autoSaveConfigurationCache=new Y(1e3);autoSaveDisabledOverrides=new m;autoSaveAfterShortDelayContext=z.bindTo(this.contextKeyService);readonlyIncludeMatcher=this._register(new C(()=>this.createReadonlyMatcher(x)));readonlyExcludeMatcher=this._register(new C(()=>this.createReadonlyMatcher(U)));configuredReadonlyFromPermissions;sessionReadonlyOverrides=new m(t=>this.uriIdentityService.extUri.getComparisonKey(t));createReadonlyMatcher(t){const e=this._register(new w(o=>this.configurationService.getValue(t,{resource:o}),o=>o.affectsConfiguration(t),this.contextService,this.configurationService));return this._register(e.onExpressionChange(()=>this._onDidChangeReadonly.fire())),e}isReadonly(t,e){const o=this.fileService.getProvider(t.scheme);if(o&&T(o))return o.readOnlyMessage??n.READONLY_MESSAGES.providerReadonly;const i=this.sessionReadonlyOverrides.get(t);return typeof i=="boolean"?i===!0?n.READONLY_MESSAGES.sessionReadonly:!1:this.uriIdentityService.extUri.isEqualOrParent(t,this.environmentService.userRoamingDataHome)||this.uriIdentityService.extUri.isEqual(t,this.contextService.getWorkspace().configuration??void 0)?!1:this.readonlyIncludeMatcher.value.matches(t)?this.readonlyExcludeMatcher.value.matches(t)?!1:n.READONLY_MESSAGES.configuredReadonly:this.configuredReadonlyFromPermissions&&e?.locked?n.READONLY_MESSAGES.fileLocked:e?.readonly?n.READONLY_MESSAGES.fileReadonly:!1}async updateReadonly(t,e){if(e==="toggle"){let o;try{o=await this.fileService.resolve(t,{resolveMetadata:!0})}catch{}e=!this.isReadonly(t,o)}e==="reset"?this.sessionReadonlyOverrides.delete(t):this.sessionReadonlyOverrides.set(t,e),this._onDidChangeReadonly.fire()}registerListeners(){this._register(this.configurationService.onDidChangeConfiguration(t=>{t.affectsConfiguration("files")&&this.onFilesConfigurationChange(this.configurationService.getValue(),!0)}))}onFilesConfigurationChange(t,e){this.currentGlobalAutoSaveConfiguration=this.computeAutoSaveConfiguration(void 0,t.files),this.autoSaveConfigurationCache.clear(),this.autoSaveAfterShortDelayContext.set(this.getAutoSaveMode(void 0).mode===1),e&&this._onDidChangeAutoSaveConfiguration.fire();const o=t?.files?.associations;M(this.currentFilesAssociationConfiguration,o)||(this.currentFilesAssociationConfiguration=o,e&&this._onDidChangeFilesAssociation.fire());const i=t?.files?.hotExit;i===c.OFF||i===c.ON_EXIT_AND_WINDOW_CLOSE?this.currentHotExitConfiguration=i:this.currentHotExitConfiguration=c.ON_EXIT;const r=!!t?.files?.readonlyFromPermissions;r!==!!this.configuredReadonlyFromPermissions&&(this.configuredReadonlyFromPermissions=r,e&&this._onDidChangeReadonly.fire())}getAutoSaveConfiguration(t){const e=this.toResource(t);if(e){let o=this.autoSaveConfigurationCache.get(e);return o||(o=this.computeAutoSaveConfiguration(e,this.textResourceConfigurationService.getValue(e,"files")),this.autoSaveConfigurationCache.set(e,o)),o}return this.currentGlobalAutoSaveConfiguration}computeAutoSaveConfiguration(t,e){let o,i,r,g,A,u;switch(e?.autoSave??n.DEFAULT_AUTO_SAVE_MODE){case a.AFTER_DELAY:{o="afterDelay",i=typeof e?.autoSaveDelay=="number"&&e.autoSaveDelay>=0?e.autoSaveDelay:n.DEFAULT_AUTO_SAVE_DELAY,u=i<=n.DEFAULT_AUTO_SAVE_DELAY;break}case a.ON_FOCUS_CHANGE:o="onFocusChange";break;case a.ON_WINDOW_CHANGE:o="onWindowChange";break}return e?.autoSaveWorkspaceFilesOnly===!0&&(r=!0,t&&!this.contextService.isInsideWorkspace(t)&&(A=!0,u=void 0)),e?.autoSaveWhenNoErrors===!0&&(g=!0,u=void 0),{autoSave:o,autoSaveDelay:i,autoSaveWorkspaceFilesOnly:r,autoSaveWhenNoErrors:g,isOutOfWorkspace:A,isShortAutoSaveDelay:u}}toResource(t){return t instanceof P?V.getOriginalUri(t,{supportSideBySide:B.PRIMARY}):t}hasShortAutoSaveDelay(t){const e=this.toResource(t);return this.getAutoSaveConfiguration(e).isShortAutoSaveDelay?!e||!this.autoSaveDisabledOverrides.has(e):!1}getAutoSaveMode(t,e){const o=this.toResource(t);if(o&&this.autoSaveDisabledOverrides.has(o))return{mode:0,reason:4};const i=this.getAutoSaveConfiguration(o);if(typeof i.autoSave>"u")return{mode:0,reason:1};if(typeof e=="number"&&(i.autoSave==="afterDelay"&&e!==h.AUTO||i.autoSave==="onFocusChange"&&e!==h.FOCUS_CHANGE&&e!==h.WINDOW_CHANGE||i.autoSave==="onWindowChange"&&e!==h.WINDOW_CHANGE))return{mode:0,reason:1};if(o){if(i.autoSaveWorkspaceFilesOnly&&i.isOutOfWorkspace)return{mode:0,reason:2};if(i.autoSaveWhenNoErrors&&this.markerService.read({resource:o,take:1,severities:X.Error}).length>0)return{mode:0,reason:3}}switch(i.autoSave){case"afterDelay":return typeof i.autoSaveDelay=="number"&&i.autoSaveDelay<=n.DEFAULT_AUTO_SAVE_DELAY?{mode:i.autoSaveWhenNoErrors?2:1}:{mode:2};case"onFocusChange":return{mode:3};case"onWindowChange":return{mode:4}}}async toggleAutoSave(){const t=this.configurationService.getValue("files.autoSave");let e;return[a.AFTER_DELAY,a.ON_FOCUS_CHANGE,a.ON_WINDOW_CHANGE].some(o=>o===t)?e=a.OFF:e=a.AFTER_DELAY,this.configurationService.updateValue("files.autoSave",e)}disableAutoSave(t){const e=this.toResource(t);if(!e)return E.None;const o=this.autoSaveDisabledOverrides.get(e)??0;return this.autoSaveDisabledOverrides.set(e,o+1),o===0&&this._onDidChangeAutoSaveDisabled.fire(e),_(()=>{const i=this.autoSaveDisabledOverrides.get(e)??0;i<=1?(this.autoSaveDisabledOverrides.delete(e),this._onDidChangeAutoSaveDisabled.fire(e)):this.autoSaveDisabledOverrides.set(e,i-1)})}get isHotExitEnabled(){return this.contextService.getWorkspace().transient?!1:this.currentHotExitConfiguration!==c.OFF}get hotExitConfiguration(){return this.currentHotExitConfiguration}preventSaveConflicts(t,e){return this.configurationService.getValue("files.saveConflictResolution",{resource:t,overrideIdentifier:e})!=="overwriteFileOnDisk"}};n=y([s(0,b),s(1,N),s(2,k),s(3,H),s(4,G),s(5,L),s(6,K),s(7,q)],n),O(J,n,R.Eager);export{z as AutoSaveAfterShortDelayContext,j as AutoSaveDisabledReason,$ as AutoSaveMode,n as FilesConfigurationService,J as IFilesConfigurationService};
