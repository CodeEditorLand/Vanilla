{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/filesConfiguration/common/filesConfigurationService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { GlobalIdleValue } from \"../../../../base/common/async.js\";\nimport type { IStringDictionary } from \"../../../../base/common/collections.js\";\nimport { Emitter, type Event } from \"../../../../base/common/event.js\";\nimport type { IMarkdownString } from \"../../../../base/common/htmlContent.js\";\nimport {\n\tDisposable,\n\ttype IDisposable,\n\ttoDisposable,\n} from \"../../../../base/common/lifecycle.js\";\nimport { LRUCache, ResourceMap } from \"../../../../base/common/map.js\";\nimport { equals } from \"../../../../base/common/objects.js\";\nimport { isWeb } from \"../../../../base/common/platform.js\";\nimport type { URI } from \"../../../../base/common/uri.js\";\nimport { ITextResourceConfigurationService } from \"../../../../editor/common/services/textResourceConfiguration.js\";\nimport { localize } from \"../../../../nls.js\";\nimport { IConfigurationService } from \"../../../../platform/configuration/common/configuration.js\";\nimport {\n\tIContextKeyService,\n\tRawContextKey,\n} from \"../../../../platform/contextkey/common/contextkey.js\";\nimport { IEnvironmentService } from \"../../../../platform/environment/common/environment.js\";\nimport {\n\tAutoSaveConfiguration,\n\tFILES_READONLY_EXCLUDE_CONFIG,\n\tFILES_READONLY_INCLUDE_CONFIG,\n\tHotExitConfiguration,\n\ttype IBaseFileStat,\n\tIFileService,\n\ttype IFileStatWithMetadata,\n\ttype IFilesConfiguration,\n\ttype IFilesConfigurationNode,\n\thasReadonlyCapability,\n} from \"../../../../platform/files/common/files.js\";\nimport {\n\tInstantiationType,\n\tregisterSingleton,\n} from \"../../../../platform/instantiation/common/extensions.js\";\nimport { createDecorator } from \"../../../../platform/instantiation/common/instantiation.js\";\nimport {\n\tIMarkerService,\n\tMarkerSeverity,\n} from \"../../../../platform/markers/common/markers.js\";\nimport { IUriIdentityService } from \"../../../../platform/uriIdentity/common/uriIdentity.js\";\nimport { IWorkspaceContextService } from \"../../../../platform/workspace/common/workspace.js\";\nimport {\n\tEditorResourceAccessor,\n\tSaveReason,\n\tSideBySideEditor,\n} from \"../../../common/editor.js\";\nimport { EditorInput } from \"../../../common/editor/editorInput.js\";\nimport { ResourceGlobMatcher } from \"../../../common/resources.js\";\n\nexport const AutoSaveAfterShortDelayContext = new RawContextKey<boolean>(\n\t\"autoSaveAfterShortDelayContext\",\n\tfalse,\n\ttrue,\n);\n\nexport interface IAutoSaveConfiguration {\n\tautoSave?: \"afterDelay\" | \"onFocusChange\" | \"onWindowChange\";\n\tautoSaveDelay?: number;\n\tautoSaveWorkspaceFilesOnly?: boolean;\n\tautoSaveWhenNoErrors?: boolean;\n}\n\ninterface ICachedAutoSaveConfiguration extends IAutoSaveConfiguration {\n\t// Some extra state that we cache to reduce the amount\n\t// of lookup we have to do since auto save methods\n\t// are being called very often, e.g. when content changes\n\n\tisOutOfWorkspace?: boolean;\n\tisShortAutoSaveDelay?: boolean;\n}\n\nexport enum AutoSaveMode {\n\tOFF = 0,\n\tAFTER_SHORT_DELAY = 1,\n\tAFTER_LONG_DELAY = 2,\n\tON_FOCUS_CHANGE = 3,\n\tON_WINDOW_CHANGE = 4,\n}\n\nexport enum AutoSaveDisabledReason {\n\tSETTINGS = 1,\n\tOUT_OF_WORKSPACE = 2,\n\tERRORS = 3,\n\tDISABLED = 4,\n}\n\nexport type IAutoSaveMode = IEnabledAutoSaveMode | IDisabledAutoSaveMode;\n\nexport interface IEnabledAutoSaveMode {\n\treadonly mode:\n\t\t| AutoSaveMode.AFTER_SHORT_DELAY\n\t\t| AutoSaveMode.AFTER_LONG_DELAY\n\t\t| AutoSaveMode.ON_FOCUS_CHANGE\n\t\t| AutoSaveMode.ON_WINDOW_CHANGE;\n}\n\nexport interface IDisabledAutoSaveMode {\n\treadonly mode: AutoSaveMode.OFF;\n\treadonly reason: AutoSaveDisabledReason;\n}\n\nexport const IFilesConfigurationService =\n\tcreateDecorator<IFilesConfigurationService>(\"filesConfigurationService\");\n\nexport interface IFilesConfigurationService {\n\treadonly _serviceBrand: undefined;\n\n\t//#region Auto Save\n\n\treadonly onDidChangeAutoSaveConfiguration: Event<void>;\n\n\treadonly onDidChangeAutoSaveDisabled: Event<URI>;\n\n\tgetAutoSaveConfiguration(\n\t\tresourceOrEditor: EditorInput | URI | undefined,\n\t): IAutoSaveConfiguration;\n\n\thasShortAutoSaveDelay(\n\t\tresourceOrEditor: EditorInput | URI | undefined,\n\t): boolean;\n\n\tgetAutoSaveMode(\n\t\tresourceOrEditor: EditorInput | URI | undefined,\n\t\tsaveReason?: SaveReason,\n\t): IAutoSaveMode;\n\n\ttoggleAutoSave(): Promise<void>;\n\n\tdisableAutoSave(resourceOrEditor: EditorInput | URI): IDisposable;\n\n\t//#endregion\n\n\t//#region Configured Readonly\n\n\treadonly onDidChangeReadonly: Event<void>;\n\n\tisReadonly(resource: URI, stat?: IBaseFileStat): boolean | IMarkdownString;\n\n\tupdateReadonly(\n\t\tresource: URI,\n\t\treadonly: true | false | \"toggle\" | \"reset\",\n\t): Promise<void>;\n\n\t//#endregion\n\n\treadonly onDidChangeFilesAssociation: Event<void>;\n\n\treadonly isHotExitEnabled: boolean;\n\n\treadonly hotExitConfiguration: string | undefined;\n\n\tpreventSaveConflicts(resource: URI, language?: string): boolean;\n}\n\nexport class FilesConfigurationService\n\textends Disposable\n\timplements IFilesConfigurationService\n{\n\tdeclare readonly _serviceBrand: undefined;\n\n\tprivate static readonly DEFAULT_AUTO_SAVE_MODE = isWeb\n\t\t? AutoSaveConfiguration.AFTER_DELAY\n\t\t: AutoSaveConfiguration.OFF;\n\tprivate static readonly DEFAULT_AUTO_SAVE_DELAY = 1000;\n\n\tprivate static readonly READONLY_MESSAGES = {\n\t\tproviderReadonly: {\n\t\t\tvalue: localize(\n\t\t\t\t\"providerReadonly\",\n\t\t\t\t\"Editor is read-only because the file system of the file is read-only.\",\n\t\t\t),\n\t\t\tisTrusted: true,\n\t\t},\n\t\tsessionReadonly: {\n\t\t\tvalue: localize(\n\t\t\t\t{\n\t\t\t\t\tkey: \"sessionReadonly\",\n\t\t\t\t\tcomment: [\n\t\t\t\t\t\t'Please do not translate the word \"command\", it is part of our internal syntax which must not change',\n\t\t\t\t\t\t'{Locked=\"](command:{0})\"}',\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t\t\"Editor is read-only because the file was set read-only in this session. [Click here](command:{0}) to set writeable.\",\n\t\t\t\t\"workbench.action.files.setActiveEditorWriteableInSession\",\n\t\t\t),\n\t\t\tisTrusted: true,\n\t\t},\n\t\tconfiguredReadonly: {\n\t\t\tvalue: localize(\n\t\t\t\t{\n\t\t\t\t\tkey: \"configuredReadonly\",\n\t\t\t\t\tcomment: [\n\t\t\t\t\t\t'Please do not translate the word \"command\", it is part of our internal syntax which must not change',\n\t\t\t\t\t\t'{Locked=\"](command:{0})\"}',\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t\t\"Editor is read-only because the file was set read-only via settings. [Click here](command:{0}) to configure or [toggle for this session](command:{1}).\",\n\t\t\t\t`workbench.action.openSettings?${encodeURIComponent('[\"files.readonly\"]')}`,\n\t\t\t\t\"workbench.action.files.toggleActiveEditorReadonlyInSession\",\n\t\t\t),\n\t\t\tisTrusted: true,\n\t\t},\n\t\tfileLocked: {\n\t\t\tvalue: localize(\n\t\t\t\t{\n\t\t\t\t\tkey: \"fileLocked\",\n\t\t\t\t\tcomment: [\n\t\t\t\t\t\t'Please do not translate the word \"command\", it is part of our internal syntax which must not change',\n\t\t\t\t\t\t'{Locked=\"](command:{0})\"}',\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t\t\"Editor is read-only because of file permissions. [Click here](command:{0}) to set writeable anyway.\",\n\t\t\t\t\"workbench.action.files.setActiveEditorWriteableInSession\",\n\t\t\t),\n\t\t\tisTrusted: true,\n\t\t},\n\t\tfileReadonly: {\n\t\t\tvalue: localize(\n\t\t\t\t\"fileReadonly\",\n\t\t\t\t\"Editor is read-only because the file is read-only.\",\n\t\t\t),\n\t\t\tisTrusted: true,\n\t\t},\n\t};\n\n\tprivate readonly _onDidChangeAutoSaveConfiguration = this._register(\n\t\tnew Emitter<void>(),\n\t);\n\treadonly onDidChangeAutoSaveConfiguration =\n\t\tthis._onDidChangeAutoSaveConfiguration.event;\n\n\tprivate readonly _onDidChangeAutoSaveDisabled = this._register(\n\t\tnew Emitter<URI>(),\n\t);\n\treadonly onDidChangeAutoSaveDisabled =\n\t\tthis._onDidChangeAutoSaveDisabled.event;\n\n\tprivate readonly _onDidChangeFilesAssociation = this._register(\n\t\tnew Emitter<void>(),\n\t);\n\treadonly onDidChangeFilesAssociation =\n\t\tthis._onDidChangeFilesAssociation.event;\n\n\tprivate readonly _onDidChangeReadonly = this._register(new Emitter<void>());\n\treadonly onDidChangeReadonly = this._onDidChangeReadonly.event;\n\n\tprivate currentGlobalAutoSaveConfiguration: IAutoSaveConfiguration;\n\tprivate currentFilesAssociationConfiguration:\n\t\t| IStringDictionary<string>\n\t\t| undefined;\n\tprivate currentHotExitConfiguration: string;\n\n\tprivate readonly autoSaveConfigurationCache = new LRUCache<\n\t\tURI,\n\t\tICachedAutoSaveConfiguration\n\t>(1000);\n\tprivate readonly autoSaveDisabledOverrides =\n\t\tnew ResourceMap<number /* counter */>();\n\n\tprivate readonly autoSaveAfterShortDelayContext =\n\t\tAutoSaveAfterShortDelayContext.bindTo(this.contextKeyService);\n\n\tprivate readonly readonlyIncludeMatcher = this._register(\n\t\tnew GlobalIdleValue(() =>\n\t\t\tthis.createReadonlyMatcher(FILES_READONLY_INCLUDE_CONFIG),\n\t\t),\n\t);\n\tprivate readonly readonlyExcludeMatcher = this._register(\n\t\tnew GlobalIdleValue(() =>\n\t\t\tthis.createReadonlyMatcher(FILES_READONLY_EXCLUDE_CONFIG),\n\t\t),\n\t);\n\tprivate configuredReadonlyFromPermissions: boolean | undefined;\n\n\tprivate readonly sessionReadonlyOverrides = new ResourceMap<boolean>(\n\t\t(resource) => this.uriIdentityService.extUri.getComparisonKey(resource),\n\t);\n\n\tconstructor(\n\t\t@IContextKeyService private readonly contextKeyService: IContextKeyService,\n\t\t@IConfigurationService private readonly configurationService: IConfigurationService,\n\t\t@IWorkspaceContextService private readonly contextService: IWorkspaceContextService,\n\t\t@IEnvironmentService private readonly environmentService: IEnvironmentService,\n\t\t@IUriIdentityService private readonly uriIdentityService: IUriIdentityService,\n\t\t@IFileService private readonly fileService: IFileService,\n\t\t@IMarkerService private readonly markerService: IMarkerService,\n\t\t@ITextResourceConfigurationService private readonly textResourceConfigurationService: ITextResourceConfigurationService\n\t) {\n\t\tsuper();\n\n\t\tconst configuration = configurationService.getValue<IFilesConfiguration>();\n\n\t\tthis.currentGlobalAutoSaveConfiguration = this.computeAutoSaveConfiguration(undefined, configuration.files);\n\t\tthis.currentFilesAssociationConfiguration = configuration?.files?.associations;\n\t\tthis.currentHotExitConfiguration = configuration?.files?.hotExit || HotExitConfiguration.ON_EXIT;\n\n\t\tthis.onFilesConfigurationChange(configuration, false);\n\n\t\tthis.registerListeners();\n\t}\n\n\tprivate createReadonlyMatcher(config: string) {\n\t\tconst matcher = this._register(\n\t\t\tnew ResourceGlobMatcher(\n\t\t\t\t(resource) =>\n\t\t\t\t\tthis.configurationService.getValue(config, { resource }),\n\t\t\t\t(event) => event.affectsConfiguration(config),\n\t\t\t\tthis.contextService,\n\t\t\t\tthis.configurationService,\n\t\t\t),\n\t\t);\n\n\t\tthis._register(\n\t\t\tmatcher.onExpressionChange(() => this._onDidChangeReadonly.fire()),\n\t\t);\n\n\t\treturn matcher;\n\t}\n\n\tisReadonly(resource: URI, stat?: IBaseFileStat): boolean | IMarkdownString {\n\t\t// if the entire file system provider is readonly, we respect that\n\t\t// and do not allow to change readonly. we take this as a hint that\n\t\t// the provider has no capabilities of writing.\n\t\tconst provider = this.fileService.getProvider(resource.scheme);\n\t\tif (provider && hasReadonlyCapability(provider)) {\n\t\t\treturn (\n\t\t\t\tprovider.readOnlyMessage ??\n\t\t\t\tFilesConfigurationService.READONLY_MESSAGES.providerReadonly\n\t\t\t);\n\t\t}\n\n\t\t// session override always wins over the others\n\t\tconst sessionReadonlyOverride =\n\t\t\tthis.sessionReadonlyOverrides.get(resource);\n\t\tif (typeof sessionReadonlyOverride === \"boolean\") {\n\t\t\treturn sessionReadonlyOverride === true\n\t\t\t\t? FilesConfigurationService.READONLY_MESSAGES.sessionReadonly\n\t\t\t\t: false;\n\t\t}\n\n\t\tif (\n\t\t\tthis.uriIdentityService.extUri.isEqualOrParent(\n\t\t\t\tresource,\n\t\t\t\tthis.environmentService.userRoamingDataHome,\n\t\t\t) ||\n\t\t\tthis.uriIdentityService.extUri.isEqual(\n\t\t\t\tresource,\n\t\t\t\tthis.contextService.getWorkspace().configuration ?? undefined,\n\t\t\t)\n\t\t) {\n\t\t\treturn false; // explicitly exclude some paths from readonly that we need for configuration\n\t\t}\n\n\t\t// configured glob patterns win over stat information\n\t\tif (this.readonlyIncludeMatcher.value.matches(resource)) {\n\t\t\treturn this.readonlyExcludeMatcher.value.matches(resource)\n\t\t\t\t? false\n\t\t\t\t: FilesConfigurationService.READONLY_MESSAGES\n\t\t\t\t\t\t.configuredReadonly;\n\t\t}\n\n\t\t// check if file is locked and configured to treat as readonly\n\t\tif (this.configuredReadonlyFromPermissions && stat?.locked) {\n\t\t\treturn FilesConfigurationService.READONLY_MESSAGES.fileLocked;\n\t\t}\n\n\t\t// check if file is marked readonly from the file system provider\n\t\tif (stat?.readonly) {\n\t\t\treturn FilesConfigurationService.READONLY_MESSAGES.fileReadonly;\n\t\t}\n\n\t\treturn false;\n\t}\n\n\tasync updateReadonly(\n\t\tresource: URI,\n\t\treadonly: true | false | \"toggle\" | \"reset\",\n\t): Promise<void> {\n\t\tif (readonly === \"toggle\") {\n\t\t\tlet stat: IFileStatWithMetadata | undefined;\n\t\t\ttry {\n\t\t\t\tstat = await this.fileService.resolve(resource, {\n\t\t\t\t\tresolveMetadata: true,\n\t\t\t\t});\n\t\t\t} catch (error) {\n\t\t\t\t// ignore\n\t\t\t}\n\n\t\t\treadonly = !this.isReadonly(resource, stat);\n\t\t}\n\n\t\tif (readonly === \"reset\") {\n\t\t\tthis.sessionReadonlyOverrides.delete(resource);\n\t\t} else {\n\t\t\tthis.sessionReadonlyOverrides.set(resource, readonly);\n\t\t}\n\n\t\tthis._onDidChangeReadonly.fire();\n\t}\n\n\tprivate registerListeners(): void {\n\t\t// Files configuration changes\n\t\tthis._register(\n\t\t\tthis.configurationService.onDidChangeConfiguration((e) => {\n\t\t\t\tif (e.affectsConfiguration(\"files\")) {\n\t\t\t\t\tthis.onFilesConfigurationChange(\n\t\t\t\t\t\tthis.configurationService.getValue<IFilesConfiguration>(),\n\t\t\t\t\t\ttrue,\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}),\n\t\t);\n\t}\n\n\tprotected onFilesConfigurationChange(\n\t\tconfiguration: IFilesConfiguration,\n\t\tfromEvent: boolean,\n\t): void {\n\t\t// Auto Save\n\t\tthis.currentGlobalAutoSaveConfiguration =\n\t\t\tthis.computeAutoSaveConfiguration(undefined, configuration.files);\n\t\tthis.autoSaveConfigurationCache.clear();\n\t\tthis.autoSaveAfterShortDelayContext.set(\n\t\t\tthis.getAutoSaveMode(undefined).mode ===\n\t\t\t\tAutoSaveMode.AFTER_SHORT_DELAY,\n\t\t);\n\t\tif (fromEvent) {\n\t\t\tthis._onDidChangeAutoSaveConfiguration.fire();\n\t\t}\n\n\t\t// Check for change in files associations\n\t\tconst filesAssociation = configuration?.files?.associations;\n\t\tif (\n\t\t\t!equals(this.currentFilesAssociationConfiguration, filesAssociation)\n\t\t) {\n\t\t\tthis.currentFilesAssociationConfiguration = filesAssociation;\n\t\t\tif (fromEvent) {\n\t\t\t\tthis._onDidChangeFilesAssociation.fire();\n\t\t\t}\n\t\t}\n\n\t\t// Hot exit\n\t\tconst hotExitMode = configuration?.files?.hotExit;\n\t\tif (\n\t\t\thotExitMode === HotExitConfiguration.OFF ||\n\t\t\thotExitMode === HotExitConfiguration.ON_EXIT_AND_WINDOW_CLOSE\n\t\t) {\n\t\t\tthis.currentHotExitConfiguration = hotExitMode;\n\t\t} else {\n\t\t\tthis.currentHotExitConfiguration = HotExitConfiguration.ON_EXIT;\n\t\t}\n\n\t\t// Readonly\n\t\tconst readonlyFromPermissions = Boolean(\n\t\t\tconfiguration?.files?.readonlyFromPermissions,\n\t\t);\n\t\tif (\n\t\t\treadonlyFromPermissions !==\n\t\t\tBoolean(this.configuredReadonlyFromPermissions)\n\t\t) {\n\t\t\tthis.configuredReadonlyFromPermissions = readonlyFromPermissions;\n\t\t\tif (fromEvent) {\n\t\t\t\tthis._onDidChangeReadonly.fire();\n\t\t\t}\n\t\t}\n\t}\n\n\tgetAutoSaveConfiguration(\n\t\tresourceOrEditor: EditorInput | URI | undefined,\n\t): ICachedAutoSaveConfiguration {\n\t\tconst resource = this.toResource(resourceOrEditor);\n\t\tif (resource) {\n\t\t\tlet resourceAutoSaveConfiguration =\n\t\t\t\tthis.autoSaveConfigurationCache.get(resource);\n\t\t\tif (!resourceAutoSaveConfiguration) {\n\t\t\t\tresourceAutoSaveConfiguration =\n\t\t\t\t\tthis.computeAutoSaveConfiguration(\n\t\t\t\t\t\tresource,\n\t\t\t\t\t\tthis.textResourceConfigurationService.getValue<IFilesConfigurationNode>(\n\t\t\t\t\t\t\tresource,\n\t\t\t\t\t\t\t\"files\",\n\t\t\t\t\t\t),\n\t\t\t\t\t);\n\t\t\t\tthis.autoSaveConfigurationCache.set(\n\t\t\t\t\tresource,\n\t\t\t\t\tresourceAutoSaveConfiguration,\n\t\t\t\t);\n\t\t\t}\n\n\t\t\treturn resourceAutoSaveConfiguration;\n\t\t}\n\n\t\treturn this.currentGlobalAutoSaveConfiguration;\n\t}\n\n\tprivate computeAutoSaveConfiguration(\n\t\tresource: URI | undefined,\n\t\tfilesConfiguration: IFilesConfigurationNode | undefined,\n\t): ICachedAutoSaveConfiguration {\n\t\tlet autoSave:\n\t\t\t| \"afterDelay\"\n\t\t\t| \"onFocusChange\"\n\t\t\t| \"onWindowChange\"\n\t\t\t| undefined;\n\t\tlet autoSaveDelay: number | undefined;\n\t\tlet autoSaveWorkspaceFilesOnly: boolean | undefined;\n\t\tlet autoSaveWhenNoErrors: boolean | undefined;\n\n\t\tlet isOutOfWorkspace: boolean | undefined;\n\t\tlet isShortAutoSaveDelay: boolean | undefined;\n\n\t\tswitch (\n\t\t\tfilesConfiguration?.autoSave ??\n\t\t\tFilesConfigurationService.DEFAULT_AUTO_SAVE_MODE\n\t\t) {\n\t\t\tcase AutoSaveConfiguration.AFTER_DELAY: {\n\t\t\t\tautoSave = \"afterDelay\";\n\t\t\t\tautoSaveDelay =\n\t\t\t\t\ttypeof filesConfiguration?.autoSaveDelay === \"number\" &&\n\t\t\t\t\tfilesConfiguration.autoSaveDelay >= 0\n\t\t\t\t\t\t? filesConfiguration.autoSaveDelay\n\t\t\t\t\t\t: FilesConfigurationService.DEFAULT_AUTO_SAVE_DELAY;\n\t\t\t\tisShortAutoSaveDelay =\n\t\t\t\t\tautoSaveDelay <=\n\t\t\t\t\tFilesConfigurationService.DEFAULT_AUTO_SAVE_DELAY;\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tcase AutoSaveConfiguration.ON_FOCUS_CHANGE:\n\t\t\t\tautoSave = \"onFocusChange\";\n\t\t\t\tbreak;\n\n\t\t\tcase AutoSaveConfiguration.ON_WINDOW_CHANGE:\n\t\t\t\tautoSave = \"onWindowChange\";\n\t\t\t\tbreak;\n\t\t}\n\n\t\tif (filesConfiguration?.autoSaveWorkspaceFilesOnly === true) {\n\t\t\tautoSaveWorkspaceFilesOnly = true;\n\n\t\t\tif (resource && !this.contextService.isInsideWorkspace(resource)) {\n\t\t\t\tisOutOfWorkspace = true;\n\t\t\t\tisShortAutoSaveDelay = undefined; // out of workspace file are not auto saved with this configuration\n\t\t\t}\n\t\t}\n\n\t\tif (filesConfiguration?.autoSaveWhenNoErrors === true) {\n\t\t\tautoSaveWhenNoErrors = true;\n\t\t\tisShortAutoSaveDelay = undefined; // this configuration disables short auto save delay\n\t\t}\n\n\t\treturn {\n\t\t\tautoSave,\n\t\t\tautoSaveDelay,\n\t\t\tautoSaveWorkspaceFilesOnly,\n\t\t\tautoSaveWhenNoErrors,\n\t\t\tisOutOfWorkspace,\n\t\t\tisShortAutoSaveDelay,\n\t\t};\n\t}\n\n\tprivate toResource(\n\t\tresourceOrEditor: EditorInput | URI | undefined,\n\t): URI | undefined {\n\t\tif (resourceOrEditor instanceof EditorInput) {\n\t\t\treturn EditorResourceAccessor.getOriginalUri(resourceOrEditor, {\n\t\t\t\tsupportSideBySide: SideBySideEditor.PRIMARY,\n\t\t\t});\n\t\t}\n\n\t\treturn resourceOrEditor;\n\t}\n\n\thasShortAutoSaveDelay(\n\t\tresourceOrEditor: EditorInput | URI | undefined,\n\t): boolean {\n\t\tconst resource = this.toResource(resourceOrEditor);\n\t\tif (this.getAutoSaveConfiguration(resource).isShortAutoSaveDelay) {\n\t\t\treturn !resource || !this.autoSaveDisabledOverrides.has(resource);\n\t\t}\n\n\t\treturn false;\n\t}\n\n\tgetAutoSaveMode(\n\t\tresourceOrEditor: EditorInput | URI | undefined,\n\t\tsaveReason?: SaveReason,\n\t): IAutoSaveMode {\n\t\tconst resource = this.toResource(resourceOrEditor);\n\t\tif (resource && this.autoSaveDisabledOverrides.has(resource)) {\n\t\t\treturn {\n\t\t\t\tmode: AutoSaveMode.OFF,\n\t\t\t\treason: AutoSaveDisabledReason.DISABLED,\n\t\t\t};\n\t\t}\n\n\t\tconst autoSaveConfiguration = this.getAutoSaveConfiguration(resource);\n\t\tif (typeof autoSaveConfiguration.autoSave === \"undefined\") {\n\t\t\treturn {\n\t\t\t\tmode: AutoSaveMode.OFF,\n\t\t\t\treason: AutoSaveDisabledReason.SETTINGS,\n\t\t\t};\n\t\t}\n\n\t\tif (typeof saveReason === \"number\") {\n\t\t\tif (\n\t\t\t\t(autoSaveConfiguration.autoSave === \"afterDelay\" &&\n\t\t\t\t\tsaveReason !== SaveReason.AUTO) ||\n\t\t\t\t(autoSaveConfiguration.autoSave === \"onFocusChange\" &&\n\t\t\t\t\tsaveReason !== SaveReason.FOCUS_CHANGE &&\n\t\t\t\t\tsaveReason !== SaveReason.WINDOW_CHANGE) ||\n\t\t\t\t(autoSaveConfiguration.autoSave === \"onWindowChange\" &&\n\t\t\t\t\tsaveReason !== SaveReason.WINDOW_CHANGE)\n\t\t\t) {\n\t\t\t\treturn {\n\t\t\t\t\tmode: AutoSaveMode.OFF,\n\t\t\t\t\treason: AutoSaveDisabledReason.SETTINGS,\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\n\t\tif (resource) {\n\t\t\tif (\n\t\t\t\tautoSaveConfiguration.autoSaveWorkspaceFilesOnly &&\n\t\t\t\tautoSaveConfiguration.isOutOfWorkspace\n\t\t\t) {\n\t\t\t\treturn {\n\t\t\t\t\tmode: AutoSaveMode.OFF,\n\t\t\t\t\treason: AutoSaveDisabledReason.OUT_OF_WORKSPACE,\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tif (\n\t\t\t\tautoSaveConfiguration.autoSaveWhenNoErrors &&\n\t\t\t\tthis.markerService.read({\n\t\t\t\t\tresource,\n\t\t\t\t\ttake: 1,\n\t\t\t\t\tseverities: MarkerSeverity.Error,\n\t\t\t\t}).length > 0\n\t\t\t) {\n\t\t\t\treturn {\n\t\t\t\t\tmode: AutoSaveMode.OFF,\n\t\t\t\t\treason: AutoSaveDisabledReason.ERRORS,\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\n\t\tswitch (autoSaveConfiguration.autoSave) {\n\t\t\tcase \"afterDelay\":\n\t\t\t\tif (\n\t\t\t\t\ttypeof autoSaveConfiguration.autoSaveDelay === \"number\" &&\n\t\t\t\t\tautoSaveConfiguration.autoSaveDelay <=\n\t\t\t\t\t\tFilesConfigurationService.DEFAULT_AUTO_SAVE_DELAY\n\t\t\t\t) {\n\t\t\t\t\t// Explicitly mark auto save configurations as long running\n\t\t\t\t\t// if they are configured to not run when there are errors.\n\t\t\t\t\t// The rationale here is that errors may come in after auto\n\t\t\t\t\t// save has been scheduled and then further delay the auto\n\t\t\t\t\t// save until resolved.\n\t\t\t\t\treturn {\n\t\t\t\t\t\tmode: autoSaveConfiguration.autoSaveWhenNoErrors\n\t\t\t\t\t\t\t? AutoSaveMode.AFTER_LONG_DELAY\n\t\t\t\t\t\t\t: AutoSaveMode.AFTER_SHORT_DELAY,\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t\treturn { mode: AutoSaveMode.AFTER_LONG_DELAY };\n\t\t\tcase \"onFocusChange\":\n\t\t\t\treturn { mode: AutoSaveMode.ON_FOCUS_CHANGE };\n\t\t\tcase \"onWindowChange\":\n\t\t\t\treturn { mode: AutoSaveMode.ON_WINDOW_CHANGE };\n\t\t}\n\t}\n\n\tasync toggleAutoSave(): Promise<void> {\n\t\tconst currentSetting =\n\t\t\tthis.configurationService.getValue(\"files.autoSave\");\n\n\t\tlet newAutoSaveValue: string;\n\t\tif (\n\t\t\t[\n\t\t\t\tAutoSaveConfiguration.AFTER_DELAY,\n\t\t\t\tAutoSaveConfiguration.ON_FOCUS_CHANGE,\n\t\t\t\tAutoSaveConfiguration.ON_WINDOW_CHANGE,\n\t\t\t].some((setting) => setting === currentSetting)\n\t\t) {\n\t\t\tnewAutoSaveValue = AutoSaveConfiguration.OFF;\n\t\t} else {\n\t\t\tnewAutoSaveValue = AutoSaveConfiguration.AFTER_DELAY;\n\t\t}\n\n\t\treturn this.configurationService.updateValue(\n\t\t\t\"files.autoSave\",\n\t\t\tnewAutoSaveValue,\n\t\t);\n\t}\n\n\tdisableAutoSave(resourceOrEditor: EditorInput | URI): IDisposable {\n\t\tconst resource = this.toResource(resourceOrEditor);\n\t\tif (!resource) {\n\t\t\treturn Disposable.None;\n\t\t}\n\n\t\tconst counter = this.autoSaveDisabledOverrides.get(resource) ?? 0;\n\t\tthis.autoSaveDisabledOverrides.set(resource, counter + 1);\n\n\t\tif (counter === 0) {\n\t\t\tthis._onDidChangeAutoSaveDisabled.fire(resource);\n\t\t}\n\n\t\treturn toDisposable(() => {\n\t\t\tconst counter = this.autoSaveDisabledOverrides.get(resource) ?? 0;\n\t\t\tif (counter <= 1) {\n\t\t\t\tthis.autoSaveDisabledOverrides.delete(resource);\n\t\t\t\tthis._onDidChangeAutoSaveDisabled.fire(resource);\n\t\t\t} else {\n\t\t\t\tthis.autoSaveDisabledOverrides.set(resource, counter - 1);\n\t\t\t}\n\t\t});\n\t}\n\n\tget isHotExitEnabled(): boolean {\n\t\tif (this.contextService.getWorkspace().transient) {\n\t\t\t// Transient workspace: hot exit is disabled because\n\t\t\t// transient workspaces are not restored upon restart\n\t\t\treturn false;\n\t\t}\n\n\t\treturn this.currentHotExitConfiguration !== HotExitConfiguration.OFF;\n\t}\n\n\tget hotExitConfiguration(): string {\n\t\treturn this.currentHotExitConfiguration;\n\t}\n\n\tpreventSaveConflicts(resource: URI, language?: string): boolean {\n\t\treturn (\n\t\t\tthis.configurationService.getValue(\"files.saveConflictResolution\", {\n\t\t\t\tresource,\n\t\t\t\toverrideIdentifier: language,\n\t\t\t}) !== \"overwriteFileOnDisk\"\n\t\t);\n\t}\n}\n\nregisterSingleton(\n\tIFilesConfigurationService,\n\tFilesConfigurationService,\n\tInstantiationType.Eager,\n);\n"],
  "mappings": "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",
  "names": ["AutoSaveMode", "AutoSaveDisabledReason", "counter"]
}
