{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/filesConfiguration/common/filesConfigurationService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { localize } from '../../../../nls.js';\nimport { createDecorator } from '../../../../platform/instantiation/common/instantiation.js';\nimport { InstantiationType, registerSingleton } from '../../../../platform/instantiation/common/extensions.js';\nimport { Event, Emitter } from '../../../../base/common/event.js';\nimport { Disposable, IDisposable, toDisposable } from '../../../../base/common/lifecycle.js';\nimport { RawContextKey, IContextKeyService } from '../../../../platform/contextkey/common/contextkey.js';\nimport { IConfigurationService } from '../../../../platform/configuration/common/configuration.js';\nimport { IFilesConfiguration, AutoSaveConfiguration, HotExitConfiguration, FILES_READONLY_INCLUDE_CONFIG, FILES_READONLY_EXCLUDE_CONFIG, IFileStatWithMetadata, IFileService, IBaseFileStat, hasReadonlyCapability, IFilesConfigurationNode } from '../../../../platform/files/common/files.js';\nimport { equals } from '../../../../base/common/objects.js';\nimport { URI } from '../../../../base/common/uri.js';\nimport { isWeb } from '../../../../base/common/platform.js';\nimport { IWorkspaceContextService } from '../../../../platform/workspace/common/workspace.js';\nimport { ResourceGlobMatcher } from '../../../common/resources.js';\nimport { GlobalIdleValue } from '../../../../base/common/async.js';\nimport { IUriIdentityService } from '../../../../platform/uriIdentity/common/uriIdentity.js';\nimport { IEnvironmentService } from '../../../../platform/environment/common/environment.js';\nimport { LRUCache, ResourceMap } from '../../../../base/common/map.js';\nimport { IMarkdownString } from '../../../../base/common/htmlContent.js';\nimport { EditorInput } from '../../../common/editor/editorInput.js';\nimport { EditorResourceAccessor, SaveReason, SideBySideEditor } from '../../../common/editor.js';\nimport { IMarkerService, MarkerSeverity } from '../../../../platform/markers/common/markers.js';\nimport { ITextResourceConfigurationService } from '../../../../editor/common/services/textResourceConfiguration.js';\nimport { IStringDictionary } from '../../../../base/common/collections.js';\n\nexport const AutoSaveAfterShortDelayContext = new RawContextKey<boolean>('autoSaveAfterShortDelayContext', false, true);\n\nexport interface IAutoSaveConfiguration {\n\tautoSave?: 'afterDelay' | 'onFocusChange' | 'onWindowChange';\n\tautoSaveDelay?: number;\n\tautoSaveWorkspaceFilesOnly?: boolean;\n\tautoSaveWhenNoErrors?: boolean;\n}\n\ninterface ICachedAutoSaveConfiguration extends IAutoSaveConfiguration {\n\n\t// Some extra state that we cache to reduce the amount\n\t// of lookup we have to do since auto save methods\n\t// are being called very often, e.g. when content changes\n\n\tisOutOfWorkspace?: boolean;\n\tisShortAutoSaveDelay?: boolean;\n}\n\nexport const enum AutoSaveMode {\n\tOFF,\n\tAFTER_SHORT_DELAY,\n\tAFTER_LONG_DELAY,\n\tON_FOCUS_CHANGE,\n\tON_WINDOW_CHANGE\n}\n\nexport const enum AutoSaveDisabledReason {\n\tSETTINGS = 1,\n\tOUT_OF_WORKSPACE,\n\tERRORS,\n\tDISABLED\n}\n\nexport type IAutoSaveMode = IEnabledAutoSaveMode | IDisabledAutoSaveMode;\n\nexport interface IEnabledAutoSaveMode {\n\treadonly mode: AutoSaveMode.AFTER_SHORT_DELAY | AutoSaveMode.AFTER_LONG_DELAY | AutoSaveMode.ON_FOCUS_CHANGE | AutoSaveMode.ON_WINDOW_CHANGE;\n}\n\nexport interface IDisabledAutoSaveMode {\n\treadonly mode: AutoSaveMode.OFF;\n\treadonly reason: AutoSaveDisabledReason;\n}\n\nexport const IFilesConfigurationService = createDecorator<IFilesConfigurationService>('filesConfigurationService');\n\nexport interface IFilesConfigurationService {\n\n\treadonly _serviceBrand: undefined;\n\n\t//#region Auto Save\n\n\treadonly onDidChangeAutoSaveConfiguration: Event<void>;\n\n\treadonly onDidChangeAutoSaveDisabled: Event<URI>;\n\n\tgetAutoSaveConfiguration(resourceOrEditor: EditorInput | URI | undefined): IAutoSaveConfiguration;\n\n\thasShortAutoSaveDelay(resourceOrEditor: EditorInput | URI | undefined): boolean;\n\n\tgetAutoSaveMode(resourceOrEditor: EditorInput | URI | undefined, saveReason?: SaveReason): IAutoSaveMode;\n\n\ttoggleAutoSave(): Promise<void>;\n\n\tdisableAutoSave(resourceOrEditor: EditorInput | URI): IDisposable;\n\n\t//#endregion\n\n\t//#region Configured Readonly\n\n\treadonly onDidChangeReadonly: Event<void>;\n\n\tisReadonly(resource: URI, stat?: IBaseFileStat): boolean | IMarkdownString;\n\n\tupdateReadonly(resource: URI, readonly: true | false | 'toggle' | 'reset'): Promise<void>;\n\n\t//#endregion\n\n\treadonly onDidChangeFilesAssociation: Event<void>;\n\n\treadonly isHotExitEnabled: boolean;\n\n\treadonly hotExitConfiguration: string | undefined;\n\n\tpreventSaveConflicts(resource: URI, language?: string): boolean;\n}\n\nexport class FilesConfigurationService extends Disposable implements IFilesConfigurationService {\n\n\tdeclare readonly _serviceBrand: undefined;\n\n\tprivate static readonly DEFAULT_AUTO_SAVE_MODE = isWeb ? AutoSaveConfiguration.AFTER_DELAY : AutoSaveConfiguration.OFF;\n\tprivate static readonly DEFAULT_AUTO_SAVE_DELAY = 1000;\n\n\tprivate static readonly READONLY_MESSAGES = {\n\t\tproviderReadonly: { value: localize('providerReadonly', \"Editor is read-only because the file system of the file is read-only.\"), isTrusted: true },\n\t\tsessionReadonly: { value: localize({ key: 'sessionReadonly', comment: ['Please do not translate the word \"command\", it is part of our internal syntax which must not change', '{Locked=\"](command:{0})\"}'] }, \"Editor is read-only because the file was set read-only in this session. [Click here](command:{0}) to set writeable.\", 'workbench.action.files.setActiveEditorWriteableInSession'), isTrusted: true },\n\t\tconfiguredReadonly: { value: localize({ key: 'configuredReadonly', comment: ['Please do not translate the word \"command\", it is part of our internal syntax which must not change', '{Locked=\"](command:{0})\"}'] }, \"Editor is read-only because the file was set read-only via settings. [Click here](command:{0}) to configure or [toggle for this session](command:{1}).\", `workbench.action.openSettings?${encodeURIComponent('[\"files.readonly\"]')}`, 'workbench.action.files.toggleActiveEditorReadonlyInSession'), isTrusted: true },\n\t\tfileLocked: { value: localize({ key: 'fileLocked', comment: ['Please do not translate the word \"command\", it is part of our internal syntax which must not change', '{Locked=\"](command:{0})\"}'] }, \"Editor is read-only because of file permissions. [Click here](command:{0}) to set writeable anyway.\", 'workbench.action.files.setActiveEditorWriteableInSession'), isTrusted: true },\n\t\tfileReadonly: { value: localize('fileReadonly', \"Editor is read-only because the file is read-only.\"), isTrusted: true }\n\t};\n\n\tprivate readonly _onDidChangeAutoSaveConfiguration = this._register(new Emitter<void>());\n\treadonly onDidChangeAutoSaveConfiguration = this._onDidChangeAutoSaveConfiguration.event;\n\n\tprivate readonly _onDidChangeAutoSaveDisabled = this._register(new Emitter<URI>());\n\treadonly onDidChangeAutoSaveDisabled = this._onDidChangeAutoSaveDisabled.event;\n\n\tprivate readonly _onDidChangeFilesAssociation = this._register(new Emitter<void>());\n\treadonly onDidChangeFilesAssociation = this._onDidChangeFilesAssociation.event;\n\n\tprivate readonly _onDidChangeReadonly = this._register(new Emitter<void>());\n\treadonly onDidChangeReadonly = this._onDidChangeReadonly.event;\n\n\tprivate currentGlobalAutoSaveConfiguration: IAutoSaveConfiguration;\n\tprivate currentFilesAssociationConfiguration: IStringDictionary<string> | undefined;\n\tprivate currentHotExitConfiguration: string;\n\n\tprivate readonly autoSaveConfigurationCache = new LRUCache<URI, ICachedAutoSaveConfiguration>(1000);\n\tprivate readonly autoSaveDisabledOverrides = new ResourceMap<number /* counter */>();\n\n\tprivate readonly autoSaveAfterShortDelayContext = AutoSaveAfterShortDelayContext.bindTo(this.contextKeyService);\n\n\tprivate readonly readonlyIncludeMatcher = this._register(new GlobalIdleValue(() => this.createReadonlyMatcher(FILES_READONLY_INCLUDE_CONFIG)));\n\tprivate readonly readonlyExcludeMatcher = this._register(new GlobalIdleValue(() => this.createReadonlyMatcher(FILES_READONLY_EXCLUDE_CONFIG)));\n\tprivate configuredReadonlyFromPermissions: boolean | undefined;\n\n\tprivate readonly sessionReadonlyOverrides = new ResourceMap<boolean>(resource => this.uriIdentityService.extUri.getComparisonKey(resource));\n\n\tconstructor(\n\t\t@IContextKeyService private readonly contextKeyService: IContextKeyService,\n\t\t@IConfigurationService private readonly configurationService: IConfigurationService,\n\t\t@IWorkspaceContextService private readonly contextService: IWorkspaceContextService,\n\t\t@IEnvironmentService private readonly environmentService: IEnvironmentService,\n\t\t@IUriIdentityService private readonly uriIdentityService: IUriIdentityService,\n\t\t@IFileService private readonly fileService: IFileService,\n\t\t@IMarkerService private readonly markerService: IMarkerService,\n\t\t@ITextResourceConfigurationService private readonly textResourceConfigurationService: ITextResourceConfigurationService\n\t) {\n\t\tsuper();\n\n\t\tconst configuration = configurationService.getValue<IFilesConfiguration>();\n\n\t\tthis.currentGlobalAutoSaveConfiguration = this.computeAutoSaveConfiguration(undefined, configuration.files);\n\t\tthis.currentFilesAssociationConfiguration = configuration?.files?.associations;\n\t\tthis.currentHotExitConfiguration = configuration?.files?.hotExit || HotExitConfiguration.ON_EXIT;\n\n\t\tthis.onFilesConfigurationChange(configuration, false);\n\n\t\tthis.registerListeners();\n\t}\n\n\tprivate createReadonlyMatcher(config: string) {\n\t\tconst matcher = this._register(new ResourceGlobMatcher(\n\t\t\tresource => this.configurationService.getValue(config, { resource }),\n\t\t\tevent => event.affectsConfiguration(config),\n\t\t\tthis.contextService,\n\t\t\tthis.configurationService\n\t\t));\n\n\t\tthis._register(matcher.onExpressionChange(() => this._onDidChangeReadonly.fire()));\n\n\t\treturn matcher;\n\t}\n\n\tisReadonly(resource: URI, stat?: IBaseFileStat): boolean | IMarkdownString {\n\n\t\t// if the entire file system provider is readonly, we respect that\n\t\t// and do not allow to change readonly. we take this as a hint that\n\t\t// the provider has no capabilities of writing.\n\t\tconst provider = this.fileService.getProvider(resource.scheme);\n\t\tif (provider && hasReadonlyCapability(provider)) {\n\t\t\treturn provider.readOnlyMessage ?? FilesConfigurationService.READONLY_MESSAGES.providerReadonly;\n\t\t}\n\n\t\t// session override always wins over the others\n\t\tconst sessionReadonlyOverride = this.sessionReadonlyOverrides.get(resource);\n\t\tif (typeof sessionReadonlyOverride === 'boolean') {\n\t\t\treturn sessionReadonlyOverride === true ? FilesConfigurationService.READONLY_MESSAGES.sessionReadonly : false;\n\t\t}\n\n\t\tif (\n\t\t\tthis.uriIdentityService.extUri.isEqualOrParent(resource, this.environmentService.userRoamingDataHome) ||\n\t\t\tthis.uriIdentityService.extUri.isEqual(resource, this.contextService.getWorkspace().configuration ?? undefined)\n\t\t) {\n\t\t\treturn false; // explicitly exclude some paths from readonly that we need for configuration\n\t\t}\n\n\t\t// configured glob patterns win over stat information\n\t\tif (this.readonlyIncludeMatcher.value.matches(resource)) {\n\t\t\treturn !this.readonlyExcludeMatcher.value.matches(resource) ? FilesConfigurationService.READONLY_MESSAGES.configuredReadonly : false;\n\t\t}\n\n\t\t// check if file is locked and configured to treat as readonly\n\t\tif (this.configuredReadonlyFromPermissions && stat?.locked) {\n\t\t\treturn FilesConfigurationService.READONLY_MESSAGES.fileLocked;\n\t\t}\n\n\t\t// check if file is marked readonly from the file system provider\n\t\tif (stat?.readonly) {\n\t\t\treturn FilesConfigurationService.READONLY_MESSAGES.fileReadonly;\n\t\t}\n\n\t\treturn false;\n\t}\n\n\tasync updateReadonly(resource: URI, readonly: true | false | 'toggle' | 'reset'): Promise<void> {\n\t\tif (readonly === 'toggle') {\n\t\t\tlet stat: IFileStatWithMetadata | undefined = undefined;\n\t\t\ttry {\n\t\t\t\tstat = await this.fileService.resolve(resource, { resolveMetadata: true });\n\t\t\t} catch (error) {\n\t\t\t\t// ignore\n\t\t\t}\n\n\t\t\treadonly = !this.isReadonly(resource, stat);\n\t\t}\n\n\t\tif (readonly === 'reset') {\n\t\t\tthis.sessionReadonlyOverrides.delete(resource);\n\t\t} else {\n\t\t\tthis.sessionReadonlyOverrides.set(resource, readonly);\n\t\t}\n\n\t\tthis._onDidChangeReadonly.fire();\n\t}\n\n\tprivate registerListeners(): void {\n\n\t\t// Files configuration changes\n\t\tthis._register(this.configurationService.onDidChangeConfiguration(e => {\n\t\t\tif (e.affectsConfiguration('files')) {\n\t\t\t\tthis.onFilesConfigurationChange(this.configurationService.getValue<IFilesConfiguration>(), true);\n\t\t\t}\n\t\t}));\n\t}\n\n\tprotected onFilesConfigurationChange(configuration: IFilesConfiguration, fromEvent: boolean): void {\n\n\t\t// Auto Save\n\t\tthis.currentGlobalAutoSaveConfiguration = this.computeAutoSaveConfiguration(undefined, configuration.files);\n\t\tthis.autoSaveConfigurationCache.clear();\n\t\tthis.autoSaveAfterShortDelayContext.set(this.getAutoSaveMode(undefined).mode === AutoSaveMode.AFTER_SHORT_DELAY);\n\t\tif (fromEvent) {\n\t\t\tthis._onDidChangeAutoSaveConfiguration.fire();\n\t\t}\n\n\t\t// Check for change in files associations\n\t\tconst filesAssociation = configuration?.files?.associations;\n\t\tif (!equals(this.currentFilesAssociationConfiguration, filesAssociation)) {\n\t\t\tthis.currentFilesAssociationConfiguration = filesAssociation;\n\t\t\tif (fromEvent) {\n\t\t\t\tthis._onDidChangeFilesAssociation.fire();\n\t\t\t}\n\t\t}\n\n\t\t// Hot exit\n\t\tconst hotExitMode = configuration?.files?.hotExit;\n\t\tif (hotExitMode === HotExitConfiguration.OFF || hotExitMode === HotExitConfiguration.ON_EXIT_AND_WINDOW_CLOSE) {\n\t\t\tthis.currentHotExitConfiguration = hotExitMode;\n\t\t} else {\n\t\t\tthis.currentHotExitConfiguration = HotExitConfiguration.ON_EXIT;\n\t\t}\n\n\t\t// Readonly\n\t\tconst readonlyFromPermissions = Boolean(configuration?.files?.readonlyFromPermissions);\n\t\tif (readonlyFromPermissions !== Boolean(this.configuredReadonlyFromPermissions)) {\n\t\t\tthis.configuredReadonlyFromPermissions = readonlyFromPermissions;\n\t\t\tif (fromEvent) {\n\t\t\t\tthis._onDidChangeReadonly.fire();\n\t\t\t}\n\t\t}\n\t}\n\n\tgetAutoSaveConfiguration(resourceOrEditor: EditorInput | URI | undefined): ICachedAutoSaveConfiguration {\n\t\tconst resource = this.toResource(resourceOrEditor);\n\t\tif (resource) {\n\t\t\tlet resourceAutoSaveConfiguration = this.autoSaveConfigurationCache.get(resource);\n\t\t\tif (!resourceAutoSaveConfiguration) {\n\t\t\t\tresourceAutoSaveConfiguration = this.computeAutoSaveConfiguration(resource, this.textResourceConfigurationService.getValue<IFilesConfigurationNode>(resource, 'files'));\n\t\t\t\tthis.autoSaveConfigurationCache.set(resource, resourceAutoSaveConfiguration);\n\t\t\t}\n\n\t\t\treturn resourceAutoSaveConfiguration;\n\t\t}\n\n\t\treturn this.currentGlobalAutoSaveConfiguration;\n\t}\n\n\tprivate computeAutoSaveConfiguration(resource: URI | undefined, filesConfiguration: IFilesConfigurationNode | undefined): ICachedAutoSaveConfiguration {\n\t\tlet autoSave: 'afterDelay' | 'onFocusChange' | 'onWindowChange' | undefined;\n\t\tlet autoSaveDelay: number | undefined;\n\t\tlet autoSaveWorkspaceFilesOnly: boolean | undefined;\n\t\tlet autoSaveWhenNoErrors: boolean | undefined;\n\n\t\tlet isOutOfWorkspace: boolean | undefined;\n\t\tlet isShortAutoSaveDelay: boolean | undefined;\n\n\t\tswitch (filesConfiguration?.autoSave ?? FilesConfigurationService.DEFAULT_AUTO_SAVE_MODE) {\n\t\t\tcase AutoSaveConfiguration.AFTER_DELAY: {\n\t\t\t\tautoSave = 'afterDelay';\n\t\t\t\tautoSaveDelay = typeof filesConfiguration?.autoSaveDelay === 'number' && filesConfiguration.autoSaveDelay >= 0 ? filesConfiguration.autoSaveDelay : FilesConfigurationService.DEFAULT_AUTO_SAVE_DELAY;\n\t\t\t\tisShortAutoSaveDelay = autoSaveDelay <= FilesConfigurationService.DEFAULT_AUTO_SAVE_DELAY;\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tcase AutoSaveConfiguration.ON_FOCUS_CHANGE:\n\t\t\t\tautoSave = 'onFocusChange';\n\t\t\t\tbreak;\n\n\t\t\tcase AutoSaveConfiguration.ON_WINDOW_CHANGE:\n\t\t\t\tautoSave = 'onWindowChange';\n\t\t\t\tbreak;\n\t\t}\n\n\t\tif (filesConfiguration?.autoSaveWorkspaceFilesOnly === true) {\n\t\t\tautoSaveWorkspaceFilesOnly = true;\n\n\t\t\tif (resource && !this.contextService.isInsideWorkspace(resource)) {\n\t\t\t\tisOutOfWorkspace = true;\n\t\t\t\tisShortAutoSaveDelay = undefined; // out of workspace file are not auto saved with this configuration\n\t\t\t}\n\t\t}\n\n\t\tif (filesConfiguration?.autoSaveWhenNoErrors === true) {\n\t\t\tautoSaveWhenNoErrors = true;\n\t\t\tisShortAutoSaveDelay = undefined; // this configuration disables short auto save delay\n\t\t}\n\n\t\treturn {\n\t\t\tautoSave,\n\t\t\tautoSaveDelay,\n\t\t\tautoSaveWorkspaceFilesOnly,\n\t\t\tautoSaveWhenNoErrors,\n\t\t\tisOutOfWorkspace,\n\t\t\tisShortAutoSaveDelay\n\t\t};\n\t}\n\n\tprivate toResource(resourceOrEditor: EditorInput | URI | undefined): URI | undefined {\n\t\tif (resourceOrEditor instanceof EditorInput) {\n\t\t\treturn EditorResourceAccessor.getOriginalUri(resourceOrEditor, { supportSideBySide: SideBySideEditor.PRIMARY });\n\t\t}\n\n\t\treturn resourceOrEditor;\n\t}\n\n\thasShortAutoSaveDelay(resourceOrEditor: EditorInput | URI | undefined): boolean {\n\t\tconst resource = this.toResource(resourceOrEditor);\n\t\tif (this.getAutoSaveConfiguration(resource).isShortAutoSaveDelay) {\n\t\t\treturn !resource || !this.autoSaveDisabledOverrides.has(resource);\n\t\t}\n\n\t\treturn false;\n\t}\n\n\tgetAutoSaveMode(resourceOrEditor: EditorInput | URI | undefined, saveReason?: SaveReason): IAutoSaveMode {\n\t\tconst resource = this.toResource(resourceOrEditor);\n\t\tif (resource && this.autoSaveDisabledOverrides.has(resource)) {\n\t\t\treturn { mode: AutoSaveMode.OFF, reason: AutoSaveDisabledReason.DISABLED };\n\t\t}\n\n\t\tconst autoSaveConfiguration = this.getAutoSaveConfiguration(resource);\n\t\tif (typeof autoSaveConfiguration.autoSave === 'undefined') {\n\t\t\treturn { mode: AutoSaveMode.OFF, reason: AutoSaveDisabledReason.SETTINGS };\n\t\t}\n\n\t\tif (typeof saveReason === 'number') {\n\t\t\tif (\n\t\t\t\t(autoSaveConfiguration.autoSave === 'afterDelay' && saveReason !== SaveReason.AUTO) ||\n\t\t\t\t(autoSaveConfiguration.autoSave === 'onFocusChange' && saveReason !== SaveReason.FOCUS_CHANGE && saveReason !== SaveReason.WINDOW_CHANGE) ||\n\t\t\t\t(autoSaveConfiguration.autoSave === 'onWindowChange' && saveReason !== SaveReason.WINDOW_CHANGE)\n\t\t\t) {\n\t\t\t\treturn { mode: AutoSaveMode.OFF, reason: AutoSaveDisabledReason.SETTINGS };\n\t\t\t}\n\t\t}\n\n\t\tif (resource) {\n\t\t\tif (autoSaveConfiguration.autoSaveWorkspaceFilesOnly && autoSaveConfiguration.isOutOfWorkspace) {\n\t\t\t\treturn { mode: AutoSaveMode.OFF, reason: AutoSaveDisabledReason.OUT_OF_WORKSPACE };\n\t\t\t}\n\n\t\t\tif (autoSaveConfiguration.autoSaveWhenNoErrors && this.markerService.read({ resource, take: 1, severities: MarkerSeverity.Error }).length > 0) {\n\t\t\t\treturn { mode: AutoSaveMode.OFF, reason: AutoSaveDisabledReason.ERRORS };\n\t\t\t}\n\t\t}\n\n\t\tswitch (autoSaveConfiguration.autoSave) {\n\t\t\tcase 'afterDelay':\n\t\t\t\tif (typeof autoSaveConfiguration.autoSaveDelay === 'number' && autoSaveConfiguration.autoSaveDelay <= FilesConfigurationService.DEFAULT_AUTO_SAVE_DELAY) {\n\t\t\t\t\t// Explicitly mark auto save configurations as long running\n\t\t\t\t\t// if they are configured to not run when there are errors.\n\t\t\t\t\t// The rationale here is that errors may come in after auto\n\t\t\t\t\t// save has been scheduled and then further delay the auto\n\t\t\t\t\t// save until resolved.\n\t\t\t\t\treturn { mode: autoSaveConfiguration.autoSaveWhenNoErrors ? AutoSaveMode.AFTER_LONG_DELAY : AutoSaveMode.AFTER_SHORT_DELAY };\n\t\t\t\t}\n\t\t\t\treturn { mode: AutoSaveMode.AFTER_LONG_DELAY };\n\t\t\tcase 'onFocusChange':\n\t\t\t\treturn { mode: AutoSaveMode.ON_FOCUS_CHANGE };\n\t\t\tcase 'onWindowChange':\n\t\t\t\treturn { mode: AutoSaveMode.ON_WINDOW_CHANGE };\n\t\t}\n\t}\n\n\tasync toggleAutoSave(): Promise<void> {\n\t\tconst currentSetting = this.configurationService.getValue('files.autoSave');\n\n\t\tlet newAutoSaveValue: string;\n\t\tif ([AutoSaveConfiguration.AFTER_DELAY, AutoSaveConfiguration.ON_FOCUS_CHANGE, AutoSaveConfiguration.ON_WINDOW_CHANGE].some(setting => setting === currentSetting)) {\n\t\t\tnewAutoSaveValue = AutoSaveConfiguration.OFF;\n\t\t} else {\n\t\t\tnewAutoSaveValue = AutoSaveConfiguration.AFTER_DELAY;\n\t\t}\n\n\t\treturn this.configurationService.updateValue('files.autoSave', newAutoSaveValue);\n\t}\n\n\tdisableAutoSave(resourceOrEditor: EditorInput | URI): IDisposable {\n\t\tconst resource = this.toResource(resourceOrEditor);\n\t\tif (!resource) {\n\t\t\treturn Disposable.None;\n\t\t}\n\n\t\tconst counter = this.autoSaveDisabledOverrides.get(resource) ?? 0;\n\t\tthis.autoSaveDisabledOverrides.set(resource, counter + 1);\n\n\t\tif (counter === 0) {\n\t\t\tthis._onDidChangeAutoSaveDisabled.fire(resource);\n\t\t}\n\n\t\treturn toDisposable(() => {\n\t\t\tconst counter = this.autoSaveDisabledOverrides.get(resource) ?? 0;\n\t\t\tif (counter <= 1) {\n\t\t\t\tthis.autoSaveDisabledOverrides.delete(resource);\n\t\t\t\tthis._onDidChangeAutoSaveDisabled.fire(resource);\n\t\t\t} else {\n\t\t\t\tthis.autoSaveDisabledOverrides.set(resource, counter - 1);\n\t\t\t}\n\t\t});\n\t}\n\n\tget isHotExitEnabled(): boolean {\n\t\tif (this.contextService.getWorkspace().transient) {\n\t\t\t// Transient workspace: hot exit is disabled because\n\t\t\t// transient workspaces are not restored upon restart\n\t\t\treturn false;\n\t\t}\n\n\t\treturn this.currentHotExitConfiguration !== HotExitConfiguration.OFF;\n\t}\n\n\tget hotExitConfiguration(): string {\n\t\treturn this.currentHotExitConfiguration;\n\t}\n\n\tpreventSaveConflicts(resource: URI, language?: string): boolean {\n\t\treturn this.configurationService.getValue('files.saveConflictResolution', { resource, overrideIdentifier: language }) !== 'overwriteFileOnDisk';\n\t}\n}\n\nregisterSingleton(IFilesConfigurationService, FilesConfigurationService, InstantiationType.Eager);\n"],
  "mappings": "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",
  "names": ["AutoSaveMode", "AutoSaveDisabledReason", "counter"]
}
