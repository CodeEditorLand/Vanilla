var C=Object.defineProperty;var P=Object.getOwnPropertyDescriptor;var c=(n,t,e,r)=>{for(var o=r>1?void 0:r?P(t,e):t,s=n.length-1,a;s>=0;s--)(a=n[s])&&(o=(r?a(t,e,o):a(o))||o);return r&&o&&C(t,e,o),o},d=(n,t)=>(e,r)=>t(e,r,n);import{Barrier as w,timeout as S}from"../../../../base/common/async.js";import{Disposable as g}from"../../../../base/common/lifecycle.js";import{mark as h}from"../../../../base/common/performance.js";import{getDelayedChannel as v}from"../../../../base/parts/ipc/common/ipc.js";import{Client as f}from"../../../../base/parts/ipc/common/ipc.mp.js";import{acquirePort as l}from"../../../../base/parts/ipc/electron-sandbox/ipc.mp.js";import{ILogService as u}from"../../../../platform/log/common/log.js";import{SharedProcessChannelConnection as m,SharedProcessRawConnection as p}from"../../../../platform/sharedProcess/common/sharedProcess.js";let i=class extends g{constructor(e,r){super();this.windowId=e;this.logService=r;this.withSharedProcessConnection=this.connect()}withSharedProcessConnection;restoredBarrier=new w;async connect(){this.logService.trace("Renderer->SharedProcess#connect"),await Promise.race([this.restoredBarrier.wait(),S(2e3)]),h("code/willConnectSharedProcess"),this.logService.trace("Renderer->SharedProcess#connect: before acquirePort");const e=await l(m.request,m.response);return h("code/didConnectSharedProcess"),this.logService.trace("Renderer->SharedProcess#connect: connection established"),this._register(new f(e,`window:${this.windowId}`))}notifyRestored(){this.restoredBarrier.isOpen()||this.restoredBarrier.open()}getChannel(e){return v(this.withSharedProcessConnection.then(r=>r.getChannel(e)))}registerChannel(e,r){this.withSharedProcessConnection.then(o=>o.registerChannel(e,r))}async createRawConnection(){await this.withSharedProcessConnection,this.logService.trace("Renderer->SharedProcess#createRawConnection: before acquirePort");const e=await l(p.request,p.response);return this.logService.trace("Renderer->SharedProcess#createRawConnection: connection established"),e}};i=c([d(1,u)],i);export{i as SharedProcessService};
