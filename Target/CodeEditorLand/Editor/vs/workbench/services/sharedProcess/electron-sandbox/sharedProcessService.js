var P=Object.defineProperty;var p=Object.getOwnPropertyDescriptor;var c=(t,o,e,r)=>{for(var n=r>1?void 0:r?p(o,e):o,s=t.length-1,a;s>=0;s--)(a=t[s])&&(n=(r?a(o,e,n):a(n))||n);return r&&n&&P(o,e,n),n},d=(t,o)=>(e,r)=>o(e,r,t);import{Client as w}from"../../../../base/parts/ipc/common/ipc.mp.js";import{getDelayedChannel as S}from"../../../../base/parts/ipc/common/ipc.js";import{ILogService as g}from"../../../../platform/log/common/log.js";import{Disposable as v}from"../../../../base/common/lifecycle.js";import"../../../../platform/ipc/electron-sandbox/services.js";import{SharedProcessChannelConnection as h,SharedProcessRawConnection as l}from"../../../../platform/sharedProcess/common/sharedProcess.js";import{mark as m}from"../../../../base/common/performance.js";import{Barrier as f,timeout as u}from"../../../../base/common/async.js";import{acquirePort as C}from"../../../../base/parts/ipc/electron-sandbox/ipc.mp.js";let i=class extends v{constructor(e,r){super();this.windowId=e;this.logService=r;this.withSharedProcessConnection=this.connect()}withSharedProcessConnection;restoredBarrier=new f;async connect(){this.logService.trace("Renderer->SharedProcess#connect"),await Promise.race([this.restoredBarrier.wait(),u(2e3)]),m("code/willConnectSharedProcess"),this.logService.trace("Renderer->SharedProcess#connect: before acquirePort");const e=await C(h.request,h.response);return m("code/didConnectSharedProcess"),this.logService.trace("Renderer->SharedProcess#connect: connection established"),this._register(new w(e,`window:${this.windowId}`))}notifyRestored(){this.restoredBarrier.isOpen()||this.restoredBarrier.open()}getChannel(e){return S(this.withSharedProcessConnection.then(r=>r.getChannel(e)))}registerChannel(e,r){this.withSharedProcessConnection.then(n=>n.registerChannel(e,r))}async createRawConnection(){await this.withSharedProcessConnection,this.logService.trace("Renderer->SharedProcess#createRawConnection: before acquirePort");const e=await C(l.request,l.response);return this.logService.trace("Renderer->SharedProcess#createRawConnection: connection established"),e}};i=c([d(1,g)],i);export{i as SharedProcessService};
