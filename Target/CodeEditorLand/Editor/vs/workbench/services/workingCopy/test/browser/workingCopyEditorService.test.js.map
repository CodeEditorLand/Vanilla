{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/workingCopy/test/browser/workingCopyEditorService.test.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport assert from 'assert';\nimport { DisposableStore } from '../../../../../base/common/lifecycle.js';\nimport { URI } from '../../../../../base/common/uri.js';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from '../../../../../base/test/common/utils.js';\nimport { EditorService } from '../../../editor/browser/editorService.js';\nimport { IEditorGroupsService } from '../../../editor/common/editorGroupsService.js';\nimport { UntitledTextEditorInput } from '../../../untitled/common/untitledTextEditorInput.js';\nimport { IWorkingCopyEditorHandler, WorkingCopyEditorService } from '../../common/workingCopyEditorService.js';\nimport { createEditorPart, registerTestResourceEditor, TestEditorService, TestServiceAccessor, workbenchInstantiationService } from '../../../../test/browser/workbenchTestServices.js';\nimport { TestWorkingCopy } from '../../../../test/common/workbenchTestServices.js';\n\nsuite('WorkingCopyEditorService', () => {\n\n\tconst disposables = new DisposableStore();\n\n\tsetup(() => {\n\t\tdisposables.add(registerTestResourceEditor());\n\t});\n\n\tteardown(() => {\n\t\tdisposables.clear();\n\t});\n\n\ttest('registry - basics', () => {\n\t\tconst service = disposables.add(new WorkingCopyEditorService(disposables.add(new TestEditorService())));\n\n\t\tlet handlerEvent: IWorkingCopyEditorHandler | undefined = undefined;\n\t\tdisposables.add(service.onDidRegisterHandler(handler => {\n\t\t\thandlerEvent = handler;\n\t\t}));\n\n\t\tconst editorHandler: IWorkingCopyEditorHandler = {\n\t\t\thandles: workingCopy => false,\n\t\t\tisOpen: () => false,\n\t\t\tcreateEditor: workingCopy => { throw new Error(); }\n\t\t};\n\n\t\tdisposables.add(service.registerHandler(editorHandler));\n\n\t\tassert.strictEqual(handlerEvent, editorHandler);\n\t});\n\n\ttest('findEditor', async () => {\n\t\tconst disposables = new DisposableStore();\n\n\t\tconst instantiationService = workbenchInstantiationService(undefined, disposables);\n\t\tconst part = await createEditorPart(instantiationService, disposables);\n\t\tinstantiationService.stub(IEditorGroupsService, part);\n\n\t\tconst editorService = disposables.add(instantiationService.createInstance(EditorService, undefined));\n\t\tconst accessor = instantiationService.createInstance(TestServiceAccessor);\n\n\t\tconst service = disposables.add(new WorkingCopyEditorService(editorService));\n\n\t\tconst resource = URI.parse('custom://some/folder/custom.txt');\n\t\tconst testWorkingCopy = disposables.add(new TestWorkingCopy(resource, false, 'testWorkingCopyTypeId1'));\n\n\t\tassert.strictEqual(service.findEditor(testWorkingCopy), undefined);\n\n\t\tconst editorHandler: IWorkingCopyEditorHandler = {\n\t\t\thandles: workingCopy => workingCopy === testWorkingCopy,\n\t\t\tisOpen: (workingCopy, editor) => workingCopy === testWorkingCopy,\n\t\t\tcreateEditor: workingCopy => { throw new Error(); }\n\t\t};\n\n\t\tdisposables.add(service.registerHandler(editorHandler));\n\n\t\tconst editor1 = disposables.add(instantiationService.createInstance(UntitledTextEditorInput, accessor.untitledTextEditorService.create({ initialValue: 'foo' })));\n\t\tconst editor2 = disposables.add(instantiationService.createInstance(UntitledTextEditorInput, accessor.untitledTextEditorService.create({ initialValue: 'foo' })));\n\n\t\tawait editorService.openEditors([{ editor: editor1 }, { editor: editor2 }]);\n\n\t\tassert.ok(service.findEditor(testWorkingCopy));\n\n\t\tdisposables.dispose();\n\t});\n\n\tensureNoDisposablesAreLeakedInTestSuite();\n});\n"],
  "mappings": ";;AAKA,OAAO,YAAY;AACnB,SAAS,uBAAuB;AAChC,SAAS,WAAW;AACpB,SAAS,+CAA+C;AACxD,SAAS,qBAAqB;AAC9B,SAAS,4BAA4B;AACrC,SAAS,+BAA+B;AACxC,SAAS,2BAA2B,gCAAgC;AACpE,SAAS,kBAAkB,4BAA4B,mBAAmB,qBAAqB,qCAAqC;AACpI,SAAS,uBAAuB;AAEhC,MAAM,4BAA4B,MAAM;AAEvC,QAAM,cAAc,IAAI,gBAAgB;AAExC,QAAM,MAAM;AACX,gBAAY,IAAI,2BAA2B,CAAC;AAAA,EAC7C,CAAC;AAED,WAAS,MAAM;AACd,gBAAY,MAAM;AAAA,EACnB,CAAC;AAED,OAAK,qBAAqB,MAAM;AAC/B,UAAM,UAAU,YAAY,IAAI,IAAI,yBAAyB,YAAY,IAAI,IAAI,kBAAkB,CAAC,CAAC,CAAC;AAEtG,QAAI,eAAsD;AAC1D,gBAAY,IAAI,QAAQ,qBAAqB,aAAW;AACvD,qBAAe;AAAA,IAChB,CAAC,CAAC;AAEF,UAAM,gBAA2C;AAAA,MAChD,SAAS,wCAAe,OAAf;AAAA,MACT,QAAQ,6BAAM,OAAN;AAAA,MACR,cAAc,wCAAe;AAAE,cAAM,IAAI,MAAM;AAAA,MAAG,GAApC;AAAA,IACf;AAEA,gBAAY,IAAI,QAAQ,gBAAgB,aAAa,CAAC;AAEtD,WAAO,YAAY,cAAc,aAAa;AAAA,EAC/C,CAAC;AAED,OAAK,cAAc,YAAY;AAC9B,UAAMA,eAAc,IAAI,gBAAgB;AAExC,UAAM,uBAAuB,8BAA8B,QAAWA,YAAW;AACjF,UAAM,OAAO,MAAM,iBAAiB,sBAAsBA,YAAW;AACrE,yBAAqB,KAAK,sBAAsB,IAAI;AAEpD,UAAM,gBAAgBA,aAAY,IAAI,qBAAqB,eAAe,eAAe,MAAS,CAAC;AACnG,UAAM,WAAW,qBAAqB,eAAe,mBAAmB;AAExE,UAAM,UAAUA,aAAY,IAAI,IAAI,yBAAyB,aAAa,CAAC;AAE3E,UAAM,WAAW,IAAI,MAAM,iCAAiC;AAC5D,UAAM,kBAAkBA,aAAY,IAAI,IAAI,gBAAgB,UAAU,OAAO,wBAAwB,CAAC;AAEtG,WAAO,YAAY,QAAQ,WAAW,eAAe,GAAG,MAAS;AAEjE,UAAM,gBAA2C;AAAA,MAChD,SAAS,wCAAe,gBAAgB,iBAA/B;AAAA,MACT,QAAQ,wBAAC,aAAa,WAAW,gBAAgB,iBAAzC;AAAA,MACR,cAAc,wCAAe;AAAE,cAAM,IAAI,MAAM;AAAA,MAAG,GAApC;AAAA,IACf;AAEA,IAAAA,aAAY,IAAI,QAAQ,gBAAgB,aAAa,CAAC;AAEtD,UAAM,UAAUA,aAAY,IAAI,qBAAqB,eAAe,yBAAyB,SAAS,0BAA0B,OAAO,EAAE,cAAc,MAAM,CAAC,CAAC,CAAC;AAChK,UAAM,UAAUA,aAAY,IAAI,qBAAqB,eAAe,yBAAyB,SAAS,0BAA0B,OAAO,EAAE,cAAc,MAAM,CAAC,CAAC,CAAC;AAEhK,UAAM,cAAc,YAAY,CAAC,EAAE,QAAQ,QAAQ,GAAG,EAAE,QAAQ,QAAQ,CAAC,CAAC;AAE1E,WAAO,GAAG,QAAQ,WAAW,eAAe,CAAC;AAE7C,IAAAA,aAAY,QAAQ;AAAA,EACrB,CAAC;AAED,0CAAwC;AACzC,CAAC;",
  "names": ["disposables"]
}
