{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/workingCopy/test/browser/workingCopyBackupTracker.test.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport assert from 'assert';\nimport { URI } from '../../../../../base/common/uri.js';\nimport { IEditorService } from '../../../editor/common/editorService.js';\nimport { EditorPart } from '../../../../browser/parts/editor/editorPart.js';\nimport { IEditorGroupsService } from '../../../editor/common/editorGroupsService.js';\nimport { EditorService } from '../../../editor/browser/editorService.js';\nimport { IUntitledTextResourceEditorInput } from '../../../../common/editor.js';\nimport { IWorkingCopyBackupService } from '../../common/workingCopyBackup.js';\nimport { ensureNoDisposablesAreLeakedInTestSuite, toResource } from '../../../../../base/test/common/utils.js';\nimport { IFilesConfigurationService } from '../../../filesConfiguration/common/filesConfigurationService.js';\nimport { IWorkingCopyService } from '../../common/workingCopyService.js';\nimport { IWorkingCopyBackup } from '../../common/workingCopy.js';\nimport { ILogService } from '../../../../../platform/log/common/log.js';\nimport { ILifecycleService, LifecyclePhase } from '../../../lifecycle/common/lifecycle.js';\nimport { IInstantiationService } from '../../../../../platform/instantiation/common/instantiation.js';\nimport { UntitledTextEditorInput } from '../../../untitled/common/untitledTextEditorInput.js';\nimport { createEditorPart, InMemoryTestWorkingCopyBackupService, registerTestResourceEditor, TestServiceAccessor, toTypedWorkingCopyId, toUntypedWorkingCopyId, workbenchInstantiationService, workbenchTeardown } from '../../../../test/browser/workbenchTestServices.js';\nimport { TestWorkingCopy } from '../../../../test/common/workbenchTestServices.js';\nimport { CancellationToken } from '../../../../../base/common/cancellation.js';\nimport { timeout } from '../../../../../base/common/async.js';\nimport { BrowserWorkingCopyBackupTracker } from '../../browser/workingCopyBackupTracker.js';\nimport { DisposableStore } from '../../../../../base/common/lifecycle.js';\nimport { IWorkingCopyEditorHandler, IWorkingCopyEditorService } from '../../common/workingCopyEditorService.js';\nimport { bufferToReadable, VSBuffer } from '../../../../../base/common/buffer.js';\nimport { isWindows } from '../../../../../base/common/platform.js';\nimport { Schemas } from '../../../../../base/common/network.js';\n\nsuite('WorkingCopyBackupTracker (browser)', function () {\n\tlet accessor: TestServiceAccessor;\n\tconst disposables = new DisposableStore();\n\n\tsetup(() => {\n\t\tdisposables.add(registerTestResourceEditor());\n\t});\n\n\tteardown(async () => {\n\t\tawait workbenchTeardown(accessor.instantiationService);\n\n\t\tdisposables.clear();\n\t});\n\n\tclass TestWorkingCopyBackupTracker extends BrowserWorkingCopyBackupTracker {\n\n\t\tconstructor(\n\t\t\t@IWorkingCopyBackupService workingCopyBackupService: IWorkingCopyBackupService,\n\t\t\t@IFilesConfigurationService filesConfigurationService: IFilesConfigurationService,\n\t\t\t@IWorkingCopyService workingCopyService: IWorkingCopyService,\n\t\t\t@ILifecycleService lifecycleService: ILifecycleService,\n\t\t\t@ILogService logService: ILogService,\n\t\t\t@IWorkingCopyEditorService workingCopyEditorService: IWorkingCopyEditorService,\n\t\t\t@IEditorService editorService: IEditorService,\n\t\t\t@IEditorGroupsService editorGroupService: IEditorGroupsService\n\t\t) {\n\t\t\tsuper(workingCopyBackupService, filesConfigurationService, workingCopyService, lifecycleService, logService, workingCopyEditorService, editorService, editorGroupService);\n\t\t}\n\n\t\tprotected override getBackupScheduleDelay(): number {\n\t\t\treturn 10; // Reduce timeout for tests\n\t\t}\n\n\t\tget pendingBackupOperationCount(): number { return this.pendingBackupOperations.size; }\n\n\t\tgetUnrestoredBackups() {\n\t\t\treturn this.unrestoredBackups;\n\t\t}\n\n\t\tasync testRestoreBackups(handler: IWorkingCopyEditorHandler): Promise<void> {\n\t\t\treturn super.restoreBackups(handler);\n\t\t}\n\t}\n\n\tclass TestUntitledTextEditorInput extends UntitledTextEditorInput {\n\n\t\tresolved = false;\n\n\t\toverride resolve() {\n\t\t\tthis.resolved = true;\n\n\t\t\treturn super.resolve();\n\t\t}\n\t}\n\n\tasync function createTracker(): Promise<{ accessor: TestServiceAccessor; part: EditorPart; tracker: TestWorkingCopyBackupTracker; workingCopyBackupService: InMemoryTestWorkingCopyBackupService; instantiationService: IInstantiationService }> {\n\t\tconst workingCopyBackupService = disposables.add(new InMemoryTestWorkingCopyBackupService());\n\t\tconst instantiationService = workbenchInstantiationService(undefined, disposables);\n\t\tinstantiationService.stub(IWorkingCopyBackupService, workingCopyBackupService);\n\n\t\tconst part = await createEditorPart(instantiationService, disposables);\n\t\tinstantiationService.stub(IEditorGroupsService, part);\n\n\t\tdisposables.add(registerTestResourceEditor());\n\n\t\tconst editorService: EditorService = disposables.add(instantiationService.createInstance(EditorService, undefined));\n\t\tinstantiationService.stub(IEditorService, editorService);\n\n\t\taccessor = instantiationService.createInstance(TestServiceAccessor);\n\n\t\tconst tracker = disposables.add(instantiationService.createInstance(TestWorkingCopyBackupTracker));\n\n\t\treturn { accessor, part, tracker, workingCopyBackupService: workingCopyBackupService, instantiationService };\n\t}\n\n\tasync function untitledBackupTest(untitled: IUntitledTextResourceEditorInput = { resource: undefined }): Promise<void> {\n\t\tconst { accessor, workingCopyBackupService } = await createTracker();\n\n\t\tconst untitledTextEditor = disposables.add((await accessor.editorService.openEditor(untitled))?.input as UntitledTextEditorInput);\n\t\tconst untitledTextModel = disposables.add(await untitledTextEditor.resolve());\n\n\t\tif (!untitled?.contents) {\n\t\t\tuntitledTextModel.textEditorModel?.setValue('Super Good');\n\t\t}\n\n\t\tawait workingCopyBackupService.joinBackupResource();\n\n\t\tassert.strictEqual(workingCopyBackupService.hasBackupSync(untitledTextModel), true);\n\n\t\tuntitledTextModel.dispose();\n\n\t\tawait workingCopyBackupService.joinDiscardBackup();\n\n\t\tassert.strictEqual(workingCopyBackupService.hasBackupSync(untitledTextModel), false);\n\t}\n\n\ttest('Track backups (untitled)', function () {\n\t\treturn untitledBackupTest();\n\t});\n\n\ttest('Track backups (untitled with initial contents)', function () {\n\t\treturn untitledBackupTest({ resource: undefined, contents: 'Foo Bar' });\n\t});\n\n\ttest('Track backups (custom)', async function () {\n\t\tconst { accessor, tracker, workingCopyBackupService } = await createTracker();\n\n\t\tclass TestBackupWorkingCopy extends TestWorkingCopy {\n\n\t\t\tconstructor(resource: URI) {\n\t\t\t\tsuper(resource);\n\n\t\t\t\tdisposables.add(accessor.workingCopyService.registerWorkingCopy(this));\n\t\t\t}\n\n\t\t\treadonly backupDelay = 10;\n\n\t\t\toverride async backup(token: CancellationToken): Promise<IWorkingCopyBackup> {\n\t\t\t\tawait timeout(0);\n\n\t\t\t\treturn {};\n\t\t\t}\n\t\t}\n\n\t\tconst resource: URI = toResource.call(this, '/path/custom.txt');\n\t\tconst customWorkingCopy = disposables.add(new TestBackupWorkingCopy(resource));\n\n\t\t// Normal\n\t\tcustomWorkingCopy.setDirty(true);\n\t\tassert.strictEqual(tracker.pendingBackupOperationCount, 1);\n\t\tawait workingCopyBackupService.joinBackupResource();\n\t\tassert.strictEqual(workingCopyBackupService.hasBackupSync(customWorkingCopy), true);\n\n\t\tcustomWorkingCopy.setDirty(false);\n\t\tcustomWorkingCopy.setDirty(true);\n\t\tassert.strictEqual(tracker.pendingBackupOperationCount, 1);\n\t\tawait workingCopyBackupService.joinBackupResource();\n\t\tassert.strictEqual(workingCopyBackupService.hasBackupSync(customWorkingCopy), true);\n\n\t\tcustomWorkingCopy.setDirty(false);\n\t\tassert.strictEqual(tracker.pendingBackupOperationCount, 1);\n\t\tawait workingCopyBackupService.joinDiscardBackup();\n\t\tassert.strictEqual(workingCopyBackupService.hasBackupSync(customWorkingCopy), false);\n\n\t\t// Cancellation\n\t\tcustomWorkingCopy.setDirty(true);\n\t\tawait timeout(0);\n\t\tcustomWorkingCopy.setDirty(false);\n\t\tassert.strictEqual(tracker.pendingBackupOperationCount, 1);\n\t\tawait workingCopyBackupService.joinDiscardBackup();\n\t\tassert.strictEqual(workingCopyBackupService.hasBackupSync(customWorkingCopy), false);\n\t});\n\n\tasync function restoreBackupsInit(): Promise<[TestWorkingCopyBackupTracker, TestServiceAccessor]> {\n\t\tconst fooFile = URI.file(isWindows ? 'c:\\\\Foo' : '/Foo');\n\t\tconst barFile = URI.file(isWindows ? 'c:\\\\Bar' : '/Bar');\n\t\tconst untitledFile1 = URI.from({ scheme: Schemas.untitled, path: 'Untitled-1' });\n\t\tconst untitledFile2 = URI.from({ scheme: Schemas.untitled, path: 'Untitled-2' });\n\n\t\tconst workingCopyBackupService = disposables.add(new InMemoryTestWorkingCopyBackupService());\n\t\tconst instantiationService = workbenchInstantiationService(undefined, disposables);\n\t\tinstantiationService.stub(IWorkingCopyBackupService, workingCopyBackupService);\n\n\t\tconst part = await createEditorPart(instantiationService, disposables);\n\t\tinstantiationService.stub(IEditorGroupsService, part);\n\n\t\tconst editorService: EditorService = disposables.add(instantiationService.createInstance(EditorService, undefined));\n\t\tinstantiationService.stub(IEditorService, editorService);\n\n\t\taccessor = instantiationService.createInstance(TestServiceAccessor);\n\n\t\t// Backup 2 normal files and 2 untitled files\n\t\tconst untitledFile1WorkingCopyId = toUntypedWorkingCopyId(untitledFile1);\n\t\tconst untitledFile2WorkingCopyId = toTypedWorkingCopyId(untitledFile2);\n\t\tawait workingCopyBackupService.backup(untitledFile1WorkingCopyId, bufferToReadable(VSBuffer.fromString('untitled-1')));\n\t\tawait workingCopyBackupService.backup(untitledFile2WorkingCopyId, bufferToReadable(VSBuffer.fromString('untitled-2')));\n\n\t\tconst fooFileWorkingCopyId = toUntypedWorkingCopyId(fooFile);\n\t\tconst barFileWorkingCopyId = toTypedWorkingCopyId(barFile);\n\t\tawait workingCopyBackupService.backup(fooFileWorkingCopyId, bufferToReadable(VSBuffer.fromString('fooFile')));\n\t\tawait workingCopyBackupService.backup(barFileWorkingCopyId, bufferToReadable(VSBuffer.fromString('barFile')));\n\n\t\tconst tracker = disposables.add(instantiationService.createInstance(TestWorkingCopyBackupTracker));\n\n\t\taccessor.lifecycleService.phase = LifecyclePhase.Restored;\n\n\t\treturn [tracker, accessor];\n\t}\n\n\ttest('Restore backups (basics, some handled)', async function () {\n\t\tconst [tracker, accessor] = await restoreBackupsInit();\n\n\t\tassert.strictEqual(tracker.getUnrestoredBackups().size, 0);\n\n\t\tlet handlesCounter = 0;\n\t\tlet isOpenCounter = 0;\n\t\tlet createEditorCounter = 0;\n\n\t\tawait tracker.testRestoreBackups({\n\t\t\thandles: workingCopy => {\n\t\t\t\thandlesCounter++;\n\n\t\t\t\treturn workingCopy.typeId === 'testBackupTypeId';\n\t\t\t},\n\t\t\tisOpen: (workingCopy, editor) => {\n\t\t\t\tisOpenCounter++;\n\n\t\t\t\treturn false;\n\t\t\t},\n\t\t\tcreateEditor: workingCopy => {\n\t\t\t\tcreateEditorCounter++;\n\n\t\t\t\treturn disposables.add(accessor.instantiationService.createInstance(TestUntitledTextEditorInput, accessor.untitledTextEditorService.create({ initialValue: 'foo' })));\n\t\t\t}\n\t\t});\n\n\t\tassert.strictEqual(handlesCounter, 4);\n\t\tassert.strictEqual(isOpenCounter, 0);\n\t\tassert.strictEqual(createEditorCounter, 2);\n\n\t\tassert.strictEqual(accessor.editorService.count, 2);\n\t\tassert.ok(accessor.editorService.editors.every(editor => editor.isDirty()));\n\t\tassert.strictEqual(tracker.getUnrestoredBackups().size, 2);\n\n\t\tfor (const editor of accessor.editorService.editors) {\n\t\t\tassert.ok(editor instanceof TestUntitledTextEditorInput);\n\t\t\tassert.strictEqual(editor.resolved, true);\n\t\t}\n\t});\n\n\ttest('Restore backups (basics, none handled)', async function () {\n\t\tconst [tracker, accessor] = await restoreBackupsInit();\n\n\t\tawait tracker.testRestoreBackups({\n\t\t\thandles: workingCopy => false,\n\t\t\tisOpen: (workingCopy, editor) => { throw new Error('unexpected'); },\n\t\t\tcreateEditor: workingCopy => { throw new Error('unexpected'); }\n\t\t});\n\n\t\tassert.strictEqual(accessor.editorService.count, 0);\n\t\tassert.strictEqual(tracker.getUnrestoredBackups().size, 4);\n\t});\n\n\ttest('Restore backups (basics, error case)', async function () {\n\t\tconst [tracker] = await restoreBackupsInit();\n\n\t\ttry {\n\t\t\tawait tracker.testRestoreBackups({\n\t\t\t\thandles: workingCopy => true,\n\t\t\t\tisOpen: (workingCopy, editor) => { throw new Error('unexpected'); },\n\t\t\t\tcreateEditor: workingCopy => { throw new Error('unexpected'); }\n\t\t\t});\n\t\t} catch (error) {\n\t\t\t// ignore\n\t\t}\n\n\t\tassert.strictEqual(tracker.getUnrestoredBackups().size, 4);\n\t});\n\n\ttest('Restore backups (multiple handlers)', async function () {\n\t\tconst [tracker, accessor] = await restoreBackupsInit();\n\n\t\tconst firstHandler = tracker.testRestoreBackups({\n\t\t\thandles: workingCopy => {\n\t\t\t\treturn workingCopy.typeId === 'testBackupTypeId';\n\t\t\t},\n\t\t\tisOpen: (workingCopy, editor) => {\n\t\t\t\treturn false;\n\t\t\t},\n\t\t\tcreateEditor: workingCopy => {\n\t\t\t\treturn disposables.add(accessor.instantiationService.createInstance(TestUntitledTextEditorInput, accessor.untitledTextEditorService.create({ initialValue: 'foo' })));\n\t\t\t}\n\t\t});\n\n\t\tconst secondHandler = tracker.testRestoreBackups({\n\t\t\thandles: workingCopy => {\n\t\t\t\treturn workingCopy.typeId.length === 0;\n\t\t\t},\n\t\t\tisOpen: (workingCopy, editor) => {\n\t\t\t\treturn false;\n\t\t\t},\n\t\t\tcreateEditor: workingCopy => {\n\t\t\t\treturn disposables.add(accessor.instantiationService.createInstance(TestUntitledTextEditorInput, accessor.untitledTextEditorService.create({ initialValue: 'foo' })));\n\t\t\t}\n\t\t});\n\n\t\tawait Promise.all([firstHandler, secondHandler]);\n\n\t\tassert.strictEqual(accessor.editorService.count, 4);\n\t\tassert.ok(accessor.editorService.editors.every(editor => editor.isDirty()));\n\t\tassert.strictEqual(tracker.getUnrestoredBackups().size, 0);\n\n\t\tfor (const editor of accessor.editorService.editors) {\n\t\t\tassert.ok(editor instanceof TestUntitledTextEditorInput);\n\t\t\tassert.strictEqual(editor.resolved, true);\n\t\t}\n\t});\n\n\ttest('Restore backups (editors already opened)', async function () {\n\t\tconst [tracker, accessor] = await restoreBackupsInit();\n\n\t\tassert.strictEqual(tracker.getUnrestoredBackups().size, 0);\n\n\t\tlet handlesCounter = 0;\n\t\tlet isOpenCounter = 0;\n\n\t\tconst editor1 = disposables.add(accessor.instantiationService.createInstance(TestUntitledTextEditorInput, accessor.untitledTextEditorService.create({ initialValue: 'foo' })));\n\t\tconst editor2 = disposables.add(accessor.instantiationService.createInstance(TestUntitledTextEditorInput, accessor.untitledTextEditorService.create({ initialValue: 'foo' })));\n\n\t\tawait accessor.editorService.openEditors([{ editor: editor1 }, { editor: editor2 }]);\n\n\t\teditor1.resolved = false;\n\t\teditor2.resolved = false;\n\n\t\tawait tracker.testRestoreBackups({\n\t\t\thandles: workingCopy => {\n\t\t\t\thandlesCounter++;\n\n\t\t\t\treturn workingCopy.typeId === 'testBackupTypeId';\n\t\t\t},\n\t\t\tisOpen: (workingCopy, editor) => {\n\t\t\t\tisOpenCounter++;\n\n\t\t\t\treturn true;\n\t\t\t},\n\t\t\tcreateEditor: workingCopy => { throw new Error('unexpected'); }\n\t\t});\n\n\t\tassert.strictEqual(handlesCounter, 4);\n\t\tassert.strictEqual(isOpenCounter, 4);\n\n\t\tassert.strictEqual(accessor.editorService.count, 2);\n\t\tassert.strictEqual(tracker.getUnrestoredBackups().size, 2);\n\n\t\tfor (const editor of accessor.editorService.editors) {\n\t\t\tassert.ok(editor instanceof TestUntitledTextEditorInput);\n\n\t\t\t// assert that we only call `resolve` on inactive editors\n\t\t\tif (accessor.editorService.isVisible(editor)) {\n\t\t\t\tassert.strictEqual(editor.resolved, false);\n\t\t\t} else {\n\t\t\t\tassert.strictEqual(editor.resolved, true);\n\t\t\t}\n\t\t}\n\t});\n\n\tensureNoDisposablesAreLeakedInTestSuite();\n});\n"],
  "mappings": "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",
  "names": ["accessor", "resource"]
}
