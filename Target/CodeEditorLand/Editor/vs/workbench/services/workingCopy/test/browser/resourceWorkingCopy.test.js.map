{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/workingCopy/test/browser/resourceWorkingCopy.test.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport assert from 'assert';\nimport { Event } from '../../../../../base/common/event.js';\nimport { URI } from '../../../../../base/common/uri.js';\nimport { CancellationToken } from '../../../../../base/common/cancellation.js';\nimport { TestServiceAccessor, workbenchInstantiationService } from '../../../../test/browser/workbenchTestServices.js';\nimport { IInstantiationService } from '../../../../../platform/instantiation/common/instantiation.js';\nimport { FileChangesEvent, FileChangeType } from '../../../../../platform/files/common/files.js';\nimport { IRevertOptions, ISaveOptions } from '../../../../common/editor.js';\nimport { ResourceWorkingCopy } from '../../common/resourceWorkingCopy.js';\nimport { WorkingCopyCapabilities, IWorkingCopyBackup } from '../../common/workingCopy.js';\nimport { DisposableStore } from '../../../../../base/common/lifecycle.js';\nimport { runWithFakedTimers } from '../../../../../base/test/common/timeTravelScheduler.js';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from '../../../../../base/test/common/utils.js';\n\nsuite('ResourceWorkingCopy', function () {\n\n\tclass TestResourceWorkingCopy extends ResourceWorkingCopy {\n\t\tname = 'testName';\n\t\ttypeId = 'testTypeId';\n\t\tcapabilities = WorkingCopyCapabilities.None;\n\t\tonDidChangeDirty = Event.None;\n\t\tonDidChangeContent = Event.None;\n\t\tonDidSave = Event.None;\n\t\tisDirty(): boolean { return false; }\n\t\tasync backup(token: CancellationToken): Promise<IWorkingCopyBackup> { throw new Error('Method not implemented.'); }\n\t\tasync save(options?: ISaveOptions): Promise<boolean> { return false; }\n\t\tasync revert(options?: IRevertOptions): Promise<void> { }\n\n\t}\n\n\tconst disposables = new DisposableStore();\n\tconst resource = URI.file('test/resource');\n\tlet instantiationService: IInstantiationService;\n\tlet accessor: TestServiceAccessor;\n\tlet workingCopy: TestResourceWorkingCopy;\n\n\tfunction createWorkingCopy(uri: URI = resource) {\n\t\treturn new TestResourceWorkingCopy(uri, accessor.fileService);\n\t}\n\n\tsetup(() => {\n\t\tinstantiationService = workbenchInstantiationService(undefined, disposables);\n\t\taccessor = instantiationService.createInstance(TestServiceAccessor);\n\n\t\tworkingCopy = disposables.add(createWorkingCopy());\n\t});\n\n\tteardown(() => {\n\t\tdisposables.clear();\n\t});\n\n\ttest('orphaned tracking', async () => {\n\t\treturn runWithFakedTimers({}, async () => {\n\t\t\tassert.strictEqual(workingCopy.isOrphaned(), false);\n\n\t\t\tlet onDidChangeOrphanedPromise = Event.toPromise(workingCopy.onDidChangeOrphaned);\n\t\t\taccessor.fileService.notExistsSet.set(resource, true);\n\t\t\taccessor.fileService.fireFileChanges(new FileChangesEvent([{ resource, type: FileChangeType.DELETED }], false));\n\n\t\t\tawait onDidChangeOrphanedPromise;\n\t\t\tassert.strictEqual(workingCopy.isOrphaned(), true);\n\n\t\t\tonDidChangeOrphanedPromise = Event.toPromise(workingCopy.onDidChangeOrphaned);\n\t\t\taccessor.fileService.notExistsSet.delete(resource);\n\t\t\taccessor.fileService.fireFileChanges(new FileChangesEvent([{ resource, type: FileChangeType.ADDED }], false));\n\n\t\t\tawait onDidChangeOrphanedPromise;\n\t\t\tassert.strictEqual(workingCopy.isOrphaned(), false);\n\t\t});\n\t});\n\n\ttest('dispose, isDisposed', async () => {\n\t\tassert.strictEqual(workingCopy.isDisposed(), false);\n\n\t\tlet disposedEvent = false;\n\t\tdisposables.add(workingCopy.onWillDispose(() => {\n\t\t\tdisposedEvent = true;\n\t\t}));\n\n\t\tworkingCopy.dispose();\n\n\t\tassert.strictEqual(workingCopy.isDisposed(), true);\n\t\tassert.strictEqual(disposedEvent, true);\n\t});\n\n\tensureNoDisposablesAreLeakedInTestSuite();\n});\n"],
  "mappings": ";;AAKA,OAAO,YAAY;AACnB,SAAS,aAAa;AACtB,SAAS,WAAW;AACpB,SAAS,yBAAyB;AAClC,SAAS,qBAAqB,qCAAqC;AACnE,SAAS,6BAA6B;AACtC,SAAS,kBAAkB,sBAAsB;AACjD,SAAS,gBAAgB,oBAAoB;AAC7C,SAAS,2BAA2B;AACpC,SAAS,yBAAyB,0BAA0B;AAC5D,SAAS,uBAAuB;AAChC,SAAS,0BAA0B;AACnC,SAAS,+CAA+C;AAExD,MAAM,uBAAuB,WAAY;AAAA,EAExC,MAAM,gCAAgC,oBAAoB;AAAA,IArB3D,OAqB2D;AAAA;AAAA;AAAA,IACzD,OAAO;AAAA,IACP,SAAS;AAAA,IACT,eAAe,wBAAwB;AAAA,IACvC,mBAAmB,MAAM;AAAA,IACzB,qBAAqB,MAAM;AAAA,IAC3B,YAAY,MAAM;AAAA,IAClB,UAAmB;AAAE,aAAO;AAAA,IAAO;AAAA,IACnC,MAAM,OAAO,OAAuD;AAAE,YAAM,IAAI,MAAM,yBAAyB;AAAA,IAAG;AAAA,IAClH,MAAM,KAAK,SAA0C;AAAE,aAAO;AAAA,IAAO;AAAA,IACrE,MAAM,OAAO,SAAyC;AAAA,IAAE;AAAA,EAEzD;AAEA,QAAM,cAAc,IAAI,gBAAgB;AACxC,QAAM,WAAW,IAAI,KAAK,eAAe;AACzC,MAAI;AACJ,MAAI;AACJ,MAAI;AAEJ,WAAS,kBAAkB,MAAW,UAAU;AAC/C,WAAO,IAAI,wBAAwB,KAAK,SAAS,WAAW;AAAA,EAC7D;AAFS;AAIT,QAAM,MAAM;AACX,2BAAuB,8BAA8B,QAAW,WAAW;AAC3E,eAAW,qBAAqB,eAAe,mBAAmB;AAElE,kBAAc,YAAY,IAAI,kBAAkB,CAAC;AAAA,EAClD,CAAC;AAED,WAAS,MAAM;AACd,gBAAY,MAAM;AAAA,EACnB,CAAC;AAED,OAAK,qBAAqB,YAAY;AACrC,WAAO,mBAAmB,CAAC,GAAG,YAAY;AACzC,aAAO,YAAY,YAAY,WAAW,GAAG,KAAK;AAElD,UAAI,6BAA6B,MAAM,UAAU,YAAY,mBAAmB;AAChF,eAAS,YAAY,aAAa,IAAI,UAAU,IAAI;AACpD,eAAS,YAAY,gBAAgB,IAAI,iBAAiB,CAAC,EAAE,UAAU,MAAM,eAAe,QAAQ,CAAC,GAAG,KAAK,CAAC;AAE9G,YAAM;AACN,aAAO,YAAY,YAAY,WAAW,GAAG,IAAI;AAEjD,mCAA6B,MAAM,UAAU,YAAY,mBAAmB;AAC5E,eAAS,YAAY,aAAa,OAAO,QAAQ;AACjD,eAAS,YAAY,gBAAgB,IAAI,iBAAiB,CAAC,EAAE,UAAU,MAAM,eAAe,MAAM,CAAC,GAAG,KAAK,CAAC;AAE5G,YAAM;AACN,aAAO,YAAY,YAAY,WAAW,GAAG,KAAK;AAAA,IACnD,CAAC;AAAA,EACF,CAAC;AAED,OAAK,uBAAuB,YAAY;AACvC,WAAO,YAAY,YAAY,WAAW,GAAG,KAAK;AAElD,QAAI,gBAAgB;AACpB,gBAAY,IAAI,YAAY,cAAc,MAAM;AAC/C,sBAAgB;AAAA,IACjB,CAAC,CAAC;AAEF,gBAAY,QAAQ;AAEpB,WAAO,YAAY,YAAY,WAAW,GAAG,IAAI;AACjD,WAAO,YAAY,eAAe,IAAI;AAAA,EACvC,CAAC;AAED,0CAAwC;AACzC,CAAC;",
  "names": []
}
