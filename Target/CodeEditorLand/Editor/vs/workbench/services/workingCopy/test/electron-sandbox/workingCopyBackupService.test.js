import t from"assert";import{isWindows as x}from"../../../../../base/common/platform.js";import{insert as O}from"../../../../../base/common/arrays.js";import{hash as F}from"../../../../../base/common/hash.js";import{isEqual as D,joinPath as n,dirname as V}from"../../../../../base/common/resources.js";import{join as G}from"../../../../../base/common/path.js";import{URI as b}from"../../../../../base/common/uri.js";import{WorkingCopyBackupsModel as M,hashIdentifier as h}from"../../common/workingCopyBackupService.js";import{createTextModel as T}from"../../../../../editor/test/common/testTextModel.js";import{Schemas as E}from"../../../../../base/common/network.js";import{FileService as _}from"../../../../../platform/files/common/fileService.js";import{LogLevel as K,NullLogService as Q}from"../../../../../platform/log/common/log.js";import{NativeWorkbenchEnvironmentService as X}from"../../../environment/electron-sandbox/environmentService.js";import{toBufferOrReadable as W}from"../../../textfile/common/textfiles.js";import"../../../../../platform/files/common/files.js";import{NativeWorkingCopyBackupService as Y}from"../../electron-sandbox/workingCopyBackupService.js";import{FileUserDataProvider as Z}from"../../../../../platform/userData/common/fileUserDataProvider.js";import{bufferToReadable as k,bufferToStream as tt,streamToBuffer as z,VSBuffer as f}from"../../../../../base/common/buffer.js";import{TestLifecycleService as et,toTypedWorkingCopyId as q,toUntypedWorkingCopyId as p}from"../../../../test/browser/workbenchTestServices.js";import{CancellationTokenSource as at}from"../../../../../base/common/cancellation.js";import"../../common/workingCopy.js";import{consumeStream as st}from"../../../../../base/common/stream.js";import{TestProductService as it}from"../../../../test/common/workbenchTestServices.js";import{InMemoryFileSystemProvider as rt}from"../../../../../platform/files/common/inMemoryFilesystemProvider.js";import{generateUuid as ct}from"../../../../../base/common/uuid.js";import"../../../../../platform/window/common/window.js";import H from"../../../../../platform/product/common/product.js";import{ensureNoDisposablesAreLeakedInTestSuite as ot}from"../../../../../base/test/common/utils.js";import{DisposableStore as nt}from"../../../../../base/common/lifecycle.js";import{UserDataProfilesService as ut}from"../../../../../platform/userDataProfile/common/userDataProfile.js";import{UriIdentityService as lt}from"../../../../../platform/uriIdentity/common/uriIdentityService.js";const B=b.file("home").with({scheme:E.inMemory}),dt=b.file("tmp").with({scheme:E.inMemory}),J={name:"",id:"",shortName:"",isDefault:!1,location:B,settingsResource:n(B,"settings.json"),globalStorageHome:n(B,"globalStorage"),keybindingsResource:n(B,"keybindings.json"),tasksResource:n(B,"tasks.json"),snippetsHome:n(B,"snippets"),extensionsResource:n(B,"extensions.json"),cacheHome:n(B,"cache")},pt={windowId:0,machineId:"testMachineId",sqmId:"testSqmId",devDeviceId:"testdevDeviceId",logLevel:K.Error,loggers:{global:[],window:[]},mainPid:0,appRoot:"",userEnv:{},execPath:process.execPath,perfMarks:[],colorScheme:{dark:!0,highContrast:!1},os:{release:"unknown",hostname:"unknown",arch:"unknown"},product:H,homeDir:B.fsPath,tmpDir:dt.fsPath,userDataDir:n(B,H.nameShort).fsPath,profiles:{profile:J,all:[J],home:B},nls:{messages:[],language:"en"},_:[]};class ht extends X{constructor(w,I){super({...pt,backupPath:I.fsPath,"user-data-dir":w.fsPath},it)}}class ft extends Y{backupResourceJoiners;discardBackupJoiners;discardedBackups;discardedAllBackups;pendingBackupsArr;_fileService;constructor(w,I){const u=new ht(w,I),i=new Q,r=new _(i),R=new et;super(u,r,i,R);const P=new rt;r.registerProvider(E.inMemory,P);const d=new lt(r),v=new ut(u,r,d,i);r.registerProvider(E.vscodeUserData,new Z(E.file,P,E.vscodeUserData,v,d,i)),this._fileService=r,this.backupResourceJoiners=[],this.discardBackupJoiners=[],this.discardedBackups=[],this.pendingBackupsArr=[],this.discardedAllBackups=!1}testGetFileService(){return this.fileService}async waitForAllBackups(){await Promise.all(this.pendingBackupsArr)}joinBackupResource(){return new Promise(w=>this.backupResourceJoiners.push(w))}async backup(w,I,u,i,r){const R=super.backup(w,I,u,i,r),P=O(this.pendingBackupsArr,R.then(void 0,void 0));try{await R}finally{P()}for(;this.backupResourceJoiners.length;)this.backupResourceJoiners.pop()()}joinDiscardBackup(){return new Promise(w=>this.discardBackupJoiners.push(w))}async discardBackup(w){for(await super.discardBackup(w),this.discardedBackups.push(w);this.discardBackupJoiners.length;)this.discardBackupJoiners.pop()()}async discardBackups(w){return this.discardedAllBackups=!0,super.discardBackups(w)}async getBackupContents(w){const I=this.toBackupResource(w);return(await this.fileService.readFile(I)).value.toString()}}suite("WorkingCopyBackupService",()=>{let U,w,I,u,i,r;const R=new nt,P=b.file(x?"c:\\workspace":"/workspace"),d=b.file(x?"c:\\Foo":"/Foo"),v=b.parse("customScheme://some/path"),A=b.parse("customScheme2://some/path#fragment"),C=b.file(x?"c:\\Bar":"/Bar"),N=b.file(x?"c:\\Foo Bar":"/Foo Bar"),S=b.from({scheme:E.untitled,path:"Untitled-1"});setup(async()=>(U=b.file(G(ct(),"vsctests","workingcopybackupservice")).with({scheme:E.inMemory}),w=n(U,"Backups"),I=n(w,"workspaces.json"),u=n(w,F(P.fsPath).toString(16)),i=R.add(new ft(U,u)),r=i._fileService,await r.createFolder(w),r.writeFile(I,f.fromString("")))),teardown(()=>{R.clear()}),suite("hashIdentifier",()=>{test("should correctly hash the identifier for untitled scheme URIs",()=>{const e=b.from({scheme:E.untitled,path:"Untitled-1"}),c=h(p(e));t.strictEqual(c,"-7f9c1a2e"),t.strictEqual(c,F(e.fsPath).toString(16));const a=h({typeId:"hashTest",resource:e});x?t.strictEqual(a,"-17c47cdc"):t.strictEqual(a,"-8ad5f4f"),t.notStrictEqual(c,a)}),test("should correctly hash the identifier for file scheme URIs",()=>{const e=b.file("/foo"),c=h(p(e));x?t.strictEqual(c,"20ffaa13"):t.strictEqual(c,"20eb3560"),t.strictEqual(c,F(e.fsPath).toString(16));const a=h({typeId:"hashTest",resource:e});x?t.strictEqual(a,"-55fc55db"):t.strictEqual(a,"51e56bf"),t.notStrictEqual(c,a)}),test("should correctly hash the identifier for custom scheme URIs",()=>{const e=b.from({scheme:"vscode-custom",path:"somePath"}),c=h(p(e));t.strictEqual(c,"-44972d98"),t.strictEqual(c,F(e.toString()).toString(16));const a=h({typeId:"hashTest",resource:e});t.strictEqual(a,"502149c7"),t.notStrictEqual(c,a)}),test("should not fail for URIs without path",()=>{const e=b.from({scheme:"vscode-fragment",fragment:"frag"}),c=h(p(e));t.strictEqual(c,"-2f6b2f1b"),t.strictEqual(c,F(e.toString()).toString(16));const a=h({typeId:"hashTest",resource:e});t.strictEqual(a,"6e82ca57"),t.notStrictEqual(c,a)})}),suite("getBackupResource",()=>{test("should get the correct backup path for text files",()=>{const e=d,c=F(P.fsPath).toString(16);let a=p(e),o=h(a),s=n(w,c,E.file,o).with({scheme:E.vscodeUserData}).toString();t.strictEqual(i.toBackupResource(a).toString(),s),a=q(e),o=h(a),s=n(w,c,E.file,o).with({scheme:E.vscodeUserData}).toString(),t.strictEqual(i.toBackupResource(a).toString(),s)}),test("should get the correct backup path for untitled files",()=>{const e=b.from({scheme:E.untitled,path:"Untitled-1"}),c=F(P.fsPath).toString(16);let a=p(e),o=h(a),s=n(w,c,E.untitled,o).with({scheme:E.vscodeUserData}).toString();t.strictEqual(i.toBackupResource(a).toString(),s),a=q(e),o=h(a),s=n(w,c,E.untitled,o).with({scheme:E.vscodeUserData}).toString(),t.strictEqual(i.toBackupResource(a).toString(),s)}),test("should get the correct backup path for custom files",()=>{const e=b.from({scheme:"custom",path:"custom/file.txt"}),c=F(P.fsPath).toString(16);let a=p(e),o=h(a),s=n(w,c,"custom",o).with({scheme:E.vscodeUserData}).toString();t.strictEqual(i.toBackupResource(a).toString(),s),a=q(e),o=h(a),s=n(w,c,"custom",o).with({scheme:E.vscodeUserData}).toString(),t.strictEqual(i.toBackupResource(a).toString(),s)})}),suite("backup",()=>{function e(a,o="",s){return`${a.resource.toString()} ${JSON.stringify({...s,typeId:a.typeId})}
${o}`}test("joining",async()=>{let a=!1;const o=i.joinBackups();o.then(()=>a=!0),await o,t.strictEqual(a,!0),a=!1,i.joinBackups().then(()=>a=!0);const s=p(d),l=n(u,s.resource.scheme,h(s)),m=i.backup(s);t.strictEqual(a,!1),await m,t.strictEqual(a,!0),t.strictEqual((await r.resolve(n(u,"file"))).children?.length,1),t.strictEqual(await r.exists(l),!0),t.strictEqual((await r.readFile(l)).value.toString(),e(s)),t.ok(i.hasBackupSync(s))}),test("no text",async()=>{const a=p(d),o=n(u,a.resource.scheme,h(a));await i.backup(a),t.strictEqual((await r.resolve(n(u,"file"))).children?.length,1),t.strictEqual(await r.exists(o),!0),t.strictEqual((await r.readFile(o)).value.toString(),e(a)),t.ok(i.hasBackupSync(a))}),test("text file",async()=>{const a=p(d),o=n(u,a.resource.scheme,h(a));await i.backup(a,k(f.fromString("test"))),t.strictEqual((await r.resolve(n(u,"file"))).children?.length,1),t.strictEqual(await r.exists(o),!0),t.strictEqual((await r.readFile(o)).value.toString(),e(a,"test")),t.ok(i.hasBackupSync(a))}),test("text file (with version)",async()=>{const a=p(d),o=n(u,a.resource.scheme,h(a));await i.backup(a,k(f.fromString("test")),666),t.strictEqual((await r.resolve(n(u,"file"))).children?.length,1),t.strictEqual(await r.exists(o),!0),t.strictEqual((await r.readFile(o)).value.toString(),e(a,"test")),t.ok(!i.hasBackupSync(a,555)),t.ok(i.hasBackupSync(a,666))}),test("text file (with meta)",async()=>{const a=p(d),o=n(u,a.resource.scheme,h(a)),s={etag:"678",orphaned:!0};await i.backup(a,k(f.fromString("test")),void 0,s),t.strictEqual((await r.resolve(n(u,"file"))).children?.length,1),t.strictEqual(await r.exists(o),!0),t.strictEqual((await r.readFile(o)).value.toString(),e(a,"test",s)),t.ok(i.hasBackupSync(a))}),test("text file with whitespace in name and type (with meta)",async()=>{const a=b.file(x?`c:\\Foo 
 Bar`:`/Foo 
 Bar`),o=q(a,` test id 
`),s=n(u,o.resource.scheme,h(o)),l={etag:`678 
 k`,orphaned:!0};await i.backup(o,k(f.fromString("test")),void 0,l),t.strictEqual((await r.resolve(n(u,"file"))).children?.length,1),t.strictEqual(await r.exists(s),!0),t.strictEqual((await r.readFile(s)).value.toString(),e(o,"test",l)),t.ok(i.hasBackupSync(o))}),test("text file with unicode character in name and type (with meta)",async()=>{const a=b.file(x?"c:\\so\u{12005}me\u0804":"/so\u{12005}me\u0804"),o=q(a,` test so\u{12005}me\u0804 id 
`),s=n(u,o.resource.scheme,h(o)),l={etag:"678so\u{12005}me\u0804",orphaned:!0};await i.backup(o,k(f.fromString("test")),void 0,l),t.strictEqual((await r.resolve(n(u,"file"))).children?.length,1),t.strictEqual(await r.exists(s),!0),t.strictEqual((await r.readFile(s)).value.toString(),e(o,"test",l)),t.ok(i.hasBackupSync(o))}),test("untitled file",async()=>{const a=p(S),o=n(u,a.resource.scheme,h(a));await i.backup(a,k(f.fromString("test"))),t.strictEqual((await r.resolve(n(u,"untitled"))).children?.length,1),t.strictEqual(await r.exists(o),!0),t.strictEqual((await r.readFile(o)).value.toString(),e(a,"test")),t.ok(i.hasBackupSync(a))}),test("text file (readable)",async()=>{const a=p(d),o=n(u,a.resource.scheme,h(a)),s=T("test");await i.backup(a,W(s.createSnapshot())),t.strictEqual((await r.resolve(n(u,"file"))).children?.length,1),t.strictEqual(await r.exists(o),!0),t.strictEqual((await r.readFile(o)).value.toString(),e(a,"test")),t.ok(i.hasBackupSync(a)),s.dispose()}),test("untitled file (readable)",async()=>{const a=p(S),o=n(u,a.resource.scheme,h(a)),s=T("test");await i.backup(a,W(s.createSnapshot())),t.strictEqual((await r.resolve(n(u,"untitled"))).children?.length,1),t.strictEqual(await r.exists(o),!0),t.strictEqual((await r.readFile(o)).value.toString(),e(a,"test")),s.dispose()}),test("text file (large file, stream)",()=>{const a=new Array(30720).join(`Large String
`);return c(a,tt(f.fromString(a)))}),test("text file (large file, readable)",async()=>{const a=new Array(30720).join(`Large String
`),o=T(a);await c(a,W(o.createSnapshot())),o.dispose()});async function c(a,o){const s=p(d),l=n(u,s.resource.scheme,h(s));await i.backup(s,o,void 0,{largeTest:!0}),t.strictEqual((await r.resolve(n(u,"file"))).children?.length,1),t.strictEqual(await r.exists(l),!0),t.strictEqual((await r.readFile(l)).value.toString(),e(s,a,{largeTest:!0})),t.ok(i.hasBackupSync(s))}test("untitled file (large file, readable)",async()=>{const a=p(S),o=n(u,a.resource.scheme,h(a)),s=new Array(30*1024).join(`Large String
`),l=T(s);await i.backup(a,W(l.createSnapshot())),t.strictEqual((await r.resolve(n(u,"untitled"))).children?.length,1),t.strictEqual(await r.exists(o),!0),t.strictEqual((await r.readFile(o)).value.toString(),e(a,s)),t.ok(i.hasBackupSync(a)),l.dispose()}),test("cancellation",async()=>{const a=p(d),o=n(u,a.resource.scheme,h(a)),s=new at,l=i.backup(a,void 0,void 0,void 0,s.token);s.cancel(),await l,t.strictEqual(await r.exists(o),!1),t.ok(!i.hasBackupSync(a))}),test("multiple",async()=>{const a=p(d),o=n(u,a.resource.scheme,h(a));await Promise.all([i.backup(a),i.backup(a),i.backup(a),i.backup(a)]),t.strictEqual((await r.resolve(n(u,"file"))).children?.length,1),t.strictEqual(await r.exists(o),!0),t.strictEqual((await r.readFile(o)).value.toString(),e(a)),t.ok(i.hasBackupSync(a))}),test("multiple same resource, different type id",async()=>{const a=p(d),o=q(d,"type1"),s=q(d,"type2");await Promise.all([i.backup(a),i.backup(o),i.backup(s)]),t.strictEqual((await r.resolve(n(u,"file"))).children?.length,3);for(const l of[a,o,s]){const m=n(u,l.resource.scheme,h(l));t.strictEqual(await r.exists(m),!0),t.strictEqual((await r.readFile(m)).value.toString(),e(l)),t.ok(i.hasBackupSync(l))}})}),suite("discardBackup",()=>{test("joining",async()=>{const e=p(d),c=n(u,e.resource.scheme,h(e));await i.backup(e,k(f.fromString("test"))),t.strictEqual((await r.resolve(n(u,"file"))).children?.length,1),t.ok(i.hasBackupSync(e));let a=!1;i.joinBackups().then(()=>a=!0);const o=i.discardBackup(e);t.strictEqual(a,!1),await o,t.strictEqual(a,!0),t.strictEqual(await r.exists(c),!1),t.strictEqual((await r.resolve(n(u,"file"))).children?.length,0),t.ok(!i.hasBackupSync(e))}),test("text file",async()=>{const e=p(d),c=n(u,e.resource.scheme,h(e));await i.backup(e,k(f.fromString("test"))),t.strictEqual((await r.resolve(n(u,"file"))).children?.length,1),t.ok(i.hasBackupSync(e)),await i.discardBackup(e),t.strictEqual(await r.exists(c),!1),t.strictEqual((await r.resolve(n(u,"file"))).children?.length,0),t.ok(!i.hasBackupSync(e))}),test("untitled file",async()=>{const e=p(S),c=n(u,e.resource.scheme,h(e));await i.backup(e,k(f.fromString("test"))),t.strictEqual((await r.resolve(n(u,"untitled"))).children?.length,1),await i.discardBackup(e),t.strictEqual(await r.exists(c),!1),t.strictEqual((await r.resolve(n(u,"untitled"))).children?.length,0)}),test("multiple same resource, different type id",async()=>{const e=p(d),c=q(d,"type1"),a=q(d,"type2");await Promise.all([i.backup(e),i.backup(c),i.backup(a)]),t.strictEqual((await r.resolve(n(u,"file"))).children?.length,3);for(const o of[e,c,a]){const s=n(u,o.resource.scheme,h(o));await i.discardBackup(o),t.strictEqual(await r.exists(s),!1)}t.strictEqual((await r.resolve(n(u,"file"))).children?.length,0)})}),suite("discardBackups (all)",()=>{test("text file",async()=>{const e=p(d),c=p(C),a=q(C);await i.backup(e,k(f.fromString("test"))),t.strictEqual((await r.resolve(n(u,"file"))).children?.length,1),await i.backup(c,k(f.fromString("test"))),t.strictEqual((await r.resolve(n(u,"file"))).children?.length,2),await i.backup(a,k(f.fromString("test"))),t.strictEqual((await r.resolve(n(u,"file"))).children?.length,3),await i.discardBackups();for(const o of[e,c,a]){const s=n(u,o.resource.scheme,h(o));t.strictEqual(await r.exists(s),!1)}t.strictEqual(await r.exists(n(u,"file")),!1)}),test("untitled file",async()=>{const e=p(S),c=n(u,e.resource.scheme,h(e));await i.backup(e,k(f.fromString("test"))),t.strictEqual((await r.resolve(n(u,"untitled"))).children?.length,1),await i.discardBackups(),t.strictEqual(await r.exists(c),!1),t.strictEqual(await r.exists(n(u,"untitled")),!1)}),test("can backup after discarding all",async()=>{await i.discardBackups(),await i.backup(p(S),k(f.fromString("test"))),t.strictEqual(await r.exists(u),!0)})}),suite("discardBackups (except some)",()=>{test("text file",async()=>{const e=p(d),c=p(C),a=q(C);await i.backup(e,k(f.fromString("test"))),t.strictEqual((await r.resolve(n(u,"file"))).children?.length,1),await i.backup(c,k(f.fromString("test"))),t.strictEqual((await r.resolve(n(u,"file"))).children?.length,2),await i.backup(a,k(f.fromString("test"))),t.strictEqual((await r.resolve(n(u,"file"))).children?.length,3),await i.discardBackups({except:[c,a]});let o=n(u,e.resource.scheme,h(e));t.strictEqual(await r.exists(o),!1),o=n(u,c.resource.scheme,h(c)),t.strictEqual(await r.exists(o),!0),o=n(u,a.resource.scheme,h(a)),t.strictEqual(await r.exists(o),!0),await i.discardBackups({except:[e]});for(const s of[e,c,a]){const l=n(u,s.resource.scheme,h(s));t.strictEqual(await r.exists(l),!1)}}),test("untitled file",async()=>{const e=p(S),c=n(u,e.resource.scheme,h(e));await i.backup(e,k(f.fromString("test"))),t.strictEqual(await r.exists(c),!0),t.strictEqual((await r.resolve(n(u,"untitled"))).children?.length,1),await i.discardBackups({except:[e]}),t.strictEqual(await r.exists(c),!0)})}),suite("getBackups",()=>{test("text file",async()=>{await Promise.all([i.backup(p(d),k(f.fromString("test"))),i.backup(q(d,"type1"),k(f.fromString("test"))),i.backup(q(d,"type2"),k(f.fromString("test")))]);let e=await i.getBackups();t.strictEqual(e.length,3);for(const c of e)c.typeId===""?t.strictEqual(c.resource.toString(),d.toString()):c.typeId==="type1"?t.strictEqual(c.resource.toString(),d.toString()):c.typeId==="type2"?t.strictEqual(c.resource.toString(),d.toString()):t.fail("Unexpected backup");await i.backup(p(C),k(f.fromString("test"))),e=await i.getBackups(),t.strictEqual(e.length,4)}),test("untitled file",async()=>{await Promise.all([i.backup(p(S),k(f.fromString("test"))),i.backup(q(S,"type1"),k(f.fromString("test"))),i.backup(q(S,"type2"),k(f.fromString("test")))]);const e=await i.getBackups();t.strictEqual(e.length,3);for(const c of e)c.typeId===""?t.strictEqual(c.resource.toString(),S.toString()):c.typeId==="type1"?t.strictEqual(c.resource.toString(),S.toString()):c.typeId==="type2"?t.strictEqual(c.resource.toString(),S.toString()):t.fail("Unexpected backup")})}),suite("resolve",()=>{test("should restore the original contents (untitled file)",async()=>{await e(S,`test
and more stuff`)}),test("should restore the original contents (untitled file with metadata)",async()=>{const s=`test
and more stuff`,l={etag:"the Etag",size:666,mtime:Date.now(),orphaned:!0};await e(S,s,l)}),test("should restore the original contents (untitled file empty with metadata)",async()=>{const s="",l={etag:"the Etag",size:666,mtime:Date.now(),orphaned:!0};await e(S,s,l)}),test("should restore the original contents (untitled large file with metadata)",async()=>{const s=new Array(30720).join(`Large String
`),l={etag:"the Etag",size:666,mtime:Date.now(),orphaned:!0};await e(S,s,l)}),test("should restore the original contents (text file)",async()=>{const s=["Lorem ipsum ","dolor \xF6\xE4\xFC sit amet ","consectetur ","adipiscing \xDF\xDF elit"].join("");await e(d,s)}),test("should restore the original contents (text file - custom scheme)",async()=>{const s=["Lorem ipsum ","dolor \xF6\xE4\xFC sit amet ","consectetur ","adipiscing \xDF\xDF elit"].join("");await e(v,s)}),test("should restore the original contents (text file with metadata)",async()=>{const s=["Lorem ipsum ","dolor \xF6\xE4\xFC sit amet ","adipiscing \xDF\xDF elit","consectetur "].join(""),l={etag:"theEtag",size:888,mtime:Date.now(),orphaned:!1};await e(d,s,l)}),test("should restore the original contents (empty text file with metadata)",async()=>{const s="",l={etag:"theEtag",size:888,mtime:Date.now(),orphaned:!1};await e(d,s,l)}),test("should restore the original contents (large text file with metadata)",async()=>{const s=new Array(30720).join(`Large String
`),l={etag:"theEtag",size:888,mtime:Date.now(),orphaned:!1};await e(d,s,l)}),test("should restore the original contents (text file with metadata changed once)",async()=>{const s=["Lorem ipsum ","dolor \xF6\xE4\xFC sit amet ","adipiscing \xDF\xDF elit","consectetur "].join(""),l={etag:"theEtag",size:888,mtime:Date.now(),orphaned:!1};await e(d,s,l),l.size=999,await e(d,s,l)}),test("should restore the original contents (text file with metadata and fragment URI)",async()=>{const s=["Lorem ipsum ","dolor \xF6\xE4\xFC sit amet ","adipiscing \xDF\xDF elit","consectetur "].join(""),l={etag:"theEtag",size:888,mtime:Date.now(),orphaned:!1};await e(A,s,l)}),test("should restore the original contents (text file with space in name with metadata)",async()=>{const s=["Lorem ipsum ","dolor \xF6\xE4\xFC sit amet ","adipiscing \xDF\xDF elit","consectetur "].join(""),l={etag:"theEtag",size:888,mtime:Date.now(),orphaned:!1};await e(N,s,l)}),test("should restore the original contents (text file with too large metadata to persist)",async()=>{const s=["Lorem ipsum ","dolor \xF6\xE4\xFC sit amet ","adipiscing \xDF\xDF elit","consectetur "].join(""),l={etag:new Array(100*1024).join("Large String"),size:888,mtime:Date.now(),orphaned:!1};await e(d,s,l,!0)});async function e(s,l,m,g){await c(p(s),l,m,g),await c(q(s),l,m,g)}async function c(s,l,m,g){await i.backup(s,k(f.fromString(l)),1,m);const y=await i.resolve(s);t.ok(y),t.strictEqual(l,(await z(y.value)).toString()),g||!m?t.strictEqual(y.meta,void 0):(t.ok(y.meta),t.strictEqual(y.meta.etag,m.etag),t.strictEqual(y.meta.size,m.size),t.strictEqual(y.meta.mtime,m.mtime),t.strictEqual(y.meta.orphaned,m.orphaned),t.strictEqual(Object.keys(m).length,Object.keys(y.meta).length))}test("should restore the original contents (text file with broken metadata)",async()=>{await a(p(d)),await a(q(d))});async function a(s){const l=["Lorem ipsum ","dolor \xF6\xE4\xFC sit amet ","adipiscing \xDF\xDF elit","consectetur "].join(""),m={etag:"theEtag",size:888,mtime:Date.now(),orphaned:!1};await i.backup(s,k(f.fromString(l)),1,m);const g=n(u,s.resource.scheme,h(s)),y=(await r.readFile(g)).value.toString();t.strictEqual(y.indexOf(s.resource.toString()),0);const j=y.indexOf("{"),$=y.substring(0,j)+"{{"+y.substr(j);await r.writeFile(g,f.fromString($));const L=await i.resolve(s);t.ok(L),t.strictEqual(l,(await z(L.value)).toString()),t.strictEqual(L.meta,void 0)}test("should update metadata from file into model when resolving",async()=>{await o(p(d)),await o(q(d))});async function o(s){const l="Foo Bar",m={etag:"theEtagForThisMetadataTest",size:888,mtime:Date.now(),orphaned:!1},g={...m,etag:m.etag+m.etag};await i.backup(s,k(f.fromString(l)),1,m);const y=n(u,s.resource.scheme,h(s)),j=(await r.readFile(y)).value.toString();await r.writeFile(y,f.fromString(j.replace(m.etag,g.etag))),await i.resolve(s),t.strictEqual(i.hasBackupSync(s,void 0,m),!1),t.strictEqual(i.hasBackupSync(s,void 0,g),!0),await r.writeFile(y,f.fromString(j)),await i.getBackups(),t.strictEqual(i.hasBackupSync(s,void 0,m),!0),t.strictEqual(i.hasBackupSync(s,void 0,g),!1)}test("should ignore invalid backups (empty file)",async()=>{await i.backup(p(d),k(f.fromString(`test
and more stuff`)),1);let l=await i.resolve(p(d));t.ok(l),await i.testGetFileService().writeFile(i.toBackupResource(p(d)),f.fromString("")),l=await i.resolve(p(d)),t.ok(!l)}),test("should ignore invalid backups (no preamble)",async()=>{const s="testand more stuff";await i.backup(p(d),k(f.fromString(s)),1);let l=await i.resolve(p(d));t.ok(l),await i.testGetFileService().writeFile(i.toBackupResource(p(d)),f.fromString(s)),l=await i.resolve(p(d)),t.ok(!l)}),test("file with binary data",async()=>{const s=p(d),l=Uint8Array.from([137,80,78,71,13,10,26,10,0,0,0,13,73,72,68,82,0,0,0,73,0,0,0,67,8,2,0,0,0,95,138,191,237,0,0,0,1,115,82,71,66,0,174,206,28,233,0,0,0,4,103,65,77,65,0,0,177,143,11,252,97,5,0,0,0,9,112,72,89,115,0,0,14,195,0,0,14,195,1,199,111,168,100,0,0,0,71,116,69,88,116,83,111,117,114,99,101,0,83,104,111,116,116,121,32,118,50,46,48,46,50,46,50,49,54,32,40,67,41,32,84,104,111,109,97,115,32,66,97,117,109,97,110,110,32,45,32,104,116,116,112,58,47,47,115,104,111,116,116,121,46,100,101,118,115,45,111,110,46,110,101,116,44,132,21,213,0,0,0,84,73,68,65,84,120,218,237,207,65,17,0,0,12,2,32,211,217,63,146,37,246,218,65,3,210,191,226,230,230,230,230,230,230,230,230,230,230,230,230,230,230,230,230,230,230,230,230,230,230,230,230,230,230,230,230,230,230,230,230,230,230,230,230,230,230,230,230,230,230,230,230,230,230,230,230,230,230,230,230,230,230,230,118,100,169,4,173,8,44,248,184,40,0,0,0,0,73,69,78,68,174,66,96,130]);await i.backup(s,k(f.wrap(l)),void 0,{binaryTest:"true"});const m=await i.resolve(p(d));t.ok(m);const g=await st(m.value,y=>f.concat(y));t.strictEqual(g.buffer.byteLength,l.byteLength)})}),suite("WorkingCopyBackupsModel",()=>{test("simple",async()=>{const e=await M.create(u,i.testGetFileService()),c=b.file("test.html");t.strictEqual(e.has(c),!1),e.add(c),t.strictEqual(e.has(c),!0),t.strictEqual(e.has(c,0),!0),t.strictEqual(e.has(c,1),!1),t.strictEqual(e.has(c,1,{foo:"bar"}),!1),e.remove(c),t.strictEqual(e.has(c),!1),e.add(c),t.strictEqual(e.has(c),!0),t.strictEqual(e.has(c,0),!0),t.strictEqual(e.has(c,1),!1),e.clear(),t.strictEqual(e.has(c),!1),e.add(c,1),t.strictEqual(e.has(c),!0),t.strictEqual(e.has(c,0),!1),t.strictEqual(e.has(c,1),!0);const a=b.file("test1.html"),o=b.file("test2.html"),s=b.file("test3.html");e.add(a),e.add(o),e.add(s,void 0,{foo:"bar"}),t.strictEqual(e.has(c),!0),t.strictEqual(e.has(a),!0),t.strictEqual(e.has(o),!0),t.strictEqual(e.has(s),!0),t.strictEqual(e.has(s,void 0,{foo:"bar"}),!0),t.strictEqual(e.has(s,void 0,{bar:"foo"}),!1),e.update(s,{foo:"nothing"}),t.strictEqual(e.has(s,void 0,{foo:"nothing"}),!0),t.strictEqual(e.has(s,void 0,{foo:"bar"}),!1),e.update(s),t.strictEqual(e.has(s),!0),t.strictEqual(e.has(s,void 0,{foo:"nothing"}),!1)}),test("create",async()=>{const e=n(u,d.scheme,h(p(d)));await r.createFolder(V(e)),await r.writeFile(e,f.fromString("foo"));const c=await M.create(u,i.testGetFileService());t.strictEqual(c.has(e),!0)}),test("get",async()=>{const e=await M.create(u,i.testGetFileService());t.deepStrictEqual(e.get(),[]);const c=b.file("/root/file/foo.html"),a=b.file("/root/file/bar.html"),o=b.file("/root/untitled/bar.html");e.add(c),e.add(a),e.add(o),t.deepStrictEqual(e.get().map(s=>s.fsPath),[c.fsPath,a.fsPath,o.fsPath])})}),suite("typeId migration",()=>{test("works (when meta is missing)",async()=>{const e=p(d),c=p(S),a=p(v),o=n(u,d.scheme,h(e)),s=n(u,S.scheme,h(c)),l=n(u,v.scheme,h(a));await r.createFolder(n(u,d.scheme)),await r.createFolder(n(u,S.scheme)),await r.createFolder(n(u,v.scheme)),await r.writeFile(o,f.fromString(`${d.toString()}
test file`)),await r.writeFile(s,f.fromString(`${S.toString()}
test untitled`)),await r.writeFile(l,f.fromString(`${v.toString()}
test custom`)),i.reinitialize(u);const m=await i.getBackups();t.strictEqual(m.length,3),t.ok(m.some(g=>D(g.resource,d))),t.ok(m.some(g=>D(g.resource,S))),t.ok(m.some(g=>D(g.resource,v))),t.ok(m.every(g=>g.typeId===""))}),test("works (when typeId in meta is missing)",async()=>{const e=p(d),c=p(S),a=p(v),o=n(u,d.scheme,h(e)),s=n(u,S.scheme,h(c)),l=n(u,v.scheme,h(a));await r.createFolder(n(u,d.scheme)),await r.createFolder(n(u,S.scheme)),await r.createFolder(n(u,v.scheme)),await r.writeFile(o,f.fromString(`${d.toString()} ${JSON.stringify({foo:"bar"})}
test file`)),await r.writeFile(s,f.fromString(`${S.toString()} ${JSON.stringify({foo:"bar"})}
test untitled`)),await r.writeFile(l,f.fromString(`${v.toString()} ${JSON.stringify({foo:"bar"})}
test custom`)),i.reinitialize(u);const m=await i.getBackups();t.strictEqual(m.length,3),t.ok(m.some(g=>D(g.resource,d))),t.ok(m.some(g=>D(g.resource,S))),t.ok(m.some(g=>D(g.resource,v))),t.ok(m.every(g=>g.typeId===""))})}),ot()});export{ft as NodeTestWorkingCopyBackupService,ht as TestNativeWorkbenchEnvironmentService};
