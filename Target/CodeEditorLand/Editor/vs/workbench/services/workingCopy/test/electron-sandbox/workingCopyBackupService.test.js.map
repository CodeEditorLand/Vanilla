{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/workingCopy/test/electron-sandbox/workingCopyBackupService.test.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport assert from 'assert';\nimport { isWindows } from '../../../../../base/common/platform.js';\nimport { insert } from '../../../../../base/common/arrays.js';\nimport { hash } from '../../../../../base/common/hash.js';\nimport { isEqual, joinPath, dirname } from '../../../../../base/common/resources.js';\nimport { join } from '../../../../../base/common/path.js';\nimport { URI } from '../../../../../base/common/uri.js';\nimport { WorkingCopyBackupsModel, hashIdentifier } from '../../common/workingCopyBackupService.js';\nimport { createTextModel } from '../../../../../editor/test/common/testTextModel.js';\nimport { Schemas } from '../../../../../base/common/network.js';\nimport { FileService } from '../../../../../platform/files/common/fileService.js';\nimport { LogLevel, NullLogService } from '../../../../../platform/log/common/log.js';\nimport { NativeWorkbenchEnvironmentService } from '../../../environment/electron-sandbox/environmentService.js';\nimport { toBufferOrReadable } from '../../../textfile/common/textfiles.js';\nimport { IFileService } from '../../../../../platform/files/common/files.js';\nimport { NativeWorkingCopyBackupService } from '../../electron-sandbox/workingCopyBackupService.js';\nimport { FileUserDataProvider } from '../../../../../platform/userData/common/fileUserDataProvider.js';\nimport { bufferToReadable, bufferToStream, streamToBuffer, VSBuffer, VSBufferReadable, VSBufferReadableStream } from '../../../../../base/common/buffer.js';\nimport { TestLifecycleService, toTypedWorkingCopyId, toUntypedWorkingCopyId } from '../../../../test/browser/workbenchTestServices.js';\nimport { CancellationToken, CancellationTokenSource } from '../../../../../base/common/cancellation.js';\nimport { IWorkingCopyBackupMeta, IWorkingCopyIdentifier } from '../../common/workingCopy.js';\nimport { consumeStream } from '../../../../../base/common/stream.js';\nimport { TestProductService } from '../../../../test/common/workbenchTestServices.js';\nimport { InMemoryFileSystemProvider } from '../../../../../platform/files/common/inMemoryFilesystemProvider.js';\nimport { generateUuid } from '../../../../../base/common/uuid.js';\nimport { INativeWindowConfiguration } from '../../../../../platform/window/common/window.js';\nimport product from '../../../../../platform/product/common/product.js';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from '../../../../../base/test/common/utils.js';\nimport { DisposableStore } from '../../../../../base/common/lifecycle.js';\nimport { UserDataProfilesService } from '../../../../../platform/userDataProfile/common/userDataProfile.js';\nimport { UriIdentityService } from '../../../../../platform/uriIdentity/common/uriIdentityService.js';\n\nconst homeDir = URI.file('home').with({ scheme: Schemas.inMemory });\nconst tmpDir = URI.file('tmp').with({ scheme: Schemas.inMemory });\nconst NULL_PROFILE = {\n\tname: '',\n\tid: '',\n\tshortName: '',\n\tisDefault: false,\n\tlocation: homeDir,\n\tsettingsResource: joinPath(homeDir, 'settings.json'),\n\tglobalStorageHome: joinPath(homeDir, 'globalStorage'),\n\tkeybindingsResource: joinPath(homeDir, 'keybindings.json'),\n\ttasksResource: joinPath(homeDir, 'tasks.json'),\n\tsnippetsHome: joinPath(homeDir, 'snippets'),\n\textensionsResource: joinPath(homeDir, 'extensions.json'),\n\tcacheHome: joinPath(homeDir, 'cache')\n};\n\nconst TestNativeWindowConfiguration: INativeWindowConfiguration = {\n\twindowId: 0,\n\tmachineId: 'testMachineId',\n\tsqmId: 'testSqmId',\n\tdevDeviceId: 'testdevDeviceId',\n\tlogLevel: LogLevel.Error,\n\tloggers: { global: [], window: [] },\n\tmainPid: 0,\n\tappRoot: '',\n\tuserEnv: {},\n\texecPath: process.execPath,\n\tperfMarks: [],\n\tcolorScheme: { dark: true, highContrast: false },\n\tos: { release: 'unknown', hostname: 'unknown', arch: 'unknown' },\n\tproduct,\n\thomeDir: homeDir.fsPath,\n\ttmpDir: tmpDir.fsPath,\n\tuserDataDir: joinPath(homeDir, product.nameShort).fsPath,\n\tprofiles: { profile: NULL_PROFILE, all: [NULL_PROFILE], home: homeDir },\n\tnls: {\n\t\tmessages: [],\n\t\tlanguage: 'en'\n\t},\n\t_: []\n};\n\nexport class TestNativeWorkbenchEnvironmentService extends NativeWorkbenchEnvironmentService {\n\n\tconstructor(testDir: URI, backupPath: URI) {\n\t\tsuper({ ...TestNativeWindowConfiguration, backupPath: backupPath.fsPath, 'user-data-dir': testDir.fsPath }, TestProductService);\n\t}\n}\n\nexport class NodeTestWorkingCopyBackupService extends NativeWorkingCopyBackupService {\n\n\tprivate backupResourceJoiners: Function[];\n\tprivate discardBackupJoiners: Function[];\n\tdiscardedBackups: IWorkingCopyIdentifier[];\n\tdiscardedAllBackups: boolean;\n\tprivate pendingBackupsArr: Promise<void>[];\n\n\treadonly _fileService: IFileService;\n\n\tconstructor(testDir: URI, workspaceBackupPath: URI) {\n\t\tconst environmentService = new TestNativeWorkbenchEnvironmentService(testDir, workspaceBackupPath);\n\t\tconst logService = new NullLogService();\n\t\tconst fileService = new FileService(logService);\n\t\tconst lifecycleService = new TestLifecycleService();\n\t\tsuper(environmentService, fileService, logService, lifecycleService);\n\n\t\tconst fsp = new InMemoryFileSystemProvider();\n\t\tfileService.registerProvider(Schemas.inMemory, fsp);\n\t\tconst uriIdentityService = new UriIdentityService(fileService);\n\t\tconst userDataProfilesService = new UserDataProfilesService(environmentService, fileService, uriIdentityService, logService);\n\t\tfileService.registerProvider(Schemas.vscodeUserData, new FileUserDataProvider(Schemas.file, fsp, Schemas.vscodeUserData, userDataProfilesService, uriIdentityService, logService));\n\n\t\tthis._fileService = fileService;\n\n\t\tthis.backupResourceJoiners = [];\n\t\tthis.discardBackupJoiners = [];\n\t\tthis.discardedBackups = [];\n\t\tthis.pendingBackupsArr = [];\n\t\tthis.discardedAllBackups = false;\n\t}\n\n\ttestGetFileService(): IFileService {\n\t\treturn this.fileService;\n\t}\n\n\tasync waitForAllBackups(): Promise<void> {\n\t\tawait Promise.all(this.pendingBackupsArr);\n\t}\n\n\tjoinBackupResource(): Promise<void> {\n\t\treturn new Promise(resolve => this.backupResourceJoiners.push(resolve));\n\t}\n\n\toverride async backup(identifier: IWorkingCopyIdentifier, content?: VSBufferReadableStream | VSBufferReadable, versionId?: number, meta?: any, token?: CancellationToken): Promise<void> {\n\t\tconst p = super.backup(identifier, content, versionId, meta, token);\n\t\tconst removeFromPendingBackups = insert(this.pendingBackupsArr, p.then(undefined, undefined));\n\n\t\ttry {\n\t\t\tawait p;\n\t\t} finally {\n\t\t\tremoveFromPendingBackups();\n\t\t}\n\n\t\twhile (this.backupResourceJoiners.length) {\n\t\t\tthis.backupResourceJoiners.pop()!();\n\t\t}\n\t}\n\n\tjoinDiscardBackup(): Promise<void> {\n\t\treturn new Promise(resolve => this.discardBackupJoiners.push(resolve));\n\t}\n\n\toverride async discardBackup(identifier: IWorkingCopyIdentifier): Promise<void> {\n\t\tawait super.discardBackup(identifier);\n\t\tthis.discardedBackups.push(identifier);\n\n\t\twhile (this.discardBackupJoiners.length) {\n\t\t\tthis.discardBackupJoiners.pop()!();\n\t\t}\n\t}\n\n\toverride async discardBackups(filter?: { except: IWorkingCopyIdentifier[] }): Promise<void> {\n\t\tthis.discardedAllBackups = true;\n\n\t\treturn super.discardBackups(filter);\n\t}\n\n\tasync getBackupContents(identifier: IWorkingCopyIdentifier): Promise<string> {\n\t\tconst backupResource = this.toBackupResource(identifier);\n\n\t\tconst fileContents = await this.fileService.readFile(backupResource);\n\n\t\treturn fileContents.value.toString();\n\t}\n}\n\nsuite('WorkingCopyBackupService', () => {\n\n\tlet testDir: URI;\n\tlet backupHome: URI;\n\tlet workspacesJsonPath: URI;\n\tlet workspaceBackupPath: URI;\n\n\tlet service: NodeTestWorkingCopyBackupService;\n\tlet fileService: IFileService;\n\n\tconst disposables = new DisposableStore();\n\n\tconst workspaceResource = URI.file(isWindows ? 'c:\\\\workspace' : '/workspace');\n\tconst fooFile = URI.file(isWindows ? 'c:\\\\Foo' : '/Foo');\n\tconst customFile = URI.parse('customScheme://some/path');\n\tconst customFileWithFragment = URI.parse('customScheme2://some/path#fragment');\n\tconst barFile = URI.file(isWindows ? 'c:\\\\Bar' : '/Bar');\n\tconst fooBarFile = URI.file(isWindows ? 'c:\\\\Foo Bar' : '/Foo Bar');\n\tconst untitledFile = URI.from({ scheme: Schemas.untitled, path: 'Untitled-1' });\n\n\tsetup(async () => {\n\t\ttestDir = URI.file(join(generateUuid(), 'vsctests', 'workingcopybackupservice')).with({ scheme: Schemas.inMemory });\n\t\tbackupHome = joinPath(testDir, 'Backups');\n\t\tworkspacesJsonPath = joinPath(backupHome, 'workspaces.json');\n\t\tworkspaceBackupPath = joinPath(backupHome, hash(workspaceResource.fsPath).toString(16));\n\n\t\tservice = disposables.add(new NodeTestWorkingCopyBackupService(testDir, workspaceBackupPath));\n\t\tfileService = service._fileService;\n\n\t\tawait fileService.createFolder(backupHome);\n\n\t\treturn fileService.writeFile(workspacesJsonPath, VSBuffer.fromString(''));\n\t});\n\n\tteardown(() => {\n\t\tdisposables.clear();\n\t});\n\n\tsuite('hashIdentifier', () => {\n\t\ttest('should correctly hash the identifier for untitled scheme URIs', () => {\n\t\t\tconst uri = URI.from({ scheme: Schemas.untitled, path: 'Untitled-1' });\n\n\t\t\t// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n\t\t\t// If these hashes change people will lose their backed up files\n\t\t\t// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n\n\t\t\tconst untypedBackupHash = hashIdentifier(toUntypedWorkingCopyId(uri));\n\t\t\tassert.strictEqual(untypedBackupHash, '-7f9c1a2e');\n\t\t\tassert.strictEqual(untypedBackupHash, hash(uri.fsPath).toString(16));\n\n\t\t\tconst typedBackupHash = hashIdentifier({ typeId: 'hashTest', resource: uri });\n\t\t\tif (isWindows) {\n\t\t\t\tassert.strictEqual(typedBackupHash, '-17c47cdc');\n\t\t\t} else {\n\t\t\t\tassert.strictEqual(typedBackupHash, '-8ad5f4f');\n\t\t\t}\n\n\t\t\t// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n\t\t\t// If these hashes collide people will lose their backed up files\n\t\t\t// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n\n\t\t\tassert.notStrictEqual(untypedBackupHash, typedBackupHash);\n\t\t});\n\n\t\ttest('should correctly hash the identifier for file scheme URIs', () => {\n\t\t\tconst uri = URI.file('/foo');\n\n\t\t\t// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n\t\t\t// If these hashes change people will lose their backed up files\n\t\t\t// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n\n\t\t\tconst untypedBackupHash = hashIdentifier(toUntypedWorkingCopyId(uri));\n\t\t\tif (isWindows) {\n\t\t\t\tassert.strictEqual(untypedBackupHash, '20ffaa13');\n\t\t\t} else {\n\t\t\t\tassert.strictEqual(untypedBackupHash, '20eb3560');\n\t\t\t}\n\t\t\tassert.strictEqual(untypedBackupHash, hash(uri.fsPath).toString(16));\n\n\t\t\tconst typedBackupHash = hashIdentifier({ typeId: 'hashTest', resource: uri });\n\t\t\tif (isWindows) {\n\t\t\t\tassert.strictEqual(typedBackupHash, '-55fc55db');\n\t\t\t} else {\n\t\t\t\tassert.strictEqual(typedBackupHash, '51e56bf');\n\t\t\t}\n\n\t\t\t// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n\t\t\t// If these hashes collide people will lose their backed up files\n\t\t\t// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n\n\t\t\tassert.notStrictEqual(untypedBackupHash, typedBackupHash);\n\t\t});\n\n\t\ttest('should correctly hash the identifier for custom scheme URIs', () => {\n\t\t\tconst uri = URI.from({\n\t\t\t\tscheme: 'vscode-custom',\n\t\t\t\tpath: 'somePath'\n\t\t\t});\n\n\t\t\t// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n\t\t\t// If these hashes change people will lose their backed up files\n\t\t\t// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n\n\t\t\tconst untypedBackupHash = hashIdentifier(toUntypedWorkingCopyId(uri));\n\t\t\tassert.strictEqual(untypedBackupHash, '-44972d98');\n\t\t\tassert.strictEqual(untypedBackupHash, hash(uri.toString()).toString(16));\n\n\t\t\tconst typedBackupHash = hashIdentifier({ typeId: 'hashTest', resource: uri });\n\t\t\tassert.strictEqual(typedBackupHash, '502149c7');\n\n\t\t\t// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n\t\t\t// If these hashes collide people will lose their backed up files\n\t\t\t// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n\n\t\t\tassert.notStrictEqual(untypedBackupHash, typedBackupHash);\n\t\t});\n\n\t\ttest('should not fail for URIs without path', () => {\n\t\t\tconst uri = URI.from({\n\t\t\t\tscheme: 'vscode-fragment',\n\t\t\t\tfragment: 'frag'\n\t\t\t});\n\n\t\t\t// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n\t\t\t// If these hashes change people will lose their backed up files\n\t\t\t// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n\n\t\t\tconst untypedBackupHash = hashIdentifier(toUntypedWorkingCopyId(uri));\n\t\t\tassert.strictEqual(untypedBackupHash, '-2f6b2f1b');\n\t\t\tassert.strictEqual(untypedBackupHash, hash(uri.toString()).toString(16));\n\n\t\t\tconst typedBackupHash = hashIdentifier({ typeId: 'hashTest', resource: uri });\n\t\t\tassert.strictEqual(typedBackupHash, '6e82ca57');\n\n\t\t\t// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n\t\t\t// If these hashes collide people will lose their backed up files\n\t\t\t// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n\n\t\t\tassert.notStrictEqual(untypedBackupHash, typedBackupHash);\n\t\t});\n\t});\n\n\tsuite('getBackupResource', () => {\n\t\ttest('should get the correct backup path for text files', () => {\n\n\t\t\t// Format should be: <backupHome>/<workspaceHash>/<scheme>/<filePathHash>\n\t\t\tconst backupResource = fooFile;\n\t\t\tconst workspaceHash = hash(workspaceResource.fsPath).toString(16);\n\n\t\t\t// No Type ID\n\t\t\tlet backupId = toUntypedWorkingCopyId(backupResource);\n\t\t\tlet filePathHash = hashIdentifier(backupId);\n\t\t\tlet expectedPath = joinPath(backupHome, workspaceHash, Schemas.file, filePathHash).with({ scheme: Schemas.vscodeUserData }).toString();\n\t\t\tassert.strictEqual(service.toBackupResource(backupId).toString(), expectedPath);\n\n\t\t\t// With Type ID\n\t\t\tbackupId = toTypedWorkingCopyId(backupResource);\n\t\t\tfilePathHash = hashIdentifier(backupId);\n\t\t\texpectedPath = joinPath(backupHome, workspaceHash, Schemas.file, filePathHash).with({ scheme: Schemas.vscodeUserData }).toString();\n\t\t\tassert.strictEqual(service.toBackupResource(backupId).toString(), expectedPath);\n\t\t});\n\n\t\ttest('should get the correct backup path for untitled files', () => {\n\n\t\t\t// Format should be: <backupHome>/<workspaceHash>/<scheme>/<filePathHash>\n\t\t\tconst backupResource = URI.from({ scheme: Schemas.untitled, path: 'Untitled-1' });\n\t\t\tconst workspaceHash = hash(workspaceResource.fsPath).toString(16);\n\n\t\t\t// No Type ID\n\t\t\tlet backupId = toUntypedWorkingCopyId(backupResource);\n\t\t\tlet filePathHash = hashIdentifier(backupId);\n\t\t\tlet expectedPath = joinPath(backupHome, workspaceHash, Schemas.untitled, filePathHash).with({ scheme: Schemas.vscodeUserData }).toString();\n\t\t\tassert.strictEqual(service.toBackupResource(backupId).toString(), expectedPath);\n\n\t\t\t// With Type ID\n\t\t\tbackupId = toTypedWorkingCopyId(backupResource);\n\t\t\tfilePathHash = hashIdentifier(backupId);\n\t\t\texpectedPath = joinPath(backupHome, workspaceHash, Schemas.untitled, filePathHash).with({ scheme: Schemas.vscodeUserData }).toString();\n\t\t\tassert.strictEqual(service.toBackupResource(backupId).toString(), expectedPath);\n\t\t});\n\n\t\ttest('should get the correct backup path for custom files', () => {\n\n\t\t\t// Format should be: <backupHome>/<workspaceHash>/<scheme>/<filePathHash>\n\t\t\tconst backupResource = URI.from({ scheme: 'custom', path: 'custom/file.txt' });\n\t\t\tconst workspaceHash = hash(workspaceResource.fsPath).toString(16);\n\n\t\t\t// No Type ID\n\t\t\tlet backupId = toUntypedWorkingCopyId(backupResource);\n\t\t\tlet filePathHash = hashIdentifier(backupId);\n\t\t\tlet expectedPath = joinPath(backupHome, workspaceHash, 'custom', filePathHash).with({ scheme: Schemas.vscodeUserData }).toString();\n\t\t\tassert.strictEqual(service.toBackupResource(backupId).toString(), expectedPath);\n\n\t\t\t// With Type ID\n\t\t\tbackupId = toTypedWorkingCopyId(backupResource);\n\t\t\tfilePathHash = hashIdentifier(backupId);\n\t\t\texpectedPath = joinPath(backupHome, workspaceHash, 'custom', filePathHash).with({ scheme: Schemas.vscodeUserData }).toString();\n\t\t\tassert.strictEqual(service.toBackupResource(backupId).toString(), expectedPath);\n\t\t});\n\t});\n\n\tsuite('backup', () => {\n\n\t\tfunction toExpectedPreamble(identifier: IWorkingCopyIdentifier, content = '', meta?: object): string {\n\t\t\treturn `${identifier.resource.toString()} ${JSON.stringify({ ...meta, typeId: identifier.typeId })}\\n${content}`;\n\t\t}\n\n\t\ttest('joining', async () => {\n\t\t\tlet backupJoined = false;\n\t\t\tconst joinBackupsPromise = service.joinBackups();\n\t\t\tjoinBackupsPromise.then(() => backupJoined = true);\n\t\t\tawait joinBackupsPromise;\n\t\t\tassert.strictEqual(backupJoined, true);\n\n\t\t\tbackupJoined = false;\n\t\t\tservice.joinBackups().then(() => backupJoined = true);\n\n\t\t\tconst identifier = toUntypedWorkingCopyId(fooFile);\n\t\t\tconst backupPath = joinPath(workspaceBackupPath, identifier.resource.scheme, hashIdentifier(identifier));\n\n\t\t\tconst backupPromise = service.backup(identifier);\n\t\t\tassert.strictEqual(backupJoined, false);\n\t\t\tawait backupPromise;\n\t\t\tassert.strictEqual(backupJoined, true);\n\n\t\t\tassert.strictEqual((await fileService.resolve(joinPath(workspaceBackupPath, 'file'))).children?.length, 1);\n\t\t\tassert.strictEqual((await fileService.exists(backupPath)), true);\n\t\t\tassert.strictEqual((await fileService.readFile(backupPath)).value.toString(), toExpectedPreamble(identifier));\n\t\t\tassert.ok(service.hasBackupSync(identifier));\n\t\t});\n\n\t\ttest('no text', async () => {\n\t\t\tconst identifier = toUntypedWorkingCopyId(fooFile);\n\t\t\tconst backupPath = joinPath(workspaceBackupPath, identifier.resource.scheme, hashIdentifier(identifier));\n\n\t\t\tawait service.backup(identifier);\n\t\t\tassert.strictEqual((await fileService.resolve(joinPath(workspaceBackupPath, 'file'))).children?.length, 1);\n\t\t\tassert.strictEqual((await fileService.exists(backupPath)), true);\n\t\t\tassert.strictEqual((await fileService.readFile(backupPath)).value.toString(), toExpectedPreamble(identifier));\n\t\t\tassert.ok(service.hasBackupSync(identifier));\n\t\t});\n\n\t\ttest('text file', async () => {\n\t\t\tconst identifier = toUntypedWorkingCopyId(fooFile);\n\t\t\tconst backupPath = joinPath(workspaceBackupPath, identifier.resource.scheme, hashIdentifier(identifier));\n\n\t\t\tawait service.backup(identifier, bufferToReadable(VSBuffer.fromString('test')));\n\t\t\tassert.strictEqual((await fileService.resolve(joinPath(workspaceBackupPath, 'file'))).children?.length, 1);\n\t\t\tassert.strictEqual((await fileService.exists(backupPath)), true);\n\t\t\tassert.strictEqual((await fileService.readFile(backupPath)).value.toString(), toExpectedPreamble(identifier, 'test'));\n\t\t\tassert.ok(service.hasBackupSync(identifier));\n\t\t});\n\n\t\ttest('text file (with version)', async () => {\n\t\t\tconst identifier = toUntypedWorkingCopyId(fooFile);\n\t\t\tconst backupPath = joinPath(workspaceBackupPath, identifier.resource.scheme, hashIdentifier(identifier));\n\n\t\t\tawait service.backup(identifier, bufferToReadable(VSBuffer.fromString('test')), 666);\n\t\t\tassert.strictEqual((await fileService.resolve(joinPath(workspaceBackupPath, 'file'))).children?.length, 1);\n\t\t\tassert.strictEqual((await fileService.exists(backupPath)), true);\n\t\t\tassert.strictEqual((await fileService.readFile(backupPath)).value.toString(), toExpectedPreamble(identifier, 'test'));\n\t\t\tassert.ok(!service.hasBackupSync(identifier, 555));\n\t\t\tassert.ok(service.hasBackupSync(identifier, 666));\n\t\t});\n\n\t\ttest('text file (with meta)', async () => {\n\t\t\tconst identifier = toUntypedWorkingCopyId(fooFile);\n\t\t\tconst backupPath = joinPath(workspaceBackupPath, identifier.resource.scheme, hashIdentifier(identifier));\n\t\t\tconst meta = { etag: '678', orphaned: true };\n\n\t\t\tawait service.backup(identifier, bufferToReadable(VSBuffer.fromString('test')), undefined, meta);\n\t\t\tassert.strictEqual((await fileService.resolve(joinPath(workspaceBackupPath, 'file'))).children?.length, 1);\n\t\t\tassert.strictEqual((await fileService.exists(backupPath)), true);\n\t\t\tassert.strictEqual((await fileService.readFile(backupPath)).value.toString(), toExpectedPreamble(identifier, 'test', meta));\n\t\t\tassert.ok(service.hasBackupSync(identifier));\n\t\t});\n\n\t\ttest('text file with whitespace in name and type (with meta)', async () => {\n\t\t\tconst fileWithSpace = URI.file(isWindows ? 'c:\\\\Foo \\n Bar' : '/Foo \\n Bar');\n\t\t\tconst identifier = toTypedWorkingCopyId(fileWithSpace, ' test id \\n');\n\t\t\tconst backupPath = joinPath(workspaceBackupPath, identifier.resource.scheme, hashIdentifier(identifier));\n\t\t\tconst meta = { etag: '678 \\n k', orphaned: true };\n\n\t\t\tawait service.backup(identifier, bufferToReadable(VSBuffer.fromString('test')), undefined, meta);\n\t\t\tassert.strictEqual((await fileService.resolve(joinPath(workspaceBackupPath, 'file'))).children?.length, 1);\n\t\t\tassert.strictEqual((await fileService.exists(backupPath)), true);\n\t\t\tassert.strictEqual((await fileService.readFile(backupPath)).value.toString(), toExpectedPreamble(identifier, 'test', meta));\n\t\t\tassert.ok(service.hasBackupSync(identifier));\n\t\t});\n\n\t\ttest('text file with unicode character in name and type (with meta)', async () => {\n\t\t\tconst fileWithUnicode = URI.file(isWindows ? 'c:\\\\so\uD808\uDC05me\u0804' : '/so\uD808\uDC05me\u0804');\n\t\t\tconst identifier = toTypedWorkingCopyId(fileWithUnicode, ' test so\uD808\uDC05me\u0804 id \\n');\n\t\t\tconst backupPath = joinPath(workspaceBackupPath, identifier.resource.scheme, hashIdentifier(identifier));\n\t\t\tconst meta = { etag: '678so\uD808\uDC05me\u0804', orphaned: true };\n\n\t\t\tawait service.backup(identifier, bufferToReadable(VSBuffer.fromString('test')), undefined, meta);\n\t\t\tassert.strictEqual((await fileService.resolve(joinPath(workspaceBackupPath, 'file'))).children?.length, 1);\n\t\t\tassert.strictEqual((await fileService.exists(backupPath)), true);\n\t\t\tassert.strictEqual((await fileService.readFile(backupPath)).value.toString(), toExpectedPreamble(identifier, 'test', meta));\n\t\t\tassert.ok(service.hasBackupSync(identifier));\n\t\t});\n\n\t\ttest('untitled file', async () => {\n\t\t\tconst identifier = toUntypedWorkingCopyId(untitledFile);\n\t\t\tconst backupPath = joinPath(workspaceBackupPath, identifier.resource.scheme, hashIdentifier(identifier));\n\n\t\t\tawait service.backup(identifier, bufferToReadable(VSBuffer.fromString('test')));\n\t\t\tassert.strictEqual((await fileService.resolve(joinPath(workspaceBackupPath, 'untitled'))).children?.length, 1);\n\t\t\tassert.strictEqual((await fileService.exists(backupPath)), true);\n\t\t\tassert.strictEqual((await fileService.readFile(backupPath)).value.toString(), toExpectedPreamble(identifier, 'test'));\n\t\t\tassert.ok(service.hasBackupSync(identifier));\n\t\t});\n\n\t\ttest('text file (readable)', async () => {\n\t\t\tconst identifier = toUntypedWorkingCopyId(fooFile);\n\t\t\tconst backupPath = joinPath(workspaceBackupPath, identifier.resource.scheme, hashIdentifier(identifier));\n\t\t\tconst model = createTextModel('test');\n\n\t\t\tawait service.backup(identifier, toBufferOrReadable(model.createSnapshot()));\n\t\t\tassert.strictEqual((await fileService.resolve(joinPath(workspaceBackupPath, 'file'))).children?.length, 1);\n\t\t\tassert.strictEqual((await fileService.exists(backupPath)), true);\n\t\t\tassert.strictEqual((await fileService.readFile(backupPath)).value.toString(), toExpectedPreamble(identifier, 'test'));\n\t\t\tassert.ok(service.hasBackupSync(identifier));\n\n\t\t\tmodel.dispose();\n\t\t});\n\n\t\ttest('untitled file (readable)', async () => {\n\t\t\tconst identifier = toUntypedWorkingCopyId(untitledFile);\n\t\t\tconst backupPath = joinPath(workspaceBackupPath, identifier.resource.scheme, hashIdentifier(identifier));\n\t\t\tconst model = createTextModel('test');\n\n\t\t\tawait service.backup(identifier, toBufferOrReadable(model.createSnapshot()));\n\t\t\tassert.strictEqual((await fileService.resolve(joinPath(workspaceBackupPath, 'untitled'))).children?.length, 1);\n\t\t\tassert.strictEqual((await fileService.exists(backupPath)), true);\n\t\t\tassert.strictEqual((await fileService.readFile(backupPath)).value.toString(), toExpectedPreamble(identifier, 'test'));\n\n\t\t\tmodel.dispose();\n\t\t});\n\n\t\ttest('text file (large file, stream)', () => {\n\t\t\tconst largeString = (new Array(30 * 1024)).join('Large String\\n');\n\n\t\t\treturn testLargeTextFile(largeString, bufferToStream(VSBuffer.fromString(largeString)));\n\t\t});\n\n\t\ttest('text file (large file, readable)', async () => {\n\t\t\tconst largeString = (new Array(30 * 1024)).join('Large String\\n');\n\t\t\tconst model = createTextModel(largeString);\n\n\t\t\tawait testLargeTextFile(largeString, toBufferOrReadable(model.createSnapshot()));\n\n\t\t\tmodel.dispose();\n\t\t});\n\n\t\tasync function testLargeTextFile(largeString: string, buffer: VSBufferReadable | VSBufferReadableStream) {\n\t\t\tconst identifier = toUntypedWorkingCopyId(fooFile);\n\t\t\tconst backupPath = joinPath(workspaceBackupPath, identifier.resource.scheme, hashIdentifier(identifier));\n\n\t\t\tawait service.backup(identifier, buffer, undefined, { largeTest: true });\n\t\t\tassert.strictEqual((await fileService.resolve(joinPath(workspaceBackupPath, 'file'))).children?.length, 1);\n\t\t\tassert.strictEqual((await fileService.exists(backupPath)), true);\n\t\t\tassert.strictEqual((await fileService.readFile(backupPath)).value.toString(), toExpectedPreamble(identifier, largeString, { largeTest: true }));\n\t\t\tassert.ok(service.hasBackupSync(identifier));\n\t\t}\n\n\t\ttest('untitled file (large file, readable)', async () => {\n\t\t\tconst identifier = toUntypedWorkingCopyId(untitledFile);\n\t\t\tconst backupPath = joinPath(workspaceBackupPath, identifier.resource.scheme, hashIdentifier(identifier));\n\t\t\tconst largeString = (new Array(30 * 1024)).join('Large String\\n');\n\t\t\tconst model = createTextModel(largeString);\n\n\t\t\tawait service.backup(identifier, toBufferOrReadable(model.createSnapshot()));\n\t\t\tassert.strictEqual((await fileService.resolve(joinPath(workspaceBackupPath, 'untitled'))).children?.length, 1);\n\t\t\tassert.strictEqual((await fileService.exists(backupPath)), true);\n\t\t\tassert.strictEqual((await fileService.readFile(backupPath)).value.toString(), toExpectedPreamble(identifier, largeString));\n\t\t\tassert.ok(service.hasBackupSync(identifier));\n\n\t\t\tmodel.dispose();\n\t\t});\n\n\t\ttest('cancellation', async () => {\n\t\t\tconst identifier = toUntypedWorkingCopyId(fooFile);\n\t\t\tconst backupPath = joinPath(workspaceBackupPath, identifier.resource.scheme, hashIdentifier(identifier));\n\n\t\t\tconst cts = new CancellationTokenSource();\n\t\t\tconst promise = service.backup(identifier, undefined, undefined, undefined, cts.token);\n\t\t\tcts.cancel();\n\t\t\tawait promise;\n\n\t\t\tassert.strictEqual((await fileService.exists(backupPath)), false);\n\t\t\tassert.ok(!service.hasBackupSync(identifier));\n\t\t});\n\n\t\ttest('multiple', async () => {\n\t\t\tconst identifier = toUntypedWorkingCopyId(fooFile);\n\t\t\tconst backupPath = joinPath(workspaceBackupPath, identifier.resource.scheme, hashIdentifier(identifier));\n\n\t\t\tawait Promise.all([\n\t\t\t\tservice.backup(identifier),\n\t\t\t\tservice.backup(identifier),\n\t\t\t\tservice.backup(identifier),\n\t\t\t\tservice.backup(identifier)\n\t\t\t]);\n\n\t\t\tassert.strictEqual((await fileService.resolve(joinPath(workspaceBackupPath, 'file'))).children?.length, 1);\n\t\t\tassert.strictEqual((await fileService.exists(backupPath)), true);\n\t\t\tassert.strictEqual((await fileService.readFile(backupPath)).value.toString(), toExpectedPreamble(identifier));\n\t\t\tassert.ok(service.hasBackupSync(identifier));\n\t\t});\n\n\t\ttest('multiple same resource, different type id', async () => {\n\t\t\tconst backupId1 = toUntypedWorkingCopyId(fooFile);\n\t\t\tconst backupId2 = toTypedWorkingCopyId(fooFile, 'type1');\n\t\t\tconst backupId3 = toTypedWorkingCopyId(fooFile, 'type2');\n\n\t\t\tawait Promise.all([\n\t\t\t\tservice.backup(backupId1),\n\t\t\t\tservice.backup(backupId2),\n\t\t\t\tservice.backup(backupId3)\n\t\t\t]);\n\n\t\t\tassert.strictEqual((await fileService.resolve(joinPath(workspaceBackupPath, 'file'))).children?.length, 3);\n\n\t\t\tfor (const backupId of [backupId1, backupId2, backupId3]) {\n\t\t\t\tconst fooBackupPath = joinPath(workspaceBackupPath, backupId.resource.scheme, hashIdentifier(backupId));\n\t\t\t\tassert.strictEqual((await fileService.exists(fooBackupPath)), true);\n\t\t\t\tassert.strictEqual((await fileService.readFile(fooBackupPath)).value.toString(), toExpectedPreamble(backupId));\n\t\t\t\tassert.ok(service.hasBackupSync(backupId));\n\t\t\t}\n\t\t});\n\t});\n\n\tsuite('discardBackup', () => {\n\n\t\ttest('joining', async () => {\n\t\t\tconst identifier = toUntypedWorkingCopyId(fooFile);\n\t\t\tconst backupPath = joinPath(workspaceBackupPath, identifier.resource.scheme, hashIdentifier(identifier));\n\n\t\t\tawait service.backup(identifier, bufferToReadable(VSBuffer.fromString('test')));\n\t\t\tassert.strictEqual((await fileService.resolve(joinPath(workspaceBackupPath, 'file'))).children?.length, 1);\n\t\t\tassert.ok(service.hasBackupSync(identifier));\n\n\t\t\tlet backupJoined = false;\n\t\t\tservice.joinBackups().then(() => backupJoined = true);\n\n\t\t\tconst discardBackupPromise = service.discardBackup(identifier);\n\t\t\tassert.strictEqual(backupJoined, false);\n\t\t\tawait discardBackupPromise;\n\t\t\tassert.strictEqual(backupJoined, true);\n\n\t\t\tassert.strictEqual((await fileService.exists(backupPath)), false);\n\t\t\tassert.strictEqual((await fileService.resolve(joinPath(workspaceBackupPath, 'file'))).children?.length, 0);\n\t\t\tassert.ok(!service.hasBackupSync(identifier));\n\t\t});\n\n\t\ttest('text file', async () => {\n\t\t\tconst identifier = toUntypedWorkingCopyId(fooFile);\n\t\t\tconst backupPath = joinPath(workspaceBackupPath, identifier.resource.scheme, hashIdentifier(identifier));\n\n\t\t\tawait service.backup(identifier, bufferToReadable(VSBuffer.fromString('test')));\n\t\t\tassert.strictEqual((await fileService.resolve(joinPath(workspaceBackupPath, 'file'))).children?.length, 1);\n\t\t\tassert.ok(service.hasBackupSync(identifier));\n\n\t\t\tawait service.discardBackup(identifier);\n\t\t\tassert.strictEqual((await fileService.exists(backupPath)), false);\n\t\t\tassert.strictEqual((await fileService.resolve(joinPath(workspaceBackupPath, 'file'))).children?.length, 0);\n\t\t\tassert.ok(!service.hasBackupSync(identifier));\n\t\t});\n\n\t\ttest('untitled file', async () => {\n\t\t\tconst identifier = toUntypedWorkingCopyId(untitledFile);\n\t\t\tconst backupPath = joinPath(workspaceBackupPath, identifier.resource.scheme, hashIdentifier(identifier));\n\n\t\t\tawait service.backup(identifier, bufferToReadable(VSBuffer.fromString('test')));\n\t\t\tassert.strictEqual((await fileService.resolve(joinPath(workspaceBackupPath, 'untitled'))).children?.length, 1);\n\n\t\t\tawait service.discardBackup(identifier);\n\t\t\tassert.strictEqual((await fileService.exists(backupPath)), false);\n\t\t\tassert.strictEqual((await fileService.resolve(joinPath(workspaceBackupPath, 'untitled'))).children?.length, 0);\n\t\t});\n\n\t\ttest('multiple same resource, different type id', async () => {\n\t\t\tconst backupId1 = toUntypedWorkingCopyId(fooFile);\n\t\t\tconst backupId2 = toTypedWorkingCopyId(fooFile, 'type1');\n\t\t\tconst backupId3 = toTypedWorkingCopyId(fooFile, 'type2');\n\n\t\t\tawait Promise.all([\n\t\t\t\tservice.backup(backupId1),\n\t\t\t\tservice.backup(backupId2),\n\t\t\t\tservice.backup(backupId3)\n\t\t\t]);\n\n\t\t\tassert.strictEqual((await fileService.resolve(joinPath(workspaceBackupPath, 'file'))).children?.length, 3);\n\n\t\t\tfor (const backupId of [backupId1, backupId2, backupId3]) {\n\t\t\t\tconst backupPath = joinPath(workspaceBackupPath, backupId.resource.scheme, hashIdentifier(backupId));\n\t\t\t\tawait service.discardBackup(backupId);\n\t\t\t\tassert.strictEqual((await fileService.exists(backupPath)), false);\n\t\t\t}\n\t\t\tassert.strictEqual((await fileService.resolve(joinPath(workspaceBackupPath, 'file'))).children?.length, 0);\n\t\t});\n\t});\n\n\tsuite('discardBackups (all)', () => {\n\t\ttest('text file', async () => {\n\t\t\tconst backupId1 = toUntypedWorkingCopyId(fooFile);\n\t\t\tconst backupId2 = toUntypedWorkingCopyId(barFile);\n\t\t\tconst backupId3 = toTypedWorkingCopyId(barFile);\n\n\t\t\tawait service.backup(backupId1, bufferToReadable(VSBuffer.fromString('test')));\n\t\t\tassert.strictEqual((await fileService.resolve(joinPath(workspaceBackupPath, 'file'))).children?.length, 1);\n\n\t\t\tawait service.backup(backupId2, bufferToReadable(VSBuffer.fromString('test')));\n\t\t\tassert.strictEqual((await fileService.resolve(joinPath(workspaceBackupPath, 'file'))).children?.length, 2);\n\n\t\t\tawait service.backup(backupId3, bufferToReadable(VSBuffer.fromString('test')));\n\t\t\tassert.strictEqual((await fileService.resolve(joinPath(workspaceBackupPath, 'file'))).children?.length, 3);\n\n\t\t\tawait service.discardBackups();\n\t\t\tfor (const backupId of [backupId1, backupId2, backupId3]) {\n\t\t\t\tconst backupPath = joinPath(workspaceBackupPath, backupId.resource.scheme, hashIdentifier(backupId));\n\t\t\t\tassert.strictEqual((await fileService.exists(backupPath)), false);\n\t\t\t}\n\n\t\t\tassert.strictEqual((await fileService.exists(joinPath(workspaceBackupPath, 'file'))), false);\n\t\t});\n\n\t\ttest('untitled file', async () => {\n\t\t\tconst backupId = toUntypedWorkingCopyId(untitledFile);\n\t\t\tconst backupPath = joinPath(workspaceBackupPath, backupId.resource.scheme, hashIdentifier(backupId));\n\n\t\t\tawait service.backup(backupId, bufferToReadable(VSBuffer.fromString('test')));\n\t\t\tassert.strictEqual((await fileService.resolve(joinPath(workspaceBackupPath, 'untitled'))).children?.length, 1);\n\n\t\t\tawait service.discardBackups();\n\t\t\tassert.strictEqual((await fileService.exists(backupPath)), false);\n\t\t\tassert.strictEqual((await fileService.exists(joinPath(workspaceBackupPath, 'untitled'))), false);\n\t\t});\n\n\t\ttest('can backup after discarding all', async () => {\n\t\t\tawait service.discardBackups();\n\t\t\tawait service.backup(toUntypedWorkingCopyId(untitledFile), bufferToReadable(VSBuffer.fromString('test')));\n\t\t\tassert.strictEqual((await fileService.exists(workspaceBackupPath)), true);\n\t\t});\n\t});\n\n\tsuite('discardBackups (except some)', () => {\n\t\ttest('text file', async () => {\n\t\t\tconst backupId1 = toUntypedWorkingCopyId(fooFile);\n\t\t\tconst backupId2 = toUntypedWorkingCopyId(barFile);\n\t\t\tconst backupId3 = toTypedWorkingCopyId(barFile);\n\n\t\t\tawait service.backup(backupId1, bufferToReadable(VSBuffer.fromString('test')));\n\t\t\tassert.strictEqual((await fileService.resolve(joinPath(workspaceBackupPath, 'file'))).children?.length, 1);\n\n\t\t\tawait service.backup(backupId2, bufferToReadable(VSBuffer.fromString('test')));\n\t\t\tassert.strictEqual((await fileService.resolve(joinPath(workspaceBackupPath, 'file'))).children?.length, 2);\n\n\t\t\tawait service.backup(backupId3, bufferToReadable(VSBuffer.fromString('test')));\n\t\t\tassert.strictEqual((await fileService.resolve(joinPath(workspaceBackupPath, 'file'))).children?.length, 3);\n\n\t\t\tawait service.discardBackups({ except: [backupId2, backupId3] });\n\n\t\t\tlet backupPath = joinPath(workspaceBackupPath, backupId1.resource.scheme, hashIdentifier(backupId1));\n\t\t\tassert.strictEqual((await fileService.exists(backupPath)), false);\n\n\t\t\tbackupPath = joinPath(workspaceBackupPath, backupId2.resource.scheme, hashIdentifier(backupId2));\n\t\t\tassert.strictEqual((await fileService.exists(backupPath)), true);\n\n\t\t\tbackupPath = joinPath(workspaceBackupPath, backupId3.resource.scheme, hashIdentifier(backupId3));\n\t\t\tassert.strictEqual((await fileService.exists(backupPath)), true);\n\n\t\t\tawait service.discardBackups({ except: [backupId1] });\n\n\t\t\tfor (const backupId of [backupId1, backupId2, backupId3]) {\n\t\t\t\tconst backupPath = joinPath(workspaceBackupPath, backupId.resource.scheme, hashIdentifier(backupId));\n\t\t\t\tassert.strictEqual((await fileService.exists(backupPath)), false);\n\t\t\t}\n\t\t});\n\n\t\ttest('untitled file', async () => {\n\t\t\tconst backupId = toUntypedWorkingCopyId(untitledFile);\n\t\t\tconst backupPath = joinPath(workspaceBackupPath, backupId.resource.scheme, hashIdentifier(backupId));\n\n\t\t\tawait service.backup(backupId, bufferToReadable(VSBuffer.fromString('test')));\n\t\t\tassert.strictEqual((await fileService.exists(backupPath)), true);\n\t\t\tassert.strictEqual((await fileService.resolve(joinPath(workspaceBackupPath, 'untitled'))).children?.length, 1);\n\n\t\t\tawait service.discardBackups({ except: [backupId] });\n\t\t\tassert.strictEqual((await fileService.exists(backupPath)), true);\n\t\t});\n\t});\n\n\tsuite('getBackups', () => {\n\t\ttest('text file', async () => {\n\t\t\tawait Promise.all([\n\t\t\t\tservice.backup(toUntypedWorkingCopyId(fooFile), bufferToReadable(VSBuffer.fromString('test'))),\n\t\t\t\tservice.backup(toTypedWorkingCopyId(fooFile, 'type1'), bufferToReadable(VSBuffer.fromString('test'))),\n\t\t\t\tservice.backup(toTypedWorkingCopyId(fooFile, 'type2'), bufferToReadable(VSBuffer.fromString('test')))\n\t\t\t]);\n\n\t\t\tlet backups = await service.getBackups();\n\t\t\tassert.strictEqual(backups.length, 3);\n\n\t\t\tfor (const backup of backups) {\n\t\t\t\tif (backup.typeId === '') {\n\t\t\t\t\tassert.strictEqual(backup.resource.toString(), fooFile.toString());\n\t\t\t\t} else if (backup.typeId === 'type1') {\n\t\t\t\t\tassert.strictEqual(backup.resource.toString(), fooFile.toString());\n\t\t\t\t} else if (backup.typeId === 'type2') {\n\t\t\t\t\tassert.strictEqual(backup.resource.toString(), fooFile.toString());\n\t\t\t\t} else {\n\t\t\t\t\tassert.fail('Unexpected backup');\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tawait service.backup(toUntypedWorkingCopyId(barFile), bufferToReadable(VSBuffer.fromString('test')));\n\n\t\t\tbackups = await service.getBackups();\n\t\t\tassert.strictEqual(backups.length, 4);\n\t\t});\n\n\t\ttest('untitled file', async () => {\n\t\t\tawait Promise.all([\n\t\t\t\tservice.backup(toUntypedWorkingCopyId(untitledFile), bufferToReadable(VSBuffer.fromString('test'))),\n\t\t\t\tservice.backup(toTypedWorkingCopyId(untitledFile, 'type1'), bufferToReadable(VSBuffer.fromString('test'))),\n\t\t\t\tservice.backup(toTypedWorkingCopyId(untitledFile, 'type2'), bufferToReadable(VSBuffer.fromString('test')))\n\t\t\t]);\n\n\t\t\tconst backups = await service.getBackups();\n\t\t\tassert.strictEqual(backups.length, 3);\n\n\t\t\tfor (const backup of backups) {\n\t\t\t\tif (backup.typeId === '') {\n\t\t\t\t\tassert.strictEqual(backup.resource.toString(), untitledFile.toString());\n\t\t\t\t} else if (backup.typeId === 'type1') {\n\t\t\t\t\tassert.strictEqual(backup.resource.toString(), untitledFile.toString());\n\t\t\t\t} else if (backup.typeId === 'type2') {\n\t\t\t\t\tassert.strictEqual(backup.resource.toString(), untitledFile.toString());\n\t\t\t\t} else {\n\t\t\t\t\tassert.fail('Unexpected backup');\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t});\n\n\tsuite('resolve', () => {\n\n\t\tinterface IBackupTestMetaData extends IWorkingCopyBackupMeta {\n\t\t\tmtime?: number;\n\t\t\tsize?: number;\n\t\t\tetag?: string;\n\t\t\torphaned?: boolean;\n\t\t}\n\n\t\ttest('should restore the original contents (untitled file)', async () => {\n\t\t\tconst contents = 'test\\nand more stuff';\n\n\t\t\tawait testResolveBackup(untitledFile, contents);\n\t\t});\n\n\t\ttest('should restore the original contents (untitled file with metadata)', async () => {\n\t\t\tconst contents = 'test\\nand more stuff';\n\n\t\t\tconst meta = {\n\t\t\t\tetag: 'the Etag',\n\t\t\t\tsize: 666,\n\t\t\t\tmtime: Date.now(),\n\t\t\t\torphaned: true\n\t\t\t};\n\n\t\t\tawait testResolveBackup(untitledFile, contents, meta);\n\t\t});\n\n\t\ttest('should restore the original contents (untitled file empty with metadata)', async () => {\n\t\t\tconst contents = '';\n\n\t\t\tconst meta = {\n\t\t\t\tetag: 'the Etag',\n\t\t\t\tsize: 666,\n\t\t\t\tmtime: Date.now(),\n\t\t\t\torphaned: true\n\t\t\t};\n\n\t\t\tawait testResolveBackup(untitledFile, contents, meta);\n\t\t});\n\n\t\ttest('should restore the original contents (untitled large file with metadata)', async () => {\n\t\t\tconst contents = (new Array(30 * 1024)).join('Large String\\n');\n\n\t\t\tconst meta = {\n\t\t\t\tetag: 'the Etag',\n\t\t\t\tsize: 666,\n\t\t\t\tmtime: Date.now(),\n\t\t\t\torphaned: true\n\t\t\t};\n\n\t\t\tawait testResolveBackup(untitledFile, contents, meta);\n\t\t});\n\n\t\ttest('should restore the original contents (text file)', async () => {\n\t\t\tconst contents = [\n\t\t\t\t'Lorem ipsum ',\n\t\t\t\t'dolor \u00F6\u00E4\u00FC sit amet ',\n\t\t\t\t'consectetur ',\n\t\t\t\t'adipiscing \u00DF\u00DF elit'\n\t\t\t].join('');\n\n\t\t\tawait testResolveBackup(fooFile, contents);\n\t\t});\n\n\t\ttest('should restore the original contents (text file - custom scheme)', async () => {\n\t\t\tconst contents = [\n\t\t\t\t'Lorem ipsum ',\n\t\t\t\t'dolor \u00F6\u00E4\u00FC sit amet ',\n\t\t\t\t'consectetur ',\n\t\t\t\t'adipiscing \u00DF\u00DF elit'\n\t\t\t].join('');\n\n\t\t\tawait testResolveBackup(customFile, contents);\n\t\t});\n\n\t\ttest('should restore the original contents (text file with metadata)', async () => {\n\t\t\tconst contents = [\n\t\t\t\t'Lorem ipsum ',\n\t\t\t\t'dolor \u00F6\u00E4\u00FC sit amet ',\n\t\t\t\t'adipiscing \u00DF\u00DF elit',\n\t\t\t\t'consectetur '\n\t\t\t].join('');\n\n\t\t\tconst meta = {\n\t\t\t\tetag: 'theEtag',\n\t\t\t\tsize: 888,\n\t\t\t\tmtime: Date.now(),\n\t\t\t\torphaned: false\n\t\t\t};\n\n\t\t\tawait testResolveBackup(fooFile, contents, meta);\n\t\t});\n\n\t\ttest('should restore the original contents (empty text file with metadata)', async () => {\n\t\t\tconst contents = '';\n\n\t\t\tconst meta = {\n\t\t\t\tetag: 'theEtag',\n\t\t\t\tsize: 888,\n\t\t\t\tmtime: Date.now(),\n\t\t\t\torphaned: false\n\t\t\t};\n\n\t\t\tawait testResolveBackup(fooFile, contents, meta);\n\t\t});\n\n\t\ttest('should restore the original contents (large text file with metadata)', async () => {\n\t\t\tconst contents = (new Array(30 * 1024)).join('Large String\\n');\n\n\t\t\tconst meta = {\n\t\t\t\tetag: 'theEtag',\n\t\t\t\tsize: 888,\n\t\t\t\tmtime: Date.now(),\n\t\t\t\torphaned: false\n\t\t\t};\n\n\t\t\tawait testResolveBackup(fooFile, contents, meta);\n\t\t});\n\n\t\ttest('should restore the original contents (text file with metadata changed once)', async () => {\n\t\t\tconst contents = [\n\t\t\t\t'Lorem ipsum ',\n\t\t\t\t'dolor \u00F6\u00E4\u00FC sit amet ',\n\t\t\t\t'adipiscing \u00DF\u00DF elit',\n\t\t\t\t'consectetur '\n\t\t\t].join('');\n\n\t\t\tconst meta = {\n\t\t\t\tetag: 'theEtag',\n\t\t\t\tsize: 888,\n\t\t\t\tmtime: Date.now(),\n\t\t\t\torphaned: false\n\t\t\t};\n\n\t\t\tawait testResolveBackup(fooFile, contents, meta);\n\n\t\t\t// Change meta and test again\n\t\t\tmeta.size = 999;\n\t\t\tawait testResolveBackup(fooFile, contents, meta);\n\t\t});\n\n\t\ttest('should restore the original contents (text file with metadata and fragment URI)', async () => {\n\t\t\tconst contents = [\n\t\t\t\t'Lorem ipsum ',\n\t\t\t\t'dolor \u00F6\u00E4\u00FC sit amet ',\n\t\t\t\t'adipiscing \u00DF\u00DF elit',\n\t\t\t\t'consectetur '\n\t\t\t].join('');\n\n\t\t\tconst meta = {\n\t\t\t\tetag: 'theEtag',\n\t\t\t\tsize: 888,\n\t\t\t\tmtime: Date.now(),\n\t\t\t\torphaned: false\n\t\t\t};\n\n\t\t\tawait testResolveBackup(customFileWithFragment, contents, meta);\n\t\t});\n\n\t\ttest('should restore the original contents (text file with space in name with metadata)', async () => {\n\t\t\tconst contents = [\n\t\t\t\t'Lorem ipsum ',\n\t\t\t\t'dolor \u00F6\u00E4\u00FC sit amet ',\n\t\t\t\t'adipiscing \u00DF\u00DF elit',\n\t\t\t\t'consectetur '\n\t\t\t].join('');\n\n\t\t\tconst meta = {\n\t\t\t\tetag: 'theEtag',\n\t\t\t\tsize: 888,\n\t\t\t\tmtime: Date.now(),\n\t\t\t\torphaned: false\n\t\t\t};\n\n\t\t\tawait testResolveBackup(fooBarFile, contents, meta);\n\t\t});\n\n\t\ttest('should restore the original contents (text file with too large metadata to persist)', async () => {\n\t\t\tconst contents = [\n\t\t\t\t'Lorem ipsum ',\n\t\t\t\t'dolor \u00F6\u00E4\u00FC sit amet ',\n\t\t\t\t'adipiscing \u00DF\u00DF elit',\n\t\t\t\t'consectetur '\n\t\t\t].join('');\n\n\t\t\tconst meta = {\n\t\t\t\tetag: (new Array(100 * 1024)).join('Large String'),\n\t\t\t\tsize: 888,\n\t\t\t\tmtime: Date.now(),\n\t\t\t\torphaned: false\n\t\t\t};\n\n\t\t\tawait testResolveBackup(fooFile, contents, meta, true);\n\t\t});\n\n\t\tasync function testResolveBackup(resource: URI, contents: string, meta?: IBackupTestMetaData, expectNoMeta?: boolean) {\n\t\t\tawait doTestResolveBackup(toUntypedWorkingCopyId(resource), contents, meta, expectNoMeta);\n\t\t\tawait doTestResolveBackup(toTypedWorkingCopyId(resource), contents, meta, expectNoMeta);\n\t\t}\n\n\t\tasync function doTestResolveBackup(identifier: IWorkingCopyIdentifier, contents: string, meta?: IBackupTestMetaData, expectNoMeta?: boolean) {\n\t\t\tawait service.backup(identifier, bufferToReadable(VSBuffer.fromString(contents)), 1, meta);\n\n\t\t\tconst backup = await service.resolve<IBackupTestMetaData>(identifier);\n\t\t\tassert.ok(backup);\n\t\t\tassert.strictEqual(contents, (await streamToBuffer(backup.value)).toString());\n\n\t\t\tif (expectNoMeta || !meta) {\n\t\t\t\tassert.strictEqual(backup.meta, undefined);\n\t\t\t} else {\n\t\t\t\tassert.ok(backup.meta);\n\t\t\t\tassert.strictEqual(backup.meta.etag, meta.etag);\n\t\t\t\tassert.strictEqual(backup.meta.size, meta.size);\n\t\t\t\tassert.strictEqual(backup.meta.mtime, meta.mtime);\n\t\t\t\tassert.strictEqual(backup.meta.orphaned, meta.orphaned);\n\n\t\t\t\tassert.strictEqual(Object.keys(meta).length, Object.keys(backup.meta).length);\n\t\t\t}\n\t\t}\n\n\t\ttest('should restore the original contents (text file with broken metadata)', async () => {\n\t\t\tawait testShouldRestoreOriginalContentsWithBrokenBackup(toUntypedWorkingCopyId(fooFile));\n\t\t\tawait testShouldRestoreOriginalContentsWithBrokenBackup(toTypedWorkingCopyId(fooFile));\n\t\t});\n\n\t\tasync function testShouldRestoreOriginalContentsWithBrokenBackup(identifier: IWorkingCopyIdentifier): Promise<void> {\n\t\t\tconst contents = [\n\t\t\t\t'Lorem ipsum ',\n\t\t\t\t'dolor \u00F6\u00E4\u00FC sit amet ',\n\t\t\t\t'adipiscing \u00DF\u00DF elit',\n\t\t\t\t'consectetur '\n\t\t\t].join('');\n\n\t\t\tconst meta = {\n\t\t\t\tetag: 'theEtag',\n\t\t\t\tsize: 888,\n\t\t\t\tmtime: Date.now(),\n\t\t\t\torphaned: false\n\t\t\t};\n\n\t\t\tawait service.backup(identifier, bufferToReadable(VSBuffer.fromString(contents)), 1, meta);\n\n\t\t\tconst backupPath = joinPath(workspaceBackupPath, identifier.resource.scheme, hashIdentifier(identifier));\n\n\t\t\tconst fileContents = (await fileService.readFile(backupPath)).value.toString();\n\t\t\tassert.strictEqual(fileContents.indexOf(identifier.resource.toString()), 0);\n\n\t\t\tconst metaIndex = fileContents.indexOf('{');\n\t\t\tconst newFileContents = fileContents.substring(0, metaIndex) + '{{' + fileContents.substr(metaIndex);\n\t\t\tawait fileService.writeFile(backupPath, VSBuffer.fromString(newFileContents));\n\n\t\t\tconst backup = await service.resolve(identifier);\n\t\t\tassert.ok(backup);\n\t\t\tassert.strictEqual(contents, (await streamToBuffer(backup.value)).toString());\n\t\t\tassert.strictEqual(backup.meta, undefined);\n\t\t}\n\n\t\ttest('should update metadata from file into model when resolving', async () => {\n\t\t\tawait testShouldUpdateMetaFromFileWhenResolving(toUntypedWorkingCopyId(fooFile));\n\t\t\tawait testShouldUpdateMetaFromFileWhenResolving(toTypedWorkingCopyId(fooFile));\n\t\t});\n\n\t\tasync function testShouldUpdateMetaFromFileWhenResolving(identifier: IWorkingCopyIdentifier): Promise<void> {\n\t\t\tconst contents = 'Foo Bar';\n\n\t\t\tconst meta = {\n\t\t\t\tetag: 'theEtagForThisMetadataTest',\n\t\t\t\tsize: 888,\n\t\t\t\tmtime: Date.now(),\n\t\t\t\torphaned: false\n\t\t\t};\n\n\t\t\tconst updatedMeta = {\n\t\t\t\t...meta,\n\t\t\t\tetag: meta.etag + meta.etag\n\t\t\t};\n\n\t\t\tawait service.backup(identifier, bufferToReadable(VSBuffer.fromString(contents)), 1, meta);\n\n\t\t\tconst backupPath = joinPath(workspaceBackupPath, identifier.resource.scheme, hashIdentifier(identifier));\n\n\t\t\t// Simulate the condition of the backups model loading initially without\n\t\t\t// meta data information and then getting the meta data updated on the\n\t\t\t// first call to resolve the backup. We simulate this by explicitly changing\n\t\t\t// the meta data in the file and then verifying that the updated meta data\n\t\t\t// is persisted back into the model (verified via `hasBackupSync`).\n\t\t\t// This is not really something that would happen in real life because any\n\t\t\t// backup that is made via backup service will update the model accordingly.\n\n\t\t\tconst originalFileContents = (await fileService.readFile(backupPath)).value.toString();\n\t\t\tawait fileService.writeFile(backupPath, VSBuffer.fromString(originalFileContents.replace(meta.etag, updatedMeta.etag)));\n\n\t\t\tawait service.resolve(identifier);\n\n\t\t\tassert.strictEqual(service.hasBackupSync(identifier, undefined, meta), false);\n\t\t\tassert.strictEqual(service.hasBackupSync(identifier, undefined, updatedMeta), true);\n\n\t\t\tawait fileService.writeFile(backupPath, VSBuffer.fromString(originalFileContents));\n\n\t\t\tawait service.getBackups();\n\n\t\t\tassert.strictEqual(service.hasBackupSync(identifier, undefined, meta), true);\n\t\t\tassert.strictEqual(service.hasBackupSync(identifier, undefined, updatedMeta), false);\n\t\t}\n\n\t\ttest('should ignore invalid backups (empty file)', async () => {\n\t\t\tconst contents = 'test\\nand more stuff';\n\n\t\t\tawait service.backup(toUntypedWorkingCopyId(fooFile), bufferToReadable(VSBuffer.fromString(contents)), 1);\n\n\t\t\tlet backup = await service.resolve(toUntypedWorkingCopyId(fooFile));\n\t\t\tassert.ok(backup);\n\n\t\t\tawait service.testGetFileService().writeFile(service.toBackupResource(toUntypedWorkingCopyId(fooFile)), VSBuffer.fromString(''));\n\n\t\t\tbackup = await service.resolve<IBackupTestMetaData>(toUntypedWorkingCopyId(fooFile));\n\t\t\tassert.ok(!backup);\n\t\t});\n\n\t\ttest('should ignore invalid backups (no preamble)', async () => {\n\t\t\tconst contents = 'testand more stuff';\n\n\t\t\tawait service.backup(toUntypedWorkingCopyId(fooFile), bufferToReadable(VSBuffer.fromString(contents)), 1);\n\n\t\t\tlet backup = await service.resolve(toUntypedWorkingCopyId(fooFile));\n\t\t\tassert.ok(backup);\n\n\t\t\tawait service.testGetFileService().writeFile(service.toBackupResource(toUntypedWorkingCopyId(fooFile)), VSBuffer.fromString(contents));\n\n\t\t\tbackup = await service.resolve<IBackupTestMetaData>(toUntypedWorkingCopyId(fooFile));\n\t\t\tassert.ok(!backup);\n\t\t});\n\n\t\ttest('file with binary data', async () => {\n\t\t\tconst identifier = toUntypedWorkingCopyId(fooFile);\n\n\t\t\tconst buffer = Uint8Array.from([\n\t\t\t\t137, 80, 78, 71, 13, 10, 26, 10, 0, 0, 0, 13, 73, 72, 68, 82, 0, 0, 0, 73, 0, 0, 0, 67, 8, 2, 0, 0, 0, 95, 138, 191, 237, 0, 0, 0, 1, 115, 82, 71, 66, 0, 174, 206, 28, 233, 0, 0, 0, 4, 103, 65, 77, 65, 0, 0, 177, 143, 11, 252, 97, 5, 0, 0, 0, 9, 112, 72, 89, 115, 0, 0, 14, 195, 0, 0, 14, 195, 1, 199, 111, 168, 100, 0, 0, 0, 71, 116, 69, 88, 116, 83, 111, 117, 114, 99, 101, 0, 83, 104, 111, 116, 116, 121, 32, 118, 50, 46, 48, 46, 50, 46, 50, 49, 54, 32, 40, 67, 41, 32, 84, 104, 111, 109, 97, 115, 32, 66, 97, 117, 109, 97, 110, 110, 32, 45, 32, 104, 116, 116, 112, 58, 47, 47, 115, 104, 111, 116, 116, 121, 46, 100, 101, 118, 115, 45, 111, 110, 46, 110, 101, 116, 44, 132, 21, 213, 0, 0, 0, 84, 73, 68, 65, 84, 120, 218, 237, 207, 65, 17, 0, 0, 12, 2, 32, 211, 217, 63, 146, 37, 246, 218, 65, 3, 210, 191, 226, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 118, 100, 169, 4, 173, 8, 44, 248, 184, 40, 0, 0, 0, 0, 73, 69, 78, 68, 174, 66, 96, 130\n\t\t\t]);\n\n\t\t\tawait service.backup(identifier, bufferToReadable(VSBuffer.wrap(buffer)), undefined, { binaryTest: 'true' });\n\n\t\t\tconst backup = await service.resolve(toUntypedWorkingCopyId(fooFile));\n\t\t\tassert.ok(backup);\n\n\t\t\tconst backupBuffer = await consumeStream(backup.value, chunks => VSBuffer.concat(chunks));\n\t\t\tassert.strictEqual(backupBuffer.buffer.byteLength, buffer.byteLength);\n\t\t});\n\t});\n\n\tsuite('WorkingCopyBackupsModel', () => {\n\n\t\ttest('simple', async () => {\n\t\t\tconst model = await WorkingCopyBackupsModel.create(workspaceBackupPath, service.testGetFileService());\n\n\t\t\tconst resource1 = URI.file('test.html');\n\n\t\t\tassert.strictEqual(model.has(resource1), false);\n\n\t\t\tmodel.add(resource1);\n\n\t\t\tassert.strictEqual(model.has(resource1), true);\n\t\t\tassert.strictEqual(model.has(resource1, 0), true);\n\t\t\tassert.strictEqual(model.has(resource1, 1), false);\n\t\t\tassert.strictEqual(model.has(resource1, 1, { foo: 'bar' }), false);\n\n\t\t\tmodel.remove(resource1);\n\n\t\t\tassert.strictEqual(model.has(resource1), false);\n\n\t\t\tmodel.add(resource1);\n\n\t\t\tassert.strictEqual(model.has(resource1), true);\n\t\t\tassert.strictEqual(model.has(resource1, 0), true);\n\t\t\tassert.strictEqual(model.has(resource1, 1), false);\n\n\t\t\tmodel.clear();\n\n\t\t\tassert.strictEqual(model.has(resource1), false);\n\n\t\t\tmodel.add(resource1, 1);\n\n\t\t\tassert.strictEqual(model.has(resource1), true);\n\t\t\tassert.strictEqual(model.has(resource1, 0), false);\n\t\t\tassert.strictEqual(model.has(resource1, 1), true);\n\n\t\t\tconst resource2 = URI.file('test1.html');\n\t\t\tconst resource3 = URI.file('test2.html');\n\t\t\tconst resource4 = URI.file('test3.html');\n\n\t\t\tmodel.add(resource2);\n\t\t\tmodel.add(resource3);\n\t\t\tmodel.add(resource4, undefined, { foo: 'bar' });\n\n\t\t\tassert.strictEqual(model.has(resource1), true);\n\t\t\tassert.strictEqual(model.has(resource2), true);\n\t\t\tassert.strictEqual(model.has(resource3), true);\n\n\t\t\tassert.strictEqual(model.has(resource4), true);\n\t\t\tassert.strictEqual(model.has(resource4, undefined, { foo: 'bar' }), true);\n\t\t\tassert.strictEqual(model.has(resource4, undefined, { bar: 'foo' }), false);\n\n\t\t\tmodel.update(resource4, { foo: 'nothing' });\n\t\t\tassert.strictEqual(model.has(resource4, undefined, { foo: 'nothing' }), true);\n\t\t\tassert.strictEqual(model.has(resource4, undefined, { foo: 'bar' }), false);\n\n\t\t\tmodel.update(resource4);\n\t\t\tassert.strictEqual(model.has(resource4), true);\n\t\t\tassert.strictEqual(model.has(resource4, undefined, { foo: 'nothing' }), false);\n\t\t});\n\n\t\ttest('create', async () => {\n\t\t\tconst fooBackupPath = joinPath(workspaceBackupPath, fooFile.scheme, hashIdentifier(toUntypedWorkingCopyId(fooFile)));\n\t\t\tawait fileService.createFolder(dirname(fooBackupPath));\n\t\t\tawait fileService.writeFile(fooBackupPath, VSBuffer.fromString('foo'));\n\t\t\tconst model = await WorkingCopyBackupsModel.create(workspaceBackupPath, service.testGetFileService());\n\n\t\t\tassert.strictEqual(model.has(fooBackupPath), true);\n\t\t});\n\n\t\ttest('get', async () => {\n\t\t\tconst model = await WorkingCopyBackupsModel.create(workspaceBackupPath, service.testGetFileService());\n\n\t\t\tassert.deepStrictEqual(model.get(), []);\n\n\t\t\tconst file1 = URI.file('/root/file/foo.html');\n\t\t\tconst file2 = URI.file('/root/file/bar.html');\n\t\t\tconst untitled = URI.file('/root/untitled/bar.html');\n\n\t\t\tmodel.add(file1);\n\t\t\tmodel.add(file2);\n\t\t\tmodel.add(untitled);\n\n\t\t\tassert.deepStrictEqual(model.get().map(f => f.fsPath), [file1.fsPath, file2.fsPath, untitled.fsPath]);\n\t\t});\n\t});\n\n\tsuite('typeId migration', () => {\n\n\t\ttest('works (when meta is missing)', async () => {\n\t\t\tconst fooBackupId = toUntypedWorkingCopyId(fooFile);\n\t\t\tconst untitledBackupId = toUntypedWorkingCopyId(untitledFile);\n\t\t\tconst customBackupId = toUntypedWorkingCopyId(customFile);\n\n\t\t\tconst fooBackupPath = joinPath(workspaceBackupPath, fooFile.scheme, hashIdentifier(fooBackupId));\n\t\t\tconst untitledBackupPath = joinPath(workspaceBackupPath, untitledFile.scheme, hashIdentifier(untitledBackupId));\n\t\t\tconst customFileBackupPath = joinPath(workspaceBackupPath, customFile.scheme, hashIdentifier(customBackupId));\n\n\t\t\t// Prepare backups of the old format without meta\n\t\t\tawait fileService.createFolder(joinPath(workspaceBackupPath, fooFile.scheme));\n\t\t\tawait fileService.createFolder(joinPath(workspaceBackupPath, untitledFile.scheme));\n\t\t\tawait fileService.createFolder(joinPath(workspaceBackupPath, customFile.scheme));\n\t\t\tawait fileService.writeFile(fooBackupPath, VSBuffer.fromString(`${fooFile.toString()}\\ntest file`));\n\t\t\tawait fileService.writeFile(untitledBackupPath, VSBuffer.fromString(`${untitledFile.toString()}\\ntest untitled`));\n\t\t\tawait fileService.writeFile(customFileBackupPath, VSBuffer.fromString(`${customFile.toString()}\\ntest custom`));\n\n\t\t\tservice.reinitialize(workspaceBackupPath);\n\n\t\t\tconst backups = await service.getBackups();\n\t\t\tassert.strictEqual(backups.length, 3);\n\t\t\tassert.ok(backups.some(backup => isEqual(backup.resource, fooFile)));\n\t\t\tassert.ok(backups.some(backup => isEqual(backup.resource, untitledFile)));\n\t\t\tassert.ok(backups.some(backup => isEqual(backup.resource, customFile)));\n\t\t\tassert.ok(backups.every(backup => backup.typeId === ''));\n\t\t});\n\n\t\ttest('works (when typeId in meta is missing)', async () => {\n\t\t\tconst fooBackupId = toUntypedWorkingCopyId(fooFile);\n\t\t\tconst untitledBackupId = toUntypedWorkingCopyId(untitledFile);\n\t\t\tconst customBackupId = toUntypedWorkingCopyId(customFile);\n\n\t\t\tconst fooBackupPath = joinPath(workspaceBackupPath, fooFile.scheme, hashIdentifier(fooBackupId));\n\t\t\tconst untitledBackupPath = joinPath(workspaceBackupPath, untitledFile.scheme, hashIdentifier(untitledBackupId));\n\t\t\tconst customFileBackupPath = joinPath(workspaceBackupPath, customFile.scheme, hashIdentifier(customBackupId));\n\n\t\t\t// Prepare backups of the old format without meta\n\t\t\tawait fileService.createFolder(joinPath(workspaceBackupPath, fooFile.scheme));\n\t\t\tawait fileService.createFolder(joinPath(workspaceBackupPath, untitledFile.scheme));\n\t\t\tawait fileService.createFolder(joinPath(workspaceBackupPath, customFile.scheme));\n\t\t\tawait fileService.writeFile(fooBackupPath, VSBuffer.fromString(`${fooFile.toString()} ${JSON.stringify({ foo: 'bar' })}\\ntest file`));\n\t\t\tawait fileService.writeFile(untitledBackupPath, VSBuffer.fromString(`${untitledFile.toString()} ${JSON.stringify({ foo: 'bar' })}\\ntest untitled`));\n\t\t\tawait fileService.writeFile(customFileBackupPath, VSBuffer.fromString(`${customFile.toString()} ${JSON.stringify({ foo: 'bar' })}\\ntest custom`));\n\n\t\t\tservice.reinitialize(workspaceBackupPath);\n\n\t\t\tconst backups = await service.getBackups();\n\t\t\tassert.strictEqual(backups.length, 3);\n\t\t\tassert.ok(backups.some(backup => isEqual(backup.resource, fooFile)));\n\t\t\tassert.ok(backups.some(backup => isEqual(backup.resource, untitledFile)));\n\t\t\tassert.ok(backups.some(backup => isEqual(backup.resource, customFile)));\n\t\t\tassert.ok(backups.every(backup => backup.typeId === ''));\n\t\t});\n\t});\n\n\tensureNoDisposablesAreLeakedInTestSuite();\n});\n"],
  "mappings": "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,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAG;AAAA,QAAG;AAAA,QAAG;AAAA,QAAI;AAAA,QAAG;AAAA,QAAG;AAAA,QAAG;AAAA,QAAI;AAAA,QAAG;AAAA,QAAG;AAAA,QAAG;AAAA,QAAG;AAAA,QAAG;AAAA,QAAI;AAAA,QAAK;AAAA,QAAK;AAAA,QAAK;AAAA,QAAG;AAAA,QAAG;AAAA,QAAG;AAAA,QAAG;AAAA,QAAK;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAG;AAAA,QAAK;AAAA,QAAK;AAAA,QAAI;AAAA,QAAK;AAAA,QAAG;AAAA,QAAG;AAAA,QAAG;AAAA,QAAG;AAAA,QAAK;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAG;AAAA,QAAG;AAAA,QAAK;AAAA,QAAK;AAAA,QAAI;AAAA,QAAK;AAAA,QAAI;AAAA,QAAG;AAAA,QAAG;AAAA,QAAG;AAAA,QAAG;AAAA,QAAG;AAAA,QAAK;AAAA,QAAI;AAAA,QAAI;AAAA,QAAK;AAAA,QAAG;AAAA,QAAG;AAAA,QAAI;AAAA,QAAK;AAAA,QAAG;AAAA,QAAG;AAAA,QAAI;AAAA,QAAK;AAAA,QAAG;AAAA,QAAK;AAAA,QAAK;AAAA,QAAK;AAAA,QAAK;AAAA,QAAG;AAAA,QAAG;AAAA,QAAG;AAAA,QAAI;AAAA,QAAK;AAAA,QAAI;AAAA,QAAI;AAAA,QAAK;AAAA,QAAI;AAAA,QAAK;AAAA,QAAK;AAAA,QAAK;AAAA,QAAI;AAAA,QAAK;AAAA,QAAG;AAAA,QAAI;AAAA,QAAK;AAAA,QAAK;AAAA,QAAK;AAAA,QAAK;AAAA,QAAK;AAAA,QAAI;AAAA,QAAK;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAK;AAAA,QAAK;AAAA,QAAK;AAAA,QAAI;AAAA,QAAK;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAK;AAAA,QAAK;AAAA,QAAI;AAAA,QAAK;AAAA,QAAK;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAK;AAAA,QAAK;AAAA,QAAK;AAAA,QAAK;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAK;AAAA,QAAK;AAAA,QAAK;AAAA,QAAK;AAAA,QAAK;AAAA,QAAK;AAAA,QAAI;AAAA,QAAK;AAAA,QAAK;AAAA,QAAK;AAAA,QAAK;AAAA,QAAI;AAAA,QAAK;AAAA,QAAK;AAAA,QAAI;AAAA,QAAK;AAAA,QAAK;AAAA,QAAK;AAAA,QAAI;AAAA,QAAK;AAAA,QAAI;AAAA,QAAK;AAAA,QAAG;AAAA,QAAG;AAAA,QAAG;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAK;AAAA,QAAK;AAAA,QAAK;AAAA,QAAK;AAAA,QAAI;AAAA,QAAI;AAAA,QAAG;AAAA,QAAG;AAAA,QAAI;AAAA,QAAG;AAAA,QAAI;AAAA,QAAK;AAAA,QAAK;AAAA,QAAI;AAAA,QAAK;AAAA,QAAI;AAAA,QAAK;AAAA,QAAK;AAAA,QAAI;AAAA,QAAG;AAAA,QAAK;AAAA,QAAK;AAAA,QAAK;AAAA,QAAK;AAAA,QAAK;AAAA,QAAK;AAAA,QAAK;AAAA,QAAK;AAAA,QAAK;AAAA,QAAK;AAAA,QAAK;AAAA,QAAK;AAAA,QAAK;AAAA,QAAK;AAAA,QAAK;AAAA,QAAK;AAAA,QAAK;AAAA,QAAK;AAAA,QAAK;AAAA,QAAK;AAAA,QAAK;AAAA,QAAK;AAAA,QAAK;AAAA,QAAK;AAAA,QAAK;AAAA,QAAK;AAAA,QAAK;AAAA,QAAK;AAAA,QAAK;AAAA,QAAK;AAAA,QAAK;AAAA,QAAK;AAAA,QAAK;AAAA,QAAK;AAAA,QAAK;AAAA,QAAK;AAAA,QAAK;AAAA,QAAK;AAAA,QAAK;AAAA,QAAK;AAAA,QAAK;AAAA,QAAK;AAAA,QAAK;AAAA,QAAK;AAAA,QAAK;AAAA,QAAK;AAAA,QAAK;AAAA,QAAK;AAAA,QAAK;AAAA,QAAK;AAAA,QAAK;AAAA,QAAK;AAAA,QAAK;AAAA,QAAK;AAAA,QAAK;AAAA,QAAK;AAAA,QAAK;AAAA,QAAK;AAAA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",
  "names": ["backupPath"]
}
