{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/workingCopy/test/browser/storedFileWorkingCopy.test.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport assert from 'assert';\nimport { Event, Emitter } from '../../../../../base/common/event.js';\nimport { URI } from '../../../../../base/common/uri.js';\nimport { StoredFileWorkingCopy, StoredFileWorkingCopyState, IStoredFileWorkingCopyModel, IStoredFileWorkingCopyModelContentChangedEvent, IStoredFileWorkingCopyModelFactory, isStoredFileWorkingCopySaveEvent, IStoredFileWorkingCopySaveEvent } from '../../common/storedFileWorkingCopy.js';\nimport { bufferToStream, newWriteableBufferStream, streamToBuffer, VSBuffer, VSBufferReadableStream } from '../../../../../base/common/buffer.js';\nimport { CancellationToken } from '../../../../../base/common/cancellation.js';\nimport { Disposable, DisposableStore } from '../../../../../base/common/lifecycle.js';\nimport { getLastResolvedFileStat, TestServiceAccessor, workbenchInstantiationService } from '../../../../test/browser/workbenchTestServices.js';\nimport { IInstantiationService } from '../../../../../platform/instantiation/common/instantiation.js';\nimport { basename } from '../../../../../base/common/resources.js';\nimport { FileChangesEvent, FileChangeType, FileOperationError, FileOperationResult, IFileStatWithMetadata, IWriteFileOptions, NotModifiedSinceFileOperationError } from '../../../../../platform/files/common/files.js';\nimport { SaveReason, SaveSourceRegistry } from '../../../../common/editor.js';\nimport { Promises, timeout } from '../../../../../base/common/async.js';\nimport { consumeReadable, consumeStream, isReadableStream } from '../../../../../base/common/stream.js';\nimport { runWithFakedTimers } from '../../../../../base/test/common/timeTravelScheduler.js';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from '../../../../../base/test/common/utils.js';\nimport { SnapshotContext } from '../../common/fileWorkingCopy.js';\nimport { assertIsDefined } from '../../../../../base/common/types.js';\n\nexport class TestStoredFileWorkingCopyModel extends Disposable implements IStoredFileWorkingCopyModel {\n\n\tprivate readonly _onDidChangeContent = this._register(new Emitter<IStoredFileWorkingCopyModelContentChangedEvent>());\n\treadonly onDidChangeContent = this._onDidChangeContent.event;\n\n\tprivate readonly _onWillDispose = this._register(new Emitter<void>());\n\treadonly onWillDispose = this._onWillDispose.event;\n\n\tconstructor(readonly resource: URI, public contents: string) {\n\t\tsuper();\n\t}\n\n\tfireContentChangeEvent(event: IStoredFileWorkingCopyModelContentChangedEvent): void {\n\t\tthis._onDidChangeContent.fire(event);\n\t}\n\n\tupdateContents(newContents: string): void {\n\t\tthis.doUpdate(newContents);\n\t}\n\n\tprivate throwOnSnapshot = false;\n\tsetThrowOnSnapshot(): void {\n\t\tthis.throwOnSnapshot = true;\n\t}\n\n\tasync snapshot(context: SnapshotContext, token: CancellationToken): Promise<VSBufferReadableStream> {\n\t\tif (this.throwOnSnapshot) {\n\t\t\tthrow new Error('Fail');\n\t\t}\n\n\t\tconst stream = newWriteableBufferStream();\n\t\tstream.end(VSBuffer.fromString(this.contents));\n\n\t\treturn stream;\n\t}\n\n\tasync update(contents: VSBufferReadableStream, token: CancellationToken): Promise<void> {\n\t\tthis.doUpdate((await streamToBuffer(contents)).toString());\n\t}\n\n\tprivate doUpdate(newContents: string): void {\n\t\tthis.contents = newContents;\n\n\t\tthis.versionId++;\n\n\t\tthis._onDidChangeContent.fire({ isRedoing: false, isUndoing: false });\n\t}\n\n\tversionId = 0;\n\n\tpushedStackElement = false;\n\n\tpushStackElement(): void {\n\t\tthis.pushedStackElement = true;\n\t}\n\n\toverride dispose(): void {\n\t\tthis._onWillDispose.fire();\n\n\t\tsuper.dispose();\n\t}\n}\n\nexport class TestStoredFileWorkingCopyModelWithCustomSave extends TestStoredFileWorkingCopyModel {\n\n\tsaveCounter = 0;\n\tthrowOnSave = false;\n\tsaveOperation: Promise<void> | undefined = undefined;\n\n\tasync save(options: IWriteFileOptions, token: CancellationToken): Promise<IFileStatWithMetadata> {\n\t\tif (this.throwOnSave) {\n\t\t\tthrow new Error('Fail');\n\t\t}\n\n\t\tif (this.saveOperation) {\n\t\t\tawait this.saveOperation;\n\t\t}\n\n\t\tif (token.isCancellationRequested) {\n\t\t\tthrow new Error('Canceled');\n\t\t}\n\n\t\tthis.saveCounter++;\n\n\t\treturn {\n\t\t\tresource: this.resource,\n\t\t\tctime: 0,\n\t\t\tetag: '',\n\t\t\tisDirectory: false,\n\t\t\tisFile: true,\n\t\t\tmtime: 0,\n\t\t\tname: 'resource2',\n\t\t\tsize: 0,\n\t\t\tisSymbolicLink: false,\n\t\t\treadonly: false,\n\t\t\tlocked: false,\n\t\t\tchildren: undefined\n\t\t};\n\t}\n}\n\nexport class TestStoredFileWorkingCopyModelFactory implements IStoredFileWorkingCopyModelFactory<TestStoredFileWorkingCopyModel> {\n\n\tasync createModel(resource: URI, contents: VSBufferReadableStream, token: CancellationToken): Promise<TestStoredFileWorkingCopyModel> {\n\t\treturn new TestStoredFileWorkingCopyModel(resource, (await streamToBuffer(contents)).toString());\n\t}\n}\n\nexport class TestStoredFileWorkingCopyModelWithCustomSaveFactory implements IStoredFileWorkingCopyModelFactory<TestStoredFileWorkingCopyModelWithCustomSave> {\n\n\tasync createModel(resource: URI, contents: VSBufferReadableStream, token: CancellationToken): Promise<TestStoredFileWorkingCopyModelWithCustomSave> {\n\t\treturn new TestStoredFileWorkingCopyModelWithCustomSave(resource, (await streamToBuffer(contents)).toString());\n\t}\n}\n\nsuite('StoredFileWorkingCopy (with custom save)', function () {\n\n\tconst factory = new TestStoredFileWorkingCopyModelWithCustomSaveFactory();\n\n\tconst disposables = new DisposableStore();\n\n\tlet instantiationService: IInstantiationService;\n\tlet accessor: TestServiceAccessor;\n\tlet workingCopy: StoredFileWorkingCopy<TestStoredFileWorkingCopyModelWithCustomSave>;\n\n\tsetup(() => {\n\t\tinstantiationService = workbenchInstantiationService(undefined, disposables);\n\t\taccessor = instantiationService.createInstance(TestServiceAccessor);\n\n\t\tconst resource = URI.file('test/resource');\n\t\tworkingCopy = disposables.add(new StoredFileWorkingCopy<TestStoredFileWorkingCopyModelWithCustomSave>('testStoredFileWorkingCopyType', resource, basename(resource), factory, options => workingCopy.resolve(options), accessor.fileService, accessor.logService, accessor.workingCopyFileService, accessor.filesConfigurationService, accessor.workingCopyBackupService, accessor.workingCopyService, accessor.notificationService, accessor.workingCopyEditorService, accessor.editorService, accessor.elevatedFileService, accessor.progressService));\n\t});\n\n\tteardown(() => {\n\t\tdisposables.clear();\n\t});\n\n\ttest('save (custom implemented)', async () => {\n\t\tlet savedCounter = 0;\n\t\tlet lastSaveEvent: IStoredFileWorkingCopySaveEvent | undefined = undefined;\n\t\tdisposables.add(workingCopy.onDidSave(e => {\n\t\t\tsavedCounter++;\n\t\t\tlastSaveEvent = e;\n\t\t}));\n\n\t\tlet saveErrorCounter = 0;\n\t\tdisposables.add(workingCopy.onDidSaveError(() => {\n\t\t\tsaveErrorCounter++;\n\t\t}));\n\n\t\t// unresolved\n\t\tawait workingCopy.save();\n\t\tassert.strictEqual(savedCounter, 0);\n\t\tassert.strictEqual(saveErrorCounter, 0);\n\n\t\t// simple\n\t\tawait workingCopy.resolve();\n\t\tworkingCopy.model?.updateContents('hello save');\n\t\tawait workingCopy.save();\n\n\t\tassert.strictEqual(savedCounter, 1);\n\t\tassert.strictEqual(saveErrorCounter, 0);\n\t\tassert.strictEqual(workingCopy.isDirty(), false);\n\t\tassert.strictEqual(lastSaveEvent!.reason, SaveReason.EXPLICIT);\n\t\tassert.ok(lastSaveEvent!.stat);\n\t\tassert.ok(isStoredFileWorkingCopySaveEvent(lastSaveEvent!));\n\t\tassert.strictEqual(workingCopy.model?.pushedStackElement, true);\n\t\tassert.strictEqual((workingCopy.model as TestStoredFileWorkingCopyModelWithCustomSave).saveCounter, 1);\n\n\t\t// error\n\t\tworkingCopy.model?.updateContents('hello save error');\n\t\t(workingCopy.model as TestStoredFileWorkingCopyModelWithCustomSave).throwOnSave = true;\n\t\tawait workingCopy.save();\n\n\t\tassert.strictEqual(saveErrorCounter, 1);\n\t\tassert.strictEqual(workingCopy.hasState(StoredFileWorkingCopyState.ERROR), true);\n\t});\n\n\ttest('save cancelled (custom implemented)', async () => {\n\t\tlet savedCounter = 0;\n\t\tlet lastSaveEvent: IStoredFileWorkingCopySaveEvent | undefined = undefined;\n\t\tdisposables.add(workingCopy.onDidSave(e => {\n\t\t\tsavedCounter++;\n\t\t\tlastSaveEvent = e;\n\t\t}));\n\n\t\tlet saveErrorCounter = 0;\n\t\tdisposables.add(workingCopy.onDidSaveError(() => {\n\t\t\tsaveErrorCounter++;\n\t\t}));\n\n\t\tawait workingCopy.resolve();\n\t\tlet resolve: () => void;\n\t\t(workingCopy.model as TestStoredFileWorkingCopyModelWithCustomSave).saveOperation = new Promise(r => resolve = r);\n\n\t\tworkingCopy.model?.updateContents('first');\n\t\tconst firstSave = workingCopy.save();\n\t\t// cancel the first save by requesting a second while it is still mid operation\n\t\tworkingCopy.model?.updateContents('second');\n\t\tconst secondSave = workingCopy.save();\n\t\tresolve!();\n\t\tawait firstSave;\n\t\tawait secondSave;\n\n\t\tassert.strictEqual(savedCounter, 1);\n\t\tassert.strictEqual(saveErrorCounter, 0);\n\t\tassert.strictEqual(workingCopy.isDirty(), false);\n\t\tassert.strictEqual(lastSaveEvent!.reason, SaveReason.EXPLICIT);\n\t\tassert.ok(lastSaveEvent!.stat);\n\t\tassert.ok(isStoredFileWorkingCopySaveEvent(lastSaveEvent!));\n\t\tassert.strictEqual(workingCopy.model?.pushedStackElement, true);\n\t\tassert.strictEqual((workingCopy.model as TestStoredFileWorkingCopyModelWithCustomSave).saveCounter, 1);\n\t});\n\n\tensureNoDisposablesAreLeakedInTestSuite();\n});\n\nsuite('StoredFileWorkingCopy', function () {\n\n\tconst factory = new TestStoredFileWorkingCopyModelFactory();\n\n\tconst disposables = new DisposableStore();\n\tconst resource = URI.file('test/resource');\n\tlet instantiationService: IInstantiationService;\n\tlet accessor: TestServiceAccessor;\n\tlet workingCopy: StoredFileWorkingCopy<TestStoredFileWorkingCopyModel>;\n\n\tfunction createWorkingCopy(uri: URI = resource) {\n\t\tconst workingCopy: StoredFileWorkingCopy<TestStoredFileWorkingCopyModel> = new StoredFileWorkingCopy<TestStoredFileWorkingCopyModel>('testStoredFileWorkingCopyType', uri, basename(uri), factory, options => workingCopy.resolve(options), accessor.fileService, accessor.logService, accessor.workingCopyFileService, accessor.filesConfigurationService, accessor.workingCopyBackupService, accessor.workingCopyService, accessor.notificationService, accessor.workingCopyEditorService, accessor.editorService, accessor.elevatedFileService, accessor.progressService);\n\n\t\treturn workingCopy;\n\t}\n\n\tsetup(() => {\n\t\tinstantiationService = workbenchInstantiationService(undefined, disposables);\n\t\taccessor = instantiationService.createInstance(TestServiceAccessor);\n\n\t\tworkingCopy = disposables.add(createWorkingCopy());\n\t});\n\n\tteardown(() => {\n\t\tworkingCopy.dispose();\n\n\t\tfor (const workingCopy of accessor.workingCopyService.workingCopies) {\n\t\t\t(workingCopy as StoredFileWorkingCopy<TestStoredFileWorkingCopyModel>).dispose();\n\t\t}\n\n\t\tdisposables.clear();\n\t});\n\n\ttest('registers with working copy service', async () => {\n\t\tassert.strictEqual(accessor.workingCopyService.workingCopies.length, 1);\n\n\t\tworkingCopy.dispose();\n\n\t\tassert.strictEqual(accessor.workingCopyService.workingCopies.length, 0);\n\t});\n\n\ttest('orphaned tracking', async () => {\n\t\treturn runWithFakedTimers({}, async () => {\n\t\t\tassert.strictEqual(workingCopy.hasState(StoredFileWorkingCopyState.ORPHAN), false);\n\n\t\t\tlet onDidChangeOrphanedPromise = Event.toPromise(workingCopy.onDidChangeOrphaned);\n\t\t\taccessor.fileService.notExistsSet.set(resource, true);\n\t\t\taccessor.fileService.fireFileChanges(new FileChangesEvent([{ resource, type: FileChangeType.DELETED }], false));\n\n\t\t\tawait onDidChangeOrphanedPromise;\n\t\t\tassert.strictEqual(workingCopy.hasState(StoredFileWorkingCopyState.ORPHAN), true);\n\n\t\t\tonDidChangeOrphanedPromise = Event.toPromise(workingCopy.onDidChangeOrphaned);\n\t\t\taccessor.fileService.notExistsSet.delete(resource);\n\t\t\taccessor.fileService.fireFileChanges(new FileChangesEvent([{ resource, type: FileChangeType.ADDED }], false));\n\n\t\t\tawait onDidChangeOrphanedPromise;\n\t\t\tassert.strictEqual(workingCopy.hasState(StoredFileWorkingCopyState.ORPHAN), false);\n\t\t});\n\t});\n\n\ttest('dirty / modified', async () => {\n\t\tassert.strictEqual(workingCopy.isModified(), false);\n\t\tassert.strictEqual(workingCopy.isDirty(), false);\n\t\tassert.strictEqual(workingCopy.hasState(StoredFileWorkingCopyState.DIRTY), false);\n\n\t\tawait workingCopy.resolve();\n\t\tassert.strictEqual(workingCopy.isResolved(), true);\n\n\t\tlet changeDirtyCounter = 0;\n\t\tdisposables.add(workingCopy.onDidChangeDirty(() => {\n\t\t\tchangeDirtyCounter++;\n\t\t}));\n\n\t\tlet contentChangeCounter = 0;\n\t\tdisposables.add(workingCopy.onDidChangeContent(() => {\n\t\t\tcontentChangeCounter++;\n\t\t}));\n\n\t\tlet savedCounter = 0;\n\t\tdisposables.add(workingCopy.onDidSave(() => {\n\t\t\tsavedCounter++;\n\t\t}));\n\n\t\t// Dirty from: Model content change\n\t\tworkingCopy.model?.updateContents('hello dirty');\n\t\tassert.strictEqual(contentChangeCounter, 1);\n\n\t\tassert.strictEqual(workingCopy.isModified(), true);\n\t\tassert.strictEqual(workingCopy.isDirty(), true);\n\t\tassert.strictEqual(workingCopy.hasState(StoredFileWorkingCopyState.DIRTY), true);\n\t\tassert.strictEqual(changeDirtyCounter, 1);\n\n\t\tawait workingCopy.save();\n\n\t\tassert.strictEqual(workingCopy.isModified(), false);\n\t\tassert.strictEqual(workingCopy.isDirty(), false);\n\t\tassert.strictEqual(workingCopy.hasState(StoredFileWorkingCopyState.DIRTY), false);\n\t\tassert.strictEqual(changeDirtyCounter, 2);\n\t\tassert.strictEqual(savedCounter, 1);\n\n\t\t// Dirty from: Initial contents\n\t\tawait workingCopy.resolve({ contents: bufferToStream(VSBuffer.fromString('hello dirty stream')) });\n\n\t\tassert.strictEqual(contentChangeCounter, 2); // content of model did not change\n\t\tassert.strictEqual(workingCopy.isModified(), true);\n\t\tassert.strictEqual(workingCopy.isDirty(), true);\n\t\tassert.strictEqual(workingCopy.hasState(StoredFileWorkingCopyState.DIRTY), true);\n\t\tassert.strictEqual(changeDirtyCounter, 3);\n\n\t\tawait workingCopy.revert({ soft: true });\n\n\t\tassert.strictEqual(workingCopy.isModified(), false);\n\t\tassert.strictEqual(workingCopy.isDirty(), false);\n\t\tassert.strictEqual(workingCopy.hasState(StoredFileWorkingCopyState.DIRTY), false);\n\t\tassert.strictEqual(changeDirtyCounter, 4);\n\n\t\t// Modified from: API\n\t\tworkingCopy.markModified();\n\n\t\tassert.strictEqual(workingCopy.isModified(), true);\n\t\tassert.strictEqual(workingCopy.isDirty(), true);\n\t\tassert.strictEqual(workingCopy.hasState(StoredFileWorkingCopyState.DIRTY), true);\n\t\tassert.strictEqual(changeDirtyCounter, 5);\n\n\t\tawait workingCopy.revert();\n\n\t\tassert.strictEqual(workingCopy.isModified(), false);\n\t\tassert.strictEqual(workingCopy.isDirty(), false);\n\t\tassert.strictEqual(workingCopy.hasState(StoredFileWorkingCopyState.DIRTY), false);\n\t\tassert.strictEqual(changeDirtyCounter, 6);\n\t});\n\n\ttest('dirty - working copy marks non-dirty when undo reaches saved version ID', async () => {\n\t\tawait workingCopy.resolve();\n\n\t\tworkingCopy.model?.updateContents('hello saved state');\n\t\tawait workingCopy.save();\n\t\tassert.strictEqual(workingCopy.isDirty(), false);\n\n\t\tworkingCopy.model?.updateContents('changing content once');\n\t\tassert.strictEqual(workingCopy.isDirty(), true);\n\n\t\t// Simulate an undo that goes back to the last (saved) version ID\n\t\tworkingCopy.model!.versionId--;\n\n\t\tworkingCopy.model?.fireContentChangeEvent({ isRedoing: false, isUndoing: true });\n\t\tassert.strictEqual(workingCopy.isDirty(), false);\n\t});\n\n\ttest('resolve (without backup)', async () => {\n\t\tlet onDidResolveCounter = 0;\n\t\tdisposables.add(workingCopy.onDidResolve(() => {\n\t\t\tonDidResolveCounter++;\n\t\t}));\n\n\t\t// resolve from file\n\t\tawait workingCopy.resolve();\n\t\tassert.strictEqual(workingCopy.isResolved(), true);\n\t\tassert.strictEqual(onDidResolveCounter, 1);\n\t\tassert.strictEqual(workingCopy.model?.contents, 'Hello Html');\n\n\t\t// dirty resolve returns early\n\t\tworkingCopy.model?.updateContents('hello resolve');\n\t\tassert.strictEqual(workingCopy.isDirty(), true);\n\t\tawait workingCopy.resolve();\n\t\tassert.strictEqual(onDidResolveCounter, 1);\n\t\tassert.strictEqual(workingCopy.model?.contents, 'hello resolve');\n\n\t\t// dirty resolve with contents updates contents\n\t\tawait workingCopy.resolve({ contents: bufferToStream(VSBuffer.fromString('hello initial contents')) });\n\t\tassert.strictEqual(workingCopy.isDirty(), true);\n\t\tassert.strictEqual(workingCopy.model?.contents, 'hello initial contents');\n\t\tassert.strictEqual(onDidResolveCounter, 2);\n\n\t\t// resolve with pending save returns directly\n\t\tconst pendingSave = workingCopy.save();\n\t\tawait workingCopy.resolve();\n\t\tawait pendingSave;\n\t\tassert.strictEqual(workingCopy.isDirty(), false);\n\t\tassert.strictEqual(workingCopy.model?.contents, 'hello initial contents');\n\t\tassert.strictEqual(onDidResolveCounter, 2);\n\n\t\t// disposed resolve is not throwing an error\n\t\tworkingCopy.dispose();\n\t\tawait workingCopy.resolve();\n\t\tassert.strictEqual(workingCopy.isDisposed(), true);\n\t\tassert.strictEqual(onDidResolveCounter, 2);\n\t});\n\n\ttest('resolve (with backup)', async () => {\n\t\tawait workingCopy.resolve({ contents: bufferToStream(VSBuffer.fromString('hello backup')) });\n\n\t\tconst backup = await workingCopy.backup(CancellationToken.None);\n\t\tawait accessor.workingCopyBackupService.backup(workingCopy, backup.content, undefined, backup.meta);\n\n\t\tassert.strictEqual(accessor.workingCopyBackupService.hasBackupSync(workingCopy), true);\n\n\t\tworkingCopy.dispose();\n\n\t\t// first resolve loads from backup\n\t\tworkingCopy = createWorkingCopy();\n\t\tawait workingCopy.resolve();\n\n\t\tassert.strictEqual(workingCopy.isDirty(), true);\n\t\tassert.strictEqual(workingCopy.isReadonly(), false);\n\t\tassert.strictEqual(workingCopy.model?.contents, 'hello backup');\n\n\t\tworkingCopy.model.updateContents('hello updated');\n\t\tawait workingCopy.save();\n\n\t\t// subsequent resolve ignores any backups\n\t\tawait workingCopy.resolve();\n\n\t\tassert.strictEqual(workingCopy.isDirty(), false);\n\t\tassert.strictEqual(workingCopy.model?.contents, 'Hello Html');\n\t});\n\n\ttest('resolve (with backup, preserves metadata and orphaned state)', async () => {\n\t\treturn runWithFakedTimers({}, async () => {\n\t\t\tawait workingCopy.resolve({ contents: bufferToStream(VSBuffer.fromString('hello backup')) });\n\n\t\t\tconst orphanedPromise = Event.toPromise(workingCopy.onDidChangeOrphaned);\n\n\t\t\taccessor.fileService.notExistsSet.set(resource, true);\n\t\t\taccessor.fileService.fireFileChanges(new FileChangesEvent([{ resource, type: FileChangeType.DELETED }], false));\n\n\t\t\tawait orphanedPromise;\n\t\t\tassert.strictEqual(workingCopy.hasState(StoredFileWorkingCopyState.ORPHAN), true);\n\n\t\t\tconst backup = await workingCopy.backup(CancellationToken.None);\n\t\t\tawait accessor.workingCopyBackupService.backup(workingCopy, backup.content, undefined, backup.meta);\n\n\t\t\tassert.strictEqual(accessor.workingCopyBackupService.hasBackupSync(workingCopy), true);\n\n\t\t\tworkingCopy.dispose();\n\n\t\t\tworkingCopy = createWorkingCopy();\n\t\t\tawait workingCopy.resolve();\n\n\t\t\tassert.strictEqual(workingCopy.hasState(StoredFileWorkingCopyState.ORPHAN), true);\n\n\t\t\tconst backup2 = await workingCopy.backup(CancellationToken.None);\n\t\t\tassert.deepStrictEqual(backup.meta, backup2.meta);\n\t\t});\n\t});\n\n\ttest('resolve (updates orphaned state accordingly)', async () => {\n\t\treturn runWithFakedTimers({}, async () => {\n\t\t\tawait workingCopy.resolve();\n\n\t\t\tconst orphanedPromise = Event.toPromise(workingCopy.onDidChangeOrphaned);\n\n\t\t\taccessor.fileService.notExistsSet.set(resource, true);\n\t\t\taccessor.fileService.fireFileChanges(new FileChangesEvent([{ resource, type: FileChangeType.DELETED }], false));\n\n\t\t\tawait orphanedPromise;\n\t\t\tassert.strictEqual(workingCopy.hasState(StoredFileWorkingCopyState.ORPHAN), true);\n\n\t\t\t// resolving clears orphaned state when successful\n\t\t\taccessor.fileService.notExistsSet.delete(resource);\n\t\t\tawait workingCopy.resolve({ forceReadFromFile: true });\n\t\t\tassert.strictEqual(workingCopy.hasState(StoredFileWorkingCopyState.ORPHAN), false);\n\n\t\t\t// resolving adds orphaned state when fail to read\n\t\t\ttry {\n\t\t\t\taccessor.fileService.readShouldThrowError = new FileOperationError('file not found', FileOperationResult.FILE_NOT_FOUND);\n\t\t\t\tawait workingCopy.resolve();\n\t\t\t\tassert.strictEqual(workingCopy.hasState(StoredFileWorkingCopyState.ORPHAN), true);\n\t\t\t} finally {\n\t\t\t\taccessor.fileService.readShouldThrowError = undefined;\n\t\t\t}\n\t\t});\n\t});\n\n\ttest('stat.readonly and stat.locked can change when decreased mtime is ignored', async function () {\n\n\t\tawait workingCopy.resolve();\n\n\t\tconst stat = assertIsDefined(getLastResolvedFileStat(workingCopy));\n\t\ttry {\n\t\t\taccessor.fileService.readShouldThrowError = new NotModifiedSinceFileOperationError('error', { ...stat, mtime: stat.mtime - 1, readonly: !stat.readonly, locked: !stat.locked });\n\t\t\tawait workingCopy.resolve();\n\t\t} finally {\n\t\t\taccessor.fileService.readShouldThrowError = undefined;\n\t\t}\n\n\t\tassert.strictEqual(getLastResolvedFileStat(workingCopy)?.mtime, stat.mtime, 'mtime should not decrease');\n\t\tassert.notStrictEqual(getLastResolvedFileStat(workingCopy)?.readonly, stat.readonly, 'readonly should have changed despite simultaneous attempt to decrease mtime');\n\t\tassert.notStrictEqual(getLastResolvedFileStat(workingCopy)?.locked, stat.locked, 'locked should have changed despite simultaneous attempt to decrease mtime');\n\t});\n\n\ttest('resolve (FILE_NOT_MODIFIED_SINCE can be handled for resolved working copies)', async () => {\n\t\tawait workingCopy.resolve();\n\n\t\ttry {\n\t\t\taccessor.fileService.readShouldThrowError = new FileOperationError('file not modified since', FileOperationResult.FILE_NOT_MODIFIED_SINCE);\n\t\t\tawait workingCopy.resolve();\n\t\t} finally {\n\t\t\taccessor.fileService.readShouldThrowError = undefined;\n\t\t}\n\n\t\tassert.strictEqual(workingCopy.model?.contents, 'Hello Html');\n\t});\n\n\ttest('resolve (FILE_NOT_MODIFIED_SINCE still updates readonly state)', async () => {\n\t\tlet readonlyChangeCounter = 0;\n\t\tdisposables.add(workingCopy.onDidChangeReadonly(() => readonlyChangeCounter++));\n\n\t\tawait workingCopy.resolve();\n\n\t\tassert.strictEqual(workingCopy.isReadonly(), false);\n\n\t\tconst stat = await accessor.fileService.resolve(workingCopy.resource, { resolveMetadata: true });\n\n\t\ttry {\n\t\t\taccessor.fileService.readShouldThrowError = new NotModifiedSinceFileOperationError('file not modified since', { ...stat, readonly: true });\n\t\t\tawait workingCopy.resolve();\n\t\t} finally {\n\t\t\taccessor.fileService.readShouldThrowError = undefined;\n\t\t}\n\n\t\tassert.strictEqual(!!workingCopy.isReadonly(), true);\n\t\tassert.strictEqual(readonlyChangeCounter, 1);\n\n\t\ttry {\n\t\t\taccessor.fileService.readShouldThrowError = new NotModifiedSinceFileOperationError('file not modified since', { ...stat, readonly: false });\n\t\t\tawait workingCopy.resolve();\n\t\t} finally {\n\t\t\taccessor.fileService.readShouldThrowError = undefined;\n\t\t}\n\n\t\tassert.strictEqual(workingCopy.isReadonly(), false);\n\t\tassert.strictEqual(readonlyChangeCounter, 2);\n\t});\n\n\ttest('resolve does not alter content when model content changed in parallel', async () => {\n\t\tawait workingCopy.resolve();\n\n\t\tconst resolvePromise = workingCopy.resolve();\n\n\t\tworkingCopy.model?.updateContents('changed content');\n\n\t\tawait resolvePromise;\n\n\t\tassert.strictEqual(workingCopy.isDirty(), true);\n\t\tassert.strictEqual(workingCopy.model?.contents, 'changed content');\n\t});\n\n\ttest('backup', async () => {\n\t\tawait workingCopy.resolve();\n\t\tworkingCopy.model?.updateContents('hello backup');\n\n\t\tconst backup = await workingCopy.backup(CancellationToken.None);\n\n\t\tassert.ok(backup.meta);\n\n\t\tlet backupContents: string | undefined = undefined;\n\t\tif (backup.content instanceof VSBuffer) {\n\t\t\tbackupContents = backup.content.toString();\n\t\t} else if (isReadableStream(backup.content)) {\n\t\t\tbackupContents = (await consumeStream(backup.content, chunks => VSBuffer.concat(chunks))).toString();\n\t\t} else if (backup.content) {\n\t\t\tbackupContents = consumeReadable(backup.content, chunks => VSBuffer.concat(chunks)).toString();\n\t\t}\n\n\t\tassert.strictEqual(backupContents, 'hello backup');\n\t});\n\n\ttest('save (no errors) - simple', async () => {\n\t\tlet savedCounter = 0;\n\t\tlet lastSaveEvent: IStoredFileWorkingCopySaveEvent | undefined = undefined;\n\t\tdisposables.add(workingCopy.onDidSave(e => {\n\t\t\tsavedCounter++;\n\t\t\tlastSaveEvent = e;\n\t\t}));\n\n\t\tlet saveErrorCounter = 0;\n\t\tdisposables.add(workingCopy.onDidSaveError(() => {\n\t\t\tsaveErrorCounter++;\n\t\t}));\n\n\t\t// unresolved\n\t\tawait workingCopy.save();\n\t\tassert.strictEqual(savedCounter, 0);\n\t\tassert.strictEqual(saveErrorCounter, 0);\n\n\t\t// simple\n\t\tawait workingCopy.resolve();\n\t\tworkingCopy.model?.updateContents('hello save');\n\t\tawait workingCopy.save();\n\n\t\tassert.strictEqual(savedCounter, 1);\n\t\tassert.strictEqual(saveErrorCounter, 0);\n\t\tassert.strictEqual(workingCopy.isDirty(), false);\n\t\tassert.strictEqual(lastSaveEvent!.reason, SaveReason.EXPLICIT);\n\t\tassert.ok(lastSaveEvent!.stat);\n\t\tassert.ok(isStoredFileWorkingCopySaveEvent(lastSaveEvent!));\n\t\tassert.strictEqual(workingCopy.model?.pushedStackElement, true);\n\t});\n\n\ttest('save (no errors) - save reason', async () => {\n\t\tlet savedCounter = 0;\n\t\tlet lastSaveEvent: IStoredFileWorkingCopySaveEvent | undefined = undefined;\n\t\tdisposables.add(workingCopy.onDidSave(e => {\n\t\t\tsavedCounter++;\n\t\t\tlastSaveEvent = e;\n\t\t}));\n\n\t\tlet saveErrorCounter = 0;\n\t\tdisposables.add(workingCopy.onDidSaveError(() => {\n\t\t\tsaveErrorCounter++;\n\t\t}));\n\n\t\t// save reason\n\t\tawait workingCopy.resolve();\n\t\tworkingCopy.model?.updateContents('hello save');\n\n\t\tconst source = SaveSourceRegistry.registerSource('testSource', 'Hello Save');\n\t\tawait workingCopy.save({ reason: SaveReason.AUTO, source });\n\n\t\tassert.strictEqual(savedCounter, 1);\n\t\tassert.strictEqual(saveErrorCounter, 0);\n\t\tassert.strictEqual(workingCopy.isDirty(), false);\n\t\tassert.strictEqual(lastSaveEvent!.reason, SaveReason.AUTO);\n\t\tassert.strictEqual(lastSaveEvent!.source, source);\n\t});\n\n\ttest('save (no errors) - multiple', async () => {\n\t\tlet savedCounter = 0;\n\t\tdisposables.add(workingCopy.onDidSave(e => {\n\t\t\tsavedCounter++;\n\t\t}));\n\n\t\tlet saveErrorCounter = 0;\n\t\tdisposables.add(workingCopy.onDidSaveError(() => {\n\t\t\tsaveErrorCounter++;\n\t\t}));\n\n\t\t// multiple saves in parallel are fine and result\n\t\t// in a single save when content does not change\n\t\tawait workingCopy.resolve();\n\t\tworkingCopy.model?.updateContents('hello save');\n\t\tawait Promises.settled([\n\t\t\tworkingCopy.save({ reason: SaveReason.AUTO }),\n\t\t\tworkingCopy.save({ reason: SaveReason.EXPLICIT }),\n\t\t\tworkingCopy.save({ reason: SaveReason.WINDOW_CHANGE })\n\t\t]);\n\n\t\tassert.strictEqual(savedCounter, 1);\n\t\tassert.strictEqual(saveErrorCounter, 0);\n\t\tassert.strictEqual(workingCopy.isDirty(), false);\n\t});\n\n\ttest('save (no errors) - multiple, cancellation', async () => {\n\t\tlet savedCounter = 0;\n\t\tdisposables.add(workingCopy.onDidSave(e => {\n\t\t\tsavedCounter++;\n\t\t}));\n\n\t\tlet saveErrorCounter = 0;\n\t\tdisposables.add(workingCopy.onDidSaveError(() => {\n\t\t\tsaveErrorCounter++;\n\t\t}));\n\n\t\t// multiple saves in parallel are fine and result\n\t\t// in just one save operation (the second one\n\t\t// cancels the first)\n\t\tawait workingCopy.resolve();\n\t\tworkingCopy.model?.updateContents('hello save');\n\t\tconst firstSave = workingCopy.save();\n\t\tworkingCopy.model?.updateContents('hello save more');\n\t\tconst secondSave = workingCopy.save();\n\n\t\tawait Promises.settled([firstSave, secondSave]);\n\t\tassert.strictEqual(savedCounter, 1);\n\t\tassert.strictEqual(saveErrorCounter, 0);\n\t\tassert.strictEqual(workingCopy.isDirty(), false);\n\t});\n\n\ttest('save (no errors) - not forced but not dirty', async () => {\n\t\tlet savedCounter = 0;\n\t\tdisposables.add(workingCopy.onDidSave(e => {\n\t\t\tsavedCounter++;\n\t\t}));\n\n\t\tlet saveErrorCounter = 0;\n\t\tdisposables.add(workingCopy.onDidSaveError(() => {\n\t\t\tsaveErrorCounter++;\n\t\t}));\n\n\t\t// no save when not forced and not dirty\n\t\tawait workingCopy.resolve();\n\t\tawait workingCopy.save();\n\t\tassert.strictEqual(savedCounter, 0);\n\t\tassert.strictEqual(saveErrorCounter, 0);\n\t\tassert.strictEqual(workingCopy.isDirty(), false);\n\t});\n\n\ttest('save (no errors) - forced but not dirty', async () => {\n\t\tlet savedCounter = 0;\n\t\tdisposables.add(workingCopy.onDidSave(e => {\n\t\t\tsavedCounter++;\n\t\t}));\n\n\t\tlet saveErrorCounter = 0;\n\t\tdisposables.add(workingCopy.onDidSaveError(() => {\n\t\t\tsaveErrorCounter++;\n\t\t}));\n\n\t\t// save when forced even when not dirty\n\t\tawait workingCopy.resolve();\n\t\tawait workingCopy.save({ force: true });\n\t\tassert.strictEqual(savedCounter, 1);\n\t\tassert.strictEqual(saveErrorCounter, 0);\n\t\tassert.strictEqual(workingCopy.isDirty(), false);\n\t});\n\n\ttest('save (no errors) - save clears orphaned', async () => {\n\t\treturn runWithFakedTimers({}, async () => {\n\t\t\tlet savedCounter = 0;\n\t\t\tdisposables.add(workingCopy.onDidSave(e => {\n\t\t\t\tsavedCounter++;\n\t\t\t}));\n\n\t\t\tlet saveErrorCounter = 0;\n\t\t\tdisposables.add(workingCopy.onDidSaveError(() => {\n\t\t\t\tsaveErrorCounter++;\n\t\t\t}));\n\n\t\t\tawait workingCopy.resolve();\n\n\t\t\t// save clears orphaned\n\t\t\tconst orphanedPromise = Event.toPromise(workingCopy.onDidChangeOrphaned);\n\n\t\t\taccessor.fileService.notExistsSet.set(resource, true);\n\t\t\taccessor.fileService.fireFileChanges(new FileChangesEvent([{ resource, type: FileChangeType.DELETED }], false));\n\n\t\t\tawait orphanedPromise;\n\t\t\tassert.strictEqual(workingCopy.hasState(StoredFileWorkingCopyState.ORPHAN), true);\n\n\t\t\tawait workingCopy.save({ force: true });\n\t\t\tassert.strictEqual(savedCounter, 1);\n\t\t\tassert.strictEqual(saveErrorCounter, 0);\n\t\t\tassert.strictEqual(workingCopy.isDirty(), false);\n\t\t\tassert.strictEqual(workingCopy.hasState(StoredFileWorkingCopyState.ORPHAN), false);\n\t\t});\n\t});\n\n\ttest('save (errors)', async () => {\n\t\tlet savedCounter = 0;\n\t\tdisposables.add(workingCopy.onDidSave(reason => {\n\t\t\tsavedCounter++;\n\t\t}));\n\n\t\tlet saveErrorCounter = 0;\n\t\tdisposables.add(workingCopy.onDidSaveError(() => {\n\t\t\tsaveErrorCounter++;\n\t\t}));\n\n\t\tawait workingCopy.resolve();\n\n\t\t// save error: any error marks working copy dirty\n\t\ttry {\n\t\t\taccessor.fileService.writeShouldThrowError = new FileOperationError('write error', FileOperationResult.FILE_PERMISSION_DENIED);\n\n\t\t\tawait workingCopy.save({ force: true });\n\t\t} finally {\n\t\t\taccessor.fileService.writeShouldThrowError = undefined;\n\t\t}\n\n\t\tassert.strictEqual(savedCounter, 0);\n\t\tassert.strictEqual(saveErrorCounter, 1);\n\t\tassert.strictEqual(workingCopy.hasState(StoredFileWorkingCopyState.ERROR), true);\n\t\tassert.strictEqual(workingCopy.hasState(StoredFileWorkingCopyState.SAVED), false);\n\t\tassert.strictEqual(workingCopy.hasState(StoredFileWorkingCopyState.PENDING_SAVE), false);\n\t\tassert.strictEqual(workingCopy.hasState(StoredFileWorkingCopyState.CONFLICT), false);\n\t\tassert.strictEqual(workingCopy.isDirty(), true);\n\n\t\t// save is a no-op unless forced when in error case\n\t\tawait workingCopy.save({ reason: SaveReason.AUTO });\n\t\tassert.strictEqual(savedCounter, 0);\n\t\tassert.strictEqual(saveErrorCounter, 1);\n\t\tassert.strictEqual(workingCopy.hasState(StoredFileWorkingCopyState.ERROR), true);\n\t\tassert.strictEqual(workingCopy.hasState(StoredFileWorkingCopyState.SAVED), false);\n\t\tassert.strictEqual(workingCopy.hasState(StoredFileWorkingCopyState.PENDING_SAVE), false);\n\t\tassert.strictEqual(workingCopy.hasState(StoredFileWorkingCopyState.CONFLICT), false);\n\t\tassert.strictEqual(workingCopy.isDirty(), true);\n\n\t\t// save clears error flags when successful\n\t\tawait workingCopy.save({ reason: SaveReason.EXPLICIT });\n\t\tassert.strictEqual(savedCounter, 1);\n\t\tassert.strictEqual(saveErrorCounter, 1);\n\t\tassert.strictEqual(workingCopy.hasState(StoredFileWorkingCopyState.ERROR), false);\n\t\tassert.strictEqual(workingCopy.hasState(StoredFileWorkingCopyState.SAVED), true);\n\t\tassert.strictEqual(workingCopy.hasState(StoredFileWorkingCopyState.PENDING_SAVE), false);\n\t\tassert.strictEqual(workingCopy.hasState(StoredFileWorkingCopyState.CONFLICT), false);\n\t\tassert.strictEqual(workingCopy.isDirty(), false);\n\n\t\t// save error: conflict\n\t\ttry {\n\t\t\taccessor.fileService.writeShouldThrowError = new FileOperationError('write error conflict', FileOperationResult.FILE_MODIFIED_SINCE);\n\n\t\t\tawait workingCopy.save({ force: true });\n\t\t} catch (error) {\n\t\t\t// error is expected\n\t\t} finally {\n\t\t\taccessor.fileService.writeShouldThrowError = undefined;\n\t\t}\n\n\t\tassert.strictEqual(savedCounter, 1);\n\t\tassert.strictEqual(saveErrorCounter, 2);\n\t\tassert.strictEqual(workingCopy.hasState(StoredFileWorkingCopyState.ERROR), true);\n\t\tassert.strictEqual(workingCopy.hasState(StoredFileWorkingCopyState.SAVED), false);\n\t\tassert.strictEqual(workingCopy.hasState(StoredFileWorkingCopyState.PENDING_SAVE), false);\n\t\tassert.strictEqual(workingCopy.hasState(StoredFileWorkingCopyState.CONFLICT), true);\n\t\tassert.strictEqual(workingCopy.isDirty(), true);\n\n\t\t// save clears error flags when successful\n\t\tawait workingCopy.save({ reason: SaveReason.EXPLICIT });\n\t\tassert.strictEqual(savedCounter, 2);\n\t\tassert.strictEqual(saveErrorCounter, 2);\n\t\tassert.strictEqual(workingCopy.hasState(StoredFileWorkingCopyState.ERROR), false);\n\t\tassert.strictEqual(workingCopy.hasState(StoredFileWorkingCopyState.SAVED), true);\n\t\tassert.strictEqual(workingCopy.hasState(StoredFileWorkingCopyState.PENDING_SAVE), false);\n\t\tassert.strictEqual(workingCopy.hasState(StoredFileWorkingCopyState.CONFLICT), false);\n\t\tassert.strictEqual(workingCopy.isDirty(), false);\n\t});\n\n\ttest('save (errors, bubbles up with `ignoreErrorHandler`)', async () => {\n\t\tawait workingCopy.resolve();\n\n\t\tlet error: Error | undefined = undefined;\n\t\ttry {\n\t\t\taccessor.fileService.writeShouldThrowError = new FileOperationError('write error', FileOperationResult.FILE_PERMISSION_DENIED);\n\n\t\t\tawait workingCopy.save({ force: true, ignoreErrorHandler: true });\n\t\t} catch (e) {\n\t\t\terror = e;\n\t\t} finally {\n\t\t\taccessor.fileService.writeShouldThrowError = undefined;\n\t\t}\n\n\t\tassert.ok(error);\n\t});\n\n\ttest('save - returns false when save fails', async function () {\n\t\tawait workingCopy.resolve();\n\n\t\ttry {\n\t\t\taccessor.fileService.writeShouldThrowError = new FileOperationError('write error', FileOperationResult.FILE_PERMISSION_DENIED);\n\n\t\t\tconst res = await workingCopy.save({ force: true });\n\t\t\tassert.strictEqual(res, false);\n\t\t} finally {\n\t\t\taccessor.fileService.writeShouldThrowError = undefined;\n\t\t}\n\n\t\tconst res = await workingCopy.save({ force: true });\n\t\tassert.strictEqual(res, true);\n\t});\n\n\ttest('save participant', async () => {\n\t\tawait workingCopy.resolve();\n\n\t\tassert.strictEqual(accessor.workingCopyFileService.hasSaveParticipants, false);\n\n\t\tlet participationCounter = 0;\n\t\tconst disposable = accessor.workingCopyFileService.addSaveParticipant({\n\t\t\tparticipate: async (wc) => {\n\t\t\t\tif (workingCopy === wc) {\n\t\t\t\t\tparticipationCounter++;\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tassert.strictEqual(accessor.workingCopyFileService.hasSaveParticipants, true);\n\n\t\tawait workingCopy.save({ force: true });\n\t\tassert.strictEqual(participationCounter, 1);\n\n\t\tawait workingCopy.save({ force: true, skipSaveParticipants: true });\n\t\tassert.strictEqual(participationCounter, 1);\n\n\t\tdisposable.dispose();\n\t\tassert.strictEqual(accessor.workingCopyFileService.hasSaveParticipants, false);\n\n\t\tawait workingCopy.save({ force: true });\n\t\tassert.strictEqual(participationCounter, 1);\n\t});\n\n\ttest('Save Participant, calling save from within is unsupported but does not explode (sync save)', async function () {\n\t\tawait workingCopy.resolve();\n\n\t\tawait testSaveFromSaveParticipant(workingCopy, false);\n\t});\n\n\ttest('Save Participant, calling save from within is unsupported but does not explode (async save)', async function () {\n\t\tawait workingCopy.resolve();\n\n\t\tawait testSaveFromSaveParticipant(workingCopy, true);\n\t});\n\n\tasync function testSaveFromSaveParticipant(workingCopy: StoredFileWorkingCopy<TestStoredFileWorkingCopyModel>, async: boolean): Promise<void> {\n\t\tconst from = URI.file('testFrom');\n\t\tassert.strictEqual(accessor.workingCopyFileService.hasSaveParticipants, false);\n\n\t\tconst disposable = accessor.workingCopyFileService.addSaveParticipant({\n\t\t\tparticipate: async (wc, context) => {\n\n\t\t\t\tif (async) {\n\t\t\t\t\tawait timeout(10);\n\t\t\t\t}\n\n\t\t\t\tawait workingCopy.save({ force: true });\n\t\t\t}\n\t\t});\n\n\t\tassert.strictEqual(accessor.workingCopyFileService.hasSaveParticipants, true);\n\n\t\tawait workingCopy.save({ force: true, from });\n\n\t\tdisposable.dispose();\n\t}\n\n\ttest('Save Participant carries context', async function () {\n\t\tawait workingCopy.resolve();\n\n\t\tconst from = URI.file('testFrom');\n\t\tassert.strictEqual(accessor.workingCopyFileService.hasSaveParticipants, false);\n\n\t\tlet e: Error | undefined = undefined;\n\t\tconst disposable = accessor.workingCopyFileService.addSaveParticipant({\n\t\t\tparticipate: async (wc, context) => {\n\t\t\t\ttry {\n\t\t\t\t\tassert.strictEqual(context.reason, SaveReason.EXPLICIT);\n\t\t\t\t\tassert.strictEqual(context.savedFrom?.toString(), from.toString());\n\t\t\t\t} catch (error) {\n\t\t\t\t\te = error;\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tassert.strictEqual(accessor.workingCopyFileService.hasSaveParticipants, true);\n\n\t\tawait workingCopy.save({ force: true, from });\n\n\t\tif (e) {\n\t\t\tthrow e;\n\t\t}\n\n\t\tdisposable.dispose();\n\t});\n\n\ttest('revert', async () => {\n\t\tawait workingCopy.resolve();\n\t\tworkingCopy.model?.updateContents('hello revert');\n\n\t\tlet revertedCounter = 0;\n\t\tdisposables.add(workingCopy.onDidRevert(() => {\n\t\t\trevertedCounter++;\n\t\t}));\n\n\t\t// revert: soft\n\t\tawait workingCopy.revert({ soft: true });\n\n\t\tassert.strictEqual(revertedCounter, 1);\n\t\tassert.strictEqual(workingCopy.isDirty(), false);\n\t\tassert.strictEqual(workingCopy.model?.contents, 'hello revert');\n\n\t\t// revert: not forced\n\t\tawait workingCopy.revert();\n\t\tassert.strictEqual(revertedCounter, 1);\n\t\tassert.strictEqual(workingCopy.model?.contents, 'hello revert');\n\n\t\t// revert: forced\n\t\tawait workingCopy.revert({ force: true });\n\t\tassert.strictEqual(revertedCounter, 2);\n\t\tassert.strictEqual(workingCopy.model?.contents, 'Hello Html');\n\n\t\t// revert: forced, error\n\t\ttry {\n\t\t\tworkingCopy.model?.updateContents('hello revert');\n\t\t\taccessor.fileService.readShouldThrowError = new FileOperationError('error', FileOperationResult.FILE_PERMISSION_DENIED);\n\n\t\t\tawait workingCopy.revert({ force: true });\n\t\t} catch (error) {\n\t\t\t// expected (our error)\n\t\t} finally {\n\t\t\taccessor.fileService.readShouldThrowError = undefined;\n\t\t}\n\n\t\tassert.strictEqual(revertedCounter, 2);\n\t\tassert.strictEqual(workingCopy.isDirty(), true);\n\n\t\t// revert: forced, file not found error is ignored\n\t\ttry {\n\t\t\tworkingCopy.model?.updateContents('hello revert');\n\t\t\taccessor.fileService.readShouldThrowError = new FileOperationError('error', FileOperationResult.FILE_NOT_FOUND);\n\n\t\t\tawait workingCopy.revert({ force: true });\n\t\t} catch (error) {\n\t\t\t// expected (our error)\n\t\t} finally {\n\t\t\taccessor.fileService.readShouldThrowError = undefined;\n\t\t}\n\n\t\tassert.strictEqual(revertedCounter, 3);\n\t\tassert.strictEqual(workingCopy.isDirty(), false);\n\t});\n\n\ttest('state', async () => {\n\t\tassert.strictEqual(workingCopy.hasState(StoredFileWorkingCopyState.SAVED), true);\n\n\t\tawait workingCopy.resolve({ contents: bufferToStream(VSBuffer.fromString('hello state')) });\n\t\tassert.strictEqual(workingCopy.hasState(StoredFileWorkingCopyState.DIRTY), true);\n\n\t\tconst savePromise = workingCopy.save();\n\t\tassert.strictEqual(workingCopy.hasState(StoredFileWorkingCopyState.DIRTY), true);\n\t\tassert.strictEqual(workingCopy.hasState(StoredFileWorkingCopyState.SAVED), false);\n\t\tassert.strictEqual(workingCopy.hasState(StoredFileWorkingCopyState.PENDING_SAVE), true);\n\n\t\tawait savePromise;\n\n\t\tassert.strictEqual(workingCopy.hasState(StoredFileWorkingCopyState.DIRTY), false);\n\t\tassert.strictEqual(workingCopy.hasState(StoredFileWorkingCopyState.SAVED), true);\n\t\tassert.strictEqual(workingCopy.hasState(StoredFileWorkingCopyState.PENDING_SAVE), false);\n\t});\n\n\ttest('joinState', async () => {\n\t\tawait workingCopy.resolve({ contents: bufferToStream(VSBuffer.fromString('hello state')) });\n\n\t\tworkingCopy.save();\n\t\tassert.strictEqual(workingCopy.hasState(StoredFileWorkingCopyState.PENDING_SAVE), true);\n\n\t\tawait workingCopy.joinState(StoredFileWorkingCopyState.PENDING_SAVE);\n\n\t\tassert.strictEqual(workingCopy.hasState(StoredFileWorkingCopyState.DIRTY), false);\n\t\tassert.strictEqual(workingCopy.hasState(StoredFileWorkingCopyState.SAVED), true);\n\t\tassert.strictEqual(workingCopy.hasState(StoredFileWorkingCopyState.PENDING_SAVE), false);\n\t});\n\n\ttest('isReadonly, isResolved, dispose, isDisposed', async () => {\n\t\tassert.strictEqual(workingCopy.isResolved(), false);\n\t\tassert.strictEqual(workingCopy.isReadonly(), false);\n\t\tassert.strictEqual(workingCopy.isDisposed(), false);\n\n\t\tawait workingCopy.resolve();\n\n\t\tassert.ok(workingCopy.model);\n\t\tassert.strictEqual(workingCopy.isResolved(), true);\n\t\tassert.strictEqual(workingCopy.isReadonly(), false);\n\t\tassert.strictEqual(workingCopy.isDisposed(), false);\n\n\t\tlet disposedEvent = false;\n\t\tdisposables.add(workingCopy.onWillDispose(() => {\n\t\t\tdisposedEvent = true;\n\t\t}));\n\n\t\tlet disposedModelEvent = false;\n\t\tdisposables.add(workingCopy.model.onWillDispose(() => {\n\t\t\tdisposedModelEvent = true;\n\t\t}));\n\n\t\tworkingCopy.dispose();\n\n\t\tassert.strictEqual(workingCopy.isDisposed(), true);\n\t\tassert.strictEqual(disposedEvent, true);\n\t\tassert.strictEqual(disposedModelEvent, true);\n\t});\n\n\ttest('readonly change event', async () => {\n\t\taccessor.fileService.readonly = true;\n\n\t\tawait workingCopy.resolve();\n\n\t\tassert.strictEqual(!!workingCopy.isReadonly(), true);\n\n\t\taccessor.fileService.readonly = false;\n\n\t\tlet readonlyEvent = false;\n\t\tdisposables.add(workingCopy.onDidChangeReadonly(() => {\n\t\t\treadonlyEvent = true;\n\t\t}));\n\n\t\tawait workingCopy.resolve();\n\n\t\tassert.strictEqual(workingCopy.isReadonly(), false);\n\t\tassert.strictEqual(readonlyEvent, true);\n\t});\n\n\tensureNoDisposablesAreLeakedInTestSuite();\n});\n"],
  "mappings": ";;AAKA,OAAO,YAAY;AACnB,SAAS,OAAO,eAAe;AAC/B,SAAS,WAAW;AACpB,SAAS,uBAAuB,4BAA4B,6BAA6B,gDAAgD,oCAAoC,kCAAkC,uCAAuC;AACtP,SAAS,gBAAgB,0BAA0B,gBAAgB,UAAU,8BAA8B;AAC3G,SAAS,yBAAyB;AAClC,SAAS,YAAY,uBAAuB;AAC5C,SAAS,yBAAyB,qBAAqB,qCAAqC;AAC5F,SAAS,6BAA6B;AACtC,SAAS,gBAAgB;AACzB,SAAS,kBAAkB,gBAAgB,oBAAoB,qBAAqB,uBAAuB,mBAAmB,0CAA0C;AACxK,SAAS,YAAY,0BAA0B;AAC/C,SAAS,UAAU,eAAe;AAClC,SAAS,iBAAiB,eAAe,wBAAwB;AACjE,SAAS,0BAA0B;AACnC,SAAS,+CAA+C;AACxD,SAAS,uBAAuB;AAChC,SAAS,uBAAuB;AAEzB,MAAM,uCAAuC,WAAkD;AAAA,EAQrG,YAAqB,UAAsB,UAAkB;AAC5D,UAAM;AADc;AAAsB;AAAA,EAE3C;AAAA,EAlCD,OAwBsG;AAAA;AAAA;AAAA,EAEpF,sBAAsB,KAAK,UAAU,IAAI,QAAwD,CAAC;AAAA,EAC1G,qBAAqB,KAAK,oBAAoB;AAAA,EAEtC,iBAAiB,KAAK,UAAU,IAAI,QAAc,CAAC;AAAA,EAC3D,gBAAgB,KAAK,eAAe;AAAA,EAM7C,uBAAuB,OAA6D;AACnF,SAAK,oBAAoB,KAAK,KAAK;AAAA,EACpC;AAAA,EAEA,eAAe,aAA2B;AACzC,SAAK,SAAS,WAAW;AAAA,EAC1B;AAAA,EAEQ,kBAAkB;AAAA,EAC1B,qBAA2B;AAC1B,SAAK,kBAAkB;AAAA,EACxB;AAAA,EAEA,MAAM,SAAS,SAA0B,OAA2D;AACnG,QAAI,KAAK,iBAAiB;AACzB,YAAM,IAAI,MAAM,MAAM;AAAA,IACvB;AAEA,UAAM,SAAS,yBAAyB;AACxC,WAAO,IAAI,SAAS,WAAW,KAAK,QAAQ,CAAC;AAE7C,WAAO;AAAA,EACR;AAAA,EAEA,MAAM,OAAO,UAAkC,OAAyC;AACvF,SAAK,UAAU,MAAM,eAAe,QAAQ,GAAG,SAAS,CAAC;AAAA,EAC1D;AAAA,EAEQ,SAAS,aAA2B;AAC3C,SAAK,WAAW;AAEhB,SAAK;AAEL,SAAK,oBAAoB,KAAK,EAAE,WAAW,OAAO,WAAW,MAAM,CAAC;AAAA,EACrE;AAAA,EAEA,YAAY;AAAA,EAEZ,qBAAqB;AAAA,EAErB,mBAAyB;AACxB,SAAK,qBAAqB;AAAA,EAC3B;AAAA,EAES,UAAgB;AACxB,SAAK,eAAe,KAAK;AAEzB,UAAM,QAAQ;AAAA,EACf;AACD;AAEO,MAAM,qDAAqD,+BAA+B;AAAA,EAvFjG,OAuFiG;AAAA;AAAA;AAAA,EAEhG,cAAc;AAAA,EACd,cAAc;AAAA,EACd,gBAA2C;AAAA,EAE3C,MAAM,KAAK,SAA4B,OAA0D;AAChG,QAAI,KAAK,aAAa;AACrB,YAAM,IAAI,MAAM,MAAM;AAAA,IACvB;AAEA,QAAI,KAAK,eAAe;AACvB,YAAM,KAAK;AAAA,IACZ;AAEA,QAAI,MAAM,yBAAyB;AAClC,YAAM,IAAI,MAAM,UAAU;AAAA,IAC3B;AAEA,SAAK;AAEL,WAAO;AAAA,MACN,UAAU,KAAK;AAAA,MACf,OAAO;AAAA,MACP,MAAM;AAAA,MACN,aAAa;AAAA,MACb,QAAQ;AAAA,MACR,OAAO;AAAA,MACP,MAAM;AAAA,MACN,MAAM;AAAA,MACN,gBAAgB;AAAA,MAChB,UAAU;AAAA,MACV,QAAQ;AAAA,MACR,UAAU;AAAA,IACX;AAAA,EACD;AACD;AAEO,MAAM,sCAAoH;AAAA,EA7HjI,OA6HiI;AAAA;AAAA;AAAA,EAEhI,MAAM,YAAY,UAAe,UAAkC,OAAmE;AACrI,WAAO,IAAI,+BAA+B,WAAW,MAAM,eAAe,QAAQ,GAAG,SAAS,CAAC;AAAA,EAChG;AACD;AAEO,MAAM,oDAAgJ;AAAA,EApI7J,OAoI6J;AAAA;AAAA;AAAA,EAE5J,MAAM,YAAY,UAAe,UAAkC,OAAiF;AACnJ,WAAO,IAAI,6CAA6C,WAAW,MAAM,eAAe,QAAQ,GAAG,SAAS,CAAC;AAAA,EAC9G;AACD;AAEA,MAAM,4CAA4C,WAAY;AAE7D,QAAM,UAAU,IAAI,oDAAoD;AAExE,QAAM,cAAc,IAAI,gBAAgB;AAExC,MAAI;AACJ,MAAI;AACJ,MAAI;AAEJ,QAAM,MAAM;AACX,2BAAuB,8BAA8B,QAAW,WAAW;AAC3E,eAAW,qBAAqB,eAAe,mBAAmB;AAElE,UAAM,WAAW,IAAI,KAAK,eAAe;AACzC,kBAAc,YAAY,IAAI,IAAI,sBAAoE,iCAAiC,UAAU,SAAS,QAAQ,GAAG,SAAS,aAAW,YAAY,QAAQ,OAAO,GAAG,SAAS,aAAa,SAAS,YAAY,SAAS,wBAAwB,SAAS,2BAA2B,SAAS,0BAA0B,SAAS,oBAAoB,SAAS,qBAAqB,SAAS,0BAA0B,SAAS,eAAe,SAAS,qBAAqB,SAAS,eAAe,CAAC;AAAA,EACxhB,CAAC;AAED,WAAS,MAAM;AACd,gBAAY,MAAM;AAAA,EACnB,CAAC;AAED,OAAK,6BAA6B,YAAY;AAC7C,QAAI,eAAe;AACnB,QAAI,gBAA6D;AACjE,gBAAY,IAAI,YAAY,UAAU,OAAK;AAC1C;AACA,sBAAgB;AAAA,IACjB,CAAC,CAAC;AAEF,QAAI,mBAAmB;AACvB,gBAAY,IAAI,YAAY,eAAe,MAAM;AAChD;AAAA,IACD,CAAC,CAAC;AAGF,UAAM,YAAY,KAAK;AACvB,WAAO,YAAY,cAAc,CAAC;AAClC,WAAO,YAAY,kBAAkB,CAAC;AAGtC,UAAM,YAAY,QAAQ;AAC1B,gBAAY,OAAO,eAAe,YAAY;AAC9C,UAAM,YAAY,KAAK;AAEvB,WAAO,YAAY,cAAc,CAAC;AAClC,WAAO,YAAY,kBAAkB,CAAC;AACtC,WAAO,YAAY,YAAY,QAAQ,GAAG,KAAK;AAC/C,WAAO,YAAY,cAAe,QAAQ,WAAW,QAAQ;AAC7D,WAAO,GAAG,cAAe,IAAI;AAC7B,WAAO,GAAG,iCAAiC,aAAc,CAAC;AAC1D,WAAO,YAAY,YAAY,OAAO,oBAAoB,IAAI;AAC9D,WAAO,YAAa,YAAY,MAAuD,aAAa,CAAC;AAGrG,gBAAY,OAAO,eAAe,kBAAkB;AACpD,IAAC,YAAY,MAAuD,cAAc;AAClF,UAAM,YAAY,KAAK;AAEvB,WAAO,YAAY,kBAAkB,CAAC;AACtC,WAAO,YAAY,YAAY,SAAS,2BAA2B,KAAK,GAAG,IAAI;AAAA,EAChF,CAAC;AAED,OAAK,uCAAuC,YAAY;AACvD,QAAI,eAAe;AACnB,QAAI,gBAA6D;AACjE,gBAAY,IAAI,YAAY,UAAU,OAAK;AAC1C;AACA,sBAAgB;AAAA,IACjB,CAAC,CAAC;AAEF,QAAI,mBAAmB;AACvB,gBAAY,IAAI,YAAY,eAAe,MAAM;AAChD;AAAA,IACD,CAAC,CAAC;AAEF,UAAM,YAAY,QAAQ;AAC1B,QAAI;AACJ,IAAC,YAAY,MAAuD,gBAAgB,IAAI,QAAQ,OAAK,UAAU,CAAC;AAEhH,gBAAY,OAAO,eAAe,OAAO;AACzC,UAAM,YAAY,YAAY,KAAK;AAEnC,gBAAY,OAAO,eAAe,QAAQ;AAC1C,UAAM,aAAa,YAAY,KAAK;AACpC,YAAS;AACT,UAAM;AACN,UAAM;AAEN,WAAO,YAAY,cAAc,CAAC;AAClC,WAAO,YAAY,kBAAkB,CAAC;AACtC,WAAO,YAAY,YAAY,QAAQ,GAAG,KAAK;AAC/C,WAAO,YAAY,cAAe,QAAQ,WAAW,QAAQ;AAC7D,WAAO,GAAG,cAAe,IAAI;AAC7B,WAAO,GAAG,iCAAiC,aAAc,CAAC;AAC1D,WAAO,YAAY,YAAY,OAAO,oBAAoB,IAAI;AAC9D,WAAO,YAAa,YAAY,MAAuD,aAAa,CAAC;AAAA,EACtG,CAAC;AAED,0CAAwC;AACzC,CAAC;AAED,MAAM,yBAAyB,WAAY;AAE1C,QAAM,UAAU,IAAI,sCAAsC;AAE1D,QAAM,cAAc,IAAI,gBAAgB;AACxC,QAAM,WAAW,IAAI,KAAK,eAAe;AACzC,MAAI;AACJ,MAAI;AACJ,MAAI;AAEJ,WAAS,kBAAkB,MAAW,UAAU;AAC/C,UAAMA,eAAqE,IAAI,sBAAsD,iCAAiC,KAAK,SAAS,GAAG,GAAG,SAAS,aAAWA,aAAY,QAAQ,OAAO,GAAG,SAAS,aAAa,SAAS,YAAY,SAAS,wBAAwB,SAAS,2BAA2B,SAAS,0BAA0B,SAAS,oBAAoB,SAAS,qBAAqB,SAAS,0BAA0B,SAAS,eAAe,SAAS,qBAAqB,SAAS,eAAe;AAE3iB,WAAOA;AAAA,EACR;AAJS;AAMT,QAAM,MAAM;AACX,2BAAuB,8BAA8B,QAAW,WAAW;AAC3E,eAAW,qBAAqB,eAAe,mBAAmB;AAElE,kBAAc,YAAY,IAAI,kBAAkB,CAAC;AAAA,EAClD,CAAC;AAED,WAAS,MAAM;AACd,gBAAY,QAAQ;AAEpB,eAAWA,gBAAe,SAAS,mBAAmB,eAAe;AACpE,MAACA,aAAsE,QAAQ;AAAA,IAChF;AAEA,gBAAY,MAAM;AAAA,EACnB,CAAC;AAED,OAAK,uCAAuC,YAAY;AACvD,WAAO,YAAY,SAAS,mBAAmB,cAAc,QAAQ,CAAC;AAEtE,gBAAY,QAAQ;AAEpB,WAAO,YAAY,SAAS,mBAAmB,cAAc,QAAQ,CAAC;AAAA,EACvE,CAAC;AAED,OAAK,qBAAqB,YAAY;AACrC,WAAO,mBAAmB,CAAC,GAAG,YAAY;AACzC,aAAO,YAAY,YAAY,SAAS,2BAA2B,MAAM,GAAG,KAAK;AAEjF,UAAI,6BAA6B,MAAM,UAAU,YAAY,mBAAmB;AAChF,eAAS,YAAY,aAAa,IAAI,UAAU,IAAI;AACpD,eAAS,YAAY,gBAAgB,IAAI,iBAAiB,CAAC,EAAE,UAAU,MAAM,eAAe,QAAQ,CAAC,GAAG,KAAK,CAAC;AAE9G,YAAM;AACN,aAAO,YAAY,YAAY,SAAS,2BAA2B,MAAM,GAAG,IAAI;AAEhF,mCAA6B,MAAM,UAAU,YAAY,mBAAmB;AAC5E,eAAS,YAAY,aAAa,OAAO,QAAQ;AACjD,eAAS,YAAY,gBAAgB,IAAI,iBAAiB,CAAC,EAAE,UAAU,MAAM,eAAe,MAAM,CAAC,GAAG,KAAK,CAAC;AAE5G,YAAM;AACN,aAAO,YAAY,YAAY,SAAS,2BAA2B,MAAM,GAAG,KAAK;AAAA,IAClF,CAAC;AAAA,EACF,CAAC;AAED,OAAK,oBAAoB,YAAY;AACpC,WAAO,YAAY,YAAY,WAAW,GAAG,KAAK;AAClD,WAAO,YAAY,YAAY,QAAQ,GAAG,KAAK;AAC/C,WAAO,YAAY,YAAY,SAAS,2BAA2B,KAAK,GAAG,KAAK;AAEhF,UAAM,YAAY,QAAQ;AAC1B,WAAO,YAAY,YAAY,WAAW,GAAG,IAAI;AAEjD,QAAI,qBAAqB;AACzB,gBAAY,IAAI,YAAY,iBAAiB,MAAM;AAClD;AAAA,IACD,CAAC,CAAC;AAEF,QAAI,uBAAuB;AAC3B,gBAAY,IAAI,YAAY,mBAAmB,MAAM;AACpD;AAAA,IACD,CAAC,CAAC;AAEF,QAAI,eAAe;AACnB,gBAAY,IAAI,YAAY,UAAU,MAAM;AAC3C;AAAA,IACD,CAAC,CAAC;AAGF,gBAAY,OAAO,eAAe,aAAa;AAC/C,WAAO,YAAY,sBAAsB,CAAC;AAE1C,WAAO,YAAY,YAAY,WAAW,GAAG,IAAI;AACjD,WAAO,YAAY,YAAY,QAAQ,GAAG,IAAI;AAC9C,WAAO,YAAY,YAAY,SAAS,2BAA2B,KAAK,GAAG,IAAI;AAC/E,WAAO,YAAY,oBAAoB,CAAC;AAExC,UAAM,YAAY,KAAK;AAEvB,WAAO,YAAY,YAAY,WAAW,GAAG,KAAK;AAClD,WAAO,YAAY,YAAY,QAAQ,GAAG,KAAK;AAC/C,WAAO,YAAY,YAAY,SAAS,2BAA2B,KAAK,GAAG,KAAK;AAChF,WAAO,YAAY,oBAAoB,CAAC;AACxC,WAAO,YAAY,cAAc,CAAC;AAGlC,UAAM,YAAY,QAAQ,EAAE,UAAU,eAAe,SAAS,WAAW,oBAAoB,CAAC,EAAE,CAAC;AAEjG,WAAO,YAAY,sBAAsB,CAAC;AAC1C,WAAO,YAAY,YAAY,WAAW,GAAG,IAAI;AACjD,WAAO,YAAY,YAAY,QAAQ,GAAG,IAAI;AAC9C,WAAO,YAAY,YAAY,SAAS,2BAA2B,KAAK,GAAG,IAAI;AAC/E,WAAO,YAAY,oBAAoB,CAAC;AAExC,UAAM,YAAY,OAAO,EAAE,MAAM,KAAK,CAAC;AAEvC,WAAO,YAAY,YAAY,WAAW,GAAG,KAAK;AAClD,WAAO,YAAY,YAAY,QAAQ,GAAG,KAAK;AAC/C,WAAO,YAAY,YAAY,SAAS,2BAA2B,KAAK,GAAG,KAAK;AAChF,WAAO,YAAY,oBAAoB,CAAC;AAGxC,gBAAY,aAAa;AAEzB,WAAO,YAAY,YAAY,WAAW,GAAG,IAAI;AACjD,WAAO,YAAY,YAAY,QAAQ,GAAG,IAAI;AAC9C,WAAO,YAAY,YAAY,SAAS,2BAA2B,KAAK,GAAG,IAAI;AAC/E,WAAO,YAAY,oBAAoB,CAAC;AAExC,UAAM,YAAY,OAAO;AAEzB,WAAO,YAAY,YAAY,WAAW,GAAG,KAAK;AAClD,WAAO,YAAY,YAAY,QAAQ,GAAG,KAAK;AAC/C,WAAO,YAAY,YAAY,SAAS,2BAA2B,KAAK,GAAG,KAAK;AAChF,WAAO,YAAY,oBAAoB,CAAC;AAAA,EACzC,CAAC;AAED,OAAK,2EAA2E,YAAY;AAC3F,UAAM,YAAY,QAAQ;AAE1B,gBAAY,OAAO,eAAe,mBAAmB;AACrD,UAAM,YAAY,KAAK;AACvB,WAAO,YAAY,YAAY,QAAQ,GAAG,KAAK;AAE/C,gBAAY,OAAO,eAAe,uBAAuB;AACzD,WAAO,YAAY,YAAY,QAAQ,GAAG,IAAI;AAG9C,gBAAY,MAAO;AAEnB,gBAAY,OAAO,uBAAuB,EAAE,WAAW,OAAO,WAAW,KAAK,CAAC;AAC/E,WAAO,YAAY,YAAY,QAAQ,GAAG,KAAK;AAAA,EAChD,CAAC;AAED,OAAK,4BAA4B,YAAY;AAC5C,QAAI,sBAAsB;AAC1B,gBAAY,IAAI,YAAY,aAAa,MAAM;AAC9C;AAAA,IACD,CAAC,CAAC;AAGF,UAAM,YAAY,QAAQ;AAC1B,WAAO,YAAY,YAAY,WAAW,GAAG,IAAI;AACjD,WAAO,YAAY,qBAAqB,CAAC;AACzC,WAAO,YAAY,YAAY,OAAO,UAAU,YAAY;AAG5D,gBAAY,OAAO,eAAe,eAAe;AACjD,WAAO,YAAY,YAAY,QAAQ,GAAG,IAAI;AAC9C,UAAM,YAAY,QAAQ;AAC1B,WAAO,YAAY,qBAAqB,CAAC;AACzC,WAAO,YAAY,YAAY,OAAO,UAAU,eAAe;AAG/D,UAAM,YAAY,QAAQ,EAAE,UAAU,eAAe,SAAS,WAAW,wBAAwB,CAAC,EAAE,CAAC;AACrG,WAAO,YAAY,YAAY,QAAQ,GAAG,IAAI;AAC9C,WAAO,YAAY,YAAY,OAAO,UAAU,wBAAwB;AACxE,WAAO,YAAY,qBAAqB,CAAC;AAGzC,UAAM,cAAc,YAAY,KAAK;AACrC,UAAM,YAAY,QAAQ;AAC1B,UAAM;AACN,WAAO,YAAY,YAAY,QAAQ,GAAG,KAAK;AAC/C,WAAO,YAAY,YAAY,OAAO,UAAU,wBAAwB;AACxE,WAAO,YAAY,qBAAqB,CAAC;AAGzC,gBAAY,QAAQ;AACpB,UAAM,YAAY,QAAQ;AAC1B,WAAO,YAAY,YAAY,WAAW,GAAG,IAAI;AACjD,WAAO,YAAY,qBAAqB,CAAC;AAAA,EAC1C,CAAC;AAED,OAAK,yBAAyB,YAAY;AACzC,UAAM,YAAY,QAAQ,EAAE,UAAU,eAAe,SAAS,WAAW,cAAc,CAAC,EAAE,CAAC;AAE3F,UAAM,SAAS,MAAM,YAAY,OAAO,kBAAkB,IAAI;AAC9D,UAAM,SAAS,yBAAyB,OAAO,aAAa,OAAO,SAAS,QAAW,OAAO,IAAI;AAElG,WAAO,YAAY,SAAS,yBAAyB,cAAc,WAAW,GAAG,IAAI;AAErF,gBAAY,QAAQ;AAGpB,kBAAc,kBAAkB;AAChC,UAAM,YAAY,QAAQ;AAE1B,WAAO,YAAY,YAAY,QAAQ,GAAG,IAAI;AAC9C,WAAO,YAAY,YAAY,WAAW,GAAG,KAAK;AAClD,WAAO,YAAY,YAAY,OAAO,UAAU,cAAc;AAE9D,gBAAY,MAAM,eAAe,eAAe;AAChD,UAAM,YAAY,KAAK;AAGvB,UAAM,YAAY,QAAQ;AAE1B,WAAO,YAAY,YAAY,QAAQ,GAAG,KAAK;AAC/C,WAAO,YAAY,YAAY,OAAO,UAAU,YAAY;AAAA,EAC7D,CAAC;AAED,OAAK,gEAAgE,YAAY;AAChF,WAAO,mBAAmB,CAAC,GAAG,YAAY;AACzC,YAAM,YAAY,QAAQ,EAAE,UAAU,eAAe,SAAS,WAAW,cAAc,CAAC,EAAE,CAAC;AAE3F,YAAM,kBAAkB,MAAM,UAAU,YAAY,mBAAmB;AAEvE,eAAS,YAAY,aAAa,IAAI,UAAU,IAAI;AACpD,eAAS,YAAY,gBAAgB,IAAI,iBAAiB,CAAC,EAAE,UAAU,MAAM,eAAe,QAAQ,CAAC,GAAG,KAAK,CAAC;AAE9G,YAAM;AACN,aAAO,YAAY,YAAY,SAAS,2BAA2B,MAAM,GAAG,IAAI;AAEhF,YAAM,SAAS,MAAM,YAAY,OAAO,kBAAkB,IAAI;AAC9D,YAAM,SAAS,yBAAyB,OAAO,aAAa,OAAO,SAAS,QAAW,OAAO,IAAI;AAElG,aAAO,YAAY,SAAS,yBAAyB,cAAc,WAAW,GAAG,IAAI;AAErF,kBAAY,QAAQ;AAEpB,oBAAc,kBAAkB;AAChC,YAAM,YAAY,QAAQ;AAE1B,aAAO,YAAY,YAAY,SAAS,2BAA2B,MAAM,GAAG,IAAI;AAEhF,YAAM,UAAU,MAAM,YAAY,OAAO,kBAAkB,IAAI;AAC/D,aAAO,gBAAgB,OAAO,MAAM,QAAQ,IAAI;AAAA,IACjD,CAAC;AAAA,EACF,CAAC;AAED,OAAK,gDAAgD,YAAY;AAChE,WAAO,mBAAmB,CAAC,GAAG,YAAY;AACzC,YAAM,YAAY,QAAQ;AAE1B,YAAM,kBAAkB,MAAM,UAAU,YAAY,mBAAmB;AAEvE,eAAS,YAAY,aAAa,IAAI,UAAU,IAAI;AACpD,eAAS,YAAY,gBAAgB,IAAI,iBAAiB,CAAC,EAAE,UAAU,MAAM,eAAe,QAAQ,CAAC,GAAG,KAAK,CAAC;AAE9G,YAAM;AACN,aAAO,YAAY,YAAY,SAAS,2BAA2B,MAAM,GAAG,IAAI;AAGhF,eAAS,YAAY,aAAa,OAAO,QAAQ;AACjD,YAAM,YAAY,QAAQ,EAAE,mBAAmB,KAAK,CAAC;AACrD,aAAO,YAAY,YAAY,SAAS,2BAA2B,MAAM,GAAG,KAAK;AAGjF,UAAI;AACH,iBAAS,YAAY,uBAAuB,IAAI,mBAAmB,kBAAkB,oBAAoB,cAAc;AACvH,cAAM,YAAY,QAAQ;AAC1B,eAAO,YAAY,YAAY,SAAS,2BAA2B,MAAM,GAAG,IAAI;AAAA,MACjF,UAAE;AACD,iBAAS,YAAY,uBAAuB;AAAA,MAC7C;AAAA,IACD,CAAC;AAAA,EACF,CAAC;AAED,OAAK,4EAA4E,iBAAkB;AAElG,UAAM,YAAY,QAAQ;AAE1B,UAAM,OAAO,gBAAgB,wBAAwB,WAAW,CAAC;AACjE,QAAI;AACH,eAAS,YAAY,uBAAuB,IAAI,mCAAmC,SAAS,EAAE,GAAG,MAAM,OAAO,KAAK,QAAQ,GAAG,UAAU,CAAC,KAAK,UAAU,QAAQ,CAAC,KAAK,OAAO,CAAC;AAC9K,YAAM,YAAY,QAAQ;AAAA,IAC3B,UAAE;AACD,eAAS,YAAY,uBAAuB;AAAA,IAC7C;AAEA,WAAO,YAAY,wBAAwB,WAAW,GAAG,OAAO,KAAK,OAAO,2BAA2B;AACvG,WAAO,eAAe,wBAAwB,WAAW,GAAG,UAAU,KAAK,UAAU,6EAA6E;AAClK,WAAO,eAAe,wBAAwB,WAAW,GAAG,QAAQ,KAAK,QAAQ,2EAA2E;AAAA,EAC7J,CAAC;AAED,OAAK,gFAAgF,YAAY;AAChG,UAAM,YAAY,QAAQ;AAE1B,QAAI;AACH,eAAS,YAAY,uBAAuB,IAAI,mBAAmB,2BAA2B,oBAAoB,uBAAuB;AACzI,YAAM,YAAY,QAAQ;AAAA,IAC3B,UAAE;AACD,eAAS,YAAY,uBAAuB;AAAA,IAC7C;AAEA,WAAO,YAAY,YAAY,OAAO,UAAU,YAAY;AAAA,EAC7D,CAAC;AAED,OAAK,kEAAkE,YAAY;AAClF,QAAI,wBAAwB;AAC5B,gBAAY,IAAI,YAAY,oBAAoB,MAAM,uBAAuB,CAAC;AAE9E,UAAM,YAAY,QAAQ;AAE1B,WAAO,YAAY,YAAY,WAAW,GAAG,KAAK;AAElD,UAAM,OAAO,MAAM,SAAS,YAAY,QAAQ,YAAY,UAAU,EAAE,iBAAiB,KAAK,CAAC;AAE/F,QAAI;AACH,eAAS,YAAY,uBAAuB,IAAI,mCAAmC,2BAA2B,EAAE,GAAG,MAAM,UAAU,KAAK,CAAC;AACzI,YAAM,YAAY,QAAQ;AAAA,IAC3B,UAAE;AACD,eAAS,YAAY,uBAAuB;AAAA,IAC7C;AAEA,WAAO,YAAY,CAAC,CAAC,YAAY,WAAW,GAAG,IAAI;AACnD,WAAO,YAAY,uBAAuB,CAAC;AAE3C,QAAI;AACH,eAAS,YAAY,uBAAuB,IAAI,mCAAmC,2BAA2B,EAAE,GAAG,MAAM,UAAU,MAAM,CAAC;AAC1I,YAAM,YAAY,QAAQ;AAAA,IAC3B,UAAE;AACD,eAAS,YAAY,uBAAuB;AAAA,IAC7C;AAEA,WAAO,YAAY,YAAY,WAAW,GAAG,KAAK;AAClD,WAAO,YAAY,uBAAuB,CAAC;AAAA,EAC5C,CAAC;AAED,OAAK,yEAAyE,YAAY;AACzF,UAAM,YAAY,QAAQ;AAE1B,UAAM,iBAAiB,YAAY,QAAQ;AAE3C,gBAAY,OAAO,eAAe,iBAAiB;AAEnD,UAAM;AAEN,WAAO,YAAY,YAAY,QAAQ,GAAG,IAAI;AAC9C,WAAO,YAAY,YAAY,OAAO,UAAU,iBAAiB;AAAA,EAClE,CAAC;AAED,OAAK,UAAU,YAAY;AAC1B,UAAM,YAAY,QAAQ;AAC1B,gBAAY,OAAO,eAAe,cAAc;AAEhD,UAAM,SAAS,MAAM,YAAY,OAAO,kBAAkB,IAAI;AAE9D,WAAO,GAAG,OAAO,IAAI;AAErB,QAAI,iBAAqC;AACzC,QAAI,OAAO,mBAAmB,UAAU;AACvC,uBAAiB,OAAO,QAAQ,SAAS;AAAA,IAC1C,WAAW,iBAAiB,OAAO,OAAO,GAAG;AAC5C,wBAAkB,MAAM,cAAc,OAAO,SAAS,YAAU,SAAS,OAAO,MAAM,CAAC,GAAG,SAAS;AAAA,IACpG,WAAW,OAAO,SAAS;AAC1B,uBAAiB,gBAAgB,OAAO,SAAS,YAAU,SAAS,OAAO,MAAM,CAAC,EAAE,SAAS;AAAA,IAC9F;AAEA,WAAO,YAAY,gBAAgB,cAAc;AAAA,EAClD,CAAC;AAED,OAAK,6BAA6B,YAAY;AAC7C,QAAI,eAAe;AACnB,QAAI,gBAA6D;AACjE,gBAAY,IAAI,YAAY,UAAU,OAAK;AAC1C;AACA,sBAAgB;AAAA,IACjB,CAAC,CAAC;AAEF,QAAI,mBAAmB;AACvB,gBAAY,IAAI,YAAY,eAAe,MAAM;AAChD;AAAA,IACD,CAAC,CAAC;AAGF,UAAM,YAAY,KAAK;AACvB,WAAO,YAAY,cAAc,CAAC;AAClC,WAAO,YAAY,kBAAkB,CAAC;AAGtC,UAAM,YAAY,QAAQ;AAC1B,gBAAY,OAAO,eAAe,YAAY;AAC9C,UAAM,YAAY,KAAK;AAEvB,WAAO,YAAY,cAAc,CAAC;AAClC,WAAO,YAAY,kBAAkB,CAAC;AACtC,WAAO,YAAY,YAAY,QAAQ,GAAG,KAAK;AAC/C,WAAO,YAAY,cAAe,QAAQ,WAAW,QAAQ;AAC7D,WAAO,GAAG,cAAe,IAAI;AAC7B,WAAO,GAAG,iCAAiC,aAAc,CAAC;AAC1D,WAAO,YAAY,YAAY,OAAO,oBAAoB,IAAI;AAAA,EAC/D,CAAC;AAED,OAAK,kCAAkC,YAAY;AAClD,QAAI,eAAe;AACnB,QAAI,gBAA6D;AACjE,gBAAY,IAAI,YAAY,UAAU,OAAK;AAC1C;AACA,sBAAgB;AAAA,IACjB,CAAC,CAAC;AAEF,QAAI,mBAAmB;AACvB,gBAAY,IAAI,YAAY,eAAe,MAAM;AAChD;AAAA,IACD,CAAC,CAAC;AAGF,UAAM,YAAY,QAAQ;AAC1B,gBAAY,OAAO,eAAe,YAAY;AAE9C,UAAM,SAAS,mBAAmB,eAAe,cAAc,YAAY;AAC3E,UAAM,YAAY,KAAK,EAAE,QAAQ,WAAW,MAAM,OAAO,CAAC;AAE1D,WAAO,YAAY,cAAc,CAAC;AAClC,WAAO,YAAY,kBAAkB,CAAC;AACtC,WAAO,YAAY,YAAY,QAAQ,GAAG,KAAK;AAC/C,WAAO,YAAY,cAAe,QAAQ,WAAW,IAAI;AACzD,WAAO,YAAY,cAAe,QAAQ,MAAM;AAAA,EACjD,CAAC;AAED,OAAK,+BAA+B,YAAY;AAC/C,QAAI,eAAe;AACnB,gBAAY,IAAI,YAAY,UAAU,OAAK;AAC1C;AAAA,IACD,CAAC,CAAC;AAEF,QAAI,mBAAmB;AACvB,gBAAY,IAAI,YAAY,eAAe,MAAM;AAChD;AAAA,IACD,CAAC,CAAC;AAIF,UAAM,YAAY,QAAQ;AAC1B,gBAAY,OAAO,eAAe,YAAY;AAC9C,UAAM,SAAS,QAAQ;AAAA,MACtB,YAAY,KAAK,EAAE,QAAQ,WAAW,KAAK,CAAC;AAAA,MAC5C,YAAY,KAAK,EAAE,QAAQ,WAAW,SAAS,CAAC;AAAA,MAChD,YAAY,KAAK,EAAE,QAAQ,WAAW,cAAc,CAAC;AAAA,IACtD,CAAC;AAED,WAAO,YAAY,cAAc,CAAC;AAClC,WAAO,YAAY,kBAAkB,CAAC;AACtC,WAAO,YAAY,YAAY,QAAQ,GAAG,KAAK;AAAA,EAChD,CAAC;AAED,OAAK,6CAA6C,YAAY;AAC7D,QAAI,eAAe;AACnB,gBAAY,IAAI,YAAY,UAAU,OAAK;AAC1C;AAAA,IACD,CAAC,CAAC;AAEF,QAAI,mBAAmB;AACvB,gBAAY,IAAI,YAAY,eAAe,MAAM;AAChD;AAAA,IACD,CAAC,CAAC;AAKF,UAAM,YAAY,QAAQ;AAC1B,gBAAY,OAAO,eAAe,YAAY;AAC9C,UAAM,YAAY,YAAY,KAAK;AACnC,gBAAY,OAAO,eAAe,iBAAiB;AACnD,UAAM,aAAa,YAAY,KAAK;AAEpC,UAAM,SAAS,QAAQ,CAAC,WAAW,UAAU,CAAC;AAC9C,WAAO,YAAY,cAAc,CAAC;AAClC,WAAO,YAAY,kBAAkB,CAAC;AACtC,WAAO,YAAY,YAAY,QAAQ,GAAG,KAAK;AAAA,EAChD,CAAC;AAED,OAAK,+CAA+C,YAAY;AAC/D,QAAI,eAAe;AACnB,gBAAY,IAAI,YAAY,UAAU,OAAK;AAC1C;AAAA,IACD,CAAC,CAAC;AAEF,QAAI,mBAAmB;AACvB,gBAAY,IAAI,YAAY,eAAe,MAAM;AAChD;AAAA,IACD,CAAC,CAAC;AAGF,UAAM,YAAY,QAAQ;AAC1B,UAAM,YAAY,KAAK;AACvB,WAAO,YAAY,cAAc,CAAC;AAClC,WAAO,YAAY,kBAAkB,CAAC;AACtC,WAAO,YAAY,YAAY,QAAQ,GAAG,KAAK;AAAA,EAChD,CAAC;AAED,OAAK,2CAA2C,YAAY;AAC3D,QAAI,eAAe;AACnB,gBAAY,IAAI,YAAY,UAAU,OAAK;AAC1C;AAAA,IACD,CAAC,CAAC;AAEF,QAAI,mBAAmB;AACvB,gBAAY,IAAI,YAAY,eAAe,MAAM;AAChD;AAAA,IACD,CAAC,CAAC;AAGF,UAAM,YAAY,QAAQ;AAC1B,UAAM,YAAY,KAAK,EAAE,OAAO,KAAK,CAAC;AACtC,WAAO,YAAY,cAAc,CAAC;AAClC,WAAO,YAAY,kBAAkB,CAAC;AACtC,WAAO,YAAY,YAAY,QAAQ,GAAG,KAAK;AAAA,EAChD,CAAC;AAED,OAAK,2CAA2C,YAAY;AAC3D,WAAO,mBAAmB,CAAC,GAAG,YAAY;AACzC,UAAI,eAAe;AACnB,kBAAY,IAAI,YAAY,UAAU,OAAK;AAC1C;AAAA,MACD,CAAC,CAAC;AAEF,UAAI,mBAAmB;AACvB,kBAAY,IAAI,YAAY,eAAe,MAAM;AAChD;AAAA,MACD,CAAC,CAAC;AAEF,YAAM,YAAY,QAAQ;AAG1B,YAAM,kBAAkB,MAAM,UAAU,YAAY,mBAAmB;AAEvE,eAAS,YAAY,aAAa,IAAI,UAAU,IAAI;AACpD,eAAS,YAAY,gBAAgB,IAAI,iBAAiB,CAAC,EAAE,UAAU,MAAM,eAAe,QAAQ,CAAC,GAAG,KAAK,CAAC;AAE9G,YAAM;AACN,aAAO,YAAY,YAAY,SAAS,2BAA2B,MAAM,GAAG,IAAI;AAEhF,YAAM,YAAY,KAAK,EAAE,OAAO,KAAK,CAAC;AACtC,aAAO,YAAY,cAAc,CAAC;AAClC,aAAO,YAAY,kBAAkB,CAAC;AACtC,aAAO,YAAY,YAAY,QAAQ,GAAG,KAAK;AAC/C,aAAO,YAAY,YAAY,SAAS,2BAA2B,MAAM,GAAG,KAAK;AAAA,IAClF,CAAC;AAAA,EACF,CAAC;AAED,OAAK,iBAAiB,YAAY;AACjC,QAAI,eAAe;AACnB,gBAAY,IAAI,YAAY,UAAU,YAAU;AAC/C;AAAA,IACD,CAAC,CAAC;AAEF,QAAI,mBAAmB;AACvB,gBAAY,IAAI,YAAY,eAAe,MAAM;AAChD;AAAA,IACD,CAAC,CAAC;AAEF,UAAM,YAAY,QAAQ;AAG1B,QAAI;AACH,eAAS,YAAY,wBAAwB,IAAI,mBAAmB,eAAe,oBAAoB,sBAAsB;AAE7H,YAAM,YAAY,KAAK,EAAE,OAAO,KAAK,CAAC;AAAA,IACvC,UAAE;AACD,eAAS,YAAY,wBAAwB;AAAA,IAC9C;AAEA,WAAO,YAAY,cAAc,CAAC;AAClC,WAAO,YAAY,kBAAkB,CAAC;AACtC,WAAO,YAAY,YAAY,SAAS,2BAA2B,KAAK,GAAG,IAAI;AAC/E,WAAO,YAAY,YAAY,SAAS,2BAA2B,KAAK,GAAG,KAAK;AAChF,WAAO,YAAY,YAAY,SAAS,2BAA2B,YAAY,GAAG,KAAK;AACvF,WAAO,YAAY,YAAY,SAAS,2BAA2B,QAAQ,GAAG,KAAK;AACnF,WAAO,YAAY,YAAY,QAAQ,GAAG,IAAI;AAG9C,UAAM,YAAY,KAAK,EAAE,QAAQ,WAAW,KAAK,CAAC;AAClD,WAAO,YAAY,cAAc,CAAC;AAClC,WAAO,YAAY,kBAAkB,CAAC;AACtC,WAAO,YAAY,YAAY,SAAS,2BAA2B,KAAK,GAAG,IAAI;AAC/E,WAAO,YAAY,YAAY,SAAS,2BAA2B,KAAK,GAAG,KAAK;AAChF,WAAO,YAAY,YAAY,SAAS,2BAA2B,YAAY,GAAG,KAAK;AACvF,WAAO,YAAY,YAAY,SAAS,2BAA2B,QAAQ,GAAG,KAAK;AACnF,WAAO,YAAY,YAAY,QAAQ,GAAG,IAAI;AAG9C,UAAM,YAAY,KAAK,EAAE,QAAQ,WAAW,SAAS,CAAC;AACtD,WAAO,YAAY,cAAc,CAAC;AAClC,WAAO,YAAY,kBAAkB,CAAC;AACtC,WAAO,YAAY,YAAY,SAAS,2BAA2B,KAAK,GAAG,KAAK;AAChF,WAAO,YAAY,YAAY,SAAS,2BAA2B,KAAK,GAAG,IAAI;AAC/E,WAAO,YAAY,YAAY,SAAS,2BAA2B,YAAY,GAAG,KAAK;AACvF,WAAO,YAAY,YAAY,SAAS,2BAA2B,QAAQ,GAAG,KAAK;AACnF,WAAO,YAAY,YAAY,QAAQ,GAAG,KAAK;AAG/C,QAAI;AACH,eAAS,YAAY,wBAAwB,IAAI,mBAAmB,wBAAwB,oBAAoB,mBAAmB;AAEnI,YAAM,YAAY,KAAK,EAAE,OAAO,KAAK,CAAC;AAAA,IACvC,SAAS,OAAO;AAAA,IAEhB,UAAE;AACD,eAAS,YAAY,wBAAwB;AAAA,IAC9C;AAEA,WAAO,YAAY,cAAc,CAAC;AAClC,WAAO,YAAY,kBAAkB,CAAC;AACtC,WAAO,YAAY,YAAY,SAAS,2BAA2B,KAAK,GAAG,IAAI;AAC/E,WAAO,YAAY,YAAY,SAAS,2BAA2B,KAAK,GAAG,KAAK;AAChF,WAAO,YAAY,YAAY,SAAS,2BAA2B,YAAY,GAAG,KAAK;AACvF,WAAO,YAAY,YAAY,SAAS,2BAA2B,QAAQ,GAAG,IAAI;AAClF,WAAO,YAAY,YAAY,QAAQ,GAAG,IAAI;AAG9C,UAAM,YAAY,KAAK,EAAE,QAAQ,WAAW,SAAS,CAAC;AACtD,WAAO,YAAY,cAAc,CAAC;AAClC,WAAO,YAAY,kBAAkB,CAAC;AACtC,WAAO,YAAY,YAAY,SAAS,2BAA2B,KAAK,GAAG,KAAK;AAChF,WAAO,YAAY,YAAY,SAAS,2BAA2B,KAAK,GAAG,IAAI;AAC/E,WAAO,YAAY,YAAY,SAAS,2BAA2B,YAAY,GAAG,KAAK;AACvF,WAAO,YAAY,YAAY,SAAS,2BAA2B,QAAQ,GAAG,KAAK;AACnF,WAAO,YAAY,YAAY,QAAQ,GAAG,KAAK;AAAA,EAChD,CAAC;AAED,OAAK,uDAAuD,YAAY;AACvE,UAAM,YAAY,QAAQ;AAE1B,QAAI,QAA2B;AAC/B,QAAI;AACH,eAAS,YAAY,wBAAwB,IAAI,mBAAmB,eAAe,oBAAoB,sBAAsB;AAE7H,YAAM,YAAY,KAAK,EAAE,OAAO,MAAM,oBAAoB,KAAK,CAAC;AAAA,IACjE,SAAS,GAAG;AACX,cAAQ;AAAA,IACT,UAAE;AACD,eAAS,YAAY,wBAAwB;AAAA,IAC9C;AAEA,WAAO,GAAG,KAAK;AAAA,EAChB,CAAC;AAED,OAAK,wCAAwC,iBAAkB;AAC9D,UAAM,YAAY,QAAQ;AAE1B,QAAI;AACH,eAAS,YAAY,wBAAwB,IAAI,mBAAmB,eAAe,oBAAoB,sBAAsB;AAE7H,YAAMC,OAAM,MAAM,YAAY,KAAK,EAAE,OAAO,KAAK,CAAC;AAClD,aAAO,YAAYA,MAAK,KAAK;AAAA,IAC9B,UAAE;AACD,eAAS,YAAY,wBAAwB;AAAA,IAC9C;AAEA,UAAM,MAAM,MAAM,YAAY,KAAK,EAAE,OAAO,KAAK,CAAC;AAClD,WAAO,YAAY,KAAK,IAAI;AAAA,EAC7B,CAAC;AAED,OAAK,oBAAoB,YAAY;AACpC,UAAM,YAAY,QAAQ;AAE1B,WAAO,YAAY,SAAS,uBAAuB,qBAAqB,KAAK;AAE7E,QAAI,uBAAuB;AAC3B,UAAM,aAAa,SAAS,uBAAuB,mBAAmB;AAAA,MACrE,aAAa,8BAAO,OAAO;AAC1B,YAAI,gBAAgB,IAAI;AACvB;AAAA,QACD;AAAA,MACD,GAJa;AAAA,IAKd,CAAC;AAED,WAAO,YAAY,SAAS,uBAAuB,qBAAqB,IAAI;AAE5E,UAAM,YAAY,KAAK,EAAE,OAAO,KAAK,CAAC;AACtC,WAAO,YAAY,sBAAsB,CAAC;AAE1C,UAAM,YAAY,KAAK,EAAE,OAAO,MAAM,sBAAsB,KAAK,CAAC;AAClE,WAAO,YAAY,sBAAsB,CAAC;AAE1C,eAAW,QAAQ;AACnB,WAAO,YAAY,SAAS,uBAAuB,qBAAqB,KAAK;AAE7E,UAAM,YAAY,KAAK,EAAE,OAAO,KAAK,CAAC;AACtC,WAAO,YAAY,sBAAsB,CAAC;AAAA,EAC3C,CAAC;AAED,OAAK,8FAA8F,iBAAkB;AACpH,UAAM,YAAY,QAAQ;AAE1B,UAAM,4BAA4B,aAAa,KAAK;AAAA,EACrD,CAAC;AAED,OAAK,+FAA+F,iBAAkB;AACrH,UAAM,YAAY,QAAQ;AAE1B,UAAM,4BAA4B,aAAa,IAAI;AAAA,EACpD,CAAC;AAED,iBAAe,4BAA4BD,cAAoE,OAA+B;AAC7I,UAAM,OAAO,IAAI,KAAK,UAAU;AAChC,WAAO,YAAY,SAAS,uBAAuB,qBAAqB,KAAK;AAE7E,UAAM,aAAa,SAAS,uBAAuB,mBAAmB;AAAA,MACrE,aAAa,8BAAO,IAAI,YAAY;AAEnC,YAAI,OAAO;AACV,gBAAM,QAAQ,EAAE;AAAA,QACjB;AAEA,cAAMA,aAAY,KAAK,EAAE,OAAO,KAAK,CAAC;AAAA,MACvC,GAPa;AAAA,IAQd,CAAC;AAED,WAAO,YAAY,SAAS,uBAAuB,qBAAqB,IAAI;AAE5E,UAAMA,aAAY,KAAK,EAAE,OAAO,MAAM,KAAK,CAAC;AAE5C,eAAW,QAAQ;AAAA,EACpB;AApBe;AAsBf,OAAK,oCAAoC,iBAAkB;AAC1D,UAAM,YAAY,QAAQ;AAE1B,UAAM,OAAO,IAAI,KAAK,UAAU;AAChC,WAAO,YAAY,SAAS,uBAAuB,qBAAqB,KAAK;AAE7E,QAAI,IAAuB;AAC3B,UAAM,aAAa,SAAS,uBAAuB,mBAAmB;AAAA,MACrE,aAAa,8BAAO,IAAI,YAAY;AACnC,YAAI;AACH,iBAAO,YAAY,QAAQ,QAAQ,WAAW,QAAQ;AACtD,iBAAO,YAAY,QAAQ,WAAW,SAAS,GAAG,KAAK,SAAS,CAAC;AAAA,QAClE,SAAS,OAAO;AACf,cAAI;AAAA,QACL;AAAA,MACD,GAPa;AAAA,IAQd,CAAC;AAED,WAAO,YAAY,SAAS,uBAAuB,qBAAqB,IAAI;AAE5E,UAAM,YAAY,KAAK,EAAE,OAAO,MAAM,KAAK,CAAC;AAE5C,QAAI,GAAG;AACN,YAAM;AAAA,IACP;AAEA,eAAW,QAAQ;AAAA,EACpB,CAAC;AAED,OAAK,UAAU,YAAY;AAC1B,UAAM,YAAY,QAAQ;AAC1B,gBAAY,OAAO,eAAe,cAAc;AAEhD,QAAI,kBAAkB;AACtB,gBAAY,IAAI,YAAY,YAAY,MAAM;AAC7C;AAAA,IACD,CAAC,CAAC;AAGF,UAAM,YAAY,OAAO,EAAE,MAAM,KAAK,CAAC;AAEvC,WAAO,YAAY,iBAAiB,CAAC;AACrC,WAAO,YAAY,YAAY,QAAQ,GAAG,KAAK;AAC/C,WAAO,YAAY,YAAY,OAAO,UAAU,cAAc;AAG9D,UAAM,YAAY,OAAO;AACzB,WAAO,YAAY,iBAAiB,CAAC;AACrC,WAAO,YAAY,YAAY,OAAO,UAAU,cAAc;AAG9D,UAAM,YAAY,OAAO,EAAE,OAAO,KAAK,CAAC;AACxC,WAAO,YAAY,iBAAiB,CAAC;AACrC,WAAO,YAAY,YAAY,OAAO,UAAU,YAAY;AAG5D,QAAI;AACH,kBAAY,OAAO,eAAe,cAAc;AAChD,eAAS,YAAY,uBAAuB,IAAI,mBAAmB,SAAS,oBAAoB,sBAAsB;AAEtH,YAAM,YAAY,OAAO,EAAE,OAAO,KAAK,CAAC;AAAA,IACzC,SAAS,OAAO;AAAA,IAEhB,UAAE;AACD,eAAS,YAAY,uBAAuB;AAAA,IAC7C;AAEA,WAAO,YAAY,iBAAiB,CAAC;AACrC,WAAO,YAAY,YAAY,QAAQ,GAAG,IAAI;AAG9C,QAAI;AACH,kBAAY,OAAO,eAAe,cAAc;AAChD,eAAS,YAAY,uBAAuB,IAAI,mBAAmB,SAAS,oBAAoB,cAAc;AAE9G,YAAM,YAAY,OAAO,EAAE,OAAO,KAAK,CAAC;AAAA,IACzC,SAAS,OAAO;AAAA,IAEhB,UAAE;AACD,eAAS,YAAY,uBAAuB;AAAA,IAC7C;AAEA,WAAO,YAAY,iBAAiB,CAAC;AACrC,WAAO,YAAY,YAAY,QAAQ,GAAG,KAAK;AAAA,EAChD,CAAC;AAED,OAAK,SAAS,YAAY;AACzB,WAAO,YAAY,YAAY,SAAS,2BAA2B,KAAK,GAAG,IAAI;AAE/E,UAAM,YAAY,QAAQ,EAAE,UAAU,eAAe,SAAS,WAAW,aAAa,CAAC,EAAE,CAAC;AAC1F,WAAO,YAAY,YAAY,SAAS,2BAA2B,KAAK,GAAG,IAAI;AAE/E,UAAM,cAAc,YAAY,KAAK;AACrC,WAAO,YAAY,YAAY,SAAS,2BAA2B,KAAK,GAAG,IAAI;AAC/E,WAAO,YAAY,YAAY,SAAS,2BAA2B,KAAK,GAAG,KAAK;AAChF,WAAO,YAAY,YAAY,SAAS,2BAA2B,YAAY,GAAG,IAAI;AAEtF,UAAM;AAEN,WAAO,YAAY,YAAY,SAAS,2BAA2B,KAAK,GAAG,KAAK;AAChF,WAAO,YAAY,YAAY,SAAS,2BAA2B,KAAK,GAAG,IAAI;AAC/E,WAAO,YAAY,YAAY,SAAS,2BAA2B,YAAY,GAAG,KAAK;AAAA,EACxF,CAAC;AAED,OAAK,aAAa,YAAY;AAC7B,UAAM,YAAY,QAAQ,EAAE,UAAU,eAAe,SAAS,WAAW,aAAa,CAAC,EAAE,CAAC;AAE1F,gBAAY,KAAK;AACjB,WAAO,YAAY,YAAY,SAAS,2BAA2B,YAAY,GAAG,IAAI;AAEtF,UAAM,YAAY,UAAU,2BAA2B,YAAY;AAEnE,WAAO,YAAY,YAAY,SAAS,2BAA2B,KAAK,GAAG,KAAK;AAChF,WAAO,YAAY,YAAY,SAAS,2BAA2B,KAAK,GAAG,IAAI;AAC/E,WAAO,YAAY,YAAY,SAAS,2BAA2B,YAAY,GAAG,KAAK;AAAA,EACxF,CAAC;AAED,OAAK,+CAA+C,YAAY;AAC/D,WAAO,YAAY,YAAY,WAAW,GAAG,KAAK;AAClD,WAAO,YAAY,YAAY,WAAW,GAAG,KAAK;AAClD,WAAO,YAAY,YAAY,WAAW,GAAG,KAAK;AAElD,UAAM,YAAY,QAAQ;AAE1B,WAAO,GAAG,YAAY,KAAK;AAC3B,WAAO,YAAY,YAAY,WAAW,GAAG,IAAI;AACjD,WAAO,YAAY,YAAY,WAAW,GAAG,KAAK;AAClD,WAAO,YAAY,YAAY,WAAW,GAAG,KAAK;AAElD,QAAI,gBAAgB;AACpB,gBAAY,IAAI,YAAY,cAAc,MAAM;AAC/C,sBAAgB;AAAA,IACjB,CAAC,CAAC;AAEF,QAAI,qBAAqB;AACzB,gBAAY,IAAI,YAAY,MAAM,cAAc,MAAM;AACrD,2BAAqB;AAAA,IACtB,CAAC,CAAC;AAEF,gBAAY,QAAQ;AAEpB,WAAO,YAAY,YAAY,WAAW,GAAG,IAAI;AACjD,WAAO,YAAY,eAAe,IAAI;AACtC,WAAO,YAAY,oBAAoB,IAAI;AAAA,EAC5C,CAAC;AAED,OAAK,yBAAyB,YAAY;AACzC,aAAS,YAAY,WAAW;AAEhC,UAAM,YAAY,QAAQ;AAE1B,WAAO,YAAY,CAAC,CAAC,YAAY,WAAW,GAAG,IAAI;AAEnD,aAAS,YAAY,WAAW;AAEhC,QAAI,gBAAgB;AACpB,gBAAY,IAAI,YAAY,oBAAoB,MAAM;AACrD,sBAAgB;AAAA,IACjB,CAAC,CAAC;AAEF,UAAM,YAAY,QAAQ;AAE1B,WAAO,YAAY,YAAY,WAAW,GAAG,KAAK;AAClD,WAAO,YAAY,eAAe,IAAI;AAAA,EACvC,CAAC;AAED,0CAAwC;AACzC,CAAC;",
  "names": ["workingCopy", "res"]
}
