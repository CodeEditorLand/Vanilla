{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/workingCopy/test/browser/workingCopyFileService.test.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport assert from 'assert';\nimport { TextFileEditorModel } from '../../../textfile/common/textFileEditorModel.js';\nimport { TextFileEditorModelManager } from '../../../textfile/common/textFileEditorModelManager.js';\nimport { IInstantiationService } from '../../../../../platform/instantiation/common/instantiation.js';\nimport { ensureNoDisposablesAreLeakedInTestSuite, toResource } from '../../../../../base/test/common/utils.js';\nimport { workbenchInstantiationService, TestServiceAccessor, ITestTextFileEditorModelManager } from '../../../../test/browser/workbenchTestServices.js';\nimport { URI } from '../../../../../base/common/uri.js';\nimport { FileOperation } from '../../../../../platform/files/common/files.js';\nimport { TestWorkingCopy } from '../../../../test/common/workbenchTestServices.js';\nimport { VSBuffer } from '../../../../../base/common/buffer.js';\nimport { ICopyOperation } from '../../common/workingCopyFileService.js';\nimport { CancellationToken, CancellationTokenSource } from '../../../../../base/common/cancellation.js';\nimport { timeout } from '../../../../../base/common/async.js';\nimport { DisposableStore } from '../../../../../base/common/lifecycle.js';\n\nsuite('WorkingCopyFileService', () => {\n\n\tconst disposables = new DisposableStore();\n\tlet instantiationService: IInstantiationService;\n\tlet accessor: TestServiceAccessor;\n\n\tsetup(() => {\n\t\tinstantiationService = workbenchInstantiationService(undefined, disposables);\n\t\taccessor = instantiationService.createInstance(TestServiceAccessor);\n\t\tdisposables.add(<TextFileEditorModelManager>accessor.textFileService.files);\n\t});\n\n\tteardown(() => {\n\t\tdisposables.clear();\n\t});\n\n\ttest('create - dirty file', async function () {\n\t\tawait testCreate(toResource.call(this, '/path/file.txt'), VSBuffer.fromString('Hello World'));\n\t});\n\n\ttest('delete - dirty file', async function () {\n\t\tawait testDelete([toResource.call(this, '/path/file.txt')]);\n\t});\n\n\ttest('delete multiple - dirty files', async function () {\n\t\tawait testDelete([\n\t\t\ttoResource.call(this, '/path/file1.txt'),\n\t\t\ttoResource.call(this, '/path/file2.txt'),\n\t\t\ttoResource.call(this, '/path/file3.txt'),\n\t\t\ttoResource.call(this, '/path/file4.txt')]);\n\t});\n\n\ttest('move - dirty file', async function () {\n\t\tawait testMoveOrCopy([{ source: toResource.call(this, '/path/file.txt'), target: toResource.call(this, '/path/file_target.txt') }], true);\n\t});\n\n\ttest('move - source identical to target', async function () {\n\t\tconst sourceModel: TextFileEditorModel = instantiationService.createInstance(TextFileEditorModel, toResource.call(this, '/path/file.txt'), 'utf8', undefined);\n\t\t(<ITestTextFileEditorModelManager>accessor.textFileService.files).add(sourceModel.resource, sourceModel);\n\n\t\tconst eventCounter = await testEventsMoveOrCopy([{ file: { source: sourceModel.resource, target: sourceModel.resource }, overwrite: true }], true);\n\n\t\tsourceModel.dispose();\n\t\tassert.strictEqual(eventCounter, 3);\n\t});\n\n\ttest('move - one source == target and another source != target', async function () {\n\t\tconst sourceModel1: TextFileEditorModel = instantiationService.createInstance(TextFileEditorModel, toResource.call(this, '/path/file1.txt'), 'utf8', undefined);\n\t\tconst sourceModel2: TextFileEditorModel = instantiationService.createInstance(TextFileEditorModel, toResource.call(this, '/path/file2.txt'), 'utf8', undefined);\n\t\tconst targetModel2: TextFileEditorModel = instantiationService.createInstance(TextFileEditorModel, toResource.call(this, '/path/file_target2.txt'), 'utf8', undefined);\n\t\t(<ITestTextFileEditorModelManager>accessor.textFileService.files).add(sourceModel1.resource, sourceModel1);\n\t\t(<ITestTextFileEditorModelManager>accessor.textFileService.files).add(sourceModel2.resource, sourceModel2);\n\t\t(<ITestTextFileEditorModelManager>accessor.textFileService.files).add(targetModel2.resource, targetModel2);\n\n\t\tconst eventCounter = await testEventsMoveOrCopy([\n\t\t\t{ file: { source: sourceModel1.resource, target: sourceModel1.resource }, overwrite: true },\n\t\t\t{ file: { source: sourceModel2.resource, target: targetModel2.resource }, overwrite: true }\n\t\t], true);\n\n\t\tsourceModel1.dispose();\n\t\tsourceModel2.dispose();\n\t\ttargetModel2.dispose();\n\t\tassert.strictEqual(eventCounter, 3);\n\t});\n\n\ttest('move multiple - dirty file', async function () {\n\t\tawait testMoveOrCopy([\n\t\t\t{ source: toResource.call(this, '/path/file1.txt'), target: toResource.call(this, '/path/file1_target.txt') },\n\t\t\t{ source: toResource.call(this, '/path/file2.txt'), target: toResource.call(this, '/path/file2_target.txt') }],\n\t\t\ttrue);\n\t});\n\n\ttest('move - dirty file (target exists and is dirty)', async function () {\n\t\tawait testMoveOrCopy([{ source: toResource.call(this, '/path/file.txt'), target: toResource.call(this, '/path/file_target.txt') }], true, true);\n\t});\n\n\ttest('copy - dirty file', async function () {\n\t\tawait testMoveOrCopy([{ source: toResource.call(this, '/path/file.txt'), target: toResource.call(this, '/path/file_target.txt') }], false);\n\t});\n\n\ttest('copy - source identical to target', async function () {\n\t\tconst sourceModel: TextFileEditorModel = instantiationService.createInstance(TextFileEditorModel, toResource.call(this, '/path/file.txt'), 'utf8', undefined);\n\t\t(<ITestTextFileEditorModelManager>accessor.textFileService.files).add(sourceModel.resource, sourceModel);\n\n\t\tconst eventCounter = await testEventsMoveOrCopy([{ file: { source: sourceModel.resource, target: sourceModel.resource }, overwrite: true }]);\n\n\t\tsourceModel.dispose();\n\t\tassert.strictEqual(eventCounter, 3);\n\t});\n\n\ttest('copy - one source == target and another source != target', async function () {\n\t\tconst sourceModel1: TextFileEditorModel = instantiationService.createInstance(TextFileEditorModel, toResource.call(this, '/path/file1.txt'), 'utf8', undefined);\n\t\tconst sourceModel2: TextFileEditorModel = instantiationService.createInstance(TextFileEditorModel, toResource.call(this, '/path/file2.txt'), 'utf8', undefined);\n\t\tconst targetModel2: TextFileEditorModel = instantiationService.createInstance(TextFileEditorModel, toResource.call(this, '/path/file_target2.txt'), 'utf8', undefined);\n\t\t(<ITestTextFileEditorModelManager>accessor.textFileService.files).add(sourceModel1.resource, sourceModel1);\n\t\t(<ITestTextFileEditorModelManager>accessor.textFileService.files).add(sourceModel2.resource, sourceModel2);\n\t\t(<ITestTextFileEditorModelManager>accessor.textFileService.files).add(targetModel2.resource, targetModel2);\n\n\t\tconst eventCounter = await testEventsMoveOrCopy([\n\t\t\t{ file: { source: sourceModel1.resource, target: sourceModel1.resource }, overwrite: true },\n\t\t\t{ file: { source: sourceModel2.resource, target: targetModel2.resource }, overwrite: true }\n\t\t]);\n\n\t\tsourceModel1.dispose();\n\t\tsourceModel2.dispose();\n\t\ttargetModel2.dispose();\n\t\tassert.strictEqual(eventCounter, 3);\n\t});\n\n\ttest('copy multiple - dirty file', async function () {\n\t\tawait testMoveOrCopy([\n\t\t\t{ source: toResource.call(this, '/path/file1.txt'), target: toResource.call(this, '/path/file_target1.txt') },\n\t\t\t{ source: toResource.call(this, '/path/file2.txt'), target: toResource.call(this, '/path/file_target2.txt') },\n\t\t\t{ source: toResource.call(this, '/path/file3.txt'), target: toResource.call(this, '/path/file_target3.txt') }],\n\t\t\tfalse);\n\t});\n\n\ttest('copy - dirty file (target exists and is dirty)', async function () {\n\t\tawait testMoveOrCopy([{ source: toResource.call(this, '/path/file.txt'), target: toResource.call(this, '/path/file_target.txt') }], false, true);\n\t});\n\n\ttest('getDirty', async function () {\n\t\tconst model1 = instantiationService.createInstance(TextFileEditorModel, toResource.call(this, '/path/file-1.txt'), 'utf8', undefined);\n\t\t(<ITestTextFileEditorModelManager>accessor.textFileService.files).add(model1.resource, model1);\n\n\t\tconst model2 = instantiationService.createInstance(TextFileEditorModel, toResource.call(this, '/path/file-2.txt'), 'utf8', undefined);\n\t\t(<ITestTextFileEditorModelManager>accessor.textFileService.files).add(model2.resource, model2);\n\n\t\tlet dirty = accessor.workingCopyFileService.getDirty(model1.resource);\n\t\tassert.strictEqual(dirty.length, 0);\n\n\t\tawait model1.resolve();\n\t\tmodel1.textEditorModel!.setValue('foo');\n\n\t\tdirty = accessor.workingCopyFileService.getDirty(model1.resource);\n\t\tassert.strictEqual(dirty.length, 1);\n\t\tassert.strictEqual(dirty[0], model1);\n\n\t\tdirty = accessor.workingCopyFileService.getDirty(toResource.call(this, '/path'));\n\t\tassert.strictEqual(dirty.length, 1);\n\t\tassert.strictEqual(dirty[0], model1);\n\n\t\tawait model2.resolve();\n\t\tmodel2.textEditorModel!.setValue('bar');\n\n\t\tdirty = accessor.workingCopyFileService.getDirty(toResource.call(this, '/path'));\n\t\tassert.strictEqual(dirty.length, 2);\n\n\t\tmodel1.dispose();\n\t\tmodel2.dispose();\n\t});\n\n\ttest('registerWorkingCopyProvider', async function () {\n\t\tconst model1: TextFileEditorModel = disposables.add(instantiationService.createInstance(TextFileEditorModel, toResource.call(this, '/path/file-1.txt'), 'utf8', undefined));\n\t\t(<ITestTextFileEditorModelManager>accessor.textFileService.files).add(model1.resource, model1);\n\t\tawait model1.resolve();\n\t\tmodel1.textEditorModel!.setValue('foo');\n\n\t\tconst testWorkingCopy: TestWorkingCopy = disposables.add(new TestWorkingCopy(toResource.call(this, '/path/file-2.txt'), true));\n\t\tconst registration = accessor.workingCopyFileService.registerWorkingCopyProvider(() => {\n\t\t\treturn [model1, testWorkingCopy];\n\t\t});\n\n\t\tlet dirty = accessor.workingCopyFileService.getDirty(model1.resource);\n\t\tassert.strictEqual(dirty.length, 2, 'Should return default working copy + working copy from provider');\n\t\tassert.strictEqual(dirty[0], model1);\n\t\tassert.strictEqual(dirty[1], testWorkingCopy);\n\n\t\tregistration.dispose();\n\n\t\tdirty = accessor.workingCopyFileService.getDirty(model1.resource);\n\t\tassert.strictEqual(dirty.length, 1, 'Should have unregistered our provider');\n\t\tassert.strictEqual(dirty[0], model1);\n\t});\n\n\ttest('createFolder', async function () {\n\t\tlet eventCounter = 0;\n\t\tlet correlationId: number | undefined = undefined;\n\n\t\tconst resource = toResource.call(this, '/path/folder');\n\n\t\tdisposables.add(accessor.workingCopyFileService.addFileOperationParticipant({\n\t\t\tparticipate: async (files, operation) => {\n\t\t\t\tassert.strictEqual(files.length, 1);\n\t\t\t\tconst file = files[0];\n\t\t\t\tassert.strictEqual(file.target.toString(), resource.toString());\n\t\t\t\tassert.strictEqual(operation, FileOperation.CREATE);\n\t\t\t\teventCounter++;\n\t\t\t}\n\t\t}));\n\n\t\tdisposables.add(accessor.workingCopyFileService.onWillRunWorkingCopyFileOperation(e => {\n\t\t\tassert.strictEqual(e.files.length, 1);\n\t\t\tconst file = e.files[0];\n\t\t\tassert.strictEqual(file.target.toString(), resource.toString());\n\t\t\tassert.strictEqual(e.operation, FileOperation.CREATE);\n\t\t\tcorrelationId = e.correlationId;\n\t\t\teventCounter++;\n\t\t}));\n\n\t\tdisposables.add(accessor.workingCopyFileService.onDidRunWorkingCopyFileOperation(e => {\n\t\t\tassert.strictEqual(e.files.length, 1);\n\t\t\tconst file = e.files[0];\n\t\t\tassert.strictEqual(file.target.toString(), resource.toString());\n\t\t\tassert.strictEqual(e.operation, FileOperation.CREATE);\n\t\t\tassert.strictEqual(e.correlationId, correlationId);\n\t\t\teventCounter++;\n\t\t}));\n\n\t\tawait accessor.workingCopyFileService.createFolder([{ resource }], CancellationToken.None);\n\n\t\tassert.strictEqual(eventCounter, 3);\n\t});\n\n\ttest('cancellation of participants', async function () {\n\t\tconst resource = toResource.call(this, '/path/folder');\n\n\t\tlet canceled = false;\n\t\tdisposables.add(accessor.workingCopyFileService.addFileOperationParticipant({\n\t\t\tparticipate: async (files, operation, info, t, token) => {\n\t\t\t\tawait timeout(0);\n\t\t\t\tcanceled = token.isCancellationRequested;\n\t\t\t}\n\t\t}));\n\n\t\t// Create\n\t\tlet cts = new CancellationTokenSource();\n\t\tlet promise: Promise<unknown> = accessor.workingCopyFileService.create([{ resource }], cts.token);\n\t\tcts.cancel();\n\t\tawait promise;\n\t\tassert.strictEqual(canceled, true);\n\t\tcanceled = false;\n\n\t\t// Create Folder\n\t\tcts = new CancellationTokenSource();\n\t\tpromise = accessor.workingCopyFileService.createFolder([{ resource }], cts.token);\n\t\tcts.cancel();\n\t\tawait promise;\n\t\tassert.strictEqual(canceled, true);\n\t\tcanceled = false;\n\n\t\t// Move\n\t\tcts = new CancellationTokenSource();\n\t\tpromise = accessor.workingCopyFileService.move([{ file: { source: resource, target: resource } }], cts.token);\n\t\tcts.cancel();\n\t\tawait promise;\n\t\tassert.strictEqual(canceled, true);\n\t\tcanceled = false;\n\n\t\t// Copy\n\t\tcts = new CancellationTokenSource();\n\t\tpromise = accessor.workingCopyFileService.copy([{ file: { source: resource, target: resource } }], cts.token);\n\t\tcts.cancel();\n\t\tawait promise;\n\t\tassert.strictEqual(canceled, true);\n\t\tcanceled = false;\n\n\t\t// Delete\n\t\tcts = new CancellationTokenSource();\n\t\tpromise = accessor.workingCopyFileService.delete([{ resource }], cts.token);\n\t\tcts.cancel();\n\t\tawait promise;\n\t\tassert.strictEqual(canceled, true);\n\t\tcanceled = false;\n\t});\n\n\tasync function testEventsMoveOrCopy(files: ICopyOperation[], move?: boolean): Promise<number> {\n\t\tlet eventCounter = 0;\n\n\t\tconst participant = accessor.workingCopyFileService.addFileOperationParticipant({\n\t\t\tparticipate: async files => {\n\t\t\t\teventCounter++;\n\t\t\t}\n\t\t});\n\n\t\tconst listener1 = accessor.workingCopyFileService.onWillRunWorkingCopyFileOperation(e => {\n\t\t\teventCounter++;\n\t\t});\n\n\t\tconst listener2 = accessor.workingCopyFileService.onDidRunWorkingCopyFileOperation(e => {\n\t\t\teventCounter++;\n\t\t});\n\n\t\tif (move) {\n\t\t\tawait accessor.workingCopyFileService.move(files, CancellationToken.None);\n\t\t} else {\n\t\t\tawait accessor.workingCopyFileService.copy(files, CancellationToken.None);\n\t\t}\n\n\t\tparticipant.dispose();\n\t\tlistener1.dispose();\n\t\tlistener2.dispose();\n\t\treturn eventCounter;\n\t}\n\n\tasync function testMoveOrCopy(files: { source: URI; target: URI }[], move: boolean, targetDirty?: boolean): Promise<void> {\n\n\t\tlet eventCounter = 0;\n\t\tconst models = await Promise.all(files.map(async ({ source, target }, i) => {\n\t\t\tconst sourceModel: TextFileEditorModel = instantiationService.createInstance(TextFileEditorModel, source, 'utf8', undefined);\n\t\t\tconst targetModel: TextFileEditorModel = instantiationService.createInstance(TextFileEditorModel, target, 'utf8', undefined);\n\t\t\t(<ITestTextFileEditorModelManager>accessor.textFileService.files).add(sourceModel.resource, sourceModel);\n\t\t\t(<ITestTextFileEditorModelManager>accessor.textFileService.files).add(targetModel.resource, targetModel);\n\n\t\t\tawait sourceModel.resolve();\n\t\t\tsourceModel.textEditorModel!.setValue('foo' + i);\n\t\t\tassert.ok(accessor.textFileService.isDirty(sourceModel.resource));\n\t\t\tif (targetDirty) {\n\t\t\t\tawait targetModel.resolve();\n\t\t\t\ttargetModel.textEditorModel!.setValue('bar' + i);\n\t\t\t\tassert.ok(accessor.textFileService.isDirty(targetModel.resource));\n\t\t\t}\n\n\t\t\treturn { sourceModel, targetModel };\n\t\t}));\n\n\t\tconst participant = accessor.workingCopyFileService.addFileOperationParticipant({\n\t\t\tparticipate: async (files, operation) => {\n\t\t\t\tfor (let i = 0; i < files.length; i++) {\n\t\t\t\t\tconst { target, source } = files[i];\n\t\t\t\t\tconst { targetModel, sourceModel } = models[i];\n\n\t\t\t\t\tassert.strictEqual(target.toString(), targetModel.resource.toString());\n\t\t\t\t\tassert.strictEqual(source?.toString(), sourceModel.resource.toString());\n\t\t\t\t}\n\n\t\t\t\teventCounter++;\n\n\t\t\t\tassert.strictEqual(operation, move ? FileOperation.MOVE : FileOperation.COPY);\n\t\t\t}\n\t\t});\n\n\t\tlet correlationId: number;\n\n\t\tconst listener1 = accessor.workingCopyFileService.onWillRunWorkingCopyFileOperation(e => {\n\t\t\tfor (let i = 0; i < e.files.length; i++) {\n\t\t\t\tconst { target, source } = files[i];\n\t\t\t\tconst { targetModel, sourceModel } = models[i];\n\n\t\t\t\tassert.strictEqual(target.toString(), targetModel.resource.toString());\n\t\t\t\tassert.strictEqual(source?.toString(), sourceModel.resource.toString());\n\t\t\t}\n\n\t\t\teventCounter++;\n\n\t\t\tcorrelationId = e.correlationId;\n\t\t\tassert.strictEqual(e.operation, move ? FileOperation.MOVE : FileOperation.COPY);\n\t\t});\n\n\t\tconst listener2 = accessor.workingCopyFileService.onDidRunWorkingCopyFileOperation(e => {\n\t\t\tfor (let i = 0; i < e.files.length; i++) {\n\t\t\t\tconst { target, source } = files[i];\n\t\t\t\tconst { targetModel, sourceModel } = models[i];\n\t\t\t\tassert.strictEqual(target.toString(), targetModel.resource.toString());\n\t\t\t\tassert.strictEqual(source?.toString(), sourceModel.resource.toString());\n\t\t\t}\n\n\t\t\teventCounter++;\n\n\t\t\tassert.strictEqual(e.operation, move ? FileOperation.MOVE : FileOperation.COPY);\n\t\t\tassert.strictEqual(e.correlationId, correlationId);\n\t\t});\n\n\t\tif (move) {\n\t\t\tawait accessor.workingCopyFileService.move(models.map(model => ({ file: { source: model.sourceModel.resource, target: model.targetModel.resource }, options: { overwrite: true } })), CancellationToken.None);\n\t\t} else {\n\t\t\tawait accessor.workingCopyFileService.copy(models.map(model => ({ file: { source: model.sourceModel.resource, target: model.targetModel.resource }, options: { overwrite: true } })), CancellationToken.None);\n\t\t}\n\n\t\tfor (let i = 0; i < models.length; i++) {\n\t\t\tconst { sourceModel, targetModel } = models[i];\n\n\t\t\tassert.strictEqual(targetModel.textEditorModel!.getValue(), 'foo' + i);\n\n\t\t\tif (move) {\n\t\t\t\tassert.ok(!accessor.textFileService.isDirty(sourceModel.resource));\n\t\t\t} else {\n\t\t\t\tassert.ok(accessor.textFileService.isDirty(sourceModel.resource));\n\t\t\t}\n\t\t\tassert.ok(accessor.textFileService.isDirty(targetModel.resource));\n\n\t\t\tsourceModel.dispose();\n\t\t\ttargetModel.dispose();\n\t\t}\n\t\tassert.strictEqual(eventCounter, 3);\n\n\t\tparticipant.dispose();\n\t\tlistener1.dispose();\n\t\tlistener2.dispose();\n\t}\n\n\tasync function testDelete(resources: URI[]) {\n\n\t\tconst models = await Promise.all(resources.map(async resource => {\n\t\t\tconst model = instantiationService.createInstance(TextFileEditorModel, resource, 'utf8', undefined);\n\t\t\t(<ITestTextFileEditorModelManager>accessor.textFileService.files).add(model.resource, model);\n\n\t\t\tawait model.resolve();\n\t\t\tmodel.textEditorModel!.setValue('foo');\n\t\t\tassert.ok(accessor.workingCopyService.isDirty(model.resource));\n\t\t\treturn model;\n\t\t}));\n\n\t\tlet eventCounter = 0;\n\t\tlet correlationId: number | undefined = undefined;\n\n\t\tconst participant = accessor.workingCopyFileService.addFileOperationParticipant({\n\t\t\tparticipate: async (files, operation) => {\n\t\t\t\tfor (let i = 0; i < models.length; i++) {\n\t\t\t\t\tconst model = models[i];\n\t\t\t\t\tconst file = files[i];\n\t\t\t\t\tassert.strictEqual(file.target.toString(), model.resource.toString());\n\t\t\t\t}\n\t\t\t\tassert.strictEqual(operation, FileOperation.DELETE);\n\t\t\t\teventCounter++;\n\t\t\t}\n\t\t});\n\n\t\tconst listener1 = accessor.workingCopyFileService.onWillRunWorkingCopyFileOperation(e => {\n\t\t\tfor (let i = 0; i < models.length; i++) {\n\t\t\t\tconst model = models[i];\n\t\t\t\tconst file = e.files[i];\n\t\t\t\tassert.strictEqual(file.target.toString(), model.resource.toString());\n\t\t\t}\n\t\t\tassert.strictEqual(e.operation, FileOperation.DELETE);\n\t\t\tcorrelationId = e.correlationId;\n\t\t\teventCounter++;\n\t\t});\n\n\t\tconst listener2 = accessor.workingCopyFileService.onDidRunWorkingCopyFileOperation(e => {\n\t\t\tfor (let i = 0; i < models.length; i++) {\n\t\t\t\tconst model = models[i];\n\t\t\t\tconst file = e.files[i];\n\t\t\t\tassert.strictEqual(file.target.toString(), model.resource.toString());\n\t\t\t}\n\t\t\tassert.strictEqual(e.operation, FileOperation.DELETE);\n\t\t\tassert.strictEqual(e.correlationId, correlationId);\n\t\t\teventCounter++;\n\t\t});\n\n\t\tawait accessor.workingCopyFileService.delete(models.map(model => ({ resource: model.resource })), CancellationToken.None);\n\t\tfor (const model of models) {\n\t\t\tassert.ok(!accessor.workingCopyService.isDirty(model.resource));\n\t\t\tmodel.dispose();\n\t\t}\n\n\t\tassert.strictEqual(eventCounter, 3);\n\n\t\tparticipant.dispose();\n\t\tlistener1.dispose();\n\t\tlistener2.dispose();\n\t}\n\n\tasync function testCreate(resource: URI, contents: VSBuffer) {\n\t\tconst model = instantiationService.createInstance(TextFileEditorModel, resource, 'utf8', undefined);\n\t\t(<ITestTextFileEditorModelManager>accessor.textFileService.files).add(model.resource, model);\n\n\t\tawait model.resolve();\n\t\tmodel.textEditorModel!.setValue('foo');\n\t\tassert.ok(accessor.workingCopyService.isDirty(model.resource));\n\n\t\tlet eventCounter = 0;\n\t\tlet correlationId: number | undefined = undefined;\n\n\t\tdisposables.add(accessor.workingCopyFileService.addFileOperationParticipant({\n\t\t\tparticipate: async (files, operation) => {\n\t\t\t\tassert.strictEqual(files.length, 1);\n\t\t\t\tconst file = files[0];\n\t\t\t\tassert.strictEqual(file.target.toString(), model.resource.toString());\n\t\t\t\tassert.strictEqual(operation, FileOperation.CREATE);\n\t\t\t\teventCounter++;\n\t\t\t}\n\t\t}));\n\n\t\tdisposables.add(accessor.workingCopyFileService.onWillRunWorkingCopyFileOperation(e => {\n\t\t\tassert.strictEqual(e.files.length, 1);\n\t\t\tconst file = e.files[0];\n\t\t\tassert.strictEqual(file.target.toString(), model.resource.toString());\n\t\t\tassert.strictEqual(e.operation, FileOperation.CREATE);\n\t\t\tcorrelationId = e.correlationId;\n\t\t\teventCounter++;\n\t\t}));\n\n\t\tdisposables.add(accessor.workingCopyFileService.onDidRunWorkingCopyFileOperation(e => {\n\t\t\tassert.strictEqual(e.files.length, 1);\n\t\t\tconst file = e.files[0];\n\t\t\tassert.strictEqual(file.target.toString(), model.resource.toString());\n\t\t\tassert.strictEqual(e.operation, FileOperation.CREATE);\n\t\t\tassert.strictEqual(e.correlationId, correlationId);\n\t\t\teventCounter++;\n\t\t}));\n\n\t\tawait accessor.workingCopyFileService.create([{ resource, contents }], CancellationToken.None);\n\t\tassert.ok(!accessor.workingCopyService.isDirty(model.resource));\n\t\tmodel.dispose();\n\n\t\tassert.strictEqual(eventCounter, 3);\n\t}\n\n\tensureNoDisposablesAreLeakedInTestSuite();\n});\n"],
  "mappings": "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",
  "names": ["files"]
}
