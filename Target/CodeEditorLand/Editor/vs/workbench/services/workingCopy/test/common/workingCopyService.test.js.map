{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/workingCopy/test/common/workingCopyService.test.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport assert from 'assert';\nimport { IWorkingCopy } from '../../common/workingCopy.js';\nimport { URI } from '../../../../../base/common/uri.js';\nimport { TestWorkingCopy } from '../../../../test/common/workbenchTestServices.js';\nimport { IWorkingCopySaveEvent, WorkingCopyService } from '../../common/workingCopyService.js';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from '../../../../../base/test/common/utils.js';\nimport { DisposableStore } from '../../../../../base/common/lifecycle.js';\n\nsuite('WorkingCopyService', () => {\n\n\tconst disposables = new DisposableStore();\n\n\tteardown(() => {\n\t\tdisposables.clear();\n\t});\n\n\ttest('registry - basics', () => {\n\t\tconst service = disposables.add(new WorkingCopyService());\n\n\t\tconst onDidChangeDirty: IWorkingCopy[] = [];\n\t\tdisposables.add(service.onDidChangeDirty(copy => onDidChangeDirty.push(copy)));\n\n\t\tconst onDidChangeContent: IWorkingCopy[] = [];\n\t\tdisposables.add(service.onDidChangeContent(copy => onDidChangeContent.push(copy)));\n\n\t\tconst onDidSave: IWorkingCopySaveEvent[] = [];\n\t\tdisposables.add(service.onDidSave(copy => onDidSave.push(copy)));\n\n\t\tconst onDidRegister: IWorkingCopy[] = [];\n\t\tdisposables.add(service.onDidRegister(copy => onDidRegister.push(copy)));\n\n\t\tconst onDidUnregister: IWorkingCopy[] = [];\n\t\tdisposables.add(service.onDidUnregister(copy => onDidUnregister.push(copy)));\n\n\t\tassert.strictEqual(service.hasDirty, false);\n\t\tassert.strictEqual(service.dirtyCount, 0);\n\t\tassert.strictEqual(service.workingCopies.length, 0);\n\t\tassert.strictEqual(service.isDirty(URI.file('/')), false);\n\n\t\t// resource 1\n\t\tconst resource1 = URI.file('/some/folder/file.txt');\n\t\tassert.strictEqual(service.has(resource1), false);\n\t\tassert.strictEqual(service.has({ resource: resource1, typeId: 'testWorkingCopyType' }), false);\n\t\tassert.strictEqual(service.get({ resource: resource1, typeId: 'testWorkingCopyType' }), undefined);\n\t\tassert.strictEqual(service.getAll(resource1), undefined);\n\t\tconst copy1 = disposables.add(new TestWorkingCopy(resource1));\n\t\tconst unregister1 = service.registerWorkingCopy(copy1);\n\n\t\tassert.strictEqual(service.workingCopies.length, 1);\n\t\tassert.strictEqual(service.workingCopies[0], copy1);\n\t\tassert.strictEqual(onDidRegister.length, 1);\n\t\tassert.strictEqual(onDidRegister[0], copy1);\n\t\tassert.strictEqual(service.dirtyCount, 0);\n\t\tassert.strictEqual(service.modifiedCount, 0);\n\t\tassert.strictEqual(service.isDirty(resource1), false);\n\t\tassert.strictEqual(service.has(resource1), true);\n\t\tassert.strictEqual(service.has(copy1), true);\n\t\tassert.strictEqual(service.get(copy1), copy1);\n\t\tassert.strictEqual(service.hasDirty, false);\n\n\t\tconst copies = service.getAll(copy1.resource);\n\t\tassert.strictEqual(copies?.length, 1);\n\t\tassert.strictEqual(copies[0], copy1);\n\n\t\tcopy1.setDirty(true);\n\t\tcopy1.save();\n\n\t\tassert.strictEqual(copy1.isDirty(), true);\n\t\tassert.strictEqual(service.dirtyCount, 1);\n\t\tassert.strictEqual(service.dirtyWorkingCopies.length, 1);\n\t\tassert.strictEqual(service.dirtyWorkingCopies[0], copy1);\n\t\tassert.strictEqual(service.modifiedCount, 1);\n\t\tassert.strictEqual(service.modifiedWorkingCopies.length, 1);\n\t\tassert.strictEqual(service.modifiedWorkingCopies[0], copy1);\n\t\tassert.strictEqual(service.workingCopies.length, 1);\n\t\tassert.strictEqual(service.workingCopies[0], copy1);\n\t\tassert.strictEqual(service.isDirty(resource1), true);\n\t\tassert.strictEqual(service.hasDirty, true);\n\t\tassert.strictEqual(onDidChangeDirty.length, 1);\n\t\tassert.strictEqual(onDidChangeDirty[0], copy1);\n\t\tassert.strictEqual(onDidSave.length, 1);\n\t\tassert.strictEqual(onDidSave[0].workingCopy, copy1);\n\n\t\tcopy1.setContent('foo');\n\n\t\tassert.strictEqual(onDidChangeContent.length, 1);\n\t\tassert.strictEqual(onDidChangeContent[0], copy1);\n\n\t\tcopy1.setDirty(false);\n\n\t\tassert.strictEqual(service.dirtyCount, 0);\n\t\tassert.strictEqual(service.isDirty(resource1), false);\n\t\tassert.strictEqual(service.hasDirty, false);\n\t\tassert.strictEqual(onDidChangeDirty.length, 2);\n\t\tassert.strictEqual(onDidChangeDirty[1], copy1);\n\n\t\tunregister1.dispose();\n\n\t\tassert.strictEqual(onDidUnregister.length, 1);\n\t\tassert.strictEqual(onDidUnregister[0], copy1);\n\t\tassert.strictEqual(service.workingCopies.length, 0);\n\t\tassert.strictEqual(service.has(resource1), false);\n\n\t\t// resource 2\n\t\tconst resource2 = URI.file('/some/folder/file-dirty.txt');\n\t\tconst copy2 = disposables.add(new TestWorkingCopy(resource2, true));\n\t\tconst unregister2 = service.registerWorkingCopy(copy2);\n\n\t\tassert.strictEqual(onDidRegister.length, 2);\n\t\tassert.strictEqual(onDidRegister[1], copy2);\n\t\tassert.strictEqual(service.dirtyCount, 1);\n\t\tassert.strictEqual(service.isDirty(resource2), true);\n\t\tassert.strictEqual(service.hasDirty, true);\n\n\t\tassert.strictEqual(onDidChangeDirty.length, 3);\n\t\tassert.strictEqual(onDidChangeDirty[2], copy2);\n\n\t\tcopy2.setContent('foo');\n\n\t\tassert.strictEqual(onDidChangeContent.length, 2);\n\t\tassert.strictEqual(onDidChangeContent[1], copy2);\n\n\t\tunregister2.dispose();\n\n\t\tassert.strictEqual(onDidUnregister.length, 2);\n\t\tassert.strictEqual(onDidUnregister[1], copy2);\n\t\tassert.strictEqual(service.dirtyCount, 0);\n\t\tassert.strictEqual(service.hasDirty, false);\n\t\tassert.strictEqual(onDidChangeDirty.length, 4);\n\t\tassert.strictEqual(onDidChangeDirty[3], copy2);\n\t});\n\n\ttest('registry - multiple copies on same resource throws (same type ID)', () => {\n\t\tconst service = disposables.add(new WorkingCopyService());\n\n\t\tconst resource = URI.parse('custom://some/folder/custom.txt');\n\n\t\tconst copy1 = disposables.add(new TestWorkingCopy(resource));\n\t\tdisposables.add(service.registerWorkingCopy(copy1));\n\n\t\tconst copy2 = disposables.add(new TestWorkingCopy(resource));\n\n\t\tassert.throws(() => service.registerWorkingCopy(copy2));\n\t});\n\n\ttest('registry - multiple copies on same resource is supported (different type ID)', () => {\n\t\tconst service = disposables.add(new WorkingCopyService());\n\n\t\tconst resource = URI.parse('custom://some/folder/custom.txt');\n\n\t\tconst typeId1 = 'testWorkingCopyTypeId1';\n\t\tlet copy1 = disposables.add(new TestWorkingCopy(resource, false, typeId1));\n\t\tlet dispose1 = service.registerWorkingCopy(copy1);\n\n\t\tconst typeId2 = 'testWorkingCopyTypeId2';\n\t\tconst copy2 = disposables.add(new TestWorkingCopy(resource, false, typeId2));\n\t\tconst dispose2 = service.registerWorkingCopy(copy2);\n\n\t\tconst typeId3 = 'testWorkingCopyTypeId3';\n\t\tconst copy3 = disposables.add(new TestWorkingCopy(resource, false, typeId3));\n\t\tconst dispose3 = service.registerWorkingCopy(copy3);\n\n\t\tconst copies = service.getAll(resource);\n\t\tassert.strictEqual(copies?.length, 3);\n\t\tassert.strictEqual(copies[0], copy1);\n\t\tassert.strictEqual(copies[1], copy2);\n\t\tassert.strictEqual(copies[2], copy3);\n\n\t\tassert.strictEqual(service.dirtyCount, 0);\n\t\tassert.strictEqual(service.isDirty(resource), false);\n\t\tassert.strictEqual(service.isDirty(resource, typeId1), false);\n\n\t\tcopy1.setDirty(true);\n\t\tassert.strictEqual(service.dirtyCount, 1);\n\t\tassert.strictEqual(service.isDirty(resource), true);\n\t\tassert.strictEqual(service.isDirty(resource, typeId1), true);\n\t\tassert.strictEqual(service.isDirty(resource, typeId2), false);\n\n\t\tcopy2.setDirty(true);\n\t\tassert.strictEqual(service.dirtyCount, 2);\n\t\tassert.strictEqual(service.isDirty(resource), true);\n\t\tassert.strictEqual(service.isDirty(resource, typeId1), true);\n\t\tassert.strictEqual(service.isDirty(resource, typeId2), true);\n\n\t\tcopy3.setDirty(true);\n\t\tassert.strictEqual(service.dirtyCount, 3);\n\t\tassert.strictEqual(service.isDirty(resource), true);\n\t\tassert.strictEqual(service.isDirty(resource, typeId1), true);\n\t\tassert.strictEqual(service.isDirty(resource, typeId2), true);\n\t\tassert.strictEqual(service.isDirty(resource, typeId3), true);\n\n\t\tcopy1.setDirty(false);\n\t\tcopy2.setDirty(false);\n\t\tcopy3.setDirty(false);\n\t\tassert.strictEqual(service.dirtyCount, 0);\n\t\tassert.strictEqual(service.isDirty(resource), false);\n\t\tassert.strictEqual(service.isDirty(resource, typeId1), false);\n\t\tassert.strictEqual(service.isDirty(resource, typeId2), false);\n\t\tassert.strictEqual(service.isDirty(resource, typeId3), false);\n\n\t\tdispose1.dispose();\n\t\tcopy1 = disposables.add(new TestWorkingCopy(resource, false, typeId1));\n\t\tdispose1 = service.registerWorkingCopy(copy1);\n\n\t\tdispose1.dispose();\n\t\tdispose2.dispose();\n\t\tdispose3.dispose();\n\n\t\tassert.strictEqual(service.workingCopies.length, 0);\n\t});\n\n\tensureNoDisposablesAreLeakedInTestSuite();\n});\n"],
  "mappings": "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",
  "names": []
}
