{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/workingCopy/test/browser/untitledFileWorkingCopy.test.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport assert from 'assert';\nimport { VSBufferReadableStream, newWriteableBufferStream, VSBuffer, streamToBuffer, bufferToStream, readableToBuffer, VSBufferReadable } from '../../../../../base/common/buffer.js';\nimport { CancellationToken } from '../../../../../base/common/cancellation.js';\nimport { Emitter } from '../../../../../base/common/event.js';\nimport { Disposable, DisposableStore } from '../../../../../base/common/lifecycle.js';\nimport { Schemas } from '../../../../../base/common/network.js';\nimport { basename } from '../../../../../base/common/resources.js';\nimport { consumeReadable, consumeStream, isReadable, isReadableStream } from '../../../../../base/common/stream.js';\nimport { URI } from '../../../../../base/common/uri.js';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from '../../../../../base/test/common/utils.js';\nimport { IInstantiationService } from '../../../../../platform/instantiation/common/instantiation.js';\nimport { SnapshotContext } from '../../common/fileWorkingCopy.js';\nimport { IUntitledFileWorkingCopyModel, IUntitledFileWorkingCopyModelContentChangedEvent, IUntitledFileWorkingCopyModelFactory, UntitledFileWorkingCopy } from '../../common/untitledFileWorkingCopy.js';\nimport { TestServiceAccessor, workbenchInstantiationService } from '../../../../test/browser/workbenchTestServices.js';\n\nexport class TestUntitledFileWorkingCopyModel extends Disposable implements IUntitledFileWorkingCopyModel {\n\n\tprivate readonly _onDidChangeContent = this._register(new Emitter<IUntitledFileWorkingCopyModelContentChangedEvent>());\n\treadonly onDidChangeContent = this._onDidChangeContent.event;\n\n\tprivate readonly _onWillDispose = this._register(new Emitter<void>());\n\treadonly onWillDispose = this._onWillDispose.event;\n\n\tconstructor(readonly resource: URI, public contents: string) {\n\t\tsuper();\n\t}\n\n\tfireContentChangeEvent(event: IUntitledFileWorkingCopyModelContentChangedEvent): void {\n\t\tthis._onDidChangeContent.fire(event);\n\t}\n\n\tupdateContents(newContents: string): void {\n\t\tthis.doUpdate(newContents);\n\t}\n\n\tprivate throwOnSnapshot = false;\n\tsetThrowOnSnapshot(): void {\n\t\tthis.throwOnSnapshot = true;\n\t}\n\n\tasync snapshot(context: SnapshotContext, token: CancellationToken): Promise<VSBufferReadableStream> {\n\t\tif (this.throwOnSnapshot) {\n\t\t\tthrow new Error('Fail');\n\t\t}\n\n\t\tconst stream = newWriteableBufferStream();\n\t\tstream.end(VSBuffer.fromString(this.contents));\n\n\t\treturn stream;\n\t}\n\n\tasync update(contents: VSBufferReadableStream, token: CancellationToken): Promise<void> {\n\t\tthis.doUpdate((await streamToBuffer(contents)).toString());\n\t}\n\n\tprivate doUpdate(newContents: string): void {\n\t\tthis.contents = newContents;\n\n\t\tthis.versionId++;\n\n\t\tthis._onDidChangeContent.fire({ isInitial: newContents.length === 0 });\n\t}\n\n\tversionId = 0;\n\n\tpushedStackElement = false;\n\n\tpushStackElement(): void {\n\t\tthis.pushedStackElement = true;\n\t}\n\n\toverride dispose(): void {\n\t\tthis._onWillDispose.fire();\n\n\t\tsuper.dispose();\n\t}\n}\n\nexport class TestUntitledFileWorkingCopyModelFactory implements IUntitledFileWorkingCopyModelFactory<TestUntitledFileWorkingCopyModel> {\n\n\tasync createModel(resource: URI, contents: VSBufferReadableStream, token: CancellationToken): Promise<TestUntitledFileWorkingCopyModel> {\n\t\treturn new TestUntitledFileWorkingCopyModel(resource, (await streamToBuffer(contents)).toString());\n\t}\n}\n\nsuite('UntitledFileWorkingCopy', () => {\n\n\tconst factory = new TestUntitledFileWorkingCopyModelFactory();\n\n\tconst disposables = new DisposableStore();\n\tconst resource = URI.from({ scheme: Schemas.untitled, path: 'Untitled-1' });\n\tlet instantiationService: IInstantiationService;\n\tlet accessor: TestServiceAccessor;\n\tlet workingCopy: UntitledFileWorkingCopy<TestUntitledFileWorkingCopyModel>;\n\n\tfunction createWorkingCopy(uri: URI = resource, hasAssociatedFilePath = false, initialValue = '') {\n\t\treturn disposables.add(new UntitledFileWorkingCopy<TestUntitledFileWorkingCopyModel>(\n\t\t\t'testUntitledWorkingCopyType',\n\t\t\turi,\n\t\t\tbasename(uri),\n\t\t\thasAssociatedFilePath,\n\t\t\tfalse,\n\t\t\tinitialValue.length > 0 ? { value: bufferToStream(VSBuffer.fromString(initialValue)) } : undefined,\n\t\t\tfactory,\n\t\t\tasync workingCopy => { await workingCopy.revert(); return true; },\n\t\t\taccessor.workingCopyService,\n\t\t\taccessor.workingCopyBackupService,\n\t\t\taccessor.logService\n\t\t));\n\t}\n\n\tsetup(() => {\n\t\tinstantiationService = workbenchInstantiationService(undefined, disposables);\n\t\taccessor = instantiationService.createInstance(TestServiceAccessor);\n\n\t\tworkingCopy = disposables.add(createWorkingCopy());\n\t});\n\n\tteardown(() => {\n\t\tdisposables.clear();\n\t});\n\n\ttest('registers with working copy service', async () => {\n\t\tassert.strictEqual(accessor.workingCopyService.workingCopies.length, 1);\n\n\t\tworkingCopy.dispose();\n\n\t\tassert.strictEqual(accessor.workingCopyService.workingCopies.length, 0);\n\t});\n\n\ttest('dirty', async () => {\n\t\tassert.strictEqual(workingCopy.isDirty(), false);\n\n\t\tlet changeDirtyCounter = 0;\n\t\tdisposables.add(workingCopy.onDidChangeDirty(() => {\n\t\t\tchangeDirtyCounter++;\n\t\t}));\n\n\t\tlet contentChangeCounter = 0;\n\t\tdisposables.add(workingCopy.onDidChangeContent(() => {\n\t\t\tcontentChangeCounter++;\n\t\t}));\n\n\t\tawait workingCopy.resolve();\n\t\tassert.strictEqual(workingCopy.isResolved(), true);\n\n\t\t// Dirty from: Model content change\n\t\tworkingCopy.model?.updateContents('hello dirty');\n\t\tassert.strictEqual(contentChangeCounter, 1);\n\n\t\tassert.strictEqual(workingCopy.isDirty(), true);\n\t\tassert.strictEqual(changeDirtyCounter, 1);\n\n\t\tawait workingCopy.save();\n\n\t\tassert.strictEqual(workingCopy.isDirty(), false);\n\t\tassert.strictEqual(changeDirtyCounter, 2);\n\t});\n\n\ttest('dirty - cleared when content event signals isEmpty', async () => {\n\t\tassert.strictEqual(workingCopy.isDirty(), false);\n\n\t\tawait workingCopy.resolve();\n\n\t\tworkingCopy.model?.updateContents('hello dirty');\n\t\tassert.strictEqual(workingCopy.isDirty(), true);\n\n\t\tworkingCopy.model?.fireContentChangeEvent({ isInitial: true });\n\n\t\tassert.strictEqual(workingCopy.isDirty(), false);\n\t});\n\n\ttest('dirty - not cleared when content event signals isEmpty when associated resource', async () => {\n\t\tworkingCopy.dispose();\n\t\tworkingCopy = createWorkingCopy(resource, true);\n\n\t\tawait workingCopy.resolve();\n\n\t\tworkingCopy.model?.updateContents('hello dirty');\n\t\tassert.strictEqual(workingCopy.isDirty(), true);\n\n\t\tworkingCopy.model?.fireContentChangeEvent({ isInitial: true });\n\n\t\tassert.strictEqual(workingCopy.isDirty(), true);\n\t});\n\n\ttest('revert', async () => {\n\t\tlet revertCounter = 0;\n\t\tdisposables.add(workingCopy.onDidRevert(() => {\n\t\t\trevertCounter++;\n\t\t}));\n\n\t\tlet disposeCounter = 0;\n\t\tdisposables.add(workingCopy.onWillDispose(() => {\n\t\t\tdisposeCounter++;\n\t\t}));\n\n\t\tawait workingCopy.resolve();\n\n\t\tworkingCopy.model?.updateContents('hello dirty');\n\t\tassert.strictEqual(workingCopy.isDirty(), true);\n\n\t\tawait workingCopy.revert();\n\n\t\tassert.strictEqual(revertCounter, 1);\n\t\tassert.strictEqual(disposeCounter, 1);\n\t\tassert.strictEqual(workingCopy.isDirty(), false);\n\t});\n\n\ttest('dispose', async () => {\n\t\tlet disposeCounter = 0;\n\t\tdisposables.add(workingCopy.onWillDispose(() => {\n\t\t\tdisposeCounter++;\n\t\t}));\n\n\t\tawait workingCopy.resolve();\n\t\tworkingCopy.dispose();\n\n\t\tassert.strictEqual(disposeCounter, 1);\n\t});\n\n\ttest('backup', async () => {\n\t\tassert.strictEqual((await workingCopy.backup(CancellationToken.None)).content, undefined);\n\n\t\tawait workingCopy.resolve();\n\n\t\tworkingCopy.model?.updateContents('Hello Backup');\n\t\tconst backup = await workingCopy.backup(CancellationToken.None);\n\n\t\tlet backupContents: string | undefined = undefined;\n\t\tif (isReadableStream(backup.content)) {\n\t\t\tbackupContents = (await consumeStream(backup.content, chunks => VSBuffer.concat(chunks))).toString();\n\t\t} else if (backup.content) {\n\t\t\tbackupContents = consumeReadable(backup.content, chunks => VSBuffer.concat(chunks)).toString();\n\t\t}\n\n\t\tassert.strictEqual(backupContents, 'Hello Backup');\n\t});\n\n\ttest('resolve - without contents', async () => {\n\t\tassert.strictEqual(workingCopy.isResolved(), false);\n\t\tassert.strictEqual(workingCopy.hasAssociatedFilePath, false);\n\t\tassert.strictEqual(workingCopy.model, undefined);\n\n\t\tawait workingCopy.resolve();\n\n\t\tassert.strictEqual(workingCopy.isResolved(), true);\n\t\tassert.ok(workingCopy.model);\n\t});\n\n\ttest('resolve - with initial contents', async () => {\n\t\tworkingCopy.dispose();\n\n\t\tworkingCopy = createWorkingCopy(resource, false, 'Hello Initial');\n\n\t\tlet contentChangeCounter = 0;\n\t\tdisposables.add(workingCopy.onDidChangeContent(() => {\n\t\t\tcontentChangeCounter++;\n\t\t}));\n\n\t\tassert.strictEqual(workingCopy.isDirty(), true);\n\n\t\tawait workingCopy.resolve();\n\n\t\tassert.strictEqual(workingCopy.isDirty(), true);\n\t\tassert.strictEqual(workingCopy.model?.contents, 'Hello Initial');\n\t\tassert.strictEqual(contentChangeCounter, 1);\n\n\t\tworkingCopy.model.updateContents('Changed contents');\n\n\t\tawait workingCopy.resolve(); // second resolve should be ignored\n\t\tassert.strictEqual(workingCopy.model?.contents, 'Changed contents');\n\t});\n\n\ttest('backup - with initial contents uses those even if unresolved', async () => {\n\t\tworkingCopy.dispose();\n\n\t\tworkingCopy = createWorkingCopy(resource, false, 'Hello Initial');\n\n\t\tassert.strictEqual(workingCopy.isDirty(), true);\n\n\t\tconst backup = (await workingCopy.backup(CancellationToken.None)).content;\n\t\tif (isReadableStream(backup)) {\n\t\t\tconst value = await streamToBuffer(backup as VSBufferReadableStream);\n\t\t\tassert.strictEqual(value.toString(), 'Hello Initial');\n\t\t} else if (isReadable(backup)) {\n\t\t\tconst value = readableToBuffer(backup as VSBufferReadable);\n\t\t\tassert.strictEqual(value.toString(), 'Hello Initial');\n\t\t} else {\n\t\t\tassert.fail('Missing untitled backup');\n\t\t}\n\t});\n\n\n\ttest('resolve - with associated resource', async () => {\n\t\tworkingCopy.dispose();\n\t\tworkingCopy = createWorkingCopy(resource, true);\n\n\t\tawait workingCopy.resolve();\n\n\t\tassert.strictEqual(workingCopy.isDirty(), true);\n\t\tassert.strictEqual(workingCopy.hasAssociatedFilePath, true);\n\t});\n\n\ttest('resolve - with backup', async () => {\n\t\tawait workingCopy.resolve();\n\t\tworkingCopy.model?.updateContents('Hello Backup');\n\n\t\tconst backup = await workingCopy.backup(CancellationToken.None);\n\t\tawait accessor.workingCopyBackupService.backup(workingCopy, backup.content, undefined, backup.meta);\n\n\t\tassert.strictEqual(accessor.workingCopyBackupService.hasBackupSync(workingCopy), true);\n\n\t\tworkingCopy.dispose();\n\n\t\tworkingCopy = createWorkingCopy();\n\n\t\tlet contentChangeCounter = 0;\n\t\tdisposables.add(workingCopy.onDidChangeContent(() => {\n\t\t\tcontentChangeCounter++;\n\t\t}));\n\n\t\tawait workingCopy.resolve();\n\n\t\tassert.strictEqual(workingCopy.isDirty(), true);\n\t\tassert.strictEqual(workingCopy.model?.contents, 'Hello Backup');\n\t\tassert.strictEqual(contentChangeCounter, 1);\n\t});\n\n\tensureNoDisposablesAreLeakedInTestSuite();\n});\n"],
  "mappings": ";;AAKA,OAAO,YAAY;AACnB,SAAS,wBAAwB,0BAA0B,UAAU,gBAAgB,gBAAgB,kBAAkB,wBAAwB;AAC/I,SAAS,yBAAyB;AAClC,SAAS,eAAe;AACxB,SAAS,YAAY,uBAAuB;AAC5C,SAAS,eAAe;AACxB,SAAS,gBAAgB;AACzB,SAAS,iBAAiB,eAAe,YAAY,wBAAwB;AAC7E,SAAS,WAAW;AACpB,SAAS,+CAA+C;AACxD,SAAS,6BAA6B;AACtC,SAAS,uBAAuB;AAChC,SAAS,+BAA+B,kDAAkD,sCAAsC,+BAA+B;AAC/J,SAAS,qBAAqB,qCAAqC;AAE5D,MAAM,yCAAyC,WAAoD;AAAA,EAQzG,YAAqB,UAAsB,UAAkB;AAC5D,UAAM;AADc;AAAsB;AAAA,EAE3C;AAAA,EA9BD,OAoB0G;AAAA;AAAA;AAAA,EAExF,sBAAsB,KAAK,UAAU,IAAI,QAA0D,CAAC;AAAA,EAC5G,qBAAqB,KAAK,oBAAoB;AAAA,EAEtC,iBAAiB,KAAK,UAAU,IAAI,QAAc,CAAC;AAAA,EAC3D,gBAAgB,KAAK,eAAe;AAAA,EAM7C,uBAAuB,OAA+D;AACrF,SAAK,oBAAoB,KAAK,KAAK;AAAA,EACpC;AAAA,EAEA,eAAe,aAA2B;AACzC,SAAK,SAAS,WAAW;AAAA,EAC1B;AAAA,EAEQ,kBAAkB;AAAA,EAC1B,qBAA2B;AAC1B,SAAK,kBAAkB;AAAA,EACxB;AAAA,EAEA,MAAM,SAAS,SAA0B,OAA2D;AACnG,QAAI,KAAK,iBAAiB;AACzB,YAAM,IAAI,MAAM,MAAM;AAAA,IACvB;AAEA,UAAM,SAAS,yBAAyB;AACxC,WAAO,IAAI,SAAS,WAAW,KAAK,QAAQ,CAAC;AAE7C,WAAO;AAAA,EACR;AAAA,EAEA,MAAM,OAAO,UAAkC,OAAyC;AACvF,SAAK,UAAU,MAAM,eAAe,QAAQ,GAAG,SAAS,CAAC;AAAA,EAC1D;AAAA,EAEQ,SAAS,aAA2B;AAC3C,SAAK,WAAW;AAEhB,SAAK;AAEL,SAAK,oBAAoB,KAAK,EAAE,WAAW,YAAY,WAAW,EAAE,CAAC;AAAA,EACtE;AAAA,EAEA,YAAY;AAAA,EAEZ,qBAAqB;AAAA,EAErB,mBAAyB;AACxB,SAAK,qBAAqB;AAAA,EAC3B;AAAA,EAES,UAAgB;AACxB,SAAK,eAAe,KAAK;AAEzB,UAAM,QAAQ;AAAA,EACf;AACD;AAEO,MAAM,wCAA0H;AAAA,EAnFvI,OAmFuI;AAAA;AAAA;AAAA,EAEtI,MAAM,YAAY,UAAe,UAAkC,OAAqE;AACvI,WAAO,IAAI,iCAAiC,WAAW,MAAM,eAAe,QAAQ,GAAG,SAAS,CAAC;AAAA,EAClG;AACD;AAEA,MAAM,2BAA2B,MAAM;AAEtC,QAAM,UAAU,IAAI,wCAAwC;AAE5D,QAAM,cAAc,IAAI,gBAAgB;AACxC,QAAM,WAAW,IAAI,KAAK,EAAE,QAAQ,QAAQ,UAAU,MAAM,aAAa,CAAC;AAC1E,MAAI;AACJ,MAAI;AACJ,MAAI;AAEJ,WAAS,kBAAkB,MAAW,UAAU,wBAAwB,OAAO,eAAe,IAAI;AACjG,WAAO,YAAY,IAAI,IAAI;AAAA,MAC1B;AAAA,MACA;AAAA,MACA,SAAS,GAAG;AAAA,MACZ;AAAA,MACA;AAAA,MACA,aAAa,SAAS,IAAI,EAAE,OAAO,eAAe,SAAS,WAAW,YAAY,CAAC,EAAE,IAAI;AAAA,MACzF;AAAA,MACA,OAAMA,iBAAe;AAAE,cAAMA,aAAY,OAAO;AAAG,eAAO;AAAA,MAAM;AAAA,MAChE,SAAS;AAAA,MACT,SAAS;AAAA,MACT,SAAS;AAAA,IACV,CAAC;AAAA,EACF;AAdS;AAgBT,QAAM,MAAM;AACX,2BAAuB,8BAA8B,QAAW,WAAW;AAC3E,eAAW,qBAAqB,eAAe,mBAAmB;AAElE,kBAAc,YAAY,IAAI,kBAAkB,CAAC;AAAA,EAClD,CAAC;AAED,WAAS,MAAM;AACd,gBAAY,MAAM;AAAA,EACnB,CAAC;AAED,OAAK,uCAAuC,YAAY;AACvD,WAAO,YAAY,SAAS,mBAAmB,cAAc,QAAQ,CAAC;AAEtE,gBAAY,QAAQ;AAEpB,WAAO,YAAY,SAAS,mBAAmB,cAAc,QAAQ,CAAC;AAAA,EACvE,CAAC;AAED,OAAK,SAAS,YAAY;AACzB,WAAO,YAAY,YAAY,QAAQ,GAAG,KAAK;AAE/C,QAAI,qBAAqB;AACzB,gBAAY,IAAI,YAAY,iBAAiB,MAAM;AAClD;AAAA,IACD,CAAC,CAAC;AAEF,QAAI,uBAAuB;AAC3B,gBAAY,IAAI,YAAY,mBAAmB,MAAM;AACpD;AAAA,IACD,CAAC,CAAC;AAEF,UAAM,YAAY,QAAQ;AAC1B,WAAO,YAAY,YAAY,WAAW,GAAG,IAAI;AAGjD,gBAAY,OAAO,eAAe,aAAa;AAC/C,WAAO,YAAY,sBAAsB,CAAC;AAE1C,WAAO,YAAY,YAAY,QAAQ,GAAG,IAAI;AAC9C,WAAO,YAAY,oBAAoB,CAAC;AAExC,UAAM,YAAY,KAAK;AAEvB,WAAO,YAAY,YAAY,QAAQ,GAAG,KAAK;AAC/C,WAAO,YAAY,oBAAoB,CAAC;AAAA,EACzC,CAAC;AAED,OAAK,sDAAsD,YAAY;AACtE,WAAO,YAAY,YAAY,QAAQ,GAAG,KAAK;AAE/C,UAAM,YAAY,QAAQ;AAE1B,gBAAY,OAAO,eAAe,aAAa;AAC/C,WAAO,YAAY,YAAY,QAAQ,GAAG,IAAI;AAE9C,gBAAY,OAAO,uBAAuB,EAAE,WAAW,KAAK,CAAC;AAE7D,WAAO,YAAY,YAAY,QAAQ,GAAG,KAAK;AAAA,EAChD,CAAC;AAED,OAAK,mFAAmF,YAAY;AACnG,gBAAY,QAAQ;AACpB,kBAAc,kBAAkB,UAAU,IAAI;AAE9C,UAAM,YAAY,QAAQ;AAE1B,gBAAY,OAAO,eAAe,aAAa;AAC/C,WAAO,YAAY,YAAY,QAAQ,GAAG,IAAI;AAE9C,gBAAY,OAAO,uBAAuB,EAAE,WAAW,KAAK,CAAC;AAE7D,WAAO,YAAY,YAAY,QAAQ,GAAG,IAAI;AAAA,EAC/C,CAAC;AAED,OAAK,UAAU,YAAY;AAC1B,QAAI,gBAAgB;AACpB,gBAAY,IAAI,YAAY,YAAY,MAAM;AAC7C;AAAA,IACD,CAAC,CAAC;AAEF,QAAI,iBAAiB;AACrB,gBAAY,IAAI,YAAY,cAAc,MAAM;AAC/C;AAAA,IACD,CAAC,CAAC;AAEF,UAAM,YAAY,QAAQ;AAE1B,gBAAY,OAAO,eAAe,aAAa;AAC/C,WAAO,YAAY,YAAY,QAAQ,GAAG,IAAI;AAE9C,UAAM,YAAY,OAAO;AAEzB,WAAO,YAAY,eAAe,CAAC;AACnC,WAAO,YAAY,gBAAgB,CAAC;AACpC,WAAO,YAAY,YAAY,QAAQ,GAAG,KAAK;AAAA,EAChD,CAAC;AAED,OAAK,WAAW,YAAY;AAC3B,QAAI,iBAAiB;AACrB,gBAAY,IAAI,YAAY,cAAc,MAAM;AAC/C;AAAA,IACD,CAAC,CAAC;AAEF,UAAM,YAAY,QAAQ;AAC1B,gBAAY,QAAQ;AAEpB,WAAO,YAAY,gBAAgB,CAAC;AAAA,EACrC,CAAC;AAED,OAAK,UAAU,YAAY;AAC1B,WAAO,aAAa,MAAM,YAAY,OAAO,kBAAkB,IAAI,GAAG,SAAS,MAAS;AAExF,UAAM,YAAY,QAAQ;AAE1B,gBAAY,OAAO,eAAe,cAAc;AAChD,UAAM,SAAS,MAAM,YAAY,OAAO,kBAAkB,IAAI;AAE9D,QAAI,iBAAqC;AACzC,QAAI,iBAAiB,OAAO,OAAO,GAAG;AACrC,wBAAkB,MAAM,cAAc,OAAO,SAAS,YAAU,SAAS,OAAO,MAAM,CAAC,GAAG,SAAS;AAAA,IACpG,WAAW,OAAO,SAAS;AAC1B,uBAAiB,gBAAgB,OAAO,SAAS,YAAU,SAAS,OAAO,MAAM,CAAC,EAAE,SAAS;AAAA,IAC9F;AAEA,WAAO,YAAY,gBAAgB,cAAc;AAAA,EAClD,CAAC;AAED,OAAK,8BAA8B,YAAY;AAC9C,WAAO,YAAY,YAAY,WAAW,GAAG,KAAK;AAClD,WAAO,YAAY,YAAY,uBAAuB,KAAK;AAC3D,WAAO,YAAY,YAAY,OAAO,MAAS;AAE/C,UAAM,YAAY,QAAQ;AAE1B,WAAO,YAAY,YAAY,WAAW,GAAG,IAAI;AACjD,WAAO,GAAG,YAAY,KAAK;AAAA,EAC5B,CAAC;AAED,OAAK,mCAAmC,YAAY;AACnD,gBAAY,QAAQ;AAEpB,kBAAc,kBAAkB,UAAU,OAAO,eAAe;AAEhE,QAAI,uBAAuB;AAC3B,gBAAY,IAAI,YAAY,mBAAmB,MAAM;AACpD;AAAA,IACD,CAAC,CAAC;AAEF,WAAO,YAAY,YAAY,QAAQ,GAAG,IAAI;AAE9C,UAAM,YAAY,QAAQ;AAE1B,WAAO,YAAY,YAAY,QAAQ,GAAG,IAAI;AAC9C,WAAO,YAAY,YAAY,OAAO,UAAU,eAAe;AAC/D,WAAO,YAAY,sBAAsB,CAAC;AAE1C,gBAAY,MAAM,eAAe,kBAAkB;AAEnD,UAAM,YAAY,QAAQ;AAC1B,WAAO,YAAY,YAAY,OAAO,UAAU,kBAAkB;AAAA,EACnE,CAAC;AAED,OAAK,gEAAgE,YAAY;AAChF,gBAAY,QAAQ;AAEpB,kBAAc,kBAAkB,UAAU,OAAO,eAAe;AAEhE,WAAO,YAAY,YAAY,QAAQ,GAAG,IAAI;AAE9C,UAAM,UAAU,MAAM,YAAY,OAAO,kBAAkB,IAAI,GAAG;AAClE,QAAI,iBAAiB,MAAM,GAAG;AAC7B,YAAM,QAAQ,MAAM,eAAe,MAAgC;AACnE,aAAO,YAAY,MAAM,SAAS,GAAG,eAAe;AAAA,IACrD,WAAW,WAAW,MAAM,GAAG;AAC9B,YAAM,QAAQ,iBAAiB,MAA0B;AACzD,aAAO,YAAY,MAAM,SAAS,GAAG,eAAe;AAAA,IACrD,OAAO;AACN,aAAO,KAAK,yBAAyB;AAAA,IACtC;AAAA,EACD,CAAC;AAGD,OAAK,sCAAsC,YAAY;AACtD,gBAAY,QAAQ;AACpB,kBAAc,kBAAkB,UAAU,IAAI;AAE9C,UAAM,YAAY,QAAQ;AAE1B,WAAO,YAAY,YAAY,QAAQ,GAAG,IAAI;AAC9C,WAAO,YAAY,YAAY,uBAAuB,IAAI;AAAA,EAC3D,CAAC;AAED,OAAK,yBAAyB,YAAY;AACzC,UAAM,YAAY,QAAQ;AAC1B,gBAAY,OAAO,eAAe,cAAc;AAEhD,UAAM,SAAS,MAAM,YAAY,OAAO,kBAAkB,IAAI;AAC9D,UAAM,SAAS,yBAAyB,OAAO,aAAa,OAAO,SAAS,QAAW,OAAO,IAAI;AAElG,WAAO,YAAY,SAAS,yBAAyB,cAAc,WAAW,GAAG,IAAI;AAErF,gBAAY,QAAQ;AAEpB,kBAAc,kBAAkB;AAEhC,QAAI,uBAAuB;AAC3B,gBAAY,IAAI,YAAY,mBAAmB,MAAM;AACpD;AAAA,IACD,CAAC,CAAC;AAEF,UAAM,YAAY,QAAQ;AAE1B,WAAO,YAAY,YAAY,QAAQ,GAAG,IAAI;AAC9C,WAAO,YAAY,YAAY,OAAO,UAAU,cAAc;AAC9D,WAAO,YAAY,sBAAsB,CAAC;AAAA,EAC3C,CAAC;AAED,0CAAwC;AACzC,CAAC;",
  "names": ["workingCopy"]
}
