{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/workingCopy/test/electron-sandbox/workingCopyHistoryTracker.test.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport assert from 'assert';\nimport { Event } from '../../../../../base/common/event.js';\nimport { TestContextService, TestWorkingCopy } from '../../../../test/common/workbenchTestServices.js';\nimport { randomPath } from '../../../../../base/common/extpath.js';\nimport { join } from '../../../../../base/common/path.js';\nimport { URI } from '../../../../../base/common/uri.js';\nimport { WorkingCopyHistoryTracker } from '../../common/workingCopyHistoryTracker.js';\nimport { WorkingCopyService } from '../../common/workingCopyService.js';\nimport { UriIdentityService } from '../../../../../platform/uriIdentity/common/uriIdentityService.js';\nimport { TestFileService, TestPathService } from '../../../../test/browser/workbenchTestServices.js';\nimport { DeferredPromise } from '../../../../../base/common/async.js';\nimport { IFileService } from '../../../../../platform/files/common/files.js';\nimport { Schemas } from '../../../../../base/common/network.js';\nimport { basename, dirname, isEqual, joinPath } from '../../../../../base/common/resources.js';\nimport { TestConfigurationService } from '../../../../../platform/configuration/test/common/testConfigurationService.js';\nimport { UndoRedoService } from '../../../../../platform/undoRedo/common/undoRedoService.js';\nimport { TestDialogService } from '../../../../../platform/dialogs/test/common/testDialogService.js';\nimport { TestNotificationService } from '../../../../../platform/notification/test/common/testNotificationService.js';\nimport { CancellationToken } from '../../../../../base/common/cancellation.js';\nimport { IWorkingCopyHistoryEntry, IWorkingCopyHistoryEntryDescriptor } from '../../common/workingCopyHistory.js';\nimport { assertIsDefined } from '../../../../../base/common/types.js';\nimport { VSBuffer } from '../../../../../base/common/buffer.js';\nimport { DisposableStore } from '../../../../../base/common/lifecycle.js';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from '../../../../../base/test/common/utils.js';\nimport { TestWorkingCopyHistoryService } from './workingCopyHistoryService.test.js';\n\nsuite('WorkingCopyHistoryTracker', () => {\n\n\tlet testDir: URI;\n\tlet historyHome: URI;\n\tlet workHome: URI;\n\n\tlet workingCopyHistoryService: TestWorkingCopyHistoryService;\n\tlet workingCopyService: WorkingCopyService;\n\tlet fileService: IFileService;\n\tlet configurationService: TestConfigurationService;\n\n\tlet tracker: WorkingCopyHistoryTracker;\n\n\tlet testFile1Path: URI;\n\tlet testFile2Path: URI;\n\n\tconst disposables = new DisposableStore();\n\n\tconst testFile1PathContents = 'Hello Foo';\n\tconst testFile2PathContents = [\n\t\t'Lorem ipsum ',\n\t\t'dolor \u00F6\u00E4\u00FC sit amet ',\n\t\t'adipiscing \u00DF\u00DF elit',\n\t\t'consectetur '\n\t].join('').repeat(1000);\n\n\tlet increasingTimestampCounter = 1;\n\n\tasync function addEntry(descriptor: IWorkingCopyHistoryEntryDescriptor, token: CancellationToken): Promise<IWorkingCopyHistoryEntry> {\n\t\tconst entry = await workingCopyHistoryService.addEntry({\n\t\t\t...descriptor,\n\t\t\ttimestamp: increasingTimestampCounter++ // very important to get tests to not be flaky with stable sort order\n\t\t}, token);\n\n\t\treturn assertIsDefined(entry);\n\t}\n\n\tsetup(async () => {\n\t\ttestDir = URI.file(randomPath(join('vsctests', 'workingcopyhistorytracker'))).with({ scheme: Schemas.inMemory });\n\t\thistoryHome = joinPath(testDir, 'User', 'History');\n\t\tworkHome = joinPath(testDir, 'work');\n\n\t\tworkingCopyHistoryService = disposables.add(new TestWorkingCopyHistoryService(disposables));\n\t\tworkingCopyService = disposables.add(new WorkingCopyService());\n\t\tfileService = workingCopyHistoryService._fileService;\n\t\tconfigurationService = workingCopyHistoryService._configurationService;\n\n\t\ttracker = disposables.add(createTracker());\n\n\t\tawait fileService.createFolder(historyHome);\n\t\tawait fileService.createFolder(workHome);\n\n\t\ttestFile1Path = joinPath(workHome, 'foo.txt');\n\t\ttestFile2Path = joinPath(workHome, 'bar.txt');\n\n\t\tawait fileService.writeFile(testFile1Path, VSBuffer.fromString(testFile1PathContents));\n\t\tawait fileService.writeFile(testFile2Path, VSBuffer.fromString(testFile2PathContents));\n\t});\n\n\tfunction createTracker() {\n\t\treturn new WorkingCopyHistoryTracker(\n\t\t\tworkingCopyService,\n\t\t\tworkingCopyHistoryService,\n\t\t\tdisposables.add(new UriIdentityService(disposables.add(new TestFileService()))),\n\t\t\tnew TestPathService(undefined, Schemas.file),\n\t\t\tconfigurationService,\n\t\t\tnew UndoRedoService(new TestDialogService(), new TestNotificationService()),\n\t\t\tnew TestContextService(),\n\t\t\tworkingCopyHistoryService._fileService\n\t\t);\n\t}\n\n\tteardown(async () => {\n\t\tawait fileService.del(testDir, { recursive: true });\n\t\tdisposables.clear();\n\t});\n\n\ttest('history entry added on save', async () => {\n\t\tconst workingCopy1 = disposables.add(new TestWorkingCopy(testFile1Path));\n\t\tconst workingCopy2 = disposables.add(new TestWorkingCopy(testFile2Path));\n\n\t\tconst stat1 = await fileService.resolve(workingCopy1.resource, { resolveMetadata: true });\n\t\tconst stat2 = await fileService.resolve(workingCopy2.resource, { resolveMetadata: true });\n\n\t\tdisposables.add(workingCopyService.registerWorkingCopy(workingCopy1));\n\t\tdisposables.add(workingCopyService.registerWorkingCopy(workingCopy2));\n\n\t\tconst saveResult = new DeferredPromise<void>();\n\t\tlet addedCounter = 0;\n\t\tdisposables.add(workingCopyHistoryService.onDidAddEntry(e => {\n\t\t\tif (isEqual(e.entry.workingCopy.resource, workingCopy1.resource) || isEqual(e.entry.workingCopy.resource, workingCopy2.resource)) {\n\t\t\t\taddedCounter++;\n\n\t\t\t\tif (addedCounter === 2) {\n\t\t\t\t\tsaveResult.complete();\n\t\t\t\t}\n\t\t\t}\n\t\t}));\n\n\t\tawait workingCopy1.save(undefined, stat1);\n\t\tawait workingCopy2.save(undefined, stat2);\n\n\t\tawait saveResult.p;\n\t});\n\n\ttest('history entry skipped when setting disabled (globally)', async () => {\n\t\tconfigurationService.setUserConfiguration('workbench.localHistory.enabled', false, testFile1Path);\n\n\t\treturn assertNoLocalHistoryEntryAddedWithSettingsConfigured();\n\t});\n\n\ttest('history entry skipped when setting disabled (exclude)', () => {\n\t\tconfigurationService.setUserConfiguration('workbench.localHistory.exclude', { '**/foo.txt': true });\n\n\t\t// Recreate to apply settings\n\t\ttracker.dispose();\n\t\ttracker = disposables.add(createTracker());\n\n\t\treturn assertNoLocalHistoryEntryAddedWithSettingsConfigured();\n\t});\n\n\ttest('history entry skipped when too large', async () => {\n\t\tconfigurationService.setUserConfiguration('workbench.localHistory.maxFileSize', 0, testFile1Path);\n\n\t\treturn assertNoLocalHistoryEntryAddedWithSettingsConfigured();\n\t});\n\n\tasync function assertNoLocalHistoryEntryAddedWithSettingsConfigured(): Promise<void> {\n\t\tconst workingCopy1 = disposables.add(new TestWorkingCopy(testFile1Path));\n\t\tconst workingCopy2 = disposables.add(new TestWorkingCopy(testFile2Path));\n\n\t\tconst stat1 = await fileService.resolve(workingCopy1.resource, { resolveMetadata: true });\n\t\tconst stat2 = await fileService.resolve(workingCopy2.resource, { resolveMetadata: true });\n\n\t\tdisposables.add(workingCopyService.registerWorkingCopy(workingCopy1));\n\t\tdisposables.add(workingCopyService.registerWorkingCopy(workingCopy2));\n\n\t\tconst saveResult = new DeferredPromise<void>();\n\t\tdisposables.add(workingCopyHistoryService.onDidAddEntry(e => {\n\t\t\tif (isEqual(e.entry.workingCopy.resource, workingCopy1.resource)) {\n\t\t\t\tassert.fail('Unexpected working copy history entry: ' + e.entry.workingCopy.resource.toString());\n\t\t\t}\n\n\t\t\tif (isEqual(e.entry.workingCopy.resource, workingCopy2.resource)) {\n\t\t\t\tsaveResult.complete();\n\t\t\t}\n\t\t}));\n\n\t\tawait workingCopy1.save(undefined, stat1);\n\t\tawait workingCopy2.save(undefined, stat2);\n\n\t\tawait saveResult.p;\n\t}\n\n\ttest('entries moved (file rename)', async () => {\n\t\tconst entriesMoved = Event.toPromise(workingCopyHistoryService.onDidMoveEntries);\n\n\t\tconst workingCopy = disposables.add(new TestWorkingCopy(testFile1Path));\n\n\t\tconst entry1 = await addEntry({ resource: workingCopy.resource, source: 'test-source' }, CancellationToken.None);\n\t\tconst entry2 = await addEntry({ resource: workingCopy.resource, source: 'test-source' }, CancellationToken.None);\n\t\tconst entry3 = await addEntry({ resource: workingCopy.resource, source: 'test-source' }, CancellationToken.None);\n\n\t\tlet entries = await workingCopyHistoryService.getEntries(workingCopy.resource, CancellationToken.None);\n\t\tassert.strictEqual(entries.length, 3);\n\n\t\tconst renamedWorkingCopyResource = joinPath(dirname(workingCopy.resource), 'renamed.txt');\n\t\tawait workingCopyHistoryService._fileService.move(workingCopy.resource, renamedWorkingCopyResource);\n\n\t\tawait entriesMoved;\n\n\t\tentries = await workingCopyHistoryService.getEntries(workingCopy.resource, CancellationToken.None);\n\t\tassert.strictEqual(entries.length, 0);\n\n\t\tentries = await workingCopyHistoryService.getEntries(renamedWorkingCopyResource, CancellationToken.None);\n\t\tassert.strictEqual(entries.length, 4);\n\n\t\tassert.strictEqual(entries[0].id, entry1.id);\n\t\tassert.strictEqual(entries[0].timestamp, entry1.timestamp);\n\t\tassert.strictEqual(entries[0].source, entry1.source);\n\t\tassert.notStrictEqual(entries[0].location, entry1.location);\n\t\tassert.strictEqual(entries[0].workingCopy.resource.toString(), renamedWorkingCopyResource.toString());\n\n\t\tassert.strictEqual(entries[1].id, entry2.id);\n\t\tassert.strictEqual(entries[1].timestamp, entry2.timestamp);\n\t\tassert.strictEqual(entries[1].source, entry2.source);\n\t\tassert.notStrictEqual(entries[1].location, entry2.location);\n\t\tassert.strictEqual(entries[1].workingCopy.resource.toString(), renamedWorkingCopyResource.toString());\n\n\t\tassert.strictEqual(entries[2].id, entry3.id);\n\t\tassert.strictEqual(entries[2].timestamp, entry3.timestamp);\n\t\tassert.strictEqual(entries[2].source, entry3.source);\n\t\tassert.notStrictEqual(entries[2].location, entry3.location);\n\t\tassert.strictEqual(entries[2].workingCopy.resource.toString(), renamedWorkingCopyResource.toString());\n\n\t\tconst all = await workingCopyHistoryService.getAll(CancellationToken.None);\n\t\tassert.strictEqual(all.length, 1);\n\t\tassert.strictEqual(all[0].toString(), renamedWorkingCopyResource.toString());\n\t});\n\n\ttest('entries moved (folder rename)', async () => {\n\t\tconst entriesMoved = Event.toPromise(workingCopyHistoryService.onDidMoveEntries);\n\n\t\tconst workingCopy1 = disposables.add(new TestWorkingCopy(testFile1Path));\n\t\tconst workingCopy2 = disposables.add(new TestWorkingCopy(testFile2Path));\n\n\t\tconst entry1A = await addEntry({ resource: workingCopy1.resource, source: 'test-source' }, CancellationToken.None);\n\t\tconst entry2A = await addEntry({ resource: workingCopy1.resource, source: 'test-source' }, CancellationToken.None);\n\t\tconst entry3A = await addEntry({ resource: workingCopy1.resource, source: 'test-source' }, CancellationToken.None);\n\n\t\tconst entry1B = await addEntry({ resource: workingCopy2.resource, source: 'test-source' }, CancellationToken.None);\n\t\tconst entry2B = await addEntry({ resource: workingCopy2.resource, source: 'test-source' }, CancellationToken.None);\n\t\tconst entry3B = await addEntry({ resource: workingCopy2.resource, source: 'test-source' }, CancellationToken.None);\n\n\t\tlet entries = await workingCopyHistoryService.getEntries(workingCopy1.resource, CancellationToken.None);\n\t\tassert.strictEqual(entries.length, 3);\n\n\t\tentries = await workingCopyHistoryService.getEntries(workingCopy2.resource, CancellationToken.None);\n\t\tassert.strictEqual(entries.length, 3);\n\n\t\tconst renamedWorkHome = joinPath(dirname(testDir), 'renamed');\n\t\tawait workingCopyHistoryService._fileService.move(workHome, renamedWorkHome);\n\n\t\tconst renamedWorkingCopy1Resource = joinPath(renamedWorkHome, basename(workingCopy1.resource));\n\t\tconst renamedWorkingCopy2Resource = joinPath(renamedWorkHome, basename(workingCopy2.resource));\n\n\t\tawait entriesMoved;\n\n\t\tentries = await workingCopyHistoryService.getEntries(workingCopy1.resource, CancellationToken.None);\n\t\tassert.strictEqual(entries.length, 0);\n\t\tentries = await workingCopyHistoryService.getEntries(workingCopy2.resource, CancellationToken.None);\n\t\tassert.strictEqual(entries.length, 0);\n\n\t\tentries = await workingCopyHistoryService.getEntries(renamedWorkingCopy1Resource, CancellationToken.None);\n\t\tassert.strictEqual(entries.length, 4);\n\n\t\tassert.strictEqual(entries[0].id, entry1A.id);\n\t\tassert.strictEqual(entries[0].timestamp, entry1A.timestamp);\n\t\tassert.strictEqual(entries[0].source, entry1A.source);\n\t\tassert.notStrictEqual(entries[0].location, entry1A.location);\n\t\tassert.strictEqual(entries[0].workingCopy.resource.toString(), renamedWorkingCopy1Resource.toString());\n\n\t\tassert.strictEqual(entries[1].id, entry2A.id);\n\t\tassert.strictEqual(entries[1].timestamp, entry2A.timestamp);\n\t\tassert.strictEqual(entries[1].source, entry2A.source);\n\t\tassert.notStrictEqual(entries[1].location, entry2A.location);\n\t\tassert.strictEqual(entries[1].workingCopy.resource.toString(), renamedWorkingCopy1Resource.toString());\n\n\t\tassert.strictEqual(entries[2].id, entry3A.id);\n\t\tassert.strictEqual(entries[2].timestamp, entry3A.timestamp);\n\t\tassert.strictEqual(entries[2].source, entry3A.source);\n\t\tassert.notStrictEqual(entries[2].location, entry3A.location);\n\t\tassert.strictEqual(entries[2].workingCopy.resource.toString(), renamedWorkingCopy1Resource.toString());\n\n\t\tentries = await workingCopyHistoryService.getEntries(renamedWorkingCopy2Resource, CancellationToken.None);\n\t\tassert.strictEqual(entries.length, 4);\n\n\t\tassert.strictEqual(entries[0].id, entry1B.id);\n\t\tassert.strictEqual(entries[0].timestamp, entry1B.timestamp);\n\t\tassert.strictEqual(entries[0].source, entry1B.source);\n\t\tassert.notStrictEqual(entries[0].location, entry1B.location);\n\t\tassert.strictEqual(entries[0].workingCopy.resource.toString(), renamedWorkingCopy2Resource.toString());\n\n\t\tassert.strictEqual(entries[1].id, entry2B.id);\n\t\tassert.strictEqual(entries[1].timestamp, entry2B.timestamp);\n\t\tassert.strictEqual(entries[1].source, entry2B.source);\n\t\tassert.notStrictEqual(entries[1].location, entry2B.location);\n\t\tassert.strictEqual(entries[1].workingCopy.resource.toString(), renamedWorkingCopy2Resource.toString());\n\n\t\tassert.strictEqual(entries[2].id, entry3B.id);\n\t\tassert.strictEqual(entries[2].timestamp, entry3B.timestamp);\n\t\tassert.strictEqual(entries[2].source, entry3B.source);\n\t\tassert.notStrictEqual(entries[2].location, entry3B.location);\n\t\tassert.strictEqual(entries[2].workingCopy.resource.toString(), renamedWorkingCopy2Resource.toString());\n\n\t\tconst all = await workingCopyHistoryService.getAll(CancellationToken.None);\n\t\tassert.strictEqual(all.length, 2);\n\t\tfor (const resource of all) {\n\t\t\tif (resource.toString() !== renamedWorkingCopy1Resource.toString() && resource.toString() !== renamedWorkingCopy2Resource.toString()) {\n\t\t\t\tassert.fail(`Unexpected history resource: ${resource.toString()}`);\n\t\t\t}\n\t\t}\n\t});\n\n\tensureNoDisposablesAreLeakedInTestSuite();\n});\n"],
  "mappings": "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",
  "names": []
}
