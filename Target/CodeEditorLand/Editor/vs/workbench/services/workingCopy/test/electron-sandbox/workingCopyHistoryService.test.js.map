{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/workingCopy/test/electron-sandbox/workingCopyHistoryService.test.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport assert from 'assert';\nimport { TestContextService, TestStorageService, TestWorkingCopy } from '../../../../test/common/workbenchTestServices.js';\nimport { NullLogService } from '../../../../../platform/log/common/log.js';\nimport { FileService } from '../../../../../platform/files/common/fileService.js';\nimport { Schemas } from '../../../../../base/common/network.js';\nimport { URI } from '../../../../../base/common/uri.js';\nimport { CancellationToken, CancellationTokenSource } from '../../../../../base/common/cancellation.js';\nimport { IWorkingCopyHistoryEntry, IWorkingCopyHistoryEntryDescriptor, IWorkingCopyHistoryEvent } from '../../common/workingCopyHistory.js';\nimport { IFileService } from '../../../../../platform/files/common/files.js';\nimport { UriIdentityService } from '../../../../../platform/uriIdentity/common/uriIdentityService.js';\nimport { LabelService } from '../../../label/common/labelService.js';\nimport { TestEnvironmentService, TestLifecycleService, TestPathService, TestRemoteAgentService, TestWillShutdownEvent } from '../../../../test/browser/workbenchTestServices.js';\nimport { TestConfigurationService } from '../../../../../platform/configuration/test/common/testConfigurationService.js';\nimport { NativeWorkingCopyHistoryService } from '../../common/workingCopyHistoryService.js';\nimport { joinPath, dirname, basename } from '../../../../../base/common/resources.js';\nimport { InMemoryFileSystemProvider } from '../../../../../platform/files/common/inMemoryFilesystemProvider.js';\nimport { generateUuid } from '../../../../../base/common/uuid.js';\nimport { join } from '../../../../../base/common/path.js';\nimport { VSBuffer } from '../../../../../base/common/buffer.js';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from '../../../../../base/test/common/utils.js';\nimport { DisposableStore } from '../../../../../base/common/lifecycle.js';\n\nexport class TestWorkingCopyHistoryService extends NativeWorkingCopyHistoryService {\n\n\treadonly _fileService: IFileService;\n\treadonly _configurationService: TestConfigurationService;\n\treadonly _lifecycleService: TestLifecycleService;\n\n\tconstructor(disposables: DisposableStore, fileService?: IFileService) {\n\t\tconst environmentService = TestEnvironmentService;\n\t\tconst logService = new NullLogService();\n\n\t\tif (!fileService) {\n\t\t\tfileService = disposables.add(new FileService(logService));\n\t\t\tdisposables.add(fileService.registerProvider(Schemas.inMemory, disposables.add(new InMemoryFileSystemProvider())));\n\t\t\tdisposables.add(fileService.registerProvider(Schemas.vscodeUserData, disposables.add(new InMemoryFileSystemProvider())));\n\t\t}\n\n\t\tconst remoteAgentService = new TestRemoteAgentService();\n\t\tconst uriIdentityService = disposables.add(new UriIdentityService(fileService));\n\t\tconst lifecycleService = disposables.add(new TestLifecycleService());\n\t\tconst labelService = disposables.add(new LabelService(environmentService, new TestContextService(), new TestPathService(), new TestRemoteAgentService(), disposables.add(new TestStorageService()), lifecycleService));\n\t\tconst configurationService = new TestConfigurationService();\n\n\t\tsuper(fileService, remoteAgentService, environmentService, uriIdentityService, labelService, lifecycleService, logService, configurationService);\n\n\t\tthis._fileService = fileService;\n\t\tthis._configurationService = configurationService;\n\t\tthis._lifecycleService = lifecycleService;\n\t}\n}\n\nsuite('WorkingCopyHistoryService', () => {\n\n\tconst disposables = new DisposableStore();\n\n\tlet testDir: URI;\n\tlet historyHome: URI;\n\tlet workHome: URI;\n\tlet service: TestWorkingCopyHistoryService;\n\tlet fileService: IFileService;\n\n\tlet testFile1Path: URI;\n\tlet testFile2Path: URI;\n\tlet testFile3Path: URI;\n\n\tconst testFile1PathContents = 'Hello Foo';\n\tconst testFile2PathContents = [\n\t\t'Lorem ipsum ',\n\t\t'dolor \u00F6\u00E4\u00FC sit amet ',\n\t\t'adipiscing \u00DF\u00DF elit',\n\t\t'consectetur '\n\t].join('');\n\tconst testFile3PathContents = 'Hello Bar';\n\n\tsetup(async () => {\n\t\ttestDir = URI.file(join(generateUuid(), 'vsctests', 'workingcopyhistoryservice')).with({ scheme: Schemas.inMemory });\n\t\thistoryHome = joinPath(testDir, 'User', 'History');\n\t\tworkHome = joinPath(testDir, 'work');\n\n\t\tservice = disposables.add(new TestWorkingCopyHistoryService(disposables));\n\t\tfileService = service._fileService;\n\n\t\tawait fileService.createFolder(historyHome);\n\t\tawait fileService.createFolder(workHome);\n\n\t\ttestFile1Path = joinPath(workHome, 'foo.txt');\n\t\ttestFile2Path = joinPath(workHome, 'bar.txt');\n\t\ttestFile3Path = joinPath(workHome, 'foo-bar.txt');\n\n\t\tawait fileService.writeFile(testFile1Path, VSBuffer.fromString(testFile1PathContents));\n\t\tawait fileService.writeFile(testFile2Path, VSBuffer.fromString(testFile2PathContents));\n\t\tawait fileService.writeFile(testFile3Path, VSBuffer.fromString(testFile3PathContents));\n\t});\n\n\tlet increasingTimestampCounter = 1;\n\n\tasync function addEntry(descriptor: IWorkingCopyHistoryEntryDescriptor, token: CancellationToken, expectEntryAdded?: boolean): Promise<IWorkingCopyHistoryEntry>;\n\tasync function addEntry(descriptor: IWorkingCopyHistoryEntryDescriptor, token: CancellationToken, expectEntryAdded: false): Promise<IWorkingCopyHistoryEntry | undefined>;\n\tasync function addEntry(descriptor: IWorkingCopyHistoryEntryDescriptor, token: CancellationToken, expectEntryAdded = true): Promise<IWorkingCopyHistoryEntry | undefined> {\n\t\tconst entry = await service.addEntry({\n\t\t\t...descriptor,\n\t\t\ttimestamp: increasingTimestampCounter++ // very important to get tests to not be flaky with stable sort order\n\t\t}, token);\n\n\t\tif (expectEntryAdded) {\n\t\t\tassert.ok(entry, 'Unexpected undefined local history entry');\n\t\t\tassert.strictEqual((await fileService.exists(entry.location)), true, 'Unexpected local history not stored');\n\t\t}\n\n\t\treturn entry;\n\t}\n\n\tteardown(() => {\n\t\tdisposables.clear();\n\t});\n\n\ttest('addEntry', async () => {\n\t\tconst addEvents: IWorkingCopyHistoryEvent[] = [];\n\t\tdisposables.add(service.onDidAddEntry(e => addEvents.push(e)));\n\n\t\tconst workingCopy1 = disposables.add(new TestWorkingCopy(testFile1Path));\n\t\tconst workingCopy2 = disposables.add(new TestWorkingCopy(testFile2Path));\n\n\t\t// Add Entry works\n\n\t\tconst entry1A = await addEntry({ resource: workingCopy1.resource }, CancellationToken.None);\n\t\tconst entry2A = await addEntry({ resource: workingCopy2.resource, source: 'My Source' }, CancellationToken.None);\n\n\t\tassert.strictEqual((await fileService.readFile(entry1A.location)).value.toString(), testFile1PathContents);\n\t\tassert.strictEqual((await fileService.readFile(entry2A.location)).value.toString(), testFile2PathContents);\n\n\t\tassert.strictEqual(addEvents.length, 2);\n\t\tassert.strictEqual(addEvents[0].entry.workingCopy.resource.toString(), workingCopy1.resource.toString());\n\t\tassert.strictEqual(addEvents[1].entry.workingCopy.resource.toString(), workingCopy2.resource.toString());\n\t\tassert.strictEqual(addEvents[1].entry.source, 'My Source');\n\n\t\tconst entry1B = await addEntry({ resource: workingCopy1.resource }, CancellationToken.None);\n\t\tconst entry2B = await addEntry({ resource: workingCopy2.resource }, CancellationToken.None);\n\n\t\tassert.strictEqual((await fileService.readFile(entry1B.location)).value.toString(), testFile1PathContents);\n\t\tassert.strictEqual((await fileService.readFile(entry2B.location)).value.toString(), testFile2PathContents);\n\n\t\tassert.strictEqual(addEvents.length, 4);\n\t\tassert.strictEqual(addEvents[2].entry.workingCopy.resource.toString(), workingCopy1.resource.toString());\n\t\tassert.strictEqual(addEvents[3].entry.workingCopy.resource.toString(), workingCopy2.resource.toString());\n\n\t\t// Cancellation works\n\n\t\tconst cts = new CancellationTokenSource();\n\t\tconst entry1CPromise = addEntry({ resource: workingCopy1.resource }, cts.token, false);\n\t\tcts.dispose(true);\n\n\t\tconst entry1C = await entry1CPromise;\n\t\tassert.ok(!entry1C);\n\n\t\tassert.strictEqual(addEvents.length, 4);\n\n\t\t// Invalid working copies are ignored\n\n\t\tconst workingCopy3 = disposables.add(new TestWorkingCopy(testFile2Path.with({ scheme: 'unsupported' })));\n\t\tconst entry3A = await addEntry({ resource: workingCopy3.resource }, CancellationToken.None, false);\n\t\tassert.ok(!entry3A);\n\n\t\tassert.strictEqual(addEvents.length, 4);\n\t});\n\n\ttest('renameEntry', async () => {\n\t\tconst changeEvents: IWorkingCopyHistoryEvent[] = [];\n\t\tdisposables.add(service.onDidChangeEntry(e => changeEvents.push(e)));\n\n\t\tconst workingCopy1 = disposables.add(new TestWorkingCopy(testFile1Path));\n\n\t\tconst entry = await addEntry({ resource: workingCopy1.resource }, CancellationToken.None);\n\t\tawait addEntry({ resource: workingCopy1.resource }, CancellationToken.None);\n\t\tawait addEntry({ resource: workingCopy1.resource, source: 'My Source' }, CancellationToken.None);\n\n\t\tlet entries = await service.getEntries(workingCopy1.resource, CancellationToken.None);\n\t\tassert.strictEqual(entries.length, 3);\n\n\t\tawait service.updateEntry(entry, { source: 'Hello Rename' }, CancellationToken.None);\n\n\t\tassert.strictEqual(changeEvents.length, 1);\n\t\tassert.strictEqual(changeEvents[0].entry, entry);\n\n\t\tentries = await service.getEntries(workingCopy1.resource, CancellationToken.None);\n\t\tassert.strictEqual(entries[0].source, 'Hello Rename');\n\n\t\t// Simulate shutdown\n\t\tconst event = new TestWillShutdownEvent();\n\t\tservice._lifecycleService.fireWillShutdown(event);\n\t\tawait Promise.allSettled(event.value);\n\n\t\t// Resolve from file service fresh and verify again\n\n\t\tservice.dispose();\n\t\tservice = disposables.add(new TestWorkingCopyHistoryService(disposables, fileService));\n\n\t\tentries = await service.getEntries(workingCopy1.resource, CancellationToken.None);\n\t\tassert.strictEqual(entries.length, 3);\n\t\tassert.strictEqual(entries[0].source, 'Hello Rename');\n\t});\n\n\ttest('removeEntry', async () => {\n\t\tconst removeEvents: IWorkingCopyHistoryEvent[] = [];\n\t\tdisposables.add(service.onDidRemoveEntry(e => removeEvents.push(e)));\n\n\t\tconst workingCopy1 = disposables.add(new TestWorkingCopy(testFile1Path));\n\n\t\tawait addEntry({ resource: workingCopy1.resource }, CancellationToken.None);\n\t\tconst entry2 = await addEntry({ resource: workingCopy1.resource }, CancellationToken.None);\n\t\tawait addEntry({ resource: workingCopy1.resource }, CancellationToken.None);\n\t\tawait addEntry({ resource: workingCopy1.resource, source: 'My Source' }, CancellationToken.None);\n\n\t\tlet entries = await service.getEntries(workingCopy1.resource, CancellationToken.None);\n\t\tassert.strictEqual(entries.length, 4);\n\n\t\tlet removed = await service.removeEntry(entry2, CancellationToken.None);\n\t\tassert.strictEqual(removed, true);\n\n\t\tassert.strictEqual(removeEvents.length, 1);\n\t\tassert.strictEqual(removeEvents[0].entry, entry2);\n\n\t\t// Cannot remove same entry again\n\t\tremoved = await service.removeEntry(entry2, CancellationToken.None);\n\t\tassert.strictEqual(removed, false);\n\n\t\tentries = await service.getEntries(workingCopy1.resource, CancellationToken.None);\n\t\tassert.strictEqual(entries.length, 3);\n\n\t\t// Simulate shutdown\n\t\tconst event = new TestWillShutdownEvent();\n\t\tservice._lifecycleService.fireWillShutdown(event);\n\t\tawait Promise.allSettled(event.value);\n\n\t\t// Resolve from file service fresh and verify again\n\n\t\tservice.dispose();\n\t\tservice = disposables.add(new TestWorkingCopyHistoryService(disposables, fileService));\n\n\t\tentries = await service.getEntries(workingCopy1.resource, CancellationToken.None);\n\t\tassert.strictEqual(entries.length, 3);\n\t});\n\n\ttest('removeEntry - deletes history entries folder when last entry removed', async () => {\n\t\tconst workingCopy1 = disposables.add(new TestWorkingCopy(testFile1Path));\n\n\t\tlet entry: IWorkingCopyHistoryEntry | undefined = await addEntry({ resource: workingCopy1.resource }, CancellationToken.None);\n\n\t\t// Simulate shutdown\n\t\tlet event = new TestWillShutdownEvent();\n\t\tservice._lifecycleService.fireWillShutdown(event);\n\t\tawait Promise.allSettled(event.value);\n\n\t\t// Resolve from file service fresh and verify again\n\n\t\tservice.dispose();\n\t\tservice = disposables.add(new TestWorkingCopyHistoryService(disposables, fileService));\n\n\t\tassert.strictEqual((await fileService.exists(dirname(entry.location))), true);\n\n\t\tentry = (await service.getEntries(workingCopy1.resource, CancellationToken.None)).at(0);\n\t\tassert.ok(entry);\n\n\t\tawait service.removeEntry(entry, CancellationToken.None);\n\n\t\t// Simulate shutdown\n\t\tevent = new TestWillShutdownEvent();\n\t\tservice._lifecycleService.fireWillShutdown(event);\n\t\tawait Promise.allSettled(event.value);\n\n\t\t// Resolve from file service fresh and verify again\n\n\t\tservice.dispose();\n\t\tservice = disposables.add(new TestWorkingCopyHistoryService(disposables, fileService));\n\n\t\tassert.strictEqual((await fileService.exists(dirname(entry.location))), false);\n\t});\n\n\ttest('removeAll', async () => {\n\t\tlet removed = false;\n\t\tdisposables.add(service.onDidRemoveEntries(() => removed = true));\n\n\t\tconst workingCopy1 = disposables.add(new TestWorkingCopy(testFile1Path));\n\t\tconst workingCopy2 = disposables.add(new TestWorkingCopy(testFile2Path));\n\n\t\tawait addEntry({ resource: workingCopy1.resource }, CancellationToken.None);\n\t\tawait addEntry({ resource: workingCopy1.resource }, CancellationToken.None);\n\t\tawait addEntry({ resource: workingCopy2.resource }, CancellationToken.None);\n\t\tawait addEntry({ resource: workingCopy2.resource, source: 'My Source' }, CancellationToken.None);\n\n\t\tlet entries = await service.getEntries(workingCopy1.resource, CancellationToken.None);\n\t\tassert.strictEqual(entries.length, 2);\n\t\tentries = await service.getEntries(workingCopy2.resource, CancellationToken.None);\n\t\tassert.strictEqual(entries.length, 2);\n\n\t\tawait service.removeAll(CancellationToken.None);\n\n\t\tassert.strictEqual(removed, true);\n\n\t\tentries = await service.getEntries(workingCopy1.resource, CancellationToken.None);\n\t\tassert.strictEqual(entries.length, 0);\n\t\tentries = await service.getEntries(workingCopy2.resource, CancellationToken.None);\n\t\tassert.strictEqual(entries.length, 0);\n\n\t\t// Simulate shutdown\n\t\tconst event = new TestWillShutdownEvent();\n\t\tservice._lifecycleService.fireWillShutdown(event);\n\t\tawait Promise.allSettled(event.value);\n\n\t\t// Resolve from file service fresh and verify again\n\n\t\tservice.dispose();\n\t\tservice = disposables.add(new TestWorkingCopyHistoryService(disposables, fileService));\n\n\t\tentries = await service.getEntries(workingCopy1.resource, CancellationToken.None);\n\t\tassert.strictEqual(entries.length, 0);\n\t\tentries = await service.getEntries(workingCopy2.resource, CancellationToken.None);\n\t\tassert.strictEqual(entries.length, 0);\n\t});\n\n\ttest('getEntries - simple', async () => {\n\t\tconst workingCopy1 = disposables.add(new TestWorkingCopy(testFile1Path));\n\t\tconst workingCopy2 = disposables.add(new TestWorkingCopy(testFile2Path));\n\n\t\tlet entries = await service.getEntries(workingCopy1.resource, CancellationToken.None);\n\t\tassert.strictEqual(entries.length, 0);\n\n\t\tconst entry1 = await addEntry({ resource: workingCopy1.resource, source: 'test-source' }, CancellationToken.None);\n\n\t\tentries = await service.getEntries(workingCopy1.resource, CancellationToken.None);\n\t\tassert.strictEqual(entries.length, 1);\n\t\tassertEntryEqual(entries[0], entry1);\n\n\t\tconst entry2 = await addEntry({ resource: workingCopy1.resource, source: 'test-source' }, CancellationToken.None);\n\n\t\tentries = await service.getEntries(workingCopy1.resource, CancellationToken.None);\n\t\tassert.strictEqual(entries.length, 2);\n\t\tassertEntryEqual(entries[1], entry2);\n\n\t\tentries = await service.getEntries(workingCopy2.resource, CancellationToken.None);\n\t\tassert.strictEqual(entries.length, 0);\n\n\t\tconst entry3 = await addEntry({ resource: workingCopy2.resource, source: 'other-test-source' }, CancellationToken.None);\n\n\t\tentries = await service.getEntries(workingCopy2.resource, CancellationToken.None);\n\t\tassert.strictEqual(entries.length, 1);\n\t\tassertEntryEqual(entries[0], entry3);\n\t});\n\n\ttest('getEntries - metadata preserved when stored', async () => {\n\t\tconst workingCopy1 = disposables.add(new TestWorkingCopy(testFile1Path));\n\t\tconst workingCopy2 = disposables.add(new TestWorkingCopy(testFile2Path));\n\n\t\tconst entry1 = await addEntry({ resource: workingCopy1.resource, source: 'test-source' }, CancellationToken.None);\n\t\tconst entry2 = await addEntry({ resource: workingCopy2.resource }, CancellationToken.None);\n\t\tconst entry3 = await addEntry({ resource: workingCopy2.resource, source: 'other-source' }, CancellationToken.None);\n\n\t\t// Simulate shutdown\n\t\tconst event = new TestWillShutdownEvent();\n\t\tservice._lifecycleService.fireWillShutdown(event);\n\t\tawait Promise.allSettled(event.value);\n\n\t\t// Resolve from file service fresh and verify again\n\n\t\tservice.dispose();\n\t\tservice = disposables.add(new TestWorkingCopyHistoryService(disposables, fileService));\n\n\t\tlet entries = await service.getEntries(workingCopy1.resource, CancellationToken.None);\n\t\tassert.strictEqual(entries.length, 1);\n\t\tassertEntryEqual(entries[0], entry1);\n\n\t\tentries = await service.getEntries(workingCopy2.resource, CancellationToken.None);\n\t\tassert.strictEqual(entries.length, 2);\n\t\tassertEntryEqual(entries[0], entry2);\n\t\tassertEntryEqual(entries[1], entry3);\n\t});\n\n\ttest('getEntries - corrupt meta.json is no problem', async () => {\n\t\tconst workingCopy1 = disposables.add(new TestWorkingCopy(testFile1Path));\n\n\t\tconst entry1 = await addEntry({ resource: workingCopy1.resource }, CancellationToken.None);\n\n\t\t// Simulate shutdown\n\t\tconst event = new TestWillShutdownEvent();\n\t\tservice._lifecycleService.fireWillShutdown(event);\n\t\tawait Promise.allSettled(event.value);\n\n\t\t// Resolve from file service fresh and verify again\n\n\t\tservice.dispose();\n\t\tservice = disposables.add(new TestWorkingCopyHistoryService(disposables, fileService));\n\n\t\tconst metaFile = joinPath(dirname(entry1.location), 'entries.json');\n\t\tassert.ok((await fileService.exists(metaFile)));\n\t\tawait fileService.del(metaFile);\n\n\t\tconst entries = await service.getEntries(workingCopy1.resource, CancellationToken.None);\n\t\tassert.strictEqual(entries.length, 1);\n\t\tassertEntryEqual(entries[0], entry1, false /* skip timestamp that is unreliable when entries.json is gone */);\n\t});\n\n\ttest('getEntries - missing entries from meta.json is no problem', async () => {\n\t\tconst workingCopy1 = disposables.add(new TestWorkingCopy(testFile1Path));\n\n\t\tconst entry1 = await addEntry({ resource: workingCopy1.resource }, CancellationToken.None);\n\t\tconst entry2 = await addEntry({ resource: workingCopy1.resource }, CancellationToken.None);\n\n\t\t// Simulate shutdown\n\t\tconst event = new TestWillShutdownEvent();\n\t\tservice._lifecycleService.fireWillShutdown(event);\n\t\tawait Promise.allSettled(event.value);\n\n\t\t// Resolve from file service fresh and verify again\n\n\t\tservice.dispose();\n\t\tservice = disposables.add(new TestWorkingCopyHistoryService(disposables, fileService));\n\n\t\tawait fileService.del(entry1.location);\n\n\t\tconst entries = await service.getEntries(workingCopy1.resource, CancellationToken.None);\n\t\tassert.strictEqual(entries.length, 1);\n\t\tassertEntryEqual(entries[0], entry2);\n\t});\n\n\ttest('getEntries - in-memory and on-disk entries are merged', async () => {\n\t\tconst workingCopy1 = disposables.add(new TestWorkingCopy(testFile1Path));\n\n\t\tconst entry1 = await addEntry({ resource: workingCopy1.resource, source: 'test-source' }, CancellationToken.None);\n\t\tconst entry2 = await addEntry({ resource: workingCopy1.resource, source: 'other-source' }, CancellationToken.None);\n\n\t\t// Simulate shutdown\n\t\tconst event = new TestWillShutdownEvent();\n\t\tservice._lifecycleService.fireWillShutdown(event);\n\t\tawait Promise.allSettled(event.value);\n\n\t\t// Resolve from file service fresh and verify again\n\n\t\tservice.dispose();\n\t\tservice = disposables.add(new TestWorkingCopyHistoryService(disposables, fileService));\n\n\t\tconst entry3 = await addEntry({ resource: workingCopy1.resource, source: 'test-source' }, CancellationToken.None);\n\t\tconst entry4 = await addEntry({ resource: workingCopy1.resource, source: 'other-source' }, CancellationToken.None);\n\n\t\tconst entries = await service.getEntries(workingCopy1.resource, CancellationToken.None);\n\t\tassert.strictEqual(entries.length, 4);\n\t\tassertEntryEqual(entries[0], entry1);\n\t\tassertEntryEqual(entries[1], entry2);\n\t\tassertEntryEqual(entries[2], entry3);\n\t\tassertEntryEqual(entries[3], entry4);\n\t});\n\n\ttest('getEntries - configured max entries respected', async () => {\n\t\tconst workingCopy1 = disposables.add(new TestWorkingCopy(testFile1Path));\n\n\t\tawait addEntry({ resource: workingCopy1.resource }, CancellationToken.None);\n\t\tawait addEntry({ resource: workingCopy1.resource }, CancellationToken.None);\n\t\tconst entry3 = await addEntry({ resource: workingCopy1.resource, source: 'Test source' }, CancellationToken.None);\n\t\tconst entry4 = await addEntry({ resource: workingCopy1.resource }, CancellationToken.None);\n\n\t\tservice._configurationService.setUserConfiguration('workbench.localHistory.maxFileEntries', 2);\n\n\t\tlet entries = await service.getEntries(workingCopy1.resource, CancellationToken.None);\n\t\tassert.strictEqual(entries.length, 2);\n\t\tassertEntryEqual(entries[0], entry3);\n\t\tassertEntryEqual(entries[1], entry4);\n\n\t\tservice._configurationService.setUserConfiguration('workbench.localHistory.maxFileEntries', 4);\n\n\t\tentries = await service.getEntries(workingCopy1.resource, CancellationToken.None);\n\t\tassert.strictEqual(entries.length, 4);\n\n\t\tservice._configurationService.setUserConfiguration('workbench.localHistory.maxFileEntries', 5);\n\n\t\tentries = await service.getEntries(workingCopy1.resource, CancellationToken.None);\n\t\tassert.strictEqual(entries.length, 4);\n\t});\n\n\ttest('getAll', async () => {\n\t\tconst workingCopy1 = disposables.add(new TestWorkingCopy(testFile1Path));\n\t\tconst workingCopy2 = disposables.add(new TestWorkingCopy(testFile2Path));\n\n\t\tlet resources = await service.getAll(CancellationToken.None);\n\t\tassert.strictEqual(resources.length, 0);\n\n\t\tawait addEntry({ resource: workingCopy1.resource, source: 'test-source' }, CancellationToken.None);\n\t\tawait addEntry({ resource: workingCopy1.resource, source: 'test-source' }, CancellationToken.None);\n\t\tawait addEntry({ resource: workingCopy2.resource, source: 'test-source' }, CancellationToken.None);\n\t\tawait addEntry({ resource: workingCopy2.resource, source: 'test-source' }, CancellationToken.None);\n\n\t\tresources = await service.getAll(CancellationToken.None);\n\t\tassert.strictEqual(resources.length, 2);\n\t\tfor (const resource of resources) {\n\t\t\tif (resource.toString() !== workingCopy1.resource.toString() && resource.toString() !== workingCopy2.resource.toString()) {\n\t\t\t\tassert.fail(`Unexpected history resource: ${resource.toString()}`);\n\t\t\t}\n\t\t}\n\n\t\t// Simulate shutdown\n\t\tconst event = new TestWillShutdownEvent();\n\t\tservice._lifecycleService.fireWillShutdown(event);\n\t\tawait Promise.allSettled(event.value);\n\n\t\t// Resolve from file service fresh and verify again\n\n\t\tservice.dispose();\n\t\tservice = disposables.add(new TestWorkingCopyHistoryService(disposables, fileService));\n\n\t\tconst workingCopy3 = disposables.add(new TestWorkingCopy(testFile3Path));\n\t\tawait addEntry({ resource: workingCopy3.resource, source: 'test-source' }, CancellationToken.None);\n\n\t\tresources = await service.getAll(CancellationToken.None);\n\t\tassert.strictEqual(resources.length, 3);\n\t\tfor (const resource of resources) {\n\t\t\tif (resource.toString() !== workingCopy1.resource.toString() && resource.toString() !== workingCopy2.resource.toString() && resource.toString() !== workingCopy3.resource.toString()) {\n\t\t\t\tassert.fail(`Unexpected history resource: ${resource.toString()}`);\n\t\t\t}\n\t\t}\n\t});\n\n\ttest('getAll - ignores resource when no entries exist', async () => {\n\t\tconst workingCopy1 = disposables.add(new TestWorkingCopy(testFile1Path));\n\n\t\tconst entry = await addEntry({ resource: workingCopy1.resource, source: 'test-source' }, CancellationToken.None);\n\n\t\tlet resources = await service.getAll(CancellationToken.None);\n\t\tassert.strictEqual(resources.length, 1);\n\n\t\tawait service.removeEntry(entry, CancellationToken.None);\n\n\t\tresources = await service.getAll(CancellationToken.None);\n\t\tassert.strictEqual(resources.length, 0);\n\n\t\t// Simulate shutdown\n\t\tconst event = new TestWillShutdownEvent();\n\t\tservice._lifecycleService.fireWillShutdown(event);\n\t\tawait Promise.allSettled(event.value);\n\n\t\t// Resolve from file service fresh and verify again\n\n\t\tservice.dispose();\n\t\tservice = disposables.add(new TestWorkingCopyHistoryService(disposables, fileService));\n\n\t\tresources = await service.getAll(CancellationToken.None);\n\t\tassert.strictEqual(resources.length, 0);\n\t});\n\n\tfunction assertEntryEqual(entryA: IWorkingCopyHistoryEntry, entryB: IWorkingCopyHistoryEntry, assertTimestamp = true): void {\n\t\tassert.strictEqual(entryA.id, entryB.id);\n\t\tassert.strictEqual(entryA.location.toString(), entryB.location.toString());\n\t\tif (assertTimestamp) {\n\t\t\tassert.strictEqual(entryA.timestamp, entryB.timestamp);\n\t\t}\n\t\tassert.strictEqual(entryA.source, entryB.source);\n\t\tassert.strictEqual(entryA.workingCopy.name, entryB.workingCopy.name);\n\t\tassert.strictEqual(entryA.workingCopy.resource.toString(), entryB.workingCopy.resource.toString());\n\t}\n\n\ttest('entries cleaned up on shutdown', async () => {\n\t\tconst workingCopy1 = disposables.add(new TestWorkingCopy(testFile1Path));\n\n\t\tconst entry1 = await addEntry({ resource: workingCopy1.resource, source: 'test-source' }, CancellationToken.None);\n\t\tconst entry2 = await addEntry({ resource: workingCopy1.resource, source: 'other-source' }, CancellationToken.None);\n\t\tconst entry3 = await addEntry({ resource: workingCopy1.resource, source: 'other-source' }, CancellationToken.None);\n\t\tconst entry4 = await addEntry({ resource: workingCopy1.resource, source: 'other-source' }, CancellationToken.None);\n\n\t\tservice._configurationService.setUserConfiguration('workbench.localHistory.maxFileEntries', 2);\n\n\t\t// Simulate shutdown\n\t\tlet event = new TestWillShutdownEvent();\n\t\tservice._lifecycleService.fireWillShutdown(event);\n\t\tawait Promise.allSettled(event.value);\n\n\t\tassert.ok(!(await fileService.exists(entry1.location)));\n\t\tassert.ok(!(await fileService.exists(entry2.location)));\n\t\tassert.ok((await fileService.exists(entry3.location)));\n\t\tassert.ok((await fileService.exists(entry4.location)));\n\n\t\t// Resolve from file service fresh and verify again\n\n\t\tservice.dispose();\n\t\tservice = disposables.add(new TestWorkingCopyHistoryService(disposables, fileService));\n\n\t\tlet entries = await service.getEntries(workingCopy1.resource, CancellationToken.None);\n\t\tassert.strictEqual(entries.length, 2);\n\t\tassertEntryEqual(entries[0], entry3);\n\t\tassertEntryEqual(entries[1], entry4);\n\n\t\tservice._configurationService.setUserConfiguration('workbench.localHistory.maxFileEntries', 3);\n\n\t\tconst entry5 = await addEntry({ resource: workingCopy1.resource, source: 'other-source' }, CancellationToken.None);\n\n\t\t// Simulate shutdown\n\t\tevent = new TestWillShutdownEvent();\n\t\tservice._lifecycleService.fireWillShutdown(event);\n\t\tawait Promise.allSettled(event.value);\n\n\t\tassert.ok((await fileService.exists(entry3.location)));\n\t\tassert.ok((await fileService.exists(entry4.location)));\n\t\tassert.ok((await fileService.exists(entry5.location)));\n\n\t\t// Resolve from file service fresh and verify again\n\n\t\tservice.dispose();\n\t\tservice = disposables.add(new TestWorkingCopyHistoryService(disposables, fileService));\n\n\t\tentries = await service.getEntries(workingCopy1.resource, CancellationToken.None);\n\t\tassert.strictEqual(entries.length, 3);\n\t\tassertEntryEqual(entries[0], entry3);\n\t\tassertEntryEqual(entries[1], entry4);\n\t\tassertEntryEqual(entries[2], entry5);\n\t});\n\n\ttest('entries are merged when source is same', async () => {\n\t\tlet replaced: IWorkingCopyHistoryEntry | undefined = undefined;\n\t\tdisposables.add(service.onDidReplaceEntry(e => replaced = e.entry));\n\n\t\tconst workingCopy1 = disposables.add(new TestWorkingCopy(testFile1Path));\n\n\t\tservice._configurationService.setUserConfiguration('workbench.localHistory.mergeWindow', 1);\n\n\t\tconst entry1 = await addEntry({ resource: workingCopy1.resource, source: 'test-source' }, CancellationToken.None);\n\t\tassert.strictEqual(replaced, undefined);\n\n\t\tconst entry2 = await addEntry({ resource: workingCopy1.resource, source: 'test-source' }, CancellationToken.None);\n\t\tassert.strictEqual(replaced, entry1);\n\n\t\tconst entry3 = await addEntry({ resource: workingCopy1.resource, source: 'test-source' }, CancellationToken.None);\n\t\tassert.strictEqual(replaced, entry2);\n\n\t\tlet entries = await service.getEntries(workingCopy1.resource, CancellationToken.None);\n\t\tassert.strictEqual(entries.length, 1);\n\t\tassertEntryEqual(entries[0], entry3);\n\n\t\tservice._configurationService.setUserConfiguration('workbench.localHistory.mergeWindow', undefined);\n\n\t\tawait addEntry({ resource: workingCopy1.resource, source: 'test-source' }, CancellationToken.None);\n\t\tawait addEntry({ resource: workingCopy1.resource, source: 'test-source' }, CancellationToken.None);\n\n\t\tentries = await service.getEntries(workingCopy1.resource, CancellationToken.None);\n\t\tassert.strictEqual(entries.length, 3);\n\t});\n\n\ttest('move entries (file rename)', async () => {\n\t\tconst workingCopy = disposables.add(new TestWorkingCopy(testFile1Path));\n\n\t\tconst entry1 = await addEntry({ resource: workingCopy.resource, source: 'test-source' }, CancellationToken.None);\n\t\tconst entry2 = await addEntry({ resource: workingCopy.resource, source: 'test-source' }, CancellationToken.None);\n\t\tconst entry3 = await addEntry({ resource: workingCopy.resource, source: 'test-source' }, CancellationToken.None);\n\n\t\tlet entries = await service.getEntries(workingCopy.resource, CancellationToken.None);\n\t\tassert.strictEqual(entries.length, 3);\n\n\t\tconst renamedWorkingCopyResource = joinPath(dirname(workingCopy.resource), 'renamed.txt');\n\t\tawait fileService.move(workingCopy.resource, renamedWorkingCopyResource);\n\n\t\tconst result = await service.moveEntries(workingCopy.resource, renamedWorkingCopyResource);\n\n\t\tassert.strictEqual(result.length, 1);\n\t\tassert.strictEqual(result[0].toString(), renamedWorkingCopyResource.toString());\n\n\t\tentries = await service.getEntries(workingCopy.resource, CancellationToken.None);\n\t\tassert.strictEqual(entries.length, 0);\n\n\t\tentries = await service.getEntries(renamedWorkingCopyResource, CancellationToken.None);\n\t\tassert.strictEqual(entries.length, 4);\n\n\t\tassert.strictEqual(entries[0].id, entry1.id);\n\t\tassert.strictEqual(entries[0].timestamp, entry1.timestamp);\n\t\tassert.strictEqual(entries[0].source, entry1.source);\n\t\tassert.ok(!entries[0].sourceDescription);\n\t\tassert.notStrictEqual(entries[0].location, entry1.location);\n\t\tassert.strictEqual(entries[0].workingCopy.resource.toString(), renamedWorkingCopyResource.toString());\n\n\t\tassert.strictEqual(entries[1].id, entry2.id);\n\t\tassert.strictEqual(entries[1].timestamp, entry2.timestamp);\n\t\tassert.strictEqual(entries[1].source, entry2.source);\n\t\tassert.ok(!entries[1].sourceDescription);\n\t\tassert.notStrictEqual(entries[1].location, entry2.location);\n\t\tassert.strictEqual(entries[1].workingCopy.resource.toString(), renamedWorkingCopyResource.toString());\n\n\t\tassert.strictEqual(entries[2].id, entry3.id);\n\t\tassert.strictEqual(entries[2].timestamp, entry3.timestamp);\n\t\tassert.strictEqual(entries[2].source, entry3.source);\n\t\tassert.notStrictEqual(entries[2].location, entry3.location);\n\t\tassert.strictEqual(entries[2].workingCopy.resource.toString(), renamedWorkingCopyResource.toString());\n\t\tassert.ok(!entries[2].sourceDescription);\n\n\t\tassert.strictEqual(entries[3].source, 'renamed.source' /* for the move */);\n\t\tassert.ok(entries[3].sourceDescription); // contains the source working copy path\n\n\t\tconst all = await service.getAll(CancellationToken.None);\n\t\tassert.strictEqual(all.length, 1);\n\t\tassert.strictEqual(all[0].toString(), renamedWorkingCopyResource.toString());\n\t});\n\n\ttest('entries moved (folder rename)', async () => {\n\t\tconst workingCopy1 = disposables.add(new TestWorkingCopy(testFile1Path));\n\t\tconst workingCopy2 = disposables.add(new TestWorkingCopy(testFile2Path));\n\n\t\tconst entry1A = await addEntry({ resource: workingCopy1.resource, source: 'test-source' }, CancellationToken.None);\n\t\tconst entry2A = await addEntry({ resource: workingCopy1.resource, source: 'test-source' }, CancellationToken.None);\n\t\tconst entry3A = await addEntry({ resource: workingCopy1.resource, source: 'test-source' }, CancellationToken.None);\n\n\t\tconst entry1B = await addEntry({ resource: workingCopy2.resource, source: 'test-source' }, CancellationToken.None);\n\t\tconst entry2B = await addEntry({ resource: workingCopy2.resource, source: 'test-source' }, CancellationToken.None);\n\t\tconst entry3B = await addEntry({ resource: workingCopy2.resource, source: 'test-source' }, CancellationToken.None);\n\n\t\tlet entries = await service.getEntries(workingCopy1.resource, CancellationToken.None);\n\t\tassert.strictEqual(entries.length, 3);\n\n\t\tentries = await service.getEntries(workingCopy2.resource, CancellationToken.None);\n\t\tassert.strictEqual(entries.length, 3);\n\n\t\tconst renamedWorkHome = joinPath(dirname(workHome), 'renamed');\n\t\tawait fileService.move(workHome, renamedWorkHome);\n\n\t\tconst resources = await service.moveEntries(workHome, renamedWorkHome);\n\n\t\tconst renamedWorkingCopy1Resource = joinPath(renamedWorkHome, basename(workingCopy1.resource));\n\t\tconst renamedWorkingCopy2Resource = joinPath(renamedWorkHome, basename(workingCopy2.resource));\n\n\t\tassert.strictEqual(resources.length, 2);\n\t\tfor (const resource of resources) {\n\t\t\tif (resource.toString() !== renamedWorkingCopy1Resource.toString() && resource.toString() !== renamedWorkingCopy2Resource.toString()) {\n\t\t\t\tassert.fail(`Unexpected history resource: ${resource.toString()}`);\n\t\t\t}\n\t\t}\n\n\t\tentries = await service.getEntries(workingCopy1.resource, CancellationToken.None);\n\t\tassert.strictEqual(entries.length, 0);\n\t\tentries = await service.getEntries(workingCopy2.resource, CancellationToken.None);\n\t\tassert.strictEqual(entries.length, 0);\n\n\t\tentries = await service.getEntries(renamedWorkingCopy1Resource, CancellationToken.None);\n\t\tassert.strictEqual(entries.length, 4);\n\n\t\tassert.strictEqual(entries[0].id, entry1A.id);\n\t\tassert.strictEqual(entries[0].timestamp, entry1A.timestamp);\n\t\tassert.strictEqual(entries[0].source, entry1A.source);\n\t\tassert.notStrictEqual(entries[0].location, entry1A.location);\n\t\tassert.strictEqual(entries[0].workingCopy.resource.toString(), renamedWorkingCopy1Resource.toString());\n\n\t\tassert.strictEqual(entries[1].id, entry2A.id);\n\t\tassert.strictEqual(entries[1].timestamp, entry2A.timestamp);\n\t\tassert.strictEqual(entries[1].source, entry2A.source);\n\t\tassert.notStrictEqual(entries[1].location, entry2A.location);\n\t\tassert.strictEqual(entries[1].workingCopy.resource.toString(), renamedWorkingCopy1Resource.toString());\n\n\t\tassert.strictEqual(entries[2].id, entry3A.id);\n\t\tassert.strictEqual(entries[2].timestamp, entry3A.timestamp);\n\t\tassert.strictEqual(entries[2].source, entry3A.source);\n\t\tassert.notStrictEqual(entries[2].location, entry3A.location);\n\t\tassert.strictEqual(entries[2].workingCopy.resource.toString(), renamedWorkingCopy1Resource.toString());\n\n\t\tentries = await service.getEntries(renamedWorkingCopy2Resource, CancellationToken.None);\n\t\tassert.strictEqual(entries.length, 4);\n\n\t\tassert.strictEqual(entries[0].id, entry1B.id);\n\t\tassert.strictEqual(entries[0].timestamp, entry1B.timestamp);\n\t\tassert.strictEqual(entries[0].source, entry1B.source);\n\t\tassert.notStrictEqual(entries[0].location, entry1B.location);\n\t\tassert.strictEqual(entries[0].workingCopy.resource.toString(), renamedWorkingCopy2Resource.toString());\n\n\t\tassert.strictEqual(entries[1].id, entry2B.id);\n\t\tassert.strictEqual(entries[1].timestamp, entry2B.timestamp);\n\t\tassert.strictEqual(entries[1].source, entry2B.source);\n\t\tassert.notStrictEqual(entries[1].location, entry2B.location);\n\t\tassert.strictEqual(entries[1].workingCopy.resource.toString(), renamedWorkingCopy2Resource.toString());\n\n\t\tassert.strictEqual(entries[2].id, entry3B.id);\n\t\tassert.strictEqual(entries[2].timestamp, entry3B.timestamp);\n\t\tassert.strictEqual(entries[2].source, entry3B.source);\n\t\tassert.notStrictEqual(entries[2].location, entry3B.location);\n\t\tassert.strictEqual(entries[2].workingCopy.resource.toString(), renamedWorkingCopy2Resource.toString());\n\n\t\tassert.strictEqual(entries[3].source, 'moved.source' /* for the move */);\n\t\tassert.ok(entries[3].sourceDescription); // contains the source working copy path\n\n\t\tconst all = await service.getAll(CancellationToken.None);\n\t\tassert.strictEqual(all.length, 2);\n\t\tfor (const resource of all) {\n\t\t\tif (resource.toString() !== renamedWorkingCopy1Resource.toString() && resource.toString() !== renamedWorkingCopy2Resource.toString()) {\n\t\t\t\tassert.fail(`Unexpected history resource: ${resource.toString()}`);\n\t\t\t}\n\t\t}\n\t});\n\n\ttest('move entries (file rename) - preserves previous entries (no new entries)', async () => {\n\t\tconst workingCopyTarget = disposables.add(new TestWorkingCopy(testFile1Path));\n\t\tconst workingCopySource = disposables.add(new TestWorkingCopy(testFile2Path));\n\n\t\tconst entry1 = await addEntry({ resource: workingCopyTarget.resource, source: 'test-source1' }, CancellationToken.None);\n\t\tconst entry2 = await addEntry({ resource: workingCopyTarget.resource, source: 'test-source2' }, CancellationToken.None);\n\t\tconst entry3 = await addEntry({ resource: workingCopyTarget.resource, source: 'test-source3' }, CancellationToken.None);\n\n\t\tlet entries = await service.getEntries(workingCopyTarget.resource, CancellationToken.None);\n\t\tassert.strictEqual(entries.length, 3);\n\n\t\tentries = await service.getEntries(workingCopySource.resource, CancellationToken.None);\n\t\tassert.strictEqual(entries.length, 0);\n\n\t\tawait fileService.move(workingCopySource.resource, workingCopyTarget.resource, true);\n\n\t\tconst result = await service.moveEntries(workingCopySource.resource, workingCopyTarget.resource);\n\n\t\tassert.strictEqual(result.length, 1);\n\t\tassert.strictEqual(result[0].toString(), workingCopyTarget.resource.toString());\n\n\t\tentries = await service.getEntries(workingCopySource.resource, CancellationToken.None);\n\t\tassert.strictEqual(entries.length, 0);\n\n\t\tentries = await service.getEntries(workingCopyTarget.resource, CancellationToken.None);\n\t\tassert.strictEqual(entries.length, 4);\n\n\t\tassert.strictEqual(entries[0].id, entry1.id);\n\t\tassert.strictEqual(entries[0].timestamp, entry1.timestamp);\n\t\tassert.strictEqual(entries[0].source, entry1.source);\n\t\tassert.notStrictEqual(entries[0].location, entry1.location);\n\t\tassert.strictEqual(entries[0].workingCopy.resource.toString(), workingCopyTarget.resource.toString());\n\n\t\tassert.strictEqual(entries[1].id, entry2.id);\n\t\tassert.strictEqual(entries[1].timestamp, entry2.timestamp);\n\t\tassert.strictEqual(entries[1].source, entry2.source);\n\t\tassert.notStrictEqual(entries[1].location, entry2.location);\n\t\tassert.strictEqual(entries[1].workingCopy.resource.toString(), workingCopyTarget.resource.toString());\n\n\t\tassert.strictEqual(entries[2].id, entry3.id);\n\t\tassert.strictEqual(entries[2].timestamp, entry3.timestamp);\n\t\tassert.strictEqual(entries[2].source, entry3.source);\n\t\tassert.notStrictEqual(entries[2].location, entry3.location);\n\t\tassert.strictEqual(entries[2].workingCopy.resource.toString(), workingCopyTarget.resource.toString());\n\n\t\tassert.strictEqual(entries[3].source, 'renamed.source' /* for the move */);\n\t\tassert.ok(entries[3].sourceDescription); // contains the source working copy path\n\n\t\tconst all = await service.getAll(CancellationToken.None);\n\t\tassert.strictEqual(all.length, 1);\n\t\tassert.strictEqual(all[0].toString(), workingCopyTarget.resource.toString());\n\t});\n\n\ttest('move entries (file rename) - preserves previous entries (new entries)', async () => {\n\t\tconst workingCopyTarget = disposables.add(new TestWorkingCopy(testFile1Path));\n\t\tconst workingCopySource = disposables.add(new TestWorkingCopy(testFile2Path));\n\n\t\tconst targetEntry1 = await addEntry({ resource: workingCopyTarget.resource, source: 'test-target1' }, CancellationToken.None);\n\t\tconst targetEntry2 = await addEntry({ resource: workingCopyTarget.resource, source: 'test-target2' }, CancellationToken.None);\n\t\tconst targetEntry3 = await addEntry({ resource: workingCopyTarget.resource, source: 'test-target3' }, CancellationToken.None);\n\n\t\tconst sourceEntry1 = await addEntry({ resource: workingCopySource.resource, source: 'test-source1' }, CancellationToken.None);\n\t\tconst sourceEntry2 = await addEntry({ resource: workingCopySource.resource, source: 'test-source2' }, CancellationToken.None);\n\t\tconst sourceEntry3 = await addEntry({ resource: workingCopySource.resource, source: 'test-source3' }, CancellationToken.None);\n\n\t\tlet entries = await service.getEntries(workingCopyTarget.resource, CancellationToken.None);\n\t\tassert.strictEqual(entries.length, 3);\n\n\t\tentries = await service.getEntries(workingCopySource.resource, CancellationToken.None);\n\t\tassert.strictEqual(entries.length, 3);\n\n\t\tawait fileService.move(workingCopySource.resource, workingCopyTarget.resource, true);\n\n\t\tconst result = await service.moveEntries(workingCopySource.resource, workingCopyTarget.resource);\n\n\t\tassert.strictEqual(result.length, 1);\n\t\tassert.strictEqual(result[0].toString(), workingCopyTarget.resource.toString());\n\n\t\tentries = await service.getEntries(workingCopySource.resource, CancellationToken.None);\n\t\tassert.strictEqual(entries.length, 0);\n\n\t\tentries = await service.getEntries(workingCopyTarget.resource, CancellationToken.None);\n\t\tassert.strictEqual(entries.length, 7);\n\n\t\tassert.strictEqual(entries[0].id, targetEntry1.id);\n\t\tassert.strictEqual(entries[0].timestamp, targetEntry1.timestamp);\n\t\tassert.strictEqual(entries[0].source, targetEntry1.source);\n\t\tassert.notStrictEqual(entries[0].location, targetEntry1.location);\n\t\tassert.strictEqual(entries[0].workingCopy.resource.toString(), workingCopyTarget.resource.toString());\n\n\t\tassert.strictEqual(entries[1].id, targetEntry2.id);\n\t\tassert.strictEqual(entries[1].timestamp, targetEntry2.timestamp);\n\t\tassert.strictEqual(entries[1].source, targetEntry2.source);\n\t\tassert.notStrictEqual(entries[1].location, targetEntry2.location);\n\t\tassert.strictEqual(entries[1].workingCopy.resource.toString(), workingCopyTarget.resource.toString());\n\n\t\tassert.strictEqual(entries[2].id, targetEntry3.id);\n\t\tassert.strictEqual(entries[2].timestamp, targetEntry3.timestamp);\n\t\tassert.strictEqual(entries[2].source, targetEntry3.source);\n\t\tassert.notStrictEqual(entries[2].location, targetEntry3.location);\n\t\tassert.strictEqual(entries[2].workingCopy.resource.toString(), workingCopyTarget.resource.toString());\n\n\t\tassert.strictEqual(entries[3].id, sourceEntry1.id);\n\t\tassert.strictEqual(entries[3].timestamp, sourceEntry1.timestamp);\n\t\tassert.strictEqual(entries[3].source, sourceEntry1.source);\n\t\tassert.notStrictEqual(entries[3].location, sourceEntry1.location);\n\t\tassert.strictEqual(entries[3].workingCopy.resource.toString(), workingCopyTarget.resource.toString());\n\n\t\tassert.strictEqual(entries[4].id, sourceEntry2.id);\n\t\tassert.strictEqual(entries[4].timestamp, sourceEntry2.timestamp);\n\t\tassert.strictEqual(entries[4].source, sourceEntry2.source);\n\t\tassert.notStrictEqual(entries[4].location, sourceEntry2.location);\n\t\tassert.strictEqual(entries[4].workingCopy.resource.toString(), workingCopyTarget.resource.toString());\n\n\t\tassert.strictEqual(entries[5].id, sourceEntry3.id);\n\t\tassert.strictEqual(entries[5].timestamp, sourceEntry3.timestamp);\n\t\tassert.strictEqual(entries[5].source, sourceEntry3.source);\n\t\tassert.notStrictEqual(entries[5].location, sourceEntry3.location);\n\t\tassert.strictEqual(entries[5].workingCopy.resource.toString(), workingCopyTarget.resource.toString());\n\n\t\tassert.strictEqual(entries[6].source, 'renamed.source' /* for the move */);\n\t\tassert.ok(entries[6].sourceDescription); // contains the source working copy path\n\n\t\tconst all = await service.getAll(CancellationToken.None);\n\t\tassert.strictEqual(all.length, 1);\n\t\tassert.strictEqual(all[0].toString(), workingCopyTarget.resource.toString());\n\t});\n\n\tensureNoDisposablesAreLeakedInTestSuite();\n});\n"],
  "mappings": "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",
  "names": []
}
