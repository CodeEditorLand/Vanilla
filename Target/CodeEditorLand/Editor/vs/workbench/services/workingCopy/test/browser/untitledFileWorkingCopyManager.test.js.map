{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/workingCopy/test/browser/untitledFileWorkingCopyManager.test.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport assert from 'assert';\nimport { bufferToStream, VSBuffer } from '../../../../../base/common/buffer.js';\nimport { DisposableStore } from '../../../../../base/common/lifecycle.js';\nimport { Schemas } from '../../../../../base/common/network.js';\nimport { URI } from '../../../../../base/common/uri.js';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from '../../../../../base/test/common/utils.js';\nimport { IInstantiationService } from '../../../../../platform/instantiation/common/instantiation.js';\nimport { FileWorkingCopyManager, IFileWorkingCopyManager } from '../../common/fileWorkingCopyManager.js';\nimport { NO_TYPE_ID, WorkingCopyCapabilities } from '../../common/workingCopy.js';\nimport { TestStoredFileWorkingCopyModel, TestStoredFileWorkingCopyModelFactory } from './storedFileWorkingCopy.test.js';\nimport { TestUntitledFileWorkingCopyModel, TestUntitledFileWorkingCopyModelFactory } from './untitledFileWorkingCopy.test.js';\nimport { TestInMemoryFileSystemProvider, TestServiceAccessor, workbenchInstantiationService } from '../../../../test/browser/workbenchTestServices.js';\n\nsuite('UntitledFileWorkingCopyManager', () => {\n\n\tconst disposables = new DisposableStore();\n\tlet instantiationService: IInstantiationService;\n\tlet accessor: TestServiceAccessor;\n\n\tlet manager: IFileWorkingCopyManager<TestStoredFileWorkingCopyModel, TestUntitledFileWorkingCopyModel>;\n\n\tsetup(() => {\n\t\tinstantiationService = workbenchInstantiationService(undefined, disposables);\n\t\taccessor = instantiationService.createInstance(TestServiceAccessor);\n\n\t\tdisposables.add(accessor.fileService.registerProvider(Schemas.file, disposables.add(new TestInMemoryFileSystemProvider())));\n\t\tdisposables.add(accessor.fileService.registerProvider(Schemas.vscodeRemote, disposables.add(new TestInMemoryFileSystemProvider())));\n\n\t\tmanager = disposables.add(new FileWorkingCopyManager(\n\t\t\t'testUntitledFileWorkingCopyType',\n\t\t\tnew TestStoredFileWorkingCopyModelFactory(),\n\t\t\tnew TestUntitledFileWorkingCopyModelFactory(),\n\t\t\taccessor.fileService, accessor.lifecycleService, accessor.labelService, accessor.logService,\n\t\t\taccessor.workingCopyFileService, accessor.workingCopyBackupService, accessor.uriIdentityService, accessor.fileDialogService,\n\t\t\taccessor.filesConfigurationService, accessor.workingCopyService, accessor.notificationService,\n\t\t\taccessor.workingCopyEditorService, accessor.editorService, accessor.elevatedFileService, accessor.pathService,\n\t\t\taccessor.environmentService, accessor.dialogService, accessor.decorationsService, accessor.progressService\n\t\t));\n\t});\n\n\tteardown(() => {\n\t\tfor (const workingCopy of [...manager.untitled.workingCopies, ...manager.stored.workingCopies]) {\n\t\t\tworkingCopy.dispose();\n\t\t}\n\n\t\tdisposables.clear();\n\t});\n\n\ttest('basics', async () => {\n\t\tlet createCounter = 0;\n\t\tdisposables.add(manager.untitled.onDidCreate(e => {\n\t\t\tcreateCounter++;\n\t\t}));\n\n\t\tlet disposeCounter = 0;\n\t\tdisposables.add(manager.untitled.onWillDispose(e => {\n\t\t\tdisposeCounter++;\n\t\t}));\n\n\t\tlet dirtyCounter = 0;\n\t\tdisposables.add(manager.untitled.onDidChangeDirty(e => {\n\t\t\tdirtyCounter++;\n\t\t}));\n\n\t\tassert.strictEqual(accessor.workingCopyService.workingCopies.length, 0);\n\t\tassert.strictEqual(manager.untitled.workingCopies.length, 0);\n\n\t\tassert.strictEqual(manager.untitled.get(URI.file('/some/invalidPath')), undefined);\n\t\tassert.strictEqual(manager.untitled.get(URI.file('/some/invalidPath').with({ scheme: Schemas.untitled })), undefined);\n\n\t\tconst workingCopy1 = await manager.untitled.resolve();\n\t\tconst workingCopy2 = await manager.untitled.resolve();\n\n\t\tassert.strictEqual(workingCopy1.typeId, 'testUntitledFileWorkingCopyType');\n\t\tassert.strictEqual(workingCopy1.resource.scheme, Schemas.untitled);\n\n\t\tassert.strictEqual(createCounter, 2);\n\n\t\tassert.strictEqual(manager.untitled.get(workingCopy1.resource), workingCopy1);\n\t\tassert.strictEqual(manager.untitled.get(workingCopy2.resource), workingCopy2);\n\n\t\tassert.strictEqual(accessor.workingCopyService.workingCopies.length, 2);\n\t\tassert.strictEqual(manager.untitled.workingCopies.length, 2);\n\n\t\tassert.notStrictEqual(workingCopy1.resource.toString(), workingCopy2.resource.toString());\n\n\t\tfor (const workingCopy of [workingCopy1, workingCopy2]) {\n\t\t\tassert.strictEqual(workingCopy.capabilities, WorkingCopyCapabilities.Untitled);\n\t\t\tassert.strictEqual(workingCopy.isDirty(), false);\n\t\t\tassert.strictEqual(workingCopy.isModified(), false);\n\t\t\tassert.ok(workingCopy.model);\n\t\t}\n\n\t\tworkingCopy1.model?.updateContents('Hello World');\n\n\t\tassert.strictEqual(workingCopy1.isDirty(), true);\n\t\tassert.strictEqual(workingCopy1.isModified(), true);\n\t\tassert.strictEqual(dirtyCounter, 1);\n\n\t\tworkingCopy1.model?.updateContents(''); // change to empty clears dirty/modified flags\n\t\tassert.strictEqual(workingCopy1.isDirty(), false);\n\t\tassert.strictEqual(workingCopy1.isModified(), false);\n\t\tassert.strictEqual(dirtyCounter, 2);\n\n\t\tworkingCopy2.model?.fireContentChangeEvent({ isInitial: false });\n\t\tassert.strictEqual(workingCopy2.isDirty(), true);\n\t\tassert.strictEqual(workingCopy2.isModified(), true);\n\t\tassert.strictEqual(dirtyCounter, 3);\n\n\t\tworkingCopy1.dispose();\n\n\t\tassert.strictEqual(manager.untitled.workingCopies.length, 1);\n\t\tassert.strictEqual(manager.untitled.get(workingCopy1.resource), undefined);\n\n\t\tworkingCopy2.dispose();\n\n\t\tassert.strictEqual(manager.untitled.workingCopies.length, 0);\n\t\tassert.strictEqual(manager.untitled.get(workingCopy2.resource), undefined);\n\n\t\tassert.strictEqual(disposeCounter, 2);\n\t});\n\n\ttest('dirty - scratchpads are never dirty', async () => {\n\t\tlet dirtyCounter = 0;\n\t\tdisposables.add(manager.untitled.onDidChangeDirty(e => {\n\t\t\tdirtyCounter++;\n\t\t}));\n\n\t\tconst workingCopy1 = await manager.resolve({\n\t\t\tuntitledResource: URI.from({ scheme: Schemas.untitled, path: `/myscratchpad` }),\n\t\t\tisScratchpad: true\n\t\t});\n\n\t\tassert.strictEqual(workingCopy1.resource.scheme, Schemas.untitled);\n\t\tassert.strictEqual(manager.untitled.workingCopies.length, 1);\n\n\t\tworkingCopy1.model?.updateContents('contents');\n\t\tassert.strictEqual(workingCopy1.isDirty(), false);\n\t\tassert.strictEqual(workingCopy1.isModified(), true);\n\n\t\tworkingCopy1.model?.fireContentChangeEvent({ isInitial: true });\n\t\tassert.strictEqual(workingCopy1.isDirty(), false);\n\t\tassert.strictEqual(workingCopy1.isModified(), false);\n\n\t\tassert.strictEqual(dirtyCounter, 0);\n\n\t\tworkingCopy1.dispose();\n\t});\n\n\ttest('resolve - with initial value', async () => {\n\t\tlet dirtyCounter = 0;\n\t\tdisposables.add(manager.untitled.onDidChangeDirty(e => {\n\t\t\tdirtyCounter++;\n\t\t}));\n\n\t\tconst workingCopy1 = await manager.untitled.resolve({ contents: { value: bufferToStream(VSBuffer.fromString('Hello World')) } });\n\n\t\tassert.strictEqual(workingCopy1.isModified(), true);\n\t\tassert.strictEqual(workingCopy1.isDirty(), true);\n\t\tassert.strictEqual(dirtyCounter, 1);\n\t\tassert.strictEqual(workingCopy1.model?.contents, 'Hello World');\n\n\t\tworkingCopy1.dispose();\n\n\t\tconst workingCopy2 = await manager.untitled.resolve({ contents: { value: bufferToStream(VSBuffer.fromString('Hello World')), markModified: true } });\n\n\t\tassert.strictEqual(workingCopy2.isModified(), true);\n\t\tassert.strictEqual(workingCopy2.isDirty(), true);\n\t\tassert.strictEqual(dirtyCounter, 2);\n\t\tassert.strictEqual(workingCopy2.model?.contents, 'Hello World');\n\n\t\tworkingCopy2.dispose();\n\t});\n\n\ttest('resolve - with initial value but markDirty: false', async () => {\n\t\tlet dirtyCounter = 0;\n\t\tdisposables.add(manager.untitled.onDidChangeDirty(e => {\n\t\t\tdirtyCounter++;\n\t\t}));\n\n\t\tconst workingCopy = await manager.untitled.resolve({ contents: { value: bufferToStream(VSBuffer.fromString('Hello World')), markModified: false } });\n\n\t\tassert.strictEqual(workingCopy.isModified(), false);\n\t\tassert.strictEqual(workingCopy.isDirty(), false);\n\t\tassert.strictEqual(dirtyCounter, 0);\n\t\tassert.strictEqual(workingCopy.model?.contents, 'Hello World');\n\n\t\tworkingCopy.dispose();\n\t});\n\n\ttest('resolve begins counter from 1 for disposed untitled', async () => {\n\t\tconst untitled1 = await manager.untitled.resolve();\n\t\tuntitled1.dispose();\n\n\t\tconst untitled1Again = disposables.add(await manager.untitled.resolve());\n\t\tassert.strictEqual(untitled1.resource.toString(), untitled1Again.resource.toString());\n\t});\n\n\ttest('resolve - existing', async () => {\n\t\tlet createCounter = 0;\n\t\tdisposables.add(manager.untitled.onDidCreate(e => {\n\t\t\tcreateCounter++;\n\t\t}));\n\n\t\tconst workingCopy1 = await manager.untitled.resolve();\n\t\tassert.strictEqual(createCounter, 1);\n\n\t\tconst workingCopy2 = await manager.untitled.resolve({ untitledResource: workingCopy1.resource });\n\t\tassert.strictEqual(workingCopy1, workingCopy2);\n\t\tassert.strictEqual(createCounter, 1);\n\n\t\tconst workingCopy3 = await manager.untitled.resolve({ untitledResource: URI.file('/invalid/untitled') });\n\t\tassert.strictEqual(workingCopy3.resource.scheme, Schemas.untitled);\n\n\t\tworkingCopy1.dispose();\n\t\tworkingCopy2.dispose();\n\t\tworkingCopy3.dispose();\n\t});\n\n\ttest('resolve - untitled resource used for new working copy', async () => {\n\t\tconst invalidUntitledResource = URI.file('my/untitled.txt');\n\t\tconst validUntitledResource = invalidUntitledResource.with({ scheme: Schemas.untitled });\n\n\t\tconst workingCopy1 = await manager.untitled.resolve({ untitledResource: invalidUntitledResource });\n\t\tassert.notStrictEqual(workingCopy1.resource.toString(), invalidUntitledResource.toString());\n\n\t\tconst workingCopy2 = await manager.untitled.resolve({ untitledResource: validUntitledResource });\n\t\tassert.strictEqual(workingCopy2.resource.toString(), validUntitledResource.toString());\n\n\t\tworkingCopy1.dispose();\n\t\tworkingCopy2.dispose();\n\t});\n\n\ttest('resolve - with associated resource', async () => {\n\t\tconst workingCopy = await manager.untitled.resolve({ associatedResource: { path: '/some/associated.txt' } });\n\n\t\tassert.strictEqual(workingCopy.hasAssociatedFilePath, true);\n\t\tassert.strictEqual(workingCopy.resource.path, '/some/associated.txt');\n\n\t\tworkingCopy.dispose();\n\t});\n\n\ttest('save - without associated resource', async () => {\n\t\tconst workingCopy = await manager.untitled.resolve();\n\t\tworkingCopy.model?.updateContents('Simple Save');\n\n\t\taccessor.fileDialogService.setPickFileToSave(URI.file('simple/file.txt'));\n\n\t\tconst result = await workingCopy.save();\n\t\tassert.ok(result);\n\n\t\tassert.strictEqual(manager.untitled.get(workingCopy.resource), undefined);\n\n\t\tworkingCopy.dispose();\n\t});\n\n\ttest('save - with associated resource', async () => {\n\t\tconst workingCopy = await manager.untitled.resolve({ associatedResource: { path: '/some/associated.txt' } });\n\t\tworkingCopy.model?.updateContents('Simple Save with associated resource');\n\n\t\taccessor.fileService.notExistsSet.set(URI.from({ scheme: Schemas.file, path: '/some/associated.txt' }), true);\n\n\t\tconst result = await workingCopy.save();\n\t\tassert.ok(result);\n\n\t\tassert.strictEqual(manager.untitled.get(workingCopy.resource), undefined);\n\n\t\tworkingCopy.dispose();\n\t});\n\n\ttest('save - with associated resource (asks to overwrite)', async () => {\n\t\tconst workingCopy = await manager.untitled.resolve({ associatedResource: { path: '/some/associated.txt' } });\n\t\tworkingCopy.model?.updateContents('Simple Save with associated resource');\n\n\t\tlet result = await workingCopy.save();\n\t\tassert.ok(!result); // not confirmed\n\n\t\tassert.strictEqual(manager.untitled.get(workingCopy.resource), workingCopy);\n\n\t\taccessor.dialogService.setConfirmResult({ confirmed: true });\n\n\t\tresult = await workingCopy.save();\n\t\tassert.ok(result); // confirmed\n\n\t\tassert.strictEqual(manager.untitled.get(workingCopy.resource), undefined);\n\n\t\tworkingCopy.dispose();\n\t});\n\n\ttest('destroy', async () => {\n\t\tassert.strictEqual(accessor.workingCopyService.workingCopies.length, 0);\n\n\t\tawait manager.untitled.resolve();\n\t\tawait manager.untitled.resolve();\n\t\tawait manager.untitled.resolve();\n\n\t\tassert.strictEqual(accessor.workingCopyService.workingCopies.length, 3);\n\t\tassert.strictEqual(manager.untitled.workingCopies.length, 3);\n\n\t\tawait manager.untitled.destroy();\n\n\t\tassert.strictEqual(accessor.workingCopyService.workingCopies.length, 0);\n\t\tassert.strictEqual(manager.untitled.workingCopies.length, 0);\n\t});\n\n\ttest('manager with different types produce different URIs', async () => {\n\t\ttry {\n\t\t\tmanager = disposables.add(new FileWorkingCopyManager(\n\t\t\t\t'someOtherUntitledTypeId',\n\t\t\t\tnew TestStoredFileWorkingCopyModelFactory(),\n\t\t\t\tnew TestUntitledFileWorkingCopyModelFactory(),\n\t\t\t\taccessor.fileService, accessor.lifecycleService, accessor.labelService, accessor.logService,\n\t\t\t\taccessor.workingCopyFileService, accessor.workingCopyBackupService, accessor.uriIdentityService, accessor.fileDialogService,\n\t\t\t\taccessor.filesConfigurationService, accessor.workingCopyService, accessor.notificationService,\n\t\t\t\taccessor.workingCopyEditorService, accessor.editorService, accessor.elevatedFileService, accessor.pathService,\n\t\t\t\taccessor.environmentService, accessor.dialogService, accessor.decorationsService, accessor.progressService\n\t\t\t));\n\n\t\t\tconst untitled1OriginalType = disposables.add(await manager.untitled.resolve());\n\t\t\tconst untitled1OtherType = disposables.add(await manager.untitled.resolve());\n\n\t\t\tassert.notStrictEqual(untitled1OriginalType.resource.toString(), untitled1OtherType.resource.toString());\n\t\t} finally {\n\t\t\tmanager.destroy();\n\t\t}\n\t});\n\n\ttest('manager without typeId produces backwards compatible URIs', async () => {\n\t\ttry {\n\t\t\tmanager = disposables.add(new FileWorkingCopyManager(\n\t\t\t\tNO_TYPE_ID,\n\t\t\t\tnew TestStoredFileWorkingCopyModelFactory(),\n\t\t\t\tnew TestUntitledFileWorkingCopyModelFactory(),\n\t\t\t\taccessor.fileService, accessor.lifecycleService, accessor.labelService, accessor.logService,\n\t\t\t\taccessor.workingCopyFileService, accessor.workingCopyBackupService, accessor.uriIdentityService, accessor.fileDialogService,\n\t\t\t\taccessor.filesConfigurationService, accessor.workingCopyService, accessor.notificationService,\n\t\t\t\taccessor.workingCopyEditorService, accessor.editorService, accessor.elevatedFileService, accessor.pathService,\n\t\t\t\taccessor.environmentService, accessor.dialogService, accessor.decorationsService, accessor.progressService\n\t\t\t));\n\n\t\t\tconst result = disposables.add(await manager.untitled.resolve());\n\t\t\tassert.strictEqual(result.resource.scheme, Schemas.untitled);\n\t\t\tassert.ok(result.resource.path.length > 0);\n\t\t\tassert.strictEqual(result.resource.query, '');\n\t\t\tassert.strictEqual(result.resource.authority, '');\n\t\t\tassert.strictEqual(result.resource.fragment, '');\n\t\t} finally {\n\t\t\tmanager.destroy();\n\t\t}\n\t});\n\n\tensureNoDisposablesAreLeakedInTestSuite();\n});\n"],
  "mappings": "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",
  "names": []
}
