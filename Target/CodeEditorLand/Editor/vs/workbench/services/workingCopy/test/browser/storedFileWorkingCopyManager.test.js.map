{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/workingCopy/test/browser/storedFileWorkingCopyManager.test.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport assert from 'assert';\nimport { URI } from '../../../../../base/common/uri.js';\nimport { IInstantiationService } from '../../../../../platform/instantiation/common/instantiation.js';\nimport { workbenchInstantiationService, TestServiceAccessor, TestWillShutdownEvent } from '../../../../test/browser/workbenchTestServices.js';\nimport { StoredFileWorkingCopyManager, IStoredFileWorkingCopyManager, IStoredFileWorkingCopySaveEvent } from '../../common/storedFileWorkingCopyManager.js';\nimport { IStoredFileWorkingCopy, IStoredFileWorkingCopyModel } from '../../common/storedFileWorkingCopy.js';\nimport { bufferToStream, VSBuffer } from '../../../../../base/common/buffer.js';\nimport { FileChangesEvent, FileChangeType, FileOperationError, FileOperationResult } from '../../../../../platform/files/common/files.js';\nimport { timeout } from '../../../../../base/common/async.js';\nimport { TestStoredFileWorkingCopyModel, TestStoredFileWorkingCopyModelFactory } from './storedFileWorkingCopy.test.js';\nimport { CancellationToken } from '../../../../../base/common/cancellation.js';\nimport { InMemoryFileSystemProvider } from '../../../../../platform/files/common/inMemoryFilesystemProvider.js';\nimport { DisposableStore } from '../../../../../base/common/lifecycle.js';\nimport { isWeb } from '../../../../../base/common/platform.js';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from '../../../../../base/test/common/utils.js';\n\nsuite('StoredFileWorkingCopyManager', () => {\n\n\tconst disposables = new DisposableStore();\n\tlet instantiationService: IInstantiationService;\n\tlet accessor: TestServiceAccessor;\n\n\tlet manager: IStoredFileWorkingCopyManager<TestStoredFileWorkingCopyModel>;\n\n\tsetup(() => {\n\t\tinstantiationService = workbenchInstantiationService(undefined, disposables);\n\t\taccessor = instantiationService.createInstance(TestServiceAccessor);\n\n\t\tmanager = disposables.add(new StoredFileWorkingCopyManager<TestStoredFileWorkingCopyModel>(\n\t\t\t'testStoredFileWorkingCopyType',\n\t\t\tnew TestStoredFileWorkingCopyModelFactory(),\n\t\t\taccessor.fileService, accessor.lifecycleService, accessor.labelService, accessor.logService,\n\t\t\taccessor.workingCopyFileService, accessor.workingCopyBackupService, accessor.uriIdentityService,\n\t\t\taccessor.filesConfigurationService, accessor.workingCopyService, accessor.notificationService,\n\t\t\taccessor.workingCopyEditorService, accessor.editorService, accessor.elevatedFileService,\n\t\t\taccessor.progressService\n\t\t));\n\t});\n\n\tteardown(() => {\n\t\tfor (const workingCopy of manager.workingCopies) {\n\t\t\tworkingCopy.dispose();\n\t\t}\n\n\t\tdisposables.clear();\n\t});\n\n\ttest('resolve', async () => {\n\t\tconst resource = URI.file('/test.html');\n\n\t\tconst events: IStoredFileWorkingCopy<IStoredFileWorkingCopyModel>[] = [];\n\t\tconst listener = manager.onDidCreate(workingCopy => {\n\t\t\tevents.push(workingCopy);\n\t\t});\n\n\t\tconst resolvePromise = manager.resolve(resource);\n\t\tassert.ok(manager.get(resource)); // working copy known even before resolved()\n\t\tassert.strictEqual(manager.workingCopies.length, 1);\n\n\t\tconst workingCopy1 = await resolvePromise;\n\t\tassert.ok(workingCopy1);\n\t\tassert.ok(workingCopy1.model);\n\t\tassert.strictEqual(workingCopy1.typeId, 'testStoredFileWorkingCopyType');\n\t\tassert.strictEqual(workingCopy1.resource.toString(), resource.toString());\n\t\tassert.strictEqual(manager.get(resource), workingCopy1);\n\n\t\tconst workingCopy2 = await manager.resolve(resource);\n\t\tassert.strictEqual(workingCopy2, workingCopy1);\n\t\tassert.strictEqual(manager.workingCopies.length, 1);\n\t\tworkingCopy1.dispose();\n\n\t\tconst workingCopy3 = await manager.resolve(resource);\n\t\tassert.notStrictEqual(workingCopy3, workingCopy2);\n\t\tassert.strictEqual(manager.workingCopies.length, 1);\n\t\tassert.strictEqual(manager.get(resource), workingCopy3);\n\t\tworkingCopy3.dispose();\n\n\t\tassert.strictEqual(manager.workingCopies.length, 0);\n\n\t\tassert.strictEqual(events.length, 2);\n\t\tassert.strictEqual(events[0].resource.toString(), workingCopy1.resource.toString());\n\t\tassert.strictEqual(events[1].resource.toString(), workingCopy2.resource.toString());\n\n\t\tlistener.dispose();\n\n\t\tworkingCopy1.dispose();\n\t\tworkingCopy2.dispose();\n\t\tworkingCopy3.dispose();\n\t});\n\n\ttest('resolve (async)', async () => {\n\t\tconst resource = URI.file('/path/index.txt');\n\n\t\tdisposables.add(await manager.resolve(resource));\n\n\t\tlet didResolve = false;\n\t\tlet onDidResolve = new Promise<void>(resolve => {\n\t\t\tdisposables.add(manager.onDidResolve(({ model }) => {\n\t\t\t\tif (model?.resource.toString() === resource.toString()) {\n\t\t\t\t\tdidResolve = true;\n\t\t\t\t\tresolve();\n\t\t\t\t}\n\t\t\t}));\n\t\t});\n\n\t\tconst resolve = manager.resolve(resource, { reload: { async: true } });\n\n\t\tawait onDidResolve;\n\n\t\tassert.strictEqual(didResolve, true);\n\n\t\tdidResolve = false;\n\n\t\tonDidResolve = new Promise<void>(resolve => {\n\t\t\tdisposables.add(manager.onDidResolve(({ model }) => {\n\t\t\t\tif (model?.resource.toString() === resource.toString()) {\n\t\t\t\t\tdidResolve = true;\n\t\t\t\t\tresolve();\n\t\t\t\t}\n\t\t\t}));\n\t\t});\n\n\t\tmanager.resolve(resource, { reload: { async: true, force: true } });\n\n\t\tawait onDidResolve;\n\n\t\tassert.strictEqual(didResolve, true);\n\n\t\tdisposables.add(await resolve);\n\t});\n\n\ttest('resolve (sync)', async () => {\n\t\tconst resource = URI.file('/path/index.txt');\n\n\t\tawait manager.resolve(resource);\n\n\t\tlet didResolve = false;\n\t\tdisposables.add(manager.onDidResolve(({ model }) => {\n\t\t\tif (model?.resource.toString() === resource.toString()) {\n\t\t\t\tdidResolve = true;\n\t\t\t}\n\t\t}));\n\n\t\tdisposables.add(await manager.resolve(resource, { reload: { async: false } }));\n\t\tassert.strictEqual(didResolve, true);\n\n\t\tdidResolve = false;\n\n\t\tdisposables.add(await manager.resolve(resource, { reload: { async: false, force: true } }));\n\t\tassert.strictEqual(didResolve, true);\n\t});\n\n\ttest('resolve (sync) - model disposed when error and first call to resolve', async () => {\n\t\tconst resource = URI.file('/path/index.txt');\n\n\t\taccessor.fileService.readShouldThrowError = new FileOperationError('fail', FileOperationResult.FILE_OTHER_ERROR);\n\n\t\ttry {\n\t\t\tlet error: Error | undefined = undefined;\n\t\t\ttry {\n\t\t\t\tawait manager.resolve(resource);\n\t\t\t} catch (e) {\n\t\t\t\terror = e;\n\t\t\t}\n\n\t\t\tassert.ok(error);\n\t\t\tassert.strictEqual(manager.workingCopies.length, 0);\n\t\t} finally {\n\t\t\taccessor.fileService.readShouldThrowError = undefined;\n\t\t}\n\t});\n\n\ttest('resolve (sync) - model not disposed when error and model existed before', async () => {\n\t\tconst resource = URI.file('/path/index.txt');\n\n\t\tdisposables.add(await manager.resolve(resource));\n\n\t\taccessor.fileService.readShouldThrowError = new FileOperationError('fail', FileOperationResult.FILE_OTHER_ERROR);\n\n\t\ttry {\n\t\t\tlet error: Error | undefined = undefined;\n\t\t\ttry {\n\t\t\t\tawait manager.resolve(resource, { reload: { async: false } });\n\t\t\t} catch (e) {\n\t\t\t\terror = e;\n\t\t\t}\n\n\t\t\tassert.ok(error);\n\t\t\tassert.strictEqual(manager.workingCopies.length, 1);\n\t\t} finally {\n\t\t\taccessor.fileService.readShouldThrowError = undefined;\n\t\t}\n\t});\n\n\ttest('resolve with initial contents', async () => {\n\t\tconst resource = URI.file('/test.html');\n\n\t\tconst workingCopy = await manager.resolve(resource, { contents: bufferToStream(VSBuffer.fromString('Hello World')) });\n\t\tassert.strictEqual(workingCopy.model?.contents, 'Hello World');\n\t\tassert.strictEqual(workingCopy.isDirty(), true);\n\n\t\tawait manager.resolve(resource, { contents: bufferToStream(VSBuffer.fromString('More Changes')) });\n\t\tassert.strictEqual(workingCopy.model?.contents, 'More Changes');\n\t\tassert.strictEqual(workingCopy.isDirty(), true);\n\n\t\tworkingCopy.dispose();\n\t});\n\n\ttest('multiple resolves execute in sequence (same resources)', async () => {\n\t\tconst resource = URI.file('/test.html');\n\n\t\tconst firstPromise = manager.resolve(resource);\n\t\tconst secondPromise = manager.resolve(resource, { contents: bufferToStream(VSBuffer.fromString('Hello World')) });\n\t\tconst thirdPromise = manager.resolve(resource, { contents: bufferToStream(VSBuffer.fromString('More Changes')) });\n\n\t\tawait firstPromise;\n\t\tawait secondPromise;\n\t\tconst workingCopy = await thirdPromise;\n\n\t\tassert.strictEqual(workingCopy.model?.contents, 'More Changes');\n\t\tassert.strictEqual(workingCopy.isDirty(), true);\n\n\t\tworkingCopy.dispose();\n\t});\n\n\ttest('multiple resolves execute in parallel (different resources)', async () => {\n\t\tconst resource1 = URI.file('/test1.html');\n\t\tconst resource2 = URI.file('/test2.html');\n\t\tconst resource3 = URI.file('/test3.html');\n\n\t\tconst firstPromise = manager.resolve(resource1);\n\t\tconst secondPromise = manager.resolve(resource2);\n\t\tconst thirdPromise = manager.resolve(resource3);\n\n\t\tconst [workingCopy1, workingCopy2, workingCopy3] = await Promise.all([firstPromise, secondPromise, thirdPromise]);\n\n\t\tassert.strictEqual(manager.workingCopies.length, 3);\n\t\tassert.strictEqual(workingCopy1.resource.toString(), resource1.toString());\n\t\tassert.strictEqual(workingCopy2.resource.toString(), resource2.toString());\n\t\tassert.strictEqual(workingCopy3.resource.toString(), resource3.toString());\n\n\t\tworkingCopy1.dispose();\n\t\tworkingCopy2.dispose();\n\t\tworkingCopy3.dispose();\n\t});\n\n\ttest('removed from cache when working copy or model gets disposed', async () => {\n\t\tconst resource = URI.file('/test.html');\n\n\t\tlet workingCopy = await manager.resolve(resource, { contents: bufferToStream(VSBuffer.fromString('Hello World')) });\n\n\t\tassert.strictEqual(manager.get(URI.file('/test.html')), workingCopy);\n\n\t\tworkingCopy.dispose();\n\t\tassert(!manager.get(URI.file('/test.html')));\n\n\t\tworkingCopy = await manager.resolve(resource, { contents: bufferToStream(VSBuffer.fromString('Hello World')) });\n\n\t\tassert.strictEqual(manager.get(URI.file('/test.html')), workingCopy);\n\n\t\tworkingCopy.model?.dispose();\n\t\tassert(!manager.get(URI.file('/test.html')));\n\t});\n\n\ttest('events', async () => {\n\t\tconst resource1 = URI.file('/path/index.txt');\n\t\tconst resource2 = URI.file('/path/other.txt');\n\n\t\tlet createdCounter = 0;\n\t\tlet resolvedCounter = 0;\n\t\tlet removedCounter = 0;\n\t\tlet gotDirtyCounter = 0;\n\t\tlet gotNonDirtyCounter = 0;\n\t\tlet revertedCounter = 0;\n\t\tlet savedCounter = 0;\n\t\tlet saveErrorCounter = 0;\n\n\t\tdisposables.add(manager.onDidCreate(() => {\n\t\t\tcreatedCounter++;\n\t\t}));\n\n\t\tdisposables.add(manager.onDidRemove(resource => {\n\t\t\tif (resource.toString() === resource1.toString() || resource.toString() === resource2.toString()) {\n\t\t\t\tremovedCounter++;\n\t\t\t}\n\t\t}));\n\n\t\tdisposables.add(manager.onDidResolve(workingCopy => {\n\t\t\tif (workingCopy.resource.toString() === resource1.toString()) {\n\t\t\t\tresolvedCounter++;\n\t\t\t}\n\t\t}));\n\n\t\tdisposables.add(manager.onDidChangeDirty(workingCopy => {\n\t\t\tif (workingCopy.resource.toString() === resource1.toString()) {\n\t\t\t\tif (workingCopy.isDirty()) {\n\t\t\t\t\tgotDirtyCounter++;\n\t\t\t\t} else {\n\t\t\t\t\tgotNonDirtyCounter++;\n\t\t\t\t}\n\t\t\t}\n\t\t}));\n\n\t\tdisposables.add(manager.onDidRevert(workingCopy => {\n\t\t\tif (workingCopy.resource.toString() === resource1.toString()) {\n\t\t\t\trevertedCounter++;\n\t\t\t}\n\t\t}));\n\n\t\tlet lastSaveEvent: IStoredFileWorkingCopySaveEvent<TestStoredFileWorkingCopyModel> | undefined = undefined;\n\t\tdisposables.add(manager.onDidSave((e) => {\n\t\t\tif (e.workingCopy.resource.toString() === resource1.toString()) {\n\t\t\t\tlastSaveEvent = e;\n\t\t\t\tsavedCounter++;\n\t\t\t}\n\t\t}));\n\n\t\tdisposables.add(manager.onDidSaveError(workingCopy => {\n\t\t\tif (workingCopy.resource.toString() === resource1.toString()) {\n\t\t\t\tsaveErrorCounter++;\n\t\t\t}\n\t\t}));\n\n\t\tconst workingCopy1 = disposables.add(await manager.resolve(resource1));\n\t\tassert.strictEqual(resolvedCounter, 1);\n\t\tassert.strictEqual(createdCounter, 1);\n\n\t\taccessor.fileService.fireFileChanges(new FileChangesEvent([{ resource: resource1, type: FileChangeType.DELETED }], false));\n\t\taccessor.fileService.fireFileChanges(new FileChangesEvent([{ resource: resource1, type: FileChangeType.ADDED }], false));\n\n\t\tconst workingCopy2 = disposables.add(await manager.resolve(resource2));\n\t\tassert.strictEqual(resolvedCounter, 2);\n\t\tassert.strictEqual(createdCounter, 2);\n\n\t\tworkingCopy1.model?.updateContents('changed');\n\n\t\tawait workingCopy1.revert();\n\t\tworkingCopy1.model?.updateContents('changed again');\n\n\t\tawait workingCopy1.save();\n\n\t\ttry {\n\t\t\taccessor.fileService.writeShouldThrowError = new FileOperationError('write error', FileOperationResult.FILE_PERMISSION_DENIED);\n\n\t\t\tawait workingCopy1.save({ force: true });\n\t\t} finally {\n\t\t\taccessor.fileService.writeShouldThrowError = undefined;\n\t\t}\n\n\t\tworkingCopy1.dispose();\n\t\tworkingCopy2.dispose();\n\n\t\tawait workingCopy1.revert();\n\t\tassert.strictEqual(removedCounter, 2);\n\t\tassert.strictEqual(gotDirtyCounter, 3);\n\t\tassert.strictEqual(gotNonDirtyCounter, 2);\n\t\tassert.strictEqual(revertedCounter, 1);\n\t\tassert.strictEqual(savedCounter, 1);\n\t\tassert.strictEqual(lastSaveEvent!.workingCopy, workingCopy1);\n\t\tassert.ok(lastSaveEvent!.stat);\n\t\tassert.strictEqual(saveErrorCounter, 1);\n\t\tassert.strictEqual(createdCounter, 2);\n\n\t\tworkingCopy1.dispose();\n\t\tworkingCopy2.dispose();\n\t});\n\n\ttest('resolve registers as working copy and dispose clears', async () => {\n\t\tconst resource1 = URI.file('/test1.html');\n\t\tconst resource2 = URI.file('/test2.html');\n\t\tconst resource3 = URI.file('/test3.html');\n\n\t\tassert.strictEqual(accessor.workingCopyService.workingCopies.length, 0);\n\n\t\tconst firstPromise = manager.resolve(resource1);\n\t\tconst secondPromise = manager.resolve(resource2);\n\t\tconst thirdPromise = manager.resolve(resource3);\n\n\t\tawait Promise.all([firstPromise, secondPromise, thirdPromise]);\n\n\t\tassert.strictEqual(accessor.workingCopyService.workingCopies.length, 3);\n\t\tassert.strictEqual(manager.workingCopies.length, 3);\n\n\t\tmanager.dispose();\n\n\t\tassert.strictEqual(manager.workingCopies.length, 0);\n\n\t\t// dispose does not remove from working copy service, only `destroy` should\n\t\tassert.strictEqual(accessor.workingCopyService.workingCopies.length, 3);\n\n\t\tdisposables.add(await firstPromise);\n\t\tdisposables.add(await secondPromise);\n\t\tdisposables.add(await thirdPromise);\n\t});\n\n\ttest('destroy', async () => {\n\t\tconst resource1 = URI.file('/test1.html');\n\t\tconst resource2 = URI.file('/test2.html');\n\t\tconst resource3 = URI.file('/test3.html');\n\n\t\tassert.strictEqual(accessor.workingCopyService.workingCopies.length, 0);\n\n\t\tconst firstPromise = manager.resolve(resource1);\n\t\tconst secondPromise = manager.resolve(resource2);\n\t\tconst thirdPromise = manager.resolve(resource3);\n\n\t\tawait Promise.all([firstPromise, secondPromise, thirdPromise]);\n\n\t\tassert.strictEqual(accessor.workingCopyService.workingCopies.length, 3);\n\t\tassert.strictEqual(manager.workingCopies.length, 3);\n\n\t\tawait manager.destroy();\n\n\t\tassert.strictEqual(accessor.workingCopyService.workingCopies.length, 0);\n\t\tassert.strictEqual(manager.workingCopies.length, 0);\n\t});\n\n\ttest('destroy saves dirty working copies', async () => {\n\t\tconst resource = URI.file('/path/source.txt');\n\n\t\tconst workingCopy = await manager.resolve(resource);\n\n\t\tlet saved = false;\n\t\tdisposables.add(workingCopy.onDidSave(() => {\n\t\t\tsaved = true;\n\t\t}));\n\n\t\tworkingCopy.model?.updateContents('hello create');\n\t\tassert.strictEqual(workingCopy.isDirty(), true);\n\n\t\tassert.strictEqual(accessor.workingCopyService.workingCopies.length, 1);\n\t\tassert.strictEqual(manager.workingCopies.length, 1);\n\n\t\tawait manager.destroy();\n\n\t\tassert.strictEqual(accessor.workingCopyService.workingCopies.length, 0);\n\t\tassert.strictEqual(manager.workingCopies.length, 0);\n\n\t\tassert.strictEqual(saved, true);\n\t});\n\n\ttest('destroy falls back to using backup when save fails', async () => {\n\t\tconst resource = URI.file('/path/source.txt');\n\n\t\tconst workingCopy = await manager.resolve(resource);\n\t\tworkingCopy.model?.setThrowOnSnapshot();\n\n\t\tlet unexpectedSave = false;\n\t\tdisposables.add(workingCopy.onDidSave(() => {\n\t\t\tunexpectedSave = true;\n\t\t}));\n\n\t\tworkingCopy.model?.updateContents('hello create');\n\t\tassert.strictEqual(workingCopy.isDirty(), true);\n\n\t\tassert.strictEqual(accessor.workingCopyService.workingCopies.length, 1);\n\t\tassert.strictEqual(manager.workingCopies.length, 1);\n\n\t\tassert.strictEqual(accessor.workingCopyBackupService.resolved.has(workingCopy), true);\n\n\t\tawait manager.destroy();\n\n\t\tassert.strictEqual(accessor.workingCopyService.workingCopies.length, 0);\n\t\tassert.strictEqual(manager.workingCopies.length, 0);\n\n\t\tassert.strictEqual(unexpectedSave, false);\n\t});\n\n\ttest('file change event triggers working copy resolve', async () => {\n\t\tconst resource = URI.file('/path/index.txt');\n\n\t\tawait manager.resolve(resource);\n\n\t\tlet didResolve = false;\n\t\tconst onDidResolve = new Promise<void>(resolve => {\n\t\t\tdisposables.add(manager.onDidResolve(({ model }) => {\n\t\t\t\tif (model?.resource.toString() === resource.toString()) {\n\t\t\t\t\tdidResolve = true;\n\t\t\t\t\tresolve();\n\t\t\t\t}\n\t\t\t}));\n\t\t});\n\n\t\taccessor.fileService.fireFileChanges(new FileChangesEvent([{ resource, type: FileChangeType.UPDATED }], false));\n\n\t\tawait onDidResolve;\n\n\t\tassert.strictEqual(didResolve, true);\n\t});\n\n\ttest('file change event triggers working copy resolve (when working copy is pending to resolve)', async () => {\n\t\tconst resource = URI.file('/path/index.txt');\n\n\t\tmanager.resolve(resource);\n\n\t\tlet didResolve = false;\n\t\tlet resolvedCounter = 0;\n\t\tconst onDidResolve = new Promise<void>(resolve => {\n\t\t\tdisposables.add(manager.onDidResolve(({ model }) => {\n\t\t\t\tif (model?.resource.toString() === resource.toString()) {\n\t\t\t\t\tresolvedCounter++;\n\t\t\t\t\tif (resolvedCounter === 2) {\n\t\t\t\t\t\tdidResolve = true;\n\t\t\t\t\t\tresolve();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}));\n\t\t});\n\n\t\taccessor.fileService.fireFileChanges(new FileChangesEvent([{ resource, type: FileChangeType.UPDATED }], false));\n\n\t\tawait onDidResolve;\n\n\t\tassert.strictEqual(didResolve, true);\n\t});\n\n\ttest('file system provider change triggers working copy resolve', async () => {\n\t\tconst resource = URI.file('/path/index.txt');\n\n\t\tdisposables.add(await manager.resolve(resource));\n\n\t\tlet didResolve = false;\n\t\tconst onDidResolve = new Promise<void>(resolve => {\n\t\t\tdisposables.add(manager.onDidResolve(({ model }) => {\n\t\t\t\tif (model?.resource.toString() === resource.toString()) {\n\t\t\t\t\tdidResolve = true;\n\t\t\t\t\tresolve();\n\t\t\t\t}\n\t\t\t}));\n\t\t});\n\n\t\taccessor.fileService.fireFileSystemProviderCapabilitiesChangeEvent({ provider: disposables.add(new InMemoryFileSystemProvider()), scheme: resource.scheme });\n\n\t\tawait onDidResolve;\n\n\t\tassert.strictEqual(didResolve, true);\n\t});\n\n\ttest('working copy file event handling: create', async () => {\n\t\tconst resource = URI.file('/path/source.txt');\n\n\t\tconst workingCopy = await manager.resolve(resource);\n\t\tworkingCopy.model?.updateContents('hello create');\n\t\tassert.strictEqual(workingCopy.isDirty(), true);\n\n\t\tawait accessor.workingCopyFileService.create([{ resource }], CancellationToken.None);\n\t\tassert.strictEqual(workingCopy.isDirty(), false);\n\t});\n\n\ttest('working copy file event handling: move', () => {\n\t\treturn testMoveCopyFileWorkingCopy(true);\n\t});\n\n\ttest('working copy file event handling: copy', () => {\n\t\treturn testMoveCopyFileWorkingCopy(false);\n\t});\n\n\tasync function testMoveCopyFileWorkingCopy(move: boolean) {\n\t\tconst source = URI.file('/path/source.txt');\n\t\tconst target = URI.file('/path/other.txt');\n\n\t\tconst sourceWorkingCopy = await manager.resolve(source);\n\t\tsourceWorkingCopy.model?.updateContents('hello move or copy');\n\t\tassert.strictEqual(sourceWorkingCopy.isDirty(), true);\n\n\t\tif (move) {\n\t\t\tawait accessor.workingCopyFileService.move([{ file: { source, target } }], CancellationToken.None);\n\t\t} else {\n\t\t\tawait accessor.workingCopyFileService.copy([{ file: { source, target } }], CancellationToken.None);\n\t\t}\n\n\t\tconst targetWorkingCopy = await manager.resolve(target);\n\t\tassert.strictEqual(targetWorkingCopy.isDirty(), true);\n\t\tassert.strictEqual(targetWorkingCopy.model?.contents, 'hello move or copy');\n\t}\n\n\ttest('working copy file event handling: delete', async () => {\n\t\tconst resource = URI.file('/path/source.txt');\n\n\t\tconst workingCopy = await manager.resolve(resource);\n\t\tworkingCopy.model?.updateContents('hello delete');\n\t\tassert.strictEqual(workingCopy.isDirty(), true);\n\n\t\tawait accessor.workingCopyFileService.delete([{ resource }], CancellationToken.None);\n\t\tassert.strictEqual(workingCopy.isDirty(), false);\n\t});\n\n\ttest('working copy file event handling: move to same resource', async () => {\n\t\tconst source = URI.file('/path/source.txt');\n\n\t\tconst sourceWorkingCopy = await manager.resolve(source);\n\t\tsourceWorkingCopy.model?.updateContents('hello move');\n\t\tassert.strictEqual(sourceWorkingCopy.isDirty(), true);\n\n\t\tawait accessor.workingCopyFileService.move([{ file: { source, target: source } }], CancellationToken.None);\n\n\t\tassert.strictEqual(sourceWorkingCopy.isDirty(), true);\n\t\tassert.strictEqual(sourceWorkingCopy.model?.contents, 'hello move');\n\t});\n\n\ttest('canDispose with dirty working copy', async () => {\n\t\tconst resource = URI.file('/path/index_something.txt');\n\n\t\tconst workingCopy = await manager.resolve(resource);\n\t\tworkingCopy.model?.updateContents('make dirty');\n\n\t\tconst canDisposePromise = manager.canDispose(workingCopy);\n\t\tassert.ok(canDisposePromise instanceof Promise);\n\n\t\tlet canDispose = false;\n\t\t(async () => {\n\t\t\tcanDispose = await canDisposePromise;\n\t\t})();\n\n\t\tassert.strictEqual(canDispose, false);\n\t\tworkingCopy.revert({ soft: true });\n\n\t\tawait timeout(0);\n\n\t\tassert.strictEqual(canDispose, true);\n\n\t\tconst canDispose2 = manager.canDispose(workingCopy);\n\t\tassert.strictEqual(canDispose2, true);\n\t});\n\n\t(isWeb ? test.skip : test)('pending saves join on shutdown', async () => {\n\t\tconst resource1 = URI.file('/path/index_something1.txt');\n\t\tconst resource2 = URI.file('/path/index_something2.txt');\n\n\t\tconst workingCopy1 = disposables.add(await manager.resolve(resource1));\n\t\tworkingCopy1.model?.updateContents('make dirty');\n\n\t\tconst workingCopy2 = disposables.add(await manager.resolve(resource2));\n\t\tworkingCopy2.model?.updateContents('make dirty');\n\n\t\tlet saved1 = false;\n\t\tworkingCopy1.save().then(() => {\n\t\t\tsaved1 = true;\n\t\t});\n\n\t\tlet saved2 = false;\n\t\tworkingCopy2.save().then(() => {\n\t\t\tsaved2 = true;\n\t\t});\n\n\t\tconst event = new TestWillShutdownEvent();\n\t\taccessor.lifecycleService.fireWillShutdown(event);\n\n\t\tassert.ok(event.value.length > 0);\n\t\tawait Promise.all(event.value);\n\n\t\tassert.strictEqual(saved1, true);\n\t\tassert.strictEqual(saved2, true);\n\t});\n\n\tensureNoDisposablesAreLeakedInTestSuite();\n});\n"],
  "mappings": "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",
  "names": ["resolve"]
}
