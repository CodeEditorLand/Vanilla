{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/workingCopy/common/storedFileWorkingCopyManager.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { localize } from '../../../../nls.js';\nimport { DisposableStore, dispose, IDisposable } from '../../../../base/common/lifecycle.js';\nimport { Event, Emitter } from '../../../../base/common/event.js';\nimport { StoredFileWorkingCopy, StoredFileWorkingCopyState, IStoredFileWorkingCopy, IStoredFileWorkingCopyModel, IStoredFileWorkingCopyModelFactory, IStoredFileWorkingCopyResolveOptions, IStoredFileWorkingCopySaveEvent as IBaseStoredFileWorkingCopySaveEvent } from './storedFileWorkingCopy.js';\nimport { ResourceMap } from '../../../../base/common/map.js';\nimport { Promises, ResourceQueue } from '../../../../base/common/async.js';\nimport { FileChangesEvent, FileChangeType, FileOperation, IFileService, IFileSystemProviderCapabilitiesChangeEvent, IFileSystemProviderRegistrationEvent } from '../../../../platform/files/common/files.js';\nimport { ILifecycleService } from '../../lifecycle/common/lifecycle.js';\nimport { URI } from '../../../../base/common/uri.js';\nimport { VSBufferReadableStream } from '../../../../base/common/buffer.js';\nimport { ILabelService } from '../../../../platform/label/common/label.js';\nimport { ILogService } from '../../../../platform/log/common/log.js';\nimport { joinPath } from '../../../../base/common/resources.js';\nimport { IWorkingCopyFileService, WorkingCopyFileEvent } from './workingCopyFileService.js';\nimport { IUriIdentityService } from '../../../../platform/uriIdentity/common/uriIdentity.js';\nimport { CancellationToken } from '../../../../base/common/cancellation.js';\nimport { IWorkingCopyBackupService } from './workingCopyBackup.js';\nimport { BaseFileWorkingCopyManager, IBaseFileWorkingCopyManager } from './abstractFileWorkingCopyManager.js';\nimport { INotificationService } from '../../../../platform/notification/common/notification.js';\nimport { IEditorService } from '../../editor/common/editorService.js';\nimport { IElevatedFileService } from '../../files/common/elevatedFileService.js';\nimport { IFilesConfigurationService } from '../../filesConfiguration/common/filesConfigurationService.js';\nimport { IWorkingCopyEditorService } from './workingCopyEditorService.js';\nimport { IWorkingCopyService } from './workingCopyService.js';\nimport { isWeb } from '../../../../base/common/platform.js';\nimport { onUnexpectedError } from '../../../../base/common/errors.js';\nimport { SnapshotContext } from './fileWorkingCopy.js';\nimport { IProgressService } from '../../../../platform/progress/common/progress.js';\n\n/**\n * The only one that should be dealing with `IStoredFileWorkingCopy` and handle all\n * operations that are working copy related, such as save/revert, backup\n * and resolving.\n */\nexport interface IStoredFileWorkingCopyManager<M extends IStoredFileWorkingCopyModel> extends IBaseFileWorkingCopyManager<M, IStoredFileWorkingCopy<M>> {\n\n\t/**\n\t * An event for when a stored file working copy was resolved.\n\t */\n\treadonly onDidResolve: Event<IStoredFileWorkingCopy<M>>;\n\n\t/**\n\t * An event for when a stored file working copy changed it's dirty state.\n\t */\n\treadonly onDidChangeDirty: Event<IStoredFileWorkingCopy<M>>;\n\n\t/**\n\t * An event for when a stored file working copy changed it's readonly state.\n\t */\n\treadonly onDidChangeReadonly: Event<IStoredFileWorkingCopy<M>>;\n\n\t/**\n\t * An event for when a stored file working copy changed it's orphaned state.\n\t */\n\treadonly onDidChangeOrphaned: Event<IStoredFileWorkingCopy<M>>;\n\n\t/**\n\t * An event for when a stored file working copy failed to save.\n\t */\n\treadonly onDidSaveError: Event<IStoredFileWorkingCopy<M>>;\n\n\t/**\n\t * An event for when a stored file working copy successfully saved.\n\t */\n\treadonly onDidSave: Event<IStoredFileWorkingCopySaveEvent<M>>;\n\n\t/**\n\t * An event for when a stored file working copy was reverted.\n\t */\n\treadonly onDidRevert: Event<IStoredFileWorkingCopy<M>>;\n\n\t/**\n\t * An event for when a stored file working copy is removed from the manager.\n\t */\n\treadonly onDidRemove: Event<URI>;\n\n\t/**\n\t * Allows to resolve a stored file working copy. If the manager already knows\n\t * about a stored file working copy with the same `URI`, it will return that\n\t * existing stored file working copy. There will never be more than one\n\t * stored file working copy per `URI` until the stored file working copy is\n\t * disposed.\n\t *\n\t * Use the `IStoredFileWorkingCopyResolveOptions.reload` option to control the\n\t * behaviour for when a stored file working copy was previously already resolved\n\t * with regards to resolving it again from the underlying file resource\n\t * or not.\n\t *\n\t * Note: Callers must `dispose` the working copy when no longer needed.\n\t *\n\t * @param resource used as unique identifier of the stored file working copy in\n\t * case one is already known for this `URI`.\n\t * @param options\n\t */\n\tresolve(resource: URI, options?: IStoredFileWorkingCopyManagerResolveOptions): Promise<IStoredFileWorkingCopy<M>>;\n\n\t/**\n\t * Waits for the stored file working copy to be ready to be disposed. There may be\n\t * conditions under which the stored file working copy cannot be disposed, e.g. when\n\t * it is dirty. Once the promise is settled, it is safe to dispose.\n\t */\n\tcanDispose(workingCopy: IStoredFileWorkingCopy<M>): true | Promise<true>;\n}\n\nexport interface IStoredFileWorkingCopySaveEvent<M extends IStoredFileWorkingCopyModel> extends IBaseStoredFileWorkingCopySaveEvent {\n\n\t/**\n\t * The stored file working copy that was successfully saved.\n\t */\n\treadonly workingCopy: IStoredFileWorkingCopy<M>;\n}\n\nexport interface IStoredFileWorkingCopyManagerResolveOptions extends IStoredFileWorkingCopyResolveOptions {\n\n\t/**\n\t * If the stored file working copy was already resolved before,\n\t * allows to trigger a reload of it to fetch the latest contents.\n\t */\n\treadonly reload?: {\n\n\t\t/**\n\t\t * Controls whether the reload happens in the background\n\t\t * or whether `resolve` will await the reload to happen.\n\t\t */\n\t\treadonly async: boolean;\n\n\t\t/**\n\t\t * Controls whether to force reading the contents from the\n\t\t * underlying resource even if the resource did not change.\n\t\t */\n\t\treadonly force?: boolean;\n\t};\n}\n\nexport class StoredFileWorkingCopyManager<M extends IStoredFileWorkingCopyModel> extends BaseFileWorkingCopyManager<M, IStoredFileWorkingCopy<M>> implements IStoredFileWorkingCopyManager<M> {\n\n\t//#region Events\n\n\tprivate readonly _onDidResolve = this._register(new Emitter<IStoredFileWorkingCopy<M>>());\n\treadonly onDidResolve = this._onDidResolve.event;\n\n\tprivate readonly _onDidChangeDirty = this._register(new Emitter<IStoredFileWorkingCopy<M>>());\n\treadonly onDidChangeDirty = this._onDidChangeDirty.event;\n\n\tprivate readonly _onDidChangeReadonly = this._register(new Emitter<IStoredFileWorkingCopy<M>>());\n\treadonly onDidChangeReadonly = this._onDidChangeReadonly.event;\n\n\tprivate readonly _onDidChangeOrphaned = this._register(new Emitter<IStoredFileWorkingCopy<M>>());\n\treadonly onDidChangeOrphaned = this._onDidChangeOrphaned.event;\n\n\tprivate readonly _onDidSaveError = this._register(new Emitter<IStoredFileWorkingCopy<M>>());\n\treadonly onDidSaveError = this._onDidSaveError.event;\n\n\tprivate readonly _onDidSave = this._register(new Emitter<IStoredFileWorkingCopySaveEvent<M>>());\n\treadonly onDidSave = this._onDidSave.event;\n\n\tprivate readonly _onDidRevert = this._register(new Emitter<IStoredFileWorkingCopy<M>>());\n\treadonly onDidRevert = this._onDidRevert.event;\n\n\tprivate readonly _onDidRemove = this._register(new Emitter<URI>());\n\treadonly onDidRemove = this._onDidRemove.event;\n\n\t//#endregion\n\n\tprivate readonly mapResourceToWorkingCopyListeners = new ResourceMap<IDisposable>();\n\tprivate readonly mapResourceToPendingWorkingCopyResolve = new ResourceMap<Promise<void>>();\n\n\tprivate readonly workingCopyResolveQueue = this._register(new ResourceQueue());\n\n\tconstructor(\n\t\tprivate readonly workingCopyTypeId: string,\n\t\tprivate readonly modelFactory: IStoredFileWorkingCopyModelFactory<M>,\n\t\t@IFileService fileService: IFileService,\n\t\t@ILifecycleService private readonly lifecycleService: ILifecycleService,\n\t\t@ILabelService private readonly labelService: ILabelService,\n\t\t@ILogService logService: ILogService,\n\t\t@IWorkingCopyFileService private readonly workingCopyFileService: IWorkingCopyFileService,\n\t\t@IWorkingCopyBackupService workingCopyBackupService: IWorkingCopyBackupService,\n\t\t@IUriIdentityService private readonly uriIdentityService: IUriIdentityService,\n\t\t@IFilesConfigurationService private readonly filesConfigurationService: IFilesConfigurationService,\n\t\t@IWorkingCopyService private readonly workingCopyService: IWorkingCopyService,\n\t\t@INotificationService private readonly notificationService: INotificationService,\n\t\t@IWorkingCopyEditorService private readonly workingCopyEditorService: IWorkingCopyEditorService,\n\t\t@IEditorService private readonly editorService: IEditorService,\n\t\t@IElevatedFileService private readonly elevatedFileService: IElevatedFileService,\n\t\t@IProgressService private readonly progressService: IProgressService\n\t) {\n\t\tsuper(fileService, logService, workingCopyBackupService);\n\n\t\tthis.registerListeners();\n\t}\n\n\tprivate registerListeners(): void {\n\n\t\t// Update working copies from file change events\n\t\tthis._register(this.fileService.onDidFilesChange(e => this.onDidFilesChange(e)));\n\n\t\t// File system provider changes\n\t\tthis._register(this.fileService.onDidChangeFileSystemProviderCapabilities(e => this.onDidChangeFileSystemProviderCapabilities(e)));\n\t\tthis._register(this.fileService.onDidChangeFileSystemProviderRegistrations(e => this.onDidChangeFileSystemProviderRegistrations(e)));\n\n\t\t// Working copy operations\n\t\tthis._register(this.workingCopyFileService.onWillRunWorkingCopyFileOperation(e => this.onWillRunWorkingCopyFileOperation(e)));\n\t\tthis._register(this.workingCopyFileService.onDidFailWorkingCopyFileOperation(e => this.onDidFailWorkingCopyFileOperation(e)));\n\t\tthis._register(this.workingCopyFileService.onDidRunWorkingCopyFileOperation(e => this.onDidRunWorkingCopyFileOperation(e)));\n\n\t\t// Lifecycle\n\t\tif (isWeb) {\n\t\t\tthis._register(this.lifecycleService.onBeforeShutdown(event => event.veto(this.onBeforeShutdownWeb(), 'veto.fileWorkingCopyManager')));\n\t\t} else {\n\t\t\tthis._register(this.lifecycleService.onWillShutdown(event => event.join(this.onWillShutdownDesktop(), { id: 'join.fileWorkingCopyManager', label: localize('join.fileWorkingCopyManager', \"Saving working copies\") })));\n\t\t}\n\t}\n\n\tprivate onBeforeShutdownWeb(): boolean {\n\t\tif (this.workingCopies.some(workingCopy => workingCopy.hasState(StoredFileWorkingCopyState.PENDING_SAVE))) {\n\t\t\t// stored file working copies are pending to be saved:\n\t\t\t// veto because web does not support long running shutdown\n\t\t\treturn true;\n\t\t}\n\n\t\treturn false;\n\t}\n\n\tprivate async onWillShutdownDesktop(): Promise<void> {\n\t\tlet pendingSavedWorkingCopies: IStoredFileWorkingCopy<M>[];\n\n\t\t// As long as stored file working copies are pending to be saved, we prolong the shutdown\n\t\t// until that has happened to ensure we are not shutting down in the middle of\n\t\t// writing to the working copy (https://github.com/microsoft/vscode/issues/116600).\n\t\twhile ((pendingSavedWorkingCopies = this.workingCopies.filter(workingCopy => workingCopy.hasState(StoredFileWorkingCopyState.PENDING_SAVE))).length > 0) {\n\t\t\tawait Promises.settled(pendingSavedWorkingCopies.map(workingCopy => workingCopy.joinState(StoredFileWorkingCopyState.PENDING_SAVE)));\n\t\t}\n\t}\n\n\t//#region Resolve from file or file provider changes\n\n\tprivate onDidChangeFileSystemProviderCapabilities(e: IFileSystemProviderCapabilitiesChangeEvent): void {\n\n\t\t// Resolve working copies again for file systems that changed\n\t\t// capabilities to fetch latest metadata (e.g. readonly)\n\t\t// into all working copies.\n\t\tthis.queueWorkingCopyReloads(e.scheme);\n\t}\n\n\tprivate onDidChangeFileSystemProviderRegistrations(e: IFileSystemProviderRegistrationEvent): void {\n\t\tif (!e.added) {\n\t\t\treturn; // only if added\n\t\t}\n\n\t\t// Resolve working copies again for file systems that registered\n\t\t// to account for capability changes: extensions may unregister\n\t\t// and register the same provider with different capabilities,\n\t\t// so we want to ensure to fetch latest metadata (e.g. readonly)\n\t\t// into all working copies.\n\t\tthis.queueWorkingCopyReloads(e.scheme);\n\t}\n\n\tprivate onDidFilesChange(e: FileChangesEvent): void {\n\n\t\t// Trigger a resolve for any update or add event that impacts\n\t\t// the working copy. We also consider the added event\n\t\t// because it could be that a file was added and updated\n\t\t// right after.\n\t\tthis.queueWorkingCopyReloads(e);\n\t}\n\n\tprivate queueWorkingCopyReloads(scheme: string): void;\n\tprivate queueWorkingCopyReloads(e: FileChangesEvent): void;\n\tprivate queueWorkingCopyReloads(schemeOrEvent: string | FileChangesEvent): void {\n\t\tfor (const workingCopy of this.workingCopies) {\n\t\t\tif (workingCopy.isDirty()) {\n\t\t\t\tcontinue; // never reload dirty working copies\n\t\t\t}\n\n\t\t\tlet resolveWorkingCopy = false;\n\t\t\tif (typeof schemeOrEvent === 'string') {\n\t\t\t\tresolveWorkingCopy = schemeOrEvent === workingCopy.resource.scheme;\n\t\t\t} else {\n\t\t\t\tresolveWorkingCopy = schemeOrEvent.contains(workingCopy.resource, FileChangeType.UPDATED, FileChangeType.ADDED);\n\t\t\t}\n\n\t\t\tif (resolveWorkingCopy) {\n\t\t\t\tthis.queueWorkingCopyReload(workingCopy);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate queueWorkingCopyReload(workingCopy: IStoredFileWorkingCopy<M>): void {\n\n\t\t// Resolves a working copy to update (use a queue to prevent accumulation of\n\t\t// resolve when the resolving actually takes long. At most we only want the\n\t\t// queue to have a size of 2 (1 running resolve and 1 queued resolve).\n\t\tconst queueSize = this.workingCopyResolveQueue.queueSize(workingCopy.resource);\n\t\tif (queueSize <= 1) {\n\t\t\tthis.workingCopyResolveQueue.queueFor(workingCopy.resource, async () => {\n\t\t\t\ttry {\n\t\t\t\t\tawait this.reload(workingCopy);\n\t\t\t\t} catch (error) {\n\t\t\t\t\tthis.logService.error(error);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}\n\n\t//#endregion\n\n\t//#region Working Copy File Events\n\n\tprivate readonly mapCorrelationIdToWorkingCopiesToRestore = new Map<number, { source: URI; target: URI; snapshot?: VSBufferReadableStream }[]>();\n\n\tprivate onWillRunWorkingCopyFileOperation(e: WorkingCopyFileEvent): void {\n\n\t\t// Move / Copy: remember working copies to restore after the operation\n\t\tif (e.operation === FileOperation.MOVE || e.operation === FileOperation.COPY) {\n\t\t\te.waitUntil((async () => {\n\t\t\t\tconst workingCopiesToRestore: { source: URI; target: URI; snapshot?: VSBufferReadableStream }[] = [];\n\n\t\t\t\tfor (const { source, target } of e.files) {\n\t\t\t\t\tif (source) {\n\t\t\t\t\t\tif (this.uriIdentityService.extUri.isEqual(source, target)) {\n\t\t\t\t\t\t\tcontinue; // ignore if resources are considered equal\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Find all working copies that related to source (can be many if resource is a folder)\n\t\t\t\t\t\tconst sourceWorkingCopies: IStoredFileWorkingCopy<M>[] = [];\n\t\t\t\t\t\tfor (const workingCopy of this.workingCopies) {\n\t\t\t\t\t\t\tif (this.uriIdentityService.extUri.isEqualOrParent(workingCopy.resource, source)) {\n\t\t\t\t\t\t\t\tsourceWorkingCopies.push(workingCopy);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Remember each source working copy to load again after move is done\n\t\t\t\t\t\t// with optional content to restore if it was dirty\n\t\t\t\t\t\tfor (const sourceWorkingCopy of sourceWorkingCopies) {\n\t\t\t\t\t\t\tconst sourceResource = sourceWorkingCopy.resource;\n\n\t\t\t\t\t\t\t// If the source is the actual working copy, just use target as new resource\n\t\t\t\t\t\t\tlet targetResource: URI;\n\t\t\t\t\t\t\tif (this.uriIdentityService.extUri.isEqual(sourceResource, source)) {\n\t\t\t\t\t\t\t\ttargetResource = target;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// Otherwise a parent folder of the source is being moved, so we need\n\t\t\t\t\t\t\t// to compute the target resource based on that\n\t\t\t\t\t\t\telse {\n\t\t\t\t\t\t\t\ttargetResource = joinPath(target, sourceResource.path.substr(source.path.length + 1));\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tworkingCopiesToRestore.push({\n\t\t\t\t\t\t\t\tsource: sourceResource,\n\t\t\t\t\t\t\t\ttarget: targetResource,\n\t\t\t\t\t\t\t\tsnapshot: sourceWorkingCopy.isDirty() ? await sourceWorkingCopy.model?.snapshot(SnapshotContext.Save, CancellationToken.None) : undefined\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tthis.mapCorrelationIdToWorkingCopiesToRestore.set(e.correlationId, workingCopiesToRestore);\n\t\t\t})());\n\t\t}\n\t}\n\n\tprivate onDidFailWorkingCopyFileOperation(e: WorkingCopyFileEvent): void {\n\n\t\t// Move / Copy: restore dirty flag on working copies to restore that were dirty\n\t\tif ((e.operation === FileOperation.MOVE || e.operation === FileOperation.COPY)) {\n\t\t\tconst workingCopiesToRestore = this.mapCorrelationIdToWorkingCopiesToRestore.get(e.correlationId);\n\t\t\tif (workingCopiesToRestore) {\n\t\t\t\tthis.mapCorrelationIdToWorkingCopiesToRestore.delete(e.correlationId);\n\n\t\t\t\tfor (const workingCopy of workingCopiesToRestore) {\n\n\t\t\t\t\t// Snapshot presence means this working copy used to be modified and so we restore that\n\t\t\t\t\t// flag. we do NOT have to restore the content because the working copy was only soft\n\t\t\t\t\t// reverted and did not loose its original modified contents.\n\n\t\t\t\t\tif (workingCopy.snapshot) {\n\t\t\t\t\t\tthis.get(workingCopy.source)?.markModified();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate onDidRunWorkingCopyFileOperation(e: WorkingCopyFileEvent): void {\n\t\tswitch (e.operation) {\n\n\t\t\t// Create: Revert existing working copies\n\t\t\tcase FileOperation.CREATE:\n\t\t\t\te.waitUntil((async () => {\n\t\t\t\t\tfor (const { target } of e.files) {\n\t\t\t\t\t\tconst workingCopy = this.get(target);\n\t\t\t\t\t\tif (workingCopy && !workingCopy.isDisposed()) {\n\t\t\t\t\t\t\tawait workingCopy.revert();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t})());\n\t\t\t\tbreak;\n\n\t\t\t// Move/Copy: restore working copies that were loaded before the operation took place\n\t\t\tcase FileOperation.MOVE:\n\t\t\tcase FileOperation.COPY:\n\t\t\t\te.waitUntil((async () => {\n\t\t\t\t\tconst workingCopiesToRestore = this.mapCorrelationIdToWorkingCopiesToRestore.get(e.correlationId);\n\t\t\t\t\tif (workingCopiesToRestore) {\n\t\t\t\t\t\tthis.mapCorrelationIdToWorkingCopiesToRestore.delete(e.correlationId);\n\n\t\t\t\t\t\tawait Promises.settled(workingCopiesToRestore.map(async workingCopyToRestore => {\n\n\t\t\t\t\t\t\t// From this moment on, only operate on the canonical resource\n\t\t\t\t\t\t\t// to fix a potential data loss issue:\n\t\t\t\t\t\t\t// https://github.com/microsoft/vscode/issues/211374\n\t\t\t\t\t\t\tconst target = this.uriIdentityService.asCanonicalUri(workingCopyToRestore.target);\n\n\t\t\t\t\t\t\t// Restore the working copy at the target. if we have previous dirty content, we pass it\n\t\t\t\t\t\t\t// over to be used, otherwise we force a reload from disk. this is important\n\t\t\t\t\t\t\t// because we know the file has changed on disk after the move and the working copy might\n\t\t\t\t\t\t\t// have still existed with the previous state. this ensures that the working copy is not\n\t\t\t\t\t\t\t// tracking a stale state.\n\t\t\t\t\t\t\tawait this.resolve(target, {\n\t\t\t\t\t\t\t\treload: { async: false }, // enforce a reload\n\t\t\t\t\t\t\t\tcontents: workingCopyToRestore.snapshot\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}));\n\t\t\t\t\t}\n\t\t\t\t})());\n\t\t\t\tbreak;\n\t\t}\n\t}\n\n\t//#endregion\n\n\t//#region Reload & Resolve\n\n\tprivate async reload(workingCopy: IStoredFileWorkingCopy<M>): Promise<void> {\n\n\t\t// Await a pending working copy resolve first before proceeding\n\t\t// to ensure that we never resolve a working copy more than once\n\t\t// in parallel.\n\t\tawait this.joinPendingResolves(workingCopy.resource);\n\n\t\tif (workingCopy.isDirty() || workingCopy.isDisposed() || !this.has(workingCopy.resource)) {\n\t\t\treturn; // the working copy possibly got dirty or disposed, so return early then\n\t\t}\n\n\t\t// Trigger reload\n\t\tawait this.doResolve(workingCopy, { reload: { async: false } });\n\t}\n\n\tasync resolve(resource: URI, options?: IStoredFileWorkingCopyManagerResolveOptions): Promise<IStoredFileWorkingCopy<M>> {\n\n\t\t// Await a pending working copy resolve first before proceeding\n\t\t// to ensure that we never resolve a working copy more than once\n\t\t// in parallel.\n\t\tconst pendingResolve = this.joinPendingResolves(resource);\n\t\tif (pendingResolve) {\n\t\t\tawait pendingResolve;\n\t\t}\n\n\t\t// Trigger resolve\n\t\treturn this.doResolve(resource, options);\n\t}\n\n\tprivate async doResolve(resourceOrWorkingCopy: URI | IStoredFileWorkingCopy<M>, options?: IStoredFileWorkingCopyManagerResolveOptions): Promise<IStoredFileWorkingCopy<M>> {\n\t\tlet workingCopy: IStoredFileWorkingCopy<M> | undefined;\n\t\tlet resource: URI;\n\t\tif (URI.isUri(resourceOrWorkingCopy)) {\n\t\t\tresource = resourceOrWorkingCopy;\n\t\t\tworkingCopy = this.get(resource);\n\t\t} else {\n\t\t\tresource = resourceOrWorkingCopy.resource;\n\t\t\tworkingCopy = resourceOrWorkingCopy;\n\t\t}\n\n\t\tlet workingCopyResolve: Promise<void>;\n\t\tlet didCreateWorkingCopy = false;\n\n\t\tconst resolveOptions: IStoredFileWorkingCopyResolveOptions = {\n\t\t\tcontents: options?.contents,\n\t\t\tforceReadFromFile: options?.reload?.force,\n\t\t\tlimits: options?.limits\n\t\t};\n\n\t\t// Working copy exists\n\t\tif (workingCopy) {\n\n\t\t\t// Always reload if contents are provided\n\t\t\tif (options?.contents) {\n\t\t\t\tworkingCopyResolve = workingCopy.resolve(resolveOptions);\n\t\t\t}\n\n\t\t\t// Reload async or sync based on options\n\t\t\telse if (options?.reload) {\n\n\t\t\t\t// Async reload: trigger a reload but return immediately\n\t\t\t\tif (options.reload.async) {\n\t\t\t\t\tworkingCopyResolve = Promise.resolve();\n\t\t\t\t\t(async () => {\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tawait workingCopy.resolve(resolveOptions);\n\t\t\t\t\t\t} catch (error) {\n\t\t\t\t\t\t\tonUnexpectedError(error);\n\t\t\t\t\t\t}\n\t\t\t\t\t})();\n\t\t\t\t}\n\n\t\t\t\t// Sync reload: do not return until working copy reloaded\n\t\t\t\telse {\n\t\t\t\t\tworkingCopyResolve = workingCopy.resolve(resolveOptions);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Do not reload\n\t\t\telse {\n\t\t\t\tworkingCopyResolve = Promise.resolve();\n\t\t\t}\n\t\t}\n\n\t\t// Stored file working copy does not exist\n\t\telse {\n\t\t\tdidCreateWorkingCopy = true;\n\n\t\t\tworkingCopy = new StoredFileWorkingCopy(\n\t\t\t\tthis.workingCopyTypeId,\n\t\t\t\tresource,\n\t\t\t\tthis.labelService.getUriBasenameLabel(resource),\n\t\t\t\tthis.modelFactory,\n\t\t\t\tasync options => { await this.resolve(resource, { ...options, reload: { async: false } }); },\n\t\t\t\tthis.fileService, this.logService, this.workingCopyFileService, this.filesConfigurationService,\n\t\t\t\tthis.workingCopyBackupService, this.workingCopyService, this.notificationService, this.workingCopyEditorService,\n\t\t\t\tthis.editorService, this.elevatedFileService, this.progressService\n\t\t\t);\n\n\t\t\tworkingCopyResolve = workingCopy.resolve(resolveOptions);\n\n\t\t\tthis.registerWorkingCopy(workingCopy);\n\t\t}\n\n\t\t// Store pending resolve to avoid race conditions\n\t\tthis.mapResourceToPendingWorkingCopyResolve.set(resource, workingCopyResolve);\n\n\t\t// Make known to manager (if not already known)\n\t\tthis.add(resource, workingCopy);\n\n\t\t// Emit some events if we created the working copy\n\t\tif (didCreateWorkingCopy) {\n\n\t\t\t// If the working copy is dirty right from the beginning,\n\t\t\t// make sure to emit this as an event\n\t\t\tif (workingCopy.isDirty()) {\n\t\t\t\tthis._onDidChangeDirty.fire(workingCopy);\n\t\t\t}\n\t\t}\n\n\t\ttry {\n\t\t\tawait workingCopyResolve;\n\t\t} catch (error) {\n\n\t\t\t// Automatically dispose the working copy if we created\n\t\t\t// it because we cannot dispose a working copy we do not\n\t\t\t// own (https://github.com/microsoft/vscode/issues/138850)\n\t\t\tif (didCreateWorkingCopy) {\n\t\t\t\tworkingCopy.dispose();\n\t\t\t}\n\n\t\t\tthrow error;\n\t\t} finally {\n\n\t\t\t// Remove from pending resolves\n\t\t\tthis.mapResourceToPendingWorkingCopyResolve.delete(resource);\n\t\t}\n\n\t\t// Stored file working copy can be dirty if a backup was restored, so we make sure to\n\t\t// have this event delivered if we created the working copy here\n\t\tif (didCreateWorkingCopy && workingCopy.isDirty()) {\n\t\t\tthis._onDidChangeDirty.fire(workingCopy);\n\t\t}\n\n\t\treturn workingCopy;\n\t}\n\n\tprivate joinPendingResolves(resource: URI): Promise<void> | undefined {\n\t\tconst pendingWorkingCopyResolve = this.mapResourceToPendingWorkingCopyResolve.get(resource);\n\t\tif (!pendingWorkingCopyResolve) {\n\t\t\treturn;\n\t\t}\n\n\t\treturn this.doJoinPendingResolves(resource);\n\t}\n\n\tprivate async doJoinPendingResolves(resource: URI): Promise<void> {\n\n\t\t// While we have pending working copy resolves, ensure\n\t\t// to await the last one finishing before returning.\n\t\t// This prevents a race when multiple clients await\n\t\t// the pending resolve and then all trigger the resolve\n\t\t// at the same time.\n\t\tlet currentWorkingCopyResolve: Promise<void> | undefined;\n\t\twhile (this.mapResourceToPendingWorkingCopyResolve.has(resource)) {\n\t\t\tconst nextPendingWorkingCopyResolve = this.mapResourceToPendingWorkingCopyResolve.get(resource);\n\t\t\tif (nextPendingWorkingCopyResolve === currentWorkingCopyResolve) {\n\t\t\t\treturn; // already awaited on - return\n\t\t\t}\n\n\t\t\tcurrentWorkingCopyResolve = nextPendingWorkingCopyResolve;\n\t\t\ttry {\n\t\t\t\tawait nextPendingWorkingCopyResolve;\n\t\t\t} catch (error) {\n\t\t\t\t// ignore any error here, it will bubble to the original requestor\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate registerWorkingCopy(workingCopy: IStoredFileWorkingCopy<M>): void {\n\n\t\t// Install working copy listeners\n\t\tconst workingCopyListeners = new DisposableStore();\n\t\tworkingCopyListeners.add(workingCopy.onDidResolve(() => this._onDidResolve.fire(workingCopy)));\n\t\tworkingCopyListeners.add(workingCopy.onDidChangeDirty(() => this._onDidChangeDirty.fire(workingCopy)));\n\t\tworkingCopyListeners.add(workingCopy.onDidChangeReadonly(() => this._onDidChangeReadonly.fire(workingCopy)));\n\t\tworkingCopyListeners.add(workingCopy.onDidChangeOrphaned(() => this._onDidChangeOrphaned.fire(workingCopy)));\n\t\tworkingCopyListeners.add(workingCopy.onDidSaveError(() => this._onDidSaveError.fire(workingCopy)));\n\t\tworkingCopyListeners.add(workingCopy.onDidSave(e => this._onDidSave.fire({ workingCopy, ...e })));\n\t\tworkingCopyListeners.add(workingCopy.onDidRevert(() => this._onDidRevert.fire(workingCopy)));\n\n\t\t// Keep for disposal\n\t\tthis.mapResourceToWorkingCopyListeners.set(workingCopy.resource, workingCopyListeners);\n\t}\n\n\tprotected override remove(resource: URI): boolean {\n\t\tconst removed = super.remove(resource);\n\n\t\t// Dispose any existing working copy listeners\n\t\tconst workingCopyListener = this.mapResourceToWorkingCopyListeners.get(resource);\n\t\tif (workingCopyListener) {\n\t\t\tdispose(workingCopyListener);\n\t\t\tthis.mapResourceToWorkingCopyListeners.delete(resource);\n\t\t}\n\n\t\tif (removed) {\n\t\t\tthis._onDidRemove.fire(resource);\n\t\t}\n\n\t\treturn removed;\n\t}\n\n\t//#endregion\n\n\t//#region Lifecycle\n\n\tcanDispose(workingCopy: IStoredFileWorkingCopy<M>): true | Promise<true> {\n\n\t\t// Quick return if working copy already disposed or not dirty and not resolving\n\t\tif (\n\t\t\tworkingCopy.isDisposed() ||\n\t\t\t(!this.mapResourceToPendingWorkingCopyResolve.has(workingCopy.resource) && !workingCopy.isDirty())\n\t\t) {\n\t\t\treturn true;\n\t\t}\n\n\t\t// Promise based return in all other cases\n\t\treturn this.doCanDispose(workingCopy);\n\t}\n\n\tprivate async doCanDispose(workingCopy: IStoredFileWorkingCopy<M>): Promise<true> {\n\n\t\t// Await any pending resolves first before proceeding\n\t\tconst pendingResolve = this.joinPendingResolves(workingCopy.resource);\n\t\tif (pendingResolve) {\n\t\t\tawait pendingResolve;\n\n\t\t\treturn this.canDispose(workingCopy);\n\t\t}\n\n\t\t// Dirty working copy: we do not allow to dispose dirty working copys\n\t\t// to prevent data loss cases. dirty working copys can only be disposed when\n\t\t// they are either saved or reverted\n\t\tif (workingCopy.isDirty()) {\n\t\t\tawait Event.toPromise(workingCopy.onDidChangeDirty);\n\n\t\t\treturn this.canDispose(workingCopy);\n\t\t}\n\n\t\treturn true;\n\t}\n\n\toverride dispose(): void {\n\t\tsuper.dispose();\n\n\t\t// Clear pending working copy resolves\n\t\tthis.mapResourceToPendingWorkingCopyResolve.clear();\n\n\t\t// Dispose the working copy change listeners\n\t\tdispose(this.mapResourceToWorkingCopyListeners.values());\n\t\tthis.mapResourceToWorkingCopyListeners.clear();\n\t}\n\n\t//#endregion\n}\n"],
  "mappings": "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",
  "names": ["options"]
}
