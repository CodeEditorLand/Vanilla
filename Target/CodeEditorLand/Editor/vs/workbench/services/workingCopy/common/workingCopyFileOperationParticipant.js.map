{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/workingCopy/common/workingCopyFileOperationParticipant.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport type { CancellationToken } from \"../../../../base/common/cancellation.js\";\nimport {\n\tDisposable,\n\ttype IDisposable,\n\ttoDisposable,\n} from \"../../../../base/common/lifecycle.js\";\nimport { LinkedList } from \"../../../../base/common/linkedList.js\";\nimport { IConfigurationService } from \"../../../../platform/configuration/common/configuration.js\";\nimport type { FileOperation } from \"../../../../platform/files/common/files.js\";\nimport { ILogService } from \"../../../../platform/log/common/log.js\";\nimport type {\n\tIFileOperationUndoRedoInfo,\n\tIWorkingCopyFileOperationParticipant,\n\tSourceTargetPair,\n} from \"./workingCopyFileService.js\";\n\nexport class WorkingCopyFileOperationParticipant extends Disposable {\n\tprivate readonly participants =\n\t\tnew LinkedList<IWorkingCopyFileOperationParticipant>();\n\n\tconstructor(\n\t\t@ILogService private readonly logService: ILogService,\n\t\t@IConfigurationService private readonly configurationService: IConfigurationService\n\t) {\n\t\tsuper();\n\t}\n\n\taddFileOperationParticipant(\n\t\tparticipant: IWorkingCopyFileOperationParticipant,\n\t): IDisposable {\n\t\tconst remove = this.participants.push(participant);\n\n\t\treturn toDisposable(() => remove());\n\t}\n\n\tasync participate(\n\t\tfiles: SourceTargetPair[],\n\t\toperation: FileOperation,\n\t\tundoInfo: IFileOperationUndoRedoInfo | undefined,\n\t\ttoken: CancellationToken,\n\t): Promise<void> {\n\t\tconst timeout = this.configurationService.getValue<number>(\n\t\t\t\"files.participants.timeout\",\n\t\t);\n\t\tif (typeof timeout !== \"number\" || timeout <= 0) {\n\t\t\treturn; // disabled\n\t\t}\n\n\t\t// For each participant\n\t\tfor (const participant of this.participants) {\n\t\t\ttry {\n\t\t\t\tawait participant.participate(\n\t\t\t\t\tfiles,\n\t\t\t\t\toperation,\n\t\t\t\t\tundoInfo,\n\t\t\t\t\ttimeout,\n\t\t\t\t\ttoken,\n\t\t\t\t);\n\t\t\t} catch (err) {\n\t\t\t\tthis.logService.warn(err);\n\t\t\t}\n\t\t}\n\t}\n\n\toverride dispose(): void {\n\t\tthis.participants.clear();\n\n\t\tsuper.dispose();\n\t}\n}\n"],
  "mappings": ";;;;;;;;;;;;AAMA;AAAA,EACC;AAAA,EAEA;AAAA,OACM;AACP,SAAS,kBAAkB;AAC3B,SAAS,6BAA6B;AAEtC,SAAS,mBAAmB;AAOrB,IAAM,sCAAN,cAAkD,WAAW;AAAA,EAInE,YAC+B,YACU,sBACvC;AACD,UAAM;AAHwB;AACU;AAAA,EAGzC;AAAA,EA9BD,OAqBoE;AAAA;AAAA;AAAA,EAClD,eAChB,IAAI,WAAiD;AAAA,EAStD,4BACC,aACc;AACd,UAAM,SAAS,KAAK,aAAa,KAAK,WAAW;AAEjD,WAAO,aAAa,MAAM,OAAO,CAAC;AAAA,EACnC;AAAA,EAEA,MAAM,YACL,OACA,WACA,UACA,OACgB;AAChB,UAAM,UAAU,KAAK,qBAAqB;AAAA,MACzC;AAAA,IACD;AACA,QAAI,OAAO,YAAY,YAAY,WAAW,GAAG;AAChD;AAAA,IACD;AAGA,eAAW,eAAe,KAAK,cAAc;AAC5C,UAAI;AACH,cAAM,YAAY;AAAA,UACjB;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,QACD;AAAA,MACD,SAAS,KAAK;AACb,aAAK,WAAW,KAAK,GAAG;AAAA,MACzB;AAAA,IACD;AAAA,EACD;AAAA,EAES,UAAgB;AACxB,SAAK,aAAa,MAAM;AAExB,UAAM,QAAQ;AAAA,EACf;AACD;AArDa,sCAAN;AAAA,EAKJ;AAAA,EACA;AAAA,GANU;",
  "names": []
}
