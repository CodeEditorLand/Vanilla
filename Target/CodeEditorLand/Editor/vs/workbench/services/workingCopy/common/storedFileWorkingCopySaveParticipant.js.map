{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/workingCopy/common/storedFileWorkingCopySaveParticipant.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { raceCancellation } from '../../../../base/common/async.js';\nimport { CancellationToken } from '../../../../base/common/cancellation.js';\nimport { ILogService } from '../../../../platform/log/common/log.js';\nimport { IProgress, IProgressStep } from '../../../../platform/progress/common/progress.js';\nimport { IDisposable, Disposable, toDisposable } from '../../../../base/common/lifecycle.js';\nimport { insert } from '../../../../base/common/arrays.js';\nimport { IStoredFileWorkingCopySaveParticipant, IStoredFileWorkingCopySaveParticipantContext } from './workingCopyFileService.js';\nimport { IStoredFileWorkingCopy, IStoredFileWorkingCopyModel } from './storedFileWorkingCopy.js';\n\nexport class StoredFileWorkingCopySaveParticipant extends Disposable {\n\n\tprivate readonly saveParticipants: IStoredFileWorkingCopySaveParticipant[] = [];\n\n\tget length(): number { return this.saveParticipants.length; }\n\n\tconstructor(\n\t\t@ILogService private readonly logService: ILogService\n\t) {\n\t\tsuper();\n\t}\n\n\taddSaveParticipant(participant: IStoredFileWorkingCopySaveParticipant): IDisposable {\n\t\tconst remove = insert(this.saveParticipants, participant);\n\n\t\treturn toDisposable(() => remove());\n\t}\n\n\tasync participate(workingCopy: IStoredFileWorkingCopy<IStoredFileWorkingCopyModel>, context: IStoredFileWorkingCopySaveParticipantContext, progress: IProgress<IProgressStep>, token: CancellationToken): Promise<void> {\n\n\t\t// undoStop before participation\n\t\tworkingCopy.model?.pushStackElement();\n\n\t\tfor (const saveParticipant of this.saveParticipants) {\n\t\t\tif (token.isCancellationRequested || workingCopy.isDisposed()) {\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tconst promise = saveParticipant.participate(workingCopy, context, progress, token);\n\t\t\t\tawait raceCancellation(promise, token);\n\t\t\t} catch (err) {\n\t\t\t\tthis.logService.warn(err);\n\t\t\t}\n\t\t}\n\n\t\t// undoStop after participation\n\t\tworkingCopy.model?.pushStackElement();\n\t}\n\n\toverride dispose(): void {\n\t\tthis.saveParticipants.splice(0, this.saveParticipants.length);\n\n\t\tsuper.dispose();\n\t}\n}\n"],
  "mappings": ";;;;;;;;;;;;AAKA,SAAS,wBAAwB;AACjC,SAAS,yBAAyB;AAClC,SAAS,mBAAmB;AAC5B,SAAS,WAAW,qBAAqB;AACzC,SAAS,aAAa,YAAY,oBAAoB;AACtD,SAAS,cAAc;AACvB,SAAS,uCAAuC,oDAAoD;AACpG,SAAS,wBAAwB,mCAAmC;AAE7D,IAAM,uCAAN,cAAmD,WAAW;AAAA,EAMpE,YAC+B,YAC7B;AACD,UAAM;AAFwB;AAAA,EAG/B;AAAA,EAxBD,OAcqE;AAAA;AAAA;AAAA,EAEnD,mBAA4D,CAAC;AAAA,EAE9E,IAAI,SAAiB;AAAE,WAAO,KAAK,iBAAiB;AAAA,EAAQ;AAAA,EAQ5D,mBAAmB,aAAiE;AACnF,UAAM,SAAS,OAAO,KAAK,kBAAkB,WAAW;AAExD,WAAO,aAAa,MAAM,OAAO,CAAC;AAAA,EACnC;AAAA,EAEA,MAAM,YAAY,aAAkE,SAAuD,UAAoC,OAAyC;AAGvN,gBAAY,OAAO,iBAAiB;AAEpC,eAAW,mBAAmB,KAAK,kBAAkB;AACpD,UAAI,MAAM,2BAA2B,YAAY,WAAW,GAAG;AAC9D;AAAA,MACD;AAEA,UAAI;AACH,cAAM,UAAU,gBAAgB,YAAY,aAAa,SAAS,UAAU,KAAK;AACjF,cAAM,iBAAiB,SAAS,KAAK;AAAA,MACtC,SAAS,KAAK;AACb,aAAK,WAAW,KAAK,GAAG;AAAA,MACzB;AAAA,IACD;AAGA,gBAAY,OAAO,iBAAiB;AAAA,EACrC;AAAA,EAES,UAAgB;AACxB,SAAK,iBAAiB,OAAO,GAAG,KAAK,iBAAiB,MAAM;AAE5D,UAAM,QAAQ;AAAA,EACf;AACD;AA7Ca,uCAAN;AAAA,EAOJ;AAAA,GAPU;",
  "names": []
}
