{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/workingCopy/common/untitledFileWorkingCopy.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Event, Emitter } from '../../../../base/common/event.js';\nimport { VSBufferReadableStream } from '../../../../base/common/buffer.js';\nimport { IWorkingCopyBackup, IWorkingCopySaveEvent, WorkingCopyCapabilities } from './workingCopy.js';\nimport { IFileWorkingCopy, IFileWorkingCopyModel, IFileWorkingCopyModelFactory, SnapshotContext } from './fileWorkingCopy.js';\nimport { Disposable } from '../../../../base/common/lifecycle.js';\nimport { URI } from '../../../../base/common/uri.js';\nimport { IWorkingCopyService } from './workingCopyService.js';\nimport { CancellationToken } from '../../../../base/common/cancellation.js';\nimport { ISaveOptions } from '../../../common/editor.js';\nimport { raceCancellation } from '../../../../base/common/async.js';\nimport { ILogService } from '../../../../platform/log/common/log.js';\nimport { IWorkingCopyBackupService } from './workingCopyBackup.js';\nimport { emptyStream } from '../../../../base/common/stream.js';\n\n/**\n * Untitled file specific working copy model factory.\n */\nexport interface IUntitledFileWorkingCopyModelFactory<M extends IUntitledFileWorkingCopyModel> extends IFileWorkingCopyModelFactory<M> { }\n\n/**\n * The underlying model of a untitled file working copy provides\n * some methods for the untitled file working copy to function.\n * The model is typically only available after the working copy\n * has been resolved via it's `resolve()` method.\n */\nexport interface IUntitledFileWorkingCopyModel extends IFileWorkingCopyModel {\n\n\treadonly onDidChangeContent: Event<IUntitledFileWorkingCopyModelContentChangedEvent>;\n}\n\nexport interface IUntitledFileWorkingCopyModelContentChangedEvent {\n\n\t/**\n\t * Flag that indicates that the content change should\n\t * clear the dirty/modified flags, e.g. because the contents are\n\t * back to being empty or back to an initial state that\n\t * should not be considered as modified.\n\t */\n\treadonly isInitial: boolean;\n}\n\nexport interface IUntitledFileWorkingCopy<M extends IUntitledFileWorkingCopyModel> extends IFileWorkingCopy<M> {\n\n\t/**\n\t * Whether this untitled file working copy model has an associated file path.\n\t */\n\treadonly hasAssociatedFilePath: boolean;\n\n\t/**\n\t * Whether we have a resolved model or not.\n\t */\n\tisResolved(): this is IResolvedUntitledFileWorkingCopy<M>;\n}\n\nexport interface IResolvedUntitledFileWorkingCopy<M extends IUntitledFileWorkingCopyModel> extends IUntitledFileWorkingCopy<M> {\n\n\t/**\n\t * A resolved untitled file working copy has a resolved model.\n\t */\n\treadonly model: M;\n}\n\nexport interface IUntitledFileWorkingCopySaveDelegate<M extends IUntitledFileWorkingCopyModel> {\n\n\t/**\n\t * A delegate to enable saving of untitled file working copies.\n\t */\n\t(workingCopy: IUntitledFileWorkingCopy<M>, options?: ISaveOptions): Promise<boolean>;\n}\n\nexport interface IUntitledFileWorkingCopyInitialContents {\n\n\t/**\n\t * The initial contents of the untitled file working copy.\n\t */\n\treadonly value: VSBufferReadableStream;\n\n\t/**\n\t * If not provided, the untitled file working copy will be marked\n\t * modified by default given initial contents are provided.\n\t *\n\t * Note: if the untitled file working copy has an associated path\n\t * the modified state will always be set.\n\t */\n\treadonly markModified?: boolean;\n}\n\nexport class UntitledFileWorkingCopy<M extends IUntitledFileWorkingCopyModel> extends Disposable implements IUntitledFileWorkingCopy<M> {\n\n\treadonly capabilities = this.isScratchpad ? WorkingCopyCapabilities.Untitled | WorkingCopyCapabilities.Scratchpad : WorkingCopyCapabilities.Untitled;\n\n\tprivate _model: M | undefined = undefined;\n\tget model(): M | undefined { return this._model; }\n\n\t//#region Events\n\n\tprivate readonly _onDidChangeContent = this._register(new Emitter<void>());\n\treadonly onDidChangeContent = this._onDidChangeContent.event;\n\n\tprivate readonly _onDidChangeDirty = this._register(new Emitter<void>());\n\treadonly onDidChangeDirty = this._onDidChangeDirty.event;\n\n\tprivate readonly _onDidSave = this._register(new Emitter<IWorkingCopySaveEvent>());\n\treadonly onDidSave = this._onDidSave.event;\n\n\tprivate readonly _onDidRevert = this._register(new Emitter<void>());\n\treadonly onDidRevert = this._onDidRevert.event;\n\n\tprivate readonly _onWillDispose = this._register(new Emitter<void>());\n\treadonly onWillDispose = this._onWillDispose.event;\n\n\t//#endregion\n\n\tconstructor(\n\t\treadonly typeId: string,\n\t\treadonly resource: URI,\n\t\treadonly name: string,\n\t\treadonly hasAssociatedFilePath: boolean,\n\t\tprivate readonly isScratchpad: boolean,\n\t\tprivate readonly initialContents: IUntitledFileWorkingCopyInitialContents | undefined,\n\t\tprivate readonly modelFactory: IUntitledFileWorkingCopyModelFactory<M>,\n\t\tprivate readonly saveDelegate: IUntitledFileWorkingCopySaveDelegate<M>,\n\t\t@IWorkingCopyService workingCopyService: IWorkingCopyService,\n\t\t@IWorkingCopyBackupService private readonly workingCopyBackupService: IWorkingCopyBackupService,\n\t\t@ILogService private readonly logService: ILogService\n\t) {\n\t\tsuper();\n\n\t\t// Make known to working copy service\n\t\tthis._register(workingCopyService.registerWorkingCopy(this));\n\t}\n\n\t//#region Dirty/Modified\n\n\tprivate modified = this.hasAssociatedFilePath || Boolean(this.initialContents && this.initialContents.markModified !== false);\n\n\tisDirty(): boolean {\n\t\treturn this.modified && !this.isScratchpad; // Scratchpad working copies are never dirty\n\t}\n\n\tisModified(): boolean {\n\t\treturn this.modified;\n\t}\n\n\tprivate setModified(modified: boolean): void {\n\t\tif (this.modified === modified) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.modified = modified;\n\t\tif (!this.isScratchpad) {\n\t\t\tthis._onDidChangeDirty.fire();\n\t\t}\n\t}\n\n\t//#endregion\n\n\n\t//#region Resolve\n\n\tasync resolve(): Promise<void> {\n\t\tthis.trace('resolve()');\n\n\t\tif (this.isResolved()) {\n\t\t\tthis.trace('resolve() - exit (already resolved)');\n\n\t\t\t// return early if the untitled file working copy is already\n\t\t\t// resolved assuming that the contents have meanwhile changed\n\t\t\t// in the underlying model. we only resolve untitled once.\n\t\t\treturn;\n\t\t}\n\n\t\tlet untitledContents: VSBufferReadableStream;\n\n\t\t// Check for backups or use initial value or empty\n\t\tconst backup = await this.workingCopyBackupService.resolve(this);\n\t\tif (backup) {\n\t\t\tthis.trace('resolve() - with backup');\n\n\t\t\tuntitledContents = backup.value;\n\t\t} else if (this.initialContents?.value) {\n\t\t\tthis.trace('resolve() - with initial contents');\n\n\t\t\tuntitledContents = this.initialContents.value;\n\t\t} else {\n\t\t\tthis.trace('resolve() - empty');\n\n\t\t\tuntitledContents = emptyStream();\n\t\t}\n\n\t\t// Create model\n\t\tawait this.doCreateModel(untitledContents);\n\n\t\t// Untitled associated to file path are modified right away as well as untitled with content\n\t\tthis.setModified(this.hasAssociatedFilePath || !!backup || Boolean(this.initialContents && this.initialContents.markModified !== false));\n\n\t\t// If we have initial contents, make sure to emit this\n\t\t// as the appropriate events to the outside.\n\t\tif (!!backup || this.initialContents) {\n\t\t\tthis._onDidChangeContent.fire();\n\t\t}\n\t}\n\n\tprivate async doCreateModel(contents: VSBufferReadableStream): Promise<void> {\n\t\tthis.trace('doCreateModel()');\n\n\t\t// Create model and dispose it when we get disposed\n\t\tthis._model = this._register(await this.modelFactory.createModel(this.resource, contents, CancellationToken.None));\n\n\t\t// Model listeners\n\t\tthis.installModelListeners(this._model);\n\t}\n\n\tprivate installModelListeners(model: M): void {\n\n\t\t// Content Change\n\t\tthis._register(model.onDidChangeContent(e => this.onModelContentChanged(e)));\n\n\t\t// Lifecycle\n\t\tthis._register(model.onWillDispose(() => this.dispose()));\n\t}\n\n\tprivate onModelContentChanged(e: IUntitledFileWorkingCopyModelContentChangedEvent): void {\n\n\t\t// Mark the untitled file working copy as non-modified once its\n\t\t// in case provided by the change event and in case we do not\n\t\t// have an associated path set\n\t\tif (!this.hasAssociatedFilePath && e.isInitial) {\n\t\t\tthis.setModified(false);\n\t\t}\n\n\t\t// Turn modified otherwise\n\t\telse {\n\t\t\tthis.setModified(true);\n\t\t}\n\n\t\t// Emit as general content change event\n\t\tthis._onDidChangeContent.fire();\n\t}\n\n\tisResolved(): this is IResolvedUntitledFileWorkingCopy<M> {\n\t\treturn !!this.model;\n\t}\n\n\t//#endregion\n\n\n\t//#region Backup\n\n\tget backupDelay(): number | undefined {\n\t\treturn this.model?.configuration?.backupDelay;\n\t}\n\n\tasync backup(token: CancellationToken): Promise<IWorkingCopyBackup> {\n\t\tlet content: VSBufferReadableStream | undefined = undefined;\n\n\t\t// Make sure to check whether this working copy has been\n\t\t// resolved or not and fallback to the initial value -\n\t\t// if any - to prevent backing up an unresolved working\n\t\t// copy and loosing the initial value.\n\t\tif (this.isResolved()) {\n\t\t\tcontent = await raceCancellation(this.model.snapshot(SnapshotContext.Backup, token), token);\n\t\t} else if (this.initialContents) {\n\t\t\tcontent = this.initialContents.value;\n\t\t}\n\n\t\treturn { content };\n\t}\n\n\t//#endregion\n\n\n\t//#region Save\n\n\tasync save(options?: ISaveOptions): Promise<boolean> {\n\t\tthis.trace('save()');\n\n\t\tconst result = await this.saveDelegate(this, options);\n\n\t\t// Emit Save Event\n\t\tif (result) {\n\t\t\tthis._onDidSave.fire({ reason: options?.reason, source: options?.source });\n\t\t}\n\n\t\treturn result;\n\t}\n\n\t//#endregion\n\n\n\t//#region Revert\n\n\tasync revert(): Promise<void> {\n\t\tthis.trace('revert()');\n\n\t\t// No longer modified\n\t\tthis.setModified(false);\n\n\t\t// Emit as event\n\t\tthis._onDidRevert.fire();\n\n\t\t// A reverted untitled file working copy is invalid\n\t\t// because it has no actual source on disk to revert to.\n\t\t// As such we dispose the model.\n\t\tthis.dispose();\n\t}\n\n\t//#endregion\n\n\toverride dispose(): void {\n\t\tthis.trace('dispose()');\n\n\t\tthis._onWillDispose.fire();\n\n\t\tsuper.dispose();\n\t}\n\n\tprivate trace(msg: string): void {\n\t\tthis.logService.trace(`[untitled file working copy] ${msg}`, this.resource.toString(), this.typeId);\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
