var c=Object.defineProperty;var v=Object.getOwnPropertyDescriptor;var p=(n,t,i,o)=>{for(var e=o>1?void 0:o?v(t,i):t,s=n.length-1,r;s>=0;s--)(r=n[s])&&(e=(o?r(t,i,e):r(e))||e);return o&&e&&c(t,i,e),e},d=(n,t)=>(i,o)=>t(i,o,n);import{timeout as f}from"../../../../base/common/async.js";import{CancellationToken as D}from"../../../../base/common/cancellation.js";import{Emitter as l}from"../../../../base/common/event.js";import{Disposable as g}from"../../../../base/common/lifecycle.js";import{FileChangeType as h,IFileService as C}from"../../../../platform/files/common/files.js";let a=class extends g{constructor(i,o){super();this.resource=i;this.fileService=o;this._register(this.fileService.onDidFilesChange(e=>this.onDidFilesChange(e)))}_onDidChangeOrphaned=this._register(new l);onDidChangeOrphaned=this._onDidChangeOrphaned.event;orphaned=!1;isOrphaned(){return this.orphaned}async onDidFilesChange(i){let o=!1,e;if(this.orphaned?i.contains(this.resource,h.ADDED)&&(e=!1,o=!0):i.contains(this.resource,h.DELETED)&&(e=!0,o=!0),o&&this.orphaned!==e){let s=!1;e&&(await f(100,D.None),this.isDisposed()?s=!0:s=!await this.fileService.exists(this.resource)),this.orphaned!==s&&!this.isDisposed()&&this.setOrphaned(s)}}setOrphaned(i){this.orphaned!==i&&(this.orphaned=i,this._onDidChangeOrphaned.fire())}_onWillDispose=this._register(new l);onWillDispose=this._onWillDispose.event;isDisposed(){return this._store.isDisposed}dispose(){this.orphaned=!1,this._onWillDispose.fire(),super.dispose()}isModified(){return this.isDirty()}};a=p([d(1,C)],a);export{a as ResourceWorkingCopy};
