{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/workingCopy/common/workingCopyBackup.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { createDecorator } from '../../../../platform/instantiation/common/instantiation.js';\nimport { VSBufferReadable, VSBufferReadableStream } from '../../../../base/common/buffer.js';\nimport { CancellationToken } from '../../../../base/common/cancellation.js';\nimport { IWorkingCopyBackupMeta, IWorkingCopyIdentifier } from './workingCopy.js';\n\nexport const IWorkingCopyBackupService = createDecorator<IWorkingCopyBackupService>('workingCopyBackupService');\n\n/**\n * A resolved working copy backup carries the backup value\n * as well as associated metadata with it.\n */\nexport interface IResolvedWorkingCopyBackup<T extends IWorkingCopyBackupMeta> {\n\n\t/**\n\t * The content of the working copy backup.\n\t */\n\treadonly value: VSBufferReadableStream;\n\n\t/**\n\t * Additional metadata that is associated with\n\t * the working copy backup.\n\t */\n\treadonly meta?: T;\n}\n\n/**\n * The working copy backup service is the main service to handle backups\n * for working copies.\n * Methods allow to persist and resolve working copy backups from the file\n * system.\n */\nexport interface IWorkingCopyBackupService {\n\n\treadonly _serviceBrand: undefined;\n\n\t/**\n\t * Finds out if there are any working copy backups stored.\n\t */\n\thasBackups(): Promise<boolean>;\n\n\t/**\n\t * Finds out if a working copy backup with the given identifier\n\t * and optional version exists.\n\t *\n\t * Note: if the backup service has not been initialized yet, this may return\n\t * the wrong result. Always use `resolve()` if you can do a long running\n\t * operation.\n\t */\n\thasBackupSync(identifier: IWorkingCopyIdentifier, versionId?: number): boolean;\n\n\t/**\n\t * Gets a list of working copy backups for the current workspace.\n\t */\n\tgetBackups(): Promise<readonly IWorkingCopyIdentifier[]>;\n\n\t/**\n\t * Resolves the working copy backup for the given identifier if that exists.\n\t */\n\tresolve<T extends IWorkingCopyBackupMeta>(identifier: IWorkingCopyIdentifier): Promise<IResolvedWorkingCopyBackup<T> | undefined>;\n\n\t/**\n\t * Stores a new working copy backup for the given identifier.\n\t */\n\tbackup(identifier: IWorkingCopyIdentifier, content?: VSBufferReadable | VSBufferReadableStream, versionId?: number, meta?: IWorkingCopyBackupMeta, token?: CancellationToken): Promise<void>;\n\n\t/**\n\t * Discards the working copy backup associated with the identifier if it exists.\n\t */\n\tdiscardBackup(identifier: IWorkingCopyIdentifier, token?: CancellationToken): Promise<void>;\n\n\t/**\n\t * Discards all working copy backups.\n\t *\n\t * The optional set of identifiers in the filter can be\n\t * provided to discard all but the provided ones.\n\t */\n\tdiscardBackups(filter?: { except: IWorkingCopyIdentifier[] }): Promise<void>;\n}\n"],
  "mappings": "AAKA,SAAS,uBAAuB;AAChC,SAAS,kBAAkB,8BAA8B;AACzD,SAAS,yBAAyB;AAClC,SAAS,wBAAwB,8BAA8B;AAExD,MAAM,4BAA4B,gBAA2C,0BAA0B;",
  "names": []
}
