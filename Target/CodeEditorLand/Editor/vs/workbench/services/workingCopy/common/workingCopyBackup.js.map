{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/workingCopy/common/workingCopyBackup.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport type {\n\tVSBufferReadable,\n\tVSBufferReadableStream,\n} from \"../../../../base/common/buffer.js\";\nimport type { CancellationToken } from \"../../../../base/common/cancellation.js\";\nimport { createDecorator } from \"../../../../platform/instantiation/common/instantiation.js\";\nimport type {\n\tIWorkingCopyBackupMeta,\n\tIWorkingCopyIdentifier,\n} from \"./workingCopy.js\";\n\nexport const IWorkingCopyBackupService =\n\tcreateDecorator<IWorkingCopyBackupService>(\"workingCopyBackupService\");\n\n/**\n * A resolved working copy backup carries the backup value\n * as well as associated metadata with it.\n */\nexport interface IResolvedWorkingCopyBackup<T extends IWorkingCopyBackupMeta> {\n\t/**\n\t * The content of the working copy backup.\n\t */\n\treadonly value: VSBufferReadableStream;\n\n\t/**\n\t * Additional metadata that is associated with\n\t * the working copy backup.\n\t */\n\treadonly meta?: T;\n}\n\n/**\n * The working copy backup service is the main service to handle backups\n * for working copies.\n * Methods allow to persist and resolve working copy backups from the file\n * system.\n */\nexport interface IWorkingCopyBackupService {\n\treadonly _serviceBrand: undefined;\n\n\t/**\n\t * Finds out if there are any working copy backups stored.\n\t */\n\thasBackups(): Promise<boolean>;\n\n\t/**\n\t * Finds out if a working copy backup with the given identifier\n\t * and optional version exists.\n\t *\n\t * Note: if the backup service has not been initialized yet, this may return\n\t * the wrong result. Always use `resolve()` if you can do a long running\n\t * operation.\n\t */\n\thasBackupSync(\n\t\tidentifier: IWorkingCopyIdentifier,\n\t\tversionId?: number,\n\t): boolean;\n\n\t/**\n\t * Gets a list of working copy backups for the current workspace.\n\t */\n\tgetBackups(): Promise<readonly IWorkingCopyIdentifier[]>;\n\n\t/**\n\t * Resolves the working copy backup for the given identifier if that exists.\n\t */\n\tresolve<T extends IWorkingCopyBackupMeta>(\n\t\tidentifier: IWorkingCopyIdentifier,\n\t): Promise<IResolvedWorkingCopyBackup<T> | undefined>;\n\n\t/**\n\t * Stores a new working copy backup for the given identifier.\n\t */\n\tbackup(\n\t\tidentifier: IWorkingCopyIdentifier,\n\t\tcontent?: VSBufferReadable | VSBufferReadableStream,\n\t\tversionId?: number,\n\t\tmeta?: IWorkingCopyBackupMeta,\n\t\ttoken?: CancellationToken,\n\t): Promise<void>;\n\n\t/**\n\t * Discards the working copy backup associated with the identifier if it exists.\n\t */\n\tdiscardBackup(\n\t\tidentifier: IWorkingCopyIdentifier,\n\t\ttoken?: CancellationToken,\n\t): Promise<void>;\n\n\t/**\n\t * Discards all working copy backups.\n\t *\n\t * The optional set of identifiers in the filter can be\n\t * provided to discard all but the provided ones.\n\t */\n\tdiscardBackups(filter?: {\n\t\texcept: IWorkingCopyIdentifier[];\n\t}): Promise<void>;\n}\n"],
  "mappings": "AAUA,SAAS,uBAAuB;AAMzB,MAAM,4BACZ,gBAA2C,0BAA0B;",
  "names": []
}
