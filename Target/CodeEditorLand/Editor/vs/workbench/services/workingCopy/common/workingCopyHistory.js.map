{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/workingCopy/common/workingCopyHistory.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Event } from '../../../../base/common/event.js';\nimport { CancellationToken } from '../../../../base/common/cancellation.js';\nimport { URI } from '../../../../base/common/uri.js';\nimport { createDecorator } from '../../../../platform/instantiation/common/instantiation.js';\nimport { SaveSource } from '../../../common/editor.js';\n\nexport const IWorkingCopyHistoryService = createDecorator<IWorkingCopyHistoryService>('workingCopyHistoryService');\n\nexport interface IWorkingCopyHistoryEvent {\n\n\t/**\n\t * The entry this event is about.\n\t */\n\treadonly entry: IWorkingCopyHistoryEntry;\n}\n\nexport interface IWorkingCopyHistoryEntry {\n\n\t/**\n\t * Unique identifier of this entry for the working copy.\n\t */\n\treadonly id: string;\n\n\t/**\n\t * The associated working copy of this entry.\n\t */\n\treadonly workingCopy: {\n\t\treadonly resource: URI;\n\t\treadonly name: string;\n\t};\n\n\t/**\n\t * The location on disk of this history entry.\n\t */\n\treadonly location: URI;\n\n\t/**\n\t * The time when this history entry was created.\n\t */\n\ttimestamp: number;\n\n\t/**\n\t * Associated source with the history entry.\n\t */\n\tsource: SaveSource;\n\n\t/**\n\t * Optional additional metadata associated with the\n\t * source that can help to describe the source.\n\t */\n\tsourceDescription: string | undefined;\n}\n\nexport interface IWorkingCopyHistoryEntryDescriptor {\n\n\t/**\n\t * The associated resource of this history entry.\n\t */\n\treadonly resource: URI;\n\n\t/**\n\t * Optional associated timestamp to use for the\n\t * history entry. If not provided, the current\n\t * time will be used.\n\t */\n\treadonly timestamp?: number;\n\n\t/**\n\t * Optional source why the entry was added.\n\t */\n\treadonly source?: SaveSource;\n}\n\nexport interface IWorkingCopyHistoryService {\n\n\treadonly _serviceBrand: undefined;\n\n\t/**\n\t * An event when an entry is added to the history.\n\t */\n\tonDidAddEntry: Event<IWorkingCopyHistoryEvent>;\n\n\t/**\n\t * An event when an entry is changed in the history.\n\t */\n\tonDidChangeEntry: Event<IWorkingCopyHistoryEvent>;\n\n\t/**\n\t * An event when an entry is replaced in the history.\n\t */\n\tonDidReplaceEntry: Event<IWorkingCopyHistoryEvent>;\n\n\t/**\n\t * An event when an entry is removed from the history.\n\t */\n\tonDidRemoveEntry: Event<IWorkingCopyHistoryEvent>;\n\n\t/**\n\t * An event when entries are moved in history.\n\t */\n\tonDidMoveEntries: Event<void>;\n\n\t/**\n\t * An event when all entries are removed from the history.\n\t */\n\tonDidRemoveEntries: Event<void>;\n\n\t/**\n\t * Adds a new entry to the history for the given working copy\n\t * with an optional associated descriptor.\n\t */\n\taddEntry(descriptor: IWorkingCopyHistoryEntryDescriptor, token: CancellationToken): Promise<IWorkingCopyHistoryEntry | undefined>;\n\n\t/**\n\t * Updates an entry in the local history if found.\n\t */\n\tupdateEntry(entry: IWorkingCopyHistoryEntry, properties: { source: SaveSource }, token: CancellationToken): Promise<void>;\n\n\t/**\n\t * Removes an entry from the local history if found.\n\t */\n\tremoveEntry(entry: IWorkingCopyHistoryEntry, token: CancellationToken): Promise<boolean>;\n\n\t/**\n\t * Moves entries that either match the `source` or are a child\n\t * of `source` to the `target`.\n\t *\n\t * @returns a list of resources for entries that have moved.\n\t */\n\tmoveEntries(source: URI, target: URI): Promise<URI[]>;\n\n\t/**\n\t * Gets all history entries for the provided resource.\n\t */\n\tgetEntries(resource: URI, token: CancellationToken): Promise<readonly IWorkingCopyHistoryEntry[]>;\n\n\t/**\n\t * Returns all resources for which history entries exist.\n\t */\n\tgetAll(token: CancellationToken): Promise<readonly URI[]>;\n\n\t/**\n\t * Removes all entries from all of local history.\n\t */\n\tremoveAll(token: CancellationToken): Promise<void>;\n}\n\n/**\n * A limit on how many I/O operations we allow to run in parallel.\n * We do not want to spam the file system with too many requests\n * at the same time, so we limit to a maximum degree of parallellism.\n */\nexport const MAX_PARALLEL_HISTORY_IO_OPS = 20;\n"],
  "mappings": "AAKA,SAAS,aAAa;AACtB,SAAS,yBAAyB;AAClC,SAAS,WAAW;AACpB,SAAS,uBAAuB;AAChC,SAAS,kBAAkB;AAEpB,MAAM,6BAA6B,gBAA4C,2BAA2B;AAkJ1G,MAAM,8BAA8B;",
  "names": []
}
