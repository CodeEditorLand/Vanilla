{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/workingCopy/common/fileWorkingCopy.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IDisposable } from '../../../../base/common/lifecycle.js';\nimport { Event } from '../../../../base/common/event.js';\nimport { CancellationToken } from '../../../../base/common/cancellation.js';\nimport { VSBufferReadableStream } from '../../../../base/common/buffer.js';\nimport { URI } from '../../../../base/common/uri.js';\nimport { IWorkingCopy } from './workingCopy.js';\n\nexport interface IFileWorkingCopyModelFactory<M extends IFileWorkingCopyModel> {\n\n\t/**\n\t * Create a model for the untitled or stored working copy\n\t * from the given content under the provided resource.\n\t *\n\t * @param resource the `URI` of the model\n\t * @param contents the content of the model to create it\n\t * @param token support for cancellation\n\t */\n\tcreateModel(resource: URI, contents: VSBufferReadableStream, token: CancellationToken): Promise<M>;\n}\n\nexport interface IFileWorkingCopyModelConfiguration {\n\n\t/**\n\t * The delay in milliseconds to wait before triggering\n\t * a backup after the content of the model has changed.\n\t *\n\t * If not configured, a sensible default will be taken\n\t * based on user settings.\n\t */\n\treadonly backupDelay?: number;\n}\n\nexport const enum SnapshotContext {\n\tSave = 1,\n\tBackup = 2\n}\n\n/**\n * A generic file working copy model to be reused by untitled\n * and stored file working copies.\n */\nexport interface IFileWorkingCopyModel extends IDisposable {\n\n\t/**\n\t * This event signals ANY changes to the contents, for example:\n\t * - through the user typing into the editor\n\t * - from API usage (e.g. bulk edits)\n\t * - when `IFileWorkingCopyModel#update` is invoked with contents\n\t *   that are different from the current contents\n\t *\n\t * The file working copy will listen to these changes and may mark\n\t * the working copy as dirty whenever this event fires.\n\t *\n\t * Note: ONLY report changes to the model but not the underlying\n\t * file. The file working copy is tracking changes to the file\n\t * automatically.\n\t */\n\treadonly onDidChangeContent: Event<unknown>;\n\n\t/**\n\t * An event emitted right before disposing the model.\n\t */\n\treadonly onWillDispose: Event<void>;\n\n\t/**\n\t * Optional additional configuration for the model that drives\n\t * some of the working copy behaviour.\n\t */\n\treadonly configuration?: IFileWorkingCopyModelConfiguration;\n\n\t/**\n\t * Snapshots the model's current content for writing. This must include\n\t * any changes that were made to the model that are in memory.\n\t *\n\t * @param context indicates in what context the snapshot is used\n\t * @param token support for cancellation\n\t */\n\tsnapshot(context: SnapshotContext, token: CancellationToken): Promise<VSBufferReadableStream>;\n\n\t/**\n\t * Updates the model with the provided contents. The implementation should\n\t * behave in a similar fashion as `IFileWorkingCopyModelFactory#createModel`\n\t * except that here the model already exists and just needs to update to\n\t * the provided contents.\n\t *\n\t * Note: it is expected that the model fires a `onDidChangeContent` event\n\t * as part of the update.\n\t *\n\t * @param contents the contents to use for the model\n\t * @param token support for cancellation\n\t */\n\tupdate(contents: VSBufferReadableStream, token: CancellationToken): Promise<void>;\n}\n\nexport interface IFileWorkingCopy<M extends IFileWorkingCopyModel> extends IWorkingCopy, IDisposable {\n\n\t/**\n\t * An event for when the file working copy has been reverted.\n\t */\n\treadonly onDidRevert: Event<void>;\n\n\t/**\n\t * An event for when the file working copy has been disposed.\n\t */\n\treadonly onWillDispose: Event<void>;\n\n\t/**\n\t * Provides access to the underlying model of this file\n\t * based working copy. As long as the file working copy\n\t * has not been resolved, the model is `undefined`.\n\t */\n\treadonly model: M | undefined;\n\n\t/**\n\t * Resolves the file working copy and thus makes the `model`\n\t * available.\n\t */\n\tresolve(): Promise<void>;\n\n\t/**\n\t * Whether we have a resolved model or not.\n\t */\n\tisResolved(): this is IResolvedFileWorkingCopy<M>;\n}\n\nexport interface IResolvedFileWorkingCopy<M extends IFileWorkingCopyModel> extends IFileWorkingCopy<M> {\n\n\t/**\n\t * A resolved file working copy has a resolved model.\n\t */\n\treadonly model: M;\n}\n"],
  "mappings": "AAKA,SAAS,mBAAmB;AAC5B,SAAS,aAAa;AACtB,SAAS,yBAAyB;AAClC,SAAS,8BAA8B;AACvC,SAAS,WAAW;AACpB,SAAS,oBAAoB;AA2BtB,IAAW,kBAAX,kBAAWA,qBAAX;AACN,EAAAA,kCAAA,UAAO,KAAP;AACA,EAAAA,kCAAA,YAAS,KAAT;AAFiB,SAAAA;AAAA,GAAA;",
  "names": ["SnapshotContext"]
}
