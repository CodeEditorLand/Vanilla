var f=Object.defineProperty;var d=Object.getOwnPropertyDescriptor;var c=(a,o,e,i)=>{for(var r=i>1?void 0:i?d(o,e):o,n=a.length-1,t;n>=0;n--)(t=a[n])&&(r=(i?t(o,e,r):t(r))||r);return i&&r&&f(o,e,r),r},s=(a,o)=>(e,i)=>o(e,i,a);import"../../../../base/common/cancellation.js";import{ILogService as u}from"../../../../platform/log/common/log.js";import{Disposable as v,toDisposable as I}from"../../../../base/common/lifecycle.js";import"./workingCopyFileService.js";import"../../../../platform/files/common/files.js";import{IConfigurationService as g}from"../../../../platform/configuration/common/configuration.js";import{LinkedList as S}from"../../../../base/common/linkedList.js";let p=class extends v{constructor(e,i){super();this.logService=e;this.configurationService=i}participants=new S;addFileOperationParticipant(e){const i=this.participants.push(e);return I(()=>i())}async participate(e,i,r,n){const t=this.configurationService.getValue("files.participants.timeout");if(!(typeof t!="number"||t<=0))for(const l of this.participants)try{await l.participate(e,i,r,t,n)}catch(m){this.logService.warn(m)}}dispose(){this.participants.clear(),super.dispose()}};p=c([s(0,u),s(1,g)],p);export{p as WorkingCopyFileOperationParticipant};
