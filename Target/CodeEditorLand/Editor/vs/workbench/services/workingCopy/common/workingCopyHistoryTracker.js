var v=Object.defineProperty;var S=Object.getOwnPropertyDescriptor;var p=(c,a,e,r)=>{for(var t=r>1?void 0:r?S(a,e):a,s=c.length-1,i;s>=0;s--)(i=c[s])&&(t=(r?i(a,e,t):i(t))||t);return r&&t&&v(a,e,t),t},n=(c,a)=>(e,r)=>a(e,r,c);import{localize as h}from"../../../../nls.js";import{GlobalIdleValue as m,Limiter as y}from"../../../../base/common/async.js";import{CancellationTokenSource as g}from"../../../../base/common/cancellation.js";import{Disposable as f}from"../../../../base/common/lifecycle.js";import{ResourceMap as d}from"../../../../base/common/map.js";import{IConfigurationService as C}from"../../../../platform/configuration/common/configuration.js";import{IUndoRedoService as E}from"../../../../platform/undoRedo/common/undoRedo.js";import{IUriIdentityService as I}from"../../../../platform/uriIdentity/common/uriIdentity.js";import{SaveSourceRegistry as k}from"../../../common/editor.js";import{IPathService as w}from"../../path/common/pathService.js";import{isStoredFileWorkingCopySaveEvent as F}from"./storedFileWorkingCopy.js";import{IWorkingCopyHistoryService as R,MAX_PARALLEL_HISTORY_IO_OPS as O}from"./workingCopyHistory.js";import{IWorkingCopyService as V}from"./workingCopyService.js";import{Schemas as l}from"../../../../base/common/network.js";import{ResourceGlobMatcher as U}from"../../../common/resources.js";import{IWorkspaceContextService as D}from"../../../../platform/workspace/common/workspace.js";import{FileOperation as b,IFileService as M}from"../../../../platform/files/common/files.js";let o=class extends f{constructor(e,r,t,s,i,u,x,W){super();this.workingCopyService=e;this.workingCopyHistoryService=r;this.uriIdentityService=t;this.pathService=s;this.configurationService=i;this.undoRedoService=u;this.contextService=x;this.fileService=W;this.registerListeners()}static SETTINGS={ENABLED:"workbench.localHistory.enabled",SIZE_LIMIT:"workbench.localHistory.maxFileSize",EXCLUDES:"workbench.localHistory.exclude"};static UNDO_REDO_SAVE_SOURCE=k.registerSource("undoRedo.source",h("undoRedo.source","Undo / Redo"));limiter=this._register(new y(O));resourceExcludeMatcher=this._register(new m(()=>this._register(new U(r=>this.configurationService.getValue(o.SETTINGS.EXCLUDES,{resource:r}),r=>r.affectsConfiguration(o.SETTINGS.EXCLUDES),this.contextService,this.configurationService))));pendingAddHistoryEntryOperations=new d(e=>this.uriIdentityService.extUri.getComparisonKey(e));workingCopyContentVersion=new d(e=>this.uriIdentityService.extUri.getComparisonKey(e));historyEntryContentVersion=new d(e=>this.uriIdentityService.extUri.getComparisonKey(e));registerListeners(){this._register(this.fileService.onDidRunOperation(e=>this.onDidRunFileOperation(e))),this._register(this.workingCopyService.onDidChangeContent(e=>this.onDidChangeContent(e))),this._register(this.workingCopyService.onDidSave(e=>this.onDidSave(e)))}async onDidRunFileOperation(e){if(!this.shouldTrackHistoryFromFileOperationEvent(e))return;const r=e.resource,t=e.target.resource,s=await this.workingCopyHistoryService.moveEntries(r,t);for(const i of s){const u=this.getContentVersion(i);this.historyEntryContentVersion.set(i,u)}}onDidChangeContent(e){const r=this.getContentVersion(e.resource);this.workingCopyContentVersion.set(e.resource,r+1)}getContentVersion(e){return this.workingCopyContentVersion.get(e)||0}onDidSave(e){if(!this.shouldTrackHistoryFromSaveEvent(e))return;const r=this.getContentVersion(e.workingCopy.resource);if(this.historyEntryContentVersion.get(e.workingCopy.resource)===r)return;this.pendingAddHistoryEntryOperations.get(e.workingCopy.resource)?.dispose(!0);const t=new g;this.pendingAddHistoryEntryOperations.set(e.workingCopy.resource,t),this.limiter.queue(async()=>{if(t.token.isCancellationRequested)return;const s=this.getContentVersion(e.workingCopy.resource);let i=e.source;e.source||(i=this.resolveSourceFromUndoRedo(e)),await this.workingCopyHistoryService.addEntry({resource:e.workingCopy.resource,source:i,timestamp:e.stat.mtime},t.token),this.historyEntryContentVersion.set(e.workingCopy.resource,s),!t.token.isCancellationRequested&&this.pendingAddHistoryEntryOperations.delete(e.workingCopy.resource)})}resolveSourceFromUndoRedo(e){const r=this.undoRedoService.getLastElement(e.workingCopy.resource);if(r)return r.code==="undoredo.textBufferEdit"?void 0:r.label;const t=this.undoRedoService.getElements(e.workingCopy.resource);if(t.future.length>0||t.past.length>0)return o.UNDO_REDO_SAVE_SOURCE}shouldTrackHistoryFromSaveEvent(e){return F(e)?this.shouldTrackHistory(e.workingCopy.resource,e.stat):!1}shouldTrackHistoryFromFileOperationEvent(e){return e.isOperation(b.MOVE)?this.shouldTrackHistory(e.target.resource,e.target):!1}shouldTrackHistory(e,r){if(e.scheme!==this.pathService.defaultUriScheme&&e.scheme!==l.vscodeUserData&&e.scheme!==l.inMemory)return!1;const t=1024*this.configurationService.getValue(o.SETTINGS.SIZE_LIMIT,{resource:e});return r.size>t||this.configurationService.getValue(o.SETTINGS.ENABLED,{resource:e})===!1?!1:!this.resourceExcludeMatcher.value.matches(e)}};o=p([n(0,V),n(1,R),n(2,I),n(3,w),n(4,C),n(5,E),n(6,D),n(7,M)],o);export{o as WorkingCopyHistoryTracker};
