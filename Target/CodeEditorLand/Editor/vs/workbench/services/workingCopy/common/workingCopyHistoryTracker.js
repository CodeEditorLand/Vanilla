var v=Object.defineProperty;var S=Object.getOwnPropertyDescriptor;var d=(c,a,e,t)=>{for(var r=t>1?void 0:t?S(a,e):a,s=c.length-1,o;s>=0;s--)(o=c[s])&&(r=(t?o(a,e,r):o(r))||r);return t&&r&&v(a,e,r),r},n=(c,a)=>(e,t)=>a(e,t,c);import{GlobalIdleValue as y,Limiter as h}from"../../../../base/common/async.js";import{CancellationTokenSource as m}from"../../../../base/common/cancellation.js";import{Disposable as g}from"../../../../base/common/lifecycle.js";import{ResourceMap as p}from"../../../../base/common/map.js";import{Schemas as l}from"../../../../base/common/network.js";import{localize as C}from"../../../../nls.js";import{IConfigurationService as f}from"../../../../platform/configuration/common/configuration.js";import{FileOperation as E,IFileService as I}from"../../../../platform/files/common/files.js";import{IUndoRedoService as k}from"../../../../platform/undoRedo/common/undoRedo.js";import{IUriIdentityService as w}from"../../../../platform/uriIdentity/common/uriIdentity.js";import{IWorkspaceContextService as F}from"../../../../platform/workspace/common/workspace.js";import{SaveSourceRegistry as R}from"../../../common/editor.js";import{ResourceGlobMatcher as O}from"../../../common/resources.js";import{IPathService as V}from"../../path/common/pathService.js";import{isStoredFileWorkingCopySaveEvent as U}from"./storedFileWorkingCopy.js";import{IWorkingCopyHistoryService as D,MAX_PARALLEL_HISTORY_IO_OPS as b}from"./workingCopyHistory.js";import{IWorkingCopyService as M}from"./workingCopyService.js";let i=class extends g{constructor(e,t,r,s,o,u,W,x){super();this.workingCopyService=e;this.workingCopyHistoryService=t;this.uriIdentityService=r;this.pathService=s;this.configurationService=o;this.undoRedoService=u;this.contextService=W;this.fileService=x;this.registerListeners()}static SETTINGS={ENABLED:"workbench.localHistory.enabled",SIZE_LIMIT:"workbench.localHistory.maxFileSize",EXCLUDES:"workbench.localHistory.exclude"};static UNDO_REDO_SAVE_SOURCE=R.registerSource("undoRedo.source",C("undoRedo.source","Undo / Redo"));limiter=this._register(new h(b));resourceExcludeMatcher=this._register(new y(()=>this._register(new O(t=>this.configurationService.getValue(i.SETTINGS.EXCLUDES,{resource:t}),t=>t.affectsConfiguration(i.SETTINGS.EXCLUDES),this.contextService,this.configurationService))));pendingAddHistoryEntryOperations=new p(e=>this.uriIdentityService.extUri.getComparisonKey(e));workingCopyContentVersion=new p(e=>this.uriIdentityService.extUri.getComparisonKey(e));historyEntryContentVersion=new p(e=>this.uriIdentityService.extUri.getComparisonKey(e));registerListeners(){this._register(this.fileService.onDidRunOperation(e=>this.onDidRunFileOperation(e))),this._register(this.workingCopyService.onDidChangeContent(e=>this.onDidChangeContent(e))),this._register(this.workingCopyService.onDidSave(e=>this.onDidSave(e)))}async onDidRunFileOperation(e){if(!this.shouldTrackHistoryFromFileOperationEvent(e))return;const t=e.resource,r=e.target.resource,s=await this.workingCopyHistoryService.moveEntries(t,r);for(const o of s){const u=this.getContentVersion(o);this.historyEntryContentVersion.set(o,u)}}onDidChangeContent(e){const t=this.getContentVersion(e.resource);this.workingCopyContentVersion.set(e.resource,t+1)}getContentVersion(e){return this.workingCopyContentVersion.get(e)||0}onDidSave(e){if(!this.shouldTrackHistoryFromSaveEvent(e))return;const t=this.getContentVersion(e.workingCopy.resource);if(this.historyEntryContentVersion.get(e.workingCopy.resource)===t)return;this.pendingAddHistoryEntryOperations.get(e.workingCopy.resource)?.dispose(!0);const r=new m;this.pendingAddHistoryEntryOperations.set(e.workingCopy.resource,r),this.limiter.queue(async()=>{if(r.token.isCancellationRequested)return;const s=this.getContentVersion(e.workingCopy.resource);let o=e.source;e.source||(o=this.resolveSourceFromUndoRedo(e)),await this.workingCopyHistoryService.addEntry({resource:e.workingCopy.resource,source:o,timestamp:e.stat.mtime},r.token),this.historyEntryContentVersion.set(e.workingCopy.resource,s),!r.token.isCancellationRequested&&this.pendingAddHistoryEntryOperations.delete(e.workingCopy.resource)})}resolveSourceFromUndoRedo(e){const t=this.undoRedoService.getLastElement(e.workingCopy.resource);if(t)return t.code==="undoredo.textBufferEdit"?void 0:t.label;const r=this.undoRedoService.getElements(e.workingCopy.resource);if(r.future.length>0||r.past.length>0)return i.UNDO_REDO_SAVE_SOURCE}shouldTrackHistoryFromSaveEvent(e){return U(e)?this.shouldTrackHistory(e.workingCopy.resource,e.stat):!1}shouldTrackHistoryFromFileOperationEvent(e){return e.isOperation(E.MOVE)?this.shouldTrackHistory(e.target.resource,e.target):!1}shouldTrackHistory(e,t){if(e.scheme!==this.pathService.defaultUriScheme&&e.scheme!==l.vscodeUserData&&e.scheme!==l.inMemory)return!1;const r=1024*this.configurationService.getValue(i.SETTINGS.SIZE_LIMIT,{resource:e});return t.size>r||this.configurationService.getValue(i.SETTINGS.ENABLED,{resource:e})===!1?!1:!this.resourceExcludeMatcher.value.matches(e)}};i=d([n(0,M),n(1,D),n(2,w),n(3,V),n(4,f),n(5,k),n(6,F),n(7,I)],i);export{i as WorkingCopyHistoryTracker};
