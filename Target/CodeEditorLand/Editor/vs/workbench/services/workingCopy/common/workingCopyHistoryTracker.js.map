{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/workingCopy/common/workingCopyHistoryTracker.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { GlobalIdleValue, Limiter } from \"../../../../base/common/async.js\";\nimport { CancellationTokenSource } from \"../../../../base/common/cancellation.js\";\nimport { Disposable } from \"../../../../base/common/lifecycle.js\";\nimport { ResourceMap } from \"../../../../base/common/map.js\";\nimport { Schemas } from \"../../../../base/common/network.js\";\nimport type { URI } from \"../../../../base/common/uri.js\";\nimport { localize } from \"../../../../nls.js\";\nimport { IConfigurationService } from \"../../../../platform/configuration/common/configuration.js\";\nimport {\n\tFileOperation,\n\ttype FileOperationEvent,\n\ttype IFileOperationEventWithMetadata,\n\tIFileService,\n\ttype IFileStatWithMetadata,\n} from \"../../../../platform/files/common/files.js\";\nimport { IUndoRedoService } from \"../../../../platform/undoRedo/common/undoRedo.js\";\nimport { IUriIdentityService } from \"../../../../platform/uriIdentity/common/uriIdentity.js\";\nimport { IWorkspaceContextService } from \"../../../../platform/workspace/common/workspace.js\";\nimport type { IWorkbenchContribution } from \"../../../common/contributions.js\";\nimport { type SaveSource, SaveSourceRegistry } from \"../../../common/editor.js\";\nimport { ResourceGlobMatcher } from \"../../../common/resources.js\";\nimport { IPathService } from \"../../path/common/pathService.js\";\nimport {\n\ttype IStoredFileWorkingCopyModel,\n\tisStoredFileWorkingCopySaveEvent,\n} from \"./storedFileWorkingCopy.js\";\nimport type { IStoredFileWorkingCopySaveEvent } from \"./storedFileWorkingCopyManager.js\";\nimport type { IWorkingCopy } from \"./workingCopy.js\";\nimport {\n\tIWorkingCopyHistoryService,\n\tMAX_PARALLEL_HISTORY_IO_OPS,\n} from \"./workingCopyHistory.js\";\nimport {\n\ttype IWorkingCopySaveEvent,\n\tIWorkingCopyService,\n} from \"./workingCopyService.js\";\n\nexport class WorkingCopyHistoryTracker\n\textends Disposable\n\timplements IWorkbenchContribution\n{\n\tprivate static readonly SETTINGS = {\n\t\tENABLED: \"workbench.localHistory.enabled\",\n\t\tSIZE_LIMIT: \"workbench.localHistory.maxFileSize\",\n\t\tEXCLUDES: \"workbench.localHistory.exclude\",\n\t};\n\n\tprivate static readonly UNDO_REDO_SAVE_SOURCE =\n\t\tSaveSourceRegistry.registerSource(\n\t\t\t\"undoRedo.source\",\n\t\t\tlocalize(\"undoRedo.source\", \"Undo / Redo\"),\n\t\t);\n\n\tprivate readonly limiter = this._register(\n\t\tnew Limiter(MAX_PARALLEL_HISTORY_IO_OPS),\n\t);\n\n\tprivate readonly resourceExcludeMatcher = this._register(\n\t\tnew GlobalIdleValue(() => {\n\t\t\tconst matcher = this._register(\n\t\t\t\tnew ResourceGlobMatcher(\n\t\t\t\t\t(root) =>\n\t\t\t\t\t\tthis.configurationService.getValue(\n\t\t\t\t\t\t\tWorkingCopyHistoryTracker.SETTINGS.EXCLUDES,\n\t\t\t\t\t\t\t{ resource: root },\n\t\t\t\t\t\t),\n\t\t\t\t\t(event) =>\n\t\t\t\t\t\tevent.affectsConfiguration(\n\t\t\t\t\t\t\tWorkingCopyHistoryTracker.SETTINGS.EXCLUDES,\n\t\t\t\t\t\t),\n\t\t\t\t\tthis.contextService,\n\t\t\t\t\tthis.configurationService,\n\t\t\t\t),\n\t\t\t);\n\n\t\t\treturn matcher;\n\t\t}),\n\t);\n\n\tprivate readonly pendingAddHistoryEntryOperations =\n\t\tnew ResourceMap<CancellationTokenSource>((resource) =>\n\t\t\tthis.uriIdentityService.extUri.getComparisonKey(resource),\n\t\t);\n\n\tprivate readonly workingCopyContentVersion = new ResourceMap<number>(\n\t\t(resource) => this.uriIdentityService.extUri.getComparisonKey(resource),\n\t);\n\tprivate readonly historyEntryContentVersion = new ResourceMap<number>(\n\t\t(resource) => this.uriIdentityService.extUri.getComparisonKey(resource),\n\t);\n\n\tconstructor(\n\t\t@IWorkingCopyService private readonly workingCopyService: IWorkingCopyService,\n\t\t@IWorkingCopyHistoryService private readonly workingCopyHistoryService: IWorkingCopyHistoryService,\n\t\t@IUriIdentityService private readonly uriIdentityService: IUriIdentityService,\n\t\t@IPathService private readonly pathService: IPathService,\n\t\t@IConfigurationService private readonly configurationService: IConfigurationService,\n\t\t@IUndoRedoService private readonly undoRedoService: IUndoRedoService,\n\t\t@IWorkspaceContextService private readonly contextService: IWorkspaceContextService,\n\t\t@IFileService private readonly fileService: IFileService\n\t) {\n\t\tsuper();\n\n\t\tthis.registerListeners();\n\t}\n\n\tprivate registerListeners() {\n\t\t// File Events\n\t\tthis._register(\n\t\t\tthis.fileService.onDidRunOperation((e) =>\n\t\t\t\tthis.onDidRunFileOperation(e),\n\t\t\t),\n\t\t);\n\n\t\t// Working Copy Events\n\t\tthis._register(\n\t\t\tthis.workingCopyService.onDidChangeContent((workingCopy) =>\n\t\t\t\tthis.onDidChangeContent(workingCopy),\n\t\t\t),\n\t\t);\n\t\tthis._register(\n\t\t\tthis.workingCopyService.onDidSave((e) => this.onDidSave(e)),\n\t\t);\n\t}\n\n\tprivate async onDidRunFileOperation(e: FileOperationEvent): Promise<void> {\n\t\tif (!this.shouldTrackHistoryFromFileOperationEvent(e)) {\n\t\t\treturn; // return early for working copies we are not interested in\n\t\t}\n\n\t\tconst source = e.resource;\n\t\tconst target = e.target.resource;\n\n\t\t// Move working copy history entries for this file move event\n\t\tconst resources = await this.workingCopyHistoryService.moveEntries(\n\t\t\tsource,\n\t\t\ttarget,\n\t\t);\n\n\t\t// Make sure to track the content version of each entry that\n\t\t// was moved in our map. This ensures that a subsequent save\n\t\t// without a content change does not add a redundant entry\n\t\t// (https://github.com/microsoft/vscode/issues/145881)\n\t\tfor (const resource of resources) {\n\t\t\tconst contentVersion = this.getContentVersion(resource);\n\t\t\tthis.historyEntryContentVersion.set(resource, contentVersion);\n\t\t}\n\t}\n\n\tprivate onDidChangeContent(workingCopy: IWorkingCopy): void {\n\t\t// Increment content version ID for resource\n\t\tconst contentVersionId = this.getContentVersion(workingCopy.resource);\n\t\tthis.workingCopyContentVersion.set(\n\t\t\tworkingCopy.resource,\n\t\t\tcontentVersionId + 1,\n\t\t);\n\t}\n\n\tprivate getContentVersion(resource: URI): number {\n\t\treturn this.workingCopyContentVersion.get(resource) || 0;\n\t}\n\n\tprivate onDidSave(e: IWorkingCopySaveEvent): void {\n\t\tif (!this.shouldTrackHistoryFromSaveEvent(e)) {\n\t\t\treturn; // return early for working copies we are not interested in\n\t\t}\n\n\t\tconst contentVersion = this.getContentVersion(e.workingCopy.resource);\n\t\tif (\n\t\t\tthis.historyEntryContentVersion.get(e.workingCopy.resource) ===\n\t\t\tcontentVersion\n\t\t) {\n\t\t\treturn; // return early when content version already has associated history entry\n\t\t}\n\n\t\t// Cancel any previous operation for this resource\n\t\tthis.pendingAddHistoryEntryOperations\n\t\t\t.get(e.workingCopy.resource)\n\t\t\t?.dispose(true);\n\n\t\t// Create new cancellation token support and remember\n\t\tconst cts = new CancellationTokenSource();\n\t\tthis.pendingAddHistoryEntryOperations.set(e.workingCopy.resource, cts);\n\n\t\t// Queue new operation to add to history\n\t\tthis.limiter.queue(async () => {\n\t\t\tif (cts.token.isCancellationRequested) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst contentVersion = this.getContentVersion(\n\t\t\t\te.workingCopy.resource,\n\t\t\t);\n\n\t\t\t// Figure out source of save operation if not provided already\n\t\t\tlet source = e.source;\n\t\t\tif (!e.source) {\n\t\t\t\tsource = this.resolveSourceFromUndoRedo(e);\n\t\t\t}\n\n\t\t\t// Add entry\n\t\t\tawait this.workingCopyHistoryService.addEntry(\n\t\t\t\t{\n\t\t\t\t\tresource: e.workingCopy.resource,\n\t\t\t\t\tsource,\n\t\t\t\t\ttimestamp: e.stat.mtime,\n\t\t\t\t},\n\t\t\t\tcts.token,\n\t\t\t);\n\n\t\t\t// Remember content version as being added to history\n\t\t\tthis.historyEntryContentVersion.set(\n\t\t\t\te.workingCopy.resource,\n\t\t\t\tcontentVersion,\n\t\t\t);\n\n\t\t\tif (cts.token.isCancellationRequested) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Finally remove from pending operations\n\t\t\tthis.pendingAddHistoryEntryOperations.delete(\n\t\t\t\te.workingCopy.resource,\n\t\t\t);\n\t\t});\n\t}\n\n\tprivate resolveSourceFromUndoRedo(\n\t\te: IWorkingCopySaveEvent,\n\t): SaveSource | undefined {\n\t\tconst lastStackElement = this.undoRedoService.getLastElement(\n\t\t\te.workingCopy.resource,\n\t\t);\n\t\tif (lastStackElement) {\n\t\t\tif (lastStackElement.code === \"undoredo.textBufferEdit\") {\n\t\t\t\treturn undefined; // ignore any unspecific stack element that resulted just from typing\n\t\t\t}\n\n\t\t\treturn lastStackElement.label;\n\t\t}\n\n\t\tconst allStackElements = this.undoRedoService.getElements(\n\t\t\te.workingCopy.resource,\n\t\t);\n\t\tif (\n\t\t\tallStackElements.future.length > 0 ||\n\t\t\tallStackElements.past.length > 0\n\t\t) {\n\t\t\treturn WorkingCopyHistoryTracker.UNDO_REDO_SAVE_SOURCE;\n\t\t}\n\n\t\treturn undefined;\n\t}\n\n\tprivate shouldTrackHistoryFromSaveEvent(\n\t\te: IWorkingCopySaveEvent,\n\t): e is IStoredFileWorkingCopySaveEvent<IStoredFileWorkingCopyModel> {\n\t\tif (!isStoredFileWorkingCopySaveEvent(e)) {\n\t\t\treturn false; // only support working copies that are backed by stored files\n\t\t}\n\n\t\treturn this.shouldTrackHistory(e.workingCopy.resource, e.stat);\n\t}\n\n\tprivate shouldTrackHistoryFromFileOperationEvent(\n\t\te: FileOperationEvent,\n\t): e is IFileOperationEventWithMetadata {\n\t\tif (!e.isOperation(FileOperation.MOVE)) {\n\t\t\treturn false; // only interested in move operations\n\t\t}\n\n\t\treturn this.shouldTrackHistory(e.target.resource, e.target);\n\t}\n\n\tprivate shouldTrackHistory(\n\t\tresource: URI,\n\t\tstat: IFileStatWithMetadata,\n\t): boolean {\n\t\tif (\n\t\t\tresource.scheme !== this.pathService.defaultUriScheme && // track history for all workspace resources\n\t\t\tresource.scheme !== Schemas.vscodeUserData && // track history for all settings\n\t\t\tresource.scheme !== Schemas.inMemory // track history for tests that use in-memory\n\t\t) {\n\t\t\treturn false; // do not support unknown resources\n\t\t}\n\n\t\tconst configuredMaxFileSizeInBytes =\n\t\t\t1024 *\n\t\t\tthis.configurationService.getValue<number>(\n\t\t\t\tWorkingCopyHistoryTracker.SETTINGS.SIZE_LIMIT,\n\t\t\t\t{ resource },\n\t\t\t);\n\t\tif (stat.size > configuredMaxFileSizeInBytes) {\n\t\t\treturn false; // only track files that are not too large\n\t\t}\n\n\t\tif (\n\t\t\tthis.configurationService.getValue(\n\t\t\t\tWorkingCopyHistoryTracker.SETTINGS.ENABLED,\n\t\t\t\t{ resource },\n\t\t\t) === false\n\t\t) {\n\t\t\treturn false; // do not track when history is disabled\n\t\t}\n\n\t\t// Finally check for exclude setting\n\t\treturn !this.resourceExcludeMatcher.value.matches(resource);\n\t}\n}\n"],
  "mappings": "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",
  "names": ["contentVersion"]
}
