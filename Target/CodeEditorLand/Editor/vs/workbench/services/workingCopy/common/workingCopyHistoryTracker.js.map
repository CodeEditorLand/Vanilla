{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/workingCopy/common/workingCopyHistoryTracker.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { localize } from '../../../../nls.js';\nimport { URI } from '../../../../base/common/uri.js';\nimport { GlobalIdleValue, Limiter } from '../../../../base/common/async.js';\nimport { CancellationTokenSource } from '../../../../base/common/cancellation.js';\nimport { Disposable } from '../../../../base/common/lifecycle.js';\nimport { ResourceMap } from '../../../../base/common/map.js';\nimport { IConfigurationService } from '../../../../platform/configuration/common/configuration.js';\nimport { IUndoRedoService } from '../../../../platform/undoRedo/common/undoRedo.js';\nimport { IUriIdentityService } from '../../../../platform/uriIdentity/common/uriIdentity.js';\nimport { IWorkbenchContribution } from '../../../common/contributions.js';\nimport { SaveSource, SaveSourceRegistry } from '../../../common/editor.js';\nimport { IPathService } from '../../path/common/pathService.js';\nimport { isStoredFileWorkingCopySaveEvent, IStoredFileWorkingCopyModel } from './storedFileWorkingCopy.js';\nimport { IStoredFileWorkingCopySaveEvent } from './storedFileWorkingCopyManager.js';\nimport { IWorkingCopy } from './workingCopy.js';\nimport { IWorkingCopyHistoryService, MAX_PARALLEL_HISTORY_IO_OPS } from './workingCopyHistory.js';\nimport { IWorkingCopySaveEvent, IWorkingCopyService } from './workingCopyService.js';\nimport { Schemas } from '../../../../base/common/network.js';\nimport { ResourceGlobMatcher } from '../../../common/resources.js';\nimport { IWorkspaceContextService } from '../../../../platform/workspace/common/workspace.js';\nimport { FileOperation, FileOperationEvent, IFileOperationEventWithMetadata, IFileService, IFileStatWithMetadata } from '../../../../platform/files/common/files.js';\n\nexport class WorkingCopyHistoryTracker extends Disposable implements IWorkbenchContribution {\n\n\tprivate static readonly SETTINGS = {\n\t\tENABLED: 'workbench.localHistory.enabled',\n\t\tSIZE_LIMIT: 'workbench.localHistory.maxFileSize',\n\t\tEXCLUDES: 'workbench.localHistory.exclude'\n\t};\n\n\tprivate static readonly UNDO_REDO_SAVE_SOURCE = SaveSourceRegistry.registerSource('undoRedo.source', localize('undoRedo.source', \"Undo / Redo\"));\n\n\tprivate readonly limiter = this._register(new Limiter(MAX_PARALLEL_HISTORY_IO_OPS));\n\n\tprivate readonly resourceExcludeMatcher = this._register(new GlobalIdleValue(() => {\n\t\tconst matcher = this._register(new ResourceGlobMatcher(\n\t\t\troot => this.configurationService.getValue(WorkingCopyHistoryTracker.SETTINGS.EXCLUDES, { resource: root }),\n\t\t\tevent => event.affectsConfiguration(WorkingCopyHistoryTracker.SETTINGS.EXCLUDES),\n\t\t\tthis.contextService,\n\t\t\tthis.configurationService\n\t\t));\n\n\t\treturn matcher;\n\t}));\n\n\tprivate readonly pendingAddHistoryEntryOperations = new ResourceMap<CancellationTokenSource>(resource => this.uriIdentityService.extUri.getComparisonKey(resource));\n\n\tprivate readonly workingCopyContentVersion = new ResourceMap<number>(resource => this.uriIdentityService.extUri.getComparisonKey(resource));\n\tprivate readonly historyEntryContentVersion = new ResourceMap<number>(resource => this.uriIdentityService.extUri.getComparisonKey(resource));\n\n\tconstructor(\n\t\t@IWorkingCopyService private readonly workingCopyService: IWorkingCopyService,\n\t\t@IWorkingCopyHistoryService private readonly workingCopyHistoryService: IWorkingCopyHistoryService,\n\t\t@IUriIdentityService private readonly uriIdentityService: IUriIdentityService,\n\t\t@IPathService private readonly pathService: IPathService,\n\t\t@IConfigurationService private readonly configurationService: IConfigurationService,\n\t\t@IUndoRedoService private readonly undoRedoService: IUndoRedoService,\n\t\t@IWorkspaceContextService private readonly contextService: IWorkspaceContextService,\n\t\t@IFileService private readonly fileService: IFileService\n\t) {\n\t\tsuper();\n\n\t\tthis.registerListeners();\n\t}\n\n\tprivate registerListeners() {\n\n\t\t// File Events\n\t\tthis._register(this.fileService.onDidRunOperation(e => this.onDidRunFileOperation(e)));\n\n\t\t// Working Copy Events\n\t\tthis._register(this.workingCopyService.onDidChangeContent(workingCopy => this.onDidChangeContent(workingCopy)));\n\t\tthis._register(this.workingCopyService.onDidSave(e => this.onDidSave(e)));\n\t}\n\n\tprivate async onDidRunFileOperation(e: FileOperationEvent): Promise<void> {\n\t\tif (!this.shouldTrackHistoryFromFileOperationEvent(e)) {\n\t\t\treturn; // return early for working copies we are not interested in\n\t\t}\n\n\t\tconst source = e.resource;\n\t\tconst target = e.target.resource;\n\n\t\t// Move working copy history entries for this file move event\n\t\tconst resources = await this.workingCopyHistoryService.moveEntries(source, target);\n\n\t\t// Make sure to track the content version of each entry that\n\t\t// was moved in our map. This ensures that a subsequent save\n\t\t// without a content change does not add a redundant entry\n\t\t// (https://github.com/microsoft/vscode/issues/145881)\n\t\tfor (const resource of resources) {\n\t\t\tconst contentVersion = this.getContentVersion(resource);\n\t\t\tthis.historyEntryContentVersion.set(resource, contentVersion);\n\t\t}\n\t}\n\n\tprivate onDidChangeContent(workingCopy: IWorkingCopy): void {\n\n\t\t// Increment content version ID for resource\n\t\tconst contentVersionId = this.getContentVersion(workingCopy.resource);\n\t\tthis.workingCopyContentVersion.set(workingCopy.resource, contentVersionId + 1);\n\t}\n\n\tprivate getContentVersion(resource: URI): number {\n\t\treturn this.workingCopyContentVersion.get(resource) || 0;\n\t}\n\n\tprivate onDidSave(e: IWorkingCopySaveEvent): void {\n\t\tif (!this.shouldTrackHistoryFromSaveEvent(e)) {\n\t\t\treturn; // return early for working copies we are not interested in\n\t\t}\n\n\t\tconst contentVersion = this.getContentVersion(e.workingCopy.resource);\n\t\tif (this.historyEntryContentVersion.get(e.workingCopy.resource) === contentVersion) {\n\t\t\treturn; // return early when content version already has associated history entry\n\t\t}\n\n\t\t// Cancel any previous operation for this resource\n\t\tthis.pendingAddHistoryEntryOperations.get(e.workingCopy.resource)?.dispose(true);\n\n\t\t// Create new cancellation token support and remember\n\t\tconst cts = new CancellationTokenSource();\n\t\tthis.pendingAddHistoryEntryOperations.set(e.workingCopy.resource, cts);\n\n\t\t// Queue new operation to add to history\n\t\tthis.limiter.queue(async () => {\n\t\t\tif (cts.token.isCancellationRequested) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst contentVersion = this.getContentVersion(e.workingCopy.resource);\n\n\t\t\t// Figure out source of save operation if not provided already\n\t\t\tlet source = e.source;\n\t\t\tif (!e.source) {\n\t\t\t\tsource = this.resolveSourceFromUndoRedo(e);\n\t\t\t}\n\n\t\t\t// Add entry\n\t\t\tawait this.workingCopyHistoryService.addEntry({ resource: e.workingCopy.resource, source, timestamp: e.stat.mtime }, cts.token);\n\n\t\t\t// Remember content version as being added to history\n\t\t\tthis.historyEntryContentVersion.set(e.workingCopy.resource, contentVersion);\n\n\t\t\tif (cts.token.isCancellationRequested) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Finally remove from pending operations\n\t\t\tthis.pendingAddHistoryEntryOperations.delete(e.workingCopy.resource);\n\t\t});\n\t}\n\n\tprivate resolveSourceFromUndoRedo(e: IWorkingCopySaveEvent): SaveSource | undefined {\n\t\tconst lastStackElement = this.undoRedoService.getLastElement(e.workingCopy.resource);\n\t\tif (lastStackElement) {\n\t\t\tif (lastStackElement.code === 'undoredo.textBufferEdit') {\n\t\t\t\treturn undefined; // ignore any unspecific stack element that resulted just from typing\n\t\t\t}\n\n\t\t\treturn lastStackElement.label;\n\t\t}\n\n\t\tconst allStackElements = this.undoRedoService.getElements(e.workingCopy.resource);\n\t\tif (allStackElements.future.length > 0 || allStackElements.past.length > 0) {\n\t\t\treturn WorkingCopyHistoryTracker.UNDO_REDO_SAVE_SOURCE;\n\t\t}\n\n\t\treturn undefined;\n\t}\n\n\tprivate shouldTrackHistoryFromSaveEvent(e: IWorkingCopySaveEvent): e is IStoredFileWorkingCopySaveEvent<IStoredFileWorkingCopyModel> {\n\t\tif (!isStoredFileWorkingCopySaveEvent(e)) {\n\t\t\treturn false; // only support working copies that are backed by stored files\n\t\t}\n\n\t\treturn this.shouldTrackHistory(e.workingCopy.resource, e.stat);\n\t}\n\n\tprivate shouldTrackHistoryFromFileOperationEvent(e: FileOperationEvent): e is IFileOperationEventWithMetadata {\n\t\tif (!e.isOperation(FileOperation.MOVE)) {\n\t\t\treturn false; // only interested in move operations\n\t\t}\n\n\t\treturn this.shouldTrackHistory(e.target.resource, e.target);\n\t}\n\n\tprivate shouldTrackHistory(resource: URI, stat: IFileStatWithMetadata): boolean {\n\t\tif (\n\t\t\tresource.scheme !== this.pathService.defaultUriScheme && \t// track history for all workspace resources\n\t\t\tresource.scheme !== Schemas.vscodeUserData &&\t\t\t\t// track history for all settings\n\t\t\tresource.scheme !== Schemas.inMemory\t \t\t\t\t\t// track history for tests that use in-memory\n\t\t) {\n\t\t\treturn false; // do not support unknown resources\n\t\t}\n\n\t\tconst configuredMaxFileSizeInBytes = 1024 * this.configurationService.getValue<number>(WorkingCopyHistoryTracker.SETTINGS.SIZE_LIMIT, { resource });\n\t\tif (stat.size > configuredMaxFileSizeInBytes) {\n\t\t\treturn false; // only track files that are not too large\n\t\t}\n\n\t\tif (this.configurationService.getValue(WorkingCopyHistoryTracker.SETTINGS.ENABLED, { resource }) === false) {\n\t\t\treturn false; // do not track when history is disabled\n\t\t}\n\n\t\t// Finally check for exclude setting\n\t\treturn !this.resourceExcludeMatcher.value.matches(resource);\n\t}\n}\n"],
  "mappings": "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",
  "names": ["contentVersion"]
}
