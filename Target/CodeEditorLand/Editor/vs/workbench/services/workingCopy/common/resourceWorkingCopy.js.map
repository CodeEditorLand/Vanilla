{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/workingCopy/common/resourceWorkingCopy.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { timeout } from \"../../../../base/common/async.js\";\nimport { CancellationToken } from \"../../../../base/common/cancellation.js\";\nimport { Emitter, type Event } from \"../../../../base/common/event.js\";\nimport {\n\tDisposable,\n\ttype IDisposable,\n} from \"../../../../base/common/lifecycle.js\";\nimport type { URI } from \"../../../../base/common/uri.js\";\nimport {\n\tFileChangeType,\n\ttype FileChangesEvent,\n\tIFileService,\n} from \"../../../../platform/files/common/files.js\";\nimport type { IRevertOptions, ISaveOptions } from \"../../../common/editor.js\";\nimport type {\n\tIWorkingCopy,\n\tIWorkingCopyBackup,\n\tIWorkingCopySaveEvent,\n\tWorkingCopyCapabilities,\n} from \"./workingCopy.js\";\n\n/**\n * A resource based `IWorkingCopy` is backed by a `URI` from a\n * known file system provider.\n */\nexport interface IResourceWorkingCopy extends IWorkingCopy, IDisposable {\n\t/**\n\t * An event for when the orphaned state of the resource working copy changes.\n\t */\n\treadonly onDidChangeOrphaned: Event<void>;\n\n\t/**\n\t * Whether the resource working copy is orphaned or not.\n\t */\n\tisOrphaned(): boolean;\n\n\t/**\n\t * An event for when the file working copy has been disposed.\n\t */\n\treadonly onWillDispose: Event<void>;\n\n\t/**\n\t * Whether the file working copy has been disposed or not.\n\t */\n\tisDisposed(): boolean;\n}\n\nexport abstract class ResourceWorkingCopy\n\textends Disposable\n\timplements IResourceWorkingCopy\n{\n\tconstructor(\n\t\treadonly resource: URI,\n\t\t@IFileService protected readonly fileService: IFileService\n\t) {\n\t\tsuper();\n\n\t\tthis._register(this.fileService.onDidFilesChange(e => this.onDidFilesChange(e)));\n\t}\n\n\t//#region Orphaned Tracking\n\n\tprivate readonly _onDidChangeOrphaned = this._register(new Emitter<void>());\n\treadonly onDidChangeOrphaned = this._onDidChangeOrphaned.event;\n\n\tprivate orphaned = false;\n\n\tisOrphaned(): boolean {\n\t\treturn this.orphaned;\n\t}\n\n\tprivate async onDidFilesChange(e: FileChangesEvent): Promise<void> {\n\t\tlet fileEventImpactsUs = false;\n\t\tlet newInOrphanModeGuess: boolean | undefined;\n\n\t\t// If we are currently orphaned, we check if the file was added back\n\t\tif (this.orphaned) {\n\t\t\tconst fileWorkingCopyResourceAdded = e.contains(\n\t\t\t\tthis.resource,\n\t\t\t\tFileChangeType.ADDED,\n\t\t\t);\n\t\t\tif (fileWorkingCopyResourceAdded) {\n\t\t\t\tnewInOrphanModeGuess = false;\n\t\t\t\tfileEventImpactsUs = true;\n\t\t\t}\n\t\t}\n\n\t\t// Otherwise we check if the file was deleted\n\t\telse {\n\t\t\tconst fileWorkingCopyResourceDeleted = e.contains(\n\t\t\t\tthis.resource,\n\t\t\t\tFileChangeType.DELETED,\n\t\t\t);\n\t\t\tif (fileWorkingCopyResourceDeleted) {\n\t\t\t\tnewInOrphanModeGuess = true;\n\t\t\t\tfileEventImpactsUs = true;\n\t\t\t}\n\t\t}\n\n\t\tif (fileEventImpactsUs && this.orphaned !== newInOrphanModeGuess) {\n\t\t\tlet newInOrphanModeValidated = false;\n\t\t\tif (newInOrphanModeGuess) {\n\t\t\t\t// We have received reports of users seeing delete events even though the file still\n\t\t\t\t// exists (network shares issue: https://github.com/microsoft/vscode/issues/13665).\n\t\t\t\t// Since we do not want to mark the working copy as orphaned, we have to check if the\n\t\t\t\t// file is really gone and not just a faulty file event.\n\t\t\t\tawait timeout(100, CancellationToken.None);\n\n\t\t\t\tif (this.isDisposed()) {\n\t\t\t\t\tnewInOrphanModeValidated = true;\n\t\t\t\t} else {\n\t\t\t\t\tconst exists = await this.fileService.exists(this.resource);\n\t\t\t\t\tnewInOrphanModeValidated = !exists;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (\n\t\t\t\tthis.orphaned !== newInOrphanModeValidated &&\n\t\t\t\t!this.isDisposed()\n\t\t\t) {\n\t\t\t\tthis.setOrphaned(newInOrphanModeValidated);\n\t\t\t}\n\t\t}\n\t}\n\n\tprotected setOrphaned(orphaned: boolean): void {\n\t\tif (this.orphaned !== orphaned) {\n\t\t\tthis.orphaned = orphaned;\n\n\t\t\tthis._onDidChangeOrphaned.fire();\n\t\t}\n\t}\n\n\t//#endregion\n\n\t//#region Dispose\n\n\tprivate readonly _onWillDispose = this._register(new Emitter<void>());\n\treadonly onWillDispose = this._onWillDispose.event;\n\n\tisDisposed(): boolean {\n\t\treturn this._store.isDisposed;\n\t}\n\n\toverride dispose(): void {\n\t\t// State\n\t\tthis.orphaned = false;\n\n\t\t// Event\n\t\tthis._onWillDispose.fire();\n\n\t\tsuper.dispose();\n\t}\n\n\t//#endregion\n\n\t//#region Modified Tracking\n\n\tisModified(): boolean {\n\t\treturn this.isDirty();\n\t}\n\n\t//#endregion\n\n\t//#region Abstract\n\n\tabstract typeId: string;\n\tabstract name: string;\n\tabstract capabilities: WorkingCopyCapabilities;\n\n\tabstract onDidChangeDirty: Event<void>;\n\tabstract onDidChangeContent: Event<void>;\n\tabstract onDidSave: Event<IWorkingCopySaveEvent>;\n\n\tabstract isDirty(): boolean;\n\n\tabstract backup(token: CancellationToken): Promise<IWorkingCopyBackup>;\n\tabstract save(options?: ISaveOptions): Promise<boolean>;\n\tabstract revert(options?: IRevertOptions): Promise<void>;\n\n\t//#endregion\n}\n"],
  "mappings": ";;;;;;;;;;;;AAKA,SAAS,eAAe;AACxB,SAAS,yBAAyB;AAClC,SAAS,eAA2B;AACpC;AAAA,EACC;AAAA,OAEM;AAEP;AAAA,EACC;AAAA,EAEA;AAAA,OACM;AAmCA,IAAe,sBAAf,cACE,WAET;AAAA,EACC,YACU,UACwB,aAChC;AACD,UAAM;AAHG;AACwB;AAIjC,SAAK,UAAU,KAAK,YAAY,iBAAiB,OAAK,KAAK,iBAAiB,CAAC,CAAC,CAAC;AAAA,EAChF;AAAA,EA/DD,OAuDA;AAAA;AAAA;AAAA;AAAA,EAYkB,uBAAuB,KAAK,UAAU,IAAI,QAAc,CAAC;AAAA,EACjE,sBAAsB,KAAK,qBAAqB;AAAA,EAEjD,WAAW;AAAA,EAEnB,aAAsB;AACrB,WAAO,KAAK;AAAA,EACb;AAAA,EAEA,MAAc,iBAAiB,GAAoC;AAClE,QAAI,qBAAqB;AACzB,QAAI;AAGJ,QAAI,KAAK,UAAU;AAClB,YAAM,+BAA+B,EAAE;AAAA,QACtC,KAAK;AAAA,QACL,eAAe;AAAA,MAChB;AACA,UAAI,8BAA8B;AACjC,+BAAuB;AACvB,6BAAqB;AAAA,MACtB;AAAA,IACD,OAGK;AACJ,YAAM,iCAAiC,EAAE;AAAA,QACxC,KAAK;AAAA,QACL,eAAe;AAAA,MAChB;AACA,UAAI,gCAAgC;AACnC,+BAAuB;AACvB,6BAAqB;AAAA,MACtB;AAAA,IACD;AAEA,QAAI,sBAAsB,KAAK,aAAa,sBAAsB;AACjE,UAAI,2BAA2B;AAC/B,UAAI,sBAAsB;AAKzB,cAAM,QAAQ,KAAK,kBAAkB,IAAI;AAEzC,YAAI,KAAK,WAAW,GAAG;AACtB,qCAA2B;AAAA,QAC5B,OAAO;AACN,gBAAM,SAAS,MAAM,KAAK,YAAY,OAAO,KAAK,QAAQ;AAC1D,qCAA2B,CAAC;AAAA,QAC7B;AAAA,MACD;AAEA,UACC,KAAK,aAAa,4BAClB,CAAC,KAAK,WAAW,GAChB;AACD,aAAK,YAAY,wBAAwB;AAAA,MAC1C;AAAA,IACD;AAAA,EACD;AAAA,EAEU,YAAY,UAAyB;AAC9C,QAAI,KAAK,aAAa,UAAU;AAC/B,WAAK,WAAW;AAEhB,WAAK,qBAAqB,KAAK;AAAA,IAChC;AAAA,EACD;AAAA;AAAA;AAAA,EAMiB,iBAAiB,KAAK,UAAU,IAAI,QAAc,CAAC;AAAA,EAC3D,gBAAgB,KAAK,eAAe;AAAA,EAE7C,aAAsB;AACrB,WAAO,KAAK,OAAO;AAAA,EACpB;AAAA,EAES,UAAgB;AAExB,SAAK,WAAW;AAGhB,SAAK,eAAe,KAAK;AAEzB,UAAM,QAAQ;AAAA,EACf;AAAA;AAAA;AAAA,EAMA,aAAsB;AACrB,WAAO,KAAK,QAAQ;AAAA,EACrB;AAAA;AAqBD;AAtIsB,sBAAf;AAAA,EAMJ;AAAA,GANmB;",
  "names": []
}
