var m=Object.defineProperty;var k=Object.getOwnPropertyDescriptor;var h=(g,p,e,o)=>{for(var i=o>1?void 0:o?k(p,e):p,r=g.length-1,t;r>=0;r--)(t=g[r])&&(i=(o?t(p,e,i):t(i))||i);return o&&i&&m(p,e,i),i},n=(g,p)=>(e,o)=>p(e,o,g);import{Promises as C,ResourceQueue as I}from"../../../../base/common/async.js";import{CancellationToken as R}from"../../../../base/common/cancellation.js";import{onUnexpectedError as W}from"../../../../base/common/errors.js";import{Emitter as d,Event as F}from"../../../../base/common/event.js";import{DisposableStore as D,dispose as S}from"../../../../base/common/lifecycle.js";import{ResourceMap as f}from"../../../../base/common/map.js";import{isWeb as M}from"../../../../base/common/platform.js";import{joinPath as E}from"../../../../base/common/resources.js";import{URI as P}from"../../../../base/common/uri.js";import{localize as w}from"../../../../nls.js";import{FileChangeType as u,FileOperation as v,IFileService as _}from"../../../../platform/files/common/files.js";import{ILabelService as T}from"../../../../platform/label/common/label.js";import{ILogService as b}from"../../../../platform/log/common/log.js";import{INotificationService as U}from"../../../../platform/notification/common/notification.js";import{IProgressService as O}from"../../../../platform/progress/common/progress.js";import{IUriIdentityService as x}from"../../../../platform/uriIdentity/common/uriIdentity.js";import{IEditorService as L}from"../../editor/common/editorService.js";import{IElevatedFileService as q}from"../../files/common/elevatedFileService.js";import{IFilesConfigurationService as B}from"../../filesConfiguration/common/filesConfigurationService.js";import{ILifecycleService as j}from"../../lifecycle/common/lifecycle.js";import{BaseFileWorkingCopyManager as N}from"./abstractFileWorkingCopyManager.js";import{SnapshotContext as V}from"./fileWorkingCopy.js";import{StoredFileWorkingCopy as A,StoredFileWorkingCopyState as c}from"./storedFileWorkingCopy.js";import{IWorkingCopyBackupService as z}from"./workingCopyBackup.js";import{IWorkingCopyEditorService as Q}from"./workingCopyEditorService.js";import{IWorkingCopyFileService as G}from"./workingCopyFileService.js";import{IWorkingCopyService as Y}from"./workingCopyService.js";let y=class extends N{constructor(e,o,i,r,t,s,l,a,J,H,K,X,Z,$,ee,ie){super(i,s,a);this.workingCopyTypeId=e;this.modelFactory=o;this.lifecycleService=r;this.labelService=t;this.workingCopyFileService=l;this.uriIdentityService=J;this.filesConfigurationService=H;this.workingCopyService=K;this.notificationService=X;this.workingCopyEditorService=Z;this.editorService=$;this.elevatedFileService=ee;this.progressService=ie;this.registerListeners()}_onDidResolve=this._register(new d);onDidResolve=this._onDidResolve.event;_onDidChangeDirty=this._register(new d);onDidChangeDirty=this._onDidChangeDirty.event;_onDidChangeReadonly=this._register(new d);onDidChangeReadonly=this._onDidChangeReadonly.event;_onDidChangeOrphaned=this._register(new d);onDidChangeOrphaned=this._onDidChangeOrphaned.event;_onDidSaveError=this._register(new d);onDidSaveError=this._onDidSaveError.event;_onDidSave=this._register(new d);onDidSave=this._onDidSave.event;_onDidRevert=this._register(new d);onDidRevert=this._onDidRevert.event;_onDidRemove=this._register(new d);onDidRemove=this._onDidRemove.event;mapResourceToWorkingCopyListeners=new f;mapResourceToPendingWorkingCopyResolve=new f;workingCopyResolveQueue=this._register(new I);registerListeners(){this._register(this.fileService.onDidFilesChange(e=>this.onDidFilesChange(e))),this._register(this.fileService.onDidChangeFileSystemProviderCapabilities(e=>this.onDidChangeFileSystemProviderCapabilities(e))),this._register(this.fileService.onDidChangeFileSystemProviderRegistrations(e=>this.onDidChangeFileSystemProviderRegistrations(e))),this._register(this.workingCopyFileService.onWillRunWorkingCopyFileOperation(e=>this.onWillRunWorkingCopyFileOperation(e))),this._register(this.workingCopyFileService.onDidFailWorkingCopyFileOperation(e=>this.onDidFailWorkingCopyFileOperation(e))),this._register(this.workingCopyFileService.onDidRunWorkingCopyFileOperation(e=>this.onDidRunWorkingCopyFileOperation(e))),M?this._register(this.lifecycleService.onBeforeShutdown(e=>e.veto(this.onBeforeShutdownWeb(),"veto.fileWorkingCopyManager"))):this._register(this.lifecycleService.onWillShutdown(e=>e.join(this.onWillShutdownDesktop(),{id:"join.fileWorkingCopyManager",label:w("join.fileWorkingCopyManager","Saving working copies")})))}onBeforeShutdownWeb(){return!!this.workingCopies.some(e=>e.hasState(c.PENDING_SAVE))}async onWillShutdownDesktop(){let e;for(;(e=this.workingCopies.filter(o=>o.hasState(c.PENDING_SAVE))).length>0;)await C.settled(e.map(o=>o.joinState(c.PENDING_SAVE)))}onDidChangeFileSystemProviderCapabilities(e){this.queueWorkingCopyReloads(e.scheme)}onDidChangeFileSystemProviderRegistrations(e){e.added&&this.queueWorkingCopyReloads(e.scheme)}onDidFilesChange(e){this.queueWorkingCopyReloads(e)}queueWorkingCopyReloads(e){for(const o of this.workingCopies){if(o.isDirty())continue;let i=!1;typeof e=="string"?i=e===o.resource.scheme:i=e.contains(o.resource,u.UPDATED,u.ADDED),i&&this.queueWorkingCopyReload(o)}}queueWorkingCopyReload(e){this.workingCopyResolveQueue.queueSize(e.resource)<=1&&this.workingCopyResolveQueue.queueFor(e.resource,async()=>{try{await this.reload(e)}catch(i){this.logService.error(i)}})}mapCorrelationIdToWorkingCopiesToRestore=new Map;onWillRunWorkingCopyFileOperation(e){(e.operation===v.MOVE||e.operation===v.COPY)&&e.waitUntil((async()=>{const o=[];for(const{source:i,target:r}of e.files)if(i){if(this.uriIdentityService.extUri.isEqual(i,r))continue;const t=[];for(const s of this.workingCopies)this.uriIdentityService.extUri.isEqualOrParent(s.resource,i)&&t.push(s);for(const s of t){const l=s.resource;let a;this.uriIdentityService.extUri.isEqual(l,i)?a=r:a=E(r,l.path.substr(i.path.length+1)),o.push({source:l,target:a,snapshot:s.isDirty()?await s.model?.snapshot(V.Save,R.None):void 0})}}this.mapCorrelationIdToWorkingCopiesToRestore.set(e.correlationId,o)})())}onDidFailWorkingCopyFileOperation(e){if(e.operation===v.MOVE||e.operation===v.COPY){const o=this.mapCorrelationIdToWorkingCopiesToRestore.get(e.correlationId);if(o){this.mapCorrelationIdToWorkingCopiesToRestore.delete(e.correlationId);for(const i of o)i.snapshot&&this.get(i.source)?.markModified()}}}onDidRunWorkingCopyFileOperation(e){switch(e.operation){case v.CREATE:e.waitUntil((async()=>{for(const{target:o}of e.files){const i=this.get(o);i&&!i.isDisposed()&&await i.revert()}})());break;case v.MOVE:case v.COPY:e.waitUntil((async()=>{const o=this.mapCorrelationIdToWorkingCopiesToRestore.get(e.correlationId);o&&(this.mapCorrelationIdToWorkingCopiesToRestore.delete(e.correlationId),await C.settled(o.map(async i=>{const r=this.uriIdentityService.asCanonicalUri(i.target);await this.resolve(r,{reload:{async:!1},contents:i.snapshot})})))})());break}}async reload(e){await this.joinPendingResolves(e.resource),!(e.isDirty()||e.isDisposed()||!this.has(e.resource))&&await this.doResolve(e,{reload:{async:!1}})}async resolve(e,o){const i=this.joinPendingResolves(e);return i&&await i,this.doResolve(e,o)}async doResolve(e,o){let i,r;P.isUri(e)?(r=e,i=this.get(r)):(r=e.resource,i=e);let t,s=!1;const l={contents:o?.contents,forceReadFromFile:o?.reload?.force,limits:o?.limits};i?o?.contents?t=i.resolve(l):o?.reload?o.reload.async?(t=Promise.resolve(),(async()=>{try{await i.resolve(l)}catch(a){W(a)}})()):t=i.resolve(l):t=Promise.resolve():(s=!0,i=new A(this.workingCopyTypeId,r,this.labelService.getUriBasenameLabel(r),this.modelFactory,async a=>{await this.resolve(r,{...a,reload:{async:!1}})},this.fileService,this.logService,this.workingCopyFileService,this.filesConfigurationService,this.workingCopyBackupService,this.workingCopyService,this.notificationService,this.workingCopyEditorService,this.editorService,this.elevatedFileService,this.progressService),t=i.resolve(l),this.registerWorkingCopy(i)),this.mapResourceToPendingWorkingCopyResolve.set(r,t),this.add(r,i),s&&i.isDirty()&&this._onDidChangeDirty.fire(i);try{await t}catch(a){throw s&&i.dispose(),a}finally{this.mapResourceToPendingWorkingCopyResolve.delete(r)}return s&&i.isDirty()&&this._onDidChangeDirty.fire(i),i}joinPendingResolves(e){if(this.mapResourceToPendingWorkingCopyResolve.get(e))return this.doJoinPendingResolves(e)}async doJoinPendingResolves(e){let o;for(;this.mapResourceToPendingWorkingCopyResolve.has(e);){const i=this.mapResourceToPendingWorkingCopyResolve.get(e);if(i===o)return;o=i;try{await i}catch{}}}registerWorkingCopy(e){const o=new D;o.add(e.onDidResolve(()=>this._onDidResolve.fire(e))),o.add(e.onDidChangeDirty(()=>this._onDidChangeDirty.fire(e))),o.add(e.onDidChangeReadonly(()=>this._onDidChangeReadonly.fire(e))),o.add(e.onDidChangeOrphaned(()=>this._onDidChangeOrphaned.fire(e))),o.add(e.onDidSaveError(()=>this._onDidSaveError.fire(e))),o.add(e.onDidSave(i=>this._onDidSave.fire({workingCopy:e,...i}))),o.add(e.onDidRevert(()=>this._onDidRevert.fire(e))),this.mapResourceToWorkingCopyListeners.set(e.resource,o)}remove(e){const o=super.remove(e),i=this.mapResourceToWorkingCopyListeners.get(e);return i&&(S(i),this.mapResourceToWorkingCopyListeners.delete(e)),o&&this._onDidRemove.fire(e),o}canDispose(e){return e.isDisposed()||!this.mapResourceToPendingWorkingCopyResolve.has(e.resource)&&!e.isDirty()?!0:this.doCanDispose(e)}async doCanDispose(e){const o=this.joinPendingResolves(e.resource);return o?(await o,this.canDispose(e)):e.isDirty()?(await F.toPromise(e.onDidChangeDirty),this.canDispose(e)):!0}dispose(){super.dispose(),this.mapResourceToPendingWorkingCopyResolve.clear(),S(this.mapResourceToWorkingCopyListeners.values()),this.mapResourceToWorkingCopyListeners.clear()}};y=h([n(2,_),n(3,j),n(4,T),n(5,b),n(6,G),n(7,z),n(8,x),n(9,B),n(10,Y),n(11,U),n(12,Q),n(13,L),n(14,q),n(15,O)],y);export{y as StoredFileWorkingCopyManager};
