{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/workingCopy/common/workingCopyEditorService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Emitter, Event } from '../../../../base/common/event.js';\nimport { createDecorator } from '../../../../platform/instantiation/common/instantiation.js';\nimport { InstantiationType, registerSingleton } from '../../../../platform/instantiation/common/extensions.js';\nimport { EditorsOrder, IEditorIdentifier } from '../../../common/editor.js';\nimport { EditorInput } from '../../../common/editor/editorInput.js';\nimport { IWorkingCopy, IWorkingCopyIdentifier } from './workingCopy.js';\nimport { Disposable, IDisposable, toDisposable } from '../../../../base/common/lifecycle.js';\nimport { IEditorService } from '../../editor/common/editorService.js';\n\nexport const IWorkingCopyEditorService = createDecorator<IWorkingCopyEditorService>('workingCopyEditorService');\n\nexport interface IWorkingCopyEditorHandler {\n\n\t/**\n\t * Whether the handler is capable of opening the specific backup in\n\t * an editor.\n\t */\n\thandles(workingCopy: IWorkingCopyIdentifier): boolean | Promise<boolean>;\n\n\t/**\n\t * Whether the provided working copy is opened in the provided editor.\n\t */\n\tisOpen(workingCopy: IWorkingCopyIdentifier, editor: EditorInput): boolean;\n\n\t/**\n\t * Create an editor that is suitable of opening the provided working copy.\n\t */\n\tcreateEditor(workingCopy: IWorkingCopyIdentifier): EditorInput | Promise<EditorInput>;\n}\n\nexport interface IWorkingCopyEditorService {\n\n\treadonly _serviceBrand: undefined;\n\n\t/**\n\t * An event fired whenever a handler is registered.\n\t */\n\treadonly onDidRegisterHandler: Event<IWorkingCopyEditorHandler>;\n\n\t/**\n\t * Register a handler to the working copy editor service.\n\t */\n\tregisterHandler(handler: IWorkingCopyEditorHandler): IDisposable;\n\n\t/**\n\t * Finds the first editor that can handle the provided working copy.\n\t */\n\tfindEditor(workingCopy: IWorkingCopy): IEditorIdentifier | undefined;\n}\n\nexport class WorkingCopyEditorService extends Disposable implements IWorkingCopyEditorService {\n\n\tdeclare readonly _serviceBrand: undefined;\n\n\tprivate readonly _onDidRegisterHandler = this._register(new Emitter<IWorkingCopyEditorHandler>());\n\treadonly onDidRegisterHandler = this._onDidRegisterHandler.event;\n\n\tprivate readonly handlers = new Set<IWorkingCopyEditorHandler>();\n\n\tconstructor(@IEditorService private readonly editorService: IEditorService) {\n\t\tsuper();\n\t}\n\n\tregisterHandler(handler: IWorkingCopyEditorHandler): IDisposable {\n\n\t\t// Add to registry and emit as event\n\t\tthis.handlers.add(handler);\n\t\tthis._onDidRegisterHandler.fire(handler);\n\n\t\treturn toDisposable(() => this.handlers.delete(handler));\n\t}\n\n\tfindEditor(workingCopy: IWorkingCopy): IEditorIdentifier | undefined {\n\t\tfor (const editorIdentifier of this.editorService.getEditors(EditorsOrder.MOST_RECENTLY_ACTIVE)) {\n\t\t\tif (this.isOpen(workingCopy, editorIdentifier.editor)) {\n\t\t\t\treturn editorIdentifier;\n\t\t\t}\n\t\t}\n\n\t\treturn undefined;\n\t}\n\n\tprivate isOpen(workingCopy: IWorkingCopy, editor: EditorInput): boolean {\n\t\tfor (const handler of this.handlers) {\n\t\t\tif (handler.isOpen(workingCopy, editor)) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t}\n}\n\n// Register Service\nregisterSingleton(IWorkingCopyEditorService, WorkingCopyEditorService, InstantiationType.Delayed);\n"],
  "mappings": ";;;;;;;;;;;;AAKA,SAAS,SAAS,aAAa;AAC/B,SAAS,uBAAuB;AAChC,SAAS,mBAAmB,yBAAyB;AACrD,SAAS,cAAc,yBAAyB;AAChD,SAAS,mBAAmB;AAC5B,SAAS,cAAc,8BAA8B;AACrD,SAAS,YAAY,aAAa,oBAAoB;AACtD,SAAS,sBAAsB;AAExB,MAAM,4BAA4B,gBAA2C,0BAA0B;AAyCvG,IAAM,2BAAN,cAAuC,WAAgD;AAAA,EAS7F,YAA6C,eAA+B;AAC3E,UAAM;AADsC;AAAA,EAE7C;AAAA,EAlED,OAuD8F;AAAA;AAAA;AAAA,EAI5E,wBAAwB,KAAK,UAAU,IAAI,QAAmC,CAAC;AAAA,EACvF,uBAAuB,KAAK,sBAAsB;AAAA,EAE1C,WAAW,oBAAI,IAA+B;AAAA,EAM/D,gBAAgB,SAAiD;AAGhE,SAAK,SAAS,IAAI,OAAO;AACzB,SAAK,sBAAsB,KAAK,OAAO;AAEvC,WAAO,aAAa,MAAM,KAAK,SAAS,OAAO,OAAO,CAAC;AAAA,EACxD;AAAA,EAEA,WAAW,aAA0D;AACpE,eAAW,oBAAoB,KAAK,cAAc,WAAW,aAAa,oBAAoB,GAAG;AAChG,UAAI,KAAK,OAAO,aAAa,iBAAiB,MAAM,GAAG;AACtD,eAAO;AAAA,MACR;AAAA,IACD;AAEA,WAAO;AAAA,EACR;AAAA,EAEQ,OAAO,aAA2B,QAA8B;AACvE,eAAW,WAAW,KAAK,UAAU;AACpC,UAAI,QAAQ,OAAO,aAAa,MAAM,GAAG;AACxC,eAAO;AAAA,MACR;AAAA,IACD;AAEA,WAAO;AAAA,EACR;AACD;AAzCa,2BAAN;AAAA,EASO;AAAA,GATD;AA4Cb,kBAAkB,2BAA2B,0BAA0B,kBAAkB,OAAO;",
  "names": []
}
