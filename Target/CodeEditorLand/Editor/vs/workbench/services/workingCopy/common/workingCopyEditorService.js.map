{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/workingCopy/common/workingCopyEditorService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Emitter, type Event } from \"../../../../base/common/event.js\";\nimport {\n\tDisposable,\n\ttype IDisposable,\n\ttoDisposable,\n} from \"../../../../base/common/lifecycle.js\";\nimport {\n\tInstantiationType,\n\tregisterSingleton,\n} from \"../../../../platform/instantiation/common/extensions.js\";\nimport { createDecorator } from \"../../../../platform/instantiation/common/instantiation.js\";\nimport {\n\tEditorsOrder,\n\ttype IEditorIdentifier,\n} from \"../../../common/editor.js\";\nimport type { EditorInput } from \"../../../common/editor/editorInput.js\";\nimport { IEditorService } from \"../../editor/common/editorService.js\";\nimport type { IWorkingCopy, IWorkingCopyIdentifier } from \"./workingCopy.js\";\n\nexport const IWorkingCopyEditorService =\n\tcreateDecorator<IWorkingCopyEditorService>(\"workingCopyEditorService\");\n\nexport interface IWorkingCopyEditorHandler {\n\t/**\n\t * Whether the handler is capable of opening the specific backup in\n\t * an editor.\n\t */\n\thandles(workingCopy: IWorkingCopyIdentifier): boolean | Promise<boolean>;\n\n\t/**\n\t * Whether the provided working copy is opened in the provided editor.\n\t */\n\tisOpen(workingCopy: IWorkingCopyIdentifier, editor: EditorInput): boolean;\n\n\t/**\n\t * Create an editor that is suitable of opening the provided working copy.\n\t */\n\tcreateEditor(\n\t\tworkingCopy: IWorkingCopyIdentifier,\n\t): EditorInput | Promise<EditorInput>;\n}\n\nexport interface IWorkingCopyEditorService {\n\treadonly _serviceBrand: undefined;\n\n\t/**\n\t * An event fired whenever a handler is registered.\n\t */\n\treadonly onDidRegisterHandler: Event<IWorkingCopyEditorHandler>;\n\n\t/**\n\t * Register a handler to the working copy editor service.\n\t */\n\tregisterHandler(handler: IWorkingCopyEditorHandler): IDisposable;\n\n\t/**\n\t * Finds the first editor that can handle the provided working copy.\n\t */\n\tfindEditor(workingCopy: IWorkingCopy): IEditorIdentifier | undefined;\n}\n\nexport class WorkingCopyEditorService\n\textends Disposable\n\timplements IWorkingCopyEditorService\n{\n\tdeclare readonly _serviceBrand: undefined;\n\n\tprivate readonly _onDidRegisterHandler = this._register(\n\t\tnew Emitter<IWorkingCopyEditorHandler>(),\n\t);\n\treadonly onDidRegisterHandler = this._onDidRegisterHandler.event;\n\n\tprivate readonly handlers = new Set<IWorkingCopyEditorHandler>();\n\n\tconstructor(\n\t\t@IEditorService private readonly editorService: IEditorService,\n\t) {\n\t\tsuper();\n\t}\n\n\tregisterHandler(handler: IWorkingCopyEditorHandler): IDisposable {\n\t\t// Add to registry and emit as event\n\t\tthis.handlers.add(handler);\n\t\tthis._onDidRegisterHandler.fire(handler);\n\n\t\treturn toDisposable(() => this.handlers.delete(handler));\n\t}\n\n\tfindEditor(workingCopy: IWorkingCopy): IEditorIdentifier | undefined {\n\t\tfor (const editorIdentifier of this.editorService.getEditors(\n\t\t\tEditorsOrder.MOST_RECENTLY_ACTIVE,\n\t\t)) {\n\t\t\tif (this.isOpen(workingCopy, editorIdentifier.editor)) {\n\t\t\t\treturn editorIdentifier;\n\t\t\t}\n\t\t}\n\n\t\treturn undefined;\n\t}\n\n\tprivate isOpen(workingCopy: IWorkingCopy, editor: EditorInput): boolean {\n\t\tfor (const handler of this.handlers) {\n\t\t\tif (handler.isOpen(workingCopy, editor)) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t}\n}\n\n// Register Service\nregisterSingleton(\n\tIWorkingCopyEditorService,\n\tWorkingCopyEditorService,\n\tInstantiationType.Delayed,\n);\n"],
  "mappings": ";;;;;;;;;;;;AAKA,SAAS,eAA2B;AACpC;AAAA,EACC;AAAA,EAEA;AAAA,OACM;AACP;AAAA,EACC;AAAA,EACA;AAAA,OACM;AACP,SAAS,uBAAuB;AAChC;AAAA,EACC;AAAA,OAEM;AAEP,SAAS,sBAAsB;AAGxB,MAAM,4BACZ,gBAA2C,0BAA0B;AAyC/D,IAAM,2BAAN,cACE,WAET;AAAA,EAUC,YACkC,eAChC;AACD,UAAM;AAF2B;AAAA,EAGlC;AAAA,EAnFD,OAqEA;AAAA;AAAA;AAAA,EAGkB,wBAAwB,KAAK;AAAA,IAC7C,IAAI,QAAmC;AAAA,EACxC;AAAA,EACS,uBAAuB,KAAK,sBAAsB;AAAA,EAE1C,WAAW,oBAAI,IAA+B;AAAA,EAQ/D,gBAAgB,SAAiD;AAEhE,SAAK,SAAS,IAAI,OAAO;AACzB,SAAK,sBAAsB,KAAK,OAAO;AAEvC,WAAO,aAAa,MAAM,KAAK,SAAS,OAAO,OAAO,CAAC;AAAA,EACxD;AAAA,EAEA,WAAW,aAA0D;AACpE,eAAW,oBAAoB,KAAK,cAAc;AAAA,MACjD,aAAa;AAAA,IACd,GAAG;AACF,UAAI,KAAK,OAAO,aAAa,iBAAiB,MAAM,GAAG;AACtD,eAAO;AAAA,MACR;AAAA,IACD;AAEA,WAAO;AAAA,EACR;AAAA,EAEQ,OAAO,aAA2B,QAA8B;AACvE,eAAW,WAAW,KAAK,UAAU;AACpC,UAAI,QAAQ,OAAO,aAAa,MAAM,GAAG;AACxC,eAAO;AAAA,MACR;AAAA,IACD;AAEA,WAAO;AAAA,EACR;AACD;AAhDa,2BAAN;AAAA,EAcJ;AAAA,GAdU;AAmDb;AAAA,EACC;AAAA,EACA;AAAA,EACA,kBAAkB;AACnB;",
  "names": []
}
