var v=Object.defineProperty;var c=Object.getOwnPropertyDescriptor;var h=(n,o,e,i)=>{for(var t=i>1?void 0:i?c(o,e):o,a=n.length-1,s;a>=0;a--)(s=n[a])&&(t=(i?s(o,e,t):s(t))||t);return i&&t&&v(o,e,t),t},l=(n,o)=>(e,i)=>o(e,i,n);import{raceCancellation as C}from"../../../../base/common/async.js";import{CancellationToken as g}from"../../../../base/common/cancellation.js";import{Emitter as r}from"../../../../base/common/event.js";import{Disposable as f}from"../../../../base/common/lifecycle.js";import{emptyStream as m}from"../../../../base/common/stream.js";import{ILogService as k}from"../../../../platform/log/common/log.js";import{SnapshotContext as u}from"./fileWorkingCopy.js";import{WorkingCopyCapabilities as p}from"./workingCopy.js";import{IWorkingCopyBackupService as M}from"./workingCopyBackup.js";import{IWorkingCopyService as I}from"./workingCopyService.js";let d=class extends f{constructor(e,i,t,a,s,W,S,D,y,F,_){super();this.typeId=e;this.resource=i;this.name=t;this.hasAssociatedFilePath=a;this.isScratchpad=s;this.initialContents=W;this.modelFactory=S;this.saveDelegate=D;this.workingCopyBackupService=F;this.logService=_;this._register(y.registerWorkingCopy(this))}capabilities=this.isScratchpad?p.Untitled|p.Scratchpad:p.Untitled;_model=void 0;get model(){return this._model}_onDidChangeContent=this._register(new r);onDidChangeContent=this._onDidChangeContent.event;_onDidChangeDirty=this._register(new r);onDidChangeDirty=this._onDidChangeDirty.event;_onDidSave=this._register(new r);onDidSave=this._onDidSave.event;_onDidRevert=this._register(new r);onDidRevert=this._onDidRevert.event;_onWillDispose=this._register(new r);onWillDispose=this._onWillDispose.event;modified=this.hasAssociatedFilePath||!!(this.initialContents&&this.initialContents.markModified!==!1);isDirty(){return this.modified&&!this.isScratchpad}isModified(){return this.modified}setModified(e){this.modified!==e&&(this.modified=e,this.isScratchpad||this._onDidChangeDirty.fire())}async resolve(){if(this.trace("resolve()"),this.isResolved()){this.trace("resolve() - exit (already resolved)");return}let e;const i=await this.workingCopyBackupService.resolve(this);i?(this.trace("resolve() - with backup"),e=i.value):this.initialContents?.value?(this.trace("resolve() - with initial contents"),e=this.initialContents.value):(this.trace("resolve() - empty"),e=m()),await this.doCreateModel(e),this.setModified(this.hasAssociatedFilePath||!!i||!!(this.initialContents&&this.initialContents.markModified!==!1)),(i||this.initialContents)&&this._onDidChangeContent.fire()}async doCreateModel(e){this.trace("doCreateModel()"),this._model=this._register(await this.modelFactory.createModel(this.resource,e,g.None)),this.installModelListeners(this._model)}installModelListeners(e){this._register(e.onDidChangeContent(i=>this.onModelContentChanged(i))),this._register(e.onWillDispose(()=>this.dispose()))}onModelContentChanged(e){!this.hasAssociatedFilePath&&e.isInitial?this.setModified(!1):this.setModified(!0),this._onDidChangeContent.fire()}isResolved(){return!!this.model}get backupDelay(){return this.model?.configuration?.backupDelay}async backup(e){let i;return this.isResolved()?i=await C(this.model.snapshot(u.Backup,e),e):this.initialContents&&(i=this.initialContents.value),{content:i}}async save(e){this.trace("save()");const i=await this.saveDelegate(this,e);return i&&this._onDidSave.fire({reason:e?.reason,source:e?.source}),i}async revert(){this.trace("revert()"),this.setModified(!1),this._onDidRevert.fire(),this.dispose()}dispose(){this.trace("dispose()"),this._onWillDispose.fire(),super.dispose()}trace(e){this.logService.trace(`[untitled file working copy] ${e}`,this.resource.toString(),this.typeId)}};d=h([l(8,I),l(9,M),l(10,k)],d);export{d as UntitledFileWorkingCopy};
