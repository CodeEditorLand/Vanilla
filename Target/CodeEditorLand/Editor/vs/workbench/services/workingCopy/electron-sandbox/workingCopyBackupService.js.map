{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/workingCopy/electron-sandbox/workingCopyBackupService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { URI } from \"../../../../base/common/uri.js\";\nimport { localize } from \"../../../../nls.js\";\nimport { IFileService } from \"../../../../platform/files/common/files.js\";\nimport {\n\tInstantiationType,\n\tregisterSingleton,\n} from \"../../../../platform/instantiation/common/extensions.js\";\nimport { ILogService } from \"../../../../platform/log/common/log.js\";\nimport {\n\tWorkbenchPhase,\n\tregisterWorkbenchContribution2,\n} from \"../../../common/contributions.js\";\nimport { INativeWorkbenchEnvironmentService } from \"../../environment/electron-sandbox/environmentService.js\";\nimport { ILifecycleService } from \"../../lifecycle/common/lifecycle.js\";\nimport { IWorkingCopyBackupService } from \"../common/workingCopyBackup.js\";\nimport { WorkingCopyBackupService } from \"../common/workingCopyBackupService.js\";\nimport { NativeWorkingCopyBackupTracker } from \"./workingCopyBackupTracker.js\";\n\nexport class NativeWorkingCopyBackupService extends WorkingCopyBackupService {\n\tconstructor(\n\t\t@INativeWorkbenchEnvironmentService environmentService: INativeWorkbenchEnvironmentService,\n\t\t@IFileService fileService: IFileService,\n\t\t@ILogService logService: ILogService,\n\t\t@ILifecycleService private readonly lifecycleService: ILifecycleService\n\t) {\n\t\tsuper(environmentService.backupPath ? URI.file(environmentService.backupPath).with({ scheme: environmentService.userRoamingDataHome.scheme }) : undefined, fileService, logService);\n\n\t\tthis.registerListeners();\n\t}\n\n\tprivate registerListeners(): void {\n\t\t// Lifecycle: ensure to prolong the shutdown for as long\n\t\t// as pending backup operations have not finished yet.\n\t\t// Otherwise, we risk writing partial backups to disk.\n\t\tthis._register(\n\t\t\tthis.lifecycleService.onWillShutdown((event) =>\n\t\t\t\tevent.join(this.joinBackups(), {\n\t\t\t\t\tid: \"join.workingCopyBackups\",\n\t\t\t\t\tlabel: localize(\n\t\t\t\t\t\t\"join.workingCopyBackups\",\n\t\t\t\t\t\t\"Backup working copies\",\n\t\t\t\t\t),\n\t\t\t\t}),\n\t\t\t),\n\t\t);\n\t}\n}\n\n// Register Service\nregisterSingleton(\n\tIWorkingCopyBackupService,\n\tNativeWorkingCopyBackupService,\n\tInstantiationType.Eager,\n);\n\n// Register Backup Tracker\nregisterWorkbenchContribution2(\n\tNativeWorkingCopyBackupTracker.ID,\n\tNativeWorkingCopyBackupTracker,\n\tWorkbenchPhase.BlockStartup,\n);\n"],
  "mappings": ";;;;;;;;;;;;AAKA,SAAS,WAAW;AACpB,SAAS,gBAAgB;AACzB,SAAS,oBAAoB;AAC7B;AAAA,EACC;AAAA,EACA;AAAA,OACM;AACP,SAAS,mBAAmB;AAC5B;AAAA,EACC;AAAA,EACA;AAAA,OACM;AACP,SAAS,0CAA0C;AACnD,SAAS,yBAAyB;AAClC,SAAS,iCAAiC;AAC1C,SAAS,gCAAgC;AACzC,SAAS,sCAAsC;AAExC,IAAM,iCAAN,cAA6C,yBAAyB;AAAA,EAC5E,YACqC,oBACtB,aACD,YACuB,kBACnC;AACD,UAAM,mBAAmB,aAAa,IAAI,KAAK,mBAAmB,UAAU,EAAE,KAAK,EAAE,QAAQ,mBAAmB,oBAAoB,OAAO,CAAC,IAAI,QAAW,aAAa,UAAU;AAF9I;AAIpC,SAAK,kBAAkB;AAAA,EACxB;AAAA,EAjCD,OAuB6E;AAAA;AAAA;AAAA,EAYpE,oBAA0B;AAIjC,SAAK;AAAA,MACJ,KAAK,iBAAiB;AAAA,QAAe,CAAC,UACrC,MAAM,KAAK,KAAK,YAAY,GAAG;AAAA,UAC9B,IAAI;AAAA,UACJ,OAAO;AAAA,YACN;AAAA,YACA;AAAA,UACD;AAAA,QACD,CAAC;AAAA,MACF;AAAA,IACD;AAAA,EACD;AACD;AA5Ba,iCAAN;AAAA,EAEJ;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,GALU;AA+Bb;AAAA,EACC;AAAA,EACA;AAAA,EACA,kBAAkB;AACnB;AAGA;AAAA,EACC,+BAA+B;AAAA,EAC/B;AAAA,EACA,eAAe;AAChB;",
  "names": []
}
