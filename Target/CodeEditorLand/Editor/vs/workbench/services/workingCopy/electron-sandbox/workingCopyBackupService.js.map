{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/workingCopy/electron-sandbox/workingCopyBackupService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { localize } from '../../../../nls.js';\nimport { WorkingCopyBackupService } from '../common/workingCopyBackupService.js';\nimport { URI } from '../../../../base/common/uri.js';\nimport { InstantiationType, registerSingleton } from '../../../../platform/instantiation/common/extensions.js';\nimport { IWorkingCopyBackupService } from '../common/workingCopyBackup.js';\nimport { IFileService } from '../../../../platform/files/common/files.js';\nimport { ILogService } from '../../../../platform/log/common/log.js';\nimport { INativeWorkbenchEnvironmentService } from '../../environment/electron-sandbox/environmentService.js';\nimport { WorkbenchPhase, registerWorkbenchContribution2 } from '../../../common/contributions.js';\nimport { ILifecycleService } from '../../lifecycle/common/lifecycle.js';\nimport { NativeWorkingCopyBackupTracker } from './workingCopyBackupTracker.js';\n\nexport class NativeWorkingCopyBackupService extends WorkingCopyBackupService {\n\n\tconstructor(\n\t\t@INativeWorkbenchEnvironmentService environmentService: INativeWorkbenchEnvironmentService,\n\t\t@IFileService fileService: IFileService,\n\t\t@ILogService logService: ILogService,\n\t\t@ILifecycleService private readonly lifecycleService: ILifecycleService\n\t) {\n\t\tsuper(environmentService.backupPath ? URI.file(environmentService.backupPath).with({ scheme: environmentService.userRoamingDataHome.scheme }) : undefined, fileService, logService);\n\n\t\tthis.registerListeners();\n\t}\n\n\tprivate registerListeners(): void {\n\n\t\t// Lifecycle: ensure to prolong the shutdown for as long\n\t\t// as pending backup operations have not finished yet.\n\t\t// Otherwise, we risk writing partial backups to disk.\n\t\tthis._register(this.lifecycleService.onWillShutdown(event => event.join(this.joinBackups(), { id: 'join.workingCopyBackups', label: localize('join.workingCopyBackups', \"Backup working copies\") })));\n\t}\n}\n\n// Register Service\nregisterSingleton(IWorkingCopyBackupService, NativeWorkingCopyBackupService, InstantiationType.Eager);\n\n// Register Backup Tracker\nregisterWorkbenchContribution2(NativeWorkingCopyBackupTracker.ID, NativeWorkingCopyBackupTracker, WorkbenchPhase.BlockStartup);\n"],
  "mappings": ";;;;;;;;;;;;AAKA,SAAS,gBAAgB;AACzB,SAAS,gCAAgC;AACzC,SAAS,WAAW;AACpB,SAAS,mBAAmB,yBAAyB;AACrD,SAAS,iCAAiC;AAC1C,SAAS,oBAAoB;AAC7B,SAAS,mBAAmB;AAC5B,SAAS,0CAA0C;AACnD,SAAS,gBAAgB,sCAAsC;AAC/D,SAAS,yBAAyB;AAClC,SAAS,sCAAsC;AAExC,IAAM,iCAAN,cAA6C,yBAAyB;AAAA,EAE5E,YACqC,oBACtB,aACD,YACuB,kBACnC;AACD,UAAM,mBAAmB,aAAa,IAAI,KAAK,mBAAmB,UAAU,EAAE,KAAK,EAAE,QAAQ,mBAAmB,oBAAoB,OAAO,CAAC,IAAI,QAAW,aAAa,UAAU;AAF9I;AAIpC,SAAK,kBAAkB;AAAA,EACxB;AAAA,EA5BD,OAiB6E;AAAA;AAAA;AAAA,EAapE,oBAA0B;AAKjC,SAAK,UAAU,KAAK,iBAAiB,eAAe,WAAS,MAAM,KAAK,KAAK,YAAY,GAAG,EAAE,IAAI,2BAA2B,OAAO,SAAS,2BAA2B,uBAAuB,EAAE,CAAC,CAAC,CAAC;AAAA,EACrM;AACD;AApBa,iCAAN;AAAA,EAGJ;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,GANU;AAuBb,kBAAkB,2BAA2B,gCAAgC,kBAAkB,KAAK;AAGpG,+BAA+B,+BAA+B,IAAI,gCAAgC,eAAe,YAAY;",
  "names": []
}
