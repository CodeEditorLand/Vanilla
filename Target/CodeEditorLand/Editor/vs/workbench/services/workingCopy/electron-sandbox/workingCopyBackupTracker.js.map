{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/workingCopy/electron-sandbox/workingCopyBackupTracker.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Promises, raceCancellation } from \"../../../../base/common/async.js\";\nimport {\n\ttype CancellationToken,\n\tCancellationTokenSource,\n} from \"../../../../base/common/cancellation.js\";\nimport { isMacintosh } from \"../../../../base/common/platform.js\";\nimport { localize } from \"../../../../nls.js\";\nimport {\n\tConfirmResult,\n\tIDialogService,\n\tIFileDialogService,\n\tgetFileNamesMessage,\n} from \"../../../../platform/dialogs/common/dialogs.js\";\nimport { IEnvironmentService } from \"../../../../platform/environment/common/environment.js\";\nimport { HotExitConfiguration } from \"../../../../platform/files/common/files.js\";\nimport { ILogService } from \"../../../../platform/log/common/log.js\";\nimport { INativeHostService } from \"../../../../platform/native/common/native.js\";\nimport {\n\tIProgressService,\n\tProgressLocation,\n} from \"../../../../platform/progress/common/progress.js\";\nimport {\n\tIWorkspaceContextService,\n\tWorkbenchState,\n} from \"../../../../platform/workspace/common/workspace.js\";\nimport type { IWorkbenchContribution } from \"../../../common/contributions.js\";\nimport { SaveReason } from \"../../../common/editor.js\";\nimport { IEditorGroupsService } from \"../../editor/common/editorGroupsService.js\";\nimport { IEditorService } from \"../../editor/common/editorService.js\";\nimport {\n\tAutoSaveMode,\n\tIFilesConfigurationService,\n} from \"../../filesConfiguration/common/filesConfigurationService.js\";\nimport {\n\tILifecycleService,\n\tShutdownReason,\n} from \"../../lifecycle/common/lifecycle.js\";\nimport {\n\ttype IWorkingCopy,\n\ttype IWorkingCopyIdentifier,\n\tWorkingCopyCapabilities,\n} from \"../common/workingCopy.js\";\nimport { IWorkingCopyBackupService } from \"../common/workingCopyBackup.js\";\nimport { WorkingCopyBackupTracker } from \"../common/workingCopyBackupTracker.js\";\nimport { IWorkingCopyEditorService } from \"../common/workingCopyEditorService.js\";\nimport { IWorkingCopyService } from \"../common/workingCopyService.js\";\n\nexport class NativeWorkingCopyBackupTracker\n\textends WorkingCopyBackupTracker\n\timplements IWorkbenchContribution\n{\n\tstatic readonly ID = \"workbench.contrib.nativeWorkingCopyBackupTracker\";\n\n\tconstructor(\n\t\t@IWorkingCopyBackupService workingCopyBackupService: IWorkingCopyBackupService,\n\t\t@IFilesConfigurationService filesConfigurationService: IFilesConfigurationService,\n\t\t@IWorkingCopyService workingCopyService: IWorkingCopyService,\n\t\t@ILifecycleService lifecycleService: ILifecycleService,\n\t\t@IFileDialogService private readonly fileDialogService: IFileDialogService,\n\t\t@IDialogService private readonly dialogService: IDialogService,\n\t\t@IWorkspaceContextService private readonly contextService: IWorkspaceContextService,\n\t\t@INativeHostService private readonly nativeHostService: INativeHostService,\n\t\t@ILogService logService: ILogService,\n\t\t@IEnvironmentService private readonly environmentService: IEnvironmentService,\n\t\t@IProgressService private readonly progressService: IProgressService,\n\t\t@IWorkingCopyEditorService workingCopyEditorService: IWorkingCopyEditorService,\n\t\t@IEditorService editorService: IEditorService,\n\t\t@IEditorGroupsService editorGroupService: IEditorGroupsService\n\t) {\n\t\tsuper(workingCopyBackupService, workingCopyService, logService, lifecycleService, filesConfigurationService, workingCopyEditorService, editorService, editorGroupService);\n\t}\n\n\tprotected async onFinalBeforeShutdown(\n\t\treason: ShutdownReason,\n\t): Promise<boolean> {\n\t\t// Important: we are about to shutdown and handle modified working copies\n\t\t// and backups. We do not want any pending backup ops to interfer with\n\t\t// this because there is a risk of a backup being scheduled after we have\n\t\t// acknowledged to shutdown and then might end up with partial backups\n\t\t// written to disk, or even empty backups or deletes after writes.\n\t\t// (https://github.com/microsoft/vscode/issues/138055)\n\n\t\tthis.cancelBackupOperations();\n\n\t\t// For the duration of the shutdown handling, suspend backup operations\n\t\t// and only resume after we have handled backups. Similar to above, we\n\t\t// do not want to trigger backup tracking during our shutdown handling\n\t\t// but we must resume, in case of a veto afterwards.\n\n\t\tconst { resume } = this.suspendBackupOperations();\n\n\t\ttry {\n\t\t\t// Modified working copies need treatment on shutdown\n\t\t\tconst modifiedWorkingCopies =\n\t\t\t\tthis.workingCopyService.modifiedWorkingCopies;\n\t\t\tif (modifiedWorkingCopies.length) {\n\t\t\t\treturn await this.onBeforeShutdownWithModified(\n\t\t\t\t\treason,\n\t\t\t\t\tmodifiedWorkingCopies,\n\t\t\t\t);\n\t\t\t}\n\n\t\t\t// No modified working copies\n\t\t\telse {\n\t\t\t\treturn await this.onBeforeShutdownWithoutModified();\n\t\t\t}\n\t\t} finally {\n\t\t\tresume();\n\t\t}\n\t}\n\n\tprotected async onBeforeShutdownWithModified(\n\t\treason: ShutdownReason,\n\t\tmodifiedWorkingCopies: readonly IWorkingCopy[],\n\t): Promise<boolean> {\n\t\t// If auto save is enabled, save all non-untitled working copies\n\t\t// and then check again for modified copies\n\n\t\tconst workingCopiesToAutoSave = modifiedWorkingCopies.filter(\n\t\t\t(wc) =>\n\t\t\t\t!(wc.capabilities & WorkingCopyCapabilities.Untitled) &&\n\t\t\t\tthis.filesConfigurationService.getAutoSaveMode(wc.resource)\n\t\t\t\t\t.mode !== AutoSaveMode.OFF,\n\t\t);\n\t\tif (workingCopiesToAutoSave.length > 0) {\n\t\t\t// Save all modified working copies that can be auto-saved\n\t\t\ttry {\n\t\t\t\tawait this.doSaveAllBeforeShutdown(\n\t\t\t\t\tworkingCopiesToAutoSave,\n\t\t\t\t\tSaveReason.AUTO,\n\t\t\t\t);\n\t\t\t} catch (error) {\n\t\t\t\tthis.logService.error(\n\t\t\t\t\t`[backup tracker] error saving modified working copies: ${error}`,\n\t\t\t\t); // guard against misbehaving saves, we handle remaining modified below\n\t\t\t}\n\n\t\t\t// If we still have modified working copies, we either have untitled ones or working copies that cannot be saved\n\t\t\tconst remainingModifiedWorkingCopies =\n\t\t\t\tthis.workingCopyService.modifiedWorkingCopies;\n\t\t\tif (remainingModifiedWorkingCopies.length) {\n\t\t\t\treturn this.handleModifiedBeforeShutdown(\n\t\t\t\t\tremainingModifiedWorkingCopies,\n\t\t\t\t\treason,\n\t\t\t\t);\n\t\t\t}\n\n\t\t\treturn this.noVeto([...modifiedWorkingCopies]); // no veto (modified auto-saved)\n\t\t}\n\n\t\t// Auto save is not enabled\n\t\treturn this.handleModifiedBeforeShutdown(modifiedWorkingCopies, reason);\n\t}\n\n\tprivate async handleModifiedBeforeShutdown(\n\t\tmodifiedWorkingCopies: readonly IWorkingCopy[],\n\t\treason: ShutdownReason,\n\t): Promise<boolean> {\n\t\t// Trigger backup if configured and enabled for shutdown reason\n\t\tlet backups: IWorkingCopy[] = [];\n\t\tlet backupError: Error | undefined;\n\t\tconst modifiedWorkingCopiesToBackup =\n\t\t\tawait this.shouldBackupBeforeShutdown(\n\t\t\t\treason,\n\t\t\t\tmodifiedWorkingCopies,\n\t\t\t);\n\t\tif (modifiedWorkingCopiesToBackup.length > 0) {\n\t\t\ttry {\n\t\t\t\tconst backupResult = await this.backupBeforeShutdown(\n\t\t\t\t\tmodifiedWorkingCopiesToBackup,\n\t\t\t\t);\n\t\t\t\tbackups = backupResult.backups;\n\t\t\t\tbackupError = backupResult.error;\n\n\t\t\t\tif (backups.length === modifiedWorkingCopies.length) {\n\t\t\t\t\treturn false; // no veto (backup was successful for all working copies)\n\t\t\t\t}\n\t\t\t} catch (error) {\n\t\t\t\tbackupError = error;\n\t\t\t}\n\t\t}\n\n\t\tconst remainingModifiedWorkingCopies = modifiedWorkingCopies.filter(\n\t\t\t(workingCopy) => !backups.includes(workingCopy),\n\t\t);\n\n\t\t// We ran a backup but received an error that we show to the user\n\t\tif (backupError) {\n\t\t\tif (this.environmentService.isExtensionDevelopment) {\n\t\t\t\tthis.logService.error(\n\t\t\t\t\t`[backup tracker] error creating backups: ${backupError}`,\n\t\t\t\t);\n\n\t\t\t\treturn false; // do not block shutdown during extension development (https://github.com/microsoft/vscode/issues/115028)\n\t\t\t}\n\n\t\t\treturn this.showErrorDialog(\n\t\t\t\tlocalize(\n\t\t\t\t\t\"backupTrackerBackupFailed\",\n\t\t\t\t\t\"The following editors with unsaved changes could not be saved to the backup location.\",\n\t\t\t\t),\n\t\t\t\tremainingModifiedWorkingCopies,\n\t\t\t\tbackupError,\n\t\t\t\treason,\n\t\t\t);\n\t\t}\n\n\t\t// Since a backup did not happen, we have to confirm for\n\t\t// the working copies that did not successfully backup\n\n\t\ttry {\n\t\t\treturn await this.confirmBeforeShutdown(\n\t\t\t\tremainingModifiedWorkingCopies,\n\t\t\t);\n\t\t} catch (error) {\n\t\t\tif (this.environmentService.isExtensionDevelopment) {\n\t\t\t\tthis.logService.error(\n\t\t\t\t\t`[backup tracker] error saving or reverting modified working copies: ${error}`,\n\t\t\t\t);\n\n\t\t\t\treturn false; // do not block shutdown during extension development (https://github.com/microsoft/vscode/issues/115028)\n\t\t\t}\n\n\t\t\treturn this.showErrorDialog(\n\t\t\t\tlocalize(\n\t\t\t\t\t\"backupTrackerConfirmFailed\",\n\t\t\t\t\t\"The following editors with unsaved changes could not be saved or reverted.\",\n\t\t\t\t),\n\t\t\t\tremainingModifiedWorkingCopies,\n\t\t\t\terror,\n\t\t\t\treason,\n\t\t\t);\n\t\t}\n\t}\n\n\tprivate async shouldBackupBeforeShutdown(\n\t\treason: ShutdownReason,\n\t\tmodifiedWorkingCopies: readonly IWorkingCopy[],\n\t): Promise<readonly IWorkingCopy[]> {\n\t\tif (!this.filesConfigurationService.isHotExitEnabled) {\n\t\t\treturn []; // never backup when hot exit is disabled via settings\n\t\t}\n\n\t\tif (this.environmentService.isExtensionDevelopment) {\n\t\t\treturn modifiedWorkingCopies; // always backup closing extension development window without asking to speed up debugging\n\t\t}\n\n\t\tswitch (reason) {\n\t\t\t// Window Close\n\t\t\tcase ShutdownReason.CLOSE:\n\t\t\t\tif (\n\t\t\t\t\tthis.contextService.getWorkbenchState() !==\n\t\t\t\t\t\tWorkbenchState.EMPTY &&\n\t\t\t\t\tthis.filesConfigurationService.hotExitConfiguration ===\n\t\t\t\t\t\tHotExitConfiguration.ON_EXIT_AND_WINDOW_CLOSE\n\t\t\t\t) {\n\t\t\t\t\treturn modifiedWorkingCopies; // backup if a workspace/folder is open and onExitAndWindowClose is configured\n\t\t\t\t}\n\n\t\t\t\tif (\n\t\t\t\t\tisMacintosh ||\n\t\t\t\t\t(await this.nativeHostService.getWindowCount()) > 1\n\t\t\t\t) {\n\t\t\t\t\tif (\n\t\t\t\t\t\tthis.contextService.getWorkbenchState() !==\n\t\t\t\t\t\tWorkbenchState.EMPTY\n\t\t\t\t\t) {\n\t\t\t\t\t\treturn modifiedWorkingCopies.filter(\n\t\t\t\t\t\t\t(modifiedWorkingCopy) =>\n\t\t\t\t\t\t\t\tmodifiedWorkingCopy.capabilities &\n\t\t\t\t\t\t\t\tWorkingCopyCapabilities.Scratchpad,\n\t\t\t\t\t\t); // backup scratchpads automatically to avoid user confirmation\n\t\t\t\t\t}\n\n\t\t\t\t\treturn []; // do not backup if a window is closed that does not cause quitting of the application\n\t\t\t\t}\n\n\t\t\t\treturn modifiedWorkingCopies; // backup if last window is closed on win/linux where the application quits right after\n\n\t\t\t// Application Quit\n\t\t\tcase ShutdownReason.QUIT:\n\t\t\t\treturn modifiedWorkingCopies; // backup because next start we restore all backups\n\n\t\t\t// Window Reload\n\t\t\tcase ShutdownReason.RELOAD:\n\t\t\t\treturn modifiedWorkingCopies; // backup because after window reload, backups restore\n\n\t\t\t// Workspace Change\n\t\t\tcase ShutdownReason.LOAD:\n\t\t\t\tif (\n\t\t\t\t\tthis.contextService.getWorkbenchState() !==\n\t\t\t\t\tWorkbenchState.EMPTY\n\t\t\t\t) {\n\t\t\t\t\tif (\n\t\t\t\t\t\tthis.filesConfigurationService.hotExitConfiguration ===\n\t\t\t\t\t\tHotExitConfiguration.ON_EXIT_AND_WINDOW_CLOSE\n\t\t\t\t\t) {\n\t\t\t\t\t\treturn modifiedWorkingCopies; // backup if a workspace/folder is open and onExitAndWindowClose is configured\n\t\t\t\t\t}\n\n\t\t\t\t\treturn modifiedWorkingCopies.filter(\n\t\t\t\t\t\t(modifiedWorkingCopy) =>\n\t\t\t\t\t\t\tmodifiedWorkingCopy.capabilities &\n\t\t\t\t\t\t\tWorkingCopyCapabilities.Scratchpad,\n\t\t\t\t\t); // backup scratchpads automatically to avoid user confirmation\n\t\t\t\t}\n\n\t\t\t\treturn []; // do not backup because we are switching contexts with no workspace/folder open\n\t\t}\n\t}\n\n\tprivate async showErrorDialog(\n\t\tmessage: string,\n\t\tworkingCopies: readonly IWorkingCopy[],\n\t\terror: Error,\n\t\treason: ShutdownReason,\n\t): Promise<boolean> {\n\t\tthis.logService.error(`[backup tracker] ${message}: ${error}`);\n\n\t\tconst modifiedWorkingCopies = workingCopies.filter((workingCopy) =>\n\t\t\tworkingCopy.isModified(),\n\t\t);\n\n\t\tconst advice = localize(\n\t\t\t\"backupErrorDetails\",\n\t\t\t\"Try saving or reverting the editors with unsaved changes first and then try again.\",\n\t\t);\n\t\tconst detail = modifiedWorkingCopies.length\n\t\t\t? `${getFileNamesMessage(modifiedWorkingCopies.map((x) => x.name))}\\n${advice}`\n\t\t\t: advice;\n\n\t\tconst { result } = await this.dialogService.prompt({\n\t\t\ttype: \"error\",\n\t\t\tmessage,\n\t\t\tdetail,\n\t\t\tbuttons: [\n\t\t\t\t{\n\t\t\t\t\tlabel: localize(\n\t\t\t\t\t\t{ key: \"ok\", comment: [\"&& denotes a mnemonic\"] },\n\t\t\t\t\t\t\"&&OK\",\n\t\t\t\t\t),\n\t\t\t\t\trun: () => true, // veto\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tlabel: this.toForceShutdownLabel(reason),\n\t\t\t\t\trun: () => false, // no veto\n\t\t\t\t},\n\t\t\t],\n\t\t});\n\n\t\treturn result ?? true;\n\t}\n\n\tprivate toForceShutdownLabel(reason: ShutdownReason): string {\n\t\tswitch (reason) {\n\t\t\tcase ShutdownReason.CLOSE:\n\t\t\tcase ShutdownReason.LOAD:\n\t\t\t\treturn localize(\"shutdownForceClose\", \"Close Anyway\");\n\t\t\tcase ShutdownReason.QUIT:\n\t\t\t\treturn localize(\"shutdownForceQuit\", \"Quit Anyway\");\n\t\t\tcase ShutdownReason.RELOAD:\n\t\t\t\treturn localize(\"shutdownForceReload\", \"Reload Anyway\");\n\t\t}\n\t}\n\n\tprivate async backupBeforeShutdown(\n\t\tmodifiedWorkingCopies: readonly IWorkingCopy[],\n\t): Promise<{ backups: IWorkingCopy[]; error?: Error }> {\n\t\tconst backups: IWorkingCopy[] = [];\n\t\tlet error: Error | undefined;\n\n\t\tawait this.withProgressAndCancellation(\n\t\t\tasync (token) => {\n\t\t\t\t// Perform a backup of all modified working copies unless a backup already exists\n\t\t\t\ttry {\n\t\t\t\t\tawait Promises.settled(\n\t\t\t\t\t\tmodifiedWorkingCopies.map(async (workingCopy) => {\n\t\t\t\t\t\t\t// Backup exists\n\t\t\t\t\t\t\tconst contentVersion =\n\t\t\t\t\t\t\t\tthis.getContentVersion(workingCopy);\n\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\tthis.workingCopyBackupService.hasBackupSync(\n\t\t\t\t\t\t\t\t\tworkingCopy,\n\t\t\t\t\t\t\t\t\tcontentVersion,\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\tbackups.push(workingCopy);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// Backup does not exist\n\t\t\t\t\t\t\telse {\n\t\t\t\t\t\t\t\tconst backup = await workingCopy.backup(token);\n\t\t\t\t\t\t\t\tif (token.isCancellationRequested) {\n\t\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tawait this.workingCopyBackupService.backup(\n\t\t\t\t\t\t\t\t\tworkingCopy,\n\t\t\t\t\t\t\t\t\tbackup.content,\n\t\t\t\t\t\t\t\t\tcontentVersion,\n\t\t\t\t\t\t\t\t\tbackup.meta,\n\t\t\t\t\t\t\t\t\ttoken,\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\tif (token.isCancellationRequested) {\n\t\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tbackups.push(workingCopy);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}),\n\t\t\t\t\t);\n\t\t\t\t} catch (backupError) {\n\t\t\t\t\terror = backupError;\n\t\t\t\t}\n\t\t\t},\n\t\t\tlocalize(\n\t\t\t\t\"backupBeforeShutdownMessage\",\n\t\t\t\t\"Backing up editors with unsaved changes is taking a bit longer...\",\n\t\t\t),\n\t\t\tlocalize(\n\t\t\t\t\"backupBeforeShutdownDetail\",\n\t\t\t\t\"Click 'Cancel' to stop waiting and to save or revert editors with unsaved changes.\",\n\t\t\t),\n\t\t);\n\n\t\treturn { backups, error };\n\t}\n\n\tprivate async confirmBeforeShutdown(\n\t\tmodifiedWorkingCopies: IWorkingCopy[],\n\t): Promise<boolean> {\n\t\t// Save\n\t\tconst confirm = await this.fileDialogService.showSaveConfirm(\n\t\t\tmodifiedWorkingCopies.map((workingCopy) => workingCopy.name),\n\t\t);\n\t\tif (confirm === ConfirmResult.SAVE) {\n\t\t\tconst modifiedCountBeforeSave =\n\t\t\t\tthis.workingCopyService.modifiedCount;\n\n\t\t\ttry {\n\t\t\t\tawait this.doSaveAllBeforeShutdown(\n\t\t\t\t\tmodifiedWorkingCopies,\n\t\t\t\t\tSaveReason.EXPLICIT,\n\t\t\t\t);\n\t\t\t} catch (error) {\n\t\t\t\tthis.logService.error(\n\t\t\t\t\t`[backup tracker] error saving modified working copies: ${error}`,\n\t\t\t\t); // guard against misbehaving saves, we handle remaining modified below\n\t\t\t}\n\n\t\t\tconst savedWorkingCopies =\n\t\t\t\tmodifiedCountBeforeSave - this.workingCopyService.modifiedCount;\n\t\t\tif (savedWorkingCopies < modifiedWorkingCopies.length) {\n\t\t\t\treturn true; // veto (save failed or was canceled)\n\t\t\t}\n\n\t\t\treturn this.noVeto(modifiedWorkingCopies); // no veto (modified saved)\n\t\t}\n\n\t\t// Don't Save\n\t\telse if (confirm === ConfirmResult.DONT_SAVE) {\n\t\t\ttry {\n\t\t\t\tawait this.doRevertAllBeforeShutdown(modifiedWorkingCopies);\n\t\t\t} catch (error) {\n\t\t\t\tthis.logService.error(\n\t\t\t\t\t`[backup tracker] error reverting modified working copies: ${error}`,\n\t\t\t\t); // do not block the shutdown on errors from revert\n\t\t\t}\n\n\t\t\treturn this.noVeto(modifiedWorkingCopies); // no veto (modified reverted)\n\t\t}\n\n\t\t// Cancel\n\t\treturn true; // veto (user canceled)\n\t}\n\n\tprivate doSaveAllBeforeShutdown(\n\t\tworkingCopies: IWorkingCopy[],\n\t\treason: SaveReason,\n\t): Promise<void> {\n\t\treturn this.withProgressAndCancellation(\n\t\t\tasync () => {\n\t\t\t\t// Skip save participants on shutdown for performance reasons\n\t\t\t\tconst saveOptions = { skipSaveParticipants: true, reason };\n\n\t\t\t\t// First save through the editor service if we save all to benefit\n\t\t\t\t// from some extras like switching to untitled modified editors before saving.\n\t\t\t\tlet result: boolean | undefined;\n\t\t\t\tif (\n\t\t\t\t\tworkingCopies.length ===\n\t\t\t\t\tthis.workingCopyService.modifiedCount\n\t\t\t\t) {\n\t\t\t\t\tresult = (\n\t\t\t\t\t\tawait this.editorService.saveAll({\n\t\t\t\t\t\t\tincludeUntitled: { includeScratchpad: true },\n\t\t\t\t\t\t\t...saveOptions,\n\t\t\t\t\t\t})\n\t\t\t\t\t).success;\n\t\t\t\t}\n\n\t\t\t\t// If we still have modified working copies, save those directly\n\t\t\t\t// unless the save was not successful (e.g. cancelled)\n\t\t\t\tif (result !== false) {\n\t\t\t\t\tawait Promises.settled(\n\t\t\t\t\t\tworkingCopies.map((workingCopy) =>\n\t\t\t\t\t\t\tworkingCopy.isModified()\n\t\t\t\t\t\t\t\t? workingCopy.save(saveOptions)\n\t\t\t\t\t\t\t\t: Promise.resolve(true),\n\t\t\t\t\t\t),\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t},\n\t\t\tlocalize(\n\t\t\t\t\"saveBeforeShutdown\",\n\t\t\t\t\"Saving editors with unsaved changes is taking a bit longer...\",\n\t\t\t),\n\t\t\tundefined,\n\t\t\t// Do not pick `Dialog` as location for reporting progress if it is likely\n\t\t\t// that the save operation will itself open a dialog for asking for the\n\t\t\t// location to save to for untitled or scratchpad working copies.\n\t\t\t// https://github.com/microsoft/vscode-internalbacklog/issues/4943\n\t\t\tworkingCopies.some(\n\t\t\t\t(workingCopy) =>\n\t\t\t\t\tworkingCopy.capabilities &\n\t\t\t\t\t\tWorkingCopyCapabilities.Untitled ||\n\t\t\t\t\tworkingCopy.capabilities &\n\t\t\t\t\t\tWorkingCopyCapabilities.Scratchpad,\n\t\t\t)\n\t\t\t\t? ProgressLocation.Window\n\t\t\t\t: ProgressLocation.Dialog,\n\t\t);\n\t}\n\n\tprivate doRevertAllBeforeShutdown(\n\t\tmodifiedWorkingCopies: IWorkingCopy[],\n\t): Promise<void> {\n\t\treturn this.withProgressAndCancellation(\n\t\t\tasync () => {\n\t\t\t\t// Soft revert is good enough on shutdown\n\t\t\t\tconst revertOptions = { soft: true };\n\n\t\t\t\t// First revert through the editor service if we revert all\n\t\t\t\tif (\n\t\t\t\t\tmodifiedWorkingCopies.length ===\n\t\t\t\t\tthis.workingCopyService.modifiedCount\n\t\t\t\t) {\n\t\t\t\t\tawait this.editorService.revertAll(revertOptions);\n\t\t\t\t}\n\n\t\t\t\t// If we still have modified working copies, revert those directly\n\t\t\t\tawait Promises.settled(\n\t\t\t\t\tmodifiedWorkingCopies.map((workingCopy) =>\n\t\t\t\t\t\tworkingCopy.isModified()\n\t\t\t\t\t\t\t? workingCopy.revert(revertOptions)\n\t\t\t\t\t\t\t: Promise.resolve(),\n\t\t\t\t\t),\n\t\t\t\t);\n\t\t\t},\n\t\t\tlocalize(\n\t\t\t\t\"revertBeforeShutdown\",\n\t\t\t\t\"Reverting editors with unsaved changes is taking a bit longer...\",\n\t\t\t),\n\t\t);\n\t}\n\n\tprivate onBeforeShutdownWithoutModified(): Promise<boolean> {\n\t\t// We are about to shutdown without modified editors\n\t\t// and will discard any backups that are still\n\t\t// around that have not been handled depending\n\t\t// on the window state.\n\t\t//\n\t\t// Empty window: discard even unrestored backups to\n\t\t// prevent empty windows from restoring that cannot\n\t\t// be closed (workaround for not having implemented\n\t\t// https://github.com/microsoft/vscode/issues/127163\n\t\t// and a fix for what users have reported in issue\n\t\t// https://github.com/microsoft/vscode/issues/126725)\n\t\t//\n\t\t// Workspace/Folder window: do not discard unrestored\n\t\t// backups to give a chance to restore them in the\n\t\t// future. Since we do not restore workspace/folder\n\t\t// windows with backups, this is fine.\n\n\t\treturn this.noVeto({\n\t\t\texcept:\n\t\t\t\tthis.contextService.getWorkbenchState() === WorkbenchState.EMPTY\n\t\t\t\t\t? []\n\t\t\t\t\t: Array.from(this.unrestoredBackups),\n\t\t});\n\t}\n\n\tprivate noVeto(\n\t\tbackupsToDiscard: IWorkingCopyIdentifier[],\n\t): Promise<boolean>;\n\tprivate noVeto(backupsToKeep: {\n\t\texcept: IWorkingCopyIdentifier[];\n\t}): Promise<boolean>;\n\tprivate async noVeto(\n\t\targ1: IWorkingCopyIdentifier[] | { except: IWorkingCopyIdentifier[] },\n\t): Promise<boolean> {\n\t\t// Discard backups from working copies the\n\t\t// user either saved or reverted\n\n\t\tawait this.discardBackupsBeforeShutdown(arg1);\n\n\t\treturn false; // no veto (no modified)\n\t}\n\n\tprivate discardBackupsBeforeShutdown(\n\t\tbackupsToDiscard: IWorkingCopyIdentifier[],\n\t): Promise<void>;\n\tprivate discardBackupsBeforeShutdown(backupsToKeep: {\n\t\texcept: IWorkingCopyIdentifier[];\n\t}): Promise<void>;\n\tprivate discardBackupsBeforeShutdown(\n\t\tbackupsToDiscardOrKeep:\n\t\t\t| IWorkingCopyIdentifier[]\n\t\t\t| { except: IWorkingCopyIdentifier[] },\n\t): Promise<void>;\n\tprivate async discardBackupsBeforeShutdown(\n\t\targ1: IWorkingCopyIdentifier[] | { except: IWorkingCopyIdentifier[] },\n\t): Promise<void> {\n\t\t// We never discard any backups before we are ready\n\t\t// and have resolved all backups that exist. This\n\t\t// is important to not loose backups that have not\n\t\t// been handled.\n\n\t\tif (!this.isReady) {\n\t\t\treturn;\n\t\t}\n\n\t\tawait this.withProgressAndCancellation(\n\t\t\tasync () => {\n\t\t\t\t// When we shutdown either with no modified working copies left\n\t\t\t\t// or with some handled, we start to discard these backups\n\t\t\t\t// to free them up. This helps to get rid of stale backups\n\t\t\t\t// as reported in https://github.com/microsoft/vscode/issues/92962\n\t\t\t\t//\n\t\t\t\t// However, we never want to discard backups that we know\n\t\t\t\t// were not restored in the session.\n\n\t\t\t\ttry {\n\t\t\t\t\tif (Array.isArray(arg1)) {\n\t\t\t\t\t\tawait Promises.settled(\n\t\t\t\t\t\t\targ1.map((workingCopy) =>\n\t\t\t\t\t\t\t\tthis.workingCopyBackupService.discardBackup(\n\t\t\t\t\t\t\t\t\tworkingCopy,\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tawait this.workingCopyBackupService.discardBackups(\n\t\t\t\t\t\t\targ1,\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t} catch (error) {\n\t\t\t\t\tthis.logService.error(\n\t\t\t\t\t\t`[backup tracker] error discarding backups: ${error}`,\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t},\n\t\t\tlocalize(\n\t\t\t\t\"discardBackupsBeforeShutdown\",\n\t\t\t\t\"Discarding backups is taking a bit longer...\",\n\t\t\t),\n\t\t);\n\t}\n\n\tprivate withProgressAndCancellation(\n\t\tpromiseFactory: (token: CancellationToken) => Promise<void>,\n\t\ttitle: string,\n\t\tdetail?: string,\n\t\tlocation = ProgressLocation.Dialog,\n\t): Promise<void> {\n\t\tconst cts = new CancellationTokenSource();\n\n\t\treturn this.progressService.withProgress(\n\t\t\t{\n\t\t\t\tlocation, // by default use a dialog to prevent the user from making any more changes now (https://github.com/microsoft/vscode/issues/122774)\n\t\t\t\tcancellable: true, // allow to cancel (https://github.com/microsoft/vscode/issues/112278)\n\t\t\t\tdelay: 800, // delay so that it only appears when operation takes a long time\n\t\t\t\ttitle,\n\t\t\t\tdetail,\n\t\t\t},\n\t\t\t() => raceCancellation(promiseFactory(cts.token), cts.token),\n\t\t\t() => cts.dispose(true),\n\t\t);\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
