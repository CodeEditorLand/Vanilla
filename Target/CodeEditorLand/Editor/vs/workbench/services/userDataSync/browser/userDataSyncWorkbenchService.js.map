{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/userDataSync/browser/userDataSyncWorkbenchService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IUserDataSyncService, IAuthenticationProvider, isAuthenticationProvider, IUserDataAutoSyncService, IUserDataSyncStoreManagementService, SyncStatus, IUserDataSyncEnablementService, IUserDataSyncResource, IResourcePreview, USER_DATA_SYNC_SCHEME, USER_DATA_SYNC_LOG_ID, } from '../../../../platform/userDataSync/common/userDataSync.js';\nimport { ITelemetryService } from '../../../../platform/telemetry/common/telemetry.js';\nimport { InstantiationType, registerSingleton } from '../../../../platform/instantiation/common/extensions.js';\nimport { IUserDataSyncWorkbenchService, IUserDataSyncAccount, AccountStatus, CONTEXT_SYNC_ENABLEMENT, CONTEXT_SYNC_STATE, CONTEXT_ACCOUNT_STATE, SHOW_SYNC_LOG_COMMAND_ID, CONTEXT_ENABLE_ACTIVITY_VIEWS, SYNC_VIEW_CONTAINER_ID, SYNC_TITLE, SYNC_CONFLICTS_VIEW_ID, CONTEXT_ENABLE_SYNC_CONFLICTS_VIEW, CONTEXT_HAS_CONFLICTS, IUserDataSyncConflictsView } from '../common/userDataSync.js';\nimport { Disposable, DisposableStore } from '../../../../base/common/lifecycle.js';\nimport { Emitter, Event } from '../../../../base/common/event.js';\nimport { getCurrentAuthenticationSessionInfo } from '../../authentication/browser/authenticationService.js';\nimport { AuthenticationSession, AuthenticationSessionsChangeEvent, IAuthenticationService } from '../../authentication/common/authentication.js';\nimport { IUserDataSyncAccountService } from '../../../../platform/userDataSync/common/userDataSyncAccount.js';\nimport { IQuickInputService, IQuickPickSeparator } from '../../../../platform/quickinput/common/quickInput.js';\nimport { IStorageService, StorageScope, StorageTarget } from '../../../../platform/storage/common/storage.js';\nimport { ILogService } from '../../../../platform/log/common/log.js';\nimport { IProductService } from '../../../../platform/product/common/productService.js';\nimport { IExtensionService } from '../../extensions/common/extensions.js';\nimport { localize } from '../../../../nls.js';\nimport { INotificationService, Severity } from '../../../../platform/notification/common/notification.js';\nimport { IDialogService, IFileDialogService } from '../../../../platform/dialogs/common/dialogs.js';\nimport { IContextKey, IContextKeyService } from '../../../../platform/contextkey/common/contextkey.js';\nimport { IProgressService, ProgressLocation } from '../../../../platform/progress/common/progress.js';\nimport { URI } from '../../../../base/common/uri.js';\nimport { IViewDescriptorService } from '../../../common/views.js';\nimport { IViewsService } from '../../views/common/viewsService.js';\nimport { ILifecycleService } from '../../lifecycle/common/lifecycle.js';\nimport { isWeb } from '../../../../base/common/platform.js';\nimport { IInstantiationService } from '../../../../platform/instantiation/common/instantiation.js';\nimport { UserDataSyncStoreClient } from '../../../../platform/userDataSync/common/userDataSyncStoreService.js';\nimport { UserDataSyncStoreTypeSynchronizer } from '../../../../platform/userDataSync/common/globalStateSync.js';\nimport { CancellationError } from '../../../../base/common/errors.js';\nimport { raceCancellationError } from '../../../../base/common/async.js';\nimport { CancellationToken, CancellationTokenSource } from '../../../../base/common/cancellation.js';\nimport { IEditorService } from '../../editor/common/editorService.js';\nimport { IUriIdentityService } from '../../../../platform/uriIdentity/common/uriIdentity.js';\nimport { isDiffEditorInput } from '../../../common/editor.js';\nimport { IBrowserWorkbenchEnvironmentService } from '../../environment/browser/environmentService.js';\nimport { IUserDataInitializationService } from '../../userData/browser/userDataInit.js';\nimport { ISecretStorageService } from '../../../../platform/secrets/common/secrets.js';\nimport { IFileService } from '../../../../platform/files/common/files.js';\nimport { escapeRegExpCharacters } from '../../../../base/common/strings.js';\nimport { IUserDataSyncMachinesService } from '../../../../platform/userDataSync/common/userDataSyncMachines.js';\n\ntype AccountQuickPickItem = { label: string; authenticationProvider: IAuthenticationProvider; account?: UserDataSyncAccount; description?: string };\n\nclass UserDataSyncAccount implements IUserDataSyncAccount {\n\n\tconstructor(readonly authenticationProviderId: string, private readonly session: AuthenticationSession) { }\n\n\tget sessionId(): string { return this.session.id; }\n\tget accountName(): string { return this.session.account.label; }\n\tget accountId(): string { return this.session.account.id; }\n\tget token(): string { return this.session.idToken || this.session.accessToken; }\n}\n\ntype MergeEditorInput = { base: URI; input1: { uri: URI }; input2: { uri: URI }; result: URI };\nexport function isMergeEditorInput(editor: unknown): editor is MergeEditorInput {\n\tconst candidate = editor as MergeEditorInput;\n\treturn URI.isUri(candidate?.base) && URI.isUri(candidate?.input1?.uri) && URI.isUri(candidate?.input2?.uri) && URI.isUri(candidate?.result);\n}\n\nexport class UserDataSyncWorkbenchService extends Disposable implements IUserDataSyncWorkbenchService {\n\n\t_serviceBrand: any;\n\n\tprivate static DONOT_USE_WORKBENCH_SESSION_STORAGE_KEY = 'userDataSyncAccount.donotUseWorkbenchSession';\n\tprivate static CACHED_AUTHENTICATION_PROVIDER_KEY = 'userDataSyncAccountProvider';\n\tprivate static CACHED_SESSION_STORAGE_KEY = 'userDataSyncAccountPreference';\n\n\tget enabled() { return !!this.userDataSyncStoreManagementService.userDataSyncStore; }\n\n\tprivate _authenticationProviders: IAuthenticationProvider[] = [];\n\tget authenticationProviders() { return this._authenticationProviders; }\n\n\tprivate _accountStatus: AccountStatus = AccountStatus.Unavailable;\n\tget accountStatus(): AccountStatus { return this._accountStatus; }\n\tprivate readonly _onDidChangeAccountStatus = this._register(new Emitter<AccountStatus>());\n\treadonly onDidChangeAccountStatus = this._onDidChangeAccountStatus.event;\n\n\tprivate _current: UserDataSyncAccount | undefined;\n\tget current(): UserDataSyncAccount | undefined { return this._current; }\n\n\tprivate readonly syncEnablementContext: IContextKey<boolean>;\n\tprivate readonly syncStatusContext: IContextKey<string>;\n\tprivate readonly accountStatusContext: IContextKey<string>;\n\tprivate readonly enableConflictsViewContext: IContextKey<boolean>;\n\tprivate readonly hasConflicts: IContextKey<boolean>;\n\tprivate readonly activityViewsEnablementContext: IContextKey<boolean>;\n\n\tprivate turnOnSyncCancellationToken: CancellationTokenSource | undefined = undefined;\n\n\tconstructor(\n\t\t@IUserDataSyncService private readonly userDataSyncService: IUserDataSyncService,\n\t\t@IUriIdentityService private readonly uriIdentityService: IUriIdentityService,\n\t\t@IAuthenticationService private readonly authenticationService: IAuthenticationService,\n\t\t@IUserDataSyncAccountService private readonly userDataSyncAccountService: IUserDataSyncAccountService,\n\t\t@IQuickInputService private readonly quickInputService: IQuickInputService,\n\t\t@IStorageService private readonly storageService: IStorageService,\n\t\t@IUserDataSyncEnablementService private readonly userDataSyncEnablementService: IUserDataSyncEnablementService,\n\t\t@IUserDataAutoSyncService private readonly userDataAutoSyncService: IUserDataAutoSyncService,\n\t\t@ITelemetryService private readonly telemetryService: ITelemetryService,\n\t\t@ILogService private readonly logService: ILogService,\n\t\t@IProductService private readonly productService: IProductService,\n\t\t@IExtensionService private readonly extensionService: IExtensionService,\n\t\t@IBrowserWorkbenchEnvironmentService private readonly environmentService: IBrowserWorkbenchEnvironmentService,\n\t\t@ISecretStorageService private readonly secretStorageService: ISecretStorageService,\n\t\t@INotificationService private readonly notificationService: INotificationService,\n\t\t@IProgressService private readonly progressService: IProgressService,\n\t\t@IDialogService private readonly dialogService: IDialogService,\n\t\t@IContextKeyService contextKeyService: IContextKeyService,\n\t\t@IViewsService private readonly viewsService: IViewsService,\n\t\t@IViewDescriptorService private readonly viewDescriptorService: IViewDescriptorService,\n\t\t@IUserDataSyncStoreManagementService private readonly userDataSyncStoreManagementService: IUserDataSyncStoreManagementService,\n\t\t@ILifecycleService private readonly lifecycleService: ILifecycleService,\n\t\t@IInstantiationService private readonly instantiationService: IInstantiationService,\n\t\t@IEditorService private readonly editorService: IEditorService,\n\t\t@IUserDataInitializationService private readonly userDataInitializationService: IUserDataInitializationService,\n\t\t@IFileService private readonly fileService: IFileService,\n\t\t@IFileDialogService private readonly fileDialogService: IFileDialogService,\n\t\t@IUserDataSyncMachinesService private readonly userDataSyncMachinesService: IUserDataSyncMachinesService,\n\t) {\n\t\tsuper();\n\t\tthis.syncEnablementContext = CONTEXT_SYNC_ENABLEMENT.bindTo(contextKeyService);\n\t\tthis.syncStatusContext = CONTEXT_SYNC_STATE.bindTo(contextKeyService);\n\t\tthis.accountStatusContext = CONTEXT_ACCOUNT_STATE.bindTo(contextKeyService);\n\t\tthis.activityViewsEnablementContext = CONTEXT_ENABLE_ACTIVITY_VIEWS.bindTo(contextKeyService);\n\t\tthis.hasConflicts = CONTEXT_HAS_CONFLICTS.bindTo(contextKeyService);\n\t\tthis.enableConflictsViewContext = CONTEXT_ENABLE_SYNC_CONFLICTS_VIEW.bindTo(contextKeyService);\n\n\t\tif (this.userDataSyncStoreManagementService.userDataSyncStore) {\n\t\t\tthis.syncStatusContext.set(this.userDataSyncService.status);\n\t\t\tthis._register(userDataSyncService.onDidChangeStatus(status => this.syncStatusContext.set(status)));\n\t\t\tthis.syncEnablementContext.set(userDataSyncEnablementService.isEnabled());\n\t\t\tthis._register(userDataSyncEnablementService.onDidChangeEnablement(enabled => this.syncEnablementContext.set(enabled)));\n\n\t\t\tthis.waitAndInitialize();\n\t\t}\n\t}\n\n\tprivate updateAuthenticationProviders(): void {\n\t\tthis._authenticationProviders = (this.userDataSyncStoreManagementService.userDataSyncStore?.authenticationProviders || []).filter(({ id }) => this.authenticationService.declaredProviders.some(provider => provider.id === id));\n\t}\n\n\tprivate isSupportedAuthenticationProviderId(authenticationProviderId: string): boolean {\n\t\treturn this.authenticationProviders.some(({ id }) => id === authenticationProviderId);\n\t}\n\n\tprivate async waitAndInitialize(): Promise<void> {\n\t\t/* wait */\n\t\tawait Promise.all([this.extensionService.whenInstalledExtensionsRegistered(), this.userDataInitializationService.whenInitializationFinished()]);\n\n\t\t/* initialize */\n\t\ttry {\n\t\t\tawait this.initialize();\n\t\t} catch (error) {\n\t\t\t// Do not log if the current window is running extension tests\n\t\t\tif (!this.environmentService.extensionTestsLocationURI) {\n\t\t\t\tthis.logService.error(error);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate async initialize(): Promise<void> {\n\t\tif (isWeb) {\n\t\t\tconst authenticationSession = await getCurrentAuthenticationSessionInfo(this.secretStorageService, this.productService);\n\t\t\tif (this.currentSessionId === undefined && authenticationSession?.id) {\n\t\t\t\tif (this.environmentService.options?.settingsSyncOptions?.authenticationProvider && this.environmentService.options.settingsSyncOptions.enabled) {\n\t\t\t\t\tthis.currentSessionId = authenticationSession.id;\n\t\t\t\t}\n\n\t\t\t\t// Backward compatibility\n\t\t\t\telse if (this.useWorkbenchSessionId) {\n\t\t\t\t\tthis.currentSessionId = authenticationSession.id;\n\t\t\t\t}\n\t\t\t\tthis.useWorkbenchSessionId = false;\n\t\t\t}\n\t\t}\n\n\t\tawait this.update();\n\n\t\tthis._register(this.authenticationService.onDidChangeDeclaredProviders(() => this.updateAuthenticationProviders()));\n\n\t\tthis._register(Event.filter(\n\t\t\tEvent.any(\n\t\t\t\tthis.authenticationService.onDidRegisterAuthenticationProvider,\n\t\t\t\tthis.authenticationService.onDidUnregisterAuthenticationProvider,\n\t\t\t), info => this.isSupportedAuthenticationProviderId(info.id))(() => this.update()));\n\n\t\tthis._register(Event.filter(this.userDataSyncAccountService.onTokenFailed, isSuccessive => !isSuccessive)(() => this.update('token failure')));\n\n\t\tthis._register(Event.filter(this.authenticationService.onDidChangeSessions, e => this.isSupportedAuthenticationProviderId(e.providerId))(({ event }) => this.onDidChangeSessions(event)));\n\t\tthis._register(this.storageService.onDidChangeValue(StorageScope.APPLICATION, UserDataSyncWorkbenchService.CACHED_SESSION_STORAGE_KEY, this._register(new DisposableStore()))(() => this.onDidChangeStorage()));\n\t\tthis._register(Event.filter(this.userDataSyncAccountService.onTokenFailed, bailout => bailout)(() => this.onDidAuthFailure()));\n\t\tthis.hasConflicts.set(this.userDataSyncService.conflicts.length > 0);\n\t\tthis._register(this.userDataSyncService.onDidChangeConflicts(conflicts => {\n\t\t\tthis.hasConflicts.set(conflicts.length > 0);\n\t\t\tif (!conflicts.length) {\n\t\t\t\tthis.enableConflictsViewContext.reset();\n\t\t\t}\n\t\t\t// Close merge editors with no conflicts\n\t\t\tthis.editorService.editors.filter(input => {\n\t\t\t\tconst remoteResource = isDiffEditorInput(input) ? input.original.resource : isMergeEditorInput(input) ? input.input1.uri : undefined;\n\t\t\t\tif (remoteResource?.scheme !== USER_DATA_SYNC_SCHEME) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\treturn !this.userDataSyncService.conflicts.some(({ conflicts }) => conflicts.some(({ previewResource }) => this.uriIdentityService.extUri.isEqual(previewResource, input.resource)));\n\t\t\t}).forEach(input => input.dispose());\n\t\t}));\n\t}\n\n\tprivate async update(reason?: string): Promise<void> {\n\n\t\tif (reason) {\n\t\t\tthis.logService.info(`Settings Sync: Updating due to ${reason}`);\n\t\t}\n\n\t\tthis.updateAuthenticationProviders();\n\t\tawait this.updateCurrentAccount();\n\n\t\tif (this._current) {\n\t\t\tthis.currentAuthenticationProviderId = this._current.authenticationProviderId;\n\t\t}\n\n\t\tawait this.updateToken(this._current);\n\t\tthis.updateAccountStatus(this._current ? AccountStatus.Available : AccountStatus.Unavailable);\n\t}\n\n\tprivate async updateCurrentAccount(): Promise<void> {\n\t\tconst currentSessionId = this.currentSessionId;\n\t\tconst currentAuthenticationProviderId = this.currentAuthenticationProviderId;\n\t\tif (currentSessionId) {\n\t\t\tconst authenticationProviders = currentAuthenticationProviderId ? this.authenticationProviders.filter(({ id }) => id === currentAuthenticationProviderId) : this.authenticationProviders;\n\t\t\tfor (const { id, scopes } of authenticationProviders) {\n\t\t\t\tconst sessions = (await this.authenticationService.getSessions(id, scopes)) || [];\n\t\t\t\tfor (const session of sessions) {\n\t\t\t\t\tif (session.id === currentSessionId) {\n\t\t\t\t\t\tthis._current = new UserDataSyncAccount(id, session);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tthis._current = undefined;\n\t}\n\n\tprivate async updateToken(current: UserDataSyncAccount | undefined): Promise<void> {\n\t\tlet value: { token: string; authenticationProviderId: string } | undefined = undefined;\n\t\tif (current) {\n\t\t\ttry {\n\t\t\t\tthis.logService.trace('Settings Sync: Updating the token for the account', current.accountName);\n\t\t\t\tconst token = current.token;\n\t\t\t\tthis.logService.trace('Settings Sync: Token updated for the account', current.accountName);\n\t\t\t\tvalue = { token, authenticationProviderId: current.authenticationProviderId };\n\t\t\t} catch (e) {\n\t\t\t\tthis.logService.error(e);\n\t\t\t}\n\t\t}\n\t\tawait this.userDataSyncAccountService.updateAccount(value);\n\t}\n\n\tprivate updateAccountStatus(accountStatus: AccountStatus): void {\n\t\tif (this._accountStatus !== accountStatus) {\n\t\t\tconst previous = this._accountStatus;\n\t\t\tthis.logService.trace(`Settings Sync: Account status changed from ${previous} to ${accountStatus}`);\n\n\t\t\tthis._accountStatus = accountStatus;\n\t\t\tthis.accountStatusContext.set(accountStatus);\n\t\t\tthis._onDidChangeAccountStatus.fire(accountStatus);\n\t\t}\n\t}\n\n\tasync turnOn(): Promise<void> {\n\t\tif (!this.authenticationProviders.length) {\n\t\t\tthrow new Error(localize('no authentication providers', \"Settings sync cannot be turned on because there are no authentication providers available.\"));\n\t\t}\n\t\tif (this.userDataSyncEnablementService.isEnabled()) {\n\t\t\treturn;\n\t\t}\n\t\tif (this.userDataSyncService.status !== SyncStatus.Idle) {\n\t\t\tthrow new Error('Cannot turn on sync while syncing');\n\t\t}\n\n\t\tconst picked = await this.pick();\n\t\tif (!picked) {\n\t\t\tthrow new CancellationError();\n\t\t}\n\n\t\t// User did not pick an account or login failed\n\t\tif (this.accountStatus !== AccountStatus.Available) {\n\t\t\tthrow new Error(localize('no account', \"No account available\"));\n\t\t}\n\n\t\tconst turnOnSyncCancellationToken = this.turnOnSyncCancellationToken = new CancellationTokenSource();\n\t\tconst disposable = isWeb ? Disposable.None : this.lifecycleService.onBeforeShutdown(e => e.veto((async () => {\n\t\t\tconst { confirmed } = await this.dialogService.confirm({\n\t\t\t\ttype: 'warning',\n\t\t\t\tmessage: localize('sync in progress', \"Settings Sync is being turned on. Would you like to cancel it?\"),\n\t\t\t\ttitle: localize('settings sync', \"Settings Sync\"),\n\t\t\t\tprimaryButton: localize({ key: 'yes', comment: ['&& denotes a mnemonic'] }, \"&&Yes\"),\n\t\t\t\tcancelButton: localize('no', \"No\")\n\t\t\t});\n\t\t\tif (confirmed) {\n\t\t\t\tturnOnSyncCancellationToken.cancel();\n\t\t\t}\n\t\t\treturn !confirmed;\n\t\t})(), 'veto.settingsSync'));\n\t\ttry {\n\t\t\tawait this.doTurnOnSync(turnOnSyncCancellationToken.token);\n\t\t} finally {\n\t\t\tdisposable.dispose();\n\t\t\tthis.turnOnSyncCancellationToken = undefined;\n\t\t}\n\t\tawait this.userDataAutoSyncService.turnOn();\n\n\t\tif (this.userDataSyncStoreManagementService.userDataSyncStore?.canSwitch) {\n\t\t\tawait this.synchroniseUserDataSyncStoreType();\n\t\t}\n\n\t\tthis.currentAuthenticationProviderId = this.current?.authenticationProviderId;\n\t\tif (this.environmentService.options?.settingsSyncOptions?.enablementHandler && this.currentAuthenticationProviderId) {\n\t\t\tthis.environmentService.options.settingsSyncOptions.enablementHandler(true, this.currentAuthenticationProviderId);\n\t\t}\n\n\t\tthis.notificationService.info(localize('sync turned on', \"{0} is turned on\", SYNC_TITLE.value));\n\t}\n\n\tasync turnoff(everywhere: boolean): Promise<void> {\n\t\tif (this.userDataSyncEnablementService.isEnabled()) {\n\t\t\tawait this.userDataAutoSyncService.turnOff(everywhere);\n\t\t\tif (this.environmentService.options?.settingsSyncOptions?.enablementHandler && this.currentAuthenticationProviderId) {\n\t\t\t\tthis.environmentService.options.settingsSyncOptions.enablementHandler(false, this.currentAuthenticationProviderId);\n\t\t\t}\n\t\t}\n\t\tif (this.turnOnSyncCancellationToken) {\n\t\t\tthis.turnOnSyncCancellationToken.cancel();\n\t\t}\n\t}\n\n\tasync synchroniseUserDataSyncStoreType(): Promise<void> {\n\t\tif (!this.userDataSyncAccountService.account) {\n\t\t\tthrow new Error('Cannot update because you are signed out from settings sync. Please sign in and try again.');\n\t\t}\n\t\tif (!isWeb || !this.userDataSyncStoreManagementService.userDataSyncStore) {\n\t\t\t// Not supported\n\t\t\treturn;\n\t\t}\n\n\t\tconst userDataSyncStoreUrl = this.userDataSyncStoreManagementService.userDataSyncStore.type === 'insiders' ? this.userDataSyncStoreManagementService.userDataSyncStore.stableUrl : this.userDataSyncStoreManagementService.userDataSyncStore.insidersUrl;\n\t\tconst userDataSyncStoreClient = this.instantiationService.createInstance(UserDataSyncStoreClient, userDataSyncStoreUrl);\n\t\tuserDataSyncStoreClient.setAuthToken(this.userDataSyncAccountService.account.token, this.userDataSyncAccountService.account.authenticationProviderId);\n\t\tawait this.instantiationService.createInstance(UserDataSyncStoreTypeSynchronizer, userDataSyncStoreClient).sync(this.userDataSyncStoreManagementService.userDataSyncStore.type);\n\t}\n\n\tsyncNow(): Promise<void> {\n\t\treturn this.userDataAutoSyncService.triggerSync(['Sync Now'], false, true);\n\t}\n\n\tprivate async doTurnOnSync(token: CancellationToken): Promise<void> {\n\t\tconst disposables = new DisposableStore();\n\t\tconst manualSyncTask = await this.userDataSyncService.createManualSyncTask();\n\t\ttry {\n\t\t\tawait this.progressService.withProgress({\n\t\t\t\tlocation: ProgressLocation.Window,\n\t\t\t\ttitle: SYNC_TITLE.value,\n\t\t\t\tcommand: SHOW_SYNC_LOG_COMMAND_ID,\n\t\t\t\tdelay: 500,\n\t\t\t}, async progress => {\n\t\t\t\tprogress.report({ message: localize('turning on', \"Turning on...\") });\n\t\t\t\tdisposables.add(this.userDataSyncService.onDidChangeStatus(status => {\n\t\t\t\t\tif (status === SyncStatus.HasConflicts) {\n\t\t\t\t\t\tprogress.report({ message: localize('resolving conflicts', \"Resolving conflicts...\") });\n\t\t\t\t\t} else {\n\t\t\t\t\t\tprogress.report({ message: localize('syncing...', \"Turning on...\") });\n\t\t\t\t\t}\n\t\t\t\t}));\n\t\t\t\tawait manualSyncTask.merge();\n\t\t\t\tif (this.userDataSyncService.status === SyncStatus.HasConflicts) {\n\t\t\t\t\tawait this.handleConflictsWhileTurningOn(token);\n\t\t\t\t}\n\t\t\t\tawait manualSyncTask.apply();\n\t\t\t});\n\t\t} catch (error) {\n\t\t\tawait manualSyncTask.stop();\n\t\t\tthrow error;\n\t\t} finally {\n\t\t\tdisposables.dispose();\n\t\t}\n\t}\n\n\tprivate async handleConflictsWhileTurningOn(token: CancellationToken): Promise<void> {\n\t\tawait this.dialogService.prompt({\n\t\t\ttype: Severity.Warning,\n\t\t\tmessage: localize('conflicts detected', \"Conflicts Detected\"),\n\t\t\tdetail: localize('resolve', \"Please resolve conflicts to turn on...\"),\n\t\t\tbuttons: [\n\t\t\t\t{\n\t\t\t\t\tlabel: localize({ key: 'show conflicts', comment: ['&& denotes a mnemonic'] }, \"&&Show Conflicts\"),\n\t\t\t\t\trun: async () => {\n\t\t\t\t\t\tconst waitUntilConflictsAreResolvedPromise = raceCancellationError(Event.toPromise(Event.filter(this.userDataSyncService.onDidChangeConflicts, conficts => conficts.length === 0)), token);\n\t\t\t\t\t\tawait this.showConflicts(this.userDataSyncService.conflicts[0]?.conflicts[0]);\n\t\t\t\t\t\tawait waitUntilConflictsAreResolvedPromise;\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tlabel: localize({ key: 'replace local', comment: ['&& denotes a mnemonic'] }, \"Replace &&Local\"),\n\t\t\t\t\trun: async () => this.replace(true)\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tlabel: localize({ key: 'replace remote', comment: ['&& denotes a mnemonic'] }, \"Replace &&Remote\"),\n\t\t\t\t\trun: () => this.replace(false)\n\t\t\t\t},\n\t\t\t],\n\t\t\tcancelButton: {\n\t\t\t\trun: () => {\n\t\t\t\t\tthrow new CancellationError();\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n\n\tprivate async replace(local: boolean): Promise<void> {\n\t\tfor (const conflict of this.userDataSyncService.conflicts) {\n\t\t\tfor (const preview of conflict.conflicts) {\n\t\t\t\tawait this.accept({ syncResource: conflict.syncResource, profile: conflict.profile }, local ? preview.remoteResource : preview.localResource, undefined, { force: true });\n\t\t\t}\n\t\t}\n\t}\n\n\tasync accept(resource: IUserDataSyncResource, conflictResource: URI, content: string | null | undefined, apply: boolean | { force: boolean }): Promise<void> {\n\t\treturn this.userDataSyncService.accept(resource, conflictResource, content, apply);\n\t}\n\n\tasync showConflicts(conflictToOpen?: IResourcePreview): Promise<void> {\n\t\tif (!this.userDataSyncService.conflicts.length) {\n\t\t\treturn;\n\t\t}\n\t\tthis.enableConflictsViewContext.set(true);\n\t\tconst view = await this.viewsService.openView<IUserDataSyncConflictsView>(SYNC_CONFLICTS_VIEW_ID);\n\t\tif (view && conflictToOpen) {\n\t\t\tawait view.open(conflictToOpen);\n\t\t}\n\t}\n\n\tasync resetSyncedData(): Promise<void> {\n\t\tconst { confirmed } = await this.dialogService.confirm({\n\t\t\ttype: 'info',\n\t\t\tmessage: localize('reset', \"This will clear your data in the cloud and stop sync on all your devices.\"),\n\t\t\ttitle: localize('reset title', \"Clear\"),\n\t\t\tprimaryButton: localize({ key: 'resetButton', comment: ['&& denotes a mnemonic'] }, \"&&Reset\"),\n\t\t});\n\t\tif (confirmed) {\n\t\t\tawait this.userDataSyncService.resetRemote();\n\t\t}\n\t}\n\n\tasync getAllLogResources(): Promise<URI[]> {\n\t\tconst logsFolders: URI[] = [];\n\t\tconst stat = await this.fileService.resolve(this.uriIdentityService.extUri.dirname(this.environmentService.logsHome));\n\t\tif (stat.children) {\n\t\t\tlogsFolders.push(...stat.children\n\t\t\t\t.filter(stat => stat.isDirectory && /^\\d{8}T\\d{6}$/.test(stat.name))\n\t\t\t\t.sort()\n\t\t\t\t.reverse()\n\t\t\t\t.map(d => d.resource));\n\t\t}\n\t\tconst result: URI[] = [];\n\t\tfor (const logFolder of logsFolders) {\n\t\t\tconst folderStat = await this.fileService.resolve(logFolder);\n\t\t\tconst childStat = folderStat.children?.find(stat => this.uriIdentityService.extUri.basename(stat.resource).startsWith(`${USER_DATA_SYNC_LOG_ID}.`));\n\t\t\tif (childStat) {\n\t\t\t\tresult.push(childStat.resource);\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n\n\tasync showSyncActivity(): Promise<void> {\n\t\tthis.activityViewsEnablementContext.set(true);\n\t\tawait this.waitForActiveSyncViews();\n\t\tawait this.viewsService.openViewContainer(SYNC_VIEW_CONTAINER_ID);\n\t}\n\n\tasync downloadSyncActivity(): Promise<URI | undefined> {\n\t\tconst result = await this.fileDialogService.showOpenDialog({\n\t\t\ttitle: localize('download sync activity dialog title', \"Select folder to download Settings Sync activity\"),\n\t\t\tcanSelectFiles: false,\n\t\t\tcanSelectFolders: true,\n\t\t\tcanSelectMany: false,\n\t\t\topenLabel: localize('download sync activity dialog open label', \"Save\"),\n\t\t});\n\n\t\tif (!result?.[0]) {\n\t\t\treturn;\n\t\t}\n\n\t\treturn this.progressService.withProgress({ location: ProgressLocation.Window }, async () => {\n\t\t\tconst machines = await this.userDataSyncMachinesService.getMachines();\n\t\t\tconst currentMachine = machines.find(m => m.isCurrent);\n\t\t\tconst name = (currentMachine ? currentMachine.name + ' - ' : '') + 'Settings Sync Activity';\n\t\t\tconst stat = await this.fileService.resolve(result[0]);\n\n\t\t\tconst nameRegEx = new RegExp(`${escapeRegExpCharacters(name)}\\\\s(\\\\d+)`);\n\t\t\tconst indexes: number[] = [];\n\t\t\tfor (const child of stat.children ?? []) {\n\t\t\t\tif (child.name === name) {\n\t\t\t\t\tindexes.push(0);\n\t\t\t\t} else {\n\t\t\t\t\tconst matches = nameRegEx.exec(child.name);\n\t\t\t\t\tif (matches) {\n\t\t\t\t\t\tindexes.push(parseInt(matches[1]));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tindexes.sort((a, b) => a - b);\n\n\t\t\tconst folder = this.uriIdentityService.extUri.joinPath(result[0], indexes[0] !== 0 ? name : `${name} ${indexes[indexes.length - 1] + 1}`);\n\t\t\tawait Promise.all([\n\t\t\t\tthis.userDataSyncService.saveRemoteActivityData(this.uriIdentityService.extUri.joinPath(folder, 'remoteActivity.json')),\n\t\t\t\t(async () => {\n\t\t\t\t\tconst logResources = await this.getAllLogResources();\n\t\t\t\t\tawait Promise.all(logResources.map(async logResource => this.fileService.copy(logResource, this.uriIdentityService.extUri.joinPath(folder, 'logs', `${this.uriIdentityService.extUri.basename(this.uriIdentityService.extUri.dirname(logResource))}.log`))));\n\t\t\t\t})(),\n\t\t\t\tthis.fileService.copy(this.environmentService.userDataSyncHome, this.uriIdentityService.extUri.joinPath(folder, 'localActivity')),\n\t\t\t]);\n\t\t\treturn folder;\n\t\t});\n\t}\n\n\tprivate async waitForActiveSyncViews(): Promise<void> {\n\t\tconst viewContainer = this.viewDescriptorService.getViewContainerById(SYNC_VIEW_CONTAINER_ID);\n\t\tif (viewContainer) {\n\t\t\tconst model = this.viewDescriptorService.getViewContainerModel(viewContainer);\n\t\t\tif (!model.activeViewDescriptors.length) {\n\t\t\t\tawait Event.toPromise(Event.filter(model.onDidChangeActiveViewDescriptors, e => model.activeViewDescriptors.length > 0));\n\t\t\t}\n\t\t}\n\t}\n\n\tasync signIn(): Promise<void> {\n\t\tconst currentAuthenticationProviderId = this.currentAuthenticationProviderId;\n\t\tconst authenticationProvider = currentAuthenticationProviderId ? this.authenticationProviders.find(p => p.id === currentAuthenticationProviderId) : undefined;\n\t\tif (authenticationProvider) {\n\t\t\tawait this.doSignIn(authenticationProvider);\n\t\t} else {\n\t\t\tawait this.pick();\n\t\t}\n\t}\n\n\tprivate async pick(): Promise<boolean> {\n\t\tconst result = await this.doPick();\n\t\tif (!result) {\n\t\t\treturn false;\n\t\t}\n\t\tawait this.doSignIn(result);\n\t\treturn true;\n\t}\n\n\tprivate async doPick(): Promise<UserDataSyncAccount | IAuthenticationProvider | undefined> {\n\t\tif (this.authenticationProviders.length === 0) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\tconst authenticationProviders = [...this.authenticationProviders].sort(({ id }) => id === this.currentAuthenticationProviderId ? -1 : 1);\n\t\tconst allAccounts = new Map<string, UserDataSyncAccount[]>();\n\n\t\tif (authenticationProviders.length === 1) {\n\t\t\tconst accounts = await this.getAccounts(authenticationProviders[0].id, authenticationProviders[0].scopes);\n\t\t\tif (accounts.length) {\n\t\t\t\tallAccounts.set(authenticationProviders[0].id, accounts);\n\t\t\t} else {\n\t\t\t\t// Single auth provider and no accounts\n\t\t\t\treturn authenticationProviders[0];\n\t\t\t}\n\t\t}\n\n\t\tlet result: UserDataSyncAccount | IAuthenticationProvider | undefined;\n\t\tconst disposables: DisposableStore = new DisposableStore();\n\t\tconst quickPick = disposables.add(this.quickInputService.createQuickPick<AccountQuickPickItem>({ useSeparators: true }));\n\n\t\tconst promise = new Promise<UserDataSyncAccount | IAuthenticationProvider | undefined>(c => {\n\t\t\tdisposables.add(quickPick.onDidHide(() => {\n\t\t\t\tdisposables.dispose();\n\t\t\t\tc(result);\n\t\t\t}));\n\t\t});\n\n\t\tquickPick.title = SYNC_TITLE.value;\n\t\tquickPick.ok = false;\n\t\tquickPick.ignoreFocusOut = true;\n\t\tquickPick.placeholder = localize('choose account placeholder', \"Select an account to sign in\");\n\t\tquickPick.show();\n\n\t\tif (authenticationProviders.length > 1) {\n\t\t\tquickPick.busy = true;\n\t\t\tfor (const { id, scopes } of authenticationProviders) {\n\t\t\t\tconst accounts = await this.getAccounts(id, scopes);\n\t\t\t\tif (accounts.length) {\n\t\t\t\t\tallAccounts.set(id, accounts);\n\t\t\t\t}\n\t\t\t}\n\t\t\tquickPick.busy = false;\n\t\t}\n\n\t\tquickPick.items = this.createQuickpickItems(authenticationProviders, allAccounts);\n\t\tdisposables.add(quickPick.onDidAccept(() => {\n\t\t\tresult = quickPick.selectedItems[0]?.account ? quickPick.selectedItems[0]?.account : quickPick.selectedItems[0]?.authenticationProvider;\n\t\t\tquickPick.hide();\n\t\t}));\n\n\t\treturn promise;\n\t}\n\n\tprivate async getAccounts(authenticationProviderId: string, scopes: string[]): Promise<UserDataSyncAccount[]> {\n\t\tconst accounts: Map<string, UserDataSyncAccount> = new Map<string, UserDataSyncAccount>();\n\t\tlet currentAccount: UserDataSyncAccount | null = null;\n\n\t\tconst sessions = await this.authenticationService.getSessions(authenticationProviderId, scopes) || [];\n\t\tfor (const session of sessions) {\n\t\t\tconst account: UserDataSyncAccount = new UserDataSyncAccount(authenticationProviderId, session);\n\t\t\taccounts.set(account.accountId, account);\n\t\t\tif (account.sessionId === this.currentSessionId) {\n\t\t\t\tcurrentAccount = account;\n\t\t\t}\n\t\t}\n\n\t\tif (currentAccount) {\n\t\t\t// Always use current account if available\n\t\t\taccounts.set(currentAccount.accountId, currentAccount);\n\t\t}\n\n\t\treturn currentAccount ? [...accounts.values()] : [...accounts.values()].sort(({ sessionId }) => sessionId === this.currentSessionId ? -1 : 1);\n\t}\n\n\tprivate createQuickpickItems(authenticationProviders: IAuthenticationProvider[], allAccounts: Map<string, UserDataSyncAccount[]>): (AccountQuickPickItem | IQuickPickSeparator)[] {\n\t\tconst quickPickItems: (AccountQuickPickItem | IQuickPickSeparator)[] = [];\n\n\t\t// Signed in Accounts\n\t\tif (allAccounts.size) {\n\t\t\tquickPickItems.push({ type: 'separator', label: localize('signed in', \"Signed in\") });\n\t\t\tfor (const authenticationProvider of authenticationProviders) {\n\t\t\t\tconst accounts = (allAccounts.get(authenticationProvider.id) || []).sort(({ sessionId }) => sessionId === this.currentSessionId ? -1 : 1);\n\t\t\t\tconst providerName = this.authenticationService.getProvider(authenticationProvider.id).label;\n\t\t\t\tfor (const account of accounts) {\n\t\t\t\t\tquickPickItems.push({\n\t\t\t\t\t\tlabel: `${account.accountName} (${providerName})`,\n\t\t\t\t\t\tdescription: account.sessionId === this.current?.sessionId ? localize('last used', \"Last Used with Sync\") : undefined,\n\t\t\t\t\t\taccount,\n\t\t\t\t\t\tauthenticationProvider,\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t\tquickPickItems.push({ type: 'separator', label: localize('others', \"Others\") });\n\t\t}\n\n\t\t// Account Providers\n\t\tfor (const authenticationProvider of authenticationProviders) {\n\t\t\tconst provider = this.authenticationService.getProvider(authenticationProvider.id);\n\t\t\tif (!allAccounts.has(authenticationProvider.id) || provider.supportsMultipleAccounts) {\n\t\t\t\tconst providerName = provider.label;\n\t\t\t\tquickPickItems.push({ label: localize('sign in using account', \"Sign in with {0}\", providerName), authenticationProvider });\n\t\t\t}\n\t\t}\n\n\t\treturn quickPickItems;\n\t}\n\n\tprivate async doSignIn(accountOrAuthProvider: UserDataSyncAccount | IAuthenticationProvider): Promise<void> {\n\t\tlet sessionId: string;\n\t\tif (isAuthenticationProvider(accountOrAuthProvider)) {\n\t\t\tif (this.environmentService.options?.settingsSyncOptions?.authenticationProvider?.id === accountOrAuthProvider.id) {\n\t\t\t\tsessionId = await this.environmentService.options?.settingsSyncOptions?.authenticationProvider?.signIn();\n\t\t\t} else {\n\t\t\t\tsessionId = (await this.authenticationService.createSession(accountOrAuthProvider.id, accountOrAuthProvider.scopes)).id;\n\t\t\t}\n\t\t\tthis.currentAuthenticationProviderId = accountOrAuthProvider.id;\n\t\t} else {\n\t\t\tif (this.environmentService.options?.settingsSyncOptions?.authenticationProvider?.id === accountOrAuthProvider.authenticationProviderId) {\n\t\t\t\tsessionId = await this.environmentService.options?.settingsSyncOptions?.authenticationProvider?.signIn();\n\t\t\t} else {\n\t\t\t\tsessionId = accountOrAuthProvider.sessionId;\n\t\t\t}\n\t\t\tthis.currentAuthenticationProviderId = accountOrAuthProvider.authenticationProviderId;\n\t\t}\n\t\tthis.currentSessionId = sessionId;\n\t\tawait this.update();\n\t}\n\n\tprivate async onDidAuthFailure(): Promise<void> {\n\t\tthis.telemetryService.publicLog2<{}, { owner: 'sandy081'; comment: 'Report when there are successive auth failures during settings sync' }>('sync/successiveAuthFailures');\n\t\tthis.currentSessionId = undefined;\n\t\tawait this.update('auth failure');\n\t}\n\n\tprivate onDidChangeSessions(e: AuthenticationSessionsChangeEvent): void {\n\t\tif (this.currentSessionId && e.removed?.find(session => session.id === this.currentSessionId)) {\n\t\t\tthis.currentSessionId = undefined;\n\t\t}\n\t\tthis.update('change in sessions');\n\t}\n\n\tprivate onDidChangeStorage(): void {\n\t\tif (this.currentSessionId !== this.getStoredCachedSessionId() /* This checks if current window changed the value or not */) {\n\t\t\tthis._cachedCurrentSessionId = null;\n\t\t\tthis.update('change in storage');\n\t\t}\n\t}\n\n\tprivate _cachedCurrentAuthenticationProviderId: string | undefined | null = null;\n\tprivate get currentAuthenticationProviderId(): string | undefined {\n\t\tif (this._cachedCurrentAuthenticationProviderId === null) {\n\t\t\tthis._cachedCurrentAuthenticationProviderId = this.storageService.get(UserDataSyncWorkbenchService.CACHED_AUTHENTICATION_PROVIDER_KEY, StorageScope.APPLICATION);\n\t\t}\n\t\treturn this._cachedCurrentAuthenticationProviderId;\n\t}\n\n\tprivate set currentAuthenticationProviderId(currentAuthenticationProviderId: string | undefined) {\n\t\tif (this._cachedCurrentAuthenticationProviderId !== currentAuthenticationProviderId) {\n\t\t\tthis._cachedCurrentAuthenticationProviderId = currentAuthenticationProviderId;\n\t\t\tif (currentAuthenticationProviderId === undefined) {\n\t\t\t\tthis.storageService.remove(UserDataSyncWorkbenchService.CACHED_AUTHENTICATION_PROVIDER_KEY, StorageScope.APPLICATION);\n\t\t\t} else {\n\t\t\t\tthis.storageService.store(UserDataSyncWorkbenchService.CACHED_AUTHENTICATION_PROVIDER_KEY, currentAuthenticationProviderId, StorageScope.APPLICATION, StorageTarget.MACHINE);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate _cachedCurrentSessionId: string | undefined | null = null;\n\tprivate get currentSessionId(): string | undefined {\n\t\tif (this._cachedCurrentSessionId === null) {\n\t\t\tthis._cachedCurrentSessionId = this.getStoredCachedSessionId();\n\t\t}\n\t\treturn this._cachedCurrentSessionId;\n\t}\n\n\tprivate set currentSessionId(cachedSessionId: string | undefined) {\n\t\tif (this._cachedCurrentSessionId !== cachedSessionId) {\n\t\t\tthis._cachedCurrentSessionId = cachedSessionId;\n\t\t\tif (cachedSessionId === undefined) {\n\t\t\t\tthis.logService.info('Settings Sync: Reset current session');\n\t\t\t\tthis.storageService.remove(UserDataSyncWorkbenchService.CACHED_SESSION_STORAGE_KEY, StorageScope.APPLICATION);\n\t\t\t} else {\n\t\t\t\tthis.logService.info('Settings Sync: Updated current session', cachedSessionId);\n\t\t\t\tthis.storageService.store(UserDataSyncWorkbenchService.CACHED_SESSION_STORAGE_KEY, cachedSessionId, StorageScope.APPLICATION, StorageTarget.MACHINE);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate getStoredCachedSessionId(): string | undefined {\n\t\treturn this.storageService.get(UserDataSyncWorkbenchService.CACHED_SESSION_STORAGE_KEY, StorageScope.APPLICATION);\n\t}\n\n\tprivate get useWorkbenchSessionId(): boolean {\n\t\treturn !this.storageService.getBoolean(UserDataSyncWorkbenchService.DONOT_USE_WORKBENCH_SESSION_STORAGE_KEY, StorageScope.APPLICATION, false);\n\t}\n\n\tprivate set useWorkbenchSessionId(useWorkbenchSession: boolean) {\n\t\tthis.storageService.store(UserDataSyncWorkbenchService.DONOT_USE_WORKBENCH_SESSION_STORAGE_KEY, !useWorkbenchSession, StorageScope.APPLICATION, StorageTarget.MACHINE);\n\t}\n\n}\n\nregisterSingleton(IUserDataSyncWorkbenchService, UserDataSyncWorkbenchService, InstantiationType.Eager /* Eager because it initializes settings sync accounts */);\n"],
  "mappings": "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",
  "names": ["conflicts", "stat"]
}
