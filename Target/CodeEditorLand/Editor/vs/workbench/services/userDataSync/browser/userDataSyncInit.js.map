{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/userDataSync/browser/userDataSyncInit.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IStorageService, StorageScope } from '../../../../platform/storage/common/storage.js';\nimport { AbstractExtensionsInitializer, IExtensionsInitializerPreviewResult } from '../../../../platform/userDataSync/common/extensionsSync.js';\nimport { GlobalStateInitializer, UserDataSyncStoreTypeSynchronizer } from '../../../../platform/userDataSync/common/globalStateSync.js';\nimport { KeybindingsInitializer } from '../../../../platform/userDataSync/common/keybindingsSync.js';\nimport { SettingsInitializer } from '../../../../platform/userDataSync/common/settingsSync.js';\nimport { SnippetsInitializer } from '../../../../platform/userDataSync/common/snippetsSync.js';\nimport { IFileService } from '../../../../platform/files/common/files.js';\nimport { IInstantiationService } from '../../../../platform/instantiation/common/instantiation.js';\nimport { ILogService } from '../../../../platform/log/common/log.js';\nimport { UserDataSyncStoreClient } from '../../../../platform/userDataSync/common/userDataSyncStoreService.js';\nimport { IProductService } from '../../../../platform/product/common/productService.js';\nimport { IRequestService } from '../../../../platform/request/common/request.js';\nimport { IRemoteUserData, IUserData, IUserDataSyncResourceInitializer, IUserDataSyncLogService, IUserDataSyncStoreManagementService, SyncResource } from '../../../../platform/userDataSync/common/userDataSync.js';\nimport { AuthenticationSessionInfo, getCurrentAuthenticationSessionInfo } from '../../authentication/browser/authenticationService.js';\nimport { getSyncAreaLabel } from '../common/userDataSync.js';\nimport { isWeb } from '../../../../base/common/platform.js';\nimport { Barrier, Promises } from '../../../../base/common/async.js';\nimport { IExtensionGalleryService, IExtensionManagementService, IGlobalExtensionEnablementService, ILocalExtension } from '../../../../platform/extensionManagement/common/extensionManagement.js';\nimport { IEnvironmentService } from '../../../../platform/environment/common/environment.js';\nimport { IExtensionService, toExtensionDescription } from '../../extensions/common/extensions.js';\nimport { areSameExtensions } from '../../../../platform/extensionManagement/common/extensionManagementUtil.js';\nimport { IIgnoredExtensionsManagementService } from '../../../../platform/userDataSync/common/ignoredExtensions.js';\nimport { DisposableStore } from '../../../../base/common/lifecycle.js';\nimport { isEqual } from '../../../../base/common/resources.js';\nimport { CancellationToken } from '../../../../base/common/cancellation.js';\nimport { IUriIdentityService } from '../../../../platform/uriIdentity/common/uriIdentity.js';\nimport { IExtensionStorageService } from '../../../../platform/extensionManagement/common/extensionStorage.js';\nimport { TasksInitializer } from '../../../../platform/userDataSync/common/tasksSync.js';\nimport { IUserDataProfilesService } from '../../../../platform/userDataProfile/common/userDataProfile.js';\nimport { IBrowserWorkbenchEnvironmentService } from '../../environment/browser/environmentService.js';\nimport { IUserDataInitializer } from '../../userData/browser/userDataInit.js';\nimport { ISecretStorageService } from '../../../../platform/secrets/common/secrets.js';\n\nexport class UserDataSyncInitializer implements IUserDataInitializer {\n\n\t_serviceBrand: any;\n\n\tprivate readonly initialized: SyncResource[] = [];\n\tprivate readonly initializationFinished = new Barrier();\n\tprivate globalStateUserData: IUserData | null = null;\n\n\tconstructor(\n\t\t@IBrowserWorkbenchEnvironmentService private readonly environmentService: IBrowserWorkbenchEnvironmentService,\n\t\t@ISecretStorageService private readonly secretStorageService: ISecretStorageService,\n\t\t@IUserDataSyncStoreManagementService private readonly userDataSyncStoreManagementService: IUserDataSyncStoreManagementService,\n\t\t@IFileService private readonly fileService: IFileService,\n\t\t@IUserDataProfilesService private readonly userDataProfilesService: IUserDataProfilesService,\n\t\t@IStorageService private readonly storageService: IStorageService,\n\t\t@IProductService private readonly productService: IProductService,\n\t\t@IRequestService private readonly requestService: IRequestService,\n\t\t@ILogService private readonly logService: ILogService,\n\t\t@IUriIdentityService private readonly uriIdentityService: IUriIdentityService,\n\t) {\n\t\tthis.createUserDataSyncStoreClient().then(userDataSyncStoreClient => {\n\t\t\tif (!userDataSyncStoreClient) {\n\t\t\t\tthis.initializationFinished.open();\n\t\t\t}\n\t\t});\n\t}\n\n\tprivate _userDataSyncStoreClientPromise: Promise<UserDataSyncStoreClient | undefined> | undefined;\n\tprivate createUserDataSyncStoreClient(): Promise<UserDataSyncStoreClient | undefined> {\n\t\tif (!this._userDataSyncStoreClientPromise) {\n\t\t\tthis._userDataSyncStoreClientPromise = (async (): Promise<UserDataSyncStoreClient | undefined> => {\n\t\t\t\ttry {\n\t\t\t\t\tif (!isWeb) {\n\t\t\t\t\t\tthis.logService.trace(`Skipping initializing user data in desktop`);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (!this.storageService.isNew(StorageScope.APPLICATION)) {\n\t\t\t\t\t\tthis.logService.trace(`Skipping initializing user data as application was opened before`);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (!this.storageService.isNew(StorageScope.WORKSPACE)) {\n\t\t\t\t\t\tthis.logService.trace(`Skipping initializing user data as workspace was opened before`);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (this.environmentService.options?.settingsSyncOptions?.authenticationProvider && !this.environmentService.options.settingsSyncOptions.enabled) {\n\t\t\t\t\t\tthis.logService.trace(`Skipping initializing user data as settings sync is disabled`);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tlet authenticationSession;\n\t\t\t\t\ttry {\n\t\t\t\t\t\tauthenticationSession = await getCurrentAuthenticationSessionInfo(this.secretStorageService, this.productService);\n\t\t\t\t\t} catch (error) {\n\t\t\t\t\t\tthis.logService.error(error);\n\t\t\t\t\t}\n\t\t\t\t\tif (!authenticationSession) {\n\t\t\t\t\t\tthis.logService.trace(`Skipping initializing user data as authentication session is not set`);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tawait this.initializeUserDataSyncStore(authenticationSession);\n\n\t\t\t\t\tconst userDataSyncStore = this.userDataSyncStoreManagementService.userDataSyncStore;\n\t\t\t\t\tif (!userDataSyncStore) {\n\t\t\t\t\t\tthis.logService.trace(`Skipping initializing user data as sync service is not provided`);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst userDataSyncStoreClient = new UserDataSyncStoreClient(userDataSyncStore.url, this.productService, this.requestService, this.logService, this.environmentService, this.fileService, this.storageService);\n\t\t\t\t\tuserDataSyncStoreClient.setAuthToken(authenticationSession.accessToken, authenticationSession.providerId);\n\n\t\t\t\t\tconst manifest = await userDataSyncStoreClient.manifest(null);\n\t\t\t\t\tif (manifest === null) {\n\t\t\t\t\t\tuserDataSyncStoreClient.dispose();\n\t\t\t\t\t\tthis.logService.trace(`Skipping initializing user data as there is no data`);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tthis.logService.info(`Using settings sync service ${userDataSyncStore.url.toString()} for initialization`);\n\t\t\t\t\treturn userDataSyncStoreClient;\n\n\t\t\t\t} catch (error) {\n\t\t\t\t\tthis.logService.error(error);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t})();\n\t\t}\n\n\t\treturn this._userDataSyncStoreClientPromise;\n\t}\n\n\tprivate async initializeUserDataSyncStore(authenticationSession: AuthenticationSessionInfo): Promise<void> {\n\t\tconst userDataSyncStore = this.userDataSyncStoreManagementService.userDataSyncStore;\n\t\tif (!userDataSyncStore?.canSwitch) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst disposables = new DisposableStore();\n\t\ttry {\n\t\t\tconst userDataSyncStoreClient = disposables.add(new UserDataSyncStoreClient(userDataSyncStore.url, this.productService, this.requestService, this.logService, this.environmentService, this.fileService, this.storageService));\n\t\t\tuserDataSyncStoreClient.setAuthToken(authenticationSession.accessToken, authenticationSession.providerId);\n\n\t\t\t// Cache global state data for global state initialization\n\t\t\tthis.globalStateUserData = await userDataSyncStoreClient.readResource(SyncResource.GlobalState, null);\n\n\t\t\tif (this.globalStateUserData) {\n\t\t\t\tconst userDataSyncStoreType = new UserDataSyncStoreTypeSynchronizer(userDataSyncStoreClient, this.storageService, this.environmentService, this.fileService, this.logService).getSyncStoreType(this.globalStateUserData);\n\t\t\t\tif (userDataSyncStoreType) {\n\t\t\t\t\tawait this.userDataSyncStoreManagementService.switch(userDataSyncStoreType);\n\n\t\t\t\t\t// Unset cached global state data if urls are changed\n\t\t\t\t\tif (!isEqual(userDataSyncStore.url, this.userDataSyncStoreManagementService.userDataSyncStore?.url)) {\n\t\t\t\t\t\tthis.logService.info('Switched settings sync store');\n\t\t\t\t\t\tthis.globalStateUserData = null;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} finally {\n\t\t\tdisposables.dispose();\n\t\t}\n\t}\n\n\tasync whenInitializationFinished(): Promise<void> {\n\t\tawait this.initializationFinished.wait();\n\t}\n\n\tasync requiresInitialization(): Promise<boolean> {\n\t\tthis.logService.trace(`UserDataInitializationService#requiresInitialization`);\n\t\tconst userDataSyncStoreClient = await this.createUserDataSyncStoreClient();\n\t\treturn !!userDataSyncStoreClient;\n\t}\n\n\tasync initializeRequiredResources(): Promise<void> {\n\t\tthis.logService.trace(`UserDataInitializationService#initializeRequiredResources`);\n\t\treturn this.initialize([SyncResource.Settings, SyncResource.GlobalState]);\n\t}\n\n\tasync initializeOtherResources(instantiationService: IInstantiationService): Promise<void> {\n\t\ttry {\n\t\t\tthis.logService.trace(`UserDataInitializationService#initializeOtherResources`);\n\t\t\tawait Promise.allSettled([this.initialize([SyncResource.Keybindings, SyncResource.Snippets, SyncResource.Tasks]), this.initializeExtensions(instantiationService)]);\n\t\t} finally {\n\t\t\tthis.initializationFinished.open();\n\t\t}\n\t}\n\n\tprivate async initializeExtensions(instantiationService: IInstantiationService): Promise<void> {\n\t\ttry {\n\t\t\tawait Promise.all([this.initializeInstalledExtensions(instantiationService), this.initializeNewExtensions(instantiationService)]);\n\t\t} finally {\n\t\t\tthis.initialized.push(SyncResource.Extensions);\n\t\t}\n\t}\n\n\tprivate initializeInstalledExtensionsPromise: Promise<void> | undefined;\n\tasync initializeInstalledExtensions(instantiationService: IInstantiationService): Promise<void> {\n\t\tif (!this.initializeInstalledExtensionsPromise) {\n\t\t\tthis.initializeInstalledExtensionsPromise = (async () => {\n\t\t\t\tthis.logService.trace(`UserDataInitializationService#initializeInstalledExtensions`);\n\t\t\t\tconst extensionsPreviewInitializer = await this.getExtensionsPreviewInitializer(instantiationService);\n\t\t\t\tif (extensionsPreviewInitializer) {\n\t\t\t\t\tawait instantiationService.createInstance(InstalledExtensionsInitializer, extensionsPreviewInitializer).initialize();\n\t\t\t\t}\n\t\t\t})();\n\t\t}\n\t\treturn this.initializeInstalledExtensionsPromise;\n\t}\n\n\tprivate initializeNewExtensionsPromise: Promise<void> | undefined;\n\tprivate async initializeNewExtensions(instantiationService: IInstantiationService): Promise<void> {\n\t\tif (!this.initializeNewExtensionsPromise) {\n\t\t\tthis.initializeNewExtensionsPromise = (async () => {\n\t\t\t\tthis.logService.trace(`UserDataInitializationService#initializeNewExtensions`);\n\t\t\t\tconst extensionsPreviewInitializer = await this.getExtensionsPreviewInitializer(instantiationService);\n\t\t\t\tif (extensionsPreviewInitializer) {\n\t\t\t\t\tawait instantiationService.createInstance(NewExtensionsInitializer, extensionsPreviewInitializer).initialize();\n\t\t\t\t}\n\t\t\t})();\n\t\t}\n\t\treturn this.initializeNewExtensionsPromise;\n\t}\n\n\tprivate extensionsPreviewInitializerPromise: Promise<ExtensionsPreviewInitializer | null> | undefined;\n\tprivate getExtensionsPreviewInitializer(instantiationService: IInstantiationService): Promise<ExtensionsPreviewInitializer | null> {\n\t\tif (!this.extensionsPreviewInitializerPromise) {\n\t\t\tthis.extensionsPreviewInitializerPromise = (async () => {\n\t\t\t\tconst userDataSyncStoreClient = await this.createUserDataSyncStoreClient();\n\t\t\t\tif (!userDataSyncStoreClient) {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t\tconst userData = await userDataSyncStoreClient.readResource(SyncResource.Extensions, null);\n\t\t\t\treturn instantiationService.createInstance(ExtensionsPreviewInitializer, userData);\n\t\t\t})();\n\t\t}\n\t\treturn this.extensionsPreviewInitializerPromise;\n\t}\n\n\tprivate async initialize(syncResources: SyncResource[]): Promise<void> {\n\t\tconst userDataSyncStoreClient = await this.createUserDataSyncStoreClient();\n\t\tif (!userDataSyncStoreClient) {\n\t\t\treturn;\n\t\t}\n\n\t\tawait Promises.settled(syncResources.map(async syncResource => {\n\t\t\ttry {\n\t\t\t\tif (this.initialized.includes(syncResource)) {\n\t\t\t\t\tthis.logService.info(`${getSyncAreaLabel(syncResource)} initialized already.`);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tthis.initialized.push(syncResource);\n\t\t\t\tthis.logService.trace(`Initializing ${getSyncAreaLabel(syncResource)}`);\n\t\t\t\tconst initializer = this.createSyncResourceInitializer(syncResource);\n\t\t\t\tconst userData = await userDataSyncStoreClient.readResource(syncResource, syncResource === SyncResource.GlobalState ? this.globalStateUserData : null);\n\t\t\t\tawait initializer.initialize(userData);\n\t\t\t\tthis.logService.info(`Initialized ${getSyncAreaLabel(syncResource)}`);\n\t\t\t} catch (error) {\n\t\t\t\tthis.logService.info(`Error while initializing ${getSyncAreaLabel(syncResource)}`);\n\t\t\t\tthis.logService.error(error);\n\t\t\t}\n\t\t}));\n\t}\n\n\tprivate createSyncResourceInitializer(syncResource: SyncResource): IUserDataSyncResourceInitializer {\n\t\tswitch (syncResource) {\n\t\t\tcase SyncResource.Settings: return new SettingsInitializer(this.fileService, this.userDataProfilesService, this.environmentService, this.logService, this.storageService, this.uriIdentityService);\n\t\t\tcase SyncResource.Keybindings: return new KeybindingsInitializer(this.fileService, this.userDataProfilesService, this.environmentService, this.logService, this.storageService, this.uriIdentityService);\n\t\t\tcase SyncResource.Tasks: return new TasksInitializer(this.fileService, this.userDataProfilesService, this.environmentService, this.logService, this.storageService, this.uriIdentityService);\n\t\t\tcase SyncResource.Snippets: return new SnippetsInitializer(this.fileService, this.userDataProfilesService, this.environmentService, this.logService, this.storageService, this.uriIdentityService);\n\t\t\tcase SyncResource.GlobalState: return new GlobalStateInitializer(this.storageService, this.fileService, this.userDataProfilesService, this.environmentService, this.logService, this.uriIdentityService);\n\t\t}\n\t\tthrow new Error(`Cannot create initializer for ${syncResource}`);\n\t}\n\n}\n\nclass ExtensionsPreviewInitializer extends AbstractExtensionsInitializer {\n\n\tprivate previewPromise: Promise<IExtensionsInitializerPreviewResult | null> | undefined;\n\tprivate preview: IExtensionsInitializerPreviewResult | null = null;\n\n\tconstructor(\n\t\tprivate readonly extensionsData: IUserData,\n\t\t@IExtensionManagementService extensionManagementService: IExtensionManagementService,\n\t\t@IIgnoredExtensionsManagementService ignoredExtensionsManagementService: IIgnoredExtensionsManagementService,\n\t\t@IFileService fileService: IFileService,\n\t\t@IUserDataProfilesService userDataProfilesService: IUserDataProfilesService,\n\t\t@IEnvironmentService environmentService: IEnvironmentService,\n\t\t@IUserDataSyncLogService logService: IUserDataSyncLogService,\n\t\t@IStorageService storageService: IStorageService,\n\t\t@IUriIdentityService uriIdentityService: IUriIdentityService,\n\t) {\n\t\tsuper(extensionManagementService, ignoredExtensionsManagementService, fileService, userDataProfilesService, environmentService, logService, storageService, uriIdentityService);\n\t}\n\n\tgetPreview(): Promise<IExtensionsInitializerPreviewResult | null> {\n\t\tif (!this.previewPromise) {\n\t\t\tthis.previewPromise = super.initialize(this.extensionsData).then(() => this.preview);\n\t\t}\n\t\treturn this.previewPromise;\n\t}\n\n\toverride initialize(): Promise<void> {\n\t\tthrow new Error('should not be called directly');\n\t}\n\n\tprotected override async doInitialize(remoteUserData: IRemoteUserData): Promise<void> {\n\t\tconst remoteExtensions = await this.parseExtensions(remoteUserData);\n\t\tif (!remoteExtensions) {\n\t\t\tthis.logService.info('Skipping initializing extensions because remote extensions does not exist.');\n\t\t\treturn;\n\t\t}\n\t\tconst installedExtensions = await this.extensionManagementService.getInstalled();\n\t\tthis.preview = this.generatePreview(remoteExtensions, installedExtensions);\n\t}\n}\n\nclass InstalledExtensionsInitializer implements IUserDataSyncResourceInitializer {\n\n\tconstructor(\n\t\tprivate readonly extensionsPreviewInitializer: ExtensionsPreviewInitializer,\n\t\t@IGlobalExtensionEnablementService private readonly extensionEnablementService: IGlobalExtensionEnablementService,\n\t\t@IExtensionStorageService private readonly extensionStorageService: IExtensionStorageService,\n\t\t@IUserDataSyncLogService private readonly logService: IUserDataSyncLogService,\n\t) {\n\t}\n\n\tasync initialize(): Promise<void> {\n\t\tconst preview = await this.extensionsPreviewInitializer.getPreview();\n\t\tif (!preview) {\n\t\t\treturn;\n\t\t}\n\n\t\t// 1. Initialise already installed extensions state\n\t\tfor (const installedExtension of preview.installedExtensions) {\n\t\t\tconst syncExtension = preview.remoteExtensions.find(({ identifier }) => areSameExtensions(identifier, installedExtension.identifier));\n\t\t\tif (syncExtension?.state) {\n\t\t\t\tconst extensionState = this.extensionStorageService.getExtensionState(installedExtension, true) || {};\n\t\t\t\tObject.keys(syncExtension.state).forEach(key => extensionState[key] = syncExtension.state![key]);\n\t\t\t\tthis.extensionStorageService.setExtensionState(installedExtension, extensionState, true);\n\t\t\t}\n\t\t}\n\n\t\t// 2. Initialise extensions enablement\n\t\tif (preview.disabledExtensions.length) {\n\t\t\tfor (const identifier of preview.disabledExtensions) {\n\t\t\t\tthis.logService.trace(`Disabling extension...`, identifier.id);\n\t\t\t\tawait this.extensionEnablementService.disableExtension(identifier);\n\t\t\t\tthis.logService.info(`Disabling extension`, identifier.id);\n\t\t\t}\n\t\t}\n\t}\n}\n\nclass NewExtensionsInitializer implements IUserDataSyncResourceInitializer {\n\n\tconstructor(\n\t\tprivate readonly extensionsPreviewInitializer: ExtensionsPreviewInitializer,\n\t\t@IExtensionService private readonly extensionService: IExtensionService,\n\t\t@IExtensionStorageService private readonly extensionStorageService: IExtensionStorageService,\n\t\t@IExtensionGalleryService private readonly galleryService: IExtensionGalleryService,\n\t\t@IExtensionManagementService private readonly extensionManagementService: IExtensionManagementService,\n\t\t@IUserDataSyncLogService private readonly logService: IUserDataSyncLogService,\n\t) {\n\t}\n\n\tasync initialize(): Promise<void> {\n\t\tconst preview = await this.extensionsPreviewInitializer.getPreview();\n\t\tif (!preview) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst newlyEnabledExtensions: ILocalExtension[] = [];\n\t\tconst targetPlatform = await this.extensionManagementService.getTargetPlatform();\n\t\tconst galleryExtensions = await this.galleryService.getExtensions(preview.newExtensions, { targetPlatform, compatible: true }, CancellationToken.None);\n\t\tfor (const galleryExtension of galleryExtensions) {\n\t\t\ttry {\n\t\t\t\tconst extensionToSync = preview.remoteExtensions.find(({ identifier }) => areSameExtensions(identifier, galleryExtension.identifier));\n\t\t\t\tif (!extensionToSync) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tif (extensionToSync.state) {\n\t\t\t\t\tthis.extensionStorageService.setExtensionState(galleryExtension, extensionToSync.state, true);\n\t\t\t\t}\n\t\t\t\tthis.logService.trace(`Installing extension...`, galleryExtension.identifier.id);\n\t\t\t\tconst local = await this.extensionManagementService.installFromGallery(galleryExtension, {\n\t\t\t\t\tisMachineScoped: false, /* set isMachineScoped to prevent install and sync dialog in web */\n\t\t\t\t\tdonotIncludePackAndDependencies: true,\n\t\t\t\t\tinstallGivenVersion: !!extensionToSync.version,\n\t\t\t\t\tinstallPreReleaseVersion: extensionToSync.preRelease\n\t\t\t\t});\n\t\t\t\tif (!preview.disabledExtensions.some(identifier => areSameExtensions(identifier, galleryExtension.identifier))) {\n\t\t\t\t\tnewlyEnabledExtensions.push(local);\n\t\t\t\t}\n\t\t\t\tthis.logService.info(`Installed extension.`, galleryExtension.identifier.id);\n\t\t\t} catch (error) {\n\t\t\t\tthis.logService.error(error);\n\t\t\t}\n\t\t}\n\n\t\tconst canEnabledExtensions = newlyEnabledExtensions.filter(e => this.extensionService.canAddExtension(toExtensionDescription(e)));\n\t\tif (!(await this.areExtensionsRunning(canEnabledExtensions))) {\n\t\t\tawait new Promise<void>((c, e) => {\n\t\t\t\tconst disposable = this.extensionService.onDidChangeExtensions(async () => {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (await this.areExtensionsRunning(canEnabledExtensions)) {\n\t\t\t\t\t\t\tdisposable.dispose();\n\t\t\t\t\t\t\tc();\n\t\t\t\t\t\t}\n\t\t\t\t\t} catch (error) {\n\t\t\t\t\t\te(error);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\t}\n\n\tprivate async areExtensionsRunning(extensions: ILocalExtension[]): Promise<boolean> {\n\t\tawait this.extensionService.whenInstalledExtensionsRegistered();\n\t\tconst runningExtensions = this.extensionService.extensions;\n\t\treturn extensions.every(e => runningExtensions.some(r => areSameExtensions({ id: r.identifier.value }, e.identifier)));\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
