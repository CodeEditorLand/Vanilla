{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/extensions/common/remoteExtensionHost.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { VSBuffer } from \"../../../../base/common/buffer.js\";\nimport { Emitter, type Event } from \"../../../../base/common/event.js\";\nimport { Disposable } from \"../../../../base/common/lifecycle.js\";\nimport { Schemas } from \"../../../../base/common/network.js\";\nimport * as platform from \"../../../../base/common/platform.js\";\nimport type { URI } from \"../../../../base/common/uri.js\";\nimport type { IMessagePassingProtocol } from \"../../../../base/parts/ipc/common/ipc.js\";\nimport type { PersistentProtocol } from \"../../../../base/parts/ipc/common/ipc.net.js\";\nimport { IExtensionHostDebugService } from \"../../../../platform/debug/common/extensionHostDebug.js\";\nimport { ILabelService } from \"../../../../platform/label/common/label.js\";\nimport {\n\tILogService,\n\tILoggerService,\n} from \"../../../../platform/log/common/log.js\";\nimport { IProductService } from \"../../../../platform/product/common/productService.js\";\nimport {\n\ttype IConnectionOptions,\n\ttype IRemoteExtensionHostStartParams,\n\tconnectRemoteAgentExtensionHost,\n} from \"../../../../platform/remote/common/remoteAgentConnection.js\";\nimport {\n\tIRemoteAuthorityResolverService,\n\ttype IRemoteConnectionData,\n} from \"../../../../platform/remote/common/remoteAuthorityResolver.js\";\nimport { IRemoteSocketFactoryService } from \"../../../../platform/remote/common/remoteSocketFactoryService.js\";\nimport { ISignService } from \"../../../../platform/sign/common/sign.js\";\nimport { ITelemetryService } from \"../../../../platform/telemetry/common/telemetry.js\";\nimport { isLoggingOnly } from \"../../../../platform/telemetry/common/telemetryUtils.js\";\nimport {\n\tIWorkspaceContextService,\n\tWorkbenchState,\n} from \"../../../../platform/workspace/common/workspace.js\";\nimport { IWorkbenchEnvironmentService } from \"../../environment/common/environmentService.js\";\nimport { parseExtensionDevOptions } from \"./extensionDevOptions.js\";\nimport {\n\ttype IExtensionHostInitData,\n\tMessageType,\n\tUIKind,\n\tcreateMessageOfType,\n\tisMessageOfType,\n} from \"./extensionHostProtocol.js\";\nimport type { RemoteRunningLocation } from \"./extensionRunningLocation.js\";\nimport {\n\ttype ExtensionHostExtensions,\n\tExtensionHostStartup,\n\ttype IExtensionHost,\n} from \"./extensions.js\";\n\nexport interface IRemoteExtensionHostInitData {\n\treadonly connectionData: IRemoteConnectionData | null;\n\treadonly pid: number;\n\treadonly appRoot: URI;\n\treadonly extensionHostLogsPath: URI;\n\treadonly globalStorageHome: URI;\n\treadonly workspaceStorageHome: URI;\n\treadonly extensions: ExtensionHostExtensions;\n}\n\nexport interface IRemoteExtensionHostDataProvider {\n\treadonly remoteAuthority: string;\n\tgetInitData(): Promise<IRemoteExtensionHostInitData>;\n}\n\nexport class RemoteExtensionHost extends Disposable implements IExtensionHost {\n\tpublic readonly pid = null;\n\tpublic readonly remoteAuthority: string;\n\tpublic readonly startup = ExtensionHostStartup.EagerAutoStart;\n\tpublic extensions: ExtensionHostExtensions | null = null;\n\n\tprivate _onExit: Emitter<[number, string | null]> = this._register(\n\t\tnew Emitter<[number, string | null]>(),\n\t);\n\tpublic readonly onExit: Event<[number, string | null]> = this._onExit.event;\n\n\tprivate _protocol: PersistentProtocol | null;\n\tprivate _hasLostConnection: boolean;\n\tprivate _terminating: boolean;\n\tprivate _hasDisconnected = false;\n\tprivate readonly _isExtensionDevHost: boolean;\n\n\tconstructor(\n\t\tpublic readonly runningLocation: RemoteRunningLocation,\n\t\tprivate readonly _initDataProvider: IRemoteExtensionHostDataProvider,\n\t\t@IRemoteSocketFactoryService private readonly remoteSocketFactoryService: IRemoteSocketFactoryService,\n\t\t@IWorkspaceContextService private readonly _contextService: IWorkspaceContextService,\n\t\t@IWorkbenchEnvironmentService private readonly _environmentService: IWorkbenchEnvironmentService,\n\t\t@ITelemetryService private readonly _telemetryService: ITelemetryService,\n\t\t@ILogService private readonly _logService: ILogService,\n\t\t@ILoggerService protected readonly _loggerService: ILoggerService,\n\t\t@ILabelService private readonly _labelService: ILabelService,\n\t\t@IRemoteAuthorityResolverService private readonly remoteAuthorityResolverService: IRemoteAuthorityResolverService,\n\t\t@IExtensionHostDebugService private readonly _extensionHostDebugService: IExtensionHostDebugService,\n\t\t@IProductService private readonly _productService: IProductService,\n\t\t@ISignService private readonly _signService: ISignService\n\t) {\n\t\tsuper();\n\t\tthis.remoteAuthority = this._initDataProvider.remoteAuthority;\n\t\tthis._protocol = null;\n\t\tthis._hasLostConnection = false;\n\t\tthis._terminating = false;\n\n\t\tconst devOpts = parseExtensionDevOptions(this._environmentService);\n\t\tthis._isExtensionDevHost = devOpts.isExtensionDevHost;\n\t}\n\n\tpublic start(): Promise<IMessagePassingProtocol> {\n\t\tconst options: IConnectionOptions = {\n\t\t\tcommit: this._productService.commit,\n\t\t\tquality: this._productService.quality,\n\t\t\taddressProvider: {\n\t\t\t\tgetAddress: async () => {\n\t\t\t\t\tconst { authority } =\n\t\t\t\t\t\tawait this.remoteAuthorityResolverService.resolveAuthority(\n\t\t\t\t\t\t\tthis._initDataProvider.remoteAuthority,\n\t\t\t\t\t\t);\n\t\t\t\t\treturn {\n\t\t\t\t\t\tconnectTo: authority.connectTo,\n\t\t\t\t\t\tconnectionToken: authority.connectionToken,\n\t\t\t\t\t};\n\t\t\t\t},\n\t\t\t},\n\t\t\tremoteSocketFactoryService: this.remoteSocketFactoryService,\n\t\t\tsignService: this._signService,\n\t\t\tlogService: this._logService,\n\t\t\tipcLogger: null,\n\t\t};\n\t\treturn this.remoteAuthorityResolverService\n\t\t\t.resolveAuthority(this._initDataProvider.remoteAuthority)\n\t\t\t.then((resolverResult) => {\n\t\t\t\tconst startParams: IRemoteExtensionHostStartParams = {\n\t\t\t\t\tlanguage: platform.language,\n\t\t\t\t\tdebugId:\n\t\t\t\t\t\tthis._environmentService.debugExtensionHost.debugId,\n\t\t\t\t\tbreak: this._environmentService.debugExtensionHost.break,\n\t\t\t\t\tport: this._environmentService.debugExtensionHost.port,\n\t\t\t\t\tenv: {\n\t\t\t\t\t\t...this._environmentService.debugExtensionHost.env,\n\t\t\t\t\t\t...resolverResult.options?.extensionHostEnv,\n\t\t\t\t\t},\n\t\t\t\t};\n\n\t\t\t\tconst extDevLocs =\n\t\t\t\t\tthis._environmentService.extensionDevelopmentLocationURI;\n\n\t\t\t\tlet debugOk = true;\n\t\t\t\tif (extDevLocs && extDevLocs.length > 0) {\n\t\t\t\t\t// TODO@AW: handles only first path in array\n\t\t\t\t\tif (extDevLocs[0].scheme === Schemas.file) {\n\t\t\t\t\t\tdebugOk = false;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (!debugOk) {\n\t\t\t\t\tstartParams.break = false;\n\t\t\t\t}\n\n\t\t\t\treturn connectRemoteAgentExtensionHost(\n\t\t\t\t\toptions,\n\t\t\t\t\tstartParams,\n\t\t\t\t).then((result) => {\n\t\t\t\t\tthis._register(result);\n\t\t\t\t\tconst { protocol, debugPort, reconnectionToken } = result;\n\t\t\t\t\tconst isExtensionDevelopmentDebug =\n\t\t\t\t\t\ttypeof debugPort === \"number\";\n\t\t\t\t\tif (\n\t\t\t\t\t\tdebugOk &&\n\t\t\t\t\t\tthis._environmentService.isExtensionDevelopment &&\n\t\t\t\t\t\tthis._environmentService.debugExtensionHost.debugId &&\n\t\t\t\t\t\tdebugPort\n\t\t\t\t\t) {\n\t\t\t\t\t\tthis._extensionHostDebugService.attachSession(\n\t\t\t\t\t\t\tthis._environmentService.debugExtensionHost.debugId,\n\t\t\t\t\t\t\tdebugPort,\n\t\t\t\t\t\t\tthis._initDataProvider.remoteAuthority,\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\n\t\t\t\t\tprotocol.onDidDispose(() => {\n\t\t\t\t\t\tthis._onExtHostConnectionLost(reconnectionToken);\n\t\t\t\t\t});\n\n\t\t\t\t\tprotocol.onSocketClose(() => {\n\t\t\t\t\t\tif (this._isExtensionDevHost) {\n\t\t\t\t\t\t\tthis._onExtHostConnectionLost(reconnectionToken);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\n\t\t\t\t\t// 1) wait for the incoming `ready` event and send the initialization data.\n\t\t\t\t\t// 2) wait for the incoming `initialized` event.\n\t\t\t\t\treturn new Promise<IMessagePassingProtocol>(\n\t\t\t\t\t\t(resolve, reject) => {\n\t\t\t\t\t\t\tconst handle = setTimeout(() => {\n\t\t\t\t\t\t\t\treject(\n\t\t\t\t\t\t\t\t\t\"The remote extension host took longer than 60s to send its ready message.\",\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t}, 60 * 1000);\n\n\t\t\t\t\t\t\tconst disposable = protocol.onMessage((msg) => {\n\t\t\t\t\t\t\t\tif (isMessageOfType(msg, MessageType.Ready)) {\n\t\t\t\t\t\t\t\t\t// 1) Extension Host is ready to receive messages, initialize it\n\t\t\t\t\t\t\t\t\tthis._createExtHostInitData(\n\t\t\t\t\t\t\t\t\t\tisExtensionDevelopmentDebug,\n\t\t\t\t\t\t\t\t\t).then((data) => {\n\t\t\t\t\t\t\t\t\t\tprotocol.send(\n\t\t\t\t\t\t\t\t\t\t\tVSBuffer.fromString(\n\t\t\t\t\t\t\t\t\t\t\t\tJSON.stringify(data),\n\t\t\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\t\tisMessageOfType(\n\t\t\t\t\t\t\t\t\t\tmsg,\n\t\t\t\t\t\t\t\t\t\tMessageType.Initialized,\n\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\t\t// 2) Extension Host is initialized\n\n\t\t\t\t\t\t\t\t\tclearTimeout(handle);\n\n\t\t\t\t\t\t\t\t\t// stop listening for messages here\n\t\t\t\t\t\t\t\t\tdisposable.dispose();\n\n\t\t\t\t\t\t\t\t\t// release this promise\n\t\t\t\t\t\t\t\t\tthis._protocol = protocol;\n\t\t\t\t\t\t\t\t\tresolve(protocol);\n\n\t\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tconsole.error(\n\t\t\t\t\t\t\t\t\t`received unexpected message during handshake phase from the extension host: `,\n\t\t\t\t\t\t\t\t\tmsg,\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t},\n\t\t\t\t\t);\n\t\t\t\t});\n\t\t\t});\n\t}\n\n\tprivate _onExtHostConnectionLost(reconnectionToken: string): void {\n\t\tif (this._hasLostConnection) {\n\t\t\t// avoid re-entering this method\n\t\t\treturn;\n\t\t}\n\t\tthis._hasLostConnection = true;\n\n\t\tif (\n\t\t\tthis._isExtensionDevHost &&\n\t\t\tthis._environmentService.debugExtensionHost.debugId\n\t\t) {\n\t\t\tthis._extensionHostDebugService.close(\n\t\t\t\tthis._environmentService.debugExtensionHost.debugId,\n\t\t\t);\n\t\t}\n\n\t\tif (this._terminating) {\n\t\t\t// Expected termination path (we asked the process to terminate)\n\t\t\treturn;\n\t\t}\n\n\t\tthis._onExit.fire([0, reconnectionToken]);\n\t}\n\n\tprivate async _createExtHostInitData(\n\t\tisExtensionDevelopmentDebug: boolean,\n\t): Promise<IExtensionHostInitData> {\n\t\tconst remoteInitData = await this._initDataProvider.getInitData();\n\t\tthis.extensions = remoteInitData.extensions;\n\t\tconst workspace = this._contextService.getWorkspace();\n\t\treturn {\n\t\t\tcommit: this._productService.commit,\n\t\t\tversion: this._productService.version,\n\t\t\tquality: this._productService.quality,\n\t\t\tparentPid: remoteInitData.pid,\n\t\t\tenvironment: {\n\t\t\t\tisExtensionDevelopmentDebug,\n\t\t\t\tappRoot: remoteInitData.appRoot,\n\t\t\t\tappName: this._productService.nameLong,\n\t\t\t\tappHost: this._productService.embedderIdentifier || \"desktop\",\n\t\t\t\tappUriScheme: this._productService.urlProtocol,\n\t\t\t\textensionTelemetryLogResource:\n\t\t\t\t\tthis._environmentService.extHostTelemetryLogFile,\n\t\t\t\tisExtensionTelemetryLoggingOnly: isLoggingOnly(\n\t\t\t\t\tthis._productService,\n\t\t\t\t\tthis._environmentService,\n\t\t\t\t),\n\t\t\t\tappLanguage: platform.language,\n\t\t\t\textensionDevelopmentLocationURI:\n\t\t\t\t\tthis._environmentService.extensionDevelopmentLocationURI,\n\t\t\t\textensionTestsLocationURI:\n\t\t\t\t\tthis._environmentService.extensionTestsLocationURI,\n\t\t\t\tglobalStorageHome: remoteInitData.globalStorageHome,\n\t\t\t\tworkspaceStorageHome: remoteInitData.workspaceStorageHome,\n\t\t\t\textensionLogLevel: this._environmentService.extensionLogLevel,\n\t\t\t},\n\t\t\tworkspace:\n\t\t\t\tthis._contextService.getWorkbenchState() ===\n\t\t\t\tWorkbenchState.EMPTY\n\t\t\t\t\t? null\n\t\t\t\t\t: {\n\t\t\t\t\t\t\tconfiguration: workspace.configuration,\n\t\t\t\t\t\t\tid: workspace.id,\n\t\t\t\t\t\t\tname: this._labelService.getWorkspaceLabel(\n\t\t\t\t\t\t\t\tworkspace,\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\ttransient: workspace.transient,\n\t\t\t\t\t\t},\n\t\t\tremote: {\n\t\t\t\tisRemote: true,\n\t\t\t\tauthority: this._initDataProvider.remoteAuthority,\n\t\t\t\tconnectionData: remoteInitData.connectionData,\n\t\t\t},\n\t\t\tconsoleForward: {\n\t\t\t\tincludeStack: false,\n\t\t\t\tlogNative: Boolean(\n\t\t\t\t\tthis._environmentService.debugExtensionHost.debugId,\n\t\t\t\t),\n\t\t\t},\n\t\t\textensions: this.extensions.toSnapshot(),\n\t\t\ttelemetryInfo: {\n\t\t\t\tsessionId: this._telemetryService.sessionId,\n\t\t\t\tmachineId: this._telemetryService.machineId,\n\t\t\t\tsqmId: this._telemetryService.sqmId,\n\t\t\t\tdevDeviceId: this._telemetryService.devDeviceId,\n\t\t\t\tfirstSessionDate: this._telemetryService.firstSessionDate,\n\t\t\t\tmsftInternal: this._telemetryService.msftInternal,\n\t\t\t},\n\t\t\tlogLevel: this._logService.getLevel(),\n\t\t\tloggers: [...this._loggerService.getRegisteredLoggers()],\n\t\t\tlogsLocation: remoteInitData.extensionHostLogsPath,\n\t\t\tautoStart: this.startup === ExtensionHostStartup.EagerAutoStart,\n\t\t\tuiKind: platform.isWeb ? UIKind.Web : UIKind.Desktop,\n\t\t};\n\t}\n\n\tgetInspectPort(): undefined {\n\t\treturn undefined;\n\t}\n\n\tenableInspectPort(): Promise<boolean> {\n\t\treturn Promise.resolve(false);\n\t}\n\n\tasync disconnect() {\n\t\tif (this._protocol && !this._hasDisconnected) {\n\t\t\tthis._protocol.send(createMessageOfType(MessageType.Terminate));\n\t\t\tthis._protocol.sendDisconnect();\n\t\t\tthis._hasDisconnected = true;\n\t\t\tawait this._protocol.drain();\n\t\t}\n\t}\n\n\toverride dispose(): void {\n\t\tsuper.dispose();\n\n\t\tthis._terminating = true;\n\t\tthis.disconnect();\n\n\t\tif (this._protocol) {\n\t\t\t// Send the extension host a request to terminate itself\n\t\t\t// (graceful termination)\n\t\t\t// setTimeout(() => {\n\t\t\t// console.log(`SENDING TERMINATE TO REMOTE EXT HOST!`);\n\t\t\tthis._protocol.getSocket().end();\n\t\t\t// this._protocol.drain();\n\t\t\tthis._protocol = null;\n\t\t\t// }, 1000);\n\t\t}\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
