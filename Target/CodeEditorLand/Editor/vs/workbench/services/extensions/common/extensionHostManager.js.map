{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/extensions/common/extensionHostManager.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IntervalTimer } from '../../../../base/common/async.js';\nimport { VSBuffer } from '../../../../base/common/buffer.js';\nimport * as errors from '../../../../base/common/errors.js';\nimport { Emitter, Event } from '../../../../base/common/event.js';\nimport { Disposable, IDisposable } from '../../../../base/common/lifecycle.js';\nimport { StopWatch } from '../../../../base/common/stopwatch.js';\nimport { URI } from '../../../../base/common/uri.js';\nimport { IMessagePassingProtocol } from '../../../../base/parts/ipc/common/ipc.js';\nimport * as nls from '../../../../nls.js';\nimport { Categories } from '../../../../platform/action/common/actionCommonCategories.js';\nimport { Action2, registerAction2 } from '../../../../platform/actions/common/actions.js';\nimport { ExtensionIdentifier, IExtensionDescription } from '../../../../platform/extensions/common/extensions.js';\nimport { IInstantiationService, ServicesAccessor } from '../../../../platform/instantiation/common/instantiation.js';\nimport { ILogService } from '../../../../platform/log/common/log.js';\nimport { RemoteAuthorityResolverErrorCode, getRemoteAuthorityPrefix } from '../../../../platform/remote/common/remoteAuthorityResolver.js';\nimport { ITelemetryService } from '../../../../platform/telemetry/common/telemetry.js';\nimport { IEditorService } from '../../editor/common/editorService.js';\nimport { IWorkbenchEnvironmentService } from '../../environment/common/environmentService.js';\nimport { ExtHostCustomersRegistry, IInternalExtHostContext } from './extHostCustomers.js';\nimport { ExtensionHostKind, extensionHostKindToString } from './extensionHostKind.js';\nimport { IExtensionHostManager } from './extensionHostManagers.js';\nimport { IExtensionDescriptionDelta } from './extensionHostProtocol.js';\nimport { IExtensionHostProxy, IResolveAuthorityResult } from './extensionHostProxy.js';\nimport { ExtensionRunningLocation } from './extensionRunningLocation.js';\nimport { ActivationKind, ExtensionActivationReason, ExtensionHostStartup, IExtensionHost, IInternalExtensionService } from './extensions.js';\nimport { Proxied, ProxyIdentifier } from './proxyIdentifier.js';\nimport { IRPCProtocolLogger, RPCProtocol, RequestInitiator, ResponsiveState } from './rpcProtocol.js';\n\n// Enable to see detailed message communication between window and extension host\nconst LOG_EXTENSION_HOST_COMMUNICATION = false;\nconst LOG_USE_COLORS = true;\n\ntype ExtensionHostStartupClassification = {\n\towner: 'alexdima';\n\tcomment: 'The startup state of the extension host';\n\ttime: { classification: 'SystemMetaData'; purpose: 'PerformanceAndHealth'; comment: 'The time reported by Date.now().' };\n\taction: { classification: 'SystemMetaData'; purpose: 'PerformanceAndHealth'; comment: 'The action: starting, success or error.' };\n\tkind: { classification: 'SystemMetaData'; purpose: 'PerformanceAndHealth'; comment: 'The extension host kind: LocalProcess, LocalWebWorker or Remote.' };\n\terrorName?: { classification: 'SystemMetaData'; purpose: 'PerformanceAndHealth'; comment: 'The error name.' };\n\terrorMessage?: { classification: 'SystemMetaData'; purpose: 'PerformanceAndHealth'; comment: 'The error message.' };\n\terrorStack?: { classification: 'SystemMetaData'; purpose: 'PerformanceAndHealth'; comment: 'The error stack.' };\n};\n\ntype ExtensionHostStartupEvent = {\n\ttime: number;\n\taction: 'starting' | 'success' | 'error';\n\tkind: string;\n\terrorName?: string;\n\terrorMessage?: string;\n\terrorStack?: string;\n};\n\nexport class ExtensionHostManager extends Disposable implements IExtensionHostManager {\n\n\tpublic readonly onDidExit: Event<[number, string | null]>;\n\n\tprivate readonly _onDidChangeResponsiveState: Emitter<ResponsiveState> = this._register(new Emitter<ResponsiveState>());\n\tpublic readonly onDidChangeResponsiveState: Event<ResponsiveState> = this._onDidChangeResponsiveState.event;\n\n\t/**\n\t * A map of already requested activation events to speed things up if the same activation event is triggered multiple times.\n\t */\n\tprivate readonly _cachedActivationEvents: Map<string, Promise<void>>;\n\tprivate readonly _resolvedActivationEvents: Set<string>;\n\tprivate _rpcProtocol: RPCProtocol | null;\n\tprivate readonly _customers: IDisposable[];\n\tprivate readonly _extensionHost: IExtensionHost;\n\tprivate _proxy: Promise<IExtensionHostProxy | null> | null;\n\tprivate _hasStarted = false;\n\n\tpublic get pid(): number | null {\n\t\treturn this._extensionHost.pid;\n\t}\n\n\tpublic get kind(): ExtensionHostKind {\n\t\treturn this._extensionHost.runningLocation.kind;\n\t}\n\n\tpublic get startup(): ExtensionHostStartup {\n\t\treturn this._extensionHost.startup;\n\t}\n\n\tpublic get friendyName(): string {\n\t\treturn friendlyExtHostName(this.kind, this.pid);\n\t}\n\n\tconstructor(\n\t\textensionHost: IExtensionHost,\n\t\tinitialActivationEvents: string[],\n\t\tprivate readonly _internalExtensionService: IInternalExtensionService,\n\t\t@IInstantiationService private readonly _instantiationService: IInstantiationService,\n\t\t@IWorkbenchEnvironmentService private readonly _environmentService: IWorkbenchEnvironmentService,\n\t\t@ITelemetryService private readonly _telemetryService: ITelemetryService,\n\t\t@ILogService private readonly _logService: ILogService,\n\t) {\n\t\tsuper();\n\t\tthis._cachedActivationEvents = new Map<string, Promise<void>>();\n\t\tthis._resolvedActivationEvents = new Set<string>();\n\t\tthis._rpcProtocol = null;\n\t\tthis._customers = [];\n\n\t\tthis._extensionHost = extensionHost;\n\t\tthis.onDidExit = this._extensionHost.onExit;\n\n\t\tconst startingTelemetryEvent: ExtensionHostStartupEvent = {\n\t\t\ttime: Date.now(),\n\t\t\taction: 'starting',\n\t\t\tkind: extensionHostKindToString(this.kind)\n\t\t};\n\t\tthis._telemetryService.publicLog2<ExtensionHostStartupEvent, ExtensionHostStartupClassification>('extensionHostStartup', startingTelemetryEvent);\n\n\t\tthis._proxy = this._extensionHost.start().then(\n\t\t\t(protocol) => {\n\t\t\t\tthis._hasStarted = true;\n\n\t\t\t\t// Track healthy extension host startup\n\t\t\t\tconst successTelemetryEvent: ExtensionHostStartupEvent = {\n\t\t\t\t\ttime: Date.now(),\n\t\t\t\t\taction: 'success',\n\t\t\t\t\tkind: extensionHostKindToString(this.kind)\n\t\t\t\t};\n\t\t\t\tthis._telemetryService.publicLog2<ExtensionHostStartupEvent, ExtensionHostStartupClassification>('extensionHostStartup', successTelemetryEvent);\n\n\t\t\t\treturn this._createExtensionHostCustomers(this.kind, protocol);\n\t\t\t},\n\t\t\t(err) => {\n\t\t\t\tthis._logService.error(`Error received from starting extension host (kind: ${extensionHostKindToString(this.kind)})`);\n\t\t\t\tthis._logService.error(err);\n\n\t\t\t\t// Track errors during extension host startup\n\t\t\t\tconst failureTelemetryEvent: ExtensionHostStartupEvent = {\n\t\t\t\t\ttime: Date.now(),\n\t\t\t\t\taction: 'error',\n\t\t\t\t\tkind: extensionHostKindToString(this.kind)\n\t\t\t\t};\n\n\t\t\t\tif (err && err.name) {\n\t\t\t\t\tfailureTelemetryEvent.errorName = err.name;\n\t\t\t\t}\n\t\t\t\tif (err && err.message) {\n\t\t\t\t\tfailureTelemetryEvent.errorMessage = err.message;\n\t\t\t\t}\n\t\t\t\tif (err && err.stack) {\n\t\t\t\t\tfailureTelemetryEvent.errorStack = err.stack;\n\t\t\t\t}\n\t\t\t\tthis._telemetryService.publicLog2<ExtensionHostStartupEvent, ExtensionHostStartupClassification>('extensionHostStartup', failureTelemetryEvent);\n\n\t\t\t\treturn null;\n\t\t\t}\n\t\t);\n\t\tthis._proxy.then(() => {\n\t\t\tinitialActivationEvents.forEach((activationEvent) => this.activateByEvent(activationEvent, ActivationKind.Normal));\n\t\t\tthis._register(registerLatencyTestProvider({\n\t\t\t\tmeasure: () => this.measure()\n\t\t\t}));\n\t\t});\n\t}\n\n\tpublic async disconnect(): Promise<void> {\n\t\tawait this._extensionHost?.disconnect?.();\n\t}\n\n\tpublic override dispose(): void {\n\t\tthis._extensionHost?.dispose();\n\t\tthis._rpcProtocol?.dispose();\n\n\t\tfor (let i = 0, len = this._customers.length; i < len; i++) {\n\t\t\tconst customer = this._customers[i];\n\t\t\ttry {\n\t\t\t\tcustomer.dispose();\n\t\t\t} catch (err) {\n\t\t\t\terrors.onUnexpectedError(err);\n\t\t\t}\n\t\t}\n\t\tthis._proxy = null;\n\n\t\tsuper.dispose();\n\t}\n\n\tprivate async measure(): Promise<ExtHostLatencyResult | null> {\n\t\tconst proxy = await this._proxy;\n\t\tif (!proxy) {\n\t\t\treturn null;\n\t\t}\n\t\tconst latency = await this._measureLatency(proxy);\n\t\tconst down = await this._measureDown(proxy);\n\t\tconst up = await this._measureUp(proxy);\n\t\treturn {\n\t\t\tremoteAuthority: this._extensionHost.remoteAuthority,\n\t\t\tlatency,\n\t\t\tdown,\n\t\t\tup\n\t\t};\n\t}\n\n\tpublic async ready(): Promise<void> {\n\t\tawait this._proxy;\n\t}\n\n\tprivate async _measureLatency(proxy: IExtensionHostProxy): Promise<number> {\n\t\tconst COUNT = 10;\n\n\t\tlet sum = 0;\n\t\tfor (let i = 0; i < COUNT; i++) {\n\t\t\tconst sw = StopWatch.create();\n\t\t\tawait proxy.test_latency(i);\n\t\t\tsw.stop();\n\t\t\tsum += sw.elapsed();\n\t\t}\n\t\treturn (sum / COUNT);\n\t}\n\n\tprivate static _convert(byteCount: number, elapsedMillis: number): number {\n\t\treturn (byteCount * 1000 * 8) / elapsedMillis;\n\t}\n\n\tprivate async _measureUp(proxy: IExtensionHostProxy): Promise<number> {\n\t\tconst SIZE = 10 * 1024 * 1024; // 10MB\n\n\t\tconst buff = VSBuffer.alloc(SIZE);\n\t\tconst value = Math.ceil(Math.random() * 256);\n\t\tfor (let i = 0; i < buff.byteLength; i++) {\n\t\t\tbuff.writeUInt8(i, value);\n\t\t}\n\t\tconst sw = StopWatch.create();\n\t\tawait proxy.test_up(buff);\n\t\tsw.stop();\n\t\treturn ExtensionHostManager._convert(SIZE, sw.elapsed());\n\t}\n\n\tprivate async _measureDown(proxy: IExtensionHostProxy): Promise<number> {\n\t\tconst SIZE = 10 * 1024 * 1024; // 10MB\n\n\t\tconst sw = StopWatch.create();\n\t\tawait proxy.test_down(SIZE);\n\t\tsw.stop();\n\t\treturn ExtensionHostManager._convert(SIZE, sw.elapsed());\n\t}\n\n\tprivate _createExtensionHostCustomers(kind: ExtensionHostKind, protocol: IMessagePassingProtocol): IExtensionHostProxy {\n\n\t\tlet logger: IRPCProtocolLogger | null = null;\n\t\tif (LOG_EXTENSION_HOST_COMMUNICATION || this._environmentService.logExtensionHostCommunication) {\n\t\t\tlogger = new RPCLogger(kind);\n\t\t} else if (TelemetryRPCLogger.isEnabled()) {\n\t\t\tlogger = new TelemetryRPCLogger(this._telemetryService);\n\t\t}\n\n\t\tthis._rpcProtocol = new RPCProtocol(protocol, logger);\n\t\tthis._register(this._rpcProtocol.onDidChangeResponsiveState((responsiveState: ResponsiveState) => this._onDidChangeResponsiveState.fire(responsiveState)));\n\t\tlet extensionHostProxy: IExtensionHostProxy | null = null as IExtensionHostProxy | null;\n\t\tlet mainProxyIdentifiers: ProxyIdentifier<any>[] = [];\n\t\tconst extHostContext: IInternalExtHostContext = {\n\t\t\tremoteAuthority: this._extensionHost.remoteAuthority,\n\t\t\textensionHostKind: this.kind,\n\t\t\tgetProxy: <T>(identifier: ProxyIdentifier<T>): Proxied<T> => this._rpcProtocol!.getProxy(identifier),\n\t\t\tset: <T, R extends T>(identifier: ProxyIdentifier<T>, instance: R): R => this._rpcProtocol!.set(identifier, instance),\n\t\t\tdispose: (): void => this._rpcProtocol!.dispose(),\n\t\t\tassertRegistered: (identifiers: ProxyIdentifier<any>[]): void => this._rpcProtocol!.assertRegistered(identifiers),\n\t\t\tdrain: (): Promise<void> => this._rpcProtocol!.drain(),\n\n\t\t\t//#region internal\n\t\t\tinternalExtensionService: this._internalExtensionService,\n\t\t\t_setExtensionHostProxy: (value: IExtensionHostProxy): void => {\n\t\t\t\textensionHostProxy = value;\n\t\t\t},\n\t\t\t_setAllMainProxyIdentifiers: (value: ProxyIdentifier<any>[]): void => {\n\t\t\t\tmainProxyIdentifiers = value;\n\t\t\t},\n\t\t\t//#endregion\n\t\t};\n\n\t\t// Named customers\n\t\tconst namedCustomers = ExtHostCustomersRegistry.getNamedCustomers();\n\t\tfor (let i = 0, len = namedCustomers.length; i < len; i++) {\n\t\t\tconst [id, ctor] = namedCustomers[i];\n\t\t\ttry {\n\t\t\t\tconst instance = this._instantiationService.createInstance(ctor, extHostContext);\n\t\t\t\tthis._customers.push(instance);\n\t\t\t\tthis._rpcProtocol.set(id, instance);\n\t\t\t} catch (err) {\n\t\t\t\tthis._logService.error(`Cannot instantiate named customer: '${id.sid}'`);\n\t\t\t\tthis._logService.error(err);\n\t\t\t\terrors.onUnexpectedError(err);\n\t\t\t}\n\t\t}\n\n\t\t// Customers\n\t\tconst customers = ExtHostCustomersRegistry.getCustomers();\n\t\tfor (const ctor of customers) {\n\t\t\ttry {\n\t\t\t\tconst instance = this._instantiationService.createInstance(ctor, extHostContext);\n\t\t\t\tthis._customers.push(instance);\n\t\t\t} catch (err) {\n\t\t\t\tthis._logService.error(err);\n\t\t\t\terrors.onUnexpectedError(err);\n\t\t\t}\n\t\t}\n\n\t\tif (!extensionHostProxy) {\n\t\t\tthrow new Error(`Missing IExtensionHostProxy!`);\n\t\t}\n\n\t\t// Check that no named customers are missing\n\t\tthis._rpcProtocol.assertRegistered(mainProxyIdentifiers);\n\n\t\treturn extensionHostProxy;\n\t}\n\n\tpublic async activate(extension: ExtensionIdentifier, reason: ExtensionActivationReason): Promise<boolean> {\n\t\tconst proxy = await this._proxy;\n\t\tif (!proxy) {\n\t\t\treturn false;\n\t\t}\n\t\treturn proxy.activate(extension, reason);\n\t}\n\n\tpublic activateByEvent(activationEvent: string, activationKind: ActivationKind): Promise<void> {\n\t\tif (activationKind === ActivationKind.Immediate && !this._hasStarted) {\n\t\t\treturn Promise.resolve();\n\t\t}\n\n\t\tif (!this._cachedActivationEvents.has(activationEvent)) {\n\t\t\tthis._cachedActivationEvents.set(activationEvent, this._activateByEvent(activationEvent, activationKind));\n\t\t}\n\t\treturn this._cachedActivationEvents.get(activationEvent)!;\n\t}\n\n\tpublic activationEventIsDone(activationEvent: string): boolean {\n\t\treturn this._resolvedActivationEvents.has(activationEvent);\n\t}\n\n\tprivate async _activateByEvent(activationEvent: string, activationKind: ActivationKind): Promise<void> {\n\t\tif (!this._proxy) {\n\t\t\treturn;\n\t\t}\n\t\tconst proxy = await this._proxy;\n\t\tif (!proxy) {\n\t\t\t// this case is already covered above and logged.\n\t\t\t// i.e. the extension host could not be started\n\t\t\treturn;\n\t\t}\n\n\t\tif (!this._extensionHost.extensions!.containsActivationEvent(activationEvent)) {\n\t\t\tthis._resolvedActivationEvents.add(activationEvent);\n\t\t\treturn;\n\t\t}\n\n\t\tawait proxy.activateByEvent(activationEvent, activationKind);\n\t\tthis._resolvedActivationEvents.add(activationEvent);\n\t}\n\n\tpublic async getInspectPort(tryEnableInspector: boolean): Promise<{ port: number; host: string } | undefined> {\n\t\tif (this._extensionHost) {\n\t\t\tif (tryEnableInspector) {\n\t\t\t\tawait this._extensionHost.enableInspectPort();\n\t\t\t}\n\t\t\tconst port = this._extensionHost.getInspectPort();\n\t\t\tif (port) {\n\t\t\t\treturn port;\n\t\t\t}\n\t\t}\n\n\t\treturn undefined;\n\t}\n\n\tpublic async resolveAuthority(remoteAuthority: string, resolveAttempt: number): Promise<IResolveAuthorityResult> {\n\t\tconst sw = StopWatch.create(false);\n\t\tconst prefix = () => `[${extensionHostKindToString(this._extensionHost.runningLocation.kind)}${this._extensionHost.runningLocation.affinity}][resolveAuthority(${getRemoteAuthorityPrefix(remoteAuthority)},${resolveAttempt})][${sw.elapsed()}ms] `;\n\t\tconst logInfo = (msg: string) => this._logService.info(`${prefix()}${msg}`);\n\t\tconst logError = (msg: string, err: any = undefined) => this._logService.error(`${prefix()}${msg}`, err);\n\n\t\tlogInfo(`obtaining proxy...`);\n\t\tconst proxy = await this._proxy;\n\t\tif (!proxy) {\n\t\t\tlogError(`no proxy`);\n\t\t\treturn {\n\t\t\t\ttype: 'error',\n\t\t\t\terror: {\n\t\t\t\t\tmessage: `Cannot resolve authority`,\n\t\t\t\t\tcode: RemoteAuthorityResolverErrorCode.Unknown,\n\t\t\t\t\tdetail: undefined\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\t\tlogInfo(`invoking...`);\n\t\tconst intervalLogger = new IntervalTimer();\n\t\ttry {\n\t\t\tintervalLogger.cancelAndSet(() => logInfo('waiting...'), 1000);\n\t\t\tconst resolverResult = await proxy.resolveAuthority(remoteAuthority, resolveAttempt);\n\t\t\tintervalLogger.dispose();\n\t\t\tif (resolverResult.type === 'ok') {\n\t\t\t\tlogInfo(`returned ${resolverResult.value.authority.connectTo}`);\n\t\t\t} else {\n\t\t\t\tlogError(`returned an error`, resolverResult.error);\n\t\t\t}\n\t\t\treturn resolverResult;\n\t\t} catch (err) {\n\t\t\tintervalLogger.dispose();\n\t\t\tlogError(`returned an error`, err);\n\t\t\treturn {\n\t\t\t\ttype: 'error',\n\t\t\t\terror: {\n\t\t\t\t\tmessage: err.message,\n\t\t\t\t\tcode: RemoteAuthorityResolverErrorCode.Unknown,\n\t\t\t\t\tdetail: err\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\t}\n\n\tpublic async getCanonicalURI(remoteAuthority: string, uri: URI): Promise<URI | null> {\n\t\tconst proxy = await this._proxy;\n\t\tif (!proxy) {\n\t\t\tthrow new Error(`Cannot resolve canonical URI`);\n\t\t}\n\t\treturn proxy.getCanonicalURI(remoteAuthority, uri);\n\t}\n\n\tpublic async start(extensionRegistryVersionId: number, allExtensions: IExtensionDescription[], myExtensions: ExtensionIdentifier[]): Promise<void> {\n\t\tconst proxy = await this._proxy;\n\t\tif (!proxy) {\n\t\t\treturn;\n\t\t}\n\t\tconst deltaExtensions = this._extensionHost.extensions!.set(extensionRegistryVersionId, allExtensions, myExtensions);\n\t\treturn proxy.startExtensionHost(deltaExtensions);\n\t}\n\n\tpublic async extensionTestsExecute(): Promise<number> {\n\t\tconst proxy = await this._proxy;\n\t\tif (!proxy) {\n\t\t\tthrow new Error('Could not obtain Extension Host Proxy');\n\t\t}\n\t\treturn proxy.extensionTestsExecute();\n\t}\n\n\tpublic representsRunningLocation(runningLocation: ExtensionRunningLocation): boolean {\n\t\treturn this._extensionHost.runningLocation.equals(runningLocation);\n\t}\n\n\tpublic async deltaExtensions(incomingExtensionsDelta: IExtensionDescriptionDelta): Promise<void> {\n\t\tconst proxy = await this._proxy;\n\t\tif (!proxy) {\n\t\t\treturn;\n\t\t}\n\t\tconst outgoingExtensionsDelta = this._extensionHost.extensions!.delta(incomingExtensionsDelta);\n\t\tif (!outgoingExtensionsDelta) {\n\t\t\t// The extension host already has this version of the extensions.\n\t\t\treturn;\n\t\t}\n\t\treturn proxy.deltaExtensions(outgoingExtensionsDelta);\n\t}\n\n\tpublic containsExtension(extensionId: ExtensionIdentifier): boolean {\n\t\treturn this._extensionHost.extensions?.containsExtension(extensionId) ?? false;\n\t}\n\n\tpublic async setRemoteEnvironment(env: { [key: string]: string | null }): Promise<void> {\n\t\tconst proxy = await this._proxy;\n\t\tif (!proxy) {\n\t\t\treturn;\n\t\t}\n\n\t\treturn proxy.setRemoteEnvironment(env);\n\t}\n}\n\nexport function friendlyExtHostName(kind: ExtensionHostKind, pid: number | null) {\n\tif (pid) {\n\t\treturn `${extensionHostKindToString(kind)} pid: ${pid}`;\n\t}\n\treturn `${extensionHostKindToString(kind)}`;\n}\n\nconst colorTables = [\n\t['#2977B1', '#FC802D', '#34A13A', '#D3282F', '#9366BA'],\n\t['#8B564C', '#E177C0', '#7F7F7F', '#BBBE3D', '#2EBECD']\n];\n\nfunction prettyWithoutArrays(data: any): any {\n\tif (Array.isArray(data)) {\n\t\treturn data;\n\t}\n\tif (data && typeof data === 'object' && typeof data.toString === 'function') {\n\t\tconst result = data.toString();\n\t\tif (result !== '[object Object]') {\n\t\t\treturn result;\n\t\t}\n\t}\n\treturn data;\n}\n\nfunction pretty(data: any): any {\n\tif (Array.isArray(data)) {\n\t\treturn data.map(prettyWithoutArrays);\n\t}\n\treturn prettyWithoutArrays(data);\n}\n\nclass RPCLogger implements IRPCProtocolLogger {\n\n\tprivate _totalIncoming = 0;\n\tprivate _totalOutgoing = 0;\n\n\tconstructor(\n\t\tprivate readonly _kind: ExtensionHostKind\n\t) { }\n\n\tprivate _log(direction: string, totalLength: number, msgLength: number, req: number, initiator: RequestInitiator, str: string, data: any): void {\n\t\tdata = pretty(data);\n\n\t\tconst colorTable = colorTables[initiator];\n\t\tconst color = LOG_USE_COLORS ? colorTable[req % colorTable.length] : '#000000';\n\t\tlet args = [`%c[${extensionHostKindToString(this._kind)}][${direction}]%c[${String(totalLength).padStart(7)}]%c[len: ${String(msgLength).padStart(5)}]%c${String(req).padStart(5)} - ${str}`, 'color: darkgreen', 'color: grey', 'color: grey', `color: ${color}`];\n\t\tif (/\\($/.test(str)) {\n\t\t\targs = args.concat(data);\n\t\t\targs.push(')');\n\t\t} else {\n\t\t\targs.push(data);\n\t\t}\n\t\tconsole.log.apply(console, args as [string, ...string[]]);\n\t}\n\n\tlogIncoming(msgLength: number, req: number, initiator: RequestInitiator, str: string, data?: any): void {\n\t\tthis._totalIncoming += msgLength;\n\t\tthis._log('Ext \\u2192 Win', this._totalIncoming, msgLength, req, initiator, str, data);\n\t}\n\n\tlogOutgoing(msgLength: number, req: number, initiator: RequestInitiator, str: string, data?: any): void {\n\t\tthis._totalOutgoing += msgLength;\n\t\tthis._log('Win \\u2192 Ext', this._totalOutgoing, msgLength, req, initiator, str, data);\n\t}\n}\n\ninterface RPCTelemetryData {\n\ttype: string;\n\tlength: number;\n}\n\ntype RPCTelemetryDataClassification = {\n\towner: 'jrieken';\n\tcomment: 'Insights about RPC message sizes';\n\ttype: { classification: 'SystemMetaData'; purpose: 'PerformanceAndHealth'; comment: 'The type of the RPC message' };\n\tlength: { classification: 'SystemMetaData'; purpose: 'PerformanceAndHealth'; comment: 'The byte-length of the RPC message' };\n};\n\nclass TelemetryRPCLogger implements IRPCProtocolLogger {\n\n\tstatic isEnabled(): boolean {\n\t\t// this will be a very high frequency event, so we only log a small percentage of them\n\t\treturn Math.trunc(Math.random() * 1000) < 0.5;\n\t}\n\n\tprivate readonly _pendingRequests = new Map<number, string>();\n\n\tconstructor(@ITelemetryService private readonly _telemetryService: ITelemetryService) { }\n\n\tlogIncoming(msgLength: number, req: number, initiator: RequestInitiator, str: string): void {\n\n\t\tif (initiator === RequestInitiator.LocalSide && /^receiveReply(Err)?:/.test(str)) {\n\t\t\t// log the size of reply messages\n\t\t\tconst requestStr = this._pendingRequests.get(req) ?? 'unknown_reply';\n\t\t\tthis._pendingRequests.delete(req);\n\t\t\tthis._telemetryService.publicLog2<RPCTelemetryData, RPCTelemetryDataClassification>('extensionhost.incoming', {\n\t\t\t\ttype: `${str} ${requestStr}`,\n\t\t\t\tlength: msgLength\n\t\t\t});\n\t\t}\n\n\t\tif (initiator === RequestInitiator.OtherSide && /^receiveRequest /.test(str)) {\n\t\t\t// incoming request\n\t\t\tthis._telemetryService.publicLog2<RPCTelemetryData, RPCTelemetryDataClassification>('extensionhost.incoming', {\n\t\t\t\ttype: `${str}`,\n\t\t\t\tlength: msgLength\n\t\t\t});\n\t\t}\n\t}\n\n\tlogOutgoing(msgLength: number, req: number, initiator: RequestInitiator, str: string): void {\n\n\t\tif (initiator === RequestInitiator.LocalSide && str.startsWith('request: ')) {\n\t\t\tthis._pendingRequests.set(req, str);\n\t\t\tthis._telemetryService.publicLog2<RPCTelemetryData, RPCTelemetryDataClassification>('extensionhost.outgoing', {\n\t\t\t\ttype: str,\n\t\t\t\tlength: msgLength\n\t\t\t});\n\t\t}\n\t}\n}\n\ninterface ExtHostLatencyResult {\n\tremoteAuthority: string | null;\n\tup: number;\n\tdown: number;\n\tlatency: number;\n}\n\ninterface ExtHostLatencyProvider {\n\tmeasure(): Promise<ExtHostLatencyResult | null>;\n}\n\nconst providers: ExtHostLatencyProvider[] = [];\nfunction registerLatencyTestProvider(provider: ExtHostLatencyProvider): IDisposable {\n\tproviders.push(provider);\n\treturn {\n\t\tdispose: () => {\n\t\t\tfor (let i = 0; i < providers.length; i++) {\n\t\t\t\tif (providers[i] === provider) {\n\t\t\t\t\tproviders.splice(i, 1);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n}\n\nfunction getLatencyTestProviders(): ExtHostLatencyProvider[] {\n\treturn providers.slice(0);\n}\n\nregisterAction2(class MeasureExtHostLatencyAction extends Action2 {\n\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: 'editor.action.measureExtHostLatency',\n\t\t\ttitle: nls.localize2('measureExtHostLatency', \"Measure Extension Host Latency\"),\n\t\t\tcategory: Categories.Developer,\n\t\t\tf1: true\n\t\t});\n\t}\n\n\tasync run(accessor: ServicesAccessor) {\n\n\t\tconst editorService = accessor.get(IEditorService);\n\n\t\tconst measurements = await Promise.all(getLatencyTestProviders().map(provider => provider.measure()));\n\t\teditorService.openEditor({ resource: undefined, contents: measurements.map(MeasureExtHostLatencyAction._print).join('\\n\\n'), options: { pinned: true } });\n\t}\n\n\tprivate static _print(m: ExtHostLatencyResult | null): string {\n\t\tif (!m) {\n\t\t\treturn '';\n\t\t}\n\t\treturn `${m.remoteAuthority ? `Authority: ${m.remoteAuthority}\\n` : ``}Roundtrip latency: ${m.latency.toFixed(3)}ms\\nUp: ${MeasureExtHostLatencyAction._printSpeed(m.up)}\\nDown: ${MeasureExtHostLatencyAction._printSpeed(m.down)}\\n`;\n\t}\n\n\tprivate static _printSpeed(n: number): string {\n\t\tif (n <= 1024) {\n\t\t\treturn `${n} bps`;\n\t\t}\n\t\tif (n < 1024 * 1024) {\n\t\t\treturn `${(n / 1024).toFixed(1)} kbps`;\n\t\t}\n\t\treturn `${(n / 1024 / 1024).toFixed(1)} Mbps`;\n\t}\n});\n"],
  "mappings": "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",
  "names": []
}
