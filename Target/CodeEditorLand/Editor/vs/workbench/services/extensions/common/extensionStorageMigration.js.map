{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/extensions/common/extensionStorageMigration.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { getErrorMessage } from \"../../../../base/common/errors.js\";\nimport type { URI } from \"../../../../base/common/uri.js\";\nimport { IEnvironmentService } from \"../../../../platform/environment/common/environment.js\";\nimport { IExtensionStorageService } from \"../../../../platform/extensionManagement/common/extensionStorage.js\";\nimport {\n\ttype FileSystemProviderError,\n\tFileSystemProviderErrorCode,\n\tIFileService,\n} from \"../../../../platform/files/common/files.js\";\nimport type { IInstantiationService } from \"../../../../platform/instantiation/common/instantiation.js\";\nimport { ILogService } from \"../../../../platform/log/common/log.js\";\nimport {\n\tIStorageService,\n\tStorageScope,\n\tStorageTarget,\n} from \"../../../../platform/storage/common/storage.js\";\nimport { IUriIdentityService } from \"../../../../platform/uriIdentity/common/uriIdentity.js\";\nimport { IUserDataProfilesService } from \"../../../../platform/userDataProfile/common/userDataProfile.js\";\nimport { IWorkspaceContextService } from \"../../../../platform/workspace/common/workspace.js\";\n\n/**\n * An extension storage has following\n * \t- State: Stored using storage service with extension id as key and state as value.\n *  - Resources: Stored under a location scoped to the extension.\n */\nexport async function migrateExtensionStorage(\n\tfromExtensionId: string,\n\ttoExtensionId: string,\n\tglobal: boolean,\n\tinstantionService: IInstantiationService,\n): Promise<void> {\n\treturn instantionService.invokeFunction(async (serviceAccessor) => {\n\t\tconst environmentService = serviceAccessor.get(IEnvironmentService);\n\t\tconst userDataProfilesService = serviceAccessor.get(\n\t\t\tIUserDataProfilesService,\n\t\t);\n\t\tconst extensionStorageService = serviceAccessor.get(\n\t\t\tIExtensionStorageService,\n\t\t);\n\t\tconst storageService = serviceAccessor.get(IStorageService);\n\t\tconst uriIdentityService = serviceAccessor.get(IUriIdentityService);\n\t\tconst fileService = serviceAccessor.get(IFileService);\n\t\tconst workspaceContextService = serviceAccessor.get(\n\t\t\tIWorkspaceContextService,\n\t\t);\n\t\tconst logService = serviceAccessor.get(ILogService);\n\t\tconst storageMigratedKey = `extensionStorage.migrate.${fromExtensionId}-${toExtensionId}`;\n\t\tconst migrateLowerCaseStorageKey =\n\t\t\tfromExtensionId.toLowerCase() === toExtensionId.toLowerCase()\n\t\t\t\t? `extension.storage.migrateFromLowerCaseKey.${fromExtensionId.toLowerCase()}`\n\t\t\t\t: undefined;\n\n\t\tif (fromExtensionId === toExtensionId) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst getExtensionStorageLocation = (\n\t\t\textensionId: string,\n\t\t\tglobal: boolean,\n\t\t): URI => {\n\t\t\tif (global) {\n\t\t\t\treturn uriIdentityService.extUri.joinPath(\n\t\t\t\t\tuserDataProfilesService.defaultProfile.globalStorageHome,\n\t\t\t\t\textensionId.toLowerCase() /* Extension id is lower cased for global storage */,\n\t\t\t\t);\n\t\t\t}\n\t\t\treturn uriIdentityService.extUri.joinPath(\n\t\t\t\tenvironmentService.workspaceStorageHome,\n\t\t\t\tworkspaceContextService.getWorkspace().id,\n\t\t\t\textensionId,\n\t\t\t);\n\t\t};\n\n\t\tconst storageScope = global\n\t\t\t? StorageScope.PROFILE\n\t\t\t: StorageScope.WORKSPACE;\n\t\tif (\n\t\t\t!storageService.getBoolean(\n\t\t\t\tstorageMigratedKey,\n\t\t\t\tstorageScope,\n\t\t\t\tfalse,\n\t\t\t) &&\n\t\t\t!(\n\t\t\t\tmigrateLowerCaseStorageKey &&\n\t\t\t\tstorageService.getBoolean(\n\t\t\t\t\tmigrateLowerCaseStorageKey,\n\t\t\t\t\tstorageScope,\n\t\t\t\t\tfalse,\n\t\t\t\t)\n\t\t\t)\n\t\t) {\n\t\t\tlogService.info(\n\t\t\t\t`Migrating ${global ? \"global\" : \"workspace\"} extension storage from ${fromExtensionId} to ${toExtensionId}...`,\n\t\t\t);\n\t\t\t// Migrate state\n\t\t\tconst value = extensionStorageService.getExtensionState(\n\t\t\t\tfromExtensionId,\n\t\t\t\tglobal,\n\t\t\t);\n\t\t\tif (value) {\n\t\t\t\textensionStorageService.setExtensionState(\n\t\t\t\t\ttoExtensionId,\n\t\t\t\t\tvalue,\n\t\t\t\t\tglobal,\n\t\t\t\t);\n\t\t\t\textensionStorageService.setExtensionState(\n\t\t\t\t\tfromExtensionId,\n\t\t\t\t\tundefined,\n\t\t\t\t\tglobal,\n\t\t\t\t);\n\t\t\t}\n\n\t\t\t// Migrate stored files\n\t\t\tconst fromPath = getExtensionStorageLocation(\n\t\t\t\tfromExtensionId,\n\t\t\t\tglobal,\n\t\t\t);\n\t\t\tconst toPath = getExtensionStorageLocation(toExtensionId, global);\n\t\t\tif (!uriIdentityService.extUri.isEqual(fromPath, toPath)) {\n\t\t\t\ttry {\n\t\t\t\t\tawait fileService.move(fromPath, toPath, true);\n\t\t\t\t} catch (error) {\n\t\t\t\t\tif (\n\t\t\t\t\t\t(<FileSystemProviderError>error).code !==\n\t\t\t\t\t\tFileSystemProviderErrorCode.FileNotFound\n\t\t\t\t\t) {\n\t\t\t\t\t\tlogService.info(\n\t\t\t\t\t\t\t`Error while migrating ${global ? \"global\" : \"workspace\"} file storage from '${fromExtensionId}' to '${toExtensionId}'`,\n\t\t\t\t\t\t\tgetErrorMessage(error),\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tlogService.info(\n\t\t\t\t`Migrated ${global ? \"global\" : \"workspace\"} extension storage from ${fromExtensionId} to ${toExtensionId}`,\n\t\t\t);\n\t\t\tstorageService.store(\n\t\t\t\tstorageMigratedKey,\n\t\t\t\ttrue,\n\t\t\t\tstorageScope,\n\t\t\t\tStorageTarget.MACHINE,\n\t\t\t);\n\t\t}\n\t});\n}\n"],
  "mappings": ";;AAKA,SAAS,uBAAuB;AAEhC,SAAS,2BAA2B;AACpC,SAAS,gCAAgC;AACzC;AAAA,EAEC;AAAA,EACA;AAAA,OACM;AAEP,SAAS,mBAAmB;AAC5B;AAAA,EACC;AAAA,EACA;AAAA,EACA;AAAA,OACM;AACP,SAAS,2BAA2B;AACpC,SAAS,gCAAgC;AACzC,SAAS,gCAAgC;AAOzC,eAAsB,wBACrB,iBACA,eACA,QACA,mBACgB;AAChB,SAAO,kBAAkB,eAAe,OAAO,oBAAoB;AAClE,UAAM,qBAAqB,gBAAgB,IAAI,mBAAmB;AAClE,UAAM,0BAA0B,gBAAgB;AAAA,MAC/C;AAAA,IACD;AACA,UAAM,0BAA0B,gBAAgB;AAAA,MAC/C;AAAA,IACD;AACA,UAAM,iBAAiB,gBAAgB,IAAI,eAAe;AAC1D,UAAM,qBAAqB,gBAAgB,IAAI,mBAAmB;AAClE,UAAM,cAAc,gBAAgB,IAAI,YAAY;AACpD,UAAM,0BAA0B,gBAAgB;AAAA,MAC/C;AAAA,IACD;AACA,UAAM,aAAa,gBAAgB,IAAI,WAAW;AAClD,UAAM,qBAAqB,4BAA4B,eAAe,IAAI,aAAa;AACvF,UAAM,6BACL,gBAAgB,YAAY,MAAM,cAAc,YAAY,IACzD,6CAA6C,gBAAgB,YAAY,CAAC,KAC1E;AAEJ,QAAI,oBAAoB,eAAe;AACtC;AAAA,IACD;AAEA,UAAM,8BAA8B,wBACnC,aACAA,YACS;AACT,UAAIA,SAAQ;AACX,eAAO,mBAAmB,OAAO;AAAA,UAChC,wBAAwB,eAAe;AAAA,UACvC,YAAY,YAAY;AAAA,QACzB;AAAA,MACD;AACA,aAAO,mBAAmB,OAAO;AAAA,QAChC,mBAAmB;AAAA,QACnB,wBAAwB,aAAa,EAAE;AAAA,QACvC;AAAA,MACD;AAAA,IACD,GAfoC;AAiBpC,UAAM,eAAe,SAClB,aAAa,UACb,aAAa;AAChB,QACC,CAAC,eAAe;AAAA,MACf;AAAA,MACA;AAAA,MACA;AAAA,IACD,KACA,EACC,8BACA,eAAe;AAAA,MACd;AAAA,MACA;AAAA,MACA;AAAA,IACD,IAEA;AACD,iBAAW;AAAA,QACV,aAAa,SAAS,WAAW,WAAW,2BAA2B,eAAe,OAAO,aAAa;AAAA,MAC3G;AAEA,YAAM,QAAQ,wBAAwB;AAAA,QACrC;AAAA,QACA;AAAA,MACD;AACA,UAAI,OAAO;AACV,gCAAwB;AAAA,UACvB;AAAA,UACA;AAAA,UACA;AAAA,QACD;AACA,gCAAwB;AAAA,UACvB;AAAA,UACA;AAAA,UACA;AAAA,QACD;AAAA,MACD;AAGA,YAAM,WAAW;AAAA,QAChB;AAAA,QACA;AAAA,MACD;AACA,YAAM,SAAS,4BAA4B,eAAe,MAAM;AAChE,UAAI,CAAC,mBAAmB,OAAO,QAAQ,UAAU,MAAM,GAAG;AACzD,YAAI;AACH,gBAAM,YAAY,KAAK,UAAU,QAAQ,IAAI;AAAA,QAC9C,SAAS,OAAO;AACf,cAC2B,MAAO,SACjC,4BAA4B,cAC3B;AACD,uBAAW;AAAA,cACV,yBAAyB,SAAS,WAAW,WAAW,uBAAuB,eAAe,SAAS,aAAa;AAAA,cACpH,gBAAgB,KAAK;AAAA,YACtB;AAAA,UACD;AAAA,QACD;AAAA,MACD;AACA,iBAAW;AAAA,QACV,YAAY,SAAS,WAAW,WAAW,2BAA2B,eAAe,OAAO,aAAa;AAAA,MAC1G;AACA,qBAAe;AAAA,QACd;AAAA,QACA;AAAA,QACA;AAAA,QACA,cAAc;AAAA,MACf;AAAA,IACD;AAAA,EACD,CAAC;AACF;AAvHsB;",
  "names": ["global"]
}
