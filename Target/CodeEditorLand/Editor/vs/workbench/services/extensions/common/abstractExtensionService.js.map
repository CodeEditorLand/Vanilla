{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/extensions/common/abstractExtensionService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Barrier } from '../../../../base/common/async.js';\nimport { toErrorMessage } from '../../../../base/common/errorMessage.js';\nimport { Emitter } from '../../../../base/common/event.js';\nimport { IMarkdownString, MarkdownString } from '../../../../base/common/htmlContent.js';\nimport { Disposable, DisposableStore } from '../../../../base/common/lifecycle.js';\nimport { Schemas } from '../../../../base/common/network.js';\nimport * as perf from '../../../../base/common/performance.js';\nimport { isCI } from '../../../../base/common/platform.js';\nimport { isEqualOrParent } from '../../../../base/common/resources.js';\nimport { StopWatch } from '../../../../base/common/stopwatch.js';\nimport { isDefined } from '../../../../base/common/types.js';\nimport { URI } from '../../../../base/common/uri.js';\nimport * as nls from '../../../../nls.js';\nimport { IConfigurationService } from '../../../../platform/configuration/common/configuration.js';\nimport { IDialogService } from '../../../../platform/dialogs/common/dialogs.js';\nimport { InstallOperation } from '../../../../platform/extensionManagement/common/extensionManagement.js';\nimport { ImplicitActivationEvents } from '../../../../platform/extensionManagement/common/implicitActivationEvents.js';\nimport { ExtensionIdentifier, ExtensionIdentifierMap, IExtension, IExtensionContributions, IExtensionDescription, IExtensionManifest } from '../../../../platform/extensions/common/extensions.js';\nimport { IFileService } from '../../../../platform/files/common/files.js';\nimport { SyncDescriptor } from '../../../../platform/instantiation/common/descriptors.js';\nimport { IInstantiationService } from '../../../../platform/instantiation/common/instantiation.js';\nimport { handleVetos } from '../../../../platform/lifecycle/common/lifecycle.js';\nimport { ILogService } from '../../../../platform/log/common/log.js';\nimport { INotificationService, Severity } from '../../../../platform/notification/common/notification.js';\nimport { IProductService } from '../../../../platform/product/common/productService.js';\nimport { Registry } from '../../../../platform/registry/common/platform.js';\nimport { IRemoteAuthorityResolverService, RemoteAuthorityResolverError, RemoteAuthorityResolverErrorCode, ResolverResult, getRemoteAuthorityPrefix } from '../../../../platform/remote/common/remoteAuthorityResolver.js';\nimport { IRemoteExtensionsScannerService } from '../../../../platform/remote/common/remoteExtensionsScanner.js';\nimport { ITelemetryService } from '../../../../platform/telemetry/common/telemetry.js';\nimport { IWorkspaceContextService } from '../../../../platform/workspace/common/workspace.js';\nimport { IWorkbenchEnvironmentService } from '../../environment/common/environmentService.js';\nimport { IExtensionFeaturesRegistry, Extensions as ExtensionFeaturesExtensions, IExtensionFeatureMarkdownRenderer, IRenderedData, } from '../../extensionManagement/common/extensionFeatures.js';\nimport { IWorkbenchExtensionEnablementService, IWorkbenchExtensionManagementService } from '../../extensionManagement/common/extensionManagement.js';\nimport { ExtensionDescriptionRegistryLock, ExtensionDescriptionRegistrySnapshot, IActivationEventsReader, LockableExtensionDescriptionRegistry } from './extensionDescriptionRegistry.js';\nimport { parseExtensionDevOptions } from './extensionDevOptions.js';\nimport { ExtensionHostKind, ExtensionRunningPreference, IExtensionHostKindPicker } from './extensionHostKind.js';\nimport { ExtensionHostManager } from './extensionHostManager.js';\nimport { IExtensionHostManager } from './extensionHostManagers.js';\nimport { IResolveAuthorityErrorResult } from './extensionHostProxy.js';\nimport { IExtensionManifestPropertiesService } from './extensionManifestPropertiesService.js';\nimport { ExtensionRunningLocation, LocalProcessRunningLocation, LocalWebWorkerRunningLocation, RemoteRunningLocation } from './extensionRunningLocation.js';\nimport { ExtensionRunningLocationTracker, filterExtensionIdentifiers } from './extensionRunningLocationTracker.js';\nimport { ActivationKind, ActivationTimes, ExtensionActivationReason, ExtensionHostStartup, ExtensionPointContribution, IExtensionHost, IExtensionService, IExtensionsStatus, IInternalExtensionService, IMessage, IResponsiveStateChangeEvent, IWillActivateEvent, WillStopExtensionHostsEvent, toExtension, toExtensionDescription } from './extensions.js';\nimport { ExtensionsProposedApi } from './extensionsProposedApi.js';\nimport { ExtensionMessageCollector, ExtensionPoint, ExtensionsRegistry, IExtensionPoint, IExtensionPointUser } from './extensionsRegistry.js';\nimport { LazyCreateExtensionHostManager } from './lazyCreateExtensionHostManager.js';\nimport { ResponsiveState } from './rpcProtocol.js';\nimport { IExtensionActivationHost as IWorkspaceContainsActivationHost, checkActivateWorkspaceContainsExtension, checkGlobFileExists } from './workspaceContains.js';\nimport { ILifecycleService, WillShutdownJoinerOrder } from '../../lifecycle/common/lifecycle.js';\nimport { IExtensionHostExitInfo, IRemoteAgentService } from '../../remote/common/remoteAgentService.js';\n\nconst hasOwnProperty = Object.hasOwnProperty;\nconst NO_OP_VOID_PROMISE = Promise.resolve<void>(undefined);\n\nexport abstract class AbstractExtensionService extends Disposable implements IExtensionService {\n\n\tpublic _serviceBrand: undefined;\n\n\tprivate readonly _onDidRegisterExtensions = this._register(new Emitter<void>());\n\tpublic readonly onDidRegisterExtensions = this._onDidRegisterExtensions.event;\n\n\tprivate readonly _onDidChangeExtensionsStatus = this._register(new Emitter<ExtensionIdentifier[]>());\n\tpublic readonly onDidChangeExtensionsStatus = this._onDidChangeExtensionsStatus.event;\n\n\tprivate readonly _onDidChangeExtensions = this._register(new Emitter<{ readonly added: ReadonlyArray<IExtensionDescription>; readonly removed: ReadonlyArray<IExtensionDescription> }>({ leakWarningThreshold: 400 }));\n\tpublic readonly onDidChangeExtensions = this._onDidChangeExtensions.event;\n\n\tprivate readonly _onWillActivateByEvent = this._register(new Emitter<IWillActivateEvent>());\n\tpublic readonly onWillActivateByEvent = this._onWillActivateByEvent.event;\n\n\tprivate readonly _onDidChangeResponsiveChange = this._register(new Emitter<IResponsiveStateChangeEvent>());\n\tpublic readonly onDidChangeResponsiveChange = this._onDidChangeResponsiveChange.event;\n\n\tprivate readonly _onWillStop = this._register(new Emitter<WillStopExtensionHostsEvent>());\n\tpublic readonly onWillStop = this._onWillStop.event;\n\n\tprivate readonly _activationEventReader = new ImplicitActivationAwareReader();\n\tprivate readonly _registry = new LockableExtensionDescriptionRegistry(this._activationEventReader);\n\tprivate readonly _installedExtensionsReady = new Barrier();\n\tprivate readonly _extensionStatus = new ExtensionIdentifierMap<ExtensionStatus>();\n\tprivate readonly _allRequestedActivateEvents = new Set<string>();\n\tprivate readonly _runningLocations: ExtensionRunningLocationTracker;\n\tprivate readonly _remoteCrashTracker = new ExtensionHostCrashTracker();\n\n\tprivate _deltaExtensionsQueue: DeltaExtensionsQueueItem[] = [];\n\tprivate _inHandleDeltaExtensions = false;\n\n\tprivate readonly _extensionHostManagers = this._register(new ExtensionHostCollection());\n\n\tprivate _resolveAuthorityAttempt: number = 0;\n\n\tconstructor(\n\t\tprivate readonly _extensionsProposedApi: ExtensionsProposedApi,\n\t\tprivate readonly _extensionHostFactory: IExtensionHostFactory,\n\t\tprivate readonly _extensionHostKindPicker: IExtensionHostKindPicker,\n\t\t@IInstantiationService protected readonly _instantiationService: IInstantiationService,\n\t\t@INotificationService protected readonly _notificationService: INotificationService,\n\t\t@IWorkbenchEnvironmentService protected readonly _environmentService: IWorkbenchEnvironmentService,\n\t\t@ITelemetryService protected readonly _telemetryService: ITelemetryService,\n\t\t@IWorkbenchExtensionEnablementService protected readonly _extensionEnablementService: IWorkbenchExtensionEnablementService,\n\t\t@IFileService protected readonly _fileService: IFileService,\n\t\t@IProductService protected readonly _productService: IProductService,\n\t\t@IWorkbenchExtensionManagementService protected readonly _extensionManagementService: IWorkbenchExtensionManagementService,\n\t\t@IWorkspaceContextService private readonly _contextService: IWorkspaceContextService,\n\t\t@IConfigurationService private readonly _configurationService: IConfigurationService,\n\t\t@IExtensionManifestPropertiesService private readonly _extensionManifestPropertiesService: IExtensionManifestPropertiesService,\n\t\t@ILogService protected readonly _logService: ILogService,\n\t\t@IRemoteAgentService protected readonly _remoteAgentService: IRemoteAgentService,\n\t\t@IRemoteExtensionsScannerService protected readonly _remoteExtensionsScannerService: IRemoteExtensionsScannerService,\n\t\t@ILifecycleService private readonly _lifecycleService: ILifecycleService,\n\t\t@IRemoteAuthorityResolverService protected readonly _remoteAuthorityResolverService: IRemoteAuthorityResolverService,\n\t\t@IDialogService private readonly _dialogService: IDialogService,\n\t) {\n\t\tsuper();\n\n\t\t// help the file service to activate providers by activating extensions by file system event\n\t\tthis._register(this._fileService.onWillActivateFileSystemProvider(e => {\n\t\t\tif (e.scheme !== Schemas.vscodeRemote) {\n\t\t\t\te.join(this.activateByEvent(`onFileSystem:${e.scheme}`));\n\t\t\t}\n\t\t}));\n\n\t\tthis._runningLocations = new ExtensionRunningLocationTracker(\n\t\t\tthis._registry,\n\t\t\tthis._extensionHostKindPicker,\n\t\t\tthis._environmentService,\n\t\t\tthis._configurationService,\n\t\t\tthis._logService,\n\t\t\tthis._extensionManifestPropertiesService\n\t\t);\n\n\t\tthis._register(this._extensionEnablementService.onEnablementChanged((extensions) => {\n\t\t\tconst toAdd: IExtension[] = [];\n\t\t\tconst toRemove: IExtension[] = [];\n\t\t\tfor (const extension of extensions) {\n\t\t\t\tif (this._safeInvokeIsEnabled(extension)) {\n\t\t\t\t\t// an extension has been enabled\n\t\t\t\t\ttoAdd.push(extension);\n\t\t\t\t} else {\n\t\t\t\t\t// an extension has been disabled\n\t\t\t\t\ttoRemove.push(extension);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (isCI) {\n\t\t\t\tthis._logService.info(`AbstractExtensionService.onEnablementChanged fired for ${extensions.map(e => e.identifier.id).join(', ')}`);\n\t\t\t}\n\t\t\tthis._handleDeltaExtensions(new DeltaExtensionsQueueItem(toAdd, toRemove));\n\t\t}));\n\n\t\tthis._register(this._extensionManagementService.onDidChangeProfile(({ added, removed }) => {\n\t\t\tif (added.length || removed.length) {\n\t\t\t\tif (isCI) {\n\t\t\t\t\tthis._logService.info(`AbstractExtensionService.onDidChangeProfile fired`);\n\t\t\t\t}\n\t\t\t\tthis._handleDeltaExtensions(new DeltaExtensionsQueueItem(added, removed));\n\t\t\t}\n\t\t}));\n\n\t\tthis._register(this._extensionManagementService.onDidEnableExtensions(extensions => {\n\t\t\tif (extensions.length) {\n\t\t\t\tif (isCI) {\n\t\t\t\t\tthis._logService.info(`AbstractExtensionService.onDidEnableExtensions fired`);\n\t\t\t\t}\n\t\t\t\tthis._handleDeltaExtensions(new DeltaExtensionsQueueItem(extensions, []));\n\t\t\t}\n\t\t}));\n\n\t\tthis._register(this._extensionManagementService.onDidInstallExtensions((result) => {\n\t\t\tconst extensions: IExtension[] = [];\n\t\t\tfor (const { local, operation } of result) {\n\t\t\t\tif (local && local.isValid && operation !== InstallOperation.Migrate && this._safeInvokeIsEnabled(local)) {\n\t\t\t\t\textensions.push(local);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (extensions.length) {\n\t\t\t\tif (isCI) {\n\t\t\t\t\tthis._logService.info(`AbstractExtensionService.onDidInstallExtensions fired for ${extensions.map(e => e.identifier.id).join(', ')}`);\n\t\t\t\t}\n\t\t\t\tthis._handleDeltaExtensions(new DeltaExtensionsQueueItem(extensions, []));\n\t\t\t}\n\t\t}));\n\n\t\tthis._register(this._extensionManagementService.onDidUninstallExtension((event) => {\n\t\t\tif (!event.error) {\n\t\t\t\t// an extension has been uninstalled\n\t\t\t\tif (isCI) {\n\t\t\t\t\tthis._logService.info(`AbstractExtensionService.onDidUninstallExtension fired for ${event.identifier.id}`);\n\t\t\t\t}\n\t\t\t\tthis._handleDeltaExtensions(new DeltaExtensionsQueueItem([], [event.identifier.id]));\n\t\t\t}\n\t\t}));\n\n\t\tthis._register(this._lifecycleService.onWillShutdown(event => {\n\t\t\tif (this._remoteAgentService.getConnection()) {\n\t\t\t\tevent.join(async () => {\n\t\t\t\t\t// We need to disconnect the management connection before killing the local extension host.\n\t\t\t\t\t// Otherwise, the local extension host might terminate the underlying tunnel before the\n\t\t\t\t\t// management connection has a chance to send its disconnection message.\n\t\t\t\t\tawait this._remoteAgentService.endConnection();\n\t\t\t\t\tawait this._doStopExtensionHosts();\n\t\t\t\t\tthis._remoteAgentService.getConnection()?.dispose();\n\t\t\t\t}, {\n\t\t\t\t\tid: 'join.disconnectRemote',\n\t\t\t\t\tlabel: nls.localize('disconnectRemote', \"Disconnect Remote Agent\"),\n\t\t\t\t\torder: WillShutdownJoinerOrder.Last // after others have joined that might depend on a remote connection\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tevent.join(this._doStopExtensionHosts(), {\n\t\t\t\t\tid: 'join.stopExtensionHosts',\n\t\t\t\t\tlabel: nls.localize('stopExtensionHosts', \"Stopping Extension Hosts\"),\n\t\t\t\t});\n\t\t\t}\n\t\t}));\n\t}\n\n\tprotected _getExtensionHostManagers(kind: ExtensionHostKind): IExtensionHostManager[] {\n\t\treturn this._extensionHostManagers.getByKind(kind);\n\t}\n\n\t//#region deltaExtensions\n\n\tprivate async _handleDeltaExtensions(item: DeltaExtensionsQueueItem): Promise<void> {\n\t\tthis._deltaExtensionsQueue.push(item);\n\t\tif (this._inHandleDeltaExtensions) {\n\t\t\t// Let the current item finish, the new one will be picked up\n\t\t\treturn;\n\t\t}\n\n\t\tlet lock: ExtensionDescriptionRegistryLock | null = null;\n\t\ttry {\n\t\t\tthis._inHandleDeltaExtensions = true;\n\n\t\t\t// wait for _initialize to finish before hanlding any delta extension events\n\t\t\tawait this._installedExtensionsReady.wait();\n\n\t\t\tlock = await this._registry.acquireLock('handleDeltaExtensions');\n\t\t\twhile (this._deltaExtensionsQueue.length > 0) {\n\t\t\t\tconst item = this._deltaExtensionsQueue.shift()!;\n\t\t\t\tawait this._deltaExtensions(lock, item.toAdd, item.toRemove);\n\t\t\t}\n\t\t} finally {\n\t\t\tthis._inHandleDeltaExtensions = false;\n\t\t\tlock?.dispose();\n\t\t}\n\t}\n\n\tprivate async _deltaExtensions(lock: ExtensionDescriptionRegistryLock, _toAdd: IExtension[], _toRemove: string[] | IExtension[]): Promise<void> {\n\t\tif (isCI) {\n\t\t\tthis._logService.info(`AbstractExtensionService._deltaExtensions: toAdd: [${_toAdd.map(e => e.identifier.id).join(',')}] toRemove: [${_toRemove.map(e => typeof e === 'string' ? e : e.identifier.id).join(',')}]`);\n\t\t}\n\t\tlet toRemove: IExtensionDescription[] = [];\n\t\tfor (let i = 0, len = _toRemove.length; i < len; i++) {\n\t\t\tconst extensionOrId = _toRemove[i];\n\t\t\tconst extensionId = (typeof extensionOrId === 'string' ? extensionOrId : extensionOrId.identifier.id);\n\t\t\tconst extension = (typeof extensionOrId === 'string' ? null : extensionOrId);\n\t\t\tconst extensionDescription = this._registry.getExtensionDescription(extensionId);\n\t\t\tif (!extensionDescription) {\n\t\t\t\t// ignore disabling/uninstalling an extension which is not running\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif (extension && extensionDescription.extensionLocation.scheme !== extension.location.scheme) {\n\t\t\t\t// this event is for a different extension than mine (maybe for the local extension, while I have the remote extension)\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif (!this.canRemoveExtension(extensionDescription)) {\n\t\t\t\t// uses non-dynamic extension point or is activated\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\ttoRemove.push(extensionDescription);\n\t\t}\n\n\t\tconst toAdd: IExtensionDescription[] = [];\n\t\tfor (let i = 0, len = _toAdd.length; i < len; i++) {\n\t\t\tconst extension = _toAdd[i];\n\n\t\t\tconst extensionDescription = toExtensionDescription(extension, false);\n\t\t\tif (!extensionDescription) {\n\t\t\t\t// could not scan extension...\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif (!this._canAddExtension(extensionDescription, toRemove)) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\ttoAdd.push(extensionDescription);\n\t\t}\n\n\t\tif (toAdd.length === 0 && toRemove.length === 0) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Update the local registry\n\t\tconst result = this._registry.deltaExtensions(lock, toAdd, toRemove.map(e => e.identifier));\n\t\tthis._onDidChangeExtensions.fire({ added: toAdd, removed: toRemove });\n\n\t\ttoRemove = toRemove.concat(result.removedDueToLooping);\n\t\tif (result.removedDueToLooping.length > 0) {\n\t\t\tthis._notificationService.notify({\n\t\t\t\tseverity: Severity.Error,\n\t\t\t\tmessage: nls.localize('looping', \"The following extensions contain dependency loops and have been disabled: {0}\", result.removedDueToLooping.map(e => `'${e.identifier.value}'`).join(', '))\n\t\t\t});\n\t\t}\n\n\t\t// enable or disable proposed API per extension\n\t\tthis._extensionsProposedApi.updateEnabledApiProposals(toAdd);\n\n\t\t// Update extension points\n\t\tthis._doHandleExtensionPoints((<IExtensionDescription[]>[]).concat(toAdd).concat(toRemove));\n\n\t\t// Update the extension host\n\t\tawait this._updateExtensionsOnExtHosts(result.versionId, toAdd, toRemove.map(e => e.identifier));\n\n\t\tfor (let i = 0; i < toAdd.length; i++) {\n\t\t\tthis._activateAddedExtensionIfNeeded(toAdd[i]);\n\t\t}\n\t}\n\n\tprivate async _updateExtensionsOnExtHosts(versionId: number, toAdd: IExtensionDescription[], toRemove: ExtensionIdentifier[]): Promise<void> {\n\t\tconst removedRunningLocation = this._runningLocations.deltaExtensions(toAdd, toRemove);\n\t\tconst promises = this._extensionHostManagers.map(\n\t\t\textHostManager => this._updateExtensionsOnExtHost(extHostManager, versionId, toAdd, toRemove, removedRunningLocation)\n\t\t);\n\t\tawait Promise.all(promises);\n\t}\n\n\tprivate async _updateExtensionsOnExtHost(extensionHostManager: IExtensionHostManager, versionId: number, toAdd: IExtensionDescription[], toRemove: ExtensionIdentifier[], removedRunningLocation: ExtensionIdentifierMap<ExtensionRunningLocation | null>): Promise<void> {\n\t\tconst myToAdd = this._runningLocations.filterByExtensionHostManager(toAdd, extensionHostManager);\n\t\tconst myToRemove = filterExtensionIdentifiers(toRemove, removedRunningLocation, extRunningLocation => extensionHostManager.representsRunningLocation(extRunningLocation));\n\t\tconst addActivationEvents = ImplicitActivationEvents.createActivationEventsMap(toAdd);\n\t\tif (isCI) {\n\t\t\tconst printExtIds = (extensions: IExtensionDescription[]) => extensions.map(e => e.identifier.value).join(',');\n\t\t\tconst printIds = (extensions: ExtensionIdentifier[]) => extensions.map(e => e.value).join(',');\n\t\t\tthis._logService.info(`AbstractExtensionService: Calling deltaExtensions: toRemove: [${printIds(toRemove)}], toAdd: [${printExtIds(toAdd)}], myToRemove: [${printIds(myToRemove)}], myToAdd: [${printExtIds(myToAdd)}],`);\n\t\t}\n\t\tawait extensionHostManager.deltaExtensions({ versionId, toRemove, toAdd, addActivationEvents, myToRemove, myToAdd: myToAdd.map(extension => extension.identifier) });\n\t}\n\n\tpublic canAddExtension(extension: IExtensionDescription): boolean {\n\t\treturn this._canAddExtension(extension, []);\n\t}\n\n\tprivate _canAddExtension(extension: IExtensionDescription, extensionsBeingRemoved: IExtensionDescription[]): boolean {\n\t\t// (Also check for renamed extensions)\n\t\tconst existing = this._registry.getExtensionDescriptionByIdOrUUID(extension.identifier, extension.id);\n\t\tif (existing) {\n\t\t\t// This extension is already known (most likely at a different version)\n\t\t\t// so it cannot be added again unless it is removed first\n\t\t\tconst isBeingRemoved = extensionsBeingRemoved.some((extensionDescription) => ExtensionIdentifier.equals(extension.identifier, extensionDescription.identifier));\n\t\t\tif (!isBeingRemoved) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\tconst extensionKinds = this._runningLocations.readExtensionKinds(extension);\n\t\tconst isRemote = extension.extensionLocation.scheme === Schemas.vscodeRemote;\n\t\tconst extensionHostKind = this._extensionHostKindPicker.pickExtensionHostKind(extension.identifier, extensionKinds, !isRemote, isRemote, ExtensionRunningPreference.None);\n\t\tif (extensionHostKind === null) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn true;\n\t}\n\n\tpublic canRemoveExtension(extension: IExtensionDescription): boolean {\n\t\tconst extensionDescription = this._registry.getExtensionDescription(extension.identifier);\n\t\tif (!extensionDescription) {\n\t\t\t// Can't remove an extension that is unknown!\n\t\t\treturn false;\n\t\t}\n\n\t\tif (this._extensionStatus.get(extensionDescription.identifier)?.activationStarted) {\n\t\t\t// Extension is running, cannot remove it safely\n\t\t\treturn false;\n\t\t}\n\n\t\treturn true;\n\t}\n\n\tprivate async _activateAddedExtensionIfNeeded(extensionDescription: IExtensionDescription): Promise<void> {\n\t\tlet shouldActivate = false;\n\t\tlet shouldActivateReason: string | null = null;\n\t\tlet hasWorkspaceContains = false;\n\t\tconst activationEvents = this._activationEventReader.readActivationEvents(extensionDescription);\n\t\tfor (const activationEvent of activationEvents) {\n\t\t\tif (this._allRequestedActivateEvents.has(activationEvent)) {\n\t\t\t\t// This activation event was fired before the extension was added\n\t\t\t\tshouldActivate = true;\n\t\t\t\tshouldActivateReason = activationEvent;\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tif (activationEvent === '*') {\n\t\t\t\tshouldActivate = true;\n\t\t\t\tshouldActivateReason = activationEvent;\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tif (/^workspaceContains/.test(activationEvent)) {\n\t\t\t\thasWorkspaceContains = true;\n\t\t\t}\n\n\t\t\tif (activationEvent === 'onStartupFinished') {\n\t\t\t\tshouldActivate = true;\n\t\t\t\tshouldActivateReason = activationEvent;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tif (shouldActivate) {\n\t\t\tawait Promise.all(\n\t\t\t\tthis._extensionHostManagers.map(extHostManager => extHostManager.activate(extensionDescription.identifier, { startup: false, extensionId: extensionDescription.identifier, activationEvent: shouldActivateReason! }))\n\t\t\t).then(() => { });\n\t\t} else if (hasWorkspaceContains) {\n\t\t\tconst workspace = await this._contextService.getCompleteWorkspace();\n\t\t\tconst forceUsingSearch = !!this._environmentService.remoteAuthority;\n\t\t\tconst host: IWorkspaceContainsActivationHost = {\n\t\t\t\tlogService: this._logService,\n\t\t\t\tfolders: workspace.folders.map(folder => folder.uri),\n\t\t\t\tforceUsingSearch: forceUsingSearch,\n\t\t\t\texists: (uri) => this._fileService.exists(uri),\n\t\t\t\tcheckExists: (folders, includes, token) => this._instantiationService.invokeFunction((accessor) => checkGlobFileExists(accessor, folders, includes, token))\n\t\t\t};\n\n\t\t\tconst result = await checkActivateWorkspaceContainsExtension(host, extensionDescription);\n\t\t\tif (!result) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tawait Promise.all(\n\t\t\t\tthis._extensionHostManagers.map(extHostManager => extHostManager.activate(extensionDescription.identifier, { startup: false, extensionId: extensionDescription.identifier, activationEvent: result.activationEvent }))\n\t\t\t).then(() => { });\n\t\t}\n\t}\n\n\t//#endregion\n\n\tprotected async _initialize(): Promise<void> {\n\t\tperf.mark('code/willLoadExtensions');\n\t\tthis._startExtensionHostsIfNecessary(true, []);\n\n\t\tconst lock = await this._registry.acquireLock('_initialize');\n\t\ttry {\n\t\t\tconst resolvedExtensions = await this._resolveExtensions();\n\n\t\t\tthis._processExtensions(lock, resolvedExtensions);\n\n\t\t\t// Start extension hosts which are not automatically started\n\t\t\tconst snapshot = this._registry.getSnapshot();\n\t\t\tfor (const extHostManager of this._extensionHostManagers) {\n\t\t\t\tif (extHostManager.startup !== ExtensionHostStartup.EagerAutoStart) {\n\t\t\t\t\tconst extensions = this._runningLocations.filterByExtensionHostManager(snapshot.extensions, extHostManager);\n\t\t\t\t\textHostManager.start(snapshot.versionId, snapshot.extensions, extensions.map(extension => extension.identifier));\n\t\t\t\t}\n\t\t\t}\n\t\t} finally {\n\t\t\tlock.dispose();\n\t\t}\n\n\t\tthis._releaseBarrier();\n\t\tperf.mark('code/didLoadExtensions');\n\t\tawait this._handleExtensionTests();\n\t}\n\n\tprivate _processExtensions(lock: ExtensionDescriptionRegistryLock, resolvedExtensions: ResolvedExtensions): void {\n\t\tconst { allowRemoteExtensionsInLocalWebWorker, hasLocalProcess } = resolvedExtensions;\n\t\tconst localExtensions = checkEnabledAndProposedAPI(this._logService, this._extensionEnablementService, this._extensionsProposedApi, resolvedExtensions.local, false);\n\t\tlet remoteExtensions = checkEnabledAndProposedAPI(this._logService, this._extensionEnablementService, this._extensionsProposedApi, resolvedExtensions.remote, false);\n\n\t\t// `initializeRunningLocation` will look at the complete picture (e.g. an extension installed on both sides),\n\t\t// takes care of duplicates and picks a running location for each extension\n\t\tthis._runningLocations.initializeRunningLocation(localExtensions, remoteExtensions);\n\n\t\tthis._startExtensionHostsIfNecessary(true, []);\n\n\t\t// Some remote extensions could run locally in the web worker, so store them\n\t\tconst remoteExtensionsThatNeedToRunLocally = (allowRemoteExtensionsInLocalWebWorker ? this._runningLocations.filterByExtensionHostKind(remoteExtensions, ExtensionHostKind.LocalWebWorker) : []);\n\t\tconst localProcessExtensions = (hasLocalProcess ? this._runningLocations.filterByExtensionHostKind(localExtensions, ExtensionHostKind.LocalProcess) : []);\n\t\tconst localWebWorkerExtensions = this._runningLocations.filterByExtensionHostKind(localExtensions, ExtensionHostKind.LocalWebWorker);\n\t\tremoteExtensions = this._runningLocations.filterByExtensionHostKind(remoteExtensions, ExtensionHostKind.Remote);\n\n\t\t// Add locally the remote extensions that need to run locally in the web worker\n\t\tfor (const ext of remoteExtensionsThatNeedToRunLocally) {\n\t\t\tif (!includes(localWebWorkerExtensions, ext.identifier)) {\n\t\t\t\tlocalWebWorkerExtensions.push(ext);\n\t\t\t}\n\t\t}\n\n\t\tconst allExtensions = remoteExtensions.concat(localProcessExtensions).concat(localWebWorkerExtensions);\n\n\t\tconst result = this._registry.deltaExtensions(lock, allExtensions, []);\n\t\tif (result.removedDueToLooping.length > 0) {\n\t\t\tthis._notificationService.notify({\n\t\t\t\tseverity: Severity.Error,\n\t\t\t\tmessage: nls.localize('looping', \"The following extensions contain dependency loops and have been disabled: {0}\", result.removedDueToLooping.map(e => `'${e.identifier.value}'`).join(', '))\n\t\t\t});\n\t\t}\n\n\t\tthis._doHandleExtensionPoints(this._registry.getAllExtensionDescriptions());\n\t}\n\n\tprivate async _handleExtensionTests(): Promise<void> {\n\t\tif (!this._environmentService.isExtensionDevelopment || !this._environmentService.extensionTestsLocationURI) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst extensionHostManager = this.findTestExtensionHost(this._environmentService.extensionTestsLocationURI);\n\t\tif (!extensionHostManager) {\n\t\t\tconst msg = nls.localize('extensionTestError', \"No extension host found that can launch the test runner at {0}.\", this._environmentService.extensionTestsLocationURI.toString());\n\t\t\tconsole.error(msg);\n\t\t\tthis._notificationService.error(msg);\n\t\t\treturn;\n\t\t}\n\n\n\t\tlet exitCode: number;\n\t\ttry {\n\t\t\texitCode = await extensionHostManager.extensionTestsExecute();\n\t\t\tif (isCI) {\n\t\t\t\tthis._logService.info(`Extension host test runner exit code: ${exitCode}`);\n\t\t\t}\n\t\t} catch (err) {\n\t\t\tif (isCI) {\n\t\t\t\tthis._logService.error(`Extension host test runner error`, err);\n\t\t\t}\n\t\t\tconsole.error(err);\n\t\t\texitCode = 1 /* ERROR */;\n\t\t}\n\n\t\tthis._onExtensionHostExit(exitCode);\n\t}\n\n\tprivate findTestExtensionHost(testLocation: URI): IExtensionHostManager | null {\n\t\tlet runningLocation: ExtensionRunningLocation | null = null;\n\n\t\tfor (const extension of this._registry.getAllExtensionDescriptions()) {\n\t\t\tif (isEqualOrParent(testLocation, extension.extensionLocation)) {\n\t\t\t\trunningLocation = this._runningLocations.getRunningLocation(extension.identifier);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (runningLocation === null) {\n\t\t\t// not sure if we should support that, but it was possible to have an test outside an extension\n\n\t\t\tif (testLocation.scheme === Schemas.vscodeRemote) {\n\t\t\t\trunningLocation = new RemoteRunningLocation();\n\t\t\t} else {\n\t\t\t\t// When a debugger attaches to the extension host, it will surface all console.log messages from the extension host,\n\t\t\t\t// but not necessarily from the window. So it would be best if any errors get printed to the console of the extension host.\n\t\t\t\t// That is why here we use the local process extension host even for non-file URIs\n\t\t\t\trunningLocation = new LocalProcessRunningLocation(0);\n\t\t\t}\n\t\t}\n\t\tif (runningLocation !== null) {\n\t\t\treturn this._extensionHostManagers.getByRunningLocation(runningLocation);\n\t\t}\n\t\treturn null;\n\t}\n\n\tprivate _releaseBarrier(): void {\n\t\tthis._installedExtensionsReady.open();\n\t\tthis._onDidRegisterExtensions.fire(undefined);\n\t\tthis._onDidChangeExtensionsStatus.fire(this._registry.getAllExtensionDescriptions().map(e => e.identifier));\n\t}\n\n\t//#region remote authority resolving\n\n\tprotected async _resolveAuthorityInitial(remoteAuthority: string): Promise<ResolverResult> {\n\t\tconst MAX_ATTEMPTS = 5;\n\n\t\tfor (let attempt = 1; ; attempt++) {\n\t\t\ttry {\n\t\t\t\treturn this._resolveAuthorityWithLogging(remoteAuthority);\n\t\t\t} catch (err) {\n\t\t\t\tif (RemoteAuthorityResolverError.isNoResolverFound(err)) {\n\t\t\t\t\t// There is no point in retrying if there is no resolver found\n\t\t\t\t\tthrow err;\n\t\t\t\t}\n\n\t\t\t\tif (RemoteAuthorityResolverError.isNotAvailable(err)) {\n\t\t\t\t\t// The resolver is not available and asked us to not retry\n\t\t\t\t\tthrow err;\n\t\t\t\t}\n\n\t\t\t\tif (attempt >= MAX_ATTEMPTS) {\n\t\t\t\t\t// Too many failed attempts, give up\n\t\t\t\t\tthrow err;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tprotected async _resolveAuthorityAgain(): Promise<void> {\n\t\tconst remoteAuthority = this._environmentService.remoteAuthority;\n\t\tif (!remoteAuthority) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis._remoteAuthorityResolverService._clearResolvedAuthority(remoteAuthority);\n\t\ttry {\n\t\t\tconst result = await this._resolveAuthorityWithLogging(remoteAuthority);\n\t\t\tthis._remoteAuthorityResolverService._setResolvedAuthority(result.authority, result.options);\n\t\t} catch (err) {\n\t\t\tthis._remoteAuthorityResolverService._setResolvedAuthorityError(remoteAuthority, err);\n\t\t}\n\t}\n\n\tprivate async _resolveAuthorityWithLogging(remoteAuthority: string): Promise<ResolverResult> {\n\t\tconst authorityPrefix = getRemoteAuthorityPrefix(remoteAuthority);\n\t\tconst sw = StopWatch.create(false);\n\t\tthis._logService.info(`Invoking resolveAuthority(${authorityPrefix})...`);\n\t\ttry {\n\t\t\tperf.mark(`code/willResolveAuthority/${authorityPrefix}`);\n\t\t\tconst result = await this._resolveAuthority(remoteAuthority);\n\t\t\tperf.mark(`code/didResolveAuthorityOK/${authorityPrefix}`);\n\t\t\tthis._logService.info(`resolveAuthority(${authorityPrefix}) returned '${result.authority.connectTo}' after ${sw.elapsed()} ms`);\n\t\t\treturn result;\n\t\t} catch (err) {\n\t\t\tperf.mark(`code/didResolveAuthorityError/${authorityPrefix}`);\n\t\t\tthis._logService.error(`resolveAuthority(${authorityPrefix}) returned an error after ${sw.elapsed()} ms`, err);\n\t\t\tthrow err;\n\t\t}\n\t}\n\n\tprotected async _resolveAuthorityOnExtensionHosts(kind: ExtensionHostKind, remoteAuthority: string): Promise<ResolverResult> {\n\n\t\tconst extensionHosts = this._getExtensionHostManagers(kind);\n\t\tif (extensionHosts.length === 0) {\n\t\t\t// no local process extension hosts\n\t\t\tthrow new Error(`Cannot resolve authority`);\n\t\t}\n\n\t\tthis._resolveAuthorityAttempt++;\n\t\tconst results = await Promise.all(extensionHosts.map(extHost => extHost.resolveAuthority(remoteAuthority, this._resolveAuthorityAttempt)));\n\n\t\tlet bestErrorResult: IResolveAuthorityErrorResult | null = null;\n\t\tfor (const result of results) {\n\t\t\tif (result.type === 'ok') {\n\t\t\t\treturn result.value;\n\t\t\t}\n\t\t\tif (!bestErrorResult) {\n\t\t\t\tbestErrorResult = result;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tconst bestErrorIsUnknown = (bestErrorResult.error.code === RemoteAuthorityResolverErrorCode.Unknown);\n\t\t\tconst errorIsUnknown = (result.error.code === RemoteAuthorityResolverErrorCode.Unknown);\n\t\t\tif (bestErrorIsUnknown && !errorIsUnknown) {\n\t\t\t\tbestErrorResult = result;\n\t\t\t}\n\t\t}\n\n\t\t// we can only reach this if there is an error\n\t\tthrow new RemoteAuthorityResolverError(bestErrorResult!.error.message, bestErrorResult!.error.code, bestErrorResult!.error.detail);\n\t}\n\n\t//#endregion\n\n\t//#region Stopping / Starting / Restarting\n\n\tpublic stopExtensionHosts(reason: string, auto?: boolean): Promise<boolean> {\n\t\treturn this._doStopExtensionHostsWithVeto(reason, auto);\n\t}\n\n\tprotected async _doStopExtensionHosts(): Promise<void> {\n\t\tconst previouslyActivatedExtensionIds: ExtensionIdentifier[] = [];\n\t\tfor (const extensionStatus of this._extensionStatus.values()) {\n\t\t\tif (extensionStatus.activationStarted) {\n\t\t\t\tpreviouslyActivatedExtensionIds.push(extensionStatus.id);\n\t\t\t}\n\t\t}\n\n\t\tawait this._extensionHostManagers.stopAllInReverse();\n\t\tfor (const extensionStatus of this._extensionStatus.values()) {\n\t\t\textensionStatus.clearRuntimeStatus();\n\t\t}\n\n\t\tif (previouslyActivatedExtensionIds.length > 0) {\n\t\t\tthis._onDidChangeExtensionsStatus.fire(previouslyActivatedExtensionIds);\n\t\t}\n\t}\n\n\tprivate async _doStopExtensionHostsWithVeto(reason: string, auto: boolean = false): Promise<boolean> {\n\t\tif (auto && this._environmentService.isExtensionDevelopment) {\n\t\t\treturn false;\n\t\t}\n\n\t\tconst vetos: (boolean | Promise<boolean>)[] = [];\n\t\tconst vetoReasons = new Set<string>();\n\n\t\tthis._onWillStop.fire({\n\t\t\treason,\n\t\t\tauto,\n\t\t\tveto(value, reason) {\n\t\t\t\tvetos.push(value);\n\n\t\t\t\tif (typeof value === 'boolean') {\n\t\t\t\t\tif (value === true) {\n\t\t\t\t\t\tvetoReasons.add(reason);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tvalue.then(value => {\n\t\t\t\t\t\tif (value) {\n\t\t\t\t\t\t\tvetoReasons.add(reason);\n\t\t\t\t\t\t}\n\t\t\t\t\t}).catch(error => {\n\t\t\t\t\t\tvetoReasons.add(nls.localize('extensionStopVetoError', \"{0} (Error: {1})\", reason, toErrorMessage(error)));\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tconst veto = await handleVetos(vetos, error => this._logService.error(error));\n\t\tif (!veto) {\n\t\t\tawait this._doStopExtensionHosts();\n\t\t} else {\n\t\t\tif (!auto) {\n\t\t\t\tconst vetoReasonsArray = Array.from(vetoReasons);\n\n\t\t\t\tthis._logService.warn(`Extension host was not stopped because of veto (stop reason: ${reason}, veto reason: ${vetoReasonsArray.join(', ')})`);\n\t\t\t\tawait this._dialogService.warn(\n\t\t\t\t\tnls.localize('extensionStopVetoMessage', \"The following operation was blocked: {0}\", reason),\n\t\t\t\t\tvetoReasonsArray.length === 1 ?\n\t\t\t\t\t\tnls.localize('extensionStopVetoDetailsOne', \"The reason for blocking the operation: {0}\", vetoReasonsArray[0]) :\n\t\t\t\t\t\tnls.localize('extensionStopVetoDetailsMany', \"The reasons for blocking the operation:\\n- {0}\", vetoReasonsArray.join('\\n -')),\n\t\t\t\t);\n\t\t\t}\n\n\t\t}\n\n\t\treturn !veto;\n\t}\n\n\tprivate _startExtensionHostsIfNecessary(isInitialStart: boolean, initialActivationEvents: string[]): void {\n\t\tconst locations: ExtensionRunningLocation[] = [];\n\t\tfor (let affinity = 0; affinity <= this._runningLocations.maxLocalProcessAffinity; affinity++) {\n\t\t\tlocations.push(new LocalProcessRunningLocation(affinity));\n\t\t}\n\t\tfor (let affinity = 0; affinity <= this._runningLocations.maxLocalWebWorkerAffinity; affinity++) {\n\t\t\tlocations.push(new LocalWebWorkerRunningLocation(affinity));\n\t\t}\n\t\tlocations.push(new RemoteRunningLocation());\n\t\tfor (const location of locations) {\n\t\t\tif (this._extensionHostManagers.getByRunningLocation(location)) {\n\t\t\t\t// already running\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tconst res = this._createExtensionHostManager(location, isInitialStart, initialActivationEvents);\n\t\t\tif (res) {\n\t\t\t\tconst [extHostManager, disposableStore] = res;\n\t\t\t\tthis._extensionHostManagers.add(extHostManager, disposableStore);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate _createExtensionHostManager(runningLocation: ExtensionRunningLocation, isInitialStart: boolean, initialActivationEvents: string[]): null | [IExtensionHostManager, DisposableStore] {\n\t\tconst extensionHost = this._extensionHostFactory.createExtensionHost(this._runningLocations, runningLocation, isInitialStart);\n\t\tif (!extensionHost) {\n\t\t\treturn null;\n\t\t}\n\n\t\tconst processManager: IExtensionHostManager = this._doCreateExtensionHostManager(extensionHost, initialActivationEvents);\n\t\tconst disposableStore = new DisposableStore();\n\t\tdisposableStore.add(processManager.onDidExit(([code, signal]) => this._onExtensionHostCrashOrExit(processManager, code, signal)));\n\t\tdisposableStore.add(processManager.onDidChangeResponsiveState((responsiveState) => {\n\t\t\tthis._logService.info(`Extension host (${processManager.friendyName}) is ${responsiveState === ResponsiveState.Responsive ? 'responsive' : 'unresponsive'}.`);\n\t\t\tthis._onDidChangeResponsiveChange.fire({\n\t\t\t\textensionHostKind: processManager.kind,\n\t\t\t\tisResponsive: responsiveState === ResponsiveState.Responsive,\n\t\t\t\tgetInspectListener: (tryEnableInspector: boolean) => {\n\t\t\t\t\treturn processManager.getInspectPort(tryEnableInspector);\n\t\t\t\t}\n\t\t\t});\n\t\t}));\n\t\treturn [processManager, disposableStore];\n\t}\n\n\tprotected _doCreateExtensionHostManager(extensionHost: IExtensionHost, initialActivationEvents: string[]): IExtensionHostManager {\n\t\tconst internalExtensionService = this._acquireInternalAPI(extensionHost);\n\t\tif (extensionHost.startup === ExtensionHostStartup.Lazy && initialActivationEvents.length === 0) {\n\t\t\treturn this._instantiationService.createInstance(LazyCreateExtensionHostManager, extensionHost, internalExtensionService);\n\t\t}\n\t\treturn this._instantiationService.createInstance(ExtensionHostManager, extensionHost, initialActivationEvents, internalExtensionService);\n\t}\n\n\tprivate _onExtensionHostCrashOrExit(extensionHost: IExtensionHostManager, code: number, signal: string | null): void {\n\n\t\t// Unexpected termination\n\t\tconst isExtensionDevHost = parseExtensionDevOptions(this._environmentService).isExtensionDevHost;\n\t\tif (!isExtensionDevHost) {\n\t\t\tthis._onExtensionHostCrashed(extensionHost, code, signal);\n\t\t\treturn;\n\t\t}\n\n\t\tthis._onExtensionHostExit(code);\n\t}\n\n\tprotected _onExtensionHostCrashed(extensionHost: IExtensionHostManager, code: number, signal: string | null): void {\n\t\tconsole.error(`Extension host (${extensionHost.friendyName}) terminated unexpectedly. Code: ${code}, Signal: ${signal}`);\n\t\tif (extensionHost.kind === ExtensionHostKind.LocalProcess) {\n\t\t\tthis._doStopExtensionHosts();\n\t\t} else if (extensionHost.kind === ExtensionHostKind.Remote) {\n\t\t\tif (signal) {\n\t\t\t\tthis._onRemoteExtensionHostCrashed(extensionHost, signal);\n\t\t\t}\n\t\t\tthis._extensionHostManagers.stopOne(extensionHost);\n\t\t}\n\t}\n\n\tprivate _getExtensionHostExitInfoWithTimeout(reconnectionToken: string): Promise<IExtensionHostExitInfo | null> {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tconst timeoutHandle = setTimeout(() => {\n\t\t\t\treject(new Error('getExtensionHostExitInfo timed out'));\n\t\t\t}, 2000);\n\t\t\tthis._remoteAgentService.getExtensionHostExitInfo(reconnectionToken).then(\n\t\t\t\t(r) => {\n\t\t\t\t\tclearTimeout(timeoutHandle);\n\t\t\t\t\tresolve(r);\n\t\t\t\t},\n\t\t\t\treject\n\t\t\t);\n\t\t});\n\t}\n\n\tprivate async _onRemoteExtensionHostCrashed(extensionHost: IExtensionHostManager, reconnectionToken: string): Promise<void> {\n\t\ttry {\n\t\t\tconst info = await this._getExtensionHostExitInfoWithTimeout(reconnectionToken);\n\t\t\tif (info) {\n\t\t\t\tthis._logService.error(`Extension host (${extensionHost.friendyName}) terminated unexpectedly with code ${info.code}.`);\n\t\t\t}\n\n\t\t\tthis._logExtensionHostCrash(extensionHost);\n\t\t\tthis._remoteCrashTracker.registerCrash();\n\n\t\t\tif (this._remoteCrashTracker.shouldAutomaticallyRestart()) {\n\t\t\t\tthis._logService.info(`Automatically restarting the remote extension host.`);\n\t\t\t\tthis._notificationService.status(nls.localize('extensionService.autoRestart', \"The remote extension host terminated unexpectedly. Restarting...\"), { hideAfter: 5000 });\n\t\t\t\tthis._startExtensionHostsIfNecessary(false, Array.from(this._allRequestedActivateEvents.keys()));\n\t\t\t} else {\n\t\t\t\tthis._notificationService.prompt(Severity.Error, nls.localize('extensionService.crash', \"Remote Extension host terminated unexpectedly 3 times within the last 5 minutes.\"),\n\t\t\t\t\t[{\n\t\t\t\t\t\tlabel: nls.localize('restart', \"Restart Remote Extension Host\"),\n\t\t\t\t\t\trun: () => {\n\t\t\t\t\t\t\tthis._startExtensionHostsIfNecessary(false, Array.from(this._allRequestedActivateEvents.keys()));\n\t\t\t\t\t\t}\n\t\t\t\t\t}]\n\t\t\t\t);\n\t\t\t}\n\t\t} catch (err) {\n\t\t\t// maybe this wasn't an extension host crash and it was a permanent disconnection\n\t\t}\n\t}\n\n\tprotected _logExtensionHostCrash(extensionHost: IExtensionHostManager): void {\n\n\t\tconst activatedExtensions: ExtensionIdentifier[] = [];\n\t\tfor (const extensionStatus of this._extensionStatus.values()) {\n\t\t\tif (extensionStatus.activationStarted && extensionHost.containsExtension(extensionStatus.id)) {\n\t\t\t\tactivatedExtensions.push(extensionStatus.id);\n\t\t\t}\n\t\t}\n\n\t\tif (activatedExtensions.length > 0) {\n\t\t\tthis._logService.error(`Extension host (${extensionHost.friendyName}) terminated unexpectedly. The following extensions were running: ${activatedExtensions.map(id => id.value).join(', ')}`);\n\t\t} else {\n\t\t\tthis._logService.error(`Extension host (${extensionHost.friendyName}) terminated unexpectedly. No extensions were activated.`);\n\t\t}\n\t}\n\n\tpublic async startExtensionHosts(updates?: { toAdd: IExtension[]; toRemove: string[] }): Promise<void> {\n\t\tawait this._doStopExtensionHosts();\n\n\t\tif (updates) {\n\t\t\tawait this._handleDeltaExtensions(new DeltaExtensionsQueueItem(updates.toAdd, updates.toRemove));\n\t\t}\n\n\t\tconst lock = await this._registry.acquireLock('startExtensionHosts');\n\t\ttry {\n\t\t\tthis._startExtensionHostsIfNecessary(false, Array.from(this._allRequestedActivateEvents.keys()));\n\n\t\t\tconst localProcessExtensionHosts = this._getExtensionHostManagers(ExtensionHostKind.LocalProcess);\n\t\t\tawait Promise.all(localProcessExtensionHosts.map(extHost => extHost.ready()));\n\t\t} finally {\n\t\t\tlock.dispose();\n\t\t}\n\t}\n\n\t//#endregion\n\n\t//#region IExtensionService\n\n\tpublic activateByEvent(activationEvent: string, activationKind: ActivationKind = ActivationKind.Normal): Promise<void> {\n\t\tif (this._installedExtensionsReady.isOpen()) {\n\t\t\t// Extensions have been scanned and interpreted\n\n\t\t\t// Record the fact that this activationEvent was requested (in case of a restart)\n\t\t\tthis._allRequestedActivateEvents.add(activationEvent);\n\n\t\t\tif (!this._registry.containsActivationEvent(activationEvent)) {\n\t\t\t\t// There is no extension that is interested in this activation event\n\t\t\t\treturn NO_OP_VOID_PROMISE;\n\t\t\t}\n\n\t\t\treturn this._activateByEvent(activationEvent, activationKind);\n\t\t} else {\n\t\t\t// Extensions have not been scanned yet.\n\n\t\t\t// Record the fact that this activationEvent was requested (in case of a restart)\n\t\t\tthis._allRequestedActivateEvents.add(activationEvent);\n\n\t\t\tif (activationKind === ActivationKind.Immediate) {\n\t\t\t\t// Do not wait for the normal start-up of the extension host(s)\n\t\t\t\treturn this._activateByEvent(activationEvent, activationKind);\n\t\t\t}\n\n\t\t\treturn this._installedExtensionsReady.wait().then(() => this._activateByEvent(activationEvent, activationKind));\n\t\t}\n\t}\n\n\tprivate _activateByEvent(activationEvent: string, activationKind: ActivationKind): Promise<void> {\n\t\tconst result = Promise.all(\n\t\t\tthis._extensionHostManagers.map(extHostManager => extHostManager.activateByEvent(activationEvent, activationKind))\n\t\t).then(() => { });\n\t\tthis._onWillActivateByEvent.fire({\n\t\t\tevent: activationEvent,\n\t\t\tactivation: result\n\t\t});\n\t\treturn result;\n\t}\n\n\tpublic activateById(extensionId: ExtensionIdentifier, reason: ExtensionActivationReason): Promise<void> {\n\t\treturn this._activateById(extensionId, reason);\n\t}\n\n\tpublic activationEventIsDone(activationEvent: string): boolean {\n\t\tif (!this._installedExtensionsReady.isOpen()) {\n\t\t\treturn false;\n\t\t}\n\t\tif (!this._registry.containsActivationEvent(activationEvent)) {\n\t\t\t// There is no extension that is interested in this activation event\n\t\t\treturn true;\n\t\t}\n\t\treturn this._extensionHostManagers.every(manager => manager.activationEventIsDone(activationEvent));\n\t}\n\n\tpublic whenInstalledExtensionsRegistered(): Promise<boolean> {\n\t\treturn this._installedExtensionsReady.wait();\n\t}\n\n\tget extensions(): IExtensionDescription[] {\n\t\treturn this._registry.getAllExtensionDescriptions();\n\t}\n\n\tprotected _getExtensionRegistrySnapshotWhenReady(): Promise<ExtensionDescriptionRegistrySnapshot> {\n\t\treturn this._installedExtensionsReady.wait().then(() => this._registry.getSnapshot());\n\t}\n\n\tpublic getExtension(id: string): Promise<IExtensionDescription | undefined> {\n\t\treturn this._installedExtensionsReady.wait().then(() => {\n\t\t\treturn this._registry.getExtensionDescription(id);\n\t\t});\n\t}\n\n\tpublic readExtensionPointContributions<T extends IExtensionContributions[keyof IExtensionContributions]>(extPoint: IExtensionPoint<T>): Promise<ExtensionPointContribution<T>[]> {\n\t\treturn this._installedExtensionsReady.wait().then(() => {\n\t\t\tconst availableExtensions = this._registry.getAllExtensionDescriptions();\n\n\t\t\tconst result: ExtensionPointContribution<T>[] = [];\n\t\t\tfor (const desc of availableExtensions) {\n\t\t\t\tif (desc.contributes && hasOwnProperty.call(desc.contributes, extPoint.name)) {\n\t\t\t\t\tresult.push(new ExtensionPointContribution<T>(desc, desc.contributes[extPoint.name as keyof typeof desc.contributes] as T));\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn result;\n\t\t});\n\t}\n\n\tpublic getExtensionsStatus(): { [id: string]: IExtensionsStatus } {\n\t\tconst result: { [id: string]: IExtensionsStatus } = Object.create(null);\n\t\tif (this._registry) {\n\t\t\tconst extensions = this._registry.getAllExtensionDescriptions();\n\t\t\tfor (const extension of extensions) {\n\t\t\t\tconst extensionStatus = this._extensionStatus.get(extension.identifier);\n\t\t\t\tresult[extension.identifier.value] = {\n\t\t\t\t\tid: extension.identifier,\n\t\t\t\t\tmessages: extensionStatus?.messages ?? [],\n\t\t\t\t\tactivationStarted: extensionStatus?.activationStarted ?? false,\n\t\t\t\t\tactivationTimes: extensionStatus?.activationTimes ?? undefined,\n\t\t\t\t\truntimeErrors: extensionStatus?.runtimeErrors ?? [],\n\t\t\t\t\trunningLocation: this._runningLocations.getRunningLocation(extension.identifier),\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n\n\tpublic async getInspectPorts(extensionHostKind: ExtensionHostKind, tryEnableInspector: boolean): Promise<{ port: number; host: string }[]> {\n\t\tconst result = await Promise.all(\n\t\t\tthis._getExtensionHostManagers(extensionHostKind).map(extHost => extHost.getInspectPort(tryEnableInspector))\n\t\t);\n\t\t// remove 0s:\n\t\treturn result.filter(isDefined);\n\t}\n\n\tpublic async setRemoteEnvironment(env: { [key: string]: string | null }): Promise<void> {\n\t\tawait this._extensionHostManagers\n\t\t\t.map(manager => manager.setRemoteEnvironment(env));\n\t}\n\n\t//#endregion\n\n\t// --- impl\n\n\tprivate _safeInvokeIsEnabled(extension: IExtension): boolean {\n\t\ttry {\n\t\t\treturn this._extensionEnablementService.isEnabled(extension);\n\t\t} catch (err) {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\tprivate _doHandleExtensionPoints(affectedExtensions: IExtensionDescription[]): void {\n\t\tconst affectedExtensionPoints: { [extPointName: string]: boolean } = Object.create(null);\n\t\tfor (const extensionDescription of affectedExtensions) {\n\t\t\tif (extensionDescription.contributes) {\n\t\t\t\tfor (const extPointName in extensionDescription.contributes) {\n\t\t\t\t\tif (hasOwnProperty.call(extensionDescription.contributes, extPointName)) {\n\t\t\t\t\t\taffectedExtensionPoints[extPointName] = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tconst messageHandler = (msg: IMessage) => this._handleExtensionPointMessage(msg);\n\t\tconst availableExtensions = this._registry.getAllExtensionDescriptions();\n\t\tconst extensionPoints = ExtensionsRegistry.getExtensionPoints();\n\t\tperf.mark('code/willHandleExtensionPoints');\n\t\tfor (const extensionPoint of extensionPoints) {\n\t\t\tif (affectedExtensionPoints[extensionPoint.name]) {\n\t\t\t\tperf.mark(`code/willHandleExtensionPoint/${extensionPoint.name}`);\n\t\t\t\tAbstractExtensionService._handleExtensionPoint(extensionPoint, availableExtensions, messageHandler);\n\t\t\t\tperf.mark(`code/didHandleExtensionPoint/${extensionPoint.name}`);\n\t\t\t}\n\t\t}\n\t\tperf.mark('code/didHandleExtensionPoints');\n\t}\n\n\tprivate _getOrCreateExtensionStatus(extensionId: ExtensionIdentifier): ExtensionStatus {\n\t\tif (!this._extensionStatus.has(extensionId)) {\n\t\t\tthis._extensionStatus.set(extensionId, new ExtensionStatus(extensionId));\n\t\t}\n\t\treturn this._extensionStatus.get(extensionId)!;\n\t}\n\n\tprivate _handleExtensionPointMessage(msg: IMessage) {\n\t\tconst extensionStatus = this._getOrCreateExtensionStatus(msg.extensionId);\n\t\textensionStatus.addMessage(msg);\n\n\t\tconst extension = this._registry.getExtensionDescription(msg.extensionId);\n\t\tconst strMsg = `[${msg.extensionId.value}]: ${msg.message}`;\n\n\t\tif (msg.type === Severity.Error) {\n\t\t\tif (extension && extension.isUnderDevelopment) {\n\t\t\t\t// This message is about the extension currently being developed\n\t\t\t\tthis._notificationService.notify({ severity: Severity.Error, message: strMsg });\n\t\t\t}\n\t\t\tthis._logService.error(strMsg);\n\t\t} else if (msg.type === Severity.Warning) {\n\t\t\tif (extension && extension.isUnderDevelopment) {\n\t\t\t\t// This message is about the extension currently being developed\n\t\t\t\tthis._notificationService.notify({ severity: Severity.Warning, message: strMsg });\n\t\t\t}\n\t\t\tthis._logService.warn(strMsg);\n\t\t} else {\n\t\t\tthis._logService.info(strMsg);\n\t\t}\n\n\t\tif (msg.extensionId && this._environmentService.isBuilt && !this._environmentService.isExtensionDevelopment) {\n\t\t\tconst { type, extensionId, extensionPointId, message } = msg;\n\t\t\ttype ExtensionsMessageClassification = {\n\t\t\t\towner: 'alexdima';\n\t\t\t\tcomment: 'A validation message for an extension';\n\t\t\t\ttype: { classification: 'SystemMetaData'; purpose: 'PerformanceAndHealth'; comment: 'Severity of problem.' };\n\t\t\t\textensionId: { classification: 'SystemMetaData'; purpose: 'PerformanceAndHealth'; comment: 'The identifier of the extension that has a problem.' };\n\t\t\t\textensionPointId: { classification: 'SystemMetaData'; purpose: 'PerformanceAndHealth'; comment: 'The extension point that has a problem.' };\n\t\t\t\tmessage: { classification: 'SystemMetaData'; purpose: 'PerformanceAndHealth'; comment: 'The message of the problem.' };\n\t\t\t};\n\t\t\ttype ExtensionsMessageEvent = {\n\t\t\t\ttype: Severity;\n\t\t\t\textensionId: string;\n\t\t\t\textensionPointId: string;\n\t\t\t\tmessage: string;\n\t\t\t};\n\t\t\tthis._telemetryService.publicLog2<ExtensionsMessageEvent, ExtensionsMessageClassification>('extensionsMessage', {\n\t\t\t\ttype, extensionId: extensionId.value, extensionPointId, message\n\t\t\t});\n\t\t}\n\t}\n\n\tprivate static _handleExtensionPoint<T extends IExtensionContributions[keyof IExtensionContributions]>(extensionPoint: ExtensionPoint<T>, availableExtensions: IExtensionDescription[], messageHandler: (msg: IMessage) => void): void {\n\t\tconst users: IExtensionPointUser<T>[] = [];\n\t\tfor (const desc of availableExtensions) {\n\t\t\tif (desc.contributes && hasOwnProperty.call(desc.contributes, extensionPoint.name)) {\n\t\t\t\tusers.push({\n\t\t\t\t\tdescription: desc,\n\t\t\t\t\tvalue: desc.contributes[extensionPoint.name as keyof typeof desc.contributes] as T,\n\t\t\t\t\tcollector: new ExtensionMessageCollector(messageHandler, desc, extensionPoint.name)\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t\textensionPoint.acceptUsers(users);\n\t}\n\n\t//#region Called by extension host\n\n\tprivate _acquireInternalAPI(extensionHost: IExtensionHost): IInternalExtensionService {\n\t\treturn {\n\t\t\t_activateById: (extensionId: ExtensionIdentifier, reason: ExtensionActivationReason): Promise<void> => {\n\t\t\t\treturn this._activateById(extensionId, reason);\n\t\t\t},\n\t\t\t_onWillActivateExtension: (extensionId: ExtensionIdentifier): void => {\n\t\t\t\treturn this._onWillActivateExtension(extensionId, extensionHost.runningLocation);\n\t\t\t},\n\t\t\t_onDidActivateExtension: (extensionId: ExtensionIdentifier, codeLoadingTime: number, activateCallTime: number, activateResolvedTime: number, activationReason: ExtensionActivationReason): void => {\n\t\t\t\treturn this._onDidActivateExtension(extensionId, codeLoadingTime, activateCallTime, activateResolvedTime, activationReason);\n\t\t\t},\n\t\t\t_onDidActivateExtensionError: (extensionId: ExtensionIdentifier, error: Error): void => {\n\t\t\t\treturn this._onDidActivateExtensionError(extensionId, error);\n\t\t\t},\n\t\t\t_onExtensionRuntimeError: (extensionId: ExtensionIdentifier, err: Error): void => {\n\t\t\t\treturn this._onExtensionRuntimeError(extensionId, err);\n\t\t\t}\n\t\t};\n\t}\n\n\tpublic async _activateById(extensionId: ExtensionIdentifier, reason: ExtensionActivationReason): Promise<void> {\n\t\tconst results = await Promise.all(\n\t\t\tthis._extensionHostManagers.map(manager => manager.activate(extensionId, reason))\n\t\t);\n\t\tconst activated = results.some(e => e);\n\t\tif (!activated) {\n\t\t\tthrow new Error(`Unknown extension ${extensionId.value}`);\n\t\t}\n\t}\n\n\tprivate _onWillActivateExtension(extensionId: ExtensionIdentifier, runningLocation: ExtensionRunningLocation): void {\n\t\tthis._runningLocations.set(extensionId, runningLocation);\n\t\tconst extensionStatus = this._getOrCreateExtensionStatus(extensionId);\n\t\textensionStatus.onWillActivate();\n\t}\n\n\tprivate _onDidActivateExtension(extensionId: ExtensionIdentifier, codeLoadingTime: number, activateCallTime: number, activateResolvedTime: number, activationReason: ExtensionActivationReason): void {\n\t\tconst extensionStatus = this._getOrCreateExtensionStatus(extensionId);\n\t\textensionStatus.setActivationTimes(new ActivationTimes(codeLoadingTime, activateCallTime, activateResolvedTime, activationReason));\n\t\tthis._onDidChangeExtensionsStatus.fire([extensionId]);\n\t}\n\n\tprivate _onDidActivateExtensionError(extensionId: ExtensionIdentifier, error: Error): void {\n\t\ttype ExtensionActivationErrorClassification = {\n\t\t\towner: 'alexdima';\n\t\t\tcomment: 'An extension failed to activate';\n\t\t\textensionId: { classification: 'SystemMetaData'; purpose: 'PerformanceAndHealth'; comment: 'The identifier of the extension.' };\n\t\t\terror: { classification: 'CallstackOrException'; purpose: 'PerformanceAndHealth'; comment: 'The error message.' };\n\t\t};\n\t\ttype ExtensionActivationErrorEvent = {\n\t\t\textensionId: string;\n\t\t\terror: string;\n\t\t};\n\t\tthis._telemetryService.publicLog2<ExtensionActivationErrorEvent, ExtensionActivationErrorClassification>('extensionActivationError', {\n\t\t\textensionId: extensionId.value,\n\t\t\terror: error.message\n\t\t});\n\t}\n\n\tprivate _onExtensionRuntimeError(extensionId: ExtensionIdentifier, err: Error): void {\n\t\tconst extensionStatus = this._getOrCreateExtensionStatus(extensionId);\n\t\textensionStatus.addRuntimeError(err);\n\t\tthis._onDidChangeExtensionsStatus.fire([extensionId]);\n\t}\n\n\t//#endregion\n\n\tprotected abstract _resolveExtensions(): Promise<ResolvedExtensions>;\n\tprotected abstract _onExtensionHostExit(code: number): Promise<void>;\n\tprotected abstract _resolveAuthority(remoteAuthority: string): Promise<ResolverResult>;\n}\n\nclass ExtensionHostCollection extends Disposable {\n\n\tprivate _extensionHostManagers: ExtensionHostManagerData[] = [];\n\n\tpublic override dispose() {\n\t\tfor (let i = this._extensionHostManagers.length - 1; i >= 0; i--) {\n\t\t\tconst manager = this._extensionHostManagers[i];\n\t\t\tmanager.extensionHost.disconnect();\n\t\t\tmanager.dispose();\n\t\t}\n\t\tthis._extensionHostManagers = [];\n\t\tsuper.dispose();\n\t}\n\n\tpublic add(extensionHostManager: IExtensionHostManager, disposableStore: DisposableStore): void {\n\t\tthis._extensionHostManagers.push(new ExtensionHostManagerData(extensionHostManager, disposableStore));\n\t}\n\n\tpublic async stopAllInReverse(): Promise<void> {\n\t\t// See https://github.com/microsoft/vscode/issues/152204\n\t\t// Dispose extension hosts in reverse creation order because the local extension host\n\t\t// might be critical in sustaining a connection to the remote extension host\n\t\tfor (let i = this._extensionHostManagers.length - 1; i >= 0; i--) {\n\t\t\tconst manager = this._extensionHostManagers[i];\n\t\t\tawait manager.extensionHost.disconnect();\n\t\t\tmanager.dispose();\n\t\t}\n\t\tthis._extensionHostManagers = [];\n\t}\n\n\tpublic async stopOne(extensionHostManager: IExtensionHostManager): Promise<void> {\n\t\tconst index = this._extensionHostManagers.findIndex(el => el.extensionHost === extensionHostManager);\n\t\tif (index >= 0) {\n\t\t\tthis._extensionHostManagers.splice(index, 1);\n\t\t\tawait extensionHostManager.disconnect();\n\t\t\textensionHostManager.dispose();\n\t\t}\n\t}\n\n\tpublic getByKind(kind: ExtensionHostKind): IExtensionHostManager[] {\n\t\treturn this.filter(el => el.kind === kind);\n\t}\n\n\tpublic getByRunningLocation(runningLocation: ExtensionRunningLocation): IExtensionHostManager | null {\n\t\tfor (const el of this._extensionHostManagers) {\n\t\t\tif (el.extensionHost.representsRunningLocation(runningLocation)) {\n\t\t\t\treturn el.extensionHost;\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n\n\t*[Symbol.iterator]() {\n\t\tfor (const extensionHostManager of this._extensionHostManagers) {\n\t\t\tyield extensionHostManager.extensionHost;\n\t\t}\n\t}\n\n\tpublic map<T>(callback: (extHostManager: IExtensionHostManager) => T): T[] {\n\t\treturn this._extensionHostManagers.map(el => callback(el.extensionHost));\n\t}\n\n\tpublic every(callback: (extHostManager: IExtensionHostManager) => unknown): boolean {\n\t\treturn this._extensionHostManagers.every(el => callback(el.extensionHost));\n\t}\n\n\tpublic filter(callback: (extHostManager: IExtensionHostManager) => unknown): IExtensionHostManager[] {\n\t\treturn this._extensionHostManagers.filter(el => callback(el.extensionHost)).map(el => el.extensionHost);\n\t}\n}\n\nclass ExtensionHostManagerData {\n\tconstructor(\n\t\tpublic readonly extensionHost: IExtensionHostManager,\n\t\tpublic readonly disposableStore: DisposableStore\n\t) { }\n\n\tpublic dispose(): void {\n\t\tthis.disposableStore.dispose();\n\t\tthis.extensionHost.dispose();\n\t}\n}\n\nexport class ResolvedExtensions {\n\tconstructor(\n\t\tpublic readonly local: IExtensionDescription[],\n\t\tpublic readonly remote: IExtensionDescription[],\n\t\tpublic readonly hasLocalProcess: boolean,\n\t\tpublic readonly allowRemoteExtensionsInLocalWebWorker: boolean\n\t) { }\n}\n\nexport interface IExtensionHostFactory {\n\tcreateExtensionHost(runningLocations: ExtensionRunningLocationTracker, runningLocation: ExtensionRunningLocation, isInitialStart: boolean): IExtensionHost | null;\n}\n\nclass DeltaExtensionsQueueItem {\n\tconstructor(\n\t\tpublic readonly toAdd: IExtension[],\n\t\tpublic readonly toRemove: string[] | IExtension[]\n\t) { }\n}\n\n/**\n * @argument extensions The extensions to be checked.\n * @argument ignoreWorkspaceTrust Do not take workspace trust into account.\n */\nexport function checkEnabledAndProposedAPI(logService: ILogService, extensionEnablementService: IWorkbenchExtensionEnablementService, extensionsProposedApi: ExtensionsProposedApi, extensions: IExtensionDescription[], ignoreWorkspaceTrust: boolean): IExtensionDescription[] {\n\t// enable or disable proposed API per extension\n\textensionsProposedApi.updateEnabledApiProposals(extensions);\n\n\t// keep only enabled extensions\n\treturn filterEnabledExtensions(logService, extensionEnablementService, extensions, ignoreWorkspaceTrust);\n}\n\n/**\n * Return the subset of extensions that are enabled.\n * @argument ignoreWorkspaceTrust Do not take workspace trust into account.\n */\nexport function filterEnabledExtensions(logService: ILogService, extensionEnablementService: IWorkbenchExtensionEnablementService, extensions: IExtensionDescription[], ignoreWorkspaceTrust: boolean): IExtensionDescription[] {\n\tconst enabledExtensions: IExtensionDescription[] = [], extensionsToCheck: IExtensionDescription[] = [], mappedExtensions: IExtension[] = [];\n\tfor (const extension of extensions) {\n\t\tif (extension.isUnderDevelopment) {\n\t\t\t// Never disable extensions under development\n\t\t\tenabledExtensions.push(extension);\n\t\t} else {\n\t\t\textensionsToCheck.push(extension);\n\t\t\tmappedExtensions.push(toExtension(extension));\n\t\t}\n\t}\n\n\tconst enablementStates = extensionEnablementService.getEnablementStates(mappedExtensions, ignoreWorkspaceTrust ? { trusted: true } : undefined);\n\tfor (let index = 0; index < enablementStates.length; index++) {\n\t\tif (extensionEnablementService.isEnabledEnablementState(enablementStates[index])) {\n\t\t\tenabledExtensions.push(extensionsToCheck[index]);\n\t\t} else {\n\t\t\tif (isCI) {\n\t\t\t\tlogService.info(`filterEnabledExtensions: extension '${extensionsToCheck[index].identifier.value}' is disabled`);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn enabledExtensions;\n}\n\n/**\n * @argument extension The extension to be checked.\n * @argument ignoreWorkspaceTrust Do not take workspace trust into account.\n */\nexport function extensionIsEnabled(logService: ILogService, extensionEnablementService: IWorkbenchExtensionEnablementService, extension: IExtensionDescription, ignoreWorkspaceTrust: boolean): boolean {\n\treturn filterEnabledExtensions(logService, extensionEnablementService, [extension], ignoreWorkspaceTrust).includes(extension);\n}\n\nfunction includes(extensions: IExtensionDescription[], identifier: ExtensionIdentifier): boolean {\n\tfor (const extension of extensions) {\n\t\tif (ExtensionIdentifier.equals(extension.identifier, identifier)) {\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\n\nexport class ExtensionStatus {\n\n\tprivate readonly _messages: IMessage[] = [];\n\tpublic get messages(): IMessage[] {\n\t\treturn this._messages;\n\t}\n\n\tprivate _activationTimes: ActivationTimes | null = null;\n\tpublic get activationTimes(): ActivationTimes | null {\n\t\treturn this._activationTimes;\n\t}\n\n\tprivate _runtimeErrors: Error[] = [];\n\tpublic get runtimeErrors(): Error[] {\n\t\treturn this._runtimeErrors;\n\t}\n\n\tprivate _activationStarted: boolean = false;\n\tpublic get activationStarted(): boolean {\n\t\treturn this._activationStarted;\n\t}\n\n\tconstructor(\n\t\tpublic readonly id: ExtensionIdentifier,\n\t) { }\n\n\tpublic clearRuntimeStatus(): void {\n\t\tthis._activationStarted = false;\n\t\tthis._activationTimes = null;\n\t\tthis._runtimeErrors = [];\n\t}\n\n\tpublic addMessage(msg: IMessage): void {\n\t\tthis._messages.push(msg);\n\t}\n\n\tpublic setActivationTimes(activationTimes: ActivationTimes) {\n\t\tthis._activationTimes = activationTimes;\n\t}\n\n\tpublic addRuntimeError(err: Error): void {\n\t\tthis._runtimeErrors.push(err);\n\t}\n\n\tpublic onWillActivate() {\n\t\tthis._activationStarted = true;\n\t}\n}\n\ninterface IExtensionHostCrashInfo {\n\ttimestamp: number;\n}\n\nexport class ExtensionHostCrashTracker {\n\n\tprivate static _TIME_LIMIT = 5 * 60 * 1000; // 5 minutes\n\tprivate static _CRASH_LIMIT = 3;\n\n\tprivate readonly _recentCrashes: IExtensionHostCrashInfo[] = [];\n\n\tprivate _removeOldCrashes(): void {\n\t\tconst limit = Date.now() - ExtensionHostCrashTracker._TIME_LIMIT;\n\t\twhile (this._recentCrashes.length > 0 && this._recentCrashes[0].timestamp < limit) {\n\t\t\tthis._recentCrashes.shift();\n\t\t}\n\t}\n\n\tpublic registerCrash(): void {\n\t\tthis._removeOldCrashes();\n\t\tthis._recentCrashes.push({ timestamp: Date.now() });\n\t}\n\n\tpublic shouldAutomaticallyRestart(): boolean {\n\t\tthis._removeOldCrashes();\n\t\treturn (this._recentCrashes.length < ExtensionHostCrashTracker._CRASH_LIMIT);\n\t}\n}\n\n/**\n * This can run correctly only on the renderer process because that is the only place\n * where all extension points and all implicit activation events generators are known.\n */\nexport class ImplicitActivationAwareReader implements IActivationEventsReader {\n\tpublic readActivationEvents(extensionDescription: IExtensionDescription): string[] {\n\t\treturn ImplicitActivationEvents.readActivationEvents(extensionDescription);\n\t}\n}\n\nclass ActivationFeatureMarkdowneRenderer extends Disposable implements IExtensionFeatureMarkdownRenderer {\n\n\treadonly type = 'markdown';\n\n\tshouldRender(manifest: IExtensionManifest): boolean {\n\t\treturn !!manifest.activationEvents;\n\t}\n\n\trender(manifest: IExtensionManifest): IRenderedData<IMarkdownString> {\n\t\tconst activationEvents = manifest.activationEvents || [];\n\t\tconst data = new MarkdownString();\n\t\tif (activationEvents.length) {\n\t\t\tfor (const activationEvent of activationEvents) {\n\t\t\t\tdata.appendMarkdown(`- \\`${activationEvent}\\`\\n`);\n\t\t\t}\n\t\t}\n\t\treturn {\n\t\t\tdata,\n\t\t\tdispose: () => { }\n\t\t};\n\t}\n}\n\nRegistry.as<IExtensionFeaturesRegistry>(ExtensionFeaturesExtensions.ExtensionFeaturesRegistry).registerExtensionFeature({\n\tid: 'activationEvents',\n\tlabel: nls.localize('activation', \"Activation Events\"),\n\taccess: {\n\t\tcanToggle: false\n\t},\n\trenderer: new SyncDescriptor(ActivationFeatureMarkdowneRenderer),\n});\n"],
  "mappings": "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",
  "names": ["item", "includes", "reason", "value"]
}
