{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/extensions/common/abstractExtensionService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Barrier } from \"../../../../base/common/async.js\";\nimport { toErrorMessage } from \"../../../../base/common/errorMessage.js\";\nimport { Emitter } from \"../../../../base/common/event.js\";\nimport {\n\ttype IMarkdownString,\n\tMarkdownString,\n} from \"../../../../base/common/htmlContent.js\";\nimport {\n\tDisposable,\n\tDisposableStore,\n} from \"../../../../base/common/lifecycle.js\";\nimport { Schemas } from \"../../../../base/common/network.js\";\nimport * as perf from \"../../../../base/common/performance.js\";\nimport { isCI } from \"../../../../base/common/platform.js\";\nimport { isEqualOrParent } from \"../../../../base/common/resources.js\";\nimport { StopWatch } from \"../../../../base/common/stopwatch.js\";\nimport { isDefined } from \"../../../../base/common/types.js\";\nimport type { URI } from \"../../../../base/common/uri.js\";\nimport * as nls from \"../../../../nls.js\";\nimport { IConfigurationService } from \"../../../../platform/configuration/common/configuration.js\";\nimport { IDialogService } from \"../../../../platform/dialogs/common/dialogs.js\";\nimport { InstallOperation } from \"../../../../platform/extensionManagement/common/extensionManagement.js\";\nimport { ImplicitActivationEvents } from \"../../../../platform/extensionManagement/common/implicitActivationEvents.js\";\nimport {\n\tExtensionIdentifier,\n\tExtensionIdentifierMap,\n\ttype IExtension,\n\ttype IExtensionContributions,\n\ttype IExtensionDescription,\n\ttype IExtensionManifest,\n} from \"../../../../platform/extensions/common/extensions.js\";\nimport { IFileService } from \"../../../../platform/files/common/files.js\";\nimport { SyncDescriptor } from \"../../../../platform/instantiation/common/descriptors.js\";\nimport { IInstantiationService } from \"../../../../platform/instantiation/common/instantiation.js\";\nimport { handleVetos } from \"../../../../platform/lifecycle/common/lifecycle.js\";\nimport { ILogService } from \"../../../../platform/log/common/log.js\";\nimport {\n\tINotificationService,\n\tSeverity,\n} from \"../../../../platform/notification/common/notification.js\";\nimport { IProductService } from \"../../../../platform/product/common/productService.js\";\nimport { Registry } from \"../../../../platform/registry/common/platform.js\";\nimport {\n\tIRemoteAuthorityResolverService,\n\tRemoteAuthorityResolverError,\n\tRemoteAuthorityResolverErrorCode,\n\ttype ResolverResult,\n\tgetRemoteAuthorityPrefix,\n} from \"../../../../platform/remote/common/remoteAuthorityResolver.js\";\nimport { IRemoteExtensionsScannerService } from \"../../../../platform/remote/common/remoteExtensionsScanner.js\";\nimport { ITelemetryService } from \"../../../../platform/telemetry/common/telemetry.js\";\nimport { IWorkspaceContextService } from \"../../../../platform/workspace/common/workspace.js\";\nimport { IWorkbenchEnvironmentService } from \"../../environment/common/environmentService.js\";\nimport {\n\tExtensions as ExtensionFeaturesExtensions,\n\ttype IExtensionFeatureMarkdownRenderer,\n\ttype IExtensionFeaturesRegistry,\n\ttype IRenderedData,\n} from \"../../extensionManagement/common/extensionFeatures.js\";\nimport {\n\tIWorkbenchExtensionEnablementService,\n\tIWorkbenchExtensionManagementService,\n} from \"../../extensionManagement/common/extensionManagement.js\";\nimport {\n\tILifecycleService,\n\tWillShutdownJoinerOrder,\n} from \"../../lifecycle/common/lifecycle.js\";\nimport {\n\ttype IExtensionHostExitInfo,\n\tIRemoteAgentService,\n} from \"../../remote/common/remoteAgentService.js\";\nimport {\n\ttype ExtensionDescriptionRegistryLock,\n\ttype ExtensionDescriptionRegistrySnapshot,\n\ttype IActivationEventsReader,\n\tLockableExtensionDescriptionRegistry,\n} from \"./extensionDescriptionRegistry.js\";\nimport { parseExtensionDevOptions } from \"./extensionDevOptions.js\";\nimport {\n\tExtensionHostKind,\n\tExtensionRunningPreference,\n\ttype IExtensionHostKindPicker,\n} from \"./extensionHostKind.js\";\nimport { ExtensionHostManager } from \"./extensionHostManager.js\";\nimport type { IExtensionHostManager } from \"./extensionHostManagers.js\";\nimport type { IResolveAuthorityErrorResult } from \"./extensionHostProxy.js\";\nimport { IExtensionManifestPropertiesService } from \"./extensionManifestPropertiesService.js\";\nimport {\n\ttype ExtensionRunningLocation,\n\tLocalProcessRunningLocation,\n\tLocalWebWorkerRunningLocation,\n\tRemoteRunningLocation,\n} from \"./extensionRunningLocation.js\";\nimport {\n\tExtensionRunningLocationTracker,\n\tfilterExtensionIdentifiers,\n} from \"./extensionRunningLocationTracker.js\";\nimport {\n\tActivationKind,\n\tActivationTimes,\n\ttype ExtensionActivationReason,\n\tExtensionHostStartup,\n\tExtensionPointContribution,\n\ttype IExtensionHost,\n\ttype IExtensionService,\n\ttype IExtensionsStatus,\n\ttype IInternalExtensionService,\n\ttype IMessage,\n\ttype IResponsiveStateChangeEvent,\n\ttype IWillActivateEvent,\n\ttype WillStopExtensionHostsEvent,\n\ttoExtension,\n\ttoExtensionDescription,\n} from \"./extensions.js\";\nimport type { ExtensionsProposedApi } from \"./extensionsProposedApi.js\";\nimport {\n\tExtensionMessageCollector,\n\ttype ExtensionPoint,\n\tExtensionsRegistry,\n\ttype IExtensionPoint,\n\ttype IExtensionPointUser,\n} from \"./extensionsRegistry.js\";\nimport { LazyCreateExtensionHostManager } from \"./lazyCreateExtensionHostManager.js\";\nimport { ResponsiveState } from \"./rpcProtocol.js\";\nimport {\n\ttype IExtensionActivationHost as IWorkspaceContainsActivationHost,\n\tcheckActivateWorkspaceContainsExtension,\n\tcheckGlobFileExists,\n} from \"./workspaceContains.js\";\n\nconst hasOwnProperty = Object.hasOwnProperty;\nconst NO_OP_VOID_PROMISE = Promise.resolve<void>(undefined);\n\nexport abstract class AbstractExtensionService\n\textends Disposable\n\timplements IExtensionService\n{\n\tpublic _serviceBrand: undefined;\n\n\tprivate readonly _onDidRegisterExtensions = this._register(\n\t\tnew Emitter<void>(),\n\t);\n\tpublic readonly onDidRegisterExtensions =\n\t\tthis._onDidRegisterExtensions.event;\n\n\tprivate readonly _onDidChangeExtensionsStatus = this._register(\n\t\tnew Emitter<ExtensionIdentifier[]>(),\n\t);\n\tpublic readonly onDidChangeExtensionsStatus =\n\t\tthis._onDidChangeExtensionsStatus.event;\n\n\tprivate readonly _onDidChangeExtensions = this._register(\n\t\tnew Emitter<{\n\t\t\treadonly added: ReadonlyArray<IExtensionDescription>;\n\t\t\treadonly removed: ReadonlyArray<IExtensionDescription>;\n\t\t}>({ leakWarningThreshold: 400 }),\n\t);\n\tpublic readonly onDidChangeExtensions = this._onDidChangeExtensions.event;\n\n\tprivate readonly _onWillActivateByEvent = this._register(\n\t\tnew Emitter<IWillActivateEvent>(),\n\t);\n\tpublic readonly onWillActivateByEvent = this._onWillActivateByEvent.event;\n\n\tprivate readonly _onDidChangeResponsiveChange = this._register(\n\t\tnew Emitter<IResponsiveStateChangeEvent>(),\n\t);\n\tpublic readonly onDidChangeResponsiveChange =\n\t\tthis._onDidChangeResponsiveChange.event;\n\n\tprivate readonly _onWillStop = this._register(\n\t\tnew Emitter<WillStopExtensionHostsEvent>(),\n\t);\n\tpublic readonly onWillStop = this._onWillStop.event;\n\n\tprivate readonly _activationEventReader =\n\t\tnew ImplicitActivationAwareReader();\n\tprivate readonly _registry = new LockableExtensionDescriptionRegistry(\n\t\tthis._activationEventReader,\n\t);\n\tprivate readonly _installedExtensionsReady = new Barrier();\n\tprivate readonly _extensionStatus =\n\t\tnew ExtensionIdentifierMap<ExtensionStatus>();\n\tprivate readonly _allRequestedActivateEvents = new Set<string>();\n\tprivate readonly _runningLocations: ExtensionRunningLocationTracker;\n\tprivate readonly _remoteCrashTracker = new ExtensionHostCrashTracker();\n\n\tprivate _deltaExtensionsQueue: DeltaExtensionsQueueItem[] = [];\n\tprivate _inHandleDeltaExtensions = false;\n\n\tprivate readonly _extensionHostManagers = this._register(\n\t\tnew ExtensionHostCollection(),\n\t);\n\n\tprivate _resolveAuthorityAttempt = 0;\n\n\tconstructor(\n\t\tprivate readonly _extensionsProposedApi: ExtensionsProposedApi,\n\t\tprivate readonly _extensionHostFactory: IExtensionHostFactory,\n\t\tprivate readonly _extensionHostKindPicker: IExtensionHostKindPicker,\n\t\t@IInstantiationService protected readonly _instantiationService: IInstantiationService,\n\t\t@INotificationService protected readonly _notificationService: INotificationService,\n\t\t@IWorkbenchEnvironmentService protected readonly _environmentService: IWorkbenchEnvironmentService,\n\t\t@ITelemetryService protected readonly _telemetryService: ITelemetryService,\n\t\t@IWorkbenchExtensionEnablementService protected readonly _extensionEnablementService: IWorkbenchExtensionEnablementService,\n\t\t@IFileService protected readonly _fileService: IFileService,\n\t\t@IProductService protected readonly _productService: IProductService,\n\t\t@IWorkbenchExtensionManagementService protected readonly _extensionManagementService: IWorkbenchExtensionManagementService,\n\t\t@IWorkspaceContextService private readonly _contextService: IWorkspaceContextService,\n\t\t@IConfigurationService private readonly _configurationService: IConfigurationService,\n\t\t@IExtensionManifestPropertiesService private readonly _extensionManifestPropertiesService: IExtensionManifestPropertiesService,\n\t\t@ILogService protected readonly _logService: ILogService,\n\t\t@IRemoteAgentService protected readonly _remoteAgentService: IRemoteAgentService,\n\t\t@IRemoteExtensionsScannerService protected readonly _remoteExtensionsScannerService: IRemoteExtensionsScannerService,\n\t\t@ILifecycleService private readonly _lifecycleService: ILifecycleService,\n\t\t@IRemoteAuthorityResolverService protected readonly _remoteAuthorityResolverService: IRemoteAuthorityResolverService,\n\t\t@IDialogService private readonly _dialogService: IDialogService,\n\t) {\n\t\tsuper();\n\n\t\t// help the file service to activate providers by activating extensions by file system event\n\t\tthis._register(this._fileService.onWillActivateFileSystemProvider(e => {\n\t\t\tif (e.scheme !== Schemas.vscodeRemote) {\n\t\t\t\te.join(this.activateByEvent(`onFileSystem:${e.scheme}`));\n\t\t\t}\n\t\t}));\n\n\t\tthis._runningLocations = new ExtensionRunningLocationTracker(\n\t\t\tthis._registry,\n\t\t\tthis._extensionHostKindPicker,\n\t\t\tthis._environmentService,\n\t\t\tthis._configurationService,\n\t\t\tthis._logService,\n\t\t\tthis._extensionManifestPropertiesService\n\t\t);\n\n\t\tthis._register(this._extensionEnablementService.onEnablementChanged((extensions) => {\n\t\t\tconst toAdd: IExtension[] = [];\n\t\t\tconst toRemove: IExtension[] = [];\n\t\t\tfor (const extension of extensions) {\n\t\t\t\tif (this._safeInvokeIsEnabled(extension)) {\n\t\t\t\t\t// an extension has been enabled\n\t\t\t\t\ttoAdd.push(extension);\n\t\t\t\t} else {\n\t\t\t\t\t// an extension has been disabled\n\t\t\t\t\ttoRemove.push(extension);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (isCI) {\n\t\t\t\tthis._logService.info(`AbstractExtensionService.onEnablementChanged fired for ${extensions.map(e => e.identifier.id).join(', ')}`);\n\t\t\t}\n\t\t\tthis._handleDeltaExtensions(new DeltaExtensionsQueueItem(toAdd, toRemove));\n\t\t}));\n\n\t\tthis._register(this._extensionManagementService.onDidChangeProfile(({ added, removed }) => {\n\t\t\tif (added.length || removed.length) {\n\t\t\t\tif (isCI) {\n\t\t\t\t\tthis._logService.info(`AbstractExtensionService.onDidChangeProfile fired`);\n\t\t\t\t}\n\t\t\t\tthis._handleDeltaExtensions(new DeltaExtensionsQueueItem(added, removed));\n\t\t\t}\n\t\t}));\n\n\t\tthis._register(this._extensionManagementService.onDidEnableExtensions(extensions => {\n\t\t\tif (extensions.length) {\n\t\t\t\tif (isCI) {\n\t\t\t\t\tthis._logService.info(`AbstractExtensionService.onDidEnableExtensions fired`);\n\t\t\t\t}\n\t\t\t\tthis._handleDeltaExtensions(new DeltaExtensionsQueueItem(extensions, []));\n\t\t\t}\n\t\t}));\n\n\t\tthis._register(this._extensionManagementService.onDidInstallExtensions((result) => {\n\t\t\tconst extensions: IExtension[] = [];\n\t\t\tfor (const { local, operation } of result) {\n\t\t\t\tif (local && local.isValid && operation !== InstallOperation.Migrate && this._safeInvokeIsEnabled(local)) {\n\t\t\t\t\textensions.push(local);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (extensions.length) {\n\t\t\t\tif (isCI) {\n\t\t\t\t\tthis._logService.info(`AbstractExtensionService.onDidInstallExtensions fired for ${extensions.map(e => e.identifier.id).join(', ')}`);\n\t\t\t\t}\n\t\t\t\tthis._handleDeltaExtensions(new DeltaExtensionsQueueItem(extensions, []));\n\t\t\t}\n\t\t}));\n\n\t\tthis._register(this._extensionManagementService.onDidUninstallExtension((event) => {\n\t\t\tif (!event.error) {\n\t\t\t\t// an extension has been uninstalled\n\t\t\t\tif (isCI) {\n\t\t\t\t\tthis._logService.info(`AbstractExtensionService.onDidUninstallExtension fired for ${event.identifier.id}`);\n\t\t\t\t}\n\t\t\t\tthis._handleDeltaExtensions(new DeltaExtensionsQueueItem([], [event.identifier.id]));\n\t\t\t}\n\t\t}));\n\n\t\tthis._register(this._lifecycleService.onWillShutdown(event => {\n\t\t\tif (this._remoteAgentService.getConnection()) {\n\t\t\t\tevent.join(async () => {\n\t\t\t\t\t// We need to disconnect the management connection before killing the local extension host.\n\t\t\t\t\t// Otherwise, the local extension host might terminate the underlying tunnel before the\n\t\t\t\t\t// management connection has a chance to send its disconnection message.\n\t\t\t\t\tawait this._remoteAgentService.endConnection();\n\t\t\t\t\tawait this._doStopExtensionHosts();\n\t\t\t\t\tthis._remoteAgentService.getConnection()?.dispose();\n\t\t\t\t}, {\n\t\t\t\t\tid: 'join.disconnectRemote',\n\t\t\t\t\tlabel: nls.localize('disconnectRemote', \"Disconnect Remote Agent\"),\n\t\t\t\t\torder: WillShutdownJoinerOrder.Last // after others have joined that might depend on a remote connection\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tevent.join(this._doStopExtensionHosts(), {\n\t\t\t\t\tid: 'join.stopExtensionHosts',\n\t\t\t\t\tlabel: nls.localize('stopExtensionHosts', \"Stopping Extension Hosts\"),\n\t\t\t\t});\n\t\t\t}\n\t\t}));\n\t}\n\n\tprotected _getExtensionHostManagers(\n\t\tkind: ExtensionHostKind,\n\t): IExtensionHostManager[] {\n\t\treturn this._extensionHostManagers.getByKind(kind);\n\t}\n\n\t//#region deltaExtensions\n\n\tprivate async _handleDeltaExtensions(\n\t\titem: DeltaExtensionsQueueItem,\n\t): Promise<void> {\n\t\tthis._deltaExtensionsQueue.push(item);\n\t\tif (this._inHandleDeltaExtensions) {\n\t\t\t// Let the current item finish, the new one will be picked up\n\t\t\treturn;\n\t\t}\n\n\t\tlet lock: ExtensionDescriptionRegistryLock | null = null;\n\t\ttry {\n\t\t\tthis._inHandleDeltaExtensions = true;\n\n\t\t\t// wait for _initialize to finish before hanlding any delta extension events\n\t\t\tawait this._installedExtensionsReady.wait();\n\n\t\t\tlock = await this._registry.acquireLock(\"handleDeltaExtensions\");\n\t\t\twhile (this._deltaExtensionsQueue.length > 0) {\n\t\t\t\tconst item = this._deltaExtensionsQueue.shift()!;\n\t\t\t\tawait this._deltaExtensions(lock, item.toAdd, item.toRemove);\n\t\t\t}\n\t\t} finally {\n\t\t\tthis._inHandleDeltaExtensions = false;\n\t\t\tlock?.dispose();\n\t\t}\n\t}\n\n\tprivate async _deltaExtensions(\n\t\tlock: ExtensionDescriptionRegistryLock,\n\t\t_toAdd: IExtension[],\n\t\t_toRemove: string[] | IExtension[],\n\t): Promise<void> {\n\t\tif (isCI) {\n\t\t\tthis._logService.info(\n\t\t\t\t`AbstractExtensionService._deltaExtensions: toAdd: [${_toAdd.map((e) => e.identifier.id).join(\",\")}] toRemove: [${_toRemove.map((e) => (typeof e === \"string\" ? e : e.identifier.id)).join(\",\")}]`,\n\t\t\t);\n\t\t}\n\t\tlet toRemove: IExtensionDescription[] = [];\n\t\tfor (let i = 0, len = _toRemove.length; i < len; i++) {\n\t\t\tconst extensionOrId = _toRemove[i];\n\t\t\tconst extensionId =\n\t\t\t\ttypeof extensionOrId === \"string\"\n\t\t\t\t\t? extensionOrId\n\t\t\t\t\t: extensionOrId.identifier.id;\n\t\t\tconst extension =\n\t\t\t\ttypeof extensionOrId === \"string\" ? null : extensionOrId;\n\t\t\tconst extensionDescription =\n\t\t\t\tthis._registry.getExtensionDescription(extensionId);\n\t\t\tif (!extensionDescription) {\n\t\t\t\t// ignore disabling/uninstalling an extension which is not running\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif (\n\t\t\t\textension &&\n\t\t\t\textensionDescription.extensionLocation.scheme !==\n\t\t\t\t\textension.location.scheme\n\t\t\t) {\n\t\t\t\t// this event is for a different extension than mine (maybe for the local extension, while I have the remote extension)\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif (!this.canRemoveExtension(extensionDescription)) {\n\t\t\t\t// uses non-dynamic extension point or is activated\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\ttoRemove.push(extensionDescription);\n\t\t}\n\n\t\tconst toAdd: IExtensionDescription[] = [];\n\t\tfor (let i = 0, len = _toAdd.length; i < len; i++) {\n\t\t\tconst extension = _toAdd[i];\n\n\t\t\tconst extensionDescription = toExtensionDescription(\n\t\t\t\textension,\n\t\t\t\tfalse,\n\t\t\t);\n\t\t\tif (!extensionDescription) {\n\t\t\t\t// could not scan extension...\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif (!this._canAddExtension(extensionDescription, toRemove)) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\ttoAdd.push(extensionDescription);\n\t\t}\n\n\t\tif (toAdd.length === 0 && toRemove.length === 0) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Update the local registry\n\t\tconst result = this._registry.deltaExtensions(\n\t\t\tlock,\n\t\t\ttoAdd,\n\t\t\ttoRemove.map((e) => e.identifier),\n\t\t);\n\t\tthis._onDidChangeExtensions.fire({ added: toAdd, removed: toRemove });\n\n\t\ttoRemove = toRemove.concat(result.removedDueToLooping);\n\t\tif (result.removedDueToLooping.length > 0) {\n\t\t\tthis._notificationService.notify({\n\t\t\t\tseverity: Severity.Error,\n\t\t\t\tmessage: nls.localize(\n\t\t\t\t\t\"looping\",\n\t\t\t\t\t\"The following extensions contain dependency loops and have been disabled: {0}\",\n\t\t\t\t\tresult.removedDueToLooping\n\t\t\t\t\t\t.map((e) => `'${e.identifier.value}'`)\n\t\t\t\t\t\t.join(\", \"),\n\t\t\t\t),\n\t\t\t});\n\t\t}\n\n\t\t// enable or disable proposed API per extension\n\t\tthis._extensionsProposedApi.updateEnabledApiProposals(toAdd);\n\n\t\t// Update extension points\n\t\tthis._doHandleExtensionPoints(\n\t\t\t(<IExtensionDescription[]>[]).concat(toAdd).concat(toRemove),\n\t\t);\n\n\t\t// Update the extension host\n\t\tawait this._updateExtensionsOnExtHosts(\n\t\t\tresult.versionId,\n\t\t\ttoAdd,\n\t\t\ttoRemove.map((e) => e.identifier),\n\t\t);\n\n\t\tfor (let i = 0; i < toAdd.length; i++) {\n\t\t\tthis._activateAddedExtensionIfNeeded(toAdd[i]);\n\t\t}\n\t}\n\n\tprivate async _updateExtensionsOnExtHosts(\n\t\tversionId: number,\n\t\ttoAdd: IExtensionDescription[],\n\t\ttoRemove: ExtensionIdentifier[],\n\t): Promise<void> {\n\t\tconst removedRunningLocation = this._runningLocations.deltaExtensions(\n\t\t\ttoAdd,\n\t\t\ttoRemove,\n\t\t);\n\t\tconst promises = this._extensionHostManagers.map((extHostManager) =>\n\t\t\tthis._updateExtensionsOnExtHost(\n\t\t\t\textHostManager,\n\t\t\t\tversionId,\n\t\t\t\ttoAdd,\n\t\t\t\ttoRemove,\n\t\t\t\tremovedRunningLocation,\n\t\t\t),\n\t\t);\n\t\tawait Promise.all(promises);\n\t}\n\n\tprivate async _updateExtensionsOnExtHost(\n\t\textensionHostManager: IExtensionHostManager,\n\t\tversionId: number,\n\t\ttoAdd: IExtensionDescription[],\n\t\ttoRemove: ExtensionIdentifier[],\n\t\tremovedRunningLocation: ExtensionIdentifierMap<ExtensionRunningLocation | null>,\n\t): Promise<void> {\n\t\tconst myToAdd = this._runningLocations.filterByExtensionHostManager(\n\t\t\ttoAdd,\n\t\t\textensionHostManager,\n\t\t);\n\t\tconst myToRemove = filterExtensionIdentifiers(\n\t\t\ttoRemove,\n\t\t\tremovedRunningLocation,\n\t\t\t(extRunningLocation) =>\n\t\t\t\textensionHostManager.representsRunningLocation(\n\t\t\t\t\textRunningLocation,\n\t\t\t\t),\n\t\t);\n\t\tconst addActivationEvents =\n\t\t\tImplicitActivationEvents.createActivationEventsMap(toAdd);\n\t\tif (isCI) {\n\t\t\tconst printExtIds = (extensions: IExtensionDescription[]) =>\n\t\t\t\textensions.map((e) => e.identifier.value).join(\",\");\n\t\t\tconst printIds = (extensions: ExtensionIdentifier[]) =>\n\t\t\t\textensions.map((e) => e.value).join(\",\");\n\t\t\tthis._logService.info(\n\t\t\t\t`AbstractExtensionService: Calling deltaExtensions: toRemove: [${printIds(toRemove)}], toAdd: [${printExtIds(toAdd)}], myToRemove: [${printIds(myToRemove)}], myToAdd: [${printExtIds(myToAdd)}],`,\n\t\t\t);\n\t\t}\n\t\tawait extensionHostManager.deltaExtensions({\n\t\t\tversionId,\n\t\t\ttoRemove,\n\t\t\ttoAdd,\n\t\t\taddActivationEvents,\n\t\t\tmyToRemove,\n\t\t\tmyToAdd: myToAdd.map((extension) => extension.identifier),\n\t\t});\n\t}\n\n\tpublic canAddExtension(extension: IExtensionDescription): boolean {\n\t\treturn this._canAddExtension(extension, []);\n\t}\n\n\tprivate _canAddExtension(\n\t\textension: IExtensionDescription,\n\t\textensionsBeingRemoved: IExtensionDescription[],\n\t): boolean {\n\t\t// (Also check for renamed extensions)\n\t\tconst existing = this._registry.getExtensionDescriptionByIdOrUUID(\n\t\t\textension.identifier,\n\t\t\textension.id,\n\t\t);\n\t\tif (existing) {\n\t\t\t// This extension is already known (most likely at a different version)\n\t\t\t// so it cannot be added again unless it is removed first\n\t\t\tconst isBeingRemoved = extensionsBeingRemoved.some(\n\t\t\t\t(extensionDescription) =>\n\t\t\t\t\tExtensionIdentifier.equals(\n\t\t\t\t\t\textension.identifier,\n\t\t\t\t\t\textensionDescription.identifier,\n\t\t\t\t\t),\n\t\t\t);\n\t\t\tif (!isBeingRemoved) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\tconst extensionKinds =\n\t\t\tthis._runningLocations.readExtensionKinds(extension);\n\t\tconst isRemote =\n\t\t\textension.extensionLocation.scheme === Schemas.vscodeRemote;\n\t\tconst extensionHostKind =\n\t\t\tthis._extensionHostKindPicker.pickExtensionHostKind(\n\t\t\t\textension.identifier,\n\t\t\t\textensionKinds,\n\t\t\t\t!isRemote,\n\t\t\t\tisRemote,\n\t\t\t\tExtensionRunningPreference.None,\n\t\t\t);\n\t\tif (extensionHostKind === null) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn true;\n\t}\n\n\tpublic canRemoveExtension(extension: IExtensionDescription): boolean {\n\t\tconst extensionDescription = this._registry.getExtensionDescription(\n\t\t\textension.identifier,\n\t\t);\n\t\tif (!extensionDescription) {\n\t\t\t// Can't remove an extension that is unknown!\n\t\t\treturn false;\n\t\t}\n\n\t\tif (\n\t\t\tthis._extensionStatus.get(extensionDescription.identifier)\n\t\t\t\t?.activationStarted\n\t\t) {\n\t\t\t// Extension is running, cannot remove it safely\n\t\t\treturn false;\n\t\t}\n\n\t\treturn true;\n\t}\n\n\tprivate async _activateAddedExtensionIfNeeded(\n\t\textensionDescription: IExtensionDescription,\n\t): Promise<void> {\n\t\tlet shouldActivate = false;\n\t\tlet shouldActivateReason: string | null = null;\n\t\tlet hasWorkspaceContains = false;\n\t\tconst activationEvents =\n\t\t\tthis._activationEventReader.readActivationEvents(\n\t\t\t\textensionDescription,\n\t\t\t);\n\t\tfor (const activationEvent of activationEvents) {\n\t\t\tif (this._allRequestedActivateEvents.has(activationEvent)) {\n\t\t\t\t// This activation event was fired before the extension was added\n\t\t\t\tshouldActivate = true;\n\t\t\t\tshouldActivateReason = activationEvent;\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tif (activationEvent === \"*\") {\n\t\t\t\tshouldActivate = true;\n\t\t\t\tshouldActivateReason = activationEvent;\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tif (/^workspaceContains/.test(activationEvent)) {\n\t\t\t\thasWorkspaceContains = true;\n\t\t\t}\n\n\t\t\tif (activationEvent === \"onStartupFinished\") {\n\t\t\t\tshouldActivate = true;\n\t\t\t\tshouldActivateReason = activationEvent;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tif (shouldActivate) {\n\t\t\tawait Promise.all(\n\t\t\t\tthis._extensionHostManagers.map((extHostManager) =>\n\t\t\t\t\textHostManager.activate(extensionDescription.identifier, {\n\t\t\t\t\t\tstartup: false,\n\t\t\t\t\t\textensionId: extensionDescription.identifier,\n\t\t\t\t\t\tactivationEvent: shouldActivateReason!,\n\t\t\t\t\t}),\n\t\t\t\t),\n\t\t\t).then(() => {});\n\t\t} else if (hasWorkspaceContains) {\n\t\t\tconst workspace = await this._contextService.getCompleteWorkspace();\n\t\t\tconst forceUsingSearch = !!this._environmentService.remoteAuthority;\n\t\t\tconst host: IWorkspaceContainsActivationHost = {\n\t\t\t\tlogService: this._logService,\n\t\t\t\tfolders: workspace.folders.map((folder) => folder.uri),\n\t\t\t\tforceUsingSearch: forceUsingSearch,\n\t\t\t\texists: (uri) => this._fileService.exists(uri),\n\t\t\t\tcheckExists: (folders, includes, token) =>\n\t\t\t\t\tthis._instantiationService.invokeFunction((accessor) =>\n\t\t\t\t\t\tcheckGlobFileExists(accessor, folders, includes, token),\n\t\t\t\t\t),\n\t\t\t};\n\n\t\t\tconst result = await checkActivateWorkspaceContainsExtension(\n\t\t\t\thost,\n\t\t\t\textensionDescription,\n\t\t\t);\n\t\t\tif (!result) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tawait Promise.all(\n\t\t\t\tthis._extensionHostManagers.map((extHostManager) =>\n\t\t\t\t\textHostManager.activate(extensionDescription.identifier, {\n\t\t\t\t\t\tstartup: false,\n\t\t\t\t\t\textensionId: extensionDescription.identifier,\n\t\t\t\t\t\tactivationEvent: result.activationEvent,\n\t\t\t\t\t}),\n\t\t\t\t),\n\t\t\t).then(() => {});\n\t\t}\n\t}\n\n\t//#endregion\n\n\tprotected async _initialize(): Promise<void> {\n\t\tperf.mark(\"code/willLoadExtensions\");\n\t\tthis._startExtensionHostsIfNecessary(true, []);\n\n\t\tconst lock = await this._registry.acquireLock(\"_initialize\");\n\t\ttry {\n\t\t\tconst resolvedExtensions = await this._resolveExtensions();\n\n\t\t\tthis._processExtensions(lock, resolvedExtensions);\n\n\t\t\t// Start extension hosts which are not automatically started\n\t\t\tconst snapshot = this._registry.getSnapshot();\n\t\t\tfor (const extHostManager of this._extensionHostManagers) {\n\t\t\t\tif (\n\t\t\t\t\textHostManager.startup !==\n\t\t\t\t\tExtensionHostStartup.EagerAutoStart\n\t\t\t\t) {\n\t\t\t\t\tconst extensions =\n\t\t\t\t\t\tthis._runningLocations.filterByExtensionHostManager(\n\t\t\t\t\t\t\tsnapshot.extensions,\n\t\t\t\t\t\t\textHostManager,\n\t\t\t\t\t\t);\n\t\t\t\t\textHostManager.start(\n\t\t\t\t\t\tsnapshot.versionId,\n\t\t\t\t\t\tsnapshot.extensions,\n\t\t\t\t\t\textensions.map((extension) => extension.identifier),\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t} finally {\n\t\t\tlock.dispose();\n\t\t}\n\n\t\tthis._releaseBarrier();\n\t\tperf.mark(\"code/didLoadExtensions\");\n\t\tawait this._handleExtensionTests();\n\t}\n\n\tprivate _processExtensions(\n\t\tlock: ExtensionDescriptionRegistryLock,\n\t\tresolvedExtensions: ResolvedExtensions,\n\t): void {\n\t\tconst { allowRemoteExtensionsInLocalWebWorker, hasLocalProcess } =\n\t\t\tresolvedExtensions;\n\t\tconst localExtensions = checkEnabledAndProposedAPI(\n\t\t\tthis._logService,\n\t\t\tthis._extensionEnablementService,\n\t\t\tthis._extensionsProposedApi,\n\t\t\tresolvedExtensions.local,\n\t\t\tfalse,\n\t\t);\n\t\tlet remoteExtensions = checkEnabledAndProposedAPI(\n\t\t\tthis._logService,\n\t\t\tthis._extensionEnablementService,\n\t\t\tthis._extensionsProposedApi,\n\t\t\tresolvedExtensions.remote,\n\t\t\tfalse,\n\t\t);\n\n\t\t// `initializeRunningLocation` will look at the complete picture (e.g. an extension installed on both sides),\n\t\t// takes care of duplicates and picks a running location for each extension\n\t\tthis._runningLocations.initializeRunningLocation(\n\t\t\tlocalExtensions,\n\t\t\tremoteExtensions,\n\t\t);\n\n\t\tthis._startExtensionHostsIfNecessary(true, []);\n\n\t\t// Some remote extensions could run locally in the web worker, so store them\n\t\tconst remoteExtensionsThatNeedToRunLocally =\n\t\t\tallowRemoteExtensionsInLocalWebWorker\n\t\t\t\t? this._runningLocations.filterByExtensionHostKind(\n\t\t\t\t\t\tremoteExtensions,\n\t\t\t\t\t\tExtensionHostKind.LocalWebWorker,\n\t\t\t\t\t)\n\t\t\t\t: [];\n\t\tconst localProcessExtensions = hasLocalProcess\n\t\t\t? this._runningLocations.filterByExtensionHostKind(\n\t\t\t\t\tlocalExtensions,\n\t\t\t\t\tExtensionHostKind.LocalProcess,\n\t\t\t\t)\n\t\t\t: [];\n\t\tconst localWebWorkerExtensions =\n\t\t\tthis._runningLocations.filterByExtensionHostKind(\n\t\t\t\tlocalExtensions,\n\t\t\t\tExtensionHostKind.LocalWebWorker,\n\t\t\t);\n\t\tremoteExtensions = this._runningLocations.filterByExtensionHostKind(\n\t\t\tremoteExtensions,\n\t\t\tExtensionHostKind.Remote,\n\t\t);\n\n\t\t// Add locally the remote extensions that need to run locally in the web worker\n\t\tfor (const ext of remoteExtensionsThatNeedToRunLocally) {\n\t\t\tif (!includes(localWebWorkerExtensions, ext.identifier)) {\n\t\t\t\tlocalWebWorkerExtensions.push(ext);\n\t\t\t}\n\t\t}\n\n\t\tconst allExtensions = remoteExtensions\n\t\t\t.concat(localProcessExtensions)\n\t\t\t.concat(localWebWorkerExtensions);\n\n\t\tconst result = this._registry.deltaExtensions(lock, allExtensions, []);\n\t\tif (result.removedDueToLooping.length > 0) {\n\t\t\tthis._notificationService.notify({\n\t\t\t\tseverity: Severity.Error,\n\t\t\t\tmessage: nls.localize(\n\t\t\t\t\t\"looping\",\n\t\t\t\t\t\"The following extensions contain dependency loops and have been disabled: {0}\",\n\t\t\t\t\tresult.removedDueToLooping\n\t\t\t\t\t\t.map((e) => `'${e.identifier.value}'`)\n\t\t\t\t\t\t.join(\", \"),\n\t\t\t\t),\n\t\t\t});\n\t\t}\n\n\t\tthis._doHandleExtensionPoints(\n\t\t\tthis._registry.getAllExtensionDescriptions(),\n\t\t);\n\t}\n\n\tprivate async _handleExtensionTests(): Promise<void> {\n\t\tif (\n\t\t\t!this._environmentService.isExtensionDevelopment ||\n\t\t\t!this._environmentService.extensionTestsLocationURI\n\t\t) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst extensionHostManager = this.findTestExtensionHost(\n\t\t\tthis._environmentService.extensionTestsLocationURI,\n\t\t);\n\t\tif (!extensionHostManager) {\n\t\t\tconst msg = nls.localize(\n\t\t\t\t\"extensionTestError\",\n\t\t\t\t\"No extension host found that can launch the test runner at {0}.\",\n\t\t\t\tthis._environmentService.extensionTestsLocationURI.toString(),\n\t\t\t);\n\t\t\tconsole.error(msg);\n\t\t\tthis._notificationService.error(msg);\n\t\t\treturn;\n\t\t}\n\n\t\tlet exitCode: number;\n\t\ttry {\n\t\t\texitCode = await extensionHostManager.extensionTestsExecute();\n\t\t\tif (isCI) {\n\t\t\t\tthis._logService.info(\n\t\t\t\t\t`Extension host test runner exit code: ${exitCode}`,\n\t\t\t\t);\n\t\t\t}\n\t\t} catch (err) {\n\t\t\tif (isCI) {\n\t\t\t\tthis._logService.error(`Extension host test runner error`, err);\n\t\t\t}\n\t\t\tconsole.error(err);\n\t\t\texitCode = 1 /* ERROR */;\n\t\t}\n\n\t\tthis._onExtensionHostExit(exitCode);\n\t}\n\n\tprivate findTestExtensionHost(\n\t\ttestLocation: URI,\n\t): IExtensionHostManager | null {\n\t\tlet runningLocation: ExtensionRunningLocation | null = null;\n\n\t\tfor (const extension of this._registry.getAllExtensionDescriptions()) {\n\t\t\tif (isEqualOrParent(testLocation, extension.extensionLocation)) {\n\t\t\t\trunningLocation = this._runningLocations.getRunningLocation(\n\t\t\t\t\textension.identifier,\n\t\t\t\t);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (runningLocation === null) {\n\t\t\t// not sure if we should support that, but it was possible to have an test outside an extension\n\n\t\t\tif (testLocation.scheme === Schemas.vscodeRemote) {\n\t\t\t\trunningLocation = new RemoteRunningLocation();\n\t\t\t} else {\n\t\t\t\t// When a debugger attaches to the extension host, it will surface all console.log messages from the extension host,\n\t\t\t\t// but not necessarily from the window. So it would be best if any errors get printed to the console of the extension host.\n\t\t\t\t// That is why here we use the local process extension host even for non-file URIs\n\t\t\t\trunningLocation = new LocalProcessRunningLocation(0);\n\t\t\t}\n\t\t}\n\t\tif (runningLocation !== null) {\n\t\t\treturn this._extensionHostManagers.getByRunningLocation(\n\t\t\t\trunningLocation,\n\t\t\t);\n\t\t}\n\t\treturn null;\n\t}\n\n\tprivate _releaseBarrier(): void {\n\t\tthis._installedExtensionsReady.open();\n\t\tthis._onDidRegisterExtensions.fire(undefined);\n\t\tthis._onDidChangeExtensionsStatus.fire(\n\t\t\tthis._registry\n\t\t\t\t.getAllExtensionDescriptions()\n\t\t\t\t.map((e) => e.identifier),\n\t\t);\n\t}\n\n\t//#region remote authority resolving\n\n\tprotected async _resolveAuthorityInitial(\n\t\tremoteAuthority: string,\n\t): Promise<ResolverResult> {\n\t\tconst MAX_ATTEMPTS = 5;\n\n\t\tfor (let attempt = 1; ; attempt++) {\n\t\t\ttry {\n\t\t\t\treturn this._resolveAuthorityWithLogging(remoteAuthority);\n\t\t\t} catch (err) {\n\t\t\t\tif (RemoteAuthorityResolverError.isNoResolverFound(err)) {\n\t\t\t\t\t// There is no point in retrying if there is no resolver found\n\t\t\t\t\tthrow err;\n\t\t\t\t}\n\n\t\t\t\tif (RemoteAuthorityResolverError.isNotAvailable(err)) {\n\t\t\t\t\t// The resolver is not available and asked us to not retry\n\t\t\t\t\tthrow err;\n\t\t\t\t}\n\n\t\t\t\tif (attempt >= MAX_ATTEMPTS) {\n\t\t\t\t\t// Too many failed attempts, give up\n\t\t\t\t\tthrow err;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tprotected async _resolveAuthorityAgain(): Promise<void> {\n\t\tconst remoteAuthority = this._environmentService.remoteAuthority;\n\t\tif (!remoteAuthority) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis._remoteAuthorityResolverService._clearResolvedAuthority(\n\t\t\tremoteAuthority,\n\t\t);\n\t\ttry {\n\t\t\tconst result =\n\t\t\t\tawait this._resolveAuthorityWithLogging(remoteAuthority);\n\t\t\tthis._remoteAuthorityResolverService._setResolvedAuthority(\n\t\t\t\tresult.authority,\n\t\t\t\tresult.options,\n\t\t\t);\n\t\t} catch (err) {\n\t\t\tthis._remoteAuthorityResolverService._setResolvedAuthorityError(\n\t\t\t\tremoteAuthority,\n\t\t\t\terr,\n\t\t\t);\n\t\t}\n\t}\n\n\tprivate async _resolveAuthorityWithLogging(\n\t\tremoteAuthority: string,\n\t): Promise<ResolverResult> {\n\t\tconst authorityPrefix = getRemoteAuthorityPrefix(remoteAuthority);\n\t\tconst sw = StopWatch.create(false);\n\t\tthis._logService.info(\n\t\t\t`Invoking resolveAuthority(${authorityPrefix})...`,\n\t\t);\n\t\ttry {\n\t\t\tperf.mark(`code/willResolveAuthority/${authorityPrefix}`);\n\t\t\tconst result = await this._resolveAuthority(remoteAuthority);\n\t\t\tperf.mark(`code/didResolveAuthorityOK/${authorityPrefix}`);\n\t\t\tthis._logService.info(\n\t\t\t\t`resolveAuthority(${authorityPrefix}) returned '${result.authority.connectTo}' after ${sw.elapsed()} ms`,\n\t\t\t);\n\t\t\treturn result;\n\t\t} catch (err) {\n\t\t\tperf.mark(`code/didResolveAuthorityError/${authorityPrefix}`);\n\t\t\tthis._logService.error(\n\t\t\t\t`resolveAuthority(${authorityPrefix}) returned an error after ${sw.elapsed()} ms`,\n\t\t\t\terr,\n\t\t\t);\n\t\t\tthrow err;\n\t\t}\n\t}\n\n\tprotected async _resolveAuthorityOnExtensionHosts(\n\t\tkind: ExtensionHostKind,\n\t\tremoteAuthority: string,\n\t): Promise<ResolverResult> {\n\t\tconst extensionHosts = this._getExtensionHostManagers(kind);\n\t\tif (extensionHosts.length === 0) {\n\t\t\t// no local process extension hosts\n\t\t\tthrow new Error(`Cannot resolve authority`);\n\t\t}\n\n\t\tthis._resolveAuthorityAttempt++;\n\t\tconst results = await Promise.all(\n\t\t\textensionHosts.map((extHost) =>\n\t\t\t\textHost.resolveAuthority(\n\t\t\t\t\tremoteAuthority,\n\t\t\t\t\tthis._resolveAuthorityAttempt,\n\t\t\t\t),\n\t\t\t),\n\t\t);\n\n\t\tlet bestErrorResult: IResolveAuthorityErrorResult | null = null;\n\t\tfor (const result of results) {\n\t\t\tif (result.type === \"ok\") {\n\t\t\t\treturn result.value;\n\t\t\t}\n\t\t\tif (!bestErrorResult) {\n\t\t\t\tbestErrorResult = result;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tconst bestErrorIsUnknown =\n\t\t\t\tbestErrorResult.error.code ===\n\t\t\t\tRemoteAuthorityResolverErrorCode.Unknown;\n\t\t\tconst errorIsUnknown =\n\t\t\t\tresult.error.code === RemoteAuthorityResolverErrorCode.Unknown;\n\t\t\tif (bestErrorIsUnknown && !errorIsUnknown) {\n\t\t\t\tbestErrorResult = result;\n\t\t\t}\n\t\t}\n\n\t\t// we can only reach this if there is an error\n\t\tthrow new RemoteAuthorityResolverError(\n\t\t\tbestErrorResult!.error.message,\n\t\t\tbestErrorResult!.error.code,\n\t\t\tbestErrorResult!.error.detail,\n\t\t);\n\t}\n\n\t//#endregion\n\n\t//#region Stopping / Starting / Restarting\n\n\tpublic stopExtensionHosts(\n\t\treason: string,\n\t\tauto?: boolean,\n\t): Promise<boolean> {\n\t\treturn this._doStopExtensionHostsWithVeto(reason, auto);\n\t}\n\n\tprotected async _doStopExtensionHosts(): Promise<void> {\n\t\tconst previouslyActivatedExtensionIds: ExtensionIdentifier[] = [];\n\t\tfor (const extensionStatus of this._extensionStatus.values()) {\n\t\t\tif (extensionStatus.activationStarted) {\n\t\t\t\tpreviouslyActivatedExtensionIds.push(extensionStatus.id);\n\t\t\t}\n\t\t}\n\n\t\tawait this._extensionHostManagers.stopAllInReverse();\n\t\tfor (const extensionStatus of this._extensionStatus.values()) {\n\t\t\textensionStatus.clearRuntimeStatus();\n\t\t}\n\n\t\tif (previouslyActivatedExtensionIds.length > 0) {\n\t\t\tthis._onDidChangeExtensionsStatus.fire(\n\t\t\t\tpreviouslyActivatedExtensionIds,\n\t\t\t);\n\t\t}\n\t}\n\n\tprivate async _doStopExtensionHostsWithVeto(\n\t\treason: string,\n\t\tauto = false,\n\t): Promise<boolean> {\n\t\tif (auto && this._environmentService.isExtensionDevelopment) {\n\t\t\treturn false;\n\t\t}\n\n\t\tconst vetos: (boolean | Promise<boolean>)[] = [];\n\t\tconst vetoReasons = new Set<string>();\n\n\t\tthis._onWillStop.fire({\n\t\t\treason,\n\t\t\tauto,\n\t\t\tveto(value, reason) {\n\t\t\t\tvetos.push(value);\n\n\t\t\t\tif (typeof value === \"boolean\") {\n\t\t\t\t\tif (value === true) {\n\t\t\t\t\t\tvetoReasons.add(reason);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tvalue\n\t\t\t\t\t\t.then((value) => {\n\t\t\t\t\t\t\tif (value) {\n\t\t\t\t\t\t\t\tvetoReasons.add(reason);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t})\n\t\t\t\t\t\t.catch((error) => {\n\t\t\t\t\t\t\tvetoReasons.add(\n\t\t\t\t\t\t\t\tnls.localize(\n\t\t\t\t\t\t\t\t\t\"extensionStopVetoError\",\n\t\t\t\t\t\t\t\t\t\"{0} (Error: {1})\",\n\t\t\t\t\t\t\t\t\treason,\n\t\t\t\t\t\t\t\t\ttoErrorMessage(error),\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t},\n\t\t});\n\n\t\tconst veto = await handleVetos(vetos, (error) =>\n\t\t\tthis._logService.error(error),\n\t\t);\n\t\tif (veto) {\n\t\t\tif (!auto) {\n\t\t\t\tconst vetoReasonsArray = Array.from(vetoReasons);\n\n\t\t\t\tthis._logService.warn(\n\t\t\t\t\t`Extension host was not stopped because of veto (stop reason: ${reason}, veto reason: ${vetoReasonsArray.join(\", \")})`,\n\t\t\t\t);\n\t\t\t\tawait this._dialogService.warn(\n\t\t\t\t\tnls.localize(\n\t\t\t\t\t\t\"extensionStopVetoMessage\",\n\t\t\t\t\t\t\"The following operation was blocked: {0}\",\n\t\t\t\t\t\treason,\n\t\t\t\t\t),\n\t\t\t\t\tvetoReasonsArray.length === 1\n\t\t\t\t\t\t? nls.localize(\n\t\t\t\t\t\t\t\t\"extensionStopVetoDetailsOne\",\n\t\t\t\t\t\t\t\t\"The reason for blocking the operation: {0}\",\n\t\t\t\t\t\t\t\tvetoReasonsArray[0],\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t: nls.localize(\n\t\t\t\t\t\t\t\t\"extensionStopVetoDetailsMany\",\n\t\t\t\t\t\t\t\t\"The reasons for blocking the operation:\\n- {0}\",\n\t\t\t\t\t\t\t\tvetoReasonsArray.join(\"\\n -\"),\n\t\t\t\t\t\t\t),\n\t\t\t\t);\n\t\t\t}\n\t\t} else {\n\t\t\tawait this._doStopExtensionHosts();\n\t\t}\n\n\t\treturn !veto;\n\t}\n\n\tprivate _startExtensionHostsIfNecessary(\n\t\tisInitialStart: boolean,\n\t\tinitialActivationEvents: string[],\n\t): void {\n\t\tconst locations: ExtensionRunningLocation[] = [];\n\t\tfor (\n\t\t\tlet affinity = 0;\n\t\t\taffinity <= this._runningLocations.maxLocalProcessAffinity;\n\t\t\taffinity++\n\t\t) {\n\t\t\tlocations.push(new LocalProcessRunningLocation(affinity));\n\t\t}\n\t\tfor (\n\t\t\tlet affinity = 0;\n\t\t\taffinity <= this._runningLocations.maxLocalWebWorkerAffinity;\n\t\t\taffinity++\n\t\t) {\n\t\t\tlocations.push(new LocalWebWorkerRunningLocation(affinity));\n\t\t}\n\t\tlocations.push(new RemoteRunningLocation());\n\t\tfor (const location of locations) {\n\t\t\tif (this._extensionHostManagers.getByRunningLocation(location)) {\n\t\t\t\t// already running\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tconst res = this._createExtensionHostManager(\n\t\t\t\tlocation,\n\t\t\t\tisInitialStart,\n\t\t\t\tinitialActivationEvents,\n\t\t\t);\n\t\t\tif (res) {\n\t\t\t\tconst [extHostManager, disposableStore] = res;\n\t\t\t\tthis._extensionHostManagers.add(\n\t\t\t\t\textHostManager,\n\t\t\t\t\tdisposableStore,\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate _createExtensionHostManager(\n\t\trunningLocation: ExtensionRunningLocation,\n\t\tisInitialStart: boolean,\n\t\tinitialActivationEvents: string[],\n\t): null | [IExtensionHostManager, DisposableStore] {\n\t\tconst extensionHost = this._extensionHostFactory.createExtensionHost(\n\t\t\tthis._runningLocations,\n\t\t\trunningLocation,\n\t\t\tisInitialStart,\n\t\t);\n\t\tif (!extensionHost) {\n\t\t\treturn null;\n\t\t}\n\n\t\tconst processManager: IExtensionHostManager =\n\t\t\tthis._doCreateExtensionHostManager(\n\t\t\t\textensionHost,\n\t\t\t\tinitialActivationEvents,\n\t\t\t);\n\t\tconst disposableStore = new DisposableStore();\n\t\tdisposableStore.add(\n\t\t\tprocessManager.onDidExit(([code, signal]) =>\n\t\t\t\tthis._onExtensionHostCrashOrExit(processManager, code, signal),\n\t\t\t),\n\t\t);\n\t\tdisposableStore.add(\n\t\t\tprocessManager.onDidChangeResponsiveState((responsiveState) => {\n\t\t\t\tthis._logService.info(\n\t\t\t\t\t`Extension host (${processManager.friendyName}) is ${responsiveState === ResponsiveState.Responsive ? \"responsive\" : \"unresponsive\"}.`,\n\t\t\t\t);\n\t\t\t\tthis._onDidChangeResponsiveChange.fire({\n\t\t\t\t\textensionHostKind: processManager.kind,\n\t\t\t\t\tisResponsive:\n\t\t\t\t\t\tresponsiveState === ResponsiveState.Responsive,\n\t\t\t\t\tgetInspectListener: (tryEnableInspector: boolean) => {\n\t\t\t\t\t\treturn processManager.getInspectPort(\n\t\t\t\t\t\t\ttryEnableInspector,\n\t\t\t\t\t\t);\n\t\t\t\t\t},\n\t\t\t\t});\n\t\t\t}),\n\t\t);\n\t\treturn [processManager, disposableStore];\n\t}\n\n\tprotected _doCreateExtensionHostManager(\n\t\textensionHost: IExtensionHost,\n\t\tinitialActivationEvents: string[],\n\t): IExtensionHostManager {\n\t\tconst internalExtensionService =\n\t\t\tthis._acquireInternalAPI(extensionHost);\n\t\tif (\n\t\t\textensionHost.startup === ExtensionHostStartup.Lazy &&\n\t\t\tinitialActivationEvents.length === 0\n\t\t) {\n\t\t\treturn this._instantiationService.createInstance(\n\t\t\t\tLazyCreateExtensionHostManager,\n\t\t\t\textensionHost,\n\t\t\t\tinternalExtensionService,\n\t\t\t);\n\t\t}\n\t\treturn this._instantiationService.createInstance(\n\t\t\tExtensionHostManager,\n\t\t\textensionHost,\n\t\t\tinitialActivationEvents,\n\t\t\tinternalExtensionService,\n\t\t);\n\t}\n\n\tprivate _onExtensionHostCrashOrExit(\n\t\textensionHost: IExtensionHostManager,\n\t\tcode: number,\n\t\tsignal: string | null,\n\t): void {\n\t\t// Unexpected termination\n\t\tconst isExtensionDevHost = parseExtensionDevOptions(\n\t\t\tthis._environmentService,\n\t\t).isExtensionDevHost;\n\t\tif (!isExtensionDevHost) {\n\t\t\tthis._onExtensionHostCrashed(extensionHost, code, signal);\n\t\t\treturn;\n\t\t}\n\n\t\tthis._onExtensionHostExit(code);\n\t}\n\n\tprotected _onExtensionHostCrashed(\n\t\textensionHost: IExtensionHostManager,\n\t\tcode: number,\n\t\tsignal: string | null,\n\t): void {\n\t\tconsole.error(\n\t\t\t`Extension host (${extensionHost.friendyName}) terminated unexpectedly. Code: ${code}, Signal: ${signal}`,\n\t\t);\n\t\tif (extensionHost.kind === ExtensionHostKind.LocalProcess) {\n\t\t\tthis._doStopExtensionHosts();\n\t\t} else if (extensionHost.kind === ExtensionHostKind.Remote) {\n\t\t\tif (signal) {\n\t\t\t\tthis._onRemoteExtensionHostCrashed(extensionHost, signal);\n\t\t\t}\n\t\t\tthis._extensionHostManagers.stopOne(extensionHost);\n\t\t}\n\t}\n\n\tprivate _getExtensionHostExitInfoWithTimeout(\n\t\treconnectionToken: string,\n\t): Promise<IExtensionHostExitInfo | null> {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tconst timeoutHandle = setTimeout(() => {\n\t\t\t\treject(new Error(\"getExtensionHostExitInfo timed out\"));\n\t\t\t}, 2000);\n\t\t\tthis._remoteAgentService\n\t\t\t\t.getExtensionHostExitInfo(reconnectionToken)\n\t\t\t\t.then((r) => {\n\t\t\t\t\tclearTimeout(timeoutHandle);\n\t\t\t\t\tresolve(r);\n\t\t\t\t}, reject);\n\t\t});\n\t}\n\n\tprivate async _onRemoteExtensionHostCrashed(\n\t\textensionHost: IExtensionHostManager,\n\t\treconnectionToken: string,\n\t): Promise<void> {\n\t\ttry {\n\t\t\tconst info =\n\t\t\t\tawait this._getExtensionHostExitInfoWithTimeout(\n\t\t\t\t\treconnectionToken,\n\t\t\t\t);\n\t\t\tif (info) {\n\t\t\t\tthis._logService.error(\n\t\t\t\t\t`Extension host (${extensionHost.friendyName}) terminated unexpectedly with code ${info.code}.`,\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tthis._logExtensionHostCrash(extensionHost);\n\t\t\tthis._remoteCrashTracker.registerCrash();\n\n\t\t\tif (this._remoteCrashTracker.shouldAutomaticallyRestart()) {\n\t\t\t\tthis._logService.info(\n\t\t\t\t\t`Automatically restarting the remote extension host.`,\n\t\t\t\t);\n\t\t\t\tthis._notificationService.status(\n\t\t\t\t\tnls.localize(\n\t\t\t\t\t\t\"extensionService.autoRestart\",\n\t\t\t\t\t\t\"The remote extension host terminated unexpectedly. Restarting...\",\n\t\t\t\t\t),\n\t\t\t\t\t{ hideAfter: 5000 },\n\t\t\t\t);\n\t\t\t\tthis._startExtensionHostsIfNecessary(\n\t\t\t\t\tfalse,\n\t\t\t\t\tArray.from(this._allRequestedActivateEvents.keys()),\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\tthis._notificationService.prompt(\n\t\t\t\t\tSeverity.Error,\n\t\t\t\t\tnls.localize(\n\t\t\t\t\t\t\"extensionService.crash\",\n\t\t\t\t\t\t\"Remote Extension host terminated unexpectedly 3 times within the last 5 minutes.\",\n\t\t\t\t\t),\n\t\t\t\t\t[\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: nls.localize(\n\t\t\t\t\t\t\t\t\"restart\",\n\t\t\t\t\t\t\t\t\"Restart Remote Extension Host\",\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\trun: () => {\n\t\t\t\t\t\t\t\tthis._startExtensionHostsIfNecessary(\n\t\t\t\t\t\t\t\t\tfalse,\n\t\t\t\t\t\t\t\t\tArray.from(\n\t\t\t\t\t\t\t\t\t\tthis._allRequestedActivateEvents.keys(),\n\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t);\n\t\t\t}\n\t\t} catch (err) {\n\t\t\t// maybe this wasn't an extension host crash and it was a permanent disconnection\n\t\t}\n\t}\n\n\tprotected _logExtensionHostCrash(\n\t\textensionHost: IExtensionHostManager,\n\t): void {\n\t\tconst activatedExtensions: ExtensionIdentifier[] = [];\n\t\tfor (const extensionStatus of this._extensionStatus.values()) {\n\t\t\tif (\n\t\t\t\textensionStatus.activationStarted &&\n\t\t\t\textensionHost.containsExtension(extensionStatus.id)\n\t\t\t) {\n\t\t\t\tactivatedExtensions.push(extensionStatus.id);\n\t\t\t}\n\t\t}\n\n\t\tif (activatedExtensions.length > 0) {\n\t\t\tthis._logService.error(\n\t\t\t\t`Extension host (${extensionHost.friendyName}) terminated unexpectedly. The following extensions were running: ${activatedExtensions.map((id) => id.value).join(\", \")}`,\n\t\t\t);\n\t\t} else {\n\t\t\tthis._logService.error(\n\t\t\t\t`Extension host (${extensionHost.friendyName}) terminated unexpectedly. No extensions were activated.`,\n\t\t\t);\n\t\t}\n\t}\n\n\tpublic async startExtensionHosts(updates?: {\n\t\ttoAdd: IExtension[];\n\t\ttoRemove: string[];\n\t}): Promise<void> {\n\t\tawait this._doStopExtensionHosts();\n\n\t\tif (updates) {\n\t\t\tawait this._handleDeltaExtensions(\n\t\t\t\tnew DeltaExtensionsQueueItem(updates.toAdd, updates.toRemove),\n\t\t\t);\n\t\t}\n\n\t\tconst lock = await this._registry.acquireLock(\"startExtensionHosts\");\n\t\ttry {\n\t\t\tthis._startExtensionHostsIfNecessary(\n\t\t\t\tfalse,\n\t\t\t\tArray.from(this._allRequestedActivateEvents.keys()),\n\t\t\t);\n\n\t\t\tconst localProcessExtensionHosts = this._getExtensionHostManagers(\n\t\t\t\tExtensionHostKind.LocalProcess,\n\t\t\t);\n\t\t\tawait Promise.all(\n\t\t\t\tlocalProcessExtensionHosts.map((extHost) => extHost.ready()),\n\t\t\t);\n\t\t} finally {\n\t\t\tlock.dispose();\n\t\t}\n\t}\n\n\t//#endregion\n\n\t//#region IExtensionService\n\n\tpublic activateByEvent(\n\t\tactivationEvent: string,\n\t\tactivationKind: ActivationKind = ActivationKind.Normal,\n\t): Promise<void> {\n\t\tif (this._installedExtensionsReady.isOpen()) {\n\t\t\t// Extensions have been scanned and interpreted\n\n\t\t\t// Record the fact that this activationEvent was requested (in case of a restart)\n\t\t\tthis._allRequestedActivateEvents.add(activationEvent);\n\n\t\t\tif (!this._registry.containsActivationEvent(activationEvent)) {\n\t\t\t\t// There is no extension that is interested in this activation event\n\t\t\t\treturn NO_OP_VOID_PROMISE;\n\t\t\t}\n\n\t\t\treturn this._activateByEvent(activationEvent, activationKind);\n\t\t} else {\n\t\t\t// Extensions have not been scanned yet.\n\n\t\t\t// Record the fact that this activationEvent was requested (in case of a restart)\n\t\t\tthis._allRequestedActivateEvents.add(activationEvent);\n\n\t\t\tif (activationKind === ActivationKind.Immediate) {\n\t\t\t\t// Do not wait for the normal start-up of the extension host(s)\n\t\t\t\treturn this._activateByEvent(activationEvent, activationKind);\n\t\t\t}\n\n\t\t\treturn this._installedExtensionsReady\n\t\t\t\t.wait()\n\t\t\t\t.then(() =>\n\t\t\t\t\tthis._activateByEvent(activationEvent, activationKind),\n\t\t\t\t);\n\t\t}\n\t}\n\n\tprivate _activateByEvent(\n\t\tactivationEvent: string,\n\t\tactivationKind: ActivationKind,\n\t): Promise<void> {\n\t\tconst result = Promise.all(\n\t\t\tthis._extensionHostManagers.map((extHostManager) =>\n\t\t\t\textHostManager.activateByEvent(activationEvent, activationKind),\n\t\t\t),\n\t\t).then(() => {});\n\t\tthis._onWillActivateByEvent.fire({\n\t\t\tevent: activationEvent,\n\t\t\tactivation: result,\n\t\t});\n\t\treturn result;\n\t}\n\n\tpublic activateById(\n\t\textensionId: ExtensionIdentifier,\n\t\treason: ExtensionActivationReason,\n\t): Promise<void> {\n\t\treturn this._activateById(extensionId, reason);\n\t}\n\n\tpublic activationEventIsDone(activationEvent: string): boolean {\n\t\tif (!this._installedExtensionsReady.isOpen()) {\n\t\t\treturn false;\n\t\t}\n\t\tif (!this._registry.containsActivationEvent(activationEvent)) {\n\t\t\t// There is no extension that is interested in this activation event\n\t\t\treturn true;\n\t\t}\n\t\treturn this._extensionHostManagers.every((manager) =>\n\t\t\tmanager.activationEventIsDone(activationEvent),\n\t\t);\n\t}\n\n\tpublic whenInstalledExtensionsRegistered(): Promise<boolean> {\n\t\treturn this._installedExtensionsReady.wait();\n\t}\n\n\tget extensions(): IExtensionDescription[] {\n\t\treturn this._registry.getAllExtensionDescriptions();\n\t}\n\n\tprotected _getExtensionRegistrySnapshotWhenReady(): Promise<ExtensionDescriptionRegistrySnapshot> {\n\t\treturn this._installedExtensionsReady\n\t\t\t.wait()\n\t\t\t.then(() => this._registry.getSnapshot());\n\t}\n\n\tpublic getExtension(\n\t\tid: string,\n\t): Promise<IExtensionDescription | undefined> {\n\t\treturn this._installedExtensionsReady.wait().then(() => {\n\t\t\treturn this._registry.getExtensionDescription(id);\n\t\t});\n\t}\n\n\tpublic readExtensionPointContributions<\n\t\tT extends IExtensionContributions[keyof IExtensionContributions],\n\t>(extPoint: IExtensionPoint<T>): Promise<ExtensionPointContribution<T>[]> {\n\t\treturn this._installedExtensionsReady.wait().then(() => {\n\t\t\tconst availableExtensions =\n\t\t\t\tthis._registry.getAllExtensionDescriptions();\n\n\t\t\tconst result: ExtensionPointContribution<T>[] = [];\n\t\t\tfor (const desc of availableExtensions) {\n\t\t\t\tif (\n\t\t\t\t\tdesc.contributes &&\n\t\t\t\t\thasOwnProperty.call(desc.contributes, extPoint.name)\n\t\t\t\t) {\n\t\t\t\t\tresult.push(\n\t\t\t\t\t\tnew ExtensionPointContribution<T>(\n\t\t\t\t\t\t\tdesc,\n\t\t\t\t\t\t\tdesc.contributes[\n\t\t\t\t\t\t\t\textPoint.name as keyof typeof desc.contributes\n\t\t\t\t\t\t\t] as T,\n\t\t\t\t\t\t),\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn result;\n\t\t});\n\t}\n\n\tpublic getExtensionsStatus(): { [id: string]: IExtensionsStatus } {\n\t\tconst result: { [id: string]: IExtensionsStatus } = Object.create(null);\n\t\tif (this._registry) {\n\t\t\tconst extensions = this._registry.getAllExtensionDescriptions();\n\t\t\tfor (const extension of extensions) {\n\t\t\t\tconst extensionStatus = this._extensionStatus.get(\n\t\t\t\t\textension.identifier,\n\t\t\t\t);\n\t\t\t\tresult[extension.identifier.value] = {\n\t\t\t\t\tid: extension.identifier,\n\t\t\t\t\tmessages: extensionStatus?.messages ?? [],\n\t\t\t\t\tactivationStarted:\n\t\t\t\t\t\textensionStatus?.activationStarted ?? false,\n\t\t\t\t\tactivationTimes:\n\t\t\t\t\t\textensionStatus?.activationTimes ?? undefined,\n\t\t\t\t\truntimeErrors: extensionStatus?.runtimeErrors ?? [],\n\t\t\t\t\trunningLocation: this._runningLocations.getRunningLocation(\n\t\t\t\t\t\textension.identifier,\n\t\t\t\t\t),\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n\n\tpublic async getInspectPorts(\n\t\textensionHostKind: ExtensionHostKind,\n\t\ttryEnableInspector: boolean,\n\t): Promise<{ port: number; host: string }[]> {\n\t\tconst result = await Promise.all(\n\t\t\tthis._getExtensionHostManagers(extensionHostKind).map((extHost) =>\n\t\t\t\textHost.getInspectPort(tryEnableInspector),\n\t\t\t),\n\t\t);\n\t\t// remove 0s:\n\t\treturn result.filter(isDefined);\n\t}\n\n\tpublic async setRemoteEnvironment(env: {\n\t\t[key: string]: string | null;\n\t}): Promise<void> {\n\t\tawait this._extensionHostManagers.map((manager) =>\n\t\t\tmanager.setRemoteEnvironment(env),\n\t\t);\n\t}\n\n\t//#endregion\n\n\t// --- impl\n\n\tprivate _safeInvokeIsEnabled(extension: IExtension): boolean {\n\t\ttry {\n\t\t\treturn this._extensionEnablementService.isEnabled(extension);\n\t\t} catch (err) {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\tprivate _doHandleExtensionPoints(\n\t\taffectedExtensions: IExtensionDescription[],\n\t): void {\n\t\tconst affectedExtensionPoints: { [extPointName: string]: boolean } =\n\t\t\tObject.create(null);\n\t\tfor (const extensionDescription of affectedExtensions) {\n\t\t\tif (extensionDescription.contributes) {\n\t\t\t\tfor (const extPointName in extensionDescription.contributes) {\n\t\t\t\t\tif (\n\t\t\t\t\t\thasOwnProperty.call(\n\t\t\t\t\t\t\textensionDescription.contributes,\n\t\t\t\t\t\t\textPointName,\n\t\t\t\t\t\t)\n\t\t\t\t\t) {\n\t\t\t\t\t\taffectedExtensionPoints[extPointName] = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tconst messageHandler = (msg: IMessage) =>\n\t\t\tthis._handleExtensionPointMessage(msg);\n\t\tconst availableExtensions =\n\t\t\tthis._registry.getAllExtensionDescriptions();\n\t\tconst extensionPoints = ExtensionsRegistry.getExtensionPoints();\n\t\tperf.mark(\"code/willHandleExtensionPoints\");\n\t\tfor (const extensionPoint of extensionPoints) {\n\t\t\tif (affectedExtensionPoints[extensionPoint.name]) {\n\t\t\t\tperf.mark(\n\t\t\t\t\t`code/willHandleExtensionPoint/${extensionPoint.name}`,\n\t\t\t\t);\n\t\t\t\tAbstractExtensionService._handleExtensionPoint(\n\t\t\t\t\textensionPoint,\n\t\t\t\t\tavailableExtensions,\n\t\t\t\t\tmessageHandler,\n\t\t\t\t);\n\t\t\t\tperf.mark(\n\t\t\t\t\t`code/didHandleExtensionPoint/${extensionPoint.name}`,\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t\tperf.mark(\"code/didHandleExtensionPoints\");\n\t}\n\n\tprivate _getOrCreateExtensionStatus(\n\t\textensionId: ExtensionIdentifier,\n\t): ExtensionStatus {\n\t\tif (!this._extensionStatus.has(extensionId)) {\n\t\t\tthis._extensionStatus.set(\n\t\t\t\textensionId,\n\t\t\t\tnew ExtensionStatus(extensionId),\n\t\t\t);\n\t\t}\n\t\treturn this._extensionStatus.get(extensionId)!;\n\t}\n\n\tprivate _handleExtensionPointMessage(msg: IMessage) {\n\t\tconst extensionStatus = this._getOrCreateExtensionStatus(\n\t\t\tmsg.extensionId,\n\t\t);\n\t\textensionStatus.addMessage(msg);\n\n\t\tconst extension = this._registry.getExtensionDescription(\n\t\t\tmsg.extensionId,\n\t\t);\n\t\tconst strMsg = `[${msg.extensionId.value}]: ${msg.message}`;\n\n\t\tif (msg.type === Severity.Error) {\n\t\t\tif (extension && extension.isUnderDevelopment) {\n\t\t\t\t// This message is about the extension currently being developed\n\t\t\t\tthis._notificationService.notify({\n\t\t\t\t\tseverity: Severity.Error,\n\t\t\t\t\tmessage: strMsg,\n\t\t\t\t});\n\t\t\t}\n\t\t\tthis._logService.error(strMsg);\n\t\t} else if (msg.type === Severity.Warning) {\n\t\t\tif (extension && extension.isUnderDevelopment) {\n\t\t\t\t// This message is about the extension currently being developed\n\t\t\t\tthis._notificationService.notify({\n\t\t\t\t\tseverity: Severity.Warning,\n\t\t\t\t\tmessage: strMsg,\n\t\t\t\t});\n\t\t\t}\n\t\t\tthis._logService.warn(strMsg);\n\t\t} else {\n\t\t\tthis._logService.info(strMsg);\n\t\t}\n\n\t\tif (\n\t\t\tmsg.extensionId &&\n\t\t\tthis._environmentService.isBuilt &&\n\t\t\t!this._environmentService.isExtensionDevelopment\n\t\t) {\n\t\t\tconst { type, extensionId, extensionPointId, message } = msg;\n\t\t\ttype ExtensionsMessageClassification = {\n\t\t\t\towner: \"alexdima\";\n\t\t\t\tcomment: \"A validation message for an extension\";\n\t\t\t\ttype: {\n\t\t\t\t\tclassification: \"SystemMetaData\";\n\t\t\t\t\tpurpose: \"PerformanceAndHealth\";\n\t\t\t\t\tcomment: \"Severity of problem.\";\n\t\t\t\t};\n\t\t\t\textensionId: {\n\t\t\t\t\tclassification: \"SystemMetaData\";\n\t\t\t\t\tpurpose: \"PerformanceAndHealth\";\n\t\t\t\t\tcomment: \"The identifier of the extension that has a problem.\";\n\t\t\t\t};\n\t\t\t\textensionPointId: {\n\t\t\t\t\tclassification: \"SystemMetaData\";\n\t\t\t\t\tpurpose: \"PerformanceAndHealth\";\n\t\t\t\t\tcomment: \"The extension point that has a problem.\";\n\t\t\t\t};\n\t\t\t\tmessage: {\n\t\t\t\t\tclassification: \"SystemMetaData\";\n\t\t\t\t\tpurpose: \"PerformanceAndHealth\";\n\t\t\t\t\tcomment: \"The message of the problem.\";\n\t\t\t\t};\n\t\t\t};\n\t\t\ttype ExtensionsMessageEvent = {\n\t\t\t\ttype: Severity;\n\t\t\t\textensionId: string;\n\t\t\t\textensionPointId: string;\n\t\t\t\tmessage: string;\n\t\t\t};\n\t\t\tthis._telemetryService.publicLog2<\n\t\t\t\tExtensionsMessageEvent,\n\t\t\t\tExtensionsMessageClassification\n\t\t\t>(\"extensionsMessage\", {\n\t\t\t\ttype,\n\t\t\t\textensionId: extensionId.value,\n\t\t\t\textensionPointId,\n\t\t\t\tmessage,\n\t\t\t});\n\t\t}\n\t}\n\n\tprivate static _handleExtensionPoint<\n\t\tT extends IExtensionContributions[keyof IExtensionContributions],\n\t>(\n\t\textensionPoint: ExtensionPoint<T>,\n\t\tavailableExtensions: IExtensionDescription[],\n\t\tmessageHandler: (msg: IMessage) => void,\n\t): void {\n\t\tconst users: IExtensionPointUser<T>[] = [];\n\t\tfor (const desc of availableExtensions) {\n\t\t\tif (\n\t\t\t\tdesc.contributes &&\n\t\t\t\thasOwnProperty.call(desc.contributes, extensionPoint.name)\n\t\t\t) {\n\t\t\t\tusers.push({\n\t\t\t\t\tdescription: desc,\n\t\t\t\t\tvalue: desc.contributes[\n\t\t\t\t\t\textensionPoint.name as keyof typeof desc.contributes\n\t\t\t\t\t] as T,\n\t\t\t\t\tcollector: new ExtensionMessageCollector(\n\t\t\t\t\t\tmessageHandler,\n\t\t\t\t\t\tdesc,\n\t\t\t\t\t\textensionPoint.name,\n\t\t\t\t\t),\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t\textensionPoint.acceptUsers(users);\n\t}\n\n\t//#region Called by extension host\n\n\tprivate _acquireInternalAPI(\n\t\textensionHost: IExtensionHost,\n\t): IInternalExtensionService {\n\t\treturn {\n\t\t\t_activateById: (\n\t\t\t\textensionId: ExtensionIdentifier,\n\t\t\t\treason: ExtensionActivationReason,\n\t\t\t): Promise<void> => {\n\t\t\t\treturn this._activateById(extensionId, reason);\n\t\t\t},\n\t\t\t_onWillActivateExtension: (\n\t\t\t\textensionId: ExtensionIdentifier,\n\t\t\t): void => {\n\t\t\t\treturn this._onWillActivateExtension(\n\t\t\t\t\textensionId,\n\t\t\t\t\textensionHost.runningLocation,\n\t\t\t\t);\n\t\t\t},\n\t\t\t_onDidActivateExtension: (\n\t\t\t\textensionId: ExtensionIdentifier,\n\t\t\t\tcodeLoadingTime: number,\n\t\t\t\tactivateCallTime: number,\n\t\t\t\tactivateResolvedTime: number,\n\t\t\t\tactivationReason: ExtensionActivationReason,\n\t\t\t): void => {\n\t\t\t\treturn this._onDidActivateExtension(\n\t\t\t\t\textensionId,\n\t\t\t\t\tcodeLoadingTime,\n\t\t\t\t\tactivateCallTime,\n\t\t\t\t\tactivateResolvedTime,\n\t\t\t\t\tactivationReason,\n\t\t\t\t);\n\t\t\t},\n\t\t\t_onDidActivateExtensionError: (\n\t\t\t\textensionId: ExtensionIdentifier,\n\t\t\t\terror: Error,\n\t\t\t): void => {\n\t\t\t\treturn this._onDidActivateExtensionError(extensionId, error);\n\t\t\t},\n\t\t\t_onExtensionRuntimeError: (\n\t\t\t\textensionId: ExtensionIdentifier,\n\t\t\t\terr: Error,\n\t\t\t): void => {\n\t\t\t\treturn this._onExtensionRuntimeError(extensionId, err);\n\t\t\t},\n\t\t};\n\t}\n\n\tpublic async _activateById(\n\t\textensionId: ExtensionIdentifier,\n\t\treason: ExtensionActivationReason,\n\t): Promise<void> {\n\t\tconst results = await Promise.all(\n\t\t\tthis._extensionHostManagers.map((manager) =>\n\t\t\t\tmanager.activate(extensionId, reason),\n\t\t\t),\n\t\t);\n\t\tconst activated = results.some((e) => e);\n\t\tif (!activated) {\n\t\t\tthrow new Error(`Unknown extension ${extensionId.value}`);\n\t\t}\n\t}\n\n\tprivate _onWillActivateExtension(\n\t\textensionId: ExtensionIdentifier,\n\t\trunningLocation: ExtensionRunningLocation,\n\t): void {\n\t\tthis._runningLocations.set(extensionId, runningLocation);\n\t\tconst extensionStatus = this._getOrCreateExtensionStatus(extensionId);\n\t\textensionStatus.onWillActivate();\n\t}\n\n\tprivate _onDidActivateExtension(\n\t\textensionId: ExtensionIdentifier,\n\t\tcodeLoadingTime: number,\n\t\tactivateCallTime: number,\n\t\tactivateResolvedTime: number,\n\t\tactivationReason: ExtensionActivationReason,\n\t): void {\n\t\tconst extensionStatus = this._getOrCreateExtensionStatus(extensionId);\n\t\textensionStatus.setActivationTimes(\n\t\t\tnew ActivationTimes(\n\t\t\t\tcodeLoadingTime,\n\t\t\t\tactivateCallTime,\n\t\t\t\tactivateResolvedTime,\n\t\t\t\tactivationReason,\n\t\t\t),\n\t\t);\n\t\tthis._onDidChangeExtensionsStatus.fire([extensionId]);\n\t}\n\n\tprivate _onDidActivateExtensionError(\n\t\textensionId: ExtensionIdentifier,\n\t\terror: Error,\n\t): void {\n\t\ttype ExtensionActivationErrorClassification = {\n\t\t\towner: \"alexdima\";\n\t\t\tcomment: \"An extension failed to activate\";\n\t\t\textensionId: {\n\t\t\t\tclassification: \"SystemMetaData\";\n\t\t\t\tpurpose: \"PerformanceAndHealth\";\n\t\t\t\tcomment: \"The identifier of the extension.\";\n\t\t\t};\n\t\t\terror: {\n\t\t\t\tclassification: \"CallstackOrException\";\n\t\t\t\tpurpose: \"PerformanceAndHealth\";\n\t\t\t\tcomment: \"The error message.\";\n\t\t\t};\n\t\t};\n\t\ttype ExtensionActivationErrorEvent = {\n\t\t\textensionId: string;\n\t\t\terror: string;\n\t\t};\n\t\tthis._telemetryService.publicLog2<\n\t\t\tExtensionActivationErrorEvent,\n\t\t\tExtensionActivationErrorClassification\n\t\t>(\"extensionActivationError\", {\n\t\t\textensionId: extensionId.value,\n\t\t\terror: error.message,\n\t\t});\n\t}\n\n\tprivate _onExtensionRuntimeError(\n\t\textensionId: ExtensionIdentifier,\n\t\terr: Error,\n\t): void {\n\t\tconst extensionStatus = this._getOrCreateExtensionStatus(extensionId);\n\t\textensionStatus.addRuntimeError(err);\n\t\tthis._onDidChangeExtensionsStatus.fire([extensionId]);\n\t}\n\n\t//#endregion\n\n\tprotected abstract _resolveExtensions(): Promise<ResolvedExtensions>;\n\tprotected abstract _onExtensionHostExit(code: number): Promise<void>;\n\tprotected abstract _resolveAuthority(\n\t\tremoteAuthority: string,\n\t): Promise<ResolverResult>;\n}\n\nclass ExtensionHostCollection extends Disposable {\n\tprivate _extensionHostManagers: ExtensionHostManagerData[] = [];\n\n\tpublic override dispose() {\n\t\tfor (let i = this._extensionHostManagers.length - 1; i >= 0; i--) {\n\t\t\tconst manager = this._extensionHostManagers[i];\n\t\t\tmanager.extensionHost.disconnect();\n\t\t\tmanager.dispose();\n\t\t}\n\t\tthis._extensionHostManagers = [];\n\t\tsuper.dispose();\n\t}\n\n\tpublic add(\n\t\textensionHostManager: IExtensionHostManager,\n\t\tdisposableStore: DisposableStore,\n\t): void {\n\t\tthis._extensionHostManagers.push(\n\t\t\tnew ExtensionHostManagerData(extensionHostManager, disposableStore),\n\t\t);\n\t}\n\n\tpublic async stopAllInReverse(): Promise<void> {\n\t\t// See https://github.com/microsoft/vscode/issues/152204\n\t\t// Dispose extension hosts in reverse creation order because the local extension host\n\t\t// might be critical in sustaining a connection to the remote extension host\n\t\tfor (let i = this._extensionHostManagers.length - 1; i >= 0; i--) {\n\t\t\tconst manager = this._extensionHostManagers[i];\n\t\t\tawait manager.extensionHost.disconnect();\n\t\t\tmanager.dispose();\n\t\t}\n\t\tthis._extensionHostManagers = [];\n\t}\n\n\tpublic async stopOne(\n\t\textensionHostManager: IExtensionHostManager,\n\t): Promise<void> {\n\t\tconst index = this._extensionHostManagers.findIndex(\n\t\t\t(el) => el.extensionHost === extensionHostManager,\n\t\t);\n\t\tif (index >= 0) {\n\t\t\tthis._extensionHostManagers.splice(index, 1);\n\t\t\tawait extensionHostManager.disconnect();\n\t\t\textensionHostManager.dispose();\n\t\t}\n\t}\n\n\tpublic getByKind(kind: ExtensionHostKind): IExtensionHostManager[] {\n\t\treturn this.filter((el) => el.kind === kind);\n\t}\n\n\tpublic getByRunningLocation(\n\t\trunningLocation: ExtensionRunningLocation,\n\t): IExtensionHostManager | null {\n\t\tfor (const el of this._extensionHostManagers) {\n\t\t\tif (el.extensionHost.representsRunningLocation(runningLocation)) {\n\t\t\t\treturn el.extensionHost;\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n\n\t*[Symbol.iterator]() {\n\t\tfor (const extensionHostManager of this._extensionHostManagers) {\n\t\t\tyield extensionHostManager.extensionHost;\n\t\t}\n\t}\n\n\tpublic map<T>(callback: (extHostManager: IExtensionHostManager) => T): T[] {\n\t\treturn this._extensionHostManagers.map((el) =>\n\t\t\tcallback(el.extensionHost),\n\t\t);\n\t}\n\n\tpublic every(\n\t\tcallback: (extHostManager: IExtensionHostManager) => unknown,\n\t): boolean {\n\t\treturn this._extensionHostManagers.every((el) =>\n\t\t\tcallback(el.extensionHost),\n\t\t);\n\t}\n\n\tpublic filter(\n\t\tcallback: (extHostManager: IExtensionHostManager) => unknown,\n\t): IExtensionHostManager[] {\n\t\treturn this._extensionHostManagers\n\t\t\t.filter((el) => callback(el.extensionHost))\n\t\t\t.map((el) => el.extensionHost);\n\t}\n}\n\nclass ExtensionHostManagerData {\n\tconstructor(\n\t\tpublic readonly extensionHost: IExtensionHostManager,\n\t\tpublic readonly disposableStore: DisposableStore,\n\t) {}\n\n\tpublic dispose(): void {\n\t\tthis.disposableStore.dispose();\n\t\tthis.extensionHost.dispose();\n\t}\n}\n\nexport class ResolvedExtensions {\n\tconstructor(\n\t\tpublic readonly local: IExtensionDescription[],\n\t\tpublic readonly remote: IExtensionDescription[],\n\t\tpublic readonly hasLocalProcess: boolean,\n\t\tpublic readonly allowRemoteExtensionsInLocalWebWorker: boolean,\n\t) {}\n}\n\nexport interface IExtensionHostFactory {\n\tcreateExtensionHost(\n\t\trunningLocations: ExtensionRunningLocationTracker,\n\t\trunningLocation: ExtensionRunningLocation,\n\t\tisInitialStart: boolean,\n\t): IExtensionHost | null;\n}\n\nclass DeltaExtensionsQueueItem {\n\tconstructor(\n\t\tpublic readonly toAdd: IExtension[],\n\t\tpublic readonly toRemove: string[] | IExtension[],\n\t) {}\n}\n\n/**\n * @argument extensions The extensions to be checked.\n * @argument ignoreWorkspaceTrust Do not take workspace trust into account.\n */\nexport function checkEnabledAndProposedAPI(\n\tlogService: ILogService,\n\textensionEnablementService: IWorkbenchExtensionEnablementService,\n\textensionsProposedApi: ExtensionsProposedApi,\n\textensions: IExtensionDescription[],\n\tignoreWorkspaceTrust: boolean,\n): IExtensionDescription[] {\n\t// enable or disable proposed API per extension\n\textensionsProposedApi.updateEnabledApiProposals(extensions);\n\n\t// keep only enabled extensions\n\treturn filterEnabledExtensions(\n\t\tlogService,\n\t\textensionEnablementService,\n\t\textensions,\n\t\tignoreWorkspaceTrust,\n\t);\n}\n\n/**\n * Return the subset of extensions that are enabled.\n * @argument ignoreWorkspaceTrust Do not take workspace trust into account.\n */\nexport function filterEnabledExtensions(\n\tlogService: ILogService,\n\textensionEnablementService: IWorkbenchExtensionEnablementService,\n\textensions: IExtensionDescription[],\n\tignoreWorkspaceTrust: boolean,\n): IExtensionDescription[] {\n\tconst enabledExtensions: IExtensionDescription[] = [],\n\t\textensionsToCheck: IExtensionDescription[] = [],\n\t\tmappedExtensions: IExtension[] = [];\n\tfor (const extension of extensions) {\n\t\tif (extension.isUnderDevelopment) {\n\t\t\t// Never disable extensions under development\n\t\t\tenabledExtensions.push(extension);\n\t\t} else {\n\t\t\textensionsToCheck.push(extension);\n\t\t\tmappedExtensions.push(toExtension(extension));\n\t\t}\n\t}\n\n\tconst enablementStates = extensionEnablementService.getEnablementStates(\n\t\tmappedExtensions,\n\t\tignoreWorkspaceTrust ? { trusted: true } : undefined,\n\t);\n\tfor (let index = 0; index < enablementStates.length; index++) {\n\t\tif (\n\t\t\textensionEnablementService.isEnabledEnablementState(\n\t\t\t\tenablementStates[index],\n\t\t\t)\n\t\t) {\n\t\t\tenabledExtensions.push(extensionsToCheck[index]);\n\t\t} else if (isCI) {\n\t\t\tlogService.info(\n\t\t\t\t`filterEnabledExtensions: extension '${extensionsToCheck[index].identifier.value}' is disabled`,\n\t\t\t);\n\t\t}\n\t}\n\n\treturn enabledExtensions;\n}\n\n/**\n * @argument extension The extension to be checked.\n * @argument ignoreWorkspaceTrust Do not take workspace trust into account.\n */\nexport function extensionIsEnabled(\n\tlogService: ILogService,\n\textensionEnablementService: IWorkbenchExtensionEnablementService,\n\textension: IExtensionDescription,\n\tignoreWorkspaceTrust: boolean,\n): boolean {\n\treturn filterEnabledExtensions(\n\t\tlogService,\n\t\textensionEnablementService,\n\t\t[extension],\n\t\tignoreWorkspaceTrust,\n\t).includes(extension);\n}\n\nfunction includes(\n\textensions: IExtensionDescription[],\n\tidentifier: ExtensionIdentifier,\n): boolean {\n\tfor (const extension of extensions) {\n\t\tif (ExtensionIdentifier.equals(extension.identifier, identifier)) {\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\n\nexport class ExtensionStatus {\n\tprivate readonly _messages: IMessage[] = [];\n\tpublic get messages(): IMessage[] {\n\t\treturn this._messages;\n\t}\n\n\tprivate _activationTimes: ActivationTimes | null = null;\n\tpublic get activationTimes(): ActivationTimes | null {\n\t\treturn this._activationTimes;\n\t}\n\n\tprivate _runtimeErrors: Error[] = [];\n\tpublic get runtimeErrors(): Error[] {\n\t\treturn this._runtimeErrors;\n\t}\n\n\tprivate _activationStarted = false;\n\tpublic get activationStarted(): boolean {\n\t\treturn this._activationStarted;\n\t}\n\n\tconstructor(public readonly id: ExtensionIdentifier) {}\n\n\tpublic clearRuntimeStatus(): void {\n\t\tthis._activationStarted = false;\n\t\tthis._activationTimes = null;\n\t\tthis._runtimeErrors = [];\n\t}\n\n\tpublic addMessage(msg: IMessage): void {\n\t\tthis._messages.push(msg);\n\t}\n\n\tpublic setActivationTimes(activationTimes: ActivationTimes) {\n\t\tthis._activationTimes = activationTimes;\n\t}\n\n\tpublic addRuntimeError(err: Error): void {\n\t\tthis._runtimeErrors.push(err);\n\t}\n\n\tpublic onWillActivate() {\n\t\tthis._activationStarted = true;\n\t}\n}\n\ninterface IExtensionHostCrashInfo {\n\ttimestamp: number;\n}\n\nexport class ExtensionHostCrashTracker {\n\tprivate static _TIME_LIMIT = 5 * 60 * 1000; // 5 minutes\n\tprivate static _CRASH_LIMIT = 3;\n\n\tprivate readonly _recentCrashes: IExtensionHostCrashInfo[] = [];\n\n\tprivate _removeOldCrashes(): void {\n\t\tconst limit = Date.now() - ExtensionHostCrashTracker._TIME_LIMIT;\n\t\twhile (\n\t\t\tthis._recentCrashes.length > 0 &&\n\t\t\tthis._recentCrashes[0].timestamp < limit\n\t\t) {\n\t\t\tthis._recentCrashes.shift();\n\t\t}\n\t}\n\n\tpublic registerCrash(): void {\n\t\tthis._removeOldCrashes();\n\t\tthis._recentCrashes.push({ timestamp: Date.now() });\n\t}\n\n\tpublic shouldAutomaticallyRestart(): boolean {\n\t\tthis._removeOldCrashes();\n\t\treturn (\n\t\t\tthis._recentCrashes.length < ExtensionHostCrashTracker._CRASH_LIMIT\n\t\t);\n\t}\n}\n\n/**\n * This can run correctly only on the renderer process because that is the only place\n * where all extension points and all implicit activation events generators are known.\n */\nexport class ImplicitActivationAwareReader implements IActivationEventsReader {\n\tpublic readActivationEvents(\n\t\textensionDescription: IExtensionDescription,\n\t): string[] {\n\t\treturn ImplicitActivationEvents.readActivationEvents(\n\t\t\textensionDescription,\n\t\t);\n\t}\n}\n\nclass ActivationFeatureMarkdowneRenderer\n\textends Disposable\n\timplements IExtensionFeatureMarkdownRenderer\n{\n\treadonly type = \"markdown\";\n\n\tshouldRender(manifest: IExtensionManifest): boolean {\n\t\treturn !!manifest.activationEvents;\n\t}\n\n\trender(manifest: IExtensionManifest): IRenderedData<IMarkdownString> {\n\t\tconst activationEvents = manifest.activationEvents || [];\n\t\tconst data = new MarkdownString();\n\t\tif (activationEvents.length) {\n\t\t\tfor (const activationEvent of activationEvents) {\n\t\t\t\tdata.appendMarkdown(`- \\`${activationEvent}\\`\\n`);\n\t\t\t}\n\t\t}\n\t\treturn {\n\t\t\tdata,\n\t\t\tdispose: () => {},\n\t\t};\n\t}\n}\n\nRegistry.as<IExtensionFeaturesRegistry>(\n\tExtensionFeaturesExtensions.ExtensionFeaturesRegistry,\n).registerExtensionFeature({\n\tid: \"activationEvents\",\n\tlabel: nls.localize(\"activation\", \"Activation Events\"),\n\taccess: {\n\t\tcanToggle: false,\n\t},\n\trenderer: new SyncDescriptor(ActivationFeatureMarkdowneRenderer),\n});\n"],
  "mappings": "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",
  "names": ["item", "includes", "reason", "value"]
}
