{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/extensions/common/extensionHostEnv.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IProcessEnvironment } from '../../../../base/common/platform.js';\n\nexport const enum ExtHostConnectionType {\n\tIPC = 1,\n\tSocket = 2,\n\tMessagePort = 3\n}\n\n/**\n * The extension host will connect via named pipe / domain socket to its renderer.\n */\nexport class IPCExtHostConnection {\n\tpublic static ENV_KEY = 'VSCODE_EXTHOST_IPC_HOOK';\n\n\tpublic readonly type = ExtHostConnectionType.IPC;\n\n\tconstructor(\n\t\tpublic readonly pipeName: string\n\t) { }\n\n\tpublic serialize(env: IProcessEnvironment): void {\n\t\tenv[IPCExtHostConnection.ENV_KEY] = this.pipeName;\n\t}\n}\n\n/**\n * The extension host will receive via nodejs IPC the socket to its renderer.\n */\nexport class SocketExtHostConnection {\n\tpublic static ENV_KEY = 'VSCODE_EXTHOST_WILL_SEND_SOCKET';\n\n\tpublic readonly type = ExtHostConnectionType.Socket;\n\n\tpublic serialize(env: IProcessEnvironment): void {\n\t\tenv[SocketExtHostConnection.ENV_KEY] = '1';\n\t}\n}\n\n/**\n * The extension host will receive via nodejs IPC the MessagePort to its renderer.\n */\nexport class MessagePortExtHostConnection {\n\tpublic static ENV_KEY = 'VSCODE_WILL_SEND_MESSAGE_PORT';\n\n\tpublic readonly type = ExtHostConnectionType.MessagePort;\n\n\tpublic serialize(env: IProcessEnvironment): void {\n\t\tenv[MessagePortExtHostConnection.ENV_KEY] = '1';\n\t}\n}\n\nexport type ExtHostConnection = IPCExtHostConnection | SocketExtHostConnection | MessagePortExtHostConnection;\n\nfunction clean(env: IProcessEnvironment): void {\n\tdelete env[IPCExtHostConnection.ENV_KEY];\n\tdelete env[SocketExtHostConnection.ENV_KEY];\n\tdelete env[MessagePortExtHostConnection.ENV_KEY];\n}\n\n/**\n * Write `connection` into `env` and clean up `env`.\n */\nexport function writeExtHostConnection(connection: ExtHostConnection, env: IProcessEnvironment): void {\n\t// Avoid having two different keys that might introduce amiguity or problems.\n\tclean(env);\n\tconnection.serialize(env);\n}\n\n/**\n * Read `connection` from `env` and clean up `env`.\n */\nexport function readExtHostConnection(env: IProcessEnvironment): ExtHostConnection {\n\tif (env[IPCExtHostConnection.ENV_KEY]) {\n\t\treturn cleanAndReturn(env, new IPCExtHostConnection(env[IPCExtHostConnection.ENV_KEY]!));\n\t}\n\tif (env[SocketExtHostConnection.ENV_KEY]) {\n\t\treturn cleanAndReturn(env, new SocketExtHostConnection());\n\t}\n\tif (env[MessagePortExtHostConnection.ENV_KEY]) {\n\t\treturn cleanAndReturn(env, new MessagePortExtHostConnection());\n\t}\n\tthrow new Error(`No connection information defined in environment!`);\n}\n\nfunction cleanAndReturn(env: IProcessEnvironment, result: ExtHostConnection): ExtHostConnection {\n\tclean(env);\n\treturn result;\n}\n"],
  "mappings": ";;AAKA,SAAS,2BAA2B;AAE7B,IAAW,wBAAX,kBAAWA,2BAAX;AACN,EAAAA,8CAAA,SAAM,KAAN;AACA,EAAAA,8CAAA,YAAS,KAAT;AACA,EAAAA,8CAAA,iBAAc,KAAd;AAHiB,SAAAA;AAAA,GAAA;AASX,MAAM,qBAAqB;AAAA,EAKjC,YACiB,UACf;AADe;AAAA,EACb;AAAA,EAvBL,OAgBkC;AAAA;AAAA;AAAA,EACjC,OAAc,UAAU;AAAA,EAER,OAAO;AAAA,EAMhB,UAAU,KAAgC;AAChD,QAAI,qBAAqB,OAAO,IAAI,KAAK;AAAA,EAC1C;AACD;AAKO,MAAM,wBAAwB;AAAA,EAjCrC,OAiCqC;AAAA;AAAA;AAAA,EACpC,OAAc,UAAU;AAAA,EAER,OAAO;AAAA,EAEhB,UAAU,KAAgC;AAChD,QAAI,wBAAwB,OAAO,IAAI;AAAA,EACxC;AACD;AAKO,MAAM,6BAA6B;AAAA,EA9C1C,OA8C0C;AAAA;AAAA;AAAA,EACzC,OAAc,UAAU;AAAA,EAER,OAAO;AAAA,EAEhB,UAAU,KAAgC;AAChD,QAAI,6BAA6B,OAAO,IAAI;AAAA,EAC7C;AACD;AAIA,SAAS,MAAM,KAAgC;AAC9C,SAAO,IAAI,qBAAqB,OAAO;AACvC,SAAO,IAAI,wBAAwB,OAAO;AAC1C,SAAO,IAAI,6BAA6B,OAAO;AAChD;AAJS;AASF,SAAS,uBAAuB,YAA+B,KAAgC;AAErG,QAAM,GAAG;AACT,aAAW,UAAU,GAAG;AACzB;AAJgB;AAST,SAAS,sBAAsB,KAA6C;AAClF,MAAI,IAAI,qBAAqB,OAAO,GAAG;AACtC,WAAO,eAAe,KAAK,IAAI,qBAAqB,IAAI,qBAAqB,OAAO,CAAE,CAAC;AAAA,EACxF;AACA,MAAI,IAAI,wBAAwB,OAAO,GAAG;AACzC,WAAO,eAAe,KAAK,IAAI,wBAAwB,CAAC;AAAA,EACzD;AACA,MAAI,IAAI,6BAA6B,OAAO,GAAG;AAC9C,WAAO,eAAe,KAAK,IAAI,6BAA6B,CAAC;AAAA,EAC9D;AACA,QAAM,IAAI,MAAM,mDAAmD;AACpE;AAXgB;AAahB,SAAS,eAAe,KAA0B,QAA8C;AAC/F,QAAM,GAAG;AACT,SAAO;AACR;AAHS;",
  "names": ["ExtHostConnectionType"]
}
