{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/extensions/common/workspaceContains.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { promiseWithResolvers } from \"../../../../base/common/async.js\";\nimport {\n\ttype CancellationToken,\n\tCancellationTokenSource,\n} from \"../../../../base/common/cancellation.js\";\nimport * as errors from \"../../../../base/common/errors.js\";\nimport * as resources from \"../../../../base/common/resources.js\";\nimport { URI, type UriComponents } from \"../../../../base/common/uri.js\";\nimport type {\n\tExtensionIdentifier,\n\tIExtensionDescription,\n} from \"../../../../platform/extensions/common/extensions.js\";\nimport {\n\tIInstantiationService,\n\ttype ServicesAccessor,\n} from \"../../../../platform/instantiation/common/instantiation.js\";\nimport type { ILogService } from \"../../../../platform/log/common/log.js\";\nimport { toWorkspaceFolder } from \"../../../../platform/workspace/common/workspace.js\";\nimport { QueryBuilder } from \"../../search/common/queryBuilder.js\";\nimport { ISearchService } from \"../../search/common/search.js\";\n\nconst WORKSPACE_CONTAINS_TIMEOUT = 7000;\n\nexport interface IExtensionActivationHost {\n\treadonly logService: ILogService;\n\treadonly folders: readonly UriComponents[];\n\treadonly forceUsingSearch: boolean;\n\n\texists(uri: URI): Promise<boolean>;\n\tcheckExists(\n\t\tfolders: readonly UriComponents[],\n\t\tincludes: string[],\n\t\ttoken: CancellationToken,\n\t): Promise<boolean>;\n}\n\nexport interface IExtensionActivationResult {\n\tactivationEvent: string;\n}\n\nexport function checkActivateWorkspaceContainsExtension(\n\thost: IExtensionActivationHost,\n\tdesc: IExtensionDescription,\n): Promise<IExtensionActivationResult | undefined> {\n\tconst activationEvents = desc.activationEvents;\n\tif (!activationEvents) {\n\t\treturn Promise.resolve(undefined);\n\t}\n\n\tconst fileNames: string[] = [];\n\tconst globPatterns: string[] = [];\n\n\tfor (const activationEvent of activationEvents) {\n\t\tif (/^workspaceContains:/.test(activationEvent)) {\n\t\t\tconst fileNameOrGlob = activationEvent.substr(\n\t\t\t\t\"workspaceContains:\".length,\n\t\t\t);\n\t\t\tif (\n\t\t\t\tfileNameOrGlob.indexOf(\"*\") >= 0 ||\n\t\t\t\tfileNameOrGlob.indexOf(\"?\") >= 0 ||\n\t\t\t\thost.forceUsingSearch\n\t\t\t) {\n\t\t\t\tglobPatterns.push(fileNameOrGlob);\n\t\t\t} else {\n\t\t\t\tfileNames.push(fileNameOrGlob);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (fileNames.length === 0 && globPatterns.length === 0) {\n\t\treturn Promise.resolve(undefined);\n\t}\n\n\tconst { promise, resolve } = promiseWithResolvers<\n\t\tIExtensionActivationResult | undefined\n\t>();\n\tconst activate = (activationEvent: string) => resolve({ activationEvent });\n\n\tconst fileNamePromise = Promise.all(\n\t\tfileNames.map((fileName) =>\n\t\t\t_activateIfFileName(host, fileName, activate),\n\t\t),\n\t).then(() => {});\n\tconst globPatternPromise = _activateIfGlobPatterns(\n\t\thost,\n\t\tdesc.identifier,\n\t\tglobPatterns,\n\t\tactivate,\n\t);\n\n\tPromise.all([fileNamePromise, globPatternPromise]).then(() => {\n\t\t// when all are done, resolve with undefined (relevant only if it was not activated so far)\n\t\tresolve(undefined);\n\t});\n\n\treturn promise;\n}\n\nasync function _activateIfFileName(\n\thost: IExtensionActivationHost,\n\tfileName: string,\n\tactivate: (activationEvent: string) => void,\n): Promise<void> {\n\t// find exact path\n\tfor (const uri of host.folders) {\n\t\tif (await host.exists(resources.joinPath(URI.revive(uri), fileName))) {\n\t\t\t// the file was found\n\t\t\tactivate(`workspaceContains:${fileName}`);\n\t\t\treturn;\n\t\t}\n\t}\n}\n\nasync function _activateIfGlobPatterns(\n\thost: IExtensionActivationHost,\n\textensionId: ExtensionIdentifier,\n\tglobPatterns: string[],\n\tactivate: (activationEvent: string) => void,\n): Promise<void> {\n\tif (globPatterns.length === 0) {\n\t\treturn Promise.resolve(undefined);\n\t}\n\n\tconst tokenSource = new CancellationTokenSource();\n\tconst searchP = host.checkExists(\n\t\thost.folders,\n\t\tglobPatterns,\n\t\ttokenSource.token,\n\t);\n\n\tconst timer = setTimeout(async () => {\n\t\ttokenSource.cancel();\n\t\thost.logService.info(\n\t\t\t`Not activating extension '${extensionId.value}': Timed out while searching for 'workspaceContains' pattern ${globPatterns.join(\",\")}`,\n\t\t);\n\t}, WORKSPACE_CONTAINS_TIMEOUT);\n\n\tlet exists = false;\n\ttry {\n\t\texists = await searchP;\n\t} catch (err) {\n\t\tif (!errors.isCancellationError(err)) {\n\t\t\terrors.onUnexpectedError(err);\n\t\t}\n\t}\n\n\ttokenSource.dispose();\n\tclearTimeout(timer);\n\n\tif (exists) {\n\t\t// a file was found matching one of the glob patterns\n\t\tactivate(`workspaceContains:${globPatterns.join(\",\")}`);\n\t}\n}\n\nexport function checkGlobFileExists(\n\taccessor: ServicesAccessor,\n\tfolders: readonly UriComponents[],\n\tincludes: string[],\n\ttoken: CancellationToken,\n): Promise<boolean> {\n\tconst instantiationService = accessor.get(IInstantiationService);\n\tconst searchService = accessor.get(ISearchService);\n\tconst queryBuilder = instantiationService.createInstance(QueryBuilder);\n\tconst query = queryBuilder.file(\n\t\tfolders.map((folder) => toWorkspaceFolder(URI.revive(folder))),\n\t\t{\n\t\t\t_reason: \"checkExists\",\n\t\t\tincludePattern: includes,\n\t\t\texists: true,\n\t\t},\n\t);\n\n\treturn searchService.fileSearch(query, token).then(\n\t\t(result) => {\n\t\t\treturn !!result.limitHit;\n\t\t},\n\t\t(err) => {\n\t\t\tif (!errors.isCancellationError(err)) {\n\t\t\t\treturn Promise.reject(err);\n\t\t\t}\n\n\t\t\treturn false;\n\t\t},\n\t);\n}\n"],
  "mappings": "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",
  "names": []
}
