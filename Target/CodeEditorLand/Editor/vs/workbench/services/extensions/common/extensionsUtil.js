import*as c from"../../../../base/common/semver/semver.js";import{localize as o}from"../../../../nls.js";import{ExtensionIdentifierMap as p}from"../../../../platform/extensions/common/extensions.js";function m(r,s,a,f,e){const n=new p;return r.forEach(i=>{const t=n.get(i.identifier);t&&e.warn(o("overwritingExtension","Overwriting extension {0} with {1}.",t.extensionLocation.fsPath,i.extensionLocation.fsPath)),n.set(i.identifier,i)}),s.forEach(i=>{const t=n.get(i.identifier);if(t)if(t.isBuiltin){if(c.gte(t.version,i.version)){e.warn(`Skipping extension ${i.extensionLocation.path} in favour of the builtin extension ${t.extensionLocation.path}.`);return}i.isBuiltin=!0}else e.warn(o("overwritingExtension","Overwriting extension {0} with {1}.",t.extensionLocation.fsPath,i.extensionLocation.fsPath));else if(i.isBuiltin){e.warn(`Skipping obsolete builtin extension ${i.extensionLocation.path}`);return}n.set(i.identifier,i)}),a.forEach(i=>{const t=n.get(i.identifier);t&&e.warn(o("overwritingWithWorkspaceExtension","Overwriting {0} with Workspace Extension {1}.",t.extensionLocation.fsPath,i.extensionLocation.fsPath)),n.set(i.identifier,i)}),f.forEach(i=>{e.info(o("extensionUnderDevelopment","Loading development extension at {0}",i.extensionLocation.fsPath));const t=n.get(i.identifier);t&&t.isBuiltin&&(i.isBuiltin=!0),n.set(i.identifier,i)}),Array.from(n.values())}export{m as dedupExtensions};
