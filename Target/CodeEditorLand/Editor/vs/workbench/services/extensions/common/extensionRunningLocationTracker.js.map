{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/extensions/common/extensionRunningLocationTracker.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Schemas } from \"../../../../base/common/network.js\";\nimport { IConfigurationService } from \"../../../../platform/configuration/common/configuration.js\";\nimport type { ExtensionKind } from \"../../../../platform/environment/common/environment.js\";\nimport {\n\ttype ExtensionIdentifier,\n\tExtensionIdentifierMap,\n\ttype IExtensionDescription,\n} from \"../../../../platform/extensions/common/extensions.js\";\nimport { ILogService } from \"../../../../platform/log/common/log.js\";\nimport { IWorkbenchEnvironmentService } from \"../../environment/common/environmentService.js\";\nimport type { IReadOnlyExtensionDescriptionRegistry } from \"./extensionDescriptionRegistry.js\";\nimport {\n\tExtensionHostKind,\n\tExtensionRunningPreference,\n\ttype IExtensionHostKindPicker,\n\tdetermineExtensionHostKinds,\n} from \"./extensionHostKind.js\";\nimport type { IExtensionHostManager } from \"./extensionHostManagers.js\";\nimport { IExtensionManifestPropertiesService } from \"./extensionManifestPropertiesService.js\";\nimport {\n\ttype ExtensionRunningLocation,\n\tLocalProcessRunningLocation,\n\tLocalWebWorkerRunningLocation,\n\tRemoteRunningLocation,\n} from \"./extensionRunningLocation.js\";\n\nexport class ExtensionRunningLocationTracker {\n\tprivate _runningLocation =\n\t\tnew ExtensionIdentifierMap<ExtensionRunningLocation | null>();\n\tprivate _maxLocalProcessAffinity = 0;\n\tprivate _maxLocalWebWorkerAffinity = 0;\n\n\tpublic get maxLocalProcessAffinity(): number {\n\t\treturn this._maxLocalProcessAffinity;\n\t}\n\n\tpublic get maxLocalWebWorkerAffinity(): number {\n\t\treturn this._maxLocalWebWorkerAffinity;\n\t}\n\n\tconstructor(\n\t\tprivate readonly _registry: IReadOnlyExtensionDescriptionRegistry,\n\t\tprivate readonly _extensionHostKindPicker: IExtensionHostKindPicker,\n\t\t@IWorkbenchEnvironmentService\n\t\tprivate readonly _environmentService: IWorkbenchEnvironmentService,\n\t\t@IConfigurationService\n\t\tprivate readonly _configurationService: IConfigurationService,\n\t\t@ILogService private readonly _logService: ILogService,\n\t\t@IExtensionManifestPropertiesService\n\t\tprivate readonly _extensionManifestPropertiesService: IExtensionManifestPropertiesService,\n\t) {}\n\n\tpublic set(\n\t\textensionId: ExtensionIdentifier,\n\t\trunningLocation: ExtensionRunningLocation,\n\t) {\n\t\tthis._runningLocation.set(extensionId, runningLocation);\n\t}\n\n\tpublic readExtensionKinds(\n\t\textensionDescription: IExtensionDescription,\n\t): ExtensionKind[] {\n\t\tif (\n\t\t\textensionDescription.isUnderDevelopment &&\n\t\t\tthis._environmentService.extensionDevelopmentKind\n\t\t) {\n\t\t\treturn this._environmentService.extensionDevelopmentKind;\n\t\t}\n\n\t\treturn this._extensionManifestPropertiesService.getExtensionKind(\n\t\t\textensionDescription,\n\t\t);\n\t}\n\n\tpublic getRunningLocation(\n\t\textensionId: ExtensionIdentifier,\n\t): ExtensionRunningLocation | null {\n\t\treturn this._runningLocation.get(extensionId) || null;\n\t}\n\n\tpublic filterByRunningLocation(\n\t\textensions: readonly IExtensionDescription[],\n\t\tdesiredRunningLocation: ExtensionRunningLocation,\n\t): IExtensionDescription[] {\n\t\treturn filterExtensionDescriptions(\n\t\t\textensions,\n\t\t\tthis._runningLocation,\n\t\t\t(extRunningLocation) =>\n\t\t\t\tdesiredRunningLocation.equals(extRunningLocation),\n\t\t);\n\t}\n\n\tpublic filterByExtensionHostKind(\n\t\textensions: readonly IExtensionDescription[],\n\t\tdesiredExtensionHostKind: ExtensionHostKind,\n\t): IExtensionDescription[] {\n\t\treturn filterExtensionDescriptions(\n\t\t\textensions,\n\t\t\tthis._runningLocation,\n\t\t\t(extRunningLocation) =>\n\t\t\t\textRunningLocation.kind === desiredExtensionHostKind,\n\t\t);\n\t}\n\n\tpublic filterByExtensionHostManager(\n\t\textensions: readonly IExtensionDescription[],\n\t\textensionHostManager: IExtensionHostManager,\n\t): IExtensionDescription[] {\n\t\treturn filterExtensionDescriptions(\n\t\t\textensions,\n\t\t\tthis._runningLocation,\n\t\t\t(extRunningLocation) =>\n\t\t\t\textensionHostManager.representsRunningLocation(\n\t\t\t\t\textRunningLocation,\n\t\t\t\t),\n\t\t);\n\t}\n\n\tprivate _computeAffinity(\n\t\tinputExtensions: IExtensionDescription[],\n\t\textensionHostKind: ExtensionHostKind,\n\t\tisInitialAllocation: boolean,\n\t): { affinities: ExtensionIdentifierMap<number>; maxAffinity: number } {\n\t\t// Only analyze extensions that can execute\n\t\tconst extensions = new ExtensionIdentifierMap<IExtensionDescription>();\n\t\tfor (const extension of inputExtensions) {\n\t\t\tif (extension.main || extension.browser) {\n\t\t\t\textensions.set(extension.identifier, extension);\n\t\t\t}\n\t\t}\n\t\t// Also add existing extensions of the same kind that can execute\n\t\tfor (const extension of this._registry.getAllExtensionDescriptions()) {\n\t\t\tif (extension.main || extension.browser) {\n\t\t\t\tconst runningLocation = this._runningLocation.get(\n\t\t\t\t\textension.identifier,\n\t\t\t\t);\n\t\t\t\tif (\n\t\t\t\t\trunningLocation &&\n\t\t\t\t\trunningLocation.kind === extensionHostKind\n\t\t\t\t) {\n\t\t\t\t\textensions.set(extension.identifier, extension);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Initially, each extension belongs to its own group\n\t\tconst groups = new ExtensionIdentifierMap<number>();\n\t\tlet groupNumber = 0;\n\t\tfor (const [_, extension] of extensions) {\n\t\t\tgroups.set(extension.identifier, ++groupNumber);\n\t\t}\n\n\t\tconst changeGroup = (from: number, to: number) => {\n\t\t\tfor (const [key, group] of groups) {\n\t\t\t\tif (group === from) {\n\t\t\t\t\tgroups.set(key, to);\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\t// We will group things together when there are dependencies\n\t\tfor (const [_, extension] of extensions) {\n\t\t\tif (!extension.extensionDependencies) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tconst myGroup = groups.get(extension.identifier)!;\n\t\t\tfor (const depId of extension.extensionDependencies) {\n\t\t\t\tconst depGroup = groups.get(depId);\n\t\t\t\tif (!depGroup) {\n\t\t\t\t\t// probably can't execute, so it has no impact\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tif (depGroup === myGroup) {\n\t\t\t\t\t// already in the same group\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tchangeGroup(depGroup, myGroup);\n\t\t\t}\n\t\t}\n\n\t\t// Initialize with existing affinities\n\t\tconst resultingAffinities = new Map<number, number>();\n\t\tlet lastAffinity = 0;\n\t\tfor (const [_, extension] of extensions) {\n\t\t\tconst runningLocation = this._runningLocation.get(\n\t\t\t\textension.identifier,\n\t\t\t);\n\t\t\tif (runningLocation) {\n\t\t\t\tconst group = groups.get(extension.identifier)!;\n\t\t\t\tresultingAffinities.set(group, runningLocation.affinity);\n\t\t\t\tlastAffinity = Math.max(lastAffinity, runningLocation.affinity);\n\t\t\t}\n\t\t}\n\n\t\t// When doing extension host debugging, we will ignore the configured affinity\n\t\t// because we can currently debug a single extension host\n\t\tif (!this._environmentService.isExtensionDevelopment) {\n\t\t\t// Go through each configured affinity and try to accomodate it\n\t\t\tconst configuredAffinities =\n\t\t\t\tthis._configurationService.getValue<\n\t\t\t\t\t{ [extensionId: string]: number } | undefined\n\t\t\t\t>(\"extensions.experimental.affinity\") || {};\n\t\t\tconst configuredExtensionIds = Object.keys(configuredAffinities);\n\t\t\tconst configuredAffinityToResultingAffinity = new Map<\n\t\t\t\tnumber,\n\t\t\t\tnumber\n\t\t\t>();\n\t\t\tfor (const extensionId of configuredExtensionIds) {\n\t\t\t\tconst configuredAffinity = configuredAffinities[extensionId];\n\t\t\t\tif (\n\t\t\t\t\ttypeof configuredAffinity !== \"number\" ||\n\t\t\t\t\tconfiguredAffinity <= 0 ||\n\t\t\t\t\tMath.floor(configuredAffinity) !== configuredAffinity\n\t\t\t\t) {\n\t\t\t\t\tthis._logService.info(\n\t\t\t\t\t\t`Ignoring configured affinity for '${extensionId}' because the value is not a positive integer.`,\n\t\t\t\t\t);\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tconst group = groups.get(extensionId);\n\t\t\t\tif (!group) {\n\t\t\t\t\t// The extension is not known or cannot execute for this extension host kind\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tconst affinity1 = resultingAffinities.get(group);\n\t\t\t\tif (affinity1) {\n\t\t\t\t\t// Affinity for this group is already established\n\t\t\t\t\tconfiguredAffinityToResultingAffinity.set(\n\t\t\t\t\t\tconfiguredAffinity,\n\t\t\t\t\t\taffinity1,\n\t\t\t\t\t);\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tconst affinity2 =\n\t\t\t\t\tconfiguredAffinityToResultingAffinity.get(\n\t\t\t\t\t\tconfiguredAffinity,\n\t\t\t\t\t);\n\t\t\t\tif (affinity2) {\n\t\t\t\t\t// Affinity for this configuration is already established\n\t\t\t\t\tresultingAffinities.set(group, affinity2);\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tif (!isInitialAllocation) {\n\t\t\t\t\tthis._logService.info(\n\t\t\t\t\t\t`Ignoring configured affinity for '${extensionId}' because extension host(s) are already running. Reload window.`,\n\t\t\t\t\t);\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tconst affinity3 = ++lastAffinity;\n\t\t\t\tconfiguredAffinityToResultingAffinity.set(\n\t\t\t\t\tconfiguredAffinity,\n\t\t\t\t\taffinity3,\n\t\t\t\t);\n\t\t\t\tresultingAffinities.set(group, affinity3);\n\t\t\t}\n\t\t}\n\n\t\tconst result = new ExtensionIdentifierMap<number>();\n\t\tfor (const extension of inputExtensions) {\n\t\t\tconst group = groups.get(extension.identifier) || 0;\n\t\t\tconst affinity = resultingAffinities.get(group) || 0;\n\t\t\tresult.set(extension.identifier, affinity);\n\t\t}\n\n\t\tif (lastAffinity > 0 && isInitialAllocation) {\n\t\t\tfor (let affinity = 1; affinity <= lastAffinity; affinity++) {\n\t\t\t\tconst extensionIds: ExtensionIdentifier[] = [];\n\t\t\t\tfor (const extension of inputExtensions) {\n\t\t\t\t\tif (result.get(extension.identifier) === affinity) {\n\t\t\t\t\t\textensionIds.push(extension.identifier);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tthis._logService.info(\n\t\t\t\t\t`Placing extension(s) ${extensionIds.map((e) => e.value).join(\", \")} on a separate extension host.`,\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\treturn { affinities: result, maxAffinity: lastAffinity };\n\t}\n\n\tpublic computeRunningLocation(\n\t\tlocalExtensions: IExtensionDescription[],\n\t\tremoteExtensions: IExtensionDescription[],\n\t\tisInitialAllocation: boolean,\n\t): ExtensionIdentifierMap<ExtensionRunningLocation | null> {\n\t\treturn this._doComputeRunningLocation(\n\t\t\tthis._runningLocation,\n\t\t\tlocalExtensions,\n\t\t\tremoteExtensions,\n\t\t\tisInitialAllocation,\n\t\t).runningLocation;\n\t}\n\n\tprivate _doComputeRunningLocation(\n\t\texistingRunningLocation: ExtensionIdentifierMap<ExtensionRunningLocation | null>,\n\t\tlocalExtensions: IExtensionDescription[],\n\t\tremoteExtensions: IExtensionDescription[],\n\t\tisInitialAllocation: boolean,\n\t): {\n\t\trunningLocation: ExtensionIdentifierMap<ExtensionRunningLocation | null>;\n\t\tmaxLocalProcessAffinity: number;\n\t\tmaxLocalWebWorkerAffinity: number;\n\t} {\n\t\t// Skip extensions that have an existing running location\n\t\tlocalExtensions = localExtensions.filter(\n\t\t\t(extension) => !existingRunningLocation.has(extension.identifier),\n\t\t);\n\t\tremoteExtensions = remoteExtensions.filter(\n\t\t\t(extension) => !existingRunningLocation.has(extension.identifier),\n\t\t);\n\n\t\tconst extensionHostKinds = determineExtensionHostKinds(\n\t\t\tlocalExtensions,\n\t\t\tremoteExtensions,\n\t\t\t(extension) => this.readExtensionKinds(extension),\n\t\t\t(\n\t\t\t\textensionId,\n\t\t\t\textensionKinds,\n\t\t\t\tisInstalledLocally,\n\t\t\t\tisInstalledRemotely,\n\t\t\t\tpreference,\n\t\t\t) =>\n\t\t\t\tthis._extensionHostKindPicker.pickExtensionHostKind(\n\t\t\t\t\textensionId,\n\t\t\t\t\textensionKinds,\n\t\t\t\t\tisInstalledLocally,\n\t\t\t\t\tisInstalledRemotely,\n\t\t\t\t\tpreference,\n\t\t\t\t),\n\t\t);\n\n\t\tconst extensions = new ExtensionIdentifierMap<IExtensionDescription>();\n\t\tfor (const extension of localExtensions) {\n\t\t\textensions.set(extension.identifier, extension);\n\t\t}\n\t\tfor (const extension of remoteExtensions) {\n\t\t\textensions.set(extension.identifier, extension);\n\t\t}\n\n\t\tconst result =\n\t\t\tnew ExtensionIdentifierMap<ExtensionRunningLocation | null>();\n\t\tconst localProcessExtensions: IExtensionDescription[] = [];\n\t\tconst localWebWorkerExtensions: IExtensionDescription[] = [];\n\t\tfor (const [extensionIdKey, extensionHostKind] of extensionHostKinds) {\n\t\t\tlet runningLocation: ExtensionRunningLocation | null = null;\n\t\t\tif (extensionHostKind === ExtensionHostKind.LocalProcess) {\n\t\t\t\tconst extensionDescription = extensions.get(extensionIdKey);\n\t\t\t\tif (extensionDescription) {\n\t\t\t\t\tlocalProcessExtensions.push(extensionDescription);\n\t\t\t\t}\n\t\t\t} else if (extensionHostKind === ExtensionHostKind.LocalWebWorker) {\n\t\t\t\tconst extensionDescription = extensions.get(extensionIdKey);\n\t\t\t\tif (extensionDescription) {\n\t\t\t\t\tlocalWebWorkerExtensions.push(extensionDescription);\n\t\t\t\t}\n\t\t\t} else if (extensionHostKind === ExtensionHostKind.Remote) {\n\t\t\t\trunningLocation = new RemoteRunningLocation();\n\t\t\t}\n\t\t\tresult.set(extensionIdKey, runningLocation);\n\t\t}\n\n\t\tconst { affinities, maxAffinity } = this._computeAffinity(\n\t\t\tlocalProcessExtensions,\n\t\t\tExtensionHostKind.LocalProcess,\n\t\t\tisInitialAllocation,\n\t\t);\n\t\tfor (const extension of localProcessExtensions) {\n\t\t\tconst affinity = affinities.get(extension.identifier) || 0;\n\t\t\tresult.set(\n\t\t\t\textension.identifier,\n\t\t\t\tnew LocalProcessRunningLocation(affinity),\n\t\t\t);\n\t\t}\n\t\tconst {\n\t\t\taffinities: localWebWorkerAffinities,\n\t\t\tmaxAffinity: maxLocalWebWorkerAffinity,\n\t\t} = this._computeAffinity(\n\t\t\tlocalWebWorkerExtensions,\n\t\t\tExtensionHostKind.LocalWebWorker,\n\t\t\tisInitialAllocation,\n\t\t);\n\t\tfor (const extension of localWebWorkerExtensions) {\n\t\t\tconst affinity =\n\t\t\t\tlocalWebWorkerAffinities.get(extension.identifier) || 0;\n\t\t\tresult.set(\n\t\t\t\textension.identifier,\n\t\t\t\tnew LocalWebWorkerRunningLocation(affinity),\n\t\t\t);\n\t\t}\n\n\t\t// Add extensions that already have an existing running location\n\t\tfor (const [\n\t\t\textensionIdKey,\n\t\t\trunningLocation,\n\t\t] of existingRunningLocation) {\n\t\t\tif (runningLocation) {\n\t\t\t\tresult.set(extensionIdKey, runningLocation);\n\t\t\t}\n\t\t}\n\n\t\treturn {\n\t\t\trunningLocation: result,\n\t\t\tmaxLocalProcessAffinity: maxAffinity,\n\t\t\tmaxLocalWebWorkerAffinity: maxLocalWebWorkerAffinity,\n\t\t};\n\t}\n\n\tpublic initializeRunningLocation(\n\t\tlocalExtensions: IExtensionDescription[],\n\t\tremoteExtensions: IExtensionDescription[],\n\t): void {\n\t\tconst {\n\t\t\trunningLocation,\n\t\t\tmaxLocalProcessAffinity,\n\t\t\tmaxLocalWebWorkerAffinity,\n\t\t} = this._doComputeRunningLocation(\n\t\t\tthis._runningLocation,\n\t\t\tlocalExtensions,\n\t\t\tremoteExtensions,\n\t\t\ttrue,\n\t\t);\n\t\tthis._runningLocation = runningLocation;\n\t\tthis._maxLocalProcessAffinity = maxLocalProcessAffinity;\n\t\tthis._maxLocalWebWorkerAffinity = maxLocalWebWorkerAffinity;\n\t}\n\n\t/**\n\t * Returns the running locations for the removed extensions.\n\t */\n\tpublic deltaExtensions(\n\t\ttoAdd: IExtensionDescription[],\n\t\ttoRemove: ExtensionIdentifier[],\n\t): ExtensionIdentifierMap<ExtensionRunningLocation | null> {\n\t\t// Remove old running location\n\t\tconst removedRunningLocation =\n\t\t\tnew ExtensionIdentifierMap<ExtensionRunningLocation | null>();\n\t\tfor (const extensionId of toRemove) {\n\t\t\tconst extensionKey = extensionId;\n\t\t\tremovedRunningLocation.set(\n\t\t\t\textensionKey,\n\t\t\t\tthis._runningLocation.get(extensionKey) || null,\n\t\t\t);\n\t\t\tthis._runningLocation.delete(extensionKey);\n\t\t}\n\n\t\t// Determine new running location\n\t\tthis._updateRunningLocationForAddedExtensions(toAdd);\n\n\t\treturn removedRunningLocation;\n\t}\n\n\t/**\n\t * Update `this._runningLocation` with running locations for newly enabled/installed extensions.\n\t */\n\tprivate _updateRunningLocationForAddedExtensions(\n\t\ttoAdd: IExtensionDescription[],\n\t): void {\n\t\t// Determine new running location\n\t\tconst localProcessExtensions: IExtensionDescription[] = [];\n\t\tconst localWebWorkerExtensions: IExtensionDescription[] = [];\n\t\tfor (const extension of toAdd) {\n\t\t\tconst extensionKind = this.readExtensionKinds(extension);\n\t\t\tconst isRemote =\n\t\t\t\textension.extensionLocation.scheme === Schemas.vscodeRemote;\n\t\t\tconst extensionHostKind =\n\t\t\t\tthis._extensionHostKindPicker.pickExtensionHostKind(\n\t\t\t\t\textension.identifier,\n\t\t\t\t\textensionKind,\n\t\t\t\t\t!isRemote,\n\t\t\t\t\tisRemote,\n\t\t\t\t\tExtensionRunningPreference.None,\n\t\t\t\t);\n\t\t\tlet runningLocation: ExtensionRunningLocation | null = null;\n\t\t\tif (extensionHostKind === ExtensionHostKind.LocalProcess) {\n\t\t\t\tlocalProcessExtensions.push(extension);\n\t\t\t} else if (extensionHostKind === ExtensionHostKind.LocalWebWorker) {\n\t\t\t\tlocalWebWorkerExtensions.push(extension);\n\t\t\t} else if (extensionHostKind === ExtensionHostKind.Remote) {\n\t\t\t\trunningLocation = new RemoteRunningLocation();\n\t\t\t}\n\t\t\tthis._runningLocation.set(extension.identifier, runningLocation);\n\t\t}\n\n\t\tconst { affinities } = this._computeAffinity(\n\t\t\tlocalProcessExtensions,\n\t\t\tExtensionHostKind.LocalProcess,\n\t\t\tfalse,\n\t\t);\n\t\tfor (const extension of localProcessExtensions) {\n\t\t\tconst affinity = affinities.get(extension.identifier) || 0;\n\t\t\tthis._runningLocation.set(\n\t\t\t\textension.identifier,\n\t\t\t\tnew LocalProcessRunningLocation(affinity),\n\t\t\t);\n\t\t}\n\n\t\tconst { affinities: webWorkerExtensionsAffinities } =\n\t\t\tthis._computeAffinity(\n\t\t\t\tlocalWebWorkerExtensions,\n\t\t\t\tExtensionHostKind.LocalWebWorker,\n\t\t\t\tfalse,\n\t\t\t);\n\t\tfor (const extension of localWebWorkerExtensions) {\n\t\t\tconst affinity =\n\t\t\t\twebWorkerExtensionsAffinities.get(extension.identifier) || 0;\n\t\t\tthis._runningLocation.set(\n\t\t\t\textension.identifier,\n\t\t\t\tnew LocalWebWorkerRunningLocation(affinity),\n\t\t\t);\n\t\t}\n\t}\n}\n\nexport function filterExtensionDescriptions(\n\textensions: readonly IExtensionDescription[],\n\trunningLocation: ExtensionIdentifierMap<ExtensionRunningLocation | null>,\n\tpredicate: (extRunningLocation: ExtensionRunningLocation) => boolean,\n): IExtensionDescription[] {\n\treturn extensions.filter((ext) => {\n\t\tconst extRunningLocation = runningLocation.get(ext.identifier);\n\t\treturn extRunningLocation && predicate(extRunningLocation);\n\t});\n}\n\nexport function filterExtensionIdentifiers(\n\textensions: readonly ExtensionIdentifier[],\n\trunningLocation: ExtensionIdentifierMap<ExtensionRunningLocation | null>,\n\tpredicate: (extRunningLocation: ExtensionRunningLocation) => boolean,\n): ExtensionIdentifier[] {\n\treturn extensions.filter((ext) => {\n\t\tconst extRunningLocation = runningLocation.get(ext);\n\t\treturn extRunningLocation && predicate(extRunningLocation);\n\t});\n}\n"],
  "mappings": "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",
  "names": []
}
