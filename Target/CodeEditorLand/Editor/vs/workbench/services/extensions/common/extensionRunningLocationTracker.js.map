{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/extensions/common/extensionRunningLocationTracker.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Schemas } from '../../../../base/common/network.js';\nimport { IConfigurationService } from '../../../../platform/configuration/common/configuration.js';\nimport { ExtensionKind } from '../../../../platform/environment/common/environment.js';\nimport { ExtensionIdentifier, ExtensionIdentifierMap, IExtensionDescription } from '../../../../platform/extensions/common/extensions.js';\nimport { ILogService } from '../../../../platform/log/common/log.js';\nimport { IWorkbenchEnvironmentService } from '../../environment/common/environmentService.js';\nimport { IReadOnlyExtensionDescriptionRegistry } from './extensionDescriptionRegistry.js';\nimport { ExtensionHostKind, ExtensionRunningPreference, IExtensionHostKindPicker, determineExtensionHostKinds } from './extensionHostKind.js';\nimport { IExtensionHostManager } from './extensionHostManagers.js';\nimport { IExtensionManifestPropertiesService } from './extensionManifestPropertiesService.js';\nimport { ExtensionRunningLocation, LocalProcessRunningLocation, LocalWebWorkerRunningLocation, RemoteRunningLocation } from './extensionRunningLocation.js';\n\nexport class ExtensionRunningLocationTracker {\n\n\tprivate _runningLocation = new ExtensionIdentifierMap<ExtensionRunningLocation | null>();\n\tprivate _maxLocalProcessAffinity: number = 0;\n\tprivate _maxLocalWebWorkerAffinity: number = 0;\n\n\tpublic get maxLocalProcessAffinity(): number {\n\t\treturn this._maxLocalProcessAffinity;\n\t}\n\n\tpublic get maxLocalWebWorkerAffinity(): number {\n\t\treturn this._maxLocalWebWorkerAffinity;\n\t}\n\n\tconstructor(\n\t\tprivate readonly _registry: IReadOnlyExtensionDescriptionRegistry,\n\t\tprivate readonly _extensionHostKindPicker: IExtensionHostKindPicker,\n\t\t@IWorkbenchEnvironmentService private readonly _environmentService: IWorkbenchEnvironmentService,\n\t\t@IConfigurationService private readonly _configurationService: IConfigurationService,\n\t\t@ILogService private readonly _logService: ILogService,\n\t\t@IExtensionManifestPropertiesService private readonly _extensionManifestPropertiesService: IExtensionManifestPropertiesService,\n\t) { }\n\n\tpublic set(extensionId: ExtensionIdentifier, runningLocation: ExtensionRunningLocation) {\n\t\tthis._runningLocation.set(extensionId, runningLocation);\n\t}\n\n\tpublic readExtensionKinds(extensionDescription: IExtensionDescription): ExtensionKind[] {\n\t\tif (extensionDescription.isUnderDevelopment && this._environmentService.extensionDevelopmentKind) {\n\t\t\treturn this._environmentService.extensionDevelopmentKind;\n\t\t}\n\n\t\treturn this._extensionManifestPropertiesService.getExtensionKind(extensionDescription);\n\t}\n\n\tpublic getRunningLocation(extensionId: ExtensionIdentifier): ExtensionRunningLocation | null {\n\t\treturn this._runningLocation.get(extensionId) || null;\n\t}\n\n\tpublic filterByRunningLocation(extensions: readonly IExtensionDescription[], desiredRunningLocation: ExtensionRunningLocation): IExtensionDescription[] {\n\t\treturn filterExtensionDescriptions(extensions, this._runningLocation, extRunningLocation => desiredRunningLocation.equals(extRunningLocation));\n\t}\n\n\tpublic filterByExtensionHostKind(extensions: readonly IExtensionDescription[], desiredExtensionHostKind: ExtensionHostKind): IExtensionDescription[] {\n\t\treturn filterExtensionDescriptions(extensions, this._runningLocation, extRunningLocation => extRunningLocation.kind === desiredExtensionHostKind);\n\t}\n\n\tpublic filterByExtensionHostManager(extensions: readonly IExtensionDescription[], extensionHostManager: IExtensionHostManager): IExtensionDescription[] {\n\t\treturn filterExtensionDescriptions(extensions, this._runningLocation, extRunningLocation => extensionHostManager.representsRunningLocation(extRunningLocation));\n\t}\n\n\tprivate _computeAffinity(inputExtensions: IExtensionDescription[], extensionHostKind: ExtensionHostKind, isInitialAllocation: boolean): { affinities: ExtensionIdentifierMap<number>; maxAffinity: number } {\n\t\t// Only analyze extensions that can execute\n\t\tconst extensions = new ExtensionIdentifierMap<IExtensionDescription>();\n\t\tfor (const extension of inputExtensions) {\n\t\t\tif (extension.main || extension.browser) {\n\t\t\t\textensions.set(extension.identifier, extension);\n\t\t\t}\n\t\t}\n\t\t// Also add existing extensions of the same kind that can execute\n\t\tfor (const extension of this._registry.getAllExtensionDescriptions()) {\n\t\t\tif (extension.main || extension.browser) {\n\t\t\t\tconst runningLocation = this._runningLocation.get(extension.identifier);\n\t\t\t\tif (runningLocation && runningLocation.kind === extensionHostKind) {\n\t\t\t\t\textensions.set(extension.identifier, extension);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Initially, each extension belongs to its own group\n\t\tconst groups = new ExtensionIdentifierMap<number>();\n\t\tlet groupNumber = 0;\n\t\tfor (const [_, extension] of extensions) {\n\t\t\tgroups.set(extension.identifier, ++groupNumber);\n\t\t}\n\n\t\tconst changeGroup = (from: number, to: number) => {\n\t\t\tfor (const [key, group] of groups) {\n\t\t\t\tif (group === from) {\n\t\t\t\t\tgroups.set(key, to);\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\t// We will group things together when there are dependencies\n\t\tfor (const [_, extension] of extensions) {\n\t\t\tif (!extension.extensionDependencies) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tconst myGroup = groups.get(extension.identifier)!;\n\t\t\tfor (const depId of extension.extensionDependencies) {\n\t\t\t\tconst depGroup = groups.get(depId);\n\t\t\t\tif (!depGroup) {\n\t\t\t\t\t// probably can't execute, so it has no impact\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tif (depGroup === myGroup) {\n\t\t\t\t\t// already in the same group\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tchangeGroup(depGroup, myGroup);\n\t\t\t}\n\t\t}\n\n\t\t// Initialize with existing affinities\n\t\tconst resultingAffinities = new Map<number, number>();\n\t\tlet lastAffinity = 0;\n\t\tfor (const [_, extension] of extensions) {\n\t\t\tconst runningLocation = this._runningLocation.get(extension.identifier);\n\t\t\tif (runningLocation) {\n\t\t\t\tconst group = groups.get(extension.identifier)!;\n\t\t\t\tresultingAffinities.set(group, runningLocation.affinity);\n\t\t\t\tlastAffinity = Math.max(lastAffinity, runningLocation.affinity);\n\t\t\t}\n\t\t}\n\n\t\t// When doing extension host debugging, we will ignore the configured affinity\n\t\t// because we can currently debug a single extension host\n\t\tif (!this._environmentService.isExtensionDevelopment) {\n\t\t\t// Go through each configured affinity and try to accomodate it\n\t\t\tconst configuredAffinities = this._configurationService.getValue<{ [extensionId: string]: number } | undefined>('extensions.experimental.affinity') || {};\n\t\t\tconst configuredExtensionIds = Object.keys(configuredAffinities);\n\t\t\tconst configuredAffinityToResultingAffinity = new Map<number, number>();\n\t\t\tfor (const extensionId of configuredExtensionIds) {\n\t\t\t\tconst configuredAffinity = configuredAffinities[extensionId];\n\t\t\t\tif (typeof configuredAffinity !== 'number' || configuredAffinity <= 0 || Math.floor(configuredAffinity) !== configuredAffinity) {\n\t\t\t\t\tthis._logService.info(`Ignoring configured affinity for '${extensionId}' because the value is not a positive integer.`);\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tconst group = groups.get(extensionId);\n\t\t\t\tif (!group) {\n\t\t\t\t\t// The extension is not known or cannot execute for this extension host kind\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tconst affinity1 = resultingAffinities.get(group);\n\t\t\t\tif (affinity1) {\n\t\t\t\t\t// Affinity for this group is already established\n\t\t\t\t\tconfiguredAffinityToResultingAffinity.set(configuredAffinity, affinity1);\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tconst affinity2 = configuredAffinityToResultingAffinity.get(configuredAffinity);\n\t\t\t\tif (affinity2) {\n\t\t\t\t\t// Affinity for this configuration is already established\n\t\t\t\t\tresultingAffinities.set(group, affinity2);\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tif (!isInitialAllocation) {\n\t\t\t\t\tthis._logService.info(`Ignoring configured affinity for '${extensionId}' because extension host(s) are already running. Reload window.`);\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tconst affinity3 = ++lastAffinity;\n\t\t\t\tconfiguredAffinityToResultingAffinity.set(configuredAffinity, affinity3);\n\t\t\t\tresultingAffinities.set(group, affinity3);\n\t\t\t}\n\t\t}\n\n\t\tconst result = new ExtensionIdentifierMap<number>();\n\t\tfor (const extension of inputExtensions) {\n\t\t\tconst group = groups.get(extension.identifier) || 0;\n\t\t\tconst affinity = resultingAffinities.get(group) || 0;\n\t\t\tresult.set(extension.identifier, affinity);\n\t\t}\n\n\t\tif (lastAffinity > 0 && isInitialAllocation) {\n\t\t\tfor (let affinity = 1; affinity <= lastAffinity; affinity++) {\n\t\t\t\tconst extensionIds: ExtensionIdentifier[] = [];\n\t\t\t\tfor (const extension of inputExtensions) {\n\t\t\t\t\tif (result.get(extension.identifier) === affinity) {\n\t\t\t\t\t\textensionIds.push(extension.identifier);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tthis._logService.info(`Placing extension(s) ${extensionIds.map(e => e.value).join(', ')} on a separate extension host.`);\n\t\t\t}\n\t\t}\n\n\t\treturn { affinities: result, maxAffinity: lastAffinity };\n\t}\n\n\tpublic computeRunningLocation(localExtensions: IExtensionDescription[], remoteExtensions: IExtensionDescription[], isInitialAllocation: boolean): ExtensionIdentifierMap<ExtensionRunningLocation | null> {\n\t\treturn this._doComputeRunningLocation(this._runningLocation, localExtensions, remoteExtensions, isInitialAllocation).runningLocation;\n\t}\n\n\tprivate _doComputeRunningLocation(existingRunningLocation: ExtensionIdentifierMap<ExtensionRunningLocation | null>, localExtensions: IExtensionDescription[], remoteExtensions: IExtensionDescription[], isInitialAllocation: boolean): { runningLocation: ExtensionIdentifierMap<ExtensionRunningLocation | null>; maxLocalProcessAffinity: number; maxLocalWebWorkerAffinity: number } {\n\t\t// Skip extensions that have an existing running location\n\t\tlocalExtensions = localExtensions.filter(extension => !existingRunningLocation.has(extension.identifier));\n\t\tremoteExtensions = remoteExtensions.filter(extension => !existingRunningLocation.has(extension.identifier));\n\n\t\tconst extensionHostKinds = determineExtensionHostKinds(\n\t\t\tlocalExtensions,\n\t\t\tremoteExtensions,\n\t\t\t(extension) => this.readExtensionKinds(extension),\n\t\t\t(extensionId, extensionKinds, isInstalledLocally, isInstalledRemotely, preference) => this._extensionHostKindPicker.pickExtensionHostKind(extensionId, extensionKinds, isInstalledLocally, isInstalledRemotely, preference)\n\t\t);\n\n\t\tconst extensions = new ExtensionIdentifierMap<IExtensionDescription>();\n\t\tfor (const extension of localExtensions) {\n\t\t\textensions.set(extension.identifier, extension);\n\t\t}\n\t\tfor (const extension of remoteExtensions) {\n\t\t\textensions.set(extension.identifier, extension);\n\t\t}\n\n\t\tconst result = new ExtensionIdentifierMap<ExtensionRunningLocation | null>();\n\t\tconst localProcessExtensions: IExtensionDescription[] = [];\n\t\tconst localWebWorkerExtensions: IExtensionDescription[] = [];\n\t\tfor (const [extensionIdKey, extensionHostKind] of extensionHostKinds) {\n\t\t\tlet runningLocation: ExtensionRunningLocation | null = null;\n\t\t\tif (extensionHostKind === ExtensionHostKind.LocalProcess) {\n\t\t\t\tconst extensionDescription = extensions.get(extensionIdKey);\n\t\t\t\tif (extensionDescription) {\n\t\t\t\t\tlocalProcessExtensions.push(extensionDescription);\n\t\t\t\t}\n\t\t\t} else if (extensionHostKind === ExtensionHostKind.LocalWebWorker) {\n\t\t\t\tconst extensionDescription = extensions.get(extensionIdKey);\n\t\t\t\tif (extensionDescription) {\n\t\t\t\t\tlocalWebWorkerExtensions.push(extensionDescription);\n\t\t\t\t}\n\t\t\t} else if (extensionHostKind === ExtensionHostKind.Remote) {\n\t\t\t\trunningLocation = new RemoteRunningLocation();\n\t\t\t}\n\t\t\tresult.set(extensionIdKey, runningLocation);\n\t\t}\n\n\t\tconst { affinities, maxAffinity } = this._computeAffinity(localProcessExtensions, ExtensionHostKind.LocalProcess, isInitialAllocation);\n\t\tfor (const extension of localProcessExtensions) {\n\t\t\tconst affinity = affinities.get(extension.identifier) || 0;\n\t\t\tresult.set(extension.identifier, new LocalProcessRunningLocation(affinity));\n\t\t}\n\t\tconst { affinities: localWebWorkerAffinities, maxAffinity: maxLocalWebWorkerAffinity } = this._computeAffinity(localWebWorkerExtensions, ExtensionHostKind.LocalWebWorker, isInitialAllocation);\n\t\tfor (const extension of localWebWorkerExtensions) {\n\t\t\tconst affinity = localWebWorkerAffinities.get(extension.identifier) || 0;\n\t\t\tresult.set(extension.identifier, new LocalWebWorkerRunningLocation(affinity));\n\t\t}\n\n\t\t// Add extensions that already have an existing running location\n\t\tfor (const [extensionIdKey, runningLocation] of existingRunningLocation) {\n\t\t\tif (runningLocation) {\n\t\t\t\tresult.set(extensionIdKey, runningLocation);\n\t\t\t}\n\t\t}\n\n\t\treturn { runningLocation: result, maxLocalProcessAffinity: maxAffinity, maxLocalWebWorkerAffinity: maxLocalWebWorkerAffinity };\n\t}\n\n\tpublic initializeRunningLocation(localExtensions: IExtensionDescription[], remoteExtensions: IExtensionDescription[]): void {\n\t\tconst { runningLocation, maxLocalProcessAffinity, maxLocalWebWorkerAffinity } = this._doComputeRunningLocation(this._runningLocation, localExtensions, remoteExtensions, true);\n\t\tthis._runningLocation = runningLocation;\n\t\tthis._maxLocalProcessAffinity = maxLocalProcessAffinity;\n\t\tthis._maxLocalWebWorkerAffinity = maxLocalWebWorkerAffinity;\n\t}\n\n\t/**\n\t * Returns the running locations for the removed extensions.\n\t */\n\tpublic deltaExtensions(toAdd: IExtensionDescription[], toRemove: ExtensionIdentifier[]): ExtensionIdentifierMap<ExtensionRunningLocation | null> {\n\t\t// Remove old running location\n\t\tconst removedRunningLocation = new ExtensionIdentifierMap<ExtensionRunningLocation | null>();\n\t\tfor (const extensionId of toRemove) {\n\t\t\tconst extensionKey = extensionId;\n\t\t\tremovedRunningLocation.set(extensionKey, this._runningLocation.get(extensionKey) || null);\n\t\t\tthis._runningLocation.delete(extensionKey);\n\t\t}\n\n\t\t// Determine new running location\n\t\tthis._updateRunningLocationForAddedExtensions(toAdd);\n\n\t\treturn removedRunningLocation;\n\t}\n\n\t/**\n\t * Update `this._runningLocation` with running locations for newly enabled/installed extensions.\n\t */\n\tprivate _updateRunningLocationForAddedExtensions(toAdd: IExtensionDescription[]): void {\n\t\t// Determine new running location\n\t\tconst localProcessExtensions: IExtensionDescription[] = [];\n\t\tconst localWebWorkerExtensions: IExtensionDescription[] = [];\n\t\tfor (const extension of toAdd) {\n\t\t\tconst extensionKind = this.readExtensionKinds(extension);\n\t\t\tconst isRemote = extension.extensionLocation.scheme === Schemas.vscodeRemote;\n\t\t\tconst extensionHostKind = this._extensionHostKindPicker.pickExtensionHostKind(extension.identifier, extensionKind, !isRemote, isRemote, ExtensionRunningPreference.None);\n\t\t\tlet runningLocation: ExtensionRunningLocation | null = null;\n\t\t\tif (extensionHostKind === ExtensionHostKind.LocalProcess) {\n\t\t\t\tlocalProcessExtensions.push(extension);\n\t\t\t} else if (extensionHostKind === ExtensionHostKind.LocalWebWorker) {\n\t\t\t\tlocalWebWorkerExtensions.push(extension);\n\t\t\t} else if (extensionHostKind === ExtensionHostKind.Remote) {\n\t\t\t\trunningLocation = new RemoteRunningLocation();\n\t\t\t}\n\t\t\tthis._runningLocation.set(extension.identifier, runningLocation);\n\t\t}\n\n\t\tconst { affinities } = this._computeAffinity(localProcessExtensions, ExtensionHostKind.LocalProcess, false);\n\t\tfor (const extension of localProcessExtensions) {\n\t\t\tconst affinity = affinities.get(extension.identifier) || 0;\n\t\t\tthis._runningLocation.set(extension.identifier, new LocalProcessRunningLocation(affinity));\n\t\t}\n\n\t\tconst { affinities: webWorkerExtensionsAffinities } = this._computeAffinity(localWebWorkerExtensions, ExtensionHostKind.LocalWebWorker, false);\n\t\tfor (const extension of localWebWorkerExtensions) {\n\t\t\tconst affinity = webWorkerExtensionsAffinities.get(extension.identifier) || 0;\n\t\t\tthis._runningLocation.set(extension.identifier, new LocalWebWorkerRunningLocation(affinity));\n\t\t}\n\t}\n}\n\nexport function filterExtensionDescriptions(extensions: readonly IExtensionDescription[], runningLocation: ExtensionIdentifierMap<ExtensionRunningLocation | null>, predicate: (extRunningLocation: ExtensionRunningLocation) => boolean): IExtensionDescription[] {\n\treturn extensions.filter((ext) => {\n\t\tconst extRunningLocation = runningLocation.get(ext.identifier);\n\t\treturn extRunningLocation && predicate(extRunningLocation);\n\t});\n}\n\nexport function filterExtensionIdentifiers(extensions: readonly ExtensionIdentifier[], runningLocation: ExtensionIdentifierMap<ExtensionRunningLocation | null>, predicate: (extRunningLocation: ExtensionRunningLocation) => boolean): ExtensionIdentifier[] {\n\treturn extensions.filter((ext) => {\n\t\tconst extRunningLocation = runningLocation.get(ext);\n\t\treturn extRunningLocation && predicate(extRunningLocation);\n\t});\n}\n"],
  "mappings": ";;;;;;;;;;;;AAKA,SAAS,eAAe;AACxB,SAAS,6BAA6B;AACtC,SAAS,qBAAqB;AAC9B,SAAS,qBAAqB,wBAAwB,6BAA6B;AACnF,SAAS,mBAAmB;AAC5B,SAAS,oCAAoC;AAC7C,SAAS,6CAA6C;AACtD,SAAS,mBAAmB,4BAA4B,0BAA0B,mCAAmC;AACrH,SAAS,6BAA6B;AACtC,SAAS,2CAA2C;AACpD,SAAS,0BAA0B,6BAA6B,+BAA+B,6BAA6B;AAErH,IAAM,kCAAN,MAAsC;AAAA,EAc5C,YACkB,WACA,0BAC8B,qBACP,uBACV,aACwB,qCACrD;AANgB;AACA;AAC8B;AACP;AACV;AACwB;AAAA,EACnD;AAAA,EAtCL,OAiB6C;AAAA;AAAA;AAAA,EAEpC,mBAAmB,IAAI,uBAAwD;AAAA,EAC/E,2BAAmC;AAAA,EACnC,6BAAqC;AAAA,EAE7C,IAAW,0BAAkC;AAC5C,WAAO,KAAK;AAAA,EACb;AAAA,EAEA,IAAW,4BAAoC;AAC9C,WAAO,KAAK;AAAA,EACb;AAAA,EAWO,IAAI,aAAkC,iBAA2C;AACvF,SAAK,iBAAiB,IAAI,aAAa,eAAe;AAAA,EACvD;AAAA,EAEO,mBAAmB,sBAA8D;AACvF,QAAI,qBAAqB,sBAAsB,KAAK,oBAAoB,0BAA0B;AACjG,aAAO,KAAK,oBAAoB;AAAA,IACjC;AAEA,WAAO,KAAK,oCAAoC,iBAAiB,oBAAoB;AAAA,EACtF;AAAA,EAEO,mBAAmB,aAAmE;AAC5F,WAAO,KAAK,iBAAiB,IAAI,WAAW,KAAK;AAAA,EAClD;AAAA,EAEO,wBAAwB,YAA8C,wBAA2E;AACvJ,WAAO,4BAA4B,YAAY,KAAK,kBAAkB,wBAAsB,uBAAuB,OAAO,kBAAkB,CAAC;AAAA,EAC9I;AAAA,EAEO,0BAA0B,YAA8C,0BAAsE;AACpJ,WAAO,4BAA4B,YAAY,KAAK,kBAAkB,wBAAsB,mBAAmB,SAAS,wBAAwB;AAAA,EACjJ;AAAA,EAEO,6BAA6B,YAA8C,sBAAsE;AACvJ,WAAO,4BAA4B,YAAY,KAAK,kBAAkB,wBAAsB,qBAAqB,0BAA0B,kBAAkB,CAAC;AAAA,EAC/J;AAAA,EAEQ,iBAAiB,iBAA0C,mBAAsC,qBAAmG;AAE3M,UAAM,aAAa,IAAI,uBAA8C;AACrE,eAAW,aAAa,iBAAiB;AACxC,UAAI,UAAU,QAAQ,UAAU,SAAS;AACxC,mBAAW,IAAI,UAAU,YAAY,SAAS;AAAA,MAC/C;AAAA,IACD;AAEA,eAAW,aAAa,KAAK,UAAU,4BAA4B,GAAG;AACrE,UAAI,UAAU,QAAQ,UAAU,SAAS;AACxC,cAAM,kBAAkB,KAAK,iBAAiB,IAAI,UAAU,UAAU;AACtE,YAAI,mBAAmB,gBAAgB,SAAS,mBAAmB;AAClE,qBAAW,IAAI,UAAU,YAAY,SAAS;AAAA,QAC/C;AAAA,MACD;AAAA,IACD;AAGA,UAAM,SAAS,IAAI,uBAA+B;AAClD,QAAI,cAAc;AAClB,eAAW,CAAC,GAAG,SAAS,KAAK,YAAY;AACxC,aAAO,IAAI,UAAU,YAAY,EAAE,WAAW;AAAA,IAC/C;AAEA,UAAM,cAAc,wBAAC,MAAc,OAAe;AACjD,iBAAW,CAAC,KAAK,KAAK,KAAK,QAAQ;AAClC,YAAI,UAAU,MAAM;AACnB,iBAAO,IAAI,KAAK,EAAE;AAAA,QACnB;AAAA,MACD;AAAA,IACD,GANoB;AASpB,eAAW,CAAC,GAAG,SAAS,KAAK,YAAY;AACxC,UAAI,CAAC,UAAU,uBAAuB;AACrC;AAAA,MACD;AACA,YAAM,UAAU,OAAO,IAAI,UAAU,UAAU;AAC/C,iBAAW,SAAS,UAAU,uBAAuB;AACpD,cAAM,WAAW,OAAO,IAAI,KAAK;AACjC,YAAI,CAAC,UAAU;AAEd;AAAA,QACD;AAEA,YAAI,aAAa,SAAS;AAEzB;AAAA,QACD;AAEA,oBAAY,UAAU,OAAO;AAAA,MAC9B;AAAA,IACD;AAGA,UAAM,sBAAsB,oBAAI,IAAoB;AACpD,QAAI,eAAe;AACnB,eAAW,CAAC,GAAG,SAAS,KAAK,YAAY;AACxC,YAAM,kBAAkB,KAAK,iBAAiB,IAAI,UAAU,UAAU;AACtE,UAAI,iBAAiB;AACpB,cAAM,QAAQ,OAAO,IAAI,UAAU,UAAU;AAC7C,4BAAoB,IAAI,OAAO,gBAAgB,QAAQ;AACvD,uBAAe,KAAK,IAAI,cAAc,gBAAgB,QAAQ;AAAA,MAC/D;AAAA,IACD;AAIA,QAAI,CAAC,KAAK,oBAAoB,wBAAwB;AAErD,YAAM,uBAAuB,KAAK,sBAAsB,SAAwD,kCAAkC,KAAK,CAAC;AACxJ,YAAM,yBAAyB,OAAO,KAAK,oBAAoB;AAC/D,YAAM,wCAAwC,oBAAI,IAAoB;AACtE,iBAAW,eAAe,wBAAwB;AACjD,cAAM,qBAAqB,qBAAqB,WAAW;AAC3D,YAAI,OAAO,uBAAuB,YAAY,sBAAsB,KAAK,KAAK,MAAM,kBAAkB,MAAM,oBAAoB;AAC/H,eAAK,YAAY,KAAK,qCAAqC,WAAW,gDAAgD;AACtH;AAAA,QACD;AACA,cAAM,QAAQ,OAAO,IAAI,WAAW;AACpC,YAAI,CAAC,OAAO;AAEX;AAAA,QACD;AAEA,cAAM,YAAY,oBAAoB,IAAI,KAAK;AAC/C,YAAI,WAAW;AAEd,gDAAsC,IAAI,oBAAoB,SAAS;AACvE;AAAA,QACD;AAEA,cAAM,YAAY,sCAAsC,IAAI,kBAAkB;AAC9E,YAAI,WAAW;AAEd,8BAAoB,IAAI,OAAO,SAAS;AACxC;AAAA,QACD;AAEA,YAAI,CAAC,qBAAqB;AACzB,eAAK,YAAY,KAAK,qCAAqC,WAAW,iEAAiE;AACvI;AAAA,QACD;AAEA,cAAM,YAAY,EAAE;AACpB,8CAAsC,IAAI,oBAAoB,SAAS;AACvE,4BAAoB,IAAI,OAAO,SAAS;AAAA,MACzC;AAAA,IACD;AAEA,UAAM,SAAS,IAAI,uBAA+B;AAClD,eAAW,aAAa,iBAAiB;AACxC,YAAM,QAAQ,OAAO,IAAI,UAAU,UAAU,KAAK;AAClD,YAAM,WAAW,oBAAoB,IAAI,KAAK,KAAK;AACnD,aAAO,IAAI,UAAU,YAAY,QAAQ;AAAA,IAC1C;AAEA,QAAI,eAAe,KAAK,qBAAqB;AAC5C,eAAS,WAAW,GAAG,YAAY,cAAc,YAAY;AAC5D,cAAM,eAAsC,CAAC;AAC7C,mBAAW,aAAa,iBAAiB;AACxC,cAAI,OAAO,IAAI,UAAU,UAAU,MAAM,UAAU;AAClD,yBAAa,KAAK,UAAU,UAAU;AAAA,UACvC;AAAA,QACD;AACA,aAAK,YAAY,KAAK,wBAAwB,aAAa,IAAI,OAAK,EAAE,KAAK,EAAE,KAAK,IAAI,CAAC,gCAAgC;AAAA,MACxH;AAAA,IACD;AAEA,WAAO,EAAE,YAAY,QAAQ,aAAa,aAAa;AAAA,EACxD;AAAA,EAEO,uBAAuB,iBAA0C,kBAA2C,qBAAuF;AACzM,WAAO,KAAK,0BAA0B,KAAK,kBAAkB,iBAAiB,kBAAkB,mBAAmB,EAAE;AAAA,EACtH;AAAA,EAEQ,0BAA0B,yBAAkF,iBAA0C,kBAA2C,qBAAgL;AAExX,sBAAkB,gBAAgB,OAAO,eAAa,CAAC,wBAAwB,IAAI,UAAU,UAAU,CAAC;AACxG,uBAAmB,iBAAiB,OAAO,eAAa,CAAC,wBAAwB,IAAI,UAAU,UAAU,CAAC;AAE1G,UAAM,qBAAqB;AAAA,MAC1B;AAAA,MACA;AAAA,MACA,CAAC,cAAc,KAAK,mBAAmB,SAAS;AAAA,MAChD,CAAC,aAAa,gBAAgB,oBAAoB,qBAAqB,eAAe,KAAK,yBAAyB,sBAAsB,aAAa,gBAAgB,oBAAoB,qBAAqB,UAAU;AAAA,IAC3N;AAEA,UAAM,aAAa,IAAI,uBAA8C;AACrE,eAAW,aAAa,iBAAiB;AACxC,iBAAW,IAAI,UAAU,YAAY,SAAS;AAAA,IAC/C;AACA,eAAW,aAAa,kBAAkB;AACzC,iBAAW,IAAI,UAAU,YAAY,SAAS;AAAA,IAC/C;AAEA,UAAM,SAAS,IAAI,uBAAwD;AAC3E,UAAM,yBAAkD,CAAC;AACzD,UAAM,2BAAoD,CAAC;AAC3D,eAAW,CAAC,gBAAgB,iBAAiB,KAAK,oBAAoB;AACrE,UAAI,kBAAmD;AACvD,UAAI,sBAAsB,kBAAkB,cAAc;AACzD,cAAM,uBAAuB,WAAW,IAAI,cAAc;AAC1D,YAAI,sBAAsB;AACzB,iCAAuB,KAAK,oBAAoB;AAAA,QACjD;AAAA,MACD,WAAW,sBAAsB,kBAAkB,gBAAgB;AAClE,cAAM,uBAAuB,WAAW,IAAI,cAAc;AAC1D,YAAI,sBAAsB;AACzB,mCAAyB,KAAK,oBAAoB;AAAA,QACnD;AAAA,MACD,WAAW,sBAAsB,kBAAkB,QAAQ;AAC1D,0BAAkB,IAAI,sBAAsB;AAAA,MAC7C;AACA,aAAO,IAAI,gBAAgB,eAAe;AAAA,IAC3C;AAEA,UAAM,EAAE,YAAY,YAAY,IAAI,KAAK,iBAAiB,wBAAwB,kBAAkB,cAAc,mBAAmB;AACrI,eAAW,aAAa,wBAAwB;AAC/C,YAAM,WAAW,WAAW,IAAI,UAAU,UAAU,KAAK;AACzD,aAAO,IAAI,UAAU,YAAY,IAAI,4BAA4B,QAAQ,CAAC;AAAA,IAC3E;AACA,UAAM,EAAE,YAAY,0BAA0B,aAAa,0BAA0B,IAAI,KAAK,iBAAiB,0BAA0B,kBAAkB,gBAAgB,mBAAmB;AAC9L,eAAW,aAAa,0BAA0B;AACjD,YAAM,WAAW,yBAAyB,IAAI,UAAU,UAAU,KAAK;AACvE,aAAO,IAAI,UAAU,YAAY,IAAI,8BAA8B,QAAQ,CAAC;AAAA,IAC7E;AAGA,eAAW,CAAC,gBAAgB,eAAe,KAAK,yBAAyB;AACxE,UAAI,iBAAiB;AACpB,eAAO,IAAI,gBAAgB,eAAe;AAAA,MAC3C;AAAA,IACD;AAEA,WAAO,EAAE,iBAAiB,QAAQ,yBAAyB,aAAa,0BAAqD;AAAA,EAC9H;AAAA,EAEO,0BAA0B,iBAA0C,kBAAiD;AAC3H,UAAM,EAAE,iBAAiB,yBAAyB,0BAA0B,IAAI,KAAK,0BAA0B,KAAK,kBAAkB,iBAAiB,kBAAkB,IAAI;AAC7K,SAAK,mBAAmB;AACxB,SAAK,2BAA2B;AAChC,SAAK,6BAA6B;AAAA,EACnC;AAAA;AAAA;AAAA;AAAA,EAKO,gBAAgB,OAAgC,UAA0F;AAEhJ,UAAM,yBAAyB,IAAI,uBAAwD;AAC3F,eAAW,eAAe,UAAU;AACnC,YAAM,eAAe;AACrB,6BAAuB,IAAI,cAAc,KAAK,iBAAiB,IAAI,YAAY,KAAK,IAAI;AACxF,WAAK,iBAAiB,OAAO,YAAY;AAAA,IAC1C;AAGA,SAAK,yCAAyC,KAAK;AAEnD,WAAO;AAAA,EACR;AAAA;AAAA;AAAA;AAAA,EAKQ,yCAAyC,OAAsC;AAEtF,UAAM,yBAAkD,CAAC;AACzD,UAAM,2BAAoD,CAAC;AAC3D,eAAW,aAAa,OAAO;AAC9B,YAAM,gBAAgB,KAAK,mBAAmB,SAAS;AACvD,YAAM,WAAW,UAAU,kBAAkB,WAAW,QAAQ;AAChE,YAAM,oBAAoB,KAAK,yBAAyB,sBAAsB,UAAU,YAAY,eAAe,CAAC,UAAU,UAAU,2BAA2B,IAAI;AACvK,UAAI,kBAAmD;AACvD,UAAI,sBAAsB,kBAAkB,cAAc;AACzD,+BAAuB,KAAK,SAAS;AAAA,MACtC,WAAW,sBAAsB,kBAAkB,gBAAgB;AAClE,iCAAyB,KAAK,SAAS;AAAA,MACxC,WAAW,sBAAsB,kBAAkB,QAAQ;AAC1D,0BAAkB,IAAI,sBAAsB;AAAA,MAC7C;AACA,WAAK,iBAAiB,IAAI,UAAU,YAAY,eAAe;AAAA,IAChE;AAEA,UAAM,EAAE,WAAW,IAAI,KAAK,iBAAiB,wBAAwB,kBAAkB,cAAc,KAAK;AAC1G,eAAW,aAAa,wBAAwB;AAC/C,YAAM,WAAW,WAAW,IAAI,UAAU,UAAU,KAAK;AACzD,WAAK,iBAAiB,IAAI,UAAU,YAAY,IAAI,4BAA4B,QAAQ,CAAC;AAAA,IAC1F;AAEA,UAAM,EAAE,YAAY,8BAA8B,IAAI,KAAK,iBAAiB,0BAA0B,kBAAkB,gBAAgB,KAAK;AAC7I,eAAW,aAAa,0BAA0B;AACjD,YAAM,WAAW,8BAA8B,IAAI,UAAU,UAAU,KAAK;AAC5E,WAAK,iBAAiB,IAAI,UAAU,YAAY,IAAI,8BAA8B,QAAQ,CAAC;AAAA,IAC5F;AAAA,EACD;AACD;AArTa,kCAAN;AAAA,EAiBJ;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,GApBU;AAuTN,SAAS,4BAA4B,YAA8C,iBAA0E,WAA+F;AAClQ,SAAO,WAAW,OAAO,CAAC,QAAQ;AACjC,UAAM,qBAAqB,gBAAgB,IAAI,IAAI,UAAU;AAC7D,WAAO,sBAAsB,UAAU,kBAAkB;AAAA,EAC1D,CAAC;AACF;AALgB;AAOT,SAAS,2BAA2B,YAA4C,iBAA0E,WAA6F;AAC7P,SAAO,WAAW,OAAO,CAAC,QAAQ;AACjC,UAAM,qBAAqB,gBAAgB,IAAI,GAAG;AAClD,WAAO,sBAAsB,UAAU,kBAAkB;AAAA,EAC1D,CAAC;AACF;AALgB;",
  "names": []
}
