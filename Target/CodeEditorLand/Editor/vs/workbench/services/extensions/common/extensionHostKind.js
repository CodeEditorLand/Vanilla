import"../../../../../vs/platform/environment/common/environment.js";import{ExtensionIdentifier as m}from"../../../../../vs/platform/extensions/common/extensions.js";var h=(e=>(e[e.LocalProcess=1]="LocalProcess",e[e.LocalWebWorker=2]="LocalWebWorker",e[e.Remote=3]="Remote",e))(h||{});function R(o){if(o===null)return"None";switch(o){case 1:return"LocalProcess";case 2:return"LocalWebWorker";case 3:return"Remote"}}var y=(e=>(e[e.None=0]="None",e[e.Local=1]="Local",e[e.Remote=2]="Remote",e))(y||{});function L(o){switch(o){case 0:return"None";case 1:return"Local";case 2:return"Remote"}}function W(o,i,t,e){const s=f(o,t),u=f(i,t),l=new Map,x=n=>{if(l.has(n.key))return;const c=s.get(n.key)||null,a=u.get(n.key)||null,r=new I(c,a);l.set(r.key,r)};s.forEach(n=>x(n)),u.forEach(n=>x(n));const E=new Map;return l.forEach(n=>{const c=!!n.local,a=!!n.remote,r=!!(n.local&&n.local.isUnderDevelopment),p=!!(n.remote&&n.remote.isUnderDevelopment);let d=0;r&&!p?d=1:p&&!r&&(d=2),E.set(n.key,e(n.identifier,n.kind,c,a,d))}),E}function f(o,i){const t=new Map;return o.forEach(e=>{const s=new K(e,i(e));t.set(s.key,s)}),t}class K{constructor(i,t){this.desc=i;this.kind=t}get key(){return m.toKey(this.desc.identifier)}get isUnderDevelopment(){return this.desc.isUnderDevelopment}}class I{constructor(i,t){this.local=i;this.remote=t}get key(){return this.local?this.local.key:this.remote.key}get identifier(){return this.local?this.local.desc.identifier:this.remote.desc.identifier}get kind(){return this.local?this.local.kind:this.remote.kind}}export{h as ExtensionHostKind,y as ExtensionRunningPreference,W as determineExtensionHostKinds,R as extensionHostKindToString,L as extensionRunningPreferenceToString};
