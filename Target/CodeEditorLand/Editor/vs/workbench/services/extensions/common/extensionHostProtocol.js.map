{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/extensions/common/extensionHostProtocol.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { VSBuffer } from '../../../../base/common/buffer.js';\nimport { URI, UriComponents, UriDto } from '../../../../base/common/uri.js';\nimport { ExtensionIdentifier, IExtensionDescription } from '../../../../platform/extensions/common/extensions.js';\nimport { ILoggerResource, LogLevel } from '../../../../platform/log/common/log.js';\nimport { IRemoteConnectionData } from '../../../../platform/remote/common/remoteAuthorityResolver.js';\n\nexport interface IExtensionDescriptionSnapshot {\n\treadonly versionId: number;\n\treadonly allExtensions: IExtensionDescription[];\n\treadonly activationEvents: { [extensionId: string]: string[] };\n\treadonly myExtensions: ExtensionIdentifier[];\n}\n\nexport interface IExtensionDescriptionDelta {\n\treadonly versionId: number;\n\treadonly toRemove: ExtensionIdentifier[];\n\treadonly toAdd: IExtensionDescription[];\n\treadonly addActivationEvents: { [extensionId: string]: string[] };\n\treadonly myToRemove: ExtensionIdentifier[];\n\treadonly myToAdd: ExtensionIdentifier[];\n}\n\nexport interface IExtensionHostInitData {\n\tversion: string;\n\tquality: string | undefined;\n\tcommit?: string;\n\t/**\n\t * When set to `0`, no polling for the parent process still running will happen.\n\t */\n\tparentPid: number | 0;\n\tenvironment: IEnvironment;\n\tworkspace?: IStaticWorkspaceData | null;\n\textensions: IExtensionDescriptionSnapshot;\n\tnlsBaseUrl?: URI;\n\ttelemetryInfo: {\n\t\treadonly sessionId: string;\n\t\treadonly machineId: string;\n\t\treadonly sqmId: string;\n\t\treadonly devDeviceId: string;\n\t\treadonly firstSessionDate: string;\n\t\treadonly msftInternal?: boolean;\n\t};\n\tlogLevel: LogLevel;\n\tloggers: UriDto<ILoggerResource>[];\n\tlogsLocation: URI;\n\tautoStart: boolean;\n\tremote: { isRemote: boolean; authority: string | undefined; connectionData: IRemoteConnectionData | null };\n\tconsoleForward: { includeStack: boolean; logNative: boolean };\n\tuiKind: UIKind;\n\tmessagePorts?: ReadonlyMap<string, MessagePortLike>;\n}\n\nexport interface IEnvironment {\n\tisExtensionDevelopmentDebug: boolean;\n\tappName: string;\n\tappHost: string;\n\tappRoot?: URI;\n\tappLanguage: string;\n\textensionTelemetryLogResource: URI;\n\tisExtensionTelemetryLoggingOnly: boolean;\n\tappUriScheme: string;\n\textensionDevelopmentLocationURI?: URI[];\n\textensionTestsLocationURI?: URI;\n\tglobalStorageHome: URI;\n\tworkspaceStorageHome: URI;\n\tuseHostProxy?: boolean;\n\tskipWorkspaceStorageLock?: boolean;\n\textensionLogLevel?: [string, string][];\n}\n\nexport interface IStaticWorkspaceData {\n\tid: string;\n\tname: string;\n\ttransient?: boolean;\n\tconfiguration?: UriComponents | null;\n\tisUntitled?: boolean | null;\n}\n\nexport interface MessagePortLike {\n\tpostMessage(message: any, transfer?: any[]): void;\n\taddEventListener(type: 'message', listener: (e: any) => any): void;\n\tremoveEventListener(type: 'message', listener: (e: any) => any): void;\n\tstart(): void;\n}\n\nexport enum UIKind {\n\tDesktop = 1,\n\tWeb = 2\n}\n\nexport const enum ExtensionHostExitCode {\n\t// nodejs uses codes 1-13 and exit codes >128 are signal exits\n\tVersionMismatch = 55,\n\tUnexpectedError = 81,\n}\n\nexport interface IExtHostReadyMessage {\n\ttype: 'VSCODE_EXTHOST_IPC_READY';\n}\n\nexport interface IExtHostSocketMessage {\n\ttype: 'VSCODE_EXTHOST_IPC_SOCKET';\n\tinitialDataChunk: string;\n\tskipWebSocketFrames: boolean;\n\tpermessageDeflate: boolean;\n\tinflateBytes: string;\n}\n\nexport interface IExtHostReduceGraceTimeMessage {\n\ttype: 'VSCODE_EXTHOST_IPC_REDUCE_GRACE_TIME';\n}\n\nexport const enum MessageType {\n\tInitialized,\n\tReady,\n\tTerminate\n}\n\nexport function createMessageOfType(type: MessageType): VSBuffer {\n\tconst result = VSBuffer.alloc(1);\n\n\tswitch (type) {\n\t\tcase MessageType.Initialized: result.writeUInt8(1, 0); break;\n\t\tcase MessageType.Ready: result.writeUInt8(2, 0); break;\n\t\tcase MessageType.Terminate: result.writeUInt8(3, 0); break;\n\t}\n\n\treturn result;\n}\n\nexport function isMessageOfType(message: VSBuffer, type: MessageType): boolean {\n\tif (message.byteLength !== 1) {\n\t\treturn false;\n\t}\n\n\tswitch (message.readUInt8(0)) {\n\t\tcase 1: return type === MessageType.Initialized;\n\t\tcase 2: return type === MessageType.Ready;\n\t\tcase 3: return type === MessageType.Terminate;\n\t\tdefault: return false;\n\t}\n}\n\nexport const enum NativeLogMarkers {\n\tStart = 'START_NATIVE_LOG',\n\tEnd = 'END_NATIVE_LOG',\n}\n"],
  "mappings": ";;AAKA,SAAS,gBAAgB;AACzB,SAAS,KAAK,eAAe,cAAc;AAC3C,SAAS,qBAAqB,6BAA6B;AAC3D,SAAS,iBAAiB,gBAAgB;AAC1C,SAAS,6BAA6B;AAiF/B,IAAK,SAAL,kBAAKA,YAAL;AACN,EAAAA,gBAAA,aAAU,KAAV;AACA,EAAAA,gBAAA,SAAM,KAAN;AAFW,SAAAA;AAAA,GAAA;AAKL,IAAW,wBAAX,kBAAWC,2BAAX;AAEN,EAAAA,8CAAA,qBAAkB,MAAlB;AACA,EAAAA,8CAAA,qBAAkB,MAAlB;AAHiB,SAAAA;AAAA,GAAA;AAsBX,IAAW,cAAX,kBAAWC,iBAAX;AACN,EAAAA,0BAAA;AACA,EAAAA,0BAAA;AACA,EAAAA,0BAAA;AAHiB,SAAAA;AAAA,GAAA;AAMX,SAAS,oBAAoB,MAA6B;AAChE,QAAM,SAAS,SAAS,MAAM,CAAC;AAE/B,UAAQ,MAAM;AAAA,IACb,KAAK;AAAyB,aAAO,WAAW,GAAG,CAAC;AAAG;AAAA,IACvD,KAAK;AAAmB,aAAO,WAAW,GAAG,CAAC;AAAG;AAAA,IACjD,KAAK;AAAuB,aAAO,WAAW,GAAG,CAAC;AAAG;AAAA,EACtD;AAEA,SAAO;AACR;AAVgB;AAYT,SAAS,gBAAgB,SAAmB,MAA4B;AAC9E,MAAI,QAAQ,eAAe,GAAG;AAC7B,WAAO;AAAA,EACR;AAEA,UAAQ,QAAQ,UAAU,CAAC,GAAG;AAAA,IAC7B,KAAK;AAAG,aAAO,SAAS;AAAA,IACxB,KAAK;AAAG,aAAO,SAAS;AAAA,IACxB,KAAK;AAAG,aAAO,SAAS;AAAA,IACxB;AAAS,aAAO;AAAA,EACjB;AACD;AAXgB;AAaT,IAAW,mBAAX,kBAAWC,sBAAX;AACN,EAAAA,kBAAA,WAAQ;AACR,EAAAA,kBAAA,SAAM;AAFW,SAAAA;AAAA,GAAA;",
  "names": ["UIKind", "ExtensionHostExitCode", "MessageType", "NativeLogMarkers"]
}
