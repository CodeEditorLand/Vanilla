{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/extensions/common/proxyIdentifier.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport type { VSBuffer } from \"../../../../base/common/buffer.js\";\nimport type { CancellationToken } from \"../../../../base/common/cancellation.js\";\n\nexport interface IRPCProtocol {\n\t/**\n\t * Returns a proxy to an object addressable/named in the extension host process or in the renderer process.\n\t */\n\tgetProxy<T>(identifier: ProxyIdentifier<T>): Proxied<T>;\n\n\t/**\n\t * Register manually created instance.\n\t */\n\tset<T, R extends T>(identifier: ProxyIdentifier<T>, instance: R): R;\n\n\t/**\n\t * Assert these identifiers are already registered via `.set`.\n\t */\n\tassertRegistered(identifiers: ProxyIdentifier<any>[]): void;\n\n\t/**\n\t * Wait for the write buffer (if applicable) to become empty.\n\t */\n\tdrain(): Promise<void>;\n\n\tdispose(): void;\n}\n\nexport class ProxyIdentifier<T> {\n\tpublic static count = 0;\n\t_proxyIdentifierBrand: void = undefined;\n\n\tpublic readonly sid: string;\n\tpublic readonly nid: number;\n\n\tconstructor(sid: string) {\n\t\tthis.sid = sid;\n\t\tthis.nid = ++ProxyIdentifier.count;\n\t}\n}\n\nconst identifiers: ProxyIdentifier<any>[] = [];\n\nexport function createProxyIdentifier<T>(\n\tidentifier: string,\n): ProxyIdentifier<T> {\n\tconst result = new ProxyIdentifier<T>(identifier);\n\tidentifiers[result.nid] = result;\n\treturn result;\n}\n\n/**\n * Mapped-type that replaces all JSONable-types with their toJSON-result type\n */\nexport type Dto<T> = T extends { toJSON(): infer U }\n\t? U\n\t: T extends VSBuffer // VSBuffer is understood by rpc-logic\n\t\t? T\n\t\t: T extends CancellationToken // CancellationToken is understood by rpc-logic\n\t\t\t? T\n\t\t\t: T extends Function // functions are dropped during JSON-stringify\n\t\t\t\t? never\n\t\t\t\t: T extends object // recurse\n\t\t\t\t\t? { [k in keyof T]: Dto<T[k]> }\n\t\t\t\t\t: T;\n\nexport type Proxied<T> = {\n\t[K in keyof T]: T[K] extends (...args: infer A) => infer R\n\t\t? (...args: { [K in keyof A]: Dto<A[K]> }) => Promise<Dto<Awaited<R>>>\n\t\t: never;\n};\n\nexport function getStringIdentifierForProxy(nid: number): string {\n\treturn identifiers[nid].sid;\n}\n\n/**\n * Marks the object as containing buffers that should be serialized more efficiently.\n */\nexport class SerializableObjectWithBuffers<T> {\n\tconstructor(public readonly value: T) {}\n}\n"],
  "mappings": ";;AAgCO,MAAM,gBAAmB;AAAA,EAhChC,OAgCgC;AAAA;AAAA;AAAA,EAC/B,OAAc,QAAQ;AAAA,EACtB,wBAA8B;AAAA,EAEd;AAAA,EACA;AAAA,EAEhB,YAAY,KAAa;AACxB,SAAK,MAAM;AACX,SAAK,MAAM,EAAE,gBAAgB;AAAA,EAC9B;AACD;AAEA,MAAM,cAAsC,CAAC;AAEtC,SAAS,sBACf,YACqB;AACrB,QAAM,SAAS,IAAI,gBAAmB,UAAU;AAChD,cAAY,OAAO,GAAG,IAAI;AAC1B,SAAO;AACR;AANgB;AA6BT,SAAS,4BAA4B,KAAqB;AAChE,SAAO,YAAY,GAAG,EAAE;AACzB;AAFgB;AAOT,MAAM,8BAAiC;AAAA,EAC7C,YAA4B,OAAU;AAAV;AAAA,EAAW;AAAA,EApFxC,OAmF8C;AAAA;AAAA;AAE9C;",
  "names": []
}
