{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/extensions/common/extensionHostKind.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { ExtensionKind } from '../../../../platform/environment/common/environment.js';\nimport { ExtensionIdentifier, IExtensionDescription } from '../../../../platform/extensions/common/extensions.js';\n\nexport const enum ExtensionHostKind {\n\tLocalProcess = 1,\n\tLocalWebWorker = 2,\n\tRemote = 3\n}\n\nexport function extensionHostKindToString(kind: ExtensionHostKind | null): string {\n\tif (kind === null) {\n\t\treturn 'None';\n\t}\n\tswitch (kind) {\n\t\tcase ExtensionHostKind.LocalProcess: return 'LocalProcess';\n\t\tcase ExtensionHostKind.LocalWebWorker: return 'LocalWebWorker';\n\t\tcase ExtensionHostKind.Remote: return 'Remote';\n\t}\n}\n\nexport const enum ExtensionRunningPreference {\n\tNone,\n\tLocal,\n\tRemote\n}\n\nexport function extensionRunningPreferenceToString(preference: ExtensionRunningPreference) {\n\tswitch (preference) {\n\t\tcase ExtensionRunningPreference.None:\n\t\t\treturn 'None';\n\t\tcase ExtensionRunningPreference.Local:\n\t\t\treturn 'Local';\n\t\tcase ExtensionRunningPreference.Remote:\n\t\t\treturn 'Remote';\n\t}\n}\n\nexport interface IExtensionHostKindPicker {\n\tpickExtensionHostKind(extensionId: ExtensionIdentifier, extensionKinds: ExtensionKind[], isInstalledLocally: boolean, isInstalledRemotely: boolean, preference: ExtensionRunningPreference): ExtensionHostKind | null;\n}\n\nexport function determineExtensionHostKinds(\n\t_localExtensions: IExtensionDescription[],\n\t_remoteExtensions: IExtensionDescription[],\n\tgetExtensionKind: (extensionDescription: IExtensionDescription) => ExtensionKind[],\n\tpickExtensionHostKind: (extensionId: ExtensionIdentifier, extensionKinds: ExtensionKind[], isInstalledLocally: boolean, isInstalledRemotely: boolean, preference: ExtensionRunningPreference) => ExtensionHostKind | null\n): Map<string, ExtensionHostKind | null> {\n\tconst localExtensions = toExtensionWithKind(_localExtensions, getExtensionKind);\n\tconst remoteExtensions = toExtensionWithKind(_remoteExtensions, getExtensionKind);\n\n\tconst allExtensions = new Map<string, ExtensionInfo>();\n\tconst collectExtension = (ext: ExtensionWithKind) => {\n\t\tif (allExtensions.has(ext.key)) {\n\t\t\treturn;\n\t\t}\n\t\tconst local = localExtensions.get(ext.key) || null;\n\t\tconst remote = remoteExtensions.get(ext.key) || null;\n\t\tconst info = new ExtensionInfo(local, remote);\n\t\tallExtensions.set(info.key, info);\n\t};\n\tlocalExtensions.forEach((ext) => collectExtension(ext));\n\tremoteExtensions.forEach((ext) => collectExtension(ext));\n\n\tconst extensionHostKinds = new Map<string, ExtensionHostKind | null>();\n\tallExtensions.forEach((ext) => {\n\t\tconst isInstalledLocally = Boolean(ext.local);\n\t\tconst isInstalledRemotely = Boolean(ext.remote);\n\n\t\tconst isLocallyUnderDevelopment = Boolean(ext.local && ext.local.isUnderDevelopment);\n\t\tconst isRemotelyUnderDevelopment = Boolean(ext.remote && ext.remote.isUnderDevelopment);\n\n\t\tlet preference = ExtensionRunningPreference.None;\n\t\tif (isLocallyUnderDevelopment && !isRemotelyUnderDevelopment) {\n\t\t\tpreference = ExtensionRunningPreference.Local;\n\t\t} else if (isRemotelyUnderDevelopment && !isLocallyUnderDevelopment) {\n\t\t\tpreference = ExtensionRunningPreference.Remote;\n\t\t}\n\n\t\textensionHostKinds.set(ext.key, pickExtensionHostKind(ext.identifier, ext.kind, isInstalledLocally, isInstalledRemotely, preference));\n\t});\n\n\treturn extensionHostKinds;\n}\n\nfunction toExtensionWithKind(\n\textensions: IExtensionDescription[],\n\tgetExtensionKind: (extensionDescription: IExtensionDescription) => ExtensionKind[]\n): Map<string, ExtensionWithKind> {\n\tconst result = new Map<string, ExtensionWithKind>();\n\textensions.forEach((desc) => {\n\t\tconst ext = new ExtensionWithKind(desc, getExtensionKind(desc));\n\t\tresult.set(ext.key, ext);\n\t});\n\treturn result;\n}\n\nclass ExtensionWithKind {\n\n\tconstructor(\n\t\tpublic readonly desc: IExtensionDescription,\n\t\tpublic readonly kind: ExtensionKind[]\n\t) { }\n\n\tpublic get key(): string {\n\t\treturn ExtensionIdentifier.toKey(this.desc.identifier);\n\t}\n\n\tpublic get isUnderDevelopment(): boolean {\n\t\treturn this.desc.isUnderDevelopment;\n\t}\n}\n\nclass ExtensionInfo {\n\n\tconstructor(\n\t\tpublic readonly local: ExtensionWithKind | null,\n\t\tpublic readonly remote: ExtensionWithKind | null,\n\t) { }\n\n\tpublic get key(): string {\n\t\tif (this.local) {\n\t\t\treturn this.local.key;\n\t\t}\n\t\treturn this.remote!.key;\n\t}\n\n\tpublic get identifier(): ExtensionIdentifier {\n\t\tif (this.local) {\n\t\t\treturn this.local.desc.identifier;\n\t\t}\n\t\treturn this.remote!.desc.identifier;\n\t}\n\n\tpublic get kind(): ExtensionKind[] {\n\t\t// in case of disagreements between extension kinds, it is always\n\t\t// better to pick the local extension because it has a much higher\n\t\t// chance of being up-to-date\n\t\tif (this.local) {\n\t\t\treturn this.local.kind;\n\t\t}\n\t\treturn this.remote!.kind;\n\t}\n}\n"],
  "mappings": "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",
  "names": ["ExtensionHostKind", "ExtensionRunningPreference"]
}
