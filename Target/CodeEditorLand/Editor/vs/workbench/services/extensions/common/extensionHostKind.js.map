{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/extensions/common/extensionHostKind.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport type { ExtensionKind } from \"../../../../platform/environment/common/environment.js\";\nimport {\n\tExtensionIdentifier,\n\ttype IExtensionDescription,\n} from \"../../../../platform/extensions/common/extensions.js\";\n\nexport enum ExtensionHostKind {\n\tLocalProcess = 1,\n\tLocalWebWorker = 2,\n\tRemote = 3,\n}\n\nexport function extensionHostKindToString(\n\tkind: ExtensionHostKind | null,\n): string {\n\tif (kind === null) {\n\t\treturn \"None\";\n\t}\n\tswitch (kind) {\n\t\tcase ExtensionHostKind.LocalProcess:\n\t\t\treturn \"LocalProcess\";\n\t\tcase ExtensionHostKind.LocalWebWorker:\n\t\t\treturn \"LocalWebWorker\";\n\t\tcase ExtensionHostKind.Remote:\n\t\t\treturn \"Remote\";\n\t}\n}\n\nexport enum ExtensionRunningPreference {\n\tNone = 0,\n\tLocal = 1,\n\tRemote = 2,\n}\n\nexport function extensionRunningPreferenceToString(\n\tpreference: ExtensionRunningPreference,\n) {\n\tswitch (preference) {\n\t\tcase ExtensionRunningPreference.None:\n\t\t\treturn \"None\";\n\t\tcase ExtensionRunningPreference.Local:\n\t\t\treturn \"Local\";\n\t\tcase ExtensionRunningPreference.Remote:\n\t\t\treturn \"Remote\";\n\t}\n}\n\nexport interface IExtensionHostKindPicker {\n\tpickExtensionHostKind(\n\t\textensionId: ExtensionIdentifier,\n\t\textensionKinds: ExtensionKind[],\n\t\tisInstalledLocally: boolean,\n\t\tisInstalledRemotely: boolean,\n\t\tpreference: ExtensionRunningPreference,\n\t): ExtensionHostKind | null;\n}\n\nexport function determineExtensionHostKinds(\n\t_localExtensions: IExtensionDescription[],\n\t_remoteExtensions: IExtensionDescription[],\n\tgetExtensionKind: (\n\t\textensionDescription: IExtensionDescription,\n\t) => ExtensionKind[],\n\tpickExtensionHostKind: (\n\t\textensionId: ExtensionIdentifier,\n\t\textensionKinds: ExtensionKind[],\n\t\tisInstalledLocally: boolean,\n\t\tisInstalledRemotely: boolean,\n\t\tpreference: ExtensionRunningPreference,\n\t) => ExtensionHostKind | null,\n): Map<string, ExtensionHostKind | null> {\n\tconst localExtensions = toExtensionWithKind(\n\t\t_localExtensions,\n\t\tgetExtensionKind,\n\t);\n\tconst remoteExtensions = toExtensionWithKind(\n\t\t_remoteExtensions,\n\t\tgetExtensionKind,\n\t);\n\n\tconst allExtensions = new Map<string, ExtensionInfo>();\n\tconst collectExtension = (ext: ExtensionWithKind) => {\n\t\tif (allExtensions.has(ext.key)) {\n\t\t\treturn;\n\t\t}\n\t\tconst local = localExtensions.get(ext.key) || null;\n\t\tconst remote = remoteExtensions.get(ext.key) || null;\n\t\tconst info = new ExtensionInfo(local, remote);\n\t\tallExtensions.set(info.key, info);\n\t};\n\tlocalExtensions.forEach((ext) => collectExtension(ext));\n\tremoteExtensions.forEach((ext) => collectExtension(ext));\n\n\tconst extensionHostKinds = new Map<string, ExtensionHostKind | null>();\n\tallExtensions.forEach((ext) => {\n\t\tconst isInstalledLocally = Boolean(ext.local);\n\t\tconst isInstalledRemotely = Boolean(ext.remote);\n\n\t\tconst isLocallyUnderDevelopment = Boolean(\n\t\t\text.local && ext.local.isUnderDevelopment,\n\t\t);\n\t\tconst isRemotelyUnderDevelopment = Boolean(\n\t\t\text.remote && ext.remote.isUnderDevelopment,\n\t\t);\n\n\t\tlet preference = ExtensionRunningPreference.None;\n\t\tif (isLocallyUnderDevelopment && !isRemotelyUnderDevelopment) {\n\t\t\tpreference = ExtensionRunningPreference.Local;\n\t\t} else if (isRemotelyUnderDevelopment && !isLocallyUnderDevelopment) {\n\t\t\tpreference = ExtensionRunningPreference.Remote;\n\t\t}\n\n\t\textensionHostKinds.set(\n\t\t\text.key,\n\t\t\tpickExtensionHostKind(\n\t\t\t\text.identifier,\n\t\t\t\text.kind,\n\t\t\t\tisInstalledLocally,\n\t\t\t\tisInstalledRemotely,\n\t\t\t\tpreference,\n\t\t\t),\n\t\t);\n\t});\n\n\treturn extensionHostKinds;\n}\n\nfunction toExtensionWithKind(\n\textensions: IExtensionDescription[],\n\tgetExtensionKind: (\n\t\textensionDescription: IExtensionDescription,\n\t) => ExtensionKind[],\n): Map<string, ExtensionWithKind> {\n\tconst result = new Map<string, ExtensionWithKind>();\n\textensions.forEach((desc) => {\n\t\tconst ext = new ExtensionWithKind(desc, getExtensionKind(desc));\n\t\tresult.set(ext.key, ext);\n\t});\n\treturn result;\n}\n\nclass ExtensionWithKind {\n\tconstructor(\n\t\tpublic readonly desc: IExtensionDescription,\n\t\tpublic readonly kind: ExtensionKind[],\n\t) {}\n\n\tpublic get key(): string {\n\t\treturn ExtensionIdentifier.toKey(this.desc.identifier);\n\t}\n\n\tpublic get isUnderDevelopment(): boolean {\n\t\treturn this.desc.isUnderDevelopment;\n\t}\n}\n\nclass ExtensionInfo {\n\tconstructor(\n\t\tpublic readonly local: ExtensionWithKind | null,\n\t\tpublic readonly remote: ExtensionWithKind | null,\n\t) {}\n\n\tpublic get key(): string {\n\t\tif (this.local) {\n\t\t\treturn this.local.key;\n\t\t}\n\t\treturn this.remote!.key;\n\t}\n\n\tpublic get identifier(): ExtensionIdentifier {\n\t\tif (this.local) {\n\t\t\treturn this.local.desc.identifier;\n\t\t}\n\t\treturn this.remote!.desc.identifier;\n\t}\n\n\tpublic get kind(): ExtensionKind[] {\n\t\t// in case of disagreements between extension kinds, it is always\n\t\t// better to pick the local extension because it has a much higher\n\t\t// chance of being up-to-date\n\t\tif (this.local) {\n\t\t\treturn this.local.kind;\n\t\t}\n\t\treturn this.remote!.kind;\n\t}\n}\n"],
  "mappings": "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",
  "names": ["ExtensionHostKind", "ExtensionRunningPreference"]
}
