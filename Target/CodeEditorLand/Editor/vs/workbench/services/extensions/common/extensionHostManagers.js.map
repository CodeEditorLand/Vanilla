{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/extensions/common/extensionHostManagers.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Event } from '../../../../base/common/event.js';\nimport { URI } from '../../../../base/common/uri.js';\nimport { ExtensionIdentifier, IExtensionDescription } from '../../../../platform/extensions/common/extensions.js';\nimport { ExtensionHostKind } from './extensionHostKind.js';\nimport { IExtensionDescriptionDelta } from './extensionHostProtocol.js';\nimport { IResolveAuthorityResult } from './extensionHostProxy.js';\nimport { ExtensionRunningLocation } from './extensionRunningLocation.js';\nimport { ActivationKind, ExtensionActivationReason, ExtensionHostStartup } from './extensions.js';\nimport { ResponsiveState } from './rpcProtocol.js';\n\nexport interface IExtensionHostManager {\n\treadonly pid: number | null;\n\treadonly kind: ExtensionHostKind;\n\treadonly startup: ExtensionHostStartup;\n\treadonly friendyName: string;\n\treadonly onDidExit: Event<[number, string | null]>;\n\treadonly onDidChangeResponsiveState: Event<ResponsiveState>;\n\tdisconnect(): Promise<void>;\n\tdispose(): void;\n\tready(): Promise<void>;\n\trepresentsRunningLocation(runningLocation: ExtensionRunningLocation): boolean;\n\tdeltaExtensions(extensionsDelta: IExtensionDescriptionDelta): Promise<void>;\n\tcontainsExtension(extensionId: ExtensionIdentifier): boolean;\n\tactivate(extension: ExtensionIdentifier, reason: ExtensionActivationReason): Promise<boolean>;\n\tactivateByEvent(activationEvent: string, activationKind: ActivationKind): Promise<void>;\n\tactivationEventIsDone(activationEvent: string): boolean;\n\tgetInspectPort(tryEnableInspector: boolean): Promise<{ port: number; host: string } | undefined>;\n\tresolveAuthority(remoteAuthority: string, resolveAttempt: number): Promise<IResolveAuthorityResult>;\n\t/**\n\t * Returns `null` if no resolver for `remoteAuthority` is found.\n\t */\n\tgetCanonicalURI(remoteAuthority: string, uri: URI): Promise<URI | null>;\n\tstart(extensionRegistryVersionId: number, allExtensions: readonly IExtensionDescription[], myExtensions: ExtensionIdentifier[]): Promise<void>;\n\textensionTestsExecute(): Promise<number>;\n\tsetRemoteEnvironment(env: { [key: string]: string | null }): Promise<void>;\n}\n"],
  "mappings": "AAKA,SAAS,aAAa;AACtB,SAAS,WAAW;AACpB,SAAS,qBAAqB,6BAA6B;AAC3D,SAAS,yBAAyB;AAClC,SAAS,kCAAkC;AAC3C,SAAS,+BAA+B;AACxC,SAAS,gCAAgC;AACzC,SAAS,gBAAgB,2BAA2B,4BAA4B;AAChF,SAAS,uBAAuB;",
  "names": []
}
