{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/extensions/common/extensionManifestPropertiesService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IConfigurationService } from '../../../../platform/configuration/common/configuration.js';\nimport { IExtensionManifest, ExtensionUntrustedWorkspaceSupportType, ExtensionVirtualWorkspaceSupportType, IExtensionIdentifier, ALL_EXTENSION_KINDS, ExtensionIdentifierMap } from '../../../../platform/extensions/common/extensions.js';\nimport { ExtensionKind } from '../../../../platform/environment/common/environment.js';\nimport { ExtensionsRegistry } from './extensionsRegistry.js';\nimport { getGalleryExtensionId } from '../../../../platform/extensionManagement/common/extensionManagementUtil.js';\nimport { isNonEmptyArray } from '../../../../base/common/arrays.js';\nimport { IProductService } from '../../../../platform/product/common/productService.js';\nimport { createDecorator } from '../../../../platform/instantiation/common/instantiation.js';\nimport { InstantiationType, registerSingleton } from '../../../../platform/instantiation/common/extensions.js';\nimport { ExtensionUntrustedWorkspaceSupport } from '../../../../base/common/product.js';\nimport { Disposable } from '../../../../base/common/lifecycle.js';\nimport { WORKSPACE_TRUST_EXTENSION_SUPPORT } from '../../workspaces/common/workspaceTrust.js';\nimport { isBoolean } from '../../../../base/common/types.js';\nimport { IWorkspaceTrustEnablementService } from '../../../../platform/workspace/common/workspaceTrust.js';\nimport { ILogService } from '../../../../platform/log/common/log.js';\nimport { isWeb } from '../../../../base/common/platform.js';\n\nexport const IExtensionManifestPropertiesService = createDecorator<IExtensionManifestPropertiesService>('extensionManifestPropertiesService');\n\nexport interface IExtensionManifestPropertiesService {\n\treadonly _serviceBrand: undefined;\n\n\tprefersExecuteOnUI(manifest: IExtensionManifest): boolean;\n\tprefersExecuteOnWorkspace(manifest: IExtensionManifest): boolean;\n\tprefersExecuteOnWeb(manifest: IExtensionManifest): boolean;\n\n\tcanExecuteOnUI(manifest: IExtensionManifest): boolean;\n\tcanExecuteOnWorkspace(manifest: IExtensionManifest): boolean;\n\tcanExecuteOnWeb(manifest: IExtensionManifest): boolean;\n\n\tgetExtensionKind(manifest: IExtensionManifest): ExtensionKind[];\n\tgetUserConfiguredExtensionKind(extensionIdentifier: IExtensionIdentifier): ExtensionKind[] | undefined;\n\tgetExtensionUntrustedWorkspaceSupportType(manifest: IExtensionManifest): ExtensionUntrustedWorkspaceSupportType;\n\tgetExtensionVirtualWorkspaceSupportType(manifest: IExtensionManifest): ExtensionVirtualWorkspaceSupportType;\n}\n\nexport class ExtensionManifestPropertiesService extends Disposable implements IExtensionManifestPropertiesService {\n\n\treadonly _serviceBrand: undefined;\n\n\tprivate _extensionPointExtensionKindsMap: Map<string, ExtensionKind[]> | null = null;\n\tprivate _productExtensionKindsMap: ExtensionIdentifierMap<ExtensionKind[]> | null = null;\n\tprivate _configuredExtensionKindsMap: ExtensionIdentifierMap<ExtensionKind | ExtensionKind[]> | null = null;\n\n\tprivate _productVirtualWorkspaceSupportMap: ExtensionIdentifierMap<{ default?: boolean; override?: boolean }> | null = null;\n\tprivate _configuredVirtualWorkspaceSupportMap: ExtensionIdentifierMap<boolean> | null = null;\n\n\tprivate readonly _configuredExtensionWorkspaceTrustRequestMap: ExtensionIdentifierMap<{ supported: ExtensionUntrustedWorkspaceSupportType; version?: string }>;\n\tprivate readonly _productExtensionWorkspaceTrustRequestMap: Map<string, ExtensionUntrustedWorkspaceSupport>;\n\n\tconstructor(\n\t\t@IProductService private readonly productService: IProductService,\n\t\t@IConfigurationService private readonly configurationService: IConfigurationService,\n\t\t@IWorkspaceTrustEnablementService private readonly workspaceTrustEnablementService: IWorkspaceTrustEnablementService,\n\t\t@ILogService private readonly logService: ILogService,\n\t) {\n\t\tsuper();\n\n\t\t// Workspace trust request type (settings.json)\n\t\tthis._configuredExtensionWorkspaceTrustRequestMap = new ExtensionIdentifierMap<{ supported: ExtensionUntrustedWorkspaceSupportType; version?: string }>();\n\t\tconst configuredExtensionWorkspaceTrustRequests = configurationService.inspect<{ [key: string]: { supported: ExtensionUntrustedWorkspaceSupportType; version?: string } }>(WORKSPACE_TRUST_EXTENSION_SUPPORT).userValue || {};\n\t\tfor (const id of Object.keys(configuredExtensionWorkspaceTrustRequests)) {\n\t\t\tthis._configuredExtensionWorkspaceTrustRequestMap.set(id, configuredExtensionWorkspaceTrustRequests[id]);\n\t\t}\n\n\t\t// Workspace trust request type (product.json)\n\t\tthis._productExtensionWorkspaceTrustRequestMap = new Map<string, ExtensionUntrustedWorkspaceSupport>();\n\t\tif (productService.extensionUntrustedWorkspaceSupport) {\n\t\t\tfor (const id of Object.keys(productService.extensionUntrustedWorkspaceSupport)) {\n\t\t\t\tthis._productExtensionWorkspaceTrustRequestMap.set(id, productService.extensionUntrustedWorkspaceSupport[id]);\n\t\t\t}\n\t\t}\n\t}\n\n\tprefersExecuteOnUI(manifest: IExtensionManifest): boolean {\n\t\tconst extensionKind = this.getExtensionKind(manifest);\n\t\treturn (extensionKind.length > 0 && extensionKind[0] === 'ui');\n\t}\n\n\tprefersExecuteOnWorkspace(manifest: IExtensionManifest): boolean {\n\t\tconst extensionKind = this.getExtensionKind(manifest);\n\t\treturn (extensionKind.length > 0 && extensionKind[0] === 'workspace');\n\t}\n\n\tprefersExecuteOnWeb(manifest: IExtensionManifest): boolean {\n\t\tconst extensionKind = this.getExtensionKind(manifest);\n\t\treturn (extensionKind.length > 0 && extensionKind[0] === 'web');\n\t}\n\n\tcanExecuteOnUI(manifest: IExtensionManifest): boolean {\n\t\tconst extensionKind = this.getExtensionKind(manifest);\n\t\treturn extensionKind.some(kind => kind === 'ui');\n\t}\n\n\tcanExecuteOnWorkspace(manifest: IExtensionManifest): boolean {\n\t\tconst extensionKind = this.getExtensionKind(manifest);\n\t\treturn extensionKind.some(kind => kind === 'workspace');\n\t}\n\n\tcanExecuteOnWeb(manifest: IExtensionManifest): boolean {\n\t\tconst extensionKind = this.getExtensionKind(manifest);\n\t\treturn extensionKind.some(kind => kind === 'web');\n\t}\n\n\tgetExtensionKind(manifest: IExtensionManifest): ExtensionKind[] {\n\t\tconst deducedExtensionKind = this.deduceExtensionKind(manifest);\n\t\tconst configuredExtensionKind = this.getConfiguredExtensionKind(manifest);\n\n\t\tif (configuredExtensionKind && configuredExtensionKind.length > 0) {\n\t\t\tconst result: ExtensionKind[] = [];\n\t\t\tfor (const extensionKind of configuredExtensionKind) {\n\t\t\t\tif (extensionKind !== '-web') {\n\t\t\t\t\tresult.push(extensionKind);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// If opted out from web without specifying other extension kinds then default to ui, workspace\n\t\t\tif (configuredExtensionKind.includes('-web') && !result.length) {\n\t\t\t\tresult.push('ui');\n\t\t\t\tresult.push('workspace');\n\t\t\t}\n\n\t\t\t// Add web kind if not opted out from web and can run in web\n\t\t\tif (isWeb && !configuredExtensionKind.includes('-web') && !configuredExtensionKind.includes('web') && deducedExtensionKind.includes('web')) {\n\t\t\t\tresult.push('web');\n\t\t\t}\n\n\t\t\treturn result;\n\t\t}\n\n\t\treturn deducedExtensionKind;\n\t}\n\n\tgetUserConfiguredExtensionKind(extensionIdentifier: IExtensionIdentifier): ExtensionKind[] | undefined {\n\t\tif (this._configuredExtensionKindsMap === null) {\n\t\t\tconst configuredExtensionKindsMap = new ExtensionIdentifierMap<ExtensionKind | ExtensionKind[]>();\n\t\t\tconst configuredExtensionKinds = this.configurationService.getValue<{ [key: string]: ExtensionKind | ExtensionKind[] }>('remote.extensionKind') || {};\n\t\t\tfor (const id of Object.keys(configuredExtensionKinds)) {\n\t\t\t\tconfiguredExtensionKindsMap.set(id, configuredExtensionKinds[id]);\n\t\t\t}\n\t\t\tthis._configuredExtensionKindsMap = configuredExtensionKindsMap;\n\t\t}\n\n\t\tconst userConfiguredExtensionKind = this._configuredExtensionKindsMap.get(extensionIdentifier.id);\n\t\treturn userConfiguredExtensionKind ? this.toArray(userConfiguredExtensionKind) : undefined;\n\t}\n\n\tgetExtensionUntrustedWorkspaceSupportType(manifest: IExtensionManifest): ExtensionUntrustedWorkspaceSupportType {\n\t\t// Workspace trust feature is disabled, or extension has no entry point\n\t\tif (!this.workspaceTrustEnablementService.isWorkspaceTrustEnabled() || !manifest.main) {\n\t\t\treturn true;\n\t\t}\n\n\t\t// Get extension workspace trust requirements from settings.json\n\t\tconst configuredWorkspaceTrustRequest = this.getConfiguredExtensionWorkspaceTrustRequest(manifest);\n\n\t\t// Get extension workspace trust requirements from product.json\n\t\tconst productWorkspaceTrustRequest = this.getProductExtensionWorkspaceTrustRequest(manifest);\n\n\t\t// Use settings.json override value if it exists\n\t\tif (configuredWorkspaceTrustRequest !== undefined) {\n\t\t\treturn configuredWorkspaceTrustRequest;\n\t\t}\n\n\t\t// Use product.json override value if it exists\n\t\tif (productWorkspaceTrustRequest?.override !== undefined) {\n\t\t\treturn productWorkspaceTrustRequest.override;\n\t\t}\n\n\t\t// Use extension manifest value if it exists\n\t\tif (manifest.capabilities?.untrustedWorkspaces?.supported !== undefined) {\n\t\t\treturn manifest.capabilities.untrustedWorkspaces.supported;\n\t\t}\n\n\t\t// Use product.json default value if it exists\n\t\tif (productWorkspaceTrustRequest?.default !== undefined) {\n\t\t\treturn productWorkspaceTrustRequest.default;\n\t\t}\n\n\t\treturn false;\n\t}\n\n\tgetExtensionVirtualWorkspaceSupportType(manifest: IExtensionManifest): ExtensionVirtualWorkspaceSupportType {\n\t\t// check user configured\n\t\tconst userConfiguredVirtualWorkspaceSupport = this.getConfiguredVirtualWorkspaceSupport(manifest);\n\t\tif (userConfiguredVirtualWorkspaceSupport !== undefined) {\n\t\t\treturn userConfiguredVirtualWorkspaceSupport;\n\t\t}\n\n\t\tconst productConfiguredWorkspaceSchemes = this.getProductVirtualWorkspaceSupport(manifest);\n\n\t\t// check override from product\n\t\tif (productConfiguredWorkspaceSchemes?.override !== undefined) {\n\t\t\treturn productConfiguredWorkspaceSchemes.override;\n\t\t}\n\n\t\t// check the manifest\n\t\tconst virtualWorkspaces = manifest.capabilities?.virtualWorkspaces;\n\t\tif (isBoolean(virtualWorkspaces)) {\n\t\t\treturn virtualWorkspaces;\n\t\t} else if (virtualWorkspaces) {\n\t\t\tconst supported = virtualWorkspaces.supported;\n\t\t\tif (isBoolean(supported) || supported === 'limited') {\n\t\t\t\treturn supported;\n\t\t\t}\n\t\t}\n\n\t\t// check default from product\n\t\tif (productConfiguredWorkspaceSchemes?.default !== undefined) {\n\t\t\treturn productConfiguredWorkspaceSchemes.default;\n\t\t}\n\n\t\t// Default - supports virtual workspace\n\t\treturn true;\n\t}\n\n\tprivate deduceExtensionKind(manifest: IExtensionManifest): ExtensionKind[] {\n\t\t// Not an UI extension if it has main\n\t\tif (manifest.main) {\n\t\t\tif (manifest.browser) {\n\t\t\t\treturn isWeb ? ['workspace', 'web'] : ['workspace'];\n\t\t\t}\n\t\t\treturn ['workspace'];\n\t\t}\n\n\t\tif (manifest.browser) {\n\t\t\treturn ['web'];\n\t\t}\n\n\t\tlet result = [...ALL_EXTENSION_KINDS];\n\n\t\tif (isNonEmptyArray(manifest.extensionPack) || isNonEmptyArray(manifest.extensionDependencies)) {\n\t\t\t// Extension pack defaults to [workspace, web] in web and only [workspace] in desktop\n\t\t\tresult = isWeb ? ['workspace', 'web'] : ['workspace'];\n\t\t}\n\n\t\tif (manifest.contributes) {\n\t\t\tfor (const contribution of Object.keys(manifest.contributes)) {\n\t\t\t\tconst supportedExtensionKinds = this.getSupportedExtensionKindsForExtensionPoint(contribution);\n\t\t\t\tif (supportedExtensionKinds.length) {\n\t\t\t\t\tresult = result.filter(extensionKind => supportedExtensionKinds.includes(extensionKind));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (!result.length) {\n\t\t\tthis.logService.warn('Cannot deduce extensionKind for extension', getGalleryExtensionId(manifest.publisher, manifest.name));\n\t\t}\n\n\t\treturn result;\n\t}\n\n\tprivate getSupportedExtensionKindsForExtensionPoint(extensionPoint: string): ExtensionKind[] {\n\t\tif (this._extensionPointExtensionKindsMap === null) {\n\t\t\tconst extensionPointExtensionKindsMap = new Map<string, ExtensionKind[]>();\n\t\t\tExtensionsRegistry.getExtensionPoints().forEach(e => extensionPointExtensionKindsMap.set(e.name, e.defaultExtensionKind || [] /* supports all */));\n\t\t\tthis._extensionPointExtensionKindsMap = extensionPointExtensionKindsMap;\n\t\t}\n\n\t\tlet extensionPointExtensionKind = this._extensionPointExtensionKindsMap.get(extensionPoint);\n\t\tif (extensionPointExtensionKind) {\n\t\t\treturn extensionPointExtensionKind;\n\t\t}\n\n\t\textensionPointExtensionKind = this.productService.extensionPointExtensionKind ? this.productService.extensionPointExtensionKind[extensionPoint] : undefined;\n\t\tif (extensionPointExtensionKind) {\n\t\t\treturn extensionPointExtensionKind;\n\t\t}\n\n\t\t/* Unknown extension point */\n\t\treturn isWeb ? ['workspace', 'web'] : ['workspace'];\n\t}\n\n\tprivate getConfiguredExtensionKind(manifest: IExtensionManifest): (ExtensionKind | '-web')[] | null {\n\t\tconst extensionIdentifier = { id: getGalleryExtensionId(manifest.publisher, manifest.name) };\n\n\t\t// check in config\n\t\tlet result: ExtensionKind | ExtensionKind[] | undefined = this.getUserConfiguredExtensionKind(extensionIdentifier);\n\t\tif (typeof result !== 'undefined') {\n\t\t\treturn this.toArray(result);\n\t\t}\n\n\t\t// check product.json\n\t\tresult = this.getProductExtensionKind(manifest);\n\t\tif (typeof result !== 'undefined') {\n\t\t\treturn result;\n\t\t}\n\n\t\t// check the manifest itself\n\t\tresult = manifest.extensionKind;\n\t\tif (typeof result !== 'undefined') {\n\t\t\tresult = this.toArray(result);\n\t\t\treturn result.filter(r => ['ui', 'workspace'].includes(r));\n\t\t}\n\n\t\treturn null;\n\t}\n\n\tprivate getProductExtensionKind(manifest: IExtensionManifest): ExtensionKind[] | undefined {\n\t\tif (this._productExtensionKindsMap === null) {\n\t\t\tconst productExtensionKindsMap = new ExtensionIdentifierMap<ExtensionKind[]>();\n\t\t\tif (this.productService.extensionKind) {\n\t\t\t\tfor (const id of Object.keys(this.productService.extensionKind)) {\n\t\t\t\t\tproductExtensionKindsMap.set(id, this.productService.extensionKind[id]);\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis._productExtensionKindsMap = productExtensionKindsMap;\n\t\t}\n\n\t\tconst extensionId = getGalleryExtensionId(manifest.publisher, manifest.name);\n\t\treturn this._productExtensionKindsMap.get(extensionId);\n\t}\n\n\tprivate getProductVirtualWorkspaceSupport(manifest: IExtensionManifest): { default?: boolean; override?: boolean } | undefined {\n\t\tif (this._productVirtualWorkspaceSupportMap === null) {\n\t\t\tconst productWorkspaceSchemesMap = new ExtensionIdentifierMap<{ default?: boolean; override?: boolean }>();\n\t\t\tif (this.productService.extensionVirtualWorkspacesSupport) {\n\t\t\t\tfor (const id of Object.keys(this.productService.extensionVirtualWorkspacesSupport)) {\n\t\t\t\t\tproductWorkspaceSchemesMap.set(id, this.productService.extensionVirtualWorkspacesSupport[id]);\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis._productVirtualWorkspaceSupportMap = productWorkspaceSchemesMap;\n\t\t}\n\n\t\tconst extensionId = getGalleryExtensionId(manifest.publisher, manifest.name);\n\t\treturn this._productVirtualWorkspaceSupportMap.get(extensionId);\n\t}\n\n\tprivate getConfiguredVirtualWorkspaceSupport(manifest: IExtensionManifest): boolean | undefined {\n\t\tif (this._configuredVirtualWorkspaceSupportMap === null) {\n\t\t\tconst configuredWorkspaceSchemesMap = new ExtensionIdentifierMap<boolean>();\n\t\t\tconst configuredWorkspaceSchemes = this.configurationService.getValue<{ [key: string]: boolean }>('extensions.supportVirtualWorkspaces') || {};\n\t\t\tfor (const id of Object.keys(configuredWorkspaceSchemes)) {\n\t\t\t\tif (configuredWorkspaceSchemes[id] !== undefined) {\n\t\t\t\t\tconfiguredWorkspaceSchemesMap.set(id, configuredWorkspaceSchemes[id]);\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis._configuredVirtualWorkspaceSupportMap = configuredWorkspaceSchemesMap;\n\t\t}\n\n\t\tconst extensionId = getGalleryExtensionId(manifest.publisher, manifest.name);\n\t\treturn this._configuredVirtualWorkspaceSupportMap.get(extensionId);\n\t}\n\n\tprivate getConfiguredExtensionWorkspaceTrustRequest(manifest: IExtensionManifest): ExtensionUntrustedWorkspaceSupportType | undefined {\n\t\tconst extensionId = getGalleryExtensionId(manifest.publisher, manifest.name);\n\t\tconst extensionWorkspaceTrustRequest = this._configuredExtensionWorkspaceTrustRequestMap.get(extensionId);\n\n\t\tif (extensionWorkspaceTrustRequest && (extensionWorkspaceTrustRequest.version === undefined || extensionWorkspaceTrustRequest.version === manifest.version)) {\n\t\t\treturn extensionWorkspaceTrustRequest.supported;\n\t\t}\n\n\t\treturn undefined;\n\t}\n\n\tprivate getProductExtensionWorkspaceTrustRequest(manifest: IExtensionManifest): ExtensionUntrustedWorkspaceSupport | undefined {\n\t\tconst extensionId = getGalleryExtensionId(manifest.publisher, manifest.name);\n\t\treturn this._productExtensionWorkspaceTrustRequestMap.get(extensionId);\n\t}\n\n\tprivate toArray(extensionKind: ExtensionKind | ExtensionKind[]): ExtensionKind[] {\n\t\tif (Array.isArray(extensionKind)) {\n\t\t\treturn extensionKind;\n\t\t}\n\t\treturn extensionKind === 'ui' ? ['ui', 'workspace'] : [extensionKind];\n\t}\n}\n\nregisterSingleton(IExtensionManifestPropertiesService, ExtensionManifestPropertiesService, InstantiationType.Delayed);\n"],
  "mappings": "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",
  "names": []
}
