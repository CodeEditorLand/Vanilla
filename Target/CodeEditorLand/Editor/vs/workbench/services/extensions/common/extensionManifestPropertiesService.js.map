{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/extensions/common/extensionManifestPropertiesService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { isNonEmptyArray } from \"../../../../base/common/arrays.js\";\nimport { Disposable } from \"../../../../base/common/lifecycle.js\";\nimport { isWeb } from \"../../../../base/common/platform.js\";\nimport type { ExtensionUntrustedWorkspaceSupport } from \"../../../../base/common/product.js\";\nimport { isBoolean } from \"../../../../base/common/types.js\";\nimport { IConfigurationService } from \"../../../../platform/configuration/common/configuration.js\";\nimport type { ExtensionKind } from \"../../../../platform/environment/common/environment.js\";\nimport { getGalleryExtensionId } from \"../../../../platform/extensionManagement/common/extensionManagementUtil.js\";\nimport {\n\tALL_EXTENSION_KINDS,\n\tExtensionIdentifierMap,\n\ttype ExtensionUntrustedWorkspaceSupportType,\n\ttype ExtensionVirtualWorkspaceSupportType,\n\ttype IExtensionIdentifier,\n\ttype IExtensionManifest,\n} from \"../../../../platform/extensions/common/extensions.js\";\nimport {\n\tInstantiationType,\n\tregisterSingleton,\n} from \"../../../../platform/instantiation/common/extensions.js\";\nimport { createDecorator } from \"../../../../platform/instantiation/common/instantiation.js\";\nimport { ILogService } from \"../../../../platform/log/common/log.js\";\nimport { IProductService } from \"../../../../platform/product/common/productService.js\";\nimport { IWorkspaceTrustEnablementService } from \"../../../../platform/workspace/common/workspaceTrust.js\";\nimport { WORKSPACE_TRUST_EXTENSION_SUPPORT } from \"../../workspaces/common/workspaceTrust.js\";\nimport { ExtensionsRegistry } from \"./extensionsRegistry.js\";\n\nexport const IExtensionManifestPropertiesService =\n\tcreateDecorator<IExtensionManifestPropertiesService>(\n\t\t\"extensionManifestPropertiesService\",\n\t);\n\nexport interface IExtensionManifestPropertiesService {\n\treadonly _serviceBrand: undefined;\n\n\tprefersExecuteOnUI(manifest: IExtensionManifest): boolean;\n\tprefersExecuteOnWorkspace(manifest: IExtensionManifest): boolean;\n\tprefersExecuteOnWeb(manifest: IExtensionManifest): boolean;\n\n\tcanExecuteOnUI(manifest: IExtensionManifest): boolean;\n\tcanExecuteOnWorkspace(manifest: IExtensionManifest): boolean;\n\tcanExecuteOnWeb(manifest: IExtensionManifest): boolean;\n\n\tgetExtensionKind(manifest: IExtensionManifest): ExtensionKind[];\n\tgetUserConfiguredExtensionKind(\n\t\textensionIdentifier: IExtensionIdentifier,\n\t): ExtensionKind[] | undefined;\n\tgetExtensionUntrustedWorkspaceSupportType(\n\t\tmanifest: IExtensionManifest,\n\t): ExtensionUntrustedWorkspaceSupportType;\n\tgetExtensionVirtualWorkspaceSupportType(\n\t\tmanifest: IExtensionManifest,\n\t): ExtensionVirtualWorkspaceSupportType;\n}\n\nexport class ExtensionManifestPropertiesService\n\textends Disposable\n\timplements IExtensionManifestPropertiesService\n{\n\treadonly _serviceBrand: undefined;\n\n\tprivate _extensionPointExtensionKindsMap: Map<\n\t\tstring,\n\t\tExtensionKind[]\n\t> | null = null;\n\tprivate _productExtensionKindsMap: ExtensionIdentifierMap<\n\t\tExtensionKind[]\n\t> | null = null;\n\tprivate _configuredExtensionKindsMap: ExtensionIdentifierMap<\n\t\tExtensionKind | ExtensionKind[]\n\t> | null = null;\n\n\tprivate _productVirtualWorkspaceSupportMap: ExtensionIdentifierMap<{\n\t\tdefault?: boolean;\n\t\toverride?: boolean;\n\t}> | null = null;\n\tprivate _configuredVirtualWorkspaceSupportMap: ExtensionIdentifierMap<boolean> | null =\n\t\tnull;\n\n\tprivate readonly _configuredExtensionWorkspaceTrustRequestMap: ExtensionIdentifierMap<{\n\t\tsupported: ExtensionUntrustedWorkspaceSupportType;\n\t\tversion?: string;\n\t}>;\n\tprivate readonly _productExtensionWorkspaceTrustRequestMap: Map<\n\t\tstring,\n\t\tExtensionUntrustedWorkspaceSupport\n\t>;\n\n\tconstructor(\n\t\t@IProductService private readonly productService: IProductService,\n\t\t@IConfigurationService\n\t\tprivate readonly configurationService: IConfigurationService,\n\t\t@IWorkspaceTrustEnablementService\n\t\tprivate readonly workspaceTrustEnablementService: IWorkspaceTrustEnablementService,\n\t\t@ILogService private readonly logService: ILogService,\n\t) {\n\t\tsuper();\n\n\t\t// Workspace trust request type (settings.json)\n\t\tthis._configuredExtensionWorkspaceTrustRequestMap =\n\t\t\tnew ExtensionIdentifierMap<{\n\t\t\t\tsupported: ExtensionUntrustedWorkspaceSupportType;\n\t\t\t\tversion?: string;\n\t\t\t}>();\n\t\tconst configuredExtensionWorkspaceTrustRequests =\n\t\t\tconfigurationService.inspect<{\n\t\t\t\t[key: string]: {\n\t\t\t\t\tsupported: ExtensionUntrustedWorkspaceSupportType;\n\t\t\t\t\tversion?: string;\n\t\t\t\t};\n\t\t\t}>(WORKSPACE_TRUST_EXTENSION_SUPPORT).userValue || {};\n\t\tfor (const id of Object.keys(\n\t\t\tconfiguredExtensionWorkspaceTrustRequests,\n\t\t)) {\n\t\t\tthis._configuredExtensionWorkspaceTrustRequestMap.set(\n\t\t\t\tid,\n\t\t\t\tconfiguredExtensionWorkspaceTrustRequests[id],\n\t\t\t);\n\t\t}\n\n\t\t// Workspace trust request type (product.json)\n\t\tthis._productExtensionWorkspaceTrustRequestMap = new Map<\n\t\t\tstring,\n\t\t\tExtensionUntrustedWorkspaceSupport\n\t\t>();\n\t\tif (productService.extensionUntrustedWorkspaceSupport) {\n\t\t\tfor (const id of Object.keys(\n\t\t\t\tproductService.extensionUntrustedWorkspaceSupport,\n\t\t\t)) {\n\t\t\t\tthis._productExtensionWorkspaceTrustRequestMap.set(\n\t\t\t\t\tid,\n\t\t\t\t\tproductService.extensionUntrustedWorkspaceSupport[id],\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t}\n\n\tprefersExecuteOnUI(manifest: IExtensionManifest): boolean {\n\t\tconst extensionKind = this.getExtensionKind(manifest);\n\t\treturn extensionKind.length > 0 && extensionKind[0] === \"ui\";\n\t}\n\n\tprefersExecuteOnWorkspace(manifest: IExtensionManifest): boolean {\n\t\tconst extensionKind = this.getExtensionKind(manifest);\n\t\treturn extensionKind.length > 0 && extensionKind[0] === \"workspace\";\n\t}\n\n\tprefersExecuteOnWeb(manifest: IExtensionManifest): boolean {\n\t\tconst extensionKind = this.getExtensionKind(manifest);\n\t\treturn extensionKind.length > 0 && extensionKind[0] === \"web\";\n\t}\n\n\tcanExecuteOnUI(manifest: IExtensionManifest): boolean {\n\t\tconst extensionKind = this.getExtensionKind(manifest);\n\t\treturn extensionKind.some((kind) => kind === \"ui\");\n\t}\n\n\tcanExecuteOnWorkspace(manifest: IExtensionManifest): boolean {\n\t\tconst extensionKind = this.getExtensionKind(manifest);\n\t\treturn extensionKind.some((kind) => kind === \"workspace\");\n\t}\n\n\tcanExecuteOnWeb(manifest: IExtensionManifest): boolean {\n\t\tconst extensionKind = this.getExtensionKind(manifest);\n\t\treturn extensionKind.some((kind) => kind === \"web\");\n\t}\n\n\tgetExtensionKind(manifest: IExtensionManifest): ExtensionKind[] {\n\t\tconst deducedExtensionKind = this.deduceExtensionKind(manifest);\n\t\tconst configuredExtensionKind =\n\t\t\tthis.getConfiguredExtensionKind(manifest);\n\n\t\tif (configuredExtensionKind && configuredExtensionKind.length > 0) {\n\t\t\tconst result: ExtensionKind[] = [];\n\t\t\tfor (const extensionKind of configuredExtensionKind) {\n\t\t\t\tif (extensionKind !== \"-web\") {\n\t\t\t\t\tresult.push(extensionKind);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// If opted out from web without specifying other extension kinds then default to ui, workspace\n\t\t\tif (configuredExtensionKind.includes(\"-web\") && !result.length) {\n\t\t\t\tresult.push(\"ui\");\n\t\t\t\tresult.push(\"workspace\");\n\t\t\t}\n\n\t\t\t// Add web kind if not opted out from web and can run in web\n\t\t\tif (\n\t\t\t\tisWeb &&\n\t\t\t\t!configuredExtensionKind.includes(\"-web\") &&\n\t\t\t\t!configuredExtensionKind.includes(\"web\") &&\n\t\t\t\tdeducedExtensionKind.includes(\"web\")\n\t\t\t) {\n\t\t\t\tresult.push(\"web\");\n\t\t\t}\n\n\t\t\treturn result;\n\t\t}\n\n\t\treturn deducedExtensionKind;\n\t}\n\n\tgetUserConfiguredExtensionKind(\n\t\textensionIdentifier: IExtensionIdentifier,\n\t): ExtensionKind[] | undefined {\n\t\tif (this._configuredExtensionKindsMap === null) {\n\t\t\tconst configuredExtensionKindsMap = new ExtensionIdentifierMap<\n\t\t\t\tExtensionKind | ExtensionKind[]\n\t\t\t>();\n\t\t\tconst configuredExtensionKinds =\n\t\t\t\tthis.configurationService.getValue<{\n\t\t\t\t\t[key: string]: ExtensionKind | ExtensionKind[];\n\t\t\t\t}>(\"remote.extensionKind\") || {};\n\t\t\tfor (const id of Object.keys(configuredExtensionKinds)) {\n\t\t\t\tconfiguredExtensionKindsMap.set(\n\t\t\t\t\tid,\n\t\t\t\t\tconfiguredExtensionKinds[id],\n\t\t\t\t);\n\t\t\t}\n\t\t\tthis._configuredExtensionKindsMap = configuredExtensionKindsMap;\n\t\t}\n\n\t\tconst userConfiguredExtensionKind =\n\t\t\tthis._configuredExtensionKindsMap.get(extensionIdentifier.id);\n\t\treturn userConfiguredExtensionKind\n\t\t\t? this.toArray(userConfiguredExtensionKind)\n\t\t\t: undefined;\n\t}\n\n\tgetExtensionUntrustedWorkspaceSupportType(\n\t\tmanifest: IExtensionManifest,\n\t): ExtensionUntrustedWorkspaceSupportType {\n\t\t// Workspace trust feature is disabled, or extension has no entry point\n\t\tif (\n\t\t\t!this.workspaceTrustEnablementService.isWorkspaceTrustEnabled() ||\n\t\t\t!manifest.main\n\t\t) {\n\t\t\treturn true;\n\t\t}\n\n\t\t// Get extension workspace trust requirements from settings.json\n\t\tconst configuredWorkspaceTrustRequest =\n\t\t\tthis.getConfiguredExtensionWorkspaceTrustRequest(manifest);\n\n\t\t// Get extension workspace trust requirements from product.json\n\t\tconst productWorkspaceTrustRequest =\n\t\t\tthis.getProductExtensionWorkspaceTrustRequest(manifest);\n\n\t\t// Use settings.json override value if it exists\n\t\tif (configuredWorkspaceTrustRequest !== undefined) {\n\t\t\treturn configuredWorkspaceTrustRequest;\n\t\t}\n\n\t\t// Use product.json override value if it exists\n\t\tif (productWorkspaceTrustRequest?.override !== undefined) {\n\t\t\treturn productWorkspaceTrustRequest.override;\n\t\t}\n\n\t\t// Use extension manifest value if it exists\n\t\tif (\n\t\t\tmanifest.capabilities?.untrustedWorkspaces?.supported !== undefined\n\t\t) {\n\t\t\treturn manifest.capabilities.untrustedWorkspaces.supported;\n\t\t}\n\n\t\t// Use product.json default value if it exists\n\t\tif (productWorkspaceTrustRequest?.default !== undefined) {\n\t\t\treturn productWorkspaceTrustRequest.default;\n\t\t}\n\n\t\treturn false;\n\t}\n\n\tgetExtensionVirtualWorkspaceSupportType(\n\t\tmanifest: IExtensionManifest,\n\t): ExtensionVirtualWorkspaceSupportType {\n\t\t// check user configured\n\t\tconst userConfiguredVirtualWorkspaceSupport =\n\t\t\tthis.getConfiguredVirtualWorkspaceSupport(manifest);\n\t\tif (userConfiguredVirtualWorkspaceSupport !== undefined) {\n\t\t\treturn userConfiguredVirtualWorkspaceSupport;\n\t\t}\n\n\t\tconst productConfiguredWorkspaceSchemes =\n\t\t\tthis.getProductVirtualWorkspaceSupport(manifest);\n\n\t\t// check override from product\n\t\tif (productConfiguredWorkspaceSchemes?.override !== undefined) {\n\t\t\treturn productConfiguredWorkspaceSchemes.override;\n\t\t}\n\n\t\t// check the manifest\n\t\tconst virtualWorkspaces = manifest.capabilities?.virtualWorkspaces;\n\t\tif (isBoolean(virtualWorkspaces)) {\n\t\t\treturn virtualWorkspaces;\n\t\t} else if (virtualWorkspaces) {\n\t\t\tconst supported = virtualWorkspaces.supported;\n\t\t\tif (isBoolean(supported) || supported === \"limited\") {\n\t\t\t\treturn supported;\n\t\t\t}\n\t\t}\n\n\t\t// check default from product\n\t\tif (productConfiguredWorkspaceSchemes?.default !== undefined) {\n\t\t\treturn productConfiguredWorkspaceSchemes.default;\n\t\t}\n\n\t\t// Default - supports virtual workspace\n\t\treturn true;\n\t}\n\n\tprivate deduceExtensionKind(manifest: IExtensionManifest): ExtensionKind[] {\n\t\t// Not an UI extension if it has main\n\t\tif (manifest.main) {\n\t\t\tif (manifest.browser) {\n\t\t\t\treturn isWeb ? [\"workspace\", \"web\"] : [\"workspace\"];\n\t\t\t}\n\t\t\treturn [\"workspace\"];\n\t\t}\n\n\t\tif (manifest.browser) {\n\t\t\treturn [\"web\"];\n\t\t}\n\n\t\tlet result = [...ALL_EXTENSION_KINDS];\n\n\t\tif (\n\t\t\tisNonEmptyArray(manifest.extensionPack) ||\n\t\t\tisNonEmptyArray(manifest.extensionDependencies)\n\t\t) {\n\t\t\t// Extension pack defaults to [workspace, web] in web and only [workspace] in desktop\n\t\t\tresult = isWeb ? [\"workspace\", \"web\"] : [\"workspace\"];\n\t\t}\n\n\t\tif (manifest.contributes) {\n\t\t\tfor (const contribution of Object.keys(manifest.contributes)) {\n\t\t\t\tconst supportedExtensionKinds =\n\t\t\t\t\tthis.getSupportedExtensionKindsForExtensionPoint(\n\t\t\t\t\t\tcontribution,\n\t\t\t\t\t);\n\t\t\t\tif (supportedExtensionKinds.length) {\n\t\t\t\t\tresult = result.filter((extensionKind) =>\n\t\t\t\t\t\tsupportedExtensionKinds.includes(extensionKind),\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (!result.length) {\n\t\t\tthis.logService.warn(\n\t\t\t\t\"Cannot deduce extensionKind for extension\",\n\t\t\t\tgetGalleryExtensionId(manifest.publisher, manifest.name),\n\t\t\t);\n\t\t}\n\n\t\treturn result;\n\t}\n\n\tprivate getSupportedExtensionKindsForExtensionPoint(\n\t\textensionPoint: string,\n\t): ExtensionKind[] {\n\t\tif (this._extensionPointExtensionKindsMap === null) {\n\t\t\tconst extensionPointExtensionKindsMap = new Map<\n\t\t\t\tstring,\n\t\t\t\tExtensionKind[]\n\t\t\t>();\n\t\t\tExtensionsRegistry.getExtensionPoints().forEach((e) =>\n\t\t\t\textensionPointExtensionKindsMap.set(\n\t\t\t\t\te.name,\n\t\t\t\t\te.defaultExtensionKind || [] /* supports all */,\n\t\t\t\t),\n\t\t\t);\n\t\t\tthis._extensionPointExtensionKindsMap =\n\t\t\t\textensionPointExtensionKindsMap;\n\t\t}\n\n\t\tlet extensionPointExtensionKind =\n\t\t\tthis._extensionPointExtensionKindsMap.get(extensionPoint);\n\t\tif (extensionPointExtensionKind) {\n\t\t\treturn extensionPointExtensionKind;\n\t\t}\n\n\t\textensionPointExtensionKind = this.productService\n\t\t\t.extensionPointExtensionKind\n\t\t\t? this.productService.extensionPointExtensionKind[extensionPoint]\n\t\t\t: undefined;\n\t\tif (extensionPointExtensionKind) {\n\t\t\treturn extensionPointExtensionKind;\n\t\t}\n\n\t\t/* Unknown extension point */\n\t\treturn isWeb ? [\"workspace\", \"web\"] : [\"workspace\"];\n\t}\n\n\tprivate getConfiguredExtensionKind(\n\t\tmanifest: IExtensionManifest,\n\t): (ExtensionKind | \"-web\")[] | null {\n\t\tconst extensionIdentifier = {\n\t\t\tid: getGalleryExtensionId(manifest.publisher, manifest.name),\n\t\t};\n\n\t\t// check in config\n\t\tlet result: ExtensionKind | ExtensionKind[] | undefined =\n\t\t\tthis.getUserConfiguredExtensionKind(extensionIdentifier);\n\t\tif (typeof result !== \"undefined\") {\n\t\t\treturn this.toArray(result);\n\t\t}\n\n\t\t// check product.json\n\t\tresult = this.getProductExtensionKind(manifest);\n\t\tif (typeof result !== \"undefined\") {\n\t\t\treturn result;\n\t\t}\n\n\t\t// check the manifest itself\n\t\tresult = manifest.extensionKind;\n\t\tif (typeof result !== \"undefined\") {\n\t\t\tresult = this.toArray(result);\n\t\t\treturn result.filter((r) => [\"ui\", \"workspace\"].includes(r));\n\t\t}\n\n\t\treturn null;\n\t}\n\n\tprivate getProductExtensionKind(\n\t\tmanifest: IExtensionManifest,\n\t): ExtensionKind[] | undefined {\n\t\tif (this._productExtensionKindsMap === null) {\n\t\t\tconst productExtensionKindsMap = new ExtensionIdentifierMap<\n\t\t\t\tExtensionKind[]\n\t\t\t>();\n\t\t\tif (this.productService.extensionKind) {\n\t\t\t\tfor (const id of Object.keys(\n\t\t\t\t\tthis.productService.extensionKind,\n\t\t\t\t)) {\n\t\t\t\t\tproductExtensionKindsMap.set(\n\t\t\t\t\t\tid,\n\t\t\t\t\t\tthis.productService.extensionKind[id],\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis._productExtensionKindsMap = productExtensionKindsMap;\n\t\t}\n\n\t\tconst extensionId = getGalleryExtensionId(\n\t\t\tmanifest.publisher,\n\t\t\tmanifest.name,\n\t\t);\n\t\treturn this._productExtensionKindsMap.get(extensionId);\n\t}\n\n\tprivate getProductVirtualWorkspaceSupport(\n\t\tmanifest: IExtensionManifest,\n\t): { default?: boolean; override?: boolean } | undefined {\n\t\tif (this._productVirtualWorkspaceSupportMap === null) {\n\t\t\tconst productWorkspaceSchemesMap = new ExtensionIdentifierMap<{\n\t\t\t\tdefault?: boolean;\n\t\t\t\toverride?: boolean;\n\t\t\t}>();\n\t\t\tif (this.productService.extensionVirtualWorkspacesSupport) {\n\t\t\t\tfor (const id of Object.keys(\n\t\t\t\t\tthis.productService.extensionVirtualWorkspacesSupport,\n\t\t\t\t)) {\n\t\t\t\t\tproductWorkspaceSchemesMap.set(\n\t\t\t\t\t\tid,\n\t\t\t\t\t\tthis.productService.extensionVirtualWorkspacesSupport[\n\t\t\t\t\t\t\tid\n\t\t\t\t\t\t],\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis._productVirtualWorkspaceSupportMap =\n\t\t\t\tproductWorkspaceSchemesMap;\n\t\t}\n\n\t\tconst extensionId = getGalleryExtensionId(\n\t\t\tmanifest.publisher,\n\t\t\tmanifest.name,\n\t\t);\n\t\treturn this._productVirtualWorkspaceSupportMap.get(extensionId);\n\t}\n\n\tprivate getConfiguredVirtualWorkspaceSupport(\n\t\tmanifest: IExtensionManifest,\n\t): boolean | undefined {\n\t\tif (this._configuredVirtualWorkspaceSupportMap === null) {\n\t\t\tconst configuredWorkspaceSchemesMap =\n\t\t\t\tnew ExtensionIdentifierMap<boolean>();\n\t\t\tconst configuredWorkspaceSchemes =\n\t\t\t\tthis.configurationService.getValue<{ [key: string]: boolean }>(\n\t\t\t\t\t\"extensions.supportVirtualWorkspaces\",\n\t\t\t\t) || {};\n\t\t\tfor (const id of Object.keys(configuredWorkspaceSchemes)) {\n\t\t\t\tif (configuredWorkspaceSchemes[id] !== undefined) {\n\t\t\t\t\tconfiguredWorkspaceSchemesMap.set(\n\t\t\t\t\t\tid,\n\t\t\t\t\t\tconfiguredWorkspaceSchemes[id],\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis._configuredVirtualWorkspaceSupportMap =\n\t\t\t\tconfiguredWorkspaceSchemesMap;\n\t\t}\n\n\t\tconst extensionId = getGalleryExtensionId(\n\t\t\tmanifest.publisher,\n\t\t\tmanifest.name,\n\t\t);\n\t\treturn this._configuredVirtualWorkspaceSupportMap.get(extensionId);\n\t}\n\n\tprivate getConfiguredExtensionWorkspaceTrustRequest(\n\t\tmanifest: IExtensionManifest,\n\t): ExtensionUntrustedWorkspaceSupportType | undefined {\n\t\tconst extensionId = getGalleryExtensionId(\n\t\t\tmanifest.publisher,\n\t\t\tmanifest.name,\n\t\t);\n\t\tconst extensionWorkspaceTrustRequest =\n\t\t\tthis._configuredExtensionWorkspaceTrustRequestMap.get(extensionId);\n\n\t\tif (\n\t\t\textensionWorkspaceTrustRequest &&\n\t\t\t(extensionWorkspaceTrustRequest.version === undefined ||\n\t\t\t\textensionWorkspaceTrustRequest.version === manifest.version)\n\t\t) {\n\t\t\treturn extensionWorkspaceTrustRequest.supported;\n\t\t}\n\n\t\treturn undefined;\n\t}\n\n\tprivate getProductExtensionWorkspaceTrustRequest(\n\t\tmanifest: IExtensionManifest,\n\t): ExtensionUntrustedWorkspaceSupport | undefined {\n\t\tconst extensionId = getGalleryExtensionId(\n\t\t\tmanifest.publisher,\n\t\t\tmanifest.name,\n\t\t);\n\t\treturn this._productExtensionWorkspaceTrustRequestMap.get(extensionId);\n\t}\n\n\tprivate toArray(\n\t\textensionKind: ExtensionKind | ExtensionKind[],\n\t): ExtensionKind[] {\n\t\tif (Array.isArray(extensionKind)) {\n\t\t\treturn extensionKind;\n\t\t}\n\t\treturn extensionKind === \"ui\" ? [\"ui\", \"workspace\"] : [extensionKind];\n\t}\n}\n\nregisterSingleton(\n\tIExtensionManifestPropertiesService,\n\tExtensionManifestPropertiesService,\n\tInstantiationType.Delayed,\n);\n"],
  "mappings": "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",
  "names": []
}
