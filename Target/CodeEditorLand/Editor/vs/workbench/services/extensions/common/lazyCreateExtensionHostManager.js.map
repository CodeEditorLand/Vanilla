{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/extensions/common/lazyCreateExtensionHostManager.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Barrier } from \"../../../../base/common/async.js\";\nimport { Emitter, type Event } from \"../../../../base/common/event.js\";\nimport { Disposable } from \"../../../../base/common/lifecycle.js\";\nimport type { URI } from \"../../../../base/common/uri.js\";\nimport type {\n\tExtensionIdentifier,\n\tIExtensionDescription,\n} from \"../../../../platform/extensions/common/extensions.js\";\nimport { IInstantiationService } from \"../../../../platform/instantiation/common/instantiation.js\";\nimport { ILogService } from \"../../../../platform/log/common/log.js\";\nimport { RemoteAuthorityResolverErrorCode } from \"../../../../platform/remote/common/remoteAuthorityResolver.js\";\nimport type { ExtensionHostKind } from \"./extensionHostKind.js\";\nimport {\n\tExtensionHostManager,\n\tfriendlyExtHostName,\n} from \"./extensionHostManager.js\";\nimport type { IExtensionHostManager } from \"./extensionHostManagers.js\";\nimport type { IExtensionDescriptionDelta } from \"./extensionHostProtocol.js\";\nimport type { IResolveAuthorityResult } from \"./extensionHostProxy.js\";\nimport type { ExtensionRunningLocation } from \"./extensionRunningLocation.js\";\nimport {\n\tActivationKind,\n\ttype ExtensionActivationReason,\n\tExtensionHostExtensions,\n\ttype ExtensionHostStartup,\n\ttype IExtensionHost,\n\ttype IInternalExtensionService,\n} from \"./extensions.js\";\nimport type { ResponsiveState } from \"./rpcProtocol.js\";\n\n/**\n * Waits until `start()` and only if it has extensions proceeds to really start.\n */\nexport class LazyCreateExtensionHostManager\n\textends Disposable\n\timplements IExtensionHostManager\n{\n\tpublic readonly onDidExit: Event<[number, string | null]>;\n\tprivate readonly _onDidChangeResponsiveState: Emitter<ResponsiveState> =\n\t\tthis._register(new Emitter<ResponsiveState>());\n\tpublic readonly onDidChangeResponsiveState: Event<ResponsiveState> =\n\t\tthis._onDidChangeResponsiveState.event;\n\n\tprivate readonly _extensionHost: IExtensionHost;\n\tprivate _startCalled: Barrier;\n\tprivate _actual: ExtensionHostManager | null;\n\tprivate _lazyStartExtensions: ExtensionHostExtensions | null;\n\n\tpublic get pid(): number | null {\n\t\tif (this._actual) {\n\t\t\treturn this._actual.pid;\n\t\t}\n\t\treturn null;\n\t}\n\n\tpublic get kind(): ExtensionHostKind {\n\t\treturn this._extensionHost.runningLocation.kind;\n\t}\n\n\tpublic get startup(): ExtensionHostStartup {\n\t\treturn this._extensionHost.startup;\n\t}\n\n\tpublic get friendyName(): string {\n\t\treturn friendlyExtHostName(this.kind, this.pid);\n\t}\n\n\tconstructor(\n\t\textensionHost: IExtensionHost,\n\t\tprivate readonly _internalExtensionService: IInternalExtensionService,\n\t\t@IInstantiationService\n\t\tprivate readonly _instantiationService: IInstantiationService,\n\t\t@ILogService private readonly _logService: ILogService,\n\t) {\n\t\tsuper();\n\t\tthis._extensionHost = extensionHost;\n\t\tthis.onDidExit = extensionHost.onExit;\n\t\tthis._startCalled = new Barrier();\n\t\tthis._actual = null;\n\t\tthis._lazyStartExtensions = null;\n\t}\n\n\tprivate _createActual(reason: string): ExtensionHostManager {\n\t\tthis._logService.info(\n\t\t\t`Creating lazy extension host (${this.friendyName}). Reason: ${reason}`,\n\t\t);\n\t\tthis._actual = this._register(\n\t\t\tthis._instantiationService.createInstance(\n\t\t\t\tExtensionHostManager,\n\t\t\t\tthis._extensionHost,\n\t\t\t\t[],\n\t\t\t\tthis._internalExtensionService,\n\t\t\t),\n\t\t);\n\t\tthis._register(\n\t\t\tthis._actual.onDidChangeResponsiveState((e) =>\n\t\t\t\tthis._onDidChangeResponsiveState.fire(e),\n\t\t\t),\n\t\t);\n\t\treturn this._actual;\n\t}\n\n\tprivate async _getOrCreateActualAndStart(\n\t\treason: string,\n\t): Promise<ExtensionHostManager> {\n\t\tif (this._actual) {\n\t\t\t// already created/started\n\t\t\treturn this._actual;\n\t\t}\n\t\tconst actual = this._createActual(reason);\n\t\tawait actual.start(\n\t\t\tthis._lazyStartExtensions!.versionId,\n\t\t\tthis._lazyStartExtensions!.allExtensions,\n\t\t\tthis._lazyStartExtensions!.myExtensions,\n\t\t);\n\t\treturn actual;\n\t}\n\n\tpublic async ready(): Promise<void> {\n\t\tawait this._startCalled.wait();\n\t\tif (this._actual) {\n\t\t\tawait this._actual.ready();\n\t\t}\n\t}\n\tpublic async disconnect(): Promise<void> {\n\t\tawait this._actual?.disconnect();\n\t}\n\tpublic representsRunningLocation(\n\t\trunningLocation: ExtensionRunningLocation,\n\t): boolean {\n\t\treturn this._extensionHost.runningLocation.equals(runningLocation);\n\t}\n\tpublic async deltaExtensions(\n\t\textensionsDelta: IExtensionDescriptionDelta,\n\t): Promise<void> {\n\t\tawait this._startCalled.wait();\n\t\tif (this._actual) {\n\t\t\treturn this._actual.deltaExtensions(extensionsDelta);\n\t\t}\n\t\tthis._lazyStartExtensions!.delta(extensionsDelta);\n\t\tif (extensionsDelta.myToAdd.length > 0) {\n\t\t\tconst actual = this._createActual(\n\t\t\t\t`contains ${extensionsDelta.myToAdd.length} new extension(s) (installed or enabled): ${extensionsDelta.myToAdd.map((extId) => extId.value)}`,\n\t\t\t);\n\t\t\tawait actual.start(\n\t\t\t\tthis._lazyStartExtensions!.versionId,\n\t\t\t\tthis._lazyStartExtensions!.allExtensions,\n\t\t\t\tthis._lazyStartExtensions!.myExtensions,\n\t\t\t);\n\t\t\treturn;\n\t\t}\n\t}\n\tpublic containsExtension(extensionId: ExtensionIdentifier): boolean {\n\t\treturn (\n\t\t\tthis._extensionHost.extensions?.containsExtension(extensionId) ??\n\t\t\tfalse\n\t\t);\n\t}\n\tpublic async activate(\n\t\textension: ExtensionIdentifier,\n\t\treason: ExtensionActivationReason,\n\t): Promise<boolean> {\n\t\tawait this._startCalled.wait();\n\t\tif (this._actual) {\n\t\t\treturn this._actual.activate(extension, reason);\n\t\t}\n\t\treturn false;\n\t}\n\tpublic async activateByEvent(\n\t\tactivationEvent: string,\n\t\tactivationKind: ActivationKind,\n\t): Promise<void> {\n\t\tif (activationKind === ActivationKind.Immediate) {\n\t\t\t// this is an immediate request, so we cannot wait for start to be called\n\t\t\tif (this._actual) {\n\t\t\t\treturn this._actual.activateByEvent(\n\t\t\t\t\tactivationEvent,\n\t\t\t\t\tactivationKind,\n\t\t\t\t);\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\t\tawait this._startCalled.wait();\n\t\tif (this._actual) {\n\t\t\treturn this._actual.activateByEvent(\n\t\t\t\tactivationEvent,\n\t\t\t\tactivationKind,\n\t\t\t);\n\t\t}\n\t}\n\tpublic activationEventIsDone(activationEvent: string): boolean {\n\t\tif (!this._startCalled.isOpen()) {\n\t\t\treturn false;\n\t\t}\n\t\tif (this._actual) {\n\t\t\treturn this._actual.activationEventIsDone(activationEvent);\n\t\t}\n\t\treturn true;\n\t}\n\tpublic async getInspectPort(\n\t\ttryEnableInspector: boolean,\n\t): Promise<{ port: number; host: string } | undefined> {\n\t\tawait this._startCalled.wait();\n\t\treturn this._actual?.getInspectPort(tryEnableInspector);\n\t}\n\tpublic async resolveAuthority(\n\t\tremoteAuthority: string,\n\t\tresolveAttempt: number,\n\t): Promise<IResolveAuthorityResult> {\n\t\tawait this._startCalled.wait();\n\t\tif (this._actual) {\n\t\t\treturn this._actual.resolveAuthority(\n\t\t\t\tremoteAuthority,\n\t\t\t\tresolveAttempt,\n\t\t\t);\n\t\t}\n\t\treturn {\n\t\t\ttype: \"error\",\n\t\t\terror: {\n\t\t\t\tmessage: `Cannot resolve authority`,\n\t\t\t\tcode: RemoteAuthorityResolverErrorCode.Unknown,\n\t\t\t\tdetail: undefined,\n\t\t\t},\n\t\t};\n\t}\n\tpublic async getCanonicalURI(\n\t\tremoteAuthority: string,\n\t\turi: URI,\n\t): Promise<URI | null> {\n\t\tawait this._startCalled.wait();\n\t\tif (this._actual) {\n\t\t\treturn this._actual.getCanonicalURI(remoteAuthority, uri);\n\t\t}\n\t\tthrow new Error(`Cannot resolve canonical URI`);\n\t}\n\tpublic async start(\n\t\textensionRegistryVersionId: number,\n\t\tallExtensions: IExtensionDescription[],\n\t\tmyExtensions: ExtensionIdentifier[],\n\t): Promise<void> {\n\t\tif (myExtensions.length > 0) {\n\t\t\t// there are actual extensions, so let's launch the extension host\n\t\t\tconst actual = this._createActual(\n\t\t\t\t`contains ${myExtensions.length} extension(s): ${myExtensions.map((extId) => extId.value)}.`,\n\t\t\t);\n\t\t\tconst result = actual.start(\n\t\t\t\textensionRegistryVersionId,\n\t\t\t\tallExtensions,\n\t\t\t\tmyExtensions,\n\t\t\t);\n\t\t\tthis._startCalled.open();\n\t\t\treturn result;\n\t\t}\n\t\t// there are no actual extensions running, store extensions in `this._lazyStartExtensions`\n\t\tthis._lazyStartExtensions = new ExtensionHostExtensions(\n\t\t\textensionRegistryVersionId,\n\t\t\tallExtensions,\n\t\t\tmyExtensions,\n\t\t);\n\t\tthis._startCalled.open();\n\t}\n\tpublic async extensionTestsExecute(): Promise<number> {\n\t\tawait this._startCalled.wait();\n\t\tconst actual = await this._getOrCreateActualAndStart(`execute tests.`);\n\t\treturn actual.extensionTestsExecute();\n\t}\n\tpublic async setRemoteEnvironment(env: {\n\t\t[key: string]: string | null;\n\t}): Promise<void> {\n\t\tawait this._startCalled.wait();\n\t\tif (this._actual) {\n\t\t\treturn this._actual.setRemoteEnvironment(env);\n\t\t}\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
