{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/extensions/common/extensionsUtil.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { ExtensionIdentifierMap, IExtensionDescription } from '../../../../platform/extensions/common/extensions.js';\nimport { localize } from '../../../../nls.js';\nimport { ILogService } from '../../../../platform/log/common/log.js';\nimport * as semver from '../../../../base/common/semver/semver.js';\nimport { Mutable } from '../../../../base/common/types.js';\n\n// TODO: @sandy081 merge this with deduping in extensionsScannerService.ts\nexport function dedupExtensions(system: IExtensionDescription[], user: IExtensionDescription[], workspace: IExtensionDescription[], development: IExtensionDescription[], logService: ILogService): IExtensionDescription[] {\n\tconst result = new ExtensionIdentifierMap<IExtensionDescription>();\n\tsystem.forEach((systemExtension) => {\n\t\tconst extension = result.get(systemExtension.identifier);\n\t\tif (extension) {\n\t\t\tlogService.warn(localize('overwritingExtension', \"Overwriting extension {0} with {1}.\", extension.extensionLocation.fsPath, systemExtension.extensionLocation.fsPath));\n\t\t}\n\t\tresult.set(systemExtension.identifier, systemExtension);\n\t});\n\tuser.forEach((userExtension) => {\n\t\tconst extension = result.get(userExtension.identifier);\n\t\tif (extension) {\n\t\t\tif (extension.isBuiltin) {\n\t\t\t\tif (semver.gte(extension.version, userExtension.version)) {\n\t\t\t\t\tlogService.warn(`Skipping extension ${userExtension.extensionLocation.path} in favour of the builtin extension ${extension.extensionLocation.path}.`);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\t// Overwriting a builtin extension inherits the `isBuiltin` property and it doesn't show a warning\n\t\t\t\t(<Mutable<IExtensionDescription>>userExtension).isBuiltin = true;\n\t\t\t} else {\n\t\t\t\tlogService.warn(localize('overwritingExtension', \"Overwriting extension {0} with {1}.\", extension.extensionLocation.fsPath, userExtension.extensionLocation.fsPath));\n\t\t\t}\n\t\t} else if (userExtension.isBuiltin) {\n\t\t\tlogService.warn(`Skipping obsolete builtin extension ${userExtension.extensionLocation.path}`);\n\t\t\treturn;\n\t\t}\n\t\tresult.set(userExtension.identifier, userExtension);\n\t});\n\tworkspace.forEach(workspaceExtension => {\n\t\tconst extension = result.get(workspaceExtension.identifier);\n\t\tif (extension) {\n\t\t\tlogService.warn(localize('overwritingWithWorkspaceExtension', \"Overwriting {0} with Workspace Extension {1}.\", extension.extensionLocation.fsPath, workspaceExtension.extensionLocation.fsPath));\n\t\t}\n\t\tresult.set(workspaceExtension.identifier, workspaceExtension);\n\t});\n\tdevelopment.forEach(developedExtension => {\n\t\tlogService.info(localize('extensionUnderDevelopment', \"Loading development extension at {0}\", developedExtension.extensionLocation.fsPath));\n\t\tconst extension = result.get(developedExtension.identifier);\n\t\tif (extension) {\n\t\t\tif (extension.isBuiltin) {\n\t\t\t\t// Overwriting a builtin extension inherits the `isBuiltin` property\n\t\t\t\t(<Mutable<IExtensionDescription>>developedExtension).isBuiltin = true;\n\t\t\t}\n\t\t}\n\t\tresult.set(developedExtension.identifier, developedExtension);\n\t});\n\treturn Array.from(result.values());\n}\n"],
  "mappings": ";;AAKA,SAAS,wBAAwB,6BAA6B;AAC9D,SAAS,gBAAgB;AACzB,SAAS,mBAAmB;AAC5B,YAAY,YAAY;AACxB,SAAS,eAAe;AAGjB,SAAS,gBAAgB,QAAiC,MAA+B,WAAoC,aAAsC,YAAkD;AAC3N,QAAM,SAAS,IAAI,uBAA8C;AACjE,SAAO,QAAQ,CAAC,oBAAoB;AACnC,UAAM,YAAY,OAAO,IAAI,gBAAgB,UAAU;AACvD,QAAI,WAAW;AACd,iBAAW,KAAK,SAAS,wBAAwB,uCAAuC,UAAU,kBAAkB,QAAQ,gBAAgB,kBAAkB,MAAM,CAAC;AAAA,IACtK;AACA,WAAO,IAAI,gBAAgB,YAAY,eAAe;AAAA,EACvD,CAAC;AACD,OAAK,QAAQ,CAAC,kBAAkB;AAC/B,UAAM,YAAY,OAAO,IAAI,cAAc,UAAU;AACrD,QAAI,WAAW;AACd,UAAI,UAAU,WAAW;AACxB,YAAI,OAAO,IAAI,UAAU,SAAS,cAAc,OAAO,GAAG;AACzD,qBAAW,KAAK,sBAAsB,cAAc,kBAAkB,IAAI,uCAAuC,UAAU,kBAAkB,IAAI,GAAG;AACpJ;AAAA,QACD;AAEA,QAAiC,cAAe,YAAY;AAAA,MAC7D,OAAO;AACN,mBAAW,KAAK,SAAS,wBAAwB,uCAAuC,UAAU,kBAAkB,QAAQ,cAAc,kBAAkB,MAAM,CAAC;AAAA,MACpK;AAAA,IACD,WAAW,cAAc,WAAW;AACnC,iBAAW,KAAK,uCAAuC,cAAc,kBAAkB,IAAI,EAAE;AAC7F;AAAA,IACD;AACA,WAAO,IAAI,cAAc,YAAY,aAAa;AAAA,EACnD,CAAC;AACD,YAAU,QAAQ,wBAAsB;AACvC,UAAM,YAAY,OAAO,IAAI,mBAAmB,UAAU;AAC1D,QAAI,WAAW;AACd,iBAAW,KAAK,SAAS,qCAAqC,iDAAiD,UAAU,kBAAkB,QAAQ,mBAAmB,kBAAkB,MAAM,CAAC;AAAA,IAChM;AACA,WAAO,IAAI,mBAAmB,YAAY,kBAAkB;AAAA,EAC7D,CAAC;AACD,cAAY,QAAQ,wBAAsB;AACzC,eAAW,KAAK,SAAS,6BAA6B,wCAAwC,mBAAmB,kBAAkB,MAAM,CAAC;AAC1I,UAAM,YAAY,OAAO,IAAI,mBAAmB,UAAU;AAC1D,QAAI,WAAW;AACd,UAAI,UAAU,WAAW;AAExB,QAAiC,mBAAoB,YAAY;AAAA,MAClE;AAAA,IACD;AACA,WAAO,IAAI,mBAAmB,YAAY,kBAAkB;AAAA,EAC7D,CAAC;AACD,SAAO,MAAM,KAAK,OAAO,OAAO,CAAC;AAClC;AA/CgB;",
  "names": []
}
