{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/extensions/common/extensionsUtil.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as semver from \"../../../../base/common/semver/semver.js\";\nimport type { Mutable } from \"../../../../base/common/types.js\";\nimport { localize } from \"../../../../nls.js\";\nimport {\n\tExtensionIdentifierMap,\n\ttype IExtensionDescription,\n} from \"../../../../platform/extensions/common/extensions.js\";\nimport type { ILogService } from \"../../../../platform/log/common/log.js\";\n\n// TODO: @sandy081 merge this with deduping in extensionsScannerService.ts\nexport function dedupExtensions(\n\tsystem: IExtensionDescription[],\n\tuser: IExtensionDescription[],\n\tworkspace: IExtensionDescription[],\n\tdevelopment: IExtensionDescription[],\n\tlogService: ILogService,\n): IExtensionDescription[] {\n\tconst result = new ExtensionIdentifierMap<IExtensionDescription>();\n\tsystem.forEach((systemExtension) => {\n\t\tconst extension = result.get(systemExtension.identifier);\n\t\tif (extension) {\n\t\t\tlogService.warn(\n\t\t\t\tlocalize(\n\t\t\t\t\t\"overwritingExtension\",\n\t\t\t\t\t\"Overwriting extension {0} with {1}.\",\n\t\t\t\t\textension.extensionLocation.fsPath,\n\t\t\t\t\tsystemExtension.extensionLocation.fsPath,\n\t\t\t\t),\n\t\t\t);\n\t\t}\n\t\tresult.set(systemExtension.identifier, systemExtension);\n\t});\n\tuser.forEach((userExtension) => {\n\t\tconst extension = result.get(userExtension.identifier);\n\t\tif (extension) {\n\t\t\tif (extension.isBuiltin) {\n\t\t\t\tif (semver.gte(extension.version, userExtension.version)) {\n\t\t\t\t\tlogService.warn(\n\t\t\t\t\t\t`Skipping extension ${userExtension.extensionLocation.path} in favour of the builtin extension ${extension.extensionLocation.path}.`,\n\t\t\t\t\t);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\t// Overwriting a builtin extension inherits the `isBuiltin` property and it doesn't show a warning\n\t\t\t\t(<Mutable<IExtensionDescription>>(\n\t\t\t\t\tuserExtension\n\t\t\t\t)).isBuiltin = true;\n\t\t\t} else {\n\t\t\t\tlogService.warn(\n\t\t\t\t\tlocalize(\n\t\t\t\t\t\t\"overwritingExtension\",\n\t\t\t\t\t\t\"Overwriting extension {0} with {1}.\",\n\t\t\t\t\t\textension.extensionLocation.fsPath,\n\t\t\t\t\t\tuserExtension.extensionLocation.fsPath,\n\t\t\t\t\t),\n\t\t\t\t);\n\t\t\t}\n\t\t} else if (userExtension.isBuiltin) {\n\t\t\tlogService.warn(\n\t\t\t\t`Skipping obsolete builtin extension ${userExtension.extensionLocation.path}`,\n\t\t\t);\n\t\t\treturn;\n\t\t}\n\t\tresult.set(userExtension.identifier, userExtension);\n\t});\n\tworkspace.forEach((workspaceExtension) => {\n\t\tconst extension = result.get(workspaceExtension.identifier);\n\t\tif (extension) {\n\t\t\tlogService.warn(\n\t\t\t\tlocalize(\n\t\t\t\t\t\"overwritingWithWorkspaceExtension\",\n\t\t\t\t\t\"Overwriting {0} with Workspace Extension {1}.\",\n\t\t\t\t\textension.extensionLocation.fsPath,\n\t\t\t\t\tworkspaceExtension.extensionLocation.fsPath,\n\t\t\t\t),\n\t\t\t);\n\t\t}\n\t\tresult.set(workspaceExtension.identifier, workspaceExtension);\n\t});\n\tdevelopment.forEach((developedExtension) => {\n\t\tlogService.info(\n\t\t\tlocalize(\n\t\t\t\t\"extensionUnderDevelopment\",\n\t\t\t\t\"Loading development extension at {0}\",\n\t\t\t\tdevelopedExtension.extensionLocation.fsPath,\n\t\t\t),\n\t\t);\n\t\tconst extension = result.get(developedExtension.identifier);\n\t\tif (extension) {\n\t\t\tif (extension.isBuiltin) {\n\t\t\t\t// Overwriting a builtin extension inherits the `isBuiltin` property\n\t\t\t\t(<Mutable<IExtensionDescription>>(\n\t\t\t\t\tdevelopedExtension\n\t\t\t\t)).isBuiltin = true;\n\t\t\t}\n\t\t}\n\t\tresult.set(developedExtension.identifier, developedExtension);\n\t});\n\treturn Array.from(result.values());\n}\n"],
  "mappings": ";;AAKA,YAAY,YAAY;AAExB,SAAS,gBAAgB;AACzB;AAAA,EACC;AAAA,OAEM;AAIA,SAAS,gBACf,QACA,MACA,WACA,aACA,YAC0B;AAC1B,QAAM,SAAS,IAAI,uBAA8C;AACjE,SAAO,QAAQ,CAAC,oBAAoB;AACnC,UAAM,YAAY,OAAO,IAAI,gBAAgB,UAAU;AACvD,QAAI,WAAW;AACd,iBAAW;AAAA,QACV;AAAA,UACC;AAAA,UACA;AAAA,UACA,UAAU,kBAAkB;AAAA,UAC5B,gBAAgB,kBAAkB;AAAA,QACnC;AAAA,MACD;AAAA,IACD;AACA,WAAO,IAAI,gBAAgB,YAAY,eAAe;AAAA,EACvD,CAAC;AACD,OAAK,QAAQ,CAAC,kBAAkB;AAC/B,UAAM,YAAY,OAAO,IAAI,cAAc,UAAU;AACrD,QAAI,WAAW;AACd,UAAI,UAAU,WAAW;AACxB,YAAI,OAAO,IAAI,UAAU,SAAS,cAAc,OAAO,GAAG;AACzD,qBAAW;AAAA,YACV,sBAAsB,cAAc,kBAAkB,IAAI,uCAAuC,UAAU,kBAAkB,IAAI;AAAA,UAClI;AACA;AAAA,QACD;AAEA,QACC,cACE,YAAY;AAAA,MAChB,OAAO;AACN,mBAAW;AAAA,UACV;AAAA,YACC;AAAA,YACA;AAAA,YACA,UAAU,kBAAkB;AAAA,YAC5B,cAAc,kBAAkB;AAAA,UACjC;AAAA,QACD;AAAA,MACD;AAAA,IACD,WAAW,cAAc,WAAW;AACnC,iBAAW;AAAA,QACV,uCAAuC,cAAc,kBAAkB,IAAI;AAAA,MAC5E;AACA;AAAA,IACD;AACA,WAAO,IAAI,cAAc,YAAY,aAAa;AAAA,EACnD,CAAC;AACD,YAAU,QAAQ,CAAC,uBAAuB;AACzC,UAAM,YAAY,OAAO,IAAI,mBAAmB,UAAU;AAC1D,QAAI,WAAW;AACd,iBAAW;AAAA,QACV;AAAA,UACC;AAAA,UACA;AAAA,UACA,UAAU,kBAAkB;AAAA,UAC5B,mBAAmB,kBAAkB;AAAA,QACtC;AAAA,MACD;AAAA,IACD;AACA,WAAO,IAAI,mBAAmB,YAAY,kBAAkB;AAAA,EAC7D,CAAC;AACD,cAAY,QAAQ,CAAC,uBAAuB;AAC3C,eAAW;AAAA,MACV;AAAA,QACC;AAAA,QACA;AAAA,QACA,mBAAmB,kBAAkB;AAAA,MACtC;AAAA,IACD;AACA,UAAM,YAAY,OAAO,IAAI,mBAAmB,UAAU;AAC1D,QAAI,WAAW;AACd,UAAI,UAAU,WAAW;AAExB,QACC,mBACE,YAAY;AAAA,MAChB;AAAA,IACD;AACA,WAAO,IAAI,mBAAmB,YAAY,kBAAkB;AAAA,EAC7D,CAAC;AACD,SAAO,MAAM,KAAK,OAAO,OAAO,CAAC;AAClC;AAxFgB;",
  "names": []
}
