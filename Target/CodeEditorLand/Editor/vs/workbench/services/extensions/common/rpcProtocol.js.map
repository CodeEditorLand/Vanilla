{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/extensions/common/rpcProtocol.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { RunOnceScheduler } from \"../../../../base/common/async.js\";\nimport { VSBuffer } from \"../../../../base/common/buffer.js\";\nimport {\n\tCancellationToken,\n\tCancellationTokenSource,\n} from \"../../../../base/common/cancellation.js\";\nimport { CharCode } from \"../../../../base/common/charCode.js\";\nimport * as errors from \"../../../../base/common/errors.js\";\nimport { Emitter, type Event } from \"../../../../base/common/event.js\";\nimport {\n\tDisposable,\n\tDisposableStore,\n\ttype IDisposable,\n} from \"../../../../base/common/lifecycle.js\";\nimport type { MarshalledObject } from \"../../../../base/common/marshalling.js\";\nimport { MarshalledId } from \"../../../../base/common/marshallingIds.js\";\nimport {\n\ttype IURITransformer,\n\ttransformIncomingURIs,\n} from \"../../../../base/common/uriIpc.js\";\nimport type { IMessagePassingProtocol } from \"../../../../base/parts/ipc/common/ipc.js\";\nimport { CanceledLazyPromise, LazyPromise } from \"./lazyPromise.js\";\nimport {\n\ttype IRPCProtocol,\n\ttype Proxied,\n\tProxyIdentifier,\n\tSerializableObjectWithBuffers,\n\tgetStringIdentifierForProxy,\n} from \"./proxyIdentifier.js\";\n\nexport interface JSONStringifyReplacer {\n\t(key: string, value: any): any;\n}\n\nfunction safeStringify(\n\tobj: any,\n\treplacer: JSONStringifyReplacer | null,\n): string {\n\ttry {\n\t\treturn JSON.stringify(obj, <(key: string, value: any) => any>replacer);\n\t} catch (err) {\n\t\treturn \"null\";\n\t}\n}\n\nconst refSymbolName = \"$$ref$$\";\nconst undefinedRef = { [refSymbolName]: -1 } as const;\n\nclass StringifiedJsonWithBufferRefs {\n\tconstructor(\n\t\tpublic readonly jsonString: string,\n\t\tpublic readonly referencedBuffers: readonly VSBuffer[],\n\t) {}\n}\n\nexport function stringifyJsonWithBufferRefs<T>(\n\tobj: T,\n\treplacer: JSONStringifyReplacer | null = null,\n\tuseSafeStringify = false,\n): StringifiedJsonWithBufferRefs {\n\tconst foundBuffers: VSBuffer[] = [];\n\tconst serialized = (useSafeStringify ? safeStringify : JSON.stringify)(\n\t\tobj,\n\t\t(key, value) => {\n\t\t\tif (typeof value === \"undefined\") {\n\t\t\t\treturn undefinedRef; // JSON.stringify normally converts 'undefined' to 'null'\n\t\t\t} else if (typeof value === \"object\") {\n\t\t\t\tif (value instanceof VSBuffer) {\n\t\t\t\t\tconst bufferIndex = foundBuffers.push(value) - 1;\n\t\t\t\t\treturn { [refSymbolName]: bufferIndex };\n\t\t\t\t}\n\t\t\t\tif (replacer) {\n\t\t\t\t\treturn replacer(key, value);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn value;\n\t\t},\n\t);\n\treturn {\n\t\tjsonString: serialized,\n\t\treferencedBuffers: foundBuffers,\n\t};\n}\n\nexport function parseJsonAndRestoreBufferRefs(\n\tjsonString: string,\n\tbuffers: readonly VSBuffer[],\n\turiTransformer: IURITransformer | null,\n): any {\n\treturn JSON.parse(jsonString, (_key, value) => {\n\t\tif (value) {\n\t\t\tconst ref = value[refSymbolName];\n\t\t\tif (typeof ref === \"number\") {\n\t\t\t\treturn buffers[ref];\n\t\t\t}\n\n\t\t\tif (\n\t\t\t\turiTransformer &&\n\t\t\t\t(<MarshalledObject>value).$mid === MarshalledId.Uri\n\t\t\t) {\n\t\t\t\treturn uriTransformer.transformIncoming(value);\n\t\t\t}\n\t\t}\n\t\treturn value;\n\t});\n}\n\nfunction stringify(obj: any, replacer: JSONStringifyReplacer | null): string {\n\treturn JSON.stringify(obj, <(key: string, value: any) => any>replacer);\n}\n\nfunction createURIReplacer(\n\ttransformer: IURITransformer | null,\n): JSONStringifyReplacer | null {\n\tif (!transformer) {\n\t\treturn null;\n\t}\n\treturn (key: string, value: any): any => {\n\t\tif (value && value.$mid === MarshalledId.Uri) {\n\t\t\treturn transformer.transformOutgoing(value);\n\t\t}\n\t\treturn value;\n\t};\n}\n\nexport enum RequestInitiator {\n\tLocalSide = 0,\n\tOtherSide = 1,\n}\n\nexport enum ResponsiveState {\n\tResponsive = 0,\n\tUnresponsive = 1,\n}\n\nexport interface IRPCProtocolLogger {\n\tlogIncoming(\n\t\tmsgLength: number,\n\t\treq: number,\n\t\tinitiator: RequestInitiator,\n\t\tstr: string,\n\t\tdata?: any,\n\t): void;\n\tlogOutgoing(\n\t\tmsgLength: number,\n\t\treq: number,\n\t\tinitiator: RequestInitiator,\n\t\tstr: string,\n\t\tdata?: any,\n\t): void;\n}\n\nconst noop = () => {};\n\nconst _RPCProtocolSymbol = Symbol.for(\"rpcProtocol\");\nconst _RPCProxySymbol = Symbol.for(\"rpcProxy\");\n\nexport class RPCProtocol extends Disposable implements IRPCProtocol {\n\t[_RPCProtocolSymbol] = true;\n\n\tprivate static readonly UNRESPONSIVE_TIME = 3 * 1000; // 3s\n\n\tprivate readonly _onDidChangeResponsiveState: Emitter<ResponsiveState> =\n\t\tthis._register(new Emitter<ResponsiveState>());\n\tpublic readonly onDidChangeResponsiveState: Event<ResponsiveState> =\n\t\tthis._onDidChangeResponsiveState.event;\n\n\tprivate readonly _protocol: IMessagePassingProtocol;\n\tprivate readonly _logger: IRPCProtocolLogger | null;\n\tprivate readonly _uriTransformer: IURITransformer | null;\n\tprivate readonly _uriReplacer: JSONStringifyReplacer | null;\n\tprivate _isDisposed: boolean;\n\tprivate readonly _locals: any[];\n\tprivate readonly _proxies: any[];\n\tprivate _lastMessageId: number;\n\tprivate readonly _cancelInvokedHandlers: { [req: string]: () => void };\n\tprivate readonly _pendingRPCReplies: { [msgId: string]: PendingRPCReply };\n\tprivate _responsiveState: ResponsiveState;\n\tprivate _unacknowledgedCount: number;\n\tprivate _unresponsiveTime: number;\n\tprivate _asyncCheckUresponsive: RunOnceScheduler;\n\n\tconstructor(\n\t\tprotocol: IMessagePassingProtocol,\n\t\tlogger: IRPCProtocolLogger | null = null,\n\t\ttransformer: IURITransformer | null = null,\n\t) {\n\t\tsuper();\n\t\tthis._protocol = protocol;\n\t\tthis._logger = logger;\n\t\tthis._uriTransformer = transformer;\n\t\tthis._uriReplacer = createURIReplacer(this._uriTransformer);\n\t\tthis._isDisposed = false;\n\t\tthis._locals = [];\n\t\tthis._proxies = [];\n\t\tfor (let i = 0, len = ProxyIdentifier.count; i < len; i++) {\n\t\t\tthis._locals[i] = null;\n\t\t\tthis._proxies[i] = null;\n\t\t}\n\t\tthis._lastMessageId = 0;\n\t\tthis._cancelInvokedHandlers = Object.create(null);\n\t\tthis._pendingRPCReplies = {};\n\t\tthis._responsiveState = ResponsiveState.Responsive;\n\t\tthis._unacknowledgedCount = 0;\n\t\tthis._unresponsiveTime = 0;\n\t\tthis._asyncCheckUresponsive = this._register(\n\t\t\tnew RunOnceScheduler(() => this._checkUnresponsive(), 1000),\n\t\t);\n\t\tthis._register(\n\t\t\tthis._protocol.onMessage((msg) => this._receiveOneMessage(msg)),\n\t\t);\n\t}\n\n\tpublic override dispose(): void {\n\t\tthis._isDisposed = true;\n\n\t\t// Release all outstanding promises with a canceled error\n\t\tObject.keys(this._pendingRPCReplies).forEach((msgId) => {\n\t\t\tconst pending = this._pendingRPCReplies[msgId];\n\t\t\tdelete this._pendingRPCReplies[msgId];\n\t\t\tpending.resolveErr(errors.canceled());\n\t\t});\n\n\t\tsuper.dispose();\n\t}\n\n\tpublic drain(): Promise<void> {\n\t\tif (typeof this._protocol.drain === \"function\") {\n\t\t\treturn this._protocol.drain();\n\t\t}\n\t\treturn Promise.resolve();\n\t}\n\n\tprivate _onWillSendRequest(req: number): void {\n\t\tif (this._unacknowledgedCount === 0) {\n\t\t\t// Since this is the first request we are sending in a while,\n\t\t\t// mark this moment as the start for the countdown to unresponsive time\n\t\t\tthis._unresponsiveTime = Date.now() + RPCProtocol.UNRESPONSIVE_TIME;\n\t\t}\n\t\tthis._unacknowledgedCount++;\n\t\tif (!this._asyncCheckUresponsive.isScheduled()) {\n\t\t\tthis._asyncCheckUresponsive.schedule();\n\t\t}\n\t}\n\n\tprivate _onDidReceiveAcknowledge(req: number): void {\n\t\t// The next possible unresponsive time is now + delta.\n\t\tthis._unresponsiveTime = Date.now() + RPCProtocol.UNRESPONSIVE_TIME;\n\t\tthis._unacknowledgedCount--;\n\t\tif (this._unacknowledgedCount === 0) {\n\t\t\t// No more need to check for unresponsive\n\t\t\tthis._asyncCheckUresponsive.cancel();\n\t\t}\n\t\t// The ext host is responsive!\n\t\tthis._setResponsiveState(ResponsiveState.Responsive);\n\t}\n\n\tprivate _checkUnresponsive(): void {\n\t\tif (this._unacknowledgedCount === 0) {\n\t\t\t// Not waiting for anything => cannot say if it is responsive or not\n\t\t\treturn;\n\t\t}\n\n\t\tif (Date.now() > this._unresponsiveTime) {\n\t\t\t// Unresponsive!!\n\t\t\tthis._setResponsiveState(ResponsiveState.Unresponsive);\n\t\t} else {\n\t\t\t// Not (yet) unresponsive, be sure to check again soon\n\t\t\tthis._asyncCheckUresponsive.schedule();\n\t\t}\n\t}\n\n\tprivate _setResponsiveState(newResponsiveState: ResponsiveState): void {\n\t\tif (this._responsiveState === newResponsiveState) {\n\t\t\t// no change\n\t\t\treturn;\n\t\t}\n\t\tthis._responsiveState = newResponsiveState;\n\t\tthis._onDidChangeResponsiveState.fire(this._responsiveState);\n\t}\n\n\tpublic get responsiveState(): ResponsiveState {\n\t\treturn this._responsiveState;\n\t}\n\n\tpublic transformIncomingURIs<T>(obj: T): T {\n\t\tif (!this._uriTransformer) {\n\t\t\treturn obj;\n\t\t}\n\t\treturn transformIncomingURIs(obj, this._uriTransformer);\n\t}\n\n\tpublic getProxy<T>(identifier: ProxyIdentifier<T>): Proxied<T> {\n\t\tconst { nid: rpcId, sid } = identifier;\n\t\tif (!this._proxies[rpcId]) {\n\t\t\tthis._proxies[rpcId] = this._createProxy(rpcId, sid);\n\t\t}\n\t\treturn this._proxies[rpcId];\n\t}\n\n\tprivate _createProxy<T>(rpcId: number, debugName: string): T {\n\t\tconst handler = {\n\t\t\tget: (target: any, name: PropertyKey) => {\n\t\t\t\tif (\n\t\t\t\t\ttypeof name === \"string\" &&\n\t\t\t\t\t!target[name] &&\n\t\t\t\t\tname.charCodeAt(0) === CharCode.DollarSign\n\t\t\t\t) {\n\t\t\t\t\ttarget[name] = (...myArgs: any[]) => {\n\t\t\t\t\t\treturn this._remoteCall(rpcId, name, myArgs);\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t\tif (name === _RPCProxySymbol) {\n\t\t\t\t\treturn debugName;\n\t\t\t\t}\n\t\t\t\treturn target[name];\n\t\t\t},\n\t\t};\n\t\treturn new Proxy(Object.create(null), handler);\n\t}\n\n\tpublic set<T, R extends T>(identifier: ProxyIdentifier<T>, value: R): R {\n\t\tthis._locals[identifier.nid] = value;\n\t\treturn value;\n\t}\n\n\tpublic assertRegistered(identifiers: ProxyIdentifier<any>[]): void {\n\t\tfor (let i = 0, len = identifiers.length; i < len; i++) {\n\t\t\tconst identifier = identifiers[i];\n\t\t\tif (!this._locals[identifier.nid]) {\n\t\t\t\tthrow new Error(`Missing proxy instance ${identifier.sid}`);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate _receiveOneMessage(rawmsg: VSBuffer): void {\n\t\tif (this._isDisposed) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst msgLength = rawmsg.byteLength;\n\t\tconst buff = MessageBuffer.read(rawmsg, 0);\n\t\tconst messageType = <MessageType>buff.readUInt8();\n\t\tconst req = buff.readUInt32();\n\n\t\tswitch (messageType) {\n\t\t\tcase MessageType.RequestJSONArgs:\n\t\t\tcase MessageType.RequestJSONArgsWithCancellation: {\n\t\t\t\tlet { rpcId, method, args } =\n\t\t\t\t\tMessageIO.deserializeRequestJSONArgs(buff);\n\t\t\t\tif (this._uriTransformer) {\n\t\t\t\t\targs = transformIncomingURIs(args, this._uriTransformer);\n\t\t\t\t}\n\t\t\t\tthis._receiveRequest(\n\t\t\t\t\tmsgLength,\n\t\t\t\t\treq,\n\t\t\t\t\trpcId,\n\t\t\t\t\tmethod,\n\t\t\t\t\targs,\n\t\t\t\t\tmessageType === MessageType.RequestJSONArgsWithCancellation,\n\t\t\t\t);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase MessageType.RequestMixedArgs:\n\t\t\tcase MessageType.RequestMixedArgsWithCancellation: {\n\t\t\t\tlet { rpcId, method, args } =\n\t\t\t\t\tMessageIO.deserializeRequestMixedArgs(buff);\n\t\t\t\tif (this._uriTransformer) {\n\t\t\t\t\targs = transformIncomingURIs(args, this._uriTransformer);\n\t\t\t\t}\n\t\t\t\tthis._receiveRequest(\n\t\t\t\t\tmsgLength,\n\t\t\t\t\treq,\n\t\t\t\t\trpcId,\n\t\t\t\t\tmethod,\n\t\t\t\t\targs,\n\t\t\t\t\tmessageType ===\n\t\t\t\t\t\tMessageType.RequestMixedArgsWithCancellation,\n\t\t\t\t);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase MessageType.Acknowledged: {\n\t\t\t\tthis._logger?.logIncoming(\n\t\t\t\t\tmsgLength,\n\t\t\t\t\treq,\n\t\t\t\t\tRequestInitiator.LocalSide,\n\t\t\t\t\t`ack`,\n\t\t\t\t);\n\t\t\t\tthis._onDidReceiveAcknowledge(req);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase MessageType.Cancel: {\n\t\t\t\tthis._receiveCancel(msgLength, req);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase MessageType.ReplyOKEmpty: {\n\t\t\t\tthis._receiveReply(msgLength, req, undefined);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase MessageType.ReplyOKJSON: {\n\t\t\t\tlet value = MessageIO.deserializeReplyOKJSON(buff);\n\t\t\t\tif (this._uriTransformer) {\n\t\t\t\t\tvalue = transformIncomingURIs(value, this._uriTransformer);\n\t\t\t\t}\n\t\t\t\tthis._receiveReply(msgLength, req, value);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase MessageType.ReplyOKJSONWithBuffers: {\n\t\t\t\tconst value = MessageIO.deserializeReplyOKJSONWithBuffers(\n\t\t\t\t\tbuff,\n\t\t\t\t\tthis._uriTransformer,\n\t\t\t\t);\n\t\t\t\tthis._receiveReply(msgLength, req, value);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase MessageType.ReplyOKVSBuffer: {\n\t\t\t\tconst value = MessageIO.deserializeReplyOKVSBuffer(buff);\n\t\t\t\tthis._receiveReply(msgLength, req, value);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase MessageType.ReplyErrError: {\n\t\t\t\tlet err = MessageIO.deserializeReplyErrError(buff);\n\t\t\t\tif (this._uriTransformer) {\n\t\t\t\t\terr = transformIncomingURIs(err, this._uriTransformer);\n\t\t\t\t}\n\t\t\t\tthis._receiveReplyErr(msgLength, req, err);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase MessageType.ReplyErrEmpty: {\n\t\t\t\tthis._receiveReplyErr(msgLength, req, undefined);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tdefault:\n\t\t\t\tconsole.error(`received unexpected message`);\n\t\t\t\tconsole.error(rawmsg);\n\t\t}\n\t}\n\n\tprivate _receiveRequest(\n\t\tmsgLength: number,\n\t\treq: number,\n\t\trpcId: number,\n\t\tmethod: string,\n\t\targs: any[],\n\t\tusesCancellationToken: boolean,\n\t): void {\n\t\tthis._logger?.logIncoming(\n\t\t\tmsgLength,\n\t\t\treq,\n\t\t\tRequestInitiator.OtherSide,\n\t\t\t`receiveRequest ${getStringIdentifierForProxy(rpcId)}.${method}(`,\n\t\t\targs,\n\t\t);\n\t\tconst callId = String(req);\n\n\t\tlet promise: Promise<any>;\n\t\tlet cancel: () => void;\n\t\tif (usesCancellationToken) {\n\t\t\tconst cancellationTokenSource = new CancellationTokenSource();\n\t\t\targs.push(cancellationTokenSource.token);\n\t\t\tpromise = this._invokeHandler(rpcId, method, args);\n\t\t\tcancel = () => cancellationTokenSource.cancel();\n\t\t} else {\n\t\t\t// cannot be cancelled\n\t\t\tpromise = this._invokeHandler(rpcId, method, args);\n\t\t\tcancel = noop;\n\t\t}\n\n\t\tthis._cancelInvokedHandlers[callId] = cancel;\n\n\t\t// Acknowledge the request\n\t\tconst msg = MessageIO.serializeAcknowledged(req);\n\t\tthis._logger?.logOutgoing(\n\t\t\tmsg.byteLength,\n\t\t\treq,\n\t\t\tRequestInitiator.OtherSide,\n\t\t\t`ack`,\n\t\t);\n\t\tthis._protocol.send(msg);\n\n\t\tpromise.then(\n\t\t\t(r) => {\n\t\t\t\tdelete this._cancelInvokedHandlers[callId];\n\t\t\t\tconst msg = MessageIO.serializeReplyOK(\n\t\t\t\t\treq,\n\t\t\t\t\tr,\n\t\t\t\t\tthis._uriReplacer,\n\t\t\t\t);\n\t\t\t\tthis._logger?.logOutgoing(\n\t\t\t\t\tmsg.byteLength,\n\t\t\t\t\treq,\n\t\t\t\t\tRequestInitiator.OtherSide,\n\t\t\t\t\t`reply:`,\n\t\t\t\t\tr,\n\t\t\t\t);\n\t\t\t\tthis._protocol.send(msg);\n\t\t\t},\n\t\t\t(err) => {\n\t\t\t\tdelete this._cancelInvokedHandlers[callId];\n\t\t\t\tconst msg = MessageIO.serializeReplyErr(req, err);\n\t\t\t\tthis._logger?.logOutgoing(\n\t\t\t\t\tmsg.byteLength,\n\t\t\t\t\treq,\n\t\t\t\t\tRequestInitiator.OtherSide,\n\t\t\t\t\t`replyErr:`,\n\t\t\t\t\terr,\n\t\t\t\t);\n\t\t\t\tthis._protocol.send(msg);\n\t\t\t},\n\t\t);\n\t}\n\n\tprivate _receiveCancel(msgLength: number, req: number): void {\n\t\tthis._logger?.logIncoming(\n\t\t\tmsgLength,\n\t\t\treq,\n\t\t\tRequestInitiator.OtherSide,\n\t\t\t`receiveCancel`,\n\t\t);\n\t\tconst callId = String(req);\n\t\tthis._cancelInvokedHandlers[callId]?.();\n\t}\n\n\tprivate _receiveReply(msgLength: number, req: number, value: any): void {\n\t\tthis._logger?.logIncoming(\n\t\t\tmsgLength,\n\t\t\treq,\n\t\t\tRequestInitiator.LocalSide,\n\t\t\t`receiveReply:`,\n\t\t\tvalue,\n\t\t);\n\t\tconst callId = String(req);\n\t\tif (!this._pendingRPCReplies.hasOwnProperty(callId)) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst pendingReply = this._pendingRPCReplies[callId];\n\t\tdelete this._pendingRPCReplies[callId];\n\n\t\tpendingReply.resolveOk(value);\n\t}\n\n\tprivate _receiveReplyErr(msgLength: number, req: number, value: any): void {\n\t\tthis._logger?.logIncoming(\n\t\t\tmsgLength,\n\t\t\treq,\n\t\t\tRequestInitiator.LocalSide,\n\t\t\t`receiveReplyErr:`,\n\t\t\tvalue,\n\t\t);\n\n\t\tconst callId = String(req);\n\t\tif (!this._pendingRPCReplies.hasOwnProperty(callId)) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst pendingReply = this._pendingRPCReplies[callId];\n\t\tdelete this._pendingRPCReplies[callId];\n\n\t\tlet err: any;\n\t\tif (value) {\n\t\t\tif (value.$isError) {\n\t\t\t\terr = new Error();\n\t\t\t\terr.name = value.name;\n\t\t\t\terr.message = value.message;\n\t\t\t\terr.stack = value.stack;\n\t\t\t} else {\n\t\t\t\terr = value;\n\t\t\t}\n\t\t}\n\t\tpendingReply.resolveErr(err);\n\t}\n\n\tprivate _invokeHandler(\n\t\trpcId: number,\n\t\tmethodName: string,\n\t\targs: any[],\n\t): Promise<any> {\n\t\ttry {\n\t\t\treturn Promise.resolve(\n\t\t\t\tthis._doInvokeHandler(rpcId, methodName, args),\n\t\t\t);\n\t\t} catch (err) {\n\t\t\treturn Promise.reject(err);\n\t\t}\n\t}\n\n\tprivate _doInvokeHandler(\n\t\trpcId: number,\n\t\tmethodName: string,\n\t\targs: any[],\n\t): any {\n\t\tconst actor = this._locals[rpcId];\n\t\tif (!actor) {\n\t\t\tthrow new Error(\n\t\t\t\t\"Unknown actor \" + getStringIdentifierForProxy(rpcId),\n\t\t\t);\n\t\t}\n\t\tconst method = actor[methodName];\n\t\tif (typeof method !== \"function\") {\n\t\t\tthrow new Error(\n\t\t\t\t\"Unknown method \" +\n\t\t\t\t\tmethodName +\n\t\t\t\t\t\" on actor \" +\n\t\t\t\t\tgetStringIdentifierForProxy(rpcId),\n\t\t\t);\n\t\t}\n\t\treturn method.apply(actor, args);\n\t}\n\n\tprivate _remoteCall(\n\t\trpcId: number,\n\t\tmethodName: string,\n\t\targs: any[],\n\t): Promise<any> {\n\t\tif (this._isDisposed) {\n\t\t\treturn new CanceledLazyPromise();\n\t\t}\n\t\tlet cancellationToken: CancellationToken | null = null;\n\t\tif (\n\t\t\targs.length > 0 &&\n\t\t\tCancellationToken.isCancellationToken(args[args.length - 1])\n\t\t) {\n\t\t\tcancellationToken = args.pop();\n\t\t}\n\n\t\tif (cancellationToken && cancellationToken.isCancellationRequested) {\n\t\t\t// No need to do anything...\n\t\t\treturn Promise.reject<any>(errors.canceled());\n\t\t}\n\n\t\tconst serializedRequestArguments = MessageIO.serializeRequestArguments(\n\t\t\targs,\n\t\t\tthis._uriReplacer,\n\t\t);\n\n\t\tconst req = ++this._lastMessageId;\n\t\tconst callId = String(req);\n\t\tconst result = new LazyPromise();\n\n\t\tconst disposable = new DisposableStore();\n\t\tif (cancellationToken) {\n\t\t\tdisposable.add(\n\t\t\t\tcancellationToken.onCancellationRequested(() => {\n\t\t\t\t\tconst msg = MessageIO.serializeCancel(req);\n\t\t\t\t\tthis._logger?.logOutgoing(\n\t\t\t\t\t\tmsg.byteLength,\n\t\t\t\t\t\treq,\n\t\t\t\t\t\tRequestInitiator.LocalSide,\n\t\t\t\t\t\t`cancel`,\n\t\t\t\t\t);\n\t\t\t\t\tthis._protocol.send(MessageIO.serializeCancel(req));\n\t\t\t\t}),\n\t\t\t);\n\t\t}\n\n\t\tthis._pendingRPCReplies[callId] = new PendingRPCReply(\n\t\t\tresult,\n\t\t\tdisposable,\n\t\t);\n\t\tthis._onWillSendRequest(req);\n\t\tconst msg = MessageIO.serializeRequest(\n\t\t\treq,\n\t\t\trpcId,\n\t\t\tmethodName,\n\t\t\tserializedRequestArguments,\n\t\t\t!!cancellationToken,\n\t\t);\n\t\tthis._logger?.logOutgoing(\n\t\t\tmsg.byteLength,\n\t\t\treq,\n\t\t\tRequestInitiator.LocalSide,\n\t\t\t`request: ${getStringIdentifierForProxy(rpcId)}.${methodName}(`,\n\t\t\targs,\n\t\t);\n\t\tthis._protocol.send(msg);\n\t\treturn result;\n\t}\n}\n\nclass PendingRPCReply {\n\tconstructor(\n\t\tprivate readonly _promise: LazyPromise,\n\t\tprivate readonly _disposable: IDisposable,\n\t) {}\n\n\tpublic resolveOk(value: any): void {\n\t\tthis._promise.resolveOk(value);\n\t\tthis._disposable.dispose();\n\t}\n\n\tpublic resolveErr(err: any): void {\n\t\tthis._promise.resolveErr(err);\n\t\tthis._disposable.dispose();\n\t}\n}\n\nclass MessageBuffer {\n\tpublic static alloc(\n\t\ttype: MessageType,\n\t\treq: number,\n\t\tmessageSize: number,\n\t): MessageBuffer {\n\t\tconst result = new MessageBuffer(\n\t\t\tVSBuffer.alloc(messageSize + 1 /* type */ + 4 /* req */),\n\t\t\t0,\n\t\t);\n\t\tresult.writeUInt8(type);\n\t\tresult.writeUInt32(req);\n\t\treturn result;\n\t}\n\n\tpublic static read(buff: VSBuffer, offset: number): MessageBuffer {\n\t\treturn new MessageBuffer(buff, offset);\n\t}\n\n\tprivate _buff: VSBuffer;\n\tprivate _offset: number;\n\n\tpublic get buffer(): VSBuffer {\n\t\treturn this._buff;\n\t}\n\n\tprivate constructor(buff: VSBuffer, offset: number) {\n\t\tthis._buff = buff;\n\t\tthis._offset = offset;\n\t}\n\n\tpublic static sizeUInt8(): number {\n\t\treturn 1;\n\t}\n\n\tpublic static readonly sizeUInt32 = 4;\n\n\tpublic writeUInt8(n: number): void {\n\t\tthis._buff.writeUInt8(n, this._offset);\n\t\tthis._offset += 1;\n\t}\n\n\tpublic readUInt8(): number {\n\t\tconst n = this._buff.readUInt8(this._offset);\n\t\tthis._offset += 1;\n\t\treturn n;\n\t}\n\n\tpublic writeUInt32(n: number): void {\n\t\tthis._buff.writeUInt32BE(n, this._offset);\n\t\tthis._offset += 4;\n\t}\n\n\tpublic readUInt32(): number {\n\t\tconst n = this._buff.readUInt32BE(this._offset);\n\t\tthis._offset += 4;\n\t\treturn n;\n\t}\n\n\tpublic static sizeShortString(str: VSBuffer): number {\n\t\treturn 1 /* string length */ + str.byteLength /* actual string */;\n\t}\n\n\tpublic writeShortString(str: VSBuffer): void {\n\t\tthis._buff.writeUInt8(str.byteLength, this._offset);\n\t\tthis._offset += 1;\n\t\tthis._buff.set(str, this._offset);\n\t\tthis._offset += str.byteLength;\n\t}\n\n\tpublic readShortString(): string {\n\t\tconst strByteLength = this._buff.readUInt8(this._offset);\n\t\tthis._offset += 1;\n\t\tconst strBuff = this._buff.slice(\n\t\t\tthis._offset,\n\t\t\tthis._offset + strByteLength,\n\t\t);\n\t\tconst str = strBuff.toString();\n\t\tthis._offset += strByteLength;\n\t\treturn str;\n\t}\n\n\tpublic static sizeLongString(str: VSBuffer): number {\n\t\treturn 4 /* string length */ + str.byteLength /* actual string */;\n\t}\n\n\tpublic writeLongString(str: VSBuffer): void {\n\t\tthis._buff.writeUInt32BE(str.byteLength, this._offset);\n\t\tthis._offset += 4;\n\t\tthis._buff.set(str, this._offset);\n\t\tthis._offset += str.byteLength;\n\t}\n\n\tpublic readLongString(): string {\n\t\tconst strByteLength = this._buff.readUInt32BE(this._offset);\n\t\tthis._offset += 4;\n\t\tconst strBuff = this._buff.slice(\n\t\t\tthis._offset,\n\t\t\tthis._offset + strByteLength,\n\t\t);\n\t\tconst str = strBuff.toString();\n\t\tthis._offset += strByteLength;\n\t\treturn str;\n\t}\n\n\tpublic writeBuffer(buff: VSBuffer): void {\n\t\tthis._buff.writeUInt32BE(buff.byteLength, this._offset);\n\t\tthis._offset += 4;\n\t\tthis._buff.set(buff, this._offset);\n\t\tthis._offset += buff.byteLength;\n\t}\n\n\tpublic static sizeVSBuffer(buff: VSBuffer): number {\n\t\treturn 4 /* buffer length */ + buff.byteLength /* actual buffer */;\n\t}\n\n\tpublic writeVSBuffer(buff: VSBuffer): void {\n\t\tthis._buff.writeUInt32BE(buff.byteLength, this._offset);\n\t\tthis._offset += 4;\n\t\tthis._buff.set(buff, this._offset);\n\t\tthis._offset += buff.byteLength;\n\t}\n\n\tpublic readVSBuffer(): VSBuffer {\n\t\tconst buffLength = this._buff.readUInt32BE(this._offset);\n\t\tthis._offset += 4;\n\t\tconst buff = this._buff.slice(this._offset, this._offset + buffLength);\n\t\tthis._offset += buffLength;\n\t\treturn buff;\n\t}\n\n\tpublic static sizeMixedArray(arr: readonly MixedArg[]): number {\n\t\tlet size = 0;\n\t\tsize += 1; // arr length\n\t\tfor (let i = 0, len = arr.length; i < len; i++) {\n\t\t\tconst el = arr[i];\n\t\t\tsize += 1; // arg type\n\t\t\tswitch (el.type) {\n\t\t\t\tcase ArgType.String:\n\t\t\t\t\tsize += this.sizeLongString(el.value);\n\t\t\t\t\tbreak;\n\t\t\t\tcase ArgType.VSBuffer:\n\t\t\t\t\tsize += this.sizeVSBuffer(el.value);\n\t\t\t\t\tbreak;\n\t\t\t\tcase ArgType.SerializedObjectWithBuffers:\n\t\t\t\t\tsize += this.sizeUInt32; // buffer count\n\t\t\t\t\tsize += this.sizeLongString(el.value);\n\t\t\t\t\tfor (let i = 0; i < el.buffers.length; ++i) {\n\t\t\t\t\t\tsize += this.sizeVSBuffer(el.buffers[i]);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase ArgType.Undefined:\n\t\t\t\t\t// empty...\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\treturn size;\n\t}\n\n\tpublic writeMixedArray(arr: readonly MixedArg[]): void {\n\t\tthis._buff.writeUInt8(arr.length, this._offset);\n\t\tthis._offset += 1;\n\t\tfor (let i = 0, len = arr.length; i < len; i++) {\n\t\t\tconst el = arr[i];\n\t\t\tswitch (el.type) {\n\t\t\t\tcase ArgType.String:\n\t\t\t\t\tthis.writeUInt8(ArgType.String);\n\t\t\t\t\tthis.writeLongString(el.value);\n\t\t\t\t\tbreak;\n\t\t\t\tcase ArgType.VSBuffer:\n\t\t\t\t\tthis.writeUInt8(ArgType.VSBuffer);\n\t\t\t\t\tthis.writeVSBuffer(el.value);\n\t\t\t\t\tbreak;\n\t\t\t\tcase ArgType.SerializedObjectWithBuffers:\n\t\t\t\t\tthis.writeUInt8(ArgType.SerializedObjectWithBuffers);\n\t\t\t\t\tthis.writeUInt32(el.buffers.length);\n\t\t\t\t\tthis.writeLongString(el.value);\n\t\t\t\t\tfor (let i = 0; i < el.buffers.length; ++i) {\n\t\t\t\t\t\tthis.writeBuffer(el.buffers[i]);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase ArgType.Undefined:\n\t\t\t\t\tthis.writeUInt8(ArgType.Undefined);\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic readMixedArray(): Array<\n\t\tstring | VSBuffer | SerializableObjectWithBuffers<any> | undefined\n\t> {\n\t\tconst arrLen = this._buff.readUInt8(this._offset);\n\t\tthis._offset += 1;\n\t\tconst arr: Array<\n\t\t\tstring | VSBuffer | SerializableObjectWithBuffers<any> | undefined\n\t\t> = new Array(arrLen);\n\t\tfor (let i = 0; i < arrLen; i++) {\n\t\t\tconst argType = <ArgType>this.readUInt8();\n\t\t\tswitch (argType) {\n\t\t\t\tcase ArgType.String:\n\t\t\t\t\tarr[i] = this.readLongString();\n\t\t\t\t\tbreak;\n\t\t\t\tcase ArgType.VSBuffer:\n\t\t\t\t\tarr[i] = this.readVSBuffer();\n\t\t\t\t\tbreak;\n\t\t\t\tcase ArgType.SerializedObjectWithBuffers: {\n\t\t\t\t\tconst bufferCount = this.readUInt32();\n\t\t\t\t\tconst jsonString = this.readLongString();\n\t\t\t\t\tconst buffers: VSBuffer[] = [];\n\t\t\t\t\tfor (let i = 0; i < bufferCount; ++i) {\n\t\t\t\t\t\tbuffers.push(this.readVSBuffer());\n\t\t\t\t\t}\n\t\t\t\t\tarr[i] = new SerializableObjectWithBuffers(\n\t\t\t\t\t\tparseJsonAndRestoreBufferRefs(\n\t\t\t\t\t\t\tjsonString,\n\t\t\t\t\t\t\tbuffers,\n\t\t\t\t\t\t\tnull,\n\t\t\t\t\t\t),\n\t\t\t\t\t);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcase ArgType.Undefined:\n\t\t\t\t\tarr[i] = undefined;\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\treturn arr;\n\t}\n}\n\nenum SerializedRequestArgumentType {\n\tSimple = 0,\n\tMixed = 1,\n}\n\ntype SerializedRequestArguments =\n\t| { readonly type: SerializedRequestArgumentType.Simple; args: string }\n\t| { readonly type: SerializedRequestArgumentType.Mixed; args: MixedArg[] };\n\nclass MessageIO {\n\tprivate static _useMixedArgSerialization(arr: any[]): boolean {\n\t\tfor (let i = 0, len = arr.length; i < len; i++) {\n\t\t\tif (arr[i] instanceof VSBuffer) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\tif (arr[i] instanceof SerializableObjectWithBuffers) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\tif (typeof arr[i] === \"undefined\") {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\n\tpublic static serializeRequestArguments(\n\t\targs: any[],\n\t\treplacer: JSONStringifyReplacer | null,\n\t): SerializedRequestArguments {\n\t\tif (this._useMixedArgSerialization(args)) {\n\t\t\tconst massagedArgs: MixedArg[] = [];\n\t\t\tfor (let i = 0, len = args.length; i < len; i++) {\n\t\t\t\tconst arg = args[i];\n\t\t\t\tif (arg instanceof VSBuffer) {\n\t\t\t\t\tmassagedArgs[i] = { type: ArgType.VSBuffer, value: arg };\n\t\t\t\t} else if (typeof arg === \"undefined\") {\n\t\t\t\t\tmassagedArgs[i] = { type: ArgType.Undefined };\n\t\t\t\t} else if (arg instanceof SerializableObjectWithBuffers) {\n\t\t\t\t\tconst { jsonString, referencedBuffers } =\n\t\t\t\t\t\tstringifyJsonWithBufferRefs(arg.value, replacer);\n\t\t\t\t\tmassagedArgs[i] = {\n\t\t\t\t\t\ttype: ArgType.SerializedObjectWithBuffers,\n\t\t\t\t\t\tvalue: VSBuffer.fromString(jsonString),\n\t\t\t\t\t\tbuffers: referencedBuffers,\n\t\t\t\t\t};\n\t\t\t\t} else {\n\t\t\t\t\tmassagedArgs[i] = {\n\t\t\t\t\t\ttype: ArgType.String,\n\t\t\t\t\t\tvalue: VSBuffer.fromString(stringify(arg, replacer)),\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn {\n\t\t\t\ttype: SerializedRequestArgumentType.Mixed,\n\t\t\t\targs: massagedArgs,\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\ttype: SerializedRequestArgumentType.Simple,\n\t\t\targs: stringify(args, replacer),\n\t\t};\n\t}\n\n\tpublic static serializeRequest(\n\t\treq: number,\n\t\trpcId: number,\n\t\tmethod: string,\n\t\tserializedArgs: SerializedRequestArguments,\n\t\tusesCancellationToken: boolean,\n\t): VSBuffer {\n\t\tswitch (serializedArgs.type) {\n\t\t\tcase SerializedRequestArgumentType.Simple:\n\t\t\t\treturn this._requestJSONArgs(\n\t\t\t\t\treq,\n\t\t\t\t\trpcId,\n\t\t\t\t\tmethod,\n\t\t\t\t\tserializedArgs.args,\n\t\t\t\t\tusesCancellationToken,\n\t\t\t\t);\n\t\t\tcase SerializedRequestArgumentType.Mixed:\n\t\t\t\treturn this._requestMixedArgs(\n\t\t\t\t\treq,\n\t\t\t\t\trpcId,\n\t\t\t\t\tmethod,\n\t\t\t\t\tserializedArgs.args,\n\t\t\t\t\tusesCancellationToken,\n\t\t\t\t);\n\t\t}\n\t}\n\n\tprivate static _requestJSONArgs(\n\t\treq: number,\n\t\trpcId: number,\n\t\tmethod: string,\n\t\targs: string,\n\t\tusesCancellationToken: boolean,\n\t): VSBuffer {\n\t\tconst methodBuff = VSBuffer.fromString(method);\n\t\tconst argsBuff = VSBuffer.fromString(args);\n\n\t\tlet len = 0;\n\t\tlen += MessageBuffer.sizeUInt8();\n\t\tlen += MessageBuffer.sizeShortString(methodBuff);\n\t\tlen += MessageBuffer.sizeLongString(argsBuff);\n\n\t\tconst result = MessageBuffer.alloc(\n\t\t\tusesCancellationToken\n\t\t\t\t? MessageType.RequestJSONArgsWithCancellation\n\t\t\t\t: MessageType.RequestJSONArgs,\n\t\t\treq,\n\t\t\tlen,\n\t\t);\n\t\tresult.writeUInt8(rpcId);\n\t\tresult.writeShortString(methodBuff);\n\t\tresult.writeLongString(argsBuff);\n\t\treturn result.buffer;\n\t}\n\n\tpublic static deserializeRequestJSONArgs(buff: MessageBuffer): {\n\t\trpcId: number;\n\t\tmethod: string;\n\t\targs: any[];\n\t} {\n\t\tconst rpcId = buff.readUInt8();\n\t\tconst method = buff.readShortString();\n\t\tconst args = buff.readLongString();\n\t\treturn {\n\t\t\trpcId: rpcId,\n\t\t\tmethod: method,\n\t\t\targs: JSON.parse(args),\n\t\t};\n\t}\n\n\tprivate static _requestMixedArgs(\n\t\treq: number,\n\t\trpcId: number,\n\t\tmethod: string,\n\t\targs: readonly MixedArg[],\n\t\tusesCancellationToken: boolean,\n\t): VSBuffer {\n\t\tconst methodBuff = VSBuffer.fromString(method);\n\n\t\tlet len = 0;\n\t\tlen += MessageBuffer.sizeUInt8();\n\t\tlen += MessageBuffer.sizeShortString(methodBuff);\n\t\tlen += MessageBuffer.sizeMixedArray(args);\n\n\t\tconst result = MessageBuffer.alloc(\n\t\t\tusesCancellationToken\n\t\t\t\t? MessageType.RequestMixedArgsWithCancellation\n\t\t\t\t: MessageType.RequestMixedArgs,\n\t\t\treq,\n\t\t\tlen,\n\t\t);\n\t\tresult.writeUInt8(rpcId);\n\t\tresult.writeShortString(methodBuff);\n\t\tresult.writeMixedArray(args);\n\t\treturn result.buffer;\n\t}\n\n\tpublic static deserializeRequestMixedArgs(buff: MessageBuffer): {\n\t\trpcId: number;\n\t\tmethod: string;\n\t\targs: any[];\n\t} {\n\t\tconst rpcId = buff.readUInt8();\n\t\tconst method = buff.readShortString();\n\t\tconst rawargs = buff.readMixedArray();\n\t\tconst args: any[] = new Array(rawargs.length);\n\t\tfor (let i = 0, len = rawargs.length; i < len; i++) {\n\t\t\tconst rawarg = rawargs[i];\n\t\t\tif (typeof rawarg === \"string\") {\n\t\t\t\targs[i] = JSON.parse(rawarg);\n\t\t\t} else {\n\t\t\t\targs[i] = rawarg;\n\t\t\t}\n\t\t}\n\t\treturn {\n\t\t\trpcId: rpcId,\n\t\t\tmethod: method,\n\t\t\targs: args,\n\t\t};\n\t}\n\n\tpublic static serializeAcknowledged(req: number): VSBuffer {\n\t\treturn MessageBuffer.alloc(MessageType.Acknowledged, req, 0).buffer;\n\t}\n\n\tpublic static serializeCancel(req: number): VSBuffer {\n\t\treturn MessageBuffer.alloc(MessageType.Cancel, req, 0).buffer;\n\t}\n\n\tpublic static serializeReplyOK(\n\t\treq: number,\n\t\tres: any,\n\t\treplacer: JSONStringifyReplacer | null,\n\t): VSBuffer {\n\t\tif (typeof res === \"undefined\") {\n\t\t\treturn this._serializeReplyOKEmpty(req);\n\t\t} else if (res instanceof VSBuffer) {\n\t\t\treturn this._serializeReplyOKVSBuffer(req, res);\n\t\t} else if (res instanceof SerializableObjectWithBuffers) {\n\t\t\tconst { jsonString, referencedBuffers } =\n\t\t\t\tstringifyJsonWithBufferRefs(res.value, replacer, true);\n\t\t\treturn this._serializeReplyOKJSONWithBuffers(\n\t\t\t\treq,\n\t\t\t\tjsonString,\n\t\t\t\treferencedBuffers,\n\t\t\t);\n\t\t} else {\n\t\t\treturn this._serializeReplyOKJSON(\n\t\t\t\treq,\n\t\t\t\tsafeStringify(res, replacer),\n\t\t\t);\n\t\t}\n\t}\n\n\tprivate static _serializeReplyOKEmpty(req: number): VSBuffer {\n\t\treturn MessageBuffer.alloc(MessageType.ReplyOKEmpty, req, 0).buffer;\n\t}\n\n\tprivate static _serializeReplyOKVSBuffer(\n\t\treq: number,\n\t\tres: VSBuffer,\n\t): VSBuffer {\n\t\tlet len = 0;\n\t\tlen += MessageBuffer.sizeVSBuffer(res);\n\n\t\tconst result = MessageBuffer.alloc(\n\t\t\tMessageType.ReplyOKVSBuffer,\n\t\t\treq,\n\t\t\tlen,\n\t\t);\n\t\tresult.writeVSBuffer(res);\n\t\treturn result.buffer;\n\t}\n\n\tpublic static deserializeReplyOKVSBuffer(buff: MessageBuffer): VSBuffer {\n\t\treturn buff.readVSBuffer();\n\t}\n\n\tprivate static _serializeReplyOKJSON(req: number, res: string): VSBuffer {\n\t\tconst resBuff = VSBuffer.fromString(res);\n\n\t\tlet len = 0;\n\t\tlen += MessageBuffer.sizeLongString(resBuff);\n\n\t\tconst result = MessageBuffer.alloc(MessageType.ReplyOKJSON, req, len);\n\t\tresult.writeLongString(resBuff);\n\t\treturn result.buffer;\n\t}\n\n\tprivate static _serializeReplyOKJSONWithBuffers(\n\t\treq: number,\n\t\tres: string,\n\t\tbuffers: readonly VSBuffer[],\n\t): VSBuffer {\n\t\tconst resBuff = VSBuffer.fromString(res);\n\n\t\tlet len = 0;\n\t\tlen += MessageBuffer.sizeUInt32; // buffer count\n\t\tlen += MessageBuffer.sizeLongString(resBuff);\n\t\tfor (const buffer of buffers) {\n\t\t\tlen += MessageBuffer.sizeVSBuffer(buffer);\n\t\t}\n\n\t\tconst result = MessageBuffer.alloc(\n\t\t\tMessageType.ReplyOKJSONWithBuffers,\n\t\t\treq,\n\t\t\tlen,\n\t\t);\n\t\tresult.writeUInt32(buffers.length);\n\t\tresult.writeLongString(resBuff);\n\t\tfor (const buffer of buffers) {\n\t\t\tresult.writeBuffer(buffer);\n\t\t}\n\n\t\treturn result.buffer;\n\t}\n\n\tpublic static deserializeReplyOKJSON(buff: MessageBuffer): any {\n\t\tconst res = buff.readLongString();\n\t\treturn JSON.parse(res);\n\t}\n\n\tpublic static deserializeReplyOKJSONWithBuffers(\n\t\tbuff: MessageBuffer,\n\t\turiTransformer: IURITransformer | null,\n\t): SerializableObjectWithBuffers<any> {\n\t\tconst bufferCount = buff.readUInt32();\n\t\tconst res = buff.readLongString();\n\n\t\tconst buffers: VSBuffer[] = [];\n\t\tfor (let i = 0; i < bufferCount; ++i) {\n\t\t\tbuffers.push(buff.readVSBuffer());\n\t\t}\n\n\t\treturn new SerializableObjectWithBuffers(\n\t\t\tparseJsonAndRestoreBufferRefs(res, buffers, uriTransformer),\n\t\t);\n\t}\n\n\tpublic static serializeReplyErr(req: number, err: any): VSBuffer {\n\t\tconst errStr: string | undefined = err\n\t\t\t? safeStringify(errors.transformErrorForSerialization(err), null)\n\t\t\t: undefined;\n\t\tif (typeof errStr !== \"string\") {\n\t\t\treturn this._serializeReplyErrEmpty(req);\n\t\t}\n\t\tconst errBuff = VSBuffer.fromString(errStr);\n\n\t\tlet len = 0;\n\t\tlen += MessageBuffer.sizeLongString(errBuff);\n\n\t\tconst result = MessageBuffer.alloc(MessageType.ReplyErrError, req, len);\n\t\tresult.writeLongString(errBuff);\n\t\treturn result.buffer;\n\t}\n\n\tpublic static deserializeReplyErrError(buff: MessageBuffer): Error {\n\t\tconst err = buff.readLongString();\n\t\treturn JSON.parse(err);\n\t}\n\n\tprivate static _serializeReplyErrEmpty(req: number): VSBuffer {\n\t\treturn MessageBuffer.alloc(MessageType.ReplyErrEmpty, req, 0).buffer;\n\t}\n}\n\nenum MessageType {\n\tRequestJSONArgs = 1,\n\tRequestJSONArgsWithCancellation = 2,\n\tRequestMixedArgs = 3,\n\tRequestMixedArgsWithCancellation = 4,\n\tAcknowledged = 5,\n\tCancel = 6,\n\tReplyOKEmpty = 7,\n\tReplyOKVSBuffer = 8,\n\tReplyOKJSON = 9,\n\tReplyOKJSONWithBuffers = 10,\n\tReplyErrError = 11,\n\tReplyErrEmpty = 12,\n}\n\nenum ArgType {\n\tString = 1,\n\tVSBuffer = 2,\n\tSerializedObjectWithBuffers = 3,\n\tUndefined = 4,\n}\n\ntype MixedArg =\n\t| { readonly type: ArgType.String; readonly value: VSBuffer }\n\t| { readonly type: ArgType.VSBuffer; readonly value: VSBuffer }\n\t| {\n\t\t\treadonly type: ArgType.SerializedObjectWithBuffers;\n\t\t\treadonly value: VSBuffer;\n\t\t\treadonly buffers: readonly VSBuffer[];\n\t  }\n\t| { readonly type: ArgType.Undefined };\n"],
  "mappings": "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",
  "names": ["RequestInitiator", "ResponsiveState", "msg", "i", "SerializedRequestArgumentType", "MessageType", "ArgType"]
}
