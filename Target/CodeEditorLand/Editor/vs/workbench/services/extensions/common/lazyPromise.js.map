{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/extensions/common/lazyPromise.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CancellationError, onUnexpectedError } from '../../../../base/common/errors.js';\n\nexport class LazyPromise implements Promise<any> {\n\n\tprivate _actual: Promise<any> | null;\n\tprivate _actualOk: ((value?: any) => any) | null;\n\tprivate _actualErr: ((err?: any) => any) | null;\n\n\tprivate _hasValue: boolean;\n\tprivate _value: any;\n\n\tprotected _hasErr: boolean;\n\tprotected _err: any;\n\n\tconstructor() {\n\t\tthis._actual = null;\n\t\tthis._actualOk = null;\n\t\tthis._actualErr = null;\n\t\tthis._hasValue = false;\n\t\tthis._value = null;\n\t\tthis._hasErr = false;\n\t\tthis._err = null;\n\t}\n\n\tget [Symbol.toStringTag](): string {\n\t\treturn this.toString();\n\t}\n\n\tprivate _ensureActual(): Promise<any> {\n\t\tif (!this._actual) {\n\t\t\tthis._actual = new Promise<any>((c, e) => {\n\t\t\t\tthis._actualOk = c;\n\t\t\t\tthis._actualErr = e;\n\n\t\t\t\tif (this._hasValue) {\n\t\t\t\t\tthis._actualOk(this._value);\n\t\t\t\t}\n\n\t\t\t\tif (this._hasErr) {\n\t\t\t\t\tthis._actualErr(this._err);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t\treturn this._actual;\n\t}\n\n\tpublic resolveOk(value: any): void {\n\t\tif (this._hasValue || this._hasErr) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis._hasValue = true;\n\t\tthis._value = value;\n\n\t\tif (this._actual) {\n\t\t\tthis._actualOk!(value);\n\t\t}\n\t}\n\n\tpublic resolveErr(err: any): void {\n\t\tif (this._hasValue || this._hasErr) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis._hasErr = true;\n\t\tthis._err = err;\n\n\t\tif (this._actual) {\n\t\t\tthis._actualErr!(err);\n\t\t} else {\n\t\t\t// If nobody's listening at this point, it is safe to assume they never will,\n\t\t\t// since resolving this promise is always \"async\"\n\t\t\tonUnexpectedError(err);\n\t\t}\n\t}\n\n\tpublic then(success: any, error: any): any {\n\t\treturn this._ensureActual().then(success, error);\n\t}\n\n\tpublic catch(error: any): any {\n\t\treturn this._ensureActual().then(undefined, error);\n\t}\n\n\tpublic finally(callback: () => void): any {\n\t\treturn this._ensureActual().finally(callback);\n\t}\n}\n\nexport class CanceledLazyPromise extends LazyPromise {\n\tconstructor() {\n\t\tsuper();\n\t\tthis._hasErr = true;\n\t\tthis._err = new CancellationError();\n\t}\n}\n"],
  "mappings": ";;AAKA,SAAS,mBAAmB,yBAAyB;AAE9C,MAAM,YAAoC;AAAA,EAPjD,OAOiD;AAAA;AAAA;AAAA,EAExC;AAAA,EACA;AAAA,EACA;AAAA,EAEA;AAAA,EACA;AAAA,EAEE;AAAA,EACA;AAAA,EAEV,cAAc;AACb,SAAK,UAAU;AACf,SAAK,YAAY;AACjB,SAAK,aAAa;AAClB,SAAK,YAAY;AACjB,SAAK,SAAS;AACd,SAAK,UAAU;AACf,SAAK,OAAO;AAAA,EACb;AAAA,EAEA,KAAK,OAAO,WAAW,IAAY;AAClC,WAAO,KAAK,SAAS;AAAA,EACtB;AAAA,EAEQ,gBAA8B;AACrC,QAAI,CAAC,KAAK,SAAS;AAClB,WAAK,UAAU,IAAI,QAAa,CAAC,GAAG,MAAM;AACzC,aAAK,YAAY;AACjB,aAAK,aAAa;AAElB,YAAI,KAAK,WAAW;AACnB,eAAK,UAAU,KAAK,MAAM;AAAA,QAC3B;AAEA,YAAI,KAAK,SAAS;AACjB,eAAK,WAAW,KAAK,IAAI;AAAA,QAC1B;AAAA,MACD,CAAC;AAAA,IACF;AACA,WAAO,KAAK;AAAA,EACb;AAAA,EAEO,UAAU,OAAkB;AAClC,QAAI,KAAK,aAAa,KAAK,SAAS;AACnC;AAAA,IACD;AAEA,SAAK,YAAY;AACjB,SAAK,SAAS;AAEd,QAAI,KAAK,SAAS;AACjB,WAAK,UAAW,KAAK;AAAA,IACtB;AAAA,EACD;AAAA,EAEO,WAAW,KAAgB;AACjC,QAAI,KAAK,aAAa,KAAK,SAAS;AACnC;AAAA,IACD;AAEA,SAAK,UAAU;AACf,SAAK,OAAO;AAEZ,QAAI,KAAK,SAAS;AACjB,WAAK,WAAY,GAAG;AAAA,IACrB,OAAO;AAGN,wBAAkB,GAAG;AAAA,IACtB;AAAA,EACD;AAAA,EAEO,KAAK,SAAc,OAAiB;AAC1C,WAAO,KAAK,cAAc,EAAE,KAAK,SAAS,KAAK;AAAA,EAChD;AAAA,EAEO,MAAM,OAAiB;AAC7B,WAAO,KAAK,cAAc,EAAE,KAAK,QAAW,KAAK;AAAA,EAClD;AAAA,EAEO,QAAQ,UAA2B;AACzC,WAAO,KAAK,cAAc,EAAE,QAAQ,QAAQ;AAAA,EAC7C;AACD;AAEO,MAAM,4BAA4B,YAAY;AAAA,EA9FrD,OA8FqD;AAAA;AAAA;AAAA,EACpD,cAAc;AACb,UAAM;AACN,SAAK,UAAU;AACf,SAAK,OAAO,IAAI,kBAAkB;AAAA,EACnC;AACD;",
  "names": []
}
