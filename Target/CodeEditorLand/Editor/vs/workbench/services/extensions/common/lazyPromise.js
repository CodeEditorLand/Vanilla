var a=class{unexpectedErrorHandler;listeners;constructor(){this.listeners=[],this.unexpectedErrorHandler=function(r){setTimeout(()=>{throw r.stack?s.isErrorNoTelemetry(r)?new s(r.message+`

`+r.stack):new Error(r.message+`

`+r.stack):r},0)}}addListener(r){return this.listeners.push(r),()=>{this._removeListener(r)}}emit(r){this.listeners.forEach(t=>{t(r)})}_removeListener(r){this.listeners.splice(this.listeners.indexOf(r),1)}setUnexpectedErrorHandler(r){this.unexpectedErrorHandler=r}getUnexpectedErrorHandler(){return this.unexpectedErrorHandler}onUnexpectedError(r){this.unexpectedErrorHandler(r),this.emit(r)}onUnexpectedExternalError(r){this.unexpectedErrorHandler(r)}},c=new a;function l(e){d(e)||c.onUnexpectedError(e)}var o="Canceled";function d(e){return e instanceof n?!0:e instanceof Error&&e.name===o&&e.message===o}var n=class extends Error{constructor(){super(o),this.name=this.message}};var s=class e extends Error{name;constructor(r){super(r),this.name="CodeExpectedError"}static fromError(r){if(r instanceof e)return r;let t=new e;return t.message=r.message,t.stack=r.stack,t}static isErrorNoTelemetry(r){return r.name==="CodeExpectedError"}};var i=class{_actual;_actualOk;_actualErr;_hasValue;_value;_hasErr;_err;constructor(){this._actual=null,this._actualOk=null,this._actualErr=null,this._hasValue=!1,this._value=null,this._hasErr=!1,this._err=null}get[Symbol.toStringTag](){return this.toString()}_ensureActual(){return this._actual||(this._actual=new Promise((r,t)=>{this._actualOk=r,this._actualErr=t,this._hasValue&&this._actualOk(this._value),this._hasErr&&this._actualErr(this._err)})),this._actual}resolveOk(r){this._hasValue||this._hasErr||(this._hasValue=!0,this._value=r,this._actual&&this._actualOk(r))}resolveErr(r){this._hasValue||this._hasErr||(this._hasErr=!0,this._err=r,this._actual?this._actualErr(r):l(r))}then(r,t){return this._ensureActual().then(r,t)}catch(r){return this._ensureActual().then(void 0,r)}finally(r){return this._ensureActual().finally(r)}},u=class extends i{constructor(){super(),this._hasErr=!0,this._err=new n}};export{u as CanceledLazyPromise,i as LazyPromise};
