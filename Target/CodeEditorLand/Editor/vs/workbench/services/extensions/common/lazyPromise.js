import{CancellationError as e,onUnexpectedError as s}from"../../../../base/common/errors.js";class i{_actual;_actualOk;_actualErr;_hasValue;_value;_hasErr;_err;constructor(){this._actual=null,this._actualOk=null,this._actualErr=null,this._hasValue=!1,this._value=null,this._hasErr=!1,this._err=null}get[Symbol.toStringTag](){return this.toString()}_ensureActual(){return this._actual||(this._actual=new Promise((a,t)=>{this._actualOk=a,this._actualErr=t,this._hasValue&&this._actualOk(this._value),this._hasErr&&this._actualErr(this._err)})),this._actual}resolveOk(a){this._hasValue||this._hasErr||(this._hasValue=!0,this._value=a,this._actual&&this._actualOk(a))}resolveErr(a){this._hasValue||this._hasErr||(this._hasErr=!0,this._err=a,this._actual?this._actualErr(a):s(a))}then(a,t){return this._ensureActual().then(a,t)}catch(a){return this._ensureActual().then(void 0,a)}finally(a){return this._ensureActual().finally(a)}}class u extends i{constructor(){super(),this._hasErr=!0,this._err=new e}}export{u as CanceledLazyPromise,i as LazyPromise};
