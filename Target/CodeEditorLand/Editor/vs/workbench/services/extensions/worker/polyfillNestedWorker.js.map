{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/extensions/worker/polyfillNestedWorker.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport type {\n\tNewWorkerMessage,\n\tTerminateWorkerMessage,\n} from \"../common/polyfillNestedWorker.protocol.js\";\n\ndeclare function postMessage(data: any, transferables?: Transferable[]): void;\n\ndeclare type MessageEventHandler = ((ev: MessageEvent<any>) => any) | null;\n\nconst _bootstrapFnSource = function _bootstrapFn(workerUrl: string) {\n\tconst listener: EventListener = (event: Event): void => {\n\t\t// uninstall handler\n\t\tglobalThis.removeEventListener(\"message\", listener);\n\n\t\t// get data\n\t\tconst port = <MessagePort>(<MessageEvent>event).data;\n\n\t\t// postMessage\n\t\t// onmessage\n\t\tObject.defineProperties(globalThis, {\n\t\t\tpostMessage: {\n\t\t\t\tvalue(data: any, transferOrOptions?: any) {\n\t\t\t\t\tport.postMessage(data, transferOrOptions);\n\t\t\t\t},\n\t\t\t},\n\t\t\tonmessage: {\n\t\t\t\tget() {\n\t\t\t\t\treturn port.onmessage;\n\t\t\t\t},\n\t\t\t\tset(value: MessageEventHandler) {\n\t\t\t\t\tport.onmessage = value;\n\t\t\t\t},\n\t\t\t},\n\t\t\t// todo onerror\n\t\t});\n\n\t\tport.addEventListener(\"message\", (msg) => {\n\t\t\tglobalThis.dispatchEvent(\n\t\t\t\tnew MessageEvent(\"message\", {\n\t\t\t\t\tdata: msg.data,\n\t\t\t\t\tports: msg.ports ? [...msg.ports] : undefined,\n\t\t\t\t}),\n\t\t\t);\n\t\t});\n\n\t\tport.start();\n\n\t\t// fake recursively nested worker\n\t\tglobalThis.Worker = <any>class {\n\t\t\tconstructor() {\n\t\t\t\tthrow new TypeError(\n\t\t\t\t\t\"Nested workers from within nested worker are NOT supported.\",\n\t\t\t\t);\n\t\t\t}\n\t\t};\n\n\t\t// load module\n\t\timportScripts(workerUrl);\n\t};\n\n\tglobalThis.addEventListener(\"message\", listener);\n}.toString();\n\nexport class NestedWorker extends EventTarget implements Worker {\n\tonmessage: ((this: Worker, ev: MessageEvent<any>) => any) | null = null;\n\tonmessageerror: ((this: Worker, ev: MessageEvent<any>) => any) | null =\n\t\tnull;\n\tonerror: ((this: AbstractWorker, ev: ErrorEvent) => any) | null = null;\n\n\treadonly terminate: () => void;\n\treadonly postMessage: (message: any, options?: any) => void;\n\n\tconstructor(\n\t\tnativePostMessage: typeof postMessage,\n\t\tstringOrUrl: string | URL,\n\t\toptions?: WorkerOptions,\n\t) {\n\t\tsuper();\n\n\t\t// create bootstrap script\n\t\tconst bootstrap = `((${_bootstrapFnSource})('${stringOrUrl}'))`;\n\t\tconst blob = new Blob([bootstrap], { type: \"application/javascript\" });\n\t\tconst blobUrl = URL.createObjectURL(blob);\n\n\t\tconst channel = new MessageChannel();\n\t\tconst id = blobUrl; // works because blob url is unique, needs ID pool otherwise\n\n\t\tconst msg: NewWorkerMessage = {\n\t\t\ttype: \"_newWorker\",\n\t\t\tid,\n\t\t\tport: channel.port2,\n\t\t\turl: blobUrl,\n\t\t\toptions,\n\t\t};\n\t\tnativePostMessage(msg, [channel.port2]);\n\n\t\t// worker-impl: functions\n\t\tthis.postMessage = channel.port1.postMessage.bind(channel.port1);\n\t\tthis.terminate = () => {\n\t\t\tconst msg: TerminateWorkerMessage = {\n\t\t\t\ttype: \"_terminateWorker\",\n\t\t\t\tid,\n\t\t\t};\n\t\t\tnativePostMessage(msg);\n\t\t\tURL.revokeObjectURL(blobUrl);\n\n\t\t\tchannel.port1.close();\n\t\t\tchannel.port2.close();\n\t\t};\n\n\t\t// worker-impl: events\n\t\tObject.defineProperties(this, {\n\t\t\tonmessage: {\n\t\t\t\tget() {\n\t\t\t\t\treturn channel.port1.onmessage;\n\t\t\t\t},\n\t\t\t\tset(value: MessageEventHandler) {\n\t\t\t\t\tchannel.port1.onmessage = value;\n\t\t\t\t},\n\t\t\t},\n\t\t\tonmessageerror: {\n\t\t\t\tget() {\n\t\t\t\t\treturn channel.port1.onmessageerror;\n\t\t\t\t},\n\t\t\t\tset(value: MessageEventHandler) {\n\t\t\t\t\tchannel.port1.onmessageerror = value;\n\t\t\t\t},\n\t\t\t},\n\t\t\t// todo onerror\n\t\t});\n\n\t\tchannel.port1.addEventListener(\"messageerror\", (evt) => {\n\t\t\tconst msgEvent = new MessageEvent(\"messageerror\", {\n\t\t\t\tdata: evt.data,\n\t\t\t});\n\t\t\tthis.dispatchEvent(msgEvent);\n\t\t});\n\n\t\tchannel.port1.addEventListener(\"message\", (evt) => {\n\t\t\tconst msgEvent = new MessageEvent(\"message\", { data: evt.data });\n\t\t\tthis.dispatchEvent(msgEvent);\n\t\t});\n\n\t\tchannel.port1.start();\n\t}\n}\n"],
  "mappings": "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",
  "names": ["msg"]
}
