{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/extensions/electron-sandbox/localProcessExtensionHost.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { timeout } from \"../../../../base/common/async.js\";\nimport { VSBuffer } from \"../../../../base/common/buffer.js\";\nimport { CancellationError } from \"../../../../base/common/errors.js\";\nimport { Emitter, Event } from \"../../../../base/common/event.js\";\nimport {\n\tDisposableStore,\n\ttoDisposable,\n} from \"../../../../base/common/lifecycle.js\";\nimport * as objects from \"../../../../base/common/objects.js\";\nimport * as platform from \"../../../../base/common/platform.js\";\nimport { removeDangerousEnvVariables } from \"../../../../base/common/processes.js\";\nimport { StopWatch } from \"../../../../base/common/stopwatch.js\";\nimport { URI } from \"../../../../base/common/uri.js\";\nimport { generateUuid } from \"../../../../base/common/uuid.js\";\nimport type { IMessagePassingProtocol } from \"../../../../base/parts/ipc/common/ipc.js\";\nimport { BufferedEmitter } from \"../../../../base/parts/ipc/common/ipc.net.js\";\nimport { acquirePort } from \"../../../../base/parts/ipc/electron-sandbox/ipc.mp.js\";\nimport * as nls from \"../../../../nls.js\";\nimport { IExtensionHostDebugService } from \"../../../../platform/debug/common/extensionHostDebug.js\";\nimport {\n\ttype IExtensionHostProcessOptions,\n\tIExtensionHostStarter,\n} from \"../../../../platform/extensions/common/extensionHostStarter.js\";\nimport { ILabelService } from \"../../../../platform/label/common/label.js\";\nimport {\n\tILogService,\n\tILoggerService,\n} from \"../../../../platform/log/common/log.js\";\nimport { INativeHostService } from \"../../../../platform/native/common/native.js\";\nimport {\n\tINotificationService,\n\tNotificationPriority,\n\tSeverity,\n} from \"../../../../platform/notification/common/notification.js\";\nimport { IProductService } from \"../../../../platform/product/common/productService.js\";\nimport { ITelemetryService } from \"../../../../platform/telemetry/common/telemetry.js\";\nimport { isLoggingOnly } from \"../../../../platform/telemetry/common/telemetryUtils.js\";\nimport { IUserDataProfilesService } from \"../../../../platform/userDataProfile/common/userDataProfile.js\";\nimport {\n\tIWorkspaceContextService,\n\tWorkbenchState,\n\tisUntitledWorkspace,\n} from \"../../../../platform/workspace/common/workspace.js\";\nimport { INativeWorkbenchEnvironmentService } from \"../../environment/electron-sandbox/environmentService.js\";\nimport { IShellEnvironmentService } from \"../../environment/electron-sandbox/shellEnvironmentService.js\";\nimport { IHostService } from \"../../host/browser/host.js\";\nimport {\n\tILifecycleService,\n\ttype WillShutdownEvent,\n} from \"../../lifecycle/common/lifecycle.js\";\nimport { parseExtensionDevOptions } from \"../common/extensionDevOptions.js\";\nimport {\n\tMessagePortExtHostConnection,\n\twriteExtHostConnection,\n} from \"../common/extensionHostEnv.js\";\nimport {\n\ttype IExtensionHostInitData,\n\tMessageType,\n\tNativeLogMarkers,\n\tUIKind,\n\tisMessageOfType,\n} from \"../common/extensionHostProtocol.js\";\nimport type { LocalProcessRunningLocation } from \"../common/extensionRunningLocation.js\";\nimport {\n\ttype ExtensionHostExtensions,\n\tExtensionHostStartup,\n\ttype IExtensionHost,\n} from \"../common/extensions.js\";\n\nexport interface ILocalProcessExtensionHostInitData {\n\treadonly extensions: ExtensionHostExtensions;\n}\n\nexport interface ILocalProcessExtensionHostDataProvider {\n\tgetInitData(): Promise<ILocalProcessExtensionHostInitData>;\n}\n\nexport class ExtensionHostProcess {\n\tprivate readonly _id: string;\n\n\tpublic get onStdout(): Event<string> {\n\t\treturn this._extensionHostStarter.onDynamicStdout(this._id);\n\t}\n\n\tpublic get onStderr(): Event<string> {\n\t\treturn this._extensionHostStarter.onDynamicStderr(this._id);\n\t}\n\n\tpublic get onMessage(): Event<any> {\n\t\treturn this._extensionHostStarter.onDynamicMessage(this._id);\n\t}\n\n\tpublic get onExit(): Event<{ code: number; signal: string }> {\n\t\treturn this._extensionHostStarter.onDynamicExit(this._id);\n\t}\n\n\tconstructor(\n\t\tid: string,\n\t\tprivate readonly _extensionHostStarter: IExtensionHostStarter,\n\t) {\n\t\tthis._id = id;\n\t}\n\n\tpublic start(\n\t\topts: IExtensionHostProcessOptions,\n\t): Promise<{ pid: number | undefined }> {\n\t\treturn this._extensionHostStarter.start(this._id, opts);\n\t}\n\n\tpublic enableInspectPort(): Promise<boolean> {\n\t\treturn this._extensionHostStarter.enableInspectPort(this._id);\n\t}\n\n\tpublic kill(): Promise<void> {\n\t\treturn this._extensionHostStarter.kill(this._id);\n\t}\n}\n\nexport class NativeLocalProcessExtensionHost implements IExtensionHost {\n\tpublic pid: number | null = null;\n\tpublic readonly remoteAuthority = null;\n\tpublic extensions: ExtensionHostExtensions | null = null;\n\n\tprivate readonly _onExit: Emitter<[number, string]> = new Emitter<\n\t\t[number, string]\n\t>();\n\tpublic readonly onExit: Event<[number, string]> = this._onExit.event;\n\n\tprivate readonly _onDidSetInspectPort = new Emitter<void>();\n\n\tprivate readonly _toDispose = new DisposableStore();\n\n\tprivate readonly _isExtensionDevHost: boolean;\n\tprivate readonly _isExtensionDevDebug: boolean;\n\tprivate readonly _isExtensionDevDebugBrk: boolean;\n\tprivate readonly _isExtensionDevTestFromCli: boolean;\n\n\t// State\n\tprivate _terminating: boolean;\n\n\t// Resources, in order they get acquired/created when .start() is called:\n\tprivate _inspectListener: { port: number; host: string } | null;\n\tprivate _extensionHostProcess: ExtensionHostProcess | null;\n\tprivate _messageProtocol: Promise<IMessagePassingProtocol> | null;\n\n\tconstructor(\n\t\tpublic readonly runningLocation: LocalProcessRunningLocation,\n\t\tpublic readonly startup:\n\t\t\t| ExtensionHostStartup.EagerAutoStart\n\t\t\t| ExtensionHostStartup.EagerManualStart,\n\t\tprivate readonly _initDataProvider: ILocalProcessExtensionHostDataProvider,\n\t\t@IWorkspaceContextService\n\t\tprivate readonly _contextService: IWorkspaceContextService,\n\t\t@INotificationService\n\t\tprivate readonly _notificationService: INotificationService,\n\t\t@INativeHostService\n\t\tprivate readonly _nativeHostService: INativeHostService,\n\t\t@ILifecycleService\n\t\tprivate readonly _lifecycleService: ILifecycleService,\n\t\t@INativeWorkbenchEnvironmentService\n\t\tprivate readonly _environmentService: INativeWorkbenchEnvironmentService,\n\t\t@IUserDataProfilesService\n\t\tprivate readonly _userDataProfilesService: IUserDataProfilesService,\n\t\t@ITelemetryService\n\t\tprivate readonly _telemetryService: ITelemetryService,\n\t\t@ILogService private readonly _logService: ILogService,\n\t\t@ILoggerService private readonly _loggerService: ILoggerService,\n\t\t@ILabelService private readonly _labelService: ILabelService,\n\t\t@IExtensionHostDebugService\n\t\tprivate readonly _extensionHostDebugService: IExtensionHostDebugService,\n\t\t@IHostService private readonly _hostService: IHostService,\n\t\t@IProductService private readonly _productService: IProductService,\n\t\t@IShellEnvironmentService\n\t\tprivate readonly _shellEnvironmentService: IShellEnvironmentService,\n\t\t@IExtensionHostStarter\n\t\tprivate readonly _extensionHostStarter: IExtensionHostStarter,\n\t) {\n\t\tconst devOpts = parseExtensionDevOptions(this._environmentService);\n\t\tthis._isExtensionDevHost = devOpts.isExtensionDevHost;\n\t\tthis._isExtensionDevDebug = devOpts.isExtensionDevDebug;\n\t\tthis._isExtensionDevDebugBrk = devOpts.isExtensionDevDebugBrk;\n\t\tthis._isExtensionDevTestFromCli = devOpts.isExtensionDevTestFromCli;\n\n\t\tthis._terminating = false;\n\n\t\tthis._inspectListener = null;\n\t\tthis._extensionHostProcess = null;\n\t\tthis._messageProtocol = null;\n\n\t\tthis._toDispose.add(this._onExit);\n\t\tthis._toDispose.add(\n\t\t\tthis._lifecycleService.onWillShutdown((e) =>\n\t\t\t\tthis._onWillShutdown(e),\n\t\t\t),\n\t\t);\n\t\tthis._toDispose.add(\n\t\t\tthis._extensionHostDebugService.onClose((event) => {\n\t\t\t\tif (\n\t\t\t\t\tthis._isExtensionDevHost &&\n\t\t\t\t\tthis._environmentService.debugExtensionHost.debugId ===\n\t\t\t\t\t\tevent.sessionId\n\t\t\t\t) {\n\t\t\t\t\tthis._nativeHostService.closeWindow();\n\t\t\t\t}\n\t\t\t}),\n\t\t);\n\t\tthis._toDispose.add(\n\t\t\tthis._extensionHostDebugService.onReload((event) => {\n\t\t\t\tif (\n\t\t\t\t\tthis._isExtensionDevHost &&\n\t\t\t\t\tthis._environmentService.debugExtensionHost.debugId ===\n\t\t\t\t\t\tevent.sessionId\n\t\t\t\t) {\n\t\t\t\t\tthis._hostService.reload();\n\t\t\t\t}\n\t\t\t}),\n\t\t);\n\t}\n\n\tpublic dispose(): void {\n\t\tif (this._terminating) {\n\t\t\treturn;\n\t\t}\n\t\tthis._terminating = true;\n\n\t\tthis._toDispose.dispose();\n\t}\n\n\tpublic start(): Promise<IMessagePassingProtocol> {\n\t\tif (this._terminating) {\n\t\t\t// .terminate() was called\n\t\t\tthrow new CancellationError();\n\t\t}\n\n\t\tif (!this._messageProtocol) {\n\t\t\tthis._messageProtocol = this._start();\n\t\t}\n\n\t\treturn this._messageProtocol;\n\t}\n\n\tprivate async _start(): Promise<IMessagePassingProtocol> {\n\t\tconst [extensionHostCreationResult, portNumber, processEnv] =\n\t\t\tawait Promise.all([\n\t\t\t\tthis._extensionHostStarter.createExtensionHost(),\n\t\t\t\tthis._tryFindDebugPort(),\n\t\t\t\tthis._shellEnvironmentService.getShellEnv(),\n\t\t\t]);\n\n\t\tthis._extensionHostProcess = new ExtensionHostProcess(\n\t\t\textensionHostCreationResult.id,\n\t\t\tthis._extensionHostStarter,\n\t\t);\n\n\t\tconst env = objects.mixin(processEnv, {\n\t\t\tVSCODE_AMD_ENTRYPOINT: \"vs/workbench/api/node/extensionHostProcess\",\n\t\t\tVSCODE_HANDLES_UNCAUGHT_ERRORS: true,\n\t\t});\n\n\t\tif (this._environmentService.debugExtensionHost.env) {\n\t\t\tobjects.mixin(env, this._environmentService.debugExtensionHost.env);\n\t\t}\n\n\t\tremoveDangerousEnvVariables(env);\n\n\t\tif (this._isExtensionDevHost) {\n\t\t\t// Unset `VSCODE_CODE_CACHE_PATH` when developing extensions because it might\n\t\t\t// be that dependencies, that otherwise would be cached, get modified.\n\t\t\tdelete env[\"VSCODE_CODE_CACHE_PATH\"];\n\t\t}\n\n\t\tconst opts: IExtensionHostProcessOptions = {\n\t\t\tresponseWindowId: this._nativeHostService.windowId,\n\t\t\tresponseChannel: \"vscode:startExtensionHostMessagePortResult\",\n\t\t\tresponseNonce: generateUuid(),\n\t\t\tenv,\n\t\t\t// We only detach the extension host on windows. Linux and Mac orphan by default\n\t\t\t// and detach under Linux and Mac create another process group.\n\t\t\t// We detach because we have noticed that when the renderer exits, its child processes\n\t\t\t// (i.e. extension host) are taken down in a brutal fashion by the OS\n\t\t\tdetached: !!platform.isWindows,\n\t\t\texecArgv: undefined as string[] | undefined,\n\t\t\tsilent: true,\n\t\t};\n\n\t\tconst inspectHost = \"127.0.0.1\";\n\t\tif (portNumber !== 0) {\n\t\t\topts.execArgv = [\n\t\t\t\t\"--nolazy\",\n\t\t\t\t(this._isExtensionDevDebugBrk\n\t\t\t\t\t? \"--inspect-brk=\"\n\t\t\t\t\t: \"--inspect=\") + `${inspectHost}:${portNumber}`,\n\t\t\t];\n\t\t} else {\n\t\t\topts.execArgv = [\"--inspect-port=0\"];\n\t\t}\n\n\t\tif (this._environmentService.extensionTestsLocationURI) {\n\t\t\topts.execArgv.unshift(\"--expose-gc\");\n\t\t}\n\n\t\tif (this._environmentService.args[\"prof-v8-extensions\"]) {\n\t\t\topts.execArgv.unshift(\"--prof\");\n\t\t}\n\n\t\t// Refs https://github.com/microsoft/vscode/issues/189805\n\t\topts.execArgv.unshift(\"--dns-result-order=ipv4first\");\n\n\t\t// Catch all output coming from the extension host process\n\t\ttype Output = { data: string; format: string[] };\n\t\tconst onStdout = this._handleProcessOutputStream(\n\t\t\tthis._extensionHostProcess.onStdout,\n\t\t\tthis._toDispose,\n\t\t);\n\t\tconst onStderr = this._handleProcessOutputStream(\n\t\t\tthis._extensionHostProcess.onStderr,\n\t\t\tthis._toDispose,\n\t\t);\n\t\tconst onOutput = Event.any(\n\t\t\tEvent.map(onStdout.event, (o) => ({\n\t\t\t\tdata: `%c${o}`,\n\t\t\t\tformat: [\"\"],\n\t\t\t})),\n\t\t\tEvent.map(onStderr.event, (o) => ({\n\t\t\t\tdata: `%c${o}`,\n\t\t\t\tformat: [\"color: red\"],\n\t\t\t})),\n\t\t);\n\n\t\t// Debounce all output, so we can render it in the Chrome console as a group\n\t\tconst onDebouncedOutput = Event.debounce<Output>(\n\t\t\tonOutput,\n\t\t\t(r, o) => {\n\t\t\t\treturn r\n\t\t\t\t\t? {\n\t\t\t\t\t\t\tdata: r.data + o.data,\n\t\t\t\t\t\t\tformat: [...r.format, ...o.format],\n\t\t\t\t\t\t}\n\t\t\t\t\t: { data: o.data, format: o.format };\n\t\t\t},\n\t\t\t100,\n\t\t);\n\n\t\t// Print out extension host output\n\t\tthis._toDispose.add(\n\t\t\tonDebouncedOutput((output) => {\n\t\t\t\tconst inspectorUrlMatch =\n\t\t\t\t\toutput.data &&\n\t\t\t\t\toutput.data.match(/ws:\\/\\/([^\\s]+):(\\d+)\\/[^\\s]+/);\n\t\t\t\tif (inspectorUrlMatch) {\n\t\t\t\t\tconst [, host, port] = inspectorUrlMatch;\n\t\t\t\t\tif (\n\t\t\t\t\t\t!this._environmentService.isBuilt &&\n\t\t\t\t\t\t!this._isExtensionDevTestFromCli\n\t\t\t\t\t) {\n\t\t\t\t\t\tconsole.log(\n\t\t\t\t\t\t\t`%c[Extension Host] %cdebugger inspector at devtools://devtools/bundled/inspector.html?experiments=true&v8only=true&ws=${inspectorUrlMatch[1]}`,\n\t\t\t\t\t\t\t\"color: blue\",\n\t\t\t\t\t\t\t\"color:\",\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t\tif (!this._inspectListener) {\n\t\t\t\t\t\tthis._inspectListener = { host, port: Number(port) };\n\t\t\t\t\t\tthis._onDidSetInspectPort.fire();\n\t\t\t\t\t}\n\t\t\t\t} else if (!this._isExtensionDevTestFromCli) {\n\t\t\t\t\tconsole.group(\"Extension Host\");\n\t\t\t\t\tconsole.log(output.data, ...output.format);\n\t\t\t\t\tconsole.groupEnd();\n\t\t\t\t}\n\t\t\t}),\n\t\t);\n\n\t\t// Lifecycle\n\n\t\tthis._toDispose.add(\n\t\t\tthis._extensionHostProcess.onExit(({ code, signal }) =>\n\t\t\t\tthis._onExtHostProcessExit(code, signal),\n\t\t\t),\n\t\t);\n\n\t\t// Notify debugger that we are ready to attach to the process if we run a development extension\n\t\tif (portNumber) {\n\t\t\tif (\n\t\t\t\tthis._isExtensionDevHost &&\n\t\t\t\tthis._isExtensionDevDebug &&\n\t\t\t\tthis._environmentService.debugExtensionHost.debugId\n\t\t\t) {\n\t\t\t\tthis._extensionHostDebugService.attachSession(\n\t\t\t\t\tthis._environmentService.debugExtensionHost.debugId,\n\t\t\t\t\tportNumber,\n\t\t\t\t);\n\t\t\t}\n\t\t\tthis._inspectListener = { port: portNumber, host: inspectHost };\n\t\t\tthis._onDidSetInspectPort.fire();\n\t\t}\n\n\t\t// Help in case we fail to start it\n\t\tlet startupTimeoutHandle: any;\n\t\tif (\n\t\t\t(!this._environmentService.isBuilt &&\n\t\t\t\t!this._environmentService.remoteAuthority) ||\n\t\t\tthis._isExtensionDevHost\n\t\t) {\n\t\t\tstartupTimeoutHandle = setTimeout(() => {\n\t\t\t\tthis._logService.error(\n\t\t\t\t\t`[LocalProcessExtensionHost]: Extension host did not start in 10 seconds (debugBrk: ${this._isExtensionDevDebugBrk})`,\n\t\t\t\t);\n\n\t\t\t\tconst msg = this._isExtensionDevDebugBrk\n\t\t\t\t\t? nls.localize(\n\t\t\t\t\t\t\t\"extensionHost.startupFailDebug\",\n\t\t\t\t\t\t\t\"Extension host did not start in 10 seconds, it might be stopped on the first line and needs a debugger to continue.\",\n\t\t\t\t\t\t)\n\t\t\t\t\t: nls.localize(\n\t\t\t\t\t\t\t\"extensionHost.startupFail\",\n\t\t\t\t\t\t\t\"Extension host did not start in 10 seconds, that might be a problem.\",\n\t\t\t\t\t\t);\n\n\t\t\t\tthis._notificationService.prompt(\n\t\t\t\t\tSeverity.Warning,\n\t\t\t\t\tmsg,\n\t\t\t\t\t[\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: nls.localize(\n\t\t\t\t\t\t\t\t\"reloadWindow\",\n\t\t\t\t\t\t\t\t\"Reload Window\",\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\trun: () => this._hostService.reload(),\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t\t{\n\t\t\t\t\t\tsticky: true,\n\t\t\t\t\t\tpriority: NotificationPriority.URGENT,\n\t\t\t\t\t},\n\t\t\t\t);\n\t\t\t}, 10000);\n\t\t}\n\n\t\t// Initialize extension host process with hand shakes\n\t\tconst protocol = await this._establishProtocol(\n\t\t\tthis._extensionHostProcess,\n\t\t\topts,\n\t\t);\n\t\tawait this._performHandshake(protocol);\n\t\tclearTimeout(startupTimeoutHandle);\n\t\treturn protocol;\n\t}\n\n\t/**\n\t * Find a free port if extension host debugging is enabled.\n\t */\n\tprivate async _tryFindDebugPort(): Promise<number> {\n\t\tif (\n\t\t\ttypeof this._environmentService.debugExtensionHost.port !== \"number\"\n\t\t) {\n\t\t\treturn 0;\n\t\t}\n\n\t\tconst expected = this._environmentService.debugExtensionHost.port;\n\t\tconst port = await this._nativeHostService.findFreePort(\n\t\t\texpected,\n\t\t\t10 /* try 10 ports */,\n\t\t\t5000 /* try up to 5 seconds */,\n\t\t\t2048 /* skip 2048 ports between attempts */,\n\t\t);\n\n\t\tif (!this._isExtensionDevTestFromCli) {\n\t\t\tif (port) {\n\t\t\t\tif (port !== expected) {\n\t\t\t\t\tconsole.warn(\n\t\t\t\t\t\t`%c[Extension Host] %cProvided debugging port ${expected} is not free, using ${port} instead.`,\n\t\t\t\t\t\t\"color: blue\",\n\t\t\t\t\t\t\"color:\",\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t\tif (this._isExtensionDevDebugBrk) {\n\t\t\t\t\tconsole.warn(\n\t\t\t\t\t\t`%c[Extension Host] %cSTOPPED on first line for debugging on port ${port}`,\n\t\t\t\t\t\t\"color: blue\",\n\t\t\t\t\t\t\"color:\",\n\t\t\t\t\t);\n\t\t\t\t} else {\n\t\t\t\t\tconsole.info(\n\t\t\t\t\t\t`%c[Extension Host] %cdebugger listening on port ${port}`,\n\t\t\t\t\t\t\"color: blue\",\n\t\t\t\t\t\t\"color:\",\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tconsole.warn(\n\t\t\t\t\t\"%c[Extension Host] %cCould not find a free port for debugging\",\n\t\t\t\t\t\"color: blue\",\n\t\t\t\t\t\"color:\",\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\treturn port || 0;\n\t}\n\n\tprivate _establishProtocol(\n\t\textensionHostProcess: ExtensionHostProcess,\n\t\topts: IExtensionHostProcessOptions,\n\t): Promise<IMessagePassingProtocol> {\n\t\twriteExtHostConnection(new MessagePortExtHostConnection(), opts.env);\n\n\t\t// Get ready to acquire the message port from the shared process worker\n\t\tconst portPromise = acquirePort(\n\t\t\tundefined /* we trigger the request via service call! */,\n\t\t\topts.responseChannel,\n\t\t\topts.responseNonce,\n\t\t);\n\n\t\treturn new Promise<IMessagePassingProtocol>((resolve, reject) => {\n\t\t\tconst handle = setTimeout(() => {\n\t\t\t\treject(\n\t\t\t\t\t\"The local extension host took longer than 60s to connect.\",\n\t\t\t\t);\n\t\t\t}, 60 * 1000);\n\n\t\t\tportPromise.then((port) => {\n\t\t\t\tthis._toDispose.add(\n\t\t\t\t\ttoDisposable(() => {\n\t\t\t\t\t\t// Close the message port when the extension host is disposed\n\t\t\t\t\t\tport.close();\n\t\t\t\t\t}),\n\t\t\t\t);\n\t\t\t\tclearTimeout(handle);\n\n\t\t\t\tconst onMessage = new BufferedEmitter<VSBuffer>();\n\t\t\t\tport.onmessage = (e) => {\n\t\t\t\t\tif (e.data) {\n\t\t\t\t\t\tonMessage.fire(VSBuffer.wrap(e.data));\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t\tport.start();\n\n\t\t\t\tresolve({\n\t\t\t\t\tonMessage: onMessage.event,\n\t\t\t\t\tsend: (message) => port.postMessage(message.buffer),\n\t\t\t\t});\n\t\t\t});\n\n\t\t\t// Now that the message port listener is installed, start the ext host process\n\t\t\tconst sw = StopWatch.create(false);\n\t\t\textensionHostProcess.start(opts).then(\n\t\t\t\t({ pid }) => {\n\t\t\t\t\tif (pid) {\n\t\t\t\t\t\tthis.pid = pid;\n\t\t\t\t\t}\n\t\t\t\t\tthis._logService.info(\n\t\t\t\t\t\t`Started local extension host with pid ${pid}.`,\n\t\t\t\t\t);\n\t\t\t\t\tconst duration = sw.elapsed();\n\t\t\t\t\tif (platform.isCI) {\n\t\t\t\t\t\tthis._logService.info(\n\t\t\t\t\t\t\t`IExtensionHostStarter.start() took ${duration} ms.`,\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t(err) => {\n\t\t\t\t\t// Starting the ext host process resulted in an error\n\t\t\t\t\treject(err);\n\t\t\t\t},\n\t\t\t);\n\t\t});\n\t}\n\n\tprivate _performHandshake(\n\t\tprotocol: IMessagePassingProtocol,\n\t): Promise<void> {\n\t\t// 1) wait for the incoming `ready` event and send the initialization data.\n\t\t// 2) wait for the incoming `initialized` event.\n\t\treturn new Promise<void>((resolve, reject) => {\n\t\t\tlet timeoutHandle: any;\n\t\t\tconst installTimeoutCheck = () => {\n\t\t\t\ttimeoutHandle = setTimeout(() => {\n\t\t\t\t\treject(\n\t\t\t\t\t\t\"The local extension host took longer than 60s to send its ready message.\",\n\t\t\t\t\t);\n\t\t\t\t}, 60 * 1000);\n\t\t\t};\n\t\t\tconst uninstallTimeoutCheck = () => {\n\t\t\t\tclearTimeout(timeoutHandle);\n\t\t\t};\n\n\t\t\t// Wait 60s for the ready message\n\t\t\tinstallTimeoutCheck();\n\n\t\t\tconst disposable = protocol.onMessage((msg) => {\n\t\t\t\tif (isMessageOfType(msg, MessageType.Ready)) {\n\t\t\t\t\t// 1) Extension Host is ready to receive messages, initialize it\n\t\t\t\t\tuninstallTimeoutCheck();\n\n\t\t\t\t\tthis._createExtHostInitData().then((data) => {\n\t\t\t\t\t\t// Wait 60s for the initialized message\n\t\t\t\t\t\tinstallTimeoutCheck();\n\n\t\t\t\t\t\tprotocol.send(\n\t\t\t\t\t\t\tVSBuffer.fromString(JSON.stringify(data)),\n\t\t\t\t\t\t);\n\t\t\t\t\t});\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (isMessageOfType(msg, MessageType.Initialized)) {\n\t\t\t\t\t// 2) Extension Host is initialized\n\t\t\t\t\tuninstallTimeoutCheck();\n\n\t\t\t\t\t// stop listening for messages here\n\t\t\t\t\tdisposable.dispose();\n\n\t\t\t\t\t// release this promise\n\t\t\t\t\tresolve();\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconsole.error(\n\t\t\t\t\t`received unexpected message during handshake phase from the extension host: `,\n\t\t\t\t\tmsg,\n\t\t\t\t);\n\t\t\t});\n\t\t});\n\t}\n\n\tprivate async _createExtHostInitData(): Promise<IExtensionHostInitData> {\n\t\tconst initData = await this._initDataProvider.getInitData();\n\t\tthis.extensions = initData.extensions;\n\t\tconst workspace = this._contextService.getWorkspace();\n\t\treturn {\n\t\t\tcommit: this._productService.commit,\n\t\t\tversion: this._productService.version,\n\t\t\tquality: this._productService.quality,\n\t\t\tparentPid: 0,\n\t\t\tenvironment: {\n\t\t\t\tisExtensionDevelopmentDebug: this._isExtensionDevDebug,\n\t\t\t\tappRoot: this._environmentService.appRoot\n\t\t\t\t\t? URI.file(this._environmentService.appRoot)\n\t\t\t\t\t: undefined,\n\t\t\t\tappName: this._productService.nameLong,\n\t\t\t\tappHost: this._productService.embedderIdentifier || \"desktop\",\n\t\t\t\tappUriScheme: this._productService.urlProtocol,\n\t\t\t\textensionTelemetryLogResource:\n\t\t\t\t\tthis._environmentService.extHostTelemetryLogFile,\n\t\t\t\tisExtensionTelemetryLoggingOnly: isLoggingOnly(\n\t\t\t\t\tthis._productService,\n\t\t\t\t\tthis._environmentService,\n\t\t\t\t),\n\t\t\t\tappLanguage: platform.language,\n\t\t\t\textensionDevelopmentLocationURI:\n\t\t\t\t\tthis._environmentService.extensionDevelopmentLocationURI,\n\t\t\t\textensionTestsLocationURI:\n\t\t\t\t\tthis._environmentService.extensionTestsLocationURI,\n\t\t\t\tglobalStorageHome:\n\t\t\t\t\tthis._userDataProfilesService.defaultProfile\n\t\t\t\t\t\t.globalStorageHome,\n\t\t\t\tworkspaceStorageHome:\n\t\t\t\t\tthis._environmentService.workspaceStorageHome,\n\t\t\t\textensionLogLevel: this._environmentService.extensionLogLevel,\n\t\t\t},\n\t\t\tworkspace:\n\t\t\t\tthis._contextService.getWorkbenchState() ===\n\t\t\t\tWorkbenchState.EMPTY\n\t\t\t\t\t? undefined\n\t\t\t\t\t: {\n\t\t\t\t\t\t\tconfiguration: workspace.configuration ?? undefined,\n\t\t\t\t\t\t\tid: workspace.id,\n\t\t\t\t\t\t\tname: this._labelService.getWorkspaceLabel(\n\t\t\t\t\t\t\t\tworkspace,\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\tisUntitled: workspace.configuration\n\t\t\t\t\t\t\t\t? isUntitledWorkspace(\n\t\t\t\t\t\t\t\t\t\tworkspace.configuration,\n\t\t\t\t\t\t\t\t\t\tthis._environmentService,\n\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t: false,\n\t\t\t\t\t\t\ttransient: workspace.transient,\n\t\t\t\t\t\t},\n\t\t\tremote: {\n\t\t\t\tauthority: this._environmentService.remoteAuthority,\n\t\t\t\tconnectionData: null,\n\t\t\t\tisRemote: false,\n\t\t\t},\n\t\t\tconsoleForward: {\n\t\t\t\tincludeStack:\n\t\t\t\t\t!this._isExtensionDevTestFromCli &&\n\t\t\t\t\t(this._isExtensionDevHost ||\n\t\t\t\t\t\t!this._environmentService.isBuilt ||\n\t\t\t\t\t\tthis._productService.quality !== \"stable\" ||\n\t\t\t\t\t\tthis._environmentService.verbose),\n\t\t\t\tlogNative:\n\t\t\t\t\t!this._isExtensionDevTestFromCli &&\n\t\t\t\t\tthis._isExtensionDevHost,\n\t\t\t},\n\t\t\textensions: this.extensions.toSnapshot(),\n\t\t\ttelemetryInfo: {\n\t\t\t\tsessionId: this._telemetryService.sessionId,\n\t\t\t\tmachineId: this._telemetryService.machineId,\n\t\t\t\tsqmId: this._telemetryService.sqmId,\n\t\t\t\tdevDeviceId: this._telemetryService.devDeviceId,\n\t\t\t\tfirstSessionDate: this._telemetryService.firstSessionDate,\n\t\t\t\tmsftInternal: this._telemetryService.msftInternal,\n\t\t\t},\n\t\t\tlogLevel: this._logService.getLevel(),\n\t\t\tloggers: [...this._loggerService.getRegisteredLoggers()],\n\t\t\tlogsLocation: this._environmentService.extHostLogsPath,\n\t\t\tautoStart: this.startup === ExtensionHostStartup.EagerAutoStart,\n\t\t\tuiKind: UIKind.Desktop,\n\t\t};\n\t}\n\n\tprivate _onExtHostProcessExit(code: number, signal: string): void {\n\t\tif (this._terminating) {\n\t\t\t// Expected termination path (we asked the process to terminate)\n\t\t\treturn;\n\t\t}\n\n\t\tthis._onExit.fire([code, signal]);\n\t}\n\n\tprivate _handleProcessOutputStream(\n\t\tstream: Event<string>,\n\t\tstore: DisposableStore,\n\t) {\n\t\tlet last = \"\";\n\t\tlet isOmitting = false;\n\t\tconst event = new Emitter<string>();\n\t\tstream(\n\t\t\t(chunk) => {\n\t\t\t\t// not a fancy approach, but this is the same approach used by the split2\n\t\t\t\t// module which is well-optimized (https://github.com/mcollina/split2)\n\t\t\t\tlast += chunk;\n\t\t\t\tconst lines = last.split(/\\r?\\n/g);\n\t\t\t\tlast = lines.pop()!;\n\n\t\t\t\t// protected against an extension spamming and leaking memory if no new line is written.\n\t\t\t\tif (last.length > 10_000) {\n\t\t\t\t\tlines.push(last);\n\t\t\t\t\tlast = \"\";\n\t\t\t\t}\n\n\t\t\t\tfor (const line of lines) {\n\t\t\t\t\tif (isOmitting) {\n\t\t\t\t\t\tif (line === NativeLogMarkers.End) {\n\t\t\t\t\t\t\tisOmitting = false;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if (line === NativeLogMarkers.Start) {\n\t\t\t\t\t\tisOmitting = true;\n\t\t\t\t\t} else if (line.length) {\n\t\t\t\t\t\tevent.fire(line + \"\\n\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\t\t\tundefined,\n\t\t\tstore,\n\t\t);\n\n\t\treturn event;\n\t}\n\n\tpublic async enableInspectPort(): Promise<boolean> {\n\t\tif (!!this._inspectListener) {\n\t\t\treturn true;\n\t\t}\n\n\t\tif (!this._extensionHostProcess) {\n\t\t\treturn false;\n\t\t}\n\n\t\tconst result = await this._extensionHostProcess.enableInspectPort();\n\t\tif (!result) {\n\t\t\treturn false;\n\t\t}\n\n\t\tawait Promise.race([\n\t\t\tEvent.toPromise(this._onDidSetInspectPort.event),\n\t\t\ttimeout(1000),\n\t\t]);\n\t\treturn !!this._inspectListener;\n\t}\n\n\tpublic getInspectPort(): { port: number; host: string } | undefined {\n\t\treturn this._inspectListener ?? undefined;\n\t}\n\n\tprivate _onWillShutdown(event: WillShutdownEvent): void {\n\t\t// If the extension development host was started without debugger attached we need\n\t\t// to communicate this back to the main side to terminate the debug session\n\t\tif (\n\t\t\tthis._isExtensionDevHost &&\n\t\t\t!this._isExtensionDevTestFromCli &&\n\t\t\t!this._isExtensionDevDebug &&\n\t\t\tthis._environmentService.debugExtensionHost.debugId\n\t\t) {\n\t\t\tthis._extensionHostDebugService.terminateSession(\n\t\t\t\tthis._environmentService.debugExtensionHost.debugId,\n\t\t\t);\n\t\t\tevent.join(timeout(100 /* wait a bit for IPC to get delivered */), {\n\t\t\t\tid: \"join.extensionDevelopment\",\n\t\t\t\tlabel: nls.localize(\n\t\t\t\t\t\"join.extensionDevelopment\",\n\t\t\t\t\t\"Terminating extension debug session\",\n\t\t\t\t),\n\t\t\t});\n\t\t}\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
