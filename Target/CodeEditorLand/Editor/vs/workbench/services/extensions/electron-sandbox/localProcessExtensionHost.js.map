{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/extensions/electron-sandbox/localProcessExtensionHost.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { timeout } from '../../../../base/common/async.js';\nimport { VSBuffer } from '../../../../base/common/buffer.js';\nimport { CancellationError } from '../../../../base/common/errors.js';\nimport { Emitter, Event } from '../../../../base/common/event.js';\nimport { DisposableStore, toDisposable } from '../../../../base/common/lifecycle.js';\nimport * as objects from '../../../../base/common/objects.js';\nimport * as platform from '../../../../base/common/platform.js';\nimport { removeDangerousEnvVariables } from '../../../../base/common/processes.js';\nimport { StopWatch } from '../../../../base/common/stopwatch.js';\nimport { URI } from '../../../../base/common/uri.js';\nimport { generateUuid } from '../../../../base/common/uuid.js';\nimport { IMessagePassingProtocol } from '../../../../base/parts/ipc/common/ipc.js';\nimport { BufferedEmitter } from '../../../../base/parts/ipc/common/ipc.net.js';\nimport { acquirePort } from '../../../../base/parts/ipc/electron-sandbox/ipc.mp.js';\nimport * as nls from '../../../../nls.js';\nimport { IExtensionHostDebugService } from '../../../../platform/debug/common/extensionHostDebug.js';\nimport { IExtensionHostProcessOptions, IExtensionHostStarter } from '../../../../platform/extensions/common/extensionHostStarter.js';\nimport { ILabelService } from '../../../../platform/label/common/label.js';\nimport { ILogService, ILoggerService } from '../../../../platform/log/common/log.js';\nimport { INativeHostService } from '../../../../platform/native/common/native.js';\nimport { INotificationService, NotificationPriority, Severity } from '../../../../platform/notification/common/notification.js';\nimport { IProductService } from '../../../../platform/product/common/productService.js';\nimport { ITelemetryService } from '../../../../platform/telemetry/common/telemetry.js';\nimport { isLoggingOnly } from '../../../../platform/telemetry/common/telemetryUtils.js';\nimport { IUserDataProfilesService } from '../../../../platform/userDataProfile/common/userDataProfile.js';\nimport { IWorkspaceContextService, WorkbenchState, isUntitledWorkspace } from '../../../../platform/workspace/common/workspace.js';\nimport { INativeWorkbenchEnvironmentService } from '../../environment/electron-sandbox/environmentService.js';\nimport { IShellEnvironmentService } from '../../environment/electron-sandbox/shellEnvironmentService.js';\nimport { MessagePortExtHostConnection, writeExtHostConnection } from '../common/extensionHostEnv.js';\nimport { IExtensionHostInitData, MessageType, NativeLogMarkers, UIKind, isMessageOfType } from '../common/extensionHostProtocol.js';\nimport { LocalProcessRunningLocation } from '../common/extensionRunningLocation.js';\nimport { ExtensionHostExtensions, ExtensionHostStartup, IExtensionHost } from '../common/extensions.js';\nimport { IHostService } from '../../host/browser/host.js';\nimport { ILifecycleService, WillShutdownEvent } from '../../lifecycle/common/lifecycle.js';\nimport { parseExtensionDevOptions } from '../common/extensionDevOptions.js';\n\nexport interface ILocalProcessExtensionHostInitData {\n\treadonly extensions: ExtensionHostExtensions;\n}\n\nexport interface ILocalProcessExtensionHostDataProvider {\n\tgetInitData(): Promise<ILocalProcessExtensionHostInitData>;\n}\n\nexport class ExtensionHostProcess {\n\n\tprivate readonly _id: string;\n\n\tpublic get onStdout(): Event<string> {\n\t\treturn this._extensionHostStarter.onDynamicStdout(this._id);\n\t}\n\n\tpublic get onStderr(): Event<string> {\n\t\treturn this._extensionHostStarter.onDynamicStderr(this._id);\n\t}\n\n\tpublic get onMessage(): Event<any> {\n\t\treturn this._extensionHostStarter.onDynamicMessage(this._id);\n\t}\n\n\tpublic get onExit(): Event<{ code: number; signal: string }> {\n\t\treturn this._extensionHostStarter.onDynamicExit(this._id);\n\t}\n\n\tconstructor(\n\t\tid: string,\n\t\tprivate readonly _extensionHostStarter: IExtensionHostStarter,\n\t) {\n\t\tthis._id = id;\n\t}\n\n\tpublic start(opts: IExtensionHostProcessOptions): Promise<{ pid: number | undefined }> {\n\t\treturn this._extensionHostStarter.start(this._id, opts);\n\t}\n\n\tpublic enableInspectPort(): Promise<boolean> {\n\t\treturn this._extensionHostStarter.enableInspectPort(this._id);\n\t}\n\n\tpublic kill(): Promise<void> {\n\t\treturn this._extensionHostStarter.kill(this._id);\n\t}\n}\n\nexport class NativeLocalProcessExtensionHost implements IExtensionHost {\n\n\tpublic pid: number | null = null;\n\tpublic readonly remoteAuthority = null;\n\tpublic extensions: ExtensionHostExtensions | null = null;\n\n\tprivate readonly _onExit: Emitter<[number, string]> = new Emitter<[number, string]>();\n\tpublic readonly onExit: Event<[number, string]> = this._onExit.event;\n\n\tprivate readonly _onDidSetInspectPort = new Emitter<void>();\n\n\tprivate readonly _toDispose = new DisposableStore();\n\n\tprivate readonly _isExtensionDevHost: boolean;\n\tprivate readonly _isExtensionDevDebug: boolean;\n\tprivate readonly _isExtensionDevDebugBrk: boolean;\n\tprivate readonly _isExtensionDevTestFromCli: boolean;\n\n\t// State\n\tprivate _terminating: boolean;\n\n\t// Resources, in order they get acquired/created when .start() is called:\n\tprivate _inspectListener: { port: number; host: string } | null;\n\tprivate _extensionHostProcess: ExtensionHostProcess | null;\n\tprivate _messageProtocol: Promise<IMessagePassingProtocol> | null;\n\n\tconstructor(\n\t\tpublic readonly runningLocation: LocalProcessRunningLocation,\n\t\tpublic readonly startup: ExtensionHostStartup.EagerAutoStart | ExtensionHostStartup.EagerManualStart,\n\t\tprivate readonly _initDataProvider: ILocalProcessExtensionHostDataProvider,\n\t\t@IWorkspaceContextService private readonly _contextService: IWorkspaceContextService,\n\t\t@INotificationService private readonly _notificationService: INotificationService,\n\t\t@INativeHostService private readonly _nativeHostService: INativeHostService,\n\t\t@ILifecycleService private readonly _lifecycleService: ILifecycleService,\n\t\t@INativeWorkbenchEnvironmentService private readonly _environmentService: INativeWorkbenchEnvironmentService,\n\t\t@IUserDataProfilesService private readonly _userDataProfilesService: IUserDataProfilesService,\n\t\t@ITelemetryService private readonly _telemetryService: ITelemetryService,\n\t\t@ILogService private readonly _logService: ILogService,\n\t\t@ILoggerService private readonly _loggerService: ILoggerService,\n\t\t@ILabelService private readonly _labelService: ILabelService,\n\t\t@IExtensionHostDebugService private readonly _extensionHostDebugService: IExtensionHostDebugService,\n\t\t@IHostService private readonly _hostService: IHostService,\n\t\t@IProductService private readonly _productService: IProductService,\n\t\t@IShellEnvironmentService private readonly _shellEnvironmentService: IShellEnvironmentService,\n\t\t@IExtensionHostStarter private readonly _extensionHostStarter: IExtensionHostStarter,\n\t) {\n\t\tconst devOpts = parseExtensionDevOptions(this._environmentService);\n\t\tthis._isExtensionDevHost = devOpts.isExtensionDevHost;\n\t\tthis._isExtensionDevDebug = devOpts.isExtensionDevDebug;\n\t\tthis._isExtensionDevDebugBrk = devOpts.isExtensionDevDebugBrk;\n\t\tthis._isExtensionDevTestFromCli = devOpts.isExtensionDevTestFromCli;\n\n\t\tthis._terminating = false;\n\n\t\tthis._inspectListener = null;\n\t\tthis._extensionHostProcess = null;\n\t\tthis._messageProtocol = null;\n\n\t\tthis._toDispose.add(this._onExit);\n\t\tthis._toDispose.add(this._lifecycleService.onWillShutdown(e => this._onWillShutdown(e)));\n\t\tthis._toDispose.add(this._extensionHostDebugService.onClose(event => {\n\t\t\tif (this._isExtensionDevHost && this._environmentService.debugExtensionHost.debugId === event.sessionId) {\n\t\t\t\tthis._nativeHostService.closeWindow();\n\t\t\t}\n\t\t}));\n\t\tthis._toDispose.add(this._extensionHostDebugService.onReload(event => {\n\t\t\tif (this._isExtensionDevHost && this._environmentService.debugExtensionHost.debugId === event.sessionId) {\n\t\t\t\tthis._hostService.reload();\n\t\t\t}\n\t\t}));\n\t}\n\n\tpublic dispose(): void {\n\t\tif (this._terminating) {\n\t\t\treturn;\n\t\t}\n\t\tthis._terminating = true;\n\n\t\tthis._toDispose.dispose();\n\t}\n\n\tpublic start(): Promise<IMessagePassingProtocol> {\n\t\tif (this._terminating) {\n\t\t\t// .terminate() was called\n\t\t\tthrow new CancellationError();\n\t\t}\n\n\t\tif (!this._messageProtocol) {\n\t\t\tthis._messageProtocol = this._start();\n\t\t}\n\n\t\treturn this._messageProtocol;\n\t}\n\n\tprivate async _start(): Promise<IMessagePassingProtocol> {\n\t\tconst [extensionHostCreationResult, portNumber, processEnv] = await Promise.all([\n\t\t\tthis._extensionHostStarter.createExtensionHost(),\n\t\t\tthis._tryFindDebugPort(),\n\t\t\tthis._shellEnvironmentService.getShellEnv(),\n\t\t]);\n\n\t\tthis._extensionHostProcess = new ExtensionHostProcess(extensionHostCreationResult.id, this._extensionHostStarter);\n\n\t\tconst env = objects.mixin(processEnv, {\n\t\t\tVSCODE_AMD_ENTRYPOINT: 'vs/workbench/api/node/extensionHostProcess',\n\t\t\tVSCODE_HANDLES_UNCAUGHT_ERRORS: true\n\t\t});\n\n\t\tif (this._environmentService.debugExtensionHost.env) {\n\t\t\tobjects.mixin(env, this._environmentService.debugExtensionHost.env);\n\t\t}\n\n\t\tremoveDangerousEnvVariables(env);\n\n\t\tif (this._isExtensionDevHost) {\n\t\t\t// Unset `VSCODE_CODE_CACHE_PATH` when developing extensions because it might\n\t\t\t// be that dependencies, that otherwise would be cached, get modified.\n\t\t\tdelete env['VSCODE_CODE_CACHE_PATH'];\n\t\t}\n\n\t\tconst opts: IExtensionHostProcessOptions = {\n\t\t\tresponseWindowId: this._nativeHostService.windowId,\n\t\t\tresponseChannel: 'vscode:startExtensionHostMessagePortResult',\n\t\t\tresponseNonce: generateUuid(),\n\t\t\tenv,\n\t\t\t// We only detach the extension host on windows. Linux and Mac orphan by default\n\t\t\t// and detach under Linux and Mac create another process group.\n\t\t\t// We detach because we have noticed that when the renderer exits, its child processes\n\t\t\t// (i.e. extension host) are taken down in a brutal fashion by the OS\n\t\t\tdetached: !!platform.isWindows,\n\t\t\texecArgv: undefined as string[] | undefined,\n\t\t\tsilent: true\n\t\t};\n\n\t\tconst inspectHost = '127.0.0.1';\n\t\tif (portNumber !== 0) {\n\t\t\topts.execArgv = [\n\t\t\t\t'--nolazy',\n\t\t\t\t(this._isExtensionDevDebugBrk ? '--inspect-brk=' : '--inspect=') + `${inspectHost}:${portNumber}`\n\t\t\t];\n\t\t} else {\n\t\t\topts.execArgv = ['--inspect-port=0'];\n\t\t}\n\n\t\tif (this._environmentService.extensionTestsLocationURI) {\n\t\t\topts.execArgv.unshift('--expose-gc');\n\t\t}\n\n\t\tif (this._environmentService.args['prof-v8-extensions']) {\n\t\t\topts.execArgv.unshift('--prof');\n\t\t}\n\n\t\t// Refs https://github.com/microsoft/vscode/issues/189805\n\t\topts.execArgv.unshift('--dns-result-order=ipv4first');\n\n\t\t// Catch all output coming from the extension host process\n\t\ttype Output = { data: string; format: string[] };\n\t\tconst onStdout = this._handleProcessOutputStream(this._extensionHostProcess.onStdout, this._toDispose);\n\t\tconst onStderr = this._handleProcessOutputStream(this._extensionHostProcess.onStderr, this._toDispose);\n\t\tconst onOutput = Event.any(\n\t\t\tEvent.map(onStdout.event, o => ({ data: `%c${o}`, format: [''] })),\n\t\t\tEvent.map(onStderr.event, o => ({ data: `%c${o}`, format: ['color: red'] }))\n\t\t);\n\n\t\t// Debounce all output, so we can render it in the Chrome console as a group\n\t\tconst onDebouncedOutput = Event.debounce<Output>(onOutput, (r, o) => {\n\t\t\treturn r\n\t\t\t\t? { data: r.data + o.data, format: [...r.format, ...o.format] }\n\t\t\t\t: { data: o.data, format: o.format };\n\t\t}, 100);\n\n\t\t// Print out extension host output\n\t\tthis._toDispose.add(onDebouncedOutput(output => {\n\t\t\tconst inspectorUrlMatch = output.data && output.data.match(/ws:\\/\\/([^\\s]+):(\\d+)\\/[^\\s]+/);\n\t\t\tif (inspectorUrlMatch) {\n\t\t\t\tconst [, host, port] = inspectorUrlMatch;\n\t\t\t\tif (!this._environmentService.isBuilt && !this._isExtensionDevTestFromCli) {\n\t\t\t\t\tconsole.log(`%c[Extension Host] %cdebugger inspector at devtools://devtools/bundled/inspector.html?experiments=true&v8only=true&ws=${inspectorUrlMatch[1]}`, 'color: blue', 'color:');\n\t\t\t\t}\n\t\t\t\tif (!this._inspectListener) {\n\t\t\t\t\tthis._inspectListener = { host, port: Number(port) };\n\t\t\t\t\tthis._onDidSetInspectPort.fire();\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif (!this._isExtensionDevTestFromCli) {\n\t\t\t\t\tconsole.group('Extension Host');\n\t\t\t\t\tconsole.log(output.data, ...output.format);\n\t\t\t\t\tconsole.groupEnd();\n\t\t\t\t}\n\t\t\t}\n\t\t}));\n\n\t\t// Lifecycle\n\n\t\tthis._toDispose.add(this._extensionHostProcess.onExit(({ code, signal }) => this._onExtHostProcessExit(code, signal)));\n\n\t\t// Notify debugger that we are ready to attach to the process if we run a development extension\n\t\tif (portNumber) {\n\t\t\tif (this._isExtensionDevHost && this._isExtensionDevDebug && this._environmentService.debugExtensionHost.debugId) {\n\t\t\t\tthis._extensionHostDebugService.attachSession(this._environmentService.debugExtensionHost.debugId, portNumber);\n\t\t\t}\n\t\t\tthis._inspectListener = { port: portNumber, host: inspectHost };\n\t\t\tthis._onDidSetInspectPort.fire();\n\t\t}\n\n\t\t// Help in case we fail to start it\n\t\tlet startupTimeoutHandle: any;\n\t\tif (!this._environmentService.isBuilt && !this._environmentService.remoteAuthority || this._isExtensionDevHost) {\n\t\t\tstartupTimeoutHandle = setTimeout(() => {\n\t\t\t\tthis._logService.error(`[LocalProcessExtensionHost]: Extension host did not start in 10 seconds (debugBrk: ${this._isExtensionDevDebugBrk})`);\n\n\t\t\t\tconst msg = this._isExtensionDevDebugBrk\n\t\t\t\t\t? nls.localize('extensionHost.startupFailDebug', \"Extension host did not start in 10 seconds, it might be stopped on the first line and needs a debugger to continue.\")\n\t\t\t\t\t: nls.localize('extensionHost.startupFail', \"Extension host did not start in 10 seconds, that might be a problem.\");\n\n\t\t\t\tthis._notificationService.prompt(Severity.Warning, msg,\n\t\t\t\t\t[{\n\t\t\t\t\t\tlabel: nls.localize('reloadWindow', \"Reload Window\"),\n\t\t\t\t\t\trun: () => this._hostService.reload()\n\t\t\t\t\t}],\n\t\t\t\t\t{\n\t\t\t\t\t\tsticky: true,\n\t\t\t\t\t\tpriority: NotificationPriority.URGENT\n\t\t\t\t\t}\n\t\t\t\t);\n\t\t\t}, 10000);\n\t\t}\n\n\t\t// Initialize extension host process with hand shakes\n\t\tconst protocol = await this._establishProtocol(this._extensionHostProcess, opts);\n\t\tawait this._performHandshake(protocol);\n\t\tclearTimeout(startupTimeoutHandle);\n\t\treturn protocol;\n\t}\n\n\t/**\n\t * Find a free port if extension host debugging is enabled.\n\t */\n\tprivate async _tryFindDebugPort(): Promise<number> {\n\n\t\tif (typeof this._environmentService.debugExtensionHost.port !== 'number') {\n\t\t\treturn 0;\n\t\t}\n\n\t\tconst expected = this._environmentService.debugExtensionHost.port;\n\t\tconst port = await this._nativeHostService.findFreePort(expected, 10 /* try 10 ports */, 5000 /* try up to 5 seconds */, 2048 /* skip 2048 ports between attempts */);\n\n\t\tif (!this._isExtensionDevTestFromCli) {\n\t\t\tif (!port) {\n\t\t\t\tconsole.warn('%c[Extension Host] %cCould not find a free port for debugging', 'color: blue', 'color:');\n\t\t\t} else {\n\t\t\t\tif (port !== expected) {\n\t\t\t\t\tconsole.warn(`%c[Extension Host] %cProvided debugging port ${expected} is not free, using ${port} instead.`, 'color: blue', 'color:');\n\t\t\t\t}\n\t\t\t\tif (this._isExtensionDevDebugBrk) {\n\t\t\t\t\tconsole.warn(`%c[Extension Host] %cSTOPPED on first line for debugging on port ${port}`, 'color: blue', 'color:');\n\t\t\t\t} else {\n\t\t\t\t\tconsole.info(`%c[Extension Host] %cdebugger listening on port ${port}`, 'color: blue', 'color:');\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn port || 0;\n\t}\n\n\tprivate _establishProtocol(extensionHostProcess: ExtensionHostProcess, opts: IExtensionHostProcessOptions): Promise<IMessagePassingProtocol> {\n\n\t\twriteExtHostConnection(new MessagePortExtHostConnection(), opts.env);\n\n\t\t// Get ready to acquire the message port from the shared process worker\n\t\tconst portPromise = acquirePort(undefined /* we trigger the request via service call! */, opts.responseChannel, opts.responseNonce);\n\n\t\treturn new Promise<IMessagePassingProtocol>((resolve, reject) => {\n\n\t\t\tconst handle = setTimeout(() => {\n\t\t\t\treject('The local extension host took longer than 60s to connect.');\n\t\t\t}, 60 * 1000);\n\n\t\t\tportPromise.then((port) => {\n\t\t\t\tthis._toDispose.add(toDisposable(() => {\n\t\t\t\t\t// Close the message port when the extension host is disposed\n\t\t\t\t\tport.close();\n\t\t\t\t}));\n\t\t\t\tclearTimeout(handle);\n\n\t\t\t\tconst onMessage = new BufferedEmitter<VSBuffer>();\n\t\t\t\tport.onmessage = ((e) => {\n\t\t\t\t\tif (e.data) {\n\t\t\t\t\t\tonMessage.fire(VSBuffer.wrap(e.data));\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\tport.start();\n\n\t\t\t\tresolve({\n\t\t\t\t\tonMessage: onMessage.event,\n\t\t\t\t\tsend: message => port.postMessage(message.buffer),\n\t\t\t\t});\n\t\t\t});\n\n\t\t\t// Now that the message port listener is installed, start the ext host process\n\t\t\tconst sw = StopWatch.create(false);\n\t\t\textensionHostProcess.start(opts).then(({ pid }) => {\n\t\t\t\tif (pid) {\n\t\t\t\t\tthis.pid = pid;\n\t\t\t\t}\n\t\t\t\tthis._logService.info(`Started local extension host with pid ${pid}.`);\n\t\t\t\tconst duration = sw.elapsed();\n\t\t\t\tif (platform.isCI) {\n\t\t\t\t\tthis._logService.info(`IExtensionHostStarter.start() took ${duration} ms.`);\n\t\t\t\t}\n\t\t\t}, (err) => {\n\t\t\t\t// Starting the ext host process resulted in an error\n\t\t\t\treject(err);\n\t\t\t});\n\t\t});\n\t}\n\n\tprivate _performHandshake(protocol: IMessagePassingProtocol): Promise<void> {\n\t\t// 1) wait for the incoming `ready` event and send the initialization data.\n\t\t// 2) wait for the incoming `initialized` event.\n\t\treturn new Promise<void>((resolve, reject) => {\n\n\t\t\tlet timeoutHandle: any;\n\t\t\tconst installTimeoutCheck = () => {\n\t\t\t\ttimeoutHandle = setTimeout(() => {\n\t\t\t\t\treject('The local extension host took longer than 60s to send its ready message.');\n\t\t\t\t}, 60 * 1000);\n\t\t\t};\n\t\t\tconst uninstallTimeoutCheck = () => {\n\t\t\t\tclearTimeout(timeoutHandle);\n\t\t\t};\n\n\t\t\t// Wait 60s for the ready message\n\t\t\tinstallTimeoutCheck();\n\n\t\t\tconst disposable = protocol.onMessage(msg => {\n\n\t\t\t\tif (isMessageOfType(msg, MessageType.Ready)) {\n\n\t\t\t\t\t// 1) Extension Host is ready to receive messages, initialize it\n\t\t\t\t\tuninstallTimeoutCheck();\n\n\t\t\t\t\tthis._createExtHostInitData().then(data => {\n\n\t\t\t\t\t\t// Wait 60s for the initialized message\n\t\t\t\t\t\tinstallTimeoutCheck();\n\n\t\t\t\t\t\tprotocol.send(VSBuffer.fromString(JSON.stringify(data)));\n\t\t\t\t\t});\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (isMessageOfType(msg, MessageType.Initialized)) {\n\n\t\t\t\t\t// 2) Extension Host is initialized\n\t\t\t\t\tuninstallTimeoutCheck();\n\n\t\t\t\t\t// stop listening for messages here\n\t\t\t\t\tdisposable.dispose();\n\n\t\t\t\t\t// release this promise\n\t\t\t\t\tresolve();\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconsole.error(`received unexpected message during handshake phase from the extension host: `, msg);\n\t\t\t});\n\n\t\t});\n\t}\n\n\tprivate async _createExtHostInitData(): Promise<IExtensionHostInitData> {\n\t\tconst initData = await this._initDataProvider.getInitData();\n\t\tthis.extensions = initData.extensions;\n\t\tconst workspace = this._contextService.getWorkspace();\n\t\treturn {\n\t\t\tcommit: this._productService.commit,\n\t\t\tversion: this._productService.version,\n\t\t\tquality: this._productService.quality,\n\t\t\tparentPid: 0,\n\t\t\tenvironment: {\n\t\t\t\tisExtensionDevelopmentDebug: this._isExtensionDevDebug,\n\t\t\t\tappRoot: this._environmentService.appRoot ? URI.file(this._environmentService.appRoot) : undefined,\n\t\t\t\tappName: this._productService.nameLong,\n\t\t\t\tappHost: this._productService.embedderIdentifier || 'desktop',\n\t\t\t\tappUriScheme: this._productService.urlProtocol,\n\t\t\t\textensionTelemetryLogResource: this._environmentService.extHostTelemetryLogFile,\n\t\t\t\tisExtensionTelemetryLoggingOnly: isLoggingOnly(this._productService, this._environmentService),\n\t\t\t\tappLanguage: platform.language,\n\t\t\t\textensionDevelopmentLocationURI: this._environmentService.extensionDevelopmentLocationURI,\n\t\t\t\textensionTestsLocationURI: this._environmentService.extensionTestsLocationURI,\n\t\t\t\tglobalStorageHome: this._userDataProfilesService.defaultProfile.globalStorageHome,\n\t\t\t\tworkspaceStorageHome: this._environmentService.workspaceStorageHome,\n\t\t\t\textensionLogLevel: this._environmentService.extensionLogLevel\n\t\t\t},\n\t\t\tworkspace: this._contextService.getWorkbenchState() === WorkbenchState.EMPTY ? undefined : {\n\t\t\t\tconfiguration: workspace.configuration ?? undefined,\n\t\t\t\tid: workspace.id,\n\t\t\t\tname: this._labelService.getWorkspaceLabel(workspace),\n\t\t\t\tisUntitled: workspace.configuration ? isUntitledWorkspace(workspace.configuration, this._environmentService) : false,\n\t\t\t\ttransient: workspace.transient\n\t\t\t},\n\t\t\tremote: {\n\t\t\t\tauthority: this._environmentService.remoteAuthority,\n\t\t\t\tconnectionData: null,\n\t\t\t\tisRemote: false\n\t\t\t},\n\t\t\tconsoleForward: {\n\t\t\t\tincludeStack: !this._isExtensionDevTestFromCli && (this._isExtensionDevHost || !this._environmentService.isBuilt || this._productService.quality !== 'stable' || this._environmentService.verbose),\n\t\t\t\tlogNative: !this._isExtensionDevTestFromCli && this._isExtensionDevHost\n\t\t\t},\n\t\t\textensions: this.extensions.toSnapshot(),\n\t\t\ttelemetryInfo: {\n\t\t\t\tsessionId: this._telemetryService.sessionId,\n\t\t\t\tmachineId: this._telemetryService.machineId,\n\t\t\t\tsqmId: this._telemetryService.sqmId,\n\t\t\t\tdevDeviceId: this._telemetryService.devDeviceId,\n\t\t\t\tfirstSessionDate: this._telemetryService.firstSessionDate,\n\t\t\t\tmsftInternal: this._telemetryService.msftInternal\n\t\t\t},\n\t\t\tlogLevel: this._logService.getLevel(),\n\t\t\tloggers: [...this._loggerService.getRegisteredLoggers()],\n\t\t\tlogsLocation: this._environmentService.extHostLogsPath,\n\t\t\tautoStart: (this.startup === ExtensionHostStartup.EagerAutoStart),\n\t\t\tuiKind: UIKind.Desktop\n\t\t};\n\t}\n\n\tprivate _onExtHostProcessExit(code: number, signal: string): void {\n\t\tif (this._terminating) {\n\t\t\t// Expected termination path (we asked the process to terminate)\n\t\t\treturn;\n\t\t}\n\n\t\tthis._onExit.fire([code, signal]);\n\t}\n\n\tprivate _handleProcessOutputStream(stream: Event<string>, store: DisposableStore) {\n\t\tlet last = '';\n\t\tlet isOmitting = false;\n\t\tconst event = new Emitter<string>();\n\t\tstream((chunk) => {\n\t\t\t// not a fancy approach, but this is the same approach used by the split2\n\t\t\t// module which is well-optimized (https://github.com/mcollina/split2)\n\t\t\tlast += chunk;\n\t\t\tconst lines = last.split(/\\r?\\n/g);\n\t\t\tlast = lines.pop()!;\n\n\t\t\t// protected against an extension spamming and leaking memory if no new line is written.\n\t\t\tif (last.length > 10_000) {\n\t\t\t\tlines.push(last);\n\t\t\t\tlast = '';\n\t\t\t}\n\n\t\t\tfor (const line of lines) {\n\t\t\t\tif (isOmitting) {\n\t\t\t\t\tif (line === NativeLogMarkers.End) {\n\t\t\t\t\t\tisOmitting = false;\n\t\t\t\t\t}\n\t\t\t\t} else if (line === NativeLogMarkers.Start) {\n\t\t\t\t\tisOmitting = true;\n\t\t\t\t} else if (line.length) {\n\t\t\t\t\tevent.fire(line + '\\n');\n\t\t\t\t}\n\t\t\t}\n\t\t}, undefined, store);\n\n\t\treturn event;\n\t}\n\n\tpublic async enableInspectPort(): Promise<boolean> {\n\t\tif (!!this._inspectListener) {\n\t\t\treturn true;\n\t\t}\n\n\t\tif (!this._extensionHostProcess) {\n\t\t\treturn false;\n\t\t}\n\n\t\tconst result = await this._extensionHostProcess.enableInspectPort();\n\t\tif (!result) {\n\t\t\treturn false;\n\t\t}\n\n\t\tawait Promise.race([Event.toPromise(this._onDidSetInspectPort.event), timeout(1000)]);\n\t\treturn !!this._inspectListener;\n\t}\n\n\tpublic getInspectPort(): { port: number; host: string } | undefined {\n\t\treturn this._inspectListener ?? undefined;\n\t}\n\n\tprivate _onWillShutdown(event: WillShutdownEvent): void {\n\t\t// If the extension development host was started without debugger attached we need\n\t\t// to communicate this back to the main side to terminate the debug session\n\t\tif (this._isExtensionDevHost && !this._isExtensionDevTestFromCli && !this._isExtensionDevDebug && this._environmentService.debugExtensionHost.debugId) {\n\t\t\tthis._extensionHostDebugService.terminateSession(this._environmentService.debugExtensionHost.debugId);\n\t\t\tevent.join(timeout(100 /* wait a bit for IPC to get delivered */), { id: 'join.extensionDevelopment', label: nls.localize('join.extensionDevelopment', \"Terminating extension debug session\") });\n\t\t}\n\t}\n}\n"],
  "mappings": ";;;;;;;;;;;;AAKA,SAAS,eAAe;AACxB,SAAS,gBAAgB;AACzB,SAAS,yBAAyB;AAClC,SAAS,SAAS,aAAa;AAC/B,SAAS,iBAAiB,oBAAoB;AAC9C,YAAY,aAAa;AACzB,YAAY,cAAc;AAC1B,SAAS,mCAAmC;AAC5C,SAAS,iBAAiB;AAC1B,SAAS,WAAW;AACpB,SAAS,oBAAoB;AAC7B,SAAS,+BAA+B;AACxC,SAAS,uBAAuB;AAChC,SAAS,mBAAmB;AAC5B,YAAY,SAAS;AACrB,SAAS,kCAAkC;AAC3C,SAAS,8BAA8B,6BAA6B;AACpE,SAAS,qBAAqB;AAC9B,SAAS,aAAa,sBAAsB;AAC5C,SAAS,0BAA0B;AACnC,SAAS,sBAAsB,sBAAsB,gBAAgB;AACrE,SAAS,uBAAuB;AAChC,SAAS,yBAAyB;AAClC,SAAS,qBAAqB;AAC9B,SAAS,gCAAgC;AACzC,SAAS,0BAA0B,gBAAgB,2BAA2B;AAC9E,SAAS,0CAA0C;AACnD,SAAS,gCAAgC;AACzC,SAAS,8BAA8B,8BAA8B;AACrE,SAAS,wBAAwB,aAAa,kBAAkB,QAAQ,uBAAuB;AAC/F,SAAS,mCAAmC;AAC5C,SAAS,yBAAyB,sBAAsB,sBAAsB;AAC9E,SAAS,oBAAoB;AAC7B,SAAS,mBAAmB,yBAAyB;AACrD,SAAS,gCAAgC;AAUlC,MAAM,qBAAqB;AAAA,EAoBjC,YACC,IACiB,uBAChB;AADgB;AAEjB,SAAK,MAAM;AAAA,EACZ;AAAA,EA1ED,OAiDkC;AAAA;AAAA;AAAA,EAEhB;AAAA,EAEjB,IAAW,WAA0B;AACpC,WAAO,KAAK,sBAAsB,gBAAgB,KAAK,GAAG;AAAA,EAC3D;AAAA,EAEA,IAAW,WAA0B;AACpC,WAAO,KAAK,sBAAsB,gBAAgB,KAAK,GAAG;AAAA,EAC3D;AAAA,EAEA,IAAW,YAAwB;AAClC,WAAO,KAAK,sBAAsB,iBAAiB,KAAK,GAAG;AAAA,EAC5D;AAAA,EAEA,IAAW,SAAkD;AAC5D,WAAO,KAAK,sBAAsB,cAAc,KAAK,GAAG;AAAA,EACzD;AAAA,EASO,MAAM,MAA0E;AACtF,WAAO,KAAK,sBAAsB,MAAM,KAAK,KAAK,IAAI;AAAA,EACvD;AAAA,EAEO,oBAAsC;AAC5C,WAAO,KAAK,sBAAsB,kBAAkB,KAAK,GAAG;AAAA,EAC7D;AAAA,EAEO,OAAsB;AAC5B,WAAO,KAAK,sBAAsB,KAAK,KAAK,GAAG;AAAA,EAChD;AACD;AAEO,IAAM,kCAAN,MAAgE;AAAA,EA0BtE,YACiB,iBACA,SACC,mBAC0B,iBACJ,sBACF,oBACD,mBACiB,qBACV,0BACP,mBACN,aACG,gBACD,eACa,4BACd,cACG,iBACS,0BACH,uBACvC;AAlBe;AACA;AACC;AAC0B;AACJ;AACF;AACD;AACiB;AACV;AACP;AACN;AACG;AACD;AACa;AACd;AACG;AACS;AACH;AAExC,UAAM,UAAU,yBAAyB,KAAK,mBAAmB;AACjE,SAAK,sBAAsB,QAAQ;AACnC,SAAK,uBAAuB,QAAQ;AACpC,SAAK,0BAA0B,QAAQ;AACvC,SAAK,6BAA6B,QAAQ;AAE1C,SAAK,eAAe;AAEpB,SAAK,mBAAmB;AACxB,SAAK,wBAAwB;AAC7B,SAAK,mBAAmB;AAExB,SAAK,WAAW,IAAI,KAAK,OAAO;AAChC,SAAK,WAAW,IAAI,KAAK,kBAAkB,eAAe,OAAK,KAAK,gBAAgB,CAAC,CAAC,CAAC;AACvF,SAAK,WAAW,IAAI,KAAK,2BAA2B,QAAQ,WAAS;AACpE,UAAI,KAAK,uBAAuB,KAAK,oBAAoB,mBAAmB,YAAY,MAAM,WAAW;AACxG,aAAK,mBAAmB,YAAY;AAAA,MACrC;AAAA,IACD,CAAC,CAAC;AACF,SAAK,WAAW,IAAI,KAAK,2BAA2B,SAAS,WAAS;AACrE,UAAI,KAAK,uBAAuB,KAAK,oBAAoB,mBAAmB,YAAY,MAAM,WAAW;AACxG,aAAK,aAAa,OAAO;AAAA,MAC1B;AAAA,IACD,CAAC,CAAC;AAAA,EACH;AAAA,EA/JD,OAyFuE;AAAA;AAAA;AAAA,EAE/D,MAAqB;AAAA,EACZ,kBAAkB;AAAA,EAC3B,aAA6C;AAAA,EAEnC,UAAqC,IAAI,QAA0B;AAAA,EACpE,SAAkC,KAAK,QAAQ;AAAA,EAE9C,uBAAuB,IAAI,QAAc;AAAA,EAEzC,aAAa,IAAI,gBAAgB;AAAA,EAEjC;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA;AAAA,EAGT;AAAA;AAAA,EAGA;AAAA,EACA;AAAA,EACA;AAAA,EAgDD,UAAgB;AACtB,QAAI,KAAK,cAAc;AACtB;AAAA,IACD;AACA,SAAK,eAAe;AAEpB,SAAK,WAAW,QAAQ;AAAA,EACzB;AAAA,EAEO,QAA0C;AAChD,QAAI,KAAK,cAAc;AAEtB,YAAM,IAAI,kBAAkB;AAAA,IAC7B;AAEA,QAAI,CAAC,KAAK,kBAAkB;AAC3B,WAAK,mBAAmB,KAAK,OAAO;AAAA,IACrC;AAEA,WAAO,KAAK;AAAA,EACb;AAAA,EAEA,MAAc,SAA2C;AACxD,UAAM,CAAC,6BAA6B,YAAY,UAAU,IAAI,MAAM,QAAQ,IAAI;AAAA,MAC/E,KAAK,sBAAsB,oBAAoB;AAAA,MAC/C,KAAK,kBAAkB;AAAA,MACvB,KAAK,yBAAyB,YAAY;AAAA,IAC3C,CAAC;AAED,SAAK,wBAAwB,IAAI,qBAAqB,4BAA4B,IAAI,KAAK,qBAAqB;AAEhH,UAAM,MAAM,QAAQ,MAAM,YAAY;AAAA,MACrC,uBAAuB;AAAA,MACvB,gCAAgC;AAAA,IACjC,CAAC;AAED,QAAI,KAAK,oBAAoB,mBAAmB,KAAK;AACpD,cAAQ,MAAM,KAAK,KAAK,oBAAoB,mBAAmB,GAAG;AAAA,IACnE;AAEA,gCAA4B,GAAG;AAE/B,QAAI,KAAK,qBAAqB;AAG7B,aAAO,IAAI,wBAAwB;AAAA,IACpC;AAEA,UAAM,OAAqC;AAAA,MAC1C,kBAAkB,KAAK,mBAAmB;AAAA,MAC1C,iBAAiB;AAAA,MACjB,eAAe,aAAa;AAAA,MAC5B;AAAA;AAAA;AAAA;AAAA;AAAA,MAKA,UAAU,CAAC,CAAC,SAAS;AAAA,MACrB,UAAU;AAAA,MACV,QAAQ;AAAA,IACT;AAEA,UAAM,cAAc;AACpB,QAAI,eAAe,GAAG;AACrB,WAAK,WAAW;AAAA,QACf;AAAA,SACC,KAAK,0BAA0B,mBAAmB,gBAAgB,GAAG,WAAW,IAAI,UAAU;AAAA,MAChG;AAAA,IACD,OAAO;AACN,WAAK,WAAW,CAAC,kBAAkB;AAAA,IACpC;AAEA,QAAI,KAAK,oBAAoB,2BAA2B;AACvD,WAAK,SAAS,QAAQ,aAAa;AAAA,IACpC;AAEA,QAAI,KAAK,oBAAoB,KAAK,oBAAoB,GAAG;AACxD,WAAK,SAAS,QAAQ,QAAQ;AAAA,IAC/B;AAGA,SAAK,SAAS,QAAQ,8BAA8B;AAIpD,UAAM,WAAW,KAAK,2BAA2B,KAAK,sBAAsB,UAAU,KAAK,UAAU;AACrG,UAAM,WAAW,KAAK,2BAA2B,KAAK,sBAAsB,UAAU,KAAK,UAAU;AACrG,UAAM,WAAW,MAAM;AAAA,MACtB,MAAM,IAAI,SAAS,OAAO,QAAM,EAAE,MAAM,KAAK,CAAC,IAAI,QAAQ,CAAC,EAAE,EAAE,EAAE;AAAA,MACjE,MAAM,IAAI,SAAS,OAAO,QAAM,EAAE,MAAM,KAAK,CAAC,IAAI,QAAQ,CAAC,YAAY,EAAE,EAAE;AAAA,IAC5E;AAGA,UAAM,oBAAoB,MAAM,SAAiB,UAAU,CAAC,GAAG,MAAM;AACpE,aAAO,IACJ,EAAE,MAAM,EAAE,OAAO,EAAE,MAAM,QAAQ,CAAC,GAAG,EAAE,QAAQ,GAAG,EAAE,MAAM,EAAE,IAC5D,EAAE,MAAM,EAAE,MAAM,QAAQ,EAAE,OAAO;AAAA,IACrC,GAAG,GAAG;AAGN,SAAK,WAAW,IAAI,kBAAkB,YAAU;AAC/C,YAAM,oBAAoB,OAAO,QAAQ,OAAO,KAAK,MAAM,+BAA+B;AAC1F,UAAI,mBAAmB;AACtB,cAAM,CAAC,EAAE,MAAM,IAAI,IAAI;AACvB,YAAI,CAAC,KAAK,oBAAoB,WAAW,CAAC,KAAK,4BAA4B;AAC1E,kBAAQ,IAAI,yHAAyH,kBAAkB,CAAC,CAAC,IAAI,eAAe,QAAQ;AAAA,QACrL;AACA,YAAI,CAAC,KAAK,kBAAkB;AAC3B,eAAK,mBAAmB,EAAE,MAAM,MAAM,OAAO,IAAI,EAAE;AACnD,eAAK,qBAAqB,KAAK;AAAA,QAChC;AAAA,MACD,OAAO;AACN,YAAI,CAAC,KAAK,4BAA4B;AACrC,kBAAQ,MAAM,gBAAgB;AAC9B,kBAAQ,IAAI,OAAO,MAAM,GAAG,OAAO,MAAM;AACzC,kBAAQ,SAAS;AAAA,QAClB;AAAA,MACD;AAAA,IACD,CAAC,CAAC;AAIF,SAAK,WAAW,IAAI,KAAK,sBAAsB,OAAO,CAAC,EAAE,MAAM,OAAO,MAAM,KAAK,sBAAsB,MAAM,MAAM,CAAC,CAAC;AAGrH,QAAI,YAAY;AACf,UAAI,KAAK,uBAAuB,KAAK,wBAAwB,KAAK,oBAAoB,mBAAmB,SAAS;AACjH,aAAK,2BAA2B,cAAc,KAAK,oBAAoB,mBAAmB,SAAS,UAAU;AAAA,MAC9G;AACA,WAAK,mBAAmB,EAAE,MAAM,YAAY,MAAM,YAAY;AAC9D,WAAK,qBAAqB,KAAK;AAAA,IAChC;AAGA,QAAI;AACJ,QAAI,CAAC,KAAK,oBAAoB,WAAW,CAAC,KAAK,oBAAoB,mBAAmB,KAAK,qBAAqB;AAC/G,6BAAuB,WAAW,MAAM;AACvC,aAAK,YAAY,MAAM,sFAAsF,KAAK,uBAAuB,GAAG;AAE5I,cAAM,MAAM,KAAK,0BACd,IAAI,SAAS,kCAAkC,qHAAqH,IACpK,IAAI,SAAS,6BAA6B,sEAAsE;AAEnH,aAAK,qBAAqB;AAAA,UAAO,SAAS;AAAA,UAAS;AAAA,UAClD,CAAC;AAAA,YACA,OAAO,IAAI,SAAS,gBAAgB,eAAe;AAAA,YACnD,KAAK,6BAAM,KAAK,aAAa,OAAO,GAA/B;AAAA,UACN,CAAC;AAAA,UACD;AAAA,YACC,QAAQ;AAAA,YACR,UAAU,qBAAqB;AAAA,UAChC;AAAA,QACD;AAAA,MACD,GAAG,GAAK;AAAA,IACT;AAGA,UAAM,WAAW,MAAM,KAAK,mBAAmB,KAAK,uBAAuB,IAAI;AAC/E,UAAM,KAAK,kBAAkB,QAAQ;AACrC,iBAAa,oBAAoB;AACjC,WAAO;AAAA,EACR;AAAA;AAAA;AAAA;AAAA,EAKA,MAAc,oBAAqC;AAElD,QAAI,OAAO,KAAK,oBAAoB,mBAAmB,SAAS,UAAU;AACzE,aAAO;AAAA,IACR;AAEA,UAAM,WAAW,KAAK,oBAAoB,mBAAmB;AAC7D,UAAM,OAAO,MAAM,KAAK,mBAAmB;AAAA,MAAa;AAAA,MAAU;AAAA,MAAuB;AAAA,MAAgC;AAAA;AAAA,IAA2C;AAEpK,QAAI,CAAC,KAAK,4BAA4B;AACrC,UAAI,CAAC,MAAM;AACV,gBAAQ,KAAK,iEAAiE,eAAe,QAAQ;AAAA,MACtG,OAAO;AACN,YAAI,SAAS,UAAU;AACtB,kBAAQ,KAAK,gDAAgD,QAAQ,uBAAuB,IAAI,aAAa,eAAe,QAAQ;AAAA,QACrI;AACA,YAAI,KAAK,yBAAyB;AACjC,kBAAQ,KAAK,oEAAoE,IAAI,IAAI,eAAe,QAAQ;AAAA,QACjH,OAAO;AACN,kBAAQ,KAAK,mDAAmD,IAAI,IAAI,eAAe,QAAQ;AAAA,QAChG;AAAA,MACD;AAAA,IACD;AAEA,WAAO,QAAQ;AAAA,EAChB;AAAA,EAEQ,mBAAmB,sBAA4C,MAAsE;AAE5I,2BAAuB,IAAI,6BAA6B,GAAG,KAAK,GAAG;AAGnE,UAAM,cAAc,YAAY,QAA0D,KAAK,iBAAiB,KAAK,aAAa;AAElI,WAAO,IAAI,QAAiC,CAAC,SAAS,WAAW;AAEhE,YAAM,SAAS,WAAW,MAAM;AAC/B,eAAO,2DAA2D;AAAA,MACnE,GAAG,KAAK,GAAI;AAEZ,kBAAY,KAAK,CAAC,SAAS;AAC1B,aAAK,WAAW,IAAI,aAAa,MAAM;AAEtC,eAAK,MAAM;AAAA,QACZ,CAAC,CAAC;AACF,qBAAa,MAAM;AAEnB,cAAM,YAAY,IAAI,gBAA0B;AAChD,aAAK,YAAa,CAAC,MAAM;AACxB,cAAI,EAAE,MAAM;AACX,sBAAU,KAAK,SAAS,KAAK,EAAE,IAAI,CAAC;AAAA,UACrC;AAAA,QACD;AACA,aAAK,MAAM;AAEX,gBAAQ;AAAA,UACP,WAAW,UAAU;AAAA,UACrB,MAAM,oCAAW,KAAK,YAAY,QAAQ,MAAM,GAA1C;AAAA,QACP,CAAC;AAAA,MACF,CAAC;AAGD,YAAM,KAAK,UAAU,OAAO,KAAK;AACjC,2BAAqB,MAAM,IAAI,EAAE,KAAK,CAAC,EAAE,IAAI,MAAM;AAClD,YAAI,KAAK;AACR,eAAK,MAAM;AAAA,QACZ;AACA,aAAK,YAAY,KAAK,yCAAyC,GAAG,GAAG;AACrE,cAAM,WAAW,GAAG,QAAQ;AAC5B,YAAI,SAAS,MAAM;AAClB,eAAK,YAAY,KAAK,sCAAsC,QAAQ,MAAM;AAAA,QAC3E;AAAA,MACD,GAAG,CAAC,QAAQ;AAEX,eAAO,GAAG;AAAA,MACX,CAAC;AAAA,IACF,CAAC;AAAA,EACF;AAAA,EAEQ,kBAAkB,UAAkD;AAG3E,WAAO,IAAI,QAAc,CAAC,SAAS,WAAW;AAE7C,UAAI;AACJ,YAAM,sBAAsB,6BAAM;AACjC,wBAAgB,WAAW,MAAM;AAChC,iBAAO,0EAA0E;AAAA,QAClF,GAAG,KAAK,GAAI;AAAA,MACb,GAJ4B;AAK5B,YAAM,wBAAwB,6BAAM;AACnC,qBAAa,aAAa;AAAA,MAC3B,GAF8B;AAK9B,0BAAoB;AAEpB,YAAM,aAAa,SAAS,UAAU,SAAO;AAE5C,YAAI,gBAAgB,KAAK,YAAY,KAAK,GAAG;AAG5C,gCAAsB;AAEtB,eAAK,uBAAuB,EAAE,KAAK,UAAQ;AAG1C,gCAAoB;AAEpB,qBAAS,KAAK,SAAS,WAAW,KAAK,UAAU,IAAI,CAAC,CAAC;AAAA,UACxD,CAAC;AACD;AAAA,QACD;AAEA,YAAI,gBAAgB,KAAK,YAAY,WAAW,GAAG;AAGlD,gCAAsB;AAGtB,qBAAW,QAAQ;AAGnB,kBAAQ;AACR;AAAA,QACD;AAEA,gBAAQ,MAAM,gFAAgF,GAAG;AAAA,MAClG,CAAC;AAAA,IAEF,CAAC;AAAA,EACF;AAAA,EAEA,MAAc,yBAA0D;AACvE,UAAM,WAAW,MAAM,KAAK,kBAAkB,YAAY;AAC1D,SAAK,aAAa,SAAS;AAC3B,UAAM,YAAY,KAAK,gBAAgB,aAAa;AACpD,WAAO;AAAA,MACN,QAAQ,KAAK,gBAAgB;AAAA,MAC7B,SAAS,KAAK,gBAAgB;AAAA,MAC9B,SAAS,KAAK,gBAAgB;AAAA,MAC9B,WAAW;AAAA,MACX,aAAa;AAAA,QACZ,6BAA6B,KAAK;AAAA,QAClC,SAAS,KAAK,oBAAoB,UAAU,IAAI,KAAK,KAAK,oBAAoB,OAAO,IAAI;AAAA,QACzF,SAAS,KAAK,gBAAgB;AAAA,QAC9B,SAAS,KAAK,gBAAgB,sBAAsB;AAAA,QACpD,cAAc,KAAK,gBAAgB;AAAA,QACnC,+BAA+B,KAAK,oBAAoB;AAAA,QACxD,iCAAiC,cAAc,KAAK,iBAAiB,KAAK,mBAAmB;AAAA,QAC7F,aAAa,SAAS;AAAA,QACtB,iCAAiC,KAAK,oBAAoB;AAAA,QAC1D,2BAA2B,KAAK,oBAAoB;AAAA,QACpD,mBAAmB,KAAK,yBAAyB,eAAe;AAAA,QAChE,sBAAsB,KAAK,oBAAoB;AAAA,QAC/C,mBAAmB,KAAK,oBAAoB;AAAA,MAC7C;AAAA,MACA,WAAW,KAAK,gBAAgB,kBAAkB,MAAM,eAAe,QAAQ,SAAY;AAAA,QAC1F,eAAe,UAAU,iBAAiB;AAAA,QAC1C,IAAI,UAAU;AAAA,QACd,MAAM,KAAK,cAAc,kBAAkB,SAAS;AAAA,QACpD,YAAY,UAAU,gBAAgB,oBAAoB,UAAU,eAAe,KAAK,mBAAmB,IAAI;AAAA,QAC/G,WAAW,UAAU;AAAA,MACtB;AAAA,MACA,QAAQ;AAAA,QACP,WAAW,KAAK,oBAAoB;AAAA,QACpC,gBAAgB;AAAA,QAChB,UAAU;AAAA,MACX;AAAA,MACA,gBAAgB;AAAA,QACf,cAAc,CAAC,KAAK,+BAA+B,KAAK,uBAAuB,CAAC,KAAK,oBAAoB,WAAW,KAAK,gBAAgB,YAAY,YAAY,KAAK,oBAAoB;AAAA,QAC1L,WAAW,CAAC,KAAK,8BAA8B,KAAK;AAAA,MACrD;AAAA,MACA,YAAY,KAAK,WAAW,WAAW;AAAA,MACvC,eAAe;AAAA,QACd,WAAW,KAAK,kBAAkB;AAAA,QAClC,WAAW,KAAK,kBAAkB;AAAA,QAClC,OAAO,KAAK,kBAAkB;AAAA,QAC9B,aAAa,KAAK,kBAAkB;AAAA,QACpC,kBAAkB,KAAK,kBAAkB;AAAA,QACzC,cAAc,KAAK,kBAAkB;AAAA,MACtC;AAAA,MACA,UAAU,KAAK,YAAY,SAAS;AAAA,MACpC,SAAS,CAAC,GAAG,KAAK,eAAe,qBAAqB,CAAC;AAAA,MACvD,cAAc,KAAK,oBAAoB;AAAA,MACvC,WAAY,KAAK,YAAY,qBAAqB;AAAA,MAClD,QAAQ,OAAO;AAAA,IAChB;AAAA,EACD;AAAA,EAEQ,sBAAsB,MAAc,QAAsB;AACjE,QAAI,KAAK,cAAc;AAEtB;AAAA,IACD;AAEA,SAAK,QAAQ,KAAK,CAAC,MAAM,MAAM,CAAC;AAAA,EACjC;AAAA,EAEQ,2BAA2B,QAAuB,OAAwB;AACjF,QAAI,OAAO;AACX,QAAI,aAAa;AACjB,UAAM,QAAQ,IAAI,QAAgB;AAClC,WAAO,CAAC,UAAU;AAGjB,cAAQ;AACR,YAAM,QAAQ,KAAK,MAAM,QAAQ;AACjC,aAAO,MAAM,IAAI;AAGjB,UAAI,KAAK,SAAS,KAAQ;AACzB,cAAM,KAAK,IAAI;AACf,eAAO;AAAA,MACR;AAEA,iBAAW,QAAQ,OAAO;AACzB,YAAI,YAAY;AACf,cAAI,SAAS,iBAAiB,KAAK;AAClC,yBAAa;AAAA,UACd;AAAA,QACD,WAAW,SAAS,iBAAiB,OAAO;AAC3C,uBAAa;AAAA,QACd,WAAW,KAAK,QAAQ;AACvB,gBAAM,KAAK,OAAO,IAAI;AAAA,QACvB;AAAA,MACD;AAAA,IACD,GAAG,QAAW,KAAK;AAEnB,WAAO;AAAA,EACR;AAAA,EAEA,MAAa,oBAAsC;AAClD,QAAI,CAAC,CAAC,KAAK,kBAAkB;AAC5B,aAAO;AAAA,IACR;AAEA,QAAI,CAAC,KAAK,uBAAuB;AAChC,aAAO;AAAA,IACR;AAEA,UAAM,SAAS,MAAM,KAAK,sBAAsB,kBAAkB;AAClE,QAAI,CAAC,QAAQ;AACZ,aAAO;AAAA,IACR;AAEA,UAAM,QAAQ,KAAK,CAAC,MAAM,UAAU,KAAK,qBAAqB,KAAK,GAAG,QAAQ,GAAI,CAAC,CAAC;AACpF,WAAO,CAAC,CAAC,KAAK;AAAA,EACf;AAAA,EAEO,iBAA6D;AACnE,WAAO,KAAK,oBAAoB;AAAA,EACjC;AAAA,EAEQ,gBAAgB,OAAgC;AAGvD,QAAI,KAAK,uBAAuB,CAAC,KAAK,8BAA8B,CAAC,KAAK,wBAAwB,KAAK,oBAAoB,mBAAmB,SAAS;AACtJ,WAAK,2BAA2B,iBAAiB,KAAK,oBAAoB,mBAAmB,OAAO;AACpG,YAAM,KAAK;AAAA,QAAQ;AAAA;AAAA,MAA6C,GAAG,EAAE,IAAI,6BAA6B,OAAO,IAAI,SAAS,6BAA6B,qCAAqC,EAAE,CAAC;AAAA,IAChM;AAAA,EACD;AACD;AApfa,kCAAN;AAAA,EA8BJ;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,GA5CU;",
  "names": []
}
