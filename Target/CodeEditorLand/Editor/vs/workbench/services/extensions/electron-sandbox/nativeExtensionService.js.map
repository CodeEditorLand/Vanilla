{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/extensions/electron-sandbox/nativeExtensionService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { runWhenWindowIdle } from \"../../../../base/browser/dom.js\";\nimport { mainWindow } from \"../../../../base/browser/window.js\";\nimport { CancellationToken } from \"../../../../base/common/cancellation.js\";\nimport { Schemas } from \"../../../../base/common/network.js\";\nimport * as performance from \"../../../../base/common/performance.js\";\nimport { isCI } from \"../../../../base/common/platform.js\";\nimport type { URI } from \"../../../../base/common/uri.js\";\nimport * as nls from \"../../../../nls.js\";\nimport { Categories } from \"../../../../platform/action/common/actionCommonCategories.js\";\nimport {\n\tAction2,\n\tregisterAction2,\n} from \"../../../../platform/actions/common/actions.js\";\nimport { ICommandService } from \"../../../../platform/commands/common/commands.js\";\nimport { IConfigurationService } from \"../../../../platform/configuration/common/configuration.js\";\nimport { ConfigurationScope } from \"../../../../platform/configuration/common/configurationRegistry.js\";\nimport { IDialogService } from \"../../../../platform/dialogs/common/dialogs.js\";\nimport type { ExtensionKind } from \"../../../../platform/environment/common/environment.js\";\nimport { IExtensionGalleryService } from \"../../../../platform/extensionManagement/common/extensionManagement.js\";\nimport type {\n\tExtensionIdentifier,\n\tIExtensionDescription,\n} from \"../../../../platform/extensions/common/extensions.js\";\nimport { IFileService } from \"../../../../platform/files/common/files.js\";\nimport {\n\tInstantiationType,\n\tregisterSingleton,\n} from \"../../../../platform/instantiation/common/extensions.js\";\nimport {\n\tIInstantiationService,\n\ttype ServicesAccessor,\n} from \"../../../../platform/instantiation/common/instantiation.js\";\nimport { ILogService } from \"../../../../platform/log/common/log.js\";\nimport { INativeHostService } from \"../../../../platform/native/common/native.js\";\nimport {\n\tINotificationService,\n\ttype IPromptChoice,\n\tNotificationPriority,\n\tSeverity,\n} from \"../../../../platform/notification/common/notification.js\";\nimport { IOpenerService } from \"../../../../platform/opener/common/opener.js\";\nimport { IProductService } from \"../../../../platform/product/common/productService.js\";\nimport { PersistentConnectionEventType } from \"../../../../platform/remote/common/remoteAgentConnection.js\";\nimport type { IRemoteAgentEnvironment } from \"../../../../platform/remote/common/remoteAgentEnvironment.js\";\nimport {\n\tIRemoteAuthorityResolverService,\n\tRemoteAuthorityResolverError,\n\tRemoteConnectionType,\n\ttype ResolverResult,\n\tgetRemoteAuthorityPrefix,\n} from \"../../../../platform/remote/common/remoteAuthorityResolver.js\";\nimport { IRemoteExtensionsScannerService } from \"../../../../platform/remote/common/remoteExtensionsScanner.js\";\nimport {\n\tgetRemoteName,\n\tparseAuthorityWithPort,\n} from \"../../../../platform/remote/common/remoteHosts.js\";\nimport { updateProxyConfigurationsScope } from \"../../../../platform/request/common/request.js\";\nimport { ITelemetryService } from \"../../../../platform/telemetry/common/telemetry.js\";\nimport { IWorkspaceContextService } from \"../../../../platform/workspace/common/workspace.js\";\nimport { IWorkspaceTrustManagementService } from \"../../../../platform/workspace/common/workspaceTrust.js\";\nimport { IWorkbenchEnvironmentService } from \"../../environment/common/environmentService.js\";\nimport {\n\tEnablementState,\n\tIWorkbenchExtensionEnablementService,\n\tIWorkbenchExtensionManagementService,\n} from \"../../extensionManagement/common/extensionManagement.js\";\nimport { IHostService } from \"../../host/browser/host.js\";\nimport {\n\tILifecycleService,\n\tLifecyclePhase,\n} from \"../../lifecycle/common/lifecycle.js\";\nimport { IRemoteAgentService } from \"../../remote/common/remoteAgentService.js\";\nimport { IRemoteExplorerService } from \"../../remote/common/remoteExplorerService.js\";\nimport {\n\ttype IWebWorkerExtensionHostDataProvider,\n\ttype IWebWorkerExtensionHostInitData,\n\tWebWorkerExtensionHost,\n} from \"../browser/webWorkerExtensionHost.js\";\nimport {\n\tAbstractExtensionService,\n\tExtensionHostCrashTracker,\n\ttype IExtensionHostFactory,\n\tResolvedExtensions,\n\tcheckEnabledAndProposedAPI,\n\textensionIsEnabled,\n} from \"../common/abstractExtensionService.js\";\nimport type { ExtensionDescriptionRegistrySnapshot } from \"../common/extensionDescriptionRegistry.js\";\nimport { parseExtensionDevOptions } from \"../common/extensionDevOptions.js\";\nimport {\n\tExtensionHostKind,\n\tExtensionRunningPreference,\n\ttype IExtensionHostKindPicker,\n\textensionHostKindToString,\n\textensionRunningPreferenceToString,\n} from \"../common/extensionHostKind.js\";\nimport type { IExtensionHostManager } from \"../common/extensionHostManagers.js\";\nimport { ExtensionHostExitCode } from \"../common/extensionHostProtocol.js\";\nimport { IExtensionManifestPropertiesService } from \"../common/extensionManifestPropertiesService.js\";\nimport type {\n\tExtensionRunningLocation,\n\tLocalProcessRunningLocation,\n\tLocalWebWorkerRunningLocation,\n} from \"../common/extensionRunningLocation.js\";\nimport {\n\ttype ExtensionRunningLocationTracker,\n\tfilterExtensionDescriptions,\n} from \"../common/extensionRunningLocationTracker.js\";\nimport {\n\tExtensionHostExtensions,\n\tExtensionHostStartup,\n\ttype IExtensionHost,\n\tIExtensionService,\n\ttype WebWorkerExtHostConfigValue,\n\ttoExtension,\n\twebWorkerExtHostConfig,\n} from \"../common/extensions.js\";\nimport { ExtensionsProposedApi } from \"../common/extensionsProposedApi.js\";\nimport {\n\ttype IRemoteExtensionHostDataProvider,\n\ttype IRemoteExtensionHostInitData,\n\tRemoteExtensionHost,\n} from \"../common/remoteExtensionHost.js\";\nimport { CachedExtensionScanner } from \"./cachedExtensionScanner.js\";\nimport {\n\ttype ILocalProcessExtensionHostDataProvider,\n\ttype ILocalProcessExtensionHostInitData,\n\tNativeLocalProcessExtensionHost,\n} from \"./localProcessExtensionHost.js\";\n\nexport class NativeExtensionService\n\textends AbstractExtensionService\n\timplements IExtensionService\n{\n\tprivate readonly _extensionScanner: CachedExtensionScanner;\n\tprivate readonly _localCrashTracker = new ExtensionHostCrashTracker();\n\n\tconstructor(\n\t\t@IInstantiationService instantiationService: IInstantiationService,\n\t\t@INotificationService notificationService: INotificationService,\n\t\t@IWorkbenchEnvironmentService\n\t\tenvironmentService: IWorkbenchEnvironmentService,\n\t\t@ITelemetryService telemetryService: ITelemetryService,\n\t\t@IWorkbenchExtensionEnablementService\n\t\textensionEnablementService: IWorkbenchExtensionEnablementService,\n\t\t@IFileService fileService: IFileService,\n\t\t@IProductService productService: IProductService,\n\t\t@IWorkbenchExtensionManagementService\n\t\textensionManagementService: IWorkbenchExtensionManagementService,\n\t\t@IWorkspaceContextService contextService: IWorkspaceContextService,\n\t\t@IConfigurationService configurationService: IConfigurationService,\n\t\t@IExtensionManifestPropertiesService\n\t\textensionManifestPropertiesService: IExtensionManifestPropertiesService,\n\t\t@ILogService logService: ILogService,\n\t\t@IRemoteAgentService remoteAgentService: IRemoteAgentService,\n\t\t@IRemoteExtensionsScannerService\n\t\tremoteExtensionsScannerService: IRemoteExtensionsScannerService,\n\t\t@ILifecycleService lifecycleService: ILifecycleService,\n\t\t@IRemoteAuthorityResolverService\n\t\tremoteAuthorityResolverService: IRemoteAuthorityResolverService,\n\t\t@INativeHostService\n\t\tprivate readonly _nativeHostService: INativeHostService,\n\t\t@IHostService private readonly _hostService: IHostService,\n\t\t@IRemoteExplorerService\n\t\tprivate readonly _remoteExplorerService: IRemoteExplorerService,\n\t\t@IExtensionGalleryService\n\t\tprivate readonly _extensionGalleryService: IExtensionGalleryService,\n\t\t@IWorkspaceTrustManagementService\n\t\tprivate readonly _workspaceTrustManagementService: IWorkspaceTrustManagementService,\n\t\t@IDialogService dialogService: IDialogService,\n\t) {\n\t\tconst extensionsProposedApi = instantiationService.createInstance(\n\t\t\tExtensionsProposedApi,\n\t\t);\n\t\tconst extensionScanner = instantiationService.createInstance(\n\t\t\tCachedExtensionScanner,\n\t\t);\n\t\tconst extensionHostFactory = new NativeExtensionHostFactory(\n\t\t\textensionsProposedApi,\n\t\t\textensionScanner,\n\t\t\t() => this._getExtensionRegistrySnapshotWhenReady(),\n\t\t\tinstantiationService,\n\t\t\tenvironmentService,\n\t\t\textensionEnablementService,\n\t\t\tconfigurationService,\n\t\t\tremoteAgentService,\n\t\t\tremoteAuthorityResolverService,\n\t\t\tlogService,\n\t\t);\n\t\tsuper(\n\t\t\textensionsProposedApi,\n\t\t\textensionHostFactory,\n\t\t\tnew NativeExtensionHostKindPicker(\n\t\t\t\tenvironmentService,\n\t\t\t\tconfigurationService,\n\t\t\t\tlogService,\n\t\t\t),\n\t\t\tinstantiationService,\n\t\t\tnotificationService,\n\t\t\tenvironmentService,\n\t\t\ttelemetryService,\n\t\t\textensionEnablementService,\n\t\t\tfileService,\n\t\t\tproductService,\n\t\t\textensionManagementService,\n\t\t\tcontextService,\n\t\t\tconfigurationService,\n\t\t\textensionManifestPropertiesService,\n\t\t\tlogService,\n\t\t\tremoteAgentService,\n\t\t\tremoteExtensionsScannerService,\n\t\t\tlifecycleService,\n\t\t\tremoteAuthorityResolverService,\n\t\t\tdialogService,\n\t\t);\n\n\t\tthis._extensionScanner = extensionScanner;\n\n\t\t// delay extension host creation and extension scanning\n\t\t// until the workbench is running. we cannot defer the\n\t\t// extension host more (LifecyclePhase.Restored) because\n\t\t// some editors require the extension host to restore\n\t\t// and this would result in a deadlock\n\t\t// see https://github.com/microsoft/vscode/issues/41322\n\t\tlifecycleService.when(LifecyclePhase.Ready).then(() => {\n\t\t\t// reschedule to ensure this runs after restoring viewlets, panels, and editors\n\t\t\trunWhenWindowIdle(\n\t\t\t\tmainWindow,\n\t\t\t\t() => {\n\t\t\t\t\tthis._initialize();\n\t\t\t\t},\n\t\t\t\t50 /*max delay*/,\n\t\t\t);\n\t\t});\n\t}\n\n\tprivate async _scanAllLocalExtensions(): Promise<IExtensionDescription[]> {\n\t\treturn this._extensionScanner.scannedExtensions;\n\t}\n\n\tprotected override _onExtensionHostCrashed(\n\t\textensionHost: IExtensionHostManager,\n\t\tcode: number,\n\t\tsignal: string | null,\n\t): void {\n\t\tconst activatedExtensions: ExtensionIdentifier[] = [];\n\t\tconst extensionsStatus = this.getExtensionsStatus();\n\t\tfor (const key of Object.keys(extensionsStatus)) {\n\t\t\tconst extensionStatus = extensionsStatus[key];\n\t\t\tif (\n\t\t\t\textensionStatus.activationStarted &&\n\t\t\t\textensionHost.containsExtension(extensionStatus.id)\n\t\t\t) {\n\t\t\t\tactivatedExtensions.push(extensionStatus.id);\n\t\t\t}\n\t\t}\n\n\t\tsuper._onExtensionHostCrashed(extensionHost, code, signal);\n\n\t\tif (extensionHost.kind === ExtensionHostKind.LocalProcess) {\n\t\t\tif (code === ExtensionHostExitCode.VersionMismatch) {\n\t\t\t\tthis._notificationService.prompt(\n\t\t\t\t\tSeverity.Error,\n\t\t\t\t\tnls.localize(\n\t\t\t\t\t\t\"extensionService.versionMismatchCrash\",\n\t\t\t\t\t\t\"Extension host cannot start: version mismatch.\",\n\t\t\t\t\t),\n\t\t\t\t\t[\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: nls.localize(\"relaunch\", \"Relaunch VS Code\"),\n\t\t\t\t\t\t\trun: () => {\n\t\t\t\t\t\t\t\tthis._instantiationService.invokeFunction(\n\t\t\t\t\t\t\t\t\t(accessor) => {\n\t\t\t\t\t\t\t\t\t\tconst hostService =\n\t\t\t\t\t\t\t\t\t\t\taccessor.get(IHostService);\n\t\t\t\t\t\t\t\t\t\thostService.restart();\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis._logExtensionHostCrash(extensionHost);\n\t\t\tthis._sendExtensionHostCrashTelemetry(\n\t\t\t\tcode,\n\t\t\t\tsignal,\n\t\t\t\tactivatedExtensions,\n\t\t\t);\n\n\t\t\tthis._localCrashTracker.registerCrash();\n\n\t\t\tif (this._localCrashTracker.shouldAutomaticallyRestart()) {\n\t\t\t\tthis._logService.info(\n\t\t\t\t\t`Automatically restarting the extension host.`,\n\t\t\t\t);\n\t\t\t\tthis._notificationService.status(\n\t\t\t\t\tnls.localize(\n\t\t\t\t\t\t\"extensionService.autoRestart\",\n\t\t\t\t\t\t\"The extension host terminated unexpectedly. Restarting...\",\n\t\t\t\t\t),\n\t\t\t\t\t{ hideAfter: 5000 },\n\t\t\t\t);\n\t\t\t\tthis.startExtensionHosts();\n\t\t\t} else {\n\t\t\t\tconst choices: IPromptChoice[] = [];\n\t\t\t\tif (this._environmentService.isBuilt) {\n\t\t\t\t\tchoices.push({\n\t\t\t\t\t\tlabel: nls.localize(\n\t\t\t\t\t\t\t\"startBisect\",\n\t\t\t\t\t\t\t\"Start Extension Bisect\",\n\t\t\t\t\t\t),\n\t\t\t\t\t\trun: () => {\n\t\t\t\t\t\t\tthis._instantiationService.invokeFunction(\n\t\t\t\t\t\t\t\t(accessor) => {\n\t\t\t\t\t\t\t\t\tconst commandService =\n\t\t\t\t\t\t\t\t\t\taccessor.get(ICommandService);\n\t\t\t\t\t\t\t\t\tcommandService.executeCommand(\n\t\t\t\t\t\t\t\t\t\t\"extension.bisect.start\",\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t},\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\tchoices.push({\n\t\t\t\t\t\tlabel: nls.localize(\"devTools\", \"Open Developer Tools\"),\n\t\t\t\t\t\trun: () => this._nativeHostService.openDevTools(),\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\tchoices.push({\n\t\t\t\t\tlabel: nls.localize(\"restart\", \"Restart Extension Host\"),\n\t\t\t\t\trun: () => this.startExtensionHosts(),\n\t\t\t\t});\n\n\t\t\t\tif (this._environmentService.isBuilt) {\n\t\t\t\t\tchoices.push({\n\t\t\t\t\t\tlabel: nls.localize(\"learnMore\", \"Learn More\"),\n\t\t\t\t\t\trun: () => {\n\t\t\t\t\t\t\tthis._instantiationService.invokeFunction(\n\t\t\t\t\t\t\t\t(accessor) => {\n\t\t\t\t\t\t\t\t\tconst openerService =\n\t\t\t\t\t\t\t\t\t\taccessor.get(IOpenerService);\n\t\t\t\t\t\t\t\t\topenerService.open(\n\t\t\t\t\t\t\t\t\t\t\"https://aka.ms/vscode-extension-bisect\",\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t},\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\tthis._notificationService.prompt(\n\t\t\t\t\tSeverity.Error,\n\t\t\t\t\tnls.localize(\n\t\t\t\t\t\t\"extensionService.crash\",\n\t\t\t\t\t\t\"Extension host terminated unexpectedly 3 times within the last 5 minutes.\",\n\t\t\t\t\t),\n\t\t\t\t\tchoices,\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate _sendExtensionHostCrashTelemetry(\n\t\tcode: number,\n\t\tsignal: string | null,\n\t\tactivatedExtensions: ExtensionIdentifier[],\n\t): void {\n\t\ttype ExtensionHostCrashClassification = {\n\t\t\towner: \"alexdima\";\n\t\t\tcomment: \"The extension host has terminated unexpectedly\";\n\t\t\tcode: {\n\t\t\t\tclassification: \"SystemMetaData\";\n\t\t\t\tpurpose: \"PerformanceAndHealth\";\n\t\t\t\tcomment: \"The exit code of the extension host process.\";\n\t\t\t};\n\t\t\tsignal: {\n\t\t\t\tclassification: \"SystemMetaData\";\n\t\t\t\tpurpose: \"PerformanceAndHealth\";\n\t\t\t\tcomment: \"The signal that caused the extension host process to exit.\";\n\t\t\t};\n\t\t\textensionIds: {\n\t\t\t\tclassification: \"SystemMetaData\";\n\t\t\t\tpurpose: \"PerformanceAndHealth\";\n\t\t\t\tcomment: \"The list of loaded extensions.\";\n\t\t\t};\n\t\t};\n\t\ttype ExtensionHostCrashEvent = {\n\t\t\tcode: number;\n\t\t\tsignal: string | null;\n\t\t\textensionIds: string[];\n\t\t};\n\t\tthis._telemetryService.publicLog2<\n\t\t\tExtensionHostCrashEvent,\n\t\t\tExtensionHostCrashClassification\n\t\t>(\"extensionHostCrash\", {\n\t\t\tcode,\n\t\t\tsignal,\n\t\t\textensionIds: activatedExtensions.map((e) => e.value),\n\t\t});\n\n\t\tfor (const extensionId of activatedExtensions) {\n\t\t\ttype ExtensionHostCrashExtensionClassification = {\n\t\t\t\towner: \"alexdima\";\n\t\t\t\tcomment: \"The extension host has terminated unexpectedly\";\n\t\t\t\tcode: {\n\t\t\t\t\tclassification: \"SystemMetaData\";\n\t\t\t\t\tpurpose: \"PerformanceAndHealth\";\n\t\t\t\t\tcomment: \"The exit code of the extension host process.\";\n\t\t\t\t};\n\t\t\t\tsignal: {\n\t\t\t\t\tclassification: \"SystemMetaData\";\n\t\t\t\t\tpurpose: \"PerformanceAndHealth\";\n\t\t\t\t\tcomment: \"The signal that caused the extension host process to exit.\";\n\t\t\t\t};\n\t\t\t\textensionId: {\n\t\t\t\t\tclassification: \"SystemMetaData\";\n\t\t\t\t\tpurpose: \"PerformanceAndHealth\";\n\t\t\t\t\tcomment: \"The identifier of the extension.\";\n\t\t\t\t};\n\t\t\t};\n\t\t\ttype ExtensionHostCrashExtensionEvent = {\n\t\t\t\tcode: number;\n\t\t\t\tsignal: string | null;\n\t\t\t\textensionId: string;\n\t\t\t};\n\t\t\tthis._telemetryService.publicLog2<\n\t\t\t\tExtensionHostCrashExtensionEvent,\n\t\t\t\tExtensionHostCrashExtensionClassification\n\t\t\t>(\"extensionHostCrashExtension\", {\n\t\t\t\tcode,\n\t\t\t\tsignal,\n\t\t\t\textensionId: extensionId.value,\n\t\t\t});\n\t\t}\n\t}\n\n\t// --- impl\n\n\tprotected async _resolveAuthority(\n\t\tremoteAuthority: string,\n\t): Promise<ResolverResult> {\n\t\tconst authorityPlusIndex = remoteAuthority.indexOf(\"+\");\n\t\tif (authorityPlusIndex === -1) {\n\t\t\t// This authority does not need to be resolved, simply parse the port number\n\t\t\tconst { host, port } = parseAuthorityWithPort(remoteAuthority);\n\t\t\treturn {\n\t\t\t\tauthority: {\n\t\t\t\t\tauthority: remoteAuthority,\n\t\t\t\t\tconnectTo: {\n\t\t\t\t\t\ttype: RemoteConnectionType.WebSocket,\n\t\t\t\t\t\thost,\n\t\t\t\t\t\tport,\n\t\t\t\t\t},\n\t\t\t\t\tconnectionToken: undefined,\n\t\t\t\t},\n\t\t\t};\n\t\t}\n\n\t\treturn this._resolveAuthorityOnExtensionHosts(\n\t\t\tExtensionHostKind.LocalProcess,\n\t\t\tremoteAuthority,\n\t\t);\n\t}\n\n\tprivate async _getCanonicalURI(\n\t\tremoteAuthority: string,\n\t\turi: URI,\n\t): Promise<URI> {\n\t\tconst authorityPlusIndex = remoteAuthority.indexOf(\"+\");\n\t\tif (authorityPlusIndex === -1) {\n\t\t\t// This authority does not use a resolver\n\t\t\treturn uri;\n\t\t}\n\n\t\tconst localProcessExtensionHosts = this._getExtensionHostManagers(\n\t\t\tExtensionHostKind.LocalProcess,\n\t\t);\n\t\tif (localProcessExtensionHosts.length === 0) {\n\t\t\t// no local process extension hosts\n\t\t\tthrow new Error(`Cannot resolve canonical URI`);\n\t\t}\n\n\t\tconst results = await Promise.all(\n\t\t\tlocalProcessExtensionHosts.map((extHost) =>\n\t\t\t\textHost.getCanonicalURI(remoteAuthority, uri),\n\t\t\t),\n\t\t);\n\n\t\tfor (const result of results) {\n\t\t\tif (result) {\n\t\t\t\treturn result;\n\t\t\t}\n\t\t}\n\n\t\t// we can only reach this if there was no resolver extension that can return the cannonical uri\n\t\tthrow new Error(\n\t\t\t`Cannot get canonical URI because no extension is installed to resolve ${getRemoteAuthorityPrefix(remoteAuthority)}`,\n\t\t);\n\t}\n\n\tprotected async _resolveExtensions(): Promise<ResolvedExtensions> {\n\t\tthis._extensionScanner.startScanningExtensions();\n\n\t\tconst remoteAuthority = this._environmentService.remoteAuthority;\n\n\t\tlet remoteEnv: IRemoteAgentEnvironment | null = null;\n\t\tlet remoteExtensions: IExtensionDescription[] = [];\n\n\t\tif (remoteAuthority) {\n\t\t\tthis._remoteAuthorityResolverService._setCanonicalURIProvider(\n\t\t\t\tasync (uri) => {\n\t\t\t\t\tif (\n\t\t\t\t\t\turi.scheme !== Schemas.vscodeRemote ||\n\t\t\t\t\t\turi.authority !== remoteAuthority\n\t\t\t\t\t) {\n\t\t\t\t\t\t// The current remote authority resolver cannot give the canonical URI for this URI\n\t\t\t\t\t\treturn uri;\n\t\t\t\t\t}\n\t\t\t\t\tperformance.mark(\n\t\t\t\t\t\t`code/willGetCanonicalURI/${getRemoteAuthorityPrefix(remoteAuthority)}`,\n\t\t\t\t\t);\n\t\t\t\t\tif (isCI) {\n\t\t\t\t\t\tthis._logService.info(\n\t\t\t\t\t\t\t`Invoking getCanonicalURI for authority ${getRemoteAuthorityPrefix(remoteAuthority)}...`,\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t\ttry {\n\t\t\t\t\t\treturn this._getCanonicalURI(remoteAuthority, uri);\n\t\t\t\t\t} finally {\n\t\t\t\t\t\tperformance.mark(\n\t\t\t\t\t\t\t`code/didGetCanonicalURI/${getRemoteAuthorityPrefix(remoteAuthority)}`,\n\t\t\t\t\t\t);\n\t\t\t\t\t\tif (isCI) {\n\t\t\t\t\t\t\tthis._logService.info(\n\t\t\t\t\t\t\t\t`getCanonicalURI returned for authority ${getRemoteAuthorityPrefix(remoteAuthority)}.`,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t);\n\n\t\t\tif (isCI) {\n\t\t\t\tthis._logService.info(\n\t\t\t\t\t`Starting to wait on IWorkspaceTrustManagementService.workspaceResolved...`,\n\t\t\t\t);\n\t\t\t}\n\n\t\t\t// Now that the canonical URI provider has been registered, we need to wait for the trust state to be\n\t\t\t// calculated. The trust state will be used while resolving the authority, however the resolver can\n\t\t\t// override the trust state through the resolver result.\n\t\t\tawait this._workspaceTrustManagementService.workspaceResolved;\n\n\t\t\tif (isCI) {\n\t\t\t\tthis._logService.info(\n\t\t\t\t\t`Finished waiting on IWorkspaceTrustManagementService.workspaceResolved.`,\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tlet resolverResult: ResolverResult;\n\t\t\ttry {\n\t\t\t\tresolverResult =\n\t\t\t\t\tawait this._resolveAuthorityInitial(remoteAuthority);\n\t\t\t} catch (err) {\n\t\t\t\tif (RemoteAuthorityResolverError.isNoResolverFound(err)) {\n\t\t\t\t\terr.isHandled =\n\t\t\t\t\t\tawait this._handleNoResolverFound(remoteAuthority);\n\t\t\t\t} else if (RemoteAuthorityResolverError.isHandled(err)) {\n\t\t\t\t\tconsole.log(\n\t\t\t\t\t\t`Error handled: Not showing a notification for the error`,\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t\tthis._remoteAuthorityResolverService._setResolvedAuthorityError(\n\t\t\t\t\tremoteAuthority,\n\t\t\t\t\terr,\n\t\t\t\t);\n\n\t\t\t\t// Proceed with the local extension host\n\t\t\t\treturn this._startLocalExtensionHost();\n\t\t\t}\n\n\t\t\t// set the resolved authority\n\t\t\tthis._remoteAuthorityResolverService._setResolvedAuthority(\n\t\t\t\tresolverResult.authority,\n\t\t\t\tresolverResult.options,\n\t\t\t);\n\t\t\tthis._remoteExplorerService.setTunnelInformation(\n\t\t\t\tresolverResult.tunnelInformation,\n\t\t\t);\n\n\t\t\t// monitor for breakage\n\t\t\tconst connection = this._remoteAgentService.getConnection();\n\t\t\tif (connection) {\n\t\t\t\tconnection.onDidStateChange(async (e) => {\n\t\t\t\t\tif (\n\t\t\t\t\t\te.type === PersistentConnectionEventType.ConnectionLost\n\t\t\t\t\t) {\n\t\t\t\t\t\tthis._remoteAuthorityResolverService._clearResolvedAuthority(\n\t\t\t\t\t\t\tremoteAuthority,\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\tconnection.onReconnecting(() => this._resolveAuthorityAgain());\n\t\t\t}\n\n\t\t\t// fetch the remote environment\n\t\t\t[remoteEnv, remoteExtensions] = await Promise.all([\n\t\t\t\tthis._remoteAgentService.getEnvironment(),\n\t\t\t\tthis._remoteExtensionsScannerService.scanExtensions(),\n\t\t\t]);\n\n\t\t\tif (!remoteEnv) {\n\t\t\t\tthis._notificationService.notify({\n\t\t\t\t\tseverity: Severity.Error,\n\t\t\t\t\tmessage: nls.localize(\n\t\t\t\t\t\t\"getEnvironmentFailure\",\n\t\t\t\t\t\t\"Could not fetch remote environment\",\n\t\t\t\t\t),\n\t\t\t\t});\n\t\t\t\t// Proceed with the local extension host\n\t\t\t\treturn this._startLocalExtensionHost();\n\t\t\t}\n\n\t\t\tupdateProxyConfigurationsScope(\n\t\t\t\tremoteEnv.useHostProxy\n\t\t\t\t\t? ConfigurationScope.APPLICATION\n\t\t\t\t\t: ConfigurationScope.MACHINE,\n\t\t\t);\n\t\t} else {\n\t\t\tthis._remoteAuthorityResolverService._setCanonicalURIProvider(\n\t\t\t\tasync (uri) => uri,\n\t\t\t);\n\t\t}\n\n\t\treturn this._startLocalExtensionHost(remoteExtensions);\n\t}\n\n\tprivate async _startLocalExtensionHost(\n\t\tremoteExtensions: IExtensionDescription[] = [],\n\t): Promise<ResolvedExtensions> {\n\t\t// Ensure that the workspace trust state has been fully initialized so\n\t\t// that the extension host can start with the correct set of extensions.\n\t\tawait this._workspaceTrustManagementService.workspaceTrustInitialized;\n\n\t\treturn new ResolvedExtensions(\n\t\t\tawait this._scanAllLocalExtensions(),\n\t\t\tremoteExtensions,\n\t\t\t/*hasLocalProcess*/ true,\n\t\t\t/*allowRemoteExtensionsInLocalWebWorker*/ false,\n\t\t);\n\t}\n\n\tprotected async _onExtensionHostExit(code: number): Promise<void> {\n\t\t// Dispose everything associated with the extension host\n\t\tawait this._doStopExtensionHosts();\n\n\t\t// Dispose the management connection to avoid reconnecting after the extension host exits\n\t\tconst connection = this._remoteAgentService.getConnection();\n\t\tconnection?.dispose();\n\n\t\tif (\n\t\t\tparseExtensionDevOptions(this._environmentService)\n\t\t\t\t.isExtensionDevTestFromCli\n\t\t) {\n\t\t\t// When CLI testing make sure to exit with proper exit code\n\t\t\tif (isCI) {\n\t\t\t\tthis._logService.info(\n\t\t\t\t\t`Asking native host service to exit with code ${code}.`,\n\t\t\t\t);\n\t\t\t}\n\t\t\tthis._nativeHostService.exit(code);\n\t\t} else {\n\t\t\t// Expected development extension termination: When the extension host goes down we also shutdown the window\n\t\t\tthis._nativeHostService.closeWindow();\n\t\t}\n\t}\n\n\tprivate async _handleNoResolverFound(\n\t\tremoteAuthority: string,\n\t): Promise<boolean> {\n\t\tconst remoteName = getRemoteName(remoteAuthority);\n\t\tconst recommendation =\n\t\t\tthis._productService.remoteExtensionTips?.[remoteName];\n\t\tif (!recommendation) {\n\t\t\treturn false;\n\t\t}\n\t\tconst sendTelemetry = (\n\t\t\tuserReaction: \"install\" | \"enable\" | \"cancel\",\n\t\t) => {\n\t\t\t/* __GDPR__\n\t\t\t\"remoteExtensionRecommendations:popup\" : {\n\t\t\t\t\"owner\": \"sandy081\",\n\t\t\t\t\"userReaction\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\" },\n\t\t\t\t\"extensionId\": { \"classification\": \"PublicNonPersonalData\", \"purpose\": \"FeatureInsight\" }\n\t\t\t}\n\t\t\t*/\n\t\t\tthis._telemetryService.publicLog(\n\t\t\t\t\"remoteExtensionRecommendations:popup\",\n\t\t\t\t{ userReaction, extensionId: resolverExtensionId },\n\t\t\t);\n\t\t};\n\n\t\tconst resolverExtensionId = recommendation.extensionId;\n\t\tconst allExtensions = await this._scanAllLocalExtensions();\n\t\tconst extension = allExtensions.filter(\n\t\t\t(e) => e.identifier.value === resolverExtensionId,\n\t\t)[0];\n\t\tif (extension) {\n\t\t\tif (\n\t\t\t\t!extensionIsEnabled(\n\t\t\t\t\tthis._logService,\n\t\t\t\t\tthis._extensionEnablementService,\n\t\t\t\t\textension,\n\t\t\t\t\tfalse,\n\t\t\t\t)\n\t\t\t) {\n\t\t\t\tconst message = nls.localize(\n\t\t\t\t\t\"enableResolver\",\n\t\t\t\t\t\"Extension '{0}' is required to open the remote window.\\nOK to enable?\",\n\t\t\t\t\trecommendation.friendlyName,\n\t\t\t\t);\n\t\t\t\tthis._notificationService.prompt(\n\t\t\t\t\tSeverity.Info,\n\t\t\t\t\tmessage,\n\t\t\t\t\t[\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: nls.localize(\"enable\", \"Enable and Reload\"),\n\t\t\t\t\t\t\trun: async () => {\n\t\t\t\t\t\t\t\tsendTelemetry(\"enable\");\n\t\t\t\t\t\t\t\tawait this._extensionEnablementService.setEnablement(\n\t\t\t\t\t\t\t\t\t[toExtension(extension)],\n\t\t\t\t\t\t\t\t\tEnablementState.EnabledGlobally,\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\tawait this._hostService.reload();\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t\t{\n\t\t\t\t\t\tsticky: true,\n\t\t\t\t\t\tpriority: NotificationPriority.URGENT,\n\t\t\t\t\t},\n\t\t\t\t);\n\t\t\t}\n\t\t} else {\n\t\t\t// Install the Extension and reload the window to handle.\n\t\t\tconst message = nls.localize(\n\t\t\t\t\"installResolver\",\n\t\t\t\t\"Extension '{0}' is required to open the remote window.\\nDo you want to install the extension?\",\n\t\t\t\trecommendation.friendlyName,\n\t\t\t);\n\t\t\tthis._notificationService.prompt(\n\t\t\t\tSeverity.Info,\n\t\t\t\tmessage,\n\t\t\t\t[\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: nls.localize(\"install\", \"Install and Reload\"),\n\t\t\t\t\t\trun: async () => {\n\t\t\t\t\t\t\tsendTelemetry(\"install\");\n\t\t\t\t\t\t\tconst [galleryExtension] =\n\t\t\t\t\t\t\t\tawait this._extensionGalleryService.getExtensions(\n\t\t\t\t\t\t\t\t\t[{ id: resolverExtensionId }],\n\t\t\t\t\t\t\t\t\tCancellationToken.None,\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tif (galleryExtension) {\n\t\t\t\t\t\t\t\tawait this._extensionManagementService.installFromGallery(\n\t\t\t\t\t\t\t\t\tgalleryExtension,\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\tawait this._hostService.reload();\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tthis._notificationService.error(\n\t\t\t\t\t\t\t\t\tnls.localize(\n\t\t\t\t\t\t\t\t\t\t\"resolverExtensionNotFound\",\n\t\t\t\t\t\t\t\t\t\t\"`{0}` not found on marketplace\",\n\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\t{\n\t\t\t\t\tsticky: true,\n\t\t\t\t\tpriority: NotificationPriority.URGENT,\n\t\t\t\t\tonCancel: () => sendTelemetry(\"cancel\"),\n\t\t\t\t},\n\t\t\t);\n\t\t}\n\t\treturn true;\n\t}\n}\n\nclass NativeExtensionHostFactory implements IExtensionHostFactory {\n\tprivate readonly _webWorkerExtHostEnablement: LocalWebWorkerExtHostEnablement;\n\n\tconstructor(\n\t\tprivate readonly _extensionsProposedApi: ExtensionsProposedApi,\n\t\tprivate readonly _extensionScanner: CachedExtensionScanner,\n\t\tprivate readonly _getExtensionRegistrySnapshotWhenReady: () => Promise<ExtensionDescriptionRegistrySnapshot>,\n\t\t@IInstantiationService\n\t\tprivate readonly _instantiationService: IInstantiationService,\n\t\t@IWorkbenchEnvironmentService\n\t\tenvironmentService: IWorkbenchEnvironmentService,\n\t\t@IWorkbenchExtensionEnablementService\n\t\tprivate readonly _extensionEnablementService: IWorkbenchExtensionEnablementService,\n\t\t@IConfigurationService configurationService: IConfigurationService,\n\t\t@IRemoteAgentService\n\t\tprivate readonly _remoteAgentService: IRemoteAgentService,\n\t\t@IRemoteAuthorityResolverService\n\t\tprivate readonly _remoteAuthorityResolverService: IRemoteAuthorityResolverService,\n\t\t@ILogService private readonly _logService: ILogService,\n\t) {\n\t\tthis._webWorkerExtHostEnablement =\n\t\t\tdetermineLocalWebWorkerExtHostEnablement(\n\t\t\t\tenvironmentService,\n\t\t\t\tconfigurationService,\n\t\t\t);\n\t}\n\n\tpublic createExtensionHost(\n\t\trunningLocations: ExtensionRunningLocationTracker,\n\t\trunningLocation: ExtensionRunningLocation,\n\t\tisInitialStart: boolean,\n\t): IExtensionHost | null {\n\t\tswitch (runningLocation.kind) {\n\t\t\tcase ExtensionHostKind.LocalProcess: {\n\t\t\t\tconst startup = isInitialStart\n\t\t\t\t\t? ExtensionHostStartup.EagerManualStart\n\t\t\t\t\t: ExtensionHostStartup.EagerAutoStart;\n\t\t\t\treturn this._instantiationService.createInstance(\n\t\t\t\t\tNativeLocalProcessExtensionHost,\n\t\t\t\t\trunningLocation,\n\t\t\t\t\tstartup,\n\t\t\t\t\tthis._createLocalProcessExtensionHostDataProvider(\n\t\t\t\t\t\trunningLocations,\n\t\t\t\t\t\tisInitialStart,\n\t\t\t\t\t\trunningLocation,\n\t\t\t\t\t),\n\t\t\t\t);\n\t\t\t}\n\t\t\tcase ExtensionHostKind.LocalWebWorker: {\n\t\t\t\tif (\n\t\t\t\t\tthis._webWorkerExtHostEnablement !==\n\t\t\t\t\tLocalWebWorkerExtHostEnablement.Disabled\n\t\t\t\t) {\n\t\t\t\t\tconst startup = isInitialStart\n\t\t\t\t\t\t? this._webWorkerExtHostEnablement ===\n\t\t\t\t\t\t\tLocalWebWorkerExtHostEnablement.Lazy\n\t\t\t\t\t\t\t? ExtensionHostStartup.Lazy\n\t\t\t\t\t\t\t: ExtensionHostStartup.EagerManualStart\n\t\t\t\t\t\t: ExtensionHostStartup.EagerAutoStart;\n\t\t\t\t\treturn this._instantiationService.createInstance(\n\t\t\t\t\t\tWebWorkerExtensionHost,\n\t\t\t\t\t\trunningLocation,\n\t\t\t\t\t\tstartup,\n\t\t\t\t\t\tthis._createWebWorkerExtensionHostDataProvider(\n\t\t\t\t\t\t\trunningLocations,\n\t\t\t\t\t\t\trunningLocation,\n\t\t\t\t\t\t),\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\tcase ExtensionHostKind.Remote: {\n\t\t\t\tconst remoteAgentConnection =\n\t\t\t\t\tthis._remoteAgentService.getConnection();\n\t\t\t\tif (remoteAgentConnection) {\n\t\t\t\t\treturn this._instantiationService.createInstance(\n\t\t\t\t\t\tRemoteExtensionHost,\n\t\t\t\t\t\trunningLocation,\n\t\t\t\t\t\tthis._createRemoteExtensionHostDataProvider(\n\t\t\t\t\t\t\trunningLocations,\n\t\t\t\t\t\t\tremoteAgentConnection.remoteAuthority,\n\t\t\t\t\t\t),\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t\treturn null;\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate _createLocalProcessExtensionHostDataProvider(\n\t\trunningLocations: ExtensionRunningLocationTracker,\n\t\tisInitialStart: boolean,\n\t\tdesiredRunningLocation: LocalProcessRunningLocation,\n\t): ILocalProcessExtensionHostDataProvider {\n\t\treturn {\n\t\t\tgetInitData:\n\t\t\t\tasync (): Promise<ILocalProcessExtensionHostInitData> => {\n\t\t\t\t\tif (isInitialStart) {\n\t\t\t\t\t\t// Here we load even extensions that would be disabled by workspace trust\n\t\t\t\t\t\tconst scannedExtensions =\n\t\t\t\t\t\t\tawait this._extensionScanner.scannedExtensions;\n\t\t\t\t\t\tif (isCI) {\n\t\t\t\t\t\t\tthis._logService.info(\n\t\t\t\t\t\t\t\t`NativeExtensionHostFactory._createLocalProcessExtensionHostDataProvider.scannedExtensions: ${scannedExtensions.map((ext) => ext.identifier.value).join(\",\")}`,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst localExtensions = checkEnabledAndProposedAPI(\n\t\t\t\t\t\t\tthis._logService,\n\t\t\t\t\t\t\tthis._extensionEnablementService,\n\t\t\t\t\t\t\tthis._extensionsProposedApi,\n\t\t\t\t\t\t\tscannedExtensions,\n\t\t\t\t\t\t\t/* ignore workspace trust */ true,\n\t\t\t\t\t\t);\n\t\t\t\t\t\tif (isCI) {\n\t\t\t\t\t\t\tthis._logService.info(\n\t\t\t\t\t\t\t\t`NativeExtensionHostFactory._createLocalProcessExtensionHostDataProvider.localExtensions: ${localExtensions.map((ext) => ext.identifier.value).join(\",\")}`,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst runningLocation =\n\t\t\t\t\t\t\trunningLocations.computeRunningLocation(\n\t\t\t\t\t\t\t\tlocalExtensions,\n\t\t\t\t\t\t\t\t[],\n\t\t\t\t\t\t\t\tfalse,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\tconst myExtensions = filterExtensionDescriptions(\n\t\t\t\t\t\t\tlocalExtensions,\n\t\t\t\t\t\t\trunningLocation,\n\t\t\t\t\t\t\t(extRunningLocation) =>\n\t\t\t\t\t\t\t\tdesiredRunningLocation.equals(\n\t\t\t\t\t\t\t\t\textRunningLocation,\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t);\n\t\t\t\t\t\tconst extensions = new ExtensionHostExtensions(\n\t\t\t\t\t\t\t0,\n\t\t\t\t\t\t\tlocalExtensions,\n\t\t\t\t\t\t\tmyExtensions.map(\n\t\t\t\t\t\t\t\t(extension) => extension.identifier,\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t);\n\t\t\t\t\t\tif (isCI) {\n\t\t\t\t\t\t\tthis._logService.info(\n\t\t\t\t\t\t\t\t`NativeExtensionHostFactory._createLocalProcessExtensionHostDataProvider.myExtensions: ${myExtensions.map((ext) => ext.identifier.value).join(\",\")}`,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn { extensions };\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// restart case\n\t\t\t\t\t\tconst snapshot =\n\t\t\t\t\t\t\tawait this._getExtensionRegistrySnapshotWhenReady();\n\t\t\t\t\t\tconst myExtensions =\n\t\t\t\t\t\t\trunningLocations.filterByRunningLocation(\n\t\t\t\t\t\t\t\tsnapshot.extensions,\n\t\t\t\t\t\t\t\tdesiredRunningLocation,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\tconst extensions = new ExtensionHostExtensions(\n\t\t\t\t\t\t\tsnapshot.versionId,\n\t\t\t\t\t\t\tsnapshot.extensions,\n\t\t\t\t\t\t\tmyExtensions.map(\n\t\t\t\t\t\t\t\t(extension) => extension.identifier,\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t);\n\t\t\t\t\t\treturn { extensions };\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t};\n\t}\n\n\tprivate _createWebWorkerExtensionHostDataProvider(\n\t\trunningLocations: ExtensionRunningLocationTracker,\n\t\tdesiredRunningLocation: LocalWebWorkerRunningLocation,\n\t): IWebWorkerExtensionHostDataProvider {\n\t\treturn {\n\t\t\tgetInitData: async (): Promise<IWebWorkerExtensionHostInitData> => {\n\t\t\t\tconst snapshot =\n\t\t\t\t\tawait this._getExtensionRegistrySnapshotWhenReady();\n\t\t\t\tconst myExtensions = runningLocations.filterByRunningLocation(\n\t\t\t\t\tsnapshot.extensions,\n\t\t\t\t\tdesiredRunningLocation,\n\t\t\t\t);\n\t\t\t\tconst extensions = new ExtensionHostExtensions(\n\t\t\t\t\tsnapshot.versionId,\n\t\t\t\t\tsnapshot.extensions,\n\t\t\t\t\tmyExtensions.map((extension) => extension.identifier),\n\t\t\t\t);\n\t\t\t\treturn { extensions };\n\t\t\t},\n\t\t};\n\t}\n\n\tprivate _createRemoteExtensionHostDataProvider(\n\t\trunningLocations: ExtensionRunningLocationTracker,\n\t\tremoteAuthority: string,\n\t): IRemoteExtensionHostDataProvider {\n\t\treturn {\n\t\t\tremoteAuthority: remoteAuthority,\n\t\t\tgetInitData: async (): Promise<IRemoteExtensionHostInitData> => {\n\t\t\t\tconst snapshot =\n\t\t\t\t\tawait this._getExtensionRegistrySnapshotWhenReady();\n\n\t\t\t\tconst remoteEnv =\n\t\t\t\t\tawait this._remoteAgentService.getEnvironment();\n\t\t\t\tif (!remoteEnv) {\n\t\t\t\t\tthrow new Error(\n\t\t\t\t\t\t\"Cannot provide init data for remote extension host!\",\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\tconst myExtensions = runningLocations.filterByExtensionHostKind(\n\t\t\t\t\tsnapshot.extensions,\n\t\t\t\t\tExtensionHostKind.Remote,\n\t\t\t\t);\n\t\t\t\tconst extensions = new ExtensionHostExtensions(\n\t\t\t\t\tsnapshot.versionId,\n\t\t\t\t\tsnapshot.extensions,\n\t\t\t\t\tmyExtensions.map((extension) => extension.identifier),\n\t\t\t\t);\n\n\t\t\t\treturn {\n\t\t\t\t\tconnectionData:\n\t\t\t\t\t\tthis._remoteAuthorityResolverService.getConnectionData(\n\t\t\t\t\t\t\tremoteAuthority,\n\t\t\t\t\t\t),\n\t\t\t\t\tpid: remoteEnv.pid,\n\t\t\t\t\tappRoot: remoteEnv.appRoot,\n\t\t\t\t\textensionHostLogsPath: remoteEnv.extensionHostLogsPath,\n\t\t\t\t\tglobalStorageHome: remoteEnv.globalStorageHome,\n\t\t\t\t\tworkspaceStorageHome: remoteEnv.workspaceStorageHome,\n\t\t\t\t\textensions,\n\t\t\t\t};\n\t\t\t},\n\t\t};\n\t}\n}\n\nfunction determineLocalWebWorkerExtHostEnablement(\n\tenvironmentService: IWorkbenchEnvironmentService,\n\tconfigurationService: IConfigurationService,\n): LocalWebWorkerExtHostEnablement {\n\tif (\n\t\tenvironmentService.isExtensionDevelopment &&\n\t\tenvironmentService.extensionDevelopmentKind?.some((k) => k === \"web\")\n\t) {\n\t\treturn LocalWebWorkerExtHostEnablement.Eager;\n\t} else {\n\t\tconst config =\n\t\t\tconfigurationService.getValue<WebWorkerExtHostConfigValue>(\n\t\t\t\twebWorkerExtHostConfig,\n\t\t\t);\n\t\tif (config === true) {\n\t\t\treturn LocalWebWorkerExtHostEnablement.Eager;\n\t\t} else if (config === \"auto\") {\n\t\t\treturn LocalWebWorkerExtHostEnablement.Lazy;\n\t\t} else {\n\t\t\treturn LocalWebWorkerExtHostEnablement.Disabled;\n\t\t}\n\t}\n}\n\nenum LocalWebWorkerExtHostEnablement {\n\tDisabled = 0,\n\tEager = 1,\n\tLazy = 2,\n}\n\nexport class NativeExtensionHostKindPicker implements IExtensionHostKindPicker {\n\tprivate readonly _hasRemoteExtHost: boolean;\n\tprivate readonly _hasWebWorkerExtHost: boolean;\n\n\tconstructor(\n\t\t@IWorkbenchEnvironmentService\n\t\tenvironmentService: IWorkbenchEnvironmentService,\n\t\t@IConfigurationService configurationService: IConfigurationService,\n\t\t@ILogService private readonly _logService: ILogService,\n\t) {\n\t\tthis._hasRemoteExtHost = Boolean(environmentService.remoteAuthority);\n\t\tconst webWorkerExtHostEnablement =\n\t\t\tdetermineLocalWebWorkerExtHostEnablement(\n\t\t\t\tenvironmentService,\n\t\t\t\tconfigurationService,\n\t\t\t);\n\t\tthis._hasWebWorkerExtHost =\n\t\t\twebWorkerExtHostEnablement !==\n\t\t\tLocalWebWorkerExtHostEnablement.Disabled;\n\t}\n\n\tpublic pickExtensionHostKind(\n\t\textensionId: ExtensionIdentifier,\n\t\textensionKinds: ExtensionKind[],\n\t\tisInstalledLocally: boolean,\n\t\tisInstalledRemotely: boolean,\n\t\tpreference: ExtensionRunningPreference,\n\t): ExtensionHostKind | null {\n\t\tconst result = NativeExtensionHostKindPicker.pickExtensionHostKind(\n\t\t\textensionKinds,\n\t\t\tisInstalledLocally,\n\t\t\tisInstalledRemotely,\n\t\t\tpreference,\n\t\t\tthis._hasRemoteExtHost,\n\t\t\tthis._hasWebWorkerExtHost,\n\t\t);\n\t\tthis._logService.trace(\n\t\t\t`pickRunningLocation for ${extensionId.value}, extension kinds: [${extensionKinds.join(\", \")}], isInstalledLocally: ${isInstalledLocally}, isInstalledRemotely: ${isInstalledRemotely}, preference: ${extensionRunningPreferenceToString(preference)} => ${extensionHostKindToString(result)}`,\n\t\t);\n\t\treturn result;\n\t}\n\n\tpublic static pickExtensionHostKind(\n\t\textensionKinds: ExtensionKind[],\n\t\tisInstalledLocally: boolean,\n\t\tisInstalledRemotely: boolean,\n\t\tpreference: ExtensionRunningPreference,\n\t\thasRemoteExtHost: boolean,\n\t\thasWebWorkerExtHost: boolean,\n\t): ExtensionHostKind | null {\n\t\tconst result: ExtensionHostKind[] = [];\n\t\tfor (const extensionKind of extensionKinds) {\n\t\t\tif (extensionKind === \"ui\" && isInstalledLocally) {\n\t\t\t\t// ui extensions run locally if possible\n\t\t\t\tif (\n\t\t\t\t\tpreference === ExtensionRunningPreference.None ||\n\t\t\t\t\tpreference === ExtensionRunningPreference.Local\n\t\t\t\t) {\n\t\t\t\t\treturn ExtensionHostKind.LocalProcess;\n\t\t\t\t} else {\n\t\t\t\t\tresult.push(ExtensionHostKind.LocalProcess);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (extensionKind === \"workspace\" && isInstalledRemotely) {\n\t\t\t\t// workspace extensions run remotely if possible\n\t\t\t\tif (\n\t\t\t\t\tpreference === ExtensionRunningPreference.None ||\n\t\t\t\t\tpreference === ExtensionRunningPreference.Remote\n\t\t\t\t) {\n\t\t\t\t\treturn ExtensionHostKind.Remote;\n\t\t\t\t} else {\n\t\t\t\t\tresult.push(ExtensionHostKind.Remote);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (extensionKind === \"workspace\" && !hasRemoteExtHost) {\n\t\t\t\t// workspace extensions also run locally if there is no remote\n\t\t\t\tif (\n\t\t\t\t\tpreference === ExtensionRunningPreference.None ||\n\t\t\t\t\tpreference === ExtensionRunningPreference.Local\n\t\t\t\t) {\n\t\t\t\t\treturn ExtensionHostKind.LocalProcess;\n\t\t\t\t} else {\n\t\t\t\t\tresult.push(ExtensionHostKind.LocalProcess);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (\n\t\t\t\textensionKind === \"web\" &&\n\t\t\t\tisInstalledLocally &&\n\t\t\t\thasWebWorkerExtHost\n\t\t\t) {\n\t\t\t\t// web worker extensions run in the local web worker if possible\n\t\t\t\tif (\n\t\t\t\t\tpreference === ExtensionRunningPreference.None ||\n\t\t\t\t\tpreference === ExtensionRunningPreference.Local\n\t\t\t\t) {\n\t\t\t\t\treturn ExtensionHostKind.LocalWebWorker;\n\t\t\t\t} else {\n\t\t\t\t\tresult.push(ExtensionHostKind.LocalWebWorker);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn result.length > 0 ? result[0] : null;\n\t}\n}\n\nclass RestartExtensionHostAction extends Action2 {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: \"workbench.action.restartExtensionHost\",\n\t\t\ttitle: nls.localize2(\n\t\t\t\t\"restartExtensionHost\",\n\t\t\t\t\"Restart Extension Host\",\n\t\t\t),\n\t\t\tcategory: Categories.Developer,\n\t\t\tf1: true,\n\t\t});\n\t}\n\n\tasync run(accessor: ServicesAccessor): Promise<void> {\n\t\tconst extensionService = accessor.get(IExtensionService);\n\n\t\tconst stopped = await extensionService.stopExtensionHosts(\n\t\t\tnls.localize(\n\t\t\t\t\"restartExtensionHost.reason\",\n\t\t\t\t\"Restarting extension host on explicit request.\",\n\t\t\t),\n\t\t);\n\t\tif (stopped) {\n\t\t\textensionService.startExtensionHosts();\n\t\t}\n\t}\n}\n\nregisterAction2(RestartExtensionHostAction);\n\nregisterSingleton(\n\tIExtensionService,\n\tNativeExtensionService,\n\tInstantiationType.Eager,\n);\n"],
  "mappings": "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",
  "names": ["LocalWebWorkerExtHostEnablement"]
}
