{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/extensions/electron-sandbox/nativeExtensionService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { runWhenWindowIdle } from '../../../../base/browser/dom.js';\nimport { mainWindow } from '../../../../base/browser/window.js';\nimport { CancellationToken } from '../../../../base/common/cancellation.js';\nimport { Schemas } from '../../../../base/common/network.js';\nimport * as performance from '../../../../base/common/performance.js';\nimport { isCI } from '../../../../base/common/platform.js';\nimport { URI } from '../../../../base/common/uri.js';\nimport * as nls from '../../../../nls.js';\nimport { Categories } from '../../../../platform/action/common/actionCommonCategories.js';\nimport { Action2, registerAction2 } from '../../../../platform/actions/common/actions.js';\nimport { ICommandService } from '../../../../platform/commands/common/commands.js';\nimport { IConfigurationService } from '../../../../platform/configuration/common/configuration.js';\nimport { ConfigurationScope } from '../../../../platform/configuration/common/configurationRegistry.js';\nimport { IDialogService } from '../../../../platform/dialogs/common/dialogs.js';\nimport { ExtensionKind } from '../../../../platform/environment/common/environment.js';\nimport { IExtensionGalleryService } from '../../../../platform/extensionManagement/common/extensionManagement.js';\nimport { ExtensionIdentifier, IExtensionDescription } from '../../../../platform/extensions/common/extensions.js';\nimport { IFileService } from '../../../../platform/files/common/files.js';\nimport { InstantiationType, registerSingleton } from '../../../../platform/instantiation/common/extensions.js';\nimport { IInstantiationService, ServicesAccessor } from '../../../../platform/instantiation/common/instantiation.js';\nimport { ILogService } from '../../../../platform/log/common/log.js';\nimport { INativeHostService } from '../../../../platform/native/common/native.js';\nimport { INotificationService, IPromptChoice, NotificationPriority, Severity } from '../../../../platform/notification/common/notification.js';\nimport { IOpenerService } from '../../../../platform/opener/common/opener.js';\nimport { IProductService } from '../../../../platform/product/common/productService.js';\nimport { PersistentConnectionEventType } from '../../../../platform/remote/common/remoteAgentConnection.js';\nimport { IRemoteAgentEnvironment } from '../../../../platform/remote/common/remoteAgentEnvironment.js';\nimport { IRemoteAuthorityResolverService, RemoteAuthorityResolverError, RemoteConnectionType, ResolverResult, getRemoteAuthorityPrefix } from '../../../../platform/remote/common/remoteAuthorityResolver.js';\nimport { IRemoteExtensionsScannerService } from '../../../../platform/remote/common/remoteExtensionsScanner.js';\nimport { getRemoteName, parseAuthorityWithPort } from '../../../../platform/remote/common/remoteHosts.js';\nimport { updateProxyConfigurationsScope } from '../../../../platform/request/common/request.js';\nimport { ITelemetryService } from '../../../../platform/telemetry/common/telemetry.js';\nimport { IWorkspaceContextService } from '../../../../platform/workspace/common/workspace.js';\nimport { IWorkspaceTrustManagementService } from '../../../../platform/workspace/common/workspaceTrust.js';\nimport { IWorkbenchEnvironmentService } from '../../environment/common/environmentService.js';\nimport { EnablementState, IWorkbenchExtensionEnablementService, IWorkbenchExtensionManagementService } from '../../extensionManagement/common/extensionManagement.js';\nimport { IWebWorkerExtensionHostDataProvider, IWebWorkerExtensionHostInitData, WebWorkerExtensionHost } from '../browser/webWorkerExtensionHost.js';\nimport { AbstractExtensionService, ExtensionHostCrashTracker, IExtensionHostFactory, ResolvedExtensions, checkEnabledAndProposedAPI, extensionIsEnabled } from '../common/abstractExtensionService.js';\nimport { ExtensionDescriptionRegistrySnapshot } from '../common/extensionDescriptionRegistry.js';\nimport { parseExtensionDevOptions } from '../common/extensionDevOptions.js';\nimport { ExtensionHostKind, ExtensionRunningPreference, IExtensionHostKindPicker, extensionHostKindToString, extensionRunningPreferenceToString } from '../common/extensionHostKind.js';\nimport { IExtensionHostManager } from '../common/extensionHostManagers.js';\nimport { ExtensionHostExitCode } from '../common/extensionHostProtocol.js';\nimport { IExtensionManifestPropertiesService } from '../common/extensionManifestPropertiesService.js';\nimport { ExtensionRunningLocation, LocalProcessRunningLocation, LocalWebWorkerRunningLocation } from '../common/extensionRunningLocation.js';\nimport { ExtensionRunningLocationTracker, filterExtensionDescriptions } from '../common/extensionRunningLocationTracker.js';\nimport { ExtensionHostExtensions, ExtensionHostStartup, IExtensionHost, IExtensionService, WebWorkerExtHostConfigValue, toExtension, webWorkerExtHostConfig } from '../common/extensions.js';\nimport { ExtensionsProposedApi } from '../common/extensionsProposedApi.js';\nimport { IRemoteExtensionHostDataProvider, IRemoteExtensionHostInitData, RemoteExtensionHost } from '../common/remoteExtensionHost.js';\nimport { CachedExtensionScanner } from './cachedExtensionScanner.js';\nimport { ILocalProcessExtensionHostDataProvider, ILocalProcessExtensionHostInitData, NativeLocalProcessExtensionHost } from './localProcessExtensionHost.js';\nimport { IHostService } from '../../host/browser/host.js';\nimport { ILifecycleService, LifecyclePhase } from '../../lifecycle/common/lifecycle.js';\nimport { IRemoteAgentService } from '../../remote/common/remoteAgentService.js';\nimport { IRemoteExplorerService } from '../../remote/common/remoteExplorerService.js';\n\nexport class NativeExtensionService extends AbstractExtensionService implements IExtensionService {\n\n\tprivate readonly _extensionScanner: CachedExtensionScanner;\n\tprivate readonly _localCrashTracker = new ExtensionHostCrashTracker();\n\n\tconstructor(\n\t\t@IInstantiationService instantiationService: IInstantiationService,\n\t\t@INotificationService notificationService: INotificationService,\n\t\t@IWorkbenchEnvironmentService environmentService: IWorkbenchEnvironmentService,\n\t\t@ITelemetryService telemetryService: ITelemetryService,\n\t\t@IWorkbenchExtensionEnablementService extensionEnablementService: IWorkbenchExtensionEnablementService,\n\t\t@IFileService fileService: IFileService,\n\t\t@IProductService productService: IProductService,\n\t\t@IWorkbenchExtensionManagementService extensionManagementService: IWorkbenchExtensionManagementService,\n\t\t@IWorkspaceContextService contextService: IWorkspaceContextService,\n\t\t@IConfigurationService configurationService: IConfigurationService,\n\t\t@IExtensionManifestPropertiesService extensionManifestPropertiesService: IExtensionManifestPropertiesService,\n\t\t@ILogService logService: ILogService,\n\t\t@IRemoteAgentService remoteAgentService: IRemoteAgentService,\n\t\t@IRemoteExtensionsScannerService remoteExtensionsScannerService: IRemoteExtensionsScannerService,\n\t\t@ILifecycleService lifecycleService: ILifecycleService,\n\t\t@IRemoteAuthorityResolverService remoteAuthorityResolverService: IRemoteAuthorityResolverService,\n\t\t@INativeHostService private readonly _nativeHostService: INativeHostService,\n\t\t@IHostService private readonly _hostService: IHostService,\n\t\t@IRemoteExplorerService private readonly _remoteExplorerService: IRemoteExplorerService,\n\t\t@IExtensionGalleryService private readonly _extensionGalleryService: IExtensionGalleryService,\n\t\t@IWorkspaceTrustManagementService private readonly _workspaceTrustManagementService: IWorkspaceTrustManagementService,\n\t\t@IDialogService dialogService: IDialogService,\n\t) {\n\t\tconst extensionsProposedApi = instantiationService.createInstance(ExtensionsProposedApi);\n\t\tconst extensionScanner = instantiationService.createInstance(CachedExtensionScanner);\n\t\tconst extensionHostFactory = new NativeExtensionHostFactory(\n\t\t\textensionsProposedApi,\n\t\t\textensionScanner,\n\t\t\t() => this._getExtensionRegistrySnapshotWhenReady(),\n\t\t\tinstantiationService,\n\t\t\tenvironmentService,\n\t\t\textensionEnablementService,\n\t\t\tconfigurationService,\n\t\t\tremoteAgentService,\n\t\t\tremoteAuthorityResolverService,\n\t\t\tlogService\n\t\t);\n\t\tsuper(\n\t\t\textensionsProposedApi,\n\t\t\textensionHostFactory,\n\t\t\tnew NativeExtensionHostKindPicker(environmentService, configurationService, logService),\n\t\t\tinstantiationService,\n\t\t\tnotificationService,\n\t\t\tenvironmentService,\n\t\t\ttelemetryService,\n\t\t\textensionEnablementService,\n\t\t\tfileService,\n\t\t\tproductService,\n\t\t\textensionManagementService,\n\t\t\tcontextService,\n\t\t\tconfigurationService,\n\t\t\textensionManifestPropertiesService,\n\t\t\tlogService,\n\t\t\tremoteAgentService,\n\t\t\tremoteExtensionsScannerService,\n\t\t\tlifecycleService,\n\t\t\tremoteAuthorityResolverService,\n\t\t\tdialogService\n\t\t);\n\n\t\tthis._extensionScanner = extensionScanner;\n\n\t\t// delay extension host creation and extension scanning\n\t\t// until the workbench is running. we cannot defer the\n\t\t// extension host more (LifecyclePhase.Restored) because\n\t\t// some editors require the extension host to restore\n\t\t// and this would result in a deadlock\n\t\t// see https://github.com/microsoft/vscode/issues/41322\n\t\tlifecycleService.when(LifecyclePhase.Ready).then(() => {\n\t\t\t// reschedule to ensure this runs after restoring viewlets, panels, and editors\n\t\t\trunWhenWindowIdle(mainWindow, () => {\n\t\t\t\tthis._initialize();\n\t\t\t}, 50 /*max delay*/);\n\t\t});\n\t}\n\n\tprivate async _scanAllLocalExtensions(): Promise<IExtensionDescription[]> {\n\t\treturn this._extensionScanner.scannedExtensions;\n\t}\n\n\tprotected override _onExtensionHostCrashed(extensionHost: IExtensionHostManager, code: number, signal: string | null): void {\n\n\t\tconst activatedExtensions: ExtensionIdentifier[] = [];\n\t\tconst extensionsStatus = this.getExtensionsStatus();\n\t\tfor (const key of Object.keys(extensionsStatus)) {\n\t\t\tconst extensionStatus = extensionsStatus[key];\n\t\t\tif (extensionStatus.activationStarted && extensionHost.containsExtension(extensionStatus.id)) {\n\t\t\t\tactivatedExtensions.push(extensionStatus.id);\n\t\t\t}\n\t\t}\n\n\t\tsuper._onExtensionHostCrashed(extensionHost, code, signal);\n\n\t\tif (extensionHost.kind === ExtensionHostKind.LocalProcess) {\n\t\t\tif (code === ExtensionHostExitCode.VersionMismatch) {\n\t\t\t\tthis._notificationService.prompt(\n\t\t\t\t\tSeverity.Error,\n\t\t\t\t\tnls.localize('extensionService.versionMismatchCrash', \"Extension host cannot start: version mismatch.\"),\n\t\t\t\t\t[{\n\t\t\t\t\t\tlabel: nls.localize('relaunch', \"Relaunch VS Code\"),\n\t\t\t\t\t\trun: () => {\n\t\t\t\t\t\t\tthis._instantiationService.invokeFunction((accessor) => {\n\t\t\t\t\t\t\t\tconst hostService = accessor.get(IHostService);\n\t\t\t\t\t\t\t\thostService.restart();\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t}]\n\t\t\t\t);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis._logExtensionHostCrash(extensionHost);\n\t\t\tthis._sendExtensionHostCrashTelemetry(code, signal, activatedExtensions);\n\n\t\t\tthis._localCrashTracker.registerCrash();\n\n\t\t\tif (this._localCrashTracker.shouldAutomaticallyRestart()) {\n\t\t\t\tthis._logService.info(`Automatically restarting the extension host.`);\n\t\t\t\tthis._notificationService.status(nls.localize('extensionService.autoRestart', \"The extension host terminated unexpectedly. Restarting...\"), { hideAfter: 5000 });\n\t\t\t\tthis.startExtensionHosts();\n\t\t\t} else {\n\t\t\t\tconst choices: IPromptChoice[] = [];\n\t\t\t\tif (this._environmentService.isBuilt) {\n\t\t\t\t\tchoices.push({\n\t\t\t\t\t\tlabel: nls.localize('startBisect', \"Start Extension Bisect\"),\n\t\t\t\t\t\trun: () => {\n\t\t\t\t\t\t\tthis._instantiationService.invokeFunction(accessor => {\n\t\t\t\t\t\t\t\tconst commandService = accessor.get(ICommandService);\n\t\t\t\t\t\t\t\tcommandService.executeCommand('extension.bisect.start');\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\tchoices.push({\n\t\t\t\t\t\tlabel: nls.localize('devTools', \"Open Developer Tools\"),\n\t\t\t\t\t\trun: () => this._nativeHostService.openDevTools()\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\tchoices.push({\n\t\t\t\t\tlabel: nls.localize('restart', \"Restart Extension Host\"),\n\t\t\t\t\trun: () => this.startExtensionHosts()\n\t\t\t\t});\n\n\t\t\t\tif (this._environmentService.isBuilt) {\n\t\t\t\t\tchoices.push({\n\t\t\t\t\t\tlabel: nls.localize('learnMore', \"Learn More\"),\n\t\t\t\t\t\trun: () => {\n\t\t\t\t\t\t\tthis._instantiationService.invokeFunction(accessor => {\n\t\t\t\t\t\t\t\tconst openerService = accessor.get(IOpenerService);\n\t\t\t\t\t\t\t\topenerService.open('https://aka.ms/vscode-extension-bisect');\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\tthis._notificationService.prompt(Severity.Error, nls.localize('extensionService.crash', \"Extension host terminated unexpectedly 3 times within the last 5 minutes.\"), choices);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate _sendExtensionHostCrashTelemetry(code: number, signal: string | null, activatedExtensions: ExtensionIdentifier[]): void {\n\t\ttype ExtensionHostCrashClassification = {\n\t\t\towner: 'alexdima';\n\t\t\tcomment: 'The extension host has terminated unexpectedly';\n\t\t\tcode: { classification: 'SystemMetaData'; purpose: 'PerformanceAndHealth'; comment: 'The exit code of the extension host process.' };\n\t\t\tsignal: { classification: 'SystemMetaData'; purpose: 'PerformanceAndHealth'; comment: 'The signal that caused the extension host process to exit.' };\n\t\t\textensionIds: { classification: 'SystemMetaData'; purpose: 'PerformanceAndHealth'; comment: 'The list of loaded extensions.' };\n\t\t};\n\t\ttype ExtensionHostCrashEvent = {\n\t\t\tcode: number;\n\t\t\tsignal: string | null;\n\t\t\textensionIds: string[];\n\t\t};\n\t\tthis._telemetryService.publicLog2<ExtensionHostCrashEvent, ExtensionHostCrashClassification>('extensionHostCrash', {\n\t\t\tcode,\n\t\t\tsignal,\n\t\t\textensionIds: activatedExtensions.map(e => e.value)\n\t\t});\n\n\t\tfor (const extensionId of activatedExtensions) {\n\t\t\ttype ExtensionHostCrashExtensionClassification = {\n\t\t\t\towner: 'alexdima';\n\t\t\t\tcomment: 'The extension host has terminated unexpectedly';\n\t\t\t\tcode: { classification: 'SystemMetaData'; purpose: 'PerformanceAndHealth'; comment: 'The exit code of the extension host process.' };\n\t\t\t\tsignal: { classification: 'SystemMetaData'; purpose: 'PerformanceAndHealth'; comment: 'The signal that caused the extension host process to exit.' };\n\t\t\t\textensionId: { classification: 'SystemMetaData'; purpose: 'PerformanceAndHealth'; comment: 'The identifier of the extension.' };\n\t\t\t};\n\t\t\ttype ExtensionHostCrashExtensionEvent = {\n\t\t\t\tcode: number;\n\t\t\t\tsignal: string | null;\n\t\t\t\textensionId: string;\n\t\t\t};\n\t\t\tthis._telemetryService.publicLog2<ExtensionHostCrashExtensionEvent, ExtensionHostCrashExtensionClassification>('extensionHostCrashExtension', {\n\t\t\t\tcode,\n\t\t\t\tsignal,\n\t\t\t\textensionId: extensionId.value\n\t\t\t});\n\t\t}\n\t}\n\n\t// --- impl\n\n\tprotected async _resolveAuthority(remoteAuthority: string): Promise<ResolverResult> {\n\n\t\tconst authorityPlusIndex = remoteAuthority.indexOf('+');\n\t\tif (authorityPlusIndex === -1) {\n\t\t\t// This authority does not need to be resolved, simply parse the port number\n\t\t\tconst { host, port } = parseAuthorityWithPort(remoteAuthority);\n\t\t\treturn {\n\t\t\t\tauthority: {\n\t\t\t\t\tauthority: remoteAuthority,\n\t\t\t\t\tconnectTo: {\n\t\t\t\t\t\ttype: RemoteConnectionType.WebSocket,\n\t\t\t\t\t\thost,\n\t\t\t\t\t\tport\n\t\t\t\t\t},\n\t\t\t\t\tconnectionToken: undefined\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\n\t\treturn this._resolveAuthorityOnExtensionHosts(ExtensionHostKind.LocalProcess, remoteAuthority);\n\t}\n\n\tprivate async _getCanonicalURI(remoteAuthority: string, uri: URI): Promise<URI> {\n\n\t\tconst authorityPlusIndex = remoteAuthority.indexOf('+');\n\t\tif (authorityPlusIndex === -1) {\n\t\t\t// This authority does not use a resolver\n\t\t\treturn uri;\n\t\t}\n\n\t\tconst localProcessExtensionHosts = this._getExtensionHostManagers(ExtensionHostKind.LocalProcess);\n\t\tif (localProcessExtensionHosts.length === 0) {\n\t\t\t// no local process extension hosts\n\t\t\tthrow new Error(`Cannot resolve canonical URI`);\n\t\t}\n\n\t\tconst results = await Promise.all(localProcessExtensionHosts.map(extHost => extHost.getCanonicalURI(remoteAuthority, uri)));\n\n\t\tfor (const result of results) {\n\t\t\tif (result) {\n\t\t\t\treturn result;\n\t\t\t}\n\t\t}\n\n\t\t// we can only reach this if there was no resolver extension that can return the cannonical uri\n\t\tthrow new Error(`Cannot get canonical URI because no extension is installed to resolve ${getRemoteAuthorityPrefix(remoteAuthority)}`);\n\t}\n\n\tprotected async _resolveExtensions(): Promise<ResolvedExtensions> {\n\t\tthis._extensionScanner.startScanningExtensions();\n\n\t\tconst remoteAuthority = this._environmentService.remoteAuthority;\n\n\t\tlet remoteEnv: IRemoteAgentEnvironment | null = null;\n\t\tlet remoteExtensions: IExtensionDescription[] = [];\n\n\t\tif (remoteAuthority) {\n\n\t\t\tthis._remoteAuthorityResolverService._setCanonicalURIProvider(async (uri) => {\n\t\t\t\tif (uri.scheme !== Schemas.vscodeRemote || uri.authority !== remoteAuthority) {\n\t\t\t\t\t// The current remote authority resolver cannot give the canonical URI for this URI\n\t\t\t\t\treturn uri;\n\t\t\t\t}\n\t\t\t\tperformance.mark(`code/willGetCanonicalURI/${getRemoteAuthorityPrefix(remoteAuthority)}`);\n\t\t\t\tif (isCI) {\n\t\t\t\t\tthis._logService.info(`Invoking getCanonicalURI for authority ${getRemoteAuthorityPrefix(remoteAuthority)}...`);\n\t\t\t\t}\n\t\t\t\ttry {\n\t\t\t\t\treturn this._getCanonicalURI(remoteAuthority, uri);\n\t\t\t\t} finally {\n\t\t\t\t\tperformance.mark(`code/didGetCanonicalURI/${getRemoteAuthorityPrefix(remoteAuthority)}`);\n\t\t\t\t\tif (isCI) {\n\t\t\t\t\t\tthis._logService.info(`getCanonicalURI returned for authority ${getRemoteAuthorityPrefix(remoteAuthority)}.`);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tif (isCI) {\n\t\t\t\tthis._logService.info(`Starting to wait on IWorkspaceTrustManagementService.workspaceResolved...`);\n\t\t\t}\n\n\t\t\t// Now that the canonical URI provider has been registered, we need to wait for the trust state to be\n\t\t\t// calculated. The trust state will be used while resolving the authority, however the resolver can\n\t\t\t// override the trust state through the resolver result.\n\t\t\tawait this._workspaceTrustManagementService.workspaceResolved;\n\n\t\t\tif (isCI) {\n\t\t\t\tthis._logService.info(`Finished waiting on IWorkspaceTrustManagementService.workspaceResolved.`);\n\t\t\t}\n\n\t\t\tlet resolverResult: ResolverResult;\n\t\t\ttry {\n\t\t\t\tresolverResult = await this._resolveAuthorityInitial(remoteAuthority);\n\t\t\t} catch (err) {\n\t\t\t\tif (RemoteAuthorityResolverError.isNoResolverFound(err)) {\n\t\t\t\t\terr.isHandled = await this._handleNoResolverFound(remoteAuthority);\n\t\t\t\t} else {\n\t\t\t\t\tif (RemoteAuthorityResolverError.isHandled(err)) {\n\t\t\t\t\t\tconsole.log(`Error handled: Not showing a notification for the error`);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tthis._remoteAuthorityResolverService._setResolvedAuthorityError(remoteAuthority, err);\n\n\t\t\t\t// Proceed with the local extension host\n\t\t\t\treturn this._startLocalExtensionHost();\n\t\t\t}\n\n\t\t\t// set the resolved authority\n\t\t\tthis._remoteAuthorityResolverService._setResolvedAuthority(resolverResult.authority, resolverResult.options);\n\t\t\tthis._remoteExplorerService.setTunnelInformation(resolverResult.tunnelInformation);\n\n\t\t\t// monitor for breakage\n\t\t\tconst connection = this._remoteAgentService.getConnection();\n\t\t\tif (connection) {\n\t\t\t\tconnection.onDidStateChange(async (e) => {\n\t\t\t\t\tif (e.type === PersistentConnectionEventType.ConnectionLost) {\n\t\t\t\t\t\tthis._remoteAuthorityResolverService._clearResolvedAuthority(remoteAuthority);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\tconnection.onReconnecting(() => this._resolveAuthorityAgain());\n\t\t\t}\n\n\t\t\t// fetch the remote environment\n\t\t\t[remoteEnv, remoteExtensions] = await Promise.all([\n\t\t\t\tthis._remoteAgentService.getEnvironment(),\n\t\t\t\tthis._remoteExtensionsScannerService.scanExtensions()\n\t\t\t]);\n\n\t\t\tif (!remoteEnv) {\n\t\t\t\tthis._notificationService.notify({ severity: Severity.Error, message: nls.localize('getEnvironmentFailure', \"Could not fetch remote environment\") });\n\t\t\t\t// Proceed with the local extension host\n\t\t\t\treturn this._startLocalExtensionHost();\n\t\t\t}\n\n\t\t\tupdateProxyConfigurationsScope(remoteEnv.useHostProxy ? ConfigurationScope.APPLICATION : ConfigurationScope.MACHINE);\n\t\t} else {\n\n\t\t\tthis._remoteAuthorityResolverService._setCanonicalURIProvider(async (uri) => uri);\n\n\t\t}\n\n\t\treturn this._startLocalExtensionHost(remoteExtensions);\n\t}\n\n\tprivate async _startLocalExtensionHost(remoteExtensions: IExtensionDescription[] = []): Promise<ResolvedExtensions> {\n\t\t// Ensure that the workspace trust state has been fully initialized so\n\t\t// that the extension host can start with the correct set of extensions.\n\t\tawait this._workspaceTrustManagementService.workspaceTrustInitialized;\n\n\t\treturn new ResolvedExtensions(await this._scanAllLocalExtensions(), remoteExtensions, /*hasLocalProcess*/true, /*allowRemoteExtensionsInLocalWebWorker*/false);\n\t}\n\n\tprotected async _onExtensionHostExit(code: number): Promise<void> {\n\t\t// Dispose everything associated with the extension host\n\t\tawait this._doStopExtensionHosts();\n\n\t\t// Dispose the management connection to avoid reconnecting after the extension host exits\n\t\tconst connection = this._remoteAgentService.getConnection();\n\t\tconnection?.dispose();\n\n\t\tif (parseExtensionDevOptions(this._environmentService).isExtensionDevTestFromCli) {\n\t\t\t// When CLI testing make sure to exit with proper exit code\n\t\t\tif (isCI) {\n\t\t\t\tthis._logService.info(`Asking native host service to exit with code ${code}.`);\n\t\t\t}\n\t\t\tthis._nativeHostService.exit(code);\n\t\t} else {\n\t\t\t// Expected development extension termination: When the extension host goes down we also shutdown the window\n\t\t\tthis._nativeHostService.closeWindow();\n\t\t}\n\t}\n\n\tprivate async _handleNoResolverFound(remoteAuthority: string): Promise<boolean> {\n\t\tconst remoteName = getRemoteName(remoteAuthority);\n\t\tconst recommendation = this._productService.remoteExtensionTips?.[remoteName];\n\t\tif (!recommendation) {\n\t\t\treturn false;\n\t\t}\n\t\tconst sendTelemetry = (userReaction: 'install' | 'enable' | 'cancel') => {\n\t\t\t/* __GDPR__\n\t\t\t\"remoteExtensionRecommendations:popup\" : {\n\t\t\t\t\"owner\": \"sandy081\",\n\t\t\t\t\"userReaction\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\" },\n\t\t\t\t\"extensionId\": { \"classification\": \"PublicNonPersonalData\", \"purpose\": \"FeatureInsight\" }\n\t\t\t}\n\t\t\t*/\n\t\t\tthis._telemetryService.publicLog('remoteExtensionRecommendations:popup', { userReaction, extensionId: resolverExtensionId });\n\t\t};\n\n\t\tconst resolverExtensionId = recommendation.extensionId;\n\t\tconst allExtensions = await this._scanAllLocalExtensions();\n\t\tconst extension = allExtensions.filter(e => e.identifier.value === resolverExtensionId)[0];\n\t\tif (extension) {\n\t\t\tif (!extensionIsEnabled(this._logService, this._extensionEnablementService, extension, false)) {\n\t\t\t\tconst message = nls.localize('enableResolver', \"Extension '{0}' is required to open the remote window.\\nOK to enable?\", recommendation.friendlyName);\n\t\t\t\tthis._notificationService.prompt(Severity.Info, message,\n\t\t\t\t\t[{\n\t\t\t\t\t\tlabel: nls.localize('enable', 'Enable and Reload'),\n\t\t\t\t\t\trun: async () => {\n\t\t\t\t\t\t\tsendTelemetry('enable');\n\t\t\t\t\t\t\tawait this._extensionEnablementService.setEnablement([toExtension(extension)], EnablementState.EnabledGlobally);\n\t\t\t\t\t\t\tawait this._hostService.reload();\n\t\t\t\t\t\t}\n\t\t\t\t\t}],\n\t\t\t\t\t{\n\t\t\t\t\t\tsticky: true,\n\t\t\t\t\t\tpriority: NotificationPriority.URGENT\n\t\t\t\t\t}\n\t\t\t\t);\n\t\t\t}\n\t\t} else {\n\t\t\t// Install the Extension and reload the window to handle.\n\t\t\tconst message = nls.localize('installResolver', \"Extension '{0}' is required to open the remote window.\\nDo you want to install the extension?\", recommendation.friendlyName);\n\t\t\tthis._notificationService.prompt(Severity.Info, message,\n\t\t\t\t[{\n\t\t\t\t\tlabel: nls.localize('install', 'Install and Reload'),\n\t\t\t\t\trun: async () => {\n\t\t\t\t\t\tsendTelemetry('install');\n\t\t\t\t\t\tconst [galleryExtension] = await this._extensionGalleryService.getExtensions([{ id: resolverExtensionId }], CancellationToken.None);\n\t\t\t\t\t\tif (galleryExtension) {\n\t\t\t\t\t\t\tawait this._extensionManagementService.installFromGallery(galleryExtension);\n\t\t\t\t\t\t\tawait this._hostService.reload();\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tthis._notificationService.error(nls.localize('resolverExtensionNotFound', \"`{0}` not found on marketplace\"));\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\t\t\t\t}],\n\t\t\t\t{\n\t\t\t\t\tsticky: true,\n\t\t\t\t\tpriority: NotificationPriority.URGENT,\n\t\t\t\t\tonCancel: () => sendTelemetry('cancel')\n\t\t\t\t}\n\t\t\t);\n\n\t\t}\n\t\treturn true;\n\t}\n}\n\nclass NativeExtensionHostFactory implements IExtensionHostFactory {\n\n\tprivate readonly _webWorkerExtHostEnablement: LocalWebWorkerExtHostEnablement;\n\n\tconstructor(\n\t\tprivate readonly _extensionsProposedApi: ExtensionsProposedApi,\n\t\tprivate readonly _extensionScanner: CachedExtensionScanner,\n\t\tprivate readonly _getExtensionRegistrySnapshotWhenReady: () => Promise<ExtensionDescriptionRegistrySnapshot>,\n\t\t@IInstantiationService private readonly _instantiationService: IInstantiationService,\n\t\t@IWorkbenchEnvironmentService environmentService: IWorkbenchEnvironmentService,\n\t\t@IWorkbenchExtensionEnablementService private readonly _extensionEnablementService: IWorkbenchExtensionEnablementService,\n\t\t@IConfigurationService configurationService: IConfigurationService,\n\t\t@IRemoteAgentService private readonly _remoteAgentService: IRemoteAgentService,\n\t\t@IRemoteAuthorityResolverService private readonly _remoteAuthorityResolverService: IRemoteAuthorityResolverService,\n\t\t@ILogService private readonly _logService: ILogService,\n\t) {\n\t\tthis._webWorkerExtHostEnablement = determineLocalWebWorkerExtHostEnablement(environmentService, configurationService);\n\t}\n\n\tpublic createExtensionHost(runningLocations: ExtensionRunningLocationTracker, runningLocation: ExtensionRunningLocation, isInitialStart: boolean): IExtensionHost | null {\n\t\tswitch (runningLocation.kind) {\n\t\t\tcase ExtensionHostKind.LocalProcess: {\n\t\t\t\tconst startup = (\n\t\t\t\t\tisInitialStart\n\t\t\t\t\t\t? ExtensionHostStartup.EagerManualStart\n\t\t\t\t\t\t: ExtensionHostStartup.EagerAutoStart\n\t\t\t\t);\n\t\t\t\treturn this._instantiationService.createInstance(NativeLocalProcessExtensionHost, runningLocation, startup, this._createLocalProcessExtensionHostDataProvider(runningLocations, isInitialStart, runningLocation));\n\t\t\t}\n\t\t\tcase ExtensionHostKind.LocalWebWorker: {\n\t\t\t\tif (this._webWorkerExtHostEnablement !== LocalWebWorkerExtHostEnablement.Disabled) {\n\t\t\t\t\tconst startup = (\n\t\t\t\t\t\tisInitialStart\n\t\t\t\t\t\t\t? (this._webWorkerExtHostEnablement === LocalWebWorkerExtHostEnablement.Lazy ? ExtensionHostStartup.Lazy : ExtensionHostStartup.EagerManualStart)\n\t\t\t\t\t\t\t: ExtensionHostStartup.EagerAutoStart\n\t\t\t\t\t);\n\t\t\t\t\treturn this._instantiationService.createInstance(WebWorkerExtensionHost, runningLocation, startup, this._createWebWorkerExtensionHostDataProvider(runningLocations, runningLocation));\n\t\t\t\t}\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\tcase ExtensionHostKind.Remote: {\n\t\t\t\tconst remoteAgentConnection = this._remoteAgentService.getConnection();\n\t\t\t\tif (remoteAgentConnection) {\n\t\t\t\t\treturn this._instantiationService.createInstance(RemoteExtensionHost, runningLocation, this._createRemoteExtensionHostDataProvider(runningLocations, remoteAgentConnection.remoteAuthority));\n\t\t\t\t}\n\t\t\t\treturn null;\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate _createLocalProcessExtensionHostDataProvider(runningLocations: ExtensionRunningLocationTracker, isInitialStart: boolean, desiredRunningLocation: LocalProcessRunningLocation): ILocalProcessExtensionHostDataProvider {\n\t\treturn {\n\t\t\tgetInitData: async (): Promise<ILocalProcessExtensionHostInitData> => {\n\t\t\t\tif (isInitialStart) {\n\t\t\t\t\t// Here we load even extensions that would be disabled by workspace trust\n\t\t\t\t\tconst scannedExtensions = await this._extensionScanner.scannedExtensions;\n\t\t\t\t\tif (isCI) {\n\t\t\t\t\t\tthis._logService.info(`NativeExtensionHostFactory._createLocalProcessExtensionHostDataProvider.scannedExtensions: ${scannedExtensions.map(ext => ext.identifier.value).join(',')}`);\n\t\t\t\t\t}\n\n\t\t\t\t\tconst localExtensions = checkEnabledAndProposedAPI(this._logService, this._extensionEnablementService, this._extensionsProposedApi, scannedExtensions, /* ignore workspace trust */true);\n\t\t\t\t\tif (isCI) {\n\t\t\t\t\t\tthis._logService.info(`NativeExtensionHostFactory._createLocalProcessExtensionHostDataProvider.localExtensions: ${localExtensions.map(ext => ext.identifier.value).join(',')}`);\n\t\t\t\t\t}\n\n\t\t\t\t\tconst runningLocation = runningLocations.computeRunningLocation(localExtensions, [], false);\n\t\t\t\t\tconst myExtensions = filterExtensionDescriptions(localExtensions, runningLocation, extRunningLocation => desiredRunningLocation.equals(extRunningLocation));\n\t\t\t\t\tconst extensions = new ExtensionHostExtensions(0, localExtensions, myExtensions.map(extension => extension.identifier));\n\t\t\t\t\tif (isCI) {\n\t\t\t\t\t\tthis._logService.info(`NativeExtensionHostFactory._createLocalProcessExtensionHostDataProvider.myExtensions: ${myExtensions.map(ext => ext.identifier.value).join(',')}`);\n\t\t\t\t\t}\n\t\t\t\t\treturn { extensions };\n\t\t\t\t} else {\n\t\t\t\t\t// restart case\n\t\t\t\t\tconst snapshot = await this._getExtensionRegistrySnapshotWhenReady();\n\t\t\t\t\tconst myExtensions = runningLocations.filterByRunningLocation(snapshot.extensions, desiredRunningLocation);\n\t\t\t\t\tconst extensions = new ExtensionHostExtensions(snapshot.versionId, snapshot.extensions, myExtensions.map(extension => extension.identifier));\n\t\t\t\t\treturn { extensions };\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t}\n\n\tprivate _createWebWorkerExtensionHostDataProvider(runningLocations: ExtensionRunningLocationTracker, desiredRunningLocation: LocalWebWorkerRunningLocation): IWebWorkerExtensionHostDataProvider {\n\t\treturn {\n\t\t\tgetInitData: async (): Promise<IWebWorkerExtensionHostInitData> => {\n\t\t\t\tconst snapshot = await this._getExtensionRegistrySnapshotWhenReady();\n\t\t\t\tconst myExtensions = runningLocations.filterByRunningLocation(snapshot.extensions, desiredRunningLocation);\n\t\t\t\tconst extensions = new ExtensionHostExtensions(snapshot.versionId, snapshot.extensions, myExtensions.map(extension => extension.identifier));\n\t\t\t\treturn { extensions };\n\t\t\t}\n\t\t};\n\t}\n\n\tprivate _createRemoteExtensionHostDataProvider(runningLocations: ExtensionRunningLocationTracker, remoteAuthority: string): IRemoteExtensionHostDataProvider {\n\t\treturn {\n\t\t\tremoteAuthority: remoteAuthority,\n\t\t\tgetInitData: async (): Promise<IRemoteExtensionHostInitData> => {\n\t\t\t\tconst snapshot = await this._getExtensionRegistrySnapshotWhenReady();\n\n\t\t\t\tconst remoteEnv = await this._remoteAgentService.getEnvironment();\n\t\t\t\tif (!remoteEnv) {\n\t\t\t\t\tthrow new Error('Cannot provide init data for remote extension host!');\n\t\t\t\t}\n\n\t\t\t\tconst myExtensions = runningLocations.filterByExtensionHostKind(snapshot.extensions, ExtensionHostKind.Remote);\n\t\t\t\tconst extensions = new ExtensionHostExtensions(snapshot.versionId, snapshot.extensions, myExtensions.map(extension => extension.identifier));\n\n\t\t\t\treturn {\n\t\t\t\t\tconnectionData: this._remoteAuthorityResolverService.getConnectionData(remoteAuthority),\n\t\t\t\t\tpid: remoteEnv.pid,\n\t\t\t\t\tappRoot: remoteEnv.appRoot,\n\t\t\t\t\textensionHostLogsPath: remoteEnv.extensionHostLogsPath,\n\t\t\t\t\tglobalStorageHome: remoteEnv.globalStorageHome,\n\t\t\t\t\tworkspaceStorageHome: remoteEnv.workspaceStorageHome,\n\t\t\t\t\textensions,\n\t\t\t\t};\n\t\t\t}\n\t\t};\n\t}\n}\n\nfunction determineLocalWebWorkerExtHostEnablement(environmentService: IWorkbenchEnvironmentService, configurationService: IConfigurationService): LocalWebWorkerExtHostEnablement {\n\tif (environmentService.isExtensionDevelopment && environmentService.extensionDevelopmentKind?.some(k => k === 'web')) {\n\t\treturn LocalWebWorkerExtHostEnablement.Eager;\n\t} else {\n\t\tconst config = configurationService.getValue<WebWorkerExtHostConfigValue>(webWorkerExtHostConfig);\n\t\tif (config === true) {\n\t\t\treturn LocalWebWorkerExtHostEnablement.Eager;\n\t\t} else if (config === 'auto') {\n\t\t\treturn LocalWebWorkerExtHostEnablement.Lazy;\n\t\t} else {\n\t\t\treturn LocalWebWorkerExtHostEnablement.Disabled;\n\t\t}\n\t}\n}\n\nconst enum LocalWebWorkerExtHostEnablement {\n\tDisabled = 0,\n\tEager = 1,\n\tLazy = 2\n}\n\nexport class NativeExtensionHostKindPicker implements IExtensionHostKindPicker {\n\n\tprivate readonly _hasRemoteExtHost: boolean;\n\tprivate readonly _hasWebWorkerExtHost: boolean;\n\n\tconstructor(\n\t\t@IWorkbenchEnvironmentService environmentService: IWorkbenchEnvironmentService,\n\t\t@IConfigurationService configurationService: IConfigurationService,\n\t\t@ILogService private readonly _logService: ILogService,\n\t) {\n\t\tthis._hasRemoteExtHost = Boolean(environmentService.remoteAuthority);\n\t\tconst webWorkerExtHostEnablement = determineLocalWebWorkerExtHostEnablement(environmentService, configurationService);\n\t\tthis._hasWebWorkerExtHost = (webWorkerExtHostEnablement !== LocalWebWorkerExtHostEnablement.Disabled);\n\t}\n\n\tpublic pickExtensionHostKind(extensionId: ExtensionIdentifier, extensionKinds: ExtensionKind[], isInstalledLocally: boolean, isInstalledRemotely: boolean, preference: ExtensionRunningPreference): ExtensionHostKind | null {\n\t\tconst result = NativeExtensionHostKindPicker.pickExtensionHostKind(extensionKinds, isInstalledLocally, isInstalledRemotely, preference, this._hasRemoteExtHost, this._hasWebWorkerExtHost);\n\t\tthis._logService.trace(`pickRunningLocation for ${extensionId.value}, extension kinds: [${extensionKinds.join(', ')}], isInstalledLocally: ${isInstalledLocally}, isInstalledRemotely: ${isInstalledRemotely}, preference: ${extensionRunningPreferenceToString(preference)} => ${extensionHostKindToString(result)}`);\n\t\treturn result;\n\t}\n\n\tpublic static pickExtensionHostKind(extensionKinds: ExtensionKind[], isInstalledLocally: boolean, isInstalledRemotely: boolean, preference: ExtensionRunningPreference, hasRemoteExtHost: boolean, hasWebWorkerExtHost: boolean): ExtensionHostKind | null {\n\t\tconst result: ExtensionHostKind[] = [];\n\t\tfor (const extensionKind of extensionKinds) {\n\t\t\tif (extensionKind === 'ui' && isInstalledLocally) {\n\t\t\t\t// ui extensions run locally if possible\n\t\t\t\tif (preference === ExtensionRunningPreference.None || preference === ExtensionRunningPreference.Local) {\n\t\t\t\t\treturn ExtensionHostKind.LocalProcess;\n\t\t\t\t} else {\n\t\t\t\t\tresult.push(ExtensionHostKind.LocalProcess);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (extensionKind === 'workspace' && isInstalledRemotely) {\n\t\t\t\t// workspace extensions run remotely if possible\n\t\t\t\tif (preference === ExtensionRunningPreference.None || preference === ExtensionRunningPreference.Remote) {\n\t\t\t\t\treturn ExtensionHostKind.Remote;\n\t\t\t\t} else {\n\t\t\t\t\tresult.push(ExtensionHostKind.Remote);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (extensionKind === 'workspace' && !hasRemoteExtHost) {\n\t\t\t\t// workspace extensions also run locally if there is no remote\n\t\t\t\tif (preference === ExtensionRunningPreference.None || preference === ExtensionRunningPreference.Local) {\n\t\t\t\t\treturn ExtensionHostKind.LocalProcess;\n\t\t\t\t} else {\n\t\t\t\t\tresult.push(ExtensionHostKind.LocalProcess);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (extensionKind === 'web' && isInstalledLocally && hasWebWorkerExtHost) {\n\t\t\t\t// web worker extensions run in the local web worker if possible\n\t\t\t\tif (preference === ExtensionRunningPreference.None || preference === ExtensionRunningPreference.Local) {\n\t\t\t\t\treturn ExtensionHostKind.LocalWebWorker;\n\t\t\t\t} else {\n\t\t\t\t\tresult.push(ExtensionHostKind.LocalWebWorker);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn (result.length > 0 ? result[0] : null);\n\t}\n}\n\nclass RestartExtensionHostAction extends Action2 {\n\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: 'workbench.action.restartExtensionHost',\n\t\t\ttitle: nls.localize2('restartExtensionHost', \"Restart Extension Host\"),\n\t\t\tcategory: Categories.Developer,\n\t\t\tf1: true\n\t\t});\n\t}\n\n\tasync run(accessor: ServicesAccessor): Promise<void> {\n\t\tconst extensionService = accessor.get(IExtensionService);\n\n\t\tconst stopped = await extensionService.stopExtensionHosts(nls.localize('restartExtensionHost.reason', \"Restarting extension host on explicit request.\"));\n\t\tif (stopped) {\n\t\t\textensionService.startExtensionHosts();\n\t\t}\n\t}\n}\n\nregisterAction2(RestartExtensionHostAction);\n\nregisterSingleton(IExtensionService, NativeExtensionService, InstantiationType.Eager);\n"],
  "mappings": "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",
  "names": ["LocalWebWorkerExtHostEnablement"]
}
