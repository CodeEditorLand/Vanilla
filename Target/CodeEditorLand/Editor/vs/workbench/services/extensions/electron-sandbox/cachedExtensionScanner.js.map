{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/extensions/electron-sandbox/cachedExtensionScanner.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as platform from '../../../../base/common/platform.js';\nimport { IExtensionDescription, IExtension } from '../../../../platform/extensions/common/extensions.js';\nimport { dedupExtensions } from '../common/extensionsUtil.js';\nimport { IExtensionsScannerService, IScannedExtension, toExtensionDescription as toExtensionDescriptionFromScannedExtension } from '../../../../platform/extensionManagement/common/extensionsScannerService.js';\nimport { ILogService } from '../../../../platform/log/common/log.js';\nimport Severity from '../../../../base/common/severity.js';\nimport { localize } from '../../../../nls.js';\nimport { INotificationService } from '../../../../platform/notification/common/notification.js';\nimport { IHostService } from '../../host/browser/host.js';\nimport { timeout } from '../../../../base/common/async.js';\nimport { IUserDataProfileService } from '../../userDataProfile/common/userDataProfile.js';\nimport { getErrorMessage } from '../../../../base/common/errors.js';\nimport { IWorkbenchExtensionManagementService } from '../../extensionManagement/common/extensionManagement.js';\nimport { toExtensionDescription } from '../common/extensions.js';\nimport { IWorkbenchEnvironmentService } from '../../environment/common/environmentService.js';\n\nexport class CachedExtensionScanner {\n\n\tpublic readonly scannedExtensions: Promise<IExtensionDescription[]>;\n\tprivate _scannedExtensionsResolve!: (result: IExtensionDescription[]) => void;\n\tprivate _scannedExtensionsReject!: (err: any) => void;\n\n\tconstructor(\n\t\t@INotificationService private readonly _notificationService: INotificationService,\n\t\t@IHostService private readonly _hostService: IHostService,\n\t\t@IExtensionsScannerService private readonly _extensionsScannerService: IExtensionsScannerService,\n\t\t@IUserDataProfileService private readonly _userDataProfileService: IUserDataProfileService,\n\t\t@IWorkbenchExtensionManagementService private readonly _extensionManagementService: IWorkbenchExtensionManagementService,\n\t\t@IWorkbenchEnvironmentService private readonly _environmentService: IWorkbenchEnvironmentService,\n\t\t@ILogService private readonly _logService: ILogService,\n\t) {\n\t\tthis.scannedExtensions = new Promise<IExtensionDescription[]>((resolve, reject) => {\n\t\t\tthis._scannedExtensionsResolve = resolve;\n\t\t\tthis._scannedExtensionsReject = reject;\n\t\t});\n\t}\n\n\tpublic async startScanningExtensions(): Promise<void> {\n\t\ttry {\n\t\t\tconst extensions = await this._scanInstalledExtensions();\n\t\t\tthis._scannedExtensionsResolve(extensions);\n\t\t} catch (err) {\n\t\t\tthis._scannedExtensionsReject(err);\n\t\t}\n\t}\n\n\tprivate async _scanInstalledExtensions(): Promise<IExtensionDescription[]> {\n\t\ttry {\n\t\t\tconst language = platform.language;\n\t\t\tconst result = await Promise.allSettled([\n\t\t\t\tthis._extensionsScannerService.scanSystemExtensions({ language, useCache: true, checkControlFile: true }),\n\t\t\t\tthis._extensionsScannerService.scanUserExtensions({ language, profileLocation: this._userDataProfileService.currentProfile.extensionsResource, useCache: true }),\n\t\t\t\tthis._environmentService.remoteAuthority ? [] : this._extensionManagementService.getInstalledWorkspaceExtensions(false)\n\t\t\t]);\n\n\t\t\tlet scannedSystemExtensions: IScannedExtension[] = [],\n\t\t\t\tscannedUserExtensions: IScannedExtension[] = [],\n\t\t\t\tworkspaceExtensions: IExtension[] = [],\n\t\t\t\tscannedDevelopedExtensions: IScannedExtension[] = [],\n\t\t\t\thasErrors = false;\n\n\t\t\tif (result[0].status === 'fulfilled') {\n\t\t\t\tscannedSystemExtensions = result[0].value;\n\t\t\t} else {\n\t\t\t\thasErrors = true;\n\t\t\t\tthis._logService.error(`Error scanning system extensions:`, getErrorMessage(result[0].reason));\n\t\t\t}\n\n\t\t\tif (result[1].status === 'fulfilled') {\n\t\t\t\tscannedUserExtensions = result[1].value;\n\t\t\t} else {\n\t\t\t\thasErrors = true;\n\t\t\t\tthis._logService.error(`Error scanning user extensions:`, getErrorMessage(result[1].reason));\n\t\t\t}\n\n\t\t\tif (result[2].status === 'fulfilled') {\n\t\t\t\tworkspaceExtensions = result[2].value;\n\t\t\t} else {\n\t\t\t\thasErrors = true;\n\t\t\t\tthis._logService.error(`Error scanning workspace extensions:`, getErrorMessage(result[2].reason));\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tscannedDevelopedExtensions = await this._extensionsScannerService.scanExtensionsUnderDevelopment({ language }, [...scannedSystemExtensions, ...scannedUserExtensions]);\n\t\t\t} catch (error) {\n\t\t\t\tthis._logService.error(error);\n\t\t\t}\n\n\t\t\tconst system = scannedSystemExtensions.map(e => toExtensionDescriptionFromScannedExtension(e, false));\n\t\t\tconst user = scannedUserExtensions.map(e => toExtensionDescriptionFromScannedExtension(e, false));\n\t\t\tconst workspace = workspaceExtensions.map(e => toExtensionDescription(e, false));\n\t\t\tconst development = scannedDevelopedExtensions.map(e => toExtensionDescriptionFromScannedExtension(e, true));\n\t\t\tconst r = dedupExtensions(system, user, workspace, development, this._logService);\n\n\t\t\tif (!hasErrors) {\n\t\t\t\tconst disposable = this._extensionsScannerService.onDidChangeCache(() => {\n\t\t\t\t\tdisposable.dispose();\n\t\t\t\t\tthis._notificationService.prompt(\n\t\t\t\t\t\tSeverity.Error,\n\t\t\t\t\t\tlocalize('extensionCache.invalid', \"Extensions have been modified on disk. Please reload the window.\"),\n\t\t\t\t\t\t[{\n\t\t\t\t\t\t\tlabel: localize('reloadWindow', \"Reload Window\"),\n\t\t\t\t\t\t\trun: () => this._hostService.reload()\n\t\t\t\t\t\t}]\n\t\t\t\t\t);\n\t\t\t\t});\n\t\t\t\ttimeout(5000).then(() => disposable.dispose());\n\t\t\t}\n\n\t\t\treturn r;\n\t\t} catch (err) {\n\t\t\tthis._logService.error(`Error scanning installed extensions:`);\n\t\t\tthis._logService.error(err);\n\t\t\treturn [];\n\t\t}\n\t}\n\n}\n"],
  "mappings": "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",
  "names": []
}
