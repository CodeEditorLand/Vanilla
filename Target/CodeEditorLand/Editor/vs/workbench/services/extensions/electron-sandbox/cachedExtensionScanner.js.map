{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/extensions/electron-sandbox/cachedExtensionScanner.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { timeout } from \"../../../../base/common/async.js\";\nimport { getErrorMessage } from \"../../../../base/common/errors.js\";\nimport * as platform from \"../../../../base/common/platform.js\";\nimport Severity from \"../../../../base/common/severity.js\";\nimport { localize } from \"../../../../nls.js\";\nimport {\n\tIExtensionsScannerService,\n\ttype IScannedExtension,\n\ttoExtensionDescription as toExtensionDescriptionFromScannedExtension,\n} from \"../../../../platform/extensionManagement/common/extensionsScannerService.js\";\nimport type {\n\tIExtension,\n\tIExtensionDescription,\n} from \"../../../../platform/extensions/common/extensions.js\";\nimport { ILogService } from \"../../../../platform/log/common/log.js\";\nimport { INotificationService } from \"../../../../platform/notification/common/notification.js\";\nimport { IWorkbenchEnvironmentService } from \"../../environment/common/environmentService.js\";\nimport { IWorkbenchExtensionManagementService } from \"../../extensionManagement/common/extensionManagement.js\";\nimport { IHostService } from \"../../host/browser/host.js\";\nimport { IUserDataProfileService } from \"../../userDataProfile/common/userDataProfile.js\";\nimport { toExtensionDescription } from \"../common/extensions.js\";\nimport { dedupExtensions } from \"../common/extensionsUtil.js\";\n\nexport class CachedExtensionScanner {\n\tpublic readonly scannedExtensions: Promise<IExtensionDescription[]>;\n\tprivate _scannedExtensionsResolve!: (\n\t\tresult: IExtensionDescription[],\n\t) => void;\n\tprivate _scannedExtensionsReject!: (err: any) => void;\n\n\tconstructor(\n\t\t@INotificationService\n\t\tprivate readonly _notificationService: INotificationService,\n\t\t@IHostService private readonly _hostService: IHostService,\n\t\t@IExtensionsScannerService\n\t\tprivate readonly _extensionsScannerService: IExtensionsScannerService,\n\t\t@IUserDataProfileService\n\t\tprivate readonly _userDataProfileService: IUserDataProfileService,\n\t\t@IWorkbenchExtensionManagementService\n\t\tprivate readonly _extensionManagementService: IWorkbenchExtensionManagementService,\n\t\t@IWorkbenchEnvironmentService\n\t\tprivate readonly _environmentService: IWorkbenchEnvironmentService,\n\t\t@ILogService private readonly _logService: ILogService,\n\t) {\n\t\tthis.scannedExtensions = new Promise<IExtensionDescription[]>(\n\t\t\t(resolve, reject) => {\n\t\t\t\tthis._scannedExtensionsResolve = resolve;\n\t\t\t\tthis._scannedExtensionsReject = reject;\n\t\t\t},\n\t\t);\n\t}\n\n\tpublic async startScanningExtensions(): Promise<void> {\n\t\ttry {\n\t\t\tconst extensions = await this._scanInstalledExtensions();\n\t\t\tthis._scannedExtensionsResolve(extensions);\n\t\t} catch (err) {\n\t\t\tthis._scannedExtensionsReject(err);\n\t\t}\n\t}\n\n\tprivate async _scanInstalledExtensions(): Promise<IExtensionDescription[]> {\n\t\ttry {\n\t\t\tconst language = platform.language;\n\t\t\tconst result = await Promise.allSettled([\n\t\t\t\tthis._extensionsScannerService.scanSystemExtensions({\n\t\t\t\t\tlanguage,\n\t\t\t\t\tuseCache: true,\n\t\t\t\t\tcheckControlFile: true,\n\t\t\t\t}),\n\t\t\t\tthis._extensionsScannerService.scanUserExtensions({\n\t\t\t\t\tlanguage,\n\t\t\t\t\tprofileLocation:\n\t\t\t\t\t\tthis._userDataProfileService.currentProfile\n\t\t\t\t\t\t\t.extensionsResource,\n\t\t\t\t\tuseCache: true,\n\t\t\t\t}),\n\t\t\t\tthis._environmentService.remoteAuthority\n\t\t\t\t\t? []\n\t\t\t\t\t: this._extensionManagementService.getInstalledWorkspaceExtensions(\n\t\t\t\t\t\t\tfalse,\n\t\t\t\t\t\t),\n\t\t\t]);\n\n\t\t\tlet scannedSystemExtensions: IScannedExtension[] = [],\n\t\t\t\tscannedUserExtensions: IScannedExtension[] = [],\n\t\t\t\tworkspaceExtensions: IExtension[] = [],\n\t\t\t\tscannedDevelopedExtensions: IScannedExtension[] = [],\n\t\t\t\thasErrors = false;\n\n\t\t\tif (result[0].status === \"fulfilled\") {\n\t\t\t\tscannedSystemExtensions = result[0].value;\n\t\t\t} else {\n\t\t\t\thasErrors = true;\n\t\t\t\tthis._logService.error(\n\t\t\t\t\t`Error scanning system extensions:`,\n\t\t\t\t\tgetErrorMessage(result[0].reason),\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tif (result[1].status === \"fulfilled\") {\n\t\t\t\tscannedUserExtensions = result[1].value;\n\t\t\t} else {\n\t\t\t\thasErrors = true;\n\t\t\t\tthis._logService.error(\n\t\t\t\t\t`Error scanning user extensions:`,\n\t\t\t\t\tgetErrorMessage(result[1].reason),\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tif (result[2].status === \"fulfilled\") {\n\t\t\t\tworkspaceExtensions = result[2].value;\n\t\t\t} else {\n\t\t\t\thasErrors = true;\n\t\t\t\tthis._logService.error(\n\t\t\t\t\t`Error scanning workspace extensions:`,\n\t\t\t\t\tgetErrorMessage(result[2].reason),\n\t\t\t\t);\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tscannedDevelopedExtensions =\n\t\t\t\t\tawait this._extensionsScannerService.scanExtensionsUnderDevelopment(\n\t\t\t\t\t\t{ language },\n\t\t\t\t\t\t[...scannedSystemExtensions, ...scannedUserExtensions],\n\t\t\t\t\t);\n\t\t\t} catch (error) {\n\t\t\t\tthis._logService.error(error);\n\t\t\t}\n\n\t\t\tconst system = scannedSystemExtensions.map((e) =>\n\t\t\t\ttoExtensionDescriptionFromScannedExtension(e, false),\n\t\t\t);\n\t\t\tconst user = scannedUserExtensions.map((e) =>\n\t\t\t\ttoExtensionDescriptionFromScannedExtension(e, false),\n\t\t\t);\n\t\t\tconst workspace = workspaceExtensions.map((e) =>\n\t\t\t\ttoExtensionDescription(e, false),\n\t\t\t);\n\t\t\tconst development = scannedDevelopedExtensions.map((e) =>\n\t\t\t\ttoExtensionDescriptionFromScannedExtension(e, true),\n\t\t\t);\n\t\t\tconst r = dedupExtensions(\n\t\t\t\tsystem,\n\t\t\t\tuser,\n\t\t\t\tworkspace,\n\t\t\t\tdevelopment,\n\t\t\t\tthis._logService,\n\t\t\t);\n\n\t\t\tif (!hasErrors) {\n\t\t\t\tconst disposable =\n\t\t\t\t\tthis._extensionsScannerService.onDidChangeCache(() => {\n\t\t\t\t\t\tdisposable.dispose();\n\t\t\t\t\t\tthis._notificationService.prompt(\n\t\t\t\t\t\t\tSeverity.Error,\n\t\t\t\t\t\t\tlocalize(\n\t\t\t\t\t\t\t\t\"extensionCache.invalid\",\n\t\t\t\t\t\t\t\t\"Extensions have been modified on disk. Please reload the window.\",\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tlabel: localize(\n\t\t\t\t\t\t\t\t\t\t\"reloadWindow\",\n\t\t\t\t\t\t\t\t\t\t\"Reload Window\",\n\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t\trun: () => this._hostService.reload(),\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t);\n\t\t\t\t\t});\n\t\t\t\ttimeout(5000).then(() => disposable.dispose());\n\t\t\t}\n\n\t\t\treturn r;\n\t\t} catch (err) {\n\t\t\tthis._logService.error(`Error scanning installed extensions:`);\n\t\t\tthis._logService.error(err);\n\t\t\treturn [];\n\t\t}\n\t}\n}\n"],
  "mappings": ";;;;;;;;;;;;AAKA,SAAS,eAAe;AACxB,SAAS,uBAAuB;AAChC,YAAY,cAAc;AAC1B,OAAO,cAAc;AACrB,SAAS,gBAAgB;AACzB;AAAA,EACC;AAAA,EAEA,0BAA0B;AAAA,OACpB;AAKP,SAAS,mBAAmB;AAC5B,SAAS,4BAA4B;AACrC,SAAS,oCAAoC;AAC7C,SAAS,4CAA4C;AACrD,SAAS,oBAAoB;AAC7B,SAAS,+BAA+B;AACxC,SAAS,8BAA8B;AACvC,SAAS,uBAAuB;AAEzB,IAAM,yBAAN,MAA6B;AAAA,EAOnC,YAEkB,sBACc,cAEd,2BAEA,yBAEA,6BAEA,qBACa,aAC7B;AAXgB;AACc;AAEd;AAEA;AAEA;AAEA;AACa;AAE9B,SAAK,oBAAoB,IAAI;AAAA,MAC5B,CAAC,SAAS,WAAW;AACpB,aAAK,4BAA4B;AACjC,aAAK,2BAA2B;AAAA,MACjC;AAAA,IACD;AAAA,EACD;AAAA,EAvDD,OA4BoC;AAAA;AAAA;AAAA,EACnB;AAAA,EACR;AAAA,EAGA;AAAA,EAwBR,MAAa,0BAAyC;AACrD,QAAI;AACH,YAAM,aAAa,MAAM,KAAK,yBAAyB;AACvD,WAAK,0BAA0B,UAAU;AAAA,IAC1C,SAAS,KAAK;AACb,WAAK,yBAAyB,GAAG;AAAA,IAClC;AAAA,EACD;AAAA,EAEA,MAAc,2BAA6D;AAC1E,QAAI;AACH,YAAM,WAAW,SAAS;AAC1B,YAAM,SAAS,MAAM,QAAQ,WAAW;AAAA,QACvC,KAAK,0BAA0B,qBAAqB;AAAA,UACnD;AAAA,UACA,UAAU;AAAA,UACV,kBAAkB;AAAA,QACnB,CAAC;AAAA,QACD,KAAK,0BAA0B,mBAAmB;AAAA,UACjD;AAAA,UACA,iBACC,KAAK,wBAAwB,eAC3B;AAAA,UACH,UAAU;AAAA,QACX,CAAC;AAAA,QACD,KAAK,oBAAoB,kBACtB,CAAC,IACD,KAAK,4BAA4B;AAAA,UACjC;AAAA,QACD;AAAA,MACH,CAAC;AAED,UAAI,0BAA+C,CAAC,GACnD,wBAA6C,CAAC,GAC9C,sBAAoC,CAAC,GACrC,6BAAkD,CAAC,GACnD,YAAY;AAEb,UAAI,OAAO,CAAC,EAAE,WAAW,aAAa;AACrC,kCAA0B,OAAO,CAAC,EAAE;AAAA,MACrC,OAAO;AACN,oBAAY;AACZ,aAAK,YAAY;AAAA,UAChB;AAAA,UACA,gBAAgB,OAAO,CAAC,EAAE,MAAM;AAAA,QACjC;AAAA,MACD;AAEA,UAAI,OAAO,CAAC,EAAE,WAAW,aAAa;AACrC,gCAAwB,OAAO,CAAC,EAAE;AAAA,MACnC,OAAO;AACN,oBAAY;AACZ,aAAK,YAAY;AAAA,UAChB;AAAA,UACA,gBAAgB,OAAO,CAAC,EAAE,MAAM;AAAA,QACjC;AAAA,MACD;AAEA,UAAI,OAAO,CAAC,EAAE,WAAW,aAAa;AACrC,8BAAsB,OAAO,CAAC,EAAE;AAAA,MACjC,OAAO;AACN,oBAAY;AACZ,aAAK,YAAY;AAAA,UAChB;AAAA,UACA,gBAAgB,OAAO,CAAC,EAAE,MAAM;AAAA,QACjC;AAAA,MACD;AAEA,UAAI;AACH,qCACC,MAAM,KAAK,0BAA0B;AAAA,UACpC,EAAE,SAAS;AAAA,UACX,CAAC,GAAG,yBAAyB,GAAG,qBAAqB;AAAA,QACtD;AAAA,MACF,SAAS,OAAO;AACf,aAAK,YAAY,MAAM,KAAK;AAAA,MAC7B;AAEA,YAAM,SAAS,wBAAwB;AAAA,QAAI,CAAC,MAC3C,2CAA2C,GAAG,KAAK;AAAA,MACpD;AACA,YAAM,OAAO,sBAAsB;AAAA,QAAI,CAAC,MACvC,2CAA2C,GAAG,KAAK;AAAA,MACpD;AACA,YAAM,YAAY,oBAAoB;AAAA,QAAI,CAAC,MAC1C,uBAAuB,GAAG,KAAK;AAAA,MAChC;AACA,YAAM,cAAc,2BAA2B;AAAA,QAAI,CAAC,MACnD,2CAA2C,GAAG,IAAI;AAAA,MACnD;AACA,YAAM,IAAI;AAAA,QACT;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA,KAAK;AAAA,MACN;AAEA,UAAI,CAAC,WAAW;AACf,cAAM,aACL,KAAK,0BAA0B,iBAAiB,MAAM;AACrD,qBAAW,QAAQ;AACnB,eAAK,qBAAqB;AAAA,YACzB,SAAS;AAAA,YACT;AAAA,cACC;AAAA,cACA;AAAA,YACD;AAAA,YACA;AAAA,cACC;AAAA,gBACC,OAAO;AAAA,kBACN;AAAA,kBACA;AAAA,gBACD;AAAA,gBACA,KAAK,6BAAM,KAAK,aAAa,OAAO,GAA/B;AAAA,cACN;AAAA,YACD;AAAA,UACD;AAAA,QACD,CAAC;AACF,gBAAQ,GAAI,EAAE,KAAK,MAAM,WAAW,QAAQ,CAAC;AAAA,MAC9C;AAEA,aAAO;AAAA,IACR,SAAS,KAAK;AACb,WAAK,YAAY,MAAM,sCAAsC;AAC7D,WAAK,YAAY,MAAM,GAAG;AAC1B,aAAO,CAAC;AAAA,IACT;AAAA,EACD;AACD;AA9Ja,yBAAN;AAAA,EAQJ;AAAA,EAEA;AAAA,EACA;AAAA,EAEA;AAAA,EAEA;AAAA,EAEA;AAAA,EAEA;AAAA,GAnBU;",
  "names": []
}
