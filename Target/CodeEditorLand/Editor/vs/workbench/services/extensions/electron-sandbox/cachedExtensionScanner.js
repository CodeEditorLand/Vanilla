var _=Object.defineProperty;var I=Object.getOwnPropertyDescriptor;var S=(c,e,n,r)=>{for(var s=r>1?void 0:r?I(e,n):e,t=c.length-1,a;t>=0;t--)(a=c[t])&&(s=(r?a(e,n,s):a(s))||s);return r&&s&&_(e,n,s),s},o=(c,e)=>(n,r)=>e(n,r,c);import{timeout as g}from"../../../../base/common/async.js";import{getErrorMessage as x}from"../../../../base/common/errors.js";import*as y from"../../../../base/common/platform.js";import D from"../../../../base/common/severity.js";import{localize as E}from"../../../../nls.js";import{IExtensionsScannerService as w,toExtensionDescription as d}from"../../../../platform/extensionManagement/common/extensionsScannerService.js";import{ILogService as P}from"../../../../platform/log/common/log.js";import{INotificationService as k}from"../../../../platform/notification/common/notification.js";import{IWorkbenchEnvironmentService as b}from"../../environment/common/environmentService.js";import{IWorkbenchExtensionManagementService as R}from"../../extensionManagement/common/extensionManagement.js";import{IHostService as W}from"../../host/browser/host.js";import{IUserDataProfileService as M}from"../../userDataProfile/common/userDataProfile.js";import{toExtensionDescription as U}from"../common/extensions.js";import{dedupExtensions as j}from"../common/extensionsUtil.js";let v=class{constructor(e,n,r,s,t,a,l){this._notificationService=e;this._hostService=n;this._extensionsScannerService=r;this._userDataProfileService=s;this._extensionManagementService=t;this._environmentService=a;this._logService=l;this.scannedExtensions=new Promise((m,p)=>{this._scannedExtensionsResolve=m,this._scannedExtensionsReject=p})}scannedExtensions;_scannedExtensionsResolve;_scannedExtensionsReject;async startScanningExtensions(){try{const e=await this._scanInstalledExtensions();this._scannedExtensionsResolve(e)}catch(e){this._scannedExtensionsReject(e)}}async _scanInstalledExtensions(){try{const e=y.language,n=await Promise.allSettled([this._extensionsScannerService.scanSystemExtensions({language:e,useCache:!0,checkControlFile:!0}),this._extensionsScannerService.scanUserExtensions({language:e,profileLocation:this._userDataProfileService.currentProfile.extensionsResource,useCache:!0}),this._environmentService.remoteAuthority?[]:this._extensionManagementService.getInstalledWorkspaceExtensions(!1)]);let r=[],s=[],t=[],a=[],l=!1;n[0].status==="fulfilled"?r=n[0].value:(l=!0,this._logService.error("Error scanning system extensions:",x(n[0].reason))),n[1].status==="fulfilled"?s=n[1].value:(l=!0,this._logService.error("Error scanning user extensions:",x(n[1].reason))),n[2].status==="fulfilled"?t=n[2].value:(l=!0,this._logService.error("Error scanning workspace extensions:",x(n[2].reason)));try{a=await this._extensionsScannerService.scanExtensionsUnderDevelopment({language:e},[...r,...s])}catch(i){this._logService.error(i)}const m=r.map(i=>d(i,!1)),p=s.map(i=>d(i,!1)),f=t.map(i=>U(i,!1)),h=a.map(i=>d(i,!0)),u=j(m,p,f,h,this._logService);if(!l){const i=this._extensionsScannerService.onDidChangeCache(()=>{i.dispose(),this._notificationService.prompt(D.Error,E("extensionCache.invalid","Extensions have been modified on disk. Please reload the window."),[{label:E("reloadWindow","Reload Window"),run:()=>this._hostService.reload()}])});g(5e3).then(()=>i.dispose())}return u}catch(e){return this._logService.error("Error scanning installed extensions:"),this._logService.error(e),[]}}};v=S([o(0,k),o(1,W),o(2,w),o(3,M),o(4,R),o(5,b),o(6,P)],v);export{v as CachedExtensionScanner};
