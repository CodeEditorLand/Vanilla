var C=Object.defineProperty;var O=Object.getOwnPropertyDescriptor;var P=(p,t,e,s)=>{for(var i=s>1?void 0:s?O(t,e):t,n=p.length-1,c;n>=0;n--)(c=p[n])&&(i=(s?c(t,e,i):c(i))||i);return s&&i&&C(t,e,i),i},a=(p,t)=>(e,s)=>t(e,s,p);import{timeout as I}from"../../../../../vs/base/common/async.js";import{VSBuffer as y}from"../../../../../vs/base/common/buffer.js";import{CancellationError as R}from"../../../../../vs/base/common/errors.js";import{Emitter as E,Event as h}from"../../../../../vs/base/common/event.js";import{DisposableStore as M,toDisposable as W}from"../../../../../vs/base/common/lifecycle.js";import*as L from"../../../../../vs/base/common/objects.js";import*as b from"../../../../../vs/base/common/platform.js";import{removeDangerousEnvVariables as N}from"../../../../../vs/base/common/processes.js";import{StopWatch as U}from"../../../../../vs/base/common/stopwatch.js";import{URI as A}from"../../../../../vs/base/common/uri.js";import{generateUuid as F}from"../../../../../vs/base/common/uuid.js";import"../../../../../vs/base/parts/ipc/common/ipc.js";import{BufferedEmitter as B}from"../../../../../vs/base/parts/ipc/common/ipc.net.js";import{acquirePort as $}from"../../../../../vs/base/parts/ipc/electron-sandbox/ipc.mp.js";import*as _ from"../../../../../vs/nls.js";import{IExtensionHostDebugService as q}from"../../../../../vs/platform/debug/common/extensionHostDebug.js";import{IExtensionHostStarter as z}from"../../../../../vs/platform/extensions/common/extensionHostStarter.js";import{ILabelService as V}from"../../../../../vs/platform/label/common/label.js";import{ILoggerService as j,ILogService as G}from"../../../../../vs/platform/log/common/log.js";import{INativeHostService as K}from"../../../../../vs/platform/native/common/native.js";import{INotificationService as Y,NotificationPriority as J,Severity as Q}from"../../../../../vs/platform/notification/common/notification.js";import{IProductService as X}from"../../../../../vs/platform/product/common/productService.js";import{ITelemetryService as Z}from"../../../../../vs/platform/telemetry/common/telemetry.js";import{isLoggingOnly as ee}from"../../../../../vs/platform/telemetry/common/telemetryUtils.js";import{IUserDataProfilesService as te}from"../../../../../vs/platform/userDataProfile/common/userDataProfile.js";import{isUntitledWorkspace as ie,IWorkspaceContextService as oe,WorkbenchState as se}from"../../../../../vs/platform/workspace/common/workspace.js";import{INativeWorkbenchEnvironmentService as ne}from"../../../../../vs/workbench/services/environment/electron-sandbox/environmentService.js";import{IShellEnvironmentService as re}from"../../../../../vs/workbench/services/environment/electron-sandbox/shellEnvironmentService.js";import{MessagePortExtHostConnection as ae,writeExtHostConnection as ce}from"../../../../../vs/workbench/services/extensions/common/extensionHostEnv.js";import{isMessageOfType as w,MessageType as k,NativeLogMarkers as T,UIKind as le}from"../../../../../vs/workbench/services/extensions/common/extensionHostProtocol.js";import"../../../../../vs/workbench/services/extensions/common/extensionRunningLocation.js";import{ExtensionHostStartup as ve}from"../../../../../vs/workbench/services/extensions/common/extensions.js";import{IHostService as de}from"../../../../../vs/workbench/services/host/browser/host.js";import{ILifecycleService as me}from"../../../../../vs/workbench/services/lifecycle/common/lifecycle.js";import{parseExtensionDevOptions as pe}from"../common/extensionDevOptions.js";class ue{constructor(t,e){this._extensionHostStarter=e;this._id=t}_id;get onStdout(){return this._extensionHostStarter.onDynamicStdout(this._id)}get onStderr(){return this._extensionHostStarter.onDynamicStderr(this._id)}get onMessage(){return this._extensionHostStarter.onDynamicMessage(this._id)}get onExit(){return this._extensionHostStarter.onDynamicExit(this._id)}start(t){return this._extensionHostStarter.start(this._id,t)}enableInspectPort(){return this._extensionHostStarter.enableInspectPort(this._id)}kill(){return this._extensionHostStarter.kill(this._id)}}let S=class{constructor(t,e,s,i,n,c,v,o,d,m,x,f,r,l,D,H,he,ge){this.runningLocation=t;this.startup=e;this._initDataProvider=s;this._contextService=i;this._notificationService=n;this._nativeHostService=c;this._lifecycleService=v;this._environmentService=o;this._userDataProfilesService=d;this._telemetryService=m;this._logService=x;this._loggerService=f;this._labelService=r;this._extensionHostDebugService=l;this._hostService=D;this._productService=H;this._shellEnvironmentService=he;this._extensionHostStarter=ge;const g=pe(this._environmentService);this._isExtensionDevHost=g.isExtensionDevHost,this._isExtensionDevDebug=g.isExtensionDevDebug,this._isExtensionDevDebugBrk=g.isExtensionDevDebugBrk,this._isExtensionDevTestFromCli=g.isExtensionDevTestFromCli,this._terminating=!1,this._inspectListener=null,this._extensionHostProcess=null,this._messageProtocol=null,this._toDispose.add(this._onExit),this._toDispose.add(this._lifecycleService.onWillShutdown(u=>this._onWillShutdown(u))),this._toDispose.add(this._extensionHostDebugService.onClose(u=>{this._isExtensionDevHost&&this._environmentService.debugExtensionHost.debugId===u.sessionId&&this._nativeHostService.closeWindow()})),this._toDispose.add(this._extensionHostDebugService.onReload(u=>{this._isExtensionDevHost&&this._environmentService.debugExtensionHost.debugId===u.sessionId&&this._hostService.reload()}))}pid=null;remoteAuthority=null;extensions=null;_onExit=new E;onExit=this._onExit.event;_onDidSetInspectPort=new E;_toDispose=new M;_isExtensionDevHost;_isExtensionDevDebug;_isExtensionDevDebugBrk;_isExtensionDevTestFromCli;_terminating;_inspectListener;_extensionHostProcess;_messageProtocol;dispose(){this._terminating||(this._terminating=!0,this._toDispose.dispose())}start(){if(this._terminating)throw new R;return this._messageProtocol||(this._messageProtocol=this._start()),this._messageProtocol}async _start(){const[t,e,s]=await Promise.all([this._extensionHostStarter.createExtensionHost(),this._tryFindDebugPort(),this._shellEnvironmentService.getShellEnv()]);this._extensionHostProcess=new ue(t.id,this._extensionHostStarter);const i=L.mixin(s,{VSCODE_AMD_ENTRYPOINT:"vs/workbench/api/node/extensionHostProcess",VSCODE_HANDLES_UNCAUGHT_ERRORS:!0});this._environmentService.debugExtensionHost.env&&L.mixin(i,this._environmentService.debugExtensionHost.env),N(i),this._isExtensionDevHost&&delete i.VSCODE_CODE_CACHE_PATH;const n={responseWindowId:this._nativeHostService.windowId,responseChannel:"vscode:startExtensionHostMessagePortResult",responseNonce:F(),env:i,detached:!!b.isWindows,execArgv:void 0,silent:!0},c="127.0.0.1";e!==0?n.execArgv=["--nolazy",(this._isExtensionDevDebugBrk?"--inspect-brk=":"--inspect=")+`${c}:${e}`]:n.execArgv=["--inspect-port=0"],this._environmentService.extensionTestsLocationURI&&n.execArgv.unshift("--expose-gc"),this._environmentService.args["prof-v8-extensions"]&&n.execArgv.unshift("--prof"),n.execArgv.unshift("--dns-result-order=ipv4first");const v=this._handleProcessOutputStream(this._extensionHostProcess.onStdout,this._toDispose),o=this._handleProcessOutputStream(this._extensionHostProcess.onStderr,this._toDispose),d=h.any(h.map(v.event,r=>({data:`%c${r}`,format:[""]})),h.map(o.event,r=>({data:`%c${r}`,format:["color: red"]}))),m=h.debounce(d,(r,l)=>r?{data:r.data+l.data,format:[...r.format,...l.format]}:{data:l.data,format:l.format},100);this._toDispose.add(m(r=>{const l=r.data&&r.data.match(/ws:\/\/([^\s]+):(\d+)\/[^\s]+/);if(l){const[,D,H]=l;!this._environmentService.isBuilt&&!this._isExtensionDevTestFromCli&&console.log(`%c[Extension Host] %cdebugger inspector at devtools://devtools/bundled/inspector.html?experiments=true&v8only=true&ws=${l[1]}`,"color: blue","color:"),this._inspectListener||(this._inspectListener={host:D,port:Number(H)},this._onDidSetInspectPort.fire())}else this._isExtensionDevTestFromCli||(console.group("Extension Host"),console.log(r.data,...r.format),console.groupEnd())})),this._toDispose.add(this._extensionHostProcess.onExit(({code:r,signal:l})=>this._onExtHostProcessExit(r,l))),e&&(this._isExtensionDevHost&&this._isExtensionDevDebug&&this._environmentService.debugExtensionHost.debugId&&this._extensionHostDebugService.attachSession(this._environmentService.debugExtensionHost.debugId,e),this._inspectListener={port:e,host:c},this._onDidSetInspectPort.fire());let x;(!this._environmentService.isBuilt&&!this._environmentService.remoteAuthority||this._isExtensionDevHost)&&(x=setTimeout(()=>{this._logService.error(`[LocalProcessExtensionHost]: Extension host did not start in 10 seconds (debugBrk: ${this._isExtensionDevDebugBrk})`);const r=this._isExtensionDevDebugBrk?_.localize("extensionHost.startupFailDebug","Extension host did not start in 10 seconds, it might be stopped on the first line and needs a debugger to continue."):_.localize("extensionHost.startupFail","Extension host did not start in 10 seconds, that might be a problem.");this._notificationService.prompt(Q.Warning,r,[{label:_.localize("reloadWindow","Reload Window"),run:()=>this._hostService.reload()}],{sticky:!0,priority:J.URGENT})},1e4));const f=await this._establishProtocol(this._extensionHostProcess,n);return await this._performHandshake(f),clearTimeout(x),f}async _tryFindDebugPort(){if(typeof this._environmentService.debugExtensionHost.port!="number")return 0;const t=this._environmentService.debugExtensionHost.port,e=await this._nativeHostService.findFreePort(t,10,5e3,2048);return this._isExtensionDevTestFromCli||(e?(e!==t&&console.warn(`%c[Extension Host] %cProvided debugging port ${t} is not free, using ${e} instead.`,"color: blue","color:"),this._isExtensionDevDebugBrk?console.warn(`%c[Extension Host] %cSTOPPED on first line for debugging on port ${e}`,"color: blue","color:"):console.info(`%c[Extension Host] %cdebugger listening on port ${e}`,"color: blue","color:")):console.warn("%c[Extension Host] %cCould not find a free port for debugging","color: blue","color:")),e||0}_establishProtocol(t,e){ce(new ae,e.env);const s=$(void 0,e.responseChannel,e.responseNonce);return new Promise((i,n)=>{const c=setTimeout(()=>{n("The local extension host took longer than 60s to connect.")},6e4);s.then(o=>{this._toDispose.add(W(()=>{o.close()})),clearTimeout(c);const d=new B;o.onmessage=m=>{m.data&&d.fire(y.wrap(m.data))},o.start(),i({onMessage:d.event,send:m=>o.postMessage(m.buffer)})});const v=U.create(!1);t.start(e).then(({pid:o})=>{o&&(this.pid=o),this._logService.info(`Started local extension host with pid ${o}.`);const d=v.elapsed();b.isCI&&this._logService.info(`IExtensionHostStarter.start() took ${d} ms.`)},o=>{n(o)})})}_performHandshake(t){return new Promise((e,s)=>{let i;const n=()=>{i=setTimeout(()=>{s("The local extension host took longer than 60s to send its ready message.")},6e4)},c=()=>{clearTimeout(i)};n();const v=t.onMessage(o=>{if(w(o,k.Ready)){c(),this._createExtHostInitData().then(d=>{n(),t.send(y.fromString(JSON.stringify(d)))});return}if(w(o,k.Initialized)){c(),v.dispose(),e();return}console.error("received unexpected message during handshake phase from the extension host: ",o)})})}async _createExtHostInitData(){const t=await this._initDataProvider.getInitData();this.extensions=t.extensions;const e=this._contextService.getWorkspace();return{commit:this._productService.commit,version:this._productService.version,quality:this._productService.quality,parentPid:0,environment:{isExtensionDevelopmentDebug:this._isExtensionDevDebug,appRoot:this._environmentService.appRoot?A.file(this._environmentService.appRoot):void 0,appName:this._productService.nameLong,appHost:this._productService.embedderIdentifier||"desktop",appUriScheme:this._productService.urlProtocol,extensionTelemetryLogResource:this._environmentService.extHostTelemetryLogFile,isExtensionTelemetryLoggingOnly:ee(this._productService,this._environmentService),appLanguage:b.language,extensionDevelopmentLocationURI:this._environmentService.extensionDevelopmentLocationURI,extensionTestsLocationURI:this._environmentService.extensionTestsLocationURI,globalStorageHome:this._userDataProfilesService.defaultProfile.globalStorageHome,workspaceStorageHome:this._environmentService.workspaceStorageHome,extensionLogLevel:this._environmentService.extensionLogLevel},workspace:this._contextService.getWorkbenchState()===se.EMPTY?void 0:{configuration:e.configuration??void 0,id:e.id,name:this._labelService.getWorkspaceLabel(e),isUntitled:e.configuration?ie(e.configuration,this._environmentService):!1,transient:e.transient},remote:{authority:this._environmentService.remoteAuthority,connectionData:null,isRemote:!1},consoleForward:{includeStack:!this._isExtensionDevTestFromCli&&(this._isExtensionDevHost||!this._environmentService.isBuilt||this._productService.quality!=="stable"||this._environmentService.verbose),logNative:!this._isExtensionDevTestFromCli&&this._isExtensionDevHost},extensions:this.extensions.toSnapshot(),telemetryInfo:{sessionId:this._telemetryService.sessionId,machineId:this._telemetryService.machineId,sqmId:this._telemetryService.sqmId,devDeviceId:this._telemetryService.devDeviceId,firstSessionDate:this._telemetryService.firstSessionDate,msftInternal:this._telemetryService.msftInternal},logLevel:this._logService.getLevel(),loggers:[...this._loggerService.getRegisteredLoggers()],logsLocation:this._environmentService.extHostLogsPath,autoStart:this.startup===ve.EagerAutoStart,uiKind:le.Desktop}}_onExtHostProcessExit(t,e){this._terminating||this._onExit.fire([t,e])}_handleProcessOutputStream(t,e){let s="",i=!1;const n=new E;return t(c=>{s+=c;const v=s.split(/\r?\n/g);s=v.pop(),s.length>1e4&&(v.push(s),s="");for(const o of v)i?o===T.End&&(i=!1):o===T.Start?i=!0:o.length&&n.fire(o+`
`)},void 0,e),n}async enableInspectPort(){return this._inspectListener?!0:!this._extensionHostProcess||!await this._extensionHostProcess.enableInspectPort()?!1:(await Promise.race([h.toPromise(this._onDidSetInspectPort.event),I(1e3)]),!!this._inspectListener)}getInspectPort(){return this._inspectListener??void 0}_onWillShutdown(t){this._isExtensionDevHost&&!this._isExtensionDevTestFromCli&&!this._isExtensionDevDebug&&this._environmentService.debugExtensionHost.debugId&&(this._extensionHostDebugService.terminateSession(this._environmentService.debugExtensionHost.debugId),t.join(I(100),{id:"join.extensionDevelopment",label:_.localize("join.extensionDevelopment","Terminating extension debug session")}))}};S=P([a(3,oe),a(4,Y),a(5,K),a(6,me),a(7,ne),a(8,te),a(9,Z),a(10,G),a(11,j),a(12,V),a(13,q),a(14,de),a(15,X),a(16,re),a(17,z)],S);export{ue as ExtensionHostProcess,S as NativeLocalProcessExtensionHost};
