{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/extensions/browser/webWorkerFileSystemProvider.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { NotSupportedError } from \"../../../../base/common/errors.js\";\nimport { Event } from \"../../../../base/common/event.js\";\nimport {\n\tDisposable,\n\ttype IDisposable,\n} from \"../../../../base/common/lifecycle.js\";\nimport type { URI } from \"../../../../base/common/uri.js\";\nimport {\n\tFileSystemProviderCapabilities,\n\tFileSystemProviderErrorCode,\n\tFileType,\n\ttype IFileDeleteOptions,\n\ttype IFileOverwriteOptions,\n\ttype IFileSystemProviderWithFileReadWriteCapability,\n\ttype IFileWriteOptions,\n\ttype IStat,\n\tcreateFileSystemProviderError,\n} from \"../../../../platform/files/common/files.js\";\n\nexport class FetchFileSystemProvider\n\timplements IFileSystemProviderWithFileReadWriteCapability\n{\n\treadonly capabilities =\n\t\tFileSystemProviderCapabilities.Readonly +\n\t\tFileSystemProviderCapabilities.FileReadWrite +\n\t\tFileSystemProviderCapabilities.PathCaseSensitive;\n\treadonly onDidChangeCapabilities = Event.None;\n\treadonly onDidChangeFile = Event.None;\n\n\t// working implementations\n\tasync readFile(resource: URI): Promise<Uint8Array> {\n\t\ttry {\n\t\t\tconst res = await fetch(resource.toString(true));\n\t\t\tif (res.status === 200) {\n\t\t\t\treturn new Uint8Array(await res.arrayBuffer());\n\t\t\t}\n\t\t\tthrow createFileSystemProviderError(\n\t\t\t\tres.statusText,\n\t\t\t\tFileSystemProviderErrorCode.Unknown,\n\t\t\t);\n\t\t} catch (err) {\n\t\t\tthrow createFileSystemProviderError(\n\t\t\t\terr,\n\t\t\t\tFileSystemProviderErrorCode.Unknown,\n\t\t\t);\n\t\t}\n\t}\n\n\t// fake implementations\n\tasync stat(_resource: URI): Promise<IStat> {\n\t\treturn {\n\t\t\ttype: FileType.File,\n\t\t\tsize: 0,\n\t\t\tmtime: 0,\n\t\t\tctime: 0,\n\t\t};\n\t}\n\n\twatch(): IDisposable {\n\t\treturn Disposable.None;\n\t}\n\n\t// error implementations\n\twriteFile(\n\t\t_resource: URI,\n\t\t_content: Uint8Array,\n\t\t_opts: IFileWriteOptions,\n\t): Promise<void> {\n\t\tthrow new NotSupportedError();\n\t}\n\treaddir(_resource: URI): Promise<[string, FileType][]> {\n\t\tthrow new NotSupportedError();\n\t}\n\tmkdir(_resource: URI): Promise<void> {\n\t\tthrow new NotSupportedError();\n\t}\n\tdelete(_resource: URI, _opts: IFileDeleteOptions): Promise<void> {\n\t\tthrow new NotSupportedError();\n\t}\n\trename(_from: URI, _to: URI, _opts: IFileOverwriteOptions): Promise<void> {\n\t\tthrow new NotSupportedError();\n\t}\n}\n"],
  "mappings": ";;AAKA,SAAS,yBAAyB;AAClC,SAAS,aAAa;AACtB;AAAA,EACC;AAAA,OAEM;AAEP;AAAA,EACC;AAAA,EACA;AAAA,EACA;AAAA,EAMA;AAAA,OACM;AAEA,MAAM,wBAEb;AAAA,EA1BA,OA0BA;AAAA;AAAA;AAAA,EACU,eACR,+BAA+B,WAC/B,+BAA+B,gBAC/B,+BAA+B;AAAA,EACvB,0BAA0B,MAAM;AAAA,EAChC,kBAAkB,MAAM;AAAA;AAAA,EAGjC,MAAM,SAAS,UAAoC;AAClD,QAAI;AACH,YAAM,MAAM,MAAM,MAAM,SAAS,SAAS,IAAI,CAAC;AAC/C,UAAI,IAAI,WAAW,KAAK;AACvB,eAAO,IAAI,WAAW,MAAM,IAAI,YAAY,CAAC;AAAA,MAC9C;AACA,YAAM;AAAA,QACL,IAAI;AAAA,QACJ,4BAA4B;AAAA,MAC7B;AAAA,IACD,SAAS,KAAK;AACb,YAAM;AAAA,QACL;AAAA,QACA,4BAA4B;AAAA,MAC7B;AAAA,IACD;AAAA,EACD;AAAA;AAAA,EAGA,MAAM,KAAK,WAAgC;AAC1C,WAAO;AAAA,MACN,MAAM,SAAS;AAAA,MACf,MAAM;AAAA,MACN,OAAO;AAAA,MACP,OAAO;AAAA,IACR;AAAA,EACD;AAAA,EAEA,QAAqB;AACpB,WAAO,WAAW;AAAA,EACnB;AAAA;AAAA,EAGA,UACC,WACA,UACA,OACgB;AAChB,UAAM,IAAI,kBAAkB;AAAA,EAC7B;AAAA,EACA,QAAQ,WAA+C;AACtD,UAAM,IAAI,kBAAkB;AAAA,EAC7B;AAAA,EACA,MAAM,WAA+B;AACpC,UAAM,IAAI,kBAAkB;AAAA,EAC7B;AAAA,EACA,OAAO,WAAgB,OAA0C;AAChE,UAAM,IAAI,kBAAkB;AAAA,EAC7B;AAAA,EACA,OAAO,OAAY,KAAU,OAA6C;AACzE,UAAM,IAAI,kBAAkB;AAAA,EAC7B;AACD;",
  "names": []
}
