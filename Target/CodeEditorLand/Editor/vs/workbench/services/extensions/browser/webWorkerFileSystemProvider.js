import{NotSupportedError as t}from"../../../../base/common/errors.js";import{Event as o}from"../../../../base/common/event.js";import{Disposable as l}from"../../../../base/common/lifecycle.js";import{FileSystemProviderCapabilities as i,FileSystemProviderErrorCode as s,FileType as p,createFileSystemProviderError as a}from"../../../../platform/files/common/files.js";class I{capabilities=i.Readonly+i.FileReadWrite+i.PathCaseSensitive;onDidChangeCapabilities=o.None;onDidChangeFile=o.None;async readFile(r){try{const e=await fetch(r.toString(!0));if(e.status===200)return new Uint8Array(await e.arrayBuffer());throw a(e.statusText,s.Unknown)}catch(e){throw a(e,s.Unknown)}}async stat(r){return{type:p.File,size:0,mtime:0,ctime:0}}watch(){return l.None}writeFile(r,e,n){throw new t}readdir(r){throw new t}mkdir(r){throw new t}delete(r,e){throw new t}rename(r,e,n){throw new t}}export{I as FetchFileSystemProvider};
