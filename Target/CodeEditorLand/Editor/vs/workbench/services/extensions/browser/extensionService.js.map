{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/extensions/browser/extensionService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { mainWindow } from '../../../../base/browser/window.js';\nimport { Schemas } from '../../../../base/common/network.js';\nimport { IConfigurationService } from '../../../../platform/configuration/common/configuration.js';\nimport { IDialogService } from '../../../../platform/dialogs/common/dialogs.js';\nimport { ExtensionKind } from '../../../../platform/environment/common/environment.js';\nimport { ExtensionIdentifier, IExtensionDescription } from '../../../../platform/extensions/common/extensions.js';\nimport { IFileService } from '../../../../platform/files/common/files.js';\nimport { InstantiationType, registerSingleton } from '../../../../platform/instantiation/common/extensions.js';\nimport { IInstantiationService } from '../../../../platform/instantiation/common/instantiation.js';\nimport { IAutomatedWindow, getLogs } from '../../../../platform/log/browser/log.js';\nimport { ILogService } from '../../../../platform/log/common/log.js';\nimport { INotificationService } from '../../../../platform/notification/common/notification.js';\nimport { IProductService } from '../../../../platform/product/common/productService.js';\nimport { PersistentConnectionEventType } from '../../../../platform/remote/common/remoteAgentConnection.js';\nimport { IRemoteAuthorityResolverService, RemoteAuthorityResolverError, ResolverResult } from '../../../../platform/remote/common/remoteAuthorityResolver.js';\nimport { IRemoteExtensionsScannerService } from '../../../../platform/remote/common/remoteExtensionsScanner.js';\nimport { ITelemetryService } from '../../../../platform/telemetry/common/telemetry.js';\nimport { IWorkspaceContextService } from '../../../../platform/workspace/common/workspace.js';\nimport { IWorkspaceTrustManagementService } from '../../../../platform/workspace/common/workspaceTrust.js';\nimport { IBrowserWorkbenchEnvironmentService } from '../../environment/browser/environmentService.js';\nimport { IWebExtensionsScannerService, IWorkbenchExtensionEnablementService, IWorkbenchExtensionManagementService } from '../../extensionManagement/common/extensionManagement.js';\nimport { IWebWorkerExtensionHostDataProvider, IWebWorkerExtensionHostInitData, WebWorkerExtensionHost } from './webWorkerExtensionHost.js';\nimport { FetchFileSystemProvider } from './webWorkerFileSystemProvider.js';\nimport { AbstractExtensionService, IExtensionHostFactory, ResolvedExtensions, checkEnabledAndProposedAPI } from '../common/abstractExtensionService.js';\nimport { ExtensionDescriptionRegistrySnapshot } from '../common/extensionDescriptionRegistry.js';\nimport { ExtensionHostKind, ExtensionRunningPreference, IExtensionHostKindPicker, extensionHostKindToString, extensionRunningPreferenceToString } from '../common/extensionHostKind.js';\nimport { IExtensionManifestPropertiesService } from '../common/extensionManifestPropertiesService.js';\nimport { ExtensionRunningLocation } from '../common/extensionRunningLocation.js';\nimport { ExtensionRunningLocationTracker, filterExtensionDescriptions } from '../common/extensionRunningLocationTracker.js';\nimport { ExtensionHostExtensions, ExtensionHostStartup, IExtensionHost, IExtensionService, toExtensionDescription } from '../common/extensions.js';\nimport { ExtensionsProposedApi } from '../common/extensionsProposedApi.js';\nimport { dedupExtensions } from '../common/extensionsUtil.js';\nimport { IRemoteExtensionHostDataProvider, IRemoteExtensionHostInitData, RemoteExtensionHost } from '../common/remoteExtensionHost.js';\nimport { ILifecycleService, LifecyclePhase } from '../../lifecycle/common/lifecycle.js';\nimport { IRemoteAgentService } from '../../remote/common/remoteAgentService.js';\nimport { IRemoteExplorerService } from '../../remote/common/remoteExplorerService.js';\nimport { IUserDataInitializationService } from '../../userData/browser/userDataInit.js';\nimport { IUserDataProfileService } from '../../userDataProfile/common/userDataProfile.js';\n\nexport class ExtensionService extends AbstractExtensionService implements IExtensionService {\n\n\tconstructor(\n\t\t@IInstantiationService instantiationService: IInstantiationService,\n\t\t@INotificationService notificationService: INotificationService,\n\t\t@IBrowserWorkbenchEnvironmentService private readonly _browserEnvironmentService: IBrowserWorkbenchEnvironmentService,\n\t\t@ITelemetryService telemetryService: ITelemetryService,\n\t\t@IWorkbenchExtensionEnablementService extensionEnablementService: IWorkbenchExtensionEnablementService,\n\t\t@IFileService fileService: IFileService,\n\t\t@IProductService productService: IProductService,\n\t\t@IWorkbenchExtensionManagementService extensionManagementService: IWorkbenchExtensionManagementService,\n\t\t@IWorkspaceContextService contextService: IWorkspaceContextService,\n\t\t@IConfigurationService configurationService: IConfigurationService,\n\t\t@IExtensionManifestPropertiesService extensionManifestPropertiesService: IExtensionManifestPropertiesService,\n\t\t@IWebExtensionsScannerService private readonly _webExtensionsScannerService: IWebExtensionsScannerService,\n\t\t@ILogService logService: ILogService,\n\t\t@IRemoteAgentService remoteAgentService: IRemoteAgentService,\n\t\t@IRemoteExtensionsScannerService remoteExtensionsScannerService: IRemoteExtensionsScannerService,\n\t\t@ILifecycleService lifecycleService: ILifecycleService,\n\t\t@IRemoteAuthorityResolverService remoteAuthorityResolverService: IRemoteAuthorityResolverService,\n\t\t@IUserDataInitializationService private readonly _userDataInitializationService: IUserDataInitializationService,\n\t\t@IUserDataProfileService private readonly _userDataProfileService: IUserDataProfileService,\n\t\t@IWorkspaceTrustManagementService private readonly _workspaceTrustManagementService: IWorkspaceTrustManagementService,\n\t\t@IRemoteExplorerService private readonly _remoteExplorerService: IRemoteExplorerService,\n\t\t@IDialogService dialogService: IDialogService,\n\t) {\n\t\tconst extensionsProposedApi = instantiationService.createInstance(ExtensionsProposedApi);\n\t\tconst extensionHostFactory = new BrowserExtensionHostFactory(\n\t\t\textensionsProposedApi,\n\t\t\t() => this._scanWebExtensions(),\n\t\t\t() => this._getExtensionRegistrySnapshotWhenReady(),\n\t\t\tinstantiationService,\n\t\t\tremoteAgentService,\n\t\t\tremoteAuthorityResolverService,\n\t\t\textensionEnablementService,\n\t\t\tlogService\n\t\t);\n\t\tsuper(\n\t\t\textensionsProposedApi,\n\t\t\textensionHostFactory,\n\t\t\tnew BrowserExtensionHostKindPicker(logService),\n\t\t\tinstantiationService,\n\t\t\tnotificationService,\n\t\t\t_browserEnvironmentService,\n\t\t\ttelemetryService,\n\t\t\textensionEnablementService,\n\t\t\tfileService,\n\t\t\tproductService,\n\t\t\textensionManagementService,\n\t\t\tcontextService,\n\t\t\tconfigurationService,\n\t\t\textensionManifestPropertiesService,\n\t\t\tlogService,\n\t\t\tremoteAgentService,\n\t\t\tremoteExtensionsScannerService,\n\t\t\tlifecycleService,\n\t\t\tremoteAuthorityResolverService,\n\t\t\tdialogService\n\t\t);\n\n\t\t// Initialize installed extensions first and do it only after workbench is ready\n\t\tlifecycleService.when(LifecyclePhase.Ready).then(async () => {\n\t\t\tawait this._userDataInitializationService.initializeInstalledExtensions(this._instantiationService);\n\t\t\tthis._initialize();\n\t\t});\n\n\t\tthis._initFetchFileSystem();\n\t}\n\n\tprivate _initFetchFileSystem(): void {\n\t\tconst provider = new FetchFileSystemProvider();\n\t\tthis._register(this._fileService.registerProvider(Schemas.http, provider));\n\t\tthis._register(this._fileService.registerProvider(Schemas.https, provider));\n\t}\n\n\tprivate async _scanWebExtensions(): Promise<IExtensionDescription[]> {\n\t\tconst system: IExtensionDescription[] = [], user: IExtensionDescription[] = [], development: IExtensionDescription[] = [];\n\t\ttry {\n\t\t\tawait Promise.all([\n\t\t\t\tthis._webExtensionsScannerService.scanSystemExtensions().then(extensions => system.push(...extensions.map(e => toExtensionDescription(e)))),\n\t\t\t\tthis._webExtensionsScannerService.scanUserExtensions(this._userDataProfileService.currentProfile.extensionsResource, { skipInvalidExtensions: true }).then(extensions => user.push(...extensions.map(e => toExtensionDescription(e)))),\n\t\t\t\tthis._webExtensionsScannerService.scanExtensionsUnderDevelopment().then(extensions => development.push(...extensions.map(e => toExtensionDescription(e, true))))\n\t\t\t]);\n\t\t} catch (error) {\n\t\t\tthis._logService.error(error);\n\t\t}\n\t\treturn dedupExtensions(system, user, [], development, this._logService);\n\t}\n\n\tprotected async _resolveExtensionsDefault() {\n\t\tconst [localExtensions, remoteExtensions] = await Promise.all([\n\t\t\tthis._scanWebExtensions(),\n\t\t\tthis._remoteExtensionsScannerService.scanExtensions()\n\t\t]);\n\n\t\treturn new ResolvedExtensions(localExtensions, remoteExtensions, /*hasLocalProcess*/false, /*allowRemoteExtensionsInLocalWebWorker*/true);\n\t}\n\n\tprotected async _resolveExtensions(): Promise<ResolvedExtensions> {\n\t\tif (!this._browserEnvironmentService.expectsResolverExtension) {\n\t\t\treturn this._resolveExtensionsDefault();\n\t\t}\n\n\t\tconst remoteAuthority = this._environmentService.remoteAuthority!;\n\n\t\t// Now that the canonical URI provider has been registered, we need to wait for the trust state to be\n\t\t// calculated. The trust state will be used while resolving the authority, however the resolver can\n\t\t// override the trust state through the resolver result.\n\t\tawait this._workspaceTrustManagementService.workspaceResolved;\n\n\n\t\tlet resolverResult: ResolverResult;\n\t\ttry {\n\t\t\tresolverResult = await this._resolveAuthorityInitial(remoteAuthority);\n\t\t} catch (err) {\n\t\t\tif (RemoteAuthorityResolverError.isHandled(err)) {\n\t\t\t\tconsole.log(`Error handled: Not showing a notification for the error`);\n\t\t\t}\n\t\t\tthis._remoteAuthorityResolverService._setResolvedAuthorityError(remoteAuthority, err);\n\n\t\t\t// Proceed with the local extension host\n\t\t\treturn this._resolveExtensionsDefault();\n\t\t}\n\n\t\t// set the resolved authority\n\t\tthis._remoteAuthorityResolverService._setResolvedAuthority(resolverResult.authority, resolverResult.options);\n\t\tthis._remoteExplorerService.setTunnelInformation(resolverResult.tunnelInformation);\n\n\t\t// monitor for breakage\n\t\tconst connection = this._remoteAgentService.getConnection();\n\t\tif (connection) {\n\t\t\tconnection.onDidStateChange(async (e) => {\n\t\t\t\tif (e.type === PersistentConnectionEventType.ConnectionLost) {\n\t\t\t\t\tthis._remoteAuthorityResolverService._clearResolvedAuthority(remoteAuthority);\n\t\t\t\t}\n\t\t\t});\n\t\t\tconnection.onReconnecting(() => this._resolveAuthorityAgain());\n\t\t}\n\n\t\treturn this._resolveExtensionsDefault();\n\t}\n\n\tprotected async _onExtensionHostExit(code: number): Promise<void> {\n\t\t// Dispose everything associated with the extension host\n\t\tawait this._doStopExtensionHosts();\n\n\t\t// If we are running extension tests, forward logs and exit code\n\t\tconst automatedWindow = mainWindow as unknown as IAutomatedWindow;\n\t\tif (typeof automatedWindow.codeAutomationExit === 'function') {\n\t\t\tautomatedWindow.codeAutomationExit(code, await getLogs(this._fileService, this._environmentService));\n\t\t}\n\t}\n\n\tprotected async _resolveAuthority(remoteAuthority: string): Promise<ResolverResult> {\n\t\treturn this._resolveAuthorityOnExtensionHosts(ExtensionHostKind.LocalWebWorker, remoteAuthority);\n\t}\n}\n\nclass BrowserExtensionHostFactory implements IExtensionHostFactory {\n\n\tconstructor(\n\t\tprivate readonly _extensionsProposedApi: ExtensionsProposedApi,\n\t\tprivate readonly _scanWebExtensions: () => Promise<IExtensionDescription[]>,\n\t\tprivate readonly _getExtensionRegistrySnapshotWhenReady: () => Promise<ExtensionDescriptionRegistrySnapshot>,\n\t\t@IInstantiationService private readonly _instantiationService: IInstantiationService,\n\t\t@IRemoteAgentService private readonly _remoteAgentService: IRemoteAgentService,\n\t\t@IRemoteAuthorityResolverService private readonly _remoteAuthorityResolverService: IRemoteAuthorityResolverService,\n\t\t@IWorkbenchExtensionEnablementService private readonly _extensionEnablementService: IWorkbenchExtensionEnablementService,\n\t\t@ILogService private readonly _logService: ILogService,\n\t) { }\n\n\tcreateExtensionHost(runningLocations: ExtensionRunningLocationTracker, runningLocation: ExtensionRunningLocation, isInitialStart: boolean): IExtensionHost | null {\n\t\tswitch (runningLocation.kind) {\n\t\t\tcase ExtensionHostKind.LocalProcess: {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\tcase ExtensionHostKind.LocalWebWorker: {\n\t\t\t\tconst startup = (\n\t\t\t\t\tisInitialStart\n\t\t\t\t\t\t? ExtensionHostStartup.EagerManualStart\n\t\t\t\t\t\t: ExtensionHostStartup.EagerAutoStart\n\t\t\t\t);\n\t\t\t\treturn this._instantiationService.createInstance(WebWorkerExtensionHost, runningLocation, startup, this._createLocalExtensionHostDataProvider(runningLocations, runningLocation, isInitialStart));\n\t\t\t}\n\t\t\tcase ExtensionHostKind.Remote: {\n\t\t\t\tconst remoteAgentConnection = this._remoteAgentService.getConnection();\n\t\t\t\tif (remoteAgentConnection) {\n\t\t\t\t\treturn this._instantiationService.createInstance(RemoteExtensionHost, runningLocation, this._createRemoteExtensionHostDataProvider(runningLocations, remoteAgentConnection.remoteAuthority));\n\t\t\t\t}\n\t\t\t\treturn null;\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate _createLocalExtensionHostDataProvider(runningLocations: ExtensionRunningLocationTracker, desiredRunningLocation: ExtensionRunningLocation, isInitialStart: boolean): IWebWorkerExtensionHostDataProvider {\n\t\treturn {\n\t\t\tgetInitData: async (): Promise<IWebWorkerExtensionHostInitData> => {\n\t\t\t\tif (isInitialStart) {\n\t\t\t\t\t// Here we load even extensions that would be disabled by workspace trust\n\t\t\t\t\tconst localExtensions = checkEnabledAndProposedAPI(this._logService, this._extensionEnablementService, this._extensionsProposedApi, await this._scanWebExtensions(), /* ignore workspace trust */true);\n\t\t\t\t\tconst runningLocation = runningLocations.computeRunningLocation(localExtensions, [], false);\n\t\t\t\t\tconst myExtensions = filterExtensionDescriptions(localExtensions, runningLocation, extRunningLocation => desiredRunningLocation.equals(extRunningLocation));\n\t\t\t\t\tconst extensions = new ExtensionHostExtensions(0, localExtensions, myExtensions.map(extension => extension.identifier));\n\t\t\t\t\treturn { extensions };\n\t\t\t\t} else {\n\t\t\t\t\t// restart case\n\t\t\t\t\tconst snapshot = await this._getExtensionRegistrySnapshotWhenReady();\n\t\t\t\t\tconst myExtensions = runningLocations.filterByRunningLocation(snapshot.extensions, desiredRunningLocation);\n\t\t\t\t\tconst extensions = new ExtensionHostExtensions(snapshot.versionId, snapshot.extensions, myExtensions.map(extension => extension.identifier));\n\t\t\t\t\treturn { extensions };\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t}\n\n\tprivate _createRemoteExtensionHostDataProvider(runningLocations: ExtensionRunningLocationTracker, remoteAuthority: string): IRemoteExtensionHostDataProvider {\n\t\treturn {\n\t\t\tremoteAuthority: remoteAuthority,\n\t\t\tgetInitData: async (): Promise<IRemoteExtensionHostInitData> => {\n\t\t\t\tconst snapshot = await this._getExtensionRegistrySnapshotWhenReady();\n\n\t\t\t\tconst remoteEnv = await this._remoteAgentService.getEnvironment();\n\t\t\t\tif (!remoteEnv) {\n\t\t\t\t\tthrow new Error('Cannot provide init data for remote extension host!');\n\t\t\t\t}\n\n\t\t\t\tconst myExtensions = runningLocations.filterByExtensionHostKind(snapshot.extensions, ExtensionHostKind.Remote);\n\t\t\t\tconst extensions = new ExtensionHostExtensions(snapshot.versionId, snapshot.extensions, myExtensions.map(extension => extension.identifier));\n\n\t\t\t\treturn {\n\t\t\t\t\tconnectionData: this._remoteAuthorityResolverService.getConnectionData(remoteAuthority),\n\t\t\t\t\tpid: remoteEnv.pid,\n\t\t\t\t\tappRoot: remoteEnv.appRoot,\n\t\t\t\t\textensionHostLogsPath: remoteEnv.extensionHostLogsPath,\n\t\t\t\t\tglobalStorageHome: remoteEnv.globalStorageHome,\n\t\t\t\t\tworkspaceStorageHome: remoteEnv.workspaceStorageHome,\n\t\t\t\t\textensions,\n\t\t\t\t};\n\t\t\t}\n\t\t};\n\t}\n}\n\nexport class BrowserExtensionHostKindPicker implements IExtensionHostKindPicker {\n\n\tconstructor(\n\t\t@ILogService private readonly _logService: ILogService,\n\t) { }\n\n\tpickExtensionHostKind(extensionId: ExtensionIdentifier, extensionKinds: ExtensionKind[], isInstalledLocally: boolean, isInstalledRemotely: boolean, preference: ExtensionRunningPreference): ExtensionHostKind | null {\n\t\tconst result = BrowserExtensionHostKindPicker.pickRunningLocation(extensionKinds, isInstalledLocally, isInstalledRemotely, preference);\n\t\tthis._logService.trace(`pickRunningLocation for ${extensionId.value}, extension kinds: [${extensionKinds.join(', ')}], isInstalledLocally: ${isInstalledLocally}, isInstalledRemotely: ${isInstalledRemotely}, preference: ${extensionRunningPreferenceToString(preference)} => ${extensionHostKindToString(result)}`);\n\t\treturn result;\n\t}\n\n\tpublic static pickRunningLocation(extensionKinds: ExtensionKind[], isInstalledLocally: boolean, isInstalledRemotely: boolean, preference: ExtensionRunningPreference): ExtensionHostKind | null {\n\t\tconst result: ExtensionHostKind[] = [];\n\t\tlet canRunRemotely = false;\n\t\tfor (const extensionKind of extensionKinds) {\n\t\t\tif (extensionKind === 'ui' && isInstalledRemotely) {\n\t\t\t\t// ui extensions run remotely if possible (but only as a last resort)\n\t\t\t\tif (preference === ExtensionRunningPreference.Remote) {\n\t\t\t\t\treturn ExtensionHostKind.Remote;\n\t\t\t\t} else {\n\t\t\t\t\tcanRunRemotely = true;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (extensionKind === 'workspace' && isInstalledRemotely) {\n\t\t\t\t// workspace extensions run remotely if possible\n\t\t\t\tif (preference === ExtensionRunningPreference.None || preference === ExtensionRunningPreference.Remote) {\n\t\t\t\t\treturn ExtensionHostKind.Remote;\n\t\t\t\t} else {\n\t\t\t\t\tresult.push(ExtensionHostKind.Remote);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (extensionKind === 'web' && (isInstalledLocally || isInstalledRemotely)) {\n\t\t\t\t// web worker extensions run in the local web worker if possible\n\t\t\t\tif (preference === ExtensionRunningPreference.None || preference === ExtensionRunningPreference.Local) {\n\t\t\t\t\treturn ExtensionHostKind.LocalWebWorker;\n\t\t\t\t} else {\n\t\t\t\t\tresult.push(ExtensionHostKind.LocalWebWorker);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (canRunRemotely) {\n\t\t\tresult.push(ExtensionHostKind.Remote);\n\t\t}\n\t\treturn (result.length > 0 ? result[0] : null);\n\t}\n}\n\nregisterSingleton(IExtensionService, ExtensionService, InstantiationType.Eager);\n"],
  "mappings": ";;;;;;;;;;;;AAKA,SAAS,kBAAkB;AAC3B,SAAS,eAAe;AACxB,SAAS,6BAA6B;AACtC,SAAS,sBAAsB;AAC/B,SAAS,qBAAqB;AAC9B,SAAS,qBAAqB,6BAA6B;AAC3D,SAAS,oBAAoB;AAC7B,SAAS,mBAAmB,yBAAyB;AACrD,SAAS,6BAA6B;AACtC,SAAS,kBAAkB,eAAe;AAC1C,SAAS,mBAAmB;AAC5B,SAAS,4BAA4B;AACrC,SAAS,uBAAuB;AAChC,SAAS,qCAAqC;AAC9C,SAAS,iCAAiC,8BAA8B,sBAAsB;AAC9F,SAAS,uCAAuC;AAChD,SAAS,yBAAyB;AAClC,SAAS,gCAAgC;AACzC,SAAS,wCAAwC;AACjD,SAAS,2CAA2C;AACpD,SAAS,8BAA8B,sCAAsC,4CAA4C;AACzH,SAAS,qCAAqC,iCAAiC,8BAA8B;AAC7G,SAAS,+BAA+B;AACxC,SAAS,0BAA0B,uBAAuB,oBAAoB,kCAAkC;AAChH,SAAS,4CAA4C;AACrD,SAAS,mBAAmB,4BAA4B,0BAA0B,2BAA2B,0CAA0C;AACvJ,SAAS,2CAA2C;AACpD,SAAS,gCAAgC;AACzC,SAAS,iCAAiC,mCAAmC;AAC7E,SAAS,yBAAyB,sBAAsB,gBAAgB,mBAAmB,8BAA8B;AACzH,SAAS,6BAA6B;AACtC,SAAS,uBAAuB;AAChC,SAAS,kCAAkC,8BAA8B,2BAA2B;AACpG,SAAS,mBAAmB,sBAAsB;AAClD,SAAS,2BAA2B;AACpC,SAAS,8BAA8B;AACvC,SAAS,sCAAsC;AAC/C,SAAS,+BAA+B;AAEjC,IAAM,mBAAN,cAA+B,yBAAsD;AAAA,EAE3F,YACwB,sBACD,qBACgC,4BACnC,kBACmB,4BACxB,aACG,gBACqB,4BACZ,gBACH,sBACc,oCACU,8BAClC,YACQ,oBACY,gCACd,kBACc,gCACgB,gCACP,yBACS,kCACV,wBACzB,eACf;AACD,UAAM,wBAAwB,qBAAqB,eAAe,qBAAqB;AACvF,UAAM,uBAAuB,IAAI;AAAA,MAChC;AAAA,MACA,MAAM,KAAK,mBAAmB;AAAA,MAC9B,MAAM,KAAK,uCAAuC;AAAA,MAClD;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACD;AACA;AAAA,MACC;AAAA,MACA;AAAA,MACA,IAAI,+BAA+B,UAAU;AAAA,MAC7C;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACD;AArDsD;AASP;AAME;AACP;AACS;AACV;AAsCzC,qBAAiB,KAAK,eAAe,KAAK,EAAE,KAAK,YAAY;AAC5D,YAAM,KAAK,+BAA+B,8BAA8B,KAAK,qBAAqB;AAClG,WAAK,YAAY;AAAA,IAClB,CAAC;AAED,SAAK,qBAAqB;AAAA,EAC3B;AAAA,EA/GD,OA4C4F;AAAA;AAAA;AAAA,EAqEnF,uBAA6B;AACpC,UAAM,WAAW,IAAI,wBAAwB;AAC7C,SAAK,UAAU,KAAK,aAAa,iBAAiB,QAAQ,MAAM,QAAQ,CAAC;AACzE,SAAK,UAAU,KAAK,aAAa,iBAAiB,QAAQ,OAAO,QAAQ,CAAC;AAAA,EAC3E;AAAA,EAEA,MAAc,qBAAuD;AACpE,UAAM,SAAkC,CAAC,GAAG,OAAgC,CAAC,GAAG,cAAuC,CAAC;AACxH,QAAI;AACH,YAAM,QAAQ,IAAI;AAAA,QACjB,KAAK,6BAA6B,qBAAqB,EAAE,KAAK,gBAAc,OAAO,KAAK,GAAG,WAAW,IAAI,OAAK,uBAAuB,CAAC,CAAC,CAAC,CAAC;AAAA,QAC1I,KAAK,6BAA6B,mBAAmB,KAAK,wBAAwB,eAAe,oBAAoB,EAAE,uBAAuB,KAAK,CAAC,EAAE,KAAK,gBAAc,KAAK,KAAK,GAAG,WAAW,IAAI,OAAK,uBAAuB,CAAC,CAAC,CAAC,CAAC;AAAA,QACrO,KAAK,6BAA6B,+BAA+B,EAAE,KAAK,gBAAc,YAAY,KAAK,GAAG,WAAW,IAAI,OAAK,uBAAuB,GAAG,IAAI,CAAC,CAAC,CAAC;AAAA,MAChK,CAAC;AAAA,IACF,SAAS,OAAO;AACf,WAAK,YAAY,MAAM,KAAK;AAAA,IAC7B;AACA,WAAO,gBAAgB,QAAQ,MAAM,CAAC,GAAG,aAAa,KAAK,WAAW;AAAA,EACvE;AAAA,EAEA,MAAgB,4BAA4B;AAC3C,UAAM,CAAC,iBAAiB,gBAAgB,IAAI,MAAM,QAAQ,IAAI;AAAA,MAC7D,KAAK,mBAAmB;AAAA,MACxB,KAAK,gCAAgC,eAAe;AAAA,IACrD,CAAC;AAED,WAAO,IAAI;AAAA,MAAmB;AAAA,MAAiB;AAAA;AAAA,MAAqC;AAAA;AAAA,MAAgD;AAAA,IAAI;AAAA,EACzI;AAAA,EAEA,MAAgB,qBAAkD;AACjE,QAAI,CAAC,KAAK,2BAA2B,0BAA0B;AAC9D,aAAO,KAAK,0BAA0B;AAAA,IACvC;AAEA,UAAM,kBAAkB,KAAK,oBAAoB;AAKjD,UAAM,KAAK,iCAAiC;AAG5C,QAAI;AACJ,QAAI;AACH,uBAAiB,MAAM,KAAK,yBAAyB,eAAe;AAAA,IACrE,SAAS,KAAK;AACb,UAAI,6BAA6B,UAAU,GAAG,GAAG;AAChD,gBAAQ,IAAI,yDAAyD;AAAA,MACtE;AACA,WAAK,gCAAgC,2BAA2B,iBAAiB,GAAG;AAGpF,aAAO,KAAK,0BAA0B;AAAA,IACvC;AAGA,SAAK,gCAAgC,sBAAsB,eAAe,WAAW,eAAe,OAAO;AAC3G,SAAK,uBAAuB,qBAAqB,eAAe,iBAAiB;AAGjF,UAAM,aAAa,KAAK,oBAAoB,cAAc;AAC1D,QAAI,YAAY;AACf,iBAAW,iBAAiB,OAAO,MAAM;AACxC,YAAI,EAAE,SAAS,8BAA8B,gBAAgB;AAC5D,eAAK,gCAAgC,wBAAwB,eAAe;AAAA,QAC7E;AAAA,MACD,CAAC;AACD,iBAAW,eAAe,MAAM,KAAK,uBAAuB,CAAC;AAAA,IAC9D;AAEA,WAAO,KAAK,0BAA0B;AAAA,EACvC;AAAA,EAEA,MAAgB,qBAAqB,MAA6B;AAEjE,UAAM,KAAK,sBAAsB;AAGjC,UAAM,kBAAkB;AACxB,QAAI,OAAO,gBAAgB,uBAAuB,YAAY;AAC7D,sBAAgB,mBAAmB,MAAM,MAAM,QAAQ,KAAK,cAAc,KAAK,mBAAmB,CAAC;AAAA,IACpG;AAAA,EACD;AAAA,EAEA,MAAgB,kBAAkB,iBAAkD;AACnF,WAAO,KAAK,kCAAkC,kBAAkB,gBAAgB,eAAe;AAAA,EAChG;AACD;AA5Ja,mBAAN;AAAA,EAGJ;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,GAxBU;AA8Jb,IAAM,8BAAN,MAAmE;AAAA,EAElE,YACkB,wBACA,oBACA,wCACuB,uBACF,qBACY,iCACK,6BACzB,aAC7B;AARgB;AACA;AACA;AACuB;AACF;AACY;AACK;AACzB;AAAA,EAC3B;AAAA,EArNL,OA0MmE;AAAA;AAAA;AAAA,EAalE,oBAAoB,kBAAmD,iBAA2C,gBAAgD;AACjK,YAAQ,gBAAgB,MAAM;AAAA,MAC7B,KAAK,kBAAkB,cAAc;AACpC,eAAO;AAAA,MACR;AAAA,MACA,KAAK,kBAAkB,gBAAgB;AACtC,cAAM,UACL,iBACG,qBAAqB,mBACrB,qBAAqB;AAEzB,eAAO,KAAK,sBAAsB,eAAe,wBAAwB,iBAAiB,SAAS,KAAK,sCAAsC,kBAAkB,iBAAiB,cAAc,CAAC;AAAA,MACjM;AAAA,MACA,KAAK,kBAAkB,QAAQ;AAC9B,cAAM,wBAAwB,KAAK,oBAAoB,cAAc;AACrE,YAAI,uBAAuB;AAC1B,iBAAO,KAAK,sBAAsB,eAAe,qBAAqB,iBAAiB,KAAK,uCAAuC,kBAAkB,sBAAsB,eAAe,CAAC;AAAA,QAC5L;AACA,eAAO;AAAA,MACR;AAAA,IACD;AAAA,EACD;AAAA,EAEQ,sCAAsC,kBAAmD,wBAAkD,gBAA8D;AAChN,WAAO;AAAA,MACN,aAAa,mCAAsD;AAClE,YAAI,gBAAgB;AAEnB,gBAAM,kBAAkB;AAAA,YAA2B,KAAK;AAAA,YAAa,KAAK;AAAA,YAA6B,KAAK;AAAA,YAAwB,MAAM,KAAK,mBAAmB;AAAA;AAAA,YAA+B;AAAA,UAAI;AACrM,gBAAM,kBAAkB,iBAAiB,uBAAuB,iBAAiB,CAAC,GAAG,KAAK;AAC1F,gBAAM,eAAe,4BAA4B,iBAAiB,iBAAiB,wBAAsB,uBAAuB,OAAO,kBAAkB,CAAC;AAC1J,gBAAM,aAAa,IAAI,wBAAwB,GAAG,iBAAiB,aAAa,IAAI,eAAa,UAAU,UAAU,CAAC;AACtH,iBAAO,EAAE,WAAW;AAAA,QACrB,OAAO;AAEN,gBAAM,WAAW,MAAM,KAAK,uCAAuC;AACnE,gBAAM,eAAe,iBAAiB,wBAAwB,SAAS,YAAY,sBAAsB;AACzG,gBAAM,aAAa,IAAI,wBAAwB,SAAS,WAAW,SAAS,YAAY,aAAa,IAAI,eAAa,UAAU,UAAU,CAAC;AAC3I,iBAAO,EAAE,WAAW;AAAA,QACrB;AAAA,MACD,GAfa;AAAA,IAgBd;AAAA,EACD;AAAA,EAEQ,uCAAuC,kBAAmD,iBAA2D;AAC5J,WAAO;AAAA,MACN;AAAA,MACA,aAAa,mCAAmD;AAC/D,cAAM,WAAW,MAAM,KAAK,uCAAuC;AAEnE,cAAM,YAAY,MAAM,KAAK,oBAAoB,eAAe;AAChE,YAAI,CAAC,WAAW;AACf,gBAAM,IAAI,MAAM,qDAAqD;AAAA,QACtE;AAEA,cAAM,eAAe,iBAAiB,0BAA0B,SAAS,YAAY,kBAAkB,MAAM;AAC7G,cAAM,aAAa,IAAI,wBAAwB,SAAS,WAAW,SAAS,YAAY,aAAa,IAAI,eAAa,UAAU,UAAU,CAAC;AAE3I,eAAO;AAAA,UACN,gBAAgB,KAAK,gCAAgC,kBAAkB,eAAe;AAAA,UACtF,KAAK,UAAU;AAAA,UACf,SAAS,UAAU;AAAA,UACnB,uBAAuB,UAAU;AAAA,UACjC,mBAAmB,UAAU;AAAA,UAC7B,sBAAsB,UAAU;AAAA,UAChC;AAAA,QACD;AAAA,MACD,GApBa;AAAA,IAqBd;AAAA,EACD;AACD;AAnFM,8BAAN;AAAA,EAMG;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,GAVG;AAqFC,IAAM,iCAAN,MAAyE;AAAA,EAE/E,YAC+B,aAC7B;AAD6B;AAAA,EAC3B;AAAA,EAnSL,OA+RgF;AAAA;AAAA;AAAA,EAM/E,sBAAsB,aAAkC,gBAAiC,oBAA6B,qBAA8B,YAAkE;AACrN,UAAM,SAAS,+BAA+B,oBAAoB,gBAAgB,oBAAoB,qBAAqB,UAAU;AACrI,SAAK,YAAY,MAAM,2BAA2B,YAAY,KAAK,uBAAuB,eAAe,KAAK,IAAI,CAAC,0BAA0B,kBAAkB,0BAA0B,mBAAmB,iBAAiB,mCAAmC,UAAU,CAAC,OAAO,0BAA0B,MAAM,CAAC,EAAE;AACrT,WAAO;AAAA,EACR;AAAA,EAEA,OAAc,oBAAoB,gBAAiC,oBAA6B,qBAA8B,YAAkE;AAC/L,UAAM,SAA8B,CAAC;AACrC,QAAI,iBAAiB;AACrB,eAAW,iBAAiB,gBAAgB;AAC3C,UAAI,kBAAkB,QAAQ,qBAAqB;AAElD,YAAI,eAAe,2BAA2B,QAAQ;AACrD,iBAAO,kBAAkB;AAAA,QAC1B,OAAO;AACN,2BAAiB;AAAA,QAClB;AAAA,MACD;AACA,UAAI,kBAAkB,eAAe,qBAAqB;AAEzD,YAAI,eAAe,2BAA2B,QAAQ,eAAe,2BAA2B,QAAQ;AACvG,iBAAO,kBAAkB;AAAA,QAC1B,OAAO;AACN,iBAAO,KAAK,kBAAkB,MAAM;AAAA,QACrC;AAAA,MACD;AACA,UAAI,kBAAkB,UAAU,sBAAsB,sBAAsB;AAE3E,YAAI,eAAe,2BAA2B,QAAQ,eAAe,2BAA2B,OAAO;AACtG,iBAAO,kBAAkB;AAAA,QAC1B,OAAO;AACN,iBAAO,KAAK,kBAAkB,cAAc;AAAA,QAC7C;AAAA,MACD;AAAA,IACD;AACA,QAAI,gBAAgB;AACnB,aAAO,KAAK,kBAAkB,MAAM;AAAA,IACrC;AACA,WAAQ,OAAO,SAAS,IAAI,OAAO,CAAC,IAAI;AAAA,EACzC;AACD;AA9Ca,iCAAN;AAAA,EAGJ;AAAA,GAHU;AAgDb,kBAAkB,mBAAmB,kBAAkB,kBAAkB,KAAK;",
  "names": []
}
