{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/extensions/browser/extensionService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { mainWindow } from \"../../../../base/browser/window.js\";\nimport { Schemas } from \"../../../../base/common/network.js\";\nimport { IConfigurationService } from \"../../../../platform/configuration/common/configuration.js\";\nimport { IDialogService } from \"../../../../platform/dialogs/common/dialogs.js\";\nimport type { ExtensionKind } from \"../../../../platform/environment/common/environment.js\";\nimport type {\n\tExtensionIdentifier,\n\tIExtensionDescription,\n} from \"../../../../platform/extensions/common/extensions.js\";\nimport { IFileService } from \"../../../../platform/files/common/files.js\";\nimport {\n\tInstantiationType,\n\tregisterSingleton,\n} from \"../../../../platform/instantiation/common/extensions.js\";\nimport { IInstantiationService } from \"../../../../platform/instantiation/common/instantiation.js\";\nimport {\n\ttype IAutomatedWindow,\n\tgetLogs,\n} from \"../../../../platform/log/browser/log.js\";\nimport { ILogService } from \"../../../../platform/log/common/log.js\";\nimport { INotificationService } from \"../../../../platform/notification/common/notification.js\";\nimport { IProductService } from \"../../../../platform/product/common/productService.js\";\nimport { PersistentConnectionEventType } from \"../../../../platform/remote/common/remoteAgentConnection.js\";\nimport {\n\tIRemoteAuthorityResolverService,\n\tRemoteAuthorityResolverError,\n\ttype ResolverResult,\n} from \"../../../../platform/remote/common/remoteAuthorityResolver.js\";\nimport { IRemoteExtensionsScannerService } from \"../../../../platform/remote/common/remoteExtensionsScanner.js\";\nimport { ITelemetryService } from \"../../../../platform/telemetry/common/telemetry.js\";\nimport { IWorkspaceContextService } from \"../../../../platform/workspace/common/workspace.js\";\nimport { IWorkspaceTrustManagementService } from \"../../../../platform/workspace/common/workspaceTrust.js\";\nimport { IBrowserWorkbenchEnvironmentService } from \"../../environment/browser/environmentService.js\";\nimport {\n\tIWebExtensionsScannerService,\n\tIWorkbenchExtensionEnablementService,\n\tIWorkbenchExtensionManagementService,\n} from \"../../extensionManagement/common/extensionManagement.js\";\nimport {\n\tILifecycleService,\n\tLifecyclePhase,\n} from \"../../lifecycle/common/lifecycle.js\";\nimport { IRemoteAgentService } from \"../../remote/common/remoteAgentService.js\";\nimport { IRemoteExplorerService } from \"../../remote/common/remoteExplorerService.js\";\nimport { IUserDataInitializationService } from \"../../userData/browser/userDataInit.js\";\nimport { IUserDataProfileService } from \"../../userDataProfile/common/userDataProfile.js\";\nimport {\n\tAbstractExtensionService,\n\ttype IExtensionHostFactory,\n\tResolvedExtensions,\n\tcheckEnabledAndProposedAPI,\n} from \"../common/abstractExtensionService.js\";\nimport type { ExtensionDescriptionRegistrySnapshot } from \"../common/extensionDescriptionRegistry.js\";\nimport {\n\tExtensionHostKind,\n\tExtensionRunningPreference,\n\ttype IExtensionHostKindPicker,\n\textensionHostKindToString,\n\textensionRunningPreferenceToString,\n} from \"../common/extensionHostKind.js\";\nimport { IExtensionManifestPropertiesService } from \"../common/extensionManifestPropertiesService.js\";\nimport type { ExtensionRunningLocation } from \"../common/extensionRunningLocation.js\";\nimport {\n\ttype ExtensionRunningLocationTracker,\n\tfilterExtensionDescriptions,\n} from \"../common/extensionRunningLocationTracker.js\";\nimport {\n\tExtensionHostExtensions,\n\tExtensionHostStartup,\n\ttype IExtensionHost,\n\tIExtensionService,\n\ttoExtensionDescription,\n} from \"../common/extensions.js\";\nimport { ExtensionsProposedApi } from \"../common/extensionsProposedApi.js\";\nimport { dedupExtensions } from \"../common/extensionsUtil.js\";\nimport {\n\ttype IRemoteExtensionHostDataProvider,\n\ttype IRemoteExtensionHostInitData,\n\tRemoteExtensionHost,\n} from \"../common/remoteExtensionHost.js\";\nimport {\n\ttype IWebWorkerExtensionHostDataProvider,\n\ttype IWebWorkerExtensionHostInitData,\n\tWebWorkerExtensionHost,\n} from \"./webWorkerExtensionHost.js\";\nimport { FetchFileSystemProvider } from \"./webWorkerFileSystemProvider.js\";\n\nexport class ExtensionService\n\textends AbstractExtensionService\n\timplements IExtensionService\n{\n\tconstructor(\n\t\t@IInstantiationService instantiationService: IInstantiationService,\n\t\t@INotificationService notificationService: INotificationService,\n\t\t@IBrowserWorkbenchEnvironmentService private readonly _browserEnvironmentService: IBrowserWorkbenchEnvironmentService,\n\t\t@ITelemetryService telemetryService: ITelemetryService,\n\t\t@IWorkbenchExtensionEnablementService extensionEnablementService: IWorkbenchExtensionEnablementService,\n\t\t@IFileService fileService: IFileService,\n\t\t@IProductService productService: IProductService,\n\t\t@IWorkbenchExtensionManagementService extensionManagementService: IWorkbenchExtensionManagementService,\n\t\t@IWorkspaceContextService contextService: IWorkspaceContextService,\n\t\t@IConfigurationService configurationService: IConfigurationService,\n\t\t@IExtensionManifestPropertiesService extensionManifestPropertiesService: IExtensionManifestPropertiesService,\n\t\t@IWebExtensionsScannerService private readonly _webExtensionsScannerService: IWebExtensionsScannerService,\n\t\t@ILogService logService: ILogService,\n\t\t@IRemoteAgentService remoteAgentService: IRemoteAgentService,\n\t\t@IRemoteExtensionsScannerService remoteExtensionsScannerService: IRemoteExtensionsScannerService,\n\t\t@ILifecycleService lifecycleService: ILifecycleService,\n\t\t@IRemoteAuthorityResolverService remoteAuthorityResolverService: IRemoteAuthorityResolverService,\n\t\t@IUserDataInitializationService private readonly _userDataInitializationService: IUserDataInitializationService,\n\t\t@IUserDataProfileService private readonly _userDataProfileService: IUserDataProfileService,\n\t\t@IWorkspaceTrustManagementService private readonly _workspaceTrustManagementService: IWorkspaceTrustManagementService,\n\t\t@IRemoteExplorerService private readonly _remoteExplorerService: IRemoteExplorerService,\n\t\t@IDialogService dialogService: IDialogService,\n\t) {\n\t\tconst extensionsProposedApi = instantiationService.createInstance(ExtensionsProposedApi);\n\t\tconst extensionHostFactory = new BrowserExtensionHostFactory(\n\t\t\textensionsProposedApi,\n\t\t\t() => this._scanWebExtensions(),\n\t\t\t() => this._getExtensionRegistrySnapshotWhenReady(),\n\t\t\tinstantiationService,\n\t\t\tremoteAgentService,\n\t\t\tremoteAuthorityResolverService,\n\t\t\textensionEnablementService,\n\t\t\tlogService\n\t\t);\n\t\tsuper(\n\t\t\textensionsProposedApi,\n\t\t\textensionHostFactory,\n\t\t\tnew BrowserExtensionHostKindPicker(logService),\n\t\t\tinstantiationService,\n\t\t\tnotificationService,\n\t\t\t_browserEnvironmentService,\n\t\t\ttelemetryService,\n\t\t\textensionEnablementService,\n\t\t\tfileService,\n\t\t\tproductService,\n\t\t\textensionManagementService,\n\t\t\tcontextService,\n\t\t\tconfigurationService,\n\t\t\textensionManifestPropertiesService,\n\t\t\tlogService,\n\t\t\tremoteAgentService,\n\t\t\tremoteExtensionsScannerService,\n\t\t\tlifecycleService,\n\t\t\tremoteAuthorityResolverService,\n\t\t\tdialogService\n\t\t);\n\n\t\t// Initialize installed extensions first and do it only after workbench is ready\n\t\tlifecycleService.when(LifecyclePhase.Ready).then(async () => {\n\t\t\tawait this._userDataInitializationService.initializeInstalledExtensions(this._instantiationService);\n\t\t\tthis._initialize();\n\t\t});\n\n\t\tthis._initFetchFileSystem();\n\t}\n\n\tprivate _initFetchFileSystem(): void {\n\t\tconst provider = new FetchFileSystemProvider();\n\t\tthis._register(\n\t\t\tthis._fileService.registerProvider(Schemas.http, provider),\n\t\t);\n\t\tthis._register(\n\t\t\tthis._fileService.registerProvider(Schemas.https, provider),\n\t\t);\n\t}\n\n\tprivate async _scanWebExtensions(): Promise<IExtensionDescription[]> {\n\t\tconst system: IExtensionDescription[] = [],\n\t\t\tuser: IExtensionDescription[] = [],\n\t\t\tdevelopment: IExtensionDescription[] = [];\n\t\ttry {\n\t\t\tawait Promise.all([\n\t\t\t\tthis._webExtensionsScannerService\n\t\t\t\t\t.scanSystemExtensions()\n\t\t\t\t\t.then((extensions) =>\n\t\t\t\t\t\tsystem.push(\n\t\t\t\t\t\t\t...extensions.map((e) => toExtensionDescription(e)),\n\t\t\t\t\t\t),\n\t\t\t\t\t),\n\t\t\t\tthis._webExtensionsScannerService\n\t\t\t\t\t.scanUserExtensions(\n\t\t\t\t\t\tthis._userDataProfileService.currentProfile\n\t\t\t\t\t\t\t.extensionsResource,\n\t\t\t\t\t\t{ skipInvalidExtensions: true },\n\t\t\t\t\t)\n\t\t\t\t\t.then((extensions) =>\n\t\t\t\t\t\tuser.push(\n\t\t\t\t\t\t\t...extensions.map((e) => toExtensionDescription(e)),\n\t\t\t\t\t\t),\n\t\t\t\t\t),\n\t\t\t\tthis._webExtensionsScannerService\n\t\t\t\t\t.scanExtensionsUnderDevelopment()\n\t\t\t\t\t.then((extensions) =>\n\t\t\t\t\t\tdevelopment.push(\n\t\t\t\t\t\t\t...extensions.map((e) =>\n\t\t\t\t\t\t\t\ttoExtensionDescription(e, true),\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t),\n\t\t\t\t\t),\n\t\t\t]);\n\t\t} catch (error) {\n\t\t\tthis._logService.error(error);\n\t\t}\n\t\treturn dedupExtensions(system, user, [], development, this._logService);\n\t}\n\n\tprotected async _resolveExtensionsDefault() {\n\t\tconst [localExtensions, remoteExtensions] = await Promise.all([\n\t\t\tthis._scanWebExtensions(),\n\t\t\tthis._remoteExtensionsScannerService.scanExtensions(),\n\t\t]);\n\n\t\treturn new ResolvedExtensions(\n\t\t\tlocalExtensions,\n\t\t\tremoteExtensions,\n\t\t\t/*hasLocalProcess*/ false,\n\t\t\t/*allowRemoteExtensionsInLocalWebWorker*/ true,\n\t\t);\n\t}\n\n\tprotected async _resolveExtensions(): Promise<ResolvedExtensions> {\n\t\tif (!this._browserEnvironmentService.expectsResolverExtension) {\n\t\t\treturn this._resolveExtensionsDefault();\n\t\t}\n\n\t\tconst remoteAuthority = this._environmentService.remoteAuthority!;\n\n\t\t// Now that the canonical URI provider has been registered, we need to wait for the trust state to be\n\t\t// calculated. The trust state will be used while resolving the authority, however the resolver can\n\t\t// override the trust state through the resolver result.\n\t\tawait this._workspaceTrustManagementService.workspaceResolved;\n\n\t\tlet resolverResult: ResolverResult;\n\t\ttry {\n\t\t\tresolverResult =\n\t\t\t\tawait this._resolveAuthorityInitial(remoteAuthority);\n\t\t} catch (err) {\n\t\t\tif (RemoteAuthorityResolverError.isHandled(err)) {\n\t\t\t\tconsole.log(\n\t\t\t\t\t`Error handled: Not showing a notification for the error`,\n\t\t\t\t);\n\t\t\t}\n\t\t\tthis._remoteAuthorityResolverService._setResolvedAuthorityError(\n\t\t\t\tremoteAuthority,\n\t\t\t\terr,\n\t\t\t);\n\n\t\t\t// Proceed with the local extension host\n\t\t\treturn this._resolveExtensionsDefault();\n\t\t}\n\n\t\t// set the resolved authority\n\t\tthis._remoteAuthorityResolverService._setResolvedAuthority(\n\t\t\tresolverResult.authority,\n\t\t\tresolverResult.options,\n\t\t);\n\t\tthis._remoteExplorerService.setTunnelInformation(\n\t\t\tresolverResult.tunnelInformation,\n\t\t);\n\n\t\t// monitor for breakage\n\t\tconst connection = this._remoteAgentService.getConnection();\n\t\tif (connection) {\n\t\t\tconnection.onDidStateChange(async (e) => {\n\t\t\t\tif (e.type === PersistentConnectionEventType.ConnectionLost) {\n\t\t\t\t\tthis._remoteAuthorityResolverService._clearResolvedAuthority(\n\t\t\t\t\t\tremoteAuthority,\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t});\n\t\t\tconnection.onReconnecting(() => this._resolveAuthorityAgain());\n\t\t}\n\n\t\treturn this._resolveExtensionsDefault();\n\t}\n\n\tprotected async _onExtensionHostExit(code: number): Promise<void> {\n\t\t// Dispose everything associated with the extension host\n\t\tawait this._doStopExtensionHosts();\n\n\t\t// If we are running extension tests, forward logs and exit code\n\t\tconst automatedWindow = mainWindow as unknown as IAutomatedWindow;\n\t\tif (typeof automatedWindow.codeAutomationExit === \"function\") {\n\t\t\tautomatedWindow.codeAutomationExit(\n\t\t\t\tcode,\n\t\t\t\tawait getLogs(this._fileService, this._environmentService),\n\t\t\t);\n\t\t}\n\t}\n\n\tprotected async _resolveAuthority(\n\t\tremoteAuthority: string,\n\t): Promise<ResolverResult> {\n\t\treturn this._resolveAuthorityOnExtensionHosts(\n\t\t\tExtensionHostKind.LocalWebWorker,\n\t\t\tremoteAuthority,\n\t\t);\n\t}\n}\n\nclass BrowserExtensionHostFactory implements IExtensionHostFactory {\n\tconstructor(\n\t\tprivate readonly _extensionsProposedApi: ExtensionsProposedApi,\n\t\tprivate readonly _scanWebExtensions: () => Promise<IExtensionDescription[]>,\n\t\tprivate readonly _getExtensionRegistrySnapshotWhenReady: () => Promise<ExtensionDescriptionRegistrySnapshot>,\n\t\t@IInstantiationService private readonly _instantiationService: IInstantiationService,\n\t\t@IRemoteAgentService private readonly _remoteAgentService: IRemoteAgentService,\n\t\t@IRemoteAuthorityResolverService private readonly _remoteAuthorityResolverService: IRemoteAuthorityResolverService,\n\t\t@IWorkbenchExtensionEnablementService private readonly _extensionEnablementService: IWorkbenchExtensionEnablementService,\n\t\t@ILogService private readonly _logService: ILogService,\n\t) { }\n\n\tcreateExtensionHost(\n\t\trunningLocations: ExtensionRunningLocationTracker,\n\t\trunningLocation: ExtensionRunningLocation,\n\t\tisInitialStart: boolean,\n\t): IExtensionHost | null {\n\t\tswitch (runningLocation.kind) {\n\t\t\tcase ExtensionHostKind.LocalProcess: {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\tcase ExtensionHostKind.LocalWebWorker: {\n\t\t\t\tconst startup = isInitialStart\n\t\t\t\t\t? ExtensionHostStartup.EagerManualStart\n\t\t\t\t\t: ExtensionHostStartup.EagerAutoStart;\n\t\t\t\treturn this._instantiationService.createInstance(\n\t\t\t\t\tWebWorkerExtensionHost,\n\t\t\t\t\trunningLocation,\n\t\t\t\t\tstartup,\n\t\t\t\t\tthis._createLocalExtensionHostDataProvider(\n\t\t\t\t\t\trunningLocations,\n\t\t\t\t\t\trunningLocation,\n\t\t\t\t\t\tisInitialStart,\n\t\t\t\t\t),\n\t\t\t\t);\n\t\t\t}\n\t\t\tcase ExtensionHostKind.Remote: {\n\t\t\t\tconst remoteAgentConnection =\n\t\t\t\t\tthis._remoteAgentService.getConnection();\n\t\t\t\tif (remoteAgentConnection) {\n\t\t\t\t\treturn this._instantiationService.createInstance(\n\t\t\t\t\t\tRemoteExtensionHost,\n\t\t\t\t\t\trunningLocation,\n\t\t\t\t\t\tthis._createRemoteExtensionHostDataProvider(\n\t\t\t\t\t\t\trunningLocations,\n\t\t\t\t\t\t\tremoteAgentConnection.remoteAuthority,\n\t\t\t\t\t\t),\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t\treturn null;\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate _createLocalExtensionHostDataProvider(\n\t\trunningLocations: ExtensionRunningLocationTracker,\n\t\tdesiredRunningLocation: ExtensionRunningLocation,\n\t\tisInitialStart: boolean,\n\t): IWebWorkerExtensionHostDataProvider {\n\t\treturn {\n\t\t\tgetInitData: async (): Promise<IWebWorkerExtensionHostInitData> => {\n\t\t\t\tif (isInitialStart) {\n\t\t\t\t\t// Here we load even extensions that would be disabled by workspace trust\n\t\t\t\t\tconst localExtensions = checkEnabledAndProposedAPI(\n\t\t\t\t\t\tthis._logService,\n\t\t\t\t\t\tthis._extensionEnablementService,\n\t\t\t\t\t\tthis._extensionsProposedApi,\n\t\t\t\t\t\tawait this._scanWebExtensions(),\n\t\t\t\t\t\t/* ignore workspace trust */ true,\n\t\t\t\t\t);\n\t\t\t\t\tconst runningLocation =\n\t\t\t\t\t\trunningLocations.computeRunningLocation(\n\t\t\t\t\t\t\tlocalExtensions,\n\t\t\t\t\t\t\t[],\n\t\t\t\t\t\t\tfalse,\n\t\t\t\t\t\t);\n\t\t\t\t\tconst myExtensions = filterExtensionDescriptions(\n\t\t\t\t\t\tlocalExtensions,\n\t\t\t\t\t\trunningLocation,\n\t\t\t\t\t\t(extRunningLocation) =>\n\t\t\t\t\t\t\tdesiredRunningLocation.equals(extRunningLocation),\n\t\t\t\t\t);\n\t\t\t\t\tconst extensions = new ExtensionHostExtensions(\n\t\t\t\t\t\t0,\n\t\t\t\t\t\tlocalExtensions,\n\t\t\t\t\t\tmyExtensions.map((extension) => extension.identifier),\n\t\t\t\t\t);\n\t\t\t\t\treturn { extensions };\n\t\t\t\t} else {\n\t\t\t\t\t// restart case\n\t\t\t\t\tconst snapshot =\n\t\t\t\t\t\tawait this._getExtensionRegistrySnapshotWhenReady();\n\t\t\t\t\tconst myExtensions =\n\t\t\t\t\t\trunningLocations.filterByRunningLocation(\n\t\t\t\t\t\t\tsnapshot.extensions,\n\t\t\t\t\t\t\tdesiredRunningLocation,\n\t\t\t\t\t\t);\n\t\t\t\t\tconst extensions = new ExtensionHostExtensions(\n\t\t\t\t\t\tsnapshot.versionId,\n\t\t\t\t\t\tsnapshot.extensions,\n\t\t\t\t\t\tmyExtensions.map((extension) => extension.identifier),\n\t\t\t\t\t);\n\t\t\t\t\treturn { extensions };\n\t\t\t\t}\n\t\t\t},\n\t\t};\n\t}\n\n\tprivate _createRemoteExtensionHostDataProvider(\n\t\trunningLocations: ExtensionRunningLocationTracker,\n\t\tremoteAuthority: string,\n\t): IRemoteExtensionHostDataProvider {\n\t\treturn {\n\t\t\tremoteAuthority: remoteAuthority,\n\t\t\tgetInitData: async (): Promise<IRemoteExtensionHostInitData> => {\n\t\t\t\tconst snapshot =\n\t\t\t\t\tawait this._getExtensionRegistrySnapshotWhenReady();\n\n\t\t\t\tconst remoteEnv =\n\t\t\t\t\tawait this._remoteAgentService.getEnvironment();\n\t\t\t\tif (!remoteEnv) {\n\t\t\t\t\tthrow new Error(\n\t\t\t\t\t\t\"Cannot provide init data for remote extension host!\",\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\tconst myExtensions = runningLocations.filterByExtensionHostKind(\n\t\t\t\t\tsnapshot.extensions,\n\t\t\t\t\tExtensionHostKind.Remote,\n\t\t\t\t);\n\t\t\t\tconst extensions = new ExtensionHostExtensions(\n\t\t\t\t\tsnapshot.versionId,\n\t\t\t\t\tsnapshot.extensions,\n\t\t\t\t\tmyExtensions.map((extension) => extension.identifier),\n\t\t\t\t);\n\n\t\t\t\treturn {\n\t\t\t\t\tconnectionData:\n\t\t\t\t\t\tthis._remoteAuthorityResolverService.getConnectionData(\n\t\t\t\t\t\t\tremoteAuthority,\n\t\t\t\t\t\t),\n\t\t\t\t\tpid: remoteEnv.pid,\n\t\t\t\t\tappRoot: remoteEnv.appRoot,\n\t\t\t\t\textensionHostLogsPath: remoteEnv.extensionHostLogsPath,\n\t\t\t\t\tglobalStorageHome: remoteEnv.globalStorageHome,\n\t\t\t\t\tworkspaceStorageHome: remoteEnv.workspaceStorageHome,\n\t\t\t\t\textensions,\n\t\t\t\t};\n\t\t\t},\n\t\t};\n\t}\n}\n\nexport class BrowserExtensionHostKindPicker\n\timplements IExtensionHostKindPicker\n{\n\tconstructor(\n\t\t@ILogService private readonly _logService: ILogService,\n\t) { }\n\n\tpickExtensionHostKind(\n\t\textensionId: ExtensionIdentifier,\n\t\textensionKinds: ExtensionKind[],\n\t\tisInstalledLocally: boolean,\n\t\tisInstalledRemotely: boolean,\n\t\tpreference: ExtensionRunningPreference,\n\t): ExtensionHostKind | null {\n\t\tconst result = BrowserExtensionHostKindPicker.pickRunningLocation(\n\t\t\textensionKinds,\n\t\t\tisInstalledLocally,\n\t\t\tisInstalledRemotely,\n\t\t\tpreference,\n\t\t);\n\t\tthis._logService.trace(\n\t\t\t`pickRunningLocation for ${extensionId.value}, extension kinds: [${extensionKinds.join(\", \")}], isInstalledLocally: ${isInstalledLocally}, isInstalledRemotely: ${isInstalledRemotely}, preference: ${extensionRunningPreferenceToString(preference)} => ${extensionHostKindToString(result)}`,\n\t\t);\n\t\treturn result;\n\t}\n\n\tpublic static pickRunningLocation(\n\t\textensionKinds: ExtensionKind[],\n\t\tisInstalledLocally: boolean,\n\t\tisInstalledRemotely: boolean,\n\t\tpreference: ExtensionRunningPreference,\n\t): ExtensionHostKind | null {\n\t\tconst result: ExtensionHostKind[] = [];\n\t\tlet canRunRemotely = false;\n\t\tfor (const extensionKind of extensionKinds) {\n\t\t\tif (extensionKind === \"ui\" && isInstalledRemotely) {\n\t\t\t\t// ui extensions run remotely if possible (but only as a last resort)\n\t\t\t\tif (preference === ExtensionRunningPreference.Remote) {\n\t\t\t\t\treturn ExtensionHostKind.Remote;\n\t\t\t\t} else {\n\t\t\t\t\tcanRunRemotely = true;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (extensionKind === \"workspace\" && isInstalledRemotely) {\n\t\t\t\t// workspace extensions run remotely if possible\n\t\t\t\tif (\n\t\t\t\t\tpreference === ExtensionRunningPreference.None ||\n\t\t\t\t\tpreference === ExtensionRunningPreference.Remote\n\t\t\t\t) {\n\t\t\t\t\treturn ExtensionHostKind.Remote;\n\t\t\t\t} else {\n\t\t\t\t\tresult.push(ExtensionHostKind.Remote);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (\n\t\t\t\textensionKind === \"web\" &&\n\t\t\t\t(isInstalledLocally || isInstalledRemotely)\n\t\t\t) {\n\t\t\t\t// web worker extensions run in the local web worker if possible\n\t\t\t\tif (\n\t\t\t\t\tpreference === ExtensionRunningPreference.None ||\n\t\t\t\t\tpreference === ExtensionRunningPreference.Local\n\t\t\t\t) {\n\t\t\t\t\treturn ExtensionHostKind.LocalWebWorker;\n\t\t\t\t} else {\n\t\t\t\t\tresult.push(ExtensionHostKind.LocalWebWorker);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (canRunRemotely) {\n\t\t\tresult.push(ExtensionHostKind.Remote);\n\t\t}\n\t\treturn result.length > 0 ? result[0] : null;\n\t}\n}\n\nregisterSingleton(IExtensionService, ExtensionService, InstantiationType.Eager);\n"],
  "mappings": "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",
  "names": []
}
