{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/extensions/browser/extensionUrlHandler.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { disposableWindowInterval } from \"../../../../base/browser/dom.js\";\nimport { mainWindow } from \"../../../../base/browser/window.js\";\nimport { isCancellationError } from \"../../../../base/common/errors.js\";\nimport {\n\ttype IDisposable,\n\tcombinedDisposable,\n} from \"../../../../base/common/lifecycle.js\";\nimport { URI } from \"../../../../base/common/uri.js\";\nimport { localize, localize2 } from \"../../../../nls.js\";\nimport {\n\tAction2,\n\tMenuId,\n\tregisterAction2,\n} from \"../../../../platform/actions/common/actions.js\";\nimport { ICommandService } from \"../../../../platform/commands/common/commands.js\";\nimport { IConfigurationService } from \"../../../../platform/configuration/common/configuration.js\";\nimport { IsWebContext } from \"../../../../platform/contextkey/common/contextkeys.js\";\nimport { IDialogService } from \"../../../../platform/dialogs/common/dialogs.js\";\nimport { ExtensionIdentifier } from \"../../../../platform/extensions/common/extensions.js\";\nimport {\n\tInstantiationType,\n\tregisterSingleton,\n} from \"../../../../platform/instantiation/common/extensions.js\";\nimport {\n\ttype ServicesAccessor,\n\tcreateDecorator,\n} from \"../../../../platform/instantiation/common/instantiation.js\";\nimport { INotificationService } from \"../../../../platform/notification/common/notification.js\";\nimport { IProductService } from \"../../../../platform/product/common/productService.js\";\nimport {\n\tIQuickInputService,\n\ttype IQuickPickItem,\n} from \"../../../../platform/quickinput/common/quickInput.js\";\nimport {\n\tIStorageService,\n\tStorageScope,\n\tStorageTarget,\n} from \"../../../../platform/storage/common/storage.js\";\nimport { ITelemetryService } from \"../../../../platform/telemetry/common/telemetry.js\";\nimport {\n\ttype IOpenURLOptions,\n\ttype IURLHandler,\n\tIURLService,\n} from \"../../../../platform/url/common/url.js\";\nimport {\n\ttype IWorkbenchContribution,\n\tWorkbenchPhase,\n\tregisterWorkbenchContribution2,\n} from \"../../../common/contributions.js\";\nimport { IWorkbenchEnvironmentService } from \"../../environment/common/environmentService.js\";\nimport { IHostService } from \"../../host/browser/host.js\";\nimport { ActivationKind, IExtensionService } from \"../common/extensions.js\";\n\nconst FIVE_MINUTES = 5 * 60 * 1000;\nconst THIRTY_SECONDS = 30 * 1000;\nconst URL_TO_HANDLE = \"extensionUrlHandler.urlToHandle\";\nconst USER_TRUSTED_EXTENSIONS_CONFIGURATION_KEY =\n\t\"extensions.confirmedUriHandlerExtensionIds\";\nconst USER_TRUSTED_EXTENSIONS_STORAGE_KEY =\n\t\"extensionUrlHandler.confirmedExtensions\";\n\nfunction isExtensionId(value: string): boolean {\n\treturn /^[a-z0-9][a-z0-9-]*\\.[a-z0-9][a-z0-9-]*$/i.test(value);\n}\n\nclass UserTrustedExtensionIdStorage {\n\tget extensions(): string[] {\n\t\tconst userTrustedExtensionIdsJson = this.storageService.get(\n\t\t\tUSER_TRUSTED_EXTENSIONS_STORAGE_KEY,\n\t\t\tStorageScope.PROFILE,\n\t\t\t\"[]\",\n\t\t);\n\n\t\ttry {\n\t\t\treturn JSON.parse(userTrustedExtensionIdsJson);\n\t\t} catch {\n\t\t\treturn [];\n\t\t}\n\t}\n\n\tconstructor(private storageService: IStorageService) {}\n\n\thas(id: string): boolean {\n\t\treturn this.extensions.indexOf(id) > -1;\n\t}\n\n\tadd(id: string): void {\n\t\tthis.set([...this.extensions, id]);\n\t}\n\n\tset(ids: string[]): void {\n\t\tthis.storageService.store(\n\t\t\tUSER_TRUSTED_EXTENSIONS_STORAGE_KEY,\n\t\t\tJSON.stringify(ids),\n\t\t\tStorageScope.PROFILE,\n\t\t\tStorageTarget.MACHINE,\n\t\t);\n\t}\n}\n\nexport const IExtensionUrlHandler = createDecorator<IExtensionUrlHandler>(\n\t\"extensionUrlHandler\",\n);\n\nexport interface IExtensionContributedURLHandler extends IURLHandler {\n\textensionDisplayName: string;\n}\n\nexport interface IExtensionUrlHandler {\n\treadonly _serviceBrand: undefined;\n\tregisterExtensionHandler(\n\t\textensionId: ExtensionIdentifier,\n\t\thandler: IExtensionContributedURLHandler,\n\t): void;\n\tunregisterExtensionHandler(extensionId: ExtensionIdentifier): void;\n}\n\nexport interface ExtensionUrlHandlerEvent {\n\treadonly extensionId: string;\n}\n\ntype ExtensionUrlHandlerClassification = {\n\towner: \"joaomoreno\";\n\treadonly extensionId: {\n\t\tclassification: \"PublicNonPersonalData\";\n\t\tpurpose: \"FeatureInsight\";\n\t\tcomment: \"The ID of the extension that should handle the URI\";\n\t};\n\tcomment: \"This is used to understand the drop funnel of extension URI handling by the OS & VS Code.\";\n};\n\ninterface ExtensionUrlReloadHandlerEvent {\n\treadonly extensionId: string;\n\treadonly isRemote: boolean;\n}\n\ntype ExtensionUrlReloadHandlerClassification = {\n\towner: \"sandy081\";\n\treadonly extensionId: {\n\t\tclassification: \"PublicNonPersonalData\";\n\t\tpurpose: \"FeatureInsight\";\n\t\tcomment: \"The ID of the extension that should handle the URI\";\n\t};\n\treadonly isRemote: {\n\t\tclassification: \"PublicNonPersonalData\";\n\t\tpurpose: \"FeatureInsight\";\n\t\tcomment: \"Whether the current window is a remote window\";\n\t};\n\tcomment: \"This is used to understand the drop funnel of extension URI handling by the OS & VS Code.\";\n};\n\n/**\n * This class handles URLs which are directed towards extensions.\n * If a URL is directed towards an inactive extension, it buffers it,\n * activates the extension and re-opens the URL once the extension registers\n * a URL handler. If the extension never registers a URL handler, the urls\n * will eventually be garbage collected.\n *\n * It also makes sure the user confirms opening URLs directed towards extensions.\n */\nclass ExtensionUrlHandler implements IExtensionUrlHandler, IURLHandler {\n\treadonly _serviceBrand: undefined;\n\n\tprivate extensionHandlers = new Map<\n\t\tstring,\n\t\tIExtensionContributedURLHandler\n\t>();\n\tprivate uriBuffer = new Map<string, { timestamp: number; uri: URI }[]>();\n\tprivate userTrustedExtensionsStorage: UserTrustedExtensionIdStorage;\n\tprivate disposable: IDisposable;\n\n\tconstructor(\n\t\t@IURLService urlService: IURLService,\n\t\t@IExtensionService private readonly extensionService: IExtensionService,\n\t\t@IDialogService private readonly dialogService: IDialogService,\n\t\t@ICommandService private readonly commandService: ICommandService,\n\t\t@IHostService private readonly hostService: IHostService,\n\t\t@IStorageService private readonly storageService: IStorageService,\n\t\t@IConfigurationService private readonly configurationService: IConfigurationService,\n\t\t@ITelemetryService private readonly telemetryService: ITelemetryService,\n\t\t@INotificationService private readonly notificationService: INotificationService,\n\t\t@IProductService private readonly productService: IProductService,\n\t\t@IWorkbenchEnvironmentService private readonly workbenchEnvironmentService: IWorkbenchEnvironmentService\n\t) {\n\t\tthis.userTrustedExtensionsStorage = new UserTrustedExtensionIdStorage(storageService);\n\n\t\tconst interval = disposableWindowInterval(mainWindow, () => this.garbageCollect(), THIRTY_SECONDS);\n\t\tconst urlToHandleValue = this.storageService.get(URL_TO_HANDLE, StorageScope.WORKSPACE);\n\t\tif (urlToHandleValue) {\n\t\t\tthis.storageService.remove(URL_TO_HANDLE, StorageScope.WORKSPACE);\n\t\t\tthis.handleURL(URI.revive(JSON.parse(urlToHandleValue)), { trusted: true });\n\t\t}\n\n\t\tthis.disposable = combinedDisposable(\n\t\t\turlService.registerHandler(this),\n\t\t\tinterval\n\t\t);\n\n\t\tconst cache = ExtensionUrlBootstrapHandler.cache;\n\t\tsetTimeout(() => cache.forEach(([uri, option]) => this.handleURL(uri, option)));\n\t}\n\n\tasync handleURL(uri: URI, options?: IOpenURLOptions): Promise<boolean> {\n\t\tif (!isExtensionId(uri.authority)) {\n\t\t\treturn false;\n\t\t}\n\n\t\tconst extensionId = uri.authority;\n\t\tthis.telemetryService.publicLog2<\n\t\t\tExtensionUrlHandlerEvent,\n\t\t\tExtensionUrlHandlerClassification\n\t\t>(\"uri_invoked/start\", { extensionId });\n\n\t\tconst initialHandler = this.extensionHandlers.get(\n\t\t\tExtensionIdentifier.toKey(extensionId),\n\t\t);\n\t\tlet extensionDisplayName: string;\n\n\t\tif (initialHandler) {\n\t\t\textensionDisplayName = initialHandler.extensionDisplayName;\n\t\t} else {\n\t\t\t// The extension is not yet activated, so let's check if it is installed and enabled\n\t\t\tconst extension =\n\t\t\t\tawait this.extensionService.getExtension(extensionId);\n\t\t\tif (extension) {\n\t\t\t\textensionDisplayName = extension.displayName ?? \"\";\n\t\t\t} else {\n\t\t\t\tawait this.handleUnhandledURL(uri, extensionId, options);\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\tconst trusted =\n\t\t\toptions?.trusted ||\n\t\t\tthis.productService.trustedExtensionProtocolHandlers?.includes(\n\t\t\t\textensionId,\n\t\t\t) ||\n\t\t\tthis.didUserTrustExtension(ExtensionIdentifier.toKey(extensionId));\n\n\t\tif (!trusted) {\n\t\t\tlet uriString = uri.toString(false);\n\n\t\t\tif (uriString.length > 40) {\n\t\t\t\turiString = `${uriString.substring(0, 30)}...${uriString.substring(uriString.length - 5)}`;\n\t\t\t}\n\n\t\t\tconst result = await this.dialogService.confirm({\n\t\t\t\tmessage: localize(\n\t\t\t\t\t\"confirmUrl\",\n\t\t\t\t\t\"Allow '{0}' extension to open this URI?\",\n\t\t\t\t\textensionDisplayName,\n\t\t\t\t),\n\t\t\t\tcheckbox: {\n\t\t\t\t\tlabel: localize(\n\t\t\t\t\t\t\"rememberConfirmUrl\",\n\t\t\t\t\t\t\"Do not ask me again for this extension\",\n\t\t\t\t\t),\n\t\t\t\t},\n\t\t\t\tdetail: uriString,\n\t\t\t\tprimaryButton: localize(\n\t\t\t\t\t{ key: \"open\", comment: [\"&& denotes a mnemonic\"] },\n\t\t\t\t\t\"&&Open\",\n\t\t\t\t),\n\t\t\t});\n\n\t\t\tif (!result.confirmed) {\n\t\t\t\tthis.telemetryService.publicLog2<\n\t\t\t\t\tExtensionUrlHandlerEvent,\n\t\t\t\t\tExtensionUrlHandlerClassification\n\t\t\t\t>(\"uri_invoked/cancel\", { extensionId });\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\tif (result.checkboxChecked) {\n\t\t\t\tthis.userTrustedExtensionsStorage.add(\n\t\t\t\t\tExtensionIdentifier.toKey(extensionId),\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\tconst handler = this.extensionHandlers.get(\n\t\t\tExtensionIdentifier.toKey(extensionId),\n\t\t);\n\n\t\tif (handler) {\n\t\t\tif (!initialHandler) {\n\t\t\t\t// forward it directly\n\t\t\t\treturn await this.handleURLByExtension(\n\t\t\t\t\textensionId,\n\t\t\t\t\thandler,\n\t\t\t\t\turi,\n\t\t\t\t\toptions,\n\t\t\t\t);\n\t\t\t}\n\n\t\t\t// let the ExtensionUrlHandler instance handle this\n\t\t\treturn false;\n\t\t}\n\n\t\t// collect URI for eventual extension activation\n\t\tconst timestamp = new Date().getTime();\n\t\tlet uris = this.uriBuffer.get(ExtensionIdentifier.toKey(extensionId));\n\n\t\tif (!uris) {\n\t\t\turis = [];\n\t\t\tthis.uriBuffer.set(ExtensionIdentifier.toKey(extensionId), uris);\n\t\t}\n\n\t\turis.push({ timestamp, uri });\n\n\t\t// activate the extension using ActivationKind.Immediate because URI handling might be part\n\t\t// of resolving authorities (via authentication extensions)\n\t\tawait this.extensionService.activateByEvent(\n\t\t\t`onUri:${ExtensionIdentifier.toKey(extensionId)}`,\n\t\t\tActivationKind.Immediate,\n\t\t);\n\t\treturn true;\n\t}\n\n\tregisterExtensionHandler(\n\t\textensionId: ExtensionIdentifier,\n\t\thandler: IExtensionContributedURLHandler,\n\t): void {\n\t\tthis.extensionHandlers.set(\n\t\t\tExtensionIdentifier.toKey(extensionId),\n\t\t\thandler,\n\t\t);\n\n\t\tconst uris =\n\t\t\tthis.uriBuffer.get(ExtensionIdentifier.toKey(extensionId)) || [];\n\n\t\tfor (const { uri } of uris) {\n\t\t\tthis.handleURLByExtension(extensionId, handler, uri);\n\t\t}\n\n\t\tthis.uriBuffer.delete(ExtensionIdentifier.toKey(extensionId));\n\t}\n\n\tunregisterExtensionHandler(extensionId: ExtensionIdentifier): void {\n\t\tthis.extensionHandlers.delete(ExtensionIdentifier.toKey(extensionId));\n\t}\n\n\tprivate async handleURLByExtension(\n\t\textensionId: ExtensionIdentifier | string,\n\t\thandler: IURLHandler,\n\t\turi: URI,\n\t\toptions?: IOpenURLOptions,\n\t): Promise<boolean> {\n\t\tthis.telemetryService.publicLog2<\n\t\t\tExtensionUrlHandlerEvent,\n\t\t\tExtensionUrlHandlerClassification\n\t\t>(\"uri_invoked/end\", {\n\t\t\textensionId: ExtensionIdentifier.toKey(extensionId),\n\t\t});\n\t\treturn await handler.handleURL(uri, options);\n\t}\n\n\tprivate async handleUnhandledURL(\n\t\turi: URI,\n\t\textensionId: string,\n\t\toptions?: IOpenURLOptions,\n\t): Promise<void> {\n\t\tthis.telemetryService.publicLog2<\n\t\t\tExtensionUrlHandlerEvent,\n\t\t\tExtensionUrlHandlerClassification\n\t\t>(\"uri_invoked/install_extension/start\", { extensionId });\n\n\t\ttry {\n\t\t\tawait this.commandService.executeCommand(\n\t\t\t\t\"workbench.extensions.installExtension\",\n\t\t\t\textensionId,\n\t\t\t\t{\n\t\t\t\t\tjustification: {\n\t\t\t\t\t\treason: `${localize(\"installDetail\", \"This extension wants to open a URI:\")}\\n${uri.toString()}`,\n\t\t\t\t\t\taction: localize(\"openUri\", \"Open URI\"),\n\t\t\t\t\t},\n\t\t\t\t\tenable: true,\n\t\t\t\t},\n\t\t\t);\n\t\t\tthis.telemetryService.publicLog2<\n\t\t\t\tExtensionUrlHandlerEvent,\n\t\t\t\tExtensionUrlHandlerClassification\n\t\t\t>(\"uri_invoked/install_extension/accept\", { extensionId });\n\t\t} catch (error) {\n\t\t\tif (isCancellationError(error)) {\n\t\t\t\tthis.telemetryService.publicLog2<\n\t\t\t\t\tExtensionUrlHandlerEvent,\n\t\t\t\t\tExtensionUrlHandlerClassification\n\t\t\t\t>(\"uri_invoked/install_extension/cancel\", { extensionId });\n\t\t\t} else {\n\t\t\t\tthis.telemetryService.publicLog2<\n\t\t\t\t\tExtensionUrlHandlerEvent,\n\t\t\t\t\tExtensionUrlHandlerClassification\n\t\t\t\t>(\"uri_invoked/install_extension/error\", { extensionId });\n\t\t\t\tthis.notificationService.error(error);\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\n\t\tconst extension = await this.extensionService.getExtension(extensionId);\n\n\t\tif (extension) {\n\t\t\tawait this.handleURL(uri, { ...options, trusted: true });\n\t\t} else {\n\n\t\t/* Extension cannot be added and require window reload */\n\t\t\tthis.telemetryService.publicLog2<\n\t\t\t\tExtensionUrlReloadHandlerEvent,\n\t\t\t\tExtensionUrlReloadHandlerClassification\n\t\t\t>(\"uri_invoked/install_extension/reload\", {\n\t\t\t\textensionId,\n\t\t\t\tisRemote: !!this.workbenchEnvironmentService.remoteAuthority,\n\t\t\t});\n\t\t\tconst result = await this.dialogService.confirm({\n\t\t\t\tmessage: localize(\n\t\t\t\t\t\"reloadAndHandle\",\n\t\t\t\t\t\"Extension '{0}' is not loaded. Would you like to reload the window to load the extension and open the URL?\",\n\t\t\t\t\textensionId,\n\t\t\t\t),\n\t\t\t\tprimaryButton: localize(\n\t\t\t\t\t{\n\t\t\t\t\t\tkey: \"reloadAndOpen\",\n\t\t\t\t\t\tcomment: [\"&& denotes a mnemonic\"],\n\t\t\t\t\t},\n\t\t\t\t\t\"&&Reload Window and Open\",\n\t\t\t\t),\n\t\t\t});\n\n\t\t\tif (!result.confirmed) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis.storageService.store(\n\t\t\t\tURL_TO_HANDLE,\n\t\t\t\tJSON.stringify(uri.toJSON()),\n\t\t\t\tStorageScope.WORKSPACE,\n\t\t\t\tStorageTarget.MACHINE,\n\t\t\t);\n\t\t\tawait this.hostService.reload();\n\t\t}\n\t}\n\n\t// forget about all uris buffered more than 5 minutes ago\n\tprivate garbageCollect(): void {\n\t\tconst now = new Date().getTime();\n\t\tconst uriBuffer = new Map<string, { timestamp: number; uri: URI }[]>();\n\n\t\tthis.uriBuffer.forEach((uris, extensionId) => {\n\t\t\turis = uris.filter(\n\t\t\t\t({ timestamp }) => now - timestamp < FIVE_MINUTES,\n\t\t\t);\n\n\t\t\tif (uris.length > 0) {\n\t\t\t\turiBuffer.set(extensionId, uris);\n\t\t\t}\n\t\t});\n\n\t\tthis.uriBuffer = uriBuffer;\n\t}\n\n\tprivate didUserTrustExtension(id: string): boolean {\n\t\tif (this.userTrustedExtensionsStorage.has(id)) {\n\t\t\treturn true;\n\t\t}\n\n\t\treturn (\n\t\t\tthis.getConfirmedTrustedExtensionIdsFromConfiguration().indexOf(\n\t\t\t\tid,\n\t\t\t) > -1\n\t\t);\n\t}\n\n\tprivate getConfirmedTrustedExtensionIdsFromConfiguration(): Array<string> {\n\t\tconst trustedExtensionIds = this.configurationService.getValue(\n\t\t\tUSER_TRUSTED_EXTENSIONS_CONFIGURATION_KEY,\n\t\t);\n\n\t\tif (!Array.isArray(trustedExtensionIds)) {\n\t\t\treturn [];\n\t\t}\n\n\t\treturn trustedExtensionIds;\n\t}\n\n\tdispose(): void {\n\t\tthis.disposable.dispose();\n\t\tthis.extensionHandlers.clear();\n\t\tthis.uriBuffer.clear();\n\t}\n}\n\nregisterSingleton(\n\tIExtensionUrlHandler,\n\tExtensionUrlHandler,\n\tInstantiationType.Eager,\n);\n\n/**\n * This class handles URLs before `ExtensionUrlHandler` is instantiated.\n * More info: https://github.com/microsoft/vscode/issues/73101\n */\nclass ExtensionUrlBootstrapHandler\n\timplements IWorkbenchContribution, IURLHandler\n{\n\tstatic readonly ID = \"workbench.contrib.extensionUrlBootstrapHandler\";\n\n\tprivate static _cache: [URI, IOpenURLOptions | undefined][] = [];\n\tprivate static disposable: IDisposable;\n\n\tstatic get cache(): [URI, IOpenURLOptions | undefined][] {\n\t\tExtensionUrlBootstrapHandler.disposable.dispose();\n\n\t\tconst result = ExtensionUrlBootstrapHandler._cache;\n\t\tExtensionUrlBootstrapHandler._cache = [];\n\t\treturn result;\n\t}\n\n\tconstructor(@IURLService urlService: IURLService) {\n\t\tExtensionUrlBootstrapHandler.disposable = urlService.registerHandler(this);\n\t}\n\n\tasync handleURL(uri: URI, options?: IOpenURLOptions): Promise<boolean> {\n\t\tif (!isExtensionId(uri.authority)) {\n\t\t\treturn false;\n\t\t}\n\n\t\tExtensionUrlBootstrapHandler._cache.push([uri, options]);\n\t\treturn true;\n\t}\n}\n\nregisterWorkbenchContribution2(\n\tExtensionUrlBootstrapHandler.ID,\n\tExtensionUrlBootstrapHandler,\n\tWorkbenchPhase.BlockRestore /* registration only */,\n);\n\nclass ManageAuthorizedExtensionURIsAction extends Action2 {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: \"workbench.extensions.action.manageAuthorizedExtensionURIs\",\n\t\t\ttitle: localize2(\"manage\", \"Manage Authorized Extension URIs...\"),\n\t\t\tcategory: localize2(\"extensions\", \"Extensions\"),\n\t\t\tmenu: {\n\t\t\t\tid: MenuId.CommandPalette,\n\t\t\t\twhen: IsWebContext.toNegated(),\n\t\t\t},\n\t\t});\n\t}\n\n\tasync run(accessor: ServicesAccessor): Promise<void> {\n\t\tconst storageService = accessor.get(IStorageService);\n\t\tconst quickInputService = accessor.get(IQuickInputService);\n\t\tconst storage = new UserTrustedExtensionIdStorage(storageService);\n\t\tconst items = storage.extensions.map(\n\t\t\t(label): IQuickPickItem => ({ label, picked: true }),\n\t\t);\n\n\t\tif (items.length === 0) {\n\t\t\tawait quickInputService.pick([\n\t\t\t\t{\n\t\t\t\t\tlabel: localize(\n\t\t\t\t\t\t\"no\",\n\t\t\t\t\t\t\"There are currently no authorized extension URIs.\",\n\t\t\t\t\t),\n\t\t\t\t},\n\t\t\t]);\n\t\t\treturn;\n\t\t}\n\n\t\tconst result = await quickInputService.pick(items, {\n\t\t\tcanPickMany: true,\n\t\t});\n\n\t\tif (!result) {\n\t\t\treturn;\n\t\t}\n\n\t\tstorage.set(result.map((item) => item.label));\n\t}\n}\n\nregisterAction2(ManageAuthorizedExtensionURIsAction);\n"],
  "mappings": ";;;;;;;;;;;;AAKA,SAAS,gCAAgC;AACzC,SAAS,kBAAkB;AAC3B,SAAS,2BAA2B;AACpC;AAAA,EAEC;AAAA,OACM;AACP,SAAS,WAAW;AACpB,SAAS,UAAU,iBAAiB;AACpC;AAAA,EACC;AAAA,EACA;AAAA,EACA;AAAA,OACM;AACP,SAAS,uBAAuB;AAChC,SAAS,6BAA6B;AACtC,SAAS,oBAAoB;AAC7B,SAAS,sBAAsB;AAC/B,SAAS,2BAA2B;AACpC;AAAA,EACC;AAAA,EACA;AAAA,OACM;AACP;AAAA,EAEC;AAAA,OACM;AACP,SAAS,4BAA4B;AACrC,SAAS,uBAAuB;AAChC;AAAA,EACC;AAAA,OAEM;AACP;AAAA,EACC;AAAA,EACA;AAAA,EACA;AAAA,OACM;AACP,SAAS,yBAAyB;AAClC;AAAA,EAGC;AAAA,OACM;AACP;AAAA,EAEC;AAAA,EACA;AAAA,OACM;AACP,SAAS,oCAAoC;AAC7C,SAAS,oBAAoB;AAC7B,SAAS,gBAAgB,yBAAyB;AAElD,MAAM,eAAe,IAAI,KAAK;AAC9B,MAAM,iBAAiB,KAAK;AAC5B,MAAM,gBAAgB;AACtB,MAAM,4CACL;AACD,MAAM,sCACL;AAED,SAAS,cAAc,OAAwB;AAC9C,SAAO,4CAA4C,KAAK,KAAK;AAC9D;AAFS;AAIT,MAAM,8BAA8B;AAAA,EAenC,YAAoB,gBAAiC;AAAjC;AAAA,EAAkC;AAAA,EArFvD,OAsEoC;AAAA;AAAA;AAAA,EACnC,IAAI,aAAuB;AAC1B,UAAM,8BAA8B,KAAK,eAAe;AAAA,MACvD;AAAA,MACA,aAAa;AAAA,MACb;AAAA,IACD;AAEA,QAAI;AACH,aAAO,KAAK,MAAM,2BAA2B;AAAA,IAC9C,QAAQ;AACP,aAAO,CAAC;AAAA,IACT;AAAA,EACD;AAAA,EAIA,IAAI,IAAqB;AACxB,WAAO,KAAK,WAAW,QAAQ,EAAE,IAAI;AAAA,EACtC;AAAA,EAEA,IAAI,IAAkB;AACrB,SAAK,IAAI,CAAC,GAAG,KAAK,YAAY,EAAE,CAAC;AAAA,EAClC;AAAA,EAEA,IAAI,KAAqB;AACxB,SAAK,eAAe;AAAA,MACnB;AAAA,MACA,KAAK,UAAU,GAAG;AAAA,MAClB,aAAa;AAAA,MACb,cAAc;AAAA,IACf;AAAA,EACD;AACD;AAEO,MAAM,uBAAuB;AAAA,EACnC;AACD;AA0DA,IAAM,sBAAN,MAAuE;AAAA,EAWtE,YACc,YACuB,kBACH,eACC,gBACH,aACG,gBACM,sBACJ,kBACG,qBACL,gBACa,6BAC9C;AAVmC;AACH;AACC;AACH;AACG;AACM;AACJ;AACG;AACL;AACa;AAE/C,SAAK,+BAA+B,IAAI,8BAA8B,cAAc;AAEpF,UAAM,WAAW,yBAAyB,YAAY,MAAM,KAAK,eAAe,GAAG,cAAc;AACjG,UAAM,mBAAmB,KAAK,eAAe,IAAI,eAAe,aAAa,SAAS;AACtF,QAAI,kBAAkB;AACrB,WAAK,eAAe,OAAO,eAAe,aAAa,SAAS;AAChE,WAAK,UAAU,IAAI,OAAO,KAAK,MAAM,gBAAgB,CAAC,GAAG,EAAE,SAAS,KAAK,CAAC;AAAA,IAC3E;AAEA,SAAK,aAAa;AAAA,MACjB,WAAW,gBAAgB,IAAI;AAAA,MAC/B;AAAA,IACD;AAEA,UAAM,QAAQ,6BAA6B;AAC3C,eAAW,MAAM,MAAM,QAAQ,CAAC,CAAC,KAAK,MAAM,MAAM,KAAK,UAAU,KAAK,MAAM,CAAC,CAAC;AAAA,EAC/E;AAAA,EA7MD,OAqKuE;AAAA;AAAA;AAAA,EAC7D;AAAA,EAED,oBAAoB,oBAAI,IAG9B;AAAA,EACM,YAAY,oBAAI,IAA+C;AAAA,EAC/D;AAAA,EACA;AAAA,EAiCR,MAAM,UAAU,KAAU,SAA6C;AACtE,QAAI,CAAC,cAAc,IAAI,SAAS,GAAG;AAClC,aAAO;AAAA,IACR;AAEA,UAAM,cAAc,IAAI;AACxB,SAAK,iBAAiB,WAGpB,qBAAqB,EAAE,YAAY,CAAC;AAEtC,UAAM,iBAAiB,KAAK,kBAAkB;AAAA,MAC7C,oBAAoB,MAAM,WAAW;AAAA,IACtC;AACA,QAAI;AAEJ,QAAI,gBAAgB;AACnB,6BAAuB,eAAe;AAAA,IACvC,OAAO;AAEN,YAAM,YACL,MAAM,KAAK,iBAAiB,aAAa,WAAW;AACrD,UAAI,WAAW;AACd,+BAAuB,UAAU,eAAe;AAAA,MACjD,OAAO;AACN,cAAM,KAAK,mBAAmB,KAAK,aAAa,OAAO;AACvD,eAAO;AAAA,MACR;AAAA,IACD;AAEA,UAAM,UACL,SAAS,WACT,KAAK,eAAe,kCAAkC;AAAA,MACrD;AAAA,IACD,KACA,KAAK,sBAAsB,oBAAoB,MAAM,WAAW,CAAC;AAElE,QAAI,CAAC,SAAS;AACb,UAAI,YAAY,IAAI,SAAS,KAAK;AAElC,UAAI,UAAU,SAAS,IAAI;AAC1B,oBAAY,GAAG,UAAU,UAAU,GAAG,EAAE,CAAC,MAAM,UAAU,UAAU,UAAU,SAAS,CAAC,CAAC;AAAA,MACzF;AAEA,YAAM,SAAS,MAAM,KAAK,cAAc,QAAQ;AAAA,QAC/C,SAAS;AAAA,UACR;AAAA,UACA;AAAA,UACA;AAAA,QACD;AAAA,QACA,UAAU;AAAA,UACT,OAAO;AAAA,YACN;AAAA,YACA;AAAA,UACD;AAAA,QACD;AAAA,QACA,QAAQ;AAAA,QACR,eAAe;AAAA,UACd,EAAE,KAAK,QAAQ,SAAS,CAAC,uBAAuB,EAAE;AAAA,UAClD;AAAA,QACD;AAAA,MACD,CAAC;AAED,UAAI,CAAC,OAAO,WAAW;AACtB,aAAK,iBAAiB,WAGpB,sBAAsB,EAAE,YAAY,CAAC;AACvC,eAAO;AAAA,MACR;AAEA,UAAI,OAAO,iBAAiB;AAC3B,aAAK,6BAA6B;AAAA,UACjC,oBAAoB,MAAM,WAAW;AAAA,QACtC;AAAA,MACD;AAAA,IACD;AAEA,UAAM,UAAU,KAAK,kBAAkB;AAAA,MACtC,oBAAoB,MAAM,WAAW;AAAA,IACtC;AAEA,QAAI,SAAS;AACZ,UAAI,CAAC,gBAAgB;AAEpB,eAAO,MAAM,KAAK;AAAA,UACjB;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,QACD;AAAA,MACD;AAGA,aAAO;AAAA,IACR;AAGA,UAAM,aAAY,oBAAI,KAAK,GAAE,QAAQ;AACrC,QAAI,OAAO,KAAK,UAAU,IAAI,oBAAoB,MAAM,WAAW,CAAC;AAEpE,QAAI,CAAC,MAAM;AACV,aAAO,CAAC;AACR,WAAK,UAAU,IAAI,oBAAoB,MAAM,WAAW,GAAG,IAAI;AAAA,IAChE;AAEA,SAAK,KAAK,EAAE,WAAW,IAAI,CAAC;AAI5B,UAAM,KAAK,iBAAiB;AAAA,MAC3B,SAAS,oBAAoB,MAAM,WAAW,CAAC;AAAA,MAC/C,eAAe;AAAA,IAChB;AACA,WAAO;AAAA,EACR;AAAA,EAEA,yBACC,aACA,SACO;AACP,SAAK,kBAAkB;AAAA,MACtB,oBAAoB,MAAM,WAAW;AAAA,MACrC;AAAA,IACD;AAEA,UAAM,OACL,KAAK,UAAU,IAAI,oBAAoB,MAAM,WAAW,CAAC,KAAK,CAAC;AAEhE,eAAW,EAAE,IAAI,KAAK,MAAM;AAC3B,WAAK,qBAAqB,aAAa,SAAS,GAAG;AAAA,IACpD;AAEA,SAAK,UAAU,OAAO,oBAAoB,MAAM,WAAW,CAAC;AAAA,EAC7D;AAAA,EAEA,2BAA2B,aAAwC;AAClE,SAAK,kBAAkB,OAAO,oBAAoB,MAAM,WAAW,CAAC;AAAA,EACrE;AAAA,EAEA,MAAc,qBACb,aACA,SACA,KACA,SACmB;AACnB,SAAK,iBAAiB,WAGpB,mBAAmB;AAAA,MACpB,aAAa,oBAAoB,MAAM,WAAW;AAAA,IACnD,CAAC;AACD,WAAO,MAAM,QAAQ,UAAU,KAAK,OAAO;AAAA,EAC5C;AAAA,EAEA,MAAc,mBACb,KACA,aACA,SACgB;AAChB,SAAK,iBAAiB,WAGpB,uCAAuC,EAAE,YAAY,CAAC;AAExD,QAAI;AACH,YAAM,KAAK,eAAe;AAAA,QACzB;AAAA,QACA;AAAA,QACA;AAAA,UACC,eAAe;AAAA,YACd,QAAQ,GAAG,SAAS,iBAAiB,qCAAqC,CAAC;AAAA,EAAK,IAAI,SAAS,CAAC;AAAA,YAC9F,QAAQ,SAAS,WAAW,UAAU;AAAA,UACvC;AAAA,UACA,QAAQ;AAAA,QACT;AAAA,MACD;AACA,WAAK,iBAAiB,WAGpB,wCAAwC,EAAE,YAAY,CAAC;AAAA,IAC1D,SAAS,OAAO;AACf,UAAI,oBAAoB,KAAK,GAAG;AAC/B,aAAK,iBAAiB,WAGpB,wCAAwC,EAAE,YAAY,CAAC;AAAA,MAC1D,OAAO;AACN,aAAK,iBAAiB,WAGpB,uCAAuC,EAAE,YAAY,CAAC;AACxD,aAAK,oBAAoB,MAAM,KAAK;AAAA,MACrC;AACA;AAAA,IACD;AAEA,UAAM,YAAY,MAAM,KAAK,iBAAiB,aAAa,WAAW;AAEtE,QAAI,WAAW;AACd,YAAM,KAAK,UAAU,KAAK,EAAE,GAAG,SAAS,SAAS,KAAK,CAAC;AAAA,IACxD,OAAO;AAGN,WAAK,iBAAiB,WAGpB,wCAAwC;AAAA,QACzC;AAAA,QACA,UAAU,CAAC,CAAC,KAAK,4BAA4B;AAAA,MAC9C,CAAC;AACD,YAAM,SAAS,MAAM,KAAK,cAAc,QAAQ;AAAA,QAC/C,SAAS;AAAA,UACR;AAAA,UACA;AAAA,UACA;AAAA,QACD;AAAA,QACA,eAAe;AAAA,UACd;AAAA,YACC,KAAK;AAAA,YACL,SAAS,CAAC,uBAAuB;AAAA,UAClC;AAAA,UACA;AAAA,QACD;AAAA,MACD,CAAC;AAED,UAAI,CAAC,OAAO,WAAW;AACtB;AAAA,MACD;AAEA,WAAK,eAAe;AAAA,QACnB;AAAA,QACA,KAAK,UAAU,IAAI,OAAO,CAAC;AAAA,QAC3B,aAAa;AAAA,QACb,cAAc;AAAA,MACf;AACA,YAAM,KAAK,YAAY,OAAO;AAAA,IAC/B;AAAA,EACD;AAAA;AAAA,EAGQ,iBAAuB;AAC9B,UAAM,OAAM,oBAAI,KAAK,GAAE,QAAQ;AAC/B,UAAM,YAAY,oBAAI,IAA+C;AAErE,SAAK,UAAU,QAAQ,CAAC,MAAM,gBAAgB;AAC7C,aAAO,KAAK;AAAA,QACX,CAAC,EAAE,UAAU,MAAM,MAAM,YAAY;AAAA,MACtC;AAEA,UAAI,KAAK,SAAS,GAAG;AACpB,kBAAU,IAAI,aAAa,IAAI;AAAA,MAChC;AAAA,IACD,CAAC;AAED,SAAK,YAAY;AAAA,EAClB;AAAA,EAEQ,sBAAsB,IAAqB;AAClD,QAAI,KAAK,6BAA6B,IAAI,EAAE,GAAG;AAC9C,aAAO;AAAA,IACR;AAEA,WACC,KAAK,iDAAiD,EAAE;AAAA,MACvD;AAAA,IACD,IAAI;AAAA,EAEN;AAAA,EAEQ,mDAAkE;AACzE,UAAM,sBAAsB,KAAK,qBAAqB;AAAA,MACrD;AAAA,IACD;AAEA,QAAI,CAAC,MAAM,QAAQ,mBAAmB,GAAG;AACxC,aAAO,CAAC;AAAA,IACT;AAEA,WAAO;AAAA,EACR;AAAA,EAEA,UAAgB;AACf,SAAK,WAAW,QAAQ;AACxB,SAAK,kBAAkB,MAAM;AAC7B,SAAK,UAAU,MAAM;AAAA,EACtB;AACD;AAzUM,sBAAN;AAAA,EAYG;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,GAtBG;AA2UN;AAAA,EACC;AAAA,EACA;AAAA,EACA,kBAAkB;AACnB;AAMA,IAAM,+BAAN,MAEA;AAAA,EA5fA,OA4fA;AAAA;AAAA;AAAA,EACC,OAAgB,KAAK;AAAA,EAErB,OAAe,SAA+C,CAAC;AAAA,EAC/D,OAAe;AAAA,EAEf,WAAW,QAA8C;AACxD,iCAA6B,WAAW,QAAQ;AAEhD,UAAM,SAAS,6BAA6B;AAC5C,iCAA6B,SAAS,CAAC;AACvC,WAAO;AAAA,EACR;AAAA,EAEA,YAAyB,YAAyB;AACjD,iCAA6B,aAAa,WAAW,gBAAgB,IAAI;AAAA,EAC1E;AAAA,EAEA,MAAM,UAAU,KAAU,SAA6C;AACtE,QAAI,CAAC,cAAc,IAAI,SAAS,GAAG;AAClC,aAAO;AAAA,IACR;AAEA,iCAA6B,OAAO,KAAK,CAAC,KAAK,OAAO,CAAC;AACvD,WAAO;AAAA,EACR;AACD;AA5BM,+BAAN;AAAA,EAgBc;AAAA,GAhBR;AA8BN;AAAA,EACC,6BAA6B;AAAA,EAC7B;AAAA,EACA,eAAe;AAChB;AAEA,MAAM,4CAA4C,QAAQ;AAAA,EA9hB1D,OA8hB0D;AAAA;AAAA;AAAA,EACzD,cAAc;AACb,UAAM;AAAA,MACL,IAAI;AAAA,MACJ,OAAO,UAAU,UAAU,qCAAqC;AAAA,MAChE,UAAU,UAAU,cAAc,YAAY;AAAA,MAC9C,MAAM;AAAA,QACL,IAAI,OAAO;AAAA,QACX,MAAM,aAAa,UAAU;AAAA,MAC9B;AAAA,IACD,CAAC;AAAA,EACF;AAAA,EAEA,MAAM,IAAI,UAA2C;AACpD,UAAM,iBAAiB,SAAS,IAAI,eAAe;AACnD,UAAM,oBAAoB,SAAS,IAAI,kBAAkB;AACzD,UAAM,UAAU,IAAI,8BAA8B,cAAc;AAChE,UAAM,QAAQ,QAAQ,WAAW;AAAA,MAChC,CAAC,WAA2B,EAAE,OAAO,QAAQ,KAAK;AAAA,IACnD;AAEA,QAAI,MAAM,WAAW,GAAG;AACvB,YAAM,kBAAkB,KAAK;AAAA,QAC5B;AAAA,UACC,OAAO;AAAA,YACN;AAAA,YACA;AAAA,UACD;AAAA,QACD;AAAA,MACD,CAAC;AACD;AAAA,IACD;AAEA,UAAM,SAAS,MAAM,kBAAkB,KAAK,OAAO;AAAA,MAClD,aAAa;AAAA,IACd,CAAC;AAED,QAAI,CAAC,QAAQ;AACZ;AAAA,IACD;AAEA,YAAQ,IAAI,OAAO,IAAI,CAAC,SAAS,KAAK,KAAK,CAAC;AAAA,EAC7C;AACD;AAEA,gBAAgB,mCAAmC;",
  "names": []
}
