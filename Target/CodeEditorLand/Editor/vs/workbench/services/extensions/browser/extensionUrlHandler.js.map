{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/extensions/browser/extensionUrlHandler.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { localize, localize2 } from '../../../../nls.js';\nimport { IDisposable, combinedDisposable } from '../../../../base/common/lifecycle.js';\nimport { URI } from '../../../../base/common/uri.js';\nimport { IConfigurationService } from '../../../../platform/configuration/common/configuration.js';\nimport { IDialogService } from '../../../../platform/dialogs/common/dialogs.js';\nimport { createDecorator, ServicesAccessor } from '../../../../platform/instantiation/common/instantiation.js';\nimport { IStorageService, StorageScope, StorageTarget } from '../../../../platform/storage/common/storage.js';\nimport { IURLHandler, IURLService, IOpenURLOptions } from '../../../../platform/url/common/url.js';\nimport { IHostService } from '../../host/browser/host.js';\nimport { ActivationKind, IExtensionService } from '../common/extensions.js';\nimport { ExtensionIdentifier } from '../../../../platform/extensions/common/extensions.js';\nimport { InstantiationType, registerSingleton } from '../../../../platform/instantiation/common/extensions.js';\nimport { IWorkbenchContribution, WorkbenchPhase, registerWorkbenchContribution2 } from '../../../common/contributions.js';\nimport { Action2, MenuId, registerAction2 } from '../../../../platform/actions/common/actions.js';\nimport { IQuickInputService, IQuickPickItem } from '../../../../platform/quickinput/common/quickInput.js';\nimport { IsWebContext } from '../../../../platform/contextkey/common/contextkeys.js';\nimport { ITelemetryService } from '../../../../platform/telemetry/common/telemetry.js';\nimport { IProductService } from '../../../../platform/product/common/productService.js';\nimport { disposableWindowInterval } from '../../../../base/browser/dom.js';\nimport { mainWindow } from '../../../../base/browser/window.js';\nimport { ICommandService } from '../../../../platform/commands/common/commands.js';\nimport { isCancellationError } from '../../../../base/common/errors.js';\nimport { INotificationService } from '../../../../platform/notification/common/notification.js';\nimport { IWorkbenchEnvironmentService } from '../../environment/common/environmentService.js';\n\nconst FIVE_MINUTES = 5 * 60 * 1000;\nconst THIRTY_SECONDS = 30 * 1000;\nconst URL_TO_HANDLE = 'extensionUrlHandler.urlToHandle';\nconst USER_TRUSTED_EXTENSIONS_CONFIGURATION_KEY = 'extensions.confirmedUriHandlerExtensionIds';\nconst USER_TRUSTED_EXTENSIONS_STORAGE_KEY = 'extensionUrlHandler.confirmedExtensions';\n\nfunction isExtensionId(value: string): boolean {\n\treturn /^[a-z0-9][a-z0-9\\-]*\\.[a-z0-9][a-z0-9\\-]*$/i.test(value);\n}\n\nclass UserTrustedExtensionIdStorage {\n\n\tget extensions(): string[] {\n\t\tconst userTrustedExtensionIdsJson = this.storageService.get(USER_TRUSTED_EXTENSIONS_STORAGE_KEY, StorageScope.PROFILE, '[]');\n\n\t\ttry {\n\t\t\treturn JSON.parse(userTrustedExtensionIdsJson);\n\t\t} catch {\n\t\t\treturn [];\n\t\t}\n\t}\n\n\tconstructor(private storageService: IStorageService) { }\n\n\thas(id: string): boolean {\n\t\treturn this.extensions.indexOf(id) > -1;\n\t}\n\n\tadd(id: string): void {\n\t\tthis.set([...this.extensions, id]);\n\t}\n\n\tset(ids: string[]): void {\n\t\tthis.storageService.store(USER_TRUSTED_EXTENSIONS_STORAGE_KEY, JSON.stringify(ids), StorageScope.PROFILE, StorageTarget.MACHINE);\n\t}\n}\n\nexport const IExtensionUrlHandler = createDecorator<IExtensionUrlHandler>('extensionUrlHandler');\n\nexport interface IExtensionContributedURLHandler extends IURLHandler {\n\textensionDisplayName: string;\n}\n\nexport interface IExtensionUrlHandler {\n\treadonly _serviceBrand: undefined;\n\tregisterExtensionHandler(extensionId: ExtensionIdentifier, handler: IExtensionContributedURLHandler): void;\n\tunregisterExtensionHandler(extensionId: ExtensionIdentifier): void;\n}\n\nexport interface ExtensionUrlHandlerEvent {\n\treadonly extensionId: string;\n}\n\ntype ExtensionUrlHandlerClassification = {\n\towner: 'joaomoreno';\n\treadonly extensionId: { classification: 'PublicNonPersonalData'; purpose: 'FeatureInsight'; comment: 'The ID of the extension that should handle the URI' };\n\tcomment: 'This is used to understand the drop funnel of extension URI handling by the OS & VS Code.';\n};\n\ninterface ExtensionUrlReloadHandlerEvent {\n\treadonly extensionId: string;\n\treadonly isRemote: boolean;\n}\n\ntype ExtensionUrlReloadHandlerClassification = {\n\towner: 'sandy081';\n\treadonly extensionId: { classification: 'PublicNonPersonalData'; purpose: 'FeatureInsight'; comment: 'The ID of the extension that should handle the URI' };\n\treadonly isRemote: { classification: 'PublicNonPersonalData'; purpose: 'FeatureInsight'; comment: 'Whether the current window is a remote window' };\n\tcomment: 'This is used to understand the drop funnel of extension URI handling by the OS & VS Code.';\n};\n\n/**\n * This class handles URLs which are directed towards extensions.\n * If a URL is directed towards an inactive extension, it buffers it,\n * activates the extension and re-opens the URL once the extension registers\n * a URL handler. If the extension never registers a URL handler, the urls\n * will eventually be garbage collected.\n *\n * It also makes sure the user confirms opening URLs directed towards extensions.\n */\nclass ExtensionUrlHandler implements IExtensionUrlHandler, IURLHandler {\n\n\treadonly _serviceBrand: undefined;\n\n\tprivate extensionHandlers = new Map<string, IExtensionContributedURLHandler>();\n\tprivate uriBuffer = new Map<string, { timestamp: number; uri: URI }[]>();\n\tprivate userTrustedExtensionsStorage: UserTrustedExtensionIdStorage;\n\tprivate disposable: IDisposable;\n\n\tconstructor(\n\t\t@IURLService urlService: IURLService,\n\t\t@IExtensionService private readonly extensionService: IExtensionService,\n\t\t@IDialogService private readonly dialogService: IDialogService,\n\t\t@ICommandService private readonly commandService: ICommandService,\n\t\t@IHostService private readonly hostService: IHostService,\n\t\t@IStorageService private readonly storageService: IStorageService,\n\t\t@IConfigurationService private readonly configurationService: IConfigurationService,\n\t\t@ITelemetryService private readonly telemetryService: ITelemetryService,\n\t\t@INotificationService private readonly notificationService: INotificationService,\n\t\t@IProductService private readonly productService: IProductService,\n\t\t@IWorkbenchEnvironmentService private readonly workbenchEnvironmentService: IWorkbenchEnvironmentService\n\t) {\n\t\tthis.userTrustedExtensionsStorage = new UserTrustedExtensionIdStorage(storageService);\n\n\t\tconst interval = disposableWindowInterval(mainWindow, () => this.garbageCollect(), THIRTY_SECONDS);\n\t\tconst urlToHandleValue = this.storageService.get(URL_TO_HANDLE, StorageScope.WORKSPACE);\n\t\tif (urlToHandleValue) {\n\t\t\tthis.storageService.remove(URL_TO_HANDLE, StorageScope.WORKSPACE);\n\t\t\tthis.handleURL(URI.revive(JSON.parse(urlToHandleValue)), { trusted: true });\n\t\t}\n\n\t\tthis.disposable = combinedDisposable(\n\t\t\turlService.registerHandler(this),\n\t\t\tinterval\n\t\t);\n\n\t\tconst cache = ExtensionUrlBootstrapHandler.cache;\n\t\tsetTimeout(() => cache.forEach(([uri, option]) => this.handleURL(uri, option)));\n\t}\n\n\tasync handleURL(uri: URI, options?: IOpenURLOptions): Promise<boolean> {\n\t\tif (!isExtensionId(uri.authority)) {\n\t\t\treturn false;\n\t\t}\n\n\t\tconst extensionId = uri.authority;\n\t\tthis.telemetryService.publicLog2<ExtensionUrlHandlerEvent, ExtensionUrlHandlerClassification>('uri_invoked/start', { extensionId });\n\n\t\tconst initialHandler = this.extensionHandlers.get(ExtensionIdentifier.toKey(extensionId));\n\t\tlet extensionDisplayName: string;\n\n\t\tif (!initialHandler) {\n\t\t\t// The extension is not yet activated, so let's check if it is installed and enabled\n\t\t\tconst extension = await this.extensionService.getExtension(extensionId);\n\t\t\tif (!extension) {\n\t\t\t\tawait this.handleUnhandledURL(uri, extensionId, options);\n\t\t\t\treturn true;\n\t\t\t} else {\n\t\t\t\textensionDisplayName = extension.displayName ?? '';\n\t\t\t}\n\t\t} else {\n\t\t\textensionDisplayName = initialHandler.extensionDisplayName;\n\t\t}\n\n\t\tconst trusted = options?.trusted\n\t\t\t|| this.productService.trustedExtensionProtocolHandlers?.includes(extensionId)\n\t\t\t|| this.didUserTrustExtension(ExtensionIdentifier.toKey(extensionId));\n\n\t\tif (!trusted) {\n\t\t\tlet uriString = uri.toString(false);\n\n\t\t\tif (uriString.length > 40) {\n\t\t\t\turiString = `${uriString.substring(0, 30)}...${uriString.substring(uriString.length - 5)}`;\n\t\t\t}\n\n\t\t\tconst result = await this.dialogService.confirm({\n\t\t\t\tmessage: localize('confirmUrl', \"Allow '{0}' extension to open this URI?\", extensionDisplayName),\n\t\t\t\tcheckbox: {\n\t\t\t\t\tlabel: localize('rememberConfirmUrl', \"Do not ask me again for this extension\"),\n\t\t\t\t},\n\t\t\t\tdetail: uriString,\n\t\t\t\tprimaryButton: localize({ key: 'open', comment: ['&& denotes a mnemonic'] }, \"&&Open\")\n\t\t\t});\n\n\t\t\tif (!result.confirmed) {\n\t\t\t\tthis.telemetryService.publicLog2<ExtensionUrlHandlerEvent, ExtensionUrlHandlerClassification>('uri_invoked/cancel', { extensionId });\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\tif (result.checkboxChecked) {\n\t\t\t\tthis.userTrustedExtensionsStorage.add(ExtensionIdentifier.toKey(extensionId));\n\t\t\t}\n\t\t}\n\n\t\tconst handler = this.extensionHandlers.get(ExtensionIdentifier.toKey(extensionId));\n\n\t\tif (handler) {\n\t\t\tif (!initialHandler) {\n\t\t\t\t// forward it directly\n\t\t\t\treturn await this.handleURLByExtension(extensionId, handler, uri, options);\n\t\t\t}\n\n\t\t\t// let the ExtensionUrlHandler instance handle this\n\t\t\treturn false;\n\t\t}\n\n\t\t// collect URI for eventual extension activation\n\t\tconst timestamp = new Date().getTime();\n\t\tlet uris = this.uriBuffer.get(ExtensionIdentifier.toKey(extensionId));\n\n\t\tif (!uris) {\n\t\t\turis = [];\n\t\t\tthis.uriBuffer.set(ExtensionIdentifier.toKey(extensionId), uris);\n\t\t}\n\n\t\turis.push({ timestamp, uri });\n\n\t\t// activate the extension using ActivationKind.Immediate because URI handling might be part\n\t\t// of resolving authorities (via authentication extensions)\n\t\tawait this.extensionService.activateByEvent(`onUri:${ExtensionIdentifier.toKey(extensionId)}`, ActivationKind.Immediate);\n\t\treturn true;\n\t}\n\n\tregisterExtensionHandler(extensionId: ExtensionIdentifier, handler: IExtensionContributedURLHandler): void {\n\t\tthis.extensionHandlers.set(ExtensionIdentifier.toKey(extensionId), handler);\n\n\t\tconst uris = this.uriBuffer.get(ExtensionIdentifier.toKey(extensionId)) || [];\n\n\t\tfor (const { uri } of uris) {\n\t\t\tthis.handleURLByExtension(extensionId, handler, uri);\n\t\t}\n\n\t\tthis.uriBuffer.delete(ExtensionIdentifier.toKey(extensionId));\n\t}\n\n\tunregisterExtensionHandler(extensionId: ExtensionIdentifier): void {\n\t\tthis.extensionHandlers.delete(ExtensionIdentifier.toKey(extensionId));\n\t}\n\n\tprivate async handleURLByExtension(extensionId: ExtensionIdentifier | string, handler: IURLHandler, uri: URI, options?: IOpenURLOptions): Promise<boolean> {\n\t\tthis.telemetryService.publicLog2<ExtensionUrlHandlerEvent, ExtensionUrlHandlerClassification>('uri_invoked/end', { extensionId: ExtensionIdentifier.toKey(extensionId) });\n\t\treturn await handler.handleURL(uri, options);\n\t}\n\n\tprivate async handleUnhandledURL(uri: URI, extensionId: string, options?: IOpenURLOptions): Promise<void> {\n\n\t\tthis.telemetryService.publicLog2<ExtensionUrlHandlerEvent, ExtensionUrlHandlerClassification>('uri_invoked/install_extension/start', { extensionId });\n\n\t\ttry {\n\t\t\tawait this.commandService.executeCommand('workbench.extensions.installExtension', extensionId, {\n\t\t\t\tjustification: {\n\t\t\t\t\treason: `${localize('installDetail', \"This extension wants to open a URI:\")}\\n${uri.toString()}`,\n\t\t\t\t\taction: localize('openUri', \"Open URI\")\n\t\t\t\t},\n\t\t\t\tenable: true\n\t\t\t});\n\t\t\tthis.telemetryService.publicLog2<ExtensionUrlHandlerEvent, ExtensionUrlHandlerClassification>('uri_invoked/install_extension/accept', { extensionId });\n\t\t} catch (error) {\n\t\t\tif (isCancellationError(error)) {\n\t\t\t\tthis.telemetryService.publicLog2<ExtensionUrlHandlerEvent, ExtensionUrlHandlerClassification>('uri_invoked/install_extension/cancel', { extensionId });\n\t\t\t} else {\n\t\t\t\tthis.telemetryService.publicLog2<ExtensionUrlHandlerEvent, ExtensionUrlHandlerClassification>('uri_invoked/install_extension/error', { extensionId });\n\t\t\t\tthis.notificationService.error(error);\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\n\t\tconst extension = await this.extensionService.getExtension(extensionId);\n\n\t\tif (extension) {\n\t\t\tawait this.handleURL(uri, { ...options, trusted: true });\n\t\t}\n\n\t\t/* Extension cannot be added and require window reload */\n\t\telse {\n\t\t\tthis.telemetryService.publicLog2<ExtensionUrlReloadHandlerEvent, ExtensionUrlReloadHandlerClassification>('uri_invoked/install_extension/reload', { extensionId, isRemote: !!this.workbenchEnvironmentService.remoteAuthority });\n\t\t\tconst result = await this.dialogService.confirm({\n\t\t\t\tmessage: localize('reloadAndHandle', \"Extension '{0}' is not loaded. Would you like to reload the window to load the extension and open the URL?\", extensionId),\n\t\t\t\tprimaryButton: localize({ key: 'reloadAndOpen', comment: ['&& denotes a mnemonic'] }, \"&&Reload Window and Open\")\n\t\t\t});\n\n\t\t\tif (!result.confirmed) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis.storageService.store(URL_TO_HANDLE, JSON.stringify(uri.toJSON()), StorageScope.WORKSPACE, StorageTarget.MACHINE);\n\t\t\tawait this.hostService.reload();\n\t\t}\n\t}\n\n\t// forget about all uris buffered more than 5 minutes ago\n\tprivate garbageCollect(): void {\n\t\tconst now = new Date().getTime();\n\t\tconst uriBuffer = new Map<string, { timestamp: number; uri: URI }[]>();\n\n\t\tthis.uriBuffer.forEach((uris, extensionId) => {\n\t\t\turis = uris.filter(({ timestamp }) => now - timestamp < FIVE_MINUTES);\n\n\t\t\tif (uris.length > 0) {\n\t\t\t\turiBuffer.set(extensionId, uris);\n\t\t\t}\n\t\t});\n\n\t\tthis.uriBuffer = uriBuffer;\n\t}\n\n\tprivate didUserTrustExtension(id: string): boolean {\n\t\tif (this.userTrustedExtensionsStorage.has(id)) {\n\t\t\treturn true;\n\t\t}\n\n\t\treturn this.getConfirmedTrustedExtensionIdsFromConfiguration().indexOf(id) > -1;\n\t}\n\n\tprivate getConfirmedTrustedExtensionIdsFromConfiguration(): Array<string> {\n\t\tconst trustedExtensionIds = this.configurationService.getValue(USER_TRUSTED_EXTENSIONS_CONFIGURATION_KEY);\n\n\t\tif (!Array.isArray(trustedExtensionIds)) {\n\t\t\treturn [];\n\t\t}\n\n\t\treturn trustedExtensionIds;\n\t}\n\n\tdispose(): void {\n\t\tthis.disposable.dispose();\n\t\tthis.extensionHandlers.clear();\n\t\tthis.uriBuffer.clear();\n\t}\n}\n\nregisterSingleton(IExtensionUrlHandler, ExtensionUrlHandler, InstantiationType.Eager);\n\n/**\n * This class handles URLs before `ExtensionUrlHandler` is instantiated.\n * More info: https://github.com/microsoft/vscode/issues/73101\n */\nclass ExtensionUrlBootstrapHandler implements IWorkbenchContribution, IURLHandler {\n\n\tstatic readonly ID = 'workbench.contrib.extensionUrlBootstrapHandler';\n\n\tprivate static _cache: [URI, IOpenURLOptions | undefined][] = [];\n\tprivate static disposable: IDisposable;\n\n\tstatic get cache(): [URI, IOpenURLOptions | undefined][] {\n\t\tExtensionUrlBootstrapHandler.disposable.dispose();\n\n\t\tconst result = ExtensionUrlBootstrapHandler._cache;\n\t\tExtensionUrlBootstrapHandler._cache = [];\n\t\treturn result;\n\t}\n\n\tconstructor(@IURLService urlService: IURLService) {\n\t\tExtensionUrlBootstrapHandler.disposable = urlService.registerHandler(this);\n\t}\n\n\tasync handleURL(uri: URI, options?: IOpenURLOptions): Promise<boolean> {\n\t\tif (!isExtensionId(uri.authority)) {\n\t\t\treturn false;\n\t\t}\n\n\t\tExtensionUrlBootstrapHandler._cache.push([uri, options]);\n\t\treturn true;\n\t}\n}\n\nregisterWorkbenchContribution2(ExtensionUrlBootstrapHandler.ID, ExtensionUrlBootstrapHandler, WorkbenchPhase.BlockRestore /* registration only */);\n\nclass ManageAuthorizedExtensionURIsAction extends Action2 {\n\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: 'workbench.extensions.action.manageAuthorizedExtensionURIs',\n\t\t\ttitle: localize2('manage', 'Manage Authorized Extension URIs...'),\n\t\t\tcategory: localize2('extensions', 'Extensions'),\n\t\t\tmenu: {\n\t\t\t\tid: MenuId.CommandPalette,\n\t\t\t\twhen: IsWebContext.toNegated()\n\t\t\t}\n\t\t});\n\t}\n\n\tasync run(accessor: ServicesAccessor): Promise<void> {\n\t\tconst storageService = accessor.get(IStorageService);\n\t\tconst quickInputService = accessor.get(IQuickInputService);\n\t\tconst storage = new UserTrustedExtensionIdStorage(storageService);\n\t\tconst items = storage.extensions.map((label): IQuickPickItem => ({ label, picked: true }));\n\n\t\tif (items.length === 0) {\n\t\t\tawait quickInputService.pick([{ label: localize('no', 'There are currently no authorized extension URIs.') }]);\n\t\t\treturn;\n\t\t}\n\n\t\tconst result = await quickInputService.pick(items, { canPickMany: true });\n\n\t\tif (!result) {\n\t\t\treturn;\n\t\t}\n\n\t\tstorage.set(result.map(item => item.label));\n\t}\n}\n\nregisterAction2(ManageAuthorizedExtensionURIsAction);\n"],
  "mappings": "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",
  "names": []
}
