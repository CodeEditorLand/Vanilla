{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/extensions/test/browser/extensionStorageMigration.test.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport assert from 'assert';\nimport { IEnvironmentService } from '../../../../../platform/environment/common/environment.js';\nimport { IFileService } from '../../../../../platform/files/common/files.js';\nimport { FileService } from '../../../../../platform/files/common/fileService.js';\nimport { InMemoryFileSystemProvider } from '../../../../../platform/files/common/inMemoryFilesystemProvider.js';\nimport { TestInstantiationService } from '../../../../../platform/instantiation/test/common/instantiationServiceMock.js';\nimport { NullLogService } from '../../../../../platform/log/common/log.js';\nimport { workbenchInstantiationService } from '../../../../test/browser/workbenchTestServices.js';\nimport { IExtensionStorageService, ExtensionStorageService } from '../../../../../platform/extensionManagement/common/extensionStorage.js';\nimport { URI } from '../../../../../base/common/uri.js';\nimport { joinPath } from '../../../../../base/common/resources.js';\nimport { VSBuffer } from '../../../../../base/common/buffer.js';\nimport { TestWorkspace } from '../../../../../platform/workspace/test/common/testWorkspace.js';\nimport { migrateExtensionStorage } from '../../common/extensionStorageMigration.js';\nimport { IStorageService, StorageScope } from '../../../../../platform/storage/common/storage.js';\nimport { IUserDataProfilesService, UserDataProfilesService } from '../../../../../platform/userDataProfile/common/userDataProfile.js';\nimport { UserDataProfileService } from '../../../userDataProfile/common/userDataProfileService.js';\nimport { IUserDataProfileService } from '../../../userDataProfile/common/userDataProfile.js';\nimport { UriIdentityService } from '../../../../../platform/uriIdentity/common/uriIdentityService.js';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from '../../../../../base/test/common/utils.js';\n\nsuite('ExtensionStorageMigration', () => {\n\n\tconst disposables = ensureNoDisposablesAreLeakedInTestSuite();\n\tconst ROOT = URI.file('tests').with({ scheme: 'vscode-tests' });\n\tconst workspaceStorageHome = joinPath(ROOT, 'workspaceStorageHome');\n\n\tlet instantiationService: TestInstantiationService;\n\n\tsetup(() => {\n\t\tinstantiationService = workbenchInstantiationService(undefined, disposables);\n\n\t\tconst fileService = disposables.add(new FileService(new NullLogService()));\n\t\tdisposables.add(fileService.registerProvider(ROOT.scheme, disposables.add(new InMemoryFileSystemProvider())));\n\t\tinstantiationService.stub(IFileService, fileService);\n\t\tconst environmentService = instantiationService.stub(IEnvironmentService, { userRoamingDataHome: ROOT, workspaceStorageHome, cacheHome: ROOT });\n\t\tconst userDataProfilesService = instantiationService.stub(IUserDataProfilesService, disposables.add(new UserDataProfilesService(environmentService, fileService, disposables.add(new UriIdentityService(fileService)), new NullLogService())));\n\t\tinstantiationService.stub(IUserDataProfileService, disposables.add(new UserDataProfileService(userDataProfilesService.defaultProfile)));\n\n\t\tinstantiationService.stub(IExtensionStorageService, disposables.add(instantiationService.createInstance(ExtensionStorageService)));\n\t});\n\n\ttest('migrate extension storage', async () => {\n\t\tconst fromExtensionId = 'pub.from', toExtensionId = 'pub.to', storageMigratedKey = `extensionStorage.migrate.${fromExtensionId}-${toExtensionId}`;\n\t\tconst extensionStorageService = instantiationService.get(IExtensionStorageService), fileService = instantiationService.get(IFileService), storageService = instantiationService.get(IStorageService), userDataProfilesService = instantiationService.get(IUserDataProfilesService);\n\n\t\textensionStorageService.setExtensionState(fromExtensionId, { globalKey: 'hello global state' }, true);\n\t\textensionStorageService.setExtensionState(fromExtensionId, { workspaceKey: 'hello workspace state' }, false);\n\t\tawait fileService.writeFile(joinPath(userDataProfilesService.defaultProfile.globalStorageHome, fromExtensionId), VSBuffer.fromString('hello global storage'));\n\t\tawait fileService.writeFile(joinPath(workspaceStorageHome, TestWorkspace.id, fromExtensionId), VSBuffer.fromString('hello workspace storage'));\n\n\t\tawait migrateExtensionStorage(fromExtensionId, toExtensionId, true, instantiationService);\n\t\tawait migrateExtensionStorage(fromExtensionId, toExtensionId, false, instantiationService);\n\n\t\tassert.deepStrictEqual(extensionStorageService.getExtensionState(fromExtensionId, true), undefined);\n\t\tassert.deepStrictEqual(extensionStorageService.getExtensionState(fromExtensionId, false), undefined);\n\t\tassert.deepStrictEqual((await fileService.exists(joinPath(userDataProfilesService.defaultProfile.globalStorageHome, fromExtensionId))), false);\n\t\tassert.deepStrictEqual((await fileService.exists(joinPath(workspaceStorageHome, TestWorkspace.id, fromExtensionId))), false);\n\n\t\tassert.deepStrictEqual(extensionStorageService.getExtensionState(toExtensionId, true), { globalKey: 'hello global state' });\n\t\tassert.deepStrictEqual(extensionStorageService.getExtensionState(toExtensionId, false), { workspaceKey: 'hello workspace state' });\n\t\tassert.deepStrictEqual((await fileService.readFile(joinPath(userDataProfilesService.defaultProfile.globalStorageHome, toExtensionId))).value.toString(), 'hello global storage');\n\t\tassert.deepStrictEqual((await fileService.readFile(joinPath(workspaceStorageHome, TestWorkspace.id, toExtensionId))).value.toString(), 'hello workspace storage');\n\n\t\tassert.deepStrictEqual(storageService.get(storageMigratedKey, StorageScope.PROFILE), 'true');\n\t\tassert.deepStrictEqual(storageService.get(storageMigratedKey, StorageScope.WORKSPACE), 'true');\n\n\t});\n\n\ttest('migrate extension storage when does not exist', async () => {\n\t\tconst fromExtensionId = 'pub.from', toExtensionId = 'pub.to', storageMigratedKey = `extensionStorage.migrate.${fromExtensionId}-${toExtensionId}`;\n\t\tconst extensionStorageService = instantiationService.get(IExtensionStorageService), fileService = instantiationService.get(IFileService), storageService = instantiationService.get(IStorageService), userDataProfilesService = instantiationService.get(IUserDataProfilesService);\n\n\t\tawait migrateExtensionStorage(fromExtensionId, toExtensionId, true, instantiationService);\n\t\tawait migrateExtensionStorage(fromExtensionId, toExtensionId, false, instantiationService);\n\n\t\tassert.deepStrictEqual(extensionStorageService.getExtensionState(fromExtensionId, true), undefined);\n\t\tassert.deepStrictEqual(extensionStorageService.getExtensionState(fromExtensionId, false), undefined);\n\t\tassert.deepStrictEqual((await fileService.exists(joinPath(userDataProfilesService.defaultProfile.globalStorageHome, fromExtensionId))), false);\n\t\tassert.deepStrictEqual((await fileService.exists(joinPath(workspaceStorageHome, TestWorkspace.id, fromExtensionId))), false);\n\n\t\tassert.deepStrictEqual(extensionStorageService.getExtensionState(toExtensionId, true), undefined);\n\t\tassert.deepStrictEqual(extensionStorageService.getExtensionState(toExtensionId, false), undefined);\n\t\tassert.deepStrictEqual((await fileService.exists(joinPath(userDataProfilesService.defaultProfile.globalStorageHome, toExtensionId))), false);\n\t\tassert.deepStrictEqual((await fileService.exists(joinPath(workspaceStorageHome, TestWorkspace.id, toExtensionId))), false);\n\n\t\tassert.deepStrictEqual(storageService.get(storageMigratedKey, StorageScope.PROFILE), 'true');\n\t\tassert.deepStrictEqual(storageService.get(storageMigratedKey, StorageScope.WORKSPACE), 'true');\n\n\t});\n\n\n});\n"],
  "mappings": "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",
  "names": []
}
