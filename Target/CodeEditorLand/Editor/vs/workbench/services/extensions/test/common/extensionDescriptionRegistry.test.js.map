{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/extensions/test/common/extensionDescriptionRegistry.test.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport assert from 'assert';\nimport { URI } from '../../../../../base/common/uri.js';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from '../../../../../base/test/common/utils.js';\nimport { ExtensionIdentifier, IExtensionDescription, TargetPlatform } from '../../../../../platform/extensions/common/extensions.js';\nimport { ExtensionDescriptionRegistry, IActivationEventsReader } from '../../common/extensionDescriptionRegistry.js';\n\nsuite('ExtensionDescriptionRegistry', () => {\n\n\tensureNoDisposablesAreLeakedInTestSuite();\n\n\ttest('allow removing and adding the same extension at a different version', () => {\n\t\tconst idA = new ExtensionIdentifier('a');\n\t\tconst extensionA1 = desc(idA, '1.0.0');\n\t\tconst extensionA2 = desc(idA, '2.0.0');\n\n\t\tconst basicActivationEventsReader: IActivationEventsReader = {\n\t\t\treadActivationEvents: (extensionDescription: IExtensionDescription): string[] => {\n\t\t\t\treturn extensionDescription.activationEvents ?? [];\n\t\t\t}\n\t\t};\n\n\t\tconst registry = new ExtensionDescriptionRegistry(basicActivationEventsReader, [extensionA1]);\n\t\tregistry.deltaExtensions([extensionA2], [idA]);\n\n\t\tassert.deepStrictEqual(registry.getAllExtensionDescriptions(), [extensionA2]);\n\t});\n\n\tfunction desc(id: ExtensionIdentifier, version: string, activationEvents: string[] = ['*']): IExtensionDescription {\n\t\treturn {\n\t\t\tname: id.value,\n\t\t\tpublisher: 'test',\n\t\t\tversion: '0.0.0',\n\t\t\tengines: { vscode: '^1.0.0' },\n\t\t\tidentifier: id,\n\t\t\textensionLocation: URI.parse(`nothing://nowhere`),\n\t\t\tisBuiltin: false,\n\t\t\tisUnderDevelopment: false,\n\t\t\tisUserBuiltin: false,\n\t\t\tactivationEvents,\n\t\t\tmain: 'index.js',\n\t\t\ttargetPlatform: TargetPlatform.UNDEFINED,\n\t\t\textensionDependencies: [],\n\t\t\tenabledApiProposals: undefined,\n\t\t};\n\t}\n});\n"],
  "mappings": ";;AAKA,OAAO,YAAY;AACnB,SAAS,WAAW;AACpB,SAAS,+CAA+C;AACxD,SAAS,qBAAqB,uBAAuB,sBAAsB;AAC3E,SAAS,8BAA8B,+BAA+B;AAEtE,MAAM,gCAAgC,MAAM;AAE3C,0CAAwC;AAExC,OAAK,uEAAuE,MAAM;AACjF,UAAM,MAAM,IAAI,oBAAoB,GAAG;AACvC,UAAM,cAAc,KAAK,KAAK,OAAO;AACrC,UAAM,cAAc,KAAK,KAAK,OAAO;AAErC,UAAM,8BAAuD;AAAA,MAC5D,sBAAsB,wBAAC,yBAA0D;AAChF,eAAO,qBAAqB,oBAAoB,CAAC;AAAA,MAClD,GAFsB;AAAA,IAGvB;AAEA,UAAM,WAAW,IAAI,6BAA6B,6BAA6B,CAAC,WAAW,CAAC;AAC5F,aAAS,gBAAgB,CAAC,WAAW,GAAG,CAAC,GAAG,CAAC;AAE7C,WAAO,gBAAgB,SAAS,4BAA4B,GAAG,CAAC,WAAW,CAAC;AAAA,EAC7E,CAAC;AAED,WAAS,KAAK,IAAyB,SAAiB,mBAA6B,CAAC,GAAG,GAA0B;AAClH,WAAO;AAAA,MACN,MAAM,GAAG;AAAA,MACT,WAAW;AAAA,MACX,SAAS;AAAA,MACT,SAAS,EAAE,QAAQ,SAAS;AAAA,MAC5B,YAAY;AAAA,MACZ,mBAAmB,IAAI,MAAM,mBAAmB;AAAA,MAChD,WAAW;AAAA,MACX,oBAAoB;AAAA,MACpB,eAAe;AAAA,MACf;AAAA,MACA,MAAM;AAAA,MACN,gBAAgB,eAAe;AAAA,MAC/B,uBAAuB,CAAC;AAAA,MACxB,qBAAqB;AAAA,IACtB;AAAA,EACD;AAjBS;AAkBV,CAAC;",
  "names": []
}
