{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/remote/electron-sandbox/remoteAgentService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { URI } from \"../../../../base/common/uri.js\";\nimport * as nls from \"../../../../nls.js\";\nimport { ILogService } from \"../../../../platform/log/common/log.js\";\nimport { INativeHostService } from \"../../../../platform/native/common/native.js\";\nimport {\n\tINotificationService,\n\ttype IPromptChoice,\n\tSeverity,\n} from \"../../../../platform/notification/common/notification.js\";\nimport { IOpenerService } from \"../../../../platform/opener/common/opener.js\";\nimport { IProductService } from \"../../../../platform/product/common/productService.js\";\nimport {\n\tIRemoteAuthorityResolverService,\n\tRemoteAuthorityResolverError,\n\tRemoteConnectionType,\n} from \"../../../../platform/remote/common/remoteAuthorityResolver.js\";\nimport { IRemoteSocketFactoryService } from \"../../../../platform/remote/common/remoteSocketFactoryService.js\";\nimport { ISignService } from \"../../../../platform/sign/common/sign.js\";\nimport { ITelemetryService } from \"../../../../platform/telemetry/common/telemetry.js\";\nimport {\n\ttype IWorkbenchContribution,\n\tWorkbenchPhase,\n\tregisterWorkbenchContribution2,\n} from \"../../../common/contributions.js\";\nimport { IWorkbenchEnvironmentService } from \"../../environment/common/environmentService.js\";\nimport { IUserDataProfileService } from \"../../userDataProfile/common/userDataProfile.js\";\nimport { AbstractRemoteAgentService } from \"../common/abstractRemoteAgentService.js\";\nimport { IRemoteAgentService } from \"../common/remoteAgentService.js\";\n\nexport class RemoteAgentService\n\textends AbstractRemoteAgentService\n\timplements IRemoteAgentService\n{\n\tconstructor(\n\t\t@IRemoteSocketFactoryService\n\t\tremoteSocketFactoryService: IRemoteSocketFactoryService,\n\t\t@IUserDataProfileService\n\t\tuserDataProfileService: IUserDataProfileService,\n\t\t@IWorkbenchEnvironmentService\n\t\tenvironmentService: IWorkbenchEnvironmentService,\n\t\t@IProductService productService: IProductService,\n\t\t@IRemoteAuthorityResolverService\n\t\tremoteAuthorityResolverService: IRemoteAuthorityResolverService,\n\t\t@ISignService signService: ISignService,\n\t\t@ILogService logService: ILogService,\n\t) {\n\t\tsuper(\n\t\t\tremoteSocketFactoryService,\n\t\t\tuserDataProfileService,\n\t\t\tenvironmentService,\n\t\t\tproductService,\n\t\t\tremoteAuthorityResolverService,\n\t\t\tsignService,\n\t\t\tlogService,\n\t\t);\n\t}\n}\n\nclass RemoteConnectionFailureNotificationContribution\n\timplements IWorkbenchContribution\n{\n\tstatic readonly ID =\n\t\t\"workbench.contrib.nativeRemoteConnectionFailureNotification\";\n\n\tconstructor(\n\t\t@IRemoteAgentService\n\t\tprivate readonly _remoteAgentService: IRemoteAgentService,\n\t\t@INotificationService notificationService: INotificationService,\n\t\t@IWorkbenchEnvironmentService\n\t\tenvironmentService: IWorkbenchEnvironmentService,\n\t\t@ITelemetryService telemetryService: ITelemetryService,\n\t\t@INativeHostService nativeHostService: INativeHostService,\n\t\t@IRemoteAuthorityResolverService\n\t\tprivate readonly _remoteAuthorityResolverService: IRemoteAuthorityResolverService,\n\t\t@IOpenerService openerService: IOpenerService,\n\t) {\n\t\t// Let's cover the case where connecting to fetch the remote extension info fails\n\t\tthis._remoteAgentService.getRawEnvironment().then(undefined, (err) => {\n\t\t\tif (!RemoteAuthorityResolverError.isHandled(err)) {\n\t\t\t\tconst choices: IPromptChoice[] = [\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: nls.localize(\"devTools\", \"Open Developer Tools\"),\n\t\t\t\t\t\trun: () => nativeHostService.openDevTools(),\n\t\t\t\t\t},\n\t\t\t\t];\n\t\t\t\tconst troubleshootingURL = this._getTroubleshootingURL();\n\t\t\t\tif (troubleshootingURL) {\n\t\t\t\t\tchoices.push({\n\t\t\t\t\t\tlabel: nls.localize(\"directUrl\", \"Open in browser\"),\n\t\t\t\t\t\trun: () =>\n\t\t\t\t\t\t\topenerService.open(troubleshootingURL, {\n\t\t\t\t\t\t\t\topenExternal: true,\n\t\t\t\t\t\t\t}),\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\tnotificationService.prompt(\n\t\t\t\t\tSeverity.Error,\n\t\t\t\t\tnls.localize(\n\t\t\t\t\t\t\"connectionError\",\n\t\t\t\t\t\t\"Failed to connect to the remote extension host server (Error: {0})\",\n\t\t\t\t\t\terr ? err.message : \"\",\n\t\t\t\t\t),\n\t\t\t\t\tchoices,\n\t\t\t\t);\n\t\t\t}\n\t\t});\n\t}\n\n\tprivate _getTroubleshootingURL(): URI | null {\n\t\tconst remoteAgentConnection = this._remoteAgentService.getConnection();\n\t\tif (!remoteAgentConnection) {\n\t\t\treturn null;\n\t\t}\n\t\tconst connectionData =\n\t\t\tthis._remoteAuthorityResolverService.getConnectionData(\n\t\t\t\tremoteAgentConnection.remoteAuthority,\n\t\t\t);\n\t\tif (\n\t\t\t!connectionData ||\n\t\t\tconnectionData.connectTo.type !== RemoteConnectionType.WebSocket\n\t\t) {\n\t\t\treturn null;\n\t\t}\n\t\treturn URI.from({\n\t\t\tscheme: \"http\",\n\t\t\tauthority: `${connectionData.connectTo.host}:${connectionData.connectTo.port}`,\n\t\t\tpath: `/version`,\n\t\t});\n\t}\n}\n\nregisterWorkbenchContribution2(\n\tRemoteConnectionFailureNotificationContribution.ID,\n\tRemoteConnectionFailureNotificationContribution,\n\tWorkbenchPhase.BlockRestore,\n);\n"],
  "mappings": ";;;;;;;;;;;;AAKA,SAAS,WAAW;AACpB,YAAY,SAAS;AACrB,SAAS,mBAAmB;AAC5B,SAAS,0BAA0B;AACnC;AAAA,EACC;AAAA,EAEA;AAAA,OACM;AACP,SAAS,sBAAsB;AAC/B,SAAS,uBAAuB;AAChC;AAAA,EACC;AAAA,EACA;AAAA,EACA;AAAA,OACM;AACP,SAAS,mCAAmC;AAC5C,SAAS,oBAAoB;AAC7B,SAAS,yBAAyB;AAClC;AAAA,EAEC;AAAA,EACA;AAAA,OACM;AACP,SAAS,oCAAoC;AAC7C,SAAS,+BAA+B;AACxC,SAAS,kCAAkC;AAC3C,SAAS,2BAA2B;AAE7B,IAAM,qBAAN,cACE,2BAET;AAAA,EArCA,OAqCA;AAAA;AAAA;AAAA,EACC,YAEC,4BAEA,wBAEA,oBACiB,gBAEjB,gCACc,aACD,YACZ;AACD;AAAA,MACC;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACD;AAAA,EACD;AACD;AA3Ba,qBAAN;AAAA,EAKJ;AAAA,EAEA;AAAA,EAEA;AAAA,EAEA;AAAA,EACA;AAAA,EAEA;AAAA,EACA;AAAA,GAfU;AA6Bb,IAAM,kDAAN,MAEA;AAAA,EAIC,YAEkB,qBACK,qBAEtB,oBACmB,kBACC,mBAEH,iCACD,eACf;AATgB;AAOA;AAIjB,SAAK,oBAAoB,kBAAkB,EAAE,KAAK,QAAW,CAAC,QAAQ;AACrE,UAAI,CAAC,6BAA6B,UAAU,GAAG,GAAG;AACjD,cAAM,UAA2B;AAAA,UAChC;AAAA,YACC,OAAO,IAAI,SAAS,YAAY,sBAAsB;AAAA,YACtD,KAAK,6BAAM,kBAAkB,aAAa,GAArC;AAAA,UACN;AAAA,QACD;AACA,cAAM,qBAAqB,KAAK,uBAAuB;AACvD,YAAI,oBAAoB;AACvB,kBAAQ,KAAK;AAAA,YACZ,OAAO,IAAI,SAAS,aAAa,iBAAiB;AAAA,YAClD,KAAK,6BACJ,cAAc,KAAK,oBAAoB;AAAA,cACtC,cAAc;AAAA,YACf,CAAC,GAHG;AAAA,UAIN,CAAC;AAAA,QACF;AACA,4BAAoB;AAAA,UACnB,SAAS;AAAA,UACT,IAAI;AAAA,YACH;AAAA,YACA;AAAA,YACA,MAAM,IAAI,UAAU;AAAA,UACrB;AAAA,UACA;AAAA,QACD;AAAA,MACD;AAAA,IACD,CAAC;AAAA,EACF;AAAA,EA/GD,OAiEA;AAAA;AAAA;AAAA,EACC,OAAgB,KACf;AAAA,EA8CO,yBAAqC;AAC5C,UAAM,wBAAwB,KAAK,oBAAoB,cAAc;AACrE,QAAI,CAAC,uBAAuB;AAC3B,aAAO;AAAA,IACR;AACA,UAAM,iBACL,KAAK,gCAAgC;AAAA,MACpC,sBAAsB;AAAA,IACvB;AACD,QACC,CAAC,kBACD,eAAe,UAAU,SAAS,qBAAqB,WACtD;AACD,aAAO;AAAA,IACR;AACA,WAAO,IAAI,KAAK;AAAA,MACf,QAAQ;AAAA,MACR,WAAW,GAAG,eAAe,UAAU,IAAI,IAAI,eAAe,UAAU,IAAI;AAAA,MAC5E,MAAM;AAAA,IACP,CAAC;AAAA,EACF;AACD;AAvEM,kDAAN;AAAA,EAOG;AAAA,EAEA;AAAA,EACA;AAAA,EAEA;AAAA,EACA;AAAA,EACA;AAAA,EAEA;AAAA,GAhBG;AAyEN;AAAA,EACC,gDAAgD;AAAA,EAChD;AAAA,EACA,eAAe;AAChB;",
  "names": []
}
