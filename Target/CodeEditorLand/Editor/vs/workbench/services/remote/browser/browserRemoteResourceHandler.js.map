{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/remote/browser/browserRemoteResourceHandler.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { VSBuffer } from '../../../../base/common/buffer.js';\nimport { Disposable } from '../../../../base/common/lifecycle.js';\nimport { getMediaOrTextMime } from '../../../../base/common/mime.js';\nimport { URI, UriComponents } from '../../../../base/common/uri.js';\nimport { FileOperationError, FileOperationResult, IFileContent, IFileService } from '../../../../platform/files/common/files.js';\nimport { IRemoteResourceProvider, IResourceUriProvider } from '../../../browser/web.api.js';\n\nexport class BrowserRemoteResourceLoader extends Disposable {\n\tconstructor(\n\t\t@IFileService fileService: IFileService,\n\t\tprivate readonly provider: IRemoteResourceProvider,\n\t) {\n\t\tsuper();\n\n\t\tthis._register(provider.onDidReceiveRequest(async request => {\n\t\t\tlet uri: UriComponents;\n\t\t\ttry {\n\t\t\t\turi = JSON.parse(decodeURIComponent(request.uri.query));\n\t\t\t} catch {\n\t\t\t\treturn request.respondWith(404, new Uint8Array(), {});\n\t\t\t}\n\n\t\t\tlet content: IFileContent;\n\t\t\ttry {\n\t\t\t\tcontent = await fileService.readFile(URI.from(uri, true));\n\t\t\t} catch (e) {\n\t\t\t\tconst str = VSBuffer.fromString(e.message).buffer;\n\t\t\t\tif (e instanceof FileOperationError && e.fileOperationResult === FileOperationResult.FILE_NOT_FOUND) {\n\t\t\t\t\treturn request.respondWith(404, str, {});\n\t\t\t\t} else {\n\t\t\t\t\treturn request.respondWith(500, str, {});\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst mime = uri.path && getMediaOrTextMime(uri.path);\n\t\t\trequest.respondWith(200, content.value.buffer, mime ? { 'content-type': mime } : {});\n\t\t}));\n\t}\n\n\tpublic getResourceUriProvider(): IResourceUriProvider {\n\t\tconst baseUri = URI.parse(document.location.href);\n\t\treturn uri => baseUri.with({\n\t\t\tpath: this.provider.path,\n\t\t\tquery: JSON.stringify(uri),\n\t\t});\n\t}\n}\n"],
  "mappings": ";;;;;;;;;;;;AAKA,SAAS,gBAAgB;AACzB,SAAS,kBAAkB;AAC3B,SAAS,0BAA0B;AACnC,SAAS,KAAK,qBAAqB;AACnC,SAAS,oBAAoB,qBAAqB,cAAc,oBAAoB;AACpF,SAAS,yBAAyB,4BAA4B;AAEvD,IAAM,8BAAN,cAA0C,WAAW;AAAA,EAC3D,YACe,aACG,UAChB;AACD,UAAM;AAFW;AAIjB,SAAK,UAAU,SAAS,oBAAoB,OAAM,YAAW;AAC5D,UAAI;AACJ,UAAI;AACH,cAAM,KAAK,MAAM,mBAAmB,QAAQ,IAAI,KAAK,CAAC;AAAA,MACvD,QAAQ;AACP,eAAO,QAAQ,YAAY,KAAK,IAAI,WAAW,GAAG,CAAC,CAAC;AAAA,MACrD;AAEA,UAAI;AACJ,UAAI;AACH,kBAAU,MAAM,YAAY,SAAS,IAAI,KAAK,KAAK,IAAI,CAAC;AAAA,MACzD,SAAS,GAAG;AACX,cAAM,MAAM,SAAS,WAAW,EAAE,OAAO,EAAE;AAC3C,YAAI,aAAa,sBAAsB,EAAE,wBAAwB,oBAAoB,gBAAgB;AACpG,iBAAO,QAAQ,YAAY,KAAK,KAAK,CAAC,CAAC;AAAA,QACxC,OAAO;AACN,iBAAO,QAAQ,YAAY,KAAK,KAAK,CAAC,CAAC;AAAA,QACxC;AAAA,MACD;AAEA,YAAM,OAAO,IAAI,QAAQ,mBAAmB,IAAI,IAAI;AACpD,cAAQ,YAAY,KAAK,QAAQ,MAAM,QAAQ,OAAO,EAAE,gBAAgB,KAAK,IAAI,CAAC,CAAC;AAAA,IACpF,CAAC,CAAC;AAAA,EACH;AAAA,EA1CD,OAY4D;AAAA;AAAA;AAAA,EAgCpD,yBAA+C;AACrD,UAAM,UAAU,IAAI,MAAM,SAAS,SAAS,IAAI;AAChD,WAAO,SAAO,QAAQ,KAAK;AAAA,MAC1B,MAAM,KAAK,SAAS;AAAA,MACpB,OAAO,KAAK,UAAU,GAAG;AAAA,IAC1B,CAAC;AAAA,EACF;AACD;AAvCa,8BAAN;AAAA,EAEJ;AAAA,GAFU;",
  "names": []
}
