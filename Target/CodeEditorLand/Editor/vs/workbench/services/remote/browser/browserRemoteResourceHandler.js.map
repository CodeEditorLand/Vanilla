{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/remote/browser/browserRemoteResourceHandler.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { VSBuffer } from \"../../../../base/common/buffer.js\";\nimport { Disposable } from \"../../../../base/common/lifecycle.js\";\nimport { getMediaOrTextMime } from \"../../../../base/common/mime.js\";\nimport { URI, type UriComponents } from \"../../../../base/common/uri.js\";\nimport {\n\tFileOperationError,\n\tFileOperationResult,\n\ttype IFileContent,\n\tIFileService,\n} from \"../../../../platform/files/common/files.js\";\nimport type {\n\tIRemoteResourceProvider,\n\tIResourceUriProvider,\n} from \"../../../browser/web.api.js\";\n\nexport class BrowserRemoteResourceLoader extends Disposable {\n\tconstructor(\n\t\t@IFileService fileService: IFileService,\n\t\tprivate readonly provider: IRemoteResourceProvider,\n\t) {\n\t\tsuper();\n\n\t\tthis._register(\n\t\t\tprovider.onDidReceiveRequest(async (request) => {\n\t\t\t\tlet uri: UriComponents;\n\t\t\t\ttry {\n\t\t\t\t\turi = JSON.parse(decodeURIComponent(request.uri.query));\n\t\t\t\t} catch {\n\t\t\t\t\treturn request.respondWith(404, new Uint8Array(), {});\n\t\t\t\t}\n\n\t\t\t\tlet content: IFileContent;\n\t\t\t\ttry {\n\t\t\t\t\tcontent = await fileService.readFile(URI.from(uri, true));\n\t\t\t\t} catch (e) {\n\t\t\t\t\tconst str = VSBuffer.fromString(e.message).buffer;\n\t\t\t\t\tif (\n\t\t\t\t\t\te instanceof FileOperationError &&\n\t\t\t\t\t\te.fileOperationResult ===\n\t\t\t\t\t\t\tFileOperationResult.FILE_NOT_FOUND\n\t\t\t\t\t) {\n\t\t\t\t\t\treturn request.respondWith(404, str, {});\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn request.respondWith(500, str, {});\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tconst mime = uri.path && getMediaOrTextMime(uri.path);\n\t\t\t\trequest.respondWith(\n\t\t\t\t\t200,\n\t\t\t\t\tcontent.value.buffer,\n\t\t\t\t\tmime ? { \"content-type\": mime } : {},\n\t\t\t\t);\n\t\t\t}),\n\t\t);\n\t}\n\n\tpublic getResourceUriProvider(): IResourceUriProvider {\n\t\tconst baseUri = URI.parse(document.location.href);\n\t\treturn (uri) =>\n\t\t\tbaseUri.with({\n\t\t\t\tpath: this.provider.path,\n\t\t\t\tquery: JSON.stringify(uri),\n\t\t\t});\n\t}\n}\n"],
  "mappings": ";;;;;;;;;;;;AAKA,SAAS,gBAAgB;AACzB,SAAS,kBAAkB;AAC3B,SAAS,0BAA0B;AACnC,SAAS,WAA+B;AACxC;AAAA,EACC;AAAA,EACA;AAAA,EAEA;AAAA,OACM;AAMA,IAAM,8BAAN,cAA0C,WAAW;AAAA,EAC3D,YACe,aACG,UAChB;AACD,UAAM;AAFW;AAIjB,SAAK;AAAA,MACJ,SAAS,oBAAoB,OAAO,YAAY;AAC/C,YAAI;AACJ,YAAI;AACH,gBAAM,KAAK,MAAM,mBAAmB,QAAQ,IAAI,KAAK,CAAC;AAAA,QACvD,QAAQ;AACP,iBAAO,QAAQ,YAAY,KAAK,IAAI,WAAW,GAAG,CAAC,CAAC;AAAA,QACrD;AAEA,YAAI;AACJ,YAAI;AACH,oBAAU,MAAM,YAAY,SAAS,IAAI,KAAK,KAAK,IAAI,CAAC;AAAA,QACzD,SAAS,GAAG;AACX,gBAAM,MAAM,SAAS,WAAW,EAAE,OAAO,EAAE;AAC3C,cACC,aAAa,sBACb,EAAE,wBACD,oBAAoB,gBACpB;AACD,mBAAO,QAAQ,YAAY,KAAK,KAAK,CAAC,CAAC;AAAA,UACxC,OAAO;AACN,mBAAO,QAAQ,YAAY,KAAK,KAAK,CAAC,CAAC;AAAA,UACxC;AAAA,QACD;AAEA,cAAM,OAAO,IAAI,QAAQ,mBAAmB,IAAI,IAAI;AACpD,gBAAQ;AAAA,UACP;AAAA,UACA,QAAQ,MAAM;AAAA,UACd,OAAO,EAAE,gBAAgB,KAAK,IAAI,CAAC;AAAA,QACpC;AAAA,MACD,CAAC;AAAA,IACF;AAAA,EACD;AAAA,EA5DD,OAoB4D;AAAA;AAAA;AAAA,EA0CpD,yBAA+C;AACrD,UAAM,UAAU,IAAI,MAAM,SAAS,SAAS,IAAI;AAChD,WAAO,CAAC,QACP,QAAQ,KAAK;AAAA,MACZ,MAAM,KAAK,SAAS;AAAA,MACpB,OAAO,KAAK,UAAU,GAAG;AAAA,IAC1B,CAAC;AAAA,EACH;AACD;AAlDa,8BAAN;AAAA,EAEJ;AAAA,GAFU;",
  "names": []
}
