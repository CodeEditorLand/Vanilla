{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/remote/common/remoteFileSystemProviderClient.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { getErrorMessage } from '../../../../base/common/errors.js';\nimport { Disposable, DisposableStore, IDisposable } from '../../../../base/common/lifecycle.js';\nimport { Schemas } from '../../../../base/common/network.js';\nimport { OperatingSystem } from '../../../../base/common/platform.js';\nimport { IFileService } from '../../../../platform/files/common/files.js';\nimport { DiskFileSystemProviderClient } from '../../../../platform/files/common/diskFileSystemProviderClient.js';\nimport { ILogService } from '../../../../platform/log/common/log.js';\nimport { IRemoteAgentEnvironment } from '../../../../platform/remote/common/remoteAgentEnvironment.js';\nimport { IRemoteAgentConnection, IRemoteAgentService } from './remoteAgentService.js';\n\nexport const REMOTE_FILE_SYSTEM_CHANNEL_NAME = 'remoteFilesystem';\n\nexport class RemoteFileSystemProviderClient extends DiskFileSystemProviderClient {\n\n\tstatic register(remoteAgentService: IRemoteAgentService, fileService: IFileService, logService: ILogService): IDisposable {\n\t\tconst connection = remoteAgentService.getConnection();\n\t\tif (!connection) {\n\t\t\treturn Disposable.None;\n\t\t}\n\n\t\tconst disposables = new DisposableStore();\n\n\t\tconst environmentPromise = (async () => {\n\t\t\ttry {\n\t\t\t\tconst environment = await remoteAgentService.getRawEnvironment();\n\t\t\t\tif (environment) {\n\t\t\t\t\t// Register remote fsp even before it is asked to activate\n\t\t\t\t\t// because, some features (configuration) wait for its\n\t\t\t\t\t// registration before making fs calls.\n\t\t\t\t\tfileService.registerProvider(Schemas.vscodeRemote, disposables.add(new RemoteFileSystemProviderClient(environment, connection)));\n\t\t\t\t} else {\n\t\t\t\t\tlogService.error('Cannot register remote filesystem provider. Remote environment doesnot exist.');\n\t\t\t\t}\n\t\t\t} catch (error) {\n\t\t\t\tlogService.error('Cannot register remote filesystem provider. Error while fetching remote environment.', getErrorMessage(error));\n\t\t\t}\n\t\t})();\n\n\t\tdisposables.add(fileService.onWillActivateFileSystemProvider(e => {\n\t\t\tif (e.scheme === Schemas.vscodeRemote) {\n\t\t\t\te.join(environmentPromise);\n\t\t\t}\n\t\t}));\n\n\t\treturn disposables;\n\t}\n\n\tprivate constructor(remoteAgentEnvironment: IRemoteAgentEnvironment, connection: IRemoteAgentConnection) {\n\t\tsuper(connection.getChannel(REMOTE_FILE_SYSTEM_CHANNEL_NAME), { pathCaseSensitive: remoteAgentEnvironment.os === OperatingSystem.Linux });\n\t}\n}\n"],
  "mappings": ";;AAKA,SAAS,uBAAuB;AAChC,SAAS,YAAY,iBAAiB,mBAAmB;AACzD,SAAS,eAAe;AACxB,SAAS,uBAAuB;AAChC,SAAS,oBAAoB;AAC7B,SAAS,oCAAoC;AAC7C,SAAS,mBAAmB;AAC5B,SAAS,+BAA+B;AACxC,SAAS,wBAAwB,2BAA2B;AAErD,MAAM,kCAAkC;AAExC,MAAM,uCAAuC,6BAA6B;AAAA,EAjBjF,OAiBiF;AAAA;AAAA;AAAA,EAEhF,OAAO,SAAS,oBAAyC,aAA2B,YAAsC;AACzH,UAAM,aAAa,mBAAmB,cAAc;AACpD,QAAI,CAAC,YAAY;AAChB,aAAO,WAAW;AAAA,IACnB;AAEA,UAAM,cAAc,IAAI,gBAAgB;AAExC,UAAM,sBAAsB,YAAY;AACvC,UAAI;AACH,cAAM,cAAc,MAAM,mBAAmB,kBAAkB;AAC/D,YAAI,aAAa;AAIhB,sBAAY,iBAAiB,QAAQ,cAAc,YAAY,IAAI,IAAI,+BAA+B,aAAa,UAAU,CAAC,CAAC;AAAA,QAChI,OAAO;AACN,qBAAW,MAAM,+EAA+E;AAAA,QACjG;AAAA,MACD,SAAS,OAAO;AACf,mBAAW,MAAM,wFAAwF,gBAAgB,KAAK,CAAC;AAAA,MAChI;AAAA,IACD,GAAG;AAEH,gBAAY,IAAI,YAAY,iCAAiC,OAAK;AACjE,UAAI,EAAE,WAAW,QAAQ,cAAc;AACtC,UAAE,KAAK,kBAAkB;AAAA,MAC1B;AAAA,IACD,CAAC,CAAC;AAEF,WAAO;AAAA,EACR;AAAA,EAEQ,YAAY,wBAAiD,YAAoC;AACxG,UAAM,WAAW,WAAW,+BAA+B,GAAG,EAAE,mBAAmB,uBAAuB,OAAO,gBAAgB,MAAM,CAAC;AAAA,EACzI;AACD;",
  "names": []
}
