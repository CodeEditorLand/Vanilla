{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/remote/common/abstractRemoteAgentService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Emitter } from \"../../../../base/common/event.js\";\nimport { Disposable } from \"../../../../base/common/lifecycle.js\";\nimport {\n\ttype IChannel,\n\tIPCLogger,\n\ttype IServerChannel,\n\tgetDelayedChannel,\n} from \"../../../../base/parts/ipc/common/ipc.js\";\nimport type { Client } from \"../../../../base/parts/ipc/common/ipc.net.js\";\nimport type {\n\tIDiagnosticInfo,\n\tIDiagnosticInfoOptions,\n} from \"../../../../platform/diagnostics/common/diagnostics.js\";\nimport { ILogService } from \"../../../../platform/log/common/log.js\";\nimport { IProductService } from \"../../../../platform/product/common/productService.js\";\nimport {\n\ttype IConnectionOptions,\n\ttype ManagementPersistentConnection,\n\ttype PersistentConnectionEvent,\n\tconnectRemoteAgentManagement,\n} from \"../../../../platform/remote/common/remoteAgentConnection.js\";\nimport type {\n\tIRemoteAgentEnvironment,\n\tRemoteAgentConnectionContext,\n} from \"../../../../platform/remote/common/remoteAgentEnvironment.js\";\nimport { IRemoteAuthorityResolverService } from \"../../../../platform/remote/common/remoteAuthorityResolver.js\";\nimport { IRemoteSocketFactoryService } from \"../../../../platform/remote/common/remoteSocketFactoryService.js\";\nimport { ISignService } from \"../../../../platform/sign/common/sign.js\";\nimport type {\n\tITelemetryData,\n\tTelemetryLevel,\n} from \"../../../../platform/telemetry/common/telemetry.js\";\nimport { IWorkbenchEnvironmentService } from \"../../environment/common/environmentService.js\";\nimport { IUserDataProfileService } from \"../../userDataProfile/common/userDataProfile.js\";\nimport { RemoteExtensionEnvironmentChannelClient } from \"./remoteAgentEnvironmentChannel.js\";\nimport type {\n\tIExtensionHostExitInfo,\n\tIRemoteAgentConnection,\n\tIRemoteAgentService,\n} from \"./remoteAgentService.js\";\n\nexport abstract class AbstractRemoteAgentService\n\textends Disposable\n\timplements IRemoteAgentService\n{\n\tdeclare readonly _serviceBrand: undefined;\n\n\tprivate readonly _connection: IRemoteAgentConnection | null;\n\tprivate _environment: Promise<IRemoteAgentEnvironment | null> | null;\n\n\tconstructor(\n\t\t@IRemoteSocketFactoryService\n\t\tprivate readonly remoteSocketFactoryService: IRemoteSocketFactoryService,\n\t\t@IUserDataProfileService\n\t\tprivate readonly userDataProfileService: IUserDataProfileService,\n\t\t@IWorkbenchEnvironmentService\n\t\tprotected readonly _environmentService: IWorkbenchEnvironmentService,\n\t\t@IProductService productService: IProductService,\n\t\t@IRemoteAuthorityResolverService\n\t\tprivate readonly _remoteAuthorityResolverService: IRemoteAuthorityResolverService,\n\t\t@ISignService signService: ISignService,\n\t\t@ILogService logService: ILogService,\n\t) {\n\t\tsuper();\n\t\tif (this._environmentService.remoteAuthority) {\n\t\t\tthis._connection = this._register(\n\t\t\t\tnew RemoteAgentConnection(\n\t\t\t\t\tthis._environmentService.remoteAuthority,\n\t\t\t\t\tproductService.commit,\n\t\t\t\t\tproductService.quality,\n\t\t\t\t\tthis.remoteSocketFactoryService,\n\t\t\t\t\tthis._remoteAuthorityResolverService,\n\t\t\t\t\tsignService,\n\t\t\t\t\tlogService,\n\t\t\t\t),\n\t\t\t);\n\t\t} else {\n\t\t\tthis._connection = null;\n\t\t}\n\t\tthis._environment = null;\n\t}\n\n\tgetConnection(): IRemoteAgentConnection | null {\n\t\treturn this._connection;\n\t}\n\n\tgetEnvironment(): Promise<IRemoteAgentEnvironment | null> {\n\t\treturn this.getRawEnvironment().then(undefined, () => null);\n\t}\n\n\tgetRawEnvironment(): Promise<IRemoteAgentEnvironment | null> {\n\t\tif (!this._environment) {\n\t\t\tthis._environment = this._withChannel(\n\t\t\t\tasync (channel, connection) => {\n\t\t\t\t\tconst env =\n\t\t\t\t\t\tawait RemoteExtensionEnvironmentChannelClient.getEnvironmentData(\n\t\t\t\t\t\t\tchannel,\n\t\t\t\t\t\t\tconnection.remoteAuthority,\n\t\t\t\t\t\t\tthis.userDataProfileService.currentProfile.isDefault\n\t\t\t\t\t\t\t\t? undefined\n\t\t\t\t\t\t\t\t: this.userDataProfileService.currentProfile.id,\n\t\t\t\t\t\t);\n\t\t\t\t\tthis._remoteAuthorityResolverService._setAuthorityConnectionToken(\n\t\t\t\t\t\tconnection.remoteAuthority,\n\t\t\t\t\t\tenv.connectionToken,\n\t\t\t\t\t);\n\t\t\t\t\treturn env;\n\t\t\t\t},\n\t\t\t\tnull,\n\t\t\t);\n\t\t}\n\t\treturn this._environment;\n\t}\n\n\tgetExtensionHostExitInfo(\n\t\treconnectionToken: string,\n\t): Promise<IExtensionHostExitInfo | null> {\n\t\treturn this._withChannel(\n\t\t\t(channel, connection) =>\n\t\t\t\tRemoteExtensionEnvironmentChannelClient.getExtensionHostExitInfo(\n\t\t\t\t\tchannel,\n\t\t\t\t\tconnection.remoteAuthority,\n\t\t\t\t\treconnectionToken,\n\t\t\t\t),\n\t\t\tnull,\n\t\t);\n\t}\n\n\tgetDiagnosticInfo(\n\t\toptions: IDiagnosticInfoOptions,\n\t): Promise<IDiagnosticInfo | undefined> {\n\t\treturn this._withChannel(\n\t\t\t(channel) =>\n\t\t\t\tRemoteExtensionEnvironmentChannelClient.getDiagnosticInfo(\n\t\t\t\t\tchannel,\n\t\t\t\t\toptions,\n\t\t\t\t),\n\t\t\tundefined,\n\t\t);\n\t}\n\n\tupdateTelemetryLevel(telemetryLevel: TelemetryLevel): Promise<void> {\n\t\treturn this._withTelemetryChannel(\n\t\t\t(channel) =>\n\t\t\t\tRemoteExtensionEnvironmentChannelClient.updateTelemetryLevel(\n\t\t\t\t\tchannel,\n\t\t\t\t\ttelemetryLevel,\n\t\t\t\t),\n\t\t\tundefined,\n\t\t);\n\t}\n\n\tlogTelemetry(eventName: string, data: ITelemetryData): Promise<void> {\n\t\treturn this._withTelemetryChannel(\n\t\t\t(channel) =>\n\t\t\t\tRemoteExtensionEnvironmentChannelClient.logTelemetry(\n\t\t\t\t\tchannel,\n\t\t\t\t\teventName,\n\t\t\t\t\tdata,\n\t\t\t\t),\n\t\t\tundefined,\n\t\t);\n\t}\n\n\tflushTelemetry(): Promise<void> {\n\t\treturn this._withTelemetryChannel(\n\t\t\t(channel) =>\n\t\t\t\tRemoteExtensionEnvironmentChannelClient.flushTelemetry(channel),\n\t\t\tundefined,\n\t\t);\n\t}\n\n\tgetRoundTripTime(): Promise<number | undefined> {\n\t\treturn this._withTelemetryChannel(async (channel) => {\n\t\t\tconst start = Date.now();\n\t\t\tawait RemoteExtensionEnvironmentChannelClient.ping(channel);\n\t\t\treturn Date.now() - start;\n\t\t}, undefined);\n\t}\n\n\tasync endConnection(): Promise<void> {\n\t\tif (this._connection) {\n\t\t\tawait this._connection.end();\n\t\t\tthis._connection.dispose();\n\t\t}\n\t}\n\n\tprivate _withChannel<R>(\n\t\tcallback: (\n\t\t\tchannel: IChannel,\n\t\t\tconnection: IRemoteAgentConnection,\n\t\t) => Promise<R>,\n\t\tfallback: R,\n\t): Promise<R> {\n\t\tconst connection = this.getConnection();\n\t\tif (!connection) {\n\t\t\treturn Promise.resolve(fallback);\n\t\t}\n\t\treturn connection.withChannel(\n\t\t\t\"remoteextensionsenvironment\",\n\t\t\t(channel) => callback(channel, connection),\n\t\t);\n\t}\n\n\tprivate _withTelemetryChannel<R>(\n\t\tcallback: (\n\t\t\tchannel: IChannel,\n\t\t\tconnection: IRemoteAgentConnection,\n\t\t) => Promise<R>,\n\t\tfallback: R,\n\t): Promise<R> {\n\t\tconst connection = this.getConnection();\n\t\tif (!connection) {\n\t\t\treturn Promise.resolve(fallback);\n\t\t}\n\t\treturn connection.withChannel(\"telemetry\", (channel) =>\n\t\t\tcallback(channel, connection),\n\t\t);\n\t}\n}\n\nclass RemoteAgentConnection\n\textends Disposable\n\timplements IRemoteAgentConnection\n{\n\tprivate readonly _onReconnecting = this._register(new Emitter<void>());\n\tpublic readonly onReconnecting = this._onReconnecting.event;\n\n\tprivate readonly _onDidStateChange = this._register(\n\t\tnew Emitter<PersistentConnectionEvent>(),\n\t);\n\tpublic readonly onDidStateChange = this._onDidStateChange.event;\n\n\treadonly remoteAuthority: string;\n\tprivate _connection: Promise<Client<RemoteAgentConnectionContext>> | null;\n\n\tprivate _initialConnectionMs: number | undefined;\n\n\tconstructor(\n\t\tremoteAuthority: string,\n\t\tprivate readonly _commit: string | undefined,\n\t\tprivate readonly _quality: string | undefined,\n\t\tprivate readonly _remoteSocketFactoryService: IRemoteSocketFactoryService,\n\t\tprivate readonly _remoteAuthorityResolverService: IRemoteAuthorityResolverService,\n\t\tprivate readonly _signService: ISignService,\n\t\tprivate readonly _logService: ILogService,\n\t) {\n\t\tsuper();\n\t\tthis.remoteAuthority = remoteAuthority;\n\t\tthis._connection = null;\n\t}\n\n\tend: () => Promise<void> = () => Promise.resolve();\n\n\tgetChannel<T extends IChannel>(channelName: string): T {\n\t\treturn <T>(\n\t\t\tgetDelayedChannel(\n\t\t\t\tthis._getOrCreateConnection().then((c) =>\n\t\t\t\t\tc.getChannel(channelName),\n\t\t\t\t),\n\t\t\t)\n\t\t);\n\t}\n\n\twithChannel<T extends IChannel, R>(\n\t\tchannelName: string,\n\t\tcallback: (channel: T) => Promise<R>,\n\t): Promise<R> {\n\t\tconst channel = this.getChannel<T>(channelName);\n\t\tconst result = callback(channel);\n\t\treturn result;\n\t}\n\n\tregisterChannel<T extends IServerChannel<RemoteAgentConnectionContext>>(\n\t\tchannelName: string,\n\t\tchannel: T,\n\t): void {\n\t\tthis._getOrCreateConnection().then((client) =>\n\t\t\tclient.registerChannel(channelName, channel),\n\t\t);\n\t}\n\n\tasync getInitialConnectionTimeMs() {\n\t\ttry {\n\t\t\tawait this._getOrCreateConnection();\n\t\t} catch {\n\t\t\t// ignored -- time is measured even if connection fails\n\t\t}\n\n\t\treturn this._initialConnectionMs!;\n\t}\n\n\tprivate _getOrCreateConnection(): Promise<\n\t\tClient<RemoteAgentConnectionContext>\n\t> {\n\t\tif (!this._connection) {\n\t\t\tthis._connection = this._createConnection();\n\t\t}\n\t\treturn this._connection;\n\t}\n\n\tprivate async _createConnection(): Promise<\n\t\tClient<RemoteAgentConnectionContext>\n\t> {\n\t\tlet firstCall = true;\n\t\tconst options: IConnectionOptions = {\n\t\t\tcommit: this._commit,\n\t\t\tquality: this._quality,\n\t\t\taddressProvider: {\n\t\t\t\tgetAddress: async () => {\n\t\t\t\t\tif (firstCall) {\n\t\t\t\t\t\tfirstCall = false;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis._onReconnecting.fire(undefined);\n\t\t\t\t\t}\n\t\t\t\t\tconst { authority } =\n\t\t\t\t\t\tawait this._remoteAuthorityResolverService.resolveAuthority(\n\t\t\t\t\t\t\tthis.remoteAuthority,\n\t\t\t\t\t\t);\n\t\t\t\t\treturn {\n\t\t\t\t\t\tconnectTo: authority.connectTo,\n\t\t\t\t\t\tconnectionToken: authority.connectionToken,\n\t\t\t\t\t};\n\t\t\t\t},\n\t\t\t},\n\t\t\tremoteSocketFactoryService: this._remoteSocketFactoryService,\n\t\t\tsignService: this._signService,\n\t\t\tlogService: this._logService,\n\t\t\tipcLogger: false\n\t\t\t\t? new IPCLogger(`Local \\u2192 Remote`, `Remote \\u2192 Local`)\n\t\t\t\t: null,\n\t\t};\n\t\tlet connection: ManagementPersistentConnection;\n\t\tconst start = Date.now();\n\t\ttry {\n\t\t\tconnection = this._register(\n\t\t\t\tawait connectRemoteAgentManagement(\n\t\t\t\t\toptions,\n\t\t\t\t\tthis.remoteAuthority,\n\t\t\t\t\t`renderer`,\n\t\t\t\t),\n\t\t\t);\n\t\t} finally {\n\t\t\tthis._initialConnectionMs = Date.now() - start;\n\t\t}\n\n\t\tconnection.protocol.onDidDispose(() => {\n\t\t\tconnection.dispose();\n\t\t});\n\t\tthis.end = () => {\n\t\t\tconnection.protocol.sendDisconnect();\n\t\t\treturn connection.protocol.drain();\n\t\t};\n\t\tthis._register(\n\t\t\tconnection.onDidStateChange((e) => this._onDidStateChange.fire(e)),\n\t\t);\n\t\treturn connection.client;\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
