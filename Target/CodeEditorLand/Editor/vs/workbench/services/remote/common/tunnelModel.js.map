{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/remote/common/tunnelModel.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CancellationToken } from \"../../../../base/common/cancellation.js\";\nimport { debounce } from \"../../../../base/common/decorators.js\";\nimport { Emitter, Event } from \"../../../../base/common/event.js\";\nimport { hash } from \"../../../../base/common/hash.js\";\nimport {\n\tDisposable,\n\tDisposableStore,\n} from \"../../../../base/common/lifecycle.js\";\nimport { deepClone } from \"../../../../base/common/objects.js\";\nimport { isNumber, isObject, isString } from \"../../../../base/common/types.js\";\nimport { URI } from \"../../../../base/common/uri.js\";\nimport * as nls from \"../../../../nls.js\";\nimport {\n\ttype ConfigurationTarget,\n\tIConfigurationService,\n} from \"../../../../platform/configuration/common/configuration.js\";\nimport {\n\tIContextKeyService,\n\tRawContextKey,\n} from \"../../../../platform/contextkey/common/contextkey.js\";\nimport { IDialogService } from \"../../../../platform/dialogs/common/dialogs.js\";\nimport { ILogService } from \"../../../../platform/log/common/log.js\";\nimport type { IAddressProvider } from \"../../../../platform/remote/common/remoteAgentConnection.js\";\nimport {\n\tIRemoteAuthorityResolverService,\n\ttype TunnelDescription,\n} from \"../../../../platform/remote/common/remoteAuthorityResolver.js\";\nimport {\n\tIStorageService,\n\tStorageScope,\n\tStorageTarget,\n} from \"../../../../platform/storage/common/storage.js\";\nimport {\n\tALL_INTERFACES_ADDRESSES,\n\tITunnelService,\n\tLOCALHOST_ADDRESSES,\n\ttype PortAttributesProvider,\n\tProvidedOnAutoForward,\n\ttype ProvidedPortAttributes,\n\ttype RemoteTunnel,\n\tTunnelPrivacyId,\n\tTunnelProtocol,\n\tisAllInterfaces,\n\tisLocalhost,\n} from \"../../../../platform/tunnel/common/tunnel.js\";\nimport { IWorkspaceContextService } from \"../../../../platform/workspace/common/workspace.js\";\nimport { IWorkbenchEnvironmentService } from \"../../environment/common/environmentService.js\";\nimport { IExtensionService } from \"../../extensions/common/extensions.js\";\n\nconst MISMATCH_LOCAL_PORT_COOLDOWN = 10 * 1000; // 10 seconds\nconst TUNNELS_TO_RESTORE = \"remote.tunnels.toRestore\";\nconst TUNNELS_TO_RESTORE_EXPIRATION = \"remote.tunnels.toRestoreExpiration\";\nconst RESTORE_EXPIRATION_TIME = 1000 * 60 * 60 * 24 * 14; // 2 weeks\nexport const ACTIVATION_EVENT = \"onTunnel\";\nexport const forwardedPortsViewEnabled = new RawContextKey<boolean>(\n\t\"forwardedPortsViewEnabled\",\n\tfalse,\n\tnls.localize(\n\t\t\"tunnel.forwardedPortsViewEnabled\",\n\t\t\"Whether the Ports view is enabled.\",\n\t),\n);\n\nexport interface RestorableTunnel {\n\tremoteHost: string;\n\tremotePort: number;\n\tlocalAddress: string;\n\tlocalUri: URI;\n\tprotocol: TunnelProtocol;\n\tlocalPort?: number;\n\tname?: string;\n\tsource: {\n\t\tsource: TunnelSource;\n\t\tdescription: string;\n\t};\n}\n\nexport interface Tunnel {\n\tremoteHost: string;\n\tremotePort: number;\n\tlocalAddress: string;\n\tlocalUri: URI;\n\tprotocol: TunnelProtocol;\n\tlocalPort?: number;\n\tname?: string;\n\tcloseable?: boolean;\n\tprivacy: TunnelPrivacyId | string;\n\trunningProcess: string | undefined;\n\thasRunningProcess?: boolean;\n\tpid: number | undefined;\n\tsource: {\n\t\tsource: TunnelSource;\n\t\tdescription: string;\n\t};\n}\n\nexport function parseAddress(\n\taddress: string,\n): { host: string; port: number } | undefined {\n\tconst matches = address.match(\n\t\t/^([a-zA-Z0-9_-]+(?:\\.[a-zA-Z0-9_-]+)*:)?([0-9]+)$/,\n\t);\n\tif (!matches) {\n\t\treturn undefined;\n\t}\n\treturn {\n\t\thost: matches[1]?.substring(0, matches[1].length - 1) || \"localhost\",\n\t\tport: Number(matches[2]),\n\t};\n}\n\nexport enum TunnelCloseReason {\n\tOther = \"Other\",\n\tUser = \"User\",\n\tAutoForwardEnd = \"AutoForwardEnd\",\n}\n\nexport enum TunnelSource {\n\tUser = 0,\n\tAuto = 1,\n\tExtension = 2,\n}\n\nexport const UserTunnelSource = {\n\tsource: TunnelSource.User,\n\tdescription: nls.localize(\"tunnel.source.user\", \"User Forwarded\"),\n};\nexport const AutoTunnelSource = {\n\tsource: TunnelSource.Auto,\n\tdescription: nls.localize(\"tunnel.source.auto\", \"Auto Forwarded\"),\n};\n\nexport function mapHasAddress<T>(\n\tmap: Map<string, T>,\n\thost: string,\n\tport: number,\n): T | undefined {\n\tconst initialAddress = map.get(makeAddress(host, port));\n\tif (initialAddress) {\n\t\treturn initialAddress;\n\t}\n\n\tif (isLocalhost(host)) {\n\t\t// Do localhost checks\n\t\tfor (const testHost of LOCALHOST_ADDRESSES) {\n\t\t\tconst testAddress = makeAddress(testHost, port);\n\t\t\tif (map.has(testAddress)) {\n\t\t\t\treturn map.get(testAddress);\n\t\t\t}\n\t\t}\n\t} else if (isAllInterfaces(host)) {\n\t\t// Do all interfaces checks\n\t\tfor (const testHost of ALL_INTERFACES_ADDRESSES) {\n\t\t\tconst testAddress = makeAddress(testHost, port);\n\t\t\tif (map.has(testAddress)) {\n\t\t\t\treturn map.get(testAddress);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn undefined;\n}\n\nexport function mapHasAddressLocalhostOrAllInterfaces<T>(\n\tmap: Map<string, T>,\n\thost: string,\n\tport: number,\n): T | undefined {\n\tconst originalAddress = mapHasAddress(map, host, port);\n\tif (originalAddress) {\n\t\treturn originalAddress;\n\t}\n\tconst otherHost = isAllInterfaces(host)\n\t\t? \"localhost\"\n\t\t: isLocalhost(host)\n\t\t\t? \"0.0.0.0\"\n\t\t\t: undefined;\n\tif (otherHost) {\n\t\treturn mapHasAddress(map, otherHost, port);\n\t}\n\treturn undefined;\n}\n\nexport function makeAddress(host: string, port: number): string {\n\treturn host + \":\" + port;\n}\n\nexport interface TunnelProperties {\n\tremote: { host: string; port: number };\n\tlocal?: number;\n\tname?: string;\n\tsource?: {\n\t\tsource: TunnelSource;\n\t\tdescription: string;\n\t};\n\televateIfNeeded?: boolean;\n\tprivacy?: string;\n}\n\nexport interface CandidatePort {\n\thost: string;\n\tport: number;\n\tdetail?: string;\n\tpid?: number;\n}\n\ninterface PortAttributes extends Attributes {\n\tkey: number | PortRange | RegExp | HostAndPort;\n}\n\nexport enum OnPortForward {\n\tNotify = \"notify\",\n\tOpenBrowser = \"openBrowser\",\n\tOpenBrowserOnce = \"openBrowserOnce\",\n\tOpenPreview = \"openPreview\",\n\tSilent = \"silent\",\n\tIgnore = \"ignore\",\n}\n\nexport interface Attributes {\n\tlabel: string | undefined;\n\tonAutoForward: OnPortForward | undefined;\n\televateIfNeeded: boolean | undefined;\n\trequireLocalPort: boolean | undefined;\n\tprotocol: TunnelProtocol | undefined;\n}\n\ninterface PortRange {\n\tstart: number;\n\tend: number;\n}\n\ninterface HostAndPort {\n\thost: string;\n\tport: number;\n}\n\nexport function isCandidatePort(candidate: any): candidate is CandidatePort {\n\treturn (\n\t\tcandidate &&\n\t\t\"host\" in candidate &&\n\t\ttypeof candidate.host === \"string\" &&\n\t\t\"port\" in candidate &&\n\t\ttypeof candidate.port === \"number\" &&\n\t\t(!(\"detail\" in candidate) || typeof candidate.detail === \"string\") &&\n\t\t(!(\"pid\" in candidate) || typeof candidate.pid === \"string\")\n\t);\n}\n\nexport class PortsAttributes extends Disposable {\n\tprivate static SETTING = \"remote.portsAttributes\";\n\tprivate static DEFAULTS = \"remote.otherPortsAttributes\";\n\tprivate static RANGE = /^(\\d+)-(\\d+)$/;\n\tprivate static HOST_AND_PORT = /^([a-z0-9-]+):(\\d{1,5})$/;\n\tprivate portsAttributes: PortAttributes[] = [];\n\tprivate defaultPortAttributes: Attributes | undefined;\n\tprivate _onDidChangeAttributes = new Emitter<void>();\n\tpublic readonly onDidChangeAttributes = this._onDidChangeAttributes.event;\n\n\tconstructor(private readonly configurationService: IConfigurationService) {\n\t\tsuper();\n\t\tthis._register(\n\t\t\tconfigurationService.onDidChangeConfiguration((e) => {\n\t\t\t\tif (\n\t\t\t\t\te.affectsConfiguration(PortsAttributes.SETTING) ||\n\t\t\t\t\te.affectsConfiguration(PortsAttributes.DEFAULTS)\n\t\t\t\t) {\n\t\t\t\t\tthis.updateAttributes();\n\t\t\t\t}\n\t\t\t}),\n\t\t);\n\t\tthis.updateAttributes();\n\t}\n\n\tprivate updateAttributes() {\n\t\tthis.portsAttributes = this.readSetting();\n\t\tthis._onDidChangeAttributes.fire();\n\t}\n\n\tgetAttributes(\n\t\tport: number,\n\t\thost: string,\n\t\tcommandLine?: string,\n\t): Attributes | undefined {\n\t\tlet index = this.findNextIndex(\n\t\t\tport,\n\t\t\thost,\n\t\t\tcommandLine,\n\t\t\tthis.portsAttributes,\n\t\t\t0,\n\t\t);\n\t\tconst attributes: Attributes = {\n\t\t\tlabel: undefined,\n\t\t\tonAutoForward: undefined,\n\t\t\televateIfNeeded: undefined,\n\t\t\trequireLocalPort: undefined,\n\t\t\tprotocol: undefined,\n\t\t};\n\t\twhile (index >= 0) {\n\t\t\tconst found = this.portsAttributes[index];\n\t\t\tif (found.key === port) {\n\t\t\t\tattributes.onAutoForward =\n\t\t\t\t\tfound.onAutoForward ?? attributes.onAutoForward;\n\t\t\t\tattributes.elevateIfNeeded =\n\t\t\t\t\tfound.elevateIfNeeded !== undefined\n\t\t\t\t\t\t? found.elevateIfNeeded\n\t\t\t\t\t\t: attributes.elevateIfNeeded;\n\t\t\t\tattributes.label = found.label ?? attributes.label;\n\t\t\t\tattributes.requireLocalPort = found.requireLocalPort;\n\t\t\t\tattributes.protocol = found.protocol;\n\t\t\t} else {\n\t\t\t\t// It's a range or regex, which means that if the attribute is already set, we keep it\n\t\t\t\tattributes.onAutoForward =\n\t\t\t\t\tattributes.onAutoForward ?? found.onAutoForward;\n\t\t\t\tattributes.elevateIfNeeded =\n\t\t\t\t\tattributes.elevateIfNeeded !== undefined\n\t\t\t\t\t\t? attributes.elevateIfNeeded\n\t\t\t\t\t\t: found.elevateIfNeeded;\n\t\t\t\tattributes.label = attributes.label ?? found.label;\n\t\t\t\tattributes.requireLocalPort =\n\t\t\t\t\tattributes.requireLocalPort !== undefined\n\t\t\t\t\t\t? attributes.requireLocalPort\n\t\t\t\t\t\t: undefined;\n\t\t\t\tattributes.protocol = attributes.protocol ?? found.protocol;\n\t\t\t}\n\t\t\tindex = this.findNextIndex(\n\t\t\t\tport,\n\t\t\t\thost,\n\t\t\t\tcommandLine,\n\t\t\t\tthis.portsAttributes,\n\t\t\t\tindex + 1,\n\t\t\t);\n\t\t}\n\t\tif (\n\t\t\tattributes.onAutoForward !== undefined ||\n\t\t\tattributes.elevateIfNeeded !== undefined ||\n\t\t\tattributes.label !== undefined ||\n\t\t\tattributes.requireLocalPort !== undefined ||\n\t\t\tattributes.protocol !== undefined\n\t\t) {\n\t\t\treturn attributes;\n\t\t}\n\n\t\t// If we find no matches, then use the other port attributes.\n\t\treturn this.getOtherAttributes();\n\t}\n\n\tprivate hasStartEnd(\n\t\tvalue: number | PortRange | RegExp | HostAndPort,\n\t): value is PortRange {\n\t\treturn (\n\t\t\t(<any>value).start !== undefined && (<any>value).end !== undefined\n\t\t);\n\t}\n\n\tprivate hasHostAndPort(\n\t\tvalue: number | PortRange | RegExp | HostAndPort,\n\t): value is HostAndPort {\n\t\treturn (\n\t\t\t(<any>value).host !== undefined &&\n\t\t\t(<any>value).port !== undefined &&\n\t\t\tisString((<any>value).host) &&\n\t\t\tisNumber((<any>value).port)\n\t\t);\n\t}\n\n\tprivate findNextIndex(\n\t\tport: number,\n\t\thost: string,\n\t\tcommandLine: string | undefined,\n\t\tattributes: PortAttributes[],\n\t\tfromIndex: number,\n\t): number {\n\t\tif (fromIndex >= attributes.length) {\n\t\t\treturn -1;\n\t\t}\n\t\tconst shouldUseHost = !isLocalhost(host) && !isAllInterfaces(host);\n\t\tconst sliced = attributes.slice(fromIndex);\n\t\tconst foundIndex = sliced.findIndex((value) => {\n\t\t\tif (isNumber(value.key)) {\n\t\t\t\treturn shouldUseHost ? false : value.key === port;\n\t\t\t} else if (this.hasStartEnd(value.key)) {\n\t\t\t\treturn shouldUseHost\n\t\t\t\t\t? false\n\t\t\t\t\t: port >= value.key.start && port <= value.key.end;\n\t\t\t} else if (this.hasHostAndPort(value.key)) {\n\t\t\t\treturn port === value.key.port && host === value.key.host;\n\t\t\t} else {\n\t\t\t\treturn commandLine ? value.key.test(commandLine) : false;\n\t\t\t}\n\t\t});\n\t\treturn foundIndex >= 0 ? foundIndex + fromIndex : -1;\n\t}\n\n\tprivate readSetting(): PortAttributes[] {\n\t\tconst settingValue = this.configurationService.getValue(\n\t\t\tPortsAttributes.SETTING,\n\t\t);\n\t\tif (!settingValue || !isObject(settingValue)) {\n\t\t\treturn [];\n\t\t}\n\n\t\tconst attributes: PortAttributes[] = [];\n\t\tfor (const attributesKey in settingValue) {\n\t\t\tif (attributesKey === undefined) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tconst setting = (<any>settingValue)[attributesKey];\n\t\t\tlet key: number | PortRange | RegExp | HostAndPort | undefined;\n\t\t\tif (Number(attributesKey)) {\n\t\t\t\tkey = Number(attributesKey);\n\t\t\t} else if (isString(attributesKey)) {\n\t\t\t\tif (PortsAttributes.RANGE.test(attributesKey)) {\n\t\t\t\t\tconst match = attributesKey.match(PortsAttributes.RANGE);\n\t\t\t\t\tkey = { start: Number(match![1]), end: Number(match![2]) };\n\t\t\t\t} else if (PortsAttributes.HOST_AND_PORT.test(attributesKey)) {\n\t\t\t\t\tconst match = attributesKey.match(\n\t\t\t\t\t\tPortsAttributes.HOST_AND_PORT,\n\t\t\t\t\t);\n\t\t\t\t\tkey = { host: match![1], port: Number(match![2]) };\n\t\t\t\t} else {\n\t\t\t\t\tlet regTest: RegExp | undefined;\n\t\t\t\t\ttry {\n\t\t\t\t\t\tregTest = RegExp(attributesKey);\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\t// The user entered an invalid regular expression.\n\t\t\t\t\t}\n\t\t\t\t\tif (regTest) {\n\t\t\t\t\t\tkey = regTest;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (!key) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tattributes.push({\n\t\t\t\tkey: key,\n\t\t\t\televateIfNeeded: setting.elevateIfNeeded,\n\t\t\t\tonAutoForward: setting.onAutoForward,\n\t\t\t\tlabel: setting.label,\n\t\t\t\trequireLocalPort: setting.requireLocalPort,\n\t\t\t\tprotocol: setting.protocol,\n\t\t\t});\n\t\t}\n\n\t\tconst defaults = <any>(\n\t\t\tthis.configurationService.getValue(PortsAttributes.DEFAULTS)\n\t\t);\n\t\tif (defaults) {\n\t\t\tthis.defaultPortAttributes = {\n\t\t\t\televateIfNeeded: defaults.elevateIfNeeded,\n\t\t\t\tlabel: defaults.label,\n\t\t\t\tonAutoForward: defaults.onAutoForward,\n\t\t\t\trequireLocalPort: defaults.requireLocalPort,\n\t\t\t\tprotocol: defaults.protocol,\n\t\t\t};\n\t\t}\n\n\t\treturn this.sortAttributes(attributes);\n\t}\n\n\tprivate sortAttributes(attributes: PortAttributes[]): PortAttributes[] {\n\t\tfunction getVal(item: PortAttributes, thisRef: PortsAttributes) {\n\t\t\tif (isNumber(item.key)) {\n\t\t\t\treturn item.key;\n\t\t\t} else if (thisRef.hasStartEnd(item.key)) {\n\t\t\t\treturn item.key.start;\n\t\t\t} else if (thisRef.hasHostAndPort(item.key)) {\n\t\t\t\treturn item.key.port;\n\t\t\t} else {\n\t\t\t\treturn Number.MAX_VALUE;\n\t\t\t}\n\t\t}\n\n\t\treturn attributes.sort((a, b) => {\n\t\t\treturn getVal(a, this) - getVal(b, this);\n\t\t});\n\t}\n\n\tprivate getOtherAttributes() {\n\t\treturn this.defaultPortAttributes;\n\t}\n\n\tstatic providedActionToAction(\n\t\tprovidedAction: ProvidedOnAutoForward | undefined,\n\t) {\n\t\tswitch (providedAction) {\n\t\t\tcase ProvidedOnAutoForward.Notify:\n\t\t\t\treturn OnPortForward.Notify;\n\t\t\tcase ProvidedOnAutoForward.OpenBrowser:\n\t\t\t\treturn OnPortForward.OpenBrowser;\n\t\t\tcase ProvidedOnAutoForward.OpenBrowserOnce:\n\t\t\t\treturn OnPortForward.OpenBrowserOnce;\n\t\t\tcase ProvidedOnAutoForward.OpenPreview:\n\t\t\t\treturn OnPortForward.OpenPreview;\n\t\t\tcase ProvidedOnAutoForward.Silent:\n\t\t\t\treturn OnPortForward.Silent;\n\t\t\tcase ProvidedOnAutoForward.Ignore:\n\t\t\t\treturn OnPortForward.Ignore;\n\t\t\tdefault:\n\t\t\t\treturn undefined;\n\t\t}\n\t}\n\n\tpublic async addAttributes(\n\t\tport: number,\n\t\tattributes: Partial<Attributes>,\n\t\ttarget: ConfigurationTarget,\n\t) {\n\t\tconst settingValue = this.configurationService.inspect(\n\t\t\tPortsAttributes.SETTING,\n\t\t);\n\t\tconst remoteValue: any = settingValue.userRemoteValue;\n\t\tlet newRemoteValue: any;\n\t\tif (!remoteValue || !isObject(remoteValue)) {\n\t\t\tnewRemoteValue = {};\n\t\t} else {\n\t\t\tnewRemoteValue = deepClone(remoteValue);\n\t\t}\n\n\t\tif (!newRemoteValue[`${port}`]) {\n\t\t\tnewRemoteValue[`${port}`] = {};\n\t\t}\n\t\tfor (const attribute in attributes) {\n\t\t\tnewRemoteValue[`${port}`][attribute] = (<any>attributes)[attribute];\n\t\t}\n\n\t\treturn this.configurationService.updateValue(\n\t\t\tPortsAttributes.SETTING,\n\t\t\tnewRemoteValue,\n\t\t\ttarget,\n\t\t);\n\t}\n}\n\nexport class TunnelModel extends Disposable {\n\treadonly forwarded: Map<string, Tunnel>;\n\tprivate readonly inProgress: Map<string, true> = new Map();\n\treadonly detected: Map<string, Tunnel>;\n\tprivate remoteTunnels: Map<string, RemoteTunnel>;\n\tprivate _onForwardPort: Emitter<Tunnel | void> = new Emitter();\n\tpublic onForwardPort: Event<Tunnel | void> = this._onForwardPort.event;\n\tprivate _onClosePort: Emitter<{ host: string; port: number }> =\n\t\tnew Emitter();\n\tpublic onClosePort: Event<{ host: string; port: number }> =\n\t\tthis._onClosePort.event;\n\tprivate _onPortName: Emitter<{ host: string; port: number }> =\n\t\tnew Emitter();\n\tpublic onPortName: Event<{ host: string; port: number }> =\n\t\tthis._onPortName.event;\n\tprivate _candidates: Map<string, CandidatePort> | undefined;\n\tprivate _onCandidatesChanged: Emitter<\n\t\tMap<string, { host: string; port: number }>\n\t> = new Emitter();\n\t// onCandidateChanged returns the removed candidates\n\tpublic onCandidatesChanged: Event<\n\t\tMap<string, { host: string; port: number }>\n\t> = this._onCandidatesChanged.event;\n\tprivate _candidateFilter:\n\t\t| ((candidates: CandidatePort[]) => Promise<CandidatePort[]>)\n\t\t| undefined;\n\tprivate tunnelRestoreValue: Promise<string | undefined>;\n\tprivate _onEnvironmentTunnelsSet: Emitter<void> = new Emitter();\n\tpublic onEnvironmentTunnelsSet: Event<void> =\n\t\tthis._onEnvironmentTunnelsSet.event;\n\tprivate _environmentTunnelsSet = false;\n\tpublic readonly configPortsAttributes: PortsAttributes;\n\tprivate restoreListener: DisposableStore | undefined = undefined;\n\tprivate knownPortsRestoreValue: string | undefined;\n\tprivate restoreComplete = false;\n\tprivate onRestoreComplete: Emitter<void> = new Emitter();\n\tprivate unrestoredExtensionTunnels: Map<string, RestorableTunnel> =\n\t\tnew Map();\n\tprivate sessionCachedProperties: Map<string, Partial<TunnelProperties>> =\n\t\tnew Map();\n\n\tprivate portAttributesProviders: PortAttributesProvider[] = [];\n\n\tconstructor(\n\t\t@ITunnelService private readonly tunnelService: ITunnelService,\n\t\t@IStorageService private readonly storageService: IStorageService,\n\t\t@IConfigurationService\n\t\tprivate readonly configurationService: IConfigurationService,\n\t\t@IWorkbenchEnvironmentService\n\t\tprivate readonly environmentService: IWorkbenchEnvironmentService,\n\t\t@IRemoteAuthorityResolverService\n\t\tprivate readonly remoteAuthorityResolverService: IRemoteAuthorityResolverService,\n\t\t@IWorkspaceContextService\n\t\tprivate readonly workspaceContextService: IWorkspaceContextService,\n\t\t@ILogService private readonly logService: ILogService,\n\t\t@IDialogService private readonly dialogService: IDialogService,\n\t\t@IExtensionService private readonly extensionService: IExtensionService,\n\t\t@IContextKeyService\n\t\tprivate readonly contextKeyService: IContextKeyService,\n\t) {\n\t\tsuper();\n\t\tthis.configPortsAttributes = new PortsAttributes(configurationService);\n\t\tthis.tunnelRestoreValue = this.getTunnelRestoreValue();\n\t\tthis._register(\n\t\t\tthis.configPortsAttributes.onDidChangeAttributes(\n\t\t\t\tthis.updateAttributes,\n\t\t\t\tthis,\n\t\t\t),\n\t\t);\n\t\tthis.forwarded = new Map();\n\t\tthis.remoteTunnels = new Map();\n\t\tthis.tunnelService.tunnels.then(async (tunnels) => {\n\t\t\tconst attributes = await this.getAttributes(\n\t\t\t\ttunnels.map((tunnel) => {\n\t\t\t\t\treturn {\n\t\t\t\t\t\tport: tunnel.tunnelRemotePort,\n\t\t\t\t\t\thost: tunnel.tunnelRemoteHost,\n\t\t\t\t\t};\n\t\t\t\t}),\n\t\t\t);\n\t\t\tfor (const tunnel of tunnels) {\n\t\t\t\tif (tunnel.localAddress) {\n\t\t\t\t\tconst key = makeAddress(\n\t\t\t\t\t\ttunnel.tunnelRemoteHost,\n\t\t\t\t\t\ttunnel.tunnelRemotePort,\n\t\t\t\t\t);\n\t\t\t\t\tconst matchingCandidate =\n\t\t\t\t\t\tmapHasAddressLocalhostOrAllInterfaces(\n\t\t\t\t\t\t\tthis._candidates ?? new Map(),\n\t\t\t\t\t\t\ttunnel.tunnelRemoteHost,\n\t\t\t\t\t\t\ttunnel.tunnelRemotePort,\n\t\t\t\t\t\t);\n\t\t\t\t\tthis.forwarded.set(key, {\n\t\t\t\t\t\tremotePort: tunnel.tunnelRemotePort,\n\t\t\t\t\t\tremoteHost: tunnel.tunnelRemoteHost,\n\t\t\t\t\t\tlocalAddress: tunnel.localAddress,\n\t\t\t\t\t\tprotocol:\n\t\t\t\t\t\t\tattributes?.get(tunnel.tunnelRemotePort)\n\t\t\t\t\t\t\t\t?.protocol ?? TunnelProtocol.Http,\n\t\t\t\t\t\tlocalUri: await this.makeLocalUri(\n\t\t\t\t\t\t\ttunnel.localAddress,\n\t\t\t\t\t\t\tattributes?.get(tunnel.tunnelRemotePort),\n\t\t\t\t\t\t),\n\t\t\t\t\t\tlocalPort: tunnel.tunnelLocalPort,\n\t\t\t\t\t\tname: attributes?.get(tunnel.tunnelRemotePort)?.label,\n\t\t\t\t\t\trunningProcess: matchingCandidate?.detail,\n\t\t\t\t\t\thasRunningProcess: !!matchingCandidate,\n\t\t\t\t\t\tpid: matchingCandidate?.pid,\n\t\t\t\t\t\tprivacy: tunnel.privacy,\n\t\t\t\t\t\tsource: UserTunnelSource,\n\t\t\t\t\t});\n\t\t\t\t\tthis.remoteTunnels.set(key, tunnel);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tthis.detected = new Map();\n\t\tthis._register(\n\t\t\tthis.tunnelService.onTunnelOpened(async (tunnel) => {\n\t\t\t\tconst key = makeAddress(\n\t\t\t\t\ttunnel.tunnelRemoteHost,\n\t\t\t\t\ttunnel.tunnelRemotePort,\n\t\t\t\t);\n\t\t\t\tif (\n\t\t\t\t\t!mapHasAddressLocalhostOrAllInterfaces(\n\t\t\t\t\t\tthis.forwarded,\n\t\t\t\t\t\ttunnel.tunnelRemoteHost,\n\t\t\t\t\t\ttunnel.tunnelRemotePort,\n\t\t\t\t\t) &&\n\t\t\t\t\t!mapHasAddressLocalhostOrAllInterfaces(\n\t\t\t\t\t\tthis.detected,\n\t\t\t\t\t\ttunnel.tunnelRemoteHost,\n\t\t\t\t\t\ttunnel.tunnelRemotePort,\n\t\t\t\t\t) &&\n\t\t\t\t\t!mapHasAddressLocalhostOrAllInterfaces(\n\t\t\t\t\t\tthis.inProgress,\n\t\t\t\t\t\ttunnel.tunnelRemoteHost,\n\t\t\t\t\t\ttunnel.tunnelRemotePort,\n\t\t\t\t\t) &&\n\t\t\t\t\ttunnel.localAddress\n\t\t\t\t) {\n\t\t\t\t\tconst matchingCandidate =\n\t\t\t\t\t\tmapHasAddressLocalhostOrAllInterfaces(\n\t\t\t\t\t\t\tthis._candidates ?? new Map(),\n\t\t\t\t\t\t\ttunnel.tunnelRemoteHost,\n\t\t\t\t\t\t\ttunnel.tunnelRemotePort,\n\t\t\t\t\t\t);\n\t\t\t\t\tconst attributes = (\n\t\t\t\t\t\tawait this.getAttributes([\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tport: tunnel.tunnelRemotePort,\n\t\t\t\t\t\t\t\thost: tunnel.tunnelRemoteHost,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t])\n\t\t\t\t\t)?.get(tunnel.tunnelRemotePort);\n\t\t\t\t\tthis.forwarded.set(key, {\n\t\t\t\t\t\tremoteHost: tunnel.tunnelRemoteHost,\n\t\t\t\t\t\tremotePort: tunnel.tunnelRemotePort,\n\t\t\t\t\t\tlocalAddress: tunnel.localAddress,\n\t\t\t\t\t\tprotocol: attributes?.protocol ?? TunnelProtocol.Http,\n\t\t\t\t\t\tlocalUri: await this.makeLocalUri(\n\t\t\t\t\t\t\ttunnel.localAddress,\n\t\t\t\t\t\t\tattributes,\n\t\t\t\t\t\t),\n\t\t\t\t\t\tlocalPort: tunnel.tunnelLocalPort,\n\t\t\t\t\t\tname: attributes?.label,\n\t\t\t\t\t\tcloseable: true,\n\t\t\t\t\t\trunningProcess: matchingCandidate?.detail,\n\t\t\t\t\t\thasRunningProcess: !!matchingCandidate,\n\t\t\t\t\t\tpid: matchingCandidate?.pid,\n\t\t\t\t\t\tprivacy: tunnel.privacy,\n\t\t\t\t\t\tsource: UserTunnelSource,\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\tawait this.storeForwarded();\n\t\t\t\tthis.checkExtensionActivationEvents();\n\t\t\t\tthis.remoteTunnels.set(key, tunnel);\n\t\t\t\tthis._onForwardPort.fire(this.forwarded.get(key)!);\n\t\t\t}),\n\t\t);\n\t\tthis._register(\n\t\t\tthis.tunnelService.onTunnelClosed((address) => {\n\t\t\t\treturn this.onTunnelClosed(address, TunnelCloseReason.Other);\n\t\t\t}),\n\t\t);\n\t}\n\n\tprivate extensionHasActivationEvent() {\n\t\tif (\n\t\t\tthis.extensionService.extensions.find((extension) =>\n\t\t\t\textension.activationEvents?.includes(ACTIVATION_EVENT),\n\t\t\t)\n\t\t) {\n\t\t\tthis.contextKeyService.createKey(\n\t\t\t\tforwardedPortsViewEnabled.key,\n\t\t\t\ttrue,\n\t\t\t);\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\n\tprivate checkExtensionActivationEvents() {\n\t\tif (this.extensionHasActivationEvent()) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst activationDisposable = this._register(\n\t\t\tthis.extensionService.onDidRegisterExtensions(() => {\n\t\t\t\tif (this.extensionHasActivationEvent()) {\n\t\t\t\t\tactivationDisposable.dispose();\n\t\t\t\t}\n\t\t\t}),\n\t\t);\n\t}\n\n\tprivate async onTunnelClosed(\n\t\taddress: { host: string; port: number },\n\t\treason: TunnelCloseReason,\n\t) {\n\t\tconst key = makeAddress(address.host, address.port);\n\t\tif (this.forwarded.has(key)) {\n\t\t\tthis.forwarded.delete(key);\n\t\t\tawait this.storeForwarded();\n\t\t\tthis._onClosePort.fire(address);\n\t\t}\n\t}\n\n\tprivate makeLocalUri(localAddress: string, attributes?: Attributes) {\n\t\tif (localAddress.startsWith(\"http\")) {\n\t\t\treturn URI.parse(localAddress);\n\t\t}\n\t\tconst protocol = attributes?.protocol ?? \"http\";\n\t\treturn URI.parse(`${protocol}://${localAddress}`);\n\t}\n\n\tprivate async addStorageKeyPostfix(\n\t\tprefix: string,\n\t): Promise<string | undefined> {\n\t\tconst workspace = this.workspaceContextService.getWorkspace();\n\t\tconst workspaceHash = workspace.configuration\n\t\t\t? hash(workspace.configuration.path)\n\t\t\t: workspace.folders.length > 0\n\t\t\t\t? hash(workspace.folders[0].uri.path)\n\t\t\t\t: undefined;\n\t\tif (workspaceHash === undefined) {\n\t\t\tthis.logService.debug(\n\t\t\t\t\"Could not get workspace hash for forwarded ports storage key.\",\n\t\t\t);\n\t\t\treturn undefined;\n\t\t}\n\t\treturn `${prefix}.${this.environmentService.remoteAuthority}.${workspaceHash}`;\n\t}\n\n\tprivate async getTunnelRestoreStorageKey(): Promise<string | undefined> {\n\t\treturn this.addStorageKeyPostfix(TUNNELS_TO_RESTORE);\n\t}\n\n\tprivate async getRestoreExpirationStorageKey(): Promise<\n\t\tstring | undefined\n\t> {\n\t\treturn this.addStorageKeyPostfix(TUNNELS_TO_RESTORE_EXPIRATION);\n\t}\n\n\tprivate async getTunnelRestoreValue(): Promise<string | undefined> {\n\t\tconst deprecatedValue = this.storageService.get(\n\t\t\tTUNNELS_TO_RESTORE,\n\t\t\tStorageScope.WORKSPACE,\n\t\t);\n\t\tif (deprecatedValue) {\n\t\t\tthis.storageService.remove(\n\t\t\t\tTUNNELS_TO_RESTORE,\n\t\t\t\tStorageScope.WORKSPACE,\n\t\t\t);\n\t\t\tawait this.storeForwarded();\n\t\t\treturn deprecatedValue;\n\t\t}\n\t\tconst storageKey = await this.getTunnelRestoreStorageKey();\n\t\tif (!storageKey) {\n\t\t\treturn undefined;\n\t\t}\n\t\treturn this.storageService.get(storageKey, StorageScope.PROFILE);\n\t}\n\n\tasync restoreForwarded() {\n\t\tthis.cleanupExpiredTunnelsForRestore();\n\t\tif (\n\t\t\tthis.configurationService.getValue(\"remote.restoreForwardedPorts\")\n\t\t) {\n\t\t\tconst tunnelRestoreValue = await this.tunnelRestoreValue;\n\t\t\tif (\n\t\t\t\ttunnelRestoreValue &&\n\t\t\t\ttunnelRestoreValue !== this.knownPortsRestoreValue\n\t\t\t) {\n\t\t\t\tconst tunnels =\n\t\t\t\t\t<RestorableTunnel[] | undefined>(\n\t\t\t\t\t\tJSON.parse(tunnelRestoreValue)\n\t\t\t\t\t) ?? [];\n\t\t\t\tthis.logService.trace(\n\t\t\t\t\t`ForwardedPorts: (TunnelModel) restoring ports ${tunnels.map((tunnel) => tunnel.remotePort).join(\", \")}`,\n\t\t\t\t);\n\t\t\t\tfor (const tunnel of tunnels) {\n\t\t\t\t\tconst alreadyForwarded =\n\t\t\t\t\t\tmapHasAddressLocalhostOrAllInterfaces(\n\t\t\t\t\t\t\tthis.detected,\n\t\t\t\t\t\t\ttunnel.remoteHost,\n\t\t\t\t\t\t\ttunnel.remotePort,\n\t\t\t\t\t\t);\n\t\t\t\t\t// Extension forwarded ports should only be updated, not restored.\n\t\t\t\t\tif (\n\t\t\t\t\t\t(tunnel.source.source !== TunnelSource.Extension &&\n\t\t\t\t\t\t\t!alreadyForwarded) ||\n\t\t\t\t\t\t(tunnel.source.source === TunnelSource.Extension &&\n\t\t\t\t\t\t\talreadyForwarded)\n\t\t\t\t\t) {\n\t\t\t\t\t\tawait this.doForward({\n\t\t\t\t\t\t\tremote: {\n\t\t\t\t\t\t\t\thost: tunnel.remoteHost,\n\t\t\t\t\t\t\t\tport: tunnel.remotePort,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tlocal: tunnel.localPort,\n\t\t\t\t\t\t\tname: tunnel.name,\n\t\t\t\t\t\t\televateIfNeeded: true,\n\t\t\t\t\t\t\tsource: tunnel.source,\n\t\t\t\t\t\t});\n\t\t\t\t\t} else if (\n\t\t\t\t\t\ttunnel.source.source === TunnelSource.Extension &&\n\t\t\t\t\t\t!alreadyForwarded\n\t\t\t\t\t) {\n\t\t\t\t\t\tthis.unrestoredExtensionTunnels.set(\n\t\t\t\t\t\t\tmakeAddress(tunnel.remoteHost, tunnel.remotePort),\n\t\t\t\t\t\t\ttunnel,\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tthis.restoreComplete = true;\n\t\tthis.onRestoreComplete.fire();\n\n\t\tif (!this.restoreListener) {\n\t\t\t// It's possible that at restore time the value hasn't synced.\n\t\t\tconst key = await this.getTunnelRestoreStorageKey();\n\t\t\tthis.restoreListener = this._register(new DisposableStore());\n\t\t\tthis.restoreListener.add(\n\t\t\t\tthis.storageService.onDidChangeValue(\n\t\t\t\t\tStorageScope.PROFILE,\n\t\t\t\t\tundefined,\n\t\t\t\t\tthis.restoreListener,\n\t\t\t\t)(async (e) => {\n\t\t\t\t\tif (e.key === key) {\n\t\t\t\t\t\tthis.tunnelRestoreValue = Promise.resolve(\n\t\t\t\t\t\t\tthis.storageService.get(key, StorageScope.PROFILE),\n\t\t\t\t\t\t);\n\t\t\t\t\t\tawait this.restoreForwarded();\n\t\t\t\t\t}\n\t\t\t\t}),\n\t\t\t);\n\t\t}\n\t}\n\n\tprivate cleanupExpiredTunnelsForRestore() {\n\t\tconst keys = this.storageService\n\t\t\t.keys(StorageScope.PROFILE, StorageTarget.USER)\n\t\t\t.filter((key) => key.startsWith(TUNNELS_TO_RESTORE_EXPIRATION));\n\t\tfor (const key of keys) {\n\t\t\tconst expiration = this.storageService.getNumber(\n\t\t\t\tkey,\n\t\t\t\tStorageScope.PROFILE,\n\t\t\t);\n\t\t\tif (expiration && expiration < Date.now()) {\n\t\t\t\tthis.tunnelRestoreValue = Promise.resolve(undefined);\n\t\t\t\tconst storageKey = key.replace(\n\t\t\t\t\tTUNNELS_TO_RESTORE_EXPIRATION,\n\t\t\t\t\tTUNNELS_TO_RESTORE,\n\t\t\t\t);\n\t\t\t\tthis.storageService.remove(key, StorageScope.PROFILE);\n\t\t\t\tthis.storageService.remove(storageKey, StorageScope.PROFILE);\n\t\t\t}\n\t\t}\n\t}\n\n\t@debounce(1000)\n\tprivate async storeForwarded() {\n\t\tif (\n\t\t\tthis.configurationService.getValue(\"remote.restoreForwardedPorts\")\n\t\t) {\n\t\t\tconst forwarded = Array.from(this.forwarded.values());\n\t\t\tconst restorableTunnels: RestorableTunnel[] = forwarded.map(\n\t\t\t\t(tunnel) => {\n\t\t\t\t\treturn {\n\t\t\t\t\t\tremoteHost: tunnel.remoteHost,\n\t\t\t\t\t\tremotePort: tunnel.remotePort,\n\t\t\t\t\t\tlocalPort: tunnel.localPort,\n\t\t\t\t\t\tname: tunnel.name,\n\t\t\t\t\t\tlocalAddress: tunnel.localAddress,\n\t\t\t\t\t\tlocalUri: tunnel.localUri,\n\t\t\t\t\t\tprotocol: tunnel.protocol,\n\t\t\t\t\t\tsource: tunnel.source,\n\t\t\t\t\t};\n\t\t\t\t},\n\t\t\t);\n\t\t\tlet valueToStore: string | undefined;\n\t\t\tif (forwarded.length > 0) {\n\t\t\t\tvalueToStore = JSON.stringify(restorableTunnels);\n\t\t\t}\n\n\t\t\tconst key = await this.getTunnelRestoreStorageKey();\n\t\t\tconst expirationKey = await this.getRestoreExpirationStorageKey();\n\t\t\tif (!valueToStore && key && expirationKey) {\n\t\t\t\tthis.storageService.remove(key, StorageScope.PROFILE);\n\t\t\t\tthis.storageService.remove(expirationKey, StorageScope.PROFILE);\n\t\t\t} else if (\n\t\t\t\tvalueToStore !== this.knownPortsRestoreValue &&\n\t\t\t\tkey &&\n\t\t\t\texpirationKey\n\t\t\t) {\n\t\t\t\tthis.storageService.store(\n\t\t\t\t\tkey,\n\t\t\t\t\tvalueToStore,\n\t\t\t\t\tStorageScope.PROFILE,\n\t\t\t\t\tStorageTarget.USER,\n\t\t\t\t);\n\t\t\t\tthis.storageService.store(\n\t\t\t\t\texpirationKey,\n\t\t\t\t\tDate.now() + RESTORE_EXPIRATION_TIME,\n\t\t\t\t\tStorageScope.PROFILE,\n\t\t\t\t\tStorageTarget.USER,\n\t\t\t\t);\n\t\t\t}\n\t\t\tthis.knownPortsRestoreValue = valueToStore;\n\t\t}\n\t}\n\n\tprivate mismatchCooldown = new Date();\n\tprivate async showPortMismatchModalIfNeeded(\n\t\ttunnel: RemoteTunnel,\n\t\texpectedLocal: number,\n\t\tattributes: Attributes | undefined,\n\t) {\n\t\tif (!tunnel.tunnelLocalPort || !attributes?.requireLocalPort) {\n\t\t\treturn;\n\t\t}\n\t\tif (tunnel.tunnelLocalPort === expectedLocal) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst newCooldown = new Date();\n\t\tif (\n\t\t\tthis.mismatchCooldown.getTime() + MISMATCH_LOCAL_PORT_COOLDOWN >\n\t\t\tnewCooldown.getTime()\n\t\t) {\n\t\t\treturn;\n\t\t}\n\t\tthis.mismatchCooldown = newCooldown;\n\t\tconst mismatchString = nls.localize(\n\t\t\t\"remote.localPortMismatch.single\",\n\t\t\t\"Local port {0} could not be used for forwarding to remote port {1}.\\n\\nThis usually happens when there is already another process using local port {0}.\\n\\nPort number {2} has been used instead.\",\n\t\t\texpectedLocal,\n\t\t\ttunnel.tunnelRemotePort,\n\t\t\ttunnel.tunnelLocalPort,\n\t\t);\n\t\treturn this.dialogService.info(mismatchString);\n\t}\n\n\tasync forward(\n\t\ttunnelProperties: TunnelProperties,\n\t\tattributes?: Attributes | null,\n\t): Promise<RemoteTunnel | string | undefined> {\n\t\tif (!this.restoreComplete && this.environmentService.remoteAuthority) {\n\t\t\tawait Event.toPromise(this.onRestoreComplete.event);\n\t\t}\n\t\treturn this.doForward(tunnelProperties, attributes);\n\t}\n\n\tprivate async doForward(\n\t\ttunnelProperties: TunnelProperties,\n\t\tattributes?: Attributes | null,\n\t): Promise<RemoteTunnel | string | undefined> {\n\t\tawait this.extensionService.activateByEvent(ACTIVATION_EVENT);\n\n\t\tconst existingTunnel = mapHasAddressLocalhostOrAllInterfaces(\n\t\t\tthis.forwarded,\n\t\t\ttunnelProperties.remote.host,\n\t\t\ttunnelProperties.remote.port,\n\t\t);\n\t\tattributes =\n\t\t\tattributes ??\n\t\t\t(attributes !== null\n\t\t\t\t? (await this.getAttributes([tunnelProperties.remote]))?.get(\n\t\t\t\t\t\ttunnelProperties.remote.port,\n\t\t\t\t\t)\n\t\t\t\t: undefined);\n\t\tconst localPort =\n\t\t\ttunnelProperties.local !== undefined\n\t\t\t\t? tunnelProperties.local\n\t\t\t\t: tunnelProperties.remote.port;\n\t\tlet noTunnelValue: string | undefined;\n\t\tif (existingTunnel) {\n\t\t\treturn this.mergeAttributesIntoExistingTunnel(\n\t\t\t\texistingTunnel,\n\t\t\t\ttunnelProperties,\n\t\t\t\tattributes,\n\t\t\t);\n\t\t} else {\n\t\t\tconst authority = this.environmentService.remoteAuthority;\n\t\t\tconst addressProvider: IAddressProvider | undefined = authority\n\t\t\t\t? {\n\t\t\t\t\t\tgetAddress: async () => {\n\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\tawait this.remoteAuthorityResolverService.resolveAuthority(\n\t\t\t\t\t\t\t\t\tauthority,\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t).authority;\n\t\t\t\t\t\t},\n\t\t\t\t\t}\n\t\t\t\t: undefined;\n\n\t\t\tconst key = makeAddress(\n\t\t\t\ttunnelProperties.remote.host,\n\t\t\t\ttunnelProperties.remote.port,\n\t\t\t);\n\t\t\tthis.inProgress.set(key, true);\n\t\t\ttunnelProperties = this.mergeCachedAndUnrestoredProperties(\n\t\t\t\tkey,\n\t\t\t\ttunnelProperties,\n\t\t\t);\n\n\t\t\tconst tunnel = await this.tunnelService.openTunnel(\n\t\t\t\taddressProvider,\n\t\t\t\ttunnelProperties.remote.host,\n\t\t\t\ttunnelProperties.remote.port,\n\t\t\t\tundefined,\n\t\t\t\tlocalPort,\n\t\t\t\t!tunnelProperties.elevateIfNeeded\n\t\t\t\t\t? attributes?.elevateIfNeeded\n\t\t\t\t\t: tunnelProperties.elevateIfNeeded,\n\t\t\t\ttunnelProperties.privacy,\n\t\t\t\tattributes?.protocol,\n\t\t\t);\n\t\t\tif (typeof tunnel === \"string\") {\n\t\t\t\t// There was an error  while creating the tunnel.\n\t\t\t\tnoTunnelValue = tunnel;\n\t\t\t} else if (tunnel && tunnel.localAddress) {\n\t\t\t\tconst matchingCandidate =\n\t\t\t\t\tmapHasAddressLocalhostOrAllInterfaces<CandidatePort>(\n\t\t\t\t\t\tthis._candidates ?? new Map(),\n\t\t\t\t\t\ttunnelProperties.remote.host,\n\t\t\t\t\t\ttunnelProperties.remote.port,\n\t\t\t\t\t);\n\t\t\t\tconst protocol = tunnel.protocol\n\t\t\t\t\t? tunnel.protocol === TunnelProtocol.Https\n\t\t\t\t\t\t? TunnelProtocol.Https\n\t\t\t\t\t\t: TunnelProtocol.Http\n\t\t\t\t\t: (attributes?.protocol ?? TunnelProtocol.Http);\n\t\t\t\tconst newForward: Tunnel = {\n\t\t\t\t\tremoteHost: tunnel.tunnelRemoteHost,\n\t\t\t\t\tremotePort: tunnel.tunnelRemotePort,\n\t\t\t\t\tlocalPort: tunnel.tunnelLocalPort,\n\t\t\t\t\tname: attributes?.label ?? tunnelProperties.name,\n\t\t\t\t\tcloseable: true,\n\t\t\t\t\tlocalAddress: tunnel.localAddress,\n\t\t\t\t\tprotocol,\n\t\t\t\t\tlocalUri: await this.makeLocalUri(\n\t\t\t\t\t\ttunnel.localAddress,\n\t\t\t\t\t\tattributes,\n\t\t\t\t\t),\n\t\t\t\t\trunningProcess: matchingCandidate?.detail,\n\t\t\t\t\thasRunningProcess: !!matchingCandidate,\n\t\t\t\t\tpid: matchingCandidate?.pid,\n\t\t\t\t\tsource: tunnelProperties.source ?? UserTunnelSource,\n\t\t\t\t\tprivacy: tunnel.privacy,\n\t\t\t\t};\n\t\t\t\tthis.forwarded.set(key, newForward);\n\t\t\t\tthis.remoteTunnels.set(key, tunnel);\n\t\t\t\tthis.inProgress.delete(key);\n\t\t\t\tawait this.storeForwarded();\n\t\t\t\tawait this.showPortMismatchModalIfNeeded(\n\t\t\t\t\ttunnel,\n\t\t\t\t\tlocalPort,\n\t\t\t\t\tattributes,\n\t\t\t\t);\n\t\t\t\tthis._onForwardPort.fire(newForward);\n\t\t\t\treturn tunnel;\n\t\t\t}\n\t\t\tthis.inProgress.delete(key);\n\t\t}\n\n\t\treturn noTunnelValue;\n\t}\n\n\tprivate mergeCachedAndUnrestoredProperties(\n\t\tkey: string,\n\t\ttunnelProperties: TunnelProperties,\n\t): TunnelProperties {\n\t\tconst map = this.unrestoredExtensionTunnels.has(key)\n\t\t\t? this.unrestoredExtensionTunnels\n\t\t\t: this.sessionCachedProperties.has(key)\n\t\t\t\t? this.sessionCachedProperties\n\t\t\t\t: undefined;\n\t\tif (map) {\n\t\t\tconst updateProps = map.get(key)!;\n\t\t\tmap.delete(key);\n\t\t\tif (updateProps) {\n\t\t\t\ttunnelProperties.name =\n\t\t\t\t\tupdateProps.name ?? tunnelProperties.name;\n\t\t\t\ttunnelProperties.local =\n\t\t\t\t\t(\"local\" in updateProps\n\t\t\t\t\t\t? updateProps.local\n\t\t\t\t\t\t: \"localPort\" in updateProps\n\t\t\t\t\t\t\t? updateProps.localPort\n\t\t\t\t\t\t\t: undefined) ?? tunnelProperties.local;\n\t\t\t\ttunnelProperties.privacy = tunnelProperties.privacy;\n\t\t\t}\n\t\t}\n\t\treturn tunnelProperties;\n\t}\n\n\tprivate async mergeAttributesIntoExistingTunnel(\n\t\texistingTunnel: Tunnel,\n\t\ttunnelProperties: TunnelProperties,\n\t\tattributes: Attributes | undefined,\n\t) {\n\t\tconst newName = attributes?.label ?? tunnelProperties.name;\n\t\tenum MergedAttributeAction {\n\t\t\tNone = 0,\n\t\t\tFire = 1,\n\t\t\tReopen = 2,\n\t\t}\n\t\tlet mergedAction = MergedAttributeAction.None;\n\t\tif (newName !== existingTunnel.name) {\n\t\t\texistingTunnel.name = newName;\n\t\t\tmergedAction = MergedAttributeAction.Fire;\n\t\t}\n\t\t// Source of existing tunnel wins so that original source is maintained\n\t\tif (\n\t\t\t(attributes?.protocol ||\n\t\t\t\texistingTunnel.protocol !== TunnelProtocol.Http) &&\n\t\t\tattributes?.protocol !== existingTunnel.protocol\n\t\t) {\n\t\t\ttunnelProperties.source = existingTunnel.source;\n\t\t\tmergedAction = MergedAttributeAction.Reopen;\n\t\t}\n\t\t// New privacy value wins\n\t\tif (\n\t\t\ttunnelProperties.privacy &&\n\t\t\texistingTunnel.privacy !== tunnelProperties.privacy\n\t\t) {\n\t\t\tmergedAction = MergedAttributeAction.Reopen;\n\t\t}\n\t\tswitch (mergedAction) {\n\t\t\tcase MergedAttributeAction.Fire: {\n\t\t\t\tthis._onForwardPort.fire();\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase MergedAttributeAction.Reopen: {\n\t\t\t\tawait this.close(\n\t\t\t\t\texistingTunnel.remoteHost,\n\t\t\t\t\texistingTunnel.remotePort,\n\t\t\t\t\tTunnelCloseReason.User,\n\t\t\t\t);\n\t\t\t\tawait this.doForward(tunnelProperties, attributes);\n\t\t\t}\n\t\t}\n\n\t\treturn mapHasAddressLocalhostOrAllInterfaces(\n\t\t\tthis.remoteTunnels,\n\t\t\ttunnelProperties.remote.host,\n\t\t\ttunnelProperties.remote.port,\n\t\t);\n\t}\n\n\tasync name(host: string, port: number, name: string) {\n\t\tconst existingForwarded = mapHasAddressLocalhostOrAllInterfaces(\n\t\t\tthis.forwarded,\n\t\t\thost,\n\t\t\tport,\n\t\t);\n\t\tconst key = makeAddress(host, port);\n\t\tif (existingForwarded) {\n\t\t\texistingForwarded.name = name;\n\t\t\tawait this.storeForwarded();\n\t\t\tthis._onPortName.fire({ host, port });\n\t\t\treturn;\n\t\t} else if (this.detected.has(key)) {\n\t\t\tthis.detected.get(key)!.name = name;\n\t\t\tthis._onPortName.fire({ host, port });\n\t\t}\n\t}\n\n\tasync close(\n\t\thost: string,\n\t\tport: number,\n\t\treason: TunnelCloseReason,\n\t): Promise<void> {\n\t\tconst key = makeAddress(host, port);\n\t\tconst oldTunnel = this.forwarded.get(key)!;\n\t\tif (\n\t\t\treason === TunnelCloseReason.AutoForwardEnd &&\n\t\t\toldTunnel &&\n\t\t\toldTunnel.source.source === TunnelSource.Auto\n\t\t) {\n\t\t\tthis.sessionCachedProperties.set(key, {\n\t\t\t\tlocal: oldTunnel.localPort,\n\t\t\t\tname: oldTunnel.name,\n\t\t\t\tprivacy: oldTunnel.privacy,\n\t\t\t});\n\t\t}\n\t\tawait this.tunnelService.closeTunnel(host, port);\n\t\treturn this.onTunnelClosed({ host, port }, reason);\n\t}\n\n\taddress(host: string, port: number): string | undefined {\n\t\tconst key = makeAddress(host, port);\n\t\treturn (this.forwarded.get(key) || this.detected.get(key))\n\t\t\t?.localAddress;\n\t}\n\n\tpublic get environmentTunnelsSet(): boolean {\n\t\treturn this._environmentTunnelsSet;\n\t}\n\n\taddEnvironmentTunnels(tunnels: TunnelDescription[] | undefined): void {\n\t\tif (tunnels) {\n\t\t\tfor (const tunnel of tunnels) {\n\t\t\t\tconst matchingCandidate = mapHasAddressLocalhostOrAllInterfaces(\n\t\t\t\t\tthis._candidates ?? new Map(),\n\t\t\t\t\ttunnel.remoteAddress.host,\n\t\t\t\t\ttunnel.remoteAddress.port,\n\t\t\t\t);\n\t\t\t\tconst localAddress =\n\t\t\t\t\ttypeof tunnel.localAddress === \"string\"\n\t\t\t\t\t\t? tunnel.localAddress\n\t\t\t\t\t\t: makeAddress(\n\t\t\t\t\t\t\t\ttunnel.localAddress.host,\n\t\t\t\t\t\t\t\ttunnel.localAddress.port,\n\t\t\t\t\t\t\t);\n\t\t\t\tthis.detected.set(\n\t\t\t\t\tmakeAddress(\n\t\t\t\t\t\ttunnel.remoteAddress.host,\n\t\t\t\t\t\ttunnel.remoteAddress.port,\n\t\t\t\t\t),\n\t\t\t\t\t{\n\t\t\t\t\t\tremoteHost: tunnel.remoteAddress.host,\n\t\t\t\t\t\tremotePort: tunnel.remoteAddress.port,\n\t\t\t\t\t\tlocalAddress: localAddress,\n\t\t\t\t\t\tprotocol: TunnelProtocol.Http,\n\t\t\t\t\t\tlocalUri: this.makeLocalUri(localAddress),\n\t\t\t\t\t\tcloseable: false,\n\t\t\t\t\t\trunningProcess: matchingCandidate?.detail,\n\t\t\t\t\t\thasRunningProcess: !!matchingCandidate,\n\t\t\t\t\t\tpid: matchingCandidate?.pid,\n\t\t\t\t\t\tprivacy: TunnelPrivacyId.ConstantPrivate,\n\t\t\t\t\t\tsource: {\n\t\t\t\t\t\t\tsource: TunnelSource.Extension,\n\t\t\t\t\t\t\tdescription: nls.localize(\n\t\t\t\t\t\t\t\t\"tunnel.staticallyForwarded\",\n\t\t\t\t\t\t\t\t\"Statically Forwarded\",\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t);\n\t\t\t\tthis.tunnelService.setEnvironmentTunnel(\n\t\t\t\t\ttunnel.remoteAddress.host,\n\t\t\t\t\ttunnel.remoteAddress.port,\n\t\t\t\t\tlocalAddress,\n\t\t\t\t\tTunnelPrivacyId.ConstantPrivate,\n\t\t\t\t\tTunnelProtocol.Http,\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t\tthis._environmentTunnelsSet = true;\n\t\tthis._onEnvironmentTunnelsSet.fire();\n\t\tthis._onForwardPort.fire();\n\t}\n\n\tsetCandidateFilter(\n\t\tfilter:\n\t\t\t| ((candidates: CandidatePort[]) => Promise<CandidatePort[]>)\n\t\t\t| undefined,\n\t): void {\n\t\tthis._candidateFilter = filter;\n\t}\n\n\tasync setCandidates(candidates: CandidatePort[]) {\n\t\tlet processedCandidates = candidates;\n\t\tif (this._candidateFilter) {\n\t\t\t// When an extension provides a filter, we do the filtering on the extension host before the candidates are set here.\n\t\t\t// However, when the filter doesn't come from an extension we filter here.\n\t\t\tprocessedCandidates = await this._candidateFilter(candidates);\n\t\t}\n\t\tconst removedCandidates =\n\t\t\tthis.updateInResponseToCandidates(processedCandidates);\n\t\tthis.logService.trace(\n\t\t\t`ForwardedPorts: (TunnelModel) removed candidates ${Array.from(\n\t\t\t\tremovedCandidates.values(),\n\t\t\t)\n\t\t\t\t.map((candidate) => candidate.port)\n\t\t\t\t.join(\", \")}`,\n\t\t);\n\t\tthis._onCandidatesChanged.fire(removedCandidates);\n\t}\n\n\t// Returns removed candidates\n\tprivate updateInResponseToCandidates(\n\t\tcandidates: CandidatePort[],\n\t): Map<string, { host: string; port: number }> {\n\t\tconst removedCandidates = this._candidates ?? new Map();\n\t\tconst candidatesMap = new Map();\n\t\tthis._candidates = candidatesMap;\n\t\tcandidates.forEach((value) => {\n\t\t\tconst addressKey = makeAddress(value.host, value.port);\n\t\t\tcandidatesMap.set(addressKey, {\n\t\t\t\thost: value.host,\n\t\t\t\tport: value.port,\n\t\t\t\tdetail: value.detail,\n\t\t\t\tpid: value.pid,\n\t\t\t});\n\t\t\tif (removedCandidates.has(addressKey)) {\n\t\t\t\tremovedCandidates.delete(addressKey);\n\t\t\t}\n\t\t\tconst forwardedValue = mapHasAddressLocalhostOrAllInterfaces(\n\t\t\t\tthis.forwarded,\n\t\t\t\tvalue.host,\n\t\t\t\tvalue.port,\n\t\t\t);\n\t\t\tif (forwardedValue) {\n\t\t\t\tforwardedValue.runningProcess = value.detail;\n\t\t\t\tforwardedValue.hasRunningProcess = true;\n\t\t\t\tforwardedValue.pid = value.pid;\n\t\t\t}\n\t\t});\n\t\tremovedCandidates.forEach((_value, key) => {\n\t\t\tconst parsedAddress = parseAddress(key);\n\t\t\tif (!parsedAddress) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst forwardedValue = mapHasAddressLocalhostOrAllInterfaces(\n\t\t\t\tthis.forwarded,\n\t\t\t\tparsedAddress.host,\n\t\t\t\tparsedAddress.port,\n\t\t\t);\n\t\t\tif (forwardedValue) {\n\t\t\t\tforwardedValue.runningProcess = undefined;\n\t\t\t\tforwardedValue.hasRunningProcess = false;\n\t\t\t\tforwardedValue.pid = undefined;\n\t\t\t}\n\t\t\tconst detectedValue = mapHasAddressLocalhostOrAllInterfaces(\n\t\t\t\tthis.detected,\n\t\t\t\tparsedAddress.host,\n\t\t\t\tparsedAddress.port,\n\t\t\t);\n\t\t\tif (detectedValue) {\n\t\t\t\tdetectedValue.runningProcess = undefined;\n\t\t\t\tdetectedValue.hasRunningProcess = false;\n\t\t\t\tdetectedValue.pid = undefined;\n\t\t\t}\n\t\t});\n\t\treturn removedCandidates;\n\t}\n\n\tget candidates(): CandidatePort[] {\n\t\treturn this._candidates ? Array.from(this._candidates.values()) : [];\n\t}\n\n\tget candidatesOrUndefined(): CandidatePort[] | undefined {\n\t\treturn this._candidates ? this.candidates : undefined;\n\t}\n\n\tprivate async updateAttributes() {\n\t\t// If the label changes in the attributes, we should update it.\n\t\tconst tunnels = Array.from(this.forwarded.values());\n\t\tconst allAttributes = await this.getAttributes(\n\t\t\ttunnels.map((tunnel) => {\n\t\t\t\treturn { port: tunnel.remotePort, host: tunnel.remoteHost };\n\t\t\t}),\n\t\t\tfalse,\n\t\t);\n\t\tif (!allAttributes) {\n\t\t\treturn;\n\t\t}\n\t\tfor (const forwarded of tunnels) {\n\t\t\tconst attributes = allAttributes.get(forwarded.remotePort);\n\t\t\tif (\n\t\t\t\t(attributes?.protocol ||\n\t\t\t\t\tforwarded.protocol !== TunnelProtocol.Http) &&\n\t\t\t\tattributes?.protocol !== forwarded.protocol\n\t\t\t) {\n\t\t\t\tawait this.doForward(\n\t\t\t\t\t{\n\t\t\t\t\t\tremote: {\n\t\t\t\t\t\t\thost: forwarded.remoteHost,\n\t\t\t\t\t\t\tport: forwarded.remotePort,\n\t\t\t\t\t\t},\n\t\t\t\t\t\tlocal: forwarded.localPort,\n\t\t\t\t\t\tname: forwarded.name,\n\t\t\t\t\t\tsource: forwarded.source,\n\t\t\t\t\t},\n\t\t\t\t\tattributes,\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tif (!attributes) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (attributes.label && attributes.label !== forwarded.name) {\n\t\t\t\tawait this.name(\n\t\t\t\t\tforwarded.remoteHost,\n\t\t\t\t\tforwarded.remotePort,\n\t\t\t\t\tattributes.label,\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t}\n\n\tasync getAttributes(\n\t\tforwardedPorts: { host: string; port: number }[],\n\t\tcheckProviders = true,\n\t): Promise<Map<number, Attributes> | undefined> {\n\t\tconst matchingCandidates: Map<number, CandidatePort> = new Map();\n\t\tconst pidToPortsMapping: Map<number | undefined, number[]> = new Map();\n\t\tforwardedPorts.forEach((forwardedPort) => {\n\t\t\tconst matchingCandidate =\n\t\t\t\tmapHasAddressLocalhostOrAllInterfaces<CandidatePort>(\n\t\t\t\t\tthis._candidates ?? new Map(),\n\t\t\t\t\tLOCALHOST_ADDRESSES[0],\n\t\t\t\t\tforwardedPort.port,\n\t\t\t\t) ?? forwardedPort;\n\t\t\tif (matchingCandidate) {\n\t\t\t\tmatchingCandidates.set(forwardedPort.port, matchingCandidate);\n\t\t\t\tconst pid = isCandidatePort(matchingCandidate)\n\t\t\t\t\t? matchingCandidate.pid\n\t\t\t\t\t: undefined;\n\t\t\t\tif (!pidToPortsMapping.has(pid)) {\n\t\t\t\t\tpidToPortsMapping.set(pid, []);\n\t\t\t\t}\n\t\t\t\tpidToPortsMapping.get(pid)?.push(forwardedPort.port);\n\t\t\t}\n\t\t});\n\n\t\tconst configAttributes: Map<number, Attributes> = new Map();\n\t\tforwardedPorts.forEach((forwardedPort) => {\n\t\t\tconst attributes = this.configPortsAttributes.getAttributes(\n\t\t\t\tforwardedPort.port,\n\t\t\t\tforwardedPort.host,\n\t\t\t\tmatchingCandidates.get(forwardedPort.port)?.detail,\n\t\t\t);\n\t\t\tif (attributes) {\n\t\t\t\tconfigAttributes.set(forwardedPort.port, attributes);\n\t\t\t}\n\t\t});\n\t\tif (this.portAttributesProviders.length === 0 || !checkProviders) {\n\t\t\treturn configAttributes.size > 0 ? configAttributes : undefined;\n\t\t}\n\n\t\t// Group calls to provide attributes by pid.\n\t\tconst allProviderResults = await Promise.all(\n\t\t\tthis.portAttributesProviders.flatMap((provider) => {\n\t\t\t\treturn Array.from(pidToPortsMapping.entries()).map((entry) => {\n\t\t\t\t\tconst portGroup = entry[1];\n\t\t\t\t\tconst matchingCandidate = matchingCandidates.get(\n\t\t\t\t\t\tportGroup[0],\n\t\t\t\t\t);\n\t\t\t\t\treturn provider.providePortAttributes(\n\t\t\t\t\t\tportGroup,\n\t\t\t\t\t\tmatchingCandidate?.pid,\n\t\t\t\t\t\tmatchingCandidate?.detail,\n\t\t\t\t\t\tCancellationToken.None,\n\t\t\t\t\t);\n\t\t\t\t});\n\t\t\t}),\n\t\t);\n\t\tconst providedAttributes: Map<number, ProvidedPortAttributes> =\n\t\t\tnew Map();\n\t\tallProviderResults.forEach((attributes) =>\n\t\t\tattributes.forEach((attribute) => {\n\t\t\t\tif (attribute) {\n\t\t\t\t\tprovidedAttributes.set(attribute.port, attribute);\n\t\t\t\t}\n\t\t\t}),\n\t\t);\n\n\t\tif (!configAttributes && !providedAttributes) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\t// Merge. The config wins.\n\t\tconst mergedAttributes: Map<number, Attributes> = new Map();\n\t\tforwardedPorts.forEach((forwardedPorts) => {\n\t\t\tconst config = configAttributes.get(forwardedPorts.port);\n\t\t\tconst provider = providedAttributes.get(forwardedPorts.port);\n\t\t\tmergedAttributes.set(forwardedPorts.port, {\n\t\t\t\televateIfNeeded: config?.elevateIfNeeded,\n\t\t\t\tlabel: config?.label,\n\t\t\t\tonAutoForward:\n\t\t\t\t\tconfig?.onAutoForward ??\n\t\t\t\t\tPortsAttributes.providedActionToAction(\n\t\t\t\t\t\tprovider?.autoForwardAction,\n\t\t\t\t\t),\n\t\t\t\trequireLocalPort: config?.requireLocalPort,\n\t\t\t\tprotocol: config?.protocol,\n\t\t\t});\n\t\t});\n\n\t\treturn mergedAttributes;\n\t}\n\n\taddAttributesProvider(provider: PortAttributesProvider) {\n\t\tthis.portAttributesProviders.push(provider);\n\t}\n}\n"],
  "mappings": "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",
  "names": ["TunnelCloseReason", "TunnelSource", "OnPortForward", "MergedAttributeAction", "forwardedPorts"]
}
