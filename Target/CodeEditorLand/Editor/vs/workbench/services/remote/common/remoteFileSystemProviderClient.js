import{getErrorMessage as p}from"../../../../base/common/errors.js";import{Disposable as a,DisposableStore as l}from"../../../../base/common/lifecycle.js";import{Schemas as m}from"../../../../base/common/network.js";import{OperatingSystem as v}from"../../../../base/common/platform.js";import{DiskFileSystemProviderClient as g}from"../../../../platform/files/common/diskFileSystemProviderClient.js";const f="remoteFilesystem";class s extends g{static register(o,t,n){const i=o.getConnection();if(!i)return a.None;const r=new l,c=(async()=>{try{const e=await o.getRawEnvironment();e?t.registerProvider(m.vscodeRemote,r.add(new s(e,i))):n.error("Cannot register remote filesystem provider. Remote environment doesnot exist.")}catch(e){n.error("Cannot register remote filesystem provider. Error while fetching remote environment.",p(e))}})();return r.add(t.onWillActivateFileSystemProvider(e=>{e.scheme===m.vscodeRemote&&e.join(c)})),r}constructor(o,t){super(t.getChannel(f),{pathCaseSensitive:o.os===v.Linux})}}export{f as REMOTE_FILE_SYSTEM_CHANNEL_NAME,s as RemoteFileSystemProviderClient};
