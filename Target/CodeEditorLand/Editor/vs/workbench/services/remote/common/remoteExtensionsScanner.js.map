{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/remote/common/remoteExtensionsScanner.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IRemoteAgentService } from './remoteAgentService.js';\nimport { IRemoteExtensionsScannerService, RemoteExtensionsScannerChannelName } from '../../../../platform/remote/common/remoteExtensionsScanner.js';\nimport * as platform from '../../../../base/common/platform.js';\nimport { IChannel } from '../../../../base/parts/ipc/common/ipc.js';\nimport { IExtensionDescription } from '../../../../platform/extensions/common/extensions.js';\nimport { URI } from '../../../../base/common/uri.js';\nimport { IUserDataProfileService } from '../../userDataProfile/common/userDataProfile.js';\nimport { IRemoteUserDataProfilesService } from '../../userDataProfile/common/remoteUserDataProfiles.js';\nimport { IWorkbenchEnvironmentService } from '../../environment/common/environmentService.js';\nimport { ILogService } from '../../../../platform/log/common/log.js';\nimport { InstantiationType, registerSingleton } from '../../../../platform/instantiation/common/extensions.js';\nimport { IActiveLanguagePackService } from '../../localization/common/locale.js';\nimport { IWorkbenchExtensionManagementService } from '../../extensionManagement/common/extensionManagement.js';\nimport { Mutable } from '../../../../base/common/types.js';\n\nclass RemoteExtensionsScannerService implements IRemoteExtensionsScannerService {\n\n\tdeclare readonly _serviceBrand: undefined;\n\n\tconstructor(\n\t\t@IRemoteAgentService private readonly remoteAgentService: IRemoteAgentService,\n\t\t@IWorkbenchEnvironmentService private readonly environmentService: IWorkbenchEnvironmentService,\n\t\t@IUserDataProfileService private readonly userDataProfileService: IUserDataProfileService,\n\t\t@IRemoteUserDataProfilesService private readonly remoteUserDataProfilesService: IRemoteUserDataProfilesService,\n\t\t@IActiveLanguagePackService private readonly activeLanguagePackService: IActiveLanguagePackService,\n\t\t@IWorkbenchExtensionManagementService private readonly extensionManagementService: IWorkbenchExtensionManagementService,\n\t\t@ILogService private readonly logService: ILogService,\n\t) { }\n\n\twhenExtensionsReady(): Promise<void> {\n\t\treturn this.withChannel(\n\t\t\tchannel => channel.call('whenExtensionsReady'),\n\t\t\tundefined\n\t\t);\n\t}\n\n\tasync scanExtensions(): Promise<IExtensionDescription[]> {\n\t\ttry {\n\t\t\tconst languagePack = await this.activeLanguagePackService.getExtensionIdProvidingCurrentLocale();\n\t\t\treturn await this.withChannel(\n\t\t\t\tasync (channel) => {\n\t\t\t\t\tconst profileLocation = this.userDataProfileService.currentProfile.isDefault ? undefined : (await this.remoteUserDataProfilesService.getRemoteProfile(this.userDataProfileService.currentProfile)).extensionsResource;\n\t\t\t\t\tconst scannedExtensions = await channel.call<Mutable<IExtensionDescription>[]>('scanExtensions', [\n\t\t\t\t\t\tplatform.language,\n\t\t\t\t\t\tprofileLocation,\n\t\t\t\t\t\tthis.extensionManagementService.getInstalledWorkspaceExtensionLocations(),\n\t\t\t\t\t\tthis.environmentService.extensionDevelopmentLocationURI,\n\t\t\t\t\t\tlanguagePack\n\t\t\t\t\t]);\n\t\t\t\t\tscannedExtensions.forEach((extension) => {\n\t\t\t\t\t\textension.extensionLocation = URI.revive(extension.extensionLocation);\n\t\t\t\t\t});\n\t\t\t\t\treturn scannedExtensions;\n\t\t\t\t},\n\t\t\t\t[]\n\t\t\t);\n\t\t} catch (error) {\n\t\t\tthis.logService.error(error);\n\t\t\treturn [];\n\t\t}\n\t}\n\n\tprivate withChannel<R>(callback: (channel: IChannel) => Promise<R>, fallback: R): Promise<R> {\n\t\tconst connection = this.remoteAgentService.getConnection();\n\t\tif (!connection) {\n\t\t\treturn Promise.resolve(fallback);\n\t\t}\n\t\treturn connection.withChannel(RemoteExtensionsScannerChannelName, (channel) => callback(channel));\n\t}\n}\n\nregisterSingleton(IRemoteExtensionsScannerService, RemoteExtensionsScannerService, InstantiationType.Delayed);\n"],
  "mappings": ";;;;;;;;;;;;AAKA,SAAS,2BAA2B;AACpC,SAAS,iCAAiC,0CAA0C;AACpF,YAAY,cAAc;AAC1B,SAAS,gBAAgB;AACzB,SAAS,6BAA6B;AACtC,SAAS,WAAW;AACpB,SAAS,+BAA+B;AACxC,SAAS,sCAAsC;AAC/C,SAAS,oCAAoC;AAC7C,SAAS,mBAAmB;AAC5B,SAAS,mBAAmB,yBAAyB;AACrD,SAAS,kCAAkC;AAC3C,SAAS,4CAA4C;AACrD,SAAS,eAAe;AAExB,IAAM,iCAAN,MAAgF;AAAA,EAI/E,YACuC,oBACS,oBACL,wBACO,+BACJ,2BACU,4BACzB,YAC7B;AAPqC;AACS;AACL;AACO;AACJ;AACU;AACzB;AAAA,EAC3B;AAAA,EAhCL,OAoBgF;AAAA;AAAA;AAAA,EAc/E,sBAAqC;AACpC,WAAO,KAAK;AAAA,MACX,aAAW,QAAQ,KAAK,qBAAqB;AAAA,MAC7C;AAAA,IACD;AAAA,EACD;AAAA,EAEA,MAAM,iBAAmD;AACxD,QAAI;AACH,YAAM,eAAe,MAAM,KAAK,0BAA0B,qCAAqC;AAC/F,aAAO,MAAM,KAAK;AAAA,QACjB,OAAO,YAAY;AAClB,gBAAM,kBAAkB,KAAK,uBAAuB,eAAe,YAAY,UAAa,MAAM,KAAK,8BAA8B,iBAAiB,KAAK,uBAAuB,cAAc,GAAG;AACnM,gBAAM,oBAAoB,MAAM,QAAQ,KAAuC,kBAAkB;AAAA,YAChG,SAAS;AAAA,YACT;AAAA,YACA,KAAK,2BAA2B,wCAAwC;AAAA,YACxE,KAAK,mBAAmB;AAAA,YACxB;AAAA,UACD,CAAC;AACD,4BAAkB,QAAQ,CAAC,cAAc;AACxC,sBAAU,oBAAoB,IAAI,OAAO,UAAU,iBAAiB;AAAA,UACrE,CAAC;AACD,iBAAO;AAAA,QACR;AAAA,QACA,CAAC;AAAA,MACF;AAAA,IACD,SAAS,OAAO;AACf,WAAK,WAAW,MAAM,KAAK;AAC3B,aAAO,CAAC;AAAA,IACT;AAAA,EACD;AAAA,EAEQ,YAAe,UAA6C,UAAyB;AAC5F,UAAM,aAAa,KAAK,mBAAmB,cAAc;AACzD,QAAI,CAAC,YAAY;AAChB,aAAO,QAAQ,QAAQ,QAAQ;AAAA,IAChC;AACA,WAAO,WAAW,YAAY,oCAAoC,CAAC,YAAY,SAAS,OAAO,CAAC;AAAA,EACjG;AACD;AAtDM,iCAAN;AAAA,EAKG;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,GAXG;AAwDN,kBAAkB,iCAAiC,gCAAgC,kBAAkB,OAAO;",
  "names": []
}
