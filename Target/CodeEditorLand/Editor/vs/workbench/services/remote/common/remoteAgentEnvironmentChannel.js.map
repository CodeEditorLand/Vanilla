{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/remote/common/remoteAgentEnvironmentChannel.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { revive } from \"../../../../base/common/marshalling.js\";\nimport type * as performance from \"../../../../base/common/performance.js\";\nimport type * as platform from \"../../../../base/common/platform.js\";\nimport {\n\tURI,\n\ttype UriComponents,\n\ttype UriDto,\n} from \"../../../../base/common/uri.js\";\nimport type { IChannel } from \"../../../../base/parts/ipc/common/ipc.js\";\nimport type {\n\tIDiagnosticInfo,\n\tIDiagnosticInfoOptions,\n} from \"../../../../platform/diagnostics/common/diagnostics.js\";\nimport type { IRemoteAgentEnvironment } from \"../../../../platform/remote/common/remoteAgentEnvironment.js\";\nimport type {\n\tITelemetryData,\n\tTelemetryLevel,\n} from \"../../../../platform/telemetry/common/telemetry.js\";\nimport type { IUserDataProfile } from \"../../../../platform/userDataProfile/common/userDataProfile.js\";\nimport type { IExtensionHostExitInfo } from \"./remoteAgentService.js\";\n\nexport interface IGetEnvironmentDataArguments {\n\tremoteAuthority: string;\n\tprofile?: string;\n}\n\nexport interface IGetExtensionHostExitInfoArguments {\n\tremoteAuthority: string;\n\treconnectionToken: string;\n}\n\nexport interface IRemoteAgentEnvironmentDTO {\n\tpid: number;\n\tconnectionToken: string;\n\tappRoot: UriComponents;\n\tsettingsPath: UriComponents;\n\tlogsPath: UriComponents;\n\textensionHostLogsPath: UriComponents;\n\tglobalStorageHome: UriComponents;\n\tworkspaceStorageHome: UriComponents;\n\tlocalHistoryHome: UriComponents;\n\tuserHome: UriComponents;\n\tos: platform.OperatingSystem;\n\tarch: string;\n\tmarks: performance.PerformanceMark[];\n\tuseHostProxy: boolean;\n\tprofiles: {\n\t\tall: UriDto<IUserDataProfile[]>;\n\t\thome: UriComponents;\n\t};\n\tisUnsupportedGlibc: boolean;\n}\n\nexport class RemoteExtensionEnvironmentChannelClient {\n\tstatic async getEnvironmentData(\n\t\tchannel: IChannel,\n\t\tremoteAuthority: string,\n\t\tprofile: string | undefined,\n\t): Promise<IRemoteAgentEnvironment> {\n\t\tconst args: IGetEnvironmentDataArguments = {\n\t\t\tremoteAuthority,\n\t\t\tprofile,\n\t\t};\n\n\t\tconst data = await channel.call<IRemoteAgentEnvironmentDTO>(\n\t\t\t\"getEnvironmentData\",\n\t\t\targs,\n\t\t);\n\n\t\treturn {\n\t\t\tpid: data.pid,\n\t\t\tconnectionToken: data.connectionToken,\n\t\t\tappRoot: URI.revive(data.appRoot),\n\t\t\tsettingsPath: URI.revive(data.settingsPath),\n\t\t\tlogsPath: URI.revive(data.logsPath),\n\t\t\textensionHostLogsPath: URI.revive(data.extensionHostLogsPath),\n\t\t\tglobalStorageHome: URI.revive(data.globalStorageHome),\n\t\t\tworkspaceStorageHome: URI.revive(data.workspaceStorageHome),\n\t\t\tlocalHistoryHome: URI.revive(data.localHistoryHome),\n\t\t\tuserHome: URI.revive(data.userHome),\n\t\t\tos: data.os,\n\t\t\tarch: data.arch,\n\t\t\tmarks: data.marks,\n\t\t\tuseHostProxy: data.useHostProxy,\n\t\t\tprofiles: revive(data.profiles),\n\t\t\tisUnsupportedGlibc: data.isUnsupportedGlibc,\n\t\t};\n\t}\n\n\tstatic async getExtensionHostExitInfo(\n\t\tchannel: IChannel,\n\t\tremoteAuthority: string,\n\t\treconnectionToken: string,\n\t): Promise<IExtensionHostExitInfo | null> {\n\t\tconst args: IGetExtensionHostExitInfoArguments = {\n\t\t\tremoteAuthority,\n\t\t\treconnectionToken,\n\t\t};\n\t\treturn channel.call<IExtensionHostExitInfo | null>(\n\t\t\t\"getExtensionHostExitInfo\",\n\t\t\targs,\n\t\t);\n\t}\n\n\tstatic getDiagnosticInfo(\n\t\tchannel: IChannel,\n\t\toptions: IDiagnosticInfoOptions,\n\t): Promise<IDiagnosticInfo> {\n\t\treturn channel.call<IDiagnosticInfo>(\"getDiagnosticInfo\", options);\n\t}\n\n\tstatic updateTelemetryLevel(\n\t\tchannel: IChannel,\n\t\ttelemetryLevel: TelemetryLevel,\n\t): Promise<void> {\n\t\treturn channel.call<void>(\"updateTelemetryLevel\", { telemetryLevel });\n\t}\n\n\tstatic logTelemetry(\n\t\tchannel: IChannel,\n\t\teventName: string,\n\t\tdata: ITelemetryData,\n\t): Promise<void> {\n\t\treturn channel.call<void>(\"logTelemetry\", { eventName, data });\n\t}\n\n\tstatic flushTelemetry(channel: IChannel): Promise<void> {\n\t\treturn channel.call<void>(\"flushTelemetry\");\n\t}\n\n\tstatic async ping(channel: IChannel): Promise<void> {\n\t\tawait channel.call<void>(\"ping\");\n\t}\n}\n"],
  "mappings": ";;AAKA,SAAS,cAAc;AAGvB;AAAA,EACC;AAAA,OAGM;AA8CA,MAAM,wCAAwC;AAAA,EA1DrD,OA0DqD;AAAA;AAAA;AAAA,EACpD,aAAa,mBACZ,SACA,iBACA,SACmC;AACnC,UAAM,OAAqC;AAAA,MAC1C;AAAA,MACA;AAAA,IACD;AAEA,UAAM,OAAO,MAAM,QAAQ;AAAA,MAC1B;AAAA,MACA;AAAA,IACD;AAEA,WAAO;AAAA,MACN,KAAK,KAAK;AAAA,MACV,iBAAiB,KAAK;AAAA,MACtB,SAAS,IAAI,OAAO,KAAK,OAAO;AAAA,MAChC,cAAc,IAAI,OAAO,KAAK,YAAY;AAAA,MAC1C,UAAU,IAAI,OAAO,KAAK,QAAQ;AAAA,MAClC,uBAAuB,IAAI,OAAO,KAAK,qBAAqB;AAAA,MAC5D,mBAAmB,IAAI,OAAO,KAAK,iBAAiB;AAAA,MACpD,sBAAsB,IAAI,OAAO,KAAK,oBAAoB;AAAA,MAC1D,kBAAkB,IAAI,OAAO,KAAK,gBAAgB;AAAA,MAClD,UAAU,IAAI,OAAO,KAAK,QAAQ;AAAA,MAClC,IAAI,KAAK;AAAA,MACT,MAAM,KAAK;AAAA,MACX,OAAO,KAAK;AAAA,MACZ,cAAc,KAAK;AAAA,MACnB,UAAU,OAAO,KAAK,QAAQ;AAAA,MAC9B,oBAAoB,KAAK;AAAA,IAC1B;AAAA,EACD;AAAA,EAEA,aAAa,yBACZ,SACA,iBACA,mBACyC;AACzC,UAAM,OAA2C;AAAA,MAChD;AAAA,MACA;AAAA,IACD;AACA,WAAO,QAAQ;AAAA,MACd;AAAA,MACA;AAAA,IACD;AAAA,EACD;AAAA,EAEA,OAAO,kBACN,SACA,SAC2B;AAC3B,WAAO,QAAQ,KAAsB,qBAAqB,OAAO;AAAA,EAClE;AAAA,EAEA,OAAO,qBACN,SACA,gBACgB;AAChB,WAAO,QAAQ,KAAW,wBAAwB,EAAE,eAAe,CAAC;AAAA,EACrE;AAAA,EAEA,OAAO,aACN,SACA,WACA,MACgB;AAChB,WAAO,QAAQ,KAAW,gBAAgB,EAAE,WAAW,KAAK,CAAC;AAAA,EAC9D;AAAA,EAEA,OAAO,eAAe,SAAkC;AACvD,WAAO,QAAQ,KAAW,gBAAgB;AAAA,EAC3C;AAAA,EAEA,aAAa,KAAK,SAAkC;AACnD,UAAM,QAAQ,KAAW,MAAM;AAAA,EAChC;AACD;",
  "names": []
}
