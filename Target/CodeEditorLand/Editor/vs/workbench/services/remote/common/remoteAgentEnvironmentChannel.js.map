{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/remote/common/remoteAgentEnvironmentChannel.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as platform from '../../../../base/common/platform.js';\nimport * as performance from '../../../../base/common/performance.js';\nimport { URI, UriComponents, UriDto } from '../../../../base/common/uri.js';\nimport { IChannel } from '../../../../base/parts/ipc/common/ipc.js';\nimport { IRemoteAgentEnvironment } from '../../../../platform/remote/common/remoteAgentEnvironment.js';\nimport { IDiagnosticInfoOptions, IDiagnosticInfo } from '../../../../platform/diagnostics/common/diagnostics.js';\nimport { ITelemetryData, TelemetryLevel } from '../../../../platform/telemetry/common/telemetry.js';\nimport { IExtensionHostExitInfo } from './remoteAgentService.js';\nimport { revive } from '../../../../base/common/marshalling.js';\nimport { IUserDataProfile } from '../../../../platform/userDataProfile/common/userDataProfile.js';\n\nexport interface IGetEnvironmentDataArguments {\n\tremoteAuthority: string;\n\tprofile?: string;\n}\n\nexport interface IGetExtensionHostExitInfoArguments {\n\tremoteAuthority: string;\n\treconnectionToken: string;\n}\n\nexport interface IRemoteAgentEnvironmentDTO {\n\tpid: number;\n\tconnectionToken: string;\n\tappRoot: UriComponents;\n\tsettingsPath: UriComponents;\n\tlogsPath: UriComponents;\n\textensionHostLogsPath: UriComponents;\n\tglobalStorageHome: UriComponents;\n\tworkspaceStorageHome: UriComponents;\n\tlocalHistoryHome: UriComponents;\n\tuserHome: UriComponents;\n\tos: platform.OperatingSystem;\n\tarch: string;\n\tmarks: performance.PerformanceMark[];\n\tuseHostProxy: boolean;\n\tprofiles: {\n\t\tall: UriDto<IUserDataProfile[]>;\n\t\thome: UriComponents;\n\t};\n\tisUnsupportedGlibc: boolean;\n}\n\nexport class RemoteExtensionEnvironmentChannelClient {\n\n\tstatic async getEnvironmentData(channel: IChannel, remoteAuthority: string, profile: string | undefined): Promise<IRemoteAgentEnvironment> {\n\t\tconst args: IGetEnvironmentDataArguments = {\n\t\t\tremoteAuthority,\n\t\t\tprofile\n\t\t};\n\n\t\tconst data = await channel.call<IRemoteAgentEnvironmentDTO>('getEnvironmentData', args);\n\n\t\treturn {\n\t\t\tpid: data.pid,\n\t\t\tconnectionToken: data.connectionToken,\n\t\t\tappRoot: URI.revive(data.appRoot),\n\t\t\tsettingsPath: URI.revive(data.settingsPath),\n\t\t\tlogsPath: URI.revive(data.logsPath),\n\t\t\textensionHostLogsPath: URI.revive(data.extensionHostLogsPath),\n\t\t\tglobalStorageHome: URI.revive(data.globalStorageHome),\n\t\t\tworkspaceStorageHome: URI.revive(data.workspaceStorageHome),\n\t\t\tlocalHistoryHome: URI.revive(data.localHistoryHome),\n\t\t\tuserHome: URI.revive(data.userHome),\n\t\t\tos: data.os,\n\t\t\tarch: data.arch,\n\t\t\tmarks: data.marks,\n\t\t\tuseHostProxy: data.useHostProxy,\n\t\t\tprofiles: revive(data.profiles),\n\t\t\tisUnsupportedGlibc: data.isUnsupportedGlibc\n\t\t};\n\t}\n\n\tstatic async getExtensionHostExitInfo(channel: IChannel, remoteAuthority: string, reconnectionToken: string): Promise<IExtensionHostExitInfo | null> {\n\t\tconst args: IGetExtensionHostExitInfoArguments = {\n\t\t\tremoteAuthority,\n\t\t\treconnectionToken\n\t\t};\n\t\treturn channel.call<IExtensionHostExitInfo | null>('getExtensionHostExitInfo', args);\n\t}\n\n\tstatic getDiagnosticInfo(channel: IChannel, options: IDiagnosticInfoOptions): Promise<IDiagnosticInfo> {\n\t\treturn channel.call<IDiagnosticInfo>('getDiagnosticInfo', options);\n\t}\n\n\tstatic updateTelemetryLevel(channel: IChannel, telemetryLevel: TelemetryLevel): Promise<void> {\n\t\treturn channel.call<void>('updateTelemetryLevel', { telemetryLevel });\n\t}\n\n\tstatic logTelemetry(channel: IChannel, eventName: string, data: ITelemetryData): Promise<void> {\n\t\treturn channel.call<void>('logTelemetry', { eventName, data });\n\t}\n\n\tstatic flushTelemetry(channel: IChannel): Promise<void> {\n\t\treturn channel.call<void>('flushTelemetry');\n\t}\n\n\tstatic async ping(channel: IChannel): Promise<void> {\n\t\tawait channel.call<void>('ping');\n\t}\n}\n"],
  "mappings": ";;AAKA,YAAY,cAAc;AAC1B,YAAY,iBAAiB;AAC7B,SAAS,KAAK,eAAe,cAAc;AAC3C,SAAS,gBAAgB;AACzB,SAAS,+BAA+B;AACxC,SAAS,wBAAwB,uBAAuB;AACxD,SAAS,gBAAgB,sBAAsB;AAC/C,SAAS,8BAA8B;AACvC,SAAS,cAAc;AACvB,SAAS,wBAAwB;AAkC1B,MAAM,wCAAwC;AAAA,EAhDrD,OAgDqD;AAAA;AAAA;AAAA,EAEpD,aAAa,mBAAmB,SAAmB,iBAAyB,SAA+D;AAC1I,UAAM,OAAqC;AAAA,MAC1C;AAAA,MACA;AAAA,IACD;AAEA,UAAM,OAAO,MAAM,QAAQ,KAAiC,sBAAsB,IAAI;AAEtF,WAAO;AAAA,MACN,KAAK,KAAK;AAAA,MACV,iBAAiB,KAAK;AAAA,MACtB,SAAS,IAAI,OAAO,KAAK,OAAO;AAAA,MAChC,cAAc,IAAI,OAAO,KAAK,YAAY;AAAA,MAC1C,UAAU,IAAI,OAAO,KAAK,QAAQ;AAAA,MAClC,uBAAuB,IAAI,OAAO,KAAK,qBAAqB;AAAA,MAC5D,mBAAmB,IAAI,OAAO,KAAK,iBAAiB;AAAA,MACpD,sBAAsB,IAAI,OAAO,KAAK,oBAAoB;AAAA,MAC1D,kBAAkB,IAAI,OAAO,KAAK,gBAAgB;AAAA,MAClD,UAAU,IAAI,OAAO,KAAK,QAAQ;AAAA,MAClC,IAAI,KAAK;AAAA,MACT,MAAM,KAAK;AAAA,MACX,OAAO,KAAK;AAAA,MACZ,cAAc,KAAK;AAAA,MACnB,UAAU,OAAO,KAAK,QAAQ;AAAA,MAC9B,oBAAoB,KAAK;AAAA,IAC1B;AAAA,EACD;AAAA,EAEA,aAAa,yBAAyB,SAAmB,iBAAyB,mBAAmE;AACpJ,UAAM,OAA2C;AAAA,MAChD;AAAA,MACA;AAAA,IACD;AACA,WAAO,QAAQ,KAAoC,4BAA4B,IAAI;AAAA,EACpF;AAAA,EAEA,OAAO,kBAAkB,SAAmB,SAA2D;AACtG,WAAO,QAAQ,KAAsB,qBAAqB,OAAO;AAAA,EAClE;AAAA,EAEA,OAAO,qBAAqB,SAAmB,gBAA+C;AAC7F,WAAO,QAAQ,KAAW,wBAAwB,EAAE,eAAe,CAAC;AAAA,EACrE;AAAA,EAEA,OAAO,aAAa,SAAmB,WAAmB,MAAqC;AAC9F,WAAO,QAAQ,KAAW,gBAAgB,EAAE,WAAW,KAAK,CAAC;AAAA,EAC9D;AAAA,EAEA,OAAO,eAAe,SAAkC;AACvD,WAAO,QAAQ,KAAW,gBAAgB;AAAA,EAC3C;AAAA,EAEA,aAAa,KAAK,SAAkC;AACnD,UAAM,QAAQ,KAAW,MAAM;AAAA,EAChC;AACD;",
  "names": []
}
