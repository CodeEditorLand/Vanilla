import{revive as s}from"../../../../base/common/marshalling.js";import{URI as n}from"../../../../base/common/uri.js";class p{static async getEnvironmentData(o,t,r){const i={remoteAuthority:t,profile:r},e=await o.call("getEnvironmentData",i);return{pid:e.pid,connectionToken:e.connectionToken,appRoot:n.revive(e.appRoot),settingsPath:n.revive(e.settingsPath),logsPath:n.revive(e.logsPath),extensionHostLogsPath:n.revive(e.extensionHostLogsPath),globalStorageHome:n.revive(e.globalStorageHome),workspaceStorageHome:n.revive(e.workspaceStorageHome),localHistoryHome:n.revive(e.localHistoryHome),userHome:n.revive(e.userHome),os:e.os,arch:e.arch,marks:e.marks,useHostProxy:e.useHostProxy,profiles:s(e.profiles),isUnsupportedGlibc:e.isUnsupportedGlibc}}static async getExtensionHostExitInfo(o,t,r){const i={remoteAuthority:t,reconnectionToken:r};return o.call("getExtensionHostExitInfo",i)}static getDiagnosticInfo(o,t){return o.call("getDiagnosticInfo",t)}static updateTelemetryLevel(o,t){return o.call("updateTelemetryLevel",{telemetryLevel:t})}static logTelemetry(o,t,r){return o.call("logTelemetry",{eventName:t,data:r})}static flushTelemetry(o){return o.call("flushTelemetry")}static async ping(o){await o.call("ping")}}export{p as RemoteExtensionEnvironmentChannelClient};
