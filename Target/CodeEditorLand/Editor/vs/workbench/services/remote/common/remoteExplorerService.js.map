{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/remote/common/remoteExplorerService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Emitter, type Event } from \"../../../../base/common/event.js\";\nimport type { IJSONSchema } from \"../../../../base/common/jsonSchema.js\";\nimport type { IDisposable } from \"../../../../base/common/lifecycle.js\";\nimport type { URI } from \"../../../../base/common/uri.js\";\nimport * as nls from \"../../../../nls.js\";\nimport type { IExtensionDescription } from \"../../../../platform/extensions/common/extensions.js\";\nimport {\n\tInstantiationType,\n\tregisterSingleton,\n} from \"../../../../platform/instantiation/common/extensions.js\";\nimport {\n\tIInstantiationService,\n\tcreateDecorator,\n} from \"../../../../platform/instantiation/common/instantiation.js\";\nimport type {\n\tTunnelInformation,\n\tTunnelPrivacy,\n} from \"../../../../platform/remote/common/remoteAuthorityResolver.js\";\nimport {\n\tIStorageService,\n\tStorageScope,\n\tStorageTarget,\n} from \"../../../../platform/storage/common/storage.js\";\nimport {\n\tITunnelService,\n\ttype RemoteTunnel,\n\ttype TunnelProtocol,\n} from \"../../../../platform/tunnel/common/tunnel.js\";\nimport type { IEditableData } from \"../../../common/views.js\";\nimport {\n\tExtensionsRegistry,\n\ttype IExtensionPointUser,\n} from \"../../extensions/common/extensionsRegistry.js\";\nimport {\n\ttype Attributes,\n\ttype CandidatePort,\n\ttype TunnelCloseReason,\n\tTunnelModel,\n\ttype TunnelProperties,\n\ttype TunnelSource,\n} from \"./tunnelModel.js\";\n\nexport const IRemoteExplorerService = createDecorator<IRemoteExplorerService>(\n\t\"remoteExplorerService\",\n);\nexport const REMOTE_EXPLORER_TYPE_KEY: string = \"remote.explorerType\";\nexport const TUNNEL_VIEW_ID = \"~remote.forwardedPorts\";\nexport const TUNNEL_VIEW_CONTAINER_ID = \"~remote.forwardedPortsContainer\";\nexport const PORT_AUTO_FORWARD_SETTING = \"remote.autoForwardPorts\";\nexport const PORT_AUTO_SOURCE_SETTING = \"remote.autoForwardPortsSource\";\nexport const PORT_AUTO_FALLBACK_SETTING = \"remote.autoForwardPortsFallback\";\nexport const PORT_AUTO_SOURCE_SETTING_PROCESS = \"process\";\nexport const PORT_AUTO_SOURCE_SETTING_OUTPUT = \"output\";\nexport const PORT_AUTO_SOURCE_SETTING_HYBRID = \"hybrid\";\n\nexport enum TunnelType {\n\tCandidate = \"Candidate\",\n\tDetected = \"Detected\",\n\tForwarded = \"Forwarded\",\n\tAdd = \"Add\",\n}\n\nexport interface ITunnelItem {\n\ttunnelType: TunnelType;\n\tremoteHost: string;\n\tremotePort: number;\n\tlocalAddress?: string;\n\tprotocol: TunnelProtocol;\n\tlocalUri?: URI;\n\tlocalPort?: number;\n\tname?: string;\n\tcloseable?: boolean;\n\tsource: {\n\t\tsource: TunnelSource;\n\t\tdescription: string;\n\t};\n\tprivacy: TunnelPrivacy;\n\tprocessDescription?: string;\n\treadonly label: string;\n}\n\nexport enum TunnelEditId {\n\tNone = 0,\n\tNew = 1,\n\tLabel = 2,\n\tLocalPort = 3,\n}\n\nexport interface HelpInformation {\n\textensionDescription: IExtensionDescription;\n\tgetStarted?: string | { id: string };\n\tdocumentation?: string;\n\tissues?: string;\n\treportIssue?: string;\n\tremoteName?: string[] | string;\n\tvirtualWorkspace?: string;\n}\n\nconst getStartedWalkthrough: IJSONSchema = {\n\ttype: \"object\",\n\trequired: [\"id\"],\n\tproperties: {\n\t\tid: {\n\t\t\tdescription: nls.localize(\n\t\t\t\t\"getStartedWalkthrough.id\",\n\t\t\t\t\"The ID of a Get Started walkthrough to open.\",\n\t\t\t),\n\t\t\ttype: \"string\",\n\t\t},\n\t},\n};\n\nconst remoteHelpExtPoint =\n\tExtensionsRegistry.registerExtensionPoint<HelpInformation>({\n\t\textensionPoint: \"remoteHelp\",\n\t\tjsonSchema: {\n\t\t\tdescription: nls.localize(\n\t\t\t\t\"RemoteHelpInformationExtPoint\",\n\t\t\t\t\"Contributes help information for Remote\",\n\t\t\t),\n\t\t\ttype: \"object\",\n\t\t\tproperties: {\n\t\t\t\tgetStarted: {\n\t\t\t\t\tdescription: nls.localize(\n\t\t\t\t\t\t\"RemoteHelpInformationExtPoint.getStarted\",\n\t\t\t\t\t\t\"The url, or a command that returns the url, to your project's Getting Started page, or a walkthrough ID contributed by your project's extension\",\n\t\t\t\t\t),\n\t\t\t\t\toneOf: [{ type: \"string\" }, getStartedWalkthrough],\n\t\t\t\t},\n\t\t\t\tdocumentation: {\n\t\t\t\t\tdescription: nls.localize(\n\t\t\t\t\t\t\"RemoteHelpInformationExtPoint.documentation\",\n\t\t\t\t\t\t\"The url, or a command that returns the url, to your project's documentation page\",\n\t\t\t\t\t),\n\t\t\t\t\ttype: \"string\",\n\t\t\t\t},\n\t\t\t\tfeedback: {\n\t\t\t\t\tdescription: nls.localize(\n\t\t\t\t\t\t\"RemoteHelpInformationExtPoint.feedback\",\n\t\t\t\t\t\t\"The url, or a command that returns the url, to your project's feedback reporter\",\n\t\t\t\t\t),\n\t\t\t\t\ttype: \"string\",\n\t\t\t\t\tmarkdownDeprecationMessage: nls.localize(\n\t\t\t\t\t\t\"RemoteHelpInformationExtPoint.feedback.deprecated\",\n\t\t\t\t\t\t\"Use {0} instead\",\n\t\t\t\t\t\t\"`reportIssue`\",\n\t\t\t\t\t),\n\t\t\t\t},\n\t\t\t\treportIssue: {\n\t\t\t\t\tdescription: nls.localize(\n\t\t\t\t\t\t\"RemoteHelpInformationExtPoint.reportIssue\",\n\t\t\t\t\t\t\"The url, or a command that returns the url, to your project's issue reporter\",\n\t\t\t\t\t),\n\t\t\t\t\ttype: \"string\",\n\t\t\t\t},\n\t\t\t\tissues: {\n\t\t\t\t\tdescription: nls.localize(\n\t\t\t\t\t\t\"RemoteHelpInformationExtPoint.issues\",\n\t\t\t\t\t\t\"The url, or a command that returns the url, to your project's issues list\",\n\t\t\t\t\t),\n\t\t\t\t\ttype: \"string\",\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t});\n\nexport interface IRemoteExplorerService {\n\treadonly _serviceBrand: undefined;\n\tonDidChangeTargetType: Event<string[]>;\n\ttargetType: string[];\n\tonDidChangeHelpInformation: Event<\n\t\treadonly IExtensionPointUser<HelpInformation>[]\n\t>;\n\thelpInformation: IExtensionPointUser<HelpInformation>[];\n\treadonly tunnelModel: TunnelModel;\n\tonDidChangeEditable: Event<\n\t\t{ tunnel: ITunnelItem; editId: TunnelEditId } | undefined\n\t>;\n\tsetEditable(\n\t\ttunnelItem: ITunnelItem | undefined,\n\t\teditId: TunnelEditId,\n\t\tdata: IEditableData | null,\n\t): void;\n\tgetEditableData(\n\t\ttunnelItem: ITunnelItem | undefined,\n\t\teditId?: TunnelEditId,\n\t): IEditableData | undefined;\n\tforward(\n\t\ttunnelProperties: TunnelProperties,\n\t\tattributes?: Attributes | null,\n\t): Promise<RemoteTunnel | string | undefined>;\n\tclose(\n\t\tremote: { host: string; port: number },\n\t\treason: TunnelCloseReason,\n\t): Promise<void>;\n\tsetTunnelInformation(\n\t\ttunnelInformation: TunnelInformation | undefined,\n\t): void;\n\tsetCandidateFilter(\n\t\tfilter:\n\t\t\t| ((candidates: CandidatePort[]) => Promise<CandidatePort[]>)\n\t\t\t| undefined,\n\t): IDisposable;\n\tonFoundNewCandidates(candidates: CandidatePort[]): void;\n\trestore(): Promise<void>;\n\tenablePortsFeatures(): void;\n\tonEnabledPortsFeatures: Event<void>;\n\tportsFeaturesEnabled: boolean;\n\treadonly namedProcesses: Map<number, string>;\n}\n\nclass RemoteExplorerService implements IRemoteExplorerService {\n\tpublic _serviceBrand: undefined;\n\tprivate _targetType: string[] = [];\n\tprivate readonly _onDidChangeTargetType: Emitter<string[]> = new Emitter<\n\t\tstring[]\n\t>();\n\tpublic readonly onDidChangeTargetType: Event<string[]> =\n\t\tthis._onDidChangeTargetType.event;\n\tprivate readonly _onDidChangeHelpInformation: Emitter<\n\t\treadonly IExtensionPointUser<HelpInformation>[]\n\t> = new Emitter();\n\tpublic readonly onDidChangeHelpInformation: Event<\n\t\treadonly IExtensionPointUser<HelpInformation>[]\n\t> = this._onDidChangeHelpInformation.event;\n\tprivate _helpInformation: IExtensionPointUser<HelpInformation>[] = [];\n\tprivate _tunnelModel: TunnelModel;\n\tprivate _editable:\n\t\t| {\n\t\t\t\ttunnelItem: ITunnelItem | undefined;\n\t\t\t\teditId: TunnelEditId;\n\t\t\t\tdata: IEditableData;\n\t\t  }\n\t\t| undefined;\n\tprivate readonly _onDidChangeEditable: Emitter<\n\t\t{ tunnel: ITunnelItem; editId: TunnelEditId } | undefined\n\t> = new Emitter();\n\tpublic readonly onDidChangeEditable: Event<\n\t\t{ tunnel: ITunnelItem; editId: TunnelEditId } | undefined\n\t> = this._onDidChangeEditable.event;\n\tprivate readonly _onEnabledPortsFeatures: Emitter<void> = new Emitter();\n\tpublic readonly onEnabledPortsFeatures: Event<void> =\n\t\tthis._onEnabledPortsFeatures.event;\n\tprivate _portsFeaturesEnabled = false;\n\tpublic readonly namedProcesses = new Map<number, string>();\n\n\tconstructor(\n\t\t@IStorageService private readonly storageService: IStorageService,\n\t\t@ITunnelService private readonly tunnelService: ITunnelService,\n\t\t@IInstantiationService instantiationService: IInstantiationService,\n\t) {\n\t\tthis._tunnelModel = instantiationService.createInstance(TunnelModel);\n\n\t\tremoteHelpExtPoint.setHandler((extensions) => {\n\t\t\tthis._helpInformation.push(...extensions);\n\t\t\tthis._onDidChangeHelpInformation.fire(extensions);\n\t\t});\n\t}\n\n\tget helpInformation(): IExtensionPointUser<HelpInformation>[] {\n\t\treturn this._helpInformation;\n\t}\n\n\tset targetType(name: string[]) {\n\t\t// Can just compare the first element of the array since there are no target overlaps\n\t\tconst current: string =\n\t\t\tthis._targetType.length > 0 ? this._targetType[0] : \"\";\n\t\tconst newName: string = name.length > 0 ? name[0] : \"\";\n\t\tif (current !== newName) {\n\t\t\tthis._targetType = name;\n\t\t\tthis.storageService.store(\n\t\t\t\tREMOTE_EXPLORER_TYPE_KEY,\n\t\t\t\tthis._targetType.toString(),\n\t\t\t\tStorageScope.WORKSPACE,\n\t\t\t\tStorageTarget.MACHINE,\n\t\t\t);\n\t\t\tthis.storageService.store(\n\t\t\t\tREMOTE_EXPLORER_TYPE_KEY,\n\t\t\t\tthis._targetType.toString(),\n\t\t\t\tStorageScope.PROFILE,\n\t\t\t\tStorageTarget.USER,\n\t\t\t);\n\t\t\tthis._onDidChangeTargetType.fire(this._targetType);\n\t\t}\n\t}\n\tget targetType(): string[] {\n\t\treturn this._targetType;\n\t}\n\n\tget tunnelModel(): TunnelModel {\n\t\treturn this._tunnelModel;\n\t}\n\n\tforward(\n\t\ttunnelProperties: TunnelProperties,\n\t\tattributes?: Attributes | null,\n\t): Promise<RemoteTunnel | string | undefined> {\n\t\treturn this.tunnelModel.forward(tunnelProperties, attributes);\n\t}\n\n\tclose(\n\t\tremote: { host: string; port: number },\n\t\treason: TunnelCloseReason,\n\t): Promise<void> {\n\t\treturn this.tunnelModel.close(remote.host, remote.port, reason);\n\t}\n\n\tsetTunnelInformation(\n\t\ttunnelInformation: TunnelInformation | undefined,\n\t): void {\n\t\tif (tunnelInformation?.features) {\n\t\t\tthis.tunnelService.setTunnelFeatures(tunnelInformation.features);\n\t\t}\n\t\tthis.tunnelModel.addEnvironmentTunnels(\n\t\t\ttunnelInformation?.environmentTunnels,\n\t\t);\n\t}\n\n\tsetEditable(\n\t\ttunnelItem: ITunnelItem | undefined,\n\t\teditId: TunnelEditId,\n\t\tdata: IEditableData | null,\n\t): void {\n\t\tif (data) {\n\t\t\tthis._editable = { tunnelItem, data, editId };\n\t\t} else {\n\t\t\tthis._editable = undefined;\n\t\t}\n\t\tthis._onDidChangeEditable.fire(\n\t\t\ttunnelItem ? { tunnel: tunnelItem, editId } : undefined,\n\t\t);\n\t}\n\n\tgetEditableData(\n\t\ttunnelItem: ITunnelItem | undefined,\n\t\teditId: TunnelEditId,\n\t): IEditableData | undefined {\n\t\treturn this._editable &&\n\t\t\t((!tunnelItem && tunnelItem === this._editable.tunnelItem) ||\n\t\t\t\t(tunnelItem &&\n\t\t\t\t\tthis._editable.tunnelItem?.remotePort ===\n\t\t\t\t\t\ttunnelItem.remotePort &&\n\t\t\t\t\tthis._editable.tunnelItem.remoteHost ===\n\t\t\t\t\t\ttunnelItem.remoteHost &&\n\t\t\t\t\tthis._editable.editId === editId))\n\t\t\t? this._editable.data\n\t\t\t: undefined;\n\t}\n\n\tsetCandidateFilter(\n\t\tfilter: (candidates: CandidatePort[]) => Promise<CandidatePort[]>,\n\t): IDisposable {\n\t\tif (!filter) {\n\t\t\treturn {\n\t\t\t\tdispose: () => {},\n\t\t\t};\n\t\t}\n\t\tthis.tunnelModel.setCandidateFilter(filter);\n\t\treturn {\n\t\t\tdispose: () => {\n\t\t\t\tthis.tunnelModel.setCandidateFilter(undefined);\n\t\t\t},\n\t\t};\n\t}\n\n\tonFoundNewCandidates(candidates: CandidatePort[]): void {\n\t\tthis.tunnelModel.setCandidates(candidates);\n\t}\n\n\trestore(): Promise<void> {\n\t\treturn this.tunnelModel.restoreForwarded();\n\t}\n\n\tenablePortsFeatures(): void {\n\t\tthis._portsFeaturesEnabled = true;\n\t\tthis._onEnabledPortsFeatures.fire();\n\t}\n\n\tget portsFeaturesEnabled(): boolean {\n\t\treturn this._portsFeaturesEnabled;\n\t}\n}\n\nregisterSingleton(\n\tIRemoteExplorerService,\n\tRemoteExplorerService,\n\tInstantiationType.Delayed,\n);\n"],
  "mappings": "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",
  "names": ["TunnelType", "TunnelEditId"]
}
