{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/remote/common/remoteExplorerService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as nls from '../../../../nls.js';\nimport { Event, Emitter } from '../../../../base/common/event.js';\nimport { IInstantiationService, createDecorator } from '../../../../platform/instantiation/common/instantiation.js';\nimport { InstantiationType, registerSingleton } from '../../../../platform/instantiation/common/extensions.js';\nimport { IStorageService, StorageScope, StorageTarget } from '../../../../platform/storage/common/storage.js';\nimport { ITunnelService, RemoteTunnel, TunnelProtocol } from '../../../../platform/tunnel/common/tunnel.js';\nimport { IDisposable } from '../../../../base/common/lifecycle.js';\nimport { IEditableData } from '../../../common/views.js';\nimport { TunnelInformation, TunnelPrivacy } from '../../../../platform/remote/common/remoteAuthorityResolver.js';\nimport { URI } from '../../../../base/common/uri.js';\nimport { Attributes, CandidatePort, TunnelCloseReason, TunnelModel, TunnelProperties, TunnelSource } from './tunnelModel.js';\nimport { ExtensionsRegistry, IExtensionPointUser } from '../../extensions/common/extensionsRegistry.js';\nimport { IExtensionDescription } from '../../../../platform/extensions/common/extensions.js';\nimport { IJSONSchema } from '../../../../base/common/jsonSchema.js';\n\nexport const IRemoteExplorerService = createDecorator<IRemoteExplorerService>('remoteExplorerService');\nexport const REMOTE_EXPLORER_TYPE_KEY: string = 'remote.explorerType';\nexport const TUNNEL_VIEW_ID = '~remote.forwardedPorts';\nexport const TUNNEL_VIEW_CONTAINER_ID = '~remote.forwardedPortsContainer';\nexport const PORT_AUTO_FORWARD_SETTING = 'remote.autoForwardPorts';\nexport const PORT_AUTO_SOURCE_SETTING = 'remote.autoForwardPortsSource';\nexport const PORT_AUTO_FALLBACK_SETTING = 'remote.autoForwardPortsFallback';\nexport const PORT_AUTO_SOURCE_SETTING_PROCESS = 'process';\nexport const PORT_AUTO_SOURCE_SETTING_OUTPUT = 'output';\nexport const PORT_AUTO_SOURCE_SETTING_HYBRID = 'hybrid';\n\nexport enum TunnelType {\n\tCandidate = 'Candidate',\n\tDetected = 'Detected',\n\tForwarded = 'Forwarded',\n\tAdd = 'Add'\n}\n\nexport interface ITunnelItem {\n\ttunnelType: TunnelType;\n\tremoteHost: string;\n\tremotePort: number;\n\tlocalAddress?: string;\n\tprotocol: TunnelProtocol;\n\tlocalUri?: URI;\n\tlocalPort?: number;\n\tname?: string;\n\tcloseable?: boolean;\n\tsource: {\n\t\tsource: TunnelSource;\n\t\tdescription: string;\n\t};\n\tprivacy: TunnelPrivacy;\n\tprocessDescription?: string;\n\treadonly label: string;\n}\n\nexport enum TunnelEditId {\n\tNone = 0,\n\tNew = 1,\n\tLabel = 2,\n\tLocalPort = 3\n}\n\nexport interface HelpInformation {\n\textensionDescription: IExtensionDescription;\n\tgetStarted?: string | { id: string };\n\tdocumentation?: string;\n\tissues?: string;\n\treportIssue?: string;\n\tremoteName?: string[] | string;\n\tvirtualWorkspace?: string;\n}\n\nconst getStartedWalkthrough: IJSONSchema = {\n\ttype: 'object',\n\trequired: ['id'],\n\tproperties: {\n\t\tid: {\n\t\t\tdescription: nls.localize('getStartedWalkthrough.id', 'The ID of a Get Started walkthrough to open.'),\n\t\t\ttype: 'string'\n\t\t},\n\t}\n};\n\nconst remoteHelpExtPoint = ExtensionsRegistry.registerExtensionPoint<HelpInformation>({\n\textensionPoint: 'remoteHelp',\n\tjsonSchema: {\n\t\tdescription: nls.localize('RemoteHelpInformationExtPoint', 'Contributes help information for Remote'),\n\t\ttype: 'object',\n\t\tproperties: {\n\t\t\t'getStarted': {\n\t\t\t\tdescription: nls.localize('RemoteHelpInformationExtPoint.getStarted', \"The url, or a command that returns the url, to your project's Getting Started page, or a walkthrough ID contributed by your project's extension\"),\n\t\t\t\toneOf: [\n\t\t\t\t\t{ type: 'string' },\n\t\t\t\t\tgetStartedWalkthrough\n\t\t\t\t]\n\t\t\t},\n\t\t\t'documentation': {\n\t\t\t\tdescription: nls.localize('RemoteHelpInformationExtPoint.documentation', \"The url, or a command that returns the url, to your project's documentation page\"),\n\t\t\t\ttype: 'string'\n\t\t\t},\n\t\t\t'feedback': {\n\t\t\t\tdescription: nls.localize('RemoteHelpInformationExtPoint.feedback', \"The url, or a command that returns the url, to your project's feedback reporter\"),\n\t\t\t\ttype: 'string',\n\t\t\t\tmarkdownDeprecationMessage: nls.localize('RemoteHelpInformationExtPoint.feedback.deprecated', \"Use {0} instead\", '`reportIssue`')\n\t\t\t},\n\t\t\t'reportIssue': {\n\t\t\t\tdescription: nls.localize('RemoteHelpInformationExtPoint.reportIssue', \"The url, or a command that returns the url, to your project's issue reporter\"),\n\t\t\t\ttype: 'string'\n\t\t\t},\n\t\t\t'issues': {\n\t\t\t\tdescription: nls.localize('RemoteHelpInformationExtPoint.issues', \"The url, or a command that returns the url, to your project's issues list\"),\n\t\t\t\ttype: 'string'\n\t\t\t}\n\t\t}\n\t}\n});\n\nexport interface IRemoteExplorerService {\n\treadonly _serviceBrand: undefined;\n\tonDidChangeTargetType: Event<string[]>;\n\ttargetType: string[];\n\tonDidChangeHelpInformation: Event<readonly IExtensionPointUser<HelpInformation>[]>;\n\thelpInformation: IExtensionPointUser<HelpInformation>[];\n\treadonly tunnelModel: TunnelModel;\n\tonDidChangeEditable: Event<{ tunnel: ITunnelItem; editId: TunnelEditId } | undefined>;\n\tsetEditable(tunnelItem: ITunnelItem | undefined, editId: TunnelEditId, data: IEditableData | null): void;\n\tgetEditableData(tunnelItem: ITunnelItem | undefined, editId?: TunnelEditId): IEditableData | undefined;\n\tforward(tunnelProperties: TunnelProperties, attributes?: Attributes | null): Promise<RemoteTunnel | string | undefined>;\n\tclose(remote: { host: string; port: number }, reason: TunnelCloseReason): Promise<void>;\n\tsetTunnelInformation(tunnelInformation: TunnelInformation | undefined): void;\n\tsetCandidateFilter(filter: ((candidates: CandidatePort[]) => Promise<CandidatePort[]>) | undefined): IDisposable;\n\tonFoundNewCandidates(candidates: CandidatePort[]): void;\n\trestore(): Promise<void>;\n\tenablePortsFeatures(): void;\n\tonEnabledPortsFeatures: Event<void>;\n\tportsFeaturesEnabled: boolean;\n\treadonly namedProcesses: Map<number, string>;\n}\n\nclass RemoteExplorerService implements IRemoteExplorerService {\n\tpublic _serviceBrand: undefined;\n\tprivate _targetType: string[] = [];\n\tprivate readonly _onDidChangeTargetType: Emitter<string[]> = new Emitter<string[]>();\n\tpublic readonly onDidChangeTargetType: Event<string[]> = this._onDidChangeTargetType.event;\n\tprivate readonly _onDidChangeHelpInformation: Emitter<readonly IExtensionPointUser<HelpInformation>[]> = new Emitter();\n\tpublic readonly onDidChangeHelpInformation: Event<readonly IExtensionPointUser<HelpInformation>[]> = this._onDidChangeHelpInformation.event;\n\tprivate _helpInformation: IExtensionPointUser<HelpInformation>[] = [];\n\tprivate _tunnelModel: TunnelModel;\n\tprivate _editable: { tunnelItem: ITunnelItem | undefined; editId: TunnelEditId; data: IEditableData } | undefined;\n\tprivate readonly _onDidChangeEditable: Emitter<{ tunnel: ITunnelItem; editId: TunnelEditId } | undefined> = new Emitter();\n\tpublic readonly onDidChangeEditable: Event<{ tunnel: ITunnelItem; editId: TunnelEditId } | undefined> = this._onDidChangeEditable.event;\n\tprivate readonly _onEnabledPortsFeatures: Emitter<void> = new Emitter();\n\tpublic readonly onEnabledPortsFeatures: Event<void> = this._onEnabledPortsFeatures.event;\n\tprivate _portsFeaturesEnabled: boolean = false;\n\tpublic readonly namedProcesses = new Map<number, string>();\n\n\tconstructor(\n\t\t@IStorageService private readonly storageService: IStorageService,\n\t\t@ITunnelService private readonly tunnelService: ITunnelService,\n\t\t@IInstantiationService instantiationService: IInstantiationService,\n\t) {\n\t\tthis._tunnelModel = instantiationService.createInstance(TunnelModel);\n\n\t\tremoteHelpExtPoint.setHandler((extensions) => {\n\t\t\tthis._helpInformation.push(...extensions);\n\t\t\tthis._onDidChangeHelpInformation.fire(extensions);\n\t\t});\n\t}\n\n\tget helpInformation(): IExtensionPointUser<HelpInformation>[] {\n\t\treturn this._helpInformation;\n\t}\n\n\tset targetType(name: string[]) {\n\t\t// Can just compare the first element of the array since there are no target overlaps\n\t\tconst current: string = this._targetType.length > 0 ? this._targetType[0] : '';\n\t\tconst newName: string = name.length > 0 ? name[0] : '';\n\t\tif (current !== newName) {\n\t\t\tthis._targetType = name;\n\t\t\tthis.storageService.store(REMOTE_EXPLORER_TYPE_KEY, this._targetType.toString(), StorageScope.WORKSPACE, StorageTarget.MACHINE);\n\t\t\tthis.storageService.store(REMOTE_EXPLORER_TYPE_KEY, this._targetType.toString(), StorageScope.PROFILE, StorageTarget.USER);\n\t\t\tthis._onDidChangeTargetType.fire(this._targetType);\n\t\t}\n\t}\n\tget targetType(): string[] {\n\t\treturn this._targetType;\n\t}\n\n\tget tunnelModel(): TunnelModel {\n\t\treturn this._tunnelModel;\n\t}\n\n\tforward(tunnelProperties: TunnelProperties, attributes?: Attributes | null): Promise<RemoteTunnel | string | undefined> {\n\t\treturn this.tunnelModel.forward(tunnelProperties, attributes);\n\t}\n\n\tclose(remote: { host: string; port: number }, reason: TunnelCloseReason): Promise<void> {\n\t\treturn this.tunnelModel.close(remote.host, remote.port, reason);\n\t}\n\n\tsetTunnelInformation(tunnelInformation: TunnelInformation | undefined): void {\n\t\tif (tunnelInformation?.features) {\n\t\t\tthis.tunnelService.setTunnelFeatures(tunnelInformation.features);\n\t\t}\n\t\tthis.tunnelModel.addEnvironmentTunnels(tunnelInformation?.environmentTunnels);\n\t}\n\n\tsetEditable(tunnelItem: ITunnelItem | undefined, editId: TunnelEditId, data: IEditableData | null): void {\n\t\tif (!data) {\n\t\t\tthis._editable = undefined;\n\t\t} else {\n\t\t\tthis._editable = { tunnelItem, data, editId };\n\t\t}\n\t\tthis._onDidChangeEditable.fire(tunnelItem ? { tunnel: tunnelItem, editId } : undefined);\n\t}\n\n\tgetEditableData(tunnelItem: ITunnelItem | undefined, editId: TunnelEditId): IEditableData | undefined {\n\t\treturn (this._editable &&\n\t\t\t((!tunnelItem && (tunnelItem === this._editable.tunnelItem)) ||\n\t\t\t\t(tunnelItem && (this._editable.tunnelItem?.remotePort === tunnelItem.remotePort) && (this._editable.tunnelItem.remoteHost === tunnelItem.remoteHost)\n\t\t\t\t\t&& (this._editable.editId === editId)))) ?\n\t\t\tthis._editable.data : undefined;\n\t}\n\n\tsetCandidateFilter(filter: (candidates: CandidatePort[]) => Promise<CandidatePort[]>): IDisposable {\n\t\tif (!filter) {\n\t\t\treturn {\n\t\t\t\tdispose: () => { }\n\t\t\t};\n\t\t}\n\t\tthis.tunnelModel.setCandidateFilter(filter);\n\t\treturn {\n\t\t\tdispose: () => {\n\t\t\t\tthis.tunnelModel.setCandidateFilter(undefined);\n\t\t\t}\n\t\t};\n\t}\n\n\tonFoundNewCandidates(candidates: CandidatePort[]): void {\n\t\tthis.tunnelModel.setCandidates(candidates);\n\t}\n\n\trestore(): Promise<void> {\n\t\treturn this.tunnelModel.restoreForwarded();\n\t}\n\n\tenablePortsFeatures(): void {\n\t\tthis._portsFeaturesEnabled = true;\n\t\tthis._onEnabledPortsFeatures.fire();\n\t}\n\n\tget portsFeaturesEnabled(): boolean {\n\t\treturn this._portsFeaturesEnabled;\n\t}\n}\n\nregisterSingleton(IRemoteExplorerService, RemoteExplorerService, InstantiationType.Delayed);\n"],
  "mappings": "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",
  "names": ["TunnelType", "TunnelEditId"]
}
