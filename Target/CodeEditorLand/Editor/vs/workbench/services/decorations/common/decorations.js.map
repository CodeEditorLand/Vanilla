{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/decorations/common/decorations.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport type { CancellationToken } from \"../../../../base/common/cancellation.js\";\nimport type { Event } from \"../../../../base/common/event.js\";\nimport type { IDisposable } from \"../../../../base/common/lifecycle.js\";\nimport type { ThemeIcon } from \"../../../../base/common/themables.js\";\nimport type { URI } from \"../../../../base/common/uri.js\";\nimport { createDecorator } from \"../../../../platform/instantiation/common/instantiation.js\";\nimport type { ColorIdentifier } from \"../../../../platform/theme/common/colorRegistry.js\";\n\nexport const IDecorationsService = createDecorator<IDecorationsService>(\n\t\"IFileDecorationsService\",\n);\n\nexport interface IDecorationData {\n\treadonly weight?: number;\n\treadonly color?: ColorIdentifier;\n\treadonly letter?: string | ThemeIcon;\n\treadonly tooltip?: string;\n\treadonly strikethrough?: boolean;\n\treadonly bubble?: boolean;\n}\n\nexport interface IDecoration extends IDisposable {\n\treadonly tooltip: string;\n\treadonly strikethrough: boolean;\n\treadonly labelClassName: string;\n\treadonly badgeClassName: string;\n\treadonly iconClassName: string;\n}\n\nexport interface IDecorationsProvider {\n\treadonly label: string;\n\treadonly onDidChange: Event<readonly URI[]>;\n\tprovideDecorations(\n\t\turi: URI,\n\t\ttoken: CancellationToken,\n\t): IDecorationData | Promise<IDecorationData | undefined> | undefined;\n}\n\nexport interface IResourceDecorationChangeEvent {\n\taffectsResource(uri: URI): boolean;\n}\n\nexport interface IDecorationsService {\n\treadonly _serviceBrand: undefined;\n\n\treadonly onDidChangeDecorations: Event<IResourceDecorationChangeEvent>;\n\n\tregisterDecorationsProvider(provider: IDecorationsProvider): IDisposable;\n\n\tgetDecoration(uri: URI, includeChildren: boolean): IDecoration | undefined;\n}\n"],
  "mappings": "AAUA,SAAS,uBAAuB;AAGzB,MAAM,sBAAsB;AAAA,EAClC;AACD;",
  "names": []
}
