{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/treeSitter/browser/treeSitterTokenizationFeature.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport type { Parser } from \"@vscode/tree-sitter-wasm\";\nimport { Emitter, Event } from \"../../../../base/common/event.js\";\nimport {\n\tDisposable,\n\tDisposableMap,\n\tDisposableStore,\n\ttype IDisposable,\n} from \"../../../../base/common/lifecycle.js\";\nimport {\n\ttype AppResourcePath,\n\tFileAccess,\n} from \"../../../../base/common/network.js\";\nimport {\n\tFontStyle,\n\tMetadataConsts,\n} from \"../../../../editor/common/encodedTokenAttributes.js\";\nimport {\n\ttype ITreeSitterTokenizationSupport,\n\tLazyTokenizationSupport,\n\tTreeSitterTokenizationRegistry,\n} from \"../../../../editor/common/languages.js\";\nimport type { ITextModel } from \"../../../../editor/common/model.js\";\nimport {\n\tEDITOR_EXPERIMENTAL_PREFER_TREESITTER,\n\ttype ITreeSitterParseResult,\n\tITreeSitterParserService,\n} from \"../../../../editor/common/services/treeSitterParserService.js\";\nimport type { IModelTokensChangedEvent } from \"../../../../editor/common/textModelEvents.js\";\nimport { ColumnRange } from \"../../../../editor/contrib/inlineCompletions/browser/utils.js\";\nimport { IConfigurationService } from \"../../../../platform/configuration/common/configuration.js\";\nimport { IFileService } from \"../../../../platform/files/common/files.js\";\nimport {\n\tInstantiationType,\n\tregisterSingleton,\n} from \"../../../../platform/instantiation/common/extensions.js\";\nimport {\n\tIInstantiationService,\n\tcreateDecorator,\n} from \"../../../../platform/instantiation/common/instantiation.js\";\nimport { IThemeService } from \"../../../../platform/theme/common/themeService.js\";\nimport type { TokenStyle } from \"../../../../platform/theme/common/tokenClassificationRegistry.js\";\nimport type { ColorThemeData } from \"../../themes/common/colorThemeData.js\";\n\nconst ALLOWED_SUPPORT = [\"typescript\"];\ntype TreeSitterQueries = string;\n\nexport const ITreeSitterTokenizationFeature =\n\tcreateDecorator<ITreeSitterTokenizationFeature>(\n\t\t\"treeSitterTokenizationFeature\",\n\t);\n\nexport interface ITreeSitterTokenizationFeature {\n\t_serviceBrand: undefined;\n}\n\nclass TreeSitterTokenizationFeature\n\textends Disposable\n\timplements ITreeSitterTokenizationFeature\n{\n\tpublic _serviceBrand: undefined;\n\tprivate readonly _tokenizersRegistrations: DisposableMap<\n\t\tstring,\n\t\tDisposableStore\n\t> = new DisposableMap();\n\n\tconstructor(\n\t\t@IConfigurationService\n\t\tprivate readonly _configurationService: IConfigurationService,\n\t\t@IInstantiationService\n\t\tprivate readonly _instantiationService: IInstantiationService,\n\t\t@IFileService private readonly _fileService: IFileService,\n\t) {\n\t\tsuper();\n\n\t\tthis._handleGrammarsExtPoint();\n\t\tthis._register(\n\t\t\tthis._configurationService.onDidChangeConfiguration((e) => {\n\t\t\t\tif (\n\t\t\t\t\te.affectsConfiguration(\n\t\t\t\t\t\tEDITOR_EXPERIMENTAL_PREFER_TREESITTER,\n\t\t\t\t\t)\n\t\t\t\t) {\n\t\t\t\t\tthis._handleGrammarsExtPoint();\n\t\t\t\t}\n\t\t\t}),\n\t\t);\n\t}\n\n\tprivate _getSetting(): string[] {\n\t\treturn (\n\t\t\tthis._configurationService.getValue<string[]>(\n\t\t\t\tEDITOR_EXPERIMENTAL_PREFER_TREESITTER,\n\t\t\t) || []\n\t\t);\n\t}\n\n\tprivate _handleGrammarsExtPoint(): void {\n\t\tconst setting = this._getSetting();\n\n\t\t// Eventually, this should actually use an extension point to add tree sitter grammars, but for now they are hard coded in core\n\t\tfor (const languageId of setting) {\n\t\t\tif (\n\t\t\t\tALLOWED_SUPPORT.includes(languageId) &&\n\t\t\t\t!this._tokenizersRegistrations.has(languageId)\n\t\t\t) {\n\t\t\t\tconst lazyTokenizationSupport = new LazyTokenizationSupport(\n\t\t\t\t\t() => this._createTokenizationSupport(languageId),\n\t\t\t\t);\n\t\t\t\tconst disposableStore = new DisposableStore();\n\t\t\t\tdisposableStore.add(lazyTokenizationSupport);\n\t\t\t\tdisposableStore.add(\n\t\t\t\t\tTreeSitterTokenizationRegistry.registerFactory(\n\t\t\t\t\t\tlanguageId,\n\t\t\t\t\t\tlazyTokenizationSupport,\n\t\t\t\t\t),\n\t\t\t\t);\n\t\t\t\tthis._tokenizersRegistrations.set(languageId, disposableStore);\n\t\t\t\tTreeSitterTokenizationRegistry.getOrCreate(languageId);\n\t\t\t}\n\t\t}\n\t\tconst languagesToUnregister = [\n\t\t\t...this._tokenizersRegistrations.keys(),\n\t\t].filter((languageId) => !setting.includes(languageId));\n\t\tfor (const languageId of languagesToUnregister) {\n\t\t\tthis._tokenizersRegistrations.deleteAndDispose(languageId);\n\t\t}\n\t}\n\n\tprivate async _fetchQueries(\n\t\tnewLanguage: string,\n\t): Promise<TreeSitterQueries> {\n\t\tconst languageLocation: AppResourcePath = `vs/editor/common/languages/highlights/${newLanguage}.scm`;\n\t\tconst query = await this._fileService.readFile(\n\t\t\tFileAccess.asFileUri(languageLocation),\n\t\t);\n\t\treturn query.value.toString();\n\t}\n\n\tprivate async _createTokenizationSupport(\n\t\tlanguageId: string,\n\t): Promise<(ITreeSitterTokenizationSupport & IDisposable) | null> {\n\t\tconst queries = await this._fetchQueries(languageId);\n\t\treturn this._instantiationService.createInstance(\n\t\t\tTreeSitterTokenizationSupport,\n\t\t\tqueries,\n\t\t\tlanguageId,\n\t\t);\n\t}\n}\n\nclass TreeSitterTokenizationSupport\n\textends Disposable\n\timplements ITreeSitterTokenizationSupport\n{\n\tprivate _query: Parser.Query | undefined;\n\tprivate readonly _onDidChangeTokens: Emitter<IModelTokensChangedEvent> =\n\t\tnew Emitter();\n\tpublic readonly onDidChangeTokens: Event<IModelTokensChangedEvent> =\n\t\tthis._onDidChangeTokens.event;\n\tprivate _colorThemeData!: ColorThemeData;\n\tprivate _languageAddedListener: IDisposable | undefined;\n\n\tconstructor(\n\t\tprivate readonly _queries: TreeSitterQueries,\n\t\tprivate readonly _languageId: string,\n\t\t@ITreeSitterParserService\n\t\tprivate readonly _treeSitterService: ITreeSitterParserService,\n\t\t@IThemeService private readonly _themeService: IThemeService,\n\t) {\n\t\tsuper();\n\t\tthis._register(\n\t\t\tEvent.runAndSubscribe(\n\t\t\t\tthis._themeService.onDidColorThemeChange,\n\t\t\t\t() => this.reset(),\n\t\t\t),\n\t\t);\n\t}\n\n\tprivate _getTree(\n\t\ttextModel: ITextModel,\n\t): ITreeSitterParseResult | undefined {\n\t\treturn this._treeSitterService.getParseResult(textModel);\n\t}\n\n\tprivate _ensureQuery() {\n\t\tif (!this._query) {\n\t\t\tconst language = this._treeSitterService.getOrInitLanguage(\n\t\t\t\tthis._languageId,\n\t\t\t);\n\t\t\tif (!language) {\n\t\t\t\tif (!this._languageAddedListener) {\n\t\t\t\t\tthis._languageAddedListener = this._register(\n\t\t\t\t\t\tEvent.onceIf(\n\t\t\t\t\t\t\tthis._treeSitterService.onDidAddLanguage,\n\t\t\t\t\t\t\t(e) => e.id === this._languageId,\n\t\t\t\t\t\t)((e) => {\n\t\t\t\t\t\t\tthis._query = e.language.query(this._queries);\n\t\t\t\t\t\t}),\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tthis._query = language.query(this._queries);\n\t\t}\n\t\treturn this._query;\n\t}\n\n\tprivate reset() {\n\t\tthis._colorThemeData =\n\t\t\tthis._themeService.getColorTheme() as ColorThemeData;\n\t}\n\n\tcaptureAtPosition(\n\t\tlineNumber: number,\n\t\tcolumn: number,\n\t\ttextModel: ITextModel,\n\t): any {\n\t\tconst captures = this._captureAtRange(\n\t\t\tlineNumber,\n\t\t\tnew ColumnRange(column, column),\n\t\t\ttextModel,\n\t\t);\n\t\treturn captures;\n\t}\n\n\tprivate _captureAtRange(\n\t\tlineNumber: number,\n\t\tcolumnRange: ColumnRange,\n\t\ttextModel: ITextModel,\n\t): Parser.QueryCapture[] {\n\t\tconst tree = this._getTree(textModel);\n\t\tconst query = this._ensureQuery();\n\t\tif (!tree?.tree || !query) {\n\t\t\treturn [];\n\t\t}\n\t\t// Tree sitter row is 0 based, column is 0 based\n\t\treturn query.captures(tree.tree.rootNode, {\n\t\t\tstartPosition: {\n\t\t\t\trow: lineNumber - 1,\n\t\t\t\tcolumn: columnRange.startColumn - 1,\n\t\t\t},\n\t\t\tendPosition: {\n\t\t\t\trow: lineNumber - 1,\n\t\t\t\tcolumn: columnRange.endColumnExclusive,\n\t\t\t},\n\t\t});\n\t}\n\n\t/**\n\t * Gets the tokens for a given line.\n\t * Each token takes 2 elements in the array. The first element is the offset of the end of the token *in the line, not in the document*, and the second element is the metadata.\n\t *\n\t * @param lineNumber\n\t * @returns\n\t */\n\tpublic tokenizeEncoded(\n\t\tlineNumber: number,\n\t\ttextModel: ITextModel,\n\t): Uint32Array | undefined {\n\t\tconst lineLength = textModel.getLineMaxColumn(lineNumber);\n\t\tconst captures = this._captureAtRange(\n\t\t\tlineNumber,\n\t\t\tnew ColumnRange(1, lineLength),\n\t\t\ttextModel,\n\t\t);\n\n\t\tif (captures.length === 0) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\tlet tokens: Uint32Array = new Uint32Array(captures.length * 2);\n\t\tlet tokenIndex = 0;\n\t\tconst lineStartOffset = textModel.getOffsetAt({\n\t\t\tlineNumber: lineNumber,\n\t\t\tcolumn: 1,\n\t\t});\n\n\t\tconst increaseSizeOfTokensByOneToken = () => {\n\t\t\tconst newTokens = new Uint32Array(tokens.length + 2);\n\t\t\tnewTokens.set(tokens);\n\t\t\ttokens = newTokens;\n\t\t};\n\n\t\tfor (\n\t\t\tlet captureIndex = 0;\n\t\t\tcaptureIndex < captures.length;\n\t\t\tcaptureIndex++\n\t\t) {\n\t\t\tconst capture = captures[captureIndex];\n\t\t\tconst metadata = this.findMetadata(capture.name);\n\t\t\tconst tokenEndIndex =\n\t\t\t\tcapture.node.endIndex < lineStartOffset + lineLength\n\t\t\t\t\t? capture.node.endIndex\n\t\t\t\t\t: lineStartOffset + lineLength;\n\t\t\tconst tokenStartIndex =\n\t\t\t\tcapture.node.startIndex < lineStartOffset\n\t\t\t\t\t? lineStartOffset\n\t\t\t\t\t: capture.node.startIndex;\n\n\t\t\tconst lineRelativeOffset = tokenEndIndex - lineStartOffset;\n\t\t\t// Not every character will get captured, so we need to make sure that our current capture doesn't bleed toward the start of the line and cover characters that it doesn't apply to.\n\t\t\t// We do this by creating a new token in the array if the previous token ends before the current token starts.\n\t\t\tlet previousTokenEnd: number;\n\t\t\tconst currentTokenLength = tokenEndIndex - tokenStartIndex;\n\t\t\tif (captureIndex > 0) {\n\t\t\t\tpreviousTokenEnd = tokens[(tokenIndex - 1) * 2];\n\t\t\t} else {\n\t\t\t\tpreviousTokenEnd = tokenStartIndex - lineStartOffset - 1;\n\t\t\t}\n\t\t\tconst intermediateTokenOffset =\n\t\t\t\tlineRelativeOffset - currentTokenLength;\n\t\t\tif (previousTokenEnd < intermediateTokenOffset) {\n\t\t\t\t// Add en empty token to cover the space where there were no captures\n\t\t\t\ttokens[tokenIndex * 2] = intermediateTokenOffset;\n\t\t\t\ttokens[tokenIndex * 2 + 1] = 0;\n\t\t\t\ttokenIndex++;\n\n\t\t\t\tincreaseSizeOfTokensByOneToken();\n\t\t\t}\n\n\t\t\tconst addCurrentTokenToArray = () => {\n\t\t\t\ttokens[tokenIndex * 2] = lineRelativeOffset;\n\t\t\t\ttokens[tokenIndex * 2 + 1] = metadata;\n\t\t\t\ttokenIndex++;\n\t\t\t};\n\n\t\t\tif (previousTokenEnd > lineRelativeOffset) {\n\t\t\t\t// The current token is within the previous token. Adjust the end of the previous token.\n\t\t\t\tconst originalPreviousTokenEndOffset =\n\t\t\t\t\ttokens[(tokenIndex - 1) * 2];\n\t\t\t\ttokens[(tokenIndex - 1) * 2] = intermediateTokenOffset;\n\n\t\t\t\taddCurrentTokenToArray();\n\t\t\t\t// Add the rest of the previous token after the current token\n\t\t\t\tincreaseSizeOfTokensByOneToken();\n\t\t\t\ttokens[tokenIndex * 2] = originalPreviousTokenEndOffset;\n\t\t\t\ttokens[tokenIndex * 2 + 1] = tokens[(tokenIndex - 2) * 2 + 1];\n\t\t\t\ttokenIndex++;\n\t\t\t} else {\n\t\t\t\t// Just add the token to the array\n\t\t\t\taddCurrentTokenToArray();\n\t\t\t}\n\t\t}\n\n\t\tif (\n\t\t\tcaptures[captures.length - 1].node.endPosition.column + 1 <\n\t\t\tlineLength\n\t\t) {\n\t\t\tconst newTokens = new Uint32Array(tokens.length + 2);\n\t\t\tnewTokens.set(tokens);\n\t\t\ttokens = newTokens;\n\t\t\ttokens[tokenIndex * 2] = lineLength;\n\t\t\ttokens[tokenIndex * 2 + 1] = 0;\n\t\t}\n\t\treturn tokens;\n\t}\n\n\tprivate findMetadata(captureName: string): number {\n\t\tconst tokenStyle: TokenStyle | undefined =\n\t\t\tthis._colorThemeData.resolveScopes([[captureName]]);\n\t\tif (!tokenStyle) {\n\t\t\treturn 0;\n\t\t}\n\n\t\tlet metadata = 0;\n\t\tif (typeof tokenStyle.italic !== \"undefined\") {\n\t\t\tconst italicBit = tokenStyle.italic ? FontStyle.Italic : 0;\n\t\t\tmetadata |= italicBit | MetadataConsts.ITALIC_MASK;\n\t\t}\n\t\tif (typeof tokenStyle.bold !== \"undefined\") {\n\t\t\tconst boldBit = tokenStyle.bold ? FontStyle.Bold : 0;\n\t\t\tmetadata |= boldBit | MetadataConsts.BOLD_MASK;\n\t\t}\n\t\tif (typeof tokenStyle.underline !== \"undefined\") {\n\t\t\tconst underlineBit = tokenStyle.underline ? FontStyle.Underline : 0;\n\t\t\tmetadata |= underlineBit | MetadataConsts.UNDERLINE_MASK;\n\t\t}\n\t\tif (typeof tokenStyle.strikethrough !== \"undefined\") {\n\t\t\tconst strikethroughBit = tokenStyle.strikethrough\n\t\t\t\t? FontStyle.Strikethrough\n\t\t\t\t: 0;\n\t\t\tmetadata |= strikethroughBit | MetadataConsts.STRIKETHROUGH_MASK;\n\t\t}\n\t\tif (tokenStyle.foreground) {\n\t\t\tconst tokenStyleForeground = this._colorThemeData\n\t\t\t\t.getTokenColorIndex()\n\t\t\t\t.get(tokenStyle?.foreground);\n\t\t\tconst foregroundBits =\n\t\t\t\ttokenStyleForeground << MetadataConsts.FOREGROUND_OFFSET;\n\t\t\tmetadata |= foregroundBits;\n\t\t}\n\n\t\treturn metadata;\n\t}\n\n\toverride dispose() {\n\t\tsuper.dispose();\n\t\tthis._query?.delete();\n\t\tthis._query = undefined;\n\t}\n}\n\nregisterSingleton(\n\tITreeSitterTokenizationFeature,\n\tTreeSitterTokenizationFeature,\n\tInstantiationType.Eager,\n);\n"],
  "mappings": "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",
  "names": []
}
