var b=Object.defineProperty;var x=Object.getOwnPropertyDescriptor;var _=(u,s,t,e)=>{for(var r=e>1?void 0:e?x(s,t):s,i=u.length-1,n;i>=0;i--)(n=u[i])&&(r=(e?n(s,t,r):n(r))||r);return e&&r&&b(s,t,r),r},c=(u,s)=>(t,e)=>s(t,e,u);import{Emitter as M,Event as k}from"../../../../../vs/base/common/event.js";import{Disposable as E,DisposableMap as q,DisposableStore as w}from"../../../../../vs/base/common/lifecycle.js";import{FileAccess as L}from"../../../../../vs/base/common/network.js";import{FontStyle as f,MetadataConsts as g}from"../../../../../vs/editor/common/encodedTokenAttributes.js";import{LazyTokenizationSupport as F,TreeSitterTokenizationRegistry as C}from"../../../../../vs/editor/common/languages.js";import"../../../../../vs/editor/common/model.js";import{EDITOR_EXPERIMENTAL_PREFER_TREESITTER as D,ITreeSitterParserService as O}from"../../../../../vs/editor/common/services/treeSitterParserService.js";import"../../../../../vs/editor/common/textModelEvents.js";import{ColumnRange as R}from"../../../../../vs/editor/contrib/inlineCompletions/browser/utils.js";import{IConfigurationService as z}from"../../../../../vs/platform/configuration/common/configuration.js";import{IFileService as U}from"../../../../../vs/platform/files/common/files.js";import{InstantiationType as B,registerSingleton as Q}from"../../../../../vs/platform/instantiation/common/extensions.js";import{createDecorator as G,IInstantiationService as K}from"../../../../../vs/platform/instantiation/common/instantiation.js";import{IThemeService as N}from"../../../../../vs/platform/theme/common/themeService.js";import"../../../../../vs/platform/theme/common/tokenClassificationRegistry.js";import"../../../../../vs/workbench/services/themes/common/colorThemeData.js";const H=["typescript"],V=G("treeSitterTokenizationFeature");let p=class extends E{constructor(t,e,r){super();this._configurationService=t;this._instantiationService=e;this._fileService=r;this._handleGrammarsExtPoint(),this._register(this._configurationService.onDidChangeConfiguration(i=>{i.affectsConfiguration(D)&&this._handleGrammarsExtPoint()}))}_serviceBrand;_tokenizersRegistrations=new q;_getSetting(){return this._configurationService.getValue(D)||[]}_handleGrammarsExtPoint(){const t=this._getSetting();for(const e of t)if(H.includes(e)&&!this._tokenizersRegistrations.has(e)){const r=new F(()=>this._createTokenizationSupport(e)),i=new w;i.add(r),i.add(C.registerFactory(e,r)),this._tokenizersRegistrations.set(e,i),C.getOrCreate(e)}}async _fetchQueries(t){const e=`vs/editor/common/languages/highlights/${t}.scm`;return(await this._fileService.readFile(L.asFileUri(e))).value.toString()}async _createTokenizationSupport(t){const e=await this._fetchQueries(t);return this._instantiationService.createInstance(h,e,t)}};p=_([c(0,z),c(1,K),c(2,U)],p);let h=class extends E{constructor(t,e,r,i){super();this._queries=t;this._languageId=e;this._treeSitterService=r;this._themeService=i;this._register(k.runAndSubscribe(this._themeService.onDidColorThemeChange,()=>this.reset()))}_query;_onDidChangeTokens=new M;onDidChangeTokens=this._onDidChangeTokens.event;_colorThemeData;_languageAddedListener;_getTree(t){return this._treeSitterService.getParseResult(t)}_ensureQuery(){if(!this._query){const t=this._treeSitterService.getOrInitLanguage(this._languageId);if(!t){this._languageAddedListener||(this._languageAddedListener=this._register(k.onceIf(this._treeSitterService.onDidAddLanguage,e=>e.id===this._languageId)(e=>{this._query=e.language.query(this._queries)})));return}this._query=t.query(this._queries)}return this._query}reset(){this._colorThemeData=this._themeService.getColorTheme()}captureAtPosition(t,e,r){return this._captureAtRange(t,new R(e,e),r)}_captureAtRange(t,e,r){const i=this._getTree(r),n=this._ensureQuery();return!i?.tree||!n?[]:n.captures(i.tree.rootNode,{startPosition:{row:t-1,column:e.startColumn-1},endPosition:{row:t-1,column:e.endColumnExclusive}})}tokenizeEncoded(t,e){const r=e.getLineMaxColumn(t),i=this._captureAtRange(t,new R(1,r),e);if(i.length===0)return;let n=new Uint32Array(i.length*2),o=0;const d=e.getOffsetAt({lineNumber:t,column:1});for(let a=0;a<i.length;a++){const l=i[a],A=this.findMetadata(l.name),S=l.node.endIndex<d+r?l.node.endIndex:d+r,v=l.node.startIndex<d?d:l.node.startIndex,T=S-d;let m;const P=S-v;a>0?m=n[(o-1)*2]:m=v-d-1;const I=T-P;if(m<I){n[o*2]=I,n[o*2+1]=0,o++;const y=new Uint32Array(n.length+2);y.set(n),n=y}n[o*2]=T,n[o*2+1]=A,o++}if(i[i.length-1].node.endPosition.column+1<r){const a=new Uint32Array(n.length+2);a.set(n),n=a,n[o*2]=r,n[o*2+1]=0}return n}findMetadata(t){const e=this._colorThemeData.resolveScopes([[t]]);if(!e)return 0;let r=0;if(typeof e.italic<"u"){const i=e.italic?f.Italic:0;r|=i|g.ITALIC_MASK}if(typeof e.bold<"u"){const i=e.bold?f.Bold:0;r|=i|g.BOLD_MASK}if(typeof e.underline<"u"){const i=e.underline?f.Underline:0;r|=i|g.UNDERLINE_MASK}if(typeof e.strikethrough<"u"){const i=e.strikethrough?f.Strikethrough:0;r|=i|g.STRIKETHROUGH_MASK}if(e.foreground){const n=this._colorThemeData.getTokenColorIndex().get(e?.foreground)<<g.FOREGROUND_OFFSET;r|=n}return r}dispose(){super.dispose(),this._query?.delete(),this._query=void 0}};h=_([c(2,O),c(3,N)],h),Q(V,p,B.Eager);export{V as ITreeSitterTokenizationFeature};
