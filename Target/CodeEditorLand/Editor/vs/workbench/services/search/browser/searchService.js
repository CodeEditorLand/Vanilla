var H=Object.defineProperty;var _=Object.getOwnPropertyDescriptor;var I=(d,c,e,r)=>{for(var t=r>1?void 0:r?_(c,e):c,i=d.length-1,s;i>=0;i--)(s=d[i])&&(t=(r?s(c,e,t):s(t))||t);return r&&t&&H(c,e,t),t},o=(d,c)=>(e,r)=>c(e,r,d);import{createWebWorker as R}from"../../../../base/browser/defaultWorkerFactory.js";import{memoize as U}from"../../../../base/common/decorators.js";import{Emitter as Q}from"../../../../base/common/event.js";import{Disposable as g,DisposableStore as F}from"../../../../base/common/lifecycle.js";import{revive as w}from"../../../../base/common/marshalling.js";import{Schemas as x}from"../../../../base/common/network.js";import{URI as C}from"../../../../base/common/uri.js";import{logOnceWebWorkerWarning as E}from"../../../../base/common/worker/simpleWorker.js";import{IModelService as q}from"../../../../editor/common/services/model.js";import{localize as P}from"../../../../nls.js";import{WebFileSystemAccess as M}from"../../../../platform/files/browser/webFileSystemAccess.js";import{IFileService as T}from"../../../../platform/files/common/files.js";import{InstantiationType as L,registerSingleton as O}from"../../../../platform/instantiation/common/extensions.js";import{IInstantiationService as $}from"../../../../platform/instantiation/common/instantiation.js";import{ILogService as j}from"../../../../platform/log/common/log.js";import{ITelemetryService as z}from"../../../../platform/telemetry/common/telemetry.js";import{IUriIdentityService as W}from"../../../../platform/uriIdentity/common/uriIdentity.js";import{IEditorService as N}from"../../editor/common/editorService.js";import{IExtensionService as A}from"../../extensions/common/extensions.js";import{LocalFileSearchSimpleWorkerHost as B}from"../common/localFileSearchWorkerTypes.js";import{ISearchService as G,SearchProviderType as b,TextSearchCompleteMessageType as D}from"../common/search.js";import{SearchService as J}from"../common/searchService.js";let u=class extends J{constructor(e,r,t,i,s,l,S,m){super(e,r,t,i,s,l,m);this.instantiationService=S;const a=this.instantiationService.createInstance(p);this.registerSearchResultProvider(x.file,b.file,a),this.registerSearchResultProvider(x.file,b.text,a)}};u=I([o(0,q),o(1,N),o(2,z),o(3,j),o(4,A),o(5,T),o(6,$),o(7,W)],u);let p=class extends g{constructor(e,r){super();this.fileService=e;this.uriIdentityService=r;this._worker=null}_worker;_onDidReceiveTextSearchMatch=new Q;onDidReceiveTextSearchMatch=this._onDidReceiveTextSearchMatch.event;cache;queryId=0;sendTextSearchMatch(e,r){this._onDidReceiveTextSearchMatch.fire({match:e,queryId:r})}get fileSystemProvider(){return this.fileService.getProvider(x.file)}async cancelQuery(e){this._getOrCreateWorker().proxy.$cancelQuery(e)}async textSearch(e,r,t){try{const i=new F,s=this._getOrCreateWorker().proxy,l=[];let S=!1;return await Promise.all(e.folderQueries.map(async a=>{const h=this.queryId++;i.add(t?.onCancellationRequested(n=>this.cancelQuery(h))||g.None);const y=await this.fileSystemProvider.getHandle(a.folder);if(!y||!M.isFileSystemDirectoryHandle(y))return;const f=n=>({resource:C.revive(n.resource),results:w(n.results)});i.add(this.onDidReceiveTextSearchMatch(n=>{n.queryId===h&&r?.(f(n.match))}));const v=this.uriIdentityService.extUri.ignorePathCasing(a.folder),k=await s.$searchDirectory(y,e,a,v,h);for(const n of k.results)l.push(w(n));k.limitHit&&(S=!0)})),i.dispose(),{messages:[],results:l,limitHit:S}}catch{return{results:[],messages:[{text:P("errorSearchText","Unable to search with Web Worker text searcher"),type:D.Warning}]}}}async fileSearch(e,r){try{const t=new F;let i=!1;const s=this._getOrCreateWorker().proxy,l=[];return await Promise.all(e.folderQueries.map(async m=>{const a=this.queryId++;t.add(r?.onCancellationRequested(v=>this.cancelQuery(a))||g.None);const h=await this.fileSystemProvider.getHandle(m.folder);if(!h||!M.isFileSystemDirectoryHandle(h))return;const y=this.uriIdentityService.extUri.ignorePathCasing(m.folder),f=await s.$listDirectory(h,e,m,y,a);for(const v of f.results)l.push({resource:C.joinPath(m.folder,v)});f.limitHit&&(i=!0)})),t.dispose(),{messages:[],results:l,limitHit:i}}catch{return{results:[],messages:[{text:P("errorSearchFile","Unable to search with Web Worker file searcher"),type:D.Warning}]}}}async clearCache(e){this.cache?.key===e&&(this.cache=void 0)}_getOrCreateWorker(){if(!this._worker)try{this._worker=this._register(R("vs/workbench/services/search/worker/localFileSearch","LocalFileSearchWorker")),B.setChannel(this._worker,{$sendTextSearchMatch:(e,r)=>this.sendTextSearchMatch(e,r)})}catch(e){throw E(e),e}return this._worker}};I([U],p.prototype,"fileSystemProvider",1),p=I([o(0,T),o(1,W)],p),O(G,u,L.Delayed);export{p as LocalFileSearchWorkerClient,u as RemoteSearchService};
