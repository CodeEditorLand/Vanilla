var H=Object.defineProperty;var _=Object.getOwnPropertyDescriptor;var f=(d,c,e,r)=>{for(var t=r>1?void 0:r?_(c,e):c,i=d.length-1,a;i>=0;i--)(a=d[i])&&(t=(r?a(c,e,t):a(t))||t);return r&&t&&H(c,e,t),t},o=(d,c)=>(e,r)=>c(e,r,d);import{createWebWorker as R}from"../../../../base/browser/defaultWorkerFactory.js";import"../../../../base/common/cancellation.js";import{memoize as U}from"../../../../base/common/decorators.js";import{Emitter as Q}from"../../../../base/common/event.js";import{Disposable as g,DisposableStore as C}from"../../../../base/common/lifecycle.js";import{revive as F}from"../../../../base/common/marshalling.js";import{Schemas as x}from"../../../../base/common/network.js";import{URI as w}from"../../../../base/common/uri.js";import{logOnceWebWorkerWarning as E}from"../../../../base/common/worker/simpleWorker.js";import{IModelService as L}from"../../../../editor/common/services/model.js";import{localize as P}from"../../../../nls.js";import"../../../../platform/files/browser/htmlFileSystemProvider.js";import{WebFileSystemAccess as M}from"../../../../platform/files/browser/webFileSystemAccess.js";import{IFileService as T}from"../../../../platform/files/common/files.js";import{InstantiationType as O,registerSingleton as $}from"../../../../platform/instantiation/common/extensions.js";import{IInstantiationService as q}from"../../../../platform/instantiation/common/instantiation.js";import{ILogService as z}from"../../../../platform/log/common/log.js";import{ITelemetryService as N}from"../../../../platform/telemetry/common/telemetry.js";import{IUriIdentityService as W}from"../../../../platform/uriIdentity/common/uriIdentity.js";import{IEditorService as j}from"../../editor/common/editorService.js";import{IExtensionService as A}from"../../extensions/common/extensions.js";import{LocalFileSearchSimpleWorkerHost as B}from"../common/localFileSearchWorkerTypes.js";import{ISearchService as G,SearchProviderType as b,TextSearchCompleteMessageType as D}from"../common/search.js";import{SearchService as J}from"../common/searchService.js";let S=class extends J{constructor(e,r,t,i,a,h,y,n){super(e,r,t,i,a,h,n);this.instantiationService=y;const s=this.instantiationService.createInstance(p);this.registerSearchResultProvider(x.file,b.file,s),this.registerSearchResultProvider(x.file,b.text,s)}};S=f([o(0,L),o(1,j),o(2,N),o(3,z),o(4,A),o(5,T),o(6,q),o(7,W)],S);let p=class extends g{constructor(e,r){super();this.fileService=e;this.uriIdentityService=r;this._worker=null}_worker;_onDidReceiveTextSearchMatch=new Q;onDidReceiveTextSearchMatch=this._onDidReceiveTextSearchMatch.event;cache;queryId=0;sendTextSearchMatch(e,r){this._onDidReceiveTextSearchMatch.fire({match:e,queryId:r})}get fileSystemProvider(){return this.fileService.getProvider(x.file)}async cancelQuery(e){this._getOrCreateWorker().proxy.$cancelQuery(e)}async textSearch(e,r,t){try{const i=new C,a=this._getOrCreateWorker().proxy,h=[];let y=!1;return await Promise.all(e.folderQueries.map(async s=>{const m=this.queryId++;i.add(t?.onCancellationRequested(l=>this.cancelQuery(m))||g.None);const u=await this.fileSystemProvider.getHandle(s.folder);if(!u||!M.isFileSystemDirectoryHandle(u)){console.error("Could not get directory handle for ",s);return}const I=l=>({resource:w.revive(l.resource),results:F(l.results)});i.add(this.onDidReceiveTextSearchMatch(l=>{l.queryId===m&&r?.(I(l.match))}));const v=this.uriIdentityService.extUri.ignorePathCasing(s.folder),k=await a.$searchDirectory(u,e,s,v,m);for(const l of k.results)h.push(F(l));k.limitHit&&(y=!0)})),i.dispose(),{messages:[],results:h,limitHit:y}}catch(i){return console.error("Error performing web worker text search",i),{results:[],messages:[{text:P("errorSearchText","Unable to search with Web Worker text searcher"),type:D.Warning}]}}}async fileSearch(e,r){try{const t=new C;let i=!1;const a=this._getOrCreateWorker().proxy,h=[];return await Promise.all(e.folderQueries.map(async n=>{const s=this.queryId++;t.add(r?.onCancellationRequested(v=>this.cancelQuery(s))||g.None);const m=await this.fileSystemProvider.getHandle(n.folder);if(!m||!M.isFileSystemDirectoryHandle(m)){console.error("Could not get directory handle for ",n);return}const u=this.uriIdentityService.extUri.ignorePathCasing(n.folder),I=await a.$listDirectory(m,e,n,u,s);for(const v of I.results)h.push({resource:w.joinPath(n.folder,v)});I.limitHit&&(i=!0)})),t.dispose(),{messages:[],results:h,limitHit:i}}catch(t){return console.error("Error performing web worker file search",t),{results:[],messages:[{text:P("errorSearchFile","Unable to search with Web Worker file searcher"),type:D.Warning}]}}}async clearCache(e){this.cache?.key===e&&(this.cache=void 0)}_getOrCreateWorker(){if(!this._worker)try{this._worker=this._register(R("vs/workbench/services/search/worker/localFileSearch","LocalFileSearchWorker")),B.setChannel(this._worker,{$sendTextSearchMatch:(e,r)=>this.sendTextSearchMatch(e,r)})}catch(e){throw E(e),e}return this._worker}};f([U],p.prototype,"fileSystemProvider",1),p=f([o(0,T),o(1,W)],p),$(G,S,O.Delayed);export{p as LocalFileSearchWorkerClient,S as RemoteSearchService};
