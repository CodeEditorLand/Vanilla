{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/search/browser/searchService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CancellationToken } from '../../../../base/common/cancellation.js';\nimport { IModelService } from '../../../../editor/common/services/model.js';\nimport { IFileService } from '../../../../platform/files/common/files.js';\nimport { IInstantiationService } from '../../../../platform/instantiation/common/instantiation.js';\nimport { ILogService } from '../../../../platform/log/common/log.js';\nimport { ITelemetryService } from '../../../../platform/telemetry/common/telemetry.js';\nimport { IEditorService } from '../../editor/common/editorService.js';\nimport { IExtensionService } from '../../extensions/common/extensions.js';\nimport { IFileMatch, IFileQuery, ISearchComplete, ISearchProgressItem, ISearchResultProvider, ISearchService, ITextQuery, SearchProviderType, TextSearchCompleteMessageType } from '../common/search.js';\nimport { SearchService } from '../common/searchService.js';\nimport { IUriIdentityService } from '../../../../platform/uriIdentity/common/uriIdentity.js';\nimport { IWorkerClient, logOnceWebWorkerWarning } from '../../../../base/common/worker/simpleWorker.js';\nimport { Disposable, DisposableStore } from '../../../../base/common/lifecycle.js';\nimport { createWebWorker } from '../../../../base/browser/defaultWorkerFactory.js';\nimport { InstantiationType, registerSingleton } from '../../../../platform/instantiation/common/extensions.js';\nimport { ILocalFileSearchSimpleWorker, LocalFileSearchSimpleWorkerHost } from '../common/localFileSearchWorkerTypes.js';\nimport { memoize } from '../../../../base/common/decorators.js';\nimport { HTMLFileSystemProvider } from '../../../../platform/files/browser/htmlFileSystemProvider.js';\nimport { Schemas } from '../../../../base/common/network.js';\nimport { URI, UriComponents } from '../../../../base/common/uri.js';\nimport { Emitter, Event } from '../../../../base/common/event.js';\nimport { localize } from '../../../../nls.js';\nimport { WebFileSystemAccess } from '../../../../platform/files/browser/webFileSystemAccess.js';\nimport { revive } from '../../../../base/common/marshalling.js';\n\nexport class RemoteSearchService extends SearchService {\n\tconstructor(\n\t\t@IModelService modelService: IModelService,\n\t\t@IEditorService editorService: IEditorService,\n\t\t@ITelemetryService telemetryService: ITelemetryService,\n\t\t@ILogService logService: ILogService,\n\t\t@IExtensionService extensionService: IExtensionService,\n\t\t@IFileService fileService: IFileService,\n\t\t@IInstantiationService private readonly instantiationService: IInstantiationService,\n\t\t@IUriIdentityService uriIdentityService: IUriIdentityService,\n\t) {\n\t\tsuper(modelService, editorService, telemetryService, logService, extensionService, fileService, uriIdentityService);\n\t\tconst searchProvider = this.instantiationService.createInstance(LocalFileSearchWorkerClient);\n\t\tthis.registerSearchResultProvider(Schemas.file, SearchProviderType.file, searchProvider);\n\t\tthis.registerSearchResultProvider(Schemas.file, SearchProviderType.text, searchProvider);\n\t}\n}\n\nexport class LocalFileSearchWorkerClient extends Disposable implements ISearchResultProvider {\n\n\tprotected _worker: IWorkerClient<ILocalFileSearchSimpleWorker> | null;\n\n\tprivate readonly _onDidReceiveTextSearchMatch = new Emitter<{ match: IFileMatch<UriComponents>; queryId: number }>();\n\treadonly onDidReceiveTextSearchMatch: Event<{ match: IFileMatch<UriComponents>; queryId: number }> = this._onDidReceiveTextSearchMatch.event;\n\n\tprivate cache: { key: string; cache: ISearchComplete } | undefined;\n\n\tprivate queryId: number = 0;\n\n\tconstructor(\n\t\t@IFileService private fileService: IFileService,\n\t\t@IUriIdentityService private uriIdentityService: IUriIdentityService,\n\t) {\n\t\tsuper();\n\t\tthis._worker = null;\n\t}\n\n\tsendTextSearchMatch(match: IFileMatch<UriComponents>, queryId: number): void {\n\t\tthis._onDidReceiveTextSearchMatch.fire({ match, queryId });\n\t}\n\n\t@memoize\n\tprivate get fileSystemProvider(): HTMLFileSystemProvider {\n\t\treturn this.fileService.getProvider(Schemas.file) as HTMLFileSystemProvider;\n\t}\n\n\tprivate async cancelQuery(queryId: number) {\n\t\tconst proxy = this._getOrCreateWorker().proxy;\n\t\tproxy.$cancelQuery(queryId);\n\t}\n\n\tasync textSearch(query: ITextQuery, onProgress?: (p: ISearchProgressItem) => void, token?: CancellationToken): Promise<ISearchComplete> {\n\t\ttry {\n\t\t\tconst queryDisposables = new DisposableStore();\n\n\t\t\tconst proxy = this._getOrCreateWorker().proxy;\n\t\t\tconst results: IFileMatch[] = [];\n\n\t\t\tlet limitHit = false;\n\n\t\t\tawait Promise.all(query.folderQueries.map(async fq => {\n\t\t\t\tconst queryId = this.queryId++;\n\t\t\t\tqueryDisposables.add(token?.onCancellationRequested(e => this.cancelQuery(queryId)) || Disposable.None);\n\n\t\t\t\tconst handle: FileSystemHandle | undefined = await this.fileSystemProvider.getHandle(fq.folder);\n\t\t\t\tif (!handle || !WebFileSystemAccess.isFileSystemDirectoryHandle(handle)) {\n\t\t\t\t\tconsole.error('Could not get directory handle for ', fq);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// force resource to revive using URI.revive.\n\t\t\t\t// TODO @andrea see why we can't just use `revive()` below. For some reason, (<MarshalledObject>obj).$mid was undefined for result.resource\n\t\t\t\tconst reviveMatch = (result: IFileMatch<UriComponents>): IFileMatch => ({\n\t\t\t\t\tresource: URI.revive(result.resource),\n\t\t\t\t\tresults: revive(result.results)\n\t\t\t\t});\n\n\t\t\t\tqueryDisposables.add(this.onDidReceiveTextSearchMatch(e => {\n\t\t\t\t\tif (e.queryId === queryId) {\n\t\t\t\t\t\tonProgress?.(reviveMatch(e.match));\n\t\t\t\t\t}\n\t\t\t\t}));\n\n\t\t\t\tconst ignorePathCasing = this.uriIdentityService.extUri.ignorePathCasing(fq.folder);\n\t\t\t\tconst folderResults = await proxy.$searchDirectory(handle, query, fq, ignorePathCasing, queryId);\n\t\t\t\tfor (const folderResult of folderResults.results) {\n\t\t\t\t\tresults.push(revive(folderResult));\n\t\t\t\t}\n\n\t\t\t\tif (folderResults.limitHit) {\n\t\t\t\t\tlimitHit = true;\n\t\t\t\t}\n\n\t\t\t}));\n\n\t\t\tqueryDisposables.dispose();\n\t\t\tconst result = { messages: [], results, limitHit };\n\t\t\treturn result;\n\t\t} catch (e) {\n\t\t\tconsole.error('Error performing web worker text search', e);\n\t\t\treturn {\n\t\t\t\tresults: [],\n\t\t\t\tmessages: [{\n\t\t\t\t\ttext: localize('errorSearchText', \"Unable to search with Web Worker text searcher\"), type: TextSearchCompleteMessageType.Warning\n\t\t\t\t}],\n\t\t\t};\n\t\t}\n\t}\n\n\tasync fileSearch(query: IFileQuery, token?: CancellationToken): Promise<ISearchComplete> {\n\t\ttry {\n\t\t\tconst queryDisposables = new DisposableStore();\n\t\t\tlet limitHit = false;\n\n\t\t\tconst proxy = this._getOrCreateWorker().proxy;\n\t\t\tconst results: IFileMatch[] = [];\n\t\t\tawait Promise.all(query.folderQueries.map(async fq => {\n\t\t\t\tconst queryId = this.queryId++;\n\t\t\t\tqueryDisposables.add(token?.onCancellationRequested(e => this.cancelQuery(queryId)) || Disposable.None);\n\n\t\t\t\tconst handle: FileSystemHandle | undefined = await this.fileSystemProvider.getHandle(fq.folder);\n\t\t\t\tif (!handle || !WebFileSystemAccess.isFileSystemDirectoryHandle(handle)) {\n\t\t\t\t\tconsole.error('Could not get directory handle for ', fq);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tconst caseSensitive = this.uriIdentityService.extUri.ignorePathCasing(fq.folder);\n\t\t\t\tconst folderResults = await proxy.$listDirectory(handle, query, fq, caseSensitive, queryId);\n\t\t\t\tfor (const folderResult of folderResults.results) {\n\t\t\t\t\tresults.push({ resource: URI.joinPath(fq.folder, folderResult) });\n\t\t\t\t}\n\t\t\t\tif (folderResults.limitHit) { limitHit = true; }\n\t\t\t}));\n\n\t\t\tqueryDisposables.dispose();\n\n\t\t\tconst result = { messages: [], results, limitHit };\n\t\t\treturn result;\n\t\t} catch (e) {\n\t\t\tconsole.error('Error performing web worker file search', e);\n\t\t\treturn {\n\t\t\t\tresults: [],\n\t\t\t\tmessages: [{\n\t\t\t\t\ttext: localize('errorSearchFile', \"Unable to search with Web Worker file searcher\"), type: TextSearchCompleteMessageType.Warning\n\t\t\t\t}],\n\t\t\t};\n\t\t}\n\t}\n\n\tasync clearCache(cacheKey: string): Promise<void> {\n\t\tif (this.cache?.key === cacheKey) { this.cache = undefined; }\n\t}\n\n\tprivate _getOrCreateWorker(): IWorkerClient<ILocalFileSearchSimpleWorker> {\n\t\tif (!this._worker) {\n\t\t\ttry {\n\t\t\t\tthis._worker = this._register(createWebWorker<ILocalFileSearchSimpleWorker>(\n\t\t\t\t\t'vs/workbench/services/search/worker/localFileSearch',\n\t\t\t\t\t'LocalFileSearchWorker'\n\t\t\t\t));\n\t\t\t\tLocalFileSearchSimpleWorkerHost.setChannel(this._worker, {\n\t\t\t\t\t$sendTextSearchMatch: (match, queryId) => {\n\t\t\t\t\t\treturn this.sendTextSearchMatch(match, queryId);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t} catch (err) {\n\t\t\t\tlogOnceWebWorkerWarning(err);\n\t\t\t\tthrow err;\n\t\t\t}\n\t\t}\n\t\treturn this._worker;\n\t}\n}\n\nregisterSingleton(ISearchService, RemoteSearchService, InstantiationType.Delayed);\n"],
  "mappings": ";;;;;;;;;;;;AAKA,SAAS,yBAAyB;AAClC,SAAS,qBAAqB;AAC9B,SAAS,oBAAoB;AAC7B,SAAS,6BAA6B;AACtC,SAAS,mBAAmB;AAC5B,SAAS,yBAAyB;AAClC,SAAS,sBAAsB;AAC/B,SAAS,yBAAyB;AAClC,SAAS,YAAY,YAAY,iBAAiB,qBAAqB,uBAAuB,gBAAgB,YAAY,oBAAoB,qCAAqC;AACnL,SAAS,qBAAqB;AAC9B,SAAS,2BAA2B;AACpC,SAAS,eAAe,+BAA+B;AACvD,SAAS,YAAY,uBAAuB;AAC5C,SAAS,uBAAuB;AAChC,SAAS,mBAAmB,yBAAyB;AACrD,SAAS,8BAA8B,uCAAuC;AAC9E,SAAS,eAAe;AACxB,SAAS,8BAA8B;AACvC,SAAS,eAAe;AACxB,SAAS,KAAK,qBAAqB;AACnC,SAAS,SAAS,aAAa;AAC/B,SAAS,gBAAgB;AACzB,SAAS,2BAA2B;AACpC,SAAS,cAAc;AAEhB,IAAM,sBAAN,cAAkC,cAAc;AAAA,EACtD,YACgB,cACC,eACG,kBACN,YACM,kBACL,aAC0B,sBACnB,oBACpB;AACD,UAAM,cAAc,eAAe,kBAAkB,YAAY,kBAAkB,aAAa,kBAAkB;AAH1E;AAIxC,UAAM,iBAAiB,KAAK,qBAAqB,eAAe,2BAA2B;AAC3F,SAAK,6BAA6B,QAAQ,MAAM,mBAAmB,MAAM,cAAc;AACvF,SAAK,6BAA6B,QAAQ,MAAM,mBAAmB,MAAM,cAAc;AAAA,EACxF;AAAA,EA7CD,OA8BuD;AAAA;AAAA;AAgBvD;AAhBa,sBAAN;AAAA,EAEJ;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,GATU;AAkBN,IAAM,8BAAN,cAA0C,WAA4C;AAAA,EAW5F,YACuB,aACO,oBAC5B;AACD,UAAM;AAHgB;AACO;AAG7B,SAAK,UAAU;AAAA,EAChB;AAAA,EAjED,OAgD6F;AAAA;AAAA;AAAA,EAElF;AAAA,EAEO,+BAA+B,IAAI,QAA+D;AAAA,EAC1G,8BAA4F,KAAK,6BAA6B;AAAA,EAE/H;AAAA,EAEA,UAAkB;AAAA,EAU1B,oBAAoB,OAAkC,SAAuB;AAC5E,SAAK,6BAA6B,KAAK,EAAE,OAAO,QAAQ,CAAC;AAAA,EAC1D;AAAA,EAGA,IAAY,qBAA6C;AACxD,WAAO,KAAK,YAAY,YAAY,QAAQ,IAAI;AAAA,EACjD;AAAA,EAEA,MAAc,YAAY,SAAiB;AAC1C,UAAM,QAAQ,KAAK,mBAAmB,EAAE;AACxC,UAAM,aAAa,OAAO;AAAA,EAC3B;AAAA,EAEA,MAAM,WAAW,OAAmB,YAA+C,OAAqD;AACvI,QAAI;AACH,YAAM,mBAAmB,IAAI,gBAAgB;AAE7C,YAAM,QAAQ,KAAK,mBAAmB,EAAE;AACxC,YAAM,UAAwB,CAAC;AAE/B,UAAI,WAAW;AAEf,YAAM,QAAQ,IAAI,MAAM,cAAc,IAAI,OAAM,OAAM;AACrD,cAAM,UAAU,KAAK;AACrB,yBAAiB,IAAI,OAAO,wBAAwB,OAAK,KAAK,YAAY,OAAO,CAAC,KAAK,WAAW,IAAI;AAEtG,cAAM,SAAuC,MAAM,KAAK,mBAAmB,UAAU,GAAG,MAAM;AAC9F,YAAI,CAAC,UAAU,CAAC,oBAAoB,4BAA4B,MAAM,GAAG;AACxE,kBAAQ,MAAM,uCAAuC,EAAE;AACvD;AAAA,QACD;AAIA,cAAM,cAAc,wBAACA,aAAmD;AAAA,UACvE,UAAU,IAAI,OAAOA,QAAO,QAAQ;AAAA,UACpC,SAAS,OAAOA,QAAO,OAAO;AAAA,QAC/B,IAHoB;AAKpB,yBAAiB,IAAI,KAAK,4BAA4B,OAAK;AAC1D,cAAI,EAAE,YAAY,SAAS;AAC1B,yBAAa,YAAY,EAAE,KAAK,CAAC;AAAA,UAClC;AAAA,QACD,CAAC,CAAC;AAEF,cAAM,mBAAmB,KAAK,mBAAmB,OAAO,iBAAiB,GAAG,MAAM;AAClF,cAAM,gBAAgB,MAAM,MAAM,iBAAiB,QAAQ,OAAO,IAAI,kBAAkB,OAAO;AAC/F,mBAAW,gBAAgB,cAAc,SAAS;AACjD,kBAAQ,KAAK,OAAO,YAAY,CAAC;AAAA,QAClC;AAEA,YAAI,cAAc,UAAU;AAC3B,qBAAW;AAAA,QACZ;AAAA,MAED,CAAC,CAAC;AAEF,uBAAiB,QAAQ;AACzB,YAAM,SAAS,EAAE,UAAU,CAAC,GAAG,SAAS,SAAS;AACjD,aAAO;AAAA,IACR,SAAS,GAAG;AACX,cAAQ,MAAM,2CAA2C,CAAC;AAC1D,aAAO;AAAA,QACN,SAAS,CAAC;AAAA,QACV,UAAU,CAAC;AAAA,UACV,MAAM,SAAS,mBAAmB,gDAAgD;AAAA,UAAG,MAAM,8BAA8B;AAAA,QAC1H,CAAC;AAAA,MACF;AAAA,IACD;AAAA,EACD;AAAA,EAEA,MAAM,WAAW,OAAmB,OAAqD;AACxF,QAAI;AACH,YAAM,mBAAmB,IAAI,gBAAgB;AAC7C,UAAI,WAAW;AAEf,YAAM,QAAQ,KAAK,mBAAmB,EAAE;AACxC,YAAM,UAAwB,CAAC;AAC/B,YAAM,QAAQ,IAAI,MAAM,cAAc,IAAI,OAAM,OAAM;AACrD,cAAM,UAAU,KAAK;AACrB,yBAAiB,IAAI,OAAO,wBAAwB,OAAK,KAAK,YAAY,OAAO,CAAC,KAAK,WAAW,IAAI;AAEtG,cAAM,SAAuC,MAAM,KAAK,mBAAmB,UAAU,GAAG,MAAM;AAC9F,YAAI,CAAC,UAAU,CAAC,oBAAoB,4BAA4B,MAAM,GAAG;AACxE,kBAAQ,MAAM,uCAAuC,EAAE;AACvD;AAAA,QACD;AACA,cAAM,gBAAgB,KAAK,mBAAmB,OAAO,iBAAiB,GAAG,MAAM;AAC/E,cAAM,gBAAgB,MAAM,MAAM,eAAe,QAAQ,OAAO,IAAI,eAAe,OAAO;AAC1F,mBAAW,gBAAgB,cAAc,SAAS;AACjD,kBAAQ,KAAK,EAAE,UAAU,IAAI,SAAS,GAAG,QAAQ,YAAY,EAAE,CAAC;AAAA,QACjE;AACA,YAAI,cAAc,UAAU;AAAE,qBAAW;AAAA,QAAM;AAAA,MAChD,CAAC,CAAC;AAEF,uBAAiB,QAAQ;AAEzB,YAAM,SAAS,EAAE,UAAU,CAAC,GAAG,SAAS,SAAS;AACjD,aAAO;AAAA,IACR,SAAS,GAAG;AACX,cAAQ,MAAM,2CAA2C,CAAC;AAC1D,aAAO;AAAA,QACN,SAAS,CAAC;AAAA,QACV,UAAU,CAAC;AAAA,UACV,MAAM,SAAS,mBAAmB,gDAAgD;AAAA,UAAG,MAAM,8BAA8B;AAAA,QAC1H,CAAC;AAAA,MACF;AAAA,IACD;AAAA,EACD;AAAA,EAEA,MAAM,WAAW,UAAiC;AACjD,QAAI,KAAK,OAAO,QAAQ,UAAU;AAAE,WAAK,QAAQ;AAAA,IAAW;AAAA,EAC7D;AAAA,EAEQ,qBAAkE;AACzE,QAAI,CAAC,KAAK,SAAS;AAClB,UAAI;AACH,aAAK,UAAU,KAAK,UAAU;AAAA,UAC7B;AAAA,UACA;AAAA,QACD,CAAC;AACD,wCAAgC,WAAW,KAAK,SAAS;AAAA,UACxD,sBAAsB,wBAAC,OAAO,YAAY;AACzC,mBAAO,KAAK,oBAAoB,OAAO,OAAO;AAAA,UAC/C,GAFsB;AAAA,QAGvB,CAAC;AAAA,MACF,SAAS,KAAK;AACb,gCAAwB,GAAG;AAC3B,cAAM;AAAA,MACP;AAAA,IACD;AACA,WAAO,KAAK;AAAA,EACb;AACD;AAjIa;AAAA,EADX;AAAA,GAvBW,4BAwBA;AAxBA,8BAAN;AAAA,EAYJ;AAAA,EACA;AAAA,GAbU;AA2Jb,kBAAkB,gBAAgB,qBAAqB,kBAAkB,OAAO;",
  "names": ["result"]
}
