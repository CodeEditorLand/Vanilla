{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/search/browser/searchService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { createWebWorker } from \"../../../../base/browser/defaultWorkerFactory.js\";\nimport type { CancellationToken } from \"../../../../base/common/cancellation.js\";\nimport { memoize } from \"../../../../base/common/decorators.js\";\nimport { Emitter, type Event } from \"../../../../base/common/event.js\";\nimport {\n\tDisposable,\n\tDisposableStore,\n} from \"../../../../base/common/lifecycle.js\";\nimport { revive } from \"../../../../base/common/marshalling.js\";\nimport { Schemas } from \"../../../../base/common/network.js\";\nimport { URI, type UriComponents } from \"../../../../base/common/uri.js\";\nimport {\n\ttype IWorkerClient,\n\tlogOnceWebWorkerWarning,\n} from \"../../../../base/common/worker/simpleWorker.js\";\nimport { IModelService } from \"../../../../editor/common/services/model.js\";\nimport { localize } from \"../../../../nls.js\";\nimport type { HTMLFileSystemProvider } from \"../../../../platform/files/browser/htmlFileSystemProvider.js\";\nimport { WebFileSystemAccess } from \"../../../../platform/files/browser/webFileSystemAccess.js\";\nimport { IFileService } from \"../../../../platform/files/common/files.js\";\nimport {\n\tInstantiationType,\n\tregisterSingleton,\n} from \"../../../../platform/instantiation/common/extensions.js\";\nimport { IInstantiationService } from \"../../../../platform/instantiation/common/instantiation.js\";\nimport { ILogService } from \"../../../../platform/log/common/log.js\";\nimport { ITelemetryService } from \"../../../../platform/telemetry/common/telemetry.js\";\nimport { IUriIdentityService } from \"../../../../platform/uriIdentity/common/uriIdentity.js\";\nimport { IEditorService } from \"../../editor/common/editorService.js\";\nimport { IExtensionService } from \"../../extensions/common/extensions.js\";\nimport {\n\ttype ILocalFileSearchSimpleWorker,\n\tLocalFileSearchSimpleWorkerHost,\n} from \"../common/localFileSearchWorkerTypes.js\";\nimport {\n\ttype IFileMatch,\n\ttype IFileQuery,\n\ttype ISearchComplete,\n\ttype ISearchProgressItem,\n\ttype ISearchResultProvider,\n\tISearchService,\n\ttype ITextQuery,\n\tSearchProviderType,\n\tTextSearchCompleteMessageType,\n} from \"../common/search.js\";\nimport { SearchService } from \"../common/searchService.js\";\n\nexport class RemoteSearchService extends SearchService {\n\tconstructor(\n\t\t@IModelService modelService: IModelService,\n\t\t@IEditorService editorService: IEditorService,\n\t\t@ITelemetryService telemetryService: ITelemetryService,\n\t\t@ILogService logService: ILogService,\n\t\t@IExtensionService extensionService: IExtensionService,\n\t\t@IFileService fileService: IFileService,\n\t\t@IInstantiationService private readonly instantiationService: IInstantiationService,\n\t\t@IUriIdentityService uriIdentityService: IUriIdentityService,\n\t) {\n\t\tsuper(modelService, editorService, telemetryService, logService, extensionService, fileService, uriIdentityService);\n\t\tconst searchProvider = this.instantiationService.createInstance(LocalFileSearchWorkerClient);\n\t\tthis.registerSearchResultProvider(Schemas.file, SearchProviderType.file, searchProvider);\n\t\tthis.registerSearchResultProvider(Schemas.file, SearchProviderType.text, searchProvider);\n\t}\n}\n\nexport class LocalFileSearchWorkerClient\n\textends Disposable\n\timplements ISearchResultProvider\n{\n\tprotected _worker: IWorkerClient<ILocalFileSearchSimpleWorker> | null;\n\n\tprivate readonly _onDidReceiveTextSearchMatch = new Emitter<{\n\t\tmatch: IFileMatch<UriComponents>;\n\t\tqueryId: number;\n\t}>();\n\treadonly onDidReceiveTextSearchMatch: Event<{\n\t\tmatch: IFileMatch<UriComponents>;\n\t\tqueryId: number;\n\t}> = this._onDidReceiveTextSearchMatch.event;\n\n\tprivate cache: { key: string; cache: ISearchComplete } | undefined;\n\n\tprivate queryId = 0;\n\n\tconstructor(\n\t\t@IFileService private fileService: IFileService,\n\t\t@IUriIdentityService private uriIdentityService: IUriIdentityService,\n\t) {\n\t\tsuper();\n\t\tthis._worker = null;\n\t}\n\n\tsendTextSearchMatch(\n\t\tmatch: IFileMatch<UriComponents>,\n\t\tqueryId: number,\n\t): void {\n\t\tthis._onDidReceiveTextSearchMatch.fire({ match, queryId });\n\t}\n\n\t@memoize\n\tprivate get fileSystemProvider(): HTMLFileSystemProvider {\n\t\treturn this.fileService.getProvider(\n\t\t\tSchemas.file,\n\t\t) as HTMLFileSystemProvider;\n\t}\n\n\tprivate async cancelQuery(queryId: number) {\n\t\tconst proxy = this._getOrCreateWorker().proxy;\n\t\tproxy.$cancelQuery(queryId);\n\t}\n\n\tasync textSearch(\n\t\tquery: ITextQuery,\n\t\tonProgress?: (p: ISearchProgressItem) => void,\n\t\ttoken?: CancellationToken,\n\t): Promise<ISearchComplete> {\n\t\ttry {\n\t\t\tconst queryDisposables = new DisposableStore();\n\n\t\t\tconst proxy = this._getOrCreateWorker().proxy;\n\t\t\tconst results: IFileMatch[] = [];\n\n\t\t\tlet limitHit = false;\n\n\t\t\tawait Promise.all(\n\t\t\t\tquery.folderQueries.map(async (fq) => {\n\t\t\t\t\tconst queryId = this.queryId++;\n\t\t\t\t\tqueryDisposables.add(\n\t\t\t\t\t\ttoken?.onCancellationRequested((e) =>\n\t\t\t\t\t\t\tthis.cancelQuery(queryId),\n\t\t\t\t\t\t) || Disposable.None,\n\t\t\t\t\t);\n\n\t\t\t\t\tconst handle: FileSystemHandle | undefined =\n\t\t\t\t\t\tawait this.fileSystemProvider.getHandle(fq.folder);\n\t\t\t\t\tif (\n\t\t\t\t\t\t!handle ||\n\t\t\t\t\t\t!WebFileSystemAccess.isFileSystemDirectoryHandle(handle)\n\t\t\t\t\t) {\n\t\t\t\t\t\tconsole.error(\n\t\t\t\t\t\t\t\"Could not get directory handle for \",\n\t\t\t\t\t\t\tfq,\n\t\t\t\t\t\t);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\t// force resource to revive using URI.revive.\n\t\t\t\t\t// TODO @andrea see why we can't just use `revive()` below. For some reason, (<MarshalledObject>obj).$mid was undefined for result.resource\n\t\t\t\t\tconst reviveMatch = (\n\t\t\t\t\t\tresult: IFileMatch<UriComponents>,\n\t\t\t\t\t): IFileMatch => ({\n\t\t\t\t\t\tresource: URI.revive(result.resource),\n\t\t\t\t\t\tresults: revive(result.results),\n\t\t\t\t\t});\n\n\t\t\t\t\tqueryDisposables.add(\n\t\t\t\t\t\tthis.onDidReceiveTextSearchMatch((e) => {\n\t\t\t\t\t\t\tif (e.queryId === queryId) {\n\t\t\t\t\t\t\t\tonProgress?.(reviveMatch(e.match));\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}),\n\t\t\t\t\t);\n\n\t\t\t\t\tconst ignorePathCasing =\n\t\t\t\t\t\tthis.uriIdentityService.extUri.ignorePathCasing(\n\t\t\t\t\t\t\tfq.folder,\n\t\t\t\t\t\t);\n\t\t\t\t\tconst folderResults = await proxy.$searchDirectory(\n\t\t\t\t\t\thandle,\n\t\t\t\t\t\tquery,\n\t\t\t\t\t\tfq,\n\t\t\t\t\t\tignorePathCasing,\n\t\t\t\t\t\tqueryId,\n\t\t\t\t\t);\n\t\t\t\t\tfor (const folderResult of folderResults.results) {\n\t\t\t\t\t\tresults.push(revive(folderResult));\n\t\t\t\t\t}\n\n\t\t\t\t\tif (folderResults.limitHit) {\n\t\t\t\t\t\tlimitHit = true;\n\t\t\t\t\t}\n\t\t\t\t}),\n\t\t\t);\n\n\t\t\tqueryDisposables.dispose();\n\t\t\tconst result = { messages: [], results, limitHit };\n\t\t\treturn result;\n\t\t} catch (e) {\n\t\t\tconsole.error(\"Error performing web worker text search\", e);\n\t\t\treturn {\n\t\t\t\tresults: [],\n\t\t\t\tmessages: [\n\t\t\t\t\t{\n\t\t\t\t\t\ttext: localize(\n\t\t\t\t\t\t\t\"errorSearchText\",\n\t\t\t\t\t\t\t\"Unable to search with Web Worker text searcher\",\n\t\t\t\t\t\t),\n\t\t\t\t\t\ttype: TextSearchCompleteMessageType.Warning,\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t};\n\t\t}\n\t}\n\n\tasync fileSearch(\n\t\tquery: IFileQuery,\n\t\ttoken?: CancellationToken,\n\t): Promise<ISearchComplete> {\n\t\ttry {\n\t\t\tconst queryDisposables = new DisposableStore();\n\t\t\tlet limitHit = false;\n\n\t\t\tconst proxy = this._getOrCreateWorker().proxy;\n\t\t\tconst results: IFileMatch[] = [];\n\t\t\tawait Promise.all(\n\t\t\t\tquery.folderQueries.map(async (fq) => {\n\t\t\t\t\tconst queryId = this.queryId++;\n\t\t\t\t\tqueryDisposables.add(\n\t\t\t\t\t\ttoken?.onCancellationRequested((e) =>\n\t\t\t\t\t\t\tthis.cancelQuery(queryId),\n\t\t\t\t\t\t) || Disposable.None,\n\t\t\t\t\t);\n\n\t\t\t\t\tconst handle: FileSystemHandle | undefined =\n\t\t\t\t\t\tawait this.fileSystemProvider.getHandle(fq.folder);\n\t\t\t\t\tif (\n\t\t\t\t\t\t!handle ||\n\t\t\t\t\t\t!WebFileSystemAccess.isFileSystemDirectoryHandle(handle)\n\t\t\t\t\t) {\n\t\t\t\t\t\tconsole.error(\n\t\t\t\t\t\t\t\"Could not get directory handle for \",\n\t\t\t\t\t\t\tfq,\n\t\t\t\t\t\t);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\tconst caseSensitive =\n\t\t\t\t\t\tthis.uriIdentityService.extUri.ignorePathCasing(\n\t\t\t\t\t\t\tfq.folder,\n\t\t\t\t\t\t);\n\t\t\t\t\tconst folderResults = await proxy.$listDirectory(\n\t\t\t\t\t\thandle,\n\t\t\t\t\t\tquery,\n\t\t\t\t\t\tfq,\n\t\t\t\t\t\tcaseSensitive,\n\t\t\t\t\t\tqueryId,\n\t\t\t\t\t);\n\t\t\t\t\tfor (const folderResult of folderResults.results) {\n\t\t\t\t\t\tresults.push({\n\t\t\t\t\t\t\tresource: URI.joinPath(fq.folder, folderResult),\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t\tif (folderResults.limitHit) {\n\t\t\t\t\t\tlimitHit = true;\n\t\t\t\t\t}\n\t\t\t\t}),\n\t\t\t);\n\n\t\t\tqueryDisposables.dispose();\n\n\t\t\tconst result = { messages: [], results, limitHit };\n\t\t\treturn result;\n\t\t} catch (e) {\n\t\t\tconsole.error(\"Error performing web worker file search\", e);\n\t\t\treturn {\n\t\t\t\tresults: [],\n\t\t\t\tmessages: [\n\t\t\t\t\t{\n\t\t\t\t\t\ttext: localize(\n\t\t\t\t\t\t\t\"errorSearchFile\",\n\t\t\t\t\t\t\t\"Unable to search with Web Worker file searcher\",\n\t\t\t\t\t\t),\n\t\t\t\t\t\ttype: TextSearchCompleteMessageType.Warning,\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t};\n\t\t}\n\t}\n\n\tasync clearCache(cacheKey: string): Promise<void> {\n\t\tif (this.cache?.key === cacheKey) {\n\t\t\tthis.cache = undefined;\n\t\t}\n\t}\n\n\tprivate _getOrCreateWorker(): IWorkerClient<ILocalFileSearchSimpleWorker> {\n\t\tif (!this._worker) {\n\t\t\ttry {\n\t\t\t\tthis._worker = this._register(\n\t\t\t\t\tcreateWebWorker<ILocalFileSearchSimpleWorker>(\n\t\t\t\t\t\t\"vs/workbench/services/search/worker/localFileSearch\",\n\t\t\t\t\t\t\"LocalFileSearchWorker\",\n\t\t\t\t\t),\n\t\t\t\t);\n\t\t\t\tLocalFileSearchSimpleWorkerHost.setChannel(this._worker, {\n\t\t\t\t\t$sendTextSearchMatch: (match, queryId) => {\n\t\t\t\t\t\treturn this.sendTextSearchMatch(match, queryId);\n\t\t\t\t\t},\n\t\t\t\t});\n\t\t\t} catch (err) {\n\t\t\t\tlogOnceWebWorkerWarning(err);\n\t\t\t\tthrow err;\n\t\t\t}\n\t\t}\n\t\treturn this._worker;\n\t}\n}\n\nregisterSingleton(\n\tISearchService,\n\tRemoteSearchService,\n\tInstantiationType.Delayed,\n);\n"],
  "mappings": "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",
  "names": ["result"]
}
