{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/search/test/common/queryBuilder.test.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport assert from 'assert';\nimport { isWindows } from '../../../../../base/common/platform.js';\nimport { URI } from '../../../../../base/common/uri.js';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from '../../../../../base/test/common/utils.js';\nimport { IWorkspaceContextService } from '../../../../../platform/workspace/common/workspace.js';\nimport { testWorkspace } from '../../../../../platform/workspace/test/common/testWorkspace.js';\nimport { resolveResourcesForSearchIncludes } from '../../common/queryBuilder.js';\nimport { TestContextService } from '../../../../test/common/workbenchTestServices.js';\n\nsuite('QueryBuilderCommon', () => {\n\tensureNoDisposablesAreLeakedInTestSuite();\n\tlet context: IWorkspaceContextService;\n\n\tsetup(() => {\n\t\tconst workspace = testWorkspace(URI.file(isWindows ? 'C:\\\\testWorkspace' : '/testWorkspace'));\n\t\tcontext = new TestContextService(workspace);\n\t});\n\n\ttest('resolveResourcesForSearchIncludes passes through paths without special glob characters', () => {\n\t\tconst actual = resolveResourcesForSearchIncludes([URI.file(isWindows ? \"C:\\\\testWorkspace\\\\pages\\\\blog\" : \"/testWorkspace/pages/blog\")], context);\n\t\tassert.deepStrictEqual(actual, [\"./pages/blog\"]);\n\t});\n\n\ttest('resolveResourcesForSearchIncludes escapes paths with special characters', () => {\n\t\tconst actual = resolveResourcesForSearchIncludes([URI.file(isWindows ? \"C:\\\\testWorkspace\\\\pages\\\\blog\\\\[postId]\" : \"/testWorkspace/pages/blog/[postId]\")], context);\n\t\tassert.deepStrictEqual(actual, [\"./pages/blog/[[]postId[]]\"]);\n\t});\n});\n"],
  "mappings": "AAIA,OAAO,YAAY;AACnB,SAAS,iBAAiB;AAC1B,SAAS,WAAW;AACpB,SAAS,+CAA+C;AACxD,SAAS,gCAAgC;AACzC,SAAS,qBAAqB;AAC9B,SAAS,yCAAyC;AAClD,SAAS,0BAA0B;AAEnC,MAAM,sBAAsB,MAAM;AACjC,0CAAwC;AACxC,MAAI;AAEJ,QAAM,MAAM;AACX,UAAM,YAAY,cAAc,IAAI,KAAK,YAAY,sBAAsB,gBAAgB,CAAC;AAC5F,cAAU,IAAI,mBAAmB,SAAS;AAAA,EAC3C,CAAC;AAED,OAAK,0FAA0F,MAAM;AACpG,UAAM,SAAS,kCAAkC,CAAC,IAAI,KAAK,YAAY,mCAAmC,2BAA2B,CAAC,GAAG,OAAO;AAChJ,WAAO,gBAAgB,QAAQ,CAAC,cAAc,CAAC;AAAA,EAChD,CAAC;AAED,OAAK,2EAA2E,MAAM;AACrF,UAAM,SAAS,kCAAkC,CAAC,IAAI,KAAK,YAAY,6CAA6C,oCAAoC,CAAC,GAAG,OAAO;AACnK,WAAO,gBAAgB,QAAQ,CAAC,2BAA2B,CAAC;AAAA,EAC7D,CAAC;AACF,CAAC;",
  "names": []
}
