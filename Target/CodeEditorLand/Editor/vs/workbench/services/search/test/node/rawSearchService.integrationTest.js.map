{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/search/test/node/rawSearchService.integrationTest.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport assert from 'assert';\nimport { CancelablePromise, createCancelablePromise } from '../../../../../base/common/async.js';\nimport { Emitter, Event } from '../../../../../base/common/event.js';\nimport { IDisposable } from '../../../../../base/common/lifecycle.js';\nimport { FileAccess } from '../../../../../base/common/network.js';\nimport * as path from '../../../../../base/common/path.js';\nimport { URI } from '../../../../../base/common/uri.js';\nimport { flakySuite } from '../../../../../base/test/node/testUtils.js';\nimport { IFileQuery, IFileSearchStats, IFolderQuery, IProgressMessage, IRawFileMatch, ISearchEngine, ISearchEngineStats, ISearchEngineSuccess, ISerializedFileMatch, ISerializedSearchComplete, ISerializedSearchProgressItem, ISerializedSearchSuccess, isSerializedSearchComplete, isSerializedSearchSuccess, QueryType } from '../../common/search.js';\nimport { IProgressCallback, SearchService as RawSearchService } from '../../node/rawSearchService.js';\n\nconst TEST_FOLDER_QUERIES = [\n\t{ folder: URI.file(path.normalize('/some/where')) }\n];\n\nconst TEST_FIXTURES = path.normalize(FileAccess.asFileUri('vs/workbench/services/search/test/node/fixtures').fsPath);\nconst MULTIROOT_QUERIES: IFolderQuery[] = [\n\t{ folder: URI.file(path.join(TEST_FIXTURES, 'examples')) },\n\t{ folder: URI.file(path.join(TEST_FIXTURES, 'more')) }\n];\n\nconst stats: ISearchEngineStats = {\n\tfileWalkTime: 0,\n\tcmdTime: 1,\n\tdirectoriesWalked: 2,\n\tfilesWalked: 3\n};\n\nclass TestSearchEngine implements ISearchEngine<IRawFileMatch> {\n\n\tstatic last: TestSearchEngine;\n\n\tprivate isCanceled = false;\n\n\tconstructor(private result: () => IRawFileMatch | null, public config?: IFileQuery) {\n\t\tTestSearchEngine.last = this;\n\t}\n\n\tsearch(onResult: (match: IRawFileMatch) => void, onProgress: (progress: IProgressMessage) => void, done: (error: Error, complete: ISearchEngineSuccess) => void): void {\n\t\tconst self = this;\n\t\t(function next() {\n\t\t\tprocess.nextTick(() => {\n\t\t\t\tif (self.isCanceled) {\n\t\t\t\t\tdone(null!, {\n\t\t\t\t\t\tlimitHit: false,\n\t\t\t\t\t\tstats: stats,\n\t\t\t\t\t\tmessages: [],\n\t\t\t\t\t});\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tconst result = self.result();\n\t\t\t\tif (!result) {\n\t\t\t\t\tdone(null!, {\n\t\t\t\t\t\tlimitHit: false,\n\t\t\t\t\t\tstats: stats,\n\t\t\t\t\t\tmessages: [],\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\tonResult(result);\n\t\t\t\t\tnext();\n\t\t\t\t}\n\t\t\t});\n\t\t})();\n\t}\n\n\tcancel(): void {\n\t\tthis.isCanceled = true;\n\t}\n}\n\nflakySuite('RawSearchService', () => {\n\n\tconst rawSearch: IFileQuery = {\n\t\ttype: QueryType.File,\n\t\tfolderQueries: TEST_FOLDER_QUERIES,\n\t\tfilePattern: 'a'\n\t};\n\n\tconst rawMatch: IRawFileMatch = {\n\t\tbase: path.normalize('/some'),\n\t\trelativePath: 'where',\n\t\tsearchPath: undefined\n\t};\n\n\tconst match: ISerializedFileMatch = {\n\t\tpath: path.normalize('/some/where')\n\t};\n\n\ttest('Individual results', async function () {\n\t\tlet i = 5;\n\t\tconst Engine = TestSearchEngine.bind(null, () => i-- ? rawMatch : null);\n\t\tconst service = new RawSearchService();\n\n\t\tlet results = 0;\n\t\tconst cb: (p: ISerializedSearchProgressItem) => void = value => {\n\t\t\tif (!!(<IProgressMessage>value).message) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (!Array.isArray(value)) {\n\t\t\t\tassert.deepStrictEqual(value, match);\n\t\t\t\tresults++;\n\t\t\t} else {\n\t\t\t\tassert.fail(JSON.stringify(value));\n\t\t\t}\n\t\t};\n\n\t\tawait service.doFileSearchWithEngine(Engine, rawSearch, cb, null!, 0);\n\t\treturn assert.strictEqual(results, 5);\n\t});\n\n\ttest('Batch results', async function () {\n\t\tlet i = 25;\n\t\tconst Engine = TestSearchEngine.bind(null, () => i-- ? rawMatch : null);\n\t\tconst service = new RawSearchService();\n\n\t\tconst results: number[] = [];\n\t\tconst cb: (p: ISerializedSearchProgressItem) => void = value => {\n\t\t\tif (!!(<IProgressMessage>value).message) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (Array.isArray(value)) {\n\t\t\t\tvalue.forEach(m => {\n\t\t\t\t\tassert.deepStrictEqual(m, match);\n\t\t\t\t});\n\t\t\t\tresults.push(value.length);\n\t\t\t} else {\n\t\t\t\tassert.fail(JSON.stringify(value));\n\t\t\t}\n\t\t};\n\n\t\tawait service.doFileSearchWithEngine(Engine, rawSearch, cb, undefined, 10);\n\t\tassert.deepStrictEqual(results, [10, 10, 5]);\n\t});\n\n\ttest('Collect batched results', async function () {\n\t\tconst uriPath = '/some/where';\n\t\tlet i = 25;\n\t\tconst Engine = TestSearchEngine.bind(null, () => i-- ? rawMatch : null);\n\t\tconst service = new RawSearchService();\n\n\t\tfunction fileSearch(config: IFileQuery, batchSize: number): Event<ISerializedSearchProgressItem | ISerializedSearchComplete> {\n\t\t\tlet promise: CancelablePromise<ISerializedSearchSuccess | void>;\n\n\t\t\tconst emitter = new Emitter<ISerializedSearchProgressItem | ISerializedSearchComplete>({\n\t\t\t\tonWillAddFirstListener: () => {\n\t\t\t\t\tpromise = createCancelablePromise(token => service.doFileSearchWithEngine(Engine, config, p => emitter.fire(p), token, batchSize)\n\t\t\t\t\t\t.then(c => emitter.fire(c), err => emitter.fire({ type: 'error', error: err })));\n\t\t\t\t},\n\t\t\t\tonDidRemoveLastListener: () => {\n\t\t\t\t\tpromise.cancel();\n\t\t\t\t}\n\t\t\t});\n\n\t\t\treturn emitter.event;\n\t\t}\n\n\t\tconst result = await collectResultsFromEvent(fileSearch(rawSearch, 10));\n\t\tresult.files.forEach(f => {\n\t\t\tassert.strictEqual(f.path.replace(/\\\\/g, '/'), uriPath);\n\t\t});\n\t\tassert.strictEqual(result.files.length, 25, 'Result');\n\t});\n\n\ttest('Multi-root with include pattern and maxResults', async function () {\n\t\tconst service = new RawSearchService();\n\n\t\tconst query: IFileQuery = {\n\t\t\ttype: QueryType.File,\n\t\t\tfolderQueries: MULTIROOT_QUERIES,\n\t\t\tmaxResults: 1,\n\t\t\tincludePattern: {\n\t\t\t\t'*.txt': true,\n\t\t\t\t'*.js': true\n\t\t\t},\n\t\t};\n\n\t\tconst result = await collectResultsFromEvent(service.fileSearch(query));\n\t\tassert.strictEqual(result.files.length, 1, 'Result');\n\t});\n\n\ttest('Handles maxResults=0 correctly', async function () {\n\t\tconst service = new RawSearchService();\n\n\t\tconst query: IFileQuery = {\n\t\t\ttype: QueryType.File,\n\t\t\tfolderQueries: MULTIROOT_QUERIES,\n\t\t\tmaxResults: 0,\n\t\t\tsortByScore: true,\n\t\t\tincludePattern: {\n\t\t\t\t'*.txt': true,\n\t\t\t\t'*.js': true\n\t\t\t},\n\t\t};\n\n\t\tconst result = await collectResultsFromEvent(service.fileSearch(query));\n\t\tassert.strictEqual(result.files.length, 0, 'Result');\n\t});\n\n\ttest('Multi-root with include pattern and exists', async function () {\n\t\tconst service = new RawSearchService();\n\n\t\tconst query: IFileQuery = {\n\t\t\ttype: QueryType.File,\n\t\t\tfolderQueries: MULTIROOT_QUERIES,\n\t\t\texists: true,\n\t\t\tincludePattern: {\n\t\t\t\t'*.txt': true,\n\t\t\t\t'*.js': true\n\t\t\t},\n\t\t};\n\n\t\tconst result = await collectResultsFromEvent(service.fileSearch(query));\n\t\tassert.strictEqual(result.files.length, 0, 'Result');\n\t\tassert.ok(result.limitHit);\n\t});\n\n\ttest('Sorted results', async function () {\n\t\tconst paths = ['bab', 'bbc', 'abb'];\n\t\tconst matches: IRawFileMatch[] = paths.map(relativePath => ({\n\t\t\tbase: path.normalize('/some/where'),\n\t\t\trelativePath,\n\t\t\tbasename: relativePath,\n\t\t\tsize: 3,\n\t\t\tsearchPath: undefined\n\t\t}));\n\t\tconst Engine = TestSearchEngine.bind(null, () => matches.shift()!);\n\t\tconst service = new RawSearchService();\n\n\t\tconst results: any[] = [];\n\t\tconst cb: IProgressCallback = value => {\n\t\t\tif (!!(<IProgressMessage>value).message) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (Array.isArray(value)) {\n\t\t\t\tresults.push(...value.map(v => v.path));\n\t\t\t} else {\n\t\t\t\tassert.fail(JSON.stringify(value));\n\t\t\t}\n\t\t};\n\n\t\tawait service.doFileSearchWithEngine(Engine, {\n\t\t\ttype: QueryType.File,\n\t\t\tfolderQueries: TEST_FOLDER_QUERIES,\n\t\t\tfilePattern: 'bb',\n\t\t\tsortByScore: true,\n\t\t\tmaxResults: 2\n\t\t}, cb, undefined, 1);\n\t\tassert.notStrictEqual(typeof TestSearchEngine.last.config!.maxResults, 'number');\n\t\tassert.deepStrictEqual(results, [path.normalize('/some/where/bbc'), path.normalize('/some/where/bab')]);\n\t});\n\n\ttest('Sorted result batches', async function () {\n\t\tlet i = 25;\n\t\tconst Engine = TestSearchEngine.bind(null, () => i-- ? rawMatch : null);\n\t\tconst service = new RawSearchService();\n\n\t\tconst results: number[] = [];\n\t\tconst cb: IProgressCallback = value => {\n\t\t\tif (!!(<IProgressMessage>value).message) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (Array.isArray(value)) {\n\t\t\t\tvalue.forEach(m => {\n\t\t\t\t\tassert.deepStrictEqual(m, match);\n\t\t\t\t});\n\t\t\t\tresults.push(value.length);\n\t\t\t} else {\n\t\t\t\tassert.fail(JSON.stringify(value));\n\t\t\t}\n\t\t};\n\t\tawait service.doFileSearchWithEngine(Engine, {\n\t\t\ttype: QueryType.File,\n\t\t\tfolderQueries: TEST_FOLDER_QUERIES,\n\t\t\tfilePattern: 'a',\n\t\t\tsortByScore: true,\n\t\t\tmaxResults: 23\n\t\t}, cb, undefined, 10);\n\t\tassert.deepStrictEqual(results, [10, 10, 3]);\n\t});\n\n\ttest('Cached results', function () {\n\t\tconst paths = ['bcb', 'bbc', 'aab'];\n\t\tconst matches: IRawFileMatch[] = paths.map(relativePath => ({\n\t\t\tbase: path.normalize('/some/where'),\n\t\t\trelativePath,\n\t\t\tbasename: relativePath,\n\t\t\tsize: 3,\n\t\t\tsearchPath: undefined\n\t\t}));\n\t\tconst Engine = TestSearchEngine.bind(null, () => matches.shift()!);\n\t\tconst service = new RawSearchService();\n\n\t\tconst results: any[] = [];\n\t\tconst cb: IProgressCallback = value => {\n\t\t\tif (!!(<IProgressMessage>value).message) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (Array.isArray(value)) {\n\t\t\t\tresults.push(...value.map(v => v.path));\n\t\t\t} else {\n\t\t\t\tassert.fail(JSON.stringify(value));\n\t\t\t}\n\t\t};\n\t\treturn service.doFileSearchWithEngine(Engine, {\n\t\t\ttype: QueryType.File,\n\t\t\tfolderQueries: TEST_FOLDER_QUERIES,\n\t\t\tfilePattern: 'b',\n\t\t\tsortByScore: true,\n\t\t\tcacheKey: 'x'\n\t\t}, cb, undefined, -1).then(complete => {\n\t\t\tassert.strictEqual((<IFileSearchStats>complete.stats).fromCache, false);\n\t\t\tassert.deepStrictEqual(results, [path.normalize('/some/where/bcb'), path.normalize('/some/where/bbc'), path.normalize('/some/where/aab')]);\n\t\t}).then(async () => {\n\t\t\tconst results: any[] = [];\n\t\t\tconst cb: IProgressCallback = value => {\n\t\t\t\tif (Array.isArray(value)) {\n\t\t\t\t\tresults.push(...value.map(v => v.path));\n\t\t\t\t} else {\n\t\t\t\t\tassert.fail(JSON.stringify(value));\n\t\t\t\t}\n\t\t\t};\n\t\t\ttry {\n\t\t\t\tconst complete = await service.doFileSearchWithEngine(Engine, {\n\t\t\t\t\ttype: QueryType.File,\n\t\t\t\t\tfolderQueries: TEST_FOLDER_QUERIES,\n\t\t\t\t\tfilePattern: 'bc',\n\t\t\t\t\tsortByScore: true,\n\t\t\t\t\tcacheKey: 'x'\n\t\t\t\t}, cb, undefined, -1);\n\t\t\t\tassert.ok((<IFileSearchStats>complete.stats).fromCache);\n\t\t\t\tassert.deepStrictEqual(results, [path.normalize('/some/where/bcb'), path.normalize('/some/where/bbc')]);\n\t\t\t}\n\t\t\tcatch (e) { }\n\t\t}).then(() => {\n\t\t\treturn service.clearCache('x');\n\t\t}).then(async () => {\n\t\t\tmatches.push({\n\t\t\t\tbase: path.normalize('/some/where'),\n\t\t\t\trelativePath: 'bc',\n\t\t\t\tsearchPath: undefined\n\t\t\t});\n\t\t\tconst results: any[] = [];\n\t\t\tconst cb: IProgressCallback = value => {\n\t\t\t\tif (!!(<IProgressMessage>value).message) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tif (Array.isArray(value)) {\n\t\t\t\t\tresults.push(...value.map(v => v.path));\n\t\t\t\t} else {\n\t\t\t\t\tassert.fail(JSON.stringify(value));\n\t\t\t\t}\n\t\t\t};\n\t\t\tconst complete = await service.doFileSearchWithEngine(Engine, {\n\t\t\t\ttype: QueryType.File,\n\t\t\t\tfolderQueries: TEST_FOLDER_QUERIES,\n\t\t\t\tfilePattern: 'bc',\n\t\t\t\tsortByScore: true,\n\t\t\t\tcacheKey: 'x'\n\t\t\t}, cb, undefined, -1);\n\t\t\tassert.strictEqual((<IFileSearchStats>complete.stats).fromCache, false);\n\t\t\tassert.deepStrictEqual(results, [path.normalize('/some/where/bc')]);\n\t\t});\n\t});\n});\n\nfunction collectResultsFromEvent(event: Event<ISerializedSearchProgressItem | ISerializedSearchComplete>): Promise<{ files: ISerializedFileMatch[]; limitHit: boolean }> {\n\tconst files: ISerializedFileMatch[] = [];\n\n\tlet listener: IDisposable;\n\treturn new Promise((c, e) => {\n\t\tlistener = event(ev => {\n\t\t\tif (isSerializedSearchComplete(ev)) {\n\t\t\t\tif (isSerializedSearchSuccess(ev)) {\n\t\t\t\t\tc({ files, limitHit: ev.limitHit });\n\t\t\t\t} else {\n\t\t\t\t\te(ev.error);\n\t\t\t\t}\n\n\t\t\t\tlistener.dispose();\n\t\t\t} else if (Array.isArray(ev)) {\n\t\t\t\tfiles.push(...ev);\n\t\t\t} else if ((<ISerializedFileMatch>ev).path) {\n\t\t\t\tfiles.push(ev as ISerializedFileMatch);\n\t\t\t}\n\t\t});\n\t});\n}\n"],
  "mappings": "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",
  "names": ["results", "cb"]
}
