{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/search/test/common/replace.test.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport assert from 'assert';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from '../../../../../base/test/common/utils.js';\nimport { ReplacePattern } from '../../common/replace.js';\n\nsuite('Replace Pattern test', () => {\n\tensureNoDisposablesAreLeakedInTestSuite();\n\n\ttest('parse replace string', () => {\n\t\tconst testParse = (input: string, expected: string, expectedHasParameters: boolean) => {\n\t\t\tlet actual = new ReplacePattern(input, { pattern: 'somepattern', isRegExp: true });\n\t\t\tassert.strictEqual(expected, actual.pattern);\n\t\t\tassert.strictEqual(expectedHasParameters, actual.hasParameters);\n\n\t\t\tactual = new ReplacePattern('hello' + input + 'hi', { pattern: 'sonepattern', isRegExp: true });\n\t\t\tassert.strictEqual('hello' + expected + 'hi', actual.pattern);\n\t\t\tassert.strictEqual(expectedHasParameters, actual.hasParameters);\n\t\t};\n\n\t\t// no backslash => no treatment\n\t\ttestParse('hello', 'hello', false);\n\n\t\t// \\t => TAB\n\t\ttestParse('\\\\thello', '\\thello', false);\n\n\t\t// \\n => LF\n\t\ttestParse('\\\\nhello', '\\nhello', false);\n\n\t\t// \\\\t => \\t\n\t\ttestParse('\\\\\\\\thello', '\\\\thello', false);\n\n\t\t// \\\\\\t => \\TAB\n\t\ttestParse('\\\\\\\\\\\\thello', '\\\\\\thello', false);\n\n\t\t// \\\\\\\\t => \\\\t\n\t\ttestParse('\\\\\\\\\\\\\\\\thello', '\\\\\\\\thello', false);\n\n\t\t// \\ at the end => no treatment\n\t\ttestParse('hello\\\\', 'hello\\\\', false);\n\n\t\t// \\ with unknown char => no treatment\n\t\ttestParse('hello\\\\x', 'hello\\\\x', false);\n\n\t\t// \\ with back reference => no treatment\n\t\ttestParse('hello\\\\0', 'hello\\\\0', false);\n\n\n\n\t\t// $1 => no treatment\n\t\ttestParse('hello$1', 'hello$1', true);\n\t\t// $2 => no treatment\n\t\ttestParse('hello$2', 'hello$2', true);\n\t\t// $12 => no treatment\n\t\ttestParse('hello$12', 'hello$12', true);\n\t\t// $99 => no treatment\n\t\ttestParse('hello$99', 'hello$99', true);\n\t\t// $99a => no treatment\n\t\ttestParse('hello$99a', 'hello$99a', true);\n\t\t// $100 => no treatment\n\t\ttestParse('hello$100', 'hello$100', false);\n\t\t// $100a => no treatment\n\t\ttestParse('hello$100a', 'hello$100a', false);\n\t\t// $10a0 => no treatment\n\t\ttestParse('hello$10a0', 'hello$10a0', true);\n\t\t// $$ => no treatment\n\t\ttestParse('hello$$', 'hello$$', false);\n\t\t// $$0 => no treatment\n\t\ttestParse('hello$$0', 'hello$$0', false);\n\n\t\t// $0 => $&\n\t\ttestParse('hello$0', 'hello$&', true);\n\t\ttestParse('hello$02', 'hello$&2', true);\n\n\t\ttestParse('hello$`', 'hello$`', true);\n\t\ttestParse('hello$\\'', 'hello$\\'', true);\n\t});\n\n\ttest('create pattern by passing regExp', () => {\n\t\tlet expected = /abc/;\n\t\tlet actual = new ReplacePattern('hello', false, expected).regExp;\n\t\tassert.deepStrictEqual(actual, expected);\n\n\t\texpected = /abc/;\n\t\tactual = new ReplacePattern('hello', false, /abc/g).regExp;\n\t\tassert.deepStrictEqual(actual, expected);\n\n\t\tlet testObject = new ReplacePattern('hello$0', false, /abc/g);\n\t\tassert.strictEqual(testObject.hasParameters, false);\n\n\t\ttestObject = new ReplacePattern('hello$0', true, /abc/g);\n\t\tassert.strictEqual(testObject.hasParameters, true);\n\t});\n\n\ttest('get replace string if given text is a complete match', () => {\n\t\tlet testObject = new ReplacePattern('hello', { pattern: 'bla', isRegExp: true });\n\t\tlet actual = testObject.getReplaceString('bla');\n\t\tassert.strictEqual(actual, 'hello');\n\n\t\ttestObject = new ReplacePattern('hello', { pattern: 'bla', isRegExp: false });\n\t\tactual = testObject.getReplaceString('bla');\n\t\tassert.strictEqual(actual, 'hello');\n\n\t\ttestObject = new ReplacePattern('hello', { pattern: '(bla)', isRegExp: true });\n\t\tactual = testObject.getReplaceString('bla');\n\t\tassert.strictEqual(actual, 'hello');\n\n\t\ttestObject = new ReplacePattern('hello$0', { pattern: '(bla)', isRegExp: true });\n\t\tactual = testObject.getReplaceString('bla');\n\t\tassert.strictEqual(actual, 'hellobla');\n\n\t\ttestObject = new ReplacePattern('import * as $1 from \\'$2\\';', { pattern: 'let\\\\s+(\\\\w+)\\\\s*=\\\\s*require\\\\s*\\\\(\\\\s*[\\'\\\"]([\\\\w.\\\\-/]+)\\\\s*[\\'\\\"]\\\\s*\\\\)\\\\s*', isRegExp: true });\n\t\tactual = testObject.getReplaceString('let fs = require(\\'fs\\')');\n\t\tassert.strictEqual(actual, 'import * as fs from \\'fs\\';');\n\n\t\tactual = testObject.getReplaceString('let something = require(\\'fs\\')');\n\t\tassert.strictEqual(actual, 'import * as something from \\'fs\\';');\n\n\t\tactual = testObject.getReplaceString('let require(\\'fs\\')');\n\t\tassert.strictEqual(actual, null);\n\n\t\ttestObject = new ReplacePattern('import * as $1 from \\'$1\\';', { pattern: 'let\\\\s+(\\\\w+)\\\\s*=\\\\s*require\\\\s*\\\\(\\\\s*[\\'\\\"]([\\\\w.\\\\-/]+)\\\\s*[\\'\\\"]\\\\s*\\\\)\\\\s*', isRegExp: true });\n\t\tactual = testObject.getReplaceString('let something = require(\\'fs\\')');\n\t\tassert.strictEqual(actual, 'import * as something from \\'something\\';');\n\n\t\ttestObject = new ReplacePattern('import * as $2 from \\'$1\\';', { pattern: 'let\\\\s+(\\\\w+)\\\\s*=\\\\s*require\\\\s*\\\\(\\\\s*[\\'\\\"]([\\\\w.\\\\-/]+)\\\\s*[\\'\\\"]\\\\s*\\\\)\\\\s*', isRegExp: true });\n\t\tactual = testObject.getReplaceString('let something = require(\\'fs\\')');\n\t\tassert.strictEqual(actual, 'import * as fs from \\'something\\';');\n\n\t\ttestObject = new ReplacePattern('import * as $0 from \\'$0\\';', { pattern: 'let\\\\s+(\\\\w+)\\\\s*=\\\\s*require\\\\s*\\\\(\\\\s*[\\'\\\"]([\\\\w.\\\\-/]+)\\\\s*[\\'\\\"]\\\\s*\\\\)\\\\s*', isRegExp: true });\n\t\tactual = testObject.getReplaceString('let something = require(\\'fs\\');');\n\t\tassert.strictEqual(actual, 'import * as let something = require(\\'fs\\') from \\'let something = require(\\'fs\\')\\';');\n\n\t\ttestObject = new ReplacePattern('import * as $1 from \\'$2\\';', { pattern: 'let\\\\s+(\\\\w+)\\\\s*=\\\\s*require\\\\s*\\\\(\\\\s*[\\'\\\"]([\\\\w.\\\\-/]+)\\\\s*[\\'\\\"]\\\\s*\\\\)\\\\s*', isRegExp: false });\n\t\tactual = testObject.getReplaceString('let fs = require(\\'fs\\');');\n\t\tassert.strictEqual(actual, null);\n\n\t\ttestObject = new ReplacePattern('cat$1', { pattern: 'for(.*)', isRegExp: true });\n\t\tactual = testObject.getReplaceString('for ()');\n\t\tassert.strictEqual(actual, 'cat ()');\n\t});\n\n\ttest('case operations', () => {\n\t\tconst testObject = new ReplacePattern('a\\\\u$1l\\\\u\\\\l\\\\U$2M$3n', { pattern: 'a(l)l(good)m(e)n', isRegExp: true });\n\t\tconst actual = testObject.getReplaceString('allgoodmen');\n\t\tassert.strictEqual(actual, 'aLlGoODMen');\n\t});\n\n\ttest('case operations - no false positive', () => {\n\t\tlet testObject = new ReplacePattern('\\\\left $1', { pattern: '(pattern)', isRegExp: true });\n\t\tlet actual = testObject.getReplaceString('pattern');\n\t\tassert.strictEqual(actual, '\\\\left pattern');\n\n\t\ttestObject = new ReplacePattern('\\\\hi \\\\left $1', { pattern: '(pattern)', isRegExp: true });\n\t\tactual = testObject.getReplaceString('pattern');\n\t\tassert.strictEqual(actual, '\\\\hi \\\\left pattern');\n\n\t\ttestObject = new ReplacePattern('\\\\left \\\\L$1', { pattern: 'PATT(ERN)', isRegExp: true });\n\t\tactual = testObject.getReplaceString('PATTERN');\n\t\tassert.strictEqual(actual, '\\\\left ern');\n\t});\n\n\ttest('case operations and newline', () => { // #140734\n\t\tconst testObject = new ReplacePattern('$1\\n\\\\U$2', { pattern: '(multi)(line)', isRegExp: true });\n\t\tconst actual = testObject.getReplaceString('multiline');\n\t\tassert.strictEqual(actual, 'multi\\nLINE');\n\t});\n\n\ttest('get replace string for no matches', () => {\n\t\tlet testObject = new ReplacePattern('hello', { pattern: 'bla', isRegExp: true });\n\t\tlet actual = testObject.getReplaceString('foo');\n\t\tassert.strictEqual(actual, null);\n\n\t\ttestObject = new ReplacePattern('hello', { pattern: 'bla', isRegExp: false });\n\t\tactual = testObject.getReplaceString('foo');\n\t\tassert.strictEqual(actual, null);\n\t});\n\n\ttest('get replace string if match is sub-string of the text', () => {\n\t\tlet testObject = new ReplacePattern('hello', { pattern: 'bla', isRegExp: true });\n\t\tlet actual = testObject.getReplaceString('this is a bla text');\n\t\tassert.strictEqual(actual, 'hello');\n\n\t\ttestObject = new ReplacePattern('hello', { pattern: 'bla', isRegExp: false });\n\t\tactual = testObject.getReplaceString('this is a bla text');\n\t\tassert.strictEqual(actual, 'hello');\n\n\t\ttestObject = new ReplacePattern('that', { pattern: 'this(?=.*bla)', isRegExp: true });\n\t\tactual = testObject.getReplaceString('this is a bla text');\n\t\tassert.strictEqual(actual, 'that');\n\n\t\ttestObject = new ReplacePattern('$1at', { pattern: '(th)is(?=.*bla)', isRegExp: true });\n\t\tactual = testObject.getReplaceString('this is a bla text');\n\t\tassert.strictEqual(actual, 'that');\n\n\t\ttestObject = new ReplacePattern('$1e', { pattern: '(th)is(?=.*bla)', isRegExp: true });\n\t\tactual = testObject.getReplaceString('this is a bla text');\n\t\tassert.strictEqual(actual, 'the');\n\n\t\ttestObject = new ReplacePattern('$1ere', { pattern: '(th)is(?=.*bla)', isRegExp: true });\n\t\tactual = testObject.getReplaceString('this is a bla text');\n\t\tassert.strictEqual(actual, 'there');\n\n\t\ttestObject = new ReplacePattern('$1', { pattern: '(th)is(?=.*bla)', isRegExp: true });\n\t\tactual = testObject.getReplaceString('this is a bla text');\n\t\tassert.strictEqual(actual, 'th');\n\n\t\ttestObject = new ReplacePattern('ma$1', { pattern: '(th)is(?=.*bla)', isRegExp: true });\n\t\tactual = testObject.getReplaceString('this is a bla text');\n\t\tassert.strictEqual(actual, 'math');\n\n\t\ttestObject = new ReplacePattern('ma$1s', { pattern: '(th)is(?=.*bla)', isRegExp: true });\n\t\tactual = testObject.getReplaceString('this is a bla text');\n\t\tassert.strictEqual(actual, 'maths');\n\n\t\ttestObject = new ReplacePattern('ma$1s', { pattern: '(th)is(?=.*bla)', isRegExp: true });\n\t\tactual = testObject.getReplaceString('this is a bla text');\n\t\tassert.strictEqual(actual, 'maths');\n\n\t\ttestObject = new ReplacePattern('$0', { pattern: '(th)is(?=.*bla)', isRegExp: true });\n\t\tactual = testObject.getReplaceString('this is a bla text');\n\t\tassert.strictEqual(actual, 'this');\n\n\t\ttestObject = new ReplacePattern('$0$1', { pattern: '(th)is(?=.*bla)', isRegExp: true });\n\t\tactual = testObject.getReplaceString('this is a bla text');\n\t\tassert.strictEqual(actual, 'thisth');\n\n\t\ttestObject = new ReplacePattern('foo', { pattern: 'bla(?=\\\\stext$)', isRegExp: true });\n\t\tactual = testObject.getReplaceString('this is a bla text');\n\t\tassert.strictEqual(actual, 'foo');\n\n\t\ttestObject = new ReplacePattern('f$1', { pattern: 'b(la)(?=\\\\stext$)', isRegExp: true });\n\t\tactual = testObject.getReplaceString('this is a bla text');\n\t\tassert.strictEqual(actual, 'fla');\n\n\t\ttestObject = new ReplacePattern('f$0', { pattern: 'b(la)(?=\\\\stext$)', isRegExp: true });\n\t\tactual = testObject.getReplaceString('this is a bla text');\n\t\tassert.strictEqual(actual, 'fbla');\n\n\t\ttestObject = new ReplacePattern('$0ah', { pattern: 'b(la)(?=\\\\stext$)', isRegExp: true });\n\t\tactual = testObject.getReplaceString('this is a bla text');\n\t\tassert.strictEqual(actual, 'blaah');\n\n\t\ttestObject = new ReplacePattern('newrege$1', true, /Testrege(\\w*)/);\n\t\tactual = testObject.getReplaceString('Testregex', true);\n\t\tassert.strictEqual(actual, 'Newregex');\n\n\t\ttestObject = new ReplacePattern('newrege$1', true, /TESTREGE(\\w*)/);\n\t\tactual = testObject.getReplaceString('TESTREGEX', true);\n\t\tassert.strictEqual(actual, 'NEWREGEX');\n\n\t\ttestObject = new ReplacePattern('new_rege$1', true, /Test_Rege(\\w*)/);\n\t\tactual = testObject.getReplaceString('Test_Regex', true);\n\t\tassert.strictEqual(actual, 'New_Regex');\n\n\t\ttestObject = new ReplacePattern('new-rege$1', true, /Test-Rege(\\w*)/);\n\t\tactual = testObject.getReplaceString('Test-Regex', true);\n\t\tassert.strictEqual(actual, 'New-Regex');\n\t});\n});\n"],
  "mappings": "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",
  "names": []
}
