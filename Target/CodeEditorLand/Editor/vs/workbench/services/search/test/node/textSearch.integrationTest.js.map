{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/search/test/node/textSearch.integrationTest.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport assert from 'assert';\nimport * as path from '../../../../../base/common/path.js';\nimport { CancellationTokenSource } from '../../../../../base/common/cancellation.js';\nimport * as glob from '../../../../../base/common/glob.js';\nimport { URI } from '../../../../../base/common/uri.js';\nimport { deserializeSearchError, IFolderQuery, ISearchRange, ITextQuery, ITextSearchContext, ITextSearchMatch, QueryType, SearchErrorCode, ISerializedFileMatch } from '../../common/search.js';\nimport { TextSearchEngineAdapter } from '../../node/textSearchAdapter.js';\nimport { flakySuite } from '../../../../../base/test/node/testUtils.js';\nimport { FileAccess } from '../../../../../base/common/network.js';\n\nconst TEST_FIXTURES = path.normalize(FileAccess.asFileUri('vs/workbench/services/search/test/node/fixtures').fsPath);\nconst EXAMPLES_FIXTURES = path.join(TEST_FIXTURES, 'examples');\nconst MORE_FIXTURES = path.join(TEST_FIXTURES, 'more');\nconst TEST_ROOT_FOLDER: IFolderQuery = { folder: URI.file(TEST_FIXTURES) };\nconst ROOT_FOLDER_QUERY: IFolderQuery[] = [\n\tTEST_ROOT_FOLDER\n];\n\nconst MULTIROOT_QUERIES: IFolderQuery[] = [\n\t{ folder: URI.file(EXAMPLES_FIXTURES) },\n\t{ folder: URI.file(MORE_FIXTURES) }\n];\n\nfunction doSearchTest(query: ITextQuery, expectedResultCount: number | Function): Promise<ISerializedFileMatch[]> {\n\tconst engine = new TextSearchEngineAdapter(query);\n\n\tlet c = 0;\n\tconst results: ISerializedFileMatch[] = [];\n\treturn engine.search(new CancellationTokenSource().token, _results => {\n\t\tif (_results) {\n\t\t\tc += _results.reduce((acc, cur) => acc + cur.numMatches!, 0);\n\t\t\tresults.push(..._results);\n\t\t}\n\t}, () => { }).then(() => {\n\t\tif (typeof expectedResultCount === 'function') {\n\t\t\tassert(expectedResultCount(c));\n\t\t} else {\n\t\t\tassert.strictEqual(c, expectedResultCount, `rg ${c} !== ${expectedResultCount}`);\n\t\t}\n\n\t\treturn results;\n\t});\n}\n\nflakySuite('TextSearch-integration', function () {\n\n\ttest('Text: GameOfLife', () => {\n\t\tconst config: ITextQuery = {\n\t\t\ttype: QueryType.Text,\n\t\t\tfolderQueries: ROOT_FOLDER_QUERY,\n\t\t\tcontentPattern: { pattern: 'GameOfLife' },\n\t\t};\n\n\t\treturn doSearchTest(config, 4);\n\t});\n\n\ttest('Text: GameOfLife (RegExp)', () => {\n\t\tconst config: ITextQuery = {\n\t\t\ttype: QueryType.Text,\n\t\t\tfolderQueries: ROOT_FOLDER_QUERY,\n\t\t\tcontentPattern: { pattern: 'Game.?fL\\\\w?fe', isRegExp: true }\n\t\t};\n\n\t\treturn doSearchTest(config, 4);\n\t});\n\n\ttest('Text: GameOfLife (unicode escape sequences)', () => {\n\t\tconst config: ITextQuery = {\n\t\t\ttype: QueryType.Text,\n\t\t\tfolderQueries: ROOT_FOLDER_QUERY,\n\t\t\tcontentPattern: { pattern: 'G\\\\u{0061}m\\\\u0065OfLife', isRegExp: true }\n\t\t};\n\n\t\treturn doSearchTest(config, 4);\n\t});\n\n\ttest('Text: GameOfLife (unicode escape sequences, force PCRE2)', () => {\n\t\tconst config: ITextQuery = {\n\t\t\ttype: QueryType.Text,\n\t\t\tfolderQueries: ROOT_FOLDER_QUERY,\n\t\t\tcontentPattern: { pattern: '(?<!a)G\\\\u{0061}m\\\\u0065OfLife', isRegExp: true }\n\t\t};\n\n\t\treturn doSearchTest(config, 4);\n\t});\n\n\ttest('Text: GameOfLife (PCRE2 RegExp)', () => {\n\t\tconst config: ITextQuery = {\n\t\t\ttype: QueryType.Text,\n\t\t\tfolderQueries: ROOT_FOLDER_QUERY,\n\t\t\tusePCRE2: true,\n\t\t\tcontentPattern: { pattern: 'Life(?!P)', isRegExp: true }\n\t\t};\n\n\t\treturn doSearchTest(config, 8);\n\t});\n\n\ttest('Text: GameOfLife (RegExp to EOL)', () => {\n\t\tconst config: ITextQuery = {\n\t\t\ttype: QueryType.Text,\n\t\t\tfolderQueries: ROOT_FOLDER_QUERY,\n\t\t\tcontentPattern: { pattern: 'GameOfLife.*', isRegExp: true }\n\t\t};\n\n\t\treturn doSearchTest(config, 4);\n\t});\n\n\ttest('Text: GameOfLife (Word Match, Case Sensitive)', () => {\n\t\tconst config: ITextQuery = {\n\t\t\ttype: QueryType.Text,\n\t\t\tfolderQueries: ROOT_FOLDER_QUERY,\n\t\t\tcontentPattern: { pattern: 'GameOfLife', isWordMatch: true, isCaseSensitive: true }\n\t\t};\n\n\t\treturn doSearchTest(config, 4);\n\t});\n\n\ttest('Text: GameOfLife (Word Match, Spaces)', () => {\n\t\tconst config: ITextQuery = {\n\t\t\ttype: QueryType.Text,\n\t\t\tfolderQueries: ROOT_FOLDER_QUERY,\n\t\t\tcontentPattern: { pattern: ' GameOfLife ', isWordMatch: true }\n\t\t};\n\n\t\treturn doSearchTest(config, 1);\n\t});\n\n\ttest('Text: GameOfLife (Word Match, Punctuation and Spaces)', () => {\n\t\tconst config: ITextQuery = {\n\t\t\ttype: QueryType.Text,\n\t\t\tfolderQueries: ROOT_FOLDER_QUERY,\n\t\t\tcontentPattern: { pattern: ', as =', isWordMatch: true }\n\t\t};\n\n\t\treturn doSearchTest(config, 1);\n\t});\n\n\ttest('Text: Helvetica (UTF 16)', () => {\n\t\tconst config: ITextQuery = {\n\t\t\ttype: QueryType.Text,\n\t\t\tfolderQueries: ROOT_FOLDER_QUERY,\n\t\t\tcontentPattern: { pattern: 'Helvetica' }\n\t\t};\n\n\t\treturn doSearchTest(config, 3);\n\t});\n\n\ttest('Text: e', () => {\n\t\tconst config: ITextQuery = {\n\t\t\ttype: QueryType.Text,\n\t\t\tfolderQueries: ROOT_FOLDER_QUERY,\n\t\t\tcontentPattern: { pattern: 'e' }\n\t\t};\n\n\t\treturn doSearchTest(config, 785);\n\t});\n\n\ttest('Text: e (with excludes)', () => {\n\t\tconst config: any = {\n\t\t\tfolderQueries: ROOT_FOLDER_QUERY,\n\t\t\tcontentPattern: { pattern: 'e' },\n\t\t\texcludePattern: { '**/examples': true }\n\t\t};\n\n\t\treturn doSearchTest(config, 391);\n\t});\n\n\ttest('Text: e (with includes)', () => {\n\t\tconst config: any = {\n\t\t\tfolderQueries: ROOT_FOLDER_QUERY,\n\t\t\tcontentPattern: { pattern: 'e' },\n\t\t\tincludePattern: { '**/examples/**': true }\n\t\t};\n\n\t\treturn doSearchTest(config, 394);\n\t});\n\n\t// TODO\n\t// test('Text: e (with absolute path excludes)', () => {\n\t// \tconst config: any = {\n\t// \t\tfolderQueries: ROOT_FOLDER_QUERY,\n\t// \t\tcontentPattern: { pattern: 'e' },\n\t// \t\texcludePattern: makeExpression(path.join(TEST_FIXTURES, '**/examples'))\n\t// \t};\n\n\t// \treturn doSearchTest(config, 394);\n\t// });\n\n\t// test('Text: e (with mixed absolute/relative path excludes)', () => {\n\t// \tconst config: any = {\n\t// \t\tfolderQueries: ROOT_FOLDER_QUERY,\n\t// \t\tcontentPattern: { pattern: 'e' },\n\t// \t\texcludePattern: makeExpression(path.join(TEST_FIXTURES, '**/examples'), '*.css')\n\t// \t};\n\n\t// \treturn doSearchTest(config, 310);\n\t// });\n\n\ttest('Text: sibling exclude', () => {\n\t\tconst config: any = {\n\t\t\tfolderQueries: ROOT_FOLDER_QUERY,\n\t\t\tcontentPattern: { pattern: 'm' },\n\t\t\tincludePattern: makeExpression('**/site*'),\n\t\t\texcludePattern: { '*.css': { when: '$(basename).less' } }\n\t\t};\n\n\t\treturn doSearchTest(config, 1);\n\t});\n\n\ttest('Text: e (with includes and exclude)', () => {\n\t\tconst config: any = {\n\t\t\tfolderQueries: ROOT_FOLDER_QUERY,\n\t\t\tcontentPattern: { pattern: 'e' },\n\t\t\tincludePattern: { '**/examples/**': true },\n\t\t\texcludePattern: { '**/examples/small.js': true }\n\t\t};\n\n\t\treturn doSearchTest(config, 371);\n\t});\n\n\ttest('Text: a (capped)', () => {\n\t\tconst maxResults = 520;\n\t\tconst config: ITextQuery = {\n\t\t\ttype: QueryType.Text,\n\t\t\tfolderQueries: ROOT_FOLDER_QUERY,\n\t\t\tcontentPattern: { pattern: 'a' },\n\t\t\tmaxResults\n\t\t};\n\n\t\treturn doSearchTest(config, maxResults);\n\t});\n\n\ttest('Text: a (no results)', () => {\n\t\tconst config: ITextQuery = {\n\t\t\ttype: QueryType.Text,\n\t\t\tfolderQueries: ROOT_FOLDER_QUERY,\n\t\t\tcontentPattern: { pattern: 'ahsogehtdas' }\n\t\t};\n\n\t\treturn doSearchTest(config, 0);\n\t});\n\n\ttest('Text: -size', () => {\n\t\tconst config: ITextQuery = {\n\t\t\ttype: QueryType.Text,\n\t\t\tfolderQueries: ROOT_FOLDER_QUERY,\n\t\t\tcontentPattern: { pattern: '-size' }\n\t\t};\n\n\t\treturn doSearchTest(config, 9);\n\t});\n\n\ttest('Multiroot: Conway', () => {\n\t\tconst config: ITextQuery = {\n\t\t\ttype: QueryType.Text,\n\t\t\tfolderQueries: MULTIROOT_QUERIES,\n\t\t\tcontentPattern: { pattern: 'conway' }\n\t\t};\n\n\t\treturn doSearchTest(config, 8);\n\t});\n\n\ttest('Multiroot: e with partial global exclude', () => {\n\t\tconst config: ITextQuery = {\n\t\t\ttype: QueryType.Text,\n\t\t\tfolderQueries: MULTIROOT_QUERIES,\n\t\t\tcontentPattern: { pattern: 'e' },\n\t\t\texcludePattern: makeExpression('**/*.txt')\n\t\t};\n\n\t\treturn doSearchTest(config, 394);\n\t});\n\n\ttest('Multiroot: e with global excludes', () => {\n\t\tconst config: ITextQuery = {\n\t\t\ttype: QueryType.Text,\n\t\t\tfolderQueries: MULTIROOT_QUERIES,\n\t\t\tcontentPattern: { pattern: 'e' },\n\t\t\texcludePattern: makeExpression('**/*.txt', '**/*.js')\n\t\t};\n\n\t\treturn doSearchTest(config, 0);\n\t});\n\n\ttest('Multiroot: e with folder exclude', () => {\n\t\tconst config: ITextQuery = {\n\t\t\ttype: QueryType.Text,\n\t\t\tfolderQueries: [\n\t\t\t\t{\n\t\t\t\t\tfolder: URI.file(EXAMPLES_FIXTURES), excludePattern: [{\n\t\t\t\t\t\tpattern: makeExpression('**/e*.js')\n\t\t\t\t\t}]\n\t\t\t\t},\n\t\t\t\t{ folder: URI.file(MORE_FIXTURES) }\n\t\t\t],\n\t\t\tcontentPattern: { pattern: 'e' }\n\t\t};\n\n\t\treturn doSearchTest(config, 298);\n\t});\n\n\ttest('Text: \u8BED', () => {\n\t\tconst config: ITextQuery = {\n\t\t\ttype: QueryType.Text,\n\t\t\tfolderQueries: ROOT_FOLDER_QUERY,\n\t\t\tcontentPattern: { pattern: '\u8BED' }\n\t\t};\n\n\t\treturn doSearchTest(config, 1).then(results => {\n\t\t\tconst matchRange = (<ITextSearchMatch>results[0].results![0]).rangeLocations.map(e => e.source);\n\t\t\tassert.deepStrictEqual(matchRange, [{\n\t\t\t\tstartLineNumber: 0,\n\t\t\t\tstartColumn: 1,\n\t\t\t\tendLineNumber: 0,\n\t\t\t\tendColumn: 2\n\t\t\t}]);\n\t\t});\n\t});\n\n\ttest('Multiple matches on line: h\\\\d,', () => {\n\t\tconst config: ITextQuery = {\n\t\t\ttype: QueryType.Text,\n\t\t\tfolderQueries: ROOT_FOLDER_QUERY,\n\t\t\tcontentPattern: { pattern: 'h\\\\d,', isRegExp: true }\n\t\t};\n\n\t\treturn doSearchTest(config, 15).then(results => {\n\t\t\tassert.strictEqual(results.length, 3);\n\t\t\tassert.strictEqual(results[0].results!.length, 1);\n\t\t\tconst match = <ITextSearchMatch>results[0].results![0];\n\t\t\tassert.strictEqual((<ISearchRange[]>match.rangeLocations.map(e => e.source)).length, 5);\n\t\t});\n\t});\n\n\ttest('Search with context matches', () => {\n\t\tconst config: ITextQuery = {\n\t\t\ttype: QueryType.Text,\n\t\t\tfolderQueries: ROOT_FOLDER_QUERY,\n\t\t\tcontentPattern: { pattern: 'compiler.typeCheck();' },\n\t\t\tsurroundingContext: 1,\n\t\t};\n\n\t\treturn doSearchTest(config, 3).then(results => {\n\t\t\tassert.strictEqual(results.length, 3);\n\t\t\tassert.strictEqual((<ITextSearchContext>results[0].results![0]).lineNumber, 24);\n\t\t\tassert.strictEqual((<ITextSearchContext>results[0].results![0]).text, '        compiler.addUnit(prog,\"input.ts\");');\n\t\t\t// assert.strictEqual((<ITextSearchMatch>results[1].results[0]).preview.text, '        compiler.typeCheck();\\n'); // See https://github.com/BurntSushi/ripgrep/issues/1095\n\t\t\tassert.strictEqual((<ITextSearchContext>results[2].results![0]).lineNumber, 26);\n\t\t\tassert.strictEqual((<ITextSearchContext>results[2].results![0]).text, '        compiler.emit();');\n\t\t});\n\t});\n\n\tsuite('error messages', () => {\n\t\ttest('invalid encoding', () => {\n\t\t\tconst config: ITextQuery = {\n\t\t\t\ttype: QueryType.Text,\n\t\t\t\tfolderQueries: [\n\t\t\t\t\t{\n\t\t\t\t\t\t...TEST_ROOT_FOLDER,\n\t\t\t\t\t\tfileEncoding: 'invalidEncoding'\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tcontentPattern: { pattern: 'test' },\n\t\t\t};\n\n\t\t\treturn doSearchTest(config, 0).then(() => {\n\t\t\t\tthrow new Error('expected fail');\n\t\t\t}, err => {\n\t\t\t\tconst searchError = deserializeSearchError(err);\n\t\t\t\tassert.strictEqual(searchError.message, 'Unknown encoding: invalidEncoding');\n\t\t\t\tassert.strictEqual(searchError.code, SearchErrorCode.unknownEncoding);\n\t\t\t});\n\t\t});\n\n\t\ttest('invalid regex case 1', () => {\n\t\t\tconst config: ITextQuery = {\n\t\t\t\ttype: QueryType.Text,\n\t\t\t\tfolderQueries: ROOT_FOLDER_QUERY,\n\t\t\t\tcontentPattern: { pattern: ')', isRegExp: true },\n\t\t\t};\n\n\t\t\treturn doSearchTest(config, 0).then(() => {\n\t\t\t\tthrow new Error('expected fail');\n\t\t\t}, err => {\n\t\t\t\tconst searchError = deserializeSearchError(err);\n\t\t\t\tconst regexParseErrorForUnclosedParenthesis = 'Regex parse error: unmatched closing parenthesis';\n\t\t\t\tassert.strictEqual(searchError.message, regexParseErrorForUnclosedParenthesis);\n\t\t\t\tassert.strictEqual(searchError.code, SearchErrorCode.regexParseError);\n\t\t\t});\n\t\t});\n\n\t\ttest('invalid regex case 2', () => {\n\t\t\tconst config: ITextQuery = {\n\t\t\t\ttype: QueryType.Text,\n\t\t\t\tfolderQueries: ROOT_FOLDER_QUERY,\n\t\t\t\tcontentPattern: { pattern: '(?<!a.*)', isRegExp: true },\n\t\t\t};\n\n\t\t\treturn doSearchTest(config, 0).then(() => {\n\t\t\t\tthrow new Error('expected fail');\n\t\t\t}, err => {\n\t\t\t\tconst searchError = deserializeSearchError(err);\n\t\t\t\tconst regexParseErrorForLookAround = 'Regex parse error: lookbehind assertion is not fixed length';\n\t\t\t\tassert.strictEqual(searchError.message, regexParseErrorForLookAround);\n\t\t\t\tassert.strictEqual(searchError.code, SearchErrorCode.regexParseError);\n\t\t\t});\n\t\t});\n\n\n\t\ttest('invalid glob', () => {\n\t\t\tconst config: ITextQuery = {\n\t\t\t\ttype: QueryType.Text,\n\t\t\t\tfolderQueries: ROOT_FOLDER_QUERY,\n\t\t\t\tcontentPattern: { pattern: 'foo' },\n\t\t\t\tincludePattern: {\n\t\t\t\t\t'{{}': true\n\t\t\t\t}\n\t\t\t};\n\n\t\t\treturn doSearchTest(config, 0).then(() => {\n\t\t\t\tthrow new Error('expected fail');\n\t\t\t}, err => {\n\t\t\t\tconst searchError = deserializeSearchError(err);\n\t\t\t\tassert.strictEqual(searchError.message, 'Error parsing glob \\'/{{}\\': nested alternate groups are not allowed');\n\t\t\t\tassert.strictEqual(searchError.code, SearchErrorCode.globParseError);\n\t\t\t});\n\t\t});\n\t});\n});\n\nfunction makeExpression(...patterns: string[]): glob.IExpression {\n\treturn patterns.reduce((glob, pattern) => {\n\t\t// glob.ts needs forward slashes\n\t\tpattern = pattern.replace(/\\\\/g, '/');\n\t\tglob[pattern] = true;\n\t\treturn glob;\n\t}, Object.create(null));\n}\n"],
  "mappings": "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",
  "names": ["glob"]
}
