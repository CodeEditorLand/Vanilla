{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/search/test/node/ripgrepTextSearchEngineUtils.test.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport assert from 'assert';\nimport { joinPath } from '../../../../../base/common/resources.js';\nimport { URI } from '../../../../../base/common/uri.js';\nimport { fixRegexNewline, IRgMatch, IRgMessage, RipgrepParser, unicodeEscapesToPCRE2, fixNewline, getRgArgs, performBraceExpansionForRipgrep } from '../../node/ripgrepTextSearchEngine.js';\nimport { Range, TextSearchMatchNew, TextSearchQueryNew, TextSearchResultNew } from '../../common/searchExtTypes.js';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from '../../../../../base/test/common/utils.js';\nimport { RipgrepTextSearchOptions } from '../../common/searchExtTypesInternal.js';\nimport { DEFAULT_TEXT_SEARCH_PREVIEW_OPTIONS } from '../../common/search.js';\n\nsuite('RipgrepTextSearchEngine', () => {\n\tensureNoDisposablesAreLeakedInTestSuite();\n\ttest('unicodeEscapesToPCRE2', async () => {\n\t\tassert.strictEqual(unicodeEscapesToPCRE2('\\\\u1234'), '\\\\x{1234}');\n\t\tassert.strictEqual(unicodeEscapesToPCRE2('\\\\u1234\\\\u0001'), '\\\\x{1234}\\\\x{0001}');\n\t\tassert.strictEqual(unicodeEscapesToPCRE2('foo\\\\u1234bar'), 'foo\\\\x{1234}bar');\n\t\tassert.strictEqual(unicodeEscapesToPCRE2('\\\\\\\\\\\\u1234'), '\\\\\\\\\\\\x{1234}');\n\t\tassert.strictEqual(unicodeEscapesToPCRE2('foo\\\\\\\\\\\\u1234'), 'foo\\\\\\\\\\\\x{1234}');\n\n\t\tassert.strictEqual(unicodeEscapesToPCRE2('\\\\u{1234}'), '\\\\x{1234}');\n\t\tassert.strictEqual(unicodeEscapesToPCRE2('\\\\u{1234}\\\\u{0001}'), '\\\\x{1234}\\\\x{0001}');\n\t\tassert.strictEqual(unicodeEscapesToPCRE2('foo\\\\u{1234}bar'), 'foo\\\\x{1234}bar');\n\t\tassert.strictEqual(unicodeEscapesToPCRE2('[\\\\u00A0-\\\\u00FF]'), '[\\\\x{00A0}-\\\\x{00FF}]');\n\n\t\tassert.strictEqual(unicodeEscapesToPCRE2('foo\\\\u{123456}7bar'), 'foo\\\\u{123456}7bar');\n\t\tassert.strictEqual(unicodeEscapesToPCRE2('\\\\u123'), '\\\\u123');\n\t\tassert.strictEqual(unicodeEscapesToPCRE2('foo'), 'foo');\n\t\tassert.strictEqual(unicodeEscapesToPCRE2(''), '');\n\t});\n\n\ttest('fixRegexNewline - src', () => {\n\t\tconst ttable = [\n\t\t\t['foo', 'foo'],\n\t\t\t['invalid(', 'invalid('],\n\t\t\t['fo\\\\no', 'fo\\\\r?\\\\no'],\n\t\t\t['f\\\\no\\\\no', 'f\\\\r?\\\\no\\\\r?\\\\no'],\n\t\t\t['f[a-z\\\\n1]', 'f(?:[a-z1]|\\\\r?\\\\n)'],\n\t\t\t['f[\\\\n-a]', 'f[\\\\n-a]'],\n\t\t\t['(?<=\\\\n)\\\\w', '(?<=\\\\n)\\\\w'],\n\t\t\t['fo\\\\n+o', 'fo(?:\\\\r?\\\\n)+o'],\n\t\t\t['fo[^\\\\n]o', 'fo(?!\\\\r?\\\\n)o'],\n\t\t\t['fo[^\\\\na-z]o', 'fo(?!\\\\r?\\\\n|[a-z])o'],\n\t\t\t['foo[^\\\\n]+o', 'foo.+o'],\n\t\t\t['foo[^\\\\nzq]+o', 'foo[^zq]+o'],\n\t\t\t['foo[^\\\\nzq]+o', 'foo[^zq]+o'],\n\t\t\t// preserves quantifies, #137899\n\t\t\t['fo[^\\\\S\\\\n]*o', 'fo[^\\\\S]*o'],\n\t\t\t['fo[^\\\\S\\\\n]{3,}o', 'fo[^\\\\S]{3,}o'],\n\t\t];\n\n\t\tfor (const [input, expected] of ttable) {\n\t\t\tassert.strictEqual(fixRegexNewline(input), expected, `${input} -> ${expected}`);\n\t\t}\n\t});\n\n\ttest('fixRegexNewline - re', () => {\n\t\tfunction testFixRegexNewline([inputReg, testStr, shouldMatch]: readonly [string, string, boolean]): void {\n\t\t\tconst fixed = fixRegexNewline(inputReg);\n\t\t\tconst reg = new RegExp(fixed);\n\t\t\tassert.strictEqual(reg.test(testStr), shouldMatch, `${inputReg} => ${reg}, ${testStr}, ${shouldMatch}`);\n\t\t}\n\n\t\t([\n\t\t\t['foo', 'foo', true],\n\n\t\t\t['foo\\\\n', 'foo\\r\\n', true],\n\t\t\t['foo\\\\n\\\\n', 'foo\\n\\n', true],\n\t\t\t['foo\\\\n\\\\n', 'foo\\r\\n\\r\\n', true],\n\t\t\t['foo\\\\n', 'foo\\n', true],\n\t\t\t['foo\\\\nabc', 'foo\\r\\nabc', true],\n\t\t\t['foo\\\\nabc', 'foo\\nabc', true],\n\t\t\t['foo\\\\r\\\\n', 'foo\\r\\n', true],\n\n\t\t\t['foo\\\\n+abc', 'foo\\r\\nabc', true],\n\t\t\t['foo\\\\n+abc', 'foo\\n\\n\\nabc', true],\n\t\t\t['foo\\\\n+abc', 'foo\\r\\n\\r\\n\\r\\nabc', true],\n\t\t\t['foo[\\\\n-9]+abc', 'foo1abc', true],\n\t\t] as const).forEach(testFixRegexNewline);\n\t});\n\n\ttest('fixNewline - matching', () => {\n\t\tfunction testFixNewline([inputReg, testStr, shouldMatch = true]: readonly [string, string, boolean?]): void {\n\t\t\tconst fixed = fixNewline(inputReg);\n\t\t\tconst reg = new RegExp(fixed);\n\t\t\tassert.strictEqual(reg.test(testStr), shouldMatch, `${inputReg} => ${reg}, ${testStr}, ${shouldMatch}`);\n\t\t}\n\n\t\t([\n\t\t\t['foo', 'foo'],\n\n\t\t\t['foo\\n', 'foo\\r\\n'],\n\t\t\t['foo\\n', 'foo\\n'],\n\t\t\t['foo\\nabc', 'foo\\r\\nabc'],\n\t\t\t['foo\\nabc', 'foo\\nabc'],\n\t\t\t['foo\\r\\n', 'foo\\r\\n'],\n\n\t\t\t['foo\\nbarc', 'foobar', false],\n\t\t\t['foobar', 'foo\\nbar', false],\n\t\t] as const).forEach(testFixNewline);\n\t});\n\n\tsuite('RipgrepParser', () => {\n\t\tconst TEST_FOLDER = URI.file('/foo/bar');\n\n\t\tfunction testParser(inputData: string[], expectedResults: TextSearchResultNew[]): void {\n\t\t\tconst testParser = new RipgrepParser(1000, TEST_FOLDER, DEFAULT_TEXT_SEARCH_PREVIEW_OPTIONS);\n\n\t\t\tconst actualResults: TextSearchResultNew[] = [];\n\t\t\ttestParser.on('result', r => {\n\t\t\t\tactualResults.push(r);\n\t\t\t});\n\n\t\t\tinputData.forEach(d => testParser.handleData(d));\n\t\t\ttestParser.flush();\n\n\t\t\tassert.deepStrictEqual(actualResults, expectedResults);\n\t\t}\n\n\t\tfunction makeRgMatch(relativePath: string, text: string, lineNumber: number, matchRanges: { start: number; end: number }[]): string {\n\t\t\treturn JSON.stringify(<IRgMessage>{\n\t\t\t\ttype: 'match',\n\t\t\t\tdata: <IRgMatch>{\n\t\t\t\t\tpath: {\n\t\t\t\t\t\ttext: relativePath\n\t\t\t\t\t},\n\t\t\t\t\tlines: {\n\t\t\t\t\t\ttext\n\t\t\t\t\t},\n\t\t\t\t\tline_number: lineNumber,\n\t\t\t\t\tabsolute_offset: 0, // unused\n\t\t\t\t\tsubmatches: matchRanges.map(mr => {\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t...mr,\n\t\t\t\t\t\t\tmatch: { text: text.substring(mr.start, mr.end) }\n\t\t\t\t\t\t};\n\t\t\t\t\t})\n\t\t\t\t}\n\t\t\t}) + '\\n';\n\t\t}\n\n\t\ttest('single result', () => {\n\t\t\ttestParser(\n\t\t\t\t[\n\t\t\t\t\tmakeRgMatch('file1.js', 'foobar', 4, [{ start: 3, end: 6 }])\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\tnew TextSearchMatchNew(\n\t\t\t\t\t\tjoinPath(TEST_FOLDER, 'file1.js'),\n\t\t\t\t\t\t[{\n\t\t\t\t\t\t\tpreviewRange: new Range(0, 3, 0, 6),\n\t\t\t\t\t\t\tsourceRange: new Range(3, 3, 3, 6),\n\t\t\t\t\t\t}],\n\t\t\t\t\t\t'foobar'\n\t\t\t\t\t)\n\t\t\t\t]);\n\t\t});\n\n\t\ttest('multiple results', () => {\n\t\t\ttestParser(\n\t\t\t\t[\n\t\t\t\t\tmakeRgMatch('file1.js', 'foobar', 4, [{ start: 3, end: 6 }]),\n\t\t\t\t\tmakeRgMatch('app/file2.js', 'foobar', 4, [{ start: 3, end: 6 }]),\n\t\t\t\t\tmakeRgMatch('app2/file3.js', 'foobar', 4, [{ start: 3, end: 6 }]),\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\tnew TextSearchMatchNew(\n\t\t\t\t\t\tjoinPath(TEST_FOLDER, 'file1.js'),\n\t\t\t\t\t\t[{\n\t\t\t\t\t\t\tpreviewRange: new Range(0, 3, 0, 6),\n\t\t\t\t\t\t\tsourceRange: new Range(3, 3, 3, 6),\n\t\t\t\t\t\t}],\n\t\t\t\t\t\t'foobar'\n\t\t\t\t\t),\n\t\t\t\t\tnew TextSearchMatchNew(\n\t\t\t\t\t\tjoinPath(TEST_FOLDER, 'app/file2.js'),\n\t\t\t\t\t\t[{\n\t\t\t\t\t\t\tpreviewRange: new Range(0, 3, 0, 6),\n\t\t\t\t\t\t\tsourceRange: new Range(3, 3, 3, 6),\n\t\t\t\t\t\t}],\n\t\t\t\t\t\t'foobar'\n\t\t\t\t\t),\n\t\t\t\t\tnew TextSearchMatchNew(\n\t\t\t\t\t\tjoinPath(TEST_FOLDER, 'app2/file3.js'),\n\t\t\t\t\t\t[{\n\t\t\t\t\t\t\tpreviewRange: new Range(0, 3, 0, 6),\n\t\t\t\t\t\t\tsourceRange: new Range(3, 3, 3, 6),\n\t\t\t\t\t\t}],\n\t\t\t\t\t\t'foobar'\n\t\t\t\t\t)\n\t\t\t\t]);\n\t\t});\n\n\t\ttest('chopped-up input chunks', () => {\n\t\t\tconst dataStrs = [\n\t\t\t\tmakeRgMatch('file1.js', 'foo bar', 4, [{ start: 3, end: 7 }]),\n\t\t\t\tmakeRgMatch('app/file2.js', 'foobar', 4, [{ start: 3, end: 6 }]),\n\t\t\t\tmakeRgMatch('app2/file3.js', 'foobar', 4, [{ start: 3, end: 6 }]),\n\t\t\t];\n\n\t\t\tconst dataStr0Space = dataStrs[0].indexOf(' ');\n\t\t\ttestParser(\n\t\t\t\t[\n\t\t\t\t\tdataStrs[0].substring(0, dataStr0Space + 1),\n\t\t\t\t\tdataStrs[0].substring(dataStr0Space + 1),\n\t\t\t\t\t'\\n',\n\t\t\t\t\tdataStrs[1].trim(),\n\t\t\t\t\t'\\n' + dataStrs[2].substring(0, 25),\n\t\t\t\t\tdataStrs[2].substring(25)\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\tnew TextSearchMatchNew(\n\t\t\t\t\t\tjoinPath(TEST_FOLDER, 'file1.js'),\n\t\t\t\t\t\t[{\n\t\t\t\t\t\t\tpreviewRange: new Range(0, 3, 0, 7),\n\t\t\t\t\t\t\tsourceRange: new Range(3, 3, 3, 7),\n\t\t\t\t\t\t}],\n\t\t\t\t\t\t'foo bar'\n\t\t\t\t\t),\n\t\t\t\t\tnew TextSearchMatchNew(\n\t\t\t\t\t\tjoinPath(TEST_FOLDER, 'app/file2.js'),\n\t\t\t\t\t\t[{\n\t\t\t\t\t\t\tpreviewRange: new Range(0, 3, 0, 6),\n\t\t\t\t\t\t\tsourceRange: new Range(3, 3, 3, 6),\n\t\t\t\t\t\t}],\n\t\t\t\t\t\t'foobar'\n\t\t\t\t\t),\n\t\t\t\t\tnew TextSearchMatchNew(\n\t\t\t\t\t\tjoinPath(TEST_FOLDER, 'app2/file3.js'),\n\t\t\t\t\t\t[{\n\t\t\t\t\t\t\tpreviewRange: new Range(0, 3, 0, 6),\n\t\t\t\t\t\t\tsourceRange: new Range(3, 3, 3, 6),\n\t\t\t\t\t\t}],\n\t\t\t\t\t\t'foobar'\n\t\t\t\t\t)\n\t\t\t\t]);\n\t\t});\n\n\n\t\ttest('empty result (#100569)', () => {\n\t\t\ttestParser(\n\t\t\t\t[\n\t\t\t\t\tmakeRgMatch('file1.js', 'foobar', 4, []),\n\t\t\t\t\tmakeRgMatch('file1.js', '', 5, []),\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\tnew TextSearchMatchNew(\n\t\t\t\t\t\tjoinPath(TEST_FOLDER, 'file1.js'),\n\t\t\t\t\t\t[\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tpreviewRange: new Range(0, 0, 0, 1),\n\t\t\t\t\t\t\t\tsourceRange: new Range(3, 0, 3, 1),\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t],\n\t\t\t\t\t\t'foobar'\n\t\t\t\t\t),\n\t\t\t\t\tnew TextSearchMatchNew(\n\t\t\t\t\t\tjoinPath(TEST_FOLDER, 'file1.js'),\n\t\t\t\t\t\t[\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tpreviewRange: new Range(0, 0, 0, 0),\n\t\t\t\t\t\t\t\tsourceRange: new Range(4, 0, 4, 0),\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t],\n\t\t\t\t\t\t''\n\t\t\t\t\t)\n\t\t\t\t]);\n\t\t});\n\n\t\ttest('multiple submatches without newline in between (#131507)', () => {\n\t\t\ttestParser(\n\t\t\t\t[\n\t\t\t\t\tmakeRgMatch('file1.js', 'foobarbazquux', 4, [{ start: 0, end: 4 }, { start: 6, end: 10 }]),\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\tnew TextSearchMatchNew(\n\t\t\t\t\t\tjoinPath(TEST_FOLDER, 'file1.js'),\n\t\t\t\t\t\t[\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tpreviewRange: new Range(0, 0, 0, 4),\n\t\t\t\t\t\t\t\tsourceRange: new Range(3, 0, 3, 4),\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tpreviewRange: new Range(0, 6, 0, 10),\n\t\t\t\t\t\t\t\tsourceRange: new Range(3, 6, 3, 10),\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t],\n\t\t\t\t\t\t'foobarbazquux'\n\t\t\t\t\t)\n\t\t\t\t]);\n\t\t});\n\n\t\ttest('multiple submatches with newline in between (#131507)', () => {\n\t\t\ttestParser(\n\t\t\t\t[\n\t\t\t\t\tmakeRgMatch('file1.js', 'foo\\nbar\\nbaz\\nquux', 4, [{ start: 0, end: 5 }, { start: 8, end: 13 }]),\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\tnew TextSearchMatchNew(\n\t\t\t\t\t\tjoinPath(TEST_FOLDER, 'file1.js'),\n\t\t\t\t\t\t[\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tpreviewRange: new Range(0, 0, 1, 1),\n\t\t\t\t\t\t\t\tsourceRange: new Range(3, 0, 4, 1),\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tpreviewRange: new Range(2, 0, 3, 1),\n\t\t\t\t\t\t\t\tsourceRange: new Range(5, 0, 6, 1),\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t],\n\t\t\t\t\t\t'foo\\nbar\\nbaz\\nquux'\n\t\t\t\t\t)\n\t\t\t\t]);\n\t\t});\n\t});\n\n\tsuite('getRgArgs', () => {\n\t\ttest('simple includes', () => {\n\t\t\t// Only testing the args that come from includes.\n\t\t\tfunction testGetRgArgs(includes: string[], expectedFromIncludes: string[]): void {\n\t\t\t\tconst query: TextSearchQueryNew = {\n\t\t\t\t\tpattern: 'test'\n\t\t\t\t};\n\n\t\t\t\tconst options: RipgrepTextSearchOptions = {\n\t\t\t\t\tfolderOptions: {\n\t\t\t\t\t\tincludes: includes,\n\t\t\t\t\t\texcludes: [],\n\t\t\t\t\t\tuseIgnoreFiles: {\n\t\t\t\t\t\t\tlocal: false,\n\t\t\t\t\t\t\tglobal: false,\n\t\t\t\t\t\t\tparent: false\n\t\t\t\t\t\t},\n\t\t\t\t\t\tfollowSymlinks: false,\n\t\t\t\t\t\tfolder: URI.file('/some/folder'),\n\t\t\t\t\t\tencoding: 'utf8',\n\t\t\t\t\t},\n\t\t\t\t\tmaxResults: 1000,\n\t\t\t\t};\n\t\t\t\tconst expected = [\n\t\t\t\t\t'--hidden',\n\t\t\t\t\t'--no-require-git',\n\t\t\t\t\t'--ignore-case',\n\t\t\t\t\t...expectedFromIncludes,\n\t\t\t\t\t'--no-ignore',\n\t\t\t\t\t'--crlf',\n\t\t\t\t\t'--fixed-strings',\n\t\t\t\t\t'--no-config',\n\t\t\t\t\t'--no-ignore-global',\n\t\t\t\t\t'--json',\n\t\t\t\t\t'--',\n\t\t\t\t\t'test',\n\t\t\t\t\t'.'];\n\t\t\t\tconst result = getRgArgs(query, options);\n\t\t\t\tassert.deepStrictEqual(result, expected);\n\t\t\t}\n\n\t\t\t([\n\t\t\t\t[['a/*', 'b/*'], ['-g', '!*', '-g', '/a', '-g', '/a/*', '-g', '/b', '-g', '/b/*']],\n\t\t\t\t[['**/a/*', 'b/*'], ['-g', '!*', '-g', '/b', '-g', '/b/*', '-g', '**/a/*']],\n\t\t\t\t[['**/a/*', '**/b/*'], ['-g', '**/a/*', '-g', '**/b/*']],\n\t\t\t\t[['foo/*bar/something/**'], ['-g', '!*', '-g', '/foo', '-g', '/foo/*bar', '-g', '/foo/*bar/something', '-g', '/foo/*bar/something/**']],\n\t\t\t].forEach(([includes, expectedFromIncludes]) => testGetRgArgs(<string[]>includes, <string[]>expectedFromIncludes)));\n\t\t});\n\t});\n\n\ttest('brace expansion for ripgrep', () => {\n\t\tfunction testBraceExpansion(argGlob: string, expectedGlob: string[]): void {\n\t\t\tconst result = performBraceExpansionForRipgrep(argGlob);\n\t\t\tassert.deepStrictEqual(result, expectedGlob);\n\t\t}\n\n\t\t[\n\t\t\t['eep/{a,b}/test', ['eep/a/test', 'eep/b/test']],\n\t\t\t['eep/{a,b}/{c,d,e}', ['eep/a/c', 'eep/a/d', 'eep/a/e', 'eep/b/c', 'eep/b/d', 'eep/b/e']],\n\t\t\t['eep/{a,b}/\\\\{c,d,e}', ['eep/a/{c,d,e}', 'eep/b/{c,d,e}']],\n\t\t\t['eep/{a,b\\\\}/test', ['eep/{a,b}/test']],\n\t\t\t['eep/{a,b\\\\\\\\}/test', ['eep/a/test', 'eep/b\\\\\\\\/test']],\n\t\t\t['eep/{a,b\\\\\\\\\\\\}/test', ['eep/{a,b\\\\\\\\}/test']],\n\t\t\t['e\\\\{ep/{a,b}/test', ['e{ep/a/test', 'e{ep/b/test']],\n\t\t\t['eep/{a,\\\\b}/test', ['eep/a/test', 'eep/\\\\b/test']],\n\t\t\t['{a/*.*,b/*.*}', ['a/*.*', 'b/*.*']],\n\t\t\t['{{}', ['{{}']],\n\t\t\t['aa{{}', ['aa{{}']],\n\t\t\t['{b{}', ['{b{}']],\n\t\t\t['{{}c', ['{{}c']],\n\t\t\t['{{}}', ['{{}}']],\n\t\t\t['\\\\{{}}', ['{}']],\n\t\t\t['{}foo', ['foo']],\n\t\t\t['bar{ }foo', ['bar foo']],\n\t\t\t['{}', ['']],\n\t\t].forEach(([includePattern, expectedPatterns]) => testBraceExpansion(<string>includePattern, <string[]>expectedPatterns));\n\t});\n});\n"],
  "mappings": "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",
  "names": ["testParser"]
}
