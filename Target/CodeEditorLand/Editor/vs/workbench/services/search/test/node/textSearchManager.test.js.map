{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/search/test/node/textSearchManager.test.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport assert from 'assert';\nimport { CancellationToken } from '../../../../../base/common/cancellation.js';\nimport { URI } from '../../../../../base/common/uri.js';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from '../../../../../base/test/common/utils.js';\nimport { Progress } from '../../../../../platform/progress/common/progress.js';\nimport { ITextQuery, QueryType } from '../../common/search.js';\nimport { ProviderResult, TextSearchCompleteNew, TextSearchProviderOptions, TextSearchProviderNew, TextSearchQueryNew, TextSearchResultNew } from '../../common/searchExtTypes.js';\nimport { NativeTextSearchManager } from '../../node/textSearchManager.js';\n\nsuite('NativeTextSearchManager', () => {\n\ttest('fixes encoding', async () => {\n\t\tlet correctEncoding = false;\n\t\tconst provider: TextSearchProviderNew = {\n\t\t\tprovideTextSearchResults(query: TextSearchQueryNew, options: TextSearchProviderOptions, progress: Progress<TextSearchResultNew>, token: CancellationToken): ProviderResult<TextSearchCompleteNew> {\n\t\t\t\tcorrectEncoding = options.folderOptions[0].encoding === 'windows-1252';\n\n\t\t\t\treturn null;\n\t\t\t}\n\t\t};\n\n\t\tconst query: ITextQuery = {\n\t\t\ttype: QueryType.Text,\n\t\t\tcontentPattern: {\n\t\t\t\tpattern: 'a'\n\t\t\t},\n\t\t\tfolderQueries: [{\n\t\t\t\tfolder: URI.file('/some/folder'),\n\t\t\t\tfileEncoding: 'windows1252'\n\t\t\t}]\n\t\t};\n\n\t\tconst m = new NativeTextSearchManager(query, provider);\n\t\tawait m.search(() => { }, CancellationToken.None);\n\n\t\tassert.ok(correctEncoding);\n\t});\n\n\tensureNoDisposablesAreLeakedInTestSuite();\n});\n"],
  "mappings": "AAKA,OAAO,YAAY;AACnB,SAAS,yBAAyB;AAClC,SAAS,WAAW;AACpB,SAAS,+CAA+C;AACxD,SAAS,gBAAgB;AACzB,SAAS,YAAY,iBAAiB;AACtC,SAAS,gBAAgB,uBAAuB,2BAA2B,uBAAuB,oBAAoB,2BAA2B;AACjJ,SAAS,+BAA+B;AAExC,MAAM,2BAA2B,MAAM;AACtC,OAAK,kBAAkB,YAAY;AAClC,QAAI,kBAAkB;AACtB,UAAM,WAAkC;AAAA,MACvC,yBAAyBA,QAA2B,SAAoC,UAAyC,OAAiE;AACjM,0BAAkB,QAAQ,cAAc,CAAC,EAAE,aAAa;AAExD,eAAO;AAAA,MACR;AAAA,IACD;AAEA,UAAM,QAAoB;AAAA,MACzB,MAAM,UAAU;AAAA,MAChB,gBAAgB;AAAA,QACf,SAAS;AAAA,MACV;AAAA,MACA,eAAe,CAAC;AAAA,QACf,QAAQ,IAAI,KAAK,cAAc;AAAA,QAC/B,cAAc;AAAA,MACf,CAAC;AAAA,IACF;AAEA,UAAM,IAAI,IAAI,wBAAwB,OAAO,QAAQ;AACrD,UAAM,EAAE,OAAO,MAAM;AAAA,IAAE,GAAG,kBAAkB,IAAI;AAEhD,WAAO,GAAG,eAAe;AAAA,EAC1B,CAAC;AAED,0CAAwC;AACzC,CAAC;",
  "names": ["query"]
}
