import n from"assert";import{ensureNoDisposablesAreLeakedInTestSuite as u}from"../../../../../base/test/common/utils.js";import{OneLineRange as s,TextSearchMatch as o,SearchRange as l}from"../../common/search.js";suite("TextSearchResult",()=>{const c={matchLines:1,charsPerLine:100};function i(t,e){n.strictEqual(e.rangeLocations.length,1),n.strictEqual(e.previewText.substring(e.rangeLocations[0].preview.startColumn,e.rangeLocations[0].preview.endColumn),t)}function a(t){return t.rangeLocations.map(e=>e.source)[0]}u(),test("empty without preview options",()=>{const t=new s(5,0,0),e=new o("",t);n.deepStrictEqual(a(e),t),i("",e)}),test("empty with preview options",()=>{const t=new s(5,0,0),e=new o("",t,c);n.deepStrictEqual(a(e),t),i("",e)}),test("short without preview options",()=>{const t=new s(5,4,7),e=new o("foo bar",t);n.deepStrictEqual(a(e),t),i("bar",e)}),test("short with preview options",()=>{const t=new s(5,4,7),e=new o("foo bar",t,c);n.deepStrictEqual(a(e),t),i("bar",e)}),test("leading",()=>{const t=new s(5,25,28),e=new o("long text very long text foo",t,c);n.deepStrictEqual(a(e),t),i("foo",e)}),test("trailing",()=>{const t=new s(5,0,3),e=new o("foo long text very long text long text very long text long text very long text long text very long text long text very long text",t,c);n.deepStrictEqual(a(e),t),i("foo",e)}),test("middle",()=>{const t=new s(5,30,33),e=new o("long text very long text long foo text very long text long text very long text long text very long text long text very long text",t,c);n.deepStrictEqual(a(e),t),i("foo",e)}),test("truncating match",()=>{const t={matchLines:1,charsPerLine:1},e=new s(0,4,7),r=new o("foo bar",e,t);n.deepStrictEqual(a(r),e),i("b",r)}),test("one line of multiline match",()=>{const t={matchLines:1,charsPerLine:1e4},e=new l(5,4,6,3),r=new o(`foo bar
foo bar`,e,t);n.deepStrictEqual(a(r),e),n.strictEqual(r.previewText,`foo bar
foo bar`),n.strictEqual(r.rangeLocations.length,1),n.strictEqual(r.rangeLocations[0].preview.startLineNumber,0),n.strictEqual(r.rangeLocations[0].preview.startColumn,4),n.strictEqual(r.rangeLocations[0].preview.endLineNumber,1),n.strictEqual(r.rangeLocations[0].preview.endColumn,3)}),test("compacts multiple ranges on long lines",()=>{const t={matchLines:1,charsPerLine:10},e=new l(5,4,5,7),r=new l(5,133,5,136),w=new l(5,141,5,144),g=new o("foo bar 123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890 foo bar baz bar",[e,r,w],t);n.deepStrictEqual(g.rangeLocations.map(p=>p.preview),[new s(0,4,7),new s(0,42,45),new s(0,50,53)]),n.strictEqual(g.previewText,"foo bar 123456\u27EA 117 characters skipped \u27EBo bar baz bar")}),test("trims lines endings",()=>{const t=new l(5,3,5,5),e={matchLines:1,charsPerLine:1e4};n.strictEqual(new o(`foo bar
`,t,e).previewText,"foo bar"),n.strictEqual(new o(`foo bar\r
`,t,e).previewText,"foo bar")})});
