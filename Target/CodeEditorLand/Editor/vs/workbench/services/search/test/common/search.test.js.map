{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/search/test/common/search.test.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport assert from 'assert';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from '../../../../../base/test/common/utils.js';\nimport { ITextSearchPreviewOptions, OneLineRange, TextSearchMatch, SearchRange } from '../../common/search.js';\n\nsuite('TextSearchResult', () => {\n\n\tconst previewOptions1: ITextSearchPreviewOptions = {\n\t\tmatchLines: 1,\n\t\tcharsPerLine: 100\n\t};\n\n\tfunction assertOneLinePreviewRangeText(text: string, result: TextSearchMatch): void {\n\t\tassert.strictEqual(result.rangeLocations.length, 1);\n\t\tassert.strictEqual(\n\t\t\tresult.previewText.substring((result.rangeLocations[0].preview).startColumn, (result.rangeLocations[0].preview).endColumn),\n\t\t\ttext);\n\t}\n\n\tfunction getFirstSourceFromResult(result: TextSearchMatch): OneLineRange {\n\t\treturn result.rangeLocations.map(e => e.source)[0];\n\t}\n\n\tensureNoDisposablesAreLeakedInTestSuite();\n\n\ttest('empty without preview options', () => {\n\t\tconst range = new OneLineRange(5, 0, 0);\n\t\tconst result = new TextSearchMatch('', range);\n\t\tassert.deepStrictEqual(getFirstSourceFromResult(result), range);\n\t\tassertOneLinePreviewRangeText('', result);\n\t});\n\n\ttest('empty with preview options', () => {\n\t\tconst range = new OneLineRange(5, 0, 0);\n\t\tconst result = new TextSearchMatch('', range, previewOptions1);\n\t\tassert.deepStrictEqual(getFirstSourceFromResult(result), range);\n\t\tassertOneLinePreviewRangeText('', result);\n\t});\n\n\ttest('short without preview options', () => {\n\t\tconst range = new OneLineRange(5, 4, 7);\n\t\tconst result = new TextSearchMatch('foo bar', range);\n\t\tassert.deepStrictEqual(getFirstSourceFromResult(result), range);\n\t\tassertOneLinePreviewRangeText('bar', result);\n\t});\n\n\ttest('short with preview options', () => {\n\t\tconst range = new OneLineRange(5, 4, 7);\n\t\tconst result = new TextSearchMatch('foo bar', range, previewOptions1);\n\t\tassert.deepStrictEqual(getFirstSourceFromResult(result), range);\n\t\tassertOneLinePreviewRangeText('bar', result);\n\t});\n\n\ttest('leading', () => {\n\t\tconst range = new OneLineRange(5, 25, 28);\n\t\tconst result = new TextSearchMatch('long text very long text foo', range, previewOptions1);\n\t\tassert.deepStrictEqual(getFirstSourceFromResult(result), range);\n\t\tassertOneLinePreviewRangeText('foo', result);\n\t});\n\n\ttest('trailing', () => {\n\t\tconst range = new OneLineRange(5, 0, 3);\n\t\tconst result = new TextSearchMatch('foo long text very long text long text very long text long text very long text long text very long text long text very long text', range, previewOptions1);\n\t\tassert.deepStrictEqual(getFirstSourceFromResult(result), range);\n\t\tassertOneLinePreviewRangeText('foo', result);\n\t});\n\n\ttest('middle', () => {\n\t\tconst range = new OneLineRange(5, 30, 33);\n\t\tconst result = new TextSearchMatch('long text very long text long foo text very long text long text very long text long text very long text long text very long text', range, previewOptions1);\n\t\tassert.deepStrictEqual(getFirstSourceFromResult(result), range);\n\t\tassertOneLinePreviewRangeText('foo', result);\n\t});\n\n\ttest('truncating match', () => {\n\t\tconst previewOptions: ITextSearchPreviewOptions = {\n\t\t\tmatchLines: 1,\n\t\t\tcharsPerLine: 1\n\t\t};\n\n\t\tconst range = new OneLineRange(0, 4, 7);\n\t\tconst result = new TextSearchMatch('foo bar', range, previewOptions);\n\t\tassert.deepStrictEqual(getFirstSourceFromResult(result), range);\n\t\tassertOneLinePreviewRangeText('b', result);\n\t});\n\n\ttest('one line of multiline match', () => {\n\t\tconst previewOptions: ITextSearchPreviewOptions = {\n\t\t\tmatchLines: 1,\n\t\t\tcharsPerLine: 10000\n\t\t};\n\n\t\tconst range = new SearchRange(5, 4, 6, 3);\n\t\tconst result = new TextSearchMatch('foo bar\\nfoo bar', range, previewOptions);\n\t\tassert.deepStrictEqual(getFirstSourceFromResult(result), range);\n\t\tassert.strictEqual(result.previewText, 'foo bar\\nfoo bar');\n\t\tassert.strictEqual(result.rangeLocations.length, 1);\n\t\tassert.strictEqual(result.rangeLocations[0].preview.startLineNumber, 0);\n\t\tassert.strictEqual(result.rangeLocations[0].preview.startColumn, 4);\n\t\tassert.strictEqual(result.rangeLocations[0].preview.endLineNumber, 1);\n\t\tassert.strictEqual(result.rangeLocations[0].preview.endColumn, 3);\n\t});\n\n\ttest('compacts multiple ranges on long lines', () => {\n\t\tconst previewOptions: ITextSearchPreviewOptions = {\n\t\t\tmatchLines: 1,\n\t\t\tcharsPerLine: 10\n\t\t};\n\n\t\tconst range1 = new SearchRange(5, 4, 5, 7);\n\t\tconst range2 = new SearchRange(5, 133, 5, 136);\n\t\tconst range3 = new SearchRange(5, 141, 5, 144);\n\t\tconst result = new TextSearchMatch('foo bar 123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890 foo bar baz bar', [range1, range2, range3], previewOptions);\n\t\tassert.deepStrictEqual(result.rangeLocations.map(e => e.preview), [new OneLineRange(0, 4, 7), new OneLineRange(0, 42, 45), new OneLineRange(0, 50, 53)]);\n\t\tassert.strictEqual(result.previewText, 'foo bar 123456\u27EA 117 characters skipped \u27EBo bar baz bar');\n\t});\n\n\ttest('trims lines endings', () => {\n\t\tconst range = new SearchRange(5, 3, 5, 5);\n\t\tconst previewOptions: ITextSearchPreviewOptions = {\n\t\t\tmatchLines: 1,\n\t\t\tcharsPerLine: 10000\n\t\t};\n\n\t\tassert.strictEqual(new TextSearchMatch('foo bar\\n', range, previewOptions).previewText, 'foo bar');\n\t\tassert.strictEqual(new TextSearchMatch('foo bar\\r\\n', range, previewOptions).previewText, 'foo bar');\n\t});\n\n\t// test('all lines of multiline match', () => {\n\t// \tconst previewOptions: ITextSearchPreviewOptions = {\n\t// \t\tmatchLines: 5,\n\t// \t\tcharsPerLine: 10000\n\t// \t};\n\n\t// \tconst range = new SearchRange(5, 4, 6, 3);\n\t// \tconst result = new TextSearchResult('foo bar\\nfoo bar', range, previewOptions);\n\t// \tassert.deepStrictEqual(result.range, range);\n\t// \tassertPreviewRangeText('bar\\nfoo', result);\n\t// });\n});\n"],
  "mappings": "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",
  "names": []
}
