{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/search/test/node/search.integrationTest.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport assert from 'assert';\nimport * as path from '../../../../../base/common/path.js';\nimport * as platform from '../../../../../base/common/platform.js';\nimport { joinPath } from '../../../../../base/common/resources.js';\nimport { URI } from '../../../../../base/common/uri.js';\nimport { IFolderQuery, QueryType, IRawFileMatch } from '../../common/search.js';\nimport { Engine as FileSearchEngine, FileWalker } from '../../node/fileSearch.js';\nimport { flakySuite } from '../../../../../base/test/node/testUtils.js';\nimport { FileAccess } from '../../../../../base/common/network.js';\n\nconst TEST_FIXTURES = path.normalize(FileAccess.asFileUri('vs/workbench/services/search/test/node/fixtures').fsPath);\nconst EXAMPLES_FIXTURES = URI.file(path.join(TEST_FIXTURES, 'examples'));\nconst MORE_FIXTURES = URI.file(path.join(TEST_FIXTURES, 'more'));\nconst TEST_ROOT_FOLDER: IFolderQuery = { folder: URI.file(TEST_FIXTURES) };\nconst ROOT_FOLDER_QUERY: IFolderQuery[] = [\n\tTEST_ROOT_FOLDER\n];\n\nconst ROOT_FOLDER_QUERY_36438: IFolderQuery[] = [\n\t{ folder: URI.file(path.normalize(FileAccess.asFileUri('vs/workbench/services/search/test/node/fixtures2/36438').fsPath)) }\n];\n\nconst MULTIROOT_QUERIES: IFolderQuery[] = [\n\t{ folder: EXAMPLES_FIXTURES },\n\t{ folder: MORE_FIXTURES }\n];\n\nflakySuite('FileSearchEngine', () => {\n\n\ttest('Files: *.js', function (done: () => void) {\n\t\tconst engine = new FileSearchEngine({\n\t\t\ttype: QueryType.File,\n\t\t\tfolderQueries: ROOT_FOLDER_QUERY,\n\t\t\tfilePattern: '*.js'\n\t\t});\n\n\t\tlet count = 0;\n\t\tengine.search((result) => {\n\t\t\tif (result) {\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}, () => { }, (error) => {\n\t\t\tassert.ok(!error);\n\t\t\tassert.strictEqual(count, 4);\n\t\t\tdone();\n\t\t});\n\t});\n\n\ttest('Files: maxResults', function (done: () => void) {\n\t\tconst engine = new FileSearchEngine({\n\t\t\ttype: QueryType.File,\n\t\t\tfolderQueries: ROOT_FOLDER_QUERY,\n\t\t\tmaxResults: 1\n\t\t});\n\n\t\tlet count = 0;\n\t\tengine.search((result) => {\n\t\t\tif (result) {\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}, () => { }, (error) => {\n\t\t\tassert.ok(!error);\n\t\t\tassert.strictEqual(count, 1);\n\t\t\tdone();\n\t\t});\n\t});\n\n\ttest('Files: maxResults without Ripgrep', function (done: () => void) {\n\t\tconst engine = new FileSearchEngine({\n\t\t\ttype: QueryType.File,\n\t\t\tfolderQueries: ROOT_FOLDER_QUERY,\n\t\t\tmaxResults: 1,\n\t\t});\n\n\t\tlet count = 0;\n\t\tengine.search((result) => {\n\t\t\tif (result) {\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}, () => { }, (error) => {\n\t\t\tassert.ok(!error);\n\t\t\tassert.strictEqual(count, 1);\n\t\t\tdone();\n\t\t});\n\t});\n\n\ttest('Files: exists', function (done: () => void) {\n\t\tconst engine = new FileSearchEngine({\n\t\t\ttype: QueryType.File,\n\t\t\tfolderQueries: ROOT_FOLDER_QUERY,\n\t\t\tincludePattern: { '**/file.txt': true },\n\t\t\texists: true\n\t\t});\n\n\t\tlet count = 0;\n\t\tengine.search((result) => {\n\t\t\tif (result) {\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}, () => { }, (error, complete) => {\n\t\t\tassert.ok(!error);\n\t\t\tassert.strictEqual(count, 0);\n\t\t\tassert.ok(complete.limitHit);\n\t\t\tdone();\n\t\t});\n\t});\n\n\ttest('Files: not exists', function (done: () => void) {\n\t\tconst engine = new FileSearchEngine({\n\t\t\ttype: QueryType.File,\n\t\t\tfolderQueries: ROOT_FOLDER_QUERY,\n\t\t\tincludePattern: { '**/nofile.txt': true },\n\t\t\texists: true\n\t\t});\n\n\t\tlet count = 0;\n\t\tengine.search((result) => {\n\t\t\tif (result) {\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}, () => { }, (error, complete) => {\n\t\t\tassert.ok(!error);\n\t\t\tassert.strictEqual(count, 0);\n\t\t\tassert.ok(!complete.limitHit);\n\t\t\tdone();\n\t\t});\n\t});\n\n\ttest('Files: exists without Ripgrep', function (done: () => void) {\n\t\tconst engine = new FileSearchEngine({\n\t\t\ttype: QueryType.File,\n\t\t\tfolderQueries: ROOT_FOLDER_QUERY,\n\t\t\tincludePattern: { '**/file.txt': true },\n\t\t\texists: true,\n\t\t});\n\n\t\tlet count = 0;\n\t\tengine.search((result) => {\n\t\t\tif (result) {\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}, () => { }, (error, complete) => {\n\t\t\tassert.ok(!error);\n\t\t\tassert.strictEqual(count, 0);\n\t\t\tassert.ok(complete.limitHit);\n\t\t\tdone();\n\t\t});\n\t});\n\n\ttest('Files: not exists without Ripgrep', function (done: () => void) {\n\t\tconst engine = new FileSearchEngine({\n\t\t\ttype: QueryType.File,\n\t\t\tfolderQueries: ROOT_FOLDER_QUERY,\n\t\t\tincludePattern: { '**/nofile.txt': true },\n\t\t\texists: true,\n\t\t});\n\n\t\tlet count = 0;\n\t\tengine.search((result) => {\n\t\t\tif (result) {\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}, () => { }, (error, complete) => {\n\t\t\tassert.ok(!error);\n\t\t\tassert.strictEqual(count, 0);\n\t\t\tassert.ok(!complete.limitHit);\n\t\t\tdone();\n\t\t});\n\t});\n\n\ttest('Files: examples/com*', function (done: () => void) {\n\t\tconst engine = new FileSearchEngine({\n\t\t\ttype: QueryType.File,\n\t\t\tfolderQueries: ROOT_FOLDER_QUERY,\n\t\t\tfilePattern: path.join('examples', 'com*')\n\t\t});\n\n\t\tlet count = 0;\n\t\tengine.search((result) => {\n\t\t\tif (result) {\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}, () => { }, (error) => {\n\t\t\tassert.ok(!error);\n\t\t\tassert.strictEqual(count, 1);\n\t\t\tdone();\n\t\t});\n\t});\n\n\ttest('Files: examples (fuzzy)', function (done: () => void) {\n\t\tconst engine = new FileSearchEngine({\n\t\t\ttype: QueryType.File,\n\t\t\tfolderQueries: ROOT_FOLDER_QUERY,\n\t\t\tfilePattern: 'xl'\n\t\t});\n\n\t\tlet count = 0;\n\t\tengine.search((result) => {\n\t\t\tif (result) {\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}, () => { }, (error) => {\n\t\t\tassert.ok(!error);\n\t\t\tassert.strictEqual(count, 7);\n\t\t\tdone();\n\t\t});\n\t});\n\n\ttest('Files: multiroot', function (done: () => void) {\n\t\tconst engine = new FileSearchEngine({\n\t\t\ttype: QueryType.File,\n\t\t\tfolderQueries: MULTIROOT_QUERIES,\n\t\t\tfilePattern: 'file'\n\t\t});\n\n\t\tlet count = 0;\n\t\tengine.search((result) => {\n\t\t\tif (result) {\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}, () => { }, (error) => {\n\t\t\tassert.ok(!error);\n\t\t\tassert.strictEqual(count, 3);\n\t\t\tdone();\n\t\t});\n\t});\n\n\ttest('Files: multiroot with includePattern and maxResults', function (done: () => void) {\n\t\tconst engine = new FileSearchEngine({\n\t\t\ttype: QueryType.File,\n\t\t\tfolderQueries: MULTIROOT_QUERIES,\n\t\t\tmaxResults: 1,\n\t\t\tincludePattern: {\n\t\t\t\t'*.txt': true,\n\t\t\t\t'*.js': true\n\t\t\t},\n\t\t});\n\n\t\tlet count = 0;\n\t\tengine.search((result) => {\n\t\t\tif (result) {\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}, () => { }, (error, complete) => {\n\t\t\tassert.ok(!error);\n\t\t\tassert.strictEqual(count, 1);\n\t\t\tdone();\n\t\t});\n\t});\n\n\ttest('Files: multiroot with includePattern and exists', function (done: () => void) {\n\t\tconst engine = new FileSearchEngine({\n\t\t\ttype: QueryType.File,\n\t\t\tfolderQueries: MULTIROOT_QUERIES,\n\t\t\texists: true,\n\t\t\tincludePattern: {\n\t\t\t\t'*.txt': true,\n\t\t\t\t'*.js': true\n\t\t\t},\n\t\t});\n\n\t\tlet count = 0;\n\t\tengine.search((result) => {\n\t\t\tif (result) {\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}, () => { }, (error, complete) => {\n\t\t\tassert.ok(!error);\n\t\t\tassert.strictEqual(count, 0);\n\t\t\tassert.ok(complete.limitHit);\n\t\t\tdone();\n\t\t});\n\t});\n\n\ttest('Files: NPE (CamelCase)', function (done: () => void) {\n\t\tconst engine = new FileSearchEngine({\n\t\t\ttype: QueryType.File,\n\t\t\tfolderQueries: ROOT_FOLDER_QUERY,\n\t\t\tfilePattern: 'NullPE'\n\t\t});\n\n\t\tlet count = 0;\n\t\tengine.search((result) => {\n\t\t\tif (result) {\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}, () => { }, (error) => {\n\t\t\tassert.ok(!error);\n\t\t\tassert.strictEqual(count, 1);\n\t\t\tdone();\n\t\t});\n\t});\n\n\ttest('Files: *.*', function (done: () => void) {\n\t\tconst engine = new FileSearchEngine({\n\t\t\ttype: QueryType.File,\n\t\t\tfolderQueries: ROOT_FOLDER_QUERY,\n\t\t\tfilePattern: '*.*'\n\t\t});\n\n\t\tlet count = 0;\n\t\tengine.search((result) => {\n\t\t\tif (result) {\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}, () => { }, (error) => {\n\t\t\tassert.ok(!error);\n\t\t\tassert.strictEqual(count, 14);\n\t\t\tdone();\n\t\t});\n\t});\n\n\ttest('Files: *.as', function (done: () => void) {\n\t\tconst engine = new FileSearchEngine({\n\t\t\ttype: QueryType.File,\n\t\t\tfolderQueries: ROOT_FOLDER_QUERY,\n\t\t\tfilePattern: '*.as'\n\t\t});\n\n\t\tlet count = 0;\n\t\tengine.search((result) => {\n\t\t\tif (result) {\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}, () => { }, (error) => {\n\t\t\tassert.ok(!error);\n\t\t\tassert.strictEqual(count, 0);\n\t\t\tdone();\n\t\t});\n\t});\n\n\ttest('Files: *.* without derived', function (done: () => void) {\n\t\tconst engine = new FileSearchEngine({\n\t\t\ttype: QueryType.File,\n\t\t\tfolderQueries: ROOT_FOLDER_QUERY,\n\t\t\tfilePattern: 'site.*',\n\t\t\texcludePattern: { '**/*.css': { 'when': '$(basename).less' } }\n\t\t});\n\n\t\tlet count = 0;\n\t\tlet res: IRawFileMatch;\n\t\tengine.search((result) => {\n\t\t\tif (result) {\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\tres = result;\n\t\t}, () => { }, (error) => {\n\t\t\tassert.ok(!error);\n\t\t\tassert.strictEqual(count, 1);\n\t\t\tassert.strictEqual(path.basename(res.relativePath), 'site.less');\n\t\t\tdone();\n\t\t});\n\t});\n\n\ttest('Files: *.* exclude folder without wildcard', function (done: () => void) {\n\t\tconst engine = new FileSearchEngine({\n\t\t\ttype: QueryType.File,\n\t\t\tfolderQueries: ROOT_FOLDER_QUERY,\n\t\t\tfilePattern: '*.*',\n\t\t\texcludePattern: { 'examples': true }\n\t\t});\n\n\t\tlet count = 0;\n\t\tengine.search((result) => {\n\t\t\tif (result) {\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}, () => { }, (error) => {\n\t\t\tassert.ok(!error);\n\t\t\tassert.strictEqual(count, 8);\n\t\t\tdone();\n\t\t});\n\t});\n\n\ttest('Files: exclude folder without wildcard #36438', function (done: () => void) {\n\t\tconst engine = new FileSearchEngine({\n\t\t\ttype: QueryType.File,\n\t\t\tfolderQueries: ROOT_FOLDER_QUERY_36438,\n\t\t\texcludePattern: { 'modules': true }\n\t\t});\n\n\t\tlet count = 0;\n\t\tengine.search((result) => {\n\t\t\tif (result) {\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}, () => { }, (error) => {\n\t\t\tassert.ok(!error);\n\t\t\tassert.strictEqual(count, 1);\n\t\t\tdone();\n\t\t});\n\t});\n\n\ttest('Files: include folder without wildcard #36438', function (done: () => void) {\n\t\tconst engine = new FileSearchEngine({\n\t\t\ttype: QueryType.File,\n\t\t\tfolderQueries: ROOT_FOLDER_QUERY_36438,\n\t\t\tincludePattern: { 'modules/**': true }\n\t\t});\n\n\t\tlet count = 0;\n\t\tengine.search((result) => {\n\t\t\tif (result) {\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}, () => { }, (error) => {\n\t\t\tassert.ok(!error);\n\t\t\tassert.strictEqual(count, 1);\n\t\t\tdone();\n\t\t});\n\t});\n\n\ttest('Files: *.* exclude folder with leading wildcard', function (done: () => void) {\n\t\tconst engine = new FileSearchEngine({\n\t\t\ttype: QueryType.File,\n\t\t\tfolderQueries: ROOT_FOLDER_QUERY,\n\t\t\tfilePattern: '*.*',\n\t\t\texcludePattern: { '**/examples': true }\n\t\t});\n\n\t\tlet count = 0;\n\t\tengine.search((result) => {\n\t\t\tif (result) {\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}, () => { }, (error) => {\n\t\t\tassert.ok(!error);\n\t\t\tassert.strictEqual(count, 8);\n\t\t\tdone();\n\t\t});\n\t});\n\n\ttest('Files: *.* exclude folder with trailing wildcard', function (done: () => void) {\n\t\tconst engine = new FileSearchEngine({\n\t\t\ttype: QueryType.File,\n\t\t\tfolderQueries: ROOT_FOLDER_QUERY,\n\t\t\tfilePattern: '*.*',\n\t\t\texcludePattern: { 'examples/**': true }\n\t\t});\n\n\t\tlet count = 0;\n\t\tengine.search((result) => {\n\t\t\tif (result) {\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}, () => { }, (error) => {\n\t\t\tassert.ok(!error);\n\t\t\tassert.strictEqual(count, 8);\n\t\t\tdone();\n\t\t});\n\t});\n\n\ttest('Files: *.* exclude with unicode', function (done: () => void) {\n\t\tconst engine = new FileSearchEngine({\n\t\t\ttype: QueryType.File,\n\t\t\tfolderQueries: ROOT_FOLDER_QUERY,\n\t\t\tfilePattern: '*.*',\n\t\t\texcludePattern: { '**/\u00FCm laut\u6C49\u8BED': true }\n\t\t});\n\n\t\tlet count = 0;\n\t\tengine.search((result) => {\n\t\t\tif (result) {\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}, () => { }, (error) => {\n\t\t\tassert.ok(!error);\n\t\t\tassert.strictEqual(count, 13);\n\t\t\tdone();\n\t\t});\n\t});\n\n\ttest('Files: *.* include with unicode', function (done: () => void) {\n\t\tconst engine = new FileSearchEngine({\n\t\t\ttype: QueryType.File,\n\t\t\tfolderQueries: ROOT_FOLDER_QUERY,\n\t\t\tfilePattern: '*.*',\n\t\t\tincludePattern: { '**/\u00FCm laut\u6C49\u8BED/*': true }\n\t\t});\n\n\t\tlet count = 0;\n\t\tengine.search((result) => {\n\t\t\tif (result) {\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}, () => { }, (error) => {\n\t\t\tassert.ok(!error);\n\t\t\tassert.strictEqual(count, 1);\n\t\t\tdone();\n\t\t});\n\t});\n\n\ttest('Files: multiroot with exclude', function (done: () => void) {\n\t\tconst folderQueries: IFolderQuery[] = [\n\t\t\t{\n\t\t\t\tfolder: EXAMPLES_FIXTURES,\n\t\t\t\texcludePattern: [{\n\t\t\t\t\tpattern: { '**/anotherfile.txt': true }\n\t\t\t\t}]\n\t\t\t},\n\t\t\t{\n\t\t\t\tfolder: MORE_FIXTURES,\n\t\t\t\texcludePattern: [{\n\t\t\t\t\tpattern: {\n\t\t\t\t\t\t'**/file.txt': true\n\t\t\t\t\t}\n\t\t\t\t}]\n\t\t\t}\n\t\t];\n\n\t\tconst engine = new FileSearchEngine({\n\t\t\ttype: QueryType.File,\n\t\t\tfolderQueries,\n\t\t\tfilePattern: '*'\n\t\t});\n\n\t\tlet count = 0;\n\t\tengine.search((result) => {\n\t\t\tif (result) {\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}, () => { }, (error) => {\n\t\t\tassert.ok(!error);\n\t\t\tassert.strictEqual(count, 5);\n\t\t\tdone();\n\t\t});\n\t});\n\n\ttest('Files: Unicode and Spaces', function (done: () => void) {\n\t\tconst engine = new FileSearchEngine({\n\t\t\ttype: QueryType.File,\n\t\t\tfolderQueries: ROOT_FOLDER_QUERY,\n\t\t\tfilePattern: '\u6C49\u8BED'\n\t\t});\n\n\t\tlet count = 0;\n\t\tlet res: IRawFileMatch;\n\t\tengine.search((result) => {\n\t\t\tif (result) {\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\tres = result;\n\t\t}, () => { }, (error) => {\n\t\t\tassert.ok(!error);\n\t\t\tassert.strictEqual(count, 1);\n\t\t\tassert.strictEqual(path.basename(res.relativePath), '\u6C49\u8BED.txt');\n\t\t\tdone();\n\t\t});\n\t});\n\n\ttest('Files: no results', function (done: () => void) {\n\t\tconst engine = new FileSearchEngine({\n\t\t\ttype: QueryType.File,\n\t\t\tfolderQueries: ROOT_FOLDER_QUERY,\n\t\t\tfilePattern: 'nofilematch'\n\t\t});\n\n\t\tlet count = 0;\n\t\tengine.search((result) => {\n\t\t\tif (result) {\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}, () => { }, (error) => {\n\t\t\tassert.ok(!error);\n\t\t\tassert.strictEqual(count, 0);\n\t\t\tdone();\n\t\t});\n\t});\n\n\ttest('Files: relative path matched once', function (done: () => void) {\n\t\tconst engine = new FileSearchEngine({\n\t\t\ttype: QueryType.File,\n\t\t\tfolderQueries: ROOT_FOLDER_QUERY,\n\t\t\tfilePattern: path.normalize(path.join('examples', 'company.js'))\n\t\t});\n\n\t\tlet count = 0;\n\t\tlet res: IRawFileMatch;\n\t\tengine.search((result) => {\n\t\t\tif (result) {\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\tres = result;\n\t\t}, () => { }, (error) => {\n\t\t\tassert.ok(!error);\n\t\t\tassert.strictEqual(count, 1);\n\t\t\tassert.strictEqual(path.basename(res.relativePath), 'company.js');\n\t\t\tdone();\n\t\t});\n\t});\n\n\ttest('Files: Include pattern, single files', function (done: () => void) {\n\t\tconst engine = new FileSearchEngine({\n\t\t\ttype: QueryType.File,\n\t\t\tfolderQueries: ROOT_FOLDER_QUERY,\n\t\t\tincludePattern: {\n\t\t\t\t'site.css': true,\n\t\t\t\t'examples/company.js': true,\n\t\t\t\t'examples/subfolder/subfile.txt': true\n\t\t\t}\n\t\t});\n\n\t\tconst res: IRawFileMatch[] = [];\n\t\tengine.search((result) => {\n\t\t\tres.push(result);\n\t\t}, () => { }, (error) => {\n\t\t\tassert.ok(!error);\n\t\t\tconst basenames = res.map(r => path.basename(r.relativePath));\n\t\t\tassert.ok(basenames.indexOf('site.css') !== -1, `site.css missing in ${JSON.stringify(basenames)}`);\n\t\t\tassert.ok(basenames.indexOf('company.js') !== -1, `company.js missing in ${JSON.stringify(basenames)}`);\n\t\t\tassert.ok(basenames.indexOf('subfile.txt') !== -1, `subfile.txt missing in ${JSON.stringify(basenames)}`);\n\t\t\tdone();\n\t\t});\n\t});\n\n\ttest('Files: extraFiles only', function (done: () => void) {\n\t\tconst engine = new FileSearchEngine({\n\t\t\ttype: QueryType.File,\n\t\t\tfolderQueries: [],\n\t\t\textraFileResources: [\n\t\t\t\tURI.file(path.normalize(path.join(FileAccess.asFileUri('vs/workbench/services/search/test/node/fixtures').fsPath, 'site.css'))),\n\t\t\t\tURI.file(path.normalize(path.join(FileAccess.asFileUri('vs/workbench/services/search/test/node/fixtures').fsPath, 'examples', 'company.js'))),\n\t\t\t\tURI.file(path.normalize(path.join(FileAccess.asFileUri('vs/workbench/services/search/test/node/fixtures').fsPath, 'index.html')))\n\t\t\t],\n\t\t\tfilePattern: '*.js'\n\t\t});\n\n\t\tlet count = 0;\n\t\tlet res: IRawFileMatch;\n\t\tengine.search((result) => {\n\t\t\tif (result) {\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\tres = result;\n\t\t}, () => { }, (error) => {\n\t\t\tassert.ok(!error);\n\t\t\tassert.strictEqual(count, 1);\n\t\t\tassert.strictEqual(path.basename(res.relativePath), 'company.js');\n\t\t\tdone();\n\t\t});\n\t});\n\n\ttest('Files: extraFiles only (with include)', function (done: () => void) {\n\t\tconst engine = new FileSearchEngine({\n\t\t\ttype: QueryType.File,\n\t\t\tfolderQueries: [],\n\t\t\textraFileResources: [\n\t\t\t\tURI.file(path.normalize(path.join(FileAccess.asFileUri('vs/workbench/services/search/test/node/fixtures').fsPath, 'site.css'))),\n\t\t\t\tURI.file(path.normalize(path.join(FileAccess.asFileUri('vs/workbench/services/search/test/node/fixtures').fsPath, 'examples', 'company.js'))),\n\t\t\t\tURI.file(path.normalize(path.join(FileAccess.asFileUri('vs/workbench/services/search/test/node/fixtures').fsPath, 'index.html')))\n\t\t\t],\n\t\t\tfilePattern: '*.*',\n\t\t\tincludePattern: { '**/*.css': true }\n\t\t});\n\n\t\tlet count = 0;\n\t\tlet res: IRawFileMatch;\n\t\tengine.search((result) => {\n\t\t\tif (result) {\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\tres = result;\n\t\t}, () => { }, (error) => {\n\t\t\tassert.ok(!error);\n\t\t\tassert.strictEqual(count, 1);\n\t\t\tassert.strictEqual(path.basename(res.relativePath), 'site.css');\n\t\t\tdone();\n\t\t});\n\t});\n\n\ttest('Files: extraFiles only (with exclude)', function (done: () => void) {\n\t\tconst engine = new FileSearchEngine({\n\t\t\ttype: QueryType.File,\n\t\t\tfolderQueries: [],\n\t\t\textraFileResources: [\n\t\t\t\tURI.file(path.normalize(path.join(FileAccess.asFileUri('vs/workbench/services/search/test/node/fixtures').fsPath, 'site.css'))),\n\t\t\t\tURI.file(path.normalize(path.join(FileAccess.asFileUri('vs/workbench/services/search/test/node/fixtures').fsPath, 'examples', 'company.js'))),\n\t\t\t\tURI.file(path.normalize(path.join(FileAccess.asFileUri('vs/workbench/services/search/test/node/fixtures').fsPath, 'index.html')))\n\t\t\t],\n\t\t\tfilePattern: '*.*',\n\t\t\texcludePattern: { '**/*.css': true }\n\t\t});\n\n\t\tlet count = 0;\n\t\tengine.search((result) => {\n\t\t\tif (result) {\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}, () => { }, (error) => {\n\t\t\tassert.ok(!error);\n\t\t\tassert.strictEqual(count, 2);\n\t\t\tdone();\n\t\t});\n\t});\n\n\ttest('Files: no dupes in nested folders', function (done: () => void) {\n\t\tconst engine = new FileSearchEngine({\n\t\t\ttype: QueryType.File,\n\t\t\tfolderQueries: [\n\t\t\t\t{ folder: EXAMPLES_FIXTURES },\n\t\t\t\t{ folder: joinPath(EXAMPLES_FIXTURES, 'subfolder') }\n\t\t\t],\n\t\t\tfilePattern: 'subfile.txt'\n\t\t});\n\n\t\tlet count = 0;\n\t\tengine.search((result) => {\n\t\t\tif (result) {\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}, () => { }, (error) => {\n\t\t\tassert.ok(!error);\n\t\t\tassert.strictEqual(count, 1);\n\t\t\tdone();\n\t\t});\n\t});\n});\n\nflakySuite('FileWalker', () => {\n\n\t(platform.isWindows ? test.skip : test)('Find: exclude subfolder', function (done: () => void) {\n\t\tconst file0 = './more/file.txt';\n\t\tconst file1 = './examples/subfolder/subfile.txt';\n\n\t\tconst walker = new FileWalker({\n\t\t\ttype: QueryType.File,\n\t\t\tfolderQueries: ROOT_FOLDER_QUERY,\n\t\t\texcludePattern: { '**/something': true }\n\t\t});\n\t\tconst cmd1 = walker.spawnFindCmd(TEST_ROOT_FOLDER);\n\t\twalker.readStdout(cmd1, 'utf8', (err1, stdout1) => {\n\t\t\tassert.strictEqual(err1, null);\n\t\t\tassert.notStrictEqual(stdout1!.split('\\n').indexOf(file0), -1, stdout1);\n\t\t\tassert.notStrictEqual(stdout1!.split('\\n').indexOf(file1), -1, stdout1);\n\n\t\t\tconst walker = new FileWalker({\n\t\t\t\ttype: QueryType.File,\n\t\t\t\tfolderQueries: ROOT_FOLDER_QUERY,\n\t\t\t\texcludePattern: { '**/subfolder': true }\n\t\t\t});\n\t\t\tconst cmd2 = walker.spawnFindCmd(TEST_ROOT_FOLDER);\n\t\t\twalker.readStdout(cmd2, 'utf8', (err2, stdout2) => {\n\t\t\t\tassert.strictEqual(err2, null);\n\t\t\t\tassert.notStrictEqual(stdout1!.split('\\n').indexOf(file0), -1, stdout1);\n\t\t\t\tassert.strictEqual(stdout2!.split('\\n').indexOf(file1), -1, stdout2);\n\t\t\t\tdone();\n\t\t\t});\n\t\t});\n\t});\n\n\t(platform.isWindows ? test.skip : test)('Find: folder excludes', function (done: () => void) {\n\t\tconst folderQueries: IFolderQuery[] = [\n\t\t\t{\n\t\t\t\tfolder: URI.file(TEST_FIXTURES),\n\t\t\t\texcludePattern: [{\n\t\t\t\t\tpattern: { '**/subfolder': true }\n\t\t\t\t}]\n\t\t\t}\n\t\t];\n\n\t\tconst file0 = './more/file.txt';\n\t\tconst file1 = './examples/subfolder/subfile.txt';\n\n\t\tconst walker = new FileWalker({ type: QueryType.File, folderQueries });\n\t\tconst cmd1 = walker.spawnFindCmd(folderQueries[0]);\n\t\twalker.readStdout(cmd1, 'utf8', (err1, stdout1) => {\n\t\t\tassert.strictEqual(err1, null);\n\t\t\tassert(outputContains(stdout1!, file0), stdout1);\n\t\t\tassert(!outputContains(stdout1!, file1), stdout1);\n\t\t\tdone();\n\t\t});\n\t});\n\n\t(platform.isWindows ? test.skip : test)('Find: exclude multiple folders', function (done: () => void) {\n\t\tconst file0 = './index.html';\n\t\tconst file1 = './examples/small.js';\n\t\tconst file2 = './more/file.txt';\n\n\t\tconst walker = new FileWalker({ type: QueryType.File, folderQueries: ROOT_FOLDER_QUERY, excludePattern: { '**/something': true } });\n\t\tconst cmd1 = walker.spawnFindCmd(TEST_ROOT_FOLDER);\n\t\twalker.readStdout(cmd1, 'utf8', (err1, stdout1) => {\n\t\t\tassert.strictEqual(err1, null);\n\t\t\tassert.notStrictEqual(stdout1!.split('\\n').indexOf(file0), -1, stdout1);\n\t\t\tassert.notStrictEqual(stdout1!.split('\\n').indexOf(file1), -1, stdout1);\n\t\t\tassert.notStrictEqual(stdout1!.split('\\n').indexOf(file2), -1, stdout1);\n\n\t\t\tconst walker = new FileWalker({ type: QueryType.File, folderQueries: ROOT_FOLDER_QUERY, excludePattern: { '{**/examples,**/more}': true } });\n\t\t\tconst cmd2 = walker.spawnFindCmd(TEST_ROOT_FOLDER);\n\t\t\twalker.readStdout(cmd2, 'utf8', (err2, stdout2) => {\n\t\t\t\tassert.strictEqual(err2, null);\n\t\t\t\tassert.notStrictEqual(stdout1!.split('\\n').indexOf(file0), -1, stdout1);\n\t\t\t\tassert.strictEqual(stdout2!.split('\\n').indexOf(file1), -1, stdout2);\n\t\t\t\tassert.strictEqual(stdout2!.split('\\n').indexOf(file2), -1, stdout2);\n\t\t\t\tdone();\n\t\t\t});\n\t\t});\n\t});\n\n\t(platform.isWindows ? test.skip : test)('Find: exclude folder path suffix', function (done: () => void) {\n\t\tconst file0 = './examples/company.js';\n\t\tconst file1 = './examples/subfolder/subfile.txt';\n\n\t\tconst walker = new FileWalker({ type: QueryType.File, folderQueries: ROOT_FOLDER_QUERY, excludePattern: { '**/examples/something': true } });\n\t\tconst cmd1 = walker.spawnFindCmd(TEST_ROOT_FOLDER);\n\t\twalker.readStdout(cmd1, 'utf8', (err1, stdout1) => {\n\t\t\tassert.strictEqual(err1, null);\n\t\t\tassert.notStrictEqual(stdout1!.split('\\n').indexOf(file0), -1, stdout1);\n\t\t\tassert.notStrictEqual(stdout1!.split('\\n').indexOf(file1), -1, stdout1);\n\n\t\t\tconst walker = new FileWalker({ type: QueryType.File, folderQueries: ROOT_FOLDER_QUERY, excludePattern: { '**/examples/subfolder': true } });\n\t\t\tconst cmd2 = walker.spawnFindCmd(TEST_ROOT_FOLDER);\n\t\t\twalker.readStdout(cmd2, 'utf8', (err2, stdout2) => {\n\t\t\t\tassert.strictEqual(err2, null);\n\t\t\t\tassert.notStrictEqual(stdout1!.split('\\n').indexOf(file0), -1, stdout1);\n\t\t\t\tassert.strictEqual(stdout2!.split('\\n').indexOf(file1), -1, stdout2);\n\t\t\t\tdone();\n\t\t\t});\n\t\t});\n\t});\n\n\t(platform.isWindows ? test.skip : test)('Find: exclude subfolder path suffix', function (done: () => void) {\n\t\tconst file0 = './examples/subfolder/subfile.txt';\n\t\tconst file1 = './examples/subfolder/anotherfolder/anotherfile.txt';\n\n\t\tconst walker = new FileWalker({ type: QueryType.File, folderQueries: ROOT_FOLDER_QUERY, excludePattern: { '**/subfolder/something': true } });\n\t\tconst cmd1 = walker.spawnFindCmd(TEST_ROOT_FOLDER);\n\t\twalker.readStdout(cmd1, 'utf8', (err1, stdout1) => {\n\t\t\tassert.strictEqual(err1, null);\n\t\t\tassert.notStrictEqual(stdout1!.split('\\n').indexOf(file0), -1, stdout1);\n\t\t\tassert.notStrictEqual(stdout1!.split('\\n').indexOf(file1), -1, stdout1);\n\n\t\t\tconst walker = new FileWalker({ type: QueryType.File, folderQueries: ROOT_FOLDER_QUERY, excludePattern: { '**/subfolder/anotherfolder': true } });\n\t\t\tconst cmd2 = walker.spawnFindCmd(TEST_ROOT_FOLDER);\n\t\t\twalker.readStdout(cmd2, 'utf8', (err2, stdout2) => {\n\t\t\t\tassert.strictEqual(err2, null);\n\t\t\t\tassert.notStrictEqual(stdout1!.split('\\n').indexOf(file0), -1, stdout1);\n\t\t\t\tassert.strictEqual(stdout2!.split('\\n').indexOf(file1), -1, stdout2);\n\t\t\t\tdone();\n\t\t\t});\n\t\t});\n\t});\n\n\t(platform.isWindows ? test.skip : test)('Find: exclude folder path', function (done: () => void) {\n\t\tconst file0 = './examples/company.js';\n\t\tconst file1 = './examples/subfolder/subfile.txt';\n\n\t\tconst walker = new FileWalker({ type: QueryType.File, folderQueries: ROOT_FOLDER_QUERY, excludePattern: { 'examples/something': true } });\n\t\tconst cmd1 = walker.spawnFindCmd(TEST_ROOT_FOLDER);\n\t\twalker.readStdout(cmd1, 'utf8', (err1, stdout1) => {\n\t\t\tassert.strictEqual(err1, null);\n\t\t\tassert.notStrictEqual(stdout1!.split('\\n').indexOf(file0), -1, stdout1);\n\t\t\tassert.notStrictEqual(stdout1!.split('\\n').indexOf(file1), -1, stdout1);\n\n\t\t\tconst walker = new FileWalker({ type: QueryType.File, folderQueries: ROOT_FOLDER_QUERY, excludePattern: { 'examples/subfolder': true } });\n\t\t\tconst cmd2 = walker.spawnFindCmd(TEST_ROOT_FOLDER);\n\t\t\twalker.readStdout(cmd2, 'utf8', (err2, stdout2) => {\n\t\t\t\tassert.strictEqual(err2, null);\n\t\t\t\tassert.notStrictEqual(stdout1!.split('\\n').indexOf(file0), -1, stdout1);\n\t\t\t\tassert.strictEqual(stdout2!.split('\\n').indexOf(file1), -1, stdout2);\n\t\t\t\tdone();\n\t\t\t});\n\t\t});\n\t});\n\n\t(platform.isWindows ? test.skip : test)('Find: exclude combination of paths', function (done: () => void) {\n\t\tconst filesIn = [\n\t\t\t'./examples/subfolder/subfile.txt',\n\t\t\t'./examples/company.js',\n\t\t\t'./index.html'\n\t\t];\n\t\tconst filesOut = [\n\t\t\t'./examples/subfolder/anotherfolder/anotherfile.txt',\n\t\t\t'./more/file.txt'\n\t\t];\n\n\t\tconst walker = new FileWalker({\n\t\t\ttype: QueryType.File,\n\t\t\tfolderQueries: ROOT_FOLDER_QUERY,\n\t\t\texcludePattern: {\n\t\t\t\t'**/subfolder/anotherfolder': true,\n\t\t\t\t'**/something/else': true,\n\t\t\t\t'**/more': true,\n\t\t\t\t'**/andmore': true\n\t\t\t}\n\t\t});\n\t\tconst cmd1 = walker.spawnFindCmd(TEST_ROOT_FOLDER);\n\t\twalker.readStdout(cmd1, 'utf8', (err1, stdout1) => {\n\t\t\tassert.strictEqual(err1, null);\n\t\t\tfor (const fileIn of filesIn) {\n\t\t\t\tassert.notStrictEqual(stdout1!.split('\\n').indexOf(fileIn), -1, stdout1);\n\t\t\t}\n\t\t\tfor (const fileOut of filesOut) {\n\t\t\t\tassert.strictEqual(stdout1!.split('\\n').indexOf(fileOut), -1, stdout1);\n\t\t\t}\n\t\t\tdone();\n\t\t});\n\t});\n\n\tfunction outputContains(stdout: string, ...files: string[]): boolean {\n\t\tconst lines = stdout.split('\\n');\n\t\treturn files.every(file => lines.indexOf(file) >= 0);\n\t}\n});\n"],
  "mappings": ";;AAKA,OAAO,YAAY;AACnB,YAAY,UAAU;AACtB,YAAY,cAAc;AAC1B,SAAS,gBAAgB;AACzB,SAAS,WAAW;AACpB,SAAS,cAAc,WAAW,qBAAqB;AACvD,SAAS,UAAU,kBAAkB,kBAAkB;AACvD,SAAS,kBAAkB;AAC3B,SAAS,kBAAkB;AAE3B,MAAM,gBAAgB,KAAK,UAAU,WAAW,UAAU,iDAAiD,EAAE,MAAM;AACnH,MAAM,oBAAoB,IAAI,KAAK,KAAK,KAAK,eAAe,UAAU,CAAC;AACvE,MAAM,gBAAgB,IAAI,KAAK,KAAK,KAAK,eAAe,MAAM,CAAC;AAC/D,MAAM,mBAAiC,EAAE,QAAQ,IAAI,KAAK,aAAa,EAAE;AACzE,MAAM,oBAAoC;AAAA,EACzC;AACD;AAEA,MAAM,0BAA0C;AAAA,EAC/C,EAAE,QAAQ,IAAI,KAAK,KAAK,UAAU,WAAW,UAAU,wDAAwD,EAAE,MAAM,CAAC,EAAE;AAC3H;AAEA,MAAM,oBAAoC;AAAA,EACzC,EAAE,QAAQ,kBAAkB;AAAA,EAC5B,EAAE,QAAQ,cAAc;AACzB;AAEA,WAAW,oBAAoB,MAAM;AAEpC,OAAK,eAAe,SAAU,MAAkB;AAC/C,UAAM,SAAS,IAAI,iBAAiB;AAAA,MACnC,MAAM,UAAU;AAAA,MAChB,eAAe;AAAA,MACf,aAAa;AAAA,IACd,CAAC;AAED,QAAI,QAAQ;AACZ,WAAO,OAAO,CAAC,WAAW;AACzB,UAAI,QAAQ;AACX;AAAA,MACD;AAAA,IACD,GAAG,MAAM;AAAA,IAAE,GAAG,CAAC,UAAU;AACxB,aAAO,GAAG,CAAC,KAAK;AAChB,aAAO,YAAY,OAAO,CAAC;AAC3B,WAAK;AAAA,IACN,CAAC;AAAA,EACF,CAAC;AAED,OAAK,qBAAqB,SAAU,MAAkB;AACrD,UAAM,SAAS,IAAI,iBAAiB;AAAA,MACnC,MAAM,UAAU;AAAA,MAChB,eAAe;AAAA,MACf,YAAY;AAAA,IACb,CAAC;AAED,QAAI,QAAQ;AACZ,WAAO,OAAO,CAAC,WAAW;AACzB,UAAI,QAAQ;AACX;AAAA,MACD;AAAA,IACD,GAAG,MAAM;AAAA,IAAE,GAAG,CAAC,UAAU;AACxB,aAAO,GAAG,CAAC,KAAK;AAChB,aAAO,YAAY,OAAO,CAAC;AAC3B,WAAK;AAAA,IACN,CAAC;AAAA,EACF,CAAC;AAED,OAAK,qCAAqC,SAAU,MAAkB;AACrE,UAAM,SAAS,IAAI,iBAAiB;AAAA,MACnC,MAAM,UAAU;AAAA,MAChB,eAAe;AAAA,MACf,YAAY;AAAA,IACb,CAAC;AAED,QAAI,QAAQ;AACZ,WAAO,OAAO,CAAC,WAAW;AACzB,UAAI,QAAQ;AACX;AAAA,MACD;AAAA,IACD,GAAG,MAAM;AAAA,IAAE,GAAG,CAAC,UAAU;AACxB,aAAO,GAAG,CAAC,KAAK;AAChB,aAAO,YAAY,OAAO,CAAC;AAC3B,WAAK;AAAA,IACN,CAAC;AAAA,EACF,CAAC;AAED,OAAK,iBAAiB,SAAU,MAAkB;AACjD,UAAM,SAAS,IAAI,iBAAiB;AAAA,MACnC,MAAM,UAAU;AAAA,MAChB,eAAe;AAAA,MACf,gBAAgB,EAAE,eAAe,KAAK;AAAA,MACtC,QAAQ;AAAA,IACT,CAAC;AAED,QAAI,QAAQ;AACZ,WAAO,OAAO,CAAC,WAAW;AACzB,UAAI,QAAQ;AACX;AAAA,MACD;AAAA,IACD,GAAG,MAAM;AAAA,IAAE,GAAG,CAAC,OAAO,aAAa;AAClC,aAAO,GAAG,CAAC,KAAK;AAChB,aAAO,YAAY,OAAO,CAAC;AAC3B,aAAO,GAAG,SAAS,QAAQ;AAC3B,WAAK;AAAA,IACN,CAAC;AAAA,EACF,CAAC;AAED,OAAK,qBAAqB,SAAU,MAAkB;AACrD,UAAM,SAAS,IAAI,iBAAiB;AAAA,MACnC,MAAM,UAAU;AAAA,MAChB,eAAe;AAAA,MACf,gBAAgB,EAAE,iBAAiB,KAAK;AAAA,MACxC,QAAQ;AAAA,IACT,CAAC;AAED,QAAI,QAAQ;AACZ,WAAO,OAAO,CAAC,WAAW;AACzB,UAAI,QAAQ;AACX;AAAA,MACD;AAAA,IACD,GAAG,MAAM;AAAA,IAAE,GAAG,CAAC,OAAO,aAAa;AAClC,aAAO,GAAG,CAAC,KAAK;AAChB,aAAO,YAAY,OAAO,CAAC;AAC3B,aAAO,GAAG,CAAC,SAAS,QAAQ;AAC5B,WAAK;AAAA,IACN,CAAC;AAAA,EACF,CAAC;AAED,OAAK,iCAAiC,SAAU,MAAkB;AACjE,UAAM,SAAS,IAAI,iBAAiB;AAAA,MACnC,MAAM,UAAU;AAAA,MAChB,eAAe;AAAA,MACf,gBAAgB,EAAE,eAAe,KAAK;AAAA,MACtC,QAAQ;AAAA,IACT,CAAC;AAED,QAAI,QAAQ;AACZ,WAAO,OAAO,CAAC,WAAW;AACzB,UAAI,QAAQ;AACX;AAAA,MACD;AAAA,IACD,GAAG,MAAM;AAAA,IAAE,GAAG,CAAC,OAAO,aAAa;AAClC,aAAO,GAAG,CAAC,KAAK;AAChB,aAAO,YAAY,OAAO,CAAC;AAC3B,aAAO,GAAG,SAAS,QAAQ;AAC3B,WAAK;AAAA,IACN,CAAC;AAAA,EACF,CAAC;AAED,OAAK,qCAAqC,SAAU,MAAkB;AACrE,UAAM,SAAS,IAAI,iBAAiB;AAAA,MACnC,MAAM,UAAU;AAAA,MAChB,eAAe;AAAA,MACf,gBAAgB,EAAE,iBAAiB,KAAK;AAAA,MACxC,QAAQ;AAAA,IACT,CAAC;AAED,QAAI,QAAQ;AACZ,WAAO,OAAO,CAAC,WAAW;AACzB,UAAI,QAAQ;AACX;AAAA,MACD;AAAA,IACD,GAAG,MAAM;AAAA,IAAE,GAAG,CAAC,OAAO,aAAa;AAClC,aAAO,GAAG,CAAC,KAAK;AAChB,aAAO,YAAY,OAAO,CAAC;AAC3B,aAAO,GAAG,CAAC,SAAS,QAAQ;AAC5B,WAAK;AAAA,IACN,CAAC;AAAA,EACF,CAAC;AAED,OAAK,wBAAwB,SAAU,MAAkB;AACxD,UAAM,SAAS,IAAI,iBAAiB;AAAA,MACnC,MAAM,UAAU;AAAA,MAChB,eAAe;AAAA,MACf,aAAa,KAAK,KAAK,YAAY,MAAM;AAAA,IAC1C,CAAC;AAED,QAAI,QAAQ;AACZ,WAAO,OAAO,CAAC,WAAW;AACzB,UAAI,QAAQ;AACX;AAAA,MACD;AAAA,IACD,GAAG,MAAM;AAAA,IAAE,GAAG,CAAC,UAAU;AACxB,aAAO,GAAG,CAAC,KAAK;AAChB,aAAO,YAAY,OAAO,CAAC;AAC3B,WAAK;AAAA,IACN,CAAC;AAAA,EACF,CAAC;AAED,OAAK,2BAA2B,SAAU,MAAkB;AAC3D,UAAM,SAAS,IAAI,iBAAiB;AAAA,MACnC,MAAM,UAAU;AAAA,MAChB,eAAe;AAAA,MACf,aAAa;AAAA,IACd,CAAC;AAED,QAAI,QAAQ;AACZ,WAAO,OAAO,CAAC,WAAW;AACzB,UAAI,QAAQ;AACX;AAAA,MACD;AAAA,IACD,GAAG,MAAM;AAAA,IAAE,GAAG,CAAC,UAAU;AACxB,aAAO,GAAG,CAAC,KAAK;AAChB,aAAO,YAAY,OAAO,CAAC;AAC3B,WAAK;AAAA,IACN,CAAC;AAAA,EACF,CAAC;AAED,OAAK,oBAAoB,SAAU,MAAkB;AACpD,UAAM,SAAS,IAAI,iBAAiB;AAAA,MACnC,MAAM,UAAU;AAAA,MAChB,eAAe;AAAA,MACf,aAAa;AAAA,IACd,CAAC;AAED,QAAI,QAAQ;AACZ,WAAO,OAAO,CAAC,WAAW;AACzB,UAAI,QAAQ;AACX;AAAA,MACD;AAAA,IACD,GAAG,MAAM;AAAA,IAAE,GAAG,CAAC,UAAU;AACxB,aAAO,GAAG,CAAC,KAAK;AAChB,aAAO,YAAY,OAAO,CAAC;AAC3B,WAAK;AAAA,IACN,CAAC;AAAA,EACF,CAAC;AAED,OAAK,uDAAuD,SAAU,MAAkB;AACvF,UAAM,SAAS,IAAI,iBAAiB;AAAA,MACnC,MAAM,UAAU;AAAA,MAChB,eAAe;AAAA,MACf,YAAY;AAAA,MACZ,gBAAgB;AAAA,QACf,SAAS;AAAA,QACT,QAAQ;AAAA,MACT;AAAA,IACD,CAAC;AAED,QAAI,QAAQ;AACZ,WAAO,OAAO,CAAC,WAAW;AACzB,UAAI,QAAQ;AACX;AAAA,MACD;AAAA,IACD,GAAG,MAAM;AAAA,IAAE,GAAG,CAAC,OAAO,aAAa;AAClC,aAAO,GAAG,CAAC,KAAK;AAChB,aAAO,YAAY,OAAO,CAAC;AAC3B,WAAK;AAAA,IACN,CAAC;AAAA,EACF,CAAC;AAED,OAAK,mDAAmD,SAAU,MAAkB;AACnF,UAAM,SAAS,IAAI,iBAAiB;AAAA,MACnC,MAAM,UAAU;AAAA,MAChB,eAAe;AAAA,MACf,QAAQ;AAAA,MACR,gBAAgB;AAAA,QACf,SAAS;AAAA,QACT,QAAQ;AAAA,MACT;AAAA,IACD,CAAC;AAED,QAAI,QAAQ;AACZ,WAAO,OAAO,CAAC,WAAW;AACzB,UAAI,QAAQ;AACX;AAAA,MACD;AAAA,IACD,GAAG,MAAM;AAAA,IAAE,GAAG,CAAC,OAAO,aAAa;AAClC,aAAO,GAAG,CAAC,KAAK;AAChB,aAAO,YAAY,OAAO,CAAC;AAC3B,aAAO,GAAG,SAAS,QAAQ;AAC3B,WAAK;AAAA,IACN,CAAC;AAAA,EACF,CAAC;AAED,OAAK,0BAA0B,SAAU,MAAkB;AAC1D,UAAM,SAAS,IAAI,iBAAiB;AAAA,MACnC,MAAM,UAAU;AAAA,MAChB,eAAe;AAAA,MACf,aAAa;AAAA,IACd,CAAC;AAED,QAAI,QAAQ;AACZ,WAAO,OAAO,CAAC,WAAW;AACzB,UAAI,QAAQ;AACX;AAAA,MACD;AAAA,IACD,GAAG,MAAM;AAAA,IAAE,GAAG,CAAC,UAAU;AACxB,aAAO,GAAG,CAAC,KAAK;AAChB,aAAO,YAAY,OAAO,CAAC;AAC3B,WAAK;AAAA,IACN,CAAC;AAAA,EACF,CAAC;AAED,OAAK,cAAc,SAAU,MAAkB;AAC9C,UAAM,SAAS,IAAI,iBAAiB;AAAA,MACnC,MAAM,UAAU;AAAA,MAChB,eAAe;AAAA,MACf,aAAa;AAAA,IACd,CAAC;AAED,QAAI,QAAQ;AACZ,WAAO,OAAO,CAAC,WAAW;AACzB,UAAI,QAAQ;AACX;AAAA,MACD;AAAA,IACD,GAAG,MAAM;AAAA,IAAE,GAAG,CAAC,UAAU;AACxB,aAAO,GAAG,CAAC,KAAK;AAChB,aAAO,YAAY,OAAO,EAAE;AAC5B,WAAK;AAAA,IACN,CAAC;AAAA,EACF,CAAC;AAED,OAAK,eAAe,SAAU,MAAkB;AAC/C,UAAM,SAAS,IAAI,iBAAiB;AAAA,MACnC,MAAM,UAAU;AAAA,MAChB,eAAe;AAAA,MACf,aAAa;AAAA,IACd,CAAC;AAED,QAAI,QAAQ;AACZ,WAAO,OAAO,CAAC,WAAW;AACzB,UAAI,QAAQ;AACX;AAAA,MACD;AAAA,IACD,GAAG,MAAM;AAAA,IAAE,GAAG,CAAC,UAAU;AACxB,aAAO,GAAG,CAAC,KAAK;AAChB,aAAO,YAAY,OAAO,CAAC;AAC3B,WAAK;AAAA,IACN,CAAC;AAAA,EACF,CAAC;AAED,OAAK,8BAA8B,SAAU,MAAkB;AAC9D,UAAM,SAAS,IAAI,iBAAiB;AAAA,MACnC,MAAM,UAAU;AAAA,MAChB,eAAe;AAAA,MACf,aAAa;AAAA,MACb,gBAAgB,EAAE,YAAY,EAAE,QAAQ,mBAAmB,EAAE;AAAA,IAC9D,CAAC;AAED,QAAI,QAAQ;AACZ,QAAI;AACJ,WAAO,OAAO,CAAC,WAAW;AACzB,UAAI,QAAQ;AACX;AAAA,MACD;AACA,YAAM;AAAA,IACP,GAAG,MAAM;AAAA,IAAE,GAAG,CAAC,UAAU;AACxB,aAAO,GAAG,CAAC,KAAK;AAChB,aAAO,YAAY,OAAO,CAAC;AAC3B,aAAO,YAAY,KAAK,SAAS,IAAI,YAAY,GAAG,WAAW;AAC/D,WAAK;AAAA,IACN,CAAC;AAAA,EACF,CAAC;AAED,OAAK,8CAA8C,SAAU,MAAkB;AAC9E,UAAM,SAAS,IAAI,iBAAiB;AAAA,MACnC,MAAM,UAAU;AAAA,MAChB,eAAe;AAAA,MACf,aAAa;AAAA,MACb,gBAAgB,EAAE,YAAY,KAAK;AAAA,IACpC,CAAC;AAED,QAAI,QAAQ;AACZ,WAAO,OAAO,CAAC,WAAW;AACzB,UAAI,QAAQ;AACX;AAAA,MACD;AAAA,IACD,GAAG,MAAM;AAAA,IAAE,GAAG,CAAC,UAAU;AACxB,aAAO,GAAG,CAAC,KAAK;AAChB,aAAO,YAAY,OAAO,CAAC;AAC3B,WAAK;AAAA,IACN,CAAC;AAAA,EACF,CAAC;AAED,OAAK,iDAAiD,SAAU,MAAkB;AACjF,UAAM,SAAS,IAAI,iBAAiB;AAAA,MACnC,MAAM,UAAU;AAAA,MAChB,eAAe;AAAA,MACf,gBAAgB,EAAE,WAAW,KAAK;AAAA,IACnC,CAAC;AAED,QAAI,QAAQ;AACZ,WAAO,OAAO,CAAC,WAAW;AACzB,UAAI,QAAQ;AACX;AAAA,MACD;AAAA,IACD,GAAG,MAAM;AAAA,IAAE,GAAG,CAAC,UAAU;AACxB,aAAO,GAAG,CAAC,KAAK;AAChB,aAAO,YAAY,OAAO,CAAC;AAC3B,WAAK;AAAA,IACN,CAAC;AAAA,EACF,CAAC;AAED,OAAK,iDAAiD,SAAU,MAAkB;AACjF,UAAM,SAAS,IAAI,iBAAiB;AAAA,MACnC,MAAM,UAAU;AAAA,MAChB,eAAe;AAAA,MACf,gBAAgB,EAAE,cAAc,KAAK;AAAA,IACtC,CAAC;AAED,QAAI,QAAQ;AACZ,WAAO,OAAO,CAAC,WAAW;AACzB,UAAI,QAAQ;AACX;AAAA,MACD;AAAA,IACD,GAAG,MAAM;AAAA,IAAE,GAAG,CAAC,UAAU;AACxB,aAAO,GAAG,CAAC,KAAK;AAChB,aAAO,YAAY,OAAO,CAAC;AAC3B,WAAK;AAAA,IACN,CAAC;AAAA,EACF,CAAC;AAED,OAAK,mDAAmD,SAAU,MAAkB;AACnF,UAAM,SAAS,IAAI,iBAAiB;AAAA,MACnC,MAAM,UAAU;AAAA,MAChB,eAAe;AAAA,MACf,aAAa;AAAA,MACb,gBAAgB,EAAE,eAAe,KAAK;AAAA,IACvC,CAAC;AAED,QAAI,QAAQ;AACZ,WAAO,OAAO,CAAC,WAAW;AACzB,UAAI,QAAQ;AACX;AAAA,MACD;AAAA,IACD,GAAG,MAAM;AAAA,IAAE,GAAG,CAAC,UAAU;AACxB,aAAO,GAAG,CAAC,KAAK;AAChB,aAAO,YAAY,OAAO,CAAC;AAC3B,WAAK;AAAA,IACN,CAAC;AAAA,EACF,CAAC;AAED,OAAK,oDAAoD,SAAU,MAAkB;AACpF,UAAM,SAAS,IAAI,iBAAiB;AAAA,MACnC,MAAM,UAAU;AAAA,MAChB,eAAe;AAAA,MACf,aAAa;AAAA,MACb,gBAAgB,EAAE,eAAe,KAAK;AAAA,IACvC,CAAC;AAED,QAAI,QAAQ;AACZ,WAAO,OAAO,CAAC,WAAW;AACzB,UAAI,QAAQ;AACX;AAAA,MACD;AAAA,IACD,GAAG,MAAM;AAAA,IAAE,GAAG,CAAC,UAAU;AACxB,aAAO,GAAG,CAAC,KAAK;AAChB,aAAO,YAAY,OAAO,CAAC;AAC3B,WAAK;AAAA,IACN,CAAC;AAAA,EACF,CAAC;AAED,OAAK,mCAAmC,SAAU,MAAkB;AACnE,UAAM,SAAS,IAAI,iBAAiB;AAAA,MACnC,MAAM,UAAU;AAAA,MAChB,eAAe;AAAA,MACf,aAAa;AAAA,MACb,gBAAgB,EAAE,6BAAgB,KAAK;AAAA,IACxC,CAAC;AAED,QAAI,QAAQ;AACZ,WAAO,OAAO,CAAC,WAAW;AACzB,UAAI,QAAQ;AACX;AAAA,MACD;AAAA,IACD,GAAG,MAAM;AAAA,IAAE,GAAG,CAAC,UAAU;AACxB,aAAO,GAAG,CAAC,KAAK;AAChB,aAAO,YAAY,OAAO,EAAE;AAC5B,WAAK;AAAA,IACN,CAAC;AAAA,EACF,CAAC;AAED,OAAK,mCAAmC,SAAU,MAAkB;AACnE,UAAM,SAAS,IAAI,iBAAiB;AAAA,MACnC,MAAM,UAAU;AAAA,MAChB,eAAe;AAAA,MACf,aAAa;AAAA,MACb,gBAAgB,EAAE,+BAAkB,KAAK;AAAA,IAC1C,CAAC;AAED,QAAI,QAAQ;AACZ,WAAO,OAAO,CAAC,WAAW;AACzB,UAAI,QAAQ;AACX;AAAA,MACD;AAAA,IACD,GAAG,MAAM;AAAA,IAAE,GAAG,CAAC,UAAU;AACxB,aAAO,GAAG,CAAC,KAAK;AAChB,aAAO,YAAY,OAAO,CAAC;AAC3B,WAAK;AAAA,IACN,CAAC;AAAA,EACF,CAAC;AAED,OAAK,iCAAiC,SAAU,MAAkB;AACjE,UAAM,gBAAgC;AAAA,MACrC;AAAA,QACC,QAAQ;AAAA,QACR,gBAAgB,CAAC;AAAA,UAChB,SAAS,EAAE,sBAAsB,KAAK;AAAA,QACvC,CAAC;AAAA,MACF;AAAA,MACA;AAAA,QACC,QAAQ;AAAA,QACR,gBAAgB,CAAC;AAAA,UAChB,SAAS;AAAA,YACR,eAAe;AAAA,UAChB;AAAA,QACD,CAAC;AAAA,MACF;AAAA,IACD;AAEA,UAAM,SAAS,IAAI,iBAAiB;AAAA,MACnC,MAAM,UAAU;AAAA,MAChB;AAAA,MACA,aAAa;AAAA,IACd,CAAC;AAED,QAAI,QAAQ;AACZ,WAAO,OAAO,CAAC,WAAW;AACzB,UAAI,QAAQ;AACX;AAAA,MACD;AAAA,IACD,GAAG,MAAM;AAAA,IAAE,GAAG,CAAC,UAAU;AACxB,aAAO,GAAG,CAAC,KAAK;AAChB,aAAO,YAAY,OAAO,CAAC;AAC3B,WAAK;AAAA,IACN,CAAC;AAAA,EACF,CAAC;AAED,OAAK,6BAA6B,SAAU,MAAkB;AAC7D,UAAM,SAAS,IAAI,iBAAiB;AAAA,MACnC,MAAM,UAAU;AAAA,MAChB,eAAe;AAAA,MACf,aAAa;AAAA,IACd,CAAC;AAED,QAAI,QAAQ;AACZ,QAAI;AACJ,WAAO,OAAO,CAAC,WAAW;AACzB,UAAI,QAAQ;AACX;AAAA,MACD;AACA,YAAM;AAAA,IACP,GAAG,MAAM;AAAA,IAAE,GAAG,CAAC,UAAU;AACxB,aAAO,GAAG,CAAC,KAAK;AAChB,aAAO,YAAY,OAAO,CAAC;AAC3B,aAAO,YAAY,KAAK,SAAS,IAAI,YAAY,GAAG,kBAAQ;AAC5D,WAAK;AAAA,IACN,CAAC;AAAA,EACF,CAAC;AAED,OAAK,qBAAqB,SAAU,MAAkB;AACrD,UAAM,SAAS,IAAI,iBAAiB;AAAA,MACnC,MAAM,UAAU;AAAA,MAChB,eAAe;AAAA,MACf,aAAa;AAAA,IACd,CAAC;AAED,QAAI,QAAQ;AACZ,WAAO,OAAO,CAAC,WAAW;AACzB,UAAI,QAAQ;AACX;AAAA,MACD;AAAA,IACD,GAAG,MAAM;AAAA,IAAE,GAAG,CAAC,UAAU;AACxB,aAAO,GAAG,CAAC,KAAK;AAChB,aAAO,YAAY,OAAO,CAAC;AAC3B,WAAK;AAAA,IACN,CAAC;AAAA,EACF,CAAC;AAED,OAAK,qCAAqC,SAAU,MAAkB;AACrE,UAAM,SAAS,IAAI,iBAAiB;AAAA,MACnC,MAAM,UAAU;AAAA,MAChB,eAAe;AAAA,MACf,aAAa,KAAK,UAAU,KAAK,KAAK,YAAY,YAAY,CAAC;AAAA,IAChE,CAAC;AAED,QAAI,QAAQ;AACZ,QAAI;AACJ,WAAO,OAAO,CAAC,WAAW;AACzB,UAAI,QAAQ;AACX;AAAA,MACD;AACA,YAAM;AAAA,IACP,GAAG,MAAM;AAAA,IAAE,GAAG,CAAC,UAAU;AACxB,aAAO,GAAG,CAAC,KAAK;AAChB,aAAO,YAAY,OAAO,CAAC;AAC3B,aAAO,YAAY,KAAK,SAAS,IAAI,YAAY,GAAG,YAAY;AAChE,WAAK;AAAA,IACN,CAAC;AAAA,EACF,CAAC;AAED,OAAK,wCAAwC,SAAU,MAAkB;AACxE,UAAM,SAAS,IAAI,iBAAiB;AAAA,MACnC,MAAM,UAAU;AAAA,MAChB,eAAe;AAAA,MACf,gBAAgB;AAAA,QACf,YAAY;AAAA,QACZ,uBAAuB;AAAA,QACvB,kCAAkC;AAAA,MACnC;AAAA,IACD,CAAC;AAED,UAAM,MAAuB,CAAC;AAC9B,WAAO,OAAO,CAAC,WAAW;AACzB,UAAI,KAAK,MAAM;AAAA,IAChB,GAAG,MAAM;AAAA,IAAE,GAAG,CAAC,UAAU;AACxB,aAAO,GAAG,CAAC,KAAK;AAChB,YAAM,YAAY,IAAI,IAAI,OAAK,KAAK,SAAS,EAAE,YAAY,CAAC;AAC5D,aAAO,GAAG,UAAU,QAAQ,UAAU,MAAM,IAAI,uBAAuB,KAAK,UAAU,SAAS,CAAC,EAAE;AAClG,aAAO,GAAG,UAAU,QAAQ,YAAY,MAAM,IAAI,yBAAyB,KAAK,UAAU,SAAS,CAAC,EAAE;AACtG,aAAO,GAAG,UAAU,QAAQ,aAAa,MAAM,IAAI,0BAA0B,KAAK,UAAU,SAAS,CAAC,EAAE;AACxG,WAAK;AAAA,IACN,CAAC;AAAA,EACF,CAAC;AAED,OAAK,0BAA0B,SAAU,MAAkB;AAC1D,UAAM,SAAS,IAAI,iBAAiB;AAAA,MACnC,MAAM,UAAU;AAAA,MAChB,eAAe,CAAC;AAAA,MAChB,oBAAoB;AAAA,QACnB,IAAI,KAAK,KAAK,UAAU,KAAK,KAAK,WAAW,UAAU,iDAAiD,EAAE,QAAQ,UAAU,CAAC,CAAC;AAAA,QAC9H,IAAI,KAAK,KAAK,UAAU,KAAK,KAAK,WAAW,UAAU,iDAAiD,EAAE,QAAQ,YAAY,YAAY,CAAC,CAAC;AAAA,QAC5I,IAAI,KAAK,KAAK,UAAU,KAAK,KAAK,WAAW,UAAU,iDAAiD,EAAE,QAAQ,YAAY,CAAC,CAAC;AAAA,MACjI;AAAA,MACA,aAAa;AAAA,IACd,CAAC;AAED,QAAI,QAAQ;AACZ,QAAI;AACJ,WAAO,OAAO,CAAC,WAAW;AACzB,UAAI,QAAQ;AACX;AAAA,MACD;AACA,YAAM;AAAA,IACP,GAAG,MAAM;AAAA,IAAE,GAAG,CAAC,UAAU;AACxB,aAAO,GAAG,CAAC,KAAK;AAChB,aAAO,YAAY,OAAO,CAAC;AAC3B,aAAO,YAAY,KAAK,SAAS,IAAI,YAAY,GAAG,YAAY;AAChE,WAAK;AAAA,IACN,CAAC;AAAA,EACF,CAAC;AAED,OAAK,yCAAyC,SAAU,MAAkB;AACzE,UAAM,SAAS,IAAI,iBAAiB;AAAA,MACnC,MAAM,UAAU;AAAA,MAChB,eAAe,CAAC;AAAA,MAChB,oBAAoB;AAAA,QACnB,IAAI,KAAK,KAAK,UAAU,KAAK,KAAK,WAAW,UAAU,iDAAiD,EAAE,QAAQ,UAAU,CAAC,CAAC;AAAA,QAC9H,IAAI,KAAK,KAAK,UAAU,KAAK,KAAK,WAAW,UAAU,iDAAiD,EAAE,QAAQ,YAAY,YAAY,CAAC,CAAC;AAAA,QAC5I,IAAI,KAAK,KAAK,UAAU,KAAK,KAAK,WAAW,UAAU,iDAAiD,EAAE,QAAQ,YAAY,CAAC,CAAC;AAAA,MACjI;AAAA,MACA,aAAa;AAAA,MACb,gBAAgB,EAAE,YAAY,KAAK;AAAA,IACpC,CAAC;AAED,QAAI,QAAQ;AACZ,QAAI;AACJ,WAAO,OAAO,CAAC,WAAW;AACzB,UAAI,QAAQ;AACX;AAAA,MACD;AACA,YAAM;AAAA,IACP,GAAG,MAAM;AAAA,IAAE,GAAG,CAAC,UAAU;AACxB,aAAO,GAAG,CAAC,KAAK;AAChB,aAAO,YAAY,OAAO,CAAC;AAC3B,aAAO,YAAY,KAAK,SAAS,IAAI,YAAY,GAAG,UAAU;AAC9D,WAAK;AAAA,IACN,CAAC;AAAA,EACF,CAAC;AAED,OAAK,yCAAyC,SAAU,MAAkB;AACzE,UAAM,SAAS,IAAI,iBAAiB;AAAA,MACnC,MAAM,UAAU;AAAA,MAChB,eAAe,CAAC;AAAA,MAChB,oBAAoB;AAAA,QACnB,IAAI,KAAK,KAAK,UAAU,KAAK,KAAK,WAAW,UAAU,iDAAiD,EAAE,QAAQ,UAAU,CAAC,CAAC;AAAA,QAC9H,IAAI,KAAK,KAAK,UAAU,KAAK,KAAK,WAAW,UAAU,iDAAiD,EAAE,QAAQ,YAAY,YAAY,CAAC,CAAC;AAAA,QAC5I,IAAI,KAAK,KAAK,UAAU,KAAK,KAAK,WAAW,UAAU,iDAAiD,EAAE,QAAQ,YAAY,CAAC,CAAC;AAAA,MACjI;AAAA,MACA,aAAa;AAAA,MACb,gBAAgB,EAAE,YAAY,KAAK;AAAA,IACpC,CAAC;AAED,QAAI,QAAQ;AACZ,WAAO,OAAO,CAAC,WAAW;AACzB,UAAI,QAAQ;AACX;AAAA,MACD;AAAA,IACD,GAAG,MAAM;AAAA,IAAE,GAAG,CAAC,UAAU;AACxB,aAAO,GAAG,CAAC,KAAK;AAChB,aAAO,YAAY,OAAO,CAAC;AAC3B,WAAK;AAAA,IACN,CAAC;AAAA,EACF,CAAC;AAED,OAAK,qCAAqC,SAAU,MAAkB;AACrE,UAAM,SAAS,IAAI,iBAAiB;AAAA,MACnC,MAAM,UAAU;AAAA,MAChB,eAAe;AAAA,QACd,EAAE,QAAQ,kBAAkB;AAAA,QAC5B,EAAE,QAAQ,SAAS,mBAAmB,WAAW,EAAE;AAAA,MACpD;AAAA,MACA,aAAa;AAAA,IACd,CAAC;AAED,QAAI,QAAQ;AACZ,WAAO,OAAO,CAAC,WAAW;AACzB,UAAI,QAAQ;AACX;AAAA,MACD;AAAA,IACD,GAAG,MAAM;AAAA,IAAE,GAAG,CAAC,UAAU;AACxB,aAAO,GAAG,CAAC,KAAK;AAChB,aAAO,YAAY,OAAO,CAAC;AAC3B,WAAK;AAAA,IACN,CAAC;AAAA,EACF,CAAC;AACF,CAAC;AAED,WAAW,cAAc,MAAM;AAE9B,GAAC,SAAS,YAAY,KAAK,OAAO,MAAM,2BAA2B,SAAU,MAAkB;AAC9F,UAAM,QAAQ;AACd,UAAM,QAAQ;AAEd,UAAM,SAAS,IAAI,WAAW;AAAA,MAC7B,MAAM,UAAU;AAAA,MAChB,eAAe;AAAA,MACf,gBAAgB,EAAE,gBAAgB,KAAK;AAAA,IACxC,CAAC;AACD,UAAM,OAAO,OAAO,aAAa,gBAAgB;AACjD,WAAO,WAAW,MAAM,QAAQ,CAAC,MAAM,YAAY;AAClD,aAAO,YAAY,MAAM,IAAI;AAC7B,aAAO,eAAe,QAAS,MAAM,IAAI,EAAE,QAAQ,KAAK,GAAG,IAAI,OAAO;AACtE,aAAO,eAAe,QAAS,MAAM,IAAI,EAAE,QAAQ,KAAK,GAAG,IAAI,OAAO;AAEtE,YAAMA,UAAS,IAAI,WAAW;AAAA,QAC7B,MAAM,UAAU;AAAA,QAChB,eAAe;AAAA,QACf,gBAAgB,EAAE,gBAAgB,KAAK;AAAA,MACxC,CAAC;AACD,YAAM,OAAOA,QAAO,aAAa,gBAAgB;AACjD,MAAAA,QAAO,WAAW,MAAM,QAAQ,CAAC,MAAM,YAAY;AAClD,eAAO,YAAY,MAAM,IAAI;AAC7B,eAAO,eAAe,QAAS,MAAM,IAAI,EAAE,QAAQ,KAAK,GAAG,IAAI,OAAO;AACtE,eAAO,YAAY,QAAS,MAAM,IAAI,EAAE,QAAQ,KAAK,GAAG,IAAI,OAAO;AACnE,aAAK;AAAA,MACN,CAAC;AAAA,IACF,CAAC;AAAA,EACF,CAAC;AAED,GAAC,SAAS,YAAY,KAAK,OAAO,MAAM,yBAAyB,SAAU,MAAkB;AAC5F,UAAM,gBAAgC;AAAA,MACrC;AAAA,QACC,QAAQ,IAAI,KAAK,aAAa;AAAA,QAC9B,gBAAgB,CAAC;AAAA,UAChB,SAAS,EAAE,gBAAgB,KAAK;AAAA,QACjC,CAAC;AAAA,MACF;AAAA,IACD;AAEA,UAAM,QAAQ;AACd,UAAM,QAAQ;AAEd,UAAM,SAAS,IAAI,WAAW,EAAE,MAAM,UAAU,MAAM,cAAc,CAAC;AACrE,UAAM,OAAO,OAAO,aAAa,cAAc,CAAC,CAAC;AACjD,WAAO,WAAW,MAAM,QAAQ,CAAC,MAAM,YAAY;AAClD,aAAO,YAAY,MAAM,IAAI;AAC7B,aAAO,eAAe,SAAU,KAAK,GAAG,OAAO;AAC/C,aAAO,CAAC,eAAe,SAAU,KAAK,GAAG,OAAO;AAChD,WAAK;AAAA,IACN,CAAC;AAAA,EACF,CAAC;AAED,GAAC,SAAS,YAAY,KAAK,OAAO,MAAM,kCAAkC,SAAU,MAAkB;AACrG,UAAM,QAAQ;AACd,UAAM,QAAQ;AACd,UAAM,QAAQ;AAEd,UAAM,SAAS,IAAI,WAAW,EAAE,MAAM,UAAU,MAAM,eAAe,mBAAmB,gBAAgB,EAAE,gBAAgB,KAAK,EAAE,CAAC;AAClI,UAAM,OAAO,OAAO,aAAa,gBAAgB;AACjD,WAAO,WAAW,MAAM,QAAQ,CAAC,MAAM,YAAY;AAClD,aAAO,YAAY,MAAM,IAAI;AAC7B,aAAO,eAAe,QAAS,MAAM,IAAI,EAAE,QAAQ,KAAK,GAAG,IAAI,OAAO;AACtE,aAAO,eAAe,QAAS,MAAM,IAAI,EAAE,QAAQ,KAAK,GAAG,IAAI,OAAO;AACtE,aAAO,eAAe,QAAS,MAAM,IAAI,EAAE,QAAQ,KAAK,GAAG,IAAI,OAAO;AAEtE,YAAMA,UAAS,IAAI,WAAW,EAAE,MAAM,UAAU,MAAM,eAAe,mBAAmB,gBAAgB,EAAE,yBAAyB,KAAK,EAAE,CAAC;AAC3I,YAAM,OAAOA,QAAO,aAAa,gBAAgB;AACjD,MAAAA,QAAO,WAAW,MAAM,QAAQ,CAAC,MAAM,YAAY;AAClD,eAAO,YAAY,MAAM,IAAI;AAC7B,eAAO,eAAe,QAAS,MAAM,IAAI,EAAE,QAAQ,KAAK,GAAG,IAAI,OAAO;AACtE,eAAO,YAAY,QAAS,MAAM,IAAI,EAAE,QAAQ,KAAK,GAAG,IAAI,OAAO;AACnE,eAAO,YAAY,QAAS,MAAM,IAAI,EAAE,QAAQ,KAAK,GAAG,IAAI,OAAO;AACnE,aAAK;AAAA,MACN,CAAC;AAAA,IACF,CAAC;AAAA,EACF,CAAC;AAED,GAAC,SAAS,YAAY,KAAK,OAAO,MAAM,oCAAoC,SAAU,MAAkB;AACvG,UAAM,QAAQ;AACd,UAAM,QAAQ;AAEd,UAAM,SAAS,IAAI,WAAW,EAAE,MAAM,UAAU,MAAM,eAAe,mBAAmB,gBAAgB,EAAE,yBAAyB,KAAK,EAAE,CAAC;AAC3I,UAAM,OAAO,OAAO,aAAa,gBAAgB;AACjD,WAAO,WAAW,MAAM,QAAQ,CAAC,MAAM,YAAY;AAClD,aAAO,YAAY,MAAM,IAAI;AAC7B,aAAO,eAAe,QAAS,MAAM,IAAI,EAAE,QAAQ,KAAK,GAAG,IAAI,OAAO;AACtE,aAAO,eAAe,QAAS,MAAM,IAAI,EAAE,QAAQ,KAAK,GAAG,IAAI,OAAO;AAEtE,YAAMA,UAAS,IAAI,WAAW,EAAE,MAAM,UAAU,MAAM,eAAe,mBAAmB,gBAAgB,EAAE,yBAAyB,KAAK,EAAE,CAAC;AAC3I,YAAM,OAAOA,QAAO,aAAa,gBAAgB;AACjD,MAAAA,QAAO,WAAW,MAAM,QAAQ,CAAC,MAAM,YAAY;AAClD,eAAO,YAAY,MAAM,IAAI;AAC7B,eAAO,eAAe,QAAS,MAAM,IAAI,EAAE,QAAQ,KAAK,GAAG,IAAI,OAAO;AACtE,eAAO,YAAY,QAAS,MAAM,IAAI,EAAE,QAAQ,KAAK,GAAG,IAAI,OAAO;AACnE,aAAK;AAAA,MACN,CAAC;AAAA,IACF,CAAC;AAAA,EACF,CAAC;AAED,GAAC,SAAS,YAAY,KAAK,OAAO,MAAM,uCAAuC,SAAU,MAAkB;AAC1G,UAAM,QAAQ;AACd,UAAM,QAAQ;AAEd,UAAM,SAAS,IAAI,WAAW,EAAE,MAAM,UAAU,MAAM,eAAe,mBAAmB,gBAAgB,EAAE,0BAA0B,KAAK,EAAE,CAAC;AAC5I,UAAM,OAAO,OAAO,aAAa,gBAAgB;AACjD,WAAO,WAAW,MAAM,QAAQ,CAAC,MAAM,YAAY;AAClD,aAAO,YAAY,MAAM,IAAI;AAC7B,aAAO,eAAe,QAAS,MAAM,IAAI,EAAE,QAAQ,KAAK,GAAG,IAAI,OAAO;AACtE,aAAO,eAAe,QAAS,MAAM,IAAI,EAAE,QAAQ,KAAK,GAAG,IAAI,OAAO;AAEtE,YAAMA,UAAS,IAAI,WAAW,EAAE,MAAM,UAAU,MAAM,eAAe,mBAAmB,gBAAgB,EAAE,8BAA8B,KAAK,EAAE,CAAC;AAChJ,YAAM,OAAOA,QAAO,aAAa,gBAAgB;AACjD,MAAAA,QAAO,WAAW,MAAM,QAAQ,CAAC,MAAM,YAAY;AAClD,eAAO,YAAY,MAAM,IAAI;AAC7B,eAAO,eAAe,QAAS,MAAM,IAAI,EAAE,QAAQ,KAAK,GAAG,IAAI,OAAO;AACtE,eAAO,YAAY,QAAS,MAAM,IAAI,EAAE,QAAQ,KAAK,GAAG,IAAI,OAAO;AACnE,aAAK;AAAA,MACN,CAAC;AAAA,IACF,CAAC;AAAA,EACF,CAAC;AAED,GAAC,SAAS,YAAY,KAAK,OAAO,MAAM,6BAA6B,SAAU,MAAkB;AAChG,UAAM,QAAQ;AACd,UAAM,QAAQ;AAEd,UAAM,SAAS,IAAI,WAAW,EAAE,MAAM,UAAU,MAAM,eAAe,mBAAmB,gBAAgB,EAAE,sBAAsB,KAAK,EAAE,CAAC;AACxI,UAAM,OAAO,OAAO,aAAa,gBAAgB;AACjD,WAAO,WAAW,MAAM,QAAQ,CAAC,MAAM,YAAY;AAClD,aAAO,YAAY,MAAM,IAAI;AAC7B,aAAO,eAAe,QAAS,MAAM,IAAI,EAAE,QAAQ,KAAK,GAAG,IAAI,OAAO;AACtE,aAAO,eAAe,QAAS,MAAM,IAAI,EAAE,QAAQ,KAAK,GAAG,IAAI,OAAO;AAEtE,YAAMA,UAAS,IAAI,WAAW,EAAE,MAAM,UAAU,MAAM,eAAe,mBAAmB,gBAAgB,EAAE,sBAAsB,KAAK,EAAE,CAAC;AACxI,YAAM,OAAOA,QAAO,aAAa,gBAAgB;AACjD,MAAAA,QAAO,WAAW,MAAM,QAAQ,CAAC,MAAM,YAAY;AAClD,eAAO,YAAY,MAAM,IAAI;AAC7B,eAAO,eAAe,QAAS,MAAM,IAAI,EAAE,QAAQ,KAAK,GAAG,IAAI,OAAO;AACtE,eAAO,YAAY,QAAS,MAAM,IAAI,EAAE,QAAQ,KAAK,GAAG,IAAI,OAAO;AACnE,aAAK;AAAA,MACN,CAAC;AAAA,IACF,CAAC;AAAA,EACF,CAAC;AAED,GAAC,SAAS,YAAY,KAAK,OAAO,MAAM,sCAAsC,SAAU,MAAkB;AACzG,UAAM,UAAU;AAAA,MACf;AAAA,MACA;AAAA,MACA;AAAA,IACD;AACA,UAAM,WAAW;AAAA,MAChB;AAAA,MACA;AAAA,IACD;AAEA,UAAM,SAAS,IAAI,WAAW;AAAA,MAC7B,MAAM,UAAU;AAAA,MAChB,eAAe;AAAA,MACf,gBAAgB;AAAA,QACf,8BAA8B;AAAA,QAC9B,qBAAqB;AAAA,QACrB,WAAW;AAAA,QACX,cAAc;AAAA,MACf;AAAA,IACD,CAAC;AACD,UAAM,OAAO,OAAO,aAAa,gBAAgB;AACjD,WAAO,WAAW,MAAM,QAAQ,CAAC,MAAM,YAAY;AAClD,aAAO,YAAY,MAAM,IAAI;AAC7B,iBAAW,UAAU,SAAS;AAC7B,eAAO,eAAe,QAAS,MAAM,IAAI,EAAE,QAAQ,MAAM,GAAG,IAAI,OAAO;AAAA,MACxE;AACA,iBAAW,WAAW,UAAU;AAC/B,eAAO,YAAY,QAAS,MAAM,IAAI,EAAE,QAAQ,OAAO,GAAG,IAAI,OAAO;AAAA,MACtE;AACA,WAAK;AAAA,IACN,CAAC;AAAA,EACF,CAAC;AAED,WAAS,eAAe,WAAmB,OAA0B;AACpE,UAAM,QAAQ,OAAO,MAAM,IAAI;AAC/B,WAAO,MAAM,MAAM,UAAQ,MAAM,QAAQ,IAAI,KAAK,CAAC;AAAA,EACpD;AAHS;AAIV,CAAC;",
  "names": ["walker"]
}
