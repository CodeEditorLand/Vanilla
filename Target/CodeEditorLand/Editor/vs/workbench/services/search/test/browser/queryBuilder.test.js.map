{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/search/test/browser/queryBuilder.test.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport assert from 'assert';\nimport { IExpression } from '../../../../../base/common/glob.js';\nimport { join } from '../../../../../base/common/path.js';\nimport { isWindows } from '../../../../../base/common/platform.js';\nimport { URI, URI as uri } from '../../../../../base/common/uri.js';\nimport { IConfigurationService } from '../../../../../platform/configuration/common/configuration.js';\nimport { TestConfigurationService } from '../../../../../platform/configuration/test/common/testConfigurationService.js';\nimport { TestInstantiationService } from '../../../../../platform/instantiation/test/common/instantiationServiceMock.js';\nimport { IWorkspaceContextService, toWorkspaceFolder } from '../../../../../platform/workspace/common/workspace.js';\nimport { toWorkspaceFolders } from '../../../../../platform/workspaces/common/workspaces.js';\nimport { ISearchPathsInfo, QueryBuilder } from '../../common/queryBuilder.js';\nimport { IPathService } from '../../../path/common/pathService.js';\nimport { IFileQuery, IFolderQuery, IPatternInfo, ITextQuery, QueryType } from '../../common/search.js';\nimport { TestPathService, TestEnvironmentService } from '../../../../test/browser/workbenchTestServices.js';\nimport { TestContextService } from '../../../../test/common/workbenchTestServices.js';\nimport { IEnvironmentService } from '../../../../../platform/environment/common/environment.js';\nimport { Workspace } from '../../../../../platform/workspace/test/common/testWorkspace.js';\nimport { extUriBiasedIgnorePathCase } from '../../../../../base/common/resources.js';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from '../../../../../base/test/common/utils.js';\n\nconst DEFAULT_EDITOR_CONFIG = {};\nconst DEFAULT_USER_CONFIG = { useRipgrep: true, useIgnoreFiles: true, useGlobalIgnoreFiles: true, useParentIgnoreFiles: true };\nconst DEFAULT_QUERY_PROPS = {};\nconst DEFAULT_TEXT_QUERY_PROPS = { usePCRE2: false };\n\nsuite('QueryBuilder', () => {\n\tensureNoDisposablesAreLeakedInTestSuite();\n\tconst PATTERN_INFO: IPatternInfo = { pattern: 'a' };\n\tconst ROOT_1 = fixPath('/foo/root1');\n\tconst ROOT_1_URI = getUri(ROOT_1);\n\tconst ROOT_1_NAMED_FOLDER = toWorkspaceFolder(ROOT_1_URI);\n\tconst WS_CONFIG_PATH = getUri('/bar/test.code-workspace'); // location of the workspace file (not important except that it is a file URI)\n\n\tlet instantiationService: TestInstantiationService;\n\tlet queryBuilder: QueryBuilder;\n\tlet mockConfigService: TestConfigurationService;\n\tlet mockContextService: TestContextService;\n\tlet mockWorkspace: Workspace;\n\n\tsetup(() => {\n\t\tinstantiationService = new TestInstantiationService();\n\n\t\tmockConfigService = new TestConfigurationService();\n\t\tmockConfigService.setUserConfiguration('search', DEFAULT_USER_CONFIG);\n\t\tmockConfigService.setUserConfiguration('editor', DEFAULT_EDITOR_CONFIG);\n\t\tinstantiationService.stub(IConfigurationService, mockConfigService);\n\n\t\tmockContextService = new TestContextService();\n\t\tmockWorkspace = new Workspace('workspace', [toWorkspaceFolder(ROOT_1_URI)]);\n\t\tmockContextService.setWorkspace(mockWorkspace);\n\n\t\tinstantiationService.stub(IWorkspaceContextService, mockContextService);\n\t\tinstantiationService.stub(IEnvironmentService, TestEnvironmentService);\n\t\tinstantiationService.stub(IPathService, new TestPathService());\n\n\t\tqueryBuilder = instantiationService.createInstance(QueryBuilder);\n\t});\n\n\tteardown(() => {\n\t\tinstantiationService.dispose();\n\t});\n\n\ttest('simple text pattern', () => {\n\t\tassertEqualTextQueries(\n\t\t\tqueryBuilder.text(PATTERN_INFO),\n\t\t\t{\n\t\t\t\tfolderQueries: [],\n\t\t\t\tcontentPattern: PATTERN_INFO,\n\t\t\t\ttype: QueryType.Text\n\t\t\t});\n\t});\n\n\ttest('normalize literal newlines', () => {\n\t\tassertEqualTextQueries(\n\t\t\tqueryBuilder.text({ pattern: 'foo\\nbar', isRegExp: true }),\n\t\t\t{\n\t\t\t\tfolderQueries: [],\n\t\t\t\tcontentPattern: {\n\t\t\t\t\tpattern: 'foo\\\\nbar',\n\t\t\t\t\tisRegExp: true,\n\t\t\t\t\tisMultiline: true\n\t\t\t\t},\n\t\t\t\ttype: QueryType.Text\n\t\t\t});\n\n\t\tassertEqualTextQueries(\n\t\t\tqueryBuilder.text({ pattern: 'foo\\nbar', isRegExp: false }),\n\t\t\t{\n\t\t\t\tfolderQueries: [],\n\t\t\t\tcontentPattern: {\n\t\t\t\t\tpattern: 'foo\\nbar',\n\t\t\t\t\tisRegExp: false,\n\t\t\t\t\tisMultiline: true\n\t\t\t\t},\n\t\t\t\ttype: QueryType.Text\n\t\t\t});\n\t});\n\n\ttest('splits include pattern when expandPatterns enabled', () => {\n\t\tassertEqualQueries(\n\t\t\tqueryBuilder.file(\n\t\t\t\t[ROOT_1_NAMED_FOLDER],\n\t\t\t\t{ includePattern: '**/foo, **/bar', expandPatterns: true },\n\t\t\t),\n\t\t\t{\n\t\t\t\tfolderQueries: [{\n\t\t\t\t\tfolder: ROOT_1_URI\n\t\t\t\t}],\n\t\t\t\ttype: QueryType.File,\n\t\t\t\tincludePattern: {\n\t\t\t\t\t'**/foo': true,\n\t\t\t\t\t'**/foo/**': true,\n\t\t\t\t\t'**/bar': true,\n\t\t\t\t\t'**/bar/**': true,\n\t\t\t\t}\n\t\t\t});\n\t});\n\n\ttest('does not split include pattern when expandPatterns disabled', () => {\n\t\tassertEqualQueries(\n\t\t\tqueryBuilder.file(\n\t\t\t\t[ROOT_1_NAMED_FOLDER],\n\t\t\t\t{ includePattern: '**/foo, **/bar' },\n\t\t\t),\n\t\t\t{\n\t\t\t\tfolderQueries: [{\n\t\t\t\t\tfolder: ROOT_1_URI\n\t\t\t\t}],\n\t\t\t\ttype: QueryType.File,\n\t\t\t\tincludePattern: {\n\t\t\t\t\t'**/foo, **/bar': true\n\t\t\t\t}\n\t\t\t});\n\t});\n\n\ttest('includePattern array', () => {\n\t\tassertEqualQueries(\n\t\t\tqueryBuilder.file(\n\t\t\t\t[ROOT_1_NAMED_FOLDER],\n\t\t\t\t{ includePattern: ['**/foo', '**/bar'] },\n\t\t\t),\n\t\t\t{\n\t\t\t\tfolderQueries: [{\n\t\t\t\t\tfolder: ROOT_1_URI\n\t\t\t\t}],\n\t\t\t\ttype: QueryType.File,\n\t\t\t\tincludePattern: {\n\t\t\t\t\t'**/foo': true,\n\t\t\t\t\t'**/bar': true\n\t\t\t\t}\n\t\t\t});\n\t});\n\n\ttest('includePattern array with expandPatterns', () => {\n\t\tassertEqualQueries(\n\t\t\tqueryBuilder.file(\n\t\t\t\t[ROOT_1_NAMED_FOLDER],\n\t\t\t\t{ includePattern: ['**/foo', '**/bar'], expandPatterns: true },\n\t\t\t),\n\t\t\t{\n\t\t\t\tfolderQueries: [{\n\t\t\t\t\tfolder: ROOT_1_URI\n\t\t\t\t}],\n\t\t\t\ttype: QueryType.File,\n\t\t\t\tincludePattern: {\n\t\t\t\t\t'**/foo': true,\n\t\t\t\t\t'**/foo/**': true,\n\t\t\t\t\t'**/bar': true,\n\t\t\t\t\t'**/bar/**': true,\n\t\t\t\t}\n\t\t\t});\n\t});\n\n\ttest('folderResources', () => {\n\t\tassertEqualTextQueries(\n\t\t\tqueryBuilder.text(\n\t\t\t\tPATTERN_INFO,\n\t\t\t\t[ROOT_1_URI]\n\t\t\t),\n\t\t\t{\n\t\t\t\tcontentPattern: PATTERN_INFO,\n\t\t\t\tfolderQueries: [{ folder: ROOT_1_URI }],\n\t\t\t\ttype: QueryType.Text\n\t\t\t});\n\t});\n\n\ttest('simple exclude setting', () => {\n\t\tmockConfigService.setUserConfiguration('search', {\n\t\t\t...DEFAULT_USER_CONFIG,\n\t\t\texclude: {\n\t\t\t\t'bar/**': true,\n\t\t\t\t'foo/**': {\n\t\t\t\t\t'when': '$(basename).ts'\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tassertEqualTextQueries(\n\t\t\tqueryBuilder.text(\n\t\t\t\tPATTERN_INFO,\n\t\t\t\t[ROOT_1_URI],\n\t\t\t\t{\n\t\t\t\t\texpandPatterns: true // verify that this doesn't affect patterns from configuration\n\t\t\t\t}\n\t\t\t),\n\t\t\t{\n\t\t\t\tcontentPattern: PATTERN_INFO,\n\t\t\t\tfolderQueries: [{\n\t\t\t\t\tfolder: ROOT_1_URI,\n\t\t\t\t\texcludePattern: [{\n\t\t\t\t\t\tpattern: {\n\t\t\t\t\t\t\t'bar/**': true,\n\t\t\t\t\t\t\t'foo/**': {\n\t\t\t\t\t\t\t\t'when': '$(basename).ts'\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}]\n\t\t\t\t}],\n\t\t\t\ttype: QueryType.Text\n\t\t\t});\n\t});\n\n\ttest('simple include', () => {\n\t\tassertEqualTextQueries(\n\t\t\tqueryBuilder.text(\n\t\t\t\tPATTERN_INFO,\n\t\t\t\t[ROOT_1_URI],\n\t\t\t\t{\n\t\t\t\t\tincludePattern: 'bar',\n\t\t\t\t\texpandPatterns: true\n\t\t\t\t}\n\t\t\t),\n\t\t\t{\n\t\t\t\tcontentPattern: PATTERN_INFO,\n\t\t\t\tfolderQueries: [{\n\t\t\t\t\tfolder: ROOT_1_URI\n\t\t\t\t}],\n\t\t\t\tincludePattern: {\n\t\t\t\t\t'**/bar': true,\n\t\t\t\t\t'**/bar/**': true\n\t\t\t\t},\n\t\t\t\ttype: QueryType.Text\n\t\t\t});\n\n\t\tassertEqualTextQueries(\n\t\t\tqueryBuilder.text(\n\t\t\t\tPATTERN_INFO,\n\t\t\t\t[ROOT_1_URI],\n\t\t\t\t{\n\t\t\t\t\tincludePattern: 'bar'\n\t\t\t\t}\n\t\t\t),\n\t\t\t{\n\t\t\t\tcontentPattern: PATTERN_INFO,\n\t\t\t\tfolderQueries: [{\n\t\t\t\t\tfolder: ROOT_1_URI\n\t\t\t\t}],\n\t\t\t\tincludePattern: {\n\t\t\t\t\t'bar': true\n\t\t\t\t},\n\t\t\t\ttype: QueryType.Text\n\t\t\t});\n\t});\n\n\ttest('simple include with ./ syntax', () => {\n\n\t\tassertEqualTextQueries(\n\t\t\tqueryBuilder.text(\n\t\t\t\tPATTERN_INFO,\n\t\t\t\t[ROOT_1_URI],\n\t\t\t\t{\n\t\t\t\t\tincludePattern: './bar',\n\t\t\t\t\texpandPatterns: true\n\t\t\t\t}\n\t\t\t),\n\t\t\t{\n\t\t\t\tcontentPattern: PATTERN_INFO,\n\t\t\t\tfolderQueries: [{\n\t\t\t\t\tfolder: ROOT_1_URI,\n\t\t\t\t\tincludePattern: {\n\t\t\t\t\t\t'bar': true,\n\t\t\t\t\t\t'bar/**': true\n\t\t\t\t\t}\n\t\t\t\t}],\n\t\t\t\ttype: QueryType.Text\n\t\t\t});\n\n\t\tassertEqualTextQueries(\n\t\t\tqueryBuilder.text(\n\t\t\t\tPATTERN_INFO,\n\t\t\t\t[ROOT_1_URI],\n\t\t\t\t{\n\t\t\t\t\tincludePattern: '.\\\\bar',\n\t\t\t\t\texpandPatterns: true\n\t\t\t\t}\n\t\t\t),\n\t\t\t{\n\t\t\t\tcontentPattern: PATTERN_INFO,\n\t\t\t\tfolderQueries: [{\n\t\t\t\t\tfolder: ROOT_1_URI,\n\t\t\t\t\tincludePattern: {\n\t\t\t\t\t\t'bar': true,\n\t\t\t\t\t\t'bar/**': true\n\t\t\t\t\t}\n\t\t\t\t}],\n\t\t\t\ttype: QueryType.Text\n\t\t\t});\n\t});\n\n\ttest('exclude setting and searchPath', () => {\n\t\tmockConfigService.setUserConfiguration('search', {\n\t\t\t...DEFAULT_USER_CONFIG,\n\t\t\texclude: {\n\t\t\t\t'foo/**/*.js': true,\n\t\t\t\t'bar/**': {\n\t\t\t\t\t'when': '$(basename).ts'\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tassertEqualTextQueries(\n\t\t\tqueryBuilder.text(\n\t\t\t\tPATTERN_INFO,\n\t\t\t\t[ROOT_1_URI],\n\t\t\t\t{\n\t\t\t\t\tincludePattern: './foo',\n\t\t\t\t\texpandPatterns: true\n\t\t\t\t}\n\t\t\t),\n\t\t\t{\n\t\t\t\tcontentPattern: PATTERN_INFO,\n\t\t\t\tfolderQueries: [{\n\t\t\t\t\tfolder: ROOT_1_URI,\n\t\t\t\t\tincludePattern: {\n\t\t\t\t\t\t'foo': true,\n\t\t\t\t\t\t'foo/**': true\n\t\t\t\t\t},\n\t\t\t\t\texcludePattern: [{\n\t\t\t\t\t\tpattern: {\n\t\t\t\t\t\t\t'foo/**/*.js': true,\n\t\t\t\t\t\t\t'bar/**': {\n\t\t\t\t\t\t\t\t'when': '$(basename).ts'\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}]\n\t\t\t\t}],\n\t\t\t\ttype: QueryType.Text\n\t\t\t});\n\t});\n\n\ttest('multiroot exclude settings', () => {\n\t\tconst ROOT_2 = fixPath('/project/root2');\n\t\tconst ROOT_2_URI = getUri(ROOT_2);\n\t\tconst ROOT_3 = fixPath('/project/root3');\n\t\tconst ROOT_3_URI = getUri(ROOT_3);\n\t\tmockWorkspace.folders = toWorkspaceFolders([{ path: ROOT_1_URI.fsPath }, { path: ROOT_2_URI.fsPath }, { path: ROOT_3_URI.fsPath }], WS_CONFIG_PATH, extUriBiasedIgnorePathCase);\n\t\tmockWorkspace.configuration = uri.file(fixPath('/config'));\n\n\t\tmockConfigService.setUserConfiguration('search', {\n\t\t\t...DEFAULT_USER_CONFIG,\n\t\t\texclude: { 'foo/**/*.js': true }\n\t\t}, ROOT_1_URI);\n\n\t\tmockConfigService.setUserConfiguration('search', {\n\t\t\t...DEFAULT_USER_CONFIG,\n\t\t\texclude: { 'bar': true }\n\t\t}, ROOT_2_URI);\n\n\t\t// There are 3 roots, the first two have search.exclude settings, test that the correct basic query is returned\n\t\tassertEqualTextQueries(\n\t\t\tqueryBuilder.text(\n\t\t\t\tPATTERN_INFO,\n\t\t\t\t[ROOT_1_URI, ROOT_2_URI, ROOT_3_URI]\n\t\t\t),\n\t\t\t{\n\t\t\t\tcontentPattern: PATTERN_INFO,\n\t\t\t\tfolderQueries: [\n\t\t\t\t\t{ folder: ROOT_1_URI, excludePattern: makeExcludePatternFromPatterns('foo/**/*.js') },\n\t\t\t\t\t{ folder: ROOT_2_URI, excludePattern: makeExcludePatternFromPatterns('bar') },\n\t\t\t\t\t{ folder: ROOT_3_URI }\n\t\t\t\t],\n\t\t\t\ttype: QueryType.Text\n\t\t\t}\n\t\t);\n\n\t\t// Now test that it merges the root excludes when an 'include' is used\n\t\tassertEqualTextQueries(\n\t\t\tqueryBuilder.text(\n\t\t\t\tPATTERN_INFO,\n\t\t\t\t[ROOT_1_URI, ROOT_2_URI, ROOT_3_URI],\n\t\t\t\t{\n\t\t\t\t\tincludePattern: './root2/src',\n\t\t\t\t\texpandPatterns: true\n\t\t\t\t}\n\t\t\t),\n\t\t\t{\n\t\t\t\tcontentPattern: PATTERN_INFO,\n\t\t\t\tfolderQueries: [\n\t\t\t\t\t{\n\t\t\t\t\t\tfolder: ROOT_2_URI,\n\t\t\t\t\t\tincludePattern: {\n\t\t\t\t\t\t\t'src': true,\n\t\t\t\t\t\t\t'src/**': true\n\t\t\t\t\t\t},\n\t\t\t\t\t\texcludePattern: [{\n\t\t\t\t\t\t\tpattern: { 'bar': true }\n\t\t\t\t\t\t}],\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\ttype: QueryType.Text\n\t\t\t}\n\t\t);\n\t});\n\n\ttest('simple exclude input pattern', () => {\n\t\tassertEqualTextQueries(\n\t\t\tqueryBuilder.text(\n\t\t\t\tPATTERN_INFO,\n\t\t\t\t[ROOT_1_URI],\n\t\t\t\t{\n\t\t\t\t\texcludePattern: [{ pattern: 'foo' }],\n\t\t\t\t\texpandPatterns: true\n\t\t\t\t}\n\t\t\t),\n\t\t\t{\n\t\t\t\tcontentPattern: PATTERN_INFO,\n\t\t\t\tfolderQueries: [{\n\t\t\t\t\tfolder: ROOT_1_URI\n\t\t\t\t}],\n\t\t\t\ttype: QueryType.Text,\n\t\t\t\texcludePattern: patternsToIExpression(...globalGlob('foo'))\n\t\t\t});\n\t});\n\n\ttest('file pattern trimming', () => {\n\t\tconst content = 'content';\n\t\tassertEqualQueries(\n\t\t\tqueryBuilder.file(\n\t\t\t\t[],\n\t\t\t\t{ filePattern: ` ${content} ` }\n\t\t\t),\n\t\t\t{\n\t\t\t\tfolderQueries: [],\n\t\t\t\tfilePattern: content,\n\t\t\t\ttype: QueryType.File\n\t\t\t});\n\t});\n\n\ttest('exclude ./ syntax', () => {\n\t\tassertEqualTextQueries(\n\t\t\tqueryBuilder.text(\n\t\t\t\tPATTERN_INFO,\n\t\t\t\t[ROOT_1_URI],\n\t\t\t\t{\n\t\t\t\t\texcludePattern: [{ pattern: './bar' }],\n\t\t\t\t\texpandPatterns: true\n\t\t\t\t}\n\t\t\t),\n\t\t\t{\n\t\t\t\tcontentPattern: PATTERN_INFO,\n\t\t\t\tfolderQueries: [{\n\t\t\t\t\tfolder: ROOT_1_URI,\n\t\t\t\t\texcludePattern: makeExcludePatternFromPatterns('bar', 'bar/**'),\n\t\t\t\t}],\n\t\t\t\ttype: QueryType.Text\n\t\t\t});\n\n\t\tassertEqualTextQueries(\n\t\t\tqueryBuilder.text(\n\t\t\t\tPATTERN_INFO,\n\t\t\t\t[ROOT_1_URI],\n\t\t\t\t{\n\t\t\t\t\texcludePattern: [{ pattern: './bar/**/*.ts' }],\n\t\t\t\t\texpandPatterns: true\n\t\t\t\t}\n\t\t\t),\n\t\t\t{\n\t\t\t\tcontentPattern: PATTERN_INFO,\n\t\t\t\tfolderQueries: [{\n\t\t\t\t\tfolder: ROOT_1_URI,\n\t\t\t\t\texcludePattern: makeExcludePatternFromPatterns('bar/**/*.ts', 'bar/**/*.ts/**'),\n\t\t\t\t}],\n\t\t\t\ttype: QueryType.Text\n\t\t\t});\n\n\t\tassertEqualTextQueries(\n\t\t\tqueryBuilder.text(\n\t\t\t\tPATTERN_INFO,\n\t\t\t\t[ROOT_1_URI],\n\t\t\t\t{\n\t\t\t\t\texcludePattern: [{ pattern: '.\\\\bar\\\\**\\\\*.ts' }],\n\t\t\t\t\texpandPatterns: true\n\t\t\t\t}\n\t\t\t),\n\t\t\t{\n\t\t\t\tcontentPattern: PATTERN_INFO,\n\t\t\t\tfolderQueries: [{\n\t\t\t\t\tfolder: ROOT_1_URI,\n\t\t\t\t\texcludePattern: makeExcludePatternFromPatterns('bar/**/*.ts', 'bar/**/*.ts/**'),\n\t\t\t\t}],\n\t\t\t\ttype: QueryType.Text\n\t\t\t});\n\t});\n\n\ttest('extraFileResources', () => {\n\t\tassertEqualTextQueries(\n\t\t\tqueryBuilder.text(\n\t\t\t\tPATTERN_INFO,\n\t\t\t\t[ROOT_1_URI],\n\t\t\t\t{ extraFileResources: [getUri('/foo/bar.js')] }\n\t\t\t),\n\t\t\t{\n\t\t\t\tcontentPattern: PATTERN_INFO,\n\t\t\t\tfolderQueries: [{\n\t\t\t\t\tfolder: ROOT_1_URI\n\t\t\t\t}],\n\t\t\t\textraFileResources: [getUri('/foo/bar.js')],\n\t\t\t\ttype: QueryType.Text\n\t\t\t});\n\n\t\tassertEqualTextQueries(\n\t\t\tqueryBuilder.text(\n\t\t\t\tPATTERN_INFO,\n\t\t\t\t[ROOT_1_URI],\n\t\t\t\t{\n\t\t\t\t\textraFileResources: [getUri('/foo/bar.js')],\n\t\t\t\t\texcludePattern: [{ pattern: '*.js' }],\n\t\t\t\t\texpandPatterns: true\n\t\t\t\t}\n\t\t\t),\n\t\t\t{\n\t\t\t\tcontentPattern: PATTERN_INFO,\n\t\t\t\tfolderQueries: [{\n\t\t\t\t\tfolder: ROOT_1_URI\n\t\t\t\t}],\n\t\t\t\texcludePattern: patternsToIExpression(...globalGlob('*.js')),\n\t\t\t\ttype: QueryType.Text\n\t\t\t});\n\n\t\tassertEqualTextQueries(\n\t\t\tqueryBuilder.text(\n\t\t\t\tPATTERN_INFO,\n\t\t\t\t[ROOT_1_URI],\n\t\t\t\t{\n\t\t\t\t\textraFileResources: [getUri('/foo/bar.js')],\n\t\t\t\t\tincludePattern: '*.txt',\n\t\t\t\t\texpandPatterns: true\n\t\t\t\t}\n\t\t\t),\n\t\t\t{\n\t\t\t\tcontentPattern: PATTERN_INFO,\n\t\t\t\tfolderQueries: [{\n\t\t\t\t\tfolder: ROOT_1_URI\n\t\t\t\t}],\n\t\t\t\tincludePattern: patternsToIExpression(...globalGlob('*.txt')),\n\t\t\t\ttype: QueryType.Text\n\t\t\t});\n\t});\n\n\tsuite('parseSearchPaths 1', () => {\n\t\ttest('simple includes', () => {\n\t\t\tfunction testSimpleIncludes(includePattern: string, expectedPatterns: string[]): void {\n\t\t\t\tconst result = queryBuilder.parseSearchPaths(includePattern);\n\t\t\t\tassert.deepStrictEqual(\n\t\t\t\t\t{ ...result.pattern },\n\t\t\t\t\tpatternsToIExpression(...expectedPatterns),\n\t\t\t\t\tincludePattern);\n\t\t\t\tassert.strictEqual(result.searchPaths, undefined);\n\t\t\t}\n\n\t\t\t[\n\t\t\t\t['a', ['**/a/**', '**/a']],\n\t\t\t\t['a/b', ['**/a/b', '**/a/b/**']],\n\t\t\t\t['a/b,  c', ['**/a/b', '**/c', '**/a/b/**', '**/c/**']],\n\t\t\t\t['a,.txt', ['**/a', '**/a/**', '**/*.txt', '**/*.txt/**']],\n\t\t\t\t['a,,,b', ['**/a', '**/a/**', '**/b', '**/b/**']],\n\t\t\t\t['**/a,b/**', ['**/a', '**/a/**', '**/b/**']]\n\t\t\t].forEach(([includePattern, expectedPatterns]) => testSimpleIncludes(<string>includePattern, <string[]>expectedPatterns));\n\t\t});\n\n\t\tfunction testIncludes(includePattern: string, expectedResult: ISearchPathsInfo): void {\n\t\t\tlet actual: ISearchPathsInfo;\n\t\t\ttry {\n\t\t\t\tactual = queryBuilder.parseSearchPaths(includePattern);\n\t\t\t} catch (_) {\n\t\t\t\tactual = { searchPaths: [] };\n\t\t\t}\n\n\t\t\tassertEqualSearchPathResults(\n\t\t\t\tactual,\n\t\t\t\texpectedResult,\n\t\t\t\tincludePattern);\n\t\t}\n\n\t\tfunction testIncludesDataItem([includePattern, expectedResult]: [string, ISearchPathsInfo]): void {\n\t\t\ttestIncludes(includePattern, expectedResult);\n\t\t}\n\n\t\ttest('absolute includes', () => {\n\t\t\tconst cases: [string, ISearchPathsInfo][] = [\n\t\t\t\t[\n\t\t\t\t\tfixPath('/foo/bar'),\n\t\t\t\t\t{\n\t\t\t\t\t\tsearchPaths: [{ searchPath: getUri('/foo/bar') }]\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\tfixPath('/foo/bar') + ',' + 'a',\n\t\t\t\t\t{\n\t\t\t\t\t\tsearchPaths: [{ searchPath: getUri('/foo/bar') }],\n\t\t\t\t\t\tpattern: patternsToIExpression(...globalGlob('a'))\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\tfixPath('/foo/bar') + ',' + fixPath('/1/2'),\n\t\t\t\t\t{\n\t\t\t\t\t\tsearchPaths: [{ searchPath: getUri('/foo/bar') }, { searchPath: getUri('/1/2') }]\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\tfixPath('/foo/bar') + ',' + fixPath('/foo/../foo/bar/fooar/..'),\n\t\t\t\t\t{\n\t\t\t\t\t\tsearchPaths: [{\n\t\t\t\t\t\t\tsearchPath: getUri('/foo/bar')\n\t\t\t\t\t\t}]\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\tfixPath('/foo/bar/**/*.ts'),\n\t\t\t\t\t{\n\t\t\t\t\t\tsearchPaths: [{\n\t\t\t\t\t\t\tsearchPath: getUri('/foo/bar'),\n\t\t\t\t\t\t\tpattern: patternsToIExpression('**/*.ts', '**/*.ts/**')\n\t\t\t\t\t\t}]\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\tfixPath('/foo/bar/*a/b/c'),\n\t\t\t\t\t{\n\t\t\t\t\t\tsearchPaths: [{\n\t\t\t\t\t\t\tsearchPath: getUri('/foo/bar'),\n\t\t\t\t\t\t\tpattern: patternsToIExpression('*a/b/c', '*a/b/c/**')\n\t\t\t\t\t\t}]\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\tfixPath('/*a/b/c'),\n\t\t\t\t\t{\n\t\t\t\t\t\tsearchPaths: [{\n\t\t\t\t\t\t\tsearchPath: getUri('/'),\n\t\t\t\t\t\t\tpattern: patternsToIExpression('*a/b/c', '*a/b/c/**')\n\t\t\t\t\t\t}]\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\tfixPath('/foo/{b,c}ar'),\n\t\t\t\t\t{\n\t\t\t\t\t\tsearchPaths: [{\n\t\t\t\t\t\t\tsearchPath: getUri('/foo'),\n\t\t\t\t\t\t\tpattern: patternsToIExpression('{b,c}ar', '{b,c}ar/**')\n\t\t\t\t\t\t}]\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t];\n\t\t\tcases.forEach(testIncludesDataItem);\n\t\t});\n\n\t\ttest('relative includes w/single root folder', () => {\n\t\t\tconst cases: [string, ISearchPathsInfo][] = [\n\t\t\t\t[\n\t\t\t\t\t'./a',\n\t\t\t\t\t{\n\t\t\t\t\t\tsearchPaths: [{\n\t\t\t\t\t\t\tsearchPath: ROOT_1_URI,\n\t\t\t\t\t\t\tpattern: patternsToIExpression('a', 'a/**')\n\t\t\t\t\t\t}]\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t'./a/',\n\t\t\t\t\t{\n\t\t\t\t\t\tsearchPaths: [{\n\t\t\t\t\t\t\tsearchPath: ROOT_1_URI,\n\t\t\t\t\t\t\tpattern: patternsToIExpression('a', 'a/**')\n\t\t\t\t\t\t}]\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t'./a/*b/c',\n\t\t\t\t\t{\n\t\t\t\t\t\tsearchPaths: [{\n\t\t\t\t\t\t\tsearchPath: ROOT_1_URI,\n\t\t\t\t\t\t\tpattern: patternsToIExpression('a/*b/c', 'a/*b/c/**')\n\t\t\t\t\t\t}]\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t'./a/*b/c, ' + fixPath('/project/foo'),\n\t\t\t\t\t{\n\t\t\t\t\t\tsearchPaths: [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tsearchPath: ROOT_1_URI,\n\t\t\t\t\t\t\t\tpattern: patternsToIExpression('a/*b/c', 'a/*b/c/**')\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tsearchPath: getUri('/project/foo')\n\t\t\t\t\t\t\t}]\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t'./a/b/,./c/d',\n\t\t\t\t\t{\n\t\t\t\t\t\tsearchPaths: [{\n\t\t\t\t\t\t\tsearchPath: ROOT_1_URI,\n\t\t\t\t\t\t\tpattern: patternsToIExpression('a/b', 'a/b/**', 'c/d', 'c/d/**')\n\t\t\t\t\t\t}]\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t'../',\n\t\t\t\t\t{\n\t\t\t\t\t\tsearchPaths: [{\n\t\t\t\t\t\t\tsearchPath: getUri('/foo')\n\t\t\t\t\t\t}]\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t'..',\n\t\t\t\t\t{\n\t\t\t\t\t\tsearchPaths: [{\n\t\t\t\t\t\t\tsearchPath: getUri('/foo')\n\t\t\t\t\t\t}]\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t'..\\\\bar',\n\t\t\t\t\t{\n\t\t\t\t\t\tsearchPaths: [{\n\t\t\t\t\t\t\tsearchPath: getUri('/foo/bar')\n\t\t\t\t\t\t}]\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t];\n\t\t\tcases.forEach(testIncludesDataItem);\n\t\t});\n\n\t\ttest('relative includes w/two root folders', () => {\n\t\t\tconst ROOT_2 = '/project/root2';\n\t\t\tmockWorkspace.folders = toWorkspaceFolders([{ path: ROOT_1_URI.fsPath }, { path: getUri(ROOT_2).fsPath }], WS_CONFIG_PATH, extUriBiasedIgnorePathCase);\n\t\t\tmockWorkspace.configuration = uri.file(fixPath('config'));\n\n\t\t\tconst cases: [string, ISearchPathsInfo][] = [\n\t\t\t\t[\n\t\t\t\t\t'./root1',\n\t\t\t\t\t{\n\t\t\t\t\t\tsearchPaths: [{\n\t\t\t\t\t\t\tsearchPath: getUri(ROOT_1)\n\t\t\t\t\t\t}]\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t'./root2',\n\t\t\t\t\t{\n\t\t\t\t\t\tsearchPaths: [{\n\t\t\t\t\t\t\tsearchPath: getUri(ROOT_2),\n\t\t\t\t\t\t}]\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t'./root1/a/**/b, ./root2/**/*.txt',\n\t\t\t\t\t{\n\t\t\t\t\t\tsearchPaths: [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tsearchPath: ROOT_1_URI,\n\t\t\t\t\t\t\t\tpattern: patternsToIExpression('a/**/b', 'a/**/b/**')\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tsearchPath: getUri(ROOT_2),\n\t\t\t\t\t\t\t\tpattern: patternsToIExpression('**/*.txt', '**/*.txt/**')\n\t\t\t\t\t\t\t}]\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t];\n\t\t\tcases.forEach(testIncludesDataItem);\n\t\t});\n\n\t\ttest('include ./foldername', () => {\n\t\t\tconst ROOT_2 = '/project/root2';\n\t\t\tconst ROOT_1_FOLDERNAME = 'foldername';\n\t\t\tmockWorkspace.folders = toWorkspaceFolders([{ path: ROOT_1_URI.fsPath, name: ROOT_1_FOLDERNAME }, { path: getUri(ROOT_2).fsPath }], WS_CONFIG_PATH, extUriBiasedIgnorePathCase);\n\t\t\tmockWorkspace.configuration = uri.file(fixPath('config'));\n\n\t\t\tconst cases: [string, ISearchPathsInfo][] = [\n\t\t\t\t[\n\t\t\t\t\t'./foldername',\n\t\t\t\t\t{\n\t\t\t\t\t\tsearchPaths: [{\n\t\t\t\t\t\t\tsearchPath: ROOT_1_URI\n\t\t\t\t\t\t}]\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t'./foldername/foo',\n\t\t\t\t\t{\n\t\t\t\t\t\tsearchPaths: [{\n\t\t\t\t\t\t\tsearchPath: ROOT_1_URI,\n\t\t\t\t\t\t\tpattern: patternsToIExpression('foo', 'foo/**')\n\t\t\t\t\t\t}]\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t];\n\t\t\tcases.forEach(testIncludesDataItem);\n\t\t});\n\n\t\ttest('folder with slash in the name', () => {\n\t\t\tconst ROOT_2 = '/project/root2';\n\t\t\tconst ROOT_2_URI = getUri(ROOT_2);\n\t\t\tconst ROOT_1_FOLDERNAME = 'folder/one';\n\t\t\tconst ROOT_2_FOLDERNAME = 'folder/two+'; // And another regex character, #126003\n\t\t\tmockWorkspace.folders = toWorkspaceFolders([{ path: ROOT_1_URI.fsPath, name: ROOT_1_FOLDERNAME }, { path: ROOT_2_URI.fsPath, name: ROOT_2_FOLDERNAME }], WS_CONFIG_PATH, extUriBiasedIgnorePathCase);\n\t\t\tmockWorkspace.configuration = uri.file(fixPath('config'));\n\n\t\t\tconst cases: [string, ISearchPathsInfo][] = [\n\t\t\t\t[\n\t\t\t\t\t'./folder/one',\n\t\t\t\t\t{\n\t\t\t\t\t\tsearchPaths: [{\n\t\t\t\t\t\t\tsearchPath: ROOT_1_URI\n\t\t\t\t\t\t}]\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t'./folder/two+/foo/',\n\t\t\t\t\t{\n\t\t\t\t\t\tsearchPaths: [{\n\t\t\t\t\t\t\tsearchPath: ROOT_2_URI,\n\t\t\t\t\t\t\tpattern: patternsToIExpression('foo', 'foo/**')\n\t\t\t\t\t\t}]\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t'./folder/onesomethingelse',\n\t\t\t\t\t{ searchPaths: [] }\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t'./folder/onesomethingelse/foo',\n\t\t\t\t\t{ searchPaths: [] }\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t'./folder',\n\t\t\t\t\t{ searchPaths: [] }\n\t\t\t\t]\n\t\t\t];\n\t\t\tcases.forEach(testIncludesDataItem);\n\t\t});\n\n\t\ttest('relative includes w/multiple ambiguous root folders', () => {\n\t\t\tconst ROOT_2 = '/project/rootB';\n\t\t\tconst ROOT_3 = '/otherproject/rootB';\n\t\t\tmockWorkspace.folders = toWorkspaceFolders([{ path: ROOT_1_URI.fsPath }, { path: getUri(ROOT_2).fsPath }, { path: getUri(ROOT_3).fsPath }], WS_CONFIG_PATH, extUriBiasedIgnorePathCase);\n\t\t\tmockWorkspace.configuration = uri.file(fixPath('/config'));\n\n\t\t\tconst cases: [string, ISearchPathsInfo][] = [\n\t\t\t\t[\n\t\t\t\t\t'',\n\t\t\t\t\t{\n\t\t\t\t\t\tsearchPaths: undefined\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t'./',\n\t\t\t\t\t{\n\t\t\t\t\t\tsearchPaths: undefined\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t'./root1',\n\t\t\t\t\t{\n\t\t\t\t\t\tsearchPaths: [{\n\t\t\t\t\t\t\tsearchPath: getUri(ROOT_1)\n\t\t\t\t\t\t}]\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t'./root1,./',\n\t\t\t\t\t{\n\t\t\t\t\t\tsearchPaths: [{\n\t\t\t\t\t\t\tsearchPath: getUri(ROOT_1)\n\t\t\t\t\t\t}]\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t'./rootB',\n\t\t\t\t\t{\n\t\t\t\t\t\tsearchPaths: [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tsearchPath: getUri(ROOT_2),\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tsearchPath: getUri(ROOT_3),\n\t\t\t\t\t\t\t}]\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t'./rootB/a/**/b, ./rootB/b/**/*.txt',\n\t\t\t\t\t{\n\t\t\t\t\t\tsearchPaths: [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tsearchPath: getUri(ROOT_2),\n\t\t\t\t\t\t\t\tpattern: patternsToIExpression('a/**/b', 'a/**/b/**', 'b/**/*.txt', 'b/**/*.txt/**')\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tsearchPath: getUri(ROOT_3),\n\t\t\t\t\t\t\t\tpattern: patternsToIExpression('a/**/b', 'a/**/b/**', 'b/**/*.txt', 'b/**/*.txt/**')\n\t\t\t\t\t\t\t}]\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t'./root1/**/foo/, bar/',\n\t\t\t\t\t{\n\t\t\t\t\t\tpattern: patternsToIExpression('**/bar', '**/bar/**'),\n\t\t\t\t\t\tsearchPaths: [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tsearchPath: ROOT_1_URI,\n\t\t\t\t\t\t\t\tpattern: patternsToIExpression('**/foo', '**/foo/**')\n\t\t\t\t\t\t\t}]\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t];\n\t\t\tcases.forEach(testIncludesDataItem);\n\t\t});\n\t});\n\n\tsuite('parseSearchPaths 2', () => {\n\n\t\tfunction testIncludes(includePattern: string, expectedResult: ISearchPathsInfo): void {\n\t\t\tassertEqualSearchPathResults(\n\t\t\t\tqueryBuilder.parseSearchPaths(includePattern),\n\t\t\t\texpectedResult,\n\t\t\t\tincludePattern);\n\t\t}\n\n\t\tfunction testIncludesDataItem([includePattern, expectedResult]: [string, ISearchPathsInfo]): void {\n\t\t\ttestIncludes(includePattern, expectedResult);\n\t\t}\n\n\t\t(isWindows ? test.skip : test)('includes with tilde', () => {\n\t\t\tconst userHome = URI.file('/');\n\t\t\tconst cases: [string, ISearchPathsInfo][] = [\n\t\t\t\t[\n\t\t\t\t\t'~/foo/bar',\n\t\t\t\t\t{\n\t\t\t\t\t\tsearchPaths: [{ searchPath: getUri(userHome.fsPath, '/foo/bar') }]\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t'~/foo/bar, a',\n\t\t\t\t\t{\n\t\t\t\t\t\tsearchPaths: [{ searchPath: getUri(userHome.fsPath, '/foo/bar') }],\n\t\t\t\t\t\tpattern: patternsToIExpression(...globalGlob('a'))\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\tfixPath('/foo/~/bar'),\n\t\t\t\t\t{\n\t\t\t\t\t\tsearchPaths: [{ searchPath: getUri('/foo/~/bar') }]\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t];\n\t\t\tcases.forEach(testIncludesDataItem);\n\t\t});\n\t});\n\n\tsuite('smartCase', () => {\n\t\ttest('no flags -> no change', () => {\n\t\t\tconst query = queryBuilder.text(\n\t\t\t\t{\n\t\t\t\t\tpattern: 'a'\n\t\t\t\t},\n\t\t\t\t[]);\n\n\t\t\tassert(!query.contentPattern.isCaseSensitive);\n\t\t});\n\n\t\ttest('maintains isCaseSensitive when smartCase not set', () => {\n\t\t\tconst query = queryBuilder.text(\n\t\t\t\t{\n\t\t\t\t\tpattern: 'a',\n\t\t\t\t\tisCaseSensitive: true\n\t\t\t\t},\n\t\t\t\t[]);\n\n\t\t\tassert(query.contentPattern.isCaseSensitive);\n\t\t});\n\n\t\ttest('maintains isCaseSensitive when smartCase set', () => {\n\t\t\tconst query = queryBuilder.text(\n\t\t\t\t{\n\t\t\t\t\tpattern: 'a',\n\t\t\t\t\tisCaseSensitive: true\n\t\t\t\t},\n\t\t\t\t[],\n\t\t\t\t{\n\t\t\t\t\tisSmartCase: true\n\t\t\t\t});\n\n\t\t\tassert(query.contentPattern.isCaseSensitive);\n\t\t});\n\n\t\ttest('smartCase determines not case sensitive', () => {\n\t\t\tconst query = queryBuilder.text(\n\t\t\t\t{\n\t\t\t\t\tpattern: 'abcd'\n\t\t\t\t},\n\t\t\t\t[],\n\t\t\t\t{\n\t\t\t\t\tisSmartCase: true\n\t\t\t\t});\n\n\t\t\tassert(!query.contentPattern.isCaseSensitive);\n\t\t});\n\n\t\ttest('smartCase determines case sensitive', () => {\n\t\t\tconst query = queryBuilder.text(\n\t\t\t\t{\n\t\t\t\t\tpattern: 'abCd'\n\t\t\t\t},\n\t\t\t\t[],\n\t\t\t\t{\n\t\t\t\t\tisSmartCase: true\n\t\t\t\t});\n\n\t\t\tassert(query.contentPattern.isCaseSensitive);\n\t\t});\n\n\t\ttest('smartCase determines not case sensitive (regex)', () => {\n\t\t\tconst query = queryBuilder.text(\n\t\t\t\t{\n\t\t\t\t\tpattern: 'ab\\\\Sd',\n\t\t\t\t\tisRegExp: true\n\t\t\t\t},\n\t\t\t\t[],\n\t\t\t\t{\n\t\t\t\t\tisSmartCase: true\n\t\t\t\t});\n\n\t\t\tassert(!query.contentPattern.isCaseSensitive);\n\t\t});\n\n\t\ttest('smartCase determines case sensitive (regex)', () => {\n\t\t\tconst query = queryBuilder.text(\n\t\t\t\t{\n\t\t\t\t\tpattern: 'ab[A-Z]d',\n\t\t\t\t\tisRegExp: true\n\t\t\t\t},\n\t\t\t\t[],\n\t\t\t\t{\n\t\t\t\t\tisSmartCase: true\n\t\t\t\t});\n\n\t\t\tassert(query.contentPattern.isCaseSensitive);\n\t\t});\n\t});\n\n\tsuite('file', () => {\n\t\ttest('simple file query', () => {\n\t\t\tconst cacheKey = 'asdf';\n\t\t\tconst query = queryBuilder.file(\n\t\t\t\t[ROOT_1_NAMED_FOLDER],\n\t\t\t\t{\n\t\t\t\t\tcacheKey,\n\t\t\t\t\tsortByScore: true\n\t\t\t\t},\n\t\t\t);\n\n\t\t\tassert.strictEqual(query.folderQueries.length, 1);\n\t\t\tassert.strictEqual(query.cacheKey, cacheKey);\n\t\t\tassert(query.sortByScore);\n\t\t});\n\t});\n\n\tsuite('pattern processing', () => {\n\t\ttest('text query with comma-separated includes with no workspace', () => {\n\t\t\tconst query = queryBuilder.text(\n\t\t\t\t{ pattern: `` },\n\t\t\t\t[],\n\t\t\t\t{\n\t\t\t\t\tincludePattern: '*.js,*.ts',\n\t\t\t\t\texpandPatterns: true\n\t\t\t\t}\n\t\t\t);\n\t\t\tassert.deepEqual(query.includePattern, {\n\t\t\t\t\"**/*.js/**\": true,\n\t\t\t\t\"**/*.js\": true,\n\t\t\t\t\"**/*.ts/**\": true,\n\t\t\t\t\"**/*.ts\": true,\n\t\t\t});\n\t\t\tassert.strictEqual(query.folderQueries.length, 0);\n\t\t});\n\t\ttest('text query with comma-separated includes with workspace', () => {\n\t\t\tconst query = queryBuilder.text(\n\t\t\t\t{ pattern: `` },\n\t\t\t\t[ROOT_1_URI],\n\t\t\t\t{\n\t\t\t\t\tincludePattern: '*.js,*.ts',\n\t\t\t\t\texpandPatterns: true\n\t\t\t\t}\n\t\t\t);\n\t\t\tassert.deepEqual(query.includePattern, {\n\t\t\t\t\"**/*.js/**\": true,\n\t\t\t\t\"**/*.js\": true,\n\t\t\t\t\"**/*.ts/**\": true,\n\t\t\t\t\"**/*.ts\": true,\n\t\t\t});\n\t\t\tassert.strictEqual(query.folderQueries.length, 1);\n\t\t});\n\t\ttest('text query with comma-separated excludes globally', () => {\n\t\t\tconst query = queryBuilder.text(\n\t\t\t\t{ pattern: `` },\n\t\t\t\t[],\n\t\t\t\t{\n\t\t\t\t\texcludePattern: [{ pattern: '*.js,*.ts' }],\n\t\t\t\t\texpandPatterns: true\n\t\t\t\t}\n\t\t\t);\n\t\t\tassert.deepEqual(query.excludePattern, {\n\t\t\t\t\"**/*.js/**\": true,\n\t\t\t\t\"**/*.js\": true,\n\t\t\t\t\"**/*.ts/**\": true,\n\t\t\t\t\"**/*.ts\": true,\n\t\t\t});\n\t\t\tassert.strictEqual(query.folderQueries.length, 0);\n\t\t});\n\t\ttest('text query with comma-separated excludes globally in a workspace', () => {\n\t\t\tconst query = queryBuilder.text(\n\t\t\t\t{ pattern: `` },\n\t\t\t\t[ROOT_1_NAMED_FOLDER.uri],\n\t\t\t\t{\n\t\t\t\t\texcludePattern: [{ pattern: '*.js,*.ts' }],\n\t\t\t\t\texpandPatterns: true\n\t\t\t\t}\n\t\t\t);\n\t\t\tassert.deepEqual(query.excludePattern, {\n\t\t\t\t\"**/*.js/**\": true,\n\t\t\t\t\"**/*.js\": true,\n\t\t\t\t\"**/*.ts/**\": true,\n\t\t\t\t\"**/*.ts\": true,\n\t\t\t});\n\t\t\tassert.strictEqual(query.folderQueries.length, 1);\n\t\t});\n\t\ttest.skip('text query with multiple comma-separated excludes', () => {\n\t\t\t// TODO: Fix. Will require `ICommonQueryProps.excludePattern` to support an array.\n\t\t\tconst query = queryBuilder.text(\n\t\t\t\t{ pattern: `` },\n\t\t\t\t[ROOT_1_NAMED_FOLDER.uri],\n\t\t\t\t{\n\t\t\t\t\texcludePattern: [{ pattern: '*.js,*.ts' }, { pattern: 'foo/*,bar/*' }],\n\t\t\t\t\texpandPatterns: true\n\t\t\t\t}\n\t\t\t);\n\t\t\tassert.deepEqual(query.excludePattern, [\n\t\t\t\t{\n\n\t\t\t\t\t\"**/*.js/**\": true,\n\t\t\t\t\t\"**/*.js\": true,\n\t\t\t\t\t\"**/*.ts/**\": true,\n\t\t\t\t\t\"**/*.ts\": true,\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"**/foo/*/**\": true,\n\t\t\t\t\t\"**/foo/*\": true,\n\t\t\t\t\t\"**/bar/*/**\": true,\n\t\t\t\t\t\"**/bar/*\": true,\n\t\t\t\t}\n\t\t\t]);\n\t\t\tassert.strictEqual(query.folderQueries.length, 1);\n\t\t});\n\t\ttest.skip('text query with base URI on exclud', () => {\n\t\t\t// TODO: Fix. Will require `ICommonQueryProps.excludePattern` to support an baseURI.\n\t\t\tconst query = queryBuilder.text(\n\t\t\t\t{ pattern: `` },\n\t\t\t\t[ROOT_1_NAMED_FOLDER.uri],\n\t\t\t\t{\n\t\t\t\t\texcludePattern: [{ uri: ROOT_1_URI, pattern: '*.js,*.ts' }],\n\t\t\t\t\texpandPatterns: true\n\t\t\t\t}\n\t\t\t);\n\t\t\t// todo: incorporate the base URI into the pattern\n\t\t\tassert.deepEqual(query.excludePattern, {\n\t\t\t\turi: ROOT_1_URI,\n\t\t\t\tpattern: {\n\t\t\t\t\t\"**/*.js/**\": true,\n\t\t\t\t\t\"**/*.js\": true,\n\t\t\t\t\t\"**/*.ts/**\": true,\n\t\t\t\t\t\"**/*.ts\": true,\n\t\t\t\t}\n\t\t\t});\n\t\t\tassert.strictEqual(query.folderQueries.length, 1);\n\t\t});\n\t});\n});\nfunction makeExcludePatternFromPatterns(...patterns: string[]): {\n\tpattern: IExpression;\n}[] | undefined {\n\tconst pattern = patternsToIExpression(...patterns);\n\treturn pattern ? [{ pattern }] : undefined;\n}\n\nfunction assertEqualTextQueries(actual: ITextQuery, expected: ITextQuery): void {\n\texpected = {\n\t\t...DEFAULT_TEXT_QUERY_PROPS,\n\t\t...expected\n\t};\n\n\treturn assertEqualQueries(actual, expected);\n}\n\nexport function assertEqualQueries(actual: ITextQuery | IFileQuery, expected: ITextQuery | IFileQuery): void {\n\texpected = {\n\t\t...DEFAULT_QUERY_PROPS,\n\t\t...expected\n\t};\n\n\tconst folderQueryToCompareObject = (fq: IFolderQuery) => {\n\t\tconst excludePattern = fq.excludePattern?.map(e => normalizeExpression(e.pattern));\n\t\treturn {\n\t\t\tpath: fq.folder.fsPath,\n\t\t\texcludePattern: excludePattern?.length ? excludePattern : undefined,\n\t\t\tincludePattern: normalizeExpression(fq.includePattern),\n\t\t\tfileEncoding: fq.fileEncoding\n\t\t};\n\t};\n\n\t// Avoid comparing URI objects, not a good idea\n\tif (expected.folderQueries) {\n\t\tassert.deepStrictEqual(actual.folderQueries.map(folderQueryToCompareObject), expected.folderQueries.map(folderQueryToCompareObject));\n\t\tactual.folderQueries = [];\n\t\texpected.folderQueries = [];\n\t}\n\n\tif (expected.extraFileResources) {\n\t\tassert.deepStrictEqual(actual.extraFileResources!.map(extraFile => extraFile.fsPath), expected.extraFileResources.map(extraFile => extraFile.fsPath));\n\t\tdelete expected.extraFileResources;\n\t\tdelete actual.extraFileResources;\n\t}\n\n\tdelete actual.usingSearchPaths;\n\tactual.includePattern = normalizeExpression(actual.includePattern);\n\tactual.excludePattern = normalizeExpression(actual.excludePattern);\n\tcleanUndefinedQueryValues(actual);\n\n\tassert.deepStrictEqual(actual, expected);\n}\n\nexport function assertEqualSearchPathResults(actual: ISearchPathsInfo, expected: ISearchPathsInfo, message?: string): void {\n\tcleanUndefinedQueryValues(actual);\n\tassert.deepStrictEqual({ ...actual.pattern }, { ...expected.pattern }, message);\n\n\tassert.strictEqual(actual.searchPaths && actual.searchPaths.length, expected.searchPaths && expected.searchPaths.length);\n\tif (actual.searchPaths) {\n\t\tactual.searchPaths.forEach((searchPath, i) => {\n\t\t\tconst expectedSearchPath = expected.searchPaths![i];\n\t\t\tassert.deepStrictEqual(searchPath.pattern && { ...searchPath.pattern }, expectedSearchPath.pattern);\n\t\t\tassert.strictEqual(searchPath.searchPath.toString(), expectedSearchPath.searchPath.toString());\n\t\t});\n\t}\n}\n\n/**\n * Recursively delete all undefined property values from the search query, to make it easier to\n * assert.deepStrictEqual with some expected object.\n */\nexport function cleanUndefinedQueryValues(q: any): void {\n\tfor (const key in q) {\n\t\tif (q[key] === undefined) {\n\t\t\tdelete q[key];\n\t\t} else if (typeof q[key] === 'object') {\n\t\t\tcleanUndefinedQueryValues(q[key]);\n\t\t}\n\t}\n\n\treturn q;\n}\n\nexport function globalGlob(pattern: string): string[] {\n\treturn [\n\t\t`**/${pattern}/**`,\n\t\t`**/${pattern}`\n\t];\n}\n\nexport function patternsToIExpression(...patterns: string[]): IExpression | undefined {\n\treturn patterns.length ?\n\t\tpatterns.reduce((glob, cur) => { glob[cur] = true; return glob; }, {} as IExpression) :\n\t\tundefined;\n}\n\nexport function getUri(...slashPathParts: string[]): uri {\n\treturn uri.file(fixPath(...slashPathParts));\n}\n\nexport function fixPath(...slashPathParts: string[]): string {\n\tif (isWindows && slashPathParts.length && !slashPathParts[0].match(/^c:/i)) {\n\t\tslashPathParts.unshift('c:');\n\t}\n\n\treturn join(...slashPathParts);\n}\n\nexport function normalizeExpression(expression: IExpression | undefined): IExpression | undefined {\n\tif (!expression) {\n\t\treturn expression;\n\t}\n\n\tconst normalized: IExpression = {};\n\tObject.keys(expression).forEach(key => {\n\t\tnormalized[key.replace(/\\\\/g, '/')] = expression[key];\n\t});\n\n\treturn normalized;\n}\n"],
  "mappings": "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",
  "names": []
}
