import o from"assert";import"../../../../../base/common/glob.js";import{join as F}from"../../../../../base/common/path.js";import{isWindows as q}from"../../../../../base/common/platform.js";import{URI as U,URI as I}from"../../../../../base/common/uri.js";import{IConfigurationService as k}from"../../../../../platform/configuration/common/configuration.js";import{TestConfigurationService as D}from"../../../../../platform/configuration/test/common/testConfigurationService.js";import{TestInstantiationService as A}from"../../../../../platform/instantiation/test/common/instantiationServiceMock.js";import{IWorkspaceContextService as B,toWorkspaceFolder as w}from"../../../../../platform/workspace/common/workspace.js";import{toWorkspaceFolders as S}from"../../../../../platform/workspaces/common/workspaces.js";import{QueryBuilder as N}from"../../common/queryBuilder.js";import{IPathService as L}from"../../../path/common/pathService.js";import{QueryType as u}from"../../common/search.js";import{TestPathService as W,TestEnvironmentService as $}from"../../../../test/browser/workbenchTestServices.js";import{TestContextService as M}from"../../../../test/common/workbenchTestServices.js";import{IEnvironmentService as G}from"../../../../../platform/environment/common/environment.js";import{Workspace as z}from"../../../../../platform/workspace/test/common/testWorkspace.js";import{extUriBiasedIgnorePathCase as T}from"../../../../../base/common/resources.js";import{ensureNoDisposablesAreLeakedInTestSuite as H}from"../../../../../base/test/common/utils.js";const K={},Q={useRipgrep:!0,useIgnoreFiles:!0,useGlobalIgnoreFiles:!0,useParentIgnoreFiles:!0},Y={},V={usePCRE2:!1};suite("QueryBuilder",()=>{H();const e={pattern:"a"},n=f("/foo/root1"),t=s(n),h=w(t),m=s("/bar/test.code-workspace");let p,a,g,C,x;setup(()=>{p=new A,g=new D,g.setUserConfiguration("search",Q),g.setUserConfiguration("editor",K),p.stub(k,g),C=new M,x=new z("workspace",[w(t)]),C.setWorkspace(x),p.stub(B,C),p.stub(G,$),p.stub(L,new W),a=p.createInstance(N)}),teardown(()=>{p.dispose()}),test("simple text pattern",()=>{P(a.text(e),{folderQueries:[],contentPattern:e,type:u.Text})}),test("normalize literal newlines",()=>{P(a.text({pattern:`foo
bar`,isRegExp:!0}),{folderQueries:[],contentPattern:{pattern:"foo\\nbar",isRegExp:!0,isMultiline:!0},type:u.Text}),P(a.text({pattern:`foo
bar`,isRegExp:!1}),{folderQueries:[],contentPattern:{pattern:`foo
bar`,isRegExp:!1,isMultiline:!0},type:u.Text})}),test("splits include pattern when expandPatterns enabled",()=>{y(a.file([h],{includePattern:"**/foo, **/bar",expandPatterns:!0}),{folderQueries:[{folder:t}],type:u.File,includePattern:{"**/foo":!0,"**/foo/**":!0,"**/bar":!0,"**/bar/**":!0}})}),test("does not split include pattern when expandPatterns disabled",()=>{y(a.file([h],{includePattern:"**/foo, **/bar"}),{folderQueries:[{folder:t}],type:u.File,includePattern:{"**/foo, **/bar":!0}})}),test("includePattern array",()=>{y(a.file([h],{includePattern:["**/foo","**/bar"]}),{folderQueries:[{folder:t}],type:u.File,includePattern:{"**/foo":!0,"**/bar":!0}})}),test("includePattern array with expandPatterns",()=>{y(a.file([h],{includePattern:["**/foo","**/bar"],expandPatterns:!0}),{folderQueries:[{folder:t}],type:u.File,includePattern:{"**/foo":!0,"**/foo/**":!0,"**/bar":!0,"**/bar/**":!0}})}),test("folderResources",()=>{P(a.text(e,[t]),{contentPattern:e,folderQueries:[{folder:t}],type:u.Text})}),test("simple exclude setting",()=>{g.setUserConfiguration("search",{...Q,exclude:{"bar/**":!0,"foo/**":{when:"$(basename).ts"}}}),P(a.text(e,[t],{expandPatterns:!0}),{contentPattern:e,folderQueries:[{folder:t,excludePattern:[{pattern:{"bar/**":!0,"foo/**":{when:"$(basename).ts"}}}]}],type:u.Text})}),test("simple include",()=>{P(a.text(e,[t],{includePattern:"bar",expandPatterns:!0}),{contentPattern:e,folderQueries:[{folder:t}],includePattern:{"**/bar":!0,"**/bar/**":!0},type:u.Text}),P(a.text(e,[t],{includePattern:"bar"}),{contentPattern:e,folderQueries:[{folder:t}],includePattern:{bar:!0},type:u.Text})}),test("simple include with ./ syntax",()=>{P(a.text(e,[t],{includePattern:"./bar",expandPatterns:!0}),{contentPattern:e,folderQueries:[{folder:t,includePattern:{bar:!0,"bar/**":!0}}],type:u.Text}),P(a.text(e,[t],{includePattern:".\\bar",expandPatterns:!0}),{contentPattern:e,folderQueries:[{folder:t,includePattern:{bar:!0,"bar/**":!0}}],type:u.Text})}),test("exclude setting and searchPath",()=>{g.setUserConfiguration("search",{...Q,exclude:{"foo/**/*.js":!0,"bar/**":{when:"$(basename).ts"}}}),P(a.text(e,[t],{includePattern:"./foo",expandPatterns:!0}),{contentPattern:e,folderQueries:[{folder:t,includePattern:{foo:!0,"foo/**":!0},excludePattern:[{pattern:{"foo/**/*.js":!0,"bar/**":{when:"$(basename).ts"}}}]}],type:u.Text})}),test("multiroot exclude settings",()=>{const r=f("/project/root2"),d=s(r),i=f("/project/root3"),c=s(i);x.folders=S([{path:t.fsPath},{path:d.fsPath},{path:c.fsPath}],m,T),x.configuration=I.file(f("/config")),g.setUserConfiguration("search",{...Q,exclude:{"foo/**/*.js":!0}},t),g.setUserConfiguration("search",{...Q,exclude:{bar:!0}},d),P(a.text(e,[t,d,c]),{contentPattern:e,folderQueries:[{folder:t,excludePattern:R("foo/**/*.js")},{folder:d,excludePattern:R("bar")},{folder:c}],type:u.Text}),P(a.text(e,[t,d,c],{includePattern:"./root2/src",expandPatterns:!0}),{contentPattern:e,folderQueries:[{folder:d,includePattern:{src:!0,"src/**":!0},excludePattern:[{pattern:{bar:!0}}]}],type:u.Text})}),test("simple exclude input pattern",()=>{P(a.text(e,[t],{excludePattern:[{pattern:"foo"}],expandPatterns:!0}),{contentPattern:e,folderQueries:[{folder:t}],type:u.Text,excludePattern:l(...O("foo"))})}),test("file pattern trimming",()=>{const r="content";y(a.file([],{filePattern:` ${r} `}),{folderQueries:[],filePattern:r,type:u.File})}),test("exclude ./ syntax",()=>{P(a.text(e,[t],{excludePattern:[{pattern:"./bar"}],expandPatterns:!0}),{contentPattern:e,folderQueries:[{folder:t,excludePattern:R("bar","bar/**")}],type:u.Text}),P(a.text(e,[t],{excludePattern:[{pattern:"./bar/**/*.ts"}],expandPatterns:!0}),{contentPattern:e,folderQueries:[{folder:t,excludePattern:R("bar/**/*.ts","bar/**/*.ts/**")}],type:u.Text}),P(a.text(e,[t],{excludePattern:[{pattern:".\\bar\\**\\*.ts"}],expandPatterns:!0}),{contentPattern:e,folderQueries:[{folder:t,excludePattern:R("bar/**/*.ts","bar/**/*.ts/**")}],type:u.Text})}),test("extraFileResources",()=>{P(a.text(e,[t],{extraFileResources:[s("/foo/bar.js")]}),{contentPattern:e,folderQueries:[{folder:t}],extraFileResources:[s("/foo/bar.js")],type:u.Text}),P(a.text(e,[t],{extraFileResources:[s("/foo/bar.js")],excludePattern:[{pattern:"*.js"}],expandPatterns:!0}),{contentPattern:e,folderQueries:[{folder:t}],excludePattern:l(...O("*.js")),type:u.Text}),P(a.text(e,[t],{extraFileResources:[s("/foo/bar.js")],includePattern:"*.txt",expandPatterns:!0}),{contentPattern:e,folderQueries:[{folder:t}],includePattern:l(...O("*.txt")),type:u.Text})}),suite("parseSearchPaths 1",()=>{test("simple includes",()=>{function i(c,b){const E=a.parseSearchPaths(c);o.deepStrictEqual({...E.pattern},l(...b),c),o.strictEqual(E.searchPaths,void 0)}[["a",["**/a/**","**/a"]],["a/b",["**/a/b","**/a/b/**"]],["a/b,  c",["**/a/b","**/c","**/a/b/**","**/c/**"]],["a,.txt",["**/a","**/a/**","**/*.txt","**/*.txt/**"]],["a,,,b",["**/a","**/a/**","**/b","**/b/**"]],["**/a,b/**",["**/a","**/a/**","**/b/**"]]].forEach(([c,b])=>i(c,b))});function r(i,c){let b;try{b=a.parseSearchPaths(i)}catch{b={searchPaths:[]}}_(b,c,i)}function d([i,c]){r(i,c)}test("absolute includes",()=>{[[f("/foo/bar"),{searchPaths:[{searchPath:s("/foo/bar")}]}],[f("/foo/bar")+",a",{searchPaths:[{searchPath:s("/foo/bar")}],pattern:l(...O("a"))}],[f("/foo/bar")+","+f("/1/2"),{searchPaths:[{searchPath:s("/foo/bar")},{searchPath:s("/1/2")}]}],[f("/foo/bar")+","+f("/foo/../foo/bar/fooar/.."),{searchPaths:[{searchPath:s("/foo/bar")}]}],[f("/foo/bar/**/*.ts"),{searchPaths:[{searchPath:s("/foo/bar"),pattern:l("**/*.ts","**/*.ts/**")}]}],[f("/foo/bar/*a/b/c"),{searchPaths:[{searchPath:s("/foo/bar"),pattern:l("*a/b/c","*a/b/c/**")}]}],[f("/*a/b/c"),{searchPaths:[{searchPath:s("/"),pattern:l("*a/b/c","*a/b/c/**")}]}],[f("/foo/{b,c}ar"),{searchPaths:[{searchPath:s("/foo"),pattern:l("{b,c}ar","{b,c}ar/**")}]}]].forEach(d)}),test("relative includes w/single root folder",()=>{[["./a",{searchPaths:[{searchPath:t,pattern:l("a","a/**")}]}],["./a/",{searchPaths:[{searchPath:t,pattern:l("a","a/**")}]}],["./a/*b/c",{searchPaths:[{searchPath:t,pattern:l("a/*b/c","a/*b/c/**")}]}],["./a/*b/c, "+f("/project/foo"),{searchPaths:[{searchPath:t,pattern:l("a/*b/c","a/*b/c/**")},{searchPath:s("/project/foo")}]}],["./a/b/,./c/d",{searchPaths:[{searchPath:t,pattern:l("a/b","a/b/**","c/d","c/d/**")}]}],["../",{searchPaths:[{searchPath:s("/foo")}]}],["..",{searchPaths:[{searchPath:s("/foo")}]}],["..\\bar",{searchPaths:[{searchPath:s("/foo/bar")}]}]].forEach(d)}),test("relative includes w/two root folders",()=>{const i="/project/root2";x.folders=S([{path:t.fsPath},{path:s(i).fsPath}],m,T),x.configuration=I.file(f("config")),[["./root1",{searchPaths:[{searchPath:s(n)}]}],["./root2",{searchPaths:[{searchPath:s(i)}]}],["./root1/a/**/b, ./root2/**/*.txt",{searchPaths:[{searchPath:t,pattern:l("a/**/b","a/**/b/**")},{searchPath:s(i),pattern:l("**/*.txt","**/*.txt/**")}]}]].forEach(d)}),test("include ./foldername",()=>{const i="/project/root2",c="foldername";x.folders=S([{path:t.fsPath,name:c},{path:s(i).fsPath}],m,T),x.configuration=I.file(f("config")),[["./foldername",{searchPaths:[{searchPath:t}]}],["./foldername/foo",{searchPaths:[{searchPath:t,pattern:l("foo","foo/**")}]}]].forEach(d)}),test("folder with slash in the name",()=>{const c=s("/project/root2"),b="folder/one",E="folder/two+";x.folders=S([{path:t.fsPath,name:b},{path:c.fsPath,name:E}],m,T),x.configuration=I.file(f("config")),[["./folder/one",{searchPaths:[{searchPath:t}]}],["./folder/two+/foo/",{searchPaths:[{searchPath:c,pattern:l("foo","foo/**")}]}],["./folder/onesomethingelse",{searchPaths:[]}],["./folder/onesomethingelse/foo",{searchPaths:[]}],["./folder",{searchPaths:[]}]].forEach(d)}),test("relative includes w/multiple ambiguous root folders",()=>{const i="/project/rootB",c="/otherproject/rootB";x.folders=S([{path:t.fsPath},{path:s(i).fsPath},{path:s(c).fsPath}],m,T),x.configuration=I.file(f("/config")),[["",{searchPaths:void 0}],["./",{searchPaths:void 0}],["./root1",{searchPaths:[{searchPath:s(n)}]}],["./root1,./",{searchPaths:[{searchPath:s(n)}]}],["./rootB",{searchPaths:[{searchPath:s(i)},{searchPath:s(c)}]}],["./rootB/a/**/b, ./rootB/b/**/*.txt",{searchPaths:[{searchPath:s(i),pattern:l("a/**/b","a/**/b/**","b/**/*.txt","b/**/*.txt/**")},{searchPath:s(c),pattern:l("a/**/b","a/**/b/**","b/**/*.txt","b/**/*.txt/**")}]}],["./root1/**/foo/, bar/",{pattern:l("**/bar","**/bar/**"),searchPaths:[{searchPath:t,pattern:l("**/foo","**/foo/**")}]}]].forEach(d)})}),suite("parseSearchPaths 2",()=>{function r(i,c){_(a.parseSearchPaths(i),c,i)}function d([i,c]){r(i,c)}(q?test.skip:test)("includes with tilde",()=>{const i=U.file("/");[["~/foo/bar",{searchPaths:[{searchPath:s(i.fsPath,"/foo/bar")}]}],["~/foo/bar, a",{searchPaths:[{searchPath:s(i.fsPath,"/foo/bar")}],pattern:l(...O("a"))}],[f("/foo/~/bar"),{searchPaths:[{searchPath:s("/foo/~/bar")}]}]].forEach(d)})}),suite("smartCase",()=>{test("no flags -> no change",()=>{const r=a.text({pattern:"a"},[]);o(!r.contentPattern.isCaseSensitive)}),test("maintains isCaseSensitive when smartCase not set",()=>{const r=a.text({pattern:"a",isCaseSensitive:!0},[]);o(r.contentPattern.isCaseSensitive)}),test("maintains isCaseSensitive when smartCase set",()=>{const r=a.text({pattern:"a",isCaseSensitive:!0},[],{isSmartCase:!0});o(r.contentPattern.isCaseSensitive)}),test("smartCase determines not case sensitive",()=>{const r=a.text({pattern:"abcd"},[],{isSmartCase:!0});o(!r.contentPattern.isCaseSensitive)}),test("smartCase determines case sensitive",()=>{const r=a.text({pattern:"abCd"},[],{isSmartCase:!0});o(r.contentPattern.isCaseSensitive)}),test("smartCase determines not case sensitive (regex)",()=>{const r=a.text({pattern:"ab\\Sd",isRegExp:!0},[],{isSmartCase:!0});o(!r.contentPattern.isCaseSensitive)}),test("smartCase determines case sensitive (regex)",()=>{const r=a.text({pattern:"ab[A-Z]d",isRegExp:!0},[],{isSmartCase:!0});o(r.contentPattern.isCaseSensitive)})}),suite("file",()=>{test("simple file query",()=>{const r="asdf",d=a.file([h],{cacheKey:r,sortByScore:!0});o.strictEqual(d.folderQueries.length,1),o.strictEqual(d.cacheKey,r),o(d.sortByScore)})}),suite("pattern processing",()=>{test("text query with comma-separated includes with no workspace",()=>{const r=a.text({pattern:""},[],{includePattern:"*.js,*.ts",expandPatterns:!0});o.deepEqual(r.includePattern,{"**/*.js/**":!0,"**/*.js":!0,"**/*.ts/**":!0,"**/*.ts":!0}),o.strictEqual(r.folderQueries.length,0)}),test("text query with comma-separated includes with workspace",()=>{const r=a.text({pattern:""},[t],{includePattern:"*.js,*.ts",expandPatterns:!0});o.deepEqual(r.includePattern,{"**/*.js/**":!0,"**/*.js":!0,"**/*.ts/**":!0,"**/*.ts":!0}),o.strictEqual(r.folderQueries.length,1)}),test("text query with comma-separated excludes globally",()=>{const r=a.text({pattern:""},[],{excludePattern:[{pattern:"*.js,*.ts"}],expandPatterns:!0});o.deepEqual(r.excludePattern,{"**/*.js/**":!0,"**/*.js":!0,"**/*.ts/**":!0,"**/*.ts":!0}),o.strictEqual(r.folderQueries.length,0)}),test("text query with comma-separated excludes globally in a workspace",()=>{const r=a.text({pattern:""},[h.uri],{excludePattern:[{pattern:"*.js,*.ts"}],expandPatterns:!0});o.deepEqual(r.excludePattern,{"**/*.js/**":!0,"**/*.js":!0,"**/*.ts/**":!0,"**/*.ts":!0}),o.strictEqual(r.folderQueries.length,1)}),test.skip("text query with multiple comma-separated excludes",()=>{const r=a.text({pattern:""},[h.uri],{excludePattern:[{pattern:"*.js,*.ts"},{pattern:"foo/*,bar/*"}],expandPatterns:!0});o.deepEqual(r.excludePattern,[{"**/*.js/**":!0,"**/*.js":!0,"**/*.ts/**":!0,"**/*.ts":!0},{"**/foo/*/**":!0,"**/foo/*":!0,"**/bar/*/**":!0,"**/bar/*":!0}]),o.strictEqual(r.folderQueries.length,1)}),test.skip("text query with base URI on exclud",()=>{const r=a.text({pattern:""},[h.uri],{excludePattern:[{uri:t,pattern:"*.js,*.ts"}],expandPatterns:!0});o.deepEqual(r.excludePattern,{uri:t,pattern:{"**/*.js/**":!0,"**/*.js":!0,"**/*.ts/**":!0,"**/*.ts":!0}}),o.strictEqual(r.folderQueries.length,1)})})});function R(...e){const n=l(...e);return n?[{pattern:n}]:void 0}function P(e,n){return n={...V,...n},y(e,n)}function y(e,n){n={...Y,...n};const t=h=>{const m=h.excludePattern?.map(p=>v(p.pattern));return{path:h.folder.fsPath,excludePattern:m?.length?m:void 0,includePattern:v(h.includePattern),fileEncoding:h.fileEncoding}};n.folderQueries&&(o.deepStrictEqual(e.folderQueries.map(t),n.folderQueries.map(t)),e.folderQueries=[],n.folderQueries=[]),n.extraFileResources&&(o.deepStrictEqual(e.extraFileResources.map(h=>h.fsPath),n.extraFileResources.map(h=>h.fsPath)),delete n.extraFileResources,delete e.extraFileResources),delete e.usingSearchPaths,e.includePattern=v(e.includePattern),e.excludePattern=v(e.excludePattern),j(e),o.deepStrictEqual(e,n)}function _(e,n,t){j(e),o.deepStrictEqual({...e.pattern},{...n.pattern},t),o.strictEqual(e.searchPaths&&e.searchPaths.length,n.searchPaths&&n.searchPaths.length),e.searchPaths&&e.searchPaths.forEach((h,m)=>{const p=n.searchPaths[m];o.deepStrictEqual(h.pattern&&{...h.pattern},p.pattern),o.strictEqual(h.searchPath.toString(),p.searchPath.toString())})}function j(e){for(const n in e)e[n]===void 0?delete e[n]:typeof e[n]=="object"&&j(e[n]);return e}function O(e){return[`**/${e}/**`,`**/${e}`]}function l(...e){return e.length?e.reduce((n,t)=>(n[t]=!0,n),{}):void 0}function s(...e){return I.file(f(...e))}function f(...e){return q&&e.length&&!e[0].match(/^c:/i)&&e.unshift("c:"),F(...e)}function v(e){if(!e)return e;const n={};return Object.keys(e).forEach(t=>{n[t.replace(/\\/g,"/")]=e[t]}),n}export{y as assertEqualQueries,_ as assertEqualSearchPathResults,j as cleanUndefinedQueryValues,f as fixPath,s as getUri,O as globalGlob,v as normalizeExpression,l as patternsToIExpression};
