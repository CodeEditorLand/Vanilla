{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/search/test/node/fileSearch.integrationTest.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport assert from 'assert';\nimport { FileAccess } from '../../../../../base/common/network.js';\nimport * as path from '../../../../../base/common/path.js';\nimport { URI } from '../../../../../base/common/uri.js';\nimport { flakySuite } from '../../../../../base/test/node/testUtils.js';\nimport { IFileQuery, IFolderQuery, ISerializedSearchProgressItem, isProgressMessage, QueryType } from '../../common/search.js';\nimport { SearchService } from '../../node/rawSearchService.js';\n\nconst TEST_FIXTURES = path.normalize(FileAccess.asFileUri('vs/workbench/services/search/test/node/fixtures').fsPath);\nconst TEST_FIXTURES2 = path.normalize(FileAccess.asFileUri('vs/workbench/services/search/test/node/fixtures2').fsPath);\nconst EXAMPLES_FIXTURES = path.join(TEST_FIXTURES, 'examples');\nconst MORE_FIXTURES = path.join(TEST_FIXTURES, 'more');\nconst TEST_ROOT_FOLDER: IFolderQuery = { folder: URI.file(TEST_FIXTURES) };\nconst ROOT_FOLDER_QUERY: IFolderQuery[] = [\n\tTEST_ROOT_FOLDER\n];\n\nconst MULTIROOT_QUERIES: IFolderQuery[] = [\n\t{ folder: URI.file(EXAMPLES_FIXTURES), folderName: 'examples_folder' },\n\t{ folder: URI.file(MORE_FIXTURES) }\n];\n\nconst numThreads = undefined;\n\nasync function doSearchTest(query: IFileQuery, expectedResultCount: number | Function): Promise<void> {\n\tconst svc = new SearchService();\n\n\tconst results: ISerializedSearchProgressItem[] = [];\n\tawait svc.doFileSearch(query, numThreads, e => {\n\t\tif (!isProgressMessage(e)) {\n\t\t\tif (Array.isArray(e)) {\n\t\t\t\tresults.push(...e);\n\t\t\t} else {\n\t\t\t\tresults.push(e);\n\t\t\t}\n\t\t}\n\t});\n\n\tassert.strictEqual(results.length, expectedResultCount, `rg ${results.length} !== ${expectedResultCount}`);\n}\n\nflakySuite('FileSearch-integration', function () {\n\n\ttest('File - simple', () => {\n\t\tconst config: IFileQuery = {\n\t\t\ttype: QueryType.File,\n\t\t\tfolderQueries: ROOT_FOLDER_QUERY\n\t\t};\n\n\t\treturn doSearchTest(config, 14);\n\t});\n\n\ttest('File - filepattern', () => {\n\t\tconst config: IFileQuery = {\n\t\t\ttype: QueryType.File,\n\t\t\tfolderQueries: ROOT_FOLDER_QUERY,\n\t\t\tfilePattern: 'anotherfile'\n\t\t};\n\n\t\treturn doSearchTest(config, 1);\n\t});\n\n\ttest('File - exclude', () => {\n\t\tconst config: IFileQuery = {\n\t\t\ttype: QueryType.File,\n\t\t\tfolderQueries: ROOT_FOLDER_QUERY,\n\t\t\tfilePattern: 'file',\n\t\t\texcludePattern: { '**/anotherfolder/**': true }\n\t\t};\n\n\t\treturn doSearchTest(config, 2);\n\t});\n\n\ttest('File - multiroot', () => {\n\t\tconst config: IFileQuery = {\n\t\t\ttype: QueryType.File,\n\t\t\tfolderQueries: MULTIROOT_QUERIES,\n\t\t\tfilePattern: 'file',\n\t\t\texcludePattern: { '**/anotherfolder/**': true }\n\t\t};\n\n\t\treturn doSearchTest(config, 2);\n\t});\n\n\ttest('File - multiroot with folder name', () => {\n\t\tconst config: IFileQuery = {\n\t\t\ttype: QueryType.File,\n\t\t\tfolderQueries: MULTIROOT_QUERIES,\n\t\t\tfilePattern: 'examples_folder anotherfile'\n\t\t};\n\n\t\treturn doSearchTest(config, 1);\n\t});\n\n\ttest('File - multiroot with folder name and sibling exclude', () => {\n\t\tconst config: IFileQuery = {\n\t\t\ttype: QueryType.File,\n\t\t\tfolderQueries: [\n\t\t\t\t{ folder: URI.file(TEST_FIXTURES), folderName: 'folder1' },\n\t\t\t\t{ folder: URI.file(TEST_FIXTURES2) }\n\t\t\t],\n\t\t\tfilePattern: 'folder1 site',\n\t\t\texcludePattern: { '*.css': { when: '$(basename).less' } }\n\t\t};\n\n\t\treturn doSearchTest(config, 1);\n\t});\n});\n"],
  "mappings": ";;AAKA,OAAO,YAAY;AACnB,SAAS,kBAAkB;AAC3B,YAAY,UAAU;AACtB,SAAS,WAAW;AACpB,SAAS,kBAAkB;AAC3B,SAAS,YAAY,cAAc,+BAA+B,mBAAmB,iBAAiB;AACtG,SAAS,qBAAqB;AAE9B,MAAM,gBAAgB,KAAK,UAAU,WAAW,UAAU,iDAAiD,EAAE,MAAM;AACnH,MAAM,iBAAiB,KAAK,UAAU,WAAW,UAAU,kDAAkD,EAAE,MAAM;AACrH,MAAM,oBAAoB,KAAK,KAAK,eAAe,UAAU;AAC7D,MAAM,gBAAgB,KAAK,KAAK,eAAe,MAAM;AACrD,MAAM,mBAAiC,EAAE,QAAQ,IAAI,KAAK,aAAa,EAAE;AACzE,MAAM,oBAAoC;AAAA,EACzC;AACD;AAEA,MAAM,oBAAoC;AAAA,EACzC,EAAE,QAAQ,IAAI,KAAK,iBAAiB,GAAG,YAAY,kBAAkB;AAAA,EACrE,EAAE,QAAQ,IAAI,KAAK,aAAa,EAAE;AACnC;AAEA,MAAM,aAAa;AAEnB,eAAe,aAAa,OAAmB,qBAAuD;AACrG,QAAM,MAAM,IAAI,cAAc;AAE9B,QAAM,UAA2C,CAAC;AAClD,QAAM,IAAI,aAAa,OAAO,YAAY,OAAK;AAC9C,QAAI,CAAC,kBAAkB,CAAC,GAAG;AAC1B,UAAI,MAAM,QAAQ,CAAC,GAAG;AACrB,gBAAQ,KAAK,GAAG,CAAC;AAAA,MAClB,OAAO;AACN,gBAAQ,KAAK,CAAC;AAAA,MACf;AAAA,IACD;AAAA,EACD,CAAC;AAED,SAAO,YAAY,QAAQ,QAAQ,qBAAqB,MAAM,QAAQ,MAAM,QAAQ,mBAAmB,EAAE;AAC1G;AAfe;AAiBf,WAAW,0BAA0B,WAAY;AAEhD,OAAK,iBAAiB,MAAM;AAC3B,UAAM,SAAqB;AAAA,MAC1B,MAAM,UAAU;AAAA,MAChB,eAAe;AAAA,IAChB;AAEA,WAAO,aAAa,QAAQ,EAAE;AAAA,EAC/B,CAAC;AAED,OAAK,sBAAsB,MAAM;AAChC,UAAM,SAAqB;AAAA,MAC1B,MAAM,UAAU;AAAA,MAChB,eAAe;AAAA,MACf,aAAa;AAAA,IACd;AAEA,WAAO,aAAa,QAAQ,CAAC;AAAA,EAC9B,CAAC;AAED,OAAK,kBAAkB,MAAM;AAC5B,UAAM,SAAqB;AAAA,MAC1B,MAAM,UAAU;AAAA,MAChB,eAAe;AAAA,MACf,aAAa;AAAA,MACb,gBAAgB,EAAE,uBAAuB,KAAK;AAAA,IAC/C;AAEA,WAAO,aAAa,QAAQ,CAAC;AAAA,EAC9B,CAAC;AAED,OAAK,oBAAoB,MAAM;AAC9B,UAAM,SAAqB;AAAA,MAC1B,MAAM,UAAU;AAAA,MAChB,eAAe;AAAA,MACf,aAAa;AAAA,MACb,gBAAgB,EAAE,uBAAuB,KAAK;AAAA,IAC/C;AAEA,WAAO,aAAa,QAAQ,CAAC;AAAA,EAC9B,CAAC;AAED,OAAK,qCAAqC,MAAM;AAC/C,UAAM,SAAqB;AAAA,MAC1B,MAAM,UAAU;AAAA,MAChB,eAAe;AAAA,MACf,aAAa;AAAA,IACd;AAEA,WAAO,aAAa,QAAQ,CAAC;AAAA,EAC9B,CAAC;AAED,OAAK,yDAAyD,MAAM;AACnE,UAAM,SAAqB;AAAA,MAC1B,MAAM,UAAU;AAAA,MAChB,eAAe;AAAA,QACd,EAAE,QAAQ,IAAI,KAAK,aAAa,GAAG,YAAY,UAAU;AAAA,QACzD,EAAE,QAAQ,IAAI,KAAK,cAAc,EAAE;AAAA,MACpC;AAAA,MACA,aAAa;AAAA,MACb,gBAAgB,EAAE,SAAS,EAAE,MAAM,mBAAmB,EAAE;AAAA,IACzD;AAEA,WAAO,aAAa,QAAQ,CAAC;AAAA,EAC9B,CAAC;AACF,CAAC;",
  "names": []
}
