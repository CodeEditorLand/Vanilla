import l from"assert";import{ensureNoDisposablesAreLeakedInTestSuite as n}from"../../../../../base/test/common/utils.js";import{ReplacePattern as a}from"../../common/replace.js";suite("Replace Pattern test",()=>{n(),test("parse replace string",()=>{const e=(t,s,i)=>{let r=new a(t,{pattern:"somepattern",isRegExp:!0});l.strictEqual(s,r.pattern),l.strictEqual(i,r.hasParameters),r=new a("hello"+t+"hi",{pattern:"sonepattern",isRegExp:!0}),l.strictEqual("hello"+s+"hi",r.pattern),l.strictEqual(i,r.hasParameters)};e("hello","hello",!1),e("\\thello","	hello",!1),e("\\nhello",`
hello`,!1),e("\\\\thello","\\thello",!1),e("\\\\\\thello","\\	hello",!1),e("\\\\\\\\thello","\\\\thello",!1),e("hello\\","hello\\",!1),e("hello\\x","hello\\x",!1),e("hello\\0","hello\\0",!1),e("hello$1","hello$1",!0),e("hello$2","hello$2",!0),e("hello$12","hello$12",!0),e("hello$99","hello$99",!0),e("hello$99a","hello$99a",!0),e("hello$100","hello$100",!1),e("hello$100a","hello$100a",!1),e("hello$10a0","hello$10a0",!0),e("hello$$","hello$$",!1),e("hello$$0","hello$$0",!1),e("hello$0","hello$&",!0),e("hello$02","hello$&2",!0),e("hello$`","hello$`",!0),e("hello$'","hello$'",!0)}),test("create pattern by passing regExp",()=>{let e=/abc/,t=new a("hello",!1,e).regExp;l.deepStrictEqual(t,e),e=/abc/,t=new a("hello",!1,/abc/g).regExp,l.deepStrictEqual(t,e);let s=new a("hello$0",!1,/abc/g);l.strictEqual(s.hasParameters,!1),s=new a("hello$0",!0,/abc/g),l.strictEqual(s.hasParameters,!0)}),test("get replace string if given text is a complete match",()=>{let e=new a("hello",{pattern:"bla",isRegExp:!0}),t=e.getReplaceString("bla");l.strictEqual(t,"hello"),e=new a("hello",{pattern:"bla",isRegExp:!1}),t=e.getReplaceString("bla"),l.strictEqual(t,"hello"),e=new a("hello",{pattern:"(bla)",isRegExp:!0}),t=e.getReplaceString("bla"),l.strictEqual(t,"hello"),e=new a("hello$0",{pattern:"(bla)",isRegExp:!0}),t=e.getReplaceString("bla"),l.strictEqual(t,"hellobla"),e=new a("import * as $1 from '$2';",{pattern:`let\\s+(\\w+)\\s*=\\s*require\\s*\\(\\s*['"]([\\w.\\-/]+)\\s*['"]\\s*\\)\\s*`,isRegExp:!0}),t=e.getReplaceString("let fs = require('fs')"),l.strictEqual(t,"import * as fs from 'fs';"),t=e.getReplaceString("let something = require('fs')"),l.strictEqual(t,"import * as something from 'fs';"),t=e.getReplaceString("let require('fs')"),l.strictEqual(t,null),e=new a("import * as $1 from '$1';",{pattern:`let\\s+(\\w+)\\s*=\\s*require\\s*\\(\\s*['"]([\\w.\\-/]+)\\s*['"]\\s*\\)\\s*`,isRegExp:!0}),t=e.getReplaceString("let something = require('fs')"),l.strictEqual(t,"import * as something from 'something';"),e=new a("import * as $2 from '$1';",{pattern:`let\\s+(\\w+)\\s*=\\s*require\\s*\\(\\s*['"]([\\w.\\-/]+)\\s*['"]\\s*\\)\\s*`,isRegExp:!0}),t=e.getReplaceString("let something = require('fs')"),l.strictEqual(t,"import * as fs from 'something';"),e=new a("import * as $0 from '$0';",{pattern:`let\\s+(\\w+)\\s*=\\s*require\\s*\\(\\s*['"]([\\w.\\-/]+)\\s*['"]\\s*\\)\\s*`,isRegExp:!0}),t=e.getReplaceString("let something = require('fs');"),l.strictEqual(t,"import * as let something = require('fs') from 'let something = require('fs')';"),e=new a("import * as $1 from '$2';",{pattern:`let\\s+(\\w+)\\s*=\\s*require\\s*\\(\\s*['"]([\\w.\\-/]+)\\s*['"]\\s*\\)\\s*`,isRegExp:!1}),t=e.getReplaceString("let fs = require('fs');"),l.strictEqual(t,null),e=new a("cat$1",{pattern:"for(.*)",isRegExp:!0}),t=e.getReplaceString("for ()"),l.strictEqual(t,"cat ()")}),test("case operations",()=>{const t=new a("a\\u$1l\\u\\l\\U$2M$3n",{pattern:"a(l)l(good)m(e)n",isRegExp:!0}).getReplaceString("allgoodmen");l.strictEqual(t,"aLlGoODMen")}),test("case operations - no false positive",()=>{let e=new a("\\left $1",{pattern:"(pattern)",isRegExp:!0}),t=e.getReplaceString("pattern");l.strictEqual(t,"\\left pattern"),e=new a("\\hi \\left $1",{pattern:"(pattern)",isRegExp:!0}),t=e.getReplaceString("pattern"),l.strictEqual(t,"\\hi \\left pattern"),e=new a("\\left \\L$1",{pattern:"PATT(ERN)",isRegExp:!0}),t=e.getReplaceString("PATTERN"),l.strictEqual(t,"\\left ern")}),test("case operations and newline",()=>{const t=new a(`$1
\\U$2`,{pattern:"(multi)(line)",isRegExp:!0}).getReplaceString("multiline");l.strictEqual(t,`multi
LINE`)}),test("get replace string for no matches",()=>{let e=new a("hello",{pattern:"bla",isRegExp:!0}),t=e.getReplaceString("foo");l.strictEqual(t,null),e=new a("hello",{pattern:"bla",isRegExp:!1}),t=e.getReplaceString("foo"),l.strictEqual(t,null)}),test("get replace string if match is sub-string of the text",()=>{let e=new a("hello",{pattern:"bla",isRegExp:!0}),t=e.getReplaceString("this is a bla text");l.strictEqual(t,"hello"),e=new a("hello",{pattern:"bla",isRegExp:!1}),t=e.getReplaceString("this is a bla text"),l.strictEqual(t,"hello"),e=new a("that",{pattern:"this(?=.*bla)",isRegExp:!0}),t=e.getReplaceString("this is a bla text"),l.strictEqual(t,"that"),e=new a("$1at",{pattern:"(th)is(?=.*bla)",isRegExp:!0}),t=e.getReplaceString("this is a bla text"),l.strictEqual(t,"that"),e=new a("$1e",{pattern:"(th)is(?=.*bla)",isRegExp:!0}),t=e.getReplaceString("this is a bla text"),l.strictEqual(t,"the"),e=new a("$1ere",{pattern:"(th)is(?=.*bla)",isRegExp:!0}),t=e.getReplaceString("this is a bla text"),l.strictEqual(t,"there"),e=new a("$1",{pattern:"(th)is(?=.*bla)",isRegExp:!0}),t=e.getReplaceString("this is a bla text"),l.strictEqual(t,"th"),e=new a("ma$1",{pattern:"(th)is(?=.*bla)",isRegExp:!0}),t=e.getReplaceString("this is a bla text"),l.strictEqual(t,"math"),e=new a("ma$1s",{pattern:"(th)is(?=.*bla)",isRegExp:!0}),t=e.getReplaceString("this is a bla text"),l.strictEqual(t,"maths"),e=new a("ma$1s",{pattern:"(th)is(?=.*bla)",isRegExp:!0}),t=e.getReplaceString("this is a bla text"),l.strictEqual(t,"maths"),e=new a("$0",{pattern:"(th)is(?=.*bla)",isRegExp:!0}),t=e.getReplaceString("this is a bla text"),l.strictEqual(t,"this"),e=new a("$0$1",{pattern:"(th)is(?=.*bla)",isRegExp:!0}),t=e.getReplaceString("this is a bla text"),l.strictEqual(t,"thisth"),e=new a("foo",{pattern:"bla(?=\\stext$)",isRegExp:!0}),t=e.getReplaceString("this is a bla text"),l.strictEqual(t,"foo"),e=new a("f$1",{pattern:"b(la)(?=\\stext$)",isRegExp:!0}),t=e.getReplaceString("this is a bla text"),l.strictEqual(t,"fla"),e=new a("f$0",{pattern:"b(la)(?=\\stext$)",isRegExp:!0}),t=e.getReplaceString("this is a bla text"),l.strictEqual(t,"fbla"),e=new a("$0ah",{pattern:"b(la)(?=\\stext$)",isRegExp:!0}),t=e.getReplaceString("this is a bla text"),l.strictEqual(t,"blaah"),e=new a("newrege$1",!0,/Testrege(\w*)/),t=e.getReplaceString("Testregex",!0),l.strictEqual(t,"Newregex"),e=new a("newrege$1",!0,/TESTREGE(\w*)/),t=e.getReplaceString("TESTREGEX",!0),l.strictEqual(t,"NEWREGEX"),e=new a("new_rege$1",!0,/Test_Rege(\w*)/),t=e.getReplaceString("Test_Regex",!0),l.strictEqual(t,"New_Regex"),e=new a("new-rege$1",!0,/Test-Rege(\w*)/),t=e.getReplaceString("Test-Regex",!0),l.strictEqual(t,"New-Regex")})});
