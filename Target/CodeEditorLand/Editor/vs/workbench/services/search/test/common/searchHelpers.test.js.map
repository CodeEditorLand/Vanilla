{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/search/test/common/searchHelpers.test.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport assert from 'assert';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from '../../../../../base/test/common/utils.js';\nimport { Range } from '../../../../../editor/common/core/range.js';\nimport { FindMatch, ITextModel } from '../../../../../editor/common/model.js';\nimport { ISearchRange, ITextQuery, ITextSearchContext, ITextSearchResult, QueryType } from '../../common/search.js';\nimport { getTextSearchMatchWithModelContext, editorMatchesToTextSearchResults } from '../../common/searchHelpers.js';\n\nsuite('SearchHelpers', () => {\n\tsuite('editorMatchesToTextSearchResults', () => {\n\t\tensureNoDisposablesAreLeakedInTestSuite();\n\t\tconst mockTextModel = {\n\t\t\tgetLineContent(lineNumber: number): string {\n\t\t\t\treturn '' + lineNumber;\n\t\t\t}\n\t\t} as ITextModel;\n\n\t\tfunction assertRangesEqual(actual: ISearchRange | ISearchRange[], expected: ISearchRange[]) {\n\t\t\tif (!Array.isArray(actual)) {\n\t\t\t\t// All of these tests are for arrays...\n\t\t\t\tthrow new Error('Expected array of ranges');\n\t\t\t}\n\n\t\t\tassert.strictEqual(actual.length, expected.length);\n\n\t\t\t// These are sometimes Range, sometimes SearchRange\n\t\t\tactual.forEach((r, i) => {\n\t\t\t\tconst expectedRange = expected[i];\n\t\t\t\tassert.deepStrictEqual(\n\t\t\t\t\t{ startLineNumber: r.startLineNumber, startColumn: r.startColumn, endLineNumber: r.endLineNumber, endColumn: r.endColumn },\n\t\t\t\t\t{ startLineNumber: expectedRange.startLineNumber, startColumn: expectedRange.startColumn, endLineNumber: expectedRange.endLineNumber, endColumn: expectedRange.endColumn });\n\t\t\t});\n\t\t}\n\n\t\ttest('simple', () => {\n\t\t\tconst results = editorMatchesToTextSearchResults([new FindMatch(new Range(6, 1, 6, 2), null)], mockTextModel);\n\t\t\tassert.strictEqual(results.length, 1);\n\t\t\tassert.strictEqual(results[0].previewText, '6\\n');\n\t\t\tassertRangesEqual(results[0].rangeLocations.map(e => e.preview), [new Range(0, 0, 0, 1)]);\n\t\t\tassertRangesEqual(results[0].rangeLocations.map(e => e.source), [new Range(5, 0, 5, 1)]);\n\t\t});\n\n\t\ttest('multiple', () => {\n\t\t\tconst results = editorMatchesToTextSearchResults(\n\t\t\t\t[\n\t\t\t\t\tnew FindMatch(new Range(6, 1, 6, 2), null),\n\t\t\t\t\tnew FindMatch(new Range(6, 4, 8, 2), null),\n\t\t\t\t\tnew FindMatch(new Range(9, 1, 10, 3), null),\n\t\t\t\t],\n\t\t\t\tmockTextModel);\n\t\t\tassert.strictEqual(results.length, 2);\n\t\t\tassertRangesEqual(results[0].rangeLocations.map(e => e.preview), [\n\t\t\t\tnew Range(0, 0, 0, 1),\n\t\t\t\tnew Range(0, 3, 2, 1),\n\t\t\t]);\n\t\t\tassertRangesEqual(results[0].rangeLocations.map(e => e.source), [\n\t\t\t\tnew Range(5, 0, 5, 1),\n\t\t\t\tnew Range(5, 3, 7, 1),\n\t\t\t]);\n\t\t\tassert.strictEqual(results[0].previewText, '6\\n7\\n8\\n');\n\n\t\t\tassertRangesEqual(results[1].rangeLocations.map(e => e.preview), [\n\t\t\t\tnew Range(0, 0, 1, 2),\n\t\t\t]);\n\t\t\tassertRangesEqual(results[1].rangeLocations.map(e => e.source), [\n\t\t\t\tnew Range(8, 0, 9, 2),\n\t\t\t]);\n\t\t\tassert.strictEqual(results[1].previewText, '9\\n10\\n');\n\t\t});\n\t});\n\n\tsuite('addContextToEditorMatches', () => {\n\t\tensureNoDisposablesAreLeakedInTestSuite();\n\t\tconst MOCK_LINE_COUNT = 100;\n\n\t\tconst mockTextModel = {\n\t\t\tgetLineContent(lineNumber: number): string {\n\t\t\t\tif (lineNumber < 1 || lineNumber > MOCK_LINE_COUNT) {\n\t\t\t\t\tthrow new Error(`invalid line count: ${lineNumber}`);\n\t\t\t\t}\n\n\t\t\t\treturn '' + lineNumber;\n\t\t\t},\n\n\t\t\tgetLineCount(): number {\n\t\t\t\treturn MOCK_LINE_COUNT;\n\t\t\t}\n\t\t} as ITextModel;\n\n\t\tfunction getQuery(surroundingContext?: number): ITextQuery {\n\t\t\treturn {\n\t\t\t\tfolderQueries: [],\n\t\t\t\ttype: QueryType.Text,\n\t\t\t\tcontentPattern: { pattern: 'test' },\n\t\t\t\tsurroundingContext,\n\t\t\t};\n\t\t}\n\n\t\ttest('no context', () => {\n\t\t\tconst matches = [{\n\t\t\t\tpreviewText: 'foo',\n\t\t\t\trangeLocations: [\n\t\t\t\t\t{\n\t\t\t\t\t\tpreview: new Range(0, 0, 0, 10),\n\t\t\t\t\t\tsource: new Range(0, 0, 0, 10)\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t}];\n\n\t\t\tassert.deepStrictEqual(getTextSearchMatchWithModelContext(matches, mockTextModel, getQuery()), matches);\n\t\t});\n\n\t\ttest('simple', () => {\n\t\t\tconst matches = [{\n\t\t\t\tpreviewText: 'foo',\n\t\t\t\trangeLocations: [\n\t\t\t\t\t{\n\t\t\t\t\t\tpreview: new Range(0, 0, 0, 10),\n\t\t\t\t\t\tsource: new Range(1, 0, 1, 10)\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t}\n\t\t\t];\n\n\t\t\tassert.deepStrictEqual(getTextSearchMatchWithModelContext(matches, mockTextModel, getQuery(1)), [\n\t\t\t\t{\n\t\t\t\t\ttext: '1',\n\t\t\t\t\tlineNumber: 1\n\t\t\t\t},\n\t\t\t\t...matches,\n\t\t\t\t{\n\t\t\t\t\ttext: '3',\n\t\t\t\t\tlineNumber: 3\n\t\t\t\t},\n\t\t\t] satisfies ITextSearchResult[]);\n\t\t});\n\n\t\ttest('multiple matches next to each other', () => {\n\t\t\tconst matches = [\n\t\t\t\t{\n\t\t\t\t\tpreviewText: 'foo',\n\t\t\t\t\trangeLocations: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tpreview: new Range(0, 0, 0, 10),\n\t\t\t\t\t\t\tsource: new Range(1, 0, 1, 10)\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tpreviewText: 'bar',\n\t\t\t\t\trangeLocations: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tpreview: new Range(0, 0, 0, 10),\n\t\t\t\t\t\t\tsource: new Range(2, 0, 2, 10)\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t}];\n\n\t\t\tassert.deepStrictEqual(getTextSearchMatchWithModelContext(matches, mockTextModel, getQuery(1)), [\n\t\t\t\t<ITextSearchContext>{\n\t\t\t\t\ttext: '1',\n\t\t\t\t\tlineNumber: 1\n\t\t\t\t},\n\t\t\t\t...matches,\n\t\t\t\t<ITextSearchContext>{\n\t\t\t\t\ttext: '4',\n\t\t\t\t\tlineNumber: 4\n\t\t\t\t},\n\t\t\t]);\n\t\t});\n\n\t\ttest('boundaries', () => {\n\t\t\tconst matches = [\n\t\t\t\t{\n\t\t\t\t\tpreviewText: 'foo',\n\t\t\t\t\trangeLocations: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tpreview: new Range(0, 0, 0, 10),\n\t\t\t\t\t\t\tsource: new Range(0, 0, 0, 10)\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tpreviewText: 'bar',\n\t\t\t\t\trangeLocations: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tpreview: new Range(0, 0, 0, 10),\n\t\t\t\t\t\t\tsource: new Range(MOCK_LINE_COUNT - 1, 0, MOCK_LINE_COUNT - 1, 10)\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t}];\n\n\t\t\tassert.deepStrictEqual(getTextSearchMatchWithModelContext(matches, mockTextModel, getQuery(1)), [\n\t\t\t\tmatches[0],\n\t\t\t\t<ITextSearchContext>{\n\t\t\t\t\ttext: '2',\n\t\t\t\t\tlineNumber: 2\n\t\t\t\t},\n\t\t\t\t<ITextSearchContext>{\n\t\t\t\t\ttext: '' + (MOCK_LINE_COUNT - 1),\n\t\t\t\t\tlineNumber: MOCK_LINE_COUNT - 1\n\t\t\t\t},\n\t\t\t\tmatches[1]\n\t\t\t]);\n\t\t});\n\t});\n});\n"],
  "mappings": "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",
  "names": []
}
