import*as B from"child_process";import{EventEmitter as $}from"events";import{StringDecoder as k}from"string_decoder";import{rgPath as W}from"@vscode/ripgrep";import{coalesce as _,mapArrayOrNot as F}from"../../../../../vs/base/common/arrays.js";import"../../../../../vs/base/common/cancellation.js";import{groupBy as Q}from"../../../../../vs/base/common/collections.js";import{splitGlobAware as L}from"../../../../../vs/base/common/glob.js";import{createRegExp as U,escapeRegExpCharacters as z}from"../../../../../vs/base/common/strings.js";import{URI as O}from"../../../../../vs/base/common/uri.js";import"../../../../../vs/platform/progress/common/progress.js";import{DEFAULT_MAX_SEARCH_RESULTS as G,SearchError as f,SearchErrorCode as S,serializeSearchError as I,TextSearchMatch as H}from"../../../../../vs/workbench/services/search/common/search.js";import{newToOldPreviewOptions as j}from"../../../../../vs/workbench/services/search/common/searchExtConversionTypes.js";import{Range as J,TextSearchContextNew as V,TextSearchMatchNew as X}from"../../../../../vs/workbench/services/search/common/searchExtTypes.js";import{RegExpParser as K,RegExpVisitor as Y}from"vscode-regexpp";import{anchorGlob as P,rangeToSearchRange as Z,searchRangeToRange as N}from"./ripgrepSearchUtils.js";const M=W.replace(/\bnode_modules\.asar\b/,"node_modules.asar.unpacked");class Ae{constructor(n,e){this.outputChannel=n;this._numThreads=e}provideTextSearchResults(n,e,r,i){return Promise.all(e.folderOptions.map(s=>{const a={folderOptions:s,numThreads:this._numThreads,maxResults:e.maxResults,previewOptions:e.previewOptions,maxFileSize:e.maxFileSize,surroundingContext:e.surroundingContext};return this.provideTextSearchResultsWithRgOptions(n,a,r,i)})).then(s=>({limitHit:s.some(o=>!!o&&o.limitHit)}))}provideTextSearchResultsWithRgOptions(n,e,r,i){return this.outputChannel.appendLine(`provideTextSearchResults ${n.pattern}, ${JSON.stringify({...e,folder:e.folderOptions.folder.toString()})}`),new Promise((s,a)=>{i.onCancellationRequested(()=>E());const o={...e,numThreads:this._numThreads},l=re(n,o),h=e.folderOptions.folder.fsPath,v=l.map(c=>c.match(/^-/)?c:`'${c}'`).join(" ");this.outputChannel.appendLine(`${M} ${v}
 - cwd: ${h}`);let p=B.spawn(M,l,{cwd:h});p.on("error",c=>{console.error(c),this.outputChannel.appendLine("Error: "+(c&&c.message)),a(I(new f(c&&c.message,S.rgProcessError)))});let m=!1;const u=new te(e.maxResults??G,e.folderOptions.folder,j(e.previewOptions));u.on("result",c=>{m=!0,g="",r.report(c)});let b=!1;const E=()=>{b=!0,p?.kill(),u?.cancel()};let w=!1;u.on("hitLimit",()=>{w=!0,E()});let g="";p.stdout.on("data",c=>{u.handleData(c),m||(g+=c)});let x=!1;p.stdout.once("data",()=>x=!0);let d="";p.stderr.on("data",c=>{const R=c.toString();this.outputChannel.appendLine(R),d.length+R.length<1e6&&(d+=R)}),p.on("close",()=>{if(this.outputChannel.appendLine(x?"Got data from stdout":"No data from stdout"),this.outputChannel.appendLine(m?"Got result from parser":"No result from parser"),g&&this.outputChannel.appendLine(`Got data without result: ${g}`),this.outputChannel.appendLine(""),b)s({limitHit:w});else{u.flush(),p=null;let c;d&&!x&&(c=q(d))?a(I(new f(c.message,c.code))):s({limitHit:w})}})})}}function q(t){const n=t.split(`
`),e=n[0].trim();if(n.some(i=>i.startsWith("regex parse error")))return new f(ee(n),S.regexParseError);const r=e.match(/grep config error: unknown encoding: (.*)/);if(r)return new f(`Unknown encoding: ${r[1]}`,S.unknownEncoding);if(e.startsWith("error parsing glob"))return new f(e.charAt(0).toUpperCase()+e.substr(1),S.globParseError);if(e.startsWith("the literal"))return new f(e.charAt(0).toUpperCase()+e.substr(1),S.invalidLiteral);if(e.startsWith("PCRE2: error compiling pattern"))return new f(e,S.regexParseError)}function ee(t){const n=["Regex parse error"],e=t.filter(r=>r.startsWith("PCRE2:"));if(e.length>=1){const r=e[0].replace("PCRE2:","");if(r.indexOf(":")!==-1&&r.split(":").length>=2){const i=r.split(":")[1];n.push(":"+i)}}return n.join("")}class te extends ${constructor(e,r,i){super();this.maxResults=e;this.root=r;this.previewOptions=i;this.stringDecoder=new k}remainder="";isDone=!1;hitLimit=!1;stringDecoder;numResults=0;cancel(){this.isDone=!0}flush(){this.handleDecodedData(this.stringDecoder.end())}on(e,r){return super.on(e,r),this}handleData(e){if(this.isDone)return;const r=typeof e=="string"?e:this.stringDecoder.write(e);this.handleDecodedData(r)}handleDecodedData(e){let r=e.indexOf(`
`);const i=this.remainder+e;if(r>=0)r+=this.remainder.length;else{this.remainder=i;return}let s=0;for(;r>=0;)this.handleLine(i.substring(s,r).trim()),s=r+1,r=i.indexOf(`
`,s);this.remainder=i.substring(s)}handleLine(e){if(this.isDone||!e)return;let r;try{r=JSON.parse(e)}catch{throw new Error(`malformed line from rg: ${e}`)}if(r.type==="match"){const i=T(r.data.path),s=O.joinPath(this.root,i),a=this.createTextSearchMatch(r.data,s);this.onResult(a),this.hitLimit&&(this.cancel(),this.emit("hitLimit"))}else if(r.type==="context"){const i=T(r.data.path),s=O.joinPath(this.root,i);this.createTextSearchContexts(r.data,s).forEach(o=>this.onResult(o))}}createTextSearchMatch(e,r){const i=e.line_number-1,s=T(e.lines),a=Buffer.from(s);let o=0,l=0,h=i;e.submatches.length===0&&e.submatches.push(s.length?{start:0,end:1,match:{text:s[0]}}:{start:0,end:0,match:{text:""}});const v=_(e.submatches.map((u,b)=>{if(this.hitLimit)return null;this.numResults++,this.numResults>=this.maxResults&&(this.hitLimit=!0);const E=T(u.match),w=a.slice(o,u.start).toString(),g=D(w),x=g.numLines>0?g.lastLineLength:g.lastLineLength+l,d=D(E),c=g.numLines+h,R=d.numLines+c,C=d.numLines>0?d.lastLineLength:d.lastLineLength+x;return o=u.end,l=C,h=R,new J(c,x,R,C)})),p=F(v,Z),m=new H(s,p,this.previewOptions);return new X(r,m.rangeLocations.map(u=>({sourceRange:N(u.source),previewRange:N(u.preview)})),m.previewText)}createTextSearchContexts(e,r){const i=T(e.lines),s=e.line_number;return i.replace(/\r?\n$/,"").split(`
`).map((a,o)=>new V(r,a,s+o))}onResult(e){this.emit("result",e)}}function T(t){return t.bytes?Buffer.from(t.bytes,"base64").toString():t.text}function D(t){const n=/\n/g;let e=0,r=-1,i;for(;i=n.exec(t);)e++,r=i.index;const s=r>=0?t.length-r-1:t.length;return{numLines:e,lastLineLength:s}}function re(t,n){const e=["--hidden","--no-require-git"];e.push(t.isCaseSensitive?"--case-sensitive":"--ignore-case");const{doubleStarIncludes:r,otherIncludes:i}=Q(n.folderOptions.includes,a=>a.startsWith("**")?"doubleStarIncludes":"otherIncludes");if(i&&i.length){const a=new Set;i.forEach(o=>{a.add(o)}),e.push("-g","!*"),a.forEach(o=>{ne(o).map(P).forEach(l=>{e.push("-g",l)})})}r&&r.length&&r.forEach(a=>{e.push("-g",a)}),n.folderOptions.excludes.map(a=>typeof a=="string"?a:a.pattern).map(P).forEach(a=>e.push("-g",`!${a}`)),n.maxFileSize&&e.push("--max-filesize",n.maxFileSize+""),n.folderOptions.useIgnoreFiles.local?n.folderOptions.useIgnoreFiles.parent||e.push("--no-ignore-parent"):e.push("--no-ignore"),n.folderOptions.followSymlinks&&e.push("--follow"),n.folderOptions.encoding&&n.folderOptions.encoding!=="utf8"&&e.push("--encoding",n.folderOptions.encoding),n.numThreads&&e.push("--threads",`${n.numThreads}`),t.pattern==="--"&&(t.isRegExp=!0,t.pattern="\\-\\-"),t.isMultiline&&!t.isRegExp&&(t.pattern=z(t.pattern),t.isRegExp=!0),n.usePCRE2&&e.push("--pcre2"),e.push("--crlf"),t.isRegExp&&(t.pattern=se(t.pattern),e.push("--engine","auto"));let s;if(t.isWordMatch){const o=U(t.pattern,!!t.isRegExp,{wholeWord:t.isWordMatch}).source.replace(/\\\//g,"/");e.push("--regexp",o)}else if(t.isRegExp){let a=ie(t.pattern);a=ae(a),e.push("--regexp",a)}else s=t.pattern,e.push("--fixed-strings");return e.push("--no-config"),n.folderOptions.useIgnoreFiles.global||e.push("--no-ignore-global"),e.push("--json"),t.isMultiline&&e.push("--multiline"),n.surroundingContext&&(e.push("--before-context",n.surroundingContext+""),e.push("--after-context",n.surroundingContext+"")),e.push("--"),s&&e.push(s),e.push("."),e}function ne(t){return A(t).flatMap(e=>{const r=L(e,"/");return r.map((i,s)=>r.slice(0,s+1).join("/"))})}function se(t){const n=/((?:[^\\]|^)(?:\\\\)*)\\u([a-z0-9]{4})/gi;for(;t.match(n);)t=t.replace(n,"$1\\x{$2}");const e=/((?:[^\\]|^)(?:\\\\)*)\\u\{([a-z0-9]{4})\}/gi;for(;t.match(e);)t=t.replace(e,"$1\\x{$2}");return t}const y=t=>t.type==="Assertion"&&t.kind==="lookbehind";function ie(t){let n;try{n=new K().parsePattern(t)}catch{return t}let e="",r=0;const i=(o,l,h)=>{e+=t.slice(r,o)+h,r=l},s=[];return new Y({onCharacterEnter(o){if(o.raw!=="\\n")return;const l=s[0];if(!l)i(o.start,o.end,"\\r?\\n");else if(!s.some(y))if(l.type==="CharacterClass")if(l.negate){const h=t.slice(l.start+2,o.start)+t.slice(o.end,l.end-1);l.parent?.type==="Quantifier"?i(l.start,l.end,h?`[^${h}]`:"."):i(l.start,l.end,"(?!\\r?\\n"+(h?`|[${h}]`:"")+")")}else{const h=t.slice(l.start+1,o.start)+t.slice(o.end,l.end-1);i(l.start,l.end,h===""?"\\r?\\n":`(?:[${h}]|\\r?\\n)`)}else l.type==="Quantifier"&&i(o.start,o.end,"(?:\\r?\\n)")},onQuantifierEnter(o){s.unshift(o)},onQuantifierLeave(){s.shift()},onCharacterClassRangeEnter(o){s.unshift(o)},onCharacterClassRangeLeave(){s.shift()},onCharacterClassEnter(o){s.unshift(o)},onCharacterClassLeave(){s.shift()},onAssertionEnter(o){y(o)&&s.push(o)},onAssertionLeave(o){s[0]===o&&s.shift()}}).visit(n),e+=t.slice(r),e}function ae(t){return t.replace(/\n/g,"\\r?\\n")}function oe(t){let n=!1,e=!1,r="",i="";for(let s=0;s<t.length;s++){const a=t[s];switch(a){case"\\":e?(n?i+="\\"+a:r+="\\"+a,e=!1):e=!0;break;case"{":if(e)n?i+=a:r+=a,e=!1;else{if(n)return{strInBraces:r+"{"+i+"{"+t.substring(s+1)};n=!0}break;case"}":if(e)n?i+=a:r+=a,e=!1;else{if(n)return{fixedStart:r,strInBraces:i,fixedEnd:t.substring(s+1)};r+=a}break;default:n?i+=(e?"\\":"")+a:r+=(e?"\\":"")+a,e=!1;break}}return{strInBraces:r+(n?"{"+i:"")}}function A(t){const{fixedStart:n,strInBraces:e,fixedEnd:r}=oe(t);if(n===void 0||r===void 0)return[e];let i=L(e,",");i.length||(i=[""]);const s=A(r);return i.flatMap(a=>{const o=n+a;return s.map(l=>o+l)})}export{te as RipgrepParser,Ae as RipgrepTextSearchEngine,ae as fixNewline,ie as fixRegexNewline,re as getRgArgs,A as performBraceExpansionForRipgrep,se as unicodeEscapesToPCRE2};
