import*as w from"../../../../base/common/arrays.js";import{createCancelablePromise as C}from"../../../../base/common/async.js";import{canceled as T}from"../../../../base/common/errors.js";import{Emitter as F}from"../../../../base/common/event.js";import{compareItemsByFuzzyScore as M,prepareQuery as R}from"../../../../base/common/fuzzyScorer.js";import{revive as z}from"../../../../base/common/marshalling.js";import{basename as x,dirname as b,join as E,sep as f}from"../../../../base/common/path.js";import{StopWatch as p}from"../../../../base/common/stopwatch.js";import{URI as Q}from"../../../../base/common/uri.js";import{ByteSize as A}from"../../../../platform/files/common/files.js";import{DEFAULT_MAX_SEARCH_RESULTS as k,isFilePatternMatch as L}from"../common/search.js";import{Engine as P}from"./fileSearch.js";import{TextSearchEngineAdapter as H}from"./textSearchAdapter.js";class y{constructor(t="searchProcess",e){this.processType=t;this.getNumThreads=e}static BATCH_SIZE=512;caches=Object.create(null);fileSearch(t){let e;const a=g(t),r=new F({onDidAddFirstListener:()=>{e=C(async i=>{const u=await this.getNumThreads?.();return this.doFileSearchWithEngine(P,a,s=>r.fire(s),i,y.BATCH_SIZE,u)}),e.then(i=>r.fire(i),i=>r.fire({type:"error",error:{message:i.message,stack:i.stack}}))},onDidRemoveLastListener:()=>{e.cancel()}});return r.event}textSearch(t){let e;const a=g(t),r=new F({onDidAddFirstListener:()=>{e=C(i=>this.ripgrepTextSearch(a,u=>r.fire(u),i)),e.then(i=>r.fire(i),i=>r.fire({type:"error",error:{message:i.message,stack:i.stack}}))},onDidRemoveLastListener:()=>{e.cancel()}});return r.event}async ripgrepTextSearch(t,e,a){t.maxFileSize=this.getPlatformFileLimits().maxFileSize;const r=await this.getNumThreads?.();return new H(t,r).search(a,e,e)}getPlatformFileLimits(){return{maxFileSize:16*A.GB}}doFileSearch(t,e,a,r){return this.doFileSearchWithEngine(P,t,a,r,y.BATCH_SIZE,e)}doFileSearchWithEngine(t,e,a,r,i=y.BATCH_SIZE,u){let s=0;const c=n=>{Array.isArray(n)?(s+=n.length,a(n.map(h=>this.rawMatchToSearchItem(h)))):n.relativePath?(s++,a(this.rawMatchToSearchItem(n))):a(n)};if(e.sortByScore){let n=this.trySortedSearchFromCache(e,c,r);if(!n){const h=e.maxResults?Object.assign({},e,{maxResults:null}):e,l=new t(h,u);n=this.doSortedSearch(l,e,a,c,r)}return new Promise((h,l)=>{n.then(([S,I])=>{const d=I.map(v=>this.rawMatchToSearchItem(v));this.sendProgress(d,a,i),h(S)},l)})}const o=new t(e,u);return this.doSearch(o,c,i,r).then(n=>({limitHit:n.limitHit,type:"success",stats:{detailStats:n.stats,type:this.processType,fromCache:!1,resultCount:s,sortingTime:void 0},messages:[]}))}rawMatchToSearchItem(t){return{path:t.base?E(t.base,t.relativePath):t.relativePath}}doSortedSearch(t,e,a,r,i){const u=new F;let s=C(o=>{let n=[];const h=l=>{Array.isArray(l)?n=l:(r(l),u.fire(l))};return this.doSearch(t,h,-1,o).then(l=>[l,n])}),c;if(e.cacheKey){c=this.getOrCreateCache(e.cacheKey);const o={promise:s,event:u.event,resolved:!1};c.resultsToSearchCache[e.filePattern||""]=o,s.then(()=>{o.resolved=!0},n=>{delete c.resultsToSearchCache[e.filePattern||""]}),s=this.preventCancellation(s)}return s.then(([o,n])=>{const h=c?c.scorerCache:Object.create(null),l=(typeof e.maxResults!="number"||e.maxResults>0)&&p.create(!1);return this.sortResults(e,n,h,i).then(S=>{const I=l?l.elapsed():-1;return[{type:"success",stats:{detailStats:o.stats,sortingTime:I,fromCache:!1,type:this.processType,resultCount:S.length},messages:o.messages,limitHit:o.limitHit||typeof e.maxResults=="number"&&n.length>e.maxResults},S]})})}getOrCreateCache(t){const e=this.caches[t];return e||(this.caches[t]=new O)}trySortedSearchFromCache(t,e,a){const r=t.cacheKey&&this.caches[t.cacheKey];if(!r)return;const i=this.getResultsFromCache(r,t.filePattern||"",e,a);if(i)return i.then(([u,s,c])=>{const o=p.create(!1);return this.sortResults(t,s,r.scorerCache,a).then(n=>{const h=o.elapsed(),l={fromCache:!0,detailStats:c,type:this.processType,resultCount:s.length,sortingTime:h};return[{type:"success",limitHit:u.limitHit||typeof t.maxResults=="number"&&s.length>t.maxResults,stats:l,messages:[]},n]})})}sortResults(t,e,a,r){const i=R(t.filePattern||""),u=(c,o)=>M(c,o,i,!0,W,a),s=typeof t.maxResults=="number"?t.maxResults:k;return w.topAsync(e,u,s,1e4,r)}sendProgress(t,e,a){if(a&&a>0)for(let r=0;r<t.length;r+=a)e(t.slice(r,r+a));else e(t)}getResultsFromCache(t,e,a,r){const i=p.create(!1),u=e.indexOf(f)>=0;let s;for(const h in t.resultsToSearchCache)if(e.startsWith(h)){if(u&&h.indexOf(f)<0&&h!=="")continue;const l=t.resultsToSearchCache[h];s={promise:this.preventCancellation(l.promise),event:l.event,resolved:l.resolved};break}if(!s)return null;const c=i.elapsed(),o=p.create(!1),n=s.event(a);return r&&r.onCancellationRequested(()=>{n.dispose()}),s.promise.then(([h,l])=>{if(r&&r.isCancellationRequested)throw T();const S=[],I=R(e).normalizedLowercase;for(const d of l)L(d,I)&&S.push(d);return[h,S,{cacheWasResolved:s.resolved,cacheLookupTime:c,cacheFilterTime:o.elapsed(),cacheEntryCount:l.length}]})}doSearch(t,e,a,r){return new Promise((i,u)=>{let s=[];r?.onCancellationRequested(()=>t.cancel()),t.search(c=>{c&&(a?(s.push(c),a>0&&s.length>=a&&(e(s),s=[])):e(c))},c=>{e(c)},(c,o)=>{s.length&&e(s),c?(e({message:"Search finished. Error: "+c.message}),u(c)):(e({message:"Search finished. Stats: "+JSON.stringify(o.stats)}),i(o))})})}clearCache(t){return delete this.caches[t],Promise.resolve(void 0)}preventCancellation(t){return new class{get[Symbol.toStringTag](){return this.toString()}cancel(){}then(e,a){return t.then(e,a)}catch(e){return this.then(void 0,e)}finally(e){return t.finally(e)}}}}class O{resultsToSearchCache=Object.create(null);scorerCache=Object.create(null)}const W=new class{getItemLabel(m){return x(m.relativePath)}getItemDescription(m){return b(m.relativePath)}getItemPath(m){return m.relativePath}};function g(m){return{...m,folderQueries:m.folderQueries&&m.folderQueries.map(U),extraFileResources:m.extraFileResources&&m.extraFileResources.map(t=>Q.revive(t))}}function U(m){return z(m)}export{y as SearchService};
