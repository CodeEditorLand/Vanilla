{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/search/node/ripgrepFileSearch.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as cp from \"child_process\";\nimport { rgPath } from \"@vscode/ripgrep\";\nimport * as extpath from \"../../../../base/common/extpath.js\";\nimport type * as glob from \"../../../../base/common/glob.js\";\nimport { normalizeNFD } from \"../../../../base/common/normalization.js\";\nimport * as path from \"../../../../base/common/path.js\";\nimport { isMacintosh as isMac } from \"../../../../base/common/platform.js\";\nimport * as strings from \"../../../../base/common/strings.js\";\nimport type { IFileQuery, IFolderQuery } from \"../common/search.js\";\nimport { anchorGlob } from \"./ripgrepSearchUtils.js\";\n\n// If @vscode/ripgrep is in an .asar file, then the binary is unpacked.\nconst rgDiskPath = rgPath.replace(\n\t/\\bnode_modules\\.asar\\b/,\n\t\"node_modules.asar.unpacked\",\n);\n\nexport function spawnRipgrepCmd(\n\tconfig: IFileQuery,\n\tfolderQuery: IFolderQuery,\n\tincludePattern?: glob.IExpression,\n\texcludePattern?: glob.IExpression,\n\tnumThreads?: number,\n) {\n\tconst rgArgs = getRgArgs(\n\t\tconfig,\n\t\tfolderQuery,\n\t\tincludePattern,\n\t\texcludePattern,\n\t\tnumThreads,\n\t);\n\tconst cwd = folderQuery.folder.fsPath;\n\treturn {\n\t\tcmd: cp.spawn(rgDiskPath, rgArgs.args, { cwd }),\n\t\trgDiskPath,\n\t\tsiblingClauses: rgArgs.siblingClauses,\n\t\trgArgs,\n\t\tcwd,\n\t};\n}\n\nfunction getRgArgs(\n\tconfig: IFileQuery,\n\tfolderQuery: IFolderQuery,\n\tincludePattern?: glob.IExpression,\n\texcludePattern?: glob.IExpression,\n\tnumThreads?: number,\n) {\n\tconst args = [\n\t\t\"--files\",\n\t\t\"--hidden\",\n\t\t\"--case-sensitive\",\n\t\t\"--no-require-git\",\n\t];\n\n\t// includePattern can't have siblingClauses\n\tfoldersToIncludeGlobs([folderQuery], includePattern, false).forEach(\n\t\t(globArg) => {\n\t\t\tconst inclusion = anchorGlob(globArg);\n\t\t\targs.push(\"-g\", inclusion);\n\t\t\tif (isMac) {\n\t\t\t\tconst normalized = normalizeNFD(inclusion);\n\t\t\t\tif (normalized !== inclusion) {\n\t\t\t\t\targs.push(\"-g\", normalized);\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t);\n\n\tconst rgGlobs = foldersToRgExcludeGlobs(\n\t\t[folderQuery],\n\t\texcludePattern,\n\t\tundefined,\n\t\tfalse,\n\t);\n\trgGlobs.globArgs.forEach((globArg) => {\n\t\tconst exclusion = `!${anchorGlob(globArg)}`;\n\t\targs.push(\"-g\", exclusion);\n\t\tif (isMac) {\n\t\t\tconst normalized = normalizeNFD(exclusion);\n\t\t\tif (normalized !== exclusion) {\n\t\t\t\targs.push(\"-g\", normalized);\n\t\t\t}\n\t\t}\n\t});\n\tif (folderQuery.disregardIgnoreFiles !== false) {\n\t\t// Don't use .gitignore or .ignore\n\t\targs.push(\"--no-ignore\");\n\t} else if (folderQuery.disregardParentIgnoreFiles !== false) {\n\t\targs.push(\"--no-ignore-parent\");\n\t}\n\n\t// Follow symlinks\n\tif (!folderQuery.ignoreSymlinks) {\n\t\targs.push(\"--follow\");\n\t}\n\n\tif (config.exists) {\n\t\targs.push(\"--quiet\");\n\t}\n\n\tif (numThreads) {\n\t\targs.push(\"--threads\", `${numThreads}`);\n\t}\n\n\targs.push(\"--no-config\");\n\tif (folderQuery.disregardGlobalIgnoreFiles) {\n\t\targs.push(\"--no-ignore-global\");\n\t}\n\n\treturn {\n\t\targs,\n\t\tsiblingClauses: rgGlobs.siblingClauses,\n\t};\n}\n\ninterface IRgGlobResult {\n\tglobArgs: string[];\n\tsiblingClauses: glob.IExpression;\n}\n\nfunction foldersToRgExcludeGlobs(\n\tfolderQueries: IFolderQuery[],\n\tglobalExclude?: glob.IExpression,\n\texcludesToSkip?: Set<string>,\n\tabsoluteGlobs = true,\n): IRgGlobResult {\n\tconst globArgs: string[] = [];\n\tlet siblingClauses: glob.IExpression = {};\n\tfolderQueries.forEach((folderQuery) => {\n\t\tconst totalExcludePattern = Object.assign(\n\t\t\t{},\n\t\t\tfolderQuery.excludePattern || {},\n\t\t\tglobalExclude || {},\n\t\t);\n\t\tconst result = globExprsToRgGlobs(\n\t\t\ttotalExcludePattern,\n\t\t\tabsoluteGlobs ? folderQuery.folder.fsPath : undefined,\n\t\t\texcludesToSkip,\n\t\t);\n\t\tglobArgs.push(...result.globArgs);\n\t\tif (result.siblingClauses) {\n\t\t\tsiblingClauses = Object.assign(\n\t\t\t\tsiblingClauses,\n\t\t\t\tresult.siblingClauses,\n\t\t\t);\n\t\t}\n\t});\n\n\treturn { globArgs, siblingClauses };\n}\n\nfunction foldersToIncludeGlobs(\n\tfolderQueries: IFolderQuery[],\n\tglobalInclude?: glob.IExpression,\n\tabsoluteGlobs = true,\n): string[] {\n\tconst globArgs: string[] = [];\n\tfolderQueries.forEach((folderQuery) => {\n\t\tconst totalIncludePattern = Object.assign(\n\t\t\t{},\n\t\t\tglobalInclude || {},\n\t\t\tfolderQuery.includePattern || {},\n\t\t);\n\t\tconst result = globExprsToRgGlobs(\n\t\t\ttotalIncludePattern,\n\t\t\tabsoluteGlobs ? folderQuery.folder.fsPath : undefined,\n\t\t);\n\t\tglobArgs.push(...result.globArgs);\n\t});\n\n\treturn globArgs;\n}\n\nfunction globExprsToRgGlobs(\n\tpatterns: glob.IExpression,\n\tfolder?: string,\n\texcludesToSkip?: Set<string>,\n): IRgGlobResult {\n\tconst globArgs: string[] = [];\n\tconst siblingClauses: glob.IExpression = {};\n\tObject.keys(patterns).forEach((key) => {\n\t\tif (excludesToSkip && excludesToSkip.has(key)) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (!key) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst value = patterns[key];\n\t\tkey = trimTrailingSlash(folder ? getAbsoluteGlob(folder, key) : key);\n\n\t\t// glob.ts requires forward slashes, but a UNC path still must start with \\\\\n\t\t// #38165 and #38151\n\t\tif (key.startsWith(\"\\\\\\\\\")) {\n\t\t\tkey = \"\\\\\\\\\" + key.substr(2).replace(/\\\\/g, \"/\");\n\t\t} else {\n\t\t\tkey = key.replace(/\\\\/g, \"/\");\n\t\t}\n\n\t\tif (typeof value === \"boolean\" && value) {\n\t\t\tif (key.startsWith(\"\\\\\\\\\")) {\n\t\t\t\t// Absolute globs UNC paths don't work properly, see #58758\n\t\t\t\tkey += \"**\";\n\t\t\t}\n\n\t\t\tglobArgs.push(fixDriveC(key));\n\t\t} else if (value && value.when) {\n\t\t\tsiblingClauses[key] = value;\n\t\t}\n\t});\n\n\treturn { globArgs, siblingClauses };\n}\n\n/**\n * Resolves a glob like \"node_modules/**\" in \"/foo/bar\" to \"/foo/bar/node_modules/**\".\n * Special cases C:/foo paths to write the glob like /foo instead - see https://github.com/BurntSushi/ripgrep/issues/530.\n *\n * Exported for testing\n */\nexport function getAbsoluteGlob(folder: string, key: string): string {\n\treturn path.isAbsolute(key) ? key : path.join(folder, key);\n}\n\nfunction trimTrailingSlash(str: string): string {\n\tstr = strings.rtrim(str, \"\\\\\");\n\treturn strings.rtrim(str, \"/\");\n}\n\nexport function fixDriveC(path: string): string {\n\tconst root = extpath.getRoot(path);\n\treturn root.toLowerCase() === \"c:/\" ? path.replace(/^c:[/\\\\]/i, \"/\") : path;\n}\n"],
  "mappings": "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",
  "names": ["path"]
}
