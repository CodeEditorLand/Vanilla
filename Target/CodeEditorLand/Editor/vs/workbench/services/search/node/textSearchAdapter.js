import*as l from"../../../../base/node/pfs.js";import{resultIsMatch as u}from"../common/search.js";import{RipgrepTextSearchEngine as h}from"./ripgrepTextSearchEngine.js";import{NativeTextSearchManager as p}from"./textSearchManager.js";class S{constructor(r,t){this.query=r;this.numThreads=t}search(r,t,i){if((!this.query.folderQueries||!this.query.folderQueries.length)&&(!this.query.extraFileResources||!this.query.extraFileResources.length))return Promise.resolve({type:"success",limitHit:!1,stats:{type:"searchProcess"},messages:[]});const n={appendLine(a){i({message:a})}},c=new p(this.query,new h(n,this.numThreads),l);return new Promise((a,o)=>c.search(s=>{t(s.map(m))},r).then(s=>a({limitHit:s.limitHit??!1,type:"success",stats:s.stats,messages:[]}),o))}}function m(e){return{path:e.resource&&e.resource.fsPath,results:e.results,numMatches:(e.results||[]).reduce((r,t)=>u(t)?r+t.rangeLocations.length:r+1,0)}}export{S as TextSearchEngineAdapter};
