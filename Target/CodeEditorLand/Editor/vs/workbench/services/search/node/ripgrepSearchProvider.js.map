{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/search/node/ripgrepSearchProvider.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport {\n\ttype CancellationToken,\n\tCancellationTokenSource,\n} from \"../../../../base/common/cancellation.js\";\nimport { Schemas } from \"../../../../base/common/network.js\";\nimport { Progress } from \"../../../../platform/progress/common/progress.js\";\nimport type {\n\tTextSearchCompleteNew,\n\tTextSearchProviderNew,\n\tTextSearchProviderOptions,\n\tTextSearchQueryNew,\n\tTextSearchResultNew,\n} from \"../common/searchExtTypes.js\";\nimport type { RipgrepTextSearchOptions } from \"../common/searchExtTypesInternal.js\";\nimport type { OutputChannel } from \"./ripgrepSearchUtils.js\";\nimport { RipgrepTextSearchEngine } from \"./ripgrepTextSearchEngine.js\";\n\nexport class RipgrepSearchProvider implements TextSearchProviderNew {\n\tprivate inProgress: Set<CancellationTokenSource> = new Set();\n\n\tconstructor(\n\t\tprivate outputChannel: OutputChannel,\n\t\tprivate getNumThreads: () => Promise<number | undefined>,\n\t) {\n\t\tprocess.once(\"exit\", () => this.dispose());\n\t}\n\n\tasync provideTextSearchResults(\n\t\tquery: TextSearchQueryNew,\n\t\toptions: TextSearchProviderOptions,\n\t\tprogress: Progress<TextSearchResultNew>,\n\t\ttoken: CancellationToken,\n\t): Promise<TextSearchCompleteNew> {\n\t\tconst numThreads = await this.getNumThreads();\n\t\tconst engine = new RipgrepTextSearchEngine(\n\t\t\tthis.outputChannel,\n\t\t\tnumThreads,\n\t\t);\n\n\t\treturn Promise.all(\n\t\t\toptions.folderOptions.map((folderOption) => {\n\t\t\t\tconst extendedOptions: RipgrepTextSearchOptions = {\n\t\t\t\t\tfolderOptions: folderOption,\n\t\t\t\t\tnumThreads,\n\t\t\t\t\tmaxResults: options.maxResults,\n\t\t\t\t\tpreviewOptions: options.previewOptions,\n\t\t\t\t\tmaxFileSize: options.maxFileSize,\n\t\t\t\t\tsurroundingContext: options.surroundingContext,\n\t\t\t\t};\n\t\t\t\tif (folderOption.folder.scheme === Schemas.vscodeUserData) {\n\t\t\t\t\t// Ripgrep search engine can only provide file-scheme results, but we want to use it to search some schemes that are backed by the filesystem, but with some other provider as the frontend,\n\t\t\t\t\t// case in point vscode-userdata. In these cases we translate the query to a file, and translate the results back to the frontend scheme.\n\t\t\t\t\tconst translatedOptions = {\n\t\t\t\t\t\t...extendedOptions,\n\t\t\t\t\t\tfolder: folderOption.folder.with({\n\t\t\t\t\t\t\tscheme: Schemas.file,\n\t\t\t\t\t\t}),\n\t\t\t\t\t};\n\t\t\t\t\tconst progressTranslator =\n\t\t\t\t\t\tnew Progress<TextSearchResultNew>((data) =>\n\t\t\t\t\t\t\tprogress.report({\n\t\t\t\t\t\t\t\t...data,\n\t\t\t\t\t\t\t\turi: data.uri.with({\n\t\t\t\t\t\t\t\t\tscheme: folderOption.folder.scheme,\n\t\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t);\n\t\t\t\t\treturn this.withToken(token, (token) =>\n\t\t\t\t\t\tengine.provideTextSearchResultsWithRgOptions(\n\t\t\t\t\t\t\tquery,\n\t\t\t\t\t\t\ttranslatedOptions,\n\t\t\t\t\t\t\tprogressTranslator,\n\t\t\t\t\t\t\ttoken,\n\t\t\t\t\t\t),\n\t\t\t\t\t);\n\t\t\t\t} else {\n\t\t\t\t\treturn this.withToken(token, (token) =>\n\t\t\t\t\t\tengine.provideTextSearchResultsWithRgOptions(\n\t\t\t\t\t\t\tquery,\n\t\t\t\t\t\t\textendedOptions,\n\t\t\t\t\t\t\tprogress,\n\t\t\t\t\t\t\ttoken,\n\t\t\t\t\t\t),\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}),\n\t\t).then((e) => {\n\t\t\tconst complete: TextSearchCompleteNew = {\n\t\t\t\t// todo: get this to actually check\n\t\t\t\tlimitHit: e.some((complete) => !!complete && complete.limitHit),\n\t\t\t};\n\t\t\treturn complete;\n\t\t});\n\t}\n\n\tprivate async withToken<T>(\n\t\ttoken: CancellationToken,\n\t\tfn: (token: CancellationToken) => Promise<T>,\n\t): Promise<T> {\n\t\tconst merged = mergedTokenSource(token);\n\t\tthis.inProgress.add(merged);\n\t\tconst result = await fn(merged.token);\n\t\tthis.inProgress.delete(merged);\n\n\t\treturn result;\n\t}\n\n\tprivate dispose() {\n\t\tthis.inProgress.forEach((engine) => engine.cancel());\n\t}\n}\n\nfunction mergedTokenSource(token: CancellationToken): CancellationTokenSource {\n\tconst tokenSource = new CancellationTokenSource();\n\ttoken.onCancellationRequested(() => tokenSource.cancel());\n\n\treturn tokenSource;\n}\n"],
  "mappings": ";;AAKA;AAAA,EAEC;AAAA,OACM;AACP,SAAS,eAAe;AACxB,SAAS,gBAAgB;AAUzB,SAAS,+BAA+B;AAEjC,MAAM,sBAAuD;AAAA,EAGnE,YACS,eACA,eACP;AAFO;AACA;AAER,YAAQ,KAAK,QAAQ,MAAM,KAAK,QAAQ,CAAC;AAAA,EAC1C;AAAA,EA9BD,OAsBoE;AAAA;AAAA;AAAA,EAC3D,aAA2C,oBAAI,IAAI;AAAA,EAS3D,MAAM,yBACL,OACA,SACA,UACA,OACiC;AACjC,UAAM,aAAa,MAAM,KAAK,cAAc;AAC5C,UAAM,SAAS,IAAI;AAAA,MAClB,KAAK;AAAA,MACL;AAAA,IACD;AAEA,WAAO,QAAQ;AAAA,MACd,QAAQ,cAAc,IAAI,CAAC,iBAAiB;AAC3C,cAAM,kBAA4C;AAAA,UACjD,eAAe;AAAA,UACf;AAAA,UACA,YAAY,QAAQ;AAAA,UACpB,gBAAgB,QAAQ;AAAA,UACxB,aAAa,QAAQ;AAAA,UACrB,oBAAoB,QAAQ;AAAA,QAC7B;AACA,YAAI,aAAa,OAAO,WAAW,QAAQ,gBAAgB;AAG1D,gBAAM,oBAAoB;AAAA,YACzB,GAAG;AAAA,YACH,QAAQ,aAAa,OAAO,KAAK;AAAA,cAChC,QAAQ,QAAQ;AAAA,YACjB,CAAC;AAAA,UACF;AACA,gBAAM,qBACL,IAAI;AAAA,YAA8B,CAAC,SAClC,SAAS,OAAO;AAAA,cACf,GAAG;AAAA,cACH,KAAK,KAAK,IAAI,KAAK;AAAA,gBAClB,QAAQ,aAAa,OAAO;AAAA,cAC7B,CAAC;AAAA,YACF,CAAC;AAAA,UACF;AACD,iBAAO,KAAK;AAAA,YAAU;AAAA,YAAO,CAACA,WAC7B,OAAO;AAAA,cACN;AAAA,cACA;AAAA,cACA;AAAA,cACAA;AAAA,YACD;AAAA,UACD;AAAA,QACD,OAAO;AACN,iBAAO,KAAK;AAAA,YAAU;AAAA,YAAO,CAACA,WAC7B,OAAO;AAAA,cACN;AAAA,cACA;AAAA,cACA;AAAA,cACAA;AAAA,YACD;AAAA,UACD;AAAA,QACD;AAAA,MACD,CAAC;AAAA,IACF,EAAE,KAAK,CAAC,MAAM;AACb,YAAM,WAAkC;AAAA;AAAA,QAEvC,UAAU,EAAE,KAAK,CAACC,cAAa,CAAC,CAACA,aAAYA,UAAS,QAAQ;AAAA,MAC/D;AACA,aAAO;AAAA,IACR,CAAC;AAAA,EACF;AAAA,EAEA,MAAc,UACb,OACA,IACa;AACb,UAAM,SAAS,kBAAkB,KAAK;AACtC,SAAK,WAAW,IAAI,MAAM;AAC1B,UAAM,SAAS,MAAM,GAAG,OAAO,KAAK;AACpC,SAAK,WAAW,OAAO,MAAM;AAE7B,WAAO;AAAA,EACR;AAAA,EAEQ,UAAU;AACjB,SAAK,WAAW,QAAQ,CAAC,WAAW,OAAO,OAAO,CAAC;AAAA,EACpD;AACD;AAEA,SAAS,kBAAkB,OAAmD;AAC7E,QAAM,cAAc,IAAI,wBAAwB;AAChD,QAAM,wBAAwB,MAAM,YAAY,OAAO,CAAC;AAExD,SAAO;AACR;AALS;",
  "names": ["token", "complete"]
}
