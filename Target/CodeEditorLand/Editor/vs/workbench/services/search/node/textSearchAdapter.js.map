{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/search/node/textSearchAdapter.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport type { CancellationToken } from \"../../../../base/common/cancellation.js\";\nimport * as pfs from \"../../../../base/node/pfs.js\";\nimport {\n\ttype IFileMatch,\n\ttype IProgressMessage,\n\ttype ISerializedFileMatch,\n\ttype ISerializedSearchSuccess,\n\ttype ITextQuery,\n\ttype ITextSearchMatch,\n\tresultIsMatch,\n} from \"../common/search.js\";\nimport { RipgrepTextSearchEngine } from \"./ripgrepTextSearchEngine.js\";\nimport { NativeTextSearchManager } from \"./textSearchManager.js\";\n\nexport class TextSearchEngineAdapter {\n\tconstructor(\n\t\tprivate query: ITextQuery,\n\t\tprivate numThreads?: number,\n\t) {}\n\n\tsearch(\n\t\ttoken: CancellationToken,\n\t\tonResult: (matches: ISerializedFileMatch[]) => void,\n\t\tonMessage: (message: IProgressMessage) => void,\n\t): Promise<ISerializedSearchSuccess> {\n\t\tif (\n\t\t\t(!this.query.folderQueries || !this.query.folderQueries.length) &&\n\t\t\t(!this.query.extraFileResources ||\n\t\t\t\t!this.query.extraFileResources.length)\n\t\t) {\n\t\t\treturn Promise.resolve({\n\t\t\t\ttype: \"success\",\n\t\t\t\tlimitHit: false,\n\t\t\t\tstats: {\n\t\t\t\t\ttype: \"searchProcess\",\n\t\t\t\t},\n\t\t\t\tmessages: [],\n\t\t\t});\n\t\t}\n\n\t\tconst pretendOutputChannel = {\n\t\t\tappendLine(msg: string) {\n\t\t\t\tonMessage({ message: msg });\n\t\t\t},\n\t\t};\n\t\tconst textSearchManager = new NativeTextSearchManager(\n\t\t\tthis.query,\n\t\t\tnew RipgrepTextSearchEngine(pretendOutputChannel, this.numThreads),\n\t\t\tpfs,\n\t\t);\n\t\treturn new Promise((resolve, reject) => {\n\t\t\treturn textSearchManager\n\t\t\t\t.search((matches) => {\n\t\t\t\t\tonResult(matches.map(fileMatchToSerialized));\n\t\t\t\t}, token)\n\t\t\t\t.then(\n\t\t\t\t\t(c) =>\n\t\t\t\t\t\tresolve({\n\t\t\t\t\t\t\tlimitHit: c.limitHit ?? false,\n\t\t\t\t\t\t\ttype: \"success\",\n\t\t\t\t\t\t\tstats: c.stats,\n\t\t\t\t\t\t\tmessages: [],\n\t\t\t\t\t\t}),\n\t\t\t\t\treject,\n\t\t\t\t);\n\t\t});\n\t}\n}\n\nfunction fileMatchToSerialized(match: IFileMatch): ISerializedFileMatch {\n\treturn {\n\t\tpath: match.resource && match.resource.fsPath,\n\t\tresults: match.results,\n\t\tnumMatches: (match.results || []).reduce((sum, r) => {\n\t\t\tif (resultIsMatch(r)) {\n\t\t\t\tconst m = <ITextSearchMatch>r;\n\t\t\t\treturn sum + m.rangeLocations.length;\n\t\t\t} else {\n\t\t\t\treturn sum + 1;\n\t\t\t}\n\t\t}, 0),\n\t};\n}\n"],
  "mappings": ";;AAMA,YAAY,SAAS;AACrB;AAAA,EAOC;AAAA,OACM;AACP,SAAS,+BAA+B;AACxC,SAAS,+BAA+B;AAEjC,MAAM,wBAAwB;AAAA,EACpC,YACS,OACA,YACP;AAFO;AACA;AAAA,EACN;AAAA,EAvBJ,OAmBqC;AAAA;AAAA;AAAA,EAMpC,OACC,OACA,UACA,WACoC;AACpC,SACE,CAAC,KAAK,MAAM,iBAAiB,CAAC,KAAK,MAAM,cAAc,YACvD,CAAC,KAAK,MAAM,sBACZ,CAAC,KAAK,MAAM,mBAAmB,SAC/B;AACD,aAAO,QAAQ,QAAQ;AAAA,QACtB,MAAM;AAAA,QACN,UAAU;AAAA,QACV,OAAO;AAAA,UACN,MAAM;AAAA,QACP;AAAA,QACA,UAAU,CAAC;AAAA,MACZ,CAAC;AAAA,IACF;AAEA,UAAM,uBAAuB;AAAA,MAC5B,WAAW,KAAa;AACvB,kBAAU,EAAE,SAAS,IAAI,CAAC;AAAA,MAC3B;AAAA,IACD;AACA,UAAM,oBAAoB,IAAI;AAAA,MAC7B,KAAK;AAAA,MACL,IAAI,wBAAwB,sBAAsB,KAAK,UAAU;AAAA,MACjE;AAAA,IACD;AACA,WAAO,IAAI,QAAQ,CAAC,SAAS,WAAW;AACvC,aAAO,kBACL,OAAO,CAAC,YAAY;AACpB,iBAAS,QAAQ,IAAI,qBAAqB,CAAC;AAAA,MAC5C,GAAG,KAAK,EACP;AAAA,QACA,CAAC,MACA,QAAQ;AAAA,UACP,UAAU,EAAE,YAAY;AAAA,UACxB,MAAM;AAAA,UACN,OAAO,EAAE;AAAA,UACT,UAAU,CAAC;AAAA,QACZ,CAAC;AAAA,QACF;AAAA,MACD;AAAA,IACF,CAAC;AAAA,EACF;AACD;AAEA,SAAS,sBAAsB,OAAyC;AACvE,SAAO;AAAA,IACN,MAAM,MAAM,YAAY,MAAM,SAAS;AAAA,IACvC,SAAS,MAAM;AAAA,IACf,aAAa,MAAM,WAAW,CAAC,GAAG,OAAO,CAAC,KAAK,MAAM;AACpD,UAAI,cAAc,CAAC,GAAG;AACrB,cAAM,IAAsB;AAC5B,eAAO,MAAM,EAAE,eAAe;AAAA,MAC/B,OAAO;AACN,eAAO,MAAM;AAAA,MACd;AAAA,IACD,GAAG,CAAC;AAAA,EACL;AACD;AAbS;",
  "names": []
}
