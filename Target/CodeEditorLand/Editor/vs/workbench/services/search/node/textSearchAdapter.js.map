{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/search/node/textSearchAdapter.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CancellationToken } from '../../../../base/common/cancellation.js';\nimport * as pfs from '../../../../base/node/pfs.js';\nimport { IFileMatch, IProgressMessage, ITextQuery, ITextSearchMatch, ISerializedFileMatch, ISerializedSearchSuccess, resultIsMatch } from '../common/search.js';\nimport { RipgrepTextSearchEngine } from './ripgrepTextSearchEngine.js';\nimport { NativeTextSearchManager } from './textSearchManager.js';\n\nexport class TextSearchEngineAdapter {\n\n\tconstructor(private query: ITextQuery, private numThreads?: number) { }\n\n\tsearch(token: CancellationToken, onResult: (matches: ISerializedFileMatch[]) => void, onMessage: (message: IProgressMessage) => void): Promise<ISerializedSearchSuccess> {\n\t\tif ((!this.query.folderQueries || !this.query.folderQueries.length) && (!this.query.extraFileResources || !this.query.extraFileResources.length)) {\n\t\t\treturn Promise.resolve({\n\t\t\t\ttype: 'success',\n\t\t\t\tlimitHit: false,\n\t\t\t\tstats: {\n\t\t\t\t\ttype: 'searchProcess'\n\t\t\t\t},\n\t\t\t\tmessages: []\n\t\t\t});\n\t\t}\n\n\t\tconst pretendOutputChannel = {\n\t\t\tappendLine(msg: string) {\n\t\t\t\tonMessage({ message: msg });\n\t\t\t}\n\t\t};\n\t\tconst textSearchManager = new NativeTextSearchManager(this.query, new RipgrepTextSearchEngine(pretendOutputChannel, this.numThreads), pfs);\n\t\treturn new Promise((resolve, reject) => {\n\t\t\treturn textSearchManager\n\t\t\t\t.search(\n\t\t\t\t\tmatches => {\n\t\t\t\t\t\tonResult(matches.map(fileMatchToSerialized));\n\t\t\t\t\t},\n\t\t\t\t\ttoken)\n\t\t\t\t.then(\n\t\t\t\t\tc => resolve({ limitHit: c.limitHit ?? false, type: 'success', stats: c.stats, messages: [] }),\n\t\t\t\t\treject);\n\t\t});\n\t}\n}\n\nfunction fileMatchToSerialized(match: IFileMatch): ISerializedFileMatch {\n\treturn {\n\t\tpath: match.resource && match.resource.fsPath,\n\t\tresults: match.results,\n\t\tnumMatches: (match.results || []).reduce((sum, r) => {\n\t\t\tif (resultIsMatch(r)) {\n\t\t\t\tconst m = <ITextSearchMatch>r;\n\t\t\t\treturn sum + m.rangeLocations.length;\n\t\t\t} else {\n\t\t\t\treturn sum + 1;\n\t\t\t}\n\t\t}, 0)\n\t};\n}\n"],
  "mappings": ";;AAKA,SAAS,yBAAyB;AAClC,YAAY,SAAS;AACrB,SAAS,YAAY,kBAAkB,YAAY,kBAAkB,sBAAsB,0BAA0B,qBAAqB;AAC1I,SAAS,+BAA+B;AACxC,SAAS,+BAA+B;AAEjC,MAAM,wBAAwB;AAAA,EAEpC,YAAoB,OAA2B,YAAqB;AAAhD;AAA2B;AAAA,EAAuB;AAAA,EAbvE,OAWqC;AAAA;AAAA;AAAA,EAIpC,OAAO,OAA0B,UAAqD,WAAmF;AACxK,SAAK,CAAC,KAAK,MAAM,iBAAiB,CAAC,KAAK,MAAM,cAAc,YAAY,CAAC,KAAK,MAAM,sBAAsB,CAAC,KAAK,MAAM,mBAAmB,SAAS;AACjJ,aAAO,QAAQ,QAAQ;AAAA,QACtB,MAAM;AAAA,QACN,UAAU;AAAA,QACV,OAAO;AAAA,UACN,MAAM;AAAA,QACP;AAAA,QACA,UAAU,CAAC;AAAA,MACZ,CAAC;AAAA,IACF;AAEA,UAAM,uBAAuB;AAAA,MAC5B,WAAW,KAAa;AACvB,kBAAU,EAAE,SAAS,IAAI,CAAC;AAAA,MAC3B;AAAA,IACD;AACA,UAAM,oBAAoB,IAAI,wBAAwB,KAAK,OAAO,IAAI,wBAAwB,sBAAsB,KAAK,UAAU,GAAG,GAAG;AACzI,WAAO,IAAI,QAAQ,CAAC,SAAS,WAAW;AACvC,aAAO,kBACL;AAAA,QACA,aAAW;AACV,mBAAS,QAAQ,IAAI,qBAAqB,CAAC;AAAA,QAC5C;AAAA,QACA;AAAA,MAAK,EACL;AAAA,QACA,OAAK,QAAQ,EAAE,UAAU,EAAE,YAAY,OAAO,MAAM,WAAW,OAAO,EAAE,OAAO,UAAU,CAAC,EAAE,CAAC;AAAA,QAC7F;AAAA,MAAM;AAAA,IACT,CAAC;AAAA,EACF;AACD;AAEA,SAAS,sBAAsB,OAAyC;AACvE,SAAO;AAAA,IACN,MAAM,MAAM,YAAY,MAAM,SAAS;AAAA,IACvC,SAAS,MAAM;AAAA,IACf,aAAa,MAAM,WAAW,CAAC,GAAG,OAAO,CAAC,KAAK,MAAM;AACpD,UAAI,cAAc,CAAC,GAAG;AACrB,cAAM,IAAsB;AAC5B,eAAO,MAAM,EAAE,eAAe;AAAA,MAC/B,OAAO;AACN,eAAO,MAAM;AAAA,MACd;AAAA,IACD,GAAG,CAAC;AAAA,EACL;AACD;AAbS;",
  "names": []
}
