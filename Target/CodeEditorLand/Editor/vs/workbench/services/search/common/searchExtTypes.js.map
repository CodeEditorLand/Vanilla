{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/search/common/searchExtTypes.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport type { CancellationToken } from \"../../../../base/common/cancellation.js\";\nimport type { URI } from \"../../../../base/common/uri.js\";\nimport type { IProgress } from \"../../../../platform/progress/common/progress.js\";\n\nexport class Position {\n\tconstructor(\n\t\treadonly line: number,\n\t\treadonly character: number,\n\t) {}\n\n\tisBefore(other: Position): boolean {\n\t\treturn false;\n\t}\n\tisBeforeOrEqual(other: Position): boolean {\n\t\treturn false;\n\t}\n\tisAfter(other: Position): boolean {\n\t\treturn false;\n\t}\n\tisAfterOrEqual(other: Position): boolean {\n\t\treturn false;\n\t}\n\tisEqual(other: Position): boolean {\n\t\treturn false;\n\t}\n\tcompareTo(other: Position): number {\n\t\treturn 0;\n\t}\n\ttranslate(lineDelta?: number, characterDelta?: number): Position;\n\ttranslate(change: {\n\t\tlineDelta?: number;\n\t\tcharacterDelta?: number;\n\t}): Position;\n\ttranslate(_?: any, _2?: any): Position {\n\t\treturn new Position(0, 0);\n\t}\n\twith(line?: number, character?: number): Position;\n\twith(change: { line?: number; character?: number }): Position;\n\twith(_: any): Position {\n\t\treturn new Position(0, 0);\n\t}\n}\n\nexport class Range {\n\treadonly start: Position;\n\treadonly end: Position;\n\n\tconstructor(\n\t\tstartLine: number,\n\t\tstartCol: number,\n\t\tendLine: number,\n\t\tendCol: number,\n\t) {\n\t\tthis.start = new Position(startLine, startCol);\n\t\tthis.end = new Position(endLine, endCol);\n\t}\n\n\tisEmpty = false;\n\tisSingleLine = false;\n\tcontains(positionOrRange: Position | Range): boolean {\n\t\treturn false;\n\t}\n\tisEqual(other: Range): boolean {\n\t\treturn false;\n\t}\n\tintersection(range: Range): Range | undefined {\n\t\treturn undefined;\n\t}\n\tunion(other: Range): Range {\n\t\treturn new Range(0, 0, 0, 0);\n\t}\n\n\twith(start?: Position, end?: Position): Range;\n\twith(change: { start?: Position; end?: Position }): Range;\n\twith(_: any): Range {\n\t\treturn new Range(0, 0, 0, 0);\n\t}\n}\n\nexport type ProviderResult<T> =\n\t| T\n\t| undefined\n\t| null\n\t| Thenable<T | undefined | null>;\n\n/**\n * A relative pattern is a helper to construct glob patterns that are matched\n * relatively to a base path. The base path can either be an absolute file path\n * or a [workspace folder](#WorkspaceFolder).\n */\nexport interface RelativePattern {\n\t/**\n\t * A base file path to which this pattern will be matched against relatively. The\n\t * file path must be absolute, should not have any trailing path separators and\n\t * not include any relative segments (`.` or `..`).\n\t */\n\tbaseUri: URI;\n\n\t/**\n\t * A file glob pattern like `*.{ts,js}` that will be matched on file paths\n\t * relative to the base path.\n\t *\n\t * Example: Given a base of `/home/work/folder` and a file path of `/home/work/folder/index.js`,\n\t * the file glob pattern will match on `index.js`.\n\t */\n\tpattern: string;\n}\n\n/**\n * A file glob pattern to match file paths against. This can either be a glob pattern string\n * (like `** /*.{ts,js}` without space before / or `*.{ts,js}`) or a [relative pattern](#RelativePattern).\n *\n * Glob patterns can have the following syntax:\n * * `*` to match zero or more characters in a path segment\n * * `?` to match on one character in a path segment\n * * `**` to match any number of path segments, including none\n * * `{}` to group conditions (e.g. `** /*.{ts,js}` without space before / matches all TypeScript and JavaScript files)\n * * `[]` to declare a range of characters to match in a path segment (e.g., `example.[0-9]` to match on `example.0`, `example.1`, \u2026)\n * * `[!...]` to negate a range of characters to match in a path segment (e.g., `example.[!0-9]` to match on `example.a`, `example.b`, but not `example.0`)\n *\n * Note: a backslash (`\\`) is not valid within a glob pattern. If you have an existing file\n * path to match against, consider to use the [relative pattern](#RelativePattern) support\n * that takes care of converting any backslash into slash. Otherwise, make sure to convert\n * any backslash to slash when creating the glob pattern.\n */\nexport type GlobPattern = string | RelativePattern;\n\n/**\n * The parameters of a query for text search.\n */\nexport interface TextSearchQueryNew {\n\t/**\n\t * The text pattern to search for.\n\t */\n\tpattern: string;\n\n\t/**\n\t * Whether or not `pattern` should match multiple lines of text.\n\t */\n\tisMultiline?: boolean;\n\n\t/**\n\t * Whether or not `pattern` should be interpreted as a regular expression.\n\t */\n\tisRegExp?: boolean;\n\n\t/**\n\t * Whether or not the search should be case-sensitive.\n\t */\n\tisCaseSensitive?: boolean;\n\n\t/**\n\t * Whether or not to search for whole word matches only.\n\t */\n\tisWordMatch?: boolean;\n}\n\nexport interface TextSearchProviderFolderOptions {\n\t/**\n\t * The root folder to search within.\n\t */\n\tfolder: URI;\n\n\t/**\n\t * Files that match an `includes` glob pattern should be included in the search.\n\t */\n\tincludes: string[];\n\n\t/**\n\t * Files that match an `excludes` glob pattern should be excluded from the search.\n\t */\n\texcludes: GlobPattern[];\n\n\t/**\n\t * Whether symlinks should be followed while searching.\n\t * For more info, see the setting description for `search.followSymlinks`.\n\t */\n\tfollowSymlinks: boolean;\n\n\t/**\n\t * Which file locations we should look for ignore (.gitignore or .ignore) files to respect.\n\t */\n\tuseIgnoreFiles: {\n\t\t/**\n\t\t * Use ignore files at the current workspace root.\n\t\t */\n\t\tlocal: boolean;\n\t\t/**\n\t\t * Use ignore files at the parent directory. If set, {@link TextSearchProviderOptions.useIgnoreFiles.local} should also be `true`.\n\t\t */\n\t\tparent: boolean;\n\t\t/**\n\t\t * Use global ignore files. If set, {@link TextSearchProviderOptions.useIgnoreFiles.local} should also be `true`.\n\t\t */\n\t\tglobal: boolean;\n\t};\n\n\t/**\n\t * Interpret files using this encoding.\n\t * See the vscode setting `\"files.encoding\"`\n\t */\n\tencoding: string;\n}\n\n/**\n * Options that apply to text search.\n */\nexport interface TextSearchProviderOptions {\n\tfolderOptions: TextSearchProviderFolderOptions[];\n\n\t/**\n\t * The maximum number of results to be returned.\n\t */\n\tmaxResults: number;\n\n\t/**\n\t * Options to specify the size of the result text preview.\n\t */\n\tpreviewOptions: {\n\t\t/**\n\t\t * The maximum number of lines in the preview.\n\t\t * Only search providers that support multiline search will ever return more than one line in the match.\n\t\t * Defaults to 100.\n\t\t */\n\t\tmatchLines: number;\n\n\t\t/**\n\t\t * The maximum number of characters included per line.\n\t\t * Defaults to 10000.\n\t\t */\n\t\tcharsPerLine: number;\n\t};\n\n\t/**\n\t * Exclude files larger than `maxFileSize` in bytes.\n\t */\n\tmaxFileSize: number | undefined;\n\n\t/**\n\t * Number of lines of context to include before and after each match.\n\t */\n\tsurroundingContext: number;\n}\n\n/**\n * Information collected when text search is complete.\n */\nexport interface TextSearchCompleteNew {\n\t/**\n\t * Whether the search hit the limit on the maximum number of search results.\n\t * `maxResults` on [`TextSearchOptions`](#TextSearchOptions) specifies the max number of results.\n\t * - If exactly that number of matches exist, this should be false.\n\t * - If `maxResults` matches are returned and more exist, this should be true.\n\t * - If search hits an internal limit which is less than `maxResults`, this should be true.\n\t */\n\tlimitHit?: boolean;\n}\n\nexport interface FileSearchProviderFolderOptions {\n\t/**\n\t * The root folder to search within.\n\t */\n\tfolder: URI;\n\n\t/**\n\t * Files that match an `includes` glob pattern should be included in the search.\n\t */\n\tincludes: string[];\n\n\t/**\n\t * Files that match an `excludes` glob pattern should be excluded from the search.\n\t */\n\texcludes: GlobPattern[];\n\n\t/**\n\t * Whether symlinks should be followed while searching.\n\t * For more info, see the setting description for `search.followSymlinks`.\n\t */\n\tfollowSymlinks: boolean;\n\n\t/**\n\t * Which file locations we should look for ignore (.gitignore or .ignore) files to respect.\n\t */\n\tuseIgnoreFiles: {\n\t\t/**\n\t\t * Use ignore files at the current workspace root.\n\t\t */\n\t\tlocal: boolean;\n\t\t/**\n\t\t * Use ignore files at the parent directory. If set, {@link FileSearchProviderOptions.useIgnoreFiles.local} should also be `true`.\n\t\t */\n\t\tparent: boolean;\n\t\t/**\n\t\t * Use global ignore files. If set, {@link FileSearchProviderOptions.useIgnoreFiles.local} should also be `true`.\n\t\t */\n\t\tglobal: boolean;\n\t};\n}\n\n/**\n * Options that apply to file search.\n */\nexport interface FileSearchProviderOptions {\n\tfolderOptions: FileSearchProviderFolderOptions[];\n\n\t/**\n\t * An object with a lifespan that matches the session's lifespan. If the provider chooses to, this object can be used as the key for a cache,\n\t * and searches with the same session object can search the same cache. When the token is cancelled, the session is complete and the cache can be cleared.\n\t */\n\tsession: unknown;\n\n\t/**\n\t * The maximum number of results to be returned.\n\t */\n\tmaxResults: number;\n}\n\n/**\n * The main match information for a {@link TextSearchResultNew}.\n */\nexport class TextSearchMatchNew {\n\t/**\n\t * @param uri The uri for the matching document.\n\t * @param ranges The ranges associated with this match.\n\t * @param previewText The text that is used to preview the match. The highlighted range in `previewText` is specified in `ranges`.\n\t */\n\tconstructor(\n\t\tpublic uri: URI,\n\t\tpublic ranges: { sourceRange: Range; previewRange: Range }[],\n\t\tpublic previewText: string,\n\t) {}\n}\n\n/**\n * The potential context information for a {@link TextSearchResultNew}.\n */\nexport class TextSearchContextNew {\n\t/**\n\t * @param uri The uri for the matching document.\n\t * @param text The line of context text.\n\t * @param lineNumber The line number of this line of context.\n\t */\n\tconstructor(\n\t\tpublic uri: URI,\n\t\tpublic text: string,\n\t\tpublic lineNumber: number,\n\t) {}\n}\n\n/**\n * A result payload for a text search, pertaining to matches within a single file.\n */\nexport type TextSearchResultNew = TextSearchMatchNew | TextSearchContextNew;\n\n/**\n * A FileSearchProvider provides search results for files in the given folder that match a query string. It can be invoked by quickaccess or other extensions.\n *\n * A FileSearchProvider is the more powerful of two ways to implement file search in VS Code. Use a FileSearchProvider if you wish to search within a folder for\n * all files that match the user's query.\n *\n * The FileSearchProvider will be invoked on every keypress in quickaccess. When `workspace.findFiles` is called, it will be invoked with an empty query string,\n * and in that case, every file in the folder should be returned.\n */\nexport interface FileSearchProviderNew {\n\t/**\n\t * Provide the set of files that match a certain file path pattern.\n\t * @param query The parameters for this query.\n\t * @param options A set of options to consider while searching files.\n\t * @param progress A progress callback that must be invoked for all results.\n\t * @param token A cancellation token.\n\t */\n\tprovideFileSearchResults(\n\t\tpattern: string,\n\t\toptions: FileSearchProviderOptions,\n\t\ttoken: CancellationToken,\n\t): ProviderResult<URI[]>;\n}\n\n/**\n * A TextSearchProvider provides search results for text results inside files in the workspace.\n */\nexport interface TextSearchProviderNew {\n\t/**\n\t * Provide results that match the given text pattern.\n\t * @param query The parameters for this query.\n\t * @param options A set of options to consider while searching.\n\t * @param progress A progress callback that must be invoked for all results.\n\t * @param token A cancellation token.\n\t */\n\tprovideTextSearchResults(\n\t\tquery: TextSearchQueryNew,\n\t\toptions: TextSearchProviderOptions,\n\t\tprogress: IProgress<TextSearchResultNew>,\n\t\ttoken: CancellationToken,\n\t): ProviderResult<TextSearchCompleteNew>;\n}\n\n/**\n * Information collected when text search is complete.\n */\nexport interface TextSearchCompleteNew {\n\t/**\n\t * Whether the search hit the limit on the maximum number of search results.\n\t * `maxResults` on {@linkcode TextSearchOptions} specifies the max number of results.\n\t * - If exactly that number of matches exist, this should be false.\n\t * - If `maxResults` matches are returned and more exist, this should be true.\n\t * - If search hits an internal limit which is less than `maxResults`, this should be true.\n\t */\n\tlimitHit?: boolean;\n\n\t/**\n\t * Additional information regarding the state of the completed search.\n\t *\n\t * Messages with \"Information\" style support links in markdown syntax:\n\t * - Click to [run a command](command:workbench.action.OpenQuickPick)\n\t * - Click to [open a website](https://aka.ms)\n\t *\n\t * Commands may optionally return { triggerSearch: true } to signal to the editor that the original search should run be again.\n\t */\n\tmessage?: TextSearchCompleteMessageNew[];\n}\n\n/**\n * A message regarding a completed search.\n */\nexport interface TextSearchCompleteMessageNew {\n\t/**\n\t * Markdown text of the message.\n\t */\n\ttext: string;\n\t/**\n\t * Whether the source of the message is trusted, command links are disabled for untrusted message sources.\n\t * Messaged are untrusted by default.\n\t */\n\ttrusted?: boolean;\n\t/**\n\t * The message type, this affects how the message will be rendered.\n\t */\n\ttype: TextSearchCompleteMessageType;\n}\n\n/**\n * A FileSearchProvider provides search results for files in the given folder that match a query string. It can be invoked by quickaccess or other extensions.\n *\n * A FileSearchProvider is the more powerful of two ways to implement file search in VS Code. Use a FileSearchProvider if you wish to search within a folder for\n * all files that match the user's query.\n *\n * The FileSearchProvider will be invoked on every keypress in quickaccess. When `workspace.findFiles` is called, it will be invoked with an empty query string,\n * and in that case, every file in the folder should be returned.\n */\nexport interface FileSearchProviderNew {\n\t/**\n\t * Provide the set of files that match a certain file path pattern.\n\t * @param query The parameters for this query.\n\t * @param options A set of options to consider while searching files.\n\t * @param progress A progress callback that must be invoked for all results.\n\t * @param token A cancellation token.\n\t */\n\tprovideFileSearchResults(\n\t\tpattern: string,\n\t\toptions: FileSearchProviderOptions,\n\t\ttoken: CancellationToken,\n\t): ProviderResult<URI[]>;\n}\n\n/**\n * A TextSearchProvider provides search results for text results inside files in the workspace.\n */\nexport interface TextSearchProviderNew {\n\t/**\n\t * Provide results that match the given text pattern.\n\t * @param query The parameters for this query.\n\t * @param options A set of options to consider while searching.\n\t * @param progress A progress callback that must be invoked for all results.\n\t * @param token A cancellation token.\n\t */\n\tprovideTextSearchResults(\n\t\tquery: TextSearchQueryNew,\n\t\toptions: TextSearchProviderOptions,\n\t\tprogress: IProgress<TextSearchResultNew>,\n\t\ttoken: CancellationToken,\n\t): ProviderResult<TextSearchCompleteNew>;\n}\n\n/**\n * Information collected when text search is complete.\n */\nexport interface TextSearchCompleteNew {\n\t/**\n\t * Whether the search hit the limit on the maximum number of search results.\n\t * `maxResults` on {@linkcode TextSearchOptions} specifies the max number of results.\n\t * - If exactly that number of matches exist, this should be false.\n\t * - If `maxResults` matches are returned and more exist, this should be true.\n\t * - If search hits an internal limit which is less than `maxResults`, this should be true.\n\t */\n\tlimitHit?: boolean;\n\n\t/**\n\t * Additional information regarding the state of the completed search.\n\t *\n\t * Messages with \"Information\" style support links in markdown syntax:\n\t * - Click to [run a command](command:workbench.action.OpenQuickPick)\n\t * - Click to [open a website](https://aka.ms)\n\t *\n\t * Commands may optionally return { triggerSearch: true } to signal to the editor that the original search should run be again.\n\t */\n\tmessage?: TextSearchCompleteMessageNew[];\n}\n\n/**\n * A message regarding a completed search.\n */\nexport interface TextSearchCompleteMessageNew {\n\t/**\n\t * Markdown text of the message.\n\t */\n\ttext: string;\n\t/**\n\t * Whether the source of the message is trusted, command links are disabled for untrusted message sources.\n\t * Messaged are untrusted by default.\n\t */\n\ttrusted?: boolean;\n\t/**\n\t * The message type, this affects how the message will be rendered.\n\t */\n\ttype: TextSearchCompleteMessageType;\n}\n\n/**\n * Options for following search.exclude and files.exclude settings.\n */\nexport enum ExcludeSettingOptions {\n\t/*\n\t * Don't use any exclude settings.\n\t */\n\tNone = 1,\n\t/*\n\t * Use:\n\t * - files.exclude setting\n\t */\n\tFilesExclude = 2,\n\t/*\n\t * Use:\n\t * - files.exclude setting\n\t * - search.exclude setting\n\t */\n\tSearchAndFilesExclude = 3,\n}\n\nexport enum TextSearchCompleteMessageType {\n\tInformation = 1,\n\tWarning = 2,\n}\n\n/**\n * A message regarding a completed search.\n */\nexport interface TextSearchCompleteMessage {\n\t/**\n\t * Markdown text of the message.\n\t */\n\ttext: string;\n\t/**\n\t * Whether the source of the message is trusted, command links are disabled for untrusted message sources.\n\t */\n\ttrusted?: boolean;\n\t/**\n\t * The message type, this affects how the message will be rendered.\n\t */\n\ttype: TextSearchCompleteMessageType;\n}\n\n/**\n * An AITextSearchProvider provides additional AI text search results in the workspace.\n */\nexport interface AITextSearchProviderNew {\n\t/**\n\t * WARNING: VERY EXPERIMENTAL.\n\t *\n\t * Provide results that match the given text pattern.\n\t * @param query The parameter for this query.\n\t * @param options A set of options to consider while searching.\n\t * @param progress A progress callback that must be invoked for all results.\n\t * @param token A cancellation token.\n\t */\n\tprovideAITextSearchResults(\n\t\tquery: string,\n\t\toptions: TextSearchProviderOptions,\n\t\tprogress: IProgress<TextSearchResultNew>,\n\t\ttoken: CancellationToken,\n\t): ProviderResult<TextSearchCompleteNew>;\n}\n"],
  "mappings": ";;AASO,MAAM,SAAS;AAAA,EACrB,YACU,MACA,WACR;AAFQ;AACA;AAAA,EACP;AAAA,EAbJ,OASsB;AAAA;AAAA;AAAA,EAMrB,SAAS,OAA0B;AAClC,WAAO;AAAA,EACR;AAAA,EACA,gBAAgB,OAA0B;AACzC,WAAO;AAAA,EACR;AAAA,EACA,QAAQ,OAA0B;AACjC,WAAO;AAAA,EACR;AAAA,EACA,eAAe,OAA0B;AACxC,WAAO;AAAA,EACR;AAAA,EACA,QAAQ,OAA0B;AACjC,WAAO;AAAA,EACR;AAAA,EACA,UAAU,OAAyB;AAClC,WAAO;AAAA,EACR;AAAA,EAMA,UAAU,GAAS,IAAoB;AACtC,WAAO,IAAI,SAAS,GAAG,CAAC;AAAA,EACzB;AAAA,EAGA,KAAK,GAAkB;AACtB,WAAO,IAAI,SAAS,GAAG,CAAC;AAAA,EACzB;AACD;AAEO,MAAM,MAAM;AAAA,EAhDnB,OAgDmB;AAAA;AAAA;AAAA,EACT;AAAA,EACA;AAAA,EAET,YACC,WACA,UACA,SACA,QACC;AACD,SAAK,QAAQ,IAAI,SAAS,WAAW,QAAQ;AAC7C,SAAK,MAAM,IAAI,SAAS,SAAS,MAAM;AAAA,EACxC;AAAA,EAEA,UAAU;AAAA,EACV,eAAe;AAAA,EACf,SAAS,iBAA4C;AACpD,WAAO;AAAA,EACR;AAAA,EACA,QAAQ,OAAuB;AAC9B,WAAO;AAAA,EACR;AAAA,EACA,aAAa,OAAiC;AAC7C,WAAO;AAAA,EACR;AAAA,EACA,MAAM,OAAqB;AAC1B,WAAO,IAAI,MAAM,GAAG,GAAG,GAAG,CAAC;AAAA,EAC5B;AAAA,EAIA,KAAK,GAAe;AACnB,WAAO,IAAI,MAAM,GAAG,GAAG,GAAG,CAAC;AAAA,EAC5B;AACD;AAmPO,MAAM,mBAAmB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAM/B,YACQ,KACA,QACA,aACN;AAHM;AACA;AACA;AAAA,EACL;AAAA,EA/UJ,OAqUgC;AAAA;AAAA;AAWhC;AAKO,MAAM,qBAAqB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMjC,YACQ,KACA,MACA,YACN;AAHM;AACA;AACA;AAAA,EACL;AAAA,EA/VJ,OAqVkC;AAAA;AAAA;AAWlC;AAwLO,IAAK,wBAAL,kBAAKA,2BAAL;AAIN,EAAAA,8CAAA,UAAO,KAAP;AAKA,EAAAA,8CAAA,kBAAe,KAAf;AAMA,EAAAA,8CAAA,2BAAwB,KAAxB;AAfW,SAAAA;AAAA,GAAA;AAkBL,IAAK,gCAAL,kBAAKC,mCAAL;AACN,EAAAA,8DAAA,iBAAc,KAAd;AACA,EAAAA,8DAAA,aAAU,KAAV;AAFW,SAAAA;AAAA,GAAA;",
  "names": ["ExcludeSettingOptions", "TextSearchCompleteMessageType"]
}
