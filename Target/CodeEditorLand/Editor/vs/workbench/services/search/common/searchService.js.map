{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/search/common/searchService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as arrays from \"../../../../base/common/arrays.js\";\nimport {\n\tDeferredPromise,\n\traceCancellationError,\n} from \"../../../../base/common/async.js\";\nimport type { CancellationToken } from \"../../../../base/common/cancellation.js\";\nimport { CancellationError } from \"../../../../base/common/errors.js\";\nimport {\n\tDisposable,\n\ttype IDisposable,\n\ttoDisposable,\n} from \"../../../../base/common/lifecycle.js\";\nimport { ResourceMap, ResourceSet } from \"../../../../base/common/map.js\";\nimport { Schemas } from \"../../../../base/common/network.js\";\nimport { StopWatch } from \"../../../../base/common/stopwatch.js\";\nimport { isNumber } from \"../../../../base/common/types.js\";\nimport type { URI, URI as uri } from \"../../../../base/common/uri.js\";\nimport { IModelService } from \"../../../../editor/common/services/model.js\";\nimport { IFileService } from \"../../../../platform/files/common/files.js\";\nimport { ILogService } from \"../../../../platform/log/common/log.js\";\nimport { ITelemetryService } from \"../../../../platform/telemetry/common/telemetry.js\";\nimport { IUriIdentityService } from \"../../../../platform/uriIdentity/common/uriIdentity.js\";\nimport {\n\tEditorResourceAccessor,\n\tSideBySideEditor,\n} from \"../../../common/editor.js\";\nimport { IEditorService } from \"../../editor/common/editorService.js\";\nimport { IExtensionService } from \"../../extensions/common/extensions.js\";\nimport {\n\tDEFAULT_MAX_SEARCH_RESULTS,\n\tFileMatch,\n\ttype IAITextQuery,\n\ttype ICachedSearchStats,\n\ttype IFileMatch,\n\ttype IFileQuery,\n\ttype IFileSearchStats,\n\ttype IFolderQuery,\n\ttype IProgressMessage,\n\ttype ISearchComplete,\n\ttype ISearchEngineStats,\n\ttype ISearchProgressItem,\n\ttype ISearchQuery,\n\ttype ISearchResultProvider,\n\ttype ISearchService,\n\ttype ITextQuery,\n\tQueryType,\n\tSEARCH_RESULT_LANGUAGE_ID,\n\ttype SearchError,\n\tSearchErrorCode,\n\tSearchProviderType,\n\tdeserializeSearchError,\n\tisFileMatch,\n\tisProgressMessage,\n\tpathIncludedInQuery,\n} from \"./search.js\";\nimport {\n\teditorMatchesToTextSearchResults,\n\tgetTextSearchMatchWithModelContext,\n} from \"./searchHelpers.js\";\n\nexport class SearchService extends Disposable implements ISearchService {\n\tdeclare readonly _serviceBrand: undefined;\n\n\tprivate readonly fileSearchProviders = new Map<\n\t\tstring,\n\t\tISearchResultProvider\n\t>();\n\tprivate readonly textSearchProviders = new Map<\n\t\tstring,\n\t\tISearchResultProvider\n\t>();\n\tprivate readonly aiTextSearchProviders = new Map<\n\t\tstring,\n\t\tISearchResultProvider\n\t>();\n\n\tprivate deferredFileSearchesByScheme = new Map<\n\t\tstring,\n\t\tDeferredPromise<ISearchResultProvider>\n\t>();\n\tprivate deferredTextSearchesByScheme = new Map<\n\t\tstring,\n\t\tDeferredPromise<ISearchResultProvider>\n\t>();\n\tprivate deferredAITextSearchesByScheme = new Map<\n\t\tstring,\n\t\tDeferredPromise<ISearchResultProvider>\n\t>();\n\n\tprivate loggedSchemesMissingProviders = new Set<string>();\n\n\tconstructor(\n\t\t@IModelService private readonly modelService: IModelService,\n\t\t@IEditorService private readonly editorService: IEditorService,\n\t\t@ITelemetryService private readonly telemetryService: ITelemetryService,\n\t\t@ILogService private readonly logService: ILogService,\n\t\t@IExtensionService private readonly extensionService: IExtensionService,\n\t\t@IFileService private readonly fileService: IFileService,\n\t\t@IUriIdentityService\n\t\tprivate readonly uriIdentityService: IUriIdentityService,\n\t) {\n\t\tsuper();\n\t}\n\n\tregisterSearchResultProvider(\n\t\tscheme: string,\n\t\ttype: SearchProviderType,\n\t\tprovider: ISearchResultProvider,\n\t): IDisposable {\n\t\tlet list: Map<string, ISearchResultProvider>;\n\t\tlet deferredMap: Map<string, DeferredPromise<ISearchResultProvider>>;\n\t\tif (type === SearchProviderType.file) {\n\t\t\tlist = this.fileSearchProviders;\n\t\t\tdeferredMap = this.deferredFileSearchesByScheme;\n\t\t} else if (type === SearchProviderType.text) {\n\t\t\tlist = this.textSearchProviders;\n\t\t\tdeferredMap = this.deferredTextSearchesByScheme;\n\t\t} else if (type === SearchProviderType.aiText) {\n\t\t\tlist = this.aiTextSearchProviders;\n\t\t\tdeferredMap = this.deferredAITextSearchesByScheme;\n\t\t} else {\n\t\t\tthrow new Error(\"Unknown SearchProviderType\");\n\t\t}\n\n\t\tlist.set(scheme, provider);\n\n\t\tif (deferredMap.has(scheme)) {\n\t\t\tdeferredMap.get(scheme)!.complete(provider);\n\t\t\tdeferredMap.delete(scheme);\n\t\t}\n\n\t\treturn toDisposable(() => {\n\t\t\tlist.delete(scheme);\n\t\t});\n\t}\n\n\tasync textSearch(\n\t\tquery: ITextQuery,\n\t\ttoken?: CancellationToken,\n\t\tonProgress?: (item: ISearchProgressItem) => void,\n\t): Promise<ISearchComplete> {\n\t\tconst results = this.textSearchSplitSyncAsync(query, token, onProgress);\n\t\tconst openEditorResults = results.syncResults;\n\t\tconst otherResults = await results.asyncResults;\n\t\treturn {\n\t\t\tlimitHit: otherResults.limitHit || openEditorResults.limitHit,\n\t\t\tresults: [...otherResults.results, ...openEditorResults.results],\n\t\t\tmessages: [...otherResults.messages, ...openEditorResults.messages],\n\t\t};\n\t}\n\n\tasync aiTextSearch(\n\t\tquery: IAITextQuery,\n\t\ttoken?: CancellationToken,\n\t\tonProgress?: (item: ISearchProgressItem) => void,\n\t): Promise<ISearchComplete> {\n\t\tconst onProviderProgress = (progress: ISearchProgressItem) => {\n\t\t\t// Match\n\t\t\tif (onProgress) {\n\t\t\t\t// don't override open editor results\n\t\t\t\tif (isFileMatch(progress)) {\n\t\t\t\t\tonProgress(progress);\n\t\t\t\t} else {\n\t\t\t\t\tonProgress(<IProgressMessage>progress);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (isProgressMessage(progress)) {\n\t\t\t\tthis.logService.debug(\"SearchService#search\", progress.message);\n\t\t\t}\n\t\t};\n\t\treturn this.doSearch(query, token, onProviderProgress);\n\t}\n\n\ttextSearchSplitSyncAsync(\n\t\tquery: ITextQuery,\n\t\ttoken?: CancellationToken | undefined,\n\t\tonProgress?: ((result: ISearchProgressItem) => void) | undefined,\n\t\tnotebookFilesToIgnore?: ResourceSet,\n\t\tasyncNotebookFilesToIgnore?: Promise<ResourceSet>,\n\t): {\n\t\tsyncResults: ISearchComplete;\n\t\tasyncResults: Promise<ISearchComplete>;\n\t} {\n\t\t// Get open editor results from dirty/untitled\n\t\tconst openEditorResults = this.getOpenEditorResults(query);\n\n\t\tif (onProgress) {\n\t\t\tarrays\n\t\t\t\t.coalesce([...openEditorResults.results.values()])\n\t\t\t\t.filter(\n\t\t\t\t\t(e) =>\n\t\t\t\t\t\t!(\n\t\t\t\t\t\t\tnotebookFilesToIgnore &&\n\t\t\t\t\t\t\tnotebookFilesToIgnore.has(e.resource)\n\t\t\t\t\t\t),\n\t\t\t\t)\n\t\t\t\t.forEach(onProgress);\n\t\t}\n\n\t\tconst syncResults: ISearchComplete = {\n\t\t\tresults: arrays.coalesce([...openEditorResults.results.values()]),\n\t\t\tlimitHit: openEditorResults.limitHit ?? false,\n\t\t\tmessages: [],\n\t\t};\n\n\t\tconst getAsyncResults = async () => {\n\t\t\tconst resolvedAsyncNotebookFilesToIgnore =\n\t\t\t\t(await asyncNotebookFilesToIgnore) ?? new ResourceSet();\n\t\t\tconst onProviderProgress = (progress: ISearchProgressItem) => {\n\t\t\t\tif (isFileMatch(progress)) {\n\t\t\t\t\t// Match\n\t\t\t\t\tif (\n\t\t\t\t\t\t!openEditorResults.results.has(progress.resource) &&\n\t\t\t\t\t\t!resolvedAsyncNotebookFilesToIgnore.has(\n\t\t\t\t\t\t\tprogress.resource,\n\t\t\t\t\t\t) &&\n\t\t\t\t\t\tonProgress\n\t\t\t\t\t) {\n\t\t\t\t\t\t// don't override open editor results\n\t\t\t\t\t\tonProgress(progress);\n\t\t\t\t\t}\n\t\t\t\t} else if (onProgress) {\n\t\t\t\t\t// Progress\n\t\t\t\t\tonProgress(<IProgressMessage>progress);\n\t\t\t\t}\n\n\t\t\t\tif (isProgressMessage(progress)) {\n\t\t\t\t\tthis.logService.debug(\n\t\t\t\t\t\t\"SearchService#search\",\n\t\t\t\t\t\tprogress.message,\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t};\n\t\t\treturn await this.doSearch(query, token, onProviderProgress);\n\t\t};\n\n\t\treturn {\n\t\t\tsyncResults,\n\t\t\tasyncResults: getAsyncResults(),\n\t\t};\n\t}\n\n\tfileSearch(\n\t\tquery: IFileQuery,\n\t\ttoken?: CancellationToken,\n\t): Promise<ISearchComplete> {\n\t\treturn this.doSearch(query, token);\n\t}\n\n\tprivate doSearch(\n\t\tquery: ISearchQuery,\n\t\ttoken?: CancellationToken,\n\t\tonProgress?: (item: ISearchProgressItem) => void,\n\t): Promise<ISearchComplete> {\n\t\tthis.logService.trace(\"SearchService#search\", JSON.stringify(query));\n\n\t\tconst schemesInQuery = this.getSchemesInQuery(query);\n\n\t\tconst providerActivations: Promise<any>[] = [Promise.resolve(null)];\n\t\tschemesInQuery.forEach((scheme) =>\n\t\t\tproviderActivations.push(\n\t\t\t\tthis.extensionService.activateByEvent(`onSearch:${scheme}`),\n\t\t\t),\n\t\t);\n\t\tproviderActivations.push(\n\t\t\tthis.extensionService.activateByEvent(\"onSearch:file\"),\n\t\t);\n\n\t\tconst providerPromise = (async () => {\n\t\t\tawait Promise.all(providerActivations);\n\t\t\tawait this.extensionService.whenInstalledExtensionsRegistered();\n\n\t\t\t// Cancel faster if search was canceled while waiting for extensions\n\t\t\tif (token && token.isCancellationRequested) {\n\t\t\t\treturn Promise.reject(new CancellationError());\n\t\t\t}\n\n\t\t\tconst progressCallback = (item: ISearchProgressItem) => {\n\t\t\t\tif (token && token.isCancellationRequested) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tonProgress?.(item);\n\t\t\t};\n\n\t\t\tconst exists = await Promise.all(\n\t\t\t\tquery.folderQueries.map((query) =>\n\t\t\t\t\tthis.fileService.exists(query.folder),\n\t\t\t\t),\n\t\t\t);\n\t\t\tquery.folderQueries = query.folderQueries.filter(\n\t\t\t\t(_, i) => exists[i],\n\t\t\t);\n\n\t\t\tlet completes = await this.searchWithProviders(\n\t\t\t\tquery,\n\t\t\t\tprogressCallback,\n\t\t\t\ttoken,\n\t\t\t);\n\t\t\tcompletes = arrays.coalesce(completes);\n\t\t\tif (!completes.length) {\n\t\t\t\treturn {\n\t\t\t\t\tlimitHit: false,\n\t\t\t\t\tresults: [],\n\t\t\t\t\tmessages: [],\n\t\t\t\t};\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\tlimitHit: completes[0] && completes[0].limitHit,\n\t\t\t\tstats: completes[0].stats,\n\t\t\t\tmessages: arrays\n\t\t\t\t\t.coalesce(completes.flatMap((i) => i.messages))\n\t\t\t\t\t.filter(\n\t\t\t\t\t\tarrays.uniqueFilter(\n\t\t\t\t\t\t\t(message) =>\n\t\t\t\t\t\t\t\tmessage.type + message.text + message.trusted,\n\t\t\t\t\t\t),\n\t\t\t\t\t),\n\t\t\t\tresults: completes.flatMap((c: ISearchComplete) => c.results),\n\t\t\t};\n\t\t})();\n\n\t\treturn token\n\t\t\t? raceCancellationError<ISearchComplete>(providerPromise, token)\n\t\t\t: providerPromise;\n\t}\n\n\tprivate getSchemesInQuery(query: ISearchQuery): Set<string> {\n\t\tconst schemes = new Set<string>();\n\t\tquery.folderQueries?.forEach((fq) => schemes.add(fq.folder.scheme));\n\n\t\tquery.extraFileResources?.forEach((extraFile) =>\n\t\t\tschemes.add(extraFile.scheme),\n\t\t);\n\n\t\treturn schemes;\n\t}\n\n\tprivate async waitForProvider(\n\t\tqueryType: QueryType,\n\t\tscheme: string,\n\t): Promise<ISearchResultProvider> {\n\t\tconst deferredMap: Map<\n\t\t\tstring,\n\t\t\tDeferredPromise<ISearchResultProvider>\n\t\t> = this.getDeferredTextSearchesByScheme(queryType);\n\n\t\tif (deferredMap.has(scheme)) {\n\t\t\treturn deferredMap.get(scheme)!.p;\n\t\t} else {\n\t\t\tconst deferred = new DeferredPromise<ISearchResultProvider>();\n\t\t\tdeferredMap.set(scheme, deferred);\n\t\t\treturn deferred.p;\n\t\t}\n\t}\n\n\tprivate getSearchProvider(\n\t\ttype: QueryType,\n\t): Map<string, ISearchResultProvider> {\n\t\tswitch (type) {\n\t\t\tcase QueryType.File:\n\t\t\t\treturn this.fileSearchProviders;\n\t\t\tcase QueryType.Text:\n\t\t\t\treturn this.textSearchProviders;\n\t\t\tcase QueryType.aiText:\n\t\t\t\treturn this.aiTextSearchProviders;\n\t\t\tdefault:\n\t\t\t\tthrow new Error(`Unknown query type: ${type}`);\n\t\t}\n\t}\n\n\tprivate getDeferredTextSearchesByScheme(\n\t\ttype: QueryType,\n\t): Map<string, DeferredPromise<ISearchResultProvider>> {\n\t\tswitch (type) {\n\t\t\tcase QueryType.File:\n\t\t\t\treturn this.deferredFileSearchesByScheme;\n\t\t\tcase QueryType.Text:\n\t\t\t\treturn this.deferredTextSearchesByScheme;\n\t\t\tcase QueryType.aiText:\n\t\t\t\treturn this.deferredAITextSearchesByScheme;\n\t\t\tdefault:\n\t\t\t\tthrow new Error(`Unknown query type: ${type}`);\n\t\t}\n\t}\n\n\tprivate async searchWithProviders(\n\t\tquery: ISearchQuery,\n\t\tonProviderProgress: (progress: ISearchProgressItem) => void,\n\t\ttoken?: CancellationToken,\n\t) {\n\t\tconst e2eSW = StopWatch.create(false);\n\n\t\tconst searchPs: Promise<ISearchComplete>[] = [];\n\n\t\tconst fqs = this.groupFolderQueriesByScheme(query);\n\t\tconst someSchemeHasProvider = [...fqs.keys()].some((scheme) => {\n\t\t\treturn this.getSearchProvider(query.type).has(scheme);\n\t\t});\n\n\t\tif (query.type === QueryType.aiText && !someSchemeHasProvider) {\n\t\t\treturn [];\n\t\t}\n\t\tawait Promise.all(\n\t\t\t[...fqs.keys()].map(async (scheme) => {\n\t\t\t\tif (query.onlyFileScheme && scheme !== Schemas.file) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tconst schemeFQs = fqs.get(scheme)!;\n\t\t\t\tlet provider = this.getSearchProvider(query.type).get(scheme);\n\n\t\t\t\tif (!provider) {\n\t\t\t\t\tif (someSchemeHasProvider) {\n\t\t\t\t\t\tif (!this.loggedSchemesMissingProviders.has(scheme)) {\n\t\t\t\t\t\t\tthis.logService.warn(\n\t\t\t\t\t\t\t\t`No search provider registered for scheme: ${scheme}. Another scheme has a provider, not waiting for ${scheme}`,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tthis.loggedSchemesMissingProviders.add(scheme);\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (!this.loggedSchemesMissingProviders.has(scheme)) {\n\t\t\t\t\t\t\tthis.logService.warn(\n\t\t\t\t\t\t\t\t`No search provider registered for scheme: ${scheme}, waiting`,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tthis.loggedSchemesMissingProviders.add(scheme);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tprovider = await this.waitForProvider(\n\t\t\t\t\t\t\tquery.type,\n\t\t\t\t\t\t\tscheme,\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tconst oneSchemeQuery: ISearchQuery = {\n\t\t\t\t\t...query,\n\t\t\t\t\t...{\n\t\t\t\t\t\tfolderQueries: schemeFQs,\n\t\t\t\t\t},\n\t\t\t\t};\n\n\t\t\t\tconst doProviderSearch = () => {\n\t\t\t\t\tswitch (query.type) {\n\t\t\t\t\t\tcase QueryType.File:\n\t\t\t\t\t\t\treturn provider.fileSearch(\n\t\t\t\t\t\t\t\t<IFileQuery>oneSchemeQuery,\n\t\t\t\t\t\t\t\ttoken,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\tcase QueryType.Text:\n\t\t\t\t\t\t\treturn provider.textSearch(\n\t\t\t\t\t\t\t\t<ITextQuery>oneSchemeQuery,\n\t\t\t\t\t\t\t\tonProviderProgress,\n\t\t\t\t\t\t\t\ttoken,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\treturn provider.textSearch(\n\t\t\t\t\t\t\t\t<ITextQuery>oneSchemeQuery,\n\t\t\t\t\t\t\t\tonProviderProgress,\n\t\t\t\t\t\t\t\ttoken,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t};\n\n\t\t\t\tsearchPs.push(doProviderSearch());\n\t\t\t}),\n\t\t);\n\n\t\treturn Promise.all(searchPs).then(\n\t\t\t(completes) => {\n\t\t\t\tconst endToEndTime = e2eSW.elapsed();\n\t\t\t\tthis.logService.trace(\n\t\t\t\t\t`SearchService#search: ${endToEndTime}ms`,\n\t\t\t\t);\n\t\t\t\tcompletes.forEach((complete) => {\n\t\t\t\t\tthis.sendTelemetry(query, endToEndTime, complete);\n\t\t\t\t});\n\t\t\t\treturn completes;\n\t\t\t},\n\t\t\t(err) => {\n\t\t\t\tconst endToEndTime = e2eSW.elapsed();\n\t\t\t\tthis.logService.trace(\n\t\t\t\t\t`SearchService#search: ${endToEndTime}ms`,\n\t\t\t\t);\n\t\t\t\tconst searchError = deserializeSearchError(err);\n\t\t\t\tthis.logService.trace(\n\t\t\t\t\t`SearchService#searchError: ${searchError.message}`,\n\t\t\t\t);\n\t\t\t\tthis.sendTelemetry(query, endToEndTime, undefined, searchError);\n\n\t\t\t\tthrow searchError;\n\t\t\t},\n\t\t);\n\t}\n\n\tprivate groupFolderQueriesByScheme(\n\t\tquery: ISearchQuery,\n\t): Map<string, IFolderQuery[]> {\n\t\tconst queries = new Map<string, IFolderQuery[]>();\n\n\t\tquery.folderQueries.forEach((fq) => {\n\t\t\tconst schemeFQs = queries.get(fq.folder.scheme) || [];\n\t\t\tschemeFQs.push(fq);\n\n\t\t\tqueries.set(fq.folder.scheme, schemeFQs);\n\t\t});\n\n\t\treturn queries;\n\t}\n\n\tprivate sendTelemetry(\n\t\tquery: ISearchQuery,\n\t\tendToEndTime: number,\n\t\tcomplete?: ISearchComplete,\n\t\terr?: SearchError,\n\t): void {\n\t\tconst fileSchemeOnly = query.folderQueries.every(\n\t\t\t(fq) => fq.folder.scheme === Schemas.file,\n\t\t);\n\t\tconst otherSchemeOnly = query.folderQueries.every(\n\t\t\t(fq) => fq.folder.scheme !== Schemas.file,\n\t\t);\n\t\tconst scheme = fileSchemeOnly\n\t\t\t? Schemas.file\n\t\t\t: otherSchemeOnly\n\t\t\t\t? \"other\"\n\t\t\t\t: \"mixed\";\n\n\t\tif (query.type === QueryType.File && complete && complete.stats) {\n\t\t\tconst fileSearchStats = complete.stats as IFileSearchStats;\n\t\t\tif (fileSearchStats.fromCache) {\n\t\t\t\tconst cacheStats: ICachedSearchStats =\n\t\t\t\t\tfileSearchStats.detailStats as ICachedSearchStats;\n\n\t\t\t\ttype CachedSearchCompleteClassifcation = {\n\t\t\t\t\towner: \"roblourens\";\n\t\t\t\t\tcomment: \"Fired when a file search is completed from previously cached results\";\n\t\t\t\t\treason?: {\n\t\t\t\t\t\tclassification: \"SystemMetaData\";\n\t\t\t\t\t\tpurpose: \"PerformanceAndHealth\";\n\t\t\t\t\t\tcomment: \"Indicates which extension or UI feature triggered this search\";\n\t\t\t\t\t};\n\t\t\t\t\tresultCount: {\n\t\t\t\t\t\tclassification: \"SystemMetaData\";\n\t\t\t\t\t\tpurpose: \"PerformanceAndHealth\";\n\t\t\t\t\t\tcomment: \"The number of search results\";\n\t\t\t\t\t};\n\t\t\t\t\tworkspaceFolderCount: {\n\t\t\t\t\t\tclassification: \"SystemMetaData\";\n\t\t\t\t\t\tpurpose: \"PerformanceAndHealth\";\n\t\t\t\t\t\tcomment: \"The number of folders in the workspace\";\n\t\t\t\t\t};\n\t\t\t\t\tendToEndTime: {\n\t\t\t\t\t\tclassification: \"SystemMetaData\";\n\t\t\t\t\t\tpurpose: \"PerformanceAndHealth\";\n\t\t\t\t\t\tcomment: \"The total search time\";\n\t\t\t\t\t};\n\t\t\t\t\tsortingTime?: {\n\t\t\t\t\t\tclassification: \"SystemMetaData\";\n\t\t\t\t\t\tpurpose: \"PerformanceAndHealth\";\n\t\t\t\t\t\tcomment: \"The amount of time spent sorting results\";\n\t\t\t\t\t};\n\t\t\t\t\tcacheWasResolved: {\n\t\t\t\t\t\tclassification: \"SystemMetaData\";\n\t\t\t\t\t\tpurpose: \"PerformanceAndHealth\";\n\t\t\t\t\t\tcomment: \"Whether the cache was already resolved when the search began\";\n\t\t\t\t\t};\n\t\t\t\t\tcacheLookupTime: {\n\t\t\t\t\t\tclassification: \"SystemMetaData\";\n\t\t\t\t\t\tpurpose: \"PerformanceAndHealth\";\n\t\t\t\t\t\tcomment: \"The amount of time spent looking up the cache to use for the search\";\n\t\t\t\t\t};\n\t\t\t\t\tcacheFilterTime: {\n\t\t\t\t\t\tclassification: \"SystemMetaData\";\n\t\t\t\t\t\tpurpose: \"PerformanceAndHealth\";\n\t\t\t\t\t\tcomment: \"The amount of time spent searching within the cache\";\n\t\t\t\t\t};\n\t\t\t\t\tcacheEntryCount: {\n\t\t\t\t\t\tclassification: \"SystemMetaData\";\n\t\t\t\t\t\tpurpose: \"PerformanceAndHealth\";\n\t\t\t\t\t\tcomment: \"The number of entries in the searched-in cache\";\n\t\t\t\t\t};\n\t\t\t\t\tscheme: {\n\t\t\t\t\t\tclassification: \"SystemMetaData\";\n\t\t\t\t\t\tpurpose: \"PerformanceAndHealth\";\n\t\t\t\t\t\tcomment: \"The uri scheme of the folder searched in\";\n\t\t\t\t\t};\n\t\t\t\t};\n\t\t\t\ttype CachedSearchCompleteEvent = {\n\t\t\t\t\treason?: string;\n\t\t\t\t\tresultCount: number;\n\t\t\t\t\tworkspaceFolderCount: number;\n\t\t\t\t\tendToEndTime: number;\n\t\t\t\t\tsortingTime?: number;\n\t\t\t\t\tcacheWasResolved: boolean;\n\t\t\t\t\tcacheLookupTime: number;\n\t\t\t\t\tcacheFilterTime: number;\n\t\t\t\t\tcacheEntryCount: number;\n\t\t\t\t\tscheme: string;\n\t\t\t\t};\n\t\t\t\tthis.telemetryService.publicLog2<\n\t\t\t\t\tCachedSearchCompleteEvent,\n\t\t\t\t\tCachedSearchCompleteClassifcation\n\t\t\t\t>(\"cachedSearchComplete\", {\n\t\t\t\t\treason: query._reason,\n\t\t\t\t\tresultCount: fileSearchStats.resultCount,\n\t\t\t\t\tworkspaceFolderCount: query.folderQueries.length,\n\t\t\t\t\tendToEndTime: endToEndTime,\n\t\t\t\t\tsortingTime: fileSearchStats.sortingTime,\n\t\t\t\t\tcacheWasResolved: cacheStats.cacheWasResolved,\n\t\t\t\t\tcacheLookupTime: cacheStats.cacheLookupTime,\n\t\t\t\t\tcacheFilterTime: cacheStats.cacheFilterTime,\n\t\t\t\t\tcacheEntryCount: cacheStats.cacheEntryCount,\n\t\t\t\t\tscheme,\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tconst searchEngineStats: ISearchEngineStats =\n\t\t\t\t\tfileSearchStats.detailStats as ISearchEngineStats;\n\n\t\t\t\ttype SearchCompleteClassification = {\n\t\t\t\t\towner: \"roblourens\";\n\t\t\t\t\tcomment: \"Fired when a file search is completed\";\n\t\t\t\t\treason?: {\n\t\t\t\t\t\tclassification: \"SystemMetaData\";\n\t\t\t\t\t\tpurpose: \"PerformanceAndHealth\";\n\t\t\t\t\t\tcomment: \"Indicates which extension or UI feature triggered this search\";\n\t\t\t\t\t};\n\t\t\t\t\tresultCount: {\n\t\t\t\t\t\tclassification: \"SystemMetaData\";\n\t\t\t\t\t\tpurpose: \"PerformanceAndHealth\";\n\t\t\t\t\t\tcomment: \"The number of search results\";\n\t\t\t\t\t};\n\t\t\t\t\tworkspaceFolderCount: {\n\t\t\t\t\t\tclassification: \"SystemMetaData\";\n\t\t\t\t\t\tpurpose: \"PerformanceAndHealth\";\n\t\t\t\t\t\tcomment: \"The number of folders in the workspace\";\n\t\t\t\t\t};\n\t\t\t\t\tendToEndTime: {\n\t\t\t\t\t\tclassification: \"SystemMetaData\";\n\t\t\t\t\t\tpurpose: \"PerformanceAndHealth\";\n\t\t\t\t\t\tcomment: \"The total search time\";\n\t\t\t\t\t};\n\t\t\t\t\tsortingTime?: {\n\t\t\t\t\t\tclassification: \"SystemMetaData\";\n\t\t\t\t\t\tpurpose: \"PerformanceAndHealth\";\n\t\t\t\t\t\tcomment: \"The amount of time spent sorting results\";\n\t\t\t\t\t};\n\t\t\t\t\tfileWalkTime: {\n\t\t\t\t\t\tclassification: \"SystemMetaData\";\n\t\t\t\t\t\tpurpose: \"PerformanceAndHealth\";\n\t\t\t\t\t\tcomment: \"The amount of time spent walking file system\";\n\t\t\t\t\t};\n\t\t\t\t\tdirectoriesWalked: {\n\t\t\t\t\t\tclassification: \"SystemMetaData\";\n\t\t\t\t\t\tpurpose: \"PerformanceAndHealth\";\n\t\t\t\t\t\tcomment: \"The number of directories walked\";\n\t\t\t\t\t};\n\t\t\t\t\tfilesWalked: {\n\t\t\t\t\t\tclassification: \"SystemMetaData\";\n\t\t\t\t\t\tpurpose: \"PerformanceAndHealth\";\n\t\t\t\t\t\tcomment: \"The number of files walked\";\n\t\t\t\t\t};\n\t\t\t\t\tcmdTime: {\n\t\t\t\t\t\tclassification: \"SystemMetaData\";\n\t\t\t\t\t\tpurpose: \"PerformanceAndHealth\";\n\t\t\t\t\t\tcomment: \"The amount of time spent running the search command\";\n\t\t\t\t\t};\n\t\t\t\t\tcmdResultCount?: {\n\t\t\t\t\t\tclassification: \"SystemMetaData\";\n\t\t\t\t\t\tpurpose: \"PerformanceAndHealth\";\n\t\t\t\t\t\tcomment: \"The number of results returned from the search command\";\n\t\t\t\t\t};\n\t\t\t\t\tscheme: {\n\t\t\t\t\t\tclassification: \"SystemMetaData\";\n\t\t\t\t\t\tpurpose: \"PerformanceAndHealth\";\n\t\t\t\t\t\tcomment: \"The uri scheme of the folder searched in\";\n\t\t\t\t\t};\n\t\t\t\t};\n\t\t\t\ttype SearchCompleteEvent = {\n\t\t\t\t\treason?: string;\n\t\t\t\t\tresultCount: number;\n\t\t\t\t\tworkspaceFolderCount: number;\n\t\t\t\t\tendToEndTime: number;\n\t\t\t\t\tsortingTime?: number;\n\t\t\t\t\tfileWalkTime: number;\n\t\t\t\t\tdirectoriesWalked: number;\n\t\t\t\t\tfilesWalked: number;\n\t\t\t\t\tcmdTime: number;\n\t\t\t\t\tcmdResultCount?: number;\n\t\t\t\t\tscheme: string;\n\t\t\t\t};\n\n\t\t\t\tthis.telemetryService.publicLog2<\n\t\t\t\t\tSearchCompleteEvent,\n\t\t\t\t\tSearchCompleteClassification\n\t\t\t\t>(\"searchComplete\", {\n\t\t\t\t\treason: query._reason,\n\t\t\t\t\tresultCount: fileSearchStats.resultCount,\n\t\t\t\t\tworkspaceFolderCount: query.folderQueries.length,\n\t\t\t\t\tendToEndTime: endToEndTime,\n\t\t\t\t\tsortingTime: fileSearchStats.sortingTime,\n\t\t\t\t\tfileWalkTime: searchEngineStats.fileWalkTime,\n\t\t\t\t\tdirectoriesWalked: searchEngineStats.directoriesWalked,\n\t\t\t\t\tfilesWalked: searchEngineStats.filesWalked,\n\t\t\t\t\tcmdTime: searchEngineStats.cmdTime,\n\t\t\t\t\tcmdResultCount: searchEngineStats.cmdResultCount,\n\t\t\t\t\tscheme,\n\t\t\t\t});\n\t\t\t}\n\t\t} else if (query.type === QueryType.Text) {\n\t\t\tlet errorType: string | undefined;\n\t\t\tif (err) {\n\t\t\t\terrorType =\n\t\t\t\t\terr.code === SearchErrorCode.regexParseError\n\t\t\t\t\t\t? \"regex\"\n\t\t\t\t\t\t: err.code === SearchErrorCode.unknownEncoding\n\t\t\t\t\t\t\t? \"encoding\"\n\t\t\t\t\t\t\t: err.code === SearchErrorCode.globParseError\n\t\t\t\t\t\t\t\t? \"glob\"\n\t\t\t\t\t\t\t\t: err.code === SearchErrorCode.invalidLiteral\n\t\t\t\t\t\t\t\t\t? \"literal\"\n\t\t\t\t\t\t\t\t\t: err.code === SearchErrorCode.other\n\t\t\t\t\t\t\t\t\t\t? \"other\"\n\t\t\t\t\t\t\t\t\t\t: err.code === SearchErrorCode.canceled\n\t\t\t\t\t\t\t\t\t\t\t? \"canceled\"\n\t\t\t\t\t\t\t\t\t\t\t: \"unknown\";\n\t\t\t}\n\n\t\t\ttype TextSearchCompleteClassification = {\n\t\t\t\towner: \"roblourens\";\n\t\t\t\tcomment: \"Fired when a text search is completed\";\n\t\t\t\treason?: {\n\t\t\t\t\tclassification: \"SystemMetaData\";\n\t\t\t\t\tpurpose: \"PerformanceAndHealth\";\n\t\t\t\t\tcomment: \"Indicates which extension or UI feature triggered this search\";\n\t\t\t\t};\n\t\t\t\tworkspaceFolderCount: {\n\t\t\t\t\tclassification: \"SystemMetaData\";\n\t\t\t\t\tpurpose: \"PerformanceAndHealth\";\n\t\t\t\t\tcomment: \"The number of folders in the workspace\";\n\t\t\t\t};\n\t\t\t\tendToEndTime: {\n\t\t\t\t\tclassification: \"SystemMetaData\";\n\t\t\t\t\tpurpose: \"PerformanceAndHealth\";\n\t\t\t\t\tcomment: \"The total search time\";\n\t\t\t\t};\n\t\t\t\tscheme: {\n\t\t\t\t\tclassification: \"SystemMetaData\";\n\t\t\t\t\tpurpose: \"PerformanceAndHealth\";\n\t\t\t\t\tcomment: \"The uri scheme of the folder searched in\";\n\t\t\t\t};\n\t\t\t\terror?: {\n\t\t\t\t\tclassification: \"SystemMetaData\";\n\t\t\t\t\tpurpose: \"PerformanceAndHealth\";\n\t\t\t\t\tcomment: \"The type of the error, if any\";\n\t\t\t\t};\n\t\t\t};\n\t\t\ttype TextSearchCompleteEvent = {\n\t\t\t\treason?: string;\n\t\t\t\tworkspaceFolderCount: number;\n\t\t\t\tendToEndTime: number;\n\t\t\t\tscheme: string;\n\t\t\t\terror?: string;\n\t\t\t};\n\t\t\tthis.telemetryService.publicLog2<\n\t\t\t\tTextSearchCompleteEvent,\n\t\t\t\tTextSearchCompleteClassification\n\t\t\t>(\"textSearchComplete\", {\n\t\t\t\treason: query._reason,\n\t\t\t\tworkspaceFolderCount: query.folderQueries.length,\n\t\t\t\tendToEndTime: endToEndTime,\n\t\t\t\tscheme,\n\t\t\t\terror: errorType,\n\t\t\t});\n\t\t}\n\t}\n\n\tprivate getOpenEditorResults(query: ITextQuery): {\n\t\tresults: ResourceMap<IFileMatch | null>;\n\t\tlimitHit: boolean;\n\t} {\n\t\tconst openEditorResults = new ResourceMap<IFileMatch | null>((uri) =>\n\t\t\tthis.uriIdentityService.extUri.getComparisonKey(uri),\n\t\t);\n\t\tlet limitHit = false;\n\n\t\tif (query.type === QueryType.Text) {\n\t\t\tconst canonicalToOriginalResources = new ResourceMap<URI>();\n\t\t\tfor (const editorInput of this.editorService.editors) {\n\t\t\t\tconst canonical = EditorResourceAccessor.getCanonicalUri(\n\t\t\t\t\teditorInput,\n\t\t\t\t\t{ supportSideBySide: SideBySideEditor.PRIMARY },\n\t\t\t\t);\n\t\t\t\tconst original = EditorResourceAccessor.getOriginalUri(\n\t\t\t\t\teditorInput,\n\t\t\t\t\t{ supportSideBySide: SideBySideEditor.PRIMARY },\n\t\t\t\t);\n\n\t\t\t\tif (canonical) {\n\t\t\t\t\tcanonicalToOriginalResources.set(\n\t\t\t\t\t\tcanonical,\n\t\t\t\t\t\toriginal ?? canonical,\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst models = this.modelService.getModels();\n\t\t\tmodels.forEach((model) => {\n\t\t\t\tconst resource = model.uri;\n\t\t\t\tif (!resource) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (limitHit) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst originalResource =\n\t\t\t\t\tcanonicalToOriginalResources.get(resource);\n\t\t\t\tif (!originalResource) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// Skip search results\n\t\t\t\tif (\n\t\t\t\t\tmodel.getLanguageId() === SEARCH_RESULT_LANGUAGE_ID &&\n\t\t\t\t\t!(\n\t\t\t\t\t\tquery.includePattern &&\n\t\t\t\t\t\tquery.includePattern[\"**/*.code-search\"]\n\t\t\t\t\t)\n\t\t\t\t) {\n\t\t\t\t\t// TODO: untitled search editors will be excluded from search even when include *.code-search is specified\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// Block walkthrough, webview, etc.\n\t\t\t\tif (\n\t\t\t\t\toriginalResource.scheme !== Schemas.untitled &&\n\t\t\t\t\t!this.fileService.hasProvider(originalResource)\n\t\t\t\t) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// Exclude files from the git FileSystemProvider, e.g. to prevent open staged files from showing in search results\n\t\t\t\tif (originalResource.scheme === \"git\") {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (!this.matches(originalResource, query)) {\n\t\t\t\t\treturn; // respect user filters\n\t\t\t\t}\n\n\t\t\t\t// Use editor API to find matches\n\t\t\t\tconst askMax =\n\t\t\t\t\t(isNumber(query.maxResults)\n\t\t\t\t\t\t? query.maxResults\n\t\t\t\t\t\t: DEFAULT_MAX_SEARCH_RESULTS) + 1;\n\t\t\t\tlet matches = model.findMatches(\n\t\t\t\t\tquery.contentPattern.pattern,\n\t\t\t\t\tfalse,\n\t\t\t\t\t!!query.contentPattern.isRegExp,\n\t\t\t\t\t!!query.contentPattern.isCaseSensitive,\n\t\t\t\t\tquery.contentPattern.isWordMatch\n\t\t\t\t\t\t? query.contentPattern.wordSeparators!\n\t\t\t\t\t\t: null,\n\t\t\t\t\tfalse,\n\t\t\t\t\taskMax,\n\t\t\t\t);\n\t\t\t\tif (matches.length) {\n\t\t\t\t\tif (askMax && matches.length >= askMax) {\n\t\t\t\t\t\tlimitHit = true;\n\t\t\t\t\t\tmatches = matches.slice(0, askMax - 1);\n\t\t\t\t\t}\n\n\t\t\t\t\tconst fileMatch = new FileMatch(originalResource);\n\t\t\t\t\topenEditorResults.set(originalResource, fileMatch);\n\n\t\t\t\t\tconst textSearchResults = editorMatchesToTextSearchResults(\n\t\t\t\t\t\tmatches,\n\t\t\t\t\t\tmodel,\n\t\t\t\t\t\tquery.previewOptions,\n\t\t\t\t\t);\n\t\t\t\t\tfileMatch.results = getTextSearchMatchWithModelContext(\n\t\t\t\t\t\ttextSearchResults,\n\t\t\t\t\t\tmodel,\n\t\t\t\t\t\tquery,\n\t\t\t\t\t);\n\t\t\t\t} else {\n\t\t\t\t\topenEditorResults.set(originalResource, null);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\treturn {\n\t\t\tresults: openEditorResults,\n\t\t\tlimitHit,\n\t\t};\n\t}\n\n\tprivate matches(resource: uri, query: ITextQuery): boolean {\n\t\treturn pathIncludedInQuery(query, resource.fsPath);\n\t}\n\n\tasync clearCache(cacheKey: string): Promise<void> {\n\t\tconst clearPs = Array.from(this.fileSearchProviders.values()).map(\n\t\t\t(provider) => provider && provider.clearCache(cacheKey),\n\t\t);\n\t\tawait Promise.all(clearPs);\n\t}\n}\n"],
  "mappings": "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",
  "names": ["query"]
}
