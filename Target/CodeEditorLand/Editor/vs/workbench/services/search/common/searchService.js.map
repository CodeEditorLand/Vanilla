{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/search/common/searchService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as arrays from '../../../../base/common/arrays.js';\nimport { DeferredPromise, raceCancellationError } from '../../../../base/common/async.js';\nimport { CancellationToken } from '../../../../base/common/cancellation.js';\nimport { CancellationError } from '../../../../base/common/errors.js';\nimport { Disposable, IDisposable, toDisposable } from '../../../../base/common/lifecycle.js';\nimport { ResourceMap, ResourceSet } from '../../../../base/common/map.js';\nimport { Schemas } from '../../../../base/common/network.js';\nimport { StopWatch } from '../../../../base/common/stopwatch.js';\nimport { isNumber } from '../../../../base/common/types.js';\nimport { URI, URI as uri } from '../../../../base/common/uri.js';\nimport { IModelService } from '../../../../editor/common/services/model.js';\nimport { IFileService } from '../../../../platform/files/common/files.js';\nimport { ILogService } from '../../../../platform/log/common/log.js';\nimport { ITelemetryService } from '../../../../platform/telemetry/common/telemetry.js';\nimport { IUriIdentityService } from '../../../../platform/uriIdentity/common/uriIdentity.js';\nimport { EditorResourceAccessor, SideBySideEditor } from '../../../common/editor.js';\nimport { IEditorService } from '../../editor/common/editorService.js';\nimport { IExtensionService } from '../../extensions/common/extensions.js';\nimport { DEFAULT_MAX_SEARCH_RESULTS, deserializeSearchError, FileMatch, IAITextQuery, ICachedSearchStats, IFileMatch, IFileQuery, IFileSearchStats, IFolderQuery, IProgressMessage, ISearchComplete, ISearchEngineStats, ISearchProgressItem, ISearchQuery, ISearchResultProvider, ISearchService, isFileMatch, isProgressMessage, ITextQuery, pathIncludedInQuery, QueryType, SEARCH_RESULT_LANGUAGE_ID, SearchError, SearchErrorCode, SearchProviderType } from './search.js';\nimport { getTextSearchMatchWithModelContext, editorMatchesToTextSearchResults } from './searchHelpers.js';\n\nexport class SearchService extends Disposable implements ISearchService {\n\n\tdeclare readonly _serviceBrand: undefined;\n\n\tprivate readonly fileSearchProviders = new Map<string, ISearchResultProvider>();\n\tprivate readonly textSearchProviders = new Map<string, ISearchResultProvider>();\n\tprivate readonly aiTextSearchProviders = new Map<string, ISearchResultProvider>();\n\n\tprivate deferredFileSearchesByScheme = new Map<string, DeferredPromise<ISearchResultProvider>>();\n\tprivate deferredTextSearchesByScheme = new Map<string, DeferredPromise<ISearchResultProvider>>();\n\tprivate deferredAITextSearchesByScheme = new Map<string, DeferredPromise<ISearchResultProvider>>();\n\n\tprivate loggedSchemesMissingProviders = new Set<string>();\n\n\tconstructor(\n\t\t@IModelService private readonly modelService: IModelService,\n\t\t@IEditorService private readonly editorService: IEditorService,\n\t\t@ITelemetryService private readonly telemetryService: ITelemetryService,\n\t\t@ILogService private readonly logService: ILogService,\n\t\t@IExtensionService private readonly extensionService: IExtensionService,\n\t\t@IFileService private readonly fileService: IFileService,\n\t\t@IUriIdentityService private readonly uriIdentityService: IUriIdentityService,\n\t) {\n\t\tsuper();\n\t}\n\n\tregisterSearchResultProvider(scheme: string, type: SearchProviderType, provider: ISearchResultProvider): IDisposable {\n\t\tlet list: Map<string, ISearchResultProvider>;\n\t\tlet deferredMap: Map<string, DeferredPromise<ISearchResultProvider>>;\n\t\tif (type === SearchProviderType.file) {\n\t\t\tlist = this.fileSearchProviders;\n\t\t\tdeferredMap = this.deferredFileSearchesByScheme;\n\t\t} else if (type === SearchProviderType.text) {\n\t\t\tlist = this.textSearchProviders;\n\t\t\tdeferredMap = this.deferredTextSearchesByScheme;\n\t\t} else if (type === SearchProviderType.aiText) {\n\t\t\tlist = this.aiTextSearchProviders;\n\t\t\tdeferredMap = this.deferredAITextSearchesByScheme;\n\t\t} else {\n\t\t\tthrow new Error('Unknown SearchProviderType');\n\t\t}\n\n\t\tlist.set(scheme, provider);\n\n\t\tif (deferredMap.has(scheme)) {\n\t\t\tdeferredMap.get(scheme)!.complete(provider);\n\t\t\tdeferredMap.delete(scheme);\n\t\t}\n\n\t\treturn toDisposable(() => {\n\t\t\tlist.delete(scheme);\n\t\t});\n\t}\n\n\tasync textSearch(query: ITextQuery, token?: CancellationToken, onProgress?: (item: ISearchProgressItem) => void): Promise<ISearchComplete> {\n\t\tconst results = this.textSearchSplitSyncAsync(query, token, onProgress);\n\t\tconst openEditorResults = results.syncResults;\n\t\tconst otherResults = await results.asyncResults;\n\t\treturn {\n\t\t\tlimitHit: otherResults.limitHit || openEditorResults.limitHit,\n\t\t\tresults: [...otherResults.results, ...openEditorResults.results],\n\t\t\tmessages: [...otherResults.messages, ...openEditorResults.messages]\n\t\t};\n\t}\n\n\tasync aiTextSearch(query: IAITextQuery, token?: CancellationToken, onProgress?: (item: ISearchProgressItem) => void): Promise<ISearchComplete> {\n\t\tconst onProviderProgress = (progress: ISearchProgressItem) => {\n\t\t\t// Match\n\t\t\tif (onProgress) { // don't override open editor results\n\t\t\t\tif (isFileMatch(progress)) {\n\t\t\t\t\tonProgress(progress);\n\t\t\t\t} else {\n\t\t\t\t\tonProgress(<IProgressMessage>progress);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (isProgressMessage(progress)) {\n\t\t\t\tthis.logService.debug('SearchService#search', progress.message);\n\t\t\t}\n\t\t};\n\t\treturn this.doSearch(query, token, onProviderProgress);\n\t}\n\n\ttextSearchSplitSyncAsync(\n\t\tquery: ITextQuery,\n\t\ttoken?: CancellationToken | undefined,\n\t\tonProgress?: ((result: ISearchProgressItem) => void) | undefined,\n\t\tnotebookFilesToIgnore?: ResourceSet,\n\t\tasyncNotebookFilesToIgnore?: Promise<ResourceSet>\n\t): {\n\t\tsyncResults: ISearchComplete;\n\t\tasyncResults: Promise<ISearchComplete>;\n\t} {\n\t\t// Get open editor results from dirty/untitled\n\t\tconst openEditorResults = this.getOpenEditorResults(query);\n\n\t\tif (onProgress) {\n\t\t\tarrays.coalesce([...openEditorResults.results.values()]).filter(e => !(notebookFilesToIgnore && notebookFilesToIgnore.has(e.resource))).forEach(onProgress);\n\t\t}\n\n\t\tconst syncResults: ISearchComplete = {\n\t\t\tresults: arrays.coalesce([...openEditorResults.results.values()]),\n\t\t\tlimitHit: openEditorResults.limitHit ?? false,\n\t\t\tmessages: []\n\t\t};\n\n\t\tconst getAsyncResults = async () => {\n\t\t\tconst resolvedAsyncNotebookFilesToIgnore = await asyncNotebookFilesToIgnore ?? new ResourceSet();\n\t\t\tconst onProviderProgress = (progress: ISearchProgressItem) => {\n\t\t\t\tif (isFileMatch(progress)) {\n\t\t\t\t\t// Match\n\t\t\t\t\tif (!openEditorResults.results.has(progress.resource) && !resolvedAsyncNotebookFilesToIgnore.has(progress.resource) && onProgress) { // don't override open editor results\n\t\t\t\t\t\tonProgress(progress);\n\t\t\t\t\t}\n\t\t\t\t} else if (onProgress) {\n\t\t\t\t\t// Progress\n\t\t\t\t\tonProgress(<IProgressMessage>progress);\n\t\t\t\t}\n\n\t\t\t\tif (isProgressMessage(progress)) {\n\t\t\t\t\tthis.logService.debug('SearchService#search', progress.message);\n\t\t\t\t}\n\t\t\t};\n\t\t\treturn await this.doSearch(query, token, onProviderProgress);\n\t\t};\n\n\t\treturn {\n\t\t\tsyncResults,\n\t\t\tasyncResults: getAsyncResults()\n\t\t};\n\t}\n\n\tfileSearch(query: IFileQuery, token?: CancellationToken): Promise<ISearchComplete> {\n\t\treturn this.doSearch(query, token);\n\t}\n\n\tprivate doSearch(query: ISearchQuery, token?: CancellationToken, onProgress?: (item: ISearchProgressItem) => void): Promise<ISearchComplete> {\n\t\tthis.logService.trace('SearchService#search', JSON.stringify(query));\n\n\t\tconst schemesInQuery = this.getSchemesInQuery(query);\n\n\t\tconst providerActivations: Promise<any>[] = [Promise.resolve(null)];\n\t\tschemesInQuery.forEach(scheme => providerActivations.push(this.extensionService.activateByEvent(`onSearch:${scheme}`)));\n\t\tproviderActivations.push(this.extensionService.activateByEvent('onSearch:file'));\n\n\t\tconst providerPromise = (async () => {\n\t\t\tawait Promise.all(providerActivations);\n\t\t\tawait this.extensionService.whenInstalledExtensionsRegistered();\n\n\t\t\t// Cancel faster if search was canceled while waiting for extensions\n\t\t\tif (token && token.isCancellationRequested) {\n\t\t\t\treturn Promise.reject(new CancellationError());\n\t\t\t}\n\n\t\t\tconst progressCallback = (item: ISearchProgressItem) => {\n\t\t\t\tif (token && token.isCancellationRequested) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tonProgress?.(item);\n\t\t\t};\n\n\t\t\tconst exists = await Promise.all(query.folderQueries.map(query => this.fileService.exists(query.folder)));\n\t\t\tquery.folderQueries = query.folderQueries.filter((_, i) => exists[i]);\n\n\t\t\tlet completes = await this.searchWithProviders(query, progressCallback, token);\n\t\t\tcompletes = arrays.coalesce(completes);\n\t\t\tif (!completes.length) {\n\t\t\t\treturn {\n\t\t\t\t\tlimitHit: false,\n\t\t\t\t\tresults: [],\n\t\t\t\t\tmessages: [],\n\t\t\t\t};\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\tlimitHit: completes[0] && completes[0].limitHit,\n\t\t\t\tstats: completes[0].stats,\n\t\t\t\tmessages: arrays.coalesce(completes.flatMap(i => i.messages)).filter(arrays.uniqueFilter(message => message.type + message.text + message.trusted)),\n\t\t\t\tresults: completes.flatMap((c: ISearchComplete) => c.results)\n\t\t\t};\n\t\t})();\n\n\t\treturn token ? raceCancellationError<ISearchComplete>(providerPromise, token) : providerPromise;\n\t}\n\n\tprivate getSchemesInQuery(query: ISearchQuery): Set<string> {\n\t\tconst schemes = new Set<string>();\n\t\tquery.folderQueries?.forEach(fq => schemes.add(fq.folder.scheme));\n\n\t\tquery.extraFileResources?.forEach(extraFile => schemes.add(extraFile.scheme));\n\n\t\treturn schemes;\n\t}\n\n\tprivate async waitForProvider(queryType: QueryType, scheme: string): Promise<ISearchResultProvider> {\n\t\tconst deferredMap: Map<string, DeferredPromise<ISearchResultProvider>> = this.getDeferredTextSearchesByScheme(queryType);\n\n\t\tif (deferredMap.has(scheme)) {\n\t\t\treturn deferredMap.get(scheme)!.p;\n\t\t} else {\n\t\t\tconst deferred = new DeferredPromise<ISearchResultProvider>();\n\t\t\tdeferredMap.set(scheme, deferred);\n\t\t\treturn deferred.p;\n\t\t}\n\t}\n\n\tprivate getSearchProvider(type: QueryType): Map<string, ISearchResultProvider> {\n\t\tswitch (type) {\n\t\t\tcase QueryType.File:\n\t\t\t\treturn this.fileSearchProviders;\n\t\t\tcase QueryType.Text:\n\t\t\t\treturn this.textSearchProviders;\n\t\t\tcase QueryType.aiText:\n\t\t\t\treturn this.aiTextSearchProviders;\n\t\t\tdefault:\n\t\t\t\tthrow new Error(`Unknown query type: ${type}`);\n\t\t}\n\t}\n\n\tprivate getDeferredTextSearchesByScheme(type: QueryType): Map<string, DeferredPromise<ISearchResultProvider>> {\n\t\tswitch (type) {\n\t\t\tcase QueryType.File:\n\t\t\t\treturn this.deferredFileSearchesByScheme;\n\t\t\tcase QueryType.Text:\n\t\t\t\treturn this.deferredTextSearchesByScheme;\n\t\t\tcase QueryType.aiText:\n\t\t\t\treturn this.deferredAITextSearchesByScheme;\n\t\t\tdefault:\n\t\t\t\tthrow new Error(`Unknown query type: ${type}`);\n\t\t}\n\t}\n\n\tprivate async searchWithProviders(query: ISearchQuery, onProviderProgress: (progress: ISearchProgressItem) => void, token?: CancellationToken) {\n\t\tconst e2eSW = StopWatch.create(false);\n\n\t\tconst searchPs: Promise<ISearchComplete>[] = [];\n\n\t\tconst fqs = this.groupFolderQueriesByScheme(query);\n\t\tconst someSchemeHasProvider = [...fqs.keys()].some(scheme => {\n\t\t\treturn this.getSearchProvider(query.type).has(scheme);\n\t\t});\n\n\t\tif (query.type === QueryType.aiText && !someSchemeHasProvider) {\n\t\t\treturn [];\n\t\t}\n\t\tawait Promise.all([...fqs.keys()].map(async scheme => {\n\t\t\tif (query.onlyFileScheme && scheme !== Schemas.file) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst schemeFQs = fqs.get(scheme)!;\n\t\t\tlet provider = this.getSearchProvider(query.type).get(scheme);\n\n\t\t\tif (!provider) {\n\t\t\t\tif (someSchemeHasProvider) {\n\t\t\t\t\tif (!this.loggedSchemesMissingProviders.has(scheme)) {\n\t\t\t\t\t\tthis.logService.warn(`No search provider registered for scheme: ${scheme}. Another scheme has a provider, not waiting for ${scheme}`);\n\t\t\t\t\t\tthis.loggedSchemesMissingProviders.add(scheme);\n\t\t\t\t\t}\n\t\t\t\t\treturn;\n\t\t\t\t} else {\n\t\t\t\t\tif (!this.loggedSchemesMissingProviders.has(scheme)) {\n\t\t\t\t\t\tthis.logService.warn(`No search provider registered for scheme: ${scheme}, waiting`);\n\t\t\t\t\t\tthis.loggedSchemesMissingProviders.add(scheme);\n\t\t\t\t\t}\n\t\t\t\t\tprovider = await this.waitForProvider(query.type, scheme);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst oneSchemeQuery: ISearchQuery = {\n\t\t\t\t...query,\n\t\t\t\t...{\n\t\t\t\t\tfolderQueries: schemeFQs\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tconst doProviderSearch = () => {\n\t\t\t\tswitch (query.type) {\n\t\t\t\t\tcase QueryType.File:\n\t\t\t\t\t\treturn provider.fileSearch(<IFileQuery>oneSchemeQuery, token);\n\t\t\t\t\tcase QueryType.Text:\n\t\t\t\t\t\treturn provider.textSearch(<ITextQuery>oneSchemeQuery, onProviderProgress, token);\n\t\t\t\t\tdefault:\n\t\t\t\t\t\treturn provider.textSearch(<ITextQuery>oneSchemeQuery, onProviderProgress, token);\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tsearchPs.push(doProviderSearch());\n\t\t}));\n\n\t\treturn Promise.all(searchPs).then(completes => {\n\t\t\tconst endToEndTime = e2eSW.elapsed();\n\t\t\tthis.logService.trace(`SearchService#search: ${endToEndTime}ms`);\n\t\t\tcompletes.forEach(complete => {\n\t\t\t\tthis.sendTelemetry(query, endToEndTime, complete);\n\t\t\t});\n\t\t\treturn completes;\n\t\t}, err => {\n\t\t\tconst endToEndTime = e2eSW.elapsed();\n\t\t\tthis.logService.trace(`SearchService#search: ${endToEndTime}ms`);\n\t\t\tconst searchError = deserializeSearchError(err);\n\t\t\tthis.logService.trace(`SearchService#searchError: ${searchError.message}`);\n\t\t\tthis.sendTelemetry(query, endToEndTime, undefined, searchError);\n\n\t\t\tthrow searchError;\n\t\t});\n\t}\n\n\tprivate groupFolderQueriesByScheme(query: ISearchQuery): Map<string, IFolderQuery[]> {\n\t\tconst queries = new Map<string, IFolderQuery[]>();\n\n\t\tquery.folderQueries.forEach(fq => {\n\t\t\tconst schemeFQs = queries.get(fq.folder.scheme) || [];\n\t\t\tschemeFQs.push(fq);\n\n\t\t\tqueries.set(fq.folder.scheme, schemeFQs);\n\t\t});\n\n\t\treturn queries;\n\t}\n\n\tprivate sendTelemetry(query: ISearchQuery, endToEndTime: number, complete?: ISearchComplete, err?: SearchError): void {\n\t\tconst fileSchemeOnly = query.folderQueries.every(fq => fq.folder.scheme === Schemas.file);\n\t\tconst otherSchemeOnly = query.folderQueries.every(fq => fq.folder.scheme !== Schemas.file);\n\t\tconst scheme = fileSchemeOnly ? Schemas.file :\n\t\t\totherSchemeOnly ? 'other' :\n\t\t\t\t'mixed';\n\n\t\tif (query.type === QueryType.File && complete && complete.stats) {\n\t\t\tconst fileSearchStats = complete.stats as IFileSearchStats;\n\t\t\tif (fileSearchStats.fromCache) {\n\t\t\t\tconst cacheStats: ICachedSearchStats = fileSearchStats.detailStats as ICachedSearchStats;\n\n\t\t\t\ttype CachedSearchCompleteClassifcation = {\n\t\t\t\t\towner: 'roblourens';\n\t\t\t\t\tcomment: 'Fired when a file search is completed from previously cached results';\n\t\t\t\t\treason?: { classification: 'SystemMetaData'; purpose: 'PerformanceAndHealth'; comment: 'Indicates which extension or UI feature triggered this search' };\n\t\t\t\t\tresultCount: { classification: 'SystemMetaData'; purpose: 'PerformanceAndHealth'; comment: 'The number of search results' };\n\t\t\t\t\tworkspaceFolderCount: { classification: 'SystemMetaData'; purpose: 'PerformanceAndHealth'; comment: 'The number of folders in the workspace' };\n\t\t\t\t\tendToEndTime: { classification: 'SystemMetaData'; purpose: 'PerformanceAndHealth'; comment: 'The total search time' };\n\t\t\t\t\tsortingTime?: { classification: 'SystemMetaData'; purpose: 'PerformanceAndHealth'; comment: 'The amount of time spent sorting results' };\n\t\t\t\t\tcacheWasResolved: { classification: 'SystemMetaData'; purpose: 'PerformanceAndHealth'; comment: 'Whether the cache was already resolved when the search began' };\n\t\t\t\t\tcacheLookupTime: { classification: 'SystemMetaData'; purpose: 'PerformanceAndHealth'; comment: 'The amount of time spent looking up the cache to use for the search' };\n\t\t\t\t\tcacheFilterTime: { classification: 'SystemMetaData'; purpose: 'PerformanceAndHealth'; comment: 'The amount of time spent searching within the cache' };\n\t\t\t\t\tcacheEntryCount: { classification: 'SystemMetaData'; purpose: 'PerformanceAndHealth'; comment: 'The number of entries in the searched-in cache' };\n\t\t\t\t\tscheme: { classification: 'SystemMetaData'; purpose: 'PerformanceAndHealth'; comment: 'The uri scheme of the folder searched in' };\n\t\t\t\t};\n\t\t\t\ttype CachedSearchCompleteEvent = {\n\t\t\t\t\treason?: string;\n\t\t\t\t\tresultCount: number;\n\t\t\t\t\tworkspaceFolderCount: number;\n\t\t\t\t\tendToEndTime: number;\n\t\t\t\t\tsortingTime?: number;\n\t\t\t\t\tcacheWasResolved: boolean;\n\t\t\t\t\tcacheLookupTime: number;\n\t\t\t\t\tcacheFilterTime: number;\n\t\t\t\t\tcacheEntryCount: number;\n\t\t\t\t\tscheme: string;\n\t\t\t\t};\n\t\t\t\tthis.telemetryService.publicLog2<CachedSearchCompleteEvent, CachedSearchCompleteClassifcation>('cachedSearchComplete', {\n\t\t\t\t\treason: query._reason,\n\t\t\t\t\tresultCount: fileSearchStats.resultCount,\n\t\t\t\t\tworkspaceFolderCount: query.folderQueries.length,\n\t\t\t\t\tendToEndTime: endToEndTime,\n\t\t\t\t\tsortingTime: fileSearchStats.sortingTime,\n\t\t\t\t\tcacheWasResolved: cacheStats.cacheWasResolved,\n\t\t\t\t\tcacheLookupTime: cacheStats.cacheLookupTime,\n\t\t\t\t\tcacheFilterTime: cacheStats.cacheFilterTime,\n\t\t\t\t\tcacheEntryCount: cacheStats.cacheEntryCount,\n\t\t\t\t\tscheme\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tconst searchEngineStats: ISearchEngineStats = fileSearchStats.detailStats as ISearchEngineStats;\n\n\t\t\t\ttype SearchCompleteClassification = {\n\t\t\t\t\towner: 'roblourens';\n\t\t\t\t\tcomment: 'Fired when a file search is completed';\n\t\t\t\t\treason?: { classification: 'SystemMetaData'; purpose: 'PerformanceAndHealth'; comment: 'Indicates which extension or UI feature triggered this search' };\n\t\t\t\t\tresultCount: { classification: 'SystemMetaData'; purpose: 'PerformanceAndHealth'; comment: 'The number of search results' };\n\t\t\t\t\tworkspaceFolderCount: { classification: 'SystemMetaData'; purpose: 'PerformanceAndHealth'; comment: 'The number of folders in the workspace' };\n\t\t\t\t\tendToEndTime: { classification: 'SystemMetaData'; purpose: 'PerformanceAndHealth'; comment: 'The total search time' };\n\t\t\t\t\tsortingTime?: { classification: 'SystemMetaData'; purpose: 'PerformanceAndHealth'; comment: 'The amount of time spent sorting results' };\n\t\t\t\t\tfileWalkTime: { classification: 'SystemMetaData'; purpose: 'PerformanceAndHealth'; comment: 'The amount of time spent walking file system' };\n\t\t\t\t\tdirectoriesWalked: { classification: 'SystemMetaData'; purpose: 'PerformanceAndHealth'; comment: 'The number of directories walked' };\n\t\t\t\t\tfilesWalked: { classification: 'SystemMetaData'; purpose: 'PerformanceAndHealth'; comment: 'The number of files walked' };\n\t\t\t\t\tcmdTime: { classification: 'SystemMetaData'; purpose: 'PerformanceAndHealth'; comment: 'The amount of time spent running the search command' };\n\t\t\t\t\tcmdResultCount?: { classification: 'SystemMetaData'; purpose: 'PerformanceAndHealth'; comment: 'The number of results returned from the search command' };\n\t\t\t\t\tscheme: { classification: 'SystemMetaData'; purpose: 'PerformanceAndHealth'; comment: 'The uri scheme of the folder searched in' };\n\t\t\t\t};\n\t\t\t\ttype SearchCompleteEvent = {\n\t\t\t\t\treason?: string;\n\t\t\t\t\tresultCount: number;\n\t\t\t\t\tworkspaceFolderCount: number;\n\t\t\t\t\tendToEndTime: number;\n\t\t\t\t\tsortingTime?: number;\n\t\t\t\t\tfileWalkTime: number;\n\t\t\t\t\tdirectoriesWalked: number;\n\t\t\t\t\tfilesWalked: number;\n\t\t\t\t\tcmdTime: number;\n\t\t\t\t\tcmdResultCount?: number;\n\t\t\t\t\tscheme: string;\n\n\t\t\t\t};\n\n\t\t\t\tthis.telemetryService.publicLog2<SearchCompleteEvent, SearchCompleteClassification>('searchComplete', {\n\t\t\t\t\treason: query._reason,\n\t\t\t\t\tresultCount: fileSearchStats.resultCount,\n\t\t\t\t\tworkspaceFolderCount: query.folderQueries.length,\n\t\t\t\t\tendToEndTime: endToEndTime,\n\t\t\t\t\tsortingTime: fileSearchStats.sortingTime,\n\t\t\t\t\tfileWalkTime: searchEngineStats.fileWalkTime,\n\t\t\t\t\tdirectoriesWalked: searchEngineStats.directoriesWalked,\n\t\t\t\t\tfilesWalked: searchEngineStats.filesWalked,\n\t\t\t\t\tcmdTime: searchEngineStats.cmdTime,\n\t\t\t\t\tcmdResultCount: searchEngineStats.cmdResultCount,\n\t\t\t\t\tscheme\n\t\t\t\t});\n\t\t\t}\n\t\t} else if (query.type === QueryType.Text) {\n\t\t\tlet errorType: string | undefined;\n\t\t\tif (err) {\n\t\t\t\terrorType = err.code === SearchErrorCode.regexParseError ? 'regex' :\n\t\t\t\t\terr.code === SearchErrorCode.unknownEncoding ? 'encoding' :\n\t\t\t\t\t\terr.code === SearchErrorCode.globParseError ? 'glob' :\n\t\t\t\t\t\t\terr.code === SearchErrorCode.invalidLiteral ? 'literal' :\n\t\t\t\t\t\t\t\terr.code === SearchErrorCode.other ? 'other' :\n\t\t\t\t\t\t\t\t\terr.code === SearchErrorCode.canceled ? 'canceled' :\n\t\t\t\t\t\t\t\t\t\t'unknown';\n\t\t\t}\n\n\t\t\ttype TextSearchCompleteClassification = {\n\t\t\t\towner: 'roblourens';\n\t\t\t\tcomment: 'Fired when a text search is completed';\n\t\t\t\treason?: { classification: 'SystemMetaData'; purpose: 'PerformanceAndHealth'; comment: 'Indicates which extension or UI feature triggered this search' };\n\t\t\t\tworkspaceFolderCount: { classification: 'SystemMetaData'; purpose: 'PerformanceAndHealth'; comment: 'The number of folders in the workspace' };\n\t\t\t\tendToEndTime: { classification: 'SystemMetaData'; purpose: 'PerformanceAndHealth'; comment: 'The total search time' };\n\t\t\t\tscheme: { classification: 'SystemMetaData'; purpose: 'PerformanceAndHealth'; comment: 'The uri scheme of the folder searched in' };\n\t\t\t\terror?: { classification: 'SystemMetaData'; purpose: 'PerformanceAndHealth'; comment: 'The type of the error, if any' };\n\t\t\t};\n\t\t\ttype TextSearchCompleteEvent = {\n\t\t\t\treason?: string;\n\t\t\t\tworkspaceFolderCount: number;\n\t\t\t\tendToEndTime: number;\n\t\t\t\tscheme: string;\n\t\t\t\terror?: string;\n\t\t\t};\n\t\t\tthis.telemetryService.publicLog2<TextSearchCompleteEvent, TextSearchCompleteClassification>('textSearchComplete', {\n\t\t\t\treason: query._reason,\n\t\t\t\tworkspaceFolderCount: query.folderQueries.length,\n\t\t\t\tendToEndTime: endToEndTime,\n\t\t\t\tscheme,\n\t\t\t\terror: errorType,\n\t\t\t});\n\t\t}\n\t}\n\n\tprivate getOpenEditorResults(query: ITextQuery): { results: ResourceMap<IFileMatch | null>; limitHit: boolean } {\n\t\tconst openEditorResults = new ResourceMap<IFileMatch | null>(uri => this.uriIdentityService.extUri.getComparisonKey(uri));\n\t\tlet limitHit = false;\n\n\t\tif (query.type === QueryType.Text) {\n\t\t\tconst canonicalToOriginalResources = new ResourceMap<URI>();\n\t\t\tfor (const editorInput of this.editorService.editors) {\n\t\t\t\tconst canonical = EditorResourceAccessor.getCanonicalUri(editorInput, { supportSideBySide: SideBySideEditor.PRIMARY });\n\t\t\t\tconst original = EditorResourceAccessor.getOriginalUri(editorInput, { supportSideBySide: SideBySideEditor.PRIMARY });\n\n\t\t\t\tif (canonical) {\n\t\t\t\t\tcanonicalToOriginalResources.set(canonical, original ?? canonical);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst models = this.modelService.getModels();\n\t\t\tmodels.forEach((model) => {\n\t\t\t\tconst resource = model.uri;\n\t\t\t\tif (!resource) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (limitHit) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst originalResource = canonicalToOriginalResources.get(resource);\n\t\t\t\tif (!originalResource) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// Skip search results\n\t\t\t\tif (model.getLanguageId() === SEARCH_RESULT_LANGUAGE_ID && !(query.includePattern && query.includePattern['**/*.code-search'])) {\n\t\t\t\t\t// TODO: untitled search editors will be excluded from search even when include *.code-search is specified\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// Block walkthrough, webview, etc.\n\t\t\t\tif (originalResource.scheme !== Schemas.untitled && !this.fileService.hasProvider(originalResource)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// Exclude files from the git FileSystemProvider, e.g. to prevent open staged files from showing in search results\n\t\t\t\tif (originalResource.scheme === 'git') {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (!this.matches(originalResource, query)) {\n\t\t\t\t\treturn; // respect user filters\n\t\t\t\t}\n\n\t\t\t\t// Use editor API to find matches\n\t\t\t\tconst askMax = (isNumber(query.maxResults) ? query.maxResults : DEFAULT_MAX_SEARCH_RESULTS) + 1;\n\t\t\t\tlet matches = model.findMatches(query.contentPattern.pattern, false, !!query.contentPattern.isRegExp, !!query.contentPattern.isCaseSensitive, query.contentPattern.isWordMatch ? query.contentPattern.wordSeparators! : null, false, askMax);\n\t\t\t\tif (matches.length) {\n\t\t\t\t\tif (askMax && matches.length >= askMax) {\n\t\t\t\t\t\tlimitHit = true;\n\t\t\t\t\t\tmatches = matches.slice(0, askMax - 1);\n\t\t\t\t\t}\n\n\t\t\t\t\tconst fileMatch = new FileMatch(originalResource);\n\t\t\t\t\topenEditorResults.set(originalResource, fileMatch);\n\n\t\t\t\t\tconst textSearchResults = editorMatchesToTextSearchResults(matches, model, query.previewOptions);\n\t\t\t\t\tfileMatch.results = getTextSearchMatchWithModelContext(textSearchResults, model, query);\n\t\t\t\t} else {\n\t\t\t\t\topenEditorResults.set(originalResource, null);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\treturn {\n\t\t\tresults: openEditorResults,\n\t\t\tlimitHit\n\t\t};\n\t}\n\n\tprivate matches(resource: uri, query: ITextQuery): boolean {\n\t\treturn pathIncludedInQuery(query, resource.fsPath);\n\t}\n\n\tasync clearCache(cacheKey: string): Promise<void> {\n\t\tconst clearPs = Array.from(this.fileSearchProviders.values())\n\t\t\t.map(provider => provider && provider.clearCache(cacheKey));\n\t\tawait Promise.all(clearPs);\n\t}\n}\n"],
  "mappings": ";;;;;;;;;;;;AAKA,YAAY,YAAY;AACxB,SAAS,iBAAiB,6BAA6B;AACvD,SAAS,yBAAyB;AAClC,SAAS,yBAAyB;AAClC,SAAS,YAAY,aAAa,oBAAoB;AACtD,SAAS,aAAa,mBAAmB;AACzC,SAAS,eAAe;AACxB,SAAS,iBAAiB;AAC1B,SAAS,gBAAgB;AACzB,SAAS,KAAK,OAAO,WAAW;AAChC,SAAS,qBAAqB;AAC9B,SAAS,oBAAoB;AAC7B,SAAS,mBAAmB;AAC5B,SAAS,yBAAyB;AAClC,SAAS,2BAA2B;AACpC,SAAS,wBAAwB,wBAAwB;AACzD,SAAS,sBAAsB;AAC/B,SAAS,yBAAyB;AAClC,SAAS,4BAA4B,wBAAwB,WAAW,cAAc,oBAAoB,YAAY,YAAY,kBAAkB,cAAc,kBAAkB,iBAAiB,oBAAoB,qBAAqB,cAAc,uBAAuB,gBAAgB,aAAa,mBAAmB,YAAY,qBAAqB,WAAW,2BAA2B,aAAa,iBAAiB,0BAA0B;AAClc,SAAS,oCAAoC,wCAAwC;AAE9E,IAAM,gBAAN,cAA4B,WAAqC;AAAA,EAcvE,YACiC,cACC,eACG,kBACN,YACM,kBACL,aACO,oBACrC;AACD,UAAM;AAR0B;AACC;AACG;AACN;AACM;AACL;AACO;AAAA,EAGvC;AAAA,EAlDD,OA0BwE;AAAA;AAAA;AAAA,EAItD,sBAAsB,oBAAI,IAAmC;AAAA,EAC7D,sBAAsB,oBAAI,IAAmC;AAAA,EAC7D,wBAAwB,oBAAI,IAAmC;AAAA,EAExE,+BAA+B,oBAAI,IAAoD;AAAA,EACvF,+BAA+B,oBAAI,IAAoD;AAAA,EACvF,iCAAiC,oBAAI,IAAoD;AAAA,EAEzF,gCAAgC,oBAAI,IAAY;AAAA,EAcxD,6BAA6B,QAAgB,MAA0B,UAA8C;AACpH,QAAI;AACJ,QAAI;AACJ,QAAI,SAAS,mBAAmB,MAAM;AACrC,aAAO,KAAK;AACZ,oBAAc,KAAK;AAAA,IACpB,WAAW,SAAS,mBAAmB,MAAM;AAC5C,aAAO,KAAK;AACZ,oBAAc,KAAK;AAAA,IACpB,WAAW,SAAS,mBAAmB,QAAQ;AAC9C,aAAO,KAAK;AACZ,oBAAc,KAAK;AAAA,IACpB,OAAO;AACN,YAAM,IAAI,MAAM,4BAA4B;AAAA,IAC7C;AAEA,SAAK,IAAI,QAAQ,QAAQ;AAEzB,QAAI,YAAY,IAAI,MAAM,GAAG;AAC5B,kBAAY,IAAI,MAAM,EAAG,SAAS,QAAQ;AAC1C,kBAAY,OAAO,MAAM;AAAA,IAC1B;AAEA,WAAO,aAAa,MAAM;AACzB,WAAK,OAAO,MAAM;AAAA,IACnB,CAAC;AAAA,EACF;AAAA,EAEA,MAAM,WAAW,OAAmB,OAA2B,YAA4E;AAC1I,UAAM,UAAU,KAAK,yBAAyB,OAAO,OAAO,UAAU;AACtE,UAAM,oBAAoB,QAAQ;AAClC,UAAM,eAAe,MAAM,QAAQ;AACnC,WAAO;AAAA,MACN,UAAU,aAAa,YAAY,kBAAkB;AAAA,MACrD,SAAS,CAAC,GAAG,aAAa,SAAS,GAAG,kBAAkB,OAAO;AAAA,MAC/D,UAAU,CAAC,GAAG,aAAa,UAAU,GAAG,kBAAkB,QAAQ;AAAA,IACnE;AAAA,EACD;AAAA,EAEA,MAAM,aAAa,OAAqB,OAA2B,YAA4E;AAC9I,UAAM,qBAAqB,wBAAC,aAAkC;AAE7D,UAAI,YAAY;AACf,YAAI,YAAY,QAAQ,GAAG;AAC1B,qBAAW,QAAQ;AAAA,QACpB,OAAO;AACN,qBAA6B,QAAQ;AAAA,QACtC;AAAA,MACD;AAEA,UAAI,kBAAkB,QAAQ,GAAG;AAChC,aAAK,WAAW,MAAM,wBAAwB,SAAS,OAAO;AAAA,MAC/D;AAAA,IACD,GAb2B;AAc3B,WAAO,KAAK,SAAS,OAAO,OAAO,kBAAkB;AAAA,EACtD;AAAA,EAEA,yBACC,OACA,OACA,YACA,uBACA,4BAIC;AAED,UAAM,oBAAoB,KAAK,qBAAqB,KAAK;AAEzD,QAAI,YAAY;AACf,aAAO,SAAS,CAAC,GAAG,kBAAkB,QAAQ,OAAO,CAAC,CAAC,EAAE,OAAO,OAAK,EAAE,yBAAyB,sBAAsB,IAAI,EAAE,QAAQ,EAAE,EAAE,QAAQ,UAAU;AAAA,IAC3J;AAEA,UAAM,cAA+B;AAAA,MACpC,SAAS,OAAO,SAAS,CAAC,GAAG,kBAAkB,QAAQ,OAAO,CAAC,CAAC;AAAA,MAChE,UAAU,kBAAkB,YAAY;AAAA,MACxC,UAAU,CAAC;AAAA,IACZ;AAEA,UAAM,kBAAkB,mCAAY;AACnC,YAAM,qCAAqC,MAAM,8BAA8B,IAAI,YAAY;AAC/F,YAAM,qBAAqB,wBAAC,aAAkC;AAC7D,YAAI,YAAY,QAAQ,GAAG;AAE1B,cAAI,CAAC,kBAAkB,QAAQ,IAAI,SAAS,QAAQ,KAAK,CAAC,mCAAmC,IAAI,SAAS,QAAQ,KAAK,YAAY;AAClI,uBAAW,QAAQ;AAAA,UACpB;AAAA,QACD,WAAW,YAAY;AAEtB,qBAA6B,QAAQ;AAAA,QACtC;AAEA,YAAI,kBAAkB,QAAQ,GAAG;AAChC,eAAK,WAAW,MAAM,wBAAwB,SAAS,OAAO;AAAA,QAC/D;AAAA,MACD,GAd2B;AAe3B,aAAO,MAAM,KAAK,SAAS,OAAO,OAAO,kBAAkB;AAAA,IAC5D,GAlBwB;AAoBxB,WAAO;AAAA,MACN;AAAA,MACA,cAAc,gBAAgB;AAAA,IAC/B;AAAA,EACD;AAAA,EAEA,WAAW,OAAmB,OAAqD;AAClF,WAAO,KAAK,SAAS,OAAO,KAAK;AAAA,EAClC;AAAA,EAEQ,SAAS,OAAqB,OAA2B,YAA4E;AAC5I,SAAK,WAAW,MAAM,wBAAwB,KAAK,UAAU,KAAK,CAAC;AAEnE,UAAM,iBAAiB,KAAK,kBAAkB,KAAK;AAEnD,UAAM,sBAAsC,CAAC,QAAQ,QAAQ,IAAI,CAAC;AAClE,mBAAe,QAAQ,YAAU,oBAAoB,KAAK,KAAK,iBAAiB,gBAAgB,YAAY,MAAM,EAAE,CAAC,CAAC;AACtH,wBAAoB,KAAK,KAAK,iBAAiB,gBAAgB,eAAe,CAAC;AAE/E,UAAM,mBAAmB,YAAY;AACpC,YAAM,QAAQ,IAAI,mBAAmB;AACrC,YAAM,KAAK,iBAAiB,kCAAkC;AAG9D,UAAI,SAAS,MAAM,yBAAyB;AAC3C,eAAO,QAAQ,OAAO,IAAI,kBAAkB,CAAC;AAAA,MAC9C;AAEA,YAAM,mBAAmB,wBAAC,SAA8B;AACvD,YAAI,SAAS,MAAM,yBAAyB;AAC3C;AAAA,QACD;AAEA,qBAAa,IAAI;AAAA,MAClB,GANyB;AAQzB,YAAM,SAAS,MAAM,QAAQ,IAAI,MAAM,cAAc,IAAI,CAAAA,WAAS,KAAK,YAAY,OAAOA,OAAM,MAAM,CAAC,CAAC;AACxG,YAAM,gBAAgB,MAAM,cAAc,OAAO,CAAC,GAAG,MAAM,OAAO,CAAC,CAAC;AAEpE,UAAI,YAAY,MAAM,KAAK,oBAAoB,OAAO,kBAAkB,KAAK;AAC7E,kBAAY,OAAO,SAAS,SAAS;AACrC,UAAI,CAAC,UAAU,QAAQ;AACtB,eAAO;AAAA,UACN,UAAU;AAAA,UACV,SAAS,CAAC;AAAA,UACV,UAAU,CAAC;AAAA,QACZ;AAAA,MACD;AAEA,aAAO;AAAA,QACN,UAAU,UAAU,CAAC,KAAK,UAAU,CAAC,EAAE;AAAA,QACvC,OAAO,UAAU,CAAC,EAAE;AAAA,QACpB,UAAU,OAAO,SAAS,UAAU,QAAQ,OAAK,EAAE,QAAQ,CAAC,EAAE,OAAO,OAAO,aAAa,aAAW,QAAQ,OAAO,QAAQ,OAAO,QAAQ,OAAO,CAAC;AAAA,QAClJ,SAAS,UAAU,QAAQ,CAAC,MAAuB,EAAE,OAAO;AAAA,MAC7D;AAAA,IACD,GAAG;AAEH,WAAO,QAAQ,sBAAuC,iBAAiB,KAAK,IAAI;AAAA,EACjF;AAAA,EAEQ,kBAAkB,OAAkC;AAC3D,UAAM,UAAU,oBAAI,IAAY;AAChC,UAAM,eAAe,QAAQ,QAAM,QAAQ,IAAI,GAAG,OAAO,MAAM,CAAC;AAEhE,UAAM,oBAAoB,QAAQ,eAAa,QAAQ,IAAI,UAAU,MAAM,CAAC;AAE5E,WAAO;AAAA,EACR;AAAA,EAEA,MAAc,gBAAgB,WAAsB,QAAgD;AACnG,UAAM,cAAmE,KAAK,gCAAgC,SAAS;AAEvH,QAAI,YAAY,IAAI,MAAM,GAAG;AAC5B,aAAO,YAAY,IAAI,MAAM,EAAG;AAAA,IACjC,OAAO;AACN,YAAM,WAAW,IAAI,gBAAuC;AAC5D,kBAAY,IAAI,QAAQ,QAAQ;AAChC,aAAO,SAAS;AAAA,IACjB;AAAA,EACD;AAAA,EAEQ,kBAAkB,MAAqD;AAC9E,YAAQ,MAAM;AAAA,MACb,KAAK,UAAU;AACd,eAAO,KAAK;AAAA,MACb,KAAK,UAAU;AACd,eAAO,KAAK;AAAA,MACb,KAAK,UAAU;AACd,eAAO,KAAK;AAAA,MACb;AACC,cAAM,IAAI,MAAM,uBAAuB,IAAI,EAAE;AAAA,IAC/C;AAAA,EACD;AAAA,EAEQ,gCAAgC,MAAsE;AAC7G,YAAQ,MAAM;AAAA,MACb,KAAK,UAAU;AACd,eAAO,KAAK;AAAA,MACb,KAAK,UAAU;AACd,eAAO,KAAK;AAAA,MACb,KAAK,UAAU;AACd,eAAO,KAAK;AAAA,MACb;AACC,cAAM,IAAI,MAAM,uBAAuB,IAAI,EAAE;AAAA,IAC/C;AAAA,EACD;AAAA,EAEA,MAAc,oBAAoB,OAAqB,oBAA6D,OAA2B;AAC9I,UAAM,QAAQ,UAAU,OAAO,KAAK;AAEpC,UAAM,WAAuC,CAAC;AAE9C,UAAM,MAAM,KAAK,2BAA2B,KAAK;AACjD,UAAM,wBAAwB,CAAC,GAAG,IAAI,KAAK,CAAC,EAAE,KAAK,YAAU;AAC5D,aAAO,KAAK,kBAAkB,MAAM,IAAI,EAAE,IAAI,MAAM;AAAA,IACrD,CAAC;AAED,QAAI,MAAM,SAAS,UAAU,UAAU,CAAC,uBAAuB;AAC9D,aAAO,CAAC;AAAA,IACT;AACA,UAAM,QAAQ,IAAI,CAAC,GAAG,IAAI,KAAK,CAAC,EAAE,IAAI,OAAM,WAAU;AACrD,UAAI,MAAM,kBAAkB,WAAW,QAAQ,MAAM;AACpD;AAAA,MACD;AACA,YAAM,YAAY,IAAI,IAAI,MAAM;AAChC,UAAI,WAAW,KAAK,kBAAkB,MAAM,IAAI,EAAE,IAAI,MAAM;AAE5D,UAAI,CAAC,UAAU;AACd,YAAI,uBAAuB;AAC1B,cAAI,CAAC,KAAK,8BAA8B,IAAI,MAAM,GAAG;AACpD,iBAAK,WAAW,KAAK,6CAA6C,MAAM,oDAAoD,MAAM,EAAE;AACpI,iBAAK,8BAA8B,IAAI,MAAM;AAAA,UAC9C;AACA;AAAA,QACD,OAAO;AACN,cAAI,CAAC,KAAK,8BAA8B,IAAI,MAAM,GAAG;AACpD,iBAAK,WAAW,KAAK,6CAA6C,MAAM,WAAW;AACnF,iBAAK,8BAA8B,IAAI,MAAM;AAAA,UAC9C;AACA,qBAAW,MAAM,KAAK,gBAAgB,MAAM,MAAM,MAAM;AAAA,QACzD;AAAA,MACD;AAEA,YAAM,iBAA+B;AAAA,QACpC,GAAG;AAAA,QACH,GAAG;AAAA,UACF,eAAe;AAAA,QAChB;AAAA,MACD;AAEA,YAAM,mBAAmB,6BAAM;AAC9B,gBAAQ,MAAM,MAAM;AAAA,UACnB,KAAK,UAAU;AACd,mBAAO,SAAS,WAAuB,gBAAgB,KAAK;AAAA,UAC7D,KAAK,UAAU;AACd,mBAAO,SAAS,WAAuB,gBAAgB,oBAAoB,KAAK;AAAA,UACjF;AACC,mBAAO,SAAS,WAAuB,gBAAgB,oBAAoB,KAAK;AAAA,QAClF;AAAA,MACD,GATyB;AAWzB,eAAS,KAAK,iBAAiB,CAAC;AAAA,IACjC,CAAC,CAAC;AAEF,WAAO,QAAQ,IAAI,QAAQ,EAAE,KAAK,eAAa;AAC9C,YAAM,eAAe,MAAM,QAAQ;AACnC,WAAK,WAAW,MAAM,yBAAyB,YAAY,IAAI;AAC/D,gBAAU,QAAQ,cAAY;AAC7B,aAAK,cAAc,OAAO,cAAc,QAAQ;AAAA,MACjD,CAAC;AACD,aAAO;AAAA,IACR,GAAG,SAAO;AACT,YAAM,eAAe,MAAM,QAAQ;AACnC,WAAK,WAAW,MAAM,yBAAyB,YAAY,IAAI;AAC/D,YAAM,cAAc,uBAAuB,GAAG;AAC9C,WAAK,WAAW,MAAM,8BAA8B,YAAY,OAAO,EAAE;AACzE,WAAK,cAAc,OAAO,cAAc,QAAW,WAAW;AAE9D,YAAM;AAAA,IACP,CAAC;AAAA,EACF;AAAA,EAEQ,2BAA2B,OAAkD;AACpF,UAAM,UAAU,oBAAI,IAA4B;AAEhD,UAAM,cAAc,QAAQ,QAAM;AACjC,YAAM,YAAY,QAAQ,IAAI,GAAG,OAAO,MAAM,KAAK,CAAC;AACpD,gBAAU,KAAK,EAAE;AAEjB,cAAQ,IAAI,GAAG,OAAO,QAAQ,SAAS;AAAA,IACxC,CAAC;AAED,WAAO;AAAA,EACR;AAAA,EAEQ,cAAc,OAAqB,cAAsB,UAA4B,KAAyB;AACrH,UAAM,iBAAiB,MAAM,cAAc,MAAM,QAAM,GAAG,OAAO,WAAW,QAAQ,IAAI;AACxF,UAAM,kBAAkB,MAAM,cAAc,MAAM,QAAM,GAAG,OAAO,WAAW,QAAQ,IAAI;AACzF,UAAM,SAAS,iBAAiB,QAAQ,OACvC,kBAAkB,UACjB;AAEF,QAAI,MAAM,SAAS,UAAU,QAAQ,YAAY,SAAS,OAAO;AAChE,YAAM,kBAAkB,SAAS;AACjC,UAAI,gBAAgB,WAAW;AAC9B,cAAM,aAAiC,gBAAgB;AA4BvD,aAAK,iBAAiB,WAAyE,wBAAwB;AAAA,UACtH,QAAQ,MAAM;AAAA,UACd,aAAa,gBAAgB;AAAA,UAC7B,sBAAsB,MAAM,cAAc;AAAA,UAC1C;AAAA,UACA,aAAa,gBAAgB;AAAA,UAC7B,kBAAkB,WAAW;AAAA,UAC7B,iBAAiB,WAAW;AAAA,UAC5B,iBAAiB,WAAW;AAAA,UAC5B,iBAAiB,WAAW;AAAA,UAC5B;AAAA,QACD,CAAC;AAAA,MACF,OAAO;AACN,cAAM,oBAAwC,gBAAgB;AAgC9D,aAAK,iBAAiB,WAA8D,kBAAkB;AAAA,UACrG,QAAQ,MAAM;AAAA,UACd,aAAa,gBAAgB;AAAA,UAC7B,sBAAsB,MAAM,cAAc;AAAA,UAC1C;AAAA,UACA,aAAa,gBAAgB;AAAA,UAC7B,cAAc,kBAAkB;AAAA,UAChC,mBAAmB,kBAAkB;AAAA,UACrC,aAAa,kBAAkB;AAAA,UAC/B,SAAS,kBAAkB;AAAA,UAC3B,gBAAgB,kBAAkB;AAAA,UAClC;AAAA,QACD,CAAC;AAAA,MACF;AAAA,IACD,WAAW,MAAM,SAAS,UAAU,MAAM;AACzC,UAAI;AACJ,UAAI,KAAK;AACR,oBAAY,IAAI,SAAS,gBAAgB,kBAAkB,UAC1D,IAAI,SAAS,gBAAgB,kBAAkB,aAC9C,IAAI,SAAS,gBAAgB,iBAAiB,SAC7C,IAAI,SAAS,gBAAgB,iBAAiB,YAC7C,IAAI,SAAS,gBAAgB,QAAQ,UACpC,IAAI,SAAS,gBAAgB,WAAW,aACvC;AAAA,MACP;AAkBA,WAAK,iBAAiB,WAAsE,sBAAsB;AAAA,QACjH,QAAQ,MAAM;AAAA,QACd,sBAAsB,MAAM,cAAc;AAAA,QAC1C;AAAA,QACA;AAAA,QACA,OAAO;AAAA,MACR,CAAC;AAAA,IACF;AAAA,EACD;AAAA,EAEQ,qBAAqB,OAAmF;AAC/G,UAAM,oBAAoB,IAAI,YAA+B,CAAAC,SAAO,KAAK,mBAAmB,OAAO,iBAAiBA,IAAG,CAAC;AACxH,QAAI,WAAW;AAEf,QAAI,MAAM,SAAS,UAAU,MAAM;AAClC,YAAM,+BAA+B,IAAI,YAAiB;AAC1D,iBAAW,eAAe,KAAK,cAAc,SAAS;AACrD,cAAM,YAAY,uBAAuB,gBAAgB,aAAa,EAAE,mBAAmB,iBAAiB,QAAQ,CAAC;AACrH,cAAM,WAAW,uBAAuB,eAAe,aAAa,EAAE,mBAAmB,iBAAiB,QAAQ,CAAC;AAEnH,YAAI,WAAW;AACd,uCAA6B,IAAI,WAAW,YAAY,SAAS;AAAA,QAClE;AAAA,MACD;AAEA,YAAM,SAAS,KAAK,aAAa,UAAU;AAC3C,aAAO,QAAQ,CAAC,UAAU;AACzB,cAAM,WAAW,MAAM;AACvB,YAAI,CAAC,UAAU;AACd;AAAA,QACD;AAEA,YAAI,UAAU;AACb;AAAA,QACD;AAEA,cAAM,mBAAmB,6BAA6B,IAAI,QAAQ;AAClE,YAAI,CAAC,kBAAkB;AACtB;AAAA,QACD;AAGA,YAAI,MAAM,cAAc,MAAM,6BAA6B,EAAE,MAAM,kBAAkB,MAAM,eAAe,kBAAkB,IAAI;AAE/H;AAAA,QACD;AAGA,YAAI,iBAAiB,WAAW,QAAQ,YAAY,CAAC,KAAK,YAAY,YAAY,gBAAgB,GAAG;AACpG;AAAA,QACD;AAGA,YAAI,iBAAiB,WAAW,OAAO;AACtC;AAAA,QACD;AAEA,YAAI,CAAC,KAAK,QAAQ,kBAAkB,KAAK,GAAG;AAC3C;AAAA,QACD;AAGA,cAAM,UAAU,SAAS,MAAM,UAAU,IAAI,MAAM,aAAa,8BAA8B;AAC9F,YAAI,UAAU,MAAM,YAAY,MAAM,eAAe,SAAS,OAAO,CAAC,CAAC,MAAM,eAAe,UAAU,CAAC,CAAC,MAAM,eAAe,iBAAiB,MAAM,eAAe,cAAc,MAAM,eAAe,iBAAkB,MAAM,OAAO,MAAM;AAC3O,YAAI,QAAQ,QAAQ;AACnB,cAAI,UAAU,QAAQ,UAAU,QAAQ;AACvC,uBAAW;AACX,sBAAU,QAAQ,MAAM,GAAG,SAAS,CAAC;AAAA,UACtC;AAEA,gBAAM,YAAY,IAAI,UAAU,gBAAgB;AAChD,4BAAkB,IAAI,kBAAkB,SAAS;AAEjD,gBAAM,oBAAoB,iCAAiC,SAAS,OAAO,MAAM,cAAc;AAC/F,oBAAU,UAAU,mCAAmC,mBAAmB,OAAO,KAAK;AAAA,QACvF,OAAO;AACN,4BAAkB,IAAI,kBAAkB,IAAI;AAAA,QAC7C;AAAA,MACD,CAAC;AAAA,IACF;AAEA,WAAO;AAAA,MACN,SAAS;AAAA,MACT;AAAA,IACD;AAAA,EACD;AAAA,EAEQ,QAAQ,UAAe,OAA4B;AAC1D,WAAO,oBAAoB,OAAO,SAAS,MAAM;AAAA,EAClD;AAAA,EAEA,MAAM,WAAW,UAAiC;AACjD,UAAM,UAAU,MAAM,KAAK,KAAK,oBAAoB,OAAO,CAAC,EAC1D,IAAI,cAAY,YAAY,SAAS,WAAW,QAAQ,CAAC;AAC3D,UAAM,QAAQ,IAAI,OAAO;AAAA,EAC1B;AACD;AA9hBa,gBAAN;AAAA,EAeJ;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,GArBU;",
  "names": ["query", "uri"]
}
