{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/search/common/searchHelpers.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Range } from \"../../../../editor/common/core/range.js\";\nimport type { FindMatch, ITextModel } from \"../../../../editor/common/model.js\";\nimport {\n\ttype ITextQuery,\n\ttype ITextSearchMatch,\n\ttype ITextSearchPreviewOptions,\n\ttype ITextSearchResult,\n\tTextSearchMatch,\n} from \"./search.js\";\n\nfunction editorMatchToTextSearchResult(\n\tmatches: FindMatch[],\n\tmodel: ITextModel,\n\tpreviewOptions?: ITextSearchPreviewOptions,\n): TextSearchMatch {\n\tconst firstLine = matches[0].range.startLineNumber;\n\tconst lastLine = matches[matches.length - 1].range.endLineNumber;\n\n\tconst lineTexts: string[] = [];\n\tfor (let i = firstLine; i <= lastLine; i++) {\n\t\tlineTexts.push(model.getLineContent(i));\n\t}\n\n\treturn new TextSearchMatch(\n\t\tlineTexts.join(\"\\n\") + \"\\n\",\n\t\tmatches.map(\n\t\t\t(m) =>\n\t\t\t\tnew Range(\n\t\t\t\t\tm.range.startLineNumber - 1,\n\t\t\t\t\tm.range.startColumn - 1,\n\t\t\t\t\tm.range.endLineNumber - 1,\n\t\t\t\t\tm.range.endColumn - 1,\n\t\t\t\t),\n\t\t),\n\t\tpreviewOptions,\n\t);\n}\n\n/**\n * Combine a set of FindMatches into a set of TextSearchResults. They should be grouped by matches that start on the same line that the previous match ends on.\n */\nexport function editorMatchesToTextSearchResults(\n\tmatches: FindMatch[],\n\tmodel: ITextModel,\n\tpreviewOptions?: ITextSearchPreviewOptions,\n): TextSearchMatch[] {\n\tlet previousEndLine = -1;\n\tconst groupedMatches: FindMatch[][] = [];\n\tlet currentMatches: FindMatch[] = [];\n\tmatches.forEach((match) => {\n\t\tif (match.range.startLineNumber !== previousEndLine) {\n\t\t\tcurrentMatches = [];\n\t\t\tgroupedMatches.push(currentMatches);\n\t\t}\n\n\t\tcurrentMatches.push(match);\n\t\tpreviousEndLine = match.range.endLineNumber;\n\t});\n\n\treturn groupedMatches.map((sameLineMatches) => {\n\t\treturn editorMatchToTextSearchResult(\n\t\t\tsameLineMatches,\n\t\t\tmodel,\n\t\t\tpreviewOptions,\n\t\t);\n\t});\n}\n\nexport function getTextSearchMatchWithModelContext(\n\tmatches: ITextSearchMatch[],\n\tmodel: ITextModel,\n\tquery: ITextQuery,\n): ITextSearchResult[] {\n\tconst results: ITextSearchResult[] = [];\n\n\tlet prevLine = -1;\n\tfor (let i = 0; i < matches.length; i++) {\n\t\tconst { start: matchStartLine, end: matchEndLine } = getMatchStartEnd(\n\t\t\tmatches[i],\n\t\t);\n\t\tif (\n\t\t\ttypeof query.surroundingContext === \"number\" &&\n\t\t\tquery.surroundingContext > 0\n\t\t) {\n\t\t\tconst beforeContextStartLine = Math.max(\n\t\t\t\tprevLine + 1,\n\t\t\t\tmatchStartLine - query.surroundingContext,\n\t\t\t);\n\t\t\tfor (let b = beforeContextStartLine; b < matchStartLine; b++) {\n\t\t\t\tresults.push({\n\t\t\t\t\ttext: model.getLineContent(b + 1),\n\t\t\t\t\tlineNumber: b + 1,\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\tresults.push(matches[i]);\n\n\t\tconst nextMatch = matches[i + 1];\n\t\tconst nextMatchStartLine = nextMatch\n\t\t\t? getMatchStartEnd(nextMatch).start\n\t\t\t: Number.MAX_VALUE;\n\t\tif (\n\t\t\ttypeof query.surroundingContext === \"number\" &&\n\t\t\tquery.surroundingContext > 0\n\t\t) {\n\t\t\tconst afterContextToLine = Math.min(\n\t\t\t\tnextMatchStartLine - 1,\n\t\t\t\tmatchEndLine + query.surroundingContext,\n\t\t\t\tmodel.getLineCount() - 1,\n\t\t\t);\n\t\t\tfor (let a = matchEndLine + 1; a <= afterContextToLine; a++) {\n\t\t\t\tresults.push({\n\t\t\t\t\ttext: model.getLineContent(a + 1),\n\t\t\t\t\tlineNumber: a + 1,\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\tprevLine = matchEndLine;\n\t}\n\n\treturn results;\n}\n\nfunction getMatchStartEnd(match: ITextSearchMatch): {\n\tstart: number;\n\tend: number;\n} {\n\tconst matchRanges = match.rangeLocations.map((e) => e.source);\n\tconst matchStartLine = matchRanges[0].startLineNumber;\n\tconst matchEndLine = matchRanges[matchRanges.length - 1].endLineNumber;\n\n\treturn {\n\t\tstart: matchStartLine,\n\t\tend: matchEndLine,\n\t};\n}\n"],
  "mappings": "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",
  "names": []
}
