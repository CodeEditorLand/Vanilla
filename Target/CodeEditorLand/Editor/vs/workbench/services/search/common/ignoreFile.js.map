{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/search/common/ignoreFile.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as glob from '../../../../base/common/glob.js';\n\n\nexport class IgnoreFile {\n\n\tprivate isPathIgnored: (path: string, isDir: boolean, parent?: IgnoreFile) => boolean;\n\n\tconstructor(\n\t\tcontents: string,\n\t\tprivate readonly location: string,\n\t\tprivate readonly parent?: IgnoreFile) {\n\t\tif (location[location.length - 1] === '\\\\') {\n\t\t\tthrow Error('Unexpected path format, do not use trailing backslashes');\n\t\t}\n\t\tif (location[location.length - 1] !== '/') {\n\t\t\tlocation += '/';\n\t\t}\n\t\tthis.isPathIgnored = this.parseIgnoreFile(contents, this.location, this.parent);\n\t}\n\n\t/**\n\t * Updates the contents of the ignorefile. Preservering the location and parent\n\t * @param contents The new contents of the gitignore file\n\t */\n\tupdateContents(contents: string) {\n\t\tthis.isPathIgnored = this.parseIgnoreFile(contents, this.location, this.parent);\n\t}\n\n\t/**\n\t * Returns true if a path in a traversable directory has not been ignored.\n\t *\n\t * Note: For performance reasons this does not check if the parent directories have been ignored,\n\t * so it should always be used in tandem with `shouldTraverseDir` when walking a directory.\n\t *\n\t * In cases where a path must be tested in isolation, `isArbitraryPathIncluded` should be used.\n\t */\n\tisPathIncludedInTraversal(path: string, isDir: boolean): boolean {\n\t\tif (path[0] !== '/' || path[path.length - 1] === '/') {\n\t\t\tthrow Error('Unexpected path format, expectred to begin with slash and end without. got:' + path);\n\t\t}\n\n\t\tconst ignored = this.isPathIgnored(path, isDir);\n\n\t\treturn !ignored;\n\t}\n\n\t/**\n\t * Returns true if an arbitrary path has not been ignored.\n\t * This is an expensive operation and should only be used ouside of traversals.\n\t */\n\tisArbitraryPathIgnored(path: string, isDir: boolean): boolean {\n\t\tif (path[0] !== '/' || path[path.length - 1] === '/') {\n\t\t\tthrow Error('Unexpected path format, expectred to begin with slash and end without. got:' + path);\n\t\t}\n\n\t\tconst segments = path.split('/').filter(x => x);\n\t\tlet ignored = false;\n\n\t\tlet walkingPath = '';\n\n\t\tfor (let i = 0; i < segments.length; i++) {\n\t\t\tconst isLast = i === segments.length - 1;\n\t\t\tconst segment = segments[i];\n\n\t\t\twalkingPath = walkingPath + '/' + segment;\n\n\t\t\tif (!this.isPathIncludedInTraversal(walkingPath, isLast ? isDir : true)) {\n\t\t\t\tignored = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\treturn ignored;\n\t}\n\n\tprivate gitignoreLinesToExpression(lines: string[], dirPath: string, trimForExclusions: boolean): glob.ParsedExpression {\n\t\tconst includeLines = lines.map(line => this.gitignoreLineToGlob(line, dirPath));\n\n\t\tconst includeExpression: glob.IExpression = Object.create(null);\n\t\tfor (const line of includeLines) {\n\t\t\tincludeExpression[line] = true;\n\t\t}\n\n\t\treturn glob.parse(includeExpression, { trimForExclusions });\n\t}\n\n\n\tprivate parseIgnoreFile(ignoreContents: string, dirPath: string, parent: IgnoreFile | undefined): (path: string, isDir: boolean) => boolean {\n\t\tconst contentLines = ignoreContents\n\t\t\t.split('\\n')\n\t\t\t.map(line => line.trim())\n\t\t\t.filter(line => line && line[0] !== '#');\n\n\t\t// Pull out all the lines that end with `/`, those only apply to directories\n\t\tconst fileLines = contentLines.filter(line => !line.endsWith('/'));\n\n\t\tconst fileIgnoreLines = fileLines.filter(line => !line.includes('!'));\n\t\tconst isFileIgnored = this.gitignoreLinesToExpression(fileIgnoreLines, dirPath, true);\n\n\t\t// TODO: Slight hack... this naieve approach may reintroduce too many files in cases of weirdly complex .gitignores\n\t\tconst fileIncludeLines = fileLines.filter(line => line.includes('!')).map(line => line.replace(/!/g, ''));\n\t\tconst isFileIncluded = this.gitignoreLinesToExpression(fileIncludeLines, dirPath, false);\n\n\t\t// When checking if a dir is ignored we can use all lines\n\t\tconst dirIgnoreLines = contentLines.filter(line => !line.includes('!'));\n\t\tconst isDirIgnored = this.gitignoreLinesToExpression(dirIgnoreLines, dirPath, true);\n\n\t\t// Same hack.\n\t\tconst dirIncludeLines = contentLines.filter(line => line.includes('!')).map(line => line.replace(/!/g, ''));\n\t\tconst isDirIncluded = this.gitignoreLinesToExpression(dirIncludeLines, dirPath, false);\n\n\t\tconst isPathIgnored = (path: string, isDir: boolean) => {\n\t\t\tif (!path.startsWith(dirPath)) { return false; }\n\t\t\tif (isDir && isDirIgnored(path) && !isDirIncluded(path)) { return true; }\n\t\t\tif (isFileIgnored(path) && !isFileIncluded(path)) { return true; }\n\n\t\t\tif (parent) { return parent.isPathIgnored(path, isDir); }\n\n\t\t\treturn false;\n\t\t};\n\n\t\treturn isPathIgnored;\n\t}\n\n\tprivate gitignoreLineToGlob(line: string, dirPath: string): string {\n\t\tconst firstSep = line.indexOf('/');\n\t\tif (firstSep === -1 || firstSep === line.length - 1) {\n\t\t\tline = '**/' + line;\n\t\t} else {\n\t\t\tif (firstSep === 0) {\n\t\t\t\tif (dirPath.slice(-1) === '/') {\n\t\t\t\t\tline = line.slice(1);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif (dirPath.slice(-1) !== '/') {\n\t\t\t\t\tline = '/' + line;\n\t\t\t\t}\n\t\t\t}\n\t\t\tline = dirPath + line;\n\t\t}\n\n\t\treturn line;\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
