{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/search/common/getFileResults.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Range } from \"../../../../editor/common/core/range.js\";\nimport type {\n\tITextSearchMatch,\n\tITextSearchPreviewOptions,\n\tITextSearchResult,\n} from \"./search.js\";\n\nexport const getFileResults = (\n\tbytes: Uint8Array,\n\tpattern: RegExp,\n\toptions: {\n\t\tsurroundingContext: number;\n\t\tpreviewOptions: ITextSearchPreviewOptions | undefined;\n\t\tremainingResultQuota: number;\n\t},\n): ITextSearchResult[] => {\n\tlet text: string;\n\tif (bytes[0] === 0xff && bytes[1] === 0xfe) {\n\t\ttext = new TextDecoder(\"utf-16le\").decode(bytes);\n\t} else if (bytes[0] === 0xfe && bytes[1] === 0xff) {\n\t\ttext = new TextDecoder(\"utf-16be\").decode(bytes);\n\t} else {\n\t\ttext = new TextDecoder(\"utf8\").decode(bytes);\n\t\tif (text.slice(0, 1000).includes(\"\\uFFFD\") && bytes.includes(0)) {\n\t\t\treturn [];\n\t\t}\n\t}\n\n\tconst results: ITextSearchResult[] = [];\n\n\tconst patternIndecies: { matchStartIndex: number; matchedText: string }[] =\n\t\t[];\n\n\tlet patternMatch: RegExpExecArray | null = null;\n\tlet remainingResultQuota = options.remainingResultQuota;\n\twhile (remainingResultQuota >= 0 && (patternMatch = pattern.exec(text))) {\n\t\tpatternIndecies.push({\n\t\t\tmatchStartIndex: patternMatch.index,\n\t\t\tmatchedText: patternMatch[0],\n\t\t});\n\t\tremainingResultQuota--;\n\t}\n\n\tif (patternIndecies.length) {\n\t\tconst contextLinesNeeded = new Set<number>();\n\t\tconst resultLines = new Set<number>();\n\n\t\tconst lineRanges: { start: number; end: number }[] = [];\n\t\tconst readLine = (lineNumber: number) =>\n\t\t\ttext.slice(\n\t\t\t\tlineRanges[lineNumber].start,\n\t\t\t\tlineRanges[lineNumber].end,\n\t\t\t);\n\n\t\tlet prevLineEnd = 0;\n\t\tlet lineEndingMatch: RegExpExecArray | null = null;\n\t\tconst lineEndRegex = /\\r?\\n/g;\n\t\twhile ((lineEndingMatch = lineEndRegex.exec(text))) {\n\t\t\tlineRanges.push({ start: prevLineEnd, end: lineEndingMatch.index });\n\t\t\tprevLineEnd = lineEndingMatch.index + lineEndingMatch[0].length;\n\t\t}\n\t\tif (prevLineEnd < text.length) {\n\t\t\tlineRanges.push({ start: prevLineEnd, end: text.length });\n\t\t}\n\n\t\tlet startLine = 0;\n\t\tfor (const { matchStartIndex, matchedText } of patternIndecies) {\n\t\t\tif (remainingResultQuota < 0) {\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\twhile (\n\t\t\t\tBoolean(lineRanges[startLine + 1]) &&\n\t\t\t\tmatchStartIndex > lineRanges[startLine].end\n\t\t\t) {\n\t\t\t\tstartLine++;\n\t\t\t}\n\t\t\tlet endLine = startLine;\n\t\t\twhile (\n\t\t\t\tBoolean(lineRanges[endLine + 1]) &&\n\t\t\t\tmatchStartIndex + matchedText.length > lineRanges[endLine].end\n\t\t\t) {\n\t\t\t\tendLine++;\n\t\t\t}\n\n\t\t\tif (options.surroundingContext) {\n\t\t\t\tfor (\n\t\t\t\t\tlet contextLine = Math.max(\n\t\t\t\t\t\t0,\n\t\t\t\t\t\tstartLine - options.surroundingContext,\n\t\t\t\t\t);\n\t\t\t\t\tcontextLine < startLine;\n\t\t\t\t\tcontextLine++\n\t\t\t\t) {\n\t\t\t\t\tcontextLinesNeeded.add(contextLine);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tlet previewText = \"\";\n\t\t\tlet offset = 0;\n\t\t\tfor (let matchLine = startLine; matchLine <= endLine; matchLine++) {\n\t\t\t\tlet previewLine = readLine(matchLine);\n\t\t\t\tif (\n\t\t\t\t\toptions.previewOptions?.charsPerLine &&\n\t\t\t\t\tpreviewLine.length > options.previewOptions.charsPerLine\n\t\t\t\t) {\n\t\t\t\t\toffset = Math.max(\n\t\t\t\t\t\tmatchStartIndex - lineRanges[startLine].start - 20,\n\t\t\t\t\t\t0,\n\t\t\t\t\t);\n\t\t\t\t\tpreviewLine = previewLine.substr(\n\t\t\t\t\t\toffset,\n\t\t\t\t\t\toptions.previewOptions.charsPerLine,\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t\tpreviewText += `${previewLine}\\n`;\n\t\t\t\tresultLines.add(matchLine);\n\t\t\t}\n\n\t\t\tconst fileRange = new Range(\n\t\t\t\tstartLine,\n\t\t\t\tmatchStartIndex - lineRanges[startLine].start,\n\t\t\t\tendLine,\n\t\t\t\tmatchStartIndex +\n\t\t\t\t\tmatchedText.length -\n\t\t\t\t\tlineRanges[endLine].start,\n\t\t\t);\n\t\t\tconst previewRange = new Range(\n\t\t\t\t0,\n\t\t\t\tmatchStartIndex - lineRanges[startLine].start - offset,\n\t\t\t\tendLine - startLine,\n\t\t\t\tmatchStartIndex +\n\t\t\t\t\tmatchedText.length -\n\t\t\t\t\tlineRanges[endLine].start -\n\t\t\t\t\t(endLine === startLine ? offset : 0),\n\t\t\t);\n\n\t\t\tconst match: ITextSearchMatch = {\n\t\t\t\trangeLocations: [\n\t\t\t\t\t{\n\t\t\t\t\t\tsource: fileRange,\n\t\t\t\t\t\tpreview: previewRange,\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\tpreviewText: previewText,\n\t\t\t};\n\n\t\t\tresults.push(match);\n\n\t\t\tif (options.surroundingContext) {\n\t\t\t\tfor (\n\t\t\t\t\tlet contextLine = endLine + 1;\n\t\t\t\t\tcontextLine <=\n\t\t\t\t\tMath.min(\n\t\t\t\t\t\tendLine + options.surroundingContext,\n\t\t\t\t\t\tlineRanges.length - 1,\n\t\t\t\t\t);\n\t\t\t\t\tcontextLine++\n\t\t\t\t) {\n\t\t\t\t\tcontextLinesNeeded.add(contextLine);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tfor (const contextLine of contextLinesNeeded) {\n\t\t\tif (!resultLines.has(contextLine)) {\n\t\t\t\tresults.push({\n\t\t\t\t\ttext: readLine(contextLine),\n\t\t\t\t\tlineNumber: contextLine + 1,\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t}\n\treturn results;\n};\n"],
  "mappings": ";;AAKA,SAAS,aAAa;AAOf,MAAM,iBAAiB,wBAC7B,OACA,SACA,YAKyB;AACzB,MAAI;AACJ,MAAI,MAAM,CAAC,MAAM,OAAQ,MAAM,CAAC,MAAM,KAAM;AAC3C,WAAO,IAAI,YAAY,UAAU,EAAE,OAAO,KAAK;AAAA,EAChD,WAAW,MAAM,CAAC,MAAM,OAAQ,MAAM,CAAC,MAAM,KAAM;AAClD,WAAO,IAAI,YAAY,UAAU,EAAE,OAAO,KAAK;AAAA,EAChD,OAAO;AACN,WAAO,IAAI,YAAY,MAAM,EAAE,OAAO,KAAK;AAC3C,QAAI,KAAK,MAAM,GAAG,GAAI,EAAE,SAAS,QAAQ,KAAK,MAAM,SAAS,CAAC,GAAG;AAChE,aAAO,CAAC;AAAA,IACT;AAAA,EACD;AAEA,QAAM,UAA+B,CAAC;AAEtC,QAAM,kBACL,CAAC;AAEF,MAAI,eAAuC;AAC3C,MAAI,uBAAuB,QAAQ;AACnC,SAAO,wBAAwB,MAAM,eAAe,QAAQ,KAAK,IAAI,IAAI;AACxE,oBAAgB,KAAK;AAAA,MACpB,iBAAiB,aAAa;AAAA,MAC9B,aAAa,aAAa,CAAC;AAAA,IAC5B,CAAC;AACD;AAAA,EACD;AAEA,MAAI,gBAAgB,QAAQ;AAC3B,UAAM,qBAAqB,oBAAI,IAAY;AAC3C,UAAM,cAAc,oBAAI,IAAY;AAEpC,UAAM,aAA+C,CAAC;AACtD,UAAM,WAAW,wBAAC,eACjB,KAAK;AAAA,MACJ,WAAW,UAAU,EAAE;AAAA,MACvB,WAAW,UAAU,EAAE;AAAA,IACxB,GAJgB;AAMjB,QAAI,cAAc;AAClB,QAAI,kBAA0C;AAC9C,UAAM,eAAe;AACrB,WAAQ,kBAAkB,aAAa,KAAK,IAAI,GAAI;AACnD,iBAAW,KAAK,EAAE,OAAO,aAAa,KAAK,gBAAgB,MAAM,CAAC;AAClE,oBAAc,gBAAgB,QAAQ,gBAAgB,CAAC,EAAE;AAAA,IAC1D;AACA,QAAI,cAAc,KAAK,QAAQ;AAC9B,iBAAW,KAAK,EAAE,OAAO,aAAa,KAAK,KAAK,OAAO,CAAC;AAAA,IACzD;AAEA,QAAI,YAAY;AAChB,eAAW,EAAE,iBAAiB,YAAY,KAAK,iBAAiB;AAC/D,UAAI,uBAAuB,GAAG;AAC7B;AAAA,MACD;AAEA,aACC,QAAQ,WAAW,YAAY,CAAC,CAAC,KACjC,kBAAkB,WAAW,SAAS,EAAE,KACvC;AACD;AAAA,MACD;AACA,UAAI,UAAU;AACd,aACC,QAAQ,WAAW,UAAU,CAAC,CAAC,KAC/B,kBAAkB,YAAY,SAAS,WAAW,OAAO,EAAE,KAC1D;AACD;AAAA,MACD;AAEA,UAAI,QAAQ,oBAAoB;AAC/B,iBACK,cAAc,KAAK;AAAA,UACtB;AAAA,UACA,YAAY,QAAQ;AAAA,QACrB,GACA,cAAc,WACd,eACC;AACD,6BAAmB,IAAI,WAAW;AAAA,QACnC;AAAA,MACD;AAEA,UAAI,cAAc;AAClB,UAAI,SAAS;AACb,eAAS,YAAY,WAAW,aAAa,SAAS,aAAa;AAClE,YAAI,cAAc,SAAS,SAAS;AACpC,YACC,QAAQ,gBAAgB,gBACxB,YAAY,SAAS,QAAQ,eAAe,cAC3C;AACD,mBAAS,KAAK;AAAA,YACb,kBAAkB,WAAW,SAAS,EAAE,QAAQ;AAAA,YAChD;AAAA,UACD;AACA,wBAAc,YAAY;AAAA,YACzB;AAAA,YACA,QAAQ,eAAe;AAAA,UACxB;AAAA,QACD;AACA,uBAAe,GAAG,WAAW;AAAA;AAC7B,oBAAY,IAAI,SAAS;AAAA,MAC1B;AAEA,YAAM,YAAY,IAAI;AAAA,QACrB;AAAA,QACA,kBAAkB,WAAW,SAAS,EAAE;AAAA,QACxC;AAAA,QACA,kBACC,YAAY,SACZ,WAAW,OAAO,EAAE;AAAA,MACtB;AACA,YAAM,eAAe,IAAI;AAAA,QACxB;AAAA,QACA,kBAAkB,WAAW,SAAS,EAAE,QAAQ;AAAA,QAChD,UAAU;AAAA,QACV,kBACC,YAAY,SACZ,WAAW,OAAO,EAAE,SACnB,YAAY,YAAY,SAAS;AAAA,MACpC;AAEA,YAAM,QAA0B;AAAA,QAC/B,gBAAgB;AAAA,UACf;AAAA,YACC,QAAQ;AAAA,YACR,SAAS;AAAA,UACV;AAAA,QACD;AAAA,QACA;AAAA,MACD;AAEA,cAAQ,KAAK,KAAK;AAElB,UAAI,QAAQ,oBAAoB;AAC/B,iBACK,cAAc,UAAU,GAC5B,eACA,KAAK;AAAA,UACJ,UAAU,QAAQ;AAAA,UAClB,WAAW,SAAS;AAAA,QACrB,GACA,eACC;AACD,6BAAmB,IAAI,WAAW;AAAA,QACnC;AAAA,MACD;AAAA,IACD;AACA,eAAW,eAAe,oBAAoB;AAC7C,UAAI,CAAC,YAAY,IAAI,WAAW,GAAG;AAClC,gBAAQ,KAAK;AAAA,UACZ,MAAM,SAAS,WAAW;AAAA,UAC1B,YAAY,cAAc;AAAA,QAC3B,CAAC;AAAA,MACF;AAAA,IACD;AAAA,EACD;AACA,SAAO;AACR,GAtK8B;",
  "names": []
}
