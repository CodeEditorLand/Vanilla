{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/search/common/searchExtConversionTypes.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { asArray, coalesce } from '../../../../base/common/arrays.js';\nimport { CancellationToken } from '../../../../base/common/cancellation.js';\nimport { URI } from '../../../../base/common/uri.js';\nimport { IProgress } from '../../../../platform/progress/common/progress.js';\nimport { DEFAULT_TEXT_SEARCH_PREVIEW_OPTIONS } from './search.js';\nimport { Range, FileSearchProviderNew, FileSearchProviderOptions, ProviderResult, TextSearchCompleteNew, TextSearchContextNew, TextSearchMatchNew, TextSearchProviderNew, TextSearchProviderOptions, TextSearchQueryNew, TextSearchResultNew, AITextSearchProviderNew, TextSearchCompleteMessage } from './searchExtTypes.js';\n\n// old types that are retained for backward compatibility\n// TODO: delete this when search apis are adopted by all first-party extensions\n\n/**\n * A relative pattern is a helper to construct glob patterns that are matched\n * relatively to a base path. The base path can either be an absolute file path\n * or a [workspace folder](#WorkspaceFolder).\n */\nexport interface RelativePattern {\n\n\t/**\n\t * A base file path to which this pattern will be matched against relatively.\n\t */\n\tbase: string;\n\n\t/**\n\t * A file glob pattern like `*.{ts,js}` that will be matched on file paths\n\t * relative to the base path.\n\t *\n\t * Example: Given a base of `/home/work/folder` and a file path of `/home/work/folder/index.js`,\n\t * the file glob pattern will match on `index.js`.\n\t */\n\tpattern: string;\n}\n\n/**\n * A file glob pattern to match file paths against. This can either be a glob pattern string\n * (like `** /*.{ts,js}` without space before / or `*.{ts,js}`) or a [relative pattern](#RelativePattern).\n *\n * Glob patterns can have the following syntax:\n * * `*` to match zero or more characters in a path segment\n * * `?` to match on one character in a path segment\n * * `**` to match any number of path segments, including none\n * * `{}` to group conditions (e.g. `** /*.{ts,js}` without space before / matches all TypeScript and JavaScript files)\n * * `[]` to declare a range of characters to match in a path segment (e.g., `example.[0-9]` to match on `example.0`, `example.1`, \u2026)\n * * `[!...]` to negate a range of characters to match in a path segment (e.g., `example.[!0-9]` to match on `example.a`, `example.b`, but not `example.0`)\n *\n * Note: a backslash (`\\`) is not valid within a glob pattern. If you have an existing file\n * path to match against, consider to use the [relative pattern](#RelativePattern) support\n * that takes care of converting any backslash into slash. Otherwise, make sure to convert\n * any backslash to slash when creating the glob pattern.\n */\nexport type GlobPattern = string | RelativePattern;\n\n/**\n * The parameters of a query for text search.\n */\nexport interface TextSearchQuery {\n\t/**\n\t * The text pattern to search for.\n\t */\n\tpattern: string;\n\n\t/**\n\t * Whether or not `pattern` should match multiple lines of text.\n\t */\n\tisMultiline?: boolean;\n\n\t/**\n\t * Whether or not `pattern` should be interpreted as a regular expression.\n\t */\n\tisRegExp?: boolean;\n\n\t/**\n\t * Whether or not the search should be case-sensitive.\n\t */\n\tisCaseSensitive?: boolean;\n\n\t/**\n\t * Whether or not to search for whole word matches only.\n\t */\n\tisWordMatch?: boolean;\n}\n\n/**\n * A file glob pattern to match file paths against.\n * TODO@roblou - merge this with the GlobPattern docs/definition in vscode.d.ts.\n * @see [GlobPattern](#GlobPattern)\n */\nexport type GlobString = string;\n\n/**\n * Options common to file and text search\n */\nexport interface SearchOptions {\n\t/**\n\t * The root folder to search within.\n\t */\n\tfolder: URI;\n\n\t/**\n\t * Files that match an `includes` glob pattern should be included in the search.\n\t */\n\tincludes: GlobString[];\n\n\t/**\n\t * Files that match an `excludes` glob pattern should be excluded from the search.\n\t */\n\texcludes: GlobString[];\n\n\t/**\n\t * Whether external files that exclude files, like .gitignore, should be respected.\n\t * See the vscode setting `\"search.useIgnoreFiles\"`.\n\t */\n\tuseIgnoreFiles: boolean;\n\n\t/**\n\t * Whether symlinks should be followed while searching.\n\t * See the vscode setting `\"search.followSymlinks\"`.\n\t */\n\tfollowSymlinks: boolean;\n\n\t/**\n\t * Whether global files that exclude files, like .gitignore, should be respected.\n\t * See the vscode setting `\"search.useGlobalIgnoreFiles\"`.\n\t */\n\tuseGlobalIgnoreFiles: boolean;\n\n\t/**\n\t * Whether files in parent directories that exclude files, like .gitignore, should be respected.\n\t * See the vscode setting `\"search.useParentIgnoreFiles\"`.\n\t */\n\tuseParentIgnoreFiles: boolean;\n}\n\n/**\n * Options to specify the size of the result text preview.\n * These options don't affect the size of the match itself, just the amount of preview text.\n */\nexport interface TextSearchPreviewOptions {\n\t/**\n\t * The maximum number of lines in the preview.\n\t * Only search providers that support multiline search will ever return more than one line in the match.\n\t */\n\tmatchLines: number;\n\n\t/**\n\t * The maximum number of characters included per line.\n\t */\n\tcharsPerLine: number;\n}\n\n/**\n * Options that apply to text search.\n */\nexport interface TextSearchOptions extends SearchOptions {\n\t/**\n\t * The maximum number of results to be returned.\n\t */\n\tmaxResults: number;\n\n\t/**\n\t * Options to specify the size of the result text preview.\n\t */\n\tpreviewOptions?: TextSearchPreviewOptions;\n\n\t/**\n\t * Exclude files larger than `maxFileSize` in bytes.\n\t */\n\tmaxFileSize?: number;\n\n\t/**\n\t * Interpret files using this encoding.\n\t * See the vscode setting `\"files.encoding\"`\n\t */\n\tencoding?: string;\n\n\t/**\n\t * Number of lines of context to include before each match.\n\t */\n\tbeforeContext?: number;\n\n\t/**\n\t * Number of lines of context to include after each match.\n\t */\n\tafterContext?: number;\n}\n/**\n * Options that apply to AI text search.\n */\nexport interface AITextSearchOptions extends SearchOptions {\n\t/**\n\t * The maximum number of results to be returned.\n\t */\n\tmaxResults: number;\n\n\t/**\n\t * Options to specify the size of the result text preview.\n\t */\n\tpreviewOptions?: TextSearchPreviewOptions;\n\n\t/**\n\t * Exclude files larger than `maxFileSize` in bytes.\n\t */\n\tmaxFileSize?: number;\n\n\t/**\n\t * Number of lines of context to include before each match.\n\t */\n\tbeforeContext?: number;\n\n\t/**\n\t * Number of lines of context to include after each match.\n\t */\n\tafterContext?: number;\n}\n\n/**\n * Information collected when text search is complete.\n */\nexport interface TextSearchComplete {\n\t/**\n\t * Whether the search hit the limit on the maximum number of search results.\n\t * `maxResults` on [`TextSearchOptions`](#TextSearchOptions) specifies the max number of results.\n\t * - If exactly that number of matches exist, this should be false.\n\t * - If `maxResults` matches are returned and more exist, this should be true.\n\t * - If search hits an internal limit which is less than `maxResults`, this should be true.\n\t */\n\tlimitHit?: boolean;\n\n\t/**\n\t * Additional information regarding the state of the completed search.\n\t *\n\t * Supports links in markdown syntax:\n\t * - Click to [run a command](command:workbench.action.OpenQuickPick)\n\t * - Click to [open a website](https://aka.ms)\n\t */\n\tmessage?: TextSearchCompleteMessage | TextSearchCompleteMessage[];\n}\n\n/**\n * The parameters of a query for file search.\n */\nexport interface FileSearchQuery {\n\t/**\n\t * The search pattern to match against file paths.\n\t */\n\tpattern: string;\n}\n\n/**\n * Options that apply to file search.\n */\nexport interface FileSearchOptions extends SearchOptions {\n\t/**\n\t * The maximum number of results to be returned.\n\t */\n\tmaxResults?: number;\n\n\t/**\n\t * A CancellationToken that represents the session for this search query. If the provider chooses to, this object can be used as the key for a cache,\n\t * and searches with the same session object can search the same cache. When the token is cancelled, the session is complete and the cache can be cleared.\n\t */\n\tsession?: CancellationToken;\n}\n\n/**\n * A preview of the text result.\n */\nexport interface TextSearchMatchPreview {\n\t/**\n\t * The matching lines of text, or a portion of the matching line that contains the match.\n\t */\n\ttext: string;\n\n\t/**\n\t * The Range within `text` corresponding to the text of the match.\n\t * The number of matches must match the TextSearchMatch's range property.\n\t */\n\tmatches: Range | Range[];\n}\n\n/**\n * A match from a text search\n */\nexport interface TextSearchMatch {\n\t/**\n\t * The uri for the matching document.\n\t */\n\turi: URI;\n\n\t/**\n\t * The range of the match within the document, or multiple ranges for multiple matches.\n\t */\n\tranges: Range | Range[];\n\n\t/**\n\t * A preview of the text match.\n\t */\n\tpreview: TextSearchMatchPreview;\n}\n\n/**\n * Checks if the given object is of type TextSearchMatch.\n * @param object The object to check.\n * @returns True if the object is a TextSearchMatch, false otherwise.\n */\nfunction isTextSearchMatch(object: any): object is TextSearchMatch {\n\treturn 'uri' in object && 'ranges' in object && 'preview' in object;\n}\n\n/**\n * A line of context surrounding a TextSearchMatch.\n */\nexport interface TextSearchContext {\n\t/**\n\t * The uri for the matching document.\n\t */\n\turi: URI;\n\n\t/**\n\t * One line of text.\n\t * previewOptions.charsPerLine applies to this\n\t */\n\ttext: string;\n\n\t/**\n\t * The line number of this line of context.\n\t */\n\tlineNumber: number;\n}\n\nexport type TextSearchResult = TextSearchMatch | TextSearchContext;\n\n/**\n * A FileSearchProvider provides search results for files in the given folder that match a query string. It can be invoked by quickaccess or other extensions.\n *\n * A FileSearchProvider is the more powerful of two ways to implement file search in VS Code. Use a FileSearchProvider if you wish to search within a folder for\n * all files that match the user's query.\n *\n * The FileSearchProvider will be invoked on every keypress in quickaccess. When `workspace.findFiles` is called, it will be invoked with an empty query string,\n * and in that case, every file in the folder should be returned.\n */\nexport interface FileSearchProvider {\n\t/**\n\t * Provide the set of files that match a certain file path pattern.\n\t * @param query The parameters for this query.\n\t * @param options A set of options to consider while searching files.\n\t * @param progress A progress callback that must be invoked for all results.\n\t * @param token A cancellation token.\n\t */\n\tprovideFileSearchResults(query: FileSearchQuery, options: FileSearchOptions, token: CancellationToken): ProviderResult<URI[]>;\n}\n\n/**\n * A TextSearchProvider provides search results for text results inside files in the workspace.\n */\nexport interface TextSearchProvider {\n\t/**\n\t * Provide results that match the given text pattern.\n\t * @param query The parameters for this query.\n\t * @param options A set of options to consider while searching.\n\t * @param progress A progress callback that must be invoked for all results.\n\t * @param token A cancellation token.\n\t */\n\tprovideTextSearchResults(query: TextSearchQuery, options: TextSearchOptions, progress: IProgress<TextSearchResult>, token: CancellationToken): ProviderResult<TextSearchComplete>;\n}\n\nexport interface AITextSearchProvider {\n\t/**\n\t * Provide results that match the given text pattern.\n\t * @param query The parameter for this query.\n\t * @param options A set of options to consider while searching.\n\t * @param progress A progress callback that must be invoked for all results.\n\t * @param token A cancellation token.\n\t */\n\tprovideAITextSearchResults(query: string, options: AITextSearchOptions, progress: IProgress<TextSearchResult>, token: CancellationToken): ProviderResult<TextSearchComplete>;\n}\n\n/**\n * Options that can be set on a findTextInFiles search.\n */\nexport interface FindTextInFilesOptions {\n\t/**\n\t * A [glob pattern](#GlobPattern) that defines the files to search for. The glob pattern\n\t * will be matched against the file paths of files relative to their workspace. Use a [relative pattern](#RelativePattern)\n\t * to restrict the search results to a [workspace folder](#WorkspaceFolder).\n\t */\n\tinclude?: GlobPattern;\n\n\t/**\n\t * A [glob pattern](#GlobPattern) that defines files and folders to exclude. The glob pattern\n\t * will be matched against the file paths of resulting matches relative to their workspace. When `undefined` only default excludes will\n\t * apply, when `null` no excludes will apply.\n\t */\n\texclude?: GlobPattern | null;\n\n\t/**\n\t * The maximum number of results to search for\n\t */\n\tmaxResults?: number;\n\n\t/**\n\t * Whether external files that exclude files, like .gitignore, should be respected.\n\t * See the vscode setting `\"search.useIgnoreFiles\"`.\n\t */\n\tuseIgnoreFiles?: boolean;\n\n\t/**\n\t * Whether global files that exclude files, like .gitignore, should be respected.\n\t * See the vscode setting `\"search.useGlobalIgnoreFiles\"`.\n\t */\n\tuseGlobalIgnoreFiles?: boolean;\n\n\t/**\n\t * Whether files in parent directories that exclude files, like .gitignore, should be respected.\n\t * See the vscode setting `\"search.useParentIgnoreFiles\"`.\n\t */\n\tuseParentIgnoreFiles: boolean;\n\n\t/**\n\t * Whether symlinks should be followed while searching.\n\t * See the vscode setting `\"search.followSymlinks\"`.\n\t */\n\tfollowSymlinks?: boolean;\n\n\t/**\n\t * Interpret files using this encoding.\n\t * See the vscode setting `\"files.encoding\"`\n\t */\n\tencoding?: string;\n\n\t/**\n\t * Options to specify the size of the result text preview.\n\t */\n\tpreviewOptions?: TextSearchPreviewOptions;\n\n\t/**\n\t * Number of lines of context to include before each match.\n\t */\n\tbeforeContext?: number;\n\n\t/**\n\t * Number of lines of context to include after each match.\n\t */\n\tafterContext?: number;\n}\n\nfunction newToOldFileProviderOptions(options: FileSearchProviderOptions): FileSearchOptions[] {\n\treturn options.folderOptions.map(folderOption => ({\n\t\tfolder: folderOption.folder,\n\t\texcludes: folderOption.excludes.map(e => typeof (e) === 'string' ? e : e.pattern),\n\t\tincludes: folderOption.includes,\n\t\tuseGlobalIgnoreFiles: folderOption.useIgnoreFiles.global,\n\t\tuseIgnoreFiles: folderOption.useIgnoreFiles.local,\n\t\tuseParentIgnoreFiles: folderOption.useIgnoreFiles.parent,\n\t\tfollowSymlinks: folderOption.followSymlinks,\n\t\tmaxResults: options.maxResults,\n\t\tsession: <CancellationToken | undefined>options.session // TODO: make sure that we actually use a cancellation token here.\n\t} satisfies FileSearchOptions));\n}\n\nexport class OldFileSearchProviderConverter implements FileSearchProviderNew {\n\tconstructor(private provider: FileSearchProvider) { }\n\n\tprovideFileSearchResults(pattern: string, options: FileSearchProviderOptions, token: CancellationToken): ProviderResult<URI[]> {\n\t\tconst getResult = async () => {\n\t\t\tconst newOpts = newToOldFileProviderOptions(options);\n\t\t\treturn Promise.all(newOpts.map(\n\t\t\t\to => this.provider.provideFileSearchResults({ pattern }, o, token)));\n\t\t};\n\t\treturn getResult().then(e => coalesce(e).flat());\n\t}\n}\n\nfunction newToOldTextProviderOptions(options: TextSearchProviderOptions): TextSearchOptions[] {\n\treturn options.folderOptions.map(folderOption => ({\n\t\tfolder: folderOption.folder,\n\t\texcludes: folderOption.excludes.map(e => typeof (e) === 'string' ? e : e.pattern),\n\t\tincludes: folderOption.includes,\n\t\tuseGlobalIgnoreFiles: folderOption.useIgnoreFiles.global,\n\t\tuseIgnoreFiles: folderOption.useIgnoreFiles.local,\n\t\tuseParentIgnoreFiles: folderOption.useIgnoreFiles.parent,\n\t\tfollowSymlinks: folderOption.followSymlinks,\n\t\tmaxResults: options.maxResults,\n\t\tpreviewOptions: newToOldPreviewOptions(options.previewOptions),\n\t\tmaxFileSize: options.maxFileSize,\n\t\tencoding: folderOption.encoding,\n\t\tafterContext: options.surroundingContext,\n\t\tbeforeContext: options.surroundingContext\n\t} satisfies TextSearchOptions));\n}\n\nexport function newToOldPreviewOptions(options: {\n\tmatchLines?: number;\n\tcharsPerLine?: number;\n} | undefined\n): {\n\tmatchLines: number;\n\tcharsPerLine: number;\n} {\n\treturn {\n\t\tmatchLines: options?.matchLines ?? DEFAULT_TEXT_SEARCH_PREVIEW_OPTIONS.matchLines,\n\t\tcharsPerLine: options?.charsPerLine ?? DEFAULT_TEXT_SEARCH_PREVIEW_OPTIONS.charsPerLine\n\t};\n}\n\nexport function oldToNewTextSearchResult(result: TextSearchResult): TextSearchResultNew {\n\tif (isTextSearchMatch(result)) {\n\t\tconst ranges = asArray(result.ranges).map((r, i) => {\n\t\t\tconst previewArr = asArray(result.preview.matches);\n\t\t\tconst matchingPreviewRange = previewArr[i];\n\t\t\treturn { sourceRange: r, previewRange: matchingPreviewRange };\n\t\t});\n\t\treturn new TextSearchMatchNew(result.uri, ranges, result.preview.text);\n\t} else {\n\t\treturn new TextSearchContextNew(result.uri, result.text, result.lineNumber);\n\t}\n}\n\nexport class OldTextSearchProviderConverter implements TextSearchProviderNew {\n\tconstructor(private provider: TextSearchProvider) { }\n\n\tprovideTextSearchResults(query: TextSearchQueryNew, options: TextSearchProviderOptions, progress: IProgress<TextSearchResultNew>, token: CancellationToken): ProviderResult<TextSearchCompleteNew> {\n\n\t\tconst progressShim = (oldResult: TextSearchResult) => {\n\t\t\tif (!validateProviderResult(oldResult)) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tprogress.report(oldToNewTextSearchResult(oldResult));\n\t\t};\n\n\t\tconst getResult = async () => {\n\t\t\treturn coalesce(await Promise.all(\n\t\t\t\tnewToOldTextProviderOptions(options).map(\n\t\t\t\t\to => this.provider.provideTextSearchResults(query, o, { report: (e) => progressShim(e) }, token))))\n\t\t\t\t.reduce(\n\t\t\t\t\t(prev, cur) => ({ limitHit: prev.limitHit || cur.limitHit }),\n\t\t\t\t\t{ limitHit: false }\n\t\t\t\t);\n\t\t};\n\t\tconst oldResult = getResult();\n\t\treturn oldResult.then((e) => {\n\t\t\treturn {\n\t\t\t\tlimitHit: e.limitHit,\n\t\t\t\tmessage: coalesce(asArray(e.message))\n\t\t\t} satisfies TextSearchCompleteNew;\n\t\t});\n\t}\n}\n\nexport class OldAITextSearchProviderConverter implements AITextSearchProviderNew {\n\tconstructor(private provider: AITextSearchProvider) { }\n\n\tprovideAITextSearchResults(query: string, options: TextSearchProviderOptions, progress: IProgress<TextSearchResultNew>, token: CancellationToken): ProviderResult<TextSearchCompleteNew> {\n\t\tconst progressShim = (oldResult: TextSearchResult) => {\n\t\t\tif (!validateProviderResult(oldResult)) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tprogress.report(oldToNewTextSearchResult(oldResult));\n\t\t};\n\n\t\tconst getResult = async () => {\n\t\t\treturn coalesce(await Promise.all(\n\t\t\t\tnewToOldTextProviderOptions(options).map(\n\t\t\t\t\to => this.provider.provideAITextSearchResults(query, o, { report: (e) => progressShim(e) }, token))))\n\t\t\t\t.reduce(\n\t\t\t\t\t(prev, cur) => ({ limitHit: prev.limitHit || cur.limitHit }),\n\t\t\t\t\t{ limitHit: false }\n\t\t\t\t);\n\t\t};\n\t\tconst oldResult = getResult();\n\t\treturn oldResult.then((e) => {\n\t\t\treturn {\n\t\t\t\tlimitHit: e.limitHit,\n\t\t\t\tmessage: coalesce(asArray(e.message))\n\t\t\t} satisfies TextSearchCompleteNew;\n\t\t});\n\t}\n}\n\nfunction validateProviderResult(result: TextSearchResult): boolean {\n\tif (extensionResultIsMatch(result)) {\n\t\tif (Array.isArray(result.ranges)) {\n\t\t\tif (!Array.isArray(result.preview.matches)) {\n\t\t\t\tconsole.warn('INVALID - A text search provider match\\'s`ranges` and`matches` properties must have the same type.');\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\tif ((<Range[]>result.preview.matches).length !== result.ranges.length) {\n\t\t\t\tconsole.warn('INVALID - A text search provider match\\'s`ranges` and`matches` properties must have the same length.');\n\t\t\t\treturn false;\n\t\t\t}\n\t\t} else {\n\t\t\tif (Array.isArray(result.preview.matches)) {\n\t\t\t\tconsole.warn('INVALID - A text search provider match\\'s`ranges` and`matches` properties must have the same length.');\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn true;\n}\n\nexport function extensionResultIsMatch(data: TextSearchResult): data is TextSearchMatch {\n\treturn !!(<TextSearchMatch>data).preview;\n}\n"],
  "mappings": "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",
  "names": ["oldResult"]
}
