{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/search/common/fileSearchManager.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as path from '../../../../base/common/path.js';\nimport { CancellationToken, CancellationTokenSource } from '../../../../base/common/cancellation.js';\nimport { toErrorMessage } from '../../../../base/common/errorMessage.js';\nimport * as glob from '../../../../base/common/glob.js';\nimport * as resources from '../../../../base/common/resources.js';\nimport { StopWatch } from '../../../../base/common/stopwatch.js';\nimport { URI } from '../../../../base/common/uri.js';\nimport { IFileMatch, IFileSearchProviderStats, IFolderQuery, ISearchCompleteStats, IFileQuery, QueryGlobTester, resolvePatternsForProvider, hasSiblingFn, excludeToGlobPattern, DEFAULT_MAX_SEARCH_RESULTS } from './search.js';\nimport { FileSearchProviderFolderOptions, FileSearchProviderNew, FileSearchProviderOptions } from './searchExtTypes.js';\nimport { TernarySearchTree } from '../../../../base/common/ternarySearchTree.js';\nimport { OldFileSearchProviderConverter } from './searchExtConversionTypes.js';\n\ninterface IInternalFileMatch {\n\tbase: URI;\n\toriginal?: URI;\n\trelativePath?: string; // Not present for extraFiles or absolute path matches\n\tbasename: string;\n\tsize?: number;\n}\n\ninterface IDirectoryEntry {\n\tbase: URI;\n\trelativePath: string;\n\tbasename: string;\n}\n\ninterface FolderQueryInfo {\n\tqueryTester: QueryGlobTester;\n\tnoSiblingsClauses: boolean;\n\tfolder: URI;\n\ttree: IDirectoryTree;\n}\n\ninterface IDirectoryTree {\n\trootEntries: IDirectoryEntry[];\n\tpathToEntries: { [relativePath: string]: IDirectoryEntry[] };\n}\n\nclass FileSearchEngine {\n\tprivate filePattern?: string;\n\tprivate includePattern?: glob.ParsedExpression;\n\tprivate maxResults?: number;\n\tprivate exists?: boolean;\n\tprivate isLimitHit = false;\n\tprivate resultCount = 0;\n\tprivate isCanceled = false;\n\n\tprivate activeCancellationTokens: Set<CancellationTokenSource>;\n\n\tprivate globalExcludePattern?: glob.ParsedExpression;\n\n\tconstructor(private config: IFileQuery, private provider: FileSearchProviderNew, private sessionLifecycle?: SessionLifecycle) {\n\t\tthis.filePattern = config.filePattern;\n\t\tthis.includePattern = config.includePattern && glob.parse(config.includePattern);\n\t\tthis.maxResults = config.maxResults || undefined;\n\t\tthis.exists = config.exists;\n\t\tthis.activeCancellationTokens = new Set<CancellationTokenSource>();\n\n\t\tthis.globalExcludePattern = config.excludePattern && glob.parse(config.excludePattern);\n\t}\n\n\tcancel(): void {\n\t\tthis.isCanceled = true;\n\t\tthis.activeCancellationTokens.forEach(t => t.cancel());\n\t\tthis.activeCancellationTokens = new Set();\n\t}\n\n\tsearch(_onResult: (match: IInternalFileMatch) => void): Promise<IInternalSearchComplete> {\n\t\tconst folderQueries = this.config.folderQueries || [];\n\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tconst onResult = (match: IInternalFileMatch) => {\n\t\t\t\tthis.resultCount++;\n\t\t\t\t_onResult(match);\n\t\t\t};\n\n\t\t\t// Support that the file pattern is a full path to a file that exists\n\t\t\tif (this.isCanceled) {\n\t\t\t\treturn resolve({ limitHit: this.isLimitHit });\n\t\t\t}\n\n\t\t\t// For each extra file\n\t\t\tif (this.config.extraFileResources) {\n\t\t\t\tthis.config.extraFileResources\n\t\t\t\t\t.forEach(extraFile => {\n\t\t\t\t\t\tconst extraFileStr = extraFile.toString(); // ?\n\t\t\t\t\t\tconst basename = path.basename(extraFileStr);\n\t\t\t\t\t\tif (this.globalExcludePattern && this.globalExcludePattern(extraFileStr, basename)) {\n\t\t\t\t\t\t\treturn; // excluded\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// File: Check for match on file pattern and include pattern\n\t\t\t\t\t\tthis.matchFile(onResult, { base: extraFile, basename });\n\t\t\t\t\t});\n\t\t\t}\n\n\t\t\t// For each root folder'\n\n\t\t\t// NEW: can just call with an array of folder info\n\t\t\tthis.doSearch(folderQueries, onResult).then(stats => {\n\t\t\t\tresolve({\n\t\t\t\t\tlimitHit: this.isLimitHit,\n\t\t\t\t\tstats: stats || undefined // Only looking at single-folder workspace stats...\n\t\t\t\t});\n\t\t\t}, (err: Error) => {\n\t\t\t\treject(new Error(toErrorMessage(err)));\n\t\t\t});\n\t\t});\n\t}\n\n\n\tprivate async doSearch(fqs: IFolderQuery<URI>[], onResult: (match: IInternalFileMatch) => void): Promise<IFileSearchProviderStats | null> {\n\t\tconst cancellation = new CancellationTokenSource();\n\t\tconst folderOptions = fqs.map(fq => this.getSearchOptionsForFolder(fq));\n\t\tconst session = this.provider instanceof OldFileSearchProviderConverter ? this.sessionLifecycle?.tokenSource.token : this.sessionLifecycle?.obj;\n\t\tconst options: FileSearchProviderOptions = {\n\t\t\tfolderOptions,\n\t\t\tmaxResults: this.config.maxResults ?? DEFAULT_MAX_SEARCH_RESULTS,\n\t\t\tsession\n\t\t};\n\n\n\t\tconst folderMappings: TernarySearchTree<URI, FolderQueryInfo> = TernarySearchTree.forUris<FolderQueryInfo>();\n\t\tfqs.forEach(fq => {\n\t\t\tconst queryTester = new QueryGlobTester(this.config, fq);\n\t\t\tconst noSiblingsClauses = !queryTester.hasSiblingExcludeClauses();\n\t\t\tfolderMappings.set(fq.folder, { queryTester, noSiblingsClauses, folder: fq.folder, tree: this.initDirectoryTree() });\n\t\t});\n\n\n\t\tlet providerSW: StopWatch;\n\n\t\ttry {\n\t\t\tthis.activeCancellationTokens.add(cancellation);\n\n\t\t\tproviderSW = StopWatch.create();\n\t\t\tconst results = await this.provider.provideFileSearchResults(\n\t\t\t\tthis.config.filePattern || '',\n\t\t\t\toptions,\n\t\t\t\tcancellation.token);\n\t\t\tconst providerTime = providerSW.elapsed();\n\t\t\tconst postProcessSW = StopWatch.create();\n\n\t\t\tif (this.isCanceled && !this.isLimitHit) {\n\t\t\t\treturn null;\n\t\t\t}\n\n\n\t\t\tif (results) {\n\t\t\t\tresults.forEach(result => {\n\n\t\t\t\t\tconst fqFolderInfo = folderMappings.findSubstr(result)!;\n\t\t\t\t\tconst relativePath = path.posix.relative(fqFolderInfo.folder.path, result.path);\n\n\t\t\t\t\tif (fqFolderInfo.noSiblingsClauses) {\n\t\t\t\t\t\tconst basename = path.basename(result.path);\n\t\t\t\t\t\tthis.matchFile(onResult, { base: fqFolderInfo.folder, relativePath, basename });\n\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\t// TODO: Optimize siblings clauses with ripgrep here.\n\t\t\t\t\tthis.addDirectoryEntries(fqFolderInfo.tree, fqFolderInfo.folder, relativePath, onResult);\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tif (this.isCanceled && !this.isLimitHit) {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\tfolderMappings.forEach(e => {\n\t\t\t\tthis.matchDirectoryTree(e.tree, e.queryTester, onResult);\n\t\t\t});\n\n\t\t\treturn {\n\t\t\t\tproviderTime,\n\t\t\t\tpostProcessTime: postProcessSW.elapsed()\n\t\t\t};\n\t\t} finally {\n\t\t\tcancellation.dispose();\n\t\t\tthis.activeCancellationTokens.delete(cancellation);\n\t\t}\n\t}\n\n\tprivate getSearchOptionsForFolder(fq: IFolderQuery<URI>): FileSearchProviderFolderOptions {\n\t\tconst includes = resolvePatternsForProvider(this.config.includePattern, fq.includePattern);\n\t\tlet excludePattern = fq.excludePattern?.map(e => ({\n\t\t\tfolder: e.folder,\n\t\t\tpatterns: resolvePatternsForProvider(this.config.excludePattern, e.pattern)\n\t\t}));\n\t\tif (!excludePattern?.length) {\n\t\t\texcludePattern = [{\n\t\t\t\tfolder: undefined,\n\t\t\t\tpatterns: resolvePatternsForProvider(this.config.excludePattern, undefined)\n\t\t\t}];\n\t\t}\n\t\tconst excludes = excludeToGlobPattern(excludePattern);\n\n\t\treturn {\n\t\t\tfolder: fq.folder,\n\t\t\texcludes,\n\t\t\tincludes,\n\t\t\tuseIgnoreFiles: {\n\t\t\t\tlocal: !fq.disregardIgnoreFiles,\n\t\t\t\tparent: !fq.disregardParentIgnoreFiles,\n\t\t\t\tglobal: !fq.disregardGlobalIgnoreFiles\n\t\t\t},\n\t\t\tfollowSymlinks: !fq.ignoreSymlinks,\n\t\t};\n\t}\n\n\tprivate initDirectoryTree(): IDirectoryTree {\n\t\tconst tree: IDirectoryTree = {\n\t\t\trootEntries: [],\n\t\t\tpathToEntries: Object.create(null)\n\t\t};\n\t\ttree.pathToEntries['.'] = tree.rootEntries;\n\t\treturn tree;\n\t}\n\n\tprivate addDirectoryEntries({ pathToEntries }: IDirectoryTree, base: URI, relativeFile: string, onResult: (result: IInternalFileMatch) => void) {\n\t\t// Support relative paths to files from a root resource (ignores excludes)\n\t\tif (relativeFile === this.filePattern) {\n\t\t\tconst basename = path.basename(this.filePattern);\n\t\t\tthis.matchFile(onResult, { base: base, relativePath: this.filePattern, basename });\n\t\t}\n\n\t\tfunction add(relativePath: string) {\n\t\t\tconst basename = path.basename(relativePath);\n\t\t\tconst dirname = path.dirname(relativePath);\n\t\t\tlet entries = pathToEntries[dirname];\n\t\t\tif (!entries) {\n\t\t\t\tentries = pathToEntries[dirname] = [];\n\t\t\t\tadd(dirname);\n\t\t\t}\n\t\t\tentries.push({\n\t\t\t\tbase,\n\t\t\t\trelativePath,\n\t\t\t\tbasename\n\t\t\t});\n\t\t}\n\n\t\tadd(relativeFile);\n\t}\n\n\tprivate matchDirectoryTree({ rootEntries, pathToEntries }: IDirectoryTree, queryTester: QueryGlobTester, onResult: (result: IInternalFileMatch) => void) {\n\t\tconst self = this;\n\t\tconst filePattern = this.filePattern;\n\t\tfunction matchDirectory(entries: IDirectoryEntry[]) {\n\t\t\tconst hasSibling = hasSiblingFn(() => entries.map(entry => entry.basename));\n\t\t\tfor (let i = 0, n = entries.length; i < n; i++) {\n\t\t\t\tconst entry = entries[i];\n\t\t\t\tconst { relativePath, basename } = entry;\n\n\t\t\t\t// Check exclude pattern\n\t\t\t\t// If the user searches for the exact file name, we adjust the glob matching\n\t\t\t\t// to ignore filtering by siblings because the user seems to know what they\n\t\t\t\t// are searching for and we want to include the result in that case anyway\n\t\t\t\tif (queryTester.matchesExcludesSync(relativePath, basename, filePattern !== basename ? hasSibling : undefined)) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tconst sub = pathToEntries[relativePath];\n\t\t\t\tif (sub) {\n\t\t\t\t\tmatchDirectory(sub);\n\t\t\t\t} else {\n\t\t\t\t\tif (relativePath === filePattern) {\n\t\t\t\t\t\tcontinue; // ignore file if its path matches with the file pattern because that is already matched above\n\t\t\t\t\t}\n\n\t\t\t\t\tself.matchFile(onResult, entry);\n\t\t\t\t}\n\n\t\t\t\tif (self.isLimitHit) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tmatchDirectory(rootEntries);\n\t}\n\n\tprivate matchFile(onResult: (result: IInternalFileMatch) => void, candidate: IInternalFileMatch): void {\n\t\tif (!this.includePattern || (candidate.relativePath && this.includePattern(candidate.relativePath, candidate.basename))) {\n\t\t\tif (this.exists || (this.maxResults && this.resultCount >= this.maxResults)) {\n\t\t\t\tthis.isLimitHit = true;\n\t\t\t\tthis.cancel();\n\t\t\t}\n\n\t\t\tif (!this.isLimitHit) {\n\t\t\t\tonResult(candidate);\n\t\t\t}\n\t\t}\n\t}\n}\n\ninterface IInternalSearchComplete {\n\tlimitHit: boolean;\n\tstats?: IFileSearchProviderStats;\n}\n\n/**\n * For backwards compatibility, store both a cancellation token and a session object. The session object is the new implementation, where\n */\nclass SessionLifecycle {\n\tprivate _obj: object | undefined;\n\tpublic readonly tokenSource: CancellationTokenSource;\n\n\tconstructor() {\n\t\tthis._obj = new Object();\n\t\tthis.tokenSource = new CancellationTokenSource();\n\t}\n\n\tpublic get obj() {\n\t\tif (this._obj) {\n\t\t\treturn this._obj;\n\t\t}\n\n\t\tthrow new Error('Session object has been dereferenced.');\n\t}\n\n\tcancel() {\n\t\tthis.tokenSource.cancel();\n\t\tthis._obj = undefined; // dereference\n\t}\n}\n\nexport class FileSearchManager {\n\n\tprivate static readonly BATCH_SIZE = 512;\n\n\tprivate readonly sessions = new Map<string, SessionLifecycle>();\n\n\tfileSearch(config: IFileQuery, provider: FileSearchProviderNew, onBatch: (matches: IFileMatch[]) => void, token: CancellationToken): Promise<ISearchCompleteStats> {\n\t\tconst sessionTokenSource = this.getSessionTokenSource(config.cacheKey);\n\t\tconst engine = new FileSearchEngine(config, provider, sessionTokenSource);\n\n\t\tlet resultCount = 0;\n\t\tconst onInternalResult = (batch: IInternalFileMatch[]) => {\n\t\t\tresultCount += batch.length;\n\t\t\tonBatch(batch.map(m => this.rawMatchToSearchItem(m)));\n\t\t};\n\n\t\treturn this.doSearch(engine, FileSearchManager.BATCH_SIZE, onInternalResult, token).then(\n\t\t\tresult => {\n\t\t\t\treturn {\n\t\t\t\t\tlimitHit: result.limitHit,\n\t\t\t\t\tstats: result.stats ? {\n\t\t\t\t\t\tfromCache: false,\n\t\t\t\t\t\ttype: 'fileSearchProvider',\n\t\t\t\t\t\tresultCount,\n\t\t\t\t\t\tdetailStats: result.stats\n\t\t\t\t\t} : undefined,\n\t\t\t\t\tmessages: []\n\t\t\t\t};\n\t\t\t});\n\t}\n\n\tclearCache(cacheKey: string): void {\n\t\t// cancel the token\n\t\tthis.sessions.get(cacheKey)?.cancel();\n\t\t// with no reference to this, it will be removed from WeakMaps\n\t\tthis.sessions.delete(cacheKey);\n\t}\n\n\tprivate getSessionTokenSource(cacheKey: string | undefined): SessionLifecycle | undefined {\n\t\tif (!cacheKey) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\tif (!this.sessions.has(cacheKey)) {\n\t\t\tthis.sessions.set(cacheKey, new SessionLifecycle());\n\t\t}\n\n\t\treturn this.sessions.get(cacheKey);\n\t}\n\n\tprivate rawMatchToSearchItem(match: IInternalFileMatch): IFileMatch {\n\t\tif (match.relativePath) {\n\t\t\treturn {\n\t\t\t\tresource: resources.joinPath(match.base, match.relativePath)\n\t\t\t};\n\t\t} else {\n\t\t\t// extraFileResources\n\t\t\treturn {\n\t\t\t\tresource: match.base\n\t\t\t};\n\t\t}\n\t}\n\n\tprivate doSearch(engine: FileSearchEngine, batchSize: number, onResultBatch: (matches: IInternalFileMatch[]) => void, token: CancellationToken): Promise<IInternalSearchComplete> {\n\t\tconst listener = token.onCancellationRequested(() => {\n\t\t\tengine.cancel();\n\t\t});\n\n\t\tconst _onResult = (match: IInternalFileMatch) => {\n\t\t\tif (match) {\n\t\t\t\tbatch.push(match);\n\t\t\t\tif (batchSize > 0 && batch.length >= batchSize) {\n\t\t\t\t\tonResultBatch(batch);\n\t\t\t\t\tbatch = [];\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tlet batch: IInternalFileMatch[] = [];\n\t\treturn engine.search(_onResult).then(result => {\n\t\t\tif (batch.length) {\n\t\t\t\tonResultBatch(batch);\n\t\t\t}\n\n\t\t\tlistener.dispose();\n\t\t\treturn result;\n\t\t}, error => {\n\t\t\tif (batch.length) {\n\t\t\t\tonResultBatch(batch);\n\t\t\t}\n\n\t\t\tlistener.dispose();\n\t\t\treturn Promise.reject(error);\n\t\t});\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
