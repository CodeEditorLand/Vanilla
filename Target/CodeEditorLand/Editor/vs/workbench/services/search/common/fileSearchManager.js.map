{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/search/common/fileSearchManager.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport {\n\ttype CancellationToken,\n\tCancellationTokenSource,\n} from \"../../../../base/common/cancellation.js\";\nimport { toErrorMessage } from \"../../../../base/common/errorMessage.js\";\nimport * as glob from \"../../../../base/common/glob.js\";\nimport * as path from \"../../../../base/common/path.js\";\nimport * as resources from \"../../../../base/common/resources.js\";\nimport { StopWatch } from \"../../../../base/common/stopwatch.js\";\nimport { TernarySearchTree } from \"../../../../base/common/ternarySearchTree.js\";\nimport type { URI } from \"../../../../base/common/uri.js\";\nimport {\n\tDEFAULT_MAX_SEARCH_RESULTS,\n\ttype IFileMatch,\n\ttype IFileQuery,\n\ttype IFileSearchProviderStats,\n\ttype IFolderQuery,\n\ttype ISearchCompleteStats,\n\tQueryGlobTester,\n\texcludeToGlobPattern,\n\thasSiblingFn,\n\tresolvePatternsForProvider,\n} from \"./search.js\";\nimport { OldFileSearchProviderConverter } from \"./searchExtConversionTypes.js\";\nimport type {\n\tFileSearchProviderFolderOptions,\n\tFileSearchProviderNew,\n\tFileSearchProviderOptions,\n} from \"./searchExtTypes.js\";\n\ninterface IInternalFileMatch {\n\tbase: URI;\n\toriginal?: URI;\n\trelativePath?: string; // Not present for extraFiles or absolute path matches\n\tbasename: string;\n\tsize?: number;\n}\n\ninterface IDirectoryEntry {\n\tbase: URI;\n\trelativePath: string;\n\tbasename: string;\n}\n\ninterface FolderQueryInfo {\n\tqueryTester: QueryGlobTester;\n\tnoSiblingsClauses: boolean;\n\tfolder: URI;\n\ttree: IDirectoryTree;\n}\n\ninterface IDirectoryTree {\n\trootEntries: IDirectoryEntry[];\n\tpathToEntries: { [relativePath: string]: IDirectoryEntry[] };\n}\n\nclass FileSearchEngine {\n\tprivate filePattern?: string;\n\tprivate includePattern?: glob.ParsedExpression;\n\tprivate maxResults?: number;\n\tprivate exists?: boolean;\n\tprivate isLimitHit = false;\n\tprivate resultCount = 0;\n\tprivate isCanceled = false;\n\n\tprivate activeCancellationTokens: Set<CancellationTokenSource>;\n\n\tprivate globalExcludePattern?: glob.ParsedExpression;\n\n\tconstructor(\n\t\tprivate config: IFileQuery,\n\t\tprivate provider: FileSearchProviderNew,\n\t\tprivate sessionLifecycle?: SessionLifecycle,\n\t) {\n\t\tthis.filePattern = config.filePattern;\n\t\tthis.includePattern =\n\t\t\tconfig.includePattern && glob.parse(config.includePattern);\n\t\tthis.maxResults = config.maxResults || undefined;\n\t\tthis.exists = config.exists;\n\t\tthis.activeCancellationTokens = new Set<CancellationTokenSource>();\n\n\t\tthis.globalExcludePattern =\n\t\t\tconfig.excludePattern && glob.parse(config.excludePattern);\n\t}\n\n\tcancel(): void {\n\t\tthis.isCanceled = true;\n\t\tthis.activeCancellationTokens.forEach((t) => t.cancel());\n\t\tthis.activeCancellationTokens = new Set();\n\t}\n\n\tsearch(\n\t\t_onResult: (match: IInternalFileMatch) => void,\n\t): Promise<IInternalSearchComplete> {\n\t\tconst folderQueries = this.config.folderQueries || [];\n\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tconst onResult = (match: IInternalFileMatch) => {\n\t\t\t\tthis.resultCount++;\n\t\t\t\t_onResult(match);\n\t\t\t};\n\n\t\t\t// Support that the file pattern is a full path to a file that exists\n\t\t\tif (this.isCanceled) {\n\t\t\t\treturn resolve({ limitHit: this.isLimitHit });\n\t\t\t}\n\n\t\t\t// For each extra file\n\t\t\tif (this.config.extraFileResources) {\n\t\t\t\tthis.config.extraFileResources.forEach((extraFile) => {\n\t\t\t\t\tconst extraFileStr = extraFile.toString(); // ?\n\t\t\t\t\tconst basename = path.basename(extraFileStr);\n\t\t\t\t\tif (\n\t\t\t\t\t\tthis.globalExcludePattern &&\n\t\t\t\t\t\tthis.globalExcludePattern(extraFileStr, basename)\n\t\t\t\t\t) {\n\t\t\t\t\t\treturn; // excluded\n\t\t\t\t\t}\n\n\t\t\t\t\t// File: Check for match on file pattern and include pattern\n\t\t\t\t\tthis.matchFile(onResult, { base: extraFile, basename });\n\t\t\t\t});\n\t\t\t}\n\n\t\t\t// For each root folder'\n\n\t\t\t// NEW: can just call with an array of folder info\n\t\t\tthis.doSearch(folderQueries, onResult).then(\n\t\t\t\t(stats) => {\n\t\t\t\t\tresolve({\n\t\t\t\t\t\tlimitHit: this.isLimitHit,\n\t\t\t\t\t\tstats: stats || undefined, // Only looking at single-folder workspace stats...\n\t\t\t\t\t});\n\t\t\t\t},\n\t\t\t\t(err: Error) => {\n\t\t\t\t\treject(new Error(toErrorMessage(err)));\n\t\t\t\t},\n\t\t\t);\n\t\t});\n\t}\n\n\tprivate async doSearch(\n\t\tfqs: IFolderQuery<URI>[],\n\t\tonResult: (match: IInternalFileMatch) => void,\n\t): Promise<IFileSearchProviderStats | null> {\n\t\tconst cancellation = new CancellationTokenSource();\n\t\tconst folderOptions = fqs.map((fq) =>\n\t\t\tthis.getSearchOptionsForFolder(fq),\n\t\t);\n\t\tconst session =\n\t\t\tthis.provider instanceof OldFileSearchProviderConverter\n\t\t\t\t? this.sessionLifecycle?.tokenSource.token\n\t\t\t\t: this.sessionLifecycle?.obj;\n\t\tconst options: FileSearchProviderOptions = {\n\t\t\tfolderOptions,\n\t\t\tmaxResults: this.config.maxResults ?? DEFAULT_MAX_SEARCH_RESULTS,\n\t\t\tsession,\n\t\t};\n\n\t\tconst folderMappings: TernarySearchTree<URI, FolderQueryInfo> =\n\t\t\tTernarySearchTree.forUris<FolderQueryInfo>();\n\t\tfqs.forEach((fq) => {\n\t\t\tconst queryTester = new QueryGlobTester(this.config, fq);\n\t\t\tconst noSiblingsClauses = !queryTester.hasSiblingExcludeClauses();\n\t\t\tfolderMappings.set(fq.folder, {\n\t\t\t\tqueryTester,\n\t\t\t\tnoSiblingsClauses,\n\t\t\t\tfolder: fq.folder,\n\t\t\t\ttree: this.initDirectoryTree(),\n\t\t\t});\n\t\t});\n\n\t\tlet providerSW: StopWatch;\n\n\t\ttry {\n\t\t\tthis.activeCancellationTokens.add(cancellation);\n\n\t\t\tproviderSW = StopWatch.create();\n\t\t\tconst results = await this.provider.provideFileSearchResults(\n\t\t\t\tthis.config.filePattern || \"\",\n\t\t\t\toptions,\n\t\t\t\tcancellation.token,\n\t\t\t);\n\t\t\tconst providerTime = providerSW.elapsed();\n\t\t\tconst postProcessSW = StopWatch.create();\n\n\t\t\tif (this.isCanceled && !this.isLimitHit) {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\tif (results) {\n\t\t\t\tresults.forEach((result) => {\n\t\t\t\t\tconst fqFolderInfo = folderMappings.findSubstr(result)!;\n\t\t\t\t\tconst relativePath = path.posix.relative(\n\t\t\t\t\t\tfqFolderInfo.folder.path,\n\t\t\t\t\t\tresult.path,\n\t\t\t\t\t);\n\n\t\t\t\t\tif (fqFolderInfo.noSiblingsClauses) {\n\t\t\t\t\t\tconst basename = path.basename(result.path);\n\t\t\t\t\t\tthis.matchFile(onResult, {\n\t\t\t\t\t\t\tbase: fqFolderInfo.folder,\n\t\t\t\t\t\t\trelativePath,\n\t\t\t\t\t\t\tbasename,\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\t// TODO: Optimize siblings clauses with ripgrep here.\n\t\t\t\t\tthis.addDirectoryEntries(\n\t\t\t\t\t\tfqFolderInfo.tree,\n\t\t\t\t\t\tfqFolderInfo.folder,\n\t\t\t\t\t\trelativePath,\n\t\t\t\t\t\tonResult,\n\t\t\t\t\t);\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tif (this.isCanceled && !this.isLimitHit) {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\tfolderMappings.forEach((e) => {\n\t\t\t\tthis.matchDirectoryTree(e.tree, e.queryTester, onResult);\n\t\t\t});\n\n\t\t\treturn {\n\t\t\t\tproviderTime,\n\t\t\t\tpostProcessTime: postProcessSW.elapsed(),\n\t\t\t};\n\t\t} finally {\n\t\t\tcancellation.dispose();\n\t\t\tthis.activeCancellationTokens.delete(cancellation);\n\t\t}\n\t}\n\n\tprivate getSearchOptionsForFolder(\n\t\tfq: IFolderQuery<URI>,\n\t): FileSearchProviderFolderOptions {\n\t\tconst includes = resolvePatternsForProvider(\n\t\t\tthis.config.includePattern,\n\t\t\tfq.includePattern,\n\t\t);\n\t\tlet excludePattern = fq.excludePattern?.map((e) => ({\n\t\t\tfolder: e.folder,\n\t\t\tpatterns: resolvePatternsForProvider(\n\t\t\t\tthis.config.excludePattern,\n\t\t\t\te.pattern,\n\t\t\t),\n\t\t}));\n\t\tif (!excludePattern?.length) {\n\t\t\texcludePattern = [\n\t\t\t\t{\n\t\t\t\t\tfolder: undefined,\n\t\t\t\t\tpatterns: resolvePatternsForProvider(\n\t\t\t\t\t\tthis.config.excludePattern,\n\t\t\t\t\t\tundefined,\n\t\t\t\t\t),\n\t\t\t\t},\n\t\t\t];\n\t\t}\n\t\tconst excludes = excludeToGlobPattern(excludePattern);\n\n\t\treturn {\n\t\t\tfolder: fq.folder,\n\t\t\texcludes,\n\t\t\tincludes,\n\t\t\tuseIgnoreFiles: {\n\t\t\t\tlocal: !fq.disregardIgnoreFiles,\n\t\t\t\tparent: !fq.disregardParentIgnoreFiles,\n\t\t\t\tglobal: !fq.disregardGlobalIgnoreFiles,\n\t\t\t},\n\t\t\tfollowSymlinks: !fq.ignoreSymlinks,\n\t\t};\n\t}\n\n\tprivate initDirectoryTree(): IDirectoryTree {\n\t\tconst tree: IDirectoryTree = {\n\t\t\trootEntries: [],\n\t\t\tpathToEntries: Object.create(null),\n\t\t};\n\t\ttree.pathToEntries[\".\"] = tree.rootEntries;\n\t\treturn tree;\n\t}\n\n\tprivate addDirectoryEntries(\n\t\t{ pathToEntries }: IDirectoryTree,\n\t\tbase: URI,\n\t\trelativeFile: string,\n\t\tonResult: (result: IInternalFileMatch) => void,\n\t) {\n\t\t// Support relative paths to files from a root resource (ignores excludes)\n\t\tif (relativeFile === this.filePattern) {\n\t\t\tconst basename = path.basename(this.filePattern);\n\t\t\tthis.matchFile(onResult, {\n\t\t\t\tbase: base,\n\t\t\t\trelativePath: this.filePattern,\n\t\t\t\tbasename,\n\t\t\t});\n\t\t}\n\n\t\tfunction add(relativePath: string) {\n\t\t\tconst basename = path.basename(relativePath);\n\t\t\tconst dirname = path.dirname(relativePath);\n\t\t\tlet entries = pathToEntries[dirname];\n\t\t\tif (!entries) {\n\t\t\t\tentries = pathToEntries[dirname] = [];\n\t\t\t\tadd(dirname);\n\t\t\t}\n\t\t\tentries.push({\n\t\t\t\tbase,\n\t\t\t\trelativePath,\n\t\t\t\tbasename,\n\t\t\t});\n\t\t}\n\n\t\tadd(relativeFile);\n\t}\n\n\tprivate matchDirectoryTree(\n\t\t{ rootEntries, pathToEntries }: IDirectoryTree,\n\t\tqueryTester: QueryGlobTester,\n\t\tonResult: (result: IInternalFileMatch) => void,\n\t) {\n\t\tconst self = this;\n\t\tconst filePattern = this.filePattern;\n\t\tfunction matchDirectory(entries: IDirectoryEntry[]) {\n\t\t\tconst hasSibling = hasSiblingFn(() =>\n\t\t\t\tentries.map((entry) => entry.basename),\n\t\t\t);\n\t\t\tfor (let i = 0, n = entries.length; i < n; i++) {\n\t\t\t\tconst entry = entries[i];\n\t\t\t\tconst { relativePath, basename } = entry;\n\n\t\t\t\t// Check exclude pattern\n\t\t\t\t// If the user searches for the exact file name, we adjust the glob matching\n\t\t\t\t// to ignore filtering by siblings because the user seems to know what they\n\t\t\t\t// are searching for and we want to include the result in that case anyway\n\t\t\t\tif (\n\t\t\t\t\tqueryTester.matchesExcludesSync(\n\t\t\t\t\t\trelativePath,\n\t\t\t\t\t\tbasename,\n\t\t\t\t\t\tfilePattern !== basename ? hasSibling : undefined,\n\t\t\t\t\t)\n\t\t\t\t) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tconst sub = pathToEntries[relativePath];\n\t\t\t\tif (sub) {\n\t\t\t\t\tmatchDirectory(sub);\n\t\t\t\t} else {\n\t\t\t\t\tif (relativePath === filePattern) {\n\t\t\t\t\t\tcontinue; // ignore file if its path matches with the file pattern because that is already matched above\n\t\t\t\t\t}\n\n\t\t\t\t\tself.matchFile(onResult, entry);\n\t\t\t\t}\n\n\t\t\t\tif (self.isLimitHit) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tmatchDirectory(rootEntries);\n\t}\n\n\tprivate matchFile(\n\t\tonResult: (result: IInternalFileMatch) => void,\n\t\tcandidate: IInternalFileMatch,\n\t): void {\n\t\tif (\n\t\t\t!this.includePattern ||\n\t\t\t(candidate.relativePath &&\n\t\t\t\tthis.includePattern(candidate.relativePath, candidate.basename))\n\t\t) {\n\t\t\tif (\n\t\t\t\tthis.exists ||\n\t\t\t\t(this.maxResults && this.resultCount >= this.maxResults)\n\t\t\t) {\n\t\t\t\tthis.isLimitHit = true;\n\t\t\t\tthis.cancel();\n\t\t\t}\n\n\t\t\tif (!this.isLimitHit) {\n\t\t\t\tonResult(candidate);\n\t\t\t}\n\t\t}\n\t}\n}\n\ninterface IInternalSearchComplete {\n\tlimitHit: boolean;\n\tstats?: IFileSearchProviderStats;\n}\n\n/**\n * For backwards compatibility, store both a cancellation token and a session object. The session object is the new implementation, where\n */\nclass SessionLifecycle {\n\tprivate _obj: object | undefined;\n\tpublic readonly tokenSource: CancellationTokenSource;\n\n\tconstructor() {\n\t\tthis._obj = new Object();\n\t\tthis.tokenSource = new CancellationTokenSource();\n\t}\n\n\tpublic get obj() {\n\t\tif (this._obj) {\n\t\t\treturn this._obj;\n\t\t}\n\n\t\tthrow new Error(\"Session object has been dereferenced.\");\n\t}\n\n\tcancel() {\n\t\tthis.tokenSource.cancel();\n\t\tthis._obj = undefined; // dereference\n\t}\n}\n\nexport class FileSearchManager {\n\tprivate static readonly BATCH_SIZE = 512;\n\n\tprivate readonly sessions = new Map<string, SessionLifecycle>();\n\n\tfileSearch(\n\t\tconfig: IFileQuery,\n\t\tprovider: FileSearchProviderNew,\n\t\tonBatch: (matches: IFileMatch[]) => void,\n\t\ttoken: CancellationToken,\n\t): Promise<ISearchCompleteStats> {\n\t\tconst sessionTokenSource = this.getSessionTokenSource(config.cacheKey);\n\t\tconst engine = new FileSearchEngine(\n\t\t\tconfig,\n\t\t\tprovider,\n\t\t\tsessionTokenSource,\n\t\t);\n\n\t\tlet resultCount = 0;\n\t\tconst onInternalResult = (batch: IInternalFileMatch[]) => {\n\t\t\tresultCount += batch.length;\n\t\t\tonBatch(batch.map((m) => this.rawMatchToSearchItem(m)));\n\t\t};\n\n\t\treturn this.doSearch(\n\t\t\tengine,\n\t\t\tFileSearchManager.BATCH_SIZE,\n\t\t\tonInternalResult,\n\t\t\ttoken,\n\t\t).then((result) => {\n\t\t\treturn {\n\t\t\t\tlimitHit: result.limitHit,\n\t\t\t\tstats: result.stats\n\t\t\t\t\t? {\n\t\t\t\t\t\t\tfromCache: false,\n\t\t\t\t\t\t\ttype: \"fileSearchProvider\",\n\t\t\t\t\t\t\tresultCount,\n\t\t\t\t\t\t\tdetailStats: result.stats,\n\t\t\t\t\t\t}\n\t\t\t\t\t: undefined,\n\t\t\t\tmessages: [],\n\t\t\t};\n\t\t});\n\t}\n\n\tclearCache(cacheKey: string): void {\n\t\t// cancel the token\n\t\tthis.sessions.get(cacheKey)?.cancel();\n\t\t// with no reference to this, it will be removed from WeakMaps\n\t\tthis.sessions.delete(cacheKey);\n\t}\n\n\tprivate getSessionTokenSource(\n\t\tcacheKey: string | undefined,\n\t): SessionLifecycle | undefined {\n\t\tif (!cacheKey) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\tif (!this.sessions.has(cacheKey)) {\n\t\t\tthis.sessions.set(cacheKey, new SessionLifecycle());\n\t\t}\n\n\t\treturn this.sessions.get(cacheKey);\n\t}\n\n\tprivate rawMatchToSearchItem(match: IInternalFileMatch): IFileMatch {\n\t\tif (match.relativePath) {\n\t\t\treturn {\n\t\t\t\tresource: resources.joinPath(match.base, match.relativePath),\n\t\t\t};\n\t\t} else {\n\t\t\t// extraFileResources\n\t\t\treturn {\n\t\t\t\tresource: match.base,\n\t\t\t};\n\t\t}\n\t}\n\n\tprivate doSearch(\n\t\tengine: FileSearchEngine,\n\t\tbatchSize: number,\n\t\tonResultBatch: (matches: IInternalFileMatch[]) => void,\n\t\ttoken: CancellationToken,\n\t): Promise<IInternalSearchComplete> {\n\t\tconst listener = token.onCancellationRequested(() => {\n\t\t\tengine.cancel();\n\t\t});\n\n\t\tconst _onResult = (match: IInternalFileMatch) => {\n\t\t\tif (match) {\n\t\t\t\tbatch.push(match);\n\t\t\t\tif (batchSize > 0 && batch.length >= batchSize) {\n\t\t\t\t\tonResultBatch(batch);\n\t\t\t\t\tbatch = [];\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tlet batch: IInternalFileMatch[] = [];\n\t\treturn engine.search(_onResult).then(\n\t\t\t(result) => {\n\t\t\t\tif (batch.length) {\n\t\t\t\t\tonResultBatch(batch);\n\t\t\t\t}\n\n\t\t\t\tlistener.dispose();\n\t\t\t\treturn result;\n\t\t\t},\n\t\t\t(error) => {\n\t\t\t\tif (batch.length) {\n\t\t\t\t\tonResultBatch(batch);\n\t\t\t\t}\n\n\t\t\t\tlistener.dispose();\n\t\t\t\treturn Promise.reject(error);\n\t\t\t},\n\t\t);\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
