{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/search/common/localFileSearchWorkerTypes.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport type { UriComponents } from \"../../../../base/common/uri.js\";\nimport type {\n\tIWorkerClient,\n\tIWorkerServer,\n} from \"../../../../base/common/worker/simpleWorker.js\";\nimport type {\n\tIFileMatch,\n\tIFileQueryProps,\n\tIFolderQuery,\n\tITextQueryProps,\n} from \"./search.js\";\n\nexport interface IWorkerTextSearchComplete {\n\tresults: IFileMatch<UriComponents>[];\n\tlimitHit?: boolean;\n}\n\nexport interface IWorkerFileSearchComplete {\n\tresults: string[];\n\tlimitHit?: boolean;\n}\n\n// Copied from lib.dom.ts, which is not available in this layer.\ntype IWorkerFileSystemHandleKind = \"directory\" | \"file\";\n\nexport interface IWorkerFileSystemHandle {\n\treadonly kind: IWorkerFileSystemHandleKind;\n\treadonly name: string;\n\tisSameEntry(other: IWorkerFileSystemHandle): Promise<boolean>;\n}\n\nexport interface IWorkerFileSystemDirectoryHandle\n\textends IWorkerFileSystemHandle {\n\treadonly kind: \"directory\";\n\tgetDirectoryHandle(name: string): Promise<IWorkerFileSystemDirectoryHandle>;\n\tgetFileHandle(name: string): Promise<IWorkerFileSystemFileHandle>;\n\tresolve(\n\t\tpossibleDescendant: IWorkerFileSystemHandle,\n\t): Promise<string[] | null>;\n\tentries(): AsyncIterableIterator<\n\t\t[string, IWorkerFileSystemDirectoryHandle | IWorkerFileSystemFileHandle]\n\t>;\n}\n\nexport interface IWorkerFileSystemFileHandle extends IWorkerFileSystemHandle {\n\treadonly kind: \"file\";\n\tgetFile(): Promise<{ arrayBuffer(): Promise<ArrayBuffer> }>;\n}\n\nexport interface ILocalFileSearchSimpleWorker {\n\t_requestHandlerBrand: any;\n\n\t$cancelQuery(queryId: number): void;\n\n\t$listDirectory(\n\t\thandle: IWorkerFileSystemDirectoryHandle,\n\t\tqueryProps: IFileQueryProps<UriComponents>,\n\t\tfolderQuery: IFolderQuery,\n\t\tignorePathCasing: boolean,\n\t\tqueryId: number,\n\t): Promise<IWorkerFileSearchComplete>;\n\t$searchDirectory(\n\t\thandle: IWorkerFileSystemDirectoryHandle,\n\t\tqueryProps: ITextQueryProps<UriComponents>,\n\t\tfolderQuery: IFolderQuery,\n\t\tignorePathCasing: boolean,\n\t\tqueryId: number,\n\t): Promise<IWorkerTextSearchComplete>;\n}\n\nexport abstract class LocalFileSearchSimpleWorkerHost {\n\tpublic static CHANNEL_NAME = \"localFileSearchWorkerHost\";\n\tpublic static getChannel(\n\t\tworkerServer: IWorkerServer,\n\t): LocalFileSearchSimpleWorkerHost {\n\t\treturn workerServer.getChannel<LocalFileSearchSimpleWorkerHost>(\n\t\t\tLocalFileSearchSimpleWorkerHost.CHANNEL_NAME,\n\t\t);\n\t}\n\tpublic static setChannel(\n\t\tworkerClient: IWorkerClient<any>,\n\t\tobj: LocalFileSearchSimpleWorkerHost,\n\t): void {\n\t\tworkerClient.setChannel<LocalFileSearchSimpleWorkerHost>(\n\t\t\tLocalFileSearchSimpleWorkerHost.CHANNEL_NAME,\n\t\t\tobj,\n\t\t);\n\t}\n\n\tabstract $sendTextSearchMatch(\n\t\tmatch: IFileMatch<UriComponents>,\n\t\tqueryId: number,\n\t): void;\n}\n"],
  "mappings": ";;AA2EO,MAAe,gCAAgC;AAAA,EA3EtD,OA2EsD;AAAA;AAAA;AAAA,EACrD,OAAc,eAAe;AAAA,EAC7B,OAAc,WACb,cACkC;AAClC,WAAO,aAAa;AAAA,MACnB,gCAAgC;AAAA,IACjC;AAAA,EACD;AAAA,EACA,OAAc,WACb,cACA,KACO;AACP,iBAAa;AAAA,MACZ,gCAAgC;AAAA,MAChC;AAAA,IACD;AAAA,EACD;AAMD;",
  "names": []
}
