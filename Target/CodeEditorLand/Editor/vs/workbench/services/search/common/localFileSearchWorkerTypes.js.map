{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/search/common/localFileSearchWorkerTypes.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { UriComponents } from '../../../../base/common/uri.js';\nimport { IWorkerClient, IWorkerServer } from '../../../../base/common/worker/simpleWorker.js';\nimport { IFileMatch, IFileQueryProps, IFolderQuery, ITextQueryProps } from './search.js';\n\nexport interface IWorkerTextSearchComplete {\n\tresults: IFileMatch<UriComponents>[];\n\tlimitHit?: boolean;\n}\n\nexport interface IWorkerFileSearchComplete {\n\tresults: string[];\n\tlimitHit?: boolean;\n}\n\n// Copied from lib.dom.ts, which is not available in this layer.\ntype IWorkerFileSystemHandleKind = 'directory' | 'file';\n\nexport interface IWorkerFileSystemHandle {\n\treadonly kind: IWorkerFileSystemHandleKind;\n\treadonly name: string;\n\tisSameEntry(other: IWorkerFileSystemHandle): Promise<boolean>;\n}\n\nexport interface IWorkerFileSystemDirectoryHandle extends IWorkerFileSystemHandle {\n\treadonly kind: 'directory';\n\tgetDirectoryHandle(name: string): Promise<IWorkerFileSystemDirectoryHandle>;\n\tgetFileHandle(name: string): Promise<IWorkerFileSystemFileHandle>;\n\tresolve(possibleDescendant: IWorkerFileSystemHandle): Promise<string[] | null>;\n\tentries(): AsyncIterableIterator<[string, IWorkerFileSystemDirectoryHandle | IWorkerFileSystemFileHandle]>;\n}\n\nexport interface IWorkerFileSystemFileHandle extends IWorkerFileSystemHandle {\n\treadonly kind: 'file';\n\tgetFile(): Promise<{ arrayBuffer(): Promise<ArrayBuffer> }>;\n}\n\nexport interface ILocalFileSearchSimpleWorker {\n\t_requestHandlerBrand: any;\n\n\t$cancelQuery(queryId: number): void;\n\n\t$listDirectory(handle: IWorkerFileSystemDirectoryHandle, queryProps: IFileQueryProps<UriComponents>, folderQuery: IFolderQuery, ignorePathCasing: boolean, queryId: number): Promise<IWorkerFileSearchComplete>;\n\t$searchDirectory(handle: IWorkerFileSystemDirectoryHandle, queryProps: ITextQueryProps<UriComponents>, folderQuery: IFolderQuery, ignorePathCasing: boolean, queryId: number): Promise<IWorkerTextSearchComplete>;\n}\n\nexport abstract class LocalFileSearchSimpleWorkerHost {\n\tpublic static CHANNEL_NAME = 'localFileSearchWorkerHost';\n\tpublic static getChannel(workerServer: IWorkerServer): LocalFileSearchSimpleWorkerHost {\n\t\treturn workerServer.getChannel<LocalFileSearchSimpleWorkerHost>(LocalFileSearchSimpleWorkerHost.CHANNEL_NAME);\n\t}\n\tpublic static setChannel(workerClient: IWorkerClient<any>, obj: LocalFileSearchSimpleWorkerHost): void {\n\t\tworkerClient.setChannel<LocalFileSearchSimpleWorkerHost>(LocalFileSearchSimpleWorkerHost.CHANNEL_NAME, obj);\n\t}\n\n\tabstract $sendTextSearchMatch(match: IFileMatch<UriComponents>, queryId: number): void;\n}\n"],
  "mappings": ";;AAKA,SAAS,qBAAqB;AAC9B,SAAS,eAAe,qBAAqB;AAC7C,SAAS,YAAY,iBAAiB,cAAc,uBAAuB;AA2CpE,MAAe,gCAAgC;AAAA,EAlDtD,OAkDsD;AAAA;AAAA;AAAA,EACrD,OAAc,eAAe;AAAA,EAC7B,OAAc,WAAW,cAA8D;AACtF,WAAO,aAAa,WAA4C,gCAAgC,YAAY;AAAA,EAC7G;AAAA,EACA,OAAc,WAAW,cAAkC,KAA4C;AACtG,iBAAa,WAA4C,gCAAgC,cAAc,GAAG;AAAA,EAC3G;AAGD;",
  "names": []
}
