{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/search/common/replace.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as strings from '../../../../base/common/strings.js';\nimport { IPatternInfo } from './search.js';\nimport { CharCode } from '../../../../base/common/charCode.js';\nimport { buildReplaceStringWithCasePreserved } from '../../../../base/common/search.js';\n\nexport class ReplacePattern {\n\n\tprivate _replacePattern: string;\n\tprivate _hasParameters: boolean = false;\n\tprivate _regExp: RegExp;\n\tprivate _caseOpsRegExp: RegExp;\n\n\tconstructor(replaceString: string, searchPatternInfo: IPatternInfo);\n\tconstructor(replaceString: string, parseParameters: boolean, regEx: RegExp);\n\tconstructor(replaceString: string, arg2: any, arg3?: any) {\n\t\tthis._replacePattern = replaceString;\n\t\tlet searchPatternInfo: IPatternInfo;\n\t\tlet parseParameters: boolean;\n\t\tif (typeof arg2 === 'boolean') {\n\t\t\tparseParameters = arg2;\n\t\t\tthis._regExp = arg3;\n\n\t\t} else {\n\t\t\tsearchPatternInfo = arg2;\n\t\t\tparseParameters = !!searchPatternInfo.isRegExp;\n\t\t\tthis._regExp = strings.createRegExp(searchPatternInfo.pattern, !!searchPatternInfo.isRegExp, { matchCase: searchPatternInfo.isCaseSensitive, wholeWord: searchPatternInfo.isWordMatch, multiline: searchPatternInfo.isMultiline, global: false, unicode: true });\n\t\t}\n\n\t\tif (parseParameters) {\n\t\t\tthis.parseReplaceString(replaceString);\n\t\t}\n\n\t\tif (this._regExp.global) {\n\t\t\tthis._regExp = strings.createRegExp(this._regExp.source, true, { matchCase: !this._regExp.ignoreCase, wholeWord: false, multiline: this._regExp.multiline, global: false });\n\t\t}\n\n\t\tthis._caseOpsRegExp = new RegExp(/([\\s\\S]*?)((?:\\\\[uUlL])+?|)(\\$[0-9]+)([\\s\\S]*?)/g);\n\t}\n\n\tget hasParameters(): boolean {\n\t\treturn this._hasParameters;\n\t}\n\n\tget pattern(): string {\n\t\treturn this._replacePattern;\n\t}\n\n\tget regExp(): RegExp {\n\t\treturn this._regExp;\n\t}\n\n\t/**\n\t* Returns the replace string for the first match in the given text.\n\t* If text has no matches then returns null.\n\t*/\n\tgetReplaceString(text: string, preserveCase?: boolean): string | null {\n\t\tthis._regExp.lastIndex = 0;\n\t\tconst match = this._regExp.exec(text);\n\t\tif (match) {\n\t\t\tif (this.hasParameters) {\n\t\t\t\tconst replaceString = this.replaceWithCaseOperations(text, this._regExp, this.buildReplaceString(match, preserveCase));\n\t\t\t\tif (match[0] === text) {\n\t\t\t\t\treturn replaceString;\n\t\t\t\t}\n\t\t\t\treturn replaceString.substr(match.index, match[0].length - (text.length - replaceString.length));\n\t\t\t}\n\t\t\treturn this.buildReplaceString(match, preserveCase);\n\t\t}\n\n\t\treturn null;\n\t}\n\n\t/**\n\t * replaceWithCaseOperations applies case operations to relevant replacement strings and applies\n\t * the affected $N arguments. It then passes unaffected $N arguments through to string.replace().\n\t *\n\t * \\u\t\t\t=> upper-cases one character in a match.\n\t * \\U\t\t\t=> upper-cases ALL remaining characters in a match.\n\t * \\l\t\t\t=> lower-cases one character in a match.\n\t * \\L\t\t\t=> lower-cases ALL remaining characters in a match.\n\t */\n\tprivate replaceWithCaseOperations(text: string, regex: RegExp, replaceString: string): string {\n\t\t// Short-circuit the common path.\n\t\tif (!/\\\\[uUlL]/.test(replaceString)) {\n\t\t\treturn text.replace(regex, replaceString);\n\t\t}\n\t\t// Store the values of the search parameters.\n\t\tconst firstMatch = regex.exec(text);\n\t\tif (firstMatch === null) {\n\t\t\treturn text.replace(regex, replaceString);\n\t\t}\n\n\t\tlet patMatch: RegExpExecArray | null;\n\t\tlet newReplaceString = '';\n\t\tlet lastIndex = 0;\n\t\tlet lastMatch = '';\n\t\t// For each annotated $N, perform text processing on the parameters and perform the substitution.\n\t\twhile ((patMatch = this._caseOpsRegExp.exec(replaceString)) !== null) {\n\t\t\tlastIndex = patMatch.index;\n\t\t\tconst fullMatch = patMatch[0];\n\t\t\tlastMatch = fullMatch;\n\t\t\tlet caseOps = patMatch[2]; // \\u, \\l\\u, etc.\n\t\t\tconst money = patMatch[3]; // $1, $2, etc.\n\n\t\t\tif (!caseOps) {\n\t\t\t\tnewReplaceString += fullMatch;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tconst replacement = firstMatch[parseInt(money.slice(1))];\n\t\t\tif (!replacement) {\n\t\t\t\tnewReplaceString += fullMatch;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tconst replacementLen = replacement.length;\n\n\t\t\tnewReplaceString += patMatch[1]; // prefix\n\t\t\tcaseOps = caseOps.replace(/\\\\/g, '');\n\t\t\tlet i = 0;\n\t\t\tfor (; i < caseOps.length; i++) {\n\t\t\t\tswitch (caseOps[i]) {\n\t\t\t\t\tcase 'U':\n\t\t\t\t\t\tnewReplaceString += replacement.slice(i).toUpperCase();\n\t\t\t\t\t\ti = replacementLen;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'u':\n\t\t\t\t\t\tnewReplaceString += replacement[i].toUpperCase();\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'L':\n\t\t\t\t\t\tnewReplaceString += replacement.slice(i).toLowerCase();\n\t\t\t\t\t\ti = replacementLen;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'l':\n\t\t\t\t\t\tnewReplaceString += replacement[i].toLowerCase();\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\t// Append any remaining replacement string content not covered by case operations.\n\t\t\tif (i < replacementLen) {\n\t\t\t\tnewReplaceString += replacement.slice(i);\n\t\t\t}\n\n\t\t\tnewReplaceString += patMatch[4]; // suffix\n\t\t}\n\n\t\t// Append any remaining trailing content after the final regex match.\n\t\tnewReplaceString += replaceString.slice(lastIndex + lastMatch.length);\n\n\t\treturn text.replace(regex, newReplaceString);\n\t}\n\n\tpublic buildReplaceString(matches: string[] | null, preserveCase?: boolean): string {\n\t\tif (preserveCase) {\n\t\t\treturn buildReplaceStringWithCasePreserved(matches, this._replacePattern);\n\t\t} else {\n\t\t\treturn this._replacePattern;\n\t\t}\n\t}\n\n\t/**\n\t * \\n => LF\n\t * \\t => TAB\n\t * \\\\ => \\\n\t * $0 => $& (see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replace#Specifying_a_string_as_a_parameter)\n\t * everything else stays untouched\n\t */\n\tprivate parseReplaceString(replaceString: string): void {\n\t\tif (!replaceString || replaceString.length === 0) {\n\t\t\treturn;\n\t\t}\n\n\t\tlet substrFrom = 0, result = '';\n\t\tfor (let i = 0, len = replaceString.length; i < len; i++) {\n\t\t\tconst chCode = replaceString.charCodeAt(i);\n\n\t\t\tif (chCode === CharCode.Backslash) {\n\n\t\t\t\t// move to next char\n\t\t\t\ti++;\n\n\t\t\t\tif (i >= len) {\n\t\t\t\t\t// string ends with a \\\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tconst nextChCode = replaceString.charCodeAt(i);\n\t\t\t\tlet replaceWithCharacter: string | null = null;\n\n\t\t\t\tswitch (nextChCode) {\n\t\t\t\t\tcase CharCode.Backslash:\n\t\t\t\t\t\t// \\\\ => \\\n\t\t\t\t\t\treplaceWithCharacter = '\\\\';\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase CharCode.n:\n\t\t\t\t\t\t// \\n => LF\n\t\t\t\t\t\treplaceWithCharacter = '\\n';\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase CharCode.t:\n\t\t\t\t\t\t// \\t => TAB\n\t\t\t\t\t\treplaceWithCharacter = '\\t';\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tif (replaceWithCharacter) {\n\t\t\t\t\tresult += replaceString.substring(substrFrom, i - 1) + replaceWithCharacter;\n\t\t\t\t\tsubstrFrom = i + 1;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (chCode === CharCode.DollarSign) {\n\n\t\t\t\t// move to next char\n\t\t\t\ti++;\n\n\t\t\t\tif (i >= len) {\n\t\t\t\t\t// string ends with a $\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tconst nextChCode = replaceString.charCodeAt(i);\n\t\t\t\tlet replaceWithCharacter: string | null = null;\n\n\t\t\t\tswitch (nextChCode) {\n\t\t\t\t\tcase CharCode.Digit0:\n\t\t\t\t\t\t// $0 => $&\n\t\t\t\t\t\treplaceWithCharacter = '$&';\n\t\t\t\t\t\tthis._hasParameters = true;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase CharCode.BackTick:\n\t\t\t\t\tcase CharCode.SingleQuote:\n\t\t\t\t\t\tthis._hasParameters = true;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault: {\n\t\t\t\t\t\t// check if it is a valid string parameter $n (0 <= n <= 99). $0 is already handled by now.\n\t\t\t\t\t\tif (!this.between(nextChCode, CharCode.Digit1, CharCode.Digit9)) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (i === replaceString.length - 1) {\n\t\t\t\t\t\t\tthis._hasParameters = true;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tlet charCode = replaceString.charCodeAt(++i);\n\t\t\t\t\t\tif (!this.between(charCode, CharCode.Digit0, CharCode.Digit9)) {\n\t\t\t\t\t\t\tthis._hasParameters = true;\n\t\t\t\t\t\t\t--i;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (i === replaceString.length - 1) {\n\t\t\t\t\t\t\tthis._hasParameters = true;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcharCode = replaceString.charCodeAt(++i);\n\t\t\t\t\t\tif (!this.between(charCode, CharCode.Digit0, CharCode.Digit9)) {\n\t\t\t\t\t\t\tthis._hasParameters = true;\n\t\t\t\t\t\t\t--i;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (replaceWithCharacter) {\n\t\t\t\t\tresult += replaceString.substring(substrFrom, i - 1) + replaceWithCharacter;\n\t\t\t\t\tsubstrFrom = i + 1;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (substrFrom === 0) {\n\t\t\t// no replacement occurred\n\t\t\treturn;\n\t\t}\n\n\t\tthis._replacePattern = result + replaceString.substring(substrFrom);\n\t}\n\n\tprivate between(value: number, from: number, to: number): boolean {\n\t\treturn from <= value && value <= to;\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
