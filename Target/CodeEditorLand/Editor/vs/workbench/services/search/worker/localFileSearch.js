import*as w from"../../../../base/common/glob.js";import{URI as H}from"../../../../base/common/uri.js";import"../../../../base/common/worker/simpleWorker.js";import{LocalFileSearchSimpleWorkerHost as L}from"../common/localFileSearchWorkerTypes.js";import"../common/search.js";import*as A from"../../../../base/common/path.js";import{CancellationTokenSource as O}from"../../../../base/common/cancellation.js";import{getFileResults as $}from"../common/getFileResults.js";import{IgnoreFile as j}from"../common/ignoreFile.js";import{createRegExp as G}from"../../../../base/common/strings.js";import{Promises as _}from"../../../../base/common/async.js";import{ExtUri as U}from"../../../../base/common/resources.js";import{revive as z}from"../../../../base/common/marshalling.js";const E=!1,xe=+new Date,N={},P=async(e,t)=>{if(!E)return t();const n=Date.now(),s=(N[e]??0)+1;N[e]=s;const a=await t(),l=Date.now();return a};function Ce(e){return new J(e)}class J{_requestHandlerBrand;host;cancellationTokens=new Map;constructor(t){this.host=L.getChannel(t)}$cancelQuery(t){this.cancellationTokens.get(t)?.cancel()}registerCancellationToken(t){const n=new O;return this.cancellationTokens.set(t,n),n}async $listDirectory(t,n,s,a,l){const m=b(s),x=new U(()=>a),c=this.registerCancellationToken(l),f=[];let F=!1,p=0;const g=n.maxResults||512,h=n.filePattern?u=>n.filePattern.split("").every(I=>u.includes(I)):u=>!0;return await P("listDirectory",()=>this.walkFolderQuery(t,M(n),m,x,u=>{if(h(u.name))return p++,g&&p>g&&(F=!0,c.cancel()),f.push(u.path)},c.token)),{results:f,limitHit:F}}async $searchDirectory(t,n,s,a,l){const m=b(s),x=new U(()=>a);return P("searchInFiles",async()=>{const c=this.registerCancellationToken(l),f=[],F=K(n.contentPattern),p=[];let g=0,h=0;const u=!1,I=async k=>{if(c.token.isCancellationRequested)return;g++;const r=await k.resolve();if(c.token.isCancellationRequested)return;const i=new Uint8Array(r),o=$(i,F,{surroundingContext:n.surroundingContext??0,previewOptions:n.previewOptions,remainingResultQuota:n.maxResults?n.maxResults-h:1e4});if(o.length){h+=o.length,n.maxResults&&h>n.maxResults&&c.cancel();const d={resource:H.joinPath(m.folder,k.path),results:o};this.host.$sendTextSearchMatch(d,l),f.push(d)}};return await P("walkFolderToResolve",()=>this.walkFolderQuery(t,M(n),m,x,async k=>p.push(I(k)),c.token)),await P("resolveOngoingProcesses",()=>Promise.all(p)),{results:f,limitHit:u}})}async walkFolderQuery(t,n,s,a,l,m){const x=s.excludePattern?.map(r=>w.parse(r.pattern??{},{trimForExclusions:!0})),c=(r,i,o)=>x?.some(d=>d(r,i,o)),f=(r,i,o)=>(r=r.slice(1),!!(c(r,i,o)||V(n,r))),F=(r,i,o)=>(r=r.slice(1),!(c(r,i,o)||!X(n,r,a))),p=(r,i)=>({type:"file",name:r.name,path:i,resolve:()=>r.getFile().then(d=>d.arrayBuffer())}),g=r=>r.kind==="directory",h=r=>r.kind==="file",u=async(r,i,o)=>{if(!s.disregardIgnoreFiles){const Q=await Promise.all([r.getFileHandle(".gitignore").catch(y=>{}),r.getFileHandle(".ignore").catch(y=>{})]);await Promise.all(Q.map(async y=>{if(!y)return;const R=new TextDecoder("utf8").decode(new Uint8Array(await(await y.getFile()).arrayBuffer()));o=new j(R,i,o)}))}const d=_.withAsyncBody(async Q=>{const y=[],R=[],W=[],D=new Set;for await(const S of r.entries())W.push(S),D.add(S[0]);for(const[S,C]of W){if(m.isCancellationRequested)break;const v=i+S;if(o&&!o.isPathIncludedInTraversal(v,C.kind==="directory"))continue;const T=B=>D.has(B);g(C)&&!f(v,S,T)?R.push(u(C,v+"/",o)):h(C)&&F(v,S,T)&&y.push(p(C,v))}Q([...await Promise.all(R),...y])});return{type:"dir",name:r.name,entries:d}},I=async(r,i)=>{m.isCancellationRequested||await Promise.all((await r.entries).sort((o,d)=>-(o.type==="dir"?0:1)+(d.type==="dir"?0:1)).map(async o=>o.type==="dir"?I(o,i):i(o)))},k=await P("process",()=>u(t,"/"));await P("resolve",()=>I(k,l))}}function K(e){return G(e.pattern,!!e.isRegExp,{wholeWord:e.isWordMatch,global:!0,matchCase:e.isCaseSensitive,multiline:!0,unicode:!0})}function b(e){return z(e)}function M(e){return{...e,extraFileResources:e.extraFileResources?.map(t=>H.revive(t)),folderQueries:e.folderQueries.map(t=>b(t))}}function V(e,t){return!!(e.excludePattern&&w.match(e.excludePattern,t))}function X(e,t,n){return e.excludePattern&&w.match(e.excludePattern,t)?!1:e.includePattern||e.usingSearchPaths?e.includePattern&&w.match(e.includePattern,t)?!0:e.usingSearchPaths?!!e.folderQueries&&e.folderQueries.some(s=>{const a=s.folder,l=H.file(t);if(n.isEqualOrParent(l,a)){const m=A.relative(a.path,l.path);return!s.includePattern||!!w.match(s.includePattern,m)}else return!1}):!1:!0}export{J as LocalFileSearchSimpleWorker,Ce as create};
