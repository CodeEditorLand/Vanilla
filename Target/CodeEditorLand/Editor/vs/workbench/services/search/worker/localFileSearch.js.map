{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/search/worker/localFileSearch.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as glob from '../../../../base/common/glob.js';\nimport { UriComponents, URI } from '../../../../base/common/uri.js';\nimport { IRequestHandler, IWorkerServer } from '../../../../base/common/worker/simpleWorker.js';\nimport { ILocalFileSearchSimpleWorker, LocalFileSearchSimpleWorkerHost, IWorkerFileSearchComplete, IWorkerFileSystemDirectoryHandle, IWorkerFileSystemHandle, IWorkerTextSearchComplete } from '../common/localFileSearchWorkerTypes.js';\nimport { ICommonQueryProps, IFileMatch, IFileQueryProps, IFolderQuery, IPatternInfo, ITextQueryProps, } from '../common/search.js';\nimport * as paths from '../../../../base/common/path.js';\nimport { CancellationToken, CancellationTokenSource } from '../../../../base/common/cancellation.js';\nimport { getFileResults } from '../common/getFileResults.js';\nimport { IgnoreFile } from '../common/ignoreFile.js';\nimport { createRegExp } from '../../../../base/common/strings.js';\nimport { Promises } from '../../../../base/common/async.js';\nimport { ExtUri } from '../../../../base/common/resources.js';\nimport { revive } from '../../../../base/common/marshalling.js';\n\nconst PERF = false;\n\ntype FileNode = {\n\ttype: 'file';\n\tname: string;\n\tpath: string;\n\tresolve: () => Promise<ArrayBuffer>;\n};\n\ntype DirNode = {\n\ttype: 'dir';\n\tname: string;\n\tentries: Promise<(DirNode | FileNode)[]>;\n};\n\nconst globalStart = +new Date();\nconst itrcount: Record<string, number> = {};\nconst time = async <T>(name: string, task: () => Promise<T> | T) => {\n\tif (!PERF) { return task(); }\n\n\tconst start = Date.now();\n\tconst itr = (itrcount[name] ?? 0) + 1;\n\tconsole.info(name, itr, 'starting', Math.round((start - globalStart) * 10) / 10000);\n\n\titrcount[name] = itr;\n\tconst r = await task();\n\tconst end = Date.now();\n\tconsole.info(name, itr, 'took', end - start);\n\treturn r;\n};\n\n/**\n * Defines the worker entry point. Must be exported and named `create`.\n * @skipMangle\n */\nexport function create(workerServer: IWorkerServer): IRequestHandler {\n\treturn new LocalFileSearchSimpleWorker(workerServer);\n}\n\nexport class LocalFileSearchSimpleWorker implements ILocalFileSearchSimpleWorker, IRequestHandler {\n\t_requestHandlerBrand: any;\n\n\tprivate readonly host: LocalFileSearchSimpleWorkerHost;\n\tcancellationTokens: Map<number, CancellationTokenSource> = new Map();\n\n\tconstructor(workerServer: IWorkerServer) {\n\t\tthis.host = LocalFileSearchSimpleWorkerHost.getChannel(workerServer);\n\t}\n\n\t$cancelQuery(queryId: number): void {\n\t\tthis.cancellationTokens.get(queryId)?.cancel();\n\t}\n\n\tprivate registerCancellationToken(queryId: number): CancellationTokenSource {\n\t\tconst source = new CancellationTokenSource();\n\t\tthis.cancellationTokens.set(queryId, source);\n\t\treturn source;\n\t}\n\n\tasync $listDirectory(handle: IWorkerFileSystemDirectoryHandle, query: IFileQueryProps<UriComponents>, folderQuery: IFolderQuery<UriComponents>, ignorePathCasing: boolean, queryId: number): Promise<IWorkerFileSearchComplete> {\n\t\tconst revivedFolderQuery = reviveFolderQuery(folderQuery);\n\t\tconst extUri = new ExtUri(() => ignorePathCasing);\n\n\t\tconst token = this.registerCancellationToken(queryId);\n\t\tconst entries: string[] = [];\n\t\tlet limitHit = false;\n\t\tlet count = 0;\n\n\t\tconst max = query.maxResults || 512;\n\n\t\tconst filePatternMatcher = query.filePattern\n\t\t\t? (name: string) => query.filePattern!.split('').every(c => name.includes(c))\n\t\t\t: (name: string) => true;\n\n\t\tawait time('listDirectory', () => this.walkFolderQuery(handle, reviveQueryProps(query), revivedFolderQuery, extUri, file => {\n\t\t\tif (!filePatternMatcher(file.name)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tcount++;\n\n\t\t\tif (max && count > max) {\n\t\t\t\tlimitHit = true;\n\t\t\t\ttoken.cancel();\n\t\t\t}\n\t\t\treturn entries.push(file.path);\n\t\t}, token.token));\n\n\t\treturn {\n\t\t\tresults: entries,\n\t\t\tlimitHit\n\t\t};\n\t}\n\n\tasync $searchDirectory(handle: IWorkerFileSystemDirectoryHandle, query: ITextQueryProps<UriComponents>, folderQuery: IFolderQuery<UriComponents>, ignorePathCasing: boolean, queryId: number): Promise<IWorkerTextSearchComplete> {\n\t\tconst revivedQuery = reviveFolderQuery(folderQuery);\n\t\tconst extUri = new ExtUri(() => ignorePathCasing);\n\n\t\treturn time('searchInFiles', async () => {\n\t\t\tconst token = this.registerCancellationToken(queryId);\n\n\t\t\tconst results: IFileMatch[] = [];\n\n\t\t\tconst pattern = createSearchRegExp(query.contentPattern);\n\n\t\t\tconst onGoingProcesses: Promise<void>[] = [];\n\n\t\t\tlet fileCount = 0;\n\t\t\tlet resultCount = 0;\n\t\t\tconst limitHit = false;\n\n\t\t\tconst processFile = async (file: FileNode) => {\n\t\t\t\tif (token.token.isCancellationRequested) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tfileCount++;\n\n\t\t\t\tconst contents = await file.resolve();\n\t\t\t\tif (token.token.isCancellationRequested) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst bytes = new Uint8Array(contents);\n\t\t\t\tconst fileResults = getFileResults(bytes, pattern, {\n\t\t\t\t\tsurroundingContext: query.surroundingContext ?? 0,\n\t\t\t\t\tpreviewOptions: query.previewOptions,\n\t\t\t\t\tremainingResultQuota: query.maxResults ? (query.maxResults - resultCount) : 10000,\n\t\t\t\t});\n\n\t\t\t\tif (fileResults.length) {\n\t\t\t\t\tresultCount += fileResults.length;\n\t\t\t\t\tif (query.maxResults && resultCount > query.maxResults) {\n\t\t\t\t\t\ttoken.cancel();\n\t\t\t\t\t}\n\t\t\t\t\tconst match = {\n\t\t\t\t\t\tresource: URI.joinPath(revivedQuery.folder, file.path),\n\t\t\t\t\t\tresults: fileResults,\n\t\t\t\t\t};\n\t\t\t\t\tthis.host.$sendTextSearchMatch(match, queryId);\n\t\t\t\t\tresults.push(match);\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tawait time('walkFolderToResolve', () =>\n\t\t\t\tthis.walkFolderQuery(handle, reviveQueryProps(query), revivedQuery, extUri, async file => onGoingProcesses.push(processFile(file)), token.token)\n\t\t\t);\n\n\t\t\tawait time('resolveOngoingProcesses', () => Promise.all(onGoingProcesses));\n\n\t\t\tif (PERF) { console.log('Searched in', fileCount, 'files'); }\n\n\t\t\treturn {\n\t\t\t\tresults,\n\t\t\t\tlimitHit,\n\t\t\t};\n\t\t});\n\n\t}\n\n\tprivate async walkFolderQuery(handle: IWorkerFileSystemDirectoryHandle, queryProps: ICommonQueryProps<URI>, folderQuery: IFolderQuery<URI>, extUri: ExtUri, onFile: (file: FileNode) => any, token: CancellationToken): Promise<void> {\n\n\t\tconst folderExcludes = folderQuery.excludePattern?.map(excludePattern => glob.parse(excludePattern.pattern ?? {}, { trimForExclusions: true }) as glob.ParsedExpression);\n\n\t\tconst evalFolderExcludes = (path: string, basename: string, hasSibling: (query: string) => boolean) => {\n\t\t\treturn folderExcludes?.some(folderExclude => {\n\t\t\t\treturn folderExclude(path, basename, hasSibling);\n\t\t\t});\n\n\t\t};\n\t\t// For folders, only check if the folder is explicitly excluded so walking continues.\n\t\tconst isFolderExcluded = (path: string, basename: string, hasSibling: (query: string) => boolean) => {\n\t\t\tpath = path.slice(1);\n\t\t\tif (evalFolderExcludes(path, basename, hasSibling)) { return true; }\n\t\t\tif (pathExcludedInQuery(queryProps, path)) { return true; }\n\t\t\treturn false;\n\t\t};\n\n\t\t// For files ensure the full check takes place.\n\t\tconst isFileIncluded = (path: string, basename: string, hasSibling: (query: string) => boolean) => {\n\t\t\tpath = path.slice(1);\n\t\t\tif (evalFolderExcludes(path, basename, hasSibling)) { return false; }\n\t\t\tif (!pathIncludedInQuery(queryProps, path, extUri)) { return false; }\n\t\t\treturn true;\n\t\t};\n\n\t\tconst processFile = (file: FileSystemFileHandle, prior: string): FileNode => {\n\n\t\t\tconst resolved: FileNode = {\n\t\t\t\ttype: 'file',\n\t\t\t\tname: file.name,\n\t\t\t\tpath: prior,\n\t\t\t\tresolve: () => file.getFile().then(r => r.arrayBuffer())\n\t\t\t} as const;\n\n\t\t\treturn resolved;\n\t\t};\n\n\t\tconst isFileSystemDirectoryHandle = (handle: IWorkerFileSystemHandle): handle is FileSystemDirectoryHandle => {\n\t\t\treturn handle.kind === 'directory';\n\t\t};\n\n\t\tconst isFileSystemFileHandle = (handle: IWorkerFileSystemHandle): handle is FileSystemFileHandle => {\n\t\t\treturn handle.kind === 'file';\n\t\t};\n\n\t\tconst processDirectory = async (directory: IWorkerFileSystemDirectoryHandle, prior: string, ignoreFile?: IgnoreFile): Promise<DirNode> => {\n\n\t\t\tif (!folderQuery.disregardIgnoreFiles) {\n\t\t\t\tconst ignoreFiles = await Promise.all([\n\t\t\t\t\tdirectory.getFileHandle('.gitignore').catch(e => undefined),\n\t\t\t\t\tdirectory.getFileHandle('.ignore').catch(e => undefined),\n\t\t\t\t]);\n\n\t\t\t\tawait Promise.all(ignoreFiles.map(async file => {\n\t\t\t\t\tif (!file) { return; }\n\n\t\t\t\t\tconst ignoreContents = new TextDecoder('utf8').decode(new Uint8Array(await (await file.getFile()).arrayBuffer()));\n\t\t\t\t\tignoreFile = new IgnoreFile(ignoreContents, prior, ignoreFile);\n\t\t\t\t}));\n\t\t\t}\n\n\t\t\tconst entries = Promises.withAsyncBody<(FileNode | DirNode)[]>(async c => {\n\t\t\t\tconst files: FileNode[] = [];\n\t\t\t\tconst dirs: Promise<DirNode>[] = [];\n\n\t\t\t\tconst entries: [string, IWorkerFileSystemHandle][] = [];\n\t\t\t\tconst sibilings = new Set<string>();\n\n\t\t\t\tfor await (const entry of directory.entries()) {\n\t\t\t\t\tentries.push(entry);\n\t\t\t\t\tsibilings.add(entry[0]);\n\t\t\t\t}\n\n\t\t\t\tfor (const [basename, handle] of entries) {\n\t\t\t\t\tif (token.isCancellationRequested) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst path = prior + basename;\n\n\t\t\t\t\tif (ignoreFile && !ignoreFile.isPathIncludedInTraversal(path, handle.kind === 'directory')) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst hasSibling = (query: string) => sibilings.has(query);\n\n\t\t\t\t\tif (isFileSystemDirectoryHandle(handle) && !isFolderExcluded(path, basename, hasSibling)) {\n\t\t\t\t\t\tdirs.push(processDirectory(handle, path + '/', ignoreFile));\n\t\t\t\t\t} else if (isFileSystemFileHandle(handle) && isFileIncluded(path, basename, hasSibling)) {\n\t\t\t\t\t\tfiles.push(processFile(handle, path));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tc([...await Promise.all(dirs), ...files]);\n\t\t\t});\n\n\t\t\treturn {\n\t\t\t\ttype: 'dir',\n\t\t\t\tname: directory.name,\n\t\t\t\tentries\n\t\t\t};\n\t\t};\n\n\t\tconst resolveDirectory = async (directory: DirNode, onFile: (f: FileNode) => any) => {\n\t\t\tif (token.isCancellationRequested) { return; }\n\n\t\t\tawait Promise.all(\n\t\t\t\t(await directory.entries)\n\t\t\t\t\t.sort((a, b) => -(a.type === 'dir' ? 0 : 1) + (b.type === 'dir' ? 0 : 1))\n\t\t\t\t\t.map(async entry => {\n\t\t\t\t\t\tif (entry.type === 'dir') {\n\t\t\t\t\t\t\treturn resolveDirectory(entry, onFile);\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse {\n\t\t\t\t\t\t\treturn onFile(entry);\n\t\t\t\t\t\t}\n\t\t\t\t\t}));\n\t\t};\n\n\t\tconst processed = await time('process', () => processDirectory(handle, '/'));\n\t\tawait time('resolve', () => resolveDirectory(processed, onFile));\n\t}\n}\n\nfunction createSearchRegExp(options: IPatternInfo): RegExp {\n\treturn createRegExp(options.pattern, !!options.isRegExp, {\n\t\twholeWord: options.isWordMatch,\n\t\tglobal: true,\n\t\tmatchCase: options.isCaseSensitive,\n\t\tmultiline: true,\n\t\tunicode: true,\n\t});\n}\n\nfunction reviveFolderQuery(folderQuery: IFolderQuery<UriComponents>): IFolderQuery<URI> {\n\t// @todo: andrea - try to see why we can't just call 'revive' here\n\treturn revive({\n\t\t...revive(folderQuery),\n\t\texcludePattern: folderQuery.excludePattern?.map(ep => ({ folder: URI.revive(ep.folder), pattern: ep.pattern })),\n\t\tfolder: URI.revive(folderQuery.folder),\n\t});\n}\n\nfunction reviveQueryProps(queryProps: ICommonQueryProps<UriComponents>): ICommonQueryProps<URI> {\n\treturn {\n\t\t...queryProps,\n\t\textraFileResources: queryProps.extraFileResources?.map(r => URI.revive(r)),\n\t\tfolderQueries: queryProps.folderQueries.map(fq => reviveFolderQuery(fq)),\n\t};\n}\n\n\nfunction pathExcludedInQuery(queryProps: ICommonQueryProps<URI>, fsPath: string): boolean {\n\tif (queryProps.excludePattern && glob.match(queryProps.excludePattern, fsPath)) {\n\t\treturn true;\n\t}\n\treturn false;\n}\n\nfunction pathIncludedInQuery(queryProps: ICommonQueryProps<URI>, path: string, extUri: ExtUri): boolean {\n\tif (queryProps.excludePattern && glob.match(queryProps.excludePattern, path)) {\n\t\treturn false;\n\t}\n\n\tif (queryProps.includePattern || queryProps.usingSearchPaths) {\n\t\tif (queryProps.includePattern && glob.match(queryProps.includePattern, path)) {\n\t\t\treturn true;\n\t\t}\n\n\t\t// If searchPaths are being used, the extra file must be in a subfolder and match the pattern, if present\n\t\tif (queryProps.usingSearchPaths) {\n\n\t\t\treturn !!queryProps.folderQueries && queryProps.folderQueries.some(fq => {\n\t\t\t\tconst searchPath = fq.folder;\n\t\t\t\tconst uri = URI.file(path);\n\t\t\t\tif (extUri.isEqualOrParent(uri, searchPath)) {\n\t\t\t\t\tconst relPath = paths.relative(searchPath.path, uri.path);\n\t\t\t\t\treturn !fq.includePattern || !!glob.match(fq.includePattern, relPath);\n\t\t\t\t} else {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\treturn false;\n\t}\n\n\treturn true;\n}\n"],
  "mappings": "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",
  "names": ["handle", "entries", "onFile"]
}
