{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/tunnel/browser/tunnelService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport type { URI } from \"../../../../base/common/uri.js\";\nimport { IConfigurationService } from \"../../../../platform/configuration/common/configuration.js\";\nimport {\n\tInstantiationType,\n\tregisterSingleton,\n} from \"../../../../platform/instantiation/common/extensions.js\";\nimport { ILogService } from \"../../../../platform/log/common/log.js\";\nimport type { IAddressProvider } from \"../../../../platform/remote/common/remoteAgentConnection.js\";\nimport {\n\tAbstractTunnelService,\n\ttype ITunnelProvider,\n\tITunnelService,\n\ttype RemoteTunnel,\n\tisTunnelProvider,\n} from \"../../../../platform/tunnel/common/tunnel.js\";\nimport { IWorkbenchEnvironmentService } from \"../../environment/common/environmentService.js\";\n\nexport class TunnelService extends AbstractTunnelService {\n\tconstructor(\n\t\t@ILogService logService: ILogService,\n\t\t@IWorkbenchEnvironmentService\n\t\tprivate environmentService: IWorkbenchEnvironmentService,\n\t\t@IConfigurationService configurationService: IConfigurationService,\n\t) {\n\t\tsuper(logService, configurationService);\n\t}\n\n\tpublic isPortPrivileged(_port: number): boolean {\n\t\treturn false;\n\t}\n\n\tprotected retainOrCreateTunnel(\n\t\ttunnelProvider: IAddressProvider | ITunnelProvider,\n\t\tremoteHost: string,\n\t\tremotePort: number,\n\t\t_localHost: string,\n\t\tlocalPort: number | undefined,\n\t\televateIfNeeded: boolean,\n\t\tprivacy?: string,\n\t\tprotocol?: string,\n\t): Promise<RemoteTunnel | string | undefined> | undefined {\n\t\tconst existing = this.getTunnelFromMap(remoteHost, remotePort);\n\t\tif (existing) {\n\t\t\t++existing.refcount;\n\t\t\treturn existing.value;\n\t\t}\n\n\t\tif (isTunnelProvider(tunnelProvider)) {\n\t\t\treturn this.createWithProvider(\n\t\t\t\ttunnelProvider,\n\t\t\t\tremoteHost,\n\t\t\t\tremotePort,\n\t\t\t\tlocalPort,\n\t\t\t\televateIfNeeded,\n\t\t\t\tprivacy,\n\t\t\t\tprotocol,\n\t\t\t);\n\t\t}\n\t\treturn undefined;\n\t}\n\n\toverride canTunnel(uri: URI): boolean {\n\t\treturn (\n\t\t\tsuper.canTunnel(uri) && !!this.environmentService.remoteAuthority\n\t\t);\n\t}\n}\n\nregisterSingleton(ITunnelService, TunnelService, InstantiationType.Delayed);\n"],
  "mappings": ";;;;;;;;;;;;AAMA,SAAS,6BAA6B;AACtC;AAAA,EACC;AAAA,EACA;AAAA,OACM;AACP,SAAS,mBAAmB;AAE5B;AAAA,EACC;AAAA,EAEA;AAAA,EAEA;AAAA,OACM;AACP,SAAS,oCAAoC;AAEtC,IAAM,gBAAN,cAA4B,sBAAsB;AAAA,EACxD,YACc,YAEL,oBACe,sBACtB;AACD,UAAM,YAAY,oBAAoB;AAH9B;AAAA,EAIT;AAAA,EA9BD,OAsByD;AAAA;AAAA;AAAA,EAUjD,iBAAiB,OAAwB;AAC/C,WAAO;AAAA,EACR;AAAA,EAEU,qBACT,gBACA,YACA,YACA,YACA,WACA,iBACA,SACA,UACyD;AACzD,UAAM,WAAW,KAAK,iBAAiB,YAAY,UAAU;AAC7D,QAAI,UAAU;AACb,QAAE,SAAS;AACX,aAAO,SAAS;AAAA,IACjB;AAEA,QAAI,iBAAiB,cAAc,GAAG;AACrC,aAAO,KAAK;AAAA,QACX;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,MACD;AAAA,IACD;AACA,WAAO;AAAA,EACR;AAAA,EAES,UAAU,KAAmB;AACrC,WACC,MAAM,UAAU,GAAG,KAAK,CAAC,CAAC,KAAK,mBAAmB;AAAA,EAEpD;AACD;AAjDa,gBAAN;AAAA,EAEJ;AAAA,EACA;AAAA,EAEA;AAAA,GALU;AAmDb,kBAAkB,gBAAgB,eAAe,kBAAkB,OAAO;",
  "names": []
}
