{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/tunnel/browser/tunnelService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { URI } from '../../../../base/common/uri.js';\nimport { IConfigurationService } from '../../../../platform/configuration/common/configuration.js';\nimport { InstantiationType, registerSingleton } from '../../../../platform/instantiation/common/extensions.js';\nimport { ILogService } from '../../../../platform/log/common/log.js';\nimport { IAddressProvider } from '../../../../platform/remote/common/remoteAgentConnection.js';\nimport { AbstractTunnelService, ITunnelProvider, ITunnelService, RemoteTunnel, isTunnelProvider } from '../../../../platform/tunnel/common/tunnel.js';\nimport { IWorkbenchEnvironmentService } from '../../environment/common/environmentService.js';\n\nexport class TunnelService extends AbstractTunnelService {\n\tconstructor(\n\t\t@ILogService logService: ILogService,\n\t\t@IWorkbenchEnvironmentService private environmentService: IWorkbenchEnvironmentService,\n\t\t@IConfigurationService configurationService: IConfigurationService\n\t) {\n\t\tsuper(logService, configurationService);\n\t}\n\n\tpublic isPortPrivileged(_port: number): boolean {\n\t\treturn false;\n\t}\n\n\tprotected retainOrCreateTunnel(tunnelProvider: IAddressProvider | ITunnelProvider, remoteHost: string, remotePort: number, _localHost: string, localPort: number | undefined, elevateIfNeeded: boolean, privacy?: string, protocol?: string): Promise<RemoteTunnel | string | undefined> | undefined {\n\t\tconst existing = this.getTunnelFromMap(remoteHost, remotePort);\n\t\tif (existing) {\n\t\t\t++existing.refcount;\n\t\t\treturn existing.value;\n\t\t}\n\n\t\tif (isTunnelProvider(tunnelProvider)) {\n\t\t\treturn this.createWithProvider(tunnelProvider, remoteHost, remotePort, localPort, elevateIfNeeded, privacy, protocol);\n\t\t}\n\t\treturn undefined;\n\t}\n\n\toverride canTunnel(uri: URI): boolean {\n\t\treturn super.canTunnel(uri) && !!this.environmentService.remoteAuthority;\n\t}\n}\n\nregisterSingleton(ITunnelService, TunnelService, InstantiationType.Delayed);\n"],
  "mappings": ";;;;;;;;;;;;AAKA,SAAS,WAAW;AACpB,SAAS,6BAA6B;AACtC,SAAS,mBAAmB,yBAAyB;AACrD,SAAS,mBAAmB;AAC5B,SAAS,wBAAwB;AACjC,SAAS,uBAAuB,iBAAiB,gBAAgB,cAAc,wBAAwB;AACvG,SAAS,oCAAoC;AAEtC,IAAM,gBAAN,cAA4B,sBAAsB;AAAA,EACxD,YACc,YACyB,oBACf,sBACtB;AACD,UAAM,YAAY,oBAAoB;AAHA;AAAA,EAIvC;AAAA,EApBD,OAayD;AAAA;AAAA;AAAA,EASjD,iBAAiB,OAAwB;AAC/C,WAAO;AAAA,EACR;AAAA,EAEU,qBAAqB,gBAAoD,YAAoB,YAAoB,YAAoB,WAA+B,iBAA0B,SAAkB,UAA2E;AACpS,UAAM,WAAW,KAAK,iBAAiB,YAAY,UAAU;AAC7D,QAAI,UAAU;AACb,QAAE,SAAS;AACX,aAAO,SAAS;AAAA,IACjB;AAEA,QAAI,iBAAiB,cAAc,GAAG;AACrC,aAAO,KAAK,mBAAmB,gBAAgB,YAAY,YAAY,WAAW,iBAAiB,SAAS,QAAQ;AAAA,IACrH;AACA,WAAO;AAAA,EACR;AAAA,EAES,UAAU,KAAmB;AACrC,WAAO,MAAM,UAAU,GAAG,KAAK,CAAC,CAAC,KAAK,mBAAmB;AAAA,EAC1D;AACD;AA7Ba,gBAAN;AAAA,EAEJ;AAAA,EACA;AAAA,EACA;AAAA,GAJU;AA+Bb,kBAAkB,gBAAgB,eAAe,kBAAkB,OAAO;",
  "names": []
}
