{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/tunnel/electron-sandbox/tunnelService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { ILogService } from '../../../../platform/log/common/log.js';\nimport { IWorkbenchEnvironmentService } from '../../environment/common/environmentService.js';\nimport { URI } from '../../../../base/common/uri.js';\nimport { InstantiationType, registerSingleton } from '../../../../platform/instantiation/common/extensions.js';\nimport { ITunnelService, AbstractTunnelService, RemoteTunnel, TunnelPrivacyId, isPortPrivileged, ITunnelProvider, isTunnelProvider } from '../../../../platform/tunnel/common/tunnel.js';\nimport { Disposable } from '../../../../base/common/lifecycle.js';\nimport { IAddressProvider } from '../../../../platform/remote/common/remoteAgentConnection.js';\nimport { ISharedProcessTunnelService } from '../../../../platform/remote/common/sharedProcessTunnelService.js';\nimport { ILifecycleService } from '../../lifecycle/common/lifecycle.js';\nimport { IRemoteAuthorityResolverService } from '../../../../platform/remote/common/remoteAuthorityResolver.js';\nimport { IInstantiationService } from '../../../../platform/instantiation/common/instantiation.js';\nimport { INativeWorkbenchEnvironmentService } from '../../environment/electron-sandbox/environmentService.js';\nimport { OS } from '../../../../base/common/platform.js';\nimport { IConfigurationService } from '../../../../platform/configuration/common/configuration.js';\n\nclass SharedProcessTunnel extends Disposable implements RemoteTunnel {\n\n\tpublic readonly privacy = TunnelPrivacyId.Private;\n\tpublic readonly protocol: string | undefined = undefined;\n\n\tconstructor(\n\t\tprivate readonly _id: string,\n\t\tprivate readonly _addressProvider: IAddressProvider,\n\t\tpublic readonly tunnelRemoteHost: string,\n\t\tpublic readonly tunnelRemotePort: number,\n\t\tpublic readonly tunnelLocalPort: number | undefined,\n\t\tpublic readonly localAddress: string,\n\t\tprivate readonly _onBeforeDispose: () => void,\n\t\t@ISharedProcessTunnelService private readonly _sharedProcessTunnelService: ISharedProcessTunnelService,\n\t\t@IRemoteAuthorityResolverService private readonly _remoteAuthorityResolverService: IRemoteAuthorityResolverService,\n\t) {\n\t\tsuper();\n\t\tthis._updateAddress();\n\t\tthis._register(this._remoteAuthorityResolverService.onDidChangeConnectionData(() => this._updateAddress()));\n\t}\n\n\tprivate _updateAddress(): void {\n\t\tthis._addressProvider.getAddress().then((address) => {\n\t\t\tthis._sharedProcessTunnelService.setAddress(this._id, address);\n\t\t});\n\t}\n\n\tpublic override async dispose(): Promise<void> {\n\t\tthis._onBeforeDispose();\n\t\tsuper.dispose();\n\t\tawait this._sharedProcessTunnelService.destroyTunnel(this._id);\n\t}\n}\n\nexport class TunnelService extends AbstractTunnelService {\n\n\tprivate readonly _activeSharedProcessTunnels = new Set<string>();\n\n\tpublic constructor(\n\t\t@ILogService logService: ILogService,\n\t\t@IWorkbenchEnvironmentService private readonly _environmentService: IWorkbenchEnvironmentService,\n\t\t@ISharedProcessTunnelService private readonly _sharedProcessTunnelService: ISharedProcessTunnelService,\n\t\t@IInstantiationService private readonly _instantiationService: IInstantiationService,\n\t\t@ILifecycleService lifecycleService: ILifecycleService,\n\t\t@INativeWorkbenchEnvironmentService private readonly _nativeWorkbenchEnvironmentService: INativeWorkbenchEnvironmentService,\n\t\t@IConfigurationService configurationService: IConfigurationService\n\t) {\n\t\tsuper(logService, configurationService);\n\n\t\t// Destroy any shared process tunnels that might still be active\n\t\tthis._register(lifecycleService.onDidShutdown(() => {\n\t\t\tthis._activeSharedProcessTunnels.forEach((id) => {\n\t\t\t\tthis._sharedProcessTunnelService.destroyTunnel(id);\n\t\t\t});\n\t\t}));\n\t}\n\n\tpublic isPortPrivileged(port: number): boolean {\n\t\treturn isPortPrivileged(port, this.defaultTunnelHost, OS, this._nativeWorkbenchEnvironmentService.os.release);\n\t}\n\n\tprotected retainOrCreateTunnel(addressOrTunnelProvider: IAddressProvider | ITunnelProvider, remoteHost: string, remotePort: number, localHost: string, localPort: number | undefined, elevateIfNeeded: boolean, privacy?: string, protocol?: string): Promise<RemoteTunnel | string | undefined> | undefined {\n\t\tconst existing = this.getTunnelFromMap(remoteHost, remotePort);\n\t\tif (existing) {\n\t\t\t++existing.refcount;\n\t\t\treturn existing.value;\n\t\t}\n\n\t\tif (isTunnelProvider(addressOrTunnelProvider)) {\n\t\t\treturn this.createWithProvider(addressOrTunnelProvider, remoteHost, remotePort, localPort, elevateIfNeeded, privacy, protocol);\n\t\t} else {\n\t\t\tthis.logService.trace(`ForwardedPorts: (TunnelService) Creating tunnel without provider ${remoteHost}:${remotePort} on local port ${localPort}.`);\n\n\t\t\tconst tunnel = this._createSharedProcessTunnel(addressOrTunnelProvider, remoteHost, remotePort, localHost, localPort, elevateIfNeeded);\n\t\t\tthis.logService.trace('ForwardedPorts: (TunnelService) Tunnel created without provider.');\n\t\t\tthis.addTunnelToMap(remoteHost, remotePort, tunnel);\n\t\t\treturn tunnel;\n\t\t}\n\t}\n\n\tprivate async _createSharedProcessTunnel(addressProvider: IAddressProvider, tunnelRemoteHost: string, tunnelRemotePort: number, tunnelLocalHost: string, tunnelLocalPort: number | undefined, elevateIfNeeded: boolean | undefined): Promise<RemoteTunnel> {\n\t\tconst { id } = await this._sharedProcessTunnelService.createTunnel();\n\t\tthis._activeSharedProcessTunnels.add(id);\n\t\tconst authority = this._environmentService.remoteAuthority!;\n\t\tconst result = await this._sharedProcessTunnelService.startTunnel(authority, id, tunnelRemoteHost, tunnelRemotePort, tunnelLocalHost, tunnelLocalPort, elevateIfNeeded);\n\t\tconst tunnel = this._instantiationService.createInstance(SharedProcessTunnel, id, addressProvider, tunnelRemoteHost, tunnelRemotePort, result.tunnelLocalPort, result.localAddress, () => {\n\t\t\tthis._activeSharedProcessTunnels.delete(id);\n\t\t});\n\t\treturn tunnel;\n\t}\n\n\toverride canTunnel(uri: URI): boolean {\n\t\treturn super.canTunnel(uri) && !!this._environmentService.remoteAuthority;\n\t}\n}\n\nregisterSingleton(ITunnelService, TunnelService, InstantiationType.Delayed);\n"],
  "mappings": "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",
  "names": []
}
