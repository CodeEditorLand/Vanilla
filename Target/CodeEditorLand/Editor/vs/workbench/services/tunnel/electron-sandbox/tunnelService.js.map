{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/tunnel/electron-sandbox/tunnelService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Disposable } from \"../../../../base/common/lifecycle.js\";\nimport { OS } from \"../../../../base/common/platform.js\";\nimport type { URI } from \"../../../../base/common/uri.js\";\nimport { IConfigurationService } from \"../../../../platform/configuration/common/configuration.js\";\nimport {\n\tInstantiationType,\n\tregisterSingleton,\n} from \"../../../../platform/instantiation/common/extensions.js\";\nimport { IInstantiationService } from \"../../../../platform/instantiation/common/instantiation.js\";\nimport { ILogService } from \"../../../../platform/log/common/log.js\";\nimport type { IAddressProvider } from \"../../../../platform/remote/common/remoteAgentConnection.js\";\nimport { IRemoteAuthorityResolverService } from \"../../../../platform/remote/common/remoteAuthorityResolver.js\";\nimport { ISharedProcessTunnelService } from \"../../../../platform/remote/common/sharedProcessTunnelService.js\";\nimport {\n\tAbstractTunnelService,\n\ttype ITunnelProvider,\n\tITunnelService,\n\ttype RemoteTunnel,\n\tTunnelPrivacyId,\n\tisPortPrivileged,\n\tisTunnelProvider,\n} from \"../../../../platform/tunnel/common/tunnel.js\";\nimport { IWorkbenchEnvironmentService } from \"../../environment/common/environmentService.js\";\nimport { INativeWorkbenchEnvironmentService } from \"../../environment/electron-sandbox/environmentService.js\";\nimport { ILifecycleService } from \"../../lifecycle/common/lifecycle.js\";\n\nclass SharedProcessTunnel extends Disposable implements RemoteTunnel {\n\tpublic readonly privacy = TunnelPrivacyId.Private;\n\tpublic readonly protocol: string | undefined = undefined;\n\n\tconstructor(\n\t\tprivate readonly _id: string,\n\t\tprivate readonly _addressProvider: IAddressProvider,\n\t\tpublic readonly tunnelRemoteHost: string,\n\t\tpublic readonly tunnelRemotePort: number,\n\t\tpublic readonly tunnelLocalPort: number | undefined,\n\t\tpublic readonly localAddress: string,\n\t\tprivate readonly _onBeforeDispose: () => void,\n\t\t@ISharedProcessTunnelService\n\t\tprivate readonly _sharedProcessTunnelService: ISharedProcessTunnelService,\n\t\t@IRemoteAuthorityResolverService\n\t\tprivate readonly _remoteAuthorityResolverService: IRemoteAuthorityResolverService,\n\t) {\n\t\tsuper();\n\t\tthis._updateAddress();\n\t\tthis._register(\n\t\t\tthis._remoteAuthorityResolverService.onDidChangeConnectionData(() =>\n\t\t\t\tthis._updateAddress(),\n\t\t\t),\n\t\t);\n\t}\n\n\tprivate _updateAddress(): void {\n\t\tthis._addressProvider.getAddress().then((address) => {\n\t\t\tthis._sharedProcessTunnelService.setAddress(this._id, address);\n\t\t});\n\t}\n\n\tpublic override async dispose(): Promise<void> {\n\t\tthis._onBeforeDispose();\n\t\tsuper.dispose();\n\t\tawait this._sharedProcessTunnelService.destroyTunnel(this._id);\n\t}\n}\n\nexport class TunnelService extends AbstractTunnelService {\n\tprivate readonly _activeSharedProcessTunnels = new Set<string>();\n\n\tpublic constructor(\n\t\t@ILogService logService: ILogService,\n\t\t@IWorkbenchEnvironmentService\n\t\tprivate readonly _environmentService: IWorkbenchEnvironmentService,\n\t\t@ISharedProcessTunnelService\n\t\tprivate readonly _sharedProcessTunnelService: ISharedProcessTunnelService,\n\t\t@IInstantiationService\n\t\tprivate readonly _instantiationService: IInstantiationService,\n\t\t@ILifecycleService lifecycleService: ILifecycleService,\n\t\t@INativeWorkbenchEnvironmentService\n\t\tprivate readonly _nativeWorkbenchEnvironmentService: INativeWorkbenchEnvironmentService,\n\t\t@IConfigurationService configurationService: IConfigurationService,\n\t) {\n\t\tsuper(logService, configurationService);\n\n\t\t// Destroy any shared process tunnels that might still be active\n\t\tthis._register(\n\t\t\tlifecycleService.onDidShutdown(() => {\n\t\t\t\tthis._activeSharedProcessTunnels.forEach((id) => {\n\t\t\t\t\tthis._sharedProcessTunnelService.destroyTunnel(id);\n\t\t\t\t});\n\t\t\t}),\n\t\t);\n\t}\n\n\tpublic isPortPrivileged(port: number): boolean {\n\t\treturn isPortPrivileged(\n\t\t\tport,\n\t\t\tthis.defaultTunnelHost,\n\t\t\tOS,\n\t\t\tthis._nativeWorkbenchEnvironmentService.os.release,\n\t\t);\n\t}\n\n\tprotected retainOrCreateTunnel(\n\t\taddressOrTunnelProvider: IAddressProvider | ITunnelProvider,\n\t\tremoteHost: string,\n\t\tremotePort: number,\n\t\tlocalHost: string,\n\t\tlocalPort: number | undefined,\n\t\televateIfNeeded: boolean,\n\t\tprivacy?: string,\n\t\tprotocol?: string,\n\t): Promise<RemoteTunnel | string | undefined> | undefined {\n\t\tconst existing = this.getTunnelFromMap(remoteHost, remotePort);\n\t\tif (existing) {\n\t\t\t++existing.refcount;\n\t\t\treturn existing.value;\n\t\t}\n\n\t\tif (isTunnelProvider(addressOrTunnelProvider)) {\n\t\t\treturn this.createWithProvider(\n\t\t\t\taddressOrTunnelProvider,\n\t\t\t\tremoteHost,\n\t\t\t\tremotePort,\n\t\t\t\tlocalPort,\n\t\t\t\televateIfNeeded,\n\t\t\t\tprivacy,\n\t\t\t\tprotocol,\n\t\t\t);\n\t\t} else {\n\t\t\tthis.logService.trace(\n\t\t\t\t`ForwardedPorts: (TunnelService) Creating tunnel without provider ${remoteHost}:${remotePort} on local port ${localPort}.`,\n\t\t\t);\n\n\t\t\tconst tunnel = this._createSharedProcessTunnel(\n\t\t\t\taddressOrTunnelProvider,\n\t\t\t\tremoteHost,\n\t\t\t\tremotePort,\n\t\t\t\tlocalHost,\n\t\t\t\tlocalPort,\n\t\t\t\televateIfNeeded,\n\t\t\t);\n\t\t\tthis.logService.trace(\n\t\t\t\t\"ForwardedPorts: (TunnelService) Tunnel created without provider.\",\n\t\t\t);\n\t\t\tthis.addTunnelToMap(remoteHost, remotePort, tunnel);\n\t\t\treturn tunnel;\n\t\t}\n\t}\n\n\tprivate async _createSharedProcessTunnel(\n\t\taddressProvider: IAddressProvider,\n\t\ttunnelRemoteHost: string,\n\t\ttunnelRemotePort: number,\n\t\ttunnelLocalHost: string,\n\t\ttunnelLocalPort: number | undefined,\n\t\televateIfNeeded: boolean | undefined,\n\t): Promise<RemoteTunnel> {\n\t\tconst { id } = await this._sharedProcessTunnelService.createTunnel();\n\t\tthis._activeSharedProcessTunnels.add(id);\n\t\tconst authority = this._environmentService.remoteAuthority!;\n\t\tconst result = await this._sharedProcessTunnelService.startTunnel(\n\t\t\tauthority,\n\t\t\tid,\n\t\t\ttunnelRemoteHost,\n\t\t\ttunnelRemotePort,\n\t\t\ttunnelLocalHost,\n\t\t\ttunnelLocalPort,\n\t\t\televateIfNeeded,\n\t\t);\n\t\tconst tunnel = this._instantiationService.createInstance(\n\t\t\tSharedProcessTunnel,\n\t\t\tid,\n\t\t\taddressProvider,\n\t\t\ttunnelRemoteHost,\n\t\t\ttunnelRemotePort,\n\t\t\tresult.tunnelLocalPort,\n\t\t\tresult.localAddress,\n\t\t\t() => {\n\t\t\t\tthis._activeSharedProcessTunnels.delete(id);\n\t\t\t},\n\t\t);\n\t\treturn tunnel;\n\t}\n\n\toverride canTunnel(uri: URI): boolean {\n\t\treturn (\n\t\t\tsuper.canTunnel(uri) && !!this._environmentService.remoteAuthority\n\t\t);\n\t}\n}\n\nregisterSingleton(ITunnelService, TunnelService, InstantiationType.Delayed);\n"],
  "mappings": ";;;;;;;;;;;;AAKA,SAAS,kBAAkB;AAC3B,SAAS,UAAU;AAEnB,SAAS,6BAA6B;AACtC;AAAA,EACC;AAAA,EACA;AAAA,OACM;AACP,SAAS,6BAA6B;AACtC,SAAS,mBAAmB;AAE5B,SAAS,uCAAuC;AAChD,SAAS,mCAAmC;AAC5C;AAAA,EACC;AAAA,EAEA;AAAA,EAEA;AAAA,EACA;AAAA,EACA;AAAA,OACM;AACP,SAAS,oCAAoC;AAC7C,SAAS,0CAA0C;AACnD,SAAS,yBAAyB;AAElC,IAAM,sBAAN,cAAkC,WAAmC;AAAA,EAIpE,YACkB,KACA,kBACD,kBACA,kBACA,iBACA,cACC,kBAEA,6BAEA,iCAChB;AACD,UAAM;AAZW;AACA;AACD;AACA;AACA;AACA;AACC;AAEA;AAEA;AAGjB,SAAK,eAAe;AACpB,SAAK;AAAA,MACJ,KAAK,gCAAgC;AAAA,QAA0B,MAC9D,KAAK,eAAe;AAAA,MACrB;AAAA,IACD;AAAA,EACD;AAAA,EAvDD,OA+BqE;AAAA;AAAA;AAAA,EACpD,UAAU,gBAAgB;AAAA,EAC1B,WAA+B;AAAA,EAwBvC,iBAAuB;AAC9B,SAAK,iBAAiB,WAAW,EAAE,KAAK,CAAC,YAAY;AACpD,WAAK,4BAA4B,WAAW,KAAK,KAAK,OAAO;AAAA,IAC9D,CAAC;AAAA,EACF;AAAA,EAEA,MAAsB,UAAyB;AAC9C,SAAK,iBAAiB;AACtB,UAAM,QAAQ;AACd,UAAM,KAAK,4BAA4B,cAAc,KAAK,GAAG;AAAA,EAC9D;AACD;AArCM,sBAAN;AAAA,EAYG;AAAA,EAEA;AAAA,GAdG;AAuCC,IAAM,gBAAN,cAA4B,sBAAsB;AAAA,EAGjD,YACO,YAEI,qBAEA,6BAEA,uBACE,kBAEF,oCACM,sBACtB;AACD,UAAM,YAAY,oBAAoB;AAVrB;AAEA;AAEA;AAGA;AAMjB,SAAK;AAAA,MACJ,iBAAiB,cAAc,MAAM;AACpC,aAAK,4BAA4B,QAAQ,CAAC,OAAO;AAChD,eAAK,4BAA4B,cAAc,EAAE;AAAA,QAClD,CAAC;AAAA,MACF,CAAC;AAAA,IACF;AAAA,EACD;AAAA,EAhGD,OAsEyD;AAAA;AAAA;AAAA,EACvC,8BAA8B,oBAAI,IAAY;AAAA,EA2BxD,iBAAiB,MAAuB;AAC9C,WAAO;AAAA,MACN;AAAA,MACA,KAAK;AAAA,MACL;AAAA,MACA,KAAK,mCAAmC,GAAG;AAAA,IAC5C;AAAA,EACD;AAAA,EAEU,qBACT,yBACA,YACA,YACA,WACA,WACA,iBACA,SACA,UACyD;AACzD,UAAM,WAAW,KAAK,iBAAiB,YAAY,UAAU;AAC7D,QAAI,UAAU;AACb,QAAE,SAAS;AACX,aAAO,SAAS;AAAA,IACjB;AAEA,QAAI,iBAAiB,uBAAuB,GAAG;AAC9C,aAAO,KAAK;AAAA,QACX;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,MACD;AAAA,IACD,OAAO;AACN,WAAK,WAAW;AAAA,QACf,oEAAoE,UAAU,IAAI,UAAU,kBAAkB,SAAS;AAAA,MACxH;AAEA,YAAM,SAAS,KAAK;AAAA,QACnB;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,MACD;AACA,WAAK,WAAW;AAAA,QACf;AAAA,MACD;AACA,WAAK,eAAe,YAAY,YAAY,MAAM;AAClD,aAAO;AAAA,IACR;AAAA,EACD;AAAA,EAEA,MAAc,2BACb,iBACA,kBACA,kBACA,iBACA,iBACA,iBACwB;AACxB,UAAM,EAAE,GAAG,IAAI,MAAM,KAAK,4BAA4B,aAAa;AACnE,SAAK,4BAA4B,IAAI,EAAE;AACvC,UAAM,YAAY,KAAK,oBAAoB;AAC3C,UAAM,SAAS,MAAM,KAAK,4BAA4B;AAAA,MACrD;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACD;AACA,UAAM,SAAS,KAAK,sBAAsB;AAAA,MACzC;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA,OAAO;AAAA,MACP,OAAO;AAAA,MACP,MAAM;AACL,aAAK,4BAA4B,OAAO,EAAE;AAAA,MAC3C;AAAA,IACD;AACA,WAAO;AAAA,EACR;AAAA,EAES,UAAU,KAAmB;AACrC,WACC,MAAM,UAAU,GAAG,KAAK,CAAC,CAAC,KAAK,oBAAoB;AAAA,EAErD;AACD;AA5Ha,gBAAN;AAAA,EAIJ;AAAA,EACA;AAAA,EAEA;AAAA,EAEA;AAAA,EAEA;AAAA,EACA;AAAA,EAEA;AAAA,GAdU;AA8Hb,kBAAkB,gBAAgB,eAAe,kBAAkB,OAAO;",
  "names": []
}
