{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/telemetry/test/node/commonProperties.test.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport assert from 'assert';\nimport { release, hostname } from 'os';\nimport { resolveWorkbenchCommonProperties } from '../../common/workbenchCommonProperties.js';\nimport { StorageScope, InMemoryStorageService, StorageTarget } from '../../../../../platform/storage/common/storage.js';\nimport { timeout } from '../../../../../base/common/async.js';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from '../../../../../base/test/common/utils.js';\n\nsuite('Telemetry - common properties', function () {\n\tconst commit: string = (undefined)!;\n\tconst version: string = (undefined)!;\n\tlet testStorageService: InMemoryStorageService;\n\n\tteardown(() => {\n\t\ttestStorageService.dispose();\n\t});\n\n\tensureNoDisposablesAreLeakedInTestSuite();\n\n\tsetup(() => {\n\t\ttestStorageService = new InMemoryStorageService();\n\t});\n\n\ttest('default', function () {\n\t\tconst props = resolveWorkbenchCommonProperties(testStorageService, release(), hostname(), commit, version, 'someMachineId', 'someSqmId', 'somedevDeviceId', false, process);\n\t\tassert.ok('commitHash' in props);\n\t\tassert.ok('sessionID' in props);\n\t\tassert.ok('timestamp' in props);\n\t\tassert.ok('common.platform' in props);\n\t\tassert.ok('common.nodePlatform' in props);\n\t\tassert.ok('common.nodeArch' in props);\n\t\tassert.ok('common.timesincesessionstart' in props);\n\t\tassert.ok('common.sequence' in props);\n\t\t// assert.ok('common.version.shell' in first.data); // only when running on electron\n\t\t// assert.ok('common.version.renderer' in first.data);\n\t\tassert.ok('common.platformVersion' in props, 'platformVersion');\n\t\tassert.ok('version' in props);\n\t\tassert.ok('common.firstSessionDate' in props, 'firstSessionDate');\n\t\tassert.ok('common.lastSessionDate' in props, 'lastSessionDate'); // conditional, see below, 'lastSessionDate'ow\n\t\tassert.ok('common.isNewSession' in props, 'isNewSession');\n\t\t// machine id et al\n\t\tassert.ok('common.machineId' in props, 'machineId');\n\t});\n\n\ttest('lastSessionDate when available', function () {\n\n\t\ttestStorageService.store('telemetry.lastSessionDate', new Date().toUTCString(), StorageScope.APPLICATION, StorageTarget.MACHINE);\n\n\t\tconst props = resolveWorkbenchCommonProperties(testStorageService, release(), hostname(), commit, version, 'someMachineId', 'someSqmId', 'somedevDeviceId', false, process);\n\t\tassert.ok('common.lastSessionDate' in props); // conditional, see below\n\t\tassert.ok('common.isNewSession' in props);\n\t\tassert.strictEqual(props['common.isNewSession'], '0');\n\t});\n\n\ttest('values chance on ask', async function () {\n\t\tconst props = resolveWorkbenchCommonProperties(testStorageService, release(), hostname(), commit, version, 'someMachineId', 'someSqmId', 'somedevDeviceId', false, process);\n\t\tlet value1 = props['common.sequence'];\n\t\tlet value2 = props['common.sequence'];\n\t\tassert.ok(value1 !== value2, 'seq');\n\n\t\tvalue1 = props['timestamp'];\n\t\tvalue2 = props['timestamp'];\n\t\tassert.ok(value1 !== value2, 'timestamp');\n\n\t\tvalue1 = props['common.timesincesessionstart'];\n\t\tawait timeout(10);\n\t\tvalue2 = props['common.timesincesessionstart'];\n\t\tassert.ok(value1 !== value2, 'timesincesessionstart');\n\t});\n});\n"],
  "mappings": "AAKA,OAAO,YAAY;AACnB,SAAS,SAAS,gBAAgB;AAClC,SAAS,wCAAwC;AACjD,SAAS,cAAc,wBAAwB,qBAAqB;AACpE,SAAS,eAAe;AACxB,SAAS,+CAA+C;AAExD,MAAM,iCAAiC,WAAY;AAClD,QAAM,SAAkB;AACxB,QAAM,UAAmB;AACzB,MAAI;AAEJ,WAAS,MAAM;AACd,uBAAmB,QAAQ;AAAA,EAC5B,CAAC;AAED,0CAAwC;AAExC,QAAM,MAAM;AACX,yBAAqB,IAAI,uBAAuB;AAAA,EACjD,CAAC;AAED,OAAK,WAAW,WAAY;AAC3B,UAAM,QAAQ,iCAAiC,oBAAoB,QAAQ,GAAG,SAAS,GAAG,QAAQ,SAAS,iBAAiB,aAAa,mBAAmB,OAAO,OAAO;AAC1K,WAAO,GAAG,gBAAgB,KAAK;AAC/B,WAAO,GAAG,eAAe,KAAK;AAC9B,WAAO,GAAG,eAAe,KAAK;AAC9B,WAAO,GAAG,qBAAqB,KAAK;AACpC,WAAO,GAAG,yBAAyB,KAAK;AACxC,WAAO,GAAG,qBAAqB,KAAK;AACpC,WAAO,GAAG,kCAAkC,KAAK;AACjD,WAAO,GAAG,qBAAqB,KAAK;AAGpC,WAAO,GAAG,4BAA4B,OAAO,iBAAiB;AAC9D,WAAO,GAAG,aAAa,KAAK;AAC5B,WAAO,GAAG,6BAA6B,OAAO,kBAAkB;AAChE,WAAO,GAAG,4BAA4B,OAAO,iBAAiB;AAC9D,WAAO,GAAG,yBAAyB,OAAO,cAAc;AAExD,WAAO,GAAG,sBAAsB,OAAO,WAAW;AAAA,EACnD,CAAC;AAED,OAAK,kCAAkC,WAAY;AAElD,uBAAmB,MAAM,8BAA6B,oBAAI,KAAK,GAAE,YAAY,GAAG,aAAa,aAAa,cAAc,OAAO;AAE/H,UAAM,QAAQ,iCAAiC,oBAAoB,QAAQ,GAAG,SAAS,GAAG,QAAQ,SAAS,iBAAiB,aAAa,mBAAmB,OAAO,OAAO;AAC1K,WAAO,GAAG,4BAA4B,KAAK;AAC3C,WAAO,GAAG,yBAAyB,KAAK;AACxC,WAAO,YAAY,MAAM,qBAAqB,GAAG,GAAG;AAAA,EACrD,CAAC;AAED,OAAK,wBAAwB,iBAAkB;AAC9C,UAAM,QAAQ,iCAAiC,oBAAoB,QAAQ,GAAG,SAAS,GAAG,QAAQ,SAAS,iBAAiB,aAAa,mBAAmB,OAAO,OAAO;AAC1K,QAAI,SAAS,MAAM,iBAAiB;AACpC,QAAI,SAAS,MAAM,iBAAiB;AACpC,WAAO,GAAG,WAAW,QAAQ,KAAK;AAElC,aAAS,MAAM,WAAW;AAC1B,aAAS,MAAM,WAAW;AAC1B,WAAO,GAAG,WAAW,QAAQ,WAAW;AAExC,aAAS,MAAM,8BAA8B;AAC7C,UAAM,QAAQ,EAAE;AAChB,aAAS,MAAM,8BAA8B;AAC7C,WAAO,GAAG,WAAW,QAAQ,uBAAuB;AAAA,EACrD,CAAC;AACF,CAAC;",
  "names": []
}
