{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/telemetry/electron-sandbox/telemetryService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Disposable } from \"../../../../base/common/lifecycle.js\";\nimport { process } from \"../../../../base/parts/sandbox/electron-sandbox/globals.js\";\nimport { IConfigurationService } from \"../../../../platform/configuration/common/configuration.js\";\nimport {\n\tInstantiationType,\n\tregisterSingleton,\n} from \"../../../../platform/instantiation/common/extensions.js\";\nimport { ISharedProcessService } from \"../../../../platform/ipc/electron-sandbox/services.js\";\nimport { IProductService } from \"../../../../platform/product/common/productService.js\";\nimport { IStorageService } from \"../../../../platform/storage/common/storage.js\";\nimport type {\n\tClassifiedEvent,\n\tIGDPRProperty,\n\tOmitMetadata,\n\tStrictPropertyCheck,\n} from \"../../../../platform/telemetry/common/gdprTypings.js\";\nimport {\n\ttype ITelemetryData,\n\tITelemetryService,\n\ttype TelemetryLevel,\n} from \"../../../../platform/telemetry/common/telemetry.js\";\nimport { TelemetryAppenderClient } from \"../../../../platform/telemetry/common/telemetryIpc.js\";\nimport {\n\tTelemetryService as BaseTelemetryService,\n\ttype ITelemetryServiceConfig,\n} from \"../../../../platform/telemetry/common/telemetryService.js\";\nimport {\n\tNullTelemetryService,\n\tgetPiiPathsFromEnvironment,\n\tisInternalTelemetry,\n\tsupportsTelemetry,\n} from \"../../../../platform/telemetry/common/telemetryUtils.js\";\nimport { INativeWorkbenchEnvironmentService } from \"../../environment/electron-sandbox/environmentService.js\";\nimport { resolveWorkbenchCommonProperties } from \"../common/workbenchCommonProperties.js\";\n\nexport class TelemetryService extends Disposable implements ITelemetryService {\n\tdeclare readonly _serviceBrand: undefined;\n\n\tprivate impl: ITelemetryService;\n\tpublic readonly sendErrorTelemetry: boolean;\n\n\tget sessionId(): string {\n\t\treturn this.impl.sessionId;\n\t}\n\tget machineId(): string {\n\t\treturn this.impl.machineId;\n\t}\n\tget sqmId(): string {\n\t\treturn this.impl.sqmId;\n\t}\n\tget devDeviceId(): string {\n\t\treturn this.impl.devDeviceId;\n\t}\n\tget firstSessionDate(): string {\n\t\treturn this.impl.firstSessionDate;\n\t}\n\tget msftInternal(): boolean | undefined {\n\t\treturn this.impl.msftInternal;\n\t}\n\n\tconstructor(\n\t\t@INativeWorkbenchEnvironmentService environmentService: INativeWorkbenchEnvironmentService,\n\t\t@IProductService productService: IProductService,\n\t\t@ISharedProcessService sharedProcessService: ISharedProcessService,\n\t\t@IStorageService storageService: IStorageService,\n\t\t@IConfigurationService configurationService: IConfigurationService,\n\t) {\n\t\tsuper();\n\n\t\tif (supportsTelemetry(productService, environmentService)) {\n\t\t\tconst isInternal = isInternalTelemetry(\n\t\t\t\tproductService,\n\t\t\t\tconfigurationService,\n\t\t\t);\n\t\t\tconst channel =\n\t\t\t\tsharedProcessService.getChannel(\"telemetryAppender\");\n\t\t\tconst config: ITelemetryServiceConfig = {\n\t\t\t\tappenders: [new TelemetryAppenderClient(channel)],\n\t\t\t\tcommonProperties: resolveWorkbenchCommonProperties(\n\t\t\t\t\tstorageService,\n\t\t\t\t\tenvironmentService.os.release,\n\t\t\t\t\tenvironmentService.os.hostname,\n\t\t\t\t\tproductService.commit,\n\t\t\t\t\tproductService.version,\n\t\t\t\t\tenvironmentService.machineId,\n\t\t\t\t\tenvironmentService.sqmId,\n\t\t\t\t\tenvironmentService.devDeviceId,\n\t\t\t\t\tisInternal,\n\t\t\t\t\tprocess,\n\t\t\t\t\tenvironmentService.remoteAuthority,\n\t\t\t\t),\n\t\t\t\tpiiPaths: getPiiPathsFromEnvironment(environmentService),\n\t\t\t\tsendErrorTelemetry: true,\n\t\t\t};\n\n\t\t\tthis.impl = this._register(\n\t\t\t\tnew BaseTelemetryService(\n\t\t\t\t\tconfig,\n\t\t\t\t\tconfigurationService,\n\t\t\t\t\tproductService,\n\t\t\t\t),\n\t\t\t);\n\t\t} else {\n\t\t\tthis.impl = NullTelemetryService;\n\t\t}\n\n\t\tthis.sendErrorTelemetry = this.impl.sendErrorTelemetry;\n\t}\n\n\tsetExperimentProperty(name: string, value: string): void {\n\t\treturn this.impl.setExperimentProperty(name, value);\n\t}\n\n\tget telemetryLevel(): TelemetryLevel {\n\t\treturn this.impl.telemetryLevel;\n\t}\n\n\tpublicLog(eventName: string, data?: ITelemetryData) {\n\t\tthis.impl.publicLog(eventName, data);\n\t}\n\n\tpublicLog2<\n\t\tE extends ClassifiedEvent<OmitMetadata<T>> = never,\n\t\tT extends IGDPRProperty = never,\n\t>(eventName: string, data?: StrictPropertyCheck<T, E>) {\n\t\tthis.publicLog(eventName, data as ITelemetryData);\n\t}\n\n\tpublicLogError(errorEventName: string, data?: ITelemetryData) {\n\t\tthis.impl.publicLogError(errorEventName, data);\n\t}\n\n\tpublicLogError2<\n\t\tE extends ClassifiedEvent<OmitMetadata<T>> = never,\n\t\tT extends IGDPRProperty = never,\n\t>(eventName: string, data?: StrictPropertyCheck<T, E>) {\n\t\tthis.publicLogError(eventName, data as ITelemetryData);\n\t}\n}\n\nregisterSingleton(\n\tITelemetryService,\n\tTelemetryService,\n\tInstantiationType.Delayed,\n);\n"],
  "mappings": ";;;;;;;;;;;;AAKA,SAAS,kBAAkB;AAC3B,SAAS,eAAe;AACxB,SAAS,6BAA6B;AACtC;AAAA,EACC;AAAA,EACA;AAAA,OACM;AACP,SAAS,6BAA6B;AACtC,SAAS,uBAAuB;AAChC,SAAS,uBAAuB;AAOhC;AAAA,EAEC;AAAA,OAEM;AACP,SAAS,+BAA+B;AACxC;AAAA,EACC,oBAAoB;AAAA,OAEd;AACP;AAAA,EACC;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,OACM;AACP,SAAS,0CAA0C;AACnD,SAAS,wCAAwC;AAE1C,IAAM,mBAAN,cAA+B,WAAwC;AAAA,EAxC9E,OAwC8E;AAAA;AAAA;AAAA,EAGrE;AAAA,EACQ;AAAA,EAEhB,IAAI,YAAoB;AACvB,WAAO,KAAK,KAAK;AAAA,EAClB;AAAA,EACA,IAAI,YAAoB;AACvB,WAAO,KAAK,KAAK;AAAA,EAClB;AAAA,EACA,IAAI,QAAgB;AACnB,WAAO,KAAK,KAAK;AAAA,EAClB;AAAA,EACA,IAAI,cAAsB;AACzB,WAAO,KAAK,KAAK;AAAA,EAClB;AAAA,EACA,IAAI,mBAA2B;AAC9B,WAAO,KAAK,KAAK;AAAA,EAClB;AAAA,EACA,IAAI,eAAoC;AACvC,WAAO,KAAK,KAAK;AAAA,EAClB;AAAA,EAEA,YACqC,oBACnB,gBACM,sBACN,gBACM,sBACtB;AACD,UAAM;AAEN,QAAI,kBAAkB,gBAAgB,kBAAkB,GAAG;AAC1D,YAAM,aAAa;AAAA,QAClB;AAAA,QACA;AAAA,MACD;AACA,YAAM,UACL,qBAAqB,WAAW,mBAAmB;AACpD,YAAM,SAAkC;AAAA,QACvC,WAAW,CAAC,IAAI,wBAAwB,OAAO,CAAC;AAAA,QAChD,kBAAkB;AAAA,UACjB;AAAA,UACA,mBAAmB,GAAG;AAAA,UACtB,mBAAmB,GAAG;AAAA,UACtB,eAAe;AAAA,UACf,eAAe;AAAA,UACf,mBAAmB;AAAA,UACnB,mBAAmB;AAAA,UACnB,mBAAmB;AAAA,UACnB;AAAA,UACA;AAAA,UACA,mBAAmB;AAAA,QACpB;AAAA,QACA,UAAU,2BAA2B,kBAAkB;AAAA,QACvD,oBAAoB;AAAA,MACrB;AAEA,WAAK,OAAO,KAAK;AAAA,QAChB,IAAI;AAAA,UACH;AAAA,UACA;AAAA,UACA;AAAA,QACD;AAAA,MACD;AAAA,IACD,OAAO;AACN,WAAK,OAAO;AAAA,IACb;AAEA,SAAK,qBAAqB,KAAK,KAAK;AAAA,EACrC;AAAA,EAEA,sBAAsB,MAAc,OAAqB;AACxD,WAAO,KAAK,KAAK,sBAAsB,MAAM,KAAK;AAAA,EACnD;AAAA,EAEA,IAAI,iBAAiC;AACpC,WAAO,KAAK,KAAK;AAAA,EAClB;AAAA,EAEA,UAAU,WAAmB,MAAuB;AACnD,SAAK,KAAK,UAAU,WAAW,IAAI;AAAA,EACpC;AAAA,EAEA,WAGE,WAAmB,MAAkC;AACtD,SAAK,UAAU,WAAW,IAAsB;AAAA,EACjD;AAAA,EAEA,eAAe,gBAAwB,MAAuB;AAC7D,SAAK,KAAK,eAAe,gBAAgB,IAAI;AAAA,EAC9C;AAAA,EAEA,gBAGE,WAAmB,MAAkC;AACtD,SAAK,eAAe,WAAW,IAAsB;AAAA,EACtD;AACD;AAvGa,mBAAN;AAAA,EA0BJ;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,GA9BU;AAyGb;AAAA,EACC;AAAA,EACA;AAAA,EACA,kBAAkB;AACnB;",
  "names": []
}
