{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/telemetry/browser/telemetryService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Disposable } from '../../../../base/common/lifecycle.js';\nimport { IConfigurationService } from '../../../../platform/configuration/common/configuration.js';\nimport { InstantiationType, registerSingleton } from '../../../../platform/instantiation/common/extensions.js';\nimport { ILogService, ILoggerService } from '../../../../platform/log/common/log.js';\nimport { IProductService } from '../../../../platform/product/common/productService.js';\nimport { IStorageService } from '../../../../platform/storage/common/storage.js';\nimport { OneDataSystemWebAppender } from '../../../../platform/telemetry/browser/1dsAppender.js';\nimport { ClassifiedEvent, IGDPRProperty, OmitMetadata, StrictPropertyCheck } from '../../../../platform/telemetry/common/gdprTypings.js';\nimport { ITelemetryData, ITelemetryService, TelemetryLevel, TELEMETRY_SETTING_ID } from '../../../../platform/telemetry/common/telemetry.js';\nimport { TelemetryLogAppender } from '../../../../platform/telemetry/common/telemetryLogAppender.js';\nimport { ITelemetryServiceConfig, TelemetryService as BaseTelemetryService } from '../../../../platform/telemetry/common/telemetryService.js';\nimport { getTelemetryLevel, isInternalTelemetry, isLoggingOnly, ITelemetryAppender, NullTelemetryService, supportsTelemetry } from '../../../../platform/telemetry/common/telemetryUtils.js';\nimport { IBrowserWorkbenchEnvironmentService } from '../../environment/browser/environmentService.js';\nimport { IRemoteAgentService } from '../../remote/common/remoteAgentService.js';\nimport { resolveWorkbenchCommonProperties } from './workbenchCommonProperties.js';\n\nexport class TelemetryService extends Disposable implements ITelemetryService {\n\n\tdeclare readonly _serviceBrand: undefined;\n\n\tprivate impl: ITelemetryService = NullTelemetryService;\n\tpublic readonly sendErrorTelemetry = true;\n\n\tget sessionId(): string { return this.impl.sessionId; }\n\tget machineId(): string { return this.impl.machineId; }\n\tget sqmId(): string { return this.impl.sqmId; }\n\tget devDeviceId(): string { return this.impl.devDeviceId; }\n\tget firstSessionDate(): string { return this.impl.firstSessionDate; }\n\tget msftInternal(): boolean | undefined { return this.impl.msftInternal; }\n\n\tconstructor(\n\t\t@IBrowserWorkbenchEnvironmentService environmentService: IBrowserWorkbenchEnvironmentService,\n\t\t@ILogService logService: ILogService,\n\t\t@ILoggerService loggerService: ILoggerService,\n\t\t@IConfigurationService configurationService: IConfigurationService,\n\t\t@IStorageService storageService: IStorageService,\n\t\t@IProductService productService: IProductService,\n\t\t@IRemoteAgentService remoteAgentService: IRemoteAgentService\n\t) {\n\t\tsuper();\n\n\t\tthis.impl = this.initializeService(environmentService, logService, loggerService, configurationService, storageService, productService, remoteAgentService);\n\n\t\t// When the level changes it could change from off to on and we want to make sure telemetry is properly intialized\n\t\tthis._register(configurationService.onDidChangeConfiguration(e => {\n\t\t\tif (e.affectsConfiguration(TELEMETRY_SETTING_ID)) {\n\t\t\t\tthis.impl = this.initializeService(environmentService, logService, loggerService, configurationService, storageService, productService, remoteAgentService);\n\t\t\t}\n\t\t}));\n\t}\n\n\t/**\n\t * Initializes the telemetry service to be a full fledged service.\n\t * This is only done once and only when telemetry is enabled as this will also ping the endpoint to\n\t * ensure its not adblocked and we can send telemetry\n\t */\n\tprivate initializeService(\n\t\tenvironmentService: IBrowserWorkbenchEnvironmentService,\n\t\tlogService: ILogService,\n\t\tloggerService: ILoggerService,\n\t\tconfigurationService: IConfigurationService,\n\t\tstorageService: IStorageService,\n\t\tproductService: IProductService,\n\t\tremoteAgentService: IRemoteAgentService\n\t) {\n\t\tconst telemetrySupported = supportsTelemetry(productService, environmentService) && productService.aiConfig?.ariaKey;\n\t\tif (telemetrySupported && getTelemetryLevel(configurationService) !== TelemetryLevel.NONE && this.impl === NullTelemetryService) {\n\t\t\t// If remote server is present send telemetry through that, else use the client side appender\n\t\t\tconst appenders: ITelemetryAppender[] = [];\n\t\t\tconst isInternal = isInternalTelemetry(productService, configurationService);\n\t\t\tif (!isLoggingOnly(productService, environmentService)) {\n\t\t\t\tif (remoteAgentService.getConnection() !== null) {\n\t\t\t\t\tconst remoteTelemetryProvider = {\n\t\t\t\t\t\tlog: remoteAgentService.logTelemetry.bind(remoteAgentService),\n\t\t\t\t\t\tflush: remoteAgentService.flushTelemetry.bind(remoteAgentService)\n\t\t\t\t\t};\n\t\t\t\t\tappenders.push(remoteTelemetryProvider);\n\t\t\t\t} else {\n\t\t\t\t\tappenders.push(new OneDataSystemWebAppender(isInternal, 'monacoworkbench', null, productService.aiConfig?.ariaKey));\n\t\t\t\t}\n\t\t\t}\n\t\t\tappenders.push(new TelemetryLogAppender(logService, loggerService, environmentService, productService));\n\t\t\tconst config: ITelemetryServiceConfig = {\n\t\t\t\tappenders,\n\t\t\t\tcommonProperties: resolveWorkbenchCommonProperties(storageService, productService.commit, productService.version, isInternal, environmentService.remoteAuthority, productService.embedderIdentifier, productService.removeTelemetryMachineId, environmentService.options && environmentService.options.resolveCommonTelemetryProperties),\n\t\t\t\tsendErrorTelemetry: this.sendErrorTelemetry,\n\t\t\t};\n\n\t\t\treturn this._register(new BaseTelemetryService(config, configurationService, productService));\n\t\t}\n\t\treturn this.impl;\n\t}\n\n\tsetExperimentProperty(name: string, value: string): void {\n\t\treturn this.impl.setExperimentProperty(name, value);\n\t}\n\n\tget telemetryLevel(): TelemetryLevel {\n\t\treturn this.impl.telemetryLevel;\n\t}\n\n\tpublicLog(eventName: string, data?: ITelemetryData) {\n\t\tthis.impl.publicLog(eventName, data);\n\t}\n\n\tpublicLog2<E extends ClassifiedEvent<OmitMetadata<T>> = never, T extends IGDPRProperty = never>(eventName: string, data?: StrictPropertyCheck<T, E>) {\n\t\tthis.publicLog(eventName, data as ITelemetryData);\n\t}\n\n\tpublicLogError(errorEventName: string, data?: ITelemetryData) {\n\t\tthis.impl.publicLog(errorEventName, data);\n\t}\n\n\tpublicLogError2<E extends ClassifiedEvent<OmitMetadata<T>> = never, T extends IGDPRProperty = never>(eventName: string, data?: StrictPropertyCheck<T, E>) {\n\t\tthis.publicLogError(eventName, data as ITelemetryData);\n\t}\n}\n\nregisterSingleton(ITelemetryService, TelemetryService, InstantiationType.Delayed);\n"],
  "mappings": "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",
  "names": []
}
