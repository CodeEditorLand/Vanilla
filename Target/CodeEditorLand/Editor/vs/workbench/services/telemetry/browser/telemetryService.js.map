{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/telemetry/browser/telemetryService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Disposable } from \"../../../../base/common/lifecycle.js\";\nimport { IConfigurationService } from \"../../../../platform/configuration/common/configuration.js\";\nimport {\n\tInstantiationType,\n\tregisterSingleton,\n} from \"../../../../platform/instantiation/common/extensions.js\";\nimport {\n\tILogService,\n\tILoggerService,\n} from \"../../../../platform/log/common/log.js\";\nimport { IProductService } from \"../../../../platform/product/common/productService.js\";\nimport { IStorageService } from \"../../../../platform/storage/common/storage.js\";\nimport { OneDataSystemWebAppender } from \"../../../../platform/telemetry/browser/1dsAppender.js\";\nimport type {\n\tClassifiedEvent,\n\tIGDPRProperty,\n\tOmitMetadata,\n\tStrictPropertyCheck,\n} from \"../../../../platform/telemetry/common/gdprTypings.js\";\nimport {\n\ttype ITelemetryData,\n\tITelemetryService,\n\tTELEMETRY_SETTING_ID,\n\tTelemetryLevel,\n} from \"../../../../platform/telemetry/common/telemetry.js\";\nimport { TelemetryLogAppender } from \"../../../../platform/telemetry/common/telemetryLogAppender.js\";\nimport {\n\tTelemetryService as BaseTelemetryService,\n\ttype ITelemetryServiceConfig,\n} from \"../../../../platform/telemetry/common/telemetryService.js\";\nimport {\n\ttype ITelemetryAppender,\n\tNullTelemetryService,\n\tgetTelemetryLevel,\n\tisInternalTelemetry,\n\tisLoggingOnly,\n\tsupportsTelemetry,\n} from \"../../../../platform/telemetry/common/telemetryUtils.js\";\nimport { IBrowserWorkbenchEnvironmentService } from \"../../environment/browser/environmentService.js\";\nimport { IRemoteAgentService } from \"../../remote/common/remoteAgentService.js\";\nimport { resolveWorkbenchCommonProperties } from \"./workbenchCommonProperties.js\";\n\nexport class TelemetryService extends Disposable implements ITelemetryService {\n\tdeclare readonly _serviceBrand: undefined;\n\n\tprivate impl: ITelemetryService = NullTelemetryService;\n\tpublic readonly sendErrorTelemetry = true;\n\n\tget sessionId(): string {\n\t\treturn this.impl.sessionId;\n\t}\n\tget machineId(): string {\n\t\treturn this.impl.machineId;\n\t}\n\tget sqmId(): string {\n\t\treturn this.impl.sqmId;\n\t}\n\tget devDeviceId(): string {\n\t\treturn this.impl.devDeviceId;\n\t}\n\tget firstSessionDate(): string {\n\t\treturn this.impl.firstSessionDate;\n\t}\n\tget msftInternal(): boolean | undefined {\n\t\treturn this.impl.msftInternal;\n\t}\n\n\tconstructor(\n\t\t@IBrowserWorkbenchEnvironmentService environmentService: IBrowserWorkbenchEnvironmentService,\n\t\t@ILogService logService: ILogService,\n\t\t@ILoggerService loggerService: ILoggerService,\n\t\t@IConfigurationService configurationService: IConfigurationService,\n\t\t@IStorageService storageService: IStorageService,\n\t\t@IProductService productService: IProductService,\n\t\t@IRemoteAgentService remoteAgentService: IRemoteAgentService,\n\t) {\n\t\tsuper();\n\n\t\tthis.impl = this.initializeService(\n\t\t\tenvironmentService,\n\t\t\tlogService,\n\t\t\tloggerService,\n\t\t\tconfigurationService,\n\t\t\tstorageService,\n\t\t\tproductService,\n\t\t\tremoteAgentService,\n\t\t);\n\n\t\t// When the level changes it could change from off to on and we want to make sure telemetry is properly intialized\n\t\tthis._register(\n\t\t\tconfigurationService.onDidChangeConfiguration((e) => {\n\t\t\t\tif (e.affectsConfiguration(TELEMETRY_SETTING_ID)) {\n\t\t\t\t\tthis.impl = this.initializeService(\n\t\t\t\t\t\tenvironmentService,\n\t\t\t\t\t\tlogService,\n\t\t\t\t\t\tloggerService,\n\t\t\t\t\t\tconfigurationService,\n\t\t\t\t\t\tstorageService,\n\t\t\t\t\t\tproductService,\n\t\t\t\t\t\tremoteAgentService,\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}),\n\t\t);\n\t}\n\n\t/**\n\t * Initializes the telemetry service to be a full fledged service.\n\t * This is only done once and only when telemetry is enabled as this will also ping the endpoint to\n\t * ensure its not adblocked and we can send telemetry\n\t */\n\tprivate initializeService(\n\t\tenvironmentService: IBrowserWorkbenchEnvironmentService,\n\t\tlogService: ILogService,\n\t\tloggerService: ILoggerService,\n\t\tconfigurationService: IConfigurationService,\n\t\tstorageService: IStorageService,\n\t\tproductService: IProductService,\n\t\tremoteAgentService: IRemoteAgentService,\n\t) {\n\t\tconst telemetrySupported =\n\t\t\tsupportsTelemetry(productService, environmentService) &&\n\t\t\tproductService.aiConfig?.ariaKey;\n\t\tif (\n\t\t\ttelemetrySupported &&\n\t\t\tgetTelemetryLevel(configurationService) !== TelemetryLevel.NONE &&\n\t\t\tthis.impl === NullTelemetryService\n\t\t) {\n\t\t\t// If remote server is present send telemetry through that, else use the client side appender\n\t\t\tconst appenders: ITelemetryAppender[] = [];\n\t\t\tconst isInternal = isInternalTelemetry(\n\t\t\t\tproductService,\n\t\t\t\tconfigurationService,\n\t\t\t);\n\t\t\tif (!isLoggingOnly(productService, environmentService)) {\n\t\t\t\tif (remoteAgentService.getConnection() !== null) {\n\t\t\t\t\tconst remoteTelemetryProvider = {\n\t\t\t\t\t\tlog: remoteAgentService.logTelemetry.bind(\n\t\t\t\t\t\t\tremoteAgentService,\n\t\t\t\t\t\t),\n\t\t\t\t\t\tflush: remoteAgentService.flushTelemetry.bind(\n\t\t\t\t\t\t\tremoteAgentService,\n\t\t\t\t\t\t),\n\t\t\t\t\t};\n\t\t\t\t\tappenders.push(remoteTelemetryProvider);\n\t\t\t\t} else {\n\t\t\t\t\tappenders.push(\n\t\t\t\t\t\tnew OneDataSystemWebAppender(\n\t\t\t\t\t\t\tisInternal,\n\t\t\t\t\t\t\t\"monacoworkbench\",\n\t\t\t\t\t\t\tnull,\n\t\t\t\t\t\t\tproductService.aiConfig?.ariaKey,\n\t\t\t\t\t\t),\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t\tappenders.push(\n\t\t\t\tnew TelemetryLogAppender(\n\t\t\t\t\tlogService,\n\t\t\t\t\tloggerService,\n\t\t\t\t\tenvironmentService,\n\t\t\t\t\tproductService,\n\t\t\t\t),\n\t\t\t);\n\t\t\tconst config: ITelemetryServiceConfig = {\n\t\t\t\tappenders,\n\t\t\t\tcommonProperties: resolveWorkbenchCommonProperties(\n\t\t\t\t\tstorageService,\n\t\t\t\t\tproductService.commit,\n\t\t\t\t\tproductService.version,\n\t\t\t\t\tisInternal,\n\t\t\t\t\tenvironmentService.remoteAuthority,\n\t\t\t\t\tproductService.embedderIdentifier,\n\t\t\t\t\tproductService.removeTelemetryMachineId,\n\t\t\t\t\tenvironmentService.options &&\n\t\t\t\t\t\tenvironmentService.options\n\t\t\t\t\t\t\t.resolveCommonTelemetryProperties,\n\t\t\t\t),\n\t\t\t\tsendErrorTelemetry: this.sendErrorTelemetry,\n\t\t\t};\n\n\t\t\treturn this._register(\n\t\t\t\tnew BaseTelemetryService(\n\t\t\t\t\tconfig,\n\t\t\t\t\tconfigurationService,\n\t\t\t\t\tproductService,\n\t\t\t\t),\n\t\t\t);\n\t\t}\n\t\treturn this.impl;\n\t}\n\n\tsetExperimentProperty(name: string, value: string): void {\n\t\treturn this.impl.setExperimentProperty(name, value);\n\t}\n\n\tget telemetryLevel(): TelemetryLevel {\n\t\treturn this.impl.telemetryLevel;\n\t}\n\n\tpublicLog(eventName: string, data?: ITelemetryData) {\n\t\tthis.impl.publicLog(eventName, data);\n\t}\n\n\tpublicLog2<\n\t\tE extends ClassifiedEvent<OmitMetadata<T>> = never,\n\t\tT extends IGDPRProperty = never,\n\t>(eventName: string, data?: StrictPropertyCheck<T, E>) {\n\t\tthis.publicLog(eventName, data as ITelemetryData);\n\t}\n\n\tpublicLogError(errorEventName: string, data?: ITelemetryData) {\n\t\tthis.impl.publicLog(errorEventName, data);\n\t}\n\n\tpublicLogError2<\n\t\tE extends ClassifiedEvent<OmitMetadata<T>> = never,\n\t\tT extends IGDPRProperty = never,\n\t>(eventName: string, data?: StrictPropertyCheck<T, E>) {\n\t\tthis.publicLogError(eventName, data as ITelemetryData);\n\t}\n}\n\nregisterSingleton(\n\tITelemetryService,\n\tTelemetryService,\n\tInstantiationType.Delayed,\n);\n"],
  "mappings": "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",
  "names": []
}
