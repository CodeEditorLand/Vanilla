{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/telemetry/browser/workbenchCommonProperties.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Gesture } from \"../../../../base/browser/touch.js\";\nimport { mixin } from \"../../../../base/common/objects.js\";\nimport * as Platform from \"../../../../base/common/platform.js\";\nimport * as uuid from \"../../../../base/common/uuid.js\";\nimport {\n\ttype IStorageService,\n\tStorageScope,\n\tStorageTarget,\n} from \"../../../../platform/storage/common/storage.js\";\nimport {\n\ttype ICommonProperties,\n\tfirstSessionDateStorageKey,\n\tlastSessionDateStorageKey,\n\tmachineIdKey,\n} from \"../../../../platform/telemetry/common/telemetry.js\";\nimport { cleanRemoteAuthority } from \"../../../../platform/telemetry/common/telemetryUtils.js\";\n\n/**\n * General function to help reduce the individuality of user agents\n * @param userAgent userAgent from browser window\n * @returns A simplified user agent with less detail\n */\nfunction cleanUserAgent(userAgent: string): string {\n\treturn userAgent.replace(/(\\d+\\.\\d+)(\\.\\d+)+/g, \"$1\");\n}\n\nexport function resolveWorkbenchCommonProperties(\n\tstorageService: IStorageService,\n\tcommit: string | undefined,\n\tversion: string | undefined,\n\tisInternalTelemetry: boolean,\n\tremoteAuthority?: string,\n\tproductIdentifier?: string,\n\tremoveMachineId?: boolean,\n\tresolveAdditionalProperties?: () => { [key: string]: any },\n): ICommonProperties {\n\tconst result: ICommonProperties = Object.create(null);\n\tconst firstSessionDate = storageService.get(\n\t\tfirstSessionDateStorageKey,\n\t\tStorageScope.APPLICATION,\n\t)!;\n\tconst lastSessionDate = storageService.get(\n\t\tlastSessionDateStorageKey,\n\t\tStorageScope.APPLICATION,\n\t)!;\n\n\tlet machineId: string | undefined;\n\tif (removeMachineId) {\n\t\tmachineId = `Redacted-${productIdentifier ?? \"web\"}`;\n\t} else {\n\t\tmachineId = storageService.get(machineIdKey, StorageScope.APPLICATION);\n\t\tif (!machineId) {\n\t\t\tmachineId = uuid.generateUuid();\n\t\t\tstorageService.store(\n\t\t\t\tmachineIdKey,\n\t\t\t\tmachineId,\n\t\t\t\tStorageScope.APPLICATION,\n\t\t\t\tStorageTarget.MACHINE,\n\t\t\t);\n\t\t}\n\t}\n\n\t/**\n\t * Note: In the web, session date information is fetched from browser storage, so these dates are tied to a specific\n\t * browser and not the machine overall.\n\t */\n\t// __GDPR__COMMON__ \"common.firstSessionDate\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\" }\n\tresult[\"common.firstSessionDate\"] = firstSessionDate;\n\t// __GDPR__COMMON__ \"common.lastSessionDate\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\" }\n\tresult[\"common.lastSessionDate\"] = lastSessionDate || \"\";\n\t// __GDPR__COMMON__ \"common.isNewSession\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\" }\n\tresult[\"common.isNewSession\"] = lastSessionDate ? \"0\" : \"1\";\n\t// __GDPR__COMMON__ \"common.remoteAuthority\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"PerformanceAndHealth\" }\n\tresult[\"common.remoteAuthority\"] = cleanRemoteAuthority(remoteAuthority);\n\n\t// __GDPR__COMMON__ \"common.machineId\" : { \"endPoint\": \"MacAddressHash\", \"classification\": \"EndUserPseudonymizedInformation\", \"purpose\": \"FeatureInsight\" }\n\tresult[\"common.machineId\"] = machineId;\n\t// __GDPR__COMMON__ \"sessionID\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\" }\n\tresult[\"sessionID\"] = uuid.generateUuid() + Date.now();\n\t// __GDPR__COMMON__ \"commitHash\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"PerformanceAndHealth\" }\n\tresult[\"commitHash\"] = commit;\n\t// __GDPR__COMMON__ \"version\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\" }\n\tresult[\"version\"] = version;\n\t// __GDPR__COMMON__ \"common.platform\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\" }\n\tresult[\"common.platform\"] = Platform.PlatformToString(Platform.platform);\n\t// __GDPR__COMMON__ \"common.product\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"PerformanceAndHealth\" }\n\tresult[\"common.product\"] = productIdentifier ?? \"web\";\n\t// __GDPR__COMMON__ \"common.userAgent\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\" }\n\tresult[\"common.userAgent\"] = Platform.userAgent\n\t\t? cleanUserAgent(Platform.userAgent)\n\t\t: undefined;\n\t// __GDPR__COMMON__ \"common.isTouchDevice\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\" }\n\tresult[\"common.isTouchDevice\"] = String(Gesture.isTouchDevice());\n\n\tif (isInternalTelemetry) {\n\t\t// __GDPR__COMMON__ \"common.msftInternal\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\", \"isMeasurement\": true }\n\t\tresult[\"common.msftInternal\"] = isInternalTelemetry;\n\t}\n\n\t// dynamic properties which value differs on each call\n\tlet seq = 0;\n\tconst startTime = Date.now();\n\tObject.defineProperties(result, {\n\t\t// __GDPR__COMMON__ \"timestamp\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\" }\n\t\ttimestamp: {\n\t\t\tget: () => new Date(),\n\t\t\tenumerable: true,\n\t\t},\n\t\t// __GDPR__COMMON__ \"common.timesincesessionstart\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\", \"isMeasurement\": true }\n\t\t\"common.timesincesessionstart\": {\n\t\t\tget: () => Date.now() - startTime,\n\t\t\tenumerable: true,\n\t\t},\n\t\t// __GDPR__COMMON__ \"common.sequence\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\", \"isMeasurement\": true }\n\t\t\"common.sequence\": {\n\t\t\tget: () => seq++,\n\t\t\tenumerable: true,\n\t\t},\n\t});\n\n\tif (resolveAdditionalProperties) {\n\t\tmixin(result, resolveAdditionalProperties());\n\t}\n\n\treturn result;\n}\n"],
  "mappings": ";;AAKA,SAAS,eAAe;AACxB,SAAS,aAAa;AACtB,YAAY,cAAc;AAC1B,YAAY,UAAU;AACtB;AAAA,EAEC;AAAA,EACA;AAAA,OACM;AACP;AAAA,EAEC;AAAA,EACA;AAAA,EACA;AAAA,OACM;AACP,SAAS,4BAA4B;AAOrC,SAAS,eAAe,WAA2B;AAClD,SAAO,UAAU,QAAQ,uBAAuB,IAAI;AACrD;AAFS;AAIF,SAAS,iCACf,gBACA,QACA,SACA,qBACA,iBACA,mBACA,iBACA,6BACoB;AACpB,QAAM,SAA4B,uBAAO,OAAO,IAAI;AACpD,QAAM,mBAAmB,eAAe;AAAA,IACvC;AAAA,IACA,aAAa;AAAA,EACd;AACA,QAAM,kBAAkB,eAAe;AAAA,IACtC;AAAA,IACA,aAAa;AAAA,EACd;AAEA,MAAI;AACJ,MAAI,iBAAiB;AACpB,gBAAY,YAAY,qBAAqB,KAAK;AAAA,EACnD,OAAO;AACN,gBAAY,eAAe,IAAI,cAAc,aAAa,WAAW;AACrE,QAAI,CAAC,WAAW;AACf,kBAAY,KAAK,aAAa;AAC9B,qBAAe;AAAA,QACd;AAAA,QACA;AAAA,QACA,aAAa;AAAA,QACb,cAAc;AAAA,MACf;AAAA,IACD;AAAA,EACD;AAOA,SAAO,yBAAyB,IAAI;AAEpC,SAAO,wBAAwB,IAAI,mBAAmB;AAEtD,SAAO,qBAAqB,IAAI,kBAAkB,MAAM;AAExD,SAAO,wBAAwB,IAAI,qBAAqB,eAAe;AAGvE,SAAO,kBAAkB,IAAI;AAE7B,SAAO,WAAW,IAAI,KAAK,aAAa,IAAI,KAAK,IAAI;AAErD,SAAO,YAAY,IAAI;AAEvB,SAAO,SAAS,IAAI;AAEpB,SAAO,iBAAiB,IAAI,SAAS,iBAAiB,SAAS,QAAQ;AAEvE,SAAO,gBAAgB,IAAI,qBAAqB;AAEhD,SAAO,kBAAkB,IAAI,SAAS,YACnC,eAAe,SAAS,SAAS,IACjC;AAEH,SAAO,sBAAsB,IAAI,OAAO,QAAQ,cAAc,CAAC;AAE/D,MAAI,qBAAqB;AAExB,WAAO,qBAAqB,IAAI;AAAA,EACjC;AAGA,MAAI,MAAM;AACV,QAAM,YAAY,KAAK,IAAI;AAC3B,SAAO,iBAAiB,QAAQ;AAAA;AAAA,IAE/B,WAAW;AAAA,MACV,KAAK,6BAAM,oBAAI,KAAK,GAAf;AAAA,MACL,YAAY;AAAA,IACb;AAAA;AAAA,IAEA,gCAAgC;AAAA,MAC/B,KAAK,6BAAM,KAAK,IAAI,IAAI,WAAnB;AAAA,MACL,YAAY;AAAA,IACb;AAAA;AAAA,IAEA,mBAAmB;AAAA,MAClB,KAAK,6BAAM,OAAN;AAAA,MACL,YAAY;AAAA,IACb;AAAA,EACD,CAAC;AAED,MAAI,6BAA6B;AAChC,UAAM,QAAQ,4BAA4B,CAAC;AAAA,EAC5C;AAEA,SAAO;AACR;AAnGgB;",
  "names": []
}
