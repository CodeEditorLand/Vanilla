var d=Object.defineProperty;var m=Object.getOwnPropertyDescriptor;var c=(s,r,e,t)=>{for(var o=t>1?void 0:t?m(r,e):r,n=s.length-1,a;n>=0;n--)(a=s[n])&&(o=(t?a(r,e,o):a(o))||o);return t&&o&&d(r,e,o),o},f=(s,r)=>(e,t)=>r(e,t,s);import{VSBuffer as p}from"../../../../../vs/base/common/buffer.js";import{isMacintosh as u}from"../../../../../vs/base/common/platform.js";import{URI as l}from"../../../../../vs/base/common/uri.js";import{IClipboardService as v}from"../../../../../vs/platform/clipboard/common/clipboardService.js";import{InstantiationType as T,registerSingleton as h}from"../../../../../vs/platform/instantiation/common/extensions.js";import{INativeHostService as I}from"../../../../../vs/platform/native/common/native.js";let i=class{constructor(r){this.nativeHostService=r}static FILE_FORMAT="code/file-list";async writeText(r,e){return this.nativeHostService.writeClipboardText(r,e)}async readText(r){return this.nativeHostService.readClipboardText(r)}async readFindText(){return u?this.nativeHostService.readClipboardFindText():""}async writeFindText(r){if(u)return this.nativeHostService.writeClipboardFindText(r)}async writeResources(r){if(r.length)return this.nativeHostService.writeClipboardBuffer(i.FILE_FORMAT,this.resourcesToBuffer(r))}async readResources(){return this.bufferToResources(await this.nativeHostService.readClipboardBuffer(i.FILE_FORMAT))}async hasResources(){return this.nativeHostService.hasClipboard(i.FILE_FORMAT)}resourcesToBuffer(r){return p.fromString(r.map(e=>e.toString()).join(`
`))}bufferToResources(r){if(!r)return[];const e=r.toString();if(!e)return[];try{return e.split(`
`).map(t=>l.parse(t))}catch{return[]}}};i=c([f(0,I)],i),h(v,i,T.Delayed);export{i as NativeClipboardService};
