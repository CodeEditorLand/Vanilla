{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/clipboard/electron-sandbox/clipboardService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { VSBuffer } from \"../../../../base/common/buffer.js\";\nimport { isMacintosh } from \"../../../../base/common/platform.js\";\nimport { URI } from \"../../../../base/common/uri.js\";\nimport { IClipboardService } from \"../../../../platform/clipboard/common/clipboardService.js\";\nimport {\n\tInstantiationType,\n\tregisterSingleton,\n} from \"../../../../platform/instantiation/common/extensions.js\";\nimport { INativeHostService } from \"../../../../platform/native/common/native.js\";\n\nexport class NativeClipboardService implements IClipboardService {\n\tprivate static readonly FILE_FORMAT = \"code/file-list\"; // Clipboard format for files\n\n\tdeclare readonly _serviceBrand: undefined;\n\n\tconstructor(\n\t\t@INativeHostService private readonly nativeHostService: INativeHostService\n\t) { }\n\n\tasync writeText(\n\t\ttext: string,\n\t\ttype?: \"selection\" | \"clipboard\",\n\t): Promise<void> {\n\t\treturn this.nativeHostService.writeClipboardText(text, type);\n\t}\n\n\tasync readText(type?: \"selection\" | \"clipboard\"): Promise<string> {\n\t\treturn this.nativeHostService.readClipboardText(type);\n\t}\n\n\tasync readFindText(): Promise<string> {\n\t\tif (isMacintosh) {\n\t\t\treturn this.nativeHostService.readClipboardFindText();\n\t\t}\n\n\t\treturn \"\";\n\t}\n\n\tasync writeFindText(text: string): Promise<void> {\n\t\tif (isMacintosh) {\n\t\t\treturn this.nativeHostService.writeClipboardFindText(text);\n\t\t}\n\t}\n\n\tasync writeResources(resources: URI[]): Promise<void> {\n\t\tif (resources.length) {\n\t\t\treturn this.nativeHostService.writeClipboardBuffer(\n\t\t\t\tNativeClipboardService.FILE_FORMAT,\n\t\t\t\tthis.resourcesToBuffer(resources),\n\t\t\t);\n\t\t}\n\t}\n\n\tasync readResources(): Promise<URI[]> {\n\t\treturn this.bufferToResources(\n\t\t\tawait this.nativeHostService.readClipboardBuffer(\n\t\t\t\tNativeClipboardService.FILE_FORMAT,\n\t\t\t),\n\t\t);\n\t}\n\n\tasync hasResources(): Promise<boolean> {\n\t\treturn this.nativeHostService.hasClipboard(\n\t\t\tNativeClipboardService.FILE_FORMAT,\n\t\t);\n\t}\n\n\tprivate resourcesToBuffer(resources: URI[]): VSBuffer {\n\t\treturn VSBuffer.fromString(\n\t\t\tresources.map((r) => r.toString()).join(\"\\n\"),\n\t\t);\n\t}\n\n\tprivate bufferToResources(buffer: VSBuffer): URI[] {\n\t\tif (!buffer) {\n\t\t\treturn [];\n\t\t}\n\n\t\tconst bufferValue = buffer.toString();\n\t\tif (!bufferValue) {\n\t\t\treturn [];\n\t\t}\n\n\t\ttry {\n\t\t\treturn bufferValue.split(\"\\n\").map((f) => URI.parse(f));\n\t\t} catch (error) {\n\t\t\treturn []; // do not trust clipboard data\n\t\t}\n\t}\n}\n\nregisterSingleton(\n\tIClipboardService,\n\tNativeClipboardService,\n\tInstantiationType.Delayed,\n);\n"],
  "mappings": ";;;;;;;;;;;;AAKA,SAAS,gBAAgB;AACzB,SAAS,mBAAmB;AAC5B,SAAS,WAAW;AACpB,SAAS,yBAAyB;AAClC;AAAA,EACC;AAAA,EACA;AAAA,OACM;AACP,SAAS,0BAA0B;AAE5B,IAAM,yBAAN,MAA0D;AAAA,EAKhE,YACsC,mBACpC;AADoC;AAAA,EAClC;AAAA,EAtBL,OAeiE;AAAA;AAAA;AAAA,EAChE,OAAwB,cAAc;AAAA,EAQtC,MAAM,UACL,MACA,MACgB;AAChB,WAAO,KAAK,kBAAkB,mBAAmB,MAAM,IAAI;AAAA,EAC5D;AAAA,EAEA,MAAM,SAAS,MAAmD;AACjE,WAAO,KAAK,kBAAkB,kBAAkB,IAAI;AAAA,EACrD;AAAA,EAEA,MAAM,eAAgC;AACrC,QAAI,aAAa;AAChB,aAAO,KAAK,kBAAkB,sBAAsB;AAAA,IACrD;AAEA,WAAO;AAAA,EACR;AAAA,EAEA,MAAM,cAAc,MAA6B;AAChD,QAAI,aAAa;AAChB,aAAO,KAAK,kBAAkB,uBAAuB,IAAI;AAAA,IAC1D;AAAA,EACD;AAAA,EAEA,MAAM,eAAe,WAAiC;AACrD,QAAI,UAAU,QAAQ;AACrB,aAAO,KAAK,kBAAkB;AAAA,QAC7B,uBAAuB;AAAA,QACvB,KAAK,kBAAkB,SAAS;AAAA,MACjC;AAAA,IACD;AAAA,EACD;AAAA,EAEA,MAAM,gBAAgC;AACrC,WAAO,KAAK;AAAA,MACX,MAAM,KAAK,kBAAkB;AAAA,QAC5B,uBAAuB;AAAA,MACxB;AAAA,IACD;AAAA,EACD;AAAA,EAEA,MAAM,eAAiC;AACtC,WAAO,KAAK,kBAAkB;AAAA,MAC7B,uBAAuB;AAAA,IACxB;AAAA,EACD;AAAA,EAEQ,kBAAkB,WAA4B;AACrD,WAAO,SAAS;AAAA,MACf,UAAU,IAAI,CAAC,MAAM,EAAE,SAAS,CAAC,EAAE,KAAK,IAAI;AAAA,IAC7C;AAAA,EACD;AAAA,EAEQ,kBAAkB,QAAyB;AAClD,QAAI,CAAC,QAAQ;AACZ,aAAO,CAAC;AAAA,IACT;AAEA,UAAM,cAAc,OAAO,SAAS;AACpC,QAAI,CAAC,aAAa;AACjB,aAAO,CAAC;AAAA,IACT;AAEA,QAAI;AACH,aAAO,YAAY,MAAM,IAAI,EAAE,IAAI,CAAC,MAAM,IAAI,MAAM,CAAC,CAAC;AAAA,IACvD,SAAS,OAAO;AACf,aAAO,CAAC;AAAA,IACT;AAAA,EACD;AACD;AA/Ea,yBAAN;AAAA,EAMJ;AAAA,GANU;AAiFb;AAAA,EACC;AAAA,EACA;AAAA,EACA,kBAAkB;AACnB;",
  "names": []
}
