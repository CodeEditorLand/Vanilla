{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/clipboard/electron-sandbox/clipboardService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IClipboardService } from '../../../../platform/clipboard/common/clipboardService.js';\nimport { URI } from '../../../../base/common/uri.js';\nimport { isMacintosh } from '../../../../base/common/platform.js';\nimport { InstantiationType, registerSingleton } from '../../../../platform/instantiation/common/extensions.js';\nimport { INativeHostService } from '../../../../platform/native/common/native.js';\nimport { VSBuffer } from '../../../../base/common/buffer.js';\n\nexport class NativeClipboardService implements IClipboardService {\n\n\tprivate static readonly FILE_FORMAT = 'code/file-list'; // Clipboard format for files\n\n\tdeclare readonly _serviceBrand: undefined;\n\n\tconstructor(\n\t\t@INativeHostService private readonly nativeHostService: INativeHostService\n\t) { }\n\n\tasync writeText(text: string, type?: 'selection' | 'clipboard'): Promise<void> {\n\t\treturn this.nativeHostService.writeClipboardText(text, type);\n\t}\n\n\tasync readText(type?: 'selection' | 'clipboard'): Promise<string> {\n\t\treturn this.nativeHostService.readClipboardText(type);\n\t}\n\n\tasync readFindText(): Promise<string> {\n\t\tif (isMacintosh) {\n\t\t\treturn this.nativeHostService.readClipboardFindText();\n\t\t}\n\n\t\treturn '';\n\t}\n\n\tasync writeFindText(text: string): Promise<void> {\n\t\tif (isMacintosh) {\n\t\t\treturn this.nativeHostService.writeClipboardFindText(text);\n\t\t}\n\t}\n\n\tasync writeResources(resources: URI[]): Promise<void> {\n\t\tif (resources.length) {\n\t\t\treturn this.nativeHostService.writeClipboardBuffer(NativeClipboardService.FILE_FORMAT, this.resourcesToBuffer(resources));\n\t\t}\n\t}\n\n\tasync readResources(): Promise<URI[]> {\n\t\treturn this.bufferToResources(await this.nativeHostService.readClipboardBuffer(NativeClipboardService.FILE_FORMAT));\n\t}\n\n\tasync hasResources(): Promise<boolean> {\n\t\treturn this.nativeHostService.hasClipboard(NativeClipboardService.FILE_FORMAT);\n\t}\n\n\tprivate resourcesToBuffer(resources: URI[]): VSBuffer {\n\t\treturn VSBuffer.fromString(resources.map(r => r.toString()).join('\\n'));\n\t}\n\n\tprivate bufferToResources(buffer: VSBuffer): URI[] {\n\t\tif (!buffer) {\n\t\t\treturn [];\n\t\t}\n\n\t\tconst bufferValue = buffer.toString();\n\t\tif (!bufferValue) {\n\t\t\treturn [];\n\t\t}\n\n\t\ttry {\n\t\t\treturn bufferValue.split('\\n').map(f => URI.parse(f));\n\t\t} catch (error) {\n\t\t\treturn []; // do not trust clipboard data\n\t\t}\n\t}\n}\n\nregisterSingleton(IClipboardService, NativeClipboardService, InstantiationType.Delayed);\n"],
  "mappings": ";;;;;;;;;;;;AAKA,SAAS,yBAAyB;AAClC,SAAS,WAAW;AACpB,SAAS,mBAAmB;AAC5B,SAAS,mBAAmB,yBAAyB;AACrD,SAAS,0BAA0B;AACnC,SAAS,gBAAgB;AAElB,IAAM,yBAAN,MAA0D;AAAA,EAMhE,YACsC,mBACpC;AADoC;AAAA,EAClC;AAAA,EApBL,OAYiE;AAAA;AAAA;AAAA,EAEhE,OAAwB,cAAc;AAAA,EAQtC,MAAM,UAAU,MAAc,MAAiD;AAC9E,WAAO,KAAK,kBAAkB,mBAAmB,MAAM,IAAI;AAAA,EAC5D;AAAA,EAEA,MAAM,SAAS,MAAmD;AACjE,WAAO,KAAK,kBAAkB,kBAAkB,IAAI;AAAA,EACrD;AAAA,EAEA,MAAM,eAAgC;AACrC,QAAI,aAAa;AAChB,aAAO,KAAK,kBAAkB,sBAAsB;AAAA,IACrD;AAEA,WAAO;AAAA,EACR;AAAA,EAEA,MAAM,cAAc,MAA6B;AAChD,QAAI,aAAa;AAChB,aAAO,KAAK,kBAAkB,uBAAuB,IAAI;AAAA,IAC1D;AAAA,EACD;AAAA,EAEA,MAAM,eAAe,WAAiC;AACrD,QAAI,UAAU,QAAQ;AACrB,aAAO,KAAK,kBAAkB,qBAAqB,uBAAuB,aAAa,KAAK,kBAAkB,SAAS,CAAC;AAAA,IACzH;AAAA,EACD;AAAA,EAEA,MAAM,gBAAgC;AACrC,WAAO,KAAK,kBAAkB,MAAM,KAAK,kBAAkB,oBAAoB,uBAAuB,WAAW,CAAC;AAAA,EACnH;AAAA,EAEA,MAAM,eAAiC;AACtC,WAAO,KAAK,kBAAkB,aAAa,uBAAuB,WAAW;AAAA,EAC9E;AAAA,EAEQ,kBAAkB,WAA4B;AACrD,WAAO,SAAS,WAAW,UAAU,IAAI,OAAK,EAAE,SAAS,CAAC,EAAE,KAAK,IAAI,CAAC;AAAA,EACvE;AAAA,EAEQ,kBAAkB,QAAyB;AAClD,QAAI,CAAC,QAAQ;AACZ,aAAO,CAAC;AAAA,IACT;AAEA,UAAM,cAAc,OAAO,SAAS;AACpC,QAAI,CAAC,aAAa;AACjB,aAAO,CAAC;AAAA,IACT;AAEA,QAAI;AACH,aAAO,YAAY,MAAM,IAAI,EAAE,IAAI,OAAK,IAAI,MAAM,CAAC,CAAC;AAAA,IACrD,SAAS,OAAO;AACf,aAAO,CAAC;AAAA,IACT;AAAA,EACD;AACD;AAlEa,yBAAN;AAAA,EAOJ;AAAA,GAPU;AAoEb,kBAAkB,mBAAmB,wBAAwB,kBAAkB,OAAO;",
  "names": []
}
