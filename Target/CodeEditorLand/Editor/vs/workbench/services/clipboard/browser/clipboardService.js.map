{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/clipboard/browser/clipboardService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { getActiveWindow } from \"../../../../base/browser/dom.js\";\nimport { Event } from \"../../../../base/common/event.js\";\nimport { DisposableStore } from \"../../../../base/common/lifecycle.js\";\nimport { localize } from \"../../../../nls.js\";\nimport { BrowserClipboardService as BaseBrowserClipboardService } from \"../../../../platform/clipboard/browser/clipboardService.js\";\nimport { IClipboardService } from \"../../../../platform/clipboard/common/clipboardService.js\";\nimport {\n\tInstantiationType,\n\tregisterSingleton,\n} from \"../../../../platform/instantiation/common/extensions.js\";\nimport { ILayoutService } from \"../../../../platform/layout/browser/layoutService.js\";\nimport { ILogService } from \"../../../../platform/log/common/log.js\";\nimport {\n\tINotificationService,\n\tSeverity,\n} from \"../../../../platform/notification/common/notification.js\";\nimport { IOpenerService } from \"../../../../platform/opener/common/opener.js\";\nimport { IWorkbenchEnvironmentService } from \"../../environment/common/environmentService.js\";\n\nexport class BrowserClipboardService extends BaseBrowserClipboardService {\n\tconstructor(\n\t\t@INotificationService\n\t\tprivate readonly notificationService: INotificationService,\n\t\t@IOpenerService private readonly openerService: IOpenerService,\n\t\t@IWorkbenchEnvironmentService\n\t\tprivate readonly environmentService: IWorkbenchEnvironmentService,\n\t\t@ILogService logService: ILogService,\n\t\t@ILayoutService layoutService: ILayoutService,\n\t) {\n\t\tsuper(layoutService, logService);\n\t}\n\n\toverride async writeText(text: string, type?: string): Promise<void> {\n\t\tif (\n\t\t\t!!this.environmentService.extensionTestsLocationURI &&\n\t\t\ttypeof type !== \"string\"\n\t\t) {\n\t\t\ttype = \"vscode-tests\"; // force in-memory clipboard for tests to avoid permission issues\n\t\t}\n\n\t\treturn super.writeText(text, type);\n\t}\n\n\toverride async readText(type?: string): Promise<string> {\n\t\tif (\n\t\t\t!!this.environmentService.extensionTestsLocationURI &&\n\t\t\ttypeof type !== \"string\"\n\t\t) {\n\t\t\ttype = \"vscode-tests\"; // force in-memory clipboard for tests to avoid permission issues\n\t\t}\n\n\t\tif (type) {\n\t\t\treturn super.readText(type);\n\t\t}\n\n\t\ttry {\n\t\t\treturn await getActiveWindow().navigator.clipboard.readText();\n\t\t} catch (error) {\n\t\t\treturn new Promise<string>((resolve) => {\n\t\t\t\t// Inform user about permissions problem (https://github.com/microsoft/vscode/issues/112089)\n\t\t\t\tconst listener = new DisposableStore();\n\t\t\t\tconst handle = this.notificationService.prompt(\n\t\t\t\t\tSeverity.Error,\n\t\t\t\t\tlocalize(\n\t\t\t\t\t\t\"clipboardError\",\n\t\t\t\t\t\t\"Unable to read from the browser's clipboard. Please make sure you have granted access for this website to read from the clipboard.\",\n\t\t\t\t\t),\n\t\t\t\t\t[\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: localize(\"retry\", \"Retry\"),\n\t\t\t\t\t\t\trun: async () => {\n\t\t\t\t\t\t\t\tlistener.dispose();\n\t\t\t\t\t\t\t\tresolve(await this.readText(type));\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: localize(\"learnMore\", \"Learn More\"),\n\t\t\t\t\t\t\trun: () =>\n\t\t\t\t\t\t\t\tthis.openerService.open(\n\t\t\t\t\t\t\t\t\t\"https://go.microsoft.com/fwlink/?linkid=2151362\",\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t\t{\n\t\t\t\t\t\tsticky: true,\n\t\t\t\t\t},\n\t\t\t\t);\n\n\t\t\t\t// Always resolve the promise once the notification closes\n\t\t\t\tlistener.add(Event.once(handle.onDidClose)(() => resolve(\"\")));\n\t\t\t});\n\t\t}\n\t}\n}\n\nregisterSingleton(\n\tIClipboardService,\n\tBrowserClipboardService,\n\tInstantiationType.Delayed,\n);\n"],
  "mappings": ";;;;;;;;;;;;AAKA,SAAS,uBAAuB;AAChC,SAAS,aAAa;AACtB,SAAS,uBAAuB;AAChC,SAAS,gBAAgB;AACzB,SAAS,2BAA2B,mCAAmC;AACvE,SAAS,yBAAyB;AAClC;AAAA,EACC;AAAA,EACA;AAAA,OACM;AACP,SAAS,sBAAsB;AAC/B,SAAS,mBAAmB;AAC5B;AAAA,EACC;AAAA,EACA;AAAA,OACM;AACP,SAAS,sBAAsB;AAC/B,SAAS,oCAAoC;AAEtC,IAAM,0BAAN,cAAsC,4BAA4B;AAAA,EACxE,YAEkB,qBACgB,eAEhB,oBACJ,YACG,eACf;AACD,UAAM,eAAe,UAAU;AAPd;AACgB;AAEhB;AAAA,EAKlB;AAAA,EAnCD,OAwByE;AAAA;AAAA;AAAA,EAaxE,MAAe,UAAU,MAAc,MAA8B;AACpE,QACC,CAAC,CAAC,KAAK,mBAAmB,6BAC1B,OAAO,SAAS,UACf;AACD,aAAO;AAAA,IACR;AAEA,WAAO,MAAM,UAAU,MAAM,IAAI;AAAA,EAClC;AAAA,EAEA,MAAe,SAAS,MAAgC;AACvD,QACC,CAAC,CAAC,KAAK,mBAAmB,6BAC1B,OAAO,SAAS,UACf;AACD,aAAO;AAAA,IACR;AAEA,QAAI,MAAM;AACT,aAAO,MAAM,SAAS,IAAI;AAAA,IAC3B;AAEA,QAAI;AACH,aAAO,MAAM,gBAAgB,EAAE,UAAU,UAAU,SAAS;AAAA,IAC7D,SAAS,OAAO;AACf,aAAO,IAAI,QAAgB,CAAC,YAAY;AAEvC,cAAM,WAAW,IAAI,gBAAgB;AACrC,cAAM,SAAS,KAAK,oBAAoB;AAAA,UACvC,SAAS;AAAA,UACT;AAAA,YACC;AAAA,YACA;AAAA,UACD;AAAA,UACA;AAAA,YACC;AAAA,cACC,OAAO,SAAS,SAAS,OAAO;AAAA,cAChC,KAAK,mCAAY;AAChB,yBAAS,QAAQ;AACjB,wBAAQ,MAAM,KAAK,SAAS,IAAI,CAAC;AAAA,cAClC,GAHK;AAAA,YAIN;AAAA,YACA;AAAA,cACC,OAAO,SAAS,aAAa,YAAY;AAAA,cACzC,KAAK,6BACJ,KAAK,cAAc;AAAA,gBAClB;AAAA,cACD,GAHI;AAAA,YAIN;AAAA,UACD;AAAA,UACA;AAAA,YACC,QAAQ;AAAA,UACT;AAAA,QACD;AAGA,iBAAS,IAAI,MAAM,KAAK,OAAO,UAAU,EAAE,MAAM,QAAQ,EAAE,CAAC,CAAC;AAAA,MAC9D,CAAC;AAAA,IACF;AAAA,EACD;AACD;AA1Ea,0BAAN;AAAA,EAEJ;AAAA,EAEA;AAAA,EACA;AAAA,EAEA;AAAA,EACA;AAAA,GARU;AA4Eb;AAAA,EACC;AAAA,EACA;AAAA,EACA,kBAAkB;AACnB;",
  "names": []
}
