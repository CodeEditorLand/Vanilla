{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/userActivity/common/userActivityService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport {\n\tRunOnceScheduler,\n\tdisposableTimeout,\n\trunWhenGlobalIdle,\n} from \"../../../../base/common/async.js\";\nimport { Emitter, type Event } from \"../../../../base/common/event.js\";\nimport {\n\tDisposable,\n\tDisposableStore,\n\ttype IDisposable,\n\ttoDisposable,\n} from \"../../../../base/common/lifecycle.js\";\nimport {\n\tInstantiationType,\n\tregisterSingleton,\n} from \"../../../../platform/instantiation/common/extensions.js\";\nimport {\n\tIInstantiationService,\n\tcreateDecorator,\n} from \"../../../../platform/instantiation/common/instantiation.js\";\nimport { userActivityRegistry } from \"./userActivityRegistry.js\";\n\nexport interface IMarkActiveOptions {\n\twhenHeldFor?: number;\n}\n\n/**\n * Service that observes user activity in the window.\n */\nexport interface IUserActivityService {\n\t_serviceBrand: undefined;\n\n\t/**\n\t * Whether the user is currently active.\n\t */\n\treadonly isActive: boolean;\n\n\t/**\n\t * Fires when the activity state changes.\n\t */\n\treadonly onDidChangeIsActive: Event<boolean>;\n\n\t/**\n\t * Marks the user as being active until the Disposable is disposed of.\n\t * Multiple consumers call this method; the user will only be considered\n\t * inactive once all consumers have disposed of their Disposables.\n\t */\n\tmarkActive(opts?: IMarkActiveOptions): IDisposable;\n}\n\nconst MARK_INACTIVE_DEBOUNCE = 10_000;\n\nexport const IUserActivityService = createDecorator<IUserActivityService>(\n\t\"IUserActivityService\",\n);\n\nexport class UserActivityService\n\textends Disposable\n\timplements IUserActivityService\n{\n\tdeclare readonly _serviceBrand: undefined;\n\tprivate readonly markInactive = this._register(\n\t\tnew RunOnceScheduler(() => {\n\t\t\tthis.isActive = false;\n\t\t\tthis.changeEmitter.fire(false);\n\t\t}, MARK_INACTIVE_DEBOUNCE),\n\t);\n\n\tprivate readonly changeEmitter = this._register(new Emitter<boolean>());\n\tprivate active = 0;\n\n\t/**\n\t * @inheritdoc\n\t *\n\t * Note: initialized to true, since the user just did something to open the\n\t * window. The bundled DomActivityTracker will initially assume activity\n\t * as well in order to unset this if the window gets abandoned.\n\t */\n\tpublic isActive = true;\n\n\t/** @inheritdoc */\n\tonDidChangeIsActive: Event<boolean> = this.changeEmitter.event;\n\n\tconstructor(\n\t\t@IInstantiationService instantiationService: IInstantiationService,\n\t) {\n\t\tsuper();\n\t\tthis._register(\n\t\t\trunWhenGlobalIdle(() =>\n\t\t\t\tuserActivityRegistry.take(this, instantiationService),\n\t\t\t),\n\t\t);\n\t}\n\n\t/** @inheritdoc */\n\tmarkActive(opts?: IMarkActiveOptions): IDisposable {\n\t\tif (opts?.whenHeldFor) {\n\t\t\tconst store = new DisposableStore();\n\t\t\tstore.add(\n\t\t\t\tdisposableTimeout(\n\t\t\t\t\t() => store.add(this.markActive()),\n\t\t\t\t\topts.whenHeldFor,\n\t\t\t\t),\n\t\t\t);\n\t\t\treturn store;\n\t\t}\n\n\t\tif (++this.active === 1) {\n\t\t\tthis.isActive = true;\n\t\t\tthis.changeEmitter.fire(true);\n\t\t\tthis.markInactive.cancel();\n\t\t}\n\n\t\treturn toDisposable(() => {\n\t\t\tif (--this.active === 0) {\n\t\t\t\tthis.markInactive.schedule();\n\t\t\t}\n\t\t});\n\t}\n}\n\nregisterSingleton(\n\tIUserActivityService,\n\tUserActivityService,\n\tInstantiationType.Delayed,\n);\n"],
  "mappings": ";;;;;;;;;;;;AAKA;AAAA,EACC;AAAA,EACA;AAAA,EACA;AAAA,OACM;AACP,SAAS,eAA2B;AACpC;AAAA,EACC;AAAA,EACA;AAAA,EAEA;AAAA,OACM;AACP;AAAA,EACC;AAAA,EACA;AAAA,OACM;AACP;AAAA,EACC;AAAA,EACA;AAAA,OACM;AACP,SAAS,4BAA4B;AA8BrC,MAAM,yBAAyB;AAExB,MAAM,uBAAuB;AAAA,EACnC;AACD;AAEO,IAAM,sBAAN,cACE,WAET;AAAA,EAhEA,OAgEA;AAAA;AAAA;AAAA,EAEkB,eAAe,KAAK;AAAA,IACpC,IAAI,iBAAiB,MAAM;AAC1B,WAAK,WAAW;AAChB,WAAK,cAAc,KAAK,KAAK;AAAA,IAC9B,GAAG,sBAAsB;AAAA,EAC1B;AAAA,EAEiB,gBAAgB,KAAK,UAAU,IAAI,QAAiB,CAAC;AAAA,EAC9D,SAAS;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASV,WAAW;AAAA;AAAA,EAGlB,sBAAsC,KAAK,cAAc;AAAA,EAEzD,YACwB,sBACtB;AACD,UAAM;AACN,SAAK;AAAA,MACJ;AAAA,QAAkB,MACjB,qBAAqB,KAAK,MAAM,oBAAoB;AAAA,MACrD;AAAA,IACD;AAAA,EACD;AAAA;AAAA,EAGA,WAAW,MAAwC;AAClD,QAAI,MAAM,aAAa;AACtB,YAAM,QAAQ,IAAI,gBAAgB;AAClC,YAAM;AAAA,QACL;AAAA,UACC,MAAM,MAAM,IAAI,KAAK,WAAW,CAAC;AAAA,UACjC,KAAK;AAAA,QACN;AAAA,MACD;AACA,aAAO;AAAA,IACR;AAEA,QAAI,EAAE,KAAK,WAAW,GAAG;AACxB,WAAK,WAAW;AAChB,WAAK,cAAc,KAAK,IAAI;AAC5B,WAAK,aAAa,OAAO;AAAA,IAC1B;AAEA,WAAO,aAAa,MAAM;AACzB,UAAI,EAAE,KAAK,WAAW,GAAG;AACxB,aAAK,aAAa,SAAS;AAAA,MAC5B;AAAA,IACD,CAAC;AAAA,EACF;AACD;AA/Da,sBAAN;AAAA,EA4BJ;AAAA,GA5BU;AAiEb;AAAA,EACC;AAAA,EACA;AAAA,EACA,kBAAkB;AACnB;",
  "names": []
}
