{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/userActivity/common/userActivityService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { disposableTimeout, RunOnceScheduler, runWhenGlobalIdle } from '../../../../base/common/async.js';\nimport { Emitter, Event } from '../../../../base/common/event.js';\nimport { Disposable, DisposableStore, IDisposable, toDisposable } from '../../../../base/common/lifecycle.js';\nimport { InstantiationType, registerSingleton } from '../../../../platform/instantiation/common/extensions.js';\nimport { IInstantiationService, createDecorator } from '../../../../platform/instantiation/common/instantiation.js';\nimport { userActivityRegistry } from './userActivityRegistry.js';\n\nexport interface IMarkActiveOptions {\n\twhenHeldFor?: number;\n}\n\n/**\n * Service that observes user activity in the window.\n */\nexport interface IUserActivityService {\n\t_serviceBrand: undefined;\n\n\t/**\n\t * Whether the user is currently active.\n\t */\n\treadonly isActive: boolean;\n\n\t/**\n\t * Fires when the activity state changes.\n\t */\n\treadonly onDidChangeIsActive: Event<boolean>;\n\n\t/**\n\t * Marks the user as being active until the Disposable is disposed of.\n\t * Multiple consumers call this method; the user will only be considered\n\t * inactive once all consumers have disposed of their Disposables.\n\t */\n\tmarkActive(opts?: IMarkActiveOptions): IDisposable;\n}\n\nconst MARK_INACTIVE_DEBOUNCE = 10_000;\n\nexport const IUserActivityService = createDecorator<IUserActivityService>('IUserActivityService');\n\nexport class UserActivityService extends Disposable implements IUserActivityService {\n\tdeclare readonly _serviceBrand: undefined;\n\tprivate readonly markInactive = this._register(new RunOnceScheduler(() => {\n\t\tthis.isActive = false;\n\t\tthis.changeEmitter.fire(false);\n\t}, MARK_INACTIVE_DEBOUNCE));\n\n\tprivate readonly changeEmitter = this._register(new Emitter<boolean>);\n\tprivate active = 0;\n\n\t/**\n\t * @inheritdoc\n\t *\n\t * Note: initialized to true, since the user just did something to open the\n\t * window. The bundled DomActivityTracker will initially assume activity\n\t * as well in order to unset this if the window gets abandoned.\n\t */\n\tpublic isActive = true;\n\n\t/** @inheritdoc */\n\tonDidChangeIsActive: Event<boolean> = this.changeEmitter.event;\n\n\tconstructor(@IInstantiationService instantiationService: IInstantiationService) {\n\t\tsuper();\n\t\tthis._register(runWhenGlobalIdle(() => userActivityRegistry.take(this, instantiationService)));\n\t}\n\n\t/** @inheritdoc */\n\tmarkActive(opts?: IMarkActiveOptions): IDisposable {\n\t\tif (opts?.whenHeldFor) {\n\t\t\tconst store = new DisposableStore();\n\t\t\tstore.add(disposableTimeout(() => store.add(this.markActive()), opts.whenHeldFor));\n\t\t\treturn store;\n\t\t}\n\n\t\tif (++this.active === 1) {\n\t\t\tthis.isActive = true;\n\t\t\tthis.changeEmitter.fire(true);\n\t\t\tthis.markInactive.cancel();\n\t\t}\n\n\t\treturn toDisposable(() => {\n\t\t\tif (--this.active === 0) {\n\t\t\t\tthis.markInactive.schedule();\n\t\t\t}\n\t\t});\n\t}\n}\n\nregisterSingleton(IUserActivityService, UserActivityService, InstantiationType.Delayed);\n"],
  "mappings": ";;;;;;;;;;;;AAKA,SAAS,mBAAmB,kBAAkB,yBAAyB;AACvE,SAAS,SAAS,aAAa;AAC/B,SAAS,YAAY,iBAAiB,aAAa,oBAAoB;AACvE,SAAS,mBAAmB,yBAAyB;AACrD,SAAS,uBAAuB,uBAAuB;AACvD,SAAS,4BAA4B;AA8BrC,MAAM,yBAAyB;AAExB,MAAM,uBAAuB,gBAAsC,sBAAsB;AAEzF,IAAM,sBAAN,cAAkC,WAA2C;AAAA,EA5CpF,OA4CoF;AAAA;AAAA;AAAA,EAElE,eAAe,KAAK,UAAU,IAAI,iBAAiB,MAAM;AACzE,SAAK,WAAW;AAChB,SAAK,cAAc,KAAK,KAAK;AAAA,EAC9B,GAAG,sBAAsB,CAAC;AAAA,EAET,gBAAgB,KAAK,UAAU,IAAI,SAAgB;AAAA,EAC5D,SAAS;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASV,WAAW;AAAA;AAAA,EAGlB,sBAAsC,KAAK,cAAc;AAAA,EAEzD,YAAmC,sBAA6C;AAC/E,UAAM;AACN,SAAK,UAAU,kBAAkB,MAAM,qBAAqB,KAAK,MAAM,oBAAoB,CAAC,CAAC;AAAA,EAC9F;AAAA;AAAA,EAGA,WAAW,MAAwC;AAClD,QAAI,MAAM,aAAa;AACtB,YAAM,QAAQ,IAAI,gBAAgB;AAClC,YAAM,IAAI,kBAAkB,MAAM,MAAM,IAAI,KAAK,WAAW,CAAC,GAAG,KAAK,WAAW,CAAC;AACjF,aAAO;AAAA,IACR;AAEA,QAAI,EAAE,KAAK,WAAW,GAAG;AACxB,WAAK,WAAW;AAChB,WAAK,cAAc,KAAK,IAAI;AAC5B,WAAK,aAAa,OAAO;AAAA,IAC1B;AAEA,WAAO,aAAa,MAAM;AACzB,UAAI,EAAE,KAAK,WAAW,GAAG;AACxB,aAAK,aAAa,SAAS;AAAA,MAC5B;AAAA,IACD,CAAC;AAAA,EACF;AACD;AA/Ca,sBAAN;AAAA,EAsBO;AAAA,GAtBD;AAiDb,kBAAkB,sBAAsB,qBAAqB,kBAAkB,OAAO;",
  "names": []
}
