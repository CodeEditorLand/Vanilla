{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/statusbar/browser/statusbar.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { createDecorator } from '../../../../platform/instantiation/common/instantiation.js';\nimport { DisposableStore, IDisposable } from '../../../../base/common/lifecycle.js';\nimport { ThemeColor } from '../../../../base/common/themables.js';\nimport { Command } from '../../../../editor/common/languages.js';\nimport { IMarkdownString } from '../../../../base/common/htmlContent.js';\nimport { ColorIdentifier } from '../../../../platform/theme/common/colorRegistry.js';\nimport { IAuxiliaryStatusbarPart, IStatusbarEntryContainer } from '../../../browser/parts/statusbar/statusbarPart.js';\n\nexport const IStatusbarService = createDecorator<IStatusbarService>('statusbarService');\n\nexport interface IStatusbarService extends IStatusbarEntryContainer {\n\n\treadonly _serviceBrand: undefined;\n\n\t/**\n\t * Get the status bar part that is rooted in the provided container.\n\t */\n\tgetPart(container: HTMLElement): IStatusbarEntryContainer;\n\n\t/**\n\t * Creates a new auxililary status bar part in the provided container.\n\t */\n\tcreateAuxiliaryStatusbarPart(container: HTMLElement): IAuxiliaryStatusbarPart;\n\n\t/**\n\t * Create a scoped status bar service that only operates on the provided\n\t * status entry container.\n\t */\n\tcreateScoped(statusbarEntryContainer: IStatusbarEntryContainer, disposables: DisposableStore): IStatusbarService;\n}\n\nexport const enum StatusbarAlignment {\n\tLEFT,\n\tRIGHT\n}\n\nexport interface IStatusbarEntryLocation {\n\n\t/**\n\t * The identifier of another status bar entry to\n\t * position relative to.\n\t */\n\tid: string;\n\n\t/**\n\t * The alignment of the status bar entry relative\n\t * to the referenced entry.\n\t */\n\talignment: StatusbarAlignment;\n\n\t/**\n\t * Whether to move the entry close to the location\n\t * so that it appears as if both this entry and\n\t * the location belong to each other.\n\t */\n\tcompact?: boolean;\n}\n\nexport function isStatusbarEntryLocation(thing: unknown): thing is IStatusbarEntryLocation {\n\tconst candidate = thing as IStatusbarEntryLocation | undefined;\n\n\treturn typeof candidate?.id === 'string' && typeof candidate.alignment === 'number';\n}\n\nexport interface IStatusbarEntryPriority {\n\n\t/**\n\t * The main priority of the entry that\n\t * defines the order of appearance:\n\t * either a number or a reference to\n\t * another status bar entry to position\n\t * relative to.\n\t *\n\t * May not be unique across all entries.\n\t */\n\treadonly primary: number | IStatusbarEntryLocation;\n\n\t/**\n\t * The secondary priority of the entry\n\t * is used in case the main priority\n\t * matches another one's priority.\n\t *\n\t * Should be unique across all entries.\n\t */\n\treadonly secondary: number;\n}\n\nexport function isStatusbarEntryPriority(thing: unknown): thing is IStatusbarEntryPriority {\n\tconst candidate = thing as IStatusbarEntryPriority | undefined;\n\n\treturn (typeof candidate?.primary === 'number' || isStatusbarEntryLocation(candidate?.primary)) && typeof candidate?.secondary === 'number';\n}\n\nexport const ShowTooltipCommand: Command = {\n\tid: 'statusBar.entry.showTooltip',\n\ttitle: ''\n};\n\nexport interface IStatusbarStyleOverride {\n\treadonly priority: number; // lower has higher priority\n\treadonly foreground?: ColorIdentifier;\n\treadonly background?: ColorIdentifier;\n\treadonly border?: ColorIdentifier;\n}\n\nexport type StatusbarEntryKind = 'standard' | 'warning' | 'error' | 'prominent' | 'remote' | 'offline';\nexport const StatusbarEntryKinds: StatusbarEntryKind[] = ['standard', 'warning', 'error', 'prominent', 'remote', 'offline'];\n\n/**\n * A declarative way of describing a status bar entry\n */\nexport interface IStatusbarEntry {\n\n\t/**\n\t * The (short) name to show for the entry like 'Language Indicator',\n\t * 'Git Status' etc.\n\t */\n\treadonly name: string;\n\n\t/**\n\t * The text to show for the entry. You can embed icons in the text by leveraging the syntax:\n\t *\n\t * `My text $(icon name) contains icons like $(icon name) this one.`\n\t */\n\treadonly text: string;\n\n\t/**\n\t * Text to be read out by the screen reader.\n\t */\n\treadonly ariaLabel: string;\n\n\t/**\n\t * Role of the status bar entry which defines how a screen reader interacts with it.\n\t * Default is 'button'.\n\t */\n\treadonly role?: string;\n\n\t/**\n\t * An optional tooltip text to show when you hover over the entry\n\t */\n\treadonly tooltip?: string | IMarkdownString | HTMLElement;\n\n\t/**\n\t * An optional color to use for the entry.\n\t *\n\t * @deprecated Use `kind` instead to support themable hover styles.\n\t */\n\treadonly color?: string | ThemeColor;\n\n\t/**\n\t * An optional background color to use for the entry.\n\t *\n\t * @deprecated Use `kind` instead to support themable hover styles.\n\t */\n\treadonly backgroundColor?: string | ThemeColor;\n\n\t/**\n\t * An optional command to execute on click.\n\t *\n\t * Can use the special `ShowTooltipCommand` to\n\t * show the tooltip on click if provided.\n\t */\n\treadonly command?: string | Command | typeof ShowTooltipCommand;\n\n\t/**\n\t * Whether to show a beak above the status bar entry.\n\t */\n\treadonly showBeak?: boolean;\n\n\t/**\n\t * Will enable a spinning icon in front of the text to indicate progress. When `true` is\n\t * specified, `loading` will be used.\n\t */\n\treadonly showProgress?: boolean | 'loading' | 'syncing';\n\n\t/**\n\t * The kind of status bar entry. This applies different colors to the entry.\n\t */\n\treadonly kind?: StatusbarEntryKind;\n\n\t/**\n\t * Enables the status bar entry to appear in all opened windows. Automatically will add\n\t * the entry to new auxiliary windows opening.\n\t */\n\treadonly showInAllWindows?: boolean;\n}\n\nexport interface IStatusbarEntryAccessor extends IDisposable {\n\n\t/**\n\t * Allows to update an existing status bar entry.\n\t */\n\tupdate(properties: IStatusbarEntry): void;\n}\n"],
  "mappings": ";;AAKA,SAAS,uBAAuB;AAChC,SAAS,iBAAiB,mBAAmB;AAC7C,SAAS,kBAAkB;AAC3B,SAAS,eAAe;AACxB,SAAS,uBAAuB;AAChC,SAAS,uBAAuB;AAChC,SAAS,yBAAyB,gCAAgC;AAE3D,MAAM,oBAAoB,gBAAmC,kBAAkB;AAuB/E,IAAW,qBAAX,kBAAWA,wBAAX;AACN,EAAAA,wCAAA;AACA,EAAAA,wCAAA;AAFiB,SAAAA;AAAA,GAAA;AA2BX,SAAS,yBAAyB,OAAkD;AAC1F,QAAM,YAAY;AAElB,SAAO,OAAO,WAAW,OAAO,YAAY,OAAO,UAAU,cAAc;AAC5E;AAJgB;AA6BT,SAAS,yBAAyB,OAAkD;AAC1F,QAAM,YAAY;AAElB,UAAQ,OAAO,WAAW,YAAY,YAAY,yBAAyB,WAAW,OAAO,MAAM,OAAO,WAAW,cAAc;AACpI;AAJgB;AAMT,MAAM,qBAA8B;AAAA,EAC1C,IAAI;AAAA,EACJ,OAAO;AACR;AAUO,MAAM,sBAA4C,CAAC,YAAY,WAAW,SAAS,aAAa,UAAU,SAAS;",
  "names": ["StatusbarAlignment"]
}
