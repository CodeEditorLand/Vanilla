{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/statusbar/browser/statusbar.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport type { IMarkdownString } from \"../../../../base/common/htmlContent.js\";\nimport type {\n\tDisposableStore,\n\tIDisposable,\n} from \"../../../../base/common/lifecycle.js\";\nimport type { ThemeColor } from \"../../../../base/common/themables.js\";\nimport type { Command } from \"../../../../editor/common/languages.js\";\nimport { createDecorator } from \"../../../../platform/instantiation/common/instantiation.js\";\nimport type { ColorIdentifier } from \"../../../../platform/theme/common/colorRegistry.js\";\nimport type {\n\tIAuxiliaryStatusbarPart,\n\tIStatusbarEntryContainer,\n} from \"../../../browser/parts/statusbar/statusbarPart.js\";\n\nexport const IStatusbarService =\n\tcreateDecorator<IStatusbarService>(\"statusbarService\");\n\nexport interface IStatusbarService extends IStatusbarEntryContainer {\n\treadonly _serviceBrand: undefined;\n\n\t/**\n\t * Get the status bar part that is rooted in the provided container.\n\t */\n\tgetPart(container: HTMLElement): IStatusbarEntryContainer;\n\n\t/**\n\t * Creates a new auxililary status bar part in the provided container.\n\t */\n\tcreateAuxiliaryStatusbarPart(\n\t\tcontainer: HTMLElement,\n\t): IAuxiliaryStatusbarPart;\n\n\t/**\n\t * Create a scoped status bar service that only operates on the provided\n\t * status entry container.\n\t */\n\tcreateScoped(\n\t\tstatusbarEntryContainer: IStatusbarEntryContainer,\n\t\tdisposables: DisposableStore,\n\t): IStatusbarService;\n}\n\nexport enum StatusbarAlignment {\n\tLEFT = 0,\n\tRIGHT = 1,\n}\n\nexport interface IStatusbarEntryLocation {\n\t/**\n\t * The identifier of another status bar entry to\n\t * position relative to.\n\t */\n\tid: string;\n\n\t/**\n\t * The alignment of the status bar entry relative\n\t * to the referenced entry.\n\t */\n\talignment: StatusbarAlignment;\n\n\t/**\n\t * Whether to move the entry close to the location\n\t * so that it appears as if both this entry and\n\t * the location belong to each other.\n\t */\n\tcompact?: boolean;\n}\n\nexport function isStatusbarEntryLocation(\n\tthing: unknown,\n): thing is IStatusbarEntryLocation {\n\tconst candidate = thing as IStatusbarEntryLocation | undefined;\n\n\treturn (\n\t\ttypeof candidate?.id === \"string\" &&\n\t\ttypeof candidate.alignment === \"number\"\n\t);\n}\n\nexport interface IStatusbarEntryPriority {\n\t/**\n\t * The main priority of the entry that\n\t * defines the order of appearance:\n\t * either a number or a reference to\n\t * another status bar entry to position\n\t * relative to.\n\t *\n\t * May not be unique across all entries.\n\t */\n\treadonly primary: number | IStatusbarEntryLocation;\n\n\t/**\n\t * The secondary priority of the entry\n\t * is used in case the main priority\n\t * matches another one's priority.\n\t *\n\t * Should be unique across all entries.\n\t */\n\treadonly secondary: number;\n}\n\nexport function isStatusbarEntryPriority(\n\tthing: unknown,\n): thing is IStatusbarEntryPriority {\n\tconst candidate = thing as IStatusbarEntryPriority | undefined;\n\n\treturn (\n\t\t(typeof candidate?.primary === \"number\" ||\n\t\t\tisStatusbarEntryLocation(candidate?.primary)) &&\n\t\ttypeof candidate?.secondary === \"number\"\n\t);\n}\n\nexport const ShowTooltipCommand: Command = {\n\tid: \"statusBar.entry.showTooltip\",\n\ttitle: \"\",\n};\n\nexport interface IStatusbarStyleOverride {\n\treadonly priority: number; // lower has higher priority\n\treadonly foreground?: ColorIdentifier;\n\treadonly background?: ColorIdentifier;\n\treadonly border?: ColorIdentifier;\n}\n\nexport type StatusbarEntryKind =\n\t| \"standard\"\n\t| \"warning\"\n\t| \"error\"\n\t| \"prominent\"\n\t| \"remote\"\n\t| \"offline\";\nexport const StatusbarEntryKinds: StatusbarEntryKind[] = [\n\t\"standard\",\n\t\"warning\",\n\t\"error\",\n\t\"prominent\",\n\t\"remote\",\n\t\"offline\",\n];\n\n/**\n * A declarative way of describing a status bar entry\n */\nexport interface IStatusbarEntry {\n\t/**\n\t * The (short) name to show for the entry like 'Language Indicator',\n\t * 'Git Status' etc.\n\t */\n\treadonly name: string;\n\n\t/**\n\t * The text to show for the entry. You can embed icons in the text by leveraging the syntax:\n\t *\n\t * `My text $(icon name) contains icons like $(icon name) this one.`\n\t */\n\treadonly text: string;\n\n\t/**\n\t * Text to be read out by the screen reader.\n\t */\n\treadonly ariaLabel: string;\n\n\t/**\n\t * Role of the status bar entry which defines how a screen reader interacts with it.\n\t * Default is 'button'.\n\t */\n\treadonly role?: string;\n\n\t/**\n\t * An optional tooltip text to show when you hover over the entry\n\t */\n\treadonly tooltip?: string | IMarkdownString | HTMLElement;\n\n\t/**\n\t * An optional color to use for the entry.\n\t *\n\t * @deprecated Use `kind` instead to support themable hover styles.\n\t */\n\treadonly color?: string | ThemeColor;\n\n\t/**\n\t * An optional background color to use for the entry.\n\t *\n\t * @deprecated Use `kind` instead to support themable hover styles.\n\t */\n\treadonly backgroundColor?: string | ThemeColor;\n\n\t/**\n\t * An optional command to execute on click.\n\t *\n\t * Can use the special `ShowTooltipCommand` to\n\t * show the tooltip on click if provided.\n\t */\n\treadonly command?: string | Command | typeof ShowTooltipCommand;\n\n\t/**\n\t * Whether to show a beak above the status bar entry.\n\t */\n\treadonly showBeak?: boolean;\n\n\t/**\n\t * Will enable a spinning icon in front of the text to indicate progress. When `true` is\n\t * specified, `loading` will be used.\n\t */\n\treadonly showProgress?: boolean | \"loading\" | \"syncing\";\n\n\t/**\n\t * The kind of status bar entry. This applies different colors to the entry.\n\t */\n\treadonly kind?: StatusbarEntryKind;\n\n\t/**\n\t * Enables the status bar entry to appear in all opened windows. Automatically will add\n\t * the entry to new auxiliary windows opening.\n\t */\n\treadonly showInAllWindows?: boolean;\n}\n\nexport interface IStatusbarEntryAccessor extends IDisposable {\n\t/**\n\t * Allows to update an existing status bar entry.\n\t */\n\tupdate(properties: IStatusbarEntry): void;\n}\n"],
  "mappings": ";;AAYA,SAAS,uBAAuB;AAOzB,MAAM,oBACZ,gBAAmC,kBAAkB;AA2B/C,IAAK,qBAAL,kBAAKA,wBAAL;AACN,EAAAA,wCAAA,UAAO,KAAP;AACA,EAAAA,wCAAA,WAAQ,KAAR;AAFW,SAAAA;AAAA,GAAA;AA0BL,SAAS,yBACf,OACmC;AACnC,QAAM,YAAY;AAElB,SACC,OAAO,WAAW,OAAO,YACzB,OAAO,UAAU,cAAc;AAEjC;AATgB;AAiCT,SAAS,yBACf,OACmC;AACnC,QAAM,YAAY;AAElB,UACE,OAAO,WAAW,YAAY,YAC9B,yBAAyB,WAAW,OAAO,MAC5C,OAAO,WAAW,cAAc;AAElC;AAVgB;AAYT,MAAM,qBAA8B;AAAA,EAC1C,IAAI;AAAA,EACJ,OAAO;AACR;AAgBO,MAAM,sBAA4C;AAAA,EACxD;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AACD;",
  "names": ["StatusbarAlignment"]
}
