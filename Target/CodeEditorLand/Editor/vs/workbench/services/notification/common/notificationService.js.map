{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/notification/common/notificationService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Action, type IAction } from \"../../../../base/common/actions.js\";\nimport { Emitter, Event } from \"../../../../base/common/event.js\";\nimport {\n\tDisposable,\n\tDisposableStore,\n\ttype IDisposable,\n} from \"../../../../base/common/lifecycle.js\";\nimport { localize } from \"../../../../nls.js\";\nimport {\n\tInstantiationType,\n\tregisterSingleton,\n} from \"../../../../platform/instantiation/common/extensions.js\";\nimport {\n\ttype INeverShowAgainOptions,\n\ttype INotification,\n\ttype INotificationActions,\n\ttype INotificationHandle,\n\tINotificationService,\n\ttype INotificationSource,\n\ttype INotificationSourceFilter,\n\ttype IPromptChoice,\n\ttype IPromptOptions,\n\ttype IStatusMessageOptions,\n\tNeverShowAgainScope,\n\tNoOpNotification,\n\ttype NotificationMessage,\n\tNotificationsFilter,\n\tSeverity,\n\tisNotificationSource,\n} from \"../../../../platform/notification/common/notification.js\";\nimport {\n\tIStorageService,\n\tStorageScope,\n\tStorageTarget,\n} from \"../../../../platform/storage/common/storage.js\";\nimport {\n\tChoiceAction,\n\tNotificationChangeType,\n\tNotificationsModel,\n} from \"../../../common/notifications.js\";\n\nexport class NotificationService\n\textends Disposable\n\timplements INotificationService\n{\n\tdeclare readonly _serviceBrand: undefined;\n\n\treadonly model = this._register(new NotificationsModel());\n\n\tprivate readonly _onDidAddNotification = this._register(\n\t\tnew Emitter<INotification>(),\n\t);\n\treadonly onDidAddNotification = this._onDidAddNotification.event;\n\n\tprivate readonly _onDidRemoveNotification = this._register(\n\t\tnew Emitter<INotification>(),\n\t);\n\treadonly onDidRemoveNotification = this._onDidRemoveNotification.event;\n\n\tconstructor(\n\t\t@IStorageService private readonly storageService: IStorageService,\n\t) {\n\t\tsuper();\n\n\t\tthis.updateFilters();\n\t\tthis.registerListeners();\n\t}\n\n\tprivate registerListeners(): void {\n\t\tthis._register(\n\t\t\tthis.model.onDidChangeNotification((e) => {\n\t\t\t\tswitch (e.kind) {\n\t\t\t\t\tcase NotificationChangeType.ADD:\n\t\t\t\t\tcase NotificationChangeType.REMOVE: {\n\t\t\t\t\t\tconst source =\n\t\t\t\t\t\t\ttypeof e.item.sourceId === \"string\" &&\n\t\t\t\t\t\t\ttypeof e.item.source === \"string\"\n\t\t\t\t\t\t\t\t? { id: e.item.sourceId, label: e.item.source }\n\t\t\t\t\t\t\t\t: e.item.source;\n\n\t\t\t\t\t\tconst notification: INotification = {\n\t\t\t\t\t\t\tmessage: e.item.message.original,\n\t\t\t\t\t\t\tseverity: e.item.severity,\n\t\t\t\t\t\t\tsource,\n\t\t\t\t\t\t\tpriority: e.item.priority,\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\tif (e.kind === NotificationChangeType.ADD) {\n\t\t\t\t\t\t\t// Make sure to track sources for notifications by registering\n\t\t\t\t\t\t\t// them with our do not disturb system which is backed by storage\n\n\t\t\t\t\t\t\tif (isNotificationSource(source)) {\n\t\t\t\t\t\t\t\tif (this.mapSourceToFilter.has(source.id)) {\n\t\t\t\t\t\t\t\t\tthis.updateSourceFilter(source);\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tthis.setFilter({\n\t\t\t\t\t\t\t\t\t\t...source,\n\t\t\t\t\t\t\t\t\t\tfilter: NotificationsFilter.OFF,\n\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tthis._onDidAddNotification.fire(notification);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (e.kind === NotificationChangeType.REMOVE) {\n\t\t\t\t\t\t\tthis._onDidRemoveNotification.fire(notification);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}),\n\t\t);\n\t}\n\n\t//#region Filters\n\n\tprivate static readonly GLOBAL_FILTER_SETTINGS_KEY =\n\t\t\"notifications.doNotDisturbMode\";\n\tprivate static readonly PER_SOURCE_FILTER_SETTINGS_KEY =\n\t\t\"notifications.perSourceDoNotDisturbMode\";\n\n\tprivate readonly _onDidChangeFilter = this._register(new Emitter<void>());\n\treadonly onDidChangeFilter = this._onDidChangeFilter.event;\n\n\tprivate globalFilterEnabled = this.storageService.getBoolean(\n\t\tNotificationService.GLOBAL_FILTER_SETTINGS_KEY,\n\t\tStorageScope.APPLICATION,\n\t\tfalse,\n\t);\n\n\tprivate readonly mapSourceToFilter: Map<\n\t\tstring /** source id */,\n\t\tINotificationSourceFilter\n\t> = (() => {\n\t\tconst map = new Map<string, INotificationSourceFilter>();\n\n\t\tfor (const sourceFilter of this.storageService.getObject<\n\t\t\tINotificationSourceFilter[]\n\t\t>(\n\t\t\tNotificationService.PER_SOURCE_FILTER_SETTINGS_KEY,\n\t\t\tStorageScope.APPLICATION,\n\t\t\t[],\n\t\t)) {\n\t\t\tmap.set(sourceFilter.id, sourceFilter);\n\t\t}\n\n\t\treturn map;\n\t})();\n\n\tsetFilter(filter: NotificationsFilter | INotificationSourceFilter): void {\n\t\tif (typeof filter === \"number\") {\n\t\t\tif (\n\t\t\t\tthis.globalFilterEnabled ===\n\t\t\t\t(filter === NotificationsFilter.ERROR)\n\t\t\t) {\n\t\t\t\treturn; // no change\n\t\t\t}\n\n\t\t\t// Store into model and persist\n\t\t\tthis.globalFilterEnabled = filter === NotificationsFilter.ERROR;\n\t\t\tthis.storageService.store(\n\t\t\t\tNotificationService.GLOBAL_FILTER_SETTINGS_KEY,\n\t\t\t\tthis.globalFilterEnabled,\n\t\t\t\tStorageScope.APPLICATION,\n\t\t\t\tStorageTarget.MACHINE,\n\t\t\t);\n\n\t\t\t// Update model\n\t\t\tthis.updateFilters();\n\n\t\t\t// Events\n\t\t\tthis._onDidChangeFilter.fire();\n\t\t} else {\n\t\t\tconst existing = this.mapSourceToFilter.get(filter.id);\n\t\t\tif (\n\t\t\t\texisting?.filter === filter.filter &&\n\t\t\t\texisting.label === filter.label\n\t\t\t) {\n\t\t\t\treturn; // no change\n\t\t\t}\n\n\t\t\t// Store into model and persist\n\t\t\tthis.mapSourceToFilter.set(filter.id, {\n\t\t\t\tid: filter.id,\n\t\t\t\tlabel: filter.label,\n\t\t\t\tfilter: filter.filter,\n\t\t\t});\n\t\t\tthis.saveSourceFilters();\n\n\t\t\t// Update model\n\t\t\tthis.updateFilters();\n\t\t}\n\t}\n\n\tgetFilter(source?: INotificationSource): NotificationsFilter {\n\t\tif (source) {\n\t\t\treturn (\n\t\t\t\tthis.mapSourceToFilter.get(source.id)?.filter ??\n\t\t\t\tNotificationsFilter.OFF\n\t\t\t);\n\t\t}\n\n\t\treturn this.globalFilterEnabled\n\t\t\t? NotificationsFilter.ERROR\n\t\t\t: NotificationsFilter.OFF;\n\t}\n\n\tprivate updateSourceFilter(source: INotificationSource): void {\n\t\tconst existing = this.mapSourceToFilter.get(source.id);\n\t\tif (!existing) {\n\t\t\treturn; // nothing to do\n\t\t}\n\n\t\t// Store into model and persist\n\t\tif (existing.label !== source.label) {\n\t\t\tthis.mapSourceToFilter.set(source.id, {\n\t\t\t\tid: source.id,\n\t\t\t\tlabel: source.label,\n\t\t\t\tfilter: existing.filter,\n\t\t\t});\n\t\t\tthis.saveSourceFilters();\n\t\t}\n\t}\n\n\tprivate saveSourceFilters(): void {\n\t\tthis.storageService.store(\n\t\t\tNotificationService.PER_SOURCE_FILTER_SETTINGS_KEY,\n\t\t\tJSON.stringify([...this.mapSourceToFilter.values()]),\n\t\t\tStorageScope.APPLICATION,\n\t\t\tStorageTarget.MACHINE,\n\t\t);\n\t}\n\n\tgetFilters(): INotificationSourceFilter[] {\n\t\treturn [...this.mapSourceToFilter.values()];\n\t}\n\n\tprivate updateFilters(): void {\n\t\tthis.model.setFilter({\n\t\t\tglobal: this.globalFilterEnabled\n\t\t\t\t? NotificationsFilter.ERROR\n\t\t\t\t: NotificationsFilter.OFF,\n\t\t\tsources: new Map(\n\t\t\t\t[...this.mapSourceToFilter.values()].map((source) => [\n\t\t\t\t\tsource.id,\n\t\t\t\t\tsource.filter,\n\t\t\t\t]),\n\t\t\t),\n\t\t});\n\t}\n\n\tremoveFilter(sourceId: string): void {\n\t\tif (this.mapSourceToFilter.delete(sourceId)) {\n\t\t\t// Persist\n\t\t\tthis.saveSourceFilters();\n\n\t\t\t// Update model\n\t\t\tthis.updateFilters();\n\t\t}\n\t}\n\n\t//#endregion\n\n\tinfo(message: NotificationMessage | NotificationMessage[]): void {\n\t\tif (Array.isArray(message)) {\n\t\t\tfor (const messageEntry of message) {\n\t\t\t\tthis.info(messageEntry);\n\t\t\t}\n\n\t\t\treturn;\n\t\t}\n\n\t\tthis.model.addNotification({ severity: Severity.Info, message });\n\t}\n\n\twarn(message: NotificationMessage | NotificationMessage[]): void {\n\t\tif (Array.isArray(message)) {\n\t\t\tfor (const messageEntry of message) {\n\t\t\t\tthis.warn(messageEntry);\n\t\t\t}\n\n\t\t\treturn;\n\t\t}\n\n\t\tthis.model.addNotification({ severity: Severity.Warning, message });\n\t}\n\n\terror(message: NotificationMessage | NotificationMessage[]): void {\n\t\tif (Array.isArray(message)) {\n\t\t\tfor (const messageEntry of message) {\n\t\t\t\tthis.error(messageEntry);\n\t\t\t}\n\n\t\t\treturn;\n\t\t}\n\n\t\tthis.model.addNotification({ severity: Severity.Error, message });\n\t}\n\n\tnotify(notification: INotification): INotificationHandle {\n\t\tconst toDispose = new DisposableStore();\n\n\t\t// Handle neverShowAgain option accordingly\n\n\t\tif (notification.neverShowAgain) {\n\t\t\tconst scope = this.toStorageScope(notification.neverShowAgain);\n\t\t\tconst id = notification.neverShowAgain.id;\n\n\t\t\t// If the user already picked to not show the notification\n\t\t\t// again, we return with a no-op notification here\n\t\t\tif (this.storageService.getBoolean(id, scope)) {\n\t\t\t\treturn new NoOpNotification();\n\t\t\t}\n\n\t\t\tconst neverShowAgainAction = toDispose.add(\n\t\t\t\tnew Action(\n\t\t\t\t\t\"workbench.notification.neverShowAgain\",\n\t\t\t\t\tlocalize(\"neverShowAgain\", \"Don't Show Again\"),\n\t\t\t\t\tundefined,\n\t\t\t\t\ttrue,\n\t\t\t\t\tasync () => {\n\t\t\t\t\t\t// Close notification\n\t\t\t\t\t\thandle.close();\n\n\t\t\t\t\t\t// Remember choice\n\t\t\t\t\t\tthis.storageService.store(\n\t\t\t\t\t\t\tid,\n\t\t\t\t\t\t\ttrue,\n\t\t\t\t\t\t\tscope,\n\t\t\t\t\t\t\tStorageTarget.USER,\n\t\t\t\t\t\t);\n\t\t\t\t\t},\n\t\t\t\t),\n\t\t\t);\n\n\t\t\t// Insert as primary or secondary action\n\t\t\tconst actions = {\n\t\t\t\tprimary: notification.actions?.primary || [],\n\t\t\t\tsecondary: notification.actions?.secondary || [],\n\t\t\t};\n\t\t\tif (notification.neverShowAgain.isSecondary) {\n\t\t\t\tactions.secondary = [\n\t\t\t\t\t...actions.secondary,\n\t\t\t\t\tneverShowAgainAction,\n\t\t\t\t]; // actions comes last\n\t\t\t} else {\n\t\t\t\tactions.primary = [neverShowAgainAction, ...actions.primary]; // action comes first\n\t\t\t}\n\n\t\t\tnotification.actions = actions;\n\t\t}\n\n\t\t// Show notification\n\t\tconst handle = this.model.addNotification(notification);\n\n\t\t// Cleanup when notification gets disposed\n\t\tEvent.once(handle.onDidClose)(() => toDispose.dispose());\n\n\t\treturn handle;\n\t}\n\n\tprivate toStorageScope(options: INeverShowAgainOptions): StorageScope {\n\t\tswitch (options.scope) {\n\t\t\tcase NeverShowAgainScope.APPLICATION:\n\t\t\t\treturn StorageScope.APPLICATION;\n\t\t\tcase NeverShowAgainScope.PROFILE:\n\t\t\t\treturn StorageScope.PROFILE;\n\t\t\tcase NeverShowAgainScope.WORKSPACE:\n\t\t\t\treturn StorageScope.WORKSPACE;\n\t\t\tdefault:\n\t\t\t\treturn StorageScope.APPLICATION;\n\t\t}\n\t}\n\n\tprompt(\n\t\tseverity: Severity,\n\t\tmessage: string,\n\t\tchoices: IPromptChoice[],\n\t\toptions?: IPromptOptions,\n\t): INotificationHandle {\n\t\tconst toDispose = new DisposableStore();\n\n\t\t// Handle neverShowAgain option accordingly\n\t\tif (options?.neverShowAgain) {\n\t\t\tconst scope = this.toStorageScope(options.neverShowAgain);\n\t\t\tconst id = options.neverShowAgain.id;\n\n\t\t\t// If the user already picked to not show the notification\n\t\t\t// again, we return with a no-op notification here\n\t\t\tif (this.storageService.getBoolean(id, scope)) {\n\t\t\t\treturn new NoOpNotification();\n\t\t\t}\n\n\t\t\tconst neverShowAgainChoice = {\n\t\t\t\tlabel: localize(\"neverShowAgain\", \"Don't Show Again\"),\n\t\t\t\trun: () =>\n\t\t\t\t\tthis.storageService.store(\n\t\t\t\t\t\tid,\n\t\t\t\t\t\ttrue,\n\t\t\t\t\t\tscope,\n\t\t\t\t\t\tStorageTarget.USER,\n\t\t\t\t\t),\n\t\t\t\tisSecondary: options.neverShowAgain.isSecondary,\n\t\t\t};\n\n\t\t\t// Insert as primary or secondary action\n\t\t\tif (options.neverShowAgain.isSecondary) {\n\t\t\t\tchoices = [...choices, neverShowAgainChoice]; // actions comes last\n\t\t\t} else {\n\t\t\t\tchoices = [neverShowAgainChoice, ...choices]; // action comes first\n\t\t\t}\n\t\t}\n\n\t\tlet choiceClicked = false;\n\n\t\t// Convert choices into primary/secondary actions\n\t\tconst primaryActions: IAction[] = [];\n\t\tconst secondaryActions: IAction[] = [];\n\t\tchoices.forEach((choice, index) => {\n\t\t\tconst action = new ChoiceAction(\n\t\t\t\t`workbench.dialog.choice.${index}`,\n\t\t\t\tchoice,\n\t\t\t);\n\t\t\tif (choice.isSecondary) {\n\t\t\t\tsecondaryActions.push(action);\n\t\t\t} else {\n\t\t\t\tprimaryActions.push(action);\n\t\t\t}\n\n\t\t\t// React to action being clicked\n\t\t\ttoDispose.add(\n\t\t\t\taction.onDidRun(() => {\n\t\t\t\t\tchoiceClicked = true;\n\n\t\t\t\t\t// Close notification unless we are told to keep open\n\t\t\t\t\tif (!choice.keepOpen) {\n\t\t\t\t\t\thandle.close();\n\t\t\t\t\t}\n\t\t\t\t}),\n\t\t\t);\n\n\t\t\ttoDispose.add(action);\n\t\t});\n\n\t\t// Show notification with actions\n\t\tconst actions: INotificationActions = {\n\t\t\tprimary: primaryActions,\n\t\t\tsecondary: secondaryActions,\n\t\t};\n\t\tconst handle = this.notify({\n\t\t\tseverity,\n\t\t\tmessage,\n\t\t\tactions,\n\t\t\tsticky: options?.sticky,\n\t\t\tpriority: options?.priority,\n\t\t});\n\n\t\tEvent.once(handle.onDidClose)(() => {\n\t\t\t// Cleanup when notification gets disposed\n\t\t\ttoDispose.dispose();\n\n\t\t\t// Indicate cancellation to the outside if no action was executed\n\t\t\tif (\n\t\t\t\toptions &&\n\t\t\t\ttypeof options.onCancel === \"function\" &&\n\t\t\t\t!choiceClicked\n\t\t\t) {\n\t\t\t\toptions.onCancel();\n\t\t\t}\n\t\t});\n\n\t\treturn handle;\n\t}\n\n\tstatus(\n\t\tmessage: NotificationMessage,\n\t\toptions?: IStatusMessageOptions,\n\t): IDisposable {\n\t\treturn this.model.showStatusMessage(message, options);\n\t}\n}\n\nregisterSingleton(\n\tINotificationService,\n\tNotificationService,\n\tInstantiationType.Delayed,\n);\n"],
  "mappings": ";;;;;;;;;;;;AAKA,SAAS,cAA4B;AACrC,SAAS,SAAS,aAAa;AAC/B;AAAA,EACC;AAAA,EACA;AAAA,OAEM;AACP,SAAS,gBAAgB;AACzB;AAAA,EACC;AAAA,EACA;AAAA,OACM;AACP;AAAA,EAKC;AAAA,EAMA;AAAA,EACA;AAAA,EAEA;AAAA,EACA;AAAA,EACA;AAAA,OACM;AACP;AAAA,EACC;AAAA,EACA;AAAA,EACA;AAAA,OACM;AACP;AAAA,EACC;AAAA,EACA;AAAA,EACA;AAAA,OACM;AAEA,IAAM,sBAAN,cACE,WAET;AAAA,EAeC,YACmC,gBACjC;AACD,UAAM;AAF4B;AAIlC,SAAK,cAAc;AACnB,SAAK,kBAAkB;AAAA,EACxB;AAAA,EAvED,OAiDA;AAAA;AAAA;AAAA,EAGU,QAAQ,KAAK,UAAU,IAAI,mBAAmB,CAAC;AAAA,EAEvC,wBAAwB,KAAK;AAAA,IAC7C,IAAI,QAAuB;AAAA,EAC5B;AAAA,EACS,uBAAuB,KAAK,sBAAsB;AAAA,EAE1C,2BAA2B,KAAK;AAAA,IAChD,IAAI,QAAuB;AAAA,EAC5B;AAAA,EACS,0BAA0B,KAAK,yBAAyB;AAAA,EAWzD,oBAA0B;AACjC,SAAK;AAAA,MACJ,KAAK,MAAM,wBAAwB,CAAC,MAAM;AACzC,gBAAQ,EAAE,MAAM;AAAA,UACf,KAAK,uBAAuB;AAAA,UAC5B,KAAK,uBAAuB,QAAQ;AACnC,kBAAM,SACL,OAAO,EAAE,KAAK,aAAa,YAC3B,OAAO,EAAE,KAAK,WAAW,WACtB,EAAE,IAAI,EAAE,KAAK,UAAU,OAAO,EAAE,KAAK,OAAO,IAC5C,EAAE,KAAK;AAEX,kBAAM,eAA8B;AAAA,cACnC,SAAS,EAAE,KAAK,QAAQ;AAAA,cACxB,UAAU,EAAE,KAAK;AAAA,cACjB;AAAA,cACA,UAAU,EAAE,KAAK;AAAA,YAClB;AAEA,gBAAI,EAAE,SAAS,uBAAuB,KAAK;AAI1C,kBAAI,qBAAqB,MAAM,GAAG;AACjC,oBAAI,KAAK,kBAAkB,IAAI,OAAO,EAAE,GAAG;AAC1C,uBAAK,mBAAmB,MAAM;AAAA,gBAC/B,OAAO;AACN,uBAAK,UAAU;AAAA,oBACd,GAAG;AAAA,oBACH,QAAQ,oBAAoB;AAAA,kBAC7B,CAAC;AAAA,gBACF;AAAA,cACD;AAEA,mBAAK,sBAAsB,KAAK,YAAY;AAAA,YAC7C;AAEA,gBAAI,EAAE,SAAS,uBAAuB,QAAQ;AAC7C,mBAAK,yBAAyB,KAAK,YAAY;AAAA,YAChD;AAEA;AAAA,UACD;AAAA,QACD;AAAA,MACD,CAAC;AAAA,IACF;AAAA,EACD;AAAA;AAAA,EAIA,OAAwB,6BACvB;AAAA,EACD,OAAwB,iCACvB;AAAA,EAEgB,qBAAqB,KAAK,UAAU,IAAI,QAAc,CAAC;AAAA,EAC/D,oBAAoB,KAAK,mBAAmB;AAAA,EAE7C,sBAAsB,KAAK,eAAe;AAAA,IACjD,oBAAoB;AAAA,IACpB,aAAa;AAAA,IACb;AAAA,EACD;AAAA,EAEiB,qBAGZ,MAAM;AACV,UAAM,MAAM,oBAAI,IAAuC;AAEvD,eAAW,gBAAgB,KAAK,eAAe;AAAA,MAG9C,oBAAoB;AAAA,MACpB,aAAa;AAAA,MACb,CAAC;AAAA,IACF,GAAG;AACF,UAAI,IAAI,aAAa,IAAI,YAAY;AAAA,IACtC;AAEA,WAAO;AAAA,EACR,GAAG;AAAA,EAEH,UAAU,QAA+D;AACxE,QAAI,OAAO,WAAW,UAAU;AAC/B,UACC,KAAK,yBACJ,WAAW,oBAAoB,QAC/B;AACD;AAAA,MACD;AAGA,WAAK,sBAAsB,WAAW,oBAAoB;AAC1D,WAAK,eAAe;AAAA,QACnB,oBAAoB;AAAA,QACpB,KAAK;AAAA,QACL,aAAa;AAAA,QACb,cAAc;AAAA,MACf;AAGA,WAAK,cAAc;AAGnB,WAAK,mBAAmB,KAAK;AAAA,IAC9B,OAAO;AACN,YAAM,WAAW,KAAK,kBAAkB,IAAI,OAAO,EAAE;AACrD,UACC,UAAU,WAAW,OAAO,UAC5B,SAAS,UAAU,OAAO,OACzB;AACD;AAAA,MACD;AAGA,WAAK,kBAAkB,IAAI,OAAO,IAAI;AAAA,QACrC,IAAI,OAAO;AAAA,QACX,OAAO,OAAO;AAAA,QACd,QAAQ,OAAO;AAAA,MAChB,CAAC;AACD,WAAK,kBAAkB;AAGvB,WAAK,cAAc;AAAA,IACpB;AAAA,EACD;AAAA,EAEA,UAAU,QAAmD;AAC5D,QAAI,QAAQ;AACX,aACC,KAAK,kBAAkB,IAAI,OAAO,EAAE,GAAG,UACvC,oBAAoB;AAAA,IAEtB;AAEA,WAAO,KAAK,sBACT,oBAAoB,QACpB,oBAAoB;AAAA,EACxB;AAAA,EAEQ,mBAAmB,QAAmC;AAC7D,UAAM,WAAW,KAAK,kBAAkB,IAAI,OAAO,EAAE;AACrD,QAAI,CAAC,UAAU;AACd;AAAA,IACD;AAGA,QAAI,SAAS,UAAU,OAAO,OAAO;AACpC,WAAK,kBAAkB,IAAI,OAAO,IAAI;AAAA,QACrC,IAAI,OAAO;AAAA,QACX,OAAO,OAAO;AAAA,QACd,QAAQ,SAAS;AAAA,MAClB,CAAC;AACD,WAAK,kBAAkB;AAAA,IACxB;AAAA,EACD;AAAA,EAEQ,oBAA0B;AACjC,SAAK,eAAe;AAAA,MACnB,oBAAoB;AAAA,MACpB,KAAK,UAAU,CAAC,GAAG,KAAK,kBAAkB,OAAO,CAAC,CAAC;AAAA,MACnD,aAAa;AAAA,MACb,cAAc;AAAA,IACf;AAAA,EACD;AAAA,EAEA,aAA0C;AACzC,WAAO,CAAC,GAAG,KAAK,kBAAkB,OAAO,CAAC;AAAA,EAC3C;AAAA,EAEQ,gBAAsB;AAC7B,SAAK,MAAM,UAAU;AAAA,MACpB,QAAQ,KAAK,sBACV,oBAAoB,QACpB,oBAAoB;AAAA,MACvB,SAAS,IAAI;AAAA,QACZ,CAAC,GAAG,KAAK,kBAAkB,OAAO,CAAC,EAAE,IAAI,CAAC,WAAW;AAAA,UACpD,OAAO;AAAA,UACP,OAAO;AAAA,QACR,CAAC;AAAA,MACF;AAAA,IACD,CAAC;AAAA,EACF;AAAA,EAEA,aAAa,UAAwB;AACpC,QAAI,KAAK,kBAAkB,OAAO,QAAQ,GAAG;AAE5C,WAAK,kBAAkB;AAGvB,WAAK,cAAc;AAAA,IACpB;AAAA,EACD;AAAA;AAAA,EAIA,KAAK,SAA4D;AAChE,QAAI,MAAM,QAAQ,OAAO,GAAG;AAC3B,iBAAW,gBAAgB,SAAS;AACnC,aAAK,KAAK,YAAY;AAAA,MACvB;AAEA;AAAA,IACD;AAEA,SAAK,MAAM,gBAAgB,EAAE,UAAU,SAAS,MAAM,QAAQ,CAAC;AAAA,EAChE;AAAA,EAEA,KAAK,SAA4D;AAChE,QAAI,MAAM,QAAQ,OAAO,GAAG;AAC3B,iBAAW,gBAAgB,SAAS;AACnC,aAAK,KAAK,YAAY;AAAA,MACvB;AAEA;AAAA,IACD;AAEA,SAAK,MAAM,gBAAgB,EAAE,UAAU,SAAS,SAAS,QAAQ,CAAC;AAAA,EACnE;AAAA,EAEA,MAAM,SAA4D;AACjE,QAAI,MAAM,QAAQ,OAAO,GAAG;AAC3B,iBAAW,gBAAgB,SAAS;AACnC,aAAK,MAAM,YAAY;AAAA,MACxB;AAEA;AAAA,IACD;AAEA,SAAK,MAAM,gBAAgB,EAAE,UAAU,SAAS,OAAO,QAAQ,CAAC;AAAA,EACjE;AAAA,EAEA,OAAO,cAAkD;AACxD,UAAM,YAAY,IAAI,gBAAgB;AAItC,QAAI,aAAa,gBAAgB;AAChC,YAAM,QAAQ,KAAK,eAAe,aAAa,cAAc;AAC7D,YAAM,KAAK,aAAa,eAAe;AAIvC,UAAI,KAAK,eAAe,WAAW,IAAI,KAAK,GAAG;AAC9C,eAAO,IAAI,iBAAiB;AAAA,MAC7B;AAEA,YAAM,uBAAuB,UAAU;AAAA,QACtC,IAAI;AAAA,UACH;AAAA,UACA,SAAS,kBAAkB,kBAAkB;AAAA,UAC7C;AAAA,UACA;AAAA,UACA,YAAY;AAEX,mBAAO,MAAM;AAGb,iBAAK,eAAe;AAAA,cACnB;AAAA,cACA;AAAA,cACA;AAAA,cACA,cAAc;AAAA,YACf;AAAA,UACD;AAAA,QACD;AAAA,MACD;AAGA,YAAM,UAAU;AAAA,QACf,SAAS,aAAa,SAAS,WAAW,CAAC;AAAA,QAC3C,WAAW,aAAa,SAAS,aAAa,CAAC;AAAA,MAChD;AACA,UAAI,aAAa,eAAe,aAAa;AAC5C,gBAAQ,YAAY;AAAA,UACnB,GAAG,QAAQ;AAAA,UACX;AAAA,QACD;AAAA,MACD,OAAO;AACN,gBAAQ,UAAU,CAAC,sBAAsB,GAAG,QAAQ,OAAO;AAAA,MAC5D;AAEA,mBAAa,UAAU;AAAA,IACxB;AAGA,UAAM,SAAS,KAAK,MAAM,gBAAgB,YAAY;AAGtD,UAAM,KAAK,OAAO,UAAU,EAAE,MAAM,UAAU,QAAQ,CAAC;AAEvD,WAAO;AAAA,EACR;AAAA,EAEQ,eAAe,SAA+C;AACrE,YAAQ,QAAQ,OAAO;AAAA,MACtB,KAAK,oBAAoB;AACxB,eAAO,aAAa;AAAA,MACrB,KAAK,oBAAoB;AACxB,eAAO,aAAa;AAAA,MACrB,KAAK,oBAAoB;AACxB,eAAO,aAAa;AAAA,MACrB;AACC,eAAO,aAAa;AAAA,IACtB;AAAA,EACD;AAAA,EAEA,OACC,UACA,SACA,SACA,SACsB;AACtB,UAAM,YAAY,IAAI,gBAAgB;AAGtC,QAAI,SAAS,gBAAgB;AAC5B,YAAM,QAAQ,KAAK,eAAe,QAAQ,cAAc;AACxD,YAAM,KAAK,QAAQ,eAAe;AAIlC,UAAI,KAAK,eAAe,WAAW,IAAI,KAAK,GAAG;AAC9C,eAAO,IAAI,iBAAiB;AAAA,MAC7B;AAEA,YAAM,uBAAuB;AAAA,QAC5B,OAAO,SAAS,kBAAkB,kBAAkB;AAAA,QACpD,KAAK,6BACJ,KAAK,eAAe;AAAA,UACnB;AAAA,UACA;AAAA,UACA;AAAA,UACA,cAAc;AAAA,QACf,GANI;AAAA,QAOL,aAAa,QAAQ,eAAe;AAAA,MACrC;AAGA,UAAI,QAAQ,eAAe,aAAa;AACvC,kBAAU,CAAC,GAAG,SAAS,oBAAoB;AAAA,MAC5C,OAAO;AACN,kBAAU,CAAC,sBAAsB,GAAG,OAAO;AAAA,MAC5C;AAAA,IACD;AAEA,QAAI,gBAAgB;AAGpB,UAAM,iBAA4B,CAAC;AACnC,UAAM,mBAA8B,CAAC;AACrC,YAAQ,QAAQ,CAAC,QAAQ,UAAU;AAClC,YAAM,SAAS,IAAI;AAAA,QAClB,2BAA2B,KAAK;AAAA,QAChC;AAAA,MACD;AACA,UAAI,OAAO,aAAa;AACvB,yBAAiB,KAAK,MAAM;AAAA,MAC7B,OAAO;AACN,uBAAe,KAAK,MAAM;AAAA,MAC3B;AAGA,gBAAU;AAAA,QACT,OAAO,SAAS,MAAM;AACrB,0BAAgB;AAGhB,cAAI,CAAC,OAAO,UAAU;AACrB,mBAAO,MAAM;AAAA,UACd;AAAA,QACD,CAAC;AAAA,MACF;AAEA,gBAAU,IAAI,MAAM;AAAA,IACrB,CAAC;AAGD,UAAM,UAAgC;AAAA,MACrC,SAAS;AAAA,MACT,WAAW;AAAA,IACZ;AACA,UAAM,SAAS,KAAK,OAAO;AAAA,MAC1B;AAAA,MACA;AAAA,MACA;AAAA,MACA,QAAQ,SAAS;AAAA,MACjB,UAAU,SAAS;AAAA,IACpB,CAAC;AAED,UAAM,KAAK,OAAO,UAAU,EAAE,MAAM;AAEnC,gBAAU,QAAQ;AAGlB,UACC,WACA,OAAO,QAAQ,aAAa,cAC5B,CAAC,eACA;AACD,gBAAQ,SAAS;AAAA,MAClB;AAAA,IACD,CAAC;AAED,WAAO;AAAA,EACR;AAAA,EAEA,OACC,SACA,SACc;AACd,WAAO,KAAK,MAAM,kBAAkB,SAAS,OAAO;AAAA,EACrD;AACD;AAzba,sBAAN;AAAA,EAmBJ;AAAA,GAnBU;AA2bb;AAAA,EACC;AAAA,EACA;AAAA,EACA,kBAAkB;AACnB;",
  "names": []
}
