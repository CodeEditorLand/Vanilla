{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/notification/common/notificationService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { localize } from '../../../../nls.js';\nimport { INotificationService, INotification, INotificationHandle, Severity, NotificationMessage, INotificationActions, IPromptChoice, IPromptOptions, IStatusMessageOptions, NoOpNotification, NeverShowAgainScope, NotificationsFilter, INeverShowAgainOptions, INotificationSource, INotificationSourceFilter, isNotificationSource } from '../../../../platform/notification/common/notification.js';\nimport { NotificationsModel, ChoiceAction, NotificationChangeType } from '../../../common/notifications.js';\nimport { Disposable, DisposableStore, IDisposable } from '../../../../base/common/lifecycle.js';\nimport { Emitter, Event } from '../../../../base/common/event.js';\nimport { InstantiationType, registerSingleton } from '../../../../platform/instantiation/common/extensions.js';\nimport { IAction, Action } from '../../../../base/common/actions.js';\nimport { IStorageService, StorageScope, StorageTarget } from '../../../../platform/storage/common/storage.js';\n\nexport class NotificationService extends Disposable implements INotificationService {\n\n\tdeclare readonly _serviceBrand: undefined;\n\n\treadonly model = this._register(new NotificationsModel());\n\n\tprivate readonly _onDidAddNotification = this._register(new Emitter<INotification>());\n\treadonly onDidAddNotification = this._onDidAddNotification.event;\n\n\tprivate readonly _onDidRemoveNotification = this._register(new Emitter<INotification>());\n\treadonly onDidRemoveNotification = this._onDidRemoveNotification.event;\n\n\tconstructor(\n\t\t@IStorageService private readonly storageService: IStorageService\n\t) {\n\t\tsuper();\n\n\t\tthis.updateFilters();\n\t\tthis.registerListeners();\n\t}\n\n\tprivate registerListeners(): void {\n\t\tthis._register(this.model.onDidChangeNotification(e => {\n\t\t\tswitch (e.kind) {\n\t\t\t\tcase NotificationChangeType.ADD:\n\t\t\t\tcase NotificationChangeType.REMOVE: {\n\t\t\t\t\tconst source = typeof e.item.sourceId === 'string' && typeof e.item.source === 'string' ? { id: e.item.sourceId, label: e.item.source } : e.item.source;\n\n\t\t\t\t\tconst notification: INotification = {\n\t\t\t\t\t\tmessage: e.item.message.original,\n\t\t\t\t\t\tseverity: e.item.severity,\n\t\t\t\t\t\tsource,\n\t\t\t\t\t\tpriority: e.item.priority\n\t\t\t\t\t};\n\n\t\t\t\t\tif (e.kind === NotificationChangeType.ADD) {\n\n\t\t\t\t\t\t// Make sure to track sources for notifications by registering\n\t\t\t\t\t\t// them with our do not disturb system which is backed by storage\n\n\t\t\t\t\t\tif (isNotificationSource(source)) {\n\t\t\t\t\t\t\tif (!this.mapSourceToFilter.has(source.id)) {\n\t\t\t\t\t\t\t\tthis.setFilter({ ...source, filter: NotificationsFilter.OFF });\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tthis.updateSourceFilter(source);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tthis._onDidAddNotification.fire(notification);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (e.kind === NotificationChangeType.REMOVE) {\n\t\t\t\t\t\tthis._onDidRemoveNotification.fire(notification);\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}));\n\t}\n\n\t//#region Filters\n\n\tprivate static readonly GLOBAL_FILTER_SETTINGS_KEY = 'notifications.doNotDisturbMode';\n\tprivate static readonly PER_SOURCE_FILTER_SETTINGS_KEY = 'notifications.perSourceDoNotDisturbMode';\n\n\tprivate readonly _onDidChangeFilter = this._register(new Emitter<void>());\n\treadonly onDidChangeFilter = this._onDidChangeFilter.event;\n\n\tprivate globalFilterEnabled = this.storageService.getBoolean(NotificationService.GLOBAL_FILTER_SETTINGS_KEY, StorageScope.APPLICATION, false);\n\n\tprivate readonly mapSourceToFilter: Map<string /** source id */, INotificationSourceFilter> = (() => {\n\t\tconst map = new Map<string, INotificationSourceFilter>();\n\n\t\tfor (const sourceFilter of this.storageService.getObject<INotificationSourceFilter[]>(NotificationService.PER_SOURCE_FILTER_SETTINGS_KEY, StorageScope.APPLICATION, [])) {\n\t\t\tmap.set(sourceFilter.id, sourceFilter);\n\t\t}\n\n\t\treturn map;\n\t})();\n\n\tsetFilter(filter: NotificationsFilter | INotificationSourceFilter): void {\n\t\tif (typeof filter === 'number') {\n\t\t\tif (this.globalFilterEnabled === (filter === NotificationsFilter.ERROR)) {\n\t\t\t\treturn; // no change\n\t\t\t}\n\n\t\t\t// Store into model and persist\n\t\t\tthis.globalFilterEnabled = filter === NotificationsFilter.ERROR;\n\t\t\tthis.storageService.store(NotificationService.GLOBAL_FILTER_SETTINGS_KEY, this.globalFilterEnabled, StorageScope.APPLICATION, StorageTarget.MACHINE);\n\n\t\t\t// Update model\n\t\t\tthis.updateFilters();\n\n\t\t\t// Events\n\t\t\tthis._onDidChangeFilter.fire();\n\t\t} else {\n\t\t\tconst existing = this.mapSourceToFilter.get(filter.id);\n\t\t\tif (existing?.filter === filter.filter && existing.label === filter.label) {\n\t\t\t\treturn; // no change\n\t\t\t}\n\n\t\t\t// Store into model and persist\n\t\t\tthis.mapSourceToFilter.set(filter.id, { id: filter.id, label: filter.label, filter: filter.filter });\n\t\t\tthis.saveSourceFilters();\n\n\t\t\t// Update model\n\t\t\tthis.updateFilters();\n\t\t}\n\t}\n\n\tgetFilter(source?: INotificationSource): NotificationsFilter {\n\t\tif (source) {\n\t\t\treturn this.mapSourceToFilter.get(source.id)?.filter ?? NotificationsFilter.OFF;\n\t\t}\n\n\t\treturn this.globalFilterEnabled ? NotificationsFilter.ERROR : NotificationsFilter.OFF;\n\t}\n\n\tprivate updateSourceFilter(source: INotificationSource): void {\n\t\tconst existing = this.mapSourceToFilter.get(source.id);\n\t\tif (!existing) {\n\t\t\treturn; // nothing to do\n\t\t}\n\n\t\t// Store into model and persist\n\t\tif (existing.label !== source.label) {\n\t\t\tthis.mapSourceToFilter.set(source.id, { id: source.id, label: source.label, filter: existing.filter });\n\t\t\tthis.saveSourceFilters();\n\t\t}\n\t}\n\n\tprivate saveSourceFilters(): void {\n\t\tthis.storageService.store(NotificationService.PER_SOURCE_FILTER_SETTINGS_KEY, JSON.stringify([...this.mapSourceToFilter.values()]), StorageScope.APPLICATION, StorageTarget.MACHINE);\n\t}\n\n\tgetFilters(): INotificationSourceFilter[] {\n\t\treturn [...this.mapSourceToFilter.values()];\n\t}\n\n\tprivate updateFilters(): void {\n\t\tthis.model.setFilter({\n\t\t\tglobal: this.globalFilterEnabled ? NotificationsFilter.ERROR : NotificationsFilter.OFF,\n\t\t\tsources: new Map([...this.mapSourceToFilter.values()].map(source => [source.id, source.filter]))\n\t\t});\n\t}\n\n\tremoveFilter(sourceId: string): void {\n\t\tif (this.mapSourceToFilter.delete(sourceId)) {\n\n\t\t\t// Persist\n\t\t\tthis.saveSourceFilters();\n\n\t\t\t// Update model\n\t\t\tthis.updateFilters();\n\t\t}\n\t}\n\n\t//#endregion\n\n\tinfo(message: NotificationMessage | NotificationMessage[]): void {\n\t\tif (Array.isArray(message)) {\n\t\t\tfor (const messageEntry of message) {\n\t\t\t\tthis.info(messageEntry);\n\t\t\t}\n\n\t\t\treturn;\n\t\t}\n\n\t\tthis.model.addNotification({ severity: Severity.Info, message });\n\t}\n\n\twarn(message: NotificationMessage | NotificationMessage[]): void {\n\t\tif (Array.isArray(message)) {\n\t\t\tfor (const messageEntry of message) {\n\t\t\t\tthis.warn(messageEntry);\n\t\t\t}\n\n\t\t\treturn;\n\t\t}\n\n\t\tthis.model.addNotification({ severity: Severity.Warning, message });\n\t}\n\n\terror(message: NotificationMessage | NotificationMessage[]): void {\n\t\tif (Array.isArray(message)) {\n\t\t\tfor (const messageEntry of message) {\n\t\t\t\tthis.error(messageEntry);\n\t\t\t}\n\n\t\t\treturn;\n\t\t}\n\n\t\tthis.model.addNotification({ severity: Severity.Error, message });\n\t}\n\n\tnotify(notification: INotification): INotificationHandle {\n\t\tconst toDispose = new DisposableStore();\n\n\t\t// Handle neverShowAgain option accordingly\n\n\t\tif (notification.neverShowAgain) {\n\t\t\tconst scope = this.toStorageScope(notification.neverShowAgain);\n\t\t\tconst id = notification.neverShowAgain.id;\n\n\t\t\t// If the user already picked to not show the notification\n\t\t\t// again, we return with a no-op notification here\n\t\t\tif (this.storageService.getBoolean(id, scope)) {\n\t\t\t\treturn new NoOpNotification();\n\t\t\t}\n\n\t\t\tconst neverShowAgainAction = toDispose.add(new Action(\n\t\t\t\t'workbench.notification.neverShowAgain',\n\t\t\t\tlocalize('neverShowAgain', \"Don't Show Again\"),\n\t\t\t\tundefined, true, async () => {\n\n\t\t\t\t\t// Close notification\n\t\t\t\t\thandle.close();\n\n\t\t\t\t\t// Remember choice\n\t\t\t\t\tthis.storageService.store(id, true, scope, StorageTarget.USER);\n\t\t\t\t}));\n\n\t\t\t// Insert as primary or secondary action\n\t\t\tconst actions = {\n\t\t\t\tprimary: notification.actions?.primary || [],\n\t\t\t\tsecondary: notification.actions?.secondary || []\n\t\t\t};\n\t\t\tif (!notification.neverShowAgain.isSecondary) {\n\t\t\t\tactions.primary = [neverShowAgainAction, ...actions.primary]; // action comes first\n\t\t\t} else {\n\t\t\t\tactions.secondary = [...actions.secondary, neverShowAgainAction]; // actions comes last\n\t\t\t}\n\n\t\t\tnotification.actions = actions;\n\t\t}\n\n\t\t// Show notification\n\t\tconst handle = this.model.addNotification(notification);\n\n\t\t// Cleanup when notification gets disposed\n\t\tEvent.once(handle.onDidClose)(() => toDispose.dispose());\n\n\t\treturn handle;\n\t}\n\n\tprivate toStorageScope(options: INeverShowAgainOptions): StorageScope {\n\t\tswitch (options.scope) {\n\t\t\tcase NeverShowAgainScope.APPLICATION:\n\t\t\t\treturn StorageScope.APPLICATION;\n\t\t\tcase NeverShowAgainScope.PROFILE:\n\t\t\t\treturn StorageScope.PROFILE;\n\t\t\tcase NeverShowAgainScope.WORKSPACE:\n\t\t\t\treturn StorageScope.WORKSPACE;\n\t\t\tdefault:\n\t\t\t\treturn StorageScope.APPLICATION;\n\t\t}\n\t}\n\n\tprompt(severity: Severity, message: string, choices: IPromptChoice[], options?: IPromptOptions): INotificationHandle {\n\t\tconst toDispose = new DisposableStore();\n\n\t\t// Handle neverShowAgain option accordingly\n\t\tif (options?.neverShowAgain) {\n\t\t\tconst scope = this.toStorageScope(options.neverShowAgain);\n\t\t\tconst id = options.neverShowAgain.id;\n\n\t\t\t// If the user already picked to not show the notification\n\t\t\t// again, we return with a no-op notification here\n\t\t\tif (this.storageService.getBoolean(id, scope)) {\n\t\t\t\treturn new NoOpNotification();\n\t\t\t}\n\n\t\t\tconst neverShowAgainChoice = {\n\t\t\t\tlabel: localize('neverShowAgain', \"Don't Show Again\"),\n\t\t\t\trun: () => this.storageService.store(id, true, scope, StorageTarget.USER),\n\t\t\t\tisSecondary: options.neverShowAgain.isSecondary\n\t\t\t};\n\n\t\t\t// Insert as primary or secondary action\n\t\t\tif (!options.neverShowAgain.isSecondary) {\n\t\t\t\tchoices = [neverShowAgainChoice, ...choices]; // action comes first\n\t\t\t} else {\n\t\t\t\tchoices = [...choices, neverShowAgainChoice]; // actions comes last\n\t\t\t}\n\t\t}\n\n\t\tlet choiceClicked = false;\n\n\n\t\t// Convert choices into primary/secondary actions\n\t\tconst primaryActions: IAction[] = [];\n\t\tconst secondaryActions: IAction[] = [];\n\t\tchoices.forEach((choice, index) => {\n\t\t\tconst action = new ChoiceAction(`workbench.dialog.choice.${index}`, choice);\n\t\t\tif (!choice.isSecondary) {\n\t\t\t\tprimaryActions.push(action);\n\t\t\t} else {\n\t\t\t\tsecondaryActions.push(action);\n\t\t\t}\n\n\t\t\t// React to action being clicked\n\t\t\ttoDispose.add(action.onDidRun(() => {\n\t\t\t\tchoiceClicked = true;\n\n\t\t\t\t// Close notification unless we are told to keep open\n\t\t\t\tif (!choice.keepOpen) {\n\t\t\t\t\thandle.close();\n\t\t\t\t}\n\t\t\t}));\n\n\t\t\ttoDispose.add(action);\n\t\t});\n\n\t\t// Show notification with actions\n\t\tconst actions: INotificationActions = { primary: primaryActions, secondary: secondaryActions };\n\t\tconst handle = this.notify({ severity, message, actions, sticky: options?.sticky, priority: options?.priority });\n\n\t\tEvent.once(handle.onDidClose)(() => {\n\n\t\t\t// Cleanup when notification gets disposed\n\t\t\ttoDispose.dispose();\n\n\t\t\t// Indicate cancellation to the outside if no action was executed\n\t\t\tif (options && typeof options.onCancel === 'function' && !choiceClicked) {\n\t\t\t\toptions.onCancel();\n\t\t\t}\n\t\t});\n\n\t\treturn handle;\n\t}\n\n\tstatus(message: NotificationMessage, options?: IStatusMessageOptions): IDisposable {\n\t\treturn this.model.showStatusMessage(message, options);\n\t}\n}\n\nregisterSingleton(INotificationService, NotificationService, InstantiationType.Delayed);\n"],
  "mappings": "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",
  "names": []
}
