{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/authentication/browser/authenticationExtensionsService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Disposable, DisposableStore, dispose, IDisposable, MutableDisposable } from '../../../../base/common/lifecycle.js';\nimport * as nls from '../../../../nls.js';\nimport { MenuId, MenuRegistry } from '../../../../platform/actions/common/actions.js';\nimport { CommandsRegistry } from '../../../../platform/commands/common/commands.js';\nimport { IDialogService } from '../../../../platform/dialogs/common/dialogs.js';\nimport { InstantiationType, registerSingleton } from '../../../../platform/instantiation/common/extensions.js';\nimport { Severity } from '../../../../platform/notification/common/notification.js';\nimport { IQuickInputService } from '../../../../platform/quickinput/common/quickInput.js';\nimport { IStorageService, StorageScope, StorageTarget } from '../../../../platform/storage/common/storage.js';\nimport { IActivityService, NumberBadge } from '../../activity/common/activity.js';\nimport { IAuthenticationAccessService } from './authenticationAccessService.js';\nimport { IAuthenticationUsageService } from './authenticationUsageService.js';\nimport { AuthenticationSession, IAuthenticationProvider, IAuthenticationService, IAuthenticationExtensionsService, AuthenticationSessionAccount } from '../common/authentication.js';\n\n// OAuth2 spec prohibits space in a scope, so use that to join them.\nconst SCOPESLIST_SEPARATOR = ' ';\n\ninterface SessionRequest {\n\tdisposables: IDisposable[];\n\trequestingExtensionIds: string[];\n}\n\ninterface SessionRequestInfo {\n\t[scopesList: string]: SessionRequest;\n}\n\n// TODO@TylerLeonhardt: This should all go in MainThreadAuthentication\nexport class AuthenticationExtensionsService extends Disposable implements IAuthenticationExtensionsService {\n\tdeclare readonly _serviceBrand: undefined;\n\tprivate _signInRequestItems = new Map<string, SessionRequestInfo>();\n\tprivate _sessionAccessRequestItems = new Map<string, { [extensionId: string]: { disposables: IDisposable[]; possibleSessions: AuthenticationSession[] } }>();\n\tprivate readonly _accountBadgeDisposable = this._register(new MutableDisposable());\n\n\tconstructor(\n\t\t@IActivityService private readonly activityService: IActivityService,\n\t\t@IStorageService private readonly storageService: IStorageService,\n\t\t@IDialogService private readonly dialogService: IDialogService,\n\t\t@IQuickInputService private readonly quickInputService: IQuickInputService,\n\t\t@IAuthenticationService private readonly _authenticationService: IAuthenticationService,\n\t\t@IAuthenticationUsageService private readonly _authenticationUsageService: IAuthenticationUsageService,\n\t\t@IAuthenticationAccessService private readonly _authenticationAccessService: IAuthenticationAccessService\n\t) {\n\t\tsuper();\n\t\tthis.registerListeners();\n\t}\n\n\tprivate registerListeners() {\n\t\tthis._register(this._authenticationService.onDidChangeSessions(async e => {\n\t\t\tif (e.event.added?.length) {\n\t\t\t\tawait this.updateNewSessionRequests(e.providerId, e.event.added);\n\t\t\t}\n\t\t\tif (e.event.removed?.length) {\n\t\t\t\tawait this.updateAccessRequests(e.providerId, e.event.removed);\n\t\t\t}\n\t\t\tthis.updateBadgeCount();\n\t\t}));\n\n\t\tthis._register(this._authenticationService.onDidUnregisterAuthenticationProvider(e => {\n\t\t\tconst accessRequests = this._sessionAccessRequestItems.get(e.id) || {};\n\t\t\tObject.keys(accessRequests).forEach(extensionId => {\n\t\t\t\tthis.removeAccessRequest(e.id, extensionId);\n\t\t\t});\n\t\t}));\n\t}\n\n\tprivate async updateNewSessionRequests(providerId: string, addedSessions: readonly AuthenticationSession[]): Promise<void> {\n\t\tconst existingRequestsForProvider = this._signInRequestItems.get(providerId);\n\t\tif (!existingRequestsForProvider) {\n\t\t\treturn;\n\t\t}\n\n\t\tObject.keys(existingRequestsForProvider).forEach(requestedScopes => {\n\t\t\tif (addedSessions.some(session => session.scopes.slice().join(SCOPESLIST_SEPARATOR) === requestedScopes)) {\n\t\t\t\tconst sessionRequest = existingRequestsForProvider[requestedScopes];\n\t\t\t\tsessionRequest?.disposables.forEach(item => item.dispose());\n\n\t\t\t\tdelete existingRequestsForProvider[requestedScopes];\n\t\t\t\tif (Object.keys(existingRequestsForProvider).length === 0) {\n\t\t\t\t\tthis._signInRequestItems.delete(providerId);\n\t\t\t\t} else {\n\t\t\t\t\tthis._signInRequestItems.set(providerId, existingRequestsForProvider);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n\n\tprivate async updateAccessRequests(providerId: string, removedSessions: readonly AuthenticationSession[]) {\n\t\tconst providerRequests = this._sessionAccessRequestItems.get(providerId);\n\t\tif (providerRequests) {\n\t\t\tObject.keys(providerRequests).forEach(extensionId => {\n\t\t\t\tremovedSessions.forEach(removed => {\n\t\t\t\t\tconst indexOfSession = providerRequests[extensionId].possibleSessions.findIndex(session => session.id === removed.id);\n\t\t\t\t\tif (indexOfSession) {\n\t\t\t\t\t\tproviderRequests[extensionId].possibleSessions.splice(indexOfSession, 1);\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\tif (!providerRequests[extensionId].possibleSessions.length) {\n\t\t\t\t\tthis.removeAccessRequest(providerId, extensionId);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}\n\n\tprivate updateBadgeCount(): void {\n\t\tthis._accountBadgeDisposable.clear();\n\n\t\tlet numberOfRequests = 0;\n\t\tthis._signInRequestItems.forEach(providerRequests => {\n\t\t\tObject.keys(providerRequests).forEach(request => {\n\t\t\t\tnumberOfRequests += providerRequests[request].requestingExtensionIds.length;\n\t\t\t});\n\t\t});\n\n\t\tthis._sessionAccessRequestItems.forEach(accessRequest => {\n\t\t\tnumberOfRequests += Object.keys(accessRequest).length;\n\t\t});\n\n\t\tif (numberOfRequests > 0) {\n\t\t\tconst badge = new NumberBadge(numberOfRequests, () => nls.localize('sign in', \"Sign in requested\"));\n\t\t\tthis._accountBadgeDisposable.value = this.activityService.showAccountsActivity({ badge });\n\t\t}\n\t}\n\n\tprivate removeAccessRequest(providerId: string, extensionId: string): void {\n\t\tconst providerRequests = this._sessionAccessRequestItems.get(providerId) || {};\n\t\tif (providerRequests[extensionId]) {\n\t\t\tdispose(providerRequests[extensionId].disposables);\n\t\t\tdelete providerRequests[extensionId];\n\t\t\tthis.updateBadgeCount();\n\t\t}\n\t}\n\n\t//#region Session Preference\n\n\tupdateSessionPreference(providerId: string, extensionId: string, session: AuthenticationSession): void {\n\t\t// The 3 parts of this key are important:\n\t\t// * Extension id: The extension that has a preference\n\t\t// * Provider id: The provider that the preference is for\n\t\t// * The scopes: The subset of sessions that the preference applies to\n\t\tconst key = `${extensionId}-${providerId}-${session.scopes.join(SCOPESLIST_SEPARATOR)}`;\n\n\t\t// Store the preference in the workspace and application storage. This allows new workspaces to\n\t\t// have a preference set already to limit the number of prompts that are shown... but also allows\n\t\t// a specific workspace to override the global preference.\n\t\tthis.storageService.store(key, session.id, StorageScope.WORKSPACE, StorageTarget.MACHINE);\n\t\tthis.storageService.store(key, session.id, StorageScope.APPLICATION, StorageTarget.MACHINE);\n\t}\n\n\tgetSessionPreference(providerId: string, extensionId: string, scopes: string[]): string | undefined {\n\t\t// The 3 parts of this key are important:\n\t\t// * Extension id: The extension that has a preference\n\t\t// * Provider id: The provider that the preference is for\n\t\t// * The scopes: The subset of sessions that the preference applies to\n\t\tconst key = `${extensionId}-${providerId}-${scopes.join(SCOPESLIST_SEPARATOR)}`;\n\n\t\t// If a preference is set in the workspace, use that. Otherwise, use the global preference.\n\t\treturn this.storageService.get(key, StorageScope.WORKSPACE) ?? this.storageService.get(key, StorageScope.APPLICATION);\n\t}\n\n\tremoveSessionPreference(providerId: string, extensionId: string, scopes: string[]): void {\n\t\t// The 3 parts of this key are important:\n\t\t// * Extension id: The extension that has a preference\n\t\t// * Provider id: The provider that the preference is for\n\t\t// * The scopes: The subset of sessions that the preference applies to\n\t\tconst key = `${extensionId}-${providerId}-${scopes.join(SCOPESLIST_SEPARATOR)}`;\n\n\t\t// This won't affect any other workspaces that have a preference set, but it will remove the preference\n\t\t// for this workspace and the global preference. This is only paired with a call to updateSessionPreference...\n\t\t// so we really don't _need_ to remove them as they are about to be overridden anyway... but it's more correct\n\t\t// to remove them first... and in case this gets called from somewhere else in the future.\n\t\tthis.storageService.remove(key, StorageScope.WORKSPACE);\n\t\tthis.storageService.remove(key, StorageScope.APPLICATION);\n\t}\n\n\t//#endregion\n\n\tprivate async showGetSessionPrompt(provider: IAuthenticationProvider, accountName: string, extensionId: string, extensionName: string): Promise<boolean> {\n\t\tenum SessionPromptChoice {\n\t\t\tAllow = 0,\n\t\t\tDeny = 1,\n\t\t\tCancel = 2\n\t\t}\n\t\tconst { result } = await this.dialogService.prompt<SessionPromptChoice>({\n\t\t\ttype: Severity.Info,\n\t\t\tmessage: nls.localize('confirmAuthenticationAccess', \"The extension '{0}' wants to access the {1} account '{2}'.\", extensionName, provider.label, accountName),\n\t\t\tbuttons: [\n\t\t\t\t{\n\t\t\t\t\tlabel: nls.localize({ key: 'allow', comment: ['&& denotes a mnemonic'] }, \"&&Allow\"),\n\t\t\t\t\trun: () => SessionPromptChoice.Allow\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tlabel: nls.localize({ key: 'deny', comment: ['&& denotes a mnemonic'] }, \"&&Deny\"),\n\t\t\t\t\trun: () => SessionPromptChoice.Deny\n\t\t\t\t}\n\t\t\t],\n\t\t\tcancelButton: {\n\t\t\t\trun: () => SessionPromptChoice.Cancel\n\t\t\t}\n\t\t});\n\n\t\tif (result !== SessionPromptChoice.Cancel) {\n\t\t\tthis._authenticationAccessService.updateAllowedExtensions(provider.id, accountName, [{ id: extensionId, name: extensionName, allowed: result === SessionPromptChoice.Allow }]);\n\t\t\tthis.removeAccessRequest(provider.id, extensionId);\n\t\t}\n\n\t\treturn result === SessionPromptChoice.Allow;\n\t}\n\n\t/**\n\t * This function should be used only when there are sessions to disambiguate.\n\t */\n\tasync selectSession(providerId: string, extensionId: string, extensionName: string, scopes: string[], availableSessions: AuthenticationSession[]): Promise<AuthenticationSession> {\n\t\tconst allAccounts = await this._authenticationService.getAccounts(providerId);\n\t\tif (!allAccounts.length) {\n\t\t\tthrow new Error('No accounts available');\n\t\t}\n\t\tconst disposables = new DisposableStore();\n\t\tconst quickPick = disposables.add(this.quickInputService.createQuickPick<{ label: string; session?: AuthenticationSession; account?: AuthenticationSessionAccount }>());\n\t\tquickPick.ignoreFocusOut = true;\n\t\tconst accountsWithSessions = new Set<string>();\n\t\tconst items: { label: string; session?: AuthenticationSession; account?: AuthenticationSessionAccount }[] = availableSessions\n\t\t\t// Only grab the first account\n\t\t\t.filter(session => !accountsWithSessions.has(session.account.label) && accountsWithSessions.add(session.account.label))\n\t\t\t.map(session => {\n\t\t\t\treturn {\n\t\t\t\t\tlabel: session.account.label,\n\t\t\t\t\tsession: session\n\t\t\t\t};\n\t\t\t});\n\n\t\t// Add the additional accounts that have been logged into the provider but are\n\t\t// don't have a session yet.\n\t\tallAccounts.forEach(account => {\n\t\t\tif (!accountsWithSessions.has(account.label)) {\n\t\t\t\titems.push({ label: account.label, account });\n\t\t\t}\n\t\t});\n\t\titems.push({ label: nls.localize('useOtherAccount', \"Sign in to another account\") });\n\t\tquickPick.items = items;\n\t\tquickPick.title = nls.localize(\n\t\t\t{\n\t\t\t\tkey: 'selectAccount',\n\t\t\t\tcomment: ['The placeholder {0} is the name of an extension. {1} is the name of the type of account, such as Microsoft or GitHub.']\n\t\t\t},\n\t\t\t\"The extension '{0}' wants to access a {1} account\",\n\t\t\textensionName,\n\t\t\tthis._authenticationService.getProvider(providerId).label\n\t\t);\n\t\tquickPick.placeholder = nls.localize('getSessionPlateholder', \"Select an account for '{0}' to use or Esc to cancel\", extensionName);\n\n\t\treturn await new Promise((resolve, reject) => {\n\t\t\tdisposables.add(quickPick.onDidAccept(async _ => {\n\t\t\t\tquickPick.dispose();\n\t\t\t\tlet session = quickPick.selectedItems[0].session;\n\t\t\t\tif (!session) {\n\t\t\t\t\tconst account = quickPick.selectedItems[0].account;\n\t\t\t\t\ttry {\n\t\t\t\t\t\tsession = await this._authenticationService.createSession(providerId, scopes, { account });\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\treject(e);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tconst accountName = session.account.label;\n\n\t\t\t\tthis._authenticationAccessService.updateAllowedExtensions(providerId, accountName, [{ id: extensionId, name: extensionName, allowed: true }]);\n\t\t\t\tthis.updateSessionPreference(providerId, extensionId, session);\n\t\t\t\tthis.removeAccessRequest(providerId, extensionId);\n\n\t\t\t\tresolve(session);\n\t\t\t}));\n\n\t\t\tdisposables.add(quickPick.onDidHide(_ => {\n\t\t\t\tif (!quickPick.selectedItems[0]) {\n\t\t\t\t\treject('User did not consent to account access');\n\t\t\t\t}\n\t\t\t\tdisposables.dispose();\n\t\t\t}));\n\n\t\t\tquickPick.show();\n\t\t});\n\t}\n\n\tprivate async completeSessionAccessRequest(provider: IAuthenticationProvider, extensionId: string, extensionName: string, scopes: string[]): Promise<void> {\n\t\tconst providerRequests = this._sessionAccessRequestItems.get(provider.id) || {};\n\t\tconst existingRequest = providerRequests[extensionId];\n\t\tif (!existingRequest) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (!provider) {\n\t\t\treturn;\n\t\t}\n\t\tconst possibleSessions = existingRequest.possibleSessions;\n\n\t\tlet session: AuthenticationSession | undefined;\n\t\tif (provider.supportsMultipleAccounts) {\n\t\t\ttry {\n\t\t\t\tsession = await this.selectSession(provider.id, extensionId, extensionName, scopes, possibleSessions);\n\t\t\t} catch (_) {\n\t\t\t\t// ignore cancel\n\t\t\t}\n\t\t} else {\n\t\t\tconst approved = await this.showGetSessionPrompt(provider, possibleSessions[0].account.label, extensionId, extensionName);\n\t\t\tif (approved) {\n\t\t\t\tsession = possibleSessions[0];\n\t\t\t}\n\t\t}\n\n\t\tif (session) {\n\t\t\tthis._authenticationUsageService.addAccountUsage(provider.id, session.account.label, extensionId, extensionName);\n\t\t}\n\t}\n\n\trequestSessionAccess(providerId: string, extensionId: string, extensionName: string, scopes: string[], possibleSessions: AuthenticationSession[]): void {\n\t\tconst providerRequests = this._sessionAccessRequestItems.get(providerId) || {};\n\t\tconst hasExistingRequest = providerRequests[extensionId];\n\t\tif (hasExistingRequest) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst provider = this._authenticationService.getProvider(providerId);\n\t\tconst menuItem = MenuRegistry.appendMenuItem(MenuId.AccountsContext, {\n\t\t\tgroup: '3_accessRequests',\n\t\t\tcommand: {\n\t\t\t\tid: `${providerId}${extensionId}Access`,\n\t\t\t\ttitle: nls.localize({\n\t\t\t\t\tkey: 'accessRequest',\n\t\t\t\t\tcomment: [`The placeholder {0} will be replaced with an authentication provider''s label. {1} will be replaced with an extension name. (1) is to indicate that this menu item contributes to a badge count`]\n\t\t\t\t},\n\t\t\t\t\t\"Grant access to {0} for {1}... (1)\",\n\t\t\t\t\tprovider.label,\n\t\t\t\t\textensionName)\n\t\t\t}\n\t\t});\n\n\t\tconst accessCommand = CommandsRegistry.registerCommand({\n\t\t\tid: `${providerId}${extensionId}Access`,\n\t\t\thandler: async (accessor) => {\n\t\t\t\tthis.completeSessionAccessRequest(provider, extensionId, extensionName, scopes);\n\t\t\t}\n\t\t});\n\n\t\tproviderRequests[extensionId] = { possibleSessions, disposables: [menuItem, accessCommand] };\n\t\tthis._sessionAccessRequestItems.set(providerId, providerRequests);\n\t\tthis.updateBadgeCount();\n\t}\n\n\tasync requestNewSession(providerId: string, scopes: string[], extensionId: string, extensionName: string): Promise<void> {\n\t\tif (!this._authenticationService.isAuthenticationProviderRegistered(providerId)) {\n\t\t\t// Activate has already been called for the authentication provider, but it cannot block on registering itself\n\t\t\t// since this is sync and returns a disposable. So, wait for registration event to fire that indicates the\n\t\t\t// provider is now in the map.\n\t\t\tawait new Promise<void>((resolve, _) => {\n\t\t\t\tconst dispose = this._authenticationService.onDidRegisterAuthenticationProvider(e => {\n\t\t\t\t\tif (e.id === providerId) {\n\t\t\t\t\t\tdispose.dispose();\n\t\t\t\t\t\tresolve();\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\n\t\tlet provider: IAuthenticationProvider;\n\t\ttry {\n\t\t\tprovider = this._authenticationService.getProvider(providerId);\n\t\t} catch (_e) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst providerRequests = this._signInRequestItems.get(providerId);\n\t\tconst scopesList = scopes.join(SCOPESLIST_SEPARATOR);\n\t\tconst extensionHasExistingRequest = providerRequests\n\t\t\t&& providerRequests[scopesList]\n\t\t\t&& providerRequests[scopesList].requestingExtensionIds.includes(extensionId);\n\n\t\tif (extensionHasExistingRequest) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Construct a commandId that won't clash with others generated here, nor likely with an extension's command\n\t\tconst commandId = `${providerId}:${extensionId}:signIn${Object.keys(providerRequests || []).length}`;\n\t\tconst menuItem = MenuRegistry.appendMenuItem(MenuId.AccountsContext, {\n\t\t\tgroup: '2_signInRequests',\n\t\t\tcommand: {\n\t\t\t\tid: commandId,\n\t\t\t\ttitle: nls.localize({\n\t\t\t\t\tkey: 'signInRequest',\n\t\t\t\t\tcomment: [`The placeholder {0} will be replaced with an authentication provider's label. {1} will be replaced with an extension name. (1) is to indicate that this menu item contributes to a badge count.`]\n\t\t\t\t},\n\t\t\t\t\t\"Sign in with {0} to use {1} (1)\",\n\t\t\t\t\tprovider.label,\n\t\t\t\t\textensionName)\n\t\t\t}\n\t\t});\n\n\t\tconst signInCommand = CommandsRegistry.registerCommand({\n\t\t\tid: commandId,\n\t\t\thandler: async (accessor) => {\n\t\t\t\tconst authenticationService = accessor.get(IAuthenticationService);\n\t\t\t\tconst session = await authenticationService.createSession(providerId, scopes);\n\n\t\t\t\tthis._authenticationAccessService.updateAllowedExtensions(providerId, session.account.label, [{ id: extensionId, name: extensionName, allowed: true }]);\n\t\t\t\tthis.updateSessionPreference(providerId, extensionId, session);\n\t\t\t}\n\t\t});\n\n\n\t\tif (providerRequests) {\n\t\t\tconst existingRequest = providerRequests[scopesList] || { disposables: [], requestingExtensionIds: [] };\n\n\t\t\tproviderRequests[scopesList] = {\n\t\t\t\tdisposables: [...existingRequest.disposables, menuItem, signInCommand],\n\t\t\t\trequestingExtensionIds: [...existingRequest.requestingExtensionIds, extensionId]\n\t\t\t};\n\t\t\tthis._signInRequestItems.set(providerId, providerRequests);\n\t\t} else {\n\t\t\tthis._signInRequestItems.set(providerId, {\n\t\t\t\t[scopesList]: {\n\t\t\t\t\tdisposables: [menuItem, signInCommand],\n\t\t\t\t\trequestingExtensionIds: [extensionId]\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\tthis.updateBadgeCount();\n\t}\n}\n\nregisterSingleton(IAuthenticationExtensionsService, AuthenticationExtensionsService, InstantiationType.Delayed);\n"],
  "mappings": "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",
  "names": ["SessionPromptChoice", "dispose"]
}
