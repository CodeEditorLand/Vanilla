{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/authentication/browser/authenticationExtensionsService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport {\n\tDisposable,\n\tDisposableStore,\n\ttype IDisposable,\n\tMutableDisposable,\n\tdispose,\n} from \"../../../../base/common/lifecycle.js\";\nimport * as nls from \"../../../../nls.js\";\nimport {\n\tMenuId,\n\tMenuRegistry,\n} from \"../../../../platform/actions/common/actions.js\";\nimport { CommandsRegistry } from \"../../../../platform/commands/common/commands.js\";\nimport { IDialogService } from \"../../../../platform/dialogs/common/dialogs.js\";\nimport {\n\tInstantiationType,\n\tregisterSingleton,\n} from \"../../../../platform/instantiation/common/extensions.js\";\nimport { Severity } from \"../../../../platform/notification/common/notification.js\";\nimport { IQuickInputService } from \"../../../../platform/quickinput/common/quickInput.js\";\nimport {\n\tIStorageService,\n\tStorageScope,\n\tStorageTarget,\n} from \"../../../../platform/storage/common/storage.js\";\nimport {\n\tIActivityService,\n\tNumberBadge,\n} from \"../../activity/common/activity.js\";\nimport {\n\ttype AuthenticationSession,\n\ttype AuthenticationSessionAccount,\n\tIAuthenticationExtensionsService,\n\ttype IAuthenticationProvider,\n\tIAuthenticationService,\n} from \"../common/authentication.js\";\nimport { IAuthenticationAccessService } from \"./authenticationAccessService.js\";\nimport { IAuthenticationUsageService } from \"./authenticationUsageService.js\";\n\n// OAuth2 spec prohibits space in a scope, so use that to join them.\nconst SCOPESLIST_SEPARATOR = \" \";\n\ninterface SessionRequest {\n\tdisposables: IDisposable[];\n\trequestingExtensionIds: string[];\n}\n\ninterface SessionRequestInfo {\n\t[scopesList: string]: SessionRequest;\n}\n\n// TODO@TylerLeonhardt: This should all go in MainThreadAuthentication\nexport class AuthenticationExtensionsService\n\textends Disposable\n\timplements IAuthenticationExtensionsService\n{\n\tdeclare readonly _serviceBrand: undefined;\n\tprivate _signInRequestItems = new Map<string, SessionRequestInfo>();\n\tprivate _sessionAccessRequestItems = new Map<\n\t\tstring,\n\t\t{\n\t\t\t[extensionId: string]: {\n\t\t\t\tdisposables: IDisposable[];\n\t\t\t\tpossibleSessions: AuthenticationSession[];\n\t\t\t};\n\t\t}\n\t>();\n\tprivate readonly _accountBadgeDisposable = this._register(\n\t\tnew MutableDisposable(),\n\t);\n\n\tconstructor(\n\t\t@IActivityService private readonly activityService: IActivityService,\n\t\t@IStorageService private readonly storageService: IStorageService,\n\t\t@IDialogService private readonly dialogService: IDialogService,\n\t\t@IQuickInputService private readonly quickInputService: IQuickInputService,\n\t\t@IAuthenticationService private readonly _authenticationService: IAuthenticationService,\n\t\t@IAuthenticationUsageService private readonly _authenticationUsageService: IAuthenticationUsageService,\n\t\t@IAuthenticationAccessService private readonly _authenticationAccessService: IAuthenticationAccessService\n\t) {\n\t\tsuper();\n\t\tthis.registerListeners();\n\t}\n\n\tprivate registerListeners() {\n\t\tthis._register(\n\t\t\tthis._authenticationService.onDidChangeSessions(async (e) => {\n\t\t\t\tif (e.event.added?.length) {\n\t\t\t\t\tawait this.updateNewSessionRequests(\n\t\t\t\t\t\te.providerId,\n\t\t\t\t\t\te.event.added,\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t\tif (e.event.removed?.length) {\n\t\t\t\t\tawait this.updateAccessRequests(\n\t\t\t\t\t\te.providerId,\n\t\t\t\t\t\te.event.removed,\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t\tthis.updateBadgeCount();\n\t\t\t}),\n\t\t);\n\n\t\tthis._register(\n\t\t\tthis._authenticationService.onDidUnregisterAuthenticationProvider(\n\t\t\t\t(e) => {\n\t\t\t\t\tconst accessRequests =\n\t\t\t\t\t\tthis._sessionAccessRequestItems.get(e.id) || {};\n\t\t\t\t\tObject.keys(accessRequests).forEach((extensionId) => {\n\t\t\t\t\t\tthis.removeAccessRequest(e.id, extensionId);\n\t\t\t\t\t});\n\t\t\t\t},\n\t\t\t),\n\t\t);\n\t}\n\n\tprivate async updateNewSessionRequests(\n\t\tproviderId: string,\n\t\taddedSessions: readonly AuthenticationSession[],\n\t): Promise<void> {\n\t\tconst existingRequestsForProvider =\n\t\t\tthis._signInRequestItems.get(providerId);\n\t\tif (!existingRequestsForProvider) {\n\t\t\treturn;\n\t\t}\n\n\t\tObject.keys(existingRequestsForProvider).forEach((requestedScopes) => {\n\t\t\tif (\n\t\t\t\taddedSessions.some(\n\t\t\t\t\t(session) =>\n\t\t\t\t\t\tsession.scopes.slice().join(SCOPESLIST_SEPARATOR) ===\n\t\t\t\t\t\trequestedScopes,\n\t\t\t\t)\n\t\t\t) {\n\t\t\t\tconst sessionRequest =\n\t\t\t\t\texistingRequestsForProvider[requestedScopes];\n\t\t\t\tsessionRequest?.disposables.forEach((item) => item.dispose());\n\n\t\t\t\tdelete existingRequestsForProvider[requestedScopes];\n\t\t\t\tif (Object.keys(existingRequestsForProvider).length === 0) {\n\t\t\t\t\tthis._signInRequestItems.delete(providerId);\n\t\t\t\t} else {\n\t\t\t\t\tthis._signInRequestItems.set(\n\t\t\t\t\t\tproviderId,\n\t\t\t\t\t\texistingRequestsForProvider,\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n\n\tprivate async updateAccessRequests(\n\t\tproviderId: string,\n\t\tremovedSessions: readonly AuthenticationSession[],\n\t) {\n\t\tconst providerRequests =\n\t\t\tthis._sessionAccessRequestItems.get(providerId);\n\t\tif (providerRequests) {\n\t\t\tObject.keys(providerRequests).forEach((extensionId) => {\n\t\t\t\tremovedSessions.forEach((removed) => {\n\t\t\t\t\tconst indexOfSession = providerRequests[\n\t\t\t\t\t\textensionId\n\t\t\t\t\t].possibleSessions.findIndex(\n\t\t\t\t\t\t(session) => session.id === removed.id,\n\t\t\t\t\t);\n\t\t\t\t\tif (indexOfSession) {\n\t\t\t\t\t\tproviderRequests[extensionId].possibleSessions.splice(\n\t\t\t\t\t\t\tindexOfSession,\n\t\t\t\t\t\t\t1,\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\tif (!providerRequests[extensionId].possibleSessions.length) {\n\t\t\t\t\tthis.removeAccessRequest(providerId, extensionId);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}\n\n\tprivate updateBadgeCount(): void {\n\t\tthis._accountBadgeDisposable.clear();\n\n\t\tlet numberOfRequests = 0;\n\t\tthis._signInRequestItems.forEach((providerRequests) => {\n\t\t\tObject.keys(providerRequests).forEach((request) => {\n\t\t\t\tnumberOfRequests +=\n\t\t\t\t\tproviderRequests[request].requestingExtensionIds.length;\n\t\t\t});\n\t\t});\n\n\t\tthis._sessionAccessRequestItems.forEach((accessRequest) => {\n\t\t\tnumberOfRequests += Object.keys(accessRequest).length;\n\t\t});\n\n\t\tif (numberOfRequests > 0) {\n\t\t\tconst badge = new NumberBadge(numberOfRequests, () =>\n\t\t\t\tnls.localize(\"sign in\", \"Sign in requested\"),\n\t\t\t);\n\t\t\tthis._accountBadgeDisposable.value =\n\t\t\t\tthis.activityService.showAccountsActivity({ badge });\n\t\t}\n\t}\n\n\tprivate removeAccessRequest(providerId: string, extensionId: string): void {\n\t\tconst providerRequests =\n\t\t\tthis._sessionAccessRequestItems.get(providerId) || {};\n\t\tif (providerRequests[extensionId]) {\n\t\t\tdispose(providerRequests[extensionId].disposables);\n\t\t\tdelete providerRequests[extensionId];\n\t\t\tthis.updateBadgeCount();\n\t\t}\n\t}\n\n\t//#region Session Preference\n\n\tupdateSessionPreference(\n\t\tproviderId: string,\n\t\textensionId: string,\n\t\tsession: AuthenticationSession,\n\t): void {\n\t\t// The 3 parts of this key are important:\n\t\t// * Extension id: The extension that has a preference\n\t\t// * Provider id: The provider that the preference is for\n\t\t// * The scopes: The subset of sessions that the preference applies to\n\t\tconst key = `${extensionId}-${providerId}-${session.scopes.join(SCOPESLIST_SEPARATOR)}`;\n\n\t\t// Store the preference in the workspace and application storage. This allows new workspaces to\n\t\t// have a preference set already to limit the number of prompts that are shown... but also allows\n\t\t// a specific workspace to override the global preference.\n\t\tthis.storageService.store(\n\t\t\tkey,\n\t\t\tsession.id,\n\t\t\tStorageScope.WORKSPACE,\n\t\t\tStorageTarget.MACHINE,\n\t\t);\n\t\tthis.storageService.store(\n\t\t\tkey,\n\t\t\tsession.id,\n\t\t\tStorageScope.APPLICATION,\n\t\t\tStorageTarget.MACHINE,\n\t\t);\n\t}\n\n\tgetSessionPreference(\n\t\tproviderId: string,\n\t\textensionId: string,\n\t\tscopes: string[],\n\t): string | undefined {\n\t\t// The 3 parts of this key are important:\n\t\t// * Extension id: The extension that has a preference\n\t\t// * Provider id: The provider that the preference is for\n\t\t// * The scopes: The subset of sessions that the preference applies to\n\t\tconst key = `${extensionId}-${providerId}-${scopes.join(SCOPESLIST_SEPARATOR)}`;\n\n\t\t// If a preference is set in the workspace, use that. Otherwise, use the global preference.\n\t\treturn (\n\t\t\tthis.storageService.get(key, StorageScope.WORKSPACE) ??\n\t\t\tthis.storageService.get(key, StorageScope.APPLICATION)\n\t\t);\n\t}\n\n\tremoveSessionPreference(\n\t\tproviderId: string,\n\t\textensionId: string,\n\t\tscopes: string[],\n\t): void {\n\t\t// The 3 parts of this key are important:\n\t\t// * Extension id: The extension that has a preference\n\t\t// * Provider id: The provider that the preference is for\n\t\t// * The scopes: The subset of sessions that the preference applies to\n\t\tconst key = `${extensionId}-${providerId}-${scopes.join(SCOPESLIST_SEPARATOR)}`;\n\n\t\t// This won't affect any other workspaces that have a preference set, but it will remove the preference\n\t\t// for this workspace and the global preference. This is only paired with a call to updateSessionPreference...\n\t\t// so we really don't _need_ to remove them as they are about to be overridden anyway... but it's more correct\n\t\t// to remove them first... and in case this gets called from somewhere else in the future.\n\t\tthis.storageService.remove(key, StorageScope.WORKSPACE);\n\t\tthis.storageService.remove(key, StorageScope.APPLICATION);\n\t}\n\n\t//#endregion\n\n\tprivate async showGetSessionPrompt(\n\t\tprovider: IAuthenticationProvider,\n\t\taccountName: string,\n\t\textensionId: string,\n\t\textensionName: string,\n\t): Promise<boolean> {\n\t\tenum SessionPromptChoice {\n\t\t\tAllow = 0,\n\t\t\tDeny = 1,\n\t\t\tCancel = 2,\n\t\t}\n\t\tconst { result } = await this.dialogService.prompt<SessionPromptChoice>(\n\t\t\t{\n\t\t\t\ttype: Severity.Info,\n\t\t\t\tmessage: nls.localize(\n\t\t\t\t\t\"confirmAuthenticationAccess\",\n\t\t\t\t\t\"The extension '{0}' wants to access the {1} account '{2}'.\",\n\t\t\t\t\textensionName,\n\t\t\t\t\tprovider.label,\n\t\t\t\t\taccountName,\n\t\t\t\t),\n\t\t\t\tbuttons: [\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: nls.localize(\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tkey: \"allow\",\n\t\t\t\t\t\t\t\tcomment: [\"&& denotes a mnemonic\"],\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\"&&Allow\",\n\t\t\t\t\t\t),\n\t\t\t\t\t\trun: () => SessionPromptChoice.Allow,\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: nls.localize(\n\t\t\t\t\t\t\t{ key: \"deny\", comment: [\"&& denotes a mnemonic\"] },\n\t\t\t\t\t\t\t\"&&Deny\",\n\t\t\t\t\t\t),\n\t\t\t\t\t\trun: () => SessionPromptChoice.Deny,\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\tcancelButton: {\n\t\t\t\t\trun: () => SessionPromptChoice.Cancel,\n\t\t\t\t},\n\t\t\t},\n\t\t);\n\n\t\tif (result !== SessionPromptChoice.Cancel) {\n\t\t\tthis._authenticationAccessService.updateAllowedExtensions(\n\t\t\t\tprovider.id,\n\t\t\t\taccountName,\n\t\t\t\t[\n\t\t\t\t\t{\n\t\t\t\t\t\tid: extensionId,\n\t\t\t\t\t\tname: extensionName,\n\t\t\t\t\t\tallowed: result === SessionPromptChoice.Allow,\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t);\n\t\t\tthis.removeAccessRequest(provider.id, extensionId);\n\t\t}\n\n\t\treturn result === SessionPromptChoice.Allow;\n\t}\n\n\t/**\n\t * This function should be used only when there are sessions to disambiguate.\n\t */\n\tasync selectSession(\n\t\tproviderId: string,\n\t\textensionId: string,\n\t\textensionName: string,\n\t\tscopes: string[],\n\t\tavailableSessions: AuthenticationSession[],\n\t): Promise<AuthenticationSession> {\n\t\tconst allAccounts =\n\t\t\tawait this._authenticationService.getAccounts(providerId);\n\t\tif (!allAccounts.length) {\n\t\t\tthrow new Error(\"No accounts available\");\n\t\t}\n\t\tconst disposables = new DisposableStore();\n\t\tconst quickPick = disposables.add(\n\t\t\tthis.quickInputService.createQuickPick<{\n\t\t\t\tlabel: string;\n\t\t\t\tsession?: AuthenticationSession;\n\t\t\t\taccount?: AuthenticationSessionAccount;\n\t\t\t}>(),\n\t\t);\n\t\tquickPick.ignoreFocusOut = true;\n\t\tconst accountsWithSessions = new Set<string>();\n\t\tconst items: {\n\t\t\tlabel: string;\n\t\t\tsession?: AuthenticationSession;\n\t\t\taccount?: AuthenticationSessionAccount;\n\t\t}[] = availableSessions\n\t\t\t// Only grab the first account\n\t\t\t.filter(\n\t\t\t\t(session) =>\n\t\t\t\t\t!accountsWithSessions.has(session.account.label) &&\n\t\t\t\t\taccountsWithSessions.add(session.account.label),\n\t\t\t)\n\t\t\t.map((session) => {\n\t\t\t\treturn {\n\t\t\t\t\tlabel: session.account.label,\n\t\t\t\t\tsession: session,\n\t\t\t\t};\n\t\t\t});\n\n\t\t// Add the additional accounts that have been logged into the provider but are\n\t\t// don't have a session yet.\n\t\tallAccounts.forEach((account) => {\n\t\t\tif (!accountsWithSessions.has(account.label)) {\n\t\t\t\titems.push({ label: account.label, account });\n\t\t\t}\n\t\t});\n\t\titems.push({\n\t\t\tlabel: nls.localize(\n\t\t\t\t\"useOtherAccount\",\n\t\t\t\t\"Sign in to another account\",\n\t\t\t),\n\t\t});\n\t\tquickPick.items = items;\n\t\tquickPick.title = nls.localize(\n\t\t\t{\n\t\t\t\tkey: \"selectAccount\",\n\t\t\t\tcomment: [\n\t\t\t\t\t\"The placeholder {0} is the name of an extension. {1} is the name of the type of account, such as Microsoft or GitHub.\",\n\t\t\t\t],\n\t\t\t},\n\t\t\t\"The extension '{0}' wants to access a {1} account\",\n\t\t\textensionName,\n\t\t\tthis._authenticationService.getProvider(providerId).label,\n\t\t);\n\t\tquickPick.placeholder = nls.localize(\n\t\t\t\"getSessionPlateholder\",\n\t\t\t\"Select an account for '{0}' to use or Esc to cancel\",\n\t\t\textensionName,\n\t\t);\n\n\t\treturn await new Promise((resolve, reject) => {\n\t\t\tdisposables.add(\n\t\t\t\tquickPick.onDidAccept(async (_) => {\n\t\t\t\t\tquickPick.dispose();\n\t\t\t\t\tlet session = quickPick.selectedItems[0].session;\n\t\t\t\t\tif (!session) {\n\t\t\t\t\t\tconst account = quickPick.selectedItems[0].account;\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tsession =\n\t\t\t\t\t\t\t\tawait this._authenticationService.createSession(\n\t\t\t\t\t\t\t\t\tproviderId,\n\t\t\t\t\t\t\t\t\tscopes,\n\t\t\t\t\t\t\t\t\t{ account },\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\t\treject(e);\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tconst accountName = session.account.label;\n\n\t\t\t\t\tthis._authenticationAccessService.updateAllowedExtensions(\n\t\t\t\t\t\tproviderId,\n\t\t\t\t\t\taccountName,\n\t\t\t\t\t\t[\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tid: extensionId,\n\t\t\t\t\t\t\t\tname: extensionName,\n\t\t\t\t\t\t\t\tallowed: true,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t],\n\t\t\t\t\t);\n\t\t\t\t\tthis.updateSessionPreference(\n\t\t\t\t\t\tproviderId,\n\t\t\t\t\t\textensionId,\n\t\t\t\t\t\tsession,\n\t\t\t\t\t);\n\t\t\t\t\tthis.removeAccessRequest(providerId, extensionId);\n\n\t\t\t\t\tresolve(session);\n\t\t\t\t}),\n\t\t\t);\n\n\t\t\tdisposables.add(\n\t\t\t\tquickPick.onDidHide((_) => {\n\t\t\t\t\tif (!quickPick.selectedItems[0]) {\n\t\t\t\t\t\treject(\"User did not consent to account access\");\n\t\t\t\t\t}\n\t\t\t\t\tdisposables.dispose();\n\t\t\t\t}),\n\t\t\t);\n\n\t\t\tquickPick.show();\n\t\t});\n\t}\n\n\tprivate async completeSessionAccessRequest(\n\t\tprovider: IAuthenticationProvider,\n\t\textensionId: string,\n\t\textensionName: string,\n\t\tscopes: string[],\n\t): Promise<void> {\n\t\tconst providerRequests =\n\t\t\tthis._sessionAccessRequestItems.get(provider.id) || {};\n\t\tconst existingRequest = providerRequests[extensionId];\n\t\tif (!existingRequest) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (!provider) {\n\t\t\treturn;\n\t\t}\n\t\tconst possibleSessions = existingRequest.possibleSessions;\n\n\t\tlet session: AuthenticationSession | undefined;\n\t\tif (provider.supportsMultipleAccounts) {\n\t\t\ttry {\n\t\t\t\tsession = await this.selectSession(\n\t\t\t\t\tprovider.id,\n\t\t\t\t\textensionId,\n\t\t\t\t\textensionName,\n\t\t\t\t\tscopes,\n\t\t\t\t\tpossibleSessions,\n\t\t\t\t);\n\t\t\t} catch (_) {\n\t\t\t\t// ignore cancel\n\t\t\t}\n\t\t} else {\n\t\t\tconst approved = await this.showGetSessionPrompt(\n\t\t\t\tprovider,\n\t\t\t\tpossibleSessions[0].account.label,\n\t\t\t\textensionId,\n\t\t\t\textensionName,\n\t\t\t);\n\t\t\tif (approved) {\n\t\t\t\tsession = possibleSessions[0];\n\t\t\t}\n\t\t}\n\n\t\tif (session) {\n\t\t\tthis._authenticationUsageService.addAccountUsage(\n\t\t\t\tprovider.id,\n\t\t\t\tsession.account.label,\n\t\t\t\textensionId,\n\t\t\t\textensionName,\n\t\t\t);\n\t\t}\n\t}\n\n\trequestSessionAccess(\n\t\tproviderId: string,\n\t\textensionId: string,\n\t\textensionName: string,\n\t\tscopes: string[],\n\t\tpossibleSessions: AuthenticationSession[],\n\t): void {\n\t\tconst providerRequests =\n\t\t\tthis._sessionAccessRequestItems.get(providerId) || {};\n\t\tconst hasExistingRequest = providerRequests[extensionId];\n\t\tif (hasExistingRequest) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst provider = this._authenticationService.getProvider(providerId);\n\t\tconst menuItem = MenuRegistry.appendMenuItem(MenuId.AccountsContext, {\n\t\t\tgroup: \"3_accessRequests\",\n\t\t\tcommand: {\n\t\t\t\tid: `${providerId}${extensionId}Access`,\n\t\t\t\ttitle: nls.localize(\n\t\t\t\t\t{\n\t\t\t\t\t\tkey: \"accessRequest\",\n\t\t\t\t\t\tcomment: [\n\t\t\t\t\t\t\t`The placeholder {0} will be replaced with an authentication provider''s label. {1} will be replaced with an extension name. (1) is to indicate that this menu item contributes to a badge count`,\n\t\t\t\t\t\t],\n\t\t\t\t\t},\n\t\t\t\t\t\"Grant access to {0} for {1}... (1)\",\n\t\t\t\t\tprovider.label,\n\t\t\t\t\textensionName,\n\t\t\t\t),\n\t\t\t},\n\t\t});\n\n\t\tconst accessCommand = CommandsRegistry.registerCommand({\n\t\t\tid: `${providerId}${extensionId}Access`,\n\t\t\thandler: async (accessor) => {\n\t\t\t\tthis.completeSessionAccessRequest(\n\t\t\t\t\tprovider,\n\t\t\t\t\textensionId,\n\t\t\t\t\textensionName,\n\t\t\t\t\tscopes,\n\t\t\t\t);\n\t\t\t},\n\t\t});\n\n\t\tproviderRequests[extensionId] = {\n\t\t\tpossibleSessions,\n\t\t\tdisposables: [menuItem, accessCommand],\n\t\t};\n\t\tthis._sessionAccessRequestItems.set(providerId, providerRequests);\n\t\tthis.updateBadgeCount();\n\t}\n\n\tasync requestNewSession(\n\t\tproviderId: string,\n\t\tscopes: string[],\n\t\textensionId: string,\n\t\textensionName: string,\n\t): Promise<void> {\n\t\tif (\n\t\t\t!this._authenticationService.isAuthenticationProviderRegistered(\n\t\t\t\tproviderId,\n\t\t\t)\n\t\t) {\n\t\t\t// Activate has already been called for the authentication provider, but it cannot block on registering itself\n\t\t\t// since this is sync and returns a disposable. So, wait for registration event to fire that indicates the\n\t\t\t// provider is now in the map.\n\t\t\tawait new Promise<void>((resolve, _) => {\n\t\t\t\tconst dispose =\n\t\t\t\t\tthis._authenticationService.onDidRegisterAuthenticationProvider(\n\t\t\t\t\t\t(e) => {\n\t\t\t\t\t\t\tif (e.id === providerId) {\n\t\t\t\t\t\t\t\tdispose.dispose();\n\t\t\t\t\t\t\t\tresolve();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t},\n\t\t\t\t\t);\n\t\t\t});\n\t\t}\n\n\t\tlet provider: IAuthenticationProvider;\n\t\ttry {\n\t\t\tprovider = this._authenticationService.getProvider(providerId);\n\t\t} catch (_e) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst providerRequests = this._signInRequestItems.get(providerId);\n\t\tconst scopesList = scopes.join(SCOPESLIST_SEPARATOR);\n\t\tconst extensionHasExistingRequest =\n\t\t\tproviderRequests &&\n\t\t\tproviderRequests[scopesList] &&\n\t\t\tproviderRequests[scopesList].requestingExtensionIds.includes(\n\t\t\t\textensionId,\n\t\t\t);\n\n\t\tif (extensionHasExistingRequest) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Construct a commandId that won't clash with others generated here, nor likely with an extension's command\n\t\tconst commandId = `${providerId}:${extensionId}:signIn${Object.keys(providerRequests || []).length}`;\n\t\tconst menuItem = MenuRegistry.appendMenuItem(MenuId.AccountsContext, {\n\t\t\tgroup: \"2_signInRequests\",\n\t\t\tcommand: {\n\t\t\t\tid: commandId,\n\t\t\t\ttitle: nls.localize(\n\t\t\t\t\t{\n\t\t\t\t\t\tkey: \"signInRequest\",\n\t\t\t\t\t\tcomment: [\n\t\t\t\t\t\t\t`The placeholder {0} will be replaced with an authentication provider's label. {1} will be replaced with an extension name. (1) is to indicate that this menu item contributes to a badge count.`,\n\t\t\t\t\t\t],\n\t\t\t\t\t},\n\t\t\t\t\t\"Sign in with {0} to use {1} (1)\",\n\t\t\t\t\tprovider.label,\n\t\t\t\t\textensionName,\n\t\t\t\t),\n\t\t\t},\n\t\t});\n\n\t\tconst signInCommand = CommandsRegistry.registerCommand({\n\t\t\tid: commandId,\n\t\t\thandler: async (accessor) => {\n\t\t\t\tconst authenticationService = accessor.get(\n\t\t\t\t\tIAuthenticationService,\n\t\t\t\t);\n\t\t\t\tconst session = await authenticationService.createSession(\n\t\t\t\t\tproviderId,\n\t\t\t\t\tscopes,\n\t\t\t\t);\n\n\t\t\t\tthis._authenticationAccessService.updateAllowedExtensions(\n\t\t\t\t\tproviderId,\n\t\t\t\t\tsession.account.label,\n\t\t\t\t\t[{ id: extensionId, name: extensionName, allowed: true }],\n\t\t\t\t);\n\t\t\t\tthis.updateSessionPreference(providerId, extensionId, session);\n\t\t\t},\n\t\t});\n\n\t\tif (providerRequests) {\n\t\t\tconst existingRequest = providerRequests[scopesList] || {\n\t\t\t\tdisposables: [],\n\t\t\t\trequestingExtensionIds: [],\n\t\t\t};\n\n\t\t\tproviderRequests[scopesList] = {\n\t\t\t\tdisposables: [\n\t\t\t\t\t...existingRequest.disposables,\n\t\t\t\t\tmenuItem,\n\t\t\t\t\tsignInCommand,\n\t\t\t\t],\n\t\t\t\trequestingExtensionIds: [\n\t\t\t\t\t...existingRequest.requestingExtensionIds,\n\t\t\t\t\textensionId,\n\t\t\t\t],\n\t\t\t};\n\t\t\tthis._signInRequestItems.set(providerId, providerRequests);\n\t\t} else {\n\t\t\tthis._signInRequestItems.set(providerId, {\n\t\t\t\t[scopesList]: {\n\t\t\t\t\tdisposables: [menuItem, signInCommand],\n\t\t\t\t\trequestingExtensionIds: [extensionId],\n\t\t\t\t},\n\t\t\t});\n\t\t}\n\n\t\tthis.updateBadgeCount();\n\t}\n}\n\nregisterSingleton(\n\tIAuthenticationExtensionsService,\n\tAuthenticationExtensionsService,\n\tInstantiationType.Delayed,\n);\n"],
  "mappings": "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",
  "names": ["SessionPromptChoice", "dispose"]
}
