{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/authentication/browser/authenticationAccessService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Emitter, Event } from '../../../../base/common/event.js';\nimport { Disposable } from '../../../../base/common/lifecycle.js';\nimport { InstantiationType, registerSingleton } from '../../../../platform/instantiation/common/extensions.js';\nimport { createDecorator } from '../../../../platform/instantiation/common/instantiation.js';\nimport { IProductService } from '../../../../platform/product/common/productService.js';\nimport { IStorageService, StorageScope, StorageTarget } from '../../../../platform/storage/common/storage.js';\nimport { AllowedExtension } from '../common/authentication.js';\n\nexport const IAuthenticationAccessService = createDecorator<IAuthenticationAccessService>('IAuthenticationAccessService');\nexport interface IAuthenticationAccessService {\n\treadonly _serviceBrand: undefined;\n\n\treadonly onDidChangeExtensionSessionAccess: Event<{ providerId: string; accountName: string }>;\n\n\t/**\n\t * Check extension access to an account\n\t * @param providerId The id of the authentication provider\n\t * @param accountName The account name that access is checked for\n\t * @param extensionId The id of the extension requesting access\n\t * @returns Returns true or false if the user has opted to permanently grant or disallow access, and undefined\n\t * if they haven't made a choice yet\n\t */\n\tisAccessAllowed(providerId: string, accountName: string, extensionId: string): boolean | undefined;\n\treadAllowedExtensions(providerId: string, accountName: string): AllowedExtension[];\n\tupdateAllowedExtensions(providerId: string, accountName: string, extensions: AllowedExtension[]): void;\n\tremoveAllowedExtensions(providerId: string, accountName: string): void;\n}\n\n// TODO@TylerLeonhardt: Move this class to MainThreadAuthentication\nexport class AuthenticationAccessService extends Disposable implements IAuthenticationAccessService {\n\t_serviceBrand: undefined;\n\n\tprivate _onDidChangeExtensionSessionAccess: Emitter<{ providerId: string; accountName: string }> = this._register(new Emitter<{ providerId: string; accountName: string }>());\n\treadonly onDidChangeExtensionSessionAccess: Event<{ providerId: string; accountName: string }> = this._onDidChangeExtensionSessionAccess.event;\n\n\tconstructor(\n\t\t@IStorageService private readonly _storageService: IStorageService,\n\t\t@IProductService private readonly _productService: IProductService\n\t) {\n\t\tsuper();\n\t}\n\n\tisAccessAllowed(providerId: string, accountName: string, extensionId: string): boolean | undefined {\n\t\tconst trustedExtensionAuthAccess = this._productService.trustedExtensionAuthAccess;\n\t\tif (Array.isArray(trustedExtensionAuthAccess)) {\n\t\t\tif (trustedExtensionAuthAccess.includes(extensionId)) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t} else if (trustedExtensionAuthAccess?.[providerId]?.includes(extensionId)) {\n\t\t\treturn true;\n\t\t}\n\n\t\tconst allowList = this.readAllowedExtensions(providerId, accountName);\n\t\tconst extensionData = allowList.find(extension => extension.id === extensionId);\n\t\tif (!extensionData) {\n\t\t\treturn undefined;\n\t\t}\n\t\t// This property didn't exist on this data previously, inclusion in the list at all indicates allowance\n\t\treturn extensionData.allowed !== undefined\n\t\t\t? extensionData.allowed\n\t\t\t: true;\n\t}\n\n\treadAllowedExtensions(providerId: string, accountName: string): AllowedExtension[] {\n\t\tlet trustedExtensions: AllowedExtension[] = [];\n\t\ttry {\n\t\t\tconst trustedExtensionSrc = this._storageService.get(`${providerId}-${accountName}`, StorageScope.APPLICATION);\n\t\t\tif (trustedExtensionSrc) {\n\t\t\t\ttrustedExtensions = JSON.parse(trustedExtensionSrc);\n\t\t\t}\n\t\t} catch (err) { }\n\n\t\treturn trustedExtensions;\n\t}\n\n\tupdateAllowedExtensions(providerId: string, accountName: string, extensions: AllowedExtension[]): void {\n\t\tconst allowList = this.readAllowedExtensions(providerId, accountName);\n\t\tfor (const extension of extensions) {\n\t\t\tconst index = allowList.findIndex(e => e.id === extension.id);\n\t\t\tif (index === -1) {\n\t\t\t\tallowList.push(extension);\n\t\t\t} else {\n\t\t\t\tallowList[index].allowed = extension.allowed;\n\t\t\t}\n\t\t}\n\t\tthis._storageService.store(`${providerId}-${accountName}`, JSON.stringify(allowList), StorageScope.APPLICATION, StorageTarget.USER);\n\t\tthis._onDidChangeExtensionSessionAccess.fire({ providerId, accountName });\n\t}\n\n\tremoveAllowedExtensions(providerId: string, accountName: string): void {\n\t\tthis._storageService.remove(`${providerId}-${accountName}`, StorageScope.APPLICATION);\n\t\tthis._onDidChangeExtensionSessionAccess.fire({ providerId, accountName });\n\t}\n}\n\nregisterSingleton(IAuthenticationAccessService, AuthenticationAccessService, InstantiationType.Delayed);\n"],
  "mappings": ";;;;;;;;;;;;AAKA,SAAS,SAAS,aAAa;AAC/B,SAAS,kBAAkB;AAC3B,SAAS,mBAAmB,yBAAyB;AACrD,SAAS,uBAAuB;AAChC,SAAS,uBAAuB;AAChC,SAAS,iBAAiB,cAAc,qBAAqB;AAC7D,SAAS,wBAAwB;AAE1B,MAAM,+BAA+B,gBAA8C,8BAA8B;AAqBjH,IAAM,8BAAN,cAA0C,WAAmD;AAAA,EAMnG,YACmC,iBACA,iBACjC;AACD,UAAM;AAH4B;AACA;AAAA,EAGnC;AAAA,EA7CD,OAkCoG;AAAA;AAAA;AAAA,EACnG;AAAA,EAEQ,qCAA2F,KAAK,UAAU,IAAI,QAAqD,CAAC;AAAA,EACnK,oCAAwF,KAAK,mCAAmC;AAAA,EASzI,gBAAgB,YAAoB,aAAqB,aAA0C;AAClG,UAAM,6BAA6B,KAAK,gBAAgB;AACxD,QAAI,MAAM,QAAQ,0BAA0B,GAAG;AAC9C,UAAI,2BAA2B,SAAS,WAAW,GAAG;AACrD,eAAO;AAAA,MACR;AAAA,IACD,WAAW,6BAA6B,UAAU,GAAG,SAAS,WAAW,GAAG;AAC3E,aAAO;AAAA,IACR;AAEA,UAAM,YAAY,KAAK,sBAAsB,YAAY,WAAW;AACpE,UAAM,gBAAgB,UAAU,KAAK,eAAa,UAAU,OAAO,WAAW;AAC9E,QAAI,CAAC,eAAe;AACnB,aAAO;AAAA,IACR;AAEA,WAAO,cAAc,YAAY,SAC9B,cAAc,UACd;AAAA,EACJ;AAAA,EAEA,sBAAsB,YAAoB,aAAyC;AAClF,QAAI,oBAAwC,CAAC;AAC7C,QAAI;AACH,YAAM,sBAAsB,KAAK,gBAAgB,IAAI,GAAG,UAAU,IAAI,WAAW,IAAI,aAAa,WAAW;AAC7G,UAAI,qBAAqB;AACxB,4BAAoB,KAAK,MAAM,mBAAmB;AAAA,MACnD;AAAA,IACD,SAAS,KAAK;AAAA,IAAE;AAEhB,WAAO;AAAA,EACR;AAAA,EAEA,wBAAwB,YAAoB,aAAqB,YAAsC;AACtG,UAAM,YAAY,KAAK,sBAAsB,YAAY,WAAW;AACpE,eAAW,aAAa,YAAY;AACnC,YAAM,QAAQ,UAAU,UAAU,OAAK,EAAE,OAAO,UAAU,EAAE;AAC5D,UAAI,UAAU,IAAI;AACjB,kBAAU,KAAK,SAAS;AAAA,MACzB,OAAO;AACN,kBAAU,KAAK,EAAE,UAAU,UAAU;AAAA,MACtC;AAAA,IACD;AACA,SAAK,gBAAgB,MAAM,GAAG,UAAU,IAAI,WAAW,IAAI,KAAK,UAAU,SAAS,GAAG,aAAa,aAAa,cAAc,IAAI;AAClI,SAAK,mCAAmC,KAAK,EAAE,YAAY,YAAY,CAAC;AAAA,EACzE;AAAA,EAEA,wBAAwB,YAAoB,aAA2B;AACtE,SAAK,gBAAgB,OAAO,GAAG,UAAU,IAAI,WAAW,IAAI,aAAa,WAAW;AACpF,SAAK,mCAAmC,KAAK,EAAE,YAAY,YAAY,CAAC;AAAA,EACzE;AACD;AAhEa,8BAAN;AAAA,EAOJ;AAAA,EACA;AAAA,GARU;AAkEb,kBAAkB,8BAA8B,6BAA6B,kBAAkB,OAAO;",
  "names": []
}
