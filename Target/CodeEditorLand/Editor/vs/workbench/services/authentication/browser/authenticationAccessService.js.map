{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/authentication/browser/authenticationAccessService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Emitter, type Event } from \"../../../../base/common/event.js\";\nimport { Disposable } from \"../../../../base/common/lifecycle.js\";\nimport {\n\tInstantiationType,\n\tregisterSingleton,\n} from \"../../../../platform/instantiation/common/extensions.js\";\nimport { createDecorator } from \"../../../../platform/instantiation/common/instantiation.js\";\nimport { IProductService } from \"../../../../platform/product/common/productService.js\";\nimport {\n\tIStorageService,\n\tStorageScope,\n\tStorageTarget,\n} from \"../../../../platform/storage/common/storage.js\";\nimport type { AllowedExtension } from \"../common/authentication.js\";\n\nexport const IAuthenticationAccessService =\n\tcreateDecorator<IAuthenticationAccessService>(\n\t\t\"IAuthenticationAccessService\",\n\t);\nexport interface IAuthenticationAccessService {\n\treadonly _serviceBrand: undefined;\n\n\treadonly onDidChangeExtensionSessionAccess: Event<{\n\t\tproviderId: string;\n\t\taccountName: string;\n\t}>;\n\n\t/**\n\t * Check extension access to an account\n\t * @param providerId The id of the authentication provider\n\t * @param accountName The account name that access is checked for\n\t * @param extensionId The id of the extension requesting access\n\t * @returns Returns true or false if the user has opted to permanently grant or disallow access, and undefined\n\t * if they haven't made a choice yet\n\t */\n\tisAccessAllowed(\n\t\tproviderId: string,\n\t\taccountName: string,\n\t\textensionId: string,\n\t): boolean | undefined;\n\treadAllowedExtensions(\n\t\tproviderId: string,\n\t\taccountName: string,\n\t): AllowedExtension[];\n\tupdateAllowedExtensions(\n\t\tproviderId: string,\n\t\taccountName: string,\n\t\textensions: AllowedExtension[],\n\t): void;\n\tremoveAllowedExtensions(providerId: string, accountName: string): void;\n}\n\n// TODO@TylerLeonhardt: Move this class to MainThreadAuthentication\nexport class AuthenticationAccessService\n\textends Disposable\n\timplements IAuthenticationAccessService\n{\n\t_serviceBrand: undefined;\n\n\tprivate _onDidChangeExtensionSessionAccess: Emitter<{\n\t\tproviderId: string;\n\t\taccountName: string;\n\t}> = this._register(\n\t\tnew Emitter<{ providerId: string; accountName: string }>(),\n\t);\n\treadonly onDidChangeExtensionSessionAccess: Event<{\n\t\tproviderId: string;\n\t\taccountName: string;\n\t}> = this._onDidChangeExtensionSessionAccess.event;\n\n\tconstructor(\n\t\t@IStorageService private readonly _storageService: IStorageService,\n\t\t@IProductService private readonly _productService: IProductService\n\t) {\n\t\tsuper();\n\t}\n\n\tisAccessAllowed(\n\t\tproviderId: string,\n\t\taccountName: string,\n\t\textensionId: string,\n\t): boolean | undefined {\n\t\tconst trustedExtensionAuthAccess =\n\t\t\tthis._productService.trustedExtensionAuthAccess;\n\t\tif (Array.isArray(trustedExtensionAuthAccess)) {\n\t\t\tif (trustedExtensionAuthAccess.includes(extensionId)) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t} else if (\n\t\t\ttrustedExtensionAuthAccess?.[providerId]?.includes(extensionId)\n\t\t) {\n\t\t\treturn true;\n\t\t}\n\n\t\tconst allowList = this.readAllowedExtensions(providerId, accountName);\n\t\tconst extensionData = allowList.find(\n\t\t\t(extension) => extension.id === extensionId,\n\t\t);\n\t\tif (!extensionData) {\n\t\t\treturn undefined;\n\t\t}\n\t\t// This property didn't exist on this data previously, inclusion in the list at all indicates allowance\n\t\treturn extensionData.allowed !== undefined\n\t\t\t? extensionData.allowed\n\t\t\t: true;\n\t}\n\n\treadAllowedExtensions(\n\t\tproviderId: string,\n\t\taccountName: string,\n\t): AllowedExtension[] {\n\t\tlet trustedExtensions: AllowedExtension[] = [];\n\t\ttry {\n\t\t\tconst trustedExtensionSrc = this._storageService.get(\n\t\t\t\t`${providerId}-${accountName}`,\n\t\t\t\tStorageScope.APPLICATION,\n\t\t\t);\n\t\t\tif (trustedExtensionSrc) {\n\t\t\t\ttrustedExtensions = JSON.parse(trustedExtensionSrc);\n\t\t\t}\n\t\t} catch (err) {}\n\n\t\treturn trustedExtensions;\n\t}\n\n\tupdateAllowedExtensions(\n\t\tproviderId: string,\n\t\taccountName: string,\n\t\textensions: AllowedExtension[],\n\t): void {\n\t\tconst allowList = this.readAllowedExtensions(providerId, accountName);\n\t\tfor (const extension of extensions) {\n\t\t\tconst index = allowList.findIndex((e) => e.id === extension.id);\n\t\t\tif (index === -1) {\n\t\t\t\tallowList.push(extension);\n\t\t\t} else {\n\t\t\t\tallowList[index].allowed = extension.allowed;\n\t\t\t}\n\t\t}\n\t\tthis._storageService.store(\n\t\t\t`${providerId}-${accountName}`,\n\t\t\tJSON.stringify(allowList),\n\t\t\tStorageScope.APPLICATION,\n\t\t\tStorageTarget.USER,\n\t\t);\n\t\tthis._onDidChangeExtensionSessionAccess.fire({\n\t\t\tproviderId,\n\t\t\taccountName,\n\t\t});\n\t}\n\n\tremoveAllowedExtensions(providerId: string, accountName: string): void {\n\t\tthis._storageService.remove(\n\t\t\t`${providerId}-${accountName}`,\n\t\t\tStorageScope.APPLICATION,\n\t\t);\n\t\tthis._onDidChangeExtensionSessionAccess.fire({\n\t\t\tproviderId,\n\t\t\taccountName,\n\t\t});\n\t}\n}\n\nregisterSingleton(\n\tIAuthenticationAccessService,\n\tAuthenticationAccessService,\n\tInstantiationType.Delayed,\n);\n"],
  "mappings": ";;;;;;;;;;;;AAKA,SAAS,eAA2B;AACpC,SAAS,kBAAkB;AAC3B;AAAA,EACC;AAAA,EACA;AAAA,OACM;AACP,SAAS,uBAAuB;AAChC,SAAS,uBAAuB;AAChC;AAAA,EACC;AAAA,EACA;AAAA,EACA;AAAA,OACM;AAGA,MAAM,+BACZ;AAAA,EACC;AACD;AAmCM,IAAM,8BAAN,cACE,WAET;AAAA,EAcC,YACmC,iBACA,iBACjC;AACD,UAAM;AAH4B;AACA;AAAA,EAGnC;AAAA,EAhFD,OA6DA;AAAA;AAAA;AAAA,EACC;AAAA,EAEQ,qCAGH,KAAK;AAAA,IACT,IAAI,QAAqD;AAAA,EAC1D;AAAA,EACS,oCAGJ,KAAK,mCAAmC;AAAA,EAS7C,gBACC,YACA,aACA,aACsB;AACtB,UAAM,6BACL,KAAK,gBAAgB;AACtB,QAAI,MAAM,QAAQ,0BAA0B,GAAG;AAC9C,UAAI,2BAA2B,SAAS,WAAW,GAAG;AACrD,eAAO;AAAA,MACR;AAAA,IACD,WACC,6BAA6B,UAAU,GAAG,SAAS,WAAW,GAC7D;AACD,aAAO;AAAA,IACR;AAEA,UAAM,YAAY,KAAK,sBAAsB,YAAY,WAAW;AACpE,UAAM,gBAAgB,UAAU;AAAA,MAC/B,CAAC,cAAc,UAAU,OAAO;AAAA,IACjC;AACA,QAAI,CAAC,eAAe;AACnB,aAAO;AAAA,IACR;AAEA,WAAO,cAAc,YAAY,SAC9B,cAAc,UACd;AAAA,EACJ;AAAA,EAEA,sBACC,YACA,aACqB;AACrB,QAAI,oBAAwC,CAAC;AAC7C,QAAI;AACH,YAAM,sBAAsB,KAAK,gBAAgB;AAAA,QAChD,GAAG,UAAU,IAAI,WAAW;AAAA,QAC5B,aAAa;AAAA,MACd;AACA,UAAI,qBAAqB;AACxB,4BAAoB,KAAK,MAAM,mBAAmB;AAAA,MACnD;AAAA,IACD,SAAS,KAAK;AAAA,IAAC;AAEf,WAAO;AAAA,EACR;AAAA,EAEA,wBACC,YACA,aACA,YACO;AACP,UAAM,YAAY,KAAK,sBAAsB,YAAY,WAAW;AACpE,eAAW,aAAa,YAAY;AACnC,YAAM,QAAQ,UAAU,UAAU,CAAC,MAAM,EAAE,OAAO,UAAU,EAAE;AAC9D,UAAI,UAAU,IAAI;AACjB,kBAAU,KAAK,SAAS;AAAA,MACzB,OAAO;AACN,kBAAU,KAAK,EAAE,UAAU,UAAU;AAAA,MACtC;AAAA,IACD;AACA,SAAK,gBAAgB;AAAA,MACpB,GAAG,UAAU,IAAI,WAAW;AAAA,MAC5B,KAAK,UAAU,SAAS;AAAA,MACxB,aAAa;AAAA,MACb,cAAc;AAAA,IACf;AACA,SAAK,mCAAmC,KAAK;AAAA,MAC5C;AAAA,MACA;AAAA,IACD,CAAC;AAAA,EACF;AAAA,EAEA,wBAAwB,YAAoB,aAA2B;AACtE,SAAK,gBAAgB;AAAA,MACpB,GAAG,UAAU,IAAI,WAAW;AAAA,MAC5B,aAAa;AAAA,IACd;AACA,SAAK,mCAAmC,KAAK;AAAA,MAC5C;AAAA,MACA;AAAA,IACD,CAAC;AAAA,EACF;AACD;AA5Ga,8BAAN;AAAA,EAkBJ;AAAA,EACA;AAAA,GAnBU;AA8Gb;AAAA,EACC;AAAA,EACA;AAAA,EACA,kBAAkB;AACnB;",
  "names": []
}
