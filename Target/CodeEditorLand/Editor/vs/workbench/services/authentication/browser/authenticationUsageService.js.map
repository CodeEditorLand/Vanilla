{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/authentication/browser/authenticationUsageService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { InstantiationType, registerSingleton } from '../../../../platform/instantiation/common/extensions.js';\nimport { createDecorator } from '../../../../platform/instantiation/common/instantiation.js';\nimport { IStorageService, StorageScope, StorageTarget } from '../../../../platform/storage/common/storage.js';\n\nexport interface IAccountUsage {\n\textensionId: string;\n\textensionName: string;\n\tlastUsed: number;\n}\n\nexport const IAuthenticationUsageService = createDecorator<IAuthenticationUsageService>('IAuthenticationUsageService');\nexport interface IAuthenticationUsageService {\n\treadonly _serviceBrand: undefined;\n\treadAccountUsages(providerId: string, accountName: string,): IAccountUsage[];\n\tremoveAccountUsage(providerId: string, accountName: string): void;\n\taddAccountUsage(providerId: string, accountName: string, extensionId: string, extensionName: string): void;\n}\n\nexport class AuthenticationUsageService implements IAuthenticationUsageService {\n\t_serviceBrand: undefined;\n\n\tconstructor(@IStorageService private readonly _storageService: IStorageService) { }\n\n\treadAccountUsages(providerId: string, accountName: string): IAccountUsage[] {\n\t\tconst accountKey = `${providerId}-${accountName}-usages`;\n\t\tconst storedUsages = this._storageService.get(accountKey, StorageScope.APPLICATION);\n\t\tlet usages: IAccountUsage[] = [];\n\t\tif (storedUsages) {\n\t\t\ttry {\n\t\t\t\tusages = JSON.parse(storedUsages);\n\t\t\t} catch (e) {\n\t\t\t\t// ignore\n\t\t\t}\n\t\t}\n\n\t\treturn usages;\n\t}\n\tremoveAccountUsage(providerId: string, accountName: string): void {\n\t\tconst accountKey = `${providerId}-${accountName}-usages`;\n\t\tthis._storageService.remove(accountKey, StorageScope.APPLICATION);\n\t}\n\taddAccountUsage(providerId: string, accountName: string, extensionId: string, extensionName: string): void {\n\t\tconst accountKey = `${providerId}-${accountName}-usages`;\n\t\tconst usages = this.readAccountUsages(providerId, accountName);\n\n\t\tconst existingUsageIndex = usages.findIndex(usage => usage.extensionId === extensionId);\n\t\tif (existingUsageIndex > -1) {\n\t\t\tusages.splice(existingUsageIndex, 1, {\n\t\t\t\textensionId,\n\t\t\t\textensionName,\n\t\t\t\tlastUsed: Date.now()\n\t\t\t});\n\t\t} else {\n\t\t\tusages.push({\n\t\t\t\textensionId,\n\t\t\t\textensionName,\n\t\t\t\tlastUsed: Date.now()\n\t\t\t});\n\t\t}\n\n\t\tthis._storageService.store(accountKey, JSON.stringify(usages), StorageScope.APPLICATION, StorageTarget.MACHINE);\n\t}\n}\n\nregisterSingleton(IAuthenticationUsageService, AuthenticationUsageService, InstantiationType.Delayed);\n"],
  "mappings": ";;;;;;;;;;;;AAKA,SAAS,mBAAmB,yBAAyB;AACrD,SAAS,uBAAuB;AAChC,SAAS,iBAAiB,cAAc,qBAAqB;AAQtD,MAAM,8BAA8B,gBAA6C,6BAA6B;AAQ9G,IAAM,6BAAN,MAAwE;AAAA,EAG9E,YAA8C,iBAAkC;AAAlC;AAAA,EAAoC;AAAA,EA1BnF,OAuB+E;AAAA;AAAA;AAAA,EAC9E;AAAA,EAIA,kBAAkB,YAAoB,aAAsC;AAC3E,UAAM,aAAa,GAAG,UAAU,IAAI,WAAW;AAC/C,UAAM,eAAe,KAAK,gBAAgB,IAAI,YAAY,aAAa,WAAW;AAClF,QAAI,SAA0B,CAAC;AAC/B,QAAI,cAAc;AACjB,UAAI;AACH,iBAAS,KAAK,MAAM,YAAY;AAAA,MACjC,SAAS,GAAG;AAAA,MAEZ;AAAA,IACD;AAEA,WAAO;AAAA,EACR;AAAA,EACA,mBAAmB,YAAoB,aAA2B;AACjE,UAAM,aAAa,GAAG,UAAU,IAAI,WAAW;AAC/C,SAAK,gBAAgB,OAAO,YAAY,aAAa,WAAW;AAAA,EACjE;AAAA,EACA,gBAAgB,YAAoB,aAAqB,aAAqB,eAA6B;AAC1G,UAAM,aAAa,GAAG,UAAU,IAAI,WAAW;AAC/C,UAAM,SAAS,KAAK,kBAAkB,YAAY,WAAW;AAE7D,UAAM,qBAAqB,OAAO,UAAU,WAAS,MAAM,gBAAgB,WAAW;AACtF,QAAI,qBAAqB,IAAI;AAC5B,aAAO,OAAO,oBAAoB,GAAG;AAAA,QACpC;AAAA,QACA;AAAA,QACA,UAAU,KAAK,IAAI;AAAA,MACpB,CAAC;AAAA,IACF,OAAO;AACN,aAAO,KAAK;AAAA,QACX;AAAA,QACA;AAAA,QACA,UAAU,KAAK,IAAI;AAAA,MACpB,CAAC;AAAA,IACF;AAEA,SAAK,gBAAgB,MAAM,YAAY,KAAK,UAAU,MAAM,GAAG,aAAa,aAAa,cAAc,OAAO;AAAA,EAC/G;AACD;AA5Ca,6BAAN;AAAA,EAGO;AAAA,GAHD;AA8Cb,kBAAkB,6BAA6B,4BAA4B,kBAAkB,OAAO;",
  "names": []
}
