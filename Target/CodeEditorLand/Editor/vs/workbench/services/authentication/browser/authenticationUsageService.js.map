{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/authentication/browser/authenticationUsageService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport {\n\tInstantiationType,\n\tregisterSingleton,\n} from \"../../../../platform/instantiation/common/extensions.js\";\nimport { createDecorator } from \"../../../../platform/instantiation/common/instantiation.js\";\nimport {\n\tIStorageService,\n\tStorageScope,\n\tStorageTarget,\n} from \"../../../../platform/storage/common/storage.js\";\n\nexport interface IAccountUsage {\n\textensionId: string;\n\textensionName: string;\n\tlastUsed: number;\n}\n\nexport const IAuthenticationUsageService =\n\tcreateDecorator<IAuthenticationUsageService>(\"IAuthenticationUsageService\");\nexport interface IAuthenticationUsageService {\n\treadonly _serviceBrand: undefined;\n\treadAccountUsages(providerId: string, accountName: string): IAccountUsage[];\n\tremoveAccountUsage(providerId: string, accountName: string): void;\n\taddAccountUsage(\n\t\tproviderId: string,\n\t\taccountName: string,\n\t\textensionId: string,\n\t\textensionName: string,\n\t): void;\n}\n\nexport class AuthenticationUsageService implements IAuthenticationUsageService {\n\t_serviceBrand: undefined;\n\n\tconstructor(\n\t\t@IStorageService private readonly _storageService: IStorageService,\n\t) {}\n\n\treadAccountUsages(\n\t\tproviderId: string,\n\t\taccountName: string,\n\t): IAccountUsage[] {\n\t\tconst accountKey = `${providerId}-${accountName}-usages`;\n\t\tconst storedUsages = this._storageService.get(\n\t\t\taccountKey,\n\t\t\tStorageScope.APPLICATION,\n\t\t);\n\t\tlet usages: IAccountUsage[] = [];\n\t\tif (storedUsages) {\n\t\t\ttry {\n\t\t\t\tusages = JSON.parse(storedUsages);\n\t\t\t} catch (e) {\n\t\t\t\t// ignore\n\t\t\t}\n\t\t}\n\n\t\treturn usages;\n\t}\n\tremoveAccountUsage(providerId: string, accountName: string): void {\n\t\tconst accountKey = `${providerId}-${accountName}-usages`;\n\t\tthis._storageService.remove(accountKey, StorageScope.APPLICATION);\n\t}\n\taddAccountUsage(\n\t\tproviderId: string,\n\t\taccountName: string,\n\t\textensionId: string,\n\t\textensionName: string,\n\t): void {\n\t\tconst accountKey = `${providerId}-${accountName}-usages`;\n\t\tconst usages = this.readAccountUsages(providerId, accountName);\n\n\t\tconst existingUsageIndex = usages.findIndex(\n\t\t\t(usage) => usage.extensionId === extensionId,\n\t\t);\n\t\tif (existingUsageIndex > -1) {\n\t\t\tusages.splice(existingUsageIndex, 1, {\n\t\t\t\textensionId,\n\t\t\t\textensionName,\n\t\t\t\tlastUsed: Date.now(),\n\t\t\t});\n\t\t} else {\n\t\t\tusages.push({\n\t\t\t\textensionId,\n\t\t\t\textensionName,\n\t\t\t\tlastUsed: Date.now(),\n\t\t\t});\n\t\t}\n\n\t\tthis._storageService.store(\n\t\t\taccountKey,\n\t\t\tJSON.stringify(usages),\n\t\t\tStorageScope.APPLICATION,\n\t\t\tStorageTarget.MACHINE,\n\t\t);\n\t}\n}\n\nregisterSingleton(\n\tIAuthenticationUsageService,\n\tAuthenticationUsageService,\n\tInstantiationType.Delayed,\n);\n"],
  "mappings": ";;;;;;;;;;;;AAKA;AAAA,EACC;AAAA,EACA;AAAA,OACM;AACP,SAAS,uBAAuB;AAChC;AAAA,EACC;AAAA,EACA;AAAA,EACA;AAAA,OACM;AAQA,MAAM,8BACZ,gBAA6C,6BAA6B;AAapE,IAAM,6BAAN,MAAwE;AAAA,EAG9E,YACmC,iBACjC;AADiC;AAAA,EAChC;AAAA,EAzCJ,OAoC+E;AAAA;AAAA;AAAA,EAC9E;AAAA,EAMA,kBACC,YACA,aACkB;AAClB,UAAM,aAAa,GAAG,UAAU,IAAI,WAAW;AAC/C,UAAM,eAAe,KAAK,gBAAgB;AAAA,MACzC;AAAA,MACA,aAAa;AAAA,IACd;AACA,QAAI,SAA0B,CAAC;AAC/B,QAAI,cAAc;AACjB,UAAI;AACH,iBAAS,KAAK,MAAM,YAAY;AAAA,MACjC,SAAS,GAAG;AAAA,MAEZ;AAAA,IACD;AAEA,WAAO;AAAA,EACR;AAAA,EACA,mBAAmB,YAAoB,aAA2B;AACjE,UAAM,aAAa,GAAG,UAAU,IAAI,WAAW;AAC/C,SAAK,gBAAgB,OAAO,YAAY,aAAa,WAAW;AAAA,EACjE;AAAA,EACA,gBACC,YACA,aACA,aACA,eACO;AACP,UAAM,aAAa,GAAG,UAAU,IAAI,WAAW;AAC/C,UAAM,SAAS,KAAK,kBAAkB,YAAY,WAAW;AAE7D,UAAM,qBAAqB,OAAO;AAAA,MACjC,CAAC,UAAU,MAAM,gBAAgB;AAAA,IAClC;AACA,QAAI,qBAAqB,IAAI;AAC5B,aAAO,OAAO,oBAAoB,GAAG;AAAA,QACpC;AAAA,QACA;AAAA,QACA,UAAU,KAAK,IAAI;AAAA,MACpB,CAAC;AAAA,IACF,OAAO;AACN,aAAO,KAAK;AAAA,QACX;AAAA,QACA;AAAA,QACA,UAAU,KAAK,IAAI;AAAA,MACpB,CAAC;AAAA,IACF;AAEA,SAAK,gBAAgB;AAAA,MACpB;AAAA,MACA,KAAK,UAAU,MAAM;AAAA,MACrB,aAAa;AAAA,MACb,cAAc;AAAA,IACf;AAAA,EACD;AACD;AAhEa,6BAAN;AAAA,EAIJ;AAAA,GAJU;AAkEb;AAAA,EACC;AAAA,EACA;AAAA,EACA,kBAAkB;AACnB;",
  "names": []
}
