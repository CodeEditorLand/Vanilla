{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/authentication/browser/authenticationService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Emitter, Event } from '../../../../base/common/event.js';\nimport { Disposable, DisposableMap, DisposableStore, IDisposable, isDisposable, toDisposable } from '../../../../base/common/lifecycle.js';\nimport { isFalsyOrWhitespace } from '../../../../base/common/strings.js';\nimport { isString } from '../../../../base/common/types.js';\nimport { localize } from '../../../../nls.js';\nimport { InstantiationType, registerSingleton } from '../../../../platform/instantiation/common/extensions.js';\nimport { IProductService } from '../../../../platform/product/common/productService.js';\nimport { ISecretStorageService } from '../../../../platform/secrets/common/secrets.js';\nimport { IAuthenticationAccessService } from './authenticationAccessService.js';\nimport { AuthenticationProviderInformation, AuthenticationSession, AuthenticationSessionAccount, AuthenticationSessionsChangeEvent, IAuthenticationCreateSessionOptions, IAuthenticationProvider, IAuthenticationService } from '../common/authentication.js';\nimport { IBrowserWorkbenchEnvironmentService } from '../../environment/browser/environmentService.js';\nimport { ActivationKind, IExtensionService } from '../../extensions/common/extensions.js';\n\nexport function getAuthenticationProviderActivationEvent(id: string): string { return `onAuthenticationRequest:${id}`; }\n\n// TODO: pull this out into its own service\nexport type AuthenticationSessionInfo = { readonly id: string; readonly accessToken: string; readonly providerId: string; readonly canSignOut?: boolean };\nexport async function getCurrentAuthenticationSessionInfo(\n\tsecretStorageService: ISecretStorageService,\n\tproductService: IProductService\n): Promise<AuthenticationSessionInfo | undefined> {\n\tconst authenticationSessionValue = await secretStorageService.get(`${productService.urlProtocol}.loginAccount`);\n\tif (authenticationSessionValue) {\n\t\ttry {\n\t\t\tconst authenticationSessionInfo: AuthenticationSessionInfo = JSON.parse(authenticationSessionValue);\n\t\t\tif (authenticationSessionInfo\n\t\t\t\t&& isString(authenticationSessionInfo.id)\n\t\t\t\t&& isString(authenticationSessionInfo.accessToken)\n\t\t\t\t&& isString(authenticationSessionInfo.providerId)\n\t\t\t) {\n\t\t\t\treturn authenticationSessionInfo;\n\t\t\t}\n\t\t} catch (e) {\n\t\t\t// This is a best effort operation.\n\t\t\tconsole.error(`Failed parsing current auth session value: ${e}`);\n\t\t}\n\t}\n\treturn undefined;\n}\n\nexport class AuthenticationService extends Disposable implements IAuthenticationService {\n\tdeclare readonly _serviceBrand: undefined;\n\n\tprivate _onDidRegisterAuthenticationProvider: Emitter<AuthenticationProviderInformation> = this._register(new Emitter<AuthenticationProviderInformation>());\n\treadonly onDidRegisterAuthenticationProvider: Event<AuthenticationProviderInformation> = this._onDidRegisterAuthenticationProvider.event;\n\n\tprivate _onDidUnregisterAuthenticationProvider: Emitter<AuthenticationProviderInformation> = this._register(new Emitter<AuthenticationProviderInformation>());\n\treadonly onDidUnregisterAuthenticationProvider: Event<AuthenticationProviderInformation> = this._onDidUnregisterAuthenticationProvider.event;\n\n\tprivate _onDidChangeSessions: Emitter<{ providerId: string; label: string; event: AuthenticationSessionsChangeEvent }> = this._register(new Emitter<{ providerId: string; label: string; event: AuthenticationSessionsChangeEvent }>());\n\treadonly onDidChangeSessions: Event<{ providerId: string; label: string; event: AuthenticationSessionsChangeEvent }> = this._onDidChangeSessions.event;\n\n\tprivate _onDidChangeDeclaredProviders: Emitter<void> = this._register(new Emitter<void>());\n\treadonly onDidChangeDeclaredProviders: Event<void> = this._onDidChangeDeclaredProviders.event;\n\n\tprivate _authenticationProviders: Map<string, IAuthenticationProvider> = new Map<string, IAuthenticationProvider>();\n\tprivate _authenticationProviderDisposables: DisposableMap<string, IDisposable> = this._register(new DisposableMap<string, IDisposable>());\n\n\tconstructor(\n\t\t@IExtensionService private readonly _extensionService: IExtensionService,\n\t\t@IAuthenticationAccessService authenticationAccessService: IAuthenticationAccessService,\n\t\t@IBrowserWorkbenchEnvironmentService private readonly _environmentService: IBrowserWorkbenchEnvironmentService\n\t) {\n\t\tsuper();\n\n\t\tthis._register(authenticationAccessService.onDidChangeExtensionSessionAccess(e => {\n\t\t\t// The access has changed, not the actual session itself but extensions depend on this event firing\n\t\t\t// when they have gained access to an account so this fires that event.\n\t\t\tthis._onDidChangeSessions.fire({\n\t\t\t\tproviderId: e.providerId,\n\t\t\t\tlabel: e.accountName,\n\t\t\t\tevent: {\n\t\t\t\t\tadded: [],\n\t\t\t\t\tchanged: [],\n\t\t\t\t\tremoved: []\n\t\t\t\t}\n\t\t\t});\n\t\t}));\n\n\t\tthis._registerEnvContributedAuthenticationProviders();\n\t}\n\n\tprivate _declaredProviders: AuthenticationProviderInformation[] = [];\n\tget declaredProviders(): AuthenticationProviderInformation[] {\n\t\treturn this._declaredProviders;\n\t}\n\n\tprivate _registerEnvContributedAuthenticationProviders(): void {\n\t\tif (!this._environmentService.options?.authenticationProviders?.length) {\n\t\t\treturn;\n\t\t}\n\t\tfor (const provider of this._environmentService.options.authenticationProviders) {\n\t\t\tthis.registerAuthenticationProvider(provider.id, provider);\n\t\t}\n\t}\n\n\tregisterDeclaredAuthenticationProvider(provider: AuthenticationProviderInformation): void {\n\t\tif (isFalsyOrWhitespace(provider.id)) {\n\t\t\tthrow new Error(localize('authentication.missingId', 'An authentication contribution must specify an id.'));\n\t\t}\n\t\tif (isFalsyOrWhitespace(provider.label)) {\n\t\t\tthrow new Error(localize('authentication.missingLabel', 'An authentication contribution must specify a label.'));\n\t\t}\n\t\tif (this.declaredProviders.some(p => p.id === provider.id)) {\n\t\t\tthrow new Error(localize('authentication.idConflict', \"This authentication id '{0}' has already been registered\", provider.id));\n\t\t}\n\t\tthis._declaredProviders.push(provider);\n\t\tthis._onDidChangeDeclaredProviders.fire();\n\t}\n\n\tunregisterDeclaredAuthenticationProvider(id: string): void {\n\t\tconst index = this.declaredProviders.findIndex(provider => provider.id === id);\n\t\tif (index > -1) {\n\t\t\tthis.declaredProviders.splice(index, 1);\n\t\t}\n\t\tthis._onDidChangeDeclaredProviders.fire();\n\t}\n\n\tisAuthenticationProviderRegistered(id: string): boolean {\n\t\treturn this._authenticationProviders.has(id);\n\t}\n\n\tregisterAuthenticationProvider(id: string, authenticationProvider: IAuthenticationProvider): void {\n\t\tthis._authenticationProviders.set(id, authenticationProvider);\n\t\tconst disposableStore = new DisposableStore();\n\t\tdisposableStore.add(authenticationProvider.onDidChangeSessions(e => this._onDidChangeSessions.fire({\n\t\t\tproviderId: id,\n\t\t\tlabel: authenticationProvider.label,\n\t\t\tevent: e\n\t\t})));\n\t\tif (isDisposable(authenticationProvider)) {\n\t\t\tdisposableStore.add(authenticationProvider);\n\t\t}\n\t\tthis._authenticationProviderDisposables.set(id, disposableStore);\n\t\tthis._onDidRegisterAuthenticationProvider.fire({ id, label: authenticationProvider.label });\n\t}\n\n\tunregisterAuthenticationProvider(id: string): void {\n\t\tconst provider = this._authenticationProviders.get(id);\n\t\tif (provider) {\n\t\t\tthis._authenticationProviders.delete(id);\n\t\t\tthis._onDidUnregisterAuthenticationProvider.fire({ id, label: provider.label });\n\t\t}\n\t\tthis._authenticationProviderDisposables.deleteAndDispose(id);\n\t}\n\n\tgetProviderIds(): string[] {\n\t\tconst providerIds: string[] = [];\n\t\tthis._authenticationProviders.forEach(provider => {\n\t\t\tproviderIds.push(provider.id);\n\t\t});\n\t\treturn providerIds;\n\t}\n\n\tgetProvider(id: string): IAuthenticationProvider {\n\t\tif (this._authenticationProviders.has(id)) {\n\t\t\treturn this._authenticationProviders.get(id)!;\n\t\t}\n\t\tthrow new Error(`No authentication provider '${id}' is currently registered.`);\n\t}\n\n\tasync getAccounts(id: string): Promise<ReadonlyArray<AuthenticationSessionAccount>> {\n\t\t// TODO: Cache this\n\t\tconst sessions = await this.getSessions(id);\n\t\tconst accounts = new Array<AuthenticationSessionAccount>();\n\t\tconst seenAccounts = new Set<string>();\n\t\tfor (const session of sessions) {\n\t\t\tif (!seenAccounts.has(session.account.label)) {\n\t\t\t\tseenAccounts.add(session.account.label);\n\t\t\t\taccounts.push(session.account);\n\t\t\t}\n\t\t}\n\t\treturn accounts;\n\t}\n\n\tasync getSessions(id: string, scopes?: string[], account?: AuthenticationSessionAccount, activateImmediate: boolean = false): Promise<ReadonlyArray<AuthenticationSession>> {\n\t\tconst authProvider = this._authenticationProviders.get(id) || await this.tryActivateProvider(id, activateImmediate);\n\t\tif (authProvider) {\n\t\t\treturn await authProvider.getSessions(scopes, { account });\n\t\t} else {\n\t\t\tthrow new Error(`No authentication provider '${id}' is currently registered.`);\n\t\t}\n\t}\n\n\tasync createSession(id: string, scopes: string[], options?: IAuthenticationCreateSessionOptions): Promise<AuthenticationSession> {\n\t\tconst authProvider = this._authenticationProviders.get(id) || await this.tryActivateProvider(id, !!options?.activateImmediate);\n\t\tif (authProvider) {\n\t\t\treturn await authProvider.createSession(scopes, {\n\t\t\t\taccount: options?.account\n\t\t\t});\n\t\t} else {\n\t\t\tthrow new Error(`No authentication provider '${id}' is currently registered.`);\n\t\t}\n\t}\n\n\tasync removeSession(id: string, sessionId: string): Promise<void> {\n\t\tconst authProvider = this._authenticationProviders.get(id);\n\t\tif (authProvider) {\n\t\t\treturn authProvider.removeSession(sessionId);\n\t\t} else {\n\t\t\tthrow new Error(`No authentication provider '${id}' is currently registered.`);\n\t\t}\n\t}\n\n\tprivate async tryActivateProvider(providerId: string, activateImmediate: boolean): Promise<IAuthenticationProvider> {\n\t\tawait this._extensionService.activateByEvent(getAuthenticationProviderActivationEvent(providerId), activateImmediate ? ActivationKind.Immediate : ActivationKind.Normal);\n\t\tlet provider = this._authenticationProviders.get(providerId);\n\t\tif (provider) {\n\t\t\treturn provider;\n\t\t}\n\n\t\tconst store = new DisposableStore();\n\n\t\t// When activate has completed, the extension has made the call to `registerAuthenticationProvider`.\n\t\t// However, activate cannot block on this, so the renderer may not have gotten the event yet.\n\t\tconst didRegister: Promise<IAuthenticationProvider> = new Promise((resolve, _) => {\n\t\t\tstore.add(Event.once(this.onDidRegisterAuthenticationProvider)(e => {\n\t\t\t\tif (e.id === providerId) {\n\t\t\t\t\tprovider = this._authenticationProviders.get(providerId);\n\t\t\t\t\tif (provider) {\n\t\t\t\t\t\tresolve(provider);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthrow new Error(`No authentication provider '${providerId}' is currently registered.`);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}));\n\t\t});\n\n\t\tconst didTimeout: Promise<IAuthenticationProvider> = new Promise((_, reject) => {\n\t\t\tconst handle = setTimeout(() => {\n\t\t\t\treject('Timed out waiting for authentication provider to register');\n\t\t\t}, 5000);\n\n\t\t\tstore.add(toDisposable(() => clearTimeout(handle)));\n\t\t});\n\n\t\treturn Promise.race([didRegister, didTimeout]).finally(() => store.dispose());\n\t}\n}\n\nregisterSingleton(IAuthenticationService, AuthenticationService, InstantiationType.Delayed);\n"],
  "mappings": ";;;;;;;;;;;;AAKA,SAAS,SAAS,aAAa;AAC/B,SAAS,YAAY,eAAe,iBAAiB,aAAa,cAAc,oBAAoB;AACpG,SAAS,2BAA2B;AACpC,SAAS,gBAAgB;AACzB,SAAS,gBAAgB;AACzB,SAAS,mBAAmB,yBAAyB;AACrD,SAAS,uBAAuB;AAChC,SAAS,6BAA6B;AACtC,SAAS,oCAAoC;AAC7C,SAAS,mCAAmC,uBAAuB,8BAA8B,mCAAmC,qCAAqC,yBAAyB,8BAA8B;AAChO,SAAS,2CAA2C;AACpD,SAAS,gBAAgB,yBAAyB;AAE3C,SAAS,yCAAyC,IAAoB;AAAE,SAAO,2BAA2B,EAAE;AAAI;AAAvG;AAIhB,eAAsB,oCACrB,sBACA,gBACiD;AACjD,QAAM,6BAA6B,MAAM,qBAAqB,IAAI,GAAG,eAAe,WAAW,eAAe;AAC9G,MAAI,4BAA4B;AAC/B,QAAI;AACH,YAAM,4BAAuD,KAAK,MAAM,0BAA0B;AAClG,UAAI,6BACA,SAAS,0BAA0B,EAAE,KACrC,SAAS,0BAA0B,WAAW,KAC9C,SAAS,0BAA0B,UAAU,GAC/C;AACD,eAAO;AAAA,MACR;AAAA,IACD,SAAS,GAAG;AAEX,cAAQ,MAAM,8CAA8C,CAAC,EAAE;AAAA,IAChE;AAAA,EACD;AACA,SAAO;AACR;AArBsB;AAuBf,IAAM,wBAAN,cAAoC,WAA6C;AAAA,EAkBvF,YACqC,mBACN,6BACwB,qBACrD;AACD,UAAM;AAJ8B;AAEkB;AAItD,SAAK,UAAU,4BAA4B,kCAAkC,OAAK;AAGjF,WAAK,qBAAqB,KAAK;AAAA,QAC9B,YAAY,EAAE;AAAA,QACd,OAAO,EAAE;AAAA,QACT,OAAO;AAAA,UACN,OAAO,CAAC;AAAA,UACR,SAAS,CAAC;AAAA,UACV,SAAS,CAAC;AAAA,QACX;AAAA,MACD,CAAC;AAAA,IACF,CAAC,CAAC;AAEF,SAAK,+CAA+C;AAAA,EACrD;AAAA,EArFD,OA6CwF;AAAA;AAAA;AAAA,EAG/E,uCAAmF,KAAK,UAAU,IAAI,QAA2C,CAAC;AAAA,EACjJ,sCAAgF,KAAK,qCAAqC;AAAA,EAE3H,yCAAqF,KAAK,UAAU,IAAI,QAA2C,CAAC;AAAA,EACnJ,wCAAkF,KAAK,uCAAuC;AAAA,EAE/H,uBAAiH,KAAK,UAAU,IAAI,QAAyF,CAAC;AAAA,EAC7N,sBAA8G,KAAK,qBAAqB;AAAA,EAEzI,gCAA+C,KAAK,UAAU,IAAI,QAAc,CAAC;AAAA,EAChF,+BAA4C,KAAK,8BAA8B;AAAA,EAEhF,2BAAiE,oBAAI,IAAqC;AAAA,EAC1G,qCAAyE,KAAK,UAAU,IAAI,cAAmC,CAAC;AAAA,EA0BhI,qBAA0D,CAAC;AAAA,EACnE,IAAI,oBAAyD;AAC5D,WAAO,KAAK;AAAA,EACb;AAAA,EAEQ,iDAAuD;AAC9D,QAAI,CAAC,KAAK,oBAAoB,SAAS,yBAAyB,QAAQ;AACvE;AAAA,IACD;AACA,eAAW,YAAY,KAAK,oBAAoB,QAAQ,yBAAyB;AAChF,WAAK,+BAA+B,SAAS,IAAI,QAAQ;AAAA,IAC1D;AAAA,EACD;AAAA,EAEA,uCAAuC,UAAmD;AACzF,QAAI,oBAAoB,SAAS,EAAE,GAAG;AACrC,YAAM,IAAI,MAAM,SAAS,4BAA4B,oDAAoD,CAAC;AAAA,IAC3G;AACA,QAAI,oBAAoB,SAAS,KAAK,GAAG;AACxC,YAAM,IAAI,MAAM,SAAS,+BAA+B,sDAAsD,CAAC;AAAA,IAChH;AACA,QAAI,KAAK,kBAAkB,KAAK,OAAK,EAAE,OAAO,SAAS,EAAE,GAAG;AAC3D,YAAM,IAAI,MAAM,SAAS,6BAA6B,4DAA4D,SAAS,EAAE,CAAC;AAAA,IAC/H;AACA,SAAK,mBAAmB,KAAK,QAAQ;AACrC,SAAK,8BAA8B,KAAK;AAAA,EACzC;AAAA,EAEA,yCAAyC,IAAkB;AAC1D,UAAM,QAAQ,KAAK,kBAAkB,UAAU,cAAY,SAAS,OAAO,EAAE;AAC7E,QAAI,QAAQ,IAAI;AACf,WAAK,kBAAkB,OAAO,OAAO,CAAC;AAAA,IACvC;AACA,SAAK,8BAA8B,KAAK;AAAA,EACzC;AAAA,EAEA,mCAAmC,IAAqB;AACvD,WAAO,KAAK,yBAAyB,IAAI,EAAE;AAAA,EAC5C;AAAA,EAEA,+BAA+B,IAAY,wBAAuD;AACjG,SAAK,yBAAyB,IAAI,IAAI,sBAAsB;AAC5D,UAAM,kBAAkB,IAAI,gBAAgB;AAC5C,oBAAgB,IAAI,uBAAuB,oBAAoB,OAAK,KAAK,qBAAqB,KAAK;AAAA,MAClG,YAAY;AAAA,MACZ,OAAO,uBAAuB;AAAA,MAC9B,OAAO;AAAA,IACR,CAAC,CAAC,CAAC;AACH,QAAI,aAAa,sBAAsB,GAAG;AACzC,sBAAgB,IAAI,sBAAsB;AAAA,IAC3C;AACA,SAAK,mCAAmC,IAAI,IAAI,eAAe;AAC/D,SAAK,qCAAqC,KAAK,EAAE,IAAI,OAAO,uBAAuB,MAAM,CAAC;AAAA,EAC3F;AAAA,EAEA,iCAAiC,IAAkB;AAClD,UAAM,WAAW,KAAK,yBAAyB,IAAI,EAAE;AACrD,QAAI,UAAU;AACb,WAAK,yBAAyB,OAAO,EAAE;AACvC,WAAK,uCAAuC,KAAK,EAAE,IAAI,OAAO,SAAS,MAAM,CAAC;AAAA,IAC/E;AACA,SAAK,mCAAmC,iBAAiB,EAAE;AAAA,EAC5D;AAAA,EAEA,iBAA2B;AAC1B,UAAM,cAAwB,CAAC;AAC/B,SAAK,yBAAyB,QAAQ,cAAY;AACjD,kBAAY,KAAK,SAAS,EAAE;AAAA,IAC7B,CAAC;AACD,WAAO;AAAA,EACR;AAAA,EAEA,YAAY,IAAqC;AAChD,QAAI,KAAK,yBAAyB,IAAI,EAAE,GAAG;AAC1C,aAAO,KAAK,yBAAyB,IAAI,EAAE;AAAA,IAC5C;AACA,UAAM,IAAI,MAAM,+BAA+B,EAAE,4BAA4B;AAAA,EAC9E;AAAA,EAEA,MAAM,YAAY,IAAkE;AAEnF,UAAM,WAAW,MAAM,KAAK,YAAY,EAAE;AAC1C,UAAM,WAAW,IAAI,MAAoC;AACzD,UAAM,eAAe,oBAAI,IAAY;AACrC,eAAW,WAAW,UAAU;AAC/B,UAAI,CAAC,aAAa,IAAI,QAAQ,QAAQ,KAAK,GAAG;AAC7C,qBAAa,IAAI,QAAQ,QAAQ,KAAK;AACtC,iBAAS,KAAK,QAAQ,OAAO;AAAA,MAC9B;AAAA,IACD;AACA,WAAO;AAAA,EACR;AAAA,EAEA,MAAM,YAAY,IAAY,QAAmB,SAAwC,oBAA6B,OAAsD;AAC3K,UAAM,eAAe,KAAK,yBAAyB,IAAI,EAAE,KAAK,MAAM,KAAK,oBAAoB,IAAI,iBAAiB;AAClH,QAAI,cAAc;AACjB,aAAO,MAAM,aAAa,YAAY,QAAQ,EAAE,QAAQ,CAAC;AAAA,IAC1D,OAAO;AACN,YAAM,IAAI,MAAM,+BAA+B,EAAE,4BAA4B;AAAA,IAC9E;AAAA,EACD;AAAA,EAEA,MAAM,cAAc,IAAY,QAAkB,SAA+E;AAChI,UAAM,eAAe,KAAK,yBAAyB,IAAI,EAAE,KAAK,MAAM,KAAK,oBAAoB,IAAI,CAAC,CAAC,SAAS,iBAAiB;AAC7H,QAAI,cAAc;AACjB,aAAO,MAAM,aAAa,cAAc,QAAQ;AAAA,QAC/C,SAAS,SAAS;AAAA,MACnB,CAAC;AAAA,IACF,OAAO;AACN,YAAM,IAAI,MAAM,+BAA+B,EAAE,4BAA4B;AAAA,IAC9E;AAAA,EACD;AAAA,EAEA,MAAM,cAAc,IAAY,WAAkC;AACjE,UAAM,eAAe,KAAK,yBAAyB,IAAI,EAAE;AACzD,QAAI,cAAc;AACjB,aAAO,aAAa,cAAc,SAAS;AAAA,IAC5C,OAAO;AACN,YAAM,IAAI,MAAM,+BAA+B,EAAE,4BAA4B;AAAA,IAC9E;AAAA,EACD;AAAA,EAEA,MAAc,oBAAoB,YAAoB,mBAA8D;AACnH,UAAM,KAAK,kBAAkB,gBAAgB,yCAAyC,UAAU,GAAG,oBAAoB,eAAe,YAAY,eAAe,MAAM;AACvK,QAAI,WAAW,KAAK,yBAAyB,IAAI,UAAU;AAC3D,QAAI,UAAU;AACb,aAAO;AAAA,IACR;AAEA,UAAM,QAAQ,IAAI,gBAAgB;AAIlC,UAAM,cAAgD,IAAI,QAAQ,CAAC,SAAS,MAAM;AACjF,YAAM,IAAI,MAAM,KAAK,KAAK,mCAAmC,EAAE,OAAK;AACnE,YAAI,EAAE,OAAO,YAAY;AACxB,qBAAW,KAAK,yBAAyB,IAAI,UAAU;AACvD,cAAI,UAAU;AACb,oBAAQ,QAAQ;AAAA,UACjB,OAAO;AACN,kBAAM,IAAI,MAAM,+BAA+B,UAAU,4BAA4B;AAAA,UACtF;AAAA,QACD;AAAA,MACD,CAAC,CAAC;AAAA,IACH,CAAC;AAED,UAAM,aAA+C,IAAI,QAAQ,CAAC,GAAG,WAAW;AAC/E,YAAM,SAAS,WAAW,MAAM;AAC/B,eAAO,2DAA2D;AAAA,MACnE,GAAG,GAAI;AAEP,YAAM,IAAI,aAAa,MAAM,aAAa,MAAM,CAAC,CAAC;AAAA,IACnD,CAAC;AAED,WAAO,QAAQ,KAAK,CAAC,aAAa,UAAU,CAAC,EAAE,QAAQ,MAAM,MAAM,QAAQ,CAAC;AAAA,EAC7E;AACD;AAtMa,wBAAN;AAAA,EAmBJ;AAAA,EACA;AAAA,EACA;AAAA,GArBU;AAwMb,kBAAkB,wBAAwB,uBAAuB,kBAAkB,OAAO;",
  "names": []
}
