{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/authentication/test/browser/authenticationService.test.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport assert from 'assert';\nimport { Emitter, Event } from '../../../../../base/common/event.js';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from '../../../../../base/test/common/utils.js';\nimport { AuthenticationAccessService } from '../../browser/authenticationAccessService.js';\nimport { AuthenticationService } from '../../browser/authenticationService.js';\nimport { AuthenticationProviderInformation, AuthenticationSessionsChangeEvent, IAuthenticationProvider } from '../../common/authentication.js';\nimport { TestEnvironmentService } from '../../../../test/browser/workbenchTestServices.js';\nimport { TestExtensionService, TestProductService, TestStorageService } from '../../../../test/common/workbenchTestServices.js';\n\nfunction createSession() {\n\treturn { id: 'session1', accessToken: 'token1', account: { id: 'account', label: 'Account' }, scopes: ['test'] };\n}\n\nfunction createProvider(overrides: Partial<IAuthenticationProvider> = {}): IAuthenticationProvider {\n\treturn {\n\t\tsupportsMultipleAccounts: false,\n\t\tonDidChangeSessions: new Emitter<AuthenticationSessionsChangeEvent>().event,\n\t\tid: 'test',\n\t\tlabel: 'Test',\n\t\tgetSessions: async () => [],\n\t\tcreateSession: async () => createSession(),\n\t\tremoveSession: async () => { },\n\t\t...overrides\n\t};\n}\n\nsuite('AuthenticationService', () => {\n\tconst disposables = ensureNoDisposablesAreLeakedInTestSuite();\n\n\tlet authenticationService: AuthenticationService;\n\n\tsetup(() => {\n\t\tconst storageService = disposables.add(new TestStorageService());\n\t\tconst authenticationAccessService = disposables.add(new AuthenticationAccessService(storageService, TestProductService));\n\t\tauthenticationService = disposables.add(new AuthenticationService(new TestExtensionService(), authenticationAccessService, TestEnvironmentService));\n\t});\n\n\tteardown(() => {\n\t\t// Dispose the authentication service after each test\n\t\tauthenticationService.dispose();\n\t});\n\n\tsuite('declaredAuthenticationProviders', () => {\n\t\ttest('registerDeclaredAuthenticationProvider', async () => {\n\t\t\tconst changed = Event.toPromise(authenticationService.onDidChangeDeclaredProviders);\n\t\t\tconst provider: AuthenticationProviderInformation = {\n\t\t\t\tid: 'github',\n\t\t\t\tlabel: 'GitHub'\n\t\t\t};\n\t\t\tauthenticationService.registerDeclaredAuthenticationProvider(provider);\n\n\t\t\t// Assert that the provider is added to the declaredProviders array and the event fires\n\t\t\tassert.equal(authenticationService.declaredProviders.length, 1);\n\t\t\tassert.deepEqual(authenticationService.declaredProviders[0], provider);\n\t\t\tawait changed;\n\t\t});\n\n\t\ttest('unregisterDeclaredAuthenticationProvider', async () => {\n\t\t\tconst provider: AuthenticationProviderInformation = {\n\t\t\t\tid: 'github',\n\t\t\t\tlabel: 'GitHub'\n\t\t\t};\n\t\t\tauthenticationService.registerDeclaredAuthenticationProvider(provider);\n\t\t\tconst changed = Event.toPromise(authenticationService.onDidChangeDeclaredProviders);\n\t\t\tauthenticationService.unregisterDeclaredAuthenticationProvider(provider.id);\n\n\t\t\t// Assert that the provider is removed from the declaredProviders array and the event fires\n\t\t\tassert.equal(authenticationService.declaredProviders.length, 0);\n\t\t\tawait changed;\n\t\t});\n\t});\n\n\tsuite('authenticationProviders', () => {\n\t\ttest('isAuthenticationProviderRegistered', async () => {\n\t\t\tconst registered = Event.toPromise(authenticationService.onDidRegisterAuthenticationProvider);\n\t\t\tconst provider = createProvider();\n\t\t\tassert.equal(authenticationService.isAuthenticationProviderRegistered(provider.id), false);\n\t\t\tauthenticationService.registerAuthenticationProvider(provider.id, provider);\n\t\t\tassert.equal(authenticationService.isAuthenticationProviderRegistered(provider.id), true);\n\t\t\tconst result = await registered;\n\t\t\tassert.deepEqual(result, { id: provider.id, label: provider.label });\n\t\t});\n\n\t\ttest('unregisterAuthenticationProvider', async () => {\n\t\t\tconst unregistered = Event.toPromise(authenticationService.onDidUnregisterAuthenticationProvider);\n\t\t\tconst provider = createProvider();\n\t\t\tauthenticationService.registerAuthenticationProvider(provider.id, provider);\n\t\t\tassert.equal(authenticationService.isAuthenticationProviderRegistered(provider.id), true);\n\t\t\tauthenticationService.unregisterAuthenticationProvider(provider.id);\n\t\t\tassert.equal(authenticationService.isAuthenticationProviderRegistered(provider.id), false);\n\t\t\tconst result = await unregistered;\n\t\t\tassert.deepEqual(result, { id: provider.id, label: provider.label });\n\t\t});\n\n\t\ttest('getProviderIds', () => {\n\t\t\tconst provider1 = createProvider({\n\t\t\t\tid: 'provider1',\n\t\t\t\tlabel: 'Provider 1'\n\t\t\t});\n\t\t\tconst provider2 = createProvider({\n\t\t\t\tid: 'provider2',\n\t\t\t\tlabel: 'Provider 2'\n\t\t\t});\n\n\t\t\tauthenticationService.registerAuthenticationProvider(provider1.id, provider1);\n\t\t\tauthenticationService.registerAuthenticationProvider(provider2.id, provider2);\n\n\t\t\tconst providerIds = authenticationService.getProviderIds();\n\n\t\t\t// Assert that the providerIds array contains the registered provider ids\n\t\t\tassert.deepEqual(providerIds, [provider1.id, provider2.id]);\n\t\t});\n\n\t\ttest('getProvider', () => {\n\t\t\tconst provider = createProvider();\n\n\t\t\tauthenticationService.registerAuthenticationProvider(provider.id, provider);\n\n\t\t\tconst retrievedProvider = authenticationService.getProvider(provider.id);\n\n\t\t\t// Assert that the retrieved provider is the same as the registered provider\n\t\t\tassert.deepEqual(retrievedProvider, provider);\n\t\t});\n\t});\n\n\tsuite('authenticationSessions', () => {\n\t\ttest('getSessions', async () => {\n\t\t\tlet isCalled = false;\n\t\t\tconst provider = createProvider({\n\t\t\t\tgetSessions: async () => {\n\t\t\t\t\tisCalled = true;\n\t\t\t\t\treturn [createSession()];\n\t\t\t\t},\n\t\t\t});\n\t\t\tauthenticationService.registerAuthenticationProvider(provider.id, provider);\n\t\t\tconst sessions = await authenticationService.getSessions(provider.id);\n\n\t\t\tassert.equal(sessions.length, 1);\n\t\t\tassert.ok(isCalled);\n\t\t});\n\n\t\ttest('createSession', async () => {\n\t\t\tconst emitter = new Emitter<AuthenticationSessionsChangeEvent>();\n\t\t\tconst provider = createProvider({\n\t\t\t\tonDidChangeSessions: emitter.event,\n\t\t\t\tcreateSession: async () => {\n\t\t\t\t\tconst session = createSession();\n\t\t\t\t\temitter.fire({ added: [session], removed: [], changed: [] });\n\t\t\t\t\treturn session;\n\t\t\t\t},\n\t\t\t});\n\t\t\tconst changed = Event.toPromise(authenticationService.onDidChangeSessions);\n\t\t\tauthenticationService.registerAuthenticationProvider(provider.id, provider);\n\t\t\tconst session = await authenticationService.createSession(provider.id, ['repo']);\n\n\t\t\t// Assert that the created session matches the expected session and the event fires\n\t\t\tassert.ok(session);\n\t\t\tconst result = await changed;\n\t\t\tassert.deepEqual(result, {\n\t\t\t\tproviderId: provider.id,\n\t\t\t\tlabel: provider.label,\n\t\t\t\tevent: { added: [session], removed: [], changed: [] }\n\t\t\t});\n\t\t});\n\n\t\ttest('removeSession', async () => {\n\t\t\tconst emitter = new Emitter<AuthenticationSessionsChangeEvent>();\n\t\t\tconst session = createSession();\n\t\t\tconst provider = createProvider({\n\t\t\t\tonDidChangeSessions: emitter.event,\n\t\t\t\tremoveSession: async () => emitter.fire({ added: [], removed: [session], changed: [] })\n\t\t\t});\n\t\t\tconst changed = Event.toPromise(authenticationService.onDidChangeSessions);\n\t\t\tauthenticationService.registerAuthenticationProvider(provider.id, provider);\n\t\t\tawait authenticationService.removeSession(provider.id, session.id);\n\n\t\t\tconst result = await changed;\n\t\t\tassert.deepEqual(result, {\n\t\t\t\tproviderId: provider.id,\n\t\t\t\tlabel: provider.label,\n\t\t\t\tevent: { added: [], removed: [session], changed: [] }\n\t\t\t});\n\t\t});\n\n\t\ttest('onDidChangeSessions', async () => {\n\t\t\tconst emitter = new Emitter<AuthenticationSessionsChangeEvent>();\n\t\t\tconst provider = createProvider({\n\t\t\t\tonDidChangeSessions: emitter.event,\n\t\t\t\tgetSessions: async () => []\n\t\t\t});\n\t\t\tauthenticationService.registerAuthenticationProvider(provider.id, provider);\n\n\t\t\tconst changed = Event.toPromise(authenticationService.onDidChangeSessions);\n\t\t\tconst session = createSession();\n\t\t\temitter.fire({ added: [], removed: [], changed: [session] });\n\n\t\t\tconst result = await changed;\n\t\t\tassert.deepEqual(result, {\n\t\t\t\tproviderId: provider.id,\n\t\t\t\tlabel: provider.label,\n\t\t\t\tevent: { added: [], removed: [], changed: [session] }\n\t\t\t});\n\t\t});\n\t});\n});\n"],
  "mappings": "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",
  "names": ["session"]
}
