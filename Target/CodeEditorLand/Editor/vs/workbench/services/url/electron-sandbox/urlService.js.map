{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/url/electron-sandbox/urlService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { matchesScheme } from \"../../../../base/common/network.js\";\nimport { URI, type UriComponents } from \"../../../../base/common/uri.js\";\nimport { ProxyChannel } from \"../../../../base/parts/ipc/common/ipc.js\";\nimport {\n\tInstantiationType,\n\tregisterSingleton,\n} from \"../../../../platform/instantiation/common/extensions.js\";\nimport { IMainProcessService } from \"../../../../platform/ipc/common/mainProcessService.js\";\nimport { ILogService } from \"../../../../platform/log/common/log.js\";\nimport { INativeHostService } from \"../../../../platform/native/common/native.js\";\nimport {\n\ttype IOpener,\n\tIOpenerService,\n} from \"../../../../platform/opener/common/opener.js\";\nimport { IProductService } from \"../../../../platform/product/common/productService.js\";\nimport {\n\ttype IOpenURLOptions,\n\ttype IURLHandler,\n\tIURLService,\n} from \"../../../../platform/url/common/url.js\";\nimport { URLHandlerChannel } from \"../../../../platform/url/common/urlIpc.js\";\nimport { NativeURLService } from \"../../../../platform/url/common/urlService.js\";\n\nexport interface IRelayOpenURLOptions extends IOpenURLOptions {\n\topenToSide?: boolean;\n\topenExternal?: boolean;\n}\n\nexport class RelayURLService\n\textends NativeURLService\n\timplements IURLHandler, IOpener\n{\n\tprivate urlService: IURLService;\n\n\tconstructor(\n\t\t@IMainProcessService mainProcessService: IMainProcessService,\n\t\t@IOpenerService openerService: IOpenerService,\n\t\t@INativeHostService private readonly nativeHostService: INativeHostService,\n\t\t@IProductService productService: IProductService,\n\t\t@ILogService private readonly logService: ILogService\n\t) {\n\t\tsuper(productService);\n\n\t\tthis.urlService = ProxyChannel.toService<IURLService>(mainProcessService.getChannel('url'));\n\n\t\tmainProcessService.registerChannel('urlHandler', new URLHandlerChannel(this));\n\t\topenerService.registerOpener(this);\n\t}\n\n\toverride create(options?: Partial<UriComponents>): URI {\n\t\tconst uri = super.create(options);\n\n\t\tlet query = uri.query;\n\t\tif (query) {\n\t\t\tquery += `&windowId=${encodeURIComponent(this.nativeHostService.windowId)}`;\n\t\t} else {\n\t\t\tquery = `windowId=${encodeURIComponent(this.nativeHostService.windowId)}`;\n\t\t}\n\n\t\treturn uri.with({ query });\n\t}\n\n\toverride async open(\n\t\tresource: URI | string,\n\t\toptions?: IRelayOpenURLOptions,\n\t): Promise<boolean> {\n\t\tif (!matchesScheme(resource, this.productService.urlProtocol)) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (typeof resource === \"string\") {\n\t\t\tresource = URI.parse(resource);\n\t\t}\n\t\treturn await this.urlService.open(resource, options);\n\t}\n\n\tasync handleURL(uri: URI, options?: IOpenURLOptions): Promise<boolean> {\n\t\tconst result = await super.open(uri, options);\n\n\t\tif (result) {\n\t\t\tthis.logService.trace(\n\t\t\t\t\"URLService#handleURL(): handled\",\n\t\t\t\turi.toString(true),\n\t\t\t);\n\n\t\t\tawait this.nativeHostService.focusWindow({\n\t\t\t\tforce: true /* Application may not be active */,\n\t\t\t\ttargetWindowId: this.nativeHostService.windowId,\n\t\t\t});\n\t\t} else {\n\t\t\tthis.logService.trace(\n\t\t\t\t\"URLService#handleURL(): not handled\",\n\t\t\t\turi.toString(true),\n\t\t\t);\n\t\t}\n\n\t\treturn result;\n\t}\n}\n\nregisterSingleton(IURLService, RelayURLService, InstantiationType.Eager);\n"],
  "mappings": ";;;;;;;;;;;;AAKA,SAAS,qBAAqB;AAC9B,SAAS,WAA+B;AACxC,SAAS,oBAAoB;AAC7B;AAAA,EACC;AAAA,EACA;AAAA,OACM;AACP,SAAS,2BAA2B;AACpC,SAAS,mBAAmB;AAC5B,SAAS,0BAA0B;AACnC;AAAA,EAEC;AAAA,OACM;AACP,SAAS,uBAAuB;AAChC;AAAA,EAGC;AAAA,OACM;AACP,SAAS,yBAAyB;AAClC,SAAS,wBAAwB;AAO1B,IAAM,kBAAN,cACE,iBAET;AAAA,EAGC,YACsB,oBACL,eACqB,mBACpB,gBACa,YAC7B;AACD,UAAM,cAAc;AAJiB;AAEP;AAI9B,SAAK,aAAa,aAAa,UAAuB,mBAAmB,WAAW,KAAK,CAAC;AAE1F,uBAAmB,gBAAgB,cAAc,IAAI,kBAAkB,IAAI,CAAC;AAC5E,kBAAc,eAAe,IAAI;AAAA,EAClC;AAAA,EApDD,OAoCA;AAAA;AAAA;AAAA,EACS;AAAA,EAiBC,OAAO,SAAuC;AACtD,UAAM,MAAM,MAAM,OAAO,OAAO;AAEhC,QAAI,QAAQ,IAAI;AAChB,QAAI,OAAO;AACV,eAAS,aAAa,mBAAmB,KAAK,kBAAkB,QAAQ,CAAC;AAAA,IAC1E,OAAO;AACN,cAAQ,YAAY,mBAAmB,KAAK,kBAAkB,QAAQ,CAAC;AAAA,IACxE;AAEA,WAAO,IAAI,KAAK,EAAE,MAAM,CAAC;AAAA,EAC1B;AAAA,EAEA,MAAe,KACd,UACA,SACmB;AACnB,QAAI,CAAC,cAAc,UAAU,KAAK,eAAe,WAAW,GAAG;AAC9D,aAAO;AAAA,IACR;AAEA,QAAI,OAAO,aAAa,UAAU;AACjC,iBAAW,IAAI,MAAM,QAAQ;AAAA,IAC9B;AACA,WAAO,MAAM,KAAK,WAAW,KAAK,UAAU,OAAO;AAAA,EACpD;AAAA,EAEA,MAAM,UAAU,KAAU,SAA6C;AACtE,UAAM,SAAS,MAAM,MAAM,KAAK,KAAK,OAAO;AAE5C,QAAI,QAAQ;AACX,WAAK,WAAW;AAAA,QACf;AAAA,QACA,IAAI,SAAS,IAAI;AAAA,MAClB;AAEA,YAAM,KAAK,kBAAkB,YAAY;AAAA,QACxC,OAAO;AAAA,QACP,gBAAgB,KAAK,kBAAkB;AAAA,MACxC,CAAC;AAAA,IACF,OAAO;AACN,WAAK,WAAW;AAAA,QACf;AAAA,QACA,IAAI,SAAS,IAAI;AAAA,MAClB;AAAA,IACD;AAEA,WAAO;AAAA,EACR;AACD;AAtEa,kBAAN;AAAA,EAOJ;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,GAXU;AAwEb,kBAAkB,aAAa,iBAAiB,kBAAkB,KAAK;",
  "names": []
}
