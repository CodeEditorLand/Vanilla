{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/url/electron-sandbox/urlService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IURLService, IURLHandler, IOpenURLOptions } from '../../../../platform/url/common/url.js';\nimport { URI, UriComponents } from '../../../../base/common/uri.js';\nimport { IMainProcessService } from '../../../../platform/ipc/common/mainProcessService.js';\nimport { URLHandlerChannel } from '../../../../platform/url/common/urlIpc.js';\nimport { IOpenerService, IOpener } from '../../../../platform/opener/common/opener.js';\nimport { matchesScheme } from '../../../../base/common/network.js';\nimport { IProductService } from '../../../../platform/product/common/productService.js';\nimport { InstantiationType, registerSingleton } from '../../../../platform/instantiation/common/extensions.js';\nimport { ProxyChannel } from '../../../../base/parts/ipc/common/ipc.js';\nimport { INativeHostService } from '../../../../platform/native/common/native.js';\nimport { NativeURLService } from '../../../../platform/url/common/urlService.js';\nimport { ILogService } from '../../../../platform/log/common/log.js';\n\nexport interface IRelayOpenURLOptions extends IOpenURLOptions {\n\topenToSide?: boolean;\n\topenExternal?: boolean;\n}\n\nexport class RelayURLService extends NativeURLService implements IURLHandler, IOpener {\n\n\tprivate urlService: IURLService;\n\n\tconstructor(\n\t\t@IMainProcessService mainProcessService: IMainProcessService,\n\t\t@IOpenerService openerService: IOpenerService,\n\t\t@INativeHostService private readonly nativeHostService: INativeHostService,\n\t\t@IProductService productService: IProductService,\n\t\t@ILogService private readonly logService: ILogService\n\t) {\n\t\tsuper(productService);\n\n\t\tthis.urlService = ProxyChannel.toService<IURLService>(mainProcessService.getChannel('url'));\n\n\t\tmainProcessService.registerChannel('urlHandler', new URLHandlerChannel(this));\n\t\topenerService.registerOpener(this);\n\t}\n\n\toverride create(options?: Partial<UriComponents>): URI {\n\t\tconst uri = super.create(options);\n\n\t\tlet query = uri.query;\n\t\tif (!query) {\n\t\t\tquery = `windowId=${encodeURIComponent(this.nativeHostService.windowId)}`;\n\t\t} else {\n\t\t\tquery += `&windowId=${encodeURIComponent(this.nativeHostService.windowId)}`;\n\t\t}\n\n\t\treturn uri.with({ query });\n\t}\n\n\toverride async open(resource: URI | string, options?: IRelayOpenURLOptions): Promise<boolean> {\n\n\t\tif (!matchesScheme(resource, this.productService.urlProtocol)) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (typeof resource === 'string') {\n\t\t\tresource = URI.parse(resource);\n\t\t}\n\t\treturn await this.urlService.open(resource, options);\n\t}\n\n\tasync handleURL(uri: URI, options?: IOpenURLOptions): Promise<boolean> {\n\t\tconst result = await super.open(uri, options);\n\n\t\tif (result) {\n\t\t\tthis.logService.trace('URLService#handleURL(): handled', uri.toString(true));\n\n\t\t\tawait this.nativeHostService.focusWindow({ force: true /* Application may not be active */, targetWindowId: this.nativeHostService.windowId });\n\t\t} else {\n\t\t\tthis.logService.trace('URLService#handleURL(): not handled', uri.toString(true));\n\t\t}\n\n\t\treturn result;\n\t}\n}\n\nregisterSingleton(IURLService, RelayURLService, InstantiationType.Eager);\n"],
  "mappings": ";;;;;;;;;;;;AAKA,SAAS,aAAa,aAAa,uBAAuB;AAC1D,SAAS,KAAK,qBAAqB;AACnC,SAAS,2BAA2B;AACpC,SAAS,yBAAyB;AAClC,SAAS,gBAAgB,eAAe;AACxC,SAAS,qBAAqB;AAC9B,SAAS,uBAAuB;AAChC,SAAS,mBAAmB,yBAAyB;AACrD,SAAS,oBAAoB;AAC7B,SAAS,0BAA0B;AACnC,SAAS,wBAAwB;AACjC,SAAS,mBAAmB;AAOrB,IAAM,kBAAN,cAA8B,iBAAiD;AAAA,EAIrF,YACsB,oBACL,eACqB,mBACpB,gBACa,YAC7B;AACD,UAAM,cAAc;AAJiB;AAEP;AAI9B,SAAK,aAAa,aAAa,UAAuB,mBAAmB,WAAW,KAAK,CAAC;AAE1F,uBAAmB,gBAAgB,cAAc,IAAI,kBAAkB,IAAI,CAAC;AAC5E,kBAAc,eAAe,IAAI;AAAA,EAClC;AAAA,EAxCD,OAuBsF;AAAA;AAAA;AAAA,EAE7E;AAAA,EAiBC,OAAO,SAAuC;AACtD,UAAM,MAAM,MAAM,OAAO,OAAO;AAEhC,QAAI,QAAQ,IAAI;AAChB,QAAI,CAAC,OAAO;AACX,cAAQ,YAAY,mBAAmB,KAAK,kBAAkB,QAAQ,CAAC;AAAA,IACxE,OAAO;AACN,eAAS,aAAa,mBAAmB,KAAK,kBAAkB,QAAQ,CAAC;AAAA,IAC1E;AAEA,WAAO,IAAI,KAAK,EAAE,MAAM,CAAC;AAAA,EAC1B;AAAA,EAEA,MAAe,KAAK,UAAwB,SAAkD;AAE7F,QAAI,CAAC,cAAc,UAAU,KAAK,eAAe,WAAW,GAAG;AAC9D,aAAO;AAAA,IACR;AAEA,QAAI,OAAO,aAAa,UAAU;AACjC,iBAAW,IAAI,MAAM,QAAQ;AAAA,IAC9B;AACA,WAAO,MAAM,KAAK,WAAW,KAAK,UAAU,OAAO;AAAA,EACpD;AAAA,EAEA,MAAM,UAAU,KAAU,SAA6C;AACtE,UAAM,SAAS,MAAM,MAAM,KAAK,KAAK,OAAO;AAE5C,QAAI,QAAQ;AACX,WAAK,WAAW,MAAM,mCAAmC,IAAI,SAAS,IAAI,CAAC;AAE3E,YAAM,KAAK,kBAAkB,YAAY,EAAE,OAAO,MAA0C,gBAAgB,KAAK,kBAAkB,SAAS,CAAC;AAAA,IAC9I,OAAO;AACN,WAAK,WAAW,MAAM,uCAAuC,IAAI,SAAS,IAAI,CAAC;AAAA,IAChF;AAEA,WAAO;AAAA,EACR;AACD;AAzDa,kBAAN;AAAA,EAKJ;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,GATU;AA2Db,kBAAkB,aAAa,iBAAiB,kBAAkB,KAAK;",
  "names": []
}
