{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/output/common/output.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Event, Emitter } from '../../../../base/common/event.js';\nimport { Registry } from '../../../../platform/registry/common/platform.js';\nimport { URI } from '../../../../base/common/uri.js';\nimport { RawContextKey } from '../../../../platform/contextkey/common/contextkey.js';\nimport { createDecorator } from '../../../../platform/instantiation/common/instantiation.js';\n\n/**\n * Mime type used by the output editor.\n */\nexport const OUTPUT_MIME = 'text/x-code-output';\n\n/**\n * Id used by the output editor.\n */\nexport const OUTPUT_MODE_ID = 'Log';\n\n/**\n * Mime type used by the log output editor.\n */\nexport const LOG_MIME = 'text/x-code-log-output';\n\n/**\n * Id used by the log output editor.\n */\nexport const LOG_MODE_ID = 'log';\n\n/**\n * Output view id\n */\nexport const OUTPUT_VIEW_ID = 'workbench.panel.output';\n\nexport const CONTEXT_IN_OUTPUT = new RawContextKey<boolean>('inOutput', false);\n\nexport const CONTEXT_ACTIVE_FILE_OUTPUT = new RawContextKey<boolean>('activeLogOutput', false);\n\nexport const CONTEXT_ACTIVE_OUTPUT_LEVEL_SETTABLE = new RawContextKey<boolean>('activeLogOutput.levelSettable', false);\n\nexport const CONTEXT_ACTIVE_OUTPUT_LEVEL = new RawContextKey<string>('activeLogOutput.level', '');\n\nexport const CONTEXT_ACTIVE_OUTPUT_LEVEL_IS_DEFAULT = new RawContextKey<boolean>('activeLogOutput.levelIsDefault', false);\n\nexport const CONTEXT_OUTPUT_SCROLL_LOCK = new RawContextKey<boolean>(`outputView.scrollLock`, false);\n\nexport const IOutputService = createDecorator<IOutputService>('outputService');\n\n/**\n * The output service to manage output from the various processes running.\n */\nexport interface IOutputService {\n\treadonly _serviceBrand: undefined;\n\n\t/**\n\t * Given the channel id returns the output channel instance.\n\t * Channel should be first registered via OutputChannelRegistry.\n\t */\n\tgetChannel(id: string): IOutputChannel | undefined;\n\n\t/**\n\t * Given the channel id returns the registered output channel descriptor.\n\t */\n\tgetChannelDescriptor(id: string): IOutputChannelDescriptor | undefined;\n\n\t/**\n\t * Returns an array of all known output channels descriptors.\n\t */\n\tgetChannelDescriptors(): IOutputChannelDescriptor[];\n\n\t/**\n\t * Returns the currently active channel.\n\t * Only one channel can be active at a given moment.\n\t */\n\tgetActiveChannel(): IOutputChannel | undefined;\n\n\t/**\n\t * Show the channel with the passed id.\n\t */\n\tshowChannel(id: string, preserveFocus?: boolean): Promise<void>;\n\n\t/**\n\t * Allows to register on active output channel change.\n\t */\n\tonActiveOutputChannel: Event<string>;\n}\n\nexport enum OutputChannelUpdateMode {\n\tAppend = 1,\n\tReplace,\n\tClear\n}\n\nexport interface IOutputChannel {\n\n\t/**\n\t * Identifier of the output channel.\n\t */\n\tid: string;\n\n\t/**\n\t * Label of the output channel to be displayed to the user.\n\t */\n\tlabel: string;\n\n\t/**\n\t * URI of the output channel.\n\t */\n\turi: URI;\n\n\t/**\n\t * Appends output to the channel.\n\t */\n\tappend(output: string): void;\n\n\t/**\n\t * Clears all received output for this channel.\n\t */\n\tclear(): void;\n\n\t/**\n\t * Replaces the content of the channel with given output\n\t */\n\treplace(output: string): void;\n\n\t/**\n\t * Update the channel.\n\t */\n\tupdate(mode: OutputChannelUpdateMode.Append): void;\n\tupdate(mode: OutputChannelUpdateMode, till: number): void;\n\n\t/**\n\t * Disposes the output channel.\n\t */\n\tdispose(): void;\n}\n\nexport const Extensions = {\n\tOutputChannels: 'workbench.contributions.outputChannels'\n};\n\nexport interface IOutputChannelDescriptor {\n\tid: string;\n\tlabel: string;\n\tlog: boolean;\n\tlanguageId?: string;\n\tfile?: URI;\n\textensionId?: string;\n}\n\nexport interface IFileOutputChannelDescriptor extends IOutputChannelDescriptor {\n\tfile: URI;\n}\n\nexport interface IOutputChannelRegistry {\n\n\treadonly onDidRegisterChannel: Event<string>;\n\treadonly onDidRemoveChannel: Event<string>;\n\n\t/**\n\t * Make an output channel known to the output world.\n\t */\n\tregisterChannel(descriptor: IOutputChannelDescriptor): void;\n\n\t/**\n\t * Returns the list of channels known to the output world.\n\t */\n\tgetChannels(): IOutputChannelDescriptor[];\n\n\t/**\n\t * Returns the channel with the passed id.\n\t */\n\tgetChannel(id: string): IOutputChannelDescriptor | undefined;\n\n\t/**\n\t * Remove the output channel with the passed id.\n\t */\n\tremoveChannel(id: string): void;\n}\n\nclass OutputChannelRegistry implements IOutputChannelRegistry {\n\tprivate channels = new Map<string, IOutputChannelDescriptor>();\n\n\tprivate readonly _onDidRegisterChannel = new Emitter<string>();\n\treadonly onDidRegisterChannel: Event<string> = this._onDidRegisterChannel.event;\n\n\tprivate readonly _onDidRemoveChannel = new Emitter<string>();\n\treadonly onDidRemoveChannel: Event<string> = this._onDidRemoveChannel.event;\n\n\tpublic registerChannel(descriptor: IOutputChannelDescriptor): void {\n\t\tif (!this.channels.has(descriptor.id)) {\n\t\t\tthis.channels.set(descriptor.id, descriptor);\n\t\t\tthis._onDidRegisterChannel.fire(descriptor.id);\n\t\t}\n\t}\n\n\tpublic getChannels(): IOutputChannelDescriptor[] {\n\t\tconst result: IOutputChannelDescriptor[] = [];\n\t\tthis.channels.forEach(value => result.push(value));\n\t\treturn result;\n\t}\n\n\tpublic getChannel(id: string): IOutputChannelDescriptor | undefined {\n\t\treturn this.channels.get(id);\n\t}\n\n\tpublic removeChannel(id: string): void {\n\t\tthis.channels.delete(id);\n\t\tthis._onDidRemoveChannel.fire(id);\n\t}\n}\n\nRegistry.add(Extensions.OutputChannels, new OutputChannelRegistry());\n\nexport const ACTIVE_OUTPUT_CHANNEL_CONTEXT = new RawContextKey<string>('activeOutputChannel', '');\n"],
  "mappings": ";;AAKA,SAAS,OAAO,eAAe;AAC/B,SAAS,gBAAgB;AACzB,SAAS,WAAW;AACpB,SAAS,qBAAqB;AAC9B,SAAS,uBAAuB;AAKzB,MAAM,cAAc;AAKpB,MAAM,iBAAiB;AAKvB,MAAM,WAAW;AAKjB,MAAM,cAAc;AAKpB,MAAM,iBAAiB;AAEvB,MAAM,oBAAoB,IAAI,cAAuB,YAAY,KAAK;AAEtE,MAAM,6BAA6B,IAAI,cAAuB,mBAAmB,KAAK;AAEtF,MAAM,uCAAuC,IAAI,cAAuB,iCAAiC,KAAK;AAE9G,MAAM,8BAA8B,IAAI,cAAsB,yBAAyB,EAAE;AAEzF,MAAM,yCAAyC,IAAI,cAAuB,kCAAkC,KAAK;AAEjH,MAAM,6BAA6B,IAAI,cAAuB,yBAAyB,KAAK;AAE5F,MAAM,iBAAiB,gBAAgC,eAAe;AAyCtE,IAAK,0BAAL,kBAAKA,6BAAL;AACN,EAAAA,kDAAA,YAAS,KAAT;AACA,EAAAA,kDAAA;AACA,EAAAA,kDAAA;AAHW,SAAAA;AAAA,GAAA;AAkDL,MAAM,aAAa;AAAA,EACzB,gBAAgB;AACjB;AAyCA,MAAM,sBAAwD;AAAA,EAtL9D,OAsL8D;AAAA;AAAA;AAAA,EACrD,WAAW,oBAAI,IAAsC;AAAA,EAE5C,wBAAwB,IAAI,QAAgB;AAAA,EACpD,uBAAsC,KAAK,sBAAsB;AAAA,EAEzD,sBAAsB,IAAI,QAAgB;AAAA,EAClD,qBAAoC,KAAK,oBAAoB;AAAA,EAE/D,gBAAgB,YAA4C;AAClE,QAAI,CAAC,KAAK,SAAS,IAAI,WAAW,EAAE,GAAG;AACtC,WAAK,SAAS,IAAI,WAAW,IAAI,UAAU;AAC3C,WAAK,sBAAsB,KAAK,WAAW,EAAE;AAAA,IAC9C;AAAA,EACD;AAAA,EAEO,cAA0C;AAChD,UAAM,SAAqC,CAAC;AAC5C,SAAK,SAAS,QAAQ,WAAS,OAAO,KAAK,KAAK,CAAC;AACjD,WAAO;AAAA,EACR;AAAA,EAEO,WAAW,IAAkD;AACnE,WAAO,KAAK,SAAS,IAAI,EAAE;AAAA,EAC5B;AAAA,EAEO,cAAc,IAAkB;AACtC,SAAK,SAAS,OAAO,EAAE;AACvB,SAAK,oBAAoB,KAAK,EAAE;AAAA,EACjC;AACD;AAEA,SAAS,IAAI,WAAW,gBAAgB,IAAI,sBAAsB,CAAC;AAE5D,MAAM,gCAAgC,IAAI,cAAsB,uBAAuB,EAAE;",
  "names": ["OutputChannelUpdateMode"]
}
