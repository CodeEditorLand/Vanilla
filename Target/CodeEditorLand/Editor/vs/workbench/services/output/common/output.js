import{Emitter as i}from"../../../../base/common/event.js";import"../../../../base/common/uri.js";import{RawContextKey as t}from"../../../../platform/contextkey/common/contextkey.js";import{createDecorator as o}from"../../../../platform/instantiation/common/instantiation.js";import{Registry as s}from"../../../../platform/registry/common/platform.js";const I="text/x-code-output",T="Log",_="text/x-code-log-output",E="log",D="workbench.panel.output",f=new t("inOutput",!1),x=new t("activeLogOutput",!1),m=new t("activeLogOutput.levelSettable",!1),L=new t("activeLogOutput.level",""),R=new t("activeLogOutput.levelIsDefault",!1),U=new t("outputView.scrollLock",!1),b=o("outputService");var l=(n=>(n[n.Append=1]="Append",n[n.Replace=2]="Replace",n[n.Clear=3]="Clear",n))(l||{});const a={OutputChannels:"workbench.contributions.outputChannels"};class u{channels=new Map;_onDidRegisterChannel=new i;onDidRegisterChannel=this._onDidRegisterChannel.event;_onDidRemoveChannel=new i;onDidRemoveChannel=this._onDidRemoveChannel.event;registerChannel(e){this.channels.has(e.id)||(this.channels.set(e.id,e),this._onDidRegisterChannel.fire(e.id))}getChannels(){const e=[];return this.channels.forEach(r=>e.push(r)),e}getChannel(e){return this.channels.get(e)}removeChannel(e){this.channels.delete(e),this._onDidRemoveChannel.fire(e)}}s.add(a.OutputChannels,new u);const w=new t("activeOutputChannel","");export{w as ACTIVE_OUTPUT_CHANNEL_CONTEXT,x as CONTEXT_ACTIVE_FILE_OUTPUT,L as CONTEXT_ACTIVE_OUTPUT_LEVEL,R as CONTEXT_ACTIVE_OUTPUT_LEVEL_IS_DEFAULT,m as CONTEXT_ACTIVE_OUTPUT_LEVEL_SETTABLE,f as CONTEXT_IN_OUTPUT,U as CONTEXT_OUTPUT_SCROLL_LOCK,a as Extensions,b as IOutputService,_ as LOG_MIME,E as LOG_MODE_ID,I as OUTPUT_MIME,T as OUTPUT_MODE_ID,D as OUTPUT_VIEW_ID,l as OutputChannelUpdateMode};
