{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/aiEmbeddingVector/common/aiEmbeddingVectorService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { createDecorator } from '../../../../platform/instantiation/common/instantiation.js';\nimport { CancellationToken } from '../../../../base/common/cancellation.js';\nimport { CancelablePromise, createCancelablePromise, raceCancellablePromises, timeout } from '../../../../base/common/async.js';\nimport { IDisposable } from '../../../../base/common/lifecycle.js';\nimport { InstantiationType, registerSingleton } from '../../../../platform/instantiation/common/extensions.js';\nimport { StopWatch } from '../../../../base/common/stopwatch.js';\nimport { ILogService } from '../../../../platform/log/common/log.js';\n\nexport const IAiEmbeddingVectorService = createDecorator<IAiEmbeddingVectorService>('IAiEmbeddingVectorService');\n\nexport interface IAiEmbeddingVectorService {\n\treadonly _serviceBrand: undefined;\n\n\tisEnabled(): boolean;\n\tgetEmbeddingVector(str: string, token: CancellationToken): Promise<number[]>;\n\tgetEmbeddingVector(strings: string[], token: CancellationToken): Promise<number[][]>;\n\tregisterAiEmbeddingVectorProvider(model: string, provider: IAiEmbeddingVectorProvider): IDisposable;\n}\n\nexport interface IAiEmbeddingVectorProvider {\n\tprovideAiEmbeddingVector(strings: string[], token: CancellationToken): Promise<number[][]>;\n}\n\nexport class AiEmbeddingVectorService implements IAiEmbeddingVectorService {\n\treadonly _serviceBrand: undefined;\n\n\tstatic readonly DEFAULT_TIMEOUT = 1000 * 10; // 10 seconds\n\n\tprivate readonly _providers: IAiEmbeddingVectorProvider[] = [];\n\n\tconstructor(@ILogService private readonly logService: ILogService) { }\n\n\tisEnabled(): boolean {\n\t\treturn this._providers.length > 0;\n\t}\n\n\tregisterAiEmbeddingVectorProvider(model: string, provider: IAiEmbeddingVectorProvider): IDisposable {\n\t\tthis._providers.push(provider);\n\t\treturn {\n\t\t\tdispose: () => {\n\t\t\t\tconst index = this._providers.indexOf(provider);\n\t\t\t\tif (index >= 0) {\n\t\t\t\t\tthis._providers.splice(index, 1);\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t}\n\n\tgetEmbeddingVector(str: string, token: CancellationToken): Promise<number[]>;\n\tgetEmbeddingVector(strings: string[], token: CancellationToken): Promise<number[][]>;\n\tasync getEmbeddingVector(strings: string | string[], token: CancellationToken): Promise<number[] | number[][]> {\n\t\tif (this._providers.length === 0) {\n\t\t\tthrow new Error('No embedding vector providers registered');\n\t\t}\n\n\t\tconst stopwatch = StopWatch.create();\n\n\t\tconst cancellablePromises: Array<CancelablePromise<number[][]>> = [];\n\n\t\tconst timer = timeout(AiEmbeddingVectorService.DEFAULT_TIMEOUT);\n\t\tconst disposable = token.onCancellationRequested(() => {\n\t\t\tdisposable.dispose();\n\t\t\ttimer.cancel();\n\t\t});\n\n\t\tfor (const provider of this._providers) {\n\t\t\tcancellablePromises.push(createCancelablePromise(async t => {\n\t\t\t\ttry {\n\t\t\t\t\treturn await provider.provideAiEmbeddingVector(\n\t\t\t\t\t\tArray.isArray(strings) ? strings : [strings],\n\t\t\t\t\t\tt\n\t\t\t\t\t);\n\t\t\t\t} catch (e) {\n\t\t\t\t\t// logged in extension host\n\t\t\t\t}\n\t\t\t\t// Wait for the timer to finish to allow for another provider to resolve.\n\t\t\t\t// Alternatively, if something resolved, or we've timed out, this will throw\n\t\t\t\t// as expected.\n\t\t\t\tawait timer;\n\t\t\t\tthrow new Error('Embedding vector provider timed out');\n\t\t\t}));\n\t\t}\n\n\t\tcancellablePromises.push(createCancelablePromise(async (t) => {\n\t\t\tconst disposable = t.onCancellationRequested(() => {\n\t\t\t\ttimer.cancel();\n\t\t\t\tdisposable.dispose();\n\t\t\t});\n\t\t\tawait timer;\n\t\t\tthrow new Error('Embedding vector provider timed out');\n\t\t}));\n\n\t\ttry {\n\t\t\tconst result = await raceCancellablePromises(cancellablePromises);\n\n\t\t\t// If we have a single result, return it directly, otherwise return an array.\n\t\t\t// This aligns with the API overloads.\n\t\t\tif (result.length === 1) {\n\t\t\t\treturn result[0];\n\t\t\t}\n\t\t\treturn result;\n\t\t} finally {\n\t\t\tstopwatch.stop();\n\t\t\tthis.logService.trace(`[AiEmbeddingVectorService]: getEmbeddingVector took ${stopwatch.elapsed()}ms`);\n\t\t}\n\t}\n}\n\nregisterSingleton(IAiEmbeddingVectorService, AiEmbeddingVectorService, InstantiationType.Delayed);\n"],
  "mappings": ";;;;;;;;;;;;AAKA,SAAS,uBAAuB;AAChC,SAAS,yBAAyB;AAClC,SAAS,mBAAmB,yBAAyB,yBAAyB,eAAe;AAC7F,SAAS,mBAAmB;AAC5B,SAAS,mBAAmB,yBAAyB;AACrD,SAAS,iBAAiB;AAC1B,SAAS,mBAAmB;AAErB,MAAM,4BAA4B,gBAA2C,2BAA2B;AAexG,IAAM,2BAAN,MAAoE;AAAA,EAO1E,YAA0C,YAAyB;AAAzB;AAAA,EAA2B;AAAA,EAnCtE,OA4B2E;AAAA;AAAA;AAAA,EACjE;AAAA,EAET,OAAgB,kBAAkB,MAAO;AAAA;AAAA,EAExB,aAA2C,CAAC;AAAA,EAI7D,YAAqB;AACpB,WAAO,KAAK,WAAW,SAAS;AAAA,EACjC;AAAA,EAEA,kCAAkC,OAAe,UAAmD;AACnG,SAAK,WAAW,KAAK,QAAQ;AAC7B,WAAO;AAAA,MACN,SAAS,6BAAM;AACd,cAAM,QAAQ,KAAK,WAAW,QAAQ,QAAQ;AAC9C,YAAI,SAAS,GAAG;AACf,eAAK,WAAW,OAAO,OAAO,CAAC;AAAA,QAChC;AAAA,MACD,GALS;AAAA,IAMV;AAAA,EACD;AAAA,EAIA,MAAM,mBAAmB,SAA4B,OAA0D;AAC9G,QAAI,KAAK,WAAW,WAAW,GAAG;AACjC,YAAM,IAAI,MAAM,0CAA0C;AAAA,IAC3D;AAEA,UAAM,YAAY,UAAU,OAAO;AAEnC,UAAM,sBAA4D,CAAC;AAEnE,UAAM,QAAQ,QAAQ,yBAAyB,eAAe;AAC9D,UAAM,aAAa,MAAM,wBAAwB,MAAM;AACtD,iBAAW,QAAQ;AACnB,YAAM,OAAO;AAAA,IACd,CAAC;AAED,eAAW,YAAY,KAAK,YAAY;AACvC,0BAAoB,KAAK,wBAAwB,OAAM,MAAK;AAC3D,YAAI;AACH,iBAAO,MAAM,SAAS;AAAA,YACrB,MAAM,QAAQ,OAAO,IAAI,UAAU,CAAC,OAAO;AAAA,YAC3C;AAAA,UACD;AAAA,QACD,SAAS,GAAG;AAAA,QAEZ;AAIA,cAAM;AACN,cAAM,IAAI,MAAM,qCAAqC;AAAA,MACtD,CAAC,CAAC;AAAA,IACH;AAEA,wBAAoB,KAAK,wBAAwB,OAAO,MAAM;AAC7D,YAAMA,cAAa,EAAE,wBAAwB,MAAM;AAClD,cAAM,OAAO;AACb,QAAAA,YAAW,QAAQ;AAAA,MACpB,CAAC;AACD,YAAM;AACN,YAAM,IAAI,MAAM,qCAAqC;AAAA,IACtD,CAAC,CAAC;AAEF,QAAI;AACH,YAAM,SAAS,MAAM,wBAAwB,mBAAmB;AAIhE,UAAI,OAAO,WAAW,GAAG;AACxB,eAAO,OAAO,CAAC;AAAA,MAChB;AACA,aAAO;AAAA,IACR,UAAE;AACD,gBAAU,KAAK;AACf,WAAK,WAAW,MAAM,uDAAuD,UAAU,QAAQ,CAAC,IAAI;AAAA,IACrG;AAAA,EACD;AACD;AAnFa,2BAAN;AAAA,EAOO;AAAA,GAPD;AAqFb,kBAAkB,2BAA2B,0BAA0B,kBAAkB,OAAO;",
  "names": ["disposable"]
}
