import { URI } from "vs/base/common/uri";
import { AbstractExtensionManagementService, IInstallExtensionTask, InstallExtensionTaskOptions, IUninstallExtensionTask, UninstallExtensionTaskOptions } from "vs/platform/extensionManagement/common/abstractExtensionManagementService";
import { IExtensionGalleryService, IGalleryExtension, ILocalExtension, InstallOptions, IProductVersion, Metadata } from "vs/platform/extensionManagement/common/extensionManagement";
import { ExtensionType, IExtensionIdentifier, IExtensionManifest, TargetPlatform } from "vs/platform/extensions/common/extensions";
import { ILogService } from "vs/platform/log/common/log";
import { IProductService } from "vs/platform/product/common/productService";
import { ITelemetryService } from "vs/platform/telemetry/common/telemetry";
import { IUriIdentityService } from "vs/platform/uriIdentity/common/uriIdentity";
import { IUserDataProfilesService } from "vs/platform/userDataProfile/common/userDataProfile";
import { IProfileAwareExtensionManagementService, IWebExtensionsScannerService } from "vs/workbench/services/extensionManagement/common/extensionManagement";
import { IExtensionManifestPropertiesService } from "vs/workbench/services/extensions/common/extensionManifestPropertiesService";
import { IUserDataProfileService } from "vs/workbench/services/userDataProfile/common/userDataProfile";
export declare class WebExtensionManagementService extends AbstractExtensionManagementService implements IProfileAwareExtensionManagementService {
    private readonly webExtensionsScannerService;
    private readonly extensionManifestPropertiesService;
    private readonly userDataProfileService;
    readonly _serviceBrand: undefined;
    private readonly disposables;
    get onProfileAwareInstallExtension(): any;
    get onInstallExtension(): any;
    get onProfileAwareDidInstallExtensions(): any;
    get onDidInstallExtensions(): any;
    get onProfileAwareUninstallExtension(): any;
    get onUninstallExtension(): any;
    get onProfileAwareDidUninstallExtension(): any;
    get onDidUninstallExtension(): any;
    private readonly _onDidChangeProfile;
    readonly onDidChangeProfile: any;
    constructor(extensionGalleryService: IExtensionGalleryService, telemetryService: ITelemetryService, logService: ILogService, webExtensionsScannerService: IWebExtensionsScannerService, extensionManifestPropertiesService: IExtensionManifestPropertiesService, userDataProfileService: IUserDataProfileService, productService: IProductService, userDataProfilesService: IUserDataProfilesService, uriIdentityService: IUriIdentityService);
    private filterEvent;
    getTargetPlatform(): Promise<TargetPlatform>;
    canInstall(gallery: IGalleryExtension): Promise<boolean>;
    getInstalled(type?: ExtensionType, profileLocation?: URI): Promise<ILocalExtension[]>;
    install(location: URI, options?: InstallOptions): Promise<ILocalExtension>;
    installFromLocation(location: URI, profileLocation: URI): Promise<ILocalExtension>;
    protected copyExtension(extension: ILocalExtension, fromProfileLocation: URI, toProfileLocation: URI, metadata: Partial<Metadata>): Promise<ILocalExtension>;
    installExtensionsFromProfile(extensions: IExtensionIdentifier[], fromProfileLocation: URI, toProfileLocation: URI): Promise<ILocalExtension[]>;
    updateMetadata(local: ILocalExtension, metadata: Partial<Metadata>, profileLocation: URI): Promise<ILocalExtension>;
    copyExtensions(fromProfileLocation: URI, toProfileLocation: URI): Promise<void>;
    protected getCompatibleVersion(extension: IGalleryExtension, sameVersion: boolean, includePreRelease: boolean, productVersion: IProductVersion): Promise<IGalleryExtension | null>;
    private isConfiguredToExecuteOnWeb;
    protected getCurrentExtensionsManifestLocation(): URI;
    protected createInstallExtensionTask(manifest: IExtensionManifest, extension: URI | IGalleryExtension, options: InstallExtensionTaskOptions): IInstallExtensionTask;
    protected createUninstallExtensionTask(extension: ILocalExtension, options: UninstallExtensionTaskOptions): IUninstallExtensionTask;
    zip(extension: ILocalExtension): Promise<URI>;
    getManifest(vsix: URI): Promise<IExtensionManifest>;
    download(): Promise<URI>;
    reinstallFromGallery(): Promise<ILocalExtension>;
    cleanUp(): Promise<void>;
    private whenProfileChanged;
}
