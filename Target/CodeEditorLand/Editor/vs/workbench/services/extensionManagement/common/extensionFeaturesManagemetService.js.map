{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/extensionManagement/common/extensionFeaturesManagemetService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Emitter } from '../../../../base/common/event.js';\nimport { ExtensionIdentifier } from '../../../../platform/extensions/common/extensions.js';\nimport { Disposable } from '../../../../base/common/lifecycle.js';\nimport Severity from '../../../../base/common/severity.js';\nimport { Extensions, IExtensionFeatureAccessData, IExtensionFeaturesManagementService, IExtensionFeaturesRegistry } from './extensionFeatures.js';\nimport { InstantiationType, registerSingleton } from '../../../../platform/instantiation/common/extensions.js';\nimport { IStorageService, StorageScope, StorageTarget } from '../../../../platform/storage/common/storage.js';\nimport { Registry } from '../../../../platform/registry/common/platform.js';\nimport { IStringDictionary } from '../../../../base/common/collections.js';\nimport { Mutable, isBoolean } from '../../../../base/common/types.js';\nimport { IDialogService } from '../../../../platform/dialogs/common/dialogs.js';\nimport { localize } from '../../../../nls.js';\nimport { IExtensionService } from '../../extensions/common/extensions.js';\nimport { IStorageChangeEvent } from '../../../../base/parts/storage/common/storage.js';\nimport { distinct } from '../../../../base/common/arrays.js';\nimport { equals } from '../../../../base/common/objects.js';\n\ninterface IExtensionFeatureState {\n\tdisabled?: boolean;\n\taccessData: Mutable<IExtensionFeatureAccessData>;\n}\n\nconst FEATURES_STATE_KEY = 'extension.features.state';\n\nclass ExtensionFeaturesManagementService extends Disposable implements IExtensionFeaturesManagementService {\n\tdeclare readonly _serviceBrand: undefined;\n\n\tprivate readonly _onDidChangeEnablement = this._register(new Emitter<{ extension: ExtensionIdentifier; featureId: string; enabled: boolean }>());\n\treadonly onDidChangeEnablement = this._onDidChangeEnablement.event;\n\n\tprivate readonly _onDidChangeAccessData = this._register(new Emitter<{ extension: ExtensionIdentifier; featureId: string; accessData: IExtensionFeatureAccessData }>());\n\treadonly onDidChangeAccessData = this._onDidChangeAccessData.event;\n\n\tprivate readonly registry: IExtensionFeaturesRegistry;\n\tprivate extensionFeaturesState = new Map<string, Map<string, IExtensionFeatureState>>();\n\n\tconstructor(\n\t\t@IStorageService private readonly storageService: IStorageService,\n\t\t@IDialogService private readonly dialogService: IDialogService,\n\t\t@IExtensionService private readonly extensionService: IExtensionService,\n\t) {\n\t\tsuper();\n\t\tthis.registry = Registry.as<IExtensionFeaturesRegistry>(Extensions.ExtensionFeaturesRegistry);\n\t\tthis.extensionFeaturesState = this.loadState();\n\t\tthis._register(storageService.onDidChangeValue(StorageScope.PROFILE, FEATURES_STATE_KEY, this._store)(e => this.onDidStorageChange(e)));\n\t}\n\n\tisEnabled(extension: ExtensionIdentifier, featureId: string): boolean {\n\t\tconst feature = this.registry.getExtensionFeature(featureId);\n\t\tif (!feature) {\n\t\t\treturn false;\n\t\t}\n\t\tconst isDisabled = this.getExtensionFeatureState(extension, featureId)?.disabled;\n\t\tif (isBoolean(isDisabled)) {\n\t\t\treturn !isDisabled;\n\t\t}\n\t\tconst defaultExtensionAccess = feature.access.extensionsList?.[extension.value];\n\t\tif (isBoolean(defaultExtensionAccess)) {\n\t\t\treturn defaultExtensionAccess;\n\t\t}\n\t\treturn !feature.access.requireUserConsent;\n\t}\n\n\tsetEnablement(extension: ExtensionIdentifier, featureId: string, enabled: boolean): void {\n\t\tconst feature = this.registry.getExtensionFeature(featureId);\n\t\tif (!feature) {\n\t\t\tthrow new Error(`No feature with id '${featureId}'`);\n\t\t}\n\t\tconst featureState = this.getAndSetIfNotExistsExtensionFeatureState(extension, featureId);\n\t\tif (featureState.disabled !== !enabled) {\n\t\t\tfeatureState.disabled = !enabled;\n\t\t\tthis._onDidChangeEnablement.fire({ extension, featureId, enabled });\n\t\t\tthis.saveState();\n\t\t}\n\t}\n\n\tgetEnablementData(featureId: string): { readonly extension: ExtensionIdentifier; readonly enabled: boolean }[] {\n\t\tconst result: { readonly extension: ExtensionIdentifier; readonly enabled: boolean }[] = [];\n\t\tconst feature = this.registry.getExtensionFeature(featureId);\n\t\tif (feature) {\n\t\t\tfor (const [extension, featuresStateMap] of this.extensionFeaturesState) {\n\t\t\t\tconst featureState = featuresStateMap.get(featureId);\n\t\t\t\tif (featureState?.disabled !== undefined) {\n\t\t\t\t\tresult.push({ extension: new ExtensionIdentifier(extension), enabled: !featureState.disabled });\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n\n\tasync getAccess(extension: ExtensionIdentifier, featureId: string, justification?: string): Promise<boolean> {\n\t\tconst feature = this.registry.getExtensionFeature(featureId);\n\t\tif (!feature) {\n\t\t\treturn false;\n\t\t}\n\t\tconst featureState = this.getAndSetIfNotExistsExtensionFeatureState(extension, featureId);\n\t\tif (featureState.disabled) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (featureState.disabled === undefined) {\n\t\t\tlet enabled = true;\n\t\t\tif (feature.access.requireUserConsent) {\n\t\t\t\tconst extensionDescription = this.extensionService.extensions.find(e => ExtensionIdentifier.equals(e.identifier, extension));\n\t\t\t\tconst confirmationResult = await this.dialogService.confirm({\n\t\t\t\t\ttitle: localize('accessExtensionFeature', \"Access '{0}' Feature\", feature.label),\n\t\t\t\t\tmessage: localize('accessExtensionFeatureMessage', \"'{0}' extension would like to access the '{1}' feature.\", extensionDescription?.displayName ?? extension.value, feature.label),\n\t\t\t\t\tdetail: justification ?? feature.description,\n\t\t\t\t\tcustom: true,\n\t\t\t\t\tprimaryButton: localize('allow', \"Allow\"),\n\t\t\t\t\tcancelButton: localize('disallow', \"Don't Allow\"),\n\t\t\t\t});\n\t\t\t\tenabled = confirmationResult.confirmed;\n\t\t\t}\n\t\t\tthis.setEnablement(extension, featureId, enabled);\n\t\t\tif (!enabled) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\tfeatureState.accessData.current = {\n\t\t\tcount: featureState.accessData.current?.count ? featureState.accessData.current?.count + 1 : 1,\n\t\t\tlastAccessed: Date.now(),\n\t\t\tstatus: featureState.accessData.current?.status\n\t\t};\n\t\tfeatureState.accessData.totalCount = featureState.accessData.totalCount + 1;\n\t\tthis.saveState();\n\t\tthis._onDidChangeAccessData.fire({ extension, featureId, accessData: featureState.accessData });\n\t\treturn true;\n\t}\n\n\tgetAccessData(extension: ExtensionIdentifier, featureId: string): IExtensionFeatureAccessData | undefined {\n\t\tconst feature = this.registry.getExtensionFeature(featureId);\n\t\tif (!feature) {\n\t\t\treturn;\n\t\t}\n\t\treturn this.getExtensionFeatureState(extension, featureId)?.accessData;\n\t}\n\n\tsetStatus(extension: ExtensionIdentifier, featureId: string, status: { readonly severity: Severity; readonly message: string } | undefined): void {\n\t\tconst feature = this.registry.getExtensionFeature(featureId);\n\t\tif (!feature) {\n\t\t\tthrow new Error(`No feature with id '${featureId}'`);\n\t\t}\n\t\tconst featureState = this.getAndSetIfNotExistsExtensionFeatureState(extension, featureId);\n\t\tfeatureState.accessData.current = {\n\t\t\tcount: featureState.accessData.current?.count ?? 0,\n\t\t\tlastAccessed: featureState.accessData.current?.lastAccessed ?? 0,\n\t\t\tstatus\n\t\t};\n\t\tthis._onDidChangeAccessData.fire({ extension, featureId, accessData: this.getAccessData(extension, featureId)! });\n\t}\n\n\tprivate getExtensionFeatureState(extension: ExtensionIdentifier, featureId: string): IExtensionFeatureState | undefined {\n\t\treturn this.extensionFeaturesState.get(extension.value)?.get(featureId);\n\t}\n\n\tprivate getAndSetIfNotExistsExtensionFeatureState(extension: ExtensionIdentifier, featureId: string): Mutable<IExtensionFeatureState> {\n\t\tlet extensionState = this.extensionFeaturesState.get(extension.value);\n\t\tif (!extensionState) {\n\t\t\textensionState = new Map<string, IExtensionFeatureState>();\n\t\t\tthis.extensionFeaturesState.set(extension.value, extensionState);\n\t\t}\n\t\tlet featureState = extensionState.get(featureId);\n\t\tif (!featureState) {\n\t\t\tfeatureState = { accessData: { totalCount: 0 } };\n\t\t\textensionState.set(featureId, featureState);\n\t\t}\n\t\treturn featureState;\n\t}\n\n\tprivate onDidStorageChange(e: IStorageChangeEvent): void {\n\t\tif (e.external) {\n\t\t\tconst oldState = this.extensionFeaturesState;\n\t\t\tthis.extensionFeaturesState = this.loadState();\n\t\t\tfor (const extensionId of distinct([...oldState.keys(), ...this.extensionFeaturesState.keys()])) {\n\t\t\t\tconst extension = new ExtensionIdentifier(extensionId);\n\t\t\t\tconst oldExtensionFeaturesState = oldState.get(extensionId);\n\t\t\t\tconst newExtensionFeaturesState = this.extensionFeaturesState.get(extensionId);\n\t\t\t\tfor (const featureId of distinct([...oldExtensionFeaturesState?.keys() ?? [], ...newExtensionFeaturesState?.keys() ?? []])) {\n\t\t\t\t\tconst isEnabled = this.isEnabled(extension, featureId);\n\t\t\t\t\tconst wasEnabled = !oldExtensionFeaturesState?.get(featureId)?.disabled;\n\t\t\t\t\tif (isEnabled !== wasEnabled) {\n\t\t\t\t\t\tthis._onDidChangeEnablement.fire({ extension, featureId, enabled: isEnabled });\n\t\t\t\t\t}\n\t\t\t\t\tconst newAccessData = this.getAccessData(extension, featureId);\n\t\t\t\t\tconst oldAccessData = oldExtensionFeaturesState?.get(featureId)?.accessData;\n\t\t\t\t\tif (!equals(newAccessData, oldAccessData)) {\n\t\t\t\t\t\tthis._onDidChangeAccessData.fire({ extension, featureId, accessData: newAccessData ?? { totalCount: 0 } });\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate loadState(): Map<string, Map<string, IExtensionFeatureState>> {\n\t\tlet data: IStringDictionary<IStringDictionary<{ disabled?: boolean; accessCount: number }>> = {};\n\t\tconst raw = this.storageService.get(FEATURES_STATE_KEY, StorageScope.PROFILE, '{}');\n\t\ttry {\n\t\t\tdata = JSON.parse(raw);\n\t\t} catch (e) {\n\t\t\t// ignore\n\t\t}\n\t\tconst result = new Map<string, Map<string, IExtensionFeatureState>>();\n\t\tfor (const extensionId in data) {\n\t\t\tconst extensionFeatureState = new Map<string, IExtensionFeatureState>();\n\t\t\tconst extensionFeatures = data[extensionId];\n\t\t\tfor (const featureId in extensionFeatures) {\n\t\t\t\tconst extensionFeature = extensionFeatures[featureId];\n\t\t\t\textensionFeatureState.set(featureId, {\n\t\t\t\t\tdisabled: extensionFeature.disabled,\n\t\t\t\t\taccessData: {\n\t\t\t\t\t\ttotalCount: extensionFeature.accessCount\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t\tresult.set(extensionId, extensionFeatureState);\n\t\t}\n\t\treturn result;\n\t}\n\n\tprivate saveState(): void {\n\t\tconst data: IStringDictionary<IStringDictionary<{ disabled?: boolean; accessCount: number }>> = {};\n\t\tthis.extensionFeaturesState.forEach((extensionState, extensionId) => {\n\t\t\tconst extensionFeatures: IStringDictionary<{ disabled?: boolean; accessCount: number }> = {};\n\t\t\textensionState.forEach((featureState, featureId) => {\n\t\t\t\textensionFeatures[featureId] = {\n\t\t\t\t\tdisabled: featureState.disabled,\n\t\t\t\t\taccessCount: featureState.accessData.totalCount\n\t\t\t\t};\n\t\t\t});\n\t\t\tdata[extensionId] = extensionFeatures;\n\t\t});\n\t\tthis.storageService.store(FEATURES_STATE_KEY, JSON.stringify(data), StorageScope.PROFILE, StorageTarget.USER);\n\t}\n}\n\nregisterSingleton(IExtensionFeaturesManagementService, ExtensionFeaturesManagementService, InstantiationType.Delayed);\n"],
  "mappings": "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",
  "names": []
}
