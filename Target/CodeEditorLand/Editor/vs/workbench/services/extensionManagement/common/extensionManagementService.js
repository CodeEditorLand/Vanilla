var ne=Object.defineProperty;var te=Object.getOwnPropertyDescriptor;var C=(I,g,e,n)=>{for(var t=n>1?void 0:n?te(g,e):g,i=I.length-1,r;i>=0;i--)(r=I[i])&&(t=(n?r(g,e,t):r(t))||t);return n&&t&&ne(g,e,t),t},o=(I,g)=>(e,n)=>g(e,n,I);import{Emitter as M,Event as w,EventMultiplexer as h}from"../../../../base/common/event.js";import{IExtensionGalleryService as ie,ExtensionManagementError as re,ExtensionManagementErrorCode as X,InstallOperation as N,EXTENSION_INSTALL_SOURCE_CONTEXT as se,ExtensionInstallSource as ae}from"../../../../platform/extensionManagement/common/extensionManagement.js";import{IExtensionManagementServerService as oe}from"./extensionManagement.js";import{ExtensionType as O,isLanguagePackExtension as k,getWorkspaceSupportTypeMessage as le}from"../../../../platform/extensions/common/extensions.js";import{URI as ce}from"../../../../base/common/uri.js";import{Disposable as q,DisposableStore as ve}from"../../../../base/common/lifecycle.js";import{IConfigurationService as Se}from"../../../../platform/configuration/common/configuration.js";import{CancellationToken as A}from"../../../../base/common/cancellation.js";import{areSameExtensions as U,computeTargetPlatform as me}from"../../../../platform/extensionManagement/common/extensionManagementUtil.js";import{localize as c}from"../../../../nls.js";import{IProductService as xe}from"../../../../platform/product/common/productService.js";import{Schemas as y}from"../../../../base/common/network.js";import{IDownloadService as de}from"../../../../platform/download/common/download.js";import{coalesce as Ee}from"../../../../base/common/arrays.js";import{IDialogService as he}from"../../../../platform/dialogs/common/dialogs.js";import F from"../../../../base/common/severity.js";import{IUserDataSyncEnablementService as pe,SyncResource as ge}from"../../../../platform/userDataSync/common/userDataSync.js";import{Promises as G}from"../../../../base/common/async.js";import{IWorkspaceTrustRequestService as fe}from"../../../../platform/workspace/common/workspaceTrust.js";import{IExtensionManifestPropertiesService as ue}from"../../extensions/common/extensionManifestPropertiesService.js";import{IInstantiationService as Ie}from"../../../../platform/instantiation/common/instantiation.js";import{ICommandService as Me}from"../../../../platform/commands/common/commands.js";import{isString as we,isUndefined as ye}from"../../../../base/common/types.js";import{IFileService as Y}from"../../../../platform/files/common/files.js";import{ILogService as J}from"../../../../platform/log/common/log.js";import{CancellationError as $,getErrorMessage as V}from"../../../../base/common/errors.js";import{IUserDataProfileService as Pe}from"../../userDataProfile/common/userDataProfile.js";import{IWorkspaceContextService as ke,WorkbenchState as H}from"../../../../platform/workspace/common/workspace.js";import{IExtensionsScannerService as Q}from"../../../../platform/extensionManagement/common/extensionsScannerService.js";import{IStorageService as Ue,StorageScope as B,StorageTarget as Z}from"../../../../platform/storage/common/storage.js";import{IUriIdentityService as De}from"../../../../platform/uriIdentity/common/uriIdentity.js";import{ITelemetryService as ee}from"../../../../platform/telemetry/common/telemetry.js";function be(I){return I.type==="gallery"}let D=class extends q{constructor(e,n,t,i,r,s,l,a,v,S,x,d,P,f,u){super();this.extensionManagementServerService=e;this.extensionGalleryService=n;this.userDataProfileService=t;this.configurationService=i;this.productService=r;this.downloadService=s;this.userDataSyncEnablementService=l;this.dialogService=a;this.workspaceTrustRequestService=v;this.extensionManifestPropertiesService=S;this.fileService=x;this.logService=d;this.instantiationService=P;this.extensionsScannerService=f;this.telemetryService=u;this.workspaceExtensionManagementService=this._register(this.instantiationService.createInstance(p)),this.onDidEnableExtensions=this.workspaceExtensionManagementService.onDidChangeInvalidExtensions,this.extensionManagementServerService.localExtensionManagementServer&&this.servers.push(this.extensionManagementServerService.localExtensionManagementServer),this.extensionManagementServerService.remoteExtensionManagementServer&&this.servers.push(this.extensionManagementServerService.remoteExtensionManagementServer),this.extensionManagementServerService.webExtensionManagementServer&&this.servers.push(this.extensionManagementServerService.webExtensionManagementServer);const b=this._register(new h);this._register(b.add(this._onInstallExtension.event)),this.onInstallExtension=b.event;const R=this._register(new h);this._register(R.add(this._onDidInstallExtensions.event)),this.onDidInstallExtensions=R.event;const W=this._register(new h);this._register(W.add(this._onDidProfileAwareInstallExtensions.event)),this.onProfileAwareDidInstallExtensions=W.event;const L=this._register(new h);this._register(L.add(this._onUninstallExtension.event)),this.onUninstallExtension=L.event;const _=this._register(new h);this._register(_.add(this._onDidUninstallExtension.event)),this.onDidUninstallExtension=_.event;const T=this._register(new h);this._register(T.add(this._onDidProfileAwareUninstallExtension.event)),this.onProfileAwareDidUninstallExtension=T.event;const K=this._register(new h);this.onDidUpdateExtensionMetadata=K.event;const z=this._register(new h);this.onProfileAwareDidUpdateExtensionMetadata=z.event;const j=this._register(new h);this.onDidChangeProfile=j.event;for(const m of this.servers)this._register(b.add(w.map(m.extensionManagementService.onInstallExtension,E=>({...E,server:m})))),this._register(R.add(m.extensionManagementService.onDidInstallExtensions)),this._register(W.add(m.extensionManagementService.onProfileAwareDidInstallExtensions)),this._register(L.add(w.map(m.extensionManagementService.onUninstallExtension,E=>({...E,server:m})))),this._register(_.add(w.map(m.extensionManagementService.onDidUninstallExtension,E=>({...E,server:m})))),this._register(T.add(w.map(m.extensionManagementService.onProfileAwareDidUninstallExtension,E=>({...E,server:m})))),this._register(K.add(m.extensionManagementService.onDidUpdateExtensionMetadata)),this._register(z.add(m.extensionManagementService.onProfileAwareDidUpdateExtensionMetadata)),this._register(j.add(w.map(m.extensionManagementService.onDidChangeProfile,E=>({...E,server:m}))))}_onInstallExtension=this._register(new M);onInstallExtension;_onDidInstallExtensions=this._register(new M);onDidInstallExtensions;_onUninstallExtension=this._register(new M);onUninstallExtension;_onDidUninstallExtension=this._register(new M);onDidUninstallExtension;onDidUpdateExtensionMetadata;_onDidProfileAwareInstallExtensions=this._register(new M);onProfileAwareDidInstallExtensions;_onDidProfileAwareUninstallExtension=this._register(new M);onProfileAwareDidUninstallExtension;onProfileAwareDidUpdateExtensionMetadata;onDidChangeProfile;onDidEnableExtensions;servers=[];workspaceExtensionManagementService;async getInstalled(e,n,t){const i=[];return await Promise.all(this.servers.map(async r=>{const s=await r.extensionManagementService.getInstalled(e,n,t);if(r===this.getWorkspaceExtensionsServer()){const l=await this.getInstalledWorkspaceExtensions(!0);s.push(...l)}i.push(...s)})),i}uninstall(e,n){return this.uninstallExtensions([{extension:e,options:n}])}async uninstallExtensions(e){const n=[],t=new Map,i=(a,v,S)=>{let x=t.get(a);x||t.set(a,x=[]),x.push({extension:v,options:S})};for(const{extension:a,options:v}of e){if(a.isWorkspaceScoped){n.push(a);continue}const S=this.getServer(a);if(!S)throw new Error(`Invalid location ${a.location.toString()}`);if(i(S,a,v),this.servers.length>1&&k(a.manifest)){const x=this.servers.filter(d=>d!==S);for(const d of x){const f=(await d.extensionManagementService.getInstalled()).find(u=>!u.isBuiltin&&U(u.identifier,a.identifier));f&&i(d,f,v)}}}const r=[];for(const a of n)r.push(this.uninstallExtensionFromWorkspace(a));for(const[a,v]of t.entries())r.push(this.uninstallInServer(a,v));const l=(await Promise.allSettled(r)).filter(a=>a.status==="rejected").map(a=>a.reason);if(l.length)throw new Error(l.map(a=>a.message).join(`
`))}async uninstallInServer(e,n){if(e===this.extensionManagementServerService.localExtensionManagementServer&&this.extensionManagementServerService.remoteExtensionManagementServer)for(const{extension:t}of n){const r=(await this.extensionManagementServerService.remoteExtensionManagementServer.extensionManagementService.getInstalled(O.User)).filter(s=>!this.extensionManifestPropertiesService.prefersExecuteOnUI(s.manifest)&&s.manifest.extensionDependencies&&s.manifest.extensionDependencies.some(l=>U({id:l},t.identifier)));if(r.length)throw new Error(this.getDependentsErrorMessage(t,r))}return e.extensionManagementService.uninstallExtensions(n)}getDependentsErrorMessage(e,n){return n.length===1?c("singleDependentError","Cannot uninstall extension '{0}'. Extension '{1}' depends on this.",e.manifest.displayName||e.manifest.name,n[0].manifest.displayName||n[0].manifest.name):n.length===2?c("twoDependentsError","Cannot uninstall extension '{0}'. Extensions '{1}' and '{2}' depend on this.",e.manifest.displayName||e.manifest.name,n[0].manifest.displayName||n[0].manifest.name,n[1].manifest.displayName||n[1].manifest.name):c("multipleDependentsError","Cannot uninstall extension '{0}'. Extensions '{1}', '{2}' and others depend on this.",e.manifest.displayName||e.manifest.name,n[0].manifest.displayName||n[0].manifest.name,n[1].manifest.displayName||n[1].manifest.name)}async reinstallFromGallery(e){const n=this.getServer(e);return n?(await this.checkForWorkspaceTrust(e.manifest,!1),n.extensionManagementService.reinstallFromGallery(e)):Promise.reject(`Invalid location ${e.location.toString()}`)}updateMetadata(e,n){const t=this.getServer(e);return t?t.extensionManagementService.updateMetadata(e,n,this.userDataProfileService.currentProfile.extensionsResource):Promise.reject(`Invalid location ${e.location.toString()}`)}async resetPinnedStateForAllUserExtensions(e){await Promise.allSettled(this.servers.map(n=>n.extensionManagementService.resetPinnedStateForAllUserExtensions(e)))}zip(e){const n=this.getServer(e);return n?n.extensionManagementService.zip(e):Promise.reject(`Invalid location ${e.location.toString()}`)}download(e,n,t){if(this.extensionManagementServerService.localExtensionManagementServer)return this.extensionManagementServerService.localExtensionManagementServer.extensionManagementService.download(e,n,t);throw new Error("Cannot download extension")}async install(e,n){const t=await this.getManifest(e);return this.installVSIX(e,t,n)}async installVSIX(e,n,t){const i=this.getServersToInstall(n);if(i?.length){await this.checkForWorkspaceTrust(n,!1);const[r]=await G.settled(i.map(s=>this.installVSIXInServer(e,s,t)));return r}return Promise.reject("No Servers to Install")}getServersToInstall(e){if(this.extensionManagementServerService.localExtensionManagementServer&&this.extensionManagementServerService.remoteExtensionManagementServer)return k(e)?[this.extensionManagementServerService.localExtensionManagementServer,this.extensionManagementServerService.remoteExtensionManagementServer]:this.extensionManifestPropertiesService.prefersExecuteOnUI(e)?[this.extensionManagementServerService.localExtensionManagementServer]:[this.extensionManagementServerService.remoteExtensionManagementServer];if(this.extensionManagementServerService.localExtensionManagementServer)return[this.extensionManagementServerService.localExtensionManagementServer];if(this.extensionManagementServerService.remoteExtensionManagementServer)return[this.extensionManagementServerService.remoteExtensionManagementServer]}async installFromLocation(e){if(e.scheme===y.file){if(this.extensionManagementServerService.localExtensionManagementServer)return this.extensionManagementServerService.localExtensionManagementServer.extensionManagementService.installFromLocation(e,this.userDataProfileService.currentProfile.extensionsResource);throw new Error("Local extension management server is not found")}if(e.scheme===y.vscodeRemote){if(this.extensionManagementServerService.remoteExtensionManagementServer)return this.extensionManagementServerService.remoteExtensionManagementServer.extensionManagementService.installFromLocation(e,this.userDataProfileService.currentProfile.extensionsResource);throw new Error("Remote extension management server is not found")}if(!this.extensionManagementServerService.webExtensionManagementServer)throw new Error("Web extension management server is not found");return this.extensionManagementServerService.webExtensionManagementServer.extensionManagementService.installFromLocation(e,this.userDataProfileService.currentProfile.extensionsResource)}installVSIXInServer(e,n,t){return n.extensionManagementService.install(e,t)}getManifest(e){return e.scheme===y.file&&this.extensionManagementServerService.localExtensionManagementServer?this.extensionManagementServerService.localExtensionManagementServer.extensionManagementService.getManifest(e):e.scheme===y.file&&this.extensionManagementServerService.remoteExtensionManagementServer?this.extensionManagementServerService.remoteExtensionManagementServer.extensionManagementService.getManifest(e):e.scheme===y.vscodeRemote&&this.extensionManagementServerService.remoteExtensionManagementServer?this.extensionManagementServerService.remoteExtensionManagementServer.extensionManagementService.getManifest(e):Promise.reject("No Servers")}async canInstall(e){return be(e)?this.canInstallGalleryExtension(e):this.canInstallResourceExtension(e)}async canInstallGalleryExtension(e){if(this.extensionManagementServerService.localExtensionManagementServer&&await this.extensionManagementServerService.localExtensionManagementServer.extensionManagementService.canInstall(e))return!0;const n=await this.extensionGalleryService.getManifest(e,A.None);return n?!!(this.extensionManagementServerService.remoteExtensionManagementServer&&await this.extensionManagementServerService.remoteExtensionManagementServer.extensionManagementService.canInstall(e)&&this.extensionManifestPropertiesService.canExecuteOnWorkspace(n)||this.extensionManagementServerService.webExtensionManagementServer&&await this.extensionManagementServerService.webExtensionManagementServer.extensionManagementService.canInstall(e)&&this.extensionManifestPropertiesService.canExecuteOnWeb(n)):!1}canInstallResourceExtension(e){return!!(this.extensionManagementServerService.localExtensionManagementServer||this.extensionManagementServerService.remoteExtensionManagementServer&&this.extensionManifestPropertiesService.canExecuteOnWorkspace(e.manifest)||this.extensionManagementServerService.webExtensionManagementServer&&this.extensionManifestPropertiesService.canExecuteOnWeb(e.manifest))}async updateFromGallery(e,n,t){const i=this.getServer(n);if(!i)return Promise.reject(`Invalid location ${n.location.toString()}`);const r=[];return k(n.manifest)?r.push(...this.servers.filter(s=>s!==this.extensionManagementServerService.webExtensionManagementServer)):r.push(i),t={...t||{},isApplicationScoped:n.isApplicationScoped},G.settled(r.map(s=>s.extensionManagementService.installFromGallery(e,t))).then(([s])=>s)}async installGalleryExtensions(e){const n=new Map,t=new Map;return await Promise.all(e.map(async({extension:i,options:r})=>{try{const s=await this.validateAndGetExtensionManagementServersToInstall(i,r);!r.isMachineScoped&&this.isExtensionsSyncEnabled()&&this.extensionManagementServerService.localExtensionManagementServer&&!s.includes(this.extensionManagementServerService.localExtensionManagementServer)&&await this.extensionManagementServerService.localExtensionManagementServer.extensionManagementService.canInstall(i)&&s.push(this.extensionManagementServerService.localExtensionManagementServer);for(const l of s){let a=t.get(l);a||t.set(l,a=[]),a.push({extension:i,options:r})}}catch(s){n.set(i.identifier.id.toLowerCase(),{identifier:i.identifier,source:i,error:s,operation:N.Install,profileLocation:r.profileLocation??this.userDataProfileService.currentProfile.extensionsResource})}})),await Promise.all([...t.entries()].map(async([i,r])=>{const s=await i.extensionManagementService.installGalleryExtensions(r);for(const l of s)n.set(l.identifier.id.toLowerCase(),l)})),[...n.values()]}async installFromGallery(e,n){const t=await this.validateAndGetExtensionManagementServersToInstall(e,n);if(!n||ye(n.isMachineScoped)){const i=await this.hasToFlagExtensionsMachineScoped([e]);n={...n||{},isMachineScoped:i}}return!n.isMachineScoped&&this.isExtensionsSyncEnabled()&&this.extensionManagementServerService.localExtensionManagementServer&&!t.includes(this.extensionManagementServerService.localExtensionManagementServer)&&await this.extensionManagementServerService.localExtensionManagementServer.extensionManagementService.canInstall(e)&&t.push(this.extensionManagementServerService.localExtensionManagementServer),G.settled(t.map(i=>i.extensionManagementService.installFromGallery(e,n))).then(([i])=>i)}async getExtensions(e){const n=await this.extensionsScannerService.scanMultipleExtensions(e,O.User,{includeInvalid:!0}),t=[];return await Promise.all(n.map(async i=>{const r=await this.workspaceExtensionManagementService.toLocalWorkspaceExtension(i);r&&t.push({type:"resource",identifier:r.identifier,location:r.location,manifest:r.manifest,changelogUri:r.changelogUrl,readmeUri:r.readmeUrl})})),t}getInstalledWorkspaceExtensionLocations(){return this.workspaceExtensionManagementService.getInstalledWorkspaceExtensionsLocations()}async getInstalledWorkspaceExtensions(e){return this.workspaceExtensionManagementService.getInstalled(e)}async installResourceExtension(e,n){if(!this.canInstallResourceExtension(e))throw new Error("This extension cannot be installed in the current workspace.");if(!n.isWorkspaceScoped)return this.installFromLocation(e.location);this.logService.info(`Installing the extension ${e.identifier.id} from ${e.location.toString()} in workspace`);const t=this.getWorkspaceExtensionsServer();this._onInstallExtension.fire({identifier:e.identifier,source:e.location,server:t,applicationScoped:!1,profileLocation:this.userDataProfileService.currentProfile.extensionsResource,workspaceScoped:!0});try{await this.checkForWorkspaceTrust(e.manifest,!0);const i=await this.workspaceExtensionManagementService.install(e);return this.logService.info(`Successfully installed the extension ${i.identifier.id} from ${e.location.toString()} in the workspace`),this._onDidInstallExtensions.fire([{identifier:i.identifier,source:e.location,operation:N.Install,applicationScoped:!1,profileLocation:this.userDataProfileService.currentProfile.extensionsResource,local:i,workspaceScoped:!0}]),i}catch(i){throw this.logService.error(`Failed to install the extension ${e.identifier.id} from ${e.location.toString()} in the workspace`,V(i)),this._onDidInstallExtensions.fire([{identifier:e.identifier,source:e.location,operation:N.Install,applicationScoped:!1,profileLocation:this.userDataProfileService.currentProfile.extensionsResource,error:i,workspaceScoped:!0}]),i}}async uninstallExtensionFromWorkspace(e){if(!e.isWorkspaceScoped)throw new Error("The extension is not a workspace extension");this.logService.info(`Uninstalling the workspace extension ${e.identifier.id} from ${e.location.toString()}`);const n=this.getWorkspaceExtensionsServer();this._onUninstallExtension.fire({identifier:e.identifier,server:n,applicationScoped:!1,workspaceScoped:!0,profileLocation:this.userDataProfileService.currentProfile.extensionsResource});try{await this.workspaceExtensionManagementService.uninstall(e),this.logService.info(`Successfully uninstalled the workspace extension ${e.identifier.id} from ${e.location.toString()}`),this.telemetryService.publicLog2("workspaceextension:uninstall"),this._onDidUninstallExtension.fire({identifier:e.identifier,server:n,applicationScoped:!1,workspaceScoped:!0,profileLocation:this.userDataProfileService.currentProfile.extensionsResource})}catch(t){throw this.logService.error(`Failed to uninstall the workspace extension ${e.identifier.id} from ${e.location.toString()}`,V(t)),this._onDidUninstallExtension.fire({identifier:e.identifier,server:n,error:t,applicationScoped:!1,workspaceScoped:!0,profileLocation:this.userDataProfileService.currentProfile.extensionsResource}),t}}async validateAndGetExtensionManagementServersToInstall(e,n){const t=await this.extensionGalleryService.getManifest(e,A.None);if(!t)return Promise.reject(c("Manifest is not found","Installing Extension {0} failed: Manifest is not found.",e.displayName||e.name));const i=[];if(k(t))i.push(...this.servers.filter(r=>r!==this.extensionManagementServerService.webExtensionManagementServer));else{const r=this.getExtensionManagementServerToInstall(t);r&&i.push(r)}if(!i.length){const r=new Error(c("cannot be installed","Cannot install the '{0}' extension because it is not available in this setup.",e.displayName||e.name));throw r.name=X.Unsupported,r}return n?.context?.[se]!==ae.SETTINGS_SYNC&&await this.checkForWorkspaceTrust(t,!1),n?.donotIncludePackAndDependencies||await this.checkInstallingExtensionOnWeb(e,t),i}getExtensionManagementServerToInstall(e){if(this.servers.length===1&&this.extensionManagementServerService.localExtensionManagementServer)return this.extensionManagementServerService.localExtensionManagementServer;const n=this.extensionManifestPropertiesService.getExtensionKind(e);for(const t of n){if(t==="ui"&&this.extensionManagementServerService.localExtensionManagementServer)return this.extensionManagementServerService.localExtensionManagementServer;if(t==="workspace"&&this.extensionManagementServerService.remoteExtensionManagementServer)return this.extensionManagementServerService.remoteExtensionManagementServer;if(t==="web"&&this.extensionManagementServerService.webExtensionManagementServer)return this.extensionManagementServerService.webExtensionManagementServer}return this.extensionManagementServerService.localExtensionManagementServer}isExtensionsSyncEnabled(){return this.userDataSyncEnablementService.isEnabled()&&this.userDataSyncEnablementService.isResourceEnabled(ge.Extensions)}async hasToFlagExtensionsMachineScoped(e){if(this.isExtensionsSyncEnabled()){const{result:n}=await this.dialogService.prompt({type:F.Info,message:e.length===1?c("install extension","Install Extension"):c("install extensions","Install Extensions"),detail:e.length===1?c("install single extension","Would you like to install and synchronize '{0}' extension across your devices?",e[0].displayName):c("install multiple extensions","Would you like to install and synchronize extensions across your devices?"),buttons:[{label:c({key:"install",comment:["&& denotes a mnemonic"]},"&&Install"),run:()=>!1},{label:c({key:"install and do no sync",comment:["&& denotes a mnemonic"]},"Install (Do &&not sync)"),run:()=>!0}],cancelButton:{run:()=>{throw new $}}});return n}return!1}getExtensionsControlManifest(){return this.extensionManagementServerService.localExtensionManagementServer?this.extensionManagementServerService.localExtensionManagementServer.extensionManagementService.getExtensionsControlManifest():this.extensionManagementServerService.remoteExtensionManagementServer?this.extensionManagementServerService.remoteExtensionManagementServer.extensionManagementService.getExtensionsControlManifest():this.extensionManagementServerService.webExtensionManagementServer?this.extensionManagementServerService.webExtensionManagementServer.extensionManagementService.getExtensionsControlManifest():Promise.resolve({malicious:[],deprecated:{},search:[]})}getServer(e){return e.isWorkspaceScoped?this.getWorkspaceExtensionsServer():this.extensionManagementServerService.getExtensionManagementServer(e)}getWorkspaceExtensionsServer(){if(this.extensionManagementServerService.remoteExtensionManagementServer)return this.extensionManagementServerService.remoteExtensionManagementServer;if(this.extensionManagementServerService.localExtensionManagementServer)return this.extensionManagementServerService.localExtensionManagementServer;if(this.extensionManagementServerService.webExtensionManagementServer)return this.extensionManagementServerService.webExtensionManagementServer;throw new Error("No extension server found")}async checkForWorkspaceTrust(e,n){if(n||this.extensionManifestPropertiesService.getExtensionUntrustedWorkspaceSupportType(e)===!1){const t=[];if(t.push({label:c("extensionInstallWorkspaceTrustButton","Trust Workspace & Install"),type:"ContinueWithTrust"}),n||t.push({label:c("extensionInstallWorkspaceTrustContinueButton","Install"),type:"ContinueWithoutTrust"}),t.push({label:c("extensionInstallWorkspaceTrustManageButton","Learn More"),type:"Manage"}),await this.workspaceTrustRequestService.requestWorkspaceTrust({message:c("extensionInstallWorkspaceTrustMessage","Enabling this extension requires a trusted workspace."),buttons:t})===void 0)throw new $}}async checkInstallingExtensionOnWeb(e,n){if(this.servers.length!==1||this.servers[0]!==this.extensionManagementServerService.webExtensionManagementServer)return;const t=[];if(n.extensionPack?.length){const f=await this.extensionGalleryService.getExtensions(n.extensionPack.map(u=>({id:u})),A.None);for(const u of f)await this.servers[0].extensionManagementService.canInstall(u)||t.push(u);if(t.length&&t.length===f.length)throw new re("Not supported in Web",X.Unsupported)}const i=c("VS Code for Web","{0} for the Web",this.productService.nameLong),r=this.extensionManifestPropertiesService.getExtensionVirtualWorkspaceSupportType(n),s=le(n.capabilities?.virtualWorkspaces),l=r==="limited"||!!s;if(!t.length&&!l)return;const a=c("limited support","'{0}' has limited functionality in {1}.",e.displayName||e.identifier.id,i);let v,S=[],x;const d={label:c({key:"install anyways",comment:["&& denotes a mnemonic"]},"&&Install Anyway"),run:()=>{}},P={label:c({key:"showExtensions",comment:["&& denotes a mnemonic"]},"&&Show Extensions"),run:()=>this.instantiationService.invokeFunction(f=>f.get(Me).executeCommand("extension.open",e.identifier.id,"extensionPack"))};t.length&&l?(v=a,x=`${s?`${s}
`:""}${c("non web extensions detail","Contains extensions which are not supported.")}`,S=[d,P]):l?(v=a,x=s||void 0,S=[d]):(v=c("non web extensions","'{0}' contains extensions which are not supported in {1}.",e.displayName||e.identifier.id,i),S=[d,P]),await this.dialogService.prompt({type:F.Info,message:v,detail:x,buttons:S,cancelButton:{run:()=>{throw new $}}})}_targetPlatformPromise;getTargetPlatform(){return this._targetPlatformPromise||(this._targetPlatformPromise=me(this.fileService,this.logService)),this._targetPlatformPromise}async cleanUp(){await Promise.allSettled(this.servers.map(e=>e.extensionManagementService.cleanUp()))}toggleAppliationScope(e,n){const t=this.getServer(e);if(t)return t.extensionManagementService.toggleAppliationScope(e,n);throw new Error("Not Supported")}copyExtensions(e,n){if(this.extensionManagementServerService.remoteExtensionManagementServer)throw new Error("Not Supported");return this.extensionManagementServerService.localExtensionManagementServer?this.extensionManagementServerService.localExtensionManagementServer.extensionManagementService.copyExtensions(e,n):this.extensionManagementServerService.webExtensionManagementServer?this.extensionManagementServerService.webExtensionManagementServer.extensionManagementService.copyExtensions(e,n):Promise.resolve()}registerParticipant(){throw new Error("Not Supported")}installExtensionsFromProfile(e,n,t){throw new Error("Not Supported")}};D=C([o(0,oe),o(1,ie),o(2,Pe),o(3,Se),o(4,xe),o(5,de),o(6,pe),o(7,he),o(8,fe),o(9,ue),o(10,Y),o(11,J),o(12,Ie),o(13,Q),o(14,ee)],D);let p=class extends q{constructor(e,n,t,i,r,s,l){super();this.fileService=e;this.logService=n;this.workspaceService=t;this.extensionsScannerService=i;this.storageService=r;this.uriIdentityService=s;this.telemetryService=l;this._register(w.debounce(this.fileService.onDidFilesChange,(a,v)=>((a=a??[]).push(v),a),1e3)(a=>{const v=this.extensions.filter(S=>!S.isValid&&a.some(x=>x.affects(S.location)));v.length&&this.checkExtensionsValidity(v)})),this.initializePromise=this.initialize()}static WORKSPACE_EXTENSIONS_KEY="workspaceExtensions.locations";_onDidChangeInvalidExtensions=this._register(new M);onDidChangeInvalidExtensions=this._onDidChangeInvalidExtensions.event;extensions=[];initializePromise;invalidExtensionWatchers=this._register(new ve);async initialize(){const e=this.getInstalledWorkspaceExtensionsLocations();e.length&&(await Promise.allSettled(e.map(async n=>{if(!this.workspaceService.isInsideWorkspace(n)){this.logService.info(`Removing the workspace extension ${n.toString()} as it is not inside the workspace`);return}if(!await this.fileService.exists(n)){this.logService.info(`Removing the workspace extension ${n.toString()} as it does not exist`);return}try{const t=await this.scanWorkspaceExtension(n);t?this.extensions.push(t):this.logService.info(`Skipping workspace extension ${n.toString()} as it does not exist`)}catch(t){this.logService.error("Skipping the workspace extension",n.toString(),t)}})),this.saveWorkspaceExtensions())}watchInvalidExtensions(){this.invalidExtensionWatchers.clear();for(const e of this.extensions)e.isValid||this.invalidExtensionWatchers.add(this.fileService.watch(e.location))}async checkExtensionsValidity(e){const n=[];await Promise.all(e.map(async i=>{const r=await this.scanWorkspaceExtension(i.location);r?.isValid&&n.push(r)}));let t=!1;for(const i of n){const r=this.extensions.findIndex(s=>this.uriIdentityService.extUri.isEqual(s.location,i.location));r!==-1&&(t=!0,this.extensions.splice(r,1,i))}t&&(this.saveWorkspaceExtensions(),this._onDidChangeInvalidExtensions.fire(n))}async getInstalled(e){return await this.initializePromise,this.extensions.filter(n=>e||n.isValid)}async install(e){await this.initializePromise;const n=await this.scanWorkspaceExtension(e.location);if(!n)throw new Error("Cannot install the extension as it does not exist.");const t=this.extensions.findIndex(i=>U(i.identifier,e.identifier));return t===-1?this.extensions.push(n):this.extensions.splice(t,1,n),this.saveWorkspaceExtensions(),this.telemetryService.publicLog2("workspaceextension:install"),n}async uninstall(e){await this.initializePromise;const n=this.extensions.findIndex(t=>U(t.identifier,e.identifier));n!==-1&&(this.extensions.splice(n,1),this.saveWorkspaceExtensions()),this.telemetryService.publicLog2("workspaceextension:uninstall")}getInstalledWorkspaceExtensionsLocations(){const e=[];try{const n=JSON.parse(this.storageService.get(p.WORKSPACE_EXTENSIONS_KEY,B.WORKSPACE,"[]"));if(Array.isArray(e))for(const t of n)we(t)?this.workspaceService.getWorkbenchState()===H.FOLDER?e.push(this.workspaceService.getWorkspace().folders[0].toResource(t)):this.logService.warn(`Invalid value for 'extensions' in workspace storage: ${t}`):e.push(ce.revive(t));else this.logService.warn(`Invalid value for 'extensions' in workspace storage: ${e}`)}catch(n){this.logService.warn(`Error parsing workspace extensions locations: ${V(n)}`)}return e}saveWorkspaceExtensions(){const e=this.extensions.map(n=>n.location);this.workspaceService.getWorkbenchState()===H.FOLDER?this.storageService.store(p.WORKSPACE_EXTENSIONS_KEY,JSON.stringify(Ee(e.map(n=>this.uriIdentityService.extUri.relativePath(this.workspaceService.getWorkspace().folders[0].uri,n)))),B.WORKSPACE,Z.MACHINE):this.storageService.store(p.WORKSPACE_EXTENSIONS_KEY,JSON.stringify(e),B.WORKSPACE,Z.MACHINE),this.watchInvalidExtensions()}async scanWorkspaceExtension(e){const n=await this.extensionsScannerService.scanExistingExtension(e,O.User,{includeInvalid:!0});return n?this.toLocalWorkspaceExtension(n):null}async toLocalWorkspaceExtension(e){const n=await this.fileService.resolve(e.location);let t,i;n.children&&(t=n.children.find(({name:l})=>/^readme(\.txt|\.md|)$/i.test(l))?.resource,i=n.children.find(({name:l})=>/^changelog(\.txt|\.md|)$/i.test(l))?.resource);const r=[...e.validations];let s=e.isValid;return e.manifest.main&&(await this.fileService.exists(this.uriIdentityService.extUri.joinPath(e.location,e.manifest.main))||(s=!1,r.push([F.Error,c("main.notFound","Cannot activate because {0} not found",e.manifest.main)]))),{identifier:e.identifier,type:e.type,isBuiltin:e.isBuiltin||!!e.metadata?.isBuiltin,location:e.location,manifest:e.manifest,targetPlatform:e.targetPlatform,validations:r,isValid:s,readmeUrl:t,changelogUrl:i,publisherDisplayName:e.metadata?.publisherDisplayName,publisherId:e.metadata?.publisherId||null,isApplicationScoped:!!e.metadata?.isApplicationScoped,isMachineScoped:!!e.metadata?.isMachineScoped,isPreReleaseVersion:!!e.metadata?.isPreReleaseVersion,hasPreReleaseVersion:!!e.metadata?.hasPreReleaseVersion,preRelease:!!e.metadata?.preRelease,installedTimestamp:e.metadata?.installedTimestamp,updated:!!e.metadata?.updated,pinned:!!e.metadata?.pinned,isWorkspaceScoped:!0,source:"resource"}}};p=C([o(0,Y),o(1,J),o(2,ke),o(3,Q),o(4,Ue),o(5,De),o(6,ee)],p);export{D as ExtensionManagementService};
