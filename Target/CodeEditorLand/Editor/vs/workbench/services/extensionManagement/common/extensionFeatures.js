import"../../../../../vs/base/common/collections.js";import"../../../../../vs/base/common/color.js";import"../../../../../vs/base/common/event.js";import"../../../../../vs/base/common/htmlContent.js";import"../../../../../vs/base/common/keybindings.js";import"../../../../../vs/base/common/lifecycle.js";import"../../../../../vs/base/common/severity.js";import"../../../../../vs/platform/extensions/common/extensions.js";import"../../../../../vs/platform/instantiation/common/descriptors.js";import{createDecorator as r}from"../../../../../vs/platform/instantiation/common/instantiation.js";import{Registry as a}from"../../../../../vs/platform/registry/common/platform.js";var n;(e=>e.ExtensionFeaturesRegistry="workbench.registry.extensionFeatures")(n||={});const S=r("IExtensionFeaturesManagementService");class i{extensionFeatures=new Map;registerExtensionFeature(e){if(this.extensionFeatures.has(e.id))throw new Error(`Extension feature with id '${e.id}' already exists`);return this.extensionFeatures.set(e.id,e),{dispose:()=>this.extensionFeatures.delete(e.id)}}getExtensionFeature(e){return this.extensionFeatures.get(e)}getExtensionFeatures(){return Array.from(this.extensionFeatures.values())}}a.add(n.ExtensionFeaturesRegistry,new i);export{n as Extensions,S as IExtensionFeaturesManagementService};
