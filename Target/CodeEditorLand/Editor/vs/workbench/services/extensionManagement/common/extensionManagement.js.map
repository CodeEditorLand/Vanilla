{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/extensionManagement/common/extensionManagement.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport type { Event } from \"../../../../base/common/event.js\";\nimport { FileAccess } from \"../../../../base/common/network.js\";\nimport type { URI } from \"../../../../base/common/uri.js\";\nimport { localize } from \"../../../../nls.js\";\nimport {\n\ttype DidUninstallExtensionEvent,\n\tIExtensionManagementService,\n\ttype IGalleryExtension,\n\ttype ILocalExtension,\n\ttype InstallExtensionEvent,\n\ttype InstallExtensionResult,\n\ttype InstallOptions,\n\ttype Metadata,\n\ttype UninstallExtensionEvent,\n} from \"../../../../platform/extensionManagement/common/extensionManagement.js\";\nimport type {\n\tExtensionType,\n\tIExtension,\n\tIExtensionIdentifier,\n\tIExtensionManifest,\n} from \"../../../../platform/extensions/common/extensions.js\";\nimport {\n\tcreateDecorator,\n\trefineServiceDecorator,\n} from \"../../../../platform/instantiation/common/instantiation.js\";\n\nexport type DidChangeProfileEvent = {\n\treadonly added: ILocalExtension[];\n\treadonly removed: ILocalExtension[];\n};\n\nexport const IProfileAwareExtensionManagementService = refineServiceDecorator<\n\tIExtensionManagementService,\n\tIProfileAwareExtensionManagementService\n>(IExtensionManagementService);\nexport interface IProfileAwareExtensionManagementService\n\textends IExtensionManagementService {\n\treadonly onDidChangeProfile: Event<DidChangeProfileEvent>;\n}\n\nexport interface IExtensionManagementServer {\n\treadonly id: string;\n\treadonly label: string;\n\treadonly extensionManagementService: IProfileAwareExtensionManagementService;\n}\n\nexport enum ExtensionInstallLocation {\n\tLocal = 1,\n\tRemote = 2,\n\tWeb = 3,\n}\n\nexport const IExtensionManagementServerService =\n\tcreateDecorator<IExtensionManagementServerService>(\n\t\t\"extensionManagementServerService\",\n\t);\nexport interface IExtensionManagementServerService {\n\treadonly _serviceBrand: undefined;\n\treadonly localExtensionManagementServer: IExtensionManagementServer | null;\n\treadonly remoteExtensionManagementServer: IExtensionManagementServer | null;\n\treadonly webExtensionManagementServer: IExtensionManagementServer | null;\n\tgetExtensionManagementServer(\n\t\textension: IExtension,\n\t): IExtensionManagementServer | null;\n\tgetExtensionInstallLocation(\n\t\textension: IExtension,\n\t): ExtensionInstallLocation | null;\n}\n\nexport const DefaultIconPath = FileAccess.asBrowserUri(\n\t\"vs/workbench/services/extensionManagement/common/media/defaultIcon.png\",\n).toString(true);\n\nexport interface IResourceExtension {\n\treadonly type: \"resource\";\n\treadonly identifier: IExtensionIdentifier;\n\treadonly location: URI;\n\treadonly manifest: IExtensionManifest;\n\treadonly readmeUri?: URI;\n\treadonly changelogUri?: URI;\n}\n\nexport type InstallExtensionOnServerEvent = InstallExtensionEvent & {\n\tserver: IExtensionManagementServer;\n};\nexport type UninstallExtensionOnServerEvent = UninstallExtensionEvent & {\n\tserver: IExtensionManagementServer;\n};\nexport type DidUninstallExtensionOnServerEvent = DidUninstallExtensionEvent & {\n\tserver: IExtensionManagementServer;\n};\nexport type DidChangeProfileForServerEvent = DidChangeProfileEvent & {\n\tserver: IExtensionManagementServer;\n};\n\nexport const IWorkbenchExtensionManagementService = refineServiceDecorator<\n\tIProfileAwareExtensionManagementService,\n\tIWorkbenchExtensionManagementService\n>(IProfileAwareExtensionManagementService);\nexport interface IWorkbenchExtensionManagementService\n\textends IProfileAwareExtensionManagementService {\n\treadonly _serviceBrand: undefined;\n\n\tonInstallExtension: Event<InstallExtensionOnServerEvent>;\n\tonDidInstallExtensions: Event<readonly InstallExtensionResult[]>;\n\tonUninstallExtension: Event<UninstallExtensionOnServerEvent>;\n\tonDidUninstallExtension: Event<DidUninstallExtensionOnServerEvent>;\n\tonDidChangeProfile: Event<DidChangeProfileForServerEvent>;\n\tonDidEnableExtensions: Event<IExtension[]>;\n\n\tgetExtensions(locations: URI[]): Promise<IResourceExtension[]>;\n\tgetInstalledWorkspaceExtensionLocations(): URI[];\n\tgetInstalledWorkspaceExtensions(\n\t\tincludeInvalid: boolean,\n\t): Promise<ILocalExtension[]>;\n\n\tcanInstall(\n\t\textension: IGalleryExtension | IResourceExtension,\n\t): Promise<boolean>;\n\n\tinstallVSIX(\n\t\tlocation: URI,\n\t\tmanifest: IExtensionManifest,\n\t\tinstallOptions?: InstallOptions,\n\t): Promise<ILocalExtension>;\n\tinstallFromLocation(location: URI): Promise<ILocalExtension>;\n\tinstallResourceExtension(\n\t\textension: IResourceExtension,\n\t\tinstallOptions: InstallOptions,\n\t): Promise<ILocalExtension>;\n\n\tupdateFromGallery(\n\t\tgallery: IGalleryExtension,\n\t\textension: ILocalExtension,\n\t\tinstallOptions?: InstallOptions,\n\t): Promise<ILocalExtension>;\n\tupdateMetadata(\n\t\tlocal: ILocalExtension,\n\t\tmetadata: Partial<Metadata>,\n\t): Promise<ILocalExtension>;\n}\n\nexport const extensionsConfigurationNodeBase = {\n\tid: \"extensions\",\n\torder: 30,\n\ttitle: localize(\"extensionsConfigurationTitle\", \"Extensions\"),\n\ttype: \"object\",\n};\n\nexport enum EnablementState {\n\tDisabledByTrustRequirement = 0,\n\tDisabledByExtensionKind = 1,\n\tDisabledByEnvironment = 2,\n\tEnabledByEnvironment = 3,\n\tDisabledByVirtualWorkspace = 4,\n\tDisabledByInvalidExtension = 5,\n\tDisabledByExtensionDependency = 6,\n\tDisabledGlobally = 7,\n\tDisabledWorkspace = 8,\n\tEnabledGlobally = 9,\n\tEnabledWorkspace = 10,\n}\n\nexport const IWorkbenchExtensionEnablementService =\n\tcreateDecorator<IWorkbenchExtensionEnablementService>(\n\t\t\"extensionEnablementService\",\n\t);\n\nexport interface IWorkbenchExtensionEnablementService {\n\treadonly _serviceBrand: undefined;\n\n\t/**\n\t * Event to listen on for extension enablement changes\n\t */\n\treadonly onEnablementChanged: Event<readonly IExtension[]>;\n\n\t/**\n\t * Returns the enablement state for the given extension\n\t */\n\tgetEnablementState(extension: IExtension): EnablementState;\n\n\t/**\n\t * Returns the enablement states for the given extensions\n\t * @param extensions list of extensions\n\t * @param workspaceTypeOverrides Workspace type overrides\n\t */\n\tgetEnablementStates(\n\t\textensions: IExtension[],\n\t\tworkspaceTypeOverrides?: { trusted?: boolean },\n\t): EnablementState[];\n\n\t/**\n\t * Returns the enablement states for the dependencies of the given extension\n\t */\n\tgetDependenciesEnablementStates(\n\t\textension: IExtension,\n\t): [IExtension, EnablementState][];\n\n\t/**\n\t * Returns `true` if the enablement can be changed.\n\t */\n\tcanChangeEnablement(extension: IExtension): boolean;\n\n\t/**\n\t * Returns `true` if the enablement can be changed.\n\t */\n\tcanChangeWorkspaceEnablement(extension: IExtension): boolean;\n\n\t/**\n\t * Returns `true` if the given extension is enabled.\n\t */\n\tisEnabled(extension: IExtension): boolean;\n\n\t/**\n\t * Returns `true` if the given enablement state is enabled enablement state.\n\t */\n\tisEnabledEnablementState(enablementState: EnablementState): boolean;\n\n\t/**\n\t * Returns `true` if the given extension identifier is disabled globally.\n\t * Extensions can be disabled globally or in workspace or both.\n\t * If an extension is disabled in both then enablement state shows only workspace.\n\t * This will\n\t */\n\tisDisabledGlobally(extension: IExtension): boolean;\n\n\t/**\n\t * Enable or disable the given extension.\n\t * if `workspace` is `true` then enablement is done for workspace, otherwise globally.\n\t *\n\t * Returns a promise that resolves to boolean value.\n\t * if resolves to `true` then requires restart for the change to take effect.\n\t *\n\t * Throws error if enablement is requested for workspace and there is no workspace\n\t */\n\tsetEnablement(\n\t\textensions: IExtension[],\n\t\tstate: EnablementState,\n\t): Promise<boolean[]>;\n\n\t/**\n\t * Updates the enablement state of the extensions when workspace trust changes.\n\t */\n\tupdateExtensionsEnablementsWhenWorkspaceTrustChanges(): Promise<void>;\n}\n\nexport interface IScannedExtension extends IExtension {\n\treadonly metadata?: Metadata;\n}\n\nexport type ScanOptions = { readonly skipInvalidExtensions?: boolean };\n\nexport const IWebExtensionsScannerService =\n\tcreateDecorator<IWebExtensionsScannerService>(\n\t\t\"IWebExtensionsScannerService\",\n\t);\nexport interface IWebExtensionsScannerService {\n\treadonly _serviceBrand: undefined;\n\n\tscanSystemExtensions(): Promise<IExtension[]>;\n\tscanUserExtensions(\n\t\tprofileLocation: URI,\n\t\toptions?: ScanOptions,\n\t): Promise<IScannedExtension[]>;\n\tscanExtensionsUnderDevelopment(): Promise<IExtension[]>;\n\tscanExistingExtension(\n\t\textensionLocation: URI,\n\t\textensionType: ExtensionType,\n\t\tprofileLocation: URI,\n\t): Promise<IScannedExtension | null>;\n\n\taddExtension(\n\t\tlocation: URI,\n\t\tmetadata: Metadata,\n\t\tprofileLocation: URI,\n\t): Promise<IScannedExtension>;\n\taddExtensionFromGallery(\n\t\tgalleryExtension: IGalleryExtension,\n\t\tmetadata: Metadata,\n\t\tprofileLocation: URI,\n\t): Promise<IScannedExtension>;\n\tremoveExtension(\n\t\textension: IScannedExtension,\n\t\tprofileLocation: URI,\n\t): Promise<void>;\n\tcopyExtensions(\n\t\tfromProfileLocation: URI,\n\t\ttoProfileLocation: URI,\n\t\tfilter: (extension: IScannedExtension) => boolean,\n\t): Promise<void>;\n\n\tupdateMetadata(\n\t\textension: IScannedExtension,\n\t\tmetaData: Partial<Metadata>,\n\t\tprofileLocation: URI,\n\t): Promise<IScannedExtension>;\n\n\tscanExtensionManifest(\n\t\textensionLocation: URI,\n\t): Promise<IExtensionManifest | null>;\n}\n"],
  "mappings": "AAMA,SAAS,kBAAkB;AAE3B,SAAS,gBAAgB;AACzB;AAAA,EAEC;AAAA,OAQM;AAOP;AAAA,EACC;AAAA,EACA;AAAA,OACM;AAOA,MAAM,0CAA0C,uBAGrD,2BAA2B;AAYtB,IAAK,2BAAL,kBAAKA,8BAAL;AACN,EAAAA,oDAAA,WAAQ,KAAR;AACA,EAAAA,oDAAA,YAAS,KAAT;AACA,EAAAA,oDAAA,SAAM,KAAN;AAHW,SAAAA;AAAA,GAAA;AAML,MAAM,oCACZ;AAAA,EACC;AACD;AAcM,MAAM,kBAAkB,WAAW;AAAA,EACzC;AACD,EAAE,SAAS,IAAI;AAwBR,MAAM,uCAAuC,uBAGlD,uCAAuC;AA4ClC,MAAM,kCAAkC;AAAA,EAC9C,IAAI;AAAA,EACJ,OAAO;AAAA,EACP,OAAO,SAAS,gCAAgC,YAAY;AAAA,EAC5D,MAAM;AACP;AAEO,IAAK,kBAAL,kBAAKC,qBAAL;AACN,EAAAA,kCAAA,gCAA6B,KAA7B;AACA,EAAAA,kCAAA,6BAA0B,KAA1B;AACA,EAAAA,kCAAA,2BAAwB,KAAxB;AACA,EAAAA,kCAAA,0BAAuB,KAAvB;AACA,EAAAA,kCAAA,gCAA6B,KAA7B;AACA,EAAAA,kCAAA,gCAA6B,KAA7B;AACA,EAAAA,kCAAA,mCAAgC,KAAhC;AACA,EAAAA,kCAAA,sBAAmB,KAAnB;AACA,EAAAA,kCAAA,uBAAoB,KAApB;AACA,EAAAA,kCAAA,qBAAkB,KAAlB;AACA,EAAAA,kCAAA,sBAAmB,MAAnB;AAXW,SAAAA;AAAA,GAAA;AAcL,MAAM,uCACZ;AAAA,EACC;AACD;AAsFM,MAAM,+BACZ;AAAA,EACC;AACD;",
  "names": ["ExtensionInstallLocation", "EnablementState"]
}
