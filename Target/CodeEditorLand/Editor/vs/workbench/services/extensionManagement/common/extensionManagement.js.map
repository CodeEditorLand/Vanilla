{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/extensionManagement/common/extensionManagement.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Event } from '../../../../base/common/event.js';\nimport { createDecorator, refineServiceDecorator } from '../../../../platform/instantiation/common/instantiation.js';\nimport { IExtension, ExtensionType, IExtensionManifest, IExtensionIdentifier } from '../../../../platform/extensions/common/extensions.js';\nimport { IExtensionManagementService, IGalleryExtension, ILocalExtension, InstallOptions, InstallExtensionEvent, DidUninstallExtensionEvent, InstallExtensionResult, Metadata, UninstallExtensionEvent } from '../../../../platform/extensionManagement/common/extensionManagement.js';\nimport { URI } from '../../../../base/common/uri.js';\nimport { FileAccess } from '../../../../base/common/network.js';\nimport { localize } from '../../../../nls.js';\n\nexport type DidChangeProfileEvent = { readonly added: ILocalExtension[]; readonly removed: ILocalExtension[] };\n\nexport const IProfileAwareExtensionManagementService = refineServiceDecorator<IExtensionManagementService, IProfileAwareExtensionManagementService>(IExtensionManagementService);\nexport interface IProfileAwareExtensionManagementService extends IExtensionManagementService {\n\treadonly onDidChangeProfile: Event<DidChangeProfileEvent>;\n}\n\nexport interface IExtensionManagementServer {\n\treadonly id: string;\n\treadonly label: string;\n\treadonly extensionManagementService: IProfileAwareExtensionManagementService;\n}\n\nexport const enum ExtensionInstallLocation {\n\tLocal = 1,\n\tRemote,\n\tWeb\n}\n\nexport const IExtensionManagementServerService = createDecorator<IExtensionManagementServerService>('extensionManagementServerService');\nexport interface IExtensionManagementServerService {\n\treadonly _serviceBrand: undefined;\n\treadonly localExtensionManagementServer: IExtensionManagementServer | null;\n\treadonly remoteExtensionManagementServer: IExtensionManagementServer | null;\n\treadonly webExtensionManagementServer: IExtensionManagementServer | null;\n\tgetExtensionManagementServer(extension: IExtension): IExtensionManagementServer | null;\n\tgetExtensionInstallLocation(extension: IExtension): ExtensionInstallLocation | null;\n}\n\nexport const DefaultIconPath = FileAccess.asBrowserUri('vs/workbench/services/extensionManagement/common/media/defaultIcon.png').toString(true);\n\nexport interface IResourceExtension {\n\treadonly type: 'resource';\n\treadonly identifier: IExtensionIdentifier;\n\treadonly location: URI;\n\treadonly manifest: IExtensionManifest;\n\treadonly readmeUri?: URI;\n\treadonly changelogUri?: URI;\n}\n\nexport type InstallExtensionOnServerEvent = InstallExtensionEvent & { server: IExtensionManagementServer };\nexport type UninstallExtensionOnServerEvent = UninstallExtensionEvent & { server: IExtensionManagementServer };\nexport type DidUninstallExtensionOnServerEvent = DidUninstallExtensionEvent & { server: IExtensionManagementServer };\nexport type DidChangeProfileForServerEvent = DidChangeProfileEvent & { server: IExtensionManagementServer };\n\nexport const IWorkbenchExtensionManagementService = refineServiceDecorator<IProfileAwareExtensionManagementService, IWorkbenchExtensionManagementService>(IProfileAwareExtensionManagementService);\nexport interface IWorkbenchExtensionManagementService extends IProfileAwareExtensionManagementService {\n\treadonly _serviceBrand: undefined;\n\n\tonInstallExtension: Event<InstallExtensionOnServerEvent>;\n\tonDidInstallExtensions: Event<readonly InstallExtensionResult[]>;\n\tonUninstallExtension: Event<UninstallExtensionOnServerEvent>;\n\tonDidUninstallExtension: Event<DidUninstallExtensionOnServerEvent>;\n\tonDidChangeProfile: Event<DidChangeProfileForServerEvent>;\n\tonDidEnableExtensions: Event<IExtension[]>;\n\n\tgetExtensions(locations: URI[]): Promise<IResourceExtension[]>;\n\tgetInstalledWorkspaceExtensionLocations(): URI[];\n\tgetInstalledWorkspaceExtensions(includeInvalid: boolean): Promise<ILocalExtension[]>;\n\n\tcanInstall(extension: IGalleryExtension | IResourceExtension): Promise<boolean>;\n\n\tinstallVSIX(location: URI, manifest: IExtensionManifest, installOptions?: InstallOptions): Promise<ILocalExtension>;\n\tinstallFromLocation(location: URI): Promise<ILocalExtension>;\n\tinstallResourceExtension(extension: IResourceExtension, installOptions: InstallOptions): Promise<ILocalExtension>;\n\n\tupdateFromGallery(gallery: IGalleryExtension, extension: ILocalExtension, installOptions?: InstallOptions): Promise<ILocalExtension>;\n\tupdateMetadata(local: ILocalExtension, metadata: Partial<Metadata>): Promise<ILocalExtension>;\n}\n\nexport const extensionsConfigurationNodeBase = {\n\tid: 'extensions',\n\torder: 30,\n\ttitle: localize('extensionsConfigurationTitle', \"Extensions\"),\n\ttype: 'object'\n};\n\nexport const enum EnablementState {\n\tDisabledByTrustRequirement,\n\tDisabledByExtensionKind,\n\tDisabledByEnvironment,\n\tEnabledByEnvironment,\n\tDisabledByVirtualWorkspace,\n\tDisabledByInvalidExtension,\n\tDisabledByExtensionDependency,\n\tDisabledGlobally,\n\tDisabledWorkspace,\n\tEnabledGlobally,\n\tEnabledWorkspace\n}\n\nexport const IWorkbenchExtensionEnablementService = createDecorator<IWorkbenchExtensionEnablementService>('extensionEnablementService');\n\nexport interface IWorkbenchExtensionEnablementService {\n\treadonly _serviceBrand: undefined;\n\n\t/**\n\t * Event to listen on for extension enablement changes\n\t */\n\treadonly onEnablementChanged: Event<readonly IExtension[]>;\n\n\t/**\n\t * Returns the enablement state for the given extension\n\t */\n\tgetEnablementState(extension: IExtension): EnablementState;\n\n\t/**\n\t * Returns the enablement states for the given extensions\n\t * @param extensions list of extensions\n\t * @param workspaceTypeOverrides Workspace type overrides\n\t */\n\tgetEnablementStates(extensions: IExtension[], workspaceTypeOverrides?: { trusted?: boolean }): EnablementState[];\n\n\t/**\n\t * Returns the enablement states for the dependencies of the given extension\n\t */\n\tgetDependenciesEnablementStates(extension: IExtension): [IExtension, EnablementState][];\n\n\t/**\n\t * Returns `true` if the enablement can be changed.\n\t */\n\tcanChangeEnablement(extension: IExtension): boolean;\n\n\t/**\n\t * Returns `true` if the enablement can be changed.\n\t */\n\tcanChangeWorkspaceEnablement(extension: IExtension): boolean;\n\n\t/**\n\t * Returns `true` if the given extension is enabled.\n\t */\n\tisEnabled(extension: IExtension): boolean;\n\n\t/**\n\t * Returns `true` if the given enablement state is enabled enablement state.\n\t */\n\tisEnabledEnablementState(enablementState: EnablementState): boolean;\n\n\t/**\n\t * Returns `true` if the given extension identifier is disabled globally.\n\t * Extensions can be disabled globally or in workspace or both.\n\t * If an extension is disabled in both then enablement state shows only workspace.\n\t * This will\n\t */\n\tisDisabledGlobally(extension: IExtension): boolean;\n\n\t/**\n\t * Enable or disable the given extension.\n\t * if `workspace` is `true` then enablement is done for workspace, otherwise globally.\n\t *\n\t * Returns a promise that resolves to boolean value.\n\t * if resolves to `true` then requires restart for the change to take effect.\n\t *\n\t * Throws error if enablement is requested for workspace and there is no workspace\n\t */\n\tsetEnablement(extensions: IExtension[], state: EnablementState): Promise<boolean[]>;\n\n\t/**\n\t * Updates the enablement state of the extensions when workspace trust changes.\n\t */\n\tupdateExtensionsEnablementsWhenWorkspaceTrustChanges(): Promise<void>;\n}\n\nexport interface IScannedExtension extends IExtension {\n\treadonly metadata?: Metadata;\n}\n\nexport type ScanOptions = { readonly skipInvalidExtensions?: boolean };\n\nexport const IWebExtensionsScannerService = createDecorator<IWebExtensionsScannerService>('IWebExtensionsScannerService');\nexport interface IWebExtensionsScannerService {\n\treadonly _serviceBrand: undefined;\n\n\tscanSystemExtensions(): Promise<IExtension[]>;\n\tscanUserExtensions(profileLocation: URI, options?: ScanOptions): Promise<IScannedExtension[]>;\n\tscanExtensionsUnderDevelopment(): Promise<IExtension[]>;\n\tscanExistingExtension(extensionLocation: URI, extensionType: ExtensionType, profileLocation: URI): Promise<IScannedExtension | null>;\n\n\taddExtension(location: URI, metadata: Metadata, profileLocation: URI): Promise<IScannedExtension>;\n\taddExtensionFromGallery(galleryExtension: IGalleryExtension, metadata: Metadata, profileLocation: URI): Promise<IScannedExtension>;\n\tremoveExtension(extension: IScannedExtension, profileLocation: URI): Promise<void>;\n\tcopyExtensions(fromProfileLocation: URI, toProfileLocation: URI, filter: (extension: IScannedExtension) => boolean): Promise<void>;\n\n\tupdateMetadata(extension: IScannedExtension, metaData: Partial<Metadata>, profileLocation: URI): Promise<IScannedExtension>;\n\n\tscanExtensionManifest(extensionLocation: URI): Promise<IExtensionManifest | null>;\n}\n"],
  "mappings": "AAKA,SAAS,aAAa;AACtB,SAAS,iBAAiB,8BAA8B;AACxD,SAAS,YAAY,eAAe,oBAAoB,4BAA4B;AACpF,SAAS,6BAA6B,mBAAmB,iBAAiB,gBAAgB,uBAAuB,4BAA4B,wBAAwB,UAAU,+BAA+B;AAC9M,SAAS,WAAW;AACpB,SAAS,kBAAkB;AAC3B,SAAS,gBAAgB;AAIlB,MAAM,0CAA0C,uBAA6F,2BAA2B;AAWxK,IAAW,2BAAX,kBAAWA,8BAAX;AACN,EAAAA,oDAAA,WAAQ,KAAR;AACA,EAAAA,oDAAA;AACA,EAAAA,oDAAA;AAHiB,SAAAA;AAAA,GAAA;AAMX,MAAM,oCAAoC,gBAAmD,kCAAkC;AAU/H,MAAM,kBAAkB,WAAW,aAAa,wEAAwE,EAAE,SAAS,IAAI;AAgBvI,MAAM,uCAAuC,uBAAsG,uCAAuC;AAyB1L,MAAM,kCAAkC;AAAA,EAC9C,IAAI;AAAA,EACJ,OAAO;AAAA,EACP,OAAO,SAAS,gCAAgC,YAAY;AAAA,EAC5D,MAAM;AACP;AAEO,IAAW,kBAAX,kBAAWC,qBAAX;AACN,EAAAA,kCAAA;AACA,EAAAA,kCAAA;AACA,EAAAA,kCAAA;AACA,EAAAA,kCAAA;AACA,EAAAA,kCAAA;AACA,EAAAA,kCAAA;AACA,EAAAA,kCAAA;AACA,EAAAA,kCAAA;AACA,EAAAA,kCAAA;AACA,EAAAA,kCAAA;AACA,EAAAA,kCAAA;AAXiB,SAAAA;AAAA,GAAA;AAcX,MAAM,uCAAuC,gBAAsD,4BAA4B;AA8E/H,MAAM,+BAA+B,gBAA8C,8BAA8B;",
  "names": ["ExtensionInstallLocation", "EnablementState"]
}
