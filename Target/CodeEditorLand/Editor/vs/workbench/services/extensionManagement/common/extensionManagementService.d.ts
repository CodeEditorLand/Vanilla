import { Event } from "vs/base/common/event";
import { Disposable } from "vs/base/common/lifecycle";
import { URI } from "vs/base/common/uri";
import { IConfigurationService } from "vs/platform/configuration/common/configuration";
import { IDialogService } from "vs/platform/dialogs/common/dialogs";
import { IDownloadService } from "vs/platform/download/common/download";
import { DidUpdateExtensionMetadata, IExtensionGalleryService, IExtensionIdentifier, IExtensionsControlManifest, IGalleryExtension, ILocalExtension, InstallExtensionInfo, InstallExtensionResult, InstallOperation, InstallOptions, IProductVersion, Metadata, UninstallExtensionInfo, UninstallOptions } from "vs/platform/extensionManagement/common/extensionManagement";
import { IExtensionsScannerService } from "vs/platform/extensionManagement/common/extensionsScannerService";
import { ExtensionType, IExtensionManifest, TargetPlatform } from "vs/platform/extensions/common/extensions";
import { IFileService } from "vs/platform/files/common/files";
import { IInstantiationService } from "vs/platform/instantiation/common/instantiation";
import { ILogService } from "vs/platform/log/common/log";
import { IProductService } from "vs/platform/product/common/productService";
import { ITelemetryService } from "vs/platform/telemetry/common/telemetry";
import { IUserDataSyncEnablementService } from "vs/platform/userDataSync/common/userDataSync";
import { IWorkspaceTrustRequestService } from "vs/platform/workspace/common/workspaceTrust";
import { DidChangeProfileForServerEvent, DidUninstallExtensionOnServerEvent, IExtensionManagementServer, IExtensionManagementServerService, InstallExtensionOnServerEvent, IResourceExtension, IWorkbenchExtensionManagementService, UninstallExtensionOnServerEvent } from "vs/workbench/services/extensionManagement/common/extensionManagement";
import { IExtensionManifestPropertiesService } from "vs/workbench/services/extensions/common/extensionManifestPropertiesService";
import { IUserDataProfileService } from "vs/workbench/services/userDataProfile/common/userDataProfile";
export declare class ExtensionManagementService extends Disposable implements IWorkbenchExtensionManagementService {
    protected readonly extensionManagementServerService: IExtensionManagementServerService;
    private readonly extensionGalleryService;
    private readonly userDataProfileService;
    protected readonly configurationService: IConfigurationService;
    protected readonly productService: IProductService;
    protected readonly downloadService: IDownloadService;
    private readonly userDataSyncEnablementService;
    private readonly dialogService;
    private readonly workspaceTrustRequestService;
    private readonly extensionManifestPropertiesService;
    private readonly fileService;
    private readonly logService;
    private readonly instantiationService;
    private readonly extensionsScannerService;
    private readonly telemetryService;
    readonly _serviceBrand: undefined;
    private readonly _onInstallExtension;
    readonly onInstallExtension: Event<InstallExtensionOnServerEvent>;
    private readonly _onDidInstallExtensions;
    readonly onDidInstallExtensions: Event<readonly InstallExtensionResult[]>;
    private readonly _onUninstallExtension;
    readonly onUninstallExtension: Event<UninstallExtensionOnServerEvent>;
    private readonly _onDidUninstallExtension;
    readonly onDidUninstallExtension: Event<DidUninstallExtensionOnServerEvent>;
    readonly onDidUpdateExtensionMetadata: Event<DidUpdateExtensionMetadata>;
    readonly onDidChangeProfile: Event<DidChangeProfileForServerEvent>;
    readonly onDidEnableExtensions: Event<ILocalExtension[]>;
    protected readonly servers: IExtensionManagementServer[];
    private readonly workspaceExtensionManagementService;
    constructor(extensionManagementServerService: IExtensionManagementServerService, extensionGalleryService: IExtensionGalleryService, userDataProfileService: IUserDataProfileService, configurationService: IConfigurationService, productService: IProductService, downloadService: IDownloadService, userDataSyncEnablementService: IUserDataSyncEnablementService, dialogService: IDialogService, workspaceTrustRequestService: IWorkspaceTrustRequestService, extensionManifestPropertiesService: IExtensionManifestPropertiesService, fileService: IFileService, logService: ILogService, instantiationService: IInstantiationService, extensionsScannerService: IExtensionsScannerService, telemetryService: ITelemetryService);
    getInstalled(type?: ExtensionType, profileLocation?: URI, productVersion?: IProductVersion): Promise<ILocalExtension[]>;
    uninstall(extension: ILocalExtension, options: UninstallOptions): Promise<void>;
    uninstallExtensions(extensions: UninstallExtensionInfo[]): Promise<void>;
    private uninstallInServer;
    private getDependentsErrorMessage;
    reinstallFromGallery(extension: ILocalExtension): Promise<ILocalExtension>;
    updateMetadata(extension: ILocalExtension, metadata: Partial<Metadata>): Promise<ILocalExtension>;
    resetPinnedStateForAllUserExtensions(pinned: boolean): Promise<void>;
    zip(extension: ILocalExtension): Promise<URI>;
    download(extension: IGalleryExtension, operation: InstallOperation, donotVerifySignature: boolean): Promise<URI>;
    install(vsix: URI, options?: InstallOptions): Promise<ILocalExtension>;
    installVSIX(vsix: URI, manifest: IExtensionManifest, options?: InstallOptions): Promise<ILocalExtension>;
    private getServersToInstall;
    installFromLocation(location: URI): Promise<ILocalExtension>;
    protected installVSIXInServer(vsix: URI, server: IExtensionManagementServer, options: InstallOptions | undefined): Promise<ILocalExtension>;
    getManifest(vsix: URI): Promise<IExtensionManifest>;
    canInstall(extension: IGalleryExtension | IResourceExtension): Promise<boolean>;
    private canInstallGalleryExtension;
    private canInstallResourceExtension;
    updateFromGallery(gallery: IGalleryExtension, extension: ILocalExtension, installOptions?: InstallOptions): Promise<ILocalExtension>;
    installGalleryExtensions(extensions: InstallExtensionInfo[]): Promise<InstallExtensionResult[]>;
    installFromGallery(gallery: IGalleryExtension, installOptions?: InstallOptions): Promise<ILocalExtension>;
    getExtensions(locations: URI[]): Promise<IResourceExtension[]>;
    getInstalledWorkspaceExtensionLocations(): URI[];
    getInstalledWorkspaceExtensions(includeInvalid: boolean): Promise<ILocalExtension[]>;
    installResourceExtension(extension: IResourceExtension, installOptions: InstallOptions): Promise<ILocalExtension>;
    private uninstallExtensionFromWorkspace;
    private validateAndGetExtensionManagementServersToInstall;
    private getExtensionManagementServerToInstall;
    private isExtensionsSyncEnabled;
    private hasToFlagExtensionsMachineScoped;
    getExtensionsControlManifest(): Promise<IExtensionsControlManifest>;
    private getServer;
    private getWorkspaceExtensionsServer;
    protected checkForWorkspaceTrust(manifest: IExtensionManifest, requireTrust: boolean): Promise<void>;
    private checkInstallingExtensionOnWeb;
    private _targetPlatformPromise;
    getTargetPlatform(): Promise<TargetPlatform>;
    cleanUp(): Promise<void>;
    toggleAppliationScope(extension: ILocalExtension, fromProfileLocation: URI): Promise<ILocalExtension>;
    copyExtensions(from: URI, to: URI): Promise<void>;
    registerParticipant(): void;
    installExtensionsFromProfile(extensions: IExtensionIdentifier[], fromProfileLocation: URI, toProfileLocation: URI): Promise<ILocalExtension[]>;
}
