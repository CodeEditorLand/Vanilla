{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/extensionManagement/common/extensionManagementService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Emitter, Event, EventMultiplexer } from '../../../../base/common/event.js';\nimport {\n\tILocalExtension, IGalleryExtension, IExtensionIdentifier, IExtensionsControlManifest, IExtensionGalleryService, InstallOptions, UninstallOptions, InstallExtensionResult, ExtensionManagementError, ExtensionManagementErrorCode, Metadata, InstallOperation, EXTENSION_INSTALL_SOURCE_CONTEXT, InstallExtensionInfo,\n\tIProductVersion,\n\tExtensionInstallSource,\n\tDidUpdateExtensionMetadata,\n\tUninstallExtensionInfo\n} from '../../../../platform/extensionManagement/common/extensionManagement.js';\nimport { DidChangeProfileForServerEvent, DidUninstallExtensionOnServerEvent, IExtensionManagementServer, IExtensionManagementServerService, InstallExtensionOnServerEvent, IResourceExtension, IWorkbenchExtensionManagementService, UninstallExtensionOnServerEvent } from './extensionManagement.js';\nimport { ExtensionType, isLanguagePackExtension, IExtensionManifest, getWorkspaceSupportTypeMessage, TargetPlatform } from '../../../../platform/extensions/common/extensions.js';\nimport { URI } from '../../../../base/common/uri.js';\nimport { Disposable, DisposableStore } from '../../../../base/common/lifecycle.js';\nimport { IConfigurationService } from '../../../../platform/configuration/common/configuration.js';\nimport { CancellationToken } from '../../../../base/common/cancellation.js';\nimport { areSameExtensions, computeTargetPlatform } from '../../../../platform/extensionManagement/common/extensionManagementUtil.js';\nimport { localize } from '../../../../nls.js';\nimport { IProductService } from '../../../../platform/product/common/productService.js';\nimport { Schemas } from '../../../../base/common/network.js';\nimport { IDownloadService } from '../../../../platform/download/common/download.js';\nimport { coalesce } from '../../../../base/common/arrays.js';\nimport { IDialogService, IPromptButton } from '../../../../platform/dialogs/common/dialogs.js';\nimport Severity from '../../../../base/common/severity.js';\nimport { IUserDataSyncEnablementService, SyncResource } from '../../../../platform/userDataSync/common/userDataSync.js';\nimport { Promises } from '../../../../base/common/async.js';\nimport { IWorkspaceTrustRequestService, WorkspaceTrustRequestButton } from '../../../../platform/workspace/common/workspaceTrust.js';\nimport { IExtensionManifestPropertiesService } from '../../extensions/common/extensionManifestPropertiesService.js';\nimport { IInstantiationService } from '../../../../platform/instantiation/common/instantiation.js';\nimport { ICommandService } from '../../../../platform/commands/common/commands.js';\nimport { isString, isUndefined } from '../../../../base/common/types.js';\nimport { FileChangesEvent, IFileService } from '../../../../platform/files/common/files.js';\nimport { ILogService } from '../../../../platform/log/common/log.js';\nimport { CancellationError, getErrorMessage } from '../../../../base/common/errors.js';\nimport { IUserDataProfileService } from '../../userDataProfile/common/userDataProfile.js';\nimport { IWorkspaceContextService, WorkbenchState } from '../../../../platform/workspace/common/workspace.js';\nimport { IExtensionsScannerService, IScannedExtension } from '../../../../platform/extensionManagement/common/extensionsScannerService.js';\nimport { IStorageService, StorageScope, StorageTarget } from '../../../../platform/storage/common/storage.js';\nimport { IUriIdentityService } from '../../../../platform/uriIdentity/common/uriIdentity.js';\nimport { ITelemetryService } from '../../../../platform/telemetry/common/telemetry.js';\n\nfunction isGalleryExtension(extension: IResourceExtension | IGalleryExtension): extension is IGalleryExtension {\n\treturn extension.type === 'gallery';\n}\n\nexport class ExtensionManagementService extends Disposable implements IWorkbenchExtensionManagementService {\n\n\tdeclare readonly _serviceBrand: undefined;\n\n\tprivate readonly _onInstallExtension = this._register(new Emitter<InstallExtensionOnServerEvent>());\n\treadonly onInstallExtension: Event<InstallExtensionOnServerEvent>;\n\n\tprivate readonly _onDidInstallExtensions = this._register(new Emitter<readonly InstallExtensionResult[]>());\n\treadonly onDidInstallExtensions: Event<readonly InstallExtensionResult[]>;\n\n\tprivate readonly _onUninstallExtension = this._register(new Emitter<UninstallExtensionOnServerEvent>());\n\treadonly onUninstallExtension: Event<UninstallExtensionOnServerEvent>;\n\n\tprivate readonly _onDidUninstallExtension = this._register(new Emitter<DidUninstallExtensionOnServerEvent>());\n\treadonly onDidUninstallExtension: Event<DidUninstallExtensionOnServerEvent>;\n\n\treadonly onDidUpdateExtensionMetadata: Event<DidUpdateExtensionMetadata>;\n\treadonly onDidChangeProfile: Event<DidChangeProfileForServerEvent>;\n\n\treadonly onDidEnableExtensions: Event<ILocalExtension[]>;\n\n\tprotected readonly servers: IExtensionManagementServer[] = [];\n\n\tprivate readonly workspaceExtensionManagementService: WorkspaceExtensionsManagementService;\n\n\tconstructor(\n\t\t@IExtensionManagementServerService protected readonly extensionManagementServerService: IExtensionManagementServerService,\n\t\t@IExtensionGalleryService private readonly extensionGalleryService: IExtensionGalleryService,\n\t\t@IUserDataProfileService private readonly userDataProfileService: IUserDataProfileService,\n\t\t@IConfigurationService protected readonly configurationService: IConfigurationService,\n\t\t@IProductService protected readonly productService: IProductService,\n\t\t@IDownloadService protected readonly downloadService: IDownloadService,\n\t\t@IUserDataSyncEnablementService private readonly userDataSyncEnablementService: IUserDataSyncEnablementService,\n\t\t@IDialogService private readonly dialogService: IDialogService,\n\t\t@IWorkspaceTrustRequestService private readonly workspaceTrustRequestService: IWorkspaceTrustRequestService,\n\t\t@IExtensionManifestPropertiesService private readonly extensionManifestPropertiesService: IExtensionManifestPropertiesService,\n\t\t@IFileService private readonly fileService: IFileService,\n\t\t@ILogService private readonly logService: ILogService,\n\t\t@IInstantiationService private readonly instantiationService: IInstantiationService,\n\t\t@IExtensionsScannerService private readonly extensionsScannerService: IExtensionsScannerService,\n\t\t@ITelemetryService private readonly telemetryService: ITelemetryService,\n\t) {\n\t\tsuper();\n\n\t\tthis.workspaceExtensionManagementService = this._register(this.instantiationService.createInstance(WorkspaceExtensionsManagementService));\n\t\tthis.onDidEnableExtensions = this.workspaceExtensionManagementService.onDidChangeInvalidExtensions;\n\n\t\tif (this.extensionManagementServerService.localExtensionManagementServer) {\n\t\t\tthis.servers.push(this.extensionManagementServerService.localExtensionManagementServer);\n\t\t}\n\t\tif (this.extensionManagementServerService.remoteExtensionManagementServer) {\n\t\t\tthis.servers.push(this.extensionManagementServerService.remoteExtensionManagementServer);\n\t\t}\n\t\tif (this.extensionManagementServerService.webExtensionManagementServer) {\n\t\t\tthis.servers.push(this.extensionManagementServerService.webExtensionManagementServer);\n\t\t}\n\n\t\tconst onInstallExtensionEventMultiplexer = this._register(new EventMultiplexer<InstallExtensionOnServerEvent>());\n\t\tthis._register(onInstallExtensionEventMultiplexer.add(this._onInstallExtension.event));\n\t\tthis.onInstallExtension = onInstallExtensionEventMultiplexer.event;\n\n\t\tconst onDidInstallExtensionsEventMultiplexer = this._register(new EventMultiplexer<readonly InstallExtensionResult[]>());\n\t\tthis._register(onDidInstallExtensionsEventMultiplexer.add(this._onDidInstallExtensions.event));\n\t\tthis.onDidInstallExtensions = onDidInstallExtensionsEventMultiplexer.event;\n\n\t\tconst onUninstallExtensionEventMultiplexer = this._register(new EventMultiplexer<UninstallExtensionOnServerEvent>());\n\t\tthis._register(onUninstallExtensionEventMultiplexer.add(this._onUninstallExtension.event));\n\t\tthis.onUninstallExtension = onUninstallExtensionEventMultiplexer.event;\n\n\t\tconst onDidUninstallExtensionEventMultiplexer = this._register(new EventMultiplexer<DidUninstallExtensionOnServerEvent>());\n\t\tthis._register(onDidUninstallExtensionEventMultiplexer.add(this._onDidUninstallExtension.event));\n\t\tthis.onDidUninstallExtension = onDidUninstallExtensionEventMultiplexer.event;\n\n\t\tconst onDidUpdateExtensionMetadaEventMultiplexer = this._register(new EventMultiplexer<DidUpdateExtensionMetadata>());\n\t\tthis.onDidUpdateExtensionMetadata = onDidUpdateExtensionMetadaEventMultiplexer.event;\n\n\t\tconst onDidChangeProfileEventMultiplexer = this._register(new EventMultiplexer<DidChangeProfileForServerEvent>());\n\t\tthis.onDidChangeProfile = onDidChangeProfileEventMultiplexer.event;\n\n\t\tfor (const server of this.servers) {\n\t\t\tthis._register(onInstallExtensionEventMultiplexer.add(Event.map(server.extensionManagementService.onInstallExtension, e => ({ ...e, server }))));\n\t\t\tthis._register(onDidInstallExtensionsEventMultiplexer.add(server.extensionManagementService.onDidInstallExtensions));\n\t\t\tthis._register(onUninstallExtensionEventMultiplexer.add(Event.map(server.extensionManagementService.onUninstallExtension, e => ({ ...e, server }))));\n\t\t\tthis._register(onDidUninstallExtensionEventMultiplexer.add(Event.map(server.extensionManagementService.onDidUninstallExtension, e => ({ ...e, server }))));\n\t\t\tthis._register(onDidUpdateExtensionMetadaEventMultiplexer.add(server.extensionManagementService.onDidUpdateExtensionMetadata));\n\t\t\tthis._register(onDidChangeProfileEventMultiplexer.add(Event.map(server.extensionManagementService.onDidChangeProfile, e => ({ ...e, server }))));\n\t\t}\n\t}\n\n\tasync getInstalled(type?: ExtensionType, profileLocation?: URI, productVersion?: IProductVersion): Promise<ILocalExtension[]> {\n\t\tconst result: ILocalExtension[] = [];\n\t\tawait Promise.all(this.servers.map(async server => {\n\t\t\tconst installed = await server.extensionManagementService.getInstalled(type, profileLocation, productVersion);\n\t\t\tif (server === this.getWorkspaceExtensionsServer()) {\n\t\t\t\tconst workspaceExtensions = await this.getInstalledWorkspaceExtensions(true);\n\t\t\t\tinstalled.push(...workspaceExtensions);\n\t\t\t}\n\t\t\tresult.push(...installed);\n\t\t}));\n\t\treturn result;\n\t}\n\n\tuninstall(extension: ILocalExtension, options: UninstallOptions): Promise<void> {\n\t\treturn this.uninstallExtensions([{ extension, options }]);\n\t}\n\n\tasync uninstallExtensions(extensions: UninstallExtensionInfo[]): Promise<void> {\n\t\tconst workspaceExtensions: ILocalExtension[] = [];\n\t\tconst groupedExtensions = new Map<IExtensionManagementServer, UninstallExtensionInfo[]>();\n\n\t\tconst addExtensionToServer = (server: IExtensionManagementServer, extension: ILocalExtension, options?: UninstallOptions) => {\n\t\t\tlet extensions = groupedExtensions.get(server);\n\t\t\tif (!extensions) {\n\t\t\t\tgroupedExtensions.set(server, extensions = []);\n\t\t\t}\n\t\t\textensions.push({ extension, options });\n\t\t};\n\n\t\tfor (const { extension, options } of extensions) {\n\t\t\tif (extension.isWorkspaceScoped) {\n\t\t\t\tworkspaceExtensions.push(extension);\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tconst server = this.getServer(extension);\n\t\t\tif (!server) {\n\t\t\t\tthrow new Error(`Invalid location ${extension.location.toString()}`);\n\t\t\t}\n\t\t\taddExtensionToServer(server, extension, options);\n\t\t\tif (this.servers.length > 1 && isLanguagePackExtension(extension.manifest)) {\n\t\t\t\tconst otherServers: IExtensionManagementServer[] = this.servers.filter(s => s !== server);\n\t\t\t\tfor (const otherServer of otherServers) {\n\t\t\t\t\tconst installed = await otherServer.extensionManagementService.getInstalled();\n\t\t\t\t\tconst extensionInOtherServer = installed.find(i => !i.isBuiltin && areSameExtensions(i.identifier, extension.identifier));\n\t\t\t\t\tif (extensionInOtherServer) {\n\t\t\t\t\t\taddExtensionToServer(otherServer, extensionInOtherServer, options);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tconst promises: Promise<void>[] = [];\n\t\tfor (const workspaceExtension of workspaceExtensions) {\n\t\t\tpromises.push(this.uninstallExtensionFromWorkspace(workspaceExtension));\n\t\t}\n\t\tfor (const [server, extensions] of groupedExtensions.entries()) {\n\t\t\tpromises.push(this.uninstallInServer(server, extensions));\n\t\t}\n\n\t\tconst result = await Promise.allSettled(promises);\n\t\tconst errors = result.filter(r => r.status === 'rejected').map(r => r.reason);\n\t\tif (errors.length) {\n\t\t\tthrow new Error(errors.map(e => e.message).join('\\n'));\n\t\t}\n\t}\n\n\tprivate async uninstallInServer(server: IExtensionManagementServer, extensions: UninstallExtensionInfo[]): Promise<void> {\n\t\tif (server === this.extensionManagementServerService.localExtensionManagementServer && this.extensionManagementServerService.remoteExtensionManagementServer) {\n\t\t\tfor (const { extension } of extensions) {\n\t\t\t\tconst installedExtensions = await this.extensionManagementServerService.remoteExtensionManagementServer.extensionManagementService.getInstalled(ExtensionType.User);\n\t\t\t\tconst dependentNonUIExtensions = installedExtensions.filter(i => !this.extensionManifestPropertiesService.prefersExecuteOnUI(i.manifest)\n\t\t\t\t\t&& i.manifest.extensionDependencies && i.manifest.extensionDependencies.some(id => areSameExtensions({ id }, extension.identifier)));\n\t\t\t\tif (dependentNonUIExtensions.length) {\n\t\t\t\t\tthrow (new Error(this.getDependentsErrorMessage(extension, dependentNonUIExtensions)));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn server.extensionManagementService.uninstallExtensions(extensions);\n\t}\n\n\tprivate getDependentsErrorMessage(extension: ILocalExtension, dependents: ILocalExtension[]): string {\n\t\tif (dependents.length === 1) {\n\t\t\treturn localize('singleDependentError', \"Cannot uninstall extension '{0}'. Extension '{1}' depends on this.\",\n\t\t\t\textension.manifest.displayName || extension.manifest.name, dependents[0].manifest.displayName || dependents[0].manifest.name);\n\t\t}\n\t\tif (dependents.length === 2) {\n\t\t\treturn localize('twoDependentsError', \"Cannot uninstall extension '{0}'. Extensions '{1}' and '{2}' depend on this.\",\n\t\t\t\textension.manifest.displayName || extension.manifest.name, dependents[0].manifest.displayName || dependents[0].manifest.name, dependents[1].manifest.displayName || dependents[1].manifest.name);\n\t\t}\n\t\treturn localize('multipleDependentsError', \"Cannot uninstall extension '{0}'. Extensions '{1}', '{2}' and others depend on this.\",\n\t\t\textension.manifest.displayName || extension.manifest.name, dependents[0].manifest.displayName || dependents[0].manifest.name, dependents[1].manifest.displayName || dependents[1].manifest.name);\n\n\t}\n\n\tasync reinstallFromGallery(extension: ILocalExtension): Promise<ILocalExtension> {\n\t\tconst server = this.getServer(extension);\n\t\tif (server) {\n\t\t\tawait this.checkForWorkspaceTrust(extension.manifest, false);\n\t\t\treturn server.extensionManagementService.reinstallFromGallery(extension);\n\t\t}\n\t\treturn Promise.reject(`Invalid location ${extension.location.toString()}`);\n\t}\n\n\tupdateMetadata(extension: ILocalExtension, metadata: Partial<Metadata>): Promise<ILocalExtension> {\n\t\tconst server = this.getServer(extension);\n\t\tif (server) {\n\t\t\treturn server.extensionManagementService.updateMetadata(extension, metadata, this.userDataProfileService.currentProfile.extensionsResource);\n\t\t}\n\t\treturn Promise.reject(`Invalid location ${extension.location.toString()}`);\n\t}\n\n\tasync resetPinnedStateForAllUserExtensions(pinned: boolean): Promise<void> {\n\t\tawait Promise.allSettled(this.servers.map(server => server.extensionManagementService.resetPinnedStateForAllUserExtensions(pinned)));\n\t}\n\n\tzip(extension: ILocalExtension): Promise<URI> {\n\t\tconst server = this.getServer(extension);\n\t\tif (server) {\n\t\t\treturn server.extensionManagementService.zip(extension);\n\t\t}\n\t\treturn Promise.reject(`Invalid location ${extension.location.toString()}`);\n\t}\n\n\tdownload(extension: IGalleryExtension, operation: InstallOperation, donotVerifySignature: boolean): Promise<URI> {\n\t\tif (this.extensionManagementServerService.localExtensionManagementServer) {\n\t\t\treturn this.extensionManagementServerService.localExtensionManagementServer.extensionManagementService.download(extension, operation, donotVerifySignature);\n\t\t}\n\t\tthrow new Error('Cannot download extension');\n\t}\n\n\tasync install(vsix: URI, options?: InstallOptions): Promise<ILocalExtension> {\n\t\tconst manifest = await this.getManifest(vsix);\n\t\treturn this.installVSIX(vsix, manifest, options);\n\t}\n\n\tasync installVSIX(vsix: URI, manifest: IExtensionManifest, options?: InstallOptions): Promise<ILocalExtension> {\n\t\tconst serversToInstall = this.getServersToInstall(manifest);\n\t\tif (serversToInstall?.length) {\n\t\t\tawait this.checkForWorkspaceTrust(manifest, false);\n\t\t\tconst [local] = await Promises.settled(serversToInstall.map(server => this.installVSIXInServer(vsix, server, options)));\n\t\t\treturn local;\n\t\t}\n\t\treturn Promise.reject('No Servers to Install');\n\t}\n\n\tprivate getServersToInstall(manifest: IExtensionManifest): IExtensionManagementServer[] | undefined {\n\t\tif (this.extensionManagementServerService.localExtensionManagementServer && this.extensionManagementServerService.remoteExtensionManagementServer) {\n\t\t\tif (isLanguagePackExtension(manifest)) {\n\t\t\t\t// Install on both servers\n\t\t\t\treturn [this.extensionManagementServerService.localExtensionManagementServer, this.extensionManagementServerService.remoteExtensionManagementServer];\n\t\t\t}\n\t\t\tif (this.extensionManifestPropertiesService.prefersExecuteOnUI(manifest)) {\n\t\t\t\t// Install only on local server\n\t\t\t\treturn [this.extensionManagementServerService.localExtensionManagementServer];\n\t\t\t}\n\t\t\t// Install only on remote server\n\t\t\treturn [this.extensionManagementServerService.remoteExtensionManagementServer];\n\t\t}\n\t\tif (this.extensionManagementServerService.localExtensionManagementServer) {\n\t\t\treturn [this.extensionManagementServerService.localExtensionManagementServer];\n\t\t}\n\t\tif (this.extensionManagementServerService.remoteExtensionManagementServer) {\n\t\t\treturn [this.extensionManagementServerService.remoteExtensionManagementServer];\n\t\t}\n\t\treturn undefined;\n\t}\n\n\tasync installFromLocation(location: URI): Promise<ILocalExtension> {\n\t\tif (location.scheme === Schemas.file) {\n\t\t\tif (this.extensionManagementServerService.localExtensionManagementServer) {\n\t\t\t\treturn this.extensionManagementServerService.localExtensionManagementServer.extensionManagementService.installFromLocation(location, this.userDataProfileService.currentProfile.extensionsResource);\n\t\t\t}\n\t\t\tthrow new Error('Local extension management server is not found');\n\t\t}\n\t\tif (location.scheme === Schemas.vscodeRemote) {\n\t\t\tif (this.extensionManagementServerService.remoteExtensionManagementServer) {\n\t\t\t\treturn this.extensionManagementServerService.remoteExtensionManagementServer.extensionManagementService.installFromLocation(location, this.userDataProfileService.currentProfile.extensionsResource);\n\t\t\t}\n\t\t\tthrow new Error('Remote extension management server is not found');\n\t\t}\n\t\tif (!this.extensionManagementServerService.webExtensionManagementServer) {\n\t\t\tthrow new Error('Web extension management server is not found');\n\t\t}\n\t\treturn this.extensionManagementServerService.webExtensionManagementServer.extensionManagementService.installFromLocation(location, this.userDataProfileService.currentProfile.extensionsResource);\n\t}\n\n\tprotected installVSIXInServer(vsix: URI, server: IExtensionManagementServer, options: InstallOptions | undefined): Promise<ILocalExtension> {\n\t\treturn server.extensionManagementService.install(vsix, options);\n\t}\n\n\tgetManifest(vsix: URI): Promise<IExtensionManifest> {\n\t\tif (vsix.scheme === Schemas.file && this.extensionManagementServerService.localExtensionManagementServer) {\n\t\t\treturn this.extensionManagementServerService.localExtensionManagementServer.extensionManagementService.getManifest(vsix);\n\t\t}\n\t\tif (vsix.scheme === Schemas.file && this.extensionManagementServerService.remoteExtensionManagementServer) {\n\t\t\treturn this.extensionManagementServerService.remoteExtensionManagementServer.extensionManagementService.getManifest(vsix);\n\t\t}\n\t\tif (vsix.scheme === Schemas.vscodeRemote && this.extensionManagementServerService.remoteExtensionManagementServer) {\n\t\t\treturn this.extensionManagementServerService.remoteExtensionManagementServer.extensionManagementService.getManifest(vsix);\n\t\t}\n\t\treturn Promise.reject('No Servers');\n\t}\n\n\tasync canInstall(extension: IGalleryExtension | IResourceExtension): Promise<boolean> {\n\t\tif (isGalleryExtension(extension)) {\n\t\t\treturn this.canInstallGalleryExtension(extension);\n\t\t}\n\t\treturn this.canInstallResourceExtension(extension);\n\t}\n\n\tprivate async canInstallGalleryExtension(gallery: IGalleryExtension): Promise<boolean> {\n\t\tif (this.extensionManagementServerService.localExtensionManagementServer\n\t\t\t&& await this.extensionManagementServerService.localExtensionManagementServer.extensionManagementService.canInstall(gallery)) {\n\t\t\treturn true;\n\t\t}\n\t\tconst manifest = await this.extensionGalleryService.getManifest(gallery, CancellationToken.None);\n\t\tif (!manifest) {\n\t\t\treturn false;\n\t\t}\n\t\tif (this.extensionManagementServerService.remoteExtensionManagementServer\n\t\t\t&& await this.extensionManagementServerService.remoteExtensionManagementServer.extensionManagementService.canInstall(gallery)\n\t\t\t&& this.extensionManifestPropertiesService.canExecuteOnWorkspace(manifest)) {\n\t\t\treturn true;\n\t\t}\n\t\tif (this.extensionManagementServerService.webExtensionManagementServer\n\t\t\t&& await this.extensionManagementServerService.webExtensionManagementServer.extensionManagementService.canInstall(gallery)\n\t\t\t&& this.extensionManifestPropertiesService.canExecuteOnWeb(manifest)) {\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\n\tprivate canInstallResourceExtension(extension: IResourceExtension): boolean {\n\t\tif (this.extensionManagementServerService.localExtensionManagementServer) {\n\t\t\treturn true;\n\t\t}\n\t\tif (this.extensionManagementServerService.remoteExtensionManagementServer && this.extensionManifestPropertiesService.canExecuteOnWorkspace(extension.manifest)) {\n\t\t\treturn true;\n\t\t}\n\t\tif (this.extensionManagementServerService.webExtensionManagementServer && this.extensionManifestPropertiesService.canExecuteOnWeb(extension.manifest)) {\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\n\tasync updateFromGallery(gallery: IGalleryExtension, extension: ILocalExtension, installOptions?: InstallOptions): Promise<ILocalExtension> {\n\t\tconst server = this.getServer(extension);\n\t\tif (!server) {\n\t\t\treturn Promise.reject(`Invalid location ${extension.location.toString()}`);\n\t\t}\n\n\t\tconst servers: IExtensionManagementServer[] = [];\n\n\t\t// Update Language pack on local and remote servers\n\t\tif (isLanguagePackExtension(extension.manifest)) {\n\t\t\tservers.push(...this.servers.filter(server => server !== this.extensionManagementServerService.webExtensionManagementServer));\n\t\t} else {\n\t\t\tservers.push(server);\n\t\t}\n\n\t\tinstallOptions = { ...(installOptions || {}), isApplicationScoped: extension.isApplicationScoped };\n\t\treturn Promises.settled(servers.map(server => server.extensionManagementService.installFromGallery(gallery, installOptions))).then(([local]) => local);\n\t}\n\n\tasync installGalleryExtensions(extensions: InstallExtensionInfo[]): Promise<InstallExtensionResult[]> {\n\t\tconst results = new Map<string, InstallExtensionResult>();\n\n\t\tconst extensionsByServer = new Map<IExtensionManagementServer, InstallExtensionInfo[]>();\n\t\tawait Promise.all(extensions.map(async ({ extension, options }) => {\n\t\t\ttry {\n\t\t\t\tconst servers = await this.validateAndGetExtensionManagementServersToInstall(extension, options);\n\t\t\t\tif (!options.isMachineScoped && this.isExtensionsSyncEnabled()) {\n\t\t\t\t\tif (this.extensionManagementServerService.localExtensionManagementServer && !servers.includes(this.extensionManagementServerService.localExtensionManagementServer) && (await this.extensionManagementServerService.localExtensionManagementServer.extensionManagementService.canInstall(extension))) {\n\t\t\t\t\t\tservers.push(this.extensionManagementServerService.localExtensionManagementServer);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tfor (const server of servers) {\n\t\t\t\t\tlet exensions = extensionsByServer.get(server);\n\t\t\t\t\tif (!exensions) {\n\t\t\t\t\t\textensionsByServer.set(server, exensions = []);\n\t\t\t\t\t}\n\t\t\t\t\texensions.push({ extension, options });\n\t\t\t\t}\n\t\t\t} catch (error) {\n\t\t\t\tresults.set(extension.identifier.id.toLowerCase(), {\n\t\t\t\t\tidentifier: extension.identifier,\n\t\t\t\t\tsource: extension, error,\n\t\t\t\t\toperation: InstallOperation.Install,\n\t\t\t\t\tprofileLocation: options.profileLocation ?? this.userDataProfileService.currentProfile.extensionsResource\n\t\t\t\t});\n\t\t\t}\n\t\t}));\n\n\t\tawait Promise.all([...extensionsByServer.entries()].map(async ([server, extensions]) => {\n\t\t\tconst serverResults = await server.extensionManagementService.installGalleryExtensions(extensions);\n\t\t\tfor (const result of serverResults) {\n\t\t\t\tresults.set(result.identifier.id.toLowerCase(), result);\n\t\t\t}\n\t\t}));\n\n\t\treturn [...results.values()];\n\t}\n\n\tasync installFromGallery(gallery: IGalleryExtension, installOptions?: InstallOptions): Promise<ILocalExtension> {\n\t\tconst servers = await this.validateAndGetExtensionManagementServersToInstall(gallery, installOptions);\n\t\tif (!installOptions || isUndefined(installOptions.isMachineScoped)) {\n\t\t\tconst isMachineScoped = await this.hasToFlagExtensionsMachineScoped([gallery]);\n\t\t\tinstallOptions = { ...(installOptions || {}), isMachineScoped };\n\t\t}\n\n\t\tif (!installOptions.isMachineScoped && this.isExtensionsSyncEnabled()) {\n\t\t\tif (this.extensionManagementServerService.localExtensionManagementServer && !servers.includes(this.extensionManagementServerService.localExtensionManagementServer) && (await this.extensionManagementServerService.localExtensionManagementServer.extensionManagementService.canInstall(gallery))) {\n\t\t\t\tservers.push(this.extensionManagementServerService.localExtensionManagementServer);\n\t\t\t}\n\t\t}\n\t\treturn Promises.settled(servers.map(server => server.extensionManagementService.installFromGallery(gallery, installOptions))).then(([local]) => local);\n\t}\n\n\tasync getExtensions(locations: URI[]): Promise<IResourceExtension[]> {\n\t\tconst scannedExtensions = await this.extensionsScannerService.scanMultipleExtensions(locations, ExtensionType.User, { includeInvalid: true });\n\t\tconst result: IResourceExtension[] = [];\n\t\tawait Promise.all(scannedExtensions.map(async scannedExtension => {\n\t\t\tconst workspaceExtension = await this.workspaceExtensionManagementService.toLocalWorkspaceExtension(scannedExtension);\n\t\t\tif (workspaceExtension) {\n\t\t\t\tresult.push({\n\t\t\t\t\ttype: 'resource',\n\t\t\t\t\tidentifier: workspaceExtension.identifier,\n\t\t\t\t\tlocation: workspaceExtension.location,\n\t\t\t\t\tmanifest: workspaceExtension.manifest,\n\t\t\t\t\tchangelogUri: workspaceExtension.changelogUrl,\n\t\t\t\t\treadmeUri: workspaceExtension.readmeUrl,\n\t\t\t\t});\n\t\t\t}\n\t\t}));\n\t\treturn result;\n\t}\n\n\tgetInstalledWorkspaceExtensionLocations(): URI[] {\n\t\treturn this.workspaceExtensionManagementService.getInstalledWorkspaceExtensionsLocations();\n\t}\n\n\tasync getInstalledWorkspaceExtensions(includeInvalid: boolean): Promise<ILocalExtension[]> {\n\t\treturn this.workspaceExtensionManagementService.getInstalled(includeInvalid);\n\t}\n\n\tasync installResourceExtension(extension: IResourceExtension, installOptions: InstallOptions): Promise<ILocalExtension> {\n\t\tif (!this.canInstallResourceExtension(extension)) {\n\t\t\tthrow new Error('This extension cannot be installed in the current workspace.');\n\t\t}\n\t\tif (!installOptions.isWorkspaceScoped) {\n\t\t\treturn this.installFromLocation(extension.location);\n\t\t}\n\n\t\tthis.logService.info(`Installing the extension ${extension.identifier.id} from ${extension.location.toString()} in workspace`);\n\t\tconst server = this.getWorkspaceExtensionsServer();\n\t\tthis._onInstallExtension.fire({\n\t\t\tidentifier: extension.identifier,\n\t\t\tsource: extension.location,\n\t\t\tserver,\n\t\t\tapplicationScoped: false,\n\t\t\tprofileLocation: this.userDataProfileService.currentProfile.extensionsResource,\n\t\t\tworkspaceScoped: true\n\t\t});\n\n\t\ttry {\n\t\t\tawait this.checkForWorkspaceTrust(extension.manifest, true);\n\n\t\t\tconst workspaceExtension = await this.workspaceExtensionManagementService.install(extension);\n\n\t\t\tthis.logService.info(`Successfully installed the extension ${workspaceExtension.identifier.id} from ${extension.location.toString()} in the workspace`);\n\t\t\tthis._onDidInstallExtensions.fire([{\n\t\t\t\tidentifier: workspaceExtension.identifier,\n\t\t\t\tsource: extension.location,\n\t\t\t\toperation: InstallOperation.Install,\n\t\t\t\tapplicationScoped: false,\n\t\t\t\tprofileLocation: this.userDataProfileService.currentProfile.extensionsResource,\n\t\t\t\tlocal: workspaceExtension,\n\t\t\t\tworkspaceScoped: true\n\t\t\t}]);\n\t\t\treturn workspaceExtension;\n\t\t} catch (error) {\n\t\t\tthis.logService.error(`Failed to install the extension ${extension.identifier.id} from ${extension.location.toString()} in the workspace`, getErrorMessage(error));\n\t\t\tthis._onDidInstallExtensions.fire([{\n\t\t\t\tidentifier: extension.identifier,\n\t\t\t\tsource: extension.location,\n\t\t\t\toperation: InstallOperation.Install,\n\t\t\t\tapplicationScoped: false,\n\t\t\t\tprofileLocation: this.userDataProfileService.currentProfile.extensionsResource,\n\t\t\t\terror,\n\t\t\t\tworkspaceScoped: true\n\t\t\t}]);\n\t\t\tthrow error;\n\t\t}\n\t}\n\n\tprivate async uninstallExtensionFromWorkspace(extension: ILocalExtension): Promise<void> {\n\t\tif (!extension.isWorkspaceScoped) {\n\t\t\tthrow new Error('The extension is not a workspace extension');\n\t\t}\n\n\t\tthis.logService.info(`Uninstalling the workspace extension ${extension.identifier.id} from ${extension.location.toString()}`);\n\t\tconst server = this.getWorkspaceExtensionsServer();\n\t\tthis._onUninstallExtension.fire({\n\t\t\tidentifier: extension.identifier,\n\t\t\tserver,\n\t\t\tapplicationScoped: false,\n\t\t\tworkspaceScoped: true,\n\t\t\tprofileLocation: this.userDataProfileService.currentProfile.extensionsResource\n\t\t});\n\n\t\ttry {\n\t\t\tawait this.workspaceExtensionManagementService.uninstall(extension);\n\t\t\tthis.logService.info(`Successfully uninstalled the workspace extension ${extension.identifier.id} from ${extension.location.toString()}`);\n\t\t\tthis.telemetryService.publicLog2<{}, {\n\t\t\t\towner: 'sandy081';\n\t\t\t\tcomment: 'Uninstall workspace extension';\n\t\t\t}>('workspaceextension:uninstall');\n\t\t\tthis._onDidUninstallExtension.fire({\n\t\t\t\tidentifier: extension.identifier,\n\t\t\t\tserver,\n\t\t\t\tapplicationScoped: false,\n\t\t\t\tworkspaceScoped: true,\n\t\t\t\tprofileLocation: this.userDataProfileService.currentProfile.extensionsResource\n\t\t\t});\n\t\t} catch (error) {\n\t\t\tthis.logService.error(`Failed to uninstall the workspace extension ${extension.identifier.id} from ${extension.location.toString()}`, getErrorMessage(error));\n\t\t\tthis._onDidUninstallExtension.fire({\n\t\t\t\tidentifier: extension.identifier,\n\t\t\t\tserver,\n\t\t\t\terror,\n\t\t\t\tapplicationScoped: false,\n\t\t\t\tworkspaceScoped: true,\n\t\t\t\tprofileLocation: this.userDataProfileService.currentProfile.extensionsResource\n\t\t\t});\n\t\t\tthrow error;\n\t\t}\n\t}\n\n\tprivate async validateAndGetExtensionManagementServersToInstall(gallery: IGalleryExtension, installOptions?: InstallOptions): Promise<IExtensionManagementServer[]> {\n\n\t\tconst manifest = await this.extensionGalleryService.getManifest(gallery, CancellationToken.None);\n\t\tif (!manifest) {\n\t\t\treturn Promise.reject(localize('Manifest is not found', \"Installing Extension {0} failed: Manifest is not found.\", gallery.displayName || gallery.name));\n\t\t}\n\n\t\tconst servers: IExtensionManagementServer[] = [];\n\n\t\t// Install Language pack on local and remote servers\n\t\tif (isLanguagePackExtension(manifest)) {\n\t\t\tservers.push(...this.servers.filter(server => server !== this.extensionManagementServerService.webExtensionManagementServer));\n\t\t} else {\n\t\t\tconst server = this.getExtensionManagementServerToInstall(manifest);\n\t\t\tif (server) {\n\t\t\t\tservers.push(server);\n\t\t\t}\n\t\t}\n\n\t\tif (!servers.length) {\n\t\t\tconst error = new Error(localize('cannot be installed', \"Cannot install the '{0}' extension because it is not available in this setup.\", gallery.displayName || gallery.name));\n\t\t\terror.name = ExtensionManagementErrorCode.Unsupported;\n\t\t\tthrow error;\n\t\t}\n\n\t\tif (installOptions?.context?.[EXTENSION_INSTALL_SOURCE_CONTEXT] !== ExtensionInstallSource.SETTINGS_SYNC) {\n\t\t\tawait this.checkForWorkspaceTrust(manifest, false);\n\t\t}\n\n\t\tif (!installOptions?.donotIncludePackAndDependencies) {\n\t\t\tawait this.checkInstallingExtensionOnWeb(gallery, manifest);\n\t\t}\n\n\t\treturn servers;\n\t}\n\n\tprivate getExtensionManagementServerToInstall(manifest: IExtensionManifest): IExtensionManagementServer | null {\n\t\t// Only local server\n\t\tif (this.servers.length === 1 && this.extensionManagementServerService.localExtensionManagementServer) {\n\t\t\treturn this.extensionManagementServerService.localExtensionManagementServer;\n\t\t}\n\n\t\tconst extensionKind = this.extensionManifestPropertiesService.getExtensionKind(manifest);\n\t\tfor (const kind of extensionKind) {\n\t\t\tif (kind === 'ui' && this.extensionManagementServerService.localExtensionManagementServer) {\n\t\t\t\treturn this.extensionManagementServerService.localExtensionManagementServer;\n\t\t\t}\n\t\t\tif (kind === 'workspace' && this.extensionManagementServerService.remoteExtensionManagementServer) {\n\t\t\t\treturn this.extensionManagementServerService.remoteExtensionManagementServer;\n\t\t\t}\n\t\t\tif (kind === 'web' && this.extensionManagementServerService.webExtensionManagementServer) {\n\t\t\t\treturn this.extensionManagementServerService.webExtensionManagementServer;\n\t\t\t}\n\t\t}\n\n\t\t// Local server can accept any extension. So return local server if not compatible server found.\n\t\treturn this.extensionManagementServerService.localExtensionManagementServer;\n\t}\n\n\tprivate isExtensionsSyncEnabled(): boolean {\n\t\treturn this.userDataSyncEnablementService.isEnabled() && this.userDataSyncEnablementService.isResourceEnabled(SyncResource.Extensions);\n\t}\n\n\tprivate async hasToFlagExtensionsMachineScoped(extensions: IGalleryExtension[]): Promise<boolean> {\n\t\tif (this.isExtensionsSyncEnabled()) {\n\t\t\tconst { result } = await this.dialogService.prompt<boolean>({\n\t\t\t\ttype: Severity.Info,\n\t\t\t\tmessage: extensions.length === 1 ? localize('install extension', \"Install Extension\") : localize('install extensions', \"Install Extensions\"),\n\t\t\t\tdetail: extensions.length === 1\n\t\t\t\t\t? localize('install single extension', \"Would you like to install and synchronize '{0}' extension across your devices?\", extensions[0].displayName)\n\t\t\t\t\t: localize('install multiple extensions', \"Would you like to install and synchronize extensions across your devices?\"),\n\t\t\t\tbuttons: [\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: localize({ key: 'install', comment: ['&& denotes a mnemonic'] }, \"&&Install\"),\n\t\t\t\t\t\trun: () => false\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: localize({ key: 'install and do no sync', comment: ['&& denotes a mnemonic'] }, \"Install (Do &&not sync)\"),\n\t\t\t\t\t\trun: () => true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tcancelButton: {\n\t\t\t\t\trun: () => {\n\t\t\t\t\t\tthrow new CancellationError();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\n\t\t\treturn result;\n\t\t}\n\t\treturn false;\n\t}\n\n\tgetExtensionsControlManifest(): Promise<IExtensionsControlManifest> {\n\t\tif (this.extensionManagementServerService.localExtensionManagementServer) {\n\t\t\treturn this.extensionManagementServerService.localExtensionManagementServer.extensionManagementService.getExtensionsControlManifest();\n\t\t}\n\t\tif (this.extensionManagementServerService.remoteExtensionManagementServer) {\n\t\t\treturn this.extensionManagementServerService.remoteExtensionManagementServer.extensionManagementService.getExtensionsControlManifest();\n\t\t}\n\t\tif (this.extensionManagementServerService.webExtensionManagementServer) {\n\t\t\treturn this.extensionManagementServerService.webExtensionManagementServer.extensionManagementService.getExtensionsControlManifest();\n\t\t}\n\t\treturn Promise.resolve({ malicious: [], deprecated: {}, search: [] });\n\t}\n\n\tprivate getServer(extension: ILocalExtension): IExtensionManagementServer | null {\n\t\tif (extension.isWorkspaceScoped) {\n\t\t\treturn this.getWorkspaceExtensionsServer();\n\t\t}\n\t\treturn this.extensionManagementServerService.getExtensionManagementServer(extension);\n\t}\n\n\tprivate getWorkspaceExtensionsServer(): IExtensionManagementServer {\n\t\tif (this.extensionManagementServerService.remoteExtensionManagementServer) {\n\t\t\treturn this.extensionManagementServerService.remoteExtensionManagementServer;\n\t\t}\n\t\tif (this.extensionManagementServerService.localExtensionManagementServer) {\n\t\t\treturn this.extensionManagementServerService.localExtensionManagementServer;\n\t\t}\n\t\tif (this.extensionManagementServerService.webExtensionManagementServer) {\n\t\t\treturn this.extensionManagementServerService.webExtensionManagementServer;\n\t\t}\n\t\tthrow new Error('No extension server found');\n\t}\n\n\tprotected async checkForWorkspaceTrust(manifest: IExtensionManifest, requireTrust: boolean): Promise<void> {\n\t\tif (requireTrust || this.extensionManifestPropertiesService.getExtensionUntrustedWorkspaceSupportType(manifest) === false) {\n\t\t\tconst buttons: WorkspaceTrustRequestButton[] = [];\n\t\t\tbuttons.push({ label: localize('extensionInstallWorkspaceTrustButton', \"Trust Workspace & Install\"), type: 'ContinueWithTrust' });\n\t\t\tif (!requireTrust) {\n\t\t\t\tbuttons.push({ label: localize('extensionInstallWorkspaceTrustContinueButton', \"Install\"), type: 'ContinueWithoutTrust' });\n\t\t\t}\n\t\t\tbuttons.push({ label: localize('extensionInstallWorkspaceTrustManageButton', \"Learn More\"), type: 'Manage' });\n\t\t\tconst trustState = await this.workspaceTrustRequestService.requestWorkspaceTrust({\n\t\t\t\tmessage: localize('extensionInstallWorkspaceTrustMessage', \"Enabling this extension requires a trusted workspace.\"),\n\t\t\t\tbuttons\n\t\t\t});\n\n\t\t\tif (trustState === undefined) {\n\t\t\t\tthrow new CancellationError();\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate async checkInstallingExtensionOnWeb(extension: IGalleryExtension, manifest: IExtensionManifest): Promise<void> {\n\t\tif (this.servers.length !== 1 || this.servers[0] !== this.extensionManagementServerService.webExtensionManagementServer) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst nonWebExtensions = [];\n\t\tif (manifest.extensionPack?.length) {\n\t\t\tconst extensions = await this.extensionGalleryService.getExtensions(manifest.extensionPack.map(id => ({ id })), CancellationToken.None);\n\t\t\tfor (const extension of extensions) {\n\t\t\t\tif (!(await this.servers[0].extensionManagementService.canInstall(extension))) {\n\t\t\t\t\tnonWebExtensions.push(extension);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (nonWebExtensions.length && nonWebExtensions.length === extensions.length) {\n\t\t\t\tthrow new ExtensionManagementError('Not supported in Web', ExtensionManagementErrorCode.Unsupported);\n\t\t\t}\n\t\t}\n\n\t\tconst productName = localize('VS Code for Web', \"{0} for the Web\", this.productService.nameLong);\n\t\tconst virtualWorkspaceSupport = this.extensionManifestPropertiesService.getExtensionVirtualWorkspaceSupportType(manifest);\n\t\tconst virtualWorkspaceSupportReason = getWorkspaceSupportTypeMessage(manifest.capabilities?.virtualWorkspaces);\n\t\tconst hasLimitedSupport = virtualWorkspaceSupport === 'limited' || !!virtualWorkspaceSupportReason;\n\n\t\tif (!nonWebExtensions.length && !hasLimitedSupport) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst limitedSupportMessage = localize('limited support', \"'{0}' has limited functionality in {1}.\", extension.displayName || extension.identifier.id, productName);\n\t\tlet message: string;\n\t\tlet buttons: IPromptButton<void>[] = [];\n\t\tlet detail: string | undefined;\n\n\t\tconst installAnywayButton: IPromptButton<void> = {\n\t\t\tlabel: localize({ key: 'install anyways', comment: ['&& denotes a mnemonic'] }, \"&&Install Anyway\"),\n\t\t\trun: () => { }\n\t\t};\n\n\t\tconst showExtensionsButton: IPromptButton<void> = {\n\t\t\tlabel: localize({ key: 'showExtensions', comment: ['&& denotes a mnemonic'] }, \"&&Show Extensions\"),\n\t\t\trun: () => this.instantiationService.invokeFunction(accessor => accessor.get(ICommandService).executeCommand('extension.open', extension.identifier.id, 'extensionPack'))\n\t\t};\n\n\t\tif (nonWebExtensions.length && hasLimitedSupport) {\n\t\t\tmessage = limitedSupportMessage;\n\t\t\tdetail = `${virtualWorkspaceSupportReason ? `${virtualWorkspaceSupportReason}\\n` : ''}${localize('non web extensions detail', \"Contains extensions which are not supported.\")}`;\n\t\t\tbuttons = [\n\t\t\t\tinstallAnywayButton,\n\t\t\t\tshowExtensionsButton\n\t\t\t];\n\t\t}\n\n\t\telse if (hasLimitedSupport) {\n\t\t\tmessage = limitedSupportMessage;\n\t\t\tdetail = virtualWorkspaceSupportReason || undefined;\n\t\t\tbuttons = [installAnywayButton];\n\t\t}\n\n\t\telse {\n\t\t\tmessage = localize('non web extensions', \"'{0}' contains extensions which are not supported in {1}.\", extension.displayName || extension.identifier.id, productName);\n\t\t\tbuttons = [\n\t\t\t\tinstallAnywayButton,\n\t\t\t\tshowExtensionsButton\n\t\t\t];\n\t\t}\n\n\t\tawait this.dialogService.prompt({\n\t\t\ttype: Severity.Info,\n\t\t\tmessage,\n\t\t\tdetail,\n\t\t\tbuttons,\n\t\t\tcancelButton: {\n\t\t\t\trun: () => { throw new CancellationError(); }\n\t\t\t}\n\t\t});\n\t}\n\n\tprivate _targetPlatformPromise: Promise<TargetPlatform> | undefined;\n\tgetTargetPlatform(): Promise<TargetPlatform> {\n\t\tif (!this._targetPlatformPromise) {\n\t\t\tthis._targetPlatformPromise = computeTargetPlatform(this.fileService, this.logService);\n\t\t}\n\t\treturn this._targetPlatformPromise;\n\t}\n\n\tasync cleanUp(): Promise<void> {\n\t\tawait Promise.allSettled(this.servers.map(server => server.extensionManagementService.cleanUp()));\n\t}\n\n\ttoggleAppliationScope(extension: ILocalExtension, fromProfileLocation: URI): Promise<ILocalExtension> {\n\t\tconst server = this.getServer(extension);\n\t\tif (server) {\n\t\t\treturn server.extensionManagementService.toggleAppliationScope(extension, fromProfileLocation);\n\t\t}\n\t\tthrow new Error('Not Supported');\n\t}\n\n\tcopyExtensions(from: URI, to: URI): Promise<void> {\n\t\tif (this.extensionManagementServerService.remoteExtensionManagementServer) {\n\t\t\tthrow new Error('Not Supported');\n\t\t}\n\t\tif (this.extensionManagementServerService.localExtensionManagementServer) {\n\t\t\treturn this.extensionManagementServerService.localExtensionManagementServer.extensionManagementService.copyExtensions(from, to);\n\t\t}\n\t\tif (this.extensionManagementServerService.webExtensionManagementServer) {\n\t\t\treturn this.extensionManagementServerService.webExtensionManagementServer.extensionManagementService.copyExtensions(from, to);\n\t\t}\n\t\treturn Promise.resolve();\n\t}\n\n\tregisterParticipant() { throw new Error('Not Supported'); }\n\tinstallExtensionsFromProfile(extensions: IExtensionIdentifier[], fromProfileLocation: URI, toProfileLocation: URI): Promise<ILocalExtension[]> { throw new Error('Not Supported'); }\n}\n\nclass WorkspaceExtensionsManagementService extends Disposable {\n\n\tprivate static readonly WORKSPACE_EXTENSIONS_KEY = 'workspaceExtensions.locations';\n\n\tprivate readonly _onDidChangeInvalidExtensions = this._register(new Emitter<ILocalExtension[]>());\n\treadonly onDidChangeInvalidExtensions = this._onDidChangeInvalidExtensions.event;\n\n\tprivate readonly extensions: ILocalExtension[] = [];\n\tprivate readonly initializePromise: Promise<void>;\n\n\tprivate readonly invalidExtensionWatchers = this._register(new DisposableStore());\n\n\tconstructor(\n\t\t@IFileService private readonly fileService: IFileService,\n\t\t@ILogService private readonly logService: ILogService,\n\t\t@IWorkspaceContextService private readonly workspaceService: IWorkspaceContextService,\n\t\t@IExtensionsScannerService private readonly extensionsScannerService: IExtensionsScannerService,\n\t\t@IStorageService private readonly storageService: IStorageService,\n\t\t@IUriIdentityService private readonly uriIdentityService: IUriIdentityService,\n\t\t@ITelemetryService private readonly telemetryService: ITelemetryService,\n\t) {\n\t\tsuper();\n\n\t\tthis._register(Event.debounce<FileChangesEvent, FileChangesEvent[]>(this.fileService.onDidFilesChange, (last, e) => {\n\t\t\t(last = last ?? []).push(e);\n\t\t\treturn last;\n\t\t}, 1000)(events => {\n\t\t\tconst changedInvalidExtensions = this.extensions.filter(extension => !extension.isValid && events.some(e => e.affects(extension.location)));\n\t\t\tif (changedInvalidExtensions.length) {\n\t\t\t\tthis.checkExtensionsValidity(changedInvalidExtensions);\n\t\t\t}\n\t\t}));\n\n\t\tthis.initializePromise = this.initialize();\n\t}\n\n\tprivate async initialize(): Promise<void> {\n\t\tconst existingLocations = this.getInstalledWorkspaceExtensionsLocations();\n\t\tif (!existingLocations.length) {\n\t\t\treturn;\n\t\t}\n\n\t\tawait Promise.allSettled(existingLocations.map(async location => {\n\t\t\tif (!this.workspaceService.isInsideWorkspace(location)) {\n\t\t\t\tthis.logService.info(`Removing the workspace extension ${location.toString()} as it is not inside the workspace`);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (!(await this.fileService.exists(location))) {\n\t\t\t\tthis.logService.info(`Removing the workspace extension ${location.toString()} as it does not exist`);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\ttry {\n\t\t\t\tconst extension = await this.scanWorkspaceExtension(location);\n\t\t\t\tif (extension) {\n\t\t\t\t\tthis.extensions.push(extension);\n\t\t\t\t} else {\n\t\t\t\t\tthis.logService.info(`Skipping workspace extension ${location.toString()} as it does not exist`);\n\t\t\t\t}\n\t\t\t} catch (error) {\n\t\t\t\tthis.logService.error('Skipping the workspace extension', location.toString(), error);\n\t\t\t}\n\t\t}));\n\n\t\tthis.saveWorkspaceExtensions();\n\t}\n\n\tprivate watchInvalidExtensions(): void {\n\t\tthis.invalidExtensionWatchers.clear();\n\t\tfor (const extension of this.extensions) {\n\t\t\tif (!extension.isValid) {\n\t\t\t\tthis.invalidExtensionWatchers.add(this.fileService.watch(extension.location));\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate async checkExtensionsValidity(extensions: ILocalExtension[]): Promise<void> {\n\t\tconst validExtensions: ILocalExtension[] = [];\n\t\tawait Promise.all(extensions.map(async extension => {\n\t\t\tconst newExtension = await this.scanWorkspaceExtension(extension.location);\n\t\t\tif (newExtension?.isValid) {\n\t\t\t\tvalidExtensions.push(newExtension);\n\t\t\t}\n\t\t}));\n\n\t\tlet changed = false;\n\t\tfor (const extension of validExtensions) {\n\t\t\tconst index = this.extensions.findIndex(e => this.uriIdentityService.extUri.isEqual(e.location, extension.location));\n\t\t\tif (index !== -1) {\n\t\t\t\tchanged = true;\n\t\t\t\tthis.extensions.splice(index, 1, extension);\n\t\t\t}\n\t\t}\n\n\t\tif (changed) {\n\t\t\tthis.saveWorkspaceExtensions();\n\t\t\tthis._onDidChangeInvalidExtensions.fire(validExtensions);\n\t\t}\n\t}\n\n\tasync getInstalled(includeInvalid: boolean): Promise<ILocalExtension[]> {\n\t\tawait this.initializePromise;\n\t\treturn this.extensions.filter(e => includeInvalid || e.isValid);\n\t}\n\n\tasync install(extension: IResourceExtension): Promise<ILocalExtension> {\n\t\tawait this.initializePromise;\n\n\t\tconst workspaceExtension = await this.scanWorkspaceExtension(extension.location);\n\t\tif (!workspaceExtension) {\n\t\t\tthrow new Error('Cannot install the extension as it does not exist.');\n\t\t}\n\n\t\tconst existingExtensionIndex = this.extensions.findIndex(e => areSameExtensions(e.identifier, extension.identifier));\n\t\tif (existingExtensionIndex === -1) {\n\t\t\tthis.extensions.push(workspaceExtension);\n\t\t} else {\n\t\t\tthis.extensions.splice(existingExtensionIndex, 1, workspaceExtension);\n\t\t}\n\n\t\tthis.saveWorkspaceExtensions();\n\t\tthis.telemetryService.publicLog2<{}, {\n\t\t\towner: 'sandy081';\n\t\t\tcomment: 'Install workspace extension';\n\t\t}>('workspaceextension:install');\n\n\t\treturn workspaceExtension;\n\t}\n\n\tasync uninstall(extension: ILocalExtension): Promise<void> {\n\t\tawait this.initializePromise;\n\n\t\tconst existingExtensionIndex = this.extensions.findIndex(e => areSameExtensions(e.identifier, extension.identifier));\n\t\tif (existingExtensionIndex !== -1) {\n\t\t\tthis.extensions.splice(existingExtensionIndex, 1);\n\t\t\tthis.saveWorkspaceExtensions();\n\t\t}\n\n\t\tthis.telemetryService.publicLog2<{}, {\n\t\t\towner: 'sandy081';\n\t\t\tcomment: 'Uninstall workspace extension';\n\t\t}>('workspaceextension:uninstall');\n\t}\n\n\tgetInstalledWorkspaceExtensionsLocations(): URI[] {\n\t\tconst locations: URI[] = [];\n\t\ttry {\n\t\t\tconst parsed = JSON.parse(this.storageService.get(WorkspaceExtensionsManagementService.WORKSPACE_EXTENSIONS_KEY, StorageScope.WORKSPACE, '[]'));\n\t\t\tif (Array.isArray(locations)) {\n\t\t\t\tfor (const location of parsed) {\n\t\t\t\t\tif (isString(location)) {\n\t\t\t\t\t\tif (this.workspaceService.getWorkbenchState() === WorkbenchState.FOLDER) {\n\t\t\t\t\t\t\tlocations.push(this.workspaceService.getWorkspace().folders[0].toResource(location));\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tthis.logService.warn(`Invalid value for 'extensions' in workspace storage: ${location}`);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tlocations.push(URI.revive(location));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthis.logService.warn(`Invalid value for 'extensions' in workspace storage: ${locations}`);\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tthis.logService.warn(`Error parsing workspace extensions locations: ${getErrorMessage(error)}`);\n\t\t}\n\t\treturn locations;\n\t}\n\n\tprivate saveWorkspaceExtensions(): void {\n\t\tconst locations = this.extensions.map(extension => extension.location);\n\t\tif (this.workspaceService.getWorkbenchState() === WorkbenchState.FOLDER) {\n\t\t\tthis.storageService.store(WorkspaceExtensionsManagementService.WORKSPACE_EXTENSIONS_KEY,\n\t\t\t\tJSON.stringify(coalesce(locations\n\t\t\t\t\t.map(location => this.uriIdentityService.extUri.relativePath(this.workspaceService.getWorkspace().folders[0].uri, location)))),\n\t\t\t\tStorageScope.WORKSPACE, StorageTarget.MACHINE);\n\t\t} else {\n\t\t\tthis.storageService.store(WorkspaceExtensionsManagementService.WORKSPACE_EXTENSIONS_KEY, JSON.stringify(locations), StorageScope.WORKSPACE, StorageTarget.MACHINE);\n\t\t}\n\t\tthis.watchInvalidExtensions();\n\t}\n\n\tasync scanWorkspaceExtension(location: URI): Promise<ILocalExtension | null> {\n\t\tconst scannedExtension = await this.extensionsScannerService.scanExistingExtension(location, ExtensionType.User, { includeInvalid: true });\n\t\treturn scannedExtension ? this.toLocalWorkspaceExtension(scannedExtension) : null;\n\t}\n\n\tasync toLocalWorkspaceExtension(extension: IScannedExtension): Promise<ILocalExtension> {\n\t\tconst stat = await this.fileService.resolve(extension.location);\n\t\tlet readmeUrl: URI | undefined;\n\t\tlet changelogUrl: URI | undefined;\n\t\tif (stat.children) {\n\t\t\treadmeUrl = stat.children.find(({ name }) => /^readme(\\.txt|\\.md|)$/i.test(name))?.resource;\n\t\t\tchangelogUrl = stat.children.find(({ name }) => /^changelog(\\.txt|\\.md|)$/i.test(name))?.resource;\n\t\t}\n\t\tconst validations: [Severity, string][] = [...extension.validations];\n\t\tlet isValid = extension.isValid;\n\t\tif (extension.manifest.main) {\n\t\t\tif (!(await this.fileService.exists(this.uriIdentityService.extUri.joinPath(extension.location, extension.manifest.main)))) {\n\t\t\t\tisValid = false;\n\t\t\t\tvalidations.push([Severity.Error, localize('main.notFound', \"Cannot activate because {0} not found\", extension.manifest.main)]);\n\t\t\t}\n\t\t}\n\t\treturn {\n\t\t\tidentifier: extension.identifier,\n\t\t\ttype: extension.type,\n\t\t\tisBuiltin: extension.isBuiltin || !!extension.metadata?.isBuiltin,\n\t\t\tlocation: extension.location,\n\t\t\tmanifest: extension.manifest,\n\t\t\ttargetPlatform: extension.targetPlatform,\n\t\t\tvalidations,\n\t\t\tisValid,\n\t\t\treadmeUrl,\n\t\t\tchangelogUrl,\n\t\t\tpublisherDisplayName: extension.metadata?.publisherDisplayName,\n\t\t\tpublisherId: extension.metadata?.publisherId || null,\n\t\t\tisApplicationScoped: !!extension.metadata?.isApplicationScoped,\n\t\t\tisMachineScoped: !!extension.metadata?.isMachineScoped,\n\t\t\tisPreReleaseVersion: !!extension.metadata?.isPreReleaseVersion,\n\t\t\thasPreReleaseVersion: !!extension.metadata?.hasPreReleaseVersion,\n\t\t\tpreRelease: !!extension.metadata?.preRelease,\n\t\t\tinstalledTimestamp: extension.metadata?.installedTimestamp,\n\t\t\tupdated: !!extension.metadata?.updated,\n\t\t\tpinned: !!extension.metadata?.pinned,\n\t\t\tisWorkspaceScoped: true,\n\t\t\tsource: 'resource'\n\t\t};\n\t}\n}\n"],
  "mappings": "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",
  "names": ["extensions", "server", "extension"]
}
