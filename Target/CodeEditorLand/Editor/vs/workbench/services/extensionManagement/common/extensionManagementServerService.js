var x=Object.defineProperty;var I=Object.getOwnPropertyDescriptor;var l=(i,e,r,t)=>{for(var n=t>1?void 0:t?I(e,r):e,o=i.length-1,s;o>=0;o--)(s=i[o])&&(n=(t?s(e,r,n):s(n))||n);return t&&n&&x(e,r,n),n},m=(i,e)=>(r,t)=>e(r,t,i);import{Schemas as c}from"../../../../../vs/base/common/network.js";import{isWeb as E}from"../../../../../vs/base/common/platform.js";import"../../../../../vs/base/parts/ipc/common/ipc.js";import{localize as g}from"../../../../../vs/nls.js";import"../../../../../vs/platform/extensions/common/extensions.js";import{InstantiationType as S,registerSingleton as M}from"../../../../../vs/platform/instantiation/common/extensions.js";import{IInstantiationService as f}from"../../../../../vs/platform/instantiation/common/instantiation.js";import{ILabelService as p}from"../../../../../vs/platform/label/common/label.js";import{ExtensionInstallLocation as v,IExtensionManagementServerService as b}from"../../../../../vs/workbench/services/extensionManagement/common/extensionManagement.js";import{RemoteExtensionManagementService as d}from"../../../../../vs/workbench/services/extensionManagement/common/remoteExtensionManagementService.js";import{WebExtensionManagementService as h}from"../../../../../vs/workbench/services/extensionManagement/common/webExtensionManagementService.js";import{IRemoteAgentService as u}from"../../../../../vs/workbench/services/remote/common/remoteAgentService.js";let a=class{localExtensionManagementServer=null;remoteExtensionManagementServer=null;webExtensionManagementServer=null;constructor(e,r,t){const n=e.getConnection();if(n){const o=t.createInstance(d,n.getChannel("extensions"));this.remoteExtensionManagementServer={id:"remote",extensionManagementService:o,get label(){return r.getHostLabel(c.vscodeRemote,n.remoteAuthority)||g("remote","Remote")}}}if(E){const o=t.createInstance(h);this.webExtensionManagementServer={id:"web",extensionManagementService:o,label:g("browser","Browser")}}}getExtensionManagementServer(e){if(e.location.scheme===c.vscodeRemote)return this.remoteExtensionManagementServer;if(this.webExtensionManagementServer)return this.webExtensionManagementServer;throw new Error(`Invalid Extension ${e.location}`)}getExtensionInstallLocation(e){return this.getExtensionManagementServer(e)===this.remoteExtensionManagementServer?v.Remote:v.Web}};a=l([m(0,u),m(1,p),m(2,f)],a),M(b,a,S.Delayed);export{a as ExtensionManagementServerService};
