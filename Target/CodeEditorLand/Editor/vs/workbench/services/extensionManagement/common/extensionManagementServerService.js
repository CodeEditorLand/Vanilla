var x=Object.defineProperty;var I=Object.getOwnPropertyDescriptor;var l=(i,e,o,t)=>{for(var n=t>1?void 0:t?I(e,o):e,r=i.length-1,m;r>=0;r--)(m=i[r])&&(n=(t?m(e,o,n):m(n))||n);return t&&n&&x(e,o,n),n},s=(i,e)=>(o,t)=>e(o,t,i);import{Schemas as c}from"../../../../base/common/network.js";import{isWeb as E}from"../../../../base/common/platform.js";import{localize as g}from"../../../../nls.js";import{InstantiationType as S,registerSingleton as p}from"../../../../platform/instantiation/common/extensions.js";import{IInstantiationService as M}from"../../../../platform/instantiation/common/instantiation.js";import{ILabelService as f}from"../../../../platform/label/common/label.js";import{IRemoteAgentService as b}from"../../remote/common/remoteAgentService.js";import{ExtensionInstallLocation as v,IExtensionManagementServerService as d}from"./extensionManagement.js";import{RemoteExtensionManagementService as h}from"./remoteExtensionManagementService.js";import{WebExtensionManagementService as u}from"./webExtensionManagementService.js";let a=class{localExtensionManagementServer=null;remoteExtensionManagementServer=null;webExtensionManagementServer=null;constructor(e,o,t){const n=e.getConnection();if(n){const r=t.createInstance(h,n.getChannel("extensions"));this.remoteExtensionManagementServer={id:"remote",extensionManagementService:r,get label(){return o.getHostLabel(c.vscodeRemote,n.remoteAuthority)||g("remote","Remote")}}}if(E){const r=t.createInstance(u);this.webExtensionManagementServer={id:"web",extensionManagementService:r,label:g("browser","Browser")}}}getExtensionManagementServer(e){if(e.location.scheme===c.vscodeRemote)return this.remoteExtensionManagementServer;if(this.webExtensionManagementServer)return this.webExtensionManagementServer;throw new Error(`Invalid Extension ${e.location}`)}getExtensionInstallLocation(e){return this.getExtensionManagementServer(e)===this.remoteExtensionManagementServer?v.Remote:v.Web}};a=l([s(0,b),s(1,f),s(2,M)],a),p(d,a,S.Delayed);export{a as ExtensionManagementServerService};
