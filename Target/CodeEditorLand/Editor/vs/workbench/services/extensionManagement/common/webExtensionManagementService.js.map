{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/extensionManagement/common/webExtensionManagementService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { ExtensionIdentifier, ExtensionType, IExtension, IExtensionIdentifier, IExtensionManifest, TargetPlatform } from '../../../../platform/extensions/common/extensions.js';\nimport { ILocalExtension, IGalleryExtension, InstallOperation, IExtensionGalleryService, Metadata, InstallOptions, IProductVersion } from '../../../../platform/extensionManagement/common/extensionManagement.js';\nimport { URI } from '../../../../base/common/uri.js';\nimport { Emitter, Event } from '../../../../base/common/event.js';\nimport { areSameExtensions, getGalleryExtensionId } from '../../../../platform/extensionManagement/common/extensionManagementUtil.js';\nimport { IProfileAwareExtensionManagementService, IScannedExtension, IWebExtensionsScannerService } from './extensionManagement.js';\nimport { ILogService } from '../../../../platform/log/common/log.js';\nimport { CancellationToken } from '../../../../base/common/cancellation.js';\nimport { AbstractExtensionManagementService, AbstractExtensionTask, IInstallExtensionTask, InstallExtensionTaskOptions, IUninstallExtensionTask, toExtensionManagementError, UninstallExtensionTaskOptions } from '../../../../platform/extensionManagement/common/abstractExtensionManagementService.js';\nimport { ITelemetryService } from '../../../../platform/telemetry/common/telemetry.js';\nimport { IExtensionManifestPropertiesService } from '../../extensions/common/extensionManifestPropertiesService.js';\nimport { IProductService } from '../../../../platform/product/common/productService.js';\nimport { isBoolean, isUndefined } from '../../../../base/common/types.js';\nimport { DidChangeUserDataProfileEvent, IUserDataProfileService } from '../../userDataProfile/common/userDataProfile.js';\nimport { delta } from '../../../../base/common/arrays.js';\nimport { compare } from '../../../../base/common/strings.js';\nimport { IUserDataProfilesService } from '../../../../platform/userDataProfile/common/userDataProfile.js';\nimport { IUriIdentityService } from '../../../../platform/uriIdentity/common/uriIdentity.js';\nimport { DisposableStore } from '../../../../base/common/lifecycle.js';\n\nexport class WebExtensionManagementService extends AbstractExtensionManagementService implements IProfileAwareExtensionManagementService {\n\n\tdeclare readonly _serviceBrand: undefined;\n\n\tprivate readonly disposables = this._register(new DisposableStore());\n\n\tget onProfileAwareInstallExtension() { return super.onInstallExtension; }\n\toverride get onInstallExtension() { return Event.filter(this.onProfileAwareInstallExtension, e => this.filterEvent(e), this.disposables); }\n\n\tget onProfileAwareDidInstallExtensions() { return super.onDidInstallExtensions; }\n\toverride get onDidInstallExtensions() {\n\t\treturn Event.filter(\n\t\t\tEvent.map(this.onProfileAwareDidInstallExtensions, results => results.filter(e => this.filterEvent(e)), this.disposables),\n\t\t\tresults => results.length > 0, this.disposables);\n\t}\n\n\tget onProfileAwareUninstallExtension() { return super.onUninstallExtension; }\n\toverride get onUninstallExtension() { return Event.filter(this.onProfileAwareUninstallExtension, e => this.filterEvent(e), this.disposables); }\n\n\tget onProfileAwareDidUninstallExtension() { return super.onDidUninstallExtension; }\n\toverride get onDidUninstallExtension() { return Event.filter(this.onProfileAwareDidUninstallExtension, e => this.filterEvent(e), this.disposables); }\n\n\tprivate readonly _onDidChangeProfile = this._register(new Emitter<{ readonly added: ILocalExtension[]; readonly removed: ILocalExtension[] }>());\n\treadonly onDidChangeProfile = this._onDidChangeProfile.event;\n\n\tconstructor(\n\t\t@IExtensionGalleryService extensionGalleryService: IExtensionGalleryService,\n\t\t@ITelemetryService telemetryService: ITelemetryService,\n\t\t@ILogService logService: ILogService,\n\t\t@IWebExtensionsScannerService private readonly webExtensionsScannerService: IWebExtensionsScannerService,\n\t\t@IExtensionManifestPropertiesService private readonly extensionManifestPropertiesService: IExtensionManifestPropertiesService,\n\t\t@IUserDataProfileService private readonly userDataProfileService: IUserDataProfileService,\n\t\t@IProductService productService: IProductService,\n\t\t@IUserDataProfilesService userDataProfilesService: IUserDataProfilesService,\n\t\t@IUriIdentityService uriIdentityService: IUriIdentityService,\n\t) {\n\t\tsuper(extensionGalleryService, telemetryService, uriIdentityService, logService, productService, userDataProfilesService);\n\t\tthis._register(userDataProfileService.onDidChangeCurrentProfile(e => {\n\t\t\tif (!this.uriIdentityService.extUri.isEqual(e.previous.extensionsResource, e.profile.extensionsResource)) {\n\t\t\t\te.join(this.whenProfileChanged(e));\n\t\t\t}\n\t\t}));\n\t}\n\n\tprivate filterEvent({ profileLocation, applicationScoped }: { profileLocation?: URI; applicationScoped?: boolean }): boolean {\n\t\tprofileLocation = profileLocation ?? this.userDataProfileService.currentProfile.extensionsResource;\n\t\treturn applicationScoped || this.uriIdentityService.extUri.isEqual(this.userDataProfileService.currentProfile.extensionsResource, profileLocation);\n\t}\n\n\tasync getTargetPlatform(): Promise<TargetPlatform> {\n\t\treturn TargetPlatform.WEB;\n\t}\n\n\toverride async canInstall(gallery: IGalleryExtension): Promise<boolean> {\n\t\tif (await super.canInstall(gallery)) {\n\t\t\treturn true;\n\t\t}\n\t\tif (this.isConfiguredToExecuteOnWeb(gallery)) {\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\n\tasync getInstalled(type?: ExtensionType, profileLocation?: URI): Promise<ILocalExtension[]> {\n\t\tconst extensions = [];\n\t\tif (type === undefined || type === ExtensionType.System) {\n\t\t\tconst systemExtensions = await this.webExtensionsScannerService.scanSystemExtensions();\n\t\t\textensions.push(...systemExtensions);\n\t\t}\n\t\tif (type === undefined || type === ExtensionType.User) {\n\t\t\tconst userExtensions = await this.webExtensionsScannerService.scanUserExtensions(profileLocation ?? this.userDataProfileService.currentProfile.extensionsResource);\n\t\t\textensions.push(...userExtensions);\n\t\t}\n\t\treturn extensions.map(e => toLocalExtension(e));\n\t}\n\n\tasync install(location: URI, options: InstallOptions = {}): Promise<ILocalExtension> {\n\t\tthis.logService.trace('ExtensionManagementService#install', location.toString());\n\t\tconst manifest = await this.webExtensionsScannerService.scanExtensionManifest(location);\n\t\tif (!manifest || !manifest.name || !manifest.version) {\n\t\t\tthrow new Error(`Cannot find a valid extension from the location ${location.toString()}`);\n\t\t}\n\t\tconst result = await this.installExtensions([{ manifest, extension: location, options }]);\n\t\tif (result[0]?.local) {\n\t\t\treturn result[0]?.local;\n\t\t}\n\t\tif (result[0]?.error) {\n\t\t\tthrow result[0].error;\n\t\t}\n\t\tthrow toExtensionManagementError(new Error(`Unknown error while installing extension ${getGalleryExtensionId(manifest.publisher, manifest.name)}`));\n\t}\n\n\tinstallFromLocation(location: URI, profileLocation: URI): Promise<ILocalExtension> {\n\t\treturn this.install(location, { profileLocation });\n\t}\n\n\tprotected async copyExtension(extension: ILocalExtension, fromProfileLocation: URI, toProfileLocation: URI, metadata: Partial<Metadata>): Promise<ILocalExtension> {\n\t\tconst target = await this.webExtensionsScannerService.scanExistingExtension(extension.location, extension.type, toProfileLocation);\n\t\tconst source = await this.webExtensionsScannerService.scanExistingExtension(extension.location, extension.type, fromProfileLocation);\n\t\tmetadata = { ...source?.metadata, ...metadata };\n\n\t\tlet scanned;\n\t\tif (target) {\n\t\t\tscanned = await this.webExtensionsScannerService.updateMetadata(extension, { ...target.metadata, ...metadata }, toProfileLocation);\n\t\t} else {\n\t\t\tscanned = await this.webExtensionsScannerService.addExtension(extension.location, metadata, toProfileLocation);\n\t\t}\n\t\treturn toLocalExtension(scanned);\n\t}\n\n\tasync installExtensionsFromProfile(extensions: IExtensionIdentifier[], fromProfileLocation: URI, toProfileLocation: URI): Promise<ILocalExtension[]> {\n\t\tconst result: ILocalExtension[] = [];\n\t\tconst extensionsToInstall = (await this.webExtensionsScannerService.scanUserExtensions(fromProfileLocation))\n\t\t\t.filter(e => extensions.some(id => areSameExtensions(id, e.identifier)));\n\t\tif (extensionsToInstall.length) {\n\t\t\tawait Promise.allSettled(extensionsToInstall.map(async e => {\n\t\t\t\tlet local = await this.installFromLocation(e.location, toProfileLocation);\n\t\t\t\tif (e.metadata) {\n\t\t\t\t\tlocal = await this.updateMetadata(local, e.metadata, fromProfileLocation);\n\t\t\t\t}\n\t\t\t\tresult.push(local);\n\t\t\t}));\n\t\t}\n\t\treturn result;\n\t}\n\n\tasync updateMetadata(local: ILocalExtension, metadata: Partial<Metadata>, profileLocation: URI): Promise<ILocalExtension> {\n\t\t// unset if false\n\t\tif (metadata.isMachineScoped === false) {\n\t\t\tmetadata.isMachineScoped = undefined;\n\t\t}\n\t\tif (metadata.isBuiltin === false) {\n\t\t\tmetadata.isBuiltin = undefined;\n\t\t}\n\t\tif (metadata.pinned === false) {\n\t\t\tmetadata.pinned = undefined;\n\t\t}\n\t\tconst updatedExtension = await this.webExtensionsScannerService.updateMetadata(local, metadata, profileLocation);\n\t\tconst updatedLocalExtension = toLocalExtension(updatedExtension);\n\t\tthis._onDidUpdateExtensionMetadata.fire({ local: updatedLocalExtension, profileLocation });\n\t\treturn updatedLocalExtension;\n\t}\n\n\toverride async copyExtensions(fromProfileLocation: URI, toProfileLocation: URI): Promise<void> {\n\t\tawait this.webExtensionsScannerService.copyExtensions(fromProfileLocation, toProfileLocation, e => !e.metadata?.isApplicationScoped);\n\t}\n\n\tprotected override async getCompatibleVersion(extension: IGalleryExtension, sameVersion: boolean, includePreRelease: boolean, productVersion: IProductVersion): Promise<IGalleryExtension | null> {\n\t\tconst compatibleExtension = await super.getCompatibleVersion(extension, sameVersion, includePreRelease, productVersion);\n\t\tif (compatibleExtension) {\n\t\t\treturn compatibleExtension;\n\t\t}\n\t\tif (this.isConfiguredToExecuteOnWeb(extension)) {\n\t\t\treturn extension;\n\t\t}\n\t\treturn null;\n\t}\n\n\tprivate isConfiguredToExecuteOnWeb(gallery: IGalleryExtension): boolean {\n\t\tconst configuredExtensionKind = this.extensionManifestPropertiesService.getUserConfiguredExtensionKind(gallery.identifier);\n\t\treturn !!configuredExtensionKind && configuredExtensionKind.includes('web');\n\t}\n\n\tprotected getCurrentExtensionsManifestLocation(): URI {\n\t\treturn this.userDataProfileService.currentProfile.extensionsResource;\n\t}\n\n\tprotected createInstallExtensionTask(manifest: IExtensionManifest, extension: URI | IGalleryExtension, options: InstallExtensionTaskOptions): IInstallExtensionTask {\n\t\treturn new InstallExtensionTask(manifest, extension, options, this.webExtensionsScannerService, this.userDataProfilesService);\n\t}\n\n\tprotected createUninstallExtensionTask(extension: ILocalExtension, options: UninstallExtensionTaskOptions): IUninstallExtensionTask {\n\t\treturn new UninstallExtensionTask(extension, options, this.webExtensionsScannerService);\n\t}\n\n\tzip(extension: ILocalExtension): Promise<URI> { throw new Error('unsupported'); }\n\tgetManifest(vsix: URI): Promise<IExtensionManifest> { throw new Error('unsupported'); }\n\tdownload(): Promise<URI> { throw new Error('unsupported'); }\n\treinstallFromGallery(): Promise<ILocalExtension> { throw new Error('unsupported'); }\n\n\tasync cleanUp(): Promise<void> { }\n\n\tprivate async whenProfileChanged(e: DidChangeUserDataProfileEvent): Promise<void> {\n\t\tconst previousProfileLocation = e.previous.extensionsResource;\n\t\tconst currentProfileLocation = e.profile.extensionsResource;\n\t\tif (!previousProfileLocation || !currentProfileLocation) {\n\t\t\tthrow new Error('This should not happen');\n\t\t}\n\t\tconst oldExtensions = await this.webExtensionsScannerService.scanUserExtensions(previousProfileLocation);\n\t\tconst newExtensions = await this.webExtensionsScannerService.scanUserExtensions(currentProfileLocation);\n\t\tconst { added, removed } = delta(oldExtensions, newExtensions, (a, b) => compare(`${ExtensionIdentifier.toKey(a.identifier.id)}@${a.manifest.version}`, `${ExtensionIdentifier.toKey(b.identifier.id)}@${b.manifest.version}`));\n\t\tthis._onDidChangeProfile.fire({ added: added.map(e => toLocalExtension(e)), removed: removed.map(e => toLocalExtension(e)) });\n\t}\n}\n\nfunction toLocalExtension(extension: IExtension): ILocalExtension {\n\tconst metadata = getMetadata(undefined, extension);\n\treturn {\n\t\t...extension,\n\t\tidentifier: { id: extension.identifier.id, uuid: metadata.id ?? extension.identifier.uuid },\n\t\tisMachineScoped: !!metadata.isMachineScoped,\n\t\tisApplicationScoped: !!metadata.isApplicationScoped,\n\t\tpublisherId: metadata.publisherId || null,\n\t\tpublisherDisplayName: metadata.publisherDisplayName,\n\t\tinstalledTimestamp: metadata.installedTimestamp,\n\t\tisPreReleaseVersion: !!metadata.isPreReleaseVersion,\n\t\thasPreReleaseVersion: !!metadata.hasPreReleaseVersion,\n\t\tpreRelease: !!metadata.preRelease,\n\t\ttargetPlatform: TargetPlatform.WEB,\n\t\tupdated: !!metadata.updated,\n\t\tpinned: !!metadata?.pinned,\n\t\tisWorkspaceScoped: false,\n\t\tsource: metadata?.source ?? (extension.identifier.uuid ? 'gallery' : 'resource')\n\t};\n}\n\nfunction getMetadata(options?: InstallOptions, existingExtension?: IExtension): Metadata {\n\tconst metadata: Metadata = { ...((<IScannedExtension>existingExtension)?.metadata || {}) };\n\tmetadata.isMachineScoped = options?.isMachineScoped || metadata.isMachineScoped;\n\treturn metadata;\n}\n\nclass InstallExtensionTask extends AbstractExtensionTask<ILocalExtension> implements IInstallExtensionTask {\n\n\treadonly identifier: IExtensionIdentifier;\n\treadonly source: URI | IGalleryExtension;\n\n\tprivate _profileLocation = this.options.profileLocation;\n\tget profileLocation() { return this._profileLocation; }\n\n\tprivate _operation = InstallOperation.Install;\n\tget operation() { return isUndefined(this.options.operation) ? this._operation : this.options.operation; }\n\n\tconstructor(\n\t\treadonly manifest: IExtensionManifest,\n\t\tprivate readonly extension: URI | IGalleryExtension,\n\t\treadonly options: InstallExtensionTaskOptions,\n\t\tprivate readonly webExtensionsScannerService: IWebExtensionsScannerService,\n\t\tprivate readonly userDataProfilesService: IUserDataProfilesService,\n\t) {\n\t\tsuper();\n\t\tthis.identifier = URI.isUri(extension) ? { id: getGalleryExtensionId(manifest.publisher, manifest.name) } : extension.identifier;\n\t\tthis.source = extension;\n\t}\n\n\tprotected async doRun(token: CancellationToken): Promise<ILocalExtension> {\n\t\tconst userExtensions = await this.webExtensionsScannerService.scanUserExtensions(this.options.profileLocation);\n\t\tconst existingExtension = userExtensions.find(e => areSameExtensions(e.identifier, this.identifier));\n\t\tif (existingExtension) {\n\t\t\tthis._operation = InstallOperation.Update;\n\t\t}\n\n\t\tconst metadata = getMetadata(this.options, existingExtension);\n\t\tif (!URI.isUri(this.extension)) {\n\t\t\tmetadata.id = this.extension.identifier.uuid;\n\t\t\tmetadata.publisherDisplayName = this.extension.publisherDisplayName;\n\t\t\tmetadata.publisherId = this.extension.publisherId;\n\t\t\tmetadata.installedTimestamp = Date.now();\n\t\t\tmetadata.isPreReleaseVersion = this.extension.properties.isPreReleaseVersion;\n\t\t\tmetadata.hasPreReleaseVersion = metadata.hasPreReleaseVersion || this.extension.properties.isPreReleaseVersion;\n\t\t\tmetadata.isBuiltin = this.options.isBuiltin || existingExtension?.isBuiltin;\n\t\t\tmetadata.isSystem = existingExtension?.type === ExtensionType.System ? true : undefined;\n\t\t\tmetadata.updated = !!existingExtension;\n\t\t\tmetadata.isApplicationScoped = this.options.isApplicationScoped || metadata.isApplicationScoped;\n\t\t\tmetadata.preRelease = isBoolean(this.options.preRelease)\n\t\t\t\t? this.options.preRelease\n\t\t\t\t: this.options.installPreReleaseVersion || this.extension.properties.isPreReleaseVersion || metadata.preRelease;\n\t\t\tmetadata.source = URI.isUri(this.extension) ? 'resource' : 'gallery';\n\t\t}\n\t\tmetadata.pinned = this.options.installGivenVersion ? true : (this.options.pinned ?? metadata.pinned);\n\n\t\tthis._profileLocation = metadata.isApplicationScoped ? this.userDataProfilesService.defaultProfile.extensionsResource : this.options.profileLocation;\n\t\tconst scannedExtension = URI.isUri(this.extension) ? await this.webExtensionsScannerService.addExtension(this.extension, metadata, this.profileLocation)\n\t\t\t: await this.webExtensionsScannerService.addExtensionFromGallery(this.extension, metadata, this.profileLocation);\n\t\treturn toLocalExtension(scannedExtension);\n\t}\n}\n\nclass UninstallExtensionTask extends AbstractExtensionTask<void> implements IUninstallExtensionTask {\n\n\tconstructor(\n\t\treadonly extension: ILocalExtension,\n\t\treadonly options: UninstallExtensionTaskOptions,\n\t\tprivate readonly webExtensionsScannerService: IWebExtensionsScannerService,\n\t) {\n\t\tsuper();\n\t}\n\n\tprotected doRun(token: CancellationToken): Promise<void> {\n\t\treturn this.webExtensionsScannerService.removeExtension(this.extension, this.options.profileLocation);\n\t}\n}\n"],
  "mappings": "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",
  "names": ["e"]
}
