{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/extensionManagement/common/extensionFeatures.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IMarkdownString } from '../../../../base/common/htmlContent.js';\nimport { Event } from '../../../../base/common/event.js';\nimport { ExtensionIdentifier, IExtensionManifest } from '../../../../platform/extensions/common/extensions.js';\nimport { createDecorator } from '../../../../platform/instantiation/common/instantiation.js';\nimport { Registry } from '../../../../platform/registry/common/platform.js';\nimport { IDisposable } from '../../../../base/common/lifecycle.js';\nimport { SyncDescriptor } from '../../../../platform/instantiation/common/descriptors.js';\nimport Severity from '../../../../base/common/severity.js';\nimport { IStringDictionary } from '../../../../base/common/collections.js';\nimport { ResolvedKeybinding } from '../../../../base/common/keybindings.js';\nimport { Color } from '../../../../base/common/color.js';\n\nexport namespace Extensions {\n\texport const ExtensionFeaturesRegistry = 'workbench.registry.extensionFeatures';\n}\n\nexport interface IExtensionFeatureRenderer extends IDisposable {\n\ttype: string;\n\tshouldRender(manifest: IExtensionManifest): boolean;\n\trender(manifest: IExtensionManifest): IDisposable;\n}\n\nexport interface IRenderedData<T> extends IDisposable {\n\treadonly data: T;\n\treadonly onDidChange?: Event<T>;\n}\n\nexport interface IExtensionFeatureMarkdownRenderer extends IExtensionFeatureRenderer {\n\ttype: 'markdown';\n\trender(manifest: IExtensionManifest): IRenderedData<IMarkdownString>;\n}\n\nexport type IRowData = string | IMarkdownString | ResolvedKeybinding | Color | ReadonlyArray<ResolvedKeybinding | IMarkdownString | Color>;\n\nexport interface ITableData {\n\theaders: string[];\n\trows: IRowData[][];\n}\n\nexport interface IExtensionFeatureTableRenderer extends IExtensionFeatureRenderer {\n\ttype: 'table';\n\trender(manifest: IExtensionManifest): IRenderedData<ITableData>;\n}\n\nexport interface IExtensionFeatureMarkdownAndTableRenderer extends IExtensionFeatureRenderer {\n\ttype: 'markdown+table';\n\trender(manifest: IExtensionManifest): IRenderedData<Array<IMarkdownString | ITableData>>;\n}\n\nexport interface IExtensionFeatureDescriptor {\n\treadonly id: string;\n\treadonly label: string;\n\treadonly description?: string;\n\treadonly access: {\n\t\treadonly canToggle?: boolean;\n\t\treadonly requireUserConsent?: boolean;\n\t\treadonly extensionsList?: IStringDictionary<boolean>;\n\t};\n\treadonly renderer?: SyncDescriptor<IExtensionFeatureRenderer>;\n}\n\nexport interface IExtensionFeaturesRegistry {\n\n\tregisterExtensionFeature(descriptor: IExtensionFeatureDescriptor): IDisposable;\n\tgetExtensionFeature(id: string): IExtensionFeatureDescriptor | undefined;\n\tgetExtensionFeatures(): ReadonlyArray<IExtensionFeatureDescriptor>;\n}\n\nexport interface IExtensionFeatureAccessData {\n\treadonly current?: {\n\t\treadonly count: number;\n\t\treadonly lastAccessed: number;\n\t\treadonly status?: { readonly severity: Severity; readonly message: string };\n\t};\n\treadonly totalCount: number;\n}\n\nexport const IExtensionFeaturesManagementService = createDecorator<IExtensionFeaturesManagementService>('IExtensionFeaturesManagementService');\nexport interface IExtensionFeaturesManagementService {\n\treadonly _serviceBrand: undefined;\n\n\treadonly onDidChangeEnablement: Event<{ readonly extension: ExtensionIdentifier; readonly featureId: string; readonly enabled: boolean }>;\n\tisEnabled(extension: ExtensionIdentifier, featureId: string): boolean;\n\tsetEnablement(extension: ExtensionIdentifier, featureId: string, enabled: boolean): void;\n\tgetEnablementData(featureId: string): { readonly extension: ExtensionIdentifier; readonly enabled: boolean }[];\n\n\tgetAccess(extension: ExtensionIdentifier, featureId: string, justification?: string): Promise<boolean>;\n\n\treadonly onDidChangeAccessData: Event<{ readonly extension: ExtensionIdentifier; readonly featureId: string; readonly accessData: IExtensionFeatureAccessData }>;\n\tgetAccessData(extension: ExtensionIdentifier, featureId: string): IExtensionFeatureAccessData | undefined;\n\tsetStatus(extension: ExtensionIdentifier, featureId: string, status: { readonly severity: Severity; readonly message: string } | undefined): void;\n}\n\nclass ExtensionFeaturesRegistry implements IExtensionFeaturesRegistry {\n\n\tprivate readonly extensionFeatures = new Map<string, IExtensionFeatureDescriptor>();\n\n\tregisterExtensionFeature(descriptor: IExtensionFeatureDescriptor): IDisposable {\n\t\tif (this.extensionFeatures.has(descriptor.id)) {\n\t\t\tthrow new Error(`Extension feature with id '${descriptor.id}' already exists`);\n\t\t}\n\t\tthis.extensionFeatures.set(descriptor.id, descriptor);\n\t\treturn {\n\t\t\tdispose: () => this.extensionFeatures.delete(descriptor.id)\n\t\t};\n\t}\n\n\tgetExtensionFeature(id: string): IExtensionFeatureDescriptor | undefined {\n\t\treturn this.extensionFeatures.get(id);\n\t}\n\n\tgetExtensionFeatures(): ReadonlyArray<IExtensionFeatureDescriptor> {\n\t\treturn Array.from(this.extensionFeatures.values());\n\t}\n}\n\nRegistry.add(Extensions.ExtensionFeaturesRegistry, new ExtensionFeaturesRegistry());\n"],
  "mappings": ";;AAKA,SAAS,uBAAuB;AAChC,SAAS,aAAa;AACtB,SAAS,qBAAqB,0BAA0B;AACxD,SAAS,uBAAuB;AAChC,SAAS,gBAAgB;AACzB,SAAS,mBAAmB;AAC5B,SAAS,sBAAsB;AAC/B,OAAO,cAAc;AACrB,SAAS,yBAAyB;AAClC,SAAS,0BAA0B;AACnC,SAAS,aAAa;AAEf,IAAU;AAAA,CAAV,CAAUA,gBAAV;AACC,EAAMA,YAAA,4BAA4B;AAAA,GADzB;AAiEV,MAAM,sCAAsC,gBAAqD,qCAAqC;AAgB7I,MAAM,0BAAgE;AAAA,EAlGtE,OAkGsE;AAAA;AAAA;AAAA,EAEpD,oBAAoB,oBAAI,IAAyC;AAAA,EAElF,yBAAyB,YAAsD;AAC9E,QAAI,KAAK,kBAAkB,IAAI,WAAW,EAAE,GAAG;AAC9C,YAAM,IAAI,MAAM,8BAA8B,WAAW,EAAE,kBAAkB;AAAA,IAC9E;AACA,SAAK,kBAAkB,IAAI,WAAW,IAAI,UAAU;AACpD,WAAO;AAAA,MACN,SAAS,6BAAM,KAAK,kBAAkB,OAAO,WAAW,EAAE,GAAjD;AAAA,IACV;AAAA,EACD;AAAA,EAEA,oBAAoB,IAAqD;AACxE,WAAO,KAAK,kBAAkB,IAAI,EAAE;AAAA,EACrC;AAAA,EAEA,uBAAmE;AAClE,WAAO,MAAM,KAAK,KAAK,kBAAkB,OAAO,CAAC;AAAA,EAClD;AACD;AAEA,SAAS,IAAI,WAAW,2BAA2B,IAAI,0BAA0B,CAAC;",
  "names": ["Extensions"]
}
