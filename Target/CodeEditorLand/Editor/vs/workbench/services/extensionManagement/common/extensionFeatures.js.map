{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/extensionManagement/common/extensionFeatures.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport type { IStringDictionary } from \"../../../../base/common/collections.js\";\nimport type { Color } from \"../../../../base/common/color.js\";\nimport type { Event } from \"../../../../base/common/event.js\";\nimport type { IMarkdownString } from \"../../../../base/common/htmlContent.js\";\nimport type { ResolvedKeybinding } from \"../../../../base/common/keybindings.js\";\nimport type { IDisposable } from \"../../../../base/common/lifecycle.js\";\nimport type Severity from \"../../../../base/common/severity.js\";\nimport type {\n\tExtensionIdentifier,\n\tIExtensionManifest,\n} from \"../../../../platform/extensions/common/extensions.js\";\nimport type { SyncDescriptor } from \"../../../../platform/instantiation/common/descriptors.js\";\nimport { createDecorator } from \"../../../../platform/instantiation/common/instantiation.js\";\nimport { Registry } from \"../../../../platform/registry/common/platform.js\";\n\nexport namespace Extensions {\n\texport const ExtensionFeaturesRegistry =\n\t\t\"workbench.registry.extensionFeatures\";\n}\n\nexport interface IExtensionFeatureRenderer extends IDisposable {\n\ttype: string;\n\tshouldRender(manifest: IExtensionManifest): boolean;\n\trender(manifest: IExtensionManifest): IDisposable;\n}\n\nexport interface IRenderedData<T> extends IDisposable {\n\treadonly data: T;\n\treadonly onDidChange?: Event<T>;\n}\n\nexport interface IExtensionFeatureMarkdownRenderer\n\textends IExtensionFeatureRenderer {\n\ttype: \"markdown\";\n\trender(manifest: IExtensionManifest): IRenderedData<IMarkdownString>;\n}\n\nexport type IRowData =\n\t| string\n\t| IMarkdownString\n\t| ResolvedKeybinding\n\t| Color\n\t| ReadonlyArray<ResolvedKeybinding | IMarkdownString | Color>;\n\nexport interface ITableData {\n\theaders: string[];\n\trows: IRowData[][];\n}\n\nexport interface IExtensionFeatureTableRenderer\n\textends IExtensionFeatureRenderer {\n\ttype: \"table\";\n\trender(manifest: IExtensionManifest): IRenderedData<ITableData>;\n}\n\nexport interface IExtensionFeatureMarkdownAndTableRenderer\n\textends IExtensionFeatureRenderer {\n\ttype: \"markdown+table\";\n\trender(\n\t\tmanifest: IExtensionManifest,\n\t): IRenderedData<Array<IMarkdownString | ITableData>>;\n}\n\nexport interface IExtensionFeatureDescriptor {\n\treadonly id: string;\n\treadonly label: string;\n\treadonly description?: string;\n\treadonly access: {\n\t\treadonly canToggle?: boolean;\n\t\treadonly requireUserConsent?: boolean;\n\t\treadonly extensionsList?: IStringDictionary<boolean>;\n\t};\n\treadonly renderer?: SyncDescriptor<IExtensionFeatureRenderer>;\n}\n\nexport interface IExtensionFeaturesRegistry {\n\tregisterExtensionFeature(\n\t\tdescriptor: IExtensionFeatureDescriptor,\n\t): IDisposable;\n\tgetExtensionFeature(id: string): IExtensionFeatureDescriptor | undefined;\n\tgetExtensionFeatures(): ReadonlyArray<IExtensionFeatureDescriptor>;\n}\n\nexport interface IExtensionFeatureAccessData {\n\treadonly current?: {\n\t\treadonly count: number;\n\t\treadonly lastAccessed: number;\n\t\treadonly status?: {\n\t\t\treadonly severity: Severity;\n\t\t\treadonly message: string;\n\t\t};\n\t};\n\treadonly totalCount: number;\n}\n\nexport const IExtensionFeaturesManagementService =\n\tcreateDecorator<IExtensionFeaturesManagementService>(\n\t\t\"IExtensionFeaturesManagementService\",\n\t);\nexport interface IExtensionFeaturesManagementService {\n\treadonly _serviceBrand: undefined;\n\n\treadonly onDidChangeEnablement: Event<{\n\t\treadonly extension: ExtensionIdentifier;\n\t\treadonly featureId: string;\n\t\treadonly enabled: boolean;\n\t}>;\n\tisEnabled(extension: ExtensionIdentifier, featureId: string): boolean;\n\tsetEnablement(\n\t\textension: ExtensionIdentifier,\n\t\tfeatureId: string,\n\t\tenabled: boolean,\n\t): void;\n\tgetEnablementData(\n\t\tfeatureId: string,\n\t): { readonly extension: ExtensionIdentifier; readonly enabled: boolean }[];\n\n\tgetAccess(\n\t\textension: ExtensionIdentifier,\n\t\tfeatureId: string,\n\t\tjustification?: string,\n\t): Promise<boolean>;\n\n\treadonly onDidChangeAccessData: Event<{\n\t\treadonly extension: ExtensionIdentifier;\n\t\treadonly featureId: string;\n\t\treadonly accessData: IExtensionFeatureAccessData;\n\t}>;\n\tgetAccessData(\n\t\textension: ExtensionIdentifier,\n\t\tfeatureId: string,\n\t): IExtensionFeatureAccessData | undefined;\n\tsetStatus(\n\t\textension: ExtensionIdentifier,\n\t\tfeatureId: string,\n\t\tstatus:\n\t\t\t| { readonly severity: Severity; readonly message: string }\n\t\t\t| undefined,\n\t): void;\n}\n\nclass ExtensionFeaturesRegistry implements IExtensionFeaturesRegistry {\n\tprivate readonly extensionFeatures = new Map<\n\t\tstring,\n\t\tIExtensionFeatureDescriptor\n\t>();\n\n\tregisterExtensionFeature(\n\t\tdescriptor: IExtensionFeatureDescriptor,\n\t): IDisposable {\n\t\tif (this.extensionFeatures.has(descriptor.id)) {\n\t\t\tthrow new Error(\n\t\t\t\t`Extension feature with id '${descriptor.id}' already exists`,\n\t\t\t);\n\t\t}\n\t\tthis.extensionFeatures.set(descriptor.id, descriptor);\n\t\treturn {\n\t\t\tdispose: () => this.extensionFeatures.delete(descriptor.id),\n\t\t};\n\t}\n\n\tgetExtensionFeature(id: string): IExtensionFeatureDescriptor | undefined {\n\t\treturn this.extensionFeatures.get(id);\n\t}\n\n\tgetExtensionFeatures(): ReadonlyArray<IExtensionFeatureDescriptor> {\n\t\treturn Array.from(this.extensionFeatures.values());\n\t}\n}\n\nRegistry.add(\n\tExtensions.ExtensionFeaturesRegistry,\n\tnew ExtensionFeaturesRegistry(),\n);\n"],
  "mappings": ";;AAiBA,SAAS,uBAAuB;AAChC,SAAS,gBAAgB;AAElB,IAAU;AAAA,CAAV,CAAUA,gBAAV;AACC,EAAMA,YAAA,4BACZ;AAAA,GAFe;AAgFV,MAAM,sCACZ;AAAA,EACC;AACD;AA2CD,MAAM,0BAAgE;AAAA,EAlJtE,OAkJsE;AAAA;AAAA;AAAA,EACpD,oBAAoB,oBAAI,IAGvC;AAAA,EAEF,yBACC,YACc;AACd,QAAI,KAAK,kBAAkB,IAAI,WAAW,EAAE,GAAG;AAC9C,YAAM,IAAI;AAAA,QACT,8BAA8B,WAAW,EAAE;AAAA,MAC5C;AAAA,IACD;AACA,SAAK,kBAAkB,IAAI,WAAW,IAAI,UAAU;AACpD,WAAO;AAAA,MACN,SAAS,6BAAM,KAAK,kBAAkB,OAAO,WAAW,EAAE,GAAjD;AAAA,IACV;AAAA,EACD;AAAA,EAEA,oBAAoB,IAAqD;AACxE,WAAO,KAAK,kBAAkB,IAAI,EAAE;AAAA,EACrC;AAAA,EAEA,uBAAmE;AAClE,WAAO,MAAM,KAAK,KAAK,kBAAkB,OAAO,CAAC;AAAA,EAClD;AACD;AAEA,SAAS;AAAA,EACR,WAAW;AAAA,EACX,IAAI,0BAA0B;AAC/B;",
  "names": ["Extensions"]
}
