{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/extensionManagement/electron-sandbox/remoteExtensionManagementService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IChannel } from '../../../../base/parts/ipc/common/ipc.js';\nimport { ILocalExtension, IGalleryExtension, IExtensionGalleryService, InstallOperation, InstallOptions, ExtensionManagementError, ExtensionManagementErrorCode, EXTENSION_INSTALL_CLIENT_TARGET_PLATFORM_CONTEXT } from '../../../../platform/extensionManagement/common/extensionManagement.js';\nimport { URI } from '../../../../base/common/uri.js';\nimport { ExtensionType, IExtensionManifest } from '../../../../platform/extensions/common/extensions.js';\nimport { areSameExtensions } from '../../../../platform/extensionManagement/common/extensionManagementUtil.js';\nimport { ILogService } from '../../../../platform/log/common/log.js';\nimport { toErrorMessage } from '../../../../base/common/errorMessage.js';\nimport { isNonEmptyArray } from '../../../../base/common/arrays.js';\nimport { CancellationToken } from '../../../../base/common/cancellation.js';\nimport { localize } from '../../../../nls.js';\nimport { IProductService } from '../../../../platform/product/common/productService.js';\nimport { IConfigurationService } from '../../../../platform/configuration/common/configuration.js';\nimport { IExtensionManagementServer } from '../common/extensionManagement.js';\nimport { Promises } from '../../../../base/common/async.js';\nimport { IExtensionManifestPropertiesService } from '../../extensions/common/extensionManifestPropertiesService.js';\nimport { IFileService } from '../../../../platform/files/common/files.js';\nimport { RemoteExtensionManagementService } from '../common/remoteExtensionManagementService.js';\nimport { IUserDataProfilesService } from '../../../../platform/userDataProfile/common/userDataProfile.js';\nimport { IUserDataProfileService } from '../../userDataProfile/common/userDataProfile.js';\nimport { IRemoteUserDataProfilesService } from '../../userDataProfile/common/remoteUserDataProfiles.js';\nimport { IUriIdentityService } from '../../../../platform/uriIdentity/common/uriIdentity.js';\nimport { areApiProposalsCompatible } from '../../../../platform/extensions/common/extensionValidator.js';\n\nexport class NativeRemoteExtensionManagementService extends RemoteExtensionManagementService {\n\n\tconstructor(\n\t\tchannel: IChannel,\n\t\tprivate readonly localExtensionManagementServer: IExtensionManagementServer,\n\t\t@IUserDataProfileService userDataProfileService: IUserDataProfileService,\n\t\t@IUserDataProfilesService userDataProfilesService: IUserDataProfilesService,\n\t\t@IRemoteUserDataProfilesService remoteUserDataProfilesService: IRemoteUserDataProfilesService,\n\t\t@IUriIdentityService uriIdentityService: IUriIdentityService,\n\t\t@ILogService private readonly logService: ILogService,\n\t\t@IExtensionGalleryService private readonly galleryService: IExtensionGalleryService,\n\t\t@IConfigurationService private readonly configurationService: IConfigurationService,\n\t\t@IProductService private readonly productService: IProductService,\n\t\t@IFileService private readonly fileService: IFileService,\n\t\t@IExtensionManifestPropertiesService private readonly extensionManifestPropertiesService: IExtensionManifestPropertiesService,\n\t) {\n\t\tsuper(channel, userDataProfileService, userDataProfilesService, remoteUserDataProfilesService, uriIdentityService);\n\t}\n\n\toverride async install(vsix: URI, options?: InstallOptions): Promise<ILocalExtension> {\n\t\tconst local = await super.install(vsix, options);\n\t\tawait this.installUIDependenciesAndPackedExtensions(local);\n\t\treturn local;\n\t}\n\n\toverride async installFromGallery(extension: IGalleryExtension, installOptions?: InstallOptions): Promise<ILocalExtension> {\n\t\tconst local = await this.doInstallFromGallery(extension, installOptions);\n\t\tawait this.installUIDependenciesAndPackedExtensions(local);\n\t\treturn local;\n\t}\n\n\tprivate async doInstallFromGallery(extension: IGalleryExtension, installOptions?: InstallOptions): Promise<ILocalExtension> {\n\t\tif (this.configurationService.getValue('remote.downloadExtensionsLocally')) {\n\t\t\treturn this.downloadAndInstall(extension, installOptions || {});\n\t\t}\n\t\ttry {\n\t\t\tconst clientTargetPlatform = await this.localExtensionManagementServer.extensionManagementService.getTargetPlatform();\n\t\t\treturn await super.installFromGallery(extension, { ...installOptions, context: { ...installOptions?.context, [EXTENSION_INSTALL_CLIENT_TARGET_PLATFORM_CONTEXT]: clientTargetPlatform } });\n\t\t} catch (error) {\n\t\t\tswitch (error.name) {\n\t\t\t\tcase ExtensionManagementErrorCode.Download:\n\t\t\t\tcase ExtensionManagementErrorCode.DownloadSignature:\n\t\t\t\tcase ExtensionManagementErrorCode.Gallery:\n\t\t\t\tcase ExtensionManagementErrorCode.Internal:\n\t\t\t\tcase ExtensionManagementErrorCode.Unknown:\n\t\t\t\t\ttry {\n\t\t\t\t\t\tthis.logService.error(`Error while installing '${extension.identifier.id}' extension in the remote server.`, toErrorMessage(error));\n\t\t\t\t\t\treturn await this.downloadAndInstall(extension, installOptions || {});\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\tthis.logService.error(e);\n\t\t\t\t\t\tthrow e;\n\t\t\t\t\t}\n\t\t\t\tdefault:\n\t\t\t\t\tthis.logService.debug('Remote Install Error Name', error.name);\n\t\t\t\t\tthrow error;\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate async downloadAndInstall(extension: IGalleryExtension, installOptions: InstallOptions): Promise<ILocalExtension> {\n\t\tthis.logService.info(`Downloading the '${extension.identifier.id}' extension locally and install`);\n\t\tconst compatible = await this.checkAndGetCompatible(extension, !!installOptions.installPreReleaseVersion);\n\t\tinstallOptions = { ...installOptions, donotIncludePackAndDependencies: true };\n\t\tconst installed = await this.getInstalled(ExtensionType.User, undefined, installOptions.productVersion);\n\t\tconst workspaceExtensions = await this.getAllWorkspaceDependenciesAndPackedExtensions(compatible, CancellationToken.None);\n\t\tif (workspaceExtensions.length) {\n\t\t\tthis.logService.info(`Downloading the workspace dependencies and packed extensions of '${compatible.identifier.id}' locally and install`);\n\t\t\tfor (const workspaceExtension of workspaceExtensions) {\n\t\t\t\tawait this.downloadCompatibleAndInstall(workspaceExtension, installed, installOptions);\n\t\t\t}\n\t\t}\n\t\treturn await this.downloadCompatibleAndInstall(compatible, installed, installOptions);\n\t}\n\n\tprivate async downloadCompatibleAndInstall(extension: IGalleryExtension, installed: ILocalExtension[], installOptions: InstallOptions): Promise<ILocalExtension> {\n\t\tconst compatible = await this.checkAndGetCompatible(extension, !!installOptions.installPreReleaseVersion);\n\t\tthis.logService.trace('Downloading extension:', compatible.identifier.id);\n\t\tconst location = await this.localExtensionManagementServer.extensionManagementService.download(compatible, installed.filter(i => areSameExtensions(i.identifier, compatible.identifier))[0] ? InstallOperation.Update : InstallOperation.Install, !!installOptions.donotVerifySignature);\n\t\tthis.logService.info('Downloaded extension:', compatible.identifier.id, location.path);\n\t\ttry {\n\t\t\tconst local = await super.install(location, { ...installOptions, keepExisting: true });\n\t\t\tthis.logService.info(`Successfully installed '${compatible.identifier.id}' extension`);\n\t\t\treturn local;\n\t\t} finally {\n\t\t\ttry {\n\t\t\t\tawait this.fileService.del(location);\n\t\t\t} catch (error) {\n\t\t\t\tthis.logService.error(error);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate async checkAndGetCompatible(extension: IGalleryExtension, includePreRelease: boolean): Promise<IGalleryExtension> {\n\t\tconst targetPlatform = await this.getTargetPlatform();\n\t\tlet compatibleExtension: IGalleryExtension | null = null;\n\n\t\tif (extension.hasPreReleaseVersion && extension.properties.isPreReleaseVersion !== includePreRelease) {\n\t\t\tcompatibleExtension = (await this.galleryService.getExtensions([{ ...extension.identifier, preRelease: includePreRelease }], { targetPlatform, compatible: true }, CancellationToken.None))[0] || null;\n\t\t}\n\n\t\tif (!compatibleExtension && await this.galleryService.isExtensionCompatible(extension, includePreRelease, targetPlatform)) {\n\t\t\tcompatibleExtension = extension;\n\t\t}\n\n\t\tif (!compatibleExtension) {\n\t\t\tcompatibleExtension = await this.galleryService.getCompatibleExtension(extension, includePreRelease, targetPlatform);\n\t\t}\n\n\t\tif (!compatibleExtension) {\n\t\t\tconst incompatibleApiProposalsMessages: string[] = [];\n\t\t\tif (!areApiProposalsCompatible(extension.properties.enabledApiProposals ?? [], incompatibleApiProposalsMessages)) {\n\t\t\t\tthrow new ExtensionManagementError(localize('incompatibleAPI', \"Can't install '{0}' extension. {1}\", extension.displayName ?? extension.identifier.id, incompatibleApiProposalsMessages[0]), ExtensionManagementErrorCode.IncompatibleApi);\n\t\t\t}\n\t\t\t/** If no compatible release version is found, check if the extension has a release version or not and throw relevant error */\n\t\t\tif (!includePreRelease && extension.properties.isPreReleaseVersion && (await this.galleryService.getExtensions([extension.identifier], CancellationToken.None))[0]) {\n\t\t\t\tthrow new ExtensionManagementError(localize('notFoundReleaseExtension', \"Can't install release version of '{0}' extension because it has no release version.\", extension.identifier.id), ExtensionManagementErrorCode.ReleaseVersionNotFound);\n\t\t\t}\n\t\t\tthrow new ExtensionManagementError(localize('notFoundCompatibleDependency', \"Can't install '{0}' extension because it is not compatible with the current version of {1} (version {2}).\", extension.identifier.id, this.productService.nameLong, this.productService.version), ExtensionManagementErrorCode.Incompatible);\n\t\t}\n\n\t\treturn compatibleExtension;\n\t}\n\n\tprivate async installUIDependenciesAndPackedExtensions(local: ILocalExtension): Promise<void> {\n\t\tconst uiExtensions = await this.getAllUIDependenciesAndPackedExtensions(local.manifest, CancellationToken.None);\n\t\tconst installed = await this.localExtensionManagementServer.extensionManagementService.getInstalled();\n\t\tconst toInstall = uiExtensions.filter(e => installed.every(i => !areSameExtensions(i.identifier, e.identifier)));\n\t\tif (toInstall.length) {\n\t\t\tthis.logService.info(`Installing UI dependencies and packed extensions of '${local.identifier.id}' locally`);\n\t\t\tawait Promises.settled(toInstall.map(d => this.localExtensionManagementServer.extensionManagementService.installFromGallery(d)));\n\t\t}\n\t}\n\n\tprivate async getAllUIDependenciesAndPackedExtensions(manifest: IExtensionManifest, token: CancellationToken): Promise<IGalleryExtension[]> {\n\t\tconst result = new Map<string, IGalleryExtension>();\n\t\tconst extensions = [...(manifest.extensionPack || []), ...(manifest.extensionDependencies || [])];\n\t\tawait this.getDependenciesAndPackedExtensionsRecursively(extensions, result, true, token);\n\t\treturn [...result.values()];\n\t}\n\n\tprivate async getAllWorkspaceDependenciesAndPackedExtensions(extension: IGalleryExtension, token: CancellationToken): Promise<IGalleryExtension[]> {\n\t\tconst result = new Map<string, IGalleryExtension>();\n\t\tresult.set(extension.identifier.id.toLowerCase(), extension);\n\t\tconst manifest = await this.galleryService.getManifest(extension, token);\n\t\tif (manifest) {\n\t\t\tconst extensions = [...(manifest.extensionPack || []), ...(manifest.extensionDependencies || [])];\n\t\t\tawait this.getDependenciesAndPackedExtensionsRecursively(extensions, result, false, token);\n\t\t}\n\t\tresult.delete(extension.identifier.id);\n\t\treturn [...result.values()];\n\t}\n\n\tprivate async getDependenciesAndPackedExtensionsRecursively(toGet: string[], result: Map<string, IGalleryExtension>, uiExtension: boolean, token: CancellationToken): Promise<void> {\n\t\tif (toGet.length === 0) {\n\t\t\treturn Promise.resolve();\n\t\t}\n\n\t\tconst extensions = await this.galleryService.getExtensions(toGet.map(id => ({ id })), token);\n\t\tconst manifests = await Promise.all(extensions.map(e => this.galleryService.getManifest(e, token)));\n\t\tconst extensionsManifests: IExtensionManifest[] = [];\n\t\tfor (let idx = 0; idx < extensions.length; idx++) {\n\t\t\tconst extension = extensions[idx];\n\t\t\tconst manifest = manifests[idx];\n\t\t\tif (manifest && this.extensionManifestPropertiesService.prefersExecuteOnUI(manifest) === uiExtension) {\n\t\t\t\tresult.set(extension.identifier.id.toLowerCase(), extension);\n\t\t\t\textensionsManifests.push(manifest);\n\t\t\t}\n\t\t}\n\t\ttoGet = [];\n\t\tfor (const extensionManifest of extensionsManifests) {\n\t\t\tif (isNonEmptyArray(extensionManifest.extensionDependencies)) {\n\t\t\t\tfor (const id of extensionManifest.extensionDependencies) {\n\t\t\t\t\tif (!result.has(id.toLowerCase())) {\n\t\t\t\t\t\ttoGet.push(id);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (isNonEmptyArray(extensionManifest.extensionPack)) {\n\t\t\t\tfor (const id of extensionManifest.extensionPack) {\n\t\t\t\t\tif (!result.has(id.toLowerCase())) {\n\t\t\t\t\t\ttoGet.push(id);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn this.getDependenciesAndPackedExtensionsRecursively(toGet, result, uiExtension, token);\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
