var f=Object.defineProperty;var p=Object.getOwnPropertyDescriptor;var m=(s,r,e,i)=>{for(var o=i>1?void 0:i?p(r,e):r,n=s.length-1,t;n>=0;n--)(t=s[n])&&(o=(i?t(r,e,o):t(o))||o);return i&&o&&f(r,e,o),o},a=(s,r)=>(e,i)=>r(e,i,s);import{Schemas as v}from"../../../../base/common/network.js";import{joinPath as d}from"../../../../base/common/resources.js";import{generateUuid as I}from"../../../../base/common/uuid.js";import{IDownloadService as h}from"../../../../platform/download/common/download.js";import{ExtensionIdentifier as S,ExtensionType as u,isResolverExtension as w}from"../../../../platform/extensions/common/extensions.js";import{IFileService as y}from"../../../../platform/files/common/files.js";import{ILogService as E}from"../../../../platform/log/common/log.js";import{IUriIdentityService as x}from"../../../../platform/uriIdentity/common/uriIdentity.js";import{INativeWorkbenchEnvironmentService as g}from"../../environment/electron-sandbox/environmentService.js";import{IUserDataProfileService as P}from"../../userDataProfile/common/userDataProfile.js";import{ProfileAwareExtensionManagementChannelClient as U}from"../common/extensionManagementChannelClient.js";let l=class extends U{constructor(e,i,o,n,t,c,D){super(e,i,o);this.fileService=n;this.downloadService=t;this.nativeEnvironmentService=c;this.logService=D}filterEvent(e,i){return i||this.uriIdentityService.extUri.isEqual(this.userDataProfileService.currentProfile.extensionsResource,e)}async install(e,i){const{location:o,cleanup:n}=await this.downloadVsix(e);try{return await super.install(o,i)}finally{await n()}}async downloadVsix(e){if(e.scheme===v.file)return{location:e,async cleanup(){}};this.logService.trace("Downloading extension from",e.toString());const i=d(this.nativeEnvironmentService.extensionsDownloadLocation,I());return await this.downloadService.download(e,i),this.logService.info("Downloaded extension to",i.toString()),{location:i,cleanup:async()=>{try{await this.fileService.del(i)}catch(n){this.logService.error(n)}}}}async switchExtensionsProfile(e,i,o){if(this.nativeEnvironmentService.remoteAuthority){const t=(await this.getInstalled(u.User,e)).find(c=>w(c.manifest,this.nativeEnvironmentService.remoteAuthority));t&&(o||(o=[]),o.push(new S(t.identifier.id)))}return super.switchExtensionsProfile(e,i,o)}};l=m([a(1,P),a(2,x),a(3,y),a(4,h),a(5,g),a(6,E)],l);export{l as NativeExtensionManagementService};
