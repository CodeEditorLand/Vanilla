var x=Object.defineProperty;var I=Object.getOwnPropertyDescriptor;var c=(a,e,t,o)=>{for(var n=o>1?void 0:o?I(e,t):e,i=a.length-1,r;i>=0;i--)(r=a[i])&&(n=(o?r(e,t,n):r(n))||n);return o&&n&&x(e,t,n),n},s=(a,e)=>(t,o)=>e(t,o,a);import{Disposable as E}from"../../../../../vs/base/common/lifecycle.js";import{Schemas as l}from"../../../../../vs/base/common/network.js";import"../../../../../vs/base/parts/ipc/common/ipc.js";import{localize as g}from"../../../../../vs/nls.js";import"../../../../../vs/platform/extensions/common/extensions.js";import{InstantiationType as M,registerSingleton as h}from"../../../../../vs/platform/instantiation/common/extensions.js";import{IInstantiationService as f}from"../../../../../vs/platform/instantiation/common/instantiation.js";import{ISharedProcessService as p}from"../../../../../vs/platform/ipc/electron-sandbox/services.js";import{ILabelService as d}from"../../../../../vs/platform/label/common/label.js";import{ExtensionInstallLocation as v,IExtensionManagementServerService as u}from"../../../../../vs/workbench/services/extensionManagement/common/extensionManagement.js";import{NativeExtensionManagementService as L}from"../../../../../vs/workbench/services/extensionManagement/electron-sandbox/nativeExtensionManagementService.js";import{NativeRemoteExtensionManagementService as b}from"../../../../../vs/workbench/services/extensionManagement/electron-sandbox/remoteExtensionManagementService.js";import{IRemoteAgentService as y}from"../../../../../vs/workbench/services/remote/common/remoteAgentService.js";let m=class extends E{localExtensionManagementServer;remoteExtensionManagementServer=null;webExtensionManagementServer=null;constructor(e,t,o,n){super();const i=this._register(n.createInstance(L,e.getChannel("extensions")));this.localExtensionManagementServer={extensionManagementService:i,id:"local",label:g("local","Local")};const r=t.getConnection();if(r){const S=n.createInstance(b,r.getChannel("extensions"),this.localExtensionManagementServer);this.remoteExtensionManagementServer={id:"remote",extensionManagementService:S,get label(){return o.getHostLabel(l.vscodeRemote,r.remoteAuthority)||g("remote","Remote")}}}}getExtensionManagementServer(e){if(e.location.scheme===l.file)return this.localExtensionManagementServer;if(this.remoteExtensionManagementServer&&e.location.scheme===l.vscodeRemote)return this.remoteExtensionManagementServer;throw new Error(`Invalid Extension ${e.location}`)}getExtensionInstallLocation(e){return this.getExtensionManagementServer(e)===this.remoteExtensionManagementServer?v.Remote:v.Local}};m=c([s(0,p),s(1,y),s(2,d),s(3,f)],m),h(u,m,M.Delayed);export{m as ExtensionManagementServerService};
