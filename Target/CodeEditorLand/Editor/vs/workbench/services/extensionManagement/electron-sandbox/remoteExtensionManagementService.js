var S=Object.defineProperty;var u=Object.getOwnPropertyDescriptor;var h=(p,d,e,n)=>{for(var i=n>1?void 0:n?u(d,e):d,t=p.length-1,r;t>=0;t--)(r=p[t])&&(i=(n?r(d,e,i):r(i))||i);return n&&i&&S(d,e,i),i},s=(p,d)=>(e,n)=>d(e,n,p);import{isNonEmptyArray as E}from"../../../../../vs/base/common/arrays.js";import{Promises as P}from"../../../../../vs/base/common/async.js";import{CancellationToken as m}from"../../../../../vs/base/common/cancellation.js";import{toErrorMessage as A}from"../../../../../vs/base/common/errorMessage.js";import"../../../../../vs/base/common/uri.js";import"../../../../../vs/base/parts/ipc/common/ipc.js";import{localize as g}from"../../../../../vs/nls.js";import{IConfigurationService as k}from"../../../../../vs/platform/configuration/common/configuration.js";import{EXTENSION_INSTALL_CLIENT_TARGET_PLATFORM_CONTEXT as D,ExtensionManagementError as x,ExtensionManagementErrorCode as c,IExtensionGalleryService as C,InstallOperation as y}from"../../../../../vs/platform/extensionManagement/common/extensionManagement.js";import{areSameExtensions as w}from"../../../../../vs/platform/extensionManagement/common/extensionManagementUtil.js";import{ExtensionType as M}from"../../../../../vs/platform/extensions/common/extensions.js";import{areApiProposalsCompatible as b}from"../../../../../vs/platform/extensions/common/extensionValidator.js";import{IFileService as G}from"../../../../../vs/platform/files/common/files.js";import{ILogService as L}from"../../../../../vs/platform/log/common/log.js";import{IProductService as U}from"../../../../../vs/platform/product/common/productService.js";import{IUriIdentityService as T}from"../../../../../vs/platform/uriIdentity/common/uriIdentity.js";import{IUserDataProfilesService as R}from"../../../../../vs/platform/userDataProfile/common/userDataProfile.js";import"../../../../../vs/workbench/services/extensionManagement/common/extensionManagement.js";import{RemoteExtensionManagementService as F}from"../../../../../vs/workbench/services/extensionManagement/common/remoteExtensionManagementService.js";import{IExtensionManifestPropertiesService as N}from"../../../../../vs/workbench/services/extensions/common/extensionManifestPropertiesService.js";import{IRemoteUserDataProfilesService as V}from"../../../../../vs/workbench/services/userDataProfile/common/remoteUserDataProfiles.js";import{IUserDataProfileService as _}from"../../../../../vs/workbench/services/userDataProfile/common/userDataProfile.js";let I=class extends F{constructor(e,n,i,t,r,a,v,o,l,f,$,W){super(e,i,t,r,a);this.localExtensionManagementServer=n;this.logService=v;this.galleryService=o;this.configurationService=l;this.productService=f;this.fileService=$;this.extensionManifestPropertiesService=W}async install(e,n){const i=await super.install(e,n);return await this.installUIDependenciesAndPackedExtensions(i),i}async installFromGallery(e,n){const i=await this.doInstallFromGallery(e,n);return await this.installUIDependenciesAndPackedExtensions(i),i}async doInstallFromGallery(e,n){if(this.configurationService.getValue("remote.downloadExtensionsLocally"))return this.downloadAndInstall(e,n||{});try{const i=await this.localExtensionManagementServer.extensionManagementService.getTargetPlatform();return await super.installFromGallery(e,{...n,context:{...n?.context,[D]:i}})}catch(i){switch(i.name){case c.Download:case c.DownloadSignature:case c.Gallery:case c.Internal:case c.Unknown:try{return this.logService.error(`Error while installing '${e.identifier.id}' extension in the remote server.`,A(i)),await this.downloadAndInstall(e,n||{})}catch(t){throw this.logService.error(t),t}default:throw this.logService.debug("Remote Install Error Name",i.name),i}}}async downloadAndInstall(e,n){this.logService.info(`Downloading the '${e.identifier.id}' extension locally and install`);const i=await this.checkAndGetCompatible(e,!!n.installPreReleaseVersion);n={...n,donotIncludePackAndDependencies:!0};const t=await this.getInstalled(M.User,void 0,n.productVersion),r=await this.getAllWorkspaceDependenciesAndPackedExtensions(i,m.None);if(r.length){this.logService.info(`Downloading the workspace dependencies and packed extensions of '${i.identifier.id}' locally and install`);for(const a of r)await this.downloadCompatibleAndInstall(a,t,n)}return await this.downloadCompatibleAndInstall(i,t,n)}async downloadCompatibleAndInstall(e,n,i){const t=await this.checkAndGetCompatible(e,!!i.installPreReleaseVersion);this.logService.trace("Downloading extension:",t.identifier.id);const r=await this.localExtensionManagementServer.extensionManagementService.download(t,n.filter(a=>w(a.identifier,t.identifier))[0]?y.Update:y.Install,!!i.donotVerifySignature);this.logService.info("Downloaded extension:",t.identifier.id,r.path);try{const a=await super.install(r,{...i,keepExisting:!0});return this.logService.info(`Successfully installed '${t.identifier.id}' extension`),a}finally{try{await this.fileService.del(r)}catch(a){this.logService.error(a)}}}async checkAndGetCompatible(e,n){const i=await this.getTargetPlatform();let t=null;if(e.hasPreReleaseVersion&&e.properties.isPreReleaseVersion!==n&&(t=(await this.galleryService.getExtensions([{...e.identifier,preRelease:n}],{targetPlatform:i,compatible:!0},m.None))[0]||null),!t&&await this.galleryService.isExtensionCompatible(e,n,i)&&(t=e),t||(t=await this.galleryService.getCompatibleExtension(e,n,i)),!t){const r=[];throw b(e.properties.enabledApiProposals??[],r)?!n&&e.properties.isPreReleaseVersion&&(await this.galleryService.getExtensions([e.identifier],m.None))[0]?new x(g("notFoundReleaseExtension","Can't install release version of '{0}' extension because it has no release version.",e.identifier.id),c.ReleaseVersionNotFound):new x(g("notFoundCompatibleDependency","Can't install '{0}' extension because it is not compatible with the current version of {1} (version {2}).",e.identifier.id,this.productService.nameLong,this.productService.version),c.Incompatible):new x(g("incompatibleAPI","Can't install '{0}' extension. {1}",e.displayName??e.identifier.id,r[0]),c.IncompatibleApi)}return t}async installUIDependenciesAndPackedExtensions(e){const n=await this.getAllUIDependenciesAndPackedExtensions(e.manifest,m.None),i=await this.localExtensionManagementServer.extensionManagementService.getInstalled(),t=n.filter(r=>i.every(a=>!w(a.identifier,r.identifier)));t.length&&(this.logService.info(`Installing UI dependencies and packed extensions of '${e.identifier.id}' locally`),await P.settled(t.map(r=>this.localExtensionManagementServer.extensionManagementService.installFromGallery(r))))}async getAllUIDependenciesAndPackedExtensions(e,n){const i=new Map,t=[...e.extensionPack||[],...e.extensionDependencies||[]];return await this.getDependenciesAndPackedExtensionsRecursively(t,i,!0,n),[...i.values()]}async getAllWorkspaceDependenciesAndPackedExtensions(e,n){const i=new Map;i.set(e.identifier.id.toLowerCase(),e);const t=await this.galleryService.getManifest(e,n);if(t){const r=[...t.extensionPack||[],...t.extensionDependencies||[]];await this.getDependenciesAndPackedExtensionsRecursively(r,i,!1,n)}return i.delete(e.identifier.id),[...i.values()]}async getDependenciesAndPackedExtensionsRecursively(e,n,i,t){if(e.length===0)return Promise.resolve();const r=await this.galleryService.getExtensions(e.map(o=>({id:o})),t),a=await Promise.all(r.map(o=>this.galleryService.getManifest(o,t))),v=[];for(let o=0;o<r.length;o++){const l=r[o],f=a[o];f&&this.extensionManifestPropertiesService.prefersExecuteOnUI(f)===i&&(n.set(l.identifier.id.toLowerCase(),l),v.push(f))}e=[];for(const o of v){if(E(o.extensionDependencies))for(const l of o.extensionDependencies)n.has(l.toLowerCase())||e.push(l);if(E(o.extensionPack))for(const l of o.extensionPack)n.has(l.toLowerCase())||e.push(l)}return this.getDependenciesAndPackedExtensionsRecursively(e,n,i,t)}};I=h([s(2,_),s(3,R),s(4,V),s(5,T),s(6,L),s(7,C),s(8,k),s(9,U),s(10,G),s(11,N)],I);export{I as NativeRemoteExtensionManagementService};
