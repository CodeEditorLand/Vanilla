{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/extensionManagement/browser/extensionBisect.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { localize, localize2 } from \"../../../../nls.js\";\nimport { Categories } from \"../../../../platform/action/common/actionCommonCategories.js\";\nimport {\n\tAction2,\n\tMenuId,\n\tregisterAction2,\n} from \"../../../../platform/actions/common/actions.js\";\nimport { ICommandService } from \"../../../../platform/commands/common/commands.js\";\nimport {\n\tContextKeyExpr,\n\tIContextKeyService,\n\tRawContextKey,\n} from \"../../../../platform/contextkey/common/contextkey.js\";\nimport { IDialogService } from \"../../../../platform/dialogs/common/dialogs.js\";\nimport {\n\tIExtensionManagementService,\n\tIGlobalExtensionEnablementService,\n\ttype ILocalExtension,\n} from \"../../../../platform/extensionManagement/common/extensionManagement.js\";\nimport { areSameExtensions } from \"../../../../platform/extensionManagement/common/extensionManagementUtil.js\";\nimport {\n\tExtensionType,\n\ttype IExtension,\n\tisResolverExtension,\n} from \"../../../../platform/extensions/common/extensions.js\";\nimport {\n\tInstantiationType,\n\tregisterSingleton,\n} from \"../../../../platform/instantiation/common/extensions.js\";\nimport {\n\ttype ServicesAccessor,\n\tcreateDecorator,\n} from \"../../../../platform/instantiation/common/instantiation.js\";\nimport { ILogService } from \"../../../../platform/log/common/log.js\";\nimport {\n\tINotificationService,\n\ttype IPromptChoice,\n\tNotificationPriority,\n\tSeverity,\n} from \"../../../../platform/notification/common/notification.js\";\nimport { IProductService } from \"../../../../platform/product/common/productService.js\";\nimport { Registry } from \"../../../../platform/registry/common/platform.js\";\nimport {\n\tIStorageService,\n\tStorageScope,\n\tStorageTarget,\n} from \"../../../../platform/storage/common/storage.js\";\nimport {\n\tExtensions,\n\ttype IWorkbenchContributionsRegistry,\n} from \"../../../common/contributions.js\";\nimport { IWorkbenchEnvironmentService } from \"../../environment/common/environmentService.js\";\nimport { IHostService } from \"../../host/browser/host.js\";\nimport { LifecyclePhase } from \"../../lifecycle/common/lifecycle.js\";\nimport { IWorkbenchExtensionEnablementService } from \"../common/extensionManagement.js\";\n\n// --- bisect service\n\nexport const IExtensionBisectService = createDecorator<IExtensionBisectService>(\n\t\"IExtensionBisectService\",\n);\n\nexport interface IExtensionBisectService {\n\treadonly _serviceBrand: undefined;\n\n\tisDisabledByBisect(extension: IExtension): boolean;\n\tisActive: boolean;\n\tdisabledCount: number;\n\tstart(extensions: ILocalExtension[]): Promise<void>;\n\tnext(seeingBad: boolean): Promise<{ id: string; bad: boolean } | undefined>;\n\treset(): Promise<void>;\n}\n\nclass BisectState {\n\tstatic fromJSON(raw: string | undefined): BisectState | undefined {\n\t\tif (!raw) {\n\t\t\treturn undefined;\n\t\t}\n\t\ttry {\n\t\t\tinterface Raw extends BisectState {}\n\t\t\tconst data: Raw = JSON.parse(raw);\n\t\t\treturn new BisectState(\n\t\t\t\tdata.extensions,\n\t\t\t\tdata.low,\n\t\t\t\tdata.high,\n\t\t\t\tdata.mid,\n\t\t\t);\n\t\t} catch {\n\t\t\treturn undefined;\n\t\t}\n\t}\n\n\tconstructor(\n\t\treadonly extensions: string[],\n\t\treadonly low: number,\n\t\treadonly high: number,\n\t\treadonly mid: number = ((low + high) / 2) | 0,\n\t) {}\n}\n\nclass ExtensionBisectService implements IExtensionBisectService {\n\tdeclare readonly _serviceBrand: undefined;\n\n\tprivate static readonly _storageKey = \"extensionBisectState\";\n\n\tprivate readonly _state: BisectState | undefined;\n\tprivate readonly _disabled = new Map<string, boolean>();\n\n\tconstructor(\n\t\t@ILogService logService: ILogService,\n\t\t@IStorageService private readonly _storageService: IStorageService,\n\t\t@IWorkbenchEnvironmentService\n\t\tprivate readonly _envService: IWorkbenchEnvironmentService,\n\t) {\n\t\tconst raw = _storageService.get(\n\t\t\tExtensionBisectService._storageKey,\n\t\t\tStorageScope.APPLICATION,\n\t\t);\n\t\tthis._state = BisectState.fromJSON(raw);\n\n\t\tif (this._state) {\n\t\t\tconst { mid, high } = this._state;\n\t\t\tfor (let i = 0; i < this._state.extensions.length; i++) {\n\t\t\t\tconst isDisabled = i >= mid && i < high;\n\t\t\t\tthis._disabled.set(this._state.extensions[i], isDisabled);\n\t\t\t}\n\t\t\tlogService.warn(\"extension BISECT active\", [...this._disabled]);\n\t\t}\n\t}\n\n\tget isActive() {\n\t\treturn !!this._state;\n\t}\n\n\tget disabledCount() {\n\t\treturn this._state ? this._state.high - this._state.mid : -1;\n\t}\n\n\tisDisabledByBisect(extension: IExtension): boolean {\n\t\tif (!this._state) {\n\t\t\t// bisect isn't active\n\t\t\treturn false;\n\t\t}\n\t\tif (\n\t\t\tisResolverExtension(\n\t\t\t\textension.manifest,\n\t\t\t\tthis._envService.remoteAuthority,\n\t\t\t)\n\t\t) {\n\t\t\t// the current remote resolver extension cannot be disabled\n\t\t\treturn false;\n\t\t}\n\t\tif (this._isEnabledInEnv(extension)) {\n\t\t\t// Extension enabled in env cannot be disabled\n\t\t\treturn false;\n\t\t}\n\t\tconst disabled = this._disabled.get(extension.identifier.id);\n\t\treturn disabled ?? false;\n\t}\n\n\tprivate _isEnabledInEnv(extension: IExtension): boolean {\n\t\treturn (\n\t\t\tArray.isArray(this._envService.enableExtensions) &&\n\t\t\tthis._envService.enableExtensions.some((id) =>\n\t\t\t\tareSameExtensions({ id }, extension.identifier),\n\t\t\t)\n\t\t);\n\t}\n\n\tasync start(extensions: ILocalExtension[]): Promise<void> {\n\t\tif (this._state) {\n\t\t\tthrow new Error(\"invalid state\");\n\t\t}\n\t\tconst extensionIds = extensions.map((ext) => ext.identifier.id);\n\t\tconst newState = new BisectState(\n\t\t\textensionIds,\n\t\t\t0,\n\t\t\textensionIds.length,\n\t\t\t0,\n\t\t);\n\t\tthis._storageService.store(\n\t\t\tExtensionBisectService._storageKey,\n\t\t\tJSON.stringify(newState),\n\t\t\tStorageScope.APPLICATION,\n\t\t\tStorageTarget.MACHINE,\n\t\t);\n\t\tawait this._storageService.flush();\n\t}\n\n\tasync next(\n\t\tseeingBad: boolean,\n\t): Promise<{ id: string; bad: boolean } | undefined> {\n\t\tif (!this._state) {\n\t\t\tthrow new Error(\"invalid state\");\n\t\t}\n\t\t// check if bad when all extensions are disabled\n\t\tif (\n\t\t\tseeingBad &&\n\t\t\tthis._state.mid === 0 &&\n\t\t\tthis._state.high === this._state.extensions.length\n\t\t) {\n\t\t\treturn { bad: true, id: \"\" };\n\t\t}\n\t\t// check if there is only one left\n\t\tif (this._state.low === this._state.high - 1) {\n\t\t\tawait this.reset();\n\t\t\treturn {\n\t\t\t\tid: this._state.extensions[this._state.low],\n\t\t\t\tbad: seeingBad,\n\t\t\t};\n\t\t}\n\t\t// the second half is disabled so if there is still bad it must be\n\t\t// in the first half\n\t\tconst nextState = new BisectState(\n\t\t\tthis._state.extensions,\n\t\t\tseeingBad ? this._state.low : this._state.mid,\n\t\t\tseeingBad ? this._state.mid : this._state.high,\n\t\t);\n\t\tthis._storageService.store(\n\t\t\tExtensionBisectService._storageKey,\n\t\t\tJSON.stringify(nextState),\n\t\t\tStorageScope.APPLICATION,\n\t\t\tStorageTarget.MACHINE,\n\t\t);\n\t\tawait this._storageService.flush();\n\t\treturn undefined;\n\t}\n\n\tasync reset(): Promise<void> {\n\t\tthis._storageService.remove(\n\t\t\tExtensionBisectService._storageKey,\n\t\t\tStorageScope.APPLICATION,\n\t\t);\n\t\tawait this._storageService.flush();\n\t}\n}\n\nregisterSingleton(\n\tIExtensionBisectService,\n\tExtensionBisectService,\n\tInstantiationType.Delayed,\n);\n\n// --- bisect UI\n\nclass ExtensionBisectUi {\n\tstatic ctxIsBisectActive = new RawContextKey<boolean>(\n\t\t\"isExtensionBisectActive\",\n\t\tfalse,\n\t);\n\n\tconstructor(\n\t\t@IContextKeyService contextKeyService: IContextKeyService,\n\t\t@IExtensionBisectService\n\t\tprivate readonly _extensionBisectService: IExtensionBisectService,\n\t\t@INotificationService\n\t\tprivate readonly _notificationService: INotificationService,\n\t\t@ICommandService private readonly _commandService: ICommandService,\n\t) {\n\t\tif (_extensionBisectService.isActive) {\n\t\t\tExtensionBisectUi.ctxIsBisectActive\n\t\t\t\t.bindTo(contextKeyService)\n\t\t\t\t.set(true);\n\t\t\tthis._showBisectPrompt();\n\t\t}\n\t}\n\n\tprivate _showBisectPrompt(): void {\n\t\tconst goodPrompt: IPromptChoice = {\n\t\t\tlabel: localize(\"I cannot reproduce\", \"I can't reproduce\"),\n\t\t\trun: () =>\n\t\t\t\tthis._commandService.executeCommand(\n\t\t\t\t\t\"extension.bisect.next\",\n\t\t\t\t\tfalse,\n\t\t\t\t),\n\t\t};\n\t\tconst badPrompt: IPromptChoice = {\n\t\t\tlabel: localize(\"This is Bad\", \"I can reproduce\"),\n\t\t\trun: () =>\n\t\t\t\tthis._commandService.executeCommand(\n\t\t\t\t\t\"extension.bisect.next\",\n\t\t\t\t\ttrue,\n\t\t\t\t),\n\t\t};\n\t\tconst stop: IPromptChoice = {\n\t\t\tlabel: \"Stop Bisect\",\n\t\t\trun: () =>\n\t\t\t\tthis._commandService.executeCommand(\"extension.bisect.stop\"),\n\t\t};\n\n\t\tconst message =\n\t\t\tthis._extensionBisectService.disabledCount === 1\n\t\t\t\t? localize(\n\t\t\t\t\t\t\"bisect.singular\",\n\t\t\t\t\t\t\"Extension Bisect is active and has disabled 1 extension. Check if you can still reproduce the problem and proceed by selecting from these options.\",\n\t\t\t\t\t)\n\t\t\t\t: localize(\n\t\t\t\t\t\t\"bisect.plural\",\n\t\t\t\t\t\t\"Extension Bisect is active and has disabled {0} extensions. Check if you can still reproduce the problem and proceed by selecting from these options.\",\n\t\t\t\t\t\tthis._extensionBisectService.disabledCount,\n\t\t\t\t\t);\n\n\t\tthis._notificationService.prompt(\n\t\t\tSeverity.Info,\n\t\t\tmessage,\n\t\t\t[goodPrompt, badPrompt, stop],\n\t\t\t{ sticky: true, priority: NotificationPriority.URGENT },\n\t\t);\n\t}\n}\n\nRegistry.as<IWorkbenchContributionsRegistry>(\n\tExtensions.Workbench,\n).registerWorkbenchContribution(ExtensionBisectUi, LifecyclePhase.Restored);\n\nregisterAction2(\n\tclass extends Action2 {\n\t\tconstructor() {\n\t\t\tsuper({\n\t\t\t\tid: \"extension.bisect.start\",\n\t\t\t\ttitle: localize2(\"title.start\", \"Start Extension Bisect\"),\n\t\t\t\tcategory: Categories.Help,\n\t\t\t\tf1: true,\n\t\t\t\tprecondition: ExtensionBisectUi.ctxIsBisectActive.negate(),\n\t\t\t\tmenu: {\n\t\t\t\t\tid: MenuId.ViewContainerTitle,\n\t\t\t\t\twhen: ContextKeyExpr.equals(\n\t\t\t\t\t\t\"viewContainer\",\n\t\t\t\t\t\t\"workbench.view.extensions\",\n\t\t\t\t\t),\n\t\t\t\t\tgroup: \"2_enablement\",\n\t\t\t\t\torder: 4,\n\t\t\t\t},\n\t\t\t});\n\t\t}\n\n\t\tasync run(accessor: ServicesAccessor): Promise<void> {\n\t\t\tconst dialogService = accessor.get(IDialogService);\n\t\t\tconst hostService = accessor.get(IHostService);\n\t\t\tconst extensionManagement = accessor.get(\n\t\t\t\tIExtensionManagementService,\n\t\t\t);\n\t\t\tconst extensionEnablementService = accessor.get(\n\t\t\t\tIWorkbenchExtensionEnablementService,\n\t\t\t);\n\t\t\tconst extensionsBisect = accessor.get(IExtensionBisectService);\n\n\t\t\tconst extensions = (\n\t\t\t\tawait extensionManagement.getInstalled(ExtensionType.User)\n\t\t\t).filter((ext) => extensionEnablementService.isEnabled(ext));\n\n\t\t\tconst res = await dialogService.confirm({\n\t\t\t\tmessage: localize(\"msg.start\", \"Extension Bisect\"),\n\t\t\t\tdetail: localize(\n\t\t\t\t\t\"detail.start\",\n\t\t\t\t\t\"Extension Bisect will use binary search to find an extension that causes a problem. During the process the window reloads repeatedly (~{0} times). Each time you must confirm if you are still seeing problems.\",\n\t\t\t\t\t(2 + Math.log2(extensions.length)) | 0,\n\t\t\t\t),\n\t\t\t\tprimaryButton: localize(\n\t\t\t\t\t{ key: \"msg2\", comment: [\"&& denotes a mnemonic\"] },\n\t\t\t\t\t\"&&Start Extension Bisect\",\n\t\t\t\t),\n\t\t\t});\n\n\t\t\tif (res.confirmed) {\n\t\t\t\tawait extensionsBisect.start(extensions);\n\t\t\t\thostService.reload();\n\t\t\t}\n\t\t}\n\t},\n);\n\nregisterAction2(\n\tclass extends Action2 {\n\t\tconstructor() {\n\t\t\tsuper({\n\t\t\t\tid: \"extension.bisect.next\",\n\t\t\t\ttitle: localize2(\"title.isBad\", \"Continue Extension Bisect\"),\n\t\t\t\tcategory: Categories.Help,\n\t\t\t\tf1: true,\n\t\t\t\tprecondition: ExtensionBisectUi.ctxIsBisectActive,\n\t\t\t});\n\t\t}\n\n\t\tasync run(\n\t\t\taccessor: ServicesAccessor,\n\t\t\tseeingBad: boolean | undefined,\n\t\t): Promise<void> {\n\t\t\tconst dialogService = accessor.get(IDialogService);\n\t\t\tconst hostService = accessor.get(IHostService);\n\t\t\tconst bisectService = accessor.get(IExtensionBisectService);\n\t\t\tconst productService = accessor.get(IProductService);\n\t\t\tconst extensionEnablementService = accessor.get(\n\t\t\t\tIGlobalExtensionEnablementService,\n\t\t\t);\n\t\t\tconst commandService = accessor.get(ICommandService);\n\n\t\t\tif (!bisectService.isActive) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (seeingBad === undefined) {\n\t\t\t\tconst goodBadStopCancel = await this._checkForBad(\n\t\t\t\t\tdialogService,\n\t\t\t\t\tbisectService,\n\t\t\t\t);\n\t\t\t\tif (goodBadStopCancel === null) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tseeingBad = goodBadStopCancel;\n\t\t\t}\n\t\t\tif (seeingBad === undefined) {\n\t\t\t\tawait bisectService.reset();\n\t\t\t\thostService.reload();\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst done = await bisectService.next(seeingBad);\n\t\t\tif (!done) {\n\t\t\t\thostService.reload();\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (done.bad) {\n\t\t\t\t// DONE but nothing found\n\t\t\t\tawait dialogService.info(\n\t\t\t\t\tlocalize(\"done.msg\", \"Extension Bisect\"),\n\t\t\t\t\tlocalize(\n\t\t\t\t\t\t\"done.detail2\",\n\t\t\t\t\t\t\"Extension Bisect is done but no extension has been identified. This might be a problem with {0}.\",\n\t\t\t\t\t\tproductService.nameShort,\n\t\t\t\t\t),\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\t// DONE and identified extension\n\t\t\t\tconst res = await dialogService.confirm({\n\t\t\t\t\ttype: Severity.Info,\n\t\t\t\t\tmessage: localize(\"done.msg\", \"Extension Bisect\"),\n\t\t\t\t\tprimaryButton: localize(\n\t\t\t\t\t\t{ key: \"report\", comment: [\"&& denotes a mnemonic\"] },\n\t\t\t\t\t\t\"&&Report Issue & Continue\",\n\t\t\t\t\t),\n\t\t\t\t\tcancelButton: localize(\"continue\", \"Continue\"),\n\t\t\t\t\tdetail: localize(\n\t\t\t\t\t\t\"done.detail\",\n\t\t\t\t\t\t\"Extension Bisect is done and has identified {0} as the extension causing the problem.\",\n\t\t\t\t\t\tdone.id,\n\t\t\t\t\t),\n\t\t\t\t\tcheckbox: {\n\t\t\t\t\t\tlabel: localize(\n\t\t\t\t\t\t\t\"done.disbale\",\n\t\t\t\t\t\t\t\"Keep this extension disabled\",\n\t\t\t\t\t\t),\n\t\t\t\t\t\tchecked: true,\n\t\t\t\t\t},\n\t\t\t\t});\n\t\t\t\tif (res.checkboxChecked) {\n\t\t\t\t\tawait extensionEnablementService.disableExtension(\n\t\t\t\t\t\t{ id: done.id },\n\t\t\t\t\t\tundefined,\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t\tif (res.confirmed) {\n\t\t\t\t\tawait commandService.executeCommand(\n\t\t\t\t\t\t\"workbench.action.openIssueReporter\",\n\t\t\t\t\t\tdone.id,\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t\tawait bisectService.reset();\n\t\t\thostService.reload();\n\t\t}\n\n\t\tprivate async _checkForBad(\n\t\t\tdialogService: IDialogService,\n\t\t\tbisectService: IExtensionBisectService,\n\t\t): Promise<boolean | undefined | null> {\n\t\t\tconst { result } = await dialogService.prompt<\n\t\t\t\tboolean | undefined | null\n\t\t\t>({\n\t\t\t\ttype: Severity.Info,\n\t\t\t\tmessage: localize(\"msg.next\", \"Extension Bisect\"),\n\t\t\t\tdetail: localize(\n\t\t\t\t\t\"bisect\",\n\t\t\t\t\t\"Extension Bisect is active and has disabled {0} extensions. Check if you can still reproduce the problem and proceed by selecting from these options.\",\n\t\t\t\t\tbisectService.disabledCount,\n\t\t\t\t),\n\t\t\t\tbuttons: [\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: localize(\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tkey: \"next.good\",\n\t\t\t\t\t\t\t\tcomment: [\"&& denotes a mnemonic\"],\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\"I ca&&n't reproduce\",\n\t\t\t\t\t\t),\n\t\t\t\t\t\trun: () => false, // good now\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: localize(\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tkey: \"next.bad\",\n\t\t\t\t\t\t\t\tcomment: [\"&& denotes a mnemonic\"],\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\"I can &&reproduce\",\n\t\t\t\t\t\t),\n\t\t\t\t\t\trun: () => true, // bad\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: localize(\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tkey: \"next.stop\",\n\t\t\t\t\t\t\t\tcomment: [\"&& denotes a mnemonic\"],\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\"&&Stop Bisect\",\n\t\t\t\t\t\t),\n\t\t\t\t\t\trun: () => undefined, // stop\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\tcancelButton: {\n\t\t\t\t\tlabel: localize(\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tkey: \"next.cancel\",\n\t\t\t\t\t\t\tcomment: [\"&& denotes a mnemonic\"],\n\t\t\t\t\t\t},\n\t\t\t\t\t\t\"&&Cancel Bisect\",\n\t\t\t\t\t),\n\t\t\t\t\trun: () => null, // cancel\n\t\t\t\t},\n\t\t\t});\n\t\t\treturn result;\n\t\t}\n\t},\n);\n\nregisterAction2(\n\tclass extends Action2 {\n\t\tconstructor() {\n\t\t\tsuper({\n\t\t\t\tid: \"extension.bisect.stop\",\n\t\t\t\ttitle: localize2(\"title.stop\", \"Stop Extension Bisect\"),\n\t\t\t\tcategory: Categories.Help,\n\t\t\t\tf1: true,\n\t\t\t\tprecondition: ExtensionBisectUi.ctxIsBisectActive,\n\t\t\t});\n\t\t}\n\n\t\tasync run(accessor: ServicesAccessor): Promise<void> {\n\t\t\tconst extensionsBisect = accessor.get(IExtensionBisectService);\n\t\t\tconst hostService = accessor.get(IHostService);\n\t\t\tawait extensionsBisect.reset();\n\t\t\thostService.reload();\n\t\t}\n\t},\n);\n"],
  "mappings": "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",
  "names": []
}
