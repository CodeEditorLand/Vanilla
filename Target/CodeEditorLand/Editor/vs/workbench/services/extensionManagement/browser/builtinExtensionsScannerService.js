var x=Object.defineProperty;var E=Object.getOwnPropertyDescriptor;var p=(l,r,t,n)=>{for(var e=n>1?void 0:n?E(r,t):r,o=l.length-1,s;o>=0;o--)(s=l[o])&&(e=(n?s(r,t,e):s(e))||e);return n&&e&&x(r,t,e),e},a=(l,r)=>(t,n)=>r(t,n,l);import{mainWindow as I}from"../../../../base/browser/window.js";import{builtinExtensionsPath as P,FileAccess as v}from"../../../../base/common/network.js";import{isWeb as S,Language as f}from"../../../../base/common/platform.js";import{URI as u}from"../../../../base/common/uri.js";import{getGalleryExtensionId as y}from"../../../../platform/extensionManagement/common/extensionManagementUtil.js";import{localizeManifest as h}from"../../../../platform/extensionManagement/common/extensionNls.js";import{IExtensionResourceLoaderService as U}from"../../../../platform/extensionResourceLoader/common/extensionResourceLoader.js";import{ExtensionType as b,IBuiltinExtensionsScannerService as k,TargetPlatform as B}from"../../../../platform/extensions/common/extensions.js";import{InstantiationType as L,registerSingleton as N}from"../../../../platform/instantiation/common/extensions.js";import{ILogService as J}from"../../../../platform/log/common/log.js";import{IProductService as M}from"../../../../platform/product/common/productService.js";import{IUriIdentityService as O}from"../../../../platform/uriIdentity/common/uriIdentity.js";import{IWorkbenchEnvironmentService as R}from"../../environment/common/environmentService.js";let m=class{constructor(r,t,n,e,o){this.extensionResourceLoaderService=n;this.logService=o;if(S){const s=e.extensionsGallery?.nlsBaseUrl;s&&e.commit&&!f.isDefaultVariant()&&(this.nlsUrl=u.joinPath(u.parse(s),e.commit,e.version,f.value()));const d=v.asBrowserUri(P);if(d){let g=[];if(r.isBuilt)g=[];else{const i=I.document.getElementById("vscode-workbench-builtin-extensions"),c=i?i.getAttribute("data-settings"):void 0;if(c)try{g=JSON.parse(c)}catch{}}this.builtinExtensionsPromises=g.map(async i=>{const c=y(i.packageJSON.publisher,i.packageJSON.name);return{identifier:{id:c},location:t.extUri.joinPath(d,i.extensionPath),type:b.System,isBuiltin:!0,manifest:i.packageNLS?await this.localizeManifest(c,i.packageJSON,i.packageNLS):i.packageJSON,readmeUrl:i.readmePath?t.extUri.joinPath(d,i.readmePath):void 0,changelogUrl:i.changelogPath?t.extUri.joinPath(d,i.changelogPath):void 0,targetPlatform:B.WEB,validations:[],isValid:!0}})}}}builtinExtensionsPromises=[];nlsUrl;async scanBuiltinExtensions(){return[...await Promise.all(this.builtinExtensionsPromises)]}async localizeManifest(r,t,n){if(!this.nlsUrl)return h(this.logService,t,n);const e=u.joinPath(this.nlsUrl,r,"package");try{const o=await this.extensionResourceLoaderService.readExtensionResource(e),s=JSON.parse(o.toString());return h(this.logService,t,s,n)}catch(o){return this.logService.error(o),h(this.logService,t,n)}}};m=p([a(0,R),a(1,O),a(2,U),a(3,M),a(4,J)],m),N(k,m,L.Delayed);export{m as BuiltinExtensionsScannerService};
