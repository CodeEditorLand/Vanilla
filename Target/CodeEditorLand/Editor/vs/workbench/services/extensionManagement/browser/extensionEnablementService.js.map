{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/extensionManagement/browser/extensionEnablementService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { localize } from '../../../../nls.js';\nimport { Event, Emitter } from '../../../../base/common/event.js';\nimport { Disposable, toDisposable } from '../../../../base/common/lifecycle.js';\nimport { IExtensionManagementService, IExtensionIdentifier, IGlobalExtensionEnablementService, ENABLED_EXTENSIONS_STORAGE_PATH, DISABLED_EXTENSIONS_STORAGE_PATH, InstallOperation } from '../../../../platform/extensionManagement/common/extensionManagement.js';\nimport { IWorkbenchExtensionEnablementService, EnablementState, IExtensionManagementServerService, IWorkbenchExtensionManagementService, IExtensionManagementServer, ExtensionInstallLocation } from '../common/extensionManagement.js';\nimport { areSameExtensions, BetterMergeId, getExtensionDependencies } from '../../../../platform/extensionManagement/common/extensionManagementUtil.js';\nimport { IWorkspaceContextService, WorkbenchState } from '../../../../platform/workspace/common/workspace.js';\nimport { IStorageService, StorageScope } from '../../../../platform/storage/common/storage.js';\nimport { IWorkbenchEnvironmentService } from '../../environment/common/environmentService.js';\nimport { IExtension, isAuthenticationProviderExtension, isLanguagePackExtension, isResolverExtension } from '../../../../platform/extensions/common/extensions.js';\nimport { IConfigurationService } from '../../../../platform/configuration/common/configuration.js';\nimport { InstantiationType, registerSingleton } from '../../../../platform/instantiation/common/extensions.js';\nimport { StorageManager } from '../../../../platform/extensionManagement/common/extensionEnablementService.js';\nimport { webWorkerExtHostConfig, WebWorkerExtHostConfigValue } from '../../extensions/common/extensions.js';\nimport { IUserDataSyncAccountService } from '../../../../platform/userDataSync/common/userDataSyncAccount.js';\nimport { IUserDataSyncEnablementService } from '../../../../platform/userDataSync/common/userDataSync.js';\nimport { ILifecycleService, LifecyclePhase } from '../../lifecycle/common/lifecycle.js';\nimport { INotificationService, NotificationPriority, Severity } from '../../../../platform/notification/common/notification.js';\nimport { IHostService } from '../../host/browser/host.js';\nimport { IExtensionBisectService } from './extensionBisect.js';\nimport { IWorkspaceTrustManagementService, IWorkspaceTrustRequestService } from '../../../../platform/workspace/common/workspaceTrust.js';\nimport { IExtensionManifestPropertiesService } from '../../extensions/common/extensionManifestPropertiesService.js';\nimport { isVirtualWorkspace } from '../../../../platform/workspace/common/virtualWorkspace.js';\nimport { ILogService } from '../../../../platform/log/common/log.js';\nimport { IInstantiationService } from '../../../../platform/instantiation/common/instantiation.js';\n\nconst SOURCE = 'IWorkbenchExtensionEnablementService';\n\ntype WorkspaceType = { readonly virtual: boolean; readonly trusted: boolean };\n\nexport class ExtensionEnablementService extends Disposable implements IWorkbenchExtensionEnablementService {\n\n\tdeclare readonly _serviceBrand: undefined;\n\n\tprivate readonly _onEnablementChanged = new Emitter<readonly IExtension[]>();\n\tpublic readonly onEnablementChanged: Event<readonly IExtension[]> = this._onEnablementChanged.event;\n\n\tprotected readonly extensionsManager: ExtensionsManager;\n\tprivate readonly storageManager: StorageManager;\n\tprivate extensionsDisabledByExtensionDependency: IExtension[] = [];\n\n\tconstructor(\n\t\t@IStorageService storageService: IStorageService,\n\t\t@IGlobalExtensionEnablementService protected readonly globalExtensionEnablementService: IGlobalExtensionEnablementService,\n\t\t@IWorkspaceContextService private readonly contextService: IWorkspaceContextService,\n\t\t@IWorkbenchEnvironmentService private readonly environmentService: IWorkbenchEnvironmentService,\n\t\t@IExtensionManagementService extensionManagementService: IExtensionManagementService,\n\t\t@IConfigurationService private readonly configurationService: IConfigurationService,\n\t\t@IExtensionManagementServerService private readonly extensionManagementServerService: IExtensionManagementServerService,\n\t\t@IUserDataSyncEnablementService private readonly userDataSyncEnablementService: IUserDataSyncEnablementService,\n\t\t@IUserDataSyncAccountService private readonly userDataSyncAccountService: IUserDataSyncAccountService,\n\t\t@ILifecycleService private readonly lifecycleService: ILifecycleService,\n\t\t@INotificationService private readonly notificationService: INotificationService,\n\t\t@IHostService hostService: IHostService,\n\t\t@IExtensionBisectService private readonly extensionBisectService: IExtensionBisectService,\n\t\t@IWorkspaceTrustManagementService private readonly workspaceTrustManagementService: IWorkspaceTrustManagementService,\n\t\t@IWorkspaceTrustRequestService private readonly workspaceTrustRequestService: IWorkspaceTrustRequestService,\n\t\t@IExtensionManifestPropertiesService private readonly extensionManifestPropertiesService: IExtensionManifestPropertiesService,\n\t\t@IInstantiationService instantiationService: IInstantiationService,\n\t) {\n\t\tsuper();\n\t\tthis.storageManager = this._register(new StorageManager(storageService));\n\n\t\tconst uninstallDisposable = this._register(Event.filter(extensionManagementService.onDidUninstallExtension, e => !e.error)(({ identifier }) => this._reset(identifier)));\n\t\tlet isDisposed = false;\n\t\tthis._register(toDisposable(() => isDisposed = true));\n\t\tthis.extensionsManager = this._register(instantiationService.createInstance(ExtensionsManager));\n\t\tthis.extensionsManager.whenInitialized().then(() => {\n\t\t\tif (!isDisposed) {\n\t\t\t\tthis._onDidChangeExtensions([], [], false);\n\t\t\t\tthis._register(this.extensionsManager.onDidChangeExtensions(({ added, removed, isProfileSwitch }) => this._onDidChangeExtensions(added, removed, isProfileSwitch)));\n\t\t\t\tuninstallDisposable.dispose();\n\t\t\t}\n\t\t});\n\n\t\tthis._register(this.globalExtensionEnablementService.onDidChangeEnablement(({ extensions, source }) => this._onDidChangeGloballyDisabledExtensions(extensions, source)));\n\n\t\t// delay notification for extensions disabled until workbench restored\n\t\tif (this.allUserExtensionsDisabled) {\n\t\t\tthis.lifecycleService.when(LifecyclePhase.Eventually).then(() => {\n\t\t\t\tthis.notificationService.prompt(Severity.Info, localize('extensionsDisabled', \"All installed extensions are temporarily disabled.\"), [{\n\t\t\t\t\tlabel: localize('Reload', \"Reload and Enable Extensions\"),\n\t\t\t\t\trun: () => hostService.reload({ disableExtensions: false })\n\t\t\t\t}], {\n\t\t\t\t\tsticky: true,\n\t\t\t\t\tpriority: NotificationPriority.URGENT\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\t}\n\n\tprivate get hasWorkspace(): boolean {\n\t\treturn this.contextService.getWorkbenchState() !== WorkbenchState.EMPTY;\n\t}\n\n\tprivate get allUserExtensionsDisabled(): boolean {\n\t\treturn this.environmentService.disableExtensions === true;\n\t}\n\n\tgetEnablementState(extension: IExtension): EnablementState {\n\t\treturn this._computeEnablementState(extension, this.extensionsManager.extensions, this.getWorkspaceType());\n\t}\n\n\tgetEnablementStates(extensions: IExtension[], workspaceTypeOverrides: Partial<WorkspaceType> = {}): EnablementState[] {\n\t\tconst extensionsEnablements = new Map<IExtension, EnablementState>();\n\t\tconst workspaceType = { ...this.getWorkspaceType(), ...workspaceTypeOverrides };\n\t\treturn extensions.map(extension => this._computeEnablementState(extension, extensions, workspaceType, extensionsEnablements));\n\t}\n\n\tgetDependenciesEnablementStates(extension: IExtension): [IExtension, EnablementState][] {\n\t\treturn getExtensionDependencies(this.extensionsManager.extensions, extension).map(e => [e, this.getEnablementState(e)]);\n\t}\n\n\tcanChangeEnablement(extension: IExtension): boolean {\n\t\ttry {\n\t\t\tthis.throwErrorIfCannotChangeEnablement(extension);\n\t\t\treturn true;\n\t\t} catch (error) {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\tcanChangeWorkspaceEnablement(extension: IExtension): boolean {\n\t\tif (!this.canChangeEnablement(extension)) {\n\t\t\treturn false;\n\t\t}\n\n\t\ttry {\n\t\t\tthis.throwErrorIfCannotChangeWorkspaceEnablement(extension);\n\t\t\treturn true;\n\t\t} catch (error) {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\tprivate throwErrorIfCannotChangeEnablement(extension: IExtension, donotCheckDependencies?: boolean): void {\n\t\tif (isLanguagePackExtension(extension.manifest)) {\n\t\t\tthrow new Error(localize('cannot disable language pack extension', \"Cannot change enablement of {0} extension because it contributes language packs.\", extension.manifest.displayName || extension.identifier.id));\n\t\t}\n\n\t\tif (this.userDataSyncEnablementService.isEnabled() && this.userDataSyncAccountService.account &&\n\t\t\tisAuthenticationProviderExtension(extension.manifest) && extension.manifest.contributes!.authentication!.some(a => a.id === this.userDataSyncAccountService.account!.authenticationProviderId)) {\n\t\t\tthrow new Error(localize('cannot disable auth extension', \"Cannot change enablement {0} extension because Settings Sync depends on it.\", extension.manifest.displayName || extension.identifier.id));\n\t\t}\n\n\t\tif (this._isEnabledInEnv(extension)) {\n\t\t\tthrow new Error(localize('cannot change enablement environment', \"Cannot change enablement of {0} extension because it is enabled in environment\", extension.manifest.displayName || extension.identifier.id));\n\t\t}\n\n\t\tthis.throwErrorIfEnablementStateCannotBeChanged(extension, this.getEnablementState(extension), donotCheckDependencies);\n\t}\n\n\tprivate throwErrorIfEnablementStateCannotBeChanged(extension: IExtension, enablementStateOfExtension: EnablementState, donotCheckDependencies?: boolean): void {\n\t\tswitch (enablementStateOfExtension) {\n\t\t\tcase EnablementState.DisabledByEnvironment:\n\t\t\t\tthrow new Error(localize('cannot change disablement environment', \"Cannot change enablement of {0} extension because it is disabled in environment\", extension.manifest.displayName || extension.identifier.id));\n\t\t\tcase EnablementState.DisabledByVirtualWorkspace:\n\t\t\t\tthrow new Error(localize('cannot change enablement virtual workspace', \"Cannot change enablement of {0} extension because it does not support virtual workspaces\", extension.manifest.displayName || extension.identifier.id));\n\t\t\tcase EnablementState.DisabledByExtensionKind:\n\t\t\t\tthrow new Error(localize('cannot change enablement extension kind', \"Cannot change enablement of {0} extension because of its extension kind\", extension.manifest.displayName || extension.identifier.id));\n\t\t\tcase EnablementState.DisabledByInvalidExtension:\n\t\t\t\tthrow new Error(localize('cannot change invalid extension enablement', \"Cannot change enablement of {0} extension because of it is invalid\", extension.manifest.displayName || extension.identifier.id));\n\t\t\tcase EnablementState.DisabledByExtensionDependency:\n\t\t\t\tif (donotCheckDependencies) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\t// Can be changed only when all its dependencies enablements can be changed\n\t\t\t\tfor (const dependency of getExtensionDependencies(this.extensionsManager.extensions, extension)) {\n\t\t\t\t\tif (this.isEnabled(dependency)) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\ttry {\n\t\t\t\t\t\tthis.throwErrorIfCannotChangeEnablement(dependency, true);\n\t\t\t\t\t} catch (error) {\n\t\t\t\t\t\tthrow new Error(localize('cannot change enablement dependency', \"Cannot enable '{0}' extension because it depends on '{1}' extension that cannot be enabled\", extension.manifest.displayName || extension.identifier.id, dependency.manifest.displayName || dependency.identifier.id));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t}\n\t}\n\n\tprivate throwErrorIfCannotChangeWorkspaceEnablement(extension: IExtension): void {\n\t\tif (!this.hasWorkspace) {\n\t\t\tthrow new Error(localize('noWorkspace', \"No workspace.\"));\n\t\t}\n\t\tif (isAuthenticationProviderExtension(extension.manifest)) {\n\t\t\tthrow new Error(localize('cannot disable auth extension in workspace', \"Cannot change enablement of {0} extension in workspace because it contributes authentication providers\", extension.manifest.displayName || extension.identifier.id));\n\t\t}\n\t}\n\n\tasync setEnablement(extensions: IExtension[], newState: EnablementState): Promise<boolean[]> {\n\t\tawait this.extensionsManager.whenInitialized();\n\n\t\tif (newState === EnablementState.EnabledGlobally || newState === EnablementState.EnabledWorkspace) {\n\t\t\textensions.push(...this.getExtensionsToEnableRecursively(extensions, this.extensionsManager.extensions, newState, { dependencies: true, pack: true }));\n\t\t}\n\n\t\tconst workspace = newState === EnablementState.DisabledWorkspace || newState === EnablementState.EnabledWorkspace;\n\t\tfor (const extension of extensions) {\n\t\t\tif (workspace) {\n\t\t\t\tthis.throwErrorIfCannotChangeWorkspaceEnablement(extension);\n\t\t\t} else {\n\t\t\t\tthis.throwErrorIfCannotChangeEnablement(extension);\n\t\t\t}\n\t\t}\n\n\t\tconst result: boolean[] = [];\n\t\tfor (const extension of extensions) {\n\t\t\tconst enablementState = this.getEnablementState(extension);\n\t\t\tif (enablementState === EnablementState.DisabledByTrustRequirement\n\t\t\t\t/* All its disabled dependencies are disabled by Trust Requirement */\n\t\t\t\t|| (enablementState === EnablementState.DisabledByExtensionDependency && this.getDependenciesEnablementStates(extension).every(([, e]) => this.isEnabledEnablementState(e) || e === EnablementState.DisabledByTrustRequirement))\n\t\t\t) {\n\t\t\t\tconst trustState = await this.workspaceTrustRequestService.requestWorkspaceTrust();\n\t\t\t\tresult.push(trustState ?? false);\n\t\t\t} else {\n\t\t\t\tresult.push(await this._setUserEnablementState(extension, newState));\n\t\t\t}\n\t\t}\n\n\t\tconst changedExtensions = extensions.filter((e, index) => result[index]);\n\t\tif (changedExtensions.length) {\n\t\t\tthis._onEnablementChanged.fire(changedExtensions);\n\t\t}\n\t\treturn result;\n\t}\n\n\tprivate getExtensionsToEnableRecursively(extensions: IExtension[], allExtensions: ReadonlyArray<IExtension>, enablementState: EnablementState, options: { dependencies: boolean; pack: boolean }, checked: IExtension[] = []): IExtension[] {\n\t\tif (!options.dependencies && !options.pack) {\n\t\t\treturn [];\n\t\t}\n\n\t\tconst toCheck = extensions.filter(e => checked.indexOf(e) === -1);\n\t\tif (!toCheck.length) {\n\t\t\treturn [];\n\t\t}\n\n\t\tfor (const extension of toCheck) {\n\t\t\tchecked.push(extension);\n\t\t}\n\n\t\tconst extensionsToEnable: IExtension[] = [];\n\t\tfor (const extension of allExtensions) {\n\t\t\t// Extension is already checked\n\t\t\tif (checked.some(e => areSameExtensions(e.identifier, extension.identifier))) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tconst enablementStateOfExtension = this.getEnablementState(extension);\n\t\t\t// Extension is enabled\n\t\t\tif (this.isEnabledEnablementState(enablementStateOfExtension)) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// Skip if dependency extension is disabled by extension kind\n\t\t\tif (enablementStateOfExtension === EnablementState.DisabledByExtensionKind) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// Check if the extension is a dependency or in extension pack\n\t\t\tif (extensions.some(e =>\n\t\t\t\t(options.dependencies && e.manifest.extensionDependencies?.some(id => areSameExtensions({ id }, extension.identifier)))\n\t\t\t\t|| (options.pack && e.manifest.extensionPack?.some(id => areSameExtensions({ id }, extension.identifier))))) {\n\n\t\t\t\tconst index = extensionsToEnable.findIndex(e => areSameExtensions(e.identifier, extension.identifier));\n\n\t\t\t\t// Extension is not added to the disablement list so add it\n\t\t\t\tif (index === -1) {\n\t\t\t\t\textensionsToEnable.push(extension);\n\t\t\t\t}\n\n\t\t\t\t// Extension is there already in the disablement list.\n\t\t\t\telse {\n\t\t\t\t\ttry {\n\t\t\t\t\t\t// Replace only if the enablement state can be changed\n\t\t\t\t\t\tthis.throwErrorIfEnablementStateCannotBeChanged(extension, enablementStateOfExtension, true);\n\t\t\t\t\t\textensionsToEnable.splice(index, 1, extension);\n\t\t\t\t\t} catch (error) { /*Do not add*/ }\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (extensionsToEnable.length) {\n\t\t\textensionsToEnable.push(...this.getExtensionsToEnableRecursively(extensionsToEnable, allExtensions, enablementState, options, checked));\n\t\t}\n\n\t\treturn extensionsToEnable;\n\t}\n\n\tprivate _setUserEnablementState(extension: IExtension, newState: EnablementState): Promise<boolean> {\n\n\t\tconst currentState = this._getUserEnablementState(extension.identifier);\n\n\t\tif (currentState === newState) {\n\t\t\treturn Promise.resolve(false);\n\t\t}\n\n\t\tswitch (newState) {\n\t\t\tcase EnablementState.EnabledGlobally:\n\t\t\t\tthis._enableExtension(extension.identifier);\n\t\t\t\tbreak;\n\t\t\tcase EnablementState.DisabledGlobally:\n\t\t\t\tthis._disableExtension(extension.identifier);\n\t\t\t\tbreak;\n\t\t\tcase EnablementState.EnabledWorkspace:\n\t\t\t\tthis._enableExtensionInWorkspace(extension.identifier);\n\t\t\t\tbreak;\n\t\t\tcase EnablementState.DisabledWorkspace:\n\t\t\t\tthis._disableExtensionInWorkspace(extension.identifier);\n\t\t\t\tbreak;\n\t\t}\n\n\t\treturn Promise.resolve(true);\n\t}\n\n\tisEnabled(extension: IExtension): boolean {\n\t\tconst enablementState = this.getEnablementState(extension);\n\t\treturn this.isEnabledEnablementState(enablementState);\n\t}\n\n\tisEnabledEnablementState(enablementState: EnablementState): boolean {\n\t\treturn enablementState === EnablementState.EnabledByEnvironment || enablementState === EnablementState.EnabledWorkspace || enablementState === EnablementState.EnabledGlobally;\n\t}\n\n\tisDisabledGlobally(extension: IExtension): boolean {\n\t\treturn this._isDisabledGlobally(extension.identifier);\n\t}\n\n\tprivate _computeEnablementState(extension: IExtension, extensions: ReadonlyArray<IExtension>, workspaceType: WorkspaceType, computedEnablementStates?: Map<IExtension, EnablementState>): EnablementState {\n\t\tcomputedEnablementStates = computedEnablementStates ?? new Map<IExtension, EnablementState>();\n\t\tlet enablementState = computedEnablementStates.get(extension);\n\t\tif (enablementState !== undefined) {\n\t\t\treturn enablementState;\n\t\t}\n\n\t\tenablementState = this._getUserEnablementState(extension.identifier);\n\t\tconst isEnabled = this.isEnabledEnablementState(enablementState);\n\n\t\tif (isEnabled && !extension.isValid) {\n\t\t\tenablementState = EnablementState.DisabledByInvalidExtension;\n\t\t}\n\n\t\telse if (this.extensionBisectService.isDisabledByBisect(extension)) {\n\t\t\tenablementState = EnablementState.DisabledByEnvironment;\n\t\t}\n\n\t\telse if (this._isDisabledInEnv(extension)) {\n\t\t\tenablementState = EnablementState.DisabledByEnvironment;\n\t\t}\n\n\t\telse if (this._isDisabledByVirtualWorkspace(extension, workspaceType)) {\n\t\t\tenablementState = EnablementState.DisabledByVirtualWorkspace;\n\t\t}\n\n\t\telse if (isEnabled && this._isDisabledByWorkspaceTrust(extension, workspaceType)) {\n\t\t\tenablementState = EnablementState.DisabledByTrustRequirement;\n\t\t}\n\n\t\telse if (this._isDisabledByExtensionKind(extension)) {\n\t\t\tenablementState = EnablementState.DisabledByExtensionKind;\n\t\t}\n\n\t\telse if (isEnabled && this._isDisabledByExtensionDependency(extension, extensions, workspaceType, computedEnablementStates)) {\n\t\t\tenablementState = EnablementState.DisabledByExtensionDependency;\n\t\t}\n\n\t\telse if (!isEnabled && this._isEnabledInEnv(extension)) {\n\t\t\tenablementState = EnablementState.EnabledByEnvironment;\n\t\t}\n\n\t\tcomputedEnablementStates.set(extension, enablementState);\n\t\treturn enablementState;\n\t}\n\n\tprivate _isDisabledInEnv(extension: IExtension): boolean {\n\t\tif (this.allUserExtensionsDisabled) {\n\t\t\treturn !extension.isBuiltin && !isResolverExtension(extension.manifest, this.environmentService.remoteAuthority);\n\t\t}\n\n\t\tconst disabledExtensions = this.environmentService.disableExtensions;\n\t\tif (Array.isArray(disabledExtensions)) {\n\t\t\treturn disabledExtensions.some(id => areSameExtensions({ id }, extension.identifier));\n\t\t}\n\n\t\t// Check if this is the better merge extension which was migrated to a built-in extension\n\t\tif (areSameExtensions({ id: BetterMergeId.value }, extension.identifier)) {\n\t\t\treturn true;\n\t\t}\n\n\t\treturn false;\n\t}\n\n\tprivate _isEnabledInEnv(extension: IExtension): boolean {\n\t\tconst enabledExtensions = this.environmentService.enableExtensions;\n\t\tif (Array.isArray(enabledExtensions)) {\n\t\t\treturn enabledExtensions.some(id => areSameExtensions({ id }, extension.identifier));\n\t\t}\n\t\treturn false;\n\t}\n\n\tprivate _isDisabledByVirtualWorkspace(extension: IExtension, workspaceType: WorkspaceType): boolean {\n\t\t// Not a virtual workspace\n\t\tif (!workspaceType.virtual) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// Supports virtual workspace\n\t\tif (this.extensionManifestPropertiesService.getExtensionVirtualWorkspaceSupportType(extension.manifest) !== false) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// Web extension from web extension management server\n\t\tif (this.extensionManagementServerService.getExtensionManagementServer(extension) === this.extensionManagementServerService.webExtensionManagementServer && this.extensionManifestPropertiesService.canExecuteOnWeb(extension.manifest)) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn true;\n\t}\n\n\tprivate _isDisabledByExtensionKind(extension: IExtension): boolean {\n\t\tif (this.extensionManagementServerService.remoteExtensionManagementServer || this.extensionManagementServerService.webExtensionManagementServer) {\n\t\t\tconst installLocation = this.extensionManagementServerService.getExtensionInstallLocation(extension);\n\t\t\tfor (const extensionKind of this.extensionManifestPropertiesService.getExtensionKind(extension.manifest)) {\n\t\t\t\tif (extensionKind === 'ui') {\n\t\t\t\t\tif (installLocation === ExtensionInstallLocation.Local) {\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (extensionKind === 'workspace') {\n\t\t\t\t\tif (installLocation === ExtensionInstallLocation.Remote) {\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (extensionKind === 'web') {\n\t\t\t\t\tif (this.extensionManagementServerService.webExtensionManagementServer /* web */) {\n\t\t\t\t\t\tif (installLocation === ExtensionInstallLocation.Web || installLocation === ExtensionInstallLocation.Remote) {\n\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if (installLocation === ExtensionInstallLocation.Local) {\n\t\t\t\t\t\tconst enableLocalWebWorker = this.configurationService.getValue<WebWorkerExtHostConfigValue>(webWorkerExtHostConfig);\n\t\t\t\t\t\tif (enableLocalWebWorker === true || enableLocalWebWorker === 'auto') {\n\t\t\t\t\t\t\t// Web extensions are enabled on all configurations\n\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\n\tprivate _isDisabledByWorkspaceTrust(extension: IExtension, workspaceType: WorkspaceType): boolean {\n\t\tif (workspaceType.trusted) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (this.contextService.isInsideWorkspace(extension.location)) {\n\t\t\treturn true;\n\t\t}\n\n\t\treturn this.extensionManifestPropertiesService.getExtensionUntrustedWorkspaceSupportType(extension.manifest) === false;\n\t}\n\n\tprivate _isDisabledByExtensionDependency(extension: IExtension, extensions: ReadonlyArray<IExtension>, workspaceType: WorkspaceType, computedEnablementStates: Map<IExtension, EnablementState>): boolean {\n\t\t// Find dependencies from the same server as of the extension\n\t\tconst dependencyExtensions = extension.manifest.extensionDependencies\n\t\t\t? extensions.filter(e =>\n\t\t\t\textension.manifest.extensionDependencies!.some(id => areSameExtensions(e.identifier, { id }) && this.extensionManagementServerService.getExtensionManagementServer(e) === this.extensionManagementServerService.getExtensionManagementServer(extension)))\n\t\t\t: [];\n\n\t\tif (!dependencyExtensions.length) {\n\t\t\treturn !!extensions.length && !!extension.manifest.extensionDependencies?.length;\n\t\t}\n\n\t\tconst hasEnablementState = computedEnablementStates.has(extension);\n\t\tif (!hasEnablementState) {\n\t\t\t// Placeholder to handle cyclic deps\n\t\t\tcomputedEnablementStates.set(extension, EnablementState.EnabledGlobally);\n\t\t}\n\t\ttry {\n\t\t\tfor (const dependencyExtension of dependencyExtensions) {\n\t\t\t\tconst enablementState = this._computeEnablementState(dependencyExtension, extensions, workspaceType, computedEnablementStates);\n\t\t\t\tif (!this.isEnabledEnablementState(enablementState) && enablementState !== EnablementState.DisabledByExtensionKind) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t} finally {\n\t\t\tif (!hasEnablementState) {\n\t\t\t\t// remove the placeholder\n\t\t\t\tcomputedEnablementStates.delete(extension);\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t}\n\n\tprivate _getUserEnablementState(identifier: IExtensionIdentifier): EnablementState {\n\t\tif (this.hasWorkspace) {\n\t\t\tif (this._getWorkspaceEnabledExtensions().filter(e => areSameExtensions(e, identifier))[0]) {\n\t\t\t\treturn EnablementState.EnabledWorkspace;\n\t\t\t}\n\n\t\t\tif (this._getWorkspaceDisabledExtensions().filter(e => areSameExtensions(e, identifier))[0]) {\n\t\t\t\treturn EnablementState.DisabledWorkspace;\n\t\t\t}\n\t\t}\n\t\tif (this._isDisabledGlobally(identifier)) {\n\t\t\treturn EnablementState.DisabledGlobally;\n\t\t}\n\t\treturn EnablementState.EnabledGlobally;\n\t}\n\n\tprivate _isDisabledGlobally(identifier: IExtensionIdentifier): boolean {\n\t\treturn this.globalExtensionEnablementService.getDisabledExtensions().some(e => areSameExtensions(e, identifier));\n\t}\n\n\tprivate _enableExtension(identifier: IExtensionIdentifier): Promise<boolean> {\n\t\tthis._removeFromWorkspaceDisabledExtensions(identifier);\n\t\tthis._removeFromWorkspaceEnabledExtensions(identifier);\n\t\treturn this.globalExtensionEnablementService.enableExtension(identifier, SOURCE);\n\t}\n\n\tprivate _disableExtension(identifier: IExtensionIdentifier): Promise<boolean> {\n\t\tthis._removeFromWorkspaceDisabledExtensions(identifier);\n\t\tthis._removeFromWorkspaceEnabledExtensions(identifier);\n\t\treturn this.globalExtensionEnablementService.disableExtension(identifier, SOURCE);\n\t}\n\n\tprivate _enableExtensionInWorkspace(identifier: IExtensionIdentifier): void {\n\t\tthis._removeFromWorkspaceDisabledExtensions(identifier);\n\t\tthis._addToWorkspaceEnabledExtensions(identifier);\n\t}\n\n\tprivate _disableExtensionInWorkspace(identifier: IExtensionIdentifier): void {\n\t\tthis._addToWorkspaceDisabledExtensions(identifier);\n\t\tthis._removeFromWorkspaceEnabledExtensions(identifier);\n\t}\n\n\tprivate _addToWorkspaceDisabledExtensions(identifier: IExtensionIdentifier): Promise<boolean> {\n\t\tif (!this.hasWorkspace) {\n\t\t\treturn Promise.resolve(false);\n\t\t}\n\t\tconst disabledExtensions = this._getWorkspaceDisabledExtensions();\n\t\tif (disabledExtensions.every(e => !areSameExtensions(e, identifier))) {\n\t\t\tdisabledExtensions.push(identifier);\n\t\t\tthis._setDisabledExtensions(disabledExtensions);\n\t\t\treturn Promise.resolve(true);\n\t\t}\n\t\treturn Promise.resolve(false);\n\t}\n\n\tprivate async _removeFromWorkspaceDisabledExtensions(identifier: IExtensionIdentifier): Promise<boolean> {\n\t\tif (!this.hasWorkspace) {\n\t\t\treturn false;\n\t\t}\n\t\tconst disabledExtensions = this._getWorkspaceDisabledExtensions();\n\t\tfor (let index = 0; index < disabledExtensions.length; index++) {\n\t\t\tconst disabledExtension = disabledExtensions[index];\n\t\t\tif (areSameExtensions(disabledExtension, identifier)) {\n\t\t\t\tdisabledExtensions.splice(index, 1);\n\t\t\t\tthis._setDisabledExtensions(disabledExtensions);\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\n\tprivate _addToWorkspaceEnabledExtensions(identifier: IExtensionIdentifier): boolean {\n\t\tif (!this.hasWorkspace) {\n\t\t\treturn false;\n\t\t}\n\t\tconst enabledExtensions = this._getWorkspaceEnabledExtensions();\n\t\tif (enabledExtensions.every(e => !areSameExtensions(e, identifier))) {\n\t\t\tenabledExtensions.push(identifier);\n\t\t\tthis._setEnabledExtensions(enabledExtensions);\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\n\tprivate _removeFromWorkspaceEnabledExtensions(identifier: IExtensionIdentifier): boolean {\n\t\tif (!this.hasWorkspace) {\n\t\t\treturn false;\n\t\t}\n\t\tconst enabledExtensions = this._getWorkspaceEnabledExtensions();\n\t\tfor (let index = 0; index < enabledExtensions.length; index++) {\n\t\t\tconst disabledExtension = enabledExtensions[index];\n\t\t\tif (areSameExtensions(disabledExtension, identifier)) {\n\t\t\t\tenabledExtensions.splice(index, 1);\n\t\t\t\tthis._setEnabledExtensions(enabledExtensions);\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\n\tprotected _getWorkspaceEnabledExtensions(): IExtensionIdentifier[] {\n\t\treturn this._getExtensions(ENABLED_EXTENSIONS_STORAGE_PATH);\n\t}\n\n\tprivate _setEnabledExtensions(enabledExtensions: IExtensionIdentifier[]): void {\n\t\tthis._setExtensions(ENABLED_EXTENSIONS_STORAGE_PATH, enabledExtensions);\n\t}\n\n\tprotected _getWorkspaceDisabledExtensions(): IExtensionIdentifier[] {\n\t\treturn this._getExtensions(DISABLED_EXTENSIONS_STORAGE_PATH);\n\t}\n\n\tprivate _setDisabledExtensions(disabledExtensions: IExtensionIdentifier[]): void {\n\t\tthis._setExtensions(DISABLED_EXTENSIONS_STORAGE_PATH, disabledExtensions);\n\t}\n\n\tprivate _getExtensions(storageId: string): IExtensionIdentifier[] {\n\t\tif (!this.hasWorkspace) {\n\t\t\treturn [];\n\t\t}\n\t\treturn this.storageManager.get(storageId, StorageScope.WORKSPACE);\n\t}\n\n\tprivate _setExtensions(storageId: string, extensions: IExtensionIdentifier[]): void {\n\t\tthis.storageManager.set(storageId, extensions, StorageScope.WORKSPACE);\n\t}\n\n\tprivate async _onDidChangeGloballyDisabledExtensions(extensionIdentifiers: ReadonlyArray<IExtensionIdentifier>, source?: string): Promise<void> {\n\t\tif (source !== SOURCE) {\n\t\t\tawait this.extensionsManager.whenInitialized();\n\t\t\tconst extensions = this.extensionsManager.extensions.filter(installedExtension => extensionIdentifiers.some(identifier => areSameExtensions(identifier, installedExtension.identifier)));\n\t\t\tthis._onEnablementChanged.fire(extensions);\n\t\t}\n\t}\n\n\tprivate _onDidChangeExtensions(added: ReadonlyArray<IExtension>, removed: ReadonlyArray<IExtension>, isProfileSwitch: boolean): void {\n\t\tconst changedExtensions: IExtension[] = added.filter(e => !this.isEnabledEnablementState(this.getEnablementState(e)));\n\t\tconst existingExtensionsDisabledByExtensionDependency = this.extensionsDisabledByExtensionDependency;\n\t\tthis.extensionsDisabledByExtensionDependency = this.extensionsManager.extensions.filter(extension => this.getEnablementState(extension) === EnablementState.DisabledByExtensionDependency);\n\t\tfor (const extension of existingExtensionsDisabledByExtensionDependency) {\n\t\t\tif (this.extensionsDisabledByExtensionDependency.every(e => !areSameExtensions(e.identifier, extension.identifier))) {\n\t\t\t\tchangedExtensions.push(extension);\n\t\t\t}\n\t\t}\n\t\tfor (const extension of this.extensionsDisabledByExtensionDependency) {\n\t\t\tif (existingExtensionsDisabledByExtensionDependency.every(e => !areSameExtensions(e.identifier, extension.identifier))) {\n\t\t\t\tchangedExtensions.push(extension);\n\t\t\t}\n\t\t}\n\t\tif (changedExtensions.length) {\n\t\t\tthis._onEnablementChanged.fire(changedExtensions);\n\t\t}\n\t\tif (!isProfileSwitch) {\n\t\t\tremoved.forEach(({ identifier }) => this._reset(identifier));\n\t\t}\n\t}\n\n\tpublic async updateExtensionsEnablementsWhenWorkspaceTrustChanges(): Promise<void> {\n\t\tawait this.extensionsManager.whenInitialized();\n\n\t\tconst computeEnablementStates = (workspaceType: WorkspaceType): [IExtension, EnablementState][] => {\n\t\t\tconst extensionsEnablements = new Map<IExtension, EnablementState>();\n\t\t\treturn this.extensionsManager.extensions.map(extension => [extension, this._computeEnablementState(extension, this.extensionsManager.extensions, workspaceType, extensionsEnablements)]);\n\t\t};\n\n\t\tconst workspaceType = this.getWorkspaceType();\n\t\tconst enablementStatesWithTrustedWorkspace = computeEnablementStates({ ...workspaceType, trusted: true });\n\t\tconst enablementStatesWithUntrustedWorkspace = computeEnablementStates({ ...workspaceType, trusted: false });\n\t\tconst enablementChangedExtensionsBecauseOfTrust = enablementStatesWithTrustedWorkspace.filter(([, enablementState], index) => enablementState !== enablementStatesWithUntrustedWorkspace[index][1]).map(([extension]) => extension);\n\n\t\tif (enablementChangedExtensionsBecauseOfTrust.length) {\n\t\t\tthis._onEnablementChanged.fire(enablementChangedExtensionsBecauseOfTrust);\n\t\t}\n\t}\n\n\tprivate getWorkspaceType(): WorkspaceType {\n\t\treturn { trusted: this.workspaceTrustManagementService.isWorkspaceTrusted(), virtual: isVirtualWorkspace(this.contextService.getWorkspace()) };\n\t}\n\n\tprivate _reset(extension: IExtensionIdentifier) {\n\t\tthis._removeFromWorkspaceDisabledExtensions(extension);\n\t\tthis._removeFromWorkspaceEnabledExtensions(extension);\n\t\tthis.globalExtensionEnablementService.enableExtension(extension);\n\t}\n}\n\nclass ExtensionsManager extends Disposable {\n\n\tprivate _extensions: IExtension[] = [];\n\tget extensions(): readonly IExtension[] { return this._extensions; }\n\n\tprivate _onDidChangeExtensions = this._register(new Emitter<{ added: readonly IExtension[]; removed: readonly IExtension[]; readonly isProfileSwitch: boolean }>());\n\treadonly onDidChangeExtensions = this._onDidChangeExtensions.event;\n\n\tprivate readonly initializePromise;\n\tprivate disposed: boolean = false;\n\n\tconstructor(\n\t\t@IWorkbenchExtensionManagementService private readonly extensionManagementService: IWorkbenchExtensionManagementService,\n\t\t@IExtensionManagementServerService private readonly extensionManagementServerService: IExtensionManagementServerService,\n\t\t@ILogService private readonly logService: ILogService\n\t) {\n\t\tsuper();\n\t\tthis._register(toDisposable(() => this.disposed = true));\n\t\tthis.initializePromise = this.initialize();\n\t}\n\n\twhenInitialized(): Promise<void> {\n\t\treturn this.initializePromise;\n\t}\n\n\tprivate async initialize(): Promise<void> {\n\t\ttry {\n\t\t\tthis._extensions = [\n\t\t\t\t...await this.extensionManagementService.getInstalled(),\n\t\t\t\t...await this.extensionManagementService.getInstalledWorkspaceExtensions(true)\n\t\t\t];\n\t\t\tif (this.disposed) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tthis._onDidChangeExtensions.fire({ added: this.extensions, removed: [], isProfileSwitch: false });\n\t\t} catch (error) {\n\t\t\tthis.logService.error(error);\n\t\t}\n\t\tthis._register(this.extensionManagementService.onDidInstallExtensions(e =>\n\t\t\tthis.updateExtensions(e.reduce<IExtension[]>((result, { local, operation }) => {\n\t\t\t\tif (local && operation !== InstallOperation.Migrate) { result.push(local); } return result;\n\t\t\t}, []), [], undefined, false)));\n\t\tthis._register(Event.filter(this.extensionManagementService.onDidUninstallExtension, (e => !e.error))(e => this.updateExtensions([], [e.identifier], e.server, false)));\n\t\tthis._register(this.extensionManagementService.onDidChangeProfile(({ added, removed, server }) => {\n\t\t\tthis.updateExtensions(added, removed.map(({ identifier }) => identifier), server, true);\n\t\t}));\n\t}\n\n\tprivate updateExtensions(added: IExtension[], identifiers: IExtensionIdentifier[], server: IExtensionManagementServer | undefined, isProfileSwitch: boolean): void {\n\t\tif (added.length) {\n\t\t\tfor (const extension of added) {\n\t\t\t\tconst extensionServer = this.extensionManagementServerService.getExtensionManagementServer(extension);\n\t\t\t\tconst index = this._extensions.findIndex(e => areSameExtensions(e.identifier, extension.identifier) && this.extensionManagementServerService.getExtensionManagementServer(e) === extensionServer);\n\t\t\t\tif (index !== -1) {\n\t\t\t\t\tthis._extensions.splice(index, 1);\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis._extensions.push(...added);\n\t\t}\n\t\tconst removed: IExtension[] = [];\n\t\tfor (const identifier of identifiers) {\n\t\t\tconst index = this._extensions.findIndex(e => areSameExtensions(e.identifier, identifier) && this.extensionManagementServerService.getExtensionManagementServer(e) === server);\n\t\t\tif (index !== -1) {\n\t\t\t\tremoved.push(...this._extensions.splice(index, 1));\n\t\t\t}\n\t\t}\n\t\tif (added.length || removed.length) {\n\t\t\tthis._onDidChangeExtensions.fire({ added, removed, isProfileSwitch });\n\t\t}\n\t}\n}\n\nregisterSingleton(IWorkbenchExtensionEnablementService, ExtensionEnablementService, InstantiationType.Delayed);\n"],
  "mappings": "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",
  "names": ["workspaceType"]
}
