{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/extensionManagement/browser/webExtensionsScannerService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { isNonEmptyArray } from \"../../../../base/common/arrays.js\";\nimport { Queue } from \"../../../../base/common/async.js\";\nimport { VSBuffer } from \"../../../../base/common/buffer.js\";\nimport { CancellationToken } from \"../../../../base/common/cancellation.js\";\nimport type { IStringDictionary } from \"../../../../base/common/collections.js\";\nimport { getErrorMessage } from \"../../../../base/common/errors.js\";\nimport { Disposable } from \"../../../../base/common/lifecycle.js\";\nimport { ResourceMap } from \"../../../../base/common/map.js\";\nimport { basename } from \"../../../../base/common/path.js\";\nimport { Language, isWeb } from \"../../../../base/common/platform.js\";\nimport { joinPath } from \"../../../../base/common/resources.js\";\nimport * as semver from \"../../../../base/common/semver/semver.js\";\nimport Severity from \"../../../../base/common/severity.js\";\nimport { isString, isUndefined } from \"../../../../base/common/types.js\";\nimport { URI, type UriComponents } from \"../../../../base/common/uri.js\";\nimport { localize, localize2 } from \"../../../../nls.js\";\nimport { Categories } from \"../../../../platform/action/common/actionCommonCategories.js\";\nimport {\n\tAction2,\n\tregisterAction2,\n} from \"../../../../platform/actions/common/actions.js\";\nimport { IsWebContext } from \"../../../../platform/contextkey/common/contextkeys.js\";\nimport {\n\tIExtensionGalleryService,\n\ttype IExtensionInfo,\n\ttype IGalleryExtension,\n\ttype IGalleryMetadata,\n\ttype Metadata,\n} from \"../../../../platform/extensionManagement/common/extensionManagement.js\";\nimport {\n\tareSameExtensions,\n\tgetExtensionId,\n\tgetGalleryExtensionId,\n} from \"../../../../platform/extensionManagement/common/extensionManagementUtil.js\";\nimport {\n\ttype ITranslations,\n\tlocalizeManifest,\n} from \"../../../../platform/extensionManagement/common/extensionNls.js\";\nimport { IExtensionStorageService } from \"../../../../platform/extensionManagement/common/extensionStorage.js\";\nimport {\n\tIExtensionResourceLoaderService,\n\tmigratePlatformSpecificExtensionGalleryResourceURL,\n} from \"../../../../platform/extensionResourceLoader/common/extensionResourceLoader.js\";\nimport { validateExtensionManifest } from \"../../../../platform/extensions/common/extensionValidator.js\";\nimport {\n\tExtensionType,\n\tIBuiltinExtensionsScannerService,\n\ttype IExtension,\n\ttype IExtensionIdentifier,\n\ttype IExtensionManifest,\n\ttype IRelaxedExtensionManifest,\n\tTargetPlatform,\n\tparseEnabledApiProposalNames,\n} from \"../../../../platform/extensions/common/extensions.js\";\nimport {\n\ttype FileOperationError,\n\tFileOperationResult,\n\tIFileService,\n} from \"../../../../platform/files/common/files.js\";\nimport {\n\tInstantiationType,\n\tregisterSingleton,\n} from \"../../../../platform/instantiation/common/extensions.js\";\nimport type { ServicesAccessor } from \"../../../../platform/instantiation/common/instantiation.js\";\nimport { ILogService } from \"../../../../platform/log/common/log.js\";\nimport { IProductService } from \"../../../../platform/product/common/productService.js\";\nimport {\n\tIStorageService,\n\tStorageScope,\n\tStorageTarget,\n} from \"../../../../platform/storage/common/storage.js\";\nimport { IUriIdentityService } from \"../../../../platform/uriIdentity/common/uriIdentity.js\";\nimport { IUserDataProfilesService } from \"../../../../platform/userDataProfile/common/userDataProfile.js\";\nimport { IEditorService } from \"../../editor/common/editorService.js\";\nimport { IBrowserWorkbenchEnvironmentService } from \"../../environment/browser/environmentService.js\";\nimport { IExtensionManifestPropertiesService } from \"../../extensions/common/extensionManifestPropertiesService.js\";\nimport {\n\tILifecycleService,\n\tLifecyclePhase,\n} from \"../../lifecycle/common/lifecycle.js\";\nimport { IUserDataProfileService } from \"../../userDataProfile/common/userDataProfile.js\";\nimport {\n\ttype IScannedExtension,\n\tIWebExtensionsScannerService,\n\ttype ScanOptions,\n} from \"../common/extensionManagement.js\";\n\ntype GalleryExtensionInfo = {\n\treadonly id: string;\n\tpreRelease?: boolean;\n\tmigrateStorageFrom?: string;\n};\ntype ExtensionInfo = { readonly id: string; preRelease: boolean };\n\nfunction isGalleryExtensionInfo(obj: unknown): obj is GalleryExtensionInfo {\n\tconst galleryExtensionInfo = obj as GalleryExtensionInfo | undefined;\n\treturn (\n\t\ttypeof galleryExtensionInfo?.id === \"string\" &&\n\t\t(galleryExtensionInfo.preRelease === undefined ||\n\t\t\ttypeof galleryExtensionInfo.preRelease === \"boolean\") &&\n\t\t(galleryExtensionInfo.migrateStorageFrom === undefined ||\n\t\t\ttypeof galleryExtensionInfo.migrateStorageFrom === \"string\")\n\t);\n}\n\nfunction isUriComponents(thing: unknown): thing is UriComponents {\n\tif (!thing) {\n\t\treturn false;\n\t}\n\treturn isString((<any>thing).path) && isString((<any>thing).scheme);\n}\n\ninterface IStoredWebExtension {\n\treadonly identifier: IExtensionIdentifier;\n\treadonly version: string;\n\treadonly location: UriComponents;\n\treadonly manifest?: IExtensionManifest;\n\treadonly readmeUri?: UriComponents;\n\treadonly changelogUri?: UriComponents;\n\t// deprecated in favor of packageNLSUris & fallbackPackageNLSUri\n\treadonly packageNLSUri?: UriComponents;\n\treadonly packageNLSUris?: IStringDictionary<UriComponents>;\n\treadonly fallbackPackageNLSUri?: UriComponents;\n\treadonly defaultManifestTranslations?: ITranslations | null;\n\treadonly metadata?: Metadata;\n}\n\ninterface IWebExtension {\n\tidentifier: IExtensionIdentifier;\n\tversion: string;\n\tlocation: URI;\n\tmanifest?: IExtensionManifest;\n\treadmeUri?: URI;\n\tchangelogUri?: URI;\n\t// deprecated in favor of packageNLSUris & fallbackPackageNLSUri\n\tpackageNLSUri?: URI;\n\tpackageNLSUris?: Map<string, URI>;\n\tfallbackPackageNLSUri?: URI;\n\tdefaultManifestTranslations?: ITranslations | null;\n\tmetadata?: Metadata;\n}\n\nexport class WebExtensionsScannerService\n\textends Disposable\n\timplements IWebExtensionsScannerService\n{\n\tdeclare readonly _serviceBrand: undefined;\n\n\tprivate readonly systemExtensionsCacheResource: URI | undefined = undefined;\n\tprivate readonly customBuiltinExtensionsCacheResource: URI | undefined =\n\t\tundefined;\n\tprivate readonly resourcesAccessQueueMap = new ResourceMap<\n\t\tQueue<IWebExtension[]>\n\t>();\n\tprivate readonly extensionsEnabledWithApiProposalVersion: string[];\n\n\tconstructor(\n\t\t@IBrowserWorkbenchEnvironmentService private readonly environmentService: IBrowserWorkbenchEnvironmentService,\n\t\t@IBuiltinExtensionsScannerService private readonly builtinExtensionsScannerService: IBuiltinExtensionsScannerService,\n\t\t@IFileService private readonly fileService: IFileService,\n\t\t@ILogService private readonly logService: ILogService,\n\t\t@IExtensionGalleryService private readonly galleryService: IExtensionGalleryService,\n\t\t@IExtensionManifestPropertiesService private readonly extensionManifestPropertiesService: IExtensionManifestPropertiesService,\n\t\t@IExtensionResourceLoaderService private readonly extensionResourceLoaderService: IExtensionResourceLoaderService,\n\t\t@IExtensionStorageService private readonly extensionStorageService: IExtensionStorageService,\n\t\t@IStorageService private readonly storageService: IStorageService,\n\t\t@IProductService private readonly productService: IProductService,\n\t\t@IUserDataProfilesService private readonly userDataProfilesService: IUserDataProfilesService,\n\t\t@IUriIdentityService private readonly uriIdentityService: IUriIdentityService,\n\t\t@ILifecycleService lifecycleService: ILifecycleService,\n\t) {\n\t\tsuper();\n\t\tif (isWeb) {\n\t\t\tthis.systemExtensionsCacheResource = joinPath(environmentService.userRoamingDataHome, 'systemExtensionsCache.json');\n\t\t\tthis.customBuiltinExtensionsCacheResource = joinPath(environmentService.userRoamingDataHome, 'customBuiltinExtensionsCache.json');\n\n\t\t\t// Eventually update caches\n\t\t\tlifecycleService.when(LifecyclePhase.Eventually).then(() => this.updateCaches());\n\t\t}\n\t\tthis.extensionsEnabledWithApiProposalVersion = productService.extensionsEnabledWithApiProposalVersion?.map(id => id.toLowerCase()) ?? [];\n\t}\n\n\tprivate _customBuiltinExtensionsInfoPromise:\n\t\t| Promise<{\n\t\t\t\textensions: ExtensionInfo[];\n\t\t\t\textensionsToMigrate: [string, string][];\n\t\t\t\textensionLocations: URI[];\n\t\t\t\textensionGalleryResources: URI[];\n\t\t  }>\n\t\t| undefined;\n\tprivate readCustomBuiltinExtensionsInfoFromEnv(): Promise<{\n\t\textensions: ExtensionInfo[];\n\t\textensionsToMigrate: [string, string][];\n\t\textensionLocations: URI[];\n\t\textensionGalleryResources: URI[];\n\t}> {\n\t\tif (!this._customBuiltinExtensionsInfoPromise) {\n\t\t\tthis._customBuiltinExtensionsInfoPromise = (async () => {\n\t\t\t\tlet extensions: ExtensionInfo[] = [];\n\t\t\t\tconst extensionLocations: URI[] = [];\n\t\t\t\tconst extensionGalleryResources: URI[] = [];\n\t\t\t\tconst extensionsToMigrate: [string, string][] = [];\n\t\t\t\tconst customBuiltinExtensionsInfo =\n\t\t\t\t\tthis.environmentService.options &&\n\t\t\t\t\tArray.isArray(\n\t\t\t\t\t\tthis.environmentService.options\n\t\t\t\t\t\t\t.additionalBuiltinExtensions,\n\t\t\t\t\t)\n\t\t\t\t\t\t? this.environmentService.options.additionalBuiltinExtensions.map(\n\t\t\t\t\t\t\t\t(additionalBuiltinExtension) =>\n\t\t\t\t\t\t\t\t\tisString(additionalBuiltinExtension)\n\t\t\t\t\t\t\t\t\t\t? { id: additionalBuiltinExtension }\n\t\t\t\t\t\t\t\t\t\t: additionalBuiltinExtension,\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t: [];\n\t\t\t\tfor (const e of customBuiltinExtensionsInfo) {\n\t\t\t\t\tif (isGalleryExtensionInfo(e)) {\n\t\t\t\t\t\textensions.push({\n\t\t\t\t\t\t\tid: e.id,\n\t\t\t\t\t\t\tpreRelease: !!e.preRelease,\n\t\t\t\t\t\t});\n\t\t\t\t\t\tif (e.migrateStorageFrom) {\n\t\t\t\t\t\t\textensionsToMigrate.push([\n\t\t\t\t\t\t\t\te.migrateStorageFrom,\n\t\t\t\t\t\t\t\te.id,\n\t\t\t\t\t\t\t]);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if (isUriComponents(e)) {\n\t\t\t\t\t\tconst extensionLocation = URI.revive(e);\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\tthis.extensionResourceLoaderService.isExtensionGalleryResource(\n\t\t\t\t\t\t\t\textensionLocation,\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\textensionGalleryResources.push(extensionLocation);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\textensionLocations.push(extensionLocation);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (extensions.length) {\n\t\t\t\t\textensions =\n\t\t\t\t\t\tawait this.checkAdditionalBuiltinExtensions(extensions);\n\t\t\t\t}\n\t\t\t\tif (extensions.length) {\n\t\t\t\t\tthis.logService.info(\n\t\t\t\t\t\t\"Found additional builtin gallery extensions in env\",\n\t\t\t\t\t\textensions,\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t\tif (extensionLocations.length) {\n\t\t\t\t\tthis.logService.info(\n\t\t\t\t\t\t\"Found additional builtin location extensions in env\",\n\t\t\t\t\t\textensionLocations.map((e) => e.toString()),\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t\tif (extensionGalleryResources.length) {\n\t\t\t\t\tthis.logService.info(\n\t\t\t\t\t\t\"Found additional builtin extension gallery resources in env\",\n\t\t\t\t\t\textensionGalleryResources.map((e) => e.toString()),\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t\treturn {\n\t\t\t\t\textensions,\n\t\t\t\t\textensionsToMigrate,\n\t\t\t\t\textensionLocations,\n\t\t\t\t\textensionGalleryResources,\n\t\t\t\t};\n\t\t\t})();\n\t\t}\n\t\treturn this._customBuiltinExtensionsInfoPromise;\n\t}\n\n\tprivate async checkAdditionalBuiltinExtensions(\n\t\textensions: ExtensionInfo[],\n\t): Promise<ExtensionInfo[]> {\n\t\tconst extensionsControlManifest =\n\t\t\tawait this.galleryService.getExtensionsControlManifest();\n\t\tconst result: ExtensionInfo[] = [];\n\t\tfor (const extension of extensions) {\n\t\t\tif (\n\t\t\t\textensionsControlManifest.malicious.some((e) =>\n\t\t\t\t\tareSameExtensions(e, { id: extension.id }),\n\t\t\t\t)\n\t\t\t) {\n\t\t\t\tthis.logService.info(\n\t\t\t\t\t`Checking additional builtin extensions: Ignoring '${extension.id}' because it is reported to be malicious.`,\n\t\t\t\t);\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tconst deprecationInfo =\n\t\t\t\textensionsControlManifest.deprecated[\n\t\t\t\t\textension.id.toLowerCase()\n\t\t\t\t];\n\t\t\tif (deprecationInfo?.extension?.autoMigrate) {\n\t\t\t\tconst preReleaseExtensionId = deprecationInfo.extension.id;\n\t\t\t\tthis.logService.info(\n\t\t\t\t\t`Checking additional builtin extensions: '${extension.id}' is deprecated, instead using '${preReleaseExtensionId}'`,\n\t\t\t\t);\n\t\t\t\tresult.push({\n\t\t\t\t\tid: preReleaseExtensionId,\n\t\t\t\t\tpreRelease: !!extension.preRelease,\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tresult.push(extension);\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n\n\t/**\n\t * All system extensions bundled with the product\n\t */\n\tprivate async readSystemExtensions(): Promise<IExtension[]> {\n\t\tconst systemExtensions =\n\t\t\tawait this.builtinExtensionsScannerService.scanBuiltinExtensions();\n\t\tconst cachedSystemExtensions = await Promise.all(\n\t\t\t(await this.readSystemExtensionsCache()).map((e) =>\n\t\t\t\tthis.toScannedExtension(e, true, ExtensionType.System),\n\t\t\t),\n\t\t);\n\n\t\tconst result = new Map<string, IExtension>();\n\t\tfor (const extension of [\n\t\t\t...systemExtensions,\n\t\t\t...cachedSystemExtensions,\n\t\t]) {\n\t\t\tconst existing = result.get(extension.identifier.id.toLowerCase());\n\t\t\tif (existing) {\n\t\t\t\t// Incase there are duplicates always take the latest version\n\t\t\t\tif (\n\t\t\t\t\tsemver.gt(\n\t\t\t\t\t\texisting.manifest.version,\n\t\t\t\t\t\textension.manifest.version,\n\t\t\t\t\t)\n\t\t\t\t) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t}\n\t\t\tresult.set(extension.identifier.id.toLowerCase(), extension);\n\t\t}\n\t\treturn [...result.values()];\n\t}\n\n\t/**\n\t * All extensions defined via `additionalBuiltinExtensions` API\n\t */\n\tprivate async readCustomBuiltinExtensions(\n\t\tscanOptions?: ScanOptions,\n\t): Promise<IScannedExtension[]> {\n\t\tconst [\n\t\t\tcustomBuiltinExtensionsFromLocations,\n\t\t\tcustomBuiltinExtensionsFromGallery,\n\t\t] = await Promise.all([\n\t\t\tthis.getCustomBuiltinExtensionsFromLocations(scanOptions),\n\t\t\tthis.getCustomBuiltinExtensionsFromGallery(scanOptions),\n\t\t]);\n\t\tconst customBuiltinExtensions: IScannedExtension[] = [\n\t\t\t...customBuiltinExtensionsFromLocations,\n\t\t\t...customBuiltinExtensionsFromGallery,\n\t\t];\n\t\tawait this.migrateExtensionsStorage(customBuiltinExtensions);\n\t\treturn customBuiltinExtensions;\n\t}\n\n\tprivate async getCustomBuiltinExtensionsFromLocations(\n\t\tscanOptions?: ScanOptions,\n\t): Promise<IScannedExtension[]> {\n\t\tconst { extensionLocations } =\n\t\t\tawait this.readCustomBuiltinExtensionsInfoFromEnv();\n\t\tif (!extensionLocations.length) {\n\t\t\treturn [];\n\t\t}\n\t\tconst result: IScannedExtension[] = [];\n\t\tawait Promise.allSettled(\n\t\t\textensionLocations.map(async (extensionLocation) => {\n\t\t\t\ttry {\n\t\t\t\t\tconst webExtension =\n\t\t\t\t\t\tawait this.toWebExtension(extensionLocation);\n\t\t\t\t\tconst extension = await this.toScannedExtension(\n\t\t\t\t\t\twebExtension,\n\t\t\t\t\t\ttrue,\n\t\t\t\t\t);\n\t\t\t\t\tif (\n\t\t\t\t\t\textension.isValid ||\n\t\t\t\t\t\t!scanOptions?.skipInvalidExtensions\n\t\t\t\t\t) {\n\t\t\t\t\t\tresult.push(extension);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis.logService.info(\n\t\t\t\t\t\t\t`Skipping invalid additional builtin extension ${webExtension.identifier.id}`,\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t} catch (error) {\n\t\t\t\t\tthis.logService.info(\n\t\t\t\t\t\t`Error while fetching the additional builtin extension ${extensionLocation.toString()}.`,\n\t\t\t\t\t\tgetErrorMessage(error),\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}),\n\t\t);\n\t\treturn result;\n\t}\n\n\tprivate async getCustomBuiltinExtensionsFromGallery(\n\t\tscanOptions?: ScanOptions,\n\t): Promise<IScannedExtension[]> {\n\t\tif (!this.galleryService.isEnabled()) {\n\t\t\tthis.logService.info(\n\t\t\t\t\"Ignoring fetching additional builtin extensions from gallery as it is disabled.\",\n\t\t\t);\n\t\t\treturn [];\n\t\t}\n\t\tconst result: IScannedExtension[] = [];\n\t\tconst { extensions, extensionGalleryResources } =\n\t\t\tawait this.readCustomBuiltinExtensionsInfoFromEnv();\n\t\ttry {\n\t\t\tconst cacheValue = JSON.stringify({\n\t\t\t\textensions: extensions.sort((a, b) => a.id.localeCompare(b.id)),\n\t\t\t\textensionGalleryResources: extensionGalleryResources\n\t\t\t\t\t.map((e) => e.toString())\n\t\t\t\t\t.sort(),\n\t\t\t});\n\t\t\tconst useCache =\n\t\t\t\tthis.storageService.get(\n\t\t\t\t\t\"additionalBuiltinExtensions\",\n\t\t\t\t\tStorageScope.APPLICATION,\n\t\t\t\t\t\"{}\",\n\t\t\t\t) === cacheValue;\n\t\t\tconst webExtensions = await (useCache\n\t\t\t\t? this.getCustomBuiltinExtensionsFromCache()\n\t\t\t\t: this.updateCustomBuiltinExtensionsCache());\n\t\t\tif (webExtensions.length) {\n\t\t\t\tawait Promise.all(\n\t\t\t\t\twebExtensions.map(async (webExtension) => {\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tconst extension = await this.toScannedExtension(\n\t\t\t\t\t\t\t\twebExtension,\n\t\t\t\t\t\t\t\ttrue,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\textension.isValid ||\n\t\t\t\t\t\t\t\t!scanOptions?.skipInvalidExtensions\n\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\tresult.push(extension);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tthis.logService.info(\n\t\t\t\t\t\t\t\t\t`Skipping invalid additional builtin gallery extension ${webExtension.identifier.id}`,\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} catch (error) {\n\t\t\t\t\t\t\tthis.logService.info(\n\t\t\t\t\t\t\t\t`Ignoring additional builtin extension ${webExtension.identifier.id} because there is an error while converting it into scanned extension`,\n\t\t\t\t\t\t\t\tgetErrorMessage(error),\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\t\t\t\t\t}),\n\t\t\t\t);\n\t\t\t}\n\t\t\tthis.storageService.store(\n\t\t\t\t\"additionalBuiltinExtensions\",\n\t\t\t\tcacheValue,\n\t\t\t\tStorageScope.APPLICATION,\n\t\t\t\tStorageTarget.MACHINE,\n\t\t\t);\n\t\t} catch (error) {\n\t\t\tthis.logService.info(\n\t\t\t\t\"Ignoring following additional builtin extensions as there is an error while fetching them from gallery\",\n\t\t\t\textensions.map(({ id }) => id),\n\t\t\t\tgetErrorMessage(error),\n\t\t\t);\n\t\t}\n\t\treturn result;\n\t}\n\n\tprivate async getCustomBuiltinExtensionsFromCache(): Promise<\n\t\tIWebExtension[]\n\t> {\n\t\tconst cachedCustomBuiltinExtensions =\n\t\t\tawait this.readCustomBuiltinExtensionsCache();\n\t\tconst webExtensionsMap = new Map<string, IWebExtension>();\n\t\tfor (const webExtension of cachedCustomBuiltinExtensions) {\n\t\t\tconst existing = webExtensionsMap.get(\n\t\t\t\twebExtension.identifier.id.toLowerCase(),\n\t\t\t);\n\t\t\tif (existing) {\n\t\t\t\t// Incase there are duplicates always take the latest version\n\t\t\t\tif (semver.gt(existing.version, webExtension.version)) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t}\n\t\t\t/* Update preRelease flag in the cache - https://github.com/microsoft/vscode/issues/142831 */\n\t\t\tif (\n\t\t\t\twebExtension.metadata?.isPreReleaseVersion &&\n\t\t\t\t!webExtension.metadata?.preRelease\n\t\t\t) {\n\t\t\t\twebExtension.metadata.preRelease = true;\n\t\t\t}\n\t\t\twebExtensionsMap.set(\n\t\t\t\twebExtension.identifier.id.toLowerCase(),\n\t\t\t\twebExtension,\n\t\t\t);\n\t\t}\n\t\treturn [...webExtensionsMap.values()];\n\t}\n\n\tprivate _migrateExtensionsStoragePromise: Promise<void> | undefined;\n\tprivate async migrateExtensionsStorage(\n\t\tcustomBuiltinExtensions: IExtension[],\n\t): Promise<void> {\n\t\tif (!this._migrateExtensionsStoragePromise) {\n\t\t\tthis._migrateExtensionsStoragePromise = (async () => {\n\t\t\t\tconst { extensionsToMigrate } =\n\t\t\t\t\tawait this.readCustomBuiltinExtensionsInfoFromEnv();\n\t\t\t\tif (!extensionsToMigrate.length) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tconst fromExtensions = await this.galleryService.getExtensions(\n\t\t\t\t\textensionsToMigrate.map(([id]) => ({ id })),\n\t\t\t\t\tCancellationToken.None,\n\t\t\t\t);\n\t\t\t\ttry {\n\t\t\t\t\tawait Promise.allSettled(\n\t\t\t\t\t\textensionsToMigrate.map(async ([from, to]) => {\n\t\t\t\t\t\t\tconst toExtension = customBuiltinExtensions.find(\n\t\t\t\t\t\t\t\t(extension) =>\n\t\t\t\t\t\t\t\t\tareSameExtensions(extension.identifier, {\n\t\t\t\t\t\t\t\t\t\tid: to,\n\t\t\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tif (toExtension) {\n\t\t\t\t\t\t\t\tconst fromExtension = fromExtensions.find(\n\t\t\t\t\t\t\t\t\t(extension) =>\n\t\t\t\t\t\t\t\t\t\tareSameExtensions(\n\t\t\t\t\t\t\t\t\t\t\textension.identifier,\n\t\t\t\t\t\t\t\t\t\t\t{ id: from },\n\t\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\tconst fromExtensionManifest = fromExtension\n\t\t\t\t\t\t\t\t\t? await this.galleryService.getManifest(\n\t\t\t\t\t\t\t\t\t\t\tfromExtension,\n\t\t\t\t\t\t\t\t\t\t\tCancellationToken.None,\n\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t: null;\n\t\t\t\t\t\t\t\tconst fromExtensionId = fromExtensionManifest\n\t\t\t\t\t\t\t\t\t? getExtensionId(\n\t\t\t\t\t\t\t\t\t\t\tfromExtensionManifest.publisher,\n\t\t\t\t\t\t\t\t\t\t\tfromExtensionManifest.name,\n\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t: from;\n\t\t\t\t\t\t\t\tconst toExtensionId = getExtensionId(\n\t\t\t\t\t\t\t\t\ttoExtension.manifest.publisher,\n\t\t\t\t\t\t\t\t\ttoExtension.manifest.name,\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\tthis.extensionStorageService.addToMigrationList(\n\t\t\t\t\t\t\t\t\tfromExtensionId,\n\t\t\t\t\t\t\t\t\ttoExtensionId,\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tthis.logService.info(\n\t\t\t\t\t\t\t\t\t`Skipped migrating extension storage from '${from}' to '${to}', because the '${to}' extension is not found.`,\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}),\n\t\t\t\t\t);\n\t\t\t\t} catch (error) {\n\t\t\t\t\tthis.logService.error(error);\n\t\t\t\t}\n\t\t\t})();\n\t\t}\n\t\treturn this._migrateExtensionsStoragePromise;\n\t}\n\n\tprivate async updateCaches(): Promise<void> {\n\t\tawait this.updateSystemExtensionsCache();\n\t\tawait this.updateCustomBuiltinExtensionsCache();\n\t}\n\n\tprivate async updateSystemExtensionsCache(): Promise<void> {\n\t\tconst systemExtensions =\n\t\t\tawait this.builtinExtensionsScannerService.scanBuiltinExtensions();\n\t\tconst cachedSystemExtensions = (\n\t\t\tawait this.readSystemExtensionsCache()\n\t\t).filter((cached) => {\n\t\t\tconst systemExtension = systemExtensions.find((e) =>\n\t\t\t\tareSameExtensions(e.identifier, cached.identifier),\n\t\t\t);\n\t\t\treturn (\n\t\t\t\tsystemExtension &&\n\t\t\t\tsemver.gt(cached.version, systemExtension.manifest.version)\n\t\t\t);\n\t\t});\n\t\tawait this.writeSystemExtensionsCache(() => cachedSystemExtensions);\n\t}\n\n\tprivate _updateCustomBuiltinExtensionsCachePromise:\n\t\t| Promise<IWebExtension[]>\n\t\t| undefined;\n\tprivate async updateCustomBuiltinExtensionsCache(): Promise<\n\t\tIWebExtension[]\n\t> {\n\t\tif (!this._updateCustomBuiltinExtensionsCachePromise) {\n\t\t\tthis._updateCustomBuiltinExtensionsCachePromise = (async () => {\n\t\t\t\tthis.logService.info(\n\t\t\t\t\t\"Updating additional builtin extensions cache\",\n\t\t\t\t);\n\t\t\t\tconst { extensions, extensionGalleryResources } =\n\t\t\t\t\tawait this.readCustomBuiltinExtensionsInfoFromEnv();\n\t\t\t\tconst [\n\t\t\t\t\tgalleryWebExtensions,\n\t\t\t\t\textensionGalleryResourceWebExtensions,\n\t\t\t\t] = await Promise.all([\n\t\t\t\t\tthis.resolveBuiltinGalleryExtensions(extensions),\n\t\t\t\t\tthis.resolveBuiltinExtensionGalleryResources(\n\t\t\t\t\t\textensionGalleryResources,\n\t\t\t\t\t),\n\t\t\t\t]);\n\t\t\t\tconst webExtensionsMap = new Map<string, IWebExtension>();\n\t\t\t\tfor (const webExtension of [\n\t\t\t\t\t...galleryWebExtensions,\n\t\t\t\t\t...extensionGalleryResourceWebExtensions,\n\t\t\t\t]) {\n\t\t\t\t\twebExtensionsMap.set(\n\t\t\t\t\t\twebExtension.identifier.id.toLowerCase(),\n\t\t\t\t\t\twebExtension,\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t\tawait this.resolveDependenciesAndPackedExtensions(\n\t\t\t\t\textensionGalleryResourceWebExtensions,\n\t\t\t\t\twebExtensionsMap,\n\t\t\t\t);\n\t\t\t\tconst webExtensions = [...webExtensionsMap.values()];\n\t\t\t\tawait this.writeCustomBuiltinExtensionsCache(\n\t\t\t\t\t() => webExtensions,\n\t\t\t\t);\n\t\t\t\treturn webExtensions;\n\t\t\t})();\n\t\t}\n\t\treturn this._updateCustomBuiltinExtensionsCachePromise;\n\t}\n\n\tprivate async resolveBuiltinExtensionGalleryResources(\n\t\textensionGalleryResources: URI[],\n\t): Promise<IWebExtension[]> {\n\t\tif (extensionGalleryResources.length === 0) {\n\t\t\treturn [];\n\t\t}\n\t\tconst result = new Map<string, IWebExtension>();\n\t\tconst extensionInfos: IExtensionInfo[] = [];\n\t\tawait Promise.all(\n\t\t\textensionGalleryResources.map(async (extensionGalleryResource) => {\n\t\t\t\ttry {\n\t\t\t\t\tconst webExtension =\n\t\t\t\t\t\tawait this.toWebExtensionFromExtensionGalleryResource(\n\t\t\t\t\t\t\textensionGalleryResource,\n\t\t\t\t\t\t);\n\t\t\t\t\tresult.set(\n\t\t\t\t\t\twebExtension.identifier.id.toLowerCase(),\n\t\t\t\t\t\twebExtension,\n\t\t\t\t\t);\n\t\t\t\t\textensionInfos.push({\n\t\t\t\t\t\tid: webExtension.identifier.id,\n\t\t\t\t\t\tversion: webExtension.version,\n\t\t\t\t\t});\n\t\t\t\t} catch (error) {\n\t\t\t\t\tthis.logService.info(\n\t\t\t\t\t\t`Ignoring additional builtin extension from gallery resource ${extensionGalleryResource.toString()} because there is an error while converting it into web extension`,\n\t\t\t\t\t\tgetErrorMessage(error),\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}),\n\t\t);\n\t\tconst galleryExtensions = await this.galleryService.getExtensions(\n\t\t\textensionInfos,\n\t\t\tCancellationToken.None,\n\t\t);\n\t\tfor (const galleryExtension of galleryExtensions) {\n\t\t\tconst webExtension = result.get(\n\t\t\t\tgalleryExtension.identifier.id.toLowerCase(),\n\t\t\t);\n\t\t\tif (webExtension) {\n\t\t\t\tresult.set(galleryExtension.identifier.id.toLowerCase(), {\n\t\t\t\t\t...webExtension,\n\t\t\t\t\tidentifier: {\n\t\t\t\t\t\tid: webExtension.identifier.id,\n\t\t\t\t\t\tuuid: galleryExtension.identifier.uuid,\n\t\t\t\t\t},\n\t\t\t\t\treadmeUri: galleryExtension.assets.readme\n\t\t\t\t\t\t? URI.parse(galleryExtension.assets.readme.uri)\n\t\t\t\t\t\t: undefined,\n\t\t\t\t\tchangelogUri: galleryExtension.assets.changelog\n\t\t\t\t\t\t? URI.parse(galleryExtension.assets.changelog.uri)\n\t\t\t\t\t\t: undefined,\n\t\t\t\t\tmetadata: {\n\t\t\t\t\t\tisPreReleaseVersion:\n\t\t\t\t\t\t\tgalleryExtension.properties.isPreReleaseVersion,\n\t\t\t\t\t\tpreRelease:\n\t\t\t\t\t\t\tgalleryExtension.properties.isPreReleaseVersion,\n\t\t\t\t\t\tisBuiltin: true,\n\t\t\t\t\t\tpinned: true,\n\t\t\t\t\t},\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t\treturn [...result.values()];\n\t}\n\n\tprivate async resolveBuiltinGalleryExtensions(\n\t\textensions: IExtensionInfo[],\n\t): Promise<IWebExtension[]> {\n\t\tif (extensions.length === 0) {\n\t\t\treturn [];\n\t\t}\n\t\tconst webExtensions: IWebExtension[] = [];\n\t\tconst galleryExtensionsMap =\n\t\t\tawait this.getExtensionsWithDependenciesAndPackedExtensions(\n\t\t\t\textensions,\n\t\t\t);\n\t\tconst missingExtensions = extensions.filter(\n\t\t\t({ id }) => !galleryExtensionsMap.has(id.toLowerCase()),\n\t\t);\n\t\tif (missingExtensions.length) {\n\t\t\tthis.logService.info(\n\t\t\t\t\"Skipping the additional builtin extensions because their compatible versions are not found.\",\n\t\t\t\tmissingExtensions,\n\t\t\t);\n\t\t}\n\t\tawait Promise.all(\n\t\t\t[...galleryExtensionsMap.values()].map(async (gallery) => {\n\t\t\t\ttry {\n\t\t\t\t\tconst webExtension = await this.toWebExtensionFromGallery(\n\t\t\t\t\t\tgallery,\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tisPreReleaseVersion:\n\t\t\t\t\t\t\t\tgallery.properties.isPreReleaseVersion,\n\t\t\t\t\t\t\tpreRelease: gallery.properties.isPreReleaseVersion,\n\t\t\t\t\t\t\tisBuiltin: true,\n\t\t\t\t\t\t},\n\t\t\t\t\t);\n\t\t\t\t\twebExtensions.push(webExtension);\n\t\t\t\t} catch (error) {\n\t\t\t\t\tthis.logService.info(\n\t\t\t\t\t\t`Ignoring additional builtin extension ${gallery.identifier.id} because there is an error while converting it into web extension`,\n\t\t\t\t\t\tgetErrorMessage(error),\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}),\n\t\t);\n\t\treturn webExtensions;\n\t}\n\n\tprivate async resolveDependenciesAndPackedExtensions(\n\t\twebExtensions: IWebExtension[],\n\t\tresult: Map<string, IWebExtension>,\n\t): Promise<void> {\n\t\tconst extensionInfos: IExtensionInfo[] = [];\n\t\tfor (const webExtension of webExtensions) {\n\t\t\tfor (const e of [\n\t\t\t\t...(webExtension.manifest?.extensionDependencies ?? []),\n\t\t\t\t...(webExtension.manifest?.extensionPack ?? []),\n\t\t\t]) {\n\t\t\t\tif (!result.has(e.toLowerCase())) {\n\t\t\t\t\textensionInfos.push({\n\t\t\t\t\t\tid: e,\n\t\t\t\t\t\tversion: webExtension.version,\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (extensionInfos.length === 0) {\n\t\t\treturn;\n\t\t}\n\t\tconst galleryExtensions =\n\t\t\tawait this.getExtensionsWithDependenciesAndPackedExtensions(\n\t\t\t\textensionInfos,\n\t\t\t\tnew Set<string>([...result.keys()]),\n\t\t\t);\n\t\tawait Promise.all(\n\t\t\t[...galleryExtensions.values()].map(async (gallery) => {\n\t\t\t\ttry {\n\t\t\t\t\tconst webExtension = await this.toWebExtensionFromGallery(\n\t\t\t\t\t\tgallery,\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tisPreReleaseVersion:\n\t\t\t\t\t\t\t\tgallery.properties.isPreReleaseVersion,\n\t\t\t\t\t\t\tpreRelease: gallery.properties.isPreReleaseVersion,\n\t\t\t\t\t\t\tisBuiltin: true,\n\t\t\t\t\t\t},\n\t\t\t\t\t);\n\t\t\t\t\tresult.set(\n\t\t\t\t\t\twebExtension.identifier.id.toLowerCase(),\n\t\t\t\t\t\twebExtension,\n\t\t\t\t\t);\n\t\t\t\t} catch (error) {\n\t\t\t\t\tthis.logService.info(\n\t\t\t\t\t\t`Ignoring additional builtin extension ${gallery.identifier.id} because there is an error while converting it into web extension`,\n\t\t\t\t\t\tgetErrorMessage(error),\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}),\n\t\t);\n\t}\n\n\tprivate async getExtensionsWithDependenciesAndPackedExtensions(\n\t\ttoGet: IExtensionInfo[],\n\t\tseen: Set<string> = new Set<string>(),\n\t\tresult: Map<string, IGalleryExtension> = new Map<\n\t\t\tstring,\n\t\t\tIGalleryExtension\n\t\t>(),\n\t): Promise<Map<string, IGalleryExtension>> {\n\t\tif (toGet.length === 0) {\n\t\t\treturn result;\n\t\t}\n\t\tconst extensions = await this.galleryService.getExtensions(\n\t\t\ttoGet,\n\t\t\t{ compatible: true, targetPlatform: TargetPlatform.WEB },\n\t\t\tCancellationToken.None,\n\t\t);\n\t\tconst packsAndDependencies = new Map<string, IExtensionInfo>();\n\t\tfor (const extension of extensions) {\n\t\t\tresult.set(extension.identifier.id.toLowerCase(), extension);\n\t\t\tfor (const id of [\n\t\t\t\t...(isNonEmptyArray(extension.properties.dependencies)\n\t\t\t\t\t? extension.properties.dependencies\n\t\t\t\t\t: []),\n\t\t\t\t...(isNonEmptyArray(extension.properties.extensionPack)\n\t\t\t\t\t? extension.properties.extensionPack\n\t\t\t\t\t: []),\n\t\t\t]) {\n\t\t\t\tif (\n\t\t\t\t\t!result.has(id.toLowerCase()) &&\n\t\t\t\t\t!packsAndDependencies.has(id.toLowerCase()) &&\n\t\t\t\t\t!seen.has(id.toLowerCase())\n\t\t\t\t) {\n\t\t\t\t\tconst extensionInfo = toGet.find((e) =>\n\t\t\t\t\t\tareSameExtensions(e, extension.identifier),\n\t\t\t\t\t);\n\t\t\t\t\tpacksAndDependencies.set(id.toLowerCase(), {\n\t\t\t\t\t\tid,\n\t\t\t\t\t\tpreRelease: extensionInfo?.preRelease,\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn this.getExtensionsWithDependenciesAndPackedExtensions(\n\t\t\t[...packsAndDependencies.values()].filter(\n\t\t\t\t({ id }) => !result.has(id.toLowerCase()),\n\t\t\t),\n\t\t\tseen,\n\t\t\tresult,\n\t\t);\n\t}\n\n\tasync scanSystemExtensions(): Promise<IExtension[]> {\n\t\treturn this.readSystemExtensions();\n\t}\n\n\tasync scanUserExtensions(\n\t\tprofileLocation: URI,\n\t\tscanOptions?: ScanOptions,\n\t): Promise<IScannedExtension[]> {\n\t\tconst extensions = new Map<string, IScannedExtension>();\n\n\t\t// Custom builtin extensions defined through `additionalBuiltinExtensions` API\n\t\tconst customBuiltinExtensions =\n\t\t\tawait this.readCustomBuiltinExtensions(scanOptions);\n\t\tfor (const extension of customBuiltinExtensions) {\n\t\t\textensions.set(extension.identifier.id.toLowerCase(), extension);\n\t\t}\n\n\t\t// User Installed extensions\n\t\tconst installedExtensions = await this.scanInstalledExtensions(\n\t\t\tprofileLocation,\n\t\t\tscanOptions,\n\t\t);\n\t\tfor (const extension of installedExtensions) {\n\t\t\textensions.set(extension.identifier.id.toLowerCase(), extension);\n\t\t}\n\n\t\treturn [...extensions.values()];\n\t}\n\n\tasync scanExtensionsUnderDevelopment(): Promise<IExtension[]> {\n\t\tconst devExtensions =\n\t\t\tthis.environmentService.options?.developmentOptions?.extensions;\n\t\tconst result: IExtension[] = [];\n\t\tif (Array.isArray(devExtensions)) {\n\t\t\tawait Promise.allSettled(\n\t\t\t\tdevExtensions.map(async (devExtension) => {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tconst location = URI.revive(devExtension);\n\t\t\t\t\t\tif (URI.isUri(location)) {\n\t\t\t\t\t\t\tconst webExtension =\n\t\t\t\t\t\t\t\tawait this.toWebExtension(location);\n\t\t\t\t\t\t\tresult.push(\n\t\t\t\t\t\t\t\tawait this.toScannedExtension(\n\t\t\t\t\t\t\t\t\twebExtension,\n\t\t\t\t\t\t\t\t\tfalse,\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tthis.logService.info(\n\t\t\t\t\t\t\t\t`Skipping the extension under development ${devExtension} as it is not URI type.`,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\t\t\t\t\t} catch (error) {\n\t\t\t\t\t\tthis.logService.info(\n\t\t\t\t\t\t\t`Error while fetching the extension under development ${devExtension.toString()}.`,\n\t\t\t\t\t\t\tgetErrorMessage(error),\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t}),\n\t\t\t);\n\t\t}\n\t\treturn result;\n\t}\n\n\tasync scanExistingExtension(\n\t\textensionLocation: URI,\n\t\textensionType: ExtensionType,\n\t\tprofileLocation: URI,\n\t): Promise<IScannedExtension | null> {\n\t\tif (extensionType === ExtensionType.System) {\n\t\t\tconst systemExtensions = await this.scanSystemExtensions();\n\t\t\treturn (\n\t\t\t\tsystemExtensions.find(\n\t\t\t\t\t(e) =>\n\t\t\t\t\t\te.location.toString() === extensionLocation.toString(),\n\t\t\t\t) || null\n\t\t\t);\n\t\t}\n\t\tconst userExtensions = await this.scanUserExtensions(profileLocation);\n\t\treturn (\n\t\t\tuserExtensions.find(\n\t\t\t\t(e) => e.location.toString() === extensionLocation.toString(),\n\t\t\t) || null\n\t\t);\n\t}\n\n\tasync scanExtensionManifest(\n\t\textensionLocation: URI,\n\t): Promise<IExtensionManifest | null> {\n\t\ttry {\n\t\t\treturn await this.getExtensionManifest(extensionLocation);\n\t\t} catch (error) {\n\t\t\tthis.logService.warn(\n\t\t\t\t`Error while fetching manifest from ${extensionLocation.toString()}`,\n\t\t\t\tgetErrorMessage(error),\n\t\t\t);\n\t\t\treturn null;\n\t\t}\n\t}\n\n\tasync addExtensionFromGallery(\n\t\tgalleryExtension: IGalleryExtension,\n\t\tmetadata: Metadata,\n\t\tprofileLocation: URI,\n\t): Promise<IScannedExtension> {\n\t\tconst webExtension = await this.toWebExtensionFromGallery(\n\t\t\tgalleryExtension,\n\t\t\tmetadata,\n\t\t);\n\t\treturn this.addWebExtension(webExtension, profileLocation);\n\t}\n\n\tasync addExtension(\n\t\tlocation: URI,\n\t\tmetadata: Metadata,\n\t\tprofileLocation: URI,\n\t): Promise<IScannedExtension> {\n\t\tconst webExtension = await this.toWebExtension(\n\t\t\tlocation,\n\t\t\tundefined,\n\t\t\tundefined,\n\t\t\tundefined,\n\t\t\tundefined,\n\t\t\tundefined,\n\t\t\tundefined,\n\t\t\tmetadata,\n\t\t);\n\t\tconst extension = await this.toScannedExtension(webExtension, false);\n\t\tawait this.addToInstalledExtensions([webExtension], profileLocation);\n\t\treturn extension;\n\t}\n\n\tasync removeExtension(\n\t\textension: IScannedExtension,\n\t\tprofileLocation: URI,\n\t): Promise<void> {\n\t\tawait this.writeInstalledExtensions(\n\t\t\tprofileLocation,\n\t\t\t(installedExtensions) =>\n\t\t\t\tinstalledExtensions.filter(\n\t\t\t\t\t(installedExtension) =>\n\t\t\t\t\t\t!areSameExtensions(\n\t\t\t\t\t\t\tinstalledExtension.identifier,\n\t\t\t\t\t\t\textension.identifier,\n\t\t\t\t\t\t),\n\t\t\t\t),\n\t\t);\n\t}\n\n\tasync updateMetadata(\n\t\textension: IScannedExtension,\n\t\tmetadata: Partial<Metadata>,\n\t\tprofileLocation: URI,\n\t): Promise<IScannedExtension> {\n\t\tlet updatedExtension: IWebExtension | undefined;\n\t\tawait this.writeInstalledExtensions(\n\t\t\tprofileLocation,\n\t\t\t(installedExtensions) => {\n\t\t\t\tconst result: IWebExtension[] = [];\n\t\t\t\tfor (const installedExtension of installedExtensions) {\n\t\t\t\t\tif (\n\t\t\t\t\t\tareSameExtensions(\n\t\t\t\t\t\t\textension.identifier,\n\t\t\t\t\t\t\tinstalledExtension.identifier,\n\t\t\t\t\t\t)\n\t\t\t\t\t) {\n\t\t\t\t\t\tinstalledExtension.metadata = {\n\t\t\t\t\t\t\t...installedExtension.metadata,\n\t\t\t\t\t\t\t...metadata,\n\t\t\t\t\t\t};\n\t\t\t\t\t\tupdatedExtension = installedExtension;\n\t\t\t\t\t\tresult.push(installedExtension);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresult.push(installedExtension);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn result;\n\t\t\t},\n\t\t);\n\t\tif (!updatedExtension) {\n\t\t\tthrow new Error(\"Extension not found\");\n\t\t}\n\t\treturn this.toScannedExtension(updatedExtension, extension.isBuiltin);\n\t}\n\n\tasync copyExtensions(\n\t\tfromProfileLocation: URI,\n\t\ttoProfileLocation: URI,\n\t\tfilter: (extension: IScannedExtension) => boolean,\n\t): Promise<void> {\n\t\tconst extensionsToCopy: IWebExtension[] = [];\n\t\tconst fromWebExtensions =\n\t\t\tawait this.readInstalledExtensions(fromProfileLocation);\n\t\tawait Promise.all(\n\t\t\tfromWebExtensions.map(async (webExtension) => {\n\t\t\t\tconst scannedExtension = await this.toScannedExtension(\n\t\t\t\t\twebExtension,\n\t\t\t\t\tfalse,\n\t\t\t\t);\n\t\t\t\tif (filter(scannedExtension)) {\n\t\t\t\t\textensionsToCopy.push(webExtension);\n\t\t\t\t}\n\t\t\t}),\n\t\t);\n\t\tif (extensionsToCopy.length) {\n\t\t\tawait this.addToInstalledExtensions(\n\t\t\t\textensionsToCopy,\n\t\t\t\ttoProfileLocation,\n\t\t\t);\n\t\t}\n\t}\n\n\tprivate async addWebExtension(\n\t\twebExtension: IWebExtension,\n\t\tprofileLocation: URI,\n\t): Promise<IScannedExtension> {\n\t\tconst isSystem = !!(await this.scanSystemExtensions()).find((e) =>\n\t\t\tareSameExtensions(e.identifier, webExtension.identifier),\n\t\t);\n\t\tconst isBuiltin = !!webExtension.metadata?.isBuiltin;\n\t\tconst extension = await this.toScannedExtension(\n\t\t\twebExtension,\n\t\t\tisBuiltin,\n\t\t);\n\n\t\tif (isSystem) {\n\t\t\tawait this.writeSystemExtensionsCache((systemExtensions) => {\n\t\t\t\t// Remove the existing extension to avoid duplicates\n\t\t\t\tsystemExtensions = systemExtensions.filter(\n\t\t\t\t\t(extension) =>\n\t\t\t\t\t\t!areSameExtensions(\n\t\t\t\t\t\t\textension.identifier,\n\t\t\t\t\t\t\twebExtension.identifier,\n\t\t\t\t\t\t),\n\t\t\t\t);\n\t\t\t\tsystemExtensions.push(webExtension);\n\t\t\t\treturn systemExtensions;\n\t\t\t});\n\t\t\treturn extension;\n\t\t}\n\n\t\t// Update custom builtin extensions to custom builtin extensions cache\n\t\tif (isBuiltin) {\n\t\t\tawait this.writeCustomBuiltinExtensionsCache(\n\t\t\t\t(customBuiltinExtensions) => {\n\t\t\t\t\t// Remove the existing extension to avoid duplicates\n\t\t\t\t\tcustomBuiltinExtensions = customBuiltinExtensions.filter(\n\t\t\t\t\t\t(extension) =>\n\t\t\t\t\t\t\t!areSameExtensions(\n\t\t\t\t\t\t\t\textension.identifier,\n\t\t\t\t\t\t\t\twebExtension.identifier,\n\t\t\t\t\t\t\t),\n\t\t\t\t\t);\n\t\t\t\t\tcustomBuiltinExtensions.push(webExtension);\n\t\t\t\t\treturn customBuiltinExtensions;\n\t\t\t\t},\n\t\t\t);\n\n\t\t\tconst installedExtensions =\n\t\t\t\tawait this.readInstalledExtensions(profileLocation);\n\t\t\t// Also add to installed extensions if it is installed to update its version\n\t\t\tif (\n\t\t\t\tinstalledExtensions.some((e) =>\n\t\t\t\t\tareSameExtensions(e.identifier, webExtension.identifier),\n\t\t\t\t)\n\t\t\t) {\n\t\t\t\tawait this.addToInstalledExtensions(\n\t\t\t\t\t[webExtension],\n\t\t\t\t\tprofileLocation,\n\t\t\t\t);\n\t\t\t}\n\t\t\treturn extension;\n\t\t}\n\n\t\t// Add to installed extensions\n\t\tawait this.addToInstalledExtensions([webExtension], profileLocation);\n\t\treturn extension;\n\t}\n\n\tprivate async addToInstalledExtensions(\n\t\twebExtensions: IWebExtension[],\n\t\tprofileLocation: URI,\n\t): Promise<void> {\n\t\tawait this.writeInstalledExtensions(\n\t\t\tprofileLocation,\n\t\t\t(installedExtensions) => {\n\t\t\t\t// Remove the existing extension to avoid duplicates\n\t\t\t\tinstalledExtensions = installedExtensions.filter(\n\t\t\t\t\t(installedExtension) =>\n\t\t\t\t\t\twebExtensions.some(\n\t\t\t\t\t\t\t(extension) =>\n\t\t\t\t\t\t\t\t!areSameExtensions(\n\t\t\t\t\t\t\t\t\tinstalledExtension.identifier,\n\t\t\t\t\t\t\t\t\textension.identifier,\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t),\n\t\t\t\t);\n\t\t\t\tinstalledExtensions.push(...webExtensions);\n\t\t\t\treturn installedExtensions;\n\t\t\t},\n\t\t);\n\t}\n\n\tprivate async scanInstalledExtensions(\n\t\tprofileLocation: URI,\n\t\tscanOptions?: ScanOptions,\n\t): Promise<IScannedExtension[]> {\n\t\tlet installedExtensions =\n\t\t\tawait this.readInstalledExtensions(profileLocation);\n\n\t\t// If current profile is not a default profile, then add the application extensions to the list\n\t\tif (\n\t\t\t!this.uriIdentityService.extUri.isEqual(\n\t\t\t\tprofileLocation,\n\t\t\t\tthis.userDataProfilesService.defaultProfile.extensionsResource,\n\t\t\t)\n\t\t) {\n\t\t\t// Remove application extensions from the non default profile\n\t\t\tinstalledExtensions = installedExtensions.filter(\n\t\t\t\t(i) => !i.metadata?.isApplicationScoped,\n\t\t\t);\n\t\t\t// Add application extensions from the default profile to the list\n\t\t\tconst defaultProfileExtensions = await this.readInstalledExtensions(\n\t\t\t\tthis.userDataProfilesService.defaultProfile.extensionsResource,\n\t\t\t);\n\t\t\tinstalledExtensions.push(\n\t\t\t\t...defaultProfileExtensions.filter(\n\t\t\t\t\t(i) => i.metadata?.isApplicationScoped,\n\t\t\t\t),\n\t\t\t);\n\t\t}\n\n\t\tinstalledExtensions.sort((a, b) =>\n\t\t\ta.identifier.id < b.identifier.id\n\t\t\t\t? -1\n\t\t\t\t: a.identifier.id > b.identifier.id\n\t\t\t\t\t? 1\n\t\t\t\t\t: semver.rcompare(a.version, b.version),\n\t\t);\n\t\tconst result = new Map<string, IScannedExtension>();\n\t\tfor (const webExtension of installedExtensions) {\n\t\t\tconst existing = result.get(\n\t\t\t\twebExtension.identifier.id.toLowerCase(),\n\t\t\t);\n\t\t\tif (\n\t\t\t\texisting &&\n\t\t\t\tsemver.gt(existing.manifest.version, webExtension.version)\n\t\t\t) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tconst extension = await this.toScannedExtension(\n\t\t\t\twebExtension,\n\t\t\t\tfalse,\n\t\t\t);\n\t\t\tif (extension.isValid || !scanOptions?.skipInvalidExtensions) {\n\t\t\t\tresult.set(extension.identifier.id.toLowerCase(), extension);\n\t\t\t} else {\n\t\t\t\tthis.logService.info(\n\t\t\t\t\t`Skipping invalid installed extension ${webExtension.identifier.id}`,\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t\treturn [...result.values()];\n\t}\n\n\tprivate async toWebExtensionFromGallery(\n\t\tgalleryExtension: IGalleryExtension,\n\t\tmetadata?: Metadata,\n\t): Promise<IWebExtension> {\n\t\tconst extensionLocation =\n\t\t\tthis.extensionResourceLoaderService.getExtensionGalleryResourceURL(\n\t\t\t\t{\n\t\t\t\t\tpublisher: galleryExtension.publisher,\n\t\t\t\t\tname: galleryExtension.name,\n\t\t\t\t\tversion: galleryExtension.version,\n\t\t\t\t\ttargetPlatform:\n\t\t\t\t\t\tgalleryExtension.properties.targetPlatform ===\n\t\t\t\t\t\tTargetPlatform.WEB\n\t\t\t\t\t\t\t? TargetPlatform.WEB\n\t\t\t\t\t\t\t: undefined,\n\t\t\t\t},\n\t\t\t\t\"extension\",\n\t\t\t);\n\n\t\tif (!extensionLocation) {\n\t\t\tthrow new Error(\"No extension gallery service configured.\");\n\t\t}\n\n\t\treturn this.toWebExtensionFromExtensionGalleryResource(\n\t\t\textensionLocation,\n\t\t\tgalleryExtension.identifier,\n\t\t\tgalleryExtension.assets.readme\n\t\t\t\t? URI.parse(galleryExtension.assets.readme.uri)\n\t\t\t\t: undefined,\n\t\t\tgalleryExtension.assets.changelog\n\t\t\t\t? URI.parse(galleryExtension.assets.changelog.uri)\n\t\t\t\t: undefined,\n\t\t\tmetadata,\n\t\t);\n\t}\n\n\tprivate async toWebExtensionFromExtensionGalleryResource(\n\t\textensionLocation: URI,\n\t\tidentifier?: IExtensionIdentifier,\n\t\treadmeUri?: URI,\n\t\tchangelogUri?: URI,\n\t\tmetadata?: Metadata,\n\t): Promise<IWebExtension> {\n\t\tconst extensionResources =\n\t\t\tawait this.listExtensionResources(extensionLocation);\n\t\tconst packageNLSResources =\n\t\t\tthis.getPackageNLSResourceMapFromResources(extensionResources);\n\n\t\t// The fallback, in English, will fill in any gaps missing in the localized file.\n\t\tconst fallbackPackageNLSResource = extensionResources.find(\n\t\t\t(e) => basename(e) === \"package.nls.json\",\n\t\t);\n\t\treturn this.toWebExtension(\n\t\t\textensionLocation,\n\t\t\tidentifier,\n\t\t\tundefined,\n\t\t\tpackageNLSResources,\n\t\t\tfallbackPackageNLSResource\n\t\t\t\t? URI.parse(fallbackPackageNLSResource)\n\t\t\t\t: null,\n\t\t\treadmeUri,\n\t\t\tchangelogUri,\n\t\t\tmetadata,\n\t\t);\n\t}\n\n\tprivate getPackageNLSResourceMapFromResources(\n\t\textensionResources: string[],\n\t): Map<string, URI> {\n\t\tconst packageNLSResources = new Map<string, URI>();\n\t\textensionResources.forEach((e) => {\n\t\t\t// Grab all package.nls.{language}.json files\n\t\t\tconst regexResult = /package\\.nls\\.([\\w-]+)\\.json/.exec(\n\t\t\t\tbasename(e),\n\t\t\t);\n\t\t\tif (regexResult?.[1]) {\n\t\t\t\tpackageNLSResources.set(regexResult[1], URI.parse(e));\n\t\t\t}\n\t\t});\n\t\treturn packageNLSResources;\n\t}\n\n\tprivate async toWebExtension(\n\t\textensionLocation: URI,\n\t\tidentifier?: IExtensionIdentifier,\n\t\tmanifest?: IExtensionManifest,\n\t\tpackageNLSUris?: Map<string, URI>,\n\t\tfallbackPackageNLSUri?: URI | ITranslations | null,\n\t\treadmeUri?: URI,\n\t\tchangelogUri?: URI,\n\t\tmetadata?: Metadata,\n\t): Promise<IWebExtension> {\n\t\tif (!manifest) {\n\t\t\ttry {\n\t\t\t\tmanifest = await this.getExtensionManifest(extensionLocation);\n\t\t\t} catch (error) {\n\t\t\t\tthrow new Error(\n\t\t\t\t\t`Error while fetching manifest from the location '${extensionLocation.toString()}'. ${getErrorMessage(error)}`,\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\tif (\n\t\t\t!this.extensionManifestPropertiesService.canExecuteOnWeb(manifest)\n\t\t) {\n\t\t\tthrow new Error(\n\t\t\t\tlocalize(\n\t\t\t\t\t\"not a web extension\",\n\t\t\t\t\t\"Cannot add '{0}' because this extension is not a web extension.\",\n\t\t\t\t\tmanifest.displayName || manifest.name,\n\t\t\t\t),\n\t\t\t);\n\t\t}\n\n\t\tif (fallbackPackageNLSUri === undefined) {\n\t\t\ttry {\n\t\t\t\tfallbackPackageNLSUri = joinPath(\n\t\t\t\t\textensionLocation,\n\t\t\t\t\t\"package.nls.json\",\n\t\t\t\t);\n\t\t\t\tawait this.extensionResourceLoaderService.readExtensionResource(\n\t\t\t\t\tfallbackPackageNLSUri,\n\t\t\t\t);\n\t\t\t} catch (error) {\n\t\t\t\tfallbackPackageNLSUri = undefined;\n\t\t\t}\n\t\t}\n\t\tconst defaultManifestTranslations: ITranslations | null | undefined =\n\t\t\tfallbackPackageNLSUri\n\t\t\t\t? URI.isUri(fallbackPackageNLSUri)\n\t\t\t\t\t? await this.getTranslations(fallbackPackageNLSUri)\n\t\t\t\t\t: fallbackPackageNLSUri\n\t\t\t\t: null;\n\n\t\treturn {\n\t\t\tidentifier: {\n\t\t\t\tid: getGalleryExtensionId(manifest.publisher, manifest.name),\n\t\t\t\tuuid: identifier?.uuid,\n\t\t\t},\n\t\t\tversion: manifest.version,\n\t\t\tlocation: extensionLocation,\n\t\t\tmanifest,\n\t\t\treadmeUri,\n\t\t\tchangelogUri,\n\t\t\tpackageNLSUris,\n\t\t\tfallbackPackageNLSUri: URI.isUri(fallbackPackageNLSUri)\n\t\t\t\t? fallbackPackageNLSUri\n\t\t\t\t: undefined,\n\t\t\tdefaultManifestTranslations,\n\t\t\tmetadata,\n\t\t};\n\t}\n\n\tprivate async toScannedExtension(\n\t\twebExtension: IWebExtension,\n\t\tisBuiltin: boolean,\n\t\ttype: ExtensionType = ExtensionType.User,\n\t): Promise<IScannedExtension> {\n\t\tconst validations: [Severity, string][] = [];\n\t\tlet manifest: IRelaxedExtensionManifest | undefined =\n\t\t\twebExtension.manifest;\n\n\t\tif (!manifest) {\n\t\t\ttry {\n\t\t\t\tmanifest = await this.getExtensionManifest(\n\t\t\t\t\twebExtension.location,\n\t\t\t\t);\n\t\t\t} catch (error) {\n\t\t\t\tvalidations.push([\n\t\t\t\t\tSeverity.Error,\n\t\t\t\t\t`Error while fetching manifest from the location '${webExtension.location}'. ${getErrorMessage(error)}`,\n\t\t\t\t]);\n\t\t\t}\n\t\t}\n\n\t\tif (!manifest) {\n\t\t\tconst [publisher, name] = webExtension.identifier.id.split(\".\");\n\t\t\tmanifest = {\n\t\t\t\tname,\n\t\t\t\tpublisher,\n\t\t\t\tversion: webExtension.version,\n\t\t\t\tengines: { vscode: \"*\" },\n\t\t\t};\n\t\t}\n\n\t\tconst packageNLSUri = webExtension.packageNLSUris?.get(\n\t\t\tLanguage.value().toLowerCase(),\n\t\t);\n\t\tconst fallbackPackageNLS =\n\t\t\twebExtension.defaultManifestTranslations ??\n\t\t\twebExtension.fallbackPackageNLSUri;\n\n\t\tif (packageNLSUri) {\n\t\t\tmanifest = await this.translateManifest(\n\t\t\t\tmanifest,\n\t\t\t\tpackageNLSUri,\n\t\t\t\tfallbackPackageNLS,\n\t\t\t);\n\t\t} else if (fallbackPackageNLS) {\n\t\t\tmanifest = await this.translateManifest(\n\t\t\t\tmanifest,\n\t\t\t\tfallbackPackageNLS,\n\t\t\t);\n\t\t}\n\n\t\tconst uuid = (<IGalleryMetadata | undefined>webExtension.metadata)?.id;\n\n\t\tconst validateApiVersion =\n\t\t\tthis.extensionsEnabledWithApiProposalVersion.includes(\n\t\t\t\twebExtension.identifier.id.toLowerCase(),\n\t\t\t);\n\t\tvalidations.push(\n\t\t\t...validateExtensionManifest(\n\t\t\t\tthis.productService.version,\n\t\t\t\tthis.productService.date,\n\t\t\t\twebExtension.location,\n\t\t\t\tmanifest,\n\t\t\t\tfalse,\n\t\t\t\tvalidateApiVersion,\n\t\t\t),\n\t\t);\n\t\tlet isValid = true;\n\t\tfor (const [severity, message] of validations) {\n\t\t\tif (severity === Severity.Error) {\n\t\t\t\tisValid = false;\n\t\t\t\tthis.logService.error(message);\n\t\t\t}\n\t\t}\n\n\t\tif (manifest.enabledApiProposals && validateApiVersion) {\n\t\t\tmanifest.enabledApiProposals = parseEnabledApiProposalNames([\n\t\t\t\t...manifest.enabledApiProposals,\n\t\t\t]);\n\t\t}\n\n\t\treturn {\n\t\t\tidentifier: {\n\t\t\t\tid: webExtension.identifier.id,\n\t\t\t\tuuid: webExtension.identifier.uuid || uuid,\n\t\t\t},\n\t\t\tlocation: webExtension.location,\n\t\t\tmanifest,\n\t\t\ttype,\n\t\t\tisBuiltin,\n\t\t\treadmeUrl: webExtension.readmeUri,\n\t\t\tchangelogUrl: webExtension.changelogUri,\n\t\t\tmetadata: webExtension.metadata,\n\t\t\ttargetPlatform: TargetPlatform.WEB,\n\t\t\tvalidations,\n\t\t\tisValid,\n\t\t};\n\t}\n\n\tprivate async listExtensionResources(\n\t\textensionLocation: URI,\n\t): Promise<string[]> {\n\t\ttry {\n\t\t\tconst result =\n\t\t\t\tawait this.extensionResourceLoaderService.readExtensionResource(\n\t\t\t\t\textensionLocation,\n\t\t\t\t);\n\t\t\treturn JSON.parse(result);\n\t\t} catch (error) {\n\t\t\tthis.logService.warn(\n\t\t\t\t\"Error while fetching extension resources list\",\n\t\t\t\tgetErrorMessage(error),\n\t\t\t);\n\t\t}\n\t\treturn [];\n\t}\n\n\tprivate async translateManifest(\n\t\tmanifest: IExtensionManifest,\n\t\tnlsURL: ITranslations | URI,\n\t\tfallbackNLS?: ITranslations | URI,\n\t): Promise<IRelaxedExtensionManifest> {\n\t\ttry {\n\t\t\tconst translations = URI.isUri(nlsURL)\n\t\t\t\t? await this.getTranslations(nlsURL)\n\t\t\t\t: nlsURL;\n\t\t\tconst fallbackTranslations = URI.isUri(fallbackNLS)\n\t\t\t\t? await this.getTranslations(fallbackNLS)\n\t\t\t\t: fallbackNLS;\n\t\t\tif (translations) {\n\t\t\t\tmanifest = localizeManifest(\n\t\t\t\t\tthis.logService,\n\t\t\t\t\tmanifest,\n\t\t\t\t\ttranslations,\n\t\t\t\t\tfallbackTranslations,\n\t\t\t\t);\n\t\t\t}\n\t\t} catch (error) {\n\t\t\t/* ignore */\n\t\t}\n\t\treturn manifest;\n\t}\n\n\tprivate async getExtensionManifest(\n\t\tlocation: URI,\n\t): Promise<IExtensionManifest> {\n\t\tconst url = joinPath(location, \"package.json\");\n\t\tconst content =\n\t\t\tawait this.extensionResourceLoaderService.readExtensionResource(\n\t\t\t\turl,\n\t\t\t);\n\t\treturn JSON.parse(content);\n\t}\n\n\tprivate async getTranslations(\n\t\tnlsUrl: URI,\n\t): Promise<ITranslations | undefined> {\n\t\ttry {\n\t\t\tconst content =\n\t\t\t\tawait this.extensionResourceLoaderService.readExtensionResource(\n\t\t\t\t\tnlsUrl,\n\t\t\t\t);\n\t\t\treturn JSON.parse(content);\n\t\t} catch (error) {\n\t\t\tthis.logService.error(\n\t\t\t\t`Error while fetching translations of an extension`,\n\t\t\t\tnlsUrl.toString(),\n\t\t\t\tgetErrorMessage(error),\n\t\t\t);\n\t\t}\n\t\treturn undefined;\n\t}\n\n\tprivate async readInstalledExtensions(\n\t\tprofileLocation: URI,\n\t): Promise<IWebExtension[]> {\n\t\treturn this.withWebExtensions(profileLocation);\n\t}\n\n\tprivate writeInstalledExtensions(\n\t\tprofileLocation: URI,\n\t\tupdateFn: (extensions: IWebExtension[]) => IWebExtension[],\n\t): Promise<IWebExtension[]> {\n\t\treturn this.withWebExtensions(profileLocation, updateFn);\n\t}\n\n\tprivate readCustomBuiltinExtensionsCache(): Promise<IWebExtension[]> {\n\t\treturn this.withWebExtensions(\n\t\t\tthis.customBuiltinExtensionsCacheResource,\n\t\t);\n\t}\n\n\tprivate writeCustomBuiltinExtensionsCache(\n\t\tupdateFn: (extensions: IWebExtension[]) => IWebExtension[],\n\t): Promise<IWebExtension[]> {\n\t\treturn this.withWebExtensions(\n\t\t\tthis.customBuiltinExtensionsCacheResource,\n\t\t\tupdateFn,\n\t\t);\n\t}\n\n\tprivate readSystemExtensionsCache(): Promise<IWebExtension[]> {\n\t\treturn this.withWebExtensions(this.systemExtensionsCacheResource);\n\t}\n\n\tprivate writeSystemExtensionsCache(\n\t\tupdateFn: (extensions: IWebExtension[]) => IWebExtension[],\n\t): Promise<IWebExtension[]> {\n\t\treturn this.withWebExtensions(\n\t\t\tthis.systemExtensionsCacheResource,\n\t\t\tupdateFn,\n\t\t);\n\t}\n\n\tprivate async withWebExtensions(\n\t\tfile: URI | undefined,\n\t\tupdateFn?: (extensions: IWebExtension[]) => IWebExtension[],\n\t): Promise<IWebExtension[]> {\n\t\tif (!file) {\n\t\t\treturn [];\n\t\t}\n\t\treturn this.getResourceAccessQueue(file).queue(async () => {\n\t\t\tlet webExtensions: IWebExtension[] = [];\n\n\t\t\t// Read\n\t\t\ttry {\n\t\t\t\tconst content = await this.fileService.readFile(file);\n\t\t\t\tconst storedWebExtensions: IStoredWebExtension[] = JSON.parse(\n\t\t\t\t\tcontent.value.toString(),\n\t\t\t\t);\n\t\t\t\tfor (const e of storedWebExtensions) {\n\t\t\t\t\tif (!e.location || !e.identifier || !e.version) {\n\t\t\t\t\t\tthis.logService.info(\n\t\t\t\t\t\t\t\"Ignoring invalid extension while scanning\",\n\t\t\t\t\t\t\tstoredWebExtensions,\n\t\t\t\t\t\t);\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\tlet packageNLSUris: Map<string, URI> | undefined;\n\t\t\t\t\tif (e.packageNLSUris) {\n\t\t\t\t\t\tpackageNLSUris = new Map<string, URI>();\n\t\t\t\t\t\tObject.entries(e.packageNLSUris).forEach(\n\t\t\t\t\t\t\t([key, value]) =>\n\t\t\t\t\t\t\t\tpackageNLSUris!.set(key, URI.revive(value)),\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\n\t\t\t\t\twebExtensions.push({\n\t\t\t\t\t\tidentifier: e.identifier,\n\t\t\t\t\t\tversion: e.version,\n\t\t\t\t\t\tlocation: URI.revive(e.location),\n\t\t\t\t\t\tmanifest: e.manifest,\n\t\t\t\t\t\treadmeUri: URI.revive(e.readmeUri),\n\t\t\t\t\t\tchangelogUri: URI.revive(e.changelogUri),\n\t\t\t\t\t\tpackageNLSUris,\n\t\t\t\t\t\tfallbackPackageNLSUri: URI.revive(\n\t\t\t\t\t\t\te.fallbackPackageNLSUri,\n\t\t\t\t\t\t),\n\t\t\t\t\t\tdefaultManifestTranslations:\n\t\t\t\t\t\t\te.defaultManifestTranslations,\n\t\t\t\t\t\tpackageNLSUri: URI.revive(e.packageNLSUri),\n\t\t\t\t\t\tmetadata: e.metadata,\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\ttry {\n\t\t\t\t\twebExtensions = await this.migrateWebExtensions(\n\t\t\t\t\t\twebExtensions,\n\t\t\t\t\t\tfile,\n\t\t\t\t\t);\n\t\t\t\t} catch (error) {\n\t\t\t\t\tthis.logService.error(\n\t\t\t\t\t\t`Error while migrating scanned extensions in ${file.toString()}`,\n\t\t\t\t\t\tgetErrorMessage(error),\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t} catch (error) {\n\t\t\t\t/* Ignore */\n\t\t\t\tif (\n\t\t\t\t\t(<FileOperationError>error).fileOperationResult !==\n\t\t\t\t\tFileOperationResult.FILE_NOT_FOUND\n\t\t\t\t) {\n\t\t\t\t\tthis.logService.error(error);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Update\n\t\t\tif (updateFn) {\n\t\t\t\tawait this.storeWebExtensions(\n\t\t\t\t\t(webExtensions = updateFn(webExtensions)),\n\t\t\t\t\tfile,\n\t\t\t\t);\n\t\t\t}\n\n\t\t\treturn webExtensions;\n\t\t});\n\t}\n\n\tprivate async migrateWebExtensions(\n\t\twebExtensions: IWebExtension[],\n\t\tfile: URI,\n\t): Promise<IWebExtension[]> {\n\t\tlet update = false;\n\t\twebExtensions = await Promise.all(\n\t\t\twebExtensions.map(async (webExtension) => {\n\t\t\t\tif (!webExtension.manifest) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\twebExtension.manifest = await this.getExtensionManifest(\n\t\t\t\t\t\t\twebExtension.location,\n\t\t\t\t\t\t);\n\t\t\t\t\t\tupdate = true;\n\t\t\t\t\t} catch (error) {\n\t\t\t\t\t\tthis.logService.error(\n\t\t\t\t\t\t\t`Error while updating manifest of an extension in ${file.toString()}`,\n\t\t\t\t\t\t\twebExtension.identifier.id,\n\t\t\t\t\t\t\tgetErrorMessage(error),\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (isUndefined(webExtension.defaultManifestTranslations)) {\n\t\t\t\t\tif (webExtension.fallbackPackageNLSUri) {\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tconst content =\n\t\t\t\t\t\t\t\tawait this.extensionResourceLoaderService.readExtensionResource(\n\t\t\t\t\t\t\t\t\twebExtension.fallbackPackageNLSUri,\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\twebExtension.defaultManifestTranslations =\n\t\t\t\t\t\t\t\tJSON.parse(content);\n\t\t\t\t\t\t\tupdate = true;\n\t\t\t\t\t\t} catch (error) {\n\t\t\t\t\t\t\tthis.logService.error(\n\t\t\t\t\t\t\t\t`Error while fetching default manifest translations of an extension`,\n\t\t\t\t\t\t\t\twebExtension.identifier.id,\n\t\t\t\t\t\t\t\tgetErrorMessage(error),\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tupdate = true;\n\t\t\t\t\t\twebExtension.defaultManifestTranslations = null;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tconst migratedLocation =\n\t\t\t\t\tmigratePlatformSpecificExtensionGalleryResourceURL(\n\t\t\t\t\t\twebExtension.location,\n\t\t\t\t\t\tTargetPlatform.WEB,\n\t\t\t\t\t);\n\t\t\t\tif (migratedLocation) {\n\t\t\t\t\tupdate = true;\n\t\t\t\t\twebExtension.location = migratedLocation;\n\t\t\t\t}\n\t\t\t\tif (\n\t\t\t\t\tisUndefined(webExtension.metadata?.hasPreReleaseVersion) &&\n\t\t\t\t\twebExtension.metadata?.preRelease\n\t\t\t\t) {\n\t\t\t\t\tupdate = true;\n\t\t\t\t\twebExtension.metadata.hasPreReleaseVersion = true;\n\t\t\t\t}\n\t\t\t\treturn webExtension;\n\t\t\t}),\n\t\t);\n\t\tif (update) {\n\t\t\tawait this.storeWebExtensions(webExtensions, file);\n\t\t}\n\t\treturn webExtensions;\n\t}\n\n\tprivate async storeWebExtensions(\n\t\twebExtensions: IWebExtension[],\n\t\tfile: URI,\n\t): Promise<void> {\n\t\tfunction toStringDictionary(\n\t\t\tdictionary: Map<string, URI> | undefined,\n\t\t): IStringDictionary<UriComponents> | undefined {\n\t\t\tif (!dictionary) {\n\t\t\t\treturn undefined;\n\t\t\t}\n\t\t\tconst result: IStringDictionary<UriComponents> =\n\t\t\t\tObject.create(null);\n\t\t\tdictionary.forEach((value, key) => (result[key] = value.toJSON()));\n\t\t\treturn result;\n\t\t}\n\t\tconst storedWebExtensions: IStoredWebExtension[] = webExtensions.map(\n\t\t\t(e) => ({\n\t\t\t\tidentifier: e.identifier,\n\t\t\t\tversion: e.version,\n\t\t\t\tmanifest: e.manifest,\n\t\t\t\tlocation: e.location.toJSON(),\n\t\t\t\treadmeUri: e.readmeUri?.toJSON(),\n\t\t\t\tchangelogUri: e.changelogUri?.toJSON(),\n\t\t\t\tpackageNLSUris: toStringDictionary(e.packageNLSUris),\n\t\t\t\tdefaultManifestTranslations: e.defaultManifestTranslations,\n\t\t\t\tfallbackPackageNLSUri: e.fallbackPackageNLSUri?.toJSON(),\n\t\t\t\tmetadata: e.metadata,\n\t\t\t}),\n\t\t);\n\t\tawait this.fileService.writeFile(\n\t\t\tfile,\n\t\t\tVSBuffer.fromString(JSON.stringify(storedWebExtensions)),\n\t\t);\n\t}\n\n\tprivate getResourceAccessQueue(file: URI): Queue<IWebExtension[]> {\n\t\tlet resourceQueue = this.resourcesAccessQueueMap.get(file);\n\t\tif (!resourceQueue) {\n\t\t\tthis.resourcesAccessQueueMap.set(\n\t\t\t\tfile,\n\t\t\t\t(resourceQueue = new Queue<IWebExtension[]>()),\n\t\t\t);\n\t\t}\n\t\treturn resourceQueue;\n\t}\n}\n\nif (isWeb) {\n\tregisterAction2(\n\t\tclass extends Action2 {\n\t\t\tconstructor() {\n\t\t\t\tsuper({\n\t\t\t\t\tid: \"workbench.extensions.action.openInstalledWebExtensionsResource\",\n\t\t\t\t\ttitle: localize2(\n\t\t\t\t\t\t\"openInstalledWebExtensionsResource\",\n\t\t\t\t\t\t\"Open Installed Web Extensions Resource\",\n\t\t\t\t\t),\n\t\t\t\t\tcategory: Categories.Developer,\n\t\t\t\t\tf1: true,\n\t\t\t\t\tprecondition: IsWebContext,\n\t\t\t\t});\n\t\t\t}\n\t\t\trun(serviceAccessor: ServicesAccessor): void {\n\t\t\t\tconst editorService = serviceAccessor.get(IEditorService);\n\t\t\t\tconst userDataProfileService = serviceAccessor.get(\n\t\t\t\t\tIUserDataProfileService,\n\t\t\t\t);\n\t\t\t\teditorService.openEditor({\n\t\t\t\t\tresource:\n\t\t\t\t\t\tuserDataProfileService.currentProfile\n\t\t\t\t\t\t\t.extensionsResource,\n\t\t\t\t});\n\t\t\t}\n\t\t},\n\t);\n}\n\nregisterSingleton(\n\tIWebExtensionsScannerService,\n\tWebExtensionsScannerService,\n\tInstantiationType.Delayed,\n);\n"],
  "mappings": "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",
  "names": ["extension"]
}
