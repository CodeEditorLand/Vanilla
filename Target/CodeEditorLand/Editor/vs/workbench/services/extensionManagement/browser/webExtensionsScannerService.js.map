{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/extensionManagement/browser/webExtensionsScannerService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IBuiltinExtensionsScannerService, ExtensionType, IExtensionIdentifier, IExtension, IExtensionManifest, TargetPlatform, IRelaxedExtensionManifest, parseEnabledApiProposalNames } from '../../../../platform/extensions/common/extensions.js';\nimport { IBrowserWorkbenchEnvironmentService } from '../../environment/browser/environmentService.js';\nimport { IScannedExtension, IWebExtensionsScannerService, ScanOptions } from '../common/extensionManagement.js';\nimport { isWeb, Language } from '../../../../base/common/platform.js';\nimport { InstantiationType, registerSingleton } from '../../../../platform/instantiation/common/extensions.js';\nimport { joinPath } from '../../../../base/common/resources.js';\nimport { URI, UriComponents } from '../../../../base/common/uri.js';\nimport { FileOperationError, FileOperationResult, IFileService } from '../../../../platform/files/common/files.js';\nimport { Queue } from '../../../../base/common/async.js';\nimport { VSBuffer } from '../../../../base/common/buffer.js';\nimport { ILogService } from '../../../../platform/log/common/log.js';\nimport { CancellationToken } from '../../../../base/common/cancellation.js';\nimport { IExtensionGalleryService, IExtensionInfo, IGalleryExtension, IGalleryMetadata, Metadata } from '../../../../platform/extensionManagement/common/extensionManagement.js';\nimport { areSameExtensions, getGalleryExtensionId, getExtensionId } from '../../../../platform/extensionManagement/common/extensionManagementUtil.js';\nimport { Disposable } from '../../../../base/common/lifecycle.js';\nimport { ITranslations, localizeManifest } from '../../../../platform/extensionManagement/common/extensionNls.js';\nimport { localize, localize2 } from '../../../../nls.js';\nimport * as semver from '../../../../base/common/semver/semver.js';\nimport { isString, isUndefined } from '../../../../base/common/types.js';\nimport { getErrorMessage } from '../../../../base/common/errors.js';\nimport { ResourceMap } from '../../../../base/common/map.js';\nimport { IExtensionManifestPropertiesService } from '../../extensions/common/extensionManifestPropertiesService.js';\nimport { IExtensionResourceLoaderService, migratePlatformSpecificExtensionGalleryResourceURL } from '../../../../platform/extensionResourceLoader/common/extensionResourceLoader.js';\nimport { Action2, registerAction2 } from '../../../../platform/actions/common/actions.js';\nimport { Categories } from '../../../../platform/action/common/actionCommonCategories.js';\nimport { IsWebContext } from '../../../../platform/contextkey/common/contextkeys.js';\nimport { IEditorService } from '../../editor/common/editorService.js';\nimport { ServicesAccessor } from '../../../../platform/instantiation/common/instantiation.js';\nimport { basename } from '../../../../base/common/path.js';\nimport { IExtensionStorageService } from '../../../../platform/extensionManagement/common/extensionStorage.js';\nimport { isNonEmptyArray } from '../../../../base/common/arrays.js';\nimport { ILifecycleService, LifecyclePhase } from '../../lifecycle/common/lifecycle.js';\nimport { IStorageService, StorageScope, StorageTarget } from '../../../../platform/storage/common/storage.js';\nimport { IProductService } from '../../../../platform/product/common/productService.js';\nimport { validateExtensionManifest } from '../../../../platform/extensions/common/extensionValidator.js';\nimport Severity from '../../../../base/common/severity.js';\nimport { IStringDictionary } from '../../../../base/common/collections.js';\nimport { IUserDataProfileService } from '../../userDataProfile/common/userDataProfile.js';\nimport { IUserDataProfilesService } from '../../../../platform/userDataProfile/common/userDataProfile.js';\nimport { IUriIdentityService } from '../../../../platform/uriIdentity/common/uriIdentity.js';\n\ntype GalleryExtensionInfo = { readonly id: string; preRelease?: boolean; migrateStorageFrom?: string };\ntype ExtensionInfo = { readonly id: string; preRelease: boolean };\n\nfunction isGalleryExtensionInfo(obj: unknown): obj is GalleryExtensionInfo {\n\tconst galleryExtensionInfo = obj as GalleryExtensionInfo | undefined;\n\treturn typeof galleryExtensionInfo?.id === 'string'\n\t\t&& (galleryExtensionInfo.preRelease === undefined || typeof galleryExtensionInfo.preRelease === 'boolean')\n\t\t&& (galleryExtensionInfo.migrateStorageFrom === undefined || typeof galleryExtensionInfo.migrateStorageFrom === 'string');\n}\n\nfunction isUriComponents(thing: unknown): thing is UriComponents {\n\tif (!thing) {\n\t\treturn false;\n\t}\n\treturn isString((<any>thing).path) &&\n\t\tisString((<any>thing).scheme);\n}\n\ninterface IStoredWebExtension {\n\treadonly identifier: IExtensionIdentifier;\n\treadonly version: string;\n\treadonly location: UriComponents;\n\treadonly manifest?: IExtensionManifest;\n\treadonly readmeUri?: UriComponents;\n\treadonly changelogUri?: UriComponents;\n\t// deprecated in favor of packageNLSUris & fallbackPackageNLSUri\n\treadonly packageNLSUri?: UriComponents;\n\treadonly packageNLSUris?: IStringDictionary<UriComponents>;\n\treadonly fallbackPackageNLSUri?: UriComponents;\n\treadonly defaultManifestTranslations?: ITranslations | null;\n\treadonly metadata?: Metadata;\n}\n\ninterface IWebExtension {\n\tidentifier: IExtensionIdentifier;\n\tversion: string;\n\tlocation: URI;\n\tmanifest?: IExtensionManifest;\n\treadmeUri?: URI;\n\tchangelogUri?: URI;\n\t// deprecated in favor of packageNLSUris & fallbackPackageNLSUri\n\tpackageNLSUri?: URI;\n\tpackageNLSUris?: Map<string, URI>;\n\tfallbackPackageNLSUri?: URI;\n\tdefaultManifestTranslations?: ITranslations | null;\n\tmetadata?: Metadata;\n}\n\nexport class WebExtensionsScannerService extends Disposable implements IWebExtensionsScannerService {\n\n\tdeclare readonly _serviceBrand: undefined;\n\n\tprivate readonly systemExtensionsCacheResource: URI | undefined = undefined;\n\tprivate readonly customBuiltinExtensionsCacheResource: URI | undefined = undefined;\n\tprivate readonly resourcesAccessQueueMap = new ResourceMap<Queue<IWebExtension[]>>();\n\tprivate readonly extensionsEnabledWithApiProposalVersion: string[];\n\n\tconstructor(\n\t\t@IBrowserWorkbenchEnvironmentService private readonly environmentService: IBrowserWorkbenchEnvironmentService,\n\t\t@IBuiltinExtensionsScannerService private readonly builtinExtensionsScannerService: IBuiltinExtensionsScannerService,\n\t\t@IFileService private readonly fileService: IFileService,\n\t\t@ILogService private readonly logService: ILogService,\n\t\t@IExtensionGalleryService private readonly galleryService: IExtensionGalleryService,\n\t\t@IExtensionManifestPropertiesService private readonly extensionManifestPropertiesService: IExtensionManifestPropertiesService,\n\t\t@IExtensionResourceLoaderService private readonly extensionResourceLoaderService: IExtensionResourceLoaderService,\n\t\t@IExtensionStorageService private readonly extensionStorageService: IExtensionStorageService,\n\t\t@IStorageService private readonly storageService: IStorageService,\n\t\t@IProductService private readonly productService: IProductService,\n\t\t@IUserDataProfilesService private readonly userDataProfilesService: IUserDataProfilesService,\n\t\t@IUriIdentityService private readonly uriIdentityService: IUriIdentityService,\n\t\t@ILifecycleService lifecycleService: ILifecycleService,\n\t) {\n\t\tsuper();\n\t\tif (isWeb) {\n\t\t\tthis.systemExtensionsCacheResource = joinPath(environmentService.userRoamingDataHome, 'systemExtensionsCache.json');\n\t\t\tthis.customBuiltinExtensionsCacheResource = joinPath(environmentService.userRoamingDataHome, 'customBuiltinExtensionsCache.json');\n\n\t\t\t// Eventually update caches\n\t\t\tlifecycleService.when(LifecyclePhase.Eventually).then(() => this.updateCaches());\n\t\t}\n\t\tthis.extensionsEnabledWithApiProposalVersion = productService.extensionsEnabledWithApiProposalVersion?.map(id => id.toLowerCase()) ?? [];\n\t}\n\n\tprivate _customBuiltinExtensionsInfoPromise: Promise<{ extensions: ExtensionInfo[]; extensionsToMigrate: [string, string][]; extensionLocations: URI[]; extensionGalleryResources: URI[] }> | undefined;\n\tprivate readCustomBuiltinExtensionsInfoFromEnv(): Promise<{ extensions: ExtensionInfo[]; extensionsToMigrate: [string, string][]; extensionLocations: URI[]; extensionGalleryResources: URI[] }> {\n\t\tif (!this._customBuiltinExtensionsInfoPromise) {\n\t\t\tthis._customBuiltinExtensionsInfoPromise = (async () => {\n\t\t\t\tlet extensions: ExtensionInfo[] = [];\n\t\t\t\tconst extensionLocations: URI[] = [];\n\t\t\t\tconst extensionGalleryResources: URI[] = [];\n\t\t\t\tconst extensionsToMigrate: [string, string][] = [];\n\t\t\t\tconst customBuiltinExtensionsInfo = this.environmentService.options && Array.isArray(this.environmentService.options.additionalBuiltinExtensions)\n\t\t\t\t\t? this.environmentService.options.additionalBuiltinExtensions.map(additionalBuiltinExtension => isString(additionalBuiltinExtension) ? { id: additionalBuiltinExtension } : additionalBuiltinExtension)\n\t\t\t\t\t: [];\n\t\t\t\tfor (const e of customBuiltinExtensionsInfo) {\n\t\t\t\t\tif (isGalleryExtensionInfo(e)) {\n\t\t\t\t\t\textensions.push({ id: e.id, preRelease: !!e.preRelease });\n\t\t\t\t\t\tif (e.migrateStorageFrom) {\n\t\t\t\t\t\t\textensionsToMigrate.push([e.migrateStorageFrom, e.id]);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if (isUriComponents(e)) {\n\t\t\t\t\t\tconst extensionLocation = URI.revive(e);\n\t\t\t\t\t\tif (this.extensionResourceLoaderService.isExtensionGalleryResource(extensionLocation)) {\n\t\t\t\t\t\t\textensionGalleryResources.push(extensionLocation);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\textensionLocations.push(extensionLocation);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (extensions.length) {\n\t\t\t\t\textensions = await this.checkAdditionalBuiltinExtensions(extensions);\n\t\t\t\t}\n\t\t\t\tif (extensions.length) {\n\t\t\t\t\tthis.logService.info('Found additional builtin gallery extensions in env', extensions);\n\t\t\t\t}\n\t\t\t\tif (extensionLocations.length) {\n\t\t\t\t\tthis.logService.info('Found additional builtin location extensions in env', extensionLocations.map(e => e.toString()));\n\t\t\t\t}\n\t\t\t\tif (extensionGalleryResources.length) {\n\t\t\t\t\tthis.logService.info('Found additional builtin extension gallery resources in env', extensionGalleryResources.map(e => e.toString()));\n\t\t\t\t}\n\t\t\t\treturn { extensions, extensionsToMigrate, extensionLocations, extensionGalleryResources };\n\t\t\t})();\n\t\t}\n\t\treturn this._customBuiltinExtensionsInfoPromise;\n\t}\n\n\tprivate async checkAdditionalBuiltinExtensions(extensions: ExtensionInfo[]): Promise<ExtensionInfo[]> {\n\t\tconst extensionsControlManifest = await this.galleryService.getExtensionsControlManifest();\n\t\tconst result: ExtensionInfo[] = [];\n\t\tfor (const extension of extensions) {\n\t\t\tif (extensionsControlManifest.malicious.some(e => areSameExtensions(e, { id: extension.id }))) {\n\t\t\t\tthis.logService.info(`Checking additional builtin extensions: Ignoring '${extension.id}' because it is reported to be malicious.`);\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tconst deprecationInfo = extensionsControlManifest.deprecated[extension.id.toLowerCase()];\n\t\t\tif (deprecationInfo?.extension?.autoMigrate) {\n\t\t\t\tconst preReleaseExtensionId = deprecationInfo.extension.id;\n\t\t\t\tthis.logService.info(`Checking additional builtin extensions: '${extension.id}' is deprecated, instead using '${preReleaseExtensionId}'`);\n\t\t\t\tresult.push({ id: preReleaseExtensionId, preRelease: !!extension.preRelease });\n\t\t\t} else {\n\t\t\t\tresult.push(extension);\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n\n\t/**\n\t * All system extensions bundled with the product\n\t */\n\tprivate async readSystemExtensions(): Promise<IExtension[]> {\n\t\tconst systemExtensions = await this.builtinExtensionsScannerService.scanBuiltinExtensions();\n\t\tconst cachedSystemExtensions = await Promise.all((await this.readSystemExtensionsCache()).map(e => this.toScannedExtension(e, true, ExtensionType.System)));\n\n\t\tconst result = new Map<string, IExtension>();\n\t\tfor (const extension of [...systemExtensions, ...cachedSystemExtensions]) {\n\t\t\tconst existing = result.get(extension.identifier.id.toLowerCase());\n\t\t\tif (existing) {\n\t\t\t\t// Incase there are duplicates always take the latest version\n\t\t\t\tif (semver.gt(existing.manifest.version, extension.manifest.version)) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t}\n\t\t\tresult.set(extension.identifier.id.toLowerCase(), extension);\n\t\t}\n\t\treturn [...result.values()];\n\t}\n\n\t/**\n\t * All extensions defined via `additionalBuiltinExtensions` API\n\t */\n\tprivate async readCustomBuiltinExtensions(scanOptions?: ScanOptions): Promise<IScannedExtension[]> {\n\t\tconst [customBuiltinExtensionsFromLocations, customBuiltinExtensionsFromGallery] = await Promise.all([\n\t\t\tthis.getCustomBuiltinExtensionsFromLocations(scanOptions),\n\t\t\tthis.getCustomBuiltinExtensionsFromGallery(scanOptions),\n\t\t]);\n\t\tconst customBuiltinExtensions: IScannedExtension[] = [...customBuiltinExtensionsFromLocations, ...customBuiltinExtensionsFromGallery];\n\t\tawait this.migrateExtensionsStorage(customBuiltinExtensions);\n\t\treturn customBuiltinExtensions;\n\t}\n\n\tprivate async getCustomBuiltinExtensionsFromLocations(scanOptions?: ScanOptions): Promise<IScannedExtension[]> {\n\t\tconst { extensionLocations } = await this.readCustomBuiltinExtensionsInfoFromEnv();\n\t\tif (!extensionLocations.length) {\n\t\t\treturn [];\n\t\t}\n\t\tconst result: IScannedExtension[] = [];\n\t\tawait Promise.allSettled(extensionLocations.map(async extensionLocation => {\n\t\t\ttry {\n\t\t\t\tconst webExtension = await this.toWebExtension(extensionLocation);\n\t\t\t\tconst extension = await this.toScannedExtension(webExtension, true);\n\t\t\t\tif (extension.isValid || !scanOptions?.skipInvalidExtensions) {\n\t\t\t\t\tresult.push(extension);\n\t\t\t\t} else {\n\t\t\t\t\tthis.logService.info(`Skipping invalid additional builtin extension ${webExtension.identifier.id}`);\n\t\t\t\t}\n\t\t\t} catch (error) {\n\t\t\t\tthis.logService.info(`Error while fetching the additional builtin extension ${extensionLocation.toString()}.`, getErrorMessage(error));\n\t\t\t}\n\t\t}));\n\t\treturn result;\n\t}\n\n\tprivate async getCustomBuiltinExtensionsFromGallery(scanOptions?: ScanOptions): Promise<IScannedExtension[]> {\n\t\tif (!this.galleryService.isEnabled()) {\n\t\t\tthis.logService.info('Ignoring fetching additional builtin extensions from gallery as it is disabled.');\n\t\t\treturn [];\n\t\t}\n\t\tconst result: IScannedExtension[] = [];\n\t\tconst { extensions, extensionGalleryResources } = await this.readCustomBuiltinExtensionsInfoFromEnv();\n\t\ttry {\n\t\t\tconst cacheValue = JSON.stringify({\n\t\t\t\textensions: extensions.sort((a, b) => a.id.localeCompare(b.id)),\n\t\t\t\textensionGalleryResources: extensionGalleryResources.map(e => e.toString()).sort()\n\t\t\t});\n\t\t\tconst useCache = this.storageService.get('additionalBuiltinExtensions', StorageScope.APPLICATION, '{}') === cacheValue;\n\t\t\tconst webExtensions = await (useCache ? this.getCustomBuiltinExtensionsFromCache() : this.updateCustomBuiltinExtensionsCache());\n\t\t\tif (webExtensions.length) {\n\t\t\t\tawait Promise.all(webExtensions.map(async webExtension => {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tconst extension = await this.toScannedExtension(webExtension, true);\n\t\t\t\t\t\tif (extension.isValid || !scanOptions?.skipInvalidExtensions) {\n\t\t\t\t\t\t\tresult.push(extension);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tthis.logService.info(`Skipping invalid additional builtin gallery extension ${webExtension.identifier.id}`);\n\t\t\t\t\t\t}\n\t\t\t\t\t} catch (error) {\n\t\t\t\t\t\tthis.logService.info(`Ignoring additional builtin extension ${webExtension.identifier.id} because there is an error while converting it into scanned extension`, getErrorMessage(error));\n\t\t\t\t\t}\n\t\t\t\t}));\n\t\t\t}\n\t\t\tthis.storageService.store('additionalBuiltinExtensions', cacheValue, StorageScope.APPLICATION, StorageTarget.MACHINE);\n\t\t} catch (error) {\n\t\t\tthis.logService.info('Ignoring following additional builtin extensions as there is an error while fetching them from gallery', extensions.map(({ id }) => id), getErrorMessage(error));\n\t\t}\n\t\treturn result;\n\t}\n\n\tprivate async getCustomBuiltinExtensionsFromCache(): Promise<IWebExtension[]> {\n\t\tconst cachedCustomBuiltinExtensions = await this.readCustomBuiltinExtensionsCache();\n\t\tconst webExtensionsMap = new Map<string, IWebExtension>();\n\t\tfor (const webExtension of cachedCustomBuiltinExtensions) {\n\t\t\tconst existing = webExtensionsMap.get(webExtension.identifier.id.toLowerCase());\n\t\t\tif (existing) {\n\t\t\t\t// Incase there are duplicates always take the latest version\n\t\t\t\tif (semver.gt(existing.version, webExtension.version)) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t}\n\t\t\t/* Update preRelease flag in the cache - https://github.com/microsoft/vscode/issues/142831 */\n\t\t\tif (webExtension.metadata?.isPreReleaseVersion && !webExtension.metadata?.preRelease) {\n\t\t\t\twebExtension.metadata.preRelease = true;\n\t\t\t}\n\t\t\twebExtensionsMap.set(webExtension.identifier.id.toLowerCase(), webExtension);\n\t\t}\n\t\treturn [...webExtensionsMap.values()];\n\t}\n\n\tprivate _migrateExtensionsStoragePromise: Promise<void> | undefined;\n\tprivate async migrateExtensionsStorage(customBuiltinExtensions: IExtension[]): Promise<void> {\n\t\tif (!this._migrateExtensionsStoragePromise) {\n\t\t\tthis._migrateExtensionsStoragePromise = (async () => {\n\t\t\t\tconst { extensionsToMigrate } = await this.readCustomBuiltinExtensionsInfoFromEnv();\n\t\t\t\tif (!extensionsToMigrate.length) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tconst fromExtensions = await this.galleryService.getExtensions(extensionsToMigrate.map(([id]) => ({ id })), CancellationToken.None);\n\t\t\t\ttry {\n\t\t\t\t\tawait Promise.allSettled(extensionsToMigrate.map(async ([from, to]) => {\n\t\t\t\t\t\tconst toExtension = customBuiltinExtensions.find(extension => areSameExtensions(extension.identifier, { id: to }));\n\t\t\t\t\t\tif (toExtension) {\n\t\t\t\t\t\t\tconst fromExtension = fromExtensions.find(extension => areSameExtensions(extension.identifier, { id: from }));\n\t\t\t\t\t\t\tconst fromExtensionManifest = fromExtension ? await this.galleryService.getManifest(fromExtension, CancellationToken.None) : null;\n\t\t\t\t\t\t\tconst fromExtensionId = fromExtensionManifest ? getExtensionId(fromExtensionManifest.publisher, fromExtensionManifest.name) : from;\n\t\t\t\t\t\t\tconst toExtensionId = getExtensionId(toExtension.manifest.publisher, toExtension.manifest.name);\n\t\t\t\t\t\t\tthis.extensionStorageService.addToMigrationList(fromExtensionId, toExtensionId);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tthis.logService.info(`Skipped migrating extension storage from '${from}' to '${to}', because the '${to}' extension is not found.`);\n\t\t\t\t\t\t}\n\t\t\t\t\t}));\n\t\t\t\t} catch (error) {\n\t\t\t\t\tthis.logService.error(error);\n\t\t\t\t}\n\t\t\t})();\n\t\t}\n\t\treturn this._migrateExtensionsStoragePromise;\n\t}\n\n\tprivate async updateCaches(): Promise<void> {\n\t\tawait this.updateSystemExtensionsCache();\n\t\tawait this.updateCustomBuiltinExtensionsCache();\n\t}\n\n\tprivate async updateSystemExtensionsCache(): Promise<void> {\n\t\tconst systemExtensions = await this.builtinExtensionsScannerService.scanBuiltinExtensions();\n\t\tconst cachedSystemExtensions = (await this.readSystemExtensionsCache())\n\t\t\t.filter(cached => {\n\t\t\t\tconst systemExtension = systemExtensions.find(e => areSameExtensions(e.identifier, cached.identifier));\n\t\t\t\treturn systemExtension && semver.gt(cached.version, systemExtension.manifest.version);\n\t\t\t});\n\t\tawait this.writeSystemExtensionsCache(() => cachedSystemExtensions);\n\t}\n\n\tprivate _updateCustomBuiltinExtensionsCachePromise: Promise<IWebExtension[]> | undefined;\n\tprivate async updateCustomBuiltinExtensionsCache(): Promise<IWebExtension[]> {\n\t\tif (!this._updateCustomBuiltinExtensionsCachePromise) {\n\t\t\tthis._updateCustomBuiltinExtensionsCachePromise = (async () => {\n\t\t\t\tthis.logService.info('Updating additional builtin extensions cache');\n\t\t\t\tconst { extensions, extensionGalleryResources } = await this.readCustomBuiltinExtensionsInfoFromEnv();\n\t\t\t\tconst [galleryWebExtensions, extensionGalleryResourceWebExtensions] = await Promise.all([\n\t\t\t\t\tthis.resolveBuiltinGalleryExtensions(extensions),\n\t\t\t\t\tthis.resolveBuiltinExtensionGalleryResources(extensionGalleryResources)\n\t\t\t\t]);\n\t\t\t\tconst webExtensionsMap = new Map<string, IWebExtension>();\n\t\t\t\tfor (const webExtension of [...galleryWebExtensions, ...extensionGalleryResourceWebExtensions]) {\n\t\t\t\t\twebExtensionsMap.set(webExtension.identifier.id.toLowerCase(), webExtension);\n\t\t\t\t}\n\t\t\t\tawait this.resolveDependenciesAndPackedExtensions(extensionGalleryResourceWebExtensions, webExtensionsMap);\n\t\t\t\tconst webExtensions = [...webExtensionsMap.values()];\n\t\t\t\tawait this.writeCustomBuiltinExtensionsCache(() => webExtensions);\n\t\t\t\treturn webExtensions;\n\t\t\t})();\n\t\t}\n\t\treturn this._updateCustomBuiltinExtensionsCachePromise;\n\t}\n\n\tprivate async resolveBuiltinExtensionGalleryResources(extensionGalleryResources: URI[]): Promise<IWebExtension[]> {\n\t\tif (extensionGalleryResources.length === 0) {\n\t\t\treturn [];\n\t\t}\n\t\tconst result = new Map<string, IWebExtension>();\n\t\tconst extensionInfos: IExtensionInfo[] = [];\n\t\tawait Promise.all(extensionGalleryResources.map(async extensionGalleryResource => {\n\t\t\ttry {\n\t\t\t\tconst webExtension = await this.toWebExtensionFromExtensionGalleryResource(extensionGalleryResource);\n\t\t\t\tresult.set(webExtension.identifier.id.toLowerCase(), webExtension);\n\t\t\t\textensionInfos.push({ id: webExtension.identifier.id, version: webExtension.version });\n\t\t\t} catch (error) {\n\t\t\t\tthis.logService.info(`Ignoring additional builtin extension from gallery resource ${extensionGalleryResource.toString()} because there is an error while converting it into web extension`, getErrorMessage(error));\n\t\t\t}\n\t\t}));\n\t\tconst galleryExtensions = await this.galleryService.getExtensions(extensionInfos, CancellationToken.None);\n\t\tfor (const galleryExtension of galleryExtensions) {\n\t\t\tconst webExtension = result.get(galleryExtension.identifier.id.toLowerCase());\n\t\t\tif (webExtension) {\n\t\t\t\tresult.set(galleryExtension.identifier.id.toLowerCase(), {\n\t\t\t\t\t...webExtension,\n\t\t\t\t\tidentifier: { id: webExtension.identifier.id, uuid: galleryExtension.identifier.uuid },\n\t\t\t\t\treadmeUri: galleryExtension.assets.readme ? URI.parse(galleryExtension.assets.readme.uri) : undefined,\n\t\t\t\t\tchangelogUri: galleryExtension.assets.changelog ? URI.parse(galleryExtension.assets.changelog.uri) : undefined,\n\t\t\t\t\tmetadata: { isPreReleaseVersion: galleryExtension.properties.isPreReleaseVersion, preRelease: galleryExtension.properties.isPreReleaseVersion, isBuiltin: true, pinned: true }\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t\treturn [...result.values()];\n\t}\n\n\tprivate async resolveBuiltinGalleryExtensions(extensions: IExtensionInfo[]): Promise<IWebExtension[]> {\n\t\tif (extensions.length === 0) {\n\t\t\treturn [];\n\t\t}\n\t\tconst webExtensions: IWebExtension[] = [];\n\t\tconst galleryExtensionsMap = await this.getExtensionsWithDependenciesAndPackedExtensions(extensions);\n\t\tconst missingExtensions = extensions.filter(({ id }) => !galleryExtensionsMap.has(id.toLowerCase()));\n\t\tif (missingExtensions.length) {\n\t\t\tthis.logService.info('Skipping the additional builtin extensions because their compatible versions are not found.', missingExtensions);\n\t\t}\n\t\tawait Promise.all([...galleryExtensionsMap.values()].map(async gallery => {\n\t\t\ttry {\n\t\t\t\tconst webExtension = await this.toWebExtensionFromGallery(gallery, { isPreReleaseVersion: gallery.properties.isPreReleaseVersion, preRelease: gallery.properties.isPreReleaseVersion, isBuiltin: true });\n\t\t\t\twebExtensions.push(webExtension);\n\t\t\t} catch (error) {\n\t\t\t\tthis.logService.info(`Ignoring additional builtin extension ${gallery.identifier.id} because there is an error while converting it into web extension`, getErrorMessage(error));\n\t\t\t}\n\t\t}));\n\t\treturn webExtensions;\n\t}\n\n\tprivate async resolveDependenciesAndPackedExtensions(webExtensions: IWebExtension[], result: Map<string, IWebExtension>): Promise<void> {\n\t\tconst extensionInfos: IExtensionInfo[] = [];\n\t\tfor (const webExtension of webExtensions) {\n\t\t\tfor (const e of [...(webExtension.manifest?.extensionDependencies ?? []), ...(webExtension.manifest?.extensionPack ?? [])]) {\n\t\t\t\tif (!result.has(e.toLowerCase())) {\n\t\t\t\t\textensionInfos.push({ id: e, version: webExtension.version });\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (extensionInfos.length === 0) {\n\t\t\treturn;\n\t\t}\n\t\tconst galleryExtensions = await this.getExtensionsWithDependenciesAndPackedExtensions(extensionInfos, new Set<string>([...result.keys()]));\n\t\tawait Promise.all([...galleryExtensions.values()].map(async gallery => {\n\t\t\ttry {\n\t\t\t\tconst webExtension = await this.toWebExtensionFromGallery(gallery, { isPreReleaseVersion: gallery.properties.isPreReleaseVersion, preRelease: gallery.properties.isPreReleaseVersion, isBuiltin: true });\n\t\t\t\tresult.set(webExtension.identifier.id.toLowerCase(), webExtension);\n\t\t\t} catch (error) {\n\t\t\t\tthis.logService.info(`Ignoring additional builtin extension ${gallery.identifier.id} because there is an error while converting it into web extension`, getErrorMessage(error));\n\t\t\t}\n\t\t}));\n\t}\n\n\tprivate async getExtensionsWithDependenciesAndPackedExtensions(toGet: IExtensionInfo[], seen: Set<string> = new Set<string>(), result: Map<string, IGalleryExtension> = new Map<string, IGalleryExtension>()): Promise<Map<string, IGalleryExtension>> {\n\t\tif (toGet.length === 0) {\n\t\t\treturn result;\n\t\t}\n\t\tconst extensions = await this.galleryService.getExtensions(toGet, { compatible: true, targetPlatform: TargetPlatform.WEB }, CancellationToken.None);\n\t\tconst packsAndDependencies = new Map<string, IExtensionInfo>();\n\t\tfor (const extension of extensions) {\n\t\t\tresult.set(extension.identifier.id.toLowerCase(), extension);\n\t\t\tfor (const id of [...(isNonEmptyArray(extension.properties.dependencies) ? extension.properties.dependencies : []), ...(isNonEmptyArray(extension.properties.extensionPack) ? extension.properties.extensionPack : [])]) {\n\t\t\t\tif (!result.has(id.toLowerCase()) && !packsAndDependencies.has(id.toLowerCase()) && !seen.has(id.toLowerCase())) {\n\t\t\t\t\tconst extensionInfo = toGet.find(e => areSameExtensions(e, extension.identifier));\n\t\t\t\t\tpacksAndDependencies.set(id.toLowerCase(), { id, preRelease: extensionInfo?.preRelease });\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn this.getExtensionsWithDependenciesAndPackedExtensions([...packsAndDependencies.values()].filter(({ id }) => !result.has(id.toLowerCase())), seen, result);\n\t}\n\n\tasync scanSystemExtensions(): Promise<IExtension[]> {\n\t\treturn this.readSystemExtensions();\n\t}\n\n\tasync scanUserExtensions(profileLocation: URI, scanOptions?: ScanOptions): Promise<IScannedExtension[]> {\n\t\tconst extensions = new Map<string, IScannedExtension>();\n\n\t\t// Custom builtin extensions defined through `additionalBuiltinExtensions` API\n\t\tconst customBuiltinExtensions = await this.readCustomBuiltinExtensions(scanOptions);\n\t\tfor (const extension of customBuiltinExtensions) {\n\t\t\textensions.set(extension.identifier.id.toLowerCase(), extension);\n\t\t}\n\n\t\t// User Installed extensions\n\t\tconst installedExtensions = await this.scanInstalledExtensions(profileLocation, scanOptions);\n\t\tfor (const extension of installedExtensions) {\n\t\t\textensions.set(extension.identifier.id.toLowerCase(), extension);\n\t\t}\n\n\t\treturn [...extensions.values()];\n\t}\n\n\tasync scanExtensionsUnderDevelopment(): Promise<IExtension[]> {\n\t\tconst devExtensions = this.environmentService.options?.developmentOptions?.extensions;\n\t\tconst result: IExtension[] = [];\n\t\tif (Array.isArray(devExtensions)) {\n\t\t\tawait Promise.allSettled(devExtensions.map(async devExtension => {\n\t\t\t\ttry {\n\t\t\t\t\tconst location = URI.revive(devExtension);\n\t\t\t\t\tif (URI.isUri(location)) {\n\t\t\t\t\t\tconst webExtension = await this.toWebExtension(location);\n\t\t\t\t\t\tresult.push(await this.toScannedExtension(webExtension, false));\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis.logService.info(`Skipping the extension under development ${devExtension} as it is not URI type.`);\n\t\t\t\t\t}\n\t\t\t\t} catch (error) {\n\t\t\t\t\tthis.logService.info(`Error while fetching the extension under development ${devExtension.toString()}.`, getErrorMessage(error));\n\t\t\t\t}\n\t\t\t}));\n\t\t}\n\t\treturn result;\n\t}\n\n\tasync scanExistingExtension(extensionLocation: URI, extensionType: ExtensionType, profileLocation: URI): Promise<IScannedExtension | null> {\n\t\tif (extensionType === ExtensionType.System) {\n\t\t\tconst systemExtensions = await this.scanSystemExtensions();\n\t\t\treturn systemExtensions.find(e => e.location.toString() === extensionLocation.toString()) || null;\n\t\t}\n\t\tconst userExtensions = await this.scanUserExtensions(profileLocation);\n\t\treturn userExtensions.find(e => e.location.toString() === extensionLocation.toString()) || null;\n\t}\n\n\tasync scanExtensionManifest(extensionLocation: URI): Promise<IExtensionManifest | null> {\n\t\ttry {\n\t\t\treturn await this.getExtensionManifest(extensionLocation);\n\t\t} catch (error) {\n\t\t\tthis.logService.warn(`Error while fetching manifest from ${extensionLocation.toString()}`, getErrorMessage(error));\n\t\t\treturn null;\n\t\t}\n\t}\n\n\tasync addExtensionFromGallery(galleryExtension: IGalleryExtension, metadata: Metadata, profileLocation: URI): Promise<IScannedExtension> {\n\t\tconst webExtension = await this.toWebExtensionFromGallery(galleryExtension, metadata);\n\t\treturn this.addWebExtension(webExtension, profileLocation);\n\t}\n\n\tasync addExtension(location: URI, metadata: Metadata, profileLocation: URI): Promise<IScannedExtension> {\n\t\tconst webExtension = await this.toWebExtension(location, undefined, undefined, undefined, undefined, undefined, undefined, metadata);\n\t\tconst extension = await this.toScannedExtension(webExtension, false);\n\t\tawait this.addToInstalledExtensions([webExtension], profileLocation);\n\t\treturn extension;\n\t}\n\n\tasync removeExtension(extension: IScannedExtension, profileLocation: URI): Promise<void> {\n\t\tawait this.writeInstalledExtensions(profileLocation, installedExtensions => installedExtensions.filter(installedExtension => !areSameExtensions(installedExtension.identifier, extension.identifier)));\n\t}\n\n\tasync updateMetadata(extension: IScannedExtension, metadata: Partial<Metadata>, profileLocation: URI): Promise<IScannedExtension> {\n\t\tlet updatedExtension: IWebExtension | undefined = undefined;\n\t\tawait this.writeInstalledExtensions(profileLocation, installedExtensions => {\n\t\t\tconst result: IWebExtension[] = [];\n\t\t\tfor (const installedExtension of installedExtensions) {\n\t\t\t\tif (areSameExtensions(extension.identifier, installedExtension.identifier)) {\n\t\t\t\t\tinstalledExtension.metadata = { ...installedExtension.metadata, ...metadata };\n\t\t\t\t\tupdatedExtension = installedExtension;\n\t\t\t\t\tresult.push(installedExtension);\n\t\t\t\t} else {\n\t\t\t\t\tresult.push(installedExtension);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn result;\n\t\t});\n\t\tif (!updatedExtension) {\n\t\t\tthrow new Error('Extension not found');\n\t\t}\n\t\treturn this.toScannedExtension(updatedExtension, extension.isBuiltin);\n\t}\n\n\tasync copyExtensions(fromProfileLocation: URI, toProfileLocation: URI, filter: (extension: IScannedExtension) => boolean): Promise<void> {\n\t\tconst extensionsToCopy: IWebExtension[] = [];\n\t\tconst fromWebExtensions = await this.readInstalledExtensions(fromProfileLocation);\n\t\tawait Promise.all(fromWebExtensions.map(async webExtension => {\n\t\t\tconst scannedExtension = await this.toScannedExtension(webExtension, false);\n\t\t\tif (filter(scannedExtension)) {\n\t\t\t\textensionsToCopy.push(webExtension);\n\t\t\t}\n\t\t}));\n\t\tif (extensionsToCopy.length) {\n\t\t\tawait this.addToInstalledExtensions(extensionsToCopy, toProfileLocation);\n\t\t}\n\t}\n\n\tprivate async addWebExtension(webExtension: IWebExtension, profileLocation: URI): Promise<IScannedExtension> {\n\t\tconst isSystem = !!(await this.scanSystemExtensions()).find(e => areSameExtensions(e.identifier, webExtension.identifier));\n\t\tconst isBuiltin = !!webExtension.metadata?.isBuiltin;\n\t\tconst extension = await this.toScannedExtension(webExtension, isBuiltin);\n\n\t\tif (isSystem) {\n\t\t\tawait this.writeSystemExtensionsCache(systemExtensions => {\n\t\t\t\t// Remove the existing extension to avoid duplicates\n\t\t\t\tsystemExtensions = systemExtensions.filter(extension => !areSameExtensions(extension.identifier, webExtension.identifier));\n\t\t\t\tsystemExtensions.push(webExtension);\n\t\t\t\treturn systemExtensions;\n\t\t\t});\n\t\t\treturn extension;\n\t\t}\n\n\t\t// Update custom builtin extensions to custom builtin extensions cache\n\t\tif (isBuiltin) {\n\t\t\tawait this.writeCustomBuiltinExtensionsCache(customBuiltinExtensions => {\n\t\t\t\t// Remove the existing extension to avoid duplicates\n\t\t\t\tcustomBuiltinExtensions = customBuiltinExtensions.filter(extension => !areSameExtensions(extension.identifier, webExtension.identifier));\n\t\t\t\tcustomBuiltinExtensions.push(webExtension);\n\t\t\t\treturn customBuiltinExtensions;\n\t\t\t});\n\n\t\t\tconst installedExtensions = await this.readInstalledExtensions(profileLocation);\n\t\t\t// Also add to installed extensions if it is installed to update its version\n\t\t\tif (installedExtensions.some(e => areSameExtensions(e.identifier, webExtension.identifier))) {\n\t\t\t\tawait this.addToInstalledExtensions([webExtension], profileLocation);\n\t\t\t}\n\t\t\treturn extension;\n\t\t}\n\n\t\t// Add to installed extensions\n\t\tawait this.addToInstalledExtensions([webExtension], profileLocation);\n\t\treturn extension;\n\t}\n\n\tprivate async addToInstalledExtensions(webExtensions: IWebExtension[], profileLocation: URI): Promise<void> {\n\t\tawait this.writeInstalledExtensions(profileLocation, installedExtensions => {\n\t\t\t// Remove the existing extension to avoid duplicates\n\t\t\tinstalledExtensions = installedExtensions.filter(installedExtension => webExtensions.some(extension => !areSameExtensions(installedExtension.identifier, extension.identifier)));\n\t\t\tinstalledExtensions.push(...webExtensions);\n\t\t\treturn installedExtensions;\n\t\t});\n\t}\n\n\tprivate async scanInstalledExtensions(profileLocation: URI, scanOptions?: ScanOptions): Promise<IScannedExtension[]> {\n\t\tlet installedExtensions = await this.readInstalledExtensions(profileLocation);\n\n\t\t// If current profile is not a default profile, then add the application extensions to the list\n\t\tif (!this.uriIdentityService.extUri.isEqual(profileLocation, this.userDataProfilesService.defaultProfile.extensionsResource)) {\n\t\t\t// Remove application extensions from the non default profile\n\t\t\tinstalledExtensions = installedExtensions.filter(i => !i.metadata?.isApplicationScoped);\n\t\t\t// Add application extensions from the default profile to the list\n\t\t\tconst defaultProfileExtensions = await this.readInstalledExtensions(this.userDataProfilesService.defaultProfile.extensionsResource);\n\t\t\tinstalledExtensions.push(...defaultProfileExtensions.filter(i => i.metadata?.isApplicationScoped));\n\t\t}\n\n\t\tinstalledExtensions.sort((a, b) => a.identifier.id < b.identifier.id ? -1 : a.identifier.id > b.identifier.id ? 1 : semver.rcompare(a.version, b.version));\n\t\tconst result = new Map<string, IScannedExtension>();\n\t\tfor (const webExtension of installedExtensions) {\n\t\t\tconst existing = result.get(webExtension.identifier.id.toLowerCase());\n\t\t\tif (existing && semver.gt(existing.manifest.version, webExtension.version)) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tconst extension = await this.toScannedExtension(webExtension, false);\n\t\t\tif (extension.isValid || !scanOptions?.skipInvalidExtensions) {\n\t\t\t\tresult.set(extension.identifier.id.toLowerCase(), extension);\n\t\t\t} else {\n\t\t\t\tthis.logService.info(`Skipping invalid installed extension ${webExtension.identifier.id}`);\n\t\t\t}\n\t\t}\n\t\treturn [...result.values()];\n\t}\n\n\tprivate async toWebExtensionFromGallery(galleryExtension: IGalleryExtension, metadata?: Metadata): Promise<IWebExtension> {\n\t\tconst extensionLocation = this.extensionResourceLoaderService.getExtensionGalleryResourceURL({\n\t\t\tpublisher: galleryExtension.publisher,\n\t\t\tname: galleryExtension.name,\n\t\t\tversion: galleryExtension.version,\n\t\t\ttargetPlatform: galleryExtension.properties.targetPlatform === TargetPlatform.WEB ? TargetPlatform.WEB : undefined\n\t\t}, 'extension');\n\n\t\tif (!extensionLocation) {\n\t\t\tthrow new Error('No extension gallery service configured.');\n\t\t}\n\n\t\treturn this.toWebExtensionFromExtensionGalleryResource(extensionLocation,\n\t\t\tgalleryExtension.identifier,\n\t\t\tgalleryExtension.assets.readme ? URI.parse(galleryExtension.assets.readme.uri) : undefined,\n\t\t\tgalleryExtension.assets.changelog ? URI.parse(galleryExtension.assets.changelog.uri) : undefined,\n\t\t\tmetadata);\n\t}\n\n\tprivate async toWebExtensionFromExtensionGalleryResource(extensionLocation: URI, identifier?: IExtensionIdentifier, readmeUri?: URI, changelogUri?: URI, metadata?: Metadata): Promise<IWebExtension> {\n\t\tconst extensionResources = await this.listExtensionResources(extensionLocation);\n\t\tconst packageNLSResources = this.getPackageNLSResourceMapFromResources(extensionResources);\n\n\t\t// The fallback, in English, will fill in any gaps missing in the localized file.\n\t\tconst fallbackPackageNLSResource = extensionResources.find(e => basename(e) === 'package.nls.json');\n\t\treturn this.toWebExtension(\n\t\t\textensionLocation,\n\t\t\tidentifier,\n\t\t\tundefined,\n\t\t\tpackageNLSResources,\n\t\t\tfallbackPackageNLSResource ? URI.parse(fallbackPackageNLSResource) : null,\n\t\t\treadmeUri,\n\t\t\tchangelogUri,\n\t\t\tmetadata);\n\t}\n\n\tprivate getPackageNLSResourceMapFromResources(extensionResources: string[]): Map<string, URI> {\n\t\tconst packageNLSResources = new Map<string, URI>();\n\t\textensionResources.forEach(e => {\n\t\t\t// Grab all package.nls.{language}.json files\n\t\t\tconst regexResult = /package\\.nls\\.([\\w-]+)\\.json/.exec(basename(e));\n\t\t\tif (regexResult?.[1]) {\n\t\t\t\tpackageNLSResources.set(regexResult[1], URI.parse(e));\n\t\t\t}\n\t\t});\n\t\treturn packageNLSResources;\n\t}\n\n\tprivate async toWebExtension(extensionLocation: URI, identifier?: IExtensionIdentifier, manifest?: IExtensionManifest, packageNLSUris?: Map<string, URI>, fallbackPackageNLSUri?: URI | ITranslations | null, readmeUri?: URI, changelogUri?: URI, metadata?: Metadata): Promise<IWebExtension> {\n\t\tif (!manifest) {\n\t\t\ttry {\n\t\t\t\tmanifest = await this.getExtensionManifest(extensionLocation);\n\t\t\t} catch (error) {\n\t\t\t\tthrow new Error(`Error while fetching manifest from the location '${extensionLocation.toString()}'. ${getErrorMessage(error)}`);\n\t\t\t}\n\t\t}\n\n\t\tif (!this.extensionManifestPropertiesService.canExecuteOnWeb(manifest)) {\n\t\t\tthrow new Error(localize('not a web extension', \"Cannot add '{0}' because this extension is not a web extension.\", manifest.displayName || manifest.name));\n\t\t}\n\n\t\tif (fallbackPackageNLSUri === undefined) {\n\t\t\ttry {\n\t\t\t\tfallbackPackageNLSUri = joinPath(extensionLocation, 'package.nls.json');\n\t\t\t\tawait this.extensionResourceLoaderService.readExtensionResource(fallbackPackageNLSUri);\n\t\t\t} catch (error) {\n\t\t\t\tfallbackPackageNLSUri = undefined;\n\t\t\t}\n\t\t}\n\t\tconst defaultManifestTranslations: ITranslations | null | undefined = fallbackPackageNLSUri ? URI.isUri(fallbackPackageNLSUri) ? await this.getTranslations(fallbackPackageNLSUri) : fallbackPackageNLSUri : null;\n\n\t\treturn {\n\t\t\tidentifier: { id: getGalleryExtensionId(manifest.publisher, manifest.name), uuid: identifier?.uuid },\n\t\t\tversion: manifest.version,\n\t\t\tlocation: extensionLocation,\n\t\t\tmanifest,\n\t\t\treadmeUri,\n\t\t\tchangelogUri,\n\t\t\tpackageNLSUris,\n\t\t\tfallbackPackageNLSUri: URI.isUri(fallbackPackageNLSUri) ? fallbackPackageNLSUri : undefined,\n\t\t\tdefaultManifestTranslations,\n\t\t\tmetadata,\n\t\t};\n\t}\n\n\tprivate async toScannedExtension(webExtension: IWebExtension, isBuiltin: boolean, type: ExtensionType = ExtensionType.User): Promise<IScannedExtension> {\n\t\tconst validations: [Severity, string][] = [];\n\t\tlet manifest: IRelaxedExtensionManifest | undefined = webExtension.manifest;\n\n\t\tif (!manifest) {\n\t\t\ttry {\n\t\t\t\tmanifest = await this.getExtensionManifest(webExtension.location);\n\t\t\t} catch (error) {\n\t\t\t\tvalidations.push([Severity.Error, `Error while fetching manifest from the location '${webExtension.location}'. ${getErrorMessage(error)}`]);\n\t\t\t}\n\t\t}\n\n\t\tif (!manifest) {\n\t\t\tconst [publisher, name] = webExtension.identifier.id.split('.');\n\t\t\tmanifest = {\n\t\t\t\tname,\n\t\t\t\tpublisher,\n\t\t\t\tversion: webExtension.version,\n\t\t\t\tengines: { vscode: '*' },\n\t\t\t};\n\t\t}\n\n\t\tconst packageNLSUri = webExtension.packageNLSUris?.get(Language.value().toLowerCase());\n\t\tconst fallbackPackageNLS = webExtension.defaultManifestTranslations ?? webExtension.fallbackPackageNLSUri;\n\n\t\tif (packageNLSUri) {\n\t\t\tmanifest = await this.translateManifest(manifest, packageNLSUri, fallbackPackageNLS);\n\t\t} else if (fallbackPackageNLS) {\n\t\t\tmanifest = await this.translateManifest(manifest, fallbackPackageNLS);\n\t\t}\n\n\t\tconst uuid = (<IGalleryMetadata | undefined>webExtension.metadata)?.id;\n\n\t\tconst validateApiVersion = this.extensionsEnabledWithApiProposalVersion.includes(webExtension.identifier.id.toLowerCase());\n\t\tvalidations.push(...validateExtensionManifest(this.productService.version, this.productService.date, webExtension.location, manifest, false, validateApiVersion));\n\t\tlet isValid = true;\n\t\tfor (const [severity, message] of validations) {\n\t\t\tif (severity === Severity.Error) {\n\t\t\t\tisValid = false;\n\t\t\t\tthis.logService.error(message);\n\t\t\t}\n\t\t}\n\n\t\tif (manifest.enabledApiProposals && validateApiVersion) {\n\t\t\tmanifest.enabledApiProposals = parseEnabledApiProposalNames([...manifest.enabledApiProposals]);\n\t\t}\n\n\t\treturn {\n\t\t\tidentifier: { id: webExtension.identifier.id, uuid: webExtension.identifier.uuid || uuid },\n\t\t\tlocation: webExtension.location,\n\t\t\tmanifest,\n\t\t\ttype,\n\t\t\tisBuiltin,\n\t\t\treadmeUrl: webExtension.readmeUri,\n\t\t\tchangelogUrl: webExtension.changelogUri,\n\t\t\tmetadata: webExtension.metadata,\n\t\t\ttargetPlatform: TargetPlatform.WEB,\n\t\t\tvalidations,\n\t\t\tisValid\n\t\t};\n\t}\n\n\tprivate async listExtensionResources(extensionLocation: URI): Promise<string[]> {\n\t\ttry {\n\t\t\tconst result = await this.extensionResourceLoaderService.readExtensionResource(extensionLocation);\n\t\t\treturn JSON.parse(result);\n\t\t} catch (error) {\n\t\t\tthis.logService.warn('Error while fetching extension resources list', getErrorMessage(error));\n\t\t}\n\t\treturn [];\n\t}\n\n\tprivate async translateManifest(manifest: IExtensionManifest, nlsURL: ITranslations | URI, fallbackNLS?: ITranslations | URI): Promise<IRelaxedExtensionManifest> {\n\t\ttry {\n\t\t\tconst translations = URI.isUri(nlsURL) ? await this.getTranslations(nlsURL) : nlsURL;\n\t\t\tconst fallbackTranslations = URI.isUri(fallbackNLS) ? await this.getTranslations(fallbackNLS) : fallbackNLS;\n\t\t\tif (translations) {\n\t\t\t\tmanifest = localizeManifest(this.logService, manifest, translations, fallbackTranslations);\n\t\t\t}\n\t\t} catch (error) { /* ignore */ }\n\t\treturn manifest;\n\t}\n\n\tprivate async getExtensionManifest(location: URI): Promise<IExtensionManifest> {\n\t\tconst url = joinPath(location, 'package.json');\n\t\tconst content = await this.extensionResourceLoaderService.readExtensionResource(url);\n\t\treturn JSON.parse(content);\n\t}\n\n\tprivate async getTranslations(nlsUrl: URI): Promise<ITranslations | undefined> {\n\t\ttry {\n\t\t\tconst content = await this.extensionResourceLoaderService.readExtensionResource(nlsUrl);\n\t\t\treturn JSON.parse(content);\n\t\t} catch (error) {\n\t\t\tthis.logService.error(`Error while fetching translations of an extension`, nlsUrl.toString(), getErrorMessage(error));\n\t\t}\n\t\treturn undefined;\n\t}\n\n\tprivate async readInstalledExtensions(profileLocation: URI): Promise<IWebExtension[]> {\n\t\treturn this.withWebExtensions(profileLocation);\n\t}\n\n\tprivate writeInstalledExtensions(profileLocation: URI, updateFn: (extensions: IWebExtension[]) => IWebExtension[]): Promise<IWebExtension[]> {\n\t\treturn this.withWebExtensions(profileLocation, updateFn);\n\t}\n\n\tprivate readCustomBuiltinExtensionsCache(): Promise<IWebExtension[]> {\n\t\treturn this.withWebExtensions(this.customBuiltinExtensionsCacheResource);\n\t}\n\n\tprivate writeCustomBuiltinExtensionsCache(updateFn: (extensions: IWebExtension[]) => IWebExtension[]): Promise<IWebExtension[]> {\n\t\treturn this.withWebExtensions(this.customBuiltinExtensionsCacheResource, updateFn);\n\t}\n\n\tprivate readSystemExtensionsCache(): Promise<IWebExtension[]> {\n\t\treturn this.withWebExtensions(this.systemExtensionsCacheResource);\n\t}\n\n\tprivate writeSystemExtensionsCache(updateFn: (extensions: IWebExtension[]) => IWebExtension[]): Promise<IWebExtension[]> {\n\t\treturn this.withWebExtensions(this.systemExtensionsCacheResource, updateFn);\n\t}\n\n\tprivate async withWebExtensions(file: URI | undefined, updateFn?: (extensions: IWebExtension[]) => IWebExtension[]): Promise<IWebExtension[]> {\n\t\tif (!file) {\n\t\t\treturn [];\n\t\t}\n\t\treturn this.getResourceAccessQueue(file).queue(async () => {\n\t\t\tlet webExtensions: IWebExtension[] = [];\n\n\t\t\t// Read\n\t\t\ttry {\n\t\t\t\tconst content = await this.fileService.readFile(file);\n\t\t\t\tconst storedWebExtensions: IStoredWebExtension[] = JSON.parse(content.value.toString());\n\t\t\t\tfor (const e of storedWebExtensions) {\n\t\t\t\t\tif (!e.location || !e.identifier || !e.version) {\n\t\t\t\t\t\tthis.logService.info('Ignoring invalid extension while scanning', storedWebExtensions);\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\tlet packageNLSUris: Map<string, URI> | undefined;\n\t\t\t\t\tif (e.packageNLSUris) {\n\t\t\t\t\t\tpackageNLSUris = new Map<string, URI>();\n\t\t\t\t\t\tObject.entries(e.packageNLSUris).forEach(([key, value]) => packageNLSUris!.set(key, URI.revive(value)));\n\t\t\t\t\t}\n\n\t\t\t\t\twebExtensions.push({\n\t\t\t\t\t\tidentifier: e.identifier,\n\t\t\t\t\t\tversion: e.version,\n\t\t\t\t\t\tlocation: URI.revive(e.location),\n\t\t\t\t\t\tmanifest: e.manifest,\n\t\t\t\t\t\treadmeUri: URI.revive(e.readmeUri),\n\t\t\t\t\t\tchangelogUri: URI.revive(e.changelogUri),\n\t\t\t\t\t\tpackageNLSUris,\n\t\t\t\t\t\tfallbackPackageNLSUri: URI.revive(e.fallbackPackageNLSUri),\n\t\t\t\t\t\tdefaultManifestTranslations: e.defaultManifestTranslations,\n\t\t\t\t\t\tpackageNLSUri: URI.revive(e.packageNLSUri),\n\t\t\t\t\t\tmetadata: e.metadata,\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\ttry {\n\t\t\t\t\twebExtensions = await this.migrateWebExtensions(webExtensions, file);\n\t\t\t\t} catch (error) {\n\t\t\t\t\tthis.logService.error(`Error while migrating scanned extensions in ${file.toString()}`, getErrorMessage(error));\n\t\t\t\t}\n\n\t\t\t} catch (error) {\n\t\t\t\t/* Ignore */\n\t\t\t\tif ((<FileOperationError>error).fileOperationResult !== FileOperationResult.FILE_NOT_FOUND) {\n\t\t\t\t\tthis.logService.error(error);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Update\n\t\t\tif (updateFn) {\n\t\t\t\tawait this.storeWebExtensions(webExtensions = updateFn(webExtensions), file);\n\t\t\t}\n\n\t\t\treturn webExtensions;\n\t\t});\n\t}\n\n\tprivate async migrateWebExtensions(webExtensions: IWebExtension[], file: URI): Promise<IWebExtension[]> {\n\t\tlet update = false;\n\t\twebExtensions = await Promise.all(webExtensions.map(async webExtension => {\n\t\t\tif (!webExtension.manifest) {\n\t\t\t\ttry {\n\t\t\t\t\twebExtension.manifest = await this.getExtensionManifest(webExtension.location);\n\t\t\t\t\tupdate = true;\n\t\t\t\t} catch (error) {\n\t\t\t\t\tthis.logService.error(`Error while updating manifest of an extension in ${file.toString()}`, webExtension.identifier.id, getErrorMessage(error));\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (isUndefined(webExtension.defaultManifestTranslations)) {\n\t\t\t\tif (webExtension.fallbackPackageNLSUri) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tconst content = await this.extensionResourceLoaderService.readExtensionResource(webExtension.fallbackPackageNLSUri);\n\t\t\t\t\t\twebExtension.defaultManifestTranslations = JSON.parse(content);\n\t\t\t\t\t\tupdate = true;\n\t\t\t\t\t} catch (error) {\n\t\t\t\t\t\tthis.logService.error(`Error while fetching default manifest translations of an extension`, webExtension.identifier.id, getErrorMessage(error));\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tupdate = true;\n\t\t\t\t\twebExtension.defaultManifestTranslations = null;\n\t\t\t\t}\n\t\t\t}\n\t\t\tconst migratedLocation = migratePlatformSpecificExtensionGalleryResourceURL(webExtension.location, TargetPlatform.WEB);\n\t\t\tif (migratedLocation) {\n\t\t\t\tupdate = true;\n\t\t\t\twebExtension.location = migratedLocation;\n\t\t\t}\n\t\t\tif (isUndefined(webExtension.metadata?.hasPreReleaseVersion) && webExtension.metadata?.preRelease) {\n\t\t\t\tupdate = true;\n\t\t\t\twebExtension.metadata.hasPreReleaseVersion = true;\n\t\t\t}\n\t\t\treturn webExtension;\n\t\t}));\n\t\tif (update) {\n\t\t\tawait this.storeWebExtensions(webExtensions, file);\n\t\t}\n\t\treturn webExtensions;\n\t}\n\n\tprivate async storeWebExtensions(webExtensions: IWebExtension[], file: URI): Promise<void> {\n\t\tfunction toStringDictionary(dictionary: Map<string, URI> | undefined): IStringDictionary<UriComponents> | undefined {\n\t\t\tif (!dictionary) {\n\t\t\t\treturn undefined;\n\t\t\t}\n\t\t\tconst result: IStringDictionary<UriComponents> = Object.create(null);\n\t\t\tdictionary.forEach((value, key) => result[key] = value.toJSON());\n\t\t\treturn result;\n\t\t}\n\t\tconst storedWebExtensions: IStoredWebExtension[] = webExtensions.map(e => ({\n\t\t\tidentifier: e.identifier,\n\t\t\tversion: e.version,\n\t\t\tmanifest: e.manifest,\n\t\t\tlocation: e.location.toJSON(),\n\t\t\treadmeUri: e.readmeUri?.toJSON(),\n\t\t\tchangelogUri: e.changelogUri?.toJSON(),\n\t\t\tpackageNLSUris: toStringDictionary(e.packageNLSUris),\n\t\t\tdefaultManifestTranslations: e.defaultManifestTranslations,\n\t\t\tfallbackPackageNLSUri: e.fallbackPackageNLSUri?.toJSON(),\n\t\t\tmetadata: e.metadata\n\t\t}));\n\t\tawait this.fileService.writeFile(file, VSBuffer.fromString(JSON.stringify(storedWebExtensions)));\n\t}\n\n\tprivate getResourceAccessQueue(file: URI): Queue<IWebExtension[]> {\n\t\tlet resourceQueue = this.resourcesAccessQueueMap.get(file);\n\t\tif (!resourceQueue) {\n\t\t\tthis.resourcesAccessQueueMap.set(file, resourceQueue = new Queue<IWebExtension[]>());\n\t\t}\n\t\treturn resourceQueue;\n\t}\n\n}\n\nif (isWeb) {\n\tregisterAction2(class extends Action2 {\n\t\tconstructor() {\n\t\t\tsuper({\n\t\t\t\tid: 'workbench.extensions.action.openInstalledWebExtensionsResource',\n\t\t\t\ttitle: localize2('openInstalledWebExtensionsResource', 'Open Installed Web Extensions Resource'),\n\t\t\t\tcategory: Categories.Developer,\n\t\t\t\tf1: true,\n\t\t\t\tprecondition: IsWebContext\n\t\t\t});\n\t\t}\n\t\trun(serviceAccessor: ServicesAccessor): void {\n\t\t\tconst editorService = serviceAccessor.get(IEditorService);\n\t\t\tconst userDataProfileService = serviceAccessor.get(IUserDataProfileService);\n\t\t\teditorService.openEditor({ resource: userDataProfileService.currentProfile.extensionsResource });\n\t\t}\n\t});\n}\n\nregisterSingleton(IWebExtensionsScannerService, WebExtensionsScannerService, InstantiationType.Delayed);\n"],
  "mappings": "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",
  "names": ["extension"]
}
