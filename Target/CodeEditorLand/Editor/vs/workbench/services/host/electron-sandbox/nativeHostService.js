var W=Object.defineProperty;var I=Object.getOwnPropertyDescriptor;var v=(s,n,e,i)=>{for(var t=i>1?void 0:i?I(n,e):n,o=s.length-1,l;o>=0;o--)(l=s[o])&&(t=(i?l(n,e,t):l(t))||t);return i&&t&&W(n,e,t),t},d=(s,n)=>(e,i)=>n(e,i,s);import{disposableWindowInterval as S,getActiveDocument as y,getWindowId as g,getWindowsCount as O,hasWindow as m,onDidRegisterWindow as P}from"../../../../base/browser/dom.js";import{isAuxiliaryWindow as u}from"../../../../base/browser/window.js";import{memoize as b}from"../../../../base/common/decorators.js";import{Emitter as F,Event as r}from"../../../../base/common/event.js";import{Disposable as A}from"../../../../base/common/lifecycle.js";import{webUtils as E}from"../../../../base/parts/sandbox/electron-sandbox/globals.js";import{InstantiationType as p,registerSingleton as h}from"../../../../platform/instantiation/common/extensions.js";import{IMainProcessService as H}from"../../../../platform/ipc/common/mainProcessService.js";import{ILabelService as D,Verbosity as w}from"../../../../platform/label/common/label.js";import{INativeHostService as f}from"../../../../platform/native/common/native.js";import{NativeHostService as _}from"../../../../platform/native/common/nativeHostService.js";import{isFolderToOpen as L,isWorkspaceToOpen as x}from"../../../../platform/window/common/window.js";import{IWorkbenchEnvironmentService as C}from"../../environment/common/environmentService.js";import{INativeWorkbenchEnvironmentService as T}from"../../environment/electron-sandbox/environmentService.js";import{IHostService as M}from"../browser/host.js";let c=class extends _{constructor(n,e){super(n.window.id,e)}};c=v([d(0,T),d(1,H)],c);let a=class extends A{constructor(e,i,t){super();this.nativeHostService=e;this.labelService=i;this.environmentService=t}onDidChangeFocus=r.latch(r.any(r.map(r.filter(this.nativeHostService.onDidFocusMainOrAuxiliaryWindow,e=>m(e),this._store),()=>this.hasFocus,this._store),r.map(r.filter(this.nativeHostService.onDidBlurMainOrAuxiliaryWindow,e=>m(e),this._store),()=>this.hasFocus,this._store),r.map(this.onDidChangeActiveWindow,()=>this.hasFocus,this._store)),void 0,this._store);get hasFocus(){return y().hasFocus()}async hadLastFocus(){const e=await this.nativeHostService.getActiveWindowId();return typeof e>"u"?!1:e===this.nativeHostService.windowId}get onDidChangeActiveWindow(){const e=this._register(new F);return this._register(r.filter(this.nativeHostService.onDidFocusMainOrAuxiliaryWindow,i=>m(i),this._store)(i=>e.fire(i))),this._register(P(({window:i,disposables:t})=>{t.add(S(i,()=>{const o=i.document.hasFocus();return o&&e.fire(i.vscodeWindowId),o},100,20))})),r.latch(e.event,void 0,this._store)}onDidChangeFullScreen=r.filter(this.nativeHostService.onDidChangeWindowFullScreen,e=>m(e.windowId),this._store);openWindow(e,i){return Array.isArray(e)?this.doOpenWindow(e,i):this.doOpenEmptyWindow(e)}doOpenWindow(e,i){const t=this.environmentService.remoteAuthority;return t&&(e.forEach(o=>o.label=o.label||this.getRecentLabel(o)),i?.remoteAuthority===void 0&&(i=i?{...i,remoteAuthority:t}:{remoteAuthority:t})),this.nativeHostService.openWindow(e,i)}getRecentLabel(e){return L(e)?this.labelService.getWorkspaceLabel(e.folderUri,{verbose:w.LONG}):x(e)?this.labelService.getWorkspaceLabel({id:"",configPath:e.workspaceUri},{verbose:w.LONG}):this.labelService.getUriLabel(e.fileUri)}doOpenEmptyWindow(e){const i=this.environmentService.remoteAuthority;return i&&e?.remoteAuthority===void 0&&(e=e?{...e,remoteAuthority:i}:{remoteAuthority:i}),this.nativeHostService.openWindow(e)}toggleFullScreen(e){return this.nativeHostService.toggleFullScreen({targetWindowId:u(e)?e.vscodeWindowId:void 0})}async moveTop(e){if(!(O()<=1))return this.nativeHostService.moveWindowTop(u(e)?{targetWindowId:e.vscodeWindowId}:void 0)}getCursorScreenPoint(){return this.nativeHostService.getCursorScreenPoint()}focus(e,i){return this.nativeHostService.focusWindow({force:i?.force,targetWindowId:g(e)})}restart(){return this.nativeHostService.relaunch()}reload(e){return this.nativeHostService.reload(e)}close(){return this.nativeHostService.closeWindow()}async withExpectedShutdown(e){return await e()}getPathForFile(e){return E.getPathForFile(e)}};v([b],a.prototype,"onDidChangeActiveWindow",1),a=v([d(0,f),d(1,D),d(2,C)],a),h(M,a,p.Delayed),h(f,c,p.Delayed);
