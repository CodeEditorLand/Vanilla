{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/host/electron-sandbox/nativeHostService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Emitter, Event } from '../../../../base/common/event.js';\nimport { IHostService } from '../browser/host.js';\nimport { INativeHostService } from '../../../../platform/native/common/native.js';\nimport { InstantiationType, registerSingleton } from '../../../../platform/instantiation/common/extensions.js';\nimport { ILabelService, Verbosity } from '../../../../platform/label/common/label.js';\nimport { IWorkbenchEnvironmentService } from '../../environment/common/environmentService.js';\nimport { IWindowOpenable, IOpenWindowOptions, isFolderToOpen, isWorkspaceToOpen, IOpenEmptyWindowOptions, IPoint, IRectangle } from '../../../../platform/window/common/window.js';\nimport { Disposable } from '../../../../base/common/lifecycle.js';\nimport { NativeHostService } from '../../../../platform/native/common/nativeHostService.js';\nimport { INativeWorkbenchEnvironmentService } from '../../environment/electron-sandbox/environmentService.js';\nimport { IMainProcessService } from '../../../../platform/ipc/common/mainProcessService.js';\nimport { disposableWindowInterval, getActiveDocument, getWindowId, getWindowsCount, hasWindow, onDidRegisterWindow } from '../../../../base/browser/dom.js';\nimport { memoize } from '../../../../base/common/decorators.js';\nimport { isAuxiliaryWindow } from '../../../../base/browser/window.js';\nimport { webUtils } from '../../../../base/parts/sandbox/electron-sandbox/globals.js';\n\nclass WorkbenchNativeHostService extends NativeHostService {\n\n\tconstructor(\n\t\t@INativeWorkbenchEnvironmentService environmentService: INativeWorkbenchEnvironmentService,\n\t\t@IMainProcessService mainProcessService: IMainProcessService\n\t) {\n\t\tsuper(environmentService.window.id, mainProcessService);\n\t}\n}\n\nclass WorkbenchHostService extends Disposable implements IHostService {\n\n\tdeclare readonly _serviceBrand: undefined;\n\n\tconstructor(\n\t\t@INativeHostService private readonly nativeHostService: INativeHostService,\n\t\t@ILabelService private readonly labelService: ILabelService,\n\t\t@IWorkbenchEnvironmentService private readonly environmentService: IWorkbenchEnvironmentService\n\t) {\n\t\tsuper();\n\t}\n\n\t//#region Focus\n\n\treadonly onDidChangeFocus = Event.latch(\n\t\tEvent.any(\n\t\t\tEvent.map(Event.filter(this.nativeHostService.onDidFocusMainOrAuxiliaryWindow, id => hasWindow(id), this._store), () => this.hasFocus, this._store),\n\t\t\tEvent.map(Event.filter(this.nativeHostService.onDidBlurMainOrAuxiliaryWindow, id => hasWindow(id), this._store), () => this.hasFocus, this._store),\n\t\t\tEvent.map(this.onDidChangeActiveWindow, () => this.hasFocus, this._store)\n\t\t), undefined, this._store\n\t);\n\n\tget hasFocus(): boolean {\n\t\treturn getActiveDocument().hasFocus();\n\t}\n\n\tasync hadLastFocus(): Promise<boolean> {\n\t\tconst activeWindowId = await this.nativeHostService.getActiveWindowId();\n\n\t\tif (typeof activeWindowId === 'undefined') {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn activeWindowId === this.nativeHostService.windowId;\n\t}\n\n\t//#endregion\n\n\t//#region Window\n\n\t@memoize\n\tget onDidChangeActiveWindow(): Event<number> {\n\t\tconst emitter = this._register(new Emitter<number>());\n\n\t\t// Emit via native focus tracking\n\t\tthis._register(Event.filter(this.nativeHostService.onDidFocusMainOrAuxiliaryWindow, id => hasWindow(id), this._store)(id => emitter.fire(id)));\n\n\t\tthis._register(onDidRegisterWindow(({ window, disposables }) => {\n\n\t\t\t// Emit via interval: immediately when opening an auxiliary window,\n\t\t\t// it is possible that document focus has not yet changed, so we\n\t\t\t// poll for a while to ensure we catch the event.\n\t\t\tdisposables.add(disposableWindowInterval(window, () => {\n\t\t\t\tconst hasFocus = window.document.hasFocus();\n\t\t\t\tif (hasFocus) {\n\t\t\t\t\temitter.fire(window.vscodeWindowId);\n\t\t\t\t}\n\n\t\t\t\treturn hasFocus;\n\t\t\t}, 100, 20));\n\t\t}));\n\n\t\treturn Event.latch(emitter.event, undefined, this._store);\n\t}\n\n\treadonly onDidChangeFullScreen = Event.filter(this.nativeHostService.onDidChangeWindowFullScreen, e => hasWindow(e.windowId), this._store);\n\n\topenWindow(options?: IOpenEmptyWindowOptions): Promise<void>;\n\topenWindow(toOpen: IWindowOpenable[], options?: IOpenWindowOptions): Promise<void>;\n\topenWindow(arg1?: IOpenEmptyWindowOptions | IWindowOpenable[], arg2?: IOpenWindowOptions): Promise<void> {\n\t\tif (Array.isArray(arg1)) {\n\t\t\treturn this.doOpenWindow(arg1, arg2);\n\t\t}\n\n\t\treturn this.doOpenEmptyWindow(arg1);\n\t}\n\n\tprivate doOpenWindow(toOpen: IWindowOpenable[], options?: IOpenWindowOptions): Promise<void> {\n\t\tconst remoteAuthority = this.environmentService.remoteAuthority;\n\t\tif (!!remoteAuthority) {\n\t\t\ttoOpen.forEach(openable => openable.label = openable.label || this.getRecentLabel(openable));\n\n\t\t\tif (options?.remoteAuthority === undefined) {\n\t\t\t\t// set the remoteAuthority of the window the request came from.\n\t\t\t\t// It will be used when the input is neither file nor vscode-remote.\n\t\t\t\toptions = options ? { ...options, remoteAuthority } : { remoteAuthority };\n\t\t\t}\n\t\t}\n\n\t\treturn this.nativeHostService.openWindow(toOpen, options);\n\t}\n\n\tprivate getRecentLabel(openable: IWindowOpenable): string {\n\t\tif (isFolderToOpen(openable)) {\n\t\t\treturn this.labelService.getWorkspaceLabel(openable.folderUri, { verbose: Verbosity.LONG });\n\t\t}\n\n\t\tif (isWorkspaceToOpen(openable)) {\n\t\t\treturn this.labelService.getWorkspaceLabel({ id: '', configPath: openable.workspaceUri }, { verbose: Verbosity.LONG });\n\t\t}\n\n\t\treturn this.labelService.getUriLabel(openable.fileUri);\n\t}\n\n\tprivate doOpenEmptyWindow(options?: IOpenEmptyWindowOptions): Promise<void> {\n\t\tconst remoteAuthority = this.environmentService.remoteAuthority;\n\t\tif (!!remoteAuthority && options?.remoteAuthority === undefined) {\n\t\t\t// set the remoteAuthority of the window the request came from\n\t\t\toptions = options ? { ...options, remoteAuthority } : { remoteAuthority };\n\t\t}\n\t\treturn this.nativeHostService.openWindow(options);\n\t}\n\n\ttoggleFullScreen(targetWindow: Window): Promise<void> {\n\t\treturn this.nativeHostService.toggleFullScreen({ targetWindowId: isAuxiliaryWindow(targetWindow) ? targetWindow.vscodeWindowId : undefined });\n\t}\n\n\tasync moveTop(targetWindow: Window): Promise<void> {\n\t\tif (getWindowsCount() <= 1) {\n\t\t\treturn; // does not apply when only one window is opened\n\t\t}\n\n\t\treturn this.nativeHostService.moveWindowTop(isAuxiliaryWindow(targetWindow) ? { targetWindowId: targetWindow.vscodeWindowId } : undefined);\n\t}\n\n\tgetCursorScreenPoint(): Promise<{ readonly point: IPoint; readonly display: IRectangle }> {\n\t\treturn this.nativeHostService.getCursorScreenPoint();\n\t}\n\n\t//#endregion\n\n\t//#region Lifecycle\n\n\tfocus(targetWindow: Window, options?: { force: boolean }): Promise<void> {\n\t\treturn this.nativeHostService.focusWindow({\n\t\t\tforce: options?.force,\n\t\t\ttargetWindowId: getWindowId(targetWindow)\n\t\t});\n\t}\n\n\trestart(): Promise<void> {\n\t\treturn this.nativeHostService.relaunch();\n\t}\n\n\treload(options?: { disableExtensions?: boolean }): Promise<void> {\n\t\treturn this.nativeHostService.reload(options);\n\t}\n\n\tclose(): Promise<void> {\n\t\treturn this.nativeHostService.closeWindow();\n\t}\n\n\tasync withExpectedShutdown<T>(expectedShutdownTask: () => Promise<T>): Promise<T> {\n\t\treturn await expectedShutdownTask();\n\t}\n\n\t//#endregion\n\n\t//#region File\n\n\tgetPathForFile(file: File): string {\n\t\treturn webUtils.getPathForFile(file);\n\t}\n\n\t//#endregion\n\n}\n\nregisterSingleton(IHostService, WorkbenchHostService, InstantiationType.Delayed);\nregisterSingleton(INativeHostService, WorkbenchNativeHostService, InstantiationType.Delayed);\n"],
  "mappings": "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",
  "names": []
}
