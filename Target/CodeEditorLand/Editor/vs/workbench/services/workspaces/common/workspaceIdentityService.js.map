{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/workspaces/common/workspaceIdentityService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { VSBuffer } from \"../../../../base/common/buffer.js\";\nimport type { CancellationToken } from \"../../../../base/common/cancellation.js\";\nimport {\n\tisEqualOrParent,\n\tjoinPath,\n\trelativePath,\n} from \"../../../../base/common/resources.js\";\nimport { URI } from \"../../../../base/common/uri.js\";\nimport {\n\tInstantiationType,\n\tregisterSingleton,\n} from \"../../../../platform/instantiation/common/extensions.js\";\nimport { createDecorator } from \"../../../../platform/instantiation/common/instantiation.js\";\nimport type { IWorkspaceStateFolder } from \"../../../../platform/userDataSync/common/userDataSync.js\";\nimport {\n\tEditSessionIdentityMatch,\n\tIEditSessionIdentityService,\n} from \"../../../../platform/workspace/common/editSessions.js\";\nimport {\n\tIWorkspaceContextService,\n\ttype IWorkspaceFolder,\n} from \"../../../../platform/workspace/common/workspace.js\";\n\nexport const IWorkspaceIdentityService =\n\tcreateDecorator<IWorkspaceIdentityService>(\"IWorkspaceIdentityService\");\nexport interface IWorkspaceIdentityService {\n\t_serviceBrand: undefined;\n\tmatches(\n\t\tfolders: IWorkspaceStateFolder[],\n\t\tcancellationToken: CancellationToken,\n\t): Promise<((obj: any) => any) | false>;\n\tgetWorkspaceStateFolders(\n\t\tcancellationToken: CancellationToken,\n\t): Promise<IWorkspaceStateFolder[]>;\n}\n\nexport class WorkspaceIdentityService implements IWorkspaceIdentityService {\n\tdeclare _serviceBrand: undefined;\n\n\tconstructor(\n\t\t@IWorkspaceContextService private readonly workspaceContextService: IWorkspaceContextService,\n\t\t@IEditSessionIdentityService private readonly editSessionIdentityService: IEditSessionIdentityService\n\t) { }\n\n\tasync getWorkspaceStateFolders(\n\t\tcancellationToken: CancellationToken,\n\t): Promise<IWorkspaceStateFolder[]> {\n\t\tconst workspaceStateFolders: IWorkspaceStateFolder[] = [];\n\n\t\tfor (const workspaceFolder of this.workspaceContextService.getWorkspace()\n\t\t\t.folders) {\n\t\t\tconst workspaceFolderIdentity =\n\t\t\t\tawait this.editSessionIdentityService.getEditSessionIdentifier(\n\t\t\t\t\tworkspaceFolder,\n\t\t\t\t\tcancellationToken,\n\t\t\t\t);\n\t\t\tif (!workspaceFolderIdentity) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tworkspaceStateFolders.push({\n\t\t\t\tresourceUri: workspaceFolder.uri.toString(),\n\t\t\t\tworkspaceFolderIdentity,\n\t\t\t});\n\t\t}\n\n\t\treturn workspaceStateFolders;\n\t}\n\n\tasync matches(\n\t\tincomingWorkspaceFolders: IWorkspaceStateFolder[],\n\t\tcancellationToken: CancellationToken,\n\t): Promise<((value: any) => any) | false> {\n\t\tconst incomingToCurrentWorkspaceFolderUris: { [key: string]: string } =\n\t\t\t{};\n\n\t\tconst incomingIdentitiesToIncomingWorkspaceFolders: {\n\t\t\t[key: string]: string;\n\t\t} = {};\n\t\tfor (const workspaceFolder of incomingWorkspaceFolders) {\n\t\t\tincomingIdentitiesToIncomingWorkspaceFolders[\n\t\t\t\tworkspaceFolder.workspaceFolderIdentity\n\t\t\t] = workspaceFolder.resourceUri;\n\t\t}\n\n\t\t// Precompute the identities of the current workspace folders\n\t\tconst currentWorkspaceFoldersToIdentities = new Map<\n\t\t\tIWorkspaceFolder,\n\t\t\tstring\n\t\t>();\n\t\tfor (const workspaceFolder of this.workspaceContextService.getWorkspace()\n\t\t\t.folders) {\n\t\t\tconst workspaceFolderIdentity =\n\t\t\t\tawait this.editSessionIdentityService.getEditSessionIdentifier(\n\t\t\t\t\tworkspaceFolder,\n\t\t\t\t\tcancellationToken,\n\t\t\t\t);\n\t\t\tif (!workspaceFolderIdentity) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tcurrentWorkspaceFoldersToIdentities.set(\n\t\t\t\tworkspaceFolder,\n\t\t\t\tworkspaceFolderIdentity,\n\t\t\t);\n\t\t}\n\n\t\t// Match the current workspace folders to the incoming workspace folders\n\t\tfor (const [\n\t\t\tcurrentWorkspaceFolder,\n\t\t\tcurrentWorkspaceFolderIdentity,\n\t\t] of currentWorkspaceFoldersToIdentities.entries()) {\n\t\t\t// Happy case: identities do not need further disambiguation\n\t\t\tconst incomingWorkspaceFolder =\n\t\t\t\tincomingIdentitiesToIncomingWorkspaceFolders[\n\t\t\t\t\tcurrentWorkspaceFolderIdentity\n\t\t\t\t];\n\t\t\tif (incomingWorkspaceFolder) {\n\t\t\t\t// There is an incoming workspace folder with the exact same identity as the current workspace folder\n\t\t\t\tincomingToCurrentWorkspaceFolderUris[incomingWorkspaceFolder] =\n\t\t\t\t\tcurrentWorkspaceFolder.uri.toString();\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// Unhappy case: compare the identity of the current workspace folder to all incoming workspace folder identities\n\t\t\tlet hasCompleteMatch = false;\n\t\t\tfor (const [incomingIdentity, incomingFolder] of Object.entries(\n\t\t\t\tincomingIdentitiesToIncomingWorkspaceFolders,\n\t\t\t)) {\n\t\t\t\tif (\n\t\t\t\t\t(await this.editSessionIdentityService.provideEditSessionIdentityMatch(\n\t\t\t\t\t\tcurrentWorkspaceFolder,\n\t\t\t\t\t\tcurrentWorkspaceFolderIdentity,\n\t\t\t\t\t\tincomingIdentity,\n\t\t\t\t\t\tcancellationToken,\n\t\t\t\t\t)) === EditSessionIdentityMatch.Complete\n\t\t\t\t) {\n\t\t\t\t\tincomingToCurrentWorkspaceFolderUris[incomingFolder] =\n\t\t\t\t\t\tcurrentWorkspaceFolder.uri.toString();\n\t\t\t\t\thasCompleteMatch = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (hasCompleteMatch) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\treturn false;\n\t\t}\n\n\t\tconst convertUri = (uriToConvert: URI) => {\n\t\t\t// Figure out which current folder the incoming URI is a child of\n\t\t\tfor (const incomingFolderUriKey of Object.keys(\n\t\t\t\tincomingToCurrentWorkspaceFolderUris,\n\t\t\t)) {\n\t\t\t\tconst incomingFolderUri = URI.parse(incomingFolderUriKey);\n\t\t\t\tif (isEqualOrParent(incomingFolderUri, uriToConvert)) {\n\t\t\t\t\tconst currentWorkspaceFolderUri =\n\t\t\t\t\t\tincomingToCurrentWorkspaceFolderUris[\n\t\t\t\t\t\t\tincomingFolderUriKey\n\t\t\t\t\t\t];\n\n\t\t\t\t\t// Compute the relative file path section of the uri to convert relative to the folder it came from\n\t\t\t\t\tconst relativeFilePath = relativePath(\n\t\t\t\t\t\tincomingFolderUri,\n\t\t\t\t\t\turiToConvert,\n\t\t\t\t\t);\n\n\t\t\t\t\t// Reparent the relative file path under the current workspace folder it belongs to\n\t\t\t\t\tif (relativeFilePath) {\n\t\t\t\t\t\treturn joinPath(\n\t\t\t\t\t\t\tURI.parse(currentWorkspaceFolderUri),\n\t\t\t\t\t\t\trelativeFilePath,\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// No conversion was possible; return the original URI\n\t\t\treturn uriToConvert;\n\t\t};\n\n\t\t// Recursively look for any URIs in the provided object and\n\t\t// replace them with the URIs of the current workspace folders\n\t\tconst uriReplacer = (obj: any, depth = 0) => {\n\t\t\tif (!obj || depth > 200) {\n\t\t\t\treturn obj;\n\t\t\t}\n\n\t\t\tif (obj instanceof VSBuffer || obj instanceof Uint8Array) {\n\t\t\t\treturn <any>obj;\n\t\t\t}\n\n\t\t\tif (URI.isUri(obj)) {\n\t\t\t\treturn convertUri(obj);\n\t\t\t}\n\n\t\t\tif (Array.isArray(obj)) {\n\t\t\t\tfor (let i = 0; i < obj.length; ++i) {\n\t\t\t\t\tobj[i] = uriReplacer(obj[i], depth + 1);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// walk object\n\t\t\t\tfor (const key in obj) {\n\t\t\t\t\tif (Object.hasOwnProperty.call(obj, key)) {\n\t\t\t\t\t\tobj[key] = uriReplacer(obj[key], depth + 1);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn obj;\n\t\t};\n\n\t\treturn uriReplacer;\n\t}\n}\n\nregisterSingleton(\n\tIWorkspaceIdentityService,\n\tWorkspaceIdentityService,\n\tInstantiationType.Delayed,\n);\n"],
  "mappings": "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",
  "names": []
}
