{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/workspaces/common/workspaceEditing.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { createDecorator } from '../../../../platform/instantiation/common/instantiation.js';\nimport { IWorkspaceFolderCreationData } from '../../../../platform/workspaces/common/workspaces.js';\nimport { URI } from '../../../../base/common/uri.js';\nimport { IWorkspaceIdentifier } from '../../../../platform/workspace/common/workspace.js';\n\nexport const IWorkspaceEditingService = createDecorator<IWorkspaceEditingService>('workspaceEditingService');\n\nexport interface IWorkspaceEditingService {\n\n\treadonly _serviceBrand: undefined;\n\n\t/**\n\t * Add folders to the existing workspace.\n\t * When `donotNotifyError` is `true`, error will be bubbled up otherwise, the service handles the error with proper message and action\n\t */\n\taddFolders(folders: IWorkspaceFolderCreationData[], donotNotifyError?: boolean): Promise<void>;\n\n\t/**\n\t * Remove folders from the existing workspace\n\t * When `donotNotifyError` is `true`, error will be bubbled up otherwise, the service handles the error with proper message and action\n\t */\n\tremoveFolders(folders: URI[], donotNotifyError?: boolean): Promise<void>;\n\n\t/**\n\t * Allows to add and remove folders to the existing workspace at once.\n\t * When `donotNotifyError` is `true`, error will be bubbled up otherwise, the service handles the error with proper message and action\n\t */\n\tupdateFolders(index: number, deleteCount?: number, foldersToAdd?: IWorkspaceFolderCreationData[], donotNotifyError?: boolean): Promise<void>;\n\n\t/**\n\t * Enters the workspace with the provided path.\n\t */\n\tenterWorkspace(path: URI): Promise<void>;\n\n\t/**\n\t * Creates a new workspace with the provided folders and opens it. if path is provided\n\t * the workspace will be saved into that location.\n\t */\n\tcreateAndEnterWorkspace(folders: IWorkspaceFolderCreationData[], path?: URI): Promise<void>;\n\n\t/**\n\t * Saves the current workspace to the provided path and opens it. requires a workspace to be opened.\n\t */\n\tsaveAndEnterWorkspace(path: URI): Promise<void>;\n\n\t/**\n\t * Copies current workspace settings to the target workspace.\n\t */\n\tcopyWorkspaceSettings(toWorkspace: IWorkspaceIdentifier): Promise<void>;\n\n\t/**\n\t * Picks a new workspace path\n\t */\n\tpickNewWorkspacePath(): Promise<URI | undefined>;\n}\n"],
  "mappings": "AAKA,SAAS,uBAAuB;AAChC,SAAS,oCAAoC;AAC7C,SAAS,WAAW;AACpB,SAAS,4BAA4B;AAE9B,MAAM,2BAA2B,gBAA0C,yBAAyB;",
  "names": []
}
