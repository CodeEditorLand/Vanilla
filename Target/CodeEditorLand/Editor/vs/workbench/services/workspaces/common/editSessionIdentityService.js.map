{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/workspaces/common/editSessionIdentityService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { insert } from '../../../../base/common/arrays.js';\nimport { CancellationToken } from '../../../../base/common/cancellation.js';\nimport { IDisposable, toDisposable } from '../../../../base/common/lifecycle.js';\nimport { InstantiationType, registerSingleton } from '../../../../platform/instantiation/common/extensions.js';\nimport { ILogService } from '../../../../platform/log/common/log.js';\nimport { EditSessionIdentityMatch, IEditSessionIdentityCreateParticipant, IEditSessionIdentityProvider, IEditSessionIdentityService } from '../../../../platform/workspace/common/editSessions.js';\nimport { IWorkspaceFolder } from '../../../../platform/workspace/common/workspace.js';\nimport { IExtensionService } from '../../extensions/common/extensions.js';\n\nexport class EditSessionIdentityService implements IEditSessionIdentityService {\n\treadonly _serviceBrand: undefined;\n\n\tprivate _editSessionIdentifierProviders = new Map<string, IEditSessionIdentityProvider>();\n\n\tconstructor(\n\t\t@IExtensionService private readonly _extensionService: IExtensionService,\n\t\t@ILogService private readonly _logService: ILogService,\n\t) { }\n\n\tregisterEditSessionIdentityProvider(provider: IEditSessionIdentityProvider): IDisposable {\n\t\tif (this._editSessionIdentifierProviders.get(provider.scheme)) {\n\t\t\tthrow new Error(`A provider has already been registered for scheme ${provider.scheme}`);\n\t\t}\n\n\t\tthis._editSessionIdentifierProviders.set(provider.scheme, provider);\n\t\treturn toDisposable(() => {\n\t\t\tthis._editSessionIdentifierProviders.delete(provider.scheme);\n\t\t});\n\t}\n\n\tasync getEditSessionIdentifier(workspaceFolder: IWorkspaceFolder, token: CancellationToken): Promise<string | undefined> {\n\t\tconst { scheme } = workspaceFolder.uri;\n\n\t\tconst provider = await this.activateProvider(scheme);\n\t\tthis._logService.trace(`EditSessionIdentityProvider for scheme ${scheme} available: ${!!provider}`);\n\n\t\treturn provider?.getEditSessionIdentifier(workspaceFolder, token);\n\t}\n\n\tasync provideEditSessionIdentityMatch(workspaceFolder: IWorkspaceFolder, identity1: string, identity2: string, cancellationToken: CancellationToken): Promise<EditSessionIdentityMatch | undefined> {\n\t\tconst { scheme } = workspaceFolder.uri;\n\n\t\tconst provider = await this.activateProvider(scheme);\n\t\tthis._logService.trace(`EditSessionIdentityProvider for scheme ${scheme} available: ${!!provider}`);\n\n\t\treturn provider?.provideEditSessionIdentityMatch?.(workspaceFolder, identity1, identity2, cancellationToken);\n\t}\n\n\tasync onWillCreateEditSessionIdentity(workspaceFolder: IWorkspaceFolder, cancellationToken: CancellationToken): Promise<void> {\n\t\tthis._logService.debug('Running onWillCreateEditSessionIdentity participants...');\n\n\t\t// TODO@joyceerhl show progress notification?\n\t\tfor (const participant of this._participants) {\n\t\t\tawait participant.participate(workspaceFolder, cancellationToken);\n\t\t}\n\n\t\tthis._logService.debug(`Done running ${this._participants.length} onWillCreateEditSessionIdentity participants.`);\n\t}\n\n\tprivate _participants: IEditSessionIdentityCreateParticipant[] = [];\n\n\taddEditSessionIdentityCreateParticipant(participant: IEditSessionIdentityCreateParticipant): IDisposable {\n\t\tconst dispose = insert(this._participants, participant);\n\n\t\treturn toDisposable(() => dispose());\n\t}\n\n\tprivate async activateProvider(scheme: string) {\n\t\tconst transformedScheme = scheme === 'vscode-remote' ? 'file' : scheme;\n\n\t\tconst provider = this._editSessionIdentifierProviders.get(scheme);\n\t\tif (provider) {\n\t\t\treturn provider;\n\t\t}\n\n\t\tawait this._extensionService.activateByEvent(`onEditSession:${transformedScheme}`);\n\t\treturn this._editSessionIdentifierProviders.get(scheme);\n\t}\n}\n\nregisterSingleton(IEditSessionIdentityService, EditSessionIdentityService, InstantiationType.Delayed);\n"],
  "mappings": ";;;;;;;;;;;;AAKA,SAAS,cAAc;AACvB,SAAS,yBAAyB;AAClC,SAAS,aAAa,oBAAoB;AAC1C,SAAS,mBAAmB,yBAAyB;AACrD,SAAS,mBAAmB;AAC5B,SAAS,0BAA0B,uCAAuC,8BAA8B,mCAAmC;AAC3I,SAAS,wBAAwB;AACjC,SAAS,yBAAyB;AAE3B,IAAM,6BAAN,MAAwE;AAAA,EAK9E,YACqC,mBACN,aAC7B;AAFmC;AACN;AAAA,EAC3B;AAAA,EAtBL,OAc+E;AAAA;AAAA;AAAA,EACrE;AAAA,EAED,kCAAkC,oBAAI,IAA0C;AAAA,EAOxF,oCAAoC,UAAqD;AACxF,QAAI,KAAK,gCAAgC,IAAI,SAAS,MAAM,GAAG;AAC9D,YAAM,IAAI,MAAM,qDAAqD,SAAS,MAAM,EAAE;AAAA,IACvF;AAEA,SAAK,gCAAgC,IAAI,SAAS,QAAQ,QAAQ;AAClE,WAAO,aAAa,MAAM;AACzB,WAAK,gCAAgC,OAAO,SAAS,MAAM;AAAA,IAC5D,CAAC;AAAA,EACF;AAAA,EAEA,MAAM,yBAAyB,iBAAmC,OAAuD;AACxH,UAAM,EAAE,OAAO,IAAI,gBAAgB;AAEnC,UAAM,WAAW,MAAM,KAAK,iBAAiB,MAAM;AACnD,SAAK,YAAY,MAAM,0CAA0C,MAAM,eAAe,CAAC,CAAC,QAAQ,EAAE;AAElG,WAAO,UAAU,yBAAyB,iBAAiB,KAAK;AAAA,EACjE;AAAA,EAEA,MAAM,gCAAgC,iBAAmC,WAAmB,WAAmB,mBAAqF;AACnM,UAAM,EAAE,OAAO,IAAI,gBAAgB;AAEnC,UAAM,WAAW,MAAM,KAAK,iBAAiB,MAAM;AACnD,SAAK,YAAY,MAAM,0CAA0C,MAAM,eAAe,CAAC,CAAC,QAAQ,EAAE;AAElG,WAAO,UAAU,kCAAkC,iBAAiB,WAAW,WAAW,iBAAiB;AAAA,EAC5G;AAAA,EAEA,MAAM,gCAAgC,iBAAmC,mBAAqD;AAC7H,SAAK,YAAY,MAAM,yDAAyD;AAGhF,eAAW,eAAe,KAAK,eAAe;AAC7C,YAAM,YAAY,YAAY,iBAAiB,iBAAiB;AAAA,IACjE;AAEA,SAAK,YAAY,MAAM,gBAAgB,KAAK,cAAc,MAAM,gDAAgD;AAAA,EACjH;AAAA,EAEQ,gBAAyD,CAAC;AAAA,EAElE,wCAAwC,aAAiE;AACxG,UAAM,UAAU,OAAO,KAAK,eAAe,WAAW;AAEtD,WAAO,aAAa,MAAM,QAAQ,CAAC;AAAA,EACpC;AAAA,EAEA,MAAc,iBAAiB,QAAgB;AAC9C,UAAM,oBAAoB,WAAW,kBAAkB,SAAS;AAEhE,UAAM,WAAW,KAAK,gCAAgC,IAAI,MAAM;AAChE,QAAI,UAAU;AACb,aAAO;AAAA,IACR;AAEA,UAAM,KAAK,kBAAkB,gBAAgB,iBAAiB,iBAAiB,EAAE;AACjF,WAAO,KAAK,gCAAgC,IAAI,MAAM;AAAA,EACvD;AACD;AArEa,6BAAN;AAAA,EAMJ;AAAA,EACA;AAAA,GAPU;AAuEb,kBAAkB,6BAA6B,4BAA4B,kBAAkB,OAAO;",
  "names": []
}
