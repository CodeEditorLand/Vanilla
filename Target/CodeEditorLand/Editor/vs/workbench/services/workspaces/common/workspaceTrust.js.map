{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/workspaces/common/workspaceTrust.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { promiseWithResolvers } from \"../../../../base/common/async.js\";\nimport { Emitter, Event } from \"../../../../base/common/event.js\";\nimport {\n\tDisposable,\n\tDisposableStore,\n\ttype IDisposable,\n\ttoDisposable,\n} from \"../../../../base/common/lifecycle.js\";\nimport { LinkedList } from \"../../../../base/common/linkedList.js\";\nimport { Schemas } from \"../../../../base/common/network.js\";\nimport { isWeb } from \"../../../../base/common/platform.js\";\nimport { isEqualAuthority } from \"../../../../base/common/resources.js\";\nimport { URI } from \"../../../../base/common/uri.js\";\nimport { IConfigurationService } from \"../../../../platform/configuration/common/configuration.js\";\nimport { IFileService } from \"../../../../platform/files/common/files.js\";\nimport {\n\tInstantiationType,\n\tregisterSingleton,\n} from \"../../../../platform/instantiation/common/extensions.js\";\nimport {\n\tIRemoteAuthorityResolverService,\n\ttype ResolverResult,\n} from \"../../../../platform/remote/common/remoteAuthorityResolver.js\";\nimport { getRemoteAuthority } from \"../../../../platform/remote/common/remoteHosts.js\";\nimport {\n\tIStorageService,\n\tStorageScope,\n\tStorageTarget,\n} from \"../../../../platform/storage/common/storage.js\";\nimport { IUriIdentityService } from \"../../../../platform/uriIdentity/common/uriIdentity.js\";\nimport type { IPath } from \"../../../../platform/window/common/window.js\";\nimport { isVirtualResource } from \"../../../../platform/workspace/common/virtualWorkspace.js\";\nimport {\n\ttype ISingleFolderWorkspaceIdentifier,\n\ttype IWorkspace,\n\tIWorkspaceContextService,\n\ttype IWorkspaceFolder,\n\tWorkbenchState,\n\tisSavedWorkspace,\n\tisSingleFolderWorkspaceIdentifier,\n\tisTemporaryWorkspace,\n\ttoWorkspaceIdentifier,\n} from \"../../../../platform/workspace/common/workspace.js\";\nimport {\n\tIWorkspaceTrustEnablementService,\n\ttype IWorkspaceTrustInfo,\n\tIWorkspaceTrustManagementService,\n\tIWorkspaceTrustRequestService,\n\ttype IWorkspaceTrustTransitionParticipant,\n\ttype IWorkspaceTrustUriInfo,\n\ttype WorkspaceTrustRequestOptions,\n\tWorkspaceTrustUriResponse,\n} from \"../../../../platform/workspace/common/workspaceTrust.js\";\nimport { Memento, type MementoObject } from \"../../../common/memento.js\";\nimport { IWorkbenchEnvironmentService } from \"../../environment/common/environmentService.js\";\n\nexport const WORKSPACE_TRUST_ENABLED = \"security.workspace.trust.enabled\";\nexport const WORKSPACE_TRUST_STARTUP_PROMPT =\n\t\"security.workspace.trust.startupPrompt\";\nexport const WORKSPACE_TRUST_BANNER = \"security.workspace.trust.banner\";\nexport const WORKSPACE_TRUST_UNTRUSTED_FILES =\n\t\"security.workspace.trust.untrustedFiles\";\nexport const WORKSPACE_TRUST_EMPTY_WINDOW =\n\t\"security.workspace.trust.emptyWindow\";\nexport const WORKSPACE_TRUST_EXTENSION_SUPPORT =\n\t\"extensions.supportUntrustedWorkspaces\";\nexport const WORKSPACE_TRUST_STORAGE_KEY = \"content.trust.model.key\";\n\nexport class CanonicalWorkspace implements IWorkspace {\n\tconstructor(\n\t\tprivate readonly originalWorkspace: IWorkspace,\n\t\tprivate readonly canonicalFolderUris: URI[],\n\t\tprivate readonly canonicalConfiguration: URI | null | undefined,\n\t) {}\n\n\tget folders(): IWorkspaceFolder[] {\n\t\treturn this.originalWorkspace.folders.map((folder, index) => {\n\t\t\treturn {\n\t\t\t\tindex: folder.index,\n\t\t\t\tname: folder.name,\n\t\t\t\ttoResource: folder.toResource,\n\t\t\t\turi: this.canonicalFolderUris[index],\n\t\t\t};\n\t\t});\n\t}\n\n\tget transient(): boolean | undefined {\n\t\treturn this.originalWorkspace.transient;\n\t}\n\n\tget configuration(): URI | null | undefined {\n\t\treturn (\n\t\t\tthis.canonicalConfiguration ?? this.originalWorkspace.configuration\n\t\t);\n\t}\n\n\tget id(): string {\n\t\treturn this.originalWorkspace.id;\n\t}\n}\n\nexport class WorkspaceTrustEnablementService\n\textends Disposable\n\timplements IWorkspaceTrustEnablementService\n{\n\t_serviceBrand: undefined;\n\n\tconstructor(\n\t\t@IConfigurationService private readonly configurationService: IConfigurationService,\n\t\t@IWorkbenchEnvironmentService private readonly environmentService: IWorkbenchEnvironmentService\n\t) {\n\t\tsuper();\n\t}\n\n\tisWorkspaceTrustEnabled(): boolean {\n\t\tif (this.environmentService.disableWorkspaceTrust) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn !!this.configurationService.getValue(WORKSPACE_TRUST_ENABLED);\n\t}\n}\n\nexport class WorkspaceTrustManagementService\n\textends Disposable\n\timplements IWorkspaceTrustManagementService\n{\n\t_serviceBrand: undefined;\n\n\tprivate readonly storageKey = WORKSPACE_TRUST_STORAGE_KEY;\n\n\tprivate readonly _workspaceResolvedPromise: Promise<void>;\n\tprivate readonly _workspaceResolvedPromiseResolve: () => void;\n\tprivate readonly _workspaceTrustInitializedPromise: Promise<void>;\n\tprivate readonly _workspaceTrustInitializedPromiseResolve: () => void;\n\n\tprivate readonly _onDidChangeTrust = this._register(new Emitter<boolean>());\n\treadonly onDidChangeTrust = this._onDidChangeTrust.event;\n\n\tprivate readonly _onDidChangeTrustedFolders = this._register(\n\t\tnew Emitter<void>(),\n\t);\n\treadonly onDidChangeTrustedFolders = this._onDidChangeTrustedFolders.event;\n\n\tprivate _canonicalStartupFiles: URI[] = [];\n\tprivate _canonicalWorkspace: IWorkspace;\n\tprivate _canonicalUrisResolved: boolean;\n\n\tprivate _isTrusted: boolean;\n\tprivate _trustStateInfo: IWorkspaceTrustInfo;\n\tprivate _remoteAuthority: ResolverResult | undefined;\n\n\tprivate readonly _storedTrustState: WorkspaceTrustMemento;\n\tprivate readonly _trustTransitionManager: WorkspaceTrustTransitionManager;\n\n\tconstructor(\n\t\t@IConfigurationService private readonly configurationService: IConfigurationService,\n\t\t@IRemoteAuthorityResolverService private readonly remoteAuthorityResolverService: IRemoteAuthorityResolverService,\n\t\t@IStorageService private readonly storageService: IStorageService,\n\t\t@IUriIdentityService private readonly uriIdentityService: IUriIdentityService,\n\t\t@IWorkbenchEnvironmentService private readonly environmentService: IWorkbenchEnvironmentService,\n\t\t@IWorkspaceContextService private readonly workspaceService: IWorkspaceContextService,\n\t\t@IWorkspaceTrustEnablementService private readonly workspaceTrustEnablementService: IWorkspaceTrustEnablementService,\n\t\t@IFileService private readonly fileService: IFileService\n\t) {\n\t\tsuper();\n\n\t\tthis._canonicalUrisResolved = false;\n\t\tthis._canonicalWorkspace = this.workspaceService.getWorkspace();\n\n\t\t({ promise: this._workspaceResolvedPromise, resolve: this._workspaceResolvedPromiseResolve } = promiseWithResolvers());\n\t\t({ promise: this._workspaceTrustInitializedPromise, resolve: this._workspaceTrustInitializedPromiseResolve } = promiseWithResolvers());\n\n\t\tthis._storedTrustState = new WorkspaceTrustMemento(isWeb && this.isEmptyWorkspace() ? undefined : this.storageService);\n\t\tthis._trustTransitionManager = this._register(new WorkspaceTrustTransitionManager());\n\n\t\tthis._trustStateInfo = this.loadTrustInfo();\n\t\tthis._isTrusted = this.calculateWorkspaceTrust();\n\n\t\tthis.initializeWorkspaceTrust();\n\t\tthis.registerListeners();\n\t}\n\n\t//#region initialize\n\n\tprivate initializeWorkspaceTrust(): void {\n\t\t// Resolve canonical Uris\n\t\tthis.resolveCanonicalUris()\n\t\t\t.then(async () => {\n\t\t\t\tthis._canonicalUrisResolved = true;\n\t\t\t\tawait this.updateWorkspaceTrust();\n\t\t\t})\n\t\t\t.finally(() => {\n\t\t\t\tthis._workspaceResolvedPromiseResolve();\n\n\t\t\t\tif (!this.environmentService.remoteAuthority) {\n\t\t\t\t\tthis._workspaceTrustInitializedPromiseResolve();\n\t\t\t\t}\n\t\t\t});\n\n\t\t// Remote - resolve remote authority\n\t\tif (this.environmentService.remoteAuthority) {\n\t\t\tthis.remoteAuthorityResolverService\n\t\t\t\t.resolveAuthority(this.environmentService.remoteAuthority)\n\t\t\t\t.then(async (result) => {\n\t\t\t\t\tthis._remoteAuthority = result;\n\t\t\t\t\tawait this.fileService.activateProvider(\n\t\t\t\t\t\tSchemas.vscodeRemote,\n\t\t\t\t\t);\n\t\t\t\t\tawait this.updateWorkspaceTrust();\n\t\t\t\t})\n\t\t\t\t.finally(() => {\n\t\t\t\t\tthis._workspaceTrustInitializedPromiseResolve();\n\t\t\t\t});\n\t\t}\n\n\t\t// Empty workspace - save initial state to memento\n\t\tif (this.isEmptyWorkspace()) {\n\t\t\tthis._workspaceTrustInitializedPromise.then(() => {\n\t\t\t\tif (\n\t\t\t\t\tthis._storedTrustState.isEmptyWorkspaceTrusted === undefined\n\t\t\t\t) {\n\t\t\t\t\tthis._storedTrustState.isEmptyWorkspaceTrusted =\n\t\t\t\t\t\tthis.isWorkspaceTrusted();\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}\n\n\t//#endregion\n\n\t//#region private interface\n\n\tprivate registerListeners(): void {\n\t\tthis._register(\n\t\t\tthis.workspaceService.onDidChangeWorkspaceFolders(\n\t\t\t\tasync () => await this.updateWorkspaceTrust(),\n\t\t\t),\n\t\t);\n\t\tthis._register(\n\t\t\tthis.storageService.onDidChangeValue(\n\t\t\t\tStorageScope.APPLICATION,\n\t\t\t\tthis.storageKey,\n\t\t\t\tthis._register(new DisposableStore()),\n\t\t\t)(async () => {\n\t\t\t\t/* This will only execute if storage was changed by a user action in a separate window */\n\t\t\t\tif (\n\t\t\t\t\tJSON.stringify(this._trustStateInfo) !==\n\t\t\t\t\tJSON.stringify(this.loadTrustInfo())\n\t\t\t\t) {\n\t\t\t\t\tthis._trustStateInfo = this.loadTrustInfo();\n\t\t\t\t\tthis._onDidChangeTrustedFolders.fire();\n\n\t\t\t\t\tawait this.updateWorkspaceTrust();\n\t\t\t\t}\n\t\t\t}),\n\t\t);\n\t}\n\n\tprivate async getCanonicalUri(uri: URI): Promise<URI> {\n\t\tlet canonicalUri = uri;\n\t\tif (\n\t\t\tthis.environmentService.remoteAuthority &&\n\t\t\turi.scheme === Schemas.vscodeRemote\n\t\t) {\n\t\t\tcanonicalUri =\n\t\t\t\tawait this.remoteAuthorityResolverService.getCanonicalURI(uri);\n\t\t} else if (uri.scheme === \"vscode-vfs\") {\n\t\t\tconst index = uri.authority.indexOf(\"+\");\n\t\t\tif (index !== -1) {\n\t\t\t\tcanonicalUri = uri.with({\n\t\t\t\t\tauthority: uri.authority.substr(0, index),\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\t// ignore query and fragent section of uris always\n\t\treturn canonicalUri.with({ query: null, fragment: null });\n\t}\n\n\tprivate async resolveCanonicalUris(): Promise<void> {\n\t\t// Open editors\n\t\tconst filesToOpen: IPath[] = [];\n\t\tif (this.environmentService.filesToOpenOrCreate) {\n\t\t\tfilesToOpen.push(...this.environmentService.filesToOpenOrCreate);\n\t\t}\n\n\t\tif (this.environmentService.filesToDiff) {\n\t\t\tfilesToOpen.push(...this.environmentService.filesToDiff);\n\t\t}\n\n\t\tif (this.environmentService.filesToMerge) {\n\t\t\tfilesToOpen.push(...this.environmentService.filesToMerge);\n\t\t}\n\n\t\tif (filesToOpen.length) {\n\t\t\tconst filesToOpenOrCreateUris = filesToOpen\n\t\t\t\t.filter((f) => !!f.fileUri)\n\t\t\t\t.map((f) => f.fileUri!);\n\t\t\tconst canonicalFilesToOpen = await Promise.all(\n\t\t\t\tfilesToOpenOrCreateUris.map((uri) => this.getCanonicalUri(uri)),\n\t\t\t);\n\n\t\t\tthis._canonicalStartupFiles.push(\n\t\t\t\t...canonicalFilesToOpen.filter((uri) =>\n\t\t\t\t\tthis._canonicalStartupFiles.every(\n\t\t\t\t\t\t(u) => !this.uriIdentityService.extUri.isEqual(uri, u),\n\t\t\t\t\t),\n\t\t\t\t),\n\t\t\t);\n\t\t}\n\n\t\t// Workspace\n\t\tconst workspaceUris = this.workspaceService\n\t\t\t.getWorkspace()\n\t\t\t.folders.map((f) => f.uri);\n\t\tconst canonicalWorkspaceFolders = await Promise.all(\n\t\t\tworkspaceUris.map((uri) => this.getCanonicalUri(uri)),\n\t\t);\n\n\t\tlet canonicalWorkspaceConfiguration =\n\t\t\tthis.workspaceService.getWorkspace().configuration;\n\t\tif (\n\t\t\tcanonicalWorkspaceConfiguration &&\n\t\t\tisSavedWorkspace(\n\t\t\t\tcanonicalWorkspaceConfiguration,\n\t\t\t\tthis.environmentService,\n\t\t\t)\n\t\t) {\n\t\t\tcanonicalWorkspaceConfiguration = await this.getCanonicalUri(\n\t\t\t\tcanonicalWorkspaceConfiguration,\n\t\t\t);\n\t\t}\n\n\t\tthis._canonicalWorkspace = new CanonicalWorkspace(\n\t\t\tthis.workspaceService.getWorkspace(),\n\t\t\tcanonicalWorkspaceFolders,\n\t\t\tcanonicalWorkspaceConfiguration,\n\t\t);\n\t}\n\n\tprivate loadTrustInfo(): IWorkspaceTrustInfo {\n\t\tconst infoAsString = this.storageService.get(\n\t\t\tthis.storageKey,\n\t\t\tStorageScope.APPLICATION,\n\t\t);\n\n\t\tlet result: IWorkspaceTrustInfo | undefined;\n\t\ttry {\n\t\t\tif (infoAsString) {\n\t\t\t\tresult = JSON.parse(infoAsString);\n\t\t\t}\n\t\t} catch {}\n\n\t\tif (!result) {\n\t\t\tresult = {\n\t\t\t\turiTrustInfo: [],\n\t\t\t};\n\t\t}\n\n\t\tif (!result.uriTrustInfo) {\n\t\t\tresult.uriTrustInfo = [];\n\t\t}\n\n\t\tresult.uriTrustInfo = result.uriTrustInfo.map((info) => {\n\t\t\treturn { uri: URI.revive(info.uri), trusted: info.trusted };\n\t\t});\n\t\tresult.uriTrustInfo = result.uriTrustInfo.filter(\n\t\t\t(info) => info.trusted,\n\t\t);\n\n\t\treturn result;\n\t}\n\n\tprivate async saveTrustInfo(): Promise<void> {\n\t\tthis.storageService.store(\n\t\t\tthis.storageKey,\n\t\t\tJSON.stringify(this._trustStateInfo),\n\t\t\tStorageScope.APPLICATION,\n\t\t\tStorageTarget.MACHINE,\n\t\t);\n\t\tthis._onDidChangeTrustedFolders.fire();\n\n\t\tawait this.updateWorkspaceTrust();\n\t}\n\n\tprivate getWorkspaceUris(): URI[] {\n\t\tconst workspaceUris = this._canonicalWorkspace.folders.map(\n\t\t\t(f) => f.uri,\n\t\t);\n\t\tconst workspaceConfiguration = this._canonicalWorkspace.configuration;\n\t\tif (\n\t\t\tworkspaceConfiguration &&\n\t\t\tisSavedWorkspace(workspaceConfiguration, this.environmentService)\n\t\t) {\n\t\t\tworkspaceUris.push(workspaceConfiguration);\n\t\t}\n\n\t\treturn workspaceUris;\n\t}\n\n\tprivate calculateWorkspaceTrust(): boolean {\n\t\t// Feature is disabled\n\t\tif (!this.workspaceTrustEnablementService.isWorkspaceTrustEnabled()) {\n\t\t\treturn true;\n\t\t}\n\n\t\t// Canonical Uris not yet resolved\n\t\tif (!this._canonicalUrisResolved) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// Remote - resolver explicitly sets workspace trust to TRUE\n\t\tif (\n\t\t\tthis.environmentService.remoteAuthority &&\n\t\t\tthis._remoteAuthority?.options?.isTrusted\n\t\t) {\n\t\t\treturn this._remoteAuthority.options.isTrusted;\n\t\t}\n\n\t\t// Empty workspace - use memento, open ediors, or user setting\n\t\tif (this.isEmptyWorkspace()) {\n\t\t\t// Use memento if present\n\t\t\tif (this._storedTrustState.isEmptyWorkspaceTrusted !== undefined) {\n\t\t\t\treturn this._storedTrustState.isEmptyWorkspaceTrusted;\n\t\t\t}\n\n\t\t\t// Startup files\n\t\t\tif (this._canonicalStartupFiles.length) {\n\t\t\t\treturn this.getUrisTrust(this._canonicalStartupFiles);\n\t\t\t}\n\n\t\t\t// User setting\n\t\t\treturn !!this.configurationService.getValue(\n\t\t\t\tWORKSPACE_TRUST_EMPTY_WINDOW,\n\t\t\t);\n\t\t}\n\n\t\treturn this.getUrisTrust(this.getWorkspaceUris());\n\t}\n\n\tprivate async updateWorkspaceTrust(trusted?: boolean): Promise<void> {\n\t\tif (!this.workspaceTrustEnablementService.isWorkspaceTrustEnabled()) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (trusted === undefined) {\n\t\t\tawait this.resolveCanonicalUris();\n\t\t\ttrusted = this.calculateWorkspaceTrust();\n\t\t}\n\n\t\tif (this.isWorkspaceTrusted() === trusted) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Update workspace trust\n\t\tthis.isTrusted = trusted;\n\n\t\t// Run workspace trust transition participants\n\t\tawait this._trustTransitionManager.participate(trusted);\n\n\t\t// Fire workspace trust change event\n\t\tthis._onDidChangeTrust.fire(trusted);\n\t}\n\n\tprivate getUrisTrust(uris: URI[]): boolean {\n\t\tlet state = true;\n\t\tfor (const uri of uris) {\n\t\t\tconst { trusted } = this.doGetUriTrustInfo(uri);\n\n\t\t\tif (!trusted) {\n\t\t\t\tstate = trusted;\n\t\t\t\treturn state;\n\t\t\t}\n\t\t}\n\n\t\treturn state;\n\t}\n\n\tprivate doGetUriTrustInfo(uri: URI): IWorkspaceTrustUriInfo {\n\t\t// Return trusted when workspace trust is disabled\n\t\tif (!this.workspaceTrustEnablementService.isWorkspaceTrustEnabled()) {\n\t\t\treturn { trusted: true, uri };\n\t\t}\n\n\t\tif (this.isTrustedVirtualResource(uri)) {\n\t\t\treturn { trusted: true, uri };\n\t\t}\n\n\t\tif (this.isTrustedByRemote(uri)) {\n\t\t\treturn { trusted: true, uri };\n\t\t}\n\n\t\tlet resultState = false;\n\t\tlet maxLength = -1;\n\n\t\tlet resultUri = uri;\n\n\t\tfor (const trustInfo of this._trustStateInfo.uriTrustInfo) {\n\t\t\tif (\n\t\t\t\tthis.uriIdentityService.extUri.isEqualOrParent(\n\t\t\t\t\turi,\n\t\t\t\t\ttrustInfo.uri,\n\t\t\t\t)\n\t\t\t) {\n\t\t\t\tconst fsPath = trustInfo.uri.fsPath;\n\t\t\t\tif (fsPath.length > maxLength) {\n\t\t\t\t\tmaxLength = fsPath.length;\n\t\t\t\t\tresultState = trustInfo.trusted;\n\t\t\t\t\tresultUri = trustInfo.uri;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn { trusted: resultState, uri: resultUri };\n\t}\n\n\tprivate async doSetUrisTrust(uris: URI[], trusted: boolean): Promise<void> {\n\t\tlet changed = false;\n\n\t\tfor (const uri of uris) {\n\t\t\tif (trusted) {\n\t\t\t\tif (this.isTrustedVirtualResource(uri)) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tif (this.isTrustedByRemote(uri)) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tconst foundItem = this._trustStateInfo.uriTrustInfo.find(\n\t\t\t\t\t(trustInfo) =>\n\t\t\t\t\t\tthis.uriIdentityService.extUri.isEqual(\n\t\t\t\t\t\t\ttrustInfo.uri,\n\t\t\t\t\t\t\turi,\n\t\t\t\t\t\t),\n\t\t\t\t);\n\t\t\t\tif (!foundItem) {\n\t\t\t\t\tthis._trustStateInfo.uriTrustInfo.push({\n\t\t\t\t\t\turi,\n\t\t\t\t\t\ttrusted: true,\n\t\t\t\t\t});\n\t\t\t\t\tchanged = true;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tconst previousLength = this._trustStateInfo.uriTrustInfo.length;\n\t\t\t\tthis._trustStateInfo.uriTrustInfo =\n\t\t\t\t\tthis._trustStateInfo.uriTrustInfo.filter(\n\t\t\t\t\t\t(trustInfo) =>\n\t\t\t\t\t\t\t!this.uriIdentityService.extUri.isEqual(\n\t\t\t\t\t\t\t\ttrustInfo.uri,\n\t\t\t\t\t\t\t\turi,\n\t\t\t\t\t\t\t),\n\t\t\t\t\t);\n\t\t\t\tif (\n\t\t\t\t\tpreviousLength !== this._trustStateInfo.uriTrustInfo.length\n\t\t\t\t) {\n\t\t\t\t\tchanged = true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (changed) {\n\t\t\tawait this.saveTrustInfo();\n\t\t}\n\t}\n\n\tprivate isEmptyWorkspace(): boolean {\n\t\tif (\n\t\t\tthis.workspaceService.getWorkbenchState() === WorkbenchState.EMPTY\n\t\t) {\n\t\t\treturn true;\n\t\t}\n\n\t\tconst workspace = this.workspaceService.getWorkspace();\n\t\tif (workspace) {\n\t\t\treturn (\n\t\t\t\tisTemporaryWorkspace(this.workspaceService.getWorkspace()) &&\n\t\t\t\tworkspace.folders.length === 0\n\t\t\t);\n\t\t}\n\n\t\treturn false;\n\t}\n\n\tprivate isTrustedVirtualResource(uri: URI): boolean {\n\t\treturn isVirtualResource(uri) && uri.scheme !== \"vscode-vfs\";\n\t}\n\n\tprivate isTrustedByRemote(uri: URI): boolean {\n\t\tif (!this.environmentService.remoteAuthority) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (!this._remoteAuthority) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn (\n\t\t\tisEqualAuthority(\n\t\t\t\tgetRemoteAuthority(uri),\n\t\t\t\tthis._remoteAuthority.authority.authority,\n\t\t\t) && !!this._remoteAuthority.options?.isTrusted\n\t\t);\n\t}\n\n\tprivate set isTrusted(value: boolean) {\n\t\tthis._isTrusted = value;\n\n\t\t// Reset acceptsOutOfWorkspaceFiles\n\t\tif (!value) {\n\t\t\tthis._storedTrustState.acceptsOutOfWorkspaceFiles = false;\n\t\t}\n\n\t\t// Empty workspace - save memento\n\t\tif (this.isEmptyWorkspace()) {\n\t\t\tthis._storedTrustState.isEmptyWorkspaceTrusted = value;\n\t\t}\n\t}\n\n\t//#endregion\n\n\t//#region public interface\n\n\tget workspaceResolved(): Promise<void> {\n\t\treturn this._workspaceResolvedPromise;\n\t}\n\n\tget workspaceTrustInitialized(): Promise<void> {\n\t\treturn this._workspaceTrustInitializedPromise;\n\t}\n\n\tget acceptsOutOfWorkspaceFiles(): boolean {\n\t\treturn this._storedTrustState.acceptsOutOfWorkspaceFiles;\n\t}\n\n\tset acceptsOutOfWorkspaceFiles(value: boolean) {\n\t\tthis._storedTrustState.acceptsOutOfWorkspaceFiles = value;\n\t}\n\n\tisWorkspaceTrusted(): boolean {\n\t\treturn this._isTrusted;\n\t}\n\n\tisWorkspaceTrustForced(): boolean {\n\t\t// Remote - remote authority explicitly sets workspace trust\n\t\tif (\n\t\t\tthis.environmentService.remoteAuthority &&\n\t\t\tthis._remoteAuthority &&\n\t\t\tthis._remoteAuthority.options?.isTrusted !== undefined\n\t\t) {\n\t\t\treturn true;\n\t\t}\n\n\t\t// All workspace uris are trusted automatically\n\t\tconst workspaceUris = this.getWorkspaceUris().filter(\n\t\t\t(uri) => !this.isTrustedVirtualResource(uri),\n\t\t);\n\t\tif (workspaceUris.length === 0) {\n\t\t\treturn true;\n\t\t}\n\n\t\treturn false;\n\t}\n\n\tcanSetParentFolderTrust(): boolean {\n\t\tconst workspaceIdentifier = toWorkspaceIdentifier(\n\t\t\tthis._canonicalWorkspace,\n\t\t);\n\n\t\tif (!isSingleFolderWorkspaceIdentifier(workspaceIdentifier)) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (\n\t\t\tworkspaceIdentifier.uri.scheme !== Schemas.file &&\n\t\t\tworkspaceIdentifier.uri.scheme !== Schemas.vscodeRemote\n\t\t) {\n\t\t\treturn false;\n\t\t}\n\n\t\tconst parentFolder = this.uriIdentityService.extUri.dirname(\n\t\t\tworkspaceIdentifier.uri,\n\t\t);\n\t\tif (\n\t\t\tthis.uriIdentityService.extUri.isEqual(\n\t\t\t\tworkspaceIdentifier.uri,\n\t\t\t\tparentFolder,\n\t\t\t)\n\t\t) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn true;\n\t}\n\n\tasync setParentFolderTrust(trusted: boolean): Promise<void> {\n\t\tif (this.canSetParentFolderTrust()) {\n\t\t\tconst workspaceUri = (\n\t\t\t\ttoWorkspaceIdentifier(\n\t\t\t\t\tthis._canonicalWorkspace,\n\t\t\t\t) as ISingleFolderWorkspaceIdentifier\n\t\t\t).uri;\n\t\t\tconst parentFolder =\n\t\t\t\tthis.uriIdentityService.extUri.dirname(workspaceUri);\n\n\t\t\tawait this.setUrisTrust([parentFolder], trusted);\n\t\t}\n\t}\n\n\tcanSetWorkspaceTrust(): boolean {\n\t\t// Remote - remote authority not yet resolved, or remote authority explicitly sets workspace trust\n\t\tif (\n\t\t\tthis.environmentService.remoteAuthority &&\n\t\t\t(!this._remoteAuthority ||\n\t\t\t\tthis._remoteAuthority.options?.isTrusted !== undefined)\n\t\t) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// Empty workspace\n\t\tif (this.isEmptyWorkspace()) {\n\t\t\treturn true;\n\t\t}\n\n\t\t// All workspace uris are trusted automatically\n\t\tconst workspaceUris = this.getWorkspaceUris().filter(\n\t\t\t(uri) => !this.isTrustedVirtualResource(uri),\n\t\t);\n\t\tif (workspaceUris.length === 0) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// Untrusted workspace\n\t\tif (!this.isWorkspaceTrusted()) {\n\t\t\treturn true;\n\t\t}\n\n\t\t// Trusted workspaces\n\t\t// Can only untrusted in the single folder scenario\n\t\tconst workspaceIdentifier = toWorkspaceIdentifier(\n\t\t\tthis._canonicalWorkspace,\n\t\t);\n\t\tif (!isSingleFolderWorkspaceIdentifier(workspaceIdentifier)) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// Can only be untrusted in certain schemes\n\t\tif (\n\t\t\tworkspaceIdentifier.uri.scheme !== Schemas.file &&\n\t\t\tworkspaceIdentifier.uri.scheme !== \"vscode-vfs\"\n\t\t) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// If the current folder isn't trusted directly, return false\n\t\tconst trustInfo = this.doGetUriTrustInfo(workspaceIdentifier.uri);\n\t\tif (\n\t\t\t!trustInfo.trusted ||\n\t\t\t!this.uriIdentityService.extUri.isEqual(\n\t\t\t\tworkspaceIdentifier.uri,\n\t\t\t\ttrustInfo.uri,\n\t\t\t)\n\t\t) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// Check if the parent is also trusted\n\t\tif (this.canSetParentFolderTrust()) {\n\t\t\tconst parentFolder = this.uriIdentityService.extUri.dirname(\n\t\t\t\tworkspaceIdentifier.uri,\n\t\t\t);\n\t\t\tconst parentPathTrustInfo = this.doGetUriTrustInfo(parentFolder);\n\t\t\tif (parentPathTrustInfo.trusted) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\treturn true;\n\t}\n\n\tasync setWorkspaceTrust(trusted: boolean): Promise<void> {\n\t\t// Empty workspace\n\t\tif (this.isEmptyWorkspace()) {\n\t\t\tawait this.updateWorkspaceTrust(trusted);\n\t\t\treturn;\n\t\t}\n\n\t\tconst workspaceFolders = this.getWorkspaceUris();\n\t\tawait this.setUrisTrust(workspaceFolders, trusted);\n\t}\n\n\tasync getUriTrustInfo(uri: URI): Promise<IWorkspaceTrustUriInfo> {\n\t\t// Return trusted when workspace trust is disabled\n\t\tif (!this.workspaceTrustEnablementService.isWorkspaceTrustEnabled()) {\n\t\t\treturn { trusted: true, uri };\n\t\t}\n\n\t\t// Uri is trusted automatically by the remote\n\t\tif (this.isTrustedByRemote(uri)) {\n\t\t\treturn { trusted: true, uri };\n\t\t}\n\n\t\treturn this.doGetUriTrustInfo(await this.getCanonicalUri(uri));\n\t}\n\n\tasync setUrisTrust(uris: URI[], trusted: boolean): Promise<void> {\n\t\tthis.doSetUrisTrust(\n\t\t\tawait Promise.all(uris.map((uri) => this.getCanonicalUri(uri))),\n\t\t\ttrusted,\n\t\t);\n\t}\n\n\tgetTrustedUris(): URI[] {\n\t\treturn this._trustStateInfo.uriTrustInfo.map((info) => info.uri);\n\t}\n\n\tasync setTrustedUris(uris: URI[]): Promise<void> {\n\t\tthis._trustStateInfo.uriTrustInfo = [];\n\t\tfor (const uri of uris) {\n\t\t\tconst canonicalUri = await this.getCanonicalUri(uri);\n\t\t\tconst cleanUri =\n\t\t\t\tthis.uriIdentityService.extUri.removeTrailingPathSeparator(\n\t\t\t\t\tcanonicalUri,\n\t\t\t\t);\n\t\t\tlet added = false;\n\t\t\tfor (const addedUri of this._trustStateInfo.uriTrustInfo) {\n\t\t\t\tif (\n\t\t\t\t\tthis.uriIdentityService.extUri.isEqual(\n\t\t\t\t\t\taddedUri.uri,\n\t\t\t\t\t\tcleanUri,\n\t\t\t\t\t)\n\t\t\t\t) {\n\t\t\t\t\tadded = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (added) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tthis._trustStateInfo.uriTrustInfo.push({\n\t\t\t\ttrusted: true,\n\t\t\t\turi: cleanUri,\n\t\t\t});\n\t\t}\n\n\t\tawait this.saveTrustInfo();\n\t}\n\n\taddWorkspaceTrustTransitionParticipant(\n\t\tparticipant: IWorkspaceTrustTransitionParticipant,\n\t): IDisposable {\n\t\treturn this._trustTransitionManager.addWorkspaceTrustTransitionParticipant(\n\t\t\tparticipant,\n\t\t);\n\t}\n\n\t//#endregion\n}\n\nexport class WorkspaceTrustRequestService\n\textends Disposable\n\timplements IWorkspaceTrustRequestService\n{\n\t_serviceBrand: undefined;\n\n\tprivate _openFilesTrustRequestPromise?: Promise<WorkspaceTrustUriResponse>;\n\tprivate _openFilesTrustRequestResolver?: (\n\t\tresponse: WorkspaceTrustUriResponse,\n\t) => void;\n\n\tprivate _workspaceTrustRequestPromise?: Promise<boolean | undefined>;\n\tprivate _workspaceTrustRequestResolver?: (\n\t\ttrusted: boolean | undefined,\n\t) => void;\n\n\tprivate readonly _onDidInitiateOpenFilesTrustRequest = this._register(\n\t\tnew Emitter<void>(),\n\t);\n\treadonly onDidInitiateOpenFilesTrustRequest =\n\t\tthis._onDidInitiateOpenFilesTrustRequest.event;\n\n\tprivate readonly _onDidInitiateWorkspaceTrustRequest = this._register(\n\t\tnew Emitter<WorkspaceTrustRequestOptions | undefined>(),\n\t);\n\treadonly onDidInitiateWorkspaceTrustRequest =\n\t\tthis._onDidInitiateWorkspaceTrustRequest.event;\n\n\tprivate readonly _onDidInitiateWorkspaceTrustRequestOnStartup =\n\t\tthis._register(new Emitter<void>());\n\treadonly onDidInitiateWorkspaceTrustRequestOnStartup =\n\t\tthis._onDidInitiateWorkspaceTrustRequestOnStartup.event;\n\n\tconstructor(\n\t\t@IConfigurationService private readonly configurationService: IConfigurationService,\n\t\t@IWorkspaceTrustManagementService private readonly workspaceTrustManagementService: IWorkspaceTrustManagementService\n\t) {\n\t\tsuper();\n\t}\n\n\t//#region Open file(s) trust request\n\n\tprivate get untrustedFilesSetting(): \"prompt\" | \"open\" | \"newWindow\" {\n\t\treturn this.configurationService.getValue(\n\t\t\tWORKSPACE_TRUST_UNTRUSTED_FILES,\n\t\t);\n\t}\n\n\tprivate set untrustedFilesSetting(value: \"prompt\" | \"open\" | \"newWindow\") {\n\t\tthis.configurationService.updateValue(\n\t\t\tWORKSPACE_TRUST_UNTRUSTED_FILES,\n\t\t\tvalue,\n\t\t);\n\t}\n\n\tasync completeOpenFilesTrustRequest(\n\t\tresult: WorkspaceTrustUriResponse,\n\t\tsaveResponse?: boolean,\n\t): Promise<void> {\n\t\tif (!this._openFilesTrustRequestResolver) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Set acceptsOutOfWorkspaceFiles\n\t\tif (result === WorkspaceTrustUriResponse.Open) {\n\t\t\tthis.workspaceTrustManagementService.acceptsOutOfWorkspaceFiles = true;\n\t\t}\n\n\t\t// Save response\n\t\tif (saveResponse) {\n\t\t\tif (result === WorkspaceTrustUriResponse.Open) {\n\t\t\t\tthis.untrustedFilesSetting = \"open\";\n\t\t\t}\n\n\t\t\tif (result === WorkspaceTrustUriResponse.OpenInNewWindow) {\n\t\t\t\tthis.untrustedFilesSetting = \"newWindow\";\n\t\t\t}\n\t\t}\n\n\t\t// Resolve promise\n\t\tthis._openFilesTrustRequestResolver(result);\n\n\t\tthis._openFilesTrustRequestResolver = undefined;\n\t\tthis._openFilesTrustRequestPromise = undefined;\n\t}\n\n\tasync requestOpenFilesTrust(\n\t\turis: URI[],\n\t): Promise<WorkspaceTrustUriResponse> {\n\t\t// If workspace is untrusted, there is no conflict\n\t\tif (!this.workspaceTrustManagementService.isWorkspaceTrusted()) {\n\t\t\treturn WorkspaceTrustUriResponse.Open;\n\t\t}\n\n\t\tconst openFilesTrustInfo = await Promise.all(\n\t\t\turis.map((uri) =>\n\t\t\t\tthis.workspaceTrustManagementService.getUriTrustInfo(uri),\n\t\t\t),\n\t\t);\n\n\t\t// If all uris are trusted, there is no conflict\n\t\tif (\n\t\t\topenFilesTrustInfo\n\t\t\t\t.map((info) => info.trusted)\n\t\t\t\t.every((trusted) => trusted)\n\t\t) {\n\t\t\treturn WorkspaceTrustUriResponse.Open;\n\t\t}\n\n\t\t// If user has setting, don't need to ask\n\t\tif (this.untrustedFilesSetting !== \"prompt\") {\n\t\t\tif (this.untrustedFilesSetting === \"newWindow\") {\n\t\t\t\treturn WorkspaceTrustUriResponse.OpenInNewWindow;\n\t\t\t}\n\n\t\t\tif (this.untrustedFilesSetting === \"open\") {\n\t\t\t\treturn WorkspaceTrustUriResponse.Open;\n\t\t\t}\n\t\t}\n\n\t\t// If we already asked the user, don't need to ask again\n\t\tif (this.workspaceTrustManagementService.acceptsOutOfWorkspaceFiles) {\n\t\t\treturn WorkspaceTrustUriResponse.Open;\n\t\t}\n\n\t\t// Create/return a promise\n\t\tif (this._openFilesTrustRequestPromise) {\n\t\t\treturn this._openFilesTrustRequestPromise;\n\t\t} else {\n\t\t\tthis._openFilesTrustRequestPromise =\n\t\t\t\tnew Promise<WorkspaceTrustUriResponse>((resolve) => {\n\t\t\t\t\tthis._openFilesTrustRequestResolver = resolve;\n\t\t\t\t});\n\t\t}\n\n\t\tthis._onDidInitiateOpenFilesTrustRequest.fire();\n\t\treturn this._openFilesTrustRequestPromise;\n\t}\n\n\t//#endregion\n\n\t//#region Workspace trust request\n\n\tprivate resolveWorkspaceTrustRequest(trusted?: boolean): void {\n\t\tif (this._workspaceTrustRequestResolver) {\n\t\t\tthis._workspaceTrustRequestResolver(\n\t\t\t\ttrusted ??\n\t\t\t\t\tthis.workspaceTrustManagementService.isWorkspaceTrusted(),\n\t\t\t);\n\n\t\t\tthis._workspaceTrustRequestResolver = undefined;\n\t\t\tthis._workspaceTrustRequestPromise = undefined;\n\t\t}\n\t}\n\n\tcancelWorkspaceTrustRequest(): void {\n\t\tif (this._workspaceTrustRequestResolver) {\n\t\t\tthis._workspaceTrustRequestResolver(undefined);\n\n\t\t\tthis._workspaceTrustRequestResolver = undefined;\n\t\t\tthis._workspaceTrustRequestPromise = undefined;\n\t\t}\n\t}\n\n\tasync completeWorkspaceTrustRequest(trusted?: boolean): Promise<void> {\n\t\tif (\n\t\t\ttrusted === undefined ||\n\t\t\ttrusted ===\n\t\t\t\tthis.workspaceTrustManagementService.isWorkspaceTrusted()\n\t\t) {\n\t\t\tthis.resolveWorkspaceTrustRequest(trusted);\n\t\t\treturn;\n\t\t}\n\n\t\t// Register one-time event handler to resolve the promise when workspace trust changed\n\t\tEvent.once(this.workspaceTrustManagementService.onDidChangeTrust)(\n\t\t\t(trusted) => this.resolveWorkspaceTrustRequest(trusted),\n\t\t);\n\n\t\t// Update storage, transition workspace state\n\t\tawait this.workspaceTrustManagementService.setWorkspaceTrust(trusted);\n\t}\n\n\tasync requestWorkspaceTrust(\n\t\toptions?: WorkspaceTrustRequestOptions,\n\t): Promise<boolean | undefined> {\n\t\t// Trusted workspace\n\t\tif (this.workspaceTrustManagementService.isWorkspaceTrusted()) {\n\t\t\treturn this.workspaceTrustManagementService.isWorkspaceTrusted();\n\t\t}\n\n\t\t// Modal request\n\t\tif (this._workspaceTrustRequestPromise) {\n\t\t\t// Return existing promise\n\t\t\treturn this._workspaceTrustRequestPromise;\n\t\t} else {\n\t\t\t// Create promise\n\t\t\tthis._workspaceTrustRequestPromise = new Promise((resolve) => {\n\t\t\t\tthis._workspaceTrustRequestResolver = resolve;\n\t\t\t});\n\t\t}\n\n\t\tthis._onDidInitiateWorkspaceTrustRequest.fire(options);\n\t\treturn this._workspaceTrustRequestPromise;\n\t}\n\n\trequestWorkspaceTrustOnStartup(): void {\n\t\tif (!this._workspaceTrustRequestPromise) {\n\t\t\t// Create promise\n\t\t\tthis._workspaceTrustRequestPromise = new Promise((resolve) => {\n\t\t\t\tthis._workspaceTrustRequestResolver = resolve;\n\t\t\t});\n\t\t}\n\n\t\tthis._onDidInitiateWorkspaceTrustRequestOnStartup.fire();\n\t}\n\n\t//#endregion\n}\n\nclass WorkspaceTrustTransitionManager extends Disposable {\n\tprivate readonly participants =\n\t\tnew LinkedList<IWorkspaceTrustTransitionParticipant>();\n\n\taddWorkspaceTrustTransitionParticipant(\n\t\tparticipant: IWorkspaceTrustTransitionParticipant,\n\t): IDisposable {\n\t\tconst remove = this.participants.push(participant);\n\t\treturn toDisposable(() => remove());\n\t}\n\n\tasync participate(trusted: boolean): Promise<void> {\n\t\tfor (const participant of this.participants) {\n\t\t\tawait participant.participate(trusted);\n\t\t}\n\t}\n\n\toverride dispose(): void {\n\t\tthis.participants.clear();\n\t\tsuper.dispose();\n\t}\n}\n\nclass WorkspaceTrustMemento {\n\tprivate readonly _memento?: Memento;\n\tprivate readonly _mementoObject: MementoObject;\n\n\tprivate readonly _acceptsOutOfWorkspaceFilesKey =\n\t\t\"acceptsOutOfWorkspaceFiles\";\n\tprivate readonly _isEmptyWorkspaceTrustedKey = \"isEmptyWorkspaceTrusted\";\n\n\tconstructor(storageService?: IStorageService) {\n\t\tif (storageService) {\n\t\t\tthis._memento = new Memento(\"workspaceTrust\", storageService);\n\t\t\tthis._mementoObject = this._memento.getMemento(\n\t\t\t\tStorageScope.WORKSPACE,\n\t\t\t\tStorageTarget.MACHINE,\n\t\t\t);\n\t\t} else {\n\t\t\tthis._mementoObject = {};\n\t\t}\n\t}\n\n\tget acceptsOutOfWorkspaceFiles(): boolean {\n\t\treturn (\n\t\t\tthis._mementoObject[this._acceptsOutOfWorkspaceFilesKey] ?? false\n\t\t);\n\t}\n\n\tset acceptsOutOfWorkspaceFiles(value: boolean) {\n\t\tthis._mementoObject[this._acceptsOutOfWorkspaceFilesKey] = value;\n\n\t\tthis._memento?.saveMemento();\n\t}\n\n\tget isEmptyWorkspaceTrusted(): boolean | undefined {\n\t\treturn this._mementoObject[this._isEmptyWorkspaceTrustedKey];\n\t}\n\n\tset isEmptyWorkspaceTrusted(value: boolean | undefined) {\n\t\tthis._mementoObject[this._isEmptyWorkspaceTrustedKey] = value;\n\n\t\tthis._memento?.saveMemento();\n\t}\n}\n\nregisterSingleton(\n\tIWorkspaceTrustRequestService,\n\tWorkspaceTrustRequestService,\n\tInstantiationType.Delayed,\n);\n"],
  "mappings": "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",
  "names": ["trusted"]
}
