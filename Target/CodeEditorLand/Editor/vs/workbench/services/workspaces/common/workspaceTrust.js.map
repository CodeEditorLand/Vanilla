{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/workspaces/common/workspaceTrust.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Emitter, Event } from '../../../../base/common/event.js';\nimport { Disposable, DisposableStore, IDisposable, toDisposable } from '../../../../base/common/lifecycle.js';\nimport { LinkedList } from '../../../../base/common/linkedList.js';\nimport { Schemas } from '../../../../base/common/network.js';\nimport { URI } from '../../../../base/common/uri.js';\nimport { IPath } from '../../../../platform/window/common/window.js';\nimport { IConfigurationService } from '../../../../platform/configuration/common/configuration.js';\nimport { InstantiationType, registerSingleton } from '../../../../platform/instantiation/common/extensions.js';\nimport { IRemoteAuthorityResolverService, ResolverResult } from '../../../../platform/remote/common/remoteAuthorityResolver.js';\nimport { getRemoteAuthority } from '../../../../platform/remote/common/remoteHosts.js';\nimport { isVirtualResource } from '../../../../platform/workspace/common/virtualWorkspace.js';\nimport { IStorageService, StorageScope, StorageTarget } from '../../../../platform/storage/common/storage.js';\nimport { ISingleFolderWorkspaceIdentifier, isSavedWorkspace, isSingleFolderWorkspaceIdentifier, isTemporaryWorkspace, IWorkspace, IWorkspaceContextService, IWorkspaceFolder, toWorkspaceIdentifier, WorkbenchState } from '../../../../platform/workspace/common/workspace.js';\nimport { WorkspaceTrustRequestOptions, IWorkspaceTrustManagementService, IWorkspaceTrustInfo, IWorkspaceTrustUriInfo, IWorkspaceTrustRequestService, IWorkspaceTrustTransitionParticipant, WorkspaceTrustUriResponse, IWorkspaceTrustEnablementService } from '../../../../platform/workspace/common/workspaceTrust.js';\nimport { Memento, MementoObject } from '../../../common/memento.js';\nimport { IWorkbenchEnvironmentService } from '../../environment/common/environmentService.js';\nimport { IUriIdentityService } from '../../../../platform/uriIdentity/common/uriIdentity.js';\nimport { isEqualAuthority } from '../../../../base/common/resources.js';\nimport { isWeb } from '../../../../base/common/platform.js';\nimport { IFileService } from '../../../../platform/files/common/files.js';\nimport { promiseWithResolvers } from '../../../../base/common/async.js';\n\nexport const WORKSPACE_TRUST_ENABLED = 'security.workspace.trust.enabled';\nexport const WORKSPACE_TRUST_STARTUP_PROMPT = 'security.workspace.trust.startupPrompt';\nexport const WORKSPACE_TRUST_BANNER = 'security.workspace.trust.banner';\nexport const WORKSPACE_TRUST_UNTRUSTED_FILES = 'security.workspace.trust.untrustedFiles';\nexport const WORKSPACE_TRUST_EMPTY_WINDOW = 'security.workspace.trust.emptyWindow';\nexport const WORKSPACE_TRUST_EXTENSION_SUPPORT = 'extensions.supportUntrustedWorkspaces';\nexport const WORKSPACE_TRUST_STORAGE_KEY = 'content.trust.model.key';\n\nexport class CanonicalWorkspace implements IWorkspace {\n\tconstructor(\n\t\tprivate readonly originalWorkspace: IWorkspace,\n\t\tprivate readonly canonicalFolderUris: URI[],\n\t\tprivate readonly canonicalConfiguration: URI | null | undefined\n\t) { }\n\n\n\tget folders(): IWorkspaceFolder[] {\n\t\treturn this.originalWorkspace.folders.map((folder, index) => {\n\t\t\treturn {\n\t\t\t\tindex: folder.index,\n\t\t\t\tname: folder.name,\n\t\t\t\ttoResource: folder.toResource,\n\t\t\t\turi: this.canonicalFolderUris[index]\n\t\t\t};\n\t\t});\n\t}\n\n\tget transient(): boolean | undefined {\n\t\treturn this.originalWorkspace.transient;\n\t}\n\n\tget configuration(): URI | null | undefined {\n\t\treturn this.canonicalConfiguration ?? this.originalWorkspace.configuration;\n\t}\n\n\tget id(): string {\n\t\treturn this.originalWorkspace.id;\n\t}\n}\n\nexport class WorkspaceTrustEnablementService extends Disposable implements IWorkspaceTrustEnablementService {\n\n\t_serviceBrand: undefined;\n\n\tconstructor(\n\t\t@IConfigurationService private readonly configurationService: IConfigurationService,\n\t\t@IWorkbenchEnvironmentService private readonly environmentService: IWorkbenchEnvironmentService\n\t) {\n\t\tsuper();\n\t}\n\n\tisWorkspaceTrustEnabled(): boolean {\n\t\tif (this.environmentService.disableWorkspaceTrust) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn !!this.configurationService.getValue(WORKSPACE_TRUST_ENABLED);\n\t}\n}\n\nexport class WorkspaceTrustManagementService extends Disposable implements IWorkspaceTrustManagementService {\n\n\t_serviceBrand: undefined;\n\n\tprivate readonly storageKey = WORKSPACE_TRUST_STORAGE_KEY;\n\n\tprivate readonly _workspaceResolvedPromise: Promise<void>;\n\tprivate readonly _workspaceResolvedPromiseResolve: () => void;\n\tprivate readonly _workspaceTrustInitializedPromise: Promise<void>;\n\tprivate readonly _workspaceTrustInitializedPromiseResolve: () => void;\n\n\tprivate readonly _onDidChangeTrust = this._register(new Emitter<boolean>());\n\treadonly onDidChangeTrust = this._onDidChangeTrust.event;\n\n\tprivate readonly _onDidChangeTrustedFolders = this._register(new Emitter<void>());\n\treadonly onDidChangeTrustedFolders = this._onDidChangeTrustedFolders.event;\n\n\tprivate _canonicalStartupFiles: URI[] = [];\n\tprivate _canonicalWorkspace: IWorkspace;\n\tprivate _canonicalUrisResolved: boolean;\n\n\tprivate _isTrusted: boolean;\n\tprivate _trustStateInfo: IWorkspaceTrustInfo;\n\tprivate _remoteAuthority: ResolverResult | undefined;\n\n\tprivate readonly _storedTrustState: WorkspaceTrustMemento;\n\tprivate readonly _trustTransitionManager: WorkspaceTrustTransitionManager;\n\n\tconstructor(\n\t\t@IConfigurationService private readonly configurationService: IConfigurationService,\n\t\t@IRemoteAuthorityResolverService private readonly remoteAuthorityResolverService: IRemoteAuthorityResolverService,\n\t\t@IStorageService private readonly storageService: IStorageService,\n\t\t@IUriIdentityService private readonly uriIdentityService: IUriIdentityService,\n\t\t@IWorkbenchEnvironmentService private readonly environmentService: IWorkbenchEnvironmentService,\n\t\t@IWorkspaceContextService private readonly workspaceService: IWorkspaceContextService,\n\t\t@IWorkspaceTrustEnablementService private readonly workspaceTrustEnablementService: IWorkspaceTrustEnablementService,\n\t\t@IFileService private readonly fileService: IFileService\n\t) {\n\t\tsuper();\n\n\t\tthis._canonicalUrisResolved = false;\n\t\tthis._canonicalWorkspace = this.workspaceService.getWorkspace();\n\n\t\t({ promise: this._workspaceResolvedPromise, resolve: this._workspaceResolvedPromiseResolve } = promiseWithResolvers());\n\t\t({ promise: this._workspaceTrustInitializedPromise, resolve: this._workspaceTrustInitializedPromiseResolve } = promiseWithResolvers());\n\n\t\tthis._storedTrustState = new WorkspaceTrustMemento(isWeb && this.isEmptyWorkspace() ? undefined : this.storageService);\n\t\tthis._trustTransitionManager = this._register(new WorkspaceTrustTransitionManager());\n\n\t\tthis._trustStateInfo = this.loadTrustInfo();\n\t\tthis._isTrusted = this.calculateWorkspaceTrust();\n\n\t\tthis.initializeWorkspaceTrust();\n\t\tthis.registerListeners();\n\t}\n\n\t//#region initialize\n\n\tprivate initializeWorkspaceTrust(): void {\n\t\t// Resolve canonical Uris\n\t\tthis.resolveCanonicalUris()\n\t\t\t.then(async () => {\n\t\t\t\tthis._canonicalUrisResolved = true;\n\t\t\t\tawait this.updateWorkspaceTrust();\n\t\t\t})\n\t\t\t.finally(() => {\n\t\t\t\tthis._workspaceResolvedPromiseResolve();\n\n\t\t\t\tif (!this.environmentService.remoteAuthority) {\n\t\t\t\t\tthis._workspaceTrustInitializedPromiseResolve();\n\t\t\t\t}\n\t\t\t});\n\n\t\t// Remote - resolve remote authority\n\t\tif (this.environmentService.remoteAuthority) {\n\t\t\tthis.remoteAuthorityResolverService.resolveAuthority(this.environmentService.remoteAuthority)\n\t\t\t\t.then(async result => {\n\t\t\t\t\tthis._remoteAuthority = result;\n\t\t\t\t\tawait this.fileService.activateProvider(Schemas.vscodeRemote);\n\t\t\t\t\tawait this.updateWorkspaceTrust();\n\t\t\t\t})\n\t\t\t\t.finally(() => {\n\t\t\t\t\tthis._workspaceTrustInitializedPromiseResolve();\n\t\t\t\t});\n\t\t}\n\n\t\t// Empty workspace - save initial state to memento\n\t\tif (this.isEmptyWorkspace()) {\n\t\t\tthis._workspaceTrustInitializedPromise.then(() => {\n\t\t\t\tif (this._storedTrustState.isEmptyWorkspaceTrusted === undefined) {\n\t\t\t\t\tthis._storedTrustState.isEmptyWorkspaceTrusted = this.isWorkspaceTrusted();\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}\n\n\t//#endregion\n\n\t//#region private interface\n\n\tprivate registerListeners(): void {\n\t\tthis._register(this.workspaceService.onDidChangeWorkspaceFolders(async () => await this.updateWorkspaceTrust()));\n\t\tthis._register(this.storageService.onDidChangeValue(StorageScope.APPLICATION, this.storageKey, this._register(new DisposableStore()))(async () => {\n\t\t\t/* This will only execute if storage was changed by a user action in a separate window */\n\t\t\tif (JSON.stringify(this._trustStateInfo) !== JSON.stringify(this.loadTrustInfo())) {\n\t\t\t\tthis._trustStateInfo = this.loadTrustInfo();\n\t\t\t\tthis._onDidChangeTrustedFolders.fire();\n\n\t\t\t\tawait this.updateWorkspaceTrust();\n\t\t\t}\n\t\t}));\n\t}\n\n\tprivate async getCanonicalUri(uri: URI): Promise<URI> {\n\t\tlet canonicalUri = uri;\n\t\tif (this.environmentService.remoteAuthority && uri.scheme === Schemas.vscodeRemote) {\n\t\t\tcanonicalUri = await this.remoteAuthorityResolverService.getCanonicalURI(uri);\n\t\t} else if (uri.scheme === 'vscode-vfs') {\n\t\t\tconst index = uri.authority.indexOf('+');\n\t\t\tif (index !== -1) {\n\t\t\t\tcanonicalUri = uri.with({ authority: uri.authority.substr(0, index) });\n\t\t\t}\n\t\t}\n\n\t\t// ignore query and fragent section of uris always\n\t\treturn canonicalUri.with({ query: null, fragment: null });\n\t}\n\n\tprivate async resolveCanonicalUris(): Promise<void> {\n\t\t// Open editors\n\t\tconst filesToOpen: IPath[] = [];\n\t\tif (this.environmentService.filesToOpenOrCreate) {\n\t\t\tfilesToOpen.push(...this.environmentService.filesToOpenOrCreate);\n\t\t}\n\n\t\tif (this.environmentService.filesToDiff) {\n\t\t\tfilesToOpen.push(...this.environmentService.filesToDiff);\n\t\t}\n\n\t\tif (this.environmentService.filesToMerge) {\n\t\t\tfilesToOpen.push(...this.environmentService.filesToMerge);\n\t\t}\n\n\t\tif (filesToOpen.length) {\n\t\t\tconst filesToOpenOrCreateUris = filesToOpen.filter(f => !!f.fileUri).map(f => f.fileUri!);\n\t\t\tconst canonicalFilesToOpen = await Promise.all(filesToOpenOrCreateUris.map(uri => this.getCanonicalUri(uri)));\n\n\t\t\tthis._canonicalStartupFiles.push(...canonicalFilesToOpen.filter(uri => this._canonicalStartupFiles.every(u => !this.uriIdentityService.extUri.isEqual(uri, u))));\n\t\t}\n\n\t\t// Workspace\n\t\tconst workspaceUris = this.workspaceService.getWorkspace().folders.map(f => f.uri);\n\t\tconst canonicalWorkspaceFolders = await Promise.all(workspaceUris.map(uri => this.getCanonicalUri(uri)));\n\n\t\tlet canonicalWorkspaceConfiguration = this.workspaceService.getWorkspace().configuration;\n\t\tif (canonicalWorkspaceConfiguration && isSavedWorkspace(canonicalWorkspaceConfiguration, this.environmentService)) {\n\t\t\tcanonicalWorkspaceConfiguration = await this.getCanonicalUri(canonicalWorkspaceConfiguration);\n\t\t}\n\n\t\tthis._canonicalWorkspace = new CanonicalWorkspace(this.workspaceService.getWorkspace(), canonicalWorkspaceFolders, canonicalWorkspaceConfiguration);\n\t}\n\n\tprivate loadTrustInfo(): IWorkspaceTrustInfo {\n\t\tconst infoAsString = this.storageService.get(this.storageKey, StorageScope.APPLICATION);\n\n\t\tlet result: IWorkspaceTrustInfo | undefined;\n\t\ttry {\n\t\t\tif (infoAsString) {\n\t\t\t\tresult = JSON.parse(infoAsString);\n\t\t\t}\n\t\t} catch { }\n\n\t\tif (!result) {\n\t\t\tresult = {\n\t\t\t\turiTrustInfo: []\n\t\t\t};\n\t\t}\n\n\t\tif (!result.uriTrustInfo) {\n\t\t\tresult.uriTrustInfo = [];\n\t\t}\n\n\t\tresult.uriTrustInfo = result.uriTrustInfo.map(info => { return { uri: URI.revive(info.uri), trusted: info.trusted }; });\n\t\tresult.uriTrustInfo = result.uriTrustInfo.filter(info => info.trusted);\n\n\t\treturn result;\n\t}\n\n\tprivate async saveTrustInfo(): Promise<void> {\n\t\tthis.storageService.store(this.storageKey, JSON.stringify(this._trustStateInfo), StorageScope.APPLICATION, StorageTarget.MACHINE);\n\t\tthis._onDidChangeTrustedFolders.fire();\n\n\t\tawait this.updateWorkspaceTrust();\n\t}\n\n\tprivate getWorkspaceUris(): URI[] {\n\t\tconst workspaceUris = this._canonicalWorkspace.folders.map(f => f.uri);\n\t\tconst workspaceConfiguration = this._canonicalWorkspace.configuration;\n\t\tif (workspaceConfiguration && isSavedWorkspace(workspaceConfiguration, this.environmentService)) {\n\t\t\tworkspaceUris.push(workspaceConfiguration);\n\t\t}\n\n\t\treturn workspaceUris;\n\t}\n\n\tprivate calculateWorkspaceTrust(): boolean {\n\t\t// Feature is disabled\n\t\tif (!this.workspaceTrustEnablementService.isWorkspaceTrustEnabled()) {\n\t\t\treturn true;\n\t\t}\n\n\t\t// Canonical Uris not yet resolved\n\t\tif (!this._canonicalUrisResolved) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// Remote - resolver explicitly sets workspace trust to TRUE\n\t\tif (this.environmentService.remoteAuthority && this._remoteAuthority?.options?.isTrusted) {\n\t\t\treturn this._remoteAuthority.options.isTrusted;\n\t\t}\n\n\t\t// Empty workspace - use memento, open ediors, or user setting\n\t\tif (this.isEmptyWorkspace()) {\n\t\t\t// Use memento if present\n\t\t\tif (this._storedTrustState.isEmptyWorkspaceTrusted !== undefined) {\n\t\t\t\treturn this._storedTrustState.isEmptyWorkspaceTrusted;\n\t\t\t}\n\n\t\t\t// Startup files\n\t\t\tif (this._canonicalStartupFiles.length) {\n\t\t\t\treturn this.getUrisTrust(this._canonicalStartupFiles);\n\t\t\t}\n\n\t\t\t// User setting\n\t\t\treturn !!this.configurationService.getValue(WORKSPACE_TRUST_EMPTY_WINDOW);\n\t\t}\n\n\t\treturn this.getUrisTrust(this.getWorkspaceUris());\n\t}\n\n\tprivate async updateWorkspaceTrust(trusted?: boolean): Promise<void> {\n\t\tif (!this.workspaceTrustEnablementService.isWorkspaceTrustEnabled()) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (trusted === undefined) {\n\t\t\tawait this.resolveCanonicalUris();\n\t\t\ttrusted = this.calculateWorkspaceTrust();\n\t\t}\n\n\t\tif (this.isWorkspaceTrusted() === trusted) { return; }\n\n\t\t// Update workspace trust\n\t\tthis.isTrusted = trusted;\n\n\t\t// Run workspace trust transition participants\n\t\tawait this._trustTransitionManager.participate(trusted);\n\n\t\t// Fire workspace trust change event\n\t\tthis._onDidChangeTrust.fire(trusted);\n\t}\n\n\tprivate getUrisTrust(uris: URI[]): boolean {\n\t\tlet state = true;\n\t\tfor (const uri of uris) {\n\t\t\tconst { trusted } = this.doGetUriTrustInfo(uri);\n\n\t\t\tif (!trusted) {\n\t\t\t\tstate = trusted;\n\t\t\t\treturn state;\n\t\t\t}\n\t\t}\n\n\t\treturn state;\n\t}\n\n\tprivate doGetUriTrustInfo(uri: URI): IWorkspaceTrustUriInfo {\n\t\t// Return trusted when workspace trust is disabled\n\t\tif (!this.workspaceTrustEnablementService.isWorkspaceTrustEnabled()) {\n\t\t\treturn { trusted: true, uri };\n\t\t}\n\n\t\tif (this.isTrustedVirtualResource(uri)) {\n\t\t\treturn { trusted: true, uri };\n\t\t}\n\n\t\tif (this.isTrustedByRemote(uri)) {\n\t\t\treturn { trusted: true, uri };\n\t\t}\n\n\t\tlet resultState = false;\n\t\tlet maxLength = -1;\n\n\t\tlet resultUri = uri;\n\n\t\tfor (const trustInfo of this._trustStateInfo.uriTrustInfo) {\n\t\t\tif (this.uriIdentityService.extUri.isEqualOrParent(uri, trustInfo.uri)) {\n\t\t\t\tconst fsPath = trustInfo.uri.fsPath;\n\t\t\t\tif (fsPath.length > maxLength) {\n\t\t\t\t\tmaxLength = fsPath.length;\n\t\t\t\t\tresultState = trustInfo.trusted;\n\t\t\t\t\tresultUri = trustInfo.uri;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn { trusted: resultState, uri: resultUri };\n\t}\n\n\tprivate async doSetUrisTrust(uris: URI[], trusted: boolean): Promise<void> {\n\t\tlet changed = false;\n\n\t\tfor (const uri of uris) {\n\t\t\tif (trusted) {\n\t\t\t\tif (this.isTrustedVirtualResource(uri)) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tif (this.isTrustedByRemote(uri)) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tconst foundItem = this._trustStateInfo.uriTrustInfo.find(trustInfo => this.uriIdentityService.extUri.isEqual(trustInfo.uri, uri));\n\t\t\t\tif (!foundItem) {\n\t\t\t\t\tthis._trustStateInfo.uriTrustInfo.push({ uri, trusted: true });\n\t\t\t\t\tchanged = true;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tconst previousLength = this._trustStateInfo.uriTrustInfo.length;\n\t\t\t\tthis._trustStateInfo.uriTrustInfo = this._trustStateInfo.uriTrustInfo.filter(trustInfo => !this.uriIdentityService.extUri.isEqual(trustInfo.uri, uri));\n\t\t\t\tif (previousLength !== this._trustStateInfo.uriTrustInfo.length) {\n\t\t\t\t\tchanged = true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (changed) {\n\t\t\tawait this.saveTrustInfo();\n\t\t}\n\t}\n\n\tprivate isEmptyWorkspace(): boolean {\n\t\tif (this.workspaceService.getWorkbenchState() === WorkbenchState.EMPTY) {\n\t\t\treturn true;\n\t\t}\n\n\t\tconst workspace = this.workspaceService.getWorkspace();\n\t\tif (workspace) {\n\t\t\treturn isTemporaryWorkspace(this.workspaceService.getWorkspace()) && workspace.folders.length === 0;\n\t\t}\n\n\t\treturn false;\n\t}\n\n\tprivate isTrustedVirtualResource(uri: URI): boolean {\n\t\treturn isVirtualResource(uri) && uri.scheme !== 'vscode-vfs';\n\t}\n\n\tprivate isTrustedByRemote(uri: URI): boolean {\n\t\tif (!this.environmentService.remoteAuthority) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (!this._remoteAuthority) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn (isEqualAuthority(getRemoteAuthority(uri), this._remoteAuthority.authority.authority)) && !!this._remoteAuthority.options?.isTrusted;\n\t}\n\n\tprivate set isTrusted(value: boolean) {\n\t\tthis._isTrusted = value;\n\n\t\t// Reset acceptsOutOfWorkspaceFiles\n\t\tif (!value) {\n\t\t\tthis._storedTrustState.acceptsOutOfWorkspaceFiles = false;\n\t\t}\n\n\t\t// Empty workspace - save memento\n\t\tif (this.isEmptyWorkspace()) {\n\t\t\tthis._storedTrustState.isEmptyWorkspaceTrusted = value;\n\t\t}\n\t}\n\n\t//#endregion\n\n\t//#region public interface\n\n\tget workspaceResolved(): Promise<void> {\n\t\treturn this._workspaceResolvedPromise;\n\t}\n\n\tget workspaceTrustInitialized(): Promise<void> {\n\t\treturn this._workspaceTrustInitializedPromise;\n\t}\n\n\tget acceptsOutOfWorkspaceFiles(): boolean {\n\t\treturn this._storedTrustState.acceptsOutOfWorkspaceFiles;\n\t}\n\n\tset acceptsOutOfWorkspaceFiles(value: boolean) {\n\t\tthis._storedTrustState.acceptsOutOfWorkspaceFiles = value;\n\t}\n\n\tisWorkspaceTrusted(): boolean {\n\t\treturn this._isTrusted;\n\t}\n\n\tisWorkspaceTrustForced(): boolean {\n\t\t// Remote - remote authority explicitly sets workspace trust\n\t\tif (this.environmentService.remoteAuthority && this._remoteAuthority && this._remoteAuthority.options?.isTrusted !== undefined) {\n\t\t\treturn true;\n\t\t}\n\n\t\t// All workspace uris are trusted automatically\n\t\tconst workspaceUris = this.getWorkspaceUris().filter(uri => !this.isTrustedVirtualResource(uri));\n\t\tif (workspaceUris.length === 0) {\n\t\t\treturn true;\n\t\t}\n\n\t\treturn false;\n\t}\n\n\tcanSetParentFolderTrust(): boolean {\n\t\tconst workspaceIdentifier = toWorkspaceIdentifier(this._canonicalWorkspace);\n\n\t\tif (!isSingleFolderWorkspaceIdentifier(workspaceIdentifier)) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (workspaceIdentifier.uri.scheme !== Schemas.file && workspaceIdentifier.uri.scheme !== Schemas.vscodeRemote) {\n\t\t\treturn false;\n\t\t}\n\n\t\tconst parentFolder = this.uriIdentityService.extUri.dirname(workspaceIdentifier.uri);\n\t\tif (this.uriIdentityService.extUri.isEqual(workspaceIdentifier.uri, parentFolder)) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn true;\n\t}\n\n\tasync setParentFolderTrust(trusted: boolean): Promise<void> {\n\t\tif (this.canSetParentFolderTrust()) {\n\t\t\tconst workspaceUri = (toWorkspaceIdentifier(this._canonicalWorkspace) as ISingleFolderWorkspaceIdentifier).uri;\n\t\t\tconst parentFolder = this.uriIdentityService.extUri.dirname(workspaceUri);\n\n\t\t\tawait this.setUrisTrust([parentFolder], trusted);\n\t\t}\n\t}\n\n\tcanSetWorkspaceTrust(): boolean {\n\t\t// Remote - remote authority not yet resolved, or remote authority explicitly sets workspace trust\n\t\tif (this.environmentService.remoteAuthority && (!this._remoteAuthority || this._remoteAuthority.options?.isTrusted !== undefined)) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// Empty workspace\n\t\tif (this.isEmptyWorkspace()) {\n\t\t\treturn true;\n\t\t}\n\n\t\t// All workspace uris are trusted automatically\n\t\tconst workspaceUris = this.getWorkspaceUris().filter(uri => !this.isTrustedVirtualResource(uri));\n\t\tif (workspaceUris.length === 0) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// Untrusted workspace\n\t\tif (!this.isWorkspaceTrusted()) {\n\t\t\treturn true;\n\t\t}\n\n\t\t// Trusted workspaces\n\t\t// Can only untrusted in the single folder scenario\n\t\tconst workspaceIdentifier = toWorkspaceIdentifier(this._canonicalWorkspace);\n\t\tif (!isSingleFolderWorkspaceIdentifier(workspaceIdentifier)) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// Can only be untrusted in certain schemes\n\t\tif (workspaceIdentifier.uri.scheme !== Schemas.file && workspaceIdentifier.uri.scheme !== 'vscode-vfs') {\n\t\t\treturn false;\n\t\t}\n\n\t\t// If the current folder isn't trusted directly, return false\n\t\tconst trustInfo = this.doGetUriTrustInfo(workspaceIdentifier.uri);\n\t\tif (!trustInfo.trusted || !this.uriIdentityService.extUri.isEqual(workspaceIdentifier.uri, trustInfo.uri)) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// Check if the parent is also trusted\n\t\tif (this.canSetParentFolderTrust()) {\n\t\t\tconst parentFolder = this.uriIdentityService.extUri.dirname(workspaceIdentifier.uri);\n\t\t\tconst parentPathTrustInfo = this.doGetUriTrustInfo(parentFolder);\n\t\t\tif (parentPathTrustInfo.trusted) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\treturn true;\n\t}\n\n\tasync setWorkspaceTrust(trusted: boolean): Promise<void> {\n\t\t// Empty workspace\n\t\tif (this.isEmptyWorkspace()) {\n\t\t\tawait this.updateWorkspaceTrust(trusted);\n\t\t\treturn;\n\t\t}\n\n\t\tconst workspaceFolders = this.getWorkspaceUris();\n\t\tawait this.setUrisTrust(workspaceFolders, trusted);\n\t}\n\n\tasync getUriTrustInfo(uri: URI): Promise<IWorkspaceTrustUriInfo> {\n\t\t// Return trusted when workspace trust is disabled\n\t\tif (!this.workspaceTrustEnablementService.isWorkspaceTrustEnabled()) {\n\t\t\treturn { trusted: true, uri };\n\t\t}\n\n\t\t// Uri is trusted automatically by the remote\n\t\tif (this.isTrustedByRemote(uri)) {\n\t\t\treturn { trusted: true, uri };\n\t\t}\n\n\t\treturn this.doGetUriTrustInfo(await this.getCanonicalUri(uri));\n\t}\n\n\tasync setUrisTrust(uris: URI[], trusted: boolean): Promise<void> {\n\t\tthis.doSetUrisTrust(await Promise.all(uris.map(uri => this.getCanonicalUri(uri))), trusted);\n\t}\n\n\tgetTrustedUris(): URI[] {\n\t\treturn this._trustStateInfo.uriTrustInfo.map(info => info.uri);\n\t}\n\n\tasync setTrustedUris(uris: URI[]): Promise<void> {\n\t\tthis._trustStateInfo.uriTrustInfo = [];\n\t\tfor (const uri of uris) {\n\t\t\tconst canonicalUri = await this.getCanonicalUri(uri);\n\t\t\tconst cleanUri = this.uriIdentityService.extUri.removeTrailingPathSeparator(canonicalUri);\n\t\t\tlet added = false;\n\t\t\tfor (const addedUri of this._trustStateInfo.uriTrustInfo) {\n\t\t\t\tif (this.uriIdentityService.extUri.isEqual(addedUri.uri, cleanUri)) {\n\t\t\t\t\tadded = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (added) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tthis._trustStateInfo.uriTrustInfo.push({\n\t\t\t\ttrusted: true,\n\t\t\t\turi: cleanUri\n\t\t\t});\n\t\t}\n\n\t\tawait this.saveTrustInfo();\n\t}\n\n\taddWorkspaceTrustTransitionParticipant(participant: IWorkspaceTrustTransitionParticipant): IDisposable {\n\t\treturn this._trustTransitionManager.addWorkspaceTrustTransitionParticipant(participant);\n\t}\n\n\t//#endregion\n}\n\nexport class WorkspaceTrustRequestService extends Disposable implements IWorkspaceTrustRequestService {\n\t_serviceBrand: undefined;\n\n\tprivate _openFilesTrustRequestPromise?: Promise<WorkspaceTrustUriResponse>;\n\tprivate _openFilesTrustRequestResolver?: (response: WorkspaceTrustUriResponse) => void;\n\n\tprivate _workspaceTrustRequestPromise?: Promise<boolean | undefined>;\n\tprivate _workspaceTrustRequestResolver?: (trusted: boolean | undefined) => void;\n\n\tprivate readonly _onDidInitiateOpenFilesTrustRequest = this._register(new Emitter<void>());\n\treadonly onDidInitiateOpenFilesTrustRequest = this._onDidInitiateOpenFilesTrustRequest.event;\n\n\tprivate readonly _onDidInitiateWorkspaceTrustRequest = this._register(new Emitter<WorkspaceTrustRequestOptions | undefined>());\n\treadonly onDidInitiateWorkspaceTrustRequest = this._onDidInitiateWorkspaceTrustRequest.event;\n\n\tprivate readonly _onDidInitiateWorkspaceTrustRequestOnStartup = this._register(new Emitter<void>());\n\treadonly onDidInitiateWorkspaceTrustRequestOnStartup = this._onDidInitiateWorkspaceTrustRequestOnStartup.event;\n\n\tconstructor(\n\t\t@IConfigurationService private readonly configurationService: IConfigurationService,\n\t\t@IWorkspaceTrustManagementService private readonly workspaceTrustManagementService: IWorkspaceTrustManagementService\n\t) {\n\t\tsuper();\n\t}\n\n\t//#region Open file(s) trust request\n\n\tprivate get untrustedFilesSetting(): 'prompt' | 'open' | 'newWindow' {\n\t\treturn this.configurationService.getValue(WORKSPACE_TRUST_UNTRUSTED_FILES);\n\t}\n\n\tprivate set untrustedFilesSetting(value: 'prompt' | 'open' | 'newWindow') {\n\t\tthis.configurationService.updateValue(WORKSPACE_TRUST_UNTRUSTED_FILES, value);\n\t}\n\n\tasync completeOpenFilesTrustRequest(result: WorkspaceTrustUriResponse, saveResponse?: boolean): Promise<void> {\n\t\tif (!this._openFilesTrustRequestResolver) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Set acceptsOutOfWorkspaceFiles\n\t\tif (result === WorkspaceTrustUriResponse.Open) {\n\t\t\tthis.workspaceTrustManagementService.acceptsOutOfWorkspaceFiles = true;\n\t\t}\n\n\t\t// Save response\n\t\tif (saveResponse) {\n\t\t\tif (result === WorkspaceTrustUriResponse.Open) {\n\t\t\t\tthis.untrustedFilesSetting = 'open';\n\t\t\t}\n\n\t\t\tif (result === WorkspaceTrustUriResponse.OpenInNewWindow) {\n\t\t\t\tthis.untrustedFilesSetting = 'newWindow';\n\t\t\t}\n\t\t}\n\n\t\t// Resolve promise\n\t\tthis._openFilesTrustRequestResolver(result);\n\n\t\tthis._openFilesTrustRequestResolver = undefined;\n\t\tthis._openFilesTrustRequestPromise = undefined;\n\t}\n\n\tasync requestOpenFilesTrust(uris: URI[]): Promise<WorkspaceTrustUriResponse> {\n\t\t// If workspace is untrusted, there is no conflict\n\t\tif (!this.workspaceTrustManagementService.isWorkspaceTrusted()) {\n\t\t\treturn WorkspaceTrustUriResponse.Open;\n\t\t}\n\n\t\tconst openFilesTrustInfo = await Promise.all(uris.map(uri => this.workspaceTrustManagementService.getUriTrustInfo(uri)));\n\n\t\t// If all uris are trusted, there is no conflict\n\t\tif (openFilesTrustInfo.map(info => info.trusted).every(trusted => trusted)) {\n\t\t\treturn WorkspaceTrustUriResponse.Open;\n\t\t}\n\n\t\t// If user has setting, don't need to ask\n\t\tif (this.untrustedFilesSetting !== 'prompt') {\n\t\t\tif (this.untrustedFilesSetting === 'newWindow') {\n\t\t\t\treturn WorkspaceTrustUriResponse.OpenInNewWindow;\n\t\t\t}\n\n\t\t\tif (this.untrustedFilesSetting === 'open') {\n\t\t\t\treturn WorkspaceTrustUriResponse.Open;\n\t\t\t}\n\t\t}\n\n\t\t// If we already asked the user, don't need to ask again\n\t\tif (this.workspaceTrustManagementService.acceptsOutOfWorkspaceFiles) {\n\t\t\treturn WorkspaceTrustUriResponse.Open;\n\t\t}\n\n\t\t// Create/return a promise\n\t\tif (!this._openFilesTrustRequestPromise) {\n\t\t\tthis._openFilesTrustRequestPromise = new Promise<WorkspaceTrustUriResponse>(resolve => {\n\t\t\t\tthis._openFilesTrustRequestResolver = resolve;\n\t\t\t});\n\t\t} else {\n\t\t\treturn this._openFilesTrustRequestPromise;\n\t\t}\n\n\t\tthis._onDidInitiateOpenFilesTrustRequest.fire();\n\t\treturn this._openFilesTrustRequestPromise;\n\t}\n\n\t//#endregion\n\n\t//#region Workspace trust request\n\n\tprivate resolveWorkspaceTrustRequest(trusted?: boolean): void {\n\t\tif (this._workspaceTrustRequestResolver) {\n\t\t\tthis._workspaceTrustRequestResolver(trusted ?? this.workspaceTrustManagementService.isWorkspaceTrusted());\n\n\t\t\tthis._workspaceTrustRequestResolver = undefined;\n\t\t\tthis._workspaceTrustRequestPromise = undefined;\n\t\t}\n\t}\n\n\tcancelWorkspaceTrustRequest(): void {\n\t\tif (this._workspaceTrustRequestResolver) {\n\t\t\tthis._workspaceTrustRequestResolver(undefined);\n\n\t\t\tthis._workspaceTrustRequestResolver = undefined;\n\t\t\tthis._workspaceTrustRequestPromise = undefined;\n\t\t}\n\t}\n\n\tasync completeWorkspaceTrustRequest(trusted?: boolean): Promise<void> {\n\t\tif (trusted === undefined || trusted === this.workspaceTrustManagementService.isWorkspaceTrusted()) {\n\t\t\tthis.resolveWorkspaceTrustRequest(trusted);\n\t\t\treturn;\n\t\t}\n\n\t\t// Register one-time event handler to resolve the promise when workspace trust changed\n\t\tEvent.once(this.workspaceTrustManagementService.onDidChangeTrust)(trusted => this.resolveWorkspaceTrustRequest(trusted));\n\n\t\t// Update storage, transition workspace state\n\t\tawait this.workspaceTrustManagementService.setWorkspaceTrust(trusted);\n\t}\n\n\tasync requestWorkspaceTrust(options?: WorkspaceTrustRequestOptions): Promise<boolean | undefined> {\n\t\t// Trusted workspace\n\t\tif (this.workspaceTrustManagementService.isWorkspaceTrusted()) {\n\t\t\treturn this.workspaceTrustManagementService.isWorkspaceTrusted();\n\t\t}\n\n\t\t// Modal request\n\t\tif (!this._workspaceTrustRequestPromise) {\n\t\t\t// Create promise\n\t\t\tthis._workspaceTrustRequestPromise = new Promise(resolve => {\n\t\t\t\tthis._workspaceTrustRequestResolver = resolve;\n\t\t\t});\n\t\t} else {\n\t\t\t// Return existing promise\n\t\t\treturn this._workspaceTrustRequestPromise;\n\t\t}\n\n\t\tthis._onDidInitiateWorkspaceTrustRequest.fire(options);\n\t\treturn this._workspaceTrustRequestPromise;\n\t}\n\n\trequestWorkspaceTrustOnStartup(): void {\n\t\tif (!this._workspaceTrustRequestPromise) {\n\t\t\t// Create promise\n\t\t\tthis._workspaceTrustRequestPromise = new Promise(resolve => {\n\t\t\t\tthis._workspaceTrustRequestResolver = resolve;\n\t\t\t});\n\t\t}\n\n\t\tthis._onDidInitiateWorkspaceTrustRequestOnStartup.fire();\n\t}\n\n\t//#endregion\n}\n\nclass WorkspaceTrustTransitionManager extends Disposable {\n\n\tprivate readonly participants = new LinkedList<IWorkspaceTrustTransitionParticipant>();\n\n\taddWorkspaceTrustTransitionParticipant(participant: IWorkspaceTrustTransitionParticipant): IDisposable {\n\t\tconst remove = this.participants.push(participant);\n\t\treturn toDisposable(() => remove());\n\t}\n\n\tasync participate(trusted: boolean): Promise<void> {\n\t\tfor (const participant of this.participants) {\n\t\t\tawait participant.participate(trusted);\n\t\t}\n\t}\n\n\toverride dispose(): void {\n\t\tthis.participants.clear();\n\t\tsuper.dispose();\n\t}\n}\n\nclass WorkspaceTrustMemento {\n\n\tprivate readonly _memento?: Memento;\n\tprivate readonly _mementoObject: MementoObject;\n\n\tprivate readonly _acceptsOutOfWorkspaceFilesKey = 'acceptsOutOfWorkspaceFiles';\n\tprivate readonly _isEmptyWorkspaceTrustedKey = 'isEmptyWorkspaceTrusted';\n\n\tconstructor(storageService?: IStorageService) {\n\t\tif (storageService) {\n\t\t\tthis._memento = new Memento('workspaceTrust', storageService);\n\t\t\tthis._mementoObject = this._memento.getMemento(StorageScope.WORKSPACE, StorageTarget.MACHINE);\n\t\t} else {\n\t\t\tthis._mementoObject = {};\n\t\t}\n\t}\n\n\tget acceptsOutOfWorkspaceFiles(): boolean {\n\t\treturn this._mementoObject[this._acceptsOutOfWorkspaceFilesKey] ?? false;\n\t}\n\n\tset acceptsOutOfWorkspaceFiles(value: boolean) {\n\t\tthis._mementoObject[this._acceptsOutOfWorkspaceFilesKey] = value;\n\n\t\tthis._memento?.saveMemento();\n\t}\n\n\tget isEmptyWorkspaceTrusted(): boolean | undefined {\n\t\treturn this._mementoObject[this._isEmptyWorkspaceTrustedKey];\n\t}\n\n\tset isEmptyWorkspaceTrusted(value: boolean | undefined) {\n\t\tthis._mementoObject[this._isEmptyWorkspaceTrustedKey] = value;\n\n\t\tthis._memento?.saveMemento();\n\t}\n}\n\nregisterSingleton(IWorkspaceTrustRequestService, WorkspaceTrustRequestService, InstantiationType.Delayed);\n"],
  "mappings": "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",
  "names": ["trusted"]
}
