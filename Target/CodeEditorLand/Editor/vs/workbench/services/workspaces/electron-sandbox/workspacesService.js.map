{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/workspaces/electron-sandbox/workspacesService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IWorkspacesService } from '../../../../platform/workspaces/common/workspaces.js';\nimport { IMainProcessService } from '../../../../platform/ipc/common/mainProcessService.js';\nimport { InstantiationType, registerSingleton } from '../../../../platform/instantiation/common/extensions.js';\nimport { ProxyChannel } from '../../../../base/parts/ipc/common/ipc.js';\nimport { INativeHostService } from '../../../../platform/native/common/native.js';\n\n// @ts-ignore: interface is implemented via proxy\nexport class NativeWorkspacesService implements IWorkspacesService {\n\n\tdeclare readonly _serviceBrand: undefined;\n\n\tconstructor(\n\t\t@IMainProcessService mainProcessService: IMainProcessService,\n\t\t@INativeHostService nativeHostService: INativeHostService\n\t) {\n\t\treturn ProxyChannel.toService<IWorkspacesService>(mainProcessService.getChannel('workspaces'), { context: nativeHostService.windowId });\n\t}\n}\n\nregisterSingleton(IWorkspacesService, NativeWorkspacesService, InstantiationType.Delayed);\n"],
  "mappings": ";;;;;;;;;;;;AAKA,SAAS,0BAA0B;AACnC,SAAS,2BAA2B;AACpC,SAAS,mBAAmB,yBAAyB;AACrD,SAAS,oBAAoB;AAC7B,SAAS,0BAA0B;AAG5B,IAAM,0BAAN,MAA4D;AAAA,EAZnE,OAYmE;AAAA;AAAA;AAAA,EAIlE,YACsB,oBACD,mBACnB;AACD,WAAO,aAAa,UAA8B,mBAAmB,WAAW,YAAY,GAAG,EAAE,SAAS,kBAAkB,SAAS,CAAC;AAAA,EACvI;AACD;AAVa,0BAAN;AAAA,EAKJ;AAAA,EACA;AAAA,GANU;AAYb,kBAAkB,oBAAoB,yBAAyB,kBAAkB,OAAO;",
  "names": []
}
