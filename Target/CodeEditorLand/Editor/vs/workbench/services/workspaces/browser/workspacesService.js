var I=Object.defineProperty;var y=Object.getOwnPropertyDescriptor;var m=(c,n,e,r)=>{for(var t=r>1?void 0:r?y(n,e):n,i=c.length-1,s;i>=0;i--)(s=c[i])&&(t=(r?s(n,e,t):s(t))||t);return r&&t&&I(n,e,t),t},a=(c,n)=>(e,r)=>n(e,r,c);import{VSBuffer as g}from"../../../../../vs/base/common/buffer.js";import{Emitter as S}from"../../../../../vs/base/common/event.js";import{Disposable as k,DisposableStore as R}from"../../../../../vs/base/common/lifecycle.js";import{Schemas as O}from"../../../../../vs/base/common/network.js";import{joinPath as u}from"../../../../../vs/base/common/resources.js";import"../../../../../vs/base/common/uri.js";import"../../../../../vs/platform/backup/common/backup.js";import{FileOperationResult as W,IFileService as E}from"../../../../../vs/platform/files/common/files.js";import{InstantiationType as P,registerSingleton as C}from"../../../../../vs/platform/instantiation/common/extensions.js";import{ILogService as F}from"../../../../../vs/platform/log/common/log.js";import{IStorageService as N,StorageScope as d,StorageTarget as U}from"../../../../../vs/platform/storage/common/storage.js";import{IUriIdentityService as D}from"../../../../../vs/platform/uriIdentity/common/uriIdentity.js";import{isTemporaryWorkspace as p,IWorkspaceContextService as w,WorkbenchState as v,WORKSPACE_EXTENSION as _}from"../../../../../vs/platform/workspace/common/workspace.js";import{getStoredWorkspaceFolder as T,isRecentFile as L,isRecentFolder as l,isRecentWorkspace as A,IWorkspacesService as x,restoreRecentlyOpened as Y,toStoreData as b}from"../../../../../vs/platform/workspaces/common/workspaces.js";import{IWorkbenchEnvironmentService as K}from"../../../../../vs/workbench/services/environment/common/environmentService.js";import{getWorkspaceIdentifier as J}from"../../../../../vs/workbench/services/workspaces/browser/workspaces.js";let o=class extends k{constructor(e,r,t,i,s,f){super();this.storageService=e;this.contextService=r;this.logService=t;this.fileService=i;this.environmentService=s;this.uriIdentityService=f;this.addWorkspaceToRecentlyOpened(),this.registerListeners()}static RECENTLY_OPENED_KEY="recently.opened";_onRecentlyOpenedChange=this._register(new S);onDidChangeRecentlyOpened=this._onRecentlyOpenedChange.event;registerListeners(){this._register(this.storageService.onDidChangeValue(d.APPLICATION,o.RECENTLY_OPENED_KEY,this._register(new R))(()=>this._onRecentlyOpenedChange.fire())),this._register(this.contextService.onDidChangeWorkspaceFolders(e=>this.onDidChangeWorkspaceFolders(e)))}onDidChangeWorkspaceFolders(e){if(p(this.contextService.getWorkspace()))for(const r of e.added)this.addRecentlyOpened([{folderUri:r.uri}])}addWorkspaceToRecentlyOpened(){const e=this.contextService.getWorkspace(),r=this.environmentService.remoteAuthority;switch(this.contextService.getWorkbenchState()){case v.FOLDER:this.addRecentlyOpened([{folderUri:e.folders[0].uri,remoteAuthority:r}]);break;case v.WORKSPACE:this.addRecentlyOpened([{workspace:{id:e.id,configPath:e.configuration},remoteAuthority:r}]);break}}async getRecentlyOpened(){const e=this.storageService.get(o.RECENTLY_OPENED_KEY,d.APPLICATION);if(e){const r=Y(JSON.parse(e),this.logService);return r.workspaces=r.workspaces.filter(t=>!(l(t)&&t.folderUri.scheme===O.file&&!p(this.contextService.getWorkspace())||A(t)&&p(t.workspace.configPath))),r}return{workspaces:[],files:[]}}async addRecentlyOpened(e){const r=await this.getRecentlyOpened();for(const t of e)L(t)?(this.doRemoveRecentlyOpened(r,[t.fileUri]),r.files.unshift(t)):l(t)?(this.doRemoveRecentlyOpened(r,[t.folderUri]),r.workspaces.unshift(t)):(this.doRemoveRecentlyOpened(r,[t.workspace.configPath]),r.workspaces.unshift(t));return this.saveRecentlyOpened(r)}async removeRecentlyOpened(e){const r=await this.getRecentlyOpened();return this.doRemoveRecentlyOpened(r,e),this.saveRecentlyOpened(r)}doRemoveRecentlyOpened(e,r){e.files=e.files.filter(t=>!r.some(i=>i.toString()===t.fileUri.toString())),e.workspaces=e.workspaces.filter(t=>!r.some(i=>i.toString()===(l(t)?t.folderUri.toString():t.workspace.configPath.toString())))}async saveRecentlyOpened(e){return this.storageService.store(o.RECENTLY_OPENED_KEY,JSON.stringify(b(e)),d.APPLICATION,U.USER)}async clearRecentlyOpened(){this.storageService.remove(o.RECENTLY_OPENED_KEY,d.APPLICATION)}async enterWorkspace(e){return{workspace:await this.getWorkspaceIdentifier(e)}}async createUntitledWorkspace(e,r){const t=(Date.now()+Math.round(Math.random()*1e3)).toString(),i=u(this.environmentService.untitledWorkspacesHome,`Untitled-${t}.${_}`),s=[];if(e)for(const h of e)s.push(T(h.uri,!0,h.name,this.environmentService.untitledWorkspacesHome,this.uriIdentityService.extUri));const f={folders:s,remoteAuthority:r};return await this.fileService.writeFile(i,g.fromString(JSON.stringify(f,null,"	"))),this.getWorkspaceIdentifier(i)}async deleteUntitledWorkspace(e){try{await this.fileService.del(e.configPath)}catch(r){if(r.fileOperationResult!==W.FILE_NOT_FOUND)throw r}}async getWorkspaceIdentifier(e){return J(e)}async getDirtyWorkspaces(){return[]}};o=m([a(0,N),a(1,w),a(2,F),a(3,E),a(4,K),a(5,D)],o),C(x,o,P.Delayed);export{o as BrowserWorkspacesService};
