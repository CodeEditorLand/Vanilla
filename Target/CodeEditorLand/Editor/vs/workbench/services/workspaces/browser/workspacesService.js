var v=Object.defineProperty;var I=Object.getOwnPropertyDescriptor;var y=(c,n,e,t)=>{for(var r=t>1?void 0:t?I(n,e):n,o=c.length-1,s;o>=0;o--)(s=c[o])&&(r=(t?s(n,e,r):s(r))||r);return t&&r&&v(n,e,r),r},a=(c,n)=>(e,t)=>n(e,t,c);import{VSBuffer as g}from"../../../../base/common/buffer.js";import{Emitter as k}from"../../../../base/common/event.js";import{Disposable as S,DisposableStore as R}from"../../../../base/common/lifecycle.js";import{Schemas as O}from"../../../../base/common/network.js";import{joinPath as u}from"../../../../base/common/resources.js";import{FileOperationResult as W,IFileService as E}from"../../../../platform/files/common/files.js";import{InstantiationType as P,registerSingleton as C}from"../../../../platform/instantiation/common/extensions.js";import{ILogService as F}from"../../../../platform/log/common/log.js";import{IStorageService as N,StorageScope as d,StorageTarget as U}from"../../../../platform/storage/common/storage.js";import{IUriIdentityService as D}from"../../../../platform/uriIdentity/common/uriIdentity.js";import{IWorkspaceContextService as w,WORKSPACE_EXTENSION as _,WorkbenchState as h,isTemporaryWorkspace as p}from"../../../../platform/workspace/common/workspace.js";import{IWorkspacesService as T,getStoredWorkspaceFolder as L,isRecentFile as A,isRecentFolder as l,isRecentWorkspace as b,restoreRecentlyOpened as x,toStoreData as Y}from"../../../../platform/workspaces/common/workspaces.js";import{IWorkbenchEnvironmentService as K}from"../../environment/common/environmentService.js";import{getWorkspaceIdentifier as j}from"./workspaces.js";let i=class extends S{constructor(e,t,r,o,s,f){super();this.storageService=e;this.contextService=t;this.logService=r;this.fileService=o;this.environmentService=s;this.uriIdentityService=f;this.addWorkspaceToRecentlyOpened(),this.registerListeners()}static RECENTLY_OPENED_KEY="recently.opened";_onRecentlyOpenedChange=this._register(new k);onDidChangeRecentlyOpened=this._onRecentlyOpenedChange.event;registerListeners(){this._register(this.storageService.onDidChangeValue(d.APPLICATION,i.RECENTLY_OPENED_KEY,this._register(new R))(()=>this._onRecentlyOpenedChange.fire())),this._register(this.contextService.onDidChangeWorkspaceFolders(e=>this.onDidChangeWorkspaceFolders(e)))}onDidChangeWorkspaceFolders(e){if(p(this.contextService.getWorkspace()))for(const t of e.added)this.addRecentlyOpened([{folderUri:t.uri}])}addWorkspaceToRecentlyOpened(){const e=this.contextService.getWorkspace(),t=this.environmentService.remoteAuthority;switch(this.contextService.getWorkbenchState()){case h.FOLDER:this.addRecentlyOpened([{folderUri:e.folders[0].uri,remoteAuthority:t}]);break;case h.WORKSPACE:this.addRecentlyOpened([{workspace:{id:e.id,configPath:e.configuration},remoteAuthority:t}]);break}}async getRecentlyOpened(){const e=this.storageService.get(i.RECENTLY_OPENED_KEY,d.APPLICATION);if(e){const t=x(JSON.parse(e),this.logService);return t.workspaces=t.workspaces.filter(r=>!(l(r)&&r.folderUri.scheme===O.file&&!p(this.contextService.getWorkspace())||b(r)&&p(r.workspace.configPath))),t}return{workspaces:[],files:[]}}async addRecentlyOpened(e){const t=await this.getRecentlyOpened();for(const r of e)A(r)?(this.doRemoveRecentlyOpened(t,[r.fileUri]),t.files.unshift(r)):l(r)?(this.doRemoveRecentlyOpened(t,[r.folderUri]),t.workspaces.unshift(r)):(this.doRemoveRecentlyOpened(t,[r.workspace.configPath]),t.workspaces.unshift(r));return this.saveRecentlyOpened(t)}async removeRecentlyOpened(e){const t=await this.getRecentlyOpened();return this.doRemoveRecentlyOpened(t,e),this.saveRecentlyOpened(t)}doRemoveRecentlyOpened(e,t){e.files=e.files.filter(r=>!t.some(o=>o.toString()===r.fileUri.toString())),e.workspaces=e.workspaces.filter(r=>!t.some(o=>o.toString()===(l(r)?r.folderUri.toString():r.workspace.configPath.toString())))}async saveRecentlyOpened(e){return this.storageService.store(i.RECENTLY_OPENED_KEY,JSON.stringify(Y(e)),d.APPLICATION,U.USER)}async clearRecentlyOpened(){this.storageService.remove(i.RECENTLY_OPENED_KEY,d.APPLICATION)}async enterWorkspace(e){return{workspace:await this.getWorkspaceIdentifier(e)}}async createUntitledWorkspace(e,t){const r=(Date.now()+Math.round(Math.random()*1e3)).toString(),o=u(this.environmentService.untitledWorkspacesHome,`Untitled-${r}.${_}`),s=[];if(e)for(const m of e)s.push(L(m.uri,!0,m.name,this.environmentService.untitledWorkspacesHome,this.uriIdentityService.extUri));const f={folders:s,remoteAuthority:t};return await this.fileService.writeFile(o,g.fromString(JSON.stringify(f,null,"	"))),this.getWorkspaceIdentifier(o)}async deleteUntitledWorkspace(e){try{await this.fileService.del(e.configPath)}catch(t){if(t.fileOperationResult!==W.FILE_NOT_FOUND)throw t}}async getWorkspaceIdentifier(e){return j(e)}async getDirtyWorkspaces(){return[]}};i=y([a(0,N),a(1,w),a(2,F),a(3,E),a(4,K),a(5,D)],i),C(T,i,P.Delayed);export{i as BrowserWorkspacesService};
