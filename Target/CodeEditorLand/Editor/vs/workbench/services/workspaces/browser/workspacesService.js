var I=Object.defineProperty;var y=Object.getOwnPropertyDescriptor;var m=(c,n,e,r)=>{for(var t=r>1?void 0:r?y(n,e):n,i=c.length-1,s;i>=0;i--)(s=c[i])&&(t=(r?s(n,e,t):s(t))||t);return r&&t&&I(n,e,t),t},a=(c,n)=>(e,r)=>n(e,r,c);import{InstantiationType as g,registerSingleton as S}from"../../../../platform/instantiation/common/extensions.js";import{IWorkspacesService as k,restoreRecentlyOpened as R,isRecentFile as O,isRecentFolder as p,toStoreData as u,getStoredWorkspaceFolder as W,isRecentWorkspace as E}from"../../../../platform/workspaces/common/workspaces.js";import"../../../../base/common/uri.js";import{Emitter as P}from"../../../../base/common/event.js";import{IStorageService as C,StorageScope as d,StorageTarget as F}from"../../../../platform/storage/common/storage.js";import{isTemporaryWorkspace as l,IWorkspaceContextService as N,WorkbenchState as v,WORKSPACE_EXTENSION as U}from"../../../../platform/workspace/common/workspace.js";import{ILogService as D}from"../../../../platform/log/common/log.js";import{Disposable as w,DisposableStore as _}from"../../../../base/common/lifecycle.js";import{getWorkspaceIdentifier as T}from"./workspaces.js";import{IFileService as L,FileOperationResult as A}from"../../../../platform/files/common/files.js";import{IWorkbenchEnvironmentService as x}from"../../environment/common/environmentService.js";import{joinPath as Y}from"../../../../base/common/resources.js";import{VSBuffer as b}from"../../../../base/common/buffer.js";import{IUriIdentityService as K}from"../../../../platform/uriIdentity/common/uriIdentity.js";import"../../../../platform/backup/common/backup.js";import{Schemas as J}from"../../../../base/common/network.js";let o=class extends w{constructor(e,r,t,i,s,f){super();this.storageService=e;this.contextService=r;this.logService=t;this.fileService=i;this.environmentService=s;this.uriIdentityService=f;this.addWorkspaceToRecentlyOpened(),this.registerListeners()}static RECENTLY_OPENED_KEY="recently.opened";_onRecentlyOpenedChange=this._register(new P);onDidChangeRecentlyOpened=this._onRecentlyOpenedChange.event;registerListeners(){this._register(this.storageService.onDidChangeValue(d.APPLICATION,o.RECENTLY_OPENED_KEY,this._register(new _))(()=>this._onRecentlyOpenedChange.fire())),this._register(this.contextService.onDidChangeWorkspaceFolders(e=>this.onDidChangeWorkspaceFolders(e)))}onDidChangeWorkspaceFolders(e){if(l(this.contextService.getWorkspace()))for(const r of e.added)this.addRecentlyOpened([{folderUri:r.uri}])}addWorkspaceToRecentlyOpened(){const e=this.contextService.getWorkspace(),r=this.environmentService.remoteAuthority;switch(this.contextService.getWorkbenchState()){case v.FOLDER:this.addRecentlyOpened([{folderUri:e.folders[0].uri,remoteAuthority:r}]);break;case v.WORKSPACE:this.addRecentlyOpened([{workspace:{id:e.id,configPath:e.configuration},remoteAuthority:r}]);break}}async getRecentlyOpened(){const e=this.storageService.get(o.RECENTLY_OPENED_KEY,d.APPLICATION);if(e){const r=R(JSON.parse(e),this.logService);return r.workspaces=r.workspaces.filter(t=>!(p(t)&&t.folderUri.scheme===J.file&&!l(this.contextService.getWorkspace())||E(t)&&l(t.workspace.configPath))),r}return{workspaces:[],files:[]}}async addRecentlyOpened(e){const r=await this.getRecentlyOpened();for(const t of e)O(t)?(this.doRemoveRecentlyOpened(r,[t.fileUri]),r.files.unshift(t)):p(t)?(this.doRemoveRecentlyOpened(r,[t.folderUri]),r.workspaces.unshift(t)):(this.doRemoveRecentlyOpened(r,[t.workspace.configPath]),r.workspaces.unshift(t));return this.saveRecentlyOpened(r)}async removeRecentlyOpened(e){const r=await this.getRecentlyOpened();return this.doRemoveRecentlyOpened(r,e),this.saveRecentlyOpened(r)}doRemoveRecentlyOpened(e,r){e.files=e.files.filter(t=>!r.some(i=>i.toString()===t.fileUri.toString())),e.workspaces=e.workspaces.filter(t=>!r.some(i=>i.toString()===(p(t)?t.folderUri.toString():t.workspace.configPath.toString())))}async saveRecentlyOpened(e){return this.storageService.store(o.RECENTLY_OPENED_KEY,JSON.stringify(u(e)),d.APPLICATION,F.USER)}async clearRecentlyOpened(){this.storageService.remove(o.RECENTLY_OPENED_KEY,d.APPLICATION)}async enterWorkspace(e){return{workspace:await this.getWorkspaceIdentifier(e)}}async createUntitledWorkspace(e,r){const t=(Date.now()+Math.round(Math.random()*1e3)).toString(),i=Y(this.environmentService.untitledWorkspacesHome,`Untitled-${t}.${U}`),s=[];if(e)for(const h of e)s.push(W(h.uri,!0,h.name,this.environmentService.untitledWorkspacesHome,this.uriIdentityService.extUri));const f={folders:s,remoteAuthority:r};return await this.fileService.writeFile(i,b.fromString(JSON.stringify(f,null,"	"))),this.getWorkspaceIdentifier(i)}async deleteUntitledWorkspace(e){try{await this.fileService.del(e.configPath)}catch(r){if(r.fileOperationResult!==A.FILE_NOT_FOUND)throw r}}async getWorkspaceIdentifier(e){return T(e)}async getDirtyWorkspaces(){return[]}};o=m([a(0,C),a(1,N),a(2,D),a(3,L),a(4,x),a(5,K)],o),S(k,o,g.Delayed);export{o as BrowserWorkspacesService};
