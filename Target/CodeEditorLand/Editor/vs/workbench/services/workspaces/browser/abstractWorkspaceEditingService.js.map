{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/workspaces/browser/abstractWorkspaceEditingService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IWorkspaceEditingService } from '../common/workspaceEditing.js';\nimport { URI } from '../../../../base/common/uri.js';\nimport { localize } from '../../../../nls.js';\nimport { hasWorkspaceFileExtension, isSavedWorkspace, isUntitledWorkspace, isWorkspaceIdentifier, IWorkspaceContextService, IWorkspaceIdentifier, toWorkspaceIdentifier, WorkbenchState, WORKSPACE_EXTENSION, WORKSPACE_FILTER } from '../../../../platform/workspace/common/workspace.js';\nimport { IJSONEditingService, JSONEditingError, JSONEditingErrorCode } from '../../configuration/common/jsonEditing.js';\nimport { IWorkspaceFolderCreationData, IWorkspacesService, rewriteWorkspaceFileForNewLocation, IEnterWorkspaceResult, IStoredWorkspace } from '../../../../platform/workspaces/common/workspaces.js';\nimport { WorkspaceService } from '../../configuration/browser/configurationService.js';\nimport { ConfigurationScope, IConfigurationRegistry, Extensions as ConfigurationExtensions, IConfigurationPropertySchema } from '../../../../platform/configuration/common/configurationRegistry.js';\nimport { Registry } from '../../../../platform/registry/common/platform.js';\nimport { ICommandService } from '../../../../platform/commands/common/commands.js';\nimport { distinct } from '../../../../base/common/arrays.js';\nimport { basename, isEqual, isEqualAuthority, joinPath, removeTrailingPathSeparator } from '../../../../base/common/resources.js';\nimport { INotificationService, Severity } from '../../../../platform/notification/common/notification.js';\nimport { IFileService } from '../../../../platform/files/common/files.js';\nimport { IWorkbenchEnvironmentService } from '../../environment/common/environmentService.js';\nimport { IFileDialogService, IDialogService } from '../../../../platform/dialogs/common/dialogs.js';\nimport { mnemonicButtonLabel } from '../../../../base/common/labels.js';\nimport { ITextFileService } from '../../textfile/common/textfiles.js';\nimport { IHostService } from '../../host/browser/host.js';\nimport { Schemas } from '../../../../base/common/network.js';\nimport { SaveReason } from '../../../common/editor.js';\nimport { IUriIdentityService } from '../../../../platform/uriIdentity/common/uriIdentity.js';\nimport { IWorkspaceTrustManagementService } from '../../../../platform/workspace/common/workspaceTrust.js';\nimport { IWorkbenchConfigurationService } from '../../configuration/common/configuration.js';\nimport { IUserDataProfilesService } from '../../../../platform/userDataProfile/common/userDataProfile.js';\nimport { IUserDataProfileService } from '../../userDataProfile/common/userDataProfile.js';\nimport { Disposable } from '../../../../base/common/lifecycle.js';\n\nexport abstract class AbstractWorkspaceEditingService extends Disposable implements IWorkspaceEditingService {\n\n\tdeclare readonly _serviceBrand: undefined;\n\n\tconstructor(\n\t\t@IJSONEditingService private readonly jsonEditingService: IJSONEditingService,\n\t\t@IWorkspaceContextService protected readonly contextService: WorkspaceService,\n\t\t@IWorkbenchConfigurationService protected readonly configurationService: IWorkbenchConfigurationService,\n\t\t@INotificationService private readonly notificationService: INotificationService,\n\t\t@ICommandService private readonly commandService: ICommandService,\n\t\t@IFileService private readonly fileService: IFileService,\n\t\t@ITextFileService private readonly textFileService: ITextFileService,\n\t\t@IWorkspacesService protected readonly workspacesService: IWorkspacesService,\n\t\t@IWorkbenchEnvironmentService protected readonly environmentService: IWorkbenchEnvironmentService,\n\t\t@IFileDialogService private readonly fileDialogService: IFileDialogService,\n\t\t@IDialogService protected readonly dialogService: IDialogService,\n\t\t@IHostService protected readonly hostService: IHostService,\n\t\t@IUriIdentityService protected readonly uriIdentityService: IUriIdentityService,\n\t\t@IWorkspaceTrustManagementService private readonly workspaceTrustManagementService: IWorkspaceTrustManagementService,\n\t\t@IUserDataProfilesService private readonly userDataProfilesService: IUserDataProfilesService,\n\t\t@IUserDataProfileService private readonly userDataProfileService: IUserDataProfileService,\n\t) {\n\t\tsuper();\n\t}\n\n\tasync pickNewWorkspacePath(): Promise<URI | undefined> {\n\t\tconst availableFileSystems = [Schemas.file];\n\t\tif (this.environmentService.remoteAuthority) {\n\t\t\tavailableFileSystems.unshift(Schemas.vscodeRemote);\n\t\t}\n\t\tlet workspacePath = await this.fileDialogService.showSaveDialog({\n\t\t\tsaveLabel: mnemonicButtonLabel(localize('save', \"Save\")),\n\t\t\ttitle: localize('saveWorkspace', \"Save Workspace\"),\n\t\t\tfilters: WORKSPACE_FILTER,\n\t\t\tdefaultUri: joinPath(await this.fileDialogService.defaultWorkspacePath(), this.getNewWorkspaceName()),\n\t\t\tavailableFileSystems\n\t\t});\n\n\t\tif (!workspacePath) {\n\t\t\treturn; // canceled\n\t\t}\n\n\t\tif (!hasWorkspaceFileExtension(workspacePath)) {\n\t\t\t// Always ensure we have workspace file extension\n\t\t\t// (see https://github.com/microsoft/vscode/issues/84818)\n\t\t\tworkspacePath = workspacePath.with({ path: `${workspacePath.path}.${WORKSPACE_EXTENSION}` });\n\t\t}\n\n\t\treturn workspacePath;\n\t}\n\n\tprivate getNewWorkspaceName(): string {\n\n\t\t// First try with existing workspace name\n\t\tconst configPathURI = this.getCurrentWorkspaceIdentifier()?.configPath;\n\t\tif (configPathURI && isSavedWorkspace(configPathURI, this.environmentService)) {\n\t\t\treturn basename(configPathURI);\n\t\t}\n\n\t\t// Then fallback to first folder if any\n\t\tconst folder = this.contextService.getWorkspace().folders.at(0);\n\t\tif (folder) {\n\t\t\treturn `${basename(folder.uri)}.${WORKSPACE_EXTENSION}`;\n\t\t}\n\n\t\t// Finally pick a good default\n\t\treturn `workspace.${WORKSPACE_EXTENSION}`;\n\t}\n\n\tasync updateFolders(index: number, deleteCount?: number, foldersToAddCandidates?: IWorkspaceFolderCreationData[], donotNotifyError?: boolean): Promise<void> {\n\t\tconst folders = this.contextService.getWorkspace().folders;\n\n\t\tlet foldersToDelete: URI[] = [];\n\t\tif (typeof deleteCount === 'number') {\n\t\t\tfoldersToDelete = folders.slice(index, index + deleteCount).map(folder => folder.uri);\n\t\t}\n\n\t\tlet foldersToAdd: IWorkspaceFolderCreationData[] = [];\n\t\tif (Array.isArray(foldersToAddCandidates)) {\n\t\t\tfoldersToAdd = foldersToAddCandidates.map(folderToAdd => ({ uri: removeTrailingPathSeparator(folderToAdd.uri), name: folderToAdd.name })); // Normalize\n\t\t}\n\n\t\tconst wantsToDelete = foldersToDelete.length > 0;\n\t\tconst wantsToAdd = foldersToAdd.length > 0;\n\n\t\tif (!wantsToAdd && !wantsToDelete) {\n\t\t\treturn; // return early if there is nothing to do\n\t\t}\n\n\t\t// Add Folders\n\t\tif (wantsToAdd && !wantsToDelete) {\n\t\t\treturn this.doAddFolders(foldersToAdd, index, donotNotifyError);\n\t\t}\n\n\t\t// Delete Folders\n\t\tif (wantsToDelete && !wantsToAdd) {\n\t\t\treturn this.removeFolders(foldersToDelete);\n\t\t}\n\n\t\t// Add & Delete Folders\n\t\telse {\n\n\t\t\t// if we are in single-folder state and the folder is replaced with\n\t\t\t// other folders, we handle this specially and just enter workspace\n\t\t\t// mode with the folders that are being added.\n\t\t\tif (this.includesSingleFolderWorkspace(foldersToDelete)) {\n\t\t\t\treturn this.createAndEnterWorkspace(foldersToAdd);\n\t\t\t}\n\n\t\t\t// if we are not in workspace-state, we just add the folders\n\t\t\tif (this.contextService.getWorkbenchState() !== WorkbenchState.WORKSPACE) {\n\t\t\t\treturn this.doAddFolders(foldersToAdd, index, donotNotifyError);\n\t\t\t}\n\n\t\t\t// finally, update folders within the workspace\n\t\t\treturn this.doUpdateFolders(foldersToAdd, foldersToDelete, index, donotNotifyError);\n\t\t}\n\t}\n\n\tprivate async doUpdateFolders(foldersToAdd: IWorkspaceFolderCreationData[], foldersToDelete: URI[], index?: number, donotNotifyError: boolean = false): Promise<void> {\n\t\ttry {\n\t\t\tawait this.contextService.updateFolders(foldersToAdd, foldersToDelete, index);\n\t\t} catch (error) {\n\t\t\tif (donotNotifyError) {\n\t\t\t\tthrow error;\n\t\t\t}\n\n\t\t\tthis.handleWorkspaceConfigurationEditingError(error);\n\t\t}\n\t}\n\n\taddFolders(foldersToAddCandidates: IWorkspaceFolderCreationData[], donotNotifyError: boolean = false): Promise<void> {\n\n\t\t// Normalize\n\t\tconst foldersToAdd = foldersToAddCandidates.map(folderToAdd => ({ uri: removeTrailingPathSeparator(folderToAdd.uri), name: folderToAdd.name }));\n\n\t\treturn this.doAddFolders(foldersToAdd, undefined, donotNotifyError);\n\t}\n\n\tprivate async doAddFolders(foldersToAdd: IWorkspaceFolderCreationData[], index?: number, donotNotifyError: boolean = false): Promise<void> {\n\t\tconst state = this.contextService.getWorkbenchState();\n\t\tconst remoteAuthority = this.environmentService.remoteAuthority;\n\t\tif (remoteAuthority) {\n\t\t\t// https://github.com/microsoft/vscode/issues/94191\n\t\t\tfoldersToAdd = foldersToAdd.filter(folder => folder.uri.scheme !== Schemas.file && (folder.uri.scheme !== Schemas.vscodeRemote || isEqualAuthority(folder.uri.authority, remoteAuthority)));\n\t\t}\n\n\t\t// If we are in no-workspace or single-folder workspace, adding folders has to\n\t\t// enter a workspace.\n\t\tif (state !== WorkbenchState.WORKSPACE) {\n\t\t\tlet newWorkspaceFolders = this.contextService.getWorkspace().folders.map(folder => ({ uri: folder.uri }));\n\t\t\tnewWorkspaceFolders.splice(typeof index === 'number' ? index : newWorkspaceFolders.length, 0, ...foldersToAdd);\n\t\t\tnewWorkspaceFolders = distinct(newWorkspaceFolders, folder => this.uriIdentityService.extUri.getComparisonKey(folder.uri));\n\n\t\t\tif (state === WorkbenchState.EMPTY && newWorkspaceFolders.length === 0 || state === WorkbenchState.FOLDER && newWorkspaceFolders.length === 1) {\n\t\t\t\treturn; // return if the operation is a no-op for the current state\n\t\t\t}\n\n\t\t\treturn this.createAndEnterWorkspace(newWorkspaceFolders);\n\t\t}\n\n\t\t// Delegate addition of folders to workspace service otherwise\n\t\ttry {\n\t\t\tawait this.contextService.addFolders(foldersToAdd, index);\n\t\t} catch (error) {\n\t\t\tif (donotNotifyError) {\n\t\t\t\tthrow error;\n\t\t\t}\n\n\t\t\tthis.handleWorkspaceConfigurationEditingError(error);\n\t\t}\n\t}\n\n\tasync removeFolders(foldersToRemove: URI[], donotNotifyError: boolean = false): Promise<void> {\n\n\t\t// If we are in single-folder state and the opened folder is to be removed,\n\t\t// we create an empty workspace and enter it.\n\t\tif (this.includesSingleFolderWorkspace(foldersToRemove)) {\n\t\t\treturn this.createAndEnterWorkspace([]);\n\t\t}\n\n\t\t// Delegate removal of folders to workspace service otherwise\n\t\ttry {\n\t\t\tawait this.contextService.removeFolders(foldersToRemove);\n\t\t} catch (error) {\n\t\t\tif (donotNotifyError) {\n\t\t\t\tthrow error;\n\t\t\t}\n\n\t\t\tthis.handleWorkspaceConfigurationEditingError(error);\n\t\t}\n\t}\n\n\tprivate includesSingleFolderWorkspace(folders: URI[]): boolean {\n\t\tif (this.contextService.getWorkbenchState() === WorkbenchState.FOLDER) {\n\t\t\tconst workspaceFolder = this.contextService.getWorkspace().folders[0];\n\t\t\treturn (folders.some(folder => this.uriIdentityService.extUri.isEqual(folder, workspaceFolder.uri)));\n\t\t}\n\n\t\treturn false;\n\t}\n\n\tasync createAndEnterWorkspace(folders: IWorkspaceFolderCreationData[], path?: URI): Promise<void> {\n\t\tif (path && !await this.isValidTargetWorkspacePath(path)) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst remoteAuthority = this.environmentService.remoteAuthority;\n\t\tconst untitledWorkspace = await this.workspacesService.createUntitledWorkspace(folders, remoteAuthority);\n\t\tif (path) {\n\t\t\ttry {\n\t\t\t\tawait this.saveWorkspaceAs(untitledWorkspace, path);\n\t\t\t} finally {\n\t\t\t\tawait this.workspacesService.deleteUntitledWorkspace(untitledWorkspace); // https://github.com/microsoft/vscode/issues/100276\n\t\t\t}\n\t\t} else {\n\t\t\tpath = untitledWorkspace.configPath;\n\t\t\tif (!this.userDataProfileService.currentProfile.isDefault) {\n\t\t\t\tawait this.userDataProfilesService.setProfileForWorkspace(untitledWorkspace, this.userDataProfileService.currentProfile);\n\t\t\t}\n\t\t}\n\n\t\treturn this.enterWorkspace(path);\n\t}\n\n\tasync saveAndEnterWorkspace(workspaceUri: URI): Promise<void> {\n\t\tconst workspaceIdentifier = this.getCurrentWorkspaceIdentifier();\n\t\tif (!workspaceIdentifier) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Allow to save the workspace of the current window\n\t\t// if we have an identical match on the path\n\t\tif (isEqual(workspaceIdentifier.configPath, workspaceUri)) {\n\t\t\treturn this.saveWorkspace(workspaceIdentifier);\n\t\t}\n\n\t\t// From this moment on we require a valid target that is not opened already\n\t\tif (!await this.isValidTargetWorkspacePath(workspaceUri)) {\n\t\t\treturn;\n\t\t}\n\n\t\tawait this.saveWorkspaceAs(workspaceIdentifier, workspaceUri);\n\n\t\treturn this.enterWorkspace(workspaceUri);\n\t}\n\n\tasync isValidTargetWorkspacePath(workspaceUri: URI): Promise<boolean> {\n\t\treturn true; // OK\n\t}\n\n\tprotected async saveWorkspaceAs(workspace: IWorkspaceIdentifier, targetConfigPathURI: URI): Promise<void> {\n\t\tconst configPathURI = workspace.configPath;\n\n\t\tconst isNotUntitledWorkspace = !isUntitledWorkspace(targetConfigPathURI, this.environmentService);\n\t\tif (isNotUntitledWorkspace && !this.userDataProfileService.currentProfile.isDefault) {\n\t\t\tconst newWorkspace = await this.workspacesService.getWorkspaceIdentifier(targetConfigPathURI);\n\t\t\tawait this.userDataProfilesService.setProfileForWorkspace(newWorkspace, this.userDataProfileService.currentProfile);\n\t\t}\n\n\t\t// Return early if target is same as source\n\t\tif (this.uriIdentityService.extUri.isEqual(configPathURI, targetConfigPathURI)) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst isFromUntitledWorkspace = isUntitledWorkspace(configPathURI, this.environmentService);\n\n\t\t// Read the contents of the workspace file, update it to new location and save it.\n\t\tconst raw = await this.fileService.readFile(configPathURI);\n\t\tconst newRawWorkspaceContents = rewriteWorkspaceFileForNewLocation(raw.value.toString(), configPathURI, isFromUntitledWorkspace, targetConfigPathURI, this.uriIdentityService.extUri);\n\t\tawait this.textFileService.create([{ resource: targetConfigPathURI, value: newRawWorkspaceContents, options: { overwrite: true } }]);\n\n\t\t// Set trust for the workspace file\n\t\tawait this.trustWorkspaceConfiguration(targetConfigPathURI);\n\t}\n\n\tprotected async saveWorkspace(workspace: IWorkspaceIdentifier): Promise<void> {\n\t\tconst configPathURI = workspace.configPath;\n\n\t\t// First: try to save any existing model as it could be dirty\n\t\tconst existingModel = this.textFileService.files.get(configPathURI);\n\t\tif (existingModel) {\n\t\t\tawait existingModel.save({ force: true, reason: SaveReason.EXPLICIT });\n\t\t\treturn;\n\t\t}\n\n\t\t// Second: if the file exists on disk, simply return\n\t\tconst workspaceFileExists = await this.fileService.exists(configPathURI);\n\t\tif (workspaceFileExists) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Finally, we need to re-create the file as it was deleted\n\t\tconst newWorkspace: IStoredWorkspace = { folders: [] };\n\t\tconst newRawWorkspaceContents = rewriteWorkspaceFileForNewLocation(JSON.stringify(newWorkspace, null, '\\t'), configPathURI, false, configPathURI, this.uriIdentityService.extUri);\n\t\tawait this.textFileService.create([{ resource: configPathURI, value: newRawWorkspaceContents }]);\n\t}\n\n\tprivate handleWorkspaceConfigurationEditingError(error: JSONEditingError): void {\n\t\tswitch (error.code) {\n\t\t\tcase JSONEditingErrorCode.ERROR_INVALID_FILE:\n\t\t\t\tthis.onInvalidWorkspaceConfigurationFileError();\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tthis.notificationService.error(error.message);\n\t\t}\n\t}\n\n\tprivate onInvalidWorkspaceConfigurationFileError(): void {\n\t\tconst message = localize('errorInvalidTaskConfiguration', \"Unable to write into workspace configuration file. Please open the file to correct errors/warnings in it and try again.\");\n\t\tthis.askToOpenWorkspaceConfigurationFile(message);\n\t}\n\n\tprivate askToOpenWorkspaceConfigurationFile(message: string): void {\n\t\tthis.notificationService.prompt(Severity.Error, message,\n\t\t\t[{\n\t\t\t\tlabel: localize('openWorkspaceConfigurationFile', \"Open Workspace Configuration\"),\n\t\t\t\trun: () => this.commandService.executeCommand('workbench.action.openWorkspaceConfigFile')\n\t\t\t}]\n\t\t);\n\t}\n\n\tabstract enterWorkspace(workspaceUri: URI): Promise<void>;\n\n\tprotected async doEnterWorkspace(workspaceUri: URI): Promise<IEnterWorkspaceResult | undefined> {\n\t\tif (!!this.environmentService.extensionTestsLocationURI) {\n\t\t\tthrow new Error('Entering a new workspace is not possible in tests.');\n\t\t}\n\n\t\tconst workspace = await this.workspacesService.getWorkspaceIdentifier(workspaceUri);\n\n\t\t// Settings migration (only if we come from a folder workspace)\n\t\tif (this.contextService.getWorkbenchState() === WorkbenchState.FOLDER) {\n\t\t\tawait this.migrateWorkspaceSettings(workspace);\n\t\t}\n\n\t\tawait this.configurationService.initialize(workspace);\n\n\t\treturn this.workspacesService.enterWorkspace(workspaceUri);\n\t}\n\n\tprivate migrateWorkspaceSettings(toWorkspace: IWorkspaceIdentifier): Promise<void> {\n\t\treturn this.doCopyWorkspaceSettings(toWorkspace, setting => setting.scope === ConfigurationScope.WINDOW);\n\t}\n\n\tcopyWorkspaceSettings(toWorkspace: IWorkspaceIdentifier): Promise<void> {\n\t\treturn this.doCopyWorkspaceSettings(toWorkspace);\n\t}\n\n\tprivate doCopyWorkspaceSettings(toWorkspace: IWorkspaceIdentifier, filter?: (config: IConfigurationPropertySchema) => boolean): Promise<void> {\n\t\tconst configurationProperties = Registry.as<IConfigurationRegistry>(ConfigurationExtensions.Configuration).getConfigurationProperties();\n\t\tconst targetWorkspaceConfiguration: any = {};\n\t\tfor (const key of this.configurationService.keys().workspace) {\n\t\t\tif (configurationProperties[key]) {\n\t\t\t\tif (filter && !filter(configurationProperties[key])) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\ttargetWorkspaceConfiguration[key] = this.configurationService.inspect(key).workspaceValue;\n\t\t\t}\n\t\t}\n\n\t\treturn this.jsonEditingService.write(toWorkspace.configPath, [{ path: ['settings'], value: targetWorkspaceConfiguration }], true);\n\t}\n\n\tprivate async trustWorkspaceConfiguration(configPathURI: URI): Promise<void> {\n\t\tif (this.contextService.getWorkbenchState() !== WorkbenchState.EMPTY && this.workspaceTrustManagementService.isWorkspaceTrusted()) {\n\t\t\tawait this.workspaceTrustManagementService.setUrisTrust([configPathURI], true);\n\t\t}\n\t}\n\n\tprotected getCurrentWorkspaceIdentifier(): IWorkspaceIdentifier | undefined {\n\t\tconst identifier = toWorkspaceIdentifier(this.contextService.getWorkspace());\n\t\tif (isWorkspaceIdentifier(identifier)) {\n\t\t\treturn identifier;\n\t\t}\n\n\t\treturn undefined;\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
