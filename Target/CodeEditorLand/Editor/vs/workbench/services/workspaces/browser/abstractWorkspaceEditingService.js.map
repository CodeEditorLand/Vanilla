{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/workspaces/browser/abstractWorkspaceEditingService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { distinct } from \"../../../../base/common/arrays.js\";\nimport { mnemonicButtonLabel } from \"../../../../base/common/labels.js\";\nimport { Disposable } from \"../../../../base/common/lifecycle.js\";\nimport { Schemas } from \"../../../../base/common/network.js\";\nimport {\n\tbasename,\n\tisEqual,\n\tisEqualAuthority,\n\tjoinPath,\n\tremoveTrailingPathSeparator,\n} from \"../../../../base/common/resources.js\";\nimport type { URI } from \"../../../../base/common/uri.js\";\nimport { localize } from \"../../../../nls.js\";\nimport { ICommandService } from \"../../../../platform/commands/common/commands.js\";\nimport {\n\tExtensions as ConfigurationExtensions,\n\tConfigurationScope,\n\ttype IConfigurationPropertySchema,\n\ttype IConfigurationRegistry,\n} from \"../../../../platform/configuration/common/configurationRegistry.js\";\nimport {\n\tIDialogService,\n\tIFileDialogService,\n} from \"../../../../platform/dialogs/common/dialogs.js\";\nimport { IFileService } from \"../../../../platform/files/common/files.js\";\nimport {\n\tINotificationService,\n\tSeverity,\n} from \"../../../../platform/notification/common/notification.js\";\nimport { Registry } from \"../../../../platform/registry/common/platform.js\";\nimport { IUriIdentityService } from \"../../../../platform/uriIdentity/common/uriIdentity.js\";\nimport { IUserDataProfilesService } from \"../../../../platform/userDataProfile/common/userDataProfile.js\";\nimport {\n\tIWorkspaceContextService,\n\ttype IWorkspaceIdentifier,\n\tWORKSPACE_EXTENSION,\n\tWORKSPACE_FILTER,\n\tWorkbenchState,\n\thasWorkspaceFileExtension,\n\tisSavedWorkspace,\n\tisUntitledWorkspace,\n\tisWorkspaceIdentifier,\n\ttoWorkspaceIdentifier,\n} from \"../../../../platform/workspace/common/workspace.js\";\nimport { IWorkspaceTrustManagementService } from \"../../../../platform/workspace/common/workspaceTrust.js\";\nimport {\n\ttype IEnterWorkspaceResult,\n\ttype IStoredWorkspace,\n\ttype IWorkspaceFolderCreationData,\n\tIWorkspacesService,\n\trewriteWorkspaceFileForNewLocation,\n} from \"../../../../platform/workspaces/common/workspaces.js\";\nimport { SaveReason } from \"../../../common/editor.js\";\nimport type { WorkspaceService } from \"../../configuration/browser/configurationService.js\";\nimport { IWorkbenchConfigurationService } from \"../../configuration/common/configuration.js\";\nimport {\n\tIJSONEditingService,\n\ttype JSONEditingError,\n\tJSONEditingErrorCode,\n} from \"../../configuration/common/jsonEditing.js\";\nimport { IWorkbenchEnvironmentService } from \"../../environment/common/environmentService.js\";\nimport { IHostService } from \"../../host/browser/host.js\";\nimport { ITextFileService } from \"../../textfile/common/textfiles.js\";\nimport { IUserDataProfileService } from \"../../userDataProfile/common/userDataProfile.js\";\nimport type { IWorkspaceEditingService } from \"../common/workspaceEditing.js\";\n\nexport abstract class AbstractWorkspaceEditingService\n\textends Disposable\n\timplements IWorkspaceEditingService\n{\n\tdeclare readonly _serviceBrand: undefined;\n\n\tconstructor(\n\t\t@IJSONEditingService private readonly jsonEditingService: IJSONEditingService,\n\t\t@IWorkspaceContextService protected readonly contextService: WorkspaceService,\n\t\t@IWorkbenchConfigurationService protected readonly configurationService: IWorkbenchConfigurationService,\n\t\t@INotificationService private readonly notificationService: INotificationService,\n\t\t@ICommandService private readonly commandService: ICommandService,\n\t\t@IFileService private readonly fileService: IFileService,\n\t\t@ITextFileService private readonly textFileService: ITextFileService,\n\t\t@IWorkspacesService protected readonly workspacesService: IWorkspacesService,\n\t\t@IWorkbenchEnvironmentService protected readonly environmentService: IWorkbenchEnvironmentService,\n\t\t@IFileDialogService private readonly fileDialogService: IFileDialogService,\n\t\t@IDialogService protected readonly dialogService: IDialogService,\n\t\t@IHostService protected readonly hostService: IHostService,\n\t\t@IUriIdentityService protected readonly uriIdentityService: IUriIdentityService,\n\t\t@IWorkspaceTrustManagementService private readonly workspaceTrustManagementService: IWorkspaceTrustManagementService,\n\t\t@IUserDataProfilesService private readonly userDataProfilesService: IUserDataProfilesService,\n\t\t@IUserDataProfileService private readonly userDataProfileService: IUserDataProfileService,\n\t) {\n\t\tsuper();\n\t}\n\n\tasync pickNewWorkspacePath(): Promise<URI | undefined> {\n\t\tconst availableFileSystems = [Schemas.file];\n\t\tif (this.environmentService.remoteAuthority) {\n\t\t\tavailableFileSystems.unshift(Schemas.vscodeRemote);\n\t\t}\n\t\tlet workspacePath = await this.fileDialogService.showSaveDialog({\n\t\t\tsaveLabel: mnemonicButtonLabel(localize(\"save\", \"Save\")),\n\t\t\ttitle: localize(\"saveWorkspace\", \"Save Workspace\"),\n\t\t\tfilters: WORKSPACE_FILTER,\n\t\t\tdefaultUri: joinPath(\n\t\t\t\tawait this.fileDialogService.defaultWorkspacePath(),\n\t\t\t\tthis.getNewWorkspaceName(),\n\t\t\t),\n\t\t\tavailableFileSystems,\n\t\t});\n\n\t\tif (!workspacePath) {\n\t\t\treturn; // canceled\n\t\t}\n\n\t\tif (!hasWorkspaceFileExtension(workspacePath)) {\n\t\t\t// Always ensure we have workspace file extension\n\t\t\t// (see https://github.com/microsoft/vscode/issues/84818)\n\t\t\tworkspacePath = workspacePath.with({\n\t\t\t\tpath: `${workspacePath.path}.${WORKSPACE_EXTENSION}`,\n\t\t\t});\n\t\t}\n\n\t\treturn workspacePath;\n\t}\n\n\tprivate getNewWorkspaceName(): string {\n\t\t// First try with existing workspace name\n\t\tconst configPathURI = this.getCurrentWorkspaceIdentifier()?.configPath;\n\t\tif (\n\t\t\tconfigPathURI &&\n\t\t\tisSavedWorkspace(configPathURI, this.environmentService)\n\t\t) {\n\t\t\treturn basename(configPathURI);\n\t\t}\n\n\t\t// Then fallback to first folder if any\n\t\tconst folder = this.contextService.getWorkspace().folders.at(0);\n\t\tif (folder) {\n\t\t\treturn `${basename(folder.uri)}.${WORKSPACE_EXTENSION}`;\n\t\t}\n\n\t\t// Finally pick a good default\n\t\treturn `workspace.${WORKSPACE_EXTENSION}`;\n\t}\n\n\tasync updateFolders(\n\t\tindex: number,\n\t\tdeleteCount?: number,\n\t\tfoldersToAddCandidates?: IWorkspaceFolderCreationData[],\n\t\tdonotNotifyError?: boolean,\n\t): Promise<void> {\n\t\tconst folders = this.contextService.getWorkspace().folders;\n\n\t\tlet foldersToDelete: URI[] = [];\n\t\tif (typeof deleteCount === \"number\") {\n\t\t\tfoldersToDelete = folders\n\t\t\t\t.slice(index, index + deleteCount)\n\t\t\t\t.map((folder) => folder.uri);\n\t\t}\n\n\t\tlet foldersToAdd: IWorkspaceFolderCreationData[] = [];\n\t\tif (Array.isArray(foldersToAddCandidates)) {\n\t\t\tfoldersToAdd = foldersToAddCandidates.map((folderToAdd) => ({\n\t\t\t\turi: removeTrailingPathSeparator(folderToAdd.uri),\n\t\t\t\tname: folderToAdd.name,\n\t\t\t})); // Normalize\n\t\t}\n\n\t\tconst wantsToDelete = foldersToDelete.length > 0;\n\t\tconst wantsToAdd = foldersToAdd.length > 0;\n\n\t\tif (!wantsToAdd && !wantsToDelete) {\n\t\t\treturn; // return early if there is nothing to do\n\t\t}\n\n\t\t// Add Folders\n\t\tif (wantsToAdd && !wantsToDelete) {\n\t\t\treturn this.doAddFolders(foldersToAdd, index, donotNotifyError);\n\t\t}\n\n\t\t// Delete Folders\n\t\tif (wantsToDelete && !wantsToAdd) {\n\t\t\treturn this.removeFolders(foldersToDelete);\n\t\t}\n\n\t\t// Add & Delete Folders\n\t\telse {\n\t\t\t// if we are in single-folder state and the folder is replaced with\n\t\t\t// other folders, we handle this specially and just enter workspace\n\t\t\t// mode with the folders that are being added.\n\t\t\tif (this.includesSingleFolderWorkspace(foldersToDelete)) {\n\t\t\t\treturn this.createAndEnterWorkspace(foldersToAdd);\n\t\t\t}\n\n\t\t\t// if we are not in workspace-state, we just add the folders\n\t\t\tif (\n\t\t\t\tthis.contextService.getWorkbenchState() !==\n\t\t\t\tWorkbenchState.WORKSPACE\n\t\t\t) {\n\t\t\t\treturn this.doAddFolders(foldersToAdd, index, donotNotifyError);\n\t\t\t}\n\n\t\t\t// finally, update folders within the workspace\n\t\t\treturn this.doUpdateFolders(\n\t\t\t\tfoldersToAdd,\n\t\t\t\tfoldersToDelete,\n\t\t\t\tindex,\n\t\t\t\tdonotNotifyError,\n\t\t\t);\n\t\t}\n\t}\n\n\tprivate async doUpdateFolders(\n\t\tfoldersToAdd: IWorkspaceFolderCreationData[],\n\t\tfoldersToDelete: URI[],\n\t\tindex?: number,\n\t\tdonotNotifyError = false,\n\t): Promise<void> {\n\t\ttry {\n\t\t\tawait this.contextService.updateFolders(\n\t\t\t\tfoldersToAdd,\n\t\t\t\tfoldersToDelete,\n\t\t\t\tindex,\n\t\t\t);\n\t\t} catch (error) {\n\t\t\tif (donotNotifyError) {\n\t\t\t\tthrow error;\n\t\t\t}\n\n\t\t\tthis.handleWorkspaceConfigurationEditingError(error);\n\t\t}\n\t}\n\n\taddFolders(\n\t\tfoldersToAddCandidates: IWorkspaceFolderCreationData[],\n\t\tdonotNotifyError = false,\n\t): Promise<void> {\n\t\t// Normalize\n\t\tconst foldersToAdd = foldersToAddCandidates.map((folderToAdd) => ({\n\t\t\turi: removeTrailingPathSeparator(folderToAdd.uri),\n\t\t\tname: folderToAdd.name,\n\t\t}));\n\n\t\treturn this.doAddFolders(foldersToAdd, undefined, donotNotifyError);\n\t}\n\n\tprivate async doAddFolders(\n\t\tfoldersToAdd: IWorkspaceFolderCreationData[],\n\t\tindex?: number,\n\t\tdonotNotifyError = false,\n\t): Promise<void> {\n\t\tconst state = this.contextService.getWorkbenchState();\n\t\tconst remoteAuthority = this.environmentService.remoteAuthority;\n\t\tif (remoteAuthority) {\n\t\t\t// https://github.com/microsoft/vscode/issues/94191\n\t\t\tfoldersToAdd = foldersToAdd.filter(\n\t\t\t\t(folder) =>\n\t\t\t\t\tfolder.uri.scheme !== Schemas.file &&\n\t\t\t\t\t(folder.uri.scheme !== Schemas.vscodeRemote ||\n\t\t\t\t\t\tisEqualAuthority(\n\t\t\t\t\t\t\tfolder.uri.authority,\n\t\t\t\t\t\t\tremoteAuthority,\n\t\t\t\t\t\t)),\n\t\t\t);\n\t\t}\n\n\t\t// If we are in no-workspace or single-folder workspace, adding folders has to\n\t\t// enter a workspace.\n\t\tif (state !== WorkbenchState.WORKSPACE) {\n\t\t\tlet newWorkspaceFolders = this.contextService\n\t\t\t\t.getWorkspace()\n\t\t\t\t.folders.map((folder) => ({ uri: folder.uri }));\n\t\t\tnewWorkspaceFolders.splice(\n\t\t\t\ttypeof index === \"number\" ? index : newWorkspaceFolders.length,\n\t\t\t\t0,\n\t\t\t\t...foldersToAdd,\n\t\t\t);\n\t\t\tnewWorkspaceFolders = distinct(newWorkspaceFolders, (folder) =>\n\t\t\t\tthis.uriIdentityService.extUri.getComparisonKey(folder.uri),\n\t\t\t);\n\n\t\t\tif (\n\t\t\t\t(state === WorkbenchState.EMPTY &&\n\t\t\t\t\tnewWorkspaceFolders.length === 0) ||\n\t\t\t\t(state === WorkbenchState.FOLDER &&\n\t\t\t\t\tnewWorkspaceFolders.length === 1)\n\t\t\t) {\n\t\t\t\treturn; // return if the operation is a no-op for the current state\n\t\t\t}\n\n\t\t\treturn this.createAndEnterWorkspace(newWorkspaceFolders);\n\t\t}\n\n\t\t// Delegate addition of folders to workspace service otherwise\n\t\ttry {\n\t\t\tawait this.contextService.addFolders(foldersToAdd, index);\n\t\t} catch (error) {\n\t\t\tif (donotNotifyError) {\n\t\t\t\tthrow error;\n\t\t\t}\n\n\t\t\tthis.handleWorkspaceConfigurationEditingError(error);\n\t\t}\n\t}\n\n\tasync removeFolders(\n\t\tfoldersToRemove: URI[],\n\t\tdonotNotifyError = false,\n\t): Promise<void> {\n\t\t// If we are in single-folder state and the opened folder is to be removed,\n\t\t// we create an empty workspace and enter it.\n\t\tif (this.includesSingleFolderWorkspace(foldersToRemove)) {\n\t\t\treturn this.createAndEnterWorkspace([]);\n\t\t}\n\n\t\t// Delegate removal of folders to workspace service otherwise\n\t\ttry {\n\t\t\tawait this.contextService.removeFolders(foldersToRemove);\n\t\t} catch (error) {\n\t\t\tif (donotNotifyError) {\n\t\t\t\tthrow error;\n\t\t\t}\n\n\t\t\tthis.handleWorkspaceConfigurationEditingError(error);\n\t\t}\n\t}\n\n\tprivate includesSingleFolderWorkspace(folders: URI[]): boolean {\n\t\tif (this.contextService.getWorkbenchState() === WorkbenchState.FOLDER) {\n\t\t\tconst workspaceFolder =\n\t\t\t\tthis.contextService.getWorkspace().folders[0];\n\t\t\treturn folders.some((folder) =>\n\t\t\t\tthis.uriIdentityService.extUri.isEqual(\n\t\t\t\t\tfolder,\n\t\t\t\t\tworkspaceFolder.uri,\n\t\t\t\t),\n\t\t\t);\n\t\t}\n\n\t\treturn false;\n\t}\n\n\tasync createAndEnterWorkspace(\n\t\tfolders: IWorkspaceFolderCreationData[],\n\t\tpath?: URI,\n\t): Promise<void> {\n\t\tif (path && !(await this.isValidTargetWorkspacePath(path))) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst remoteAuthority = this.environmentService.remoteAuthority;\n\t\tconst untitledWorkspace =\n\t\t\tawait this.workspacesService.createUntitledWorkspace(\n\t\t\t\tfolders,\n\t\t\t\tremoteAuthority,\n\t\t\t);\n\t\tif (path) {\n\t\t\ttry {\n\t\t\t\tawait this.saveWorkspaceAs(untitledWorkspace, path);\n\t\t\t} finally {\n\t\t\t\tawait this.workspacesService.deleteUntitledWorkspace(\n\t\t\t\t\tuntitledWorkspace,\n\t\t\t\t); // https://github.com/microsoft/vscode/issues/100276\n\t\t\t}\n\t\t} else {\n\t\t\tpath = untitledWorkspace.configPath;\n\t\t\tif (!this.userDataProfileService.currentProfile.isDefault) {\n\t\t\t\tawait this.userDataProfilesService.setProfileForWorkspace(\n\t\t\t\t\tuntitledWorkspace,\n\t\t\t\t\tthis.userDataProfileService.currentProfile,\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\treturn this.enterWorkspace(path);\n\t}\n\n\tasync saveAndEnterWorkspace(workspaceUri: URI): Promise<void> {\n\t\tconst workspaceIdentifier = this.getCurrentWorkspaceIdentifier();\n\t\tif (!workspaceIdentifier) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Allow to save the workspace of the current window\n\t\t// if we have an identical match on the path\n\t\tif (isEqual(workspaceIdentifier.configPath, workspaceUri)) {\n\t\t\treturn this.saveWorkspace(workspaceIdentifier);\n\t\t}\n\n\t\t// From this moment on we require a valid target that is not opened already\n\t\tif (!(await this.isValidTargetWorkspacePath(workspaceUri))) {\n\t\t\treturn;\n\t\t}\n\n\t\tawait this.saveWorkspaceAs(workspaceIdentifier, workspaceUri);\n\n\t\treturn this.enterWorkspace(workspaceUri);\n\t}\n\n\tasync isValidTargetWorkspacePath(workspaceUri: URI): Promise<boolean> {\n\t\treturn true; // OK\n\t}\n\n\tprotected async saveWorkspaceAs(\n\t\tworkspace: IWorkspaceIdentifier,\n\t\ttargetConfigPathURI: URI,\n\t): Promise<void> {\n\t\tconst configPathURI = workspace.configPath;\n\n\t\tconst isNotUntitledWorkspace = !isUntitledWorkspace(\n\t\t\ttargetConfigPathURI,\n\t\t\tthis.environmentService,\n\t\t);\n\t\tif (\n\t\t\tisNotUntitledWorkspace &&\n\t\t\t!this.userDataProfileService.currentProfile.isDefault\n\t\t) {\n\t\t\tconst newWorkspace =\n\t\t\t\tawait this.workspacesService.getWorkspaceIdentifier(\n\t\t\t\t\ttargetConfigPathURI,\n\t\t\t\t);\n\t\t\tawait this.userDataProfilesService.setProfileForWorkspace(\n\t\t\t\tnewWorkspace,\n\t\t\t\tthis.userDataProfileService.currentProfile,\n\t\t\t);\n\t\t}\n\n\t\t// Return early if target is same as source\n\t\tif (\n\t\t\tthis.uriIdentityService.extUri.isEqual(\n\t\t\t\tconfigPathURI,\n\t\t\t\ttargetConfigPathURI,\n\t\t\t)\n\t\t) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst isFromUntitledWorkspace = isUntitledWorkspace(\n\t\t\tconfigPathURI,\n\t\t\tthis.environmentService,\n\t\t);\n\n\t\t// Read the contents of the workspace file, update it to new location and save it.\n\t\tconst raw = await this.fileService.readFile(configPathURI);\n\t\tconst newRawWorkspaceContents = rewriteWorkspaceFileForNewLocation(\n\t\t\traw.value.toString(),\n\t\t\tconfigPathURI,\n\t\t\tisFromUntitledWorkspace,\n\t\t\ttargetConfigPathURI,\n\t\t\tthis.uriIdentityService.extUri,\n\t\t);\n\t\tawait this.textFileService.create([\n\t\t\t{\n\t\t\t\tresource: targetConfigPathURI,\n\t\t\t\tvalue: newRawWorkspaceContents,\n\t\t\t\toptions: { overwrite: true },\n\t\t\t},\n\t\t]);\n\n\t\t// Set trust for the workspace file\n\t\tawait this.trustWorkspaceConfiguration(targetConfigPathURI);\n\t}\n\n\tprotected async saveWorkspace(\n\t\tworkspace: IWorkspaceIdentifier,\n\t): Promise<void> {\n\t\tconst configPathURI = workspace.configPath;\n\n\t\t// First: try to save any existing model as it could be dirty\n\t\tconst existingModel = this.textFileService.files.get(configPathURI);\n\t\tif (existingModel) {\n\t\t\tawait existingModel.save({\n\t\t\t\tforce: true,\n\t\t\t\treason: SaveReason.EXPLICIT,\n\t\t\t});\n\t\t\treturn;\n\t\t}\n\n\t\t// Second: if the file exists on disk, simply return\n\t\tconst workspaceFileExists =\n\t\t\tawait this.fileService.exists(configPathURI);\n\t\tif (workspaceFileExists) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Finally, we need to re-create the file as it was deleted\n\t\tconst newWorkspace: IStoredWorkspace = { folders: [] };\n\t\tconst newRawWorkspaceContents = rewriteWorkspaceFileForNewLocation(\n\t\t\tJSON.stringify(newWorkspace, null, \"\\t\"),\n\t\t\tconfigPathURI,\n\t\t\tfalse,\n\t\t\tconfigPathURI,\n\t\t\tthis.uriIdentityService.extUri,\n\t\t);\n\t\tawait this.textFileService.create([\n\t\t\t{ resource: configPathURI, value: newRawWorkspaceContents },\n\t\t]);\n\t}\n\n\tprivate handleWorkspaceConfigurationEditingError(\n\t\terror: JSONEditingError,\n\t): void {\n\t\tswitch (error.code) {\n\t\t\tcase JSONEditingErrorCode.ERROR_INVALID_FILE:\n\t\t\t\tthis.onInvalidWorkspaceConfigurationFileError();\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tthis.notificationService.error(error.message);\n\t\t}\n\t}\n\n\tprivate onInvalidWorkspaceConfigurationFileError(): void {\n\t\tconst message = localize(\n\t\t\t\"errorInvalidTaskConfiguration\",\n\t\t\t\"Unable to write into workspace configuration file. Please open the file to correct errors/warnings in it and try again.\",\n\t\t);\n\t\tthis.askToOpenWorkspaceConfigurationFile(message);\n\t}\n\n\tprivate askToOpenWorkspaceConfigurationFile(message: string): void {\n\t\tthis.notificationService.prompt(Severity.Error, message, [\n\t\t\t{\n\t\t\t\tlabel: localize(\n\t\t\t\t\t\"openWorkspaceConfigurationFile\",\n\t\t\t\t\t\"Open Workspace Configuration\",\n\t\t\t\t),\n\t\t\t\trun: () =>\n\t\t\t\t\tthis.commandService.executeCommand(\n\t\t\t\t\t\t\"workbench.action.openWorkspaceConfigFile\",\n\t\t\t\t\t),\n\t\t\t},\n\t\t]);\n\t}\n\n\tabstract enterWorkspace(workspaceUri: URI): Promise<void>;\n\n\tprotected async doEnterWorkspace(\n\t\tworkspaceUri: URI,\n\t): Promise<IEnterWorkspaceResult | undefined> {\n\t\tif (!!this.environmentService.extensionTestsLocationURI) {\n\t\t\tthrow new Error(\n\t\t\t\t\"Entering a new workspace is not possible in tests.\",\n\t\t\t);\n\t\t}\n\n\t\tconst workspace =\n\t\t\tawait this.workspacesService.getWorkspaceIdentifier(workspaceUri);\n\n\t\t// Settings migration (only if we come from a folder workspace)\n\t\tif (this.contextService.getWorkbenchState() === WorkbenchState.FOLDER) {\n\t\t\tawait this.migrateWorkspaceSettings(workspace);\n\t\t}\n\n\t\tawait this.configurationService.initialize(workspace);\n\n\t\treturn this.workspacesService.enterWorkspace(workspaceUri);\n\t}\n\n\tprivate migrateWorkspaceSettings(\n\t\ttoWorkspace: IWorkspaceIdentifier,\n\t): Promise<void> {\n\t\treturn this.doCopyWorkspaceSettings(\n\t\t\ttoWorkspace,\n\t\t\t(setting) => setting.scope === ConfigurationScope.WINDOW,\n\t\t);\n\t}\n\n\tcopyWorkspaceSettings(toWorkspace: IWorkspaceIdentifier): Promise<void> {\n\t\treturn this.doCopyWorkspaceSettings(toWorkspace);\n\t}\n\n\tprivate doCopyWorkspaceSettings(\n\t\ttoWorkspace: IWorkspaceIdentifier,\n\t\tfilter?: (config: IConfigurationPropertySchema) => boolean,\n\t): Promise<void> {\n\t\tconst configurationProperties = Registry.as<IConfigurationRegistry>(\n\t\t\tConfigurationExtensions.Configuration,\n\t\t).getConfigurationProperties();\n\t\tconst targetWorkspaceConfiguration: any = {};\n\t\tfor (const key of this.configurationService.keys().workspace) {\n\t\t\tif (configurationProperties[key]) {\n\t\t\t\tif (filter && !filter(configurationProperties[key])) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\ttargetWorkspaceConfiguration[key] =\n\t\t\t\t\tthis.configurationService.inspect(key).workspaceValue;\n\t\t\t}\n\t\t}\n\n\t\treturn this.jsonEditingService.write(\n\t\t\ttoWorkspace.configPath,\n\t\t\t[{ path: [\"settings\"], value: targetWorkspaceConfiguration }],\n\t\t\ttrue,\n\t\t);\n\t}\n\n\tprivate async trustWorkspaceConfiguration(\n\t\tconfigPathURI: URI,\n\t): Promise<void> {\n\t\tif (\n\t\t\tthis.contextService.getWorkbenchState() !== WorkbenchState.EMPTY &&\n\t\t\tthis.workspaceTrustManagementService.isWorkspaceTrusted()\n\t\t) {\n\t\t\tawait this.workspaceTrustManagementService.setUrisTrust(\n\t\t\t\t[configPathURI],\n\t\t\t\ttrue,\n\t\t\t);\n\t\t}\n\t}\n\n\tprotected getCurrentWorkspaceIdentifier():\n\t\t| IWorkspaceIdentifier\n\t\t| undefined {\n\t\tconst identifier = toWorkspaceIdentifier(\n\t\t\tthis.contextService.getWorkspace(),\n\t\t);\n\t\tif (isWorkspaceIdentifier(identifier)) {\n\t\t\treturn identifier;\n\t\t}\n\n\t\treturn undefined;\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
