{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/workspaces/browser/workspacesService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { InstantiationType, registerSingleton } from '../../../../platform/instantiation/common/extensions.js';\nimport { IWorkspacesService, IWorkspaceFolderCreationData, IEnterWorkspaceResult, IRecentlyOpened, restoreRecentlyOpened, IRecent, isRecentFile, isRecentFolder, toStoreData, IStoredWorkspaceFolder, getStoredWorkspaceFolder, IStoredWorkspace, isRecentWorkspace } from '../../../../platform/workspaces/common/workspaces.js';\nimport { URI } from '../../../../base/common/uri.js';\nimport { Emitter } from '../../../../base/common/event.js';\nimport { IStorageService, StorageScope, StorageTarget } from '../../../../platform/storage/common/storage.js';\nimport { isTemporaryWorkspace, IWorkspaceContextService, IWorkspaceFoldersChangeEvent, IWorkspaceIdentifier, WorkbenchState, WORKSPACE_EXTENSION } from '../../../../platform/workspace/common/workspace.js';\nimport { ILogService } from '../../../../platform/log/common/log.js';\nimport { Disposable, DisposableStore } from '../../../../base/common/lifecycle.js';\nimport { getWorkspaceIdentifier } from './workspaces.js';\nimport { IFileService, FileOperationError, FileOperationResult } from '../../../../platform/files/common/files.js';\nimport { IWorkbenchEnvironmentService } from '../../environment/common/environmentService.js';\nimport { joinPath } from '../../../../base/common/resources.js';\nimport { VSBuffer } from '../../../../base/common/buffer.js';\nimport { IUriIdentityService } from '../../../../platform/uriIdentity/common/uriIdentity.js';\nimport { IWorkspaceBackupInfo, IFolderBackupInfo } from '../../../../platform/backup/common/backup.js';\nimport { Schemas } from '../../../../base/common/network.js';\n\nexport class BrowserWorkspacesService extends Disposable implements IWorkspacesService {\n\n\tstatic readonly RECENTLY_OPENED_KEY = 'recently.opened';\n\n\tdeclare readonly _serviceBrand: undefined;\n\n\tprivate readonly _onRecentlyOpenedChange = this._register(new Emitter<void>());\n\treadonly onDidChangeRecentlyOpened = this._onRecentlyOpenedChange.event;\n\n\tconstructor(\n\t\t@IStorageService private readonly storageService: IStorageService,\n\t\t@IWorkspaceContextService private readonly contextService: IWorkspaceContextService,\n\t\t@ILogService private readonly logService: ILogService,\n\t\t@IFileService private readonly fileService: IFileService,\n\t\t@IWorkbenchEnvironmentService private readonly environmentService: IWorkbenchEnvironmentService,\n\t\t@IUriIdentityService private readonly uriIdentityService: IUriIdentityService,\n\t) {\n\t\tsuper();\n\n\t\t// Opening a workspace should push it as most\n\t\t// recently used to the workspaces history\n\t\tthis.addWorkspaceToRecentlyOpened();\n\n\t\tthis.registerListeners();\n\t}\n\n\tprivate registerListeners(): void {\n\n\t\t// Storage\n\t\tthis._register(this.storageService.onDidChangeValue(StorageScope.APPLICATION, BrowserWorkspacesService.RECENTLY_OPENED_KEY, this._register(new DisposableStore()))(() => this._onRecentlyOpenedChange.fire()));\n\n\t\t// Workspace\n\t\tthis._register(this.contextService.onDidChangeWorkspaceFolders(e => this.onDidChangeWorkspaceFolders(e)));\n\t}\n\n\tprivate onDidChangeWorkspaceFolders(e: IWorkspaceFoldersChangeEvent): void {\n\t\tif (!isTemporaryWorkspace(this.contextService.getWorkspace())) {\n\t\t\treturn;\n\t\t}\n\n\t\t// When in a temporary workspace, make sure to track folder changes\n\t\t// in the history so that these can later be restored.\n\n\t\tfor (const folder of e.added) {\n\t\t\tthis.addRecentlyOpened([{ folderUri: folder.uri }]);\n\t\t}\n\t}\n\n\tprivate addWorkspaceToRecentlyOpened(): void {\n\t\tconst workspace = this.contextService.getWorkspace();\n\t\tconst remoteAuthority = this.environmentService.remoteAuthority;\n\t\tswitch (this.contextService.getWorkbenchState()) {\n\t\t\tcase WorkbenchState.FOLDER:\n\t\t\t\tthis.addRecentlyOpened([{ folderUri: workspace.folders[0].uri, remoteAuthority }]);\n\t\t\t\tbreak;\n\t\t\tcase WorkbenchState.WORKSPACE:\n\t\t\t\tthis.addRecentlyOpened([{ workspace: { id: workspace.id, configPath: workspace.configuration! }, remoteAuthority }]);\n\t\t\t\tbreak;\n\t\t}\n\t}\n\n\t//#region Workspaces History\n\n\tasync getRecentlyOpened(): Promise<IRecentlyOpened> {\n\t\tconst recentlyOpenedRaw = this.storageService.get(BrowserWorkspacesService.RECENTLY_OPENED_KEY, StorageScope.APPLICATION);\n\t\tif (recentlyOpenedRaw) {\n\t\t\tconst recentlyOpened = restoreRecentlyOpened(JSON.parse(recentlyOpenedRaw), this.logService);\n\t\t\trecentlyOpened.workspaces = recentlyOpened.workspaces.filter(recent => {\n\n\t\t\t\t// In web, unless we are in a temporary workspace, we cannot support\n\t\t\t\t// to switch to local folders because this would require a window\n\t\t\t\t// reload and local file access only works with explicit user gesture\n\t\t\t\t// from the current session.\n\t\t\t\tif (isRecentFolder(recent) && recent.folderUri.scheme === Schemas.file && !isTemporaryWorkspace(this.contextService.getWorkspace())) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\t// Never offer temporary workspaces in the history\n\t\t\t\tif (isRecentWorkspace(recent) && isTemporaryWorkspace(recent.workspace.configPath)) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\treturn true;\n\t\t\t});\n\n\t\t\treturn recentlyOpened;\n\t\t}\n\n\t\treturn { workspaces: [], files: [] };\n\t}\n\n\tasync addRecentlyOpened(recents: IRecent[]): Promise<void> {\n\t\tconst recentlyOpened = await this.getRecentlyOpened();\n\n\t\tfor (const recent of recents) {\n\t\t\tif (isRecentFile(recent)) {\n\t\t\t\tthis.doRemoveRecentlyOpened(recentlyOpened, [recent.fileUri]);\n\t\t\t\trecentlyOpened.files.unshift(recent);\n\t\t\t} else if (isRecentFolder(recent)) {\n\t\t\t\tthis.doRemoveRecentlyOpened(recentlyOpened, [recent.folderUri]);\n\t\t\t\trecentlyOpened.workspaces.unshift(recent);\n\t\t\t} else {\n\t\t\t\tthis.doRemoveRecentlyOpened(recentlyOpened, [recent.workspace.configPath]);\n\t\t\t\trecentlyOpened.workspaces.unshift(recent);\n\t\t\t}\n\t\t}\n\n\t\treturn this.saveRecentlyOpened(recentlyOpened);\n\t}\n\n\tasync removeRecentlyOpened(paths: URI[]): Promise<void> {\n\t\tconst recentlyOpened = await this.getRecentlyOpened();\n\n\t\tthis.doRemoveRecentlyOpened(recentlyOpened, paths);\n\n\t\treturn this.saveRecentlyOpened(recentlyOpened);\n\t}\n\n\tprivate doRemoveRecentlyOpened(recentlyOpened: IRecentlyOpened, paths: URI[]): void {\n\t\trecentlyOpened.files = recentlyOpened.files.filter(file => {\n\t\t\treturn !paths.some(path => path.toString() === file.fileUri.toString());\n\t\t});\n\n\t\trecentlyOpened.workspaces = recentlyOpened.workspaces.filter(workspace => {\n\t\t\treturn !paths.some(path => path.toString() === (isRecentFolder(workspace) ? workspace.folderUri.toString() : workspace.workspace.configPath.toString()));\n\t\t});\n\t}\n\n\tprivate async saveRecentlyOpened(data: IRecentlyOpened): Promise<void> {\n\t\treturn this.storageService.store(BrowserWorkspacesService.RECENTLY_OPENED_KEY, JSON.stringify(toStoreData(data)), StorageScope.APPLICATION, StorageTarget.USER);\n\t}\n\n\tasync clearRecentlyOpened(): Promise<void> {\n\t\tthis.storageService.remove(BrowserWorkspacesService.RECENTLY_OPENED_KEY, StorageScope.APPLICATION);\n\t}\n\n\t//#endregion\n\n\t//#region Workspace Management\n\n\tasync enterWorkspace(workspaceUri: URI): Promise<IEnterWorkspaceResult | undefined> {\n\t\treturn { workspace: await this.getWorkspaceIdentifier(workspaceUri) };\n\t}\n\n\tasync createUntitledWorkspace(folders?: IWorkspaceFolderCreationData[], remoteAuthority?: string): Promise<IWorkspaceIdentifier> {\n\t\tconst randomId = (Date.now() + Math.round(Math.random() * 1000)).toString();\n\t\tconst newUntitledWorkspacePath = joinPath(this.environmentService.untitledWorkspacesHome, `Untitled-${randomId}.${WORKSPACE_EXTENSION}`);\n\n\t\t// Build array of workspace folders to store\n\t\tconst storedWorkspaceFolder: IStoredWorkspaceFolder[] = [];\n\t\tif (folders) {\n\t\t\tfor (const folder of folders) {\n\t\t\t\tstoredWorkspaceFolder.push(getStoredWorkspaceFolder(folder.uri, true, folder.name, this.environmentService.untitledWorkspacesHome, this.uriIdentityService.extUri));\n\t\t\t}\n\t\t}\n\n\t\t// Store at untitled workspaces location\n\t\tconst storedWorkspace: IStoredWorkspace = { folders: storedWorkspaceFolder, remoteAuthority };\n\t\tawait this.fileService.writeFile(newUntitledWorkspacePath, VSBuffer.fromString(JSON.stringify(storedWorkspace, null, '\\t')));\n\n\t\treturn this.getWorkspaceIdentifier(newUntitledWorkspacePath);\n\t}\n\n\tasync deleteUntitledWorkspace(workspace: IWorkspaceIdentifier): Promise<void> {\n\t\ttry {\n\t\t\tawait this.fileService.del(workspace.configPath);\n\t\t} catch (error) {\n\t\t\tif ((<FileOperationError>error).fileOperationResult !== FileOperationResult.FILE_NOT_FOUND) {\n\t\t\t\tthrow error; // re-throw any other error than file not found which is OK\n\t\t\t}\n\t\t}\n\t}\n\n\tasync getWorkspaceIdentifier(workspaceUri: URI): Promise<IWorkspaceIdentifier> {\n\t\treturn getWorkspaceIdentifier(workspaceUri);\n\t}\n\n\t//#endregion\n\n\n\t//#region Dirty Workspaces\n\n\tasync getDirtyWorkspaces(): Promise<Array<IWorkspaceBackupInfo | IFolderBackupInfo>> {\n\t\treturn []; // Currently not supported in web\n\t}\n\n\t//#endregion\n}\n\nregisterSingleton(IWorkspacesService, BrowserWorkspacesService, InstantiationType.Delayed);\n"],
  "mappings": "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",
  "names": []
}
