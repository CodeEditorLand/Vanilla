{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/workspaces/browser/workspacesService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { VSBuffer } from \"../../../../base/common/buffer.js\";\nimport { Emitter } from \"../../../../base/common/event.js\";\nimport {\n\tDisposable,\n\tDisposableStore,\n} from \"../../../../base/common/lifecycle.js\";\nimport { Schemas } from \"../../../../base/common/network.js\";\nimport { joinPath } from \"../../../../base/common/resources.js\";\nimport type { URI } from \"../../../../base/common/uri.js\";\nimport type {\n\tIFolderBackupInfo,\n\tIWorkspaceBackupInfo,\n} from \"../../../../platform/backup/common/backup.js\";\nimport {\n\ttype FileOperationError,\n\tFileOperationResult,\n\tIFileService,\n} from \"../../../../platform/files/common/files.js\";\nimport {\n\tInstantiationType,\n\tregisterSingleton,\n} from \"../../../../platform/instantiation/common/extensions.js\";\nimport { ILogService } from \"../../../../platform/log/common/log.js\";\nimport {\n\tIStorageService,\n\tStorageScope,\n\tStorageTarget,\n} from \"../../../../platform/storage/common/storage.js\";\nimport { IUriIdentityService } from \"../../../../platform/uriIdentity/common/uriIdentity.js\";\nimport {\n\tIWorkspaceContextService,\n\ttype IWorkspaceFoldersChangeEvent,\n\ttype IWorkspaceIdentifier,\n\tWORKSPACE_EXTENSION,\n\tWorkbenchState,\n\tisTemporaryWorkspace,\n} from \"../../../../platform/workspace/common/workspace.js\";\nimport {\n\ttype IEnterWorkspaceResult,\n\ttype IRecent,\n\ttype IRecentlyOpened,\n\ttype IStoredWorkspace,\n\ttype IStoredWorkspaceFolder,\n\ttype IWorkspaceFolderCreationData,\n\tIWorkspacesService,\n\tgetStoredWorkspaceFolder,\n\tisRecentFile,\n\tisRecentFolder,\n\tisRecentWorkspace,\n\trestoreRecentlyOpened,\n\ttoStoreData,\n} from \"../../../../platform/workspaces/common/workspaces.js\";\nimport { IWorkbenchEnvironmentService } from \"../../environment/common/environmentService.js\";\nimport { getWorkspaceIdentifier } from \"./workspaces.js\";\n\nexport class BrowserWorkspacesService\n\textends Disposable\n\timplements IWorkspacesService\n{\n\tstatic readonly RECENTLY_OPENED_KEY = \"recently.opened\";\n\n\tdeclare readonly _serviceBrand: undefined;\n\n\tprivate readonly _onRecentlyOpenedChange = this._register(\n\t\tnew Emitter<void>(),\n\t);\n\treadonly onDidChangeRecentlyOpened = this._onRecentlyOpenedChange.event;\n\n\tconstructor(\n\t\t@IStorageService private readonly storageService: IStorageService,\n\t\t@IWorkspaceContextService private readonly contextService: IWorkspaceContextService,\n\t\t@ILogService private readonly logService: ILogService,\n\t\t@IFileService private readonly fileService: IFileService,\n\t\t@IWorkbenchEnvironmentService private readonly environmentService: IWorkbenchEnvironmentService,\n\t\t@IUriIdentityService private readonly uriIdentityService: IUriIdentityService,\n\t) {\n\t\tsuper();\n\n\t\t// Opening a workspace should push it as most\n\t\t// recently used to the workspaces history\n\t\tthis.addWorkspaceToRecentlyOpened();\n\n\t\tthis.registerListeners();\n\t}\n\n\tprivate registerListeners(): void {\n\t\t// Storage\n\t\tthis._register(\n\t\t\tthis.storageService.onDidChangeValue(\n\t\t\t\tStorageScope.APPLICATION,\n\t\t\t\tBrowserWorkspacesService.RECENTLY_OPENED_KEY,\n\t\t\t\tthis._register(new DisposableStore()),\n\t\t\t)(() => this._onRecentlyOpenedChange.fire()),\n\t\t);\n\n\t\t// Workspace\n\t\tthis._register(\n\t\t\tthis.contextService.onDidChangeWorkspaceFolders((e) =>\n\t\t\t\tthis.onDidChangeWorkspaceFolders(e),\n\t\t\t),\n\t\t);\n\t}\n\n\tprivate onDidChangeWorkspaceFolders(e: IWorkspaceFoldersChangeEvent): void {\n\t\tif (!isTemporaryWorkspace(this.contextService.getWorkspace())) {\n\t\t\treturn;\n\t\t}\n\n\t\t// When in a temporary workspace, make sure to track folder changes\n\t\t// in the history so that these can later be restored.\n\n\t\tfor (const folder of e.added) {\n\t\t\tthis.addRecentlyOpened([{ folderUri: folder.uri }]);\n\t\t}\n\t}\n\n\tprivate addWorkspaceToRecentlyOpened(): void {\n\t\tconst workspace = this.contextService.getWorkspace();\n\t\tconst remoteAuthority = this.environmentService.remoteAuthority;\n\t\tswitch (this.contextService.getWorkbenchState()) {\n\t\t\tcase WorkbenchState.FOLDER:\n\t\t\t\tthis.addRecentlyOpened([\n\t\t\t\t\t{ folderUri: workspace.folders[0].uri, remoteAuthority },\n\t\t\t\t]);\n\t\t\t\tbreak;\n\t\t\tcase WorkbenchState.WORKSPACE:\n\t\t\t\tthis.addRecentlyOpened([\n\t\t\t\t\t{\n\t\t\t\t\t\tworkspace: {\n\t\t\t\t\t\t\tid: workspace.id,\n\t\t\t\t\t\t\tconfigPath: workspace.configuration!,\n\t\t\t\t\t\t},\n\t\t\t\t\t\tremoteAuthority,\n\t\t\t\t\t},\n\t\t\t\t]);\n\t\t\t\tbreak;\n\t\t}\n\t}\n\n\t//#region Workspaces History\n\n\tasync getRecentlyOpened(): Promise<IRecentlyOpened> {\n\t\tconst recentlyOpenedRaw = this.storageService.get(\n\t\t\tBrowserWorkspacesService.RECENTLY_OPENED_KEY,\n\t\t\tStorageScope.APPLICATION,\n\t\t);\n\t\tif (recentlyOpenedRaw) {\n\t\t\tconst recentlyOpened = restoreRecentlyOpened(\n\t\t\t\tJSON.parse(recentlyOpenedRaw),\n\t\t\t\tthis.logService,\n\t\t\t);\n\t\t\trecentlyOpened.workspaces = recentlyOpened.workspaces.filter(\n\t\t\t\t(recent) => {\n\t\t\t\t\t// In web, unless we are in a temporary workspace, we cannot support\n\t\t\t\t\t// to switch to local folders because this would require a window\n\t\t\t\t\t// reload and local file access only works with explicit user gesture\n\t\t\t\t\t// from the current session.\n\t\t\t\t\tif (\n\t\t\t\t\t\tisRecentFolder(recent) &&\n\t\t\t\t\t\trecent.folderUri.scheme === Schemas.file &&\n\t\t\t\t\t\t!isTemporaryWorkspace(\n\t\t\t\t\t\t\tthis.contextService.getWorkspace(),\n\t\t\t\t\t\t)\n\t\t\t\t\t) {\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Never offer temporary workspaces in the history\n\t\t\t\t\tif (\n\t\t\t\t\t\tisRecentWorkspace(recent) &&\n\t\t\t\t\t\tisTemporaryWorkspace(recent.workspace.configPath)\n\t\t\t\t\t) {\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\n\t\t\t\t\treturn true;\n\t\t\t\t},\n\t\t\t);\n\n\t\t\treturn recentlyOpened;\n\t\t}\n\n\t\treturn { workspaces: [], files: [] };\n\t}\n\n\tasync addRecentlyOpened(recents: IRecent[]): Promise<void> {\n\t\tconst recentlyOpened = await this.getRecentlyOpened();\n\n\t\tfor (const recent of recents) {\n\t\t\tif (isRecentFile(recent)) {\n\t\t\t\tthis.doRemoveRecentlyOpened(recentlyOpened, [recent.fileUri]);\n\t\t\t\trecentlyOpened.files.unshift(recent);\n\t\t\t} else if (isRecentFolder(recent)) {\n\t\t\t\tthis.doRemoveRecentlyOpened(recentlyOpened, [recent.folderUri]);\n\t\t\t\trecentlyOpened.workspaces.unshift(recent);\n\t\t\t} else {\n\t\t\t\tthis.doRemoveRecentlyOpened(recentlyOpened, [\n\t\t\t\t\trecent.workspace.configPath,\n\t\t\t\t]);\n\t\t\t\trecentlyOpened.workspaces.unshift(recent);\n\t\t\t}\n\t\t}\n\n\t\treturn this.saveRecentlyOpened(recentlyOpened);\n\t}\n\n\tasync removeRecentlyOpened(paths: URI[]): Promise<void> {\n\t\tconst recentlyOpened = await this.getRecentlyOpened();\n\n\t\tthis.doRemoveRecentlyOpened(recentlyOpened, paths);\n\n\t\treturn this.saveRecentlyOpened(recentlyOpened);\n\t}\n\n\tprivate doRemoveRecentlyOpened(\n\t\trecentlyOpened: IRecentlyOpened,\n\t\tpaths: URI[],\n\t): void {\n\t\trecentlyOpened.files = recentlyOpened.files.filter((file) => {\n\t\t\treturn !paths.some(\n\t\t\t\t(path) => path.toString() === file.fileUri.toString(),\n\t\t\t);\n\t\t});\n\n\t\trecentlyOpened.workspaces = recentlyOpened.workspaces.filter(\n\t\t\t(workspace) => {\n\t\t\t\treturn !paths.some(\n\t\t\t\t\t(path) =>\n\t\t\t\t\t\tpath.toString() ===\n\t\t\t\t\t\t(isRecentFolder(workspace)\n\t\t\t\t\t\t\t? workspace.folderUri.toString()\n\t\t\t\t\t\t\t: workspace.workspace.configPath.toString()),\n\t\t\t\t);\n\t\t\t},\n\t\t);\n\t}\n\n\tprivate async saveRecentlyOpened(data: IRecentlyOpened): Promise<void> {\n\t\treturn this.storageService.store(\n\t\t\tBrowserWorkspacesService.RECENTLY_OPENED_KEY,\n\t\t\tJSON.stringify(toStoreData(data)),\n\t\t\tStorageScope.APPLICATION,\n\t\t\tStorageTarget.USER,\n\t\t);\n\t}\n\n\tasync clearRecentlyOpened(): Promise<void> {\n\t\tthis.storageService.remove(\n\t\t\tBrowserWorkspacesService.RECENTLY_OPENED_KEY,\n\t\t\tStorageScope.APPLICATION,\n\t\t);\n\t}\n\n\t//#endregion\n\n\t//#region Workspace Management\n\n\tasync enterWorkspace(\n\t\tworkspaceUri: URI,\n\t): Promise<IEnterWorkspaceResult | undefined> {\n\t\treturn { workspace: await this.getWorkspaceIdentifier(workspaceUri) };\n\t}\n\n\tasync createUntitledWorkspace(\n\t\tfolders?: IWorkspaceFolderCreationData[],\n\t\tremoteAuthority?: string,\n\t): Promise<IWorkspaceIdentifier> {\n\t\tconst randomId = (\n\t\t\tDate.now() + Math.round(Math.random() * 1000)\n\t\t).toString();\n\t\tconst newUntitledWorkspacePath = joinPath(\n\t\t\tthis.environmentService.untitledWorkspacesHome,\n\t\t\t`Untitled-${randomId}.${WORKSPACE_EXTENSION}`,\n\t\t);\n\n\t\t// Build array of workspace folders to store\n\t\tconst storedWorkspaceFolder: IStoredWorkspaceFolder[] = [];\n\t\tif (folders) {\n\t\t\tfor (const folder of folders) {\n\t\t\t\tstoredWorkspaceFolder.push(\n\t\t\t\t\tgetStoredWorkspaceFolder(\n\t\t\t\t\t\tfolder.uri,\n\t\t\t\t\t\ttrue,\n\t\t\t\t\t\tfolder.name,\n\t\t\t\t\t\tthis.environmentService.untitledWorkspacesHome,\n\t\t\t\t\t\tthis.uriIdentityService.extUri,\n\t\t\t\t\t),\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\t// Store at untitled workspaces location\n\t\tconst storedWorkspace: IStoredWorkspace = {\n\t\t\tfolders: storedWorkspaceFolder,\n\t\t\tremoteAuthority,\n\t\t};\n\t\tawait this.fileService.writeFile(\n\t\t\tnewUntitledWorkspacePath,\n\t\t\tVSBuffer.fromString(JSON.stringify(storedWorkspace, null, \"\\t\")),\n\t\t);\n\n\t\treturn this.getWorkspaceIdentifier(newUntitledWorkspacePath);\n\t}\n\n\tasync deleteUntitledWorkspace(\n\t\tworkspace: IWorkspaceIdentifier,\n\t): Promise<void> {\n\t\ttry {\n\t\t\tawait this.fileService.del(workspace.configPath);\n\t\t} catch (error) {\n\t\t\tif (\n\t\t\t\t(<FileOperationError>error).fileOperationResult !==\n\t\t\t\tFileOperationResult.FILE_NOT_FOUND\n\t\t\t) {\n\t\t\t\tthrow error; // re-throw any other error than file not found which is OK\n\t\t\t}\n\t\t}\n\t}\n\n\tasync getWorkspaceIdentifier(\n\t\tworkspaceUri: URI,\n\t): Promise<IWorkspaceIdentifier> {\n\t\treturn getWorkspaceIdentifier(workspaceUri);\n\t}\n\n\t//#endregion\n\n\t//#region Dirty Workspaces\n\n\tasync getDirtyWorkspaces(): Promise<\n\t\tArray<IWorkspaceBackupInfo | IFolderBackupInfo>\n\t> {\n\t\treturn []; // Currently not supported in web\n\t}\n\n\t//#endregion\n}\n\nregisterSingleton(\n\tIWorkspacesService,\n\tBrowserWorkspacesService,\n\tInstantiationType.Delayed,\n);\n"],
  "mappings": "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",
  "names": []
}
