{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/panecomposite/browser/panecomposite.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport type { Event } from \"../../../../base/common/event.js\";\nimport { createDecorator } from \"../../../../platform/instantiation/common/instantiation.js\";\nimport type { IProgressIndicator } from \"../../../../platform/progress/common/progress.js\";\nimport type { PaneCompositeDescriptor } from \"../../../browser/panecomposite.js\";\nimport type { IPaneComposite } from \"../../../common/panecomposite.js\";\nimport type { ViewContainerLocation } from \"../../../common/views.js\";\n\nexport const IPaneCompositePartService =\n\tcreateDecorator<IPaneCompositePartService>(\"paneCompositePartService\");\n\nexport interface IPaneCompositePartService {\n\treadonly _serviceBrand: undefined;\n\n\treadonly onDidPaneCompositeOpen: Event<{\n\t\tcomposite: IPaneComposite;\n\t\tviewContainerLocation: ViewContainerLocation;\n\t}>;\n\treadonly onDidPaneCompositeClose: Event<{\n\t\tcomposite: IPaneComposite;\n\t\tviewContainerLocation: ViewContainerLocation;\n\t}>;\n\n\t/**\n\t * Opens a viewlet with the given identifier and pass keyboard focus to it if specified.\n\t */\n\topenPaneComposite(\n\t\tid: string | undefined,\n\t\tviewContainerLocation: ViewContainerLocation,\n\t\tfocus?: boolean,\n\t): Promise<IPaneComposite | undefined>;\n\n\t/**\n\t * Returns the current active viewlet if any.\n\t */\n\tgetActivePaneComposite(\n\t\tviewContainerLocation: ViewContainerLocation,\n\t): IPaneComposite | undefined;\n\n\t/**\n\t * Returns the viewlet by id.\n\t */\n\tgetPaneComposite(\n\t\tid: string,\n\t\tviewContainerLocation: ViewContainerLocation,\n\t): PaneCompositeDescriptor | undefined;\n\n\t/**\n\t * Returns all enabled viewlets\n\t */\n\tgetPaneComposites(\n\t\tviewContainerLocation: ViewContainerLocation,\n\t): PaneCompositeDescriptor[];\n\n\t/**\n\t * Returns id of pinned view containers following the visual order.\n\t */\n\tgetPinnedPaneCompositeIds(\n\t\tviewContainerLocation: ViewContainerLocation,\n\t): string[];\n\n\t/**\n\t * Returns id of visible view containers following the visual order.\n\t */\n\tgetVisiblePaneCompositeIds(\n\t\tviewContainerLocation: ViewContainerLocation,\n\t): string[];\n\n\t/**\n\t * Returns the progress indicator for the side bar.\n\t */\n\tgetProgressIndicator(\n\t\tid: string,\n\t\tviewContainerLocation: ViewContainerLocation,\n\t): IProgressIndicator | undefined;\n\n\t/**\n\t * Hide the active viewlet.\n\t */\n\thideActivePaneComposite(viewContainerLocation: ViewContainerLocation): void;\n\n\t/**\n\t * Return the last active viewlet id.\n\t */\n\tgetLastActivePaneCompositeId(\n\t\tviewContainerLocation: ViewContainerLocation,\n\t): string;\n}\n"],
  "mappings": "AAMA,SAAS,uBAAuB;AAMzB,MAAM,4BACZ,gBAA2C,0BAA0B;",
  "names": []
}
