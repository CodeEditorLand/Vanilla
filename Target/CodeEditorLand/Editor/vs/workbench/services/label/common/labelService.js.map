{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/label/common/labelService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { localize } from '../../../../nls.js';\nimport { URI } from '../../../../base/common/uri.js';\nimport { IDisposable, Disposable, dispose } from '../../../../base/common/lifecycle.js';\nimport { posix, sep, win32 } from '../../../../base/common/path.js';\nimport { Emitter } from '../../../../base/common/event.js';\nimport { Extensions as WorkbenchExtensions, IWorkbenchContributionsRegistry, IWorkbenchContribution } from '../../../common/contributions.js';\nimport { Registry } from '../../../../platform/registry/common/platform.js';\nimport { IWorkbenchEnvironmentService } from '../../environment/common/environmentService.js';\nimport { IWorkspaceContextService, IWorkspace, isWorkspace, ISingleFolderWorkspaceIdentifier, isSingleFolderWorkspaceIdentifier, isWorkspaceIdentifier, IWorkspaceIdentifier, toWorkspaceIdentifier, WORKSPACE_EXTENSION, isUntitledWorkspace, isTemporaryWorkspace } from '../../../../platform/workspace/common/workspace.js';\nimport { basenameOrAuthority, basename, joinPath, dirname } from '../../../../base/common/resources.js';\nimport { tildify, getPathLabel } from '../../../../base/common/labels.js';\nimport { ILabelService, ResourceLabelFormatter, ResourceLabelFormatting, IFormatterChangeEvent, Verbosity } from '../../../../platform/label/common/label.js';\nimport { ExtensionsRegistry } from '../../extensions/common/extensionsRegistry.js';\nimport { match } from '../../../../base/common/glob.js';\nimport { ILifecycleService, LifecyclePhase } from '../../lifecycle/common/lifecycle.js';\nimport { InstantiationType, registerSingleton } from '../../../../platform/instantiation/common/extensions.js';\nimport { IPathService } from '../../path/common/pathService.js';\nimport { isProposedApiEnabled } from '../../extensions/common/extensions.js';\nimport { OperatingSystem, OS } from '../../../../base/common/platform.js';\nimport { IRemoteAgentService } from '../../remote/common/remoteAgentService.js';\nimport { Schemas } from '../../../../base/common/network.js';\nimport { IStorageService, StorageScope, StorageTarget } from '../../../../platform/storage/common/storage.js';\nimport { Memento } from '../../../common/memento.js';\n\nconst resourceLabelFormattersExtPoint = ExtensionsRegistry.registerExtensionPoint<ResourceLabelFormatter[]>({\n\textensionPoint: 'resourceLabelFormatters',\n\tjsonSchema: {\n\t\tdescription: localize('vscode.extension.contributes.resourceLabelFormatters', 'Contributes resource label formatting rules.'),\n\t\ttype: 'array',\n\t\titems: {\n\t\t\ttype: 'object',\n\t\t\trequired: ['scheme', 'formatting'],\n\t\t\tproperties: {\n\t\t\t\tscheme: {\n\t\t\t\t\ttype: 'string',\n\t\t\t\t\tdescription: localize('vscode.extension.contributes.resourceLabelFormatters.scheme', 'URI scheme on which to match the formatter on. For example \"file\". Simple glob patterns are supported.'),\n\t\t\t\t},\n\t\t\t\tauthority: {\n\t\t\t\t\ttype: 'string',\n\t\t\t\t\tdescription: localize('vscode.extension.contributes.resourceLabelFormatters.authority', 'URI authority on which to match the formatter on. Simple glob patterns are supported.'),\n\t\t\t\t},\n\t\t\t\tformatting: {\n\t\t\t\t\tdescription: localize('vscode.extension.contributes.resourceLabelFormatters.formatting', \"Rules for formatting uri resource labels.\"),\n\t\t\t\t\ttype: 'object',\n\t\t\t\t\tproperties: {\n\t\t\t\t\t\tlabel: {\n\t\t\t\t\t\t\ttype: 'string',\n\t\t\t\t\t\t\tdescription: localize('vscode.extension.contributes.resourceLabelFormatters.label', \"Label rules to display. For example: myLabel:/${path}. ${path}, ${scheme}, ${authority} and ${authoritySuffix} are supported as variables.\")\n\t\t\t\t\t\t},\n\t\t\t\t\t\tseparator: {\n\t\t\t\t\t\t\ttype: 'string',\n\t\t\t\t\t\t\tdescription: localize('vscode.extension.contributes.resourceLabelFormatters.separator', \"Separator to be used in the uri label display. '/' or '\\' as an example.\")\n\t\t\t\t\t\t},\n\t\t\t\t\t\tstripPathStartingSeparator: {\n\t\t\t\t\t\t\ttype: 'boolean',\n\t\t\t\t\t\t\tdescription: localize('vscode.extension.contributes.resourceLabelFormatters.stripPathStartingSeparator', \"Controls whether `${path}` substitutions should have starting separator characters stripped.\")\n\t\t\t\t\t\t},\n\t\t\t\t\t\ttildify: {\n\t\t\t\t\t\t\ttype: 'boolean',\n\t\t\t\t\t\t\tdescription: localize('vscode.extension.contributes.resourceLabelFormatters.tildify', \"Controls if the start of the uri label should be tildified when possible.\")\n\t\t\t\t\t\t},\n\t\t\t\t\t\tworkspaceSuffix: {\n\t\t\t\t\t\t\ttype: 'string',\n\t\t\t\t\t\t\tdescription: localize('vscode.extension.contributes.resourceLabelFormatters.formatting.workspaceSuffix', \"Suffix appended to the workspace label.\")\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n});\n\nconst sepRegexp = /\\//g;\nconst labelMatchingRegexp = /\\$\\{(scheme|authoritySuffix|authority|path|(query)\\.(.+?))\\}/g;\n\nfunction hasDriveLetterIgnorePlatform(path: string): boolean {\n\treturn !!(path && path[2] === ':');\n}\n\nclass ResourceLabelFormattersHandler implements IWorkbenchContribution {\n\n\tprivate readonly formattersDisposables = new Map<ResourceLabelFormatter, IDisposable>();\n\n\tconstructor(@ILabelService labelService: ILabelService) {\n\t\tresourceLabelFormattersExtPoint.setHandler((extensions, delta) => {\n\t\t\tfor (const added of delta.added) {\n\t\t\t\tfor (const untrustedFormatter of added.value) {\n\n\t\t\t\t\t// We cannot trust that the formatter as it comes from an extension\n\t\t\t\t\t// adheres to our interface, so for the required properties we fill\n\t\t\t\t\t// in some defaults if missing.\n\n\t\t\t\t\tconst formatter = { ...untrustedFormatter };\n\t\t\t\t\tif (typeof formatter.formatting.label !== 'string') {\n\t\t\t\t\t\tformatter.formatting.label = '${authority}${path}';\n\t\t\t\t\t}\n\t\t\t\t\tif (typeof formatter.formatting.separator !== `string`) {\n\t\t\t\t\t\tformatter.formatting.separator = sep;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (!isProposedApiEnabled(added.description, 'contribLabelFormatterWorkspaceTooltip') && formatter.formatting.workspaceTooltip) {\n\t\t\t\t\t\tformatter.formatting.workspaceTooltip = undefined; // workspaceTooltip is only proposed\n\t\t\t\t\t}\n\n\t\t\t\t\tthis.formattersDisposables.set(formatter, labelService.registerFormatter(formatter));\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfor (const removed of delta.removed) {\n\t\t\t\tfor (const formatter of removed.value) {\n\t\t\t\t\tdispose(this.formattersDisposables.get(formatter));\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n}\nRegistry.as<IWorkbenchContributionsRegistry>(WorkbenchExtensions.Workbench).registerWorkbenchContribution(ResourceLabelFormattersHandler, LifecyclePhase.Restored);\n\nconst FORMATTER_CACHE_SIZE = 50;\n\ninterface IStoredFormatters {\n\tformatters?: ResourceLabelFormatter[];\n\ti?: number;\n}\n\nexport class LabelService extends Disposable implements ILabelService {\n\n\tdeclare readonly _serviceBrand: undefined;\n\n\tprivate formatters: ResourceLabelFormatter[];\n\n\tprivate readonly _onDidChangeFormatters = this._register(new Emitter<IFormatterChangeEvent>({ leakWarningThreshold: 400 }));\n\treadonly onDidChangeFormatters = this._onDidChangeFormatters.event;\n\n\tprivate readonly storedFormattersMemento: Memento;\n\tprivate readonly storedFormatters: IStoredFormatters;\n\tprivate os: OperatingSystem;\n\tprivate userHome: URI | undefined;\n\n\tconstructor(\n\t\t@IWorkbenchEnvironmentService private readonly environmentService: IWorkbenchEnvironmentService,\n\t\t@IWorkspaceContextService private readonly contextService: IWorkspaceContextService,\n\t\t@IPathService private readonly pathService: IPathService,\n\t\t@IRemoteAgentService private readonly remoteAgentService: IRemoteAgentService,\n\t\t@IStorageService storageService: IStorageService,\n\t\t@ILifecycleService lifecycleService: ILifecycleService,\n\t) {\n\t\tsuper();\n\n\t\t// Find some meaningful defaults until the remote environment\n\t\t// is resolved, by taking the current OS we are running in\n\t\t// and by taking the local `userHome` if we run on a local\n\t\t// file scheme.\n\t\tthis.os = OS;\n\t\tthis.userHome = pathService.defaultUriScheme === Schemas.file ? this.pathService.userHome({ preferLocal: true }) : undefined;\n\n\t\tconst memento = this.storedFormattersMemento = new Memento('cachedResourceLabelFormatters2', storageService);\n\t\tthis.storedFormatters = memento.getMemento(StorageScope.PROFILE, StorageTarget.MACHINE);\n\t\tthis.formatters = this.storedFormatters?.formatters?.slice() || [];\n\n\t\t// Remote environment is potentially long running\n\t\tthis.resolveRemoteEnvironment();\n\t}\n\n\tprivate async resolveRemoteEnvironment(): Promise<void> {\n\n\t\t// OS\n\t\tconst env = await this.remoteAgentService.getEnvironment();\n\t\tthis.os = env?.os ?? OS;\n\n\t\t// User home\n\t\tthis.userHome = await this.pathService.userHome();\n\t}\n\n\tfindFormatting(resource: URI): ResourceLabelFormatting | undefined {\n\t\tlet bestResult: ResourceLabelFormatter | undefined;\n\n\t\tfor (const formatter of this.formatters) {\n\t\t\tif (formatter.scheme === resource.scheme) {\n\t\t\t\tif (!formatter.authority && (!bestResult || formatter.priority)) {\n\t\t\t\t\tbestResult = formatter;\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tif (!formatter.authority) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tif (\n\t\t\t\t\tmatch(formatter.authority.toLowerCase(), resource.authority.toLowerCase()) &&\n\t\t\t\t\t(\n\t\t\t\t\t\t!bestResult ||\n\t\t\t\t\t\t!bestResult.authority ||\n\t\t\t\t\t\tformatter.authority.length > bestResult.authority.length ||\n\t\t\t\t\t\t((formatter.authority.length === bestResult.authority.length) && formatter.priority)\n\t\t\t\t\t)\n\t\t\t\t) {\n\t\t\t\t\tbestResult = formatter;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn bestResult ? bestResult.formatting : undefined;\n\t}\n\n\tgetUriLabel(resource: URI, options: { relative?: boolean; noPrefix?: boolean; separator?: '/' | '\\\\' } = {}): string {\n\t\tlet formatting = this.findFormatting(resource);\n\t\tif (formatting && options.separator) {\n\t\t\t// mixin separator if defined from the outside\n\t\t\tformatting = { ...formatting, separator: options.separator };\n\t\t}\n\n\t\tconst label = this.doGetUriLabel(resource, formatting, options);\n\n\t\t// Without formatting we still need to support the separator\n\t\t// as provided in options (https://github.com/microsoft/vscode/issues/130019)\n\t\tif (!formatting && options.separator) {\n\t\t\treturn label.replace(sepRegexp, options.separator);\n\t\t}\n\n\t\treturn label;\n\t}\n\n\tprivate doGetUriLabel(resource: URI, formatting?: ResourceLabelFormatting, options: { relative?: boolean; noPrefix?: boolean } = {}): string {\n\t\tif (!formatting) {\n\t\t\treturn getPathLabel(resource, {\n\t\t\t\tos: this.os,\n\t\t\t\ttildify: this.userHome ? { userHome: this.userHome } : undefined,\n\t\t\t\trelative: options.relative ? {\n\t\t\t\t\tnoPrefix: options.noPrefix,\n\t\t\t\t\tgetWorkspace: () => this.contextService.getWorkspace(),\n\t\t\t\t\tgetWorkspaceFolder: resource => this.contextService.getWorkspaceFolder(resource)\n\t\t\t\t} : undefined\n\t\t\t});\n\t\t}\n\n\t\t// Relative label\n\t\tif (options.relative && this.contextService) {\n\t\t\tlet folder = this.contextService.getWorkspaceFolder(resource);\n\t\t\tif (!folder) {\n\n\t\t\t\t// It is possible that the resource we want to resolve the\n\t\t\t\t// workspace folder for is not using the same scheme as\n\t\t\t\t// the folders in the workspace, so we help by trying again\n\t\t\t\t// to resolve a workspace folder by trying again with a\n\t\t\t\t// scheme that is workspace contained.\n\n\t\t\t\tconst workspace = this.contextService.getWorkspace();\n\t\t\t\tconst firstFolder = workspace.folders.at(0);\n\t\t\t\tif (firstFolder && resource.scheme !== firstFolder.uri.scheme && resource.path.startsWith(posix.sep)) {\n\t\t\t\t\tfolder = this.contextService.getWorkspaceFolder(firstFolder.uri.with({ path: resource.path }));\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (folder) {\n\t\t\t\tconst folderLabel = this.formatUri(folder.uri, formatting, options.noPrefix);\n\n\t\t\t\tlet relativeLabel = this.formatUri(resource, formatting, options.noPrefix);\n\t\t\t\tlet overlap = 0;\n\t\t\t\twhile (relativeLabel[overlap] && relativeLabel[overlap] === folderLabel[overlap]) {\n\t\t\t\t\toverlap++;\n\t\t\t\t}\n\n\t\t\t\tif (!relativeLabel[overlap] || relativeLabel[overlap] === formatting.separator) {\n\t\t\t\t\trelativeLabel = relativeLabel.substring(1 + overlap);\n\t\t\t\t} else if (overlap === folderLabel.length && folder.uri.path === posix.sep) {\n\t\t\t\t\trelativeLabel = relativeLabel.substring(overlap);\n\t\t\t\t}\n\n\t\t\t\t// always show root basename if there are multiple folders\n\t\t\t\tconst hasMultipleRoots = this.contextService.getWorkspace().folders.length > 1;\n\t\t\t\tif (hasMultipleRoots && !options.noPrefix) {\n\t\t\t\t\tconst rootName = folder?.name ?? basenameOrAuthority(folder.uri);\n\t\t\t\t\trelativeLabel = relativeLabel ? `${rootName} \u2022 ${relativeLabel}` : rootName;\n\t\t\t\t}\n\n\t\t\t\treturn relativeLabel;\n\t\t\t}\n\t\t}\n\n\t\t// Absolute label\n\t\treturn this.formatUri(resource, formatting, options.noPrefix);\n\t}\n\n\tgetUriBasenameLabel(resource: URI): string {\n\t\tconst formatting = this.findFormatting(resource);\n\t\tconst label = this.doGetUriLabel(resource, formatting);\n\n\t\tlet pathLib: typeof win32 | typeof posix;\n\t\tif (formatting?.separator === win32.sep) {\n\t\t\tpathLib = win32;\n\t\t} else if (formatting?.separator === posix.sep) {\n\t\t\tpathLib = posix;\n\t\t} else {\n\t\t\tpathLib = (this.os === OperatingSystem.Windows) ? win32 : posix;\n\t\t}\n\n\t\treturn pathLib.basename(label);\n\t}\n\n\tgetWorkspaceLabel(workspace: IWorkspace | IWorkspaceIdentifier | ISingleFolderWorkspaceIdentifier | URI, options?: { verbose: Verbosity }): string {\n\t\tif (isWorkspace(workspace)) {\n\t\t\tconst identifier = toWorkspaceIdentifier(workspace);\n\t\t\tif (isSingleFolderWorkspaceIdentifier(identifier) || isWorkspaceIdentifier(identifier)) {\n\t\t\t\treturn this.getWorkspaceLabel(identifier, options);\n\t\t\t}\n\n\t\t\treturn '';\n\t\t}\n\n\t\t// Workspace: Single Folder (as URI)\n\t\tif (URI.isUri(workspace)) {\n\t\t\treturn this.doGetSingleFolderWorkspaceLabel(workspace, options);\n\t\t}\n\n\t\t// Workspace: Single Folder (as workspace identifier)\n\t\tif (isSingleFolderWorkspaceIdentifier(workspace)) {\n\t\t\treturn this.doGetSingleFolderWorkspaceLabel(workspace.uri, options);\n\t\t}\n\n\t\t// Workspace: Multi Root\n\t\tif (isWorkspaceIdentifier(workspace)) {\n\t\t\treturn this.doGetWorkspaceLabel(workspace.configPath, options);\n\t\t}\n\n\t\treturn '';\n\t}\n\n\tprivate doGetWorkspaceLabel(workspaceUri: URI, options?: { verbose: Verbosity }): string {\n\n\t\t// Workspace: Untitled\n\t\tif (isUntitledWorkspace(workspaceUri, this.environmentService)) {\n\t\t\treturn localize('untitledWorkspace', \"Untitled (Workspace)\");\n\t\t}\n\n\t\t// Workspace: Temporary\n\t\tif (isTemporaryWorkspace(workspaceUri)) {\n\t\t\treturn localize('temporaryWorkspace', \"Workspace\");\n\t\t}\n\n\t\t// Workspace: Saved\n\t\tlet filename = basename(workspaceUri);\n\t\tif (filename.endsWith(WORKSPACE_EXTENSION)) {\n\t\t\tfilename = filename.substr(0, filename.length - WORKSPACE_EXTENSION.length - 1);\n\t\t}\n\n\t\tlet label: string;\n\t\tswitch (options?.verbose) {\n\t\t\tcase Verbosity.SHORT:\n\t\t\t\tlabel = filename; // skip suffix for short label\n\t\t\t\tbreak;\n\t\t\tcase Verbosity.LONG:\n\t\t\t\tlabel = localize('workspaceNameVerbose', \"{0} (Workspace)\", this.getUriLabel(joinPath(dirname(workspaceUri), filename)));\n\t\t\t\tbreak;\n\t\t\tcase Verbosity.MEDIUM:\n\t\t\tdefault:\n\t\t\t\tlabel = localize('workspaceName', \"{0} (Workspace)\", filename);\n\t\t\t\tbreak;\n\t\t}\n\n\t\tif (options?.verbose === Verbosity.SHORT) {\n\t\t\treturn label; // skip suffix for short label\n\t\t}\n\n\t\treturn this.appendWorkspaceSuffix(label, workspaceUri);\n\t}\n\n\tprivate doGetSingleFolderWorkspaceLabel(folderUri: URI, options?: { verbose: Verbosity }): string {\n\t\tlet label: string;\n\t\tswitch (options?.verbose) {\n\t\t\tcase Verbosity.LONG:\n\t\t\t\tlabel = this.getUriLabel(folderUri);\n\t\t\t\tbreak;\n\t\t\tcase Verbosity.SHORT:\n\t\t\tcase Verbosity.MEDIUM:\n\t\t\tdefault:\n\t\t\t\tlabel = basename(folderUri) || posix.sep;\n\t\t\t\tbreak;\n\t\t}\n\n\t\tif (options?.verbose === Verbosity.SHORT) {\n\t\t\treturn label; // skip suffix for short label\n\t\t}\n\n\t\treturn this.appendWorkspaceSuffix(label, folderUri);\n\t}\n\n\tgetSeparator(scheme: string, authority?: string): '/' | '\\\\' {\n\t\tconst formatter = this.findFormatting(URI.from({ scheme, authority }));\n\n\t\treturn formatter?.separator || posix.sep;\n\t}\n\n\tgetHostLabel(scheme: string, authority?: string): string {\n\t\tconst formatter = this.findFormatting(URI.from({ scheme, authority }));\n\n\t\treturn formatter?.workspaceSuffix || authority || '';\n\t}\n\n\tgetHostTooltip(scheme: string, authority?: string): string | undefined {\n\t\tconst formatter = this.findFormatting(URI.from({ scheme, authority }));\n\n\t\treturn formatter?.workspaceTooltip;\n\t}\n\n\tregisterCachedFormatter(formatter: ResourceLabelFormatter): IDisposable {\n\t\tconst list = this.storedFormatters.formatters ??= [];\n\n\t\tlet replace = list.findIndex(f => f.scheme === formatter.scheme && f.authority === formatter.authority);\n\t\tif (replace === -1 && list.length >= FORMATTER_CACHE_SIZE) {\n\t\t\treplace = FORMATTER_CACHE_SIZE - 1; // at max capacity, replace the last element\n\t\t}\n\n\t\tif (replace === -1) {\n\t\t\tlist.unshift(formatter);\n\t\t} else {\n\t\t\tfor (let i = replace; i > 0; i--) {\n\t\t\t\tlist[i] = list[i - 1];\n\t\t\t}\n\t\t\tlist[0] = formatter;\n\t\t}\n\n\t\tthis.storedFormattersMemento.saveMemento();\n\n\t\treturn this.registerFormatter(formatter);\n\t}\n\n\tregisterFormatter(formatter: ResourceLabelFormatter): IDisposable {\n\t\tthis.formatters.push(formatter);\n\t\tthis._onDidChangeFormatters.fire({ scheme: formatter.scheme });\n\n\t\treturn {\n\t\t\tdispose: () => {\n\t\t\t\tthis.formatters = this.formatters.filter(f => f !== formatter);\n\t\t\t\tthis._onDidChangeFormatters.fire({ scheme: formatter.scheme });\n\t\t\t}\n\t\t};\n\t}\n\n\tprivate formatUri(resource: URI, formatting: ResourceLabelFormatting, forceNoTildify?: boolean): string {\n\t\tlet label = formatting.label.replace(labelMatchingRegexp, (match, token, qsToken, qsValue) => {\n\t\t\tswitch (token) {\n\t\t\t\tcase 'scheme': return resource.scheme;\n\t\t\t\tcase 'authority': return resource.authority;\n\t\t\t\tcase 'authoritySuffix': {\n\t\t\t\t\tconst i = resource.authority.indexOf('+');\n\t\t\t\t\treturn i === -1 ? resource.authority : resource.authority.slice(i + 1);\n\t\t\t\t}\n\t\t\t\tcase 'path':\n\t\t\t\t\treturn formatting.stripPathStartingSeparator\n\t\t\t\t\t\t? resource.path.slice(resource.path[0] === formatting.separator ? 1 : 0)\n\t\t\t\t\t\t: resource.path;\n\t\t\t\tdefault: {\n\t\t\t\t\tif (qsToken === 'query') {\n\t\t\t\t\t\tconst { query } = resource;\n\t\t\t\t\t\tif (query && query[0] === '{' && query[query.length - 1] === '}') {\n\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\treturn JSON.parse(query)[qsValue] || '';\n\t\t\t\t\t\t\t} catch { }\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\treturn '';\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\t// convert \\c:\\something => C:\\something\n\t\tif (formatting.normalizeDriveLetter && hasDriveLetterIgnorePlatform(label)) {\n\t\t\tlabel = label.charAt(1).toUpperCase() + label.substr(2);\n\t\t}\n\n\t\tif (formatting.tildify && !forceNoTildify) {\n\t\t\tif (this.userHome) {\n\t\t\t\tlabel = tildify(label, this.userHome.fsPath, this.os);\n\t\t\t}\n\t\t}\n\n\t\tif (formatting.authorityPrefix && resource.authority) {\n\t\t\tlabel = formatting.authorityPrefix + label;\n\t\t}\n\n\t\treturn label.replace(sepRegexp, formatting.separator);\n\t}\n\n\tprivate appendWorkspaceSuffix(label: string, uri: URI): string {\n\t\tconst formatting = this.findFormatting(uri);\n\t\tconst suffix = formatting && (typeof formatting.workspaceSuffix === 'string') ? formatting.workspaceSuffix : undefined;\n\n\t\treturn suffix ? `${label} [${suffix}]` : label;\n\t}\n}\n\nregisterSingleton(ILabelService, LabelService, InstantiationType.Delayed);\n"],
  "mappings": "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",
  "names": ["resource", "match"]
}
