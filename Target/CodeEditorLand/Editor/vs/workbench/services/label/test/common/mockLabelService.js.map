{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/label/test/common/mockLabelService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Emitter, Event } from '../../../../../base/common/event.js';\nimport { Disposable, IDisposable } from '../../../../../base/common/lifecycle.js';\nimport { basename, normalize } from '../../../../../base/common/path.js';\nimport { URI } from '../../../../../base/common/uri.js';\nimport { IFormatterChangeEvent, ILabelService, ResourceLabelFormatter, Verbosity } from '../../../../../platform/label/common/label.js';\nimport { IWorkspace, IWorkspaceIdentifier } from '../../../../../platform/workspace/common/workspace.js';\n\nexport class MockLabelService implements ILabelService {\n\t_serviceBrand: undefined;\n\n\tregisterCachedFormatter(formatter: ResourceLabelFormatter): IDisposable {\n\t\tthrow new Error('Method not implemented.');\n\t}\n\tgetUriLabel(resource: URI, options?: { relative?: boolean | undefined; noPrefix?: boolean | undefined }): string {\n\t\treturn normalize(resource.fsPath);\n\t}\n\tgetUriBasenameLabel(resource: URI): string {\n\t\treturn basename(resource.fsPath);\n\t}\n\tgetWorkspaceLabel(workspace: URI | IWorkspaceIdentifier | IWorkspace, options?: { verbose: Verbosity }): string {\n\t\treturn '';\n\t}\n\tgetHostLabel(scheme: string, authority?: string): string {\n\t\treturn '';\n\t}\n\tpublic getHostTooltip(): string | undefined {\n\t\treturn '';\n\t}\n\tgetSeparator(scheme: string, authority?: string): '/' | '\\\\' {\n\t\treturn '/';\n\t}\n\tregisterFormatter(formatter: ResourceLabelFormatter): IDisposable {\n\t\treturn Disposable.None;\n\t}\n\tonDidChangeFormatters: Event<IFormatterChangeEvent> = new Emitter<IFormatterChangeEvent>().event;\n}\n"],
  "mappings": ";;AAKA,SAAS,SAAS,aAAa;AAC/B,SAAS,YAAY,mBAAmB;AACxC,SAAS,UAAU,iBAAiB;AACpC,SAAS,WAAW;AACpB,SAAS,uBAAuB,eAAe,wBAAwB,iBAAiB;AACxF,SAAS,YAAY,4BAA4B;AAE1C,MAAM,iBAA0C;AAAA,EAZvD,OAYuD;AAAA;AAAA;AAAA,EACtD;AAAA,EAEA,wBAAwB,WAAgD;AACvE,UAAM,IAAI,MAAM,yBAAyB;AAAA,EAC1C;AAAA,EACA,YAAY,UAAe,SAAsF;AAChH,WAAO,UAAU,SAAS,MAAM;AAAA,EACjC;AAAA,EACA,oBAAoB,UAAuB;AAC1C,WAAO,SAAS,SAAS,MAAM;AAAA,EAChC;AAAA,EACA,kBAAkB,WAAoD,SAA0C;AAC/G,WAAO;AAAA,EACR;AAAA,EACA,aAAa,QAAgB,WAA4B;AACxD,WAAO;AAAA,EACR;AAAA,EACO,iBAAqC;AAC3C,WAAO;AAAA,EACR;AAAA,EACA,aAAa,QAAgB,WAAgC;AAC5D,WAAO;AAAA,EACR;AAAA,EACA,kBAAkB,WAAgD;AACjE,WAAO,WAAW;AAAA,EACnB;AAAA,EACA,wBAAsD,IAAI,QAA+B,EAAE;AAC5F;",
  "names": []
}
