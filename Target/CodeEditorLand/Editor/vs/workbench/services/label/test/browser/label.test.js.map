{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/label/test/browser/label.test.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as resources from '../../../../../base/common/resources.js';\nimport assert from 'assert';\nimport { TestEnvironmentService, TestLifecycleService, TestPathService, TestRemoteAgentService } from '../../../../test/browser/workbenchTestServices.js';\nimport { URI } from '../../../../../base/common/uri.js';\nimport { LabelService } from '../../common/labelService.js';\nimport { TestContextService, TestStorageService } from '../../../../test/common/workbenchTestServices.js';\nimport { WorkspaceFolder } from '../../../../../platform/workspace/common/workspace.js';\nimport { TestWorkspace, Workspace } from '../../../../../platform/workspace/test/common/testWorkspace.js';\nimport { isWindows } from '../../../../../base/common/platform.js';\nimport { StorageScope, StorageTarget } from '../../../../../platform/storage/common/storage.js';\nimport { Memento } from '../../../../common/memento.js';\nimport { ResourceLabelFormatter } from '../../../../../platform/label/common/label.js';\nimport { sep } from '../../../../../base/common/path.js';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from '../../../../../base/test/common/utils.js';\nimport { DisposableStore } from '../../../../../base/common/lifecycle.js';\n\nsuite('URI Label', () => {\n\tlet labelService: LabelService;\n\tlet storageService: TestStorageService;\n\n\tsetup(() => {\n\t\tstorageService = new TestStorageService();\n\t\tlabelService = new LabelService(TestEnvironmentService, new TestContextService(), new TestPathService(URI.file('/foobar')), new TestRemoteAgentService(), storageService, new TestLifecycleService());\n\t});\n\n\tensureNoDisposablesAreLeakedInTestSuite();\n\n\ttest('custom scheme', function () {\n\t\tlabelService.registerFormatter({\n\t\t\tscheme: 'vscode',\n\t\t\tformatting: {\n\t\t\t\tlabel: 'LABEL/${path}/${authority}/END',\n\t\t\t\tseparator: '/',\n\t\t\t\ttildify: true,\n\t\t\t\tnormalizeDriveLetter: true\n\t\t\t}\n\t\t});\n\n\t\tconst uri1 = URI.parse('vscode://microsoft.com/1/2/3/4/5');\n\t\tassert.strictEqual(labelService.getUriLabel(uri1, { relative: false }), 'LABEL//1/2/3/4/5/microsoft.com/END');\n\t\tassert.strictEqual(labelService.getUriBasenameLabel(uri1), 'END');\n\t});\n\n\ttest('file scheme', function () {\n\t\tlabelService.registerFormatter({\n\t\t\tscheme: 'file',\n\t\t\tformatting: {\n\t\t\t\tlabel: '${path}',\n\t\t\t\tseparator: sep,\n\t\t\t\ttildify: !isWindows,\n\t\t\t\tnormalizeDriveLetter: isWindows\n\t\t\t}\n\t\t});\n\n\t\tconst uri1 = TestWorkspace.folders[0].uri.with({ path: TestWorkspace.folders[0].uri.path.concat('/a/b/c/d') });\n\t\tassert.strictEqual(labelService.getUriLabel(uri1, { relative: true }), isWindows ? 'a\\\\b\\\\c\\\\d' : 'a/b/c/d');\n\t\tassert.strictEqual(labelService.getUriLabel(uri1, { relative: false }), isWindows ? 'C:\\\\testWorkspace\\\\a\\\\b\\\\c\\\\d' : '/testWorkspace/a/b/c/d');\n\t\tassert.strictEqual(labelService.getUriBasenameLabel(uri1), 'd');\n\n\t\tconst uri2 = URI.file('c:\\\\1/2/3');\n\t\tassert.strictEqual(labelService.getUriLabel(uri2, { relative: false }), isWindows ? 'C:\\\\1\\\\2\\\\3' : '/c:\\\\1/2/3');\n\t\tassert.strictEqual(labelService.getUriBasenameLabel(uri2), '3');\n\t});\n\n\ttest('separator', function () {\n\t\tlabelService.registerFormatter({\n\t\t\tscheme: 'vscode',\n\t\t\tformatting: {\n\t\t\t\tlabel: 'LABEL\\\\${path}\\\\${authority}\\\\END',\n\t\t\t\tseparator: '\\\\',\n\t\t\t\ttildify: true,\n\t\t\t\tnormalizeDriveLetter: true\n\t\t\t}\n\t\t});\n\n\t\tconst uri1 = URI.parse('vscode://microsoft.com/1/2/3/4/5');\n\t\tassert.strictEqual(labelService.getUriLabel(uri1, { relative: false }), 'LABEL\\\\\\\\1\\\\2\\\\3\\\\4\\\\5\\\\microsoft.com\\\\END');\n\t\tassert.strictEqual(labelService.getUriBasenameLabel(uri1), 'END');\n\t});\n\n\ttest('custom authority', function () {\n\t\tlabelService.registerFormatter({\n\t\t\tscheme: 'vscode',\n\t\t\tauthority: 'micro*',\n\t\t\tformatting: {\n\t\t\t\tlabel: 'LABEL/${path}/${authority}/END',\n\t\t\t\tseparator: '/'\n\t\t\t}\n\t\t});\n\n\t\tconst uri1 = URI.parse('vscode://microsoft.com/1/2/3/4/5');\n\t\tassert.strictEqual(labelService.getUriLabel(uri1, { relative: false }), 'LABEL//1/2/3/4/5/microsoft.com/END');\n\t\tassert.strictEqual(labelService.getUriBasenameLabel(uri1), 'END');\n\t});\n\n\ttest('mulitple authority', function () {\n\t\tlabelService.registerFormatter({\n\t\t\tscheme: 'vscode',\n\t\t\tauthority: 'not_matching_but_long',\n\t\t\tformatting: {\n\t\t\t\tlabel: 'first',\n\t\t\t\tseparator: '/'\n\t\t\t}\n\t\t});\n\t\tlabelService.registerFormatter({\n\t\t\tscheme: 'vscode',\n\t\t\tauthority: 'microsof*',\n\t\t\tformatting: {\n\t\t\t\tlabel: 'second',\n\t\t\t\tseparator: '/'\n\t\t\t}\n\t\t});\n\t\tlabelService.registerFormatter({\n\t\t\tscheme: 'vscode',\n\t\t\tauthority: 'mi*',\n\t\t\tformatting: {\n\t\t\t\tlabel: 'third',\n\t\t\t\tseparator: '/'\n\t\t\t}\n\t\t});\n\n\t\t// Make sure the most specific authority is picked\n\t\tconst uri1 = URI.parse('vscode://microsoft.com/1/2/3/4/5');\n\t\tassert.strictEqual(labelService.getUriLabel(uri1, { relative: false }), 'second');\n\t\tassert.strictEqual(labelService.getUriBasenameLabel(uri1), 'second');\n\t});\n\n\ttest('custom query', function () {\n\t\tlabelService.registerFormatter({\n\t\t\tscheme: 'vscode',\n\t\t\tformatting: {\n\t\t\t\tlabel: 'LABEL${query.prefix}: ${query.path}/END',\n\t\t\t\tseparator: '/',\n\t\t\t\ttildify: true,\n\t\t\t\tnormalizeDriveLetter: true\n\t\t\t}\n\t\t});\n\n\t\tconst uri1 = URI.parse(`vscode://microsoft.com/1/2/3/4/5?${encodeURIComponent(JSON.stringify({ prefix: 'prefix', path: 'path' }))}`);\n\t\tassert.strictEqual(labelService.getUriLabel(uri1, { relative: false }), 'LABELprefix: path/END');\n\t});\n\n\ttest('custom query without value', function () {\n\t\tlabelService.registerFormatter({\n\t\t\tscheme: 'vscode',\n\t\t\tformatting: {\n\t\t\t\tlabel: 'LABEL${query.prefix}: ${query.path}/END',\n\t\t\t\tseparator: '/',\n\t\t\t\ttildify: true,\n\t\t\t\tnormalizeDriveLetter: true\n\t\t\t}\n\t\t});\n\n\t\tconst uri1 = URI.parse(`vscode://microsoft.com/1/2/3/4/5?${encodeURIComponent(JSON.stringify({ path: 'path' }))}`);\n\t\tassert.strictEqual(labelService.getUriLabel(uri1, { relative: false }), 'LABEL: path/END');\n\t});\n\n\ttest('custom query without query json', function () {\n\t\tlabelService.registerFormatter({\n\t\t\tscheme: 'vscode',\n\t\t\tformatting: {\n\t\t\t\tlabel: 'LABEL${query.prefix}: ${query.path}/END',\n\t\t\t\tseparator: '/',\n\t\t\t\ttildify: true,\n\t\t\t\tnormalizeDriveLetter: true\n\t\t\t}\n\t\t});\n\n\t\tconst uri1 = URI.parse('vscode://microsoft.com/1/2/3/4/5?path=foo');\n\t\tassert.strictEqual(labelService.getUriLabel(uri1, { relative: false }), 'LABEL: /END');\n\t});\n\n\ttest('custom query without query', function () {\n\t\tlabelService.registerFormatter({\n\t\t\tscheme: 'vscode',\n\t\t\tformatting: {\n\t\t\t\tlabel: 'LABEL${query.prefix}: ${query.path}/END',\n\t\t\t\tseparator: '/',\n\t\t\t\ttildify: true,\n\t\t\t\tnormalizeDriveLetter: true\n\t\t\t}\n\t\t});\n\n\t\tconst uri1 = URI.parse('vscode://microsoft.com/1/2/3/4/5');\n\t\tassert.strictEqual(labelService.getUriLabel(uri1, { relative: false }), 'LABEL: /END');\n\t});\n\n\n\ttest('label caching', () => {\n\t\tconst m = new Memento('cachedResourceLabelFormatters2', storageService).getMemento(StorageScope.PROFILE, StorageTarget.MACHINE);\n\t\tconst makeFormatter = (scheme: string): ResourceLabelFormatter => ({ formatting: { label: `\\${path} (${scheme})`, separator: '/' }, scheme });\n\t\tassert.deepStrictEqual(m, {});\n\n\t\t// registers a new formatter:\n\t\tlabelService.registerCachedFormatter(makeFormatter('a'));\n\t\tassert.deepStrictEqual(m, { formatters: [makeFormatter('a')] });\n\n\t\t// registers a 2nd formatter:\n\t\tlabelService.registerCachedFormatter(makeFormatter('b'));\n\t\tassert.deepStrictEqual(m, { formatters: [makeFormatter('b'), makeFormatter('a')] });\n\n\t\t// promotes a formatter on re-register:\n\t\tlabelService.registerCachedFormatter(makeFormatter('a'));\n\t\tassert.deepStrictEqual(m, { formatters: [makeFormatter('a'), makeFormatter('b')] });\n\n\t\t// no-ops if already in first place:\n\t\tlabelService.registerCachedFormatter(makeFormatter('a'));\n\t\tassert.deepStrictEqual(m, { formatters: [makeFormatter('a'), makeFormatter('b')] });\n\n\t\t// limits the cache:\n\t\tfor (let i = 0; i < 100; i++) {\n\t\t\tlabelService.registerCachedFormatter(makeFormatter(`i${i}`));\n\t\t}\n\t\tconst expected: ResourceLabelFormatter[] = [];\n\t\tfor (let i = 50; i < 100; i++) {\n\t\t\texpected.unshift(makeFormatter(`i${i}`));\n\t\t}\n\t\tassert.deepStrictEqual(m, { formatters: expected });\n\n\t\tdelete (m as any).formatters;\n\t});\n});\n\n\nsuite('multi-root workspace', () => {\n\tlet labelService: LabelService;\n\tconst disposables = new DisposableStore();\n\n\tsetup(() => {\n\t\tconst sources = URI.file('folder1/src');\n\t\tconst tests = URI.file('folder1/test');\n\t\tconst other = URI.file('folder2');\n\n\t\tlabelService = disposables.add(new LabelService(\n\t\t\tTestEnvironmentService,\n\t\t\tnew TestContextService(\n\t\t\t\tnew Workspace('test-workspace', [\n\t\t\t\t\tnew WorkspaceFolder({ uri: sources, index: 0, name: 'Sources' }),\n\t\t\t\t\tnew WorkspaceFolder({ uri: tests, index: 1, name: 'Tests' }),\n\t\t\t\t\tnew WorkspaceFolder({ uri: other, index: 2, name: resources.basename(other) }),\n\t\t\t\t])),\n\t\t\tnew TestPathService(),\n\t\t\tnew TestRemoteAgentService(),\n\t\t\tdisposables.add(new TestStorageService()),\n\t\t\tdisposables.add(new TestLifecycleService())\n\t\t));\n\t});\n\n\tteardown(() => {\n\t\tdisposables.clear();\n\t});\n\n\ttest('labels of files in multiroot workspaces are the foldername followed by offset from the folder', () => {\n\t\tlabelService.registerFormatter({\n\t\t\tscheme: 'file',\n\t\t\tformatting: {\n\t\t\t\tlabel: '${authority}${path}',\n\t\t\t\tseparator: '/',\n\t\t\t\ttildify: false,\n\t\t\t\tnormalizeDriveLetter: false,\n\t\t\t\tauthorityPrefix: '//',\n\t\t\t\tworkspaceSuffix: ''\n\t\t\t}\n\t\t});\n\n\t\tconst tests = {\n\t\t\t'folder1/src/file': 'Sources \u2022 file',\n\t\t\t'folder1/src/folder/file': 'Sources \u2022 folder/file',\n\t\t\t'folder1/src': 'Sources',\n\t\t\t'folder1/other': '/folder1/other',\n\t\t\t'folder2/other': 'folder2 \u2022 other',\n\t\t};\n\n\t\tObject.entries(tests).forEach(([path, label]) => {\n\t\t\tconst generated = labelService.getUriLabel(URI.file(path), { relative: true });\n\t\t\tassert.strictEqual(generated, label);\n\t\t});\n\t});\n\n\ttest('labels with context after path', () => {\n\t\tlabelService.registerFormatter({\n\t\t\tscheme: 'file',\n\t\t\tformatting: {\n\t\t\t\tlabel: '${path} (${scheme})',\n\t\t\t\tseparator: '/',\n\t\t\t}\n\t\t});\n\n\t\tconst tests = {\n\t\t\t'folder1/src/file': 'Sources \u2022 file (file)',\n\t\t\t'folder1/src/folder/file': 'Sources \u2022 folder/file (file)',\n\t\t\t'folder1/src': 'Sources',\n\t\t\t'folder1/other': '/folder1/other (file)',\n\t\t\t'folder2/other': 'folder2 \u2022 other (file)',\n\t\t};\n\n\t\tObject.entries(tests).forEach(([path, label]) => {\n\t\t\tconst generated = labelService.getUriLabel(URI.file(path), { relative: true });\n\t\t\tassert.strictEqual(generated, label, path);\n\t\t});\n\t});\n\n\ttest('stripPathStartingSeparator', () => {\n\t\tlabelService.registerFormatter({\n\t\t\tscheme: 'file',\n\t\t\tformatting: {\n\t\t\t\tlabel: '${path}',\n\t\t\t\tseparator: '/',\n\t\t\t\tstripPathStartingSeparator: true\n\t\t\t}\n\t\t});\n\n\t\tconst tests = {\n\t\t\t'folder1/src/file': 'Sources \u2022 file',\n\t\t\t'other/blah': 'other/blah',\n\t\t};\n\n\t\tObject.entries(tests).forEach(([path, label]) => {\n\t\t\tconst generated = labelService.getUriLabel(URI.file(path), { relative: true });\n\t\t\tassert.strictEqual(generated, label, path);\n\t\t});\n\t});\n\n\ttest('relative label without formatter', () => {\n\t\tconst rootFolder = URI.parse('myscheme://myauthority/');\n\n\t\tlabelService = disposables.add(new LabelService(\n\t\t\tTestEnvironmentService,\n\t\t\tnew TestContextService(\n\t\t\t\tnew Workspace('test-workspace', [\n\t\t\t\t\tnew WorkspaceFolder({ uri: rootFolder, index: 0, name: 'FSProotFolder' }),\n\t\t\t\t])),\n\t\t\tnew TestPathService(undefined, rootFolder.scheme),\n\t\t\tnew TestRemoteAgentService(),\n\t\t\tdisposables.add(new TestStorageService()),\n\t\t\tdisposables.add(new TestLifecycleService())\n\t\t));\n\n\t\tconst generated = labelService.getUriLabel(URI.parse('myscheme://myauthority/some/folder/test.txt'), { relative: true });\n\t\tif (isWindows) {\n\t\t\tassert.strictEqual(generated, 'some\\\\folder\\\\test.txt');\n\t\t} else {\n\t\t\tassert.strictEqual(generated, 'some/folder/test.txt');\n\t\t}\n\t});\n\n\tensureNoDisposablesAreLeakedInTestSuite();\n});\n\nsuite('workspace at FSP root', () => {\n\tlet labelService: LabelService;\n\n\tsetup(() => {\n\t\tconst rootFolder = URI.parse('myscheme://myauthority/');\n\n\t\tlabelService = new LabelService(\n\t\t\tTestEnvironmentService,\n\t\t\tnew TestContextService(\n\t\t\t\tnew Workspace('test-workspace', [\n\t\t\t\t\tnew WorkspaceFolder({ uri: rootFolder, index: 0, name: 'FSProotFolder' }),\n\t\t\t\t])),\n\t\t\tnew TestPathService(),\n\t\t\tnew TestRemoteAgentService(),\n\t\t\tnew TestStorageService(),\n\t\t\tnew TestLifecycleService()\n\t\t);\n\t\tlabelService.registerFormatter({\n\t\t\tscheme: 'myscheme',\n\t\t\tformatting: {\n\t\t\t\tlabel: '${scheme}://${authority}${path}',\n\t\t\t\tseparator: '/',\n\t\t\t\ttildify: false,\n\t\t\t\tnormalizeDriveLetter: false,\n\t\t\t\tworkspaceSuffix: '',\n\t\t\t\tauthorityPrefix: '',\n\t\t\t\tstripPathStartingSeparator: false\n\t\t\t}\n\t\t});\n\t});\n\n\ttest('non-relative label', () => {\n\n\t\tconst tests = {\n\t\t\t'myscheme://myauthority/myFile1.txt': 'myscheme://myauthority/myFile1.txt',\n\t\t\t'myscheme://myauthority/folder/myFile2.txt': 'myscheme://myauthority/folder/myFile2.txt',\n\t\t};\n\n\t\tObject.entries(tests).forEach(([uriString, label]) => {\n\t\t\tconst generated = labelService.getUriLabel(URI.parse(uriString), { relative: false });\n\t\t\tassert.strictEqual(generated, label);\n\t\t});\n\t});\n\n\ttest('relative label', () => {\n\n\t\tconst tests = {\n\t\t\t'myscheme://myauthority/myFile1.txt': 'myFile1.txt',\n\t\t\t'myscheme://myauthority/folder/myFile2.txt': 'folder/myFile2.txt',\n\t\t};\n\n\t\tObject.entries(tests).forEach(([uriString, label]) => {\n\t\t\tconst generated = labelService.getUriLabel(URI.parse(uriString), { relative: true });\n\t\t\tassert.strictEqual(generated, label);\n\t\t});\n\t});\n\n\ttest('relative label with explicit path separator', () => {\n\t\tlet generated = labelService.getUriLabel(URI.parse('myscheme://myauthority/some/folder/test.txt'), { relative: true, separator: '/' });\n\t\tassert.strictEqual(generated, 'some/folder/test.txt');\n\n\t\tgenerated = labelService.getUriLabel(URI.parse('myscheme://myauthority/some/folder/test.txt'), { relative: true, separator: '\\\\' });\n\t\tassert.strictEqual(generated, 'some\\\\folder\\\\test.txt');\n\t});\n\n\tensureNoDisposablesAreLeakedInTestSuite();\n});\n"],
  "mappings": "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",
  "names": []
}
