import*as E from"../../../../../base/common/resources.js";import a from"assert";import{TestEnvironmentService as f,TestLifecycleService as n,TestPathService as u,TestRemoteAgentService as d}from"../../../../test/browser/workbenchTestServices.js";import{URI as o}from"../../../../../base/common/uri.js";import{LabelService as h}from"../../common/labelService.js";import{TestContextService as p,TestStorageService as g}from"../../../../test/common/workbenchTestServices.js";import{WorkspaceFolder as m}from"../../../../../platform/workspace/common/workspace.js";import{TestWorkspace as L,Workspace as b}from"../../../../../platform/workspace/test/common/testWorkspace.js";import{isWindows as c}from"../../../../../base/common/platform.js";import{StorageScope as v,StorageTarget as w}from"../../../../../platform/storage/common/storage.js";import{Memento as S}from"../../../../common/memento.js";import"../../../../../platform/label/common/label.js";import{sep as q}from"../../../../../base/common/path.js";import{ensureNoDisposablesAreLeakedInTestSuite as y}from"../../../../../base/test/common/utils.js";import{DisposableStore as F}from"../../../../../base/common/lifecycle.js";suite("URI Label",()=>{let e,s;setup(()=>{s=new g,e=new h(f,new p,new u(o.file("/foobar")),new d,s,new n)}),y(),test("custom scheme",function(){e.registerFormatter({scheme:"vscode",formatting:{label:"LABEL/${path}/${authority}/END",separator:"/",tildify:!0,normalizeDriveLetter:!0}});const t=o.parse("vscode://microsoft.com/1/2/3/4/5");a.strictEqual(e.getUriLabel(t,{relative:!1}),"LABEL//1/2/3/4/5/microsoft.com/END"),a.strictEqual(e.getUriBasenameLabel(t),"END")}),test("file scheme",function(){e.registerFormatter({scheme:"file",formatting:{label:"${path}",separator:q,tildify:!c,normalizeDriveLetter:c}});const t=L.folders[0].uri.with({path:L.folders[0].uri.path.concat("/a/b/c/d")});a.strictEqual(e.getUriLabel(t,{relative:!0}),c?"a\\b\\c\\d":"a/b/c/d"),a.strictEqual(e.getUriLabel(t,{relative:!1}),c?"C:\\testWorkspace\\a\\b\\c\\d":"/testWorkspace/a/b/c/d"),a.strictEqual(e.getUriBasenameLabel(t),"d");const r=o.file("c:\\1/2/3");a.strictEqual(e.getUriLabel(r,{relative:!1}),c?"C:\\1\\2\\3":"/c:\\1/2/3"),a.strictEqual(e.getUriBasenameLabel(r),"3")}),test("separator",function(){e.registerFormatter({scheme:"vscode",formatting:{label:"LABEL\\${path}\\${authority}\\END",separator:"\\",tildify:!0,normalizeDriveLetter:!0}});const t=o.parse("vscode://microsoft.com/1/2/3/4/5");a.strictEqual(e.getUriLabel(t,{relative:!1}),"LABEL\\\\1\\2\\3\\4\\5\\microsoft.com\\END"),a.strictEqual(e.getUriBasenameLabel(t),"END")}),test("custom authority",function(){e.registerFormatter({scheme:"vscode",authority:"micro*",formatting:{label:"LABEL/${path}/${authority}/END",separator:"/"}});const t=o.parse("vscode://microsoft.com/1/2/3/4/5");a.strictEqual(e.getUriLabel(t,{relative:!1}),"LABEL//1/2/3/4/5/microsoft.com/END"),a.strictEqual(e.getUriBasenameLabel(t),"END")}),test("mulitple authority",function(){e.registerFormatter({scheme:"vscode",authority:"not_matching_but_long",formatting:{label:"first",separator:"/"}}),e.registerFormatter({scheme:"vscode",authority:"microsof*",formatting:{label:"second",separator:"/"}}),e.registerFormatter({scheme:"vscode",authority:"mi*",formatting:{label:"third",separator:"/"}});const t=o.parse("vscode://microsoft.com/1/2/3/4/5");a.strictEqual(e.getUriLabel(t,{relative:!1}),"second"),a.strictEqual(e.getUriBasenameLabel(t),"second")}),test("custom query",function(){e.registerFormatter({scheme:"vscode",formatting:{label:"LABEL${query.prefix}: ${query.path}/END",separator:"/",tildify:!0,normalizeDriveLetter:!0}});const t=o.parse(`vscode://microsoft.com/1/2/3/4/5?${encodeURIComponent(JSON.stringify({prefix:"prefix",path:"path"}))}`);a.strictEqual(e.getUriLabel(t,{relative:!1}),"LABELprefix: path/END")}),test("custom query without value",function(){e.registerFormatter({scheme:"vscode",formatting:{label:"LABEL${query.prefix}: ${query.path}/END",separator:"/",tildify:!0,normalizeDriveLetter:!0}});const t=o.parse(`vscode://microsoft.com/1/2/3/4/5?${encodeURIComponent(JSON.stringify({path:"path"}))}`);a.strictEqual(e.getUriLabel(t,{relative:!1}),"LABEL: path/END")}),test("custom query without query json",function(){e.registerFormatter({scheme:"vscode",formatting:{label:"LABEL${query.prefix}: ${query.path}/END",separator:"/",tildify:!0,normalizeDriveLetter:!0}});const t=o.parse("vscode://microsoft.com/1/2/3/4/5?path=foo");a.strictEqual(e.getUriLabel(t,{relative:!1}),"LABEL: /END")}),test("custom query without query",function(){e.registerFormatter({scheme:"vscode",formatting:{label:"LABEL${query.prefix}: ${query.path}/END",separator:"/",tildify:!0,normalizeDriveLetter:!0}});const t=o.parse("vscode://microsoft.com/1/2/3/4/5");a.strictEqual(e.getUriLabel(t,{relative:!1}),"LABEL: /END")}),test("label caching",()=>{const t=new S("cachedResourceLabelFormatters2",s).getMemento(v.PROFILE,w.MACHINE),r=i=>({formatting:{label:`\${path} (${i})`,separator:"/"},scheme:i});a.deepStrictEqual(t,{}),e.registerCachedFormatter(r("a")),a.deepStrictEqual(t,{formatters:[r("a")]}),e.registerCachedFormatter(r("b")),a.deepStrictEqual(t,{formatters:[r("b"),r("a")]}),e.registerCachedFormatter(r("a")),a.deepStrictEqual(t,{formatters:[r("a"),r("b")]}),e.registerCachedFormatter(r("a")),a.deepStrictEqual(t,{formatters:[r("a"),r("b")]});for(let i=0;i<100;i++)e.registerCachedFormatter(r(`i${i}`));const l=[];for(let i=50;i<100;i++)l.unshift(r(`i${i}`));a.deepStrictEqual(t,{formatters:l}),delete t.formatters})}),suite("multi-root workspace",()=>{let e;const s=new F;setup(()=>{const t=o.file("folder1/src"),r=o.file("folder1/test"),l=o.file("folder2");e=s.add(new h(f,new p(new b("test-workspace",[new m({uri:t,index:0,name:"Sources"}),new m({uri:r,index:1,name:"Tests"}),new m({uri:l,index:2,name:E.basename(l)})])),new u,new d,s.add(new g),s.add(new n)))}),teardown(()=>{s.clear()}),test("labels of files in multiroot workspaces are the foldername followed by offset from the folder",()=>{e.registerFormatter({scheme:"file",formatting:{label:"${authority}${path}",separator:"/",tildify:!1,normalizeDriveLetter:!1,authorityPrefix:"//",workspaceSuffix:""}}),Object.entries({"folder1/src/file":"Sources \u2022 file","folder1/src/folder/file":"Sources \u2022 folder/file","folder1/src":"Sources","folder1/other":"/folder1/other","folder2/other":"folder2 \u2022 other"}).forEach(([r,l])=>{const i=e.getUriLabel(o.file(r),{relative:!0});a.strictEqual(i,l)})}),test("labels with context after path",()=>{e.registerFormatter({scheme:"file",formatting:{label:"${path} (${scheme})",separator:"/"}}),Object.entries({"folder1/src/file":"Sources \u2022 file (file)","folder1/src/folder/file":"Sources \u2022 folder/file (file)","folder1/src":"Sources","folder1/other":"/folder1/other (file)","folder2/other":"folder2 \u2022 other (file)"}).forEach(([r,l])=>{const i=e.getUriLabel(o.file(r),{relative:!0});a.strictEqual(i,l,r)})}),test("stripPathStartingSeparator",()=>{e.registerFormatter({scheme:"file",formatting:{label:"${path}",separator:"/",stripPathStartingSeparator:!0}}),Object.entries({"folder1/src/file":"Sources \u2022 file","other/blah":"other/blah"}).forEach(([r,l])=>{const i=e.getUriLabel(o.file(r),{relative:!0});a.strictEqual(i,l,r)})}),test("relative label without formatter",()=>{const t=o.parse("myscheme://myauthority/");e=s.add(new h(f,new p(new b("test-workspace",[new m({uri:t,index:0,name:"FSProotFolder"})])),new u(void 0,t.scheme),new d,s.add(new g),s.add(new n)));const r=e.getUriLabel(o.parse("myscheme://myauthority/some/folder/test.txt"),{relative:!0});c?a.strictEqual(r,"some\\folder\\test.txt"):a.strictEqual(r,"some/folder/test.txt")}),y()}),suite("workspace at FSP root",()=>{let e;setup(()=>{const s=o.parse("myscheme://myauthority/");e=new h(f,new p(new b("test-workspace",[new m({uri:s,index:0,name:"FSProotFolder"})])),new u,new d,new g,new n),e.registerFormatter({scheme:"myscheme",formatting:{label:"${scheme}://${authority}${path}",separator:"/",tildify:!1,normalizeDriveLetter:!1,workspaceSuffix:"",authorityPrefix:"",stripPathStartingSeparator:!1}})}),test("non-relative label",()=>{Object.entries({"myscheme://myauthority/myFile1.txt":"myscheme://myauthority/myFile1.txt","myscheme://myauthority/folder/myFile2.txt":"myscheme://myauthority/folder/myFile2.txt"}).forEach(([t,r])=>{const l=e.getUriLabel(o.parse(t),{relative:!1});a.strictEqual(l,r)})}),test("relative label",()=>{Object.entries({"myscheme://myauthority/myFile1.txt":"myFile1.txt","myscheme://myauthority/folder/myFile2.txt":"folder/myFile2.txt"}).forEach(([t,r])=>{const l=e.getUriLabel(o.parse(t),{relative:!0});a.strictEqual(l,r)})}),test("relative label with explicit path separator",()=>{let s=e.getUriLabel(o.parse("myscheme://myauthority/some/folder/test.txt"),{relative:!0,separator:"/"});a.strictEqual(s,"some/folder/test.txt"),s=e.getUriLabel(o.parse("myscheme://myauthority/some/folder/test.txt"),{relative:!0,separator:"\\"}),a.strictEqual(s,"some\\folder\\test.txt")}),y()});
