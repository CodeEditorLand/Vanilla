{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/terminal/common/embedderTerminalService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { InstantiationType, registerSingleton } from '../../../../platform/instantiation/common/extensions.js';\nimport { createDecorator } from '../../../../platform/instantiation/common/instantiation.js';\nimport { Emitter, Event } from '../../../../base/common/event.js';\nimport { IProcessDataEvent, IProcessProperty, IProcessPropertyMap, IProcessReadyEvent, IShellLaunchConfig, ITerminalChildProcess, ITerminalLaunchError, ProcessPropertyType } from '../../../../platform/terminal/common/terminal.js';\nimport { Disposable } from '../../../../base/common/lifecycle.js';\n\nexport const IEmbedderTerminalService = createDecorator<IEmbedderTerminalService>('embedderTerminalService');\n\n/**\n * Manages terminals that the embedder can create before the terminal contrib is available.\n */\nexport interface IEmbedderTerminalService {\n\treadonly _serviceBrand: undefined;\n\n\treadonly onDidCreateTerminal: Event<IShellLaunchConfig>;\n\n\tcreateTerminal(options: IEmbedderTerminalOptions): void;\n}\n\nexport type EmbedderTerminal = IShellLaunchConfig & Required<Pick<IShellLaunchConfig, 'customPtyImplementation'>>;\n\nexport interface IEmbedderTerminalOptions {\n\tname: string;\n\tpty: IEmbedderTerminalPty;\n\n\t// Extension APIs that have not been implemented for embedders:\n\t//   iconPath?: URI | { light: URI; dark: URI } | ThemeIcon;\n\t//   color?: ThemeColor;\n\t//   location?: TerminalLocation | TerminalEditorLocationOptions | TerminalSplitLocationOptions;\n\t//   isTransient?: boolean;\n}\n\n/**\n * See Pseudoterminal on the vscode API for usage.\n */\nexport interface IEmbedderTerminalPty {\n\tonDidWrite: Event<string>;\n\tonDidClose?: Event<void | number>;\n\tonDidChangeName?: Event<string>;\n\n\topen(): void;\n\tclose(): void;\n\n\t// Extension APIs that have not been implemented for embedders:\n\t//   onDidOverrideDimensions?: Event<TerminalDimensions | undefined>;\n\t//   handleInput?(data: string): void;\n\t//   setDimensions?(dimensions: TerminalDimensions): void;\n}\n\nclass EmbedderTerminalService implements IEmbedderTerminalService {\n\tdeclare _serviceBrand: undefined;\n\n\tprivate readonly _onDidCreateTerminal = new Emitter<IShellLaunchConfig>();\n\treadonly onDidCreateTerminal = Event.buffer(this._onDidCreateTerminal.event);\n\n\tcreateTerminal(options: IEmbedderTerminalOptions): void {\n\t\tconst slc: EmbedderTerminal = {\n\t\t\tname: options.name,\n\t\t\tisFeatureTerminal: true,\n\t\t\tcustomPtyImplementation(terminalId, cols, rows) {\n\t\t\t\treturn new EmbedderTerminalProcess(terminalId, options.pty);\n\t\t\t},\n\t\t};\n\t\tthis._onDidCreateTerminal.fire(slc);\n\t}\n}\n\n\nclass EmbedderTerminalProcess extends Disposable implements ITerminalChildProcess {\n\tprivate readonly _pty: IEmbedderTerminalPty;\n\n\treadonly shouldPersist = false;\n\n\treadonly onProcessData: Event<IProcessDataEvent | string>;\n\tprivate readonly _onProcessReady = this._register(new Emitter<IProcessReadyEvent>());\n\treadonly onProcessReady = this._onProcessReady.event;\n\tprivate readonly _onDidChangeProperty = this._register(new Emitter<IProcessProperty<any>>());\n\treadonly onDidChangeProperty = this._onDidChangeProperty.event;\n\tprivate readonly _onProcessExit = this._register(new Emitter<number | undefined>());\n\treadonly onProcessExit = this._onProcessExit.event;\n\n\tconstructor(\n\t\treadonly id: number,\n\t\tpty: IEmbedderTerminalPty\n\t) {\n\t\tsuper();\n\n\t\tthis._pty = pty;\n\t\tthis.onProcessData = this._pty.onDidWrite;\n\t\tif (this._pty.onDidClose) {\n\t\t\tthis._register(this._pty.onDidClose(e => this._onProcessExit.fire(e || undefined)));\n\t\t}\n\t\tif (this._pty.onDidChangeName) {\n\t\t\tthis._register(this._pty.onDidChangeName(e => this._onDidChangeProperty.fire({\n\t\t\t\ttype: ProcessPropertyType.Title,\n\t\t\t\tvalue: e\n\t\t\t})));\n\t\t}\n\t}\n\n\tasync start(): Promise<ITerminalLaunchError | undefined> {\n\t\tthis._onProcessReady.fire({ pid: -1, cwd: '', windowsPty: undefined });\n\t\tthis._pty.open();\n\t\treturn undefined;\n\t}\n\tshutdown(): void {\n\t\tthis._pty.close();\n\t}\n\n\t// TODO: A lot of these aren't useful for some implementations of ITerminalChildProcess, should\n\t// they be optional? Should there be a base class for \"external\" consumers to implement?\n\n\tinput(): void {\n\t\t// not supported\n\t}\n\tasync processBinary(): Promise<void> {\n\t\t// not supported\n\t}\n\tresize(): void {\n\t\t// no-op\n\t}\n\tclearBuffer(): void | Promise<void> {\n\t\t// no-op\n\t}\n\tacknowledgeDataEvent(): void {\n\t\t// no-op, flow control not currently implemented\n\t}\n\tasync setUnicodeVersion(): Promise<void> {\n\t\t// no-op\n\t}\n\tasync getInitialCwd(): Promise<string> {\n\t\treturn '';\n\t}\n\tasync getCwd(): Promise<string> {\n\t\treturn '';\n\t}\n\trefreshProperty<T extends ProcessPropertyType>(property: ProcessPropertyType): Promise<IProcessPropertyMap[T]> {\n\t\tthrow new Error(`refreshProperty is not suppported in EmbedderTerminalProcess. property: ${property}`);\n\t}\n\n\tupdateProperty(property: ProcessPropertyType, value: any): Promise<void> {\n\t\tthrow new Error(`updateProperty is not suppported in EmbedderTerminalProcess. property: ${property}, value: ${value}`);\n\t}\n}\n\nregisterSingleton(IEmbedderTerminalService, EmbedderTerminalService, InstantiationType.Delayed);\n"],
  "mappings": ";;AAKA,SAAS,mBAAmB,yBAAyB;AACrD,SAAS,uBAAuB;AAChC,SAAS,SAAS,aAAa;AAC/B,SAAS,mBAAmB,kBAAkB,qBAAqB,oBAAoB,oBAAoB,uBAAuB,sBAAsB,2BAA2B;AACnL,SAAS,kBAAkB;AAEpB,MAAM,2BAA2B,gBAA0C,yBAAyB;AA2C3G,MAAM,wBAA4D;AAAA,EAtDlE,OAsDkE;AAAA;AAAA;AAAA,EAGhD,uBAAuB,IAAI,QAA4B;AAAA,EAC/D,sBAAsB,MAAM,OAAO,KAAK,qBAAqB,KAAK;AAAA,EAE3E,eAAe,SAAyC;AACvD,UAAM,MAAwB;AAAA,MAC7B,MAAM,QAAQ;AAAA,MACd,mBAAmB;AAAA,MACnB,wBAAwB,YAAY,MAAM,MAAM;AAC/C,eAAO,IAAI,wBAAwB,YAAY,QAAQ,GAAG;AAAA,MAC3D;AAAA,IACD;AACA,SAAK,qBAAqB,KAAK,GAAG;AAAA,EACnC;AACD;AAGA,MAAM,gCAAgC,WAA4C;AAAA,EAajF,YACU,IACT,KACC;AACD,UAAM;AAHG;AAKT,SAAK,OAAO;AACZ,SAAK,gBAAgB,KAAK,KAAK;AAC/B,QAAI,KAAK,KAAK,YAAY;AACzB,WAAK,UAAU,KAAK,KAAK,WAAW,OAAK,KAAK,eAAe,KAAK,KAAK,MAAS,CAAC,CAAC;AAAA,IACnF;AACA,QAAI,KAAK,KAAK,iBAAiB;AAC9B,WAAK,UAAU,KAAK,KAAK,gBAAgB,OAAK,KAAK,qBAAqB,KAAK;AAAA,QAC5E,MAAM,oBAAoB;AAAA,QAC1B,OAAO;AAAA,MACR,CAAC,CAAC,CAAC;AAAA,IACJ;AAAA,EACD;AAAA,EAvGD,OAyEkF;AAAA;AAAA;AAAA,EAChE;AAAA,EAER,gBAAgB;AAAA,EAEhB;AAAA,EACQ,kBAAkB,KAAK,UAAU,IAAI,QAA4B,CAAC;AAAA,EAC1E,iBAAiB,KAAK,gBAAgB;AAAA,EAC9B,uBAAuB,KAAK,UAAU,IAAI,QAA+B,CAAC;AAAA,EAClF,sBAAsB,KAAK,qBAAqB;AAAA,EACxC,iBAAiB,KAAK,UAAU,IAAI,QAA4B,CAAC;AAAA,EACzE,gBAAgB,KAAK,eAAe;AAAA,EAqB7C,MAAM,QAAmD;AACxD,SAAK,gBAAgB,KAAK,EAAE,KAAK,IAAI,KAAK,IAAI,YAAY,OAAU,CAAC;AACrE,SAAK,KAAK,KAAK;AACf,WAAO;AAAA,EACR;AAAA,EACA,WAAiB;AAChB,SAAK,KAAK,MAAM;AAAA,EACjB;AAAA;AAAA;AAAA,EAKA,QAAc;AAAA,EAEd;AAAA,EACA,MAAM,gBAA+B;AAAA,EAErC;AAAA,EACA,SAAe;AAAA,EAEf;AAAA,EACA,cAAoC;AAAA,EAEpC;AAAA,EACA,uBAA6B;AAAA,EAE7B;AAAA,EACA,MAAM,oBAAmC;AAAA,EAEzC;AAAA,EACA,MAAM,gBAAiC;AACtC,WAAO;AAAA,EACR;AAAA,EACA,MAAM,SAA0B;AAC/B,WAAO;AAAA,EACR;AAAA,EACA,gBAA+C,UAAgE;AAC9G,UAAM,IAAI,MAAM,2EAA2E,QAAQ,EAAE;AAAA,EACtG;AAAA,EAEA,eAAe,UAA+B,OAA2B;AACxE,UAAM,IAAI,MAAM,0EAA0E,QAAQ,YAAY,KAAK,EAAE;AAAA,EACtH;AACD;AAEA,kBAAkB,0BAA0B,yBAAyB,kBAAkB,OAAO;",
  "names": []
}
