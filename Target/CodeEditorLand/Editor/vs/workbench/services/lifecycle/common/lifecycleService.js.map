{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/lifecycle/common/lifecycleService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Barrier } from \"../../../../base/common/async.js\";\nimport { Emitter } from \"../../../../base/common/event.js\";\nimport { Disposable } from \"../../../../base/common/lifecycle.js\";\nimport { mark } from \"../../../../base/common/performance.js\";\nimport { ILogService } from \"../../../../platform/log/common/log.js\";\nimport {\n\tIStorageService,\n\tStorageScope,\n\tStorageTarget,\n\tWillSaveStateReason,\n} from \"../../../../platform/storage/common/storage.js\";\nimport {\n\ttype BeforeShutdownErrorEvent,\n\ttype ILifecycleService,\n\ttype InternalBeforeShutdownEvent,\n\tLifecyclePhase,\n\tLifecyclePhaseToString,\n\tShutdownReason,\n\tStartupKind,\n\ttype WillShutdownEvent,\n} from \"./lifecycle.js\";\n\nexport abstract class AbstractLifecycleService\n\textends Disposable\n\timplements ILifecycleService\n{\n\tprivate static readonly LAST_SHUTDOWN_REASON_KEY =\n\t\t\"lifecyle.lastShutdownReason\";\n\n\tdeclare readonly _serviceBrand: undefined;\n\n\tprotected readonly _onBeforeShutdown = this._register(\n\t\tnew Emitter<InternalBeforeShutdownEvent>(),\n\t);\n\treadonly onBeforeShutdown = this._onBeforeShutdown.event;\n\n\tprotected readonly _onWillShutdown = this._register(\n\t\tnew Emitter<WillShutdownEvent>(),\n\t);\n\treadonly onWillShutdown = this._onWillShutdown.event;\n\n\tprotected readonly _onDidShutdown = this._register(new Emitter<void>());\n\treadonly onDidShutdown = this._onDidShutdown.event;\n\n\tprotected readonly _onBeforeShutdownError = this._register(\n\t\tnew Emitter<BeforeShutdownErrorEvent>(),\n\t);\n\treadonly onBeforeShutdownError = this._onBeforeShutdownError.event;\n\n\tprotected readonly _onShutdownVeto = this._register(new Emitter<void>());\n\treadonly onShutdownVeto = this._onShutdownVeto.event;\n\n\tprivate _startupKind: StartupKind;\n\tget startupKind(): StartupKind {\n\t\treturn this._startupKind;\n\t}\n\n\tprivate _phase = LifecyclePhase.Starting;\n\tget phase(): LifecyclePhase {\n\t\treturn this._phase;\n\t}\n\n\tprivate readonly phaseWhen = new Map<LifecyclePhase, Barrier>();\n\n\tprotected shutdownReason: ShutdownReason | undefined;\n\n\tconstructor(\n\t\t@ILogService protected readonly logService: ILogService,\n\t\t@IStorageService protected readonly storageService: IStorageService,\n\t) {\n\t\tsuper();\n\n\t\t// Resolve startup kind\n\t\tthis._startupKind = this.resolveStartupKind();\n\n\t\t// Save shutdown reason to retrieve on next startup\n\t\tthis._register(\n\t\t\tthis.storageService.onWillSaveState((e) => {\n\t\t\t\tif (e.reason === WillSaveStateReason.SHUTDOWN) {\n\t\t\t\t\tthis.storageService.store(\n\t\t\t\t\t\tAbstractLifecycleService.LAST_SHUTDOWN_REASON_KEY,\n\t\t\t\t\t\tthis.shutdownReason,\n\t\t\t\t\t\tStorageScope.WORKSPACE,\n\t\t\t\t\t\tStorageTarget.MACHINE,\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}),\n\t\t);\n\t}\n\n\tprivate resolveStartupKind(): StartupKind {\n\t\tconst startupKind =\n\t\t\tthis.doResolveStartupKind() ?? StartupKind.NewWindow;\n\t\tthis.logService.trace(\n\t\t\t`[lifecycle] starting up (startup kind: ${startupKind})`,\n\t\t);\n\n\t\treturn startupKind;\n\t}\n\n\tprotected doResolveStartupKind(): StartupKind | undefined {\n\t\t// Retrieve and reset last shutdown reason\n\t\tconst lastShutdownReason = this.storageService.getNumber(\n\t\t\tAbstractLifecycleService.LAST_SHUTDOWN_REASON_KEY,\n\t\t\tStorageScope.WORKSPACE,\n\t\t);\n\t\tthis.storageService.remove(\n\t\t\tAbstractLifecycleService.LAST_SHUTDOWN_REASON_KEY,\n\t\t\tStorageScope.WORKSPACE,\n\t\t);\n\n\t\t// Convert into startup kind\n\t\tlet startupKind: StartupKind | undefined;\n\t\tswitch (lastShutdownReason) {\n\t\t\tcase ShutdownReason.RELOAD:\n\t\t\t\tstartupKind = StartupKind.ReloadedWindow;\n\t\t\t\tbreak;\n\t\t\tcase ShutdownReason.LOAD:\n\t\t\t\tstartupKind = StartupKind.ReopenedWindow;\n\t\t\t\tbreak;\n\t\t}\n\n\t\treturn startupKind;\n\t}\n\n\tset phase(value: LifecyclePhase) {\n\t\tif (value < this.phase) {\n\t\t\tthrow new Error(\"Lifecycle cannot go backwards\");\n\t\t}\n\n\t\tif (this._phase === value) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.logService.trace(`lifecycle: phase changed (value: ${value})`);\n\n\t\tthis._phase = value;\n\t\tmark(`code/LifecyclePhase/${LifecyclePhaseToString(value)}`);\n\n\t\tconst barrier = this.phaseWhen.get(this._phase);\n\t\tif (barrier) {\n\t\t\tbarrier.open();\n\t\t\tthis.phaseWhen.delete(this._phase);\n\t\t}\n\t}\n\n\tasync when(phase: LifecyclePhase): Promise<void> {\n\t\tif (phase <= this._phase) {\n\t\t\treturn;\n\t\t}\n\n\t\tlet barrier = this.phaseWhen.get(phase);\n\t\tif (!barrier) {\n\t\t\tbarrier = new Barrier();\n\t\t\tthis.phaseWhen.set(phase, barrier);\n\t\t}\n\n\t\tawait barrier.wait();\n\t}\n\n\t/**\n\t * Subclasses to implement the explicit shutdown method.\n\t */\n\tabstract shutdown(): Promise<void>;\n}\n"],
  "mappings": "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",
  "names": []
}
