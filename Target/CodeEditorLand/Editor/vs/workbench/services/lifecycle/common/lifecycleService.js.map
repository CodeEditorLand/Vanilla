{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/lifecycle/common/lifecycleService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Emitter } from '../../../../base/common/event.js';\nimport { Barrier } from '../../../../base/common/async.js';\nimport { Disposable } from '../../../../base/common/lifecycle.js';\nimport { ILifecycleService, WillShutdownEvent, StartupKind, LifecyclePhase, LifecyclePhaseToString, ShutdownReason, BeforeShutdownErrorEvent, InternalBeforeShutdownEvent } from './lifecycle.js';\nimport { ILogService } from '../../../../platform/log/common/log.js';\nimport { mark } from '../../../../base/common/performance.js';\nimport { IStorageService, StorageScope, StorageTarget, WillSaveStateReason } from '../../../../platform/storage/common/storage.js';\n\nexport abstract class AbstractLifecycleService extends Disposable implements ILifecycleService {\n\n\tprivate static readonly LAST_SHUTDOWN_REASON_KEY = 'lifecyle.lastShutdownReason';\n\n\tdeclare readonly _serviceBrand: undefined;\n\n\tprotected readonly _onBeforeShutdown = this._register(new Emitter<InternalBeforeShutdownEvent>());\n\treadonly onBeforeShutdown = this._onBeforeShutdown.event;\n\n\tprotected readonly _onWillShutdown = this._register(new Emitter<WillShutdownEvent>());\n\treadonly onWillShutdown = this._onWillShutdown.event;\n\n\tprotected readonly _onDidShutdown = this._register(new Emitter<void>());\n\treadonly onDidShutdown = this._onDidShutdown.event;\n\n\tprotected readonly _onBeforeShutdownError = this._register(new Emitter<BeforeShutdownErrorEvent>());\n\treadonly onBeforeShutdownError = this._onBeforeShutdownError.event;\n\n\tprotected readonly _onShutdownVeto = this._register(new Emitter<void>());\n\treadonly onShutdownVeto = this._onShutdownVeto.event;\n\n\tprivate _startupKind: StartupKind;\n\tget startupKind(): StartupKind { return this._startupKind; }\n\n\tprivate _phase = LifecyclePhase.Starting;\n\tget phase(): LifecyclePhase { return this._phase; }\n\n\tprivate readonly phaseWhen = new Map<LifecyclePhase, Barrier>();\n\n\tprotected shutdownReason: ShutdownReason | undefined;\n\n\tconstructor(\n\t\t@ILogService protected readonly logService: ILogService,\n\t\t@IStorageService protected readonly storageService: IStorageService\n\t) {\n\t\tsuper();\n\n\t\t// Resolve startup kind\n\t\tthis._startupKind = this.resolveStartupKind();\n\n\t\t// Save shutdown reason to retrieve on next startup\n\t\tthis._register(this.storageService.onWillSaveState(e => {\n\t\t\tif (e.reason === WillSaveStateReason.SHUTDOWN) {\n\t\t\t\tthis.storageService.store(AbstractLifecycleService.LAST_SHUTDOWN_REASON_KEY, this.shutdownReason, StorageScope.WORKSPACE, StorageTarget.MACHINE);\n\t\t\t}\n\t\t}));\n\t}\n\n\tprivate resolveStartupKind(): StartupKind {\n\t\tconst startupKind = this.doResolveStartupKind() ?? StartupKind.NewWindow;\n\t\tthis.logService.trace(`[lifecycle] starting up (startup kind: ${startupKind})`);\n\n\t\treturn startupKind;\n\t}\n\n\tprotected doResolveStartupKind(): StartupKind | undefined {\n\n\t\t// Retrieve and reset last shutdown reason\n\t\tconst lastShutdownReason = this.storageService.getNumber(AbstractLifecycleService.LAST_SHUTDOWN_REASON_KEY, StorageScope.WORKSPACE);\n\t\tthis.storageService.remove(AbstractLifecycleService.LAST_SHUTDOWN_REASON_KEY, StorageScope.WORKSPACE);\n\n\t\t// Convert into startup kind\n\t\tlet startupKind: StartupKind | undefined = undefined;\n\t\tswitch (lastShutdownReason) {\n\t\t\tcase ShutdownReason.RELOAD:\n\t\t\t\tstartupKind = StartupKind.ReloadedWindow;\n\t\t\t\tbreak;\n\t\t\tcase ShutdownReason.LOAD:\n\t\t\t\tstartupKind = StartupKind.ReopenedWindow;\n\t\t\t\tbreak;\n\t\t}\n\n\t\treturn startupKind;\n\t}\n\n\tset phase(value: LifecyclePhase) {\n\t\tif (value < this.phase) {\n\t\t\tthrow new Error('Lifecycle cannot go backwards');\n\t\t}\n\n\t\tif (this._phase === value) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.logService.trace(`lifecycle: phase changed (value: ${value})`);\n\n\t\tthis._phase = value;\n\t\tmark(`code/LifecyclePhase/${LifecyclePhaseToString(value)}`);\n\n\t\tconst barrier = this.phaseWhen.get(this._phase);\n\t\tif (barrier) {\n\t\t\tbarrier.open();\n\t\t\tthis.phaseWhen.delete(this._phase);\n\t\t}\n\t}\n\n\tasync when(phase: LifecyclePhase): Promise<void> {\n\t\tif (phase <= this._phase) {\n\t\t\treturn;\n\t\t}\n\n\t\tlet barrier = this.phaseWhen.get(phase);\n\t\tif (!barrier) {\n\t\t\tbarrier = new Barrier();\n\t\t\tthis.phaseWhen.set(phase, barrier);\n\t\t}\n\n\t\tawait barrier.wait();\n\t}\n\n\t/**\n\t * Subclasses to implement the explicit shutdown method.\n\t */\n\tabstract shutdown(): Promise<void>;\n}\n"],
  "mappings": "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",
  "names": []
}
