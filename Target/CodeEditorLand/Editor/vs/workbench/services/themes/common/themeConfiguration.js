import"../../../../base/common/jsonSchema.js";import{isWeb as P}from"../../../../base/common/platform.js";import*as S from"../../../../base/common/types.js";import*as o from"../../../../nls.js";import{ConfigurationTarget as l}from"../../../../platform/configuration/common/configuration.js";import{Extensions as w,ConfigurationScope as z}from"../../../../platform/configuration/common/configurationRegistry.js";import{Registry as N}from"../../../../platform/registry/common/platform.js";import{workbenchColorsSchemaId as k}from"../../../../platform/theme/common/colorRegistry.js";import{ColorScheme as m}from"../../../../platform/theme/common/theme.js";import{tokenStylingSchemaId as A}from"../../../../platform/theme/common/tokenClassificationRegistry.js";import{textmateColorGroupSchemaId as v,textmateColorsSchemaId as U}from"./colorThemeSchema.js";import"./hostColorSchemeService.js";import{ThemeSettingDefaults as c,ThemeSettings as t}from"./workbenchThemeService.js";const f=N.as(w.Configuration),u=[],d=[],g=[];function s(r){return`\`#${r}#\``}const C="colorThemeConfiguration",F={type:"string",markdownDescription:o.localize({key:"colorTheme",comment:["{0} will become a link to another setting."]},"Specifies the color theme used in the workbench when {0} is not enabled.",s(t.DETECT_COLOR_SCHEME)),default:P?c.COLOR_THEME_LIGHT:c.COLOR_THEME_DARK,tags:[C],enum:u,enumDescriptions:g,enumItemLabels:d,errorMessage:o.localize("colorThemeError","Theme is unknown or not installed.")},G={type:"string",markdownDescription:o.localize({key:"preferredDarkColorTheme",comment:["{0} will become a link to another setting."]},"Specifies the color theme when system color mode is dark and {0} is enabled.",s(t.DETECT_COLOR_SCHEME)),default:c.COLOR_THEME_DARK,tags:[C],enum:u,enumDescriptions:g,enumItemLabels:d,errorMessage:o.localize("colorThemeError","Theme is unknown or not installed.")},K={type:"string",markdownDescription:o.localize({key:"preferredLightColorTheme",comment:["{0} will become a link to another setting."]},"Specifies the color theme when system color mode is light and {0} is enabled.",s(t.DETECT_COLOR_SCHEME)),default:c.COLOR_THEME_LIGHT,tags:[C],enum:u,enumDescriptions:g,enumItemLabels:d,errorMessage:o.localize("colorThemeError","Theme is unknown or not installed.")},V={type:"string",markdownDescription:o.localize({key:"preferredHCDarkColorTheme",comment:["{0} will become a link to another setting."]},"Specifies the color theme when in high contrast dark mode and {0} is enabled.",s(t.DETECT_HC)),default:c.COLOR_THEME_HC_DARK,tags:[C],enum:u,enumDescriptions:g,enumItemLabels:d,errorMessage:o.localize("colorThemeError","Theme is unknown or not installed.")},W={type:"string",markdownDescription:o.localize({key:"preferredHCLightColorTheme",comment:["{0} will become a link to another setting."]},"Specifies the color theme when in high contrast light mode and {0} is enabled.",s(t.DETECT_HC)),default:c.COLOR_THEME_HC_LIGHT,tags:[C],enum:u,enumDescriptions:g,enumItemLabels:d,errorMessage:o.localize("colorThemeError","Theme is unknown or not installed.")},x={type:"boolean",markdownDescription:o.localize({key:"detectColorScheme",comment:["{0} and {1} will become links to other settings."]},"If enabled, will automatically select a color theme based on the system color mode. If the system color mode is dark, {0} is used, else {1}.",s(t.PREFERRED_DARK_THEME),s(t.PREFERRED_LIGHT_THEME)),default:!1,tags:[C]},H={type:"object",description:o.localize("workbenchColors","Overrides colors from the currently selected color theme."),allOf:[{$ref:k}],default:{},defaultSnippets:[{body:{}}]},E={type:["string","null"],default:c.FILE_ICON_THEME,description:o.localize("iconTheme","Specifies the file icon theme used in the workbench or 'null' to not show any file icons."),enum:[null],enumItemLabels:[o.localize("noIconThemeLabel","None")],enumDescriptions:[o.localize("noIconThemeDesc","No file icons")],errorMessage:o.localize("iconThemeError","File icon theme is unknown or not installed.")},I={type:["string","null"],default:c.PRODUCT_ICON_THEME,description:o.localize("productIconTheme","Specifies the product icon theme used."),enum:[c.PRODUCT_ICON_THEME],enumItemLabels:[o.localize("defaultProductIconThemeLabel","Default")],enumDescriptions:[o.localize("defaultProductIconThemeDesc","Default")],errorMessage:o.localize("productIconThemeError","Product icon theme is unknown or not installed.")},$={type:"boolean",default:!0,markdownDescription:o.localize({key:"autoDetectHighContrast",comment:["{0} and {1} will become links to other settings."]},"If enabled, will automatically change to high contrast theme if the OS is using a high contrast theme. The high contrast theme to use is specified by {0} and {1}.",s(t.PREFERRED_HC_DARK_THEME),s(t.PREFERRED_HC_LIGHT_THEME)),scope:z.APPLICATION,tags:[C]},_={id:"workbench",order:7.1,type:"object",properties:{[t.COLOR_THEME]:F,[t.PREFERRED_DARK_THEME]:G,[t.PREFERRED_LIGHT_THEME]:K,[t.PREFERRED_HC_DARK_THEME]:V,[t.PREFERRED_HC_LIGHT_THEME]:W,[t.FILE_ICON_THEME]:E,[t.COLOR_CUSTOMIZATIONS]:H,[t.PRODUCT_ICON_THEME]:I}};f.registerConfiguration(_);const J={id:"window",order:8.1,type:"object",properties:{[t.DETECT_HC]:$,[t.DETECT_COLOR_SCHEME]:x}};f.registerConfiguration(J);function p(r){return{description:r,$ref:v}}const O="^\\[[^\\]]*(\\]\\s*\\[[^\\]]*)*\\]$",y={type:"object",properties:{comments:p(o.localize("editorColors.comments","Sets the colors and styles for comments")),strings:p(o.localize("editorColors.strings","Sets the colors and styles for strings literals.")),keywords:p(o.localize("editorColors.keywords","Sets the colors and styles for keywords.")),numbers:p(o.localize("editorColors.numbers","Sets the colors and styles for number literals.")),types:p(o.localize("editorColors.types","Sets the colors and styles for type declarations and references.")),functions:p(o.localize("editorColors.functions","Sets the colors and styles for functions declarations and references.")),variables:p(o.localize("editorColors.variables","Sets the colors and styles for variables declarations and references.")),textMateRules:{description:o.localize("editorColors.textMateRules","Sets colors and styles using textmate theming rules (advanced)."),$ref:U},semanticHighlighting:{description:o.localize("editorColors.semanticHighlighting","Whether semantic highlighting should be enabled for this theme."),deprecationMessage:o.localize("editorColors.semanticHighlighting.deprecationMessage","Use `enabled` in `editor.semanticTokenColorCustomizations` setting instead."),markdownDeprecationMessage:o.localize({key:"editorColors.semanticHighlighting.deprecationMessageMarkdown",comment:["{0} will become a link to another setting."]},"Use `enabled` in {0} setting instead.",s("editor.semanticTokenColorCustomizations")),type:"boolean"}},additionalProperties:!1},D={description:o.localize("editorColors","Overrides editor syntax colors and font style from the currently selected color theme."),default:{},allOf:[{...y,patternProperties:{"^\\[":{}}}]},b={type:"object",properties:{enabled:{type:"boolean",description:o.localize("editorColors.semanticHighlighting.enabled","Whether semantic highlighting is enabled or disabled for this theme"),suggestSortText:"0_enabled"},rules:{$ref:A,description:o.localize("editorColors.semanticHighlighting.rules","Semantic token styling rules for this theme."),suggestSortText:"0_rules"}},additionalProperties:!1},M={description:o.localize("semanticTokenColors","Overrides editor semantic token color and styles from the currently selected color theme."),default:{},allOf:[{...b,patternProperties:{"^\\[":{}}}]},L={id:"editor",order:7.2,type:"object",properties:{[t.TOKEN_COLOR_CUSTOMIZATIONS]:D,[t.SEMANTIC_TOKEN_COLOR_CUSTOMIZATIONS]:M}};f.registerConfiguration(L);function Te(r){r.sort((a,T)=>a.label.localeCompare(T.label)),u.splice(0,u.length,...r.map(a=>a.settingsId)),g.splice(0,g.length,...r.map(a=>a.description||"")),d.splice(0,d.length,...r.map(a=>a.label||""));const e={properties:{}},i={properties:{}},n={properties:{}},h={$ref:k,additionalProperties:!1},R={properties:y.properties,additionalProperties:!1};for(const a of r){const T=`[${a.settingsId}]`;e.properties[T]=h,i.properties[T]=R,n.properties[T]=b}e.patternProperties={[O]:h},i.patternProperties={[O]:R},n.patternProperties={[O]:b},H.allOf[1]=e,D.allOf[1]=i,M.allOf[1]=n,f.notifyConfigurationSchemaUpdated(_,L)}function Se(r){E.enum.splice(1,Number.MAX_VALUE,...r.map(e=>e.settingsId)),E.enumItemLabels.splice(1,Number.MAX_VALUE,...r.map(e=>e.label)),E.enumDescriptions.splice(1,Number.MAX_VALUE,...r.map(e=>e.description||"")),f.notifyConfigurationSchemaUpdated(_)}function Ee(r){I.enum.splice(1,Number.MAX_VALUE,...r.map(e=>e.settingsId)),I.enumItemLabels.splice(1,Number.MAX_VALUE,...r.map(e=>e.label)),I.enumDescriptions.splice(1,Number.MAX_VALUE,...r.map(e=>e.description||"")),f.notifyConfigurationSchemaUpdated(_)}const j={[m.DARK]:t.PREFERRED_DARK_THEME,[m.LIGHT]:t.PREFERRED_LIGHT_THEME,[m.HIGH_CONTRAST_DARK]:t.PREFERRED_HC_DARK_THEME,[m.HIGH_CONTRAST_LIGHT]:t.PREFERRED_HC_LIGHT_THEME};class Ie{constructor(e,i){this.configurationService=e;this.hostColorService=i}get colorTheme(){return this.configurationService.getValue(this.getColorThemeSettingId())}get fileIconTheme(){return this.configurationService.getValue(t.FILE_ICON_THEME)}get productIconTheme(){return this.configurationService.getValue(t.PRODUCT_ICON_THEME)}get colorCustomizations(){return this.configurationService.getValue(t.COLOR_CUSTOMIZATIONS)||{}}get tokenColorCustomizations(){return this.configurationService.getValue(t.TOKEN_COLOR_CUSTOMIZATIONS)||{}}get semanticTokenColorCustomizations(){return this.configurationService.getValue(t.SEMANTIC_TOKEN_COLOR_CUSTOMIZATIONS)}getPreferredColorScheme(){if(this.configurationService.getValue(t.DETECT_HC)&&this.hostColorService.highContrast)return this.hostColorService.dark?m.HIGH_CONTRAST_DARK:m.HIGH_CONTRAST_LIGHT;if(this.configurationService.getValue(t.DETECT_COLOR_SCHEME))return this.hostColorService.dark?m.DARK:m.LIGHT}isDetectingColorScheme(){return this.configurationService.getValue(t.DETECT_COLOR_SCHEME)}getColorThemeSettingId(){const e=this.getPreferredColorScheme();return e?j[e]:t.COLOR_THEME}async setColorTheme(e,i){return await this.writeConfiguration(this.getColorThemeSettingId(),e.settingsId,i),e}async setFileIconTheme(e,i){return await this.writeConfiguration(t.FILE_ICON_THEME,e.settingsId,i),e}async setProductIconTheme(e,i){return await this.writeConfiguration(t.PRODUCT_ICON_THEME,e.settingsId,i),e}isDefaultColorTheme(){const e=this.configurationService.inspect(this.getColorThemeSettingId());return e&&e.default?.value===e.value}findAutoConfigurationTarget(e){const i=this.configurationService.inspect(e);if(S.isUndefined(i.workspaceFolderValue))if(S.isUndefined(i.workspaceValue)){if(!S.isUndefined(i.userRemote))return l.USER_REMOTE}else return l.WORKSPACE;else return l.WORKSPACE_FOLDER;return l.USER}async writeConfiguration(e,i,n){if(n===void 0||n==="preview")return;const h=this.configurationService.inspect(e);if(n==="auto")return this.configurationService.updateValue(e,i);if(n===l.USER){if(i===h.userValue)return Promise.resolve(void 0);if(i===h.defaultValue){if(S.isUndefined(h.userValue))return Promise.resolve(void 0);i=void 0}}else if((n===l.WORKSPACE||n===l.WORKSPACE_FOLDER||n===l.USER_REMOTE)&&i===h.value)return Promise.resolve(void 0);return this.configurationService.updateValue(e,i,n)}}export{C as COLOR_THEME_CONFIGURATION_SETTINGS_TAG,Ie as ThemeConfiguration,s as formatSettingAsLink,Te as updateColorThemeConfigurationSchemas,Se as updateFileIconThemeConfigurationSchemas,Ee as updateProductIconThemeConfigurationSchemas};
