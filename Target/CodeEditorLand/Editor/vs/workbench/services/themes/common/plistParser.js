function G(c){return q(c,null,null)}function q(c,R,l){let o=c.length,s=0,p=1,g=0;o>0&&c.charCodeAt(0)===65279&&(s=1);function T(e){if(l===null)s=s+e;else for(;e>0;)c.charCodeAt(s)===10?(s++,p++,g=0):(s++,g++),e--}function E(e){l===null?s=e:T(e-s)}function h(){for(;s<o;){let e=c.charCodeAt(s);if(e!==32&&e!==9&&e!==13&&e!==10)break;T(1)}}function d(e){return c.substr(s,e.length)===e?(T(e.length),!0):!1}function A(e){let r=c.indexOf(e,s);E(r!==-1?r+e.length:o)}function I(e){let r=c.indexOf(e,s);if(r!==-1){let a=c.substring(s,r);return E(r+e.length),a}else{let a=c.substr(s);return E(o),a}}let i=0,t=null,_=[],D=[],n=null;function S(e,r){_.push(i),D.push(t),i=e,t=r}function y(){if(_.length===0)return u("illegal state stack");i=_.pop(),t=D.pop()}function u(e){throw new Error("Near offset "+s+": "+e+" ~~~"+c.substr(s,50)+"~~~")}let C={enterDict:function(){if(n===null)return u("missing <key>");let e={};l!==null&&(e[l]={filename:R,line:p,char:g}),t[n]=e,n=null,S(1,e)},enterArray:function(){if(n===null)return u("missing <key>");let e=[];t[n]=e,n=null,S(2,e)}},k={enterDict:function(){let e={};l!==null&&(e[l]={filename:R,line:p,char:g}),t.push(e),S(1,e)},enterArray:function(){let e=[];t.push(e),S(2,e)}};function b(){i===1?C.enterDict():i===2?k.enterDict():(t={},l!==null&&(t[l]={filename:R,line:p,char:g}),S(1,t))}function m(){if(i===1)y();else return u("unexpected </dict>")}function w(){i===1?C.enterArray():i===2?k.enterArray():(t=[],S(2,t))}function x(){if(i===1)return u("unexpected </array>");if(i===2)y();else return u("unexpected </array>")}function L(e){if(i===1){if(n!==null)return u("too many <key>");n=e}else return u("unexpected <key>")}function N(e){if(i===1){if(n===null)return u("missing <key>");t[n]=e,n=null}else i===2?t.push(e):t=e}function P(e){if(isNaN(e))return u("cannot parse float");if(i===1){if(n===null)return u("missing <key>");t[n]=e,n=null}else i===2?t.push(e):t=e}function M(e){if(isNaN(e))return u("cannot parse integer");if(i===1){if(n===null)return u("missing <key>");t[n]=e,n=null}else i===2?t.push(e):t=e}function B(e){if(i===1){if(n===null)return u("missing <key>");t[n]=e,n=null}else i===2?t.push(e):t=e}function U(e){if(i===1){if(n===null)return u("missing <key>");t[n]=e,n=null}else i===2?t.push(e):t=e}function O(e){if(i===1){if(n===null)return u("missing <key>");t[n]=e,n=null}else i===2?t.push(e):t=e}function H(e){return e.replace(/&#([0-9]+);/g,function(r,a){return String.fromCodePoint(parseInt(a,10))}).replace(/&#x([0-9a-f]+);/g,function(r,a){return String.fromCodePoint(parseInt(a,16))}).replace(/&amp;|&lt;|&gt;|&quot;|&apos;/g,function(r){switch(r){case"&amp;":return"&";case"&lt;":return"<";case"&gt;":return">";case"&quot;":return'"';case"&apos;":return"'"}return r})}function F(){let e=I(">"),r=!1;return e.charCodeAt(e.length-1)===47&&(r=!0,e=e.substring(0,e.length-1)),{name:e.trim(),isClosed:r}}function f(e){if(e.isClosed)return"";let r=I("</");return A(">"),H(r)}for(;s<o&&(h(),!(s>=o));){let e=c.charCodeAt(s);if(T(1),e!==60)return u("expected <");if(s>=o)return u("unexpected end of input");let r=c.charCodeAt(s);if(r===63){T(1),A("?>");continue}if(r===33){if(T(1),d("--")){A("-->");continue}A(">");continue}if(r===47){if(T(1),h(),d("plist")){A(">");continue}if(d("dict")){A(">"),m();continue}if(d("array")){A(">"),x();continue}return u("unexpected closed tag")}let a=F();switch(a.name){case"dict":b(),a.isClosed&&m();continue;case"array":w(),a.isClosed&&x();continue;case"key":L(f(a));continue;case"string":N(f(a));continue;case"real":P(parseFloat(f(a)));continue;case"integer":M(parseInt(f(a),10));continue;case"date":B(new Date(f(a)));continue;case"data":U(f(a));continue;case"true":f(a),O(!0);continue;case"false":f(a),O(!1);continue}if(!/^plist/.test(a.name))return u("unexpected opened tag "+a.name)}return t}export{G as parse};
