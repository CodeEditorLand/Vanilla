{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/themes/common/tokenClassificationExtensionPoint.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as nls from \"../../../../nls.js\";\nimport {\n\ttype ITokenClassificationRegistry,\n\tgetTokenClassificationRegistry,\n\ttypeAndModifierIdPattern,\n} from \"../../../../platform/theme/common/tokenClassificationRegistry.js\";\nimport {\n\ttype ExtensionMessageCollector,\n\tExtensionsRegistry,\n} from \"../../extensions/common/extensionsRegistry.js\";\n\ninterface ITokenTypeExtensionPoint {\n\tid: string;\n\tdescription: string;\n\tsuperType?: string;\n}\n\ninterface ITokenModifierExtensionPoint {\n\tid: string;\n\tdescription: string;\n}\n\ninterface ITokenStyleDefaultExtensionPoint {\n\tlanguage?: string;\n\tscopes: { [selector: string]: string[] };\n}\n\nconst tokenClassificationRegistry: ITokenClassificationRegistry =\n\tgetTokenClassificationRegistry();\n\nconst tokenTypeExtPoint = ExtensionsRegistry.registerExtensionPoint<\n\tITokenTypeExtensionPoint[]\n>({\n\textensionPoint: \"semanticTokenTypes\",\n\tjsonSchema: {\n\t\tdescription: nls.localize(\n\t\t\t\"contributes.semanticTokenTypes\",\n\t\t\t\"Contributes semantic token types.\",\n\t\t),\n\t\ttype: \"array\",\n\t\titems: {\n\t\t\ttype: \"object\",\n\t\t\tproperties: {\n\t\t\t\tid: {\n\t\t\t\t\ttype: \"string\",\n\t\t\t\t\tdescription: nls.localize(\n\t\t\t\t\t\t\"contributes.semanticTokenTypes.id\",\n\t\t\t\t\t\t\"The identifier of the semantic token type\",\n\t\t\t\t\t),\n\t\t\t\t\tpattern: typeAndModifierIdPattern,\n\t\t\t\t\tpatternErrorMessage: nls.localize(\n\t\t\t\t\t\t\"contributes.semanticTokenTypes.id.format\",\n\t\t\t\t\t\t\"Identifiers should be in the form letterOrDigit[_-letterOrDigit]*\",\n\t\t\t\t\t),\n\t\t\t\t},\n\t\t\t\tsuperType: {\n\t\t\t\t\ttype: \"string\",\n\t\t\t\t\tdescription: nls.localize(\n\t\t\t\t\t\t\"contributes.semanticTokenTypes.superType\",\n\t\t\t\t\t\t\"The super type of the semantic token type\",\n\t\t\t\t\t),\n\t\t\t\t\tpattern: typeAndModifierIdPattern,\n\t\t\t\t\tpatternErrorMessage: nls.localize(\n\t\t\t\t\t\t\"contributes.semanticTokenTypes.superType.format\",\n\t\t\t\t\t\t\"Super types should be in the form letterOrDigit[_-letterOrDigit]*\",\n\t\t\t\t\t),\n\t\t\t\t},\n\t\t\t\tdescription: {\n\t\t\t\t\ttype: \"string\",\n\t\t\t\t\tdescription: nls.localize(\n\t\t\t\t\t\t\"contributes.color.description\",\n\t\t\t\t\t\t\"The description of the semantic token type\",\n\t\t\t\t\t),\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t},\n});\n\nconst tokenModifierExtPoint = ExtensionsRegistry.registerExtensionPoint<\n\tITokenModifierExtensionPoint[]\n>({\n\textensionPoint: \"semanticTokenModifiers\",\n\tjsonSchema: {\n\t\tdescription: nls.localize(\n\t\t\t\"contributes.semanticTokenModifiers\",\n\t\t\t\"Contributes semantic token modifiers.\",\n\t\t),\n\t\ttype: \"array\",\n\t\titems: {\n\t\t\ttype: \"object\",\n\t\t\tproperties: {\n\t\t\t\tid: {\n\t\t\t\t\ttype: \"string\",\n\t\t\t\t\tdescription: nls.localize(\n\t\t\t\t\t\t\"contributes.semanticTokenModifiers.id\",\n\t\t\t\t\t\t\"The identifier of the semantic token modifier\",\n\t\t\t\t\t),\n\t\t\t\t\tpattern: typeAndModifierIdPattern,\n\t\t\t\t\tpatternErrorMessage: nls.localize(\n\t\t\t\t\t\t\"contributes.semanticTokenModifiers.id.format\",\n\t\t\t\t\t\t\"Identifiers should be in the form letterOrDigit[_-letterOrDigit]*\",\n\t\t\t\t\t),\n\t\t\t\t},\n\t\t\t\tdescription: {\n\t\t\t\t\tdescription: nls.localize(\n\t\t\t\t\t\t\"contributes.semanticTokenModifiers.description\",\n\t\t\t\t\t\t\"The description of the semantic token modifier\",\n\t\t\t\t\t),\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t},\n});\n\nconst tokenStyleDefaultsExtPoint = ExtensionsRegistry.registerExtensionPoint<\n\tITokenStyleDefaultExtensionPoint[]\n>({\n\textensionPoint: \"semanticTokenScopes\",\n\tjsonSchema: {\n\t\tdescription: nls.localize(\n\t\t\t\"contributes.semanticTokenScopes\",\n\t\t\t\"Contributes semantic token scope maps.\",\n\t\t),\n\t\ttype: \"array\",\n\t\titems: {\n\t\t\ttype: \"object\",\n\t\t\tproperties: {\n\t\t\t\tlanguage: {\n\t\t\t\t\tdescription: nls.localize(\n\t\t\t\t\t\t\"contributes.semanticTokenScopes.languages\",\n\t\t\t\t\t\t\"Lists the languge for which the defaults are.\",\n\t\t\t\t\t),\n\t\t\t\t\ttype: \"string\",\n\t\t\t\t},\n\t\t\t\tscopes: {\n\t\t\t\t\tdescription: nls.localize(\n\t\t\t\t\t\t\"contributes.semanticTokenScopes.scopes\",\n\t\t\t\t\t\t\"Maps a semantic token (described by semantic token selector) to one or more textMate scopes used to represent that token.\",\n\t\t\t\t\t),\n\t\t\t\t\ttype: \"object\",\n\t\t\t\t\tadditionalProperties: {\n\t\t\t\t\t\ttype: \"array\",\n\t\t\t\t\t\titems: {\n\t\t\t\t\t\t\ttype: \"string\",\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t},\n});\n\nexport class TokenClassificationExtensionPoints {\n\tconstructor() {\n\t\tfunction validateTypeOrModifier(\n\t\t\tcontribution:\n\t\t\t\t| ITokenTypeExtensionPoint\n\t\t\t\t| ITokenModifierExtensionPoint,\n\t\t\textensionPoint: string,\n\t\t\tcollector: ExtensionMessageCollector,\n\t\t): boolean {\n\t\t\tif (\n\t\t\t\ttypeof contribution.id !== \"string\" ||\n\t\t\t\tcontribution.id.length === 0\n\t\t\t) {\n\t\t\t\tcollector.error(\n\t\t\t\t\tnls.localize(\n\t\t\t\t\t\t\"invalid.id\",\n\t\t\t\t\t\t\"'configuration.{0}.id' must be defined and can not be empty\",\n\t\t\t\t\t\textensionPoint,\n\t\t\t\t\t),\n\t\t\t\t);\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tif (!contribution.id.match(typeAndModifierIdPattern)) {\n\t\t\t\tcollector.error(\n\t\t\t\t\tnls.localize(\n\t\t\t\t\t\t\"invalid.id.format\",\n\t\t\t\t\t\t\"'configuration.{0}.id' must follow the pattern letterOrDigit[-_letterOrDigit]*\",\n\t\t\t\t\t\textensionPoint,\n\t\t\t\t\t),\n\t\t\t\t);\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tconst superType = (contribution as ITokenTypeExtensionPoint)\n\t\t\t\t.superType;\n\t\t\tif (superType && !superType.match(typeAndModifierIdPattern)) {\n\t\t\t\tcollector.error(\n\t\t\t\t\tnls.localize(\n\t\t\t\t\t\t\"invalid.superType.format\",\n\t\t\t\t\t\t\"'configuration.{0}.superType' must follow the pattern letterOrDigit[-_letterOrDigit]*\",\n\t\t\t\t\t\textensionPoint,\n\t\t\t\t\t),\n\t\t\t\t);\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tif (\n\t\t\t\ttypeof contribution.description !== \"string\" ||\n\t\t\t\tcontribution.id.length === 0\n\t\t\t) {\n\t\t\t\tcollector.error(\n\t\t\t\t\tnls.localize(\n\t\t\t\t\t\t\"invalid.description\",\n\t\t\t\t\t\t\"'configuration.{0}.description' must be defined and can not be empty\",\n\t\t\t\t\t\textensionPoint,\n\t\t\t\t\t),\n\t\t\t\t);\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\treturn true;\n\t\t}\n\n\t\ttokenTypeExtPoint.setHandler((extensions, delta) => {\n\t\t\tfor (const extension of delta.added) {\n\t\t\t\tconst extensionValue = <ITokenTypeExtensionPoint[]>(\n\t\t\t\t\textension.value\n\t\t\t\t);\n\t\t\t\tconst collector = extension.collector;\n\n\t\t\t\tif (!extensionValue || !Array.isArray(extensionValue)) {\n\t\t\t\t\tcollector.error(\n\t\t\t\t\t\tnls.localize(\n\t\t\t\t\t\t\t\"invalid.semanticTokenTypeConfiguration\",\n\t\t\t\t\t\t\t\"'configuration.semanticTokenType' must be an array\",\n\t\t\t\t\t\t),\n\t\t\t\t\t);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tfor (const contribution of extensionValue) {\n\t\t\t\t\tif (\n\t\t\t\t\t\tvalidateTypeOrModifier(\n\t\t\t\t\t\t\tcontribution,\n\t\t\t\t\t\t\t\"semanticTokenType\",\n\t\t\t\t\t\t\tcollector,\n\t\t\t\t\t\t)\n\t\t\t\t\t) {\n\t\t\t\t\t\ttokenClassificationRegistry.registerTokenType(\n\t\t\t\t\t\t\tcontribution.id,\n\t\t\t\t\t\t\tcontribution.description,\n\t\t\t\t\t\t\tcontribution.superType,\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tfor (const extension of delta.removed) {\n\t\t\t\tconst extensionValue = <ITokenTypeExtensionPoint[]>(\n\t\t\t\t\textension.value\n\t\t\t\t);\n\t\t\t\tfor (const contribution of extensionValue) {\n\t\t\t\t\ttokenClassificationRegistry.deregisterTokenType(\n\t\t\t\t\t\tcontribution.id,\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\ttokenModifierExtPoint.setHandler((extensions, delta) => {\n\t\t\tfor (const extension of delta.added) {\n\t\t\t\tconst extensionValue = <ITokenModifierExtensionPoint[]>(\n\t\t\t\t\textension.value\n\t\t\t\t);\n\t\t\t\tconst collector = extension.collector;\n\n\t\t\t\tif (!extensionValue || !Array.isArray(extensionValue)) {\n\t\t\t\t\tcollector.error(\n\t\t\t\t\t\tnls.localize(\n\t\t\t\t\t\t\t\"invalid.semanticTokenModifierConfiguration\",\n\t\t\t\t\t\t\t\"'configuration.semanticTokenModifier' must be an array\",\n\t\t\t\t\t\t),\n\t\t\t\t\t);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tfor (const contribution of extensionValue) {\n\t\t\t\t\tif (\n\t\t\t\t\t\tvalidateTypeOrModifier(\n\t\t\t\t\t\t\tcontribution,\n\t\t\t\t\t\t\t\"semanticTokenModifier\",\n\t\t\t\t\t\t\tcollector,\n\t\t\t\t\t\t)\n\t\t\t\t\t) {\n\t\t\t\t\t\ttokenClassificationRegistry.registerTokenModifier(\n\t\t\t\t\t\t\tcontribution.id,\n\t\t\t\t\t\t\tcontribution.description,\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tfor (const extension of delta.removed) {\n\t\t\t\tconst extensionValue = <ITokenModifierExtensionPoint[]>(\n\t\t\t\t\textension.value\n\t\t\t\t);\n\t\t\t\tfor (const contribution of extensionValue) {\n\t\t\t\t\ttokenClassificationRegistry.deregisterTokenModifier(\n\t\t\t\t\t\tcontribution.id,\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\ttokenStyleDefaultsExtPoint.setHandler((extensions, delta) => {\n\t\t\tfor (const extension of delta.added) {\n\t\t\t\tconst extensionValue = <ITokenStyleDefaultExtensionPoint[]>(\n\t\t\t\t\textension.value\n\t\t\t\t);\n\t\t\t\tconst collector = extension.collector;\n\n\t\t\t\tif (!extensionValue || !Array.isArray(extensionValue)) {\n\t\t\t\t\tcollector.error(\n\t\t\t\t\t\tnls.localize(\n\t\t\t\t\t\t\t\"invalid.semanticTokenScopes.configuration\",\n\t\t\t\t\t\t\t\"'configuration.semanticTokenScopes' must be an array\",\n\t\t\t\t\t\t),\n\t\t\t\t\t);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tfor (const contribution of extensionValue) {\n\t\t\t\t\tif (\n\t\t\t\t\t\tcontribution.language &&\n\t\t\t\t\t\ttypeof contribution.language !== \"string\"\n\t\t\t\t\t) {\n\t\t\t\t\t\tcollector.error(\n\t\t\t\t\t\t\tnls.localize(\n\t\t\t\t\t\t\t\t\"invalid.semanticTokenScopes.language\",\n\t\t\t\t\t\t\t\t\"'configuration.semanticTokenScopes.language' must be a string\",\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t);\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\tif (\n\t\t\t\t\t\t!contribution.scopes ||\n\t\t\t\t\t\ttypeof contribution.scopes !== \"object\"\n\t\t\t\t\t) {\n\t\t\t\t\t\tcollector.error(\n\t\t\t\t\t\t\tnls.localize(\n\t\t\t\t\t\t\t\t\"invalid.semanticTokenScopes.scopes\",\n\t\t\t\t\t\t\t\t\"'configuration.semanticTokenScopes.scopes' must be defined as an object\",\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t);\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\tfor (const selectorString in contribution.scopes) {\n\t\t\t\t\t\tconst tmScopes = contribution.scopes[selectorString];\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t!Array.isArray(tmScopes) ||\n\t\t\t\t\t\t\ttmScopes.some((l) => typeof l !== \"string\")\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\tcollector.error(\n\t\t\t\t\t\t\t\tnls.localize(\n\t\t\t\t\t\t\t\t\t\"invalid.semanticTokenScopes.scopes.value\",\n\t\t\t\t\t\t\t\t\t\"'configuration.semanticTokenScopes.scopes' values must be an array of strings\",\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tconst selector =\n\t\t\t\t\t\t\t\ttokenClassificationRegistry.parseTokenSelector(\n\t\t\t\t\t\t\t\t\tselectorString,\n\t\t\t\t\t\t\t\t\tcontribution.language,\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\ttokenClassificationRegistry.registerTokenStyleDefault(\n\t\t\t\t\t\t\t\tselector,\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tscopesToProbe: tmScopes.map((s) =>\n\t\t\t\t\t\t\t\t\t\ts.split(\" \"),\n\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\t\tcollector.error(\n\t\t\t\t\t\t\t\tnls.localize(\n\t\t\t\t\t\t\t\t\t\"invalid.semanticTokenScopes.scopes.selector\",\n\t\t\t\t\t\t\t\t\t\"configuration.semanticTokenScopes.scopes': Problems parsing selector {0}.\",\n\t\t\t\t\t\t\t\t\tselectorString,\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t// invalid selector, ignore\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tfor (const extension of delta.removed) {\n\t\t\t\tconst extensionValue = <ITokenStyleDefaultExtensionPoint[]>(\n\t\t\t\t\textension.value\n\t\t\t\t);\n\t\t\t\tfor (const contribution of extensionValue) {\n\t\t\t\t\tfor (const selectorString in contribution.scopes) {\n\t\t\t\t\t\tconst tmScopes = contribution.scopes[selectorString];\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tconst selector =\n\t\t\t\t\t\t\t\ttokenClassificationRegistry.parseTokenSelector(\n\t\t\t\t\t\t\t\t\tselectorString,\n\t\t\t\t\t\t\t\t\tcontribution.language,\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\ttokenClassificationRegistry.registerTokenStyleDefault(\n\t\t\t\t\t\t\t\tselector,\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tscopesToProbe: tmScopes.map((s) =>\n\t\t\t\t\t\t\t\t\t\ts.split(\" \"),\n\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\t\t// invalid selector, ignore\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
