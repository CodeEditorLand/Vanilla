import*as t from"../../../../nls.js";import{ExtensionsRegistry as m}from"../../extensions/common/extensionsRegistry.js";import{Extensions as C}from"../../../../platform/theme/common/colorRegistry.js";import{Color as h}from"../../../../base/common/color.js";import{Registry as g}from"../../../../platform/registry/common/platform.js";import{Disposable as y}from"../../../../base/common/lifecycle.js";import{Extensions as b}from"../../extensionManagement/common/extensionFeatures.js";import{SyncDescriptor as x}from"../../../../platform/instantiation/common/descriptors.js";import{MarkdownString as d}from"../../../../base/common/htmlContent.js";const f=g.as(C.ColorContribution),c=f.getColorReferenceSchema(),u="^\\w+[.\\w+]*$",R=m.registerExtensionPoint({extensionPoint:"colors",jsonSchema:{description:t.localize("contributes.color","Contributes extension defined themable colors"),type:"array",items:{type:"object",properties:{id:{type:"string",description:t.localize("contributes.color.id","The identifier of the themable color"),pattern:u,patternErrorMessage:t.localize("contributes.color.id.format","Identifiers must only contain letters, digits and dots and can not start with a dot")},description:{type:"string",description:t.localize("contributes.color.description","The description of the themable color")},defaults:{type:"object",properties:{light:{description:t.localize("contributes.defaults.light","The default color for light themes. Either a color value in hex (#RRGGBB[AA]) or the identifier of a themable color which provides the default."),type:"string",anyOf:[c,{type:"string",format:"color-hex"}]},dark:{description:t.localize("contributes.defaults.dark","The default color for dark themes. Either a color value in hex (#RRGGBB[AA]) or the identifier of a themable color which provides the default."),type:"string",anyOf:[c,{type:"string",format:"color-hex"}]},highContrast:{description:t.localize("contributes.defaults.highContrast","The default color for high contrast dark themes. Either a color value in hex (#RRGGBB[AA]) or the identifier of a themable color which provides the default. If not provided, the `dark` color is used as default for high contrast dark themes."),type:"string",anyOf:[c,{type:"string",format:"color-hex"}]},highContrastLight:{description:t.localize("contributes.defaults.highContrastLight","The default color for high contrast light themes. Either a color value in hex (#RRGGBB[AA]) or the identifier of a themable color which provides the default. If not provided, the `light` color is used as default for high contrast light themes."),type:"string",anyOf:[c,{type:"string",format:"color-hex"}]}},required:["light","dark"]}}}}});class ${constructor(){R.setHandler((l,s)=>{for(const a of s.added){const n=a.value,i=a.collector;if(!n||!Array.isArray(n)){i.error(t.localize("invalid.colorConfiguration","'configuration.colors' must be a array"));return}const e=(r,o)=>r.length>0?r[0]==="#"?h.Format.CSS.parseHex(r):r:(i.error(t.localize("invalid.default.colorType","{0} must be either a color value in hex (#RRGGBB[AA] or #RGB[A]) or the identifier of a themable color which provides the default.",o)),h.red);for(const r of n){if(typeof r.id!="string"||r.id.length===0){i.error(t.localize("invalid.id","'configuration.colors.id' must be defined and can not be empty"));return}if(!r.id.match(u)){i.error(t.localize("invalid.id.format","'configuration.colors.id' must only contain letters, digits and dots and can not start with a dot"));return}if(typeof r.description!="string"||r.id.length===0){i.error(t.localize("invalid.description","'configuration.colors.description' must be defined and can not be empty"));return}const o=r.defaults;if(!o||typeof o!="object"||typeof o.light!="string"||typeof o.dark!="string"){i.error(t.localize("invalid.defaults","'configuration.colors.defaults' must be defined and must contain 'light' and 'dark'"));return}if(o.highContrast&&typeof o.highContrast!="string"){i.error(t.localize("invalid.defaults.highContrast","If defined, 'configuration.colors.defaults.highContrast' must be a string."));return}if(o.highContrastLight&&typeof o.highContrastLight!="string"){i.error(t.localize("invalid.defaults.highContrastLight","If defined, 'configuration.colors.defaults.highContrastLight' must be a string."));return}f.registerColor(r.id,{light:e(o.light,"configuration.colors.defaults.light"),dark:e(o.dark,"configuration.colors.defaults.dark"),hcDark:e(o.highContrast??o.dark,"configuration.colors.defaults.highContrast"),hcLight:e(o.highContrastLight??o.light,"configuration.colors.defaults.highContrastLight")},r.description)}}for(const a of s.removed){const n=a.value;for(const i of n)f.deregisterColor(i.id)}})}}class I extends y{type="table";shouldRender(l){return!!l.contributes?.colors}render(l){const s=l.contributes?.colors||[];if(!s.length)return{data:{headers:[],rows:[]},dispose:()=>{}};const a=[t.localize("id","ID"),t.localize("description","Description"),t.localize("defaultDark","Dark Default"),t.localize("defaultLight","Light Default"),t.localize("defaultHC","High Contrast Default")],n=e=>e[0]==="#"?h.fromHex(e):void 0,i=s.sort((e,r)=>e.id.localeCompare(r.id)).map(e=>[new d().appendMarkdown(`\`${e.id}\``),e.description,n(e.defaults.dark)??new d().appendMarkdown(`\`${e.defaults.dark}\``),n(e.defaults.light)??new d().appendMarkdown(`\`${e.defaults.light}\``),n(e.defaults.highContrast)??new d().appendMarkdown(`\`${e.defaults.highContrast}\``)]);return{data:{headers:a,rows:i},dispose:()=>{}}}}g.as(b.ExtensionFeaturesRegistry).registerExtensionFeature({id:"colors",label:t.localize("colors","Colors"),access:{canToggle:!1},renderer:new x(I)});export{$ as ColorExtensionPoint};
