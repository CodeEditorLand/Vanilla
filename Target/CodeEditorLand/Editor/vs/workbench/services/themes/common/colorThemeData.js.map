{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/themes/common/colorThemeData.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CharCode } from \"../../../../base/common/charCode.js\";\nimport { Color } from \"../../../../base/common/color.js\";\nimport * as Json from \"../../../../base/common/json.js\";\nimport { getParseErrorMessage } from \"../../../../base/common/jsonErrorMessages.js\";\nimport { basename } from \"../../../../base/common/path.js\";\nimport * as resources from \"../../../../base/common/resources.js\";\nimport * as types from \"../../../../base/common/types.js\";\nimport type { URI } from \"../../../../base/common/uri.js\";\nimport * as nls from \"../../../../nls.js\";\nimport type { IExtensionResourceLoaderService } from \"../../../../platform/extensionResourceLoader/common/extensionResourceLoader.js\";\nimport { Registry } from \"../../../../platform/registry/common/platform.js\";\nimport {\n\ttype IStorageService,\n\tStorageScope,\n\tStorageTarget,\n} from \"../../../../platform/storage/common/storage.js\";\nimport {\n\ttype ColorIdentifier,\n\tExtensions as ColorRegistryExtensions,\n\tDEFAULT_COLOR_CONFIG_VALUE,\n\ttype IColorRegistry,\n\teditorBackground,\n\teditorForeground,\n} from \"../../../../platform/theme/common/colorRegistry.js\";\nimport { ColorScheme } from \"../../../../platform/theme/common/theme.js\";\nimport {\n\ttype ITokenStyle,\n\tgetThemeTypeSelector,\n} from \"../../../../platform/theme/common/themeService.js\";\nimport {\n\ttype ProbeScope,\n\tSemanticTokenRule,\n\tTokenStyle,\n\ttype TokenStyleData,\n\ttype TokenStyleValue,\n\tgetTokenClassificationRegistry,\n\tparseClassifierString,\n} from \"../../../../platform/theme/common/tokenClassificationRegistry.js\";\nimport { parse as parsePList } from \"./plistParser.js\";\nimport {\n\ttype Matcher,\n\ttype MatcherWithPriority,\n\tcreateMatchers,\n} from \"./textMateScopeMatcher.js\";\nimport { convertSettings } from \"./themeCompatibility.js\";\nimport type { ThemeConfiguration } from \"./themeConfiguration.js\";\nimport {\n\tExtensionData,\n\ttype IColorCustomizations,\n\ttype IColorMap,\n\ttype ISemanticTokenColorCustomizations,\n\ttype ISemanticTokenColorizationSetting,\n\ttype ISemanticTokenRules,\n\ttype ITextMateThemingRule,\n\ttype IThemeExtensionPoint,\n\ttype IThemeScopableCustomizations,\n\ttype IThemeScopedCustomizations,\n\ttype ITokenColorCustomizations,\n\ttype IWorkbenchColorTheme,\n\tTHEME_SCOPE_CLOSE_PAREN,\n\tTHEME_SCOPE_OPEN_PAREN,\n\tTHEME_SCOPE_WILDCARD,\n\tVS_HC_LIGHT_THEME,\n\tVS_HC_THEME,\n\tVS_LIGHT_THEME,\n\tthemeScopeRegex,\n} from \"./workbenchThemeService.js\";\n\nconst colorRegistry = Registry.as<IColorRegistry>(\n\tColorRegistryExtensions.ColorContribution,\n);\n\nconst tokenClassificationRegistry = getTokenClassificationRegistry();\n\nconst tokenGroupToScopesMap = {\n\tcomments: [\"comment\", \"punctuation.definition.comment\"],\n\tstrings: [\"string\", \"meta.embedded.assembly\"],\n\tkeywords: [\n\t\t\"keyword - keyword.operator\",\n\t\t\"keyword.control\",\n\t\t\"storage\",\n\t\t\"storage.type\",\n\t],\n\tnumbers: [\"constant.numeric\"],\n\ttypes: [\n\t\t\"entity.name.type\",\n\t\t\"entity.name.class\",\n\t\t\"support.type\",\n\t\t\"support.class\",\n\t],\n\tfunctions: [\"entity.name.function\", \"support.function\"],\n\tvariables: [\"variable\", \"entity.name.variable\"],\n};\n\nexport type TokenStyleDefinition =\n\t| SemanticTokenRule\n\t| ProbeScope[]\n\t| TokenStyleValue;\nexport type TokenStyleDefinitions = {\n\t[P in keyof TokenStyleData]?: TokenStyleDefinition | undefined;\n};\n\nexport type TextMateThemingRuleDefinitions = {\n\t[P in keyof TokenStyleData]?: ITextMateThemingRule | undefined;\n} & { scope?: ProbeScope };\n\ninterface IColorOrDefaultMap {\n\t[id: string]: Color | typeof DEFAULT_COLOR_CONFIG_VALUE;\n}\n\nexport class ColorThemeData implements IWorkbenchColorTheme {\n\tstatic readonly STORAGE_KEY = \"colorThemeData\";\n\n\tid: string;\n\tlabel: string;\n\tsettingsId: string;\n\tdescription?: string;\n\tisLoaded: boolean;\n\tlocation?: URI; // only set for extension from the registry, not for themes restored from the storage\n\twatch?: boolean;\n\textensionData?: ExtensionData;\n\n\tprivate themeSemanticHighlighting: boolean | undefined;\n\tprivate customSemanticHighlighting: boolean | undefined;\n\tprivate customSemanticHighlightingDeprecated: boolean | undefined;\n\n\tprivate themeTokenColors: ITextMateThemingRule[] = [];\n\tprivate customTokenColors: ITextMateThemingRule[] = [];\n\tprivate colorMap: IColorMap = {};\n\tprivate customColorMap: IColorOrDefaultMap = {};\n\n\tprivate semanticTokenRules: SemanticTokenRule[] = [];\n\tprivate customSemanticTokenRules: SemanticTokenRule[] = [];\n\n\tprivate themeTokenScopeMatchers: Matcher<ProbeScope>[] | undefined;\n\tprivate customTokenScopeMatchers: Matcher<ProbeScope>[] | undefined;\n\n\tprivate textMateThemingRules: ITextMateThemingRule[] | undefined =\n\t\tundefined; // created on demand\n\tprivate tokenColorIndex: TokenColorIndex | undefined = undefined; // created on demand\n\n\tprivate constructor(id: string, label: string, settingsId: string) {\n\t\tthis.id = id;\n\t\tthis.label = label;\n\t\tthis.settingsId = settingsId;\n\t\tthis.isLoaded = false;\n\t}\n\n\tget semanticHighlighting(): boolean {\n\t\tif (this.customSemanticHighlighting !== undefined) {\n\t\t\treturn this.customSemanticHighlighting;\n\t\t}\n\t\tif (this.customSemanticHighlightingDeprecated !== undefined) {\n\t\t\treturn this.customSemanticHighlightingDeprecated;\n\t\t}\n\t\treturn !!this.themeSemanticHighlighting;\n\t}\n\n\tget tokenColors(): ITextMateThemingRule[] {\n\t\tif (!this.textMateThemingRules) {\n\t\t\tconst result: ITextMateThemingRule[] = [];\n\n\t\t\t// the default rule (scope empty) is always the first rule. Ignore all other default rules.\n\t\t\tconst foreground =\n\t\t\t\tthis.getColor(editorForeground) ||\n\t\t\t\tthis.getDefault(editorForeground)!;\n\t\t\tconst background =\n\t\t\t\tthis.getColor(editorBackground) ||\n\t\t\t\tthis.getDefault(editorBackground)!;\n\t\t\tresult.push({\n\t\t\t\tsettings: {\n\t\t\t\t\tforeground: normalizeColor(foreground),\n\t\t\t\t\tbackground: normalizeColor(background),\n\t\t\t\t},\n\t\t\t});\n\n\t\t\tlet hasDefaultTokens = false;\n\n\t\t\tfunction addRule(rule: ITextMateThemingRule) {\n\t\t\t\tif (rule.scope && rule.settings) {\n\t\t\t\t\tif (rule.scope === \"token.info-token\") {\n\t\t\t\t\t\thasDefaultTokens = true;\n\t\t\t\t\t}\n\t\t\t\t\tresult.push({\n\t\t\t\t\t\tscope: rule.scope,\n\t\t\t\t\t\tsettings: {\n\t\t\t\t\t\t\tforeground: normalizeColor(\n\t\t\t\t\t\t\t\trule.settings.foreground,\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\tbackground: normalizeColor(\n\t\t\t\t\t\t\t\trule.settings.background,\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\tfontStyle: rule.settings.fontStyle,\n\t\t\t\t\t\t},\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.themeTokenColors.forEach(addRule);\n\t\t\t// Add the custom colors after the theme colors\n\t\t\t// so that they will override them\n\t\t\tthis.customTokenColors.forEach(addRule);\n\n\t\t\tif (!hasDefaultTokens) {\n\t\t\t\tdefaultThemeColors[this.type].forEach(addRule);\n\t\t\t}\n\t\t\tthis.textMateThemingRules = result;\n\t\t}\n\t\treturn this.textMateThemingRules;\n\t}\n\n\tpublic getColor(\n\t\tcolorId: ColorIdentifier,\n\t\tuseDefault?: boolean,\n\t): Color | undefined {\n\t\tconst customColor = this.customColorMap[colorId];\n\t\tif (customColor instanceof Color) {\n\t\t\treturn customColor;\n\t\t}\n\t\tif (customColor === undefined) {\n\t\t\t/* !== DEFAULT_COLOR_CONFIG_VALUE */\n\t\t\tconst color = this.colorMap[colorId];\n\t\t\tif (color !== undefined) {\n\t\t\t\treturn color;\n\t\t\t}\n\t\t}\n\t\tif (useDefault !== false) {\n\t\t\treturn this.getDefault(colorId);\n\t\t}\n\t\treturn undefined;\n\t}\n\n\tprivate getTokenStyle(\n\t\ttype: string,\n\t\tmodifiers: string[],\n\t\tlanguage: string,\n\t\tuseDefault = true,\n\t\tdefinitions: TokenStyleDefinitions = {},\n\t): TokenStyle | undefined {\n\t\tconst result: any = {\n\t\t\tforeground: undefined,\n\t\t\tbold: undefined,\n\t\t\tunderline: undefined,\n\t\t\tstrikethrough: undefined,\n\t\t\titalic: undefined,\n\t\t};\n\t\tconst score = {\n\t\t\tforeground: -1,\n\t\t\tbold: -1,\n\t\t\tunderline: -1,\n\t\t\tstrikethrough: -1,\n\t\t\titalic: -1,\n\t\t};\n\n\t\tfunction _processStyle(\n\t\t\tmatchScore: number,\n\t\t\tstyle: TokenStyle,\n\t\t\tdefinition: TokenStyleDefinition,\n\t\t) {\n\t\t\tif (style.foreground && score.foreground <= matchScore) {\n\t\t\t\tscore.foreground = matchScore;\n\t\t\t\tresult.foreground = style.foreground;\n\t\t\t\tdefinitions.foreground = definition;\n\t\t\t}\n\t\t\tfor (const p of [\"bold\", \"underline\", \"strikethrough\", \"italic\"]) {\n\t\t\t\tconst property = p as keyof TokenStyle;\n\t\t\t\tconst info = style[property];\n\t\t\t\tif (info !== undefined) {\n\t\t\t\t\tif (score[property] <= matchScore) {\n\t\t\t\t\t\tscore[property] = matchScore;\n\t\t\t\t\t\tresult[property] = info;\n\t\t\t\t\t\tdefinitions[property] = definition;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tfunction _processSemanticTokenRule(rule: SemanticTokenRule) {\n\t\t\tconst matchScore = rule.selector.match(type, modifiers, language);\n\t\t\tif (matchScore >= 0) {\n\t\t\t\t_processStyle(matchScore, rule.style, rule);\n\t\t\t}\n\t\t}\n\n\t\tthis.semanticTokenRules.forEach(_processSemanticTokenRule);\n\t\tthis.customSemanticTokenRules.forEach(_processSemanticTokenRule);\n\n\t\tlet hasUndefinedStyleProperty = false;\n\t\tfor (const k in score) {\n\t\t\tconst key = k as keyof TokenStyle;\n\t\t\tif (score[key] === -1) {\n\t\t\t\thasUndefinedStyleProperty = true;\n\t\t\t} else {\n\t\t\t\tscore[key] = Number.MAX_VALUE; // set it to the max, so it won't be replaced by a default\n\t\t\t}\n\t\t}\n\t\tif (hasUndefinedStyleProperty) {\n\t\t\tfor (const rule of tokenClassificationRegistry.getTokenStylingDefaultRules()) {\n\t\t\t\tconst matchScore = rule.selector.match(\n\t\t\t\t\ttype,\n\t\t\t\t\tmodifiers,\n\t\t\t\t\tlanguage,\n\t\t\t\t);\n\t\t\t\tif (matchScore >= 0) {\n\t\t\t\t\tlet style: TokenStyle | undefined;\n\t\t\t\t\tif (rule.defaults.scopesToProbe) {\n\t\t\t\t\t\tstyle = this.resolveScopes(rule.defaults.scopesToProbe);\n\t\t\t\t\t\tif (style) {\n\t\t\t\t\t\t\t_processStyle(\n\t\t\t\t\t\t\t\tmatchScore,\n\t\t\t\t\t\t\t\tstyle,\n\t\t\t\t\t\t\t\trule.defaults.scopesToProbe,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (!style && useDefault !== false) {\n\t\t\t\t\t\tconst tokenStyleValue = rule.defaults[this.type];\n\t\t\t\t\t\tstyle = this.resolveTokenStyleValue(tokenStyleValue);\n\t\t\t\t\t\tif (style) {\n\t\t\t\t\t\t\t_processStyle(matchScore, style, tokenStyleValue!);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn TokenStyle.fromData(result);\n\t}\n\n\t/**\n\t * @param tokenStyleValue Resolve a tokenStyleValue in the context of a theme\n\t */\n\tpublic resolveTokenStyleValue(\n\t\ttokenStyleValue: TokenStyleValue | undefined,\n\t): TokenStyle | undefined {\n\t\tif (tokenStyleValue === undefined) {\n\t\t\treturn undefined;\n\t\t} else if (typeof tokenStyleValue === \"string\") {\n\t\t\tconst { type, modifiers, language } = parseClassifierString(\n\t\t\t\ttokenStyleValue,\n\t\t\t\t\"\",\n\t\t\t);\n\t\t\treturn this.getTokenStyle(type, modifiers, language);\n\t\t} else if (typeof tokenStyleValue === \"object\") {\n\t\t\treturn tokenStyleValue;\n\t\t}\n\t\treturn undefined;\n\t}\n\n\tpublic getTokenColorIndex(): TokenColorIndex {\n\t\t// collect all colors that tokens can have\n\t\tif (!this.tokenColorIndex) {\n\t\t\tconst index = new TokenColorIndex();\n\t\t\tthis.tokenColors.forEach((rule) => {\n\t\t\t\tindex.add(rule.settings.foreground);\n\t\t\t\tindex.add(rule.settings.background);\n\t\t\t});\n\n\t\t\tthis.semanticTokenRules.forEach((r) =>\n\t\t\t\tindex.add(r.style.foreground),\n\t\t\t);\n\t\t\ttokenClassificationRegistry\n\t\t\t\t.getTokenStylingDefaultRules()\n\t\t\t\t.forEach((r) => {\n\t\t\t\t\tconst defaultColor = r.defaults[this.type];\n\t\t\t\t\tif (defaultColor && typeof defaultColor === \"object\") {\n\t\t\t\t\t\tindex.add(defaultColor.foreground);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\tthis.customSemanticTokenRules.forEach((r) =>\n\t\t\t\tindex.add(r.style.foreground),\n\t\t\t);\n\n\t\t\tthis.tokenColorIndex = index;\n\t\t}\n\t\treturn this.tokenColorIndex;\n\t}\n\n\tpublic get tokenColorMap(): string[] {\n\t\treturn this.getTokenColorIndex().asArray();\n\t}\n\n\tpublic getTokenStyleMetadata(\n\t\ttypeWithLanguage: string,\n\t\tmodifiers: string[],\n\t\tdefaultLanguage: string,\n\t\tuseDefault = true,\n\t\tdefinitions: TokenStyleDefinitions = {},\n\t): ITokenStyle | undefined {\n\t\tconst { type, language } = parseClassifierString(\n\t\t\ttypeWithLanguage,\n\t\t\tdefaultLanguage,\n\t\t);\n\t\tconst style = this.getTokenStyle(\n\t\t\ttype,\n\t\t\tmodifiers,\n\t\t\tlanguage,\n\t\t\tuseDefault,\n\t\t\tdefinitions,\n\t\t);\n\t\tif (!style) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\treturn {\n\t\t\tforeground: this.getTokenColorIndex().get(style.foreground),\n\t\t\tbold: style.bold,\n\t\t\tunderline: style.underline,\n\t\t\tstrikethrough: style.strikethrough,\n\t\t\titalic: style.italic,\n\t\t};\n\t}\n\n\tpublic getTokenStylingRuleScope(\n\t\trule: SemanticTokenRule,\n\t): \"setting\" | \"theme\" | undefined {\n\t\tif (this.customSemanticTokenRules.indexOf(rule) !== -1) {\n\t\t\treturn \"setting\";\n\t\t}\n\t\tif (this.semanticTokenRules.indexOf(rule) !== -1) {\n\t\t\treturn \"theme\";\n\t\t}\n\t\treturn undefined;\n\t}\n\n\tpublic getDefault(colorId: ColorIdentifier): Color | undefined {\n\t\treturn colorRegistry.resolveDefaultColor(colorId, this);\n\t}\n\n\tpublic resolveScopes(\n\t\tscopes: ProbeScope[],\n\t\tdefinitions?: TextMateThemingRuleDefinitions,\n\t): TokenStyle | undefined {\n\t\tif (!this.themeTokenScopeMatchers) {\n\t\t\tthis.themeTokenScopeMatchers =\n\t\t\t\tthis.themeTokenColors.map(getScopeMatcher);\n\t\t}\n\t\tif (!this.customTokenScopeMatchers) {\n\t\t\tthis.customTokenScopeMatchers =\n\t\t\t\tthis.customTokenColors.map(getScopeMatcher);\n\t\t}\n\n\t\tfor (const scope of scopes) {\n\t\t\tlet foreground: string | undefined;\n\t\t\tlet fontStyle: string | undefined;\n\t\t\tlet foregroundScore = -1;\n\t\t\tlet fontStyleScore = -1;\n\t\t\tlet fontStyleThemingRule: ITextMateThemingRule | undefined;\n\t\t\tlet foregroundThemingRule: ITextMateThemingRule | undefined;\n\n\t\t\tfunction findTokenStyleForScopeInScopes(\n\t\t\t\tscopeMatchers: Matcher<ProbeScope>[],\n\t\t\t\tthemingRules: ITextMateThemingRule[],\n\t\t\t) {\n\t\t\t\tfor (let i = 0; i < scopeMatchers.length; i++) {\n\t\t\t\t\tconst score = scopeMatchers[i](scope);\n\t\t\t\t\tif (score >= 0) {\n\t\t\t\t\t\tconst themingRule = themingRules[i];\n\t\t\t\t\t\tconst settings = themingRules[i].settings;\n\t\t\t\t\t\tif (score >= foregroundScore && settings.foreground) {\n\t\t\t\t\t\t\tforeground = settings.foreground;\n\t\t\t\t\t\t\tforegroundScore = score;\n\t\t\t\t\t\t\tforegroundThemingRule = themingRule;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\tscore >= fontStyleScore &&\n\t\t\t\t\t\t\ttypes.isString(settings.fontStyle)\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\tfontStyle = settings.fontStyle;\n\t\t\t\t\t\t\tfontStyleScore = score;\n\t\t\t\t\t\t\tfontStyleThemingRule = themingRule;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tfindTokenStyleForScopeInScopes(\n\t\t\t\tthis.themeTokenScopeMatchers,\n\t\t\t\tthis.themeTokenColors,\n\t\t\t);\n\t\t\tfindTokenStyleForScopeInScopes(\n\t\t\t\tthis.customTokenScopeMatchers,\n\t\t\t\tthis.customTokenColors,\n\t\t\t);\n\t\t\tif (foreground !== undefined || fontStyle !== undefined) {\n\t\t\t\tif (definitions) {\n\t\t\t\t\tdefinitions.foreground = foregroundThemingRule;\n\t\t\t\t\tdefinitions.bold =\n\t\t\t\t\t\tdefinitions.italic =\n\t\t\t\t\t\tdefinitions.underline =\n\t\t\t\t\t\tdefinitions.strikethrough =\n\t\t\t\t\t\t\tfontStyleThemingRule;\n\t\t\t\t\tdefinitions.scope = scope;\n\t\t\t\t}\n\n\t\t\t\treturn TokenStyle.fromSettings(foreground, fontStyle);\n\t\t\t}\n\t\t}\n\t\treturn undefined;\n\t}\n\n\tpublic defines(colorId: ColorIdentifier): boolean {\n\t\tconst customColor = this.customColorMap[colorId];\n\t\tif (customColor instanceof Color) {\n\t\t\treturn true;\n\t\t}\n\t\treturn (\n\t\t\tcustomColor === undefined /* !== DEFAULT_COLOR_CONFIG_VALUE */ &&\n\t\t\tthis.colorMap.hasOwnProperty(colorId)\n\t\t);\n\t}\n\n\tpublic setCustomizations(settings: ThemeConfiguration) {\n\t\tthis.setCustomColors(settings.colorCustomizations);\n\t\tthis.setCustomTokenColors(settings.tokenColorCustomizations);\n\t\tthis.setCustomSemanticTokenColors(\n\t\t\tsettings.semanticTokenColorCustomizations,\n\t\t);\n\t}\n\n\tpublic setCustomColors(colors: IColorCustomizations) {\n\t\tthis.customColorMap = {};\n\t\tthis.overwriteCustomColors(colors);\n\n\t\tconst themeSpecificColors = this.getThemeSpecificColors(\n\t\t\tcolors,\n\t\t) as IColorCustomizations;\n\t\tif (types.isObject(themeSpecificColors)) {\n\t\t\tthis.overwriteCustomColors(themeSpecificColors);\n\t\t}\n\n\t\tthis.tokenColorIndex = undefined;\n\t\tthis.textMateThemingRules = undefined;\n\t\tthis.customTokenScopeMatchers = undefined;\n\t}\n\n\tprivate overwriteCustomColors(colors: IColorCustomizations) {\n\t\tfor (const id in colors) {\n\t\t\tconst colorVal = colors[id];\n\t\t\tif (colorVal === DEFAULT_COLOR_CONFIG_VALUE) {\n\t\t\t\tthis.customColorMap[id] = DEFAULT_COLOR_CONFIG_VALUE;\n\t\t\t} else if (typeof colorVal === \"string\") {\n\t\t\t\tthis.customColorMap[id] = Color.fromHex(colorVal);\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic setCustomTokenColors(customTokenColors: ITokenColorCustomizations) {\n\t\tthis.customTokenColors = [];\n\t\tthis.customSemanticHighlightingDeprecated = undefined;\n\n\t\t// first add the non-theme specific settings\n\t\tthis.addCustomTokenColors(customTokenColors);\n\n\t\t// append theme specific settings. Last rules will win.\n\t\tconst themeSpecificTokenColors = this.getThemeSpecificColors(\n\t\t\tcustomTokenColors,\n\t\t) as ITokenColorCustomizations;\n\t\tif (types.isObject(themeSpecificTokenColors)) {\n\t\t\tthis.addCustomTokenColors(themeSpecificTokenColors);\n\t\t}\n\n\t\tthis.tokenColorIndex = undefined;\n\t\tthis.textMateThemingRules = undefined;\n\t\tthis.customTokenScopeMatchers = undefined;\n\t}\n\n\tpublic setCustomSemanticTokenColors(\n\t\tsemanticTokenColors: ISemanticTokenColorCustomizations | undefined,\n\t) {\n\t\tthis.customSemanticTokenRules = [];\n\t\tthis.customSemanticHighlighting = undefined;\n\n\t\tif (semanticTokenColors) {\n\t\t\tthis.customSemanticHighlighting = semanticTokenColors.enabled;\n\t\t\tif (semanticTokenColors.rules) {\n\t\t\t\tthis.readSemanticTokenRules(semanticTokenColors.rules);\n\t\t\t}\n\t\t\tconst themeSpecificColors = this.getThemeSpecificColors(\n\t\t\t\tsemanticTokenColors,\n\t\t\t) as ISemanticTokenColorCustomizations;\n\t\t\tif (types.isObject(themeSpecificColors)) {\n\t\t\t\tif (themeSpecificColors.enabled !== undefined) {\n\t\t\t\t\tthis.customSemanticHighlighting =\n\t\t\t\t\t\tthemeSpecificColors.enabled;\n\t\t\t\t}\n\t\t\t\tif (themeSpecificColors.rules) {\n\t\t\t\t\tthis.readSemanticTokenRules(themeSpecificColors.rules);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tthis.tokenColorIndex = undefined;\n\t\tthis.textMateThemingRules = undefined;\n\t}\n\n\tpublic isThemeScope(key: string): boolean {\n\t\treturn (\n\t\t\tkey.charAt(0) === THEME_SCOPE_OPEN_PAREN &&\n\t\t\tkey.charAt(key.length - 1) === THEME_SCOPE_CLOSE_PAREN\n\t\t);\n\t}\n\n\tpublic isThemeScopeMatch(themeId: string): boolean {\n\t\tconst themeIdFirstChar = themeId.charAt(0);\n\t\tconst themeIdLastChar = themeId.charAt(themeId.length - 1);\n\t\tconst themeIdPrefix = themeId.slice(0, -1);\n\t\tconst themeIdInfix = themeId.slice(1, -1);\n\t\tconst themeIdSuffix = themeId.slice(1);\n\t\treturn (\n\t\t\tthemeId === this.settingsId ||\n\t\t\t(this.settingsId.includes(themeIdInfix) &&\n\t\t\t\tthemeIdFirstChar === THEME_SCOPE_WILDCARD &&\n\t\t\t\tthemeIdLastChar === THEME_SCOPE_WILDCARD) ||\n\t\t\t(this.settingsId.startsWith(themeIdPrefix) &&\n\t\t\t\tthemeIdLastChar === THEME_SCOPE_WILDCARD) ||\n\t\t\t(this.settingsId.endsWith(themeIdSuffix) &&\n\t\t\t\tthemeIdFirstChar === THEME_SCOPE_WILDCARD)\n\t\t);\n\t}\n\n\tpublic getThemeSpecificColors(\n\t\tcolors: IThemeScopableCustomizations,\n\t): IThemeScopedCustomizations | undefined {\n\t\tlet themeSpecificColors: IThemeScopedCustomizations | undefined;\n\t\tfor (const key in colors) {\n\t\t\tconst scopedColors = colors[key];\n\t\t\tif (\n\t\t\t\tthis.isThemeScope(key) &&\n\t\t\t\tscopedColors instanceof Object &&\n\t\t\t\t!Array.isArray(scopedColors)\n\t\t\t) {\n\t\t\t\tconst themeScopeList = key.match(themeScopeRegex) || [];\n\t\t\t\tfor (const themeScope of themeScopeList) {\n\t\t\t\t\tconst themeId = themeScope.substring(\n\t\t\t\t\t\t1,\n\t\t\t\t\t\tthemeScope.length - 1,\n\t\t\t\t\t);\n\t\t\t\t\tif (this.isThemeScopeMatch(themeId)) {\n\t\t\t\t\t\tif (!themeSpecificColors) {\n\t\t\t\t\t\t\tthemeSpecificColors = {};\n\t\t\t\t\t\t}\n\t\t\t\t\t\tconst scopedThemeSpecificColors =\n\t\t\t\t\t\t\tscopedColors as IThemeScopedCustomizations;\n\t\t\t\t\t\tfor (const subkey in scopedThemeSpecificColors) {\n\t\t\t\t\t\t\tconst originalColors = themeSpecificColors[subkey];\n\t\t\t\t\t\t\tconst overrideColors =\n\t\t\t\t\t\t\t\tscopedThemeSpecificColors[subkey];\n\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\tArray.isArray(originalColors) &&\n\t\t\t\t\t\t\t\tArray.isArray(overrideColors)\n\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\tthemeSpecificColors[subkey] =\n\t\t\t\t\t\t\t\t\toriginalColors.concat(overrideColors);\n\t\t\t\t\t\t\t} else if (overrideColors) {\n\t\t\t\t\t\t\t\tthemeSpecificColors[subkey] = overrideColors;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn themeSpecificColors;\n\t}\n\n\tprivate readSemanticTokenRules(\n\t\ttokenStylingRuleSection: ISemanticTokenRules,\n\t) {\n\t\tfor (const key in tokenStylingRuleSection) {\n\t\t\tif (!this.isThemeScope(key)) {\n\t\t\t\t// still do this test until experimental settings are gone\n\t\t\t\ttry {\n\t\t\t\t\tconst rule = readSemanticTokenRule(\n\t\t\t\t\t\tkey,\n\t\t\t\t\t\ttokenStylingRuleSection[key],\n\t\t\t\t\t);\n\t\t\t\t\tif (rule) {\n\t\t\t\t\t\tthis.customSemanticTokenRules.push(rule);\n\t\t\t\t\t}\n\t\t\t\t} catch (e) {\n\t\t\t\t\t// invalid selector, ignore\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate addCustomTokenColors(customTokenColors: ITokenColorCustomizations) {\n\t\t// Put the general customizations such as comments, strings, etc. first so that\n\t\t// they can be overridden by specific customizations like \"string.interpolated\"\n\t\tfor (const tokenGroup in tokenGroupToScopesMap) {\n\t\t\tconst group = <keyof typeof tokenGroupToScopesMap>tokenGroup; // TS doesn't type 'tokenGroup' properly\n\t\t\tconst value = customTokenColors[group];\n\t\t\tif (value) {\n\t\t\t\tconst settings =\n\t\t\t\t\ttypeof value === \"string\" ? { foreground: value } : value;\n\t\t\t\tconst scopes = tokenGroupToScopesMap[group];\n\t\t\t\tfor (const scope of scopes) {\n\t\t\t\t\tthis.customTokenColors.push({ scope, settings });\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// specific customizations\n\t\tif (Array.isArray(customTokenColors.textMateRules)) {\n\t\t\tfor (const rule of customTokenColors.textMateRules) {\n\t\t\t\tif (rule.scope && rule.settings) {\n\t\t\t\t\tthis.customTokenColors.push(rule);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (customTokenColors.semanticHighlighting !== undefined) {\n\t\t\tthis.customSemanticHighlightingDeprecated =\n\t\t\t\tcustomTokenColors.semanticHighlighting;\n\t\t}\n\t}\n\n\tpublic ensureLoaded(\n\t\textensionResourceLoaderService: IExtensionResourceLoaderService,\n\t): Promise<void> {\n\t\treturn this.isLoaded\n\t\t\t? Promise.resolve(undefined)\n\t\t\t: this.load(extensionResourceLoaderService);\n\t}\n\n\tpublic reload(\n\t\textensionResourceLoaderService: IExtensionResourceLoaderService,\n\t): Promise<void> {\n\t\treturn this.load(extensionResourceLoaderService);\n\t}\n\n\tprivate load(\n\t\textensionResourceLoaderService: IExtensionResourceLoaderService,\n\t): Promise<void> {\n\t\tif (!this.location) {\n\t\t\treturn Promise.resolve(undefined);\n\t\t}\n\t\tthis.themeTokenColors = [];\n\t\tthis.clearCaches();\n\n\t\tconst result = {\n\t\t\tcolors: {},\n\t\t\ttextMateRules: [],\n\t\t\tsemanticTokenRules: [],\n\t\t\tsemanticHighlighting: false,\n\t\t};\n\t\treturn _loadColorTheme(\n\t\t\textensionResourceLoaderService,\n\t\t\tthis.location,\n\t\t\tresult,\n\t\t).then((_) => {\n\t\t\tthis.isLoaded = true;\n\t\t\tthis.semanticTokenRules = result.semanticTokenRules;\n\t\t\tthis.colorMap = result.colors;\n\t\t\tthis.themeTokenColors = result.textMateRules;\n\t\t\tthis.themeSemanticHighlighting = result.semanticHighlighting;\n\t\t});\n\t}\n\n\tpublic clearCaches() {\n\t\tthis.tokenColorIndex = undefined;\n\t\tthis.textMateThemingRules = undefined;\n\t\tthis.themeTokenScopeMatchers = undefined;\n\t\tthis.customTokenScopeMatchers = undefined;\n\t}\n\n\ttoStorage(storageService: IStorageService) {\n\t\tconst colorMapData: { [key: string]: string } = {};\n\t\tfor (const key in this.colorMap) {\n\t\t\tcolorMapData[key] = Color.Format.CSS.formatHexA(\n\t\t\t\tthis.colorMap[key],\n\t\t\t\ttrue,\n\t\t\t);\n\t\t}\n\t\t// no need to persist custom colors, they will be taken from the settings\n\t\tconst value = JSON.stringify({\n\t\t\tid: this.id,\n\t\t\tlabel: this.label,\n\t\t\tsettingsId: this.settingsId,\n\t\t\tthemeTokenColors: this.themeTokenColors.map((tc) => ({\n\t\t\t\tsettings: tc.settings,\n\t\t\t\tscope: tc.scope,\n\t\t\t})), // don't persist names\n\t\t\tsemanticTokenRules: this.semanticTokenRules.map(\n\t\t\t\tSemanticTokenRule.toJSONObject,\n\t\t\t),\n\t\t\textensionData: ExtensionData.toJSONObject(this.extensionData),\n\t\t\tthemeSemanticHighlighting: this.themeSemanticHighlighting,\n\t\t\tcolorMap: colorMapData,\n\t\t\twatch: this.watch,\n\t\t});\n\n\t\t// roam persisted color theme colors. Don't enable for icons as they contain references to fonts and images.\n\t\tstorageService.store(\n\t\t\tColorThemeData.STORAGE_KEY,\n\t\t\tvalue,\n\t\t\tStorageScope.PROFILE,\n\t\t\tStorageTarget.USER,\n\t\t);\n\t}\n\n\tget baseTheme(): string {\n\t\treturn this.classNames[0];\n\t}\n\n\tget classNames(): string[] {\n\t\treturn this.id.split(\" \");\n\t}\n\n\tget type(): ColorScheme {\n\t\tswitch (this.baseTheme) {\n\t\t\tcase VS_LIGHT_THEME:\n\t\t\t\treturn ColorScheme.LIGHT;\n\t\t\tcase VS_HC_THEME:\n\t\t\t\treturn ColorScheme.HIGH_CONTRAST_DARK;\n\t\t\tcase VS_HC_LIGHT_THEME:\n\t\t\t\treturn ColorScheme.HIGH_CONTRAST_LIGHT;\n\t\t\tdefault:\n\t\t\t\treturn ColorScheme.DARK;\n\t\t}\n\t}\n\n\t// constructors\n\n\tstatic createUnloadedThemeForThemeType(\n\t\tthemeType: ColorScheme,\n\t\tcolorMap?: { [id: string]: string },\n\t): ColorThemeData {\n\t\treturn ColorThemeData.createUnloadedTheme(\n\t\t\tgetThemeTypeSelector(themeType),\n\t\t\tcolorMap,\n\t\t);\n\t}\n\n\tstatic createUnloadedTheme(\n\t\tid: string,\n\t\tcolorMap?: { [id: string]: string },\n\t): ColorThemeData {\n\t\tconst themeData = new ColorThemeData(id, \"\", \"__\" + id);\n\t\tthemeData.isLoaded = false;\n\t\tthemeData.themeTokenColors = [];\n\t\tthemeData.watch = false;\n\t\tif (colorMap) {\n\t\t\tfor (const id in colorMap) {\n\t\t\t\tthemeData.colorMap[id] = Color.fromHex(colorMap[id]);\n\t\t\t}\n\t\t}\n\t\treturn themeData;\n\t}\n\n\tstatic createLoadedEmptyTheme(\n\t\tid: string,\n\t\tsettingsId: string,\n\t): ColorThemeData {\n\t\tconst themeData = new ColorThemeData(id, \"\", settingsId);\n\t\tthemeData.isLoaded = true;\n\t\tthemeData.themeTokenColors = [];\n\t\tthemeData.watch = false;\n\t\treturn themeData;\n\t}\n\n\tstatic fromStorageData(\n\t\tstorageService: IStorageService,\n\t): ColorThemeData | undefined {\n\t\tconst input = storageService.get(\n\t\t\tColorThemeData.STORAGE_KEY,\n\t\t\tStorageScope.PROFILE,\n\t\t);\n\t\tif (!input) {\n\t\t\treturn undefined;\n\t\t}\n\t\ttry {\n\t\t\tconst data = JSON.parse(input);\n\t\t\tconst theme = new ColorThemeData(\"\", \"\", \"\");\n\t\t\tfor (const key in data) {\n\t\t\t\tswitch (key) {\n\t\t\t\t\tcase \"colorMap\": {\n\t\t\t\t\t\tconst colorMapData = data[key];\n\t\t\t\t\t\tfor (const id in colorMapData) {\n\t\t\t\t\t\t\ttheme.colorMap[id] = Color.fromHex(\n\t\t\t\t\t\t\t\tcolorMapData[id],\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tcase \"themeTokenColors\":\n\t\t\t\t\tcase \"id\":\n\t\t\t\t\tcase \"label\":\n\t\t\t\t\tcase \"settingsId\":\n\t\t\t\t\tcase \"watch\":\n\t\t\t\t\tcase \"themeSemanticHighlighting\":\n\t\t\t\t\t\t(theme as any)[key] = data[key];\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"semanticTokenRules\": {\n\t\t\t\t\t\tconst rulesData = data[key];\n\t\t\t\t\t\tif (Array.isArray(rulesData)) {\n\t\t\t\t\t\t\tfor (const d of rulesData) {\n\t\t\t\t\t\t\t\tconst rule = SemanticTokenRule.fromJSONObject(\n\t\t\t\t\t\t\t\t\ttokenClassificationRegistry,\n\t\t\t\t\t\t\t\t\td,\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\tif (rule) {\n\t\t\t\t\t\t\t\t\ttheme.semanticTokenRules.push(rule);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tcase \"location\":\n\t\t\t\t\t\t// ignore, no longer restore\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"extensionData\":\n\t\t\t\t\t\ttheme.extensionData = ExtensionData.fromJSONObject(\n\t\t\t\t\t\t\tdata.extensionData,\n\t\t\t\t\t\t);\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (!theme.id || !theme.settingsId) {\n\t\t\t\treturn undefined;\n\t\t\t}\n\t\t\treturn theme;\n\t\t} catch (e) {\n\t\t\treturn undefined;\n\t\t}\n\t}\n\n\tstatic fromExtensionTheme(\n\t\ttheme: IThemeExtensionPoint,\n\t\tcolorThemeLocation: URI,\n\t\textensionData: ExtensionData,\n\t): ColorThemeData {\n\t\tconst baseTheme: string = theme[\"uiTheme\"] || \"vs-dark\";\n\t\tconst themeSelector = toCSSSelector(\n\t\t\textensionData.extensionId,\n\t\t\ttheme.path,\n\t\t);\n\t\tconst id = `${baseTheme} ${themeSelector}`;\n\t\tconst label = theme.label || basename(theme.path);\n\t\tconst settingsId = theme.id || label;\n\t\tconst themeData = new ColorThemeData(id, label, settingsId);\n\t\tthemeData.description = theme.description;\n\t\tthemeData.watch = theme._watch === true;\n\t\tthemeData.location = colorThemeLocation;\n\t\tthemeData.extensionData = extensionData;\n\t\tthemeData.isLoaded = false;\n\t\treturn themeData;\n\t}\n}\n\nfunction toCSSSelector(extensionId: string, path: string) {\n\tif (path.startsWith(\"./\")) {\n\t\tpath = path.substr(2);\n\t}\n\tlet str = `${extensionId}-${path}`;\n\n\t//remove all characters that are not allowed in css\n\tstr = str.replace(/[^_a-zA-Z0-9-]/g, \"-\");\n\tif (str.charAt(0).match(/[0-9-]/)) {\n\t\tstr = \"_\" + str;\n\t}\n\treturn str;\n}\n\nasync function _loadColorTheme(\n\textensionResourceLoaderService: IExtensionResourceLoaderService,\n\tthemeLocation: URI,\n\tresult: {\n\t\ttextMateRules: ITextMateThemingRule[];\n\t\tcolors: IColorMap;\n\t\tsemanticTokenRules: SemanticTokenRule[];\n\t\tsemanticHighlighting: boolean;\n\t},\n): Promise<any> {\n\tif (resources.extname(themeLocation) === \".json\") {\n\t\tconst content =\n\t\t\tawait extensionResourceLoaderService.readExtensionResource(\n\t\t\t\tthemeLocation,\n\t\t\t);\n\t\tconst errors: Json.ParseError[] = [];\n\t\tconst contentValue = Json.parse(content, errors);\n\t\tif (errors.length > 0) {\n\t\t\treturn Promise.reject(\n\t\t\t\tnew Error(\n\t\t\t\t\tnls.localize(\n\t\t\t\t\t\t\"error.cannotparsejson\",\n\t\t\t\t\t\t\"Problems parsing JSON theme file: {0}\",\n\t\t\t\t\t\terrors\n\t\t\t\t\t\t\t.map((e) => getParseErrorMessage(e.error))\n\t\t\t\t\t\t\t.join(\", \"),\n\t\t\t\t\t),\n\t\t\t\t),\n\t\t\t);\n\t\t} else if (Json.getNodeType(contentValue) !== \"object\") {\n\t\t\treturn Promise.reject(\n\t\t\t\tnew Error(\n\t\t\t\t\tnls.localize(\n\t\t\t\t\t\t\"error.invalidformat\",\n\t\t\t\t\t\t\"Invalid format for JSON theme file: Object expected.\",\n\t\t\t\t\t),\n\t\t\t\t),\n\t\t\t);\n\t\t}\n\t\tif (contentValue.include) {\n\t\t\tawait _loadColorTheme(\n\t\t\t\textensionResourceLoaderService,\n\t\t\t\tresources.joinPath(\n\t\t\t\t\tresources.dirname(themeLocation),\n\t\t\t\t\tcontentValue.include,\n\t\t\t\t),\n\t\t\t\tresult,\n\t\t\t);\n\t\t}\n\t\tif (Array.isArray(contentValue.settings)) {\n\t\t\tconvertSettings(contentValue.settings, result);\n\t\t\treturn null;\n\t\t}\n\t\tresult.semanticHighlighting =\n\t\t\tresult.semanticHighlighting || contentValue.semanticHighlighting;\n\t\tconst colors = contentValue.colors;\n\t\tif (colors) {\n\t\t\tif (typeof colors !== \"object\") {\n\t\t\t\treturn Promise.reject(\n\t\t\t\t\tnew Error(\n\t\t\t\t\t\tnls.localize(\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tkey: \"error.invalidformat.colors\",\n\t\t\t\t\t\t\t\tcomment: [\n\t\t\t\t\t\t\t\t\t\"{0} will be replaced by a path. Values in quotes should not be translated.\",\n\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\"Problem parsing color theme file: {0}. Property 'colors' is not of type 'object'.\",\n\t\t\t\t\t\t\tthemeLocation.toString(),\n\t\t\t\t\t\t),\n\t\t\t\t\t),\n\t\t\t\t);\n\t\t\t}\n\t\t\t// new JSON color themes format\n\t\t\tfor (const colorId in colors) {\n\t\t\t\tconst colorVal = colors[colorId];\n\t\t\t\tif (colorVal === DEFAULT_COLOR_CONFIG_VALUE) {\n\t\t\t\t\t// ignore colors that are set to to default\n\t\t\t\t\tdelete result.colors[colorId];\n\t\t\t\t} else if (typeof colorVal === \"string\") {\n\t\t\t\t\tresult.colors[colorId] = Color.fromHex(colors[colorId]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tconst tokenColors = contentValue.tokenColors;\n\t\tif (tokenColors) {\n\t\t\tif (Array.isArray(tokenColors)) {\n\t\t\t\tresult.textMateRules.push(...tokenColors);\n\t\t\t} else if (typeof tokenColors === \"string\") {\n\t\t\t\tawait _loadSyntaxTokens(\n\t\t\t\t\textensionResourceLoaderService,\n\t\t\t\t\tresources.joinPath(\n\t\t\t\t\t\tresources.dirname(themeLocation),\n\t\t\t\t\t\ttokenColors,\n\t\t\t\t\t),\n\t\t\t\t\tresult,\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\treturn Promise.reject(\n\t\t\t\t\tnew Error(\n\t\t\t\t\t\tnls.localize(\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tkey: \"error.invalidformat.tokenColors\",\n\t\t\t\t\t\t\t\tcomment: [\n\t\t\t\t\t\t\t\t\t\"{0} will be replaced by a path. Values in quotes should not be translated.\",\n\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\"Problem parsing color theme file: {0}. Property 'tokenColors' should be either an array specifying colors or a path to a TextMate theme file\",\n\t\t\t\t\t\t\tthemeLocation.toString(),\n\t\t\t\t\t\t),\n\t\t\t\t\t),\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t\tconst semanticTokenColors = contentValue.semanticTokenColors;\n\t\tif (semanticTokenColors && typeof semanticTokenColors === \"object\") {\n\t\t\tfor (const key in semanticTokenColors) {\n\t\t\t\ttry {\n\t\t\t\t\tconst rule = readSemanticTokenRule(\n\t\t\t\t\t\tkey,\n\t\t\t\t\t\tsemanticTokenColors[key],\n\t\t\t\t\t);\n\t\t\t\t\tif (rule) {\n\t\t\t\t\t\tresult.semanticTokenRules.push(rule);\n\t\t\t\t\t}\n\t\t\t\t} catch (e) {\n\t\t\t\t\treturn Promise.reject(\n\t\t\t\t\t\tnew Error(\n\t\t\t\t\t\t\tnls.localize(\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tkey: \"error.invalidformat.semanticTokenColors\",\n\t\t\t\t\t\t\t\t\tcomment: [\n\t\t\t\t\t\t\t\t\t\t\"{0} will be replaced by a path. Values in quotes should not be translated.\",\n\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\"Problem parsing color theme file: {0}. Property 'semanticTokenColors' contains a invalid selector\",\n\t\t\t\t\t\t\t\tthemeLocation.toString(),\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t),\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t} else {\n\t\treturn _loadSyntaxTokens(\n\t\t\textensionResourceLoaderService,\n\t\t\tthemeLocation,\n\t\t\tresult,\n\t\t);\n\t}\n}\n\nfunction _loadSyntaxTokens(\n\textensionResourceLoaderService: IExtensionResourceLoaderService,\n\tthemeLocation: URI,\n\tresult: { textMateRules: ITextMateThemingRule[]; colors: IColorMap },\n): Promise<any> {\n\treturn extensionResourceLoaderService\n\t\t.readExtensionResource(themeLocation)\n\t\t.then(\n\t\t\t(content) => {\n\t\t\t\ttry {\n\t\t\t\t\tconst contentValue = parsePList(content);\n\t\t\t\t\tconst settings: ITextMateThemingRule[] =\n\t\t\t\t\t\tcontentValue.settings;\n\t\t\t\t\tif (!Array.isArray(settings)) {\n\t\t\t\t\t\treturn Promise.reject(\n\t\t\t\t\t\t\tnew Error(\n\t\t\t\t\t\t\t\tnls.localize(\n\t\t\t\t\t\t\t\t\t\"error.plist.invalidformat\",\n\t\t\t\t\t\t\t\t\t\"Problem parsing tmTheme file: {0}. 'settings' is not array.\",\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t\tconvertSettings(settings, result);\n\t\t\t\t\treturn Promise.resolve(null);\n\t\t\t\t} catch (e) {\n\t\t\t\t\treturn Promise.reject(\n\t\t\t\t\t\tnew Error(\n\t\t\t\t\t\t\tnls.localize(\n\t\t\t\t\t\t\t\t\"error.cannotparse\",\n\t\t\t\t\t\t\t\t\"Problems parsing tmTheme file: {0}\",\n\t\t\t\t\t\t\t\te.message,\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t),\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t},\n\t\t\t(error) => {\n\t\t\t\treturn Promise.reject(\n\t\t\t\t\tnew Error(\n\t\t\t\t\t\tnls.localize(\n\t\t\t\t\t\t\t\"error.cannotload\",\n\t\t\t\t\t\t\t\"Problems loading tmTheme file {0}: {1}\",\n\t\t\t\t\t\t\tthemeLocation.toString(),\n\t\t\t\t\t\t\terror.message,\n\t\t\t\t\t\t),\n\t\t\t\t\t),\n\t\t\t\t);\n\t\t\t},\n\t\t);\n}\n\nconst defaultThemeColors: { [baseTheme: string]: ITextMateThemingRule[] } = {\n\tlight: [\n\t\t{ scope: \"token.info-token\", settings: { foreground: \"#316bcd\" } },\n\t\t{ scope: \"token.warn-token\", settings: { foreground: \"#cd9731\" } },\n\t\t{ scope: \"token.error-token\", settings: { foreground: \"#cd3131\" } },\n\t\t{ scope: \"token.debug-token\", settings: { foreground: \"#800080\" } },\n\t],\n\tdark: [\n\t\t{ scope: \"token.info-token\", settings: { foreground: \"#6796e6\" } },\n\t\t{ scope: \"token.warn-token\", settings: { foreground: \"#cd9731\" } },\n\t\t{ scope: \"token.error-token\", settings: { foreground: \"#f44747\" } },\n\t\t{ scope: \"token.debug-token\", settings: { foreground: \"#b267e6\" } },\n\t],\n\thcLight: [\n\t\t{ scope: \"token.info-token\", settings: { foreground: \"#316bcd\" } },\n\t\t{ scope: \"token.warn-token\", settings: { foreground: \"#cd9731\" } },\n\t\t{ scope: \"token.error-token\", settings: { foreground: \"#cd3131\" } },\n\t\t{ scope: \"token.debug-token\", settings: { foreground: \"#800080\" } },\n\t],\n\thcDark: [\n\t\t{ scope: \"token.info-token\", settings: { foreground: \"#6796e6\" } },\n\t\t{ scope: \"token.warn-token\", settings: { foreground: \"#008000\" } },\n\t\t{ scope: \"token.error-token\", settings: { foreground: \"#FF0000\" } },\n\t\t{ scope: \"token.debug-token\", settings: { foreground: \"#b267e6\" } },\n\t],\n};\n\nconst noMatch = (_scope: ProbeScope) => -1;\n\nfunction nameMatcher(identifers: string[], scope: ProbeScope): number {\n\tfunction findInIdents(s: string, lastIndent: number): number {\n\t\tfor (let i = lastIndent - 1; i >= 0; i--) {\n\t\t\tif (scopesAreMatching(s, identifers[i])) {\n\t\t\t\treturn i;\n\t\t\t}\n\t\t}\n\t\treturn -1;\n\t}\n\tif (scope.length < identifers.length) {\n\t\treturn -1;\n\t}\n\tlet lastScopeIndex = scope.length - 1;\n\tlet lastIdentifierIndex = findInIdents(\n\t\tscope[lastScopeIndex--],\n\t\tidentifers.length,\n\t);\n\tif (lastIdentifierIndex >= 0) {\n\t\tconst score =\n\t\t\t(lastIdentifierIndex + 1) * 0x10000 +\n\t\t\tidentifers[lastIdentifierIndex].length;\n\t\twhile (lastScopeIndex >= 0) {\n\t\t\tlastIdentifierIndex = findInIdents(\n\t\t\t\tscope[lastScopeIndex--],\n\t\t\t\tlastIdentifierIndex,\n\t\t\t);\n\t\t\tif (lastIdentifierIndex === -1) {\n\t\t\t\treturn -1;\n\t\t\t}\n\t\t}\n\t\treturn score;\n\t}\n\treturn -1;\n}\n\nfunction scopesAreMatching(thisScopeName: string, scopeName: string): boolean {\n\tif (!thisScopeName) {\n\t\treturn false;\n\t}\n\tif (thisScopeName === scopeName) {\n\t\treturn true;\n\t}\n\tconst len = scopeName.length;\n\treturn (\n\t\tthisScopeName.length > len &&\n\t\tthisScopeName.substr(0, len) === scopeName &&\n\t\tthisScopeName[len] === \".\"\n\t);\n}\n\nfunction getScopeMatcher(rule: ITextMateThemingRule): Matcher<ProbeScope> {\n\tconst ruleScope = rule.scope;\n\tif (!ruleScope || !rule.settings) {\n\t\treturn noMatch;\n\t}\n\tconst matchers: MatcherWithPriority<ProbeScope>[] = [];\n\tif (Array.isArray(ruleScope)) {\n\t\tfor (const rs of ruleScope) {\n\t\t\tcreateMatchers(rs, nameMatcher, matchers);\n\t\t}\n\t} else {\n\t\tcreateMatchers(ruleScope, nameMatcher, matchers);\n\t}\n\n\tif (matchers.length === 0) {\n\t\treturn noMatch;\n\t}\n\treturn (scope: ProbeScope) => {\n\t\tlet max = matchers[0].matcher(scope);\n\t\tfor (let i = 1; i < matchers.length; i++) {\n\t\t\tmax = Math.max(max, matchers[i].matcher(scope));\n\t\t}\n\t\treturn max;\n\t};\n}\n\nfunction readSemanticTokenRule(\n\tselectorString: string,\n\tsettings: ISemanticTokenColorizationSetting | string | boolean | undefined,\n): SemanticTokenRule | undefined {\n\tconst selector =\n\t\ttokenClassificationRegistry.parseTokenSelector(selectorString);\n\tlet style: TokenStyle | undefined;\n\tif (typeof settings === \"string\") {\n\t\tstyle = TokenStyle.fromSettings(settings, undefined);\n\t} else if (isSemanticTokenColorizationSetting(settings)) {\n\t\tstyle = TokenStyle.fromSettings(\n\t\t\tsettings.foreground,\n\t\t\tsettings.fontStyle,\n\t\t\tsettings.bold,\n\t\t\tsettings.underline,\n\t\t\tsettings.strikethrough,\n\t\t\tsettings.italic,\n\t\t);\n\t}\n\tif (style) {\n\t\treturn { selector, style };\n\t}\n\treturn undefined;\n}\n\nfunction isSemanticTokenColorizationSetting(\n\tstyle: any,\n): style is ISemanticTokenColorizationSetting {\n\treturn (\n\t\tstyle &&\n\t\t(types.isString(style.foreground) ||\n\t\t\ttypes.isString(style.fontStyle) ||\n\t\t\ttypes.isBoolean(style.italic) ||\n\t\t\ttypes.isBoolean(style.underline) ||\n\t\t\ttypes.isBoolean(style.strikethrough) ||\n\t\t\ttypes.isBoolean(style.bold))\n\t);\n}\n\nclass TokenColorIndex {\n\tprivate _lastColorId: number;\n\tprivate _id2color: string[];\n\tprivate _color2id: { [color: string]: number };\n\n\tconstructor() {\n\t\tthis._lastColorId = 0;\n\t\tthis._id2color = [];\n\t\tthis._color2id = Object.create(null);\n\t}\n\n\tpublic add(color: string | Color | undefined): number {\n\t\tcolor = normalizeColor(color);\n\t\tif (color === undefined) {\n\t\t\treturn 0;\n\t\t}\n\n\t\tlet value = this._color2id[color];\n\t\tif (value) {\n\t\t\treturn value;\n\t\t}\n\t\tvalue = ++this._lastColorId;\n\t\tthis._color2id[color] = value;\n\t\tthis._id2color[value] = color;\n\t\treturn value;\n\t}\n\n\tpublic get(color: string | Color | undefined): number {\n\t\tcolor = normalizeColor(color);\n\t\tif (color === undefined) {\n\t\t\treturn 0;\n\t\t}\n\t\tconst value = this._color2id[color];\n\t\tif (value) {\n\t\t\treturn value;\n\t\t}\n\t\tconsole.log(`Color ${color} not in index.`);\n\t\treturn 0;\n\t}\n\n\tpublic asArray(): string[] {\n\t\treturn this._id2color.slice(0);\n\t}\n}\n\nfunction normalizeColor(\n\tcolor: string | Color | undefined | null,\n): string | undefined {\n\tif (!color) {\n\t\treturn undefined;\n\t}\n\tif (typeof color !== \"string\") {\n\t\tcolor = Color.Format.CSS.formatHexA(color, true);\n\t}\n\tconst len = color.length;\n\tif (\n\t\tcolor.charCodeAt(0) !== CharCode.Hash ||\n\t\t(len !== 4 && len !== 5 && len !== 7 && len !== 9)\n\t) {\n\t\treturn undefined;\n\t}\n\tconst result = [CharCode.Hash];\n\n\tfor (let i = 1; i < len; i++) {\n\t\tconst upper = hexUpper(color.charCodeAt(i));\n\t\tif (!upper) {\n\t\t\treturn undefined;\n\t\t}\n\t\tresult.push(upper);\n\t\tif (len === 4 || len === 5) {\n\t\t\tresult.push(upper);\n\t\t}\n\t}\n\n\tif (\n\t\tresult.length === 9 &&\n\t\tresult[7] === CharCode.F &&\n\t\tresult[8] === CharCode.F\n\t) {\n\t\tresult.length = 7;\n\t}\n\treturn String.fromCharCode(...result);\n}\n\nfunction hexUpper(charCode: CharCode): number {\n\tif (\n\t\t(charCode >= CharCode.Digit0 && charCode <= CharCode.Digit9) ||\n\t\t(charCode >= CharCode.A && charCode <= CharCode.F)\n\t) {\n\t\treturn charCode;\n\t} else if (charCode >= CharCode.a && charCode <= CharCode.f) {\n\t\treturn charCode - CharCode.a + CharCode.A;\n\t}\n\treturn 0;\n}\n"],
  "mappings": "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",
  "names": ["addRule", "findTokenStyleForScopeInScopes", "id"]
}
