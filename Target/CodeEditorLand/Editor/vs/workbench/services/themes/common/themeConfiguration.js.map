{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/themes/common/themeConfiguration.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as nls from '../../../../nls.js';\nimport * as types from '../../../../base/common/types.js';\nimport { Registry } from '../../../../platform/registry/common/platform.js';\nimport { IConfigurationRegistry, Extensions as ConfigurationExtensions, IConfigurationPropertySchema, IConfigurationNode, ConfigurationScope } from '../../../../platform/configuration/common/configurationRegistry.js';\n\nimport { IJSONSchema } from '../../../../base/common/jsonSchema.js';\nimport { textmateColorsSchemaId, textmateColorGroupSchemaId } from './colorThemeSchema.js';\nimport { workbenchColorsSchemaId } from '../../../../platform/theme/common/colorRegistry.js';\nimport { tokenStylingSchemaId } from '../../../../platform/theme/common/tokenClassificationRegistry.js';\nimport { ThemeSettings, IWorkbenchColorTheme, IWorkbenchFileIconTheme, IColorCustomizations, ITokenColorCustomizations, IWorkbenchProductIconTheme, ISemanticTokenColorCustomizations, ThemeSettingTarget, ThemeSettingDefaults } from './workbenchThemeService.js';\nimport { IConfigurationService, ConfigurationTarget } from '../../../../platform/configuration/common/configuration.js';\nimport { isWeb } from '../../../../base/common/platform.js';\nimport { ColorScheme } from '../../../../platform/theme/common/theme.js';\nimport { IHostColorSchemeService } from './hostColorSchemeService.js';\n\n// Configuration: Themes\nconst configurationRegistry = Registry.as<IConfigurationRegistry>(ConfigurationExtensions.Configuration);\n\nconst colorThemeSettingEnum: string[] = [];\nconst colorThemeSettingEnumItemLabels: string[] = [];\nconst colorThemeSettingEnumDescriptions: string[] = [];\n\nexport function formatSettingAsLink(str: string) {\n\treturn `\\`#${str}#\\``;\n}\n\nexport const COLOR_THEME_CONFIGURATION_SETTINGS_TAG = 'colorThemeConfiguration';\n\nconst colorThemeSettingSchema: IConfigurationPropertySchema = {\n\ttype: 'string',\n\tmarkdownDescription: nls.localize({ key: 'colorTheme', comment: ['{0} will become a link to another setting.'] }, \"Specifies the color theme used in the workbench when {0} is not enabled.\", formatSettingAsLink(ThemeSettings.DETECT_COLOR_SCHEME)),\n\tdefault: isWeb ? ThemeSettingDefaults.COLOR_THEME_LIGHT : ThemeSettingDefaults.COLOR_THEME_DARK,\n\ttags: [COLOR_THEME_CONFIGURATION_SETTINGS_TAG],\n\tenum: colorThemeSettingEnum,\n\tenumDescriptions: colorThemeSettingEnumDescriptions,\n\tenumItemLabels: colorThemeSettingEnumItemLabels,\n\terrorMessage: nls.localize('colorThemeError', \"Theme is unknown or not installed.\"),\n};\nconst preferredDarkThemeSettingSchema: IConfigurationPropertySchema = {\n\ttype: 'string', //\n\tmarkdownDescription: nls.localize({ key: 'preferredDarkColorTheme', comment: ['{0} will become a link to another setting.'] }, 'Specifies the color theme when system color mode is dark and {0} is enabled.', formatSettingAsLink(ThemeSettings.DETECT_COLOR_SCHEME)),\n\tdefault: ThemeSettingDefaults.COLOR_THEME_DARK,\n\ttags: [COLOR_THEME_CONFIGURATION_SETTINGS_TAG],\n\tenum: colorThemeSettingEnum,\n\tenumDescriptions: colorThemeSettingEnumDescriptions,\n\tenumItemLabels: colorThemeSettingEnumItemLabels,\n\terrorMessage: nls.localize('colorThemeError', \"Theme is unknown or not installed.\"),\n};\nconst preferredLightThemeSettingSchema: IConfigurationPropertySchema = {\n\ttype: 'string',\n\tmarkdownDescription: nls.localize({ key: 'preferredLightColorTheme', comment: ['{0} will become a link to another setting.'] }, 'Specifies the color theme when system color mode is light and {0} is enabled.', formatSettingAsLink(ThemeSettings.DETECT_COLOR_SCHEME)),\n\tdefault: ThemeSettingDefaults.COLOR_THEME_LIGHT,\n\ttags: [COLOR_THEME_CONFIGURATION_SETTINGS_TAG],\n\tenum: colorThemeSettingEnum,\n\tenumDescriptions: colorThemeSettingEnumDescriptions,\n\tenumItemLabels: colorThemeSettingEnumItemLabels,\n\terrorMessage: nls.localize('colorThemeError', \"Theme is unknown or not installed.\"),\n};\nconst preferredHCDarkThemeSettingSchema: IConfigurationPropertySchema = {\n\ttype: 'string',\n\tmarkdownDescription: nls.localize({ key: 'preferredHCDarkColorTheme', comment: ['{0} will become a link to another setting.'] }, 'Specifies the color theme when in high contrast dark mode and {0} is enabled.', formatSettingAsLink(ThemeSettings.DETECT_HC)),\n\tdefault: ThemeSettingDefaults.COLOR_THEME_HC_DARK,\n\ttags: [COLOR_THEME_CONFIGURATION_SETTINGS_TAG],\n\tenum: colorThemeSettingEnum,\n\tenumDescriptions: colorThemeSettingEnumDescriptions,\n\tenumItemLabels: colorThemeSettingEnumItemLabels,\n\terrorMessage: nls.localize('colorThemeError', \"Theme is unknown or not installed.\"),\n};\nconst preferredHCLightThemeSettingSchema: IConfigurationPropertySchema = {\n\ttype: 'string',\n\tmarkdownDescription: nls.localize({ key: 'preferredHCLightColorTheme', comment: ['{0} will become a link to another setting.'] }, 'Specifies the color theme when in high contrast light mode and {0} is enabled.', formatSettingAsLink(ThemeSettings.DETECT_HC)),\n\tdefault: ThemeSettingDefaults.COLOR_THEME_HC_LIGHT,\n\ttags: [COLOR_THEME_CONFIGURATION_SETTINGS_TAG],\n\tenum: colorThemeSettingEnum,\n\tenumDescriptions: colorThemeSettingEnumDescriptions,\n\tenumItemLabels: colorThemeSettingEnumItemLabels,\n\terrorMessage: nls.localize('colorThemeError', \"Theme is unknown or not installed.\"),\n};\nconst detectColorSchemeSettingSchema: IConfigurationPropertySchema = {\n\ttype: 'boolean',\n\tmarkdownDescription: nls.localize({ key: 'detectColorScheme', comment: ['{0} and {1} will become links to other settings.'] }, 'If enabled, will automatically select a color theme based on the system color mode. If the system color mode is dark, {0} is used, else {1}.', formatSettingAsLink(ThemeSettings.PREFERRED_DARK_THEME), formatSettingAsLink(ThemeSettings.PREFERRED_LIGHT_THEME)),\n\tdefault: false,\n\ttags: [COLOR_THEME_CONFIGURATION_SETTINGS_TAG],\n};\n\nconst colorCustomizationsSchema: IConfigurationPropertySchema = {\n\ttype: 'object',\n\tdescription: nls.localize('workbenchColors', \"Overrides colors from the currently selected color theme.\"),\n\tallOf: [{ $ref: workbenchColorsSchemaId }],\n\tdefault: {},\n\tdefaultSnippets: [{\n\t\tbody: {\n\t\t}\n\t}]\n};\nconst fileIconThemeSettingSchema: IConfigurationPropertySchema = {\n\ttype: ['string', 'null'],\n\tdefault: ThemeSettingDefaults.FILE_ICON_THEME,\n\tdescription: nls.localize('iconTheme', \"Specifies the file icon theme used in the workbench or 'null' to not show any file icons.\"),\n\tenum: [null],\n\tenumItemLabels: [nls.localize('noIconThemeLabel', 'None')],\n\tenumDescriptions: [nls.localize('noIconThemeDesc', 'No file icons')],\n\terrorMessage: nls.localize('iconThemeError', \"File icon theme is unknown or not installed.\")\n};\nconst productIconThemeSettingSchema: IConfigurationPropertySchema = {\n\ttype: ['string', 'null'],\n\tdefault: ThemeSettingDefaults.PRODUCT_ICON_THEME,\n\tdescription: nls.localize('productIconTheme', \"Specifies the product icon theme used.\"),\n\tenum: [ThemeSettingDefaults.PRODUCT_ICON_THEME],\n\tenumItemLabels: [nls.localize('defaultProductIconThemeLabel', 'Default')],\n\tenumDescriptions: [nls.localize('defaultProductIconThemeDesc', 'Default')],\n\terrorMessage: nls.localize('productIconThemeError', \"Product icon theme is unknown or not installed.\")\n};\n\nconst detectHCSchemeSettingSchema: IConfigurationPropertySchema = {\n\ttype: 'boolean',\n\tdefault: true,\n\tmarkdownDescription: nls.localize({ key: 'autoDetectHighContrast', comment: ['{0} and {1} will become links to other settings.'] }, \"If enabled, will automatically change to high contrast theme if the OS is using a high contrast theme. The high contrast theme to use is specified by {0} and {1}.\", formatSettingAsLink(ThemeSettings.PREFERRED_HC_DARK_THEME), formatSettingAsLink(ThemeSettings.PREFERRED_HC_LIGHT_THEME)),\n\tscope: ConfigurationScope.APPLICATION,\n\ttags: [COLOR_THEME_CONFIGURATION_SETTINGS_TAG],\n};\n\nconst themeSettingsConfiguration: IConfigurationNode = {\n\tid: 'workbench',\n\torder: 7.1,\n\ttype: 'object',\n\tproperties: {\n\t\t[ThemeSettings.COLOR_THEME]: colorThemeSettingSchema,\n\t\t[ThemeSettings.PREFERRED_DARK_THEME]: preferredDarkThemeSettingSchema,\n\t\t[ThemeSettings.PREFERRED_LIGHT_THEME]: preferredLightThemeSettingSchema,\n\t\t[ThemeSettings.PREFERRED_HC_DARK_THEME]: preferredHCDarkThemeSettingSchema,\n\t\t[ThemeSettings.PREFERRED_HC_LIGHT_THEME]: preferredHCLightThemeSettingSchema,\n\t\t[ThemeSettings.FILE_ICON_THEME]: fileIconThemeSettingSchema,\n\t\t[ThemeSettings.COLOR_CUSTOMIZATIONS]: colorCustomizationsSchema,\n\t\t[ThemeSettings.PRODUCT_ICON_THEME]: productIconThemeSettingSchema\n\t}\n};\nconfigurationRegistry.registerConfiguration(themeSettingsConfiguration);\n\nconst themeSettingsWindowConfiguration: IConfigurationNode = {\n\tid: 'window',\n\torder: 8.1,\n\ttype: 'object',\n\tproperties: {\n\t\t[ThemeSettings.DETECT_HC]: detectHCSchemeSettingSchema,\n\t\t[ThemeSettings.DETECT_COLOR_SCHEME]: detectColorSchemeSettingSchema,\n\t}\n};\nconfigurationRegistry.registerConfiguration(themeSettingsWindowConfiguration);\n\nfunction tokenGroupSettings(description: string): IJSONSchema {\n\treturn {\n\t\tdescription,\n\t\t$ref: textmateColorGroupSchemaId\n\t};\n}\n\nconst themeSpecificSettingKey = '^\\\\[[^\\\\]]*(\\\\]\\\\s*\\\\[[^\\\\]]*)*\\\\]$';\n\nconst tokenColorSchema: IJSONSchema = {\n\ttype: 'object',\n\tproperties: {\n\t\tcomments: tokenGroupSettings(nls.localize('editorColors.comments', \"Sets the colors and styles for comments\")),\n\t\tstrings: tokenGroupSettings(nls.localize('editorColors.strings', \"Sets the colors and styles for strings literals.\")),\n\t\tkeywords: tokenGroupSettings(nls.localize('editorColors.keywords', \"Sets the colors and styles for keywords.\")),\n\t\tnumbers: tokenGroupSettings(nls.localize('editorColors.numbers', \"Sets the colors and styles for number literals.\")),\n\t\ttypes: tokenGroupSettings(nls.localize('editorColors.types', \"Sets the colors and styles for type declarations and references.\")),\n\t\tfunctions: tokenGroupSettings(nls.localize('editorColors.functions', \"Sets the colors and styles for functions declarations and references.\")),\n\t\tvariables: tokenGroupSettings(nls.localize('editorColors.variables', \"Sets the colors and styles for variables declarations and references.\")),\n\t\ttextMateRules: {\n\t\t\tdescription: nls.localize('editorColors.textMateRules', 'Sets colors and styles using textmate theming rules (advanced).'),\n\t\t\t$ref: textmateColorsSchemaId\n\t\t},\n\t\tsemanticHighlighting: {\n\t\t\tdescription: nls.localize('editorColors.semanticHighlighting', 'Whether semantic highlighting should be enabled for this theme.'),\n\t\t\tdeprecationMessage: nls.localize('editorColors.semanticHighlighting.deprecationMessage', 'Use `enabled` in `editor.semanticTokenColorCustomizations` setting instead.'),\n\t\t\tmarkdownDeprecationMessage: nls.localize({ key: 'editorColors.semanticHighlighting.deprecationMessageMarkdown', comment: ['{0} will become a link to another setting.'] }, 'Use `enabled` in {0} setting instead.', formatSettingAsLink('editor.semanticTokenColorCustomizations')),\n\t\t\ttype: 'boolean'\n\t\t}\n\t},\n\tadditionalProperties: false\n};\n\nconst tokenColorCustomizationSchema: IConfigurationPropertySchema = {\n\tdescription: nls.localize('editorColors', \"Overrides editor syntax colors and font style from the currently selected color theme.\"),\n\tdefault: {},\n\tallOf: [{ ...tokenColorSchema, patternProperties: { '^\\\\[': {} } }]\n};\n\nconst semanticTokenColorSchema: IJSONSchema = {\n\ttype: 'object',\n\tproperties: {\n\t\tenabled: {\n\t\t\ttype: 'boolean',\n\t\t\tdescription: nls.localize('editorColors.semanticHighlighting.enabled', 'Whether semantic highlighting is enabled or disabled for this theme'),\n\t\t\tsuggestSortText: '0_enabled'\n\t\t},\n\t\trules: {\n\t\t\t$ref: tokenStylingSchemaId,\n\t\t\tdescription: nls.localize('editorColors.semanticHighlighting.rules', 'Semantic token styling rules for this theme.'),\n\t\t\tsuggestSortText: '0_rules'\n\t\t}\n\t},\n\tadditionalProperties: false\n};\n\nconst semanticTokenColorCustomizationSchema: IConfigurationPropertySchema = {\n\tdescription: nls.localize('semanticTokenColors', \"Overrides editor semantic token color and styles from the currently selected color theme.\"),\n\tdefault: {},\n\tallOf: [{ ...semanticTokenColorSchema, patternProperties: { '^\\\\[': {} } }]\n};\n\nconst tokenColorCustomizationConfiguration: IConfigurationNode = {\n\tid: 'editor',\n\torder: 7.2,\n\ttype: 'object',\n\tproperties: {\n\t\t[ThemeSettings.TOKEN_COLOR_CUSTOMIZATIONS]: tokenColorCustomizationSchema,\n\t\t[ThemeSettings.SEMANTIC_TOKEN_COLOR_CUSTOMIZATIONS]: semanticTokenColorCustomizationSchema\n\t}\n};\n\nconfigurationRegistry.registerConfiguration(tokenColorCustomizationConfiguration);\n\nexport function updateColorThemeConfigurationSchemas(themes: IWorkbenchColorTheme[]) {\n\t// updates enum for the 'workbench.colorTheme` setting\n\tthemes.sort((a, b) => a.label.localeCompare(b.label));\n\tcolorThemeSettingEnum.splice(0, colorThemeSettingEnum.length, ...themes.map(t => t.settingsId));\n\tcolorThemeSettingEnumDescriptions.splice(0, colorThemeSettingEnumDescriptions.length, ...themes.map(t => t.description || ''));\n\tcolorThemeSettingEnumItemLabels.splice(0, colorThemeSettingEnumItemLabels.length, ...themes.map(t => t.label || ''));\n\n\tconst themeSpecificWorkbenchColors: IJSONSchema = { properties: {} };\n\tconst themeSpecificTokenColors: IJSONSchema = { properties: {} };\n\tconst themeSpecificSemanticTokenColors: IJSONSchema = { properties: {} };\n\n\tconst workbenchColors = { $ref: workbenchColorsSchemaId, additionalProperties: false };\n\tconst tokenColors = { properties: tokenColorSchema.properties, additionalProperties: false };\n\tfor (const t of themes) {\n\t\t// add theme specific color customization (\"[Abyss]\":{ ... })\n\t\tconst themeId = `[${t.settingsId}]`;\n\t\tthemeSpecificWorkbenchColors.properties![themeId] = workbenchColors;\n\t\tthemeSpecificTokenColors.properties![themeId] = tokenColors;\n\t\tthemeSpecificSemanticTokenColors.properties![themeId] = semanticTokenColorSchema;\n\t}\n\tthemeSpecificWorkbenchColors.patternProperties = { [themeSpecificSettingKey]: workbenchColors };\n\tthemeSpecificTokenColors.patternProperties = { [themeSpecificSettingKey]: tokenColors };\n\tthemeSpecificSemanticTokenColors.patternProperties = { [themeSpecificSettingKey]: semanticTokenColorSchema };\n\n\tcolorCustomizationsSchema.allOf![1] = themeSpecificWorkbenchColors;\n\ttokenColorCustomizationSchema.allOf![1] = themeSpecificTokenColors;\n\tsemanticTokenColorCustomizationSchema.allOf![1] = themeSpecificSemanticTokenColors;\n\n\tconfigurationRegistry.notifyConfigurationSchemaUpdated(themeSettingsConfiguration, tokenColorCustomizationConfiguration);\n}\n\nexport function updateFileIconThemeConfigurationSchemas(themes: IWorkbenchFileIconTheme[]) {\n\tfileIconThemeSettingSchema.enum!.splice(1, Number.MAX_VALUE, ...themes.map(t => t.settingsId));\n\tfileIconThemeSettingSchema.enumItemLabels!.splice(1, Number.MAX_VALUE, ...themes.map(t => t.label));\n\tfileIconThemeSettingSchema.enumDescriptions!.splice(1, Number.MAX_VALUE, ...themes.map(t => t.description || ''));\n\n\tconfigurationRegistry.notifyConfigurationSchemaUpdated(themeSettingsConfiguration);\n}\n\nexport function updateProductIconThemeConfigurationSchemas(themes: IWorkbenchProductIconTheme[]) {\n\tproductIconThemeSettingSchema.enum!.splice(1, Number.MAX_VALUE, ...themes.map(t => t.settingsId));\n\tproductIconThemeSettingSchema.enumItemLabels!.splice(1, Number.MAX_VALUE, ...themes.map(t => t.label));\n\tproductIconThemeSettingSchema.enumDescriptions!.splice(1, Number.MAX_VALUE, ...themes.map(t => t.description || ''));\n\n\tconfigurationRegistry.notifyConfigurationSchemaUpdated(themeSettingsConfiguration);\n}\n\nconst colorSchemeToPreferred = {\n\t[ColorScheme.DARK]: ThemeSettings.PREFERRED_DARK_THEME,\n\t[ColorScheme.LIGHT]: ThemeSettings.PREFERRED_LIGHT_THEME,\n\t[ColorScheme.HIGH_CONTRAST_DARK]: ThemeSettings.PREFERRED_HC_DARK_THEME,\n\t[ColorScheme.HIGH_CONTRAST_LIGHT]: ThemeSettings.PREFERRED_HC_LIGHT_THEME\n};\n\nexport class ThemeConfiguration {\n\tconstructor(private configurationService: IConfigurationService, private hostColorService: IHostColorSchemeService) {\n\t}\n\n\tpublic get colorTheme(): string {\n\t\treturn this.configurationService.getValue<string>(this.getColorThemeSettingId());\n\t}\n\n\tpublic get fileIconTheme(): string | null {\n\t\treturn this.configurationService.getValue<string | null>(ThemeSettings.FILE_ICON_THEME);\n\t}\n\n\tpublic get productIconTheme(): string {\n\t\treturn this.configurationService.getValue<string>(ThemeSettings.PRODUCT_ICON_THEME);\n\t}\n\n\tpublic get colorCustomizations(): IColorCustomizations {\n\t\treturn this.configurationService.getValue<IColorCustomizations>(ThemeSettings.COLOR_CUSTOMIZATIONS) || {};\n\t}\n\n\tpublic get tokenColorCustomizations(): ITokenColorCustomizations {\n\t\treturn this.configurationService.getValue<ITokenColorCustomizations>(ThemeSettings.TOKEN_COLOR_CUSTOMIZATIONS) || {};\n\t}\n\n\tpublic get semanticTokenColorCustomizations(): ISemanticTokenColorCustomizations | undefined {\n\t\treturn this.configurationService.getValue<ISemanticTokenColorCustomizations>(ThemeSettings.SEMANTIC_TOKEN_COLOR_CUSTOMIZATIONS);\n\t}\n\n\tpublic getPreferredColorScheme(): ColorScheme | undefined {\n\t\tif (this.configurationService.getValue(ThemeSettings.DETECT_HC) && this.hostColorService.highContrast) {\n\t\t\treturn this.hostColorService.dark ? ColorScheme.HIGH_CONTRAST_DARK : ColorScheme.HIGH_CONTRAST_LIGHT;\n\t\t}\n\t\tif (this.configurationService.getValue(ThemeSettings.DETECT_COLOR_SCHEME)) {\n\t\t\treturn this.hostColorService.dark ? ColorScheme.DARK : ColorScheme.LIGHT;\n\t\t}\n\t\treturn undefined;\n\t}\n\n\tpublic isDetectingColorScheme(): boolean {\n\t\treturn this.configurationService.getValue(ThemeSettings.DETECT_COLOR_SCHEME);\n\t}\n\n\tpublic getColorThemeSettingId(): ThemeSettings {\n\t\tconst preferredScheme = this.getPreferredColorScheme();\n\t\treturn preferredScheme ? colorSchemeToPreferred[preferredScheme] : ThemeSettings.COLOR_THEME;\n\t}\n\n\tpublic async setColorTheme(theme: IWorkbenchColorTheme, settingsTarget: ThemeSettingTarget): Promise<IWorkbenchColorTheme> {\n\t\tawait this.writeConfiguration(this.getColorThemeSettingId(), theme.settingsId, settingsTarget);\n\t\treturn theme;\n\t}\n\n\tpublic async setFileIconTheme(theme: IWorkbenchFileIconTheme, settingsTarget: ThemeSettingTarget): Promise<IWorkbenchFileIconTheme> {\n\t\tawait this.writeConfiguration(ThemeSettings.FILE_ICON_THEME, theme.settingsId, settingsTarget);\n\t\treturn theme;\n\t}\n\n\tpublic async setProductIconTheme(theme: IWorkbenchProductIconTheme, settingsTarget: ThemeSettingTarget): Promise<IWorkbenchProductIconTheme> {\n\t\tawait this.writeConfiguration(ThemeSettings.PRODUCT_ICON_THEME, theme.settingsId, settingsTarget);\n\t\treturn theme;\n\t}\n\n\tpublic isDefaultColorTheme(): boolean {\n\t\tconst settings = this.configurationService.inspect(this.getColorThemeSettingId());\n\t\treturn settings && settings.default?.value === settings.value;\n\t}\n\n\tpublic findAutoConfigurationTarget(key: string) {\n\t\tconst settings = this.configurationService.inspect(key);\n\t\tif (!types.isUndefined(settings.workspaceFolderValue)) {\n\t\t\treturn ConfigurationTarget.WORKSPACE_FOLDER;\n\t\t} else if (!types.isUndefined(settings.workspaceValue)) {\n\t\t\treturn ConfigurationTarget.WORKSPACE;\n\t\t} else if (!types.isUndefined(settings.userRemote)) {\n\t\t\treturn ConfigurationTarget.USER_REMOTE;\n\t\t}\n\t\treturn ConfigurationTarget.USER;\n\t}\n\n\tprivate async writeConfiguration(key: string, value: any, settingsTarget: ThemeSettingTarget): Promise<void> {\n\t\tif (settingsTarget === undefined || settingsTarget === 'preview') {\n\t\t\treturn;\n\t\t}\n\n\t\tconst settings = this.configurationService.inspect(key);\n\t\tif (settingsTarget === 'auto') {\n\t\t\treturn this.configurationService.updateValue(key, value);\n\t\t}\n\n\t\tif (settingsTarget === ConfigurationTarget.USER) {\n\t\t\tif (value === settings.userValue) {\n\t\t\t\treturn Promise.resolve(undefined); // nothing to do\n\t\t\t} else if (value === settings.defaultValue) {\n\t\t\t\tif (types.isUndefined(settings.userValue)) {\n\t\t\t\t\treturn Promise.resolve(undefined); // nothing to do\n\t\t\t\t}\n\t\t\t\tvalue = undefined; // remove configuration from user settings\n\t\t\t}\n\t\t} else if (settingsTarget === ConfigurationTarget.WORKSPACE || settingsTarget === ConfigurationTarget.WORKSPACE_FOLDER || settingsTarget === ConfigurationTarget.USER_REMOTE) {\n\t\t\tif (value === settings.value) {\n\t\t\t\treturn Promise.resolve(undefined); // nothing to do\n\t\t\t}\n\t\t}\n\t\treturn this.configurationService.updateValue(key, value, settingsTarget);\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
