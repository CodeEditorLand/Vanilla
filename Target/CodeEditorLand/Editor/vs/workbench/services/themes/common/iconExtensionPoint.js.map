{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/themes/common/iconExtensionPoint.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { extname, posix } from \"../../../../base/common/path.js\";\nimport * as resources from \"../../../../base/common/resources.js\";\nimport { ThemeIcon } from \"../../../../base/common/themables.js\";\nimport * as nls from \"../../../../nls.js\";\nimport type { IExtensionDescription } from \"../../../../platform/extensions/common/extensions.js\";\nimport { Registry } from \"../../../../platform/registry/common/platform.js\";\nimport {\n\ttype IIconRegistry,\n\tExtensions as IconRegistryExtensions,\n} from \"../../../../platform/theme/common/iconRegistry.js\";\nimport { ExtensionsRegistry } from \"../../extensions/common/extensionsRegistry.js\";\n\ninterface IIconExtensionPoint {\n\t[id: string]: {\n\t\tdescription: string;\n\t\tdefault: { fontPath: string; fontCharacter: string } | string;\n\t};\n}\n\nconst iconRegistry: IIconRegistry = Registry.as<IIconRegistry>(\n\tIconRegistryExtensions.IconContribution,\n);\n\nconst iconReferenceSchema = iconRegistry.getIconReferenceSchema();\nconst iconIdPattern = `^${ThemeIcon.iconNameSegment}(-${ThemeIcon.iconNameSegment})+$`;\n\nconst iconConfigurationExtPoint =\n\tExtensionsRegistry.registerExtensionPoint<IIconExtensionPoint>({\n\t\textensionPoint: \"icons\",\n\t\tjsonSchema: {\n\t\t\tdescription: nls.localize(\n\t\t\t\t\"contributes.icons\",\n\t\t\t\t\"Contributes extension defined themable icons\",\n\t\t\t),\n\t\t\ttype: \"object\",\n\t\t\tpropertyNames: {\n\t\t\t\tpattern: iconIdPattern,\n\t\t\t\tdescription: nls.localize(\n\t\t\t\t\t\"contributes.icon.id\",\n\t\t\t\t\t\"The identifier of the themable icon\",\n\t\t\t\t),\n\t\t\t\tpatternErrorMessage: nls.localize(\n\t\t\t\t\t\"contributes.icon.id.format\",\n\t\t\t\t\t\"Identifiers can only contain letters, digits and minuses and need to consist of at least two segments in the form `component-iconname`.\",\n\t\t\t\t),\n\t\t\t},\n\t\t\tadditionalProperties: {\n\t\t\t\ttype: \"object\",\n\t\t\t\tproperties: {\n\t\t\t\t\tdescription: {\n\t\t\t\t\t\ttype: \"string\",\n\t\t\t\t\t\tdescription: nls.localize(\n\t\t\t\t\t\t\t\"contributes.icon.description\",\n\t\t\t\t\t\t\t\"The description of the themable icon\",\n\t\t\t\t\t\t),\n\t\t\t\t\t},\n\t\t\t\t\tdefault: {\n\t\t\t\t\t\tanyOf: [\n\t\t\t\t\t\t\ticonReferenceSchema,\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\ttype: \"object\",\n\t\t\t\t\t\t\t\tproperties: {\n\t\t\t\t\t\t\t\t\tfontPath: {\n\t\t\t\t\t\t\t\t\t\tdescription: nls.localize(\n\t\t\t\t\t\t\t\t\t\t\t\"contributes.icon.default.fontPath\",\n\t\t\t\t\t\t\t\t\t\t\t\"The path of the icon font that defines the icon.\",\n\t\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t\t\ttype: \"string\",\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\tfontCharacter: {\n\t\t\t\t\t\t\t\t\t\tdescription: nls.localize(\n\t\t\t\t\t\t\t\t\t\t\t\"contributes.icon.default.fontCharacter\",\n\t\t\t\t\t\t\t\t\t\t\t\"The character for the icon in the icon font.\",\n\t\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t\t\ttype: \"string\",\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\trequired: [\"fontPath\", \"fontCharacter\"],\n\t\t\t\t\t\t\t\tdefaultSnippets: [\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tbody: {\n\t\t\t\t\t\t\t\t\t\t\tfontPath: \"${1:myiconfont.woff}\",\n\t\t\t\t\t\t\t\t\t\t\tfontCharacter: \"${2:\\\\\\\\E001}\",\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t],\n\t\t\t\t\t\tdescription: nls.localize(\n\t\t\t\t\t\t\t\"contributes.icon.default\",\n\t\t\t\t\t\t\t\"The default of the icon. Either a reference to an extisting ThemeIcon or an icon in an icon font.\",\n\t\t\t\t\t\t),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\trequired: [\"description\", \"default\"],\n\t\t\t\tdefaultSnippets: [\n\t\t\t\t\t{\n\t\t\t\t\t\tbody: {\n\t\t\t\t\t\t\tdescription: \"${1:my icon}\",\n\t\t\t\t\t\t\tdefault: {\n\t\t\t\t\t\t\t\tfontPath: \"${2:myiconfont.woff}\",\n\t\t\t\t\t\t\t\tfontCharacter: \"${3:\\\\\\\\E001}\",\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t},\n\t\t\tdefaultSnippets: [\n\t\t\t\t{\n\t\t\t\t\tbody: {\n\t\t\t\t\t\t\"${1:my-icon-id}\": {\n\t\t\t\t\t\t\tdescription: \"${2:my icon}\",\n\t\t\t\t\t\t\tdefault: {\n\t\t\t\t\t\t\t\tfontPath: \"${3:myiconfont.woff}\",\n\t\t\t\t\t\t\t\tfontCharacter: \"${4:\\\\\\\\E001}\",\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t],\n\t\t},\n\t});\n\nexport class IconExtensionPoint {\n\tconstructor() {\n\t\ticonConfigurationExtPoint.setHandler((extensions, delta) => {\n\t\t\tfor (const extension of delta.added) {\n\t\t\t\tconst extensionValue = <IIconExtensionPoint>extension.value;\n\t\t\t\tconst collector = extension.collector;\n\n\t\t\t\tif (!extensionValue || typeof extensionValue !== \"object\") {\n\t\t\t\t\tcollector.error(\n\t\t\t\t\t\tnls.localize(\n\t\t\t\t\t\t\t\"invalid.icons.configuration\",\n\t\t\t\t\t\t\t\"'configuration.icons' must be an object with the icon names as properties.\",\n\t\t\t\t\t\t),\n\t\t\t\t\t);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tfor (const id in extensionValue) {\n\t\t\t\t\tif (!id.match(iconIdPattern)) {\n\t\t\t\t\t\tcollector.error(\n\t\t\t\t\t\t\tnls.localize(\n\t\t\t\t\t\t\t\t\"invalid.icons.id.format\",\n\t\t\t\t\t\t\t\t\"'configuration.icons' keys represent the icon id and can only contain letter, digits and minuses. They need to consist of at least two segments in the form `component-iconname`.\",\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\tconst iconContribution = extensionValue[id];\n\t\t\t\t\tif (\n\t\t\t\t\t\ttypeof iconContribution.description !== \"string\" ||\n\t\t\t\t\t\ticonContribution.description.length === 0\n\t\t\t\t\t) {\n\t\t\t\t\t\tcollector.error(\n\t\t\t\t\t\t\tnls.localize(\n\t\t\t\t\t\t\t\t\"invalid.icons.description\",\n\t\t\t\t\t\t\t\t\"'configuration.icons.description' must be defined and can not be empty\",\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\tconst defaultIcon = iconContribution.default;\n\t\t\t\t\tif (typeof defaultIcon === \"string\") {\n\t\t\t\t\t\ticonRegistry.registerIcon(\n\t\t\t\t\t\t\tid,\n\t\t\t\t\t\t\t{ id: defaultIcon },\n\t\t\t\t\t\t\ticonContribution.description,\n\t\t\t\t\t\t);\n\t\t\t\t\t} else if (\n\t\t\t\t\t\ttypeof defaultIcon === \"object\" &&\n\t\t\t\t\t\ttypeof defaultIcon.fontPath === \"string\" &&\n\t\t\t\t\t\ttypeof defaultIcon.fontCharacter === \"string\"\n\t\t\t\t\t) {\n\t\t\t\t\t\tconst fileExt = extname(defaultIcon.fontPath).substring(\n\t\t\t\t\t\t\t1,\n\t\t\t\t\t\t);\n\t\t\t\t\t\tconst format = formatMap[fileExt];\n\t\t\t\t\t\tif (!format) {\n\t\t\t\t\t\t\tcollector.warn(\n\t\t\t\t\t\t\t\tnls.localize(\n\t\t\t\t\t\t\t\t\t\"invalid.icons.default.fontPath.extension\",\n\t\t\t\t\t\t\t\t\t\"Expected `contributes.icons.default.fontPath` to have file extension 'woff', woff2' or 'ttf', is '{0}'.\",\n\t\t\t\t\t\t\t\t\tfileExt,\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tconst extensionLocation =\n\t\t\t\t\t\t\textension.description.extensionLocation;\n\t\t\t\t\t\tconst iconFontLocation = resources.joinPath(\n\t\t\t\t\t\t\textensionLocation,\n\t\t\t\t\t\t\tdefaultIcon.fontPath,\n\t\t\t\t\t\t);\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t!resources.isEqualOrParent(\n\t\t\t\t\t\t\t\ticonFontLocation,\n\t\t\t\t\t\t\t\textensionLocation,\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\tcollector.warn(\n\t\t\t\t\t\t\t\tnls.localize(\n\t\t\t\t\t\t\t\t\t\"invalid.icons.default.fontPath.path\",\n\t\t\t\t\t\t\t\t\t\"Expected `contributes.icons.default.fontPath` ({0}) to be included inside extension's folder ({0}).\",\n\t\t\t\t\t\t\t\t\ticonFontLocation.path,\n\t\t\t\t\t\t\t\t\textensionLocation.path,\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tconst fontId = getFontId(\n\t\t\t\t\t\t\textension.description,\n\t\t\t\t\t\t\tdefaultIcon.fontPath,\n\t\t\t\t\t\t);\n\t\t\t\t\t\tconst definition = iconRegistry.registerIconFont(\n\t\t\t\t\t\t\tfontId,\n\t\t\t\t\t\t\t{ src: [{ location: iconFontLocation, format }] },\n\t\t\t\t\t\t);\n\t\t\t\t\t\ticonRegistry.registerIcon(\n\t\t\t\t\t\t\tid,\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tfontCharacter: defaultIcon.fontCharacter,\n\t\t\t\t\t\t\t\tfont: {\n\t\t\t\t\t\t\t\t\tid: fontId,\n\t\t\t\t\t\t\t\t\tdefinition,\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\ticonContribution.description,\n\t\t\t\t\t\t);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcollector.error(\n\t\t\t\t\t\t\tnls.localize(\n\t\t\t\t\t\t\t\t\"invalid.icons.default\",\n\t\t\t\t\t\t\t\t\"'configuration.icons.default' must be either a reference to the id of an other theme icon (string) or a icon definition (object) with properties `fontPath` and `fontCharacter`.\",\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tfor (const extension of delta.removed) {\n\t\t\t\tconst extensionValue = <IIconExtensionPoint>extension.value;\n\t\t\t\tfor (const id in extensionValue) {\n\t\t\t\t\ticonRegistry.deregisterIcon(id);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n}\n\nconst formatMap: Record<string, string> = {\n\tttf: \"truetype\",\n\twoff: \"woff\",\n\twoff2: \"woff2\",\n};\n\nfunction getFontId(description: IExtensionDescription, fontPath: string) {\n\treturn posix.join(description.identifier.value, fontPath);\n}\n"],
  "mappings": "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",
  "names": []
}
