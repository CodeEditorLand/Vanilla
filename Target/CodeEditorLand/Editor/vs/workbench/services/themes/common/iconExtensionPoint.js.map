{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/themes/common/iconExtensionPoint.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as nls from '../../../../nls.js';\nimport { ExtensionsRegistry } from '../../extensions/common/extensionsRegistry.js';\nimport { IIconRegistry, Extensions as IconRegistryExtensions } from '../../../../platform/theme/common/iconRegistry.js';\nimport { Registry } from '../../../../platform/registry/common/platform.js';\nimport { ThemeIcon } from '../../../../base/common/themables.js';\nimport * as resources from '../../../../base/common/resources.js';\nimport { IExtensionDescription } from '../../../../platform/extensions/common/extensions.js';\nimport { extname, posix } from '../../../../base/common/path.js';\n\ninterface IIconExtensionPoint {\n\t[id: string]: {\n\t\tdescription: string;\n\t\tdefault: { fontPath: string; fontCharacter: string } | string;\n\t};\n}\n\nconst iconRegistry: IIconRegistry = Registry.as<IIconRegistry>(IconRegistryExtensions.IconContribution);\n\nconst iconReferenceSchema = iconRegistry.getIconReferenceSchema();\nconst iconIdPattern = `^${ThemeIcon.iconNameSegment}(-${ThemeIcon.iconNameSegment})+$`;\n\nconst iconConfigurationExtPoint = ExtensionsRegistry.registerExtensionPoint<IIconExtensionPoint>({\n\textensionPoint: 'icons',\n\tjsonSchema: {\n\t\tdescription: nls.localize('contributes.icons', 'Contributes extension defined themable icons'),\n\t\ttype: 'object',\n\t\tpropertyNames: {\n\t\t\tpattern: iconIdPattern,\n\t\t\tdescription: nls.localize('contributes.icon.id', 'The identifier of the themable icon'),\n\t\t\tpatternErrorMessage: nls.localize('contributes.icon.id.format', 'Identifiers can only contain letters, digits and minuses and need to consist of at least two segments in the form `component-iconname`.'),\n\t\t},\n\t\tadditionalProperties: {\n\t\t\ttype: 'object',\n\t\t\tproperties: {\n\t\t\t\tdescription: {\n\t\t\t\t\ttype: 'string',\n\t\t\t\t\tdescription: nls.localize('contributes.icon.description', 'The description of the themable icon'),\n\t\t\t\t},\n\t\t\t\tdefault: {\n\t\t\t\t\tanyOf: [\n\t\t\t\t\t\ticonReferenceSchema,\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttype: 'object',\n\t\t\t\t\t\t\tproperties: {\n\t\t\t\t\t\t\t\tfontPath: {\n\t\t\t\t\t\t\t\t\tdescription: nls.localize('contributes.icon.default.fontPath', 'The path of the icon font that defines the icon.'),\n\t\t\t\t\t\t\t\t\ttype: 'string'\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tfontCharacter: {\n\t\t\t\t\t\t\t\t\tdescription: nls.localize('contributes.icon.default.fontCharacter', 'The character for the icon in the icon font.'),\n\t\t\t\t\t\t\t\t\ttype: 'string'\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\trequired: ['fontPath', 'fontCharacter'],\n\t\t\t\t\t\t\tdefaultSnippets: [{ body: { fontPath: '${1:myiconfont.woff}', fontCharacter: '${2:\\\\\\\\E001}' } }]\n\t\t\t\t\t\t}\n\t\t\t\t\t],\n\t\t\t\t\tdescription: nls.localize('contributes.icon.default', 'The default of the icon. Either a reference to an extisting ThemeIcon or an icon in an icon font.'),\n\t\t\t\t}\n\t\t\t},\n\t\t\trequired: ['description', 'default'],\n\t\t\tdefaultSnippets: [{ body: { description: '${1:my icon}', default: { fontPath: '${2:myiconfont.woff}', fontCharacter: '${3:\\\\\\\\E001}' } } }]\n\t\t},\n\t\tdefaultSnippets: [{ body: { '${1:my-icon-id}': { description: '${2:my icon}', default: { fontPath: '${3:myiconfont.woff}', fontCharacter: '${4:\\\\\\\\E001}' } } } }]\n\t}\n});\n\nexport class IconExtensionPoint {\n\n\tconstructor() {\n\t\ticonConfigurationExtPoint.setHandler((extensions, delta) => {\n\t\t\tfor (const extension of delta.added) {\n\t\t\t\tconst extensionValue = <IIconExtensionPoint>extension.value;\n\t\t\t\tconst collector = extension.collector;\n\n\t\t\t\tif (!extensionValue || typeof extensionValue !== 'object') {\n\t\t\t\t\tcollector.error(nls.localize('invalid.icons.configuration', \"'configuration.icons' must be an object with the icon names as properties.\"));\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tfor (const id in extensionValue) {\n\t\t\t\t\tif (!id.match(iconIdPattern)) {\n\t\t\t\t\t\tcollector.error(nls.localize('invalid.icons.id.format', \"'configuration.icons' keys represent the icon id and can only contain letter, digits and minuses. They need to consist of at least two segments in the form `component-iconname`.\"));\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\tconst iconContribution = extensionValue[id];\n\t\t\t\t\tif (typeof iconContribution.description !== 'string' || iconContribution.description.length === 0) {\n\t\t\t\t\t\tcollector.error(nls.localize('invalid.icons.description', \"'configuration.icons.description' must be defined and can not be empty\"));\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\tconst defaultIcon = iconContribution.default;\n\t\t\t\t\tif (typeof defaultIcon === 'string') {\n\t\t\t\t\t\ticonRegistry.registerIcon(id, { id: defaultIcon }, iconContribution.description);\n\t\t\t\t\t} else if (typeof defaultIcon === 'object' && typeof defaultIcon.fontPath === 'string' && typeof defaultIcon.fontCharacter === 'string') {\n\t\t\t\t\t\tconst fileExt = extname(defaultIcon.fontPath).substring(1);\n\t\t\t\t\t\tconst format = formatMap[fileExt];\n\t\t\t\t\t\tif (!format) {\n\t\t\t\t\t\t\tcollector.warn(nls.localize('invalid.icons.default.fontPath.extension', \"Expected `contributes.icons.default.fontPath` to have file extension 'woff', woff2' or 'ttf', is '{0}'.\", fileExt));\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tconst extensionLocation = extension.description.extensionLocation;\n\t\t\t\t\t\tconst iconFontLocation = resources.joinPath(extensionLocation, defaultIcon.fontPath);\n\t\t\t\t\t\tif (!resources.isEqualOrParent(iconFontLocation, extensionLocation)) {\n\t\t\t\t\t\t\tcollector.warn(nls.localize('invalid.icons.default.fontPath.path', \"Expected `contributes.icons.default.fontPath` ({0}) to be included inside extension's folder ({0}).\", iconFontLocation.path, extensionLocation.path));\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tconst fontId = getFontId(extension.description, defaultIcon.fontPath);\n\t\t\t\t\t\tconst definition = iconRegistry.registerIconFont(fontId, { src: [{ location: iconFontLocation, format }] });\n\t\t\t\t\t\ticonRegistry.registerIcon(id, {\n\t\t\t\t\t\t\tfontCharacter: defaultIcon.fontCharacter,\n\t\t\t\t\t\t\tfont: {\n\t\t\t\t\t\t\t\tid: fontId,\n\t\t\t\t\t\t\t\tdefinition\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}, iconContribution.description);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcollector.error(nls.localize('invalid.icons.default', \"'configuration.icons.default' must be either a reference to the id of an other theme icon (string) or a icon definition (object) with properties `fontPath` and `fontCharacter`.\"));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tfor (const extension of delta.removed) {\n\t\t\t\tconst extensionValue = <IIconExtensionPoint>extension.value;\n\t\t\t\tfor (const id in extensionValue) {\n\t\t\t\t\ticonRegistry.deregisterIcon(id);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n}\n\nconst formatMap: Record<string, string> = {\n\t'ttf': 'truetype',\n\t'woff': 'woff',\n\t'woff2': 'woff2'\n};\n\nfunction getFontId(description: IExtensionDescription, fontPath: string) {\n\treturn posix.join(description.identifier.value, fontPath);\n}\n"],
  "mappings": "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",
  "names": []
}
