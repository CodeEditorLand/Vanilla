{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/themes/common/themeCompatibility.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { ITextMateThemingRule, IColorMap } from './workbenchThemeService.js';\nimport { Color } from '../../../../base/common/color.js';\nimport * as colorRegistry from '../../../../platform/theme/common/colorRegistry.js';\n\nimport * as editorColorRegistry from '../../../../editor/common/core/editorColorRegistry.js';\n\nconst settingToColorIdMapping: { [settingId: string]: string[] } = {};\nfunction addSettingMapping(settingId: string, colorId: string) {\n\tlet colorIds = settingToColorIdMapping[settingId];\n\tif (!colorIds) {\n\t\tsettingToColorIdMapping[settingId] = colorIds = [];\n\t}\n\tcolorIds.push(colorId);\n}\n\nexport function convertSettings(oldSettings: ITextMateThemingRule[], result: { textMateRules: ITextMateThemingRule[]; colors: IColorMap }): void {\n\tfor (const rule of oldSettings) {\n\t\tresult.textMateRules.push(rule);\n\t\tif (!rule.scope) {\n\t\t\tconst settings = rule.settings;\n\t\t\tif (!settings) {\n\t\t\t\trule.settings = {};\n\t\t\t} else {\n\t\t\t\tfor (const settingKey in settings) {\n\t\t\t\t\tconst key = <keyof typeof settings>settingKey;\n\t\t\t\t\tconst mappings = settingToColorIdMapping[key];\n\t\t\t\t\tif (mappings) {\n\t\t\t\t\t\tconst colorHex = settings[key];\n\t\t\t\t\t\tif (typeof colorHex === 'string') {\n\t\t\t\t\t\t\tconst color = Color.fromHex(colorHex);\n\t\t\t\t\t\t\tfor (const colorId of mappings) {\n\t\t\t\t\t\t\t\tresult.colors[colorId] = color;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (key !== 'foreground' && key !== 'background' && key !== 'fontStyle') {\n\t\t\t\t\t\tdelete settings[key];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\naddSettingMapping('background', colorRegistry.editorBackground);\naddSettingMapping('foreground', colorRegistry.editorForeground);\naddSettingMapping('selection', colorRegistry.editorSelectionBackground);\naddSettingMapping('inactiveSelection', colorRegistry.editorInactiveSelection);\naddSettingMapping('selectionHighlightColor', colorRegistry.editorSelectionHighlight);\naddSettingMapping('findMatchHighlight', colorRegistry.editorFindMatchHighlight);\naddSettingMapping('currentFindMatchHighlight', colorRegistry.editorFindMatch);\naddSettingMapping('hoverHighlight', colorRegistry.editorHoverHighlight);\naddSettingMapping('wordHighlight', 'editor.wordHighlightBackground'); // inlined to avoid editor/contrib dependenies\naddSettingMapping('wordHighlightStrong', 'editor.wordHighlightStrongBackground');\naddSettingMapping('findRangeHighlight', colorRegistry.editorFindRangeHighlight);\naddSettingMapping('findMatchHighlight', 'peekViewResult.matchHighlightBackground');\naddSettingMapping('referenceHighlight', 'peekViewEditor.matchHighlightBackground');\naddSettingMapping('lineHighlight', editorColorRegistry.editorLineHighlight);\naddSettingMapping('rangeHighlight', editorColorRegistry.editorRangeHighlight);\naddSettingMapping('caret', editorColorRegistry.editorCursorForeground);\naddSettingMapping('invisibles', editorColorRegistry.editorWhitespaces);\naddSettingMapping('guide', editorColorRegistry.editorIndentGuide1);\naddSettingMapping('activeGuide', editorColorRegistry.editorActiveIndentGuide1);\n\nconst ansiColorMap = ['ansiBlack', 'ansiRed', 'ansiGreen', 'ansiYellow', 'ansiBlue', 'ansiMagenta', 'ansiCyan', 'ansiWhite',\n\t'ansiBrightBlack', 'ansiBrightRed', 'ansiBrightGreen', 'ansiBrightYellow', 'ansiBrightBlue', 'ansiBrightMagenta', 'ansiBrightCyan', 'ansiBrightWhite'\n];\n\nfor (const color of ansiColorMap) {\n\taddSettingMapping(color, 'terminal.' + color);\n}\n"],
  "mappings": ";;AAKA,SAAS,sBAAsB,iBAAiB;AAChD,SAAS,aAAa;AACtB,YAAY,mBAAmB;AAE/B,YAAY,yBAAyB;AAErC,MAAM,0BAA6D,CAAC;AACpE,SAAS,kBAAkB,WAAmB,SAAiB;AAC9D,MAAI,WAAW,wBAAwB,SAAS;AAChD,MAAI,CAAC,UAAU;AACd,4BAAwB,SAAS,IAAI,WAAW,CAAC;AAAA,EAClD;AACA,WAAS,KAAK,OAAO;AACtB;AANS;AAQF,SAAS,gBAAgB,aAAqC,QAA4E;AAChJ,aAAW,QAAQ,aAAa;AAC/B,WAAO,cAAc,KAAK,IAAI;AAC9B,QAAI,CAAC,KAAK,OAAO;AAChB,YAAM,WAAW,KAAK;AACtB,UAAI,CAAC,UAAU;AACd,aAAK,WAAW,CAAC;AAAA,MAClB,OAAO;AACN,mBAAW,cAAc,UAAU;AAClC,gBAAM,MAA6B;AACnC,gBAAM,WAAW,wBAAwB,GAAG;AAC5C,cAAI,UAAU;AACb,kBAAM,WAAW,SAAS,GAAG;AAC7B,gBAAI,OAAO,aAAa,UAAU;AACjC,oBAAM,QAAQ,MAAM,QAAQ,QAAQ;AACpC,yBAAW,WAAW,UAAU;AAC/B,uBAAO,OAAO,OAAO,IAAI;AAAA,cAC1B;AAAA,YACD;AAAA,UACD;AACA,cAAI,QAAQ,gBAAgB,QAAQ,gBAAgB,QAAQ,aAAa;AACxE,mBAAO,SAAS,GAAG;AAAA,UACpB;AAAA,QACD;AAAA,MACD;AAAA,IACD;AAAA,EACD;AACD;AA3BgB;AA6BhB,kBAAkB,cAAc,cAAc,gBAAgB;AAC9D,kBAAkB,cAAc,cAAc,gBAAgB;AAC9D,kBAAkB,aAAa,cAAc,yBAAyB;AACtE,kBAAkB,qBAAqB,cAAc,uBAAuB;AAC5E,kBAAkB,2BAA2B,cAAc,wBAAwB;AACnF,kBAAkB,sBAAsB,cAAc,wBAAwB;AAC9E,kBAAkB,6BAA6B,cAAc,eAAe;AAC5E,kBAAkB,kBAAkB,cAAc,oBAAoB;AACtE,kBAAkB,iBAAiB,gCAAgC;AACnE,kBAAkB,uBAAuB,sCAAsC;AAC/E,kBAAkB,sBAAsB,cAAc,wBAAwB;AAC9E,kBAAkB,sBAAsB,yCAAyC;AACjF,kBAAkB,sBAAsB,yCAAyC;AACjF,kBAAkB,iBAAiB,oBAAoB,mBAAmB;AAC1E,kBAAkB,kBAAkB,oBAAoB,oBAAoB;AAC5E,kBAAkB,SAAS,oBAAoB,sBAAsB;AACrE,kBAAkB,cAAc,oBAAoB,iBAAiB;AACrE,kBAAkB,SAAS,oBAAoB,kBAAkB;AACjE,kBAAkB,eAAe,oBAAoB,wBAAwB;AAE7E,MAAM,eAAe;AAAA,EAAC;AAAA,EAAa;AAAA,EAAW;AAAA,EAAa;AAAA,EAAc;AAAA,EAAY;AAAA,EAAe;AAAA,EAAY;AAAA,EAC/G;AAAA,EAAmB;AAAA,EAAiB;AAAA,EAAmB;AAAA,EAAoB;AAAA,EAAkB;AAAA,EAAqB;AAAA,EAAkB;AACrI;AAEA,WAAW,SAAS,cAAc;AACjC,oBAAkB,OAAO,cAAc,KAAK;AAC7C;",
  "names": []
}
