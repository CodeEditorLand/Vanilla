import*as O from"../../../../nls.js";import*as K from"../../../../base/common/path.js";import*as T from"../../../../base/common/resources.js";import*as M from"../../../../base/common/json.js";import{ExtensionData as U}from"../common/workbenchThemeService.js";import{getParseErrorMessage as W}from"../../../../base/common/jsonErrorMessages.js";import{asCSSUrl as y}from"../../../../base/browser/dom.js";import{StorageScope as J,StorageTarget as Y}from"../../../../platform/storage/common/storage.js";import{mainWindow as q}from"../../../../base/browser/window.js";class m{static STORAGE_KEY="iconThemeData";id;label;settingsId;description;hasFileIcons;hasFolderIcons;hidesExplorerArrows;isLoaded;location;extensionData;watch;styleSheetContent;constructor(e,s,n){this.id=e,this.label=s,this.settingsId=n,this.isLoaded=!1,this.hasFileIcons=!1,this.hasFolderIcons=!1,this.hidesExplorerArrows=!1}ensureLoaded(e){return this.isLoaded?Promise.resolve(this.styleSheetContent):this.load(e)}reload(e){return this.load(e)}load(e){return e.load(this)}static fromExtensionTheme(e,s,n){const r=n.extensionId+"-"+e.id,f=e.label||K.basename(e.path),E=e.id,u=new m(r,f,E);return u.description=e.description,u.location=s,u.extensionData=n,u.watch=e._watch,u.isLoaded=!1,u}static _noIconTheme=null;static get noIconTheme(){let e=m._noIconTheme;return e||(e=m._noIconTheme=new m("","",null),e.hasFileIcons=!1,e.hasFolderIcons=!1,e.hidesExplorerArrows=!1,e.isLoaded=!0,e.extensionData=void 0,e.watch=!1),e}static createUnloadedTheme(e){const s=new m(e,"","__"+e);return s.isLoaded=!1,s.hasFileIcons=!1,s.hasFolderIcons=!1,s.hidesExplorerArrows=!1,s.extensionData=void 0,s.watch=!1,s}static fromStorageData(e){const s=e.get(m.STORAGE_KEY,J.PROFILE);if(s)try{const n=JSON.parse(s),r=new m("","",null);for(const f in n)switch(f){case"id":case"label":case"description":case"settingsId":case"styleSheetContent":case"hasFileIcons":case"hidesExplorerArrows":case"hasFolderIcons":case"watch":r[f]=n[f];break;case"location":break;case"extensionData":r.extensionData=U.fromJSONObject(n.extensionData);break}return r}catch{return}}toStorage(e){const s=JSON.stringify({id:this.id,label:this.label,description:this.description,settingsId:this.settingsId,styleSheetContent:this.styleSheetContent,hasFileIcons:this.hasFileIcons,hasFolderIcons:this.hasFolderIcons,hidesExplorerArrows:this.hidesExplorerArrows,extensionData:U.toJSONObject(this.extensionData),watch:this.watch});e.store(m.STORAGE_KEY,s,J.PROFILE,Y.MACHINE)}}class ae{constructor(e,s){this.fileService=e;this.languageService=s}load(e){return e.location?this.loadIconThemeDocument(e.location).then(s=>{const n=this.processIconThemeDocument(e.id,e.location,s);return e.styleSheetContent=n.content,e.hasFileIcons=n.hasFileIcons,e.hasFolderIcons=n.hasFolderIcons,e.hidesExplorerArrows=n.hidesExplorerArrows,e.isLoaded=!0,e.styleSheetContent}):Promise.resolve(e.styleSheetContent)}loadIconThemeDocument(e){return this.fileService.readExtensionResource(e).then(s=>{const n=[],r=M.parse(s,n);return n.length>0?Promise.reject(new Error(O.localize("error.cannotparseicontheme","Problems parsing file icons file: {0}",n.map(f=>W(f.error)).join(", ")))):M.getNodeType(r)!=="object"?Promise.reject(new Error(O.localize("error.invalidformat","Invalid format for file icons theme file: Object expected."))):Promise.resolve(r)})}processIconThemeDocument(e,s,n){const r={content:"",hasFileIcons:!1,hasFolderIcons:!1,hidesExplorerArrows:!!n.hidesExplorerArrows};let f=!1;if(!n.iconDefinitions)return r;const E={},u={},G=T.dirname(s);function P(t){return T.joinPath(G,t)}function $(t,c){function o(i,d){if(d){let S=E[d];S||(S=E[d]=[]),S.push(i)}}if(t){let i=".show-file-icons";c&&(i=c+" "+i);const d=".monaco-tl-twistie.collapsible:not(.collapsed) + .monaco-tl-contents";t.folder&&(o(`${i} .folder-icon::before`,t.folder),r.hasFolderIcons=!0),t.folderExpanded&&(o(`${i} ${d} .folder-icon::before`,t.folderExpanded),r.hasFolderIcons=!0);const S=t.rootFolder||t.folder,z=t.rootFolderExpanded||t.folderExpanded;S&&(o(`${i} .rootfolder-icon::before`,S),r.hasFolderIcons=!0),z&&(o(`${i} ${d} .rootfolder-icon::before`,z),r.hasFolderIcons=!0),t.file&&(o(`${i} .file-icon::before`,t.file),r.hasFileIcons=!0);const v=t.folderNames;if(v)for(const l in v){const a=[],F=L(l.toLowerCase(),a);a.push(`.${h(F)}-name-folder-icon`),o(`${i} ${a.join("")}.folder-icon::before`,v[l]),r.hasFolderIcons=!0}const C=t.folderNamesExpanded;if(C)for(const l in C){const a=[],F=L(l.toLowerCase(),a);a.push(`.${h(F)}-name-folder-icon`),o(`${i} ${d} ${a.join("")}.folder-icon::before`,C[l]),r.hasFolderIcons=!0}const N=t.rootFolderNames;if(N)for(const l in N){const a=l.toLowerCase();o(`${i} .${h(a)}-root-name-folder-icon.rootfolder-icon::before`,N[l]),r.hasFolderIcons=!0}const A=t.rootFolderNamesExpanded;if(A)for(const l in A){const a=l.toLowerCase();o(`${i} ${d} .${h(a)}-root-name-folder-icon.rootfolder-icon::before`,A[l]),r.hasFolderIcons=!0}const p=t.languageIds;if(p){!p.jsonc&&p.json&&(p.jsonc=p.json);for(const l in p)o(`${i} .${h(l)}-lang-file-icon.file-icon::before`,p[l]),r.hasFileIcons=!0,f=!0,u[l]=!0}const j=t.fileExtensions;if(j)for(const l in j){const a=[],x=L(l.toLowerCase(),a).split(".");if(x.length){for(let b=0;b<x.length;b++)a.push(`.${h(x.slice(b).join("."))}-ext-file-icon`);a.push(".ext-file-icon")}o(`${i} ${a.join("")}.file-icon::before`,j[l]),r.hasFileIcons=!0,f=!0}const D=t.fileNames;if(D)for(const l in D){const a=[],F=L(l.toLowerCase(),a);a.push(`.${h(F)}-name-file-icon`),a.push(".name-file-icon");const x=F.split(".");if(x.length){for(let b=1;b<x.length;b++)a.push(`.${h(x.slice(b).join("."))}-ext-file-icon`);a.push(".ext-file-icon")}o(`${i} ${a.join("")}.file-icon::before`,D[l]),r.hasFileIcons=!0,f=!0}}}if($(n),$(n.light,".vs"),$(n.highContrast,".hc-black"),$(n.highContrast,".hc-light"),!r.hasFileIcons&&!r.hasFolderIcons)return r;const k=n.showLanguageModeIcons===!0||f&&n.showLanguageModeIcons!==!1,I=[],w=n.fonts,R=new Map;if(Array.isArray(w)){const t=w[0].size||"150%";w.forEach(c=>{const o=c.src.map(i=>`${y(P(i.path))} format('${i.format}')`).join(", ");I.push(`@font-face { src: ${o}; font-family: '${c.id}'; font-weight: ${c.weight}; font-style: ${c.style}; font-display: block; }`),c.size!==void 0&&c.size!==t&&R.set(c.id,c.size)}),I.push(`.show-file-icons .file-icon::before, .show-file-icons .folder-icon::before, .show-file-icons .rootfolder-icon::before { font-family: '${w[0].id}'; font-size: ${t}; }`)}for(const t in E){const c=E[t],o=n.iconDefinitions[t];if(o){if(o.iconPath)I.push(`${c.join(", ")} { content: ' '; background-image: ${y(P(o.iconPath))}; }`);else if(o.fontCharacter||o.fontColor){const i=[];o.fontColor&&i.push(`color: ${o.fontColor};`),o.fontCharacter&&i.push(`content: '${o.fontCharacter}';`);const d=o.fontSize??(o.fontId?R.get(o.fontId):void 0);d&&i.push(`font-size: ${d};`),o.fontId&&i.push(`font-family: ${o.fontId};`),k&&i.push("background-image: unset;"),I.push(`${c.join(", ")} { ${i.join(" ")} }`)}}}if(k){for(const t of this.languageService.getRegisteredLanguageIds())if(!u[t]){const c=this.languageService.getIcon(t);if(c){const o=`.show-file-icons .${h(t)}-lang-file-icon.file-icon::before`;I.push(`${o} { content: ' '; background-image: ${y(c.dark)}; }`),I.push(`.vs ${o} { content: ' '; background-image: ${y(c.light)}; }`)}}}return r.content=I.join(`
`),r}}function L(g,e){const s=g.lastIndexOf("/");if(s>=0){const n=g.substring(0,s);return e.push(`.${h(n)}-name-dir-icon`),g.substring(s+1)}return g}function h(g){return g=g.replace(/[\s]/g,"/"),q.CSS.escape(g)}export{m as FileIconThemeData,ae as FileIconThemeLoader};
