{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/themes/electron-sandbox/nativeHostColorSchemeService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Emitter } from '../../../../base/common/event.js';\nimport { INativeHostService } from '../../../../platform/native/common/native.js';\nimport { InstantiationType, registerSingleton } from '../../../../platform/instantiation/common/extensions.js';\nimport { Disposable } from '../../../../base/common/lifecycle.js';\nimport { IHostColorSchemeService } from '../common/hostColorSchemeService.js';\nimport { INativeWorkbenchEnvironmentService } from '../../environment/electron-sandbox/environmentService.js';\nimport { IStorageService, StorageScope, StorageTarget } from '../../../../platform/storage/common/storage.js';\nimport { isBoolean, isObject } from '../../../../base/common/types.js';\nimport { IColorScheme } from '../../../../platform/window/common/window.js';\n\nexport class NativeHostColorSchemeService extends Disposable implements IHostColorSchemeService {\n\n\tstatic readonly STORAGE_KEY = 'HostColorSchemeData';\n\n\tdeclare readonly _serviceBrand: undefined;\n\n\tprivate readonly _onDidChangeColorScheme = this._register(new Emitter<void>());\n\treadonly onDidChangeColorScheme = this._onDidChangeColorScheme.event;\n\n\tpublic dark: boolean;\n\tpublic highContrast: boolean;\n\n\tconstructor(\n\t\t@INativeHostService private readonly nativeHostService: INativeHostService,\n\t\t@INativeWorkbenchEnvironmentService environmentService: INativeWorkbenchEnvironmentService,\n\t\t@IStorageService private storageService: IStorageService\n\t) {\n\t\tsuper();\n\n\t\t// register listener with the OS\n\t\tthis._register(this.nativeHostService.onDidChangeColorScheme(scheme => this.update(scheme)));\n\n\t\tconst initial = this.getStoredValue() ?? environmentService.window.colorScheme;\n\t\tthis.dark = initial.dark;\n\t\tthis.highContrast = initial.highContrast;\n\n\t\t// fetch the actual value from the OS\n\t\tthis.nativeHostService.getOSColorScheme().then(scheme => this.update(scheme));\n\t}\n\n\tprivate getStoredValue(): IColorScheme | undefined {\n\t\tconst stored = this.storageService.get(NativeHostColorSchemeService.STORAGE_KEY, StorageScope.APPLICATION);\n\t\tif (stored) {\n\t\t\ttry {\n\t\t\t\tconst scheme = JSON.parse(stored);\n\t\t\t\tif (isObject(scheme) && isBoolean(scheme.highContrast) && isBoolean(scheme.dark)) {\n\t\t\t\t\treturn scheme as IColorScheme;\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\t// ignore\n\t\t\t}\n\t\t}\n\t\treturn undefined;\n\t}\n\n\tprivate update({ highContrast, dark }: IColorScheme) {\n\t\tif (dark !== this.dark || highContrast !== this.highContrast) {\n\n\t\t\tthis.dark = dark;\n\t\t\tthis.highContrast = highContrast;\n\t\t\tthis.storageService.store(NativeHostColorSchemeService.STORAGE_KEY, JSON.stringify({ highContrast, dark }), StorageScope.APPLICATION, StorageTarget.MACHINE);\n\t\t\tthis._onDidChangeColorScheme.fire();\n\t\t}\n\t}\n\n}\n\nregisterSingleton(IHostColorSchemeService, NativeHostColorSchemeService, InstantiationType.Delayed);\n"],
  "mappings": ";;;;;;;;;;;;AAKA,SAAS,eAAe;AACxB,SAAS,0BAA0B;AACnC,SAAS,mBAAmB,yBAAyB;AACrD,SAAS,kBAAkB;AAC3B,SAAS,+BAA+B;AACxC,SAAS,0CAA0C;AACnD,SAAS,iBAAiB,cAAc,qBAAqB;AAC7D,SAAS,WAAW,gBAAgB;AACpC,SAAS,oBAAoB;AAEtB,IAAM,+BAAN,cAA2C,WAA8C;AAAA,EAY/F,YACsC,mBACD,oBACX,gBACxB;AACD,UAAM;AAJ+B;AAEZ;AAKzB,SAAK,UAAU,KAAK,kBAAkB,uBAAuB,YAAU,KAAK,OAAO,MAAM,CAAC,CAAC;AAE3F,UAAM,UAAU,KAAK,eAAe,KAAK,mBAAmB,OAAO;AACnE,SAAK,OAAO,QAAQ;AACpB,SAAK,eAAe,QAAQ;AAG5B,SAAK,kBAAkB,iBAAiB,EAAE,KAAK,YAAU,KAAK,OAAO,MAAM,CAAC;AAAA,EAC7E;AAAA,EA3CD,OAegG;AAAA;AAAA;AAAA,EAE/F,OAAgB,cAAc;AAAA,EAIb,0BAA0B,KAAK,UAAU,IAAI,QAAc,CAAC;AAAA,EACpE,yBAAyB,KAAK,wBAAwB;AAAA,EAExD;AAAA,EACA;AAAA,EAoBC,iBAA2C;AAClD,UAAM,SAAS,KAAK,eAAe,IAAI,6BAA6B,aAAa,aAAa,WAAW;AACzG,QAAI,QAAQ;AACX,UAAI;AACH,cAAM,SAAS,KAAK,MAAM,MAAM;AAChC,YAAI,SAAS,MAAM,KAAK,UAAU,OAAO,YAAY,KAAK,UAAU,OAAO,IAAI,GAAG;AACjF,iBAAO;AAAA,QACR;AAAA,MACD,SAAS,GAAG;AAAA,MAEZ;AAAA,IACD;AACA,WAAO;AAAA,EACR;AAAA,EAEQ,OAAO,EAAE,cAAc,KAAK,GAAiB;AACpD,QAAI,SAAS,KAAK,QAAQ,iBAAiB,KAAK,cAAc;AAE7D,WAAK,OAAO;AACZ,WAAK,eAAe;AACpB,WAAK,eAAe,MAAM,6BAA6B,aAAa,KAAK,UAAU,EAAE,cAAc,KAAK,CAAC,GAAG,aAAa,aAAa,cAAc,OAAO;AAC3J,WAAK,wBAAwB,KAAK;AAAA,IACnC;AAAA,EACD;AAED;AAvDa,+BAAN;AAAA,EAaJ;AAAA,EACA;AAAA,EACA;AAAA,GAfU;AAyDb,kBAAkB,yBAAyB,8BAA8B,kBAAkB,OAAO;",
  "names": []
}
