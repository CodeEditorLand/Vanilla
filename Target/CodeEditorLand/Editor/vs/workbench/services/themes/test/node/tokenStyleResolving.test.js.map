{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/themes/test/node/tokenStyleResolving.test.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { ColorThemeData } from '../../common/colorThemeData.js';\nimport assert from 'assert';\nimport { ITokenColorCustomizations } from '../../common/workbenchThemeService.js';\nimport { TokenStyle, getTokenClassificationRegistry } from '../../../../../platform/theme/common/tokenClassificationRegistry.js';\nimport { Color } from '../../../../../base/common/color.js';\nimport { isString } from '../../../../../base/common/types.js';\nimport { FileService } from '../../../../../platform/files/common/fileService.js';\nimport { NullLogService } from '../../../../../platform/log/common/log.js';\nimport { DiskFileSystemProvider } from '../../../../../platform/files/node/diskFileSystemProvider.js';\nimport { FileAccess, Schemas } from '../../../../../base/common/network.js';\nimport { ExtensionResourceLoaderService } from '../../../../../platform/extensionResourceLoader/common/extensionResourceLoaderService.js';\nimport { ITokenStyle } from '../../../../../platform/theme/common/themeService.js';\nimport { mock, TestProductService } from '../../../../test/common/workbenchTestServices.js';\nimport { IRequestService } from '../../../../../platform/request/common/request.js';\nimport { IStorageService } from '../../../../../platform/storage/common/storage.js';\nimport { IEnvironmentService } from '../../../../../platform/environment/common/environment.js';\nimport { IConfigurationService } from '../../../../../platform/configuration/common/configuration.js';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from '../../../../../base/test/common/utils.js';\n\nconst undefinedStyle = { bold: undefined, underline: undefined, italic: undefined };\nconst unsetStyle = { bold: false, underline: false, italic: false };\n\nfunction ts(foreground: string | undefined, styleFlags: { bold?: boolean; underline?: boolean; strikethrough?: boolean; italic?: boolean } | undefined): TokenStyle {\n\tconst foregroundColor = isString(foreground) ? Color.fromHex(foreground) : undefined;\n\treturn new TokenStyle(foregroundColor, styleFlags?.bold, styleFlags?.underline, styleFlags?.strikethrough, styleFlags?.italic);\n}\n\nfunction tokenStyleAsString(ts: TokenStyle | undefined | null) {\n\tif (!ts) {\n\t\treturn 'tokenstyle-undefined';\n\t}\n\tlet str = ts.foreground ? ts.foreground.toString() : 'no-foreground';\n\tif (ts.bold !== undefined) {\n\t\tstr += ts.bold ? '+B' : '-B';\n\t}\n\tif (ts.underline !== undefined) {\n\t\tstr += ts.underline ? '+U' : '-U';\n\t}\n\tif (ts.italic !== undefined) {\n\t\tstr += ts.italic ? '+I' : '-I';\n\t}\n\treturn str;\n}\n\nfunction assertTokenStyle(actual: TokenStyle | undefined | null, expected: TokenStyle | undefined | null, message?: string) {\n\tassert.strictEqual(tokenStyleAsString(actual), tokenStyleAsString(expected), message);\n}\n\nfunction assertTokenStyleMetaData(colorIndex: string[], actual: ITokenStyle | undefined, expected: TokenStyle | undefined | null, message = '') {\n\tif (expected === undefined || expected === null || actual === undefined) {\n\t\tassert.strictEqual(actual, expected, message);\n\t\treturn;\n\t}\n\tassert.strictEqual(actual.bold, expected.bold, 'bold ' + message);\n\tassert.strictEqual(actual.italic, expected.italic, 'italic ' + message);\n\tassert.strictEqual(actual.underline, expected.underline, 'underline ' + message);\n\n\tconst actualForegroundIndex = actual.foreground;\n\tif (actualForegroundIndex && expected.foreground) {\n\t\tassert.strictEqual(colorIndex[actualForegroundIndex], Color.Format.CSS.formatHexA(expected.foreground, true).toUpperCase(), 'foreground ' + message);\n\t} else {\n\t\tassert.strictEqual(actualForegroundIndex, expected.foreground || 0, 'foreground ' + message);\n\t}\n}\n\n\nfunction assertTokenStyles(themeData: ColorThemeData, expected: { [qualifiedClassifier: string]: TokenStyle }, language = 'typescript') {\n\tconst colorIndex = themeData.tokenColorMap;\n\n\tfor (const qualifiedClassifier in expected) {\n\t\tconst [type, ...modifiers] = qualifiedClassifier.split('.');\n\n\t\tconst expectedTokenStyle = expected[qualifiedClassifier];\n\n\t\tconst tokenStyleMetaData = themeData.getTokenStyleMetadata(type, modifiers, language);\n\t\tassertTokenStyleMetaData(colorIndex, tokenStyleMetaData, expectedTokenStyle, qualifiedClassifier);\n\t}\n}\n\nsuite('Themes - TokenStyleResolving', () => {\n\tconst fileService = new FileService(new NullLogService());\n\tconst requestService = new (mock<IRequestService>())();\n\tconst storageService = new (mock<IStorageService>())();\n\tconst environmentService = new (mock<IEnvironmentService>())();\n\tconst configurationService = new (mock<IConfigurationService>())();\n\n\tconst extensionResourceLoaderService = new ExtensionResourceLoaderService(fileService, storageService, TestProductService, environmentService, configurationService, requestService);\n\n\tconst diskFileSystemProvider = new DiskFileSystemProvider(new NullLogService());\n\tfileService.registerProvider(Schemas.file, diskFileSystemProvider);\n\n\tteardown(() => {\n\t\tdiskFileSystemProvider.dispose();\n\t});\n\n\tensureNoDisposablesAreLeakedInTestSuite();\n\n\ttest('color defaults', async () => {\n\t\tconst themeData = ColorThemeData.createUnloadedTheme('foo');\n\t\tthemeData.location = FileAccess.asFileUri('vs/workbench/services/themes/test/node/color-theme.json');\n\t\tawait themeData.ensureLoaded(extensionResourceLoaderService);\n\n\t\tassert.strictEqual(themeData.isLoaded, true);\n\n\t\tassertTokenStyles(themeData, {\n\t\t\t'comment': ts('#000000', undefinedStyle),\n\t\t\t'variable': ts('#111111', unsetStyle),\n\t\t\t'type': ts('#333333', { bold: false, underline: true, italic: false }),\n\t\t\t'function': ts('#333333', unsetStyle),\n\t\t\t'string': ts('#444444', undefinedStyle),\n\t\t\t'number': ts('#555555', undefinedStyle),\n\t\t\t'keyword': ts('#666666', undefinedStyle)\n\t\t});\n\t});\n\n\ttest('resolveScopes', async () => {\n\t\tconst themeData = ColorThemeData.createLoadedEmptyTheme('test', 'test');\n\n\t\tconst customTokenColors: ITokenColorCustomizations = {\n\t\t\ttextMateRules: [\n\t\t\t\t{\n\t\t\t\t\tscope: 'variable',\n\t\t\t\t\tsettings: {\n\t\t\t\t\t\tfontStyle: '',\n\t\t\t\t\t\tforeground: '#F8F8F2'\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tscope: 'keyword.operator',\n\t\t\t\t\tsettings: {\n\t\t\t\t\t\tfontStyle: 'italic bold underline',\n\t\t\t\t\t\tforeground: '#F92672'\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tscope: 'storage',\n\t\t\t\t\tsettings: {\n\t\t\t\t\t\tfontStyle: 'italic',\n\t\t\t\t\t\tforeground: '#F92672'\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tscope: ['storage.type', 'meta.structure.dictionary.json string.quoted.double.json'],\n\t\t\t\t\tsettings: {\n\t\t\t\t\t\tforeground: '#66D9EF'\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tscope: 'entity.name.type, entity.name.class, entity.name.namespace, entity.name.scope-resolution',\n\t\t\t\t\tsettings: {\n\t\t\t\t\t\tfontStyle: 'underline',\n\t\t\t\t\t\tforeground: '#A6E22E'\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t]\n\t\t};\n\n\t\tthemeData.setCustomTokenColors(customTokenColors);\n\n\t\tlet tokenStyle;\n\t\tconst defaultTokenStyle = undefined;\n\n\t\ttokenStyle = themeData.resolveScopes([['variable']]);\n\t\tassertTokenStyle(tokenStyle, ts('#F8F8F2', unsetStyle), 'variable');\n\n\t\ttokenStyle = themeData.resolveScopes([['keyword.operator']]);\n\t\tassertTokenStyle(tokenStyle, ts('#F92672', { italic: true, bold: true, underline: true }), 'keyword');\n\n\t\ttokenStyle = themeData.resolveScopes([['keyword']]);\n\t\tassertTokenStyle(tokenStyle, defaultTokenStyle, 'keyword');\n\n\t\ttokenStyle = themeData.resolveScopes([['keyword.operator']]);\n\t\tassertTokenStyle(tokenStyle, ts('#F92672', { italic: true, bold: true, underline: true }), 'keyword.operator');\n\n\t\ttokenStyle = themeData.resolveScopes([['keyword.operators']]);\n\t\tassertTokenStyle(tokenStyle, defaultTokenStyle, 'keyword.operators');\n\n\t\ttokenStyle = themeData.resolveScopes([['storage']]);\n\t\tassertTokenStyle(tokenStyle, ts('#F92672', { italic: true, bold: false, underline: false }), 'storage');\n\n\t\ttokenStyle = themeData.resolveScopes([['storage.type']]);\n\t\tassertTokenStyle(tokenStyle, ts('#66D9EF', { italic: true, bold: false, underline: false }), 'storage.type');\n\n\t\ttokenStyle = themeData.resolveScopes([['entity.name.class']]);\n\t\tassertTokenStyle(tokenStyle, ts('#A6E22E', { italic: false, bold: false, underline: true }), 'entity.name.class');\n\n\t\ttokenStyle = themeData.resolveScopes([['meta.structure.dictionary.json', 'string.quoted.double.json']]);\n\t\tassertTokenStyle(tokenStyle, ts('#66D9EF', undefined), 'json property');\n\n\t\ttokenStyle = themeData.resolveScopes([['keyword'], ['storage.type'], ['entity.name.class']]);\n\t\tassertTokenStyle(tokenStyle, ts('#66D9EF', { italic: true, bold: false, underline: false }), 'storage.type');\n\n\t});\n\n\n\ttest('resolveScopes - match most specific', async () => {\n\t\tconst themeData = ColorThemeData.createLoadedEmptyTheme('test', 'test');\n\n\t\tconst customTokenColors: ITokenColorCustomizations = {\n\t\t\ttextMateRules: [\n\t\t\t\t{\n\t\t\t\t\tscope: 'entity.name.type',\n\t\t\t\t\tsettings: {\n\t\t\t\t\t\tfontStyle: 'underline',\n\t\t\t\t\t\tforeground: '#A6E22E'\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tscope: 'entity.name.type.class',\n\t\t\t\t\tsettings: {\n\t\t\t\t\t\tforeground: '#FF00FF'\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tscope: 'entity.name',\n\t\t\t\t\tsettings: {\n\t\t\t\t\t\tforeground: '#FFFFFF'\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t]\n\t\t};\n\n\t\tthemeData.setCustomTokenColors(customTokenColors);\n\n\t\tconst tokenStyle = themeData.resolveScopes([['entity.name.type.class']]);\n\t\tassertTokenStyle(tokenStyle, ts('#FF00FF', { italic: false, bold: false, underline: true }), 'entity.name.type.class');\n\n\t});\n\n\n\ttest('rule matching', async () => {\n\t\tconst themeData = ColorThemeData.createLoadedEmptyTheme('test', 'test');\n\t\tthemeData.setCustomColors({ 'editor.foreground': '#000000' });\n\t\tthemeData.setCustomSemanticTokenColors({\n\t\t\tenabled: true,\n\t\t\trules: {\n\t\t\t\t'type': '#ff0000',\n\t\t\t\t'class': { foreground: '#0000ff', italic: true },\n\t\t\t\t'*.static': { bold: true },\n\t\t\t\t'*.declaration': { italic: true },\n\t\t\t\t'*.async.static': { italic: true, underline: true },\n\t\t\t\t'*.async': { foreground: '#000fff', underline: true }\n\t\t\t}\n\t\t});\n\n\t\tassertTokenStyles(themeData, {\n\t\t\t'type': ts('#ff0000', undefinedStyle),\n\t\t\t'type.static': ts('#ff0000', { bold: true }),\n\t\t\t'type.static.declaration': ts('#ff0000', { bold: true, italic: true }),\n\t\t\t'class': ts('#0000ff', { italic: true }),\n\t\t\t'class.static.declaration': ts('#0000ff', { bold: true, italic: true, }),\n\t\t\t'class.declaration': ts('#0000ff', { italic: true }),\n\t\t\t'class.declaration.async': ts('#000fff', { underline: true, italic: true }),\n\t\t\t'class.declaration.async.static': ts('#000fff', { italic: true, underline: true, bold: true }),\n\t\t});\n\n\t});\n\n\ttest('super type', async () => {\n\t\tconst registry = getTokenClassificationRegistry();\n\n\t\tregistry.registerTokenType('myTestInterface', 'A type just for testing', 'interface');\n\t\tregistry.registerTokenType('myTestSubInterface', 'A type just for testing', 'myTestInterface');\n\n\t\ttry {\n\t\t\tconst themeData = ColorThemeData.createLoadedEmptyTheme('test', 'test');\n\t\t\tthemeData.setCustomColors({ 'editor.foreground': '#000000' });\n\t\t\tthemeData.setCustomSemanticTokenColors({\n\t\t\t\tenabled: true,\n\t\t\t\trules: {\n\t\t\t\t\t'interface': '#ff0000',\n\t\t\t\t\t'myTestInterface': { italic: true },\n\t\t\t\t\t'interface.static': { bold: true }\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tassertTokenStyles(themeData, { 'myTestSubInterface': ts('#ff0000', { italic: true }) });\n\t\t\tassertTokenStyles(themeData, { 'myTestSubInterface.static': ts('#ff0000', { italic: true, bold: true }) });\n\n\t\t\tthemeData.setCustomSemanticTokenColors({\n\t\t\t\tenabled: true,\n\t\t\t\trules: {\n\t\t\t\t\t'interface': '#ff0000',\n\t\t\t\t\t'myTestInterface': { foreground: '#ff00ff', italic: true }\n\t\t\t\t}\n\t\t\t});\n\t\t\tassertTokenStyles(themeData, { 'myTestSubInterface': ts('#ff00ff', { italic: true }) });\n\t\t} finally {\n\t\t\tregistry.deregisterTokenType('myTestInterface');\n\t\t\tregistry.deregisterTokenType('myTestSubInterface');\n\t\t}\n\t});\n\n\ttest('language', async () => {\n\t\ttry {\n\t\t\tconst themeData = ColorThemeData.createLoadedEmptyTheme('test', 'test');\n\t\t\tthemeData.setCustomColors({ 'editor.foreground': '#000000' });\n\t\t\tthemeData.setCustomSemanticTokenColors({\n\t\t\t\tenabled: true,\n\t\t\t\trules: {\n\t\t\t\t\t'interface': '#fff000',\n\t\t\t\t\t'interface:java': '#ff0000',\n\t\t\t\t\t'interface.static': { bold: true },\n\t\t\t\t\t'interface.static:typescript': { italic: true }\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tassertTokenStyles(themeData, { 'interface': ts('#ff0000', undefined) }, 'java');\n\t\t\tassertTokenStyles(themeData, { 'interface': ts('#fff000', undefined) }, 'typescript');\n\t\t\tassertTokenStyles(themeData, { 'interface.static': ts('#ff0000', { bold: true }) }, 'java');\n\t\t\tassertTokenStyles(themeData, { 'interface.static': ts('#fff000', { bold: true, italic: true }) }, 'typescript');\n\t\t} finally {\n\t\t}\n\t});\n\n\ttest('language - scope resolving', async () => {\n\t\tconst registry = getTokenClassificationRegistry();\n\n\t\tconst numberOfDefaultRules = registry.getTokenStylingDefaultRules().length;\n\n\t\tregistry.registerTokenStyleDefault(registry.parseTokenSelector('type', 'typescript1'), { scopesToProbe: [['entity.name.type.ts1']] });\n\t\tregistry.registerTokenStyleDefault(registry.parseTokenSelector('type:javascript1'), { scopesToProbe: [['entity.name.type.js1']] });\n\n\t\ttry {\n\t\t\tconst themeData = ColorThemeData.createLoadedEmptyTheme('test', 'test');\n\t\t\tthemeData.setCustomColors({ 'editor.foreground': '#000000' });\n\t\t\tthemeData.setCustomTokenColors({\n\t\t\t\ttextMateRules: [\n\t\t\t\t\t{\n\t\t\t\t\t\tscope: 'entity.name.type',\n\t\t\t\t\t\tsettings: { foreground: '#aa0000' }\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tscope: 'entity.name.type.ts1',\n\t\t\t\t\t\tsettings: { foreground: '#bb0000' }\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t});\n\n\t\t\tassertTokenStyles(themeData, { 'type': ts('#aa0000', undefined) }, 'javascript1');\n\t\t\tassertTokenStyles(themeData, { 'type': ts('#bb0000', undefined) }, 'typescript1');\n\n\t\t} finally {\n\t\t\tregistry.deregisterTokenStyleDefault(registry.parseTokenSelector('type', 'typescript1'));\n\t\t\tregistry.deregisterTokenStyleDefault(registry.parseTokenSelector('type:javascript1'));\n\n\t\t\tassert.strictEqual(registry.getTokenStylingDefaultRules().length, numberOfDefaultRules);\n\t\t}\n\t});\n});\n"],
  "mappings": "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",
  "names": ["ts"]
}
