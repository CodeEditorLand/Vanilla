{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/integrity/electron-sandbox/integrityService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport {\n\ttype AppResourcePath,\n\tFileAccess,\n} from \"../../../../base/common/network.js\";\nimport Severity from \"../../../../base/common/severity.js\";\nimport { URI } from \"../../../../base/common/uri.js\";\nimport { localize } from \"../../../../nls.js\";\nimport { IChecksumService } from \"../../../../platform/checksum/common/checksumService.js\";\nimport {\n\tInstantiationType,\n\tregisterSingleton,\n} from \"../../../../platform/instantiation/common/extensions.js\";\nimport { ILogService } from \"../../../../platform/log/common/log.js\";\nimport {\n\tINotificationService,\n\tNotificationPriority,\n} from \"../../../../platform/notification/common/notification.js\";\nimport { IOpenerService } from \"../../../../platform/opener/common/opener.js\";\nimport { IProductService } from \"../../../../platform/product/common/productService.js\";\nimport {\n\tIStorageService,\n\tStorageScope,\n\tStorageTarget,\n} from \"../../../../platform/storage/common/storage.js\";\nimport {\n\tILifecycleService,\n\tLifecyclePhase,\n} from \"../../lifecycle/common/lifecycle.js\";\nimport {\n\ttype ChecksumPair,\n\tIIntegrityService,\n\ttype IntegrityTestResult,\n} from \"../common/integrity.js\";\n\ninterface IStorageData {\n\treadonly dontShowPrompt: boolean;\n\treadonly commit: string | undefined;\n}\n\nclass IntegrityStorage {\n\tprivate static readonly KEY = \"integrityService\";\n\n\tprivate value: IStorageData | null;\n\n\tconstructor(private readonly storageService: IStorageService) {\n\t\tthis.value = this._read();\n\t}\n\n\tprivate _read(): IStorageData | null {\n\t\tconst jsonValue = this.storageService.get(\n\t\t\tIntegrityStorage.KEY,\n\t\t\tStorageScope.APPLICATION,\n\t\t);\n\t\tif (!jsonValue) {\n\t\t\treturn null;\n\t\t}\n\n\t\ttry {\n\t\t\treturn JSON.parse(jsonValue);\n\t\t} catch (err) {\n\t\t\treturn null;\n\t\t}\n\t}\n\n\tget(): IStorageData | null {\n\t\treturn this.value;\n\t}\n\n\tset(data: IStorageData | null): void {\n\t\tthis.value = data;\n\t\tthis.storageService.store(\n\t\t\tIntegrityStorage.KEY,\n\t\t\tJSON.stringify(this.value),\n\t\t\tStorageScope.APPLICATION,\n\t\t\tStorageTarget.MACHINE,\n\t\t);\n\t}\n}\n\nexport class IntegrityService implements IIntegrityService {\n\tdeclare readonly _serviceBrand: undefined;\n\n\tprivate readonly _storage = new IntegrityStorage(this.storageService);\n\n\tprivate readonly _isPurePromise = this._isPure();\n\tisPure(): Promise<IntegrityTestResult> {\n\t\treturn this._isPurePromise;\n\t}\n\n\tconstructor(\n\t\t@INotificationService private readonly notificationService: INotificationService,\n\t\t@IStorageService private readonly storageService: IStorageService,\n\t\t@ILifecycleService private readonly lifecycleService: ILifecycleService,\n\t\t@IOpenerService private readonly openerService: IOpenerService,\n\t\t@IProductService private readonly productService: IProductService,\n\t\t@IChecksumService private readonly checksumService: IChecksumService,\n\t\t@ILogService private readonly logService: ILogService\n\t) {\n\t\tthis._compute();\n\t}\n\n\tprivate async _compute(): Promise<void> {\n\t\tconst { isPure } = await this.isPure();\n\t\tif (isPure) {\n\t\t\treturn; // all is good\n\t\t}\n\n\t\tthis.logService.warn(`\n\n----------------------------------------------\n***\tInstallation has been modified on disk ***\n----------------------------------------------\n\n`);\n\n\t\tconst storedData = this._storage.get();\n\t\tif (\n\t\t\tstoredData?.dontShowPrompt &&\n\t\t\tstoredData.commit === this.productService.commit\n\t\t) {\n\t\t\treturn; // Do not prompt\n\t\t}\n\n\t\tthis._showNotification();\n\t}\n\n\tprivate async _isPure(): Promise<IntegrityTestResult> {\n\t\tconst expectedChecksums = this.productService.checksums || {};\n\n\t\tawait this.lifecycleService.when(LifecyclePhase.Eventually);\n\n\t\tconst allResults = await Promise.all(\n\t\t\tObject.keys(expectedChecksums).map((filename) =>\n\t\t\t\tthis._resolve(\n\t\t\t\t\t<AppResourcePath>filename,\n\t\t\t\t\texpectedChecksums[filename],\n\t\t\t\t),\n\t\t\t),\n\t\t);\n\n\t\tlet isPure = true;\n\t\tfor (let i = 0, len = allResults.length; i < len; i++) {\n\t\t\tif (!allResults[i].isPure) {\n\t\t\t\tisPure = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\treturn {\n\t\t\tisPure,\n\t\t\tproof: allResults,\n\t\t};\n\t}\n\n\tprivate async _resolve(\n\t\tfilename: AppResourcePath,\n\t\texpected: string,\n\t): Promise<ChecksumPair> {\n\t\tconst fileUri = FileAccess.asFileUri(filename);\n\n\t\ttry {\n\t\t\tconst checksum = await this.checksumService.checksum(fileUri);\n\n\t\t\treturn IntegrityService._createChecksumPair(\n\t\t\t\tfileUri,\n\t\t\t\tchecksum,\n\t\t\t\texpected,\n\t\t\t);\n\t\t} catch (error) {\n\t\t\treturn IntegrityService._createChecksumPair(fileUri, \"\", expected);\n\t\t}\n\t}\n\n\tprivate static _createChecksumPair(\n\t\turi: URI,\n\t\tactual: string,\n\t\texpected: string,\n\t): ChecksumPair {\n\t\treturn {\n\t\t\turi: uri,\n\t\t\tactual: actual,\n\t\t\texpected: expected,\n\t\t\tisPure: actual === expected,\n\t\t};\n\t}\n\n\tprivate _showNotification(): void {\n\t\tconst checksumFailMoreInfoUrl =\n\t\t\tthis.productService.checksumFailMoreInfoUrl;\n\t\tconst message = localize(\n\t\t\t\"integrity.prompt\",\n\t\t\t\"Your {0} installation appears to be corrupt. Please reinstall.\",\n\t\t\tthis.productService.nameShort,\n\t\t);\n\t\tif (checksumFailMoreInfoUrl) {\n\t\t\tthis.notificationService.prompt(\n\t\t\t\tSeverity.Warning,\n\t\t\t\tmessage,\n\t\t\t\t[\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: localize(\n\t\t\t\t\t\t\t\"integrity.moreInformation\",\n\t\t\t\t\t\t\t\"More Information\",\n\t\t\t\t\t\t),\n\t\t\t\t\t\trun: () =>\n\t\t\t\t\t\t\tthis.openerService.open(\n\t\t\t\t\t\t\t\tURI.parse(checksumFailMoreInfoUrl),\n\t\t\t\t\t\t\t),\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: localize(\n\t\t\t\t\t\t\t\"integrity.dontShowAgain\",\n\t\t\t\t\t\t\t\"Don't Show Again\",\n\t\t\t\t\t\t),\n\t\t\t\t\t\tisSecondary: true,\n\t\t\t\t\t\trun: () =>\n\t\t\t\t\t\t\tthis._storage.set({\n\t\t\t\t\t\t\t\tdontShowPrompt: true,\n\t\t\t\t\t\t\t\tcommit: this.productService.commit,\n\t\t\t\t\t\t\t}),\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\t{\n\t\t\t\t\tsticky: true,\n\t\t\t\t\tpriority: NotificationPriority.URGENT,\n\t\t\t\t},\n\t\t\t);\n\t\t} else {\n\t\t\tthis.notificationService.notify({\n\t\t\t\tseverity: Severity.Warning,\n\t\t\t\tmessage,\n\t\t\t\tsticky: true,\n\t\t\t\tpriority: NotificationPriority.URGENT,\n\t\t\t});\n\t\t}\n\t}\n}\n\nregisterSingleton(\n\tIIntegrityService,\n\tIntegrityService,\n\tInstantiationType.Delayed,\n);\n"],
  "mappings": "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",
  "names": []
}
