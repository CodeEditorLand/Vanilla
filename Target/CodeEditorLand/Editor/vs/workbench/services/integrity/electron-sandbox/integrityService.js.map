{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/integrity/electron-sandbox/integrityService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { localize } from '../../../../nls.js';\nimport Severity from '../../../../base/common/severity.js';\nimport { URI } from '../../../../base/common/uri.js';\nimport { ChecksumPair, IIntegrityService, IntegrityTestResult } from '../common/integrity.js';\nimport { ILifecycleService, LifecyclePhase } from '../../lifecycle/common/lifecycle.js';\nimport { IProductService } from '../../../../platform/product/common/productService.js';\nimport { INotificationService, NotificationPriority } from '../../../../platform/notification/common/notification.js';\nimport { IStorageService, StorageScope, StorageTarget } from '../../../../platform/storage/common/storage.js';\nimport { InstantiationType, registerSingleton } from '../../../../platform/instantiation/common/extensions.js';\nimport { IOpenerService } from '../../../../platform/opener/common/opener.js';\nimport { FileAccess, AppResourcePath } from '../../../../base/common/network.js';\nimport { IChecksumService } from '../../../../platform/checksum/common/checksumService.js';\nimport { ILogService } from '../../../../platform/log/common/log.js';\n\ninterface IStorageData {\n\treadonly dontShowPrompt: boolean;\n\treadonly commit: string | undefined;\n}\n\nclass IntegrityStorage {\n\n\tprivate static readonly KEY = 'integrityService';\n\n\tprivate value: IStorageData | null;\n\n\tconstructor(private readonly storageService: IStorageService) {\n\t\tthis.value = this._read();\n\t}\n\n\tprivate _read(): IStorageData | null {\n\t\tconst jsonValue = this.storageService.get(IntegrityStorage.KEY, StorageScope.APPLICATION);\n\t\tif (!jsonValue) {\n\t\t\treturn null;\n\t\t}\n\n\t\ttry {\n\t\t\treturn JSON.parse(jsonValue);\n\t\t} catch (err) {\n\t\t\treturn null;\n\t\t}\n\t}\n\n\tget(): IStorageData | null {\n\t\treturn this.value;\n\t}\n\n\tset(data: IStorageData | null): void {\n\t\tthis.value = data;\n\t\tthis.storageService.store(IntegrityStorage.KEY, JSON.stringify(this.value), StorageScope.APPLICATION, StorageTarget.MACHINE);\n\t}\n}\n\nexport class IntegrityService implements IIntegrityService {\n\n\tdeclare readonly _serviceBrand: undefined;\n\n\tprivate readonly _storage = new IntegrityStorage(this.storageService);\n\n\tprivate readonly _isPurePromise = this._isPure();\n\tisPure(): Promise<IntegrityTestResult> {\n\t\treturn this._isPurePromise;\n\t}\n\n\tconstructor(\n\t\t@INotificationService private readonly notificationService: INotificationService,\n\t\t@IStorageService private readonly storageService: IStorageService,\n\t\t@ILifecycleService private readonly lifecycleService: ILifecycleService,\n\t\t@IOpenerService private readonly openerService: IOpenerService,\n\t\t@IProductService private readonly productService: IProductService,\n\t\t@IChecksumService private readonly checksumService: IChecksumService,\n\t\t@ILogService private readonly logService: ILogService\n\t) {\n\t\tthis._compute();\n\t}\n\n\tprivate async _compute(): Promise<void> {\n\t\tconst { isPure } = await this.isPure();\n\t\tif (isPure) {\n\t\t\treturn; // all is good\n\t\t}\n\n\t\tthis.logService.warn(`\n\n----------------------------------------------\n***\tInstallation has been modified on disk ***\n----------------------------------------------\n\n`);\n\n\t\tconst storedData = this._storage.get();\n\t\tif (storedData?.dontShowPrompt && storedData.commit === this.productService.commit) {\n\t\t\treturn; // Do not prompt\n\t\t}\n\n\t\tthis._showNotification();\n\t}\n\n\tprivate async _isPure(): Promise<IntegrityTestResult> {\n\t\tconst expectedChecksums = this.productService.checksums || {};\n\n\t\tawait this.lifecycleService.when(LifecyclePhase.Eventually);\n\n\t\tconst allResults = await Promise.all(Object.keys(expectedChecksums).map(filename => this._resolve(<AppResourcePath>filename, expectedChecksums[filename])));\n\n\t\tlet isPure = true;\n\t\tfor (let i = 0, len = allResults.length; i < len; i++) {\n\t\t\tif (!allResults[i].isPure) {\n\t\t\t\tisPure = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\treturn {\n\t\t\tisPure,\n\t\t\tproof: allResults\n\t\t};\n\t}\n\n\tprivate async _resolve(filename: AppResourcePath, expected: string): Promise<ChecksumPair> {\n\t\tconst fileUri = FileAccess.asFileUri(filename);\n\n\t\ttry {\n\t\t\tconst checksum = await this.checksumService.checksum(fileUri);\n\n\t\t\treturn IntegrityService._createChecksumPair(fileUri, checksum, expected);\n\t\t} catch (error) {\n\t\t\treturn IntegrityService._createChecksumPair(fileUri, '', expected);\n\t\t}\n\t}\n\n\tprivate static _createChecksumPair(uri: URI, actual: string, expected: string): ChecksumPair {\n\t\treturn {\n\t\t\turi: uri,\n\t\t\tactual: actual,\n\t\t\texpected: expected,\n\t\t\tisPure: (actual === expected)\n\t\t};\n\t}\n\n\tprivate _showNotification(): void {\n\t\tconst checksumFailMoreInfoUrl = this.productService.checksumFailMoreInfoUrl;\n\t\tconst message = localize('integrity.prompt', \"Your {0} installation appears to be corrupt. Please reinstall.\", this.productService.nameShort);\n\t\tif (checksumFailMoreInfoUrl) {\n\t\t\tthis.notificationService.prompt(\n\t\t\t\tSeverity.Warning,\n\t\t\t\tmessage,\n\t\t\t\t[\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: localize('integrity.moreInformation', \"More Information\"),\n\t\t\t\t\t\trun: () => this.openerService.open(URI.parse(checksumFailMoreInfoUrl))\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: localize('integrity.dontShowAgain', \"Don't Show Again\"),\n\t\t\t\t\t\tisSecondary: true,\n\t\t\t\t\t\trun: () => this._storage.set({ dontShowPrompt: true, commit: this.productService.commit })\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\t{\n\t\t\t\t\tsticky: true,\n\t\t\t\t\tpriority: NotificationPriority.URGENT\n\t\t\t\t}\n\t\t\t);\n\t\t} else {\n\t\t\tthis.notificationService.notify({\n\t\t\t\tseverity: Severity.Warning,\n\t\t\t\tmessage,\n\t\t\t\tsticky: true,\n\t\t\t\tpriority: NotificationPriority.URGENT\n\t\t\t});\n\t\t}\n\t}\n}\n\nregisterSingleton(IIntegrityService, IntegrityService, InstantiationType.Delayed);\n"],
  "mappings": "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",
  "names": []
}
