{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/configuration/browser/configurationService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { runWhenWindowIdle } from \"../../../../base/browser/dom.js\";\nimport { mainWindow } from \"../../../../base/browser/window.js\";\nimport {\n\tequals as arrayEquals,\n\tdelta,\n\tdistinct,\n} from \"../../../../base/common/arrays.js\";\nimport {\n\tBarrier,\n\tDelayer,\n\tPromises,\n\tQueue,\n} from \"../../../../base/common/async.js\";\nimport type { IStringDictionary } from \"../../../../base/common/collections.js\";\nimport { toErrorMessage } from \"../../../../base/common/errorMessage.js\";\nimport { Emitter, Event } from \"../../../../base/common/event.js\";\nimport type {\n\tIJSONSchema,\n\tIJSONSchemaMap,\n} from \"../../../../base/common/jsonSchema.js\";\nimport {\n\tDisposable,\n\tDisposableStore,\n} from \"../../../../base/common/lifecycle.js\";\nimport { ResourceMap } from \"../../../../base/common/map.js\";\nimport { equals } from \"../../../../base/common/objects.js\";\nimport { mark } from \"../../../../base/common/performance.js\";\nimport { isUndefined } from \"../../../../base/common/types.js\";\nimport { URI } from \"../../../../base/common/uri.js\";\nimport { localize } from \"../../../../nls.js\";\nimport {\n\tConfigurationTarget,\n\tConfigurationTargetToString,\n\ttype IConfigurationChange,\n\ttype IConfigurationChangeEvent,\n\ttype IConfigurationData,\n\ttype IConfigurationOverrides,\n\tIConfigurationService,\n\ttype IConfigurationUpdateOptions,\n\ttype IConfigurationUpdateOverrides,\n\ttype IConfigurationValue,\n\tisConfigurationOverrides,\n\tisConfigurationUpdateOverrides,\n} from \"../../../../platform/configuration/common/configuration.js\";\nimport {\n\tConfigurationChangeEvent,\n\tConfigurationModel,\n\tmergeChanges,\n} from \"../../../../platform/configuration/common/configurationModels.js\";\nimport {\n\tConfigurationScope,\n\tExtensions,\n\ttype IConfigurationPropertySchema,\n\ttype IConfigurationRegistry,\n\tOVERRIDE_PROPERTY_PATTERN,\n\tallSettings,\n\tapplicationSettings,\n\tconfigurationDefaultsSchemaId,\n\tkeyFromOverrideIdentifiers,\n\tmachineOverridableSettings,\n\tmachineSettings,\n\tresourceLanguageSettingsSchemaId,\n\tresourceSettings,\n\twindowSettings,\n} from \"../../../../platform/configuration/common/configurationRegistry.js\";\nimport {\n\ttype IPolicyConfiguration,\n\tNullPolicyConfiguration,\n\tPolicyConfiguration,\n} from \"../../../../platform/configuration/common/configurations.js\";\nimport type { IFileService } from \"../../../../platform/files/common/files.js\";\nimport type { IInstantiationService } from \"../../../../platform/instantiation/common/instantiation.js\";\nimport {\n\ttype IJSONContributionRegistry,\n\tExtensions as JSONExtensions,\n} from \"../../../../platform/jsonschemas/common/jsonContributionRegistry.js\";\nimport type { ILogService } from \"../../../../platform/log/common/log.js\";\nimport {\n\ttype IPolicyService,\n\tNullPolicyService,\n} from \"../../../../platform/policy/common/policy.js\";\nimport { Registry } from \"../../../../platform/registry/common/platform.js\";\nimport type { IUriIdentityService } from \"../../../../platform/uriIdentity/common/uriIdentity.js\";\nimport type {\n\tIUserDataProfile,\n\tIUserDataProfilesService,\n} from \"../../../../platform/userDataProfile/common/userDataProfile.js\";\nimport {\n\tWorkspace as BaseWorkspace,\n\ttype IAnyWorkspaceIdentifier,\n\ttype IEmptyWorkspaceIdentifier,\n\ttype ISingleFolderWorkspaceIdentifier,\n\tIWorkspaceContextService,\n\ttype IWorkspaceFolder,\n\ttype IWorkspaceFoldersChangeEvent,\n\ttype IWorkspaceFoldersWillChangeEvent,\n\ttype IWorkspaceIdentifier,\n\tWorkbenchState,\n\ttype WorkspaceFolder,\n\tisSingleFolderWorkspaceIdentifier,\n\tisWorkspaceFolder,\n\tisWorkspaceIdentifier,\n\ttoWorkspaceFolder,\n} from \"../../../../platform/workspace/common/workspace.js\";\nimport { IWorkspaceTrustManagementService } from \"../../../../platform/workspace/common/workspaceTrust.js\";\nimport {\n\ttype IStoredWorkspaceFolder,\n\ttype IWorkspaceFolderCreationData,\n\tgetStoredWorkspaceFolder,\n\tisStoredWorkspaceFolder,\n\ttoWorkspaceFolders,\n} from \"../../../../platform/workspaces/common/workspaces.js\";\nimport { workbenchConfigurationNodeBase } from \"../../../common/configuration.js\";\nimport {\n\ttype IWorkbenchContribution,\n\ttype IWorkbenchContributionsRegistry,\n\tExtensions as WorkbenchExtensions,\n\tWorkbenchPhase,\n\tregisterWorkbenchContribution2,\n} from \"../../../common/contributions.js\";\nimport { IWorkbenchAssignmentService } from \"../../assignment/common/assignmentService.js\";\nimport type { IBrowserWorkbenchEnvironmentService } from \"../../environment/browser/environmentService.js\";\nimport { IWorkbenchEnvironmentService } from \"../../environment/common/environmentService.js\";\nimport { IExtensionService } from \"../../extensions/common/extensions.js\";\nimport {\n\tILifecycleService,\n\tLifecyclePhase,\n} from \"../../lifecycle/common/lifecycle.js\";\nimport type { IRemoteAgentService } from \"../../remote/common/remoteAgentService.js\";\nimport type {\n\tDidChangeUserDataProfileEvent,\n\tIUserDataProfileService,\n} from \"../../userDataProfile/common/userDataProfile.js\";\nimport {\n\tAPPLY_ALL_PROFILES_SETTING,\n\tFOLDER_CONFIG_FOLDER_NAME,\n\ttype IConfigurationCache,\n\ttype IWorkbenchConfigurationService,\n\tLOCAL_MACHINE_PROFILE_SCOPES,\n\tLOCAL_MACHINE_SCOPES,\n\tPROFILE_SCOPES,\n\ttype RestrictedSettings,\n\tdefaultSettingsSchemaId,\n\tfolderSettingsSchemaId,\n\tmachineSettingsSchemaId,\n\tprofileSettingsSchemaId,\n\tuserSettingsSchemaId,\n\tworkspaceSettingsSchemaId,\n} from \"../common/configuration.js\";\nimport {\n\tConfigurationEditing,\n\tEditableConfigurationTarget,\n} from \"../common/configurationEditing.js\";\nimport { Configuration } from \"../common/configurationModels.js\";\nimport { IJSONEditingService } from \"../common/jsonEditing.js\";\nimport {\n\tApplicationConfiguration,\n\tDefaultConfiguration,\n\tFolderConfiguration,\n\tRemoteUserConfiguration,\n\tUserConfiguration,\n\tWorkspaceConfiguration,\n} from \"./configuration.js\";\n\nfunction getLocalUserConfigurationScopes(\n\tuserDataProfile: IUserDataProfile,\n\thasRemote: boolean,\n): ConfigurationScope[] | undefined {\n\treturn userDataProfile.isDefault ||\n\t\tuserDataProfile.useDefaultFlags?.settings\n\t\t? hasRemote\n\t\t\t? LOCAL_MACHINE_SCOPES\n\t\t\t: undefined\n\t\t: hasRemote\n\t\t\t? LOCAL_MACHINE_PROFILE_SCOPES\n\t\t\t: PROFILE_SCOPES;\n}\n\nclass Workspace extends BaseWorkspace {\n\tinitialized = false;\n}\n\nexport class WorkspaceService\n\textends Disposable\n\timplements IWorkbenchConfigurationService, IWorkspaceContextService\n{\n\tpublic _serviceBrand: undefined;\n\n\tprivate workspace!: Workspace;\n\tprivate initRemoteUserConfigurationBarrier: Barrier;\n\tprivate completeWorkspaceBarrier: Barrier;\n\tprivate readonly configurationCache: IConfigurationCache;\n\tprivate _configuration: Configuration;\n\tprivate initialized = false;\n\tprivate readonly defaultConfiguration: DefaultConfiguration;\n\tprivate readonly policyConfiguration: IPolicyConfiguration;\n\tprivate applicationConfiguration: ApplicationConfiguration | null = null;\n\tprivate readonly applicationConfigurationDisposables: DisposableStore;\n\tprivate readonly localUserConfiguration: UserConfiguration;\n\tprivate readonly remoteUserConfiguration: RemoteUserConfiguration | null =\n\t\tnull;\n\tprivate readonly workspaceConfiguration: WorkspaceConfiguration;\n\tprivate cachedFolderConfigs: ResourceMap<FolderConfiguration>;\n\tprivate readonly workspaceEditingQueue: Queue<void>;\n\n\tprivate readonly _onDidChangeConfiguration: Emitter<IConfigurationChangeEvent> =\n\t\tthis._register(new Emitter<IConfigurationChangeEvent>());\n\tpublic readonly onDidChangeConfiguration: Event<IConfigurationChangeEvent> =\n\t\tthis._onDidChangeConfiguration.event;\n\n\tprotected readonly _onWillChangeWorkspaceFolders: Emitter<IWorkspaceFoldersWillChangeEvent> =\n\t\tthis._register(new Emitter<IWorkspaceFoldersWillChangeEvent>());\n\tpublic readonly onWillChangeWorkspaceFolders: Event<IWorkspaceFoldersWillChangeEvent> =\n\t\tthis._onWillChangeWorkspaceFolders.event;\n\n\tprivate readonly _onDidChangeWorkspaceFolders: Emitter<IWorkspaceFoldersChangeEvent> =\n\t\tthis._register(new Emitter<IWorkspaceFoldersChangeEvent>());\n\tpublic readonly onDidChangeWorkspaceFolders: Event<IWorkspaceFoldersChangeEvent> =\n\t\tthis._onDidChangeWorkspaceFolders.event;\n\n\tprivate readonly _onDidChangeWorkspaceName: Emitter<void> = this._register(\n\t\tnew Emitter<void>(),\n\t);\n\tpublic readonly onDidChangeWorkspaceName: Event<void> =\n\t\tthis._onDidChangeWorkspaceName.event;\n\n\tprivate readonly _onDidChangeWorkbenchState: Emitter<WorkbenchState> =\n\t\tthis._register(new Emitter<WorkbenchState>());\n\tpublic readonly onDidChangeWorkbenchState: Event<WorkbenchState> =\n\t\tthis._onDidChangeWorkbenchState.event;\n\n\tprivate isWorkspaceTrusted = true;\n\n\tprivate _restrictedSettings: RestrictedSettings = { default: [] };\n\tget restrictedSettings() {\n\t\treturn this._restrictedSettings;\n\t}\n\tprivate readonly _onDidChangeRestrictedSettings = this._register(\n\t\tnew Emitter<RestrictedSettings>(),\n\t);\n\tpublic readonly onDidChangeRestrictedSettings =\n\t\tthis._onDidChangeRestrictedSettings.event;\n\n\tprivate readonly configurationRegistry: IConfigurationRegistry;\n\n\tprivate instantiationService: IInstantiationService | undefined;\n\tprivate configurationEditing: Promise<ConfigurationEditing> | undefined;\n\n\tconstructor(\n\t\t{\n\t\t\tremoteAuthority,\n\t\t\tconfigurationCache,\n\t\t}: {\n\t\t\tremoteAuthority?: string;\n\t\t\tconfigurationCache: IConfigurationCache;\n\t\t},\n\t\tenvironmentService: IBrowserWorkbenchEnvironmentService,\n\t\tprivate readonly userDataProfileService: IUserDataProfileService,\n\t\tprivate readonly userDataProfilesService: IUserDataProfilesService,\n\t\tprivate readonly fileService: IFileService,\n\t\tprivate readonly remoteAgentService: IRemoteAgentService,\n\t\tprivate readonly uriIdentityService: IUriIdentityService,\n\t\tprivate readonly logService: ILogService,\n\t\tpolicyService: IPolicyService,\n\t) {\n\t\tsuper();\n\n\t\tthis.configurationRegistry = Registry.as<IConfigurationRegistry>(\n\t\t\tExtensions.Configuration,\n\t\t);\n\n\t\tthis.initRemoteUserConfigurationBarrier = new Barrier();\n\t\tthis.completeWorkspaceBarrier = new Barrier();\n\t\tthis.defaultConfiguration = this._register(\n\t\t\tnew DefaultConfiguration(\n\t\t\t\tconfigurationCache,\n\t\t\t\tenvironmentService,\n\t\t\t\tlogService,\n\t\t\t),\n\t\t);\n\t\tthis.policyConfiguration =\n\t\t\tpolicyService instanceof NullPolicyService\n\t\t\t\t? new NullPolicyConfiguration()\n\t\t\t\t: this._register(\n\t\t\t\t\t\tnew PolicyConfiguration(\n\t\t\t\t\t\t\tthis.defaultConfiguration,\n\t\t\t\t\t\t\tpolicyService,\n\t\t\t\t\t\t\tlogService,\n\t\t\t\t\t\t),\n\t\t\t\t\t);\n\t\tthis.configurationCache = configurationCache;\n\t\tthis._configuration = new Configuration(\n\t\t\tthis.defaultConfiguration.configurationModel,\n\t\t\tthis.policyConfiguration.configurationModel,\n\t\t\tConfigurationModel.createEmptyModel(logService),\n\t\t\tConfigurationModel.createEmptyModel(logService),\n\t\t\tConfigurationModel.createEmptyModel(logService),\n\t\t\tConfigurationModel.createEmptyModel(logService),\n\t\t\tnew ResourceMap(),\n\t\t\tConfigurationModel.createEmptyModel(logService),\n\t\t\tnew ResourceMap<ConfigurationModel>(),\n\t\t\tthis.workspace,\n\t\t\tlogService,\n\t\t);\n\t\tthis.applicationConfigurationDisposables = this._register(\n\t\t\tnew DisposableStore(),\n\t\t);\n\t\tthis.createApplicationConfiguration();\n\t\tthis.localUserConfiguration = this._register(\n\t\t\tnew UserConfiguration(\n\t\t\t\tuserDataProfileService.currentProfile.settingsResource,\n\t\t\t\tuserDataProfileService.currentProfile.tasksResource,\n\t\t\t\t{\n\t\t\t\t\tscopes: getLocalUserConfigurationScopes(\n\t\t\t\t\t\tuserDataProfileService.currentProfile,\n\t\t\t\t\t\t!!remoteAuthority,\n\t\t\t\t\t),\n\t\t\t\t},\n\t\t\t\tfileService,\n\t\t\t\turiIdentityService,\n\t\t\t\tlogService,\n\t\t\t),\n\t\t);\n\t\tthis.cachedFolderConfigs = new ResourceMap<FolderConfiguration>();\n\t\tthis._register(\n\t\t\tthis.localUserConfiguration.onDidChangeConfiguration(\n\t\t\t\t(userConfiguration) =>\n\t\t\t\t\tthis.onLocalUserConfigurationChanged(userConfiguration),\n\t\t\t),\n\t\t);\n\t\tif (remoteAuthority) {\n\t\t\tconst remoteUserConfiguration = (this.remoteUserConfiguration =\n\t\t\t\tthis._register(\n\t\t\t\t\tnew RemoteUserConfiguration(\n\t\t\t\t\t\tremoteAuthority,\n\t\t\t\t\t\tconfigurationCache,\n\t\t\t\t\t\tfileService,\n\t\t\t\t\t\turiIdentityService,\n\t\t\t\t\t\tremoteAgentService,\n\t\t\t\t\t\tlogService,\n\t\t\t\t\t),\n\t\t\t\t));\n\t\t\tthis._register(\n\t\t\t\tremoteUserConfiguration.onDidInitialize(\n\t\t\t\t\t(remoteUserConfigurationModel) => {\n\t\t\t\t\t\tthis._register(\n\t\t\t\t\t\t\tremoteUserConfiguration.onDidChangeConfiguration(\n\t\t\t\t\t\t\t\t(remoteUserConfigurationModel) =>\n\t\t\t\t\t\t\t\t\tthis.onRemoteUserConfigurationChanged(\n\t\t\t\t\t\t\t\t\t\tremoteUserConfigurationModel,\n\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t);\n\t\t\t\t\t\tthis.onRemoteUserConfigurationChanged(\n\t\t\t\t\t\t\tremoteUserConfigurationModel,\n\t\t\t\t\t\t);\n\t\t\t\t\t\tthis.initRemoteUserConfigurationBarrier.open();\n\t\t\t\t\t},\n\t\t\t\t),\n\t\t\t);\n\t\t} else {\n\t\t\tthis.initRemoteUserConfigurationBarrier.open();\n\t\t}\n\n\t\tthis.workspaceConfiguration = this._register(\n\t\t\tnew WorkspaceConfiguration(\n\t\t\t\tconfigurationCache,\n\t\t\t\tfileService,\n\t\t\t\turiIdentityService,\n\t\t\t\tlogService,\n\t\t\t),\n\t\t);\n\t\tthis._register(\n\t\t\tthis.workspaceConfiguration.onDidUpdateConfiguration(\n\t\t\t\t(fromCache) => {\n\t\t\t\t\tthis.onWorkspaceConfigurationChanged(fromCache).then(() => {\n\t\t\t\t\t\tthis.workspace.initialized =\n\t\t\t\t\t\t\tthis.workspaceConfiguration.initialized;\n\t\t\t\t\t\tthis.checkAndMarkWorkspaceComplete(fromCache);\n\t\t\t\t\t});\n\t\t\t\t},\n\t\t\t),\n\t\t);\n\n\t\tthis._register(\n\t\t\tthis.defaultConfiguration.onDidChangeConfiguration(\n\t\t\t\t({ properties, defaults }) =>\n\t\t\t\t\tthis.onDefaultConfigurationChanged(defaults, properties),\n\t\t\t),\n\t\t);\n\t\tthis._register(\n\t\t\tthis.policyConfiguration.onDidChangeConfiguration(\n\t\t\t\t(configurationModel) =>\n\t\t\t\t\tthis.onPolicyConfigurationChanged(configurationModel),\n\t\t\t),\n\t\t);\n\t\tthis._register(\n\t\t\tuserDataProfileService.onDidChangeCurrentProfile((e) =>\n\t\t\t\tthis.onUserDataProfileChanged(e),\n\t\t\t),\n\t\t);\n\n\t\tthis.workspaceEditingQueue = new Queue<void>();\n\t}\n\n\tprivate createApplicationConfiguration(): void {\n\t\tthis.applicationConfigurationDisposables.clear();\n\t\tif (\n\t\t\tthis.userDataProfileService.currentProfile.isDefault ||\n\t\t\tthis.userDataProfileService.currentProfile.useDefaultFlags?.settings\n\t\t) {\n\t\t\tthis.applicationConfiguration = null;\n\t\t} else {\n\t\t\tthis.applicationConfiguration =\n\t\t\t\tthis.applicationConfigurationDisposables.add(\n\t\t\t\t\tthis._register(\n\t\t\t\t\t\tnew ApplicationConfiguration(\n\t\t\t\t\t\t\tthis.userDataProfilesService,\n\t\t\t\t\t\t\tthis.fileService,\n\t\t\t\t\t\t\tthis.uriIdentityService,\n\t\t\t\t\t\t\tthis.logService,\n\t\t\t\t\t\t),\n\t\t\t\t\t),\n\t\t\t\t);\n\t\t\tthis.applicationConfigurationDisposables.add(\n\t\t\t\tthis.applicationConfiguration.onDidChangeConfiguration(\n\t\t\t\t\t(configurationModel) =>\n\t\t\t\t\t\tthis.onApplicationConfigurationChanged(\n\t\t\t\t\t\t\tconfigurationModel,\n\t\t\t\t\t\t),\n\t\t\t\t),\n\t\t\t);\n\t\t}\n\t}\n\n\t// Workspace Context Service Impl\n\n\tpublic async getCompleteWorkspace(): Promise<Workspace> {\n\t\tawait this.completeWorkspaceBarrier.wait();\n\t\treturn this.getWorkspace();\n\t}\n\n\tpublic getWorkspace(): Workspace {\n\t\treturn this.workspace;\n\t}\n\n\tpublic getWorkbenchState(): WorkbenchState {\n\t\t// Workspace has configuration file\n\t\tif (this.workspace.configuration) {\n\t\t\treturn WorkbenchState.WORKSPACE;\n\t\t}\n\n\t\t// Folder has single root\n\t\tif (this.workspace.folders.length === 1) {\n\t\t\treturn WorkbenchState.FOLDER;\n\t\t}\n\n\t\t// Empty\n\t\treturn WorkbenchState.EMPTY;\n\t}\n\n\tpublic getWorkspaceFolder(resource: URI): IWorkspaceFolder | null {\n\t\treturn this.workspace.getFolder(resource);\n\t}\n\n\tpublic addFolders(\n\t\tfoldersToAdd: IWorkspaceFolderCreationData[],\n\t\tindex?: number,\n\t): Promise<void> {\n\t\treturn this.updateFolders(foldersToAdd, [], index);\n\t}\n\n\tpublic removeFolders(foldersToRemove: URI[]): Promise<void> {\n\t\treturn this.updateFolders([], foldersToRemove);\n\t}\n\n\tpublic async updateFolders(\n\t\tfoldersToAdd: IWorkspaceFolderCreationData[],\n\t\tfoldersToRemove: URI[],\n\t\tindex?: number,\n\t): Promise<void> {\n\t\treturn this.workspaceEditingQueue.queue(() =>\n\t\t\tthis.doUpdateFolders(foldersToAdd, foldersToRemove, index),\n\t\t);\n\t}\n\n\tpublic isInsideWorkspace(resource: URI): boolean {\n\t\treturn !!this.getWorkspaceFolder(resource);\n\t}\n\n\tpublic isCurrentWorkspace(\n\t\tworkspaceIdOrFolder:\n\t\t\t| IWorkspaceIdentifier\n\t\t\t| ISingleFolderWorkspaceIdentifier\n\t\t\t| URI,\n\t): boolean {\n\t\tswitch (this.getWorkbenchState()) {\n\t\t\tcase WorkbenchState.FOLDER: {\n\t\t\t\tlet folderUri: URI | undefined;\n\t\t\t\tif (URI.isUri(workspaceIdOrFolder)) {\n\t\t\t\t\tfolderUri = workspaceIdOrFolder;\n\t\t\t\t} else if (\n\t\t\t\t\tisSingleFolderWorkspaceIdentifier(workspaceIdOrFolder)\n\t\t\t\t) {\n\t\t\t\t\tfolderUri = workspaceIdOrFolder.uri;\n\t\t\t\t}\n\n\t\t\t\treturn (\n\t\t\t\t\tURI.isUri(folderUri) &&\n\t\t\t\t\tthis.uriIdentityService.extUri.isEqual(\n\t\t\t\t\t\tfolderUri,\n\t\t\t\t\t\tthis.workspace.folders[0].uri,\n\t\t\t\t\t)\n\t\t\t\t);\n\t\t\t}\n\t\t\tcase WorkbenchState.WORKSPACE:\n\t\t\t\treturn (\n\t\t\t\t\tisWorkspaceIdentifier(workspaceIdOrFolder) &&\n\t\t\t\t\tthis.workspace.id === workspaceIdOrFolder.id\n\t\t\t\t);\n\t\t}\n\t\treturn false;\n\t}\n\n\tprivate async doUpdateFolders(\n\t\tfoldersToAdd: IWorkspaceFolderCreationData[],\n\t\tfoldersToRemove: URI[],\n\t\tindex?: number,\n\t): Promise<void> {\n\t\tif (this.getWorkbenchState() !== WorkbenchState.WORKSPACE) {\n\t\t\treturn Promise.resolve(undefined); // we need a workspace to begin with\n\t\t}\n\n\t\tif (foldersToAdd.length + foldersToRemove.length === 0) {\n\t\t\treturn Promise.resolve(undefined); // nothing to do\n\t\t}\n\n\t\tlet foldersHaveChanged = false;\n\n\t\t// Remove first (if any)\n\t\tlet currentWorkspaceFolders = this.getWorkspace().folders;\n\t\tlet newStoredFolders: IStoredWorkspaceFolder[] = currentWorkspaceFolders\n\t\t\t.map((f) => f.raw)\n\t\t\t.filter((folder, index): folder is IStoredWorkspaceFolder => {\n\t\t\t\tif (!isStoredWorkspaceFolder(folder)) {\n\t\t\t\t\treturn true; // keep entries which are unrelated\n\t\t\t\t}\n\n\t\t\t\treturn !this.contains(\n\t\t\t\t\tfoldersToRemove,\n\t\t\t\t\tcurrentWorkspaceFolders[index].uri,\n\t\t\t\t); // keep entries which are unrelated\n\t\t\t});\n\n\t\tfoldersHaveChanged =\n\t\t\tcurrentWorkspaceFolders.length !== newStoredFolders.length;\n\n\t\t// Add afterwards (if any)\n\t\tif (foldersToAdd.length) {\n\t\t\t// Recompute current workspace folders if we have folders to add\n\t\t\tconst workspaceConfigPath = this.getWorkspace().configuration!;\n\t\t\tconst workspaceConfigFolder =\n\t\t\t\tthis.uriIdentityService.extUri.dirname(workspaceConfigPath);\n\t\t\tcurrentWorkspaceFolders = toWorkspaceFolders(\n\t\t\t\tnewStoredFolders,\n\t\t\t\tworkspaceConfigPath,\n\t\t\t\tthis.uriIdentityService.extUri,\n\t\t\t);\n\t\t\tconst currentWorkspaceFolderUris = currentWorkspaceFolders.map(\n\t\t\t\t(folder) => folder.uri,\n\t\t\t);\n\n\t\t\tconst storedFoldersToAdd: IStoredWorkspaceFolder[] = [];\n\n\t\t\tfor (const folderToAdd of foldersToAdd) {\n\t\t\t\tconst folderURI = folderToAdd.uri;\n\t\t\t\tif (this.contains(currentWorkspaceFolderUris, folderURI)) {\n\t\t\t\t\tcontinue; // already existing\n\t\t\t\t}\n\t\t\t\ttry {\n\t\t\t\t\tconst result = await this.fileService.stat(folderURI);\n\t\t\t\t\tif (!result.isDirectory) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t} catch (e) {\n\t\t\t\t\t/* Ignore */\n\t\t\t\t}\n\t\t\t\tstoredFoldersToAdd.push(\n\t\t\t\t\tgetStoredWorkspaceFolder(\n\t\t\t\t\t\tfolderURI,\n\t\t\t\t\t\tfalse,\n\t\t\t\t\t\tfolderToAdd.name,\n\t\t\t\t\t\tworkspaceConfigFolder,\n\t\t\t\t\t\tthis.uriIdentityService.extUri,\n\t\t\t\t\t),\n\t\t\t\t);\n\t\t\t}\n\n\t\t\t// Apply to array of newStoredFolders\n\t\t\tif (storedFoldersToAdd.length > 0) {\n\t\t\t\tfoldersHaveChanged = true;\n\n\t\t\t\tif (\n\t\t\t\t\ttypeof index === \"number\" &&\n\t\t\t\t\tindex >= 0 &&\n\t\t\t\t\tindex < newStoredFolders.length\n\t\t\t\t) {\n\t\t\t\t\tnewStoredFolders = newStoredFolders.slice(0);\n\t\t\t\t\tnewStoredFolders.splice(index, 0, ...storedFoldersToAdd);\n\t\t\t\t} else {\n\t\t\t\t\tnewStoredFolders = [\n\t\t\t\t\t\t...newStoredFolders,\n\t\t\t\t\t\t...storedFoldersToAdd,\n\t\t\t\t\t];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Set folders if we recorded a change\n\t\tif (foldersHaveChanged) {\n\t\t\treturn this.setFolders(newStoredFolders);\n\t\t}\n\n\t\treturn Promise.resolve(undefined);\n\t}\n\n\tprivate async setFolders(folders: IStoredWorkspaceFolder[]): Promise<void> {\n\t\tif (!this.instantiationService) {\n\t\t\tthrow new Error(\n\t\t\t\t\"Cannot update workspace folders because workspace service is not yet ready to accept writes.\",\n\t\t\t);\n\t\t}\n\n\t\tawait this.instantiationService.invokeFunction((accessor) =>\n\t\t\tthis.workspaceConfiguration.setFolders(\n\t\t\t\tfolders,\n\t\t\t\taccessor.get(IJSONEditingService),\n\t\t\t),\n\t\t);\n\t\treturn this.onWorkspaceConfigurationChanged(false);\n\t}\n\n\tprivate contains(resources: URI[], toCheck: URI): boolean {\n\t\treturn resources.some((resource) =>\n\t\t\tthis.uriIdentityService.extUri.isEqual(resource, toCheck),\n\t\t);\n\t}\n\n\t// Workspace Configuration Service Impl\n\n\tgetConfigurationData(): IConfigurationData {\n\t\treturn this._configuration.toData();\n\t}\n\n\tgetValue<T>(): T;\n\tgetValue<T>(section: string): T;\n\tgetValue<T>(overrides: IConfigurationOverrides): T;\n\tgetValue<T>(section: string, overrides: IConfigurationOverrides): T;\n\tgetValue(arg1?: any, arg2?: any): any {\n\t\tconst section = typeof arg1 === \"string\" ? arg1 : undefined;\n\t\tconst overrides = isConfigurationOverrides(arg1)\n\t\t\t? arg1\n\t\t\t: isConfigurationOverrides(arg2)\n\t\t\t\t? arg2\n\t\t\t\t: undefined;\n\t\treturn this._configuration.getValue(section, overrides);\n\t}\n\n\tupdateValue(key: string, value: any): Promise<void>;\n\tupdateValue(\n\t\tkey: string,\n\t\tvalue: any,\n\t\toverrides: IConfigurationOverrides | IConfigurationUpdateOverrides,\n\t): Promise<void>;\n\tupdateValue(\n\t\tkey: string,\n\t\tvalue: any,\n\t\ttarget: ConfigurationTarget,\n\t): Promise<void>;\n\tupdateValue(\n\t\tkey: string,\n\t\tvalue: any,\n\t\toverrides: IConfigurationOverrides | IConfigurationUpdateOverrides,\n\t\ttarget: ConfigurationTarget,\n\t\toptions?: IConfigurationUpdateOptions,\n\t): Promise<void>;\n\tasync updateValue(\n\t\tkey: string,\n\t\tvalue: any,\n\t\targ3?: any,\n\t\targ4?: any,\n\t\toptions?: any,\n\t): Promise<void> {\n\t\tconst overrides: IConfigurationUpdateOverrides | undefined =\n\t\t\tisConfigurationUpdateOverrides(arg3)\n\t\t\t\t? arg3\n\t\t\t\t: isConfigurationOverrides(arg3)\n\t\t\t\t\t? {\n\t\t\t\t\t\t\tresource: arg3.resource,\n\t\t\t\t\t\t\toverrideIdentifiers: arg3.overrideIdentifier\n\t\t\t\t\t\t\t\t? [arg3.overrideIdentifier]\n\t\t\t\t\t\t\t\t: undefined,\n\t\t\t\t\t\t}\n\t\t\t\t\t: undefined;\n\t\tconst target: ConfigurationTarget | undefined = overrides ? arg4 : arg3;\n\t\tconst targets: ConfigurationTarget[] = target ? [target] : [];\n\n\t\tif (overrides?.overrideIdentifiers) {\n\t\t\toverrides.overrideIdentifiers = distinct(\n\t\t\t\toverrides.overrideIdentifiers,\n\t\t\t);\n\t\t\toverrides.overrideIdentifiers = overrides.overrideIdentifiers.length\n\t\t\t\t? overrides.overrideIdentifiers\n\t\t\t\t: undefined;\n\t\t}\n\n\t\tif (!targets.length) {\n\t\t\tif (\n\t\t\t\toverrides?.overrideIdentifiers &&\n\t\t\t\toverrides.overrideIdentifiers.length > 1\n\t\t\t) {\n\t\t\t\tthrow new Error(\n\t\t\t\t\t\"Configuration Target is required while updating the value for multiple override identifiers\",\n\t\t\t\t);\n\t\t\t}\n\t\t\tconst inspect = this.inspect(key, {\n\t\t\t\tresource: overrides?.resource,\n\t\t\t\toverrideIdentifier: overrides?.overrideIdentifiers\n\t\t\t\t\t? overrides.overrideIdentifiers[0]\n\t\t\t\t\t: undefined,\n\t\t\t});\n\t\t\ttargets.push(\n\t\t\t\t...this.deriveConfigurationTargets(key, value, inspect),\n\t\t\t);\n\n\t\t\t// Remove the setting, if the value is same as default value and is updated only in user target\n\t\t\tif (\n\t\t\t\tequals(value, inspect.defaultValue) &&\n\t\t\t\ttargets.length === 1 &&\n\t\t\t\t(targets[0] === ConfigurationTarget.USER ||\n\t\t\t\t\ttargets[0] === ConfigurationTarget.USER_LOCAL)\n\t\t\t) {\n\t\t\t\tvalue = undefined;\n\t\t\t}\n\t\t}\n\n\t\tawait Promises.settled(\n\t\t\ttargets.map((target) =>\n\t\t\t\tthis.writeConfigurationValue(\n\t\t\t\t\tkey,\n\t\t\t\t\tvalue,\n\t\t\t\t\ttarget,\n\t\t\t\t\toverrides,\n\t\t\t\t\toptions,\n\t\t\t\t),\n\t\t\t),\n\t\t);\n\t}\n\n\tasync reloadConfiguration(\n\t\ttarget?: ConfigurationTarget | IWorkspaceFolder,\n\t): Promise<void> {\n\t\tif (target === undefined) {\n\t\t\tthis.reloadDefaultConfiguration();\n\t\t\tconst application = await this.reloadApplicationConfiguration(true);\n\t\t\tconst { local, remote } = await this.reloadUserConfiguration();\n\t\t\tawait this.reloadWorkspaceConfiguration();\n\t\t\tawait this.loadConfiguration(application, local, remote, true);\n\t\t\treturn;\n\t\t}\n\n\t\tif (isWorkspaceFolder(target)) {\n\t\t\tawait this.reloadWorkspaceFolderConfiguration(target);\n\t\t\treturn;\n\t\t}\n\n\t\tswitch (target) {\n\t\t\tcase ConfigurationTarget.DEFAULT:\n\t\t\t\tthis.reloadDefaultConfiguration();\n\t\t\t\treturn;\n\n\t\t\tcase ConfigurationTarget.USER: {\n\t\t\t\tconst { local, remote } = await this.reloadUserConfiguration();\n\t\t\t\tawait this.loadConfiguration(\n\t\t\t\t\tthis._configuration.applicationConfiguration,\n\t\t\t\t\tlocal,\n\t\t\t\t\tremote,\n\t\t\t\t\ttrue,\n\t\t\t\t);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tcase ConfigurationTarget.USER_LOCAL:\n\t\t\t\tawait this.reloadLocalUserConfiguration();\n\t\t\t\treturn;\n\n\t\t\tcase ConfigurationTarget.USER_REMOTE:\n\t\t\t\tawait this.reloadRemoteUserConfiguration();\n\t\t\t\treturn;\n\n\t\t\tcase ConfigurationTarget.WORKSPACE:\n\t\t\tcase ConfigurationTarget.WORKSPACE_FOLDER:\n\t\t\t\tawait this.reloadWorkspaceConfiguration();\n\t\t\t\treturn;\n\t\t}\n\t}\n\n\thasCachedConfigurationDefaultsOverrides(): boolean {\n\t\treturn this.defaultConfiguration.hasCachedConfigurationDefaultsOverrides();\n\t}\n\n\tinspect<T>(\n\t\tkey: string,\n\t\toverrides?: IConfigurationOverrides,\n\t): IConfigurationValue<T> {\n\t\treturn this._configuration.inspect<T>(key, overrides);\n\t}\n\n\tkeys(): {\n\t\tdefault: string[];\n\t\tuser: string[];\n\t\tworkspace: string[];\n\t\tworkspaceFolder: string[];\n\t} {\n\t\treturn this._configuration.keys();\n\t}\n\n\tpublic async whenRemoteConfigurationLoaded(): Promise<void> {\n\t\tawait this.initRemoteUserConfigurationBarrier.wait();\n\t}\n\n\t/**\n\t * At present, all workspaces (empty, single-folder, multi-root) in local and remote\n\t * can be initialized without requiring extension host except following case:\n\t *\n\t * A multi root workspace with .code-workspace file that has to be resolved by an extension.\n\t * Because of readonly `rootPath` property in extension API we have to resolve multi root workspace\n\t * before extension host starts so that `rootPath` can be set to first folder.\n\t *\n\t * This restriction is lifted partially for web in `MainThreadWorkspace`.\n\t * In web, we start extension host with empty `rootPath` in this case.\n\t *\n\t * Related root path issue discussion is being tracked here - https://github.com/microsoft/vscode/issues/69335\n\t */\n\tasync initialize(arg: IAnyWorkspaceIdentifier): Promise<void> {\n\t\tmark(\"code/willInitWorkspaceService\");\n\n\t\tconst trigger = this.initialized;\n\t\tthis.initialized = false;\n\t\tconst workspace = await this.createWorkspace(arg);\n\t\tawait this.updateWorkspaceAndInitializeConfiguration(\n\t\t\tworkspace,\n\t\t\ttrigger,\n\t\t);\n\t\tthis.checkAndMarkWorkspaceComplete(false);\n\n\t\tmark(\"code/didInitWorkspaceService\");\n\t}\n\n\tupdateWorkspaceTrust(trusted: boolean): void {\n\t\tif (this.isWorkspaceTrusted !== trusted) {\n\t\t\tthis.isWorkspaceTrusted = trusted;\n\t\t\tconst data = this._configuration.toData();\n\t\t\tconst folderConfigurationModels: (\n\t\t\t\t| ConfigurationModel\n\t\t\t\t| undefined\n\t\t\t)[] = [];\n\t\t\tfor (const folder of this.workspace.folders) {\n\t\t\t\tconst folderConfiguration = this.cachedFolderConfigs.get(\n\t\t\t\t\tfolder.uri,\n\t\t\t\t);\n\t\t\t\tlet configurationModel: ConfigurationModel | undefined;\n\t\t\t\tif (folderConfiguration) {\n\t\t\t\t\tconfigurationModel =\n\t\t\t\t\t\tfolderConfiguration.updateWorkspaceTrust(\n\t\t\t\t\t\t\tthis.isWorkspaceTrusted,\n\t\t\t\t\t\t);\n\t\t\t\t\tthis._configuration.updateFolderConfiguration(\n\t\t\t\t\t\tfolder.uri,\n\t\t\t\t\t\tconfigurationModel,\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t\tfolderConfigurationModels.push(configurationModel);\n\t\t\t}\n\t\t\tif (this.getWorkbenchState() === WorkbenchState.FOLDER) {\n\t\t\t\tif (folderConfigurationModels[0]) {\n\t\t\t\t\tthis._configuration.updateWorkspaceConfiguration(\n\t\t\t\t\t\tfolderConfigurationModels[0],\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthis._configuration.updateWorkspaceConfiguration(\n\t\t\t\t\tthis.workspaceConfiguration.updateWorkspaceTrust(\n\t\t\t\t\t\tthis.isWorkspaceTrusted,\n\t\t\t\t\t),\n\t\t\t\t);\n\t\t\t}\n\t\t\tthis.updateRestrictedSettings();\n\n\t\t\tlet keys: string[] = [];\n\t\t\tif (this.restrictedSettings.userLocal) {\n\t\t\t\tkeys.push(...this.restrictedSettings.userLocal);\n\t\t\t}\n\t\t\tif (this.restrictedSettings.userRemote) {\n\t\t\t\tkeys.push(...this.restrictedSettings.userRemote);\n\t\t\t}\n\t\t\tif (this.restrictedSettings.workspace) {\n\t\t\t\tkeys.push(...this.restrictedSettings.workspace);\n\t\t\t}\n\t\t\tthis.restrictedSettings.workspaceFolder?.forEach((value) =>\n\t\t\t\tkeys.push(...value),\n\t\t\t);\n\t\t\tkeys = distinct(keys);\n\t\t\tif (keys.length) {\n\t\t\t\tthis.triggerConfigurationChange(\n\t\t\t\t\t{ keys, overrides: [] },\n\t\t\t\t\t{ data, workspace: this.workspace },\n\t\t\t\t\tConfigurationTarget.WORKSPACE,\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t}\n\n\tacquireInstantiationService(\n\t\tinstantiationService: IInstantiationService,\n\t): void {\n\t\tthis.instantiationService = instantiationService;\n\t}\n\n\tisSettingAppliedForAllProfiles(key: string): boolean {\n\t\tif (\n\t\t\tthis.configurationRegistry.getConfigurationProperties()[key]\n\t\t\t\t?.scope === ConfigurationScope.APPLICATION\n\t\t) {\n\t\t\treturn true;\n\t\t}\n\t\tconst allProfilesSettings =\n\t\t\tthis.getValue<string[]>(APPLY_ALL_PROFILES_SETTING) ?? [];\n\t\treturn (\n\t\t\tArray.isArray(allProfilesSettings) &&\n\t\t\tallProfilesSettings.includes(key)\n\t\t);\n\t}\n\n\tprivate async createWorkspace(\n\t\targ: IAnyWorkspaceIdentifier,\n\t): Promise<Workspace> {\n\t\tif (isWorkspaceIdentifier(arg)) {\n\t\t\treturn this.createMultiFolderWorkspace(arg);\n\t\t}\n\n\t\tif (isSingleFolderWorkspaceIdentifier(arg)) {\n\t\t\treturn this.createSingleFolderWorkspace(arg);\n\t\t}\n\n\t\treturn this.createEmptyWorkspace(arg);\n\t}\n\n\tprivate async createMultiFolderWorkspace(\n\t\tworkspaceIdentifier: IWorkspaceIdentifier,\n\t): Promise<Workspace> {\n\t\tawait this.workspaceConfiguration.initialize(\n\t\t\t{\n\t\t\t\tid: workspaceIdentifier.id,\n\t\t\t\tconfigPath: workspaceIdentifier.configPath,\n\t\t\t},\n\t\t\tthis.isWorkspaceTrusted,\n\t\t);\n\t\tconst workspaceConfigPath = workspaceIdentifier.configPath;\n\t\tconst workspaceFolders = toWorkspaceFolders(\n\t\t\tthis.workspaceConfiguration.getFolders(),\n\t\t\tworkspaceConfigPath,\n\t\t\tthis.uriIdentityService.extUri,\n\t\t);\n\t\tconst workspaceId = workspaceIdentifier.id;\n\t\tconst workspace = new Workspace(\n\t\t\tworkspaceId,\n\t\t\tworkspaceFolders,\n\t\t\tthis.workspaceConfiguration.isTransient(),\n\t\t\tworkspaceConfigPath,\n\t\t\t(uri) => this.uriIdentityService.extUri.ignorePathCasing(uri),\n\t\t);\n\t\tworkspace.initialized = this.workspaceConfiguration.initialized;\n\t\treturn workspace;\n\t}\n\n\tprivate createSingleFolderWorkspace(\n\t\tsingleFolderWorkspaceIdentifier: ISingleFolderWorkspaceIdentifier,\n\t): Workspace {\n\t\tconst workspace = new Workspace(\n\t\t\tsingleFolderWorkspaceIdentifier.id,\n\t\t\t[toWorkspaceFolder(singleFolderWorkspaceIdentifier.uri)],\n\t\t\tfalse,\n\t\t\tnull,\n\t\t\t(uri) => this.uriIdentityService.extUri.ignorePathCasing(uri),\n\t\t);\n\t\tworkspace.initialized = true;\n\t\treturn workspace;\n\t}\n\n\tprivate createEmptyWorkspace(\n\t\temptyWorkspaceIdentifier: IEmptyWorkspaceIdentifier,\n\t): Promise<Workspace> {\n\t\tconst workspace = new Workspace(\n\t\t\temptyWorkspaceIdentifier.id,\n\t\t\t[],\n\t\t\tfalse,\n\t\t\tnull,\n\t\t\t(uri) => this.uriIdentityService.extUri.ignorePathCasing(uri),\n\t\t);\n\t\tworkspace.initialized = true;\n\t\treturn Promise.resolve(workspace);\n\t}\n\n\tprivate checkAndMarkWorkspaceComplete(fromCache: boolean): void {\n\t\tif (\n\t\t\t!this.completeWorkspaceBarrier.isOpen() &&\n\t\t\tthis.workspace.initialized\n\t\t) {\n\t\t\tthis.completeWorkspaceBarrier.open();\n\t\t\tthis.validateWorkspaceFoldersAndReload(fromCache);\n\t\t}\n\t}\n\n\tprivate async updateWorkspaceAndInitializeConfiguration(\n\t\tworkspace: Workspace,\n\t\ttrigger: boolean,\n\t): Promise<void> {\n\t\tconst hasWorkspaceBefore = !!this.workspace;\n\t\tlet previousState: WorkbenchState | undefined;\n\t\tlet previousWorkspacePath: string | undefined;\n\t\tlet previousFolders: WorkspaceFolder[] = [];\n\n\t\tif (hasWorkspaceBefore) {\n\t\t\tpreviousState = this.getWorkbenchState();\n\t\t\tpreviousWorkspacePath = this.workspace.configuration\n\t\t\t\t? this.workspace.configuration.fsPath\n\t\t\t\t: undefined;\n\t\t\tpreviousFolders = this.workspace.folders;\n\t\t\tthis.workspace.update(workspace);\n\t\t} else {\n\t\t\tthis.workspace = workspace;\n\t\t}\n\n\t\tawait this.initializeConfiguration(trigger);\n\n\t\t// Trigger changes after configuration initialization so that configuration is up to date.\n\t\tif (hasWorkspaceBefore) {\n\t\t\tconst newState = this.getWorkbenchState();\n\t\t\tif (previousState && newState !== previousState) {\n\t\t\t\tthis._onDidChangeWorkbenchState.fire(newState);\n\t\t\t}\n\n\t\t\tconst newWorkspacePath = this.workspace.configuration\n\t\t\t\t? this.workspace.configuration.fsPath\n\t\t\t\t: undefined;\n\t\t\tif (\n\t\t\t\t(previousWorkspacePath &&\n\t\t\t\t\tnewWorkspacePath !== previousWorkspacePath) ||\n\t\t\t\tnewState !== previousState\n\t\t\t) {\n\t\t\t\tthis._onDidChangeWorkspaceName.fire();\n\t\t\t}\n\n\t\t\tconst folderChanges = this.compareFolders(\n\t\t\t\tpreviousFolders,\n\t\t\t\tthis.workspace.folders,\n\t\t\t);\n\t\t\tif (\n\t\t\t\tfolderChanges &&\n\t\t\t\t(folderChanges.added.length ||\n\t\t\t\t\tfolderChanges.removed.length ||\n\t\t\t\t\tfolderChanges.changed.length)\n\t\t\t) {\n\t\t\t\tawait this.handleWillChangeWorkspaceFolders(\n\t\t\t\t\tfolderChanges,\n\t\t\t\t\tfalse,\n\t\t\t\t);\n\t\t\t\tthis._onDidChangeWorkspaceFolders.fire(folderChanges);\n\t\t\t}\n\t\t}\n\n\t\tif (!this.localUserConfiguration.hasTasksLoaded) {\n\t\t\t// Reload local user configuration again to load user tasks\n\t\t\tthis._register(\n\t\t\t\trunWhenWindowIdle(mainWindow, () =>\n\t\t\t\t\tthis.reloadLocalUserConfiguration(\n\t\t\t\t\t\tfalse,\n\t\t\t\t\t\tthis._configuration.localUserConfiguration,\n\t\t\t\t\t),\n\t\t\t\t),\n\t\t\t);\n\t\t}\n\t}\n\n\tprivate compareFolders(\n\t\tcurrentFolders: IWorkspaceFolder[],\n\t\tnewFolders: IWorkspaceFolder[],\n\t): IWorkspaceFoldersChangeEvent {\n\t\tconst result: IWorkspaceFoldersChangeEvent = {\n\t\t\tadded: [],\n\t\t\tremoved: [],\n\t\t\tchanged: [],\n\t\t};\n\t\tresult.added = newFolders.filter(\n\t\t\t(newFolder) =>\n\t\t\t\t!currentFolders.some(\n\t\t\t\t\t(currentFolder) =>\n\t\t\t\t\t\tnewFolder.uri.toString() ===\n\t\t\t\t\t\tcurrentFolder.uri.toString(),\n\t\t\t\t),\n\t\t);\n\t\tfor (\n\t\t\tlet currentIndex = 0;\n\t\t\tcurrentIndex < currentFolders.length;\n\t\t\tcurrentIndex++\n\t\t) {\n\t\t\tconst currentFolder = currentFolders[currentIndex];\n\t\t\tlet newIndex = 0;\n\t\t\tfor (\n\t\t\t\tnewIndex = 0;\n\t\t\t\tnewIndex < newFolders.length &&\n\t\t\t\tcurrentFolder.uri.toString() !==\n\t\t\t\t\tnewFolders[newIndex].uri.toString();\n\t\t\t\tnewIndex++\n\t\t\t) {}\n\t\t\tif (newIndex < newFolders.length) {\n\t\t\t\tif (\n\t\t\t\t\tcurrentIndex !== newIndex ||\n\t\t\t\t\tcurrentFolder.name !== newFolders[newIndex].name\n\t\t\t\t) {\n\t\t\t\t\tresult.changed.push(currentFolder);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tresult.removed.push(currentFolder);\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n\n\tprivate async initializeConfiguration(trigger: boolean): Promise<void> {\n\t\tawait this.defaultConfiguration.initialize();\n\n\t\tconst initPolicyConfigurationPromise =\n\t\t\tthis.policyConfiguration.initialize();\n\t\tconst initApplicationConfigurationPromise = this\n\t\t\t.applicationConfiguration\n\t\t\t? this.applicationConfiguration.initialize()\n\t\t\t: Promise.resolve(\n\t\t\t\t\tConfigurationModel.createEmptyModel(this.logService),\n\t\t\t\t);\n\t\tconst initUserConfiguration = async () => {\n\t\t\tmark(\"code/willInitUserConfiguration\");\n\t\t\tconst result = await Promise.all([\n\t\t\t\tthis.localUserConfiguration.initialize(),\n\t\t\t\tthis.remoteUserConfiguration\n\t\t\t\t\t? this.remoteUserConfiguration.initialize()\n\t\t\t\t\t: Promise.resolve(\n\t\t\t\t\t\t\tConfigurationModel.createEmptyModel(\n\t\t\t\t\t\t\t\tthis.logService,\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t),\n\t\t\t]);\n\t\t\tif (this.applicationConfiguration) {\n\t\t\t\tconst applicationConfigurationModel =\n\t\t\t\t\tawait initApplicationConfigurationPromise;\n\t\t\t\tresult[0] = this.localUserConfiguration.reparse({\n\t\t\t\t\texclude: applicationConfigurationModel.getValue(\n\t\t\t\t\t\tAPPLY_ALL_PROFILES_SETTING,\n\t\t\t\t\t),\n\t\t\t\t});\n\t\t\t}\n\t\t\tmark(\"code/didInitUserConfiguration\");\n\t\t\treturn result;\n\t\t};\n\n\t\tconst [, application, [local, remote]] = await Promise.all([\n\t\t\tinitPolicyConfigurationPromise,\n\t\t\tinitApplicationConfigurationPromise,\n\t\t\tinitUserConfiguration(),\n\t\t]);\n\n\t\tmark(\"code/willInitWorkspaceConfiguration\");\n\t\tawait this.loadConfiguration(application, local, remote, trigger);\n\t\tmark(\"code/didInitWorkspaceConfiguration\");\n\t}\n\n\tprivate reloadDefaultConfiguration(): void {\n\t\tthis.onDefaultConfigurationChanged(this.defaultConfiguration.reload());\n\t}\n\n\tprivate async reloadApplicationConfiguration(\n\t\tdonotTrigger?: boolean,\n\t): Promise<ConfigurationModel> {\n\t\tif (!this.applicationConfiguration) {\n\t\t\treturn ConfigurationModel.createEmptyModel(this.logService);\n\t\t}\n\t\tconst model = await this.applicationConfiguration.loadConfiguration();\n\t\tif (!donotTrigger) {\n\t\t\tthis.onApplicationConfigurationChanged(model);\n\t\t}\n\t\treturn model;\n\t}\n\n\tprivate async reloadUserConfiguration(): Promise<{\n\t\tlocal: ConfigurationModel;\n\t\tremote: ConfigurationModel;\n\t}> {\n\t\tconst [local, remote] = await Promise.all([\n\t\t\tthis.reloadLocalUserConfiguration(true),\n\t\t\tthis.reloadRemoteUserConfiguration(true),\n\t\t]);\n\t\treturn { local, remote };\n\t}\n\n\tasync reloadLocalUserConfiguration(\n\t\tdonotTrigger?: boolean,\n\t\tsettingsConfiguration?: ConfigurationModel,\n\t): Promise<ConfigurationModel> {\n\t\tconst model = await this.localUserConfiguration.reload(\n\t\t\tsettingsConfiguration,\n\t\t);\n\t\tif (!donotTrigger) {\n\t\t\tthis.onLocalUserConfigurationChanged(model);\n\t\t}\n\t\treturn model;\n\t}\n\n\tprivate async reloadRemoteUserConfiguration(\n\t\tdonotTrigger?: boolean,\n\t): Promise<ConfigurationModel> {\n\t\tif (this.remoteUserConfiguration) {\n\t\t\tconst model = await this.remoteUserConfiguration.reload();\n\t\t\tif (!donotTrigger) {\n\t\t\t\tthis.onRemoteUserConfigurationChanged(model);\n\t\t\t}\n\t\t\treturn model;\n\t\t}\n\t\treturn ConfigurationModel.createEmptyModel(this.logService);\n\t}\n\n\tprivate async reloadWorkspaceConfiguration(): Promise<void> {\n\t\tconst workbenchState = this.getWorkbenchState();\n\t\tif (workbenchState === WorkbenchState.FOLDER) {\n\t\t\treturn this.onWorkspaceFolderConfigurationChanged(\n\t\t\t\tthis.workspace.folders[0],\n\t\t\t);\n\t\t}\n\t\tif (workbenchState === WorkbenchState.WORKSPACE) {\n\t\t\treturn this.workspaceConfiguration\n\t\t\t\t.reload()\n\t\t\t\t.then(() => this.onWorkspaceConfigurationChanged(false));\n\t\t}\n\t}\n\n\tprivate reloadWorkspaceFolderConfiguration(\n\t\tfolder: IWorkspaceFolder,\n\t): Promise<void> {\n\t\treturn this.onWorkspaceFolderConfigurationChanged(folder);\n\t}\n\n\tprivate async loadConfiguration(\n\t\tapplicationConfigurationModel: ConfigurationModel,\n\t\tuserConfigurationModel: ConfigurationModel,\n\t\tremoteUserConfigurationModel: ConfigurationModel,\n\t\ttrigger: boolean,\n\t): Promise<void> {\n\t\t// reset caches\n\t\tthis.cachedFolderConfigs = new ResourceMap<FolderConfiguration>();\n\n\t\tconst folders = this.workspace.folders;\n\t\tconst folderConfigurations =\n\t\t\tawait this.loadFolderConfigurations(folders);\n\n\t\tconst workspaceConfiguration =\n\t\t\tthis.getWorkspaceConfigurationModel(folderConfigurations);\n\t\tconst folderConfigurationModels = new ResourceMap<ConfigurationModel>();\n\t\tfolderConfigurations.forEach((folderConfiguration, index) =>\n\t\t\tfolderConfigurationModels.set(\n\t\t\t\tfolders[index].uri,\n\t\t\t\tfolderConfiguration,\n\t\t\t),\n\t\t);\n\n\t\tconst currentConfiguration = this._configuration;\n\t\tthis._configuration = new Configuration(\n\t\t\tthis.defaultConfiguration.configurationModel,\n\t\t\tthis.policyConfiguration.configurationModel,\n\t\t\tapplicationConfigurationModel,\n\t\t\tuserConfigurationModel,\n\t\t\tremoteUserConfigurationModel,\n\t\t\tworkspaceConfiguration,\n\t\t\tfolderConfigurationModels,\n\t\t\tConfigurationModel.createEmptyModel(this.logService),\n\t\t\tnew ResourceMap<ConfigurationModel>(),\n\t\t\tthis.workspace,\n\t\t\tthis.logService,\n\t\t);\n\n\t\tthis.initialized = true;\n\n\t\tif (trigger) {\n\t\t\tconst change = this._configuration.compare(currentConfiguration);\n\t\t\tthis.triggerConfigurationChange(\n\t\t\t\tchange,\n\t\t\t\t{\n\t\t\t\t\tdata: currentConfiguration.toData(),\n\t\t\t\t\tworkspace: this.workspace,\n\t\t\t\t},\n\t\t\t\tConfigurationTarget.WORKSPACE,\n\t\t\t);\n\t\t}\n\n\t\tthis.updateRestrictedSettings();\n\t}\n\n\tprivate getWorkspaceConfigurationModel(\n\t\tfolderConfigurations: ConfigurationModel[],\n\t): ConfigurationModel {\n\t\tswitch (this.getWorkbenchState()) {\n\t\t\tcase WorkbenchState.FOLDER:\n\t\t\t\treturn folderConfigurations[0];\n\t\t\tcase WorkbenchState.WORKSPACE:\n\t\t\t\treturn this.workspaceConfiguration.getConfiguration();\n\t\t\tdefault:\n\t\t\t\treturn ConfigurationModel.createEmptyModel(this.logService);\n\t\t}\n\t}\n\n\tprivate onUserDataProfileChanged(e: DidChangeUserDataProfileEvent): void {\n\t\te.join(\n\t\t\t(async () => {\n\t\t\t\tconst promises: Promise<ConfigurationModel>[] = [];\n\t\t\t\tpromises.push(\n\t\t\t\t\tthis.localUserConfiguration.reset(\n\t\t\t\t\t\te.profile.settingsResource,\n\t\t\t\t\t\te.profile.tasksResource,\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tscopes: getLocalUserConfigurationScopes(\n\t\t\t\t\t\t\t\te.profile,\n\t\t\t\t\t\t\t\t!!this.remoteUserConfiguration,\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t},\n\t\t\t\t\t),\n\t\t\t\t);\n\t\t\t\tif (\n\t\t\t\t\te.previous.isDefault !== e.profile.isDefault ||\n\t\t\t\t\t!!e.previous.useDefaultFlags?.settings !==\n\t\t\t\t\t\t!!e.profile.useDefaultFlags?.settings\n\t\t\t\t) {\n\t\t\t\t\tthis.createApplicationConfiguration();\n\t\t\t\t\tif (this.applicationConfiguration) {\n\t\t\t\t\t\tpromises.push(\n\t\t\t\t\t\t\tthis.reloadApplicationConfiguration(true),\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tlet [localUser, application] = await Promise.all(promises);\n\t\t\t\tapplication =\n\t\t\t\t\tapplication ?? this._configuration.applicationConfiguration;\n\t\t\t\tif (this.applicationConfiguration) {\n\t\t\t\t\tlocalUser = this.localUserConfiguration.reparse({\n\t\t\t\t\t\texclude: application.getValue(\n\t\t\t\t\t\t\tAPPLY_ALL_PROFILES_SETTING,\n\t\t\t\t\t\t),\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\tawait this.loadConfiguration(\n\t\t\t\t\tapplication,\n\t\t\t\t\tlocalUser,\n\t\t\t\t\tthis._configuration.remoteUserConfiguration,\n\t\t\t\t\ttrue,\n\t\t\t\t);\n\t\t\t})(),\n\t\t);\n\t}\n\n\tprivate onDefaultConfigurationChanged(\n\t\tconfigurationModel: ConfigurationModel,\n\t\tproperties?: string[],\n\t): void {\n\t\tif (this.workspace) {\n\t\t\tconst previousData = this._configuration.toData();\n\t\t\tconst change =\n\t\t\t\tthis._configuration.compareAndUpdateDefaultConfiguration(\n\t\t\t\t\tconfigurationModel,\n\t\t\t\t\tproperties,\n\t\t\t\t);\n\t\t\tif (this.applicationConfiguration) {\n\t\t\t\tthis._configuration.updateApplicationConfiguration(\n\t\t\t\t\tthis.applicationConfiguration.reparse(),\n\t\t\t\t);\n\t\t\t}\n\t\t\tif (this.remoteUserConfiguration) {\n\t\t\t\tthis._configuration.updateLocalUserConfiguration(\n\t\t\t\t\tthis.localUserConfiguration.reparse(),\n\t\t\t\t);\n\t\t\t\tthis._configuration.updateRemoteUserConfiguration(\n\t\t\t\t\tthis.remoteUserConfiguration.reparse(),\n\t\t\t\t);\n\t\t\t}\n\t\t\tif (this.getWorkbenchState() === WorkbenchState.FOLDER) {\n\t\t\t\tconst folderConfiguration = this.cachedFolderConfigs.get(\n\t\t\t\t\tthis.workspace.folders[0].uri,\n\t\t\t\t);\n\t\t\t\tif (folderConfiguration) {\n\t\t\t\t\tthis._configuration.updateWorkspaceConfiguration(\n\t\t\t\t\t\tfolderConfiguration.reparse(),\n\t\t\t\t\t);\n\t\t\t\t\tthis._configuration.updateFolderConfiguration(\n\t\t\t\t\t\tthis.workspace.folders[0].uri,\n\t\t\t\t\t\tfolderConfiguration.reparse(),\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthis._configuration.updateWorkspaceConfiguration(\n\t\t\t\t\tthis.workspaceConfiguration.reparseWorkspaceSettings(),\n\t\t\t\t);\n\t\t\t\tfor (const folder of this.workspace.folders) {\n\t\t\t\t\tconst folderConfiguration = this.cachedFolderConfigs.get(\n\t\t\t\t\t\tfolder.uri,\n\t\t\t\t\t);\n\t\t\t\t\tif (folderConfiguration) {\n\t\t\t\t\t\tthis._configuration.updateFolderConfiguration(\n\t\t\t\t\t\t\tfolder.uri,\n\t\t\t\t\t\t\tfolderConfiguration.reparse(),\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis.triggerConfigurationChange(\n\t\t\t\tchange,\n\t\t\t\t{ data: previousData, workspace: this.workspace },\n\t\t\t\tConfigurationTarget.DEFAULT,\n\t\t\t);\n\t\t\tthis.updateRestrictedSettings();\n\t\t}\n\t}\n\n\tprivate onPolicyConfigurationChanged(\n\t\tpolicyConfiguration: ConfigurationModel,\n\t): void {\n\t\tconst previous = {\n\t\t\tdata: this._configuration.toData(),\n\t\t\tworkspace: this.workspace,\n\t\t};\n\t\tconst change =\n\t\t\tthis._configuration.compareAndUpdatePolicyConfiguration(\n\t\t\t\tpolicyConfiguration,\n\t\t\t);\n\t\tthis.triggerConfigurationChange(\n\t\t\tchange,\n\t\t\tprevious,\n\t\t\tConfigurationTarget.DEFAULT,\n\t\t);\n\t}\n\n\tprivate onApplicationConfigurationChanged(\n\t\tapplicationConfiguration: ConfigurationModel,\n\t): void {\n\t\tconst previous = {\n\t\t\tdata: this._configuration.toData(),\n\t\t\tworkspace: this.workspace,\n\t\t};\n\t\tconst previousAllProfilesSettings =\n\t\t\tthis._configuration.applicationConfiguration.getValue<string[]>(\n\t\t\t\tAPPLY_ALL_PROFILES_SETTING,\n\t\t\t) ?? [];\n\t\tconst change =\n\t\t\tthis._configuration.compareAndUpdateApplicationConfiguration(\n\t\t\t\tapplicationConfiguration,\n\t\t\t);\n\t\tconst currentAllProfilesSettings =\n\t\t\tthis.getValue<string[]>(APPLY_ALL_PROFILES_SETTING) ?? [];\n\t\tconst configurationProperties =\n\t\t\tthis.configurationRegistry.getConfigurationProperties();\n\t\tconst changedKeys: string[] = [];\n\t\tfor (const changedKey of change.keys) {\n\t\t\tif (\n\t\t\t\tconfigurationProperties[changedKey]?.scope ===\n\t\t\t\tConfigurationScope.APPLICATION\n\t\t\t) {\n\t\t\t\tchangedKeys.push(changedKey);\n\t\t\t\tif (changedKey === APPLY_ALL_PROFILES_SETTING) {\n\t\t\t\t\tfor (const previousAllProfileSetting of previousAllProfilesSettings) {\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t!currentAllProfilesSettings.includes(\n\t\t\t\t\t\t\t\tpreviousAllProfileSetting,\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\tchangedKeys.push(previousAllProfileSetting);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tfor (const currentAllProfileSetting of currentAllProfilesSettings) {\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t!previousAllProfilesSettings.includes(\n\t\t\t\t\t\t\t\tcurrentAllProfileSetting,\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\tchangedKeys.push(currentAllProfileSetting);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else if (currentAllProfilesSettings.includes(changedKey)) {\n\t\t\t\tchangedKeys.push(changedKey);\n\t\t\t}\n\t\t}\n\t\tchange.keys = changedKeys;\n\t\tif (change.keys.includes(APPLY_ALL_PROFILES_SETTING)) {\n\t\t\tthis._configuration.updateLocalUserConfiguration(\n\t\t\t\tthis.localUserConfiguration.reparse({\n\t\t\t\t\texclude: currentAllProfilesSettings,\n\t\t\t\t}),\n\t\t\t);\n\t\t}\n\t\tthis.triggerConfigurationChange(\n\t\t\tchange,\n\t\t\tprevious,\n\t\t\tConfigurationTarget.USER,\n\t\t);\n\t}\n\n\tprivate onLocalUserConfigurationChanged(\n\t\tuserConfiguration: ConfigurationModel,\n\t): void {\n\t\tconst previous = {\n\t\t\tdata: this._configuration.toData(),\n\t\t\tworkspace: this.workspace,\n\t\t};\n\t\tconst change =\n\t\t\tthis._configuration.compareAndUpdateLocalUserConfiguration(\n\t\t\t\tuserConfiguration,\n\t\t\t);\n\t\tthis.triggerConfigurationChange(\n\t\t\tchange,\n\t\t\tprevious,\n\t\t\tConfigurationTarget.USER,\n\t\t);\n\t}\n\n\tprivate onRemoteUserConfigurationChanged(\n\t\tuserConfiguration: ConfigurationModel,\n\t): void {\n\t\tconst previous = {\n\t\t\tdata: this._configuration.toData(),\n\t\t\tworkspace: this.workspace,\n\t\t};\n\t\tconst change =\n\t\t\tthis._configuration.compareAndUpdateRemoteUserConfiguration(\n\t\t\t\tuserConfiguration,\n\t\t\t);\n\t\tthis.triggerConfigurationChange(\n\t\t\tchange,\n\t\t\tprevious,\n\t\t\tConfigurationTarget.USER,\n\t\t);\n\t}\n\n\tprivate async onWorkspaceConfigurationChanged(\n\t\tfromCache: boolean,\n\t): Promise<void> {\n\t\tif (this.workspace && this.workspace.configuration) {\n\t\t\tlet newFolders = toWorkspaceFolders(\n\t\t\t\tthis.workspaceConfiguration.getFolders(),\n\t\t\t\tthis.workspace.configuration,\n\t\t\t\tthis.uriIdentityService.extUri,\n\t\t\t);\n\n\t\t\t// Validate only if workspace is initialized\n\t\t\tif (this.workspace.initialized) {\n\t\t\t\tconst { added, removed, changed } = this.compareFolders(\n\t\t\t\t\tthis.workspace.folders,\n\t\t\t\t\tnewFolders,\n\t\t\t\t);\n\n\t\t\t\t/* If changed validate new folders */\n\t\t\t\tif (added.length || removed.length || changed.length) {\n\t\t\t\t\tnewFolders = await this.toValidWorkspaceFolders(newFolders);\n\t\t\t\t} else {\n\t\t\t\t/* Otherwise use existing */\n\t\t\t\t\tnewFolders = this.workspace.folders;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tawait this.updateWorkspaceConfiguration(\n\t\t\t\tnewFolders,\n\t\t\t\tthis.workspaceConfiguration.getConfiguration(),\n\t\t\t\tfromCache,\n\t\t\t);\n\t\t}\n\t}\n\n\tprivate updateRestrictedSettings(): void {\n\t\tconst changed: string[] = [];\n\n\t\tconst allProperties =\n\t\t\tthis.configurationRegistry.getConfigurationProperties();\n\t\tconst defaultRestrictedSettings: string[] = Object.keys(allProperties)\n\t\t\t.filter((key) => allProperties[key].restricted)\n\t\t\t.sort((a, b) => a.localeCompare(b));\n\t\tconst defaultDelta = delta(\n\t\t\tdefaultRestrictedSettings,\n\t\t\tthis._restrictedSettings.default,\n\t\t\t(a, b) => a.localeCompare(b),\n\t\t);\n\t\tchanged.push(...defaultDelta.added, ...defaultDelta.removed);\n\n\t\tconst application = (\n\t\t\tthis.applicationConfiguration?.getRestrictedSettings() || []\n\t\t).sort((a, b) => a.localeCompare(b));\n\t\tconst applicationDelta = delta(\n\t\t\tapplication,\n\t\t\tthis._restrictedSettings.application || [],\n\t\t\t(a, b) => a.localeCompare(b),\n\t\t);\n\t\tchanged.push(...applicationDelta.added, ...applicationDelta.removed);\n\n\t\tconst userLocal = this.localUserConfiguration\n\t\t\t.getRestrictedSettings()\n\t\t\t.sort((a, b) => a.localeCompare(b));\n\t\tconst userLocalDelta = delta(\n\t\t\tuserLocal,\n\t\t\tthis._restrictedSettings.userLocal || [],\n\t\t\t(a, b) => a.localeCompare(b),\n\t\t);\n\t\tchanged.push(...userLocalDelta.added, ...userLocalDelta.removed);\n\n\t\tconst userRemote = (\n\t\t\tthis.remoteUserConfiguration?.getRestrictedSettings() || []\n\t\t).sort((a, b) => a.localeCompare(b));\n\t\tconst userRemoteDelta = delta(\n\t\t\tuserRemote,\n\t\t\tthis._restrictedSettings.userRemote || [],\n\t\t\t(a, b) => a.localeCompare(b),\n\t\t);\n\t\tchanged.push(...userRemoteDelta.added, ...userRemoteDelta.removed);\n\n\t\tconst workspaceFolderMap = new ResourceMap<ReadonlyArray<string>>();\n\t\tfor (const workspaceFolder of this.workspace.folders) {\n\t\t\tconst cachedFolderConfig = this.cachedFolderConfigs.get(\n\t\t\t\tworkspaceFolder.uri,\n\t\t\t);\n\t\t\tconst folderRestrictedSettings = (\n\t\t\t\tcachedFolderConfig?.getRestrictedSettings() || []\n\t\t\t).sort((a, b) => a.localeCompare(b));\n\t\t\tif (folderRestrictedSettings.length) {\n\t\t\t\tworkspaceFolderMap.set(\n\t\t\t\t\tworkspaceFolder.uri,\n\t\t\t\t\tfolderRestrictedSettings,\n\t\t\t\t);\n\t\t\t}\n\t\t\tconst previous =\n\t\t\t\tthis._restrictedSettings.workspaceFolder?.get(\n\t\t\t\t\tworkspaceFolder.uri,\n\t\t\t\t) || [];\n\t\t\tconst workspaceFolderDelta = delta(\n\t\t\t\tfolderRestrictedSettings,\n\t\t\t\tprevious,\n\t\t\t\t(a, b) => a.localeCompare(b),\n\t\t\t);\n\t\t\tchanged.push(\n\t\t\t\t...workspaceFolderDelta.added,\n\t\t\t\t...workspaceFolderDelta.removed,\n\t\t\t);\n\t\t}\n\n\t\tconst workspace =\n\t\t\tthis.getWorkbenchState() === WorkbenchState.WORKSPACE\n\t\t\t\t? this.workspaceConfiguration\n\t\t\t\t\t\t.getRestrictedSettings()\n\t\t\t\t\t\t.sort((a, b) => a.localeCompare(b))\n\t\t\t\t: this.workspace.folders[0]\n\t\t\t\t\t? workspaceFolderMap.get(this.workspace.folders[0].uri) ||\n\t\t\t\t\t\t[]\n\t\t\t\t\t: [];\n\t\tconst workspaceDelta = delta(\n\t\t\tworkspace,\n\t\t\tthis._restrictedSettings.workspace || [],\n\t\t\t(a, b) => a.localeCompare(b),\n\t\t);\n\t\tchanged.push(...workspaceDelta.added, ...workspaceDelta.removed);\n\n\t\tif (changed.length) {\n\t\t\tthis._restrictedSettings = {\n\t\t\t\tdefault: defaultRestrictedSettings,\n\t\t\t\tapplication: application.length ? application : undefined,\n\t\t\t\tuserLocal: userLocal.length ? userLocal : undefined,\n\t\t\t\tuserRemote: userRemote.length ? userRemote : undefined,\n\t\t\t\tworkspace: workspace.length ? workspace : undefined,\n\t\t\t\tworkspaceFolder: workspaceFolderMap.size\n\t\t\t\t\t? workspaceFolderMap\n\t\t\t\t\t: undefined,\n\t\t\t};\n\t\t\tthis._onDidChangeRestrictedSettings.fire(this.restrictedSettings);\n\t\t}\n\t}\n\n\tprivate async updateWorkspaceConfiguration(\n\t\tworkspaceFolders: WorkspaceFolder[],\n\t\tconfiguration: ConfigurationModel,\n\t\tfromCache: boolean,\n\t): Promise<void> {\n\t\tconst previous = {\n\t\t\tdata: this._configuration.toData(),\n\t\t\tworkspace: this.workspace,\n\t\t};\n\t\tconst change =\n\t\t\tthis._configuration.compareAndUpdateWorkspaceConfiguration(\n\t\t\t\tconfiguration,\n\t\t\t);\n\t\tconst changes = this.compareFolders(\n\t\t\tthis.workspace.folders,\n\t\t\tworkspaceFolders,\n\t\t);\n\t\tif (\n\t\t\tchanges.added.length ||\n\t\t\tchanges.removed.length ||\n\t\t\tchanges.changed.length\n\t\t) {\n\t\t\tthis.workspace.folders = workspaceFolders;\n\t\t\tconst change = await this.onFoldersChanged();\n\t\t\tawait this.handleWillChangeWorkspaceFolders(changes, fromCache);\n\t\t\tthis.triggerConfigurationChange(\n\t\t\t\tchange,\n\t\t\t\tprevious,\n\t\t\t\tConfigurationTarget.WORKSPACE_FOLDER,\n\t\t\t);\n\t\t\tthis._onDidChangeWorkspaceFolders.fire(changes);\n\t\t} else {\n\t\t\tthis.triggerConfigurationChange(\n\t\t\t\tchange,\n\t\t\t\tprevious,\n\t\t\t\tConfigurationTarget.WORKSPACE,\n\t\t\t);\n\t\t}\n\t\tthis.updateRestrictedSettings();\n\t}\n\n\tprivate async handleWillChangeWorkspaceFolders(\n\t\tchanges: IWorkspaceFoldersChangeEvent,\n\t\tfromCache: boolean,\n\t): Promise<void> {\n\t\tconst joiners: Promise<void>[] = [];\n\t\tthis._onWillChangeWorkspaceFolders.fire({\n\t\t\tjoin(updateWorkspaceTrustStatePromise) {\n\t\t\t\tjoiners.push(updateWorkspaceTrustStatePromise);\n\t\t\t},\n\t\t\tchanges,\n\t\t\tfromCache,\n\t\t});\n\t\ttry {\n\t\t\tawait Promises.settled(joiners);\n\t\t} catch (error) {\n\t\t\t/* Ignore */\n\t\t}\n\t}\n\n\tprivate async onWorkspaceFolderConfigurationChanged(\n\t\tfolder: IWorkspaceFolder,\n\t): Promise<void> {\n\t\tconst [folderConfiguration] = await this.loadFolderConfigurations([\n\t\t\tfolder,\n\t\t]);\n\t\tconst previous = {\n\t\t\tdata: this._configuration.toData(),\n\t\t\tworkspace: this.workspace,\n\t\t};\n\t\tconst folderConfigurationChange =\n\t\t\tthis._configuration.compareAndUpdateFolderConfiguration(\n\t\t\t\tfolder.uri,\n\t\t\t\tfolderConfiguration,\n\t\t\t);\n\t\tif (this.getWorkbenchState() === WorkbenchState.FOLDER) {\n\t\t\tconst workspaceConfigurationChange =\n\t\t\t\tthis._configuration.compareAndUpdateWorkspaceConfiguration(\n\t\t\t\t\tfolderConfiguration,\n\t\t\t\t);\n\t\t\tthis.triggerConfigurationChange(\n\t\t\t\tmergeChanges(\n\t\t\t\t\tfolderConfigurationChange,\n\t\t\t\t\tworkspaceConfigurationChange,\n\t\t\t\t),\n\t\t\t\tprevious,\n\t\t\t\tConfigurationTarget.WORKSPACE,\n\t\t\t);\n\t\t} else {\n\t\t\tthis.triggerConfigurationChange(\n\t\t\t\tfolderConfigurationChange,\n\t\t\t\tprevious,\n\t\t\t\tConfigurationTarget.WORKSPACE_FOLDER,\n\t\t\t);\n\t\t}\n\t\tthis.updateRestrictedSettings();\n\t}\n\n\tprivate async onFoldersChanged(): Promise<IConfigurationChange> {\n\t\tconst changes: IConfigurationChange[] = [];\n\n\t\t// Remove the configurations of deleted folders\n\t\tfor (const key of this.cachedFolderConfigs.keys()) {\n\t\t\tif (\n\t\t\t\t!this.workspace.folders.filter(\n\t\t\t\t\t(folder) => folder.uri.toString() === key.toString(),\n\t\t\t\t)[0]\n\t\t\t) {\n\t\t\t\tconst folderConfiguration = this.cachedFolderConfigs.get(key);\n\t\t\t\tfolderConfiguration!.dispose();\n\t\t\t\tthis.cachedFolderConfigs.delete(key);\n\t\t\t\tchanges.push(\n\t\t\t\t\tthis._configuration.compareAndDeleteFolderConfiguration(\n\t\t\t\t\t\tkey,\n\t\t\t\t\t),\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\tconst toInitialize = this.workspace.folders.filter(\n\t\t\t(folder) => !this.cachedFolderConfigs.has(folder.uri),\n\t\t);\n\t\tif (toInitialize.length) {\n\t\t\tconst folderConfigurations =\n\t\t\t\tawait this.loadFolderConfigurations(toInitialize);\n\t\t\tfolderConfigurations.forEach((folderConfiguration, index) => {\n\t\t\t\tchanges.push(\n\t\t\t\t\tthis._configuration.compareAndUpdateFolderConfiguration(\n\t\t\t\t\t\ttoInitialize[index].uri,\n\t\t\t\t\t\tfolderConfiguration,\n\t\t\t\t\t),\n\t\t\t\t);\n\t\t\t});\n\t\t}\n\t\treturn mergeChanges(...changes);\n\t}\n\n\tprivate loadFolderConfigurations(\n\t\tfolders: IWorkspaceFolder[],\n\t): Promise<ConfigurationModel[]> {\n\t\treturn Promise.all([\n\t\t\t...folders.map((folder) => {\n\t\t\t\tlet folderConfiguration = this.cachedFolderConfigs.get(\n\t\t\t\t\tfolder.uri,\n\t\t\t\t);\n\t\t\t\tif (!folderConfiguration) {\n\t\t\t\t\tfolderConfiguration = new FolderConfiguration(\n\t\t\t\t\t\t!this.initialized,\n\t\t\t\t\t\tfolder,\n\t\t\t\t\t\tFOLDER_CONFIG_FOLDER_NAME,\n\t\t\t\t\t\tthis.getWorkbenchState(),\n\t\t\t\t\t\tthis.isWorkspaceTrusted,\n\t\t\t\t\t\tthis.fileService,\n\t\t\t\t\t\tthis.uriIdentityService,\n\t\t\t\t\t\tthis.logService,\n\t\t\t\t\t\tthis.configurationCache,\n\t\t\t\t\t);\n\t\t\t\t\tthis._register(\n\t\t\t\t\t\tfolderConfiguration.onDidChange(() =>\n\t\t\t\t\t\t\tthis.onWorkspaceFolderConfigurationChanged(folder),\n\t\t\t\t\t\t),\n\t\t\t\t\t);\n\t\t\t\t\tthis.cachedFolderConfigs.set(\n\t\t\t\t\t\tfolder.uri,\n\t\t\t\t\t\tthis._register(folderConfiguration),\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t\treturn folderConfiguration.loadConfiguration();\n\t\t\t}),\n\t\t]);\n\t}\n\n\tprivate async validateWorkspaceFoldersAndReload(\n\t\tfromCache: boolean,\n\t): Promise<void> {\n\t\tconst validWorkspaceFolders = await this.toValidWorkspaceFolders(\n\t\t\tthis.workspace.folders,\n\t\t);\n\t\tconst { removed } = this.compareFolders(\n\t\t\tthis.workspace.folders,\n\t\t\tvalidWorkspaceFolders,\n\t\t);\n\t\tif (removed.length) {\n\t\t\tawait this.updateWorkspaceConfiguration(\n\t\t\t\tvalidWorkspaceFolders,\n\t\t\t\tthis.workspaceConfiguration.getConfiguration(),\n\t\t\t\tfromCache,\n\t\t\t);\n\t\t}\n\t}\n\n\t// Filter out workspace folders which are files (not directories)\n\t// Workspace folders those cannot be resolved are not filtered because they are handled by the Explorer.\n\tprivate async toValidWorkspaceFolders(\n\t\tworkspaceFolders: WorkspaceFolder[],\n\t): Promise<WorkspaceFolder[]> {\n\t\tconst validWorkspaceFolders: WorkspaceFolder[] = [];\n\t\tfor (const workspaceFolder of workspaceFolders) {\n\t\t\ttry {\n\t\t\t\tconst result = await this.fileService.stat(workspaceFolder.uri);\n\t\t\t\tif (!result.isDirectory) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\tthis.logService.warn(\n\t\t\t\t\t`Ignoring the error while validating workspace folder ${workspaceFolder.uri.toString()} - ${toErrorMessage(e)}`,\n\t\t\t\t);\n\t\t\t}\n\t\t\tvalidWorkspaceFolders.push(workspaceFolder);\n\t\t}\n\t\treturn validWorkspaceFolders;\n\t}\n\n\tprivate async writeConfigurationValue(\n\t\tkey: string,\n\t\tvalue: any,\n\t\ttarget: ConfigurationTarget,\n\t\toverrides: IConfigurationUpdateOverrides | undefined,\n\t\toptions?: IConfigurationUpdateOverrides,\n\t): Promise<void> {\n\t\tif (!this.instantiationService) {\n\t\t\tthrow new Error(\n\t\t\t\t\"Cannot write configuration because the configuration service is not yet ready to accept writes.\",\n\t\t\t);\n\t\t}\n\n\t\tif (target === ConfigurationTarget.DEFAULT) {\n\t\t\tthrow new Error(\"Invalid configuration target\");\n\t\t}\n\n\t\tif (target === ConfigurationTarget.MEMORY) {\n\t\t\tconst previous = {\n\t\t\t\tdata: this._configuration.toData(),\n\t\t\t\tworkspace: this.workspace,\n\t\t\t};\n\t\t\tthis._configuration.updateValue(key, value, overrides);\n\t\t\tthis.triggerConfigurationChange(\n\t\t\t\t{\n\t\t\t\t\tkeys: overrides?.overrideIdentifiers?.length\n\t\t\t\t\t\t? [\n\t\t\t\t\t\t\t\tkeyFromOverrideIdentifiers(\n\t\t\t\t\t\t\t\t\toverrides.overrideIdentifiers,\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\tkey,\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t: [key],\n\t\t\t\t\toverrides: overrides?.overrideIdentifiers?.length\n\t\t\t\t\t\t? overrides.overrideIdentifiers.map(\n\t\t\t\t\t\t\t\t(overrideIdentifier) => [\n\t\t\t\t\t\t\t\t\toverrideIdentifier,\n\t\t\t\t\t\t\t\t\t[key],\n\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t: [],\n\t\t\t\t},\n\t\t\t\tprevious,\n\t\t\t\ttarget,\n\t\t\t);\n\t\t\treturn;\n\t\t}\n\n\t\tconst editableConfigurationTarget = this.toEditableConfigurationTarget(\n\t\t\ttarget,\n\t\t\tkey,\n\t\t);\n\t\tif (!editableConfigurationTarget) {\n\t\t\tthrow new Error(\"Invalid configuration target\");\n\t\t}\n\n\t\tif (\n\t\t\teditableConfigurationTarget ===\n\t\t\t\tEditableConfigurationTarget.USER_REMOTE &&\n\t\t\t!this.remoteUserConfiguration\n\t\t) {\n\t\t\tthrow new Error(\"Invalid configuration target\");\n\t\t}\n\n\t\tif (\n\t\t\toverrides?.overrideIdentifiers?.length &&\n\t\t\toverrides.overrideIdentifiers.length > 1\n\t\t) {\n\t\t\tconst configurationModel =\n\t\t\t\tthis.getConfigurationModelForEditableConfigurationTarget(\n\t\t\t\t\teditableConfigurationTarget,\n\t\t\t\t\toverrides.resource,\n\t\t\t\t);\n\t\t\tif (configurationModel) {\n\t\t\t\tconst overrideIdentifiers =\n\t\t\t\t\toverrides.overrideIdentifiers.sort();\n\t\t\t\tconst existingOverrides = configurationModel.overrides.find(\n\t\t\t\t\t(override) =>\n\t\t\t\t\t\tarrayEquals(\n\t\t\t\t\t\t\t[...override.identifiers].sort(),\n\t\t\t\t\t\t\toverrideIdentifiers,\n\t\t\t\t\t\t),\n\t\t\t\t);\n\t\t\t\tif (existingOverrides) {\n\t\t\t\t\toverrides.overrideIdentifiers =\n\t\t\t\t\t\texistingOverrides.identifiers;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Use same instance of ConfigurationEditing to make sure all writes go through the same queue\n\t\tthis.configurationEditing =\n\t\t\tthis.configurationEditing ??\n\t\t\tthis.createConfigurationEditingService(this.instantiationService);\n\t\tawait (await this.configurationEditing).writeConfiguration(\n\t\t\teditableConfigurationTarget,\n\t\t\t{ key, value },\n\t\t\t{ scopes: overrides, ...options },\n\t\t);\n\t\tswitch (editableConfigurationTarget) {\n\t\t\tcase EditableConfigurationTarget.USER_LOCAL:\n\t\t\t\tif (\n\t\t\t\t\tthis.applicationConfiguration &&\n\t\t\t\t\tthis.isSettingAppliedForAllProfiles(key)\n\t\t\t\t) {\n\t\t\t\t\tawait this.reloadApplicationConfiguration();\n\t\t\t\t} else {\n\t\t\t\t\tawait this.reloadLocalUserConfiguration();\n\t\t\t\t}\n\t\t\t\treturn;\n\t\t\tcase EditableConfigurationTarget.USER_REMOTE:\n\t\t\t\treturn this.reloadRemoteUserConfiguration().then(\n\t\t\t\t\t() => undefined,\n\t\t\t\t);\n\t\t\tcase EditableConfigurationTarget.WORKSPACE:\n\t\t\t\treturn this.reloadWorkspaceConfiguration();\n\t\t\tcase EditableConfigurationTarget.WORKSPACE_FOLDER: {\n\t\t\t\tconst workspaceFolder =\n\t\t\t\t\toverrides && overrides.resource\n\t\t\t\t\t\t? this.workspace.getFolder(overrides.resource)\n\t\t\t\t\t\t: null;\n\t\t\t\tif (workspaceFolder) {\n\t\t\t\t\treturn this.reloadWorkspaceFolderConfiguration(\n\t\t\t\t\t\tworkspaceFolder,\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate async createConfigurationEditingService(\n\t\tinstantiationService: IInstantiationService,\n\t): Promise<ConfigurationEditing> {\n\t\tconst remoteSettingsResource =\n\t\t\t(await this.remoteAgentService.getEnvironment())?.settingsPath ??\n\t\t\tnull;\n\t\treturn instantiationService.createInstance(\n\t\t\tConfigurationEditing,\n\t\t\tremoteSettingsResource,\n\t\t);\n\t}\n\n\tprivate getConfigurationModelForEditableConfigurationTarget(\n\t\ttarget: EditableConfigurationTarget,\n\t\tresource?: URI | null,\n\t): ConfigurationModel | undefined {\n\t\tswitch (target) {\n\t\t\tcase EditableConfigurationTarget.USER_LOCAL:\n\t\t\t\treturn this._configuration.localUserConfiguration;\n\t\t\tcase EditableConfigurationTarget.USER_REMOTE:\n\t\t\t\treturn this._configuration.remoteUserConfiguration;\n\t\t\tcase EditableConfigurationTarget.WORKSPACE:\n\t\t\t\treturn this._configuration.workspaceConfiguration;\n\t\t\tcase EditableConfigurationTarget.WORKSPACE_FOLDER:\n\t\t\t\treturn resource\n\t\t\t\t\t? this._configuration.folderConfigurations.get(resource)\n\t\t\t\t\t: undefined;\n\t\t}\n\t}\n\n\tgetConfigurationModel(\n\t\ttarget: ConfigurationTarget,\n\t\tresource?: URI | null,\n\t): ConfigurationModel | undefined {\n\t\tswitch (target) {\n\t\t\tcase ConfigurationTarget.USER_LOCAL:\n\t\t\t\treturn this._configuration.localUserConfiguration;\n\t\t\tcase ConfigurationTarget.USER_REMOTE:\n\t\t\t\treturn this._configuration.remoteUserConfiguration;\n\t\t\tcase ConfigurationTarget.WORKSPACE:\n\t\t\t\treturn this._configuration.workspaceConfiguration;\n\t\t\tcase ConfigurationTarget.WORKSPACE_FOLDER:\n\t\t\t\treturn resource\n\t\t\t\t\t? this._configuration.folderConfigurations.get(resource)\n\t\t\t\t\t: undefined;\n\t\t\tdefault:\n\t\t\t\treturn undefined;\n\t\t}\n\t}\n\n\tprivate deriveConfigurationTargets(\n\t\tkey: string,\n\t\tvalue: any,\n\t\tinspect: IConfigurationValue<any>,\n\t): ConfigurationTarget[] {\n\t\tif (equals(value, inspect.value)) {\n\t\t\treturn [];\n\t\t}\n\n\t\tconst definedTargets: ConfigurationTarget[] = [];\n\t\tif (inspect.workspaceFolderValue !== undefined) {\n\t\t\tdefinedTargets.push(ConfigurationTarget.WORKSPACE_FOLDER);\n\t\t}\n\t\tif (inspect.workspaceValue !== undefined) {\n\t\t\tdefinedTargets.push(ConfigurationTarget.WORKSPACE);\n\t\t}\n\t\tif (inspect.userRemoteValue !== undefined) {\n\t\t\tdefinedTargets.push(ConfigurationTarget.USER_REMOTE);\n\t\t}\n\t\tif (inspect.userLocalValue !== undefined) {\n\t\t\tdefinedTargets.push(ConfigurationTarget.USER_LOCAL);\n\t\t}\n\t\tif (inspect.applicationValue !== undefined) {\n\t\t\tdefinedTargets.push(ConfigurationTarget.APPLICATION);\n\t\t}\n\n\t\tif (value === undefined) {\n\t\t\t// Remove the setting in all defined targets\n\t\t\treturn definedTargets;\n\t\t}\n\n\t\treturn [definedTargets[0] || ConfigurationTarget.USER];\n\t}\n\n\tprivate triggerConfigurationChange(\n\t\tchange: IConfigurationChange,\n\t\tprevious:\n\t\t\t| { data: IConfigurationData; workspace?: Workspace }\n\t\t\t| undefined,\n\t\ttarget: ConfigurationTarget,\n\t): void {\n\t\tif (change.keys.length) {\n\t\t\tif (target !== ConfigurationTarget.DEFAULT) {\n\t\t\t\tthis.logService.debug(\n\t\t\t\t\t`Configuration keys changed in ${ConfigurationTargetToString(target)} target`,\n\t\t\t\t\t...change.keys,\n\t\t\t\t);\n\t\t\t}\n\t\t\tconst configurationChangeEvent = new ConfigurationChangeEvent(\n\t\t\t\tchange,\n\t\t\t\tprevious,\n\t\t\t\tthis._configuration,\n\t\t\t\tthis.workspace,\n\t\t\t\tthis.logService,\n\t\t\t);\n\t\t\tconfigurationChangeEvent.source = target;\n\t\t\tthis._onDidChangeConfiguration.fire(configurationChangeEvent);\n\t\t}\n\t}\n\n\tprivate toEditableConfigurationTarget(\n\t\ttarget: ConfigurationTarget,\n\t\tkey: string,\n\t): EditableConfigurationTarget | null {\n\t\tif (target === ConfigurationTarget.APPLICATION) {\n\t\t\treturn EditableConfigurationTarget.USER_LOCAL;\n\t\t}\n\t\tif (target === ConfigurationTarget.USER) {\n\t\t\tif (this.remoteUserConfiguration) {\n\t\t\t\tconst scope =\n\t\t\t\t\tthis.configurationRegistry.getConfigurationProperties()[key]\n\t\t\t\t\t\t?.scope;\n\t\t\t\tif (\n\t\t\t\t\tscope === ConfigurationScope.MACHINE ||\n\t\t\t\t\tscope === ConfigurationScope.MACHINE_OVERRIDABLE\n\t\t\t\t) {\n\t\t\t\t\treturn EditableConfigurationTarget.USER_REMOTE;\n\t\t\t\t}\n\t\t\t\tif (this.inspect(key).userRemoteValue !== undefined) {\n\t\t\t\t\treturn EditableConfigurationTarget.USER_REMOTE;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn EditableConfigurationTarget.USER_LOCAL;\n\t\t}\n\t\tif (target === ConfigurationTarget.USER_LOCAL) {\n\t\t\treturn EditableConfigurationTarget.USER_LOCAL;\n\t\t}\n\t\tif (target === ConfigurationTarget.USER_REMOTE) {\n\t\t\treturn EditableConfigurationTarget.USER_REMOTE;\n\t\t}\n\t\tif (target === ConfigurationTarget.WORKSPACE) {\n\t\t\treturn EditableConfigurationTarget.WORKSPACE;\n\t\t}\n\t\tif (target === ConfigurationTarget.WORKSPACE_FOLDER) {\n\t\t\treturn EditableConfigurationTarget.WORKSPACE_FOLDER;\n\t\t}\n\t\treturn null;\n\t}\n}\n\nclass RegisterConfigurationSchemasContribution\n\textends Disposable\n\timplements IWorkbenchContribution\n{\n\tconstructor(\n\t\t@IWorkspaceContextService private readonly workspaceContextService: IWorkspaceContextService,\n\t\t@IWorkbenchEnvironmentService private readonly environmentService: IWorkbenchEnvironmentService,\n\t\t@IWorkspaceTrustManagementService private readonly workspaceTrustManagementService: IWorkspaceTrustManagementService,\n\t\t@IExtensionService extensionService: IExtensionService,\n\t\t@ILifecycleService lifecycleService: ILifecycleService,\n\t) {\n\t\tsuper();\n\n\t\textensionService.whenInstalledExtensionsRegistered().then(() => {\n\t\t\tthis.registerConfigurationSchemas();\n\n\t\t\tconst configurationRegistry = Registry.as<IConfigurationRegistry>(Extensions.Configuration);\n\t\t\tconst delayer = this._register(new Delayer<void>(50));\n\t\t\tthis._register(Event.any(configurationRegistry.onDidUpdateConfiguration, configurationRegistry.onDidSchemaChange, workspaceTrustManagementService.onDidChangeTrust)(() =>\n\t\t\t\tdelayer.trigger(() => this.registerConfigurationSchemas(), lifecycleService.phase === LifecyclePhase.Eventually ? undefined : 2500 /* delay longer in early phases */)));\n\t\t});\n\t}\n\n\tprivate registerConfigurationSchemas(): void {\n\t\tconst allSettingsSchema: IJSONSchema = {\n\t\t\tproperties: allSettings.properties,\n\t\t\tpatternProperties: allSettings.patternProperties,\n\t\t\tadditionalProperties: true,\n\t\t\tallowTrailingCommas: true,\n\t\t\tallowComments: true,\n\t\t};\n\n\t\tconst userSettingsSchema: IJSONSchema = this.environmentService\n\t\t\t.remoteAuthority\n\t\t\t? {\n\t\t\t\t\tproperties: Object.assign(\n\t\t\t\t\t\t{},\n\t\t\t\t\t\tapplicationSettings.properties,\n\t\t\t\t\t\twindowSettings.properties,\n\t\t\t\t\t\tresourceSettings.properties,\n\t\t\t\t\t),\n\t\t\t\t\tpatternProperties: allSettings.patternProperties,\n\t\t\t\t\tadditionalProperties: true,\n\t\t\t\t\tallowTrailingCommas: true,\n\t\t\t\t\tallowComments: true,\n\t\t\t\t}\n\t\t\t: allSettingsSchema;\n\n\t\tconst profileSettingsSchema: IJSONSchema = {\n\t\t\tproperties: Object.assign(\n\t\t\t\t{},\n\t\t\t\tmachineSettings.properties,\n\t\t\t\tmachineOverridableSettings.properties,\n\t\t\t\twindowSettings.properties,\n\t\t\t\tresourceSettings.properties,\n\t\t\t),\n\t\t\tpatternProperties: allSettings.patternProperties,\n\t\t\tadditionalProperties: true,\n\t\t\tallowTrailingCommas: true,\n\t\t\tallowComments: true,\n\t\t};\n\n\t\tconst machineSettingsSchema: IJSONSchema = {\n\t\t\tproperties: Object.assign(\n\t\t\t\t{},\n\t\t\t\tmachineSettings.properties,\n\t\t\t\tmachineOverridableSettings.properties,\n\t\t\t\twindowSettings.properties,\n\t\t\t\tresourceSettings.properties,\n\t\t\t),\n\t\t\tpatternProperties: allSettings.patternProperties,\n\t\t\tadditionalProperties: true,\n\t\t\tallowTrailingCommas: true,\n\t\t\tallowComments: true,\n\t\t};\n\n\t\tconst workspaceSettingsSchema: IJSONSchema = {\n\t\t\tproperties: Object.assign(\n\t\t\t\t{},\n\t\t\t\tthis.checkAndFilterPropertiesRequiringTrust(\n\t\t\t\t\tmachineOverridableSettings.properties,\n\t\t\t\t),\n\t\t\t\tthis.checkAndFilterPropertiesRequiringTrust(\n\t\t\t\t\twindowSettings.properties,\n\t\t\t\t),\n\t\t\t\tthis.checkAndFilterPropertiesRequiringTrust(\n\t\t\t\t\tresourceSettings.properties,\n\t\t\t\t),\n\t\t\t),\n\t\t\tpatternProperties: allSettings.patternProperties,\n\t\t\tadditionalProperties: true,\n\t\t\tallowTrailingCommas: true,\n\t\t\tallowComments: true,\n\t\t};\n\n\t\tconst defaultSettingsSchema = {\n\t\t\tproperties: Object.keys(\n\t\t\t\tallSettings.properties,\n\t\t\t).reduce<IJSONSchemaMap>((result, key) => {\n\t\t\t\tresult[key] = Object.assign(\n\t\t\t\t\t{ deprecationMessage: undefined },\n\t\t\t\t\tallSettings.properties[key],\n\t\t\t\t);\n\t\t\t\treturn result;\n\t\t\t}, {}),\n\t\t\tpatternProperties: Object.keys(\n\t\t\t\tallSettings.patternProperties,\n\t\t\t).reduce<IJSONSchemaMap>((result, key) => {\n\t\t\t\tresult[key] = Object.assign(\n\t\t\t\t\t{ deprecationMessage: undefined },\n\t\t\t\t\tallSettings.patternProperties[key],\n\t\t\t\t);\n\t\t\t\treturn result;\n\t\t\t}, {}),\n\t\t\tadditionalProperties: true,\n\t\t\tallowTrailingCommas: true,\n\t\t\tallowComments: true,\n\t\t};\n\n\t\tconst folderSettingsSchema: IJSONSchema =\n\t\t\tWorkbenchState.WORKSPACE ===\n\t\t\tthis.workspaceContextService.getWorkbenchState()\n\t\t\t\t? {\n\t\t\t\t\t\tproperties: Object.assign(\n\t\t\t\t\t\t\t{},\n\t\t\t\t\t\t\tthis.checkAndFilterPropertiesRequiringTrust(\n\t\t\t\t\t\t\t\tmachineOverridableSettings.properties,\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\tthis.checkAndFilterPropertiesRequiringTrust(\n\t\t\t\t\t\t\t\tresourceSettings.properties,\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t),\n\t\t\t\t\t\tpatternProperties: allSettings.patternProperties,\n\t\t\t\t\t\tadditionalProperties: true,\n\t\t\t\t\t\tallowTrailingCommas: true,\n\t\t\t\t\t\tallowComments: true,\n\t\t\t\t\t}\n\t\t\t\t: workspaceSettingsSchema;\n\n\t\tconst configDefaultsSchema: IJSONSchema = {\n\t\t\ttype: \"object\",\n\t\t\tdescription: localize(\n\t\t\t\t\"configurationDefaults.description\",\n\t\t\t\t\"Contribute defaults for configurations\",\n\t\t\t),\n\t\t\tproperties: Object.assign(\n\t\t\t\t{},\n\t\t\t\tthis.filterDefaultOverridableProperties(\n\t\t\t\t\tmachineOverridableSettings.properties,\n\t\t\t\t),\n\t\t\t\tthis.filterDefaultOverridableProperties(\n\t\t\t\t\twindowSettings.properties,\n\t\t\t\t),\n\t\t\t\tthis.filterDefaultOverridableProperties(\n\t\t\t\t\tresourceSettings.properties,\n\t\t\t\t),\n\t\t\t),\n\t\t\tpatternProperties: {\n\t\t\t\t[OVERRIDE_PROPERTY_PATTERN]: {\n\t\t\t\t\ttype: \"object\",\n\t\t\t\t\tdefault: {},\n\t\t\t\t\t$ref: resourceLanguageSettingsSchemaId,\n\t\t\t\t},\n\t\t\t},\n\t\t\tadditionalProperties: false,\n\t\t};\n\t\tthis.registerSchemas({\n\t\t\tdefaultSettingsSchema,\n\t\t\tuserSettingsSchema,\n\t\t\tprofileSettingsSchema,\n\t\t\tmachineSettingsSchema,\n\t\t\tworkspaceSettingsSchema,\n\t\t\tfolderSettingsSchema,\n\t\t\tconfigDefaultsSchema,\n\t\t});\n\t}\n\n\tprivate registerSchemas(schemas: {\n\t\tdefaultSettingsSchema: IJSONSchema;\n\t\tuserSettingsSchema: IJSONSchema;\n\t\tprofileSettingsSchema: IJSONSchema;\n\t\tmachineSettingsSchema: IJSONSchema;\n\t\tworkspaceSettingsSchema: IJSONSchema;\n\t\tfolderSettingsSchema: IJSONSchema;\n\t\tconfigDefaultsSchema: IJSONSchema;\n\t}): void {\n\t\tconst jsonRegistry = Registry.as<IJSONContributionRegistry>(\n\t\t\tJSONExtensions.JSONContribution,\n\t\t);\n\t\tjsonRegistry.registerSchema(\n\t\t\tdefaultSettingsSchemaId,\n\t\t\tschemas.defaultSettingsSchema,\n\t\t);\n\t\tjsonRegistry.registerSchema(\n\t\t\tuserSettingsSchemaId,\n\t\t\tschemas.userSettingsSchema,\n\t\t);\n\t\tjsonRegistry.registerSchema(\n\t\t\tprofileSettingsSchemaId,\n\t\t\tschemas.profileSettingsSchema,\n\t\t);\n\t\tjsonRegistry.registerSchema(\n\t\t\tmachineSettingsSchemaId,\n\t\t\tschemas.machineSettingsSchema,\n\t\t);\n\t\tjsonRegistry.registerSchema(\n\t\t\tworkspaceSettingsSchemaId,\n\t\t\tschemas.workspaceSettingsSchema,\n\t\t);\n\t\tjsonRegistry.registerSchema(\n\t\t\tfolderSettingsSchemaId,\n\t\t\tschemas.folderSettingsSchema,\n\t\t);\n\t\tjsonRegistry.registerSchema(\n\t\t\tconfigurationDefaultsSchemaId,\n\t\t\tschemas.configDefaultsSchema,\n\t\t);\n\t}\n\n\tprivate checkAndFilterPropertiesRequiringTrust(\n\t\tproperties: IStringDictionary<IConfigurationPropertySchema>,\n\t): IStringDictionary<IConfigurationPropertySchema> {\n\t\tif (this.workspaceTrustManagementService.isWorkspaceTrusted()) {\n\t\t\treturn properties;\n\t\t}\n\n\t\tconst result: IStringDictionary<IConfigurationPropertySchema> = {};\n\t\tObject.entries(properties).forEach(([key, value]) => {\n\t\t\tif (!value.restricted) {\n\t\t\t\tresult[key] = value;\n\t\t\t}\n\t\t});\n\t\treturn result;\n\t}\n\n\tprivate filterDefaultOverridableProperties(\n\t\tproperties: IStringDictionary<IConfigurationPropertySchema>,\n\t): IStringDictionary<IConfigurationPropertySchema> {\n\t\tconst result: IStringDictionary<IConfigurationPropertySchema> = {};\n\t\tObject.entries(properties).forEach(([key, value]) => {\n\t\t\tif (!value.disallowConfigurationDefault) {\n\t\t\t\tresult[key] = value;\n\t\t\t}\n\t\t});\n\t\treturn result;\n\t}\n}\n\nclass ResetConfigurationDefaultsOverridesCache\n\textends Disposable\n\timplements IWorkbenchContribution\n{\n\tconstructor(\n\t\t@IConfigurationService configurationService: WorkspaceService,\n\t\t@IExtensionService extensionService: IExtensionService,\n\t) {\n\t\tsuper();\n\t\tif (configurationService.hasCachedConfigurationDefaultsOverrides()) {\n\t\t\textensionService\n\t\t\t\t.whenInstalledExtensionsRegistered()\n\t\t\t\t.then(() =>\n\t\t\t\t\tconfigurationService.reloadConfiguration(\n\t\t\t\t\t\tConfigurationTarget.DEFAULT,\n\t\t\t\t\t),\n\t\t\t\t);\n\t\t}\n\t}\n}\n\nclass UpdateExperimentalSettingsDefaults\n\textends Disposable\n\timplements IWorkbenchContribution\n{\n\tstatic readonly ID = \"workbench.contrib.updateExperimentalSettingsDefaults\";\n\n\tprivate readonly processedExperimentalSettings = new Set<string>();\n\tprivate readonly configurationRegistry =\n\t\tRegistry.as<IConfigurationRegistry>(Extensions.Configuration);\n\n\tconstructor(\n\t\t@IWorkbenchAssignmentService private readonly workbenchAssignmentService: IWorkbenchAssignmentService\n\t) {\n\t\tsuper();\n\t\tthis.processExperimentalSettings(Object.keys(this.configurationRegistry.getConfigurationProperties()));\n\t\tthis._register(this.configurationRegistry.onDidUpdateConfiguration(({ properties }) => this.processExperimentalSettings(properties)));\n\t}\n\n\tprivate async processExperimentalSettings(\n\t\tproperties: Iterable<string>,\n\t): Promise<void> {\n\t\tconst overrides: IStringDictionary<any> = {};\n\t\tconst allProperties =\n\t\t\tthis.configurationRegistry.getConfigurationProperties();\n\t\tfor (const property of properties) {\n\t\t\tconst schema = allProperties[property];\n\t\t\tif (!schema?.tags?.includes(\"experimental\")) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (this.processedExperimentalSettings.has(property)) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tthis.processedExperimentalSettings.add(property);\n\t\t\ttry {\n\t\t\t\tconst value =\n\t\t\t\t\tawait this.workbenchAssignmentService.getTreatment(\n\t\t\t\t\t\t`config.${property}`,\n\t\t\t\t\t);\n\t\t\t\tif (!isUndefined(value) && !equals(value, schema.default)) {\n\t\t\t\t\toverrides[property] = value;\n\t\t\t\t}\n\t\t\t} catch (error) {\n\t\t\t\t/*ignore */\n\t\t\t}\n\t\t}\n\t\tif (Object.keys(overrides).length) {\n\t\t\tthis.configurationRegistry.registerDefaultConfigurations([\n\t\t\t\t{ overrides },\n\t\t\t]);\n\t\t}\n\t}\n}\n\nconst workbenchContributionsRegistry =\n\tRegistry.as<IWorkbenchContributionsRegistry>(WorkbenchExtensions.Workbench);\nworkbenchContributionsRegistry.registerWorkbenchContribution(\n\tRegisterConfigurationSchemasContribution,\n\tLifecyclePhase.Restored,\n);\nworkbenchContributionsRegistry.registerWorkbenchContribution(\n\tResetConfigurationDefaultsOverridesCache,\n\tLifecyclePhase.Eventually,\n);\nregisterWorkbenchContribution2(\n\tUpdateExperimentalSettingsDefaults.ID,\n\tUpdateExperimentalSettingsDefaults,\n\tWorkbenchPhase.BlockRestore,\n);\n\nconst configurationRegistry = Registry.as<IConfigurationRegistry>(\n\tExtensions.Configuration,\n);\nconfigurationRegistry.registerConfiguration({\n\t...workbenchConfigurationNodeBase,\n\tproperties: {\n\t\t[APPLY_ALL_PROFILES_SETTING]: {\n\t\t\ttype: \"array\",\n\t\t\tdescription: localize(\n\t\t\t\t\"setting description\",\n\t\t\t\t\"Configure settings to be applied for all profiles.\",\n\t\t\t),\n\t\t\tdefault: [],\n\t\t\tscope: ConfigurationScope.APPLICATION,\n\t\t\tadditionalProperties: true,\n\t\t\tuniqueItems: true,\n\t\t},\n\t},\n});\n"],
  "mappings": "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",
  "names": ["remoteUserConfigurationModel", "index", "target", "change", "configurationRegistry"]
}
