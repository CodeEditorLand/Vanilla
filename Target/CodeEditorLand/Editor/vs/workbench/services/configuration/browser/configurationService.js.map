{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/configuration/browser/configurationService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { URI } from '../../../../base/common/uri.js';\nimport { Event, Emitter } from '../../../../base/common/event.js';\nimport { ResourceMap } from '../../../../base/common/map.js';\nimport { equals } from '../../../../base/common/objects.js';\nimport { Disposable, DisposableStore } from '../../../../base/common/lifecycle.js';\nimport { Queue, Barrier, Promises, Delayer } from '../../../../base/common/async.js';\nimport { IJSONContributionRegistry, Extensions as JSONExtensions } from '../../../../platform/jsonschemas/common/jsonContributionRegistry.js';\nimport { IWorkspaceContextService, Workspace as BaseWorkspace, WorkbenchState, IWorkspaceFolder, IWorkspaceFoldersChangeEvent, WorkspaceFolder, toWorkspaceFolder, isWorkspaceFolder, IWorkspaceFoldersWillChangeEvent, IEmptyWorkspaceIdentifier, ISingleFolderWorkspaceIdentifier, isSingleFolderWorkspaceIdentifier, isWorkspaceIdentifier, IWorkspaceIdentifier, IAnyWorkspaceIdentifier } from '../../../../platform/workspace/common/workspace.js';\nimport { ConfigurationModel, ConfigurationChangeEvent, mergeChanges } from '../../../../platform/configuration/common/configurationModels.js';\nimport { IConfigurationChangeEvent, ConfigurationTarget, IConfigurationOverrides, isConfigurationOverrides, IConfigurationData, IConfigurationValue, IConfigurationChange, ConfigurationTargetToString, IConfigurationUpdateOverrides, isConfigurationUpdateOverrides, IConfigurationService, IConfigurationUpdateOptions } from '../../../../platform/configuration/common/configuration.js';\nimport { IPolicyConfiguration, NullPolicyConfiguration, PolicyConfiguration } from '../../../../platform/configuration/common/configurations.js';\nimport { Configuration } from '../common/configurationModels.js';\nimport { FOLDER_CONFIG_FOLDER_NAME, defaultSettingsSchemaId, userSettingsSchemaId, workspaceSettingsSchemaId, folderSettingsSchemaId, IConfigurationCache, machineSettingsSchemaId, LOCAL_MACHINE_SCOPES, IWorkbenchConfigurationService, RestrictedSettings, PROFILE_SCOPES, LOCAL_MACHINE_PROFILE_SCOPES, profileSettingsSchemaId, APPLY_ALL_PROFILES_SETTING } from '../common/configuration.js';\nimport { Registry } from '../../../../platform/registry/common/platform.js';\nimport { IConfigurationRegistry, Extensions, allSettings, windowSettings, resourceSettings, applicationSettings, machineSettings, machineOverridableSettings, ConfigurationScope, IConfigurationPropertySchema, keyFromOverrideIdentifiers, OVERRIDE_PROPERTY_PATTERN, resourceLanguageSettingsSchemaId, configurationDefaultsSchemaId } from '../../../../platform/configuration/common/configurationRegistry.js';\nimport { IStoredWorkspaceFolder, isStoredWorkspaceFolder, IWorkspaceFolderCreationData, getStoredWorkspaceFolder, toWorkspaceFolders } from '../../../../platform/workspaces/common/workspaces.js';\nimport { IInstantiationService } from '../../../../platform/instantiation/common/instantiation.js';\nimport { ConfigurationEditing, EditableConfigurationTarget } from '../common/configurationEditing.js';\nimport { WorkspaceConfiguration, FolderConfiguration, RemoteUserConfiguration, UserConfiguration, DefaultConfiguration, ApplicationConfiguration } from './configuration.js';\nimport { IJSONSchema, IJSONSchemaMap } from '../../../../base/common/jsonSchema.js';\nimport { mark } from '../../../../base/common/performance.js';\nimport { IRemoteAgentService } from '../../remote/common/remoteAgentService.js';\nimport { IFileService } from '../../../../platform/files/common/files.js';\nimport { IWorkbenchEnvironmentService } from '../../environment/common/environmentService.js';\nimport { IWorkbenchContribution, IWorkbenchContributionsRegistry, WorkbenchPhase, Extensions as WorkbenchExtensions, registerWorkbenchContribution2 } from '../../../common/contributions.js';\nimport { ILifecycleService, LifecyclePhase } from '../../lifecycle/common/lifecycle.js';\nimport { ILogService } from '../../../../platform/log/common/log.js';\nimport { toErrorMessage } from '../../../../base/common/errorMessage.js';\nimport { IUriIdentityService } from '../../../../platform/uriIdentity/common/uriIdentity.js';\nimport { IWorkspaceTrustManagementService } from '../../../../platform/workspace/common/workspaceTrust.js';\nimport { delta, distinct, equals as arrayEquals } from '../../../../base/common/arrays.js';\nimport { IStringDictionary } from '../../../../base/common/collections.js';\nimport { IExtensionService } from '../../extensions/common/extensions.js';\nimport { IWorkbenchAssignmentService } from '../../assignment/common/assignmentService.js';\nimport { isUndefined } from '../../../../base/common/types.js';\nimport { localize } from '../../../../nls.js';\nimport { DidChangeUserDataProfileEvent, IUserDataProfileService } from '../../userDataProfile/common/userDataProfile.js';\nimport { IPolicyService, NullPolicyService } from '../../../../platform/policy/common/policy.js';\nimport { IUserDataProfile, IUserDataProfilesService } from '../../../../platform/userDataProfile/common/userDataProfile.js';\nimport { IJSONEditingService } from '../common/jsonEditing.js';\nimport { IBrowserWorkbenchEnvironmentService } from '../../environment/browser/environmentService.js';\nimport { workbenchConfigurationNodeBase } from '../../../common/configuration.js';\nimport { mainWindow } from '../../../../base/browser/window.js';\nimport { runWhenWindowIdle } from '../../../../base/browser/dom.js';\n\nfunction getLocalUserConfigurationScopes(userDataProfile: IUserDataProfile, hasRemote: boolean): ConfigurationScope[] | undefined {\n\treturn (userDataProfile.isDefault || userDataProfile.useDefaultFlags?.settings)\n\t\t? hasRemote ? LOCAL_MACHINE_SCOPES : undefined\n\t\t: hasRemote ? LOCAL_MACHINE_PROFILE_SCOPES : PROFILE_SCOPES;\n}\n\nclass Workspace extends BaseWorkspace {\n\tinitialized: boolean = false;\n}\n\nexport class WorkspaceService extends Disposable implements IWorkbenchConfigurationService, IWorkspaceContextService {\n\n\tpublic _serviceBrand: undefined;\n\n\tprivate workspace!: Workspace;\n\tprivate initRemoteUserConfigurationBarrier: Barrier;\n\tprivate completeWorkspaceBarrier: Barrier;\n\tprivate readonly configurationCache: IConfigurationCache;\n\tprivate _configuration: Configuration;\n\tprivate initialized: boolean = false;\n\tprivate readonly defaultConfiguration: DefaultConfiguration;\n\tprivate readonly policyConfiguration: IPolicyConfiguration;\n\tprivate applicationConfiguration: ApplicationConfiguration | null = null;\n\tprivate readonly applicationConfigurationDisposables: DisposableStore;\n\tprivate readonly localUserConfiguration: UserConfiguration;\n\tprivate readonly remoteUserConfiguration: RemoteUserConfiguration | null = null;\n\tprivate readonly workspaceConfiguration: WorkspaceConfiguration;\n\tprivate cachedFolderConfigs: ResourceMap<FolderConfiguration>;\n\tprivate readonly workspaceEditingQueue: Queue<void>;\n\n\tprivate readonly _onDidChangeConfiguration: Emitter<IConfigurationChangeEvent> = this._register(new Emitter<IConfigurationChangeEvent>());\n\tpublic readonly onDidChangeConfiguration: Event<IConfigurationChangeEvent> = this._onDidChangeConfiguration.event;\n\n\tprotected readonly _onWillChangeWorkspaceFolders: Emitter<IWorkspaceFoldersWillChangeEvent> = this._register(new Emitter<IWorkspaceFoldersWillChangeEvent>());\n\tpublic readonly onWillChangeWorkspaceFolders: Event<IWorkspaceFoldersWillChangeEvent> = this._onWillChangeWorkspaceFolders.event;\n\n\tprivate readonly _onDidChangeWorkspaceFolders: Emitter<IWorkspaceFoldersChangeEvent> = this._register(new Emitter<IWorkspaceFoldersChangeEvent>());\n\tpublic readonly onDidChangeWorkspaceFolders: Event<IWorkspaceFoldersChangeEvent> = this._onDidChangeWorkspaceFolders.event;\n\n\tprivate readonly _onDidChangeWorkspaceName: Emitter<void> = this._register(new Emitter<void>());\n\tpublic readonly onDidChangeWorkspaceName: Event<void> = this._onDidChangeWorkspaceName.event;\n\n\tprivate readonly _onDidChangeWorkbenchState: Emitter<WorkbenchState> = this._register(new Emitter<WorkbenchState>());\n\tpublic readonly onDidChangeWorkbenchState: Event<WorkbenchState> = this._onDidChangeWorkbenchState.event;\n\n\tprivate isWorkspaceTrusted: boolean = true;\n\n\tprivate _restrictedSettings: RestrictedSettings = { default: [] };\n\tget restrictedSettings() { return this._restrictedSettings; }\n\tprivate readonly _onDidChangeRestrictedSettings = this._register(new Emitter<RestrictedSettings>());\n\tpublic readonly onDidChangeRestrictedSettings = this._onDidChangeRestrictedSettings.event;\n\n\tprivate readonly configurationRegistry: IConfigurationRegistry;\n\n\tprivate instantiationService: IInstantiationService | undefined;\n\tprivate configurationEditing: Promise<ConfigurationEditing> | undefined;\n\n\tconstructor(\n\t\t{ remoteAuthority, configurationCache }: { remoteAuthority?: string; configurationCache: IConfigurationCache },\n\t\tenvironmentService: IBrowserWorkbenchEnvironmentService,\n\t\tprivate readonly userDataProfileService: IUserDataProfileService,\n\t\tprivate readonly userDataProfilesService: IUserDataProfilesService,\n\t\tprivate readonly fileService: IFileService,\n\t\tprivate readonly remoteAgentService: IRemoteAgentService,\n\t\tprivate readonly uriIdentityService: IUriIdentityService,\n\t\tprivate readonly logService: ILogService,\n\t\tpolicyService: IPolicyService\n\t) {\n\t\tsuper();\n\n\t\tthis.configurationRegistry = Registry.as<IConfigurationRegistry>(Extensions.Configuration);\n\n\t\tthis.initRemoteUserConfigurationBarrier = new Barrier();\n\t\tthis.completeWorkspaceBarrier = new Barrier();\n\t\tthis.defaultConfiguration = this._register(new DefaultConfiguration(configurationCache, environmentService, logService));\n\t\tthis.policyConfiguration = policyService instanceof NullPolicyService ? new NullPolicyConfiguration() : this._register(new PolicyConfiguration(this.defaultConfiguration, policyService, logService));\n\t\tthis.configurationCache = configurationCache;\n\t\tthis._configuration = new Configuration(this.defaultConfiguration.configurationModel, this.policyConfiguration.configurationModel, ConfigurationModel.createEmptyModel(logService), ConfigurationModel.createEmptyModel(logService), ConfigurationModel.createEmptyModel(logService), ConfigurationModel.createEmptyModel(logService), new ResourceMap(), ConfigurationModel.createEmptyModel(logService), new ResourceMap<ConfigurationModel>(), this.workspace, logService);\n\t\tthis.applicationConfigurationDisposables = this._register(new DisposableStore());\n\t\tthis.createApplicationConfiguration();\n\t\tthis.localUserConfiguration = this._register(new UserConfiguration(userDataProfileService.currentProfile.settingsResource, userDataProfileService.currentProfile.tasksResource, { scopes: getLocalUserConfigurationScopes(userDataProfileService.currentProfile, !!remoteAuthority) }, fileService, uriIdentityService, logService));\n\t\tthis.cachedFolderConfigs = new ResourceMap<FolderConfiguration>();\n\t\tthis._register(this.localUserConfiguration.onDidChangeConfiguration(userConfiguration => this.onLocalUserConfigurationChanged(userConfiguration)));\n\t\tif (remoteAuthority) {\n\t\t\tconst remoteUserConfiguration = this.remoteUserConfiguration = this._register(new RemoteUserConfiguration(remoteAuthority, configurationCache, fileService, uriIdentityService, remoteAgentService, logService));\n\t\t\tthis._register(remoteUserConfiguration.onDidInitialize(remoteUserConfigurationModel => {\n\t\t\t\tthis._register(remoteUserConfiguration.onDidChangeConfiguration(remoteUserConfigurationModel => this.onRemoteUserConfigurationChanged(remoteUserConfigurationModel)));\n\t\t\t\tthis.onRemoteUserConfigurationChanged(remoteUserConfigurationModel);\n\t\t\t\tthis.initRemoteUserConfigurationBarrier.open();\n\t\t\t}));\n\t\t} else {\n\t\t\tthis.initRemoteUserConfigurationBarrier.open();\n\t\t}\n\n\t\tthis.workspaceConfiguration = this._register(new WorkspaceConfiguration(configurationCache, fileService, uriIdentityService, logService));\n\t\tthis._register(this.workspaceConfiguration.onDidUpdateConfiguration(fromCache => {\n\t\t\tthis.onWorkspaceConfigurationChanged(fromCache).then(() => {\n\t\t\t\tthis.workspace.initialized = this.workspaceConfiguration.initialized;\n\t\t\t\tthis.checkAndMarkWorkspaceComplete(fromCache);\n\t\t\t});\n\t\t}));\n\n\t\tthis._register(this.defaultConfiguration.onDidChangeConfiguration(({ properties, defaults }) => this.onDefaultConfigurationChanged(defaults, properties)));\n\t\tthis._register(this.policyConfiguration.onDidChangeConfiguration(configurationModel => this.onPolicyConfigurationChanged(configurationModel)));\n\t\tthis._register(userDataProfileService.onDidChangeCurrentProfile(e => this.onUserDataProfileChanged(e)));\n\n\t\tthis.workspaceEditingQueue = new Queue<void>();\n\t}\n\n\tprivate createApplicationConfiguration(): void {\n\t\tthis.applicationConfigurationDisposables.clear();\n\t\tif (this.userDataProfileService.currentProfile.isDefault || this.userDataProfileService.currentProfile.useDefaultFlags?.settings) {\n\t\t\tthis.applicationConfiguration = null;\n\t\t} else {\n\t\t\tthis.applicationConfiguration = this.applicationConfigurationDisposables.add(this._register(new ApplicationConfiguration(this.userDataProfilesService, this.fileService, this.uriIdentityService, this.logService)));\n\t\t\tthis.applicationConfigurationDisposables.add(this.applicationConfiguration.onDidChangeConfiguration(configurationModel => this.onApplicationConfigurationChanged(configurationModel)));\n\t\t}\n\t}\n\n\t// Workspace Context Service Impl\n\n\tpublic async getCompleteWorkspace(): Promise<Workspace> {\n\t\tawait this.completeWorkspaceBarrier.wait();\n\t\treturn this.getWorkspace();\n\t}\n\n\tpublic getWorkspace(): Workspace {\n\t\treturn this.workspace;\n\t}\n\n\tpublic getWorkbenchState(): WorkbenchState {\n\t\t// Workspace has configuration file\n\t\tif (this.workspace.configuration) {\n\t\t\treturn WorkbenchState.WORKSPACE;\n\t\t}\n\n\t\t// Folder has single root\n\t\tif (this.workspace.folders.length === 1) {\n\t\t\treturn WorkbenchState.FOLDER;\n\t\t}\n\n\t\t// Empty\n\t\treturn WorkbenchState.EMPTY;\n\t}\n\n\tpublic getWorkspaceFolder(resource: URI): IWorkspaceFolder | null {\n\t\treturn this.workspace.getFolder(resource);\n\t}\n\n\tpublic addFolders(foldersToAdd: IWorkspaceFolderCreationData[], index?: number): Promise<void> {\n\t\treturn this.updateFolders(foldersToAdd, [], index);\n\t}\n\n\tpublic removeFolders(foldersToRemove: URI[]): Promise<void> {\n\t\treturn this.updateFolders([], foldersToRemove);\n\t}\n\n\tpublic async updateFolders(foldersToAdd: IWorkspaceFolderCreationData[], foldersToRemove: URI[], index?: number): Promise<void> {\n\t\treturn this.workspaceEditingQueue.queue(() => this.doUpdateFolders(foldersToAdd, foldersToRemove, index));\n\t}\n\n\tpublic isInsideWorkspace(resource: URI): boolean {\n\t\treturn !!this.getWorkspaceFolder(resource);\n\t}\n\n\tpublic isCurrentWorkspace(workspaceIdOrFolder: IWorkspaceIdentifier | ISingleFolderWorkspaceIdentifier | URI): boolean {\n\t\tswitch (this.getWorkbenchState()) {\n\t\t\tcase WorkbenchState.FOLDER: {\n\t\t\t\tlet folderUri: URI | undefined = undefined;\n\t\t\t\tif (URI.isUri(workspaceIdOrFolder)) {\n\t\t\t\t\tfolderUri = workspaceIdOrFolder;\n\t\t\t\t} else if (isSingleFolderWorkspaceIdentifier(workspaceIdOrFolder)) {\n\t\t\t\t\tfolderUri = workspaceIdOrFolder.uri;\n\t\t\t\t}\n\n\t\t\t\treturn URI.isUri(folderUri) && this.uriIdentityService.extUri.isEqual(folderUri, this.workspace.folders[0].uri);\n\t\t\t}\n\t\t\tcase WorkbenchState.WORKSPACE:\n\t\t\t\treturn isWorkspaceIdentifier(workspaceIdOrFolder) && this.workspace.id === workspaceIdOrFolder.id;\n\t\t}\n\t\treturn false;\n\t}\n\n\tprivate async doUpdateFolders(foldersToAdd: IWorkspaceFolderCreationData[], foldersToRemove: URI[], index?: number): Promise<void> {\n\t\tif (this.getWorkbenchState() !== WorkbenchState.WORKSPACE) {\n\t\t\treturn Promise.resolve(undefined); // we need a workspace to begin with\n\t\t}\n\n\t\tif (foldersToAdd.length + foldersToRemove.length === 0) {\n\t\t\treturn Promise.resolve(undefined); // nothing to do\n\t\t}\n\n\t\tlet foldersHaveChanged = false;\n\n\t\t// Remove first (if any)\n\t\tlet currentWorkspaceFolders = this.getWorkspace().folders;\n\t\tlet newStoredFolders: IStoredWorkspaceFolder[] = currentWorkspaceFolders.map(f => f.raw).filter((folder, index): folder is IStoredWorkspaceFolder => {\n\t\t\tif (!isStoredWorkspaceFolder(folder)) {\n\t\t\t\treturn true; // keep entries which are unrelated\n\t\t\t}\n\n\t\t\treturn !this.contains(foldersToRemove, currentWorkspaceFolders[index].uri); // keep entries which are unrelated\n\t\t});\n\n\t\tfoldersHaveChanged = currentWorkspaceFolders.length !== newStoredFolders.length;\n\n\t\t// Add afterwards (if any)\n\t\tif (foldersToAdd.length) {\n\n\t\t\t// Recompute current workspace folders if we have folders to add\n\t\t\tconst workspaceConfigPath = this.getWorkspace().configuration!;\n\t\t\tconst workspaceConfigFolder = this.uriIdentityService.extUri.dirname(workspaceConfigPath);\n\t\t\tcurrentWorkspaceFolders = toWorkspaceFolders(newStoredFolders, workspaceConfigPath, this.uriIdentityService.extUri);\n\t\t\tconst currentWorkspaceFolderUris = currentWorkspaceFolders.map(folder => folder.uri);\n\n\t\t\tconst storedFoldersToAdd: IStoredWorkspaceFolder[] = [];\n\n\t\t\tfor (const folderToAdd of foldersToAdd) {\n\t\t\t\tconst folderURI = folderToAdd.uri;\n\t\t\t\tif (this.contains(currentWorkspaceFolderUris, folderURI)) {\n\t\t\t\t\tcontinue; // already existing\n\t\t\t\t}\n\t\t\t\ttry {\n\t\t\t\t\tconst result = await this.fileService.stat(folderURI);\n\t\t\t\t\tif (!result.isDirectory) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t} catch (e) { /* Ignore */ }\n\t\t\t\tstoredFoldersToAdd.push(getStoredWorkspaceFolder(folderURI, false, folderToAdd.name, workspaceConfigFolder, this.uriIdentityService.extUri));\n\t\t\t}\n\n\t\t\t// Apply to array of newStoredFolders\n\t\t\tif (storedFoldersToAdd.length > 0) {\n\t\t\t\tfoldersHaveChanged = true;\n\n\t\t\t\tif (typeof index === 'number' && index >= 0 && index < newStoredFolders.length) {\n\t\t\t\t\tnewStoredFolders = newStoredFolders.slice(0);\n\t\t\t\t\tnewStoredFolders.splice(index, 0, ...storedFoldersToAdd);\n\t\t\t\t} else {\n\t\t\t\t\tnewStoredFolders = [...newStoredFolders, ...storedFoldersToAdd];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Set folders if we recorded a change\n\t\tif (foldersHaveChanged) {\n\t\t\treturn this.setFolders(newStoredFolders);\n\t\t}\n\n\t\treturn Promise.resolve(undefined);\n\t}\n\n\tprivate async setFolders(folders: IStoredWorkspaceFolder[]): Promise<void> {\n\t\tif (!this.instantiationService) {\n\t\t\tthrow new Error('Cannot update workspace folders because workspace service is not yet ready to accept writes.');\n\t\t}\n\n\t\tawait this.instantiationService.invokeFunction(accessor => this.workspaceConfiguration.setFolders(folders, accessor.get(IJSONEditingService)));\n\t\treturn this.onWorkspaceConfigurationChanged(false);\n\t}\n\n\tprivate contains(resources: URI[], toCheck: URI): boolean {\n\t\treturn resources.some(resource => this.uriIdentityService.extUri.isEqual(resource, toCheck));\n\t}\n\n\t// Workspace Configuration Service Impl\n\n\tgetConfigurationData(): IConfigurationData {\n\t\treturn this._configuration.toData();\n\t}\n\n\tgetValue<T>(): T;\n\tgetValue<T>(section: string): T;\n\tgetValue<T>(overrides: IConfigurationOverrides): T;\n\tgetValue<T>(section: string, overrides: IConfigurationOverrides): T;\n\tgetValue(arg1?: any, arg2?: any): any {\n\t\tconst section = typeof arg1 === 'string' ? arg1 : undefined;\n\t\tconst overrides = isConfigurationOverrides(arg1) ? arg1 : isConfigurationOverrides(arg2) ? arg2 : undefined;\n\t\treturn this._configuration.getValue(section, overrides);\n\t}\n\n\tupdateValue(key: string, value: any): Promise<void>;\n\tupdateValue(key: string, value: any, overrides: IConfigurationOverrides | IConfigurationUpdateOverrides): Promise<void>;\n\tupdateValue(key: string, value: any, target: ConfigurationTarget): Promise<void>;\n\tupdateValue(key: string, value: any, overrides: IConfigurationOverrides | IConfigurationUpdateOverrides, target: ConfigurationTarget, options?: IConfigurationUpdateOptions): Promise<void>;\n\tasync updateValue(key: string, value: any, arg3?: any, arg4?: any, options?: any): Promise<void> {\n\t\tconst overrides: IConfigurationUpdateOverrides | undefined = isConfigurationUpdateOverrides(arg3) ? arg3\n\t\t\t: isConfigurationOverrides(arg3) ? { resource: arg3.resource, overrideIdentifiers: arg3.overrideIdentifier ? [arg3.overrideIdentifier] : undefined } : undefined;\n\t\tconst target: ConfigurationTarget | undefined = overrides ? arg4 : arg3;\n\t\tconst targets: ConfigurationTarget[] = target ? [target] : [];\n\n\t\tif (overrides?.overrideIdentifiers) {\n\t\t\toverrides.overrideIdentifiers = distinct(overrides.overrideIdentifiers);\n\t\t\toverrides.overrideIdentifiers = overrides.overrideIdentifiers.length ? overrides.overrideIdentifiers : undefined;\n\t\t}\n\n\t\tif (!targets.length) {\n\t\t\tif (overrides?.overrideIdentifiers && overrides.overrideIdentifiers.length > 1) {\n\t\t\t\tthrow new Error('Configuration Target is required while updating the value for multiple override identifiers');\n\t\t\t}\n\t\t\tconst inspect = this.inspect(key, { resource: overrides?.resource, overrideIdentifier: overrides?.overrideIdentifiers ? overrides.overrideIdentifiers[0] : undefined });\n\t\t\ttargets.push(...this.deriveConfigurationTargets(key, value, inspect));\n\n\t\t\t// Remove the setting, if the value is same as default value and is updated only in user target\n\t\t\tif (equals(value, inspect.defaultValue) && targets.length === 1 && (targets[0] === ConfigurationTarget.USER || targets[0] === ConfigurationTarget.USER_LOCAL)) {\n\t\t\t\tvalue = undefined;\n\t\t\t}\n\t\t}\n\n\t\tawait Promises.settled(targets.map(target => this.writeConfigurationValue(key, value, target, overrides, options)));\n\t}\n\n\tasync reloadConfiguration(target?: ConfigurationTarget | IWorkspaceFolder): Promise<void> {\n\t\tif (target === undefined) {\n\t\t\tthis.reloadDefaultConfiguration();\n\t\t\tconst application = await this.reloadApplicationConfiguration(true);\n\t\t\tconst { local, remote } = await this.reloadUserConfiguration();\n\t\t\tawait this.reloadWorkspaceConfiguration();\n\t\t\tawait this.loadConfiguration(application, local, remote, true);\n\t\t\treturn;\n\t\t}\n\n\t\tif (isWorkspaceFolder(target)) {\n\t\t\tawait this.reloadWorkspaceFolderConfiguration(target);\n\t\t\treturn;\n\t\t}\n\n\t\tswitch (target) {\n\t\t\tcase ConfigurationTarget.DEFAULT:\n\t\t\t\tthis.reloadDefaultConfiguration();\n\t\t\t\treturn;\n\n\t\t\tcase ConfigurationTarget.USER: {\n\t\t\t\tconst { local, remote } = await this.reloadUserConfiguration();\n\t\t\t\tawait this.loadConfiguration(this._configuration.applicationConfiguration, local, remote, true);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tcase ConfigurationTarget.USER_LOCAL:\n\t\t\t\tawait this.reloadLocalUserConfiguration();\n\t\t\t\treturn;\n\n\t\t\tcase ConfigurationTarget.USER_REMOTE:\n\t\t\t\tawait this.reloadRemoteUserConfiguration();\n\t\t\t\treturn;\n\n\t\t\tcase ConfigurationTarget.WORKSPACE:\n\t\t\tcase ConfigurationTarget.WORKSPACE_FOLDER:\n\t\t\t\tawait this.reloadWorkspaceConfiguration();\n\t\t\t\treturn;\n\t\t}\n\t}\n\n\thasCachedConfigurationDefaultsOverrides(): boolean {\n\t\treturn this.defaultConfiguration.hasCachedConfigurationDefaultsOverrides();\n\t}\n\n\tinspect<T>(key: string, overrides?: IConfigurationOverrides): IConfigurationValue<T> {\n\t\treturn this._configuration.inspect<T>(key, overrides);\n\t}\n\n\tkeys(): {\n\t\tdefault: string[];\n\t\tuser: string[];\n\t\tworkspace: string[];\n\t\tworkspaceFolder: string[];\n\t} {\n\t\treturn this._configuration.keys();\n\t}\n\n\tpublic async whenRemoteConfigurationLoaded(): Promise<void> {\n\t\tawait this.initRemoteUserConfigurationBarrier.wait();\n\t}\n\n\t/**\n\t * At present, all workspaces (empty, single-folder, multi-root) in local and remote\n\t * can be initialized without requiring extension host except following case:\n\t *\n\t * A multi root workspace with .code-workspace file that has to be resolved by an extension.\n\t * Because of readonly `rootPath` property in extension API we have to resolve multi root workspace\n\t * before extension host starts so that `rootPath` can be set to first folder.\n\t *\n\t * This restriction is lifted partially for web in `MainThreadWorkspace`.\n\t * In web, we start extension host with empty `rootPath` in this case.\n\t *\n\t * Related root path issue discussion is being tracked here - https://github.com/microsoft/vscode/issues/69335\n\t */\n\tasync initialize(arg: IAnyWorkspaceIdentifier): Promise<void> {\n\t\tmark('code/willInitWorkspaceService');\n\n\t\tconst trigger = this.initialized;\n\t\tthis.initialized = false;\n\t\tconst workspace = await this.createWorkspace(arg);\n\t\tawait this.updateWorkspaceAndInitializeConfiguration(workspace, trigger);\n\t\tthis.checkAndMarkWorkspaceComplete(false);\n\n\t\tmark('code/didInitWorkspaceService');\n\t}\n\n\tupdateWorkspaceTrust(trusted: boolean): void {\n\t\tif (this.isWorkspaceTrusted !== trusted) {\n\t\t\tthis.isWorkspaceTrusted = trusted;\n\t\t\tconst data = this._configuration.toData();\n\t\t\tconst folderConfigurationModels: (ConfigurationModel | undefined)[] = [];\n\t\t\tfor (const folder of this.workspace.folders) {\n\t\t\t\tconst folderConfiguration = this.cachedFolderConfigs.get(folder.uri);\n\t\t\t\tlet configurationModel: ConfigurationModel | undefined;\n\t\t\t\tif (folderConfiguration) {\n\t\t\t\t\tconfigurationModel = folderConfiguration.updateWorkspaceTrust(this.isWorkspaceTrusted);\n\t\t\t\t\tthis._configuration.updateFolderConfiguration(folder.uri, configurationModel);\n\t\t\t\t}\n\t\t\t\tfolderConfigurationModels.push(configurationModel);\n\t\t\t}\n\t\t\tif (this.getWorkbenchState() === WorkbenchState.FOLDER) {\n\t\t\t\tif (folderConfigurationModels[0]) {\n\t\t\t\t\tthis._configuration.updateWorkspaceConfiguration(folderConfigurationModels[0]);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthis._configuration.updateWorkspaceConfiguration(this.workspaceConfiguration.updateWorkspaceTrust(this.isWorkspaceTrusted));\n\t\t\t}\n\t\t\tthis.updateRestrictedSettings();\n\n\t\t\tlet keys: string[] = [];\n\t\t\tif (this.restrictedSettings.userLocal) {\n\t\t\t\tkeys.push(...this.restrictedSettings.userLocal);\n\t\t\t}\n\t\t\tif (this.restrictedSettings.userRemote) {\n\t\t\t\tkeys.push(...this.restrictedSettings.userRemote);\n\t\t\t}\n\t\t\tif (this.restrictedSettings.workspace) {\n\t\t\t\tkeys.push(...this.restrictedSettings.workspace);\n\t\t\t}\n\t\t\tthis.restrictedSettings.workspaceFolder?.forEach((value) => keys.push(...value));\n\t\t\tkeys = distinct(keys);\n\t\t\tif (keys.length) {\n\t\t\t\tthis.triggerConfigurationChange({ keys, overrides: [] }, { data, workspace: this.workspace }, ConfigurationTarget.WORKSPACE);\n\t\t\t}\n\t\t}\n\t}\n\n\tacquireInstantiationService(instantiationService: IInstantiationService): void {\n\t\tthis.instantiationService = instantiationService;\n\t}\n\n\tisSettingAppliedForAllProfiles(key: string): boolean {\n\t\tif (this.configurationRegistry.getConfigurationProperties()[key]?.scope === ConfigurationScope.APPLICATION) {\n\t\t\treturn true;\n\t\t}\n\t\tconst allProfilesSettings = this.getValue<string[]>(APPLY_ALL_PROFILES_SETTING) ?? [];\n\t\treturn Array.isArray(allProfilesSettings) && allProfilesSettings.includes(key);\n\t}\n\n\tprivate async createWorkspace(arg: IAnyWorkspaceIdentifier): Promise<Workspace> {\n\t\tif (isWorkspaceIdentifier(arg)) {\n\t\t\treturn this.createMultiFolderWorkspace(arg);\n\t\t}\n\n\t\tif (isSingleFolderWorkspaceIdentifier(arg)) {\n\t\t\treturn this.createSingleFolderWorkspace(arg);\n\t\t}\n\n\t\treturn this.createEmptyWorkspace(arg);\n\t}\n\n\tprivate async createMultiFolderWorkspace(workspaceIdentifier: IWorkspaceIdentifier): Promise<Workspace> {\n\t\tawait this.workspaceConfiguration.initialize({ id: workspaceIdentifier.id, configPath: workspaceIdentifier.configPath }, this.isWorkspaceTrusted);\n\t\tconst workspaceConfigPath = workspaceIdentifier.configPath;\n\t\tconst workspaceFolders = toWorkspaceFolders(this.workspaceConfiguration.getFolders(), workspaceConfigPath, this.uriIdentityService.extUri);\n\t\tconst workspaceId = workspaceIdentifier.id;\n\t\tconst workspace = new Workspace(workspaceId, workspaceFolders, this.workspaceConfiguration.isTransient(), workspaceConfigPath, uri => this.uriIdentityService.extUri.ignorePathCasing(uri));\n\t\tworkspace.initialized = this.workspaceConfiguration.initialized;\n\t\treturn workspace;\n\t}\n\n\tprivate createSingleFolderWorkspace(singleFolderWorkspaceIdentifier: ISingleFolderWorkspaceIdentifier): Workspace {\n\t\tconst workspace = new Workspace(singleFolderWorkspaceIdentifier.id, [toWorkspaceFolder(singleFolderWorkspaceIdentifier.uri)], false, null, uri => this.uriIdentityService.extUri.ignorePathCasing(uri));\n\t\tworkspace.initialized = true;\n\t\treturn workspace;\n\t}\n\n\tprivate createEmptyWorkspace(emptyWorkspaceIdentifier: IEmptyWorkspaceIdentifier): Promise<Workspace> {\n\t\tconst workspace = new Workspace(emptyWorkspaceIdentifier.id, [], false, null, uri => this.uriIdentityService.extUri.ignorePathCasing(uri));\n\t\tworkspace.initialized = true;\n\t\treturn Promise.resolve(workspace);\n\t}\n\n\tprivate checkAndMarkWorkspaceComplete(fromCache: boolean): void {\n\t\tif (!this.completeWorkspaceBarrier.isOpen() && this.workspace.initialized) {\n\t\t\tthis.completeWorkspaceBarrier.open();\n\t\t\tthis.validateWorkspaceFoldersAndReload(fromCache);\n\t\t}\n\t}\n\n\tprivate async updateWorkspaceAndInitializeConfiguration(workspace: Workspace, trigger: boolean): Promise<void> {\n\t\tconst hasWorkspaceBefore = !!this.workspace;\n\t\tlet previousState: WorkbenchState | undefined;\n\t\tlet previousWorkspacePath: string | undefined;\n\t\tlet previousFolders: WorkspaceFolder[] = [];\n\n\t\tif (hasWorkspaceBefore) {\n\t\t\tpreviousState = this.getWorkbenchState();\n\t\t\tpreviousWorkspacePath = this.workspace.configuration ? this.workspace.configuration.fsPath : undefined;\n\t\t\tpreviousFolders = this.workspace.folders;\n\t\t\tthis.workspace.update(workspace);\n\t\t} else {\n\t\t\tthis.workspace = workspace;\n\t\t}\n\n\t\tawait this.initializeConfiguration(trigger);\n\n\t\t// Trigger changes after configuration initialization so that configuration is up to date.\n\t\tif (hasWorkspaceBefore) {\n\t\t\tconst newState = this.getWorkbenchState();\n\t\t\tif (previousState && newState !== previousState) {\n\t\t\t\tthis._onDidChangeWorkbenchState.fire(newState);\n\t\t\t}\n\n\t\t\tconst newWorkspacePath = this.workspace.configuration ? this.workspace.configuration.fsPath : undefined;\n\t\t\tif (previousWorkspacePath && newWorkspacePath !== previousWorkspacePath || newState !== previousState) {\n\t\t\t\tthis._onDidChangeWorkspaceName.fire();\n\t\t\t}\n\n\t\t\tconst folderChanges = this.compareFolders(previousFolders, this.workspace.folders);\n\t\t\tif (folderChanges && (folderChanges.added.length || folderChanges.removed.length || folderChanges.changed.length)) {\n\t\t\t\tawait this.handleWillChangeWorkspaceFolders(folderChanges, false);\n\t\t\t\tthis._onDidChangeWorkspaceFolders.fire(folderChanges);\n\t\t\t}\n\t\t}\n\n\t\tif (!this.localUserConfiguration.hasTasksLoaded) {\n\t\t\t// Reload local user configuration again to load user tasks\n\t\t\tthis._register(runWhenWindowIdle(mainWindow, () => this.reloadLocalUserConfiguration(false, this._configuration.localUserConfiguration)));\n\t\t}\n\t}\n\n\tprivate compareFolders(currentFolders: IWorkspaceFolder[], newFolders: IWorkspaceFolder[]): IWorkspaceFoldersChangeEvent {\n\t\tconst result: IWorkspaceFoldersChangeEvent = { added: [], removed: [], changed: [] };\n\t\tresult.added = newFolders.filter(newFolder => !currentFolders.some(currentFolder => newFolder.uri.toString() === currentFolder.uri.toString()));\n\t\tfor (let currentIndex = 0; currentIndex < currentFolders.length; currentIndex++) {\n\t\t\tconst currentFolder = currentFolders[currentIndex];\n\t\t\tlet newIndex = 0;\n\t\t\tfor (newIndex = 0; newIndex < newFolders.length && currentFolder.uri.toString() !== newFolders[newIndex].uri.toString(); newIndex++) { }\n\t\t\tif (newIndex < newFolders.length) {\n\t\t\t\tif (currentIndex !== newIndex || currentFolder.name !== newFolders[newIndex].name) {\n\t\t\t\t\tresult.changed.push(currentFolder);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tresult.removed.push(currentFolder);\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n\n\tprivate async initializeConfiguration(trigger: boolean): Promise<void> {\n\t\tawait this.defaultConfiguration.initialize();\n\n\t\tconst initPolicyConfigurationPromise = this.policyConfiguration.initialize();\n\t\tconst initApplicationConfigurationPromise = this.applicationConfiguration ? this.applicationConfiguration.initialize() : Promise.resolve(ConfigurationModel.createEmptyModel(this.logService));\n\t\tconst initUserConfiguration = async () => {\n\t\t\tmark('code/willInitUserConfiguration');\n\t\t\tconst result = await Promise.all([this.localUserConfiguration.initialize(), this.remoteUserConfiguration ? this.remoteUserConfiguration.initialize() : Promise.resolve(ConfigurationModel.createEmptyModel(this.logService))]);\n\t\t\tif (this.applicationConfiguration) {\n\t\t\t\tconst applicationConfigurationModel = await initApplicationConfigurationPromise;\n\t\t\t\tresult[0] = this.localUserConfiguration.reparse({ exclude: applicationConfigurationModel.getValue(APPLY_ALL_PROFILES_SETTING) });\n\t\t\t}\n\t\t\tmark('code/didInitUserConfiguration');\n\t\t\treturn result;\n\t\t};\n\n\t\tconst [, application, [local, remote]] = await Promise.all([\n\t\t\tinitPolicyConfigurationPromise,\n\t\t\tinitApplicationConfigurationPromise,\n\t\t\tinitUserConfiguration()\n\t\t]);\n\n\t\tmark('code/willInitWorkspaceConfiguration');\n\t\tawait this.loadConfiguration(application, local, remote, trigger);\n\t\tmark('code/didInitWorkspaceConfiguration');\n\t}\n\n\tprivate reloadDefaultConfiguration(): void {\n\t\tthis.onDefaultConfigurationChanged(this.defaultConfiguration.reload());\n\t}\n\n\tprivate async reloadApplicationConfiguration(donotTrigger?: boolean): Promise<ConfigurationModel> {\n\t\tif (!this.applicationConfiguration) {\n\t\t\treturn ConfigurationModel.createEmptyModel(this.logService);\n\t\t}\n\t\tconst model = await this.applicationConfiguration.loadConfiguration();\n\t\tif (!donotTrigger) {\n\t\t\tthis.onApplicationConfigurationChanged(model);\n\t\t}\n\t\treturn model;\n\t}\n\n\tprivate async reloadUserConfiguration(): Promise<{ local: ConfigurationModel; remote: ConfigurationModel }> {\n\t\tconst [local, remote] = await Promise.all([this.reloadLocalUserConfiguration(true), this.reloadRemoteUserConfiguration(true)]);\n\t\treturn { local, remote };\n\t}\n\n\tasync reloadLocalUserConfiguration(donotTrigger?: boolean, settingsConfiguration?: ConfigurationModel): Promise<ConfigurationModel> {\n\t\tconst model = await this.localUserConfiguration.reload(settingsConfiguration);\n\t\tif (!donotTrigger) {\n\t\t\tthis.onLocalUserConfigurationChanged(model);\n\t\t}\n\t\treturn model;\n\t}\n\n\tprivate async reloadRemoteUserConfiguration(donotTrigger?: boolean): Promise<ConfigurationModel> {\n\t\tif (this.remoteUserConfiguration) {\n\t\t\tconst model = await this.remoteUserConfiguration.reload();\n\t\t\tif (!donotTrigger) {\n\t\t\t\tthis.onRemoteUserConfigurationChanged(model);\n\t\t\t}\n\t\t\treturn model;\n\t\t}\n\t\treturn ConfigurationModel.createEmptyModel(this.logService);\n\t}\n\n\tprivate async reloadWorkspaceConfiguration(): Promise<void> {\n\t\tconst workbenchState = this.getWorkbenchState();\n\t\tif (workbenchState === WorkbenchState.FOLDER) {\n\t\t\treturn this.onWorkspaceFolderConfigurationChanged(this.workspace.folders[0]);\n\t\t}\n\t\tif (workbenchState === WorkbenchState.WORKSPACE) {\n\t\t\treturn this.workspaceConfiguration.reload().then(() => this.onWorkspaceConfigurationChanged(false));\n\t\t}\n\t}\n\n\tprivate reloadWorkspaceFolderConfiguration(folder: IWorkspaceFolder): Promise<void> {\n\t\treturn this.onWorkspaceFolderConfigurationChanged(folder);\n\t}\n\n\tprivate async loadConfiguration(applicationConfigurationModel: ConfigurationModel, userConfigurationModel: ConfigurationModel, remoteUserConfigurationModel: ConfigurationModel, trigger: boolean): Promise<void> {\n\t\t// reset caches\n\t\tthis.cachedFolderConfigs = new ResourceMap<FolderConfiguration>();\n\n\t\tconst folders = this.workspace.folders;\n\t\tconst folderConfigurations = await this.loadFolderConfigurations(folders);\n\n\t\tconst workspaceConfiguration = this.getWorkspaceConfigurationModel(folderConfigurations);\n\t\tconst folderConfigurationModels = new ResourceMap<ConfigurationModel>();\n\t\tfolderConfigurations.forEach((folderConfiguration, index) => folderConfigurationModels.set(folders[index].uri, folderConfiguration));\n\n\t\tconst currentConfiguration = this._configuration;\n\t\tthis._configuration = new Configuration(this.defaultConfiguration.configurationModel, this.policyConfiguration.configurationModel, applicationConfigurationModel, userConfigurationModel, remoteUserConfigurationModel, workspaceConfiguration, folderConfigurationModels, ConfigurationModel.createEmptyModel(this.logService), new ResourceMap<ConfigurationModel>(), this.workspace, this.logService);\n\n\t\tthis.initialized = true;\n\n\t\tif (trigger) {\n\t\t\tconst change = this._configuration.compare(currentConfiguration);\n\t\t\tthis.triggerConfigurationChange(change, { data: currentConfiguration.toData(), workspace: this.workspace }, ConfigurationTarget.WORKSPACE);\n\t\t}\n\n\t\tthis.updateRestrictedSettings();\n\t}\n\n\tprivate getWorkspaceConfigurationModel(folderConfigurations: ConfigurationModel[]): ConfigurationModel {\n\t\tswitch (this.getWorkbenchState()) {\n\t\t\tcase WorkbenchState.FOLDER:\n\t\t\t\treturn folderConfigurations[0];\n\t\t\tcase WorkbenchState.WORKSPACE:\n\t\t\t\treturn this.workspaceConfiguration.getConfiguration();\n\t\t\tdefault:\n\t\t\t\treturn ConfigurationModel.createEmptyModel(this.logService);\n\t\t}\n\t}\n\n\tprivate onUserDataProfileChanged(e: DidChangeUserDataProfileEvent): void {\n\t\te.join((async () => {\n\t\t\tconst promises: Promise<ConfigurationModel>[] = [];\n\t\t\tpromises.push(this.localUserConfiguration.reset(e.profile.settingsResource, e.profile.tasksResource, { scopes: getLocalUserConfigurationScopes(e.profile, !!this.remoteUserConfiguration) }));\n\t\t\tif (e.previous.isDefault !== e.profile.isDefault\n\t\t\t\t|| !!e.previous.useDefaultFlags?.settings !== !!e.profile.useDefaultFlags?.settings) {\n\t\t\t\tthis.createApplicationConfiguration();\n\t\t\t\tif (this.applicationConfiguration) {\n\t\t\t\t\tpromises.push(this.reloadApplicationConfiguration(true));\n\t\t\t\t}\n\t\t\t}\n\t\t\tlet [localUser, application] = await Promise.all(promises);\n\t\t\tapplication = application ?? this._configuration.applicationConfiguration;\n\t\t\tif (this.applicationConfiguration) {\n\t\t\t\tlocalUser = this.localUserConfiguration.reparse({ exclude: application.getValue(APPLY_ALL_PROFILES_SETTING) });\n\t\t\t}\n\t\t\tawait this.loadConfiguration(application, localUser, this._configuration.remoteUserConfiguration, true);\n\t\t})());\n\t}\n\n\tprivate onDefaultConfigurationChanged(configurationModel: ConfigurationModel, properties?: string[]): void {\n\t\tif (this.workspace) {\n\t\t\tconst previousData = this._configuration.toData();\n\t\t\tconst change = this._configuration.compareAndUpdateDefaultConfiguration(configurationModel, properties);\n\t\t\tif (this.applicationConfiguration) {\n\t\t\t\tthis._configuration.updateApplicationConfiguration(this.applicationConfiguration.reparse());\n\t\t\t}\n\t\t\tif (this.remoteUserConfiguration) {\n\t\t\t\tthis._configuration.updateLocalUserConfiguration(this.localUserConfiguration.reparse());\n\t\t\t\tthis._configuration.updateRemoteUserConfiguration(this.remoteUserConfiguration.reparse());\n\t\t\t}\n\t\t\tif (this.getWorkbenchState() === WorkbenchState.FOLDER) {\n\t\t\t\tconst folderConfiguration = this.cachedFolderConfigs.get(this.workspace.folders[0].uri);\n\t\t\t\tif (folderConfiguration) {\n\t\t\t\t\tthis._configuration.updateWorkspaceConfiguration(folderConfiguration.reparse());\n\t\t\t\t\tthis._configuration.updateFolderConfiguration(this.workspace.folders[0].uri, folderConfiguration.reparse());\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthis._configuration.updateWorkspaceConfiguration(this.workspaceConfiguration.reparseWorkspaceSettings());\n\t\t\t\tfor (const folder of this.workspace.folders) {\n\t\t\t\t\tconst folderConfiguration = this.cachedFolderConfigs.get(folder.uri);\n\t\t\t\t\tif (folderConfiguration) {\n\t\t\t\t\t\tthis._configuration.updateFolderConfiguration(folder.uri, folderConfiguration.reparse());\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis.triggerConfigurationChange(change, { data: previousData, workspace: this.workspace }, ConfigurationTarget.DEFAULT);\n\t\t\tthis.updateRestrictedSettings();\n\t\t}\n\t}\n\n\tprivate onPolicyConfigurationChanged(policyConfiguration: ConfigurationModel): void {\n\t\tconst previous = { data: this._configuration.toData(), workspace: this.workspace };\n\t\tconst change = this._configuration.compareAndUpdatePolicyConfiguration(policyConfiguration);\n\t\tthis.triggerConfigurationChange(change, previous, ConfigurationTarget.DEFAULT);\n\t}\n\n\tprivate onApplicationConfigurationChanged(applicationConfiguration: ConfigurationModel): void {\n\t\tconst previous = { data: this._configuration.toData(), workspace: this.workspace };\n\t\tconst previousAllProfilesSettings = this._configuration.applicationConfiguration.getValue<string[]>(APPLY_ALL_PROFILES_SETTING) ?? [];\n\t\tconst change = this._configuration.compareAndUpdateApplicationConfiguration(applicationConfiguration);\n\t\tconst currentAllProfilesSettings = this.getValue<string[]>(APPLY_ALL_PROFILES_SETTING) ?? [];\n\t\tconst configurationProperties = this.configurationRegistry.getConfigurationProperties();\n\t\tconst changedKeys: string[] = [];\n\t\tfor (const changedKey of change.keys) {\n\t\t\tif (configurationProperties[changedKey]?.scope === ConfigurationScope.APPLICATION) {\n\t\t\t\tchangedKeys.push(changedKey);\n\t\t\t\tif (changedKey === APPLY_ALL_PROFILES_SETTING) {\n\t\t\t\t\tfor (const previousAllProfileSetting of previousAllProfilesSettings) {\n\t\t\t\t\t\tif (!currentAllProfilesSettings.includes(previousAllProfileSetting)) {\n\t\t\t\t\t\t\tchangedKeys.push(previousAllProfileSetting);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tfor (const currentAllProfileSetting of currentAllProfilesSettings) {\n\t\t\t\t\t\tif (!previousAllProfilesSettings.includes(currentAllProfileSetting)) {\n\t\t\t\t\t\t\tchangedKeys.push(currentAllProfileSetting);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (currentAllProfilesSettings.includes(changedKey)) {\n\t\t\t\tchangedKeys.push(changedKey);\n\t\t\t}\n\t\t}\n\t\tchange.keys = changedKeys;\n\t\tif (change.keys.includes(APPLY_ALL_PROFILES_SETTING)) {\n\t\t\tthis._configuration.updateLocalUserConfiguration(this.localUserConfiguration.reparse({ exclude: currentAllProfilesSettings }));\n\t\t}\n\t\tthis.triggerConfigurationChange(change, previous, ConfigurationTarget.USER);\n\t}\n\n\tprivate onLocalUserConfigurationChanged(userConfiguration: ConfigurationModel): void {\n\t\tconst previous = { data: this._configuration.toData(), workspace: this.workspace };\n\t\tconst change = this._configuration.compareAndUpdateLocalUserConfiguration(userConfiguration);\n\t\tthis.triggerConfigurationChange(change, previous, ConfigurationTarget.USER);\n\t}\n\n\tprivate onRemoteUserConfigurationChanged(userConfiguration: ConfigurationModel): void {\n\t\tconst previous = { data: this._configuration.toData(), workspace: this.workspace };\n\t\tconst change = this._configuration.compareAndUpdateRemoteUserConfiguration(userConfiguration);\n\t\tthis.triggerConfigurationChange(change, previous, ConfigurationTarget.USER);\n\t}\n\n\tprivate async onWorkspaceConfigurationChanged(fromCache: boolean): Promise<void> {\n\t\tif (this.workspace && this.workspace.configuration) {\n\t\t\tlet newFolders = toWorkspaceFolders(this.workspaceConfiguration.getFolders(), this.workspace.configuration, this.uriIdentityService.extUri);\n\n\t\t\t// Validate only if workspace is initialized\n\t\t\tif (this.workspace.initialized) {\n\t\t\t\tconst { added, removed, changed } = this.compareFolders(this.workspace.folders, newFolders);\n\n\t\t\t\t/* If changed validate new folders */\n\t\t\t\tif (added.length || removed.length || changed.length) {\n\t\t\t\t\tnewFolders = await this.toValidWorkspaceFolders(newFolders);\n\t\t\t\t}\n\t\t\t\t/* Otherwise use existing */\n\t\t\t\telse {\n\t\t\t\t\tnewFolders = this.workspace.folders;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tawait this.updateWorkspaceConfiguration(newFolders, this.workspaceConfiguration.getConfiguration(), fromCache);\n\t\t}\n\t}\n\n\tprivate updateRestrictedSettings(): void {\n\t\tconst changed: string[] = [];\n\n\t\tconst allProperties = this.configurationRegistry.getConfigurationProperties();\n\t\tconst defaultRestrictedSettings: string[] = Object.keys(allProperties).filter(key => allProperties[key].restricted).sort((a, b) => a.localeCompare(b));\n\t\tconst defaultDelta = delta(defaultRestrictedSettings, this._restrictedSettings.default, (a, b) => a.localeCompare(b));\n\t\tchanged.push(...defaultDelta.added, ...defaultDelta.removed);\n\n\t\tconst application = (this.applicationConfiguration?.getRestrictedSettings() || []).sort((a, b) => a.localeCompare(b));\n\t\tconst applicationDelta = delta(application, this._restrictedSettings.application || [], (a, b) => a.localeCompare(b));\n\t\tchanged.push(...applicationDelta.added, ...applicationDelta.removed);\n\n\t\tconst userLocal = this.localUserConfiguration.getRestrictedSettings().sort((a, b) => a.localeCompare(b));\n\t\tconst userLocalDelta = delta(userLocal, this._restrictedSettings.userLocal || [], (a, b) => a.localeCompare(b));\n\t\tchanged.push(...userLocalDelta.added, ...userLocalDelta.removed);\n\n\t\tconst userRemote = (this.remoteUserConfiguration?.getRestrictedSettings() || []).sort((a, b) => a.localeCompare(b));\n\t\tconst userRemoteDelta = delta(userRemote, this._restrictedSettings.userRemote || [], (a, b) => a.localeCompare(b));\n\t\tchanged.push(...userRemoteDelta.added, ...userRemoteDelta.removed);\n\n\t\tconst workspaceFolderMap = new ResourceMap<ReadonlyArray<string>>();\n\t\tfor (const workspaceFolder of this.workspace.folders) {\n\t\t\tconst cachedFolderConfig = this.cachedFolderConfigs.get(workspaceFolder.uri);\n\t\t\tconst folderRestrictedSettings = (cachedFolderConfig?.getRestrictedSettings() || []).sort((a, b) => a.localeCompare(b));\n\t\t\tif (folderRestrictedSettings.length) {\n\t\t\t\tworkspaceFolderMap.set(workspaceFolder.uri, folderRestrictedSettings);\n\t\t\t}\n\t\t\tconst previous = this._restrictedSettings.workspaceFolder?.get(workspaceFolder.uri) || [];\n\t\t\tconst workspaceFolderDelta = delta(folderRestrictedSettings, previous, (a, b) => a.localeCompare(b));\n\t\t\tchanged.push(...workspaceFolderDelta.added, ...workspaceFolderDelta.removed);\n\t\t}\n\n\t\tconst workspace = this.getWorkbenchState() === WorkbenchState.WORKSPACE ? this.workspaceConfiguration.getRestrictedSettings().sort((a, b) => a.localeCompare(b))\n\t\t\t: this.workspace.folders[0] ? (workspaceFolderMap.get(this.workspace.folders[0].uri) || []) : [];\n\t\tconst workspaceDelta = delta(workspace, this._restrictedSettings.workspace || [], (a, b) => a.localeCompare(b));\n\t\tchanged.push(...workspaceDelta.added, ...workspaceDelta.removed);\n\n\t\tif (changed.length) {\n\t\t\tthis._restrictedSettings = {\n\t\t\t\tdefault: defaultRestrictedSettings,\n\t\t\t\tapplication: application.length ? application : undefined,\n\t\t\t\tuserLocal: userLocal.length ? userLocal : undefined,\n\t\t\t\tuserRemote: userRemote.length ? userRemote : undefined,\n\t\t\t\tworkspace: workspace.length ? workspace : undefined,\n\t\t\t\tworkspaceFolder: workspaceFolderMap.size ? workspaceFolderMap : undefined,\n\t\t\t};\n\t\t\tthis._onDidChangeRestrictedSettings.fire(this.restrictedSettings);\n\t\t}\n\t}\n\n\tprivate async updateWorkspaceConfiguration(workspaceFolders: WorkspaceFolder[], configuration: ConfigurationModel, fromCache: boolean): Promise<void> {\n\t\tconst previous = { data: this._configuration.toData(), workspace: this.workspace };\n\t\tconst change = this._configuration.compareAndUpdateWorkspaceConfiguration(configuration);\n\t\tconst changes = this.compareFolders(this.workspace.folders, workspaceFolders);\n\t\tif (changes.added.length || changes.removed.length || changes.changed.length) {\n\t\t\tthis.workspace.folders = workspaceFolders;\n\t\t\tconst change = await this.onFoldersChanged();\n\t\t\tawait this.handleWillChangeWorkspaceFolders(changes, fromCache);\n\t\t\tthis.triggerConfigurationChange(change, previous, ConfigurationTarget.WORKSPACE_FOLDER);\n\t\t\tthis._onDidChangeWorkspaceFolders.fire(changes);\n\t\t} else {\n\t\t\tthis.triggerConfigurationChange(change, previous, ConfigurationTarget.WORKSPACE);\n\t\t}\n\t\tthis.updateRestrictedSettings();\n\t}\n\n\tprivate async handleWillChangeWorkspaceFolders(changes: IWorkspaceFoldersChangeEvent, fromCache: boolean): Promise<void> {\n\t\tconst joiners: Promise<void>[] = [];\n\t\tthis._onWillChangeWorkspaceFolders.fire({\n\t\t\tjoin(updateWorkspaceTrustStatePromise) {\n\t\t\t\tjoiners.push(updateWorkspaceTrustStatePromise);\n\t\t\t},\n\t\t\tchanges,\n\t\t\tfromCache\n\t\t});\n\t\ttry { await Promises.settled(joiners); } catch (error) { /* Ignore */ }\n\t}\n\n\tprivate async onWorkspaceFolderConfigurationChanged(folder: IWorkspaceFolder): Promise<void> {\n\t\tconst [folderConfiguration] = await this.loadFolderConfigurations([folder]);\n\t\tconst previous = { data: this._configuration.toData(), workspace: this.workspace };\n\t\tconst folderConfigurationChange = this._configuration.compareAndUpdateFolderConfiguration(folder.uri, folderConfiguration);\n\t\tif (this.getWorkbenchState() === WorkbenchState.FOLDER) {\n\t\t\tconst workspaceConfigurationChange = this._configuration.compareAndUpdateWorkspaceConfiguration(folderConfiguration);\n\t\t\tthis.triggerConfigurationChange(mergeChanges(folderConfigurationChange, workspaceConfigurationChange), previous, ConfigurationTarget.WORKSPACE);\n\t\t} else {\n\t\t\tthis.triggerConfigurationChange(folderConfigurationChange, previous, ConfigurationTarget.WORKSPACE_FOLDER);\n\t\t}\n\t\tthis.updateRestrictedSettings();\n\t}\n\n\tprivate async onFoldersChanged(): Promise<IConfigurationChange> {\n\t\tconst changes: IConfigurationChange[] = [];\n\n\t\t// Remove the configurations of deleted folders\n\t\tfor (const key of this.cachedFolderConfigs.keys()) {\n\t\t\tif (!this.workspace.folders.filter(folder => folder.uri.toString() === key.toString())[0]) {\n\t\t\t\tconst folderConfiguration = this.cachedFolderConfigs.get(key);\n\t\t\t\tfolderConfiguration!.dispose();\n\t\t\t\tthis.cachedFolderConfigs.delete(key);\n\t\t\t\tchanges.push(this._configuration.compareAndDeleteFolderConfiguration(key));\n\t\t\t}\n\t\t}\n\n\t\tconst toInitialize = this.workspace.folders.filter(folder => !this.cachedFolderConfigs.has(folder.uri));\n\t\tif (toInitialize.length) {\n\t\t\tconst folderConfigurations = await this.loadFolderConfigurations(toInitialize);\n\t\t\tfolderConfigurations.forEach((folderConfiguration, index) => {\n\t\t\t\tchanges.push(this._configuration.compareAndUpdateFolderConfiguration(toInitialize[index].uri, folderConfiguration));\n\t\t\t});\n\t\t}\n\t\treturn mergeChanges(...changes);\n\t}\n\n\tprivate loadFolderConfigurations(folders: IWorkspaceFolder[]): Promise<ConfigurationModel[]> {\n\t\treturn Promise.all([...folders.map(folder => {\n\t\t\tlet folderConfiguration = this.cachedFolderConfigs.get(folder.uri);\n\t\t\tif (!folderConfiguration) {\n\t\t\t\tfolderConfiguration = new FolderConfiguration(!this.initialized, folder, FOLDER_CONFIG_FOLDER_NAME, this.getWorkbenchState(), this.isWorkspaceTrusted, this.fileService, this.uriIdentityService, this.logService, this.configurationCache);\n\t\t\t\tthis._register(folderConfiguration.onDidChange(() => this.onWorkspaceFolderConfigurationChanged(folder)));\n\t\t\t\tthis.cachedFolderConfigs.set(folder.uri, this._register(folderConfiguration));\n\t\t\t}\n\t\t\treturn folderConfiguration.loadConfiguration();\n\t\t})]);\n\t}\n\n\tprivate async validateWorkspaceFoldersAndReload(fromCache: boolean): Promise<void> {\n\t\tconst validWorkspaceFolders = await this.toValidWorkspaceFolders(this.workspace.folders);\n\t\tconst { removed } = this.compareFolders(this.workspace.folders, validWorkspaceFolders);\n\t\tif (removed.length) {\n\t\t\tawait this.updateWorkspaceConfiguration(validWorkspaceFolders, this.workspaceConfiguration.getConfiguration(), fromCache);\n\t\t}\n\t}\n\n\t// Filter out workspace folders which are files (not directories)\n\t// Workspace folders those cannot be resolved are not filtered because they are handled by the Explorer.\n\tprivate async toValidWorkspaceFolders(workspaceFolders: WorkspaceFolder[]): Promise<WorkspaceFolder[]> {\n\t\tconst validWorkspaceFolders: WorkspaceFolder[] = [];\n\t\tfor (const workspaceFolder of workspaceFolders) {\n\t\t\ttry {\n\t\t\t\tconst result = await this.fileService.stat(workspaceFolder.uri);\n\t\t\t\tif (!result.isDirectory) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\tthis.logService.warn(`Ignoring the error while validating workspace folder ${workspaceFolder.uri.toString()} - ${toErrorMessage(e)}`);\n\t\t\t}\n\t\t\tvalidWorkspaceFolders.push(workspaceFolder);\n\t\t}\n\t\treturn validWorkspaceFolders;\n\t}\n\n\tprivate async writeConfigurationValue(key: string, value: any, target: ConfigurationTarget, overrides: IConfigurationUpdateOverrides | undefined, options?: IConfigurationUpdateOverrides): Promise<void> {\n\t\tif (!this.instantiationService) {\n\t\t\tthrow new Error('Cannot write configuration because the configuration service is not yet ready to accept writes.');\n\t\t}\n\n\t\tif (target === ConfigurationTarget.DEFAULT) {\n\t\t\tthrow new Error('Invalid configuration target');\n\t\t}\n\n\t\tif (target === ConfigurationTarget.MEMORY) {\n\t\t\tconst previous = { data: this._configuration.toData(), workspace: this.workspace };\n\t\t\tthis._configuration.updateValue(key, value, overrides);\n\t\t\tthis.triggerConfigurationChange({ keys: overrides?.overrideIdentifiers?.length ? [keyFromOverrideIdentifiers(overrides.overrideIdentifiers), key] : [key], overrides: overrides?.overrideIdentifiers?.length ? overrides.overrideIdentifiers.map(overrideIdentifier => ([overrideIdentifier, [key]])) : [] }, previous, target);\n\t\t\treturn;\n\t\t}\n\n\t\tconst editableConfigurationTarget = this.toEditableConfigurationTarget(target, key);\n\t\tif (!editableConfigurationTarget) {\n\t\t\tthrow new Error('Invalid configuration target');\n\t\t}\n\n\t\tif (editableConfigurationTarget === EditableConfigurationTarget.USER_REMOTE && !this.remoteUserConfiguration) {\n\t\t\tthrow new Error('Invalid configuration target');\n\t\t}\n\n\t\tif (overrides?.overrideIdentifiers?.length && overrides.overrideIdentifiers.length > 1) {\n\t\t\tconst configurationModel = this.getConfigurationModelForEditableConfigurationTarget(editableConfigurationTarget, overrides.resource);\n\t\t\tif (configurationModel) {\n\t\t\t\tconst overrideIdentifiers = overrides.overrideIdentifiers.sort();\n\t\t\t\tconst existingOverrides = configurationModel.overrides.find(override => arrayEquals([...override.identifiers].sort(), overrideIdentifiers));\n\t\t\t\tif (existingOverrides) {\n\t\t\t\t\toverrides.overrideIdentifiers = existingOverrides.identifiers;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Use same instance of ConfigurationEditing to make sure all writes go through the same queue\n\t\tthis.configurationEditing = this.configurationEditing ?? this.createConfigurationEditingService(this.instantiationService);\n\t\tawait (await this.configurationEditing).writeConfiguration(editableConfigurationTarget, { key, value }, { scopes: overrides, ...options });\n\t\tswitch (editableConfigurationTarget) {\n\t\t\tcase EditableConfigurationTarget.USER_LOCAL:\n\t\t\t\tif (this.applicationConfiguration && this.isSettingAppliedForAllProfiles(key)) {\n\t\t\t\t\tawait this.reloadApplicationConfiguration();\n\t\t\t\t} else {\n\t\t\t\t\tawait this.reloadLocalUserConfiguration();\n\t\t\t\t}\n\t\t\t\treturn;\n\t\t\tcase EditableConfigurationTarget.USER_REMOTE:\n\t\t\t\treturn this.reloadRemoteUserConfiguration().then(() => undefined);\n\t\t\tcase EditableConfigurationTarget.WORKSPACE:\n\t\t\t\treturn this.reloadWorkspaceConfiguration();\n\t\t\tcase EditableConfigurationTarget.WORKSPACE_FOLDER: {\n\t\t\t\tconst workspaceFolder = overrides && overrides.resource ? this.workspace.getFolder(overrides.resource) : null;\n\t\t\t\tif (workspaceFolder) {\n\t\t\t\t\treturn this.reloadWorkspaceFolderConfiguration(workspaceFolder);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate async createConfigurationEditingService(instantiationService: IInstantiationService): Promise<ConfigurationEditing> {\n\t\tconst remoteSettingsResource = (await this.remoteAgentService.getEnvironment())?.settingsPath ?? null;\n\t\treturn instantiationService.createInstance(ConfigurationEditing, remoteSettingsResource);\n\t}\n\n\tprivate getConfigurationModelForEditableConfigurationTarget(target: EditableConfigurationTarget, resource?: URI | null): ConfigurationModel | undefined {\n\t\tswitch (target) {\n\t\t\tcase EditableConfigurationTarget.USER_LOCAL: return this._configuration.localUserConfiguration;\n\t\t\tcase EditableConfigurationTarget.USER_REMOTE: return this._configuration.remoteUserConfiguration;\n\t\t\tcase EditableConfigurationTarget.WORKSPACE: return this._configuration.workspaceConfiguration;\n\t\t\tcase EditableConfigurationTarget.WORKSPACE_FOLDER: return resource ? this._configuration.folderConfigurations.get(resource) : undefined;\n\t\t}\n\t}\n\n\tgetConfigurationModel(target: ConfigurationTarget, resource?: URI | null): ConfigurationModel | undefined {\n\t\tswitch (target) {\n\t\t\tcase ConfigurationTarget.USER_LOCAL: return this._configuration.localUserConfiguration;\n\t\t\tcase ConfigurationTarget.USER_REMOTE: return this._configuration.remoteUserConfiguration;\n\t\t\tcase ConfigurationTarget.WORKSPACE: return this._configuration.workspaceConfiguration;\n\t\t\tcase ConfigurationTarget.WORKSPACE_FOLDER: return resource ? this._configuration.folderConfigurations.get(resource) : undefined;\n\t\t\tdefault: return undefined;\n\t\t}\n\t}\n\n\tprivate deriveConfigurationTargets(key: string, value: any, inspect: IConfigurationValue<any>): ConfigurationTarget[] {\n\t\tif (equals(value, inspect.value)) {\n\t\t\treturn [];\n\t\t}\n\n\t\tconst definedTargets: ConfigurationTarget[] = [];\n\t\tif (inspect.workspaceFolderValue !== undefined) {\n\t\t\tdefinedTargets.push(ConfigurationTarget.WORKSPACE_FOLDER);\n\t\t}\n\t\tif (inspect.workspaceValue !== undefined) {\n\t\t\tdefinedTargets.push(ConfigurationTarget.WORKSPACE);\n\t\t}\n\t\tif (inspect.userRemoteValue !== undefined) {\n\t\t\tdefinedTargets.push(ConfigurationTarget.USER_REMOTE);\n\t\t}\n\t\tif (inspect.userLocalValue !== undefined) {\n\t\t\tdefinedTargets.push(ConfigurationTarget.USER_LOCAL);\n\t\t}\n\t\tif (inspect.applicationValue !== undefined) {\n\t\t\tdefinedTargets.push(ConfigurationTarget.APPLICATION);\n\t\t}\n\n\t\tif (value === undefined) {\n\t\t\t// Remove the setting in all defined targets\n\t\t\treturn definedTargets;\n\t\t}\n\n\t\treturn [definedTargets[0] || ConfigurationTarget.USER];\n\t}\n\n\tprivate triggerConfigurationChange(change: IConfigurationChange, previous: { data: IConfigurationData; workspace?: Workspace } | undefined, target: ConfigurationTarget): void {\n\t\tif (change.keys.length) {\n\t\t\tif (target !== ConfigurationTarget.DEFAULT) {\n\t\t\t\tthis.logService.debug(`Configuration keys changed in ${ConfigurationTargetToString(target)} target`, ...change.keys);\n\t\t\t}\n\t\t\tconst configurationChangeEvent = new ConfigurationChangeEvent(change, previous, this._configuration, this.workspace, this.logService);\n\t\t\tconfigurationChangeEvent.source = target;\n\t\t\tthis._onDidChangeConfiguration.fire(configurationChangeEvent);\n\t\t}\n\t}\n\n\tprivate toEditableConfigurationTarget(target: ConfigurationTarget, key: string): EditableConfigurationTarget | null {\n\t\tif (target === ConfigurationTarget.APPLICATION) {\n\t\t\treturn EditableConfigurationTarget.USER_LOCAL;\n\t\t}\n\t\tif (target === ConfigurationTarget.USER) {\n\t\t\tif (this.remoteUserConfiguration) {\n\t\t\t\tconst scope = this.configurationRegistry.getConfigurationProperties()[key]?.scope;\n\t\t\t\tif (scope === ConfigurationScope.MACHINE || scope === ConfigurationScope.MACHINE_OVERRIDABLE) {\n\t\t\t\t\treturn EditableConfigurationTarget.USER_REMOTE;\n\t\t\t\t}\n\t\t\t\tif (this.inspect(key).userRemoteValue !== undefined) {\n\t\t\t\t\treturn EditableConfigurationTarget.USER_REMOTE;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn EditableConfigurationTarget.USER_LOCAL;\n\t\t}\n\t\tif (target === ConfigurationTarget.USER_LOCAL) {\n\t\t\treturn EditableConfigurationTarget.USER_LOCAL;\n\t\t}\n\t\tif (target === ConfigurationTarget.USER_REMOTE) {\n\t\t\treturn EditableConfigurationTarget.USER_REMOTE;\n\t\t}\n\t\tif (target === ConfigurationTarget.WORKSPACE) {\n\t\t\treturn EditableConfigurationTarget.WORKSPACE;\n\t\t}\n\t\tif (target === ConfigurationTarget.WORKSPACE_FOLDER) {\n\t\t\treturn EditableConfigurationTarget.WORKSPACE_FOLDER;\n\t\t}\n\t\treturn null;\n\t}\n}\n\nclass RegisterConfigurationSchemasContribution extends Disposable implements IWorkbenchContribution {\n\tconstructor(\n\t\t@IWorkspaceContextService private readonly workspaceContextService: IWorkspaceContextService,\n\t\t@IWorkbenchEnvironmentService private readonly environmentService: IWorkbenchEnvironmentService,\n\t\t@IWorkspaceTrustManagementService private readonly workspaceTrustManagementService: IWorkspaceTrustManagementService,\n\t\t@IExtensionService extensionService: IExtensionService,\n\t\t@ILifecycleService lifecycleService: ILifecycleService,\n\t) {\n\t\tsuper();\n\n\t\textensionService.whenInstalledExtensionsRegistered().then(() => {\n\t\t\tthis.registerConfigurationSchemas();\n\n\t\t\tconst configurationRegistry = Registry.as<IConfigurationRegistry>(Extensions.Configuration);\n\t\t\tconst delayer = this._register(new Delayer<void>(50));\n\t\t\tthis._register(Event.any(configurationRegistry.onDidUpdateConfiguration, configurationRegistry.onDidSchemaChange, workspaceTrustManagementService.onDidChangeTrust)(() =>\n\t\t\t\tdelayer.trigger(() => this.registerConfigurationSchemas(), lifecycleService.phase === LifecyclePhase.Eventually ? undefined : 2500 /* delay longer in early phases */)));\n\t\t});\n\t}\n\n\tprivate registerConfigurationSchemas(): void {\n\t\tconst allSettingsSchema: IJSONSchema = {\n\t\t\tproperties: allSettings.properties,\n\t\t\tpatternProperties: allSettings.patternProperties,\n\t\t\tadditionalProperties: true,\n\t\t\tallowTrailingCommas: true,\n\t\t\tallowComments: true\n\t\t};\n\n\t\tconst userSettingsSchema: IJSONSchema = this.environmentService.remoteAuthority ?\n\t\t\t{\n\t\t\t\tproperties: Object.assign({},\n\t\t\t\t\tapplicationSettings.properties,\n\t\t\t\t\twindowSettings.properties,\n\t\t\t\t\tresourceSettings.properties\n\t\t\t\t),\n\t\t\t\tpatternProperties: allSettings.patternProperties,\n\t\t\t\tadditionalProperties: true,\n\t\t\t\tallowTrailingCommas: true,\n\t\t\t\tallowComments: true\n\t\t\t}\n\t\t\t: allSettingsSchema;\n\n\t\tconst profileSettingsSchema: IJSONSchema = {\n\t\t\tproperties: Object.assign({},\n\t\t\t\tmachineSettings.properties,\n\t\t\t\tmachineOverridableSettings.properties,\n\t\t\t\twindowSettings.properties,\n\t\t\t\tresourceSettings.properties\n\t\t\t),\n\t\t\tpatternProperties: allSettings.patternProperties,\n\t\t\tadditionalProperties: true,\n\t\t\tallowTrailingCommas: true,\n\t\t\tallowComments: true\n\t\t};\n\n\t\tconst machineSettingsSchema: IJSONSchema = {\n\t\t\tproperties: Object.assign({},\n\t\t\t\tmachineSettings.properties,\n\t\t\t\tmachineOverridableSettings.properties,\n\t\t\t\twindowSettings.properties,\n\t\t\t\tresourceSettings.properties\n\t\t\t),\n\t\t\tpatternProperties: allSettings.patternProperties,\n\t\t\tadditionalProperties: true,\n\t\t\tallowTrailingCommas: true,\n\t\t\tallowComments: true\n\t\t};\n\n\t\tconst workspaceSettingsSchema: IJSONSchema = {\n\t\t\tproperties: Object.assign({},\n\t\t\t\tthis.checkAndFilterPropertiesRequiringTrust(machineOverridableSettings.properties),\n\t\t\t\tthis.checkAndFilterPropertiesRequiringTrust(windowSettings.properties),\n\t\t\t\tthis.checkAndFilterPropertiesRequiringTrust(resourceSettings.properties)\n\t\t\t),\n\t\t\tpatternProperties: allSettings.patternProperties,\n\t\t\tadditionalProperties: true,\n\t\t\tallowTrailingCommas: true,\n\t\t\tallowComments: true\n\t\t};\n\n\t\tconst defaultSettingsSchema = {\n\t\t\tproperties: Object.keys(allSettings.properties).reduce<IJSONSchemaMap>((result, key) => {\n\t\t\t\tresult[key] = Object.assign({ deprecationMessage: undefined }, allSettings.properties[key]);\n\t\t\t\treturn result;\n\t\t\t}, {}),\n\t\t\tpatternProperties: Object.keys(allSettings.patternProperties).reduce<IJSONSchemaMap>((result, key) => {\n\t\t\t\tresult[key] = Object.assign({ deprecationMessage: undefined }, allSettings.patternProperties[key]);\n\t\t\t\treturn result;\n\t\t\t}, {}),\n\t\t\tadditionalProperties: true,\n\t\t\tallowTrailingCommas: true,\n\t\t\tallowComments: true\n\t\t};\n\n\t\tconst folderSettingsSchema: IJSONSchema = WorkbenchState.WORKSPACE === this.workspaceContextService.getWorkbenchState() ?\n\t\t\t{\n\t\t\t\tproperties: Object.assign({},\n\t\t\t\t\tthis.checkAndFilterPropertiesRequiringTrust(machineOverridableSettings.properties),\n\t\t\t\t\tthis.checkAndFilterPropertiesRequiringTrust(resourceSettings.properties)\n\t\t\t\t),\n\t\t\t\tpatternProperties: allSettings.patternProperties,\n\t\t\t\tadditionalProperties: true,\n\t\t\t\tallowTrailingCommas: true,\n\t\t\t\tallowComments: true\n\t\t\t} : workspaceSettingsSchema;\n\n\t\tconst configDefaultsSchema: IJSONSchema = {\n\t\t\ttype: 'object',\n\t\t\tdescription: localize('configurationDefaults.description', 'Contribute defaults for configurations'),\n\t\t\tproperties: Object.assign({},\n\t\t\t\tthis.filterDefaultOverridableProperties(machineOverridableSettings.properties),\n\t\t\t\tthis.filterDefaultOverridableProperties(windowSettings.properties),\n\t\t\t\tthis.filterDefaultOverridableProperties(resourceSettings.properties)\n\t\t\t),\n\t\t\tpatternProperties: {\n\t\t\t\t[OVERRIDE_PROPERTY_PATTERN]: {\n\t\t\t\t\ttype: 'object',\n\t\t\t\t\tdefault: {},\n\t\t\t\t\t$ref: resourceLanguageSettingsSchemaId,\n\t\t\t\t}\n\t\t\t},\n\t\t\tadditionalProperties: false\n\t\t};\n\t\tthis.registerSchemas({\n\t\t\tdefaultSettingsSchema,\n\t\t\tuserSettingsSchema,\n\t\t\tprofileSettingsSchema,\n\t\t\tmachineSettingsSchema,\n\t\t\tworkspaceSettingsSchema,\n\t\t\tfolderSettingsSchema,\n\t\t\tconfigDefaultsSchema,\n\t\t});\n\t}\n\n\tprivate registerSchemas(schemas: {\n\t\tdefaultSettingsSchema: IJSONSchema;\n\t\tuserSettingsSchema: IJSONSchema;\n\t\tprofileSettingsSchema: IJSONSchema;\n\t\tmachineSettingsSchema: IJSONSchema;\n\t\tworkspaceSettingsSchema: IJSONSchema;\n\t\tfolderSettingsSchema: IJSONSchema;\n\t\tconfigDefaultsSchema: IJSONSchema;\n\t}): void {\n\t\tconst jsonRegistry = Registry.as<IJSONContributionRegistry>(JSONExtensions.JSONContribution);\n\t\tjsonRegistry.registerSchema(defaultSettingsSchemaId, schemas.defaultSettingsSchema);\n\t\tjsonRegistry.registerSchema(userSettingsSchemaId, schemas.userSettingsSchema);\n\t\tjsonRegistry.registerSchema(profileSettingsSchemaId, schemas.profileSettingsSchema);\n\t\tjsonRegistry.registerSchema(machineSettingsSchemaId, schemas.machineSettingsSchema);\n\t\tjsonRegistry.registerSchema(workspaceSettingsSchemaId, schemas.workspaceSettingsSchema);\n\t\tjsonRegistry.registerSchema(folderSettingsSchemaId, schemas.folderSettingsSchema);\n\t\tjsonRegistry.registerSchema(configurationDefaultsSchemaId, schemas.configDefaultsSchema);\n\t}\n\n\tprivate checkAndFilterPropertiesRequiringTrust(properties: IStringDictionary<IConfigurationPropertySchema>): IStringDictionary<IConfigurationPropertySchema> {\n\t\tif (this.workspaceTrustManagementService.isWorkspaceTrusted()) {\n\t\t\treturn properties;\n\t\t}\n\n\t\tconst result: IStringDictionary<IConfigurationPropertySchema> = {};\n\t\tObject.entries(properties).forEach(([key, value]) => {\n\t\t\tif (!value.restricted) {\n\t\t\t\tresult[key] = value;\n\t\t\t}\n\t\t});\n\t\treturn result;\n\t}\n\n\tprivate filterDefaultOverridableProperties(properties: IStringDictionary<IConfigurationPropertySchema>): IStringDictionary<IConfigurationPropertySchema> {\n\t\tconst result: IStringDictionary<IConfigurationPropertySchema> = {};\n\t\tObject.entries(properties).forEach(([key, value]) => {\n\t\t\tif (!value.disallowConfigurationDefault) {\n\t\t\t\tresult[key] = value;\n\t\t\t}\n\t\t});\n\t\treturn result;\n\t}\n}\n\nclass ResetConfigurationDefaultsOverridesCache extends Disposable implements IWorkbenchContribution {\n\tconstructor(\n\t\t@IConfigurationService configurationService: WorkspaceService,\n\t\t@IExtensionService extensionService: IExtensionService,\n\t) {\n\t\tsuper();\n\t\tif (configurationService.hasCachedConfigurationDefaultsOverrides()) {\n\t\t\textensionService.whenInstalledExtensionsRegistered().then(() => configurationService.reloadConfiguration(ConfigurationTarget.DEFAULT));\n\t\t}\n\t}\n}\n\nclass UpdateExperimentalSettingsDefaults extends Disposable implements IWorkbenchContribution {\n\n\tstatic readonly ID = 'workbench.contrib.updateExperimentalSettingsDefaults';\n\n\tprivate readonly processedExperimentalSettings = new Set<string>();\n\tprivate readonly configurationRegistry = Registry.as<IConfigurationRegistry>(Extensions.Configuration);\n\n\tconstructor(\n\t\t@IWorkbenchAssignmentService private readonly workbenchAssignmentService: IWorkbenchAssignmentService\n\t) {\n\t\tsuper();\n\t\tthis.processExperimentalSettings(Object.keys(this.configurationRegistry.getConfigurationProperties()));\n\t\tthis._register(this.configurationRegistry.onDidUpdateConfiguration(({ properties }) => this.processExperimentalSettings(properties)));\n\t}\n\n\tprivate async processExperimentalSettings(properties: Iterable<string>): Promise<void> {\n\t\tconst overrides: IStringDictionary<any> = {};\n\t\tconst allProperties = this.configurationRegistry.getConfigurationProperties();\n\t\tfor (const property of properties) {\n\t\t\tconst schema = allProperties[property];\n\t\t\tif (!schema?.tags?.includes('experimental')) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (this.processedExperimentalSettings.has(property)) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tthis.processedExperimentalSettings.add(property);\n\t\t\ttry {\n\t\t\t\tconst value = await this.workbenchAssignmentService.getTreatment(`config.${property}`);\n\t\t\t\tif (!isUndefined(value) && !equals(value, schema.default)) {\n\t\t\t\t\toverrides[property] = value;\n\t\t\t\t}\n\t\t\t} catch (error) {/*ignore */ }\n\t\t}\n\t\tif (Object.keys(overrides).length) {\n\t\t\tthis.configurationRegistry.registerDefaultConfigurations([{ overrides }]);\n\t\t}\n\t}\n}\n\nconst workbenchContributionsRegistry = Registry.as<IWorkbenchContributionsRegistry>(WorkbenchExtensions.Workbench);\nworkbenchContributionsRegistry.registerWorkbenchContribution(RegisterConfigurationSchemasContribution, LifecyclePhase.Restored);\nworkbenchContributionsRegistry.registerWorkbenchContribution(ResetConfigurationDefaultsOverridesCache, LifecyclePhase.Eventually);\nregisterWorkbenchContribution2(UpdateExperimentalSettingsDefaults.ID, UpdateExperimentalSettingsDefaults, WorkbenchPhase.BlockRestore);\n\nconst configurationRegistry = Registry.as<IConfigurationRegistry>(Extensions.Configuration);\nconfigurationRegistry.registerConfiguration({\n\t...workbenchConfigurationNodeBase,\n\tproperties: {\n\t\t[APPLY_ALL_PROFILES_SETTING]: {\n\t\t\t'type': 'array',\n\t\t\tdescription: localize('setting description', \"Configure settings to be applied for all profiles.\"),\n\t\t\t'default': [],\n\t\t\t'scope': ConfigurationScope.APPLICATION,\n\t\t\tadditionalProperties: true,\n\t\t\tuniqueItems: true,\n\t\t}\n\t}\n});\n"],
  "mappings": "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",
  "names": ["remoteUserConfigurationModel", "index", "target", "change", "configurationRegistry"]
}
