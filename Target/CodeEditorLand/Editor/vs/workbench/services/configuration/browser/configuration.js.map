{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/configuration/browser/configuration.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { RunOnceScheduler } from \"../../../../base/common/async.js\";\nimport type { IStringDictionary } from \"../../../../base/common/collections.js\";\nimport * as errors from \"../../../../base/common/errors.js\";\nimport { Emitter, Event } from \"../../../../base/common/event.js\";\nimport { hash } from \"../../../../base/common/hash.js\";\nimport {\n\tDisposable,\n\tDisposableStore,\n\ttype IDisposable,\n\tMutableDisposable,\n\tcombinedDisposable,\n\tdispose,\n\ttoDisposable,\n} from \"../../../../base/common/lifecycle.js\";\nimport { equals } from \"../../../../base/common/objects.js\";\nimport { joinPath } from \"../../../../base/common/resources.js\";\nimport { isEmptyObject, isObject } from \"../../../../base/common/types.js\";\nimport type { URI } from \"../../../../base/common/uri.js\";\nimport {\n\tConfigurationModel,\n\tConfigurationModelParser,\n\ttype ConfigurationParseOptions,\n\tUserSettings,\n} from \"../../../../platform/configuration/common/configurationModels.js\";\nimport {\n\tConfigurationScope,\n\tExtensions,\n\ttype IConfigurationRegistry,\n\tOVERRIDE_PROPERTY_REGEX,\n} from \"../../../../platform/configuration/common/configurationRegistry.js\";\nimport { DefaultConfiguration as BaseDefaultConfiguration } from \"../../../../platform/configuration/common/configurations.js\";\nimport {\n\tFileChangeType,\n\ttype FileChangesEvent,\n\tFileOperation,\n\ttype FileOperationError,\n\ttype FileOperationEvent,\n\tFileOperationResult,\n\ttype IFileService,\n\twhenProviderRegistered,\n} from \"../../../../platform/files/common/files.js\";\nimport type { ILogService } from \"../../../../platform/log/common/log.js\";\nimport { Registry } from \"../../../../platform/registry/common/platform.js\";\nimport type { IUriIdentityService } from \"../../../../platform/uriIdentity/common/uriIdentity.js\";\nimport type { IUserDataProfilesService } from \"../../../../platform/userDataProfile/common/userDataProfile.js\";\nimport {\n\ttype IWorkspaceFolder,\n\ttype IWorkspaceIdentifier,\n\tWorkbenchState,\n} from \"../../../../platform/workspace/common/workspace.js\";\nimport type { IStoredWorkspaceFolder } from \"../../../../platform/workspaces/common/workspaces.js\";\nimport type { IBrowserWorkbenchEnvironmentService } from \"../../environment/browser/environmentService.js\";\nimport type { IRemoteAgentService } from \"../../remote/common/remoteAgentService.js\";\nimport {\n\tAPPLY_ALL_PROFILES_SETTING,\n\ttype ConfigurationKey,\n\tFOLDER_SCOPES,\n\tFOLDER_SETTINGS_NAME,\n\ttype IConfigurationCache,\n\tLAUNCH_CONFIGURATION_KEY,\n\tREMOTE_MACHINE_SCOPES,\n\tTASKS_CONFIGURATION_KEY,\n\tWORKSPACE_SCOPES,\n} from \"../common/configuration.js\";\nimport {\n\tStandaloneConfigurationModelParser,\n\tWorkspaceConfigurationModelParser,\n} from \"../common/configurationModels.js\";\nimport type { IJSONEditingService } from \"../common/jsonEditing.js\";\n\nexport class DefaultConfiguration extends BaseDefaultConfiguration {\n\tstatic readonly DEFAULT_OVERRIDES_CACHE_EXISTS_KEY =\n\t\t\"DefaultOverridesCacheExists\";\n\n\tprivate readonly configurationRegistry =\n\t\tRegistry.as<IConfigurationRegistry>(Extensions.Configuration);\n\tprivate cachedConfigurationDefaultsOverrides: IStringDictionary<any> = {};\n\tprivate readonly cacheKey: ConfigurationKey = {\n\t\ttype: \"defaults\",\n\t\tkey: \"configurationDefaultsOverrides\",\n\t};\n\n\tprivate updateCache = false;\n\n\tconstructor(\n\t\tprivate readonly configurationCache: IConfigurationCache,\n\t\tenvironmentService: IBrowserWorkbenchEnvironmentService,\n\t\tlogService: ILogService,\n\t) {\n\t\tsuper(logService);\n\t\tif (environmentService.options?.configurationDefaults) {\n\t\t\tthis.configurationRegistry.registerDefaultConfigurations([\n\t\t\t\t{ overrides: environmentService.options.configurationDefaults },\n\t\t\t]);\n\t\t}\n\t}\n\n\tprotected override getConfigurationDefaultOverrides(): IStringDictionary<any> {\n\t\treturn this.cachedConfigurationDefaultsOverrides;\n\t}\n\n\toverride async initialize(): Promise<ConfigurationModel> {\n\t\tawait this.initializeCachedConfigurationDefaultsOverrides();\n\t\treturn super.initialize();\n\t}\n\n\toverride reload(): ConfigurationModel {\n\t\tthis.updateCache = true;\n\t\tthis.cachedConfigurationDefaultsOverrides = {};\n\t\tthis.updateCachedConfigurationDefaultsOverrides();\n\t\treturn super.reload();\n\t}\n\n\thasCachedConfigurationDefaultsOverrides(): boolean {\n\t\treturn !isEmptyObject(this.cachedConfigurationDefaultsOverrides);\n\t}\n\n\tprivate initiaizeCachedConfigurationDefaultsOverridesPromise:\n\t\t| Promise<void>\n\t\t| undefined;\n\tprivate initializeCachedConfigurationDefaultsOverrides(): Promise<void> {\n\t\tif (!this.initiaizeCachedConfigurationDefaultsOverridesPromise) {\n\t\t\tthis.initiaizeCachedConfigurationDefaultsOverridesPromise =\n\t\t\t\t(async () => {\n\t\t\t\t\ttry {\n\t\t\t\t\t\t// Read only when the cache exists\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\tlocalStorage.getItem(\n\t\t\t\t\t\t\t\tDefaultConfiguration.DEFAULT_OVERRIDES_CACHE_EXISTS_KEY,\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\tconst content = await this.configurationCache.read(\n\t\t\t\t\t\t\t\tthis.cacheKey,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tif (content) {\n\t\t\t\t\t\t\t\tthis.cachedConfigurationDefaultsOverrides =\n\t\t\t\t\t\t\t\t\tJSON.parse(content);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t} catch (error) {\n\t\t\t\t\t\t/* ignore */\n\t\t\t\t\t}\n\t\t\t\t\tthis.cachedConfigurationDefaultsOverrides = isObject(\n\t\t\t\t\t\tthis.cachedConfigurationDefaultsOverrides,\n\t\t\t\t\t)\n\t\t\t\t\t\t? this.cachedConfigurationDefaultsOverrides\n\t\t\t\t\t\t: {};\n\t\t\t\t})();\n\t\t}\n\t\treturn this.initiaizeCachedConfigurationDefaultsOverridesPromise;\n\t}\n\n\tprotected override onDidUpdateConfiguration(\n\t\tproperties: string[],\n\t\tdefaultsOverrides?: boolean,\n\t): void {\n\t\tsuper.onDidUpdateConfiguration(properties, defaultsOverrides);\n\t\tif (defaultsOverrides) {\n\t\t\tthis.updateCachedConfigurationDefaultsOverrides();\n\t\t}\n\t}\n\n\tprivate async updateCachedConfigurationDefaultsOverrides(): Promise<void> {\n\t\tif (!this.updateCache) {\n\t\t\treturn;\n\t\t}\n\t\tconst cachedConfigurationDefaultsOverrides: IStringDictionary<any> = {};\n\t\tconst configurationDefaultsOverrides =\n\t\t\tthis.configurationRegistry.getConfigurationDefaultsOverrides();\n\t\tfor (const [key, value] of configurationDefaultsOverrides) {\n\t\t\tif (\n\t\t\t\t!OVERRIDE_PROPERTY_REGEX.test(key) &&\n\t\t\t\tvalue.value !== undefined\n\t\t\t) {\n\t\t\t\tcachedConfigurationDefaultsOverrides[key] = value.value;\n\t\t\t}\n\t\t}\n\t\ttry {\n\t\t\tif (Object.keys(cachedConfigurationDefaultsOverrides).length) {\n\t\t\t\tlocalStorage.setItem(\n\t\t\t\t\tDefaultConfiguration.DEFAULT_OVERRIDES_CACHE_EXISTS_KEY,\n\t\t\t\t\t\"yes\",\n\t\t\t\t);\n\t\t\t\tawait this.configurationCache.write(\n\t\t\t\t\tthis.cacheKey,\n\t\t\t\t\tJSON.stringify(cachedConfigurationDefaultsOverrides),\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\tlocalStorage.removeItem(\n\t\t\t\t\tDefaultConfiguration.DEFAULT_OVERRIDES_CACHE_EXISTS_KEY,\n\t\t\t\t);\n\t\t\t\tawait this.configurationCache.remove(this.cacheKey);\n\t\t\t}\n\t\t} catch (error) {\n\t\t\t/* Ignore error */\n\t\t}\n\t}\n}\n\nexport class ApplicationConfiguration extends UserSettings {\n\tprivate readonly _onDidChangeConfiguration: Emitter<ConfigurationModel> =\n\t\tthis._register(new Emitter<ConfigurationModel>());\n\treadonly onDidChangeConfiguration: Event<ConfigurationModel> =\n\t\tthis._onDidChangeConfiguration.event;\n\n\tprivate readonly reloadConfigurationScheduler: RunOnceScheduler;\n\n\tconstructor(\n\t\tuserDataProfilesService: IUserDataProfilesService,\n\t\tfileService: IFileService,\n\t\turiIdentityService: IUriIdentityService,\n\t\tlogService: ILogService,\n\t) {\n\t\tsuper(\n\t\t\tuserDataProfilesService.defaultProfile.settingsResource,\n\t\t\t{ scopes: [ConfigurationScope.APPLICATION] },\n\t\t\turiIdentityService.extUri,\n\t\t\tfileService,\n\t\t\tlogService,\n\t\t);\n\t\tthis._register(\n\t\t\tthis.onDidChange(() =>\n\t\t\t\tthis.reloadConfigurationScheduler.schedule(),\n\t\t\t),\n\t\t);\n\t\tthis.reloadConfigurationScheduler = this._register(\n\t\t\tnew RunOnceScheduler(\n\t\t\t\t() =>\n\t\t\t\t\tthis.loadConfiguration().then((configurationModel) =>\n\t\t\t\t\t\tthis._onDidChangeConfiguration.fire(configurationModel),\n\t\t\t\t\t),\n\t\t\t\t50,\n\t\t\t),\n\t\t);\n\t}\n\n\tasync initialize(): Promise<ConfigurationModel> {\n\t\treturn this.loadConfiguration();\n\t}\n\n\toverride async loadConfiguration(): Promise<ConfigurationModel> {\n\t\tconst model = await super.loadConfiguration();\n\t\tconst value = model.getValue<string[]>(APPLY_ALL_PROFILES_SETTING);\n\t\tconst allProfilesSettings = Array.isArray(value) ? value : [];\n\t\treturn this.parseOptions.include || allProfilesSettings.length\n\t\t\t? this.reparse({\n\t\t\t\t\t...this.parseOptions,\n\t\t\t\t\tinclude: allProfilesSettings,\n\t\t\t\t})\n\t\t\t: model;\n\t}\n}\n\nexport class UserConfiguration extends Disposable {\n\tprivate readonly _onDidChangeConfiguration: Emitter<ConfigurationModel> =\n\t\tthis._register(new Emitter<ConfigurationModel>());\n\treadonly onDidChangeConfiguration: Event<ConfigurationModel> =\n\t\tthis._onDidChangeConfiguration.event;\n\n\tprivate readonly userConfiguration = this._register(\n\t\tnew MutableDisposable<UserSettings | FileServiceBasedConfiguration>(),\n\t);\n\tprivate readonly userConfigurationChangeDisposable = this._register(\n\t\tnew MutableDisposable<IDisposable>(),\n\t);\n\tprivate readonly reloadConfigurationScheduler: RunOnceScheduler;\n\n\tget hasTasksLoaded(): boolean {\n\t\treturn (\n\t\t\tthis.userConfiguration.value instanceof\n\t\t\tFileServiceBasedConfiguration\n\t\t);\n\t}\n\n\tconstructor(\n\t\tprivate settingsResource: URI,\n\t\tprivate tasksResource: URI | undefined,\n\t\tprivate configurationParseOptions: ConfigurationParseOptions,\n\t\tprivate readonly fileService: IFileService,\n\t\tprivate readonly uriIdentityService: IUriIdentityService,\n\t\tprivate readonly logService: ILogService,\n\t) {\n\t\tsuper();\n\t\tthis.userConfiguration.value = new UserSettings(\n\t\t\tsettingsResource,\n\t\t\tthis.configurationParseOptions,\n\t\t\turiIdentityService.extUri,\n\t\t\tthis.fileService,\n\t\t\tlogService,\n\t\t);\n\t\tthis.userConfigurationChangeDisposable.value =\n\t\t\tthis.userConfiguration.value.onDidChange(() =>\n\t\t\t\tthis.reloadConfigurationScheduler.schedule(),\n\t\t\t);\n\t\tthis.reloadConfigurationScheduler = this._register(\n\t\t\tnew RunOnceScheduler(\n\t\t\t\t() =>\n\t\t\t\t\tthis.userConfiguration\n\t\t\t\t\t\t.value!.loadConfiguration()\n\t\t\t\t\t\t.then((configurationModel) =>\n\t\t\t\t\t\t\tthis._onDidChangeConfiguration.fire(\n\t\t\t\t\t\t\t\tconfigurationModel,\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t),\n\t\t\t\t50,\n\t\t\t),\n\t\t);\n\t}\n\n\tasync reset(\n\t\tsettingsResource: URI,\n\t\ttasksResource: URI | undefined,\n\t\tconfigurationParseOptions: ConfigurationParseOptions,\n\t): Promise<ConfigurationModel> {\n\t\tthis.settingsResource = settingsResource;\n\t\tthis.tasksResource = tasksResource;\n\t\tthis.configurationParseOptions = configurationParseOptions;\n\t\treturn this.doReset();\n\t}\n\n\tprivate async doReset(\n\t\tsettingsConfiguration?: ConfigurationModel,\n\t): Promise<ConfigurationModel> {\n\t\tconst folder = this.uriIdentityService.extUri.dirname(\n\t\t\tthis.settingsResource,\n\t\t);\n\t\tconst standAloneConfigurationResources: [string, URI][] = this\n\t\t\t.tasksResource\n\t\t\t? [[TASKS_CONFIGURATION_KEY, this.tasksResource]]\n\t\t\t: [];\n\t\tconst fileServiceBasedConfiguration = new FileServiceBasedConfiguration(\n\t\t\tfolder.toString(),\n\t\t\tthis.settingsResource,\n\t\t\tstandAloneConfigurationResources,\n\t\t\tthis.configurationParseOptions,\n\t\t\tthis.fileService,\n\t\t\tthis.uriIdentityService,\n\t\t\tthis.logService,\n\t\t);\n\t\tconst configurationModel =\n\t\t\tawait fileServiceBasedConfiguration.loadConfiguration(\n\t\t\t\tsettingsConfiguration,\n\t\t\t);\n\t\tthis.userConfiguration.value = fileServiceBasedConfiguration;\n\n\t\t// Check for value because userConfiguration might have been disposed.\n\t\tif (this.userConfigurationChangeDisposable.value) {\n\t\t\tthis.userConfigurationChangeDisposable.value =\n\t\t\t\tthis.userConfiguration.value.onDidChange(() =>\n\t\t\t\t\tthis.reloadConfigurationScheduler.schedule(),\n\t\t\t\t);\n\t\t}\n\n\t\treturn configurationModel;\n\t}\n\n\tasync initialize(): Promise<ConfigurationModel> {\n\t\treturn this.userConfiguration.value!.loadConfiguration();\n\t}\n\n\tasync reload(\n\t\tsettingsConfiguration?: ConfigurationModel,\n\t): Promise<ConfigurationModel> {\n\t\tif (this.hasTasksLoaded) {\n\t\t\treturn this.userConfiguration.value!.loadConfiguration();\n\t\t}\n\t\treturn this.doReset(settingsConfiguration);\n\t}\n\n\treparse(\n\t\tparseOptions?: Partial<ConfigurationParseOptions>,\n\t): ConfigurationModel {\n\t\tthis.configurationParseOptions = {\n\t\t\t...this.configurationParseOptions,\n\t\t\t...parseOptions,\n\t\t};\n\t\treturn this.userConfiguration.value!.reparse(\n\t\t\tthis.configurationParseOptions,\n\t\t);\n\t}\n\n\tgetRestrictedSettings(): string[] {\n\t\treturn this.userConfiguration.value!.getRestrictedSettings();\n\t}\n}\n\nclass FileServiceBasedConfiguration extends Disposable {\n\tprivate readonly allResources: URI[];\n\tprivate _folderSettingsModelParser: ConfigurationModelParser;\n\tprivate _folderSettingsParseOptions: ConfigurationParseOptions;\n\tprivate _standAloneConfigurations: ConfigurationModel[];\n\tprivate _cache: ConfigurationModel;\n\n\tprivate readonly _onDidChange: Emitter<void> = this._register(\n\t\tnew Emitter<void>(),\n\t);\n\treadonly onDidChange: Event<void> = this._onDidChange.event;\n\n\tconstructor(\n\t\tname: string,\n\t\tprivate readonly settingsResource: URI,\n\t\tprivate readonly standAloneConfigurationResources: [string, URI][],\n\t\tconfigurationParseOptions: ConfigurationParseOptions,\n\t\tprivate readonly fileService: IFileService,\n\t\tprivate readonly uriIdentityService: IUriIdentityService,\n\t\tprivate readonly logService: ILogService,\n\t) {\n\t\tsuper();\n\t\tthis.allResources = [\n\t\t\tthis.settingsResource,\n\t\t\t...this.standAloneConfigurationResources.map(\n\t\t\t\t([, resource]) => resource,\n\t\t\t),\n\t\t];\n\t\tthis._register(\n\t\t\tcombinedDisposable(\n\t\t\t\t...this.allResources.map((resource) =>\n\t\t\t\t\tcombinedDisposable(\n\t\t\t\t\t\tthis.fileService.watch(\n\t\t\t\t\t\t\turiIdentityService.extUri.dirname(resource),\n\t\t\t\t\t\t),\n\t\t\t\t\t\t// Also listen to the resource incase the resource is a symlink - https://github.com/microsoft/vscode/issues/118134\n\t\t\t\t\t\tthis.fileService.watch(resource),\n\t\t\t\t\t),\n\t\t\t\t),\n\t\t\t),\n\t\t);\n\n\t\tthis._folderSettingsModelParser = new ConfigurationModelParser(\n\t\t\tname,\n\t\t\tlogService,\n\t\t);\n\t\tthis._folderSettingsParseOptions = configurationParseOptions;\n\t\tthis._standAloneConfigurations = [];\n\t\tthis._cache = ConfigurationModel.createEmptyModel(this.logService);\n\n\t\tthis._register(\n\t\t\tEvent.debounce(\n\t\t\t\tEvent.any(\n\t\t\t\t\tEvent.filter(this.fileService.onDidFilesChange, (e) =>\n\t\t\t\t\t\tthis.handleFileChangesEvent(e),\n\t\t\t\t\t),\n\t\t\t\t\tEvent.filter(this.fileService.onDidRunOperation, (e) =>\n\t\t\t\t\t\tthis.handleFileOperationEvent(e),\n\t\t\t\t\t),\n\t\t\t\t),\n\t\t\t\t() => undefined,\n\t\t\t\t100,\n\t\t\t)(() => this._onDidChange.fire()),\n\t\t);\n\t}\n\n\tasync resolveContents(\n\t\tdonotResolveSettings?: boolean,\n\t): Promise<[string | undefined, [string, string | undefined][]]> {\n\t\tconst resolveContents = async (\n\t\t\tresources: URI[],\n\t\t): Promise<(string | undefined)[]> => {\n\t\t\treturn Promise.all(\n\t\t\t\tresources.map(async (resource) => {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tconst content = await this.fileService.readFile(\n\t\t\t\t\t\t\tresource,\n\t\t\t\t\t\t\t{ atomic: true },\n\t\t\t\t\t\t);\n\t\t\t\t\t\treturn content.value.toString();\n\t\t\t\t\t} catch (error) {\n\t\t\t\t\t\tthis.logService.trace(\n\t\t\t\t\t\t\t`Error while resolving configuration file '${resource.toString()}': ${errors.getErrorMessage(error)}`,\n\t\t\t\t\t\t);\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t(<FileOperationError>error).fileOperationResult !==\n\t\t\t\t\t\t\t\tFileOperationResult.FILE_NOT_FOUND &&\n\t\t\t\t\t\t\t(<FileOperationError>error).fileOperationResult !==\n\t\t\t\t\t\t\t\tFileOperationResult.FILE_NOT_DIRECTORY\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\tthis.logService.error(error);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\treturn \"{}\";\n\t\t\t\t}),\n\t\t\t);\n\t\t};\n\n\t\tconst [[settingsContent], standAloneConfigurationContents] =\n\t\t\tawait Promise.all([\n\t\t\t\tdonotResolveSettings\n\t\t\t\t\t? Promise.resolve([undefined])\n\t\t\t\t\t: resolveContents([this.settingsResource]),\n\t\t\t\tresolveContents(\n\t\t\t\t\tthis.standAloneConfigurationResources.map(\n\t\t\t\t\t\t([, resource]) => resource,\n\t\t\t\t\t),\n\t\t\t\t),\n\t\t\t]);\n\n\t\treturn [\n\t\t\tsettingsContent,\n\t\t\tstandAloneConfigurationContents.map((content, index) => [\n\t\t\t\tthis.standAloneConfigurationResources[index][0],\n\t\t\t\tcontent,\n\t\t\t]),\n\t\t];\n\t}\n\n\tasync loadConfiguration(\n\t\tsettingsConfiguration?: ConfigurationModel,\n\t): Promise<ConfigurationModel> {\n\t\tconst [settingsContent, standAloneConfigurationContents] =\n\t\t\tawait this.resolveContents(!!settingsConfiguration);\n\n\t\t// reset\n\t\tthis._standAloneConfigurations = [];\n\t\tthis._folderSettingsModelParser.parse(\n\t\t\t\"\",\n\t\t\tthis._folderSettingsParseOptions,\n\t\t);\n\n\t\t// parse\n\t\tif (settingsContent !== undefined) {\n\t\t\tthis._folderSettingsModelParser.parse(\n\t\t\t\tsettingsContent,\n\t\t\t\tthis._folderSettingsParseOptions,\n\t\t\t);\n\t\t}\n\t\tfor (\n\t\t\tlet index = 0;\n\t\t\tindex < standAloneConfigurationContents.length;\n\t\t\tindex++\n\t\t) {\n\t\t\tconst contents = standAloneConfigurationContents[index][1];\n\t\t\tif (contents !== undefined) {\n\t\t\t\tconst standAloneConfigurationModelParser =\n\t\t\t\t\tnew StandaloneConfigurationModelParser(\n\t\t\t\t\t\tthis.standAloneConfigurationResources[\n\t\t\t\t\t\t\tindex\n\t\t\t\t\t\t][1].toString(),\n\t\t\t\t\t\tthis.standAloneConfigurationResources[index][0],\n\t\t\t\t\t\tthis.logService,\n\t\t\t\t\t);\n\t\t\t\tstandAloneConfigurationModelParser.parse(contents);\n\t\t\t\tthis._standAloneConfigurations.push(\n\t\t\t\t\tstandAloneConfigurationModelParser.configurationModel,\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\t// Consolidate (support *.json files in the workspace settings folder)\n\t\tthis.consolidate(settingsConfiguration);\n\n\t\treturn this._cache;\n\t}\n\n\tgetRestrictedSettings(): string[] {\n\t\treturn this._folderSettingsModelParser.restrictedConfigurations;\n\t}\n\n\treparse(\n\t\tconfigurationParseOptions: ConfigurationParseOptions,\n\t): ConfigurationModel {\n\t\tconst oldContents =\n\t\t\tthis._folderSettingsModelParser.configurationModel.contents;\n\t\tthis._folderSettingsParseOptions = configurationParseOptions;\n\t\tthis._folderSettingsModelParser.reparse(\n\t\t\tthis._folderSettingsParseOptions,\n\t\t);\n\t\tif (\n\t\t\t!equals(\n\t\t\t\toldContents,\n\t\t\t\tthis._folderSettingsModelParser.configurationModel.contents,\n\t\t\t)\n\t\t) {\n\t\t\tthis.consolidate();\n\t\t}\n\t\treturn this._cache;\n\t}\n\n\tprivate consolidate(settingsConfiguration?: ConfigurationModel): void {\n\t\tthis._cache = (\n\t\t\tsettingsConfiguration ??\n\t\t\tthis._folderSettingsModelParser.configurationModel\n\t\t).merge(...this._standAloneConfigurations);\n\t}\n\n\tprivate handleFileChangesEvent(event: FileChangesEvent): boolean {\n\t\t// One of the resources has changed\n\t\tif (this.allResources.some((resource) => event.contains(resource))) {\n\t\t\treturn true;\n\t\t}\n\t\t// One of the resource's parent got deleted\n\t\tif (\n\t\t\tthis.allResources.some((resource) =>\n\t\t\t\tevent.contains(\n\t\t\t\t\tthis.uriIdentityService.extUri.dirname(resource),\n\t\t\t\t\tFileChangeType.DELETED,\n\t\t\t\t),\n\t\t\t)\n\t\t) {\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\n\tprivate handleFileOperationEvent(event: FileOperationEvent): boolean {\n\t\t// One of the resources has changed\n\t\tif (\n\t\t\t(event.isOperation(FileOperation.CREATE) ||\n\t\t\t\tevent.isOperation(FileOperation.COPY) ||\n\t\t\t\tevent.isOperation(FileOperation.DELETE) ||\n\t\t\t\tevent.isOperation(FileOperation.WRITE)) &&\n\t\t\tthis.allResources.some((resource) =>\n\t\t\t\tthis.uriIdentityService.extUri.isEqual(\n\t\t\t\t\tevent.resource,\n\t\t\t\t\tresource,\n\t\t\t\t),\n\t\t\t)\n\t\t) {\n\t\t\treturn true;\n\t\t}\n\t\t// One of the resource's parent got deleted\n\t\tif (\n\t\t\tevent.isOperation(FileOperation.DELETE) &&\n\t\t\tthis.allResources.some((resource) =>\n\t\t\t\tthis.uriIdentityService.extUri.isEqual(\n\t\t\t\t\tevent.resource,\n\t\t\t\t\tthis.uriIdentityService.extUri.dirname(resource),\n\t\t\t\t),\n\t\t\t)\n\t\t) {\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n}\n\nexport class RemoteUserConfiguration extends Disposable {\n\tprivate readonly _cachedConfiguration: CachedRemoteUserConfiguration;\n\tprivate readonly _fileService: IFileService;\n\tprivate _userConfiguration:\n\t\t| FileServiceBasedRemoteUserConfiguration\n\t\t| CachedRemoteUserConfiguration;\n\tprivate _userConfigurationInitializationPromise: Promise<ConfigurationModel> | null =\n\t\tnull;\n\n\tprivate readonly _onDidChangeConfiguration: Emitter<ConfigurationModel> =\n\t\tthis._register(new Emitter<ConfigurationModel>());\n\tpublic readonly onDidChangeConfiguration: Event<ConfigurationModel> =\n\t\tthis._onDidChangeConfiguration.event;\n\n\tprivate readonly _onDidInitialize = this._register(\n\t\tnew Emitter<ConfigurationModel>(),\n\t);\n\tpublic readonly onDidInitialize = this._onDidInitialize.event;\n\n\tconstructor(\n\t\tremoteAuthority: string,\n\t\tconfigurationCache: IConfigurationCache,\n\t\tfileService: IFileService,\n\t\turiIdentityService: IUriIdentityService,\n\t\tremoteAgentService: IRemoteAgentService,\n\t\tlogService: ILogService,\n\t) {\n\t\tsuper();\n\t\tthis._fileService = fileService;\n\t\tthis._userConfiguration = this._cachedConfiguration =\n\t\t\tnew CachedRemoteUserConfiguration(\n\t\t\t\tremoteAuthority,\n\t\t\t\tconfigurationCache,\n\t\t\t\t{ scopes: REMOTE_MACHINE_SCOPES },\n\t\t\t\tlogService,\n\t\t\t);\n\t\tremoteAgentService.getEnvironment().then(async (environment) => {\n\t\t\tif (environment) {\n\t\t\t\tconst userConfiguration = this._register(\n\t\t\t\t\tnew FileServiceBasedRemoteUserConfiguration(\n\t\t\t\t\t\tenvironment.settingsPath,\n\t\t\t\t\t\t{ scopes: REMOTE_MACHINE_SCOPES },\n\t\t\t\t\t\tthis._fileService,\n\t\t\t\t\t\turiIdentityService,\n\t\t\t\t\t\tlogService,\n\t\t\t\t\t),\n\t\t\t\t);\n\t\t\t\tthis._register(\n\t\t\t\t\tuserConfiguration.onDidChangeConfiguration(\n\t\t\t\t\t\t(configurationModel) =>\n\t\t\t\t\t\t\tthis.onDidUserConfigurationChange(\n\t\t\t\t\t\t\t\tconfigurationModel,\n\t\t\t\t\t\t\t),\n\t\t\t\t\t),\n\t\t\t\t);\n\t\t\t\tthis._userConfigurationInitializationPromise =\n\t\t\t\t\tuserConfiguration.initialize();\n\t\t\t\tconst configurationModel =\n\t\t\t\t\tawait this._userConfigurationInitializationPromise;\n\t\t\t\tthis._userConfiguration.dispose();\n\t\t\t\tthis._userConfiguration = userConfiguration;\n\t\t\t\tthis.onDidUserConfigurationChange(configurationModel);\n\t\t\t\tthis._onDidInitialize.fire(configurationModel);\n\t\t\t}\n\t\t});\n\t}\n\n\tasync initialize(): Promise<ConfigurationModel> {\n\t\tif (\n\t\t\tthis._userConfiguration instanceof\n\t\t\tFileServiceBasedRemoteUserConfiguration\n\t\t) {\n\t\t\treturn this._userConfiguration.initialize();\n\t\t}\n\n\t\t// Initialize cached configuration\n\t\tlet configurationModel = await this._userConfiguration.initialize();\n\t\tif (this._userConfigurationInitializationPromise) {\n\t\t\t// Use user configuration\n\t\t\tconfigurationModel =\n\t\t\t\tawait this._userConfigurationInitializationPromise;\n\t\t\tthis._userConfigurationInitializationPromise = null;\n\t\t}\n\n\t\treturn configurationModel;\n\t}\n\n\treload(): Promise<ConfigurationModel> {\n\t\treturn this._userConfiguration.reload();\n\t}\n\n\treparse(): ConfigurationModel {\n\t\treturn this._userConfiguration.reparse({\n\t\t\tscopes: REMOTE_MACHINE_SCOPES,\n\t\t});\n\t}\n\n\tgetRestrictedSettings(): string[] {\n\t\treturn this._userConfiguration.getRestrictedSettings();\n\t}\n\n\tprivate onDidUserConfigurationChange(\n\t\tconfigurationModel: ConfigurationModel,\n\t): void {\n\t\tthis.updateCache();\n\t\tthis._onDidChangeConfiguration.fire(configurationModel);\n\t}\n\n\tprivate async updateCache(): Promise<void> {\n\t\tif (\n\t\t\tthis._userConfiguration instanceof\n\t\t\tFileServiceBasedRemoteUserConfiguration\n\t\t) {\n\t\t\tlet content: string | undefined;\n\t\t\ttry {\n\t\t\t\tcontent = await this._userConfiguration.resolveContent();\n\t\t\t} catch (error) {\n\t\t\t\tif (\n\t\t\t\t\t(<FileOperationError>error).fileOperationResult !==\n\t\t\t\t\tFileOperationResult.FILE_NOT_FOUND\n\t\t\t\t) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t\tawait this._cachedConfiguration.updateConfiguration(content);\n\t\t}\n\t}\n}\n\nclass FileServiceBasedRemoteUserConfiguration extends Disposable {\n\tprivate readonly parser: ConfigurationModelParser;\n\tprivate parseOptions: ConfigurationParseOptions;\n\tprivate readonly reloadConfigurationScheduler: RunOnceScheduler;\n\tprotected readonly _onDidChangeConfiguration: Emitter<ConfigurationModel> =\n\t\tthis._register(new Emitter<ConfigurationModel>());\n\treadonly onDidChangeConfiguration: Event<ConfigurationModel> =\n\t\tthis._onDidChangeConfiguration.event;\n\n\tprivate readonly fileWatcherDisposable = this._register(\n\t\tnew MutableDisposable(),\n\t);\n\tprivate readonly directoryWatcherDisposable = this._register(\n\t\tnew MutableDisposable(),\n\t);\n\n\tconstructor(\n\t\tprivate readonly configurationResource: URI,\n\t\tconfigurationParseOptions: ConfigurationParseOptions,\n\t\tprivate readonly fileService: IFileService,\n\t\tprivate readonly uriIdentityService: IUriIdentityService,\n\t\tprivate readonly logService: ILogService,\n\t) {\n\t\tsuper();\n\n\t\tthis.parser = new ConfigurationModelParser(\n\t\t\tthis.configurationResource.toString(),\n\t\t\tlogService,\n\t\t);\n\t\tthis.parseOptions = configurationParseOptions;\n\t\tthis._register(\n\t\t\tfileService.onDidFilesChange((e) => this.handleFileChangesEvent(e)),\n\t\t);\n\t\tthis._register(\n\t\t\tfileService.onDidRunOperation((e) =>\n\t\t\t\tthis.handleFileOperationEvent(e),\n\t\t\t),\n\t\t);\n\t\tthis.reloadConfigurationScheduler = this._register(\n\t\t\tnew RunOnceScheduler(\n\t\t\t\t() =>\n\t\t\t\t\tthis.reload().then((configurationModel) =>\n\t\t\t\t\t\tthis._onDidChangeConfiguration.fire(configurationModel),\n\t\t\t\t\t),\n\t\t\t\t50,\n\t\t\t),\n\t\t);\n\t\tthis._register(\n\t\t\ttoDisposable(() => {\n\t\t\t\tthis.stopWatchingResource();\n\t\t\t\tthis.stopWatchingDirectory();\n\t\t\t}),\n\t\t);\n\t}\n\n\tprivate watchResource(): void {\n\t\tthis.fileWatcherDisposable.value = this.fileService.watch(\n\t\t\tthis.configurationResource,\n\t\t);\n\t}\n\n\tprivate stopWatchingResource(): void {\n\t\tthis.fileWatcherDisposable.value = undefined;\n\t}\n\n\tprivate watchDirectory(): void {\n\t\tconst directory = this.uriIdentityService.extUri.dirname(\n\t\t\tthis.configurationResource,\n\t\t);\n\t\tthis.directoryWatcherDisposable.value =\n\t\t\tthis.fileService.watch(directory);\n\t}\n\n\tprivate stopWatchingDirectory(): void {\n\t\tthis.directoryWatcherDisposable.value = undefined;\n\t}\n\n\tasync initialize(): Promise<ConfigurationModel> {\n\t\tconst exists = await this.fileService.exists(\n\t\t\tthis.configurationResource,\n\t\t);\n\t\tthis.onResourceExists(exists);\n\t\treturn this.reload();\n\t}\n\n\tasync resolveContent(): Promise<string> {\n\t\tconst content = await this.fileService.readFile(\n\t\t\tthis.configurationResource,\n\t\t\t{ atomic: true },\n\t\t);\n\t\treturn content.value.toString();\n\t}\n\n\tasync reload(): Promise<ConfigurationModel> {\n\t\ttry {\n\t\t\tconst content = await this.resolveContent();\n\t\t\tthis.parser.parse(content, this.parseOptions);\n\t\t\treturn this.parser.configurationModel;\n\t\t} catch (e) {\n\t\t\treturn ConfigurationModel.createEmptyModel(this.logService);\n\t\t}\n\t}\n\n\treparse(\n\t\tconfigurationParseOptions: ConfigurationParseOptions,\n\t): ConfigurationModel {\n\t\tthis.parseOptions = configurationParseOptions;\n\t\tthis.parser.reparse(this.parseOptions);\n\t\treturn this.parser.configurationModel;\n\t}\n\n\tgetRestrictedSettings(): string[] {\n\t\treturn this.parser.restrictedConfigurations;\n\t}\n\n\tprivate handleFileChangesEvent(event: FileChangesEvent): void {\n\t\t// Find changes that affect the resource\n\t\tlet affectedByChanges = event.contains(\n\t\t\tthis.configurationResource,\n\t\t\tFileChangeType.UPDATED,\n\t\t);\n\t\tif (event.contains(this.configurationResource, FileChangeType.ADDED)) {\n\t\t\taffectedByChanges = true;\n\t\t\tthis.onResourceExists(true);\n\t\t} else if (\n\t\t\tevent.contains(this.configurationResource, FileChangeType.DELETED)\n\t\t) {\n\t\t\taffectedByChanges = true;\n\t\t\tthis.onResourceExists(false);\n\t\t}\n\n\t\tif (affectedByChanges) {\n\t\t\tthis.reloadConfigurationScheduler.schedule();\n\t\t}\n\t}\n\n\tprivate handleFileOperationEvent(event: FileOperationEvent): void {\n\t\tif (\n\t\t\t(event.isOperation(FileOperation.CREATE) ||\n\t\t\t\tevent.isOperation(FileOperation.COPY) ||\n\t\t\t\tevent.isOperation(FileOperation.DELETE) ||\n\t\t\t\tevent.isOperation(FileOperation.WRITE)) &&\n\t\t\tthis.uriIdentityService.extUri.isEqual(\n\t\t\t\tevent.resource,\n\t\t\t\tthis.configurationResource,\n\t\t\t)\n\t\t) {\n\t\t\tthis.reloadConfigurationScheduler.schedule();\n\t\t}\n\t}\n\n\tprivate onResourceExists(exists: boolean): void {\n\t\tif (exists) {\n\t\t\tthis.stopWatchingDirectory();\n\t\t\tthis.watchResource();\n\t\t} else {\n\t\t\tthis.stopWatchingResource();\n\t\t\tthis.watchDirectory();\n\t\t}\n\t}\n}\n\nclass CachedRemoteUserConfiguration extends Disposable {\n\tprivate readonly _onDidChange: Emitter<ConfigurationModel> = this._register(\n\t\tnew Emitter<ConfigurationModel>(),\n\t);\n\treadonly onDidChange: Event<ConfigurationModel> = this._onDidChange.event;\n\n\tprivate readonly key: ConfigurationKey;\n\tprivate readonly parser: ConfigurationModelParser;\n\tprivate parseOptions: ConfigurationParseOptions;\n\tprivate configurationModel: ConfigurationModel;\n\n\tconstructor(\n\t\tremoteAuthority: string,\n\t\tprivate readonly configurationCache: IConfigurationCache,\n\t\tconfigurationParseOptions: ConfigurationParseOptions,\n\t\tlogService: ILogService,\n\t) {\n\t\tsuper();\n\t\tthis.key = { type: \"user\", key: remoteAuthority };\n\t\tthis.parser = new ConfigurationModelParser(\n\t\t\t\"CachedRemoteUserConfiguration\",\n\t\t\tlogService,\n\t\t);\n\t\tthis.parseOptions = configurationParseOptions;\n\t\tthis.configurationModel =\n\t\t\tConfigurationModel.createEmptyModel(logService);\n\t}\n\n\tgetConfigurationModel(): ConfigurationModel {\n\t\treturn this.configurationModel;\n\t}\n\n\tinitialize(): Promise<ConfigurationModel> {\n\t\treturn this.reload();\n\t}\n\n\treparse(\n\t\tconfigurationParseOptions: ConfigurationParseOptions,\n\t): ConfigurationModel {\n\t\tthis.parseOptions = configurationParseOptions;\n\t\tthis.parser.reparse(this.parseOptions);\n\t\tthis.configurationModel = this.parser.configurationModel;\n\t\treturn this.configurationModel;\n\t}\n\n\tgetRestrictedSettings(): string[] {\n\t\treturn this.parser.restrictedConfigurations;\n\t}\n\n\tasync reload(): Promise<ConfigurationModel> {\n\t\ttry {\n\t\t\tconst content = await this.configurationCache.read(this.key);\n\t\t\tconst parsed: { content: string } = JSON.parse(content);\n\t\t\tif (parsed.content) {\n\t\t\t\tthis.parser.parse(parsed.content, this.parseOptions);\n\t\t\t\tthis.configurationModel = this.parser.configurationModel;\n\t\t\t}\n\t\t} catch (e) {\n\t\t\t/* Ignore error */\n\t\t}\n\t\treturn this.configurationModel;\n\t}\n\n\tasync updateConfiguration(content: string | undefined): Promise<void> {\n\t\tif (content) {\n\t\t\treturn this.configurationCache.write(\n\t\t\t\tthis.key,\n\t\t\t\tJSON.stringify({ content }),\n\t\t\t);\n\t\t} else {\n\t\t\treturn this.configurationCache.remove(this.key);\n\t\t}\n\t}\n}\n\nexport class WorkspaceConfiguration extends Disposable {\n\tprivate readonly _cachedConfiguration: CachedWorkspaceConfiguration;\n\tprivate _workspaceConfiguration:\n\t\t| CachedWorkspaceConfiguration\n\t\t| FileServiceBasedWorkspaceConfiguration;\n\tprivate readonly _workspaceConfigurationDisposables = this._register(\n\t\tnew DisposableStore(),\n\t);\n\tprivate _workspaceIdentifier: IWorkspaceIdentifier | null = null;\n\tprivate _isWorkspaceTrusted = false;\n\n\tprivate readonly _onDidUpdateConfiguration = this._register(\n\t\tnew Emitter<boolean>(),\n\t);\n\tpublic readonly onDidUpdateConfiguration =\n\t\tthis._onDidUpdateConfiguration.event;\n\n\tprivate _initialized = false;\n\tget initialized(): boolean {\n\t\treturn this._initialized;\n\t}\n\tconstructor(\n\t\tprivate readonly configurationCache: IConfigurationCache,\n\t\tprivate readonly fileService: IFileService,\n\t\tprivate readonly uriIdentityService: IUriIdentityService,\n\t\tprivate readonly logService: ILogService,\n\t) {\n\t\tsuper();\n\t\tthis.fileService = fileService;\n\t\tthis._workspaceConfiguration = this._cachedConfiguration =\n\t\t\tnew CachedWorkspaceConfiguration(configurationCache, logService);\n\t}\n\n\tasync initialize(\n\t\tworkspaceIdentifier: IWorkspaceIdentifier,\n\t\tworkspaceTrusted: boolean,\n\t): Promise<void> {\n\t\tthis._workspaceIdentifier = workspaceIdentifier;\n\t\tthis._isWorkspaceTrusted = workspaceTrusted;\n\t\tif (!this._initialized) {\n\t\t\tif (\n\t\t\t\tthis.configurationCache.needsCaching(\n\t\t\t\t\tthis._workspaceIdentifier.configPath,\n\t\t\t\t)\n\t\t\t) {\n\t\t\t\tthis._workspaceConfiguration = this._cachedConfiguration;\n\t\t\t\tthis.waitAndInitialize(this._workspaceIdentifier);\n\t\t\t} else {\n\t\t\t\tthis.doInitialize(\n\t\t\t\t\tnew FileServiceBasedWorkspaceConfiguration(\n\t\t\t\t\t\tthis.fileService,\n\t\t\t\t\t\tthis.uriIdentityService,\n\t\t\t\t\t\tthis.logService,\n\t\t\t\t\t),\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t\tawait this.reload();\n\t}\n\n\tasync reload(): Promise<void> {\n\t\tif (this._workspaceIdentifier) {\n\t\t\tawait this._workspaceConfiguration.load(this._workspaceIdentifier, {\n\t\t\t\tscopes: WORKSPACE_SCOPES,\n\t\t\t\tskipRestricted: this.isUntrusted(),\n\t\t\t});\n\t\t}\n\t}\n\n\tgetFolders(): IStoredWorkspaceFolder[] {\n\t\treturn this._workspaceConfiguration.getFolders();\n\t}\n\n\tsetFolders(\n\t\tfolders: IStoredWorkspaceFolder[],\n\t\tjsonEditingService: IJSONEditingService,\n\t): Promise<void> {\n\t\tif (this._workspaceIdentifier) {\n\t\t\treturn jsonEditingService\n\t\t\t\t.write(\n\t\t\t\t\tthis._workspaceIdentifier.configPath,\n\t\t\t\t\t[{ path: [\"folders\"], value: folders }],\n\t\t\t\t\ttrue,\n\t\t\t\t)\n\t\t\t\t.then(() => this.reload());\n\t\t}\n\t\treturn Promise.resolve();\n\t}\n\n\tisTransient(): boolean {\n\t\treturn this._workspaceConfiguration.isTransient();\n\t}\n\n\tgetConfiguration(): ConfigurationModel {\n\t\treturn this._workspaceConfiguration.getWorkspaceSettings();\n\t}\n\n\tupdateWorkspaceTrust(trusted: boolean): ConfigurationModel {\n\t\tthis._isWorkspaceTrusted = trusted;\n\t\treturn this.reparseWorkspaceSettings();\n\t}\n\n\treparseWorkspaceSettings(): ConfigurationModel {\n\t\tthis._workspaceConfiguration.reparseWorkspaceSettings({\n\t\t\tscopes: WORKSPACE_SCOPES,\n\t\t\tskipRestricted: this.isUntrusted(),\n\t\t});\n\t\treturn this.getConfiguration();\n\t}\n\n\tgetRestrictedSettings(): string[] {\n\t\treturn this._workspaceConfiguration.getRestrictedSettings();\n\t}\n\n\tprivate async waitAndInitialize(\n\t\tworkspaceIdentifier: IWorkspaceIdentifier,\n\t): Promise<void> {\n\t\tawait whenProviderRegistered(\n\t\t\tworkspaceIdentifier.configPath,\n\t\t\tthis.fileService,\n\t\t);\n\t\tif (\n\t\t\t!(\n\t\t\t\tthis._workspaceConfiguration instanceof\n\t\t\t\tFileServiceBasedWorkspaceConfiguration\n\t\t\t)\n\t\t) {\n\t\t\tconst fileServiceBasedWorkspaceConfiguration = this._register(\n\t\t\t\tnew FileServiceBasedWorkspaceConfiguration(\n\t\t\t\t\tthis.fileService,\n\t\t\t\t\tthis.uriIdentityService,\n\t\t\t\t\tthis.logService,\n\t\t\t\t),\n\t\t\t);\n\t\t\tawait fileServiceBasedWorkspaceConfiguration.load(\n\t\t\t\tworkspaceIdentifier,\n\t\t\t\t{\n\t\t\t\t\tscopes: WORKSPACE_SCOPES,\n\t\t\t\t\tskipRestricted: this.isUntrusted(),\n\t\t\t\t},\n\t\t\t);\n\t\t\tthis.doInitialize(fileServiceBasedWorkspaceConfiguration);\n\t\t\tthis.onDidWorkspaceConfigurationChange(false, true);\n\t\t}\n\t}\n\n\tprivate doInitialize(\n\t\tfileServiceBasedWorkspaceConfiguration: FileServiceBasedWorkspaceConfiguration,\n\t): void {\n\t\tthis._workspaceConfigurationDisposables.clear();\n\t\tthis._workspaceConfiguration =\n\t\t\tthis._workspaceConfigurationDisposables.add(\n\t\t\t\tfileServiceBasedWorkspaceConfiguration,\n\t\t\t);\n\t\tthis._workspaceConfigurationDisposables.add(\n\t\t\tthis._workspaceConfiguration.onDidChange((e) =>\n\t\t\t\tthis.onDidWorkspaceConfigurationChange(true, false),\n\t\t\t),\n\t\t);\n\t\tthis._initialized = true;\n\t}\n\n\tprivate isUntrusted(): boolean {\n\t\treturn !this._isWorkspaceTrusted;\n\t}\n\n\tprivate async onDidWorkspaceConfigurationChange(\n\t\treload: boolean,\n\t\tfromCache: boolean,\n\t): Promise<void> {\n\t\tif (reload) {\n\t\t\tawait this.reload();\n\t\t}\n\t\tthis.updateCache();\n\t\tthis._onDidUpdateConfiguration.fire(fromCache);\n\t}\n\n\tprivate async updateCache(): Promise<void> {\n\t\tif (\n\t\t\tthis._workspaceIdentifier &&\n\t\t\tthis.configurationCache.needsCaching(\n\t\t\t\tthis._workspaceIdentifier.configPath,\n\t\t\t) &&\n\t\t\tthis._workspaceConfiguration instanceof\n\t\t\t\tFileServiceBasedWorkspaceConfiguration\n\t\t) {\n\t\t\tconst content = await this._workspaceConfiguration.resolveContent(\n\t\t\t\tthis._workspaceIdentifier,\n\t\t\t);\n\t\t\tawait this._cachedConfiguration.updateWorkspace(\n\t\t\t\tthis._workspaceIdentifier,\n\t\t\t\tcontent,\n\t\t\t);\n\t\t}\n\t}\n}\n\nclass FileServiceBasedWorkspaceConfiguration extends Disposable {\n\tworkspaceConfigurationModelParser: WorkspaceConfigurationModelParser;\n\tworkspaceSettings: ConfigurationModel;\n\tprivate _workspaceIdentifier: IWorkspaceIdentifier | null = null;\n\tprivate workspaceConfigWatcher: IDisposable;\n\tprivate readonly reloadConfigurationScheduler: RunOnceScheduler;\n\n\tprotected readonly _onDidChange: Emitter<void> = this._register(\n\t\tnew Emitter<void>(),\n\t);\n\treadonly onDidChange: Event<void> = this._onDidChange.event;\n\n\tconstructor(\n\t\tprivate readonly fileService: IFileService,\n\t\turiIdentityService: IUriIdentityService,\n\t\tprivate readonly logService: ILogService,\n\t) {\n\t\tsuper();\n\n\t\tthis.workspaceConfigurationModelParser =\n\t\t\tnew WorkspaceConfigurationModelParser(\"\", logService);\n\t\tthis.workspaceSettings =\n\t\t\tConfigurationModel.createEmptyModel(logService);\n\n\t\tthis._register(\n\t\t\tEvent.any(\n\t\t\t\tEvent.filter(\n\t\t\t\t\tthis.fileService.onDidFilesChange,\n\t\t\t\t\t(e) =>\n\t\t\t\t\t\t!!this._workspaceIdentifier &&\n\t\t\t\t\t\te.contains(this._workspaceIdentifier.configPath),\n\t\t\t\t),\n\t\t\t\tEvent.filter(\n\t\t\t\t\tthis.fileService.onDidRunOperation,\n\t\t\t\t\t(e) =>\n\t\t\t\t\t\t!!this._workspaceIdentifier &&\n\t\t\t\t\t\t(e.isOperation(FileOperation.CREATE) ||\n\t\t\t\t\t\t\te.isOperation(FileOperation.COPY) ||\n\t\t\t\t\t\t\te.isOperation(FileOperation.DELETE) ||\n\t\t\t\t\t\t\te.isOperation(FileOperation.WRITE)) &&\n\t\t\t\t\t\turiIdentityService.extUri.isEqual(\n\t\t\t\t\t\t\te.resource,\n\t\t\t\t\t\t\tthis._workspaceIdentifier.configPath,\n\t\t\t\t\t\t),\n\t\t\t\t),\n\t\t\t)(() => this.reloadConfigurationScheduler.schedule()),\n\t\t);\n\t\tthis.reloadConfigurationScheduler = this._register(\n\t\t\tnew RunOnceScheduler(() => this._onDidChange.fire(), 50),\n\t\t);\n\t\tthis.workspaceConfigWatcher = this._register(\n\t\t\tthis.watchWorkspaceConfigurationFile(),\n\t\t);\n\t}\n\n\tget workspaceIdentifier(): IWorkspaceIdentifier | null {\n\t\treturn this._workspaceIdentifier;\n\t}\n\n\tasync resolveContent(\n\t\tworkspaceIdentifier: IWorkspaceIdentifier,\n\t): Promise<string> {\n\t\tconst content = await this.fileService.readFile(\n\t\t\tworkspaceIdentifier.configPath,\n\t\t\t{ atomic: true },\n\t\t);\n\t\treturn content.value.toString();\n\t}\n\n\tasync load(\n\t\tworkspaceIdentifier: IWorkspaceIdentifier,\n\t\tconfigurationParseOptions: ConfigurationParseOptions,\n\t): Promise<void> {\n\t\tif (\n\t\t\t!this._workspaceIdentifier ||\n\t\t\tthis._workspaceIdentifier.id !== workspaceIdentifier.id\n\t\t) {\n\t\t\tthis._workspaceIdentifier = workspaceIdentifier;\n\t\t\tthis.workspaceConfigurationModelParser =\n\t\t\t\tnew WorkspaceConfigurationModelParser(\n\t\t\t\t\tthis._workspaceIdentifier.id,\n\t\t\t\t\tthis.logService,\n\t\t\t\t);\n\t\t\tdispose(this.workspaceConfigWatcher);\n\t\t\tthis.workspaceConfigWatcher = this._register(\n\t\t\t\tthis.watchWorkspaceConfigurationFile(),\n\t\t\t);\n\t\t}\n\t\tlet contents = \"\";\n\t\ttry {\n\t\t\tcontents = await this.resolveContent(this._workspaceIdentifier);\n\t\t} catch (error) {\n\t\t\tconst exists = await this.fileService.exists(\n\t\t\t\tthis._workspaceIdentifier.configPath,\n\t\t\t);\n\t\t\tif (exists) {\n\t\t\t\tthis.logService.error(error);\n\t\t\t}\n\t\t}\n\t\tthis.workspaceConfigurationModelParser.parse(\n\t\t\tcontents,\n\t\t\tconfigurationParseOptions,\n\t\t);\n\t\tthis.consolidate();\n\t}\n\n\tgetConfigurationModel(): ConfigurationModel {\n\t\treturn this.workspaceConfigurationModelParser.configurationModel;\n\t}\n\n\tgetFolders(): IStoredWorkspaceFolder[] {\n\t\treturn this.workspaceConfigurationModelParser.folders;\n\t}\n\n\tisTransient(): boolean {\n\t\treturn this.workspaceConfigurationModelParser.transient;\n\t}\n\n\tgetWorkspaceSettings(): ConfigurationModel {\n\t\treturn this.workspaceSettings;\n\t}\n\n\treparseWorkspaceSettings(\n\t\tconfigurationParseOptions: ConfigurationParseOptions,\n\t): ConfigurationModel {\n\t\tthis.workspaceConfigurationModelParser.reparseWorkspaceSettings(\n\t\t\tconfigurationParseOptions,\n\t\t);\n\t\tthis.consolidate();\n\t\treturn this.getWorkspaceSettings();\n\t}\n\n\tgetRestrictedSettings(): string[] {\n\t\treturn this.workspaceConfigurationModelParser.getRestrictedWorkspaceSettings();\n\t}\n\n\tprivate consolidate(): void {\n\t\tthis.workspaceSettings =\n\t\t\tthis.workspaceConfigurationModelParser.settingsModel.merge(\n\t\t\t\tthis.workspaceConfigurationModelParser.launchModel,\n\t\t\t\tthis.workspaceConfigurationModelParser.tasksModel,\n\t\t\t);\n\t}\n\n\tprivate watchWorkspaceConfigurationFile(): IDisposable {\n\t\treturn this._workspaceIdentifier\n\t\t\t? this.fileService.watch(this._workspaceIdentifier.configPath)\n\t\t\t: Disposable.None;\n\t}\n}\n\nclass CachedWorkspaceConfiguration {\n\treadonly onDidChange: Event<void> = Event.None;\n\n\tworkspaceConfigurationModelParser: WorkspaceConfigurationModelParser;\n\tworkspaceSettings: ConfigurationModel;\n\n\tconstructor(\n\t\tprivate readonly configurationCache: IConfigurationCache,\n\t\tprivate readonly logService: ILogService,\n\t) {\n\t\tthis.workspaceConfigurationModelParser =\n\t\t\tnew WorkspaceConfigurationModelParser(\"\", logService);\n\t\tthis.workspaceSettings =\n\t\t\tConfigurationModel.createEmptyModel(logService);\n\t}\n\n\tasync load(\n\t\tworkspaceIdentifier: IWorkspaceIdentifier,\n\t\tconfigurationParseOptions: ConfigurationParseOptions,\n\t): Promise<void> {\n\t\ttry {\n\t\t\tconst key = this.getKey(workspaceIdentifier);\n\t\t\tconst contents = await this.configurationCache.read(key);\n\t\t\tconst parsed: { content: string } = JSON.parse(contents);\n\t\t\tif (parsed.content) {\n\t\t\t\tthis.workspaceConfigurationModelParser =\n\t\t\t\t\tnew WorkspaceConfigurationModelParser(\n\t\t\t\t\t\tkey.key,\n\t\t\t\t\t\tthis.logService,\n\t\t\t\t\t);\n\t\t\t\tthis.workspaceConfigurationModelParser.parse(\n\t\t\t\t\tparsed.content,\n\t\t\t\t\tconfigurationParseOptions,\n\t\t\t\t);\n\t\t\t\tthis.consolidate();\n\t\t\t}\n\t\t} catch (e) {}\n\t}\n\n\tget workspaceIdentifier(): IWorkspaceIdentifier | null {\n\t\treturn null;\n\t}\n\n\tgetConfigurationModel(): ConfigurationModel {\n\t\treturn this.workspaceConfigurationModelParser.configurationModel;\n\t}\n\n\tgetFolders(): IStoredWorkspaceFolder[] {\n\t\treturn this.workspaceConfigurationModelParser.folders;\n\t}\n\n\tisTransient(): boolean {\n\t\treturn this.workspaceConfigurationModelParser.transient;\n\t}\n\n\tgetWorkspaceSettings(): ConfigurationModel {\n\t\treturn this.workspaceSettings;\n\t}\n\n\treparseWorkspaceSettings(\n\t\tconfigurationParseOptions: ConfigurationParseOptions,\n\t): ConfigurationModel {\n\t\tthis.workspaceConfigurationModelParser.reparseWorkspaceSettings(\n\t\t\tconfigurationParseOptions,\n\t\t);\n\t\tthis.consolidate();\n\t\treturn this.getWorkspaceSettings();\n\t}\n\n\tgetRestrictedSettings(): string[] {\n\t\treturn this.workspaceConfigurationModelParser.getRestrictedWorkspaceSettings();\n\t}\n\n\tprivate consolidate(): void {\n\t\tthis.workspaceSettings =\n\t\t\tthis.workspaceConfigurationModelParser.settingsModel.merge(\n\t\t\t\tthis.workspaceConfigurationModelParser.launchModel,\n\t\t\t\tthis.workspaceConfigurationModelParser.tasksModel,\n\t\t\t);\n\t}\n\n\tasync updateWorkspace(\n\t\tworkspaceIdentifier: IWorkspaceIdentifier,\n\t\tcontent: string | undefined,\n\t): Promise<void> {\n\t\ttry {\n\t\t\tconst key = this.getKey(workspaceIdentifier);\n\t\t\tif (content) {\n\t\t\t\tawait this.configurationCache.write(\n\t\t\t\t\tkey,\n\t\t\t\t\tJSON.stringify({ content }),\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\tawait this.configurationCache.remove(key);\n\t\t\t}\n\t\t} catch (error) {}\n\t}\n\n\tprivate getKey(\n\t\tworkspaceIdentifier: IWorkspaceIdentifier,\n\t): ConfigurationKey {\n\t\treturn {\n\t\t\ttype: \"workspaces\",\n\t\t\tkey: workspaceIdentifier.id,\n\t\t};\n\t}\n}\n\nclass CachedFolderConfiguration {\n\treadonly onDidChange = Event.None;\n\n\tprivate _folderSettingsModelParser: ConfigurationModelParser;\n\tprivate _folderSettingsParseOptions: ConfigurationParseOptions;\n\tprivate _standAloneConfigurations: ConfigurationModel[];\n\tprivate configurationModel: ConfigurationModel;\n\tprivate readonly key: ConfigurationKey;\n\n\tconstructor(\n\t\tfolder: URI,\n\t\tconfigFolderRelativePath: string,\n\t\tconfigurationParseOptions: ConfigurationParseOptions,\n\t\tprivate readonly configurationCache: IConfigurationCache,\n\t\tprivate readonly logService: ILogService,\n\t) {\n\t\tthis.key = {\n\t\t\ttype: \"folder\",\n\t\t\tkey: hash(\n\t\t\t\tjoinPath(folder, configFolderRelativePath).toString(),\n\t\t\t).toString(16),\n\t\t};\n\t\tthis._folderSettingsModelParser = new ConfigurationModelParser(\n\t\t\t\"CachedFolderConfiguration\",\n\t\t\tlogService,\n\t\t);\n\t\tthis._folderSettingsParseOptions = configurationParseOptions;\n\t\tthis._standAloneConfigurations = [];\n\t\tthis.configurationModel =\n\t\t\tConfigurationModel.createEmptyModel(logService);\n\t}\n\n\tasync loadConfiguration(): Promise<ConfigurationModel> {\n\t\ttry {\n\t\t\tconst contents = await this.configurationCache.read(this.key);\n\t\t\tconst {\n\t\t\t\tcontent: configurationContents,\n\t\t\t}: { content: IStringDictionary<string> } = JSON.parse(\n\t\t\t\tcontents.toString(),\n\t\t\t);\n\t\t\tif (configurationContents) {\n\t\t\t\tfor (const key of Object.keys(configurationContents)) {\n\t\t\t\t\tif (key === FOLDER_SETTINGS_NAME) {\n\t\t\t\t\t\tthis._folderSettingsModelParser.parse(\n\t\t\t\t\t\t\tconfigurationContents[key],\n\t\t\t\t\t\t\tthis._folderSettingsParseOptions,\n\t\t\t\t\t\t);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconst standAloneConfigurationModelParser =\n\t\t\t\t\t\t\tnew StandaloneConfigurationModelParser(\n\t\t\t\t\t\t\t\tkey,\n\t\t\t\t\t\t\t\tkey,\n\t\t\t\t\t\t\t\tthis.logService,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\tstandAloneConfigurationModelParser.parse(\n\t\t\t\t\t\t\tconfigurationContents[key],\n\t\t\t\t\t\t);\n\t\t\t\t\t\tthis._standAloneConfigurations.push(\n\t\t\t\t\t\t\tstandAloneConfigurationModelParser.configurationModel,\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis.consolidate();\n\t\t} catch (e) {}\n\t\treturn this.configurationModel;\n\t}\n\n\tasync updateConfiguration(\n\t\tsettingsContent: string | undefined,\n\t\tstandAloneConfigurationContents: [string, string | undefined][],\n\t): Promise<void> {\n\t\tconst content: any = {};\n\t\tif (settingsContent) {\n\t\t\tcontent[FOLDER_SETTINGS_NAME] = settingsContent;\n\t\t}\n\t\tstandAloneConfigurationContents.forEach(([key, contents]) => {\n\t\t\tif (contents) {\n\t\t\t\tcontent[key] = contents;\n\t\t\t}\n\t\t});\n\t\tif (Object.keys(content).length) {\n\t\t\tawait this.configurationCache.write(\n\t\t\t\tthis.key,\n\t\t\t\tJSON.stringify({ content }),\n\t\t\t);\n\t\t} else {\n\t\t\tawait this.configurationCache.remove(this.key);\n\t\t}\n\t}\n\n\tgetRestrictedSettings(): string[] {\n\t\treturn this._folderSettingsModelParser.restrictedConfigurations;\n\t}\n\n\treparse(\n\t\tconfigurationParseOptions: ConfigurationParseOptions,\n\t): ConfigurationModel {\n\t\tthis._folderSettingsParseOptions = configurationParseOptions;\n\t\tthis._folderSettingsModelParser.reparse(\n\t\t\tthis._folderSettingsParseOptions,\n\t\t);\n\t\tthis.consolidate();\n\t\treturn this.configurationModel;\n\t}\n\n\tprivate consolidate(): void {\n\t\tthis.configurationModel =\n\t\t\tthis._folderSettingsModelParser.configurationModel.merge(\n\t\t\t\t...this._standAloneConfigurations,\n\t\t\t);\n\t}\n\n\tgetUnsupportedKeys(): string[] {\n\t\treturn [];\n\t}\n}\n\nexport class FolderConfiguration extends Disposable {\n\tprotected readonly _onDidChange: Emitter<void> = this._register(\n\t\tnew Emitter<void>(),\n\t);\n\treadonly onDidChange: Event<void> = this._onDidChange.event;\n\n\tprivate folderConfiguration:\n\t\t| CachedFolderConfiguration\n\t\t| FileServiceBasedConfiguration;\n\tprivate readonly scopes: ConfigurationScope[];\n\tprivate readonly configurationFolder: URI;\n\tprivate cachedFolderConfiguration: CachedFolderConfiguration;\n\n\tconstructor(\n\t\tuseCache: boolean,\n\t\treadonly workspaceFolder: IWorkspaceFolder,\n\t\tconfigFolderRelativePath: string,\n\t\tprivate readonly workbenchState: WorkbenchState,\n\t\tprivate workspaceTrusted: boolean,\n\t\tfileService: IFileService,\n\t\turiIdentityService: IUriIdentityService,\n\t\tlogService: ILogService,\n\t\tprivate readonly configurationCache: IConfigurationCache,\n\t) {\n\t\tsuper();\n\n\t\tthis.scopes =\n\t\t\tWorkbenchState.WORKSPACE === this.workbenchState\n\t\t\t\t? FOLDER_SCOPES\n\t\t\t\t: WORKSPACE_SCOPES;\n\t\tthis.configurationFolder = uriIdentityService.extUri.joinPath(\n\t\t\tworkspaceFolder.uri,\n\t\t\tconfigFolderRelativePath,\n\t\t);\n\t\tthis.cachedFolderConfiguration = new CachedFolderConfiguration(\n\t\t\tworkspaceFolder.uri,\n\t\t\tconfigFolderRelativePath,\n\t\t\t{ scopes: this.scopes, skipRestricted: this.isUntrusted() },\n\t\t\tconfigurationCache,\n\t\t\tlogService,\n\t\t);\n\t\tif (\n\t\t\tuseCache &&\n\t\t\tthis.configurationCache.needsCaching(workspaceFolder.uri)\n\t\t) {\n\t\t\tthis.folderConfiguration = this.cachedFolderConfiguration;\n\t\t\twhenProviderRegistered(workspaceFolder.uri, fileService).then(\n\t\t\t\t() => {\n\t\t\t\t\tthis.folderConfiguration = this._register(\n\t\t\t\t\t\tthis.createFileServiceBasedConfiguration(\n\t\t\t\t\t\t\tfileService,\n\t\t\t\t\t\t\turiIdentityService,\n\t\t\t\t\t\t\tlogService,\n\t\t\t\t\t\t),\n\t\t\t\t\t);\n\t\t\t\t\tthis._register(\n\t\t\t\t\t\tthis.folderConfiguration.onDidChange((e) =>\n\t\t\t\t\t\t\tthis.onDidFolderConfigurationChange(),\n\t\t\t\t\t\t),\n\t\t\t\t\t);\n\t\t\t\t\tthis.onDidFolderConfigurationChange();\n\t\t\t\t},\n\t\t\t);\n\t\t} else {\n\t\t\tthis.folderConfiguration = this._register(\n\t\t\t\tthis.createFileServiceBasedConfiguration(\n\t\t\t\t\tfileService,\n\t\t\t\t\turiIdentityService,\n\t\t\t\t\tlogService,\n\t\t\t\t),\n\t\t\t);\n\t\t\tthis._register(\n\t\t\t\tthis.folderConfiguration.onDidChange((e) =>\n\t\t\t\t\tthis.onDidFolderConfigurationChange(),\n\t\t\t\t),\n\t\t\t);\n\t\t}\n\t}\n\n\tloadConfiguration(): Promise<ConfigurationModel> {\n\t\treturn this.folderConfiguration.loadConfiguration();\n\t}\n\n\tupdateWorkspaceTrust(trusted: boolean): ConfigurationModel {\n\t\tthis.workspaceTrusted = trusted;\n\t\treturn this.reparse();\n\t}\n\n\treparse(): ConfigurationModel {\n\t\tconst configurationModel = this.folderConfiguration.reparse({\n\t\t\tscopes: this.scopes,\n\t\t\tskipRestricted: this.isUntrusted(),\n\t\t});\n\t\tthis.updateCache();\n\t\treturn configurationModel;\n\t}\n\n\tgetRestrictedSettings(): string[] {\n\t\treturn this.folderConfiguration.getRestrictedSettings();\n\t}\n\n\tprivate isUntrusted(): boolean {\n\t\treturn !this.workspaceTrusted;\n\t}\n\n\tprivate onDidFolderConfigurationChange(): void {\n\t\tthis.updateCache();\n\t\tthis._onDidChange.fire();\n\t}\n\n\tprivate createFileServiceBasedConfiguration(\n\t\tfileService: IFileService,\n\t\turiIdentityService: IUriIdentityService,\n\t\tlogService: ILogService,\n\t) {\n\t\tconst settingsResource = uriIdentityService.extUri.joinPath(\n\t\t\tthis.configurationFolder,\n\t\t\t`${FOLDER_SETTINGS_NAME}.json`,\n\t\t);\n\t\tconst standAloneConfigurationResources: [string, URI][] = [\n\t\t\tTASKS_CONFIGURATION_KEY,\n\t\t\tLAUNCH_CONFIGURATION_KEY,\n\t\t].map((name) => [\n\t\t\tname,\n\t\t\turiIdentityService.extUri.joinPath(\n\t\t\t\tthis.configurationFolder,\n\t\t\t\t`${name}.json`,\n\t\t\t),\n\t\t]);\n\t\treturn new FileServiceBasedConfiguration(\n\t\t\tthis.configurationFolder.toString(),\n\t\t\tsettingsResource,\n\t\t\tstandAloneConfigurationResources,\n\t\t\t{ scopes: this.scopes, skipRestricted: this.isUntrusted() },\n\t\t\tfileService,\n\t\t\turiIdentityService,\n\t\t\tlogService,\n\t\t);\n\t}\n\n\tprivate async updateCache(): Promise<void> {\n\t\tif (\n\t\t\tthis.configurationCache.needsCaching(this.configurationFolder) &&\n\t\t\tthis.folderConfiguration instanceof FileServiceBasedConfiguration\n\t\t) {\n\t\t\tconst [settingsContent, standAloneConfigurationContents] =\n\t\t\t\tawait this.folderConfiguration.resolveContents();\n\t\t\tthis.cachedFolderConfiguration.updateConfiguration(\n\t\t\t\tsettingsContent,\n\t\t\t\tstandAloneConfigurationContents,\n\t\t\t);\n\t\t}\n\t}\n}\n"],
  "mappings": "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",
  "names": ["configurationModel"]
}
