{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/configuration/browser/configuration.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { URI } from '../../../../base/common/uri.js';\nimport { Event, Emitter } from '../../../../base/common/event.js';\nimport * as errors from '../../../../base/common/errors.js';\nimport { Disposable, IDisposable, dispose, toDisposable, MutableDisposable, combinedDisposable, DisposableStore } from '../../../../base/common/lifecycle.js';\nimport { RunOnceScheduler } from '../../../../base/common/async.js';\nimport { FileChangeType, FileChangesEvent, IFileService, whenProviderRegistered, FileOperationError, FileOperationResult, FileOperation, FileOperationEvent } from '../../../../platform/files/common/files.js';\nimport { ConfigurationModel, ConfigurationModelParser, ConfigurationParseOptions, UserSettings } from '../../../../platform/configuration/common/configurationModels.js';\nimport { WorkspaceConfigurationModelParser, StandaloneConfigurationModelParser } from '../common/configurationModels.js';\nimport { TASKS_CONFIGURATION_KEY, FOLDER_SETTINGS_NAME, LAUNCH_CONFIGURATION_KEY, IConfigurationCache, ConfigurationKey, REMOTE_MACHINE_SCOPES, FOLDER_SCOPES, WORKSPACE_SCOPES, APPLY_ALL_PROFILES_SETTING } from '../common/configuration.js';\nimport { IStoredWorkspaceFolder } from '../../../../platform/workspaces/common/workspaces.js';\nimport { WorkbenchState, IWorkspaceFolder, IWorkspaceIdentifier } from '../../../../platform/workspace/common/workspace.js';\nimport { ConfigurationScope, Extensions, IConfigurationRegistry, OVERRIDE_PROPERTY_REGEX } from '../../../../platform/configuration/common/configurationRegistry.js';\nimport { equals } from '../../../../base/common/objects.js';\nimport { IRemoteAgentService } from '../../remote/common/remoteAgentService.js';\nimport { hash } from '../../../../base/common/hash.js';\nimport { IUriIdentityService } from '../../../../platform/uriIdentity/common/uriIdentity.js';\nimport { ILogService } from '../../../../platform/log/common/log.js';\nimport { IStringDictionary } from '../../../../base/common/collections.js';\nimport { joinPath } from '../../../../base/common/resources.js';\nimport { Registry } from '../../../../platform/registry/common/platform.js';\nimport { IBrowserWorkbenchEnvironmentService } from '../../environment/browser/environmentService.js';\nimport { isEmptyObject, isObject } from '../../../../base/common/types.js';\nimport { DefaultConfiguration as BaseDefaultConfiguration } from '../../../../platform/configuration/common/configurations.js';\nimport { IJSONEditingService } from '../common/jsonEditing.js';\nimport { IUserDataProfilesService } from '../../../../platform/userDataProfile/common/userDataProfile.js';\n\nexport class DefaultConfiguration extends BaseDefaultConfiguration {\n\n\tstatic readonly DEFAULT_OVERRIDES_CACHE_EXISTS_KEY = 'DefaultOverridesCacheExists';\n\n\tprivate readonly configurationRegistry = Registry.as<IConfigurationRegistry>(Extensions.Configuration);\n\tprivate cachedConfigurationDefaultsOverrides: IStringDictionary<any> = {};\n\tprivate readonly cacheKey: ConfigurationKey = { type: 'defaults', key: 'configurationDefaultsOverrides' };\n\n\tprivate updateCache: boolean = false;\n\n\tconstructor(\n\t\tprivate readonly configurationCache: IConfigurationCache,\n\t\tenvironmentService: IBrowserWorkbenchEnvironmentService,\n\t\tlogService: ILogService,\n\t) {\n\t\tsuper(logService);\n\t\tif (environmentService.options?.configurationDefaults) {\n\t\t\tthis.configurationRegistry.registerDefaultConfigurations([{ overrides: environmentService.options.configurationDefaults }]);\n\t\t}\n\t}\n\n\tprotected override getConfigurationDefaultOverrides(): IStringDictionary<any> {\n\t\treturn this.cachedConfigurationDefaultsOverrides;\n\t}\n\n\toverride async initialize(): Promise<ConfigurationModel> {\n\t\tawait this.initializeCachedConfigurationDefaultsOverrides();\n\t\treturn super.initialize();\n\t}\n\n\toverride reload(): ConfigurationModel {\n\t\tthis.updateCache = true;\n\t\tthis.cachedConfigurationDefaultsOverrides = {};\n\t\tthis.updateCachedConfigurationDefaultsOverrides();\n\t\treturn super.reload();\n\t}\n\n\thasCachedConfigurationDefaultsOverrides(): boolean {\n\t\treturn !isEmptyObject(this.cachedConfigurationDefaultsOverrides);\n\t}\n\n\tprivate initiaizeCachedConfigurationDefaultsOverridesPromise: Promise<void> | undefined;\n\tprivate initializeCachedConfigurationDefaultsOverrides(): Promise<void> {\n\t\tif (!this.initiaizeCachedConfigurationDefaultsOverridesPromise) {\n\t\t\tthis.initiaizeCachedConfigurationDefaultsOverridesPromise = (async () => {\n\t\t\t\ttry {\n\t\t\t\t\t// Read only when the cache exists\n\t\t\t\t\tif (localStorage.getItem(DefaultConfiguration.DEFAULT_OVERRIDES_CACHE_EXISTS_KEY)) {\n\t\t\t\t\t\tconst content = await this.configurationCache.read(this.cacheKey);\n\t\t\t\t\t\tif (content) {\n\t\t\t\t\t\t\tthis.cachedConfigurationDefaultsOverrides = JSON.parse(content);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} catch (error) { /* ignore */ }\n\t\t\t\tthis.cachedConfigurationDefaultsOverrides = isObject(this.cachedConfigurationDefaultsOverrides) ? this.cachedConfigurationDefaultsOverrides : {};\n\t\t\t})();\n\t\t}\n\t\treturn this.initiaizeCachedConfigurationDefaultsOverridesPromise;\n\t}\n\n\tprotected override onDidUpdateConfiguration(properties: string[], defaultsOverrides?: boolean): void {\n\t\tsuper.onDidUpdateConfiguration(properties, defaultsOverrides);\n\t\tif (defaultsOverrides) {\n\t\t\tthis.updateCachedConfigurationDefaultsOverrides();\n\t\t}\n\t}\n\n\tprivate async updateCachedConfigurationDefaultsOverrides(): Promise<void> {\n\t\tif (!this.updateCache) {\n\t\t\treturn;\n\t\t}\n\t\tconst cachedConfigurationDefaultsOverrides: IStringDictionary<any> = {};\n\t\tconst configurationDefaultsOverrides = this.configurationRegistry.getConfigurationDefaultsOverrides();\n\t\tfor (const [key, value] of configurationDefaultsOverrides) {\n\t\t\tif (!OVERRIDE_PROPERTY_REGEX.test(key) && value.value !== undefined) {\n\t\t\t\tcachedConfigurationDefaultsOverrides[key] = value.value;\n\t\t\t}\n\t\t}\n\t\ttry {\n\t\t\tif (Object.keys(cachedConfigurationDefaultsOverrides).length) {\n\t\t\t\tlocalStorage.setItem(DefaultConfiguration.DEFAULT_OVERRIDES_CACHE_EXISTS_KEY, 'yes');\n\t\t\t\tawait this.configurationCache.write(this.cacheKey, JSON.stringify(cachedConfigurationDefaultsOverrides));\n\t\t\t} else {\n\t\t\t\tlocalStorage.removeItem(DefaultConfiguration.DEFAULT_OVERRIDES_CACHE_EXISTS_KEY);\n\t\t\t\tawait this.configurationCache.remove(this.cacheKey);\n\t\t\t}\n\t\t} catch (error) {/* Ignore error */ }\n\t}\n\n}\n\nexport class ApplicationConfiguration extends UserSettings {\n\n\tprivate readonly _onDidChangeConfiguration: Emitter<ConfigurationModel> = this._register(new Emitter<ConfigurationModel>());\n\treadonly onDidChangeConfiguration: Event<ConfigurationModel> = this._onDidChangeConfiguration.event;\n\n\tprivate readonly reloadConfigurationScheduler: RunOnceScheduler;\n\n\tconstructor(\n\t\tuserDataProfilesService: IUserDataProfilesService,\n\t\tfileService: IFileService,\n\t\turiIdentityService: IUriIdentityService,\n\t\tlogService: ILogService,\n\t) {\n\t\tsuper(userDataProfilesService.defaultProfile.settingsResource, { scopes: [ConfigurationScope.APPLICATION] }, uriIdentityService.extUri, fileService, logService);\n\t\tthis._register(this.onDidChange(() => this.reloadConfigurationScheduler.schedule()));\n\t\tthis.reloadConfigurationScheduler = this._register(new RunOnceScheduler(() => this.loadConfiguration().then(configurationModel => this._onDidChangeConfiguration.fire(configurationModel)), 50));\n\t}\n\n\tasync initialize(): Promise<ConfigurationModel> {\n\t\treturn this.loadConfiguration();\n\t}\n\n\toverride async loadConfiguration(): Promise<ConfigurationModel> {\n\t\tconst model = await super.loadConfiguration();\n\t\tconst value = model.getValue<string[]>(APPLY_ALL_PROFILES_SETTING);\n\t\tconst allProfilesSettings = Array.isArray(value) ? value : [];\n\t\treturn this.parseOptions.include || allProfilesSettings.length\n\t\t\t? this.reparse({ ...this.parseOptions, include: allProfilesSettings })\n\t\t\t: model;\n\t}\n}\n\nexport class UserConfiguration extends Disposable {\n\n\tprivate readonly _onDidChangeConfiguration: Emitter<ConfigurationModel> = this._register(new Emitter<ConfigurationModel>());\n\treadonly onDidChangeConfiguration: Event<ConfigurationModel> = this._onDidChangeConfiguration.event;\n\n\tprivate readonly userConfiguration = this._register(new MutableDisposable<UserSettings | FileServiceBasedConfiguration>());\n\tprivate readonly userConfigurationChangeDisposable = this._register(new MutableDisposable<IDisposable>());\n\tprivate readonly reloadConfigurationScheduler: RunOnceScheduler;\n\n\tget hasTasksLoaded(): boolean { return this.userConfiguration.value instanceof FileServiceBasedConfiguration; }\n\n\tconstructor(\n\t\tprivate settingsResource: URI,\n\t\tprivate tasksResource: URI | undefined,\n\t\tprivate configurationParseOptions: ConfigurationParseOptions,\n\t\tprivate readonly fileService: IFileService,\n\t\tprivate readonly uriIdentityService: IUriIdentityService,\n\t\tprivate readonly logService: ILogService,\n\t) {\n\t\tsuper();\n\t\tthis.userConfiguration.value = new UserSettings(settingsResource, this.configurationParseOptions, uriIdentityService.extUri, this.fileService, logService);\n\t\tthis.userConfigurationChangeDisposable.value = this.userConfiguration.value.onDidChange(() => this.reloadConfigurationScheduler.schedule());\n\t\tthis.reloadConfigurationScheduler = this._register(new RunOnceScheduler(() => this.userConfiguration.value!.loadConfiguration().then(configurationModel => this._onDidChangeConfiguration.fire(configurationModel)), 50));\n\t}\n\n\tasync reset(settingsResource: URI, tasksResource: URI | undefined, configurationParseOptions: ConfigurationParseOptions): Promise<ConfigurationModel> {\n\t\tthis.settingsResource = settingsResource;\n\t\tthis.tasksResource = tasksResource;\n\t\tthis.configurationParseOptions = configurationParseOptions;\n\t\treturn this.doReset();\n\t}\n\n\tprivate async doReset(settingsConfiguration?: ConfigurationModel): Promise<ConfigurationModel> {\n\t\tconst folder = this.uriIdentityService.extUri.dirname(this.settingsResource);\n\t\tconst standAloneConfigurationResources: [string, URI][] = this.tasksResource ? [[TASKS_CONFIGURATION_KEY, this.tasksResource]] : [];\n\t\tconst fileServiceBasedConfiguration = new FileServiceBasedConfiguration(folder.toString(), this.settingsResource, standAloneConfigurationResources, this.configurationParseOptions, this.fileService, this.uriIdentityService, this.logService);\n\t\tconst configurationModel = await fileServiceBasedConfiguration.loadConfiguration(settingsConfiguration);\n\t\tthis.userConfiguration.value = fileServiceBasedConfiguration;\n\n\t\t// Check for value because userConfiguration might have been disposed.\n\t\tif (this.userConfigurationChangeDisposable.value) {\n\t\t\tthis.userConfigurationChangeDisposable.value = this.userConfiguration.value.onDidChange(() => this.reloadConfigurationScheduler.schedule());\n\t\t}\n\n\t\treturn configurationModel;\n\t}\n\n\tasync initialize(): Promise<ConfigurationModel> {\n\t\treturn this.userConfiguration.value!.loadConfiguration();\n\t}\n\n\tasync reload(settingsConfiguration?: ConfigurationModel): Promise<ConfigurationModel> {\n\t\tif (this.hasTasksLoaded) {\n\t\t\treturn this.userConfiguration.value!.loadConfiguration();\n\t\t}\n\t\treturn this.doReset(settingsConfiguration);\n\t}\n\n\treparse(parseOptions?: Partial<ConfigurationParseOptions>): ConfigurationModel {\n\t\tthis.configurationParseOptions = { ...this.configurationParseOptions, ...parseOptions };\n\t\treturn this.userConfiguration.value!.reparse(this.configurationParseOptions);\n\t}\n\n\tgetRestrictedSettings(): string[] {\n\t\treturn this.userConfiguration.value!.getRestrictedSettings();\n\t}\n}\n\nclass FileServiceBasedConfiguration extends Disposable {\n\n\tprivate readonly allResources: URI[];\n\tprivate _folderSettingsModelParser: ConfigurationModelParser;\n\tprivate _folderSettingsParseOptions: ConfigurationParseOptions;\n\tprivate _standAloneConfigurations: ConfigurationModel[];\n\tprivate _cache: ConfigurationModel;\n\n\tprivate readonly _onDidChange: Emitter<void> = this._register(new Emitter<void>());\n\treadonly onDidChange: Event<void> = this._onDidChange.event;\n\n\tconstructor(\n\t\tname: string,\n\t\tprivate readonly settingsResource: URI,\n\t\tprivate readonly standAloneConfigurationResources: [string, URI][],\n\t\tconfigurationParseOptions: ConfigurationParseOptions,\n\t\tprivate readonly fileService: IFileService,\n\t\tprivate readonly uriIdentityService: IUriIdentityService,\n\t\tprivate readonly logService: ILogService,\n\t) {\n\t\tsuper();\n\t\tthis.allResources = [this.settingsResource, ...this.standAloneConfigurationResources.map(([, resource]) => resource)];\n\t\tthis._register(combinedDisposable(...this.allResources.map(resource => combinedDisposable(\n\t\t\tthis.fileService.watch(uriIdentityService.extUri.dirname(resource)),\n\t\t\t// Also listen to the resource incase the resource is a symlink - https://github.com/microsoft/vscode/issues/118134\n\t\t\tthis.fileService.watch(resource)\n\t\t))));\n\n\t\tthis._folderSettingsModelParser = new ConfigurationModelParser(name, logService);\n\t\tthis._folderSettingsParseOptions = configurationParseOptions;\n\t\tthis._standAloneConfigurations = [];\n\t\tthis._cache = ConfigurationModel.createEmptyModel(this.logService);\n\n\t\tthis._register(Event.debounce(\n\t\t\tEvent.any(\n\t\t\t\tEvent.filter(this.fileService.onDidFilesChange, e => this.handleFileChangesEvent(e)),\n\t\t\t\tEvent.filter(this.fileService.onDidRunOperation, e => this.handleFileOperationEvent(e))\n\t\t\t), () => undefined, 100)(() => this._onDidChange.fire()));\n\t}\n\n\tasync resolveContents(donotResolveSettings?: boolean): Promise<[string | undefined, [string, string | undefined][]]> {\n\n\t\tconst resolveContents = async (resources: URI[]): Promise<(string | undefined)[]> => {\n\t\t\treturn Promise.all(resources.map(async resource => {\n\t\t\t\ttry {\n\t\t\t\t\tconst content = await this.fileService.readFile(resource, { atomic: true });\n\t\t\t\t\treturn content.value.toString();\n\t\t\t\t} catch (error) {\n\t\t\t\t\tthis.logService.trace(`Error while resolving configuration file '${resource.toString()}': ${errors.getErrorMessage(error)}`);\n\t\t\t\t\tif ((<FileOperationError>error).fileOperationResult !== FileOperationResult.FILE_NOT_FOUND\n\t\t\t\t\t\t&& (<FileOperationError>error).fileOperationResult !== FileOperationResult.FILE_NOT_DIRECTORY) {\n\t\t\t\t\t\tthis.logService.error(error);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn '{}';\n\t\t\t}));\n\t\t};\n\n\t\tconst [[settingsContent], standAloneConfigurationContents] = await Promise.all([\n\t\t\tdonotResolveSettings ? Promise.resolve([undefined]) : resolveContents([this.settingsResource]),\n\t\t\tresolveContents(this.standAloneConfigurationResources.map(([, resource]) => resource)),\n\t\t]);\n\n\t\treturn [settingsContent, standAloneConfigurationContents.map((content, index) => ([this.standAloneConfigurationResources[index][0], content]))];\n\t}\n\n\tasync loadConfiguration(settingsConfiguration?: ConfigurationModel): Promise<ConfigurationModel> {\n\n\t\tconst [settingsContent, standAloneConfigurationContents] = await this.resolveContents(!!settingsConfiguration);\n\n\t\t// reset\n\t\tthis._standAloneConfigurations = [];\n\t\tthis._folderSettingsModelParser.parse('', this._folderSettingsParseOptions);\n\n\t\t// parse\n\t\tif (settingsContent !== undefined) {\n\t\t\tthis._folderSettingsModelParser.parse(settingsContent, this._folderSettingsParseOptions);\n\t\t}\n\t\tfor (let index = 0; index < standAloneConfigurationContents.length; index++) {\n\t\t\tconst contents = standAloneConfigurationContents[index][1];\n\t\t\tif (contents !== undefined) {\n\t\t\t\tconst standAloneConfigurationModelParser = new StandaloneConfigurationModelParser(this.standAloneConfigurationResources[index][1].toString(), this.standAloneConfigurationResources[index][0], this.logService);\n\t\t\t\tstandAloneConfigurationModelParser.parse(contents);\n\t\t\t\tthis._standAloneConfigurations.push(standAloneConfigurationModelParser.configurationModel);\n\t\t\t}\n\t\t}\n\n\t\t// Consolidate (support *.json files in the workspace settings folder)\n\t\tthis.consolidate(settingsConfiguration);\n\n\t\treturn this._cache;\n\t}\n\n\tgetRestrictedSettings(): string[] {\n\t\treturn this._folderSettingsModelParser.restrictedConfigurations;\n\t}\n\n\treparse(configurationParseOptions: ConfigurationParseOptions): ConfigurationModel {\n\t\tconst oldContents = this._folderSettingsModelParser.configurationModel.contents;\n\t\tthis._folderSettingsParseOptions = configurationParseOptions;\n\t\tthis._folderSettingsModelParser.reparse(this._folderSettingsParseOptions);\n\t\tif (!equals(oldContents, this._folderSettingsModelParser.configurationModel.contents)) {\n\t\t\tthis.consolidate();\n\t\t}\n\t\treturn this._cache;\n\t}\n\n\tprivate consolidate(settingsConfiguration?: ConfigurationModel): void {\n\t\tthis._cache = (settingsConfiguration ?? this._folderSettingsModelParser.configurationModel).merge(...this._standAloneConfigurations);\n\t}\n\n\tprivate handleFileChangesEvent(event: FileChangesEvent): boolean {\n\t\t// One of the resources has changed\n\t\tif (this.allResources.some(resource => event.contains(resource))) {\n\t\t\treturn true;\n\t\t}\n\t\t// One of the resource's parent got deleted\n\t\tif (this.allResources.some(resource => event.contains(this.uriIdentityService.extUri.dirname(resource), FileChangeType.DELETED))) {\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\n\tprivate handleFileOperationEvent(event: FileOperationEvent): boolean {\n\t\t// One of the resources has changed\n\t\tif ((event.isOperation(FileOperation.CREATE) || event.isOperation(FileOperation.COPY) || event.isOperation(FileOperation.DELETE) || event.isOperation(FileOperation.WRITE))\n\t\t\t&& this.allResources.some(resource => this.uriIdentityService.extUri.isEqual(event.resource, resource))) {\n\t\t\treturn true;\n\t\t}\n\t\t// One of the resource's parent got deleted\n\t\tif (event.isOperation(FileOperation.DELETE) && this.allResources.some(resource => this.uriIdentityService.extUri.isEqual(event.resource, this.uriIdentityService.extUri.dirname(resource)))) {\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\n}\n\nexport class RemoteUserConfiguration extends Disposable {\n\n\tprivate readonly _cachedConfiguration: CachedRemoteUserConfiguration;\n\tprivate readonly _fileService: IFileService;\n\tprivate _userConfiguration: FileServiceBasedRemoteUserConfiguration | CachedRemoteUserConfiguration;\n\tprivate _userConfigurationInitializationPromise: Promise<ConfigurationModel> | null = null;\n\n\tprivate readonly _onDidChangeConfiguration: Emitter<ConfigurationModel> = this._register(new Emitter<ConfigurationModel>());\n\tpublic readonly onDidChangeConfiguration: Event<ConfigurationModel> = this._onDidChangeConfiguration.event;\n\n\tprivate readonly _onDidInitialize = this._register(new Emitter<ConfigurationModel>());\n\tpublic readonly onDidInitialize = this._onDidInitialize.event;\n\n\tconstructor(\n\t\tremoteAuthority: string,\n\t\tconfigurationCache: IConfigurationCache,\n\t\tfileService: IFileService,\n\t\turiIdentityService: IUriIdentityService,\n\t\tremoteAgentService: IRemoteAgentService,\n\t\tlogService: ILogService\n\t) {\n\t\tsuper();\n\t\tthis._fileService = fileService;\n\t\tthis._userConfiguration = this._cachedConfiguration = new CachedRemoteUserConfiguration(remoteAuthority, configurationCache, { scopes: REMOTE_MACHINE_SCOPES }, logService);\n\t\tremoteAgentService.getEnvironment().then(async environment => {\n\t\t\tif (environment) {\n\t\t\t\tconst userConfiguration = this._register(new FileServiceBasedRemoteUserConfiguration(environment.settingsPath, { scopes: REMOTE_MACHINE_SCOPES }, this._fileService, uriIdentityService, logService));\n\t\t\t\tthis._register(userConfiguration.onDidChangeConfiguration(configurationModel => this.onDidUserConfigurationChange(configurationModel)));\n\t\t\t\tthis._userConfigurationInitializationPromise = userConfiguration.initialize();\n\t\t\t\tconst configurationModel = await this._userConfigurationInitializationPromise;\n\t\t\t\tthis._userConfiguration.dispose();\n\t\t\t\tthis._userConfiguration = userConfiguration;\n\t\t\t\tthis.onDidUserConfigurationChange(configurationModel);\n\t\t\t\tthis._onDidInitialize.fire(configurationModel);\n\t\t\t}\n\t\t});\n\t}\n\n\tasync initialize(): Promise<ConfigurationModel> {\n\t\tif (this._userConfiguration instanceof FileServiceBasedRemoteUserConfiguration) {\n\t\t\treturn this._userConfiguration.initialize();\n\t\t}\n\n\t\t// Initialize cached configuration\n\t\tlet configurationModel = await this._userConfiguration.initialize();\n\t\tif (this._userConfigurationInitializationPromise) {\n\t\t\t// Use user configuration\n\t\t\tconfigurationModel = await this._userConfigurationInitializationPromise;\n\t\t\tthis._userConfigurationInitializationPromise = null;\n\t\t}\n\n\t\treturn configurationModel;\n\t}\n\n\treload(): Promise<ConfigurationModel> {\n\t\treturn this._userConfiguration.reload();\n\t}\n\n\treparse(): ConfigurationModel {\n\t\treturn this._userConfiguration.reparse({ scopes: REMOTE_MACHINE_SCOPES });\n\t}\n\n\tgetRestrictedSettings(): string[] {\n\t\treturn this._userConfiguration.getRestrictedSettings();\n\t}\n\n\tprivate onDidUserConfigurationChange(configurationModel: ConfigurationModel): void {\n\t\tthis.updateCache();\n\t\tthis._onDidChangeConfiguration.fire(configurationModel);\n\t}\n\n\tprivate async updateCache(): Promise<void> {\n\t\tif (this._userConfiguration instanceof FileServiceBasedRemoteUserConfiguration) {\n\t\t\tlet content: string | undefined;\n\t\t\ttry {\n\t\t\t\tcontent = await this._userConfiguration.resolveContent();\n\t\t\t} catch (error) {\n\t\t\t\tif ((<FileOperationError>error).fileOperationResult !== FileOperationResult.FILE_NOT_FOUND) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t\tawait this._cachedConfiguration.updateConfiguration(content);\n\t\t}\n\t}\n\n}\n\nclass FileServiceBasedRemoteUserConfiguration extends Disposable {\n\n\tprivate readonly parser: ConfigurationModelParser;\n\tprivate parseOptions: ConfigurationParseOptions;\n\tprivate readonly reloadConfigurationScheduler: RunOnceScheduler;\n\tprotected readonly _onDidChangeConfiguration: Emitter<ConfigurationModel> = this._register(new Emitter<ConfigurationModel>());\n\treadonly onDidChangeConfiguration: Event<ConfigurationModel> = this._onDidChangeConfiguration.event;\n\n\tprivate readonly fileWatcherDisposable = this._register(new MutableDisposable());\n\tprivate readonly directoryWatcherDisposable = this._register(new MutableDisposable());\n\n\tconstructor(\n\t\tprivate readonly configurationResource: URI,\n\t\tconfigurationParseOptions: ConfigurationParseOptions,\n\t\tprivate readonly fileService: IFileService,\n\t\tprivate readonly uriIdentityService: IUriIdentityService,\n\t\tprivate readonly logService: ILogService,\n\t) {\n\t\tsuper();\n\n\t\tthis.parser = new ConfigurationModelParser(this.configurationResource.toString(), logService);\n\t\tthis.parseOptions = configurationParseOptions;\n\t\tthis._register(fileService.onDidFilesChange(e => this.handleFileChangesEvent(e)));\n\t\tthis._register(fileService.onDidRunOperation(e => this.handleFileOperationEvent(e)));\n\t\tthis.reloadConfigurationScheduler = this._register(new RunOnceScheduler(() => this.reload().then(configurationModel => this._onDidChangeConfiguration.fire(configurationModel)), 50));\n\t\tthis._register(toDisposable(() => {\n\t\t\tthis.stopWatchingResource();\n\t\t\tthis.stopWatchingDirectory();\n\t\t}));\n\t}\n\n\tprivate watchResource(): void {\n\t\tthis.fileWatcherDisposable.value = this.fileService.watch(this.configurationResource);\n\t}\n\n\tprivate stopWatchingResource(): void {\n\t\tthis.fileWatcherDisposable.value = undefined;\n\t}\n\n\tprivate watchDirectory(): void {\n\t\tconst directory = this.uriIdentityService.extUri.dirname(this.configurationResource);\n\t\tthis.directoryWatcherDisposable.value = this.fileService.watch(directory);\n\t}\n\n\tprivate stopWatchingDirectory(): void {\n\t\tthis.directoryWatcherDisposable.value = undefined;\n\t}\n\n\tasync initialize(): Promise<ConfigurationModel> {\n\t\tconst exists = await this.fileService.exists(this.configurationResource);\n\t\tthis.onResourceExists(exists);\n\t\treturn this.reload();\n\t}\n\n\tasync resolveContent(): Promise<string> {\n\t\tconst content = await this.fileService.readFile(this.configurationResource, { atomic: true });\n\t\treturn content.value.toString();\n\t}\n\n\tasync reload(): Promise<ConfigurationModel> {\n\t\ttry {\n\t\t\tconst content = await this.resolveContent();\n\t\t\tthis.parser.parse(content, this.parseOptions);\n\t\t\treturn this.parser.configurationModel;\n\t\t} catch (e) {\n\t\t\treturn ConfigurationModel.createEmptyModel(this.logService);\n\t\t}\n\t}\n\n\treparse(configurationParseOptions: ConfigurationParseOptions): ConfigurationModel {\n\t\tthis.parseOptions = configurationParseOptions;\n\t\tthis.parser.reparse(this.parseOptions);\n\t\treturn this.parser.configurationModel;\n\t}\n\n\tgetRestrictedSettings(): string[] {\n\t\treturn this.parser.restrictedConfigurations;\n\t}\n\n\tprivate handleFileChangesEvent(event: FileChangesEvent): void {\n\n\t\t// Find changes that affect the resource\n\t\tlet affectedByChanges = event.contains(this.configurationResource, FileChangeType.UPDATED);\n\t\tif (event.contains(this.configurationResource, FileChangeType.ADDED)) {\n\t\t\taffectedByChanges = true;\n\t\t\tthis.onResourceExists(true);\n\t\t} else if (event.contains(this.configurationResource, FileChangeType.DELETED)) {\n\t\t\taffectedByChanges = true;\n\t\t\tthis.onResourceExists(false);\n\t\t}\n\n\t\tif (affectedByChanges) {\n\t\t\tthis.reloadConfigurationScheduler.schedule();\n\t\t}\n\t}\n\n\tprivate handleFileOperationEvent(event: FileOperationEvent): void {\n\t\tif ((event.isOperation(FileOperation.CREATE) || event.isOperation(FileOperation.COPY) || event.isOperation(FileOperation.DELETE) || event.isOperation(FileOperation.WRITE))\n\t\t\t&& this.uriIdentityService.extUri.isEqual(event.resource, this.configurationResource)) {\n\t\t\tthis.reloadConfigurationScheduler.schedule();\n\t\t}\n\t}\n\n\tprivate onResourceExists(exists: boolean): void {\n\t\tif (exists) {\n\t\t\tthis.stopWatchingDirectory();\n\t\t\tthis.watchResource();\n\t\t} else {\n\t\t\tthis.stopWatchingResource();\n\t\t\tthis.watchDirectory();\n\t\t}\n\t}\n}\n\nclass CachedRemoteUserConfiguration extends Disposable {\n\n\tprivate readonly _onDidChange: Emitter<ConfigurationModel> = this._register(new Emitter<ConfigurationModel>());\n\treadonly onDidChange: Event<ConfigurationModel> = this._onDidChange.event;\n\n\tprivate readonly key: ConfigurationKey;\n\tprivate readonly parser: ConfigurationModelParser;\n\tprivate parseOptions: ConfigurationParseOptions;\n\tprivate configurationModel: ConfigurationModel;\n\n\tconstructor(\n\t\tremoteAuthority: string,\n\t\tprivate readonly configurationCache: IConfigurationCache,\n\t\tconfigurationParseOptions: ConfigurationParseOptions,\n\t\tlogService: ILogService,\n\t) {\n\t\tsuper();\n\t\tthis.key = { type: 'user', key: remoteAuthority };\n\t\tthis.parser = new ConfigurationModelParser('CachedRemoteUserConfiguration', logService);\n\t\tthis.parseOptions = configurationParseOptions;\n\t\tthis.configurationModel = ConfigurationModel.createEmptyModel(logService);\n\t}\n\n\tgetConfigurationModel(): ConfigurationModel {\n\t\treturn this.configurationModel;\n\t}\n\n\tinitialize(): Promise<ConfigurationModel> {\n\t\treturn this.reload();\n\t}\n\n\treparse(configurationParseOptions: ConfigurationParseOptions): ConfigurationModel {\n\t\tthis.parseOptions = configurationParseOptions;\n\t\tthis.parser.reparse(this.parseOptions);\n\t\tthis.configurationModel = this.parser.configurationModel;\n\t\treturn this.configurationModel;\n\t}\n\n\tgetRestrictedSettings(): string[] {\n\t\treturn this.parser.restrictedConfigurations;\n\t}\n\n\tasync reload(): Promise<ConfigurationModel> {\n\t\ttry {\n\t\t\tconst content = await this.configurationCache.read(this.key);\n\t\t\tconst parsed: { content: string } = JSON.parse(content);\n\t\t\tif (parsed.content) {\n\t\t\t\tthis.parser.parse(parsed.content, this.parseOptions);\n\t\t\t\tthis.configurationModel = this.parser.configurationModel;\n\t\t\t}\n\t\t} catch (e) { /* Ignore error */ }\n\t\treturn this.configurationModel;\n\t}\n\n\tasync updateConfiguration(content: string | undefined): Promise<void> {\n\t\tif (content) {\n\t\t\treturn this.configurationCache.write(this.key, JSON.stringify({ content }));\n\t\t} else {\n\t\t\treturn this.configurationCache.remove(this.key);\n\t\t}\n\t}\n}\n\nexport class WorkspaceConfiguration extends Disposable {\n\n\tprivate readonly _cachedConfiguration: CachedWorkspaceConfiguration;\n\tprivate _workspaceConfiguration: CachedWorkspaceConfiguration | FileServiceBasedWorkspaceConfiguration;\n\tprivate readonly _workspaceConfigurationDisposables = this._register(new DisposableStore());\n\tprivate _workspaceIdentifier: IWorkspaceIdentifier | null = null;\n\tprivate _isWorkspaceTrusted: boolean = false;\n\n\tprivate readonly _onDidUpdateConfiguration = this._register(new Emitter<boolean>());\n\tpublic readonly onDidUpdateConfiguration = this._onDidUpdateConfiguration.event;\n\n\tprivate _initialized: boolean = false;\n\tget initialized(): boolean { return this._initialized; }\n\tconstructor(\n\t\tprivate readonly configurationCache: IConfigurationCache,\n\t\tprivate readonly fileService: IFileService,\n\t\tprivate readonly uriIdentityService: IUriIdentityService,\n\t\tprivate readonly logService: ILogService,\n\t) {\n\t\tsuper();\n\t\tthis.fileService = fileService;\n\t\tthis._workspaceConfiguration = this._cachedConfiguration = new CachedWorkspaceConfiguration(configurationCache, logService);\n\t}\n\n\tasync initialize(workspaceIdentifier: IWorkspaceIdentifier, workspaceTrusted: boolean): Promise<void> {\n\t\tthis._workspaceIdentifier = workspaceIdentifier;\n\t\tthis._isWorkspaceTrusted = workspaceTrusted;\n\t\tif (!this._initialized) {\n\t\t\tif (this.configurationCache.needsCaching(this._workspaceIdentifier.configPath)) {\n\t\t\t\tthis._workspaceConfiguration = this._cachedConfiguration;\n\t\t\t\tthis.waitAndInitialize(this._workspaceIdentifier);\n\t\t\t} else {\n\t\t\t\tthis.doInitialize(new FileServiceBasedWorkspaceConfiguration(this.fileService, this.uriIdentityService, this.logService));\n\t\t\t}\n\t\t}\n\t\tawait this.reload();\n\t}\n\n\tasync reload(): Promise<void> {\n\t\tif (this._workspaceIdentifier) {\n\t\t\tawait this._workspaceConfiguration.load(this._workspaceIdentifier, { scopes: WORKSPACE_SCOPES, skipRestricted: this.isUntrusted() });\n\t\t}\n\t}\n\n\tgetFolders(): IStoredWorkspaceFolder[] {\n\t\treturn this._workspaceConfiguration.getFolders();\n\t}\n\n\tsetFolders(folders: IStoredWorkspaceFolder[], jsonEditingService: IJSONEditingService): Promise<void> {\n\t\tif (this._workspaceIdentifier) {\n\t\t\treturn jsonEditingService.write(this._workspaceIdentifier.configPath, [{ path: ['folders'], value: folders }], true)\n\t\t\t\t.then(() => this.reload());\n\t\t}\n\t\treturn Promise.resolve();\n\t}\n\n\tisTransient(): boolean {\n\t\treturn this._workspaceConfiguration.isTransient();\n\t}\n\n\tgetConfiguration(): ConfigurationModel {\n\t\treturn this._workspaceConfiguration.getWorkspaceSettings();\n\t}\n\n\tupdateWorkspaceTrust(trusted: boolean): ConfigurationModel {\n\t\tthis._isWorkspaceTrusted = trusted;\n\t\treturn this.reparseWorkspaceSettings();\n\t}\n\n\treparseWorkspaceSettings(): ConfigurationModel {\n\t\tthis._workspaceConfiguration.reparseWorkspaceSettings({ scopes: WORKSPACE_SCOPES, skipRestricted: this.isUntrusted() });\n\t\treturn this.getConfiguration();\n\t}\n\n\tgetRestrictedSettings(): string[] {\n\t\treturn this._workspaceConfiguration.getRestrictedSettings();\n\t}\n\n\tprivate async waitAndInitialize(workspaceIdentifier: IWorkspaceIdentifier): Promise<void> {\n\t\tawait whenProviderRegistered(workspaceIdentifier.configPath, this.fileService);\n\t\tif (!(this._workspaceConfiguration instanceof FileServiceBasedWorkspaceConfiguration)) {\n\t\t\tconst fileServiceBasedWorkspaceConfiguration = this._register(new FileServiceBasedWorkspaceConfiguration(this.fileService, this.uriIdentityService, this.logService));\n\t\t\tawait fileServiceBasedWorkspaceConfiguration.load(workspaceIdentifier, { scopes: WORKSPACE_SCOPES, skipRestricted: this.isUntrusted() });\n\t\t\tthis.doInitialize(fileServiceBasedWorkspaceConfiguration);\n\t\t\tthis.onDidWorkspaceConfigurationChange(false, true);\n\t\t}\n\t}\n\n\tprivate doInitialize(fileServiceBasedWorkspaceConfiguration: FileServiceBasedWorkspaceConfiguration): void {\n\t\tthis._workspaceConfigurationDisposables.clear();\n\t\tthis._workspaceConfiguration = this._workspaceConfigurationDisposables.add(fileServiceBasedWorkspaceConfiguration);\n\t\tthis._workspaceConfigurationDisposables.add(this._workspaceConfiguration.onDidChange(e => this.onDidWorkspaceConfigurationChange(true, false)));\n\t\tthis._initialized = true;\n\t}\n\n\tprivate isUntrusted(): boolean {\n\t\treturn !this._isWorkspaceTrusted;\n\t}\n\n\tprivate async onDidWorkspaceConfigurationChange(reload: boolean, fromCache: boolean): Promise<void> {\n\t\tif (reload) {\n\t\t\tawait this.reload();\n\t\t}\n\t\tthis.updateCache();\n\t\tthis._onDidUpdateConfiguration.fire(fromCache);\n\t}\n\n\tprivate async updateCache(): Promise<void> {\n\t\tif (this._workspaceIdentifier && this.configurationCache.needsCaching(this._workspaceIdentifier.configPath) && this._workspaceConfiguration instanceof FileServiceBasedWorkspaceConfiguration) {\n\t\t\tconst content = await this._workspaceConfiguration.resolveContent(this._workspaceIdentifier);\n\t\t\tawait this._cachedConfiguration.updateWorkspace(this._workspaceIdentifier, content);\n\t\t}\n\t}\n}\n\nclass FileServiceBasedWorkspaceConfiguration extends Disposable {\n\n\tworkspaceConfigurationModelParser: WorkspaceConfigurationModelParser;\n\tworkspaceSettings: ConfigurationModel;\n\tprivate _workspaceIdentifier: IWorkspaceIdentifier | null = null;\n\tprivate workspaceConfigWatcher: IDisposable;\n\tprivate readonly reloadConfigurationScheduler: RunOnceScheduler;\n\n\tprotected readonly _onDidChange: Emitter<void> = this._register(new Emitter<void>());\n\treadonly onDidChange: Event<void> = this._onDidChange.event;\n\n\tconstructor(\n\t\tprivate readonly fileService: IFileService,\n\t\turiIdentityService: IUriIdentityService,\n\t\tprivate readonly logService: ILogService,\n\t) {\n\t\tsuper();\n\n\t\tthis.workspaceConfigurationModelParser = new WorkspaceConfigurationModelParser('', logService);\n\t\tthis.workspaceSettings = ConfigurationModel.createEmptyModel(logService);\n\n\t\tthis._register(Event.any(\n\t\t\tEvent.filter(this.fileService.onDidFilesChange, e => !!this._workspaceIdentifier && e.contains(this._workspaceIdentifier.configPath)),\n\t\t\tEvent.filter(this.fileService.onDidRunOperation, e => !!this._workspaceIdentifier && (e.isOperation(FileOperation.CREATE) || e.isOperation(FileOperation.COPY) || e.isOperation(FileOperation.DELETE) || e.isOperation(FileOperation.WRITE)) && uriIdentityService.extUri.isEqual(e.resource, this._workspaceIdentifier.configPath))\n\t\t)(() => this.reloadConfigurationScheduler.schedule()));\n\t\tthis.reloadConfigurationScheduler = this._register(new RunOnceScheduler(() => this._onDidChange.fire(), 50));\n\t\tthis.workspaceConfigWatcher = this._register(this.watchWorkspaceConfigurationFile());\n\t}\n\n\tget workspaceIdentifier(): IWorkspaceIdentifier | null {\n\t\treturn this._workspaceIdentifier;\n\t}\n\n\tasync resolveContent(workspaceIdentifier: IWorkspaceIdentifier): Promise<string> {\n\t\tconst content = await this.fileService.readFile(workspaceIdentifier.configPath, { atomic: true });\n\t\treturn content.value.toString();\n\t}\n\n\tasync load(workspaceIdentifier: IWorkspaceIdentifier, configurationParseOptions: ConfigurationParseOptions): Promise<void> {\n\t\tif (!this._workspaceIdentifier || this._workspaceIdentifier.id !== workspaceIdentifier.id) {\n\t\t\tthis._workspaceIdentifier = workspaceIdentifier;\n\t\t\tthis.workspaceConfigurationModelParser = new WorkspaceConfigurationModelParser(this._workspaceIdentifier.id, this.logService);\n\t\t\tdispose(this.workspaceConfigWatcher);\n\t\t\tthis.workspaceConfigWatcher = this._register(this.watchWorkspaceConfigurationFile());\n\t\t}\n\t\tlet contents = '';\n\t\ttry {\n\t\t\tcontents = await this.resolveContent(this._workspaceIdentifier);\n\t\t} catch (error) {\n\t\t\tconst exists = await this.fileService.exists(this._workspaceIdentifier.configPath);\n\t\t\tif (exists) {\n\t\t\t\tthis.logService.error(error);\n\t\t\t}\n\t\t}\n\t\tthis.workspaceConfigurationModelParser.parse(contents, configurationParseOptions);\n\t\tthis.consolidate();\n\t}\n\n\tgetConfigurationModel(): ConfigurationModel {\n\t\treturn this.workspaceConfigurationModelParser.configurationModel;\n\t}\n\n\tgetFolders(): IStoredWorkspaceFolder[] {\n\t\treturn this.workspaceConfigurationModelParser.folders;\n\t}\n\n\tisTransient(): boolean {\n\t\treturn this.workspaceConfigurationModelParser.transient;\n\t}\n\n\tgetWorkspaceSettings(): ConfigurationModel {\n\t\treturn this.workspaceSettings;\n\t}\n\n\treparseWorkspaceSettings(configurationParseOptions: ConfigurationParseOptions): ConfigurationModel {\n\t\tthis.workspaceConfigurationModelParser.reparseWorkspaceSettings(configurationParseOptions);\n\t\tthis.consolidate();\n\t\treturn this.getWorkspaceSettings();\n\t}\n\n\tgetRestrictedSettings(): string[] {\n\t\treturn this.workspaceConfigurationModelParser.getRestrictedWorkspaceSettings();\n\t}\n\n\tprivate consolidate(): void {\n\t\tthis.workspaceSettings = this.workspaceConfigurationModelParser.settingsModel.merge(this.workspaceConfigurationModelParser.launchModel, this.workspaceConfigurationModelParser.tasksModel);\n\t}\n\n\tprivate watchWorkspaceConfigurationFile(): IDisposable {\n\t\treturn this._workspaceIdentifier ? this.fileService.watch(this._workspaceIdentifier.configPath) : Disposable.None;\n\t}\n\n}\n\nclass CachedWorkspaceConfiguration {\n\n\treadonly onDidChange: Event<void> = Event.None;\n\n\tworkspaceConfigurationModelParser: WorkspaceConfigurationModelParser;\n\tworkspaceSettings: ConfigurationModel;\n\n\tconstructor(\n\t\tprivate readonly configurationCache: IConfigurationCache,\n\t\tprivate readonly logService: ILogService\n\t) {\n\t\tthis.workspaceConfigurationModelParser = new WorkspaceConfigurationModelParser('', logService);\n\t\tthis.workspaceSettings = ConfigurationModel.createEmptyModel(logService);\n\t}\n\n\tasync load(workspaceIdentifier: IWorkspaceIdentifier, configurationParseOptions: ConfigurationParseOptions): Promise<void> {\n\t\ttry {\n\t\t\tconst key = this.getKey(workspaceIdentifier);\n\t\t\tconst contents = await this.configurationCache.read(key);\n\t\t\tconst parsed: { content: string } = JSON.parse(contents);\n\t\t\tif (parsed.content) {\n\t\t\t\tthis.workspaceConfigurationModelParser = new WorkspaceConfigurationModelParser(key.key, this.logService);\n\t\t\t\tthis.workspaceConfigurationModelParser.parse(parsed.content, configurationParseOptions);\n\t\t\t\tthis.consolidate();\n\t\t\t}\n\t\t} catch (e) {\n\t\t}\n\t}\n\n\tget workspaceIdentifier(): IWorkspaceIdentifier | null {\n\t\treturn null;\n\t}\n\n\tgetConfigurationModel(): ConfigurationModel {\n\t\treturn this.workspaceConfigurationModelParser.configurationModel;\n\t}\n\n\tgetFolders(): IStoredWorkspaceFolder[] {\n\t\treturn this.workspaceConfigurationModelParser.folders;\n\t}\n\n\tisTransient(): boolean {\n\t\treturn this.workspaceConfigurationModelParser.transient;\n\t}\n\n\tgetWorkspaceSettings(): ConfigurationModel {\n\t\treturn this.workspaceSettings;\n\t}\n\n\treparseWorkspaceSettings(configurationParseOptions: ConfigurationParseOptions): ConfigurationModel {\n\t\tthis.workspaceConfigurationModelParser.reparseWorkspaceSettings(configurationParseOptions);\n\t\tthis.consolidate();\n\t\treturn this.getWorkspaceSettings();\n\t}\n\n\tgetRestrictedSettings(): string[] {\n\t\treturn this.workspaceConfigurationModelParser.getRestrictedWorkspaceSettings();\n\t}\n\n\tprivate consolidate(): void {\n\t\tthis.workspaceSettings = this.workspaceConfigurationModelParser.settingsModel.merge(this.workspaceConfigurationModelParser.launchModel, this.workspaceConfigurationModelParser.tasksModel);\n\t}\n\n\tasync updateWorkspace(workspaceIdentifier: IWorkspaceIdentifier, content: string | undefined): Promise<void> {\n\t\ttry {\n\t\t\tconst key = this.getKey(workspaceIdentifier);\n\t\t\tif (content) {\n\t\t\t\tawait this.configurationCache.write(key, JSON.stringify({ content }));\n\t\t\t} else {\n\t\t\t\tawait this.configurationCache.remove(key);\n\t\t\t}\n\t\t} catch (error) {\n\t\t}\n\t}\n\n\tprivate getKey(workspaceIdentifier: IWorkspaceIdentifier): ConfigurationKey {\n\t\treturn {\n\t\t\ttype: 'workspaces',\n\t\t\tkey: workspaceIdentifier.id\n\t\t};\n\t}\n}\n\nclass CachedFolderConfiguration {\n\n\treadonly onDidChange = Event.None;\n\n\tprivate _folderSettingsModelParser: ConfigurationModelParser;\n\tprivate _folderSettingsParseOptions: ConfigurationParseOptions;\n\tprivate _standAloneConfigurations: ConfigurationModel[];\n\tprivate configurationModel: ConfigurationModel;\n\tprivate readonly key: ConfigurationKey;\n\n\tconstructor(\n\t\tfolder: URI,\n\t\tconfigFolderRelativePath: string,\n\t\tconfigurationParseOptions: ConfigurationParseOptions,\n\t\tprivate readonly configurationCache: IConfigurationCache,\n\t\tprivate readonly logService: ILogService\n\t) {\n\t\tthis.key = { type: 'folder', key: hash(joinPath(folder, configFolderRelativePath).toString()).toString(16) };\n\t\tthis._folderSettingsModelParser = new ConfigurationModelParser('CachedFolderConfiguration', logService);\n\t\tthis._folderSettingsParseOptions = configurationParseOptions;\n\t\tthis._standAloneConfigurations = [];\n\t\tthis.configurationModel = ConfigurationModel.createEmptyModel(logService);\n\t}\n\n\tasync loadConfiguration(): Promise<ConfigurationModel> {\n\t\ttry {\n\t\t\tconst contents = await this.configurationCache.read(this.key);\n\t\t\tconst { content: configurationContents }: { content: IStringDictionary<string> } = JSON.parse(contents.toString());\n\t\t\tif (configurationContents) {\n\t\t\t\tfor (const key of Object.keys(configurationContents)) {\n\t\t\t\t\tif (key === FOLDER_SETTINGS_NAME) {\n\t\t\t\t\t\tthis._folderSettingsModelParser.parse(configurationContents[key], this._folderSettingsParseOptions);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconst standAloneConfigurationModelParser = new StandaloneConfigurationModelParser(key, key, this.logService);\n\t\t\t\t\t\tstandAloneConfigurationModelParser.parse(configurationContents[key]);\n\t\t\t\t\t\tthis._standAloneConfigurations.push(standAloneConfigurationModelParser.configurationModel);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis.consolidate();\n\t\t} catch (e) {\n\t\t}\n\t\treturn this.configurationModel;\n\t}\n\n\tasync updateConfiguration(settingsContent: string | undefined, standAloneConfigurationContents: [string, string | undefined][]): Promise<void> {\n\t\tconst content: any = {};\n\t\tif (settingsContent) {\n\t\t\tcontent[FOLDER_SETTINGS_NAME] = settingsContent;\n\t\t}\n\t\tstandAloneConfigurationContents.forEach(([key, contents]) => {\n\t\t\tif (contents) {\n\t\t\t\tcontent[key] = contents;\n\t\t\t}\n\t\t});\n\t\tif (Object.keys(content).length) {\n\t\t\tawait this.configurationCache.write(this.key, JSON.stringify({ content }));\n\t\t} else {\n\t\t\tawait this.configurationCache.remove(this.key);\n\t\t}\n\t}\n\n\tgetRestrictedSettings(): string[] {\n\t\treturn this._folderSettingsModelParser.restrictedConfigurations;\n\t}\n\n\treparse(configurationParseOptions: ConfigurationParseOptions): ConfigurationModel {\n\t\tthis._folderSettingsParseOptions = configurationParseOptions;\n\t\tthis._folderSettingsModelParser.reparse(this._folderSettingsParseOptions);\n\t\tthis.consolidate();\n\t\treturn this.configurationModel;\n\t}\n\n\tprivate consolidate(): void {\n\t\tthis.configurationModel = this._folderSettingsModelParser.configurationModel.merge(...this._standAloneConfigurations);\n\t}\n\n\tgetUnsupportedKeys(): string[] {\n\t\treturn [];\n\t}\n}\n\nexport class FolderConfiguration extends Disposable {\n\n\tprotected readonly _onDidChange: Emitter<void> = this._register(new Emitter<void>());\n\treadonly onDidChange: Event<void> = this._onDidChange.event;\n\n\tprivate folderConfiguration: CachedFolderConfiguration | FileServiceBasedConfiguration;\n\tprivate readonly scopes: ConfigurationScope[];\n\tprivate readonly configurationFolder: URI;\n\tprivate cachedFolderConfiguration: CachedFolderConfiguration;\n\n\tconstructor(\n\t\tuseCache: boolean,\n\t\treadonly workspaceFolder: IWorkspaceFolder,\n\t\tconfigFolderRelativePath: string,\n\t\tprivate readonly workbenchState: WorkbenchState,\n\t\tprivate workspaceTrusted: boolean,\n\t\tfileService: IFileService,\n\t\turiIdentityService: IUriIdentityService,\n\t\tlogService: ILogService,\n\t\tprivate readonly configurationCache: IConfigurationCache\n\t) {\n\t\tsuper();\n\n\t\tthis.scopes = WorkbenchState.WORKSPACE === this.workbenchState ? FOLDER_SCOPES : WORKSPACE_SCOPES;\n\t\tthis.configurationFolder = uriIdentityService.extUri.joinPath(workspaceFolder.uri, configFolderRelativePath);\n\t\tthis.cachedFolderConfiguration = new CachedFolderConfiguration(workspaceFolder.uri, configFolderRelativePath, { scopes: this.scopes, skipRestricted: this.isUntrusted() }, configurationCache, logService);\n\t\tif (useCache && this.configurationCache.needsCaching(workspaceFolder.uri)) {\n\t\t\tthis.folderConfiguration = this.cachedFolderConfiguration;\n\t\t\twhenProviderRegistered(workspaceFolder.uri, fileService)\n\t\t\t\t.then(() => {\n\t\t\t\t\tthis.folderConfiguration = this._register(this.createFileServiceBasedConfiguration(fileService, uriIdentityService, logService));\n\t\t\t\t\tthis._register(this.folderConfiguration.onDidChange(e => this.onDidFolderConfigurationChange()));\n\t\t\t\t\tthis.onDidFolderConfigurationChange();\n\t\t\t\t});\n\t\t} else {\n\t\t\tthis.folderConfiguration = this._register(this.createFileServiceBasedConfiguration(fileService, uriIdentityService, logService));\n\t\t\tthis._register(this.folderConfiguration.onDidChange(e => this.onDidFolderConfigurationChange()));\n\t\t}\n\t}\n\n\tloadConfiguration(): Promise<ConfigurationModel> {\n\t\treturn this.folderConfiguration.loadConfiguration();\n\t}\n\n\tupdateWorkspaceTrust(trusted: boolean): ConfigurationModel {\n\t\tthis.workspaceTrusted = trusted;\n\t\treturn this.reparse();\n\t}\n\n\treparse(): ConfigurationModel {\n\t\tconst configurationModel = this.folderConfiguration.reparse({ scopes: this.scopes, skipRestricted: this.isUntrusted() });\n\t\tthis.updateCache();\n\t\treturn configurationModel;\n\t}\n\n\tgetRestrictedSettings(): string[] {\n\t\treturn this.folderConfiguration.getRestrictedSettings();\n\t}\n\n\tprivate isUntrusted(): boolean {\n\t\treturn !this.workspaceTrusted;\n\t}\n\n\tprivate onDidFolderConfigurationChange(): void {\n\t\tthis.updateCache();\n\t\tthis._onDidChange.fire();\n\t}\n\n\tprivate createFileServiceBasedConfiguration(fileService: IFileService, uriIdentityService: IUriIdentityService, logService: ILogService) {\n\t\tconst settingsResource = uriIdentityService.extUri.joinPath(this.configurationFolder, `${FOLDER_SETTINGS_NAME}.json`);\n\t\tconst standAloneConfigurationResources: [string, URI][] = [TASKS_CONFIGURATION_KEY, LAUNCH_CONFIGURATION_KEY].map(name => ([name, uriIdentityService.extUri.joinPath(this.configurationFolder, `${name}.json`)]));\n\t\treturn new FileServiceBasedConfiguration(this.configurationFolder.toString(), settingsResource, standAloneConfigurationResources, { scopes: this.scopes, skipRestricted: this.isUntrusted() }, fileService, uriIdentityService, logService);\n\t}\n\n\tprivate async updateCache(): Promise<void> {\n\t\tif (this.configurationCache.needsCaching(this.configurationFolder) && this.folderConfiguration instanceof FileServiceBasedConfiguration) {\n\t\t\tconst [settingsContent, standAloneConfigurationContents] = await this.folderConfiguration.resolveContents();\n\t\t\tthis.cachedFolderConfiguration.updateConfiguration(settingsContent, standAloneConfigurationContents);\n\t\t}\n\t}\n}\n"],
  "mappings": "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",
  "names": ["configurationModel"]
}
