import l from"assert";import{Registry as M}from"../../../../../platform/registry/common/platform.js";import{StandaloneConfigurationModelParser as y,Configuration as g}from"../../common/configurationModels.js";import{ConfigurationModelParser as p,ConfigurationModel as o}from"../../../../../platform/configuration/common/configurationModels.js";import{Extensions as S,ConfigurationScope as d}from"../../../../../platform/configuration/common/configurationRegistry.js";import{ResourceMap as c}from"../../../../../base/common/map.js";import{WorkspaceFolder as u}from"../../../../../platform/workspace/common/workspace.js";import{URI as s}from"../../../../../base/common/uri.js";import{Workspace as m}from"../../../../../platform/workspace/test/common/testWorkspace.js";import{ensureNoDisposablesAreLeakedInTestSuite as w}from"../../../../../base/test/common/utils.js";import{NullLogService as e}from"../../../../../platform/log/common/log.js";suite("FolderSettingsModelParser",()=>{w(),suiteSetup(()=>{M.as(S.Configuration).registerConfiguration({id:"FolderSettingsModelParser_1",type:"object",properties:{"FolderSettingsModelParser.window":{type:"string",default:"isSet"},"FolderSettingsModelParser.resource":{type:"string",default:"isSet",scope:d.RESOURCE},"FolderSettingsModelParser.resourceLanguage":{type:"string",default:"isSet",scope:d.LANGUAGE_OVERRIDABLE},"FolderSettingsModelParser.application":{type:"string",default:"isSet",scope:d.APPLICATION},"FolderSettingsModelParser.machine":{type:"string",default:"isSet",scope:d.MACHINE}}})}),test("parse all folder settings",()=>{const r=new p("settings",new e);r.parse(JSON.stringify({"FolderSettingsModelParser.window":"window","FolderSettingsModelParser.resource":"resource","FolderSettingsModelParser.application":"application","FolderSettingsModelParser.machine":"executable"}),{scopes:[d.RESOURCE,d.WINDOW]});const t=Object.create(null);t.FolderSettingsModelParser=Object.create(null),t.FolderSettingsModelParser.window="window",t.FolderSettingsModelParser.resource="resource",l.deepStrictEqual(r.configurationModel.contents,t)}),test("parse resource folder settings",()=>{const r=new p("settings",new e);r.parse(JSON.stringify({"FolderSettingsModelParser.window":"window","FolderSettingsModelParser.resource":"resource","FolderSettingsModelParser.application":"application","FolderSettingsModelParser.machine":"executable"}),{scopes:[d.RESOURCE]});const t=Object.create(null);t.FolderSettingsModelParser=Object.create(null),t.FolderSettingsModelParser.resource="resource",l.deepStrictEqual(r.configurationModel.contents,t)}),test("parse resource and resource language settings",()=>{const r=new p("settings",new e);r.parse(JSON.stringify({"[json]":{"FolderSettingsModelParser.window":"window","FolderSettingsModelParser.resource":"resource","FolderSettingsModelParser.resourceLanguage":"resourceLanguage","FolderSettingsModelParser.application":"application","FolderSettingsModelParser.machine":"executable"}}),{scopes:[d.RESOURCE,d.LANGUAGE_OVERRIDABLE]});const t=Object.create(null);t.FolderSettingsModelParser=Object.create(null),t.FolderSettingsModelParser.resource="resource",t.FolderSettingsModelParser.resourceLanguage="resourceLanguage",l.deepStrictEqual(r.configurationModel.overrides,[{contents:t,identifiers:["json"],keys:["FolderSettingsModelParser.resource","FolderSettingsModelParser.resourceLanguage"]}])}),test("reparse folder settings excludes application and machine setting",()=>{const r={scopes:[d.RESOURCE,d.WINDOW]},t=new p("settings",new e);t.parse(JSON.stringify({"FolderSettingsModelParser.resource":"resource","FolderSettingsModelParser.anotherApplicationSetting":"executable"}),r);let n=Object.create(null);n.FolderSettingsModelParser=Object.create(null),n.FolderSettingsModelParser.resource="resource",n.FolderSettingsModelParser.anotherApplicationSetting="executable",l.deepStrictEqual(t.configurationModel.contents,n),M.as(S.Configuration).registerConfiguration({id:"FolderSettingsModelParser_2",type:"object",properties:{"FolderSettingsModelParser.anotherApplicationSetting":{type:"string",default:"isSet",scope:d.APPLICATION},"FolderSettingsModelParser.anotherMachineSetting":{type:"string",default:"isSet",scope:d.MACHINE}}}),t.reparse(r),n=Object.create(null),n.FolderSettingsModelParser=Object.create(null),n.FolderSettingsModelParser.resource="resource",l.deepStrictEqual(t.configurationModel.contents,n)})}),suite("StandaloneConfigurationModelParser",()=>{w(),test("parse tasks stand alone configuration model",()=>{const r=new y("tasks","tasks",new e);r.parse(JSON.stringify({version:"1.1.1",tasks:[]}));const t=Object.create(null);t.tasks=Object.create(null),t.tasks.version="1.1.1",t.tasks.tasks=[],l.deepStrictEqual(r.configurationModel.contents,t)})}),suite("Workspace Configuration",()=>{w();const r=i({"editor.lineNumbers":"on","editor.fontSize":12,"window.zoomLevel":1,"[markdown]":{"editor.wordWrap":"off"},"window.title":"custom","workbench.enableTabs":!1,"editor.insertSpaces":!0});test("Test compare same configurations",()=>{const t=new m("a",[new u({index:0,name:"a",uri:s.file("folder1")}),new u({index:1,name:"b",uri:s.file("folder2")}),new u({index:2,name:"c",uri:s.file("folder3")})]),n=new g(o.createEmptyModel(new e),o.createEmptyModel(new e),o.createEmptyModel(new e),o.createEmptyModel(new e),o.createEmptyModel(new e),o.createEmptyModel(new e),new c,o.createEmptyModel(new e),new c,t,new e);n.updateDefaultConfiguration(r),n.updateLocalUserConfiguration(i({"window.title":"native","[typescript]":{"editor.insertSpaces":!1}})),n.updateWorkspaceConfiguration(i({"editor.lineNumbers":"on"})),n.updateFolderConfiguration(s.file("folder1"),i({"editor.fontSize":14})),n.updateFolderConfiguration(s.file("folder2"),i({"editor.wordWrap":"on"}));const a=new g(o.createEmptyModel(new e),o.createEmptyModel(new e),o.createEmptyModel(new e),o.createEmptyModel(new e),o.createEmptyModel(new e),o.createEmptyModel(new e),new c,o.createEmptyModel(new e),new c,t,new e);a.updateDefaultConfiguration(r),a.updateLocalUserConfiguration(i({"window.title":"native","[typescript]":{"editor.insertSpaces":!1}})),a.updateWorkspaceConfiguration(i({"editor.lineNumbers":"on"})),a.updateFolderConfiguration(s.file("folder1"),i({"editor.fontSize":14})),a.updateFolderConfiguration(s.file("folder2"),i({"editor.wordWrap":"on"}));const f=a.compare(n);l.deepStrictEqual(f,{keys:[],overrides:[]})}),test("Test compare different configurations",()=>{const t=new m("a",[new u({index:0,name:"a",uri:s.file("folder1")}),new u({index:1,name:"b",uri:s.file("folder2")}),new u({index:2,name:"c",uri:s.file("folder3")})]),n=new g(o.createEmptyModel(new e),o.createEmptyModel(new e),o.createEmptyModel(new e),o.createEmptyModel(new e),o.createEmptyModel(new e),o.createEmptyModel(new e),new c,o.createEmptyModel(new e),new c,t,new e);n.updateDefaultConfiguration(r),n.updateLocalUserConfiguration(i({"window.title":"native","[typescript]":{"editor.insertSpaces":!1}})),n.updateWorkspaceConfiguration(i({"editor.lineNumbers":"on"})),n.updateFolderConfiguration(s.file("folder1"),i({"editor.fontSize":14})),n.updateFolderConfiguration(s.file("folder2"),i({"editor.wordWrap":"on"}));const a=new g(o.createEmptyModel(new e),o.createEmptyModel(new e),o.createEmptyModel(new e),o.createEmptyModel(new e),o.createEmptyModel(new e),o.createEmptyModel(new e),new c,o.createEmptyModel(new e),new c,t,new e);a.updateDefaultConfiguration(r),a.updateLocalUserConfiguration(i({"workbench.enableTabs":!0,"[typescript]":{"editor.insertSpaces":!0}})),a.updateWorkspaceConfiguration(i({"editor.fontSize":11})),a.updateFolderConfiguration(s.file("folder1"),i({"editor.insertSpaces":!0})),a.updateFolderConfiguration(s.file("folder2"),i({"[markdown]":{"editor.wordWrap":"on","editor.lineNumbers":"relative"}}));const f=a.compare(n);l.deepStrictEqual(f,{keys:["editor.wordWrap","editor.fontSize","[markdown]","window.title","workbench.enableTabs","[typescript]"],overrides:[["markdown",["editor.lineNumbers","editor.wordWrap"]],["typescript",["editor.insertSpaces"]]]})})});function i(r){const t=new p("test",new e);return t.parse(JSON.stringify(r)),t.configurationModel}
