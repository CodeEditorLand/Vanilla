import s from"assert";import{Event as d}from"../../../../../base/common/event.js";import{joinPath as l}from"../../../../../base/common/resources.js";import{URI as g}from"../../../../../base/common/uri.js";import{ensureNoDisposablesAreLeakedInTestSuite as w}from"../../../../../base/test/common/utils.js";import{Extensions as E}from"../../../../../platform/configuration/common/configurationRegistry.js";import{NullLogService as u}from"../../../../../platform/log/common/log.js";import{Registry as O}from"../../../../../platform/registry/common/platform.js";import{DefaultConfiguration as a}from"../../browser/configuration.js";import"../../common/configuration.js";import{BrowserWorkbenchEnvironmentService as v}from"../../../environment/browser/environmentService.js";import{TestEnvironmentService as c}from"../../../../test/browser/workbenchTestServices.js";import{TestProductService as m}from"../../../../test/common/workbenchTestServices.js";class S{cache=new Map;needsCaching(i){return!1}async read({type:i,key:r}){return this.cache.get(`${i}:${r}`)||""}async write({type:i,key:r},t){this.cache.set(`${i}:${r}`,t)}async remove({type:i,key:r}){this.cache.delete(`${i}:${r}`)}}suite("DefaultConfiguration",()=>{const n=w(),i=O.as(E.Configuration),r={type:"defaults",key:"configurationDefaultsOverrides"};let t;setup(()=>{t=new S,i.registerConfiguration({id:"test.configurationDefaultsOverride",type:"object",properties:{"test.configurationDefaultsOverride":{type:"string",default:"defaultValue"}}})}),teardown(()=>{i.deregisterConfigurations(i.getConfigurations()),i.deregisterDefaultConfigurations(i.getRegisteredDefaultConfigurations())}),test("configuration default overrides are read from environment",async()=>{const e=new v("",l(g.file("tests").with({scheme:"vscode-tests"}),"logs"),{configurationDefaults:{"test.configurationDefaultsOverride":"envOverrideValue"}},m),o=n.add(new a(t,e,new u));await o.initialize(),s.deepStrictEqual(o.configurationModel.getValue("test.configurationDefaultsOverride"),"envOverrideValue")}),test("configuration default overrides are read from cache",async()=>{localStorage.setItem(a.DEFAULT_OVERRIDES_CACHE_EXISTS_KEY,"yes"),await t.write(r,JSON.stringify({"test.configurationDefaultsOverride":"overrideValue"}));const e=n.add(new a(t,c,new u)),o=await e.initialize();s.deepStrictEqual(o.getValue("test.configurationDefaultsOverride"),"overrideValue"),s.deepStrictEqual(e.configurationModel.getValue("test.configurationDefaultsOverride"),"overrideValue")}),test("configuration default overrides are not read from cache when model is read before initialize",async()=>{localStorage.setItem(a.DEFAULT_OVERRIDES_CACHE_EXISTS_KEY,"yes"),await t.write(r,JSON.stringify({"test.configurationDefaultsOverride":"overrideValue"}));const e=n.add(new a(t,c,new u));s.deepStrictEqual(e.configurationModel.getValue("test.configurationDefaultsOverride"),void 0)}),test("configuration default overrides read from cache override environment",async()=>{const e=new v("",l(g.file("tests").with({scheme:"vscode-tests"}),"logs"),{configurationDefaults:{"test.configurationDefaultsOverride":"envOverrideValue"}},m);localStorage.setItem(a.DEFAULT_OVERRIDES_CACHE_EXISTS_KEY,"yes"),await t.write(r,JSON.stringify({"test.configurationDefaultsOverride":"overrideValue"}));const f=await n.add(new a(t,e,new u)).initialize();s.deepStrictEqual(f.getValue("test.configurationDefaultsOverride"),"overrideValue")}),test("configuration default overrides are read from cache when default configuration changed",async()=>{localStorage.setItem(a.DEFAULT_OVERRIDES_CACHE_EXISTS_KEY,"yes"),await t.write(r,JSON.stringify({"test.configurationDefaultsOverride":"overrideValue"}));const e=n.add(new a(t,c,new u));await e.initialize();const o=d.toPromise(e.onDidChangeConfiguration);i.registerConfiguration({id:"test.configurationDefaultsOverride",type:"object",properties:{"test.configurationDefaultsOverride1":{type:"string",default:"defaultValue"}}});const{defaults:f}=await o;s.deepStrictEqual(f.getValue("test.configurationDefaultsOverride"),"overrideValue")}),test("configuration default overrides are not read from cache after reload",async()=>{localStorage.setItem(a.DEFAULT_OVERRIDES_CACHE_EXISTS_KEY,"yes"),await t.write(r,JSON.stringify({"test.configurationDefaultsOverride":"overrideValue"}));const e=n.add(new a(t,c,new u));await e.initialize();const o=e.reload();s.deepStrictEqual(o.getValue("test.configurationDefaultsOverride"),"defaultValue")}),test("cache is reset after reload",async()=>{localStorage.setItem(a.DEFAULT_OVERRIDES_CACHE_EXISTS_KEY,"yes"),await t.write(r,JSON.stringify({"test.configurationDefaultsOverride":"overrideValue"}));const e=n.add(new a(t,c,new u));await e.initialize(),e.reload(),s.deepStrictEqual(await t.read(r),"")}),test("configuration default overrides are written in cache",async()=>{const e=n.add(new a(t,c,new u));await e.initialize(),e.reload();const o=d.toPromise(e.onDidChangeConfiguration);i.registerDefaultConfigurations([{overrides:{"test.configurationDefaultsOverride":"newoverrideValue"}}]),await o;const f=JSON.parse(await t.read(r));s.deepStrictEqual(f,{"test.configurationDefaultsOverride":"newoverrideValue"})}),test("configuration default overrides are removed from cache if there are no overrides",async()=>{const e=n.add(new a(t,c,new u));await e.initialize();const o=d.toPromise(e.onDidChangeConfiguration);i.registerConfiguration({id:"test.configurationDefaultsOverride",type:"object",properties:{"test.configurationDefaultsOverride1":{type:"string",default:"defaultValue"}}}),await o,s.deepStrictEqual(await t.read(r),"")})});
