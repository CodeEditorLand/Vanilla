{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/workbench/services/configuration/test/browser/configurationEditing.test.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as sinon from 'sinon';\nimport assert from 'assert';\nimport * as json from '../../../../../base/common/json.js';\nimport { Event } from '../../../../../base/common/event.js';\nimport { Registry } from '../../../../../platform/registry/common/platform.js';\nimport { IEnvironmentService } from '../../../../../platform/environment/common/environment.js';\nimport { IWorkspaceContextService } from '../../../../../platform/workspace/common/workspace.js';\nimport { TestEnvironmentService, TestTextFileService, workbenchInstantiationService } from '../../../../test/browser/workbenchTestServices.js';\nimport * as uuid from '../../../../../base/common/uuid.js';\nimport { IConfigurationRegistry, Extensions as ConfigurationExtensions } from '../../../../../platform/configuration/common/configurationRegistry.js';\nimport { WorkspaceService } from '../../browser/configurationService.js';\nimport { ConfigurationEditing, ConfigurationEditingErrorCode, EditableConfigurationTarget } from '../../common/configurationEditing.js';\nimport { WORKSPACE_STANDALONE_CONFIGURATIONS, FOLDER_SETTINGS_PATH, USER_STANDALONE_CONFIGURATIONS, IConfigurationCache } from '../../common/configuration.js';\nimport { IConfigurationService } from '../../../../../platform/configuration/common/configuration.js';\nimport { TestInstantiationService } from '../../../../../platform/instantiation/test/common/instantiationServiceMock.js';\nimport { ITextFileService } from '../../../textfile/common/textfiles.js';\nimport { ITextModelService } from '../../../../../editor/common/services/resolverService.js';\nimport { TextModelResolverService } from '../../../textmodelResolver/common/textModelResolverService.js';\nimport { INotificationService } from '../../../../../platform/notification/common/notification.js';\nimport { ICommandService } from '../../../../../platform/commands/common/commands.js';\nimport { CommandService } from '../../../commands/common/commandService.js';\nimport { URI } from '../../../../../base/common/uri.js';\nimport { IRemoteAgentService } from '../../../remote/common/remoteAgentService.js';\nimport { FileService } from '../../../../../platform/files/common/fileService.js';\nimport { NullLogService } from '../../../../../platform/log/common/log.js';\nimport { Schemas } from '../../../../../base/common/network.js';\nimport { IFileService } from '../../../../../platform/files/common/files.js';\nimport { KeybindingsEditingService, IKeybindingEditingService } from '../../../keybinding/common/keybindingEditing.js';\nimport { FileUserDataProvider } from '../../../../../platform/userData/common/fileUserDataProvider.js';\nimport { UriIdentityService } from '../../../../../platform/uriIdentity/common/uriIdentityService.js';\nimport { toDisposable } from '../../../../../base/common/lifecycle.js';\nimport { InMemoryFileSystemProvider } from '../../../../../platform/files/common/inMemoryFilesystemProvider.js';\nimport { joinPath } from '../../../../../base/common/resources.js';\nimport { VSBuffer } from '../../../../../base/common/buffer.js';\nimport { RemoteAgentService } from '../../../remote/browser/remoteAgentService.js';\nimport { getSingleFolderWorkspaceIdentifier } from '../../../workspaces/browser/workspaces.js';\nimport { IUserDataProfilesService, UserDataProfilesService } from '../../../../../platform/userDataProfile/common/userDataProfile.js';\nimport { hash } from '../../../../../base/common/hash.js';\nimport { FilePolicyService } from '../../../../../platform/policy/common/filePolicyService.js';\nimport { runWithFakedTimers } from '../../../../../base/test/common/timeTravelScheduler.js';\nimport { UserDataProfileService } from '../../../userDataProfile/common/userDataProfileService.js';\nimport { IUserDataProfileService } from '../../../userDataProfile/common/userDataProfile.js';\nimport { IBrowserWorkbenchEnvironmentService } from '../../../environment/browser/environmentService.js';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from '../../../../../base/test/common/utils.js';\n\nconst ROOT = URI.file('tests').with({ scheme: 'vscode-tests' });\n\nclass ConfigurationCache implements IConfigurationCache {\n\tneedsCaching(resource: URI): boolean { return false; }\n\tasync read(): Promise<string> { return ''; }\n\tasync write(): Promise<void> { }\n\tasync remove(): Promise<void> { }\n}\n\nsuite('ConfigurationEditing', () => {\n\n\tlet instantiationService: TestInstantiationService;\n\tlet userDataProfileService: IUserDataProfileService;\n\tlet environmentService: IBrowserWorkbenchEnvironmentService;\n\tlet fileService: IFileService;\n\tlet workspaceService: WorkspaceService;\n\tlet testObject: ConfigurationEditing;\n\n\tsuiteSetup(() => {\n\t\tconst configurationRegistry = Registry.as<IConfigurationRegistry>(ConfigurationExtensions.Configuration);\n\t\tconfigurationRegistry.registerConfiguration({\n\t\t\t'id': '_test',\n\t\t\t'type': 'object',\n\t\t\t'properties': {\n\t\t\t\t'configurationEditing.service.testSetting': {\n\t\t\t\t\t'type': 'string',\n\t\t\t\t\t'default': 'isSet'\n\t\t\t\t},\n\t\t\t\t'configurationEditing.service.testSettingTwo': {\n\t\t\t\t\t'type': 'string',\n\t\t\t\t\t'default': 'isSet'\n\t\t\t\t},\n\t\t\t\t'configurationEditing.service.testSettingThree': {\n\t\t\t\t\t'type': 'string',\n\t\t\t\t\t'default': 'isSet'\n\t\t\t\t},\n\t\t\t\t'configurationEditing.service.policySetting': {\n\t\t\t\t\t'type': 'string',\n\t\t\t\t\t'default': 'isSet',\n\t\t\t\t\tpolicy: {\n\t\t\t\t\t\tname: 'configurationEditing.service.policySetting',\n\t\t\t\t\t\tminimumVersion: '1.0.0',\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t});\n\n\tconst disposables = ensureNoDisposablesAreLeakedInTestSuite();\n\n\tsetup(async () => {\n\t\tdisposables.add(toDisposable(() => sinon.restore()));\n\t\tconst logService = new NullLogService();\n\t\tfileService = disposables.add(new FileService(logService));\n\t\tconst fileSystemProvider = disposables.add(new InMemoryFileSystemProvider());\n\t\tdisposables.add(fileService.registerProvider(ROOT.scheme, fileSystemProvider));\n\n\t\tconst workspaceFolder = joinPath(ROOT, uuid.generateUuid());\n\t\tawait fileService.createFolder(workspaceFolder);\n\n\t\tinstantiationService = workbenchInstantiationService(undefined, disposables);\n\t\tenvironmentService = TestEnvironmentService;\n\t\tenvironmentService.policyFile = joinPath(workspaceFolder, 'policies.json');\n\t\tinstantiationService.stub(IEnvironmentService, environmentService);\n\t\tconst uriIdentityService = disposables.add(new UriIdentityService(fileService));\n\t\tconst userDataProfilesService = instantiationService.stub(IUserDataProfilesService, disposables.add(new UserDataProfilesService(environmentService, fileService, uriIdentityService, logService)));\n\t\tuserDataProfileService = disposables.add(new UserDataProfileService(userDataProfilesService.defaultProfile));\n\t\tconst remoteAgentService = disposables.add(instantiationService.createInstance(RemoteAgentService));\n\t\tdisposables.add(fileService.registerProvider(Schemas.vscodeUserData, disposables.add(new FileUserDataProvider(ROOT.scheme, fileSystemProvider, Schemas.vscodeUserData, userDataProfilesService, uriIdentityService, logService))));\n\t\tinstantiationService.stub(IFileService, fileService);\n\t\tinstantiationService.stub(IRemoteAgentService, remoteAgentService);\n\t\tworkspaceService = disposables.add(new WorkspaceService({ configurationCache: new ConfigurationCache() }, environmentService, userDataProfileService, userDataProfilesService, fileService, remoteAgentService, uriIdentityService, new NullLogService(), disposables.add(new FilePolicyService(environmentService.policyFile, fileService, logService))));\n\t\tawait workspaceService.initialize({\n\t\t\tid: hash(workspaceFolder.toString()).toString(16),\n\t\t\turi: workspaceFolder\n\t\t});\n\t\tinstantiationService.stub(IWorkspaceContextService, workspaceService);\n\n\t\tawait workspaceService.initialize(getSingleFolderWorkspaceIdentifier(workspaceFolder));\n\t\tinstantiationService.stub(IConfigurationService, workspaceService);\n\t\tinstantiationService.stub(IKeybindingEditingService, disposables.add(instantiationService.createInstance(KeybindingsEditingService)));\n\t\tinstantiationService.stub(ITextFileService, disposables.add(instantiationService.createInstance(TestTextFileService)));\n\t\tinstantiationService.stub(ITextModelService, <ITextModelService>disposables.add(instantiationService.createInstance(TextModelResolverService)));\n\t\tinstantiationService.stub(ICommandService, CommandService);\n\t\ttestObject = instantiationService.createInstance(ConfigurationEditing, null);\n\t});\n\n\ttest('errors cases - invalid key', async () => {\n\t\ttry {\n\t\t\tawait testObject.writeConfiguration(EditableConfigurationTarget.WORKSPACE, { key: 'unknown.key', value: 'value' }, { donotNotifyError: true });\n\t\t} catch (error) {\n\t\t\tassert.strictEqual(error.code, ConfigurationEditingErrorCode.ERROR_UNKNOWN_KEY);\n\t\t\treturn;\n\t\t}\n\t\tassert.fail('Should fail with ERROR_UNKNOWN_KEY');\n\t});\n\n\ttest('errors cases - no workspace', async () => {\n\t\tawait workspaceService.initialize({ id: uuid.generateUuid() });\n\t\ttry {\n\t\t\tawait testObject.writeConfiguration(EditableConfigurationTarget.WORKSPACE, { key: 'configurationEditing.service.testSetting', value: 'value' }, { donotNotifyError: true });\n\t\t} catch (error) {\n\t\t\tassert.strictEqual(error.code, ConfigurationEditingErrorCode.ERROR_NO_WORKSPACE_OPENED);\n\t\t\treturn;\n\t\t}\n\t\tassert.fail('Should fail with ERROR_NO_WORKSPACE_OPENED');\n\t});\n\n\ttest('errors cases - invalid configuration', async () => {\n\t\tawait fileService.writeFile(userDataProfileService.currentProfile.settingsResource, VSBuffer.fromString(',,,,,,,,,,,,,,'));\n\t\ttry {\n\t\t\tawait testObject.writeConfiguration(EditableConfigurationTarget.USER_LOCAL, { key: 'configurationEditing.service.testSetting', value: 'value' }, { donotNotifyError: true });\n\t\t} catch (error) {\n\t\t\tassert.strictEqual(error.code, ConfigurationEditingErrorCode.ERROR_INVALID_CONFIGURATION);\n\t\t\treturn;\n\t\t}\n\t\tassert.fail('Should fail with ERROR_INVALID_CONFIGURATION');\n\t});\n\n\ttest('errors cases - invalid global tasks configuration', async () => {\n\t\tconst resource = joinPath(environmentService.userRoamingDataHome, USER_STANDALONE_CONFIGURATIONS['tasks']);\n\t\tawait fileService.writeFile(resource, VSBuffer.fromString(',,,,,,,,,,,,,,'));\n\t\ttry {\n\t\t\tawait testObject.writeConfiguration(EditableConfigurationTarget.USER_LOCAL, { key: 'tasks.configurationEditing.service.testSetting', value: 'value' }, { donotNotifyError: true });\n\t\t} catch (error) {\n\t\t\tassert.strictEqual(error.code, ConfigurationEditingErrorCode.ERROR_INVALID_CONFIGURATION);\n\t\t\treturn;\n\t\t}\n\t\tassert.fail('Should fail with ERROR_INVALID_CONFIGURATION');\n\t});\n\n\ttest('errors cases - dirty', async () => {\n\t\tinstantiationService.stub(ITextFileService, 'isDirty', true);\n\t\ttry {\n\t\t\tawait testObject.writeConfiguration(EditableConfigurationTarget.USER_LOCAL, { key: 'configurationEditing.service.testSetting', value: 'value' }, { donotNotifyError: true });\n\t\t} catch (error) {\n\t\t\tassert.strictEqual(error.code, ConfigurationEditingErrorCode.ERROR_CONFIGURATION_FILE_DIRTY);\n\t\t\treturn;\n\t\t}\n\t\tassert.fail('Should fail with ERROR_CONFIGURATION_FILE_DIRTY error.');\n\t});\n\n\ttest('do not notify error', async () => {\n\t\tinstantiationService.stub(ITextFileService, 'isDirty', true);\n\t\tconst target = sinon.stub();\n\t\tinstantiationService.stub(INotificationService, <INotificationService>{ prompt: target, _serviceBrand: undefined, filter: false, onDidAddNotification: undefined!, onDidRemoveNotification: undefined!, onDidChangeFilter: undefined!, notify: null!, error: null!, info: null!, warn: null!, status: null!, setFilter: null!, getFilter: null!, getFilters: null!, removeFilter: null! });\n\t\ttry {\n\t\t\tawait testObject.writeConfiguration(EditableConfigurationTarget.USER_LOCAL, { key: 'configurationEditing.service.testSetting', value: 'value' }, { donotNotifyError: true });\n\t\t} catch (error) {\n\t\t\tassert.strictEqual(false, target.calledOnce);\n\t\t\tassert.strictEqual(error.code, ConfigurationEditingErrorCode.ERROR_CONFIGURATION_FILE_DIRTY);\n\t\t\treturn;\n\t\t}\n\t\tassert.fail('Should fail with ERROR_CONFIGURATION_FILE_DIRTY error.');\n\t});\n\n\ttest('errors cases - ERROR_POLICY_CONFIGURATION', async () => {\n\t\tawait runWithFakedTimers({ useFakeTimers: true }, async () => {\n\t\t\tconst promise = Event.toPromise(instantiationService.get(IConfigurationService).onDidChangeConfiguration);\n\t\t\tawait fileService.writeFile(environmentService.policyFile!, VSBuffer.fromString('{ \"configurationEditing.service.policySetting\": \"policyValue\" }'));\n\t\t\tawait promise;\n\t\t});\n\t\ttry {\n\t\t\tawait testObject.writeConfiguration(EditableConfigurationTarget.USER_LOCAL, { key: 'configurationEditing.service.policySetting', value: 'value' }, { donotNotifyError: true });\n\t\t} catch (error) {\n\t\t\tassert.strictEqual(error.code, ConfigurationEditingErrorCode.ERROR_POLICY_CONFIGURATION);\n\t\t\treturn;\n\t\t}\n\t\tassert.fail('Should fail with ERROR_POLICY_CONFIGURATION');\n\t});\n\n\ttest('write policy setting - when not set', async () => {\n\t\tawait testObject.writeConfiguration(EditableConfigurationTarget.USER_LOCAL, { key: 'configurationEditing.service.policySetting', value: 'value' }, { donotNotifyError: true });\n\t\tconst contents = await fileService.readFile(userDataProfileService.currentProfile.settingsResource);\n\t\tconst parsed = json.parse(contents.value.toString());\n\t\tassert.strictEqual(parsed['configurationEditing.service.policySetting'], 'value');\n\t});\n\n\ttest('write one setting - empty file', async () => {\n\t\tawait testObject.writeConfiguration(EditableConfigurationTarget.USER_LOCAL, { key: 'configurationEditing.service.testSetting', value: 'value' });\n\t\tconst contents = await fileService.readFile(userDataProfileService.currentProfile.settingsResource);\n\t\tconst parsed = json.parse(contents.value.toString());\n\t\tassert.strictEqual(parsed['configurationEditing.service.testSetting'], 'value');\n\t});\n\n\ttest('write one setting - existing file', async () => {\n\t\tawait fileService.writeFile(userDataProfileService.currentProfile.settingsResource, VSBuffer.fromString('{ \"my.super.setting\": \"my.super.value\" }'));\n\t\tawait testObject.writeConfiguration(EditableConfigurationTarget.USER_LOCAL, { key: 'configurationEditing.service.testSetting', value: 'value' });\n\n\t\tconst contents = await fileService.readFile(userDataProfileService.currentProfile.settingsResource);\n\t\tconst parsed = json.parse(contents.value.toString());\n\t\tassert.strictEqual(parsed['configurationEditing.service.testSetting'], 'value');\n\t\tassert.strictEqual(parsed['my.super.setting'], 'my.super.value');\n\t});\n\n\ttest('remove an existing setting - existing file', async () => {\n\t\tawait fileService.writeFile(userDataProfileService.currentProfile.settingsResource, VSBuffer.fromString('{ \"my.super.setting\": \"my.super.value\", \"configurationEditing.service.testSetting\": \"value\" }'));\n\t\tawait testObject.writeConfiguration(EditableConfigurationTarget.USER_LOCAL, { key: 'configurationEditing.service.testSetting', value: undefined });\n\n\t\tconst contents = await fileService.readFile(userDataProfileService.currentProfile.settingsResource);\n\t\tconst parsed = json.parse(contents.value.toString());\n\t\tassert.deepStrictEqual(Object.keys(parsed), ['my.super.setting']);\n\t\tassert.strictEqual(parsed['my.super.setting'], 'my.super.value');\n\t});\n\n\ttest('remove non existing setting - existing file', async () => {\n\t\tawait fileService.writeFile(userDataProfileService.currentProfile.settingsResource, VSBuffer.fromString('{ \"my.super.setting\": \"my.super.value\" }'));\n\t\tawait testObject.writeConfiguration(EditableConfigurationTarget.USER_LOCAL, { key: 'configurationEditing.service.testSetting', value: undefined });\n\n\t\tconst contents = await fileService.readFile(userDataProfileService.currentProfile.settingsResource);\n\t\tconst parsed = json.parse(contents.value.toString());\n\t\tassert.deepStrictEqual(Object.keys(parsed), ['my.super.setting']);\n\t\tassert.strictEqual(parsed['my.super.setting'], 'my.super.value');\n\t});\n\n\ttest('write overridable settings to user settings', async () => {\n\t\tconst key = '[language]';\n\t\tconst value = { 'configurationEditing.service.testSetting': 'overridden value' };\n\t\tawait testObject.writeConfiguration(EditableConfigurationTarget.USER_LOCAL, { key, value });\n\n\t\tconst contents = await fileService.readFile(userDataProfileService.currentProfile.settingsResource);\n\t\tconst parsed = json.parse(contents.value.toString());\n\t\tassert.deepStrictEqual(parsed[key], value);\n\t});\n\n\ttest('write overridable settings to workspace settings', async () => {\n\t\tconst key = '[language]';\n\t\tconst value = { 'configurationEditing.service.testSetting': 'overridden value' };\n\t\tawait testObject.writeConfiguration(EditableConfigurationTarget.WORKSPACE, { key, value });\n\n\t\tconst contents = await fileService.readFile(joinPath(workspaceService.getWorkspace().folders[0].uri, FOLDER_SETTINGS_PATH));\n\t\tconst parsed = json.parse(contents.value.toString());\n\t\tassert.deepStrictEqual(parsed[key], value);\n\t});\n\n\ttest('write overridable settings to workspace folder settings', async () => {\n\t\tconst key = '[language]';\n\t\tconst value = { 'configurationEditing.service.testSetting': 'overridden value' };\n\t\tconst folderSettingsFile = joinPath(workspaceService.getWorkspace().folders[0].uri, FOLDER_SETTINGS_PATH);\n\t\tawait testObject.writeConfiguration(EditableConfigurationTarget.WORKSPACE_FOLDER, { key, value }, { scopes: { resource: folderSettingsFile } });\n\n\t\tconst contents = await fileService.readFile(folderSettingsFile);\n\t\tconst parsed = json.parse(contents.value.toString());\n\t\tassert.deepStrictEqual(parsed[key], value);\n\t});\n\n\ttest('write workspace standalone setting - empty file', async () => {\n\t\tconst target = joinPath(workspaceService.getWorkspace().folders[0].uri, WORKSPACE_STANDALONE_CONFIGURATIONS['tasks']);\n\t\tawait testObject.writeConfiguration(EditableConfigurationTarget.WORKSPACE, { key: 'tasks.service.testSetting', value: 'value' });\n\n\t\tconst contents = await fileService.readFile(target);\n\t\tconst parsed = json.parse(contents.value.toString());\n\t\tassert.strictEqual(parsed['service.testSetting'], 'value');\n\t});\n\n\ttest('write user standalone setting - empty file', async () => {\n\t\tconst target = joinPath(environmentService.userRoamingDataHome, USER_STANDALONE_CONFIGURATIONS['tasks']);\n\t\tawait testObject.writeConfiguration(EditableConfigurationTarget.USER_LOCAL, { key: 'tasks.service.testSetting', value: 'value' });\n\n\t\tconst contents = await fileService.readFile(target);\n\t\tconst parsed = json.parse(contents.value.toString());\n\t\tassert.strictEqual(parsed['service.testSetting'], 'value');\n\t});\n\n\ttest('write workspace standalone setting - existing file', async () => {\n\t\tconst target = joinPath(workspaceService.getWorkspace().folders[0].uri, WORKSPACE_STANDALONE_CONFIGURATIONS['tasks']);\n\t\tawait fileService.writeFile(target, VSBuffer.fromString('{ \"my.super.setting\": \"my.super.value\" }'));\n\n\t\tawait testObject.writeConfiguration(EditableConfigurationTarget.WORKSPACE, { key: 'tasks.service.testSetting', value: 'value' });\n\n\t\tconst contents = await fileService.readFile(target);\n\t\tconst parsed = json.parse(contents.value.toString());\n\t\tassert.strictEqual(parsed['service.testSetting'], 'value');\n\t\tassert.strictEqual(parsed['my.super.setting'], 'my.super.value');\n\t});\n\n\ttest('write user standalone setting - existing file', async () => {\n\t\tconst target = joinPath(environmentService.userRoamingDataHome, USER_STANDALONE_CONFIGURATIONS['tasks']);\n\t\tawait fileService.writeFile(target, VSBuffer.fromString('{ \"my.super.setting\": \"my.super.value\" }'));\n\n\t\tawait testObject.writeConfiguration(EditableConfigurationTarget.USER_LOCAL, { key: 'tasks.service.testSetting', value: 'value' });\n\n\t\tconst contents = await fileService.readFile(target);\n\t\tconst parsed = json.parse(contents.value.toString());\n\t\tassert.strictEqual(parsed['service.testSetting'], 'value');\n\t\tassert.strictEqual(parsed['my.super.setting'], 'my.super.value');\n\t});\n\n\ttest('write workspace standalone setting - empty file - full JSON', async () => {\n\t\tawait testObject.writeConfiguration(EditableConfigurationTarget.WORKSPACE, { key: 'tasks', value: { 'version': '1.0.0', tasks: [{ 'taskName': 'myTask' }] } });\n\n\t\tconst target = joinPath(workspaceService.getWorkspace().folders[0].uri, WORKSPACE_STANDALONE_CONFIGURATIONS['tasks']);\n\t\tconst contents = await fileService.readFile(target);\n\t\tconst parsed = json.parse(contents.value.toString());\n\t\tassert.strictEqual(parsed['version'], '1.0.0');\n\t\tassert.strictEqual(parsed['tasks'][0]['taskName'], 'myTask');\n\t});\n\n\ttest('write user standalone setting - empty file - full JSON', async () => {\n\t\tawait testObject.writeConfiguration(EditableConfigurationTarget.USER_LOCAL, { key: 'tasks', value: { 'version': '1.0.0', tasks: [{ 'taskName': 'myTask' }] } });\n\n\t\tconst target = joinPath(environmentService.userRoamingDataHome, USER_STANDALONE_CONFIGURATIONS['tasks']);\n\t\tconst contents = await fileService.readFile(target);\n\t\tconst parsed = json.parse(contents.value.toString());\n\t\tassert.strictEqual(parsed['version'], '1.0.0');\n\t\tassert.strictEqual(parsed['tasks'][0]['taskName'], 'myTask');\n\t});\n\n\ttest('write workspace standalone setting - existing file - full JSON', async () => {\n\t\tconst target = joinPath(workspaceService.getWorkspace().folders[0].uri, WORKSPACE_STANDALONE_CONFIGURATIONS['tasks']);\n\t\tawait fileService.writeFile(target, VSBuffer.fromString('{ \"my.super.setting\": \"my.super.value\" }'));\n\n\t\tawait testObject.writeConfiguration(EditableConfigurationTarget.WORKSPACE, { key: 'tasks', value: { 'version': '1.0.0', tasks: [{ 'taskName': 'myTask' }] } });\n\n\t\tconst contents = await fileService.readFile(target);\n\t\tconst parsed = json.parse(contents.value.toString());\n\t\tassert.strictEqual(parsed['version'], '1.0.0');\n\t\tassert.strictEqual(parsed['tasks'][0]['taskName'], 'myTask');\n\t});\n\n\ttest('write user standalone setting - existing file - full JSON', async () => {\n\t\tconst target = joinPath(environmentService.userRoamingDataHome, USER_STANDALONE_CONFIGURATIONS['tasks']);\n\t\tawait fileService.writeFile(target, VSBuffer.fromString('{ \"my.super.setting\": \"my.super.value\" }'));\n\n\t\tawait testObject.writeConfiguration(EditableConfigurationTarget.USER_LOCAL, { key: 'tasks', value: { 'version': '1.0.0', tasks: [{ 'taskName': 'myTask' }] } });\n\n\t\tconst contents = await fileService.readFile(target);\n\t\tconst parsed = json.parse(contents.value.toString());\n\t\tassert.strictEqual(parsed['version'], '1.0.0');\n\t\tassert.strictEqual(parsed['tasks'][0]['taskName'], 'myTask');\n\t});\n\n\ttest('write workspace standalone setting - existing file with JSON errors - full JSON', async () => {\n\t\tconst target = joinPath(workspaceService.getWorkspace().folders[0].uri, WORKSPACE_STANDALONE_CONFIGURATIONS['tasks']);\n\t\tawait fileService.writeFile(target, VSBuffer.fromString('{ \"my.super.setting\": ')); // invalid JSON\n\n\t\tawait testObject.writeConfiguration(EditableConfigurationTarget.WORKSPACE, { key: 'tasks', value: { 'version': '1.0.0', tasks: [{ 'taskName': 'myTask' }] } });\n\n\t\tconst contents = await fileService.readFile(target);\n\t\tconst parsed = json.parse(contents.value.toString());\n\t\tassert.strictEqual(parsed['version'], '1.0.0');\n\t\tassert.strictEqual(parsed['tasks'][0]['taskName'], 'myTask');\n\t});\n\n\ttest('write user standalone setting - existing file with JSON errors - full JSON', async () => {\n\t\tconst target = joinPath(environmentService.userRoamingDataHome, USER_STANDALONE_CONFIGURATIONS['tasks']);\n\t\tawait fileService.writeFile(target, VSBuffer.fromString('{ \"my.super.setting\": ')); // invalid JSON\n\n\t\tawait testObject.writeConfiguration(EditableConfigurationTarget.USER_LOCAL, { key: 'tasks', value: { 'version': '1.0.0', tasks: [{ 'taskName': 'myTask' }] } });\n\n\t\tconst contents = await fileService.readFile(target);\n\t\tconst parsed = json.parse(contents.value.toString());\n\t\tassert.strictEqual(parsed['version'], '1.0.0');\n\t\tassert.strictEqual(parsed['tasks'][0]['taskName'], 'myTask');\n\t});\n\n\ttest('write workspace standalone setting should replace complete file', async () => {\n\t\tconst target = joinPath(workspaceService.getWorkspace().folders[0].uri, WORKSPACE_STANDALONE_CONFIGURATIONS['tasks']);\n\t\tawait fileService.writeFile(target, VSBuffer.fromString(`{\n\t\t\t\"version\": \"1.0.0\",\n\t\t\t\"tasks\": [\n\t\t\t\t{\n\t\t\t\t\t\"taskName\": \"myTask1\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"taskName\": \"myTask2\"\n\t\t\t\t}\n\t\t\t]\n\t\t}`));\n\n\t\tawait testObject.writeConfiguration(EditableConfigurationTarget.WORKSPACE, { key: 'tasks', value: { 'version': '1.0.0', tasks: [{ 'taskName': 'myTask1' }] } });\n\n\t\tconst actual = await fileService.readFile(target);\n\t\tconst expected = JSON.stringify({ 'version': '1.0.0', tasks: [{ 'taskName': 'myTask1' }] }, null, '\\t');\n\t\tassert.strictEqual(actual.value.toString(), expected);\n\t});\n\n\ttest('write user standalone setting should replace complete file', async () => {\n\t\tconst target = joinPath(environmentService.userRoamingDataHome, USER_STANDALONE_CONFIGURATIONS['tasks']);\n\t\tawait fileService.writeFile(target, VSBuffer.fromString(`{\n\t\t\t\"version\": \"1.0.0\",\n\t\t\t\"tasks\": [\n\t\t\t\t{\n\t\t\t\t\t\"taskName\": \"myTask1\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"taskName\": \"myTask2\"\n\t\t\t\t}\n\t\t\t]\n\t\t}`));\n\n\t\tawait testObject.writeConfiguration(EditableConfigurationTarget.USER_LOCAL, { key: 'tasks', value: { 'version': '1.0.0', tasks: [{ 'taskName': 'myTask1' }] } });\n\n\t\tconst actual = await fileService.readFile(target);\n\t\tconst expected = JSON.stringify({ 'version': '1.0.0', tasks: [{ 'taskName': 'myTask1' }] }, null, '\\t');\n\t\tassert.strictEqual(actual.value.toString(), expected);\n\t});\n});\n"],
  "mappings": "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",
  "names": []
}
